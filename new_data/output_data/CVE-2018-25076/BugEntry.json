{"buggy_code": ["<?php\n\t/*\n\t\tClass: BTXEvents\n\t\t\tA class to handle events in BigTree.\n\t*/\n\t\n\tclass BTXEvents {\n\t\t\n\t\t/*\n\t\t\tConstructor:\n\t\t\t\tRe-caches stale events.\n\t\t*/\n\t\t\n\t\tfunction __construct() {\n\t\t\t$q = sqlquery(\"SELECT * FROM btx_events_events WHERE recurrence_type != '' AND (last_updated < '\".date(\"Y-m-d\",strtotime(\"-1 year\")).\"' OR last_updated IS NULL)\");\n\t\t\t\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\tself::recacheEvent($f[\"id\"]);\n\t\t\t\tsqlquery(\"UPDATE btx_events_events SET last_updated = NOW() WHERE id = '\".$f[\"id\"].\"'\");\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t\tFunction: cacheEvent\n\t\t\t\tCaches an event.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tid - The id of the event to cache.\n\t\t*/\n\t\t\n\t\tstatic function cacheEvent($id) {\n\t\t\t$id = sqlescape($id);\n\t\t\t$item = self::get($id);\n\t\t\t$title_route = sqlescape($item[\"route\"]);\n\t\t\t\n\t\t\t// It's just a normal event!  Thank heavens!\n\t\t\tif (!$item[\"recurrence_type\"]) {\n\t\t\t\tlist($start_date,$end_date) = self::getCacheTimes($item,$item[\"start_date\"],$item[\"end_date\"]);\n\t\t\t\t\n\t\t\t\t$date_route = date(\"Y-m-d\",strtotime($start_date));\n\n\t\t\t\t// Put the date in the database!\n\t\t\t\tsqlquery(\"INSERT INTO btx_events_date_cache (`event`,`start`,`end`,`title_route`,`date_route`) VALUES ('$id','$start_date','$end_date','$title_route','$date_route')\");\n\t\t\t// It's repeating :(  We need to cache all previous recurrences that happened in the past year, and all that will happen in the next two years.\n\t\t\t} elseif (!$item[\"recurring_end_date\"] || strtotime($item[\"recurring_end_date\"]) > time()) {\n\t\t\t\t// If there's a start date to the recurrence, use it\n\t\t\t\tif ($item[\"start_date\"]) {\n\t\t\t\t\t$start = strtotime($item[\"start_date\"]);\n\t\t\t\t} else {\n\t\t\t\t\t$start = strtotime(\"-1 year\");\n\t\t\t\t}\n\t\t\t\t// If there's an end date, stop there\n\t\t\t\tif ($item[\"end_date\"] || $item[\"recurring_end_date\"]) {\n\t\t\t\t\t$end = strtotime($item[\"recurring_end_date\"] ? $item[\"recurring_end_date\"] : $item[\"end_date\"]);\n\t\t\t\t} else {\n\t\t\t\t\t$end = strtotime(\"+2 years\");\n\t\t\t\t}\n\t\t\t\t// If we've already passed the end date, we don't need to cache things anymore.\n\t\t\t\tif ($end < $start) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// Get a list of the canceled items\n\t\t\t\t$canceled = json_decode($item[\"canceled_recurrences\"],true);\n\t\t\t\t// Loop through our start and end dates finding the next recurrence of events\n\t\t\t\twhile ($start <= $end) {\n\t\t\t\t\t$next = self::findNextRecurrence($item[\"recurrence_type\"],$item[\"recurrence_detail\"],$canceled,$start);\n\t\t\t\t\t// The next time the event occurs could fall outside our caching period\n\t\t\t\t\tif ($next <= $end) {\n\t\t\t\t\t\tlist($start_date,$end_date) = self::getCacheTimes($item,date(\"Y-m-d\",$next),date(\"Y-m-d\",$next));\n\t\t\t\t\t\t$date_route = date(\"Y-m-d\",strtotime($start_date));\n\t\t\t\t\t\tsqlquery(\"INSERT INTO btx_events_date_cache (`event`,`start`,`end`,`title_route`,`date_route`) VALUES ('\".$item[\"id\"].\"','$start_date','$end_date','$title_route','$date_route')\");\n\t\t\t\t\t}\n\t\t\t\t\t$start = strtotime(date(\"Y-m-d\",$next).\" +1 day\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: findNextRecurrence\n\t\t\t\tFinds the next time an event exists.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\ttype - The recurrence type.\n\t\t\t\tdetail - The recurrence detail.\n\t\t\t\tcanceled - An array of canceled recurrences.\n\t\t\t\ttime - The start time to begin looking from (in seconds since Unix epoch).\n\t\t\t\t\n\t\t\tReturns:\n\t\t\t\tThe next occurence of the event in seconds since Unix epoch.\n\t\t*/\n\n\t\tstatic function findNextRecurrence($type,$detail,$canceled = array(),$time = false) {\n\t\t\tif (!$time) {\n\t\t\t\t$time = time();\n\t\t\t}\n\t\t\t// Daily Recurrence\n\t\t\tif ($type == \"daily\") {\n\t\t\t\t// If it hasn't been canceled, return the date, otherwise try again tomorrow.\n\t\t\t\tif (!in_array(date(\"Y-m-d\",$time),$canceled)) {\n\t\t\t\t\treturn $time;\n\t\t\t\t} else {\n\t\t\t\t\treturn self::findNextRecurrence($type,$detail,$canceled,strtotime(date(\"Y-m-d\",$time).\" +1 day\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Weekly Recurrence\n\t\t\tif ($type == \"weekly\") {\n\t\t\t\t$current_day_of_week = date(\"w\",$time);\n\t\t\t\tif ($detail > $current_day_of_week) {\n\t\t\t\t\t$time = strtotime(date(\"Y-m-d\",$time).\" +\".($detail - $current_day_of_week).\" days\");\n\t\t\t\t} elseif ($detail < $current_day_of_week) {\n\t\t\t\t\t$time = strtotime(date(\"Y-m-d\",$time).\" +\".(7 - $current_day_of_week + $detail).\" days\");\n\t\t\t\t}\n\n\t\t\t\t// If it's canceled, next week please.\n\t\t\t\tif (!in_array(date(\"Y-m-d\",$time),$canceled)) {\n\t\t\t\t\treturn $time;\n\t\t\t\t} else {\n\t\t\t\t\treturn self::findNextRecurrence($type,$detail,$canceled,strtotime(date(\"Y-m-d\",$time).\" +1 week\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Monthly Recurrence\n\t\t\tif ($type == \"monthly\") {\n\t\t\t\t// If the detail is numeric, it's simply the (x)th day of the month.\n\t\t\t\tif (is_numeric($detail)) {\n\t\t\t\t\t$current_day_of_month = date(\"j\",$time);\n\t\t\t\t\t// Move to the 1st of the next month if the repeat has already occurred this month.\n\t\t\t\t\tif ($current_day_of_month > $detail) {\n\t\t\t\t\t\t$time = strtotime(date(\"Y-m-1\",$time).\" +1 month\");\n\t\t\t\t\t}\n\t\t\t\t\t// If we're looking for something on the 31st and a month only has 30 days, skip it.\n\t\t\t\t\tif ($detail > date(\"t\",$time)) {\n\t\t\t\t\t\treturn self::findNextRecurrence($type,$detail,$canceled,strtotime(date(\"Y-m-1\",$time).\" +1 month\"));\n\t\t\t\t\t}\n\t\t\t\t\t$time = strtotime(date(\"Y-m-\".$detail,$time));\n\n\t\t\t\t\t// If it's canceled, next month please.\n\t\t\t\t\tif (!in_array(date(\"Y-m-d\",$time),$canceled)) {\n\t\t\t\t\t\treturn $time;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn self::findNextRecurrence($type,$detail,$canceled,strtotime(date(\"Y-m-1\",$time).\" +1 month\"));\n\t\t\t\t\t}\n\t\t\t\t// We need to calculate a more crazy date like the second Thursday of each month.\n\t\t\t\t} else {\n\t\t\t\t\tlist($x,$week,$day) = explode(\"#\",$detail);\n\t\t\t\t\t\n\t\t\t\t\t// New strategy, start at the first day of the current month and walk through each day.  If the x'th day is already passed or is canceled, then we'll move on.\n\t\t\t\t\t$start = strtotime(date(\"Y-m-1\",$time));\n\t\t\t\t\t$end = strtotime(date(\"Y-m-t\",$time));\n\t\t\t\t\t$current_week = 1;\n\t\t\t\t\t\n\t\t\t\t\twhile ($start <= $end) {\n\t\t\t\t\t\t$current_day = date(\"w\",$start);\n\t\t\t\t\t\tif ($current_week == $week && $current_day == $day) {\n\t\t\t\t\t\t\tif ($time > $start || in_array(date(\"Y-m-d\",$start),$canceled)) {\n\t\t\t\t\t\t\t\treturn self::findNextRecurrence($type,$detail,$canceled,strtotime(date(\"Y-m-1\",$time).\" +1 month\"));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn $start;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($current_day == $day) {\n\t\t\t\t\t\t\t$current_week++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Add a day\n\t\t\t\t\t\t$start = BigTree::dateFromOffset($start,\"+1 day\",\"U\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ($current_week < $week) {\n\t\t\t\t\t\treturn self::findNextRecurrence($type,$detail,$canceled,strtotime(date(\"Y-m-1\",$time).\" +1 month\"));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// Yearly Recurrence\n\t\t\tif ($type == \"yearly\") {\n\t\t\t\t$next = strtotime(date(\"Y\",$time).\"-\".$detail);\n\t\t\t\tif ($next < $time) {\n\t\t\t\t\t$next = strtotime((date(\"Y\",$time)+1).\"-\".$detail);\n\t\t\t\t}\n\t\t\t\t// If it's canceled, next year please.\n\t\t\t\tif (!in_array(date(\"Y-m-d\",$next),$canceled)) {\n\t\t\t\t\treturn $next;\n\t\t\t\t} else {\n\t\t\t\t\treturn self::findNextRecurrence($type,$detail,$canceled,strtotime(date(\"Y-m-d\",$next).\" +1 year\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: formattedDate\n\t\t\t\tReturns a string of formatted date/time based on an event having a start/end date and times.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\titem - The event instance array.\n\t\t\t\tdate_format - The date format (compatible with PHP's date function)\n\t\t\t\ttime_format - The time format (compatible with PHP's time format)\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tA date/time string.\n\t\t*/\n\t\t\n\t\tstatic function formattedDate($item,$date_format = \"F j, Y\",$time_format = \"g:ia\") {\n\t\t\t$s = strtotime($item[\"start\"]);\n\t\t\t$e = strtotime($item[\"end\"]);\n\t\t\t// If it's a single all day event...\n\t\t\tif ($item[\"all_day\"]) {\n\t\t\t\tif (date(\"Y-m-d\",$s) == date(\"Y-m-d\",$e)) {\n\t\t\t\t\treturn date($date_format,$s);\n\t\t\t\t} else {\n\t\t\t\t\treturn date($date_format,$s).\" - \".date($date_format,$e);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Single day event\n\t\t\t\tif (date(\"Y-m-d\",$s) == date(\"Y-m-d\",$e)) {\n\t\t\t\t\tif ($s != $e && $item[\"end_time\"] != \"\") {\n\t\t\t\t\t\treturn date($date_format,$s).\" &mdash; \".date($time_format,$s).\" - \".date($time_format,$e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn date($date_format,$s).\" &mdash; \".date($time_format,$s);\n\t\t\t\t\t}\n\t\t\t\t// Multi day event\n\t\t\t\t} else {\n\t\t\t\t\t// Starts one night, ends next morning?\n\t\t\t\t\tif (date(\"H\",$s) > date(\"H\",$e)) {\n\t\t\t\t\t\treturn date($date_format,$s).\" &mdash; \".date($time_format,$s).\" - \".date($time_format,$e);\n\t\t\t\t\t// Probably meant an event to be on multiple days for a few hours each day.\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn date($date_format,$s).\" - \".date($date_format,$e).\" &mdash; \".date($time_format,$s).\" - \".date($time_format,$e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: formattedTime\n\t\t\t\tReturns a string of formatted time based on an event having start/end times.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\titem - The event instance array.\n\t\t\t\ttime_format - The time format (compatible with PHP's time format)\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tA date/time string.\n\t\t*/\n\t\t\n\t\tstatic function formattedTime($item,$time_format = \"gi:a\") {\n\t\t\t$s = strtotime($item[\"start\"]);\n\t\t\t$e = strtotime($item[\"end\"]);\n\t\t\tif ($item[\"all_day\"]) {\n\t\t\t\treturn \"All Day\";\n\t\t\t}\n\t\t\tif ($s != $e && $item[\"end_time\"] != \"\") {\n\t\t\t    return date($time_format,$s).\" - \".date($time_format,$e);\n\t\t\t} else {\n\t\t\t    return date($time_format,$s);\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: publishHook\n\t\t\t\tUsed by the BigTree form to cache the event on publish.\n\t\t*/\n\t\t\n\t\tstatic function publishHook($table,$id,$changes,$many_to_many,$tags) {\n\t\t\tself::recacheEvent($id);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: get\n\t\t\t\tReturns an event with its fields decoded.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\titem - Either the event id or an event array.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn event array with its fields decoded.\n\t\t*/\n\t\t\n\t\tstatic function get($item) {\n\t\t\tglobal $cms;\n\t\t\t\n\t\t\tif (!is_array($item)) {\n\t\t\t\t$item = sqlfetch(sqlquery(\"SELECT * FROM btx_events_events WHERE id = '\".sqlescape($item).\"'\"));\n\t\t\t}\n\t\t\tif (!is_array($item)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tforeach ($item as $key => $val) {\n\t\t\t\tif (is_array($val)) {\n\t\t\t\t\t$item[$key] = BigTree::untranslateArray($val);\n\t\t\t\t} elseif (is_array(json_decode($val,true))) {\n\t\t\t\t\t$item[$key] = BigTree::untranslateArray(json_decode($val,true));\n\t\t\t\t} else {\n\t\t\t\t\t$item[$key] = $cms->replaceInternalPageLinks($val);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $item;\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: getCacheTimes\n\t\t\t\tReturns the start and end timestamps for an event.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\titem - Event array.\n\t\t\t\tstart_date - The date of the occurence.\n\t\t\t\tend_date - The end date of the occurence.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of timestamps (first being start, second being end)\n\t\t*/\t\t\t\t\n\n\t\tstatic function getCacheTimes($item,$start_date,$end_date) {\n\t\t\t// If they didn't enter an end date, we're going to assume it ends the same day it starts\n\t\t\tif ($end_date == \"0000-00-00\" || !$end_date) {\n\t\t\t\t$end_date = $start_date;\n\t\t\t}\n\t\t\t// If it's an all day event or we don't know the start time, set the end time to 11:59\n\t\t\tif ($item[\"all_day\"] || !$item[\"start_time\"]) {\n\t\t\t\t$start_date = strtotime($start_date.\" 00:00:00\");\n\t\t\t\t$end_date = strtotime($end_date.\" 23:59:59\");\n\t\t\t} else {\n\t\t\t\t$start_date = strtotime($start_date.\" \".$item[\"start_time\"]);\n\t\t\t\t// If we have an end time, let's see if it's actually the next day.\n\t\t\t\tif ($item[\"end_time\"]) {\n\t\t\t\t\tif (strtotime($item[\"start_time\"]) < strtotime($item[\"end_time\"]) && $start_date == $end_date) {\n\t\t\t\t\t\t$end_date = strtotime($start_date.\" \".$item[\"end_time\"].\" +1 day\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$end_date = strtotime($end_date.\" \".$item[\"end_time\"]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$end_date = strtotime($end_date.\" 23:59:59\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t$start_date = date(\"Y-m-d H:i:s\",$start_date);\n\t\t\t$end_date = date(\"Y-m-d H:i:s\",$end_date);\n\t\t\treturn array($start_date,$end_date);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getCategoriesByParent\n\t\t\t\tReturns an array of categories with a given parent ID.\n\n\t\t\tParameters:\n\t\t\t\tparent - The parent ID to check.\n\t\t\t\tsort - The sort order of the categories (defaults to positioned).\n\n\t\t\tReturns:\n\t\t\t\tAn array of categories.\n\t\t*/\n\n\t\tstatic function getCategoriesByParent($parent = false,$sort = \"position DESC, id ASC\") {\n\t\t\t$categories = array();\n\t\t\tif (!$parent) {\n\t\t\t\t$q = sqlquery(\"SELECT * FROM btx_events_categories WHERE parent IS NULL ORDER BY $sort\");\n\t\t\t} else {\n\t\t\t\t$q = sqlquery(\"SELECT * FROM btx_events_categories WHERE parent = '$parent' ORDER BY $sort\");\n\t\t\t}\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$categories[] = $f;\n\t\t\t}\n\t\t\treturn $categories;\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: getCategory\n\t\t\t\tReturns a category for the given id.\n\n\t\t\tParameters:\n\t\t\t\tid - The category id.\n\n\t\t\tReturns:\n\t\t\t\tA category entry.\n\t\t*/\n\n\t\tstatic function getCategory($id) {\n\t\t\t$id = sqlescape($id);\n\t\t\treturn sqlfetch(sqlquery(\"SELECT * FROM btx_events_categories WHERE id = '$id'\"));\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getCategoryByRoute\n\t\t\t\tReturns a category for the given route.\n\n\t\t\tParameters:\n\t\t\t\troute - The category route.\n\n\t\t\tReturns:\n\t\t\t\tA category entry.\n\t\t*/\n\n\t\tstatic function getCategoryByRoute($route) {\n\t\t\t$route = sqlescape($route);\n\t\t\treturn sqlfetch(sqlquery(\"SELECT * FROM btx_events_categories WHERE route = '$route'\"));\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getCategoryLineage\n\t\t\t\tReturns an array of the ancestors of a given category.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tcategory - A category ID or category array.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of categories starting with the \"oldest\".\n\t\t*/\n\t\t\n\t\tstatic function getCategoryLineage($category,$ancestors = array()) {\n\t\t\tif (!is_array($category)) {\n\t\t\t\t$category = sqlfetch(sqlquery(\"SELECT * FROM btx_events_categories WHERE id = '\".sqlescape($category).\"'\"));\n\t\t\t}\n\t\t\tif ($category[\"parent\"] && $category[\"parent\"] != $category[\"id\"]) {\n\t\t\t\t$parent = sqlfetch(sqlquery(\"SELECT * FROM btx_events_categories WHERE id = '\".sqlescape($category[\"parent\"]).\"'\"));\n\t\t\t\t$ancestors = array_merge(array($parent),$ancestors);\n\t\t\t\treturn self::getCategoryLineage($parent,$ancestors);\n\t\t\t}\n\t\t\treturn $ancestors;\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: getEventCategories\n\t\t\t\tReturns an array of categories that an event belongs to.\n\n\t\t\tParameters:\n\t\t\t\tevent - The event entry or event id.\n\n\t\t\tReturns:\n\t\t\t\tAn array of IDs.\n\t\t*/\n\n\t\tstatic function getEventCategories($event) {\n\t\t\t$event = is_array($event) ? sqlescape($event[\"id\"]) : sqlescape($event);\n\t\t\t$categories = array();\n\t\t\t$q = sqlquery(\"SELECT btx_events_categories.* FROM btx_events_categories JOIN btx_events_event_categories ON btx_events_categories.id = btx_events_event_categories.category WHERE btx_events_event_categories.event = '$event'\");\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$categories[] = $f;\n\t\t\t}\n\t\t\treturn $categories;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventCategoryIDs\n\t\t\t\tReturns an array of category IDs that an event belongs to.\n\n\t\t\tParameters:\n\t\t\t\tevent - The event entry or event id.\n\n\t\t\tReturns:\n\t\t\t\tAn array of IDs.\n\t\t*/\n\n\t\tstatic function getEventCategoryIDs($event) {\n\t\t\t$event = is_array($event) ? sqlescape($event[\"id\"]) : sqlescape($event);\n\t\t\t$categories = array();\n\t\t\t$q = sqlquery(\"SELECT * FROM btx_events_event_categories WHERE event = '$event'\");\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$categories[] = $f[\"category\"];\n\t\t\t}\n\t\t\treturn $categories;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventCategoryList\n\t\t\t\tReturns a nested category list.\n\t\t*/\n\t\t\n\t\tstatic function getEventCategoryList($original_list,$parent = 0,$level = \"\") {\n\t\t\t$list = array();\n\t\t\t$q = sqlquery(\"SELECT * FROM btx_events_categories WHERE parent = '\".sqlescape($parent).\"' ORDER BY name\");\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$list[$f[\"id\"]] = $level.$f[\"name\"];\n\t\t\t\t$list = $list + self::getEventCategoryList(false,$f[\"id\"],trim($level).\"--- \");\n\t\t\t}\n\t\t\treturn $list;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventInstances\n\t\t\t\tReturns instances of an event.\n\n\t\t\tParameters:\n\t\t\t\tevent - An event array.\n\t\t\t\tupcoming - Whether to return only upcoming instances (defaults to false)\n\n\t\t\tReturns:\n\t\t\t\tAn array of event instances\n\n\t\t\tSee Also:\n\t\t\t\t<getUpcomingEventInstances>\n\t\t*/\n\n\t\tstatic function getEventInstances($event,$upcoming = false) {\n\t\t\t$instances = array();\n\t\t\t$upcoming = $upcoming ? \" AND end >= NOW()\" : \"\";\n\n\t\t\t$q = sqlquery(\"SELECT * FROM btx_events_date_cache WHERE event = '\".sqlescape($event[\"id\"]).\"' $upcoming ORDER BY start ASC\");\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$f[\"instance\"] = $f[\"id\"];\n\t\t\t\t$instances[] = array_merge($f,$event);\n\t\t\t}\n\n\t\t\treturn $instances;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventsByDate\n\t\t\t\tReturns event instances for a given date.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tdate - The date (Y-m-d format) to pull events for.\n\t\t\t\tfeatured - Whether to pull only featured events or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateRange>\n\t\t*/\n\t\t\n\t\tstatic function getEventsByDate($date,$featured = false) {\n\t\t\treturn self::getEventsByDateRange($date,$date,$featured);\n\t\t}\n\t\t\n\t\t\n\t\t/*\n\t\t\tFunction: getEventsByDateInCategories\n\t\t\t\tReturns event instances for a given date in given categories.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tdate - The date (Y-m-d format) to pull events for.\n\t\t\t\tcategories - An array of categories to get events for.\n\t\t\t\tfeatured - Whether to pull only featured events or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateRangeInCategories>\n\t\t*/\n\t\t\n\t\tstatic function getEventsByDateInCategories($date,$categories,$featured = false) {\n\t\t\treturn self::getEventsByDateRangeInCategories($date,$date,$categories,$featured);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventsByDateInCategoriesWithSubcategories\n\t\t\t\tReturns event instances for a given date in given categories and their subcategories.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tdate - The date (Y-m-d format) to pull events for.\n\t\t\t\tcategories - An array of categories to get events for.\n\t\t\t\tfeatured - Whether to pull only featured events or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateRangeInCategories>\n\t\t*/\n\t\t\n\t\tstatic function getEventsByDateInCategoriesWithSubcategories($date,$categories,$featured = false) {\n\t\t\t$with_sub = $categories;\n\t\t\tforeach ($categories as $cat) {\n\t\t\t\t$with_sub = array_merge($with_sub,self::getSubcategoriesOfCategory($cat));\n\t\t\t}\n\t\t\treturn self::getEventsByDateInCategories($date,$with_sub,$featured);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventsByDateInCategory\n\t\t\t\tReturns event instances for a given date in given category.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tdate - The date (Y-m-d format) to pull events for.\n\t\t\t\tcategory - A category array or ID.\n\t\t\t\tfeatured - Whether to pull only featured events or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateRangeInCategories>\n\t\t*/\n\t\t\n\t\tstatic function getEventsByDateInCategory($date,$category,$featured = false) {\n\t\t\treturn self::getEventsByDateRangeInCategories($date,$date,array($category),$featured);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventsByDateInCategoryWithSubcategories\n\t\t\t\tReturns event instances for a given date in given category and its subcategories.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tdate - The date (Y-m-d format) to pull events for.\n\t\t\t\tcategory - A category array or ID.\n\t\t\t\tfeatured - Whether to pull only featured events or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateRangeInCategoriesWithSubcategories>\n\t\t*/\n\t\t\n\t\tstatic function getEventsByDateInCategoryWithSubcategories($date,$category,$featured = false) {\n\t\t\treturn self::getEventsByDateRangeInCategoriesWithSubcategories($date,$date,array($category),$featured);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventsByDateRange\n\t\t\t\tReturns event instances for a given date range.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tstart_date - The start date (Y-m-d format) to pull events for.\n\t\t\t\tend_date - The end date (Y-m-d format) to pull events for.\n\t\t\t\tfeatured - Whether to pull only featured events or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDate>\n\t\t*/\n\t\t\n\t\tstatic function getEventsByDateRange($start_date,$end_date,$featured = false) {\n\t\t\t$events = array();\n\t\t\tif ($featured) {\n\t\t\t\t$featured = \" AND btx_events_events.featured = 'on' \";\n\t\t\t}\n\n\t\t\t$q = sqlquery(\"SELECT btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_events.* FROM btx_events_events JOIN btx_events_date_cache WHERE btx_events_date_cache.event = btx_events_events.id AND btx_events_date_cache.end >= '$start_date 00:00:00' AND btx_events_date_cache.start <= '$end_date 23:59:59' $featured ORDER BY btx_events_date_cache.start ASC\");\n\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$events[] = self::get($f);\n\t\t\t}\n\t\t\treturn $events;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventsByDateRangeInCategories\n\t\t\t\tReturns event instances for a given date range in the given categories.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tstart_date - The start date (Y-m-d format) to pull events for.\n\t\t\t\tend_date - The end date (Y-m-d format) to pull events for.\n\t\t\t\tcategories - An array of categories to get events for.\n\t\t\t\tfeatured - Whether to pull only featured events or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateInCategories>\n\t\t*/\n\t\t\n\t\tstatic function getEventsByDateRangeInCategories($start_date,$end_date,$categories,$featured = false) {\n\t\t\t$events = array();\n\t\t\tif ($featured) {\n\t\t\t\t$featured = \" AND btx_events_events.featured = 'on' \";\n\t\t\t}\n\n\t\t\t$cat_search = array();\n\t\t\tforeach ($categories as $category) {\n\t\t\t\t$category = is_array($category) ? sqlescape($category[\"id\"]) : sqlescape($category);\n\t\t\t\t$cat_search[] = \"btx_events_event_categories.category = '$category'\";\n\t\t\t}\n\n\t\t\tif (!count($cat_search)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t$q = sqlquery(\"SELECT DISTINCT(CONCAT(btx_events_date_cache.event,btx_events_date_cache.start,btx_events_date_cache.end)),btx_events_date_cache.event,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_date_cache.start,btx_events_date_cache.end FROM btx_events_date_cache JOIN btx_events_event_categories WHERE btx_events_date_cache.event = btx_events_event_categories.event AND btx_events_date_cache.end >= '$start_date 00:00:00' AND btx_events_date_cache.start <= '$end_date 23:59:59' AND (\".implode(\" OR \",$cat_search).\") $featured ORDER BY btx_events_date_cache.start ASC\");\n\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$event = self::get($f[\"event\"]);\n\t\t\t\tif ($event) {\n\t\t\t\t\t$event[\"start\"] = $f[\"start\"];\n\t\t\t\t\t$event[\"end\"] = $f[\"end\"];\n\t\t\t\t\t$event[\"instance\"] = $f[\"instance\"];\n\t\t\t\t\t$event[\"title_route\"] = $f[\"title_route\"];\n\t\t\t\t\t$event[\"date_route\"] = $f[\"date_route\"];\n\t\t\t\t\t$events[] = $event;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $events;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventsByDateRangeInCategoriesWithSubcategories\n\t\t\t\tReturns event instances for a given date range in the given categories and their subcategories.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tstart_date - The start date (Y-m-d format) to pull events for.\n\t\t\t\tend_date - The end date (Y-m-d format) to pull events for.\n\t\t\t\tcategories - An array of categories to get events for.\n\t\t\t\tfeatured - Whether to pull only featured events or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateInCategoriesWithSubcategories>\n\t\t*/\n\t\t\n\t\tstatic function getEventsByDateRangeInCategoriesWithSubcategories($start_date,$end_date,$categories,$featured = false) {\n\t\t\t$with_sub = $categories;\n\t\t\tforeach ($categories as $cat) {\n\t\t\t\t$with_sub = array_merge($with_sub,self::getSubcategoriesOfCategory($cat));\n\t\t\t}\n\t\t\treturn self::getEventsByDateRangeInCategories($start_date,$end_date,$with_sub,$featured);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventsByDateRangeInCategory\n\t\t\t\tReturns event instances for a given date range in the given category.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tstart_date - The start date (Y-m-d format) to pull events for.\n\t\t\t\tend_date - The end date (Y-m-d format) to pull events for.\n\t\t\t\tcategory - A category array or category ID.\n\t\t\t\tfeatured - Whether to pull only featured events or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateInCategories>\n\t\t*/\n\t\t\n\t\tstatic function getEventsByDateRangeInCategory($start_date,$end_date,$category,$featured = false) {\n\t\t\treturn self::getEventsByDateRangeInCategories($start_date,$end_date,array($category),$featured);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventsByDateRangeInCategoryWithSubcategories\n\t\t\t\tReturns event instances for a given date range in the given category and its subcategories.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tstart_date - The start date (Y-m-d format) to pull events for.\n\t\t\t\tend_date - The end date (Y-m-d format) to pull events for.\n\t\t\t\tcategory - A category array or category ID.\n\t\t\t\tfeatured - Whether to pull only featured events or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateInCategoryWithSubcategories>\n\t\t*/\n\t\t\n\t\tstatic function getEventsByDateRangeInCategoryWithSubcategories($start_date,$end_date,$category,$featured = false) {\n\t\t\treturn self::getEventsByDateRangeInCategoriesWithSubcategories($start_date,$end_date,array($category),$featured);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getFeaturedEventsByDate\n\t\t\t\tReturns featured event instances for a given date.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tdate - The date (Y-m-d format) to pull events for.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDate>\n\t\t*/\n\n\t\tstatic function getFeaturedEventsByDate($date) {\n\t\t\treturn self::getEventsByDate($date,true);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getFeaturedEventsByDateRange\n\t\t\t\tReturns featured event instances for a given date range.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tstart_date - The start date (Y-m-d format) to pull events for.\n\t\t\t\tend_date - The end date (Y-m-d format) to pull events for.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateRange>\n\t\t*/\n\n\t\tstatic function getFeaturedEventsByDateRange($start_date,$end_date) {\n\t\t\treturn self::getEventsByDateRange($start_date,$end_date,true);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getFeaturedEventsByDateRangeInCategories\n\t\t\t\tReturns featured event instances for a given date range in the provided categories.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tstart_date - The start date (Y-m-d format) to pull events for.\n\t\t\t\tend_date - The end date (Y-m-d format) to pull events for.\n\t\t\t\tcategories - An array of categories to get events for.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateRangeInCategories>\n\t\t*/\n\n\t\tstatic function getFeaturedEventsByDateRangeInCategories($start_date,$end_date,$categories) {\n\t\t\treturn self::getEventsByDateRangeInCategories($start_date,$end_date,$categories,true);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getFeaturedEventsByDateRangeInCategoriesWithSubcategories\n\t\t\t\tReturns featured event instances for a given date range in the provided categories and their subcategories.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tstart_date - The start date (Y-m-d format) to pull events for.\n\t\t\t\tend_date - The end date (Y-m-d format) to pull events for.\n\t\t\t\tcategories - An array of categories to get events for.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateRangeInCategoriesWithSubcategories>\n\t\t*/\n\n\t\tstatic function getFeaturedEventsByDateRangeInCategoriesWithSubcategories($start_date,$end_date,$categories) {\n\t\t\treturn self::getEventsByDateRangeInCategoriesWithSubcategories($start_date,$end_date,$categories,true);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getFeaturedSearchResultsInDateRange\n\t\t\t\tReturns featured event instances matching a given query in a specified date range.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tquery - The string to search for.\n\t\t\t\tstart_date - Beginning date (Y-m-d).\n\t\t\t\tend_date - Ending date (Y-m-d).\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances ordered by soonest.\n\n\t\t\tSee Also:\n\t\t\t\t<getSearchResultsInDateRange>\n\t\t*/\n\n\t\tstatic function getFeaturedSearchResultsInDateRange($query,$start_date,$end_date) {\n\t\t\treturn self::getSearchResultsInDateRange($query,$start_date,$end_date,true);\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: getInstance\n\t\t\t\tReturns an instance of an event (combined date cache and event entry).\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tid - The id of the event instance.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn event array with its fields decoded.\n\t\t*/\n\t\t\n\t\tstatic function getInstance($id) {\n\t\t\treturn self::get(sqlfetch(sqlquery(\"SELECT btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_events.* FROM btx_events_events JOIN btx_events_date_cache WHERE btx_events_date_cache.event = btx_events_events.id AND btx_events_date_cache.id = '$id'\")));\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: getInstanceByRoute\n\t\t\t\tReturns an instance of an event (combined date cache and event entry).\n\t\t\t\n\t\t\tParameters:\n\t\t\t\ttitle_route - The title route of the event instance.\n\t\t\t\tdate_route - The date route of the event instance.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn event array with its fields decoded.\n\t\t*/\n\t\t\n\t\tstatic function getInstanceByRoute($title_route,$date_route) {\n\t\t\treturn self::get(sqlfetch(sqlquery(\"SELECT btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_events.* FROM btx_events_events JOIN btx_events_date_cache WHERE btx_events_date_cache.event = btx_events_events.id AND btx_events_date_cache.title_route = '\".sqlescape($title_route).\"' AND btx_events_date_cache.date_route = '\".sqlescape($date_route).\"'\")));\n\t\t\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getKeyedEventsDateRangeForEvents\n\t\t\t\tReturns an array of days as keys with the events that fall in each day as an array.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tevents - An array of event instances.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tA keyed array (dates are keys, array of events are vals) for the events passed in.\n\t\t*/\n\t\t\n\t\tstatic function getKeyedDateRangeForEvents($events) {\n\t\t\t$days = array();\n\t\t\tforeach ($events as $event) {\n\t\t\t\t$days[date(\"Y-m-d\",strtotime($event[\"start\"]))][] = $event;\n\t\t\t}\n\t\t\treturn $days;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getNumberOfEventsOnDate\n\t\t\t\tReturns number of events occurring on a given date.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tdate - The date (Y-m-d format) to pull events for.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tA number.\n\t\t*/\n\t\t\n\t\tstatic function getNumberOfEventsOnDate($date) {\n\t\t\t$date = date(\"Y-m-d\",strtotime($date));\n\t\t\t$f = sqlfetch(sqlquery(\"SELECT COUNT(id) AS `count` FROM btx_events_date_cache WHERE start >= '$date 00:00:00' AND end <= '$date 23:59:59'\"));\n\t\t\treturn $f[\"count\"];\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getRandomEvent\n\t\t\t\tReturns a random event instance occurring in the future.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tfeatured - Whether to return a featured event or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn event instance.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getRandomEventByDate>\n\t\t*/\n\t\t\n\t\tstatic function getRandomEvent($featured = false) {\n\t\t\tif ($featured) {\n\t\t\t\t$featured = \" AND btx_events_events.featured = 'on' \";\n\t\t\t}\n\n\t\t\t$q = sqlquery(\"SELECT btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_events.* FROM btx_events_events JOIN btx_events_date_cache WHERE btx_events_date_cache.event = btx_events_events.id AND btx_events_date_cache.end >= NOW() $featured ORDER BY RAND() LIMIT 1\");\n\n\t\t\treturn self::get(sqlfetch($q));\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: getRandomEventByDate\n\t\t\t\tReturns a random event instance occurring on a specific date.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tdate - The date to pull an event for.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn event instance.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getSingleEventByDate>\n\t\t*/\n\n\t\tstatic function getRandomEventByDate($date) {\n\t\t\treturn self::getSingleEventByDate($date,\"\",\"RAND()\");\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getRandomFeaturedEvent\n\t\t\t\tReturns a random featured event instance occurring in the future.\n\t\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn event instance.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getRandomEvent>\n\t\t*/\n\t\t\n\t\tstatic function getRandomFeaturedEvent() {\n\t\t\treturn self::getRandomEvent(true);\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: getRandomFeaturedEventByDate\n\t\t\t\tReturns a random featured event instance occurring on a specific date.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tdate - The date to pull an event for.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn event instance.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getRandomEventByDate>\n\t\t*/\n\n\t\tstatic function getRandomFeaturedEventByDate($date) {\n\t\t\treturn self::getSingleEventByDate($date,true,\"RAND()\");\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getSearchResultsInDateRange\n\t\t\t\tReturns event instances matching a given query in a specified date range.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tquery - The string to search for.\n\t\t\t\tstart_date - Beginning date (Y-m-d).\n\t\t\t\tend_date - Ending date (Y-m-d).\n\t\t\t\tfeatured - Whether to only return featured or not (defaults to false for all).\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances ordered by soonest.\n\t\t*/\n\n\t\tstatic function getSearchResultsInDateRange($query,$start_date,$end_date,$featured = false) {\n\t\t\t$events = array();\n\t\t\tif ($featured) {\n\t\t\t\t$featured = \" AND btx_events_events.featured = 'on' \";\n\t\t\t}\n\n\t\t\t$words = explode(\" \",$query);\n\t\t\t$qwords = array();\n\t\t\tif ($words) {\n\t\t\t\tforeach ($words as $word) {\n\t\t\t\t\t$qwords[] = \"(btx_events_events.title LIKE '%$word%' OR btx_events_events.description LIKE '%$word%')\";\n\t\t\t\t}\n\t\t\t\t$qwords = implode(\" AND \",$qwords).\" AND \";\n\t\t\t} else {\n\t\t\t\t$qwords = \"\";\n\t\t\t}\n\n\t\t\t$q = sqlquery(\"SELECT btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_events.* FROM btx_events_events JOIN btx_events_date_cache WHERE btx_events_date_cache.event = btx_events_events.id AND $qwords btx_events_date_cache.end >= '$start_date 00:00:00' AND btx_events_date_cache.start <= '$end_date 23:59:59' $featured ORDER BY btx_events_date_cache.start ASC\");\n\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$event = self::get($f);\n\t\t\t\t$events[] = $event;\n\t\t\t}\n\t\t\treturn $events;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getSingleEventByDate\n\t\t\t\tReturns a single event for a given date.\n\n\t\t\tParameters:\n\t\t\t\tdate - The date to check for events (in Y-m-d format).\n\t\t\t\tfeatured - Whether to limit the search exclusively to featured events.\n\t\t\t\tsort - The sort to go by when picking the first event (defaults to most recently created)\n\n\t\t\tReturns:\n\t\t\t\tAn event instance.\n\t\t*/\n\n\t\tstatic function getSingleEventByDate($date,$featured = false,$sort = \"id DESC\") {\n\t\t\tif ($featured) {\n\t\t\t\t$featured = \" AND btx_events_events.featured = 'on' \";\n\t\t\t}\n\n\t\t\t$q = sqlquery(\"SELECT btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_events.* FROM btx_events_events JOIN btx_events_date_cache WHERE btx_events_date_cache.event = btx_events_events.id AND btx_events_date_cache.start <= '$date 23:59:59' AND btx_events_date_cache.end >= '$date 00:00:00' $featured ORDER BY $sort LIMIT 1\");\n\n\t\t\treturn self::get(sqlfetch($q));\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getSingleFeaturedEventByDate\n\t\t\t\tReturns a single featured event for a given date.\n\n\t\t\tParameters:\n\t\t\t\tdate - The date to check for events (in Y-m-d format).\n\t\t\t\tsort - The sort to go by when picking the first event (defaults to most recently created)\n\n\t\t\tReturns:\n\t\t\t\tAn event instance.\n\t\t*/\n\n\t\tstatic function getSingleFeaturedEventByDate($date,$sort = \"id DESC\") {\n\t\t\treturn self::getSingleEventByDate($date,true,$sort);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getSubcategoriesOfCategory\n\t\t\t\tReturns all the subcategories (and their subcategories) of a given category.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tcategory - Either a category id or array.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of categories.\n\t\t*/\n\t\t\n\t\tstatic function getSubcategoriesOfCategory($category) {\n\t\t\t$category = is_array($category) ? sqlescape($category[\"id\"]) : sqlescape($category);\n\t\t\t$categories = array();\n\t\t\t$q = sqlquery(\"SELECT * FROM btx_events_categories WHERE parent = '$category'\");\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$categories[] = $f;\n\t\t\t\t$categories = array_merge($categories,self::getSubcategoriesOfCategory($f));\n\t\t\t}\n\t\t\treturn $categories;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingEventInstances\n\t\t\t\tReturns instances of an event that occur in the future.\n\n\t\t\tParameters:\n\t\t\t\tevent - An event ID or event array.\n\n\t\t\tReturns:\n\t\t\t\tAn array of event instances\n\n\t\t\tSee Also:\n\t\t\t\t<getEventInstances>\n\t\t*/\n\n\t\tstatic function getUpcomingEventInstances($event) {\n\t\t\treturn static::getEventInstances($event,true);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingEvents\n\t\t\t\tReturns an array of event instances occurring in the future ordered by those happening soonest.\n\n\t\t\tParameters:\n\t\t\t\tlimit - The number of events to return.\n\t\t\t\tfeatured - Whether to limit the results to exclusively featured events or not (defaults to false).\n\t\t\t\tpage - The page to return (defaults to the first page).\n\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t*/\n\n\t\tstatic function getUpcomingEvents($limit = 5,$featured = false,$page = 1) {\n\t\t\t$page = $page ? ($page - 1) : 0;\n\t\t\t$events = array();\n\t\t\tif ($featured) {\n\t\t\t\t$featured = \" AND btx_events_events.featured = 'on' \";\n\t\t\t}\n\n\t\t\t$q = sqlquery(\"SELECT btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_events.* FROM btx_events_events JOIN btx_events_date_cache WHERE btx_events_date_cache.event = btx_events_events.id AND btx_events_date_cache.end >= NOW() $featured ORDER BY btx_events_date_cache.start ASC LIMIT \".($page * $limit).\",$limit\");\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$event = self::get($f);\n\t\t\t\t$events[] = $event;\n\t\t\t}\n\t\t\treturn $events;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingEventsPageCount\n\t\t\t\tReturns the number of pages of upcoming events.\n\n\t\t\tParameters:\n\t\t\t\tper_page - The number of events per page.\n\n\t\t\tReturns:\n\t\t\t\tThe number of pages.\n\t\t*/\n\n\t\tstatic function getUpcomingEventsPageCount($per_page = 5) {\n\t\t\t$f = sqlfetch(sqlquery(\"SELECT COUNT(id) AS `count` FROM btx_events_date_cache WHERE end >= NOW()\"));\n\t\t\t$pages = ceil($f[\"count\"] / $per_page);\n\t\t\treturn $pages ? $pages : 1;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingFeaturedEvents\n\t\t\t\tReturns an array of featured event instances occurring in the future ordered by those happening soonest.\n\n\t\t\tParameters:\n\t\t\t\tlimit - The number of events to return.\n\t\t\t\tpage - The page to return (defaults to the first page).\n\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\n\t\t\tSee Also:\n\t\t\t\t<getUpcomingEvents>\n\t\t*/\n\n\t\tstatic function getUpcomingFeaturedEvents($limit = 5,$page = 1) {\n\t\t\treturn self::getUpcomingEvents($limit,true,$page);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingEventsInCategories\n\t\t\t\tReturns an array of event instances occurring in the future in the provided categories ordered by those happening soonest.\n\n\t\t\tParameters:\n\t\t\t\tlimit - The number of events to return.\n\t\t\t\tcategories - An array of categories.\n\t\t\t\tfeatured - Whether to limit the results to exclusively featured events or not (defaults to false).\n\t\t\t\tpage - The page to return (defaults to the first page).\n\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t*/\n\n\t\tstatic function getUpcomingEventsInCategories($limit = 5,$categories = array(),$featured = false,$page = 1) {\n\t\t\t$page = $page ? ($page - 1) : 0;\n\t\t\t$events = array();\n\t\t\tif ($featured) {\n\t\t\t\t$featured = \" AND btx_events_events.featured = 'on' \";\n\t\t\t}\n\n\t\t\t$cat_search = array();\n\t\t\tforeach ($categories as $category) {\n\t\t\t\t$category = is_array($category) ? sqlescape($category[\"id\"]) : sqlescape($category);\n\t\t\t\t$cat_search[] = \"btx_events_event_categories.category = '$category'\";\n\t\t\t}\n\n\t\t\t$q = sqlquery(\"SELECT DISTINCT(CONCAT(btx_events_date_cache.event,btx_events_date_cache.start,btx_events_date_cache.end)),btx_events_date_cache.event,btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route FROM btx_events_date_cache JOIN btx_events_event_categories JOIN btx_events_events ON btx_events_events.id = btx_events_date_cache.event WHERE btx_events_date_cache.event = btx_events_event_categories.event AND btx_events_date_cache.end >= NOW() AND (\".implode(\" OR \",$cat_search).\") $featured ORDER BY btx_events_date_cache.start ASC LIMIT \".($page * $limit).\",$limit\");\n\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$event = self::get($f[\"event\"]);\n\t\t\t\tif ($event) {\n\t\t\t\t\t$event[\"start\"] = $f[\"start\"];\n\t\t\t\t\t$event[\"end\"] = $f[\"end\"];\n\t\t\t\t\t$event[\"instance\"] = $f[\"instance\"];\n\t\t\t\t\t$event[\"title_route\"] = $f[\"title_route\"];\n\t\t\t\t\t$event[\"date_route\"] = $f[\"date_route\"];\n\t\t\t\t\t$events[] = $event;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $events;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingEventsInCategoriesWithSubcategories\n\t\t\t\tReturns an array of event instances occurring in the future in the provided categories and all of their children ordered by those happening soonest.\n\n\t\t\tParameters:\n\t\t\t\tlimit - The number of events to return.\n\t\t\t\tcategories - An array of categories.\n\t\t\t\tfeatured - Whether to limit the results to exclusively featured events or not (defaults to false).\n\t\t\t\tpage - The page to return (defaults to the first page).\n\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t*/\n\t\tstatic function getUpcomingEventsInCategoriesWithSubcategories($limit,$categories = array(),$featured = false,$page = 1) {\n\t\t\t$with_sub = $categories;\n\t\t\tforeach ($categories as $cat) {\n\t\t\t\t$with_sub = array_merge($with_sub,self::getSubcategoriesOfCategory($cat));\n\t\t\t}\n\t\t\treturn self::getUpcomingEventsInCategories($limit,$with_sub,$featured,$page);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingFeaturedEventsInCategories\n\t\t\t\tReturns an array of featured event instances occurring in the future in the provided categories ordered by those happening soonest.\n\n\t\t\tParameters:\n\t\t\t\tlimit - The number of events to return.\n\t\t\t\tcategories - An array of categories.\n\t\t\t\tpage - The page to return (defaults to the first page).\n\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\n\t\t\tSee Also:\n\t\t\t\t<getUpcomingEventsInCategories>\n\t\t*/\n\n\t\tstatic function getUpcomingFeaturedEventsInCategories($limit = 5,$categories = array(),$page = 1) {\n\t\t\treturn self::getUpcomingEventsInCategories($limit,$categories,true,$page);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingFeaturedEventsInCategoriesWithSubcategories\n\t\t\t\tReturns an array of featured event instances occurring in the future in the provided categories and their subcategories ordered by those happening soonest.\n\n\t\t\tParameters:\n\t\t\t\tlimit - The number of events to return.\n\t\t\t\tcategories - An array of categories.\n\t\t\t\tpage - The page to return (defaults to the first page).\n\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\n\t\t\tSee Also:\n\t\t\t\t<getUpcomingEventsInCategories>\n\t\t*/\n\n\t\tstatic function getUpcomingFeaturedEventsInCategoriesWithSubcategories($limit = 5,$categories = array(),$page = 1) {\n\t\t\treturn self::getUpcomingEventsInCategoriesWithSubcategories($limit,$categories,true,$page);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingSearchResults\n\t\t\t\tReturns event instances matching a given query that are occurring in the future.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tquery - The string to search for.\n\t\t\t\tlimit - The number of event instances to return.\n\t\t\t\tfeatured - Whether to only return featured or not (defaults to false for all).\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances ordered by soonest.\n\t\t*/\n\n\t\tstatic function getUpcomingSearchResults($query,$limit = 5,$featured = false) {\n\t\t\t$events = array();\n\t\t\tif ($featured) {\n\t\t\t\t$featured = \" AND btx_events_events.featured = 'on' \";\n\t\t\t}\n\n\t\t\t$words = explode(\" \",$query);\n\t\t\t$qwords = array();\n\t\t\tif ($words) {\n\t\t\t\tforeach ($words as $word) {\n\t\t\t\t\t$qwords[] = \"(btx_events_events.title LIKE '%$word%' OR btx_events_events.description LIKE '%$word%')\";\n\t\t\t\t}\n\t\t\t\t$qwords = implode(\" AND \",$qwords).\" AND \";\n\t\t\t} else {\n\t\t\t\t$qwords = \"\";\n\t\t\t}\n\n\t\t\t$q = sqlquery(\"SELECT btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_events.* FROM btx_events_events JOIN btx_events_date_cache WHERE btx_events_date_cache.event = btx_events_events.id AND $qwords btx_events_date_cache.end >= NOW() $featured ORDER BY btx_events_date_cache.start ASC LIMIT $limit\");\n\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$event = self::get($f);\n\t\t\t\t$events[] = $event;\n\t\t\t}\n\t\t\treturn $events;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingFeaturedSearchResults\n\t\t\t\tReturns featured event instances matching a given query that are occurring in the future.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tquery - The string to search for.\n\t\t\t\tlimit - The number of event instances to return.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances ordered by soonest.\n\t\t*/\n\n\t\tstatic function getUpcomingFeaturedSearchResults($query,$limit = 5) {\n\t\t\treturn self::getUpcomingSearchResults($query,$limit,true);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: recacheEvent\n\t\t\t\tRemoves cached occurrences and then caches the event again.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tid - The event id.\n\t\t*/\n\n\t\tstatic function recacheEvent($id) {\n\t\t\tself::uncacheEvent($id);\n\t\t\tself::cacheEvent($id);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: searchResults\n\t\t\t\tReturns event entries that match a given query (not instances).\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tquery - The string to search for.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of decoded event entries from the database.\n\t\t*/\n\n\t\tstatic function searchResults($query) {\n\t\t\t$words = explode(\" \",$query);\n\t\t\t$qwords = array();\n\t\t\tif ($words) {\n\t\t\t\tforeach ($words as $word) {\n\t\t\t\t\t$qwords[] = \"(title LIKE '%$word%' OR description LIKE '%$word%')\";\n\t\t\t\t}\n\t\t\t\t$qwords = \" AND \".implode(\" AND \",$qwords);\n\t\t\t} else {\n\t\t\t\t$qwords = \"\";\n\t\t\t}\n\n\t\t\t$q = sqlquery(\"SELECT * FROM btx_events_events WHERE 1 $qwords ORDER BY id DESC\");\n\n\t\t\t$events = array();\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$event = self::get($f);\n\t\t\t\t$events[] = $event;\n\t\t\t}\n\t\t\treturn $events;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: searchResultsInCategory\n\t\t\t\tReturns event entries that match a given query (not instances) that belong to a category (or one of its subcategories).\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tquery - The string to search for.\n\t\t\t\tcategory - The category to check against.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of decoded event entries from the database.\n\t\t*/\n\n\t\tstatic function searchResultsInCategory($query,$category) {\n\t\t\t$category = is_array($category) ? sqlescape($category[\"id\"]) : sqlescape($category);\n\t\t\t$with_sub = array_merge(array($category),self::getSubcategoriesOfCategory($category));\n\n\t\t\t$cat_search = array();\n\t\t\tforeach ($with_sub as $category) {\n\t\t\t\t$cat_search[] = \"btx_events_event_categories.category = '$category'\";\n\t\t\t}\n\n\t\t\t$words = explode(\" \",$query);\n\t\t\t$qwords = array();\n\t\t\tif ($words) {\n\t\t\t\tforeach ($words as $word) {\n\t\t\t\t\t$qwords[] = \"(btx_events_events.title LIKE '%$word%' OR btx_events_events.description LIKE '%$word%')\";\n\t\t\t\t}\n\t\t\t\t$qwords = \" AND \".implode(\" AND \",$qwords);\n\t\t\t} else {\n\t\t\t\t$qwords = \"\";\n\t\t\t}\n\n\t\t\t$q = sqlquery(\"SELECT DISTINCT(btx_events_event_categories.event),btx_events_events.* FROM btx_events_events JOIN btx_events_event_categories WHERE btx_events_events.id = btx_events_event_categories.event $qwords AND (\".implode(\" OR \",$cat_search).\") ORDER BY id DESC\");\n\n\t\t\t$events = array();\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$event = self::get($f);\n\t\t\t\t$events[] = $event;\n\t\t\t}\n\t\t\treturn $events;\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: uncacheEvent\n\t\t\t\tRemoves cached occurrences of an event.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tid - The event id.\n\t\t*/\n\n\t\tstatic function uncacheEvent($id) {\n\t\t\t$id = sqlescape($id);\n\t\t\tsqlquery(\"DELETE FROM btx_events_date_cache WHERE event = '$id'\");\n\t\t}\n\n\t\t/*\n\t\t\tFunction: parseMTM\n\t\t\t\tHelper function for the admin to create sensible category tagging.\n\t\t*/\n\t\t\n\t\tstatic function parseMTM($list,$everything = false) {\n\t\t\tif (!$everything) {\n\t\t\t\treturn $list;\n\t\t\t}\n\t\t\t$parsed = array();\n\t\t\tforeach ($list as $id => $name) {\n\t\t\t\t$ancestors = self::getCategoryLineage($id);\n\t\t\t\t$path = array();\n\t\t\t\tforeach ($ancestors as $a) {\n\t\t\t\t\t$path[] = $a[\"name\"];\n\t\t\t\t}\n\t\t\t\t$path[] = $name;\n\t\t\t\t$parsed[$id] = implode(\" \u00bb \",$path);\n\t\t\t}\n\t\t\tasort($parsed);\n\t\t\treturn $parsed;\n\t\t}\n\t}\n\t", "{\n    \"type\": \"extension\",\n    \"id\": \"com.fastspot.events\",\n    \"version\": \"1.2.1\",\n    \"revision\": 7,\n    \"compatibility\": \"4.2.4+\",\n    \"title\": \"Events\",\n    \"description\": \"A very fast (performance wise) events system that supports recurring events and a powerful class for pulling events into the front end of your site.\",\n    \"keywords\": [\n        \"events\",\n        \"recurring\"\n    ],\n    \"author\": {\n        \"name\": \"Tim Buckingham\",\n        \"url\": \"http://www.fastspot.com\",\n        \"email\": \"tim@fastspot.com\"\n    },\n    \"licenses\": {\n        \"LGPL v3\": \"http://opensource.org/licenses/LGPL-3.0\"\n    },\n    \"components\": {\n        \"module_groups\": [],\n        \"modules\": [\n            {\n                \"id\": \"3\",\n                \"group\": null,\n                \"name\": \"Events\",\n                \"route\": \"com.fastspot.events*events\",\n                \"class\": \"BTXEvents\",\n                \"icon\": \"events\",\n                \"gbp\": {\n                    \"name\": \"\",\n                    \"table\": \"\",\n                    \"other_table\": \"\"\n                },\n                \"position\": \"0\",\n                \"extension\": \"com.fastspot.events\",\n                \"actions\": [\n                    {\n                        \"id\": \"7\",\n                        \"module\": \"3\",\n                        \"name\": \"View Events\",\n                        \"route\": \"\",\n                        \"in_nav\": \"on\",\n                        \"form\": null,\n                        \"view\": \"4\",\n                        \"report\": null,\n                        \"class\": \"list\",\n                        \"level\": \"0\",\n                        \"position\": \"6\"\n                    },\n                    {\n                        \"id\": \"8\",\n                        \"module\": \"3\",\n                        \"name\": \"Search\",\n                        \"route\": \"search\",\n                        \"in_nav\": \"on\",\n                        \"form\": null,\n                        \"view\": null,\n                        \"report\": null,\n                        \"class\": \"search2\",\n                        \"level\": \"0\",\n                        \"position\": \"5\"\n                    },\n                    {\n                        \"id\": \"9\",\n                        \"module\": \"3\",\n                        \"name\": \"Calendar\",\n                        \"route\": \"calendar\",\n                        \"in_nav\": \"on\",\n                        \"form\": null,\n                        \"view\": null,\n                        \"report\": null,\n                        \"class\": \"calendar2\",\n                        \"level\": \"0\",\n                        \"position\": \"4\"\n                    },\n                    {\n                        \"id\": \"10\",\n                        \"module\": \"3\",\n                        \"name\": \"Add Event\",\n                        \"route\": \"add\",\n                        \"in_nav\": \"on\",\n                        \"form\": \"4\",\n                        \"view\": null,\n                        \"report\": null,\n                        \"class\": \"add\",\n                        \"level\": \"0\",\n                        \"position\": \"3\"\n                    },\n                    {\n                        \"id\": \"11\",\n                        \"module\": \"3\",\n                        \"name\": \"View Categories\",\n                        \"route\": \"categories\",\n                        \"in_nav\": \"on\",\n                        \"form\": null,\n                        \"view\": \"3\",\n                        \"report\": null,\n                        \"class\": \"category\",\n                        \"level\": \"0\",\n                        \"position\": \"2\"\n                    },\n                    {\n                        \"id\": \"12\",\n                        \"module\": \"3\",\n                        \"name\": \"Add Category\",\n                        \"route\": \"add-category\",\n                        \"in_nav\": \"on\",\n                        \"form\": \"3\",\n                        \"view\": null,\n                        \"report\": null,\n                        \"class\": \"add\",\n                        \"level\": \"0\",\n                        \"position\": \"1\"\n                    },\n                    {\n                        \"id\": \"13\",\n                        \"module\": \"3\",\n                        \"name\": \"Edit Event\",\n                        \"route\": \"edit\",\n                        \"in_nav\": \"\",\n                        \"form\": \"4\",\n                        \"view\": null,\n                        \"report\": null,\n                        \"class\": \"edit\",\n                        \"level\": \"0\",\n                        \"position\": \"0\"\n                    },\n                    {\n                        \"id\": \"14\",\n                        \"module\": \"3\",\n                        \"name\": \"Edit Category\",\n                        \"route\": \"edit-category\",\n                        \"in_nav\": \"\",\n                        \"form\": \"3\",\n                        \"view\": null,\n                        \"report\": null,\n                        \"class\": \"edit\",\n                        \"level\": \"0\",\n                        \"position\": \"0\"\n                    }\n                ],\n                \"views\": [\n                    {\n                        \"id\": \"3\",\n                        \"module\": \"3\",\n                        \"title\": \"Categories\",\n                        \"description\": \"\",\n                        \"type\": \"nested\",\n                        \"table\": \"btx_events_categories\",\n                        \"fields\": {\n                            \"name\": {\n                                \"width\": \"788\",\n                                \"title\": \"Name\",\n                                \"parser\": \"\",\n                                \"numeric\": false\n                            }\n                        },\n                        \"options\": {\n                            \"nesting_column\": \"parent\",\n                            \"filter\": \"\"\n                        },\n                        \"actions\": {\n                            \"edit\": \"on\",\n                            \"delete\": \"on\"\n                        },\n                        \"preview_url\": \"\",\n                        \"related_form\": null\n                    },\n                    {\n                        \"id\": \"4\",\n                        \"module\": \"3\",\n                        \"title\": \"Events\",\n                        \"description\": \"\",\n                        \"type\": \"searchable\",\n                        \"table\": \"btx_events_events\",\n                        \"fields\": {\n                            \"start_date\": {\n                                \"title\": \"Start Date\",\n                                \"parser\": \"\",\n                                \"width\": \"98\",\n                                \"numeric\": false\n                            },\n                            \"title\": {\n                                \"title\": \"Title\",\n                                \"parser\": \"\",\n                                \"width\": \"521\",\n                                \"numeric\": false\n                            },\n                            \"recurrence_type\": {\n                                \"title\": \"Recurring\",\n                                \"parser\": \"\",\n                                \"width\": \"89\",\n                                \"numeric\": false\n                            }\n                        },\n                        \"options\": {\n                            \"sort_column\": \"start_date\",\n                            \"sort_direction\": \"DESC\",\n                            \"per_page\": \"15\",\n                            \"filter\": \"\"\n                        },\n                        \"actions\": {\n                            \"feature\": \"on\",\n                            \"edit\": \"on\",\n                            \"delete\": \"on\"\n                        },\n                        \"preview_url\": \"\",\n                        \"related_form\": null\n                    }\n                ],\n                \"forms\": [\n                    {\n                        \"id\": \"3\",\n                        \"module\": \"3\",\n                        \"title\": \"Category\",\n                        \"table\": \"btx_events_categories\",\n                        \"fields\": [\n                            {\n                                \"column\": \"parent\",\n                                \"type\": \"list\",\n                                \"title\": \"Parent Category\",\n                                \"subtitle\": \"\",\n                                \"options\": {\n                                    \"list_type\": \"db\",\n                                    \"allow-empty\": \"Yes\",\n                                    \"pop-table\": \"btx_events_categories\",\n                                    \"pop-description\": \"name\",\n                                    \"pop-sort\": \"`name` ASC\",\n                                    \"column\": \"parent\"\n                                }\n                            },\n                            {\n                                \"column\": \"name\",\n                                \"type\": \"text\",\n                                \"title\": \"Name\",\n                                \"subtitle\": \"\",\n                                \"options\": {\n                                    \"column\": \"name\"\n                                }\n                            },\n                            {\n                                \"column\": \"route\",\n                                \"type\": \"route\",\n                                \"title\": \"Route\",\n                                \"subtitle\": \"\",\n                                \"options\": {\n                                    \"source\": \"name\",\n                                    \"column\": \"route\"\n                                }\n                            }\n                        ],\n                        \"default_position\": \"Bottom\",\n                        \"return_view\": \"3\",\n                        \"return_url\": \"\",\n                        \"tagging\": \"\",\n                        \"hooks\": null\n                    },\n                    {\n                        \"id\": \"4\",\n                        \"module\": \"3\",\n                        \"title\": \"Event\",\n                        \"table\": \"btx_events_events\",\n                        \"fields\": [\n                            {\n                                \"column\": \"title\",\n                                \"type\": \"text\",\n                                \"title\": \"Title\",\n                                \"subtitle\": \"\",\n                                \"options\": {\n                                    \"column\": \"title\"\n                                }\n                            },\n                            {\n                                \"column\": \"description\",\n                                \"type\": \"html\",\n                                \"title\": \"Description\",\n                                \"subtitle\": \"\",\n                                \"options\": {\n                                    \"column\": \"description\"\n                                }\n                            },\n                            {\n                                \"column\": \"image\",\n                                \"type\": \"upload\",\n                                \"title\": \"Image\",\n                                \"subtitle\": \"(crops to 600x400)\",\n                                \"options\": {\n                                    \"directory\": \"files/events/\",\n                                    \"image\": \"on\",\n                                    \"min_width\": \"600\",\n                                    \"min_height\": \"400\",\n                                    \"preview_prefix\": \"\",\n                                    \"crops\": {\n                                        \"1\": {\n                                            \"prefix\": \"\",\n                                            \"width\": \"600\",\n                                            \"height\": \"400\",\n                                            \"grayscale\": \"\"\n                                        }\n                                    },\n                                    \"column\": \"image\"\n                                }\n                            },\n                            {\n                                \"column\": \"__mtm-1__\",\n                                \"type\": \"many-to-many\",\n                                \"title\": \"Categories\",\n                                \"subtitle\": \"\",\n                                \"options\": {\n                                    \"mtm-connecting-table\": \"btx_events_event_categories\",\n                                    \"mtm-my-id\": \"event\",\n                                    \"mtm-other-id\": \"category\",\n                                    \"mtm-other-table\": \"btx_events_categories\",\n                                    \"mtm-other-descriptor\": \"name\",\n                                    \"mtm-sort\": \"`name` ASC\",\n                                    \"mtm-list-parser\": \"BTXEvents::parseMTM\",\n                                    \"column\": \"__mtm-1__\"\n                                }\n                            },\n                            {\n                                \"column\": \"all_day\",\n                                \"type\": \"com.fastspot.events*date-chooser\",\n                                \"title\": \"Date Chooser\",\n                                \"subtitle\": \"\",\n                                \"options\": {\n                                    \"function\": \"BTXEvents::drawFormDateTime\",\n                                    \"process_function\": \"BTXEvents::parseFormDateTime\",\n                                    \"column\": \"all_day\"\n                                }\n                            },\n                            {\n                                \"column\": \"route\",\n                                \"type\": \"route\",\n                                \"title\": \"Route\",\n                                \"subtitle\": \"\",\n                                \"options\": {\n                                    \"source\": \"title\",\n                                    \"column\": \"route\"\n                                }\n                            }\n                        ],\n                        \"default_position\": \"\",\n                        \"return_view\": \"4\",\n                        \"return_url\": \"\",\n                        \"tagging\": \"\",\n                        \"hooks\": {\n                            \"pre\": \"\",\n                            \"post\": \"\",\n                            \"publish\": \"BTXEvents::publishHook\"\n                        }\n                    }\n                ],\n                \"embed_forms\": [],\n                \"reports\": []\n            }\n        ],\n        \"templates\": [],\n        \"callouts\": [],\n        \"settings\": [],\n        \"feeds\": [],\n        \"field_types\": [\n            {\n                \"id\": \"com.fastspot.events*date-chooser\",\n                \"name\": \"Events \\u2014 Date Chooser\",\n                \"use_cases\": {\n                    \"modules\": \"on\"\n                },\n                \"self_draw\": \"on\",\n                \"extension\": \"com.fastspot.events\"\n            }\n        ],\n        \"tables\": {\n            \"btx_events_categories\": \"CREATE TABLE `btx_events_categories` (   `id` int(11) unsigned NOT NULL AUTO_INCREMENT,   `parent` int(11) unsigned DEFAULT NULL,   `name` varchar(255) NOT NULL DEFAULT '',   `route` varchar(255) NOT NULL DEFAULT '',   `position` int(11) unsigned NOT NULL,   PRIMARY KEY (`id`),   KEY `parent` (`parent`),   KEY `route` (`route`),   KEY `position` (`position`),    FOREIGN KEY (`parent`) REFERENCES `btx_events_categories` (`id`) ON DELETE CASCADE ) ENGINE=InnoDB DEFAULT CHARSET=utf8\",\n            \"btx_events_date_cache\": \"CREATE TABLE `btx_events_date_cache` (   `id` int(11) unsigned NOT NULL AUTO_INCREMENT,   `event` int(11) unsigned NOT NULL,   `start` datetime NOT NULL,   `end` datetime NOT NULL,   `date_cached` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,   `title_route` varchar(255) NOT NULL DEFAULT '',   `date_route` varchar(255) NOT NULL DEFAULT '',   PRIMARY KEY (`id`),   KEY `event` (`event`),   KEY `start` (`start`),   KEY `end` (`end`),   KEY `title_route` (`title_route`),   KEY `date_route` (`date_route`),   KEY `date_cached` (`date_cached`),    FOREIGN KEY (`event`) REFERENCES `btx_events_events` (`id`) ON DELETE CASCADE ) ENGINE=InnoDB DEFAULT CHARSET=utf8\",\n            \"btx_events_event_categories\": \"CREATE TABLE `btx_events_event_categories` (   `event` int(11) unsigned NOT NULL,   `category` int(11) unsigned NOT NULL,   KEY `event` (`event`),   KEY `category` (`category`),    FOREIGN KEY (`event`) REFERENCES `btx_events_events` (`id`) ON DELETE CASCADE,    FOREIGN KEY (`category`) REFERENCES `btx_events_categories` (`id`) ON DELETE CASCADE ) ENGINE=InnoDB DEFAULT CHARSET=utf8\",\n            \"btx_events_events\": \"CREATE TABLE `btx_events_events` (   `id` int(11) unsigned NOT NULL AUTO_INCREMENT,   `title` varchar(255) NOT NULL DEFAULT '',   `description` mediumtext NOT NULL,   `image` varchar(255) NOT NULL,   `start_date` date DEFAULT NULL,   `end_date` date DEFAULT NULL,   `start_time` time DEFAULT NULL,   `end_time` time DEFAULT NULL,   `all_day` char(2) NOT NULL,   `recurrence_type` varchar(255) NOT NULL,   `recurrence_detail` varchar(255) NOT NULL,   `canceled_recurrences` text NOT NULL,   `recurring_end_date` date DEFAULT NULL,   `last_updated` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,   `featured` char(2) NOT NULL,   `route` varchar(255) DEFAULT NULL,   PRIMARY KEY (`id`),   KEY `start_date` (`start_date`),   KEY `end_date` (`end_date`),   KEY `recurring_end_date` (`recurring_end_date`),   KEY `recurrence_type` (`recurrence_type`),   KEY `featured` (`featured`),   KEY `route` (`route`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8\"\n        }\n    },\n    \"sql_revisions\": []\n}"], "fixing_code": ["<?php\n\t/*\n\t\tClass: BTXEvents\n\t\t\tA class to handle events in BigTree.\n\t*/\n\t\n\tclass BTXEvents {\n\t\t\n\t\t/*\n\t\t\tConstructor:\n\t\t\t\tRe-caches stale events.\n\t\t*/\n\t\t\n\t\tfunction __construct() {\n\t\t\t$q = sqlquery(\"SELECT * FROM btx_events_events WHERE recurrence_type != '' AND (last_updated < '\".date(\"Y-m-d\",strtotime(\"-1 year\")).\"' OR last_updated IS NULL)\");\n\t\t\t\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\tself::recacheEvent($f[\"id\"]);\n\t\t\t\tsqlquery(\"UPDATE btx_events_events SET last_updated = NOW() WHERE id = '\".$f[\"id\"].\"'\");\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t\tFunction: cacheEvent\n\t\t\t\tCaches an event.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tid - The id of the event to cache.\n\t\t*/\n\t\t\n\t\tstatic function cacheEvent($id) {\n\t\t\t$id = sqlescape($id);\n\t\t\t$item = self::get($id);\n\t\t\t$title_route = sqlescape($item[\"route\"]);\n\t\t\t\n\t\t\t// It's just a normal event!  Thank heavens!\n\t\t\tif (!$item[\"recurrence_type\"]) {\n\t\t\t\tlist($start_date,$end_date) = self::getCacheTimes($item,$item[\"start_date\"],$item[\"end_date\"]);\n\t\t\t\t\n\t\t\t\t$date_route = date(\"Y-m-d\",strtotime($start_date));\n\n\t\t\t\t// Put the date in the database!\n\t\t\t\tsqlquery(\"INSERT INTO btx_events_date_cache (`event`,`start`,`end`,`title_route`,`date_route`) VALUES ('$id','$start_date','$end_date','$title_route','$date_route')\");\n\t\t\t// It's repeating :(  We need to cache all previous recurrences that happened in the past year, and all that will happen in the next two years.\n\t\t\t} elseif (!$item[\"recurring_end_date\"] || strtotime($item[\"recurring_end_date\"]) > time()) {\n\t\t\t\t// If there's a start date to the recurrence, use it\n\t\t\t\tif ($item[\"start_date\"]) {\n\t\t\t\t\t$start = strtotime($item[\"start_date\"]);\n\t\t\t\t} else {\n\t\t\t\t\t$start = strtotime(\"-1 year\");\n\t\t\t\t}\n\t\t\t\t// If there's an end date, stop there\n\t\t\t\tif ($item[\"end_date\"] || $item[\"recurring_end_date\"]) {\n\t\t\t\t\t$end = strtotime($item[\"recurring_end_date\"] ? $item[\"recurring_end_date\"] : $item[\"end_date\"]);\n\t\t\t\t} else {\n\t\t\t\t\t$end = strtotime(\"+2 years\");\n\t\t\t\t}\n\t\t\t\t// If we've already passed the end date, we don't need to cache things anymore.\n\t\t\t\tif ($end < $start) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// Get a list of the canceled items\n\t\t\t\t$canceled = json_decode($item[\"canceled_recurrences\"],true);\n\t\t\t\t// Loop through our start and end dates finding the next recurrence of events\n\t\t\t\twhile ($start <= $end) {\n\t\t\t\t\t$next = self::findNextRecurrence($item[\"recurrence_type\"],$item[\"recurrence_detail\"],$canceled,$start);\n\t\t\t\t\t// The next time the event occurs could fall outside our caching period\n\t\t\t\t\tif ($next <= $end) {\n\t\t\t\t\t\tlist($start_date,$end_date) = self::getCacheTimes($item,date(\"Y-m-d\",$next),date(\"Y-m-d\",$next));\n\t\t\t\t\t\t$date_route = date(\"Y-m-d\",strtotime($start_date));\n\t\t\t\t\t\tsqlquery(\"INSERT INTO btx_events_date_cache (`event`,`start`,`end`,`title_route`,`date_route`) VALUES ('\".$item[\"id\"].\"','$start_date','$end_date','$title_route','$date_route')\");\n\t\t\t\t\t}\n\t\t\t\t\t$start = strtotime(date(\"Y-m-d\",$next).\" +1 day\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: findNextRecurrence\n\t\t\t\tFinds the next time an event exists.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\ttype - The recurrence type.\n\t\t\t\tdetail - The recurrence detail.\n\t\t\t\tcanceled - An array of canceled recurrences.\n\t\t\t\ttime - The start time to begin looking from (in seconds since Unix epoch).\n\t\t\t\t\n\t\t\tReturns:\n\t\t\t\tThe next occurence of the event in seconds since Unix epoch.\n\t\t*/\n\n\t\tstatic function findNextRecurrence($type,$detail,$canceled = array(),$time = false) {\n\t\t\tif (!$time) {\n\t\t\t\t$time = time();\n\t\t\t}\n\t\t\t// Daily Recurrence\n\t\t\tif ($type == \"daily\") {\n\t\t\t\t// If it hasn't been canceled, return the date, otherwise try again tomorrow.\n\t\t\t\tif (!in_array(date(\"Y-m-d\",$time),$canceled)) {\n\t\t\t\t\treturn $time;\n\t\t\t\t} else {\n\t\t\t\t\treturn self::findNextRecurrence($type,$detail,$canceled,strtotime(date(\"Y-m-d\",$time).\" +1 day\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Weekly Recurrence\n\t\t\tif ($type == \"weekly\") {\n\t\t\t\t$current_day_of_week = date(\"w\",$time);\n\t\t\t\tif ($detail > $current_day_of_week) {\n\t\t\t\t\t$time = strtotime(date(\"Y-m-d\",$time).\" +\".($detail - $current_day_of_week).\" days\");\n\t\t\t\t} elseif ($detail < $current_day_of_week) {\n\t\t\t\t\t$time = strtotime(date(\"Y-m-d\",$time).\" +\".(7 - $current_day_of_week + $detail).\" days\");\n\t\t\t\t}\n\n\t\t\t\t// If it's canceled, next week please.\n\t\t\t\tif (!in_array(date(\"Y-m-d\",$time),$canceled)) {\n\t\t\t\t\treturn $time;\n\t\t\t\t} else {\n\t\t\t\t\treturn self::findNextRecurrence($type,$detail,$canceled,strtotime(date(\"Y-m-d\",$time).\" +1 week\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Monthly Recurrence\n\t\t\tif ($type == \"monthly\") {\n\t\t\t\t// If the detail is numeric, it's simply the (x)th day of the month.\n\t\t\t\tif (is_numeric($detail)) {\n\t\t\t\t\t$current_day_of_month = date(\"j\",$time);\n\t\t\t\t\t// Move to the 1st of the next month if the repeat has already occurred this month.\n\t\t\t\t\tif ($current_day_of_month > $detail) {\n\t\t\t\t\t\t$time = strtotime(date(\"Y-m-1\",$time).\" +1 month\");\n\t\t\t\t\t}\n\t\t\t\t\t// If we're looking for something on the 31st and a month only has 30 days, skip it.\n\t\t\t\t\tif ($detail > date(\"t\",$time)) {\n\t\t\t\t\t\treturn self::findNextRecurrence($type,$detail,$canceled,strtotime(date(\"Y-m-1\",$time).\" +1 month\"));\n\t\t\t\t\t}\n\t\t\t\t\t$time = strtotime(date(\"Y-m-\".$detail,$time));\n\n\t\t\t\t\t// If it's canceled, next month please.\n\t\t\t\t\tif (!in_array(date(\"Y-m-d\",$time),$canceled)) {\n\t\t\t\t\t\treturn $time;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn self::findNextRecurrence($type,$detail,$canceled,strtotime(date(\"Y-m-1\",$time).\" +1 month\"));\n\t\t\t\t\t}\n\t\t\t\t// We need to calculate a more crazy date like the second Thursday of each month.\n\t\t\t\t} else {\n\t\t\t\t\tlist($x,$week,$day) = explode(\"#\",$detail);\n\t\t\t\t\t\n\t\t\t\t\t// New strategy, start at the first day of the current month and walk through each day.  If the x'th day is already passed or is canceled, then we'll move on.\n\t\t\t\t\t$start = strtotime(date(\"Y-m-1\",$time));\n\t\t\t\t\t$end = strtotime(date(\"Y-m-t\",$time));\n\t\t\t\t\t$current_week = 1;\n\t\t\t\t\t\n\t\t\t\t\twhile ($start <= $end) {\n\t\t\t\t\t\t$current_day = date(\"w\",$start);\n\t\t\t\t\t\tif ($current_week == $week && $current_day == $day) {\n\t\t\t\t\t\t\tif ($time > $start || in_array(date(\"Y-m-d\",$start),$canceled)) {\n\t\t\t\t\t\t\t\treturn self::findNextRecurrence($type,$detail,$canceled,strtotime(date(\"Y-m-1\",$time).\" +1 month\"));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn $start;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($current_day == $day) {\n\t\t\t\t\t\t\t$current_week++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Add a day\n\t\t\t\t\t\t$start = BigTree::dateFromOffset($start,\"+1 day\",\"U\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ($current_week < $week) {\n\t\t\t\t\t\treturn self::findNextRecurrence($type,$detail,$canceled,strtotime(date(\"Y-m-1\",$time).\" +1 month\"));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// Yearly Recurrence\n\t\t\tif ($type == \"yearly\") {\n\t\t\t\t$next = strtotime(date(\"Y\",$time).\"-\".$detail);\n\t\t\t\tif ($next < $time) {\n\t\t\t\t\t$next = strtotime((date(\"Y\",$time)+1).\"-\".$detail);\n\t\t\t\t}\n\t\t\t\t// If it's canceled, next year please.\n\t\t\t\tif (!in_array(date(\"Y-m-d\",$next),$canceled)) {\n\t\t\t\t\treturn $next;\n\t\t\t\t} else {\n\t\t\t\t\treturn self::findNextRecurrence($type,$detail,$canceled,strtotime(date(\"Y-m-d\",$next).\" +1 year\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: formattedDate\n\t\t\t\tReturns a string of formatted date/time based on an event having a start/end date and times.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\titem - The event instance array.\n\t\t\t\tdate_format - The date format (compatible with PHP's date function)\n\t\t\t\ttime_format - The time format (compatible with PHP's time format)\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tA date/time string.\n\t\t*/\n\t\t\n\t\tstatic function formattedDate($item,$date_format = \"F j, Y\",$time_format = \"g:ia\") {\n\t\t\t$s = strtotime($item[\"start\"]);\n\t\t\t$e = strtotime($item[\"end\"]);\n\t\t\t// If it's a single all day event...\n\t\t\tif ($item[\"all_day\"]) {\n\t\t\t\tif (date(\"Y-m-d\",$s) == date(\"Y-m-d\",$e)) {\n\t\t\t\t\treturn date($date_format,$s);\n\t\t\t\t} else {\n\t\t\t\t\treturn date($date_format,$s).\" - \".date($date_format,$e);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Single day event\n\t\t\t\tif (date(\"Y-m-d\",$s) == date(\"Y-m-d\",$e)) {\n\t\t\t\t\tif ($s != $e && $item[\"end_time\"] != \"\") {\n\t\t\t\t\t\treturn date($date_format,$s).\" &mdash; \".date($time_format,$s).\" - \".date($time_format,$e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn date($date_format,$s).\" &mdash; \".date($time_format,$s);\n\t\t\t\t\t}\n\t\t\t\t// Multi day event\n\t\t\t\t} else {\n\t\t\t\t\t// Starts one night, ends next morning?\n\t\t\t\t\tif (date(\"H\",$s) > date(\"H\",$e)) {\n\t\t\t\t\t\treturn date($date_format,$s).\" &mdash; \".date($time_format,$s).\" - \".date($time_format,$e);\n\t\t\t\t\t// Probably meant an event to be on multiple days for a few hours each day.\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn date($date_format,$s).\" - \".date($date_format,$e).\" &mdash; \".date($time_format,$s).\" - \".date($time_format,$e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: formattedTime\n\t\t\t\tReturns a string of formatted time based on an event having start/end times.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\titem - The event instance array.\n\t\t\t\ttime_format - The time format (compatible with PHP's time format)\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tA date/time string.\n\t\t*/\n\t\t\n\t\tstatic function formattedTime($item,$time_format = \"gi:a\") {\n\t\t\t$s = strtotime($item[\"start\"]);\n\t\t\t$e = strtotime($item[\"end\"]);\n\t\t\tif ($item[\"all_day\"]) {\n\t\t\t\treturn \"All Day\";\n\t\t\t}\n\t\t\tif ($s != $e && $item[\"end_time\"] != \"\") {\n\t\t\t    return date($time_format,$s).\" - \".date($time_format,$e);\n\t\t\t} else {\n\t\t\t    return date($time_format,$s);\n\t\t\t}\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: publishHook\n\t\t\t\tUsed by the BigTree form to cache the event on publish.\n\t\t*/\n\t\t\n\t\tstatic function publishHook($table,$id,$changes,$many_to_many,$tags) {\n\t\t\tself::recacheEvent($id);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: get\n\t\t\t\tReturns an event with its fields decoded.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\titem - Either the event id or an event array.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn event array with its fields decoded.\n\t\t*/\n\t\t\n\t\tstatic function get($item) {\n\t\t\tglobal $cms;\n\t\t\t\n\t\t\tif (!is_array($item)) {\n\t\t\t\t$item = sqlfetch(sqlquery(\"SELECT * FROM btx_events_events WHERE id = '\".sqlescape($item).\"'\"));\n\t\t\t}\n\t\t\tif (!is_array($item)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tforeach ($item as $key => $val) {\n\t\t\t\tif (is_array($val)) {\n\t\t\t\t\t$item[$key] = BigTree::untranslateArray($val);\n\t\t\t\t} elseif (is_array(json_decode($val,true))) {\n\t\t\t\t\t$item[$key] = BigTree::untranslateArray(json_decode($val,true));\n\t\t\t\t} else {\n\t\t\t\t\t$item[$key] = $cms->replaceInternalPageLinks($val);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $item;\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: getCacheTimes\n\t\t\t\tReturns the start and end timestamps for an event.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\titem - Event array.\n\t\t\t\tstart_date - The date of the occurence.\n\t\t\t\tend_date - The end date of the occurence.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of timestamps (first being start, second being end)\n\t\t*/\t\t\t\t\n\n\t\tstatic function getCacheTimes($item,$start_date,$end_date) {\n\t\t\t// If they didn't enter an end date, we're going to assume it ends the same day it starts\n\t\t\tif ($end_date == \"0000-00-00\" || !$end_date) {\n\t\t\t\t$end_date = $start_date;\n\t\t\t}\n\t\t\t// If it's an all day event or we don't know the start time, set the end time to 11:59\n\t\t\tif ($item[\"all_day\"] || !$item[\"start_time\"]) {\n\t\t\t\t$start_date = strtotime($start_date.\" 00:00:00\");\n\t\t\t\t$end_date = strtotime($end_date.\" 23:59:59\");\n\t\t\t} else {\n\t\t\t\t$start_date = strtotime($start_date.\" \".$item[\"start_time\"]);\n\t\t\t\t// If we have an end time, let's see if it's actually the next day.\n\t\t\t\tif ($item[\"end_time\"]) {\n\t\t\t\t\tif (strtotime($item[\"start_time\"]) < strtotime($item[\"end_time\"]) && $start_date == $end_date) {\n\t\t\t\t\t\t$end_date = strtotime($start_date.\" \".$item[\"end_time\"].\" +1 day\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$end_date = strtotime($end_date.\" \".$item[\"end_time\"]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$end_date = strtotime($end_date.\" 23:59:59\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t$start_date = date(\"Y-m-d H:i:s\",$start_date);\n\t\t\t$end_date = date(\"Y-m-d H:i:s\",$end_date);\n\t\t\treturn array($start_date,$end_date);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getCategoriesByParent\n\t\t\t\tReturns an array of categories with a given parent ID.\n\n\t\t\tParameters:\n\t\t\t\tparent - The parent ID to check.\n\t\t\t\tsort - The sort order of the categories (defaults to positioned).\n\n\t\t\tReturns:\n\t\t\t\tAn array of categories.\n\t\t*/\n\n\t\tstatic function getCategoriesByParent($parent = false,$sort = \"position DESC, id ASC\") {\n\t\t\t$categories = array();\n\t\t\tif (!$parent) {\n\t\t\t\t$q = sqlquery(\"SELECT * FROM btx_events_categories WHERE parent IS NULL ORDER BY $sort\");\n\t\t\t} else {\n\t\t\t\t$q = sqlquery(\"SELECT * FROM btx_events_categories WHERE parent = '$parent' ORDER BY $sort\");\n\t\t\t}\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$categories[] = $f;\n\t\t\t}\n\t\t\treturn $categories;\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: getCategory\n\t\t\t\tReturns a category for the given id.\n\n\t\t\tParameters:\n\t\t\t\tid - The category id.\n\n\t\t\tReturns:\n\t\t\t\tA category entry.\n\t\t*/\n\n\t\tstatic function getCategory($id) {\n\t\t\t$id = sqlescape($id);\n\t\t\treturn sqlfetch(sqlquery(\"SELECT * FROM btx_events_categories WHERE id = '$id'\"));\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getCategoryByRoute\n\t\t\t\tReturns a category for the given route.\n\n\t\t\tParameters:\n\t\t\t\troute - The category route.\n\n\t\t\tReturns:\n\t\t\t\tA category entry.\n\t\t*/\n\n\t\tstatic function getCategoryByRoute($route) {\n\t\t\t$route = sqlescape($route);\n\t\t\treturn sqlfetch(sqlquery(\"SELECT * FROM btx_events_categories WHERE route = '$route'\"));\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getCategoryLineage\n\t\t\t\tReturns an array of the ancestors of a given category.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tcategory - A category ID or category array.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of categories starting with the \"oldest\".\n\t\t*/\n\t\t\n\t\tstatic function getCategoryLineage($category,$ancestors = array()) {\n\t\t\tif (!is_array($category)) {\n\t\t\t\t$category = sqlfetch(sqlquery(\"SELECT * FROM btx_events_categories WHERE id = '\".sqlescape($category).\"'\"));\n\t\t\t}\n\t\t\tif ($category[\"parent\"] && $category[\"parent\"] != $category[\"id\"]) {\n\t\t\t\t$parent = sqlfetch(sqlquery(\"SELECT * FROM btx_events_categories WHERE id = '\".sqlescape($category[\"parent\"]).\"'\"));\n\t\t\t\t$ancestors = array_merge(array($parent),$ancestors);\n\t\t\t\treturn self::getCategoryLineage($parent,$ancestors);\n\t\t\t}\n\t\t\treturn $ancestors;\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: getEventCategories\n\t\t\t\tReturns an array of categories that an event belongs to.\n\n\t\t\tParameters:\n\t\t\t\tevent - The event entry or event id.\n\n\t\t\tReturns:\n\t\t\t\tAn array of IDs.\n\t\t*/\n\n\t\tstatic function getEventCategories($event) {\n\t\t\t$event = is_array($event) ? sqlescape($event[\"id\"]) : sqlescape($event);\n\t\t\t$categories = array();\n\t\t\t$q = sqlquery(\"SELECT btx_events_categories.* FROM btx_events_categories JOIN btx_events_event_categories ON btx_events_categories.id = btx_events_event_categories.category WHERE btx_events_event_categories.event = '$event'\");\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$categories[] = $f;\n\t\t\t}\n\t\t\treturn $categories;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventCategoryIDs\n\t\t\t\tReturns an array of category IDs that an event belongs to.\n\n\t\t\tParameters:\n\t\t\t\tevent - The event entry or event id.\n\n\t\t\tReturns:\n\t\t\t\tAn array of IDs.\n\t\t*/\n\n\t\tstatic function getEventCategoryIDs($event) {\n\t\t\t$event = is_array($event) ? sqlescape($event[\"id\"]) : sqlescape($event);\n\t\t\t$categories = array();\n\t\t\t$q = sqlquery(\"SELECT * FROM btx_events_event_categories WHERE event = '$event'\");\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$categories[] = $f[\"category\"];\n\t\t\t}\n\t\t\treturn $categories;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventCategoryList\n\t\t\t\tReturns a nested category list.\n\t\t*/\n\t\t\n\t\tstatic function getEventCategoryList($original_list,$parent = 0,$level = \"\") {\n\t\t\t$list = array();\n\t\t\t$q = sqlquery(\"SELECT * FROM btx_events_categories WHERE parent = '\".sqlescape($parent).\"' ORDER BY name\");\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$list[$f[\"id\"]] = $level.$f[\"name\"];\n\t\t\t\t$list = $list + self::getEventCategoryList(false,$f[\"id\"],trim($level).\"--- \");\n\t\t\t}\n\t\t\treturn $list;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventInstances\n\t\t\t\tReturns instances of an event.\n\n\t\t\tParameters:\n\t\t\t\tevent - An event array.\n\t\t\t\tupcoming - Whether to return only upcoming instances (defaults to false)\n\n\t\t\tReturns:\n\t\t\t\tAn array of event instances\n\n\t\t\tSee Also:\n\t\t\t\t<getUpcomingEventInstances>\n\t\t*/\n\n\t\tstatic function getEventInstances($event,$upcoming = false) {\n\t\t\t$instances = array();\n\t\t\t$upcoming = $upcoming ? \" AND end >= NOW()\" : \"\";\n\n\t\t\t$q = sqlquery(\"SELECT * FROM btx_events_date_cache WHERE event = '\".sqlescape($event[\"id\"]).\"' $upcoming ORDER BY start ASC\");\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$f[\"instance\"] = $f[\"id\"];\n\t\t\t\t$instances[] = array_merge($f,$event);\n\t\t\t}\n\n\t\t\treturn $instances;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventsByDate\n\t\t\t\tReturns event instances for a given date.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tdate - The date (Y-m-d format) to pull events for.\n\t\t\t\tfeatured - Whether to pull only featured events or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateRange>\n\t\t*/\n\t\t\n\t\tstatic function getEventsByDate($date,$featured = false) {\n\t\t\treturn self::getEventsByDateRange($date,$date,$featured);\n\t\t}\n\t\t\n\t\t\n\t\t/*\n\t\t\tFunction: getEventsByDateInCategories\n\t\t\t\tReturns event instances for a given date in given categories.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tdate - The date (Y-m-d format) to pull events for.\n\t\t\t\tcategories - An array of categories to get events for.\n\t\t\t\tfeatured - Whether to pull only featured events or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateRangeInCategories>\n\t\t*/\n\t\t\n\t\tstatic function getEventsByDateInCategories($date,$categories,$featured = false) {\n\t\t\treturn self::getEventsByDateRangeInCategories($date,$date,$categories,$featured);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventsByDateInCategoriesWithSubcategories\n\t\t\t\tReturns event instances for a given date in given categories and their subcategories.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tdate - The date (Y-m-d format) to pull events for.\n\t\t\t\tcategories - An array of categories to get events for.\n\t\t\t\tfeatured - Whether to pull only featured events or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateRangeInCategories>\n\t\t*/\n\t\t\n\t\tstatic function getEventsByDateInCategoriesWithSubcategories($date,$categories,$featured = false) {\n\t\t\t$with_sub = $categories;\n\t\t\tforeach ($categories as $cat) {\n\t\t\t\t$with_sub = array_merge($with_sub,self::getSubcategoriesOfCategory($cat));\n\t\t\t}\n\t\t\treturn self::getEventsByDateInCategories($date,$with_sub,$featured);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventsByDateInCategory\n\t\t\t\tReturns event instances for a given date in given category.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tdate - The date (Y-m-d format) to pull events for.\n\t\t\t\tcategory - A category array or ID.\n\t\t\t\tfeatured - Whether to pull only featured events or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateRangeInCategories>\n\t\t*/\n\t\t\n\t\tstatic function getEventsByDateInCategory($date,$category,$featured = false) {\n\t\t\treturn self::getEventsByDateRangeInCategories($date,$date,array($category),$featured);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventsByDateInCategoryWithSubcategories\n\t\t\t\tReturns event instances for a given date in given category and its subcategories.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tdate - The date (Y-m-d format) to pull events for.\n\t\t\t\tcategory - A category array or ID.\n\t\t\t\tfeatured - Whether to pull only featured events or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateRangeInCategoriesWithSubcategories>\n\t\t*/\n\t\t\n\t\tstatic function getEventsByDateInCategoryWithSubcategories($date,$category,$featured = false) {\n\t\t\treturn self::getEventsByDateRangeInCategoriesWithSubcategories($date,$date,array($category),$featured);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventsByDateRange\n\t\t\t\tReturns event instances for a given date range.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tstart_date - The start date (Y-m-d format) to pull events for.\n\t\t\t\tend_date - The end date (Y-m-d format) to pull events for.\n\t\t\t\tfeatured - Whether to pull only featured events or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDate>\n\t\t*/\n\t\t\n\t\tstatic function getEventsByDateRange($start_date,$end_date,$featured = false) {\n\t\t\t$events = array();\n\t\t\tif ($featured) {\n\t\t\t\t$featured = \" AND btx_events_events.featured = 'on' \";\n\t\t\t}\n\n\t\t\t$q = sqlquery(\"SELECT btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_events.* FROM btx_events_events JOIN btx_events_date_cache WHERE btx_events_date_cache.event = btx_events_events.id AND btx_events_date_cache.end >= '$start_date 00:00:00' AND btx_events_date_cache.start <= '$end_date 23:59:59' $featured ORDER BY btx_events_date_cache.start ASC\");\n\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$events[] = self::get($f);\n\t\t\t}\n\t\t\treturn $events;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventsByDateRangeInCategories\n\t\t\t\tReturns event instances for a given date range in the given categories.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tstart_date - The start date (Y-m-d format) to pull events for.\n\t\t\t\tend_date - The end date (Y-m-d format) to pull events for.\n\t\t\t\tcategories - An array of categories to get events for.\n\t\t\t\tfeatured - Whether to pull only featured events or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateInCategories>\n\t\t*/\n\t\t\n\t\tstatic function getEventsByDateRangeInCategories($start_date,$end_date,$categories,$featured = false) {\n\t\t\t$events = array();\n\t\t\tif ($featured) {\n\t\t\t\t$featured = \" AND btx_events_events.featured = 'on' \";\n\t\t\t}\n\n\t\t\t$cat_search = array();\n\t\t\tforeach ($categories as $category) {\n\t\t\t\t$category = is_array($category) ? sqlescape($category[\"id\"]) : sqlescape($category);\n\t\t\t\t$cat_search[] = \"btx_events_event_categories.category = '$category'\";\n\t\t\t}\n\n\t\t\tif (!count($cat_search)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t$q = sqlquery(\"SELECT DISTINCT(CONCAT(btx_events_date_cache.event,btx_events_date_cache.start,btx_events_date_cache.end)),btx_events_date_cache.event,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_date_cache.start,btx_events_date_cache.end FROM btx_events_date_cache JOIN btx_events_event_categories WHERE btx_events_date_cache.event = btx_events_event_categories.event AND btx_events_date_cache.end >= '$start_date 00:00:00' AND btx_events_date_cache.start <= '$end_date 23:59:59' AND (\".implode(\" OR \",$cat_search).\") $featured ORDER BY btx_events_date_cache.start ASC\");\n\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$event = self::get($f[\"event\"]);\n\t\t\t\tif ($event) {\n\t\t\t\t\t$event[\"start\"] = $f[\"start\"];\n\t\t\t\t\t$event[\"end\"] = $f[\"end\"];\n\t\t\t\t\t$event[\"instance\"] = $f[\"instance\"];\n\t\t\t\t\t$event[\"title_route\"] = $f[\"title_route\"];\n\t\t\t\t\t$event[\"date_route\"] = $f[\"date_route\"];\n\t\t\t\t\t$events[] = $event;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $events;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventsByDateRangeInCategoriesWithSubcategories\n\t\t\t\tReturns event instances for a given date range in the given categories and their subcategories.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tstart_date - The start date (Y-m-d format) to pull events for.\n\t\t\t\tend_date - The end date (Y-m-d format) to pull events for.\n\t\t\t\tcategories - An array of categories to get events for.\n\t\t\t\tfeatured - Whether to pull only featured events or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateInCategoriesWithSubcategories>\n\t\t*/\n\t\t\n\t\tstatic function getEventsByDateRangeInCategoriesWithSubcategories($start_date,$end_date,$categories,$featured = false) {\n\t\t\t$with_sub = $categories;\n\t\t\tforeach ($categories as $cat) {\n\t\t\t\t$with_sub = array_merge($with_sub,self::getSubcategoriesOfCategory($cat));\n\t\t\t}\n\t\t\treturn self::getEventsByDateRangeInCategories($start_date,$end_date,$with_sub,$featured);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventsByDateRangeInCategory\n\t\t\t\tReturns event instances for a given date range in the given category.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tstart_date - The start date (Y-m-d format) to pull events for.\n\t\t\t\tend_date - The end date (Y-m-d format) to pull events for.\n\t\t\t\tcategory - A category array or category ID.\n\t\t\t\tfeatured - Whether to pull only featured events or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateInCategories>\n\t\t*/\n\t\t\n\t\tstatic function getEventsByDateRangeInCategory($start_date,$end_date,$category,$featured = false) {\n\t\t\treturn self::getEventsByDateRangeInCategories($start_date,$end_date,array($category),$featured);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getEventsByDateRangeInCategoryWithSubcategories\n\t\t\t\tReturns event instances for a given date range in the given category and its subcategories.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tstart_date - The start date (Y-m-d format) to pull events for.\n\t\t\t\tend_date - The end date (Y-m-d format) to pull events for.\n\t\t\t\tcategory - A category array or category ID.\n\t\t\t\tfeatured - Whether to pull only featured events or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateInCategoryWithSubcategories>\n\t\t*/\n\t\t\n\t\tstatic function getEventsByDateRangeInCategoryWithSubcategories($start_date,$end_date,$category,$featured = false) {\n\t\t\treturn self::getEventsByDateRangeInCategoriesWithSubcategories($start_date,$end_date,array($category),$featured);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getFeaturedEventsByDate\n\t\t\t\tReturns featured event instances for a given date.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tdate - The date (Y-m-d format) to pull events for.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDate>\n\t\t*/\n\n\t\tstatic function getFeaturedEventsByDate($date) {\n\t\t\treturn self::getEventsByDate($date,true);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getFeaturedEventsByDateRange\n\t\t\t\tReturns featured event instances for a given date range.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tstart_date - The start date (Y-m-d format) to pull events for.\n\t\t\t\tend_date - The end date (Y-m-d format) to pull events for.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateRange>\n\t\t*/\n\n\t\tstatic function getFeaturedEventsByDateRange($start_date,$end_date) {\n\t\t\treturn self::getEventsByDateRange($start_date,$end_date,true);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getFeaturedEventsByDateRangeInCategories\n\t\t\t\tReturns featured event instances for a given date range in the provided categories.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tstart_date - The start date (Y-m-d format) to pull events for.\n\t\t\t\tend_date - The end date (Y-m-d format) to pull events for.\n\t\t\t\tcategories - An array of categories to get events for.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateRangeInCategories>\n\t\t*/\n\n\t\tstatic function getFeaturedEventsByDateRangeInCategories($start_date,$end_date,$categories) {\n\t\t\treturn self::getEventsByDateRangeInCategories($start_date,$end_date,$categories,true);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getFeaturedEventsByDateRangeInCategoriesWithSubcategories\n\t\t\t\tReturns featured event instances for a given date range in the provided categories and their subcategories.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tstart_date - The start date (Y-m-d format) to pull events for.\n\t\t\t\tend_date - The end date (Y-m-d format) to pull events for.\n\t\t\t\tcategories - An array of categories to get events for.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getEventsByDateRangeInCategoriesWithSubcategories>\n\t\t*/\n\n\t\tstatic function getFeaturedEventsByDateRangeInCategoriesWithSubcategories($start_date,$end_date,$categories) {\n\t\t\treturn self::getEventsByDateRangeInCategoriesWithSubcategories($start_date,$end_date,$categories,true);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getFeaturedSearchResultsInDateRange\n\t\t\t\tReturns featured event instances matching a given query in a specified date range.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tquery - The string to search for.\n\t\t\t\tstart_date - Beginning date (Y-m-d).\n\t\t\t\tend_date - Ending date (Y-m-d).\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances ordered by soonest.\n\n\t\t\tSee Also:\n\t\t\t\t<getSearchResultsInDateRange>\n\t\t*/\n\n\t\tstatic function getFeaturedSearchResultsInDateRange($query,$start_date,$end_date) {\n\t\t\treturn self::getSearchResultsInDateRange($query,$start_date,$end_date,true);\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: getInstance\n\t\t\t\tReturns an instance of an event (combined date cache and event entry).\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tid - The id of the event instance.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn event array with its fields decoded.\n\t\t*/\n\t\t\n\t\tstatic function getInstance($id) {\n\t\t\treturn self::get(sqlfetch(sqlquery(\"SELECT btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_events.* FROM btx_events_events JOIN btx_events_date_cache WHERE btx_events_date_cache.event = btx_events_events.id AND btx_events_date_cache.id = '$id'\")));\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: getInstanceByRoute\n\t\t\t\tReturns an instance of an event (combined date cache and event entry).\n\t\t\t\n\t\t\tParameters:\n\t\t\t\ttitle_route - The title route of the event instance.\n\t\t\t\tdate_route - The date route of the event instance.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn event array with its fields decoded.\n\t\t*/\n\t\t\n\t\tstatic function getInstanceByRoute($title_route,$date_route) {\n\t\t\treturn self::get(sqlfetch(sqlquery(\"SELECT btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_events.* FROM btx_events_events JOIN btx_events_date_cache WHERE btx_events_date_cache.event = btx_events_events.id AND btx_events_date_cache.title_route = '\".sqlescape($title_route).\"' AND btx_events_date_cache.date_route = '\".sqlescape($date_route).\"'\")));\n\t\t\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getKeyedEventsDateRangeForEvents\n\t\t\t\tReturns an array of days as keys with the events that fall in each day as an array.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tevents - An array of event instances.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tA keyed array (dates are keys, array of events are vals) for the events passed in.\n\t\t*/\n\t\t\n\t\tstatic function getKeyedDateRangeForEvents($events) {\n\t\t\t$days = array();\n\t\t\tforeach ($events as $event) {\n\t\t\t\t$days[date(\"Y-m-d\",strtotime($event[\"start\"]))][] = $event;\n\t\t\t}\n\t\t\treturn $days;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getNumberOfEventsOnDate\n\t\t\t\tReturns number of events occurring on a given date.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tdate - The date (Y-m-d format) to pull events for.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tA number.\n\t\t*/\n\t\t\n\t\tstatic function getNumberOfEventsOnDate($date) {\n\t\t\t$date = date(\"Y-m-d\",strtotime($date));\n\t\t\t$f = sqlfetch(sqlquery(\"SELECT COUNT(id) AS `count` FROM btx_events_date_cache WHERE start >= '$date 00:00:00' AND end <= '$date 23:59:59'\"));\n\t\t\treturn $f[\"count\"];\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getRandomEvent\n\t\t\t\tReturns a random event instance occurring in the future.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tfeatured - Whether to return a featured event or not.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn event instance.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getRandomEventByDate>\n\t\t*/\n\t\t\n\t\tstatic function getRandomEvent($featured = false) {\n\t\t\tif ($featured) {\n\t\t\t\t$featured = \" AND btx_events_events.featured = 'on' \";\n\t\t\t}\n\n\t\t\t$q = sqlquery(\"SELECT btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_events.* FROM btx_events_events JOIN btx_events_date_cache WHERE btx_events_date_cache.event = btx_events_events.id AND btx_events_date_cache.end >= NOW() $featured ORDER BY RAND() LIMIT 1\");\n\n\t\t\treturn self::get(sqlfetch($q));\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: getRandomEventByDate\n\t\t\t\tReturns a random event instance occurring on a specific date.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tdate - The date to pull an event for.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn event instance.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getSingleEventByDate>\n\t\t*/\n\n\t\tstatic function getRandomEventByDate($date) {\n\t\t\treturn self::getSingleEventByDate($date,\"\",\"RAND()\");\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getRandomFeaturedEvent\n\t\t\t\tReturns a random featured event instance occurring in the future.\n\t\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn event instance.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getRandomEvent>\n\t\t*/\n\t\t\n\t\tstatic function getRandomFeaturedEvent() {\n\t\t\treturn self::getRandomEvent(true);\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: getRandomFeaturedEventByDate\n\t\t\t\tReturns a random featured event instance occurring on a specific date.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tdate - The date to pull an event for.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn event instance.\n\t\t\t\n\t\t\tSee Also:\n\t\t\t\t<getRandomEventByDate>\n\t\t*/\n\n\t\tstatic function getRandomFeaturedEventByDate($date) {\n\t\t\treturn self::getSingleEventByDate($date,true,\"RAND()\");\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getSearchResultsInDateRange\n\t\t\t\tReturns event instances matching a given query in a specified date range.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tquery - The string to search for.\n\t\t\t\tstart_date - Beginning date (Y-m-d).\n\t\t\t\tend_date - Ending date (Y-m-d).\n\t\t\t\tfeatured - Whether to only return featured or not (defaults to false for all).\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances ordered by soonest.\n\t\t*/\n\n\t\tstatic function getSearchResultsInDateRange($query,$start_date,$end_date,$featured = false) {\n\t\t\t$events = array();\n\t\t\t$words = explode(\" \",$query);\n\t\t\t$qwords = array();\n\n\t\t\tif ($featured) {\n\t\t\t\t$featured = \" AND btx_events_events.featured = 'on' \";\n\t\t\t}\n\n\t\t\tif ($words) {\n\t\t\t\tforeach ($words as $word) {\n\t\t\t\t\t$word = sqlescape($word);\n\t\t\t\t\t$qwords[] = \"(btx_events_events.title LIKE '%$word%' OR btx_events_events.description LIKE '%$word%')\";\n\t\t\t\t}\n\t\t\t\t$qwords = implode(\" AND \",$qwords).\" AND \";\n\t\t\t} else {\n\t\t\t\t$qwords = \"\";\n\t\t\t}\n\n\t\t\t$q = sqlquery(\"SELECT btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_events.* FROM btx_events_events JOIN btx_events_date_cache WHERE btx_events_date_cache.event = btx_events_events.id AND $qwords btx_events_date_cache.end >= '$start_date 00:00:00' AND btx_events_date_cache.start <= '$end_date 23:59:59' $featured ORDER BY btx_events_date_cache.start ASC\");\n\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$event = self::get($f);\n\t\t\t\t$events[] = $event;\n\t\t\t}\n\t\t\treturn $events;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getSingleEventByDate\n\t\t\t\tReturns a single event for a given date.\n\n\t\t\tParameters:\n\t\t\t\tdate - The date to check for events (in Y-m-d format).\n\t\t\t\tfeatured - Whether to limit the search exclusively to featured events.\n\t\t\t\tsort - The sort to go by when picking the first event (defaults to most recently created)\n\n\t\t\tReturns:\n\t\t\t\tAn event instance.\n\t\t*/\n\n\t\tstatic function getSingleEventByDate($date,$featured = false,$sort = \"id DESC\") {\n\t\t\tif ($featured) {\n\t\t\t\t$featured = \" AND btx_events_events.featured = 'on' \";\n\t\t\t}\n\n\t\t\t$q = sqlquery(\"SELECT btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_events.* FROM btx_events_events JOIN btx_events_date_cache WHERE btx_events_date_cache.event = btx_events_events.id AND btx_events_date_cache.start <= '$date 23:59:59' AND btx_events_date_cache.end >= '$date 00:00:00' $featured ORDER BY $sort LIMIT 1\");\n\n\t\t\treturn self::get(sqlfetch($q));\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getSingleFeaturedEventByDate\n\t\t\t\tReturns a single featured event for a given date.\n\n\t\t\tParameters:\n\t\t\t\tdate - The date to check for events (in Y-m-d format).\n\t\t\t\tsort - The sort to go by when picking the first event (defaults to most recently created)\n\n\t\t\tReturns:\n\t\t\t\tAn event instance.\n\t\t*/\n\n\t\tstatic function getSingleFeaturedEventByDate($date,$sort = \"id DESC\") {\n\t\t\treturn self::getSingleEventByDate($date,true,$sort);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getSubcategoriesOfCategory\n\t\t\t\tReturns all the subcategories (and their subcategories) of a given category.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tcategory - Either a category id or array.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of categories.\n\t\t*/\n\t\t\n\t\tstatic function getSubcategoriesOfCategory($category) {\n\t\t\t$category = is_array($category) ? sqlescape($category[\"id\"]) : sqlescape($category);\n\t\t\t$categories = array();\n\t\t\t$q = sqlquery(\"SELECT * FROM btx_events_categories WHERE parent = '$category'\");\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$categories[] = $f;\n\t\t\t\t$categories = array_merge($categories,self::getSubcategoriesOfCategory($f));\n\t\t\t}\n\t\t\treturn $categories;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingEventInstances\n\t\t\t\tReturns instances of an event that occur in the future.\n\n\t\t\tParameters:\n\t\t\t\tevent - An event ID or event array.\n\n\t\t\tReturns:\n\t\t\t\tAn array of event instances\n\n\t\t\tSee Also:\n\t\t\t\t<getEventInstances>\n\t\t*/\n\n\t\tstatic function getUpcomingEventInstances($event) {\n\t\t\treturn static::getEventInstances($event,true);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingEvents\n\t\t\t\tReturns an array of event instances occurring in the future ordered by those happening soonest.\n\n\t\t\tParameters:\n\t\t\t\tlimit - The number of events to return.\n\t\t\t\tfeatured - Whether to limit the results to exclusively featured events or not (defaults to false).\n\t\t\t\tpage - The page to return (defaults to the first page).\n\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t*/\n\n\t\tstatic function getUpcomingEvents($limit = 5,$featured = false,$page = 1) {\n\t\t\t$page = $page ? ($page - 1) : 0;\n\t\t\t$events = array();\n\t\t\tif ($featured) {\n\t\t\t\t$featured = \" AND btx_events_events.featured = 'on' \";\n\t\t\t}\n\n\t\t\t$q = sqlquery(\"SELECT btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_events.* FROM btx_events_events JOIN btx_events_date_cache WHERE btx_events_date_cache.event = btx_events_events.id AND btx_events_date_cache.end >= NOW() $featured ORDER BY btx_events_date_cache.start ASC LIMIT \".($page * $limit).\",$limit\");\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$event = self::get($f);\n\t\t\t\t$events[] = $event;\n\t\t\t}\n\t\t\treturn $events;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingEventsPageCount\n\t\t\t\tReturns the number of pages of upcoming events.\n\n\t\t\tParameters:\n\t\t\t\tper_page - The number of events per page.\n\n\t\t\tReturns:\n\t\t\t\tThe number of pages.\n\t\t*/\n\n\t\tstatic function getUpcomingEventsPageCount($per_page = 5) {\n\t\t\t$f = sqlfetch(sqlquery(\"SELECT COUNT(id) AS `count` FROM btx_events_date_cache WHERE end >= NOW()\"));\n\t\t\t$pages = ceil($f[\"count\"] / $per_page);\n\t\t\treturn $pages ? $pages : 1;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingFeaturedEvents\n\t\t\t\tReturns an array of featured event instances occurring in the future ordered by those happening soonest.\n\n\t\t\tParameters:\n\t\t\t\tlimit - The number of events to return.\n\t\t\t\tpage - The page to return (defaults to the first page).\n\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\n\t\t\tSee Also:\n\t\t\t\t<getUpcomingEvents>\n\t\t*/\n\n\t\tstatic function getUpcomingFeaturedEvents($limit = 5,$page = 1) {\n\t\t\treturn self::getUpcomingEvents($limit,true,$page);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingEventsInCategories\n\t\t\t\tReturns an array of event instances occurring in the future in the provided categories ordered by those happening soonest.\n\n\t\t\tParameters:\n\t\t\t\tlimit - The number of events to return.\n\t\t\t\tcategories - An array of categories.\n\t\t\t\tfeatured - Whether to limit the results to exclusively featured events or not (defaults to false).\n\t\t\t\tpage - The page to return (defaults to the first page).\n\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t*/\n\n\t\tstatic function getUpcomingEventsInCategories($limit = 5,$categories = array(),$featured = false,$page = 1) {\n\t\t\t$page = $page ? ($page - 1) : 0;\n\t\t\t$events = array();\n\t\t\tif ($featured) {\n\t\t\t\t$featured = \" AND btx_events_events.featured = 'on' \";\n\t\t\t}\n\n\t\t\t$cat_search = array();\n\t\t\tforeach ($categories as $category) {\n\t\t\t\t$category = is_array($category) ? sqlescape($category[\"id\"]) : sqlescape($category);\n\t\t\t\t$cat_search[] = \"btx_events_event_categories.category = '$category'\";\n\t\t\t}\n\n\t\t\t$q = sqlquery(\"SELECT DISTINCT(CONCAT(btx_events_date_cache.event,btx_events_date_cache.start,btx_events_date_cache.end)),btx_events_date_cache.event,btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route FROM btx_events_date_cache JOIN btx_events_event_categories JOIN btx_events_events ON btx_events_events.id = btx_events_date_cache.event WHERE btx_events_date_cache.event = btx_events_event_categories.event AND btx_events_date_cache.end >= NOW() AND (\".implode(\" OR \",$cat_search).\") $featured ORDER BY btx_events_date_cache.start ASC LIMIT \".($page * $limit).\",$limit\");\n\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$event = self::get($f[\"event\"]);\n\t\t\t\tif ($event) {\n\t\t\t\t\t$event[\"start\"] = $f[\"start\"];\n\t\t\t\t\t$event[\"end\"] = $f[\"end\"];\n\t\t\t\t\t$event[\"instance\"] = $f[\"instance\"];\n\t\t\t\t\t$event[\"title_route\"] = $f[\"title_route\"];\n\t\t\t\t\t$event[\"date_route\"] = $f[\"date_route\"];\n\t\t\t\t\t$events[] = $event;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $events;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingEventsInCategoriesWithSubcategories\n\t\t\t\tReturns an array of event instances occurring in the future in the provided categories and all of their children ordered by those happening soonest.\n\n\t\t\tParameters:\n\t\t\t\tlimit - The number of events to return.\n\t\t\t\tcategories - An array of categories.\n\t\t\t\tfeatured - Whether to limit the results to exclusively featured events or not (defaults to false).\n\t\t\t\tpage - The page to return (defaults to the first page).\n\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\t\t*/\n\t\tstatic function getUpcomingEventsInCategoriesWithSubcategories($limit,$categories = array(),$featured = false,$page = 1) {\n\t\t\t$with_sub = $categories;\n\t\t\tforeach ($categories as $cat) {\n\t\t\t\t$with_sub = array_merge($with_sub,self::getSubcategoriesOfCategory($cat));\n\t\t\t}\n\t\t\treturn self::getUpcomingEventsInCategories($limit,$with_sub,$featured,$page);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingFeaturedEventsInCategories\n\t\t\t\tReturns an array of featured event instances occurring in the future in the provided categories ordered by those happening soonest.\n\n\t\t\tParameters:\n\t\t\t\tlimit - The number of events to return.\n\t\t\t\tcategories - An array of categories.\n\t\t\t\tpage - The page to return (defaults to the first page).\n\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\n\t\t\tSee Also:\n\t\t\t\t<getUpcomingEventsInCategories>\n\t\t*/\n\n\t\tstatic function getUpcomingFeaturedEventsInCategories($limit = 5,$categories = array(),$page = 1) {\n\t\t\treturn self::getUpcomingEventsInCategories($limit,$categories,true,$page);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingFeaturedEventsInCategoriesWithSubcategories\n\t\t\t\tReturns an array of featured event instances occurring in the future in the provided categories and their subcategories ordered by those happening soonest.\n\n\t\t\tParameters:\n\t\t\t\tlimit - The number of events to return.\n\t\t\t\tcategories - An array of categories.\n\t\t\t\tpage - The page to return (defaults to the first page).\n\n\t\t\tReturns:\n\t\t\t\tAn array of event instances.\n\n\t\t\tSee Also:\n\t\t\t\t<getUpcomingEventsInCategories>\n\t\t*/\n\n\t\tstatic function getUpcomingFeaturedEventsInCategoriesWithSubcategories($limit = 5,$categories = array(),$page = 1) {\n\t\t\treturn self::getUpcomingEventsInCategoriesWithSubcategories($limit,$categories,true,$page);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingSearchResults\n\t\t\t\tReturns event instances matching a given query that are occurring in the future.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tquery - The string to search for.\n\t\t\t\tlimit - The number of event instances to return.\n\t\t\t\tfeatured - Whether to only return featured or not (defaults to false for all).\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances ordered by soonest.\n\t\t*/\n\n\t\tstatic function getUpcomingSearchResults($query, $limit = 5, $featured = false) {\n\t\t\t$events = array();\n\t\t\t$qwords = array();\n\t\t\t$words = explode(\" \",$query);\n\n\t\t\tif ($featured) {\n\t\t\t\t$featured = \" AND btx_events_events.featured = 'on' \";\n\t\t\t}\n\n\t\t\tif ($words) {\n\t\t\t\tforeach ($words as $word) {\n\t\t\t\t\t$word = sqlescape($word);\n\t\t\t\t\t$qwords[] = \"(btx_events_events.title LIKE '%$word%' OR btx_events_events.description LIKE '%$word%')\";\n\t\t\t\t}\n\n\t\t\t\t$qwords = implode(\" AND \",$qwords).\" AND \";\n\t\t\t} else {\n\t\t\t\t$qwords = \"\";\n\t\t\t}\n\n\t\t\t$q = sqlquery(\"SELECT btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_events.* FROM btx_events_events JOIN btx_events_date_cache WHERE btx_events_date_cache.event = btx_events_events.id AND $qwords btx_events_date_cache.end >= NOW() $featured ORDER BY btx_events_date_cache.start ASC LIMIT $limit\");\n\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$event = self::get($f);\n\t\t\t\t$events[] = $event;\n\t\t\t}\n\t\t\treturn $events;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingSearchResultsPage\n\t\t\t\tReturns a page of event instances matching a given query that are occurring in the future.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tquery - The string to search for.\n\t\t\t\tpage - The page to return\n\t\t\t\tper_page - The number of event instances to return per page.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances ordered by soonest.\n\t\t*/\n\n\t\tstatic function getUpcomingSearchResultsPage($query, $page = 1, $per_page = 10) {\n\t\t\t$events = array();\n\t\t\t$words = explode(\" \",$query);\n\t\t\t$qwords = array();\n\n\t\t\tif ($words) {\n\t\t\t\tforeach ($words as $word) {\n\t\t\t\t\t$word = sqlescape($word);\n\t\t\t\t\t$qwords[] = \"(btx_events_events.title LIKE '%$word%' OR btx_events_events.description LIKE '%$word%')\";\n\t\t\t\t}\n\n\t\t\t\t$qwords = implode(\" AND \",$qwords).\" AND \";\n\t\t\t} else {\n\t\t\t\t$qwords = \"\";\n\t\t\t}\n\n\t\t\t$limit = (($page - 1) * $per_page).\", $per_page\";\n\n\t\t\t$q = sqlquery(\"SELECT btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_events.* FROM btx_events_events JOIN btx_events_date_cache WHERE btx_events_date_cache.event = btx_events_events.id AND $qwords btx_events_date_cache.end >= NOW() ORDER BY btx_events_date_cache.start ASC LIMIT $limit\");\n\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$event = self::get($f);\n\t\t\t\t$events[] = $event;\n\t\t\t}\n\n\t\t\treturn $events;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingSearchResultsPage\n\t\t\t\tReturns the number of pages of event instances matching a given query that are occurring in the future.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tquery - The string to search for.\n\t\t\t\tper_page - The number of event instances per page.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn integer.\n\t\t*/\n\n\t\tstatic function getUpcomingSearchResultsPageCount($query, $per_page = 10) {\n\t\t\t$events = array();\n\t\t\t$words = explode(\" \",$query);\n\t\t\t$qwords = array();\n\n\t\t\tif ($words) {\n\t\t\t\tforeach ($words as $word) {\n\t\t\t\t\t$word = sqlescape($word);\n\t\t\t\t\t$qwords[] = \"(btx_events_events.title LIKE '%$word%' OR btx_events_events.description LIKE '%$word%')\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$qwords = implode(\" AND \",$qwords).\" AND \";\n\t\t\t} else {\n\t\t\t\t$qwords = \"\";\n\t\t\t}\n\n\t\t\t$limit = (($page - 1) * $per_page).\", $per_page\";\n\n\t\t\t$f = sqlfetch(sqlquery(\"SELECT COUNT(btx_events_date_cache.id) AS `count`\n\t\t\t\t\t\t\t\t\tFROM btx_events_events JOIN btx_events_date_cache\n\t\t\t\t\t\t\t\t\tON btx_events_date_cache.event = btx_events_events.id\n\t\t\t\t\t\t\t\t\tWHERE $qwords btx_events_date_cache.end >= NOW()\"));\n\n\t\t\t$pages = ceil($f[\"count\"] / $per_page);\n\n\t\t\treturn $pages ?: 1;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: getUpcomingFeaturedSearchResults\n\t\t\t\tReturns featured event instances matching a given query that are occurring in the future.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tquery - The string to search for.\n\t\t\t\tlimit - The number of event instances to return.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of event instances ordered by soonest.\n\t\t*/\n\n\t\tstatic function getUpcomingFeaturedSearchResults($query,$limit = 5) {\n\t\t\treturn self::getUpcomingSearchResults($query,$limit,true);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: recacheEvent\n\t\t\t\tRemoves cached occurrences and then caches the event again.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tid - The event id.\n\t\t*/\n\n\t\tstatic function recacheEvent($id) {\n\t\t\tself::uncacheEvent($id);\n\t\t\tself::cacheEvent($id);\n\t\t}\n\n\t\t/*\n\t\t\tFunction: searchResults\n\t\t\t\tReturns event entries that match a given query (not instances).\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tquery - The string to search for.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of decoded event entries from the database.\n\t\t*/\n\n\t\tstatic function searchResults($query) {\n\t\t\t$words = explode(\" \",$query);\n\t\t\t$qwords = array();\n\n\t\t\tif ($words) {\n\t\t\t\tforeach ($words as $word) {\n\t\t\t\t\t$word = sqlescape($word);\n\t\t\t\t\t$qwords[] = \"(title LIKE '%$word%' OR description LIKE '%$word%')\";\n\t\t\t\t}\n\n\t\t\t\t$qwords = \" AND \".implode(\" AND \",$qwords);\n\t\t\t} else {\n\t\t\t\t$qwords = \"\";\n\t\t\t}\n\n\t\t\t$q = sqlquery(\"SELECT * FROM btx_events_events WHERE 1 $qwords ORDER BY id DESC\");\n\n\t\t\t$events = array();\n\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$event = self::get($f);\n\t\t\t\t$events[] = $event;\n\t\t\t}\n\n\t\t\treturn $events;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: searchResultsInCategory\n\t\t\t\tReturns event entries that match a given query (not instances) that belong to a category (or one of its subcategories).\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tquery - The string to search for.\n\t\t\t\tcategory - The category to check against.\n\t\t\t\n\t\t\tReturns:\n\t\t\t\tAn array of decoded event entries from the database.\n\t\t*/\n\n\t\tstatic function searchResultsInCategory($query, $category) {\n\t\t\t$category = is_array($category) ? sqlescape($category[\"id\"]) : sqlescape($category);\n\t\t\t$with_sub = array_merge(array($category),self::getSubcategoriesOfCategory($category));\n\t\t\t$cat_search = array();\n\n\t\t\tforeach ($with_sub as $category) {\n\t\t\t\t$cat_search[] = \"btx_events_event_categories.category = '$category'\";\n\t\t\t}\n\n\t\t\t$words = explode(\" \",$query);\n\t\t\t$qwords = array();\n\n\t\t\tif ($words) {\n\t\t\t\tforeach ($words as $word) {\n\t\t\t\t\t$word = sqlescape($word);\n\t\t\t\t\t$qwords[] = \"(btx_events_events.title LIKE '%$word%' OR btx_events_events.description LIKE '%$word%')\";\n\t\t\t\t}\n\n\t\t\t\t$qwords = \" AND \".implode(\" AND \",$qwords);\n\t\t\t} else {\n\t\t\t\t$qwords = \"\";\n\t\t\t}\n\n\t\t\t$q = sqlquery(\"SELECT DISTINCT(btx_events_event_categories.event),btx_events_events.* FROM btx_events_events JOIN btx_events_event_categories WHERE btx_events_events.id = btx_events_event_categories.event $qwords AND (\".implode(\" OR \",$cat_search).\") ORDER BY id DESC\");\n\n\t\t\t$events = array();\n\n\t\t\twhile ($f = sqlfetch($q)) {\n\t\t\t\t$event = self::get($f);\n\t\t\t\t$events[] = $event;\n\t\t\t}\n\n\t\t\treturn $events;\n\t\t}\n\t\t\n\t\t/*\n\t\t\tFunction: uncacheEvent\n\t\t\t\tRemoves cached occurrences of an event.\n\t\t\t\n\t\t\tParameters:\n\t\t\t\tid - The event id.\n\t\t*/\n\n\t\tstatic function uncacheEvent($id) {\n\t\t\t$id = sqlescape($id);\n\t\t\tsqlquery(\"DELETE FROM btx_events_date_cache WHERE event = '$id'\");\n\t\t}\n\n\t\t/*\n\t\t\tFunction: parseMTM\n\t\t\t\tHelper function for the admin to create sensible category tagging.\n\t\t*/\n\t\t\n\t\tstatic function parseMTM($list,$everything = false) {\n\t\t\tif (!$everything) {\n\t\t\t\treturn $list;\n\t\t\t}\n\t\t\t$parsed = array();\n\t\t\tforeach ($list as $id => $name) {\n\t\t\t\t$ancestors = self::getCategoryLineage($id);\n\t\t\t\t$path = array();\n\t\t\t\tforeach ($ancestors as $a) {\n\t\t\t\t\t$path[] = $a[\"name\"];\n\t\t\t\t}\n\t\t\t\t$path[] = $name;\n\t\t\t\t$parsed[$id] = implode(\" \u00bb \",$path);\n\t\t\t}\n\t\t\tasort($parsed);\n\t\t\treturn $parsed;\n\t\t}\n\t}\n\t", "{\n    \"type\": \"extension\",\n    \"id\": \"com.fastspot.events\",\n    \"version\": \"1.2.1\",\n    \"revision\": 6,\n    \"compatibility\": \"4.2.4+\",\n    \"title\": \"Events\",\n    \"description\": \"A very fast (performance wise) events system that supports recurring events and a powerful class for pulling events into the front end of your site.\",\n    \"keywords\": [\n        \"events\",\n        \"recurring\"\n    ],\n    \"author\": {\n        \"name\": \"Tim Buckingham\",\n        \"url\": \"http://www.fastspot.com\",\n        \"email\": \"tim@fastspot.com\"\n    },\n    \"licenses\": {\n        \"LGPL v3\": \"http://opensource.org/licenses/LGPL-3.0\"\n    },\n    \"components\": {\n        \"module_groups\": [],\n        \"modules\": [\n            {\n                \"id\": \"3\",\n                \"group\": null,\n                \"name\": \"Events\",\n                \"route\": \"com.fastspot.events*events\",\n                \"class\": \"BTXEvents\",\n                \"icon\": \"events\",\n                \"gbp\": {\n                    \"name\": \"\",\n                    \"table\": \"\",\n                    \"other_table\": \"\"\n                },\n                \"position\": \"0\",\n                \"extension\": \"com.fastspot.events\",\n                \"actions\": [\n                    {\n                        \"id\": \"7\",\n                        \"module\": \"3\",\n                        \"name\": \"View Events\",\n                        \"route\": \"\",\n                        \"in_nav\": \"on\",\n                        \"form\": null,\n                        \"view\": \"4\",\n                        \"report\": null,\n                        \"class\": \"list\",\n                        \"level\": \"0\",\n                        \"position\": \"6\"\n                    },\n                    {\n                        \"id\": \"8\",\n                        \"module\": \"3\",\n                        \"name\": \"Search\",\n                        \"route\": \"search\",\n                        \"in_nav\": \"on\",\n                        \"form\": null,\n                        \"view\": null,\n                        \"report\": null,\n                        \"class\": \"search2\",\n                        \"level\": \"0\",\n                        \"position\": \"5\"\n                    },\n                    {\n                        \"id\": \"9\",\n                        \"module\": \"3\",\n                        \"name\": \"Calendar\",\n                        \"route\": \"calendar\",\n                        \"in_nav\": \"on\",\n                        \"form\": null,\n                        \"view\": null,\n                        \"report\": null,\n                        \"class\": \"calendar2\",\n                        \"level\": \"0\",\n                        \"position\": \"4\"\n                    },\n                    {\n                        \"id\": \"10\",\n                        \"module\": \"3\",\n                        \"name\": \"Add Event\",\n                        \"route\": \"add\",\n                        \"in_nav\": \"on\",\n                        \"form\": \"4\",\n                        \"view\": null,\n                        \"report\": null,\n                        \"class\": \"add\",\n                        \"level\": \"0\",\n                        \"position\": \"3\"\n                    },\n                    {\n                        \"id\": \"11\",\n                        \"module\": \"3\",\n                        \"name\": \"View Categories\",\n                        \"route\": \"categories\",\n                        \"in_nav\": \"on\",\n                        \"form\": null,\n                        \"view\": \"3\",\n                        \"report\": null,\n                        \"class\": \"category\",\n                        \"level\": \"0\",\n                        \"position\": \"2\"\n                    },\n                    {\n                        \"id\": \"12\",\n                        \"module\": \"3\",\n                        \"name\": \"Add Category\",\n                        \"route\": \"add-category\",\n                        \"in_nav\": \"on\",\n                        \"form\": \"3\",\n                        \"view\": null,\n                        \"report\": null,\n                        \"class\": \"add\",\n                        \"level\": \"0\",\n                        \"position\": \"1\"\n                    },\n                    {\n                        \"id\": \"13\",\n                        \"module\": \"3\",\n                        \"name\": \"Edit Event\",\n                        \"route\": \"edit\",\n                        \"in_nav\": \"\",\n                        \"form\": \"4\",\n                        \"view\": null,\n                        \"report\": null,\n                        \"class\": \"edit\",\n                        \"level\": \"0\",\n                        \"position\": \"0\"\n                    },\n                    {\n                        \"id\": \"14\",\n                        \"module\": \"3\",\n                        \"name\": \"Edit Category\",\n                        \"route\": \"edit-category\",\n                        \"in_nav\": \"\",\n                        \"form\": \"3\",\n                        \"view\": null,\n                        \"report\": null,\n                        \"class\": \"edit\",\n                        \"level\": \"0\",\n                        \"position\": \"0\"\n                    }\n                ],\n                \"views\": [\n                    {\n                        \"id\": \"3\",\n                        \"module\": \"3\",\n                        \"title\": \"Categories\",\n                        \"description\": \"\",\n                        \"type\": \"nested\",\n                        \"table\": \"btx_events_categories\",\n                        \"fields\": {\n                            \"name\": {\n                                \"width\": \"788\",\n                                \"title\": \"Name\",\n                                \"parser\": \"\",\n                                \"numeric\": false\n                            }\n                        },\n                        \"options\": {\n                            \"nesting_column\": \"parent\",\n                            \"filter\": \"\"\n                        },\n                        \"actions\": {\n                            \"edit\": \"on\",\n                            \"delete\": \"on\"\n                        },\n                        \"preview_url\": \"\",\n                        \"related_form\": null\n                    },\n                    {\n                        \"id\": \"4\",\n                        \"module\": \"3\",\n                        \"title\": \"Events\",\n                        \"description\": \"\",\n                        \"type\": \"searchable\",\n                        \"table\": \"btx_events_events\",\n                        \"fields\": {\n                            \"start_date\": {\n                                \"title\": \"Start Date\",\n                                \"parser\": \"\",\n                                \"width\": \"98\",\n                                \"numeric\": false\n                            },\n                            \"title\": {\n                                \"title\": \"Title\",\n                                \"parser\": \"\",\n                                \"width\": \"521\",\n                                \"numeric\": false\n                            },\n                            \"recurrence_type\": {\n                                \"title\": \"Recurring\",\n                                \"parser\": \"\",\n                                \"width\": \"89\",\n                                \"numeric\": false\n                            }\n                        },\n                        \"options\": {\n                            \"sort_column\": \"start_date\",\n                            \"sort_direction\": \"DESC\",\n                            \"per_page\": \"15\",\n                            \"filter\": \"\"\n                        },\n                        \"actions\": {\n                            \"feature\": \"on\",\n                            \"edit\": \"on\",\n                            \"delete\": \"on\"\n                        },\n                        \"preview_url\": \"\",\n                        \"related_form\": null\n                    }\n                ],\n                \"forms\": [\n                    {\n                        \"id\": \"3\",\n                        \"module\": \"3\",\n                        \"title\": \"Category\",\n                        \"table\": \"btx_events_categories\",\n                        \"fields\": [\n                            {\n                                \"column\": \"parent\",\n                                \"type\": \"list\",\n                                \"title\": \"Parent Category\",\n                                \"subtitle\": \"\",\n                                \"options\": {\n                                    \"list_type\": \"db\",\n                                    \"allow-empty\": \"Yes\",\n                                    \"pop-table\": \"btx_events_categories\",\n                                    \"pop-description\": \"name\",\n                                    \"pop-sort\": \"`name` ASC\",\n                                    \"column\": \"parent\"\n                                }\n                            },\n                            {\n                                \"column\": \"name\",\n                                \"type\": \"text\",\n                                \"title\": \"Name\",\n                                \"subtitle\": \"\",\n                                \"options\": {\n                                    \"column\": \"name\"\n                                }\n                            },\n                            {\n                                \"column\": \"route\",\n                                \"type\": \"route\",\n                                \"title\": \"Route\",\n                                \"subtitle\": \"\",\n                                \"options\": {\n                                    \"source\": \"name\",\n                                    \"column\": \"route\"\n                                }\n                            }\n                        ],\n                        \"default_position\": \"Bottom\",\n                        \"return_view\": \"3\",\n                        \"return_url\": \"\",\n                        \"tagging\": \"\",\n                        \"hooks\": null\n                    },\n                    {\n                        \"id\": \"4\",\n                        \"module\": \"3\",\n                        \"title\": \"Event\",\n                        \"table\": \"btx_events_events\",\n                        \"fields\": [\n                            {\n                                \"column\": \"title\",\n                                \"type\": \"text\",\n                                \"title\": \"Title\",\n                                \"subtitle\": \"\",\n                                \"options\": {\n                                    \"column\": \"title\"\n                                }\n                            },\n                            {\n                                \"column\": \"description\",\n                                \"type\": \"html\",\n                                \"title\": \"Description\",\n                                \"subtitle\": \"\",\n                                \"options\": {\n                                    \"column\": \"description\"\n                                }\n                            },\n                            {\n                                \"column\": \"image\",\n                                \"type\": \"upload\",\n                                \"title\": \"Image\",\n                                \"subtitle\": \"(crops to 600x400)\",\n                                \"options\": {\n                                    \"directory\": \"files/events/\",\n                                    \"image\": \"on\",\n                                    \"min_width\": \"600\",\n                                    \"min_height\": \"400\",\n                                    \"preview_prefix\": \"\",\n                                    \"crops\": {\n                                        \"1\": {\n                                            \"prefix\": \"\",\n                                            \"width\": \"600\",\n                                            \"height\": \"400\",\n                                            \"grayscale\": \"\"\n                                        }\n                                    },\n                                    \"column\": \"image\"\n                                }\n                            },\n                            {\n                                \"column\": \"__mtm-1__\",\n                                \"type\": \"many-to-many\",\n                                \"title\": \"Categories\",\n                                \"subtitle\": \"\",\n                                \"options\": {\n                                    \"mtm-connecting-table\": \"btx_events_event_categories\",\n                                    \"mtm-my-id\": \"event\",\n                                    \"mtm-other-id\": \"category\",\n                                    \"mtm-other-table\": \"btx_events_categories\",\n                                    \"mtm-other-descriptor\": \"name\",\n                                    \"mtm-sort\": \"`name` ASC\",\n                                    \"mtm-list-parser\": \"BTXEvents::parseMTM\",\n                                    \"column\": \"__mtm-1__\"\n                                }\n                            },\n                            {\n                                \"column\": \"all_day\",\n                                \"type\": \"com.fastspot.events*date-chooser\",\n                                \"title\": \"Date Chooser\",\n                                \"subtitle\": \"\",\n                                \"options\": {\n                                    \"function\": \"BTXEvents::drawFormDateTime\",\n                                    \"process_function\": \"BTXEvents::parseFormDateTime\",\n                                    \"column\": \"all_day\"\n                                }\n                            },\n                            {\n                                \"column\": \"route\",\n                                \"type\": \"route\",\n                                \"title\": \"Route\",\n                                \"subtitle\": \"\",\n                                \"options\": {\n                                    \"source\": \"title\",\n                                    \"column\": \"route\"\n                                }\n                            }\n                        ],\n                        \"default_position\": \"\",\n                        \"return_view\": \"4\",\n                        \"return_url\": \"\",\n                        \"tagging\": \"\",\n                        \"hooks\": {\n                            \"pre\": \"\",\n                            \"post\": \"\",\n                            \"publish\": \"BTXEvents::publishHook\"\n                        }\n                    }\n                ],\n                \"embed_forms\": [],\n                \"reports\": []\n            }\n        ],\n        \"templates\": [],\n        \"callouts\": [],\n        \"settings\": [],\n        \"feeds\": [],\n        \"field_types\": [\n            {\n                \"id\": \"com.fastspot.events*date-chooser\",\n                \"name\": \"Events \\u2014 Date Chooser\",\n                \"use_cases\": {\n                    \"modules\": \"on\"\n                },\n                \"self_draw\": \"on\",\n                \"extension\": \"com.fastspot.events\"\n            }\n        ],\n        \"tables\": {\n            \"btx_events_categories\": \"CREATE TABLE `btx_events_categories` (   `id` int(11) NOT NULL AUTO_INCREMENT,   `parent` int(11) DEFAULT NULL,   `name` varchar(255) NOT NULL DEFAULT '',   `route` varchar(255) NOT NULL DEFAULT '',   `position` int(11) NOT NULL,   PRIMARY KEY (`id`),   KEY `parent` (`parent`),   KEY `route` (`route`),   KEY `position` (`position`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8\",\n            \"btx_events_date_cache\": \"CREATE TABLE `btx_events_date_cache` (   `id` int(11) NOT NULL AUTO_INCREMENT,   `event` int(11) NOT NULL,   `start` datetime NOT NULL,   `end` datetime NOT NULL,   `date_cached` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,   `title_route` varchar(255) NOT NULL DEFAULT '',   `date_route` varchar(255) NOT NULL DEFAULT '',   PRIMARY KEY (`id`),   KEY `event` (`event`),   KEY `start` (`start`),   KEY `end` (`end`),   KEY `title_route` (`title_route`),   KEY `date_route` (`date_route`),   KEY `date_cached` (`date_cached`),    FOREIGN KEY (`event`) REFERENCES `btx_events_events` (`id`) ON DELETE CASCADE ) ENGINE=InnoDB DEFAULT CHARSET=utf8\",\n            \"btx_events_event_categories\": \"CREATE TABLE `btx_events_event_categories` (   `event` int(11) NOT NULL,   `category` int(11) NOT NULL,   KEY `event` (`event`),   KEY `category` (`category`),    FOREIGN KEY (`event`) REFERENCES `btx_events_events` (`id`) ON DELETE CASCADE,    FOREIGN KEY (`category`) REFERENCES `btx_events_categories` (`id`) ON DELETE CASCADE ) ENGINE=InnoDB DEFAULT CHARSET=utf8\",\n            \"btx_events_events\": \"CREATE TABLE `btx_events_events` (   `id` int(11) NOT NULL AUTO_INCREMENT,   `title` varchar(255) NOT NULL DEFAULT '',   `description` mediumtext NOT NULL,   `image` varchar(255) NOT NULL,   `start_date` date DEFAULT NULL,   `end_date` date DEFAULT NULL,   `start_time` time DEFAULT NULL,   `end_time` time DEFAULT NULL,   `all_day` char(2) NOT NULL,   `recurrence_type` varchar(255) NOT NULL,   `recurrence_detail` varchar(255) NOT NULL,   `canceled_recurrences` text NOT NULL,   `recurring_end_date` date DEFAULT NULL,   `last_updated` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,   `featured` char(2) NOT NULL,   `route` varchar(255) DEFAULT NULL,   PRIMARY KEY (`id`),   KEY `start_date` (`start_date`),   KEY `end_date` (`end_date`),   KEY `recurring_end_date` (`recurring_end_date`),   KEY `recurrence_type` (`recurrence_type`),   KEY `featured` (`featured`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8\"\n        }\n    },\n    \"sql_revisions\": []\n}"], "filenames": ["classes/events.php", "manifest.json"], "buggy_code_start_loc": [1014, 5], "buggy_code_end_loc": [1425, 379], "fixing_code_start_loc": [1015, 5], "fixing_code_end_loc": [1522, 379], "type": "CWE-89", "message": "A vulnerability classified as critical was found in Events Extension. Affected by this vulnerability is the function getRandomFeaturedEventByDate/getUpcomingFeaturedEventsInCategoriesWithSubcategories/recacheEvent/searchResults of the file classes/events.php. The manipulation leads to sql injection. The name of the patch is 11169e48ab1249109485fdb1e0c9fca3d25ba01d. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-218395.", "other": {"cve": {"id": "CVE-2018-25076", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-16T12:15:16.347", "lastModified": "2023-01-24T16:12:24.487", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as critical was found in Events Extension. Affected by this vulnerability is the function getRandomFeaturedEventByDate/getUpcomingFeaturedEventsInCategoriesWithSubcategories/recacheEvent/searchResults of the file classes/events.php. The manipulation leads to sql injection. The name of the patch is 11169e48ab1249109485fdb1e0c9fca3d25ba01d. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-218395."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:events_project:events:*:*:*:*:*:bigtree_cms:*:*", "versionEndExcluding": "2018-03-19", "matchCriteriaId": "FAD69A1D-751F-49D8-9A28-5FBD0C1B7DF5"}]}]}], "references": [{"url": "https://github.com/timbuckingham/bigtree-events/commit/11169e48ab1249109485fdb1e0c9fca3d25ba01d", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218395", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.218395", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/timbuckingham/bigtree-events/commit/11169e48ab1249109485fdb1e0c9fca3d25ba01d"}}