{"buggy_code": ["import pytest\n\nfrom PIL import Image, ImageColor\n\n\ndef test_hash():\n    # short 3 components\n    assert (255, 0, 0) == ImageColor.getrgb(\"#f00\")\n    assert (0, 255, 0) == ImageColor.getrgb(\"#0f0\")\n    assert (0, 0, 255) == ImageColor.getrgb(\"#00f\")\n\n    # short 4 components\n    assert (255, 0, 0, 0) == ImageColor.getrgb(\"#f000\")\n    assert (0, 255, 0, 0) == ImageColor.getrgb(\"#0f00\")\n    assert (0, 0, 255, 0) == ImageColor.getrgb(\"#00f0\")\n    assert (0, 0, 0, 255) == ImageColor.getrgb(\"#000f\")\n\n    # long 3 components\n    assert (222, 0, 0) == ImageColor.getrgb(\"#de0000\")\n    assert (0, 222, 0) == ImageColor.getrgb(\"#00de00\")\n    assert (0, 0, 222) == ImageColor.getrgb(\"#0000de\")\n\n    # long 4 components\n    assert (222, 0, 0, 0) == ImageColor.getrgb(\"#de000000\")\n    assert (0, 222, 0, 0) == ImageColor.getrgb(\"#00de0000\")\n    assert (0, 0, 222, 0) == ImageColor.getrgb(\"#0000de00\")\n    assert (0, 0, 0, 222) == ImageColor.getrgb(\"#000000de\")\n\n    # case insensitivity\n    assert ImageColor.getrgb(\"#DEF\") == ImageColor.getrgb(\"#def\")\n    assert ImageColor.getrgb(\"#CDEF\") == ImageColor.getrgb(\"#cdef\")\n    assert ImageColor.getrgb(\"#DEFDEF\") == ImageColor.getrgb(\"#defdef\")\n    assert ImageColor.getrgb(\"#CDEFCDEF\") == ImageColor.getrgb(\"#cdefcdef\")\n\n    # not a number\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"#fo0\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"#fo00\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"#fo0000\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"#fo000000\")\n\n    # wrong number of components\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"#f0000\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"#f000000\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"#f00000000\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"#f000000000\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"#f00000 \")\n\n\ndef test_colormap():\n    assert (0, 0, 0) == ImageColor.getrgb(\"black\")\n    assert (255, 255, 255) == ImageColor.getrgb(\"white\")\n    assert (255, 255, 255) == ImageColor.getrgb(\"WHITE\")\n\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"black \")\n\n\ndef test_functions():\n    # rgb numbers\n    assert (255, 0, 0) == ImageColor.getrgb(\"rgb(255,0,0)\")\n    assert (0, 255, 0) == ImageColor.getrgb(\"rgb(0,255,0)\")\n    assert (0, 0, 255) == ImageColor.getrgb(\"rgb(0,0,255)\")\n\n    # percents\n    assert (255, 0, 0) == ImageColor.getrgb(\"rgb(100%,0%,0%)\")\n    assert (0, 255, 0) == ImageColor.getrgb(\"rgb(0%,100%,0%)\")\n    assert (0, 0, 255) == ImageColor.getrgb(\"rgb(0%,0%,100%)\")\n\n    # rgba numbers\n    assert (255, 0, 0, 0) == ImageColor.getrgb(\"rgba(255,0,0,0)\")\n    assert (0, 255, 0, 0) == ImageColor.getrgb(\"rgba(0,255,0,0)\")\n    assert (0, 0, 255, 0) == ImageColor.getrgb(\"rgba(0,0,255,0)\")\n    assert (0, 0, 0, 255) == ImageColor.getrgb(\"rgba(0,0,0,255)\")\n\n    assert (255, 0, 0) == ImageColor.getrgb(\"hsl(0,100%,50%)\")\n    assert (255, 0, 0) == ImageColor.getrgb(\"hsl(360,100%,50%)\")\n    assert (0, 255, 255) == ImageColor.getrgb(\"hsl(180,100%,50%)\")\n\n    assert (255, 0, 0) == ImageColor.getrgb(\"hsv(0,100%,100%)\")\n    assert (255, 0, 0) == ImageColor.getrgb(\"hsv(360,100%,100%)\")\n    assert (0, 255, 255) == ImageColor.getrgb(\"hsv(180,100%,100%)\")\n\n    # alternate format\n    assert ImageColor.getrgb(\"hsb(0,100%,50%)\") == ImageColor.getrgb(\"hsv(0,100%,50%)\")\n\n    # floats\n    assert (254, 3, 3) == ImageColor.getrgb(\"hsl(0.1,99.2%,50.3%)\")\n    assert (255, 0, 0) == ImageColor.getrgb(\"hsl(360.,100.0%,50%)\")\n\n    assert (253, 2, 2) == ImageColor.getrgb(\"hsv(0.1,99.2%,99.3%)\")\n    assert (255, 0, 0) == ImageColor.getrgb(\"hsv(360.,100.0%,100%)\")\n\n    # case insensitivity\n    assert ImageColor.getrgb(\"RGB(255,0,0)\") == ImageColor.getrgb(\"rgb(255,0,0)\")\n    assert ImageColor.getrgb(\"RGB(100%,0%,0%)\") == ImageColor.getrgb(\"rgb(100%,0%,0%)\")\n    assert ImageColor.getrgb(\"RGBA(255,0,0,0)\") == ImageColor.getrgb(\"rgba(255,0,0,0)\")\n    assert ImageColor.getrgb(\"HSL(0,100%,50%)\") == ImageColor.getrgb(\"hsl(0,100%,50%)\")\n    assert ImageColor.getrgb(\"HSV(0,100%,50%)\") == ImageColor.getrgb(\"hsv(0,100%,50%)\")\n    assert ImageColor.getrgb(\"HSB(0,100%,50%)\") == ImageColor.getrgb(\"hsb(0,100%,50%)\")\n\n    # space agnosticism\n    assert (255, 0, 0) == ImageColor.getrgb(\"rgb(  255  ,  0  ,  0  )\")\n    assert (255, 0, 0) == ImageColor.getrgb(\"rgb(  100%  ,  0%  ,  0%  )\")\n    assert (255, 0, 0, 0) == ImageColor.getrgb(\"rgba(  255  ,  0  ,  0  ,  0  )\")\n    assert (255, 0, 0) == ImageColor.getrgb(\"hsl(  0  ,  100%  ,  50%  )\")\n    assert (255, 0, 0) == ImageColor.getrgb(\"hsv(  0  ,  100%  ,  100%  )\")\n\n    # wrong number of components\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"rgb(255,0)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"rgb(255,0,0,0)\")\n\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"rgb(100%,0%)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"rgb(100%,0%,0)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"rgb(100%,0%,0 %)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"rgb(100%,0%,0%,0%)\")\n\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"rgba(255,0,0)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"rgba(255,0,0,0,0)\")\n\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"hsl(0,100%)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"hsl(0,100%,0%,0%)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"hsl(0%,100%,50%)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"hsl(0,100,50%)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"hsl(0,100%,50)\")\n\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"hsv(0,100%)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"hsv(0,100%,0%,0%)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"hsv(0%,100%,50%)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"hsv(0,100,50%)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"hsv(0,100%,50)\")\n\n\n# look for rounding errors (based on code by Tim Hatch)\ndef test_rounding_errors():\n    for color in ImageColor.colormap:\n        expected = Image.new(\"RGB\", (1, 1), color).convert(\"L\").getpixel((0, 0))\n        actual = ImageColor.getcolor(color, \"L\")\n        assert expected == actual\n\n    assert (0, 255, 115) == ImageColor.getcolor(\"rgba(0, 255, 115, 33)\", \"RGB\")\n    Image.new(\"RGB\", (1, 1), \"white\")\n\n    assert (0, 0, 0, 255) == ImageColor.getcolor(\"black\", \"RGBA\")\n    assert (255, 255, 255, 255) == ImageColor.getcolor(\"white\", \"RGBA\")\n    assert (0, 255, 115, 33) == ImageColor.getcolor(\"rgba(0, 255, 115, 33)\", \"RGBA\")\n    Image.new(\"RGBA\", (1, 1), \"white\")\n\n    assert 0 == ImageColor.getcolor(\"black\", \"L\")\n    assert 255 == ImageColor.getcolor(\"white\", \"L\")\n    assert 163 == ImageColor.getcolor(\"rgba(0, 255, 115, 33)\", \"L\")\n    Image.new(\"L\", (1, 1), \"white\")\n\n    assert 0 == ImageColor.getcolor(\"black\", \"1\")\n    assert 255 == ImageColor.getcolor(\"white\", \"1\")\n    # The following test is wrong, but is current behavior\n    # The correct result should be 255 due to the mode 1\n    assert 163 == ImageColor.getcolor(\"rgba(0, 255, 115, 33)\", \"1\")\n    # Correct behavior\n    # assert\n    #     255, ImageColor.getcolor(\"rgba(0, 255, 115, 33)\", \"1\"))\n    Image.new(\"1\", (1, 1), \"white\")\n\n    assert (0, 255) == ImageColor.getcolor(\"black\", \"LA\")\n    assert (255, 255) == ImageColor.getcolor(\"white\", \"LA\")\n    assert (163, 33) == ImageColor.getcolor(\"rgba(0, 255, 115, 33)\", \"LA\")\n    Image.new(\"LA\", (1, 1), \"white\")\n", "#\n# The Python Imaging Library\n# $Id$\n#\n# map CSS3-style colour description strings to RGB\n#\n# History:\n# 2002-10-24 fl   Added support for CSS-style color strings\n# 2002-12-15 fl   Added RGBA support\n# 2004-03-27 fl   Fixed remaining int() problems for Python 1.5.2\n# 2004-07-19 fl   Fixed gray/grey spelling issues\n# 2009-03-05 fl   Fixed rounding error in grayscale calculation\n#\n# Copyright (c) 2002-2004 by Secret Labs AB\n# Copyright (c) 2002-2004 by Fredrik Lundh\n#\n# See the README file for information on usage and redistribution.\n#\n\nimport re\n\nfrom . import Image\n\n\ndef getrgb(color):\n    \"\"\"\n     Convert a color string to an RGB or RGBA tuple. If the string cannot be\n     parsed, this function raises a :py:exc:`ValueError` exception.\n\n    .. versionadded:: 1.1.4\n\n    :param color: A color string\n    :return: ``(red, green, blue[, alpha])``\n    \"\"\"\n    color = color.lower()\n\n    rgb = colormap.get(color, None)\n    if rgb:\n        if isinstance(rgb, tuple):\n            return rgb\n        colormap[color] = rgb = getrgb(rgb)\n        return rgb\n\n    # check for known string formats\n    if re.match(\"#[a-f0-9]{3}$\", color):\n        return (int(color[1] * 2, 16), int(color[2] * 2, 16), int(color[3] * 2, 16))\n\n    if re.match(\"#[a-f0-9]{4}$\", color):\n        return (\n            int(color[1] * 2, 16),\n            int(color[2] * 2, 16),\n            int(color[3] * 2, 16),\n            int(color[4] * 2, 16),\n        )\n\n    if re.match(\"#[a-f0-9]{6}$\", color):\n        return (int(color[1:3], 16), int(color[3:5], 16), int(color[5:7], 16))\n\n    if re.match(\"#[a-f0-9]{8}$\", color):\n        return (\n            int(color[1:3], 16),\n            int(color[3:5], 16),\n            int(color[5:7], 16),\n            int(color[7:9], 16),\n        )\n\n    m = re.match(r\"rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)$\", color)\n    if m:\n        return (int(m.group(1)), int(m.group(2)), int(m.group(3)))\n\n    m = re.match(r\"rgb\\(\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*\\)$\", color)\n    if m:\n        return (\n            int((int(m.group(1)) * 255) / 100.0 + 0.5),\n            int((int(m.group(2)) * 255) / 100.0 + 0.5),\n            int((int(m.group(3)) * 255) / 100.0 + 0.5),\n        )\n\n    m = re.match(\n        r\"hsl\\(\\s*(\\d+\\.?\\d*)\\s*,\\s*(\\d+\\.?\\d*)%\\s*,\\s*(\\d+\\.?\\d*)%\\s*\\)$\", color\n    )\n    if m:\n        from colorsys import hls_to_rgb\n\n        rgb = hls_to_rgb(\n            float(m.group(1)) / 360.0,\n            float(m.group(3)) / 100.0,\n            float(m.group(2)) / 100.0,\n        )\n        return (\n            int(rgb[0] * 255 + 0.5),\n            int(rgb[1] * 255 + 0.5),\n            int(rgb[2] * 255 + 0.5),\n        )\n\n    m = re.match(\n        r\"hs[bv]\\(\\s*(\\d+\\.?\\d*)\\s*,\\s*(\\d+\\.?\\d*)%\\s*,\\s*(\\d+\\.?\\d*)%\\s*\\)$\", color\n    )\n    if m:\n        from colorsys import hsv_to_rgb\n\n        rgb = hsv_to_rgb(\n            float(m.group(1)) / 360.0,\n            float(m.group(2)) / 100.0,\n            float(m.group(3)) / 100.0,\n        )\n        return (\n            int(rgb[0] * 255 + 0.5),\n            int(rgb[1] * 255 + 0.5),\n            int(rgb[2] * 255 + 0.5),\n        )\n\n    m = re.match(r\"rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)$\", color)\n    if m:\n        return (int(m.group(1)), int(m.group(2)), int(m.group(3)), int(m.group(4)))\n    raise ValueError(f\"unknown color specifier: {repr(color)}\")\n\n\ndef getcolor(color, mode):\n    \"\"\"\n    Same as :py:func:`~PIL.ImageColor.getrgb`, but converts the RGB value to a\n    greyscale value if the mode is not color or a palette image. If the string\n    cannot be parsed, this function raises a :py:exc:`ValueError` exception.\n\n    .. versionadded:: 1.1.4\n\n    :param color: A color string\n    :return: ``(graylevel [, alpha]) or (red, green, blue[, alpha])``\n    \"\"\"\n    # same as getrgb, but converts the result to the given mode\n    color, alpha = getrgb(color), 255\n    if len(color) == 4:\n        color, alpha = color[0:3], color[3]\n\n    if Image.getmodebase(mode) == \"L\":\n        r, g, b = color\n        # ITU-R Recommendation 601-2 for nonlinear RGB\n        # scaled to 24 bits to match the convert's implementation.\n        color = (r * 19595 + g * 38470 + b * 7471 + 0x8000) >> 16\n        if mode[-1] == \"A\":\n            return (color, alpha)\n    else:\n        if mode[-1] == \"A\":\n            return color + (alpha,)\n    return color\n\n\ncolormap = {\n    # X11 colour table from https://drafts.csswg.org/css-color-4/, with\n    # gray/grey spelling issues fixed.  This is a superset of HTML 4.0\n    # colour names used in CSS 1.\n    \"aliceblue\": \"#f0f8ff\",\n    \"antiquewhite\": \"#faebd7\",\n    \"aqua\": \"#00ffff\",\n    \"aquamarine\": \"#7fffd4\",\n    \"azure\": \"#f0ffff\",\n    \"beige\": \"#f5f5dc\",\n    \"bisque\": \"#ffe4c4\",\n    \"black\": \"#000000\",\n    \"blanchedalmond\": \"#ffebcd\",\n    \"blue\": \"#0000ff\",\n    \"blueviolet\": \"#8a2be2\",\n    \"brown\": \"#a52a2a\",\n    \"burlywood\": \"#deb887\",\n    \"cadetblue\": \"#5f9ea0\",\n    \"chartreuse\": \"#7fff00\",\n    \"chocolate\": \"#d2691e\",\n    \"coral\": \"#ff7f50\",\n    \"cornflowerblue\": \"#6495ed\",\n    \"cornsilk\": \"#fff8dc\",\n    \"crimson\": \"#dc143c\",\n    \"cyan\": \"#00ffff\",\n    \"darkblue\": \"#00008b\",\n    \"darkcyan\": \"#008b8b\",\n    \"darkgoldenrod\": \"#b8860b\",\n    \"darkgray\": \"#a9a9a9\",\n    \"darkgrey\": \"#a9a9a9\",\n    \"darkgreen\": \"#006400\",\n    \"darkkhaki\": \"#bdb76b\",\n    \"darkmagenta\": \"#8b008b\",\n    \"darkolivegreen\": \"#556b2f\",\n    \"darkorange\": \"#ff8c00\",\n    \"darkorchid\": \"#9932cc\",\n    \"darkred\": \"#8b0000\",\n    \"darksalmon\": \"#e9967a\",\n    \"darkseagreen\": \"#8fbc8f\",\n    \"darkslateblue\": \"#483d8b\",\n    \"darkslategray\": \"#2f4f4f\",\n    \"darkslategrey\": \"#2f4f4f\",\n    \"darkturquoise\": \"#00ced1\",\n    \"darkviolet\": \"#9400d3\",\n    \"deeppink\": \"#ff1493\",\n    \"deepskyblue\": \"#00bfff\",\n    \"dimgray\": \"#696969\",\n    \"dimgrey\": \"#696969\",\n    \"dodgerblue\": \"#1e90ff\",\n    \"firebrick\": \"#b22222\",\n    \"floralwhite\": \"#fffaf0\",\n    \"forestgreen\": \"#228b22\",\n    \"fuchsia\": \"#ff00ff\",\n    \"gainsboro\": \"#dcdcdc\",\n    \"ghostwhite\": \"#f8f8ff\",\n    \"gold\": \"#ffd700\",\n    \"goldenrod\": \"#daa520\",\n    \"gray\": \"#808080\",\n    \"grey\": \"#808080\",\n    \"green\": \"#008000\",\n    \"greenyellow\": \"#adff2f\",\n    \"honeydew\": \"#f0fff0\",\n    \"hotpink\": \"#ff69b4\",\n    \"indianred\": \"#cd5c5c\",\n    \"indigo\": \"#4b0082\",\n    \"ivory\": \"#fffff0\",\n    \"khaki\": \"#f0e68c\",\n    \"lavender\": \"#e6e6fa\",\n    \"lavenderblush\": \"#fff0f5\",\n    \"lawngreen\": \"#7cfc00\",\n    \"lemonchiffon\": \"#fffacd\",\n    \"lightblue\": \"#add8e6\",\n    \"lightcoral\": \"#f08080\",\n    \"lightcyan\": \"#e0ffff\",\n    \"lightgoldenrodyellow\": \"#fafad2\",\n    \"lightgreen\": \"#90ee90\",\n    \"lightgray\": \"#d3d3d3\",\n    \"lightgrey\": \"#d3d3d3\",\n    \"lightpink\": \"#ffb6c1\",\n    \"lightsalmon\": \"#ffa07a\",\n    \"lightseagreen\": \"#20b2aa\",\n    \"lightskyblue\": \"#87cefa\",\n    \"lightslategray\": \"#778899\",\n    \"lightslategrey\": \"#778899\",\n    \"lightsteelblue\": \"#b0c4de\",\n    \"lightyellow\": \"#ffffe0\",\n    \"lime\": \"#00ff00\",\n    \"limegreen\": \"#32cd32\",\n    \"linen\": \"#faf0e6\",\n    \"magenta\": \"#ff00ff\",\n    \"maroon\": \"#800000\",\n    \"mediumaquamarine\": \"#66cdaa\",\n    \"mediumblue\": \"#0000cd\",\n    \"mediumorchid\": \"#ba55d3\",\n    \"mediumpurple\": \"#9370db\",\n    \"mediumseagreen\": \"#3cb371\",\n    \"mediumslateblue\": \"#7b68ee\",\n    \"mediumspringgreen\": \"#00fa9a\",\n    \"mediumturquoise\": \"#48d1cc\",\n    \"mediumvioletred\": \"#c71585\",\n    \"midnightblue\": \"#191970\",\n    \"mintcream\": \"#f5fffa\",\n    \"mistyrose\": \"#ffe4e1\",\n    \"moccasin\": \"#ffe4b5\",\n    \"navajowhite\": \"#ffdead\",\n    \"navy\": \"#000080\",\n    \"oldlace\": \"#fdf5e6\",\n    \"olive\": \"#808000\",\n    \"olivedrab\": \"#6b8e23\",\n    \"orange\": \"#ffa500\",\n    \"orangered\": \"#ff4500\",\n    \"orchid\": \"#da70d6\",\n    \"palegoldenrod\": \"#eee8aa\",\n    \"palegreen\": \"#98fb98\",\n    \"paleturquoise\": \"#afeeee\",\n    \"palevioletred\": \"#db7093\",\n    \"papayawhip\": \"#ffefd5\",\n    \"peachpuff\": \"#ffdab9\",\n    \"peru\": \"#cd853f\",\n    \"pink\": \"#ffc0cb\",\n    \"plum\": \"#dda0dd\",\n    \"powderblue\": \"#b0e0e6\",\n    \"purple\": \"#800080\",\n    \"rebeccapurple\": \"#663399\",\n    \"red\": \"#ff0000\",\n    \"rosybrown\": \"#bc8f8f\",\n    \"royalblue\": \"#4169e1\",\n    \"saddlebrown\": \"#8b4513\",\n    \"salmon\": \"#fa8072\",\n    \"sandybrown\": \"#f4a460\",\n    \"seagreen\": \"#2e8b57\",\n    \"seashell\": \"#fff5ee\",\n    \"sienna\": \"#a0522d\",\n    \"silver\": \"#c0c0c0\",\n    \"skyblue\": \"#87ceeb\",\n    \"slateblue\": \"#6a5acd\",\n    \"slategray\": \"#708090\",\n    \"slategrey\": \"#708090\",\n    \"snow\": \"#fffafa\",\n    \"springgreen\": \"#00ff7f\",\n    \"steelblue\": \"#4682b4\",\n    \"tan\": \"#d2b48c\",\n    \"teal\": \"#008080\",\n    \"thistle\": \"#d8bfd8\",\n    \"tomato\": \"#ff6347\",\n    \"turquoise\": \"#40e0d0\",\n    \"violet\": \"#ee82ee\",\n    \"wheat\": \"#f5deb3\",\n    \"white\": \"#ffffff\",\n    \"whitesmoke\": \"#f5f5f5\",\n    \"yellow\": \"#ffff00\",\n    \"yellowgreen\": \"#9acd32\",\n}\n"], "fixing_code": ["import pytest\n\nfrom PIL import Image, ImageColor\n\n\ndef test_hash():\n    # short 3 components\n    assert (255, 0, 0) == ImageColor.getrgb(\"#f00\")\n    assert (0, 255, 0) == ImageColor.getrgb(\"#0f0\")\n    assert (0, 0, 255) == ImageColor.getrgb(\"#00f\")\n\n    # short 4 components\n    assert (255, 0, 0, 0) == ImageColor.getrgb(\"#f000\")\n    assert (0, 255, 0, 0) == ImageColor.getrgb(\"#0f00\")\n    assert (0, 0, 255, 0) == ImageColor.getrgb(\"#00f0\")\n    assert (0, 0, 0, 255) == ImageColor.getrgb(\"#000f\")\n\n    # long 3 components\n    assert (222, 0, 0) == ImageColor.getrgb(\"#de0000\")\n    assert (0, 222, 0) == ImageColor.getrgb(\"#00de00\")\n    assert (0, 0, 222) == ImageColor.getrgb(\"#0000de\")\n\n    # long 4 components\n    assert (222, 0, 0, 0) == ImageColor.getrgb(\"#de000000\")\n    assert (0, 222, 0, 0) == ImageColor.getrgb(\"#00de0000\")\n    assert (0, 0, 222, 0) == ImageColor.getrgb(\"#0000de00\")\n    assert (0, 0, 0, 222) == ImageColor.getrgb(\"#000000de\")\n\n    # case insensitivity\n    assert ImageColor.getrgb(\"#DEF\") == ImageColor.getrgb(\"#def\")\n    assert ImageColor.getrgb(\"#CDEF\") == ImageColor.getrgb(\"#cdef\")\n    assert ImageColor.getrgb(\"#DEFDEF\") == ImageColor.getrgb(\"#defdef\")\n    assert ImageColor.getrgb(\"#CDEFCDEF\") == ImageColor.getrgb(\"#cdefcdef\")\n\n    # not a number\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"#fo0\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"#fo00\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"#fo0000\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"#fo000000\")\n\n    # wrong number of components\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"#f0000\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"#f000000\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"#f00000000\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"#f000000000\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"#f00000 \")\n\n\ndef test_colormap():\n    assert (0, 0, 0) == ImageColor.getrgb(\"black\")\n    assert (255, 255, 255) == ImageColor.getrgb(\"white\")\n    assert (255, 255, 255) == ImageColor.getrgb(\"WHITE\")\n\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"black \")\n\n\ndef test_functions():\n    # rgb numbers\n    assert (255, 0, 0) == ImageColor.getrgb(\"rgb(255,0,0)\")\n    assert (0, 255, 0) == ImageColor.getrgb(\"rgb(0,255,0)\")\n    assert (0, 0, 255) == ImageColor.getrgb(\"rgb(0,0,255)\")\n\n    # percents\n    assert (255, 0, 0) == ImageColor.getrgb(\"rgb(100%,0%,0%)\")\n    assert (0, 255, 0) == ImageColor.getrgb(\"rgb(0%,100%,0%)\")\n    assert (0, 0, 255) == ImageColor.getrgb(\"rgb(0%,0%,100%)\")\n\n    # rgba numbers\n    assert (255, 0, 0, 0) == ImageColor.getrgb(\"rgba(255,0,0,0)\")\n    assert (0, 255, 0, 0) == ImageColor.getrgb(\"rgba(0,255,0,0)\")\n    assert (0, 0, 255, 0) == ImageColor.getrgb(\"rgba(0,0,255,0)\")\n    assert (0, 0, 0, 255) == ImageColor.getrgb(\"rgba(0,0,0,255)\")\n\n    assert (255, 0, 0) == ImageColor.getrgb(\"hsl(0,100%,50%)\")\n    assert (255, 0, 0) == ImageColor.getrgb(\"hsl(360,100%,50%)\")\n    assert (0, 255, 255) == ImageColor.getrgb(\"hsl(180,100%,50%)\")\n\n    assert (255, 0, 0) == ImageColor.getrgb(\"hsv(0,100%,100%)\")\n    assert (255, 0, 0) == ImageColor.getrgb(\"hsv(360,100%,100%)\")\n    assert (0, 255, 255) == ImageColor.getrgb(\"hsv(180,100%,100%)\")\n\n    # alternate format\n    assert ImageColor.getrgb(\"hsb(0,100%,50%)\") == ImageColor.getrgb(\"hsv(0,100%,50%)\")\n\n    # floats\n    assert (254, 3, 3) == ImageColor.getrgb(\"hsl(0.1,99.2%,50.3%)\")\n    assert (255, 0, 0) == ImageColor.getrgb(\"hsl(360.,100.0%,50%)\")\n\n    assert (253, 2, 2) == ImageColor.getrgb(\"hsv(0.1,99.2%,99.3%)\")\n    assert (255, 0, 0) == ImageColor.getrgb(\"hsv(360.,100.0%,100%)\")\n\n    # case insensitivity\n    assert ImageColor.getrgb(\"RGB(255,0,0)\") == ImageColor.getrgb(\"rgb(255,0,0)\")\n    assert ImageColor.getrgb(\"RGB(100%,0%,0%)\") == ImageColor.getrgb(\"rgb(100%,0%,0%)\")\n    assert ImageColor.getrgb(\"RGBA(255,0,0,0)\") == ImageColor.getrgb(\"rgba(255,0,0,0)\")\n    assert ImageColor.getrgb(\"HSL(0,100%,50%)\") == ImageColor.getrgb(\"hsl(0,100%,50%)\")\n    assert ImageColor.getrgb(\"HSV(0,100%,50%)\") == ImageColor.getrgb(\"hsv(0,100%,50%)\")\n    assert ImageColor.getrgb(\"HSB(0,100%,50%)\") == ImageColor.getrgb(\"hsb(0,100%,50%)\")\n\n    # space agnosticism\n    assert (255, 0, 0) == ImageColor.getrgb(\"rgb(  255  ,  0  ,  0  )\")\n    assert (255, 0, 0) == ImageColor.getrgb(\"rgb(  100%  ,  0%  ,  0%  )\")\n    assert (255, 0, 0, 0) == ImageColor.getrgb(\"rgba(  255  ,  0  ,  0  ,  0  )\")\n    assert (255, 0, 0) == ImageColor.getrgb(\"hsl(  0  ,  100%  ,  50%  )\")\n    assert (255, 0, 0) == ImageColor.getrgb(\"hsv(  0  ,  100%  ,  100%  )\")\n\n    # wrong number of components\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"rgb(255,0)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"rgb(255,0,0,0)\")\n\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"rgb(100%,0%)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"rgb(100%,0%,0)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"rgb(100%,0%,0 %)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"rgb(100%,0%,0%,0%)\")\n\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"rgba(255,0,0)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"rgba(255,0,0,0,0)\")\n\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"hsl(0,100%)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"hsl(0,100%,0%,0%)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"hsl(0%,100%,50%)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"hsl(0,100,50%)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"hsl(0,100%,50)\")\n\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"hsv(0,100%)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"hsv(0,100%,0%,0%)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"hsv(0%,100%,50%)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"hsv(0,100,50%)\")\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(\"hsv(0,100%,50)\")\n\n\n# look for rounding errors (based on code by Tim Hatch)\ndef test_rounding_errors():\n    for color in ImageColor.colormap:\n        expected = Image.new(\"RGB\", (1, 1), color).convert(\"L\").getpixel((0, 0))\n        actual = ImageColor.getcolor(color, \"L\")\n        assert expected == actual\n\n    assert (0, 255, 115) == ImageColor.getcolor(\"rgba(0, 255, 115, 33)\", \"RGB\")\n    Image.new(\"RGB\", (1, 1), \"white\")\n\n    assert (0, 0, 0, 255) == ImageColor.getcolor(\"black\", \"RGBA\")\n    assert (255, 255, 255, 255) == ImageColor.getcolor(\"white\", \"RGBA\")\n    assert (0, 255, 115, 33) == ImageColor.getcolor(\"rgba(0, 255, 115, 33)\", \"RGBA\")\n    Image.new(\"RGBA\", (1, 1), \"white\")\n\n    assert 0 == ImageColor.getcolor(\"black\", \"L\")\n    assert 255 == ImageColor.getcolor(\"white\", \"L\")\n    assert 163 == ImageColor.getcolor(\"rgba(0, 255, 115, 33)\", \"L\")\n    Image.new(\"L\", (1, 1), \"white\")\n\n    assert 0 == ImageColor.getcolor(\"black\", \"1\")\n    assert 255 == ImageColor.getcolor(\"white\", \"1\")\n    # The following test is wrong, but is current behavior\n    # The correct result should be 255 due to the mode 1\n    assert 163 == ImageColor.getcolor(\"rgba(0, 255, 115, 33)\", \"1\")\n    # Correct behavior\n    # assert\n    #     255, ImageColor.getcolor(\"rgba(0, 255, 115, 33)\", \"1\"))\n    Image.new(\"1\", (1, 1), \"white\")\n\n    assert (0, 255) == ImageColor.getcolor(\"black\", \"LA\")\n    assert (255, 255) == ImageColor.getcolor(\"white\", \"LA\")\n    assert (163, 33) == ImageColor.getcolor(\"rgba(0, 255, 115, 33)\", \"LA\")\n    Image.new(\"LA\", (1, 1), \"white\")\n\n\ndef test_color_too_long():\n    # Arrange\n    color_too_long = \"hsl(\" + \"1\" * 100 + \")\"\n\n    # Act / Assert\n    with pytest.raises(ValueError):\n        ImageColor.getrgb(color_too_long)\n", "#\n# The Python Imaging Library\n# $Id$\n#\n# map CSS3-style colour description strings to RGB\n#\n# History:\n# 2002-10-24 fl   Added support for CSS-style color strings\n# 2002-12-15 fl   Added RGBA support\n# 2004-03-27 fl   Fixed remaining int() problems for Python 1.5.2\n# 2004-07-19 fl   Fixed gray/grey spelling issues\n# 2009-03-05 fl   Fixed rounding error in grayscale calculation\n#\n# Copyright (c) 2002-2004 by Secret Labs AB\n# Copyright (c) 2002-2004 by Fredrik Lundh\n#\n# See the README file for information on usage and redistribution.\n#\n\nimport re\n\nfrom . import Image\n\n\ndef getrgb(color):\n    \"\"\"\n     Convert a color string to an RGB or RGBA tuple. If the string cannot be\n     parsed, this function raises a :py:exc:`ValueError` exception.\n\n    .. versionadded:: 1.1.4\n\n    :param color: A color string\n    :return: ``(red, green, blue[, alpha])``\n    \"\"\"\n    if len(color) > 100:\n        raise ValueError(\"color specifier is too long\")\n    color = color.lower()\n\n    rgb = colormap.get(color, None)\n    if rgb:\n        if isinstance(rgb, tuple):\n            return rgb\n        colormap[color] = rgb = getrgb(rgb)\n        return rgb\n\n    # check for known string formats\n    if re.match(\"#[a-f0-9]{3}$\", color):\n        return (int(color[1] * 2, 16), int(color[2] * 2, 16), int(color[3] * 2, 16))\n\n    if re.match(\"#[a-f0-9]{4}$\", color):\n        return (\n            int(color[1] * 2, 16),\n            int(color[2] * 2, 16),\n            int(color[3] * 2, 16),\n            int(color[4] * 2, 16),\n        )\n\n    if re.match(\"#[a-f0-9]{6}$\", color):\n        return (int(color[1:3], 16), int(color[3:5], 16), int(color[5:7], 16))\n\n    if re.match(\"#[a-f0-9]{8}$\", color):\n        return (\n            int(color[1:3], 16),\n            int(color[3:5], 16),\n            int(color[5:7], 16),\n            int(color[7:9], 16),\n        )\n\n    m = re.match(r\"rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)$\", color)\n    if m:\n        return (int(m.group(1)), int(m.group(2)), int(m.group(3)))\n\n    m = re.match(r\"rgb\\(\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*\\)$\", color)\n    if m:\n        return (\n            int((int(m.group(1)) * 255) / 100.0 + 0.5),\n            int((int(m.group(2)) * 255) / 100.0 + 0.5),\n            int((int(m.group(3)) * 255) / 100.0 + 0.5),\n        )\n\n    m = re.match(\n        r\"hsl\\(\\s*(\\d+\\.?\\d*)\\s*,\\s*(\\d+\\.?\\d*)%\\s*,\\s*(\\d+\\.?\\d*)%\\s*\\)$\", color\n    )\n    if m:\n        from colorsys import hls_to_rgb\n\n        rgb = hls_to_rgb(\n            float(m.group(1)) / 360.0,\n            float(m.group(3)) / 100.0,\n            float(m.group(2)) / 100.0,\n        )\n        return (\n            int(rgb[0] * 255 + 0.5),\n            int(rgb[1] * 255 + 0.5),\n            int(rgb[2] * 255 + 0.5),\n        )\n\n    m = re.match(\n        r\"hs[bv]\\(\\s*(\\d+\\.?\\d*)\\s*,\\s*(\\d+\\.?\\d*)%\\s*,\\s*(\\d+\\.?\\d*)%\\s*\\)$\", color\n    )\n    if m:\n        from colorsys import hsv_to_rgb\n\n        rgb = hsv_to_rgb(\n            float(m.group(1)) / 360.0,\n            float(m.group(2)) / 100.0,\n            float(m.group(3)) / 100.0,\n        )\n        return (\n            int(rgb[0] * 255 + 0.5),\n            int(rgb[1] * 255 + 0.5),\n            int(rgb[2] * 255 + 0.5),\n        )\n\n    m = re.match(r\"rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)$\", color)\n    if m:\n        return (int(m.group(1)), int(m.group(2)), int(m.group(3)), int(m.group(4)))\n    raise ValueError(f\"unknown color specifier: {repr(color)}\")\n\n\ndef getcolor(color, mode):\n    \"\"\"\n    Same as :py:func:`~PIL.ImageColor.getrgb`, but converts the RGB value to a\n    greyscale value if the mode is not color or a palette image. If the string\n    cannot be parsed, this function raises a :py:exc:`ValueError` exception.\n\n    .. versionadded:: 1.1.4\n\n    :param color: A color string\n    :return: ``(graylevel [, alpha]) or (red, green, blue[, alpha])``\n    \"\"\"\n    # same as getrgb, but converts the result to the given mode\n    color, alpha = getrgb(color), 255\n    if len(color) == 4:\n        color, alpha = color[0:3], color[3]\n\n    if Image.getmodebase(mode) == \"L\":\n        r, g, b = color\n        # ITU-R Recommendation 601-2 for nonlinear RGB\n        # scaled to 24 bits to match the convert's implementation.\n        color = (r * 19595 + g * 38470 + b * 7471 + 0x8000) >> 16\n        if mode[-1] == \"A\":\n            return (color, alpha)\n    else:\n        if mode[-1] == \"A\":\n            return color + (alpha,)\n    return color\n\n\ncolormap = {\n    # X11 colour table from https://drafts.csswg.org/css-color-4/, with\n    # gray/grey spelling issues fixed.  This is a superset of HTML 4.0\n    # colour names used in CSS 1.\n    \"aliceblue\": \"#f0f8ff\",\n    \"antiquewhite\": \"#faebd7\",\n    \"aqua\": \"#00ffff\",\n    \"aquamarine\": \"#7fffd4\",\n    \"azure\": \"#f0ffff\",\n    \"beige\": \"#f5f5dc\",\n    \"bisque\": \"#ffe4c4\",\n    \"black\": \"#000000\",\n    \"blanchedalmond\": \"#ffebcd\",\n    \"blue\": \"#0000ff\",\n    \"blueviolet\": \"#8a2be2\",\n    \"brown\": \"#a52a2a\",\n    \"burlywood\": \"#deb887\",\n    \"cadetblue\": \"#5f9ea0\",\n    \"chartreuse\": \"#7fff00\",\n    \"chocolate\": \"#d2691e\",\n    \"coral\": \"#ff7f50\",\n    \"cornflowerblue\": \"#6495ed\",\n    \"cornsilk\": \"#fff8dc\",\n    \"crimson\": \"#dc143c\",\n    \"cyan\": \"#00ffff\",\n    \"darkblue\": \"#00008b\",\n    \"darkcyan\": \"#008b8b\",\n    \"darkgoldenrod\": \"#b8860b\",\n    \"darkgray\": \"#a9a9a9\",\n    \"darkgrey\": \"#a9a9a9\",\n    \"darkgreen\": \"#006400\",\n    \"darkkhaki\": \"#bdb76b\",\n    \"darkmagenta\": \"#8b008b\",\n    \"darkolivegreen\": \"#556b2f\",\n    \"darkorange\": \"#ff8c00\",\n    \"darkorchid\": \"#9932cc\",\n    \"darkred\": \"#8b0000\",\n    \"darksalmon\": \"#e9967a\",\n    \"darkseagreen\": \"#8fbc8f\",\n    \"darkslateblue\": \"#483d8b\",\n    \"darkslategray\": \"#2f4f4f\",\n    \"darkslategrey\": \"#2f4f4f\",\n    \"darkturquoise\": \"#00ced1\",\n    \"darkviolet\": \"#9400d3\",\n    \"deeppink\": \"#ff1493\",\n    \"deepskyblue\": \"#00bfff\",\n    \"dimgray\": \"#696969\",\n    \"dimgrey\": \"#696969\",\n    \"dodgerblue\": \"#1e90ff\",\n    \"firebrick\": \"#b22222\",\n    \"floralwhite\": \"#fffaf0\",\n    \"forestgreen\": \"#228b22\",\n    \"fuchsia\": \"#ff00ff\",\n    \"gainsboro\": \"#dcdcdc\",\n    \"ghostwhite\": \"#f8f8ff\",\n    \"gold\": \"#ffd700\",\n    \"goldenrod\": \"#daa520\",\n    \"gray\": \"#808080\",\n    \"grey\": \"#808080\",\n    \"green\": \"#008000\",\n    \"greenyellow\": \"#adff2f\",\n    \"honeydew\": \"#f0fff0\",\n    \"hotpink\": \"#ff69b4\",\n    \"indianred\": \"#cd5c5c\",\n    \"indigo\": \"#4b0082\",\n    \"ivory\": \"#fffff0\",\n    \"khaki\": \"#f0e68c\",\n    \"lavender\": \"#e6e6fa\",\n    \"lavenderblush\": \"#fff0f5\",\n    \"lawngreen\": \"#7cfc00\",\n    \"lemonchiffon\": \"#fffacd\",\n    \"lightblue\": \"#add8e6\",\n    \"lightcoral\": \"#f08080\",\n    \"lightcyan\": \"#e0ffff\",\n    \"lightgoldenrodyellow\": \"#fafad2\",\n    \"lightgreen\": \"#90ee90\",\n    \"lightgray\": \"#d3d3d3\",\n    \"lightgrey\": \"#d3d3d3\",\n    \"lightpink\": \"#ffb6c1\",\n    \"lightsalmon\": \"#ffa07a\",\n    \"lightseagreen\": \"#20b2aa\",\n    \"lightskyblue\": \"#87cefa\",\n    \"lightslategray\": \"#778899\",\n    \"lightslategrey\": \"#778899\",\n    \"lightsteelblue\": \"#b0c4de\",\n    \"lightyellow\": \"#ffffe0\",\n    \"lime\": \"#00ff00\",\n    \"limegreen\": \"#32cd32\",\n    \"linen\": \"#faf0e6\",\n    \"magenta\": \"#ff00ff\",\n    \"maroon\": \"#800000\",\n    \"mediumaquamarine\": \"#66cdaa\",\n    \"mediumblue\": \"#0000cd\",\n    \"mediumorchid\": \"#ba55d3\",\n    \"mediumpurple\": \"#9370db\",\n    \"mediumseagreen\": \"#3cb371\",\n    \"mediumslateblue\": \"#7b68ee\",\n    \"mediumspringgreen\": \"#00fa9a\",\n    \"mediumturquoise\": \"#48d1cc\",\n    \"mediumvioletred\": \"#c71585\",\n    \"midnightblue\": \"#191970\",\n    \"mintcream\": \"#f5fffa\",\n    \"mistyrose\": \"#ffe4e1\",\n    \"moccasin\": \"#ffe4b5\",\n    \"navajowhite\": \"#ffdead\",\n    \"navy\": \"#000080\",\n    \"oldlace\": \"#fdf5e6\",\n    \"olive\": \"#808000\",\n    \"olivedrab\": \"#6b8e23\",\n    \"orange\": \"#ffa500\",\n    \"orangered\": \"#ff4500\",\n    \"orchid\": \"#da70d6\",\n    \"palegoldenrod\": \"#eee8aa\",\n    \"palegreen\": \"#98fb98\",\n    \"paleturquoise\": \"#afeeee\",\n    \"palevioletred\": \"#db7093\",\n    \"papayawhip\": \"#ffefd5\",\n    \"peachpuff\": \"#ffdab9\",\n    \"peru\": \"#cd853f\",\n    \"pink\": \"#ffc0cb\",\n    \"plum\": \"#dda0dd\",\n    \"powderblue\": \"#b0e0e6\",\n    \"purple\": \"#800080\",\n    \"rebeccapurple\": \"#663399\",\n    \"red\": \"#ff0000\",\n    \"rosybrown\": \"#bc8f8f\",\n    \"royalblue\": \"#4169e1\",\n    \"saddlebrown\": \"#8b4513\",\n    \"salmon\": \"#fa8072\",\n    \"sandybrown\": \"#f4a460\",\n    \"seagreen\": \"#2e8b57\",\n    \"seashell\": \"#fff5ee\",\n    \"sienna\": \"#a0522d\",\n    \"silver\": \"#c0c0c0\",\n    \"skyblue\": \"#87ceeb\",\n    \"slateblue\": \"#6a5acd\",\n    \"slategray\": \"#708090\",\n    \"slategrey\": \"#708090\",\n    \"snow\": \"#fffafa\",\n    \"springgreen\": \"#00ff7f\",\n    \"steelblue\": \"#4682b4\",\n    \"tan\": \"#d2b48c\",\n    \"teal\": \"#008080\",\n    \"thistle\": \"#d8bfd8\",\n    \"tomato\": \"#ff6347\",\n    \"turquoise\": \"#40e0d0\",\n    \"violet\": \"#ee82ee\",\n    \"wheat\": \"#f5deb3\",\n    \"white\": \"#ffffff\",\n    \"whitesmoke\": \"#f5f5f5\",\n    \"yellow\": \"#ffff00\",\n    \"yellowgreen\": \"#9acd32\",\n}\n"], "filenames": ["Tests/test_imagecolor.py", "src/PIL/ImageColor.py"], "buggy_code_start_loc": [193, 34], "buggy_code_end_loc": [193, 34], "fixing_code_start_loc": [194, 35], "fixing_code_end_loc": [203, 37], "type": "CWE-125", "message": "The package pillow 5.2.0 and before 8.3.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the getrgb function.", "other": {"cve": {"id": "CVE-2021-23437", "sourceIdentifier": "report@snyk.io", "published": "2021-09-03T16:15:08.317", "lastModified": "2023-01-31T17:28:56.170", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The package pillow 5.2.0 and before 8.3.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the getrgb function."}, {"lang": "es", "value": "El paquete pillow versiones desde la versi\u00f3n 5.2.0  y anteriores a 8.3.2, son vulnerables a una Denegaci\u00f3n de Servicio por Expresi\u00f3n Regular (ReDoS) por medio de la funci\u00f3n getrgb"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-125"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:python:pillow:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.2.0", "versionEndExcluding": "8.3.2", "matchCriteriaId": "F410ECFC-A2CC-41AD-965A-83B3FAE74EB2"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:33:*:*:*:*:*:*:*", "matchCriteriaId": "E460AA51-FCDA-46B9-AE97-E6676AA5E194"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:34:*:*:*:*:*:*:*", "matchCriteriaId": "A930E247-0B43-43CB-98FF-6CE7B8189835"}]}]}], "references": [{"url": "https://github.com/python-pillow/Pillow/commit/9e08eb8f78fdfd2f476e1b20b7cf38683754866b", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/RNSG6VFXTAROGF7ACYLMAZNQV4EJ6I2C/", "source": "report@snyk.io", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VKRCL7KKAKOXCVD7M6WC5OKFGL4L3SJT/", "source": "report@snyk.io", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html", "source": "report@snyk.io", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://security.gentoo.org/glsa/202211-10", "source": "report@snyk.io", "tags": ["Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-PYTHON-PILLOW-1319443", "source": "report@snyk.io", "tags": ["Exploit", "Patch", "Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/python-pillow/Pillow/commit/9e08eb8f78fdfd2f476e1b20b7cf38683754866b"}}