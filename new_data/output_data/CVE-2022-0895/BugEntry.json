{"buggy_code": ["<?php\nnamespace MicroweberPackages\\Checkout\\Http\\Controllers\\Traits;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Validator;\n\ntrait ContactInformationTrait {\n\n    public function contactInformation() {\n\n        $data = [];\n        $data['errors'] = session_get('errors');\n        $data['checkout_session'] = session_get('checkout_v2');\n\n        if (is_logged()) {\n            $user = get_user();\n            if (empty($data['checkout_session']['first_name'])) {\n                $data['checkout_session']['first_name'] = $user['first_name'];\n            }\n            if (empty($data['checkout_session']['last_name'])) {\n                $data['checkout_session']['last_name'] = $user['last_name'];\n\n            }\n            if (empty($data['checkout_session']['email'])) {\n                $data['checkout_session']['email'] = $user['email'];\n            }\n            if (empty($data['checkout_session']['phone'])) {\n                $data['checkout_session']['phone'] = $user['phone'];\n            }\n        }\n\n        session_del('errors');\n\n        return $this->_renderView('checkout::contact_information',$data);\n    }\n\n    public function contactInformationSave(Request $request) {\n\n        session_append_array('checkout_v2', [\n            'first_name'=> $request->get('first_name'),\n            'last_name'=> $request->get('last_name'),\n            'email'=> $request->get('email'),\n            'phone'=> $request->get('phone')\n        ]);\n\n        $validate = $this->_validateContactInformation($request->all());\n        if ($validate['valid'] == false) {\n            session_set('errors', $validate['errors']);\n            return redirect(route('checkout.contact_information'));\n        }\n\n        // Success\n        return redirect(route('checkout.shipping_method'));\n    }\n\n    private function _validateContactInformation($inputData = [])\n    {\n        $rules = [];\n\n        $rules['first_name'] = 'max:500';\n        $rules['last_name'] = 'max:500';\n        $rules['email'] = 'email|max:500';\n        $rules['phone'] = 'max:500';\n\n        if (get_option('shop_require_first_name', 'website') == 1) {\n            $rules['first_name'] .= '|required';\n        }\n\n        if (get_option('shop_require_last_name', 'website') == 1) {\n            $rules['last_name'] .= '|required';\n        }\n\n        if (get_option('shop_require_email', 'website') == 1) {\n            $rules['email'] .= '|required';;\n        }\n\n        if (get_option('shop_require_phone', 'website') == 1) {\n            $rules['phone'] .= '|required';;\n        }\n\n        if (empty($rules)) {\n            return ['valid'=>true];\n        }\n\n        if (empty($inputData)) {\n            $inputData = session_get('checkout_v2');\n        }\n\n        if (empty($inputData)) {\n            return [\n                'valid'=>false,\n                'errors'=>[\n                   'form_errors'=>['error'=>_e('Please, fill the contact information data.', true)]\n                ]\n            ];\n        }\n\n        $validator = Validator::make($inputData, $rules);\n\n        if ($validator->fails()) {\n            $errors = $validator->messages()->toArray();\n            return ['valid'=>false,'errors'=>$errors];\n        }\n\n        return ['valid'=>true];\n    }\n}\n"], "fixing_code": ["<?php\nnamespace MicroweberPackages\\Checkout\\Http\\Controllers\\Traits;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Validator;\n\ntrait ContactInformationTrait {\n\n    public function contactInformation() {\n\n        $data = [];\n        $data['errors'] = session_get('errors');\n        $data['checkout_session'] = session_get('checkout_v2');\n\n        if (is_logged()) {\n            $user = get_user();\n            if (empty($data['checkout_session']['first_name'])) {\n                $data['checkout_session']['first_name'] = $user['first_name'];\n            }\n            if (empty($data['checkout_session']['last_name'])) {\n                $data['checkout_session']['last_name'] = $user['last_name'];\n\n            }\n            if (empty($data['checkout_session']['email'])) {\n                $data['checkout_session']['email'] = $user['email'];\n            }\n            if (empty($data['checkout_session']['phone'])) {\n                $data['checkout_session']['phone'] = $user['phone'];\n            }\n        }\n\n        session_del('errors');\n\n        return $this->_renderView('checkout::contact_information',$data);\n    }\n\n    public function contactInformationSave(Request $request) {\n\n        $firstName = strip_tags($request->get('first_name'));\n        $lastName = strip_tags($request->get('last_name'));\n        $email = strip_tags($request->get('email'));\n        $phone = strip_tags($request->get('phone'));\n\n        session_append_array('checkout_v2', [\n            'first_name'=> $firstName,\n            'last_name'=> $lastName,\n            'email'=> $email,\n            'phone'=> $phone\n        ]);\n\n        $validate = $this->_validateContactInformation($request->all());\n        if ($validate['valid'] == false) {\n            session_set('errors', $validate['errors']);\n            return redirect(route('checkout.contact_information'));\n        }\n\n        // Success\n        return redirect(route('checkout.shipping_method'));\n    }\n\n    private function _validateContactInformation($inputData = [])\n    {\n        $rules = [];\n\n        $rules['first_name'] = 'max:500';\n        $rules['last_name'] = 'max:500';\n        $rules['email'] = 'email|max:500';\n        $rules['phone'] = 'max:500';\n\n        if (get_option('shop_require_first_name', 'website') == 1) {\n            $rules['first_name'] .= '|required';\n        }\n\n        if (get_option('shop_require_last_name', 'website') == 1) {\n            $rules['last_name'] .= '|required';\n        }\n\n        if (get_option('shop_require_email', 'website') == 1) {\n            $rules['email'] .= '|required';;\n        }\n\n        if (get_option('shop_require_phone', 'website') == 1) {\n            $rules['phone'] .= '|required';;\n        }\n\n        if (empty($rules)) {\n            return ['valid'=>true];\n        }\n\n        if (empty($inputData)) {\n            $inputData = session_get('checkout_v2');\n        }\n\n        if (empty($inputData)) {\n            return [\n                'valid'=>false,\n                'errors'=>[\n                   'form_errors'=>['error'=>_e('Please, fill the contact information data.', true)]\n                ]\n            ];\n        }\n\n        $validator = Validator::make($inputData, $rules);\n\n        if ($validator->fails()) {\n            $errors = $validator->messages()->toArray();\n            return ['valid'=>false,'errors'=>$errors];\n        }\n\n        return ['valid'=>true];\n    }\n}\n"], "filenames": ["src/MicroweberPackages/Checkout/Http/Controllers/Traits/ContactInformationTrait.php"], "buggy_code_start_loc": [38], "buggy_code_end_loc": [44], "fixing_code_start_loc": [39], "fixing_code_end_loc": [49], "type": "CWE-94", "message": "Static Code Injection in GitHub repository microweber/microweber prior to 1.3.", "other": {"cve": {"id": "CVE-2022-0895", "sourceIdentifier": "security@huntr.dev", "published": "2022-03-10T11:15:07.863", "lastModified": "2022-03-19T23:58:08.080", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Static Code Injection in GitHub repository microweber/microweber prior to 1.3."}, {"lang": "es", "value": "Una Inyecci\u00f3n de C\u00f3digo Est\u00e1tico en el repositorio de GitHub microweber/microweber versiones anteriores a 1.3"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:C/C:L/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 7.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.3}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-96"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.3", "matchCriteriaId": "CEE7F7A1-F20B-4F8B-A3DE-989A059B7E0E"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/b2baab6e582b2efe63788d367a2bb61a2fa26470", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/3c070828-fd00-476c-be33-9c877172363d", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/b2baab6e582b2efe63788d367a2bb61a2fa26470"}}