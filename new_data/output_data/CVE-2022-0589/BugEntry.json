{"buggy_code": ["<?php\n/* Copyright (C) 2015 Daniel Preussker, QuxLabs UG <preussker@quxlabs.com>\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>. */\n\n/**\n * Create Dashboards\n *\n * @author Daniel Preussker\n * @copyright 2015 Daniel Preussker, QuxLabs UG\n * @license GPL\n */\nheader('Content-type: application/json');\n\nif (! Auth::check()) {\n    $response = [\n        'status'  => 'error',\n        'message' => 'Unauthenticated',\n    ];\n    echo json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);\n    exit;\n}\n\n$status = 'error';\n$message = 'unknown error';\n\n$dashboard_name = trim($_REQUEST['dashboard_name']);\n\nif (! empty($dashboard_name) && ($dash_id = dbInsert(['dashboard_name' => $dashboard_name, 'user_id' => Auth::id()], 'dashboards'))) {\n    $status = 'ok';\n    $message = 'Dashboard ' . $dashboard_name . ' created';\n} else {\n    $status = 'error';\n    $message = 'ERROR: Could not create';\n}\n\n$response = [\n    'status'        => $status,\n    'message'       => $message,\n    'dashboard_id' => $dash_id,\n];\n\necho json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);\n", "<?php\n\nheader('Content-type: application/json');\n\nif (! Auth::user()->hasGlobalAdmin()) {\n    $response = [\n        'status'  => 'error',\n        'message' => 'Need to be admin',\n    ];\n    echo json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);\n    exit;\n}\n\n$status = 'ok';\n$message = '';\n\n$device_id = $_POST['device_id'];\n$id = $_POST['ccustomoid_id'];\n$action = $_POST['action'];\n$name = $_POST['name'];\n$oid = $_POST['oid'];\n$datatype = $_POST['datatype'];\nif (empty(($_POST['unit']))) {\n    $unit = ['NULL'];\n} else {\n    $unit = $_POST['unit'];\n}\nif (! empty(($_POST['limit'])) && is_numeric($_POST['limit'])) {\n    $limit = $_POST['limit'];\n} else {\n    $limit = ['NULL'];\n}\nif (! empty(($_POST['limit_warn'])) && is_numeric($_POST['limit_warn'])) {\n    $limit_warn = $_POST['limit_warn'];\n} else {\n    $limit_warn = ['NULL'];\n}\nif (! empty(($_POST['limit_low'])) && is_numeric($_POST['limit_low'])) {\n    $limit_low = $_POST['limit_low'];\n} else {\n    $limit_low = ['NULL'];\n}\nif (! empty(($_POST['limit_low_warn'])) && is_numeric($_POST['limit_low_warn'])) {\n    $limit_low_warn = $_POST['limit_low_warn'];\n} else {\n    $limit_low_warn = ['NULL'];\n}\nif ($_POST['alerts'] == 'on') {\n    $alerts = 1;\n} else {\n    $alerts = 0;\n}\nif ($_POST['passed'] == 'on') {\n    $passed = 1;\n} else {\n    $passed = 0;\n}\nif (! empty(($_POST['divisor'])) && is_numeric($_POST['divisor'])) {\n    $divisor = $_POST['divisor'];\n} else {\n    $divisor = 1;\n}\nif (! empty(($_POST['multiplier'])) && is_numeric($_POST['multiplier'])) {\n    $multiplier = $_POST['multiplier'];\n} else {\n    $multiplier = 1;\n}\nif (! empty(($_POST['user_func']))) {\n    $user_func = $_POST['user_func'];\n} else {\n    $user_func = ['NULL'];\n}\n\nif ($action == 'test') {\n    $query = 'SELECT * FROM `devices` WHERE `device_id` = ? LIMIT 1';\n    $device = dbFetchRow($query, [$device_id]);\n\n    $rawdata = snmp_get($device, $oid, '-Oqv');\n\n    if (is_numeric($rawdata)) {\n        if (dbUpdate(\n            [\n                'customoid_passed' => 1,\n            ],\n            'customoids',\n            'customoid_id=?',\n            [$id]\n        ) >= 0) {\n            $message = \"Test successful for <i>$name</i>, value $rawdata received\";\n        } else {\n            $status = 'error';\n            $message = \"Failed to set pass on OID <i>$name</i>\";\n        }\n    } else {\n        $status = 'error';\n        $message = \"Invalid data in SNMP reply, value $rawdata received\";\n    }\n} else {\n    if (is_numeric($id) && $id > 0) {\n        if (dbUpdate(\n            [\n                'customoid_descr'          => $name,\n                'customoid_oid'            => $oid,\n                'customoid_datatype'       => $datatype,\n                'customoid_unit'           => $unit,\n                'customoid_divisor'        => $divisor,\n                'customoid_multiplier'     => $multiplier,\n                'customoid_limit'          => $limit,\n                'customoid_limit_warn'     => $limit_warn,\n                'customoid_limit_low'      => $limit_low,\n                'customoid_limit_low_warn' => $limit_low_warn,\n                'customoid_alert'          => $alerts,\n                'customoid_passed'         => $passed,\n                'user_func'                => $user_func,\n            ],\n            'customoids',\n            '`customoid_id` = ?',\n            [$id]\n        ) >= 0) { //end if condition\n            $message = \"Edited OID: <i>$name</i>\";\n        } else {\n            $status = 'error';\n            $message = \"Failed to edit OID <i>$name</i>\";\n        }\n    } else {\n        if (empty($name)) {\n            $status = 'error';\n            $message = 'No OID name provided';\n        } else {\n            if (dbFetchCell('SELECT 1 FROM `customoids` WHERE `customoid_descr` = ? AND `device_id`=?', [$name, $device_id])) {\n                $status = 'error';\n                $message = \"OID named <i>$name</i> on this device already exists\";\n            } else {\n                $id = dbInsert(\n                    [\n                        'device_id'                => $device_id,\n                        'customoid_descr'          => $name,\n                        'customoid_oid'            => $oid,\n                        'customoid_datatype'       => $datatype,\n                        'customoid_unit'           => $unit,\n                        'customoid_divisor'        => $divisor,\n                        'customoid_multiplier'     => $multiplier,\n                        'customoid_limit'          => $limit,\n                        'customoid_limit_warn'     => $limit_warn,\n                        'customoid_limit_low'      => $limit_low,\n                        'customoid_limit_low_warn' => $limit_low_warn,\n                        'customoid_alert'          => $alerts,\n                        'customoid_passed'         => $passed,\n                        'user_func'                => $user_func,\n                    ],\n                    'customoids'\n                );\n                if ($id) {\n                    $message = \"Added OID: <i>$name</i>\";\n                } else {\n                    $status = 'error';\n                    $message = \"Failed to add OID: <i>$name</i>\";\n                }\n            }\n        }\n    }\n}\n\nexit(json_encode([\n    'status'       => $status,\n    'message'      => $message,\n]));\n", "<?php\n/**\n * transport-groups.inc.php\n *\n * LibreNMS alert-transportsinc.php for processor\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * @link       https://www.librenms.org\n *\n * @copyright  2018 Vivia Nguyen-Tran\n * @author     Vivia Nguyen-Tran <vivia@ualberta.ca>\n */\nheader('Content-type: application/json');\n\nif (! Auth::user()->hasGlobalAdmin()) {\n    exit(json_encode([\n        'status' => 'error',\n        'message' => 'You need to be admin',\n    ]));\n}\n\n$status = 'ok';\n$message = '';\n\n$group_id = $vars['group_id'];\n$name = $vars['name'];\n\n$target_members = [];\nforeach ((array) $vars['members'] as $target) {\n    $target_members[] = (int) $target;\n}\n\nif (empty($name)) {\n    $status = 'error';\n    $message = 'No transport group name provided';\n} elseif (sizeof($target_members) < 1) {\n    // Not enough members for a group; requires 1 at least\n    $status = 'error';\n    $message = 'Not enough group members';\n} else {\n    if (is_numeric($group_id) && $group_id > 0) {\n        dbUpdate([\n            'transport_group_name' => $name,\n        ], 'alert_transport_groups', '`transport_group_id`=?', [$group_id]);\n    } else {\n        // Insert into db\n        $group_id = dbInsert([\n            'transport_group_name' => $name,\n        ], 'alert_transport_groups');\n    }\n\n    if (is_numeric($group_id) && $group_id > 0) {\n        $sql = 'SELECT `transport_id` FROM `transport_group_transport` WHERE `transport_group_id`=?';\n        $db_members = dbFetchColumn($sql, [$group_id]);\n\n        // Compare arrays to get added and removed transports\n        $add = array_diff($target_members, $db_members);\n        $remove = array_diff($db_members, $target_members);\n\n        // Insert new transport group members\n        $insert = [];\n        foreach ($add as $transport_id) {\n            $insert[] = [\n                'transport_id' => $transport_id,\n                'transport_group_id' => $group_id,\n            ];\n        }\n        if (! empty($insert)) {\n            dbBulkInsert($insert, 'transport_group_transport');\n        }\n\n        // Remove old transport group members\n        if (! empty($remove)) {\n            dbDelete('transport_group_transport', 'transport_group_id=? AND `transport_id` IN ' . dbGenPlaceholders(count($remove)), array_merge([$group_id], $remove));\n        }\n        $message = 'Updated alert transport group';\n    } else {\n        $status = 'error';\n        $message = 'Did not update alert transport group';\n    }\n}\n\nexit(json_encode([\n    'status'       => $status,\n    'message'      => $message,\n]));\n"], "fixing_code": ["<?php\n/* Copyright (C) 2015 Daniel Preussker, QuxLabs UG <preussker@quxlabs.com>\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>. */\n\n/**\n * Create Dashboards\n *\n * @author Daniel Preussker\n * @copyright 2015 Daniel Preussker, QuxLabs UG\n * @license GPL\n */\nheader('Content-type: application/json');\n\nif (! Auth::check()) {\n    $response = [\n        'status'  => 'error',\n        'message' => 'Unauthenticated',\n    ];\n    echo json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);\n    exit;\n}\n\n$status = 'error';\n$message = 'unknown error';\n\n$dashboard_name = trim(strip_tags($_REQUEST['dashboard_name']));\n\nif (! empty($dashboard_name) && ($dash_id = dbInsert(['dashboard_name' => $dashboard_name, 'user_id' => Auth::id()], 'dashboards'))) {\n    $status = 'ok';\n    $message = 'Dashboard ' . $dashboard_name . ' created';\n} else {\n    $status = 'error';\n    $message = 'ERROR: Could not create';\n}\n\n$response = [\n    'status'        => $status,\n    'message'       => $message,\n    'dashboard_id' => $dash_id,\n];\n\necho json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);\n", "<?php\n\nheader('Content-type: application/json');\n\nif (! Auth::user()->hasGlobalAdmin()) {\n    $response = [\n        'status'  => 'error',\n        'message' => 'Need to be admin',\n    ];\n    echo json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);\n    exit;\n}\n\n$status = 'ok';\n$message = '';\n\n$device_id = $_POST['device_id'];\n$id = $_POST['ccustomoid_id'];\n$action = $_POST['action'];\n$name = strip_tags($_POST['name']);\n$oid = strip_tags($_POST['oid']);\n$datatype = strip_tags($_POST['datatype']);\nif (empty(($_POST['unit']))) {\n    $unit = ['NULL'];\n} else {\n    $unit = $_POST['unit'];\n}\nif (! empty(($_POST['limit'])) && is_numeric($_POST['limit'])) {\n    $limit = $_POST['limit'];\n} else {\n    $limit = ['NULL'];\n}\nif (! empty(($_POST['limit_warn'])) && is_numeric($_POST['limit_warn'])) {\n    $limit_warn = $_POST['limit_warn'];\n} else {\n    $limit_warn = ['NULL'];\n}\nif (! empty(($_POST['limit_low'])) && is_numeric($_POST['limit_low'])) {\n    $limit_low = $_POST['limit_low'];\n} else {\n    $limit_low = ['NULL'];\n}\nif (! empty(($_POST['limit_low_warn'])) && is_numeric($_POST['limit_low_warn'])) {\n    $limit_low_warn = $_POST['limit_low_warn'];\n} else {\n    $limit_low_warn = ['NULL'];\n}\nif ($_POST['alerts'] == 'on') {\n    $alerts = 1;\n} else {\n    $alerts = 0;\n}\nif ($_POST['passed'] == 'on') {\n    $passed = 1;\n} else {\n    $passed = 0;\n}\nif (! empty(($_POST['divisor'])) && is_numeric($_POST['divisor'])) {\n    $divisor = $_POST['divisor'];\n} else {\n    $divisor = 1;\n}\nif (! empty(($_POST['multiplier'])) && is_numeric($_POST['multiplier'])) {\n    $multiplier = $_POST['multiplier'];\n} else {\n    $multiplier = 1;\n}\nif (! empty(($_POST['user_func']))) {\n    $user_func = $_POST['user_func'];\n} else {\n    $user_func = ['NULL'];\n}\n\nif ($action == 'test') {\n    $query = 'SELECT * FROM `devices` WHERE `device_id` = ? LIMIT 1';\n    $device = dbFetchRow($query, [$device_id]);\n\n    $rawdata = snmp_get($device, $oid, '-Oqv');\n\n    if (is_numeric($rawdata)) {\n        if (dbUpdate(\n            [\n                'customoid_passed' => 1,\n            ],\n            'customoids',\n            'customoid_id=?',\n            [$id]\n        ) >= 0) {\n            $message = \"Test successful for <i>$name</i>, value $rawdata received\";\n        } else {\n            $status = 'error';\n            $message = \"Failed to set pass on OID <i>$name</i>\";\n        }\n    } else {\n        $status = 'error';\n        $message = \"Invalid data in SNMP reply, value $rawdata received\";\n    }\n} else {\n    if (is_numeric($id) && $id > 0) {\n        if (dbUpdate(\n            [\n                'customoid_descr'          => $name,\n                'customoid_oid'            => $oid,\n                'customoid_datatype'       => $datatype,\n                'customoid_unit'           => $unit,\n                'customoid_divisor'        => $divisor,\n                'customoid_multiplier'     => $multiplier,\n                'customoid_limit'          => $limit,\n                'customoid_limit_warn'     => $limit_warn,\n                'customoid_limit_low'      => $limit_low,\n                'customoid_limit_low_warn' => $limit_low_warn,\n                'customoid_alert'          => $alerts,\n                'customoid_passed'         => $passed,\n                'user_func'                => $user_func,\n            ],\n            'customoids',\n            '`customoid_id` = ?',\n            [$id]\n        ) >= 0) { //end if condition\n            $message = \"Edited OID: <i>$name</i>\";\n        } else {\n            $status = 'error';\n            $message = \"Failed to edit OID <i>$name</i>\";\n        }\n    } else {\n        if (empty($name)) {\n            $status = 'error';\n            $message = 'No OID name provided';\n        } else {\n            if (dbFetchCell('SELECT 1 FROM `customoids` WHERE `customoid_descr` = ? AND `device_id`=?', [$name, $device_id])) {\n                $status = 'error';\n                $message = \"OID named <i>$name</i> on this device already exists\";\n            } else {\n                $id = dbInsert(\n                    [\n                        'device_id'                => $device_id,\n                        'customoid_descr'          => $name,\n                        'customoid_oid'            => $oid,\n                        'customoid_datatype'       => $datatype,\n                        'customoid_unit'           => $unit,\n                        'customoid_divisor'        => $divisor,\n                        'customoid_multiplier'     => $multiplier,\n                        'customoid_limit'          => $limit,\n                        'customoid_limit_warn'     => $limit_warn,\n                        'customoid_limit_low'      => $limit_low,\n                        'customoid_limit_low_warn' => $limit_low_warn,\n                        'customoid_alert'          => $alerts,\n                        'customoid_passed'         => $passed,\n                        'user_func'                => $user_func,\n                    ],\n                    'customoids'\n                );\n                if ($id) {\n                    $message = \"Added OID: <i>$name</i>\";\n                } else {\n                    $status = 'error';\n                    $message = \"Failed to add OID: <i>$name</i>\";\n                }\n            }\n        }\n    }\n}\n\nexit(json_encode([\n    'status'       => $status,\n    'message'      => $message,\n]));\n", "<?php\n/**\n * transport-groups.inc.php\n *\n * LibreNMS alert-transportsinc.php for processor\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * @link       https://www.librenms.org\n *\n * @copyright  2018 Vivia Nguyen-Tran\n * @author     Vivia Nguyen-Tran <vivia@ualberta.ca>\n */\nheader('Content-type: application/json');\n\nif (! Auth::user()->hasGlobalAdmin()) {\n    exit(json_encode([\n        'status' => 'error',\n        'message' => 'You need to be admin',\n    ]));\n}\n\n$status = 'ok';\n$message = '';\n\n$group_id = $vars['group_id'];\n$name = strip_tags($vars['name']);\n\n$target_members = [];\nforeach ((array) $vars['members'] as $target) {\n    $target_members[] = (int) $target;\n}\n\nif (empty($name)) {\n    $status = 'error';\n    $message = 'No transport group name provided';\n} elseif (sizeof($target_members) < 1) {\n    // Not enough members for a group; requires 1 at least\n    $status = 'error';\n    $message = 'Not enough group members';\n} else {\n    if (is_numeric($group_id) && $group_id > 0) {\n        dbUpdate([\n            'transport_group_name' => $name,\n        ], 'alert_transport_groups', '`transport_group_id`=?', [$group_id]);\n    } else {\n        // Insert into db\n        $group_id = dbInsert([\n            'transport_group_name' => $name,\n        ], 'alert_transport_groups');\n    }\n\n    if (is_numeric($group_id) && $group_id > 0) {\n        $sql = 'SELECT `transport_id` FROM `transport_group_transport` WHERE `transport_group_id`=?';\n        $db_members = dbFetchColumn($sql, [$group_id]);\n\n        // Compare arrays to get added and removed transports\n        $add = array_diff($target_members, $db_members);\n        $remove = array_diff($db_members, $target_members);\n\n        // Insert new transport group members\n        $insert = [];\n        foreach ($add as $transport_id) {\n            $insert[] = [\n                'transport_id' => $transport_id,\n                'transport_group_id' => $group_id,\n            ];\n        }\n        if (! empty($insert)) {\n            dbBulkInsert($insert, 'transport_group_transport');\n        }\n\n        // Remove old transport group members\n        if (! empty($remove)) {\n            dbDelete('transport_group_transport', 'transport_group_id=? AND `transport_id` IN ' . dbGenPlaceholders(count($remove)), array_merge([$group_id], $remove));\n        }\n        $message = 'Updated alert transport group';\n    } else {\n        $status = 'error';\n        $message = 'Did not update alert transport group';\n    }\n}\n\nexit(json_encode([\n    'status'       => $status,\n    'message'      => $message,\n]));\n"], "filenames": ["includes/html/forms/add-dashboard.inc.php", "includes/html/forms/customoid.inc.php", "includes/html/forms/transport-groups.inc.php"], "buggy_code_start_loc": [37, 20, 38], "buggy_code_end_loc": [38, 23, 39], "fixing_code_start_loc": [37, 20, 38], "fixing_code_end_loc": [38, 23, 39], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in Packagist librenms/librenms prior to 22.1.0.", "other": {"cve": {"id": "CVE-2022-0589", "sourceIdentifier": "security@huntr.dev", "published": "2022-02-15T09:15:06.877", "lastModified": "2022-02-22T21:24:27.497", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in Packagist librenms/librenms prior to 22.1.0."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - Almacenado en Packagist librenms/librenms versiones anteriores a 22.1.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:librenms:librenms:*:*:*:*:*:*:*:*", "versionEndExcluding": "22.1.0", "matchCriteriaId": "3541E196-185E-40FE-83F2-B709574DD32D"}]}]}], "references": [{"url": "https://github.com/librenms/librenms/commit/4c9d4eefd8064a0285f9718ef38f5617d7f9d6fa", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/d943d95c-076f-441a-ab21-cbf6b15f6768", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://notes.netbytesec.com/2022/02/multiple-vulnerabilities-in-librenms.html", "source": "security@huntr.dev", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/librenms/librenms/commit/4c9d4eefd8064a0285f9718ef38f5617d7f9d6fa"}}