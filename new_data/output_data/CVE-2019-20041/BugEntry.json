{"buggy_code": ["<?php\n/**\n * kses 0.2.2 - HTML/XHTML filter that only allows some elements and attributes\n * Copyright (C) 2002, 2003, 2005  Ulf Harnhammar\n *\n * This program is free software and open source software; you can redistribute\n * it and/or modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n * http://www.gnu.org/licenses/gpl.html\n *\n * [kses strips evil scripts!]\n *\n * Added wp_ prefix to avoid conflicts with existing kses users\n *\n * @version 0.2.2\n * @copyright (C) 2002, 2003, 2005\n * @author Ulf Harnhammar <http://advogato.org/person/metaur/>\n *\n * @package External\n * @subpackage KSES\n */\n\n/**\n * Specifies the default allowable HTML tags.\n *\n * Using `CUSTOM_TAGS` is not recommended and should be considered deprecated. The\n * {@see 'wp_kses_allowed_html'} filter is more powerful and supplies context.\n *\n * @see wp_kses_allowed_html()\n * @since 1.2.0\n *\n * @var array[]|bool Array of default allowable HTML tags, or false to use the defaults.\n */\nif ( ! defined( 'CUSTOM_TAGS' ) ) {\n\tdefine( 'CUSTOM_TAGS', false );\n}\n\n// Ensure that these variables are added to the global namespace\n// (e.g. if using namespaces / autoload in the current PHP environment).\nglobal $allowedposttags, $allowedtags, $allowedentitynames;\n\nif ( ! CUSTOM_TAGS ) {\n\t/**\n\t * KSES global for default allowable HTML tags.\n\t *\n\t * Can be overridden with the `CUSTOM_TAGS` constant.\n\t *\n\t * @var array[] $allowedposttags Array of default allowable HTML tags.\n\t * @since 2.0.0\n\t */\n\t$allowedposttags = array(\n\t\t'address'    => array(),\n\t\t'a'          => array(\n\t\t\t'href'     => true,\n\t\t\t'rel'      => true,\n\t\t\t'rev'      => true,\n\t\t\t'name'     => true,\n\t\t\t'target'   => true,\n\t\t\t'download' => array(\n\t\t\t\t'valueless' => 'y',\n\t\t\t),\n\t\t),\n\t\t'abbr'       => array(),\n\t\t'acronym'    => array(),\n\t\t'area'       => array(\n\t\t\t'alt'    => true,\n\t\t\t'coords' => true,\n\t\t\t'href'   => true,\n\t\t\t'nohref' => true,\n\t\t\t'shape'  => true,\n\t\t\t'target' => true,\n\t\t),\n\t\t'article'    => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'aside'      => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'audio'      => array(\n\t\t\t'autoplay' => true,\n\t\t\t'controls' => true,\n\t\t\t'loop'     => true,\n\t\t\t'muted'    => true,\n\t\t\t'preload'  => true,\n\t\t\t'src'      => true,\n\t\t),\n\t\t'b'          => array(),\n\t\t'bdo'        => array(\n\t\t\t'dir' => true,\n\t\t),\n\t\t'big'        => array(),\n\t\t'blockquote' => array(\n\t\t\t'cite'     => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'br'         => array(),\n\t\t'button'     => array(\n\t\t\t'disabled' => true,\n\t\t\t'name'     => true,\n\t\t\t'type'     => true,\n\t\t\t'value'    => true,\n\t\t),\n\t\t'caption'    => array(\n\t\t\t'align' => true,\n\t\t),\n\t\t'cite'       => array(\n\t\t\t'dir'  => true,\n\t\t\t'lang' => true,\n\t\t),\n\t\t'code'       => array(),\n\t\t'col'        => array(\n\t\t\t'align'   => true,\n\t\t\t'char'    => true,\n\t\t\t'charoff' => true,\n\t\t\t'span'    => true,\n\t\t\t'dir'     => true,\n\t\t\t'valign'  => true,\n\t\t\t'width'   => true,\n\t\t),\n\t\t'colgroup'   => array(\n\t\t\t'align'   => true,\n\t\t\t'char'    => true,\n\t\t\t'charoff' => true,\n\t\t\t'span'    => true,\n\t\t\t'valign'  => true,\n\t\t\t'width'   => true,\n\t\t),\n\t\t'del'        => array(\n\t\t\t'datetime' => true,\n\t\t),\n\t\t'dd'         => array(),\n\t\t'dfn'        => array(),\n\t\t'details'    => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'open'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'div'        => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'dl'         => array(),\n\t\t'dt'         => array(),\n\t\t'em'         => array(),\n\t\t'fieldset'   => array(),\n\t\t'figure'     => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'figcaption' => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'font'       => array(\n\t\t\t'color' => true,\n\t\t\t'face'  => true,\n\t\t\t'size'  => true,\n\t\t),\n\t\t'footer'     => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'h1'         => array(\n\t\t\t'align' => true,\n\t\t),\n\t\t'h2'         => array(\n\t\t\t'align' => true,\n\t\t),\n\t\t'h3'         => array(\n\t\t\t'align' => true,\n\t\t),\n\t\t'h4'         => array(\n\t\t\t'align' => true,\n\t\t),\n\t\t'h5'         => array(\n\t\t\t'align' => true,\n\t\t),\n\t\t'h6'         => array(\n\t\t\t'align' => true,\n\t\t),\n\t\t'header'     => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'hgroup'     => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'hr'         => array(\n\t\t\t'align'   => true,\n\t\t\t'noshade' => true,\n\t\t\t'size'    => true,\n\t\t\t'width'   => true,\n\t\t),\n\t\t'i'          => array(),\n\t\t'img'        => array(\n\t\t\t'alt'      => true,\n\t\t\t'align'    => true,\n\t\t\t'border'   => true,\n\t\t\t'height'   => true,\n\t\t\t'hspace'   => true,\n\t\t\t'longdesc' => true,\n\t\t\t'vspace'   => true,\n\t\t\t'src'      => true,\n\t\t\t'usemap'   => true,\n\t\t\t'width'    => true,\n\t\t),\n\t\t'ins'        => array(\n\t\t\t'datetime' => true,\n\t\t\t'cite'     => true,\n\t\t),\n\t\t'kbd'        => array(),\n\t\t'label'      => array(\n\t\t\t'for' => true,\n\t\t),\n\t\t'legend'     => array(\n\t\t\t'align' => true,\n\t\t),\n\t\t'li'         => array(\n\t\t\t'align' => true,\n\t\t\t'value' => true,\n\t\t),\n\t\t'map'        => array(\n\t\t\t'name' => true,\n\t\t),\n\t\t'mark'       => array(),\n\t\t'menu'       => array(\n\t\t\t'type' => true,\n\t\t),\n\t\t'nav'        => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'p'          => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'pre'        => array(\n\t\t\t'width' => true,\n\t\t),\n\t\t'q'          => array(\n\t\t\t'cite' => true,\n\t\t),\n\t\t's'          => array(),\n\t\t'samp'       => array(),\n\t\t'span'       => array(\n\t\t\t'dir'      => true,\n\t\t\t'align'    => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'section'    => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'small'      => array(),\n\t\t'strike'     => array(),\n\t\t'strong'     => array(),\n\t\t'sub'        => array(),\n\t\t'summary'    => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'sup'        => array(),\n\t\t'table'      => array(\n\t\t\t'align'       => true,\n\t\t\t'bgcolor'     => true,\n\t\t\t'border'      => true,\n\t\t\t'cellpadding' => true,\n\t\t\t'cellspacing' => true,\n\t\t\t'dir'         => true,\n\t\t\t'rules'       => true,\n\t\t\t'summary'     => true,\n\t\t\t'width'       => true,\n\t\t),\n\t\t'tbody'      => array(\n\t\t\t'align'   => true,\n\t\t\t'char'    => true,\n\t\t\t'charoff' => true,\n\t\t\t'valign'  => true,\n\t\t),\n\t\t'td'         => array(\n\t\t\t'abbr'    => true,\n\t\t\t'align'   => true,\n\t\t\t'axis'    => true,\n\t\t\t'bgcolor' => true,\n\t\t\t'char'    => true,\n\t\t\t'charoff' => true,\n\t\t\t'colspan' => true,\n\t\t\t'dir'     => true,\n\t\t\t'headers' => true,\n\t\t\t'height'  => true,\n\t\t\t'nowrap'  => true,\n\t\t\t'rowspan' => true,\n\t\t\t'scope'   => true,\n\t\t\t'valign'  => true,\n\t\t\t'width'   => true,\n\t\t),\n\t\t'textarea'   => array(\n\t\t\t'cols'     => true,\n\t\t\t'rows'     => true,\n\t\t\t'disabled' => true,\n\t\t\t'name'     => true,\n\t\t\t'readonly' => true,\n\t\t),\n\t\t'tfoot'      => array(\n\t\t\t'align'   => true,\n\t\t\t'char'    => true,\n\t\t\t'charoff' => true,\n\t\t\t'valign'  => true,\n\t\t),\n\t\t'th'         => array(\n\t\t\t'abbr'    => true,\n\t\t\t'align'   => true,\n\t\t\t'axis'    => true,\n\t\t\t'bgcolor' => true,\n\t\t\t'char'    => true,\n\t\t\t'charoff' => true,\n\t\t\t'colspan' => true,\n\t\t\t'headers' => true,\n\t\t\t'height'  => true,\n\t\t\t'nowrap'  => true,\n\t\t\t'rowspan' => true,\n\t\t\t'scope'   => true,\n\t\t\t'valign'  => true,\n\t\t\t'width'   => true,\n\t\t),\n\t\t'thead'      => array(\n\t\t\t'align'   => true,\n\t\t\t'char'    => true,\n\t\t\t'charoff' => true,\n\t\t\t'valign'  => true,\n\t\t),\n\t\t'title'      => array(),\n\t\t'tr'         => array(\n\t\t\t'align'   => true,\n\t\t\t'bgcolor' => true,\n\t\t\t'char'    => true,\n\t\t\t'charoff' => true,\n\t\t\t'valign'  => true,\n\t\t),\n\t\t'track'      => array(\n\t\t\t'default' => true,\n\t\t\t'kind'    => true,\n\t\t\t'label'   => true,\n\t\t\t'src'     => true,\n\t\t\t'srclang' => true,\n\t\t),\n\t\t'tt'         => array(),\n\t\t'u'          => array(),\n\t\t'ul'         => array(\n\t\t\t'type' => true,\n\t\t),\n\t\t'ol'         => array(\n\t\t\t'start'    => true,\n\t\t\t'type'     => true,\n\t\t\t'reversed' => true,\n\t\t),\n\t\t'var'        => array(),\n\t\t'video'      => array(\n\t\t\t'autoplay' => true,\n\t\t\t'controls' => true,\n\t\t\t'height'   => true,\n\t\t\t'loop'     => true,\n\t\t\t'muted'    => true,\n\t\t\t'poster'   => true,\n\t\t\t'preload'  => true,\n\t\t\t'src'      => true,\n\t\t\t'width'    => true,\n\t\t),\n\t);\n\n\t/**\n\t * @var array[] $allowedtags Array of KSES allowed HTML elements.\n\t * @since 1.0.0\n\t */\n\t$allowedtags = array(\n\t\t'a'          => array(\n\t\t\t'href'  => true,\n\t\t\t'title' => true,\n\t\t),\n\t\t'abbr'       => array(\n\t\t\t'title' => true,\n\t\t),\n\t\t'acronym'    => array(\n\t\t\t'title' => true,\n\t\t),\n\t\t'b'          => array(),\n\t\t'blockquote' => array(\n\t\t\t'cite' => true,\n\t\t),\n\t\t'cite'       => array(),\n\t\t'code'       => array(),\n\t\t'del'        => array(\n\t\t\t'datetime' => true,\n\t\t),\n\t\t'em'         => array(),\n\t\t'i'          => array(),\n\t\t'q'          => array(\n\t\t\t'cite' => true,\n\t\t),\n\t\t's'          => array(),\n\t\t'strike'     => array(),\n\t\t'strong'     => array(),\n\t);\n\n\t/**\n\t * @var string[] $allowedentitynames Array of KSES allowed HTML entitity names.\n\t * @since 1.0.0\n\t */\n\t$allowedentitynames = array(\n\t\t'nbsp',\n\t\t'iexcl',\n\t\t'cent',\n\t\t'pound',\n\t\t'curren',\n\t\t'yen',\n\t\t'brvbar',\n\t\t'sect',\n\t\t'uml',\n\t\t'copy',\n\t\t'ordf',\n\t\t'laquo',\n\t\t'not',\n\t\t'shy',\n\t\t'reg',\n\t\t'macr',\n\t\t'deg',\n\t\t'plusmn',\n\t\t'acute',\n\t\t'micro',\n\t\t'para',\n\t\t'middot',\n\t\t'cedil',\n\t\t'ordm',\n\t\t'raquo',\n\t\t'iquest',\n\t\t'Agrave',\n\t\t'Aacute',\n\t\t'Acirc',\n\t\t'Atilde',\n\t\t'Auml',\n\t\t'Aring',\n\t\t'AElig',\n\t\t'Ccedil',\n\t\t'Egrave',\n\t\t'Eacute',\n\t\t'Ecirc',\n\t\t'Euml',\n\t\t'Igrave',\n\t\t'Iacute',\n\t\t'Icirc',\n\t\t'Iuml',\n\t\t'ETH',\n\t\t'Ntilde',\n\t\t'Ograve',\n\t\t'Oacute',\n\t\t'Ocirc',\n\t\t'Otilde',\n\t\t'Ouml',\n\t\t'times',\n\t\t'Oslash',\n\t\t'Ugrave',\n\t\t'Uacute',\n\t\t'Ucirc',\n\t\t'Uuml',\n\t\t'Yacute',\n\t\t'THORN',\n\t\t'szlig',\n\t\t'agrave',\n\t\t'aacute',\n\t\t'acirc',\n\t\t'atilde',\n\t\t'auml',\n\t\t'aring',\n\t\t'aelig',\n\t\t'ccedil',\n\t\t'egrave',\n\t\t'eacute',\n\t\t'ecirc',\n\t\t'euml',\n\t\t'igrave',\n\t\t'iacute',\n\t\t'icirc',\n\t\t'iuml',\n\t\t'eth',\n\t\t'ntilde',\n\t\t'ograve',\n\t\t'oacute',\n\t\t'ocirc',\n\t\t'otilde',\n\t\t'ouml',\n\t\t'divide',\n\t\t'oslash',\n\t\t'ugrave',\n\t\t'uacute',\n\t\t'ucirc',\n\t\t'uuml',\n\t\t'yacute',\n\t\t'thorn',\n\t\t'yuml',\n\t\t'quot',\n\t\t'amp',\n\t\t'lt',\n\t\t'gt',\n\t\t'apos',\n\t\t'OElig',\n\t\t'oelig',\n\t\t'Scaron',\n\t\t'scaron',\n\t\t'Yuml',\n\t\t'circ',\n\t\t'tilde',\n\t\t'ensp',\n\t\t'emsp',\n\t\t'thinsp',\n\t\t'zwnj',\n\t\t'zwj',\n\t\t'lrm',\n\t\t'rlm',\n\t\t'ndash',\n\t\t'mdash',\n\t\t'lsquo',\n\t\t'rsquo',\n\t\t'sbquo',\n\t\t'ldquo',\n\t\t'rdquo',\n\t\t'bdquo',\n\t\t'dagger',\n\t\t'Dagger',\n\t\t'permil',\n\t\t'lsaquo',\n\t\t'rsaquo',\n\t\t'euro',\n\t\t'fnof',\n\t\t'Alpha',\n\t\t'Beta',\n\t\t'Gamma',\n\t\t'Delta',\n\t\t'Epsilon',\n\t\t'Zeta',\n\t\t'Eta',\n\t\t'Theta',\n\t\t'Iota',\n\t\t'Kappa',\n\t\t'Lambda',\n\t\t'Mu',\n\t\t'Nu',\n\t\t'Xi',\n\t\t'Omicron',\n\t\t'Pi',\n\t\t'Rho',\n\t\t'Sigma',\n\t\t'Tau',\n\t\t'Upsilon',\n\t\t'Phi',\n\t\t'Chi',\n\t\t'Psi',\n\t\t'Omega',\n\t\t'alpha',\n\t\t'beta',\n\t\t'gamma',\n\t\t'delta',\n\t\t'epsilon',\n\t\t'zeta',\n\t\t'eta',\n\t\t'theta',\n\t\t'iota',\n\t\t'kappa',\n\t\t'lambda',\n\t\t'mu',\n\t\t'nu',\n\t\t'xi',\n\t\t'omicron',\n\t\t'pi',\n\t\t'rho',\n\t\t'sigmaf',\n\t\t'sigma',\n\t\t'tau',\n\t\t'upsilon',\n\t\t'phi',\n\t\t'chi',\n\t\t'psi',\n\t\t'omega',\n\t\t'thetasym',\n\t\t'upsih',\n\t\t'piv',\n\t\t'bull',\n\t\t'hellip',\n\t\t'prime',\n\t\t'Prime',\n\t\t'oline',\n\t\t'frasl',\n\t\t'weierp',\n\t\t'image',\n\t\t'real',\n\t\t'trade',\n\t\t'alefsym',\n\t\t'larr',\n\t\t'uarr',\n\t\t'rarr',\n\t\t'darr',\n\t\t'harr',\n\t\t'crarr',\n\t\t'lArr',\n\t\t'uArr',\n\t\t'rArr',\n\t\t'dArr',\n\t\t'hArr',\n\t\t'forall',\n\t\t'part',\n\t\t'exist',\n\t\t'empty',\n\t\t'nabla',\n\t\t'isin',\n\t\t'notin',\n\t\t'ni',\n\t\t'prod',\n\t\t'sum',\n\t\t'minus',\n\t\t'lowast',\n\t\t'radic',\n\t\t'prop',\n\t\t'infin',\n\t\t'ang',\n\t\t'and',\n\t\t'or',\n\t\t'cap',\n\t\t'cup',\n\t\t'int',\n\t\t'sim',\n\t\t'cong',\n\t\t'asymp',\n\t\t'ne',\n\t\t'equiv',\n\t\t'le',\n\t\t'ge',\n\t\t'sub',\n\t\t'sup',\n\t\t'nsub',\n\t\t'sube',\n\t\t'supe',\n\t\t'oplus',\n\t\t'otimes',\n\t\t'perp',\n\t\t'sdot',\n\t\t'lceil',\n\t\t'rceil',\n\t\t'lfloor',\n\t\t'rfloor',\n\t\t'lang',\n\t\t'rang',\n\t\t'loz',\n\t\t'spades',\n\t\t'clubs',\n\t\t'hearts',\n\t\t'diams',\n\t\t'sup1',\n\t\t'sup2',\n\t\t'sup3',\n\t\t'frac14',\n\t\t'frac12',\n\t\t'frac34',\n\t\t'there4',\n\t);\n\n\t$allowedposttags = array_map( '_wp_add_global_attributes', $allowedposttags );\n} else {\n\t$allowedtags     = wp_kses_array_lc( $allowedtags );\n\t$allowedposttags = wp_kses_array_lc( $allowedposttags );\n}\n\n/**\n * Filters text content and strips out disallowed HTML.\n *\n * This function makes sure that only the allowed HTML element names, attribute\n * names, attribute values, and HTML entities will occur in the given text string.\n *\n * This function expects unslashed data.\n *\n * @see wp_kses_post() for specifically filtering post content and fields.\n * @see wp_allowed_protocols() for the default allowed protocols in link URLs.\n *\n * @since 1.0.0\n *\n * @param string         $string            Text content to filter.\n * @param array[]|string $allowed_html      An array of allowed HTML elements and attributes, or a\n *                                          context name such as 'post'.\n * @param string[]       $allowed_protocols Array of allowed URL protocols.\n * @return string Filtered content containing only the allowed HTML.\n */\nfunction wp_kses( $string, $allowed_html, $allowed_protocols = array() ) {\n\tif ( empty( $allowed_protocols ) ) {\n\t\t$allowed_protocols = wp_allowed_protocols();\n\t}\n\t$string = wp_kses_no_null( $string, array( 'slash_zero' => 'keep' ) );\n\t$string = wp_kses_normalize_entities( $string );\n\t$string = wp_kses_hook( $string, $allowed_html, $allowed_protocols );\n\treturn wp_kses_split( $string, $allowed_html, $allowed_protocols );\n}\n\n/**\n * Filters one HTML attribute and ensures its value is allowed.\n *\n * This function can escape data in some situations where `wp_kses()` must strip the whole attribute.\n *\n * @since 4.2.3\n *\n * @param string $string  The 'whole' attribute, including name and value.\n * @param string $element The HTML element name to which the attribute belongs.\n * @return string Filtered attribute.\n */\nfunction wp_kses_one_attr( $string, $element ) {\n\t$uris              = wp_kses_uri_attributes();\n\t$allowed_html      = wp_kses_allowed_html( 'post' );\n\t$allowed_protocols = wp_allowed_protocols();\n\t$string            = wp_kses_no_null( $string, array( 'slash_zero' => 'keep' ) );\n\n\t// Preserve leading and trailing whitespace.\n\t$matches = array();\n\tpreg_match( '/^\\s*/', $string, $matches );\n\t$lead = $matches[0];\n\tpreg_match( '/\\s*$/', $string, $matches );\n\t$trail = $matches[0];\n\tif ( empty( $trail ) ) {\n\t\t$string = substr( $string, strlen( $lead ) );\n\t} else {\n\t\t$string = substr( $string, strlen( $lead ), -strlen( $trail ) );\n\t}\n\n\t// Parse attribute name and value from input.\n\t$split = preg_split( '/\\s*=\\s*/', $string, 2 );\n\t$name  = $split[0];\n\tif ( count( $split ) == 2 ) {\n\t\t$value = $split[1];\n\n\t\t// Remove quotes surrounding $value.\n\t\t// Also guarantee correct quoting in $string for this one attribute.\n\t\tif ( '' == $value ) {\n\t\t\t$quote = '';\n\t\t} else {\n\t\t\t$quote = $value[0];\n\t\t}\n\t\tif ( '\"' == $quote || \"'\" == $quote ) {\n\t\t\tif ( substr( $value, -1 ) != $quote ) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\t$value = substr( $value, 1, -1 );\n\t\t} else {\n\t\t\t$quote = '\"';\n\t\t}\n\n\t\t// Sanitize quotes, angle braces, and entities.\n\t\t$value = esc_attr( $value );\n\n\t\t// Sanitize URI values.\n\t\tif ( in_array( strtolower( $name ), $uris ) ) {\n\t\t\t$value = wp_kses_bad_protocol( $value, $allowed_protocols );\n\t\t}\n\n\t\t$string = \"$name=$quote$value$quote\";\n\t\t$vless  = 'n';\n\t} else {\n\t\t$value = '';\n\t\t$vless = 'y';\n\t}\n\n\t// Sanitize attribute by name.\n\twp_kses_attr_check( $name, $value, $string, $vless, $element, $allowed_html );\n\n\t// Restore whitespace.\n\treturn $lead . $string . $trail;\n}\n\n/**\n * Returns an array of allowed HTML tags and attributes for a given context.\n *\n * @since 3.5.0\n * @since 5.0.1 `form` removed as allowable HTML tag.\n *\n * @global array $allowedposttags\n * @global array $allowedtags\n * @global array $allowedentitynames\n *\n * @param string|array $context The context for which to retrieve tags. Allowed values are 'post',\n *                              'strip', 'data', 'entities', or the name of a field filter such as\n *                              'pre_user_description'.\n * @return array Array of allowed HTML tags and their allowed attributes.\n */\nfunction wp_kses_allowed_html( $context = '' ) {\n\tglobal $allowedposttags, $allowedtags, $allowedentitynames;\n\n\tif ( is_array( $context ) ) {\n\t\t/**\n\t\t * Filters the HTML that is allowed for a given context.\n\t\t *\n\t\t * @since 3.5.0\n\t\t *\n\t\t * @param array[]|string $context      Context to judge allowed tags by.\n\t\t * @param string         $context_type Context name.\n\t\t */\n\t\treturn apply_filters( 'wp_kses_allowed_html', $context, 'explicit' );\n\t}\n\n\tswitch ( $context ) {\n\t\tcase 'post':\n\t\t\t/** This filter is documented in wp-includes/kses.php */\n\t\t\t$tags = apply_filters( 'wp_kses_allowed_html', $allowedposttags, $context );\n\n\t\t\t// 5.0.1 removed the `<form>` tag, allow it if a filter is allowing it's sub-elements `<input>` or `<select>`.\n\t\t\tif ( ! CUSTOM_TAGS && ! isset( $tags['form'] ) && ( isset( $tags['input'] ) || isset( $tags['select'] ) ) ) {\n\t\t\t\t$tags = $allowedposttags;\n\n\t\t\t\t$tags['form'] = array(\n\t\t\t\t\t'action'         => true,\n\t\t\t\t\t'accept'         => true,\n\t\t\t\t\t'accept-charset' => true,\n\t\t\t\t\t'enctype'        => true,\n\t\t\t\t\t'method'         => true,\n\t\t\t\t\t'name'           => true,\n\t\t\t\t\t'target'         => true,\n\t\t\t\t);\n\n\t\t\t\t/** This filter is documented in wp-includes/kses.php */\n\t\t\t\t$tags = apply_filters( 'wp_kses_allowed_html', $tags, $context );\n\t\t\t}\n\n\t\t\treturn $tags;\n\n\t\tcase 'user_description':\n\t\tcase 'pre_user_description':\n\t\t\t$tags             = $allowedtags;\n\t\t\t$tags['a']['rel'] = true;\n\t\t\t/** This filter is documented in wp-includes/kses.php */\n\t\t\treturn apply_filters( 'wp_kses_allowed_html', $tags, $context );\n\n\t\tcase 'strip':\n\t\t\t/** This filter is documented in wp-includes/kses.php */\n\t\t\treturn apply_filters( 'wp_kses_allowed_html', array(), $context );\n\n\t\tcase 'entities':\n\t\t\t/** This filter is documented in wp-includes/kses.php */\n\t\t\treturn apply_filters( 'wp_kses_allowed_html', $allowedentitynames, $context );\n\n\t\tcase 'data':\n\t\tdefault:\n\t\t\t/** This filter is documented in wp-includes/kses.php */\n\t\t\treturn apply_filters( 'wp_kses_allowed_html', $allowedtags, $context );\n\t}\n}\n\n/**\n * You add any KSES hooks here.\n *\n * There is currently only one KSES WordPress hook, {@see 'pre_kses'}, and it is called here.\n * All parameters are passed to the hooks and expected to receive a string.\n *\n * @since 1.0.0\n *\n * @param string          $string            Content to filter through KSES.\n * @param array[]|string  $allowed_html      List of allowed HTML elements.\n * @param string[]        $allowed_protocols Array of allowed URL protocols.\n * @return string Filtered content through {@see 'pre_kses'} hook.\n */\nfunction wp_kses_hook( $string, $allowed_html, $allowed_protocols ) {\n\t/**\n\t * Filters content to be run through kses.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string          $string            Content to run through KSES.\n\t * @param array[]|string  $allowed_html      Allowed HTML elements.\n\t * @param string[]        $allowed_protocols Array of allowed URL protocols.\n\t */\n\treturn apply_filters( 'pre_kses', $string, $allowed_html, $allowed_protocols );\n}\n\n/**\n * Returns the version number of KSES.\n *\n * @since 1.0.0\n *\n * @return string KSES version number.\n */\nfunction wp_kses_version() {\n\treturn '0.2.2';\n}\n\n/**\n * Searches for HTML tags, no matter how malformed.\n *\n * It also matches stray `>` characters.\n *\n * @since 1.0.0\n *\n * @global array $pass_allowed_html\n * @global array $pass_allowed_protocols\n *\n * @param string   $string            Content to filter.\n * @param array    $allowed_html      Allowed HTML elements.\n * @param string[] $allowed_protocols Array of allowed URL protocols.\n * @return string Content with fixed HTML tags\n */\nfunction wp_kses_split( $string, $allowed_html, $allowed_protocols ) {\n\tglobal $pass_allowed_html, $pass_allowed_protocols;\n\t$pass_allowed_html      = $allowed_html;\n\t$pass_allowed_protocols = $allowed_protocols;\n\treturn preg_replace_callback( '%(<!--.*?(-->|$))|(<[^>]*(>|$)|>)%', '_wp_kses_split_callback', $string );\n}\n\n/**\n * Helper function listing HTML attributes containing a URL.\n *\n * This function returns a list of all HTML attributes that must contain\n * a URL according to the HTML specification.\n *\n * This list includes URI attributes both allowed and disallowed by KSES.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\n *\n * @since 5.0.1\n *\n * @return array HTML attributes that must include a URL.\n */\nfunction wp_kses_uri_attributes() {\n\t$uri_attributes = array(\n\t\t'action',\n\t\t'archive',\n\t\t'background',\n\t\t'cite',\n\t\t'classid',\n\t\t'codebase',\n\t\t'data',\n\t\t'formaction',\n\t\t'href',\n\t\t'icon',\n\t\t'longdesc',\n\t\t'manifest',\n\t\t'poster',\n\t\t'profile',\n\t\t'src',\n\t\t'usemap',\n\t\t'xmlns',\n\t);\n\n\t/**\n\t * Filters the list of attributes that are required to contain a URL.\n\t *\n\t * Use this filter to add any `data-` attributes that are required to be\n\t * validated as a URL.\n\t *\n\t * @since 5.0.1\n\t *\n\t * @param array $uri_attributes HTML attributes requiring validation as a URL.\n\t */\n\t$uri_attributes = apply_filters( 'wp_kses_uri_attributes', $uri_attributes );\n\n\treturn $uri_attributes;\n}\n\n/**\n * Callback for `wp_kses_split()`.\n *\n * @since 3.1.0\n * @access private\n * @ignore\n *\n * @global array $pass_allowed_html\n * @global array $pass_allowed_protocols\n *\n * @return string\n */\nfunction _wp_kses_split_callback( $match ) {\n\tglobal $pass_allowed_html, $pass_allowed_protocols;\n\treturn wp_kses_split2( $match[0], $pass_allowed_html, $pass_allowed_protocols );\n}\n\n/**\n * Callback for `wp_kses_split()` for fixing malformed HTML tags.\n *\n * This function does a lot of work. It rejects some very malformed things like\n * `<:::>`. It returns an empty string, if the element isn't allowed (look ma, no\n * `strip_tags()`!). Otherwise it splits the tag into an element and an attribute\n * list.\n *\n * After the tag is split into an element and an attribute list, it is run\n * through another filter which will remove illegal attributes and once that is\n * completed, will be returned.\n *\n * @access private\n * @ignore\n * @since 1.0.0\n *\n * @param string   $string            Content to filter.\n * @param array    $allowed_html      Allowed HTML elements.\n * @param string[] $allowed_protocols Array of allowed URL protocols.\n * @return string Fixed HTML element\n */\nfunction wp_kses_split2( $string, $allowed_html, $allowed_protocols ) {\n\t$string = wp_kses_stripslashes( $string );\n\n\t// It matched a \">\" character.\n\tif ( substr( $string, 0, 1 ) != '<' ) {\n\t\treturn '&gt;';\n\t}\n\n\t// Allow HTML comments.\n\tif ( '<!--' == substr( $string, 0, 4 ) ) {\n\t\t$string = str_replace( array( '<!--', '-->' ), '', $string );\n\t\twhile ( $string != ( $newstring = wp_kses( $string, $allowed_html, $allowed_protocols ) ) ) {\n\t\t\t$string = $newstring;\n\t\t}\n\t\tif ( $string == '' ) {\n\t\t\treturn '';\n\t\t}\n\t\t// prevent multiple dashes in comments\n\t\t$string = preg_replace( '/--+/', '-', $string );\n\t\t// prevent three dashes closing a comment\n\t\t$string = preg_replace( '/-$/', '', $string );\n\t\treturn \"<!--{$string}-->\";\n\t}\n\n\t// It's seriously malformed.\n\tif ( ! preg_match( '%^<\\s*(/\\s*)?([a-zA-Z0-9-]+)([^>]*)>?$%', $string, $matches ) ) {\n\t\treturn '';\n\t}\n\n\t$slash    = trim( $matches[1] );\n\t$elem     = $matches[2];\n\t$attrlist = $matches[3];\n\n\tif ( ! is_array( $allowed_html ) ) {\n\t\t$allowed_html = wp_kses_allowed_html( $allowed_html );\n\t}\n\n\t// They are using a not allowed HTML element.\n\tif ( ! isset( $allowed_html[ strtolower( $elem ) ] ) ) {\n\t\treturn '';\n\t}\n\n\t// No attributes are allowed for closing elements.\n\tif ( $slash != '' ) {\n\t\treturn \"</$elem>\";\n\t}\n\n\treturn wp_kses_attr( $elem, $attrlist, $allowed_html, $allowed_protocols );\n}\n\n/**\n * Removes all attributes, if none are allowed for this element.\n *\n * If some are allowed it calls `wp_kses_hair()` to split them further, and then\n * it builds up new HTML code from the data that `kses_hair()` returns. It also\n * removes `<` and `>` characters, if there are any left. One more thing it does\n * is to check if the tag has a closing XHTML slash, and if it does, it puts one\n * in the returned code as well.\n *\n * @since 1.0.0\n *\n * @param string   $element           HTML element/tag.\n * @param string   $attr              HTML attributes from HTML element to closing HTML element tag.\n * @param array    $allowed_html      Allowed HTML elements.\n * @param string[] $allowed_protocols Array of allowed URL protocols.\n * @return string Sanitized HTML element.\n */\nfunction wp_kses_attr( $element, $attr, $allowed_html, $allowed_protocols ) {\n\tif ( ! is_array( $allowed_html ) ) {\n\t\t$allowed_html = wp_kses_allowed_html( $allowed_html );\n\t}\n\n\t// Is there a closing XHTML slash at the end of the attributes?\n\t$xhtml_slash = '';\n\tif ( preg_match( '%\\s*/\\s*$%', $attr ) ) {\n\t\t$xhtml_slash = ' /';\n\t}\n\n\t// Are any attributes allowed at all for this element?\n\t$element_low = strtolower( $element );\n\tif ( empty( $allowed_html[ $element_low ] ) || true === $allowed_html[ $element_low ] ) {\n\t\treturn \"<$element$xhtml_slash>\";\n\t}\n\n\t// Split it\n\t$attrarr = wp_kses_hair( $attr, $allowed_protocols );\n\n\t// Go through $attrarr, and save the allowed attributes for this element\n\t// in $attr2\n\t$attr2 = '';\n\tforeach ( $attrarr as $arreach ) {\n\t\tif ( wp_kses_attr_check( $arreach['name'], $arreach['value'], $arreach['whole'], $arreach['vless'], $element, $allowed_html ) ) {\n\t\t\t$attr2 .= ' ' . $arreach['whole'];\n\t\t}\n\t}\n\n\t// Remove any \"<\" or \">\" characters\n\t$attr2 = preg_replace( '/[<>]/', '', $attr2 );\n\n\treturn \"<$element$attr2$xhtml_slash>\";\n}\n\n/**\n * Determines whether an attribute is allowed.\n *\n * @since 4.2.3\n * @since 5.0.0 Add support for `data-*` wildcard attributes.\n *\n * @param string $name         The attribute name. Passed by reference. Returns empty string when not allowed.\n * @param string $value        The attribute value. Passed by reference. Returns a filtered value.\n * @param string $whole        The `name=value` input. Passed by reference. Returns filtered input.\n * @param string $vless        Whether the attribute is valueless. Use 'y' or 'n'.\n * @param string $element      The name of the element to which this attribute belongs.\n * @param array  $allowed_html The full list of allowed elements and attributes.\n * @return bool Whether or not the attribute is allowed.\n */\nfunction wp_kses_attr_check( &$name, &$value, &$whole, $vless, $element, $allowed_html ) {\n\t$allowed_attr = $allowed_html[ strtolower( $element ) ];\n\n\t$name_low = strtolower( $name );\n\tif ( ! isset( $allowed_attr[ $name_low ] ) || '' == $allowed_attr[ $name_low ] ) {\n\t\t/*\n\t\t * Allow `data-*` attributes.\n\t\t *\n\t\t * When specifying `$allowed_html`, the attribute name should be set as\n\t\t * `data-*` (not to be mixed with the HTML 4.0 `data` attribute, see\n\t\t * https://www.w3.org/TR/html40/struct/objects.html#adef-data).\n\t\t *\n\t\t * Note: the attribute name should only contain `A-Za-z0-9_-` chars,\n\t\t * double hyphens `--` are not accepted by WordPress.\n\t\t */\n\t\tif ( strpos( $name_low, 'data-' ) === 0 && ! empty( $allowed_attr['data-*'] ) && preg_match( '/^data(?:-[a-z0-9_]+)+$/', $name_low, $match ) ) {\n\t\t\t/*\n\t\t\t * Add the whole attribute name to the allowed attributes and set any restrictions\n\t\t\t * for the `data-*` attribute values for the current element.\n\t\t\t */\n\t\t\t$allowed_attr[ $match[0] ] = $allowed_attr['data-*'];\n\t\t} else {\n\t\t\t$name  = '';\n\t\t\t$value = '';\n\t\t\t$whole = '';\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif ( 'style' == $name_low ) {\n\t\t$new_value = safecss_filter_attr( $value );\n\n\t\tif ( empty( $new_value ) ) {\n\t\t\t$name  = '';\n\t\t\t$value = '';\n\t\t\t$whole = '';\n\t\t\treturn false;\n\t\t}\n\n\t\t$whole = str_replace( $value, $new_value, $whole );\n\t\t$value = $new_value;\n\t}\n\n\tif ( is_array( $allowed_attr[ $name_low ] ) ) {\n\t\t// there are some checks\n\t\tforeach ( $allowed_attr[ $name_low ] as $currkey => $currval ) {\n\t\t\tif ( ! wp_kses_check_attr_val( $value, $vless, $currkey, $currval ) ) {\n\t\t\t\t$name  = '';\n\t\t\t\t$value = '';\n\t\t\t\t$whole = '';\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n * Builds an attribute list from string containing attributes.\n *\n * This function does a lot of work. It parses an attribute list into an array\n * with attribute data, and tries to do the right thing even if it gets weird\n * input. It will add quotes around attribute values that don't have any quotes\n * or apostrophes around them, to make it easier to produce HTML code that will\n * conform to W3C's HTML specification. It will also remove bad URL protocols\n * from attribute values. It also reduces duplicate attributes by using the\n * attribute defined first (`foo='bar' foo='baz'` will result in `foo='bar'`).\n *\n * @since 1.0.0\n *\n * @param string   $attr              Attribute list from HTML element to closing HTML element tag.\n * @param string[] $allowed_protocols Array of allowed URL protocols.\n * @return array[] Array of attribute information after parsing.\n */\nfunction wp_kses_hair( $attr, $allowed_protocols ) {\n\t$attrarr  = array();\n\t$mode     = 0;\n\t$attrname = '';\n\t$uris     = wp_kses_uri_attributes();\n\n\t// Loop through the whole attribute list\n\n\twhile ( strlen( $attr ) != 0 ) {\n\t\t$working = 0; // Was the last operation successful?\n\n\t\tswitch ( $mode ) {\n\t\t\tcase 0:\n\t\t\t\tif ( preg_match( '/^([-a-zA-Z:]+)/', $attr, $match ) ) {\n\t\t\t\t\t$attrname = $match[1];\n\t\t\t\t\t$working  = 1;\n\t\t\t\t\t$mode     = 1;\n\t\t\t\t\t$attr     = preg_replace( '/^[-a-zA-Z:]+/', '', $attr );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\tif ( preg_match( '/^\\s*=\\s*/', $attr ) ) { // equals sign\n\t\t\t\t\t$working = 1;\n\t\t\t\t\t$mode    = 2;\n\t\t\t\t\t$attr    = preg_replace( '/^\\s*=\\s*/', '', $attr );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( preg_match( '/^\\s+/', $attr ) ) { // valueless\n\t\t\t\t\t$working = 1;\n\t\t\t\t\t$mode    = 0;\n\t\t\t\t\tif ( false === array_key_exists( $attrname, $attrarr ) ) {\n\t\t\t\t\t\t$attrarr[ $attrname ] = array(\n\t\t\t\t\t\t\t'name'  => $attrname,\n\t\t\t\t\t\t\t'value' => '',\n\t\t\t\t\t\t\t'whole' => $attrname,\n\t\t\t\t\t\t\t'vless' => 'y',\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t$attr = preg_replace( '/^\\s+/', '', $attr );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tif ( preg_match( '%^\"([^\"]*)\"(\\s+|/?$)%', $attr, $match ) ) {\n\t\t\t\t\t// \"value\"\n\t\t\t\t\t$thisval = $match[1];\n\t\t\t\t\tif ( in_array( strtolower( $attrname ), $uris ) ) {\n\t\t\t\t\t\t$thisval = wp_kses_bad_protocol( $thisval, $allowed_protocols );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( false === array_key_exists( $attrname, $attrarr ) ) {\n\t\t\t\t\t\t$attrarr[ $attrname ] = array(\n\t\t\t\t\t\t\t'name'  => $attrname,\n\t\t\t\t\t\t\t'value' => $thisval,\n\t\t\t\t\t\t\t'whole' => \"$attrname=\\\"$thisval\\\"\",\n\t\t\t\t\t\t\t'vless' => 'n',\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t$working = 1;\n\t\t\t\t\t$mode    = 0;\n\t\t\t\t\t$attr    = preg_replace( '/^\"[^\"]*\"(\\s+|$)/', '', $attr );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( preg_match( \"%^'([^']*)'(\\s+|/?$)%\", $attr, $match ) ) {\n\t\t\t\t\t// 'value'\n\t\t\t\t\t$thisval = $match[1];\n\t\t\t\t\tif ( in_array( strtolower( $attrname ), $uris ) ) {\n\t\t\t\t\t\t$thisval = wp_kses_bad_protocol( $thisval, $allowed_protocols );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( false === array_key_exists( $attrname, $attrarr ) ) {\n\t\t\t\t\t\t$attrarr[ $attrname ] = array(\n\t\t\t\t\t\t\t'name'  => $attrname,\n\t\t\t\t\t\t\t'value' => $thisval,\n\t\t\t\t\t\t\t'whole' => \"$attrname='$thisval'\",\n\t\t\t\t\t\t\t'vless' => 'n',\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t$working = 1;\n\t\t\t\t\t$mode    = 0;\n\t\t\t\t\t$attr    = preg_replace( \"/^'[^']*'(\\s+|$)/\", '', $attr );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( preg_match( \"%^([^\\s\\\"']+)(\\s+|/?$)%\", $attr, $match ) ) {\n\t\t\t\t\t// value\n\t\t\t\t\t$thisval = $match[1];\n\t\t\t\t\tif ( in_array( strtolower( $attrname ), $uris ) ) {\n\t\t\t\t\t\t$thisval = wp_kses_bad_protocol( $thisval, $allowed_protocols );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( false === array_key_exists( $attrname, $attrarr ) ) {\n\t\t\t\t\t\t$attrarr[ $attrname ] = array(\n\t\t\t\t\t\t\t'name'  => $attrname,\n\t\t\t\t\t\t\t'value' => $thisval,\n\t\t\t\t\t\t\t'whole' => \"$attrname=\\\"$thisval\\\"\",\n\t\t\t\t\t\t\t'vless' => 'n',\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t// We add quotes to conform to W3C's HTML spec.\n\t\t\t\t\t$working = 1;\n\t\t\t\t\t$mode    = 0;\n\t\t\t\t\t$attr    = preg_replace( \"%^[^\\s\\\"']+(\\s+|$)%\", '', $attr );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t} // switch\n\n\t\tif ( $working == 0 ) { // not well formed, remove and try again\n\t\t\t$attr = wp_kses_html_error( $attr );\n\t\t\t$mode = 0;\n\t\t}\n\t} // while\n\n\tif ( $mode == 1 && false === array_key_exists( $attrname, $attrarr ) ) {\n\t\t// special case, for when the attribute list ends with a valueless\n\t\t// attribute like \"selected\"\n\t\t$attrarr[ $attrname ] = array(\n\t\t\t'name'  => $attrname,\n\t\t\t'value' => '',\n\t\t\t'whole' => $attrname,\n\t\t\t'vless' => 'y',\n\t\t);\n\t}\n\n\treturn $attrarr;\n}\n\n/**\n * Finds all attributes of an HTML element.\n *\n * Does not modify input.  May return \"evil\" output.\n *\n * Based on `wp_kses_split2()` and `wp_kses_attr()`.\n *\n * @since 4.2.3\n *\n * @param string $element HTML element.\n * @return array|bool List of attributes found in the element. Returns false on failure.\n */\nfunction wp_kses_attr_parse( $element ) {\n\t$valid = preg_match( '%^(<\\s*)(/\\s*)?([a-zA-Z0-9]+\\s*)([^>]*)(>?)$%', $element, $matches );\n\tif ( 1 !== $valid ) {\n\t\treturn false;\n\t}\n\n\t$begin  = $matches[1];\n\t$slash  = $matches[2];\n\t$elname = $matches[3];\n\t$attr   = $matches[4];\n\t$end    = $matches[5];\n\n\tif ( '' !== $slash ) {\n\t\t// Closing elements do not get parsed.\n\t\treturn false;\n\t}\n\n\t// Is there a closing XHTML slash at the end of the attributes?\n\tif ( 1 === preg_match( '%\\s*/\\s*$%', $attr, $matches ) ) {\n\t\t$xhtml_slash = $matches[0];\n\t\t$attr        = substr( $attr, 0, -strlen( $xhtml_slash ) );\n\t} else {\n\t\t$xhtml_slash = '';\n\t}\n\n\t// Split it\n\t$attrarr = wp_kses_hair_parse( $attr );\n\tif ( false === $attrarr ) {\n\t\treturn false;\n\t}\n\n\t// Make sure all input is returned by adding front and back matter.\n\tarray_unshift( $attrarr, $begin . $slash . $elname );\n\tarray_push( $attrarr, $xhtml_slash . $end );\n\n\treturn $attrarr;\n}\n\n/**\n * Builds an attribute list from string containing attributes.\n *\n * Does not modify input.  May return \"evil\" output.\n * In case of unexpected input, returns false instead of stripping things.\n *\n * Based on `wp_kses_hair()` but does not return a multi-dimensional array.\n *\n * @since 4.2.3\n *\n * @param string $attr Attribute list from HTML element to closing HTML element tag.\n * @return array|bool List of attributes found in $attr. Returns false on failure.\n */\nfunction wp_kses_hair_parse( $attr ) {\n\tif ( '' === $attr ) {\n\t\treturn array();\n\t}\n\n\t// phpcs:disable Squiz.Strings.ConcatenationSpacing.PaddingFound -- don't remove regex indentation\n\t$regex =\n\t'(?:'\n\t.     '[-a-zA-Z:]+'   // Attribute name.\n\t. '|'\n\t.     '\\[\\[?[^\\[\\]]+\\]\\]?' // Shortcode in the name position implies unfiltered_html.\n\t. ')'\n\t. '(?:'               // Attribute value.\n\t.     '\\s*=\\s*'       // All values begin with '='\n\t.     '(?:'\n\t.         '\"[^\"]*\"'   // Double-quoted\n\t.     '|'\n\t.         \"'[^']*'\"   // Single-quoted\n\t.     '|'\n\t.         '[^\\s\"\\']+' // Non-quoted\n\t.         '(?:\\s|$)'  // Must have a space\n\t.     ')'\n\t. '|'\n\t.     '(?:\\s|$)'      // If attribute has no value, space is required.\n\t. ')'\n\t. '\\s*';              // Trailing space is optional except as mentioned above.\n\t// phpcs:enable\n\n\t// Although it is possible to reduce this procedure to a single regexp,\n\t// we must run that regexp twice to get exactly the expected result.\n\n\t$validation = \"%^($regex)+$%\";\n\t$extraction = \"%$regex%\";\n\n\tif ( 1 === preg_match( $validation, $attr ) ) {\n\t\tpreg_match_all( $extraction, $attr, $attrarr );\n\t\treturn $attrarr[0];\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/**\n * Performs different checks for attribute values.\n *\n * The currently implemented checks are \"maxlen\", \"minlen\", \"maxval\", \"minval\",\n * and \"valueless\".\n *\n * @since 1.0.0\n *\n * @param string $value      Attribute value.\n * @param string $vless      Whether the attribute is valueless. Use 'y' or 'n'.\n * @param string $checkname  What $checkvalue is checking for.\n * @param mixed  $checkvalue What constraint the value should pass.\n * @return bool Whether check passes.\n */\nfunction wp_kses_check_attr_val( $value, $vless, $checkname, $checkvalue ) {\n\t$ok = true;\n\n\tswitch ( strtolower( $checkname ) ) {\n\t\tcase 'maxlen':\n\t\t\t// The maxlen check makes sure that the attribute value has a length not\n\t\t\t// greater than the given value. This can be used to avoid Buffer Overflows\n\t\t\t// in WWW clients and various Internet servers.\n\n\t\t\tif ( strlen( $value ) > $checkvalue ) {\n\t\t\t\t$ok = false;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'minlen':\n\t\t\t// The minlen check makes sure that the attribute value has a length not\n\t\t\t// smaller than the given value.\n\n\t\t\tif ( strlen( $value ) < $checkvalue ) {\n\t\t\t\t$ok = false;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'maxval':\n\t\t\t// The maxval check does two things: it checks that the attribute value is\n\t\t\t// an integer from 0 and up, without an excessive amount of zeroes or\n\t\t\t// whitespace (to avoid Buffer Overflows). It also checks that the attribute\n\t\t\t// value is not greater than the given value.\n\t\t\t// This check can be used to avoid Denial of Service attacks.\n\n\t\t\tif ( ! preg_match( '/^\\s{0,6}[0-9]{1,6}\\s{0,6}$/', $value ) ) {\n\t\t\t\t$ok = false;\n\t\t\t}\n\t\t\tif ( $value > $checkvalue ) {\n\t\t\t\t$ok = false;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'minval':\n\t\t\t// The minval check makes sure that the attribute value is a positive integer,\n\t\t\t// and that it is not smaller than the given value.\n\n\t\t\tif ( ! preg_match( '/^\\s{0,6}[0-9]{1,6}\\s{0,6}$/', $value ) ) {\n\t\t\t\t$ok = false;\n\t\t\t}\n\t\t\tif ( $value < $checkvalue ) {\n\t\t\t\t$ok = false;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'valueless':\n\t\t\t// The valueless check makes sure if the attribute has a value\n\t\t\t// (like `<a href=\"blah\">`) or not (`<option selected>`). If the given value\n\t\t\t// is a \"y\" or a \"Y\", the attribute must not have a value.\n\t\t\t// If the given value is an \"n\" or an \"N\", the attribute must have a value.\n\n\t\t\tif ( strtolower( $checkvalue ) != $vless ) {\n\t\t\t\t$ok = false;\n\t\t\t}\n\t\t\tbreak;\n\t} // switch\n\n\treturn $ok;\n}\n\n/**\n * Sanitizes a string and removed disallowed URL protocols.\n *\n * This function removes all non-allowed protocols from the beginning of the\n * string. It ignores whitespace and the case of the letters, and it does\n * understand HTML entities. It does its work recursively, so it won't be\n * fooled by a string like `javascript:javascript:alert(57)`.\n *\n * @since 1.0.0\n *\n * @param string   $string            Content to filter bad protocols from.\n * @param string[] $allowed_protocols Array of allowed URL protocols.\n * @return string Filtered content.\n */\nfunction wp_kses_bad_protocol( $string, $allowed_protocols ) {\n\t$string     = wp_kses_no_null( $string );\n\t$iterations = 0;\n\n\tdo {\n\t\t$original_string = $string;\n\t\t$string          = wp_kses_bad_protocol_once( $string, $allowed_protocols );\n\t} while ( $original_string != $string && ++$iterations < 6 );\n\n\tif ( $original_string != $string ) {\n\t\treturn '';\n\t}\n\n\treturn $string;\n}\n\n/**\n * Removes any invalid control characters in a text string.\n *\n * Also removes any instance of the `\\0` string.\n *\n * @since 1.0.0\n *\n * @param string $string  Content to filter null characters from.\n * @param array  $options Set 'slash_zero' => 'keep' when '\\0' is allowed. Default is 'remove'.\n * @return string Filtered content.\n */\nfunction wp_kses_no_null( $string, $options = null ) {\n\tif ( ! isset( $options['slash_zero'] ) ) {\n\t\t$options = array( 'slash_zero' => 'remove' );\n\t}\n\n\t$string = preg_replace( '/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F]/', '', $string );\n\tif ( 'remove' == $options['slash_zero'] ) {\n\t\t$string = preg_replace( '/\\\\\\\\+0+/', '', $string );\n\t}\n\n\treturn $string;\n}\n\n/**\n * Strips slashes from in front of quotes.\n *\n * This function changes the character sequence `\\\"` to just `\"`. It leaves all other\n * slashes alone. The quoting from `preg_replace(//e)` requires this.\n *\n * @since 1.0.0\n *\n * @param string $string String to strip slashes from.\n * @return string Fixed string with quoted slashes.\n */\nfunction wp_kses_stripslashes( $string ) {\n\treturn preg_replace( '%\\\\\\\\\"%', '\"', $string );\n}\n\n/**\n * Converts the keys of an array to lowercase.\n *\n * @since 1.0.0\n *\n * @param array $inarray Unfiltered array.\n * @return array Fixed array with all lowercase keys.\n */\nfunction wp_kses_array_lc( $inarray ) {\n\t$outarray = array();\n\n\tforeach ( (array) $inarray as $inkey => $inval ) {\n\t\t$outkey              = strtolower( $inkey );\n\t\t$outarray[ $outkey ] = array();\n\n\t\tforeach ( (array) $inval as $inkey2 => $inval2 ) {\n\t\t\t$outkey2                         = strtolower( $inkey2 );\n\t\t\t$outarray[ $outkey ][ $outkey2 ] = $inval2;\n\t\t}\n\t}\n\n\treturn $outarray;\n}\n\n/**\n * Handles parsing errors in `wp_kses_hair()`.\n *\n * The general plan is to remove everything to and including some whitespace,\n * but it deals with quotes and apostrophes as well.\n *\n * @since 1.0.0\n *\n * @param string $string\n * @return string\n */\nfunction wp_kses_html_error( $string ) {\n\treturn preg_replace( '/^(\"[^\"]*(\"|$)|\\'[^\\']*(\\'|$)|\\S)*\\s*/', '', $string );\n}\n\n/**\n * Sanitizes content from bad protocols and other characters.\n *\n * This function searches for URL protocols at the beginning of the string, while\n * handling whitespace and HTML entities.\n *\n * @since 1.0.0\n *\n * @param string   $string            Content to check for bad protocols.\n * @param string[] $allowed_protocols Array of allowed URL protocols.\n * @return string Sanitized content.\n */\nfunction wp_kses_bad_protocol_once( $string, $allowed_protocols, $count = 1 ) {\n\t$string  = preg_replace( '/(&#0*58(?![;0-9])|&#x0*3a(?![;a-f0-9]))/i', '$1;', $string );\n\t$string2 = preg_split( '/:|&#0*58;|&#x0*3a;/i', $string, 2 );\n\tif ( isset( $string2[1] ) && ! preg_match( '%/\\?%', $string2[0] ) ) {\n\t\t$string   = trim( $string2[1] );\n\t\t$protocol = wp_kses_bad_protocol_once2( $string2[0], $allowed_protocols );\n\t\tif ( 'feed:' == $protocol ) {\n\t\t\tif ( $count > 2 ) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\t$string = wp_kses_bad_protocol_once( $string, $allowed_protocols, ++$count );\n\t\t\tif ( empty( $string ) ) {\n\t\t\t\treturn $string;\n\t\t\t}\n\t\t}\n\t\t$string = $protocol . $string;\n\t}\n\n\treturn $string;\n}\n\n/**\n * Callback for `wp_kses_bad_protocol_once()` regular expression.\n *\n * This function processes URL protocols, checks to see if they're in the\n * whitelist or not, and returns different data depending on the answer.\n *\n * @access private\n * @ignore\n * @since 1.0.0\n *\n * @param string   $string            URI scheme to check against the whitelist.\n * @param string[] $allowed_protocols Array of allowed URL protocols.\n * @return string Sanitized content.\n */\nfunction wp_kses_bad_protocol_once2( $string, $allowed_protocols ) {\n\t$string2 = wp_kses_decode_entities( $string );\n\t$string2 = preg_replace( '/\\s/', '', $string2 );\n\t$string2 = wp_kses_no_null( $string2 );\n\t$string2 = strtolower( $string2 );\n\n\t$allowed = false;\n\tforeach ( (array) $allowed_protocols as $one_protocol ) {\n\t\tif ( strtolower( $one_protocol ) == $string2 ) {\n\t\t\t$allowed = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif ( $allowed ) {\n\t\treturn \"$string2:\";\n\t} else {\n\t\treturn '';\n\t}\n}\n\n/**\n * Converts and fixes HTML entities.\n *\n * This function normalizes HTML entities. It will convert `AT&T` to the correct\n * `AT&amp;T`, `&#00058;` to `&#58;`, `&#XYZZY;` to `&amp;#XYZZY;` and so on.\n *\n * @since 1.0.0\n *\n * @param string $string Content to normalize entities.\n * @return string Content with normalized entities.\n */\nfunction wp_kses_normalize_entities( $string ) {\n\t// Disarm all entities by converting & to &amp;\n\t$string = str_replace( '&', '&amp;', $string );\n\n\t// Change back the allowed entities in our entity whitelist\n\t$string = preg_replace_callback( '/&amp;([A-Za-z]{2,8}[0-9]{0,2});/', 'wp_kses_named_entities', $string );\n\t$string = preg_replace_callback( '/&amp;#(0*[0-9]{1,7});/', 'wp_kses_normalize_entities2', $string );\n\t$string = preg_replace_callback( '/&amp;#[Xx](0*[0-9A-Fa-f]{1,6});/', 'wp_kses_normalize_entities3', $string );\n\n\treturn $string;\n}\n\n/**\n * Callback for `wp_kses_normalize_entities()` regular expression.\n *\n * This function only accepts valid named entity references, which are finite,\n * case-sensitive, and highly scrutinized by HTML and XML validators.\n *\n * @since 3.0.0\n *\n * @global array $allowedentitynames\n *\n * @param array $matches preg_replace_callback() matches array.\n * @return string Correctly encoded entity.\n */\nfunction wp_kses_named_entities( $matches ) {\n\tglobal $allowedentitynames;\n\n\tif ( empty( $matches[1] ) ) {\n\t\treturn '';\n\t}\n\n\t$i = $matches[1];\n\treturn ( ! in_array( $i, $allowedentitynames ) ) ? \"&amp;$i;\" : \"&$i;\";\n}\n\n/**\n * Callback for `wp_kses_normalize_entities()` regular expression.\n *\n * This function helps `wp_kses_normalize_entities()` to only accept 16-bit\n * values and nothing more for `&#number;` entities.\n *\n * @access private\n * @ignore\n * @since 1.0.0\n *\n * @param array $matches `preg_replace_callback()` matches array.\n * @return string Correctly encoded entity.\n */\nfunction wp_kses_normalize_entities2( $matches ) {\n\tif ( empty( $matches[1] ) ) {\n\t\treturn '';\n\t}\n\n\t$i = $matches[1];\n\tif ( valid_unicode( $i ) ) {\n\t\t$i = str_pad( ltrim( $i, '0' ), 3, '0', STR_PAD_LEFT );\n\t\t$i = \"&#$i;\";\n\t} else {\n\t\t$i = \"&amp;#$i;\";\n\t}\n\n\treturn $i;\n}\n\n/**\n * Callback for `wp_kses_normalize_entities()` for regular expression.\n *\n * This function helps `wp_kses_normalize_entities()` to only accept valid Unicode\n * numeric entities in hex form.\n *\n * @since 2.7.0\n * @access private\n * @ignore\n *\n * @param array $matches `preg_replace_callback()` matches array.\n * @return string Correctly encoded entity.\n */\nfunction wp_kses_normalize_entities3( $matches ) {\n\tif ( empty( $matches[1] ) ) {\n\t\treturn '';\n\t}\n\n\t$hexchars = $matches[1];\n\treturn ( ! valid_unicode( hexdec( $hexchars ) ) ) ? \"&amp;#x$hexchars;\" : '&#x' . ltrim( $hexchars, '0' ) . ';';\n}\n\n/**\n * Determines if a Unicode codepoint is valid.\n *\n * @since 2.7.0\n *\n * @param int $i Unicode codepoint.\n * @return bool Whether or not the codepoint is a valid Unicode codepoint.\n */\nfunction valid_unicode( $i ) {\n\treturn ( $i == 0x9 || $i == 0xa || $i == 0xd ||\n\t\t\t( $i >= 0x20 && $i <= 0xd7ff ) ||\n\t\t\t( $i >= 0xe000 && $i <= 0xfffd ) ||\n\t\t\t( $i >= 0x10000 && $i <= 0x10ffff ) );\n}\n\n/**\n * Converts all numeric HTML entities to their named counterparts.\n *\n * This function decodes numeric HTML entities (`&#65;` and `&#x41;`).\n * It doesn't do anything with named entities like `&auml;`, but we don't\n * need them in the URL protocol whitelisting system anyway.\n *\n * @since 1.0.0\n *\n * @param string $string Content to change entities.\n * @return string Content after decoded entities.\n */\nfunction wp_kses_decode_entities( $string ) {\n\t$string = preg_replace_callback( '/&#([0-9]+);/', '_wp_kses_decode_entities_chr', $string );\n\t$string = preg_replace_callback( '/&#[Xx]([0-9A-Fa-f]+);/', '_wp_kses_decode_entities_chr_hexdec', $string );\n\n\treturn $string;\n}\n\n/**\n * Regex callback for `wp_kses_decode_entities()`.\n *\n * @since 2.9.0\n * @access private\n * @ignore\n *\n * @param array $match preg match\n * @return string\n */\nfunction _wp_kses_decode_entities_chr( $match ) {\n\treturn chr( $match[1] );\n}\n\n/**\n * Regex callback for `wp_kses_decode_entities()`.\n *\n * @since 2.9.0\n * @access private\n * @ignore\n *\n * @param array $match preg match\n * @return string\n */\nfunction _wp_kses_decode_entities_chr_hexdec( $match ) {\n\treturn chr( hexdec( $match[1] ) );\n}\n\n/**\n * Sanitize content with allowed HTML KSES rules.\n *\n * This function expects slashed data.\n *\n * @since 1.0.0\n *\n * @param string $data Content to filter, expected to be escaped with slashes.\n * @return string Filtered content.\n */\nfunction wp_filter_kses( $data ) {\n\treturn addslashes( wp_kses( stripslashes( $data ), current_filter() ) );\n}\n\n/**\n * Sanitize content with allowed HTML KSES rules.\n *\n * This function expects unslashed data.\n *\n * @since 2.9.0\n *\n * @param string $data Content to filter, expected to not be escaped.\n * @return string Filtered content.\n */\nfunction wp_kses_data( $data ) {\n\treturn wp_kses( $data, current_filter() );\n}\n\n/**\n * Sanitizes content for allowed HTML tags for post content.\n *\n * Post content refers to the page contents of the 'post' type and not `$_POST`\n * data from forms.\n *\n * This function expects slashed data.\n *\n * @since 2.0.0\n *\n * @param string $data Post content to filter, expected to be escaped with slashes.\n * @return string Filtered post content with allowed HTML tags and attributes intact.\n */\nfunction wp_filter_post_kses( $data ) {\n\treturn addslashes( wp_kses( stripslashes( $data ), 'post' ) );\n}\n\n/**\n * Sanitizes content for allowed HTML tags for post content.\n *\n * Post content refers to the page contents of the 'post' type and not `$_POST`\n * data from forms.\n *\n * This function expects unslashed data.\n *\n * @since 2.9.0\n *\n * @param string $data Post content to filter.\n * @return string Filtered post content with allowed HTML tags and attributes intact.\n */\nfunction wp_kses_post( $data ) {\n\treturn wp_kses( $data, 'post' );\n}\n\n/**\n * Navigates through an array, object, or scalar, and sanitizes content for\n * allowed HTML tags for post content.\n *\n * @since 4.4.2\n *\n * @see map_deep()\n *\n * @param mixed $data The array, object, or scalar value to inspect.\n * @return mixed The filtered content.\n */\nfunction wp_kses_post_deep( $data ) {\n\treturn map_deep( $data, 'wp_kses_post' );\n}\n\n/**\n * Strips all HTML from a text string.\n *\n * This function expects slashed data.\n *\n * @since 2.1.0\n *\n * @param string $data Content to strip all HTML from.\n * @return string Filtered content without any HTML.\n */\nfunction wp_filter_nohtml_kses( $data ) {\n\treturn addslashes( wp_kses( stripslashes( $data ), 'strip' ) );\n}\n\n/**\n * Adds all KSES input form content filters.\n *\n * All hooks have default priority. The `wp_filter_kses()` function is added to\n * the 'pre_comment_content' and 'title_save_pre' hooks.\n *\n * The `wp_filter_post_kses()` function is added to the 'content_save_pre',\n * 'excerpt_save_pre', and 'content_filtered_save_pre' hooks.\n *\n * @since 2.0.0\n */\nfunction kses_init_filters() {\n\t// Normal filtering\n\tadd_filter( 'title_save_pre', 'wp_filter_kses' );\n\n\t// Comment filtering\n\tif ( current_user_can( 'unfiltered_html' ) ) {\n\t\tadd_filter( 'pre_comment_content', 'wp_filter_post_kses' );\n\t} else {\n\t\tadd_filter( 'pre_comment_content', 'wp_filter_kses' );\n\t}\n\n\t// Post filtering\n\tadd_filter( 'content_save_pre', 'wp_filter_post_kses' );\n\tadd_filter( 'excerpt_save_pre', 'wp_filter_post_kses' );\n\tadd_filter( 'content_filtered_save_pre', 'wp_filter_post_kses' );\n}\n\n/**\n * Removes all KSES input form content filters.\n *\n * A quick procedural method to removing all of the filters that KSES uses for\n * content in WordPress Loop.\n *\n * Does not remove the `kses_init()` function from {@see 'init'} hook (priority is\n * default). Also does not remove `kses_init()` function from {@see 'set_current_user'}\n * hook (priority is also default).\n *\n * @since 2.0.6\n */\nfunction kses_remove_filters() {\n\t// Normal filtering\n\tremove_filter( 'title_save_pre', 'wp_filter_kses' );\n\n\t// Comment filtering\n\tremove_filter( 'pre_comment_content', 'wp_filter_post_kses' );\n\tremove_filter( 'pre_comment_content', 'wp_filter_kses' );\n\n\t// Post filtering\n\tremove_filter( 'content_save_pre', 'wp_filter_post_kses' );\n\tremove_filter( 'excerpt_save_pre', 'wp_filter_post_kses' );\n\tremove_filter( 'content_filtered_save_pre', 'wp_filter_post_kses' );\n}\n\n/**\n * Sets up most of the KSES filters for input form content.\n *\n * First removes all of the KSES filters in case the current user does not need\n * to have KSES filter the content. If the user does not have `unfiltered_html`\n * capability, then KSES filters are added.\n *\n * @since 2.0.0\n */\nfunction kses_init() {\n\tkses_remove_filters();\n\n\tif ( ! current_user_can( 'unfiltered_html' ) ) {\n\t\tkses_init_filters();\n\t}\n}\n\n/**\n * Filters an inline style attribute and removes disallowed rules.\n *\n * @since 2.8.1\n *\n * @param string $css        A string of CSS rules.\n * @param string $deprecated Not used.\n * @return string Filtered string of CSS rules.\n */\nfunction safecss_filter_attr( $css, $deprecated = '' ) {\n\tif ( ! empty( $deprecated ) ) {\n\t\t_deprecated_argument( __FUNCTION__, '2.8.1' ); // Never implemented\n\t}\n\n\t$css = wp_kses_no_null( $css );\n\t$css = str_replace( array( \"\\n\", \"\\r\", \"\\t\" ), '', $css );\n\n\t$allowed_protocols = wp_allowed_protocols();\n\n\t$css_array = explode( ';', trim( $css ) );\n\n\t/**\n\t * Filters list of allowed CSS attributes.\n\t *\n\t * @since 2.8.1\n\t * @since 4.4.0 Added support for `min-height`, `max-height`, `min-width`, and `max-width`.\n\t * @since 4.6.0 Added support for `list-style-type`.\n\t * @since 5.0.0 Added support for `background-image`.\n\t * @since 5.1.0 Added support for `text-transform`.\n\t * @since 5.2.0 Added support for `background-position` and `grid-template-columns`\n\t * @since 5.3.0 Added support for `grid`, `flex` and `column` layout properties.\n\t *              Extend `background-*` support of individual properties.\n\t * @since 5.3.1 Added support for gradient backgrounds.\n\t *\n\t * @param string[] $attr Array of allowed CSS attributes.\n\t */\n\t$allowed_attr = apply_filters(\n\t\t'safe_style_css',\n\t\tarray(\n\t\t\t'background',\n\t\t\t'background-color',\n\t\t\t'background-image',\n\t\t\t'background-position',\n\t\t\t'background-size',\n\t\t\t'background-attachment',\n\t\t\t'background-blend-mode',\n\n\t\t\t'border',\n\t\t\t'border-radius',\n\t\t\t'border-width',\n\t\t\t'border-color',\n\t\t\t'border-style',\n\t\t\t'border-right',\n\t\t\t'border-right-color',\n\t\t\t'border-right-style',\n\t\t\t'border-right-width',\n\t\t\t'border-bottom',\n\t\t\t'border-bottom-color',\n\t\t\t'border-bottom-style',\n\t\t\t'border-bottom-width',\n\t\t\t'border-left',\n\t\t\t'border-left-color',\n\t\t\t'border-left-style',\n\t\t\t'border-left-width',\n\t\t\t'border-top',\n\t\t\t'border-top-color',\n\t\t\t'border-top-style',\n\t\t\t'border-top-width',\n\n\t\t\t'border-spacing',\n\t\t\t'border-collapse',\n\t\t\t'caption-side',\n\n\t\t\t'columns',\n\t\t\t'column-count',\n\t\t\t'column-fill',\n\t\t\t'column-gap',\n\t\t\t'column-rule',\n\t\t\t'column-span',\n\t\t\t'column-width',\n\n\t\t\t'color',\n\t\t\t'font',\n\t\t\t'font-family',\n\t\t\t'font-size',\n\t\t\t'font-style',\n\t\t\t'font-variant',\n\t\t\t'font-weight',\n\t\t\t'letter-spacing',\n\t\t\t'line-height',\n\t\t\t'text-align',\n\t\t\t'text-decoration',\n\t\t\t'text-indent',\n\t\t\t'text-transform',\n\n\t\t\t'height',\n\t\t\t'min-height',\n\t\t\t'max-height',\n\n\t\t\t'width',\n\t\t\t'min-width',\n\t\t\t'max-width',\n\n\t\t\t'margin',\n\t\t\t'margin-right',\n\t\t\t'margin-bottom',\n\t\t\t'margin-left',\n\t\t\t'margin-top',\n\n\t\t\t'padding',\n\t\t\t'padding-right',\n\t\t\t'padding-bottom',\n\t\t\t'padding-left',\n\t\t\t'padding-top',\n\n\t\t\t'flex',\n\t\t\t'flex-basis',\n\t\t\t'flex-direction',\n\t\t\t'flex-flow',\n\t\t\t'flex-grow',\n\t\t\t'flex-shrink',\n\n\t\t\t'grid-template-columns',\n\t\t\t'grid-auto-columns',\n\t\t\t'grid-column-start',\n\t\t\t'grid-column-end',\n\t\t\t'grid-column-gap',\n\t\t\t'grid-template-rows',\n\t\t\t'grid-auto-rows',\n\t\t\t'grid-row-start',\n\t\t\t'grid-row-end',\n\t\t\t'grid-row-gap',\n\t\t\t'grid-gap',\n\n\t\t\t'justify-content',\n\t\t\t'justify-items',\n\t\t\t'justify-self',\n\t\t\t'align-content',\n\t\t\t'align-items',\n\t\t\t'align-self',\n\n\t\t\t'clear',\n\t\t\t'cursor',\n\t\t\t'direction',\n\t\t\t'float',\n\t\t\t'overflow',\n\t\t\t'vertical-align',\n\t\t\t'list-style-type',\n\t\t)\n\t);\n\n\t/*\n\t * CSS attributes that accept URL data types.\n\t *\n\t * This is in accordance to the CSS spec and unrelated to\n\t * the sub-set of supported attributes above.\n\t *\n\t * See: https://developer.mozilla.org/en-US/docs/Web/CSS/url\n\t */\n\t$css_url_data_types = array(\n\t\t'background',\n\t\t'background-image',\n\n\t\t'cursor',\n\n\t\t'list-style',\n\t\t'list-style-image',\n\t);\n\n\t/*\n\t * CSS attributes that accept gradient data types.\n\t *\n\t */\n\t$css_gradient_data_types = array(\n\t\t'background',\n\t\t'background-image',\n\t);\n\n\tif ( empty( $allowed_attr ) ) {\n\t\treturn $css;\n\t}\n\n\t$css = '';\n\tforeach ( $css_array as $css_item ) {\n\t\tif ( $css_item == '' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t$css_item        = trim( $css_item );\n\t\t$css_test_string = $css_item;\n\t\t$found           = false;\n\t\t$url_attr        = false;\n\t\t$gradient_attr   = false;\n\n\t\tif ( strpos( $css_item, ':' ) === false ) {\n\t\t\t$found = true;\n\t\t} else {\n\t\t\t$parts        = explode( ':', $css_item, 2 );\n\t\t\t$css_selector = trim( $parts[0] );\n\n\t\t\tif ( in_array( $css_selector, $allowed_attr, true ) ) {\n\t\t\t\t$found         = true;\n\t\t\t\t$url_attr      = in_array( $css_selector, $css_url_data_types, true );\n\t\t\t\t$gradient_attr = in_array( $css_selector, $css_gradient_data_types, true );\n\t\t\t}\n\t\t}\n\n\t\tif ( $found && $url_attr ) {\n\t\t\t// Simplified: matches the sequence `url(*)`.\n\t\t\tpreg_match_all( '/url\\([^)]+\\)/', $parts[1], $url_matches );\n\n\t\t\tforeach ( $url_matches[0] as $url_match ) {\n\t\t\t\t// Clean up the URL from each of the matches above.\n\t\t\t\tpreg_match( '/^url\\(\\s*([\\'\\\"]?)(.*)(\\g1)\\s*\\)$/', $url_match, $url_pieces );\n\n\t\t\t\tif ( empty( $url_pieces[2] ) ) {\n\t\t\t\t\t$found = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$url = trim( $url_pieces[2] );\n\n\t\t\t\tif ( empty( $url ) || $url !== wp_kses_bad_protocol( $url, $allowed_protocols ) ) {\n\t\t\t\t\t$found = false;\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t// Remove the whole `url(*)` bit that was matched above from the CSS.\n\t\t\t\t\t$css_test_string = str_replace( $url_match, '', $css_test_string );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( $found && $gradient_attr ) {\n\t\t\t$css_value = trim( $parts[1] );\n\t\t\tif ( preg_match( '/^(repeating-)?(linear|radial|conic)-gradient\\(([^()]|rgb[a]?\\([^()]*\\))*\\)$/', $css_value ) ) {\n\t\t\t\t// Remove the whole `gradient` bit that was matched above from the CSS.\n\t\t\t\t$css_test_string = str_replace( $css_value, '', $css_test_string );\n\t\t\t}\n\t\t}\n\n\t\t// Remove any CSS containing containing \\ ( & } = or comments, except for url() useage checked above.\n\t\tif ( $found && ! preg_match( '%[\\\\\\(&=}]|/\\*%', $css_test_string ) ) {\n\t\t\tif ( $css != '' ) {\n\t\t\t\t$css .= ';';\n\t\t\t}\n\n\t\t\t$css .= $css_item;\n\t\t}\n\t}\n\n\treturn $css;\n}\n\n/**\n * Helper function to add global attributes to a tag in the allowed html list.\n *\n * @since 3.5.0\n * @since 5.0.0 Add support for `data-*` wildcard attributes.\n * @access private\n * @ignore\n *\n * @param array $value An array of attributes.\n * @return array The array of attributes with global attributes added.\n */\nfunction _wp_add_global_attributes( $value ) {\n\t$global_attributes = array(\n\t\t'aria-describedby' => true,\n\t\t'aria-details'     => true,\n\t\t'aria-label'       => true,\n\t\t'aria-labelledby'  => true,\n\t\t'aria-hidden'      => true,\n\t\t'class'            => true,\n\t\t'id'               => true,\n\t\t'style'            => true,\n\t\t'title'            => true,\n\t\t'role'             => true,\n\t\t'data-*'           => true,\n\t);\n\n\tif ( true === $value ) {\n\t\t$value = array();\n\t}\n\n\tif ( is_array( $value ) ) {\n\t\treturn array_merge( $value, $global_attributes );\n\t}\n\n\treturn $value;\n}\n", "<?php\n/**\n * Some simple test cases for KSES post content filtering\n *\n * @group formatting\n * @group kses\n */\nclass Tests_Kses extends WP_UnitTestCase {\n\n\t/**\n\t * @ticket 20210\n\t */\n\tfunction test_wp_filter_post_kses_address() {\n\t\tglobal $allowedposttags;\n\n\t\t$attributes = array(\n\t\t\t'class' => 'classname',\n\t\t\t'id'    => 'id',\n\t\t\t'style' => 'color: red;',\n\t\t\t'style' => 'color: red',\n\t\t\t'style' => 'color: red; text-align:center',\n\t\t\t'style' => 'color: red; text-align:center;',\n\t\t\t'title' => 'title',\n\t\t);\n\n\t\tforeach ( $attributes as $name => $value ) {\n\t\t\t$string        = \"<address $name='$value'>1 WordPress Avenue, The Internet.</address>\";\n\t\t\t$expect_string = \"<address $name='\" . str_replace( '; ', ';', trim( $value, ';' ) ) . \"'>1 WordPress Avenue, The Internet.</address>\";\n\t\t\t$this->assertEquals( $expect_string, wp_kses( $string, $allowedposttags ) );\n\t\t}\n\t}\n\n\t/**\n\t * @ticket 20210\n\t */\n\tfunction test_wp_filter_post_kses_a() {\n\t\tglobal $allowedposttags;\n\n\t\t$attributes = array(\n\t\t\t'class'    => 'classname',\n\t\t\t'id'       => 'id',\n\t\t\t'style'    => 'color: red;',\n\t\t\t'title'    => 'title',\n\t\t\t'href'     => 'http://example.com',\n\t\t\t'rel'      => 'related',\n\t\t\t'rev'      => 'revision',\n\t\t\t'name'     => 'name',\n\t\t\t'target'   => '_blank',\n\t\t\t'download' => '',\n\t\t);\n\n\t\tforeach ( $attributes as $name => $value ) {\n\t\t\tif ( $value ) {\n\t\t\t\t$attr          = \"$name='$value'\";\n\t\t\t\t$expected_attr = \"$name='\" . trim( $value, ';' ) . \"'\";\n\t\t\t} else {\n\t\t\t\t$attr          = $name;\n\t\t\t\t$expected_attr = $name;\n\t\t\t}\n\t\t\t$string        = \"<a $attr>I link this</a>\";\n\t\t\t$expect_string = \"<a $expected_attr>I link this</a>\";\n\t\t\t$this->assertEquals( $expect_string, wp_kses( $string, $allowedposttags ) );\n\t\t}\n\t}\n\n\t/**\n\t * @ticket 20210\n\t */\n\tfunction test_wp_filter_post_kses_abbr() {\n\t\tglobal $allowedposttags;\n\n\t\t$attributes = array(\n\t\t\t'class' => 'classname',\n\t\t\t'id'    => 'id',\n\t\t\t'style' => 'color: red;',\n\t\t\t'title' => 'title',\n\t\t);\n\n\t\tforeach ( $attributes as $name => $value ) {\n\t\t\t$string        = \"<abbr $name='$value'>WP</abbr>\";\n\t\t\t$expect_string = \"<abbr $name='\" . trim( $value, ';' ) . \"'>WP</abbr>\";\n\t\t\t$this->assertEquals( $expect_string, wp_kses( $string, $allowedposttags ) );\n\t\t}\n\t}\n\n\tfunction test_feed_links() {\n\t\tglobal $allowedposttags;\n\n\t\t$content = <<<EOF\n<a href=\"feed:javascript:alert(1)\">CLICK ME</a>\n<a href=\"feed:javascript:feed:alert(1)\">CLICK ME</a>\n<a href=\"feed:feed:javascript:alert(1)\">CLICK ME</a>\n<a href=\"javascript:feed:alert(1)\">CLICK ME</a>\n<a href=\"javascript:feed:javascript:alert(1)\">CLICK ME</a>\n<a href=\"feed:feed:feed:javascript:alert(1)\">CLICK ME</a>\n<a href=\"feed:feed:feed:feed:javascript:alert(1)\">CLICK ME</a>\n<a href=\"feed:feed:feed:feed:feed:javascript:alert(1)\">CLICK ME</a>\n<a href=\"feed:javascript:feed:javascript:feed:javascript:alert(1)\">CLICK ME</a>\n<a href=\"feed:javascript:feed:javascript:feed:javascript:feed:javascript:feed:javascript:alert(1)\">CLICK ME</a>\n<a href=\"feed:feed:feed:http:alert(1)\">CLICK ME</a>\nEOF;\n\n\t\t$expected = <<<EOF\n<a href=\"feed:alert(1)\">CLICK ME</a>\n<a href=\"feed:feed:alert(1)\">CLICK ME</a>\n<a href=\"feed:feed:alert(1)\">CLICK ME</a>\n<a href=\"feed:alert(1)\">CLICK ME</a>\n<a href=\"feed:alert(1)\">CLICK ME</a>\n<a href=\"\">CLICK ME</a>\n<a href=\"\">CLICK ME</a>\n<a href=\"\">CLICK ME</a>\n<a href=\"\">CLICK ME</a>\n<a href=\"\">CLICK ME</a>\n<a href=\"\">CLICK ME</a>\nEOF;\n\n\t\t$this->assertEquals( $expected, wp_kses( $content, $allowedposttags ) );\n\t}\n\n\tfunction test_wp_kses_bad_protocol() {\n\t\t$bad = array(\n\t\t\t'dummy:alert(1)',\n\t\t\t'javascript:alert(1)',\n\t\t\t'JaVaScRiPt:alert(1)',\n\t\t\t'javascript:alert(1);',\n\t\t\t'javascript&#58;alert(1);',\n\t\t\t'javascript&#0058;alert(1);',\n\t\t\t'javascript&#0000058alert(1);',\n\t\t\t'javascript&#x3A;alert(1);',\n\t\t\t'javascript&#X3A;alert(1);',\n\t\t\t'javascript&#X3a;alert(1);',\n\t\t\t'javascript&#x3a;alert(1);',\n\t\t\t'javascript&#x003a;alert(1);',\n\t\t\t'&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29',\n\t\t\t'jav\tascript:alert(1);',\n\t\t\t'jav&#x09;ascript:alert(1);',\n\t\t\t'jav&#x0A;ascript:alert(1);',\n\t\t\t'jav&#x0D;ascript:alert(1);',\n\t\t\t' &#14;  javascript:alert(1);',\n\t\t\t'javascript:javascript:alert(1);',\n\t\t\t'javascript&#58;javascript:alert(1);',\n\t\t\t'javascript&#0000058javascript:alert(1);',\n\t\t\t'javascript:javascript&#58;alert(1);',\n\t\t\t'javascript:javascript&#0000058alert(1);',\n\t\t\t'javascript&#0000058alert(1)//?:',\n\t\t\t'feed:javascript:alert(1)',\n\t\t\t'feed:javascript:feed:javascript:feed:javascript:alert(1)',\n\t\t\t'javascript&#58alert(1)',\n\t\t\t'javascript&#x3ax=1;alert(1)',\n\t\t);\n\t\tforeach ( $bad as $k => $x ) {\n\t\t\t$result = wp_kses_bad_protocol( wp_kses_normalize_entities( $x ), wp_allowed_protocols() );\n\t\t\tif ( ! empty( $result ) && 'alert(1);' !== $result && 'alert(1)' !== $result ) {\n\t\t\t\tswitch ( $k ) {\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\t$this->assertEquals( 'javascript&amp;#0000058alert(1);', $result );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 12:\n\t\t\t\t\t\t$this->assertEquals( str_replace( '&', '&amp;', $x ), $result );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 22:\n\t\t\t\t\t\t$this->assertEquals( 'javascript&amp;#0000058alert(1);', $result );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 23:\n\t\t\t\t\t\t$this->assertEquals( 'javascript&amp;#0000058alert(1)//?:', $result );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 24:\n\t\t\t\t\t\t$this->assertEquals( 'feed:alert(1)', $result );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 26:\n\t\t\t\t\t\t$this->assertEquals( 'javascript&amp;#58alert(1)', $result );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 27:\n\t\t\t\t\t\t$this->assertEquals( 'javascript&amp;#x3ax=1;alert(1)', $result );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$this->fail( \"wp_kses_bad_protocol failed on $k, $x. Result: $result\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$safe = array(\n\t\t\t'dummy:alert(1)',\n\t\t\t'HTTP://example.org/',\n\t\t\t'http://example.org/',\n\t\t\t'http&#58;//example.org/',\n\t\t\t'http&#x3A;//example.org/',\n\t\t\t'https://example.org',\n\t\t\t'http://example.org/wp-admin/post.php?post=2&amp;action=edit',\n\t\t\t'http://example.org/index.php?test=&#039;blah&#039;',\n\t\t);\n\t\tforeach ( $safe as $x ) {\n\t\t\t$result = wp_kses_bad_protocol( wp_kses_normalize_entities( $x ), array( 'http', 'https', 'dummy' ) );\n\t\t\tif ( $result !== $x && 'http://example.org/' !== $result ) {\n\t\t\t\t$this->fail( \"wp_kses_bad_protocol incorrectly blocked $x\" );\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function test_hackers_attacks() {\n\t\t$xss = simplexml_load_file( DIR_TESTDATA . '/formatting/xssAttacks.xml' );\n\t\tforeach ( $xss->attack as $attack ) {\n\t\t\tif ( in_array( (string) $attack->name, array( 'IMG Embedded commands 2', 'US-ASCII encoding', 'OBJECT w/Flash 2', 'Character Encoding Example' ), true ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$code = (string) $attack->code;\n\n\t\t\tif ( 'See Below' === $code ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( substr( $code, 0, 4 ) === 'perl' ) {\n\t\t\t\t$pos  = strpos( $code, '\"' ) + 1;\n\t\t\t\t$code = substr( $code, $pos, strrpos( $code, '\"' ) - $pos );\n\t\t\t\t$code = str_replace( '\\0', \"\\0\", $code );\n\t\t\t}\n\n\t\t\t$result = trim( wp_kses_data( $code ) );\n\n\t\t\tif ( in_array( $result, array( '', 'XSS', 'alert(\"XSS\");', \"alert('XSS');\" ), true ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tswitch ( $attack->name ) {\n\t\t\t\tcase 'XSS Locator':\n\t\t\t\t\t$this->assertEquals( '\\';alert(String.fromCharCode(88,83,83))//\\\\\\';alert(String.fromCharCode(88,83,83))//\";alert(String.fromCharCode(88,83,83))//\\\\\";alert(String.fromCharCode(88,83,83))//--&gt;\"&gt;\\'&gt;alert(String.fromCharCode(88,83,83))=&amp;{}', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'XSS Quick Test':\n\t\t\t\t\t$this->assertEquals( '\\'\\';!--\"=&amp;{()}', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SCRIPT w/Alert()':\n\t\t\t\t\t$this->assertEquals( \"alert('XSS')\", $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SCRIPT w/Char Code':\n\t\t\t\t\t$this->assertEquals( 'alert(String.fromCharCode(88,83,83))', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'IMG STYLE w/expression':\n\t\t\t\t\t$this->assertEquals( 'exp/*', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'List-style-image':\n\t\t\t\t\t$this->assertEquals( 'li {list-style-image: url(\"javascript:alert(\\'XSS\\')\");}XSS', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'STYLE':\n\t\t\t\t\t$this->assertEquals( \"alert('XSS');\", $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'STYLE w/background-image':\n\t\t\t\t\t$this->assertEquals( '.XSS{background-image:url(\"javascript:alert(\\'XSS\\')\");}<A></A>', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'STYLE w/background':\n\t\t\t\t\t$this->assertEquals( 'BODY{background:url(\"javascript:alert(\\'XSS\\')\")}', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Remote Stylesheet 2':\n\t\t\t\t\t$this->assertEquals( \"@import'http://ha.ckers.org/xss.css';\", $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Remote Stylesheet 3':\n\t\t\t\t\t$this->assertEquals( '&lt;META HTTP-EQUIV=&quot;Link&quot; Content=&quot;; REL=stylesheet\"&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Remote Stylesheet 4':\n\t\t\t\t\t$this->assertEquals( 'BODY{-moz-binding:url(\"http://ha.ckers.org/xssmoz.xml#xss\")}', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'XML data island w/CDATA':\n\t\t\t\t\t$this->assertEquals( '&lt;![CDATA[]]&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'XML data island w/comment':\n\t\t\t\t\t$this->assertEquals( \"<I><B>&lt;IMG SRC=&quot;javas<!-- -->cript:alert('XSS')\\\"&gt;</B></I>\", $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'XML HTML+TIME':\n\t\t\t\t\t$this->assertEquals( '&lt;t:set attributeName=&quot;innerHTML&quot; to=&quot;XSSalert(\\'XSS\\')\"&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Commented-out Block':\n\t\t\t\t\t$this->assertEquals( \"<!--[if gte IE 4]&gt;-->\\nalert('XSS');\", $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Cookie Manipulation':\n\t\t\t\t\t$this->assertEquals( '&lt;META HTTP-EQUIV=&quot;Set-Cookie&quot; Content=&quot;USERID=alert(\\'XSS\\')\"&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SSI':\n\t\t\t\t\t$this->assertEquals( '&lt;!--#exec cmd=&quot;/bin/echo &#039;<!--#exec cmd=\"/bin/echo \\'=http://ha.ckers.org/xss.js&gt;\\'\"-->', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'PHP':\n\t\t\t\t\t$this->assertEquals( '&lt;? echo(&#039;alert(\"XSS\")\\'); ?&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'UTF-7 Encoding':\n\t\t\t\t\t$this->assertEquals( '+ADw-SCRIPT+AD4-alert(\\'XSS\\');+ADw-/SCRIPT+AD4-', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Escaping JavaScript escapes':\n\t\t\t\t\t$this->assertEquals( '\\\";alert(\\'XSS\\');//', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'STYLE w/broken up JavaScript':\n\t\t\t\t\t$this->assertEquals( '@im\\port\\'\\ja\\vasc\\ript:alert(\"XSS\")\\';', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Null Chars 2':\n\t\t\t\t\t$this->assertEquals( '&amp;alert(\"XSS\")', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'No Closing Script Tag':\n\t\t\t\t\t$this->assertEquals( '&lt;SCRIPT SRC=http://ha.ckers.org/xss.js', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Half-Open HTML/JavaScript':\n\t\t\t\t\t$this->assertEquals( '&lt;IMG SRC=&quot;javascript:alert(&#039;XSS&#039;)&quot;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Double open angle brackets':\n\t\t\t\t\t$this->assertEquals( '&lt;IFRAME SRC=http://ha.ckers.org/scriptlet.html &lt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Extraneous Open Brackets':\n\t\t\t\t\t$this->assertEquals( '&lt;alert(\"XSS\");//&lt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Malformed IMG Tags':\n\t\t\t\t\t$this->assertEquals( 'alert(\"XSS\")\"&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'No Quotes/Semicolons':\n\t\t\t\t\t$this->assertEquals( \"a=/XSS/\\nalert(a.source)\", $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Evade Regex Filter 1':\n\t\t\t\t\t$this->assertEquals( '\" SRC=\"http://ha.ckers.org/xss.js\"&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Evade Regex Filter 4':\n\t\t\t\t\t$this->assertEquals( '\\'\" SRC=\"http://ha.ckers.org/xss.js\"&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Evade Regex Filter 5':\n\t\t\t\t\t$this->assertEquals( '` SRC=\"http://ha.ckers.org/xss.js\"&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Filter Evasion 1':\n\t\t\t\t\t$this->assertEquals( 'document.write(\"&lt;SCRI&quot;);PT SRC=\"http://ha.ckers.org/xss.js\"&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Filter Evasion 2':\n\t\t\t\t\t$this->assertEquals( '\\'&gt;\" SRC=\"http://ha.ckers.org/xss.js\"&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$this->fail( 'KSES failed on ' . $attack->name . ': ' . $result );\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _wp_kses_allowed_html_filter( $html, $context ) {\n\t\tif ( 'post' === $context ) {\n\t\t\treturn array( 'a' => array( 'href' => true ) );\n\t\t} else {\n\t\t\treturn array( 'a' => array( 'href' => false ) );\n\t\t}\n\t}\n\n\t/**\n\t * @ticket 20210\n\t */\n\tpublic function test_wp_kses_allowed_html() {\n\t\tglobal $allowedposttags, $allowedtags, $allowedentitynames;\n\n\t\t$this->assertEquals( $allowedposttags, wp_kses_allowed_html( 'post' ) );\n\n\t\t$tags = wp_kses_allowed_html( 'post' );\n\n\t\tforeach ( $tags as $tag ) {\n\t\t\t$this->assertTrue( $tag['class'] );\n\t\t\t$this->assertTrue( $tag['id'] );\n\t\t\t$this->assertTrue( $tag['style'] );\n\t\t\t$this->assertTrue( $tag['title'] );\n\t\t}\n\n\t\t$this->assertEquals( $allowedtags, wp_kses_allowed_html( 'data' ) );\n\t\t$this->assertEquals( $allowedtags, wp_kses_allowed_html( '' ) );\n\t\t$this->assertEquals( $allowedtags, wp_kses_allowed_html() );\n\n\t\t$tags = wp_kses_allowed_html( 'user_description' );\n\t\t$this->assertTrue( $tags['a']['rel'] );\n\n\t\t$tags = wp_kses_allowed_html();\n\t\t$this->assertFalse( isset( $tags['a']['rel'] ) );\n\n\t\t$this->assertEquals( array(), wp_kses_allowed_html( 'strip' ) );\n\n\t\t$custom_tags = array(\n\t\t\t'a' => array(\n\t\t\t\t'href'   => true,\n\t\t\t\t'rel'    => true,\n\t\t\t\t'rev'    => true,\n\t\t\t\t'name'   => true,\n\t\t\t\t'target' => true,\n\t\t\t),\n\t\t);\n\n\t\t$this->assertEquals( $custom_tags, wp_kses_allowed_html( $custom_tags ) );\n\n\t\tadd_filter( 'wp_kses_allowed_html', array( $this, '_wp_kses_allowed_html_filter' ), 10, 2 );\n\n\t\t$this->assertEquals( array( 'a' => array( 'href' => true ) ), wp_kses_allowed_html( 'post' ) );\n\t\t$this->assertEquals( array( 'a' => array( 'href' => false ) ), wp_kses_allowed_html( 'data' ) );\n\n\t\tremove_filter( 'wp_kses_allowed_html', array( $this, '_wp_kses_allowed_html_filter' ) );\n\t\t$this->assertEquals( $allowedposttags, wp_kses_allowed_html( 'post' ) );\n\t\t$this->assertEquals( $allowedtags, wp_kses_allowed_html( 'data' ) );\n\t}\n\n\tfunction test_hyphenated_tag() {\n\t\t$string                 = '<hyphenated-tag attribute=\"value\" otherattribute=\"value2\">Alot of hyphens.</hyphenated-tag>';\n\t\t$custom_tags            = array(\n\t\t\t'hyphenated-tag' => array(\n\t\t\t\t'attribute' => true,\n\t\t\t),\n\t\t);\n\t\t$expect_stripped_string = 'Alot of hyphens.';\n\n\t\t$expect_valid_string = '<hyphenated-tag attribute=\"value\">Alot of hyphens.</hyphenated-tag>';\n\t\t$this->assertEquals( $expect_stripped_string, wp_kses_post( $string ) );\n\t\t$this->assertEquals( $expect_valid_string, wp_kses( $string, $custom_tags ) );\n\t}\n\n\t/**\n\t * @ticket 26290\n\t */\n\tpublic function test_wp_kses_normalize_entities() {\n\t\t$this->assertEquals( '&spades;', wp_kses_normalize_entities( '&spades;' ) );\n\n\t\t$this->assertEquals( '&sup1;', wp_kses_normalize_entities( '&sup1;' ) );\n\t\t$this->assertEquals( '&sup2;', wp_kses_normalize_entities( '&sup2;' ) );\n\t\t$this->assertEquals( '&sup3;', wp_kses_normalize_entities( '&sup3;' ) );\n\t\t$this->assertEquals( '&frac14;', wp_kses_normalize_entities( '&frac14;' ) );\n\t\t$this->assertEquals( '&frac12;', wp_kses_normalize_entities( '&frac12;' ) );\n\t\t$this->assertEquals( '&frac34;', wp_kses_normalize_entities( '&frac34;' ) );\n\t\t$this->assertEquals( '&there4;', wp_kses_normalize_entities( '&there4;' ) );\n\t}\n\n\t/**\n\t * Test removal of invalid binary data for HTML.\n\t *\n\t * @ticket 28506\n\t * @dataProvider data_ctrl_removal\n\t */\n\tfunction test_ctrl_removal( $input, $output ) {\n\t\tglobal $allowedposttags;\n\n\t\treturn $this->assertEquals( $output, wp_kses( $input, $allowedposttags ) );\n\t}\n\n\tfunction data_ctrl_removal() {\n\t\treturn array(\n\t\t\tarray(\n\t\t\t\t\"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0B\\x0C\\x0E\\x0F\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1A\\x1B\\X1C\\x1D\\x1E\\x1F\",\n\t\t\t\t'',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"\\x00h\\x01e\\x02l\\x03l\\x04o\\x05 \\x06w\\x07o\\x08r\\x0Bl\\x0Cd\\x0E.\\x0F \\x10W\\x11O\\x12R\\x13D\\x14P\\x15R\\x16E\\x17S\\x18S\\x19 \\x1AK\\x1BS\\X1CE\\x1DS\\x1E.\\x1F/\",\n\t\t\t\t'hello world. WORDPRESS KSES./',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"\\x1F\\x1E\\x1D\\x1C\\x1B\\x1A\\x19\\x18\\x17\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x0F\\x0E\\x0C\\x0B\\x08\\x07\\x06\\x05\\x04\\X03\\x02\\x01\\x00\",\n\t\t\t\t'',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"\\x1Fh\\x1Ee\\x1Dl\\x1Cl\\x1Bo\\x1A \\x19w\\x18o\\x17r\\x16l\\x15d\\x14.\\x13 \\x12W\\x11O\\x10R\\x0FD\\x0EP\\x0CR\\x0BE\\x08S\\x07S\\x06 \\x05K\\x04S\\X03E\\x02S\\x01.\\x00/\",\n\t\t\t\t'hello world. WORDPRESS KSES./',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"\\t\\r\\n word \\n\\r\\t\",\n\t\t\t\t\"\\t\\r\\n word \\n\\r\\t\",\n\t\t\t),\n\t\t);\n\t}\n\n\t/**\n\t * Test removal of '\\0' strings.\n\t *\n\t * @ticket 28699\n\t * @dataProvider data_slash_zero_removal\n\t */\n\tfunction test_slash_zero_removal( $input, $output ) {\n\t\tglobal $allowedposttags;\n\n\t\treturn $this->assertEquals( $output, wp_kses( $input, $allowedposttags ) );\n\t}\n\n\tfunction data_slash_zero_removal() {\n\t\treturn array(\n\t\t\tarray(\n\t\t\t\t'This \\\\0 should be no big deal.',\n\t\t\t\t'This \\\\0 should be no big deal.',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'<div>This \\\\0 should be no big deal.</div>',\n\t\t\t\t'<div>This \\\\0 should be no big deal.</div>',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'<div align=\"\\\\0left\">This should be no big deal.</div>',\n\t\t\t\t'<div align=\"\\\\0left\">This should be no big deal.</div>',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'This <div style=\"float:\\\\0left\"> is more of a concern.',\n\t\t\t\t'This <div style=\"float:left\"> is more of a concern.',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'This <div style=\"float:\\\\0\\\\0left\"> is more of a concern.',\n\t\t\t\t'This <div style=\"float:left\"> is more of a concern.',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'This <div style=\"float:\\\\\\\\00left\"> is more of a concern.',\n\t\t\t\t'This <div style=\"float:left\"> is more of a concern.',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'This <div style=\"float:\\\\\\\\\\\\\\\\0000left\"> is more of a concern.',\n\t\t\t\t'This <div style=\"float:left\"> is more of a concern.',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'This <div style=\"float:\\\\0000left\"> is more of a concern.',\n\t\t\t\t'This <div style=\"float:left\"> is more of a concern.',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'<style type=\"text/css\">div {background-image:\\\\0}</style>',\n\t\t\t\t'div {background-image:\\\\0}',\n\t\t\t),\n\t\t);\n\t}\n\n\t/**\n\t * Test new function wp_kses_hair_parse().\n\t *\n\t * @dataProvider data_hair_parse\n\t */\n\tfunction test_hair_parse( $input, $output ) {\n\t\treturn $this->assertEquals( $output, wp_kses_hair_parse( $input ) );\n\t}\n\n\tfunction data_hair_parse() {\n\t\treturn array(\n\t\t\tarray(\n\t\t\t\t'title=\"hello\" href=\"#\" id=\"my_id\" ',\n\t\t\t\tarray( 'title=\"hello\" ', 'href=\"#\" ', 'id=\"my_id\" ' ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'[shortcode attr=\"value\"] href=\"http://www.google.com/\"title=\"moo\"disabled',\n\t\t\t\tarray( '[shortcode attr=\"value\"] ', 'href=\"http://www.google.com/\"', 'title=\"moo\"', 'disabled' ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'',\n\t\t\t\tarray(),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'a',\n\t\t\t\tarray( 'a' ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'title=\"hello\"disabled href=# id=\\'my_id\\'',\n\t\t\t\tarray( 'title=\"hello\"', 'disabled ', 'href=# ', \"id='my_id'\" ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'     ', // Calling function is expected to strip leading whitespace.\n\t\t\t\tfalse,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'abcd=abcd\"abcd\"',\n\t\t\t\tfalse,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"array[1]='z'z'z'z\",\n\t\t\t\tfalse,\n\t\t\t),\n\t\t);\n\t}\n\n\t/**\n\t * Test new function wp_kses_attr_parse().\n\t *\n\t * @dataProvider data_attr_parse\n\t */\n\tfunction test_attr_parse( $input, $output ) {\n\t\treturn $this->assertEquals( $output, wp_kses_attr_parse( $input ) );\n\t}\n\n\tfunction data_attr_parse() {\n\t\treturn array(\n\t\t\tarray(\n\t\t\t\t'<a title=\"hello\" href=\"#\" id=\"my_id\" >',\n\t\t\t\tarray( '<a ', 'title=\"hello\" ', 'href=\"#\" ', 'id=\"my_id\" ', '>' ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'<a [shortcode attr=\"value\"] href=\"http://www.google.com/\"title=\"moo\"disabled>',\n\t\t\t\tarray( '<a ', '[shortcode attr=\"value\"] ', 'href=\"http://www.google.com/\"', 'title=\"moo\"', 'disabled', '>' ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'',\n\t\t\t\tfalse,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'a',\n\t\t\t\tfalse,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'<a>',\n\t\t\t\tarray( '<a', '>' ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'<a%%&&**>',\n\t\t\t\tfalse,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'<a title=\"hello\"disabled href=# id=\\'my_id\\'>',\n\t\t\t\tarray( '<a ', 'title=\"hello\"', 'disabled ', 'href=# ', \"id='my_id'\", '>' ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'<a     >',\n\t\t\t\tarray( '<a     ', '>' ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'<a abcd=abcd\"abcd\">',\n\t\t\t\tfalse,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"<a array[1]='z'z'z'z>\",\n\t\t\t\tfalse,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'<img title=\"hello\" src=\"#\" id=\"my_id\" />',\n\t\t\t\tarray( '<img ', 'title=\"hello\" ', 'src=\"#\" ', 'id=\"my_id\"', ' />' ),\n\t\t\t),\n\t\t);\n\t}\n\n\t/**\n\t * Test new function wp_kses_one_attr().\n\t *\n\t * @dataProvider data_one_attr\n\t */\n\tfunction test_one_attr( $element, $input, $output ) {\n\t\treturn $this->assertEquals( $output, wp_kses_one_attr( $input, $element ) );\n\t}\n\n\tfunction data_one_attr() {\n\t\treturn array(\n\t\t\tarray(\n\t\t\t\t'a',\n\t\t\t\t' title=\"hello\" ',\n\t\t\t\t' title=\"hello\" ',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'a',\n\t\t\t\t'title  =  \"hello\"',\n\t\t\t\t'title=\"hello\"',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'a',\n\t\t\t\t\"title='hello'\",\n\t\t\t\t\"title='hello'\",\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'a',\n\t\t\t\t'title=hello',\n\t\t\t\t'title=\"hello\"',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'a',\n\t\t\t\t'href=\"javascript:alert(1)\"',\n\t\t\t\t'href=\"alert(1)\"',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'a',\n\t\t\t\t'style =\"style \"',\n\t\t\t\t'style=\"style\"',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'a',\n\t\t\t\t'style=\"style \"',\n\t\t\t\t'style=\"style\"',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'a',\n\t\t\t\t'style =\"style =\"',\n\t\t\t\t'',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'img',\n\t\t\t\t'src=\"mypic.jpg\"',\n\t\t\t\t'src=\"mypic.jpg\"',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'img',\n\t\t\t\t'onerror=alert(1)',\n\t\t\t\t'',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'img',\n\t\t\t\t'title=>',\n\t\t\t\t'title=\"&gt;\"',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'img',\n\t\t\t\t'title=\"&garbage\";\"',\n\t\t\t\t'title=\"&amp;garbage&quot;;\"',\n\t\t\t),\n\t\t);\n\t}\n\n\t/**\n\t * @ticket 34063\n\t */\n\tfunction test_bdo() {\n\t\tglobal $allowedposttags;\n\n\t\t$input = '<p>This is <bdo dir=\"rtl\">a BDO tag</bdo>. Weird, <bdo dir=\"ltr\">right?</bdo></p>';\n\n\t\t$this->assertEquals( $input, wp_kses( $input, $allowedposttags ) );\n\t}\n\n\t/**\n\t * @ticket 35079\n\t */\n\tfunction test_ol_reversed() {\n\t\tglobal $allowedposttags;\n\n\t\t$input = '<ol reversed=\"reversed\"><li>Item 1</li><li>Item 2</li><li>Item 3</li></ol>';\n\n\t\t$this->assertEquals( $input, wp_kses( $input, $allowedposttags ) );\n\t}\n\n\t/**\n\t * @ticket 40680\n\t */\n\tfunction test_wp_kses_attr_no_attributes_allowed_with_empty_array() {\n\t\t$element   = 'foo';\n\t\t$attribute = 'title=\"foo\" class=\"bar\"';\n\n\t\t$this->assertEquals( \"<{$element}>\", wp_kses_attr( $element, $attribute, array( 'foo' => array() ), array() ) );\n\t}\n\n\t/**\n\t * @ticket 40680\n\t */\n\tfunction test_wp_kses_attr_no_attributes_allowed_with_true() {\n\t\t$element   = 'foo';\n\t\t$attribute = 'title=\"foo\" class=\"bar\"';\n\n\t\t$this->assertEquals( \"<{$element}>\", wp_kses_attr( $element, $attribute, array( 'foo' => true ), array() ) );\n\t}\n\n\t/**\n\t * @ticket 40680\n\t */\n\tfunction test_wp_kses_attr_single_attribute_is_allowed() {\n\t\t$element   = 'foo';\n\t\t$attribute = 'title=\"foo\" class=\"bar\"';\n\n\t\t$this->assertEquals( \"<{$element} title=\\\"foo\\\">\", wp_kses_attr( $element, $attribute, array( 'foo' => array( 'title' => true ) ), array() ) );\n\t}\n\n\t/**\n\t * @ticket 43312\n\t */\n\tfunction test_wp_kses_attr_no_attributes_allowed_with_false() {\n\t\t$element   = 'foo';\n\t\t$attribute = 'title=\"foo\" class=\"bar\"';\n\n\t\t$this->assertEquals( \"<{$element}>\", wp_kses_attr( $element, $attribute, array( 'foo' => false ), array() ) );\n\t}\n\n\t/**\n\t * Testing the safecss_filter_attr() function.\n\t *\n\t * @ticket 37248\n\t * @ticket 42729\n\t * @ticket 48376\n\t * @dataProvider data_test_safecss_filter_attr\n\t *\n\t * @param string $css      A string of CSS rules.\n\t * @param string $expected Expected string of CSS rules.\n\t */\n\tpublic function test_safecss_filter_attr( $css, $expected ) {\n\t\t$this->assertSame( $expected, safecss_filter_attr( $css ) );\n\t}\n\n\t/**\n\t * Data Provider for test_safecss_filter_attr().\n\t *\n\t * @return array {\n\t *     @type array {\n\t *         @string string $css      A string of CSS rules.\n\t *         @string string $expected Expected string of CSS rules.\n\t *     }\n\t * }\n\t */\n\tpublic function data_test_safecss_filter_attr() {\n\t\treturn array(\n\t\t\t// Empty input, empty output.\n\t\t\tarray(\n\t\t\t\t'css'      => '',\n\t\t\t\t'expected' => '',\n\t\t\t),\n\t\t\t// An arbitrary attribute name isn't allowed.\n\t\t\tarray(\n\t\t\t\t'css'      => 'foo:bar',\n\t\t\t\t'expected' => '',\n\t\t\t),\n\t\t\t// A single attribute name, with a single value.\n\t\t\tarray(\n\t\t\t\t'css'      => 'margin-top: 2px',\n\t\t\t\t'expected' => 'margin-top: 2px',\n\t\t\t),\n\t\t\t// Backslash \\ isn't supported.\n\t\t\tarray(\n\t\t\t\t'css'      => 'margin-top: \\2px',\n\t\t\t\t'expected' => '',\n\t\t\t),\n\t\t\t// Curly bracket } isn't supported.\n\t\t\tarray(\n\t\t\t\t'css'      => 'margin-bottom: 2px}',\n\t\t\t\t'expected' => '',\n\t\t\t),\n\t\t\t// A single attribute name, with a single text value.\n\t\t\tarray(\n\t\t\t\t'css'      => 'text-transform: uppercase',\n\t\t\t\t'expected' => 'text-transform: uppercase',\n\t\t\t),\n\t\t\t// Only lowercase attribute names are supported.\n\t\t\tarray(\n\t\t\t\t'css'      => 'Text-transform: capitalize',\n\t\t\t\t'expected' => '',\n\t\t\t),\n\t\t\t// Uppercase attribute values goes through.\n\t\t\tarray(\n\t\t\t\t'css'      => 'text-transform: None',\n\t\t\t\t'expected' => 'text-transform: None',\n\t\t\t),\n\t\t\t// A single attribute, with multiple values.\n\t\t\tarray(\n\t\t\t\t'css'      => 'font: bold 15px arial, sans-serif',\n\t\t\t\t'expected' => 'font: bold 15px arial, sans-serif',\n\t\t\t),\n\t\t\t// Multiple attributes, with single values.\n\t\t\tarray(\n\t\t\t\t'css'      => 'font-weight: bold;font-size: 15px',\n\t\t\t\t'expected' => 'font-weight: bold;font-size: 15px',\n\t\t\t),\n\t\t\t// Multiple attributes, separated by a space.\n\t\t\tarray(\n\t\t\t\t'css'      => 'font-weight: bold; font-size: 15px',\n\t\t\t\t'expected' => 'font-weight: bold;font-size: 15px',\n\t\t\t),\n\t\t\t// Multiple attributes, with multiple values.\n\t\t\tarray(\n\t\t\t\t'css'      => 'margin: 10px 20px;padding: 5px 10px',\n\t\t\t\t'expected' => 'margin: 10px 20px;padding: 5px 10px',\n\t\t\t),\n\t\t\t// Parenthesis ( is supported for some attributes.\n\t\t\tarray(\n\t\t\t\t'css'      => 'background: green url(\"foo.jpg\") no-repeat fixed center',\n\t\t\t\t'expected' => 'background: green url(\"foo.jpg\") no-repeat fixed center',\n\t\t\t),\n\t\t\t// Additional background attributes introduced in 5.3.\n\t\t\tarray(\n\t\t\t\t'css'      => 'background-size: cover;background-size: 200px 100px;background-attachment: local, scroll;background-blend-mode: hard-light',\n\t\t\t\t'expected' => 'background-size: cover;background-size: 200px 100px;background-attachment: local, scroll;background-blend-mode: hard-light',\n\t\t\t),\n\t\t\t// `border-radius` attribute introduced in 5.3.\n\t\t\tarray(\n\t\t\t\t'css'      => 'border-radius: 10% 30% 50% 70%;border-radius: 30px',\n\t\t\t\t'expected' => 'border-radius: 10% 30% 50% 70%;border-radius: 30px',\n\t\t\t),\n\t\t\t// `flex` and related attributes introduced in 5.3.\n\t\t\tarray(\n\t\t\t\t'css'      => 'flex: 0 1 auto;flex-basis: 75%;flex-direction: row-reverse;flex-flow: row-reverse nowrap;flex-grow: 2;flex-shrink: 1',\n\t\t\t\t'expected' => 'flex: 0 1 auto;flex-basis: 75%;flex-direction: row-reverse;flex-flow: row-reverse nowrap;flex-grow: 2;flex-shrink: 1',\n\t\t\t),\n\t\t\t// `grid` and related attributes introduced in 5.3.\n\t\t\tarray(\n\t\t\t\t'css'      => 'grid-template-columns: 1fr 60px;grid-auto-columns: min-content;grid-column-start: span 2;grid-column-end: -1;grid-column-gap: 10%;grid-gap: 10px 20px',\n\t\t\t\t'expected' => 'grid-template-columns: 1fr 60px;grid-auto-columns: min-content;grid-column-start: span 2;grid-column-end: -1;grid-column-gap: 10%;grid-gap: 10px 20px',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'grid-template-rows: 40px 4em 40px;grid-auto-rows: min-content;grid-row-start: -1;grid-row-end: 3;grid-row-gap: 1em',\n\t\t\t\t'expected' => 'grid-template-rows: 40px 4em 40px;grid-auto-rows: min-content;grid-row-start: -1;grid-row-end: 3;grid-row-gap: 1em',\n\t\t\t),\n\t\t\t// `grid` does not yet support functions or `\\`.\n\t\t\tarray(\n\t\t\t\t'css'      => 'grid-template-columns: repeat(2, 50px 1fr);grid-template: 1em / 20% 20px 1fr',\n\t\t\t\t'expected' => '',\n\t\t\t),\n\t\t\t// `flex` and `grid` alignments introduced in 5.3.\n\t\t\tarray(\n\t\t\t\t'css'      => 'align-content: space-between;align-items: start;align-self: center;justify-items: center;justify-content: space-between;justify-self: end',\n\t\t\t\t'expected' => 'align-content: space-between;align-items: start;align-self: center;justify-items: center;justify-content: space-between;justify-self: end',\n\t\t\t),\n\t\t\t// `columns` and related attributes introduced in 5.3.\n\t\t\tarray(\n\t\t\t\t'css'      => 'columns: 6rem auto;column-count: 4;column-fill: balance;column-gap: 9px;column-rule: thick inset blue;column-span: none;column-width: 120px',\n\t\t\t\t'expected' => 'columns: 6rem auto;column-count: 4;column-fill: balance;column-gap: 9px;column-rule: thick inset blue;column-span: none;column-width: 120px',\n\t\t\t),\n\t\t\t// Gradients introduced in 5.3.\n\t\t\tarray(\n\t\t\t\t'css'      => 'background: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)',\n\t\t\t\t'expected' => 'background: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'background: linear-gradient(135deg,rgba(6,147,227,1) ) (0%,rgb(155,81,224) 100%)',\n\t\t\t\t'expected' => '',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'background-image: linear-gradient(red,yellow);',\n\t\t\t\t'expected' => 'background-image: linear-gradient(red,yellow)',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'color: linear-gradient(red,yellow);',\n\t\t\t\t'expected' => '',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'background-image: linear-gradient(red,yellow); background: prop( red,yellow); width: 100px;',\n\t\t\t\t'expected' => 'background-image: linear-gradient(red,yellow);width: 100px',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'background: unknown-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)',\n\t\t\t\t'expected' => '',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'background: repeating-linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)',\n\t\t\t\t'expected' => 'background: repeating-linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'width: 100px; height: 100px; background: linear-gradient(135deg,rgba(0,208,132,1) 0%,rgba(6,147,227,1) 100%);',\n\t\t\t\t'expected' => 'width: 100px;height: 100px;background: linear-gradient(135deg,rgba(0,208,132,1) 0%,rgba(6,147,227,1) 100%)',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'background: radial-gradient(#ff0, red, yellow, green, rgba(6,147,227,1), rgb(155,81,224) 90%);',\n\t\t\t\t'expected' => 'background: radial-gradient(#ff0, red, yellow, green, rgba(6,147,227,1), rgb(155,81,224) 90%)',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'background: radial-gradient(#ff0, red, yellow, green, rgba(6,147,227,1), rgb(155,81,224) 90%);',\n\t\t\t\t'expected' => 'background: radial-gradient(#ff0, red, yellow, green, rgba(6,147,227,1), rgb(155,81,224) 90%)',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'background: conic-gradient(at 0% 30%, red 10%, yellow 30%, #1e90ff 50%)',\n\t\t\t\t'expected' => 'background: conic-gradient(at 0% 30%, red 10%, yellow 30%, #1e90ff 50%)',\n\t\t\t),\n\n\t\t);\n\t}\n\n\t/**\n\t * Data attributes are globally accepted.\n\t *\n\t * @ticket 33121\n\t */\n\tfunction test_wp_kses_attr_data_attribute_is_allowed() {\n\t\t$test     = '<div data-foo=\"foo\" data-bar=\"bar\" datainvalid=\"gone\" data--invaild=\"gone\"  data-also-invaild-=\"gone\" data-two-hyphens=\"remains\">Pens and pencils</div>';\n\t\t$expected = '<div data-foo=\"foo\" data-bar=\"bar\" data-two-hyphens=\"remains\">Pens and pencils</div>';\n\n\t\t$this->assertEquals( $expected, wp_kses_post( $test ) );\n\t}\n\n\t/**\n\t * Ensure wildcard attributes block unprefixed wildcard uses.\n\t *\n\t * @ticket 33121\n\t */\n\tfunction test_wildcard_requires_hyphen_after_prefix() {\n\t\t$allowed_html = array(\n\t\t\t'div' => array(\n\t\t\t\t'data-*' => true,\n\t\t\t\t'on-*'   => true,\n\t\t\t),\n\t\t);\n\n\t\t$string   = '<div datamelformed-prefix=\"gone\" data=\"gone\" data-=\"gone\" onclick=\"alert(1)\">Malformed attributes</div>';\n\t\t$expected = '<div>Malformed attributes</div>';\n\n\t\t$actual = wp_kses( $string, $allowed_html );\n\n\t\t$this->assertSame( $expected, $actual );\n\t}\n\n\t/**\n\t * Ensure wildcard allows two hyphen.\n\t *\n\t * @ticket 33121\n\t */\n\tfunction test_wildcard_allows_two_hyphens() {\n\t\t$allowed_html = array(\n\t\t\t'div' => array(\n\t\t\t\t'data-*' => true,\n\t\t\t),\n\t\t);\n\n\t\t$string   = '<div data-wp-id=\"pens-and-pencils\">Well formed attribute</div>';\n\t\t$expected = '<div data-wp-id=\"pens-and-pencils\">Well formed attribute</div>';\n\n\t\t$actual = wp_kses( $string, $allowed_html );\n\n\t\t$this->assertSame( $expected, $actual );\n\t}\n\n\t/**\n\t * Ensure wildcard attributes only support valid prefixes.\n\t *\n\t * @dataProvider data_wildcard_attribute_prefixes\n\t *\n\t * @ticket 33121\n\t */\n\tfunction test_wildcard_attribute_prefixes( $wildcard_attribute, $expected ) {\n\t\t$allowed_html = array(\n\t\t\t'div' => array(\n\t\t\t\t$wildcard_attribute => true,\n\t\t\t),\n\t\t);\n\n\t\t$name  = str_replace( '*', strtolower( __FUNCTION__ ), $wildcard_attribute );\n\t\t$value = __FUNCTION__;\n\t\t$whole = \"{$name}=\\\"{$value}\\\"\";\n\n\t\t$actual = wp_kses_attr_check( $name, $value, $whole, 'n', 'div', $allowed_html );\n\n\t\t$this->assertSame( $expected, $actual );\n\t}\n\n\t/**\n\t * @return array Array of arguments for wildcard testing\n\t *               [0] The prefix being tested.\n\t *               [1] The outcome of `wp_kses_attr_check` for the prefix.\n\t */\n\tfunction data_wildcard_attribute_prefixes() {\n\t\treturn array(\n\t\t\t// Ends correctly\n\t\t\tarray( 'data-*', true ),\n\n\t\t\t// Does not end with trialing `-`.\n\t\t\tarray( 'data*', false ),\n\n\t\t\t// Multiple wildcards.\n\t\t\tarray( 'd*ta-*', false ),\n\t\t\tarray( 'data**', false ),\n\t\t);\n\t}\n\n\t/**\n\t * Test URL sanitization in the style tag.\n\t *\n\t * @dataProvider data_kses_style_attr_with_url\n\t *\n\t * @ticket 45067\n\t *\n\t * @param $input string The style attribute saved in the editor.\n\t * @param $expected string The sanitized style attribute.\n\t */\n\tfunction test_kses_style_attr_with_url( $input, $expected ) {\n\t\t$actual = safecss_filter_attr( $input );\n\n\t\t$this->assertSame( $expected, $actual );\n\t}\n\n\t/**\n\t * Data provider testing style attribute sanitization.\n\t *\n\t * @return array Nested array of input, expected pairs.\n\t */\n\tfunction data_kses_style_attr_with_url() {\n\t\treturn array(\n\t\t\t/*\n\t\t\t * Valid use cases.\n\t\t\t */\n\n\t\t\t// Double quotes.\n\t\t\tarray(\n\t\t\t\t'background-image: url( \"http://example.com/valid.gif\" );',\n\t\t\t\t'background-image: url( \"http://example.com/valid.gif\" )',\n\t\t\t),\n\n\t\t\t// Single quotes.\n\t\t\tarray(\n\t\t\t\t\"background-image: url( 'http://example.com/valid.gif' );\",\n\t\t\t\t\"background-image: url( 'http://example.com/valid.gif' )\",\n\t\t\t),\n\n\t\t\t// No quotes.\n\t\t\tarray(\n\t\t\t\t'background-image: url( http://example.com/valid.gif );',\n\t\t\t\t'background-image: url( http://example.com/valid.gif )',\n\t\t\t),\n\n\t\t\t// Single quotes, extra spaces.\n\t\t\tarray(\n\t\t\t\t\"background-image: url( '  http://example.com/valid.gif ' );\",\n\t\t\t\t\"background-image: url( '  http://example.com/valid.gif ' )\",\n\t\t\t),\n\n\t\t\t// Line breaks, single quotes.\n\t\t\tarray(\n\t\t\t\t\"background-image: url(\\n'http://example.com/valid.gif' );\",\n\t\t\t\t\"background-image: url('http://example.com/valid.gif' )\",\n\t\t\t),\n\n\t\t\t// Tabs not spaces, single quotes.\n\t\t\tarray(\n\t\t\t\t\"background-image: url(\\t'http://example.com/valid.gif'\\t\\t);\",\n\t\t\t\t\"background-image: url('http://example.com/valid.gif')\",\n\t\t\t),\n\n\t\t\t// Single quotes, absolute path.\n\t\t\tarray(\n\t\t\t\t\"background: url('/valid.gif');\",\n\t\t\t\t\"background: url('/valid.gif')\",\n\t\t\t),\n\n\t\t\t// Single quotes, relative path.\n\t\t\tarray(\n\t\t\t\t\"background: url('../wp-content/uploads/2018/10/valid.gif');\",\n\t\t\t\t\"background: url('../wp-content/uploads/2018/10/valid.gif')\",\n\t\t\t),\n\n\t\t\t// Error check: valid property not containing a URL.\n\t\t\tarray(\n\t\t\t\t'background: red',\n\t\t\t\t'background: red',\n\t\t\t),\n\n\t\t\t/*\n\t\t\t * Invalid use cases.\n\t\t\t */\n\n\t\t\t// Attribute doesn't support URL properties.\n\t\t\tarray(\n\t\t\t\t'color: url( \"http://example.com/invalid.gif\" );',\n\t\t\t\t'',\n\t\t\t),\n\n\t\t\t// Mismatched quotes.\n\t\t\tarray(\n\t\t\t\t'background-image: url( \"http://example.com/valid.gif\\' );',\n\t\t\t\t'',\n\t\t\t),\n\n\t\t\t// Bad protocol, double quotes.\n\t\t\tarray(\n\t\t\t\t'background-image: url( \"bad://example.com/invalid.gif\" );',\n\t\t\t\t'',\n\t\t\t),\n\n\t\t\t// Bad protocol, single quotes.\n\t\t\tarray(\n\t\t\t\t\"background-image: url( 'bad://example.com/invalid.gif' );\",\n\t\t\t\t'',\n\t\t\t),\n\n\t\t\t// Bad protocol, single quotes.\n\t\t\tarray(\n\t\t\t\t\"background-image: url( 'bad://example.com/invalid.gif' );\",\n\t\t\t\t'',\n\t\t\t),\n\n\t\t\t// Bad protocol, single quotes, strange spacing.\n\t\t\tarray(\n\t\t\t\t\"background-image: url( '  \\tbad://example.com/invalid.gif ' );\",\n\t\t\t\t'',\n\t\t\t),\n\n\t\t\t// Bad protocol, no quotes.\n\t\t\tarray(\n\t\t\t\t'background-image: url( bad://example.com/invalid.gif );',\n\t\t\t\t'',\n\t\t\t),\n\n\t\t\t// No URL inside url().\n\t\t\tarray(\n\t\t\t\t'background-image: url();',\n\t\t\t\t'',\n\t\t\t),\n\n\t\t\t// Malformed, no closing `)`.\n\t\t\tarray(\n\t\t\t\t'background-image: url( \"http://example.com\" ;',\n\t\t\t\t'',\n\t\t\t),\n\n\t\t\t// Malformed, no closing `\"`.\n\t\t\tarray(\n\t\t\t\t'background-image: url( \"http://example.com );',\n\t\t\t\t'',\n\t\t\t),\n\t\t);\n\t}\n}\n"], "fixing_code": ["<?php\n/**\n * kses 0.2.2 - HTML/XHTML filter that only allows some elements and attributes\n * Copyright (C) 2002, 2003, 2005  Ulf Harnhammar\n *\n * This program is free software and open source software; you can redistribute\n * it and/or modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n * http://www.gnu.org/licenses/gpl.html\n *\n * [kses strips evil scripts!]\n *\n * Added wp_ prefix to avoid conflicts with existing kses users\n *\n * @version 0.2.2\n * @copyright (C) 2002, 2003, 2005\n * @author Ulf Harnhammar <http://advogato.org/person/metaur/>\n *\n * @package External\n * @subpackage KSES\n */\n\n/**\n * Specifies the default allowable HTML tags.\n *\n * Using `CUSTOM_TAGS` is not recommended and should be considered deprecated. The\n * {@see 'wp_kses_allowed_html'} filter is more powerful and supplies context.\n *\n * @see wp_kses_allowed_html()\n * @since 1.2.0\n *\n * @var array[]|bool Array of default allowable HTML tags, or false to use the defaults.\n */\nif ( ! defined( 'CUSTOM_TAGS' ) ) {\n\tdefine( 'CUSTOM_TAGS', false );\n}\n\n// Ensure that these variables are added to the global namespace\n// (e.g. if using namespaces / autoload in the current PHP environment).\nglobal $allowedposttags, $allowedtags, $allowedentitynames;\n\nif ( ! CUSTOM_TAGS ) {\n\t/**\n\t * KSES global for default allowable HTML tags.\n\t *\n\t * Can be overridden with the `CUSTOM_TAGS` constant.\n\t *\n\t * @var array[] $allowedposttags Array of default allowable HTML tags.\n\t * @since 2.0.0\n\t */\n\t$allowedposttags = array(\n\t\t'address'    => array(),\n\t\t'a'          => array(\n\t\t\t'href'     => true,\n\t\t\t'rel'      => true,\n\t\t\t'rev'      => true,\n\t\t\t'name'     => true,\n\t\t\t'target'   => true,\n\t\t\t'download' => array(\n\t\t\t\t'valueless' => 'y',\n\t\t\t),\n\t\t),\n\t\t'abbr'       => array(),\n\t\t'acronym'    => array(),\n\t\t'area'       => array(\n\t\t\t'alt'    => true,\n\t\t\t'coords' => true,\n\t\t\t'href'   => true,\n\t\t\t'nohref' => true,\n\t\t\t'shape'  => true,\n\t\t\t'target' => true,\n\t\t),\n\t\t'article'    => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'aside'      => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'audio'      => array(\n\t\t\t'autoplay' => true,\n\t\t\t'controls' => true,\n\t\t\t'loop'     => true,\n\t\t\t'muted'    => true,\n\t\t\t'preload'  => true,\n\t\t\t'src'      => true,\n\t\t),\n\t\t'b'          => array(),\n\t\t'bdo'        => array(\n\t\t\t'dir' => true,\n\t\t),\n\t\t'big'        => array(),\n\t\t'blockquote' => array(\n\t\t\t'cite'     => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'br'         => array(),\n\t\t'button'     => array(\n\t\t\t'disabled' => true,\n\t\t\t'name'     => true,\n\t\t\t'type'     => true,\n\t\t\t'value'    => true,\n\t\t),\n\t\t'caption'    => array(\n\t\t\t'align' => true,\n\t\t),\n\t\t'cite'       => array(\n\t\t\t'dir'  => true,\n\t\t\t'lang' => true,\n\t\t),\n\t\t'code'       => array(),\n\t\t'col'        => array(\n\t\t\t'align'   => true,\n\t\t\t'char'    => true,\n\t\t\t'charoff' => true,\n\t\t\t'span'    => true,\n\t\t\t'dir'     => true,\n\t\t\t'valign'  => true,\n\t\t\t'width'   => true,\n\t\t),\n\t\t'colgroup'   => array(\n\t\t\t'align'   => true,\n\t\t\t'char'    => true,\n\t\t\t'charoff' => true,\n\t\t\t'span'    => true,\n\t\t\t'valign'  => true,\n\t\t\t'width'   => true,\n\t\t),\n\t\t'del'        => array(\n\t\t\t'datetime' => true,\n\t\t),\n\t\t'dd'         => array(),\n\t\t'dfn'        => array(),\n\t\t'details'    => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'open'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'div'        => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'dl'         => array(),\n\t\t'dt'         => array(),\n\t\t'em'         => array(),\n\t\t'fieldset'   => array(),\n\t\t'figure'     => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'figcaption' => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'font'       => array(\n\t\t\t'color' => true,\n\t\t\t'face'  => true,\n\t\t\t'size'  => true,\n\t\t),\n\t\t'footer'     => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'h1'         => array(\n\t\t\t'align' => true,\n\t\t),\n\t\t'h2'         => array(\n\t\t\t'align' => true,\n\t\t),\n\t\t'h3'         => array(\n\t\t\t'align' => true,\n\t\t),\n\t\t'h4'         => array(\n\t\t\t'align' => true,\n\t\t),\n\t\t'h5'         => array(\n\t\t\t'align' => true,\n\t\t),\n\t\t'h6'         => array(\n\t\t\t'align' => true,\n\t\t),\n\t\t'header'     => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'hgroup'     => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'hr'         => array(\n\t\t\t'align'   => true,\n\t\t\t'noshade' => true,\n\t\t\t'size'    => true,\n\t\t\t'width'   => true,\n\t\t),\n\t\t'i'          => array(),\n\t\t'img'        => array(\n\t\t\t'alt'      => true,\n\t\t\t'align'    => true,\n\t\t\t'border'   => true,\n\t\t\t'height'   => true,\n\t\t\t'hspace'   => true,\n\t\t\t'longdesc' => true,\n\t\t\t'vspace'   => true,\n\t\t\t'src'      => true,\n\t\t\t'usemap'   => true,\n\t\t\t'width'    => true,\n\t\t),\n\t\t'ins'        => array(\n\t\t\t'datetime' => true,\n\t\t\t'cite'     => true,\n\t\t),\n\t\t'kbd'        => array(),\n\t\t'label'      => array(\n\t\t\t'for' => true,\n\t\t),\n\t\t'legend'     => array(\n\t\t\t'align' => true,\n\t\t),\n\t\t'li'         => array(\n\t\t\t'align' => true,\n\t\t\t'value' => true,\n\t\t),\n\t\t'map'        => array(\n\t\t\t'name' => true,\n\t\t),\n\t\t'mark'       => array(),\n\t\t'menu'       => array(\n\t\t\t'type' => true,\n\t\t),\n\t\t'nav'        => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'p'          => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'pre'        => array(\n\t\t\t'width' => true,\n\t\t),\n\t\t'q'          => array(\n\t\t\t'cite' => true,\n\t\t),\n\t\t's'          => array(),\n\t\t'samp'       => array(),\n\t\t'span'       => array(\n\t\t\t'dir'      => true,\n\t\t\t'align'    => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'section'    => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'small'      => array(),\n\t\t'strike'     => array(),\n\t\t'strong'     => array(),\n\t\t'sub'        => array(),\n\t\t'summary'    => array(\n\t\t\t'align'    => true,\n\t\t\t'dir'      => true,\n\t\t\t'lang'     => true,\n\t\t\t'xml:lang' => true,\n\t\t),\n\t\t'sup'        => array(),\n\t\t'table'      => array(\n\t\t\t'align'       => true,\n\t\t\t'bgcolor'     => true,\n\t\t\t'border'      => true,\n\t\t\t'cellpadding' => true,\n\t\t\t'cellspacing' => true,\n\t\t\t'dir'         => true,\n\t\t\t'rules'       => true,\n\t\t\t'summary'     => true,\n\t\t\t'width'       => true,\n\t\t),\n\t\t'tbody'      => array(\n\t\t\t'align'   => true,\n\t\t\t'char'    => true,\n\t\t\t'charoff' => true,\n\t\t\t'valign'  => true,\n\t\t),\n\t\t'td'         => array(\n\t\t\t'abbr'    => true,\n\t\t\t'align'   => true,\n\t\t\t'axis'    => true,\n\t\t\t'bgcolor' => true,\n\t\t\t'char'    => true,\n\t\t\t'charoff' => true,\n\t\t\t'colspan' => true,\n\t\t\t'dir'     => true,\n\t\t\t'headers' => true,\n\t\t\t'height'  => true,\n\t\t\t'nowrap'  => true,\n\t\t\t'rowspan' => true,\n\t\t\t'scope'   => true,\n\t\t\t'valign'  => true,\n\t\t\t'width'   => true,\n\t\t),\n\t\t'textarea'   => array(\n\t\t\t'cols'     => true,\n\t\t\t'rows'     => true,\n\t\t\t'disabled' => true,\n\t\t\t'name'     => true,\n\t\t\t'readonly' => true,\n\t\t),\n\t\t'tfoot'      => array(\n\t\t\t'align'   => true,\n\t\t\t'char'    => true,\n\t\t\t'charoff' => true,\n\t\t\t'valign'  => true,\n\t\t),\n\t\t'th'         => array(\n\t\t\t'abbr'    => true,\n\t\t\t'align'   => true,\n\t\t\t'axis'    => true,\n\t\t\t'bgcolor' => true,\n\t\t\t'char'    => true,\n\t\t\t'charoff' => true,\n\t\t\t'colspan' => true,\n\t\t\t'headers' => true,\n\t\t\t'height'  => true,\n\t\t\t'nowrap'  => true,\n\t\t\t'rowspan' => true,\n\t\t\t'scope'   => true,\n\t\t\t'valign'  => true,\n\t\t\t'width'   => true,\n\t\t),\n\t\t'thead'      => array(\n\t\t\t'align'   => true,\n\t\t\t'char'    => true,\n\t\t\t'charoff' => true,\n\t\t\t'valign'  => true,\n\t\t),\n\t\t'title'      => array(),\n\t\t'tr'         => array(\n\t\t\t'align'   => true,\n\t\t\t'bgcolor' => true,\n\t\t\t'char'    => true,\n\t\t\t'charoff' => true,\n\t\t\t'valign'  => true,\n\t\t),\n\t\t'track'      => array(\n\t\t\t'default' => true,\n\t\t\t'kind'    => true,\n\t\t\t'label'   => true,\n\t\t\t'src'     => true,\n\t\t\t'srclang' => true,\n\t\t),\n\t\t'tt'         => array(),\n\t\t'u'          => array(),\n\t\t'ul'         => array(\n\t\t\t'type' => true,\n\t\t),\n\t\t'ol'         => array(\n\t\t\t'start'    => true,\n\t\t\t'type'     => true,\n\t\t\t'reversed' => true,\n\t\t),\n\t\t'var'        => array(),\n\t\t'video'      => array(\n\t\t\t'autoplay' => true,\n\t\t\t'controls' => true,\n\t\t\t'height'   => true,\n\t\t\t'loop'     => true,\n\t\t\t'muted'    => true,\n\t\t\t'poster'   => true,\n\t\t\t'preload'  => true,\n\t\t\t'src'      => true,\n\t\t\t'width'    => true,\n\t\t),\n\t);\n\n\t/**\n\t * @var array[] $allowedtags Array of KSES allowed HTML elements.\n\t * @since 1.0.0\n\t */\n\t$allowedtags = array(\n\t\t'a'          => array(\n\t\t\t'href'  => true,\n\t\t\t'title' => true,\n\t\t),\n\t\t'abbr'       => array(\n\t\t\t'title' => true,\n\t\t),\n\t\t'acronym'    => array(\n\t\t\t'title' => true,\n\t\t),\n\t\t'b'          => array(),\n\t\t'blockquote' => array(\n\t\t\t'cite' => true,\n\t\t),\n\t\t'cite'       => array(),\n\t\t'code'       => array(),\n\t\t'del'        => array(\n\t\t\t'datetime' => true,\n\t\t),\n\t\t'em'         => array(),\n\t\t'i'          => array(),\n\t\t'q'          => array(\n\t\t\t'cite' => true,\n\t\t),\n\t\t's'          => array(),\n\t\t'strike'     => array(),\n\t\t'strong'     => array(),\n\t);\n\n\t/**\n\t * @var string[] $allowedentitynames Array of KSES allowed HTML entitity names.\n\t * @since 1.0.0\n\t */\n\t$allowedentitynames = array(\n\t\t'nbsp',\n\t\t'iexcl',\n\t\t'cent',\n\t\t'pound',\n\t\t'curren',\n\t\t'yen',\n\t\t'brvbar',\n\t\t'sect',\n\t\t'uml',\n\t\t'copy',\n\t\t'ordf',\n\t\t'laquo',\n\t\t'not',\n\t\t'shy',\n\t\t'reg',\n\t\t'macr',\n\t\t'deg',\n\t\t'plusmn',\n\t\t'acute',\n\t\t'micro',\n\t\t'para',\n\t\t'middot',\n\t\t'cedil',\n\t\t'ordm',\n\t\t'raquo',\n\t\t'iquest',\n\t\t'Agrave',\n\t\t'Aacute',\n\t\t'Acirc',\n\t\t'Atilde',\n\t\t'Auml',\n\t\t'Aring',\n\t\t'AElig',\n\t\t'Ccedil',\n\t\t'Egrave',\n\t\t'Eacute',\n\t\t'Ecirc',\n\t\t'Euml',\n\t\t'Igrave',\n\t\t'Iacute',\n\t\t'Icirc',\n\t\t'Iuml',\n\t\t'ETH',\n\t\t'Ntilde',\n\t\t'Ograve',\n\t\t'Oacute',\n\t\t'Ocirc',\n\t\t'Otilde',\n\t\t'Ouml',\n\t\t'times',\n\t\t'Oslash',\n\t\t'Ugrave',\n\t\t'Uacute',\n\t\t'Ucirc',\n\t\t'Uuml',\n\t\t'Yacute',\n\t\t'THORN',\n\t\t'szlig',\n\t\t'agrave',\n\t\t'aacute',\n\t\t'acirc',\n\t\t'atilde',\n\t\t'auml',\n\t\t'aring',\n\t\t'aelig',\n\t\t'ccedil',\n\t\t'egrave',\n\t\t'eacute',\n\t\t'ecirc',\n\t\t'euml',\n\t\t'igrave',\n\t\t'iacute',\n\t\t'icirc',\n\t\t'iuml',\n\t\t'eth',\n\t\t'ntilde',\n\t\t'ograve',\n\t\t'oacute',\n\t\t'ocirc',\n\t\t'otilde',\n\t\t'ouml',\n\t\t'divide',\n\t\t'oslash',\n\t\t'ugrave',\n\t\t'uacute',\n\t\t'ucirc',\n\t\t'uuml',\n\t\t'yacute',\n\t\t'thorn',\n\t\t'yuml',\n\t\t'quot',\n\t\t'amp',\n\t\t'lt',\n\t\t'gt',\n\t\t'apos',\n\t\t'OElig',\n\t\t'oelig',\n\t\t'Scaron',\n\t\t'scaron',\n\t\t'Yuml',\n\t\t'circ',\n\t\t'tilde',\n\t\t'ensp',\n\t\t'emsp',\n\t\t'thinsp',\n\t\t'zwnj',\n\t\t'zwj',\n\t\t'lrm',\n\t\t'rlm',\n\t\t'ndash',\n\t\t'mdash',\n\t\t'lsquo',\n\t\t'rsquo',\n\t\t'sbquo',\n\t\t'ldquo',\n\t\t'rdquo',\n\t\t'bdquo',\n\t\t'dagger',\n\t\t'Dagger',\n\t\t'permil',\n\t\t'lsaquo',\n\t\t'rsaquo',\n\t\t'euro',\n\t\t'fnof',\n\t\t'Alpha',\n\t\t'Beta',\n\t\t'Gamma',\n\t\t'Delta',\n\t\t'Epsilon',\n\t\t'Zeta',\n\t\t'Eta',\n\t\t'Theta',\n\t\t'Iota',\n\t\t'Kappa',\n\t\t'Lambda',\n\t\t'Mu',\n\t\t'Nu',\n\t\t'Xi',\n\t\t'Omicron',\n\t\t'Pi',\n\t\t'Rho',\n\t\t'Sigma',\n\t\t'Tau',\n\t\t'Upsilon',\n\t\t'Phi',\n\t\t'Chi',\n\t\t'Psi',\n\t\t'Omega',\n\t\t'alpha',\n\t\t'beta',\n\t\t'gamma',\n\t\t'delta',\n\t\t'epsilon',\n\t\t'zeta',\n\t\t'eta',\n\t\t'theta',\n\t\t'iota',\n\t\t'kappa',\n\t\t'lambda',\n\t\t'mu',\n\t\t'nu',\n\t\t'xi',\n\t\t'omicron',\n\t\t'pi',\n\t\t'rho',\n\t\t'sigmaf',\n\t\t'sigma',\n\t\t'tau',\n\t\t'upsilon',\n\t\t'phi',\n\t\t'chi',\n\t\t'psi',\n\t\t'omega',\n\t\t'thetasym',\n\t\t'upsih',\n\t\t'piv',\n\t\t'bull',\n\t\t'hellip',\n\t\t'prime',\n\t\t'Prime',\n\t\t'oline',\n\t\t'frasl',\n\t\t'weierp',\n\t\t'image',\n\t\t'real',\n\t\t'trade',\n\t\t'alefsym',\n\t\t'larr',\n\t\t'uarr',\n\t\t'rarr',\n\t\t'darr',\n\t\t'harr',\n\t\t'crarr',\n\t\t'lArr',\n\t\t'uArr',\n\t\t'rArr',\n\t\t'dArr',\n\t\t'hArr',\n\t\t'forall',\n\t\t'part',\n\t\t'exist',\n\t\t'empty',\n\t\t'nabla',\n\t\t'isin',\n\t\t'notin',\n\t\t'ni',\n\t\t'prod',\n\t\t'sum',\n\t\t'minus',\n\t\t'lowast',\n\t\t'radic',\n\t\t'prop',\n\t\t'infin',\n\t\t'ang',\n\t\t'and',\n\t\t'or',\n\t\t'cap',\n\t\t'cup',\n\t\t'int',\n\t\t'sim',\n\t\t'cong',\n\t\t'asymp',\n\t\t'ne',\n\t\t'equiv',\n\t\t'le',\n\t\t'ge',\n\t\t'sub',\n\t\t'sup',\n\t\t'nsub',\n\t\t'sube',\n\t\t'supe',\n\t\t'oplus',\n\t\t'otimes',\n\t\t'perp',\n\t\t'sdot',\n\t\t'lceil',\n\t\t'rceil',\n\t\t'lfloor',\n\t\t'rfloor',\n\t\t'lang',\n\t\t'rang',\n\t\t'loz',\n\t\t'spades',\n\t\t'clubs',\n\t\t'hearts',\n\t\t'diams',\n\t\t'sup1',\n\t\t'sup2',\n\t\t'sup3',\n\t\t'frac14',\n\t\t'frac12',\n\t\t'frac34',\n\t\t'there4',\n\t);\n\n\t$allowedposttags = array_map( '_wp_add_global_attributes', $allowedposttags );\n} else {\n\t$allowedtags     = wp_kses_array_lc( $allowedtags );\n\t$allowedposttags = wp_kses_array_lc( $allowedposttags );\n}\n\n/**\n * Filters text content and strips out disallowed HTML.\n *\n * This function makes sure that only the allowed HTML element names, attribute\n * names, attribute values, and HTML entities will occur in the given text string.\n *\n * This function expects unslashed data.\n *\n * @see wp_kses_post() for specifically filtering post content and fields.\n * @see wp_allowed_protocols() for the default allowed protocols in link URLs.\n *\n * @since 1.0.0\n *\n * @param string         $string            Text content to filter.\n * @param array[]|string $allowed_html      An array of allowed HTML elements and attributes, or a\n *                                          context name such as 'post'.\n * @param string[]       $allowed_protocols Array of allowed URL protocols.\n * @return string Filtered content containing only the allowed HTML.\n */\nfunction wp_kses( $string, $allowed_html, $allowed_protocols = array() ) {\n\tif ( empty( $allowed_protocols ) ) {\n\t\t$allowed_protocols = wp_allowed_protocols();\n\t}\n\t$string = wp_kses_no_null( $string, array( 'slash_zero' => 'keep' ) );\n\t$string = wp_kses_normalize_entities( $string );\n\t$string = wp_kses_hook( $string, $allowed_html, $allowed_protocols );\n\treturn wp_kses_split( $string, $allowed_html, $allowed_protocols );\n}\n\n/**\n * Filters one HTML attribute and ensures its value is allowed.\n *\n * This function can escape data in some situations where `wp_kses()` must strip the whole attribute.\n *\n * @since 4.2.3\n *\n * @param string $string  The 'whole' attribute, including name and value.\n * @param string $element The HTML element name to which the attribute belongs.\n * @return string Filtered attribute.\n */\nfunction wp_kses_one_attr( $string, $element ) {\n\t$uris              = wp_kses_uri_attributes();\n\t$allowed_html      = wp_kses_allowed_html( 'post' );\n\t$allowed_protocols = wp_allowed_protocols();\n\t$string            = wp_kses_no_null( $string, array( 'slash_zero' => 'keep' ) );\n\n\t// Preserve leading and trailing whitespace.\n\t$matches = array();\n\tpreg_match( '/^\\s*/', $string, $matches );\n\t$lead = $matches[0];\n\tpreg_match( '/\\s*$/', $string, $matches );\n\t$trail = $matches[0];\n\tif ( empty( $trail ) ) {\n\t\t$string = substr( $string, strlen( $lead ) );\n\t} else {\n\t\t$string = substr( $string, strlen( $lead ), -strlen( $trail ) );\n\t}\n\n\t// Parse attribute name and value from input.\n\t$split = preg_split( '/\\s*=\\s*/', $string, 2 );\n\t$name  = $split[0];\n\tif ( count( $split ) == 2 ) {\n\t\t$value = $split[1];\n\n\t\t// Remove quotes surrounding $value.\n\t\t// Also guarantee correct quoting in $string for this one attribute.\n\t\tif ( '' == $value ) {\n\t\t\t$quote = '';\n\t\t} else {\n\t\t\t$quote = $value[0];\n\t\t}\n\t\tif ( '\"' == $quote || \"'\" == $quote ) {\n\t\t\tif ( substr( $value, -1 ) != $quote ) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\t$value = substr( $value, 1, -1 );\n\t\t} else {\n\t\t\t$quote = '\"';\n\t\t}\n\n\t\t// Sanitize quotes, angle braces, and entities.\n\t\t$value = esc_attr( $value );\n\n\t\t// Sanitize URI values.\n\t\tif ( in_array( strtolower( $name ), $uris ) ) {\n\t\t\t$value = wp_kses_bad_protocol( $value, $allowed_protocols );\n\t\t}\n\n\t\t$string = \"$name=$quote$value$quote\";\n\t\t$vless  = 'n';\n\t} else {\n\t\t$value = '';\n\t\t$vless = 'y';\n\t}\n\n\t// Sanitize attribute by name.\n\twp_kses_attr_check( $name, $value, $string, $vless, $element, $allowed_html );\n\n\t// Restore whitespace.\n\treturn $lead . $string . $trail;\n}\n\n/**\n * Returns an array of allowed HTML tags and attributes for a given context.\n *\n * @since 3.5.0\n * @since 5.0.1 `form` removed as allowable HTML tag.\n *\n * @global array $allowedposttags\n * @global array $allowedtags\n * @global array $allowedentitynames\n *\n * @param string|array $context The context for which to retrieve tags. Allowed values are 'post',\n *                              'strip', 'data', 'entities', or the name of a field filter such as\n *                              'pre_user_description'.\n * @return array Array of allowed HTML tags and their allowed attributes.\n */\nfunction wp_kses_allowed_html( $context = '' ) {\n\tglobal $allowedposttags, $allowedtags, $allowedentitynames;\n\n\tif ( is_array( $context ) ) {\n\t\t/**\n\t\t * Filters the HTML that is allowed for a given context.\n\t\t *\n\t\t * @since 3.5.0\n\t\t *\n\t\t * @param array[]|string $context      Context to judge allowed tags by.\n\t\t * @param string         $context_type Context name.\n\t\t */\n\t\treturn apply_filters( 'wp_kses_allowed_html', $context, 'explicit' );\n\t}\n\n\tswitch ( $context ) {\n\t\tcase 'post':\n\t\t\t/** This filter is documented in wp-includes/kses.php */\n\t\t\t$tags = apply_filters( 'wp_kses_allowed_html', $allowedposttags, $context );\n\n\t\t\t// 5.0.1 removed the `<form>` tag, allow it if a filter is allowing it's sub-elements `<input>` or `<select>`.\n\t\t\tif ( ! CUSTOM_TAGS && ! isset( $tags['form'] ) && ( isset( $tags['input'] ) || isset( $tags['select'] ) ) ) {\n\t\t\t\t$tags = $allowedposttags;\n\n\t\t\t\t$tags['form'] = array(\n\t\t\t\t\t'action'         => true,\n\t\t\t\t\t'accept'         => true,\n\t\t\t\t\t'accept-charset' => true,\n\t\t\t\t\t'enctype'        => true,\n\t\t\t\t\t'method'         => true,\n\t\t\t\t\t'name'           => true,\n\t\t\t\t\t'target'         => true,\n\t\t\t\t);\n\n\t\t\t\t/** This filter is documented in wp-includes/kses.php */\n\t\t\t\t$tags = apply_filters( 'wp_kses_allowed_html', $tags, $context );\n\t\t\t}\n\n\t\t\treturn $tags;\n\n\t\tcase 'user_description':\n\t\tcase 'pre_user_description':\n\t\t\t$tags             = $allowedtags;\n\t\t\t$tags['a']['rel'] = true;\n\t\t\t/** This filter is documented in wp-includes/kses.php */\n\t\t\treturn apply_filters( 'wp_kses_allowed_html', $tags, $context );\n\n\t\tcase 'strip':\n\t\t\t/** This filter is documented in wp-includes/kses.php */\n\t\t\treturn apply_filters( 'wp_kses_allowed_html', array(), $context );\n\n\t\tcase 'entities':\n\t\t\t/** This filter is documented in wp-includes/kses.php */\n\t\t\treturn apply_filters( 'wp_kses_allowed_html', $allowedentitynames, $context );\n\n\t\tcase 'data':\n\t\tdefault:\n\t\t\t/** This filter is documented in wp-includes/kses.php */\n\t\t\treturn apply_filters( 'wp_kses_allowed_html', $allowedtags, $context );\n\t}\n}\n\n/**\n * You add any KSES hooks here.\n *\n * There is currently only one KSES WordPress hook, {@see 'pre_kses'}, and it is called here.\n * All parameters are passed to the hooks and expected to receive a string.\n *\n * @since 1.0.0\n *\n * @param string          $string            Content to filter through KSES.\n * @param array[]|string  $allowed_html      List of allowed HTML elements.\n * @param string[]        $allowed_protocols Array of allowed URL protocols.\n * @return string Filtered content through {@see 'pre_kses'} hook.\n */\nfunction wp_kses_hook( $string, $allowed_html, $allowed_protocols ) {\n\t/**\n\t * Filters content to be run through kses.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string          $string            Content to run through KSES.\n\t * @param array[]|string  $allowed_html      Allowed HTML elements.\n\t * @param string[]        $allowed_protocols Array of allowed URL protocols.\n\t */\n\treturn apply_filters( 'pre_kses', $string, $allowed_html, $allowed_protocols );\n}\n\n/**\n * Returns the version number of KSES.\n *\n * @since 1.0.0\n *\n * @return string KSES version number.\n */\nfunction wp_kses_version() {\n\treturn '0.2.2';\n}\n\n/**\n * Searches for HTML tags, no matter how malformed.\n *\n * It also matches stray `>` characters.\n *\n * @since 1.0.0\n *\n * @global array $pass_allowed_html\n * @global array $pass_allowed_protocols\n *\n * @param string   $string            Content to filter.\n * @param array    $allowed_html      Allowed HTML elements.\n * @param string[] $allowed_protocols Array of allowed URL protocols.\n * @return string Content with fixed HTML tags\n */\nfunction wp_kses_split( $string, $allowed_html, $allowed_protocols ) {\n\tglobal $pass_allowed_html, $pass_allowed_protocols;\n\t$pass_allowed_html      = $allowed_html;\n\t$pass_allowed_protocols = $allowed_protocols;\n\treturn preg_replace_callback( '%(<!--.*?(-->|$))|(<[^>]*(>|$)|>)%', '_wp_kses_split_callback', $string );\n}\n\n/**\n * Helper function listing HTML attributes containing a URL.\n *\n * This function returns a list of all HTML attributes that must contain\n * a URL according to the HTML specification.\n *\n * This list includes URI attributes both allowed and disallowed by KSES.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\n *\n * @since 5.0.1\n *\n * @return array HTML attributes that must include a URL.\n */\nfunction wp_kses_uri_attributes() {\n\t$uri_attributes = array(\n\t\t'action',\n\t\t'archive',\n\t\t'background',\n\t\t'cite',\n\t\t'classid',\n\t\t'codebase',\n\t\t'data',\n\t\t'formaction',\n\t\t'href',\n\t\t'icon',\n\t\t'longdesc',\n\t\t'manifest',\n\t\t'poster',\n\t\t'profile',\n\t\t'src',\n\t\t'usemap',\n\t\t'xmlns',\n\t);\n\n\t/**\n\t * Filters the list of attributes that are required to contain a URL.\n\t *\n\t * Use this filter to add any `data-` attributes that are required to be\n\t * validated as a URL.\n\t *\n\t * @since 5.0.1\n\t *\n\t * @param array $uri_attributes HTML attributes requiring validation as a URL.\n\t */\n\t$uri_attributes = apply_filters( 'wp_kses_uri_attributes', $uri_attributes );\n\n\treturn $uri_attributes;\n}\n\n/**\n * Callback for `wp_kses_split()`.\n *\n * @since 3.1.0\n * @access private\n * @ignore\n *\n * @global array $pass_allowed_html\n * @global array $pass_allowed_protocols\n *\n * @return string\n */\nfunction _wp_kses_split_callback( $match ) {\n\tglobal $pass_allowed_html, $pass_allowed_protocols;\n\treturn wp_kses_split2( $match[0], $pass_allowed_html, $pass_allowed_protocols );\n}\n\n/**\n * Callback for `wp_kses_split()` for fixing malformed HTML tags.\n *\n * This function does a lot of work. It rejects some very malformed things like\n * `<:::>`. It returns an empty string, if the element isn't allowed (look ma, no\n * `strip_tags()`!). Otherwise it splits the tag into an element and an attribute\n * list.\n *\n * After the tag is split into an element and an attribute list, it is run\n * through another filter which will remove illegal attributes and once that is\n * completed, will be returned.\n *\n * @access private\n * @ignore\n * @since 1.0.0\n *\n * @param string   $string            Content to filter.\n * @param array    $allowed_html      Allowed HTML elements.\n * @param string[] $allowed_protocols Array of allowed URL protocols.\n * @return string Fixed HTML element\n */\nfunction wp_kses_split2( $string, $allowed_html, $allowed_protocols ) {\n\t$string = wp_kses_stripslashes( $string );\n\n\t// It matched a \">\" character.\n\tif ( substr( $string, 0, 1 ) != '<' ) {\n\t\treturn '&gt;';\n\t}\n\n\t// Allow HTML comments.\n\tif ( '<!--' == substr( $string, 0, 4 ) ) {\n\t\t$string = str_replace( array( '<!--', '-->' ), '', $string );\n\t\twhile ( $string != ( $newstring = wp_kses( $string, $allowed_html, $allowed_protocols ) ) ) {\n\t\t\t$string = $newstring;\n\t\t}\n\t\tif ( $string == '' ) {\n\t\t\treturn '';\n\t\t}\n\t\t// prevent multiple dashes in comments\n\t\t$string = preg_replace( '/--+/', '-', $string );\n\t\t// prevent three dashes closing a comment\n\t\t$string = preg_replace( '/-$/', '', $string );\n\t\treturn \"<!--{$string}-->\";\n\t}\n\n\t// It's seriously malformed.\n\tif ( ! preg_match( '%^<\\s*(/\\s*)?([a-zA-Z0-9-]+)([^>]*)>?$%', $string, $matches ) ) {\n\t\treturn '';\n\t}\n\n\t$slash    = trim( $matches[1] );\n\t$elem     = $matches[2];\n\t$attrlist = $matches[3];\n\n\tif ( ! is_array( $allowed_html ) ) {\n\t\t$allowed_html = wp_kses_allowed_html( $allowed_html );\n\t}\n\n\t// They are using a not allowed HTML element.\n\tif ( ! isset( $allowed_html[ strtolower( $elem ) ] ) ) {\n\t\treturn '';\n\t}\n\n\t// No attributes are allowed for closing elements.\n\tif ( $slash != '' ) {\n\t\treturn \"</$elem>\";\n\t}\n\n\treturn wp_kses_attr( $elem, $attrlist, $allowed_html, $allowed_protocols );\n}\n\n/**\n * Removes all attributes, if none are allowed for this element.\n *\n * If some are allowed it calls `wp_kses_hair()` to split them further, and then\n * it builds up new HTML code from the data that `kses_hair()` returns. It also\n * removes `<` and `>` characters, if there are any left. One more thing it does\n * is to check if the tag has a closing XHTML slash, and if it does, it puts one\n * in the returned code as well.\n *\n * @since 1.0.0\n *\n * @param string   $element           HTML element/tag.\n * @param string   $attr              HTML attributes from HTML element to closing HTML element tag.\n * @param array    $allowed_html      Allowed HTML elements.\n * @param string[] $allowed_protocols Array of allowed URL protocols.\n * @return string Sanitized HTML element.\n */\nfunction wp_kses_attr( $element, $attr, $allowed_html, $allowed_protocols ) {\n\tif ( ! is_array( $allowed_html ) ) {\n\t\t$allowed_html = wp_kses_allowed_html( $allowed_html );\n\t}\n\n\t// Is there a closing XHTML slash at the end of the attributes?\n\t$xhtml_slash = '';\n\tif ( preg_match( '%\\s*/\\s*$%', $attr ) ) {\n\t\t$xhtml_slash = ' /';\n\t}\n\n\t// Are any attributes allowed at all for this element?\n\t$element_low = strtolower( $element );\n\tif ( empty( $allowed_html[ $element_low ] ) || true === $allowed_html[ $element_low ] ) {\n\t\treturn \"<$element$xhtml_slash>\";\n\t}\n\n\t// Split it\n\t$attrarr = wp_kses_hair( $attr, $allowed_protocols );\n\n\t// Go through $attrarr, and save the allowed attributes for this element\n\t// in $attr2\n\t$attr2 = '';\n\tforeach ( $attrarr as $arreach ) {\n\t\tif ( wp_kses_attr_check( $arreach['name'], $arreach['value'], $arreach['whole'], $arreach['vless'], $element, $allowed_html ) ) {\n\t\t\t$attr2 .= ' ' . $arreach['whole'];\n\t\t}\n\t}\n\n\t// Remove any \"<\" or \">\" characters\n\t$attr2 = preg_replace( '/[<>]/', '', $attr2 );\n\n\treturn \"<$element$attr2$xhtml_slash>\";\n}\n\n/**\n * Determines whether an attribute is allowed.\n *\n * @since 4.2.3\n * @since 5.0.0 Add support for `data-*` wildcard attributes.\n *\n * @param string $name         The attribute name. Passed by reference. Returns empty string when not allowed.\n * @param string $value        The attribute value. Passed by reference. Returns a filtered value.\n * @param string $whole        The `name=value` input. Passed by reference. Returns filtered input.\n * @param string $vless        Whether the attribute is valueless. Use 'y' or 'n'.\n * @param string $element      The name of the element to which this attribute belongs.\n * @param array  $allowed_html The full list of allowed elements and attributes.\n * @return bool Whether or not the attribute is allowed.\n */\nfunction wp_kses_attr_check( &$name, &$value, &$whole, $vless, $element, $allowed_html ) {\n\t$allowed_attr = $allowed_html[ strtolower( $element ) ];\n\n\t$name_low = strtolower( $name );\n\tif ( ! isset( $allowed_attr[ $name_low ] ) || '' == $allowed_attr[ $name_low ] ) {\n\t\t/*\n\t\t * Allow `data-*` attributes.\n\t\t *\n\t\t * When specifying `$allowed_html`, the attribute name should be set as\n\t\t * `data-*` (not to be mixed with the HTML 4.0 `data` attribute, see\n\t\t * https://www.w3.org/TR/html40/struct/objects.html#adef-data).\n\t\t *\n\t\t * Note: the attribute name should only contain `A-Za-z0-9_-` chars,\n\t\t * double hyphens `--` are not accepted by WordPress.\n\t\t */\n\t\tif ( strpos( $name_low, 'data-' ) === 0 && ! empty( $allowed_attr['data-*'] ) && preg_match( '/^data(?:-[a-z0-9_]+)+$/', $name_low, $match ) ) {\n\t\t\t/*\n\t\t\t * Add the whole attribute name to the allowed attributes and set any restrictions\n\t\t\t * for the `data-*` attribute values for the current element.\n\t\t\t */\n\t\t\t$allowed_attr[ $match[0] ] = $allowed_attr['data-*'];\n\t\t} else {\n\t\t\t$name  = '';\n\t\t\t$value = '';\n\t\t\t$whole = '';\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif ( 'style' == $name_low ) {\n\t\t$new_value = safecss_filter_attr( $value );\n\n\t\tif ( empty( $new_value ) ) {\n\t\t\t$name  = '';\n\t\t\t$value = '';\n\t\t\t$whole = '';\n\t\t\treturn false;\n\t\t}\n\n\t\t$whole = str_replace( $value, $new_value, $whole );\n\t\t$value = $new_value;\n\t}\n\n\tif ( is_array( $allowed_attr[ $name_low ] ) ) {\n\t\t// there are some checks\n\t\tforeach ( $allowed_attr[ $name_low ] as $currkey => $currval ) {\n\t\t\tif ( ! wp_kses_check_attr_val( $value, $vless, $currkey, $currval ) ) {\n\t\t\t\t$name  = '';\n\t\t\t\t$value = '';\n\t\t\t\t$whole = '';\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n * Builds an attribute list from string containing attributes.\n *\n * This function does a lot of work. It parses an attribute list into an array\n * with attribute data, and tries to do the right thing even if it gets weird\n * input. It will add quotes around attribute values that don't have any quotes\n * or apostrophes around them, to make it easier to produce HTML code that will\n * conform to W3C's HTML specification. It will also remove bad URL protocols\n * from attribute values. It also reduces duplicate attributes by using the\n * attribute defined first (`foo='bar' foo='baz'` will result in `foo='bar'`).\n *\n * @since 1.0.0\n *\n * @param string   $attr              Attribute list from HTML element to closing HTML element tag.\n * @param string[] $allowed_protocols Array of allowed URL protocols.\n * @return array[] Array of attribute information after parsing.\n */\nfunction wp_kses_hair( $attr, $allowed_protocols ) {\n\t$attrarr  = array();\n\t$mode     = 0;\n\t$attrname = '';\n\t$uris     = wp_kses_uri_attributes();\n\n\t// Loop through the whole attribute list\n\n\twhile ( strlen( $attr ) != 0 ) {\n\t\t$working = 0; // Was the last operation successful?\n\n\t\tswitch ( $mode ) {\n\t\t\tcase 0:\n\t\t\t\tif ( preg_match( '/^([-a-zA-Z:]+)/', $attr, $match ) ) {\n\t\t\t\t\t$attrname = $match[1];\n\t\t\t\t\t$working  = 1;\n\t\t\t\t\t$mode     = 1;\n\t\t\t\t\t$attr     = preg_replace( '/^[-a-zA-Z:]+/', '', $attr );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\tif ( preg_match( '/^\\s*=\\s*/', $attr ) ) { // equals sign\n\t\t\t\t\t$working = 1;\n\t\t\t\t\t$mode    = 2;\n\t\t\t\t\t$attr    = preg_replace( '/^\\s*=\\s*/', '', $attr );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( preg_match( '/^\\s+/', $attr ) ) { // valueless\n\t\t\t\t\t$working = 1;\n\t\t\t\t\t$mode    = 0;\n\t\t\t\t\tif ( false === array_key_exists( $attrname, $attrarr ) ) {\n\t\t\t\t\t\t$attrarr[ $attrname ] = array(\n\t\t\t\t\t\t\t'name'  => $attrname,\n\t\t\t\t\t\t\t'value' => '',\n\t\t\t\t\t\t\t'whole' => $attrname,\n\t\t\t\t\t\t\t'vless' => 'y',\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t$attr = preg_replace( '/^\\s+/', '', $attr );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tif ( preg_match( '%^\"([^\"]*)\"(\\s+|/?$)%', $attr, $match ) ) {\n\t\t\t\t\t// \"value\"\n\t\t\t\t\t$thisval = $match[1];\n\t\t\t\t\tif ( in_array( strtolower( $attrname ), $uris ) ) {\n\t\t\t\t\t\t$thisval = wp_kses_bad_protocol( $thisval, $allowed_protocols );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( false === array_key_exists( $attrname, $attrarr ) ) {\n\t\t\t\t\t\t$attrarr[ $attrname ] = array(\n\t\t\t\t\t\t\t'name'  => $attrname,\n\t\t\t\t\t\t\t'value' => $thisval,\n\t\t\t\t\t\t\t'whole' => \"$attrname=\\\"$thisval\\\"\",\n\t\t\t\t\t\t\t'vless' => 'n',\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t$working = 1;\n\t\t\t\t\t$mode    = 0;\n\t\t\t\t\t$attr    = preg_replace( '/^\"[^\"]*\"(\\s+|$)/', '', $attr );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( preg_match( \"%^'([^']*)'(\\s+|/?$)%\", $attr, $match ) ) {\n\t\t\t\t\t// 'value'\n\t\t\t\t\t$thisval = $match[1];\n\t\t\t\t\tif ( in_array( strtolower( $attrname ), $uris ) ) {\n\t\t\t\t\t\t$thisval = wp_kses_bad_protocol( $thisval, $allowed_protocols );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( false === array_key_exists( $attrname, $attrarr ) ) {\n\t\t\t\t\t\t$attrarr[ $attrname ] = array(\n\t\t\t\t\t\t\t'name'  => $attrname,\n\t\t\t\t\t\t\t'value' => $thisval,\n\t\t\t\t\t\t\t'whole' => \"$attrname='$thisval'\",\n\t\t\t\t\t\t\t'vless' => 'n',\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t$working = 1;\n\t\t\t\t\t$mode    = 0;\n\t\t\t\t\t$attr    = preg_replace( \"/^'[^']*'(\\s+|$)/\", '', $attr );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( preg_match( \"%^([^\\s\\\"']+)(\\s+|/?$)%\", $attr, $match ) ) {\n\t\t\t\t\t// value\n\t\t\t\t\t$thisval = $match[1];\n\t\t\t\t\tif ( in_array( strtolower( $attrname ), $uris ) ) {\n\t\t\t\t\t\t$thisval = wp_kses_bad_protocol( $thisval, $allowed_protocols );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( false === array_key_exists( $attrname, $attrarr ) ) {\n\t\t\t\t\t\t$attrarr[ $attrname ] = array(\n\t\t\t\t\t\t\t'name'  => $attrname,\n\t\t\t\t\t\t\t'value' => $thisval,\n\t\t\t\t\t\t\t'whole' => \"$attrname=\\\"$thisval\\\"\",\n\t\t\t\t\t\t\t'vless' => 'n',\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t// We add quotes to conform to W3C's HTML spec.\n\t\t\t\t\t$working = 1;\n\t\t\t\t\t$mode    = 0;\n\t\t\t\t\t$attr    = preg_replace( \"%^[^\\s\\\"']+(\\s+|$)%\", '', $attr );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t} // switch\n\n\t\tif ( $working == 0 ) { // not well formed, remove and try again\n\t\t\t$attr = wp_kses_html_error( $attr );\n\t\t\t$mode = 0;\n\t\t}\n\t} // while\n\n\tif ( $mode == 1 && false === array_key_exists( $attrname, $attrarr ) ) {\n\t\t// special case, for when the attribute list ends with a valueless\n\t\t// attribute like \"selected\"\n\t\t$attrarr[ $attrname ] = array(\n\t\t\t'name'  => $attrname,\n\t\t\t'value' => '',\n\t\t\t'whole' => $attrname,\n\t\t\t'vless' => 'y',\n\t\t);\n\t}\n\n\treturn $attrarr;\n}\n\n/**\n * Finds all attributes of an HTML element.\n *\n * Does not modify input.  May return \"evil\" output.\n *\n * Based on `wp_kses_split2()` and `wp_kses_attr()`.\n *\n * @since 4.2.3\n *\n * @param string $element HTML element.\n * @return array|bool List of attributes found in the element. Returns false on failure.\n */\nfunction wp_kses_attr_parse( $element ) {\n\t$valid = preg_match( '%^(<\\s*)(/\\s*)?([a-zA-Z0-9]+\\s*)([^>]*)(>?)$%', $element, $matches );\n\tif ( 1 !== $valid ) {\n\t\treturn false;\n\t}\n\n\t$begin  = $matches[1];\n\t$slash  = $matches[2];\n\t$elname = $matches[3];\n\t$attr   = $matches[4];\n\t$end    = $matches[5];\n\n\tif ( '' !== $slash ) {\n\t\t// Closing elements do not get parsed.\n\t\treturn false;\n\t}\n\n\t// Is there a closing XHTML slash at the end of the attributes?\n\tif ( 1 === preg_match( '%\\s*/\\s*$%', $attr, $matches ) ) {\n\t\t$xhtml_slash = $matches[0];\n\t\t$attr        = substr( $attr, 0, -strlen( $xhtml_slash ) );\n\t} else {\n\t\t$xhtml_slash = '';\n\t}\n\n\t// Split it\n\t$attrarr = wp_kses_hair_parse( $attr );\n\tif ( false === $attrarr ) {\n\t\treturn false;\n\t}\n\n\t// Make sure all input is returned by adding front and back matter.\n\tarray_unshift( $attrarr, $begin . $slash . $elname );\n\tarray_push( $attrarr, $xhtml_slash . $end );\n\n\treturn $attrarr;\n}\n\n/**\n * Builds an attribute list from string containing attributes.\n *\n * Does not modify input.  May return \"evil\" output.\n * In case of unexpected input, returns false instead of stripping things.\n *\n * Based on `wp_kses_hair()` but does not return a multi-dimensional array.\n *\n * @since 4.2.3\n *\n * @param string $attr Attribute list from HTML element to closing HTML element tag.\n * @return array|bool List of attributes found in $attr. Returns false on failure.\n */\nfunction wp_kses_hair_parse( $attr ) {\n\tif ( '' === $attr ) {\n\t\treturn array();\n\t}\n\n\t// phpcs:disable Squiz.Strings.ConcatenationSpacing.PaddingFound -- don't remove regex indentation\n\t$regex =\n\t'(?:'\n\t.     '[-a-zA-Z:]+'   // Attribute name.\n\t. '|'\n\t.     '\\[\\[?[^\\[\\]]+\\]\\]?' // Shortcode in the name position implies unfiltered_html.\n\t. ')'\n\t. '(?:'               // Attribute value.\n\t.     '\\s*=\\s*'       // All values begin with '='\n\t.     '(?:'\n\t.         '\"[^\"]*\"'   // Double-quoted\n\t.     '|'\n\t.         \"'[^']*'\"   // Single-quoted\n\t.     '|'\n\t.         '[^\\s\"\\']+' // Non-quoted\n\t.         '(?:\\s|$)'  // Must have a space\n\t.     ')'\n\t. '|'\n\t.     '(?:\\s|$)'      // If attribute has no value, space is required.\n\t. ')'\n\t. '\\s*';              // Trailing space is optional except as mentioned above.\n\t// phpcs:enable\n\n\t// Although it is possible to reduce this procedure to a single regexp,\n\t// we must run that regexp twice to get exactly the expected result.\n\n\t$validation = \"%^($regex)+$%\";\n\t$extraction = \"%$regex%\";\n\n\tif ( 1 === preg_match( $validation, $attr ) ) {\n\t\tpreg_match_all( $extraction, $attr, $attrarr );\n\t\treturn $attrarr[0];\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/**\n * Performs different checks for attribute values.\n *\n * The currently implemented checks are \"maxlen\", \"minlen\", \"maxval\", \"minval\",\n * and \"valueless\".\n *\n * @since 1.0.0\n *\n * @param string $value      Attribute value.\n * @param string $vless      Whether the attribute is valueless. Use 'y' or 'n'.\n * @param string $checkname  What $checkvalue is checking for.\n * @param mixed  $checkvalue What constraint the value should pass.\n * @return bool Whether check passes.\n */\nfunction wp_kses_check_attr_val( $value, $vless, $checkname, $checkvalue ) {\n\t$ok = true;\n\n\tswitch ( strtolower( $checkname ) ) {\n\t\tcase 'maxlen':\n\t\t\t// The maxlen check makes sure that the attribute value has a length not\n\t\t\t// greater than the given value. This can be used to avoid Buffer Overflows\n\t\t\t// in WWW clients and various Internet servers.\n\n\t\t\tif ( strlen( $value ) > $checkvalue ) {\n\t\t\t\t$ok = false;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'minlen':\n\t\t\t// The minlen check makes sure that the attribute value has a length not\n\t\t\t// smaller than the given value.\n\n\t\t\tif ( strlen( $value ) < $checkvalue ) {\n\t\t\t\t$ok = false;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'maxval':\n\t\t\t// The maxval check does two things: it checks that the attribute value is\n\t\t\t// an integer from 0 and up, without an excessive amount of zeroes or\n\t\t\t// whitespace (to avoid Buffer Overflows). It also checks that the attribute\n\t\t\t// value is not greater than the given value.\n\t\t\t// This check can be used to avoid Denial of Service attacks.\n\n\t\t\tif ( ! preg_match( '/^\\s{0,6}[0-9]{1,6}\\s{0,6}$/', $value ) ) {\n\t\t\t\t$ok = false;\n\t\t\t}\n\t\t\tif ( $value > $checkvalue ) {\n\t\t\t\t$ok = false;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'minval':\n\t\t\t// The minval check makes sure that the attribute value is a positive integer,\n\t\t\t// and that it is not smaller than the given value.\n\n\t\t\tif ( ! preg_match( '/^\\s{0,6}[0-9]{1,6}\\s{0,6}$/', $value ) ) {\n\t\t\t\t$ok = false;\n\t\t\t}\n\t\t\tif ( $value < $checkvalue ) {\n\t\t\t\t$ok = false;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'valueless':\n\t\t\t// The valueless check makes sure if the attribute has a value\n\t\t\t// (like `<a href=\"blah\">`) or not (`<option selected>`). If the given value\n\t\t\t// is a \"y\" or a \"Y\", the attribute must not have a value.\n\t\t\t// If the given value is an \"n\" or an \"N\", the attribute must have a value.\n\n\t\t\tif ( strtolower( $checkvalue ) != $vless ) {\n\t\t\t\t$ok = false;\n\t\t\t}\n\t\t\tbreak;\n\t} // switch\n\n\treturn $ok;\n}\n\n/**\n * Sanitizes a string and removed disallowed URL protocols.\n *\n * This function removes all non-allowed protocols from the beginning of the\n * string. It ignores whitespace and the case of the letters, and it does\n * understand HTML entities. It does its work recursively, so it won't be\n * fooled by a string like `javascript:javascript:alert(57)`.\n *\n * @since 1.0.0\n *\n * @param string   $string            Content to filter bad protocols from.\n * @param string[] $allowed_protocols Array of allowed URL protocols.\n * @return string Filtered content.\n */\nfunction wp_kses_bad_protocol( $string, $allowed_protocols ) {\n\t$string     = wp_kses_no_null( $string );\n\t$iterations = 0;\n\n\tdo {\n\t\t$original_string = $string;\n\t\t$string          = wp_kses_bad_protocol_once( $string, $allowed_protocols );\n\t} while ( $original_string != $string && ++$iterations < 6 );\n\n\tif ( $original_string != $string ) {\n\t\treturn '';\n\t}\n\n\treturn $string;\n}\n\n/**\n * Removes any invalid control characters in a text string.\n *\n * Also removes any instance of the `\\0` string.\n *\n * @since 1.0.0\n *\n * @param string $string  Content to filter null characters from.\n * @param array  $options Set 'slash_zero' => 'keep' when '\\0' is allowed. Default is 'remove'.\n * @return string Filtered content.\n */\nfunction wp_kses_no_null( $string, $options = null ) {\n\tif ( ! isset( $options['slash_zero'] ) ) {\n\t\t$options = array( 'slash_zero' => 'remove' );\n\t}\n\n\t$string = preg_replace( '/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F]/', '', $string );\n\tif ( 'remove' == $options['slash_zero'] ) {\n\t\t$string = preg_replace( '/\\\\\\\\+0+/', '', $string );\n\t}\n\n\treturn $string;\n}\n\n/**\n * Strips slashes from in front of quotes.\n *\n * This function changes the character sequence `\\\"` to just `\"`. It leaves all other\n * slashes alone. The quoting from `preg_replace(//e)` requires this.\n *\n * @since 1.0.0\n *\n * @param string $string String to strip slashes from.\n * @return string Fixed string with quoted slashes.\n */\nfunction wp_kses_stripslashes( $string ) {\n\treturn preg_replace( '%\\\\\\\\\"%', '\"', $string );\n}\n\n/**\n * Converts the keys of an array to lowercase.\n *\n * @since 1.0.0\n *\n * @param array $inarray Unfiltered array.\n * @return array Fixed array with all lowercase keys.\n */\nfunction wp_kses_array_lc( $inarray ) {\n\t$outarray = array();\n\n\tforeach ( (array) $inarray as $inkey => $inval ) {\n\t\t$outkey              = strtolower( $inkey );\n\t\t$outarray[ $outkey ] = array();\n\n\t\tforeach ( (array) $inval as $inkey2 => $inval2 ) {\n\t\t\t$outkey2                         = strtolower( $inkey2 );\n\t\t\t$outarray[ $outkey ][ $outkey2 ] = $inval2;\n\t\t}\n\t}\n\n\treturn $outarray;\n}\n\n/**\n * Handles parsing errors in `wp_kses_hair()`.\n *\n * The general plan is to remove everything to and including some whitespace,\n * but it deals with quotes and apostrophes as well.\n *\n * @since 1.0.0\n *\n * @param string $string\n * @return string\n */\nfunction wp_kses_html_error( $string ) {\n\treturn preg_replace( '/^(\"[^\"]*(\"|$)|\\'[^\\']*(\\'|$)|\\S)*\\s*/', '', $string );\n}\n\n/**\n * Sanitizes content from bad protocols and other characters.\n *\n * This function searches for URL protocols at the beginning of the string, while\n * handling whitespace and HTML entities.\n *\n * @since 1.0.0\n *\n * @param string   $string            Content to check for bad protocols.\n * @param string[] $allowed_protocols Array of allowed URL protocols.\n * @return string Sanitized content.\n */\nfunction wp_kses_bad_protocol_once( $string, $allowed_protocols, $count = 1 ) {\n\t$string  = preg_replace( '/(&#0*58(?![;0-9])|&#x0*3a(?![;a-f0-9]))/i', '$1;', $string );\n\t$string2 = preg_split( '/:|&#0*58;|&#x0*3a;|&colon;/i', $string, 2 );\n\tif ( isset( $string2[1] ) && ! preg_match( '%/\\?%', $string2[0] ) ) {\n\t\t$string   = trim( $string2[1] );\n\t\t$protocol = wp_kses_bad_protocol_once2( $string2[0], $allowed_protocols );\n\t\tif ( 'feed:' == $protocol ) {\n\t\t\tif ( $count > 2 ) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\t$string = wp_kses_bad_protocol_once( $string, $allowed_protocols, ++$count );\n\t\t\tif ( empty( $string ) ) {\n\t\t\t\treturn $string;\n\t\t\t}\n\t\t}\n\t\t$string = $protocol . $string;\n\t}\n\n\treturn $string;\n}\n\n/**\n * Callback for `wp_kses_bad_protocol_once()` regular expression.\n *\n * This function processes URL protocols, checks to see if they're in the\n * whitelist or not, and returns different data depending on the answer.\n *\n * @access private\n * @ignore\n * @since 1.0.0\n *\n * @param string   $string            URI scheme to check against the whitelist.\n * @param string[] $allowed_protocols Array of allowed URL protocols.\n * @return string Sanitized content.\n */\nfunction wp_kses_bad_protocol_once2( $string, $allowed_protocols ) {\n\t$string2 = wp_kses_decode_entities( $string );\n\t$string2 = preg_replace( '/\\s/', '', $string2 );\n\t$string2 = wp_kses_no_null( $string2 );\n\t$string2 = strtolower( $string2 );\n\n\t$allowed = false;\n\tforeach ( (array) $allowed_protocols as $one_protocol ) {\n\t\tif ( strtolower( $one_protocol ) == $string2 ) {\n\t\t\t$allowed = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif ( $allowed ) {\n\t\treturn \"$string2:\";\n\t} else {\n\t\treturn '';\n\t}\n}\n\n/**\n * Converts and fixes HTML entities.\n *\n * This function normalizes HTML entities. It will convert `AT&T` to the correct\n * `AT&amp;T`, `&#00058;` to `&#58;`, `&#XYZZY;` to `&amp;#XYZZY;` and so on.\n *\n * @since 1.0.0\n *\n * @param string $string Content to normalize entities.\n * @return string Content with normalized entities.\n */\nfunction wp_kses_normalize_entities( $string ) {\n\t// Disarm all entities by converting & to &amp;\n\t$string = str_replace( '&', '&amp;', $string );\n\n\t// Change back the allowed entities in our entity whitelist\n\t$string = preg_replace_callback( '/&amp;([A-Za-z]{2,8}[0-9]{0,2});/', 'wp_kses_named_entities', $string );\n\t$string = preg_replace_callback( '/&amp;#(0*[0-9]{1,7});/', 'wp_kses_normalize_entities2', $string );\n\t$string = preg_replace_callback( '/&amp;#[Xx](0*[0-9A-Fa-f]{1,6});/', 'wp_kses_normalize_entities3', $string );\n\n\treturn $string;\n}\n\n/**\n * Callback for `wp_kses_normalize_entities()` regular expression.\n *\n * This function only accepts valid named entity references, which are finite,\n * case-sensitive, and highly scrutinized by HTML and XML validators.\n *\n * @since 3.0.0\n *\n * @global array $allowedentitynames\n *\n * @param array $matches preg_replace_callback() matches array.\n * @return string Correctly encoded entity.\n */\nfunction wp_kses_named_entities( $matches ) {\n\tglobal $allowedentitynames;\n\n\tif ( empty( $matches[1] ) ) {\n\t\treturn '';\n\t}\n\n\t$i = $matches[1];\n\treturn ( ! in_array( $i, $allowedentitynames ) ) ? \"&amp;$i;\" : \"&$i;\";\n}\n\n/**\n * Callback for `wp_kses_normalize_entities()` regular expression.\n *\n * This function helps `wp_kses_normalize_entities()` to only accept 16-bit\n * values and nothing more for `&#number;` entities.\n *\n * @access private\n * @ignore\n * @since 1.0.0\n *\n * @param array $matches `preg_replace_callback()` matches array.\n * @return string Correctly encoded entity.\n */\nfunction wp_kses_normalize_entities2( $matches ) {\n\tif ( empty( $matches[1] ) ) {\n\t\treturn '';\n\t}\n\n\t$i = $matches[1];\n\tif ( valid_unicode( $i ) ) {\n\t\t$i = str_pad( ltrim( $i, '0' ), 3, '0', STR_PAD_LEFT );\n\t\t$i = \"&#$i;\";\n\t} else {\n\t\t$i = \"&amp;#$i;\";\n\t}\n\n\treturn $i;\n}\n\n/**\n * Callback for `wp_kses_normalize_entities()` for regular expression.\n *\n * This function helps `wp_kses_normalize_entities()` to only accept valid Unicode\n * numeric entities in hex form.\n *\n * @since 2.7.0\n * @access private\n * @ignore\n *\n * @param array $matches `preg_replace_callback()` matches array.\n * @return string Correctly encoded entity.\n */\nfunction wp_kses_normalize_entities3( $matches ) {\n\tif ( empty( $matches[1] ) ) {\n\t\treturn '';\n\t}\n\n\t$hexchars = $matches[1];\n\treturn ( ! valid_unicode( hexdec( $hexchars ) ) ) ? \"&amp;#x$hexchars;\" : '&#x' . ltrim( $hexchars, '0' ) . ';';\n}\n\n/**\n * Determines if a Unicode codepoint is valid.\n *\n * @since 2.7.0\n *\n * @param int $i Unicode codepoint.\n * @return bool Whether or not the codepoint is a valid Unicode codepoint.\n */\nfunction valid_unicode( $i ) {\n\treturn ( $i == 0x9 || $i == 0xa || $i == 0xd ||\n\t\t\t( $i >= 0x20 && $i <= 0xd7ff ) ||\n\t\t\t( $i >= 0xe000 && $i <= 0xfffd ) ||\n\t\t\t( $i >= 0x10000 && $i <= 0x10ffff ) );\n}\n\n/**\n * Converts all numeric HTML entities to their named counterparts.\n *\n * This function decodes numeric HTML entities (`&#65;` and `&#x41;`).\n * It doesn't do anything with named entities like `&auml;`, but we don't\n * need them in the URL protocol whitelisting system anyway.\n *\n * @since 1.0.0\n *\n * @param string $string Content to change entities.\n * @return string Content after decoded entities.\n */\nfunction wp_kses_decode_entities( $string ) {\n\t$string = preg_replace_callback( '/&#([0-9]+);/', '_wp_kses_decode_entities_chr', $string );\n\t$string = preg_replace_callback( '/&#[Xx]([0-9A-Fa-f]+);/', '_wp_kses_decode_entities_chr_hexdec', $string );\n\n\treturn $string;\n}\n\n/**\n * Regex callback for `wp_kses_decode_entities()`.\n *\n * @since 2.9.0\n * @access private\n * @ignore\n *\n * @param array $match preg match\n * @return string\n */\nfunction _wp_kses_decode_entities_chr( $match ) {\n\treturn chr( $match[1] );\n}\n\n/**\n * Regex callback for `wp_kses_decode_entities()`.\n *\n * @since 2.9.0\n * @access private\n * @ignore\n *\n * @param array $match preg match\n * @return string\n */\nfunction _wp_kses_decode_entities_chr_hexdec( $match ) {\n\treturn chr( hexdec( $match[1] ) );\n}\n\n/**\n * Sanitize content with allowed HTML KSES rules.\n *\n * This function expects slashed data.\n *\n * @since 1.0.0\n *\n * @param string $data Content to filter, expected to be escaped with slashes.\n * @return string Filtered content.\n */\nfunction wp_filter_kses( $data ) {\n\treturn addslashes( wp_kses( stripslashes( $data ), current_filter() ) );\n}\n\n/**\n * Sanitize content with allowed HTML KSES rules.\n *\n * This function expects unslashed data.\n *\n * @since 2.9.0\n *\n * @param string $data Content to filter, expected to not be escaped.\n * @return string Filtered content.\n */\nfunction wp_kses_data( $data ) {\n\treturn wp_kses( $data, current_filter() );\n}\n\n/**\n * Sanitizes content for allowed HTML tags for post content.\n *\n * Post content refers to the page contents of the 'post' type and not `$_POST`\n * data from forms.\n *\n * This function expects slashed data.\n *\n * @since 2.0.0\n *\n * @param string $data Post content to filter, expected to be escaped with slashes.\n * @return string Filtered post content with allowed HTML tags and attributes intact.\n */\nfunction wp_filter_post_kses( $data ) {\n\treturn addslashes( wp_kses( stripslashes( $data ), 'post' ) );\n}\n\n/**\n * Sanitizes content for allowed HTML tags for post content.\n *\n * Post content refers to the page contents of the 'post' type and not `$_POST`\n * data from forms.\n *\n * This function expects unslashed data.\n *\n * @since 2.9.0\n *\n * @param string $data Post content to filter.\n * @return string Filtered post content with allowed HTML tags and attributes intact.\n */\nfunction wp_kses_post( $data ) {\n\treturn wp_kses( $data, 'post' );\n}\n\n/**\n * Navigates through an array, object, or scalar, and sanitizes content for\n * allowed HTML tags for post content.\n *\n * @since 4.4.2\n *\n * @see map_deep()\n *\n * @param mixed $data The array, object, or scalar value to inspect.\n * @return mixed The filtered content.\n */\nfunction wp_kses_post_deep( $data ) {\n\treturn map_deep( $data, 'wp_kses_post' );\n}\n\n/**\n * Strips all HTML from a text string.\n *\n * This function expects slashed data.\n *\n * @since 2.1.0\n *\n * @param string $data Content to strip all HTML from.\n * @return string Filtered content without any HTML.\n */\nfunction wp_filter_nohtml_kses( $data ) {\n\treturn addslashes( wp_kses( stripslashes( $data ), 'strip' ) );\n}\n\n/**\n * Adds all KSES input form content filters.\n *\n * All hooks have default priority. The `wp_filter_kses()` function is added to\n * the 'pre_comment_content' and 'title_save_pre' hooks.\n *\n * The `wp_filter_post_kses()` function is added to the 'content_save_pre',\n * 'excerpt_save_pre', and 'content_filtered_save_pre' hooks.\n *\n * @since 2.0.0\n */\nfunction kses_init_filters() {\n\t// Normal filtering\n\tadd_filter( 'title_save_pre', 'wp_filter_kses' );\n\n\t// Comment filtering\n\tif ( current_user_can( 'unfiltered_html' ) ) {\n\t\tadd_filter( 'pre_comment_content', 'wp_filter_post_kses' );\n\t} else {\n\t\tadd_filter( 'pre_comment_content', 'wp_filter_kses' );\n\t}\n\n\t// Post filtering\n\tadd_filter( 'content_save_pre', 'wp_filter_post_kses' );\n\tadd_filter( 'excerpt_save_pre', 'wp_filter_post_kses' );\n\tadd_filter( 'content_filtered_save_pre', 'wp_filter_post_kses' );\n}\n\n/**\n * Removes all KSES input form content filters.\n *\n * A quick procedural method to removing all of the filters that KSES uses for\n * content in WordPress Loop.\n *\n * Does not remove the `kses_init()` function from {@see 'init'} hook (priority is\n * default). Also does not remove `kses_init()` function from {@see 'set_current_user'}\n * hook (priority is also default).\n *\n * @since 2.0.6\n */\nfunction kses_remove_filters() {\n\t// Normal filtering\n\tremove_filter( 'title_save_pre', 'wp_filter_kses' );\n\n\t// Comment filtering\n\tremove_filter( 'pre_comment_content', 'wp_filter_post_kses' );\n\tremove_filter( 'pre_comment_content', 'wp_filter_kses' );\n\n\t// Post filtering\n\tremove_filter( 'content_save_pre', 'wp_filter_post_kses' );\n\tremove_filter( 'excerpt_save_pre', 'wp_filter_post_kses' );\n\tremove_filter( 'content_filtered_save_pre', 'wp_filter_post_kses' );\n}\n\n/**\n * Sets up most of the KSES filters for input form content.\n *\n * First removes all of the KSES filters in case the current user does not need\n * to have KSES filter the content. If the user does not have `unfiltered_html`\n * capability, then KSES filters are added.\n *\n * @since 2.0.0\n */\nfunction kses_init() {\n\tkses_remove_filters();\n\n\tif ( ! current_user_can( 'unfiltered_html' ) ) {\n\t\tkses_init_filters();\n\t}\n}\n\n/**\n * Filters an inline style attribute and removes disallowed rules.\n *\n * @since 2.8.1\n *\n * @param string $css        A string of CSS rules.\n * @param string $deprecated Not used.\n * @return string Filtered string of CSS rules.\n */\nfunction safecss_filter_attr( $css, $deprecated = '' ) {\n\tif ( ! empty( $deprecated ) ) {\n\t\t_deprecated_argument( __FUNCTION__, '2.8.1' ); // Never implemented\n\t}\n\n\t$css = wp_kses_no_null( $css );\n\t$css = str_replace( array( \"\\n\", \"\\r\", \"\\t\" ), '', $css );\n\n\t$allowed_protocols = wp_allowed_protocols();\n\n\t$css_array = explode( ';', trim( $css ) );\n\n\t/**\n\t * Filters list of allowed CSS attributes.\n\t *\n\t * @since 2.8.1\n\t * @since 4.4.0 Added support for `min-height`, `max-height`, `min-width`, and `max-width`.\n\t * @since 4.6.0 Added support for `list-style-type`.\n\t * @since 5.0.0 Added support for `background-image`.\n\t * @since 5.1.0 Added support for `text-transform`.\n\t * @since 5.2.0 Added support for `background-position` and `grid-template-columns`\n\t * @since 5.3.0 Added support for `grid`, `flex` and `column` layout properties.\n\t *              Extend `background-*` support of individual properties.\n\t * @since 5.3.1 Added support for gradient backgrounds.\n\t *\n\t * @param string[] $attr Array of allowed CSS attributes.\n\t */\n\t$allowed_attr = apply_filters(\n\t\t'safe_style_css',\n\t\tarray(\n\t\t\t'background',\n\t\t\t'background-color',\n\t\t\t'background-image',\n\t\t\t'background-position',\n\t\t\t'background-size',\n\t\t\t'background-attachment',\n\t\t\t'background-blend-mode',\n\n\t\t\t'border',\n\t\t\t'border-radius',\n\t\t\t'border-width',\n\t\t\t'border-color',\n\t\t\t'border-style',\n\t\t\t'border-right',\n\t\t\t'border-right-color',\n\t\t\t'border-right-style',\n\t\t\t'border-right-width',\n\t\t\t'border-bottom',\n\t\t\t'border-bottom-color',\n\t\t\t'border-bottom-style',\n\t\t\t'border-bottom-width',\n\t\t\t'border-left',\n\t\t\t'border-left-color',\n\t\t\t'border-left-style',\n\t\t\t'border-left-width',\n\t\t\t'border-top',\n\t\t\t'border-top-color',\n\t\t\t'border-top-style',\n\t\t\t'border-top-width',\n\n\t\t\t'border-spacing',\n\t\t\t'border-collapse',\n\t\t\t'caption-side',\n\n\t\t\t'columns',\n\t\t\t'column-count',\n\t\t\t'column-fill',\n\t\t\t'column-gap',\n\t\t\t'column-rule',\n\t\t\t'column-span',\n\t\t\t'column-width',\n\n\t\t\t'color',\n\t\t\t'font',\n\t\t\t'font-family',\n\t\t\t'font-size',\n\t\t\t'font-style',\n\t\t\t'font-variant',\n\t\t\t'font-weight',\n\t\t\t'letter-spacing',\n\t\t\t'line-height',\n\t\t\t'text-align',\n\t\t\t'text-decoration',\n\t\t\t'text-indent',\n\t\t\t'text-transform',\n\n\t\t\t'height',\n\t\t\t'min-height',\n\t\t\t'max-height',\n\n\t\t\t'width',\n\t\t\t'min-width',\n\t\t\t'max-width',\n\n\t\t\t'margin',\n\t\t\t'margin-right',\n\t\t\t'margin-bottom',\n\t\t\t'margin-left',\n\t\t\t'margin-top',\n\n\t\t\t'padding',\n\t\t\t'padding-right',\n\t\t\t'padding-bottom',\n\t\t\t'padding-left',\n\t\t\t'padding-top',\n\n\t\t\t'flex',\n\t\t\t'flex-basis',\n\t\t\t'flex-direction',\n\t\t\t'flex-flow',\n\t\t\t'flex-grow',\n\t\t\t'flex-shrink',\n\n\t\t\t'grid-template-columns',\n\t\t\t'grid-auto-columns',\n\t\t\t'grid-column-start',\n\t\t\t'grid-column-end',\n\t\t\t'grid-column-gap',\n\t\t\t'grid-template-rows',\n\t\t\t'grid-auto-rows',\n\t\t\t'grid-row-start',\n\t\t\t'grid-row-end',\n\t\t\t'grid-row-gap',\n\t\t\t'grid-gap',\n\n\t\t\t'justify-content',\n\t\t\t'justify-items',\n\t\t\t'justify-self',\n\t\t\t'align-content',\n\t\t\t'align-items',\n\t\t\t'align-self',\n\n\t\t\t'clear',\n\t\t\t'cursor',\n\t\t\t'direction',\n\t\t\t'float',\n\t\t\t'overflow',\n\t\t\t'vertical-align',\n\t\t\t'list-style-type',\n\t\t)\n\t);\n\n\t/*\n\t * CSS attributes that accept URL data types.\n\t *\n\t * This is in accordance to the CSS spec and unrelated to\n\t * the sub-set of supported attributes above.\n\t *\n\t * See: https://developer.mozilla.org/en-US/docs/Web/CSS/url\n\t */\n\t$css_url_data_types = array(\n\t\t'background',\n\t\t'background-image',\n\n\t\t'cursor',\n\n\t\t'list-style',\n\t\t'list-style-image',\n\t);\n\n\t/*\n\t * CSS attributes that accept gradient data types.\n\t *\n\t */\n\t$css_gradient_data_types = array(\n\t\t'background',\n\t\t'background-image',\n\t);\n\n\tif ( empty( $allowed_attr ) ) {\n\t\treturn $css;\n\t}\n\n\t$css = '';\n\tforeach ( $css_array as $css_item ) {\n\t\tif ( $css_item == '' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t$css_item        = trim( $css_item );\n\t\t$css_test_string = $css_item;\n\t\t$found           = false;\n\t\t$url_attr        = false;\n\t\t$gradient_attr   = false;\n\n\t\tif ( strpos( $css_item, ':' ) === false ) {\n\t\t\t$found = true;\n\t\t} else {\n\t\t\t$parts        = explode( ':', $css_item, 2 );\n\t\t\t$css_selector = trim( $parts[0] );\n\n\t\t\tif ( in_array( $css_selector, $allowed_attr, true ) ) {\n\t\t\t\t$found         = true;\n\t\t\t\t$url_attr      = in_array( $css_selector, $css_url_data_types, true );\n\t\t\t\t$gradient_attr = in_array( $css_selector, $css_gradient_data_types, true );\n\t\t\t}\n\t\t}\n\n\t\tif ( $found && $url_attr ) {\n\t\t\t// Simplified: matches the sequence `url(*)`.\n\t\t\tpreg_match_all( '/url\\([^)]+\\)/', $parts[1], $url_matches );\n\n\t\t\tforeach ( $url_matches[0] as $url_match ) {\n\t\t\t\t// Clean up the URL from each of the matches above.\n\t\t\t\tpreg_match( '/^url\\(\\s*([\\'\\\"]?)(.*)(\\g1)\\s*\\)$/', $url_match, $url_pieces );\n\n\t\t\t\tif ( empty( $url_pieces[2] ) ) {\n\t\t\t\t\t$found = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$url = trim( $url_pieces[2] );\n\n\t\t\t\tif ( empty( $url ) || $url !== wp_kses_bad_protocol( $url, $allowed_protocols ) ) {\n\t\t\t\t\t$found = false;\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t// Remove the whole `url(*)` bit that was matched above from the CSS.\n\t\t\t\t\t$css_test_string = str_replace( $url_match, '', $css_test_string );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( $found && $gradient_attr ) {\n\t\t\t$css_value = trim( $parts[1] );\n\t\t\tif ( preg_match( '/^(repeating-)?(linear|radial|conic)-gradient\\(([^()]|rgb[a]?\\([^()]*\\))*\\)$/', $css_value ) ) {\n\t\t\t\t// Remove the whole `gradient` bit that was matched above from the CSS.\n\t\t\t\t$css_test_string = str_replace( $css_value, '', $css_test_string );\n\t\t\t}\n\t\t}\n\n\t\t// Remove any CSS containing containing \\ ( & } = or comments, except for url() useage checked above.\n\t\tif ( $found && ! preg_match( '%[\\\\\\(&=}]|/\\*%', $css_test_string ) ) {\n\t\t\tif ( $css != '' ) {\n\t\t\t\t$css .= ';';\n\t\t\t}\n\n\t\t\t$css .= $css_item;\n\t\t}\n\t}\n\n\treturn $css;\n}\n\n/**\n * Helper function to add global attributes to a tag in the allowed html list.\n *\n * @since 3.5.0\n * @since 5.0.0 Add support for `data-*` wildcard attributes.\n * @access private\n * @ignore\n *\n * @param array $value An array of attributes.\n * @return array The array of attributes with global attributes added.\n */\nfunction _wp_add_global_attributes( $value ) {\n\t$global_attributes = array(\n\t\t'aria-describedby' => true,\n\t\t'aria-details'     => true,\n\t\t'aria-label'       => true,\n\t\t'aria-labelledby'  => true,\n\t\t'aria-hidden'      => true,\n\t\t'class'            => true,\n\t\t'id'               => true,\n\t\t'style'            => true,\n\t\t'title'            => true,\n\t\t'role'             => true,\n\t\t'data-*'           => true,\n\t);\n\n\tif ( true === $value ) {\n\t\t$value = array();\n\t}\n\n\tif ( is_array( $value ) ) {\n\t\treturn array_merge( $value, $global_attributes );\n\t}\n\n\treturn $value;\n}\n", "<?php\n/**\n * Some simple test cases for KSES post content filtering\n *\n * @group formatting\n * @group kses\n */\nclass Tests_Kses extends WP_UnitTestCase {\n\n\t/**\n\t * @ticket 20210\n\t */\n\tfunction test_wp_filter_post_kses_address() {\n\t\tglobal $allowedposttags;\n\n\t\t$attributes = array(\n\t\t\t'class' => 'classname',\n\t\t\t'id'    => 'id',\n\t\t\t'style' => 'color: red;',\n\t\t\t'style' => 'color: red',\n\t\t\t'style' => 'color: red; text-align:center',\n\t\t\t'style' => 'color: red; text-align:center;',\n\t\t\t'title' => 'title',\n\t\t);\n\n\t\tforeach ( $attributes as $name => $value ) {\n\t\t\t$string        = \"<address $name='$value'>1 WordPress Avenue, The Internet.</address>\";\n\t\t\t$expect_string = \"<address $name='\" . str_replace( '; ', ';', trim( $value, ';' ) ) . \"'>1 WordPress Avenue, The Internet.</address>\";\n\t\t\t$this->assertEquals( $expect_string, wp_kses( $string, $allowedposttags ) );\n\t\t}\n\t}\n\n\t/**\n\t * @ticket 20210\n\t */\n\tfunction test_wp_filter_post_kses_a() {\n\t\tglobal $allowedposttags;\n\n\t\t$attributes = array(\n\t\t\t'class'    => 'classname',\n\t\t\t'id'       => 'id',\n\t\t\t'style'    => 'color: red;',\n\t\t\t'title'    => 'title',\n\t\t\t'href'     => 'http://example.com',\n\t\t\t'rel'      => 'related',\n\t\t\t'rev'      => 'revision',\n\t\t\t'name'     => 'name',\n\t\t\t'target'   => '_blank',\n\t\t\t'download' => '',\n\t\t);\n\n\t\tforeach ( $attributes as $name => $value ) {\n\t\t\tif ( $value ) {\n\t\t\t\t$attr          = \"$name='$value'\";\n\t\t\t\t$expected_attr = \"$name='\" . trim( $value, ';' ) . \"'\";\n\t\t\t} else {\n\t\t\t\t$attr          = $name;\n\t\t\t\t$expected_attr = $name;\n\t\t\t}\n\t\t\t$string        = \"<a $attr>I link this</a>\";\n\t\t\t$expect_string = \"<a $expected_attr>I link this</a>\";\n\t\t\t$this->assertEquals( $expect_string, wp_kses( $string, $allowedposttags ) );\n\t\t}\n\t}\n\n\t/**\n\t * @ticket 20210\n\t */\n\tfunction test_wp_filter_post_kses_abbr() {\n\t\tglobal $allowedposttags;\n\n\t\t$attributes = array(\n\t\t\t'class' => 'classname',\n\t\t\t'id'    => 'id',\n\t\t\t'style' => 'color: red;',\n\t\t\t'title' => 'title',\n\t\t);\n\n\t\tforeach ( $attributes as $name => $value ) {\n\t\t\t$string        = \"<abbr $name='$value'>WP</abbr>\";\n\t\t\t$expect_string = \"<abbr $name='\" . trim( $value, ';' ) . \"'>WP</abbr>\";\n\t\t\t$this->assertEquals( $expect_string, wp_kses( $string, $allowedposttags ) );\n\t\t}\n\t}\n\n\tfunction test_feed_links() {\n\t\tglobal $allowedposttags;\n\n\t\t$content = <<<EOF\n<a href=\"feed:javascript:alert(1)\">CLICK ME</a>\n<a href=\"feed:javascript:feed:alert(1)\">CLICK ME</a>\n<a href=\"feed:feed:javascript:alert(1)\">CLICK ME</a>\n<a href=\"javascript:feed:alert(1)\">CLICK ME</a>\n<a href=\"javascript:feed:javascript:alert(1)\">CLICK ME</a>\n<a href=\"feed:feed:feed:javascript:alert(1)\">CLICK ME</a>\n<a href=\"feed:feed:feed:feed:javascript:alert(1)\">CLICK ME</a>\n<a href=\"feed:feed:feed:feed:feed:javascript:alert(1)\">CLICK ME</a>\n<a href=\"feed:javascript:feed:javascript:feed:javascript:alert(1)\">CLICK ME</a>\n<a href=\"feed:javascript:feed:javascript:feed:javascript:feed:javascript:feed:javascript:alert(1)\">CLICK ME</a>\n<a href=\"feed:feed:feed:http:alert(1)\">CLICK ME</a>\nEOF;\n\n\t\t$expected = <<<EOF\n<a href=\"feed:alert(1)\">CLICK ME</a>\n<a href=\"feed:feed:alert(1)\">CLICK ME</a>\n<a href=\"feed:feed:alert(1)\">CLICK ME</a>\n<a href=\"feed:alert(1)\">CLICK ME</a>\n<a href=\"feed:alert(1)\">CLICK ME</a>\n<a href=\"\">CLICK ME</a>\n<a href=\"\">CLICK ME</a>\n<a href=\"\">CLICK ME</a>\n<a href=\"\">CLICK ME</a>\n<a href=\"\">CLICK ME</a>\n<a href=\"\">CLICK ME</a>\nEOF;\n\n\t\t$this->assertEquals( $expected, wp_kses( $content, $allowedposttags ) );\n\t}\n\n\tfunction test_wp_kses_bad_protocol() {\n\t\t$bad = array(\n\t\t\t'dummy:alert(1)',\n\t\t\t'javascript:alert(1)',\n\t\t\t'JaVaScRiPt:alert(1)',\n\t\t\t'javascript:alert(1);',\n\t\t\t'javascript&#58;alert(1);',\n\t\t\t'javascript&#0058;alert(1);',\n\t\t\t'javascript&#0000058alert(1);',\n\t\t\t'javascript&#x3A;alert(1);',\n\t\t\t'javascript&#X3A;alert(1);',\n\t\t\t'javascript&#X3a;alert(1);',\n\t\t\t'javascript&#x3a;alert(1);',\n\t\t\t'javascript&#x003a;alert(1);',\n\t\t\t'&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29',\n\t\t\t'jav\tascript:alert(1);',\n\t\t\t'jav&#x09;ascript:alert(1);',\n\t\t\t'jav&#x0A;ascript:alert(1);',\n\t\t\t'jav&#x0D;ascript:alert(1);',\n\t\t\t' &#14;  javascript:alert(1);',\n\t\t\t'javascript:javascript:alert(1);',\n\t\t\t'javascript&#58;javascript:alert(1);',\n\t\t\t'javascript&#0000058javascript:alert(1);',\n\t\t\t'javascript:javascript&#58;alert(1);',\n\t\t\t'javascript:javascript&#0000058alert(1);',\n\t\t\t'javascript&#0000058alert(1)//?:',\n\t\t\t'feed:javascript:alert(1)',\n\t\t\t'feed:javascript:feed:javascript:feed:javascript:alert(1)',\n\t\t\t'javascript&#58alert(1)',\n\t\t\t'javascript&#x3ax=1;alert(1)',\n\t\t);\n\t\tforeach ( $bad as $k => $x ) {\n\t\t\t$result = wp_kses_bad_protocol( wp_kses_normalize_entities( $x ), wp_allowed_protocols() );\n\t\t\tif ( ! empty( $result ) && 'alert(1);' !== $result && 'alert(1)' !== $result ) {\n\t\t\t\tswitch ( $k ) {\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\t$this->assertEquals( 'javascript&amp;#0000058alert(1);', $result );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 12:\n\t\t\t\t\t\t$this->assertEquals( str_replace( '&', '&amp;', $x ), $result );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 22:\n\t\t\t\t\t\t$this->assertEquals( 'javascript&amp;#0000058alert(1);', $result );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 23:\n\t\t\t\t\t\t$this->assertEquals( 'javascript&amp;#0000058alert(1)//?:', $result );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 24:\n\t\t\t\t\t\t$this->assertEquals( 'feed:alert(1)', $result );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 26:\n\t\t\t\t\t\t$this->assertEquals( 'javascript&amp;#58alert(1)', $result );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 27:\n\t\t\t\t\t\t$this->assertEquals( 'javascript&amp;#x3ax=1;alert(1)', $result );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$this->fail( \"wp_kses_bad_protocol failed on $k, $x. Result: $result\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$bad_not_normalized = array(\n\t\t\t'dummy&colon;alert(1)',\n\t\t\t'javascript&colon;alert(1)',\n\t\t\t'javascript&CoLon;alert(1)',\n\t\t\t'javascript&COLON;alert(1);',\n\t\t\t'javascript&#58;alert(1);',\n\t\t\t'javascript&#0058;alert(1);',\n\t\t\t'javascript&#0000058alert(1);',\n\t\t\t'jav\tascript&COLON;alert(1);',\n\t\t\t'javascript&#58;javascript&colon;alert(1);',\n\t\t\t'javascript&#58;javascript&colon;alert(1);',\n\t\t\t'javascript&#0000058javascript&colon;alert(1);',\n\t\t\t'javascript&#58;javascript&#0000058alert(1);',\n\t\t\t'javascript&#58alert(1)',\n\t\t);\n\t\tforeach ( $bad_not_normalized as $k => $x ) {\n\t\t\t$result = wp_kses_bad_protocol( $x, wp_allowed_protocols() );\n\t\t\tif ( ! empty( $result ) && 'alert(1);' !== $result && 'alert(1)' !== $result ) {\n\t\t\t\t$this->fail( \"wp_kses_bad_protocol failed on $k, $x. Result: $result\" );\n\t\t\t}\n\t\t}\n\n\t\t$safe = array(\n\t\t\t'dummy:alert(1)',\n\t\t\t'HTTP://example.org/',\n\t\t\t'http://example.org/',\n\t\t\t'http&#58;//example.org/',\n\t\t\t'http&#x3A;//example.org/',\n\t\t\t'https://example.org',\n\t\t\t'http://example.org/wp-admin/post.php?post=2&amp;action=edit',\n\t\t\t'http://example.org/index.php?test=&#039;blah&#039;',\n\t\t);\n\t\tforeach ( $safe as $x ) {\n\t\t\t$result = wp_kses_bad_protocol( wp_kses_normalize_entities( $x ), array( 'http', 'https', 'dummy' ) );\n\t\t\tif ( $result !== $x && 'http://example.org/' !== $result ) {\n\t\t\t\t$this->fail( \"wp_kses_bad_protocol incorrectly blocked $x\" );\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function test_hackers_attacks() {\n\t\t$xss = simplexml_load_file( DIR_TESTDATA . '/formatting/xssAttacks.xml' );\n\t\tforeach ( $xss->attack as $attack ) {\n\t\t\tif ( in_array( (string) $attack->name, array( 'IMG Embedded commands 2', 'US-ASCII encoding', 'OBJECT w/Flash 2', 'Character Encoding Example' ), true ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$code = (string) $attack->code;\n\n\t\t\tif ( 'See Below' === $code ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( substr( $code, 0, 4 ) === 'perl' ) {\n\t\t\t\t$pos  = strpos( $code, '\"' ) + 1;\n\t\t\t\t$code = substr( $code, $pos, strrpos( $code, '\"' ) - $pos );\n\t\t\t\t$code = str_replace( '\\0', \"\\0\", $code );\n\t\t\t}\n\n\t\t\t$result = trim( wp_kses_data( $code ) );\n\n\t\t\tif ( in_array( $result, array( '', 'XSS', 'alert(\"XSS\");', \"alert('XSS');\" ), true ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tswitch ( $attack->name ) {\n\t\t\t\tcase 'XSS Locator':\n\t\t\t\t\t$this->assertEquals( '\\';alert(String.fromCharCode(88,83,83))//\\\\\\';alert(String.fromCharCode(88,83,83))//\";alert(String.fromCharCode(88,83,83))//\\\\\";alert(String.fromCharCode(88,83,83))//--&gt;\"&gt;\\'&gt;alert(String.fromCharCode(88,83,83))=&amp;{}', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'XSS Quick Test':\n\t\t\t\t\t$this->assertEquals( '\\'\\';!--\"=&amp;{()}', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SCRIPT w/Alert()':\n\t\t\t\t\t$this->assertEquals( \"alert('XSS')\", $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SCRIPT w/Char Code':\n\t\t\t\t\t$this->assertEquals( 'alert(String.fromCharCode(88,83,83))', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'IMG STYLE w/expression':\n\t\t\t\t\t$this->assertEquals( 'exp/*', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'List-style-image':\n\t\t\t\t\t$this->assertEquals( 'li {list-style-image: url(\"javascript:alert(\\'XSS\\')\");}XSS', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'STYLE':\n\t\t\t\t\t$this->assertEquals( \"alert('XSS');\", $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'STYLE w/background-image':\n\t\t\t\t\t$this->assertEquals( '.XSS{background-image:url(\"javascript:alert(\\'XSS\\')\");}<A></A>', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'STYLE w/background':\n\t\t\t\t\t$this->assertEquals( 'BODY{background:url(\"javascript:alert(\\'XSS\\')\")}', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Remote Stylesheet 2':\n\t\t\t\t\t$this->assertEquals( \"@import'http://ha.ckers.org/xss.css';\", $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Remote Stylesheet 3':\n\t\t\t\t\t$this->assertEquals( '&lt;META HTTP-EQUIV=&quot;Link&quot; Content=&quot;; REL=stylesheet\"&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Remote Stylesheet 4':\n\t\t\t\t\t$this->assertEquals( 'BODY{-moz-binding:url(\"http://ha.ckers.org/xssmoz.xml#xss\")}', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'XML data island w/CDATA':\n\t\t\t\t\t$this->assertEquals( '&lt;![CDATA[]]&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'XML data island w/comment':\n\t\t\t\t\t$this->assertEquals( \"<I><B>&lt;IMG SRC=&quot;javas<!-- -->cript:alert('XSS')\\\"&gt;</B></I>\", $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'XML HTML+TIME':\n\t\t\t\t\t$this->assertEquals( '&lt;t:set attributeName=&quot;innerHTML&quot; to=&quot;XSSalert(\\'XSS\\')\"&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Commented-out Block':\n\t\t\t\t\t$this->assertEquals( \"<!--[if gte IE 4]&gt;-->\\nalert('XSS');\", $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Cookie Manipulation':\n\t\t\t\t\t$this->assertEquals( '&lt;META HTTP-EQUIV=&quot;Set-Cookie&quot; Content=&quot;USERID=alert(\\'XSS\\')\"&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SSI':\n\t\t\t\t\t$this->assertEquals( '&lt;!--#exec cmd=&quot;/bin/echo &#039;<!--#exec cmd=\"/bin/echo \\'=http://ha.ckers.org/xss.js&gt;\\'\"-->', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'PHP':\n\t\t\t\t\t$this->assertEquals( '&lt;? echo(&#039;alert(\"XSS\")\\'); ?&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'UTF-7 Encoding':\n\t\t\t\t\t$this->assertEquals( '+ADw-SCRIPT+AD4-alert(\\'XSS\\');+ADw-/SCRIPT+AD4-', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Escaping JavaScript escapes':\n\t\t\t\t\t$this->assertEquals( '\\\";alert(\\'XSS\\');//', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'STYLE w/broken up JavaScript':\n\t\t\t\t\t$this->assertEquals( '@im\\port\\'\\ja\\vasc\\ript:alert(\"XSS\")\\';', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Null Chars 2':\n\t\t\t\t\t$this->assertEquals( '&amp;alert(\"XSS\")', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'No Closing Script Tag':\n\t\t\t\t\t$this->assertEquals( '&lt;SCRIPT SRC=http://ha.ckers.org/xss.js', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Half-Open HTML/JavaScript':\n\t\t\t\t\t$this->assertEquals( '&lt;IMG SRC=&quot;javascript:alert(&#039;XSS&#039;)&quot;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Double open angle brackets':\n\t\t\t\t\t$this->assertEquals( '&lt;IFRAME SRC=http://ha.ckers.org/scriptlet.html &lt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Extraneous Open Brackets':\n\t\t\t\t\t$this->assertEquals( '&lt;alert(\"XSS\");//&lt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Malformed IMG Tags':\n\t\t\t\t\t$this->assertEquals( 'alert(\"XSS\")\"&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'No Quotes/Semicolons':\n\t\t\t\t\t$this->assertEquals( \"a=/XSS/\\nalert(a.source)\", $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Evade Regex Filter 1':\n\t\t\t\t\t$this->assertEquals( '\" SRC=\"http://ha.ckers.org/xss.js\"&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Evade Regex Filter 4':\n\t\t\t\t\t$this->assertEquals( '\\'\" SRC=\"http://ha.ckers.org/xss.js\"&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Evade Regex Filter 5':\n\t\t\t\t\t$this->assertEquals( '` SRC=\"http://ha.ckers.org/xss.js\"&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Filter Evasion 1':\n\t\t\t\t\t$this->assertEquals( 'document.write(\"&lt;SCRI&quot;);PT SRC=\"http://ha.ckers.org/xss.js\"&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Filter Evasion 2':\n\t\t\t\t\t$this->assertEquals( '\\'&gt;\" SRC=\"http://ha.ckers.org/xss.js\"&gt;', $result );\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$this->fail( 'KSES failed on ' . $attack->name . ': ' . $result );\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _wp_kses_allowed_html_filter( $html, $context ) {\n\t\tif ( 'post' === $context ) {\n\t\t\treturn array( 'a' => array( 'href' => true ) );\n\t\t} else {\n\t\t\treturn array( 'a' => array( 'href' => false ) );\n\t\t}\n\t}\n\n\t/**\n\t * @ticket 20210\n\t */\n\tpublic function test_wp_kses_allowed_html() {\n\t\tglobal $allowedposttags, $allowedtags, $allowedentitynames;\n\n\t\t$this->assertEquals( $allowedposttags, wp_kses_allowed_html( 'post' ) );\n\n\t\t$tags = wp_kses_allowed_html( 'post' );\n\n\t\tforeach ( $tags as $tag ) {\n\t\t\t$this->assertTrue( $tag['class'] );\n\t\t\t$this->assertTrue( $tag['id'] );\n\t\t\t$this->assertTrue( $tag['style'] );\n\t\t\t$this->assertTrue( $tag['title'] );\n\t\t}\n\n\t\t$this->assertEquals( $allowedtags, wp_kses_allowed_html( 'data' ) );\n\t\t$this->assertEquals( $allowedtags, wp_kses_allowed_html( '' ) );\n\t\t$this->assertEquals( $allowedtags, wp_kses_allowed_html() );\n\n\t\t$tags = wp_kses_allowed_html( 'user_description' );\n\t\t$this->assertTrue( $tags['a']['rel'] );\n\n\t\t$tags = wp_kses_allowed_html();\n\t\t$this->assertFalse( isset( $tags['a']['rel'] ) );\n\n\t\t$this->assertEquals( array(), wp_kses_allowed_html( 'strip' ) );\n\n\t\t$custom_tags = array(\n\t\t\t'a' => array(\n\t\t\t\t'href'   => true,\n\t\t\t\t'rel'    => true,\n\t\t\t\t'rev'    => true,\n\t\t\t\t'name'   => true,\n\t\t\t\t'target' => true,\n\t\t\t),\n\t\t);\n\n\t\t$this->assertEquals( $custom_tags, wp_kses_allowed_html( $custom_tags ) );\n\n\t\tadd_filter( 'wp_kses_allowed_html', array( $this, '_wp_kses_allowed_html_filter' ), 10, 2 );\n\n\t\t$this->assertEquals( array( 'a' => array( 'href' => true ) ), wp_kses_allowed_html( 'post' ) );\n\t\t$this->assertEquals( array( 'a' => array( 'href' => false ) ), wp_kses_allowed_html( 'data' ) );\n\n\t\tremove_filter( 'wp_kses_allowed_html', array( $this, '_wp_kses_allowed_html_filter' ) );\n\t\t$this->assertEquals( $allowedposttags, wp_kses_allowed_html( 'post' ) );\n\t\t$this->assertEquals( $allowedtags, wp_kses_allowed_html( 'data' ) );\n\t}\n\n\tfunction test_hyphenated_tag() {\n\t\t$string                 = '<hyphenated-tag attribute=\"value\" otherattribute=\"value2\">Alot of hyphens.</hyphenated-tag>';\n\t\t$custom_tags            = array(\n\t\t\t'hyphenated-tag' => array(\n\t\t\t\t'attribute' => true,\n\t\t\t),\n\t\t);\n\t\t$expect_stripped_string = 'Alot of hyphens.';\n\n\t\t$expect_valid_string = '<hyphenated-tag attribute=\"value\">Alot of hyphens.</hyphenated-tag>';\n\t\t$this->assertEquals( $expect_stripped_string, wp_kses_post( $string ) );\n\t\t$this->assertEquals( $expect_valid_string, wp_kses( $string, $custom_tags ) );\n\t}\n\n\t/**\n\t * @ticket 26290\n\t */\n\tpublic function test_wp_kses_normalize_entities() {\n\t\t$this->assertEquals( '&spades;', wp_kses_normalize_entities( '&spades;' ) );\n\n\t\t$this->assertEquals( '&sup1;', wp_kses_normalize_entities( '&sup1;' ) );\n\t\t$this->assertEquals( '&sup2;', wp_kses_normalize_entities( '&sup2;' ) );\n\t\t$this->assertEquals( '&sup3;', wp_kses_normalize_entities( '&sup3;' ) );\n\t\t$this->assertEquals( '&frac14;', wp_kses_normalize_entities( '&frac14;' ) );\n\t\t$this->assertEquals( '&frac12;', wp_kses_normalize_entities( '&frac12;' ) );\n\t\t$this->assertEquals( '&frac34;', wp_kses_normalize_entities( '&frac34;' ) );\n\t\t$this->assertEquals( '&there4;', wp_kses_normalize_entities( '&there4;' ) );\n\t}\n\n\t/**\n\t * Test removal of invalid binary data for HTML.\n\t *\n\t * @ticket 28506\n\t * @dataProvider data_ctrl_removal\n\t */\n\tfunction test_ctrl_removal( $input, $output ) {\n\t\tglobal $allowedposttags;\n\n\t\treturn $this->assertEquals( $output, wp_kses( $input, $allowedposttags ) );\n\t}\n\n\tfunction data_ctrl_removal() {\n\t\treturn array(\n\t\t\tarray(\n\t\t\t\t\"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0B\\x0C\\x0E\\x0F\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1A\\x1B\\X1C\\x1D\\x1E\\x1F\",\n\t\t\t\t'',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"\\x00h\\x01e\\x02l\\x03l\\x04o\\x05 \\x06w\\x07o\\x08r\\x0Bl\\x0Cd\\x0E.\\x0F \\x10W\\x11O\\x12R\\x13D\\x14P\\x15R\\x16E\\x17S\\x18S\\x19 \\x1AK\\x1BS\\X1CE\\x1DS\\x1E.\\x1F/\",\n\t\t\t\t'hello world. WORDPRESS KSES./',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"\\x1F\\x1E\\x1D\\x1C\\x1B\\x1A\\x19\\x18\\x17\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x0F\\x0E\\x0C\\x0B\\x08\\x07\\x06\\x05\\x04\\X03\\x02\\x01\\x00\",\n\t\t\t\t'',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"\\x1Fh\\x1Ee\\x1Dl\\x1Cl\\x1Bo\\x1A \\x19w\\x18o\\x17r\\x16l\\x15d\\x14.\\x13 \\x12W\\x11O\\x10R\\x0FD\\x0EP\\x0CR\\x0BE\\x08S\\x07S\\x06 \\x05K\\x04S\\X03E\\x02S\\x01.\\x00/\",\n\t\t\t\t'hello world. WORDPRESS KSES./',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"\\t\\r\\n word \\n\\r\\t\",\n\t\t\t\t\"\\t\\r\\n word \\n\\r\\t\",\n\t\t\t),\n\t\t);\n\t}\n\n\t/**\n\t * Test removal of '\\0' strings.\n\t *\n\t * @ticket 28699\n\t * @dataProvider data_slash_zero_removal\n\t */\n\tfunction test_slash_zero_removal( $input, $output ) {\n\t\tglobal $allowedposttags;\n\n\t\treturn $this->assertEquals( $output, wp_kses( $input, $allowedposttags ) );\n\t}\n\n\tfunction data_slash_zero_removal() {\n\t\treturn array(\n\t\t\tarray(\n\t\t\t\t'This \\\\0 should be no big deal.',\n\t\t\t\t'This \\\\0 should be no big deal.',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'<div>This \\\\0 should be no big deal.</div>',\n\t\t\t\t'<div>This \\\\0 should be no big deal.</div>',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'<div align=\"\\\\0left\">This should be no big deal.</div>',\n\t\t\t\t'<div align=\"\\\\0left\">This should be no big deal.</div>',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'This <div style=\"float:\\\\0left\"> is more of a concern.',\n\t\t\t\t'This <div style=\"float:left\"> is more of a concern.',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'This <div style=\"float:\\\\0\\\\0left\"> is more of a concern.',\n\t\t\t\t'This <div style=\"float:left\"> is more of a concern.',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'This <div style=\"float:\\\\\\\\00left\"> is more of a concern.',\n\t\t\t\t'This <div style=\"float:left\"> is more of a concern.',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'This <div style=\"float:\\\\\\\\\\\\\\\\0000left\"> is more of a concern.',\n\t\t\t\t'This <div style=\"float:left\"> is more of a concern.',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'This <div style=\"float:\\\\0000left\"> is more of a concern.',\n\t\t\t\t'This <div style=\"float:left\"> is more of a concern.',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'<style type=\"text/css\">div {background-image:\\\\0}</style>',\n\t\t\t\t'div {background-image:\\\\0}',\n\t\t\t),\n\t\t);\n\t}\n\n\t/**\n\t * Test new function wp_kses_hair_parse().\n\t *\n\t * @dataProvider data_hair_parse\n\t */\n\tfunction test_hair_parse( $input, $output ) {\n\t\treturn $this->assertEquals( $output, wp_kses_hair_parse( $input ) );\n\t}\n\n\tfunction data_hair_parse() {\n\t\treturn array(\n\t\t\tarray(\n\t\t\t\t'title=\"hello\" href=\"#\" id=\"my_id\" ',\n\t\t\t\tarray( 'title=\"hello\" ', 'href=\"#\" ', 'id=\"my_id\" ' ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'[shortcode attr=\"value\"] href=\"http://www.google.com/\"title=\"moo\"disabled',\n\t\t\t\tarray( '[shortcode attr=\"value\"] ', 'href=\"http://www.google.com/\"', 'title=\"moo\"', 'disabled' ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'',\n\t\t\t\tarray(),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'a',\n\t\t\t\tarray( 'a' ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'title=\"hello\"disabled href=# id=\\'my_id\\'',\n\t\t\t\tarray( 'title=\"hello\"', 'disabled ', 'href=# ', \"id='my_id'\" ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'     ', // Calling function is expected to strip leading whitespace.\n\t\t\t\tfalse,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'abcd=abcd\"abcd\"',\n\t\t\t\tfalse,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"array[1]='z'z'z'z\",\n\t\t\t\tfalse,\n\t\t\t),\n\t\t);\n\t}\n\n\t/**\n\t * Test new function wp_kses_attr_parse().\n\t *\n\t * @dataProvider data_attr_parse\n\t */\n\tfunction test_attr_parse( $input, $output ) {\n\t\treturn $this->assertEquals( $output, wp_kses_attr_parse( $input ) );\n\t}\n\n\tfunction data_attr_parse() {\n\t\treturn array(\n\t\t\tarray(\n\t\t\t\t'<a title=\"hello\" href=\"#\" id=\"my_id\" >',\n\t\t\t\tarray( '<a ', 'title=\"hello\" ', 'href=\"#\" ', 'id=\"my_id\" ', '>' ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'<a [shortcode attr=\"value\"] href=\"http://www.google.com/\"title=\"moo\"disabled>',\n\t\t\t\tarray( '<a ', '[shortcode attr=\"value\"] ', 'href=\"http://www.google.com/\"', 'title=\"moo\"', 'disabled', '>' ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'',\n\t\t\t\tfalse,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'a',\n\t\t\t\tfalse,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'<a>',\n\t\t\t\tarray( '<a', '>' ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'<a%%&&**>',\n\t\t\t\tfalse,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'<a title=\"hello\"disabled href=# id=\\'my_id\\'>',\n\t\t\t\tarray( '<a ', 'title=\"hello\"', 'disabled ', 'href=# ', \"id='my_id'\", '>' ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'<a     >',\n\t\t\t\tarray( '<a     ', '>' ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'<a abcd=abcd\"abcd\">',\n\t\t\t\tfalse,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"<a array[1]='z'z'z'z>\",\n\t\t\t\tfalse,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'<img title=\"hello\" src=\"#\" id=\"my_id\" />',\n\t\t\t\tarray( '<img ', 'title=\"hello\" ', 'src=\"#\" ', 'id=\"my_id\"', ' />' ),\n\t\t\t),\n\t\t);\n\t}\n\n\t/**\n\t * Test new function wp_kses_one_attr().\n\t *\n\t * @dataProvider data_one_attr\n\t */\n\tfunction test_one_attr( $element, $input, $output ) {\n\t\treturn $this->assertEquals( $output, wp_kses_one_attr( $input, $element ) );\n\t}\n\n\tfunction data_one_attr() {\n\t\treturn array(\n\t\t\tarray(\n\t\t\t\t'a',\n\t\t\t\t' title=\"hello\" ',\n\t\t\t\t' title=\"hello\" ',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'a',\n\t\t\t\t'title  =  \"hello\"',\n\t\t\t\t'title=\"hello\"',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'a',\n\t\t\t\t\"title='hello'\",\n\t\t\t\t\"title='hello'\",\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'a',\n\t\t\t\t'title=hello',\n\t\t\t\t'title=\"hello\"',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'a',\n\t\t\t\t'href=\"javascript:alert(1)\"',\n\t\t\t\t'href=\"alert(1)\"',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'a',\n\t\t\t\t'style =\"style \"',\n\t\t\t\t'style=\"style\"',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'a',\n\t\t\t\t'style=\"style \"',\n\t\t\t\t'style=\"style\"',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'a',\n\t\t\t\t'style =\"style =\"',\n\t\t\t\t'',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'img',\n\t\t\t\t'src=\"mypic.jpg\"',\n\t\t\t\t'src=\"mypic.jpg\"',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'img',\n\t\t\t\t'onerror=alert(1)',\n\t\t\t\t'',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'img',\n\t\t\t\t'title=>',\n\t\t\t\t'title=\"&gt;\"',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'img',\n\t\t\t\t'title=\"&garbage\";\"',\n\t\t\t\t'title=\"&amp;garbage&quot;;\"',\n\t\t\t),\n\t\t);\n\t}\n\n\t/**\n\t * @ticket 34063\n\t */\n\tfunction test_bdo() {\n\t\tglobal $allowedposttags;\n\n\t\t$input = '<p>This is <bdo dir=\"rtl\">a BDO tag</bdo>. Weird, <bdo dir=\"ltr\">right?</bdo></p>';\n\n\t\t$this->assertEquals( $input, wp_kses( $input, $allowedposttags ) );\n\t}\n\n\t/**\n\t * @ticket 35079\n\t */\n\tfunction test_ol_reversed() {\n\t\tglobal $allowedposttags;\n\n\t\t$input = '<ol reversed=\"reversed\"><li>Item 1</li><li>Item 2</li><li>Item 3</li></ol>';\n\n\t\t$this->assertEquals( $input, wp_kses( $input, $allowedposttags ) );\n\t}\n\n\t/**\n\t * @ticket 40680\n\t */\n\tfunction test_wp_kses_attr_no_attributes_allowed_with_empty_array() {\n\t\t$element   = 'foo';\n\t\t$attribute = 'title=\"foo\" class=\"bar\"';\n\n\t\t$this->assertEquals( \"<{$element}>\", wp_kses_attr( $element, $attribute, array( 'foo' => array() ), array() ) );\n\t}\n\n\t/**\n\t * @ticket 40680\n\t */\n\tfunction test_wp_kses_attr_no_attributes_allowed_with_true() {\n\t\t$element   = 'foo';\n\t\t$attribute = 'title=\"foo\" class=\"bar\"';\n\n\t\t$this->assertEquals( \"<{$element}>\", wp_kses_attr( $element, $attribute, array( 'foo' => true ), array() ) );\n\t}\n\n\t/**\n\t * @ticket 40680\n\t */\n\tfunction test_wp_kses_attr_single_attribute_is_allowed() {\n\t\t$element   = 'foo';\n\t\t$attribute = 'title=\"foo\" class=\"bar\"';\n\n\t\t$this->assertEquals( \"<{$element} title=\\\"foo\\\">\", wp_kses_attr( $element, $attribute, array( 'foo' => array( 'title' => true ) ), array() ) );\n\t}\n\n\t/**\n\t * @ticket 43312\n\t */\n\tfunction test_wp_kses_attr_no_attributes_allowed_with_false() {\n\t\t$element   = 'foo';\n\t\t$attribute = 'title=\"foo\" class=\"bar\"';\n\n\t\t$this->assertEquals( \"<{$element}>\", wp_kses_attr( $element, $attribute, array( 'foo' => false ), array() ) );\n\t}\n\n\t/**\n\t * Testing the safecss_filter_attr() function.\n\t *\n\t * @ticket 37248\n\t * @ticket 42729\n\t * @ticket 48376\n\t * @dataProvider data_test_safecss_filter_attr\n\t *\n\t * @param string $css      A string of CSS rules.\n\t * @param string $expected Expected string of CSS rules.\n\t */\n\tpublic function test_safecss_filter_attr( $css, $expected ) {\n\t\t$this->assertSame( $expected, safecss_filter_attr( $css ) );\n\t}\n\n\t/**\n\t * Data Provider for test_safecss_filter_attr().\n\t *\n\t * @return array {\n\t *     @type array {\n\t *         @string string $css      A string of CSS rules.\n\t *         @string string $expected Expected string of CSS rules.\n\t *     }\n\t * }\n\t */\n\tpublic function data_test_safecss_filter_attr() {\n\t\treturn array(\n\t\t\t// Empty input, empty output.\n\t\t\tarray(\n\t\t\t\t'css'      => '',\n\t\t\t\t'expected' => '',\n\t\t\t),\n\t\t\t// An arbitrary attribute name isn't allowed.\n\t\t\tarray(\n\t\t\t\t'css'      => 'foo:bar',\n\t\t\t\t'expected' => '',\n\t\t\t),\n\t\t\t// A single attribute name, with a single value.\n\t\t\tarray(\n\t\t\t\t'css'      => 'margin-top: 2px',\n\t\t\t\t'expected' => 'margin-top: 2px',\n\t\t\t),\n\t\t\t// Backslash \\ isn't supported.\n\t\t\tarray(\n\t\t\t\t'css'      => 'margin-top: \\2px',\n\t\t\t\t'expected' => '',\n\t\t\t),\n\t\t\t// Curly bracket } isn't supported.\n\t\t\tarray(\n\t\t\t\t'css'      => 'margin-bottom: 2px}',\n\t\t\t\t'expected' => '',\n\t\t\t),\n\t\t\t// A single attribute name, with a single text value.\n\t\t\tarray(\n\t\t\t\t'css'      => 'text-transform: uppercase',\n\t\t\t\t'expected' => 'text-transform: uppercase',\n\t\t\t),\n\t\t\t// Only lowercase attribute names are supported.\n\t\t\tarray(\n\t\t\t\t'css'      => 'Text-transform: capitalize',\n\t\t\t\t'expected' => '',\n\t\t\t),\n\t\t\t// Uppercase attribute values goes through.\n\t\t\tarray(\n\t\t\t\t'css'      => 'text-transform: None',\n\t\t\t\t'expected' => 'text-transform: None',\n\t\t\t),\n\t\t\t// A single attribute, with multiple values.\n\t\t\tarray(\n\t\t\t\t'css'      => 'font: bold 15px arial, sans-serif',\n\t\t\t\t'expected' => 'font: bold 15px arial, sans-serif',\n\t\t\t),\n\t\t\t// Multiple attributes, with single values.\n\t\t\tarray(\n\t\t\t\t'css'      => 'font-weight: bold;font-size: 15px',\n\t\t\t\t'expected' => 'font-weight: bold;font-size: 15px',\n\t\t\t),\n\t\t\t// Multiple attributes, separated by a space.\n\t\t\tarray(\n\t\t\t\t'css'      => 'font-weight: bold; font-size: 15px',\n\t\t\t\t'expected' => 'font-weight: bold;font-size: 15px',\n\t\t\t),\n\t\t\t// Multiple attributes, with multiple values.\n\t\t\tarray(\n\t\t\t\t'css'      => 'margin: 10px 20px;padding: 5px 10px',\n\t\t\t\t'expected' => 'margin: 10px 20px;padding: 5px 10px',\n\t\t\t),\n\t\t\t// Parenthesis ( is supported for some attributes.\n\t\t\tarray(\n\t\t\t\t'css'      => 'background: green url(\"foo.jpg\") no-repeat fixed center',\n\t\t\t\t'expected' => 'background: green url(\"foo.jpg\") no-repeat fixed center',\n\t\t\t),\n\t\t\t// Additional background attributes introduced in 5.3.\n\t\t\tarray(\n\t\t\t\t'css'      => 'background-size: cover;background-size: 200px 100px;background-attachment: local, scroll;background-blend-mode: hard-light',\n\t\t\t\t'expected' => 'background-size: cover;background-size: 200px 100px;background-attachment: local, scroll;background-blend-mode: hard-light',\n\t\t\t),\n\t\t\t// `border-radius` attribute introduced in 5.3.\n\t\t\tarray(\n\t\t\t\t'css'      => 'border-radius: 10% 30% 50% 70%;border-radius: 30px',\n\t\t\t\t'expected' => 'border-radius: 10% 30% 50% 70%;border-radius: 30px',\n\t\t\t),\n\t\t\t// `flex` and related attributes introduced in 5.3.\n\t\t\tarray(\n\t\t\t\t'css'      => 'flex: 0 1 auto;flex-basis: 75%;flex-direction: row-reverse;flex-flow: row-reverse nowrap;flex-grow: 2;flex-shrink: 1',\n\t\t\t\t'expected' => 'flex: 0 1 auto;flex-basis: 75%;flex-direction: row-reverse;flex-flow: row-reverse nowrap;flex-grow: 2;flex-shrink: 1',\n\t\t\t),\n\t\t\t// `grid` and related attributes introduced in 5.3.\n\t\t\tarray(\n\t\t\t\t'css'      => 'grid-template-columns: 1fr 60px;grid-auto-columns: min-content;grid-column-start: span 2;grid-column-end: -1;grid-column-gap: 10%;grid-gap: 10px 20px',\n\t\t\t\t'expected' => 'grid-template-columns: 1fr 60px;grid-auto-columns: min-content;grid-column-start: span 2;grid-column-end: -1;grid-column-gap: 10%;grid-gap: 10px 20px',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'grid-template-rows: 40px 4em 40px;grid-auto-rows: min-content;grid-row-start: -1;grid-row-end: 3;grid-row-gap: 1em',\n\t\t\t\t'expected' => 'grid-template-rows: 40px 4em 40px;grid-auto-rows: min-content;grid-row-start: -1;grid-row-end: 3;grid-row-gap: 1em',\n\t\t\t),\n\t\t\t// `grid` does not yet support functions or `\\`.\n\t\t\tarray(\n\t\t\t\t'css'      => 'grid-template-columns: repeat(2, 50px 1fr);grid-template: 1em / 20% 20px 1fr',\n\t\t\t\t'expected' => '',\n\t\t\t),\n\t\t\t// `flex` and `grid` alignments introduced in 5.3.\n\t\t\tarray(\n\t\t\t\t'css'      => 'align-content: space-between;align-items: start;align-self: center;justify-items: center;justify-content: space-between;justify-self: end',\n\t\t\t\t'expected' => 'align-content: space-between;align-items: start;align-self: center;justify-items: center;justify-content: space-between;justify-self: end',\n\t\t\t),\n\t\t\t// `columns` and related attributes introduced in 5.3.\n\t\t\tarray(\n\t\t\t\t'css'      => 'columns: 6rem auto;column-count: 4;column-fill: balance;column-gap: 9px;column-rule: thick inset blue;column-span: none;column-width: 120px',\n\t\t\t\t'expected' => 'columns: 6rem auto;column-count: 4;column-fill: balance;column-gap: 9px;column-rule: thick inset blue;column-span: none;column-width: 120px',\n\t\t\t),\n\t\t\t// Gradients introduced in 5.3.\n\t\t\tarray(\n\t\t\t\t'css'      => 'background: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)',\n\t\t\t\t'expected' => 'background: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'background: linear-gradient(135deg,rgba(6,147,227,1) ) (0%,rgb(155,81,224) 100%)',\n\t\t\t\t'expected' => '',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'background-image: linear-gradient(red,yellow);',\n\t\t\t\t'expected' => 'background-image: linear-gradient(red,yellow)',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'color: linear-gradient(red,yellow);',\n\t\t\t\t'expected' => '',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'background-image: linear-gradient(red,yellow); background: prop( red,yellow); width: 100px;',\n\t\t\t\t'expected' => 'background-image: linear-gradient(red,yellow);width: 100px',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'background: unknown-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)',\n\t\t\t\t'expected' => '',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'background: repeating-linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)',\n\t\t\t\t'expected' => 'background: repeating-linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'width: 100px; height: 100px; background: linear-gradient(135deg,rgba(0,208,132,1) 0%,rgba(6,147,227,1) 100%);',\n\t\t\t\t'expected' => 'width: 100px;height: 100px;background: linear-gradient(135deg,rgba(0,208,132,1) 0%,rgba(6,147,227,1) 100%)',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'background: radial-gradient(#ff0, red, yellow, green, rgba(6,147,227,1), rgb(155,81,224) 90%);',\n\t\t\t\t'expected' => 'background: radial-gradient(#ff0, red, yellow, green, rgba(6,147,227,1), rgb(155,81,224) 90%)',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'background: radial-gradient(#ff0, red, yellow, green, rgba(6,147,227,1), rgb(155,81,224) 90%);',\n\t\t\t\t'expected' => 'background: radial-gradient(#ff0, red, yellow, green, rgba(6,147,227,1), rgb(155,81,224) 90%)',\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'css'      => 'background: conic-gradient(at 0% 30%, red 10%, yellow 30%, #1e90ff 50%)',\n\t\t\t\t'expected' => 'background: conic-gradient(at 0% 30%, red 10%, yellow 30%, #1e90ff 50%)',\n\t\t\t),\n\n\t\t);\n\t}\n\n\t/**\n\t * Data attributes are globally accepted.\n\t *\n\t * @ticket 33121\n\t */\n\tfunction test_wp_kses_attr_data_attribute_is_allowed() {\n\t\t$test     = '<div data-foo=\"foo\" data-bar=\"bar\" datainvalid=\"gone\" data--invaild=\"gone\"  data-also-invaild-=\"gone\" data-two-hyphens=\"remains\">Pens and pencils</div>';\n\t\t$expected = '<div data-foo=\"foo\" data-bar=\"bar\" data-two-hyphens=\"remains\">Pens and pencils</div>';\n\n\t\t$this->assertEquals( $expected, wp_kses_post( $test ) );\n\t}\n\n\t/**\n\t * Ensure wildcard attributes block unprefixed wildcard uses.\n\t *\n\t * @ticket 33121\n\t */\n\tfunction test_wildcard_requires_hyphen_after_prefix() {\n\t\t$allowed_html = array(\n\t\t\t'div' => array(\n\t\t\t\t'data-*' => true,\n\t\t\t\t'on-*'   => true,\n\t\t\t),\n\t\t);\n\n\t\t$string   = '<div datamelformed-prefix=\"gone\" data=\"gone\" data-=\"gone\" onclick=\"alert(1)\">Malformed attributes</div>';\n\t\t$expected = '<div>Malformed attributes</div>';\n\n\t\t$actual = wp_kses( $string, $allowed_html );\n\n\t\t$this->assertSame( $expected, $actual );\n\t}\n\n\t/**\n\t * Ensure wildcard allows two hyphen.\n\t *\n\t * @ticket 33121\n\t */\n\tfunction test_wildcard_allows_two_hyphens() {\n\t\t$allowed_html = array(\n\t\t\t'div' => array(\n\t\t\t\t'data-*' => true,\n\t\t\t),\n\t\t);\n\n\t\t$string   = '<div data-wp-id=\"pens-and-pencils\">Well formed attribute</div>';\n\t\t$expected = '<div data-wp-id=\"pens-and-pencils\">Well formed attribute</div>';\n\n\t\t$actual = wp_kses( $string, $allowed_html );\n\n\t\t$this->assertSame( $expected, $actual );\n\t}\n\n\t/**\n\t * Ensure wildcard attributes only support valid prefixes.\n\t *\n\t * @dataProvider data_wildcard_attribute_prefixes\n\t *\n\t * @ticket 33121\n\t */\n\tfunction test_wildcard_attribute_prefixes( $wildcard_attribute, $expected ) {\n\t\t$allowed_html = array(\n\t\t\t'div' => array(\n\t\t\t\t$wildcard_attribute => true,\n\t\t\t),\n\t\t);\n\n\t\t$name  = str_replace( '*', strtolower( __FUNCTION__ ), $wildcard_attribute );\n\t\t$value = __FUNCTION__;\n\t\t$whole = \"{$name}=\\\"{$value}\\\"\";\n\n\t\t$actual = wp_kses_attr_check( $name, $value, $whole, 'n', 'div', $allowed_html );\n\n\t\t$this->assertSame( $expected, $actual );\n\t}\n\n\t/**\n\t * @return array Array of arguments for wildcard testing\n\t *               [0] The prefix being tested.\n\t *               [1] The outcome of `wp_kses_attr_check` for the prefix.\n\t */\n\tfunction data_wildcard_attribute_prefixes() {\n\t\treturn array(\n\t\t\t// Ends correctly\n\t\t\tarray( 'data-*', true ),\n\n\t\t\t// Does not end with trialing `-`.\n\t\t\tarray( 'data*', false ),\n\n\t\t\t// Multiple wildcards.\n\t\t\tarray( 'd*ta-*', false ),\n\t\t\tarray( 'data**', false ),\n\t\t);\n\t}\n\n\t/**\n\t * Test URL sanitization in the style tag.\n\t *\n\t * @dataProvider data_kses_style_attr_with_url\n\t *\n\t * @ticket 45067\n\t *\n\t * @param $input string The style attribute saved in the editor.\n\t * @param $expected string The sanitized style attribute.\n\t */\n\tfunction test_kses_style_attr_with_url( $input, $expected ) {\n\t\t$actual = safecss_filter_attr( $input );\n\n\t\t$this->assertSame( $expected, $actual );\n\t}\n\n\t/**\n\t * Data provider testing style attribute sanitization.\n\t *\n\t * @return array Nested array of input, expected pairs.\n\t */\n\tfunction data_kses_style_attr_with_url() {\n\t\treturn array(\n\t\t\t/*\n\t\t\t * Valid use cases.\n\t\t\t */\n\n\t\t\t// Double quotes.\n\t\t\tarray(\n\t\t\t\t'background-image: url( \"http://example.com/valid.gif\" );',\n\t\t\t\t'background-image: url( \"http://example.com/valid.gif\" )',\n\t\t\t),\n\n\t\t\t// Single quotes.\n\t\t\tarray(\n\t\t\t\t\"background-image: url( 'http://example.com/valid.gif' );\",\n\t\t\t\t\"background-image: url( 'http://example.com/valid.gif' )\",\n\t\t\t),\n\n\t\t\t// No quotes.\n\t\t\tarray(\n\t\t\t\t'background-image: url( http://example.com/valid.gif );',\n\t\t\t\t'background-image: url( http://example.com/valid.gif )',\n\t\t\t),\n\n\t\t\t// Single quotes, extra spaces.\n\t\t\tarray(\n\t\t\t\t\"background-image: url( '  http://example.com/valid.gif ' );\",\n\t\t\t\t\"background-image: url( '  http://example.com/valid.gif ' )\",\n\t\t\t),\n\n\t\t\t// Line breaks, single quotes.\n\t\t\tarray(\n\t\t\t\t\"background-image: url(\\n'http://example.com/valid.gif' );\",\n\t\t\t\t\"background-image: url('http://example.com/valid.gif' )\",\n\t\t\t),\n\n\t\t\t// Tabs not spaces, single quotes.\n\t\t\tarray(\n\t\t\t\t\"background-image: url(\\t'http://example.com/valid.gif'\\t\\t);\",\n\t\t\t\t\"background-image: url('http://example.com/valid.gif')\",\n\t\t\t),\n\n\t\t\t// Single quotes, absolute path.\n\t\t\tarray(\n\t\t\t\t\"background: url('/valid.gif');\",\n\t\t\t\t\"background: url('/valid.gif')\",\n\t\t\t),\n\n\t\t\t// Single quotes, relative path.\n\t\t\tarray(\n\t\t\t\t\"background: url('../wp-content/uploads/2018/10/valid.gif');\",\n\t\t\t\t\"background: url('../wp-content/uploads/2018/10/valid.gif')\",\n\t\t\t),\n\n\t\t\t// Error check: valid property not containing a URL.\n\t\t\tarray(\n\t\t\t\t'background: red',\n\t\t\t\t'background: red',\n\t\t\t),\n\n\t\t\t/*\n\t\t\t * Invalid use cases.\n\t\t\t */\n\n\t\t\t// Attribute doesn't support URL properties.\n\t\t\tarray(\n\t\t\t\t'color: url( \"http://example.com/invalid.gif\" );',\n\t\t\t\t'',\n\t\t\t),\n\n\t\t\t// Mismatched quotes.\n\t\t\tarray(\n\t\t\t\t'background-image: url( \"http://example.com/valid.gif\\' );',\n\t\t\t\t'',\n\t\t\t),\n\n\t\t\t// Bad protocol, double quotes.\n\t\t\tarray(\n\t\t\t\t'background-image: url( \"bad://example.com/invalid.gif\" );',\n\t\t\t\t'',\n\t\t\t),\n\n\t\t\t// Bad protocol, single quotes.\n\t\t\tarray(\n\t\t\t\t\"background-image: url( 'bad://example.com/invalid.gif' );\",\n\t\t\t\t'',\n\t\t\t),\n\n\t\t\t// Bad protocol, single quotes.\n\t\t\tarray(\n\t\t\t\t\"background-image: url( 'bad://example.com/invalid.gif' );\",\n\t\t\t\t'',\n\t\t\t),\n\n\t\t\t// Bad protocol, single quotes, strange spacing.\n\t\t\tarray(\n\t\t\t\t\"background-image: url( '  \\tbad://example.com/invalid.gif ' );\",\n\t\t\t\t'',\n\t\t\t),\n\n\t\t\t// Bad protocol, no quotes.\n\t\t\tarray(\n\t\t\t\t'background-image: url( bad://example.com/invalid.gif );',\n\t\t\t\t'',\n\t\t\t),\n\n\t\t\t// No URL inside url().\n\t\t\tarray(\n\t\t\t\t'background-image: url();',\n\t\t\t\t'',\n\t\t\t),\n\n\t\t\t// Malformed, no closing `)`.\n\t\t\tarray(\n\t\t\t\t'background-image: url( \"http://example.com\" ;',\n\t\t\t\t'',\n\t\t\t),\n\n\t\t\t// Malformed, no closing `\"`.\n\t\t\tarray(\n\t\t\t\t'background-image: url( \"http://example.com );',\n\t\t\t\t'',\n\t\t\t),\n\t\t);\n\t}\n}\n"], "filenames": ["src/wp-includes/kses.php", "tests/phpunit/tests/kses.php"], "buggy_code_start_loc": [1668, 181], "buggy_code_end_loc": [1669, 181], "fixing_code_start_loc": [1668, 182], "fixing_code_end_loc": [1669, 204], "type": "CWE-20", "message": "wp_kses_bad_protocol in wp-includes/kses.php in WordPress before 5.3.1 mishandles the HTML5 colon named entity, allowing attackers to bypass input sanitization, as demonstrated by the javascript&colon; substring.", "other": {"cve": {"id": "CVE-2019-20041", "sourceIdentifier": "cve@mitre.org", "published": "2019-12-27T08:15:09.683", "lastModified": "2022-11-23T20:12:36.217", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "wp_kses_bad_protocol in wp-includes/kses.php in WordPress before 5.3.1 mishandles the HTML5 colon named entity, allowing attackers to bypass input sanitization, as demonstrated by the javascript&colon; substring."}, {"lang": "es", "value": "La funci\u00f3n wp_kses_bad_protocol en el archivo wp-includes/kses.php en WordPress versiones anteriores a la versi\u00f3n 5.3.1, maneja inapropiadamente la entidad llamada HTML5 colon, permitiendo a atacantes omitir el saneamiento de entrada, como es demostrado por la subcadena javascript&amp;colon."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.3.1", "matchCriteriaId": "16281685-1B1B-436A-9258-3E5078F27AF8"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}]}]}], "references": [{"url": "https://github.com/WordPress/wordpress-develop/commit/b1975463dd995da19bb40d3fa0786498717e3c53", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://lists.debian.org/debian-lts-announce/2020/01/msg00010.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://seclists.org/bugtraq/2020/Jan/8", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://wordpress.org/news/2019/12/wordpress-5-3-1-security-and-maintenance-release/", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://www.debian.org/security/2020/dsa-4599", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.debian.org/security/2020/dsa-4677", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WordPress/wordpress-develop/commit/b1975463dd995da19bb40d3fa0786498717e3c53"}}