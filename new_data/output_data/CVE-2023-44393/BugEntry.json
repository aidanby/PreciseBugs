{"buggy_code": ["<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\nif( !defined(\"PHPWG_ROOT_PATH\") )\n{\n  die (\"Hacking attempt!\");\n}\n\nif (!$conf['enable_extensions_install'])\n{\n  die('Piwigo extensions install/update system is disabled');\n}\n\ninclude_once(PHPWG_ROOT_PATH.'admin/include/plugins.class.php');\n\n$template->set_filenames(array('plugins' => 'plugins_new.tpl'));\n\n$base_url = get_root_url().'admin.php?page='.$page['page'].'&tab='.$page['tab'];\n\n$plugins = new plugins();\n\n//------------------------------------------------------automatic installation\nif (isset($_GET['revision']) and isset($_GET['extension']))\n{\n  if (!is_webmaster())\n  {\n    $page['errors'][] = l10n('Webmaster status is required.');\n  }\n  else\n  {\n    check_pwg_token();\n    \n    $install_status = $plugins->extract_plugin_files('install', $_GET['revision'], $_GET['extension'], $plugin_id);\n\n    redirect($base_url.'&installstatus='.$install_status.'&plugin_id='.$plugin_id);\n  }\n}\n\n//--------------------------------------------------------------install result\nif (isset($_GET['installstatus']))\n{\n  switch ($_GET['installstatus'])\n  {\n    case 'ok':\n      $activate_url = get_root_url().'admin.php?page=plugins'\n        . '&amp;plugin=' . $_GET['plugin_id']\n        . '&amp;pwg_token=' . get_pwg_token()\n        . '&amp;action=activate'\n        . '&amp;filter=deactivated';\n\n      $page['infos'][] = l10n('Plugin has been successfully copied');\n      $page['infos'][] = '<a href=\"'. $activate_url . '\">' . l10n('Activate it now') . '</a>';\n\n      if (isset($plugins->fs_plugins[$_GET['plugin_id']]))\n      {\n        pwg_activity(\n          'system',\n          ACTIVITY_SYSTEM_PLUGIN,\n          'install',\n          array(\n            'plugin_id' => $_GET['plugin_id'],\n            'version' => $plugins->fs_plugins[$_GET['plugin_id']]['version'],\n          )\n        );\n      }\n      break;\n\n    case 'temp_path_error':\n      $page['errors'][] = l10n('Can\\'t create temporary file.');\n      break;\n\n    case 'dl_archive_error':\n      $page['errors'][] = l10n('Can\\'t download archive.');\n      break;\n\n    case 'archive_error':\n      $page['errors'][] = l10n('Can\\'t read or extract archive.');\n      break;\n\n    default:\n      $page['errors'][] = l10n('An error occured during extraction (%s).', htmlspecialchars($_GET['installstatus']));\n      $page['errors'][] = l10n('Please check \"plugins\" folder and sub-folders permissions (CHMOD).');\n  }  \n}\n\n//---------------------------------------------------------------Order options\n$template->assign('order_options',\n  array(\n    'date' => l10n('Post date'),\n    'revision' => l10n('Last revisions'),\n    'name' => l10n('Name'),\n    'author' => l10n('Author'),\n    'downloads' => l10n('Number of downloads')));\n\n// +-----------------------------------------------------------------------+\n// |                     start template output                             |\n// +-----------------------------------------------------------------------+\n\n// Beta test : show plugins of last version on PEM if the current version isn't present\n// If the current version in known, give the current and last version's compatible plugins\n$beta_test = false;\n\nif(isset($_GET['beta-test']) && $_GET['beta-test'] == 'true') \n{\n  $beta_test = true;\n}\n\nif ($plugins->get_server_plugins(true, $beta_test))\n{\n  /* order plugins */\n  if (pwg_get_session_var('plugins_new_order') != null)\n  {\n    $order_selected = pwg_get_session_var('plugins_new_order');\n    $plugins->sort_server_plugins($order_selected);\n    $template->assign('order_selected', $order_selected);\n  }\n  else\n  {\n    $plugins->sort_server_plugins('date');\n    $template->assign('order_selected', 'date');\n  }\n\n  foreach($plugins->server_plugins as $plugin)\n  {\n    $ext_desc = trim($plugin['extension_description'], \" \\n\\r\");\n    list($small_desc) = explode(\"\\n\", wordwrap($ext_desc, 200));\n\n    $url_auto_install = htmlentities($base_url)\n      . '&amp;revision=' . $plugin['revision_id']\n      . '&amp;extension=' . $plugin['extension_id']\n      . '&amp;pwg_token='.get_pwg_token()\n    ;\n\n    // get the age of the last revision in days\n    $last_revision_diff = date_diff(date_create($plugin['revision_date']), date_create());\n\n    $certification = 1;\n    $has_compatible_version = false;\n\n    // Check if the current version is in the compatible version (not necessary if we are in beta test)\n    if ($beta_test) {\n      foreach ($plugin['compatible_with_versions'] as $vers) {\n        if (get_branch_from_version($vers) == get_branch_from_version(PHPWG_VERSION)) \n        {\n          $has_compatible_version = true;\n        } \n      }\n    } else {\n      $has_compatible_version = true;\n    }\n\n    if (!$has_compatible_version) {\n      $certification = -1;\n    }\n    elseif ($last_revision_diff->days < 90) // if the last revision is new of 3 month or less\n    {\n      $certification = 3;\n    }\n    elseif ($last_revision_diff->days < 180) // 6 month or less\n    {\n      $certification = 2;\n    }\n    elseif ($last_revision_diff->y > 3) // 3 years or less\n    {\n      $certification = 0;\n    }\n    // Between 6 month and 3 years : certification = 1\n\n    $template->append('plugins', array(\n      'ID' => $plugin['extension_id'],\n      'EXT_NAME' => $plugin['extension_name'],\n      'EXT_URL' => PEM_URL.'/extension_view.php?eid='.$plugin['extension_id'],\n      'SMALL_DESC' => trim($small_desc, \" \\r\\n\"),\n      'BIG_DESC' => $ext_desc,\n      'VERSION' => $plugin['revision_name'],\n      'REVISION_DATE' => preg_replace('/[^0-9]/', '', strtotime($plugin['revision_date'])),\n      'REVISION_FORMATED_DATE' => format_date($plugin['revision_date'], array('day','month','year')).\", \".time_since($plugin['revision_date'], \"day\"),\n      'AUTHOR' => $plugin['author_name'],\n      'DOWNLOADS' => $plugin['extension_nb_downloads'],\n      'URL_INSTALL' => $url_auto_install,\n      'CERTIFICATION' => $certification,\n      'RATING' => $plugin['rating_score'],\n      'NB_RATINGS' => $plugin['nb_ratings'],\n      'SCREENSHOT' => (key_exists('screenshot_url', $plugin)) ? $plugin['screenshot_url']:'',\n      'TAGS' => $plugin[\"tags\"],\n    ));\n  }\n\n  \n}\nelse\n{\n  $page['errors'][] = l10n('Can\\'t connect to server.');\n}\n\nif (!$beta_test and preg_match('/(beta|RC)/', PHPWG_VERSION))\n{\n  $template->assign('BETA_URL', $base_url.'&amp;beta-test=true');\n}\n$template->assign('ADMIN_PAGE_TITLE', l10n('Plugins'));\n$template->assign('BETA_TEST', $beta_test);\n$template->assign_var_from_handle('ADMIN_CONTENT', 'plugins');\n?>"], "fixing_code": ["<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\nif( !defined(\"PHPWG_ROOT_PATH\") )\n{\n  die (\"Hacking attempt!\");\n}\n\nif (!$conf['enable_extensions_install'])\n{\n  die('Piwigo extensions install/update system is disabled');\n}\n\ninclude_once(PHPWG_ROOT_PATH.'admin/include/plugins.class.php');\n\n$template->set_filenames(array('plugins' => 'plugins_new.tpl'));\n\n$base_url = get_root_url().'admin.php?page='.$page['page'].'&tab='.$page['tab'];\n\n$plugins = new plugins();\n\n//------------------------------------------------------automatic installation\nif (isset($_GET['revision']) and isset($_GET['extension']))\n{\n  if (!is_webmaster())\n  {\n    $page['errors'][] = l10n('Webmaster status is required.');\n  }\n  else\n  {\n    check_pwg_token();\n    \n    $install_status = $plugins->extract_plugin_files('install', $_GET['revision'], $_GET['extension'], $plugin_id);\n\n    redirect($base_url.'&installstatus='.$install_status.'&plugin_id='.$plugin_id);\n  }\n}\n\n//--------------------------------------------------------------install result\nif (isset($_GET['installstatus']))\n{\n  switch ($_GET['installstatus'])\n  {\n    case 'ok':\n      // since Piwigo 12, you need to be on the page of installed plugins to active a plugin with\n      // a JS action, no need to provide plugin_id in URL, just link to the page of installed\n      // plugins, filtered on deactivated plugins. The webmaster will have to find its newly\n      // installed plugin and click on the activation switch.\n      $activate_url = get_root_url().'admin.php?page=plugins&amp;filter=deactivated';\n\n      $page['infos'][] = l10n('Plugin has been successfully copied');\n      $page['infos'][] = '<a href=\"'. $activate_url . '\">' . l10n('Activate it now') . '</a>';\n\n      if (isset($plugins->fs_plugins[$_GET['plugin_id']]))\n      {\n        pwg_activity(\n          'system',\n          ACTIVITY_SYSTEM_PLUGIN,\n          'install',\n          array(\n            'plugin_id' => $_GET['plugin_id'],\n            'version' => $plugins->fs_plugins[$_GET['plugin_id']]['version'],\n          )\n        );\n      }\n      break;\n\n    case 'temp_path_error':\n      $page['errors'][] = l10n('Can\\'t create temporary file.');\n      break;\n\n    case 'dl_archive_error':\n      $page['errors'][] = l10n('Can\\'t download archive.');\n      break;\n\n    case 'archive_error':\n      $page['errors'][] = l10n('Can\\'t read or extract archive.');\n      break;\n\n    default:\n      $page['errors'][] = l10n('An error occured during extraction (%s).', htmlspecialchars($_GET['installstatus']));\n      $page['errors'][] = l10n('Please check \"plugins\" folder and sub-folders permissions (CHMOD).');\n  }  \n}\n\n//---------------------------------------------------------------Order options\n$template->assign('order_options',\n  array(\n    'date' => l10n('Post date'),\n    'revision' => l10n('Last revisions'),\n    'name' => l10n('Name'),\n    'author' => l10n('Author'),\n    'downloads' => l10n('Number of downloads')));\n\n// +-----------------------------------------------------------------------+\n// |                     start template output                             |\n// +-----------------------------------------------------------------------+\n\n// Beta test : show plugins of last version on PEM if the current version isn't present\n// If the current version in known, give the current and last version's compatible plugins\n$beta_test = false;\n\nif(isset($_GET['beta-test']) && $_GET['beta-test'] == 'true') \n{\n  $beta_test = true;\n}\n\nif ($plugins->get_server_plugins(true, $beta_test))\n{\n  /* order plugins */\n  if (pwg_get_session_var('plugins_new_order') != null)\n  {\n    $order_selected = pwg_get_session_var('plugins_new_order');\n    $plugins->sort_server_plugins($order_selected);\n    $template->assign('order_selected', $order_selected);\n  }\n  else\n  {\n    $plugins->sort_server_plugins('date');\n    $template->assign('order_selected', 'date');\n  }\n\n  foreach($plugins->server_plugins as $plugin)\n  {\n    $ext_desc = trim($plugin['extension_description'], \" \\n\\r\");\n    list($small_desc) = explode(\"\\n\", wordwrap($ext_desc, 200));\n\n    $url_auto_install = htmlentities($base_url)\n      . '&amp;revision=' . $plugin['revision_id']\n      . '&amp;extension=' . $plugin['extension_id']\n      . '&amp;pwg_token='.get_pwg_token()\n    ;\n\n    // get the age of the last revision in days\n    $last_revision_diff = date_diff(date_create($plugin['revision_date']), date_create());\n\n    $certification = 1;\n    $has_compatible_version = false;\n\n    // Check if the current version is in the compatible version (not necessary if we are in beta test)\n    if ($beta_test) {\n      foreach ($plugin['compatible_with_versions'] as $vers) {\n        if (get_branch_from_version($vers) == get_branch_from_version(PHPWG_VERSION)) \n        {\n          $has_compatible_version = true;\n        } \n      }\n    } else {\n      $has_compatible_version = true;\n    }\n\n    if (!$has_compatible_version) {\n      $certification = -1;\n    }\n    elseif ($last_revision_diff->days < 90) // if the last revision is new of 3 month or less\n    {\n      $certification = 3;\n    }\n    elseif ($last_revision_diff->days < 180) // 6 month or less\n    {\n      $certification = 2;\n    }\n    elseif ($last_revision_diff->y > 3) // 3 years or less\n    {\n      $certification = 0;\n    }\n    // Between 6 month and 3 years : certification = 1\n\n    $template->append('plugins', array(\n      'ID' => $plugin['extension_id'],\n      'EXT_NAME' => $plugin['extension_name'],\n      'EXT_URL' => PEM_URL.'/extension_view.php?eid='.$plugin['extension_id'],\n      'SMALL_DESC' => trim($small_desc, \" \\r\\n\"),\n      'BIG_DESC' => $ext_desc,\n      'VERSION' => $plugin['revision_name'],\n      'REVISION_DATE' => preg_replace('/[^0-9]/', '', strtotime($plugin['revision_date'])),\n      'REVISION_FORMATED_DATE' => format_date($plugin['revision_date'], array('day','month','year')).\", \".time_since($plugin['revision_date'], \"day\"),\n      'AUTHOR' => $plugin['author_name'],\n      'DOWNLOADS' => $plugin['extension_nb_downloads'],\n      'URL_INSTALL' => $url_auto_install,\n      'CERTIFICATION' => $certification,\n      'RATING' => $plugin['rating_score'],\n      'NB_RATINGS' => $plugin['nb_ratings'],\n      'SCREENSHOT' => (key_exists('screenshot_url', $plugin)) ? $plugin['screenshot_url']:'',\n      'TAGS' => $plugin[\"tags\"],\n    ));\n  }\n\n  \n}\nelse\n{\n  $page['errors'][] = l10n('Can\\'t connect to server.');\n}\n\nif (!$beta_test and preg_match('/(beta|RC)/', PHPWG_VERSION))\n{\n  $template->assign('BETA_URL', $base_url.'&amp;beta-test=true');\n}\n$template->assign('ADMIN_PAGE_TITLE', l10n('Plugins'));\n$template->assign('BETA_TEST', $beta_test);\n$template->assign_var_from_handle('ADMIN_CONTENT', 'plugins');\n?>"], "filenames": ["admin/plugins_new.php"], "buggy_code_start_loc": [50], "buggy_code_end_loc": [55], "fixing_code_start_loc": [50], "fixing_code_end_loc": [55], "type": "CWE-79", "message": "Piwigo is an open source photo gallery application. Prior to version 14.0.0beta4, a reflected cross-site scripting (XSS) vulnerability is in the` /admin.php?page=plugins&tab=new&installstatus=ok&plugin_id=[here]` page. This vulnerability can be exploited by an attacker to inject malicious HTML and JS code into the HTML page, which could then be executed by admin users when they visit the URL with the payload. The vulnerability is caused by the insecure injection of the `plugin_id` value from the URL into the HTML page. An attacker can exploit this vulnerability by crafting a malicious URL that contains a specially crafted `plugin_id` value. When a victim who is logged in as an administrator visits this URL, the malicious code will be injected into the HTML page and executed. This vulnerability can be exploited by any attacker who has access to a malicious URL. However, only users who are logged in as administrators are affected. This is because the vulnerability is only present on the `/admin.php?page=plugins&tab=new&installstatus=ok&plugin_id=[here]` page, which is only accessible to administrators. Version 14.0.0.beta4 contains a patch for this issue.", "other": {"cve": {"id": "CVE-2023-44393", "sourceIdentifier": "security-advisories@github.com", "published": "2023-10-09T15:15:10.057", "lastModified": "2023-10-13T18:42:49.323", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Piwigo is an open source photo gallery application. Prior to version 14.0.0beta4, a reflected cross-site scripting (XSS) vulnerability is in the` /admin.php?page=plugins&tab=new&installstatus=ok&plugin_id=[here]` page. This vulnerability can be exploited by an attacker to inject malicious HTML and JS code into the HTML page, which could then be executed by admin users when they visit the URL with the payload. The vulnerability is caused by the insecure injection of the `plugin_id` value from the URL into the HTML page. An attacker can exploit this vulnerability by crafting a malicious URL that contains a specially crafted `plugin_id` value. When a victim who is logged in as an administrator visits this URL, the malicious code will be injected into the HTML page and executed. This vulnerability can be exploited by any attacker who has access to a malicious URL. However, only users who are logged in as administrators are affected. This is because the vulnerability is only present on the `/admin.php?page=plugins&tab=new&installstatus=ok&plugin_id=[here]` page, which is only accessible to administrators. Version 14.0.0.beta4 contains a patch for this issue."}, {"lang": "es", "value": "Piwigo es una aplicaci\u00f3n de galer\u00eda de fotograf\u00edas de c\u00f3digo abierto. Antes de la versi\u00f3n 14.0.0beta4, una vulnerabilidad de Cross-Site Scripting (XSS) reflejada se encuentra en la p\u00e1gina ` /admin.php?page=plugins&amp;tab=new&amp;installstatus=ok&amp;plugin_id=[here]`. Un atacante puede aprovechar esta vulnerabilidad para inyectar c\u00f3digo HTML y JS malicioso en la p\u00e1gina HTML, que luego los usuarios administradores podr\u00edan ejecutar cuando visiten la URL con el payload. La vulnerabilidad se debe a la inyecci\u00f3n insegura del valor `plugin_id` de la URL en la p\u00e1gina HTML. Un atacante puede aprovechar esta vulnerabilidad creando una URL maliciosa que contenga un valor \"plugin_id\" especialmente manipulado. Cuando una v\u00edctima que ha iniciado sesi\u00f3n como administrador visita esta URL, el c\u00f3digo malicioso se inyectar\u00e1 en la p\u00e1gina HTML y se ejecutar\u00e1. Esta vulnerabilidad puede ser aprovechada por cualquier atacante que tenga acceso a una URL maliciosa. Sin embargo, s\u00f3lo se ven afectados los usuarios que han iniciado sesi\u00f3n como administradores. Esto se debe a que la vulnerabilidad solo est\u00e1 presente en la p\u00e1gina `/admin.php?page=plugins&amp;tab=new&amp;installstatus=ok&amp;plugin_id=[here]`, a la que solo pueden acceder los administradores. La versi\u00f3n 14.0.0.beta4 contiene un parche para este problema."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.3, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.8, "impactScore": 5.8}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}, {"lang": "en", "value": "CWE-80"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:piwigo:piwigo:*:*:*:*:*:*:*:*", "versionEndIncluding": "13.8.0", "matchCriteriaId": "A9A51DBC-EA76-4B8F-8DE6-7745C843A675"}, {"vulnerable": true, "criteria": "cpe:2.3:a:piwigo:piwigo:14.0.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "C56DF199-9F77-4651-B7C7-B592A9C65AF7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:piwigo:piwigo:14.0.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "7CBD8ECB-841F-4C29-A7DF-72F5D2FBBC99"}, {"vulnerable": true, "criteria": "cpe:2.3:a:piwigo:piwigo:14.0.0:beta3:*:*:*:*:*:*", "matchCriteriaId": "2AB2327B-CFBB-4863-BEC1-B92F0602AF3A"}]}]}], "references": [{"url": "https://github.com/Piwigo/Piwigo/commit/cc99c0f1e967c5f1722a0cce30ff42374a7bbc23", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/Piwigo/Piwigo/security/advisories/GHSA-qg85-957m-7vgg", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Piwigo/Piwigo/commit/cc99c0f1e967c5f1722a0cce30ff42374a7bbc23"}}