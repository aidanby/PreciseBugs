{"buggy_code": ["<?php\n/*+********************************************************************************\n * The contents of this file are subject to the vtiger CRM Public License Version 1.0\n * (\"License\"); You may not use this file except in compliance with the License\n * The Original Code is:  vtiger CRM Open Source\n * The Initial Developer of the Original Code is vtiger.\n * Portions created by vtiger are Copyright (C) vtiger.\n * All Rights Reserved.\n *********************************************************************************/\nrequire_once 'include/utils/utils.php';\nrequire_once 'modules/PickList/PickListUtils.php';\n\nglobal $adb, $current_user, $default_charset;\n\n$moduleName = $_REQUEST['fld_module'];\n$tableName = $_REQUEST['fieldname'];\n$tableName = $adb->sql_escape_string($tableName);\n$mode = trim($_REQUEST['mode']);\nif (empty($mode)) {\n\techo 'action mode is empty';\n\texit;\n}\n$reloadpage = false;\nif ($mode == 'add') {\n\t$newValues = $_REQUEST['newValues'];\n\t$selectedRoles = $_REQUEST['selectedRoles'];\n\n\t$arr = json_decode($newValues, true);\n\t$roles = json_decode($selectedRoles, true);\n\n\t$sql = 'select picklistid from vtiger_picklist where name=?';\n\t$result = $adb->pquery($sql, array($tableName));\n\t$picklistid = $adb->query_result($result, 0, 'picklistid');\n\n\tforeach ($arr as $val) {\n\t\tif (!empty($val)) {\n\t\t\t$id = $adb->getUniqueID(\"vtiger_$tableName\");\n\t\t\t$picklist_valueid = getUniquePicklistID();\n\t\t\t$sql = \"insert into vtiger_$tableName values (?,?,?,?)\";\n\t\t\t$adb->pquery($sql, array($id, $val, 1, $picklist_valueid));\n\t\t\t//add the picklist values to the selected roles\n\t\t\tforeach ($roles as $roleid) {\n\t\t\t\t$sql =\"select max(sortid)+1 as sortid\n\t\t\t\t\tfrom vtiger_role2picklist\n\t\t\t\t\tleft join vtiger_$tableName on vtiger_$tableName.picklist_valueid=vtiger_role2picklist.picklistvalueid\n\t\t\t\t\twhere roleid=? and picklistid=?\";\n\t\t\t\t$rs = $adb->pquery($sql, array($roleid, $picklistid));\n\t\t\t\t$sortid = $adb->query_result($rs, 0, 'sortid');\n\t\t\t\t$sql = 'insert into vtiger_role2picklist values(?,?,?,?)';\n\t\t\t\t$adb->pquery($sql, array($roleid, $picklist_valueid, $picklistid, $sortid));\n\t\t\t}\n\t\t}\n\t}\n\techo 'SUCCESS';\n} elseif ($mode == 'edit') {\n\t$newValues = json_decode(urldecode($_REQUEST['newValues']), true);\n\t$oldValues = json_decode(urldecode($_REQUEST['oldValues']), true);\n\tif (count($newValues) != count($oldValues)) {\n\t\techo 'Some error occured';\n\t\texit;\n\t}\n\n\t$qry = 'select tablename,columnname,uitype from vtiger_field where fieldname=? and presence in (0,2)';\n\t$result = $adb->pquery($qry, array($tableName));\n\t$num = $adb->num_rows($result);\n\t$uitype = $adb->query_result($result, 0, 'uitype');\n\tfor ($i=0; $i<count($newValues); $i++) {\n\t\t$newVal = array('encodedValue'=>html_entity_decode($newValues[$i], ENT_QUOTES, $default_charset), 'rawValue'=>$newValues[$i]);\n\t\t$oldVal = $oldValues[$i];\n\n\t\tif ($newVal['encodedValue'] != $oldVal) {\n\t\t\t$sql = \"UPDATE vtiger_$tableName SET $tableName=? WHERE $tableName=?\";\n\t\t\t$adb->pquery($sql, array($newVal['encodedValue'], html_entity_decode($oldVal, ENT_QUOTES, $default_charset)));\n\t\t\t//replace the value of this picklist with new one in all records\n\t\t\tif ($uitype==33) {\n\t\t\t\tfor ($n=0; $n<$num; $n++) {\n\t\t\t\t\t$table_name = $adb->query_result($result, $n, 'tablename');\n\t\t\t\t\t$columnName = $adb->query_result($result, $n, 'columnname');\n\t\t\t\t\t// unique value\n\t\t\t\t\t$sql = \"update $table_name set $columnName=? where $columnName=?\";\n\t\t\t\t\t$adb->pquery($sql, array($newVal['rawValue'], $oldVal));\n\t\t\t\t\t// middle value\n\t\t\t\t\t$sql = \"update $table_name set $columnName=REPLACE($columnName, ?, ?)\";\n\t\t\t\t\t$adb->pquery($sql, array('|##| '.$oldVal.' |##|', '|##| '.$newVal['rawValue'].' |##|'));\n\t\t\t\t\t// initial value\n\t\t\t\t\t$sql = \"update $table_name set $columnName=REPLACE($columnName, ?, ?)\";\n\t\t\t\t\t$adb->pquery($sql, array($oldVal.' |##|', $newVal['rawValue'].' |##|'));\n\t\t\t\t\t// final value\n\t\t\t\t\t$sql = \"update $table_name set $columnName=REPLACE($columnName, ?, ?)\";\n\t\t\t\t\t$adb->pquery($sql, array('|##| '.$oldVal, '|##| '.$newVal['rawValue']));\n\t\t\t\t\t// meta info\n\t\t\t\t\t$sql = 'UPDATE vtiger_field SET defaultvalue=? WHERE defaultvalue=? AND tablename=? AND columnname=?';\n\t\t\t\t\t$adb->pquery($sql, array($newVal['rawValue'], $oldVal, $table_name, $columnName));\n\t\t\t\t\t$sql = 'UPDATE vtiger_picklist_dependency SET sourcevalue=? WHERE sourcevalue=? AND sourcefield=? AND tabid=?';\n\t\t\t\t\t$adb->pquery($sql, array($newVal['rawValue'], $oldVal, $tableName, getTabid($moduleName)));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ($n=0; $n<$num; $n++) {\n\t\t\t\t\t$table_name = $adb->query_result($result, $n, 'tablename');\n\t\t\t\t\t$columnName = $adb->query_result($result, $n, 'columnname');\n\t\t\t\t\t$sql = \"update $table_name set $columnName=? where $columnName=?\";\n\t\t\t\t\t$adb->pquery($sql, array($newVal['rawValue'], $oldVal));\n\t\t\t\t\t$sql = 'UPDATE vtiger_field SET defaultvalue=? WHERE defaultvalue=? AND tablename=? AND columnname=?';\n\t\t\t\t\t$adb->pquery($sql, array($newVal['rawValue'], $oldVal, $table_name, $columnName));\n\t\t\t\t\t$sql = 'UPDATE vtiger_picklist_dependency SET sourcevalue=? WHERE sourcevalue=? AND sourcefield=? AND tabid=?';\n\t\t\t\t\t$adb->pquery($sql, array($newVal['rawValue'], $oldVal, $tableName, getTabid($moduleName)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\techo 'SUCCESS';\n} elseif ($mode == 'delete') {\n\t$values = json_decode($_REQUEST['values'], true);\n\t$replaceVal = $_REQUEST['replaceVal'];\n\tif (!empty($replaceVal)) {\n\t\t$sql = \"select * from vtiger_$tableName where $tableName=?\";\n\t\t$result = $adb->pquery($sql, array($replaceVal));\n\t\t$replacePicklistID = $adb->query_result($result, 0, 'picklist_valueid');\n\t}\n\tfor ($i=0; $i<count($values); $i++) {\n\t\t$sql = \"select * from vtiger_$tableName where $tableName=?\";\n\t\t$result = $adb->pquery($sql, array($values[$i]));\n\t\t$origPicklistID = $adb->query_result($result, 0, 'picklist_valueid');\n\t\t//give permissions for the new picklist\n\t\tif (!empty($replaceVal)) {\n\t\t\t$sql = 'select * from vtiger_role2picklist where picklistvalueid=?';\n\t\t\t$result = $adb->pquery($sql, array($replacePicklistID));\n\t\t\t$count = $adb->num_rows($result);\n\t\t\tif ($count == 0) {\n\t\t\t\t$sql = 'update vtiger_role2picklist set picklistvalueid=? where picklistvalueid=?';\n\t\t\t\t$adb->pquery($sql, array($replacePicklistID, $origPicklistID));\n\t\t\t}\n\t\t}\n\t\t$values[$i] = array('encodedValue'=>html_entity_decode($values[$i], ENT_QUOTES, $default_charset),'rawValue'=>$values[$i]);\n\t\t$sql = \"delete from vtiger_$tableName where $tableName=?\";\n\t\t$adb->pquery($sql, array($values[$i]['encodedValue']));\n\t\t$sql = 'delete from vtiger_role2picklist where picklistvalueid=?';\n\t\t$adb->pquery($sql, array($origPicklistID));\n\t\t$sql = 'DELETE FROM vtiger_picklist_dependency WHERE sourcevalue=? AND sourcefield=? AND tabid=?';\n\t\t$adb->pquery($sql, array($values[$i]['encodedValue'], $tableName, getTabid($moduleName)));\n\t\t//replace the value of this picklist with new one in all records\n\t\t$qry = 'select tablename,columnname,uitype from vtiger_field where fieldname=? and presence in (0,2)';\n\t\t$result = $adb->pquery($qry, array($tableName));\n\t\t$num = $adb->num_rows($result);\n\t\t$uitype = $adb->query_result($result, 0, 'uitype');\n\t\tif ($uitype==33) {\n\t\t\tfor ($n=0; $n<$num; $n++) {\n\t\t\t\t$table_name = $adb->query_result($result, $n, 'tablename');\n\t\t\t\t$columnName = $adb->query_result($result, $n, 'columnname');\n\t\t\t\t// unique value\n\t\t\t\t$sql = \"update $table_name set $columnName=? where $columnName=?\";\n\t\t\t\t$adb->pquery($sql, array($replaceVal, $values[$i]['rawValue']));\n\t\t\t\t// middle value\n\t\t\t\t$sql = \"update $table_name set $columnName=REPLACE($columnName, ?, ?)\";\n\t\t\t\t$adb->pquery($sql, array('|##| '.$values[$i]['rawValue'].' |##|', '|##| '.$replaceVal.' |##|'));\n\t\t\t\t// initial value\n\t\t\t\t$sql = \"update $table_name set $columnName=REPLACE($columnName, ?, ?)\";\n\t\t\t\t$adb->pquery($sql, array($values[$i]['rawValue'].' |##|', $replaceVal.' |##|'));\n\t\t\t\t// final value\n\t\t\t\t$sql = \"update $table_name set $columnName=REPLACE($columnName, ?, ?)\";\n\t\t\t\t$adb->pquery($sql, array('|##| '.$values[$i]['rawValue'], '|##| '.$replaceVal));\n\t\t\t\t// meta info\n\t\t\t\t$sql = 'UPDATE vtiger_field SET defaultvalue=? WHERE defaultvalue=? AND tablename=? AND columnname=?';\n\t\t\t\t$adb->pquery($sql, array($replaceVal, $values[$i]['rawValue'], $table_name, $columnName));\n\t\t\t}\n\t\t} else {\n\t\t\tfor ($n=0; $n<$num; $n++) {\n\t\t\t\t$table_name = $adb->query_result($result, $n, 'tablename');\n\t\t\t\t$columnName = $adb->query_result($result, $n, 'columnname');\n\t\t\t\t$sql = \"update $table_name set $columnName=? where $columnName=?\";\n\t\t\t\t$adb->pquery($sql, array($replaceVal, $values[$i]['rawValue']));\n\t\t\t\t$sql = 'UPDATE vtiger_field SET defaultvalue=? WHERE defaultvalue=? AND tablename=? AND columnname=?';\n\t\t\t\t$adb->pquery($sql, array($replaceVal, $values[$i]['rawValue'], $table_name, $columnName));\n\t\t\t}\n\t\t}\n\t}\n\techo 'SUCCESS';\n} elseif ($mode == 'savei18n') {\n\tif (hasNonEditablePicklistValues($_REQUEST['fieldname'])) {\n\t\techo getTranslatedString('ERR_MustBeTranslated', 'PickList');\n\t} else {\n\t\t$adb->pquery('update vtiger_picklist set multii18n=? where name=?', array(($_REQUEST['ischecked']=='true' ? 1 : 0), $_REQUEST['fieldname']));\n\t\techo 'SUCCESS';\n\t}\n} elseif ($mode == 'cleanpicklist') {\n\t$reloadpage = true;\n\tcleanPicklist($moduleName, $tableName);\n}\n\nif ($mode == 'add' || $mode == 'edit' || $mode == 'delete' || $mode == 'cleanpicklist') {\n\tif ($cbAppCache->isUsable()) {\n\t\t$allRoles = $adb->query('select roleid from vtiger_role');\n\t\t$rolesCount = $adb->num_rows($allRoles);\n\t\tif ($rolesCount > 0) {\n\t\t\t$cacheKeys = array();\n\t\t\tfor ($i = 0; $i < $rolesCount; $i++) {\n\t\t\t\t$roleId = $adb->query_result($allRoles, $i, 'roleid');\n\t\t\t\t$cacheKeys[] = $tableName.\"#\".$roleId;\n\t\t\t}\n\t\t\t$cbAppCache->getCacheClient()->deleteMultiple($cacheKeys);\n\t\t}\n\t}\n}\nif ($reloadpage) {\n\theader('Location: index.php?module=PickList&action=PickList');\n\texit;\n}\n?>\n"], "fixing_code": ["<?php\n/*+********************************************************************************\n * The contents of this file are subject to the vtiger CRM Public License Version 1.0\n * (\"License\"); You may not use this file except in compliance with the License\n * The Original Code is:  vtiger CRM Open Source\n * The Initial Developer of the Original Code is vtiger.\n * Portions created by vtiger are Copyright (C) vtiger.\n * All Rights Reserved.\n *********************************************************************************/\nrequire_once 'include/utils/utils.php';\nrequire_once 'modules/PickList/PickListUtils.php';\n\nglobal $adb, $current_user, $default_charset;\n\n$moduleName = $_REQUEST['fld_module'];\n$tableName = $_REQUEST['fieldname'];\n$tableName = $adb->sql_escape_string($tableName);\n$mode = trim($_REQUEST['mode']);\nif (empty($mode)) {\n\techo 'action mode is empty';\n\texit;\n}\n$reloadpage = false;\nif ($mode == 'add') {\n\t$newValues = $_REQUEST['newValues'];\n\t$selectedRoles = $_REQUEST['selectedRoles'];\n\n\t$arr = json_decode($newValues, true);\n\t$roles = json_decode($selectedRoles, true);\n\n\t$sql = 'select picklistid from vtiger_picklist where name=?';\n\t$result = $adb->pquery($sql, array($tableName));\n\t$picklistid = $adb->query_result($result, 0, 'picklistid');\n\n\tforeach ($arr as $val) {\n\t\tif (!empty($val)) {\n\t\t\t$id = $adb->getUniqueID(\"vtiger_$tableName\");\n\t\t\t$picklist_valueid = getUniquePicklistID();\n\t\t\t$sql = \"insert into vtiger_$tableName values (?,?,?,?)\";\n\t\t\t$adb->pquery($sql, array($id, vtlib_purify($val), 1, $picklist_valueid));\n\t\t\t//add the picklist values to the selected roles\n\t\t\tforeach ($roles as $roleid) {\n\t\t\t\t$sql =\"select max(sortid)+1 as sortid\n\t\t\t\t\tfrom vtiger_role2picklist\n\t\t\t\t\tleft join vtiger_$tableName on vtiger_$tableName.picklist_valueid=vtiger_role2picklist.picklistvalueid\n\t\t\t\t\twhere roleid=? and picklistid=?\";\n\t\t\t\t$rs = $adb->pquery($sql, array($roleid, $picklistid));\n\t\t\t\t$sortid = $adb->query_result($rs, 0, 'sortid');\n\t\t\t\t$sql = 'insert into vtiger_role2picklist values(?,?,?,?)';\n\t\t\t\t$adb->pquery($sql, array($roleid, $picklist_valueid, $picklistid, $sortid));\n\t\t\t}\n\t\t}\n\t}\n\techo 'SUCCESS';\n} elseif ($mode == 'edit') {\n\t$newValues = json_decode(urldecode($_REQUEST['newValues']), true);\n\t$oldValues = json_decode(urldecode($_REQUEST['oldValues']), true);\n\tif (count($newValues) != count($oldValues)) {\n\t\techo 'Some error occured';\n\t\texit;\n\t}\n\n\t$qry = 'select tablename,columnname,uitype from vtiger_field where fieldname=? and presence in (0,2)';\n\t$result = $adb->pquery($qry, array($tableName));\n\t$num = $adb->num_rows($result);\n\t$uitype = $adb->query_result($result, 0, 'uitype');\n\tfor ($i=0; $i<count($newValues); $i++) {\n\t\t$newVal = array('encodedValue'=>html_entity_decode($newValues[$i], ENT_QUOTES, $default_charset), 'rawValue'=>$newValues[$i]);\n\t\t$oldVal = $oldValues[$i];\n\n\t\tif ($newVal['encodedValue'] != $oldVal) {\n\t\t\t$sql = \"UPDATE vtiger_$tableName SET $tableName=? WHERE $tableName=?\";\n\t\t\t$adb->pquery($sql, array($newVal['encodedValue'], html_entity_decode($oldVal, ENT_QUOTES, $default_charset)));\n\t\t\t//replace the value of this picklist with new one in all records\n\t\t\tif ($uitype==33) {\n\t\t\t\tfor ($n=0; $n<$num; $n++) {\n\t\t\t\t\t$table_name = $adb->query_result($result, $n, 'tablename');\n\t\t\t\t\t$columnName = $adb->query_result($result, $n, 'columnname');\n\t\t\t\t\t// unique value\n\t\t\t\t\t$sql = \"update $table_name set $columnName=? where $columnName=?\";\n\t\t\t\t\t$adb->pquery($sql, array($newVal['rawValue'], $oldVal));\n\t\t\t\t\t// middle value\n\t\t\t\t\t$sql = \"update $table_name set $columnName=REPLACE($columnName, ?, ?)\";\n\t\t\t\t\t$adb->pquery($sql, array('|##| '.$oldVal.' |##|', '|##| '.$newVal['rawValue'].' |##|'));\n\t\t\t\t\t// initial value\n\t\t\t\t\t$sql = \"update $table_name set $columnName=REPLACE($columnName, ?, ?)\";\n\t\t\t\t\t$adb->pquery($sql, array($oldVal.' |##|', $newVal['rawValue'].' |##|'));\n\t\t\t\t\t// final value\n\t\t\t\t\t$sql = \"update $table_name set $columnName=REPLACE($columnName, ?, ?)\";\n\t\t\t\t\t$adb->pquery($sql, array('|##| '.$oldVal, '|##| '.$newVal['rawValue']));\n\t\t\t\t\t// meta info\n\t\t\t\t\t$sql = 'UPDATE vtiger_field SET defaultvalue=? WHERE defaultvalue=? AND tablename=? AND columnname=?';\n\t\t\t\t\t$adb->pquery($sql, array($newVal['rawValue'], $oldVal, $table_name, $columnName));\n\t\t\t\t\t$sql = 'UPDATE vtiger_picklist_dependency SET sourcevalue=? WHERE sourcevalue=? AND sourcefield=? AND tabid=?';\n\t\t\t\t\t$adb->pquery($sql, array($newVal['rawValue'], $oldVal, $tableName, getTabid($moduleName)));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ($n=0; $n<$num; $n++) {\n\t\t\t\t\t$table_name = $adb->query_result($result, $n, 'tablename');\n\t\t\t\t\t$columnName = $adb->query_result($result, $n, 'columnname');\n\t\t\t\t\t$sql = \"update $table_name set $columnName=? where $columnName=?\";\n\t\t\t\t\t$adb->pquery($sql, array($newVal['rawValue'], $oldVal));\n\t\t\t\t\t$sql = 'UPDATE vtiger_field SET defaultvalue=? WHERE defaultvalue=? AND tablename=? AND columnname=?';\n\t\t\t\t\t$adb->pquery($sql, array($newVal['rawValue'], $oldVal, $table_name, $columnName));\n\t\t\t\t\t$sql = 'UPDATE vtiger_picklist_dependency SET sourcevalue=? WHERE sourcevalue=? AND sourcefield=? AND tabid=?';\n\t\t\t\t\t$adb->pquery($sql, array($newVal['rawValue'], $oldVal, $tableName, getTabid($moduleName)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\techo 'SUCCESS';\n} elseif ($mode == 'delete') {\n\t$values = json_decode($_REQUEST['values'], true);\n\t$replaceVal = $_REQUEST['replaceVal'];\n\tif (!empty($replaceVal)) {\n\t\t$sql = \"select * from vtiger_$tableName where $tableName=?\";\n\t\t$result = $adb->pquery($sql, array($replaceVal));\n\t\t$replacePicklistID = $adb->query_result($result, 0, 'picklist_valueid');\n\t}\n\tfor ($i=0; $i<count($values); $i++) {\n\t\t$sql = \"select * from vtiger_$tableName where $tableName=?\";\n\t\t$result = $adb->pquery($sql, array($values[$i]));\n\t\t$origPicklistID = $adb->query_result($result, 0, 'picklist_valueid');\n\t\t//give permissions for the new picklist\n\t\tif (!empty($replaceVal)) {\n\t\t\t$sql = 'select * from vtiger_role2picklist where picklistvalueid=?';\n\t\t\t$result = $adb->pquery($sql, array($replacePicklistID));\n\t\t\t$count = $adb->num_rows($result);\n\t\t\tif ($count == 0) {\n\t\t\t\t$sql = 'update vtiger_role2picklist set picklistvalueid=? where picklistvalueid=?';\n\t\t\t\t$adb->pquery($sql, array($replacePicklistID, $origPicklistID));\n\t\t\t}\n\t\t}\n\t\t$values[$i] = array('encodedValue'=>html_entity_decode($values[$i], ENT_QUOTES, $default_charset),'rawValue'=>$values[$i]);\n\t\t$sql = \"delete from vtiger_$tableName where $tableName=?\";\n\t\t$adb->pquery($sql, array($values[$i]['encodedValue']));\n\t\t$sql = 'delete from vtiger_role2picklist where picklistvalueid=?';\n\t\t$adb->pquery($sql, array($origPicklistID));\n\t\t$sql = 'DELETE FROM vtiger_picklist_dependency WHERE sourcevalue=? AND sourcefield=? AND tabid=?';\n\t\t$adb->pquery($sql, array($values[$i]['encodedValue'], $tableName, getTabid($moduleName)));\n\t\t//replace the value of this picklist with new one in all records\n\t\t$qry = 'select tablename,columnname,uitype from vtiger_field where fieldname=? and presence in (0,2)';\n\t\t$result = $adb->pquery($qry, array($tableName));\n\t\t$num = $adb->num_rows($result);\n\t\t$uitype = $adb->query_result($result, 0, 'uitype');\n\t\tif ($uitype==33) {\n\t\t\tfor ($n=0; $n<$num; $n++) {\n\t\t\t\t$table_name = $adb->query_result($result, $n, 'tablename');\n\t\t\t\t$columnName = $adb->query_result($result, $n, 'columnname');\n\t\t\t\t// unique value\n\t\t\t\t$sql = \"update $table_name set $columnName=? where $columnName=?\";\n\t\t\t\t$adb->pquery($sql, array($replaceVal, $values[$i]['rawValue']));\n\t\t\t\t// middle value\n\t\t\t\t$sql = \"update $table_name set $columnName=REPLACE($columnName, ?, ?)\";\n\t\t\t\t$adb->pquery($sql, array('|##| '.$values[$i]['rawValue'].' |##|', '|##| '.$replaceVal.' |##|'));\n\t\t\t\t// initial value\n\t\t\t\t$sql = \"update $table_name set $columnName=REPLACE($columnName, ?, ?)\";\n\t\t\t\t$adb->pquery($sql, array($values[$i]['rawValue'].' |##|', $replaceVal.' |##|'));\n\t\t\t\t// final value\n\t\t\t\t$sql = \"update $table_name set $columnName=REPLACE($columnName, ?, ?)\";\n\t\t\t\t$adb->pquery($sql, array('|##| '.$values[$i]['rawValue'], '|##| '.$replaceVal));\n\t\t\t\t// meta info\n\t\t\t\t$sql = 'UPDATE vtiger_field SET defaultvalue=? WHERE defaultvalue=? AND tablename=? AND columnname=?';\n\t\t\t\t$adb->pquery($sql, array($replaceVal, $values[$i]['rawValue'], $table_name, $columnName));\n\t\t\t}\n\t\t} else {\n\t\t\tfor ($n=0; $n<$num; $n++) {\n\t\t\t\t$table_name = $adb->query_result($result, $n, 'tablename');\n\t\t\t\t$columnName = $adb->query_result($result, $n, 'columnname');\n\t\t\t\t$sql = \"update $table_name set $columnName=? where $columnName=?\";\n\t\t\t\t$adb->pquery($sql, array($replaceVal, $values[$i]['rawValue']));\n\t\t\t\t$sql = 'UPDATE vtiger_field SET defaultvalue=? WHERE defaultvalue=? AND tablename=? AND columnname=?';\n\t\t\t\t$adb->pquery($sql, array($replaceVal, $values[$i]['rawValue'], $table_name, $columnName));\n\t\t\t}\n\t\t}\n\t}\n\techo 'SUCCESS';\n} elseif ($mode == 'savei18n') {\n\tif (hasNonEditablePicklistValues($_REQUEST['fieldname'])) {\n\t\techo getTranslatedString('ERR_MustBeTranslated', 'PickList');\n\t} else {\n\t\t$adb->pquery('update vtiger_picklist set multii18n=? where name=?', array(($_REQUEST['ischecked']=='true' ? 1 : 0), $_REQUEST['fieldname']));\n\t\techo 'SUCCESS';\n\t}\n} elseif ($mode == 'cleanpicklist') {\n\t$reloadpage = true;\n\tcleanPicklist($moduleName, $tableName);\n}\n\nif ($mode == 'add' || $mode == 'edit' || $mode == 'delete' || $mode == 'cleanpicklist') {\n\tif ($cbAppCache->isUsable()) {\n\t\t$allRoles = $adb->query('select roleid from vtiger_role');\n\t\t$rolesCount = $adb->num_rows($allRoles);\n\t\tif ($rolesCount > 0) {\n\t\t\t$cacheKeys = array();\n\t\t\tfor ($i = 0; $i < $rolesCount; $i++) {\n\t\t\t\t$roleId = $adb->query_result($allRoles, $i, 'roleid');\n\t\t\t\t$cacheKeys[] = $tableName.\"#\".$roleId;\n\t\t\t}\n\t\t\t$cbAppCache->getCacheClient()->deleteMultiple($cacheKeys);\n\t\t}\n\t}\n}\nif ($reloadpage) {\n\theader('Location: index.php?module=PickList&action=PickList');\n\texit;\n}\n?>\n"], "filenames": ["modules/PickList/PickListAction.php"], "buggy_code_start_loc": [40], "buggy_code_end_loc": [41], "fixing_code_start_loc": [40], "fixing_code_end_loc": [41], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository tsolucio/corebos prior to 8.", "other": {"cve": {"id": "CVE-2023-3071", "sourceIdentifier": "security@huntr.dev", "published": "2023-06-02T17:15:13.513", "lastModified": "2023-06-09T18:23:43.637", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository tsolucio/corebos prior to 8."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.7, "impactScore": 5.3}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:tsolucio:corebos:*:*:*:*:*:*:*:*", "versionEndExcluding": "8.0", "matchCriteriaId": "B854FDD2-D9F5-4402-BE40-5059AB1DAED8"}]}]}], "references": [{"url": "https://github.com/tsolucio/corebos/commit/5e87fbc4292cf7a96fa5139ede88f4baefad104b", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/3e8d5166-9bc6-46e7-94a8-cad52434a39e", "source": "security@huntr.dev", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/tsolucio/corebos/commit/5e87fbc4292cf7a96fa5139ede88f4baefad104b"}}