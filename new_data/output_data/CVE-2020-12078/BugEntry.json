{"buggy_code": ["<?php\n/**\n#  Copyright 2003-2015 Opmantek Limited (www.opmantek.com)\n#\n#  ALL CODE MODIFICATIONS MUST BE SENT TO CODE@OPMANTEK.COM\n#\n#  This file is part of Open-AudIT.\n#\n#  Open-AudIT is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU Affero General Public License as published\n#  by the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  Open-AudIT is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU Affero General Public License for more details.\n#\n#  You should have received a copy of the GNU Affero General Public License\n#  along with Open-AudIT (most likely in a file named LICENSE).\n#  If not, see <http://www.gnu.org/licenses/>\n#\n#  For further information on Open-AudIT or for a license other than AGPL please see\n#  www.opmantek.com or email contact@opmantek.com\n#\n# *****************************************************************************\n*\n* PHP version 5.3.3\n* \n* @category  Helper\n* @package   Discoveries\n* @author    Mark Unwin <marku@opmantek.com>\n* @copyright 2014 Opmantek\n* @license   http://www.gnu.org/licenses/agpl-3.0.html aGPL v3\n* @version   GIT: Open-AudIT_3.3.1\n* @link      http://www.open-audit.org\n*/\n\n/**\n* Base Helper Discoveries\n*\n* @access   public\n* @category Helper\n* @package  Discoveries\n* @author   Mark Unwin <marku@opmantek.com>\n* @license  http://www.gnu.org/licenses/agpl-3.0.html aGPL v3\n* @link     http://www.open-audit.org\n */\nif ( ! defined('BASEPATH')) {\n\texit('No direct script access allowed');\n}\n\nif ( ! function_exists('all_ip_list')) {\n    /**\n     *\n     * @param  object $discovery The discovery object with all its parameters\n     * @return array|false All the IP addresses in this discovery (excluding the excluded list)\n     */\n\tfunction all_ip_list($discovery = null)\n\t{\n\t\tif (is_null($discovery)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$log = new stdClass();\n\t\t$log->discovery_id = $discovery->id;\n\t\t$log->severity = 6;\n\t\t$log->file = 'discoveries_helper';\n\t\t$log->function = 'all_ip_list';\n\t\t$log->command_status = 'notice';\n\t\t$log->message = 'Retrieving IP list';\n\t\t$log->ip = '127.0.0.1';\n\n\t\t$ip_addresses = array();\n\t\tif ( ! empty($discovery->attributes->other->nmap->exclude_ip)) {\n\t\t\t$command = 'nmap -n -sL --exclude ' . $discovery->attributes->other->nmap->exclude_ip . ' ' . $discovery->attributes->other->subnet;\n\t\t} else {\n\t\t\t$command = 'nmap -n -sL ' . $discovery->attributes->other->subnet;\n\t\t}\n\n\t\tif (php_uname('s') === 'Darwin') {\n\t\t\t$command = '/usr/local/bin/' . $command;\n\t\t}\n\t\t$log->command = $command;\n\n\t\texec($command, $output, $return_var);\n\t\tif ($return_var === 0) {\n\t\t\tforeach ($output as $line) {\n\t\t\t\tif (stripos($line, 'Nmap scan report for') === 0) {\n\t\t\t\t\t$temp = explode(' ', $line);\n\t\t\t\t\t$ip_addresses[] = $temp[4];\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tdiscovery_log($log);\n\t\t\treturn false;\n\t\t}\n\t\t$log->command_output = 'Total IPs: ' . @count($ip_addresses);\n\t\tdiscovery_log($log);\n\t\treturn $ip_addresses;\n\t}\n}\n\nif ( ! function_exists('ip_list')) {\n    /**\n     *\n     * @param  object $discovery The discovery object with all its parameters\n     * @return array|false The array of all responding IP addresses in the discovery\n     */\n\tfunction responding_ip_list($discovery = null)\n\t{\n\t\tif (is_null($discovery)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$log = new stdClass();\n\t\t$log->discovery_id = $discovery->id;\n\t\t$log->severity = 6;\n\t\t$log->file = 'discoveries_helper';\n\t\t$log->function = 'responding_ip_list';\n\t\t$log->command_status = 'notice';\n\t\t$log->message = 'Testing for responding IPs';\n\t\t$log->ip = '127.0.0.1';\n\n\t\t$ip_addresses = array();\n\t\tif ($discovery->attributes->other->nmap->ping === 'y') {\n\t\t\tif ( ! empty($discovery->attributes->other->nmap->exclude_ip)) {\n\t\t\t\t$command = 'nmap -n -oG - -sP --exclude ' . $discovery->attributes->other->nmap->exclude_ip . ' ' . $discovery->attributes->other->subnet;\n\t\t\t} else {\n\t\t\t\t$command = 'nmap -n -oG - -sP ' . $discovery->attributes->other->subnet;\n\t\t\t}\n\t\t\tif (php_uname('s') === 'Darwin') {\n\t\t\t\t$command = '/usr/local/bin/' . $command;\n\t\t\t}\n\t\t\t$log->command = $command;\n\t\t\texec($command, $output, $return_var);\n\t\t\tif ($return_var === 0) {\n\t\t\t\tforeach ($output as $line) {\n\t\t\t\t\tif (stripos($line, 'Host:') === 0) {\n\t\t\t\t\t\t$temp = explode(' ', $line);\n\t\t\t\t\t\t$ip_addresses[] = $temp[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdiscovery_log($log);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif ( ! empty($discovery->attributes->other->nmap->exclude_ip)) {\n\t\t\t\t$command = 'nmap -n -sL --exclude ' . $discovery->attributes->other->nmap->exclude_ip . ' ' . $discovery->attributes->other->subnet;\n\t\t\t} else {\n\t\t\t\t$command = 'nmap -n -sL ' . $discovery->attributes->other->subnet;\n\t\t\t}\n\t\t\tif (php_uname('s') === 'Darwin') {\n\t\t\t\t$command = '/usr/local/bin/' . $command;\n\t\t\t}\n\t\t\t$log->command = $command;\n\t\t\texec($command, $output, $return_var);\n\t\t\tif ($return_var === 0) {\n\t\t\t\tforeach ($output as $line) {\n\t\t\t\t\tif (stripos($line, 'Nmap scan report for') === 0) {\n\t\t\t\t\t\t$temp = explode(' ', $line);\n\t\t\t\t\t\t$ip_addresses[] = $temp[4];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdiscovery_log($log);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t$log->command_output = 'Responding IPs: ' . @count($ip_addresses);\n\t\tdiscovery_log($log);\n\t\treturn $ip_addresses;\n\t}\n}\n\nif ( ! function_exists('update_non_responding')) {\n    /**\n     *\n     * @param  int   $discovery_id       discoveries.id\n     * @param  array $all_ip_list        All the IP addresses in this discovery (excluding the excluded list)\n     * @param  array $responding_ip_list The array of all responding IP addresses in the discovery\n     * @return void\n     */\n\tfunction update_non_responding($discovery_id, $all_ip_list, $responding_ip_list)\n\t{\n\t\t$CI = get_instance();\n\t\t$start = microtime(true);\n\t\t$log = new stdClass();\n\t\t$log->discovery_id = $discovery_id;\n\t\t$log->severity = 6;\n\t\t$log->file = 'discoveries_helper';\n\t\t$log->function = 'update_non_responding';\n\t\t$log->command_status = 'notice';\n\t\t$log->message = 'Updating discovery log with non-responding IPs';\n\t\t$log->ip = '127.0.0.1';\n\t\t$id = discovery_log($log);\n\t\tforeach ($all_ip_list as $ip) {\n\t\t\tif ( ! in_array($ip, $responding_ip_list)) {\n\t\t\t\t// Update the discovery log to show this IP not responding\n\t\t\t\t$log->message = \"IP {$ip} not responding, ignoring.\";\n\t\t\t\t$log->ip = $ip;\n\t\t\t\tdiscovery_log($log);\n\t\t\t}\n\t\t}\n\t\t$log->command_time_to_execute = microtime(true) - $start;\n\t\t$sql = \"UPDATE discovery_log SET command_time_to_execute = '\" . $log->command_time_to_execute . \"' WHERE id = ?\";\n\t\t$data = array($id);\n\t\t$CI->db->query($sql, $data);\n\t}\n}\n\nif ( ! function_exists('queue_responding')) {\n\t/**\n\t * Insert into queue an entry for each responding IP\n\t * @param  int   $discovery_id       discoveries.id\n\t * @param  array $responding_ip_list The array of all responding IP addresses in the discovery\n\t * @return void\n\t */\n\tfunction queue_responding($discovery_id = 0, $responding_ip_list)\n\t{\n\t\t$CI = get_instance();\n\t\t$log = new stdClass();\n\t\t$log->discovery_id = $discovery_id;\n\t\t$log->severity = 6;\n\t\t$log->file = 'discoveries_helper';\n\t\t$log->function = 'update_responding';\n\t\t$log->command_status = 'notice';\t\t\n\t\tforeach ($responding_ip_list as $ip) {\n\t\t\t$item = new stdClass();\n\t\t\t$item->ip = $ip;\n\t\t\t$item->discovery_id = $discovery_id;\n\t\t\t$details = json_encode($item);\n\t\t\tunset ($item);\n\t\t\t$CI->m_queue->create('ip_scan', $details);\n\t\t\t$log->ip = $ip;\n\t\t\t$log->message = 'IP ' . $ip . ' responding, adding to device list.';\n\t\t\tdiscovery_log($log);\n\t\t}\n\t}\n}\n\n\nif ( ! function_exists('discover_subnet')) {\n\t/**\n\t * Run the discovery on the subnet\n\t * @param  object $queue_item The individual entry from the queue table\n\t * @return bool             [description]\n\t */\n\tfunction discover_subnet($queue_item = null)\n\t{\n\t\tif (empty($queue_item)) {\n\t\t\treturn false;\n\t\t}\n\t\t$start = microtime(true);\n\t\t$CI = get_instance();\n\n\t\t$discovery_id = $queue_item->discovery_id;\n\n\t\t$item = $CI->m_discoveries->read($discovery_id);\n\t\t$discovery = $item[0];\n\n\t\t$log = new stdClass();\n\t\t$log->discovery_id = $discovery_id;\n\t\t$log->command_status = 'start';\n\t\t$log->message = 'Starting discovery for ' . $discovery->attributes->name;\n\t\t$log->ip = '127.0.0.1';\n\t\t$log->severity = 6;\n\t\tdiscovery_log($log);\n\n\t\t$sql = '/* discoveries_helper::discover_subnet */ ' . \"UPDATE `discoveries` SET `status` = 'running', `ip_all_count` = 0, `ip_responding_count` = 0, `ip_scanned_count` = 0, `ip_discovered_count` = 0, `ip_audited_count` = 0, `last_run` = NOW() WHERE id = ?\";\n\t\t$data = array($discovery_id);\n\t\t$CI->db->query($sql, $data);\n\n\t\tif ( ! empty($CI->config->config['discovery_ip_exclude'])) {\n\t\t\t// Account for users adding multiple spaces which would be converted to multiple comma's.\n\t\t\t$exclude_ip = preg_replace('!\\s+!', ' ', $CI->config->config['discovery_ip_exclude']);\n\t\t\t// Convert spaces to comma's\n\t\t\t$exclude_ip = str_replace(' ', ',', $exclude_ip);\n\t\t\tif ( ! empty($discovery->attributes->other->nmap->exclude_ip)) {\n\t\t\t\t$discovery->attributes->other->nmap->exclude_ip .= ',' . $exclude_ip;\n\t\t\t} else {\n\t\t\t\t$discovery->attributes->other->nmap->exclude_ip = $exclude_ip;\n\t\t\t}\n\t\t}\n\n\t\t$all_ip_list = all_ip_list($discovery);\n\n\t\t$count = @count($all_ip_list);\n\t\t$log->command_status = 'notice';\n\t\t$log->message = 'Ping response not required, assuming all ' . $count . ' IP addresses are up.';\n\t\tif ($discovery->attributes->other->nmap->ping === 'y') {\n\t\t\t$log->message = 'Scanning ' . $count . ' IP addresses using Nmap to test for response.';\n\t\t}\n\t\tdiscovery_log($log);\n\n\t\t$responding_ip_list = responding_ip_list($discovery);\n\n\t\t$log->command_time_to_execute = microtime(true) - $start;\n\t\t$log->message = 'Nmap response scanning completed.';\n\t\tdiscovery_log($log);\n\n\t\tupdate_non_responding($discovery->id, $all_ip_list, $responding_ip_list);\n\t\tqueue_responding($discovery->id, $responding_ip_list);\n\n\t\t$ip_all_count = 0;\n\t\t$ip_responding_count = 0;\n\t\tif ( ! empty($all_ip_list) && is_array($all_ip_list)) {\n\t\t\t$ip_all_count = count($all_ip_list);\n\t\t}\n\t\tif ( ! empty($responding_ip_list) && is_array($responding_ip_list)) {\n\t\t\t$ip_responding_count = count($responding_ip_list);\n\t\t}\n\t\t$sql = '/* discoveries_helper::discover_subnet */ ' . 'UPDATE `discoveries` SET ip_all_count = ?, ip_responding_count = ? WHERE `id` = ?';\n\t\t$data = array($ip_all_count, $ip_responding_count, $discovery_id);\n\t\t$CI->db->query($sql, $data);\n\t\tif (empty($responding_ip_list)) {\n\t\t\t$log->message = 'No IPs are responding. You may wish to check your discovery configuration.';\n\t\t\t$log->command_time_to_execute = microtime(true) - $start;\n\t\t\tdiscovery_log($log);\n\t\t\t// NOTE - the log_helper will mark this in the database as complete for us, think Collector / Server\n\t\t\t$log->message = 'Discovery has finished.';\n\t\t\t$log->command = '';\n\t\t\t$log->command_output = '';\n\t\t\t$log->command_status = 'finished';\n\t\t\t$log->command_time_to_execute = microtime(true) - $start;\n\t\t\t$log->ip = '127.0.0.1';\n\t\t\tdiscovery_log($log);\n\t\t}\n\t\treturn true;\n\t}\n}\n\n\n\n\nif ( ! function_exists('ip_scan')) {\n\t/**\n\t * Scan an individual IP address according to our discovery settings\n\t * @param  object $details [description]\n\t * @return array|false   A device results or boolean false\n\t */\n\tfunction ip_scan($details = null)\n\t{\n\t\tif (empty($details)) {\n\t\t\treturn false;\n\t\t}\n\t\t$start = microtime(true);\n\t\t$CI = get_instance();\n\t\t$ip = $details->ip;\n\t\t$item = $CI->m_discoveries->read($details->discovery_id);\n\t\tif (empty($item)) {\n\t\t\treturn false;\n\t\t}\n\t\t$discovery = $item[0]->attributes;\n\t\tunset($item);\n\t\tunset($details);\n\n\t\t$log = new stdClass();\n\t\t$log->discovery_id = $discovery->id;\n\t\t$log->severity = 7;\n\t\t$log->file = 'discoveries_helper';\n\t\t$log->function = 'ip_scan';\n\t\t$log->command_status = 'notice';\n\t\t$log->message = 'IP scan start on device ' . $ip;\n\t\t$log->ip = $ip;\n\t\tdiscovery_log($log);\n\n\t\t$nmap = $discovery->other->nmap;\n\t\t$device = array();\n\t\t$sql = 'SELECT NOW() AS `timestamp`';\n\t\t$query = $CI->db->query($sql);\n\t\t$result = $query->result();\n\t\t$device['timestamp'] = $result[0]->timestamp;\n\n\t\t$timing = '-T4';\n\t\tif ( ! empty($nmap_timing)) {\n\t\t\t$timing = '-T' . intval($nmap_timing);\n\t\t}\n\n\t\t$ping = '';\n\t\tif (empty($nmap->ping) && $nmap->ping === 'n') {\n\t\t\t$ping = '-Pn';\n\t\t}\n\n\t\t$service_version = '';\n\t\tif ( ! empty($nmap->service_version)) {\n\t\t\t$service_version = '-sV';\n\t\t}\n\n\t\t$timeout = '';\n\t\tif ( ! empty($timeout)) {\n\t\t\t$timeout = '--host-timeout ' . intval($nmap->timeout);\n\t\t}\n\n\t\t$nmap_tcp_ports = '';\n\t\tif ( ! empty($nmap->nmap_tcp_ports)) {\n\t\t\t$nmap_tcp_ports = '--top-ports ' . $nmap->nmap_tcp_ports;\n\t\t}\n\n\t\t$nmap_udp_ports = '';\n\t\tif ( ! empty($nmap->nmap_udp_ports)) {\n\t\t\t$nmap_udp_ports = '--top-ports ' . $nmap->nmap_udp_ports;\n\t\t}\n\n\t\t$tcp_ports = '';\n\t\tif ( ! empty($nmap->tcp_ports)) {\n\t\t\t$nmap->tcp_ports = str_replace(' ', '', $nmap->tcp_ports);\n\t\t\t$tcp_ports = '-p ' . $nmap->tcp_ports;\n\t\t}\n\n\t\t$udp_ports = '';\n\t\tif ( ! empty($nmap->udp_ports)) {\n\t\t\t$nmap->udp_ports = str_replace(' ', '', $nmap->udp_ports);\n\t\t\t$udp_ports = '-p ' . $nmap->udp_ports;\n\t\t}\n\n\t\t$exclude_ip = '';\n\t\tif ( ! empty($nmap->exclude_ip)) {\n\t\t\t$nmap->exclude_ip = str_replace(' ', '', $nmap->exclude_ip);\n\t\t\t$exclude_ip = '--exclude ' . $nmap->exclude_ip;\n\t\t}\n\n\t\t$exclude_tcp_ports = '';\n\t\tif ( ! empty($nmap->exclude_tcp_ports)) {\n\t\t\t$nmap->exclude_tcp_ports = str_replace(' ', '', $nmap->exclude_tcp_ports);\n\t\t\t$exclude_tcp_ports = '--exclude-ports T:' . $nmap->exclude_tcp_ports;\n\t\t}\n\n\t\t$exclude_udp_ports = '';\n\t\tif ( ! empty($nmap->exclude_udp_ports)) {\n\t\t\t$nmap->exclude_udp_ports = str_replace(' ', '', $nmap->exclude_udp_ports);\n\t\t\t$exclude_udp_ports = '--exclude-ports U:' . $nmap->exclude_udp_ports;\n\t\t}\n\n\t\tif ( ! empty($discovery->other->nmap->nmap_tcp_ports)) {\n\t\t\t$item_start = microtime(true);\n\t\t\t$command = \"nmap -n {$timing} {$ping} -sS {$service_version} {$exclude_ip} {$exclude_tcp_ports} {$nmap_tcp_ports} {$timeout} {$ip}\";\n\t\t\tif (php_uname('s') === 'Darwin') {\n\t\t\t\t$command = '/usr/local/bin/' . $command;\n\t\t\t}\n\t\t\texec($command, $output, $return_var);\n\t\t\t$log->command_time_to_execute = (microtime(true) - $item_start);\n\t\t\t$log->message = 'Nmap Command (Top TCP Ports)';\n\t\t\t$log->command = \"{$command} # Top TCP Ports\";\n\t\t\tdiscovery_log($log);\n\t\t\techo $log->message . ' took ' . $log->command_time_to_execute . \"seconds.\\n\";\n\t\t\t$device = array_merge($device, check_nmap_output($discovery, $output, $ip, $command));\n\t\t\tunset($output);\n\t\t}\n\n\t\tif ( ! empty($discovery->other->nmap->nmap_udp_ports)) {\n\t\t\t$item_start = microtime(true);\n\t\t\t$command = \"nmap -n {$timing} {$ping} -sU {$service_version} {$exclude_ip} {$exclude_udp_ports} {$nmap_udp_ports} {$timeout} {$ip}\";\n\t\t\tif (php_uname('s') === 'Darwin') {\n\t\t\t\t$command = '/usr/local/bin/' . $command;\n\t\t\t}\n\t\t\texec($command, $output, $return_var);\n\t\t\t$log->command_time_to_execute = (microtime(true) - $item_start);\n\t\t\t$log->message = 'Nmap Command (Top UDP Ports)';\n\t\t\t$log->command = \"{$command} # Top UDP Ports\";\n\t\t\tdiscovery_log($log);\n\t\t\techo $log->message . ' took ' . $log->command_time_to_execute . \"seconds.\\n\";\n\t\t\t$ports = @$device['nmap_ports'];\n\t\t\t$device = array_merge($device, check_nmap_output($discovery, $output, $ip, $command));\n\t\t\tif ( ! empty($ports)) {\n\t\t\t\t$device['nmap_ports'] = $ports . ',' . $device['nmap_ports'];\n\t\t\t}\n\t\t\tunset($output);\n\t\t\tunset($ports);\n\t\t}\n\n\t\tif ( ! empty($discovery->other->nmap->tcp_ports)) {\n\t\t\t$item_start = microtime(true);\n\t\t\t$command = \"nmap -n {$timing} {$ping} -sS {$service_version} {$exclude_ip} {$exclude_tcp_ports} {$tcp_ports} {$timeout} {$ip}\";\n\t\t\tif (php_uname('s') === 'Darwin') {\n\t\t\t\t$command = '/usr/local/bin/' . $command;\n\t\t\t}\n\t\t\texec($command, $output, $return_var);\n\t\t\t$log->command_time_to_execute = (microtime(true) - $item_start);\n\t\t\t$log->message = 'Nmap Command (Custom TCP Ports)';\n\t\t\t$log->command = \"{$command} # Custom TCP Ports\";\n\t\t\tdiscovery_log($log);\n\t\t\techo $log->message . ' took ' . $log->command_time_to_execute . \"seconds.\\n\";\n\t\t\t$ports = @$device['nmap_ports'];\n\t\t\t$device = array_merge($device, check_nmap_output($discovery, $output, $ip, $command));\n\t\t\tif ( ! empty($ports)) {\n\t\t\t\t$device['nmap_ports'] = $ports . ',' . $device['nmap_ports'];\n\t\t\t}\n\t\t\tunset($output);\n\t\t\tunset($ports);\n\t\t}\n\n\t\tif ( ! empty($discovery->other->nmap->udp_ports)) {\n\t\t\t$item_start = microtime(true);\n\t\t\t$command = \"nmap -n {$timing} {$ping} -sU {$service_version} {$exclude_ip} {$exclude_udp_ports} {$udp_ports} {$timeout} {$ip}\";\n\t\t\tif (php_uname('s') === 'Darwin') {\n\t\t\t\t$command = '/usr/local/bin/' . $command;\n\t\t\t}\n\t\t\texec($command, $output, $return_var);\n\t\t\t$log->command_time_to_execute = (microtime(true) - $item_start);\n\t\t\t$log->message = 'Nmap Command (Custom UDP Ports)';\n\t\t\t$log->command = \"{$command} # Custom UDP Ports\";\n\t\t\tdiscovery_log($log);\n\t\t\techo $log->message . ' took ' . $log->command_time_to_execute . \"seconds.\\n\";\n\t\t\t$ports = @$device['nmap_ports'];\n\t\t\t$device = array_merge($device, check_nmap_output($discovery, $output, $ip, $command));\n\t\t\tif ( ! empty($ports)) {\n\t\t\t\t$device['nmap_ports'] = $ports . ',' . $device['nmap_ports'];\n\t\t\t}\n\t\t\tunset($output);\n\t\t\tunset($ports);\n\t\t}\n\n\t\t$log->message = 'IP scan finish on device ' . $ip;\n\t\t$log->command = '';\n\t\t$log->command_output = '';\n\t\t$log->command_time_to_execute = microtime(true) - $start;\n\t\tdiscovery_log($log);\n\t\t$sql = '/* discoveries_helper::ip_scan */ ' .  \"UPDATE discovery_log SET command_time_to_execute = ? WHERE message = 'IP \" . $log->ip . \" responding, adding to device list.' AND discovery_id = ?\";\n\t\t$data = array($log->command_time_to_execute, $discovery->id);\n\t\t$query = $CI->db->query($sql, $data);\n\t\treturn($device);\n\t}\n}\n\nif ( ! function_exists('check_nmap_output')) {\n\t/**\n\t * [check_nmap_output description]\n\t * @param  object $discovery [description]\n\t * @param  array  $output    [description]\n\t * @param  string $ip        [description]\n\t * @param  string $command   [description]\n\t * @return array|false            [description]\n\t */\n\tfunction check_nmap_output ($discovery, $output, $ip, $command)\n\t{\n\t\tif (empty($discovery) OR empty($output)) {\n\t\t\treturn false;\n\t\t}\n\t\t$device = array();\n\t\t$log = new stdClass();\n\t\t$log->discovery_id = $discovery->id;\n\t\t$log->ip = $ip;\n\t\t$log->severity = 7;\n\t\t$log->command = $command;\n\t\t$log->command_status = 'notice';\n\t\t$values = array('open', 'closed', 'filtered', 'unfiltered', 'open|filtered', 'closed|filtered');\n\t\t$device = array();\n\n\t\t// Some defaults, see https://nmap.org/book/man-port-scanning-basics.html\n\t\tif (empty($discovery->other->nmap->{'open'})) {\n\t\t\t$discovery->other->nmap->{'open'} = 'y';\n\t\t}\n\t\tif (empty($discovery->other->nmap->{'closed'})) {\n\t\t\t$discovery->other->nmap->{'closed'} = 'n';\n\t\t}\n\t\tif (empty($discovery->other->nmap->{'filtered'})) {\n\t\t\t$discovery->other->nmap->{'filtered'} = 'n';\n\t\t}\n\t\tif (empty($discovery->other->nmap->{'unfiltered'})) {\n\t\t\t$discovery->other->nmap->{'unfiltered'} = 'n';\n\t\t}\n\t\tif (empty($discovery->other->nmap->{'open|filtered'})) {\n\t\t\t$discovery->other->nmap->{'open|filtered'} = 'y';\n\t\t}\n\t\tif (empty($discovery->other->nmap->{'closed|filtered'})) {\n\t\t\t$discovery->other->nmap->{'closed|filtered'} = 'n';\n\t\t}\n\n\t\tforeach ($output as $line) {\n\t\t\t$keywords = preg_split('/[\\s,]+/', $line);\n\t\t\tforeach ($values as $status) {\n\t\t\t\tif ( ! empty($keywords[1])) {\n\t\t\t\t\tif ( ! empty($discovery->other->nmap->{$status}) && $discovery->other->nmap->{$status} === 'y') {\n\t\t\t\t\t\tif ($keywords[1] === $status) {\n\t\t\t\t\t\t\t$device['host_is_up'] = 'true';\n\t\t\t\t\t\t\t$device['status'] = $status;\n\t\t\t\t\t\t\tif ($status === 'open') {\n\t\t\t\t\t\t\t\tif (empty($device['nmap_ports'])) {\n\t\t\t\t\t\t\t\t\t$device['nmap_ports'] = $keywords[0] . '/' . str_replace('/', '+', $keywords[2]);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$device['nmap_ports'] .= ',' . $keywords[0] . '/' . $keywords[2];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$log->command_output = $line;\n\t\t\t\t\t\t\t$log->message = 'Host ' . $ip . ' is up, received ' . $keywords[0] . ' ' . $status . ' response';\n\t\t\t\t\t\t\tif ($keywords[0] === '22/tcp') {\n\t\t\t\t\t\t\t\t$device['ssh_status'] = 'true';\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\tif ($keywords[0] === '135/tcp') {\n\t\t\t\t\t\t\t\t$device['wmi_status'] = 'true';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ($keywords[0] === '161/udp') {\n\t\t\t\t\t\t\t\t$device['snmp_status'] = 'true';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$ssh_ports = explode(',', $discovery->other->nmap->ssh_ports);\n\t\t\t\t\t\t\tforeach ($ssh_ports as $ssh_port) {\n\t\t\t\t\t\t\t\tif ($keywords[0] === $ssh_port.'/tcp') {\n\t\t\t\t\t\t\t\t\t$device['ssh_status'] = 'true';\n\t\t\t\t\t\t\t\t\t$log->message = 'Host ' . $ip . ' is up, received custom ssh port ' . $keywords[0] . ' ' . $status . ') response';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (stripos($line, 'Host {$ip} is up, received arp-response') !== false) {\n\t\t\t\t$device['host_is_up'] = 'true';\n\t\t\t\t$log->message = \"Host {$ip} is up, received arp-response\";\n\t\t\t\t$log->command_output = $line;\n\t\t\t\tdiscovery_log($log);\n\t\t\t}\n\t\t\tif (stripos($line, 'MAC Address') !== false) {\n\t\t\t\t$keywords = preg_split('/[\\s,]+/', $line);\n\t\t\t\t$device['mac_address'] = strtolower($keywords[2]);\n\t\t\t\t$device['host_is_up'] = 'true';\n\t\t\t\t$log->message = \"Host {$ip} is up, received mac addess \" . $device['mac_address'];\n\t\t\t\t$log->command_output = $line;\n\t\t\t\tdiscovery_log($log);\n\t\t\t}\n\t\t\tif (stripos($line, 'Nmap done: 1 IP address (1 host up)') !== false) {\n\t\t\t\t$device['host_is_up'] = 'true';\n\t\t\t\t$log->message = \"Host {$ip} is up, received Nmap ping response\";\n\t\t\t\t$log->command_output = $line;\n\t\t\t\tdiscovery_log($log);\n\t\t\t}\n\t\t\tif (stripos($line, 'due to host timeout') !== false && $discovery->other->nmap->ping === 'y') {\n\t\t\t\t$device['host_is_up'] = 'true';\n\t\t\t\t$log->message = \"Host {$ip} timed out. Exceeded timeout seconds.\";\n\t\t\t\t$log->command_output = $line;\n\t\t\t\tdiscovery_log($log);\n\t\t\t}\n\t\t}\n\t\treturn $device;\n\t}\n}\n\n\n\n\nif ( ! function_exists('ip_audit')) {\n\t/**\n\t * [ip_audit description]\n\t * @param  object $ip_scan [description]\n\t * @return false          [description]\n\t */\n\tfunction ip_audit($ip_scan = null)\n\t{\n\t\tif (empty($ip_scan)) {\n\t\t\treturn false;\n\t\t}\n\t\t$start = microtime(true);\n\t\t$CI = get_instance();\n\t\t$item = $CI->m_discoveries->read($ip_scan->discovery_id);\n\t\t$discovery = @$item[0]->attributes;\n\t\tif (empty($discovery)) {\n\t\t\treturn false;\n\t\t}\n\t\tunset($item);\n\t\tif (is_string($ip_scan->details)) {\n\t\t\t$ip_scan->details = @json_decode($ip_scan->details);\n\t\t}\n\t\tif (empty($ip_scan->details)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (empty($ip_scan->details->snmp_status)) {\n\t\t\t$ip_scan->details->snmp_status = 'false';\n\t\t}\n\t\tif (empty($ip_scan->details->ssh_status)) {\n\t\t\t$ip_scan->details->ssh_status = 'false';\n\t\t}\n\t\tif (empty($ip_scan->details->wmi_status)) {\n\t\t\t$ip_scan->details->wmi_status = 'false';\n\t\t}\n\n\t\t$log = new stdClass();\n\t\t$log->command_status = 'notice';\n\t\t$log->discovery_id = $discovery->id;\n\t\t$log->file = 'discoveries_helper';\n\t\t$log->function = 'ip_audit';\n\t\t$log->ip = $ip_scan->ip;\n\t\t$log->message = 'IP Audit start on device ' . $ip_scan->ip;\n\t\t$log->pid = getmypid();\n\t\t$log->severity = 7;\n\t\tdiscovery_log($log);\n\n\t\tif (php_uname('s') !== 'Windows NT') {\n\t\t\t$filepath = $CI->config->config['base_path'] . '/other';\n\t\t} else {\n\t\t\t$filepath = $CI->config->config['base_path'] . '\\\\other';\n\t\t}\n\n\t\t$device = new stdClass();\n\t\t$device->audits_ip = \t$ip_scan->ip;\n\t\t$device->credentials = \tarray();\n\t\t$device->discovery_id = $discovery->id;\n\t\t$device->id = \t\t\t'';\n\t\t$device->ip = \t\t\t$ip_scan->ip;\n\n\t\t$sql = 'SELECT NOW() AS `timestamp`';\n\t\t$query = $CI->db->query($sql);\n\t\t$result = $query->result();\n\t\t$device->last_seen = $result[0]->timestamp;\n\t\t$device->last_seen_by = 'nmap';\n\t\t$device->mac_address = \t@$ip_scan->details->mac_address;\n\t\t$device->name = \t\t'';\n\t\t$device->os_family = \t'';\n\t\t$device->os_group = \t'';\n\t\t$device->sysDescr = \t'';\n\t\t$device->timestamp = \t$ip_scan->details->timestamp;\n\t\t$device->type = \t\t'';\n\t\t// If we have specifically assigned another org_id, set it\n\t\tif ( ! empty($discovery->devices_assigned_to_org)) {\n\t\t\t$device->org_id = $discovery->devices_assigned_to_org;\n\t\t}\n\t\t// If we have specifically assigned a location_id, set it\n\t\tif ( ! empty($discovery->devices_assigned_to_location)) {\n\t\t\t$device->location_id = $discovery->devices_assigned_to_location;\n\t\t}\n\n\t\tif ($CI->config->config['discovery_use_dns'] === 'y') {\n\t\t\t$device = dns_validate($device);\n\t\t}\n\n\t\t$parameters = new stdCLass();\n\t\t$parameters->details = $device;\n\t\t$parameters->discovery_id = $discovery->id;\n\t\t$parameters->match = @$discovery->other->match;\n\t\t$device->id = $CI->m_device->match($parameters);\n\n\t\tif ( ! empty($device->id) && ! empty($discovery->id)) {\n\t\t\t$sql = '/* discoveries_helper::ip_audit */ ' . 'SELECT name FROM system WHERE id = ' . intval($device->id);\n\t\t\t$query = $CI->db->query($sql);\n\t\t\t$result = $query->result();\n\t\t\t$name = $result[0]->name;\n\t\t\t$log->system_id = $device->id;\n\t\t\t$log->message = 'Device named ' . $name . ' found on initial IP Scan (Nmap) result.';\n\t\t\tdiscovery_log($log);\n\t\t\tunset($log->title, $log->message, $log->command, $log->command_time_to_execute, $log->command_error_message);\n\t\t\t// update the previous log entries with our new system_id\n\t\t\t$sql = '/* discoveries_helper::ip_audit */ ' . 'UPDATE discovery_log SET system_id = ' . intval($log->system_id) . ' WHERE discovery_id = ' . $discovery->id . \" and ip = '\" . $device->ip . \"'\";\n\t\t\t$log->message = 'Update the current log entries with our new device';\n\t\t\t$log->command = $sql;\n\t\t\t$command_log_id = discovery_log($log);\n\t\t\t$command_start = microtime(true);\n\t\t\t$query = $CI->db->query($sql);\n\t\t\t$command_end = microtime(true);\n\t\t\t$log->command = $CI->db->last_query();\n\t\t\t$log->command_time_to_execute = $command_end - $command_start;\n\t\t\t$log->id = $command_log_id;\n\t\t\tdiscovery_log($log);\n\t\t\tunset($log->title, $log->message, $log->command, $log->command_time_to_execute, $log->command_error_message);\n\t\t\tunset($log->id, $command_log_id);\n\t\t}\n\n\t\t$credentials = array();\n\t\t$credentials = $CI->m_discoveries->get_device_discovery_credentials(@intval($device->id), $discovery->id, $device->ip);\n\n\t\t// output to log file and DEBUG the status of the three main services\n\t\t$ip_scan->details->ssh_port = '22';\n\t\tif ( ! empty($discovery->other->nmap->ssh_ports) && intval($discovery->other->nmap->ssh_ports) !== 22) {\n\t\t\t$nmap_ports = explode(',', $discovery->other->nmap->ssh_ports);\n\t\t\tforeach (explode(',', $ip_scan->details->nmap_ports) as $port) {\n\t\t\t\t$temp = explode('/', $port);\n\t\t\t\t$port = intval($temp[0]);\n\t\t\t\tforeach ($nmap_ports as $nmap_port) {\n\t\t\t\t\tif ($port === intval($nmap_port)) {\n\t\t\t\t\t\t$ip_scan->details->ssh_port = $port;\n\t\t\t\t\t\t$ip_scan->details->ssh_status = 'true';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tunset($temp);\n\t\t\t}\n\t\t}\n\t\t$log->message = 'SSH Status is ' . $ip_scan->details->ssh_status . ' on ' . $device->ip;\n\t\tdiscovery_log($log);\n\t\t$log->message = 'SNMP Status is ' . $ip_scan->details->snmp_status . ' on ' . $device->ip;\n\t\tdiscovery_log($log);\n\t\t$log->message = 'WMI Status is ' . $ip_scan->details->wmi_status . ' on ' . $device->ip;\n\t\tdiscovery_log($log);\n\n\t\t$ip_discovered_count = 0;\n\t\t$ip_audited_count = 0;\n\n\t\t// SNMP audit\n\t\t$credentials_snmp = false;\n\n\t\t// No SNMP extension, do not run\n\t\tif ( ! extension_loaded('snmp') && $ip_scan->details->snmp_status === 'true') {\n\t\t\t$log->message = 'PHP extension not loaded, skipping SNMP data retrieval for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t}\n\n\t\t// Test for working SNMP credentials\n\t\tif (extension_loaded('snmp') && $ip_scan->details->snmp_status === 'true') {\n\t\t\t$log->message = 'Testing SNMP credentials for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$credentials_snmp = snmp_credentials($device->ip, $credentials, null, $discovery->id);\n\t\t\t// Add this credential sets ID to device->credentials\n\t\t\t// if collection == credentials, not an individual device acssociated credential\n\t\t\tif ( ! empty($credentials_snmp)) {\n\t\t\t\t$ip_discovered_count = 1;\n\t\t\t\tif ($credentials_snmp->foreign === 'credentials') {\n\t\t\t\t\t$device->credentials[] = intval($credentials_snmp->id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Run SNMP audit commands\n\t\tif ( ! empty($credentials_snmp)) {\n\t\t\tif ( ! empty($credentials_snmp->credentials->version)) {\n\t\t\t\t$device->snmp_version = 'snmpv' . intval($credentials_snmp->credentials->version);\n\t\t\t\tif (intval($credentials_snmp->credentials->version) === 2) {\n\t\t\t\t\t$device->snmp_version .= 'c';\n\t\t\t\t}\n\t\t\t}\n\t\t\t$temp_array = snmp_audit($device->ip, $credentials_snmp, null, $discovery->id);\n\t\t\tif ( ! empty($temp_array['details'])) {\n\t\t\t\tforeach ($temp_array['details'] as $key => $value) {\n\t\t\t\t\tif ( ! empty($value)) {\n\t\t\t\t\t\t$device->$key = $value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$device->last_seen_by = 'snmp';\n\t\t\t\t$device->audits_ip = '127.0.0.1';\n\t\t\t}\n\t\t\tif ( ! empty($temp_array['interfaces'])) {\n\t\t\t\t$network_interfaces = $temp_array['interfaces'];\n\t\t\t}\n\t\t\tif ( ! empty($temp_array['modules'])) {\n\t\t\t\t$modules = $temp_array['modules'];\n\t\t\t}\n\t\t\tif ( ! empty($temp_array['ip'])) {\n\t\t\t\t$ip = $temp_array['ip'];\n\t\t\t}\n\t\t\tif ( ! empty($temp_array['guests'])) {\n\t\t\t\t$guests = $temp_array['guests'];\n\t\t\t}\n\t\t\tif ( ! empty($temp_array['routes'])) {\n\t\t\t\t$routes = $temp_array['routes'];\n\t\t\t}\n\t\t}\n\n\t\tif ( ! empty($device->type) && $device->type !== 'computer' && $device->type !== 'unknown' && $device->type !== 'unclassified'\n\t\t\t&& ! empty($device->os_name) && stripos($device->os_name, 'dd-wrt') === false\n\t\t\t&& ! empty($device->manufacturer) && stripos($device->manufacturer, 'Ubiquiti') === false) {\n\t\t\t$log->message = 'Not a computer and not a DD-WRT or Ubiquiti device setting SSH status to false for ' . $device->ip;\n\t\t\t$log->severity = 5;\n\t\t\tdiscovery_log($log);\n\t\t\t$log->severity = 7;\n\t\t\t$ip_scan->details->ssh_status = 'false';\n\t\t}\n\n\t\t// SSH Audit\n\t\t$credentials_ssh = false;\n\n\t\t// Run SSH audit\n\t\tif ($ip_scan->details->ssh_status === 'true') {\n\t\t\t$log->message = 'Testing SSH credentials for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->ip = $device->ip;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$parameters->system_id = '';\n\t\t\tif ( ! empty($device->id)) {\n\t\t\t\t$parameters->system_id = $device->id;\n\t\t\t}\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$parameters->credentials = $credentials;\n\t\t\t$parameters->ssh_port = $ip_scan->details->ssh_port;\n\t\t\t$ssh_details = ssh_audit($parameters);\n\t\t\tif ( ! empty($ssh_details)) {\n\t\t\t\tif ( ! empty($ssh_details->credentials)) {\n\t\t\t\t\t$ip_discovered_count = 1;\n\t\t\t\t\t// Add this credential sets ID to device->credentials\n\t\t\t\t\t// if collection == credentials, not an individual device acssociated credential\n\t\t\t\t\t$credentials_ssh = $ssh_details->credentials;\n\t\t\t\t\tif ($credentials_ssh->foreign === 'credentials') {\n\t\t\t\t\t\t$device->credentials[] = intval($credentials_ssh->id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tunset($ssh_details->credentials);\n\t\t\t\t$device->last_seen_by = 'ssh';\n\t\t\t\t$device->audits_ip = '127.0.0.1';\n\t\t\t\tforeach ($ssh_details as $key => $value) {\n\t\t\t\t\tif ( ! empty($value)) {\n\t\t\t\t\t\t$device->$key = $value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// We do not want to attempt to audit using WMI anything that's not a Windows machine\n\t\tif ( ! empty($device->os_group) && $device->os_group !== 'Windows' && $ip_scan->details->wmi_status !== 'false') {\n\t\t\t$ip_scan->details->wmi_status = 'false';\n\t\t\t$log->message = 'Setting WMI to false because we have an os_group that is not Windows.';\n\t\t\t$log->command_output = $device->os_group;\n\t\t\tdiscovery_log($log);\n\t\t}\n\n\t\t// test for working WMI credentials\n\t\tif ($ip_scan->details->wmi_status === 'true') {\n\t\t\t$log->message = 'Testing Windows credentials for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$credentials_windows = windows_credentials($device->ip, $credentials, $log);\n\t\t} else {\n\t\t\t$credentials_windows = false;\n\t\t}\n\n\t\tif ( ! empty($credentials_windows)) {\n\t\t\t$ip_discovered_count = 1;\n\t\t\t// Add this credential sets ID to device->credentials\n\t\t\t// if collection == credentials, not an individual device acssociated credential\n\t\t\tif ($credentials_windows->foreign === 'credentials') {\n\t\t\t\t$device->credentials[] = intval($credentials_windows->id);\n\t\t\t}\n\t\t}\n\n\t\tif ($ip_scan->details->wmi_status === 'true' && $credentials_windows) {\n\t\t\t$windows_details = wmi_audit($device->ip, $credentials_windows, null, $discovery->id);\n\t\t\tif ( ! empty($windows_details)) {\n\t\t\t\t$device->last_seen_by = 'windows';\n\t\t\t\t$device->audits_ip = '127.0.0.1';\n\t\t\t\tforeach ($windows_details as $key => $value) {\n\t\t\t\t\tif ( ! empty($value)) {\n\t\t\t\t\t\t$device->$key = $value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Set our device->credentials to a JSON array of working interger credentials.id\n\t\t$device->credentials = json_encode($device->credentials);\n\n\t\t// Now run our rules to update the device if any match\n\t\t$parameters = new stdClass();\n\t\t$parameters->device = $device;\n\t\t$parameters->discovery_id = intval($discovery->id);\n\t\t$parameters->action = 'return';\n\t\t$device = $CI->m_rules->execute($parameters);\n\n\t\t// If we don't have a device.id, check with our updated device attributes (if any)\n\t\tif (empty($device->id)) {\n\t\t\t$parameters = new stdCLass();\n\t\t\t$parameters->details = $device;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$parameters->match = $discovery->other->match;\n\t\t\t$device->id = $CI->m_device->match($parameters);\n\t\t\tif ( ! empty($device->id)) {\n\t\t\t\t$log->system_id = $device->id;\n\t\t\t\t// update the previous log entries with our new system_id\n\t\t\t\t$sql = '/* discoveries_helper::ip_audit::2 */ ' . 'UPDATE discovery_log SET system_id = ' . intval($log->system_id) . ' WHERE discovery_id = ' . $discovery->id . \" and ip = '\" . $device->ip . \"'\";\n\t\t\t\t$log->message = 'Update the previous log entries with the system_id';\n\t\t\t\t$log->command_status = 'notice';\n\t\t\t\t$log->command = $sql;\n\t\t\t\t$command_start = microtime(true);\n\t\t\t\t$query = $CI->db->query($sql);\n\t\t\t\t$command_end = microtime(true);\n\t\t\t\t$log->command_time_to_execute = $command_end - $command_start;\n\t\t\t\tdiscovery_log($log);\n\t\t\t\tunset($log->message, $log->command, $log->command_time_to_execute, $log->command_error_message);\n\t\t\t}\n\t\t}\n\n\t\t// See if we have a Mac Address for the device's IP\n\t\tif ( ! empty($network_interfaces) && empty($device->mac_address)) {\n\t\t\tforeach ($network_interfaces as $interface) {\n\t\t\t\tif ($interface->ip === $device->ip) {\n\t\t\t\t\t$device->mac_address = $interface->mac;\n\t\t\t\t\t$device->subnet = $interface->subnet;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$log->command_status = 'notice';\n\t\tif ( ! empty($device->id)) {\n\t\t\t// UPDATE\n\t\t\t$log->system_id = $device->id;\n\t\t\t$log->message = 'Start of ' . strtoupper($device->last_seen_by) . ' update for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$command_start = microtime(true);\n\t\t\t$CI->m_device->update($device);\n\t\t\t$log->command_time_to_execute = microtime(true) - $command_start;\n\t\t\t$device->ip = ip_address_from_db($device->ip);\n\t\t\t$log->message = 'End of ' . strtoupper($device->last_seen_by) . ' update for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\tunset($log->command_time_to_execute, $log->command_error_message);\n\t\t} else {\n\t\t\t// INSERT\n\t\t\t$log->message = 'Start of ' . strtoupper($device->last_seen_by) . ' insert for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$command_start = microtime(true);\n\t\t\t$device->id = $CI->m_device->insert($device);\n\t\t\t$log->command_time_to_execute = microtime(true) - $command_start;\n\t\t\t$device->ip = ip_address_from_db($device->ip);\n\t\t\t$log->system_id = $device->id;\n\t\t\t$log->message = 'End of ' . strtoupper($device->last_seen_by) . ' insert for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t// update the previous log entries with our new system_id\n\t\t\t$sql = '/* discoveries_helper::ip_audit::3 */ ' . 'UPDATE discovery_log SET system_id = ' . intval($log->system_id) . ' WHERE discovery_id = ' . $discovery->id . \" and ip = '\" . $device->ip . \"'\";\n\t\t\t$command_start = microtime(true);\n\t\t\t$query = $CI->db->query($sql);\n\t\t\t$log->command_time_to_execute = microtime(true) - $command_start;\n\t\t\t$log->message = 'Update the previous log entries with our new system_id';\n\t\t\t$log->command = $CI->db->last_query();\n\t\t\tdiscovery_log($log);\n\t\t\tunset($log->command, $log->command_time_to_execute, $log->command_error_message);\n\t\t}\n\n\t\t// grab some timestamps\n\t\t$device->last_seen = $CI->m_devices_components->read($device->id, 'y', 'system', '', 'last_seen');\n\t\t$device->first_seen = $CI->m_devices_components->read($device->id, 'y', 'system', '', 'first_seen');\n\n\t\t// update any network interfaces retrieved by SNMP\n\t\tif (isset($network_interfaces) && is_array($network_interfaces) && count($network_interfaces) > 0) {\n\t\t\t$log->command_status = 'notice';\n\t\t\t$log->message = 'Processing found network interfaces for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->table = 'network';\n\t\t\t$parameters->details = $device;\n\t\t\t$parameters->input = $network_interfaces;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$CI->m_devices_components->process_component($parameters);\n\t\t}\n\n\t\t// update any ip addresses retrieved by SNMP\n\t\tif ( ! empty($ip) && is_array($ip->item) && count($ip->item) > 0) {\n\t\t\t$log->command_status = 'notice';\n\t\t\t$log->message = 'Processing found ip addresses for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->table = 'ip';\n\t\t\t$parameters->details = $device;\n\t\t\t$parameters->input = $ip->item;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$CI->m_devices_components->process_component($parameters);\n\t\t}\n\n\t\t// create or update the entry in the ip table from non-SNMP data\n\t\t// so our 'networks' endpoint and functions can find the device\n\t\tif (empty($ip->item)) {\n\t\t\t$log->command_status = 'notice';\n\t\t\t$log->message = 'Processing found ip addresses (non-snmp) for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$item = new stdClass();\n\t\t\t$item->system_id = $device->id;\n\t\t\t$item->ip = $device->ip;\n\t\t\t$item->version = 4;\n\t\t\t$item->mac = '';\n\t\t\tif ( ! empty($device->mac_address)) {\n\t\t\t\t$item->mac = (string)strtolower($device->mac_address);\n\t\t\t}\n\t\t\tif ( ! empty($discovery->other->subnet) && strpos($discovery->other->subnet, '/') !== false) {\n\t\t\t\t$network_details = network_details($discovery->other->subnet);\n\t\t\t\t$item->netmask = $network_details->netmask;\n\t\t\t\t$item->cidr = $network_details->network_slash;\n\t\t\t\t$item->network = $discovery->other->subnet;\n\t\t\t} else {\n\t\t\t\t$network_details = explode('.', $device->ip);\n\t\t\t\t$item->netmask = '255.255.255.0';\n\t\t\t\t$item->cidr = '24';\n\t\t\t\t$item->network = $network_details[0] . '.' .  $network_details[1] . '.' .  $network_details[2] . '.0/24';\n\t\t\t}\n\t\t\t// new special routine as we may already have IPs (from a real audit) but not this particular\n\t\t\t// discovery run, so we don't want to remove these esiting IPs. Special function for this.\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$parameters->device = $device;\n\t\t\t$parameters->ip = $item;\n\t\t\t$CI->m_devices_components->nmap_ip($parameters);\n\t\t\tunset($item);\n\t\t}\n\n\t\t// finish off with updating any network IPs that don't have a matching interface\n\t\t$CI->m_devices_components->update_missing_interfaces($device->id);\n\n\t\t// insert any modules from SNMP\n\t\tif (isset($modules) && is_array($modules) && count($modules) > 0) {\n\t\t\t$log->command_status = 'notice';\n\t\t\t$log->message = 'Processing found modules for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->table = 'module';\n\t\t\t$parameters->details = $device;\n\t\t\t$parameters->input = $modules;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$CI->m_devices_components->process_component($parameters);\n\t\t}\n\n\t\t// insert any found virtual machines from SNMP\n\t\tif (isset($guests) && is_array($guests) && count($guests) > 0) {\n\t\t\t$log->command_status = 'notice';\n\t\t\t$log->message = 'Processing found VMs for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->table = 'vm';\n\t\t\t$parameters->details = $device;\n\t\t\t$parameters->input = $guests;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$CI->m_devices_components->process_component($parameters);\n\t\t}\n\n\t\t// insert any found routes from SNMP\n\t\tif (isset($routes) && is_array($routes) && count($routes) > 0) {\n\t\t\t$log->command_status = 'notice';\n\t\t\t$log->message = 'Processing found routes for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->table = 'route';\n\t\t\t$parameters->details = $device;\n\t\t\t$parameters->input = $routes;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$CI->m_devices_components->process_component($parameters);\n\t\t}\n\n\t\t// process and store the Nmap data\n\t\t$nmap_result = array();\n\t\tforeach (explode(',', $ip_scan->details->nmap_ports) as $port) {\n\t\t\t$temp = explode('/', $port);\n\t\t\t$nmap_item = new stdClass();\n\t\t\t$nmap_item->ip = (string)$device->ip;\n\t\t\t$nmap_item->port = $temp[0];\n\t\t\t$nmap_item->protocol = $temp[1];\n\t\t\t$nmap_item->program = $temp[2];\n\t\t\tif ( ! empty($nmap_item->port)) {\n\t\t\t\t$nmap_result[] = $nmap_item;\n\t\t\t}\n\t\t\tunset($nmap_item);\n\t\t\tunset($temp);\n\t\t}\n\t\tif (count($nmap_result) > 0) {\n\t\t\t$log->command_status = 'notice';\n\t\t\t$log->message = 'Processing Nmap ports for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->table = 'nmap';\n\t\t\t$parameters->details = $device;\n\t\t\t$parameters->input = $nmap_result;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$CI->m_devices_components->process_component($parameters);\n\t\t}\n\n\t\t// Now run our rules to update the device if any match\n\t\t$parameters = new stdClass();\n\t\t$parameters->id = intval($device->id);\n\t\t$parameters->discovery_id = intval($discovery->id);\n\t\t$parameters->ip = $device->ip;\n\t\t$parameters->action = 'update';\n\t\t$CI->m_rules->execute($parameters);\n\n\t\tif (empty($credentials_windows) && empty($credentials_ssh) && empty($credentials_snmp)) {\n\t\t\tif ($ip_scan->details->snmp_status === 'true' OR $ip_scan->details->ssh_status === 'true' OR $ip_scan->details->wmi_status === 'true') {\n\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t$log->severity = 5;\n\t\t\t\t$log->message = 'No valid credentials for ' . $device->ip;\n\t\t\t\tdiscovery_log($log);\n\t\t\t} else {\n\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t$log->severity = 5;\n\t\t\t\t$log->message = 'No management protocols for ' . $device->ip;\n\t\t\t\tdiscovery_log($log);\n\t\t\t}\n\t\t}\n\n\t\t$log->severity = 7;\n\t\t$log->message = '';\n\t\t$log->command = '';\n\t\t$log->command_output = '';\n\t\t$log->command_time_to_execute = '';\n\t\t$log->command_status = 'notice';\n\n\t\t// insert a blank to indicate we're finished this part of the discovery\n\t\t// if required, the audit scripts will insert their own audit logs\n\t\t$CI->m_audit_log->update('debug', '', $device->id, $device->last_seen);\n\n\t\tif ( ! empty($device->type)) {\n\t\t\t$log->message = \"At IP {$device->ip}, discovery found a device of type '{$device->type}'.\";\n\t\t} else {\n\t\t\t$log->message = \"At IP {$device->ip}, discovery found an unknown device.\";\n\t\t}\n\t\tdiscovery_log($log);\n\n\t\t// NOTE - The log helper will increase the count in discoveries.ip_discovered_count for us because Collector / Server\n\t\t//      - It will match on the message string, so don't change without also changing log_helper\n\t\tif ( ! empty($ip_discovered_count)) {\n\t\t\t$log->message = 'Discovered device at ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t}\n\n\t\t$script_name = '';\n\t\tif ( ! empty($credentials_windows) OR ! empty($credentials_ssh)) {\n\t\t\t$temp = $CI->m_scripts->build(strtolower($device->os_group));\n\t\t\tif (empty($temp)) {\n\t\t\t\t$log->message = 'Could not retrieve audit script for ' . strtolower($device->os_group) . ', check system log for details.';\n\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t$log->severity = 4;\n\t\t\t\tdiscovery_log($log);\n\t\t\t\t$log->command_status = 'notice';\n\t\t\t\t$log->severity = 7;\n\t\t\t} else if (is_array($temp)) {\n\t\t\t\t$audit_script = $temp[0];\n\t\t\t\t$script_name = $temp[1];\n\t\t\t}\n\t\t}\n\n\t\t// Audit Windows using script\n\t\tif ($ip_scan->details->wmi_status === 'true' && ! empty($credentials_windows) && ! empty($audit_script)) {\n\t\t\t// We do not support auditing windows using the script over SSH at this time\n\t\t\t$ip_scan->details->ssh_status = 'false';\n\t\t\t$log->message = 'Starting windows script audit for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$destination = 'audit_windows.vbs';\n\t\t\t$output = false;\n\t\t\tif (php_uname('s') === 'Windows NT' && ! empty($CI->config->config['discovery_use_vintage_service']) && $CI->config->config['discovery_use_vintage_service'] === 'y') {\n\t\t\t\t// Windows Server (likely) running on the LocalSystem account.\n\t\t\t\t// We cannot copy the audit script to the target and then run it,\n\t\t\t\t// We _must_ run the script locally and use $device->ip as the script target\n\t\t\t\t// We will loose the ability to retrieve certain items like files, netstat, tasks, etc\n\t\t\t\t$log->message = 'Running discovery the old way using the code for Apache service account.';\n\t\t\t\tdiscovery_log($log);\n\t\t\t\tif (strpos($credentials_windows->credentials->password, '\"') !== false OR  strpos($credentials_windows->credentials->username, '\"') !== false) {\n\t\t\t\t\t// cscript cannot parse an arguement containing a \"\n\t\t\t\t\t$log->message = 'Incompatible credentials for audit script. Cannot use \" (double quotes) in a wscript command line attribute.';\n\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\t$log->severity = 4;\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t$log->command_status = 'notice';\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t} else {\n\t\t\t\t\t$username = $credentials_windows->credentials->username;\n\t\t\t\t\t$temp = explode('@', $username);\n\t\t\t\t\t$username = $temp[0];\n\t\t\t\t\tif (count($temp) > 1) {\n\t\t\t\t\t\t$domain = $temp[1] . '\\\\';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$domain = '';\n\t\t\t\t\t}\n\t\t\t\t\tunset($temp);\n\t\t\t\t\t$command_string = '%comspec% /c start /b cscript ' . $audit_script . ' strcomputer=' . $device->ip . ' submit_online=n create_file=w struser=' . $domain . $username . ' strpass=' . $credentials_windows->credentials->password . ' debugging=0 system_id=' . $device->id . ' last_seen_by=audit_wmi discovery_id=' . $discovery->id;\n\t\t\t\t\t$log->command = '%comspec% /c start /b cscript ' . $audit_script . ' strcomputer=' . $device->ip . ' submit_online=n create_file=w struser=' . $domain . $username . ' strpass=****** debugging=0 system_id=' . $device->id . ' last_seen_by=audit_wmi discovery_id=' . $discovery->id;\n\t\t\t\t\t$command_start = microtime(true);\n\t\t\t\t\texec($command_string, $output, $return_var);\n\t\t\t\t\t$command_end = microtime(true);\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t$log->command_time_to_execute = $command_end - $command_start;\n\t\t\t\t\t$log->message = 'Successful attempt to run audit_windows.vbs for ' . $device->ip;\n\t\t\t\t\t$log->command_status = 'success';\n\t\t\t\t\tif ($return_var !== '0') {\n\t\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\t\t$log->message = 'Failed attempt to run audit_windows.vbs for ' . $device->ip;\n\t\t\t\t\t\t$log->severity = 4;\n\t\t\t\t\t}\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\tif (empty($output)) {\n\t\t\t\t\t\t$log->severity = 3;\n\t\t\t\t\t\t$log->command_time_to_execute = '';\n\t\t\t\t\t\t$log->message = 'No script output from ' . $device->ip . '. Cannot retrieve audit result.';\n\t\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Unix or Windows default - Remotely run script on target device\n\t\t\t\t// Copy the audit script to admin$\n\t\t\t\t$copy = false;\n\t\t\t\t$copy = copy_to_windows($device->ip, $credentials_windows, '\\\\admin$', $audit_script, 'audit_windows.vbs', $log);\n\t\t\t\tif ($copy) {\n\t\t\t\t\t$command = 'cscript ' . $device->install_dir . '\\\\audit_windows.vbs submit_online=n create_file=w debugging=0 self_delete=y last_seen_by=audit_wmi system_id=' . $device->id . ' discovery_id=' . $discovery->id;\n\t\t\t\t\t$output = execute_windows($device->ip, $credentials_windows, $command, $log);\n\t\t\t\t\tif (empty($output)) {\n\t\t\t\t\t\t$log->severity = 3;\n\t\t\t\t\t\t$log->command_time_to_execute = '';\n\t\t\t\t\t\t$log->message = 'No script output from ' . $device->ip . '. Cannot retrieve audit result.';\n\t\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$log->severity = 3;\n\t\t\t\t\t$log->command_time_to_execute = '';\n\t\t\t\t\t$log->message = 'Could not copy audit script to ' . $device->ip;\n\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$audit_file = false;\n\t\t\tif ( ! empty($output)) {\n\t\t\t\tforeach ($output as $line) {\n\t\t\t\t\tif (strpos($line, 'File ') !== false) {\n\t\t\t\t\t\t$audit_file = trim(str_replace('File ', '', $line));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( ! empty($audit_file) && ! empty($output)) {        \t\t\n\t\t\t\t$copy = false;\n\t\t\t\t$temp = explode('\\\\', $audit_file);\n\t\t\t\t$destination = $filepath . '/scripts/' . end($temp);\n\t\t\t\tif (php_uname('s') === 'Windows NT') {\n\t\t\t\t\t$destination = $filepath . '\\\\scripts\\\\' . end($temp);\n\t\t\t\t}\n\t\t\t\tif (php_uname('s') === 'Windows NT' && exec('whoami') === 'nt authority\\system' && ! empty($CI->config->config['discovery_use_vintage_service']) && $CI->config->config['discovery_use_vintage_service'] === 'y') {\n\t\t\t\t\tif (rename($audit_file, $destination)) {\n\t\t\t\t\t\t$copy = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$copy = copy_from_windows($device->ip, $credentials_windows, end($temp), $destination, $log);\n\t\t\t\t}\n\t\t\t\tif ($copy === true) {\n\t\t\t\t\t$audit_result = file_get_contents($destination);\n\t\t\t\t\tunlink($destination);\n\t\t\t\t\tif (empty($audit_result)) {\n\t\t\t\t\t\t$log->severity = 3;\n\t\t\t\t\t\t$log->command_time_to_execute = '';\n\t\t\t\t\t\t$log->message = 'Could not open audit result on localhost for ' . $device->ip . '. Cannot process audit result.';\n\t\t\t\t\t\t$log->command_output = $destination;\n\t\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$ip_audited_count = 1;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$log->severity = 3;\n\t\t\t\t\t$log->command_time_to_execute = '';\n\t\t\t\t\t$log->message = 'Could not copy audit result file to localhost for ' . $device->ip . '. Cannot retrieve audit result.';\n\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t}\n\t\t\t\tif (php_uname('s') === 'Windows NT' && exec('whoami') === 'nt authority\\system' && ! empty($CI->config->config['discovery_use_vintage_service']) && $CI->config->config['discovery_use_vintage_service'] === 'y') {\n\t\t\t\t\t// no need to delete the remote file\n\t\t\t\t} else {\n\t\t\t\t\t// delete the remote audit result\n\t\t\t\t\t$parameters = new stdClass();\n\t\t\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t\t\t$parameters->ip = $device->ip;\n\t\t\t\t\t$parameters->share = 'admin$';\n\t\t\t\t\t$parameters->file = end($temp);\n\t\t\t\t\t$parameters->credentials = $credentials_windows;\n\t\t\t\t\tdelete_windows_result($parameters);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$log->severity = 3;\n\t\t\t\t$log->command_time_to_execute = '';\n\t\t\t\t$log->message = 'Could not find audit result path in script output from ' . $device->ip . '. Cannot retrieve audit result.';\n\t\t\t\t$log->command_status = 'fail';\n\t\t\t\tdiscovery_log($log);\n\t\t\t\t$log->severity = 7;\n\t\t\t}\n\t\t}\n\n\n\t\t$log->message = '';\n\t\t$log->command = '';\n\t\t$log->command_output = '';\n\t\t$log->command_status = 'notice';\n\t\t$log->severity = 7;\n\t\t$log->command_time_to_execute = '';\n\n\t\tif ($device->os_family === 'DD-WRT' OR $device->os_family === 'LEDE') {\n\t\t\t$log->message = \"IP {$device->ip} is running {$device->os_family}, which will not run our audit_linux.sh script, skipping.\";\n\t\t\tdiscovery_log($log);\n\t\t}\n\n\t\t// Audit via SSH\n\t\tif ($ip_scan->details->ssh_status === 'true' && $device->os_family !== 'DD-WRT' && $device->os_family !== 'LEDE' && ! empty($credentials_ssh) && ! empty($audit_script)) {\n\t\t\t$result = '';\n\t\t\t$log->message = 'Starting SSH audit script for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t// copy the audit script to the target ip\n\t\t\t$destination = $CI->config->config['discovery_linux_script_directory'];\n\t\t\tif (substr($destination, -1) !== '/') {\n\t\t\t\t$destination .= '/';\n\t\t\t}\n\t\t\t$destination .= $script_name;\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->ip = $device->ip;\n\t\t\t$parameters->credentials = $credentials_ssh;\n\t\t\t$parameters->source = $audit_script;\n\t\t\t$parameters->destination = $destination;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$parameters->ssh_port = $ip_scan->details->ssh_port;\n\t\t\t$temp = scp($parameters);\n\t\t\tif ( ! $temp) {\n\t\t\t\t$audit_script = '';\n\t\t\t\t$log->severity = 3;\n\t\t\t\t$log->message = 'Could not SCP audit script to ' . $device->ip . ' at ' . $destination;\n\t\t\t\t$log->command_status = 'fail';\n\t\t\t\tdiscovery_log($log);\n\t\t\t\t$log->severity = 7;\n\t\t\t\t$log->message = '';\n\t\t\t\t$log->command_status = 'notice';\n\t\t\t} else {\n\t\t\t\t// Successfully copied the audit script, now chmod it\n\t\t\t\t$command = 'chmod ' . $CI->config->config['discovery_linux_script_permissions'] . ' ' . $destination;\n\t\t\t\t// No use testing for a result as a chmod produces no output\n\t\t\t\t$parameters = new stdClass();\n\t\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t\t$parameters->ip = $device->ip;\n\t\t\t\t$parameters->credentials = $credentials_ssh;\n\t\t\t\t$parameters->command = $command;\n\t\t\t\t$parameters->ssh_port = $ip_scan->details->ssh_port;\n\t\t\t\t$test = ssh_command($parameters);\n\t\t\t\tif ($test === false) {\n\t\t\t\t\t$log->severity = 3;\n\t\t\t\t\t$log->message = 'Could not chmod script on ' . $device->ip;\n\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t$log->message = '';\n\t\t\t\t\t$log->command_status = 'notice';\n\t\t\t\t\t$audit_script = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\tunset($destination);\n\t\t\tif ($audit_script !== '') {\n\t\t\t\t$command = $CI->config->config['discovery_linux_script_directory'].$script_name.' submit_online=n create_file=y debugging=1 self_delete=y system_id='.$device->id.' last_seen_by=audit_ssh discovery_id='.$discovery->id;\n\t\t\t\t$log->message = 'Running audit using ' . $credentials_ssh->credentials->username . '.';\n\t\t\t\t$log->command_output = '';\n\t\t\t\t$log->command_status = 'notice';\n\t\t\t\tif ($credentials_ssh->credentials->username === 'root') {\n\t\t\t\t\t$log->message = 'Running audit using root user.';\n\t\t\t\t} else if ( ! empty($device->which_sudo) && $device->use_sudo) {\n\t\t\t\t\t$command = \"{$device->which_sudo} \" . $command;\n\t\t\t\t\t$log->message = 'Running audit using ' .  $credentials_ssh->credentials->username . ' with sudo, as per config.';\n\t\t\t\t} else if ( ! empty($device->which_sudo) && ! $device->use_sudo) {\n\t\t\t\t\t$log->message = 'Running audit using ' .  $credentials_ssh->credentials->username . ' without sudo, as sudo attempt failed.';\n\t\t\t\t} else if (empty($device->which_sudo)) {\n\t\t\t\t\t$log->message = 'Running audit using ' . $credentials_ssh->credentials->username . ' as sudo not present.';\n\t\t\t\t}\n\t\t\t\t$log->command = $command;\n\t\t\t\tdiscovery_log($log);\n\t\t\t\t$parameters = new stdClass();\n\t\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t\t$parameters->ip = $device->ip;\n\t\t\t\t$parameters->credentials = $credentials_ssh;\n\t\t\t\t$parameters->command = $command;\n\t\t\t\t$parameters->ssh_port = $ip_scan->details->ssh_port;\n\t\t\t\t$result = ssh_command($parameters);\n\t\t\t} else {\n\n\t\t\t\t// $log->severity = 3;\n\t\t\t\t// $log->message = 'No audit script for ' . $device->ip;\n\t\t\t\t// $log->command_status = 'fail';\n\t\t\t\t// discovery_log($log);\n\t\t\t\t// $log->severity = 7;\n\t\t\t\t// $log->message = '';\n\t\t\t\t// $log->command_status = 'notice';\n\n\t\t\t}\n\t\t\t$audit_result = '';\n\t\t\tif ($audit_script !== '' && ! empty($result) && gettype($result) === 'array') {\n\t\t\t\t$audit_file = '';\n\t\t\t\tforeach ($result as $line) {\n\t\t\t\t\tif (strpos($line, 'File  ') !== false) {\n\t\t\t\t\t\t$audit_file = $line;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ($audit_file === '') {\n\t\t\t\t\t$log->severity = 5;\n\t\t\t\t\t$log->message = 'No audit file returned in output.';\n\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t$log->message = '';\n\t\t\t\t\t$log->command_status = 'notice';\n\t\t\t\t} else {\n\t\t\t\t\t$audit_file = trim(str_replace('File  ', '', $audit_file));\n\t\t\t\t\tif (strpos($audit_file, '//') === 0) {\n\t\t\t\t\t\t$audit_file = str_replace('//', '/', $audit_file);\n\t\t\t\t\t}\n\t\t\t\t\t$temp = explode('/', $audit_file);\n\t\t\t\t\t$destination = $filepath . '/scripts/' . end($temp);\n\t\t\t\t\tif (php_uname('s') === 'Windows NT') {\n\t\t\t\t\t\t$destination = $filepath . '\\\\scripts\\\\' . end($temp);\n\t\t\t\t\t}\n\t\t\t\t\t$parameters = new stdClass();\n\t\t\t\t\t$parameters->ip = $device->ip;\n\t\t\t\t\t$parameters->credentials = $credentials_ssh;\n\t\t\t\t\t$parameters->source = $audit_file;\n\t\t\t\t\t$parameters->destination = $destination;\n\t\t\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t\t\t$parameters->ssh_port = $ip_scan->details->ssh_port;\n\t\t\t\t\t// Allow 20 seconds to copy the file\n\t\t\t\t\t$CI->config->config['discovery_ssh_timeout'] = 20;\n\t\t\t\t\t$temp = scp_get($parameters);\n\t\t\t\t\tif ($temp) {\n\t\t\t\t\t\t$audit_result = file_get_contents($destination);\n\t\t\t\t\t\tif (empty($audit_result)) {\n\t\t\t\t\t\t\t$log->severity = 5;\n\t\t\t\t\t\t\t$log->message = 'Could not read audit result file.';\n\t\t\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\t\t\t$log->command = \"file_get_contents('{$destination}')\";\n\t\t\t\t\t\t\t$log->command_output = '';\n\t\t\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t\t\t$log->message = '';\n\t\t\t\t\t\t\t$log->command_status = 'notice';\n\t\t\t\t\t\t\t$log->command = '';\n\t\t\t\t\t\t\t$log->command_output = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$log->severity = 5;\n\t\t\t\t\t\t$log->message = 'Could not SCP GET to ' . $destination;\n\t\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t\t$log->message = '';\n\t\t\t\t\t\t$log->command_status = 'notice';\n\t\t\t\t\t}\n\t\t\t\t\t// Delete the remote file\n\t\t\t\t\t$command = 'rm ' . $audit_file;\n\t\t\t\t\t$temp = 0;\n\t\t\t\t\tif ( ! empty($device->which_sudo) && ! empty($device->use_sudo) && $credentials_ssh->credentials->username !== 'root') {\n\t\t\t\t\t\t// add sudo, we need this if we have run the audit using sudo\n\t\t\t\t\t\t$command = \"{$device->which_sudo} \" . $command;\n\t\t\t\t\t\t// Allow 10 seconds to run the command\n\t\t\t\t\t\t$temp = intval($CI->config->config['discovery_ssh_timeout']);\n\t\t\t\t\t\t$CI->config->config['discovery_ssh_timeout'] = 5;\n\t\t\t\t\t}\n\t\t\t\t\t$parameters = new stdClass();\n\t\t\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t\t\t$parameters->ip = $device->ip;\n\t\t\t\t\t$parameters->credentials = $credentials_ssh;\n\t\t\t\t\t$parameters->command = $command;\n\t\t\t\t\t$parameters->ssh_port = $ip_scan->details->ssh_port;\n\t\t\t\t\tssh_command($parameters);\n\t\t\t\t\tif ($temp > 0) {\n\t\t\t\t\t\t$CI->config->config['discovery_ssh_timeout'] = $temp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Delete the local audit script if it's not a default script\n\t\tif ( ! empty($audit_script) && strpos($audit_script, 'scripts') !== false) {\n\t\t\t$log->severity = 7;\n\t\t\t$log->message = 'Attempt to delete temp audit script succeeded';\n\t\t\t$log->command_status = 'notice';\n\t\t\t$log->command = \"unlink('\" . $audit_script .\"')\";\n\t\t\ttry {\n\t\t\t\tunlink($audit_script);\n\t\t\t} catch (Exception $error) {\n\t\t\t\t$log->severity = 4;\n\t\t\t\t$log->message = 'Could not delete temp audit script';\n\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t$log->command_output = json_encode($error);\n\t\t\t}\n\t\t\tdiscovery_log($log);\n\t\t\t$log->severity = 7;\n\t\t\t$log->message = '';\n\t\t\t$log->command_status = 'notice';\n\t\t\t$log->command = '';\n\t\t}\n\n\t\t$audit = false;\n\t\tif ( ! empty($audit_result)) {\n\t\t\t$log->message = 'Converting audit result';\n\t\t\tdiscovery_log($log);\n\t\t\t$audit_result = str_replace('data=<?xml version=\"1.0\" encoding=\"UTF-8\"?>', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>', $audit_result);\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->input = $audit_result;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$parameters->ip = $device->ip;\n\t\t\t$audit = audit_convert($parameters);\n\t\t\tif ( ! $audit) {\n\t\t\t\t$log->severity = 4;\n\t\t\t\t$log->message = 'Could not convert audit result from XML.';\n\t\t\t\t$log->command_status = 'fail';\n\t\t\t\tdiscovery_log($log);\n\t\t\t\t$log->severity = 7;\n\t\t\t\t$log->message = '';\n\t\t\t\t$log->command_status = 'notice';\n\t\t\t} else {\n\t\t\t\t$ip_audited_count = 1;\n\t\t\t}\n\t\t}\n\n\t\t// Delete the local audit result file\n\t\tif ( ! empty($audit_result)) {\n\t\t\tif ($audit) {\n\t\t\t\tif ( ! empty($destination)) {\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t$log->message = 'Delete audit result from filesystem.';\n\t\t\t\t\t$log->command_status = 'success';\n\t\t\t\t\t$log->command = \"unlink('\" . $destination . \"')\";\n\t\t\t\t\t$log->command_output = '';\n\t\t\t\t\ttry {\n\t\t\t\t\t\tunlink($destination);\n\t\t\t\t\t} catch (Exception $error) {\n\t\t\t\t\t\t$log->severity = 4;\n\t\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\t\t$log->command_output = json_encode($error);\n\t\t\t\t\t}\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$log->severity = 5;\n\t\t\t\t$log->message = \"Audit result left on filesystem at {$destination}, please check.\";\n\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t$log->command = '';\n\t\t\t\t$log->command_output = '';\n\t\t\t\tdiscovery_log($log);\n\t\t\t}\n\t\t}\n\t\t$log->severity = 7;\n\t\t$log->message = '';\n\t\t$log->command_status = 'notice';\n\t\t$log->command = '';\n\t\t$log->command_output = '';\n\n\t\tif ($audit) {\n\t\t\t$log->message = 'Formatting system section of audit result';\n\t\t\tdiscovery_log($log);\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$parameters->input = $audit->system;\n\t\t\t$parameters->ip = $device->ip;\n\t\t\t$audit->system = audit_format_system($parameters);\n\t\t\t// We don't care what the audit result says is the \"ip\", we KNOW it's the IP we just used to discover this device\n\t\t\t$audit->system->ip = $device->ip;\n\t\t}\n\n\t\tif ($audit) {\n\t\t\t// Run our rules to update the device attributes\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->discovery_id = intval($discovery->id);\n\t\t\t$parameters->ip = $device->ip;\n\t\t\t$parameters->action = 'return';\n\t\t\t$parameters->device = $audit->system;\n\t\t\t$CI->m_rules->execute($parameters);\n\t\t} else {\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->id = intval($device->id);\n\t\t\t$parameters->discovery_id = intval($discovery->id);\n\t\t\t$parameters->ip = $device->ip;\n\t\t\t$parameters->action = 'update';\n\t\t\t$CI->m_rules->execute($parameters);\n\t\t}\n\n\t\tif ($audit) {\n\t\t\t$log->message = 'Matching device from audit result';\n\t\t\tdiscovery_log($log);\n\t\t\t$parameters = new stdCLass();\n\t\t\t$parameters->details = $audit->system;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$parameters->match = $discovery->other->match;\n\t\t\t$audit_device = $CI->m_device->match($parameters);\n\t\t\t$audit->system->discovery_id = $discovery->id;\n\t\t\tif ( ! empty($audit->system->id)) {\n\t\t\t\t$log->system_id = $audit->system->id;\n\t\t\t}\n\t\t\tif (empty($audit_device) && ! empty($audit->system->id)) {\n\t\t\t\t$audit_device = intval($audit->system->id);\n\t\t\t}\n\t\t\tif ( ! empty($audit_device) && ! empty($audit->system->id) && $audit_device !== $audit->system->id) {\n\t\t\t\t// We delete this original system as likely with limited data (from\n\t\t\t\t// nmap and/or snmp and/or SSH) we couldn't match an existing system\n\t\t\t\t// Now we have an actual audit result with plenty of data\n\t\t\t\t// we have found a match and it's not the original\n\t\t\t\t$sql = '/* discoveries_helper::ip_audit */ DELETE FROM system WHERE id = ?';\n\t\t\t\t$query = $CI->db->query($sql, array($audit->system->id));\n\t\t\t\t$log->system_id = $audit_device;\n\t\t\t\t$log->message = 'System Id provided differs from System Id found for ' . $audit->system->hostname;\n\t\t\t\tdiscovery_log($log);\n\t\t\t}\n\t\t\t$audit->system->id = $audit_device;\n\t\t\tif (empty($audit_device)) {\n\t\t\t\t// insert a new system\n\t\t\t\t# Set the device org_id based on this discovery\n\t\t\t\tif ( ! empty($discovery->devices_assigned_to_org)) {\n\t\t\t\t\t$audit->system->org_id = $discovery->devices_assigned_to_org;\n\t\t\t\t}\n\t\t\t\tif ( ! empty($discovery->devices_assigned_to_location)) {\n\t\t\t\t\t$audit->system->org_id = $discovery->devices_assigned_to_location;\n\t\t\t\t}\n\t\t\t\t$audit->system->id = $CI->m_device->insert($audit->system);\n\t\t\t\t$log->message = 'CREATE entry for ' . @$audit->system->name . ' (' . @$audit->system->ip . '), System ID ' . $audit->system->id;\n\t\t\t\tdiscovery_log($log);\n\t\t\t\t$audit->system->original_last_seen = '';\n\t\t\t\t$log->system_id = $audit->system->id;\n\t\t\t} else {\n\t\t\t\t// update an existing system\n\t\t\t\t$log->message = 'UPDATE entry for ' . @$audit->system->name . ' (' . @$audit->system->ip . '), System ID ' . $audit->system->id;\n\t\t\t\tdiscovery_log($log);\n\t\t\t\t$CI->m_device->update($audit->system);\n\t\t\t\t$log->system_id = $audit->system->id;\n\t\t\t}\n\t\t}\n\n\t\t$sql = '/* discoveries_helper::ip_audit */ ' . 'UPDATE `discovery_log` SET system_id = ? WHERE discovery_id = ? and ip = ?';\n\t\t$data = array($log->system_id, $discovery->id, $device->ip);\n\t\t$query = $CI->db->query($sql, $data);\n\n\t\tif ($audit) {\n\t\t\t$script_version = '';\n\t\t\tif ( ! empty($audit->system->script_version)) {\n\t\t\t\t$script_version = $audit->system->script_version;\n\t\t\t}\n\t\t\t$CI->m_audit_log->create($audit->system->id, '', $audit->system->last_seen_by, $audit->system->audits_ip, '', '', $audit->system->last_seen, $script_version);\n\t\t}\n\n\t\tif ($audit) {\n\t\t\tforeach ($audit as $key => $value) {\n\t\t\t\tif ($key !== 'system' && $key !== 'audit_wmi_fail' && $key !== 'dns') {\n\t\t\t\t\t$parameters = new stdClass();\n\t\t\t\t\t$parameters->table = $key;\n\t\t\t\t\t$parameters->details = $audit->system;\n\t\t\t\t\t$parameters->input = $value;\n\t\t\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t\t\t$CI->m_devices_components->process_component($parameters);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($audit) {\n\t\t\tif ( ! empty($audit->audit_wmi_fail)) {\n\t\t\t\t$CI->m_audit_log->update('debug', 'audit_wmi_fail', $audit->system->id, $audit->system->last_seen);\n\t\t\t\t$CI->m_audit_log->update('wmi_fails', $audit->audit_wmi_fail, $audit->system->id, $audit->system->last_seen);\n\t\t\t}\n\t\t}\n\n\t\t// Generate any DNS entries required - only if a collector or the audit is NOT from a collector\n\t\tif ( ! empty($CI->config->config['servers']) OR empty($audit->system->collector_uuid)) {\n\t\t\tif ( ! empty($audit->system->id)) {\n\t\t\t\t$dns_entries = $CI->m_devices_components->create_dns_entries((int)$audit->system->id);\n\t\t\t} else if ( ! empty($device->id)) {\n\t\t\t\t$dns_entries = $CI->m_devices_components->create_dns_entries((int)$device->id);\n\t\t\t}\n\t\t\tif ( ! empty($audit->dns) && count($audit->dns) > 0) {\n\t\t\t\tforeach ($audit->dns as $item) {\n\t\t\t\t\tif ( ! empty($item->ip) && ! empty($item->name) && ! empty($item->fqdn)) {\n\t\t\t\t\t\t$dns_entries[] = $item;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tunset($item);\n\t\t\tif ( ! empty($dns_entries) && count($dns_entries) > 0) {\n\t\t\t\t$parameters = new stdClass();\n\t\t\t\t$parameters->table = 'dns';\n\t\t\t\t$parameters->input = $dns_entries;\n\t\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t\tif ( ! empty($audit->system->id)) {\n\t\t\t\t\t$parameters->details = $audit->system;\n\t\t\t\t\t$CI->m_devices_components->process_component($parameters);\n\t\t\t\t} else if ( ! empty($device->id)) {\n\t\t\t\t\t$parameters->details = $device;\n\t\t\t\t\t$CI->m_devices_components->process_component($parameters);\n\t\t\t\t}\n\t\t\t}\n\t\t\tunset($dns_entries);\n\t\t}\n\n\t\t// If we are configured as a collector, forward the information to the server\n\t\tif ($CI->config->config['servers'] !== '') {\n\t\t\t$server = json_decode($CI->config->config['servers']);\n\t\t\t$log->message = 'Sending result to ' . $server->host . ' because this server is a collector.';\n\t\t\tdiscovery_log($log);\n\n\t\t\t$device_json = '';\n\t\t\tif ( ! empty($device->id)) {\n\t\t\t\t$device_json = new stdClass();\n\t\t\t\t$device_json->system = new stdClass();\n\t\t\t\tforeach ($device as $key => $value) {\n\t\t\t\t\tif ($key !== 'id' && ! empty($value)) {\n\t\t\t\t\t\t$device_json->system->{$key} = $value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$device_json->system->collector_uuid = $CI->config->config['uuid'];\n\t\t\t\tif (count($nmap_result) > 0) {\n\t\t\t\t\t$device_json->nmap = new stdClass();\n\t\t\t\t\t$device_json->nmap = array();\n\t\t\t\t\tforeach ($nmap_result as $item) {\n\t\t\t\t\t\t$device_json->nmap[] = $item;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($guests) && count($guests) > 0) {\n\t\t\t\t\t$device_json->vm = new stdClass();\n\t\t\t\t\t$device_json->vm = array();\n\t\t\t\t\tforeach ($guests as $item) {\n\t\t\t\t\t\t$device_json->vm[] = $item;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($modules) && count($modules) > 0) {\n\t\t\t\t\t$device_json->module = new stdClass();\n\t\t\t\t\t$device_json->module = array();\n\t\t\t\t\tforeach ($modules as $item) {\n\t\t\t\t\t\t$device_json->module[] = $item;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($ip) && count($ip) > 0) {\n\t\t\t\t\t$device_json->ip = new stdClass();\n\t\t\t\t\t$device_json->ip = array();\n\t\t\t\t\tforeach ($ip->item as $item) {\n\t\t\t\t\t\t$device_json->ip[] = $item;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($network_interfaces) && is_array($network_interfaces) && count($network_interfaces) > 0) {\n\t\t\t\t\t$device_json->network = new stdClass();\n\t\t\t\t\t$device_json->network = array();\n\t\t\t\t\tforeach ($network_interfaces as $item) {\n\t\t\t\t\t\t$device_json->network[] = $item;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tunset($device_json->system->id);\n\t\t\t\tunset($device_json->system->first_seen);\n\t\t\t\t$device_json = json_encode($device_json);\n\t\t\t}\n\n\t\t\tif ( ! empty($audit->system->id)) {\n\t\t\t\tunset($audit->system->id);\n\t\t\t\tunset($audit->system->original_last_seen_by);\n\t\t\t\tunset($audit->system->original_last_seen);\n\t\t\t\tunset($audit->system->first_seen);\n\t\t\t\t$audit->system->collector_uuid = $CI->config->config['uuid'];\n\t\t\t\t$device_json = json_encode($audit);\n\t\t\t}\n\n\t\t\t$url = $server->host . $server->community . '/index.php/input/devices';\n\t\t\t$data = array('data' => $device_json);\n\t\t\t// We must use the key 'http' even if we send the request to https://...\n\t\t\t$options = array(\n\t\t\t\t'http' => array(\n\t\t\t\t\t'header'  => \"Content-type: application/x-www-form-urlencoded\\r\\n\",\n\t\t\t\t\t'method'  => 'POST',\n\t\t\t\t\t'content' => http_build_query($data)\n\t\t\t\t)\n\t\t\t);\n\t\t\t$context  = stream_context_create($options);\n\t\t\t$result = file_get_contents($url, false, $context);\n\t\t\tif ($result === false) {\n\t\t\t\t// error\n\t\t\t\t$log->severity = 4;\n\t\t\t\t$log->message = 'Could not send result to ' . $server->host . $server->community . '/index.php/input/devices - please check with your server administrator.';\n\t\t\t\tdiscovery_log($log);\n\t\t\t\t$log->severity = 7;\n\t\t\t} else {\n\t\t\t\t// success\n\t\t\t\t$log->severity = 7;\n\t\t\t\t$log->message = 'Result sent to ' . $server->host . '.';\n\t\t\t\tdiscovery_log($log);\n\t\t\t}\n\t\t}\n\n\t\t// NOTE - The log helper will increase the count in discoveries.ip_discovered_count for us because Collector / Server\n\t\t//      - It will match on the message string, so don't change without also changing log_helper\n\t\tif ( ! empty($ip_audited_count)) {\n\t\t\t$log->message = 'Audited device at ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t}\n\n\t\t$CI->m_device->set_identification($device->id);\n\n\t\t$log->command = 'Peak Memory';\n\t\t$log->command_output = round((memory_get_peak_usage(false)/1024/1024), 3) . ' MiB';\n\t\t$log->command_status = 'device complete';\n\t\t$log->command_time_to_execute = microtime(true)  - $start;\n\t\t$log->message = 'IP Audit finish on device ' . ip_address_from_db($device->ip);\n\t\t$log->ip = ip_address_from_db($device->ip);\n\t\tdiscovery_log($log);\n\n\t\t// Check if this discovery is complete and set status if so\n\t\t$sql = '/* discoveries_helper::ip_audit */ ' . 'SELECT COUNT(*) AS `count` FROM `discovery_log` WHERE `discovery_id` = ' . intval($discovery->id) . \" AND `command_status` = 'device complete'\";\n\t\t$query = $CI->db->query($sql);\n\t\t$result = $query->result();\n\t\tif ( ! empty($result[0]->count)) {\n\t\t\t$count = intval($result[0]->count);\n\t\t\t$sql = '/* discoveries_helper::ip_audit */ ' . 'SELECT `ip_responding_count` AS `count` FROM `discoveries` WHERE `id` = ' . intval($discovery->id);\n\t\t\t$query = $CI->db->query($sql);\n\t\t\t$result = $query->result();\n\t\t\t$device_count = intval($result[0]->count);\n\t\t\tif ($count === $device_count) {\n\t\t\t\t// NOTE - the log_helper will mark this in the database as complete for us, think Collector / Server\n\t\t\t\t$log->message = 'Discovery has finished.';\n\t\t\t\t$log->command = '';\n\t\t\t\t$log->command_output = '';\n\t\t\t\t$log->command_status = 'finished';\n\t\t\t\t$log->ip = '127.0.0.1';\n\t\t\t\tunset($log->system_id);\n\t\t\t\tdiscovery_log($log);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\nif ( ! function_exists('discover_ad')) {\n\t/**\n\t * [discover_ad description]\n\t * @param  object $queue_item [description]\n\t * @return bool             [description]\n\t */\n\tfunction discover_ad($queue_item = null)\n\t{\n\t\tif (empty($queue_item)) {\n\t\t\treturn false;\n\t\t}\n\t\t$start = microtime(true);\n\t\t$CI = get_instance();\n\t\t$discovery_id = $queue_item->discovery_id;\n\t\t$item = $CI->m_discoveries->read($discovery_id);\n\t\t$discovery = $item[0];\n\t\tunset($item);\n\t\t$log = new stdClass();\n\t\t$log->discovery_id = $discovery_id;\n\t\t$log->command_status = 'start';\n\t\t$log->message = 'Starting discovery for ' . $discovery->attributes->name;\n\t\t$log->ip = '127.0.0.1';\n\t\t$log->severity = 6;\n\t\tdiscovery_log($log);\n\t\t$log->command_status = 'notice';\n\n\t\t$sql = '/* discoveries_helper::discover_ad */ ' . \"UPDATE `discoveries` SET `status` = 'running', `ip_all_count` = 0, `ip_responding_count` = 0, `ip_scanned_count` = 0, `ip_discovered_count` = 0, `ip_audited_count` = 0, `last_run` = NOW() WHERE id = ?\";\n\t\t$data = array($discovery_id);\n\t\t$CI->db->query($sql, $data);\n\n\t\t// We need to get the Org Children of this particular discovery run\n\t\t$orgs = $CI->m_orgs->get_children($discovery->attributes->org_id);\n\t\t$orgs[] = $discovery->attributes->org_id;\n\t\t$orgs = implode(',', $orgs);\n\n\t\t// Stored credential sets\n\t\t$credentials = $CI->m_credentials->collection($orgs);\n\t\t// get the list of subnets from AD\n\t\t// TODO - make the below able to use LDAPS as well as LDAP\n\t\t$ldapuri = 'ldap://' . $discovery->attributes->other->ad_server;\n\t\t$error_reporting = error_reporting();\n\t\terror_reporting(0);\n\t\t$ldapconn = @ldap_connect($ldapuri);\n\t\terror_reporting($error_reporting);\n\t\tunset($error_reporting);\n\t\tif ( ! $ldapconn) {\n\t\t\t// log the failed attempt to connect to AD\n\t\t\t$log->severity = 4;\n\t\t\t$log->details = 'Could not connect to AD ' . $discovery->attributes->other->ad_domain . ' at ' . $discovery->attributes->other->ad_server;\n\t\t\t$log->command_status = 'fail';\n\t\t\tdiscovery_log($log);\n\t\t\treturn false;\n\t\t}\n\t\t// successful connect to AD, now try to bind using the credentials\n\t\tldap_set_option($ldapconn, LDAP_OPT_PROTOCOL_VERSION, 3);\n\t\tldap_set_option($ldapconn, LDAP_OPT_REFERRALS, 0);\n\t\t$bind = false;\n\t\tforeach ($credentials as $credential) {\n\t\t\tif ($credential->attributes->type === 'windows') {\n\t\t\t\tif ($bind = @ldap_bind($ldapconn, $credential->attributes->credentials->username, $credential->attributes->credentials->password)) {\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t$log->message = 'Successful bind to AD using ' . $credential->attributes->name;\n\t\t\t\t\t$log->command_status = 'success';\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t$base_dn = 'CN=Subnets,CN=Sites,CN=Configuration,dc=' . implode(', dc=', explode('.', $discovery->attributes->other->ad_domain));\n\t\t\t\t\t$filter = '(&(objectclass=*))';\n\t\t\t\t\t$justthese = array('distinguishedName', 'name', 'siteobject');\n\t\t\t\t\t$search_result = ldap_search($ldapconn, $base_dn, $filter, $justthese);\n\t\t\t\t\t$info = ldap_get_entries($ldapconn, $search_result);\n\t\t\t\t\tif (empty($info)) {\n\t\t\t\t\t\t$log->message = 'Could not Retrieve subnets from ' . $discovery->attributes->other->ad_domain . ' on ' . $discovery->attributes->other->ad_server . ' using ' . $credential->attributes->name;\n\t\t\t\t\t\t$log->severity = 6;\n\t\t\t\t\t\t$log->command_output = '';\n\t\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t\t$log->message = 'Retrieved subnets from ' . $discovery->attributes->other->ad_domain . ' on ' . $discovery->attributes->other->ad_server;\n\t\t\t\t\t\t$log->command_status = 'success';\n\t\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t$log->message = 'Could not bind to AD using ' . $credential->attributes->name;\n\t\t\t\t\t$log->command_status = 'warning';\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t$bind = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ( $bind === false OR empty($info)) {\n\t\t\t$log->severity = 5;\n\t\t\t$log->command_status = 'fail';\n\t\t\t$log->message = 'Could not bind to AD ' . $discovery->attributes->other->ad_domain . ' at ' . $discovery->attributes->other->ad_server;\n\t\t\tdiscovery_log($log);\n\t\t\treturn false;\n\t\t}\n\t\tforeach ($info as $subnet) {\n\t\t\t$log->command_status = 'notice';\n\t\t\tif ( ! empty($subnet['name'][0]) && $subnet['name'][0] !== 'Subnets') {\n\t\t\t\tunset($network);\n\t\t\t\t$network = new stdClass();\n\t\t\t\tif ( ! empty($subnet['siteobject'][0])) {\n\t\t\t\t\t$temp = explode(',', $subnet['siteobject'][0]);\n\t\t\t\t\t$temp_name = explode('=', $temp[0]);\n\t\t\t\t\t$name = $temp_name[1] . ' - ';\n\t\t\t\t} else {\n\t\t\t\t\t$name = '';\n\t\t\t\t}\n\t\t\t\t$network->name = $name . $subnet['name'][0];\n\t\t\t\t$network->network = $subnet['name'][0];\n\t\t\t\t$network->org_id = $discovery->attributes->org_id;\n\t\t\t\t$network->description = @$subnet['description'][0];\n\t\t\t\tif ( ! empty($subnet['location'][0])) {\n\t\t\t\t\t$network->description .= ' (' . $subnet['location'][0] . ')';\n\t\t\t\t}\n\t\t\t\t$log->message = 'Upserting network - ' . $network->name;\n\t\t\t\tdiscovery_log($log);\n\t\t\t\t$CI->m_networks->upsert($network);\n\n\t\t\t\t$ad_discovery = new stdClass();\n\t\t\t\t$ad_discovery->name = $network->name;\n\t\t\t\t$ad_discovery->org_id = $discovery->attributes->org_id;\n\t\t\t\t$ad_discovery->type = 'subnet';\n\t\t\t\t$ad_discovery->devices_assigned_to_org = $discovery->attributes->devices_assigned_to_org;\n\t\t\t\t$ad_discovery->devices_assigned_to_location = $discovery->attributes->devices_assigned_to_location;\n\t\t\t\tif (gettype($discovery->attributes->other) === 'string') {\n\t\t\t\t\t$ad_discovery->other = json_decode($discovery->attributes->other);\n\t\t\t\t} else {\n\t\t\t\t\t$ad_discovery->other = $discovery->attributes->other;\n\t\t\t\t}\n\t\t\t\tunset($ad_discovery->other->ad_server);\n\t\t\t\tunset($ad_discovery->other->ad_comain);\n\t\t\t\t$ad_discovery->other->match = new stdClass();\n\t\t\t\t$ad_discovery->other->subnet = $subnet['name'][0];\n\n\t\t\t\t$sql = '/* discoveries_helper::discover_ad */ ' . \"SELECT * FROM discoveries WHERE name = ? AND org_id = ? and description = 'Subnet - \" . $subnet['name'][0] . \"'\";\n\t\t\t\t$query = $CI->db->query($sql, array($ad_discovery->name, intval($discovery->attributes->org_id)));\n\t\t\t\t$result = $query->result();\n\t\t\t\t// TODO - JSON decode this and test the subnet. We have other items stored inside 'other' (nmap options, etc).\n\t\t\t\t$this_id = false;\n\t\t\t\tif (empty($result)) {\n\t\t\t\t\t$log->message = 'Creating and executing discovery on subnet ' . $network->name;\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t$this_id = $CI->m_discoveries->create($ad_discovery);\n\t\t\t\t} else {\n\t\t\t\t\t$this_id = $result[0]->id;\n\t\t\t\t\t$log->message = 'Discovery for ' . $network->name . ' exists, running.';\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t}\n\t\t\t\tif ( ! empty($this_id)) {\n\t\t\t\t\t// put the discovery into the queue\n\t\t\t\t\t$details = new stdClass();\n\t\t\t\t\t$details->name = $network->name;\n\t\t\t\t\t$details->type = 'subnet';\n\t\t\t\t\t$details->org_id =  $discovery->attributes->org_id;\n\t\t\t\t\t$details->discovery_id = $this_id;\n\t\t\t\t\tif ($CI->m_queue->create('subnet', $details)) {\n\t\t\t\t\t\t$log->command_status = 'success';\n\t\t\t\t\t\t$log->message = 'Discovery ' . $network->name . ' placed in queue for execution.';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$log->command_status = 'failed';\n\t\t\t\t\t\t$log->message = 'Discovery ' . $network->name . ' could not be placed 9in the queue. See system log for more details.';\n\t\t\t\t\t\t$log->severity = 4;\n\t\t\t\t\t}\n\t\t\t\t\t$log->command = '';\n\t\t\t\t\t$log->command_time_to_execute = microtime(true) - $start;\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// NOTE - the log_helper will mark this in the database as complete for us, think Collector / Server\n\t\t$log->severity = 6;\n\t\t$log->message = 'Discovery has finished.';\n\t\t$log->command = '';\n\t\t$log->command_output = '';\n\t\t$log->command_status = 'finished';\n\t\t$log->command_time_to_execute = gmdate('H:i:s', intval(microtime(true) - $start));\n\t\t$log->ip = '127.0.0.1';\n\t\tdiscovery_log($log);\n\t\treturn true;\n\t}\n}\n// End of file discoveries_helper.php\n// Location: ./helpers/discoveries_helper.php\n"], "fixing_code": ["<?php\n/**\n#  Copyright 2003-2015 Opmantek Limited (www.opmantek.com)\n#\n#  ALL CODE MODIFICATIONS MUST BE SENT TO CODE@OPMANTEK.COM\n#\n#  This file is part of Open-AudIT.\n#\n#  Open-AudIT is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU Affero General Public License as published\n#  by the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  Open-AudIT is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU Affero General Public License for more details.\n#\n#  You should have received a copy of the GNU Affero General Public License\n#  along with Open-AudIT (most likely in a file named LICENSE).\n#  If not, see <http://www.gnu.org/licenses/>\n#\n#  For further information on Open-AudIT or for a license other than AGPL please see\n#  www.opmantek.com or email contact@opmantek.com\n#\n# *****************************************************************************\n*\n* PHP version 5.3.3\n* \n* @category  Helper\n* @package   Discoveries\n* @author    Mark Unwin <marku@opmantek.com>\n* @copyright 2014 Opmantek\n* @license   http://www.gnu.org/licenses/agpl-3.0.html aGPL v3\n* @version   GIT: Open-AudIT_3.3.1\n* @link      http://www.open-audit.org\n*/\n\n/**\n* Base Helper Discoveries\n*\n* @access   public\n* @category Helper\n* @package  Discoveries\n* @author   Mark Unwin <marku@opmantek.com>\n* @license  http://www.gnu.org/licenses/agpl-3.0.html aGPL v3\n* @link     http://www.open-audit.org\n */\nif ( ! defined('BASEPATH')) {\n\texit('No direct script access allowed');\n}\n\nif ( ! function_exists('all_ip_list')) {\n    /**\n     *\n     * @param  object $discovery The discovery object with all its parameters\n     * @return array|false All the IP addresses in this discovery (excluding the excluded list)\n     */\n\tfunction all_ip_list($discovery = null)\n\t{\n\t\tif (is_null($discovery)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$log = new stdClass();\n\t\t$log->discovery_id = $discovery->id;\n\t\t$log->severity = 6;\n\t\t$log->file = 'discoveries_helper';\n\t\t$log->function = 'all_ip_list';\n\t\t$log->command_status = 'notice';\n\t\t$log->message = 'Retrieving IP list';\n\t\t$log->ip = '127.0.0.1';\n\n\t\t$ip_addresses = array();\n\t\tif ( ! empty($discovery->attributes->other->nmap->exclude_ip)) {\n\t\t\t$command = 'nmap -n -sL --exclude ' . $discovery->attributes->other->nmap->exclude_ip . ' ' . $discovery->attributes->other->subnet;\n\t\t} else {\n\t\t\t$command = 'nmap -n -sL ' . $discovery->attributes->other->subnet;\n\t\t}\n\n\t\tif (php_uname('s') === 'Darwin') {\n\t\t\t$command = '/usr/local/bin/' . $command;\n\t\t}\n\t\t$log->command = $command;\n\n\t\texec($command, $output, $return_var);\n\t\tif ($return_var === 0) {\n\t\t\tforeach ($output as $line) {\n\t\t\t\tif (stripos($line, 'Nmap scan report for') === 0) {\n\t\t\t\t\t$temp = explode(' ', $line);\n\t\t\t\t\t$ip_addresses[] = $temp[4];\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tdiscovery_log($log);\n\t\t\treturn false;\n\t\t}\n\t\t$log->command_output = 'Total IPs: ' . @count($ip_addresses);\n\t\tdiscovery_log($log);\n\t\treturn $ip_addresses;\n\t}\n}\n\nif ( ! function_exists('ip_list')) {\n    /**\n     *\n     * @param  object $discovery The discovery object with all its parameters\n     * @return array|false The array of all responding IP addresses in the discovery\n     */\n\tfunction responding_ip_list($discovery = null)\n\t{\n\t\tif (is_null($discovery)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$log = new stdClass();\n\t\t$log->discovery_id = $discovery->id;\n\t\t$log->severity = 6;\n\t\t$log->file = 'discoveries_helper';\n\t\t$log->function = 'responding_ip_list';\n\t\t$log->command_status = 'notice';\n\t\t$log->message = 'Testing for responding IPs';\n\t\t$log->ip = '127.0.0.1';\n\n\t\t$ip_addresses = array();\n\t\tif ($discovery->attributes->other->nmap->ping === 'y') {\n\t\t\tif ( ! empty($discovery->attributes->other->nmap->exclude_ip)) {\n\t\t\t\t$command = 'nmap -n -oG - -sP --exclude ' . $discovery->attributes->other->nmap->exclude_ip . ' ' . $discovery->attributes->other->subnet;\n\t\t\t} else {\n\t\t\t\t$command = 'nmap -n -oG - -sP ' . $discovery->attributes->other->subnet;\n\t\t\t}\n\t\t\tif (php_uname('s') === 'Darwin') {\n\t\t\t\t$command = '/usr/local/bin/' . $command;\n\t\t\t}\n\t\t\t$log->command = $command;\n\t\t\texec($command, $output, $return_var);\n\t\t\tif ($return_var === 0) {\n\t\t\t\tforeach ($output as $line) {\n\t\t\t\t\tif (stripos($line, 'Host:') === 0) {\n\t\t\t\t\t\t$temp = explode(' ', $line);\n\t\t\t\t\t\t$ip_addresses[] = $temp[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdiscovery_log($log);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif ( ! empty($discovery->attributes->other->nmap->exclude_ip)) {\n\t\t\t\t$command = 'nmap -n -sL --exclude ' . $discovery->attributes->other->nmap->exclude_ip . ' ' . $discovery->attributes->other->subnet;\n\t\t\t} else {\n\t\t\t\t$command = 'nmap -n -sL ' . $discovery->attributes->other->subnet;\n\t\t\t}\n\t\t\tif (php_uname('s') === 'Darwin') {\n\t\t\t\t$command = '/usr/local/bin/' . $command;\n\t\t\t}\n\t\t\t$log->command = $command;\n\t\t\texec($command, $output, $return_var);\n\t\t\tif ($return_var === 0) {\n\t\t\t\tforeach ($output as $line) {\n\t\t\t\t\tif (stripos($line, 'Nmap scan report for') === 0) {\n\t\t\t\t\t\t$temp = explode(' ', $line);\n\t\t\t\t\t\t$ip_addresses[] = $temp[4];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdiscovery_log($log);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t$log->command_output = 'Responding IPs: ' . @count($ip_addresses);\n\t\tdiscovery_log($log);\n\t\treturn $ip_addresses;\n\t}\n}\n\nif ( ! function_exists('update_non_responding')) {\n    /**\n     *\n     * @param  int   $discovery_id       discoveries.id\n     * @param  array $all_ip_list        All the IP addresses in this discovery (excluding the excluded list)\n     * @param  array $responding_ip_list The array of all responding IP addresses in the discovery\n     * @return void\n     */\n\tfunction update_non_responding($discovery_id, $all_ip_list, $responding_ip_list)\n\t{\n\t\t$CI = get_instance();\n\t\t$start = microtime(true);\n\t\t$log = new stdClass();\n\t\t$log->discovery_id = $discovery_id;\n\t\t$log->severity = 6;\n\t\t$log->file = 'discoveries_helper';\n\t\t$log->function = 'update_non_responding';\n\t\t$log->command_status = 'notice';\n\t\t$log->message = 'Updating discovery log with non-responding IPs';\n\t\t$log->ip = '127.0.0.1';\n\t\t$id = discovery_log($log);\n\t\tforeach ($all_ip_list as $ip) {\n\t\t\tif ( ! in_array($ip, $responding_ip_list)) {\n\t\t\t\t// Update the discovery log to show this IP not responding\n\t\t\t\t$log->message = \"IP {$ip} not responding, ignoring.\";\n\t\t\t\t$log->ip = $ip;\n\t\t\t\tdiscovery_log($log);\n\t\t\t}\n\t\t}\n\t\t$log->command_time_to_execute = microtime(true) - $start;\n\t\t$sql = \"UPDATE discovery_log SET command_time_to_execute = '\" . $log->command_time_to_execute . \"' WHERE id = ?\";\n\t\t$data = array($id);\n\t\t$CI->db->query($sql, $data);\n\t}\n}\n\nif ( ! function_exists('queue_responding')) {\n\t/**\n\t * Insert into queue an entry for each responding IP\n\t * @param  int   $discovery_id       discoveries.id\n\t * @param  array $responding_ip_list The array of all responding IP addresses in the discovery\n\t * @return void\n\t */\n\tfunction queue_responding($discovery_id = 0, $responding_ip_list)\n\t{\n\t\t$CI = get_instance();\n\t\t$log = new stdClass();\n\t\t$log->discovery_id = $discovery_id;\n\t\t$log->severity = 6;\n\t\t$log->file = 'discoveries_helper';\n\t\t$log->function = 'update_responding';\n\t\t$log->command_status = 'notice';\t\t\n\t\tforeach ($responding_ip_list as $ip) {\n\t\t\t$item = new stdClass();\n\t\t\t$item->ip = $ip;\n\t\t\t$item->discovery_id = $discovery_id;\n\t\t\t$details = json_encode($item);\n\t\t\tunset ($item);\n\t\t\t$CI->m_queue->create('ip_scan', $details);\n\t\t\t$log->ip = $ip;\n\t\t\t$log->message = 'IP ' . $ip . ' responding, adding to device list.';\n\t\t\tdiscovery_log($log);\n\t\t}\n\t}\n}\n\n\nif ( ! function_exists('discover_subnet')) {\n\t/**\n\t * Run the discovery on the subnet\n\t * @param  object $queue_item The individual entry from the queue table\n\t * @return bool             [description]\n\t */\n\tfunction discover_subnet($queue_item = null)\n\t{\n\t\tif (empty($queue_item)) {\n\t\t\treturn false;\n\t\t}\n\t\t$start = microtime(true);\n\t\t$CI = get_instance();\n\n\t\t$discovery_id = $queue_item->discovery_id;\n\n\t\t$item = $CI->m_discoveries->read($discovery_id);\n\t\t$discovery = $item[0];\n\n\t\t$log = new stdClass();\n\t\t$log->discovery_id = $discovery_id;\n\t\t$log->command_status = 'start';\n\t\t$log->message = 'Starting discovery for ' . $discovery->attributes->name;\n\t\t$log->ip = '127.0.0.1';\n\t\t$log->severity = 6;\n\t\tdiscovery_log($log);\n\n\t\t$sql = '/* discoveries_helper::discover_subnet */ ' . \"UPDATE `discoveries` SET `status` = 'running', `ip_all_count` = 0, `ip_responding_count` = 0, `ip_scanned_count` = 0, `ip_discovered_count` = 0, `ip_audited_count` = 0, `last_run` = NOW() WHERE id = ?\";\n\t\t$data = array($discovery_id);\n\t\t$CI->db->query($sql, $data);\n\n\t\tif ( ! preg_match('/^[\\d,\\.,\\/,\\-]*$/', $discovery->attributes->other->subnet)) {\n\t\t\t$log->message = 'Invalid subnet value supplied of ' . htmlentities($discovery->attributes->other->subnet);\n\t\t\t$log->severity = 5;\n\t\t\tdiscovery_log($log);\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! empty($CI->config->config['discovery_ip_exclude'])) {\n\t\t\t// Account for users adding multiple spaces which would be converted to multiple comma's.\n\t\t\t$exclude_ip = preg_replace('!\\s+!', ' ', $CI->config->config['discovery_ip_exclude']);\n\t\t\t// Convert spaces to comma's\n\t\t\t$exclude_ip = str_replace(' ', ',', $exclude_ip);\n\t\t\tif ( ! empty($discovery->attributes->other->nmap->exclude_ip)) {\n\t\t\t\t$discovery->attributes->other->nmap->exclude_ip .= ',' . $exclude_ip;\n\t\t\t} else {\n\t\t\t\t$discovery->attributes->other->nmap->exclude_ip = $exclude_ip;\n\t\t\t}\n\t\t}\n\t\t// Ensure we only have valid characters of digit, dot, slash and comma in attribute\n\t\tif ( ! preg_match('/^[\\d,\\.,\\/,\\-,\\,]*$/', $discovery->attributes->other->nmap->exclude_ip)) {\n\t\t\t$discovery->attributes->other->nmap->exclude_ip = '';\n\t\t\t$log->message = 'Invalid characters supplied in exclude_ip, setting to blank.';\n\t\t\t$log->severity = 5;\n\t\t\tdiscovery_log($log);\n\t\t}\n\n\t\t$all_ip_list = all_ip_list($discovery);\n\n\t\t$count = @count($all_ip_list);\n\t\t$log->command_status = 'notice';\n\t\t$log->message = 'Ping response not required, assuming all ' . $count . ' IP addresses are up.';\n\t\tif ($discovery->attributes->other->nmap->ping === 'y') {\n\t\t\t$log->message = 'Scanning ' . $count . ' IP addresses using Nmap to test for response.';\n\t\t}\n\t\tdiscovery_log($log);\n\n\t\t$responding_ip_list = responding_ip_list($discovery);\n\n\t\t$log->command_time_to_execute = microtime(true) - $start;\n\t\t$log->message = 'Nmap response scanning completed.';\n\t\tdiscovery_log($log);\n\n\t\tupdate_non_responding($discovery->id, $all_ip_list, $responding_ip_list);\n\t\tqueue_responding($discovery->id, $responding_ip_list);\n\n\t\t$ip_all_count = 0;\n\t\t$ip_responding_count = 0;\n\t\tif ( ! empty($all_ip_list) && is_array($all_ip_list)) {\n\t\t\t$ip_all_count = count($all_ip_list);\n\t\t}\n\t\tif ( ! empty($responding_ip_list) && is_array($responding_ip_list)) {\n\t\t\t$ip_responding_count = count($responding_ip_list);\n\t\t}\n\t\t$sql = '/* discoveries_helper::discover_subnet */ ' . 'UPDATE `discoveries` SET ip_all_count = ?, ip_responding_count = ? WHERE `id` = ?';\n\t\t$data = array($ip_all_count, $ip_responding_count, $discovery_id);\n\t\t$CI->db->query($sql, $data);\n\t\tif (empty($responding_ip_list)) {\n\t\t\t$log->message = 'No IPs are responding. You may wish to check your discovery configuration.';\n\t\t\t$log->command_time_to_execute = microtime(true) - $start;\n\t\t\tdiscovery_log($log);\n\t\t\t// NOTE - the log_helper will mark this in the database as complete for us, think Collector / Server\n\t\t\t$log->message = 'Discovery has finished.';\n\t\t\t$log->command = '';\n\t\t\t$log->command_output = '';\n\t\t\t$log->command_status = 'finished';\n\t\t\t$log->command_time_to_execute = microtime(true) - $start;\n\t\t\t$log->ip = '127.0.0.1';\n\t\t\tdiscovery_log($log);\n\t\t}\n\t\treturn true;\n\t}\n}\n\n\n\n\nif ( ! function_exists('ip_scan')) {\n\t/**\n\t * Scan an individual IP address according to our discovery settings\n\t * @param  object $details [description]\n\t * @return array|false   A device results or boolean false\n\t */\n\tfunction ip_scan($details = null)\n\t{\n\t\tif (empty($details)) {\n\t\t\treturn false;\n\t\t}\n\t\t$start = microtime(true);\n\t\t$CI = get_instance();\n\t\t$ip = $details->ip;\n\t\t$item = $CI->m_discoveries->read($details->discovery_id);\n\t\tif (empty($item)) {\n\t\t\treturn false;\n\t\t}\n\t\t$discovery = $item[0]->attributes;\n\t\tunset($item);\n\t\tunset($details);\n\n\t\t$log = new stdClass();\n\t\t$log->discovery_id = $discovery->id;\n\t\t$log->severity = 7;\n\t\t$log->file = 'discoveries_helper';\n\t\t$log->function = 'ip_scan';\n\t\t$log->command_status = 'notice';\n\t\t$log->message = 'IP scan start on device ' . $ip;\n\t\t$log->ip = $ip;\n\t\tdiscovery_log($log);\n\n\t\t$nmap = $discovery->other->nmap;\n\t\t$device = array();\n\t\t$sql = 'SELECT NOW() AS `timestamp`';\n\t\t$query = $CI->db->query($sql);\n\t\t$result = $query->result();\n\t\t$device['timestamp'] = $result[0]->timestamp;\n\n\t\t$timing = '-T4';\n\t\tif ( ! empty($nmap_timing)) {\n\t\t\t$timing = '-T' . intval($nmap_timing);\n\t\t}\n\n\t\t$ping = '';\n\t\tif (empty($nmap->ping) && $nmap->ping === 'n') {\n\t\t\t$ping = '-Pn';\n\t\t}\n\n\t\t$service_version = '';\n\t\tif ( ! empty($nmap->service_version)) {\n\t\t\t$service_version = '-sV';\n\t\t}\n\n\t\t$timeout = '';\n\t\tif ( ! empty($timeout)) {\n\t\t\t$timeout = '--host-timeout ' . intval($nmap->timeout);\n\t\t}\n\n\t\t$nmap_tcp_ports = '';\n\t\tif ( ! empty($nmap->nmap_tcp_ports)) {\n\t\t\t$nmap_tcp_ports = '--top-ports ' . $nmap->nmap_tcp_ports;\n\t\t}\n\n\t\t$nmap_udp_ports = '';\n\t\tif ( ! empty($nmap->nmap_udp_ports)) {\n\t\t\t$nmap_udp_ports = '--top-ports ' . $nmap->nmap_udp_ports;\n\t\t}\n\n\t\t$tcp_ports = '';\n\t\tif ( ! empty($nmap->tcp_ports)) {\n\t\t\t$nmap->tcp_ports = str_replace(' ', '', $nmap->tcp_ports);\n\t\t\t$tcp_ports = '-p ' . $nmap->tcp_ports;\n\t\t}\n\n\t\t$udp_ports = '';\n\t\tif ( ! empty($nmap->udp_ports)) {\n\t\t\t$nmap->udp_ports = str_replace(' ', '', $nmap->udp_ports);\n\t\t\t$udp_ports = '-p ' . $nmap->udp_ports;\n\t\t}\n\n\t\t$exclude_ip = '';\n\t\tif ( ! empty($nmap->exclude_ip)) {\n\t\t\t$nmap->exclude_ip = str_replace(' ', '', $nmap->exclude_ip);\n\t\t\t$exclude_ip = '--exclude ' . $nmap->exclude_ip;\n\t\t}\n\n\t\t$exclude_tcp_ports = '';\n\t\tif ( ! empty($nmap->exclude_tcp_ports)) {\n\t\t\t$nmap->exclude_tcp_ports = str_replace(' ', '', $nmap->exclude_tcp_ports);\n\t\t\t$exclude_tcp_ports = '--exclude-ports T:' . $nmap->exclude_tcp_ports;\n\t\t}\n\n\t\t$exclude_udp_ports = '';\n\t\tif ( ! empty($nmap->exclude_udp_ports)) {\n\t\t\t$nmap->exclude_udp_ports = str_replace(' ', '', $nmap->exclude_udp_ports);\n\t\t\t$exclude_udp_ports = '--exclude-ports U:' . $nmap->exclude_udp_ports;\n\t\t}\n\n\t\tif ( ! empty($discovery->other->nmap->nmap_tcp_ports)) {\n\t\t\t$item_start = microtime(true);\n\t\t\t$command = \"nmap -n {$timing} {$ping} -sS {$service_version} {$exclude_ip} {$exclude_tcp_ports} {$nmap_tcp_ports} {$timeout} {$ip}\";\n\t\t\tif (php_uname('s') === 'Darwin') {\n\t\t\t\t$command = '/usr/local/bin/' . $command;\n\t\t\t}\n\t\t\texec($command, $output, $return_var);\n\t\t\t$log->command_time_to_execute = (microtime(true) - $item_start);\n\t\t\t$log->message = 'Nmap Command (Top TCP Ports)';\n\t\t\t$log->command = \"{$command} # Top TCP Ports\";\n\t\t\tdiscovery_log($log);\n\t\t\techo $log->message . ' took ' . $log->command_time_to_execute . \"seconds.\\n\";\n\t\t\t$device = array_merge($device, check_nmap_output($discovery, $output, $ip, $command));\n\t\t\tunset($output);\n\t\t}\n\n\t\tif ( ! empty($discovery->other->nmap->nmap_udp_ports)) {\n\t\t\t$item_start = microtime(true);\n\t\t\t$command = \"nmap -n {$timing} {$ping} -sU {$service_version} {$exclude_ip} {$exclude_udp_ports} {$nmap_udp_ports} {$timeout} {$ip}\";\n\t\t\tif (php_uname('s') === 'Darwin') {\n\t\t\t\t$command = '/usr/local/bin/' . $command;\n\t\t\t}\n\t\t\texec($command, $output, $return_var);\n\t\t\t$log->command_time_to_execute = (microtime(true) - $item_start);\n\t\t\t$log->message = 'Nmap Command (Top UDP Ports)';\n\t\t\t$log->command = \"{$command} # Top UDP Ports\";\n\t\t\tdiscovery_log($log);\n\t\t\techo $log->message . ' took ' . $log->command_time_to_execute . \"seconds.\\n\";\n\t\t\t$ports = @$device['nmap_ports'];\n\t\t\t$device = array_merge($device, check_nmap_output($discovery, $output, $ip, $command));\n\t\t\tif ( ! empty($ports)) {\n\t\t\t\t$device['nmap_ports'] = $ports . ',' . $device['nmap_ports'];\n\t\t\t}\n\t\t\tunset($output);\n\t\t\tunset($ports);\n\t\t}\n\n\t\tif ( ! empty($discovery->other->nmap->tcp_ports)) {\n\t\t\t$item_start = microtime(true);\n\t\t\t$command = \"nmap -n {$timing} {$ping} -sS {$service_version} {$exclude_ip} {$exclude_tcp_ports} {$tcp_ports} {$timeout} {$ip}\";\n\t\t\tif (php_uname('s') === 'Darwin') {\n\t\t\t\t$command = '/usr/local/bin/' . $command;\n\t\t\t}\n\t\t\texec($command, $output, $return_var);\n\t\t\t$log->command_time_to_execute = (microtime(true) - $item_start);\n\t\t\t$log->message = 'Nmap Command (Custom TCP Ports)';\n\t\t\t$log->command = \"{$command} # Custom TCP Ports\";\n\t\t\tdiscovery_log($log);\n\t\t\techo $log->message . ' took ' . $log->command_time_to_execute . \"seconds.\\n\";\n\t\t\t$ports = @$device['nmap_ports'];\n\t\t\t$device = array_merge($device, check_nmap_output($discovery, $output, $ip, $command));\n\t\t\tif ( ! empty($ports)) {\n\t\t\t\t$device['nmap_ports'] = $ports . ',' . $device['nmap_ports'];\n\t\t\t}\n\t\t\tunset($output);\n\t\t\tunset($ports);\n\t\t}\n\n\t\tif ( ! empty($discovery->other->nmap->udp_ports)) {\n\t\t\t$item_start = microtime(true);\n\t\t\t$command = \"nmap -n {$timing} {$ping} -sU {$service_version} {$exclude_ip} {$exclude_udp_ports} {$udp_ports} {$timeout} {$ip}\";\n\t\t\tif (php_uname('s') === 'Darwin') {\n\t\t\t\t$command = '/usr/local/bin/' . $command;\n\t\t\t}\n\t\t\texec($command, $output, $return_var);\n\t\t\t$log->command_time_to_execute = (microtime(true) - $item_start);\n\t\t\t$log->message = 'Nmap Command (Custom UDP Ports)';\n\t\t\t$log->command = \"{$command} # Custom UDP Ports\";\n\t\t\tdiscovery_log($log);\n\t\t\techo $log->message . ' took ' . $log->command_time_to_execute . \"seconds.\\n\";\n\t\t\t$ports = @$device['nmap_ports'];\n\t\t\t$device = array_merge($device, check_nmap_output($discovery, $output, $ip, $command));\n\t\t\tif ( ! empty($ports)) {\n\t\t\t\t$device['nmap_ports'] = $ports . ',' . $device['nmap_ports'];\n\t\t\t}\n\t\t\tunset($output);\n\t\t\tunset($ports);\n\t\t}\n\n\t\t$log->message = 'IP scan finish on device ' . $ip;\n\t\t$log->command = '';\n\t\t$log->command_output = '';\n\t\t$log->command_time_to_execute = microtime(true) - $start;\n\t\tdiscovery_log($log);\n\t\t$sql = '/* discoveries_helper::ip_scan */ ' .  \"UPDATE discovery_log SET command_time_to_execute = ? WHERE message = 'IP \" . $log->ip . \" responding, adding to device list.' AND discovery_id = ?\";\n\t\t$data = array($log->command_time_to_execute, $discovery->id);\n\t\t$query = $CI->db->query($sql, $data);\n\t\treturn($device);\n\t}\n}\n\nif ( ! function_exists('check_nmap_output')) {\n\t/**\n\t * [check_nmap_output description]\n\t * @param  object $discovery [description]\n\t * @param  array  $output    [description]\n\t * @param  string $ip        [description]\n\t * @param  string $command   [description]\n\t * @return array|false            [description]\n\t */\n\tfunction check_nmap_output ($discovery, $output, $ip, $command)\n\t{\n\t\tif (empty($discovery) OR empty($output)) {\n\t\t\treturn false;\n\t\t}\n\t\t$device = array();\n\t\t$log = new stdClass();\n\t\t$log->discovery_id = $discovery->id;\n\t\t$log->ip = $ip;\n\t\t$log->severity = 7;\n\t\t$log->command = $command;\n\t\t$log->command_status = 'notice';\n\t\t$values = array('open', 'closed', 'filtered', 'unfiltered', 'open|filtered', 'closed|filtered');\n\t\t$device = array();\n\n\t\t// Some defaults, see https://nmap.org/book/man-port-scanning-basics.html\n\t\tif (empty($discovery->other->nmap->{'open'})) {\n\t\t\t$discovery->other->nmap->{'open'} = 'y';\n\t\t}\n\t\tif (empty($discovery->other->nmap->{'closed'})) {\n\t\t\t$discovery->other->nmap->{'closed'} = 'n';\n\t\t}\n\t\tif (empty($discovery->other->nmap->{'filtered'})) {\n\t\t\t$discovery->other->nmap->{'filtered'} = 'n';\n\t\t}\n\t\tif (empty($discovery->other->nmap->{'unfiltered'})) {\n\t\t\t$discovery->other->nmap->{'unfiltered'} = 'n';\n\t\t}\n\t\tif (empty($discovery->other->nmap->{'open|filtered'})) {\n\t\t\t$discovery->other->nmap->{'open|filtered'} = 'y';\n\t\t}\n\t\tif (empty($discovery->other->nmap->{'closed|filtered'})) {\n\t\t\t$discovery->other->nmap->{'closed|filtered'} = 'n';\n\t\t}\n\n\t\tforeach ($output as $line) {\n\t\t\t$keywords = preg_split('/[\\s,]+/', $line);\n\t\t\tforeach ($values as $status) {\n\t\t\t\tif ( ! empty($keywords[1])) {\n\t\t\t\t\tif ( ! empty($discovery->other->nmap->{$status}) && $discovery->other->nmap->{$status} === 'y') {\n\t\t\t\t\t\tif ($keywords[1] === $status) {\n\t\t\t\t\t\t\t$device['host_is_up'] = 'true';\n\t\t\t\t\t\t\t$device['status'] = $status;\n\t\t\t\t\t\t\tif ($status === 'open') {\n\t\t\t\t\t\t\t\tif (empty($device['nmap_ports'])) {\n\t\t\t\t\t\t\t\t\t$device['nmap_ports'] = $keywords[0] . '/' . str_replace('/', '+', $keywords[2]);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$device['nmap_ports'] .= ',' . $keywords[0] . '/' . $keywords[2];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$log->command_output = $line;\n\t\t\t\t\t\t\t$log->message = 'Host ' . $ip . ' is up, received ' . $keywords[0] . ' ' . $status . ' response';\n\t\t\t\t\t\t\tif ($keywords[0] === '22/tcp') {\n\t\t\t\t\t\t\t\t$device['ssh_status'] = 'true';\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\tif ($keywords[0] === '135/tcp') {\n\t\t\t\t\t\t\t\t$device['wmi_status'] = 'true';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ($keywords[0] === '161/udp') {\n\t\t\t\t\t\t\t\t$device['snmp_status'] = 'true';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$ssh_ports = explode(',', $discovery->other->nmap->ssh_ports);\n\t\t\t\t\t\t\tforeach ($ssh_ports as $ssh_port) {\n\t\t\t\t\t\t\t\tif ($keywords[0] === $ssh_port.'/tcp') {\n\t\t\t\t\t\t\t\t\t$device['ssh_status'] = 'true';\n\t\t\t\t\t\t\t\t\t$log->message = 'Host ' . $ip . ' is up, received custom ssh port ' . $keywords[0] . ' ' . $status . ') response';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (stripos($line, 'Host {$ip} is up, received arp-response') !== false) {\n\t\t\t\t$device['host_is_up'] = 'true';\n\t\t\t\t$log->message = \"Host {$ip} is up, received arp-response\";\n\t\t\t\t$log->command_output = $line;\n\t\t\t\tdiscovery_log($log);\n\t\t\t}\n\t\t\tif (stripos($line, 'MAC Address') !== false) {\n\t\t\t\t$keywords = preg_split('/[\\s,]+/', $line);\n\t\t\t\t$device['mac_address'] = strtolower($keywords[2]);\n\t\t\t\t$device['host_is_up'] = 'true';\n\t\t\t\t$log->message = \"Host {$ip} is up, received mac addess \" . $device['mac_address'];\n\t\t\t\t$log->command_output = $line;\n\t\t\t\tdiscovery_log($log);\n\t\t\t}\n\t\t\tif (stripos($line, 'Nmap done: 1 IP address (1 host up)') !== false) {\n\t\t\t\t$device['host_is_up'] = 'true';\n\t\t\t\t$log->message = \"Host {$ip} is up, received Nmap ping response\";\n\t\t\t\t$log->command_output = $line;\n\t\t\t\tdiscovery_log($log);\n\t\t\t}\n\t\t\tif (stripos($line, 'due to host timeout') !== false && $discovery->other->nmap->ping === 'y') {\n\t\t\t\t$device['host_is_up'] = 'true';\n\t\t\t\t$log->message = \"Host {$ip} timed out. Exceeded timeout seconds.\";\n\t\t\t\t$log->command_output = $line;\n\t\t\t\tdiscovery_log($log);\n\t\t\t}\n\t\t}\n\t\treturn $device;\n\t}\n}\n\n\n\n\nif ( ! function_exists('ip_audit')) {\n\t/**\n\t * [ip_audit description]\n\t * @param  object $ip_scan [description]\n\t * @return false          [description]\n\t */\n\tfunction ip_audit($ip_scan = null)\n\t{\n\t\tif (empty($ip_scan)) {\n\t\t\treturn false;\n\t\t}\n\t\t$start = microtime(true);\n\t\t$CI = get_instance();\n\t\t$item = $CI->m_discoveries->read($ip_scan->discovery_id);\n\t\t$discovery = @$item[0]->attributes;\n\t\tif (empty($discovery)) {\n\t\t\treturn false;\n\t\t}\n\t\tunset($item);\n\t\tif (is_string($ip_scan->details)) {\n\t\t\t$ip_scan->details = @json_decode($ip_scan->details);\n\t\t}\n\t\tif (empty($ip_scan->details)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (empty($ip_scan->details->snmp_status)) {\n\t\t\t$ip_scan->details->snmp_status = 'false';\n\t\t}\n\t\tif (empty($ip_scan->details->ssh_status)) {\n\t\t\t$ip_scan->details->ssh_status = 'false';\n\t\t}\n\t\tif (empty($ip_scan->details->wmi_status)) {\n\t\t\t$ip_scan->details->wmi_status = 'false';\n\t\t}\n\n\t\t$log = new stdClass();\n\t\t$log->command_status = 'notice';\n\t\t$log->discovery_id = $discovery->id;\n\t\t$log->file = 'discoveries_helper';\n\t\t$log->function = 'ip_audit';\n\t\t$log->ip = $ip_scan->ip;\n\t\t$log->message = 'IP Audit start on device ' . $ip_scan->ip;\n\t\t$log->pid = getmypid();\n\t\t$log->severity = 7;\n\t\tdiscovery_log($log);\n\n\t\tif (php_uname('s') !== 'Windows NT') {\n\t\t\t$filepath = $CI->config->config['base_path'] . '/other';\n\t\t} else {\n\t\t\t$filepath = $CI->config->config['base_path'] . '\\\\other';\n\t\t}\n\n\t\t$device = new stdClass();\n\t\t$device->audits_ip = \t$ip_scan->ip;\n\t\t$device->credentials = \tarray();\n\t\t$device->discovery_id = $discovery->id;\n\t\t$device->id = \t\t\t'';\n\t\t$device->ip = \t\t\t$ip_scan->ip;\n\n\t\t$sql = 'SELECT NOW() AS `timestamp`';\n\t\t$query = $CI->db->query($sql);\n\t\t$result = $query->result();\n\t\t$device->last_seen = $result[0]->timestamp;\n\t\t$device->last_seen_by = 'nmap';\n\t\t$device->mac_address = \t@$ip_scan->details->mac_address;\n\t\t$device->name = \t\t'';\n\t\t$device->os_family = \t'';\n\t\t$device->os_group = \t'';\n\t\t$device->sysDescr = \t'';\n\t\t$device->timestamp = \t$ip_scan->details->timestamp;\n\t\t$device->type = \t\t'';\n\t\t// If we have specifically assigned another org_id, set it\n\t\tif ( ! empty($discovery->devices_assigned_to_org)) {\n\t\t\t$device->org_id = $discovery->devices_assigned_to_org;\n\t\t}\n\t\t// If we have specifically assigned a location_id, set it\n\t\tif ( ! empty($discovery->devices_assigned_to_location)) {\n\t\t\t$device->location_id = $discovery->devices_assigned_to_location;\n\t\t}\n\n\t\tif ($CI->config->config['discovery_use_dns'] === 'y') {\n\t\t\t$device = dns_validate($device);\n\t\t}\n\n\t\t$parameters = new stdCLass();\n\t\t$parameters->details = $device;\n\t\t$parameters->discovery_id = $discovery->id;\n\t\t$parameters->match = @$discovery->other->match;\n\t\t$device->id = $CI->m_device->match($parameters);\n\n\t\tif ( ! empty($device->id) && ! empty($discovery->id)) {\n\t\t\t$sql = '/* discoveries_helper::ip_audit */ ' . 'SELECT name FROM system WHERE id = ' . intval($device->id);\n\t\t\t$query = $CI->db->query($sql);\n\t\t\t$result = $query->result();\n\t\t\t$name = $result[0]->name;\n\t\t\t$log->system_id = $device->id;\n\t\t\t$log->message = 'Device named ' . $name . ' found on initial IP Scan (Nmap) result.';\n\t\t\tdiscovery_log($log);\n\t\t\tunset($log->title, $log->message, $log->command, $log->command_time_to_execute, $log->command_error_message);\n\t\t\t// update the previous log entries with our new system_id\n\t\t\t$sql = '/* discoveries_helper::ip_audit */ ' . 'UPDATE discovery_log SET system_id = ' . intval($log->system_id) . ' WHERE discovery_id = ' . $discovery->id . \" and ip = '\" . $device->ip . \"'\";\n\t\t\t$log->message = 'Update the current log entries with our new device';\n\t\t\t$log->command = $sql;\n\t\t\t$command_log_id = discovery_log($log);\n\t\t\t$command_start = microtime(true);\n\t\t\t$query = $CI->db->query($sql);\n\t\t\t$command_end = microtime(true);\n\t\t\t$log->command = $CI->db->last_query();\n\t\t\t$log->command_time_to_execute = $command_end - $command_start;\n\t\t\t$log->id = $command_log_id;\n\t\t\tdiscovery_log($log);\n\t\t\tunset($log->title, $log->message, $log->command, $log->command_time_to_execute, $log->command_error_message);\n\t\t\tunset($log->id, $command_log_id);\n\t\t}\n\n\t\t$credentials = array();\n\t\t$credentials = $CI->m_discoveries->get_device_discovery_credentials(@intval($device->id), $discovery->id, $device->ip);\n\n\t\t// output to log file and DEBUG the status of the three main services\n\t\t$ip_scan->details->ssh_port = '22';\n\t\tif ( ! empty($discovery->other->nmap->ssh_ports) && intval($discovery->other->nmap->ssh_ports) !== 22) {\n\t\t\t$nmap_ports = explode(',', $discovery->other->nmap->ssh_ports);\n\t\t\tforeach (explode(',', $ip_scan->details->nmap_ports) as $port) {\n\t\t\t\t$temp = explode('/', $port);\n\t\t\t\t$port = intval($temp[0]);\n\t\t\t\tforeach ($nmap_ports as $nmap_port) {\n\t\t\t\t\tif ($port === intval($nmap_port)) {\n\t\t\t\t\t\t$ip_scan->details->ssh_port = $port;\n\t\t\t\t\t\t$ip_scan->details->ssh_status = 'true';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tunset($temp);\n\t\t\t}\n\t\t}\n\t\t$log->message = 'SSH Status is ' . $ip_scan->details->ssh_status . ' on ' . $device->ip;\n\t\tdiscovery_log($log);\n\t\t$log->message = 'SNMP Status is ' . $ip_scan->details->snmp_status . ' on ' . $device->ip;\n\t\tdiscovery_log($log);\n\t\t$log->message = 'WMI Status is ' . $ip_scan->details->wmi_status . ' on ' . $device->ip;\n\t\tdiscovery_log($log);\n\n\t\t$ip_discovered_count = 0;\n\t\t$ip_audited_count = 0;\n\n\t\t// SNMP audit\n\t\t$credentials_snmp = false;\n\n\t\t// No SNMP extension, do not run\n\t\tif ( ! extension_loaded('snmp') && $ip_scan->details->snmp_status === 'true') {\n\t\t\t$log->message = 'PHP extension not loaded, skipping SNMP data retrieval for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t}\n\n\t\t// Test for working SNMP credentials\n\t\tif (extension_loaded('snmp') && $ip_scan->details->snmp_status === 'true') {\n\t\t\t$log->message = 'Testing SNMP credentials for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$credentials_snmp = snmp_credentials($device->ip, $credentials, null, $discovery->id);\n\t\t\t// Add this credential sets ID to device->credentials\n\t\t\t// if collection == credentials, not an individual device acssociated credential\n\t\t\tif ( ! empty($credentials_snmp)) {\n\t\t\t\t$ip_discovered_count = 1;\n\t\t\t\tif ($credentials_snmp->foreign === 'credentials') {\n\t\t\t\t\t$device->credentials[] = intval($credentials_snmp->id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Run SNMP audit commands\n\t\tif ( ! empty($credentials_snmp)) {\n\t\t\tif ( ! empty($credentials_snmp->credentials->version)) {\n\t\t\t\t$device->snmp_version = 'snmpv' . intval($credentials_snmp->credentials->version);\n\t\t\t\tif (intval($credentials_snmp->credentials->version) === 2) {\n\t\t\t\t\t$device->snmp_version .= 'c';\n\t\t\t\t}\n\t\t\t}\n\t\t\t$temp_array = snmp_audit($device->ip, $credentials_snmp, null, $discovery->id);\n\t\t\tif ( ! empty($temp_array['details'])) {\n\t\t\t\tforeach ($temp_array['details'] as $key => $value) {\n\t\t\t\t\tif ( ! empty($value)) {\n\t\t\t\t\t\t$device->$key = $value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$device->last_seen_by = 'snmp';\n\t\t\t\t$device->audits_ip = '127.0.0.1';\n\t\t\t}\n\t\t\tif ( ! empty($temp_array['interfaces'])) {\n\t\t\t\t$network_interfaces = $temp_array['interfaces'];\n\t\t\t}\n\t\t\tif ( ! empty($temp_array['modules'])) {\n\t\t\t\t$modules = $temp_array['modules'];\n\t\t\t}\n\t\t\tif ( ! empty($temp_array['ip'])) {\n\t\t\t\t$ip = $temp_array['ip'];\n\t\t\t}\n\t\t\tif ( ! empty($temp_array['guests'])) {\n\t\t\t\t$guests = $temp_array['guests'];\n\t\t\t}\n\t\t\tif ( ! empty($temp_array['routes'])) {\n\t\t\t\t$routes = $temp_array['routes'];\n\t\t\t}\n\t\t}\n\n\t\tif ( ! empty($device->type) && $device->type !== 'computer' && $device->type !== 'unknown' && $device->type !== 'unclassified'\n\t\t\t&& ! empty($device->os_name) && stripos($device->os_name, 'dd-wrt') === false\n\t\t\t&& ! empty($device->manufacturer) && stripos($device->manufacturer, 'Ubiquiti') === false) {\n\t\t\t$log->message = 'Not a computer and not a DD-WRT or Ubiquiti device setting SSH status to false for ' . $device->ip;\n\t\t\t$log->severity = 5;\n\t\t\tdiscovery_log($log);\n\t\t\t$log->severity = 7;\n\t\t\t$ip_scan->details->ssh_status = 'false';\n\t\t}\n\n\t\t// SSH Audit\n\t\t$credentials_ssh = false;\n\n\t\t// Run SSH audit\n\t\tif ($ip_scan->details->ssh_status === 'true') {\n\t\t\t$log->message = 'Testing SSH credentials for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->ip = $device->ip;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$parameters->system_id = '';\n\t\t\tif ( ! empty($device->id)) {\n\t\t\t\t$parameters->system_id = $device->id;\n\t\t\t}\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$parameters->credentials = $credentials;\n\t\t\t$parameters->ssh_port = $ip_scan->details->ssh_port;\n\t\t\t$ssh_details = ssh_audit($parameters);\n\t\t\tif ( ! empty($ssh_details)) {\n\t\t\t\tif ( ! empty($ssh_details->credentials)) {\n\t\t\t\t\t$ip_discovered_count = 1;\n\t\t\t\t\t// Add this credential sets ID to device->credentials\n\t\t\t\t\t// if collection == credentials, not an individual device acssociated credential\n\t\t\t\t\t$credentials_ssh = $ssh_details->credentials;\n\t\t\t\t\tif ($credentials_ssh->foreign === 'credentials') {\n\t\t\t\t\t\t$device->credentials[] = intval($credentials_ssh->id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tunset($ssh_details->credentials);\n\t\t\t\t$device->last_seen_by = 'ssh';\n\t\t\t\t$device->audits_ip = '127.0.0.1';\n\t\t\t\tforeach ($ssh_details as $key => $value) {\n\t\t\t\t\tif ( ! empty($value)) {\n\t\t\t\t\t\t$device->$key = $value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// We do not want to attempt to audit using WMI anything that's not a Windows machine\n\t\tif ( ! empty($device->os_group) && $device->os_group !== 'Windows' && $ip_scan->details->wmi_status !== 'false') {\n\t\t\t$ip_scan->details->wmi_status = 'false';\n\t\t\t$log->message = 'Setting WMI to false because we have an os_group that is not Windows.';\n\t\t\t$log->command_output = $device->os_group;\n\t\t\tdiscovery_log($log);\n\t\t}\n\n\t\t// test for working WMI credentials\n\t\tif ($ip_scan->details->wmi_status === 'true') {\n\t\t\t$log->message = 'Testing Windows credentials for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$credentials_windows = windows_credentials($device->ip, $credentials, $log);\n\t\t} else {\n\t\t\t$credentials_windows = false;\n\t\t}\n\n\t\tif ( ! empty($credentials_windows)) {\n\t\t\t$ip_discovered_count = 1;\n\t\t\t// Add this credential sets ID to device->credentials\n\t\t\t// if collection == credentials, not an individual device acssociated credential\n\t\t\tif ($credentials_windows->foreign === 'credentials') {\n\t\t\t\t$device->credentials[] = intval($credentials_windows->id);\n\t\t\t}\n\t\t}\n\n\t\tif ($ip_scan->details->wmi_status === 'true' && $credentials_windows) {\n\t\t\t$windows_details = wmi_audit($device->ip, $credentials_windows, null, $discovery->id);\n\t\t\tif ( ! empty($windows_details)) {\n\t\t\t\t$device->last_seen_by = 'windows';\n\t\t\t\t$device->audits_ip = '127.0.0.1';\n\t\t\t\tforeach ($windows_details as $key => $value) {\n\t\t\t\t\tif ( ! empty($value)) {\n\t\t\t\t\t\t$device->$key = $value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Set our device->credentials to a JSON array of working interger credentials.id\n\t\t$device->credentials = json_encode($device->credentials);\n\n\t\t// Now run our rules to update the device if any match\n\t\t$parameters = new stdClass();\n\t\t$parameters->device = $device;\n\t\t$parameters->discovery_id = intval($discovery->id);\n\t\t$parameters->action = 'return';\n\t\t$device = $CI->m_rules->execute($parameters);\n\n\t\t// If we don't have a device.id, check with our updated device attributes (if any)\n\t\tif (empty($device->id)) {\n\t\t\t$parameters = new stdCLass();\n\t\t\t$parameters->details = $device;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$parameters->match = $discovery->other->match;\n\t\t\t$device->id = $CI->m_device->match($parameters);\n\t\t\tif ( ! empty($device->id)) {\n\t\t\t\t$log->system_id = $device->id;\n\t\t\t\t// update the previous log entries with our new system_id\n\t\t\t\t$sql = '/* discoveries_helper::ip_audit::2 */ ' . 'UPDATE discovery_log SET system_id = ' . intval($log->system_id) . ' WHERE discovery_id = ' . $discovery->id . \" and ip = '\" . $device->ip . \"'\";\n\t\t\t\t$log->message = 'Update the previous log entries with the system_id';\n\t\t\t\t$log->command_status = 'notice';\n\t\t\t\t$log->command = $sql;\n\t\t\t\t$command_start = microtime(true);\n\t\t\t\t$query = $CI->db->query($sql);\n\t\t\t\t$command_end = microtime(true);\n\t\t\t\t$log->command_time_to_execute = $command_end - $command_start;\n\t\t\t\tdiscovery_log($log);\n\t\t\t\tunset($log->message, $log->command, $log->command_time_to_execute, $log->command_error_message);\n\t\t\t}\n\t\t}\n\n\t\t// See if we have a Mac Address for the device's IP\n\t\tif ( ! empty($network_interfaces) && empty($device->mac_address)) {\n\t\t\tforeach ($network_interfaces as $interface) {\n\t\t\t\tif ($interface->ip === $device->ip) {\n\t\t\t\t\t$device->mac_address = $interface->mac;\n\t\t\t\t\t$device->subnet = $interface->subnet;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$log->command_status = 'notice';\n\t\tif ( ! empty($device->id)) {\n\t\t\t// UPDATE\n\t\t\t$log->system_id = $device->id;\n\t\t\t$log->message = 'Start of ' . strtoupper($device->last_seen_by) . ' update for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$command_start = microtime(true);\n\t\t\t$CI->m_device->update($device);\n\t\t\t$log->command_time_to_execute = microtime(true) - $command_start;\n\t\t\t$device->ip = ip_address_from_db($device->ip);\n\t\t\t$log->message = 'End of ' . strtoupper($device->last_seen_by) . ' update for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\tunset($log->command_time_to_execute, $log->command_error_message);\n\t\t} else {\n\t\t\t// INSERT\n\t\t\t$log->message = 'Start of ' . strtoupper($device->last_seen_by) . ' insert for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$command_start = microtime(true);\n\t\t\t$device->id = $CI->m_device->insert($device);\n\t\t\t$log->command_time_to_execute = microtime(true) - $command_start;\n\t\t\t$device->ip = ip_address_from_db($device->ip);\n\t\t\t$log->system_id = $device->id;\n\t\t\t$log->message = 'End of ' . strtoupper($device->last_seen_by) . ' insert for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t// update the previous log entries with our new system_id\n\t\t\t$sql = '/* discoveries_helper::ip_audit::3 */ ' . 'UPDATE discovery_log SET system_id = ' . intval($log->system_id) . ' WHERE discovery_id = ' . $discovery->id . \" and ip = '\" . $device->ip . \"'\";\n\t\t\t$command_start = microtime(true);\n\t\t\t$query = $CI->db->query($sql);\n\t\t\t$log->command_time_to_execute = microtime(true) - $command_start;\n\t\t\t$log->message = 'Update the previous log entries with our new system_id';\n\t\t\t$log->command = $CI->db->last_query();\n\t\t\tdiscovery_log($log);\n\t\t\tunset($log->command, $log->command_time_to_execute, $log->command_error_message);\n\t\t}\n\n\t\t// grab some timestamps\n\t\t$device->last_seen = $CI->m_devices_components->read($device->id, 'y', 'system', '', 'last_seen');\n\t\t$device->first_seen = $CI->m_devices_components->read($device->id, 'y', 'system', '', 'first_seen');\n\n\t\t// update any network interfaces retrieved by SNMP\n\t\tif (isset($network_interfaces) && is_array($network_interfaces) && count($network_interfaces) > 0) {\n\t\t\t$log->command_status = 'notice';\n\t\t\t$log->message = 'Processing found network interfaces for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->table = 'network';\n\t\t\t$parameters->details = $device;\n\t\t\t$parameters->input = $network_interfaces;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$CI->m_devices_components->process_component($parameters);\n\t\t}\n\n\t\t// update any ip addresses retrieved by SNMP\n\t\tif ( ! empty($ip) && is_array($ip->item) && count($ip->item) > 0) {\n\t\t\t$log->command_status = 'notice';\n\t\t\t$log->message = 'Processing found ip addresses for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->table = 'ip';\n\t\t\t$parameters->details = $device;\n\t\t\t$parameters->input = $ip->item;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$CI->m_devices_components->process_component($parameters);\n\t\t}\n\n\t\t// create or update the entry in the ip table from non-SNMP data\n\t\t// so our 'networks' endpoint and functions can find the device\n\t\tif (empty($ip->item)) {\n\t\t\t$log->command_status = 'notice';\n\t\t\t$log->message = 'Processing found ip addresses (non-snmp) for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$item = new stdClass();\n\t\t\t$item->system_id = $device->id;\n\t\t\t$item->ip = $device->ip;\n\t\t\t$item->version = 4;\n\t\t\t$item->mac = '';\n\t\t\tif ( ! empty($device->mac_address)) {\n\t\t\t\t$item->mac = (string)strtolower($device->mac_address);\n\t\t\t}\n\t\t\tif ( ! empty($discovery->other->subnet) && strpos($discovery->other->subnet, '/') !== false) {\n\t\t\t\t$network_details = network_details($discovery->other->subnet);\n\t\t\t\t$item->netmask = $network_details->netmask;\n\t\t\t\t$item->cidr = $network_details->network_slash;\n\t\t\t\t$item->network = $discovery->other->subnet;\n\t\t\t} else {\n\t\t\t\t$network_details = explode('.', $device->ip);\n\t\t\t\t$item->netmask = '255.255.255.0';\n\t\t\t\t$item->cidr = '24';\n\t\t\t\t$item->network = $network_details[0] . '.' .  $network_details[1] . '.' .  $network_details[2] . '.0/24';\n\t\t\t}\n\t\t\t// new special routine as we may already have IPs (from a real audit) but not this particular\n\t\t\t// discovery run, so we don't want to remove these esiting IPs. Special function for this.\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$parameters->device = $device;\n\t\t\t$parameters->ip = $item;\n\t\t\t$CI->m_devices_components->nmap_ip($parameters);\n\t\t\tunset($item);\n\t\t}\n\n\t\t// finish off with updating any network IPs that don't have a matching interface\n\t\t$CI->m_devices_components->update_missing_interfaces($device->id);\n\n\t\t// insert any modules from SNMP\n\t\tif (isset($modules) && is_array($modules) && count($modules) > 0) {\n\t\t\t$log->command_status = 'notice';\n\t\t\t$log->message = 'Processing found modules for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->table = 'module';\n\t\t\t$parameters->details = $device;\n\t\t\t$parameters->input = $modules;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$CI->m_devices_components->process_component($parameters);\n\t\t}\n\n\t\t// insert any found virtual machines from SNMP\n\t\tif (isset($guests) && is_array($guests) && count($guests) > 0) {\n\t\t\t$log->command_status = 'notice';\n\t\t\t$log->message = 'Processing found VMs for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->table = 'vm';\n\t\t\t$parameters->details = $device;\n\t\t\t$parameters->input = $guests;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$CI->m_devices_components->process_component($parameters);\n\t\t}\n\n\t\t// insert any found routes from SNMP\n\t\tif (isset($routes) && is_array($routes) && count($routes) > 0) {\n\t\t\t$log->command_status = 'notice';\n\t\t\t$log->message = 'Processing found routes for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->table = 'route';\n\t\t\t$parameters->details = $device;\n\t\t\t$parameters->input = $routes;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$CI->m_devices_components->process_component($parameters);\n\t\t}\n\n\t\t// process and store the Nmap data\n\t\t$nmap_result = array();\n\t\tforeach (explode(',', $ip_scan->details->nmap_ports) as $port) {\n\t\t\t$temp = explode('/', $port);\n\t\t\t$nmap_item = new stdClass();\n\t\t\t$nmap_item->ip = (string)$device->ip;\n\t\t\t$nmap_item->port = $temp[0];\n\t\t\t$nmap_item->protocol = $temp[1];\n\t\t\t$nmap_item->program = $temp[2];\n\t\t\tif ( ! empty($nmap_item->port)) {\n\t\t\t\t$nmap_result[] = $nmap_item;\n\t\t\t}\n\t\t\tunset($nmap_item);\n\t\t\tunset($temp);\n\t\t}\n\t\tif (count($nmap_result) > 0) {\n\t\t\t$log->command_status = 'notice';\n\t\t\t$log->message = 'Processing Nmap ports for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->table = 'nmap';\n\t\t\t$parameters->details = $device;\n\t\t\t$parameters->input = $nmap_result;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$CI->m_devices_components->process_component($parameters);\n\t\t}\n\n\t\t// Now run our rules to update the device if any match\n\t\t$parameters = new stdClass();\n\t\t$parameters->id = intval($device->id);\n\t\t$parameters->discovery_id = intval($discovery->id);\n\t\t$parameters->ip = $device->ip;\n\t\t$parameters->action = 'update';\n\t\t$CI->m_rules->execute($parameters);\n\n\t\tif (empty($credentials_windows) && empty($credentials_ssh) && empty($credentials_snmp)) {\n\t\t\tif ($ip_scan->details->snmp_status === 'true' OR $ip_scan->details->ssh_status === 'true' OR $ip_scan->details->wmi_status === 'true') {\n\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t$log->severity = 5;\n\t\t\t\t$log->message = 'No valid credentials for ' . $device->ip;\n\t\t\t\tdiscovery_log($log);\n\t\t\t} else {\n\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t$log->severity = 5;\n\t\t\t\t$log->message = 'No management protocols for ' . $device->ip;\n\t\t\t\tdiscovery_log($log);\n\t\t\t}\n\t\t}\n\n\t\t$log->severity = 7;\n\t\t$log->message = '';\n\t\t$log->command = '';\n\t\t$log->command_output = '';\n\t\t$log->command_time_to_execute = '';\n\t\t$log->command_status = 'notice';\n\n\t\t// insert a blank to indicate we're finished this part of the discovery\n\t\t// if required, the audit scripts will insert their own audit logs\n\t\t$CI->m_audit_log->update('debug', '', $device->id, $device->last_seen);\n\n\t\tif ( ! empty($device->type)) {\n\t\t\t$log->message = \"At IP {$device->ip}, discovery found a device of type '{$device->type}'.\";\n\t\t} else {\n\t\t\t$log->message = \"At IP {$device->ip}, discovery found an unknown device.\";\n\t\t}\n\t\tdiscovery_log($log);\n\n\t\t// NOTE - The log helper will increase the count in discoveries.ip_discovered_count for us because Collector / Server\n\t\t//      - It will match on the message string, so don't change without also changing log_helper\n\t\tif ( ! empty($ip_discovered_count)) {\n\t\t\t$log->message = 'Discovered device at ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t}\n\n\t\t$script_name = '';\n\t\tif ( ! empty($credentials_windows) OR ! empty($credentials_ssh)) {\n\t\t\t$temp = $CI->m_scripts->build(strtolower($device->os_group));\n\t\t\tif (empty($temp)) {\n\t\t\t\t$log->message = 'Could not retrieve audit script for ' . strtolower($device->os_group) . ', check system log for details.';\n\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t$log->severity = 4;\n\t\t\t\tdiscovery_log($log);\n\t\t\t\t$log->command_status = 'notice';\n\t\t\t\t$log->severity = 7;\n\t\t\t} else if (is_array($temp)) {\n\t\t\t\t$audit_script = $temp[0];\n\t\t\t\t$script_name = $temp[1];\n\t\t\t}\n\t\t}\n\n\t\t// Audit Windows using script\n\t\tif ($ip_scan->details->wmi_status === 'true' && ! empty($credentials_windows) && ! empty($audit_script)) {\n\t\t\t// We do not support auditing windows using the script over SSH at this time\n\t\t\t$ip_scan->details->ssh_status = 'false';\n\t\t\t$log->message = 'Starting windows script audit for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t$destination = 'audit_windows.vbs';\n\t\t\t$output = false;\n\t\t\tif (php_uname('s') === 'Windows NT' && ! empty($CI->config->config['discovery_use_vintage_service']) && $CI->config->config['discovery_use_vintage_service'] === 'y') {\n\t\t\t\t// Windows Server (likely) running on the LocalSystem account.\n\t\t\t\t// We cannot copy the audit script to the target and then run it,\n\t\t\t\t// We _must_ run the script locally and use $device->ip as the script target\n\t\t\t\t// We will loose the ability to retrieve certain items like files, netstat, tasks, etc\n\t\t\t\t$log->message = 'Running discovery the old way using the code for Apache service account.';\n\t\t\t\tdiscovery_log($log);\n\t\t\t\tif (strpos($credentials_windows->credentials->password, '\"') !== false OR  strpos($credentials_windows->credentials->username, '\"') !== false) {\n\t\t\t\t\t// cscript cannot parse an arguement containing a \"\n\t\t\t\t\t$log->message = 'Incompatible credentials for audit script. Cannot use \" (double quotes) in a wscript command line attribute.';\n\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\t$log->severity = 4;\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t$log->command_status = 'notice';\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t} else {\n\t\t\t\t\t$username = $credentials_windows->credentials->username;\n\t\t\t\t\t$temp = explode('@', $username);\n\t\t\t\t\t$username = $temp[0];\n\t\t\t\t\tif (count($temp) > 1) {\n\t\t\t\t\t\t$domain = $temp[1] . '\\\\';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$domain = '';\n\t\t\t\t\t}\n\t\t\t\t\tunset($temp);\n\t\t\t\t\t$command_string = '%comspec% /c start /b cscript ' . $audit_script . ' strcomputer=' . $device->ip . ' submit_online=n create_file=w struser=' . $domain . $username . ' strpass=' . $credentials_windows->credentials->password . ' debugging=0 system_id=' . $device->id . ' last_seen_by=audit_wmi discovery_id=' . $discovery->id;\n\t\t\t\t\t$log->command = '%comspec% /c start /b cscript ' . $audit_script . ' strcomputer=' . $device->ip . ' submit_online=n create_file=w struser=' . $domain . $username . ' strpass=****** debugging=0 system_id=' . $device->id . ' last_seen_by=audit_wmi discovery_id=' . $discovery->id;\n\t\t\t\t\t$command_start = microtime(true);\n\t\t\t\t\texec($command_string, $output, $return_var);\n\t\t\t\t\t$command_end = microtime(true);\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t$log->command_time_to_execute = $command_end - $command_start;\n\t\t\t\t\t$log->message = 'Successful attempt to run audit_windows.vbs for ' . $device->ip;\n\t\t\t\t\t$log->command_status = 'success';\n\t\t\t\t\tif ($return_var !== '0') {\n\t\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\t\t$log->message = 'Failed attempt to run audit_windows.vbs for ' . $device->ip;\n\t\t\t\t\t\t$log->severity = 4;\n\t\t\t\t\t}\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\tif (empty($output)) {\n\t\t\t\t\t\t$log->severity = 3;\n\t\t\t\t\t\t$log->command_time_to_execute = '';\n\t\t\t\t\t\t$log->message = 'No script output from ' . $device->ip . '. Cannot retrieve audit result.';\n\t\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Unix or Windows default - Remotely run script on target device\n\t\t\t\t// Copy the audit script to admin$\n\t\t\t\t$copy = false;\n\t\t\t\t$copy = copy_to_windows($device->ip, $credentials_windows, '\\\\admin$', $audit_script, 'audit_windows.vbs', $log);\n\t\t\t\tif ($copy) {\n\t\t\t\t\t$command = 'cscript ' . $device->install_dir . '\\\\audit_windows.vbs submit_online=n create_file=w debugging=0 self_delete=y last_seen_by=audit_wmi system_id=' . $device->id . ' discovery_id=' . $discovery->id;\n\t\t\t\t\t$output = execute_windows($device->ip, $credentials_windows, $command, $log);\n\t\t\t\t\tif (empty($output)) {\n\t\t\t\t\t\t$log->severity = 3;\n\t\t\t\t\t\t$log->command_time_to_execute = '';\n\t\t\t\t\t\t$log->message = 'No script output from ' . $device->ip . '. Cannot retrieve audit result.';\n\t\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$log->severity = 3;\n\t\t\t\t\t$log->command_time_to_execute = '';\n\t\t\t\t\t$log->message = 'Could not copy audit script to ' . $device->ip;\n\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$audit_file = false;\n\t\t\tif ( ! empty($output)) {\n\t\t\t\tforeach ($output as $line) {\n\t\t\t\t\tif (strpos($line, 'File ') !== false) {\n\t\t\t\t\t\t$audit_file = trim(str_replace('File ', '', $line));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( ! empty($audit_file) && ! empty($output)) {        \t\t\n\t\t\t\t$copy = false;\n\t\t\t\t$temp = explode('\\\\', $audit_file);\n\t\t\t\t$destination = $filepath . '/scripts/' . end($temp);\n\t\t\t\tif (php_uname('s') === 'Windows NT') {\n\t\t\t\t\t$destination = $filepath . '\\\\scripts\\\\' . end($temp);\n\t\t\t\t}\n\t\t\t\tif (php_uname('s') === 'Windows NT' && exec('whoami') === 'nt authority\\system' && ! empty($CI->config->config['discovery_use_vintage_service']) && $CI->config->config['discovery_use_vintage_service'] === 'y') {\n\t\t\t\t\tif (rename($audit_file, $destination)) {\n\t\t\t\t\t\t$copy = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$copy = copy_from_windows($device->ip, $credentials_windows, end($temp), $destination, $log);\n\t\t\t\t}\n\t\t\t\tif ($copy === true) {\n\t\t\t\t\t$audit_result = file_get_contents($destination);\n\t\t\t\t\tunlink($destination);\n\t\t\t\t\tif (empty($audit_result)) {\n\t\t\t\t\t\t$log->severity = 3;\n\t\t\t\t\t\t$log->command_time_to_execute = '';\n\t\t\t\t\t\t$log->message = 'Could not open audit result on localhost for ' . $device->ip . '. Cannot process audit result.';\n\t\t\t\t\t\t$log->command_output = $destination;\n\t\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$ip_audited_count = 1;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$log->severity = 3;\n\t\t\t\t\t$log->command_time_to_execute = '';\n\t\t\t\t\t$log->message = 'Could not copy audit result file to localhost for ' . $device->ip . '. Cannot retrieve audit result.';\n\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t}\n\t\t\t\tif (php_uname('s') === 'Windows NT' && exec('whoami') === 'nt authority\\system' && ! empty($CI->config->config['discovery_use_vintage_service']) && $CI->config->config['discovery_use_vintage_service'] === 'y') {\n\t\t\t\t\t// no need to delete the remote file\n\t\t\t\t} else {\n\t\t\t\t\t// delete the remote audit result\n\t\t\t\t\t$parameters = new stdClass();\n\t\t\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t\t\t$parameters->ip = $device->ip;\n\t\t\t\t\t$parameters->share = 'admin$';\n\t\t\t\t\t$parameters->file = end($temp);\n\t\t\t\t\t$parameters->credentials = $credentials_windows;\n\t\t\t\t\tdelete_windows_result($parameters);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$log->severity = 3;\n\t\t\t\t$log->command_time_to_execute = '';\n\t\t\t\t$log->message = 'Could not find audit result path in script output from ' . $device->ip . '. Cannot retrieve audit result.';\n\t\t\t\t$log->command_status = 'fail';\n\t\t\t\tdiscovery_log($log);\n\t\t\t\t$log->severity = 7;\n\t\t\t}\n\t\t}\n\n\n\t\t$log->message = '';\n\t\t$log->command = '';\n\t\t$log->command_output = '';\n\t\t$log->command_status = 'notice';\n\t\t$log->severity = 7;\n\t\t$log->command_time_to_execute = '';\n\n\t\tif ($device->os_family === 'DD-WRT' OR $device->os_family === 'LEDE') {\n\t\t\t$log->message = \"IP {$device->ip} is running {$device->os_family}, which will not run our audit_linux.sh script, skipping.\";\n\t\t\tdiscovery_log($log);\n\t\t}\n\n\t\t// Audit via SSH\n\t\tif ($ip_scan->details->ssh_status === 'true' && $device->os_family !== 'DD-WRT' && $device->os_family !== 'LEDE' && ! empty($credentials_ssh) && ! empty($audit_script)) {\n\t\t\t$result = '';\n\t\t\t$log->message = 'Starting SSH audit script for ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t\t// copy the audit script to the target ip\n\t\t\t$destination = $CI->config->config['discovery_linux_script_directory'];\n\t\t\tif (substr($destination, -1) !== '/') {\n\t\t\t\t$destination .= '/';\n\t\t\t}\n\t\t\t$destination .= $script_name;\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->ip = $device->ip;\n\t\t\t$parameters->credentials = $credentials_ssh;\n\t\t\t$parameters->source = $audit_script;\n\t\t\t$parameters->destination = $destination;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$parameters->ssh_port = $ip_scan->details->ssh_port;\n\t\t\t$temp = scp($parameters);\n\t\t\tif ( ! $temp) {\n\t\t\t\t$audit_script = '';\n\t\t\t\t$log->severity = 3;\n\t\t\t\t$log->message = 'Could not SCP audit script to ' . $device->ip . ' at ' . $destination;\n\t\t\t\t$log->command_status = 'fail';\n\t\t\t\tdiscovery_log($log);\n\t\t\t\t$log->severity = 7;\n\t\t\t\t$log->message = '';\n\t\t\t\t$log->command_status = 'notice';\n\t\t\t} else {\n\t\t\t\t// Successfully copied the audit script, now chmod it\n\t\t\t\t$command = 'chmod ' . $CI->config->config['discovery_linux_script_permissions'] . ' ' . $destination;\n\t\t\t\t// No use testing for a result as a chmod produces no output\n\t\t\t\t$parameters = new stdClass();\n\t\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t\t$parameters->ip = $device->ip;\n\t\t\t\t$parameters->credentials = $credentials_ssh;\n\t\t\t\t$parameters->command = $command;\n\t\t\t\t$parameters->ssh_port = $ip_scan->details->ssh_port;\n\t\t\t\t$test = ssh_command($parameters);\n\t\t\t\tif ($test === false) {\n\t\t\t\t\t$log->severity = 3;\n\t\t\t\t\t$log->message = 'Could not chmod script on ' . $device->ip;\n\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t$log->message = '';\n\t\t\t\t\t$log->command_status = 'notice';\n\t\t\t\t\t$audit_script = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\tunset($destination);\n\t\t\tif ($audit_script !== '') {\n\t\t\t\t$command = $CI->config->config['discovery_linux_script_directory'].$script_name.' submit_online=n create_file=y debugging=1 self_delete=y system_id='.$device->id.' last_seen_by=audit_ssh discovery_id='.$discovery->id;\n\t\t\t\t$log->message = 'Running audit using ' . $credentials_ssh->credentials->username . '.';\n\t\t\t\t$log->command_output = '';\n\t\t\t\t$log->command_status = 'notice';\n\t\t\t\tif ($credentials_ssh->credentials->username === 'root') {\n\t\t\t\t\t$log->message = 'Running audit using root user.';\n\t\t\t\t} else if ( ! empty($device->which_sudo) && $device->use_sudo) {\n\t\t\t\t\t$command = \"{$device->which_sudo} \" . $command;\n\t\t\t\t\t$log->message = 'Running audit using ' .  $credentials_ssh->credentials->username . ' with sudo, as per config.';\n\t\t\t\t} else if ( ! empty($device->which_sudo) && ! $device->use_sudo) {\n\t\t\t\t\t$log->message = 'Running audit using ' .  $credentials_ssh->credentials->username . ' without sudo, as sudo attempt failed.';\n\t\t\t\t} else if (empty($device->which_sudo)) {\n\t\t\t\t\t$log->message = 'Running audit using ' . $credentials_ssh->credentials->username . ' as sudo not present.';\n\t\t\t\t}\n\t\t\t\t$log->command = $command;\n\t\t\t\tdiscovery_log($log);\n\t\t\t\t$parameters = new stdClass();\n\t\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t\t$parameters->ip = $device->ip;\n\t\t\t\t$parameters->credentials = $credentials_ssh;\n\t\t\t\t$parameters->command = $command;\n\t\t\t\t$parameters->ssh_port = $ip_scan->details->ssh_port;\n\t\t\t\t$result = ssh_command($parameters);\n\t\t\t} else {\n\n\t\t\t\t// $log->severity = 3;\n\t\t\t\t// $log->message = 'No audit script for ' . $device->ip;\n\t\t\t\t// $log->command_status = 'fail';\n\t\t\t\t// discovery_log($log);\n\t\t\t\t// $log->severity = 7;\n\t\t\t\t// $log->message = '';\n\t\t\t\t// $log->command_status = 'notice';\n\n\t\t\t}\n\t\t\t$audit_result = '';\n\t\t\tif ($audit_script !== '' && ! empty($result) && gettype($result) === 'array') {\n\t\t\t\t$audit_file = '';\n\t\t\t\tforeach ($result as $line) {\n\t\t\t\t\tif (strpos($line, 'File  ') !== false) {\n\t\t\t\t\t\t$audit_file = $line;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ($audit_file === '') {\n\t\t\t\t\t$log->severity = 5;\n\t\t\t\t\t$log->message = 'No audit file returned in output.';\n\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t$log->message = '';\n\t\t\t\t\t$log->command_status = 'notice';\n\t\t\t\t} else {\n\t\t\t\t\t$audit_file = trim(str_replace('File  ', '', $audit_file));\n\t\t\t\t\tif (strpos($audit_file, '//') === 0) {\n\t\t\t\t\t\t$audit_file = str_replace('//', '/', $audit_file);\n\t\t\t\t\t}\n\t\t\t\t\t$temp = explode('/', $audit_file);\n\t\t\t\t\t$destination = $filepath . '/scripts/' . end($temp);\n\t\t\t\t\tif (php_uname('s') === 'Windows NT') {\n\t\t\t\t\t\t$destination = $filepath . '\\\\scripts\\\\' . end($temp);\n\t\t\t\t\t}\n\t\t\t\t\t$parameters = new stdClass();\n\t\t\t\t\t$parameters->ip = $device->ip;\n\t\t\t\t\t$parameters->credentials = $credentials_ssh;\n\t\t\t\t\t$parameters->source = $audit_file;\n\t\t\t\t\t$parameters->destination = $destination;\n\t\t\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t\t\t$parameters->ssh_port = $ip_scan->details->ssh_port;\n\t\t\t\t\t// Allow 20 seconds to copy the file\n\t\t\t\t\t$CI->config->config['discovery_ssh_timeout'] = 20;\n\t\t\t\t\t$temp = scp_get($parameters);\n\t\t\t\t\tif ($temp) {\n\t\t\t\t\t\t$audit_result = file_get_contents($destination);\n\t\t\t\t\t\tif (empty($audit_result)) {\n\t\t\t\t\t\t\t$log->severity = 5;\n\t\t\t\t\t\t\t$log->message = 'Could not read audit result file.';\n\t\t\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\t\t\t$log->command = \"file_get_contents('{$destination}')\";\n\t\t\t\t\t\t\t$log->command_output = '';\n\t\t\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t\t\t$log->message = '';\n\t\t\t\t\t\t\t$log->command_status = 'notice';\n\t\t\t\t\t\t\t$log->command = '';\n\t\t\t\t\t\t\t$log->command_output = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$log->severity = 5;\n\t\t\t\t\t\t$log->message = 'Could not SCP GET to ' . $destination;\n\t\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t\t$log->message = '';\n\t\t\t\t\t\t$log->command_status = 'notice';\n\t\t\t\t\t}\n\t\t\t\t\t// Delete the remote file\n\t\t\t\t\t$command = 'rm ' . $audit_file;\n\t\t\t\t\t$temp = 0;\n\t\t\t\t\tif ( ! empty($device->which_sudo) && ! empty($device->use_sudo) && $credentials_ssh->credentials->username !== 'root') {\n\t\t\t\t\t\t// add sudo, we need this if we have run the audit using sudo\n\t\t\t\t\t\t$command = \"{$device->which_sudo} \" . $command;\n\t\t\t\t\t\t// Allow 10 seconds to run the command\n\t\t\t\t\t\t$temp = intval($CI->config->config['discovery_ssh_timeout']);\n\t\t\t\t\t\t$CI->config->config['discovery_ssh_timeout'] = 5;\n\t\t\t\t\t}\n\t\t\t\t\t$parameters = new stdClass();\n\t\t\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t\t\t$parameters->ip = $device->ip;\n\t\t\t\t\t$parameters->credentials = $credentials_ssh;\n\t\t\t\t\t$parameters->command = $command;\n\t\t\t\t\t$parameters->ssh_port = $ip_scan->details->ssh_port;\n\t\t\t\t\tssh_command($parameters);\n\t\t\t\t\tif ($temp > 0) {\n\t\t\t\t\t\t$CI->config->config['discovery_ssh_timeout'] = $temp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Delete the local audit script if it's not a default script\n\t\tif ( ! empty($audit_script) && strpos($audit_script, 'scripts') !== false) {\n\t\t\t$log->severity = 7;\n\t\t\t$log->message = 'Attempt to delete temp audit script succeeded';\n\t\t\t$log->command_status = 'notice';\n\t\t\t$log->command = \"unlink('\" . $audit_script .\"')\";\n\t\t\ttry {\n\t\t\t\tunlink($audit_script);\n\t\t\t} catch (Exception $error) {\n\t\t\t\t$log->severity = 4;\n\t\t\t\t$log->message = 'Could not delete temp audit script';\n\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t$log->command_output = json_encode($error);\n\t\t\t}\n\t\t\tdiscovery_log($log);\n\t\t\t$log->severity = 7;\n\t\t\t$log->message = '';\n\t\t\t$log->command_status = 'notice';\n\t\t\t$log->command = '';\n\t\t}\n\n\t\t$audit = false;\n\t\tif ( ! empty($audit_result)) {\n\t\t\t$log->message = 'Converting audit result';\n\t\t\tdiscovery_log($log);\n\t\t\t$audit_result = str_replace('data=<?xml version=\"1.0\" encoding=\"UTF-8\"?>', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>', $audit_result);\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->input = $audit_result;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$parameters->ip = $device->ip;\n\t\t\t$audit = audit_convert($parameters);\n\t\t\tif ( ! $audit) {\n\t\t\t\t$log->severity = 4;\n\t\t\t\t$log->message = 'Could not convert audit result from XML.';\n\t\t\t\t$log->command_status = 'fail';\n\t\t\t\tdiscovery_log($log);\n\t\t\t\t$log->severity = 7;\n\t\t\t\t$log->message = '';\n\t\t\t\t$log->command_status = 'notice';\n\t\t\t} else {\n\t\t\t\t$ip_audited_count = 1;\n\t\t\t}\n\t\t}\n\n\t\t// Delete the local audit result file\n\t\tif ( ! empty($audit_result)) {\n\t\t\tif ($audit) {\n\t\t\t\tif ( ! empty($destination)) {\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t$log->message = 'Delete audit result from filesystem.';\n\t\t\t\t\t$log->command_status = 'success';\n\t\t\t\t\t$log->command = \"unlink('\" . $destination . \"')\";\n\t\t\t\t\t$log->command_output = '';\n\t\t\t\t\ttry {\n\t\t\t\t\t\tunlink($destination);\n\t\t\t\t\t} catch (Exception $error) {\n\t\t\t\t\t\t$log->severity = 4;\n\t\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\t\t$log->command_output = json_encode($error);\n\t\t\t\t\t}\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$log->severity = 5;\n\t\t\t\t$log->message = \"Audit result left on filesystem at {$destination}, please check.\";\n\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t$log->command = '';\n\t\t\t\t$log->command_output = '';\n\t\t\t\tdiscovery_log($log);\n\t\t\t}\n\t\t}\n\t\t$log->severity = 7;\n\t\t$log->message = '';\n\t\t$log->command_status = 'notice';\n\t\t$log->command = '';\n\t\t$log->command_output = '';\n\n\t\tif ($audit) {\n\t\t\t$log->message = 'Formatting system section of audit result';\n\t\t\tdiscovery_log($log);\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$parameters->input = $audit->system;\n\t\t\t$parameters->ip = $device->ip;\n\t\t\t$audit->system = audit_format_system($parameters);\n\t\t\t// We don't care what the audit result says is the \"ip\", we KNOW it's the IP we just used to discover this device\n\t\t\t$audit->system->ip = $device->ip;\n\t\t}\n\n\t\tif ($audit) {\n\t\t\t// Run our rules to update the device attributes\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->discovery_id = intval($discovery->id);\n\t\t\t$parameters->ip = $device->ip;\n\t\t\t$parameters->action = 'return';\n\t\t\t$parameters->device = $audit->system;\n\t\t\t$CI->m_rules->execute($parameters);\n\t\t} else {\n\t\t\t$parameters = new stdClass();\n\t\t\t$parameters->id = intval($device->id);\n\t\t\t$parameters->discovery_id = intval($discovery->id);\n\t\t\t$parameters->ip = $device->ip;\n\t\t\t$parameters->action = 'update';\n\t\t\t$CI->m_rules->execute($parameters);\n\t\t}\n\n\t\tif ($audit) {\n\t\t\t$log->message = 'Matching device from audit result';\n\t\t\tdiscovery_log($log);\n\t\t\t$parameters = new stdCLass();\n\t\t\t$parameters->details = $audit->system;\n\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t$parameters->match = $discovery->other->match;\n\t\t\t$audit_device = $CI->m_device->match($parameters);\n\t\t\t$audit->system->discovery_id = $discovery->id;\n\t\t\tif ( ! empty($audit->system->id)) {\n\t\t\t\t$log->system_id = $audit->system->id;\n\t\t\t}\n\t\t\tif (empty($audit_device) && ! empty($audit->system->id)) {\n\t\t\t\t$audit_device = intval($audit->system->id);\n\t\t\t}\n\t\t\tif ( ! empty($audit_device) && ! empty($audit->system->id) && $audit_device !== $audit->system->id) {\n\t\t\t\t// We delete this original system as likely with limited data (from\n\t\t\t\t// nmap and/or snmp and/or SSH) we couldn't match an existing system\n\t\t\t\t// Now we have an actual audit result with plenty of data\n\t\t\t\t// we have found a match and it's not the original\n\t\t\t\t$sql = '/* discoveries_helper::ip_audit */ DELETE FROM system WHERE id = ?';\n\t\t\t\t$query = $CI->db->query($sql, array($audit->system->id));\n\t\t\t\t$log->system_id = $audit_device;\n\t\t\t\t$log->message = 'System Id provided differs from System Id found for ' . $audit->system->hostname;\n\t\t\t\tdiscovery_log($log);\n\t\t\t}\n\t\t\t$audit->system->id = $audit_device;\n\t\t\tif (empty($audit_device)) {\n\t\t\t\t// insert a new system\n\t\t\t\t# Set the device org_id based on this discovery\n\t\t\t\tif ( ! empty($discovery->devices_assigned_to_org)) {\n\t\t\t\t\t$audit->system->org_id = $discovery->devices_assigned_to_org;\n\t\t\t\t}\n\t\t\t\tif ( ! empty($discovery->devices_assigned_to_location)) {\n\t\t\t\t\t$audit->system->org_id = $discovery->devices_assigned_to_location;\n\t\t\t\t}\n\t\t\t\t$audit->system->id = $CI->m_device->insert($audit->system);\n\t\t\t\t$log->message = 'CREATE entry for ' . @$audit->system->name . ' (' . @$audit->system->ip . '), System ID ' . $audit->system->id;\n\t\t\t\tdiscovery_log($log);\n\t\t\t\t$audit->system->original_last_seen = '';\n\t\t\t\t$log->system_id = $audit->system->id;\n\t\t\t} else {\n\t\t\t\t// update an existing system\n\t\t\t\t$log->message = 'UPDATE entry for ' . @$audit->system->name . ' (' . @$audit->system->ip . '), System ID ' . $audit->system->id;\n\t\t\t\tdiscovery_log($log);\n\t\t\t\t$CI->m_device->update($audit->system);\n\t\t\t\t$log->system_id = $audit->system->id;\n\t\t\t}\n\t\t}\n\n\t\t$sql = '/* discoveries_helper::ip_audit */ ' . 'UPDATE `discovery_log` SET system_id = ? WHERE discovery_id = ? and ip = ?';\n\t\t$data = array($log->system_id, $discovery->id, $device->ip);\n\t\t$query = $CI->db->query($sql, $data);\n\n\t\tif ($audit) {\n\t\t\t$script_version = '';\n\t\t\tif ( ! empty($audit->system->script_version)) {\n\t\t\t\t$script_version = $audit->system->script_version;\n\t\t\t}\n\t\t\t$CI->m_audit_log->create($audit->system->id, '', $audit->system->last_seen_by, $audit->system->audits_ip, '', '', $audit->system->last_seen, $script_version);\n\t\t}\n\n\t\tif ($audit) {\n\t\t\tforeach ($audit as $key => $value) {\n\t\t\t\tif ($key !== 'system' && $key !== 'audit_wmi_fail' && $key !== 'dns') {\n\t\t\t\t\t$parameters = new stdClass();\n\t\t\t\t\t$parameters->table = $key;\n\t\t\t\t\t$parameters->details = $audit->system;\n\t\t\t\t\t$parameters->input = $value;\n\t\t\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t\t\t$CI->m_devices_components->process_component($parameters);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($audit) {\n\t\t\tif ( ! empty($audit->audit_wmi_fail)) {\n\t\t\t\t$CI->m_audit_log->update('debug', 'audit_wmi_fail', $audit->system->id, $audit->system->last_seen);\n\t\t\t\t$CI->m_audit_log->update('wmi_fails', $audit->audit_wmi_fail, $audit->system->id, $audit->system->last_seen);\n\t\t\t}\n\t\t}\n\n\t\t// Generate any DNS entries required - only if a collector or the audit is NOT from a collector\n\t\tif ( ! empty($CI->config->config['servers']) OR empty($audit->system->collector_uuid)) {\n\t\t\tif ( ! empty($audit->system->id)) {\n\t\t\t\t$dns_entries = $CI->m_devices_components->create_dns_entries((int)$audit->system->id);\n\t\t\t} else if ( ! empty($device->id)) {\n\t\t\t\t$dns_entries = $CI->m_devices_components->create_dns_entries((int)$device->id);\n\t\t\t}\n\t\t\tif ( ! empty($audit->dns) && count($audit->dns) > 0) {\n\t\t\t\tforeach ($audit->dns as $item) {\n\t\t\t\t\tif ( ! empty($item->ip) && ! empty($item->name) && ! empty($item->fqdn)) {\n\t\t\t\t\t\t$dns_entries[] = $item;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tunset($item);\n\t\t\tif ( ! empty($dns_entries) && count($dns_entries) > 0) {\n\t\t\t\t$parameters = new stdClass();\n\t\t\t\t$parameters->table = 'dns';\n\t\t\t\t$parameters->input = $dns_entries;\n\t\t\t\t$parameters->discovery_id = $discovery->id;\n\t\t\t\tif ( ! empty($audit->system->id)) {\n\t\t\t\t\t$parameters->details = $audit->system;\n\t\t\t\t\t$CI->m_devices_components->process_component($parameters);\n\t\t\t\t} else if ( ! empty($device->id)) {\n\t\t\t\t\t$parameters->details = $device;\n\t\t\t\t\t$CI->m_devices_components->process_component($parameters);\n\t\t\t\t}\n\t\t\t}\n\t\t\tunset($dns_entries);\n\t\t}\n\n\t\t// If we are configured as a collector, forward the information to the server\n\t\tif ($CI->config->config['servers'] !== '') {\n\t\t\t$server = json_decode($CI->config->config['servers']);\n\t\t\t$log->message = 'Sending result to ' . $server->host . ' because this server is a collector.';\n\t\t\tdiscovery_log($log);\n\n\t\t\t$device_json = '';\n\t\t\tif ( ! empty($device->id)) {\n\t\t\t\t$device_json = new stdClass();\n\t\t\t\t$device_json->system = new stdClass();\n\t\t\t\tforeach ($device as $key => $value) {\n\t\t\t\t\tif ($key !== 'id' && ! empty($value)) {\n\t\t\t\t\t\t$device_json->system->{$key} = $value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$device_json->system->collector_uuid = $CI->config->config['uuid'];\n\t\t\t\tif (count($nmap_result) > 0) {\n\t\t\t\t\t$device_json->nmap = new stdClass();\n\t\t\t\t\t$device_json->nmap = array();\n\t\t\t\t\tforeach ($nmap_result as $item) {\n\t\t\t\t\t\t$device_json->nmap[] = $item;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($guests) && count($guests) > 0) {\n\t\t\t\t\t$device_json->vm = new stdClass();\n\t\t\t\t\t$device_json->vm = array();\n\t\t\t\t\tforeach ($guests as $item) {\n\t\t\t\t\t\t$device_json->vm[] = $item;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($modules) && count($modules) > 0) {\n\t\t\t\t\t$device_json->module = new stdClass();\n\t\t\t\t\t$device_json->module = array();\n\t\t\t\t\tforeach ($modules as $item) {\n\t\t\t\t\t\t$device_json->module[] = $item;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($ip) && count($ip) > 0) {\n\t\t\t\t\t$device_json->ip = new stdClass();\n\t\t\t\t\t$device_json->ip = array();\n\t\t\t\t\tforeach ($ip->item as $item) {\n\t\t\t\t\t\t$device_json->ip[] = $item;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($network_interfaces) && is_array($network_interfaces) && count($network_interfaces) > 0) {\n\t\t\t\t\t$device_json->network = new stdClass();\n\t\t\t\t\t$device_json->network = array();\n\t\t\t\t\tforeach ($network_interfaces as $item) {\n\t\t\t\t\t\t$device_json->network[] = $item;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tunset($device_json->system->id);\n\t\t\t\tunset($device_json->system->first_seen);\n\t\t\t\t$device_json = json_encode($device_json);\n\t\t\t}\n\n\t\t\tif ( ! empty($audit->system->id)) {\n\t\t\t\tunset($audit->system->id);\n\t\t\t\tunset($audit->system->original_last_seen_by);\n\t\t\t\tunset($audit->system->original_last_seen);\n\t\t\t\tunset($audit->system->first_seen);\n\t\t\t\t$audit->system->collector_uuid = $CI->config->config['uuid'];\n\t\t\t\t$device_json = json_encode($audit);\n\t\t\t}\n\n\t\t\t$url = $server->host . $server->community . '/index.php/input/devices';\n\t\t\t$data = array('data' => $device_json);\n\t\t\t// We must use the key 'http' even if we send the request to https://...\n\t\t\t$options = array(\n\t\t\t\t'http' => array(\n\t\t\t\t\t'header'  => \"Content-type: application/x-www-form-urlencoded\\r\\n\",\n\t\t\t\t\t'method'  => 'POST',\n\t\t\t\t\t'content' => http_build_query($data)\n\t\t\t\t)\n\t\t\t);\n\t\t\t$context  = stream_context_create($options);\n\t\t\t$result = file_get_contents($url, false, $context);\n\t\t\tif ($result === false) {\n\t\t\t\t// error\n\t\t\t\t$log->severity = 4;\n\t\t\t\t$log->message = 'Could not send result to ' . $server->host . $server->community . '/index.php/input/devices - please check with your server administrator.';\n\t\t\t\tdiscovery_log($log);\n\t\t\t\t$log->severity = 7;\n\t\t\t} else {\n\t\t\t\t// success\n\t\t\t\t$log->severity = 7;\n\t\t\t\t$log->message = 'Result sent to ' . $server->host . '.';\n\t\t\t\tdiscovery_log($log);\n\t\t\t}\n\t\t}\n\n\t\t// NOTE - The log helper will increase the count in discoveries.ip_discovered_count for us because Collector / Server\n\t\t//      - It will match on the message string, so don't change without also changing log_helper\n\t\tif ( ! empty($ip_audited_count)) {\n\t\t\t$log->message = 'Audited device at ' . $device->ip;\n\t\t\tdiscovery_log($log);\n\t\t}\n\n\t\t$CI->m_device->set_identification($device->id);\n\n\t\t$log->command = 'Peak Memory';\n\t\t$log->command_output = round((memory_get_peak_usage(false)/1024/1024), 3) . ' MiB';\n\t\t$log->command_status = 'device complete';\n\t\t$log->command_time_to_execute = microtime(true)  - $start;\n\t\t$log->message = 'IP Audit finish on device ' . ip_address_from_db($device->ip);\n\t\t$log->ip = ip_address_from_db($device->ip);\n\t\tdiscovery_log($log);\n\n\t\t// Check if this discovery is complete and set status if so\n\t\t$sql = '/* discoveries_helper::ip_audit */ ' . 'SELECT COUNT(*) AS `count` FROM `discovery_log` WHERE `discovery_id` = ' . intval($discovery->id) . \" AND `command_status` = 'device complete'\";\n\t\t$query = $CI->db->query($sql);\n\t\t$result = $query->result();\n\t\tif ( ! empty($result[0]->count)) {\n\t\t\t$count = intval($result[0]->count);\n\t\t\t$sql = '/* discoveries_helper::ip_audit */ ' . 'SELECT `ip_responding_count` AS `count` FROM `discoveries` WHERE `id` = ' . intval($discovery->id);\n\t\t\t$query = $CI->db->query($sql);\n\t\t\t$result = $query->result();\n\t\t\t$device_count = intval($result[0]->count);\n\t\t\tif ($count === $device_count) {\n\t\t\t\t// NOTE - the log_helper will mark this in the database as complete for us, think Collector / Server\n\t\t\t\t$log->message = 'Discovery has finished.';\n\t\t\t\t$log->command = '';\n\t\t\t\t$log->command_output = '';\n\t\t\t\t$log->command_status = 'finished';\n\t\t\t\t$log->ip = '127.0.0.1';\n\t\t\t\tunset($log->system_id);\n\t\t\t\tdiscovery_log($log);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\nif ( ! function_exists('discover_ad')) {\n\t/**\n\t * [discover_ad description]\n\t * @param  object $queue_item [description]\n\t * @return bool             [description]\n\t */\n\tfunction discover_ad($queue_item = null)\n\t{\n\t\tif (empty($queue_item)) {\n\t\t\treturn false;\n\t\t}\n\t\t$start = microtime(true);\n\t\t$CI = get_instance();\n\t\t$discovery_id = $queue_item->discovery_id;\n\t\t$item = $CI->m_discoveries->read($discovery_id);\n\t\t$discovery = $item[0];\n\t\tunset($item);\n\t\t$log = new stdClass();\n\t\t$log->discovery_id = $discovery_id;\n\t\t$log->command_status = 'start';\n\t\t$log->message = 'Starting discovery for ' . $discovery->attributes->name;\n\t\t$log->ip = '127.0.0.1';\n\t\t$log->severity = 6;\n\t\tdiscovery_log($log);\n\t\t$log->command_status = 'notice';\n\n\t\t$sql = '/* discoveries_helper::discover_ad */ ' . \"UPDATE `discoveries` SET `status` = 'running', `ip_all_count` = 0, `ip_responding_count` = 0, `ip_scanned_count` = 0, `ip_discovered_count` = 0, `ip_audited_count` = 0, `last_run` = NOW() WHERE id = ?\";\n\t\t$data = array($discovery_id);\n\t\t$CI->db->query($sql, $data);\n\n\t\t// We need to get the Org Children of this particular discovery run\n\t\t$orgs = $CI->m_orgs->get_children($discovery->attributes->org_id);\n\t\t$orgs[] = $discovery->attributes->org_id;\n\t\t$orgs = implode(',', $orgs);\n\n\t\t// Stored credential sets\n\t\t$credentials = $CI->m_credentials->collection($orgs);\n\t\t// get the list of subnets from AD\n\t\t// TODO - make the below able to use LDAPS as well as LDAP\n\t\t$ldapuri = 'ldap://' . $discovery->attributes->other->ad_server;\n\t\t$error_reporting = error_reporting();\n\t\terror_reporting(0);\n\t\t$ldapconn = @ldap_connect($ldapuri);\n\t\terror_reporting($error_reporting);\n\t\tunset($error_reporting);\n\t\tif ( ! $ldapconn) {\n\t\t\t// log the failed attempt to connect to AD\n\t\t\t$log->severity = 4;\n\t\t\t$log->details = 'Could not connect to AD ' . $discovery->attributes->other->ad_domain . ' at ' . $discovery->attributes->other->ad_server;\n\t\t\t$log->command_status = 'fail';\n\t\t\tdiscovery_log($log);\n\t\t\treturn false;\n\t\t}\n\t\t// successful connect to AD, now try to bind using the credentials\n\t\tldap_set_option($ldapconn, LDAP_OPT_PROTOCOL_VERSION, 3);\n\t\tldap_set_option($ldapconn, LDAP_OPT_REFERRALS, 0);\n\t\t$bind = false;\n\t\tforeach ($credentials as $credential) {\n\t\t\tif ($credential->attributes->type === 'windows') {\n\t\t\t\tif ($bind = @ldap_bind($ldapconn, $credential->attributes->credentials->username, $credential->attributes->credentials->password)) {\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t$log->message = 'Successful bind to AD using ' . $credential->attributes->name;\n\t\t\t\t\t$log->command_status = 'success';\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t$base_dn = 'CN=Subnets,CN=Sites,CN=Configuration,dc=' . implode(', dc=', explode('.', $discovery->attributes->other->ad_domain));\n\t\t\t\t\t$filter = '(&(objectclass=*))';\n\t\t\t\t\t$justthese = array('distinguishedName', 'name', 'siteobject');\n\t\t\t\t\t$search_result = ldap_search($ldapconn, $base_dn, $filter, $justthese);\n\t\t\t\t\t$info = ldap_get_entries($ldapconn, $search_result);\n\t\t\t\t\tif (empty($info)) {\n\t\t\t\t\t\t$log->message = 'Could not Retrieve subnets from ' . $discovery->attributes->other->ad_domain . ' on ' . $discovery->attributes->other->ad_server . ' using ' . $credential->attributes->name;\n\t\t\t\t\t\t$log->severity = 6;\n\t\t\t\t\t\t$log->command_output = '';\n\t\t\t\t\t\t$log->command_status = 'fail';\n\t\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t\t$log->message = 'Retrieved subnets from ' . $discovery->attributes->other->ad_domain . ' on ' . $discovery->attributes->other->ad_server;\n\t\t\t\t\t\t$log->command_status = 'success';\n\t\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t\t$log->message = 'Could not bind to AD using ' . $credential->attributes->name;\n\t\t\t\t\t$log->command_status = 'warning';\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t$bind = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ( $bind === false OR empty($info)) {\n\t\t\t$log->severity = 5;\n\t\t\t$log->command_status = 'fail';\n\t\t\t$log->message = 'Could not bind to AD ' . $discovery->attributes->other->ad_domain . ' at ' . $discovery->attributes->other->ad_server;\n\t\t\tdiscovery_log($log);\n\t\t\treturn false;\n\t\t}\n\t\tforeach ($info as $subnet) {\n\t\t\t$log->command_status = 'notice';\n\t\t\tif ( ! empty($subnet['name'][0]) && $subnet['name'][0] !== 'Subnets') {\n\t\t\t\tunset($network);\n\t\t\t\t$network = new stdClass();\n\t\t\t\tif ( ! empty($subnet['siteobject'][0])) {\n\t\t\t\t\t$temp = explode(',', $subnet['siteobject'][0]);\n\t\t\t\t\t$temp_name = explode('=', $temp[0]);\n\t\t\t\t\t$name = $temp_name[1] . ' - ';\n\t\t\t\t} else {\n\t\t\t\t\t$name = '';\n\t\t\t\t}\n\t\t\t\t$network->name = $name . $subnet['name'][0];\n\t\t\t\t$network->network = $subnet['name'][0];\n\t\t\t\t$network->org_id = $discovery->attributes->org_id;\n\t\t\t\t$network->description = @$subnet['description'][0];\n\t\t\t\tif ( ! empty($subnet['location'][0])) {\n\t\t\t\t\t$network->description .= ' (' . $subnet['location'][0] . ')';\n\t\t\t\t}\n\t\t\t\t$log->message = 'Upserting network - ' . $network->name;\n\t\t\t\tdiscovery_log($log);\n\t\t\t\t$CI->m_networks->upsert($network);\n\n\t\t\t\t$ad_discovery = new stdClass();\n\t\t\t\t$ad_discovery->name = $network->name;\n\t\t\t\t$ad_discovery->org_id = $discovery->attributes->org_id;\n\t\t\t\t$ad_discovery->type = 'subnet';\n\t\t\t\t$ad_discovery->devices_assigned_to_org = $discovery->attributes->devices_assigned_to_org;\n\t\t\t\t$ad_discovery->devices_assigned_to_location = $discovery->attributes->devices_assigned_to_location;\n\t\t\t\tif (gettype($discovery->attributes->other) === 'string') {\n\t\t\t\t\t$ad_discovery->other = json_decode($discovery->attributes->other);\n\t\t\t\t} else {\n\t\t\t\t\t$ad_discovery->other = $discovery->attributes->other;\n\t\t\t\t}\n\t\t\t\tunset($ad_discovery->other->ad_server);\n\t\t\t\tunset($ad_discovery->other->ad_comain);\n\t\t\t\t$ad_discovery->other->match = new stdClass();\n\t\t\t\t$ad_discovery->other->subnet = $subnet['name'][0];\n\n\t\t\t\t$sql = '/* discoveries_helper::discover_ad */ ' . \"SELECT * FROM discoveries WHERE name = ? AND org_id = ? and description = 'Subnet - \" . $subnet['name'][0] . \"'\";\n\t\t\t\t$query = $CI->db->query($sql, array($ad_discovery->name, intval($discovery->attributes->org_id)));\n\t\t\t\t$result = $query->result();\n\t\t\t\t// TODO - JSON decode this and test the subnet. We have other items stored inside 'other' (nmap options, etc).\n\t\t\t\t$this_id = false;\n\t\t\t\tif (empty($result)) {\n\t\t\t\t\t$log->message = 'Creating and executing discovery on subnet ' . $network->name;\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t$this_id = $CI->m_discoveries->create($ad_discovery);\n\t\t\t\t} else {\n\t\t\t\t\t$this_id = $result[0]->id;\n\t\t\t\t\t$log->message = 'Discovery for ' . $network->name . ' exists, running.';\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t}\n\t\t\t\tif ( ! empty($this_id)) {\n\t\t\t\t\t// put the discovery into the queue\n\t\t\t\t\t$details = new stdClass();\n\t\t\t\t\t$details->name = $network->name;\n\t\t\t\t\t$details->type = 'subnet';\n\t\t\t\t\t$details->org_id =  $discovery->attributes->org_id;\n\t\t\t\t\t$details->discovery_id = $this_id;\n\t\t\t\t\tif ($CI->m_queue->create('subnet', $details)) {\n\t\t\t\t\t\t$log->command_status = 'success';\n\t\t\t\t\t\t$log->message = 'Discovery ' . $network->name . ' placed in queue for execution.';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$log->command_status = 'failed';\n\t\t\t\t\t\t$log->message = 'Discovery ' . $network->name . ' could not be placed 9in the queue. See system log for more details.';\n\t\t\t\t\t\t$log->severity = 4;\n\t\t\t\t\t}\n\t\t\t\t\t$log->command = '';\n\t\t\t\t\t$log->command_time_to_execute = microtime(true) - $start;\n\t\t\t\t\tdiscovery_log($log);\n\t\t\t\t\t$log->severity = 7;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// NOTE - the log_helper will mark this in the database as complete for us, think Collector / Server\n\t\t$log->severity = 6;\n\t\t$log->message = 'Discovery has finished.';\n\t\t$log->command = '';\n\t\t$log->command_output = '';\n\t\t$log->command_status = 'finished';\n\t\t$log->command_time_to_execute = gmdate('H:i:s', intval(microtime(true) - $start));\n\t\t$log->ip = '127.0.0.1';\n\t\tdiscovery_log($log);\n\t\treturn true;\n\t}\n}\n// End of file discoveries_helper.php\n// Location: ./helpers/discoveries_helper.php\n"], "filenames": ["code_igniter/application/helpers/discoveries_helper.php"], "buggy_code_start_loc": [274], "buggy_code_end_loc": [284], "fixing_code_start_loc": [275], "fixing_code_end_loc": [299], "type": "CWE-78", "message": "An issue was discovered in Open-AudIT 3.3.1. There is shell metacharacter injection via attributes to an open-audit/configuration/ URI. An attacker can exploit this by adding an excluded IP address to the global discovery settings (internally called exclude_ip). This exclude_ip value is passed to the exec function in the discoveries_helper.php file (inside the all_ip_list function) without being filtered, which means that the attacker can provide a payload instead of a valid IP address.", "other": {"cve": {"id": "CVE-2020-12078", "sourceIdentifier": "cve@mitre.org", "published": "2020-04-28T14:15:14.203", "lastModified": "2021-07-21T11:39:23.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in Open-AudIT 3.3.1. There is shell metacharacter injection via attributes to an open-audit/configuration/ URI. An attacker can exploit this by adding an excluded IP address to the global discovery settings (internally called exclude_ip). This exclude_ip value is passed to the exec function in the discoveries_helper.php file (inside the all_ip_list function) without being filtered, which means that the attacker can provide a payload instead of a valid IP address."}, {"lang": "es", "value": "Se descubri\u00f3  un problema en Open-AudIT versi\u00f3n 3.3.1. Hay una inyecci\u00f3n de metacaracteres de shell por medio de atributos en un URI open-audit/configuration/. Un atacante puede explotar esto al agregar una direcci\u00f3n IP excluida en la configuraci\u00f3n de descubrimiento global (llamada internamente exclude_ip). Este valor exclude_ip es pasado a la funci\u00f3n exec en el archivo discoveries_helper.php (dentro de la funci\u00f3n all_ip_list) sin ser filtrado, lo que significa que el atacante puede proporcionar una carga \u00fatil en lugar de una direcci\u00f3n IP v\u00e1lida."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:C/I:C/A:C", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 9.0}, "baseSeverity": "HIGH", "exploitabilityScore": 8.0, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:opmantek:open-audit:3.3.1:*:*:*:*:*:*:*", "matchCriteriaId": "E7999860-701B-4389-AD71-48205DE04283"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/157477/Open-AudIT-Professional-3.3.1-Remote-Code-Execution.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "https://gist.github.com/mhaskar/dca62d0f0facc13f6364b8ed88d5a7fd", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/Opmantek/open-audit/commit/6ffc7f9032c55eaa1c37cf5e070809b7211c7e9a", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://shells.systems/open-audit-v3-3-1-remote-command-execution-cve-2020-12078/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Opmantek/open-audit/commit/6ffc7f9032c55eaa1c37cf5e070809b7211c7e9a"}}