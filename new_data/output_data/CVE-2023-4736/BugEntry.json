{"buggy_code": ["\" Vim autoload file for editing compressed files.\n\" Maintainer:\tThe Vim Project <https://github.com/vim/vim>\n\" Last Change:\t2023 Aug 10\n\" Former Maintainer: Bram Moolenaar <Bram@vim.org>\n\n\" These functions are used by the gzip plugin.\n\n\" Function to check that executing \"cmd [-f]\" works.\n\" The result is cached in s:have_\"cmd\" for speed.\nfun s:check(cmd)\n  let name = substitute(a:cmd, '\\(\\S*\\).*', '\\1', '')\n  if !exists(\"s:have_\" . name)\n    let e = executable(name)\n    if e < 0\n      let r = system(name . \" --version\")\n      let e = (r !~ \"not found\" && r != \"\")\n    endif\n    exe \"let s:have_\" . name . \"=\" . e\n  endif\n  exe \"return s:have_\" . name\nendfun\n\n\" Set b:gzip_comp_arg to the gzip argument to be used for compression, based on\n\" the flags in the compressed file.\n\" The only compression methods that can be detected are max speed (-1) and max\n\" compression (-9).\nfun s:set_compression(line)\n  \" get the Compression Method\n  let l:cm = char2nr(a:line[2])\n  \" if it's 8 (DEFLATE), we can check for the compression level\n  if l:cm == 8\n    \" get the eXtra FLags\n    let l:xfl = char2nr(a:line[8])\n    \" max compression\n    if l:xfl == 2\n      let b:gzip_comp_arg = \"-9\"\n    \" min compression\n    elseif l:xfl == 4\n      let b:gzip_comp_arg = \"-1\"\n    endif\n  endif\nendfun\n\n\n\" After reading compressed file: Uncompress text in buffer with \"cmd\"\nfun gzip#read(cmd)\n  \" don't do anything if the cmd is not supported\n  if !s:check(a:cmd)\n    return\n  endif\n\n  \" for gzip check current compression level and set b:gzip_comp_arg.\n  silent! unlet b:gzip_comp_arg\n  if a:cmd[0] == 'g'\n    call s:set_compression(getline(1))\n  endif\n\n  \" make 'patchmode' empty, we don't want a copy of the written file\n  let pm_save = &pm\n  set pm=\n  \" remove 'a' and 'A' from 'cpo' to avoid the alternate file changes\n  let cpo_save = &cpo\n  set cpo-=a cpo-=A\n  \" set 'modifiable'\n  let ma_save = &ma\n  setlocal ma\n  \" set 'write'\n  let write_save = &write\n  set write\n  \" Reset 'foldenable', otherwise line numbers get adjusted.\n  if has(\"folding\")\n    let fen_save = &fen\n    setlocal nofen\n  endif\n\n  \" when filtering the whole buffer, it will become empty\n  let empty = line(\"'[\") == 1 && line(\"']\") == line(\"$\")\n  let tmp = tempname()\n  let tmpe = tmp . \".\" . expand(\"<afile>:e\")\n  if exists('*fnameescape')\n    let tmp_esc = fnameescape(tmp)\n    let tmpe_esc = fnameescape(tmpe)\n  else\n    let tmp_esc = escape(tmp, ' ')\n    let tmpe_esc = escape(tmpe, ' ')\n  endif\n  \" write the just read lines to a temp file \"'[,']w tmp.gz\"\n  execute \"silent '[,']w \" . tmpe_esc\n  \" uncompress the temp file: call system(\"gzip -dn tmp.gz\")\n  call system(a:cmd . \" \" . s:escape(tmpe))\n  if !filereadable(tmp)\n    \" uncompress didn't work!  Keep the compressed file then.\n    echoerr \"Error: Could not read uncompressed file\"\n    let ok = 0\n  else\n    let ok = 1\n    \" delete the compressed lines; remember the line number\n    let l = line(\"'[\") - 1\n    if exists(\":lockmarks\")\n      lockmarks '[,']d _\n    else\n      '[,']d _\n    endif\n    \" read in the uncompressed lines \"'[-1r tmp\"\n    \" Use ++edit if the buffer was empty, keep the 'ff' and 'fenc' options.\n    setlocal nobin\n    if exists(\":lockmarks\")\n      if empty\n\texecute \"silent lockmarks \" . l . \"r ++edit \" . tmp_esc\n      else\n\texecute \"silent lockmarks \" . l . \"r \" . tmp_esc\n      endif\n    else\n      execute \"silent \" . l . \"r \" . tmp_esc\n    endif\n\n    \" if buffer became empty, delete trailing blank line\n    if empty\n      silent $delete _\n      1\n    endif\n    \" delete the temp file and the used buffers\n    call delete(tmp)\n    silent! exe \"bwipe \" . tmp_esc\n    silent! exe \"bwipe \" . tmpe_esc\n  endif\n  \" Store the OK flag, so that we can use it when writing.\n  let b:uncompressOk = ok\n\n  \" Restore saved option values.\n  let &pm = pm_save\n  let &cpo = cpo_save\n  let &l:ma = ma_save\n  let &write = write_save\n  if has(\"folding\")\n    let &l:fen = fen_save\n  endif\n\n  \" When uncompressed the whole buffer, do autocommands\n  if ok && empty\n    if exists('*fnameescape')\n      let fname = fnameescape(expand(\"%:r\"))\n    else\n      let fname = escape(expand(\"%:r\"), \" \\t\\n*?[{`$\\\\%#'\\\"|!<\")\n    endif\n    if &verbose >= 8\n      execute \"doau BufReadPost \" . fname\n    else\n      execute \"silent! doau BufReadPost \" . fname\n    endif\n  endif\nendfun\n\n\" After writing compressed file: Compress written file with \"cmd\"\nfun gzip#write(cmd)\n  if exists('b:uncompressOk') && !b:uncompressOk\n    echomsg \"Not compressing file because uncompress failed; reset b:uncompressOk to compress anyway\"\n  \" don't do anything if the cmd is not supported\n  elseif s:check(a:cmd)\n    \" Rename the file before compressing it.\n    let nm = resolve(expand(\"<afile>\"))\n    let nmt = s:tempname(nm)\n    if rename(nm, nmt) == 0\n      if exists(\"b:gzip_comp_arg\")\n\tcall system(a:cmd . \" \" . b:gzip_comp_arg . \" -- \" . s:escape(nmt))\n      else\n\tcall system(a:cmd . \" -- \" . s:escape(nmt))\n      endif\n      call rename(nmt . \".\" . expand(\"<afile>:e\"), nm)\n    endif\n  endif\nendfun\n\n\" Before appending to compressed file: Uncompress file with \"cmd\"\nfun gzip#appre(cmd)\n  \" don't do anything if the cmd is not supported\n  if s:check(a:cmd)\n    let nm = expand(\"<afile>\")\n\n    \" for gzip check current compression level and set b:gzip_comp_arg.\n    silent! unlet b:gzip_comp_arg\n    if a:cmd[0] == 'g'\n      call s:set_compression(readfile(nm, \"b\", 1)[0])\n    endif\n\n    \" Rename to a weird name to avoid the risk of overwriting another file\n    let nmt = expand(\"<afile>:p:h\") . \"/X~=@l9q5\"\n    let nmte = nmt . \".\" . expand(\"<afile>:e\")\n    if rename(nm, nmte) == 0\n      if &patchmode != \"\" && getfsize(nm . &patchmode) == -1\n\t\" Create patchmode file by creating the decompressed file new\n\tcall system(a:cmd . \" -c -- \" . s:escape(nmte) . \" > \" . s:escape(nmt))\n\tcall rename(nmte, nm . &patchmode)\n      else\n\tcall system(a:cmd . \" -- \" . s:escape(nmte))\n      endif\n      call rename(nmt, nm)\n    endif\n  endif\nendfun\n\n\" find a file name for the file to be compressed.  Use \"name\" without an\n\" extension if possible.  Otherwise use a weird name to avoid overwriting an\n\" existing file.\nfun s:tempname(name)\n  let fn = fnamemodify(a:name, \":r\")\n  if !filereadable(fn) && !isdirectory(fn)\n    return fn\n  endif\n  return fnamemodify(a:name, \":p:h\") . \"/X~=@l9q5\"\nendfun\n\nfun s:escape(name)\n  \" shellescape() was added by patch 7.0.111\n  if exists(\"*shellescape\")\n    return shellescape(a:name)\n  endif\n  return \"'\" . a:name . \"'\"\nendfun\n\n\" vim: set sw=2 :\n", "\" zip.vim: Handles browsing zipfiles\n\"            AUTOLOAD PORTION\n\" Date:\t\tMar 12, 2023\n\" Version:\t33\n\" Maintainer:\tCharles E Campbell <NcampObell@SdrPchip.AorgM-NOSPAM>\n\" License:\tVim License  (see vim's :help license)\n\" Copyright:    Copyright (C) 2005-2019 Charles E. Campbell {{{1\n\"               Permission is hereby granted to use and distribute this code,\n\"               with or without modifications, provided that this copyright\n\"               notice is copied with it. Like anything else that's free,\n\"               zip.vim and zipPlugin.vim are provided *as is* and comes with\n\"               no warranty of any kind, either expressed or implied. By using\n\"               this plugin, you agree that in no event will the copyright\n\"               holder be liable for any damages resulting from the use\n\"               of this software.\n\"redraw!|call DechoSep()|call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()\n\n\" ---------------------------------------------------------------------\n\" Load Once: {{{1\nif &cp || exists(\"g:loaded_zip\")\n finish\nendif\nlet g:loaded_zip= \"v33\"\nif v:version < 702\n echohl WarningMsg\n echo \"***warning*** this version of zip needs vim 7.2 or later\"\n echohl Normal\n finish\nendif\nlet s:keepcpo= &cpo\nset cpo&vim\n\"DechoTabOn\n\nlet s:zipfile_escape = ' ?&;\\'\nlet s:ERROR          = 2\nlet s:WARNING        = 1\nlet s:NOTE           = 0\n\n\" ---------------------------------------------------------------------\n\"  Global Values: {{{1\nif !exists(\"g:zip_shq\")\n if &shq != \"\"\n  let g:zip_shq= &shq\n elseif has(\"unix\")\n  let g:zip_shq= \"'\"\n else\n  let g:zip_shq= '\"'\n endif\nendif\nif !exists(\"g:zip_zipcmd\")\n let g:zip_zipcmd= \"zip\"\nendif\nif !exists(\"g:zip_unzipcmd\")\n let g:zip_unzipcmd= \"unzip\"\nendif\nif !exists(\"g:zip_extractcmd\")\n let g:zip_extractcmd= g:zip_unzipcmd\nendif\n\n\" ----------------\n\"  Functions: {{{1\n\" ----------------\n\n\" ---------------------------------------------------------------------\n\" zip#Browse: {{{2\nfun! zip#Browse(zipfile)\n\"  call Dfunc(\"zip#Browse(zipfile<\".a:zipfile.\">)\")\n  \" sanity check: insure that the zipfile has \"PK\" as its first two letters\n  \"               (zipped files have a leading PK as a \"magic cookie\")\n  if !filereadable(a:zipfile) || readfile(a:zipfile, \"\", 1)[0] !~ '^PK'\n   exe \"noswapfile noautocmd noswapfile e \".fnameescape(a:zipfile)\n\"   call Dret(\"zip#Browse : not a zipfile<\".a:zipfile.\">\")\n   return\n\"  else        \" Decho\n\"   call Decho(\"zip#Browse: a:zipfile<\".a:zipfile.\"> passed PK test - it's a zip file\")\n  endif\n\n  let repkeep= &report\n  set report=10\n\n  \" sanity checks\n  if !exists(\"*fnameescape\")\n   if &verbose > 1\n    echoerr \"the zip plugin is not available (your vim doesn't support fnameescape())\"\n   endif\n   return\n  endif\n  if !executable(g:zip_unzipcmd)\n   redraw!\n   echohl Error | echo \"***error*** (zip#Browse) unzip not available on your system\"\n\"   call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()\n   let &report= repkeep\n\"   call Dret(\"zip#Browse\")\n   return\n  endif\n  if !filereadable(a:zipfile)\n   if a:zipfile !~# '^\\a\\+://'\n    \" if it's an url, don't complain, let url-handlers such as vim do its thing\n    redraw!\n    echohl Error | echo \"***error*** (zip#Browse) File not readable<\".a:zipfile.\">\" | echohl None\n\"    call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()\n   endif\n   let &report= repkeep\n\"   call Dret(\"zip#Browse : file<\".a:zipfile.\"> not readable\")\n   return\n  endif\n\"  call Decho(\"passed sanity checks\")\n  if &ma != 1\n   set ma\n  endif\n  let b:zipfile= a:zipfile\n\n  setlocal noswapfile\n  setlocal buftype=nofile\n  setlocal bufhidden=hide\n  setlocal nobuflisted\n  setlocal nowrap\n\n  \" Oct 12, 2021: need to re-use Bram's syntax/tar.vim.\n  \" Setting the filetype to zip doesn't do anything (currently),\n  \" but it is perhaps less confusing to curious perusers who do\n  \" a :echo &ft\n  setf zip\n  run! syntax/tar.vim\n\n  \" give header\n  call append(0, ['\" zip.vim version '.g:loaded_zip,\n \\                '\" Browsing zipfile '.a:zipfile,\n \\                '\" Select a file with cursor and press ENTER'])\n  keepj $\n\n\"  call Decho(\"exe silent r! \".g:zip_unzipcmd.\" -l -- \".s:Escape(a:zipfile,1))\n  exe \"keepj sil! r! \".g:zip_unzipcmd.\" -Z -1 -- \".s:Escape(a:zipfile,1)\n  if v:shell_error != 0\n   redraw!\n   echohl WarningMsg | echo \"***warning*** (zip#Browse) \".fnameescape(a:zipfile).\" is not a zip file\" | echohl None\n\"   call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()\n   keepj sil! %d\n   let eikeep= &ei\n   set ei=BufReadCmd,FileReadCmd\n   exe \"keepj r \".fnameescape(a:zipfile)\n   let &ei= eikeep\n   keepj 1d\n\"   call Dret(\"zip#Browse\")\n   return\n  endif\n\n  \" Maps associated with zip plugin\n  setlocal noma nomod ro\n  noremap <silent> <buffer>\t<cr>\t\t:call <SID>ZipBrowseSelect()<cr>\n  noremap <silent> <buffer>\tx\t\t:call zip#Extract()<cr>\n  if &mouse != \"\"\n   noremap <silent> <buffer>\t<leftmouse>\t<leftmouse>:call <SID>ZipBrowseSelect()<cr>\n  endif\n\n  let &report= repkeep\n\"  call Dret(\"zip#Browse\")\nendfun\n\n\" ---------------------------------------------------------------------\n\" ZipBrowseSelect: {{{2\nfun! s:ZipBrowseSelect()\n  \"  call Dfunc(\"ZipBrowseSelect() zipfile<\".((exists(\"b:zipfile\"))? b:zipfile : \"n/a\").\"> curfile<\".expand(\"%\").\">\")\n  let repkeep= &report\n  set report=10\n  let fname= getline(\".\")\n  if !exists(\"b:zipfile\")\n\"   call Dret(\"ZipBrowseSelect : b:zipfile doesn't exist!\")\n   return\n  endif\n\n  \" sanity check\n  if fname =~ '^\"'\n   let &report= repkeep\n\"   call Dret(\"ZipBrowseSelect\")\n   return\n  endif\n  if fname =~ '/$'\n   redraw!\n   echohl Error | echo \"***error*** (zip#Browse) Please specify a file, not a directory\" | echohl None\n\"   call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()\n   let &report= repkeep\n\"   call Dret(\"ZipBrowseSelect\")\n   return\n  endif\n\n\"  call Decho(\"fname<\".fname.\">\")\n\n  \" get zipfile to the new-window\n  let zipfile = b:zipfile\n  let curfile = expand(\"%\")\n\"  call Decho(\"zipfile<\".zipfile.\">\")\n\"  call Decho(\"curfile<\".curfile.\">\")\n\n  noswapfile new\n  if !exists(\"g:zip_nomax\") || g:zip_nomax == 0\n   wincmd _\n  endif\n  let s:zipfile_{winnr()}= curfile\n\"  call Decho(\"exe e \".fnameescape(\"zipfile://\".zipfile.'::'.fname))\n  exe \"noswapfile e \".fnameescape(\"zipfile://\".zipfile.'::'.fname)\n  filetype detect\n\n  let &report= repkeep\n\"  call Dret(\"ZipBrowseSelect : s:zipfile_\".winnr().\"<\".s:zipfile_{winnr()}.\">\")\nendfun\n\n\" ---------------------------------------------------------------------\n\" zip#Read: {{{2\nfun! zip#Read(fname,mode)\n\"  call Dfunc(\"zip#Read(fname<\".a:fname.\">,mode=\".a:mode.\")\")\n  let repkeep= &report\n  set report=10\n\n  if has(\"unix\")\n   let zipfile = substitute(a:fname,'zipfile://\\(.\\{-}\\)::[^\\\\].*$','\\1','')\n   let fname   = substitute(a:fname,'zipfile://.\\{-}::\\([^\\\\].*\\)$','\\1','')\n  else\n   let zipfile = substitute(a:fname,'^.\\{-}zipfile://\\(.\\{-}\\)::[^\\\\].*$','\\1','')\n   let fname   = substitute(a:fname,'^.\\{-}zipfile://.\\{-}::\\([^\\\\].*\\)$','\\1','')\n   let fname   = substitute(fname, '[', '[[]', 'g')\n  endif\n\"  call Decho(\"zipfile<\".zipfile.\">\")\n\"  call Decho(\"fname  <\".fname.\">\")\n  \" sanity check\n  if !executable(substitute(g:zip_unzipcmd,'\\s\\+.*$','',''))\n   redraw!\n   echohl Error | echo \"***error*** (zip#Read) sorry, your system doesn't appear to have the \".g:zip_unzipcmd.\" program\" | echohl None\n\"   call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()\n   let &report= repkeep\n\"   call Dret(\"zip#Write\")\n   return\n  endif\n\n  \" the following code does much the same thing as\n  \"   exe \"keepj sil! r! \".g:zip_unzipcmd.\" -p -- \".s:Escape(zipfile,1).\" \".s:Escape(fnameescape(fname),1)\n  \" but allows zipfile://... entries in quickfix lists\n  let temp = tempname()\n\"  call Decho(\"using temp file<\".temp.\">\")\n  let fn   = expand('%:p')\n  exe \"sil! !\".g:zip_unzipcmd.\" -p -- \".s:Escape(zipfile,1).\" \".s:Escape(fnameescape(fname),1).' > '.temp\n\"  call Decho(\"exe sil! !\".g:zip_unzipcmd.\" -p -- \".s:Escape(zipfile,1).\" \".s:Escape(fnameescape(fname),1).' > '.temp)\n  sil exe 'keepalt file '.temp\n  sil keepj e!\n  sil exe 'keepalt file '.fnameescape(fn)\n  call delete(temp)\n\n  filetype detect\n\n  \" cleanup\n  \"  keepj 0d   \" used to be needed for the ...r! ... method\n  set nomod\n\n  let &report= repkeep\n\"  call Dret(\"zip#Read\")\nendfun\n\n\" ---------------------------------------------------------------------\n\" zip#Write: {{{2\nfun! zip#Write(fname)\n\"  call Dfunc(\"zip#Write(fname<\".a:fname.\">) zipfile_\".winnr().\"<\".s:zipfile_{winnr()}.\">\")\n  let repkeep= &report\n  set report=10\n\n  \" sanity checks\n  if !executable(substitute(g:zip_zipcmd,'\\s\\+.*$','',''))\n   redraw!\n   echohl Error | echo \"***error*** (zip#Write) sorry, your system doesn't appear to have the \".g:zip_zipcmd.\" program\" | echohl None\n\"   call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()\n   let &report= repkeep\n\"   call Dret(\"zip#Write\")\n   return\n  endif\n  if !exists(\"*mkdir\")\n   redraw!\n   echohl Error | echo \"***error*** (zip#Write) sorry, mkdir() doesn't work on your system\" | echohl None\n\"   call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()\n   let &report= repkeep\n\"   call Dret(\"zip#Write\")\n   return\n  endif\n\n  let curdir= getcwd()\n  let tmpdir= tempname()\n\"  call Decho(\"orig tempname<\".tmpdir.\">\")\n  if tmpdir =~ '\\.'\n   let tmpdir= substitute(tmpdir,'\\.[^.]*$','','e')\n  endif\n\"  call Decho(\"tmpdir<\".tmpdir.\">\")\n  call mkdir(tmpdir,\"p\")\n\n  \" attempt to change to the indicated directory\n  if s:ChgDir(tmpdir,s:ERROR,\"(zip#Write) cannot cd to temporary directory\")\n   let &report= repkeep\n\"   call Dret(\"zip#Write\")\n   return\n  endif\n\"  call Decho(\"current directory now: \".getcwd())\n\n  \" place temporary files under .../_ZIPVIM_/\n  if isdirectory(\"_ZIPVIM_\")\n   call s:Rmdir(\"_ZIPVIM_\")\n  endif\n  call mkdir(\"_ZIPVIM_\")\n  cd _ZIPVIM_\n\"  call Decho(\"current directory now: \".getcwd())\n\n  if has(\"unix\")\n   let zipfile = substitute(a:fname,'zipfile://\\(.\\{-}\\)::[^\\\\].*$','\\1','')\n   let fname   = substitute(a:fname,'zipfile://.\\{-}::\\([^\\\\].*\\)$','\\1','')\n  else\n   let zipfile = substitute(a:fname,'^.\\{-}zipfile://\\(.\\{-}\\)::[^\\\\].*$','\\1','')\n   let fname   = substitute(a:fname,'^.\\{-}zipfile://.\\{-}::\\([^\\\\].*\\)$','\\1','')\n  endif\n\"  call Decho(\"zipfile<\".zipfile.\">\")\n\"  call Decho(\"fname  <\".fname.\">\")\n\n  if fname =~ '/'\n   let dirpath = substitute(fname,'/[^/]\\+$','','e')\n   if has(\"win32unix\") && executable(\"cygpath\")\n    let dirpath = substitute(system(\"cygpath \".s:Escape(dirpath,0)),'\\n','','e')\n   endif\n\"   call Decho(\"mkdir(dirpath<\".dirpath.\">,p)\")\n   call mkdir(dirpath,\"p\")\n  endif\n  if zipfile !~ '/'\n   let zipfile= curdir.'/'.zipfile\n  endif\n\"  call Decho(\"zipfile<\".zipfile.\"> fname<\".fname.\">\")\n\n  exe \"w! \".fnameescape(fname)\n  if has(\"win32unix\") && executable(\"cygpath\")\n   let zipfile = substitute(system(\"cygpath \".s:Escape(zipfile,0)),'\\n','','e')\n  endif\n\n  if (has(\"win32\") || has(\"win95\") || has(\"win64\") || has(\"win16\")) && &shell !~? 'sh$'\n    let fname = substitute(fname, '[', '[[]', 'g')\n  endif\n\n\"  call Decho(g:zip_zipcmd.\" -u \".s:Escape(fnamemodify(zipfile,\":p\"),0).\" \".s:Escape(fname,0))\n  call system(g:zip_zipcmd.\" -u \".s:Escape(fnamemodify(zipfile,\":p\"),0).\" \".s:Escape(fname,0))\n  if v:shell_error != 0\n   redraw!\n   echohl Error | echo \"***error*** (zip#Write) sorry, unable to update \".zipfile.\" with \".fname | echohl None\n\"   call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()\n\n  elseif s:zipfile_{winnr()} =~ '^\\a\\+://'\n   \" support writing zipfiles across a network\n   let netzipfile= s:zipfile_{winnr()}\n\"   call Decho(\"handle writing <\".zipfile.\"> across network as <\".netzipfile.\">\")\n   1split|enew\n   let binkeep= &binary\n   let eikeep = &ei\n   set binary ei=all\n   exe \"noswapfile e! \".fnameescape(zipfile)\n   call netrw#NetWrite(netzipfile)\n   let &ei     = eikeep\n   let &binary = binkeep\n   q!\n   unlet s:zipfile_{winnr()}\n  endif\n  \n  \" cleanup and restore current directory\n  cd ..\n  call s:Rmdir(\"_ZIPVIM_\")\n  call s:ChgDir(curdir,s:WARNING,\"(zip#Write) unable to return to \".curdir.\"!\")\n  call s:Rmdir(tmpdir)\n  setlocal nomod\n\n  let &report= repkeep\n\"  call Dret(\"zip#Write\")\nendfun\n\n\" ---------------------------------------------------------------------\n\" zip#Extract: extract a file from a zip archive {{{2\nfun! zip#Extract()\n\"  call Dfunc(\"zip#Extract()\")\n\n  let repkeep= &report\n  set report=10\n  let fname= getline(\".\")\n\"  call Decho(\"fname<\".fname.\">\")\n\n  \" sanity check\n  if fname =~ '^\"'\n   let &report= repkeep\n\"   call Dret(\"zip#Extract\")\n   return\n  endif\n  if fname =~ '/$'\n   redraw!\n   echohl Error | echo \"***error*** (zip#Extract) Please specify a file, not a directory\" | echohl None\n   let &report= repkeep\n\"   call Dret(\"zip#Extract\")\n   return\n  endif\n\n  \" extract the file mentioned under the cursor\n\"  call Decho(\"system(\".g:zip_extractcmd.\" \".shellescape(b:zipfile).\" \".shellescape(shell).\")\")\n  call system(g:zip_extractcmd.\" \".shellescape(b:zipfile).\" \".shellescape(shell))\n\"  call Decho(\"zipfile<\".b:zipfile.\">\")\n  if v:shell_error != 0\n   echohl Error | echo \"***error*** \".g:zip_extractcmd.\" \".b:zipfile.\" \".fname.\": failed!\" | echohl NONE\n  elseif !filereadable(fname)\n   echohl Error | echo \"***error*** attempted to extract \".fname.\" but it doesn't appear to be present!\"\n  else\n   echo \"***note*** successfully extracted \".fname\n  endif\n\n  \" restore option\n  let &report= repkeep\n\n\"  call Dret(\"zip#Extract\")\nendfun\n\n\" ---------------------------------------------------------------------\n\" s:Escape: {{{2\nfun! s:Escape(fname,isfilt)\n\"  call Dfunc(\"QuoteFileDir(fname<\".a:fname.\"> isfilt=\".a:isfilt.\")\")\n  if exists(\"*shellescape\")\n   if a:isfilt\n    let qnameq= shellescape(a:fname,1)\n   else\n    let qnameq= shellescape(a:fname)\n   endif\n  else\n   let qnameq= g:zip_shq.escape(a:fname,g:zip_shq).g:zip_shq\n  endif\n\"  call Dret(\"QuoteFileDir <\".qnameq.\">\")\n  return qnameq\nendfun\n\n\" ---------------------------------------------------------------------\n\" ChgDir: {{{2\nfun! s:ChgDir(newdir,errlvl,errmsg)\n\"  call Dfunc(\"ChgDir(newdir<\".a:newdir.\"> errlvl=\".a:errlvl.\"  errmsg<\".a:errmsg.\">)\")\n\n  try\n   exe \"cd \".fnameescape(a:newdir)\n  catch /^Vim\\%((\\a\\+)\\)\\=:E344/\n   redraw!\n   if a:errlvl == s:NOTE\n    echo \"***note*** \".a:errmsg\n   elseif a:errlvl == s:WARNING\n    echohl WarningMsg | echo \"***warning*** \".a:errmsg | echohl NONE\n   elseif a:errlvl == s:ERROR\n    echohl Error | echo \"***error*** \".a:errmsg | echohl NONE\n   endif\n\"   call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()\n\"   call Dret(\"ChgDir 1\")\n   return 1\n  endtry\n\n\"  call Dret(\"ChgDir 0\")\n  return 0\nendfun\n\n\" ---------------------------------------------------------------------\n\" s:Rmdir: {{{2\nfun! s:Rmdir(fname)\n\"  call Dfunc(\"Rmdir(fname<\".a:fname.\">)\")\n  if (has(\"win32\") || has(\"win95\") || has(\"win64\") || has(\"win16\")) && &shell !~? 'sh$'\n   call system(\"rmdir /S/Q \".s:Escape(a:fname,0))\n  else\n   call system(\"/bin/rm -rf \".s:Escape(a:fname,0))\n  endif\n\"  call Dret(\"Rmdir\")\nendfun\n\n\" ------------------------------------------------------------------------\n\" Modelines And Restoration: {{{1\nlet &cpo= s:keepcpo\nunlet s:keepcpo\n\" vim:ts=8 fdm=marker\n", "\" Vim filetype plugin file\n\" Language:      Perl\n\" Maintainer:    vim-perl <vim-perl@googlegroups.com>\n\" Homepage:      https://github.com/vim-perl/vim-perl\n\" Bugs/requests: https://github.com/vim-perl/vim-perl/issues\n\" License:       Vim License (see :help license)\n\" Last Change:   2021 Nov 10\n\nif exists(\"b:did_ftplugin\") | finish | endif\nlet b:did_ftplugin = 1\n\n\" Make sure the continuation lines below do not cause problems in\n\" compatibility mode.\nlet s:save_cpo = &cpo\nset cpo-=C\n\nsetlocal formatoptions-=t\nsetlocal formatoptions+=crqol\nsetlocal keywordprg=perldoc\\ -f\n\nsetlocal comments=:#\nsetlocal commentstring=#%s\n\n\" Provided by Ned Konz <ned at bike-nomad dot com>\n\"---------------------------------------------\nsetlocal include=\\\\<\\\\(use\\\\\\|require\\\\)\\\\>\n\" '+' is removed to support plugins in Catalyst or DBIx::Class\n\" where the leading plus indicates a fully-qualified module name.\nsetlocal includeexpr=substitute(substitute(substitute(substitute(v:fname,'+','',''),'::','/','g'),'->\\*','',''),'$','.pm','')\nsetlocal define=[^A-Za-z_]\nsetlocal iskeyword+=:\n\n\" The following line changes a global variable but is necessary to make\n\" gf and similar commands work. Thanks to Andrew Pimlott for pointing\n\" out the problem.\nlet s:old_isfname = &isfname\nset isfname+=:\nlet s:new_isfname = &isfname\n\naugroup perl_global_options\n  au!\n  exe \"au BufEnter * if &filetype == 'perl' | let &isfname = '\" . s:new_isfname . \"' | endif\"\n  exe \"au BufLeave * if &filetype == 'perl' | let &isfname = '\" . s:old_isfname . \"' | endif\"\naugroup END\n\n\" Undo the stuff we changed.\nlet b:undo_ftplugin = \"setlocal fo< kp< com< cms< inc< inex< def< isk<\" .\n      \\               \" | let &isfname = '\" .  s:old_isfname . \"'\"\n\nif get(g:, 'perl_fold', 0)\n  setlocal foldmethod=syntax\n  let b:undo_ftplugin .= \" | setlocal fdm<\"\nendif\n\n\" Set this once, globally.\nif !exists(\"perlpath\")\n    if executable(\"perl\")\n      try\n\tif &shellxquote != '\"'\n\t    let perlpath = system('perl -e \"print join(q/,/,@INC)\"')\n\telse\n\t    let perlpath = system(\"perl -e 'print join(q/,/,@INC)'\")\n\tendif\n\tlet perlpath = substitute(perlpath,',.$',',,','')\n      catch /E145:/\n\tlet perlpath = \".,,\"\n      endtry\n    else\n\t\" If we can't call perl to get its path, just default to using the\n\t\" current directory and the directory of the current file.\n\tlet perlpath = \".,,\"\n    endif\nendif\n\n\" Append perlpath to the existing path value, if it is set.  Since we don't\n\" use += to do it because of the commas in perlpath, we have to handle the\n\" global / local settings, too.\nif &l:path == \"\"\n    if &g:path == \"\"\n        let &l:path=perlpath\n    else\n        let &l:path=&g:path.\",\".perlpath\n    endif\nelse\n    let &l:path=&l:path.\",\".perlpath\nendif\n\nlet b:undo_ftplugin .= \" | setlocal pa<\"\n\"---------------------------------------------\n\n\" Change the browse dialog to show mainly Perl-related files\nif (has(\"gui_win32\") || has(\"gui_gtk\")) && !exists(\"b:browsefilter\")\n    let b:browsefilter = \"Perl Source Files (*.pl)\\t*.pl\\n\" .\n\t\t       \\ \"Perl Modules (*.pm)\\t*.pm\\n\" .\n\t\t       \\ \"Perl Documentation Files (*.pod)\\t*.pod\\n\" .\n\t\t       \\ \"All Files (*.*)\\t*.*\\n\"\n    let b:undo_ftplugin .= \" | unlet! b:browsefilter\"\nendif\n\n\" Proper matching for matchit plugin\nif exists(\"loaded_matchit\") && !exists(\"b:match_words\")\n    let b:match_skip = 's:comment\\|string\\|perlQQ\\|perlShellCommand\\|perlHereDoc\\|perlSubstitution\\|perlTranslation\\|perlMatch\\|perlFormatField'\n    let b:match_words = '\\<if\\>:\\<elsif\\>:\\<else\\>'\n    let b:undo_ftplugin .= \" | unlet! b:match_words b:match_skip\"\nendif\n\n\" Restore the saved compatibility options.\nlet &cpo = s:save_cpo\nunlet s:save_cpo s:old_isfname s:new_isfname\n", "\" Vim filetype plugin\n\" Language:\t\tRuby\n\" Maintainer:\t\tTim Pope <vimNOSPAM@tpope.org>\n\" URL:\t\t\thttps://github.com/vim-ruby/vim-ruby\n\" Release Coordinator:\tDoug Kearns <dougkearns@gmail.com>\n\" Last Change:\t\t2022 Mar 21\n\nif (exists(\"b:did_ftplugin\"))\n  finish\nendif\nlet b:did_ftplugin = 1\n\nlet s:cpo_save = &cpo\nset cpo&vim\n\nif has(\"gui_running\") && !has(\"gui_win32\")\n  setlocal keywordprg=ri\\ -T\\ -f\\ bs\nelse\n  setlocal keywordprg=ri\nendif\n\n\" Matchit support\nif exists(\"loaded_matchit\") && !exists(\"b:match_words\")\n  let b:match_ignorecase = 0\n\n  let b:match_words =\n\t\\ '{\\|\\<\\%(if\\|unless\\|case\\|while\\|until\\|for\\|do\\|class\\|module\\|def\\|=\\@<!begin\\)\\>=\\@!' .\n\t\\ ':' .\n\t\\ '\\<\\%(else\\|elsif\\|ensure\\|when\\|rescue\\|break\\|redo\\|next\\|retry\\)\\>' .\n\t\\ ':' .\n        \\ '}\\|\\%(^\\|[^.\\:@$=]\\)\\@<=\\<end\\:\\@!\\>' .\n        \\ ',^=begin\\>:^=end\\>,' .\n\t\\ ',\\[:\\],(:)'\n\n  let b:match_skip =\n\t\\ \"synIDattr(synID(line('.'),col('.'),0),'name') =~ '\" .\n\t\\ \"\\\\<ruby\\\\%(String\\\\|.\\+Delimiter\\\\|Character\\\\|.\\+Escape\\\\|\" .\n        \\ \"Regexp\\\\|Interpolation\\\\|Comment\\\\|Documentation\\\\|\" .\n\t\\ \"ConditionalModifier\\\\|RepeatModifier\\\\|RescueModifier\\\\|OptionalDo\\\\|\" .\n\t\\ \"MethodName\\\\|BlockArgument\\\\|KeywordAsMethod\\\\|ClassVariable\\\\|\" .\n\t\\ \"InstanceVariable\\\\|GlobalVariable\\\\|Symbol\\\\)\\\\>'\"\nendif\n\nsetlocal formatoptions-=t formatoptions+=croql\n\nsetlocal include=^\\\\s*\\\\<\\\\(load\\\\>\\\\\\|require\\\\>\\\\\\|autoload\\\\s*:\\\\=[\\\"']\\\\=\\\\h\\\\w*[\\\"']\\\\=,\\\\)\nsetlocal suffixesadd=.rb\n\nif exists(\"&ofu\") && has(\"ruby\")\n  setlocal omnifunc=rubycomplete#Complete\nendif\n\n\" TODO:\n\"setlocal define=^\\\\s*def\n\nsetlocal comments=b:#\nsetlocal commentstring=#\\ %s\n\nif !exists('g:ruby_version_paths')\n  let g:ruby_version_paths = {}\nendif\n\nfunction! s:query_path(root) abort\n  let code = \"print $:.join %q{,}\"\n  if &shell =~# 'sh' && empty(&shellxquote)\n    let prefix = 'env PATH='.shellescape($PATH).' '\n  else\n    let prefix = ''\n  endif\n  if &shellxquote == \"'\"\n    let path_check = prefix.'ruby --disable-gems -e \"' . code . '\"'\n  else\n    let path_check = prefix.\"ruby --disable-gems -e '\" . code . \"'\"\n  endif\n\n  let cd = haslocaldir() ? 'lcd' : 'cd'\n  let cwd = fnameescape(getcwd())\n  try\n    exe cd fnameescape(a:root)\n    let path = split(system(path_check),',')\n    exe cd cwd\n    return path\n  finally\n    exe cd cwd\n  endtry\nendfunction\n\nfunction! s:build_path(path) abort\n  let path = join(map(copy(a:path), 'v:val ==# \".\" ? \"\" : v:val'), ',')\n  if &g:path =~# '\\v^%(\\.,)=%(/%(usr|emx)/include,)=,$'\n    let path = path . ',.,,'\n  elseif &g:path =~# ',\\.,,$'\n    let path = &g:path[0:-4] . path . ',.,,'\n  elseif &g:path =~# ',,$'\n    let path = &g:path[0:-2] . path . ',,'\n  else\n    let path = substitute(&g:path, '[^,]\\zs$', ',', '') . path\n  endif\n  return path\nendfunction\n\nif !exists('b:ruby_version') && !exists('g:ruby_path') && isdirectory(expand('%:p:h'))\n  let s:version_file = findfile('.ruby-version', '.;')\n  if !empty(s:version_file) && filereadable(s:version_file)\n    let b:ruby_version = get(readfile(s:version_file, '', 1), '')\n    if !has_key(g:ruby_version_paths, b:ruby_version)\n      let g:ruby_version_paths[b:ruby_version] = s:query_path(fnamemodify(s:version_file, ':p:h'))\n    endif\n  endif\nendif\n\nif exists(\"g:ruby_path\")\n  let s:ruby_path = type(g:ruby_path) == type([]) ? join(g:ruby_path, ',') : g:ruby_path\nelseif has_key(g:ruby_version_paths, get(b:, 'ruby_version', ''))\n  let s:ruby_paths = g:ruby_version_paths[b:ruby_version]\n  let s:ruby_path = s:build_path(s:ruby_paths)\nelse\n  if !exists('g:ruby_default_path')\n    if has(\"ruby\") && has(\"win32\")\n      ruby ::VIM::command( 'let g:ruby_default_path = split(\"%s\",\",\")' % $:.join(%q{,}) )\n    elseif executable('ruby') && !empty($HOME)\n      let g:ruby_default_path = s:query_path($HOME)\n    else\n      let g:ruby_default_path = map(split($RUBYLIB,':'), 'v:val ==# \".\" ? \"\" : v:val')\n    endif\n  endif\n  let s:ruby_paths = g:ruby_default_path\n  let s:ruby_path = s:build_path(s:ruby_paths)\nendif\n\nif stridx(&l:path, s:ruby_path) == -1\n  let &l:path = s:ruby_path\nendif\nif exists('s:ruby_paths') && stridx(&l:tags, join(map(copy(s:ruby_paths),'v:val.\"/tags\"'),',')) == -1\n  let &l:tags = &tags . ',' . join(map(copy(s:ruby_paths),'v:val.\"/tags\"'),',')\nendif\n\nif (has(\"gui_win32\") || has(\"gui_gtk\")) && !exists(\"b:browsefilter\")\n  let b:browsefilter = \"Ruby Source Files (*.rb)\\t*.rb\\n\" .\n                     \\ \"All Files (*.*)\\t*.*\\n\"\nendif\n\nlet b:undo_ftplugin = \"setl inc= sua= path= tags= fo< com< cms< kp=\"\n      \\.\"| unlet! b:browsefilter b:match_ignorecase b:match_words b:match_skip\"\n      \\.\"| if exists('&ofu') && has('ruby') | setl ofu< | endif\"\n\nif get(g:, 'ruby_recommended_style', 1)\n  setlocal shiftwidth=2 softtabstop=2 expandtab\n  let b:undo_ftplugin .= ' | setl sw< sts< et<'\nendif\n\n\" To activate, :set ballooneval\nif exists('+balloonexpr') && get(g:, 'ruby_balloonexpr')\n  setlocal balloonexpr=RubyBalloonexpr()\n  let b:undo_ftplugin .= \"| setl bexpr=\"\nendif\n\nfunction! s:map(mode, flags, map) abort\n  let from = matchstr(a:map, '\\S\\+')\n  if empty(mapcheck(from, a:mode))\n    exe a:mode.'map' '<buffer>' a:flags a:map\n    let b:undo_ftplugin .= '|sil! '.a:mode.'unmap <buffer> '.from\n  endif\nendfunction\n\ncmap <buffer><script><expr> <Plug><ctag> substitute(RubyCursorTag(),'^$',\"\\022\\027\",'')\ncmap <buffer><script><expr> <Plug><cfile> substitute(RubyCursorFile(),'^$',\"\\022\\006\",'')\nlet b:undo_ftplugin .= \"| sil! cunmap <buffer> <Plug><ctag>| sil! cunmap <buffer> <Plug><cfile>\"\n\nif !exists(\"g:no_plugin_maps\") && !exists(\"g:no_ruby_maps\")\n  nmap <buffer><script> <SID>:  :<C-U>\n  nmap <buffer><script> <SID>c: :<C-U><C-R>=v:count ? v:count : ''<CR>\n  cmap <buffer> <SID><cfile> <Plug><cfile>\n  cmap <buffer> <SID><ctag>  <Plug><ctag>\n\n  nnoremap <silent> <buffer> [m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'b','n')<CR>\n  nnoremap <silent> <buffer> ]m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'','n')<CR>\n  nnoremap <silent> <buffer> [M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'b','n')<CR>\n  nnoremap <silent> <buffer> ]M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'','n')<CR>\n  xnoremap <silent> <buffer> [m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'b','v')<CR>\n  xnoremap <silent> <buffer> ]m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'','v')<CR>\n  xnoremap <silent> <buffer> [M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'b','v')<CR>\n  xnoremap <silent> <buffer> ]M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'','v')<CR>\n\n  nnoremap <silent> <buffer> [[ :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['rubyModule','rubyClass'],'b','n')<CR>\n  nnoremap <silent> <buffer> ]] :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['rubyModule','rubyClass'],'','n')<CR>\n  nnoremap <silent> <buffer> [] :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass'],'b','n')<CR>\n  nnoremap <silent> <buffer> ][ :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass'],'','n')<CR>\n  xnoremap <silent> <buffer> [[ :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['rubyModule','rubyClass'],'b','v')<CR>\n  xnoremap <silent> <buffer> ]] :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['rubyModule','rubyClass'],'','v')<CR>\n  xnoremap <silent> <buffer> [] :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass'],'b','v')<CR>\n  xnoremap <silent> <buffer> ][ :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass'],'','v')<CR>\n\n  let b:undo_ftplugin = b:undo_ftplugin\n        \\.\"| sil! exe 'unmap <buffer> [[' | sil! exe 'unmap <buffer> ]]' | sil! exe 'unmap <buffer> []' | sil! exe 'unmap <buffer> ]['\"\n        \\.\"| sil! exe 'unmap <buffer> [m' | sil! exe 'unmap <buffer> ]m' | sil! exe 'unmap <buffer> [M' | sil! exe 'unmap <buffer> ]M'\"\n\n  if maparg('im','x') == '' && maparg('im','o') == '' && maparg('am','x') == '' && maparg('am','o') == ''\n    onoremap <silent> <buffer> im :<C-U>call <SID>wrap_i('[m',']M')<CR>\n    onoremap <silent> <buffer> am :<C-U>call <SID>wrap_a('[m',']M')<CR>\n    xnoremap <silent> <buffer> im :<C-U>call <SID>wrap_i('[m',']M')<CR>\n    xnoremap <silent> <buffer> am :<C-U>call <SID>wrap_a('[m',']M')<CR>\n    let b:undo_ftplugin = b:undo_ftplugin\n          \\.\"| sil! exe 'ounmap <buffer> im' | sil! exe 'ounmap <buffer> am'\"\n          \\.\"| sil! exe 'xunmap <buffer> im' | sil! exe 'xunmap <buffer> am'\"\n  endif\n\n  if maparg('iM','x') == '' && maparg('iM','o') == '' && maparg('aM','x') == '' && maparg('aM','o') == ''\n    onoremap <silent> <buffer> iM :<C-U>call <SID>wrap_i('[[','][')<CR>\n    onoremap <silent> <buffer> aM :<C-U>call <SID>wrap_a('[[','][')<CR>\n    xnoremap <silent> <buffer> iM :<C-U>call <SID>wrap_i('[[','][')<CR>\n    xnoremap <silent> <buffer> aM :<C-U>call <SID>wrap_a('[[','][')<CR>\n    let b:undo_ftplugin = b:undo_ftplugin\n          \\.\"| sil! exe 'ounmap <buffer> iM' | sil! exe 'ounmap <buffer> aM'\"\n          \\.\"| sil! exe 'xunmap <buffer> iM' | sil! exe 'xunmap <buffer> aM'\"\n  endif\n\n  call s:map('c', '', '<C-R><C-F> <Plug><cfile>')\n\n  cmap <buffer><script><expr> <SID>tagzv &foldopen =~# 'tag' ? '<Bar>norm! zv' : ''\n  call s:map('n', '<script><silent>', '<C-]>       <SID>:exe  v:count1.\"tag <SID><ctag>\"<SID>tagzv<CR>')\n  call s:map('n', '<script><silent>', 'g<C-]>      <SID>:exe         \"tjump <SID><ctag>\"<SID>tagzv<CR>')\n  call s:map('n', '<script><silent>', 'g]          <SID>:exe       \"tselect <SID><ctag>\"<SID>tagzv<CR>')\n  call s:map('n', '<script><silent>', '<C-W>]      <SID>:exe v:count1.\"stag <SID><ctag>\"<SID>tagzv<CR>')\n  call s:map('n', '<script><silent>', '<C-W><C-]>  <SID>:exe v:count1.\"stag <SID><ctag>\"<SID>tagzv<CR>')\n  call s:map('n', '<script><silent>', '<C-W>g<C-]> <SID>:exe        \"stjump <SID><ctag>\"<SID>tagzv<CR>')\n  call s:map('n', '<script><silent>', '<C-W>g]     <SID>:exe      \"stselect <SID><ctag>\"<SID>tagzv<CR>')\n  call s:map('n', '<script><silent>', '<C-W>}      <SID>:exe v:count1.\"ptag <SID><ctag>\"<CR>')\n  call s:map('n', '<script><silent>', '<C-W>g}     <SID>:exe        \"ptjump <SID><ctag>\"<CR>')\n\n  call s:map('n', '<script><silent>', 'gf           <SID>c:find <SID><cfile><CR>')\n  call s:map('n', '<script><silent>', '<C-W>f      <SID>c:sfind <SID><cfile><CR>')\n  call s:map('n', '<script><silent>', '<C-W><C-F>  <SID>c:sfind <SID><cfile><CR>')\n  call s:map('n', '<script><silent>', '<C-W>gf   <SID>c:tabfind <SID><cfile><CR>')\nendif\n\nlet &cpo = s:cpo_save\nunlet s:cpo_save\n\nif exists(\"g:did_ruby_ftplugin_functions\")\n  finish\nendif\nlet g:did_ruby_ftplugin_functions = 1\n\nfunction! RubyBalloonexpr() abort\n  if !exists('s:ri_found')\n    let s:ri_found = executable('ri')\n  endif\n  if s:ri_found\n    let line = getline(v:beval_lnum)\n    let b = matchstr(strpart(line,0,v:beval_col),'\\%(\\w\\|[:.]\\)*$')\n    let a = substitute(matchstr(strpart(line,v:beval_col),'^\\w*\\%([?!]\\|\\s*=\\)\\?'),'\\s\\+','','g')\n    let str = b.a\n    let before = strpart(line,0,v:beval_col-strlen(b))\n    let after  = strpart(line,v:beval_col+strlen(a))\n    if str =~ '^\\.'\n      let str = substitute(str,'^\\.','#','g')\n      if before =~ '\\]\\s*$'\n        let str = 'Array'.str\n      elseif before =~ '}\\s*$'\n        \" False positives from blocks here\n        let str = 'Hash'.str\n      elseif before =~ \"[\\\"'`]\\\\s*$\" || before =~ '\\$\\d\\+\\s*$'\n        let str = 'String'.str\n      elseif before =~ '\\$\\d\\+\\.\\d\\+\\s*$'\n        let str = 'Float'.str\n      elseif before =~ '\\$\\d\\+\\s*$'\n        let str = 'Integer'.str\n      elseif before =~ '/\\s*$'\n        let str = 'Regexp'.str\n      else\n        let str = substitute(str,'^#','.','')\n      endif\n    endif\n    let str = substitute(str,'.*\\.\\s*to_f\\s*\\.\\s*','Float#','')\n    let str = substitute(str,'.*\\.\\s*to_i\\%(nt\\)\\=\\s*\\.\\s*','Integer#','')\n    let str = substitute(str,'.*\\.\\s*to_s\\%(tr\\)\\=\\s*\\.\\s*','String#','')\n    let str = substitute(str,'.*\\.\\s*to_sym\\s*\\.\\s*','Symbol#','')\n    let str = substitute(str,'.*\\.\\s*to_a\\%(ry\\)\\=\\s*\\.\\s*','Array#','')\n    let str = substitute(str,'.*\\.\\s*to_proc\\s*\\.\\s*','Proc#','')\n    if str !~ '^\\w'\n      return ''\n    endif\n    silent! let res = substitute(system(\"ri -f rdoc -T \\\"\".str.'\"'),'\\n$','','')\n    if res =~ '^Nothing known about' || res =~ '^Bad argument:' || res =~ '^More than one method'\n      return ''\n    endif\n    return res\n  else\n    return \"\"\n  endif\nendfunction\n\nfunction! s:searchsyn(pattern, syn, flags, mode) abort\n  let cnt = v:count1\n  norm! m'\n  if a:mode ==# 'v'\n    norm! gv\n  endif\n  let i = 0\n  call map(a:syn, 'hlID(v:val)')\n  while i < cnt\n    let i = i + 1\n    let line = line('.')\n    let col  = col('.')\n    let pos = search(a:pattern,'W'.a:flags)\n    while pos != 0 && index(a:syn, s:synid()) < 0\n      let pos = search(a:pattern,'W'.a:flags)\n    endwhile\n    if pos == 0\n      call cursor(line,col)\n      return\n    endif\n  endwhile\nendfunction\n\nfunction! s:synid() abort\n  return synID(line('.'),col('.'),0)\nendfunction\n\nfunction! s:wrap_i(back,forward) abort\n  execute 'norm! k'\n  execute 'norm '.a:forward\n  let line = line('.')\n  execute 'norm '.a:back\n  if line('.') == line - 1\n    return s:wrap_a(a:back,a:forward)\n  endif\n  execute 'norm! jV'\n  execute 'norm '.a:forward\n  execute 'norm! k'\nendfunction\n\nfunction! s:wrap_a(back,forward) abort\n  execute 'norm '.a:forward\n  if line('.') < line('$') && getline(line('.')+1) ==# ''\n    let after = 1\n  endif\n  execute 'norm '.a:back\n  while getline(line('.')-1) =~# '^\\s*#' && line('.')\n    -\n  endwhile\n  if exists('after')\n    execute 'norm! V'\n    execute 'norm '.a:forward\n    execute 'norm! j'\n  elseif line('.') > 1 && getline(line('.')-1) =~# '^\\s*$'\n    execute 'norm! kV'\n    execute 'norm '.a:forward\n  else\n    execute 'norm! V'\n    execute 'norm '.a:forward\n  endif\nendfunction\n\nfunction! RubyCursorIdentifier() abort\n  let asciicode    = '\\%(\\w\\|[]})\\\"'.\"'\".']\\)\\@<!\\%(?\\%(\\\\M-\\\\C-\\|\\\\C-\\\\M-\\|\\\\M-\\\\c\\|\\\\c\\\\M-\\|\\\\c\\|\\\\C-\\|\\\\M-\\)\\=\\%(\\\\\\o\\{1,3}\\|\\\\x\\x\\{1,2}\\|\\\\\\=\\S\\)\\)'\n  let number       = '\\%(\\%(\\w\\|[]})\\\"'.\"'\".']\\s*\\)\\@<!-\\)\\=\\%(\\<[[:digit:]_]\\+\\%(\\.[[:digit:]_]\\+\\)\\=\\%([Ee][[:digit:]_]\\+\\)\\=\\>\\|\\<0[xXbBoOdD][[:xdigit:]_]\\+\\>\\)\\|'.asciicode\n  let operator     = '\\%(\\[\\]\\|<<\\|<=>\\|[!<>]=\\=\\|===\\=\\|[!=]\\~\\|>>\\|\\*\\*\\|\\.\\.\\.\\=\\|=>\\|[~^&|*/%+-]\\)'\n  let method       = '\\%(\\.[_a-zA-Z]\\w*\\s*=>\\@!\\|\\<[_a-zA-Z]\\w*\\>[?!]\\=\\)'\n  let global       = '$\\%([!$&\"'.\"'\".'*+,./:;<=>?@\\`~]\\|-\\=\\w\\+\\>\\)'\n  let symbolizable = '\\%(\\%(@@\\=\\)\\w\\+\\>\\|'.global.'\\|'.method.'\\|'.operator.'\\)'\n  let pattern      = '\\C\\s*\\%('.number.'\\|\\%(:\\@<!:\\)\\='.symbolizable.'\\)'\n  let [lnum, col]  = searchpos(pattern,'bcn',line('.'))\n  let raw          = matchstr(getline('.')[col-1 : ],pattern)\n  let stripped     = substitute(substitute(raw,'\\s\\+=$','=',''),'^\\s*[:.]\\=','','')\n  return stripped == '' ? expand(\"<cword>\") : stripped\nendfunction\n\nfunction! RubyCursorTag() abort\n  return substitute(RubyCursorIdentifier(), '^[$@]*', '', '')\nendfunction\n\nfunction! RubyCursorFile() abort\n  let isfname = &isfname\n  try\n    set isfname+=:\n    let cfile = expand('<cfile>')\n  finally\n    let isfname = &isfname\n  endtry\n  let pre = matchstr(strpart(getline('.'), 0, col('.')-1), '.*\\f\\@<!')\n  let post = matchstr(strpart(getline('.'), col('.')), '\\f\\@!.*')\n  if s:synid() ==# hlID('rubyConstant')\n    let cfile = substitute(cfile,'\\.\\w\\+[?!=]\\=$','','')\n    let cfile = substitute(cfile,'^::','','')\n    let cfile = substitute(cfile,'::','/','g')\n    let cfile = substitute(cfile,'\\(\\u\\+\\)\\(\\u\\l\\)','\\1_\\2', 'g')\n    let cfile = substitute(cfile,'\\(\\l\\|\\d\\)\\(\\u\\)','\\1_\\2', 'g')\n    return tolower(cfile) . '.rb'\n  elseif getline('.') =~# '^\\s*require_relative\\s*\\([\"'']\\).*\\1\\s*$'\n    let cfile = expand('%:p:h') . '/' . matchstr(getline('.'),'\\([\"'']\\)\\zs.\\{-\\}\\ze\\1')\n    let cfile .= cfile !~# '\\.rb$' ? '.rb' : ''\n  elseif getline('.') =~# '^\\s*\\%(require[( ]\\|load[( ]\\|autoload[( ]:\\w\\+,\\)\\s*\\%(::\\)\\=File\\.expand_path(\\([\"'']\\)\\.\\./.*\\1,\\s*__FILE__)\\s*$'\n    let target = matchstr(getline('.'),'\\([\"'']\\)\\.\\.\\zs/.\\{-\\}\\ze\\1')\n    let cfile = expand('%:p:h') . target\n    let cfile .= cfile !~# '\\.rb$' ? '.rb' : ''\n  elseif getline('.') =~# '^\\s*\\%(require \\|load \\|autoload :\\w\\+,\\)\\s*\\([\"'']\\).*\\1\\s*$'\n    let cfile = matchstr(getline('.'),'\\([\"'']\\)\\zs.\\{-\\}\\ze\\1')\n    let cfile .= cfile !~# '\\.rb$' ? '.rb' : ''\n  elseif pre.post =~# '\\<File.expand_path[( ].*[''\"]\\{2\\}, *__FILE__\\>' && cfile =~# '^\\.\\.'\n    let cfile = expand('%:p:h') . strpart(cfile, 2)\n  else\n    return substitute(cfile, '\\C\\v^(.*):(\\d+)%(:in)=$', '+\\2 \\1', '')\n  endif\n  let cwdpat = '^\\M' . substitute(getcwd(), '[\\/]', '\\\\[\\\\/]', 'g').'\\ze\\[\\/]'\n  let cfile = substitute(cfile, cwdpat, '.', '')\n  if fnameescape(cfile) !=# cfile\n    return '+ '.fnameescape(cfile)\n  else\n    return cfile\n  endif\nendfunction\n\n\"\n\" Instructions for enabling \"matchit\" support:\n\"\n\" 1. Look for the latest \"matchit\" plugin at\n\"\n\"         http://www.vim.org/scripts/script.php?script_id=39\n\"\n\"    It is also packaged with Vim, in the $VIMRUNTIME/macros directory.\n\"\n\" 2. Copy \"matchit.txt\" into a \"doc\" directory (e.g. $HOME/.vim/doc).\n\"\n\" 3. Copy \"matchit.vim\" into a \"plugin\" directory (e.g. $HOME/.vim/plugin).\n\"\n\" 4. Ensure this file (ftplugin/ruby.vim) is installed.\n\"\n\" 5. Ensure you have this line in your $HOME/.vimrc:\n\"         filetype plugin on\n\"\n\" 6. Restart Vim and create the matchit documentation:\n\"\n\"         :helptags ~/.vim/doc\n\"\n\"    Now you can do \":help matchit\", and you should be able to use \"%\" on Ruby\n\"    keywords.  Try \":echo b:match_words\" to be sure.\n\"\n\" Thanks to Mark J. Reed for the instructions.  See \":help vimrc\" for the\n\" locations of plugin directories, etc., as there are several options, and it\n\" differs on Windows.  Email gsinclair@soyabean.com.au if you need help.\n\"\n\n\" vim: nowrap sw=2 sts=2 ts=8:\n", "\" Vim filetype plugin file\n\" Language: Zig\n\" Upstream: https://github.com/ziglang/zig.vim\n\n\" Only do this when not done yet for this buffer\nif exists(\"b:did_ftplugin\")\n  finish\nendif\n\nlet b:did_ftplugin = 1\n\nlet s:cpo_orig = &cpo\nset cpo&vim\n\ncompiler zig_build\n\n\" Match Zig builtin fns\nsetlocal iskeyword+=@-@\n\n\" Recommended code style, no tabs and 4-space indentation\nsetlocal expandtab\nsetlocal tabstop=8\nsetlocal softtabstop=4\nsetlocal shiftwidth=4\n\nsetlocal formatoptions-=t formatoptions+=croql\n\nsetlocal suffixesadd=.zig,.zir\n\nif has('comments')\n    setlocal comments=:///,://!,://,:\\\\\\\\\n    setlocal commentstring=//\\ %s\nendif\n\nif has('find_in_path')\n    let &l:includeexpr='substitute(v:fname, \"^([^.])$\", \"\\1.zig\", \"\")'\n    let &l:include='\\v(\\@import>|\\@cInclude>|^\\s*\\#\\s*include)'\nendif\n\nlet &l:define='\\v(<fn>|<const>|<var>|^\\s*\\#\\s*define)'\n\nif !exists('g:zig_std_dir') && exists('*json_decode') && executable('zig')\n    silent let s:env = system('zig env')\n    if v:shell_error == 0\n        let g:zig_std_dir = json_decode(s:env)['std_dir']\n    endif\n    unlet! s:env\nendif\n\nif exists('g:zig_std_dir')\n    let &l:path = &l:path . ',' . g:zig_std_dir\nendif\n\nlet b:undo_ftplugin =\n    \\ 'setl isk< et< ts< sts< sw< fo< sua< mp< com< cms< inex< inc< pa<'\n\naugroup vim-zig\n    autocmd! * <buffer>\n    autocmd BufWritePre <buffer> if get(g:, 'zig_fmt_autosave', 1) | call zig#fmt#Format() | endif\naugroup END\n\nlet b:undo_ftplugin .= '|au! vim-zig * <buffer>'\n\nlet &cpo = s:cpo_orig\nunlet s:cpo_orig\n\" vim: tabstop=8 shiftwidth=4 softtabstop=4 expandtab\n", "/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\t\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n#include \"vim.h\"\n\n/*\n * Vim originated from Stevie version 3.6 (Fish disk 217) by GRWalter (Fred)\n * It has been changed beyond recognition since then.\n *\n * Differences between version 8.2 and 9.0 can be found with \":help version9\".\n * Differences between version 7.4 and 8.x can be found with \":help version8\".\n * Differences between version 6.4 and 7.x can be found with \":help version7\".\n * Differences between version 5.8 and 6.x can be found with \":help version6\".\n * Differences between version 4.x and 5.x can be found with \":help version5\".\n * Differences between version 3.0 and 4.x can be found with \":help version4\".\n * All the remarks about older versions have been removed, they are not very\n * interesting.\n */\n\n#include \"version.h\"\n\nchar\t\t*Version = VIM_VERSION_SHORT;\nstatic char\t*mediumVersion = VIM_VERSION_MEDIUM;\n\n#if defined(HAVE_DATE_TIME) || defined(PROTO)\n# if (defined(VMS) && defined(VAXC)) || defined(PROTO)\nchar\tlongVersion[sizeof(VIM_VERSION_LONG_DATE) + sizeof(__DATE__)\n\t\t\t\t\t\t      + sizeof(__TIME__) + 3];\n\n    void\ninit_longVersion(void)\n{\n    /*\n     * Construct the long version string.  Necessary because\n     * VAX C can't concatenate strings in the preprocessor.\n     */\n    strcpy(longVersion, VIM_VERSION_LONG_DATE);\n#ifdef BUILD_DATE\n    strcat(longVersion, BUILD_DATE);\n#else\n    strcat(longVersion, __DATE__);\n    strcat(longVersion, \" \");\n    strcat(longVersion, __TIME__);\n#endif\n    strcat(longVersion, \")\");\n}\n\n# else\nchar\t*longVersion = NULL;\n\n    void\ninit_longVersion(void)\n{\n    if (longVersion != NULL)\n\treturn;\n\n#ifdef BUILD_DATE\n    char *date_time = BUILD_DATE;\n#else\n    char *date_time = __DATE__ \" \" __TIME__;\n#endif\n    char *msg = _(\"%s (%s, compiled %s)\");\n    size_t len = strlen(msg)\n\t+ strlen(VIM_VERSION_LONG_ONLY)\n\t+ strlen(VIM_VERSION_DATE_ONLY)\n\t+ strlen(date_time);\n\n    longVersion = alloc(len);\n    if (longVersion == NULL)\n\tlongVersion = VIM_VERSION_LONG;\n    else\n\tvim_snprintf(longVersion, len, msg,\n\t\tVIM_VERSION_LONG_ONLY, VIM_VERSION_DATE_ONLY, date_time);\n}\n# endif\n#else\nchar\t*longVersion = VIM_VERSION_LONG;\n\n    void\ninit_longVersion(void)\n{\n    // nothing to do\n}\n#endif\n\nstatic char *(features[]) =\n{\n#ifdef HAVE_ACL\n\t\"+acl\",\n#else\n\t\"-acl\",\n#endif\n#ifdef AMIGA\t\t// only for Amiga systems\n# ifdef FEAT_ARP\n\t\"+ARP\",\n# else\n\t\"-ARP\",\n# endif\n#endif\n#ifdef FEAT_ARABIC\n\t\"+arabic\",\n#else\n\t\"-arabic\",\n#endif\n\t\"+autocmd\",\n#ifdef FEAT_AUTOCHDIR\n       \"+autochdir\",\n#else\n       \"-autochdir\",\n#endif\n#ifdef FEAT_AUTOSERVERNAME\n\t\"+autoservername\",\n#else\n\t\"-autoservername\",\n#endif\n#ifdef FEAT_BEVAL_GUI\n\t\"+balloon_eval\",\n#else\n\t\"-balloon_eval\",\n#endif\n#ifdef FEAT_BEVAL_TERM\n\t\"+balloon_eval_term\",\n#else\n\t\"-balloon_eval_term\",\n#endif\n#ifdef FEAT_BROWSE\n\t\"+browse\",\n#else\n\t\"-browse\",\n#endif\n\t\"++builtin_terms\",\n#ifdef FEAT_BYTEOFF\n\t\"+byte_offset\",\n#else\n\t\"-byte_offset\",\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t\"+channel\",\n#else\n\t\"-channel\",\n#endif\n\t\"+cindent\",\n#ifdef FEAT_CLIENTSERVER\n\t\"+clientserver\",\n#else\n\t\"-clientserver\",\n#endif\n#ifdef FEAT_CLIPBOARD\n\t\"+clipboard\",\n#else\n\t\"-clipboard\",\n#endif\n\t\"+cmdline_compl\",\n\t\"+cmdline_hist\",\n\t\"+cmdline_info\",\n\t\"+comments\",\n#ifdef FEAT_CONCEAL\n\t\"+conceal\",\n#else\n\t\"-conceal\",\n#endif\n#ifdef FEAT_CRYPT\n\t\"+cryptv\",\n#else\n\t\"-cryptv\",\n#endif\n#ifdef FEAT_CSCOPE\n\t\"+cscope\",\n#else\n\t\"-cscope\",\n#endif\n\t\"+cursorbind\",\n#ifdef CURSOR_SHAPE\n\t\"+cursorshape\",\n#else\n\t\"-cursorshape\",\n#endif\n#if defined(FEAT_CON_DIALOG) && defined(FEAT_GUI_DIALOG)\n\t\"+dialog_con_gui\",\n#else\n# if defined(FEAT_CON_DIALOG)\n\t\"+dialog_con\",\n# else\n#  if defined(FEAT_GUI_DIALOG)\n\t\"+dialog_gui\",\n#  else\n\t\"-dialog\",\n#  endif\n# endif\n#endif\n#ifdef FEAT_DIFF\n\t\"+diff\",\n#else\n\t\"-diff\",\n#endif\n#ifdef FEAT_DIGRAPHS\n\t\"+digraphs\",\n#else\n\t\"-digraphs\",\n#endif\n#ifdef FEAT_GUI_MSWIN\n# ifdef FEAT_DIRECTX\n\t\"+directx\",\n# else\n\t\"-directx\",\n# endif\n#endif\n#ifdef FEAT_DND\n\t\"+dnd\",\n#else\n\t\"-dnd\",\n#endif\n\t\"-ebcdic\",\n#ifdef FEAT_EMACS_TAGS\n\t\"+emacs_tags\",\n#else\n\t\"-emacs_tags\",\n#endif\n#ifdef FEAT_EVAL\n\t\"+eval\",\n#else\n\t\"-eval\",\n#endif\n\t\"+ex_extra\",\n#ifdef FEAT_SEARCH_EXTRA\n\t\"+extra_search\",\n#else\n\t\"-extra_search\",\n#endif\n\t\"-farsi\",\n\t\"+file_in_path\",\n#ifdef FEAT_FIND_ID\n\t\"+find_in_path\",\n#else\n\t\"-find_in_path\",\n#endif\n\t\"+float\",\n#ifdef FEAT_FOLDING\n\t\"+folding\",\n#else\n\t\"-folding\",\n#endif\n\t\"-footer\",\n\t// only interesting on Unix systems\n#if !defined(USE_SYSTEM) && defined(UNIX)\n\t\"+fork()\",\n#endif\n#ifdef FEAT_GETTEXT\n# ifdef DYNAMIC_GETTEXT\n\t\"+gettext/dyn\",\n# else\n\t\"+gettext\",\n# endif\n#else\n\t\"-gettext\",\n#endif\n\t\"-hangul_input\",\n#if (defined(HAVE_ICONV_H) && defined(USE_ICONV)) || defined(DYNAMIC_ICONV)\n# ifdef DYNAMIC_ICONV\n\t\"+iconv/dyn\",\n# else\n\t\"+iconv\",\n# endif\n#else\n\t\"-iconv\",\n#endif\n\t\"+insert_expand\",\n#ifdef FEAT_IPV6\n\t\"+ipv6\",\n#else\n\t\"-ipv6\",\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t\"+job\",\n#else\n\t\"-job\",\n#endif\n\t\"+jumplist\",\n#ifdef FEAT_KEYMAP\n\t\"+keymap\",\n#else\n\t\"-keymap\",\n#endif\n#ifdef FEAT_EVAL\n\t\"+lambda\",\n#else\n\t\"-lambda\",\n#endif\n#ifdef FEAT_LANGMAP\n\t\"+langmap\",\n#else\n\t\"-langmap\",\n#endif\n#ifdef FEAT_LIBCALL\n\t\"+libcall\",\n#else\n\t\"-libcall\",\n#endif\n#ifdef FEAT_LINEBREAK\n\t\"+linebreak\",\n#else\n\t\"-linebreak\",\n#endif\n\t\"+lispindent\",\n\t\"+listcmds\",\n\t\"+localmap\",\n#ifdef FEAT_LUA\n# ifdef DYNAMIC_LUA\n\t\"+lua/dyn\",\n# else\n\t\"+lua\",\n# endif\n#else\n\t\"-lua\",\n#endif\n#ifdef FEAT_MENU\n\t\"+menu\",\n#else\n\t\"-menu\",\n#endif\n#ifdef FEAT_SESSION\n\t\"+mksession\",\n#else\n\t\"-mksession\",\n#endif\n\t\"+modify_fname\",\n\t\"+mouse\",\n#ifdef FEAT_MOUSESHAPE\n\t\"+mouseshape\",\n#else\n\t\"-mouseshape\",\n#endif\n\n#if defined(UNIX) || defined(VMS)\n# ifdef FEAT_MOUSE_DEC\n\t\"+mouse_dec\",\n# else\n\t\"-mouse_dec\",\n# endif\n# ifdef FEAT_MOUSE_GPM\n#  ifdef DYNAMIC_GPM\n\t\"+mouse_gpm/dyn\",\n#  else\n\t\"+mouse_gpm\",\n#  endif\n# else\n\t\"-mouse_gpm\",\n# endif\n# ifdef FEAT_MOUSE_JSB\n\t\"+mouse_jsbterm\",\n# else\n\t\"-mouse_jsbterm\",\n# endif\n# ifdef FEAT_MOUSE_NET\n\t\"+mouse_netterm\",\n# else\n\t\"-mouse_netterm\",\n# endif\n#endif\n\n#ifdef __QNX__\n# ifdef FEAT_MOUSE_PTERM\n\t\"+mouse_pterm\",\n# else\n\t\"-mouse_pterm\",\n# endif\n#endif\n\n#if defined(UNIX) || defined(VMS)\n\t\"+mouse_sgr\",\n# ifdef FEAT_SYSMOUSE\n\t\"+mouse_sysmouse\",\n# else\n\t\"-mouse_sysmouse\",\n# endif\n# ifdef FEAT_MOUSE_URXVT\n\t\"+mouse_urxvt\",\n# else\n\t\"-mouse_urxvt\",\n# endif\n\t\"+mouse_xterm\",\n#endif\n\n#ifdef FEAT_MBYTE_IME\n# ifdef DYNAMIC_IME\n\t\"+multi_byte_ime/dyn\",\n# else\n\t\"+multi_byte_ime\",\n# endif\n#else\n\t\"+multi_byte\",\n#endif\n#ifdef FEAT_MULTI_LANG\n\t\"+multi_lang\",\n#else\n\t\"-multi_lang\",\n#endif\n#ifdef FEAT_MZSCHEME\n# ifdef DYNAMIC_MZSCHEME\n\t\"+mzscheme/dyn\",\n# else\n\t\"+mzscheme\",\n# endif\n#else\n\t\"-mzscheme\",\n#endif\n#ifdef FEAT_NETBEANS_INTG\n\t\"+netbeans_intg\",\n#else\n\t\"-netbeans_intg\",\n#endif\n\t\"+num64\",\n#ifdef FEAT_GUI_MSWIN\n# ifdef FEAT_OLE\n\t\"+ole\",\n# else\n\t\"-ole\",\n# endif\n#endif\n#ifdef FEAT_EVAL\n\t\"+packages\",\n#else\n\t\"-packages\",\n#endif\n\t\"+path_extra\",\n#ifdef FEAT_PERL\n# ifdef DYNAMIC_PERL\n\t\"+perl/dyn\",\n# else\n\t\"+perl\",\n# endif\n#else\n\t\"-perl\",\n#endif\n#ifdef FEAT_PERSISTENT_UNDO\n\t\"+persistent_undo\",\n#else\n\t\"-persistent_undo\",\n#endif\n#ifdef FEAT_PROP_POPUP\n\t\"+popupwin\",\n#else\n\t\"-popupwin\",\n#endif\n#ifdef FEAT_PRINTER\n# ifdef FEAT_POSTSCRIPT\n\t\"+postscript\",\n# else\n\t\"-postscript\",\n# endif\n\t\"+printer\",\n#else\n\t\"-printer\",\n#endif\n#ifdef FEAT_PROFILE\n\t\"+profile\",\n#else\n\t\"-profile\",\n#endif\n#ifdef FEAT_PYTHON\n# ifdef DYNAMIC_PYTHON\n\t\"+python/dyn\",\n# else\n\t\"+python\",\n# endif\n#else\n\t\"-python\",\n#endif\n#ifdef FEAT_PYTHON3\n# ifdef DYNAMIC_PYTHON3\n#  ifdef DYNAMIC_PYTHON3_STABLE_ABI\n\t\"+python3/dyn-stable\",\n#  else\n\t\"+python3/dyn\",\n#  endif\n# else\n\t\"+python3\",\n# endif\n#else\n\t\"-python3\",\n#endif\n#ifdef FEAT_QUICKFIX\n\t\"+quickfix\",\n#else\n\t\"-quickfix\",\n#endif\n#ifdef FEAT_RELTIME\n\t\"+reltime\",\n#else\n\t\"-reltime\",\n#endif\n#ifdef FEAT_RIGHTLEFT\n\t\"+rightleft\",\n#else\n\t\"-rightleft\",\n#endif\n#ifdef FEAT_RUBY\n# ifdef DYNAMIC_RUBY\n\t\"+ruby/dyn\",\n# else\n\t\"+ruby\",\n# endif\n#else\n\t\"-ruby\",\n#endif\n\t\"+scrollbind\",\n#ifdef FEAT_SIGNS\n\t\"+signs\",\n#else\n\t\"-signs\",\n#endif\n\t\"+smartindent\",\n#ifdef FEAT_SODIUM\n# ifdef DYNAMIC_SODIUM\n\t\"+sodium/dyn\",\n# else\n\t\"+sodium\",\n# endif\n#else\n\t\"-sodium\",\n#endif\n#ifdef FEAT_SOUND\n\t\"+sound\",\n#else\n\t\"-sound\",\n#endif\n#ifdef FEAT_SPELL\n\t\"+spell\",\n#else\n\t\"-spell\",\n#endif\n#ifdef STARTUPTIME\n\t\"+startuptime\",\n#else\n\t\"-startuptime\",\n#endif\n#ifdef FEAT_STL_OPT\n\t\"+statusline\",\n#else\n\t\"-statusline\",\n#endif\n\t\"-sun_workshop\",\n#ifdef FEAT_SYN_HL\n\t\"+syntax\",\n#else\n\t\"-syntax\",\n#endif\n\t    // only interesting on Unix systems\n#if defined(USE_SYSTEM) && defined(UNIX)\n\t\"+system()\",\n#endif\n\t\"+tag_binary\",\n\t\"-tag_old_static\",\n\t\"-tag_any_white\",\n#ifdef FEAT_TCL\n# ifdef DYNAMIC_TCL\n\t\"+tcl/dyn\",\n# else\n\t\"+tcl\",\n# endif\n#else\n\t\"-tcl\",\n#endif\n#ifdef FEAT_TERMGUICOLORS\n\t\"+termguicolors\",\n#else\n\t\"-termguicolors\",\n#endif\n#ifdef FEAT_TERMINAL\n\t\"+terminal\",\n#else\n\t\"-terminal\",\n#endif\n#if defined(UNIX)\n// only Unix can have terminfo instead of termcap\n# ifdef TERMINFO\n\t\"+terminfo\",\n# else\n\t\"-terminfo\",\n# endif\n#endif\n#ifdef FEAT_TERMRESPONSE\n\t\"+termresponse\",\n#else\n\t\"-termresponse\",\n#endif\n\t\"+textobjects\",\n#ifdef FEAT_PROP_POPUP\n\t\"+textprop\",\n#else\n\t\"-textprop\",\n#endif\n#if !defined(UNIX)\n// unix always includes termcap support\n# ifdef HAVE_TGETENT\n\t\"+tgetent\",\n# else\n\t\"-tgetent\",\n# endif\n#endif\n#ifdef FEAT_TIMERS\n\t\"+timers\",\n#else\n\t\"-timers\",\n#endif\n\t\"+title\",\n#ifdef FEAT_TOOLBAR\n\t\"+toolbar\",\n#else\n\t\"-toolbar\",\n#endif\n\t\"+user_commands\",\n#ifdef FEAT_VARTABS\n\t\"+vartabs\",\n#else\n\t\"-vartabs\",\n#endif\n\t\"+vertsplit\",\n\t\"+vim9script\",\n#ifdef FEAT_VIMINFO\n\t\"+viminfo\",\n#else\n\t\"-viminfo\",\n#endif\n\t\"+virtualedit\",\n\t\"+visual\",\n\t\"+visualextra\",\n\t\"+vreplace\",\n#ifdef MSWIN\n# ifdef FEAT_VTP\n\t\"+vtp\",\n# else\n\t\"-vtp\",\n# endif\n#endif\n\t\"+wildignore\",\n\t\"+wildmenu\",\n\t\"+windows\",\n#ifdef FEAT_WRITEBACKUP\n\t\"+writebackup\",\n#else\n\t\"-writebackup\",\n#endif\n#if defined(UNIX) || defined(VMS)\n# ifdef FEAT_X11\n\t\"+X11\",\n# else\n\t\"-X11\",\n# endif\n#endif\n#ifdef FEAT_XFONTSET\n\t\"+xfontset\",\n#else\n\t\"-xfontset\",\n#endif\n#ifdef FEAT_XIM\n\t\"+xim\",\n#else\n\t\"-xim\",\n#endif\n#if defined(MSWIN)\n# ifdef FEAT_XPM_W32\n\t\"+xpm_w32\",\n# else\n\t\"-xpm_w32\",\n# endif\n#elif defined(HAVE_XPM)\n\t\"+xpm\",\n#else\n\t\"-xpm\",\n#endif\n#if defined(UNIX) || defined(VMS)\n# if defined(USE_XSMP_INTERACT)\n\t\"+xsmp_interact\",\n# elif defined(USE_XSMP)\n\t\"+xsmp\",\n# else\n\t\"-xsmp\",\n# endif\n# ifdef FEAT_XCLIPBOARD\n\t\"+xterm_clipboard\",\n# else\n\t\"-xterm_clipboard\",\n# endif\n#endif\n#ifdef FEAT_XTERM_SAVE\n\t\"+xterm_save\",\n#else\n\t\"-xterm_save\",\n#endif\n\tNULL\n};\n\nstatic int included_patches[] =\n{   /* Add new patch number below this line */\n/**/\n    1832,\n/**/\n    1831,\n/**/\n    1830,\n/**/\n    1829,\n/**/\n    1828,\n/**/\n    1827,\n/**/\n    1826,\n/**/\n    1825,\n/**/\n    1824,\n/**/\n    1823,\n/**/\n    1822,\n/**/\n    1821,\n/**/\n    1820,\n/**/\n    1819,\n/**/\n    1818,\n/**/\n    1817,\n/**/\n    1816,\n/**/\n    1815,\n/**/\n    1814,\n/**/\n    1813,\n/**/\n    1812,\n/**/\n    1811,\n/**/\n    1810,\n/**/\n    1809,\n/**/\n    1808,\n/**/\n    1807,\n/**/\n    1806,\n/**/\n    1805,\n/**/\n    1804,\n/**/\n    1803,\n/**/\n    1802,\n/**/\n    1801,\n/**/\n    1800,\n/**/\n    1799,\n/**/\n    1798,\n/**/\n    1797,\n/**/\n    1796,\n/**/\n    1795,\n/**/\n    1794,\n/**/\n    1793,\n/**/\n    1792,\n/**/\n    1791,\n/**/\n    1790,\n/**/\n    1789,\n/**/\n    1788,\n/**/\n    1787,\n/**/\n    1786,\n/**/\n    1785,\n/**/\n    1784,\n/**/\n    1783,\n/**/\n    1782,\n/**/\n    1781,\n/**/\n    1780,\n/**/\n    1779,\n/**/\n    1778,\n/**/\n    1777,\n/**/\n    1776,\n/**/\n    1775,\n/**/\n    1774,\n/**/\n    1773,\n/**/\n    1772,\n/**/\n    1771,\n/**/\n    1770,\n/**/\n    1769,\n/**/\n    1768,\n/**/\n    1767,\n/**/\n    1766,\n/**/\n    1765,\n/**/\n    1764,\n/**/\n    1763,\n/**/\n    1762,\n/**/\n    1761,\n/**/\n    1760,\n/**/\n    1759,\n/**/\n    1758,\n/**/\n    1757,\n/**/\n    1756,\n/**/\n    1755,\n/**/\n    1754,\n/**/\n    1753,\n/**/\n    1752,\n/**/\n    1751,\n/**/\n    1750,\n/**/\n    1749,\n/**/\n    1748,\n/**/\n    1747,\n/**/\n    1746,\n/**/\n    1745,\n/**/\n    1744,\n/**/\n    1743,\n/**/\n    1742,\n/**/\n    1741,\n/**/\n    1740,\n/**/\n    1739,\n/**/\n    1738,\n/**/\n    1737,\n/**/\n    1736,\n/**/\n    1735,\n/**/\n    1734,\n/**/\n    1733,\n/**/\n    1732,\n/**/\n    1731,\n/**/\n    1730,\n/**/\n    1729,\n/**/\n    1728,\n/**/\n    1727,\n/**/\n    1726,\n/**/\n    1725,\n/**/\n    1724,\n/**/\n    1723,\n/**/\n    1722,\n/**/\n    1721,\n/**/\n    1720,\n/**/\n    1719,\n/**/\n    1718,\n/**/\n    1717,\n/**/\n    1716,\n/**/\n    1715,\n/**/\n    1714,\n/**/\n    1713,\n/**/\n    1712,\n/**/\n    1711,\n/**/\n    1710,\n/**/\n    1709,\n/**/\n    1708,\n/**/\n    1707,\n/**/\n    1706,\n/**/\n    1705,\n/**/\n    1704,\n/**/\n    1703,\n/**/\n    1702,\n/**/\n    1701,\n/**/\n    1700,\n/**/\n    1699,\n/**/\n    1698,\n/**/\n    1697,\n/**/\n    1696,\n/**/\n    1695,\n/**/\n    1694,\n/**/\n    1693,\n/**/\n    1692,\n/**/\n    1691,\n/**/\n    1690,\n/**/\n    1689,\n/**/\n    1688,\n/**/\n    1687,\n/**/\n    1686,\n/**/\n    1685,\n/**/\n    1684,\n/**/\n    1683,\n/**/\n    1682,\n/**/\n    1681,\n/**/\n    1680,\n/**/\n    1679,\n/**/\n    1678,\n/**/\n    1677,\n/**/\n    1676,\n/**/\n    1675,\n/**/\n    1674,\n/**/\n    1673,\n/**/\n    1672,\n/**/\n    1671,\n/**/\n    1670,\n/**/\n    1669,\n/**/\n    1668,\n/**/\n    1667,\n/**/\n    1666,\n/**/\n    1665,\n/**/\n    1664,\n/**/\n    1663,\n/**/\n    1662,\n/**/\n    1661,\n/**/\n    1660,\n/**/\n    1659,\n/**/\n    1658,\n/**/\n    1657,\n/**/\n    1656,\n/**/\n    1655,\n/**/\n    1654,\n/**/\n    1653,\n/**/\n    1652,\n/**/\n    1651,\n/**/\n    1650,\n/**/\n    1649,\n/**/\n    1648,\n/**/\n    1647,\n/**/\n    1646,\n/**/\n    1645,\n/**/\n    1644,\n/**/\n    1643,\n/**/\n    1642,\n/**/\n    1641,\n/**/\n    1640,\n/**/\n    1639,\n/**/\n    1638,\n/**/\n    1637,\n/**/\n    1636,\n/**/\n    1635,\n/**/\n    1634,\n/**/\n    1633,\n/**/\n    1632,\n/**/\n    1631,\n/**/\n    1630,\n/**/\n    1629,\n/**/\n    1628,\n/**/\n    1627,\n/**/\n    1626,\n/**/\n    1625,\n/**/\n    1624,\n/**/\n    1623,\n/**/\n    1622,\n/**/\n    1621,\n/**/\n    1620,\n/**/\n    1619,\n/**/\n    1618,\n/**/\n    1617,\n/**/\n    1616,\n/**/\n    1615,\n/**/\n    1614,\n/**/\n    1613,\n/**/\n    1612,\n/**/\n    1611,\n/**/\n    1610,\n/**/\n    1609,\n/**/\n    1608,\n/**/\n    1607,\n/**/\n    1606,\n/**/\n    1605,\n/**/\n    1604,\n/**/\n    1603,\n/**/\n    1602,\n/**/\n    1601,\n/**/\n    1600,\n/**/\n    1599,\n/**/\n    1598,\n/**/\n    1597,\n/**/\n    1596,\n/**/\n    1595,\n/**/\n    1594,\n/**/\n    1593,\n/**/\n    1592,\n/**/\n    1591,\n/**/\n    1590,\n/**/\n    1589,\n/**/\n    1588,\n/**/\n    1587,\n/**/\n    1586,\n/**/\n    1585,\n/**/\n    1584,\n/**/\n    1583,\n/**/\n    1582,\n/**/\n    1581,\n/**/\n    1580,\n/**/\n    1579,\n/**/\n    1578,\n/**/\n    1577,\n/**/\n    1576,\n/**/\n    1575,\n/**/\n    1574,\n/**/\n    1573,\n/**/\n    1572,\n/**/\n    1571,\n/**/\n    1570,\n/**/\n    1569,\n/**/\n    1568,\n/**/\n    1567,\n/**/\n    1566,\n/**/\n    1565,\n/**/\n    1564,\n/**/\n    1563,\n/**/\n    1562,\n/**/\n    1561,\n/**/\n    1560,\n/**/\n    1559,\n/**/\n    1558,\n/**/\n    1557,\n/**/\n    1556,\n/**/\n    1555,\n/**/\n    1554,\n/**/\n    1553,\n/**/\n    1552,\n/**/\n    1551,\n/**/\n    1550,\n/**/\n    1549,\n/**/\n    1548,\n/**/\n    1547,\n/**/\n    1546,\n/**/\n    1545,\n/**/\n    1544,\n/**/\n    1543,\n/**/\n    1542,\n/**/\n    1541,\n/**/\n    1540,\n/**/\n    1539,\n/**/\n    1538,\n/**/\n    1537,\n/**/\n    1536,\n/**/\n    1535,\n/**/\n    1534,\n/**/\n    1533,\n/**/\n    1532,\n/**/\n    1531,\n/**/\n    1530,\n/**/\n    1529,\n/**/\n    1528,\n/**/\n    1527,\n/**/\n    1526,\n/**/\n    1525,\n/**/\n    1524,\n/**/\n    1523,\n/**/\n    1522,\n/**/\n    1521,\n/**/\n    1520,\n/**/\n    1519,\n/**/\n    1518,\n/**/\n    1517,\n/**/\n    1516,\n/**/\n    1515,\n/**/\n    1514,\n/**/\n    1513,\n/**/\n    1512,\n/**/\n    1511,\n/**/\n    1510,\n/**/\n    1509,\n/**/\n    1508,\n/**/\n    1507,\n/**/\n    1506,\n/**/\n    1505,\n/**/\n    1504,\n/**/\n    1503,\n/**/\n    1502,\n/**/\n    1501,\n/**/\n    1500,\n/**/\n    1499,\n/**/\n    1498,\n/**/\n    1497,\n/**/\n    1496,\n/**/\n    1495,\n/**/\n    1494,\n/**/\n    1493,\n/**/\n    1492,\n/**/\n    1491,\n/**/\n    1490,\n/**/\n    1489,\n/**/\n    1488,\n/**/\n    1487,\n/**/\n    1486,\n/**/\n    1485,\n/**/\n    1484,\n/**/\n    1483,\n/**/\n    1482,\n/**/\n    1481,\n/**/\n    1480,\n/**/\n    1479,\n/**/\n    1478,\n/**/\n    1477,\n/**/\n    1476,\n/**/\n    1475,\n/**/\n    1474,\n/**/\n    1473,\n/**/\n    1472,\n/**/\n    1471,\n/**/\n    1470,\n/**/\n    1469,\n/**/\n    1468,\n/**/\n    1467,\n/**/\n    1466,\n/**/\n    1465,\n/**/\n    1464,\n/**/\n    1463,\n/**/\n    1462,\n/**/\n    1461,\n/**/\n    1460,\n/**/\n    1459,\n/**/\n    1458,\n/**/\n    1457,\n/**/\n    1456,\n/**/\n    1455,\n/**/\n    1454,\n/**/\n    1453,\n/**/\n    1452,\n/**/\n    1451,\n/**/\n    1450,\n/**/\n    1449,\n/**/\n    1448,\n/**/\n    1447,\n/**/\n    1446,\n/**/\n    1445,\n/**/\n    1444,\n/**/\n    1443,\n/**/\n    1442,\n/**/\n    1441,\n/**/\n    1440,\n/**/\n    1439,\n/**/\n    1438,\n/**/\n    1437,\n/**/\n    1436,\n/**/\n    1435,\n/**/\n    1434,\n/**/\n    1433,\n/**/\n    1432,\n/**/\n    1431,\n/**/\n    1430,\n/**/\n    1429,\n/**/\n    1428,\n/**/\n    1427,\n/**/\n    1426,\n/**/\n    1425,\n/**/\n    1424,\n/**/\n    1423,\n/**/\n    1422,\n/**/\n    1421,\n/**/\n    1420,\n/**/\n    1419,\n/**/\n    1418,\n/**/\n    1417,\n/**/\n    1416,\n/**/\n    1415,\n/**/\n    1414,\n/**/\n    1413,\n/**/\n    1412,\n/**/\n    1411,\n/**/\n    1410,\n/**/\n    1409,\n/**/\n    1408,\n/**/\n    1407,\n/**/\n    1406,\n/**/\n    1405,\n/**/\n    1404,\n/**/\n    1403,\n/**/\n    1402,\n/**/\n    1401,\n/**/\n    1400,\n/**/\n    1399,\n/**/\n    1398,\n/**/\n    1397,\n/**/\n    1396,\n/**/\n    1395,\n/**/\n    1394,\n/**/\n    1393,\n/**/\n    1392,\n/**/\n    1391,\n/**/\n    1390,\n/**/\n    1389,\n/**/\n    1388,\n/**/\n    1387,\n/**/\n    1386,\n/**/\n    1385,\n/**/\n    1384,\n/**/\n    1383,\n/**/\n    1382,\n/**/\n    1381,\n/**/\n    1380,\n/**/\n    1379,\n/**/\n    1378,\n/**/\n    1377,\n/**/\n    1376,\n/**/\n    1375,\n/**/\n    1374,\n/**/\n    1373,\n/**/\n    1372,\n/**/\n    1371,\n/**/\n    1370,\n/**/\n    1369,\n/**/\n    1368,\n/**/\n    1367,\n/**/\n    1366,\n/**/\n    1365,\n/**/\n    1364,\n/**/\n    1363,\n/**/\n    1362,\n/**/\n    1361,\n/**/\n    1360,\n/**/\n    1359,\n/**/\n    1358,\n/**/\n    1357,\n/**/\n    1356,\n/**/\n    1355,\n/**/\n    1354,\n/**/\n    1353,\n/**/\n    1352,\n/**/\n    1351,\n/**/\n    1350,\n/**/\n    1349,\n/**/\n    1348,\n/**/\n    1347,\n/**/\n    1346,\n/**/\n    1345,\n/**/\n    1344,\n/**/\n    1343,\n/**/\n    1342,\n/**/\n    1341,\n/**/\n    1340,\n/**/\n    1339,\n/**/\n    1338,\n/**/\n    1337,\n/**/\n    1336,\n/**/\n    1335,\n/**/\n    1334,\n/**/\n    1333,\n/**/\n    1332,\n/**/\n    1331,\n/**/\n    1330,\n/**/\n    1329,\n/**/\n    1328,\n/**/\n    1327,\n/**/\n    1326,\n/**/\n    1325,\n/**/\n    1324,\n/**/\n    1323,\n/**/\n    1322,\n/**/\n    1321,\n/**/\n    1320,\n/**/\n    1319,\n/**/\n    1318,\n/**/\n    1317,\n/**/\n    1316,\n/**/\n    1315,\n/**/\n    1314,\n/**/\n    1313,\n/**/\n    1312,\n/**/\n    1311,\n/**/\n    1310,\n/**/\n    1309,\n/**/\n    1308,\n/**/\n    1307,\n/**/\n    1306,\n/**/\n    1305,\n/**/\n    1304,\n/**/\n    1303,\n/**/\n    1302,\n/**/\n    1301,\n/**/\n    1300,\n/**/\n    1299,\n/**/\n    1298,\n/**/\n    1297,\n/**/\n    1296,\n/**/\n    1295,\n/**/\n    1294,\n/**/\n    1293,\n/**/\n    1292,\n/**/\n    1291,\n/**/\n    1290,\n/**/\n    1289,\n/**/\n    1288,\n/**/\n    1287,\n/**/\n    1286,\n/**/\n    1285,\n/**/\n    1284,\n/**/\n    1283,\n/**/\n    1282,\n/**/\n    1281,\n/**/\n    1280,\n/**/\n    1279,\n/**/\n    1278,\n/**/\n    1277,\n/**/\n    1276,\n/**/\n    1275,\n/**/\n    1274,\n/**/\n    1273,\n/**/\n    1272,\n/**/\n    1271,\n/**/\n    1270,\n/**/\n    1269,\n/**/\n    1268,\n/**/\n    1267,\n/**/\n    1266,\n/**/\n    1265,\n/**/\n    1264,\n/**/\n    1263,\n/**/\n    1262,\n/**/\n    1261,\n/**/\n    1260,\n/**/\n    1259,\n/**/\n    1258,\n/**/\n    1257,\n/**/\n    1256,\n/**/\n    1255,\n/**/\n    1254,\n/**/\n    1253,\n/**/\n    1252,\n/**/\n    1251,\n/**/\n    1250,\n/**/\n    1249,\n/**/\n    1248,\n/**/\n    1247,\n/**/\n    1246,\n/**/\n    1245,\n/**/\n    1244,\n/**/\n    1243,\n/**/\n    1242,\n/**/\n    1241,\n/**/\n    1240,\n/**/\n    1239,\n/**/\n    1238,\n/**/\n    1237,\n/**/\n    1236,\n/**/\n    1235,\n/**/\n    1234,\n/**/\n    1233,\n/**/\n    1232,\n/**/\n    1231,\n/**/\n    1230,\n/**/\n    1229,\n/**/\n    1228,\n/**/\n    1227,\n/**/\n    1226,\n/**/\n    1225,\n/**/\n    1224,\n/**/\n    1223,\n/**/\n    1222,\n/**/\n    1221,\n/**/\n    1220,\n/**/\n    1219,\n/**/\n    1218,\n/**/\n    1217,\n/**/\n    1216,\n/**/\n    1215,\n/**/\n    1214,\n/**/\n    1213,\n/**/\n    1212,\n/**/\n    1211,\n/**/\n    1210,\n/**/\n    1209,\n/**/\n    1208,\n/**/\n    1207,\n/**/\n    1206,\n/**/\n    1205,\n/**/\n    1204,\n/**/\n    1203,\n/**/\n    1202,\n/**/\n    1201,\n/**/\n    1200,\n/**/\n    1199,\n/**/\n    1198,\n/**/\n    1197,\n/**/\n    1196,\n/**/\n    1195,\n/**/\n    1194,\n/**/\n    1193,\n/**/\n    1192,\n/**/\n    1191,\n/**/\n    1190,\n/**/\n    1189,\n/**/\n    1188,\n/**/\n    1187,\n/**/\n    1186,\n/**/\n    1185,\n/**/\n    1184,\n/**/\n    1183,\n/**/\n    1182,\n/**/\n    1181,\n/**/\n    1180,\n/**/\n    1179,\n/**/\n    1178,\n/**/\n    1177,\n/**/\n    1176,\n/**/\n    1175,\n/**/\n    1174,\n/**/\n    1173,\n/**/\n    1172,\n/**/\n    1171,\n/**/\n    1170,\n/**/\n    1169,\n/**/\n    1168,\n/**/\n    1167,\n/**/\n    1166,\n/**/\n    1165,\n/**/\n    1164,\n/**/\n    1163,\n/**/\n    1162,\n/**/\n    1161,\n/**/\n    1160,\n/**/\n    1159,\n/**/\n    1158,\n/**/\n    1157,\n/**/\n    1156,\n/**/\n    1155,\n/**/\n    1154,\n/**/\n    1153,\n/**/\n    1152,\n/**/\n    1151,\n/**/\n    1150,\n/**/\n    1149,\n/**/\n    1148,\n/**/\n    1147,\n/**/\n    1146,\n/**/\n    1145,\n/**/\n    1144,\n/**/\n    1143,\n/**/\n    1142,\n/**/\n    1141,\n/**/\n    1140,\n/**/\n    1139,\n/**/\n    1138,\n/**/\n    1137,\n/**/\n    1136,\n/**/\n    1135,\n/**/\n    1134,\n/**/\n    1133,\n/**/\n    1132,\n/**/\n    1131,\n/**/\n    1130,\n/**/\n    1129,\n/**/\n    1128,\n/**/\n    1127,\n/**/\n    1126,\n/**/\n    1125,\n/**/\n    1124,\n/**/\n    1123,\n/**/\n    1122,\n/**/\n    1121,\n/**/\n    1120,\n/**/\n    1119,\n/**/\n    1118,\n/**/\n    1117,\n/**/\n    1116,\n/**/\n    1115,\n/**/\n    1114,\n/**/\n    1113,\n/**/\n    1112,\n/**/\n    1111,\n/**/\n    1110,\n/**/\n    1109,\n/**/\n    1108,\n/**/\n    1107,\n/**/\n    1106,\n/**/\n    1105,\n/**/\n    1104,\n/**/\n    1103,\n/**/\n    1102,\n/**/\n    1101,\n/**/\n    1100,\n/**/\n    1099,\n/**/\n    1098,\n/**/\n    1097,\n/**/\n    1096,\n/**/\n    1095,\n/**/\n    1094,\n/**/\n    1093,\n/**/\n    1092,\n/**/\n    1091,\n/**/\n    1090,\n/**/\n    1089,\n/**/\n    1088,\n/**/\n    1087,\n/**/\n    1086,\n/**/\n    1085,\n/**/\n    1084,\n/**/\n    1083,\n/**/\n    1082,\n/**/\n    1081,\n/**/\n    1080,\n/**/\n    1079,\n/**/\n    1078,\n/**/\n    1077,\n/**/\n    1076,\n/**/\n    1075,\n/**/\n    1074,\n/**/\n    1073,\n/**/\n    1072,\n/**/\n    1071,\n/**/\n    1070,\n/**/\n    1069,\n/**/\n    1068,\n/**/\n    1067,\n/**/\n    1066,\n/**/\n    1065,\n/**/\n    1064,\n/**/\n    1063,\n/**/\n    1062,\n/**/\n    1061,\n/**/\n    1060,\n/**/\n    1059,\n/**/\n    1058,\n/**/\n    1057,\n/**/\n    1056,\n/**/\n    1055,\n/**/\n    1054,\n/**/\n    1053,\n/**/\n    1052,\n/**/\n    1051,\n/**/\n    1050,\n/**/\n    1049,\n/**/\n    1048,\n/**/\n    1047,\n/**/\n    1046,\n/**/\n    1045,\n/**/\n    1044,\n/**/\n    1043,\n/**/\n    1042,\n/**/\n    1041,\n/**/\n    1040,\n/**/\n    1039,\n/**/\n    1038,\n/**/\n    1037,\n/**/\n    1036,\n/**/\n    1035,\n/**/\n    1034,\n/**/\n    1033,\n/**/\n    1032,\n/**/\n    1031,\n/**/\n    1030,\n/**/\n    1029,\n/**/\n    1028,\n/**/\n    1027,\n/**/\n    1026,\n/**/\n    1025,\n/**/\n    1024,\n/**/\n    1023,\n/**/\n    1022,\n/**/\n    1021,\n/**/\n    1020,\n/**/\n    1019,\n/**/\n    1018,\n/**/\n    1017,\n/**/\n    1016,\n/**/\n    1015,\n/**/\n    1014,\n/**/\n    1013,\n/**/\n    1012,\n/**/\n    1011,\n/**/\n    1010,\n/**/\n    1009,\n/**/\n    1008,\n/**/\n    1007,\n/**/\n    1006,\n/**/\n    1005,\n/**/\n    1004,\n/**/\n    1003,\n/**/\n    1002,\n/**/\n    1001,\n/**/\n    1000,\n/**/\n    999,\n/**/\n    998,\n/**/\n    997,\n/**/\n    996,\n/**/\n    995,\n/**/\n    994,\n/**/\n    993,\n/**/\n    992,\n/**/\n    991,\n/**/\n    990,\n/**/\n    989,\n/**/\n    988,\n/**/\n    987,\n/**/\n    986,\n/**/\n    985,\n/**/\n    984,\n/**/\n    983,\n/**/\n    982,\n/**/\n    981,\n/**/\n    980,\n/**/\n    979,\n/**/\n    978,\n/**/\n    977,\n/**/\n    976,\n/**/\n    975,\n/**/\n    974,\n/**/\n    973,\n/**/\n    972,\n/**/\n    971,\n/**/\n    970,\n/**/\n    969,\n/**/\n    968,\n/**/\n    967,\n/**/\n    966,\n/**/\n    965,\n/**/\n    964,\n/**/\n    963,\n/**/\n    962,\n/**/\n    961,\n/**/\n    960,\n/**/\n    959,\n/**/\n    958,\n/**/\n    957,\n/**/\n    956,\n/**/\n    955,\n/**/\n    954,\n/**/\n    953,\n/**/\n    952,\n/**/\n    951,\n/**/\n    950,\n/**/\n    949,\n/**/\n    948,\n/**/\n    947,\n/**/\n    946,\n/**/\n    945,\n/**/\n    944,\n/**/\n    943,\n/**/\n    942,\n/**/\n    941,\n/**/\n    940,\n/**/\n    939,\n/**/\n    938,\n/**/\n    937,\n/**/\n    936,\n/**/\n    935,\n/**/\n    934,\n/**/\n    933,\n/**/\n    932,\n/**/\n    931,\n/**/\n    930,\n/**/\n    929,\n/**/\n    928,\n/**/\n    927,\n/**/\n    926,\n/**/\n    925,\n/**/\n    924,\n/**/\n    923,\n/**/\n    922,\n/**/\n    921,\n/**/\n    920,\n/**/\n    919,\n/**/\n    918,\n/**/\n    917,\n/**/\n    916,\n/**/\n    915,\n/**/\n    914,\n/**/\n    913,\n/**/\n    912,\n/**/\n    911,\n/**/\n    910,\n/**/\n    909,\n/**/\n    908,\n/**/\n    907,\n/**/\n    906,\n/**/\n    905,\n/**/\n    904,\n/**/\n    903,\n/**/\n    902,\n/**/\n    901,\n/**/\n    900,\n/**/\n    899,\n/**/\n    898,\n/**/\n    897,\n/**/\n    896,\n/**/\n    895,\n/**/\n    894,\n/**/\n    893,\n/**/\n    892,\n/**/\n    891,\n/**/\n    890,\n/**/\n    889,\n/**/\n    888,\n/**/\n    887,\n/**/\n    886,\n/**/\n    885,\n/**/\n    884,\n/**/\n    883,\n/**/\n    882,\n/**/\n    881,\n/**/\n    880,\n/**/\n    879,\n/**/\n    878,\n/**/\n    877,\n/**/\n    876,\n/**/\n    875,\n/**/\n    874,\n/**/\n    873,\n/**/\n    872,\n/**/\n    871,\n/**/\n    870,\n/**/\n    869,\n/**/\n    868,\n/**/\n    867,\n/**/\n    866,\n/**/\n    865,\n/**/\n    864,\n/**/\n    863,\n/**/\n    862,\n/**/\n    861,\n/**/\n    860,\n/**/\n    859,\n/**/\n    858,\n/**/\n    857,\n/**/\n    856,\n/**/\n    855,\n/**/\n    854,\n/**/\n    853,\n/**/\n    852,\n/**/\n    851,\n/**/\n    850,\n/**/\n    849,\n/**/\n    848,\n/**/\n    847,\n/**/\n    846,\n/**/\n    845,\n/**/\n    844,\n/**/\n    843,\n/**/\n    842,\n/**/\n    841,\n/**/\n    840,\n/**/\n    839,\n/**/\n    838,\n/**/\n    837,\n/**/\n    836,\n/**/\n    835,\n/**/\n    834,\n/**/\n    833,\n/**/\n    832,\n/**/\n    831,\n/**/\n    830,\n/**/\n    829,\n/**/\n    828,\n/**/\n    827,\n/**/\n    826,\n/**/\n    825,\n/**/\n    824,\n/**/\n    823,\n/**/\n    822,\n/**/\n    821,\n/**/\n    820,\n/**/\n    819,\n/**/\n    818,\n/**/\n    817,\n/**/\n    816,\n/**/\n    815,\n/**/\n    814,\n/**/\n    813,\n/**/\n    812,\n/**/\n    811,\n/**/\n    810,\n/**/\n    809,\n/**/\n    808,\n/**/\n    807,\n/**/\n    806,\n/**/\n    805,\n/**/\n    804,\n/**/\n    803,\n/**/\n    802,\n/**/\n    801,\n/**/\n    800,\n/**/\n    799,\n/**/\n    798,\n/**/\n    797,\n/**/\n    796,\n/**/\n    795,\n/**/\n    794,\n/**/\n    793,\n/**/\n    792,\n/**/\n    791,\n/**/\n    790,\n/**/\n    789,\n/**/\n    788,\n/**/\n    787,\n/**/\n    786,\n/**/\n    785,\n/**/\n    784,\n/**/\n    783,\n/**/\n    782,\n/**/\n    781,\n/**/\n    780,\n/**/\n    779,\n/**/\n    778,\n/**/\n    777,\n/**/\n    776,\n/**/\n    775,\n/**/\n    774,\n/**/\n    773,\n/**/\n    772,\n/**/\n    771,\n/**/\n    770,\n/**/\n    769,\n/**/\n    768,\n/**/\n    767,\n/**/\n    766,\n/**/\n    765,\n/**/\n    764,\n/**/\n    763,\n/**/\n    762,\n/**/\n    761,\n/**/\n    760,\n/**/\n    759,\n/**/\n    758,\n/**/\n    757,\n/**/\n    756,\n/**/\n    755,\n/**/\n    754,\n/**/\n    753,\n/**/\n    752,\n/**/\n    751,\n/**/\n    750,\n/**/\n    749,\n/**/\n    748,\n/**/\n    747,\n/**/\n    746,\n/**/\n    745,\n/**/\n    744,\n/**/\n    743,\n/**/\n    742,\n/**/\n    741,\n/**/\n    740,\n/**/\n    739,\n/**/\n    738,\n/**/\n    737,\n/**/\n    736,\n/**/\n    735,\n/**/\n    734,\n/**/\n    733,\n/**/\n    732,\n/**/\n    731,\n/**/\n    730,\n/**/\n    729,\n/**/\n    728,\n/**/\n    727,\n/**/\n    726,\n/**/\n    725,\n/**/\n    724,\n/**/\n    723,\n/**/\n    722,\n/**/\n    721,\n/**/\n    720,\n/**/\n    719,\n/**/\n    718,\n/**/\n    717,\n/**/\n    716,\n/**/\n    715,\n/**/\n    714,\n/**/\n    713,\n/**/\n    712,\n/**/\n    711,\n/**/\n    710,\n/**/\n    709,\n/**/\n    708,\n/**/\n    707,\n/**/\n    706,\n/**/\n    705,\n/**/\n    704,\n/**/\n    703,\n/**/\n    702,\n/**/\n    701,\n/**/\n    700,\n/**/\n    699,\n/**/\n    698,\n/**/\n    697,\n/**/\n    696,\n/**/\n    695,\n/**/\n    694,\n/**/\n    693,\n/**/\n    692,\n/**/\n    691,\n/**/\n    690,\n/**/\n    689,\n/**/\n    688,\n/**/\n    687,\n/**/\n    686,\n/**/\n    685,\n/**/\n    684,\n/**/\n    683,\n/**/\n    682,\n/**/\n    681,\n/**/\n    680,\n/**/\n    679,\n/**/\n    678,\n/**/\n    677,\n/**/\n    676,\n/**/\n    675,\n/**/\n    674,\n/**/\n    673,\n/**/\n    672,\n/**/\n    671,\n/**/\n    670,\n/**/\n    669,\n/**/\n    668,\n/**/\n    667,\n/**/\n    666,\n/**/\n    665,\n/**/\n    664,\n/**/\n    663,\n/**/\n    662,\n/**/\n    661,\n/**/\n    660,\n/**/\n    659,\n/**/\n    658,\n/**/\n    657,\n/**/\n    656,\n/**/\n    655,\n/**/\n    654,\n/**/\n    653,\n/**/\n    652,\n/**/\n    651,\n/**/\n    650,\n/**/\n    649,\n/**/\n    648,\n/**/\n    647,\n/**/\n    646,\n/**/\n    645,\n/**/\n    644,\n/**/\n    643,\n/**/\n    642,\n/**/\n    641,\n/**/\n    640,\n/**/\n    639,\n/**/\n    638,\n/**/\n    637,\n/**/\n    636,\n/**/\n    635,\n/**/\n    634,\n/**/\n    633,\n/**/\n    632,\n/**/\n    631,\n/**/\n    630,\n/**/\n    629,\n/**/\n    628,\n/**/\n    627,\n/**/\n    626,\n/**/\n    625,\n/**/\n    624,\n/**/\n    623,\n/**/\n    622,\n/**/\n    621,\n/**/\n    620,\n/**/\n    619,\n/**/\n    618,\n/**/\n    617,\n/**/\n    616,\n/**/\n    615,\n/**/\n    614,\n/**/\n    613,\n/**/\n    612,\n/**/\n    611,\n/**/\n    610,\n/**/\n    609,\n/**/\n    608,\n/**/\n    607,\n/**/\n    606,\n/**/\n    605,\n/**/\n    604,\n/**/\n    603,\n/**/\n    602,\n/**/\n    601,\n/**/\n    600,\n/**/\n    599,\n/**/\n    598,\n/**/\n    597,\n/**/\n    596,\n/**/\n    595,\n/**/\n    594,\n/**/\n    593,\n/**/\n    592,\n/**/\n    591,\n/**/\n    590,\n/**/\n    589,\n/**/\n    588,\n/**/\n    587,\n/**/\n    586,\n/**/\n    585,\n/**/\n    584,\n/**/\n    583,\n/**/\n    582,\n/**/\n    581,\n/**/\n    580,\n/**/\n    579,\n/**/\n    578,\n/**/\n    577,\n/**/\n    576,\n/**/\n    575,\n/**/\n    574,\n/**/\n    573,\n/**/\n    572,\n/**/\n    571,\n/**/\n    570,\n/**/\n    569,\n/**/\n    568,\n/**/\n    567,\n/**/\n    566,\n/**/\n    565,\n/**/\n    564,\n/**/\n    563,\n/**/\n    562,\n/**/\n    561,\n/**/\n    560,\n/**/\n    559,\n/**/\n    558,\n/**/\n    557,\n/**/\n    556,\n/**/\n    555,\n/**/\n    554,\n/**/\n    553,\n/**/\n    552,\n/**/\n    551,\n/**/\n    550,\n/**/\n    549,\n/**/\n    548,\n/**/\n    547,\n/**/\n    546,\n/**/\n    545,\n/**/\n    544,\n/**/\n    543,\n/**/\n    542,\n/**/\n    541,\n/**/\n    540,\n/**/\n    539,\n/**/\n    538,\n/**/\n    537,\n/**/\n    536,\n/**/\n    535,\n/**/\n    534,\n/**/\n    533,\n/**/\n    532,\n/**/\n    531,\n/**/\n    530,\n/**/\n    529,\n/**/\n    528,\n/**/\n    527,\n/**/\n    526,\n/**/\n    525,\n/**/\n    524,\n/**/\n    523,\n/**/\n    522,\n/**/\n    521,\n/**/\n    520,\n/**/\n    519,\n/**/\n    518,\n/**/\n    517,\n/**/\n    516,\n/**/\n    515,\n/**/\n    514,\n/**/\n    513,\n/**/\n    512,\n/**/\n    511,\n/**/\n    510,\n/**/\n    509,\n/**/\n    508,\n/**/\n    507,\n/**/\n    506,\n/**/\n    505,\n/**/\n    504,\n/**/\n    503,\n/**/\n    502,\n/**/\n    501,\n/**/\n    500,\n/**/\n    499,\n/**/\n    498,\n/**/\n    497,\n/**/\n    496,\n/**/\n    495,\n/**/\n    494,\n/**/\n    493,\n/**/\n    492,\n/**/\n    491,\n/**/\n    490,\n/**/\n    489,\n/**/\n    488,\n/**/\n    487,\n/**/\n    486,\n/**/\n    485,\n/**/\n    484,\n/**/\n    483,\n/**/\n    482,\n/**/\n    481,\n/**/\n    480,\n/**/\n    479,\n/**/\n    478,\n/**/\n    477,\n/**/\n    476,\n/**/\n    475,\n/**/\n    474,\n/**/\n    473,\n/**/\n    472,\n/**/\n    471,\n/**/\n    470,\n/**/\n    469,\n/**/\n    468,\n/**/\n    467,\n/**/\n    466,\n/**/\n    465,\n/**/\n    464,\n/**/\n    463,\n/**/\n    462,\n/**/\n    461,\n/**/\n    460,\n/**/\n    459,\n/**/\n    458,\n/**/\n    457,\n/**/\n    456,\n/**/\n    455,\n/**/\n    454,\n/**/\n    453,\n/**/\n    452,\n/**/\n    451,\n/**/\n    450,\n/**/\n    449,\n/**/\n    448,\n/**/\n    447,\n/**/\n    446,\n/**/\n    445,\n/**/\n    444,\n/**/\n    443,\n/**/\n    442,\n/**/\n    441,\n/**/\n    440,\n/**/\n    439,\n/**/\n    438,\n/**/\n    437,\n/**/\n    436,\n/**/\n    435,\n/**/\n    434,\n/**/\n    433,\n/**/\n    432,\n/**/\n    431,\n/**/\n    430,\n/**/\n    429,\n/**/\n    428,\n/**/\n    427,\n/**/\n    426,\n/**/\n    425,\n/**/\n    424,\n/**/\n    423,\n/**/\n    422,\n/**/\n    421,\n/**/\n    420,\n/**/\n    419,\n/**/\n    418,\n/**/\n    417,\n/**/\n    416,\n/**/\n    415,\n/**/\n    414,\n/**/\n    413,\n/**/\n    412,\n/**/\n    411,\n/**/\n    410,\n/**/\n    409,\n/**/\n    408,\n/**/\n    407,\n/**/\n    406,\n/**/\n    405,\n/**/\n    404,\n/**/\n    403,\n/**/\n    402,\n/**/\n    401,\n/**/\n    400,\n/**/\n    399,\n/**/\n    398,\n/**/\n    397,\n/**/\n    396,\n/**/\n    395,\n/**/\n    394,\n/**/\n    393,\n/**/\n    392,\n/**/\n    391,\n/**/\n    390,\n/**/\n    389,\n/**/\n    388,\n/**/\n    387,\n/**/\n    386,\n/**/\n    385,\n/**/\n    384,\n/**/\n    383,\n/**/\n    382,\n/**/\n    381,\n/**/\n    380,\n/**/\n    379,\n/**/\n    378,\n/**/\n    377,\n/**/\n    376,\n/**/\n    375,\n/**/\n    374,\n/**/\n    373,\n/**/\n    372,\n/**/\n    371,\n/**/\n    370,\n/**/\n    369,\n/**/\n    368,\n/**/\n    367,\n/**/\n    366,\n/**/\n    365,\n/**/\n    364,\n/**/\n    363,\n/**/\n    362,\n/**/\n    361,\n/**/\n    360,\n/**/\n    359,\n/**/\n    358,\n/**/\n    357,\n/**/\n    356,\n/**/\n    355,\n/**/\n    354,\n/**/\n    353,\n/**/\n    352,\n/**/\n    351,\n/**/\n    350,\n/**/\n    349,\n/**/\n    348,\n/**/\n    347,\n/**/\n    346,\n/**/\n    345,\n/**/\n    344,\n/**/\n    343,\n/**/\n    342,\n/**/\n    341,\n/**/\n    340,\n/**/\n    339,\n/**/\n    338,\n/**/\n    337,\n/**/\n    336,\n/**/\n    335,\n/**/\n    334,\n/**/\n    333,\n/**/\n    332,\n/**/\n    331,\n/**/\n    330,\n/**/\n    329,\n/**/\n    328,\n/**/\n    327,\n/**/\n    326,\n/**/\n    325,\n/**/\n    324,\n/**/\n    323,\n/**/\n    322,\n/**/\n    321,\n/**/\n    320,\n/**/\n    319,\n/**/\n    318,\n/**/\n    317,\n/**/\n    316,\n/**/\n    315,\n/**/\n    314,\n/**/\n    313,\n/**/\n    312,\n/**/\n    311,\n/**/\n    310,\n/**/\n    309,\n/**/\n    308,\n/**/\n    307,\n/**/\n    306,\n/**/\n    305,\n/**/\n    304,\n/**/\n    303,\n/**/\n    302,\n/**/\n    301,\n/**/\n    300,\n/**/\n    299,\n/**/\n    298,\n/**/\n    297,\n/**/\n    296,\n/**/\n    295,\n/**/\n    294,\n/**/\n    293,\n/**/\n    292,\n/**/\n    291,\n/**/\n    290,\n/**/\n    289,\n/**/\n    288,\n/**/\n    287,\n/**/\n    286,\n/**/\n    285,\n/**/\n    284,\n/**/\n    283,\n/**/\n    282,\n/**/\n    281,\n/**/\n    280,\n/**/\n    279,\n/**/\n    278,\n/**/\n    277,\n/**/\n    276,\n/**/\n    275,\n/**/\n    274,\n/**/\n    273,\n/**/\n    272,\n/**/\n    271,\n/**/\n    270,\n/**/\n    269,\n/**/\n    268,\n/**/\n    267,\n/**/\n    266,\n/**/\n    265,\n/**/\n    264,\n/**/\n    263,\n/**/\n    262,\n/**/\n    261,\n/**/\n    260,\n/**/\n    259,\n/**/\n    258,\n/**/\n    257,\n/**/\n    256,\n/**/\n    255,\n/**/\n    254,\n/**/\n    253,\n/**/\n    252,\n/**/\n    251,\n/**/\n    250,\n/**/\n    249,\n/**/\n    248,\n/**/\n    247,\n/**/\n    246,\n/**/\n    245,\n/**/\n    244,\n/**/\n    243,\n/**/\n    242,\n/**/\n    241,\n/**/\n    240,\n/**/\n    239,\n/**/\n    238,\n/**/\n    237,\n/**/\n    236,\n/**/\n    235,\n/**/\n    234,\n/**/\n    233,\n/**/\n    232,\n/**/\n    231,\n/**/\n    230,\n/**/\n    229,\n/**/\n    228,\n/**/\n    227,\n/**/\n    226,\n/**/\n    225,\n/**/\n    224,\n/**/\n    223,\n/**/\n    222,\n/**/\n    221,\n/**/\n    220,\n/**/\n    219,\n/**/\n    218,\n/**/\n    217,\n/**/\n    216,\n/**/\n    215,\n/**/\n    214,\n/**/\n    213,\n/**/\n    212,\n/**/\n    211,\n/**/\n    210,\n/**/\n    209,\n/**/\n    208,\n/**/\n    207,\n/**/\n    206,\n/**/\n    205,\n/**/\n    204,\n/**/\n    203,\n/**/\n    202,\n/**/\n    201,\n/**/\n    200,\n/**/\n    199,\n/**/\n    198,\n/**/\n    197,\n/**/\n    196,\n/**/\n    195,\n/**/\n    194,\n/**/\n    193,\n/**/\n    192,\n/**/\n    191,\n/**/\n    190,\n/**/\n    189,\n/**/\n    188,\n/**/\n    187,\n/**/\n    186,\n/**/\n    185,\n/**/\n    184,\n/**/\n    183,\n/**/\n    182,\n/**/\n    181,\n/**/\n    180,\n/**/\n    179,\n/**/\n    178,\n/**/\n    177,\n/**/\n    176,\n/**/\n    175,\n/**/\n    174,\n/**/\n    173,\n/**/\n    172,\n/**/\n    171,\n/**/\n    170,\n/**/\n    169,\n/**/\n    168,\n/**/\n    167,\n/**/\n    166,\n/**/\n    165,\n/**/\n    164,\n/**/\n    163,\n/**/\n    162,\n/**/\n    161,\n/**/\n    160,\n/**/\n    159,\n/**/\n    158,\n/**/\n    157,\n/**/\n    156,\n/**/\n    155,\n/**/\n    154,\n/**/\n    153,\n/**/\n    152,\n/**/\n    151,\n/**/\n    150,\n/**/\n    149,\n/**/\n    148,\n/**/\n    147,\n/**/\n    146,\n/**/\n    145,\n/**/\n    144,\n/**/\n    143,\n/**/\n    142,\n/**/\n    141,\n/**/\n    140,\n/**/\n    139,\n/**/\n    138,\n/**/\n    137,\n/**/\n    136,\n/**/\n    135,\n/**/\n    134,\n/**/\n    133,\n/**/\n    132,\n/**/\n    131,\n/**/\n    130,\n/**/\n    129,\n/**/\n    128,\n/**/\n    127,\n/**/\n    126,\n/**/\n    125,\n/**/\n    124,\n/**/\n    123,\n/**/\n    122,\n/**/\n    121,\n/**/\n    120,\n/**/\n    119,\n/**/\n    118,\n/**/\n    117,\n/**/\n    116,\n/**/\n    115,\n/**/\n    114,\n/**/\n    113,\n/**/\n    112,\n/**/\n    111,\n/**/\n    110,\n/**/\n    109,\n/**/\n    108,\n/**/\n    107,\n/**/\n    106,\n/**/\n    105,\n/**/\n    104,\n/**/\n    103,\n/**/\n    102,\n/**/\n    101,\n/**/\n    100,\n/**/\n    99,\n/**/\n    98,\n/**/\n    97,\n/**/\n    96,\n/**/\n    95,\n/**/\n    94,\n/**/\n    93,\n/**/\n    92,\n/**/\n    91,\n/**/\n    90,\n/**/\n    89,\n/**/\n    88,\n/**/\n    87,\n/**/\n    86,\n/**/\n    85,\n/**/\n    84,\n/**/\n    83,\n/**/\n    82,\n/**/\n    81,\n/**/\n    80,\n/**/\n    79,\n/**/\n    78,\n/**/\n    77,\n/**/\n    76,\n/**/\n    75,\n/**/\n    74,\n/**/\n    73,\n/**/\n    72,\n/**/\n    71,\n/**/\n    70,\n/**/\n    69,\n/**/\n    68,\n/**/\n    67,\n/**/\n    66,\n/**/\n    65,\n/**/\n    64,\n/**/\n    63,\n/**/\n    62,\n/**/\n    61,\n/**/\n    60,\n/**/\n    59,\n/**/\n    58,\n/**/\n    57,\n/**/\n    56,\n/**/\n    55,\n/**/\n    54,\n/**/\n    53,\n/**/\n    52,\n/**/\n    51,\n/**/\n    50,\n/**/\n    49,\n/**/\n    48,\n/**/\n    47,\n/**/\n    46,\n/**/\n    45,\n/**/\n    44,\n/**/\n    43,\n/**/\n    42,\n/**/\n    41,\n/**/\n    40,\n/**/\n    39,\n/**/\n    38,\n/**/\n    37,\n/**/\n    36,\n/**/\n    35,\n/**/\n    34,\n/**/\n    33,\n/**/\n    32,\n/**/\n    31,\n/**/\n    30,\n/**/\n    29,\n/**/\n    28,\n/**/\n    27,\n/**/\n    26,\n/**/\n    25,\n/**/\n    24,\n/**/\n    23,\n/**/\n    22,\n/**/\n    21,\n/**/\n    20,\n/**/\n    19,\n/**/\n    18,\n/**/\n    17,\n/**/\n    16,\n/**/\n    15,\n/**/\n    14,\n/**/\n    13,\n/**/\n    12,\n/**/\n    11,\n/**/\n    10,\n/**/\n    9,\n/**/\n    8,\n/**/\n    7,\n/**/\n    6,\n/**/\n    5,\n/**/\n    4,\n/**/\n    3,\n/**/\n    2,\n/**/\n    1,\n/**/\n    0\n};\n\n/*\n * Place to put a short description when adding a feature with a patch.\n * Keep it short, e.g.,: \"relative numbers\", \"persistent undo\".\n * Also add a comment marker to separate the lines.\n * See the official Vim patches for the diff format: It must use a context of\n * one line only.  Create it by hand or use \"diff -C2\" and edit the patch.\n */\nstatic char *(extra_patches[]) =\n{   /* Add your patch description below this line */\n/**/\n    NULL\n};\n\n    int\nhighest_patch(void)\n{\n    // this relies on the highest patch number to be the first entry\n    return included_patches[0];\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * Return TRUE if patch \"n\" has been included.\n */\n    int\nhas_patch(int n)\n{\n    int\t\th, m, l;\n\n    // Perform a binary search.\n    l = 0;\n    h = (int)ARRAY_LENGTH(included_patches) - 1;\n    for (;;)\n    {\n\tm = (l + h) / 2;\n\tif (included_patches[m] == n)\n\t    return TRUE;\n\tif (l == h)\n\t    break;\n\tif (included_patches[m] < n)\n\t    h = m;\n\telse\n\t    l = m + 1;\n    }\n    return FALSE;\n}\n#endif\n\n    void\nex_version(exarg_T *eap)\n{\n    /*\n     * Ignore a \":version 9.99\" command.\n     */\n    if (*eap->arg == NUL)\n    {\n\tmsg_putchar('\\n');\n\tlist_version();\n    }\n}\n\n/*\n * Output a string for the version message.  If it's going to wrap, output a\n * newline, unless the message is too long to fit on the screen anyway.\n * When \"wrap\" is TRUE wrap the string in [].\n */\n    static void\nversion_msg_wrap(char_u *s, int wrap)\n{\n    int\t\tlen = vim_strsize(s) + (wrap ? 2 : 0);\n\n    if (!got_int && len < (int)Columns && msg_col + len >= (int)Columns\n\t\t\t\t\t\t\t\t&& *s != '\\n')\n\tmsg_putchar('\\n');\n    if (!got_int)\n    {\n\tif (wrap)\n\t    msg_puts(\"[\");\n\tmsg_puts((char *)s);\n\tif (wrap)\n\t    msg_puts(\"]\");\n    }\n}\n\n    static void\nversion_msg(char *s)\n{\n    version_msg_wrap((char_u *)s, FALSE);\n}\n\n/*\n * List all features aligned in columns, dictionary style.\n */\n    static void\nlist_features(void)\n{\n    list_in_columns((char_u **)features, -1, -1);\n}\n\n/*\n * List string items nicely aligned in columns.\n * When \"size\" is < 0 then the last entry is marked with NULL.\n * The entry with index \"current\" is inclosed in [].\n */\n    void\nlist_in_columns(char_u **items, int size, int current)\n{\n    int\t\ti;\n    int\t\tncol;\n    int\t\tnrow;\n    int\t\tcur_row = 1;\n    int\t\titem_count = 0;\n    int\t\twidth = 0;\n#ifdef FEAT_SYN_HL\n    int\t\tuse_highlight = (items == (char_u **)features);\n#endif\n\n    // Find the length of the longest item, use that + 1 as the column\n    // width.\n    for (i = 0; size < 0 ? items[i] != NULL : i < size; ++i)\n    {\n\tint l = vim_strsize(items[i]) + (i == current ? 2 : 0);\n\n\tif (l > width)\n\t    width = l;\n\t++item_count;\n    }\n    width += 1;\n\n    if (Columns < width)\n    {\n\t// Not enough screen columns - show one per line\n\tfor (i = 0; i < item_count; ++i)\n\t{\n\t    version_msg_wrap(items[i], i == current);\n\t    if (msg_col > 0 && i < item_count - 1)\n\t\tmsg_putchar('\\n');\n\t}\n\treturn;\n    }\n\n    // The rightmost column doesn't need a separator.\n    // Sacrifice it to fit in one more column if possible.\n    ncol = (int) (Columns + 1) / width;\n    nrow = item_count / ncol + ((item_count % ncol) ? 1 : 0);\n\n    // \"i\" counts columns then rows.  \"idx\" counts rows then columns.\n    for (i = 0; !got_int && i < nrow * ncol; ++i)\n    {\n\tint idx = (i / ncol) + (i % ncol) * nrow;\n\n\tif (idx < item_count)\n\t{\n\t    int last_col = (i + 1) % ncol == 0;\n\n\t    if (idx == current)\n\t\tmsg_putchar('[');\n#ifdef FEAT_SYN_HL\n\t    if (use_highlight && items[idx][0] == '-')\n\t\tmsg_puts_attr((char *)items[idx], HL_ATTR(HLF_W));\n\t    else\n#endif\n\t\tmsg_puts((char *)items[idx]);\n\t    if (idx == current)\n\t\tmsg_putchar(']');\n\t    if (last_col)\n\t    {\n\t\tif (msg_col > 0 && cur_row < nrow)\n\t\t    msg_putchar('\\n');\n\t\t++cur_row;\n\t    }\n\t    else\n\t    {\n\t\twhile (msg_col % width)\n\t\t    msg_putchar(' ');\n\t    }\n\t}\n\telse\n\t{\n\t    // this row is out of items, thus at the end of the row\n\t    if (msg_col > 0)\n\t    {\n\t\tif (cur_row < nrow)\n\t\t    msg_putchar('\\n');\n\t\t++cur_row;\n\t    }\n\t}\n    }\n}\n\n    void\nlist_version(void)\n{\n    int\t\ti;\n    int\t\tfirst;\n    char\t*s = \"\";\n\n    /*\n     * When adding features here, don't forget to update the list of\n     * internal variables in eval.c!\n     */\n    init_longVersion();\n    msg(longVersion);\n#ifdef MSWIN\n# ifdef FEAT_GUI_MSWIN\n#  ifdef VIMDLL\n#   ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit GUI/console version\"));\n#   else\n    msg_puts(_(\"\\nMS-Windows 32-bit GUI/console version\"));\n#   endif\n#  else\n#   ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit GUI version\"));\n#   else\n    msg_puts(_(\"\\nMS-Windows 32-bit GUI version\"));\n#   endif\n#  endif\n#  ifdef FEAT_OLE\n    msg_puts(_(\" with OLE support\"));\n#  endif\n# else\n#  ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit console version\"));\n#  else\n    msg_puts(_(\"\\nMS-Windows 32-bit console version\"));\n#  endif\n# endif\n#endif\n#if defined(MACOS_X)\n# if defined(MACOS_X_DARWIN)\n    msg_puts(_(\"\\nmacOS version\"));\n# else\n    msg_puts(_(\"\\nmacOS version w/o darwin feat.\"));\n# endif\n# if defined(__arm64__)\n    msg_puts(\" - arm64\");\n# elif defined(__x86_64__)\n    msg_puts(\" - x86_64\");\n# endif\n#endif\n\n#ifdef VMS\n    msg_puts(_(\"\\nOpenVMS version\"));\n# ifdef HAVE_PATHDEF\n    if (*compiled_arch != NUL)\n    {\n\tmsg_puts(\" - \");\n\tmsg_puts((char *)compiled_arch);\n    }\n# endif\n\n#endif\n\n    // Print the list of patch numbers if there is at least one.\n    // Print a range when patches are consecutive: \"1-10, 12, 15-40, 42-45\"\n    if (included_patches[0] != 0)\n    {\n\tmsg_puts(_(\"\\nIncluded patches: \"));\n\tfirst = -1;\n\ti = (int)ARRAY_LENGTH(included_patches) - 1;\n\twhile (--i >= 0)\n\t{\n\t    if (first < 0)\n\t\tfirst = included_patches[i];\n\t    if (i == 0 || included_patches[i - 1] != included_patches[i] + 1)\n\t    {\n\t\tmsg_puts(s);\n\t\ts = \", \";\n\t\tmsg_outnum((long)first);\n\t\tif (first != included_patches[i])\n\t\t{\n\t\t    msg_puts(\"-\");\n\t\t    msg_outnum((long)included_patches[i]);\n\t\t}\n\t\tfirst = -1;\n\t    }\n\t}\n    }\n\n    // Print the list of extra patch descriptions if there is at least one.\n    if (extra_patches[0] != NULL)\n    {\n\tmsg_puts(_(\"\\nExtra patches: \"));\n\ts = \"\";\n\tfor (i = 0; extra_patches[i] != NULL; ++i)\n\t{\n\t    msg_puts(s);\n\t    s = \", \";\n\t    msg_puts(extra_patches[i]);\n\t}\n    }\n\n#ifdef MODIFIED_BY\n    msg_puts(\"\\n\");\n    msg_puts(_(\"Modified by \"));\n    msg_puts(MODIFIED_BY);\n#endif\n\n#ifdef HAVE_PATHDEF\n    if (*compiled_user != NUL || *compiled_sys != NUL)\n    {\n\tmsg_puts(_(\"\\nCompiled \"));\n\tif (*compiled_user != NUL)\n\t{\n\t    msg_puts(_(\"by \"));\n\t    msg_puts((char *)compiled_user);\n\t}\n\tif (*compiled_sys != NUL)\n\t{\n\t    msg_puts(\"@\");\n\t    msg_puts((char *)compiled_sys);\n\t}\n    }\n#endif\n\n#if defined(FEAT_HUGE)\n    msg_puts(_(\"\\nHuge version \"));\n#elif defined(FEAT_NORMAL)\n    msg_puts(_(\"\\nNormal version \"));\n#else\n    msg_puts(_(\"\\nTiny version \"));\n#endif\n#if !defined(FEAT_GUI)\n    msg_puts(_(\"without GUI.\"));\n#elif defined(FEAT_GUI_GTK)\n# if defined(USE_GTK3)\n    msg_puts(_(\"with GTK3 GUI.\"));\n# elif defined(FEAT_GUI_GNOME)\n     msg_puts(_(\"with GTK2-GNOME GUI.\"));\n# else\n     msg_puts(_(\"with GTK2 GUI.\"));\n# endif\n#elif defined(FEAT_GUI_MOTIF)\n    msg_puts(_(\"with X11-Motif GUI.\"));\n#elif defined(FEAT_GUI_HAIKU)\n    msg_puts(_(\"with Haiku GUI.\"));\n#elif defined(FEAT_GUI_PHOTON)\n    msg_puts(_(\"with Photon GUI.\"));\n#elif defined(MSWIN)\n    msg_puts(_(\"with GUI.\"));\n#endif\n    version_msg(_(\"  Features included (+) or not (-):\\n\"));\n\n    list_features();\n    if (msg_col > 0)\n\tmsg_putchar('\\n');\n\n#ifdef SYS_VIMRC_FILE\n    version_msg(_(\"   system vimrc file: \\\"\"));\n    version_msg(SYS_VIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE\n    version_msg(_(\"     user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE2\n    version_msg(_(\" 2nd user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE2);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE3\n    version_msg(_(\" 3rd user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE3);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_EXRC_FILE\n    version_msg(_(\"      user exrc file: \\\"\"));\n    version_msg(USR_EXRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_EXRC_FILE2\n    version_msg(_(\"  2nd user exrc file: \\\"\"));\n    version_msg(USR_EXRC_FILE2);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef FEAT_GUI\n# ifdef SYS_GVIMRC_FILE\n    version_msg(_(\"  system gvimrc file: \\\"\"));\n    version_msg(SYS_GVIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n# endif\n    version_msg(_(\"    user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n# ifdef USR_GVIMRC_FILE2\n    version_msg(_(\"2nd user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE2);\n    version_msg(\"\\\"\\n\");\n# endif\n# ifdef USR_GVIMRC_FILE3\n    version_msg(_(\"3rd user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE3);\n    version_msg(\"\\\"\\n\");\n# endif\n#endif\n    version_msg(_(\"       defaults file: \\\"\"));\n    version_msg(VIM_DEFAULTS_FILE);\n    version_msg(\"\\\"\\n\");\n#ifdef FEAT_GUI\n# ifdef SYS_MENU_FILE\n    version_msg(_(\"    system menu file: \\\"\"));\n    version_msg(SYS_MENU_FILE);\n    version_msg(\"\\\"\\n\");\n# endif\n#endif\n#ifdef HAVE_PATHDEF\n    if (*default_vim_dir != NUL)\n    {\n\tversion_msg(_(\"  fall-back for $VIM: \\\"\"));\n\tversion_msg((char *)default_vim_dir);\n\tversion_msg(\"\\\"\\n\");\n    }\n    if (*default_vimruntime_dir != NUL)\n    {\n\tversion_msg(_(\" f-b for $VIMRUNTIME: \\\"\"));\n\tversion_msg((char *)default_vimruntime_dir);\n\tversion_msg(\"\\\"\\n\");\n    }\n    version_msg(_(\"Compilation: \"));\n    version_msg((char *)all_cflags);\n    version_msg(\"\\n\");\n#ifdef VMS\n    if (*compiler_version != NUL)\n    {\n\tversion_msg(_(\"Compiler: \"));\n\tversion_msg((char *)compiler_version);\n\tversion_msg(\"\\n\");\n    }\n#endif\n    version_msg(_(\"Linking: \"));\n    version_msg((char *)all_lflags);\n#endif\n#ifdef DEBUG\n    version_msg(\"\\n\");\n    version_msg(_(\"  DEBUG BUILD\"));\n#endif\n}\n\nstatic void do_intro_line(int row, char_u *mesg, int add_version, int attr);\nstatic void intro_message(int colon);\n\n/*\n * Show the intro message when not editing a file.\n */\n    void\nmaybe_intro_message(void)\n{\n    if (BUFEMPTY()\n\t    && curbuf->b_fname == NULL\n\t    && firstwin->w_next == NULL\n\t    && vim_strchr(p_shm, SHM_INTRO) == NULL)\n\tintro_message(FALSE);\n}\n\n/*\n * Give an introductory message about Vim.\n * Only used when starting Vim on an empty file, without a file name.\n * Or with the \":intro\" command (for Sven :-).\n */\n    static void\nintro_message(\n    int\t\tcolon)\t\t// TRUE for \":intro\"\n{\n    int\t\ti;\n    int\t\trow;\n    int\t\tblanklines;\n    int\t\tsponsor;\n    char\t*p;\n    static char\t*(lines[]) =\n    {\n\tN_(\"VIM - Vi IMproved\"),\n\t\"\",\n\tN_(\"version \"),\n\tN_(\"by Bram Moolenaar et al.\"),\n#ifdef MODIFIED_BY\n\t\" \",\n#endif\n\tN_(\"Vim is open source and freely distributable\"),\n\t\"\",\n\tN_(\"Help poor children in Uganda!\"),\n\tN_(\"type  :help iccf<Enter>       for information \"),\n\t\"\",\n\tN_(\"type  :q<Enter>               to exit         \"),\n\tN_(\"type  :help<Enter>  or  <F1>  for on-line help\"),\n\tN_(\"type  :help version9<Enter>   for version info\"),\n\tNULL,\n\t\"\",\n\tN_(\"Running in Vi compatible mode\"),\n\tN_(\"type  :set nocp<Enter>        for Vim defaults\"),\n\tN_(\"type  :help cp-default<Enter> for info on this\"),\n    };\n#ifdef FEAT_GUI\n    static char\t*(gui_lines[]) =\n    {\n\tNULL,\n\tNULL,\n\tNULL,\n\tNULL,\n#ifdef MODIFIED_BY\n\tNULL,\n#endif\n\tNULL,\n\tNULL,\n\tNULL,\n\tN_(\"menu  Help->Orphans           for information    \"),\n\tNULL,\n\tN_(\"Running modeless, typed text is inserted\"),\n\tN_(\"menu  Edit->Global Settings->Toggle Insert Mode  \"),\n\tN_(\"                              for two modes      \"),\n\tNULL,\n\tNULL,\n\tNULL,\n\tN_(\"menu  Edit->Global Settings->Toggle Vi Compatible\"),\n\tN_(\"                              for Vim defaults   \"),\n    };\n#endif\n\n    // blanklines = screen height - # message lines\n    blanklines = (int)Rows - (ARRAY_LENGTH(lines) - 1);\n    if (!p_cp)\n\tblanklines += 4;  // add 4 for not showing \"Vi compatible\" message\n\n    // Don't overwrite a statusline.  Depends on 'cmdheight'.\n    if (p_ls > 1)\n\tblanklines -= Rows - topframe->fr_height;\n    if (blanklines < 0)\n\tblanklines = 0;\n\n    // Show the sponsor and register message one out of four times, the Uganda\n    // message two out of four times.\n    sponsor = (int)time(NULL);\n    sponsor = ((sponsor & 2) == 0) - ((sponsor & 4) == 0);\n\n    // start displaying the message lines after half of the blank lines\n    row = blanklines / 2;\n    if ((row >= 2 && Columns >= 50) || colon)\n    {\n\tfor (i = 0; i < (int)ARRAY_LENGTH(lines); ++i)\n\t{\n\t    p = lines[i];\n#ifdef FEAT_GUI\n\t    if (p_im && gui.in_use && gui_lines[i] != NULL)\n\t\tp = gui_lines[i];\n#endif\n\t    if (p == NULL)\n\t    {\n\t\tif (!p_cp)\n\t\t    break;\n\t\tcontinue;\n\t    }\n\t    if (sponsor != 0)\n\t    {\n\t\tif (strstr(p, \"children\") != NULL)\n\t\t    p = sponsor < 0\n\t\t\t? N_(\"Sponsor Vim development!\")\n\t\t\t: N_(\"Become a registered Vim user!\");\n\t\telse if (strstr(p, \"iccf\") != NULL)\n\t\t    p = sponsor < 0\n\t\t\t? N_(\"type  :help sponsor<Enter>    for information \")\n\t\t\t: N_(\"type  :help register<Enter>   for information \");\n\t\telse if (strstr(p, \"Orphans\") != NULL)\n\t\t    p = N_(\"menu  Help->Sponsor/Register  for information    \");\n\t    }\n\t    if (*p != NUL)\n\t\tdo_intro_line(row, (char_u *)_(p), i == 2, 0);\n\t    ++row;\n\t}\n    }\n\n    // Make the wait-return message appear just below the text.\n    if (colon)\n\tmsg_row = row;\n}\n\n    static void\ndo_intro_line(\n    int\t\trow,\n    char_u\t*mesg,\n    int\t\tadd_version,\n    int\t\tattr)\n{\n    char_u\tvers[20];\n    int\t\tcol;\n    char_u\t*p;\n    int\t\tl;\n    int\t\tclen;\n#ifdef MODIFIED_BY\n# define MODBY_LEN 150\n    char_u\tmodby[MODBY_LEN];\n\n    if (*mesg == ' ')\n    {\n\tvim_strncpy(modby, (char_u *)_(\"Modified by \"), MODBY_LEN - 1);\n\tl = (int)STRLEN(modby);\n\tvim_strncpy(modby + l, (char_u *)MODIFIED_BY, MODBY_LEN - l - 1);\n\tmesg = modby;\n    }\n#endif\n\n    // Center the message horizontally.\n    col = vim_strsize(mesg);\n    if (add_version)\n    {\n\tSTRCPY(vers, mediumVersion);\n\tif (highest_patch())\n\t{\n\t    // Check for 9.9x or 9.9xx, alpha/beta version\n\t    if (isalpha((int)vers[3]))\n\t    {\n\t\tint len = (isalpha((int)vers[4])) ? 5 : 4;\n\t\tsprintf((char *)vers + len, \".%d%s\", highest_patch(),\n\t\t\t\t\t\t\t mediumVersion + len);\n\t    }\n\t    else\n\t\tsprintf((char *)vers + 3, \".%d\", highest_patch());\n\t}\n\tcol += (int)STRLEN(vers);\n    }\n    col = (Columns - col) / 2;\n    if (col < 0)\n\tcol = 0;\n\n    // Split up in parts to highlight <> items differently.\n    for (p = mesg; *p != NUL; p += l)\n    {\n\tclen = 0;\n\tfor (l = 0; p[l] != NUL\n\t\t\t && (l == 0 || (p[l] != '<' && p[l - 1] != '>')); ++l)\n\t{\n\t    if (has_mbyte)\n\t    {\n\t\tclen += ptr2cells(p + l);\n\t\tl += (*mb_ptr2len)(p + l) - 1;\n\t    }\n\t    else\n\t\tclen += byte2cells(p[l]);\n\t}\n\tscreen_puts_len(p, l, row, col, *p == '<' ? HL_ATTR(HLF_8) : attr);\n\tcol += clen;\n    }\n\n    // Add the version number to the version line.\n    if (add_version)\n\tscreen_puts(vers, row, col, 0);\n}\n\n/*\n * \":intro\": clear screen, display intro screen and wait for return.\n */\n    void\nex_intro(exarg_T *eap UNUSED)\n{\n    screenclear();\n    intro_message(TRUE);\n    wait_return(TRUE);\n}\n"], "fixing_code": ["\" Vim autoload file for editing compressed files.\n\" Maintainer:\tThe Vim Project <https://github.com/vim/vim>\n\" Last Change:\t2023 Aug 10\n\" Former Maintainer: Bram Moolenaar <Bram@vim.org>\n\n\" These functions are used by the gzip plugin.\n\n\" Function to check that executing \"cmd [-f]\" works.\n\" The result is cached in s:have_\"cmd\" for speed.\nfun s:check(cmd)\n  let name = substitute(a:cmd, '\\(\\S*\\).*', '\\1', '')\n  if !exists(\"s:have_\" . name)\n    \" safety check, don't execute anything from the current directory\n    let f = fnamemodify(exepath(name), \":p:h\") !=# getcwd()\n    if !f\n      echoerr \"Warning: NOT executing \" .. name .. \" from current directory!\"\n    endif\n    let e = executable(name)\n    if e < 0\n      let r = system(name . \" --version\")\n      let e = (r !~ \"not found\" && r != \"\")\n    endif\n    exe \"let s:have_\" . name . \"=\" . (e && f)\n  endif\n  exe \"return s:have_\" . name\nendfun\n\n\" Set b:gzip_comp_arg to the gzip argument to be used for compression, based on\n\" the flags in the compressed file.\n\" The only compression methods that can be detected are max speed (-1) and max\n\" compression (-9).\nfun s:set_compression(line)\n  \" get the Compression Method\n  let l:cm = char2nr(a:line[2])\n  \" if it's 8 (DEFLATE), we can check for the compression level\n  if l:cm == 8\n    \" get the eXtra FLags\n    let l:xfl = char2nr(a:line[8])\n    \" max compression\n    if l:xfl == 2\n      let b:gzip_comp_arg = \"-9\"\n    \" min compression\n    elseif l:xfl == 4\n      let b:gzip_comp_arg = \"-1\"\n    endif\n  endif\nendfun\n\n\n\" After reading compressed file: Uncompress text in buffer with \"cmd\"\nfun gzip#read(cmd)\n  \" don't do anything if the cmd is not supported\n  if !s:check(a:cmd)\n    return\n  endif\n\n  \" for gzip check current compression level and set b:gzip_comp_arg.\n  silent! unlet b:gzip_comp_arg\n  if a:cmd[0] == 'g'\n    call s:set_compression(getline(1))\n  endif\n\n  \" make 'patchmode' empty, we don't want a copy of the written file\n  let pm_save = &pm\n  set pm=\n  \" remove 'a' and 'A' from 'cpo' to avoid the alternate file changes\n  let cpo_save = &cpo\n  set cpo-=a cpo-=A\n  \" set 'modifiable'\n  let ma_save = &ma\n  setlocal ma\n  \" set 'write'\n  let write_save = &write\n  set write\n  \" Reset 'foldenable', otherwise line numbers get adjusted.\n  if has(\"folding\")\n    let fen_save = &fen\n    setlocal nofen\n  endif\n\n  \" when filtering the whole buffer, it will become empty\n  let empty = line(\"'[\") == 1 && line(\"']\") == line(\"$\")\n  let tmp = tempname()\n  let tmpe = tmp . \".\" . expand(\"<afile>:e\")\n  if exists('*fnameescape')\n    let tmp_esc = fnameescape(tmp)\n    let tmpe_esc = fnameescape(tmpe)\n  else\n    let tmp_esc = escape(tmp, ' ')\n    let tmpe_esc = escape(tmpe, ' ')\n  endif\n  \" write the just read lines to a temp file \"'[,']w tmp.gz\"\n  execute \"silent '[,']w \" . tmpe_esc\n  \" uncompress the temp file: call system(\"gzip -dn tmp.gz\")\n  call system(a:cmd . \" \" . s:escape(tmpe))\n  if !filereadable(tmp)\n    \" uncompress didn't work!  Keep the compressed file then.\n    echoerr \"Error: Could not read uncompressed file\"\n    let ok = 0\n  else\n    let ok = 1\n    \" delete the compressed lines; remember the line number\n    let l = line(\"'[\") - 1\n    if exists(\":lockmarks\")\n      lockmarks '[,']d _\n    else\n      '[,']d _\n    endif\n    \" read in the uncompressed lines \"'[-1r tmp\"\n    \" Use ++edit if the buffer was empty, keep the 'ff' and 'fenc' options.\n    setlocal nobin\n    if exists(\":lockmarks\")\n      if empty\n\texecute \"silent lockmarks \" . l . \"r ++edit \" . tmp_esc\n      else\n\texecute \"silent lockmarks \" . l . \"r \" . tmp_esc\n      endif\n    else\n      execute \"silent \" . l . \"r \" . tmp_esc\n    endif\n\n    \" if buffer became empty, delete trailing blank line\n    if empty\n      silent $delete _\n      1\n    endif\n    \" delete the temp file and the used buffers\n    call delete(tmp)\n    silent! exe \"bwipe \" . tmp_esc\n    silent! exe \"bwipe \" . tmpe_esc\n  endif\n  \" Store the OK flag, so that we can use it when writing.\n  let b:uncompressOk = ok\n\n  \" Restore saved option values.\n  let &pm = pm_save\n  let &cpo = cpo_save\n  let &l:ma = ma_save\n  let &write = write_save\n  if has(\"folding\")\n    let &l:fen = fen_save\n  endif\n\n  \" When uncompressed the whole buffer, do autocommands\n  if ok && empty\n    if exists('*fnameescape')\n      let fname = fnameescape(expand(\"%:r\"))\n    else\n      let fname = escape(expand(\"%:r\"), \" \\t\\n*?[{`$\\\\%#'\\\"|!<\")\n    endif\n    if &verbose >= 8\n      execute \"doau BufReadPost \" . fname\n    else\n      execute \"silent! doau BufReadPost \" . fname\n    endif\n  endif\nendfun\n\n\" After writing compressed file: Compress written file with \"cmd\"\nfun gzip#write(cmd)\n  if exists('b:uncompressOk') && !b:uncompressOk\n    echomsg \"Not compressing file because uncompress failed; reset b:uncompressOk to compress anyway\"\n  \" don't do anything if the cmd is not supported\n  elseif s:check(a:cmd)\n    \" Rename the file before compressing it.\n    let nm = resolve(expand(\"<afile>\"))\n    let nmt = s:tempname(nm)\n    if rename(nm, nmt) == 0\n      if exists(\"b:gzip_comp_arg\")\n\tcall system(a:cmd . \" \" . b:gzip_comp_arg . \" -- \" . s:escape(nmt))\n      else\n\tcall system(a:cmd . \" -- \" . s:escape(nmt))\n      endif\n      call rename(nmt . \".\" . expand(\"<afile>:e\"), nm)\n    endif\n  endif\nendfun\n\n\" Before appending to compressed file: Uncompress file with \"cmd\"\nfun gzip#appre(cmd)\n  \" don't do anything if the cmd is not supported\n  if s:check(a:cmd)\n    let nm = expand(\"<afile>\")\n\n    \" for gzip check current compression level and set b:gzip_comp_arg.\n    silent! unlet b:gzip_comp_arg\n    if a:cmd[0] == 'g'\n      call s:set_compression(readfile(nm, \"b\", 1)[0])\n    endif\n\n    \" Rename to a weird name to avoid the risk of overwriting another file\n    let nmt = expand(\"<afile>:p:h\") . \"/X~=@l9q5\"\n    let nmte = nmt . \".\" . expand(\"<afile>:e\")\n    if rename(nm, nmte) == 0\n      if &patchmode != \"\" && getfsize(nm . &patchmode) == -1\n\t\" Create patchmode file by creating the decompressed file new\n\tcall system(a:cmd . \" -c -- \" . s:escape(nmte) . \" > \" . s:escape(nmt))\n\tcall rename(nmte, nm . &patchmode)\n      else\n\tcall system(a:cmd . \" -- \" . s:escape(nmte))\n      endif\n      call rename(nmt, nm)\n    endif\n  endif\nendfun\n\n\" find a file name for the file to be compressed.  Use \"name\" without an\n\" extension if possible.  Otherwise use a weird name to avoid overwriting an\n\" existing file.\nfun s:tempname(name)\n  let fn = fnamemodify(a:name, \":r\")\n  if !filereadable(fn) && !isdirectory(fn)\n    return fn\n  endif\n  return fnamemodify(a:name, \":p:h\") . \"/X~=@l9q5\"\nendfun\n\nfun s:escape(name)\n  \" shellescape() was added by patch 7.0.111\n  if exists(\"*shellescape\")\n    return shellescape(a:name)\n  endif\n  return \"'\" . a:name . \"'\"\nendfun\n\n\" vim: set sw=2 :\n", "\" zip.vim: Handles browsing zipfiles\n\"            AUTOLOAD PORTION\n\" Date:\t\tMar 12, 2023\n\" Version:\t33\n\" Maintainer:\tCharles E Campbell <NcampObell@SdrPchip.AorgM-NOSPAM>\n\" License:\tVim License  (see vim's :help license)\n\" Copyright:    Copyright (C) 2005-2019 Charles E. Campbell {{{1\n\"               Permission is hereby granted to use and distribute this code,\n\"               with or without modifications, provided that this copyright\n\"               notice is copied with it. Like anything else that's free,\n\"               zip.vim and zipPlugin.vim are provided *as is* and comes with\n\"               no warranty of any kind, either expressed or implied. By using\n\"               this plugin, you agree that in no event will the copyright\n\"               holder be liable for any damages resulting from the use\n\"               of this software.\n\"redraw!|call DechoSep()|call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()\n\n\" ---------------------------------------------------------------------\n\" Load Once: {{{1\nif &cp || exists(\"g:loaded_zip\")\n finish\nendif\nlet g:loaded_zip= \"v33\"\nif v:version < 702\n echohl WarningMsg\n echo \"***warning*** this version of zip needs vim 7.2 or later\"\n echohl Normal\n finish\nendif\nlet s:keepcpo= &cpo\nset cpo&vim\n\"DechoTabOn\n\nlet s:zipfile_escape = ' ?&;\\'\nlet s:ERROR          = 2\nlet s:WARNING        = 1\nlet s:NOTE           = 0\n\n\" ---------------------------------------------------------------------\n\"  Global Values: {{{1\nif !exists(\"g:zip_shq\")\n if &shq != \"\"\n  let g:zip_shq= &shq\n elseif has(\"unix\")\n  let g:zip_shq= \"'\"\n else\n  let g:zip_shq= '\"'\n endif\nendif\nif !exists(\"g:zip_zipcmd\")\n let g:zip_zipcmd= \"zip\"\nendif\nif !exists(\"g:zip_unzipcmd\")\n let g:zip_unzipcmd= \"unzip\"\nendif\nif !exists(\"g:zip_extractcmd\")\n let g:zip_extractcmd= g:zip_unzipcmd\nendif\n\nif fnamemodify(exepath(g:zip_unzipcmd), \":p:h\") ==# getcwd()\n echoerr \"Warning: NOT executing \" .. g:zip_unzipcmd .. \" from current directory!\"\n finish\nendif\n\" ----------------\n\"  Functions: {{{1\n\" ----------------\n\n\" ---------------------------------------------------------------------\n\" zip#Browse: {{{2\nfun! zip#Browse(zipfile)\n\"  call Dfunc(\"zip#Browse(zipfile<\".a:zipfile.\">)\")\n  \" sanity check: insure that the zipfile has \"PK\" as its first two letters\n  \"               (zipped files have a leading PK as a \"magic cookie\")\n  if !filereadable(a:zipfile) || readfile(a:zipfile, \"\", 1)[0] !~ '^PK'\n   exe \"noswapfile noautocmd noswapfile e \".fnameescape(a:zipfile)\n\"   call Dret(\"zip#Browse : not a zipfile<\".a:zipfile.\">\")\n   return\n\"  else        \" Decho\n\"   call Decho(\"zip#Browse: a:zipfile<\".a:zipfile.\"> passed PK test - it's a zip file\")\n  endif\n\n  let repkeep= &report\n  set report=10\n\n  \" sanity checks\n  if !exists(\"*fnameescape\")\n   if &verbose > 1\n    echoerr \"the zip plugin is not available (your vim doesn't support fnameescape())\"\n   endif\n   return\n  endif\n  if !executable(g:zip_unzipcmd)\n   redraw!\n   echohl Error | echo \"***error*** (zip#Browse) unzip not available on your system\"\n\"   call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()\n   let &report= repkeep\n\"   call Dret(\"zip#Browse\")\n   return\n  endif\n  if !filereadable(a:zipfile)\n   if a:zipfile !~# '^\\a\\+://'\n    \" if it's an url, don't complain, let url-handlers such as vim do its thing\n    redraw!\n    echohl Error | echo \"***error*** (zip#Browse) File not readable<\".a:zipfile.\">\" | echohl None\n\"    call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()\n   endif\n   let &report= repkeep\n\"   call Dret(\"zip#Browse : file<\".a:zipfile.\"> not readable\")\n   return\n  endif\n\"  call Decho(\"passed sanity checks\")\n  if &ma != 1\n   set ma\n  endif\n  let b:zipfile= a:zipfile\n\n  setlocal noswapfile\n  setlocal buftype=nofile\n  setlocal bufhidden=hide\n  setlocal nobuflisted\n  setlocal nowrap\n\n  \" Oct 12, 2021: need to re-use Bram's syntax/tar.vim.\n  \" Setting the filetype to zip doesn't do anything (currently),\n  \" but it is perhaps less confusing to curious perusers who do\n  \" a :echo &ft\n  setf zip\n  run! syntax/tar.vim\n\n  \" give header\n  call append(0, ['\" zip.vim version '.g:loaded_zip,\n \\                '\" Browsing zipfile '.a:zipfile,\n \\                '\" Select a file with cursor and press ENTER'])\n  keepj $\n\n\"  call Decho(\"exe silent r! \".g:zip_unzipcmd.\" -l -- \".s:Escape(a:zipfile,1))\n  exe \"keepj sil! r! \".g:zip_unzipcmd.\" -Z -1 -- \".s:Escape(a:zipfile,1)\n  if v:shell_error != 0\n   redraw!\n   echohl WarningMsg | echo \"***warning*** (zip#Browse) \".fnameescape(a:zipfile).\" is not a zip file\" | echohl None\n\"   call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()\n   keepj sil! %d\n   let eikeep= &ei\n   set ei=BufReadCmd,FileReadCmd\n   exe \"keepj r \".fnameescape(a:zipfile)\n   let &ei= eikeep\n   keepj 1d\n\"   call Dret(\"zip#Browse\")\n   return\n  endif\n\n  \" Maps associated with zip plugin\n  setlocal noma nomod ro\n  noremap <silent> <buffer>\t<cr>\t\t:call <SID>ZipBrowseSelect()<cr>\n  noremap <silent> <buffer>\tx\t\t:call zip#Extract()<cr>\n  if &mouse != \"\"\n   noremap <silent> <buffer>\t<leftmouse>\t<leftmouse>:call <SID>ZipBrowseSelect()<cr>\n  endif\n\n  let &report= repkeep\n\"  call Dret(\"zip#Browse\")\nendfun\n\n\" ---------------------------------------------------------------------\n\" ZipBrowseSelect: {{{2\nfun! s:ZipBrowseSelect()\n  \"  call Dfunc(\"ZipBrowseSelect() zipfile<\".((exists(\"b:zipfile\"))? b:zipfile : \"n/a\").\"> curfile<\".expand(\"%\").\">\")\n  let repkeep= &report\n  set report=10\n  let fname= getline(\".\")\n  if !exists(\"b:zipfile\")\n\"   call Dret(\"ZipBrowseSelect : b:zipfile doesn't exist!\")\n   return\n  endif\n\n  \" sanity check\n  if fname =~ '^\"'\n   let &report= repkeep\n\"   call Dret(\"ZipBrowseSelect\")\n   return\n  endif\n  if fname =~ '/$'\n   redraw!\n   echohl Error | echo \"***error*** (zip#Browse) Please specify a file, not a directory\" | echohl None\n\"   call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()\n   let &report= repkeep\n\"   call Dret(\"ZipBrowseSelect\")\n   return\n  endif\n\n\"  call Decho(\"fname<\".fname.\">\")\n\n  \" get zipfile to the new-window\n  let zipfile = b:zipfile\n  let curfile = expand(\"%\")\n\"  call Decho(\"zipfile<\".zipfile.\">\")\n\"  call Decho(\"curfile<\".curfile.\">\")\n\n  noswapfile new\n  if !exists(\"g:zip_nomax\") || g:zip_nomax == 0\n   wincmd _\n  endif\n  let s:zipfile_{winnr()}= curfile\n\"  call Decho(\"exe e \".fnameescape(\"zipfile://\".zipfile.'::'.fname))\n  exe \"noswapfile e \".fnameescape(\"zipfile://\".zipfile.'::'.fname)\n  filetype detect\n\n  let &report= repkeep\n\"  call Dret(\"ZipBrowseSelect : s:zipfile_\".winnr().\"<\".s:zipfile_{winnr()}.\">\")\nendfun\n\n\" ---------------------------------------------------------------------\n\" zip#Read: {{{2\nfun! zip#Read(fname,mode)\n\"  call Dfunc(\"zip#Read(fname<\".a:fname.\">,mode=\".a:mode.\")\")\n  let repkeep= &report\n  set report=10\n\n  if has(\"unix\")\n   let zipfile = substitute(a:fname,'zipfile://\\(.\\{-}\\)::[^\\\\].*$','\\1','')\n   let fname   = substitute(a:fname,'zipfile://.\\{-}::\\([^\\\\].*\\)$','\\1','')\n  else\n   let zipfile = substitute(a:fname,'^.\\{-}zipfile://\\(.\\{-}\\)::[^\\\\].*$','\\1','')\n   let fname   = substitute(a:fname,'^.\\{-}zipfile://.\\{-}::\\([^\\\\].*\\)$','\\1','')\n   let fname   = substitute(fname, '[', '[[]', 'g')\n  endif\n\"  call Decho(\"zipfile<\".zipfile.\">\")\n\"  call Decho(\"fname  <\".fname.\">\")\n  \" sanity check\n  if !executable(substitute(g:zip_unzipcmd,'\\s\\+.*$','',''))\n   redraw!\n   echohl Error | echo \"***error*** (zip#Read) sorry, your system doesn't appear to have the \".g:zip_unzipcmd.\" program\" | echohl None\n\"   call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()\n   let &report= repkeep\n\"   call Dret(\"zip#Write\")\n   return\n  endif\n\n  \" the following code does much the same thing as\n  \"   exe \"keepj sil! r! \".g:zip_unzipcmd.\" -p -- \".s:Escape(zipfile,1).\" \".s:Escape(fnameescape(fname),1)\n  \" but allows zipfile://... entries in quickfix lists\n  let temp = tempname()\n\"  call Decho(\"using temp file<\".temp.\">\")\n  let fn   = expand('%:p')\n  exe \"sil! !\".g:zip_unzipcmd.\" -p -- \".s:Escape(zipfile,1).\" \".s:Escape(fnameescape(fname),1).' > '.temp\n\"  call Decho(\"exe sil! !\".g:zip_unzipcmd.\" -p -- \".s:Escape(zipfile,1).\" \".s:Escape(fnameescape(fname),1).' > '.temp)\n  sil exe 'keepalt file '.temp\n  sil keepj e!\n  sil exe 'keepalt file '.fnameescape(fn)\n  call delete(temp)\n\n  filetype detect\n\n  \" cleanup\n  \"  keepj 0d   \" used to be needed for the ...r! ... method\n  set nomod\n\n  let &report= repkeep\n\"  call Dret(\"zip#Read\")\nendfun\n\n\" ---------------------------------------------------------------------\n\" zip#Write: {{{2\nfun! zip#Write(fname)\n\"  call Dfunc(\"zip#Write(fname<\".a:fname.\">) zipfile_\".winnr().\"<\".s:zipfile_{winnr()}.\">\")\n  let repkeep= &report\n  set report=10\n\n  \" sanity checks\n  if !executable(substitute(g:zip_zipcmd,'\\s\\+.*$','',''))\n   redraw!\n   echohl Error | echo \"***error*** (zip#Write) sorry, your system doesn't appear to have the \".g:zip_zipcmd.\" program\" | echohl None\n\"   call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()\n   let &report= repkeep\n\"   call Dret(\"zip#Write\")\n   return\n  endif\n  if !exists(\"*mkdir\")\n   redraw!\n   echohl Error | echo \"***error*** (zip#Write) sorry, mkdir() doesn't work on your system\" | echohl None\n\"   call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()\n   let &report= repkeep\n\"   call Dret(\"zip#Write\")\n   return\n  endif\n\n  let curdir= getcwd()\n  let tmpdir= tempname()\n\"  call Decho(\"orig tempname<\".tmpdir.\">\")\n  if tmpdir =~ '\\.'\n   let tmpdir= substitute(tmpdir,'\\.[^.]*$','','e')\n  endif\n\"  call Decho(\"tmpdir<\".tmpdir.\">\")\n  call mkdir(tmpdir,\"p\")\n\n  \" attempt to change to the indicated directory\n  if s:ChgDir(tmpdir,s:ERROR,\"(zip#Write) cannot cd to temporary directory\")\n   let &report= repkeep\n\"   call Dret(\"zip#Write\")\n   return\n  endif\n\"  call Decho(\"current directory now: \".getcwd())\n\n  \" place temporary files under .../_ZIPVIM_/\n  if isdirectory(\"_ZIPVIM_\")\n   call s:Rmdir(\"_ZIPVIM_\")\n  endif\n  call mkdir(\"_ZIPVIM_\")\n  cd _ZIPVIM_\n\"  call Decho(\"current directory now: \".getcwd())\n\n  if has(\"unix\")\n   let zipfile = substitute(a:fname,'zipfile://\\(.\\{-}\\)::[^\\\\].*$','\\1','')\n   let fname   = substitute(a:fname,'zipfile://.\\{-}::\\([^\\\\].*\\)$','\\1','')\n  else\n   let zipfile = substitute(a:fname,'^.\\{-}zipfile://\\(.\\{-}\\)::[^\\\\].*$','\\1','')\n   let fname   = substitute(a:fname,'^.\\{-}zipfile://.\\{-}::\\([^\\\\].*\\)$','\\1','')\n  endif\n\"  call Decho(\"zipfile<\".zipfile.\">\")\n\"  call Decho(\"fname  <\".fname.\">\")\n\n  if fname =~ '/'\n   let dirpath = substitute(fname,'/[^/]\\+$','','e')\n   if has(\"win32unix\") && executable(\"cygpath\")\n    let dirpath = substitute(system(\"cygpath \".s:Escape(dirpath,0)),'\\n','','e')\n   endif\n\"   call Decho(\"mkdir(dirpath<\".dirpath.\">,p)\")\n   call mkdir(dirpath,\"p\")\n  endif\n  if zipfile !~ '/'\n   let zipfile= curdir.'/'.zipfile\n  endif\n\"  call Decho(\"zipfile<\".zipfile.\"> fname<\".fname.\">\")\n\n  exe \"w! \".fnameescape(fname)\n  if has(\"win32unix\") && executable(\"cygpath\")\n   let zipfile = substitute(system(\"cygpath \".s:Escape(zipfile,0)),'\\n','','e')\n  endif\n\n  if (has(\"win32\") || has(\"win95\") || has(\"win64\") || has(\"win16\")) && &shell !~? 'sh$'\n    let fname = substitute(fname, '[', '[[]', 'g')\n  endif\n\n\"  call Decho(g:zip_zipcmd.\" -u \".s:Escape(fnamemodify(zipfile,\":p\"),0).\" \".s:Escape(fname,0))\n  call system(g:zip_zipcmd.\" -u \".s:Escape(fnamemodify(zipfile,\":p\"),0).\" \".s:Escape(fname,0))\n  if v:shell_error != 0\n   redraw!\n   echohl Error | echo \"***error*** (zip#Write) sorry, unable to update \".zipfile.\" with \".fname | echohl None\n\"   call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()\n\n  elseif s:zipfile_{winnr()} =~ '^\\a\\+://'\n   \" support writing zipfiles across a network\n   let netzipfile= s:zipfile_{winnr()}\n\"   call Decho(\"handle writing <\".zipfile.\"> across network as <\".netzipfile.\">\")\n   1split|enew\n   let binkeep= &binary\n   let eikeep = &ei\n   set binary ei=all\n   exe \"noswapfile e! \".fnameescape(zipfile)\n   call netrw#NetWrite(netzipfile)\n   let &ei     = eikeep\n   let &binary = binkeep\n   q!\n   unlet s:zipfile_{winnr()}\n  endif\n  \n  \" cleanup and restore current directory\n  cd ..\n  call s:Rmdir(\"_ZIPVIM_\")\n  call s:ChgDir(curdir,s:WARNING,\"(zip#Write) unable to return to \".curdir.\"!\")\n  call s:Rmdir(tmpdir)\n  setlocal nomod\n\n  let &report= repkeep\n\"  call Dret(\"zip#Write\")\nendfun\n\n\" ---------------------------------------------------------------------\n\" zip#Extract: extract a file from a zip archive {{{2\nfun! zip#Extract()\n\"  call Dfunc(\"zip#Extract()\")\n\n  let repkeep= &report\n  set report=10\n  let fname= getline(\".\")\n\"  call Decho(\"fname<\".fname.\">\")\n\n  \" sanity check\n  if fname =~ '^\"'\n   let &report= repkeep\n\"   call Dret(\"zip#Extract\")\n   return\n  endif\n  if fname =~ '/$'\n   redraw!\n   echohl Error | echo \"***error*** (zip#Extract) Please specify a file, not a directory\" | echohl None\n   let &report= repkeep\n\"   call Dret(\"zip#Extract\")\n   return\n  endif\n\n  \" extract the file mentioned under the cursor\n\"  call Decho(\"system(\".g:zip_extractcmd.\" \".shellescape(b:zipfile).\" \".shellescape(shell).\")\")\n  call system(g:zip_extractcmd.\" \".shellescape(b:zipfile).\" \".shellescape(shell))\n\"  call Decho(\"zipfile<\".b:zipfile.\">\")\n  if v:shell_error != 0\n   echohl Error | echo \"***error*** \".g:zip_extractcmd.\" \".b:zipfile.\" \".fname.\": failed!\" | echohl NONE\n  elseif !filereadable(fname)\n   echohl Error | echo \"***error*** attempted to extract \".fname.\" but it doesn't appear to be present!\"\n  else\n   echo \"***note*** successfully extracted \".fname\n  endif\n\n  \" restore option\n  let &report= repkeep\n\n\"  call Dret(\"zip#Extract\")\nendfun\n\n\" ---------------------------------------------------------------------\n\" s:Escape: {{{2\nfun! s:Escape(fname,isfilt)\n\"  call Dfunc(\"QuoteFileDir(fname<\".a:fname.\"> isfilt=\".a:isfilt.\")\")\n  if exists(\"*shellescape\")\n   if a:isfilt\n    let qnameq= shellescape(a:fname,1)\n   else\n    let qnameq= shellescape(a:fname)\n   endif\n  else\n   let qnameq= g:zip_shq.escape(a:fname,g:zip_shq).g:zip_shq\n  endif\n\"  call Dret(\"QuoteFileDir <\".qnameq.\">\")\n  return qnameq\nendfun\n\n\" ---------------------------------------------------------------------\n\" ChgDir: {{{2\nfun! s:ChgDir(newdir,errlvl,errmsg)\n\"  call Dfunc(\"ChgDir(newdir<\".a:newdir.\"> errlvl=\".a:errlvl.\"  errmsg<\".a:errmsg.\">)\")\n\n  try\n   exe \"cd \".fnameescape(a:newdir)\n  catch /^Vim\\%((\\a\\+)\\)\\=:E344/\n   redraw!\n   if a:errlvl == s:NOTE\n    echo \"***note*** \".a:errmsg\n   elseif a:errlvl == s:WARNING\n    echohl WarningMsg | echo \"***warning*** \".a:errmsg | echohl NONE\n   elseif a:errlvl == s:ERROR\n    echohl Error | echo \"***error*** \".a:errmsg | echohl NONE\n   endif\n\"   call inputsave()|call input(\"Press <cr> to continue\")|call inputrestore()\n\"   call Dret(\"ChgDir 1\")\n   return 1\n  endtry\n\n\"  call Dret(\"ChgDir 0\")\n  return 0\nendfun\n\n\" ---------------------------------------------------------------------\n\" s:Rmdir: {{{2\nfun! s:Rmdir(fname)\n\"  call Dfunc(\"Rmdir(fname<\".a:fname.\">)\")\n  if (has(\"win32\") || has(\"win95\") || has(\"win64\") || has(\"win16\")) && &shell !~? 'sh$'\n   call system(\"rmdir /S/Q \".s:Escape(a:fname,0))\n  else\n   call system(\"/bin/rm -rf \".s:Escape(a:fname,0))\n  endif\n\"  call Dret(\"Rmdir\")\nendfun\n\n\" ------------------------------------------------------------------------\n\" Modelines And Restoration: {{{1\nlet &cpo= s:keepcpo\nunlet s:keepcpo\n\" vim:ts=8 fdm=marker\n", "\" Vim filetype plugin file\n\" Language:      Perl\n\" Maintainer:    vim-perl <vim-perl@googlegroups.com>\n\" Homepage:      https://github.com/vim-perl/vim-perl\n\" Bugs/requests: https://github.com/vim-perl/vim-perl/issues\n\" License:       Vim License (see :help license)\n\" Last Change:   2021 Nov 10\n\nif exists(\"b:did_ftplugin\") | finish | endif\nlet b:did_ftplugin = 1\n\n\" Make sure the continuation lines below do not cause problems in\n\" compatibility mode.\nlet s:save_cpo = &cpo\nset cpo-=C\n\nsetlocal formatoptions-=t\nsetlocal formatoptions+=crqol\nsetlocal keywordprg=perldoc\\ -f\n\nsetlocal comments=:#\nsetlocal commentstring=#%s\n\n\" Provided by Ned Konz <ned at bike-nomad dot com>\n\"---------------------------------------------\nsetlocal include=\\\\<\\\\(use\\\\\\|require\\\\)\\\\>\n\" '+' is removed to support plugins in Catalyst or DBIx::Class\n\" where the leading plus indicates a fully-qualified module name.\nsetlocal includeexpr=substitute(substitute(substitute(substitute(v:fname,'+','',''),'::','/','g'),'->\\*','',''),'$','.pm','')\nsetlocal define=[^A-Za-z_]\nsetlocal iskeyword+=:\n\n\" The following line changes a global variable but is necessary to make\n\" gf and similar commands work. Thanks to Andrew Pimlott for pointing\n\" out the problem.\nlet s:old_isfname = &isfname\nset isfname+=:\nlet s:new_isfname = &isfname\n\naugroup perl_global_options\n  au!\n  exe \"au BufEnter * if &filetype == 'perl' | let &isfname = '\" . s:new_isfname . \"' | endif\"\n  exe \"au BufLeave * if &filetype == 'perl' | let &isfname = '\" . s:old_isfname . \"' | endif\"\naugroup END\n\n\" Undo the stuff we changed.\nlet b:undo_ftplugin = \"setlocal fo< kp< com< cms< inc< inex< def< isk<\" .\n      \\               \" | let &isfname = '\" .  s:old_isfname . \"'\"\n\nif get(g:, 'perl_fold', 0)\n  setlocal foldmethod=syntax\n  let b:undo_ftplugin .= \" | setlocal fdm<\"\nendif\n\n\" Set this once, globally.\nif !exists(\"perlpath\")\n    \" safety check: don't execute perl from current directory\n    if executable(\"perl\") && fnamemodify(exepath(\"perl\"), \":p:h\") != getcwd()\n      try\n\tif &shellxquote != '\"'\n\t    let perlpath = system('perl -e \"print join(q/,/,@INC)\"')\n\telse\n\t    let perlpath = system(\"perl -e 'print join(q/,/,@INC)'\")\n\tendif\n\tlet perlpath = substitute(perlpath,',.$',',,','')\n      catch /E145:/\n\tlet perlpath = \".,,\"\n      endtry\n    else\n\t\" If we can't call perl to get its path, just default to using the\n\t\" current directory and the directory of the current file.\n\tlet perlpath = \".,,\"\n    endif\nendif\n\n\" Append perlpath to the existing path value, if it is set.  Since we don't\n\" use += to do it because of the commas in perlpath, we have to handle the\n\" global / local settings, too.\nif &l:path == \"\"\n    if &g:path == \"\"\n        let &l:path=perlpath\n    else\n        let &l:path=&g:path.\",\".perlpath\n    endif\nelse\n    let &l:path=&l:path.\",\".perlpath\nendif\n\nlet b:undo_ftplugin .= \" | setlocal pa<\"\n\"---------------------------------------------\n\n\" Change the browse dialog to show mainly Perl-related files\nif (has(\"gui_win32\") || has(\"gui_gtk\")) && !exists(\"b:browsefilter\")\n    let b:browsefilter = \"Perl Source Files (*.pl)\\t*.pl\\n\" .\n\t\t       \\ \"Perl Modules (*.pm)\\t*.pm\\n\" .\n\t\t       \\ \"Perl Documentation Files (*.pod)\\t*.pod\\n\" .\n\t\t       \\ \"All Files (*.*)\\t*.*\\n\"\n    let b:undo_ftplugin .= \" | unlet! b:browsefilter\"\nendif\n\n\" Proper matching for matchit plugin\nif exists(\"loaded_matchit\") && !exists(\"b:match_words\")\n    let b:match_skip = 's:comment\\|string\\|perlQQ\\|perlShellCommand\\|perlHereDoc\\|perlSubstitution\\|perlTranslation\\|perlMatch\\|perlFormatField'\n    let b:match_words = '\\<if\\>:\\<elsif\\>:\\<else\\>'\n    let b:undo_ftplugin .= \" | unlet! b:match_words b:match_skip\"\nendif\n\n\" Restore the saved compatibility options.\nlet &cpo = s:save_cpo\nunlet s:save_cpo s:old_isfname s:new_isfname\n", "\" Vim filetype plugin\n\" Language:\t\tRuby\n\" Maintainer:\t\tTim Pope <vimNOSPAM@tpope.org>\n\" URL:\t\t\thttps://github.com/vim-ruby/vim-ruby\n\" Release Coordinator:\tDoug Kearns <dougkearns@gmail.com>\n\" Last Change:\t\t2022 Mar 21\n\nif (exists(\"b:did_ftplugin\"))\n  finish\nendif\nlet b:did_ftplugin = 1\n\nlet s:cpo_save = &cpo\nset cpo&vim\n\nif has(\"gui_running\") && !has(\"gui_win32\")\n  setlocal keywordprg=ri\\ -T\\ -f\\ bs\nelse\n  setlocal keywordprg=ri\nendif\n\n\" Matchit support\nif exists(\"loaded_matchit\") && !exists(\"b:match_words\")\n  let b:match_ignorecase = 0\n\n  let b:match_words =\n\t\\ '{\\|\\<\\%(if\\|unless\\|case\\|while\\|until\\|for\\|do\\|class\\|module\\|def\\|=\\@<!begin\\)\\>=\\@!' .\n\t\\ ':' .\n\t\\ '\\<\\%(else\\|elsif\\|ensure\\|when\\|rescue\\|break\\|redo\\|next\\|retry\\)\\>' .\n\t\\ ':' .\n        \\ '}\\|\\%(^\\|[^.\\:@$=]\\)\\@<=\\<end\\:\\@!\\>' .\n        \\ ',^=begin\\>:^=end\\>,' .\n\t\\ ',\\[:\\],(:)'\n\n  let b:match_skip =\n\t\\ \"synIDattr(synID(line('.'),col('.'),0),'name') =~ '\" .\n\t\\ \"\\\\<ruby\\\\%(String\\\\|.\\+Delimiter\\\\|Character\\\\|.\\+Escape\\\\|\" .\n        \\ \"Regexp\\\\|Interpolation\\\\|Comment\\\\|Documentation\\\\|\" .\n\t\\ \"ConditionalModifier\\\\|RepeatModifier\\\\|RescueModifier\\\\|OptionalDo\\\\|\" .\n\t\\ \"MethodName\\\\|BlockArgument\\\\|KeywordAsMethod\\\\|ClassVariable\\\\|\" .\n\t\\ \"InstanceVariable\\\\|GlobalVariable\\\\|Symbol\\\\)\\\\>'\"\nendif\n\nsetlocal formatoptions-=t formatoptions+=croql\n\nsetlocal include=^\\\\s*\\\\<\\\\(load\\\\>\\\\\\|require\\\\>\\\\\\|autoload\\\\s*:\\\\=[\\\"']\\\\=\\\\h\\\\w*[\\\"']\\\\=,\\\\)\nsetlocal suffixesadd=.rb\n\nif exists(\"&ofu\") && has(\"ruby\")\n  setlocal omnifunc=rubycomplete#Complete\nendif\n\n\" TODO:\n\"setlocal define=^\\\\s*def\n\nsetlocal comments=b:#\nsetlocal commentstring=#\\ %s\n\nif !exists('g:ruby_version_paths')\n  let g:ruby_version_paths = {}\nendif\n\nfunction! s:query_path(root) abort\n  let code = \"print $:.join %q{,}\"\n  if &shell =~# 'sh' && empty(&shellxquote)\n    let prefix = 'env PATH='.shellescape($PATH).' '\n  else\n    let prefix = ''\n  endif\n  if &shellxquote == \"'\"\n    let path_check = prefix.'ruby --disable-gems -e \"' . code . '\"'\n  else\n    let path_check = prefix.\"ruby --disable-gems -e '\" . code . \"'\"\n  endif\n\n  let cd = haslocaldir() ? 'lcd' : 'cd'\n  let cwd = fnameescape(getcwd())\n  try\n    exe cd fnameescape(a:root)\n    let path = split(system(path_check),',')\n    exe cd cwd\n    return path\n  finally\n    exe cd cwd\n  endtry\nendfunction\n\nfunction! s:build_path(path) abort\n  let path = join(map(copy(a:path), 'v:val ==# \".\" ? \"\" : v:val'), ',')\n  if &g:path =~# '\\v^%(\\.,)=%(/%(usr|emx)/include,)=,$'\n    let path = path . ',.,,'\n  elseif &g:path =~# ',\\.,,$'\n    let path = &g:path[0:-4] . path . ',.,,'\n  elseif &g:path =~# ',,$'\n    let path = &g:path[0:-2] . path . ',,'\n  else\n    let path = substitute(&g:path, '[^,]\\zs$', ',', '') . path\n  endif\n  return path\nendfunction\n\nlet s:execute_ruby = 1\n\" Security Check, don't execute ruby from the current directory\nif fnamemodify(exepath(\"ruby\"), \":p:h\") ==# getcwd()\n  let s:execute_ruby = 0\nendif\n\nfunction SetRubyPath()\n  if !exists('b:ruby_version') && !exists('g:ruby_path') && isdirectory(expand('%:p:h'))\n    let s:version_file = findfile('.ruby-version', '.;')\n    if !empty(s:version_file) && filereadable(s:version_file) && s:execute_ruby\n      let b:ruby_version = get(readfile(s:version_file, '', 1), '')\n      if !has_key(g:ruby_version_paths, b:ruby_version)\n\tlet g:ruby_version_paths[b:ruby_version] = s:query_path(fnamemodify(s:version_file, ':p:h'))\n      endif\n    endif\n  endif\n\n  if exists(\"g:ruby_path\")\n    let s:ruby_path = type(g:ruby_path) == type([]) ? join(g:ruby_path, ',') : g:ruby_path\n  elseif has_key(g:ruby_version_paths, get(b:, 'ruby_version', '')) && s:execute_ruby\n    let s:ruby_paths = g:ruby_version_paths[b:ruby_version]\n    let s:ruby_path = s:build_path(s:ruby_paths)\n  else\n    if !exists('g:ruby_default_path')\n      if has(\"ruby\") && has(\"win32\")\n\truby ::VIM::command( 'let g:ruby_default_path = split(\"%s\",\",\")' % $:.join(%q{,}) )\n      elseif executable('ruby') && !empty($HOME) && s:execute_ruby\n\tlet g:ruby_default_path = s:query_path($HOME)\n      else\n\tlet g:ruby_default_path = map(split($RUBYLIB,':'), 'v:val ==# \".\" ? \"\" : v:val')\n      endif\n    endif\n    let s:ruby_paths = g:ruby_default_path\n    let s:ruby_path = s:build_path(s:ruby_paths)\n  endif\n\n  if stridx(&l:path, s:ruby_path) == -1\n    let &l:path = s:ruby_path\n  endif\n  if exists('s:ruby_paths') && stridx(&l:tags, join(map(copy(s:ruby_paths),'v:val.\"/tags\"'),',')) == -1\n    let &l:tags = &tags . ',' . join(map(copy(s:ruby_paths),'v:val.\"/tags\"'),',')\n  endif\nendfunction\n\ncall SetRubyPath()\n\nif (has(\"gui_win32\") || has(\"gui_gtk\")) && !exists(\"b:browsefilter\")\n  let b:browsefilter = \"Ruby Source Files (*.rb)\\t*.rb\\n\" .\n                     \\ \"All Files (*.*)\\t*.*\\n\"\nendif\n\nlet b:undo_ftplugin = \"setl inc= sua= path= tags= fo< com< cms< kp=\"\n      \\.\"| unlet! b:browsefilter b:match_ignorecase b:match_words b:match_skip\"\n      \\.\"| if exists('&ofu') && has('ruby') | setl ofu< | endif\"\n\nif get(g:, 'ruby_recommended_style', 1)\n  setlocal shiftwidth=2 softtabstop=2 expandtab\n  let b:undo_ftplugin .= ' | setl sw< sts< et<'\nendif\n\n\" To activate, :set ballooneval\nif exists('+balloonexpr') && get(g:, 'ruby_balloonexpr')\n  setlocal balloonexpr=RubyBalloonexpr()\n  let b:undo_ftplugin .= \"| setl bexpr=\"\nendif\n\nfunction! s:map(mode, flags, map) abort\n  let from = matchstr(a:map, '\\S\\+')\n  if empty(mapcheck(from, a:mode))\n    exe a:mode.'map' '<buffer>' a:flags a:map\n    let b:undo_ftplugin .= '|sil! '.a:mode.'unmap <buffer> '.from\n  endif\nendfunction\n\ncmap <buffer><script><expr> <Plug><ctag> substitute(RubyCursorTag(),'^$',\"\\022\\027\",'')\ncmap <buffer><script><expr> <Plug><cfile> substitute(RubyCursorFile(),'^$',\"\\022\\006\",'')\nlet b:undo_ftplugin .= \"| sil! cunmap <buffer> <Plug><ctag>| sil! cunmap <buffer> <Plug><cfile>\"\n\nif !exists(\"g:no_plugin_maps\") && !exists(\"g:no_ruby_maps\")\n  nmap <buffer><script> <SID>:  :<C-U>\n  nmap <buffer><script> <SID>c: :<C-U><C-R>=v:count ? v:count : ''<CR>\n  cmap <buffer> <SID><cfile> <Plug><cfile>\n  cmap <buffer> <SID><ctag>  <Plug><ctag>\n\n  nnoremap <silent> <buffer> [m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'b','n')<CR>\n  nnoremap <silent> <buffer> ]m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'','n')<CR>\n  nnoremap <silent> <buffer> [M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'b','n')<CR>\n  nnoremap <silent> <buffer> ]M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'','n')<CR>\n  xnoremap <silent> <buffer> [m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'b','v')<CR>\n  xnoremap <silent> <buffer> ]m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'','v')<CR>\n  xnoremap <silent> <buffer> [M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'b','v')<CR>\n  xnoremap <silent> <buffer> ]M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'','v')<CR>\n\n  nnoremap <silent> <buffer> [[ :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['rubyModule','rubyClass'],'b','n')<CR>\n  nnoremap <silent> <buffer> ]] :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['rubyModule','rubyClass'],'','n')<CR>\n  nnoremap <silent> <buffer> [] :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass'],'b','n')<CR>\n  nnoremap <silent> <buffer> ][ :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass'],'','n')<CR>\n  xnoremap <silent> <buffer> [[ :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['rubyModule','rubyClass'],'b','v')<CR>\n  xnoremap <silent> <buffer> ]] :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['rubyModule','rubyClass'],'','v')<CR>\n  xnoremap <silent> <buffer> [] :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass'],'b','v')<CR>\n  xnoremap <silent> <buffer> ][ :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass'],'','v')<CR>\n\n  let b:undo_ftplugin = b:undo_ftplugin\n        \\.\"| sil! exe 'unmap <buffer> [[' | sil! exe 'unmap <buffer> ]]' | sil! exe 'unmap <buffer> []' | sil! exe 'unmap <buffer> ]['\"\n        \\.\"| sil! exe 'unmap <buffer> [m' | sil! exe 'unmap <buffer> ]m' | sil! exe 'unmap <buffer> [M' | sil! exe 'unmap <buffer> ]M'\"\n\n  if maparg('im','x') == '' && maparg('im','o') == '' && maparg('am','x') == '' && maparg('am','o') == ''\n    onoremap <silent> <buffer> im :<C-U>call <SID>wrap_i('[m',']M')<CR>\n    onoremap <silent> <buffer> am :<C-U>call <SID>wrap_a('[m',']M')<CR>\n    xnoremap <silent> <buffer> im :<C-U>call <SID>wrap_i('[m',']M')<CR>\n    xnoremap <silent> <buffer> am :<C-U>call <SID>wrap_a('[m',']M')<CR>\n    let b:undo_ftplugin = b:undo_ftplugin\n          \\.\"| sil! exe 'ounmap <buffer> im' | sil! exe 'ounmap <buffer> am'\"\n          \\.\"| sil! exe 'xunmap <buffer> im' | sil! exe 'xunmap <buffer> am'\"\n  endif\n\n  if maparg('iM','x') == '' && maparg('iM','o') == '' && maparg('aM','x') == '' && maparg('aM','o') == ''\n    onoremap <silent> <buffer> iM :<C-U>call <SID>wrap_i('[[','][')<CR>\n    onoremap <silent> <buffer> aM :<C-U>call <SID>wrap_a('[[','][')<CR>\n    xnoremap <silent> <buffer> iM :<C-U>call <SID>wrap_i('[[','][')<CR>\n    xnoremap <silent> <buffer> aM :<C-U>call <SID>wrap_a('[[','][')<CR>\n    let b:undo_ftplugin = b:undo_ftplugin\n          \\.\"| sil! exe 'ounmap <buffer> iM' | sil! exe 'ounmap <buffer> aM'\"\n          \\.\"| sil! exe 'xunmap <buffer> iM' | sil! exe 'xunmap <buffer> aM'\"\n  endif\n\n  call s:map('c', '', '<C-R><C-F> <Plug><cfile>')\n\n  cmap <buffer><script><expr> <SID>tagzv &foldopen =~# 'tag' ? '<Bar>norm! zv' : ''\n  call s:map('n', '<script><silent>', '<C-]>       <SID>:exe  v:count1.\"tag <SID><ctag>\"<SID>tagzv<CR>')\n  call s:map('n', '<script><silent>', 'g<C-]>      <SID>:exe         \"tjump <SID><ctag>\"<SID>tagzv<CR>')\n  call s:map('n', '<script><silent>', 'g]          <SID>:exe       \"tselect <SID><ctag>\"<SID>tagzv<CR>')\n  call s:map('n', '<script><silent>', '<C-W>]      <SID>:exe v:count1.\"stag <SID><ctag>\"<SID>tagzv<CR>')\n  call s:map('n', '<script><silent>', '<C-W><C-]>  <SID>:exe v:count1.\"stag <SID><ctag>\"<SID>tagzv<CR>')\n  call s:map('n', '<script><silent>', '<C-W>g<C-]> <SID>:exe        \"stjump <SID><ctag>\"<SID>tagzv<CR>')\n  call s:map('n', '<script><silent>', '<C-W>g]     <SID>:exe      \"stselect <SID><ctag>\"<SID>tagzv<CR>')\n  call s:map('n', '<script><silent>', '<C-W>}      <SID>:exe v:count1.\"ptag <SID><ctag>\"<CR>')\n  call s:map('n', '<script><silent>', '<C-W>g}     <SID>:exe        \"ptjump <SID><ctag>\"<CR>')\n\n  call s:map('n', '<script><silent>', 'gf           <SID>c:find <SID><cfile><CR>')\n  call s:map('n', '<script><silent>', '<C-W>f      <SID>c:sfind <SID><cfile><CR>')\n  call s:map('n', '<script><silent>', '<C-W><C-F>  <SID>c:sfind <SID><cfile><CR>')\n  call s:map('n', '<script><silent>', '<C-W>gf   <SID>c:tabfind <SID><cfile><CR>')\nendif\n\nlet &cpo = s:cpo_save\nunlet s:cpo_save\n\nif exists(\"g:did_ruby_ftplugin_functions\")\n  finish\nendif\nlet g:did_ruby_ftplugin_functions = 1\n\nfunction! RubyBalloonexpr() abort\n  if !exists('s:ri_found')\n    let s:ri_found = executable('ri')\n  endif\n  if s:ri_found\n    let line = getline(v:beval_lnum)\n    let b = matchstr(strpart(line,0,v:beval_col),'\\%(\\w\\|[:.]\\)*$')\n    let a = substitute(matchstr(strpart(line,v:beval_col),'^\\w*\\%([?!]\\|\\s*=\\)\\?'),'\\s\\+','','g')\n    let str = b.a\n    let before = strpart(line,0,v:beval_col-strlen(b))\n    let after  = strpart(line,v:beval_col+strlen(a))\n    if str =~ '^\\.'\n      let str = substitute(str,'^\\.','#','g')\n      if before =~ '\\]\\s*$'\n        let str = 'Array'.str\n      elseif before =~ '}\\s*$'\n        \" False positives from blocks here\n        let str = 'Hash'.str\n      elseif before =~ \"[\\\"'`]\\\\s*$\" || before =~ '\\$\\d\\+\\s*$'\n        let str = 'String'.str\n      elseif before =~ '\\$\\d\\+\\.\\d\\+\\s*$'\n        let str = 'Float'.str\n      elseif before =~ '\\$\\d\\+\\s*$'\n        let str = 'Integer'.str\n      elseif before =~ '/\\s*$'\n        let str = 'Regexp'.str\n      else\n        let str = substitute(str,'^#','.','')\n      endif\n    endif\n    let str = substitute(str,'.*\\.\\s*to_f\\s*\\.\\s*','Float#','')\n    let str = substitute(str,'.*\\.\\s*to_i\\%(nt\\)\\=\\s*\\.\\s*','Integer#','')\n    let str = substitute(str,'.*\\.\\s*to_s\\%(tr\\)\\=\\s*\\.\\s*','String#','')\n    let str = substitute(str,'.*\\.\\s*to_sym\\s*\\.\\s*','Symbol#','')\n    let str = substitute(str,'.*\\.\\s*to_a\\%(ry\\)\\=\\s*\\.\\s*','Array#','')\n    let str = substitute(str,'.*\\.\\s*to_proc\\s*\\.\\s*','Proc#','')\n    if str !~ '^\\w'\n      return ''\n    endif\n    silent! let res = substitute(system(\"ri -f rdoc -T \\\"\".str.'\"'),'\\n$','','')\n    if res =~ '^Nothing known about' || res =~ '^Bad argument:' || res =~ '^More than one method'\n      return ''\n    endif\n    return res\n  else\n    return \"\"\n  endif\nendfunction\n\nfunction! s:searchsyn(pattern, syn, flags, mode) abort\n  let cnt = v:count1\n  norm! m'\n  if a:mode ==# 'v'\n    norm! gv\n  endif\n  let i = 0\n  call map(a:syn, 'hlID(v:val)')\n  while i < cnt\n    let i = i + 1\n    let line = line('.')\n    let col  = col('.')\n    let pos = search(a:pattern,'W'.a:flags)\n    while pos != 0 && index(a:syn, s:synid()) < 0\n      let pos = search(a:pattern,'W'.a:flags)\n    endwhile\n    if pos == 0\n      call cursor(line,col)\n      return\n    endif\n  endwhile\nendfunction\n\nfunction! s:synid() abort\n  return synID(line('.'),col('.'),0)\nendfunction\n\nfunction! s:wrap_i(back,forward) abort\n  execute 'norm! k'\n  execute 'norm '.a:forward\n  let line = line('.')\n  execute 'norm '.a:back\n  if line('.') == line - 1\n    return s:wrap_a(a:back,a:forward)\n  endif\n  execute 'norm! jV'\n  execute 'norm '.a:forward\n  execute 'norm! k'\nendfunction\n\nfunction! s:wrap_a(back,forward) abort\n  execute 'norm '.a:forward\n  if line('.') < line('$') && getline(line('.')+1) ==# ''\n    let after = 1\n  endif\n  execute 'norm '.a:back\n  while getline(line('.')-1) =~# '^\\s*#' && line('.')\n    -\n  endwhile\n  if exists('after')\n    execute 'norm! V'\n    execute 'norm '.a:forward\n    execute 'norm! j'\n  elseif line('.') > 1 && getline(line('.')-1) =~# '^\\s*$'\n    execute 'norm! kV'\n    execute 'norm '.a:forward\n  else\n    execute 'norm! V'\n    execute 'norm '.a:forward\n  endif\nendfunction\n\nfunction! RubyCursorIdentifier() abort\n  let asciicode    = '\\%(\\w\\|[]})\\\"'.\"'\".']\\)\\@<!\\%(?\\%(\\\\M-\\\\C-\\|\\\\C-\\\\M-\\|\\\\M-\\\\c\\|\\\\c\\\\M-\\|\\\\c\\|\\\\C-\\|\\\\M-\\)\\=\\%(\\\\\\o\\{1,3}\\|\\\\x\\x\\{1,2}\\|\\\\\\=\\S\\)\\)'\n  let number       = '\\%(\\%(\\w\\|[]})\\\"'.\"'\".']\\s*\\)\\@<!-\\)\\=\\%(\\<[[:digit:]_]\\+\\%(\\.[[:digit:]_]\\+\\)\\=\\%([Ee][[:digit:]_]\\+\\)\\=\\>\\|\\<0[xXbBoOdD][[:xdigit:]_]\\+\\>\\)\\|'.asciicode\n  let operator     = '\\%(\\[\\]\\|<<\\|<=>\\|[!<>]=\\=\\|===\\=\\|[!=]\\~\\|>>\\|\\*\\*\\|\\.\\.\\.\\=\\|=>\\|[~^&|*/%+-]\\)'\n  let method       = '\\%(\\.[_a-zA-Z]\\w*\\s*=>\\@!\\|\\<[_a-zA-Z]\\w*\\>[?!]\\=\\)'\n  let global       = '$\\%([!$&\"'.\"'\".'*+,./:;<=>?@\\`~]\\|-\\=\\w\\+\\>\\)'\n  let symbolizable = '\\%(\\%(@@\\=\\)\\w\\+\\>\\|'.global.'\\|'.method.'\\|'.operator.'\\)'\n  let pattern      = '\\C\\s*\\%('.number.'\\|\\%(:\\@<!:\\)\\='.symbolizable.'\\)'\n  let [lnum, col]  = searchpos(pattern,'bcn',line('.'))\n  let raw          = matchstr(getline('.')[col-1 : ],pattern)\n  let stripped     = substitute(substitute(raw,'\\s\\+=$','=',''),'^\\s*[:.]\\=','','')\n  return stripped == '' ? expand(\"<cword>\") : stripped\nendfunction\n\nfunction! RubyCursorTag() abort\n  return substitute(RubyCursorIdentifier(), '^[$@]*', '', '')\nendfunction\n\nfunction! RubyCursorFile() abort\n  let isfname = &isfname\n  try\n    set isfname+=:\n    let cfile = expand('<cfile>')\n  finally\n    let isfname = &isfname\n  endtry\n  let pre = matchstr(strpart(getline('.'), 0, col('.')-1), '.*\\f\\@<!')\n  let post = matchstr(strpart(getline('.'), col('.')), '\\f\\@!.*')\n  if s:synid() ==# hlID('rubyConstant')\n    let cfile = substitute(cfile,'\\.\\w\\+[?!=]\\=$','','')\n    let cfile = substitute(cfile,'^::','','')\n    let cfile = substitute(cfile,'::','/','g')\n    let cfile = substitute(cfile,'\\(\\u\\+\\)\\(\\u\\l\\)','\\1_\\2', 'g')\n    let cfile = substitute(cfile,'\\(\\l\\|\\d\\)\\(\\u\\)','\\1_\\2', 'g')\n    return tolower(cfile) . '.rb'\n  elseif getline('.') =~# '^\\s*require_relative\\s*\\([\"'']\\).*\\1\\s*$'\n    let cfile = expand('%:p:h') . '/' . matchstr(getline('.'),'\\([\"'']\\)\\zs.\\{-\\}\\ze\\1')\n    let cfile .= cfile !~# '\\.rb$' ? '.rb' : ''\n  elseif getline('.') =~# '^\\s*\\%(require[( ]\\|load[( ]\\|autoload[( ]:\\w\\+,\\)\\s*\\%(::\\)\\=File\\.expand_path(\\([\"'']\\)\\.\\./.*\\1,\\s*__FILE__)\\s*$'\n    let target = matchstr(getline('.'),'\\([\"'']\\)\\.\\.\\zs/.\\{-\\}\\ze\\1')\n    let cfile = expand('%:p:h') . target\n    let cfile .= cfile !~# '\\.rb$' ? '.rb' : ''\n  elseif getline('.') =~# '^\\s*\\%(require \\|load \\|autoload :\\w\\+,\\)\\s*\\([\"'']\\).*\\1\\s*$'\n    let cfile = matchstr(getline('.'),'\\([\"'']\\)\\zs.\\{-\\}\\ze\\1')\n    let cfile .= cfile !~# '\\.rb$' ? '.rb' : ''\n  elseif pre.post =~# '\\<File.expand_path[( ].*[''\"]\\{2\\}, *__FILE__\\>' && cfile =~# '^\\.\\.'\n    let cfile = expand('%:p:h') . strpart(cfile, 2)\n  else\n    return substitute(cfile, '\\C\\v^(.*):(\\d+)%(:in)=$', '+\\2 \\1', '')\n  endif\n  let cwdpat = '^\\M' . substitute(getcwd(), '[\\/]', '\\\\[\\\\/]', 'g').'\\ze\\[\\/]'\n  let cfile = substitute(cfile, cwdpat, '.', '')\n  if fnameescape(cfile) !=# cfile\n    return '+ '.fnameescape(cfile)\n  else\n    return cfile\n  endif\nendfunction\n\n\"\n\" Instructions for enabling \"matchit\" support:\n\"\n\" 1. Look for the latest \"matchit\" plugin at\n\"\n\"         http://www.vim.org/scripts/script.php?script_id=39\n\"\n\"    It is also packaged with Vim, in the $VIMRUNTIME/macros directory.\n\"\n\" 2. Copy \"matchit.txt\" into a \"doc\" directory (e.g. $HOME/.vim/doc).\n\"\n\" 3. Copy \"matchit.vim\" into a \"plugin\" directory (e.g. $HOME/.vim/plugin).\n\"\n\" 4. Ensure this file (ftplugin/ruby.vim) is installed.\n\"\n\" 5. Ensure you have this line in your $HOME/.vimrc:\n\"         filetype plugin on\n\"\n\" 6. Restart Vim and create the matchit documentation:\n\"\n\"         :helptags ~/.vim/doc\n\"\n\"    Now you can do \":help matchit\", and you should be able to use \"%\" on Ruby\n\"    keywords.  Try \":echo b:match_words\" to be sure.\n\"\n\" Thanks to Mark J. Reed for the instructions.  See \":help vimrc\" for the\n\" locations of plugin directories, etc., as there are several options, and it\n\" differs on Windows.  Email gsinclair@soyabean.com.au if you need help.\n\"\n\n\" vim: nowrap sw=2 sts=2 ts=8:\n", "\" Vim filetype plugin file\n\" Language: Zig\n\" Upstream: https://github.com/ziglang/zig.vim\n\n\" Only do this when not done yet for this buffer\nif exists(\"b:did_ftplugin\")\n  finish\nendif\n\nlet b:did_ftplugin = 1\n\nlet s:cpo_orig = &cpo\nset cpo&vim\n\ncompiler zig_build\n\n\" Match Zig builtin fns\nsetlocal iskeyword+=@-@\n\n\" Recommended code style, no tabs and 4-space indentation\nsetlocal expandtab\nsetlocal tabstop=8\nsetlocal softtabstop=4\nsetlocal shiftwidth=4\n\nsetlocal formatoptions-=t formatoptions+=croql\n\nsetlocal suffixesadd=.zig,.zir\n\nif has('comments')\n    setlocal comments=:///,://!,://,:\\\\\\\\\n    setlocal commentstring=//\\ %s\nendif\n\nif has('find_in_path')\n    let &l:includeexpr='substitute(v:fname, \"^([^.])$\", \"\\1.zig\", \"\")'\n    let &l:include='\\v(\\@import>|\\@cInclude>|^\\s*\\#\\s*include)'\nendif\n\nlet &l:define='\\v(<fn>|<const>|<var>|^\\s*\\#\\s*define)'\n\n\" Safety check: don't execute zip from current directory\nif !exists('g:zig_std_dir') && exists('*json_decode') &&\n    \\  executable('zig') && fnamemodify(exepath(\"zig\"), \":p:h\") != getcwd()\n    silent let s:env = system('zig env')\n    if v:shell_error == 0\n        let g:zig_std_dir = json_decode(s:env)['std_dir']\n    endif\n    unlet! s:env\nendif\n\nif exists('g:zig_std_dir')\n    let &l:path = &l:path . ',' . g:zig_std_dir\nendif\n\nlet b:undo_ftplugin =\n    \\ 'setl isk< et< ts< sts< sw< fo< sua< mp< com< cms< inex< inc< pa<'\n\naugroup vim-zig\n    autocmd! * <buffer>\n    autocmd BufWritePre <buffer> if get(g:, 'zig_fmt_autosave', 1) | call zig#fmt#Format() | endif\naugroup END\n\nlet b:undo_ftplugin .= '|au! vim-zig * <buffer>'\n\nlet &cpo = s:cpo_orig\nunlet s:cpo_orig\n\" vim: tabstop=8 shiftwidth=4 softtabstop=4 expandtab\n", "/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\t\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n#include \"vim.h\"\n\n/*\n * Vim originated from Stevie version 3.6 (Fish disk 217) by GRWalter (Fred)\n * It has been changed beyond recognition since then.\n *\n * Differences between version 8.2 and 9.0 can be found with \":help version9\".\n * Differences between version 7.4 and 8.x can be found with \":help version8\".\n * Differences between version 6.4 and 7.x can be found with \":help version7\".\n * Differences between version 5.8 and 6.x can be found with \":help version6\".\n * Differences between version 4.x and 5.x can be found with \":help version5\".\n * Differences between version 3.0 and 4.x can be found with \":help version4\".\n * All the remarks about older versions have been removed, they are not very\n * interesting.\n */\n\n#include \"version.h\"\n\nchar\t\t*Version = VIM_VERSION_SHORT;\nstatic char\t*mediumVersion = VIM_VERSION_MEDIUM;\n\n#if defined(HAVE_DATE_TIME) || defined(PROTO)\n# if (defined(VMS) && defined(VAXC)) || defined(PROTO)\nchar\tlongVersion[sizeof(VIM_VERSION_LONG_DATE) + sizeof(__DATE__)\n\t\t\t\t\t\t      + sizeof(__TIME__) + 3];\n\n    void\ninit_longVersion(void)\n{\n    /*\n     * Construct the long version string.  Necessary because\n     * VAX C can't concatenate strings in the preprocessor.\n     */\n    strcpy(longVersion, VIM_VERSION_LONG_DATE);\n#ifdef BUILD_DATE\n    strcat(longVersion, BUILD_DATE);\n#else\n    strcat(longVersion, __DATE__);\n    strcat(longVersion, \" \");\n    strcat(longVersion, __TIME__);\n#endif\n    strcat(longVersion, \")\");\n}\n\n# else\nchar\t*longVersion = NULL;\n\n    void\ninit_longVersion(void)\n{\n    if (longVersion != NULL)\n\treturn;\n\n#ifdef BUILD_DATE\n    char *date_time = BUILD_DATE;\n#else\n    char *date_time = __DATE__ \" \" __TIME__;\n#endif\n    char *msg = _(\"%s (%s, compiled %s)\");\n    size_t len = strlen(msg)\n\t+ strlen(VIM_VERSION_LONG_ONLY)\n\t+ strlen(VIM_VERSION_DATE_ONLY)\n\t+ strlen(date_time);\n\n    longVersion = alloc(len);\n    if (longVersion == NULL)\n\tlongVersion = VIM_VERSION_LONG;\n    else\n\tvim_snprintf(longVersion, len, msg,\n\t\tVIM_VERSION_LONG_ONLY, VIM_VERSION_DATE_ONLY, date_time);\n}\n# endif\n#else\nchar\t*longVersion = VIM_VERSION_LONG;\n\n    void\ninit_longVersion(void)\n{\n    // nothing to do\n}\n#endif\n\nstatic char *(features[]) =\n{\n#ifdef HAVE_ACL\n\t\"+acl\",\n#else\n\t\"-acl\",\n#endif\n#ifdef AMIGA\t\t// only for Amiga systems\n# ifdef FEAT_ARP\n\t\"+ARP\",\n# else\n\t\"-ARP\",\n# endif\n#endif\n#ifdef FEAT_ARABIC\n\t\"+arabic\",\n#else\n\t\"-arabic\",\n#endif\n\t\"+autocmd\",\n#ifdef FEAT_AUTOCHDIR\n       \"+autochdir\",\n#else\n       \"-autochdir\",\n#endif\n#ifdef FEAT_AUTOSERVERNAME\n\t\"+autoservername\",\n#else\n\t\"-autoservername\",\n#endif\n#ifdef FEAT_BEVAL_GUI\n\t\"+balloon_eval\",\n#else\n\t\"-balloon_eval\",\n#endif\n#ifdef FEAT_BEVAL_TERM\n\t\"+balloon_eval_term\",\n#else\n\t\"-balloon_eval_term\",\n#endif\n#ifdef FEAT_BROWSE\n\t\"+browse\",\n#else\n\t\"-browse\",\n#endif\n\t\"++builtin_terms\",\n#ifdef FEAT_BYTEOFF\n\t\"+byte_offset\",\n#else\n\t\"-byte_offset\",\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t\"+channel\",\n#else\n\t\"-channel\",\n#endif\n\t\"+cindent\",\n#ifdef FEAT_CLIENTSERVER\n\t\"+clientserver\",\n#else\n\t\"-clientserver\",\n#endif\n#ifdef FEAT_CLIPBOARD\n\t\"+clipboard\",\n#else\n\t\"-clipboard\",\n#endif\n\t\"+cmdline_compl\",\n\t\"+cmdline_hist\",\n\t\"+cmdline_info\",\n\t\"+comments\",\n#ifdef FEAT_CONCEAL\n\t\"+conceal\",\n#else\n\t\"-conceal\",\n#endif\n#ifdef FEAT_CRYPT\n\t\"+cryptv\",\n#else\n\t\"-cryptv\",\n#endif\n#ifdef FEAT_CSCOPE\n\t\"+cscope\",\n#else\n\t\"-cscope\",\n#endif\n\t\"+cursorbind\",\n#ifdef CURSOR_SHAPE\n\t\"+cursorshape\",\n#else\n\t\"-cursorshape\",\n#endif\n#if defined(FEAT_CON_DIALOG) && defined(FEAT_GUI_DIALOG)\n\t\"+dialog_con_gui\",\n#else\n# if defined(FEAT_CON_DIALOG)\n\t\"+dialog_con\",\n# else\n#  if defined(FEAT_GUI_DIALOG)\n\t\"+dialog_gui\",\n#  else\n\t\"-dialog\",\n#  endif\n# endif\n#endif\n#ifdef FEAT_DIFF\n\t\"+diff\",\n#else\n\t\"-diff\",\n#endif\n#ifdef FEAT_DIGRAPHS\n\t\"+digraphs\",\n#else\n\t\"-digraphs\",\n#endif\n#ifdef FEAT_GUI_MSWIN\n# ifdef FEAT_DIRECTX\n\t\"+directx\",\n# else\n\t\"-directx\",\n# endif\n#endif\n#ifdef FEAT_DND\n\t\"+dnd\",\n#else\n\t\"-dnd\",\n#endif\n\t\"-ebcdic\",\n#ifdef FEAT_EMACS_TAGS\n\t\"+emacs_tags\",\n#else\n\t\"-emacs_tags\",\n#endif\n#ifdef FEAT_EVAL\n\t\"+eval\",\n#else\n\t\"-eval\",\n#endif\n\t\"+ex_extra\",\n#ifdef FEAT_SEARCH_EXTRA\n\t\"+extra_search\",\n#else\n\t\"-extra_search\",\n#endif\n\t\"-farsi\",\n\t\"+file_in_path\",\n#ifdef FEAT_FIND_ID\n\t\"+find_in_path\",\n#else\n\t\"-find_in_path\",\n#endif\n\t\"+float\",\n#ifdef FEAT_FOLDING\n\t\"+folding\",\n#else\n\t\"-folding\",\n#endif\n\t\"-footer\",\n\t// only interesting on Unix systems\n#if !defined(USE_SYSTEM) && defined(UNIX)\n\t\"+fork()\",\n#endif\n#ifdef FEAT_GETTEXT\n# ifdef DYNAMIC_GETTEXT\n\t\"+gettext/dyn\",\n# else\n\t\"+gettext\",\n# endif\n#else\n\t\"-gettext\",\n#endif\n\t\"-hangul_input\",\n#if (defined(HAVE_ICONV_H) && defined(USE_ICONV)) || defined(DYNAMIC_ICONV)\n# ifdef DYNAMIC_ICONV\n\t\"+iconv/dyn\",\n# else\n\t\"+iconv\",\n# endif\n#else\n\t\"-iconv\",\n#endif\n\t\"+insert_expand\",\n#ifdef FEAT_IPV6\n\t\"+ipv6\",\n#else\n\t\"-ipv6\",\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t\"+job\",\n#else\n\t\"-job\",\n#endif\n\t\"+jumplist\",\n#ifdef FEAT_KEYMAP\n\t\"+keymap\",\n#else\n\t\"-keymap\",\n#endif\n#ifdef FEAT_EVAL\n\t\"+lambda\",\n#else\n\t\"-lambda\",\n#endif\n#ifdef FEAT_LANGMAP\n\t\"+langmap\",\n#else\n\t\"-langmap\",\n#endif\n#ifdef FEAT_LIBCALL\n\t\"+libcall\",\n#else\n\t\"-libcall\",\n#endif\n#ifdef FEAT_LINEBREAK\n\t\"+linebreak\",\n#else\n\t\"-linebreak\",\n#endif\n\t\"+lispindent\",\n\t\"+listcmds\",\n\t\"+localmap\",\n#ifdef FEAT_LUA\n# ifdef DYNAMIC_LUA\n\t\"+lua/dyn\",\n# else\n\t\"+lua\",\n# endif\n#else\n\t\"-lua\",\n#endif\n#ifdef FEAT_MENU\n\t\"+menu\",\n#else\n\t\"-menu\",\n#endif\n#ifdef FEAT_SESSION\n\t\"+mksession\",\n#else\n\t\"-mksession\",\n#endif\n\t\"+modify_fname\",\n\t\"+mouse\",\n#ifdef FEAT_MOUSESHAPE\n\t\"+mouseshape\",\n#else\n\t\"-mouseshape\",\n#endif\n\n#if defined(UNIX) || defined(VMS)\n# ifdef FEAT_MOUSE_DEC\n\t\"+mouse_dec\",\n# else\n\t\"-mouse_dec\",\n# endif\n# ifdef FEAT_MOUSE_GPM\n#  ifdef DYNAMIC_GPM\n\t\"+mouse_gpm/dyn\",\n#  else\n\t\"+mouse_gpm\",\n#  endif\n# else\n\t\"-mouse_gpm\",\n# endif\n# ifdef FEAT_MOUSE_JSB\n\t\"+mouse_jsbterm\",\n# else\n\t\"-mouse_jsbterm\",\n# endif\n# ifdef FEAT_MOUSE_NET\n\t\"+mouse_netterm\",\n# else\n\t\"-mouse_netterm\",\n# endif\n#endif\n\n#ifdef __QNX__\n# ifdef FEAT_MOUSE_PTERM\n\t\"+mouse_pterm\",\n# else\n\t\"-mouse_pterm\",\n# endif\n#endif\n\n#if defined(UNIX) || defined(VMS)\n\t\"+mouse_sgr\",\n# ifdef FEAT_SYSMOUSE\n\t\"+mouse_sysmouse\",\n# else\n\t\"-mouse_sysmouse\",\n# endif\n# ifdef FEAT_MOUSE_URXVT\n\t\"+mouse_urxvt\",\n# else\n\t\"-mouse_urxvt\",\n# endif\n\t\"+mouse_xterm\",\n#endif\n\n#ifdef FEAT_MBYTE_IME\n# ifdef DYNAMIC_IME\n\t\"+multi_byte_ime/dyn\",\n# else\n\t\"+multi_byte_ime\",\n# endif\n#else\n\t\"+multi_byte\",\n#endif\n#ifdef FEAT_MULTI_LANG\n\t\"+multi_lang\",\n#else\n\t\"-multi_lang\",\n#endif\n#ifdef FEAT_MZSCHEME\n# ifdef DYNAMIC_MZSCHEME\n\t\"+mzscheme/dyn\",\n# else\n\t\"+mzscheme\",\n# endif\n#else\n\t\"-mzscheme\",\n#endif\n#ifdef FEAT_NETBEANS_INTG\n\t\"+netbeans_intg\",\n#else\n\t\"-netbeans_intg\",\n#endif\n\t\"+num64\",\n#ifdef FEAT_GUI_MSWIN\n# ifdef FEAT_OLE\n\t\"+ole\",\n# else\n\t\"-ole\",\n# endif\n#endif\n#ifdef FEAT_EVAL\n\t\"+packages\",\n#else\n\t\"-packages\",\n#endif\n\t\"+path_extra\",\n#ifdef FEAT_PERL\n# ifdef DYNAMIC_PERL\n\t\"+perl/dyn\",\n# else\n\t\"+perl\",\n# endif\n#else\n\t\"-perl\",\n#endif\n#ifdef FEAT_PERSISTENT_UNDO\n\t\"+persistent_undo\",\n#else\n\t\"-persistent_undo\",\n#endif\n#ifdef FEAT_PROP_POPUP\n\t\"+popupwin\",\n#else\n\t\"-popupwin\",\n#endif\n#ifdef FEAT_PRINTER\n# ifdef FEAT_POSTSCRIPT\n\t\"+postscript\",\n# else\n\t\"-postscript\",\n# endif\n\t\"+printer\",\n#else\n\t\"-printer\",\n#endif\n#ifdef FEAT_PROFILE\n\t\"+profile\",\n#else\n\t\"-profile\",\n#endif\n#ifdef FEAT_PYTHON\n# ifdef DYNAMIC_PYTHON\n\t\"+python/dyn\",\n# else\n\t\"+python\",\n# endif\n#else\n\t\"-python\",\n#endif\n#ifdef FEAT_PYTHON3\n# ifdef DYNAMIC_PYTHON3\n#  ifdef DYNAMIC_PYTHON3_STABLE_ABI\n\t\"+python3/dyn-stable\",\n#  else\n\t\"+python3/dyn\",\n#  endif\n# else\n\t\"+python3\",\n# endif\n#else\n\t\"-python3\",\n#endif\n#ifdef FEAT_QUICKFIX\n\t\"+quickfix\",\n#else\n\t\"-quickfix\",\n#endif\n#ifdef FEAT_RELTIME\n\t\"+reltime\",\n#else\n\t\"-reltime\",\n#endif\n#ifdef FEAT_RIGHTLEFT\n\t\"+rightleft\",\n#else\n\t\"-rightleft\",\n#endif\n#ifdef FEAT_RUBY\n# ifdef DYNAMIC_RUBY\n\t\"+ruby/dyn\",\n# else\n\t\"+ruby\",\n# endif\n#else\n\t\"-ruby\",\n#endif\n\t\"+scrollbind\",\n#ifdef FEAT_SIGNS\n\t\"+signs\",\n#else\n\t\"-signs\",\n#endif\n\t\"+smartindent\",\n#ifdef FEAT_SODIUM\n# ifdef DYNAMIC_SODIUM\n\t\"+sodium/dyn\",\n# else\n\t\"+sodium\",\n# endif\n#else\n\t\"-sodium\",\n#endif\n#ifdef FEAT_SOUND\n\t\"+sound\",\n#else\n\t\"-sound\",\n#endif\n#ifdef FEAT_SPELL\n\t\"+spell\",\n#else\n\t\"-spell\",\n#endif\n#ifdef STARTUPTIME\n\t\"+startuptime\",\n#else\n\t\"-startuptime\",\n#endif\n#ifdef FEAT_STL_OPT\n\t\"+statusline\",\n#else\n\t\"-statusline\",\n#endif\n\t\"-sun_workshop\",\n#ifdef FEAT_SYN_HL\n\t\"+syntax\",\n#else\n\t\"-syntax\",\n#endif\n\t    // only interesting on Unix systems\n#if defined(USE_SYSTEM) && defined(UNIX)\n\t\"+system()\",\n#endif\n\t\"+tag_binary\",\n\t\"-tag_old_static\",\n\t\"-tag_any_white\",\n#ifdef FEAT_TCL\n# ifdef DYNAMIC_TCL\n\t\"+tcl/dyn\",\n# else\n\t\"+tcl\",\n# endif\n#else\n\t\"-tcl\",\n#endif\n#ifdef FEAT_TERMGUICOLORS\n\t\"+termguicolors\",\n#else\n\t\"-termguicolors\",\n#endif\n#ifdef FEAT_TERMINAL\n\t\"+terminal\",\n#else\n\t\"-terminal\",\n#endif\n#if defined(UNIX)\n// only Unix can have terminfo instead of termcap\n# ifdef TERMINFO\n\t\"+terminfo\",\n# else\n\t\"-terminfo\",\n# endif\n#endif\n#ifdef FEAT_TERMRESPONSE\n\t\"+termresponse\",\n#else\n\t\"-termresponse\",\n#endif\n\t\"+textobjects\",\n#ifdef FEAT_PROP_POPUP\n\t\"+textprop\",\n#else\n\t\"-textprop\",\n#endif\n#if !defined(UNIX)\n// unix always includes termcap support\n# ifdef HAVE_TGETENT\n\t\"+tgetent\",\n# else\n\t\"-tgetent\",\n# endif\n#endif\n#ifdef FEAT_TIMERS\n\t\"+timers\",\n#else\n\t\"-timers\",\n#endif\n\t\"+title\",\n#ifdef FEAT_TOOLBAR\n\t\"+toolbar\",\n#else\n\t\"-toolbar\",\n#endif\n\t\"+user_commands\",\n#ifdef FEAT_VARTABS\n\t\"+vartabs\",\n#else\n\t\"-vartabs\",\n#endif\n\t\"+vertsplit\",\n\t\"+vim9script\",\n#ifdef FEAT_VIMINFO\n\t\"+viminfo\",\n#else\n\t\"-viminfo\",\n#endif\n\t\"+virtualedit\",\n\t\"+visual\",\n\t\"+visualextra\",\n\t\"+vreplace\",\n#ifdef MSWIN\n# ifdef FEAT_VTP\n\t\"+vtp\",\n# else\n\t\"-vtp\",\n# endif\n#endif\n\t\"+wildignore\",\n\t\"+wildmenu\",\n\t\"+windows\",\n#ifdef FEAT_WRITEBACKUP\n\t\"+writebackup\",\n#else\n\t\"-writebackup\",\n#endif\n#if defined(UNIX) || defined(VMS)\n# ifdef FEAT_X11\n\t\"+X11\",\n# else\n\t\"-X11\",\n# endif\n#endif\n#ifdef FEAT_XFONTSET\n\t\"+xfontset\",\n#else\n\t\"-xfontset\",\n#endif\n#ifdef FEAT_XIM\n\t\"+xim\",\n#else\n\t\"-xim\",\n#endif\n#if defined(MSWIN)\n# ifdef FEAT_XPM_W32\n\t\"+xpm_w32\",\n# else\n\t\"-xpm_w32\",\n# endif\n#elif defined(HAVE_XPM)\n\t\"+xpm\",\n#else\n\t\"-xpm\",\n#endif\n#if defined(UNIX) || defined(VMS)\n# if defined(USE_XSMP_INTERACT)\n\t\"+xsmp_interact\",\n# elif defined(USE_XSMP)\n\t\"+xsmp\",\n# else\n\t\"-xsmp\",\n# endif\n# ifdef FEAT_XCLIPBOARD\n\t\"+xterm_clipboard\",\n# else\n\t\"-xterm_clipboard\",\n# endif\n#endif\n#ifdef FEAT_XTERM_SAVE\n\t\"+xterm_save\",\n#else\n\t\"-xterm_save\",\n#endif\n\tNULL\n};\n\nstatic int included_patches[] =\n{   /* Add new patch number below this line */\n/**/\n    1833,\n/**/\n    1832,\n/**/\n    1831,\n/**/\n    1830,\n/**/\n    1829,\n/**/\n    1828,\n/**/\n    1827,\n/**/\n    1826,\n/**/\n    1825,\n/**/\n    1824,\n/**/\n    1823,\n/**/\n    1822,\n/**/\n    1821,\n/**/\n    1820,\n/**/\n    1819,\n/**/\n    1818,\n/**/\n    1817,\n/**/\n    1816,\n/**/\n    1815,\n/**/\n    1814,\n/**/\n    1813,\n/**/\n    1812,\n/**/\n    1811,\n/**/\n    1810,\n/**/\n    1809,\n/**/\n    1808,\n/**/\n    1807,\n/**/\n    1806,\n/**/\n    1805,\n/**/\n    1804,\n/**/\n    1803,\n/**/\n    1802,\n/**/\n    1801,\n/**/\n    1800,\n/**/\n    1799,\n/**/\n    1798,\n/**/\n    1797,\n/**/\n    1796,\n/**/\n    1795,\n/**/\n    1794,\n/**/\n    1793,\n/**/\n    1792,\n/**/\n    1791,\n/**/\n    1790,\n/**/\n    1789,\n/**/\n    1788,\n/**/\n    1787,\n/**/\n    1786,\n/**/\n    1785,\n/**/\n    1784,\n/**/\n    1783,\n/**/\n    1782,\n/**/\n    1781,\n/**/\n    1780,\n/**/\n    1779,\n/**/\n    1778,\n/**/\n    1777,\n/**/\n    1776,\n/**/\n    1775,\n/**/\n    1774,\n/**/\n    1773,\n/**/\n    1772,\n/**/\n    1771,\n/**/\n    1770,\n/**/\n    1769,\n/**/\n    1768,\n/**/\n    1767,\n/**/\n    1766,\n/**/\n    1765,\n/**/\n    1764,\n/**/\n    1763,\n/**/\n    1762,\n/**/\n    1761,\n/**/\n    1760,\n/**/\n    1759,\n/**/\n    1758,\n/**/\n    1757,\n/**/\n    1756,\n/**/\n    1755,\n/**/\n    1754,\n/**/\n    1753,\n/**/\n    1752,\n/**/\n    1751,\n/**/\n    1750,\n/**/\n    1749,\n/**/\n    1748,\n/**/\n    1747,\n/**/\n    1746,\n/**/\n    1745,\n/**/\n    1744,\n/**/\n    1743,\n/**/\n    1742,\n/**/\n    1741,\n/**/\n    1740,\n/**/\n    1739,\n/**/\n    1738,\n/**/\n    1737,\n/**/\n    1736,\n/**/\n    1735,\n/**/\n    1734,\n/**/\n    1733,\n/**/\n    1732,\n/**/\n    1731,\n/**/\n    1730,\n/**/\n    1729,\n/**/\n    1728,\n/**/\n    1727,\n/**/\n    1726,\n/**/\n    1725,\n/**/\n    1724,\n/**/\n    1723,\n/**/\n    1722,\n/**/\n    1721,\n/**/\n    1720,\n/**/\n    1719,\n/**/\n    1718,\n/**/\n    1717,\n/**/\n    1716,\n/**/\n    1715,\n/**/\n    1714,\n/**/\n    1713,\n/**/\n    1712,\n/**/\n    1711,\n/**/\n    1710,\n/**/\n    1709,\n/**/\n    1708,\n/**/\n    1707,\n/**/\n    1706,\n/**/\n    1705,\n/**/\n    1704,\n/**/\n    1703,\n/**/\n    1702,\n/**/\n    1701,\n/**/\n    1700,\n/**/\n    1699,\n/**/\n    1698,\n/**/\n    1697,\n/**/\n    1696,\n/**/\n    1695,\n/**/\n    1694,\n/**/\n    1693,\n/**/\n    1692,\n/**/\n    1691,\n/**/\n    1690,\n/**/\n    1689,\n/**/\n    1688,\n/**/\n    1687,\n/**/\n    1686,\n/**/\n    1685,\n/**/\n    1684,\n/**/\n    1683,\n/**/\n    1682,\n/**/\n    1681,\n/**/\n    1680,\n/**/\n    1679,\n/**/\n    1678,\n/**/\n    1677,\n/**/\n    1676,\n/**/\n    1675,\n/**/\n    1674,\n/**/\n    1673,\n/**/\n    1672,\n/**/\n    1671,\n/**/\n    1670,\n/**/\n    1669,\n/**/\n    1668,\n/**/\n    1667,\n/**/\n    1666,\n/**/\n    1665,\n/**/\n    1664,\n/**/\n    1663,\n/**/\n    1662,\n/**/\n    1661,\n/**/\n    1660,\n/**/\n    1659,\n/**/\n    1658,\n/**/\n    1657,\n/**/\n    1656,\n/**/\n    1655,\n/**/\n    1654,\n/**/\n    1653,\n/**/\n    1652,\n/**/\n    1651,\n/**/\n    1650,\n/**/\n    1649,\n/**/\n    1648,\n/**/\n    1647,\n/**/\n    1646,\n/**/\n    1645,\n/**/\n    1644,\n/**/\n    1643,\n/**/\n    1642,\n/**/\n    1641,\n/**/\n    1640,\n/**/\n    1639,\n/**/\n    1638,\n/**/\n    1637,\n/**/\n    1636,\n/**/\n    1635,\n/**/\n    1634,\n/**/\n    1633,\n/**/\n    1632,\n/**/\n    1631,\n/**/\n    1630,\n/**/\n    1629,\n/**/\n    1628,\n/**/\n    1627,\n/**/\n    1626,\n/**/\n    1625,\n/**/\n    1624,\n/**/\n    1623,\n/**/\n    1622,\n/**/\n    1621,\n/**/\n    1620,\n/**/\n    1619,\n/**/\n    1618,\n/**/\n    1617,\n/**/\n    1616,\n/**/\n    1615,\n/**/\n    1614,\n/**/\n    1613,\n/**/\n    1612,\n/**/\n    1611,\n/**/\n    1610,\n/**/\n    1609,\n/**/\n    1608,\n/**/\n    1607,\n/**/\n    1606,\n/**/\n    1605,\n/**/\n    1604,\n/**/\n    1603,\n/**/\n    1602,\n/**/\n    1601,\n/**/\n    1600,\n/**/\n    1599,\n/**/\n    1598,\n/**/\n    1597,\n/**/\n    1596,\n/**/\n    1595,\n/**/\n    1594,\n/**/\n    1593,\n/**/\n    1592,\n/**/\n    1591,\n/**/\n    1590,\n/**/\n    1589,\n/**/\n    1588,\n/**/\n    1587,\n/**/\n    1586,\n/**/\n    1585,\n/**/\n    1584,\n/**/\n    1583,\n/**/\n    1582,\n/**/\n    1581,\n/**/\n    1580,\n/**/\n    1579,\n/**/\n    1578,\n/**/\n    1577,\n/**/\n    1576,\n/**/\n    1575,\n/**/\n    1574,\n/**/\n    1573,\n/**/\n    1572,\n/**/\n    1571,\n/**/\n    1570,\n/**/\n    1569,\n/**/\n    1568,\n/**/\n    1567,\n/**/\n    1566,\n/**/\n    1565,\n/**/\n    1564,\n/**/\n    1563,\n/**/\n    1562,\n/**/\n    1561,\n/**/\n    1560,\n/**/\n    1559,\n/**/\n    1558,\n/**/\n    1557,\n/**/\n    1556,\n/**/\n    1555,\n/**/\n    1554,\n/**/\n    1553,\n/**/\n    1552,\n/**/\n    1551,\n/**/\n    1550,\n/**/\n    1549,\n/**/\n    1548,\n/**/\n    1547,\n/**/\n    1546,\n/**/\n    1545,\n/**/\n    1544,\n/**/\n    1543,\n/**/\n    1542,\n/**/\n    1541,\n/**/\n    1540,\n/**/\n    1539,\n/**/\n    1538,\n/**/\n    1537,\n/**/\n    1536,\n/**/\n    1535,\n/**/\n    1534,\n/**/\n    1533,\n/**/\n    1532,\n/**/\n    1531,\n/**/\n    1530,\n/**/\n    1529,\n/**/\n    1528,\n/**/\n    1527,\n/**/\n    1526,\n/**/\n    1525,\n/**/\n    1524,\n/**/\n    1523,\n/**/\n    1522,\n/**/\n    1521,\n/**/\n    1520,\n/**/\n    1519,\n/**/\n    1518,\n/**/\n    1517,\n/**/\n    1516,\n/**/\n    1515,\n/**/\n    1514,\n/**/\n    1513,\n/**/\n    1512,\n/**/\n    1511,\n/**/\n    1510,\n/**/\n    1509,\n/**/\n    1508,\n/**/\n    1507,\n/**/\n    1506,\n/**/\n    1505,\n/**/\n    1504,\n/**/\n    1503,\n/**/\n    1502,\n/**/\n    1501,\n/**/\n    1500,\n/**/\n    1499,\n/**/\n    1498,\n/**/\n    1497,\n/**/\n    1496,\n/**/\n    1495,\n/**/\n    1494,\n/**/\n    1493,\n/**/\n    1492,\n/**/\n    1491,\n/**/\n    1490,\n/**/\n    1489,\n/**/\n    1488,\n/**/\n    1487,\n/**/\n    1486,\n/**/\n    1485,\n/**/\n    1484,\n/**/\n    1483,\n/**/\n    1482,\n/**/\n    1481,\n/**/\n    1480,\n/**/\n    1479,\n/**/\n    1478,\n/**/\n    1477,\n/**/\n    1476,\n/**/\n    1475,\n/**/\n    1474,\n/**/\n    1473,\n/**/\n    1472,\n/**/\n    1471,\n/**/\n    1470,\n/**/\n    1469,\n/**/\n    1468,\n/**/\n    1467,\n/**/\n    1466,\n/**/\n    1465,\n/**/\n    1464,\n/**/\n    1463,\n/**/\n    1462,\n/**/\n    1461,\n/**/\n    1460,\n/**/\n    1459,\n/**/\n    1458,\n/**/\n    1457,\n/**/\n    1456,\n/**/\n    1455,\n/**/\n    1454,\n/**/\n    1453,\n/**/\n    1452,\n/**/\n    1451,\n/**/\n    1450,\n/**/\n    1449,\n/**/\n    1448,\n/**/\n    1447,\n/**/\n    1446,\n/**/\n    1445,\n/**/\n    1444,\n/**/\n    1443,\n/**/\n    1442,\n/**/\n    1441,\n/**/\n    1440,\n/**/\n    1439,\n/**/\n    1438,\n/**/\n    1437,\n/**/\n    1436,\n/**/\n    1435,\n/**/\n    1434,\n/**/\n    1433,\n/**/\n    1432,\n/**/\n    1431,\n/**/\n    1430,\n/**/\n    1429,\n/**/\n    1428,\n/**/\n    1427,\n/**/\n    1426,\n/**/\n    1425,\n/**/\n    1424,\n/**/\n    1423,\n/**/\n    1422,\n/**/\n    1421,\n/**/\n    1420,\n/**/\n    1419,\n/**/\n    1418,\n/**/\n    1417,\n/**/\n    1416,\n/**/\n    1415,\n/**/\n    1414,\n/**/\n    1413,\n/**/\n    1412,\n/**/\n    1411,\n/**/\n    1410,\n/**/\n    1409,\n/**/\n    1408,\n/**/\n    1407,\n/**/\n    1406,\n/**/\n    1405,\n/**/\n    1404,\n/**/\n    1403,\n/**/\n    1402,\n/**/\n    1401,\n/**/\n    1400,\n/**/\n    1399,\n/**/\n    1398,\n/**/\n    1397,\n/**/\n    1396,\n/**/\n    1395,\n/**/\n    1394,\n/**/\n    1393,\n/**/\n    1392,\n/**/\n    1391,\n/**/\n    1390,\n/**/\n    1389,\n/**/\n    1388,\n/**/\n    1387,\n/**/\n    1386,\n/**/\n    1385,\n/**/\n    1384,\n/**/\n    1383,\n/**/\n    1382,\n/**/\n    1381,\n/**/\n    1380,\n/**/\n    1379,\n/**/\n    1378,\n/**/\n    1377,\n/**/\n    1376,\n/**/\n    1375,\n/**/\n    1374,\n/**/\n    1373,\n/**/\n    1372,\n/**/\n    1371,\n/**/\n    1370,\n/**/\n    1369,\n/**/\n    1368,\n/**/\n    1367,\n/**/\n    1366,\n/**/\n    1365,\n/**/\n    1364,\n/**/\n    1363,\n/**/\n    1362,\n/**/\n    1361,\n/**/\n    1360,\n/**/\n    1359,\n/**/\n    1358,\n/**/\n    1357,\n/**/\n    1356,\n/**/\n    1355,\n/**/\n    1354,\n/**/\n    1353,\n/**/\n    1352,\n/**/\n    1351,\n/**/\n    1350,\n/**/\n    1349,\n/**/\n    1348,\n/**/\n    1347,\n/**/\n    1346,\n/**/\n    1345,\n/**/\n    1344,\n/**/\n    1343,\n/**/\n    1342,\n/**/\n    1341,\n/**/\n    1340,\n/**/\n    1339,\n/**/\n    1338,\n/**/\n    1337,\n/**/\n    1336,\n/**/\n    1335,\n/**/\n    1334,\n/**/\n    1333,\n/**/\n    1332,\n/**/\n    1331,\n/**/\n    1330,\n/**/\n    1329,\n/**/\n    1328,\n/**/\n    1327,\n/**/\n    1326,\n/**/\n    1325,\n/**/\n    1324,\n/**/\n    1323,\n/**/\n    1322,\n/**/\n    1321,\n/**/\n    1320,\n/**/\n    1319,\n/**/\n    1318,\n/**/\n    1317,\n/**/\n    1316,\n/**/\n    1315,\n/**/\n    1314,\n/**/\n    1313,\n/**/\n    1312,\n/**/\n    1311,\n/**/\n    1310,\n/**/\n    1309,\n/**/\n    1308,\n/**/\n    1307,\n/**/\n    1306,\n/**/\n    1305,\n/**/\n    1304,\n/**/\n    1303,\n/**/\n    1302,\n/**/\n    1301,\n/**/\n    1300,\n/**/\n    1299,\n/**/\n    1298,\n/**/\n    1297,\n/**/\n    1296,\n/**/\n    1295,\n/**/\n    1294,\n/**/\n    1293,\n/**/\n    1292,\n/**/\n    1291,\n/**/\n    1290,\n/**/\n    1289,\n/**/\n    1288,\n/**/\n    1287,\n/**/\n    1286,\n/**/\n    1285,\n/**/\n    1284,\n/**/\n    1283,\n/**/\n    1282,\n/**/\n    1281,\n/**/\n    1280,\n/**/\n    1279,\n/**/\n    1278,\n/**/\n    1277,\n/**/\n    1276,\n/**/\n    1275,\n/**/\n    1274,\n/**/\n    1273,\n/**/\n    1272,\n/**/\n    1271,\n/**/\n    1270,\n/**/\n    1269,\n/**/\n    1268,\n/**/\n    1267,\n/**/\n    1266,\n/**/\n    1265,\n/**/\n    1264,\n/**/\n    1263,\n/**/\n    1262,\n/**/\n    1261,\n/**/\n    1260,\n/**/\n    1259,\n/**/\n    1258,\n/**/\n    1257,\n/**/\n    1256,\n/**/\n    1255,\n/**/\n    1254,\n/**/\n    1253,\n/**/\n    1252,\n/**/\n    1251,\n/**/\n    1250,\n/**/\n    1249,\n/**/\n    1248,\n/**/\n    1247,\n/**/\n    1246,\n/**/\n    1245,\n/**/\n    1244,\n/**/\n    1243,\n/**/\n    1242,\n/**/\n    1241,\n/**/\n    1240,\n/**/\n    1239,\n/**/\n    1238,\n/**/\n    1237,\n/**/\n    1236,\n/**/\n    1235,\n/**/\n    1234,\n/**/\n    1233,\n/**/\n    1232,\n/**/\n    1231,\n/**/\n    1230,\n/**/\n    1229,\n/**/\n    1228,\n/**/\n    1227,\n/**/\n    1226,\n/**/\n    1225,\n/**/\n    1224,\n/**/\n    1223,\n/**/\n    1222,\n/**/\n    1221,\n/**/\n    1220,\n/**/\n    1219,\n/**/\n    1218,\n/**/\n    1217,\n/**/\n    1216,\n/**/\n    1215,\n/**/\n    1214,\n/**/\n    1213,\n/**/\n    1212,\n/**/\n    1211,\n/**/\n    1210,\n/**/\n    1209,\n/**/\n    1208,\n/**/\n    1207,\n/**/\n    1206,\n/**/\n    1205,\n/**/\n    1204,\n/**/\n    1203,\n/**/\n    1202,\n/**/\n    1201,\n/**/\n    1200,\n/**/\n    1199,\n/**/\n    1198,\n/**/\n    1197,\n/**/\n    1196,\n/**/\n    1195,\n/**/\n    1194,\n/**/\n    1193,\n/**/\n    1192,\n/**/\n    1191,\n/**/\n    1190,\n/**/\n    1189,\n/**/\n    1188,\n/**/\n    1187,\n/**/\n    1186,\n/**/\n    1185,\n/**/\n    1184,\n/**/\n    1183,\n/**/\n    1182,\n/**/\n    1181,\n/**/\n    1180,\n/**/\n    1179,\n/**/\n    1178,\n/**/\n    1177,\n/**/\n    1176,\n/**/\n    1175,\n/**/\n    1174,\n/**/\n    1173,\n/**/\n    1172,\n/**/\n    1171,\n/**/\n    1170,\n/**/\n    1169,\n/**/\n    1168,\n/**/\n    1167,\n/**/\n    1166,\n/**/\n    1165,\n/**/\n    1164,\n/**/\n    1163,\n/**/\n    1162,\n/**/\n    1161,\n/**/\n    1160,\n/**/\n    1159,\n/**/\n    1158,\n/**/\n    1157,\n/**/\n    1156,\n/**/\n    1155,\n/**/\n    1154,\n/**/\n    1153,\n/**/\n    1152,\n/**/\n    1151,\n/**/\n    1150,\n/**/\n    1149,\n/**/\n    1148,\n/**/\n    1147,\n/**/\n    1146,\n/**/\n    1145,\n/**/\n    1144,\n/**/\n    1143,\n/**/\n    1142,\n/**/\n    1141,\n/**/\n    1140,\n/**/\n    1139,\n/**/\n    1138,\n/**/\n    1137,\n/**/\n    1136,\n/**/\n    1135,\n/**/\n    1134,\n/**/\n    1133,\n/**/\n    1132,\n/**/\n    1131,\n/**/\n    1130,\n/**/\n    1129,\n/**/\n    1128,\n/**/\n    1127,\n/**/\n    1126,\n/**/\n    1125,\n/**/\n    1124,\n/**/\n    1123,\n/**/\n    1122,\n/**/\n    1121,\n/**/\n    1120,\n/**/\n    1119,\n/**/\n    1118,\n/**/\n    1117,\n/**/\n    1116,\n/**/\n    1115,\n/**/\n    1114,\n/**/\n    1113,\n/**/\n    1112,\n/**/\n    1111,\n/**/\n    1110,\n/**/\n    1109,\n/**/\n    1108,\n/**/\n    1107,\n/**/\n    1106,\n/**/\n    1105,\n/**/\n    1104,\n/**/\n    1103,\n/**/\n    1102,\n/**/\n    1101,\n/**/\n    1100,\n/**/\n    1099,\n/**/\n    1098,\n/**/\n    1097,\n/**/\n    1096,\n/**/\n    1095,\n/**/\n    1094,\n/**/\n    1093,\n/**/\n    1092,\n/**/\n    1091,\n/**/\n    1090,\n/**/\n    1089,\n/**/\n    1088,\n/**/\n    1087,\n/**/\n    1086,\n/**/\n    1085,\n/**/\n    1084,\n/**/\n    1083,\n/**/\n    1082,\n/**/\n    1081,\n/**/\n    1080,\n/**/\n    1079,\n/**/\n    1078,\n/**/\n    1077,\n/**/\n    1076,\n/**/\n    1075,\n/**/\n    1074,\n/**/\n    1073,\n/**/\n    1072,\n/**/\n    1071,\n/**/\n    1070,\n/**/\n    1069,\n/**/\n    1068,\n/**/\n    1067,\n/**/\n    1066,\n/**/\n    1065,\n/**/\n    1064,\n/**/\n    1063,\n/**/\n    1062,\n/**/\n    1061,\n/**/\n    1060,\n/**/\n    1059,\n/**/\n    1058,\n/**/\n    1057,\n/**/\n    1056,\n/**/\n    1055,\n/**/\n    1054,\n/**/\n    1053,\n/**/\n    1052,\n/**/\n    1051,\n/**/\n    1050,\n/**/\n    1049,\n/**/\n    1048,\n/**/\n    1047,\n/**/\n    1046,\n/**/\n    1045,\n/**/\n    1044,\n/**/\n    1043,\n/**/\n    1042,\n/**/\n    1041,\n/**/\n    1040,\n/**/\n    1039,\n/**/\n    1038,\n/**/\n    1037,\n/**/\n    1036,\n/**/\n    1035,\n/**/\n    1034,\n/**/\n    1033,\n/**/\n    1032,\n/**/\n    1031,\n/**/\n    1030,\n/**/\n    1029,\n/**/\n    1028,\n/**/\n    1027,\n/**/\n    1026,\n/**/\n    1025,\n/**/\n    1024,\n/**/\n    1023,\n/**/\n    1022,\n/**/\n    1021,\n/**/\n    1020,\n/**/\n    1019,\n/**/\n    1018,\n/**/\n    1017,\n/**/\n    1016,\n/**/\n    1015,\n/**/\n    1014,\n/**/\n    1013,\n/**/\n    1012,\n/**/\n    1011,\n/**/\n    1010,\n/**/\n    1009,\n/**/\n    1008,\n/**/\n    1007,\n/**/\n    1006,\n/**/\n    1005,\n/**/\n    1004,\n/**/\n    1003,\n/**/\n    1002,\n/**/\n    1001,\n/**/\n    1000,\n/**/\n    999,\n/**/\n    998,\n/**/\n    997,\n/**/\n    996,\n/**/\n    995,\n/**/\n    994,\n/**/\n    993,\n/**/\n    992,\n/**/\n    991,\n/**/\n    990,\n/**/\n    989,\n/**/\n    988,\n/**/\n    987,\n/**/\n    986,\n/**/\n    985,\n/**/\n    984,\n/**/\n    983,\n/**/\n    982,\n/**/\n    981,\n/**/\n    980,\n/**/\n    979,\n/**/\n    978,\n/**/\n    977,\n/**/\n    976,\n/**/\n    975,\n/**/\n    974,\n/**/\n    973,\n/**/\n    972,\n/**/\n    971,\n/**/\n    970,\n/**/\n    969,\n/**/\n    968,\n/**/\n    967,\n/**/\n    966,\n/**/\n    965,\n/**/\n    964,\n/**/\n    963,\n/**/\n    962,\n/**/\n    961,\n/**/\n    960,\n/**/\n    959,\n/**/\n    958,\n/**/\n    957,\n/**/\n    956,\n/**/\n    955,\n/**/\n    954,\n/**/\n    953,\n/**/\n    952,\n/**/\n    951,\n/**/\n    950,\n/**/\n    949,\n/**/\n    948,\n/**/\n    947,\n/**/\n    946,\n/**/\n    945,\n/**/\n    944,\n/**/\n    943,\n/**/\n    942,\n/**/\n    941,\n/**/\n    940,\n/**/\n    939,\n/**/\n    938,\n/**/\n    937,\n/**/\n    936,\n/**/\n    935,\n/**/\n    934,\n/**/\n    933,\n/**/\n    932,\n/**/\n    931,\n/**/\n    930,\n/**/\n    929,\n/**/\n    928,\n/**/\n    927,\n/**/\n    926,\n/**/\n    925,\n/**/\n    924,\n/**/\n    923,\n/**/\n    922,\n/**/\n    921,\n/**/\n    920,\n/**/\n    919,\n/**/\n    918,\n/**/\n    917,\n/**/\n    916,\n/**/\n    915,\n/**/\n    914,\n/**/\n    913,\n/**/\n    912,\n/**/\n    911,\n/**/\n    910,\n/**/\n    909,\n/**/\n    908,\n/**/\n    907,\n/**/\n    906,\n/**/\n    905,\n/**/\n    904,\n/**/\n    903,\n/**/\n    902,\n/**/\n    901,\n/**/\n    900,\n/**/\n    899,\n/**/\n    898,\n/**/\n    897,\n/**/\n    896,\n/**/\n    895,\n/**/\n    894,\n/**/\n    893,\n/**/\n    892,\n/**/\n    891,\n/**/\n    890,\n/**/\n    889,\n/**/\n    888,\n/**/\n    887,\n/**/\n    886,\n/**/\n    885,\n/**/\n    884,\n/**/\n    883,\n/**/\n    882,\n/**/\n    881,\n/**/\n    880,\n/**/\n    879,\n/**/\n    878,\n/**/\n    877,\n/**/\n    876,\n/**/\n    875,\n/**/\n    874,\n/**/\n    873,\n/**/\n    872,\n/**/\n    871,\n/**/\n    870,\n/**/\n    869,\n/**/\n    868,\n/**/\n    867,\n/**/\n    866,\n/**/\n    865,\n/**/\n    864,\n/**/\n    863,\n/**/\n    862,\n/**/\n    861,\n/**/\n    860,\n/**/\n    859,\n/**/\n    858,\n/**/\n    857,\n/**/\n    856,\n/**/\n    855,\n/**/\n    854,\n/**/\n    853,\n/**/\n    852,\n/**/\n    851,\n/**/\n    850,\n/**/\n    849,\n/**/\n    848,\n/**/\n    847,\n/**/\n    846,\n/**/\n    845,\n/**/\n    844,\n/**/\n    843,\n/**/\n    842,\n/**/\n    841,\n/**/\n    840,\n/**/\n    839,\n/**/\n    838,\n/**/\n    837,\n/**/\n    836,\n/**/\n    835,\n/**/\n    834,\n/**/\n    833,\n/**/\n    832,\n/**/\n    831,\n/**/\n    830,\n/**/\n    829,\n/**/\n    828,\n/**/\n    827,\n/**/\n    826,\n/**/\n    825,\n/**/\n    824,\n/**/\n    823,\n/**/\n    822,\n/**/\n    821,\n/**/\n    820,\n/**/\n    819,\n/**/\n    818,\n/**/\n    817,\n/**/\n    816,\n/**/\n    815,\n/**/\n    814,\n/**/\n    813,\n/**/\n    812,\n/**/\n    811,\n/**/\n    810,\n/**/\n    809,\n/**/\n    808,\n/**/\n    807,\n/**/\n    806,\n/**/\n    805,\n/**/\n    804,\n/**/\n    803,\n/**/\n    802,\n/**/\n    801,\n/**/\n    800,\n/**/\n    799,\n/**/\n    798,\n/**/\n    797,\n/**/\n    796,\n/**/\n    795,\n/**/\n    794,\n/**/\n    793,\n/**/\n    792,\n/**/\n    791,\n/**/\n    790,\n/**/\n    789,\n/**/\n    788,\n/**/\n    787,\n/**/\n    786,\n/**/\n    785,\n/**/\n    784,\n/**/\n    783,\n/**/\n    782,\n/**/\n    781,\n/**/\n    780,\n/**/\n    779,\n/**/\n    778,\n/**/\n    777,\n/**/\n    776,\n/**/\n    775,\n/**/\n    774,\n/**/\n    773,\n/**/\n    772,\n/**/\n    771,\n/**/\n    770,\n/**/\n    769,\n/**/\n    768,\n/**/\n    767,\n/**/\n    766,\n/**/\n    765,\n/**/\n    764,\n/**/\n    763,\n/**/\n    762,\n/**/\n    761,\n/**/\n    760,\n/**/\n    759,\n/**/\n    758,\n/**/\n    757,\n/**/\n    756,\n/**/\n    755,\n/**/\n    754,\n/**/\n    753,\n/**/\n    752,\n/**/\n    751,\n/**/\n    750,\n/**/\n    749,\n/**/\n    748,\n/**/\n    747,\n/**/\n    746,\n/**/\n    745,\n/**/\n    744,\n/**/\n    743,\n/**/\n    742,\n/**/\n    741,\n/**/\n    740,\n/**/\n    739,\n/**/\n    738,\n/**/\n    737,\n/**/\n    736,\n/**/\n    735,\n/**/\n    734,\n/**/\n    733,\n/**/\n    732,\n/**/\n    731,\n/**/\n    730,\n/**/\n    729,\n/**/\n    728,\n/**/\n    727,\n/**/\n    726,\n/**/\n    725,\n/**/\n    724,\n/**/\n    723,\n/**/\n    722,\n/**/\n    721,\n/**/\n    720,\n/**/\n    719,\n/**/\n    718,\n/**/\n    717,\n/**/\n    716,\n/**/\n    715,\n/**/\n    714,\n/**/\n    713,\n/**/\n    712,\n/**/\n    711,\n/**/\n    710,\n/**/\n    709,\n/**/\n    708,\n/**/\n    707,\n/**/\n    706,\n/**/\n    705,\n/**/\n    704,\n/**/\n    703,\n/**/\n    702,\n/**/\n    701,\n/**/\n    700,\n/**/\n    699,\n/**/\n    698,\n/**/\n    697,\n/**/\n    696,\n/**/\n    695,\n/**/\n    694,\n/**/\n    693,\n/**/\n    692,\n/**/\n    691,\n/**/\n    690,\n/**/\n    689,\n/**/\n    688,\n/**/\n    687,\n/**/\n    686,\n/**/\n    685,\n/**/\n    684,\n/**/\n    683,\n/**/\n    682,\n/**/\n    681,\n/**/\n    680,\n/**/\n    679,\n/**/\n    678,\n/**/\n    677,\n/**/\n    676,\n/**/\n    675,\n/**/\n    674,\n/**/\n    673,\n/**/\n    672,\n/**/\n    671,\n/**/\n    670,\n/**/\n    669,\n/**/\n    668,\n/**/\n    667,\n/**/\n    666,\n/**/\n    665,\n/**/\n    664,\n/**/\n    663,\n/**/\n    662,\n/**/\n    661,\n/**/\n    660,\n/**/\n    659,\n/**/\n    658,\n/**/\n    657,\n/**/\n    656,\n/**/\n    655,\n/**/\n    654,\n/**/\n    653,\n/**/\n    652,\n/**/\n    651,\n/**/\n    650,\n/**/\n    649,\n/**/\n    648,\n/**/\n    647,\n/**/\n    646,\n/**/\n    645,\n/**/\n    644,\n/**/\n    643,\n/**/\n    642,\n/**/\n    641,\n/**/\n    640,\n/**/\n    639,\n/**/\n    638,\n/**/\n    637,\n/**/\n    636,\n/**/\n    635,\n/**/\n    634,\n/**/\n    633,\n/**/\n    632,\n/**/\n    631,\n/**/\n    630,\n/**/\n    629,\n/**/\n    628,\n/**/\n    627,\n/**/\n    626,\n/**/\n    625,\n/**/\n    624,\n/**/\n    623,\n/**/\n    622,\n/**/\n    621,\n/**/\n    620,\n/**/\n    619,\n/**/\n    618,\n/**/\n    617,\n/**/\n    616,\n/**/\n    615,\n/**/\n    614,\n/**/\n    613,\n/**/\n    612,\n/**/\n    611,\n/**/\n    610,\n/**/\n    609,\n/**/\n    608,\n/**/\n    607,\n/**/\n    606,\n/**/\n    605,\n/**/\n    604,\n/**/\n    603,\n/**/\n    602,\n/**/\n    601,\n/**/\n    600,\n/**/\n    599,\n/**/\n    598,\n/**/\n    597,\n/**/\n    596,\n/**/\n    595,\n/**/\n    594,\n/**/\n    593,\n/**/\n    592,\n/**/\n    591,\n/**/\n    590,\n/**/\n    589,\n/**/\n    588,\n/**/\n    587,\n/**/\n    586,\n/**/\n    585,\n/**/\n    584,\n/**/\n    583,\n/**/\n    582,\n/**/\n    581,\n/**/\n    580,\n/**/\n    579,\n/**/\n    578,\n/**/\n    577,\n/**/\n    576,\n/**/\n    575,\n/**/\n    574,\n/**/\n    573,\n/**/\n    572,\n/**/\n    571,\n/**/\n    570,\n/**/\n    569,\n/**/\n    568,\n/**/\n    567,\n/**/\n    566,\n/**/\n    565,\n/**/\n    564,\n/**/\n    563,\n/**/\n    562,\n/**/\n    561,\n/**/\n    560,\n/**/\n    559,\n/**/\n    558,\n/**/\n    557,\n/**/\n    556,\n/**/\n    555,\n/**/\n    554,\n/**/\n    553,\n/**/\n    552,\n/**/\n    551,\n/**/\n    550,\n/**/\n    549,\n/**/\n    548,\n/**/\n    547,\n/**/\n    546,\n/**/\n    545,\n/**/\n    544,\n/**/\n    543,\n/**/\n    542,\n/**/\n    541,\n/**/\n    540,\n/**/\n    539,\n/**/\n    538,\n/**/\n    537,\n/**/\n    536,\n/**/\n    535,\n/**/\n    534,\n/**/\n    533,\n/**/\n    532,\n/**/\n    531,\n/**/\n    530,\n/**/\n    529,\n/**/\n    528,\n/**/\n    527,\n/**/\n    526,\n/**/\n    525,\n/**/\n    524,\n/**/\n    523,\n/**/\n    522,\n/**/\n    521,\n/**/\n    520,\n/**/\n    519,\n/**/\n    518,\n/**/\n    517,\n/**/\n    516,\n/**/\n    515,\n/**/\n    514,\n/**/\n    513,\n/**/\n    512,\n/**/\n    511,\n/**/\n    510,\n/**/\n    509,\n/**/\n    508,\n/**/\n    507,\n/**/\n    506,\n/**/\n    505,\n/**/\n    504,\n/**/\n    503,\n/**/\n    502,\n/**/\n    501,\n/**/\n    500,\n/**/\n    499,\n/**/\n    498,\n/**/\n    497,\n/**/\n    496,\n/**/\n    495,\n/**/\n    494,\n/**/\n    493,\n/**/\n    492,\n/**/\n    491,\n/**/\n    490,\n/**/\n    489,\n/**/\n    488,\n/**/\n    487,\n/**/\n    486,\n/**/\n    485,\n/**/\n    484,\n/**/\n    483,\n/**/\n    482,\n/**/\n    481,\n/**/\n    480,\n/**/\n    479,\n/**/\n    478,\n/**/\n    477,\n/**/\n    476,\n/**/\n    475,\n/**/\n    474,\n/**/\n    473,\n/**/\n    472,\n/**/\n    471,\n/**/\n    470,\n/**/\n    469,\n/**/\n    468,\n/**/\n    467,\n/**/\n    466,\n/**/\n    465,\n/**/\n    464,\n/**/\n    463,\n/**/\n    462,\n/**/\n    461,\n/**/\n    460,\n/**/\n    459,\n/**/\n    458,\n/**/\n    457,\n/**/\n    456,\n/**/\n    455,\n/**/\n    454,\n/**/\n    453,\n/**/\n    452,\n/**/\n    451,\n/**/\n    450,\n/**/\n    449,\n/**/\n    448,\n/**/\n    447,\n/**/\n    446,\n/**/\n    445,\n/**/\n    444,\n/**/\n    443,\n/**/\n    442,\n/**/\n    441,\n/**/\n    440,\n/**/\n    439,\n/**/\n    438,\n/**/\n    437,\n/**/\n    436,\n/**/\n    435,\n/**/\n    434,\n/**/\n    433,\n/**/\n    432,\n/**/\n    431,\n/**/\n    430,\n/**/\n    429,\n/**/\n    428,\n/**/\n    427,\n/**/\n    426,\n/**/\n    425,\n/**/\n    424,\n/**/\n    423,\n/**/\n    422,\n/**/\n    421,\n/**/\n    420,\n/**/\n    419,\n/**/\n    418,\n/**/\n    417,\n/**/\n    416,\n/**/\n    415,\n/**/\n    414,\n/**/\n    413,\n/**/\n    412,\n/**/\n    411,\n/**/\n    410,\n/**/\n    409,\n/**/\n    408,\n/**/\n    407,\n/**/\n    406,\n/**/\n    405,\n/**/\n    404,\n/**/\n    403,\n/**/\n    402,\n/**/\n    401,\n/**/\n    400,\n/**/\n    399,\n/**/\n    398,\n/**/\n    397,\n/**/\n    396,\n/**/\n    395,\n/**/\n    394,\n/**/\n    393,\n/**/\n    392,\n/**/\n    391,\n/**/\n    390,\n/**/\n    389,\n/**/\n    388,\n/**/\n    387,\n/**/\n    386,\n/**/\n    385,\n/**/\n    384,\n/**/\n    383,\n/**/\n    382,\n/**/\n    381,\n/**/\n    380,\n/**/\n    379,\n/**/\n    378,\n/**/\n    377,\n/**/\n    376,\n/**/\n    375,\n/**/\n    374,\n/**/\n    373,\n/**/\n    372,\n/**/\n    371,\n/**/\n    370,\n/**/\n    369,\n/**/\n    368,\n/**/\n    367,\n/**/\n    366,\n/**/\n    365,\n/**/\n    364,\n/**/\n    363,\n/**/\n    362,\n/**/\n    361,\n/**/\n    360,\n/**/\n    359,\n/**/\n    358,\n/**/\n    357,\n/**/\n    356,\n/**/\n    355,\n/**/\n    354,\n/**/\n    353,\n/**/\n    352,\n/**/\n    351,\n/**/\n    350,\n/**/\n    349,\n/**/\n    348,\n/**/\n    347,\n/**/\n    346,\n/**/\n    345,\n/**/\n    344,\n/**/\n    343,\n/**/\n    342,\n/**/\n    341,\n/**/\n    340,\n/**/\n    339,\n/**/\n    338,\n/**/\n    337,\n/**/\n    336,\n/**/\n    335,\n/**/\n    334,\n/**/\n    333,\n/**/\n    332,\n/**/\n    331,\n/**/\n    330,\n/**/\n    329,\n/**/\n    328,\n/**/\n    327,\n/**/\n    326,\n/**/\n    325,\n/**/\n    324,\n/**/\n    323,\n/**/\n    322,\n/**/\n    321,\n/**/\n    320,\n/**/\n    319,\n/**/\n    318,\n/**/\n    317,\n/**/\n    316,\n/**/\n    315,\n/**/\n    314,\n/**/\n    313,\n/**/\n    312,\n/**/\n    311,\n/**/\n    310,\n/**/\n    309,\n/**/\n    308,\n/**/\n    307,\n/**/\n    306,\n/**/\n    305,\n/**/\n    304,\n/**/\n    303,\n/**/\n    302,\n/**/\n    301,\n/**/\n    300,\n/**/\n    299,\n/**/\n    298,\n/**/\n    297,\n/**/\n    296,\n/**/\n    295,\n/**/\n    294,\n/**/\n    293,\n/**/\n    292,\n/**/\n    291,\n/**/\n    290,\n/**/\n    289,\n/**/\n    288,\n/**/\n    287,\n/**/\n    286,\n/**/\n    285,\n/**/\n    284,\n/**/\n    283,\n/**/\n    282,\n/**/\n    281,\n/**/\n    280,\n/**/\n    279,\n/**/\n    278,\n/**/\n    277,\n/**/\n    276,\n/**/\n    275,\n/**/\n    274,\n/**/\n    273,\n/**/\n    272,\n/**/\n    271,\n/**/\n    270,\n/**/\n    269,\n/**/\n    268,\n/**/\n    267,\n/**/\n    266,\n/**/\n    265,\n/**/\n    264,\n/**/\n    263,\n/**/\n    262,\n/**/\n    261,\n/**/\n    260,\n/**/\n    259,\n/**/\n    258,\n/**/\n    257,\n/**/\n    256,\n/**/\n    255,\n/**/\n    254,\n/**/\n    253,\n/**/\n    252,\n/**/\n    251,\n/**/\n    250,\n/**/\n    249,\n/**/\n    248,\n/**/\n    247,\n/**/\n    246,\n/**/\n    245,\n/**/\n    244,\n/**/\n    243,\n/**/\n    242,\n/**/\n    241,\n/**/\n    240,\n/**/\n    239,\n/**/\n    238,\n/**/\n    237,\n/**/\n    236,\n/**/\n    235,\n/**/\n    234,\n/**/\n    233,\n/**/\n    232,\n/**/\n    231,\n/**/\n    230,\n/**/\n    229,\n/**/\n    228,\n/**/\n    227,\n/**/\n    226,\n/**/\n    225,\n/**/\n    224,\n/**/\n    223,\n/**/\n    222,\n/**/\n    221,\n/**/\n    220,\n/**/\n    219,\n/**/\n    218,\n/**/\n    217,\n/**/\n    216,\n/**/\n    215,\n/**/\n    214,\n/**/\n    213,\n/**/\n    212,\n/**/\n    211,\n/**/\n    210,\n/**/\n    209,\n/**/\n    208,\n/**/\n    207,\n/**/\n    206,\n/**/\n    205,\n/**/\n    204,\n/**/\n    203,\n/**/\n    202,\n/**/\n    201,\n/**/\n    200,\n/**/\n    199,\n/**/\n    198,\n/**/\n    197,\n/**/\n    196,\n/**/\n    195,\n/**/\n    194,\n/**/\n    193,\n/**/\n    192,\n/**/\n    191,\n/**/\n    190,\n/**/\n    189,\n/**/\n    188,\n/**/\n    187,\n/**/\n    186,\n/**/\n    185,\n/**/\n    184,\n/**/\n    183,\n/**/\n    182,\n/**/\n    181,\n/**/\n    180,\n/**/\n    179,\n/**/\n    178,\n/**/\n    177,\n/**/\n    176,\n/**/\n    175,\n/**/\n    174,\n/**/\n    173,\n/**/\n    172,\n/**/\n    171,\n/**/\n    170,\n/**/\n    169,\n/**/\n    168,\n/**/\n    167,\n/**/\n    166,\n/**/\n    165,\n/**/\n    164,\n/**/\n    163,\n/**/\n    162,\n/**/\n    161,\n/**/\n    160,\n/**/\n    159,\n/**/\n    158,\n/**/\n    157,\n/**/\n    156,\n/**/\n    155,\n/**/\n    154,\n/**/\n    153,\n/**/\n    152,\n/**/\n    151,\n/**/\n    150,\n/**/\n    149,\n/**/\n    148,\n/**/\n    147,\n/**/\n    146,\n/**/\n    145,\n/**/\n    144,\n/**/\n    143,\n/**/\n    142,\n/**/\n    141,\n/**/\n    140,\n/**/\n    139,\n/**/\n    138,\n/**/\n    137,\n/**/\n    136,\n/**/\n    135,\n/**/\n    134,\n/**/\n    133,\n/**/\n    132,\n/**/\n    131,\n/**/\n    130,\n/**/\n    129,\n/**/\n    128,\n/**/\n    127,\n/**/\n    126,\n/**/\n    125,\n/**/\n    124,\n/**/\n    123,\n/**/\n    122,\n/**/\n    121,\n/**/\n    120,\n/**/\n    119,\n/**/\n    118,\n/**/\n    117,\n/**/\n    116,\n/**/\n    115,\n/**/\n    114,\n/**/\n    113,\n/**/\n    112,\n/**/\n    111,\n/**/\n    110,\n/**/\n    109,\n/**/\n    108,\n/**/\n    107,\n/**/\n    106,\n/**/\n    105,\n/**/\n    104,\n/**/\n    103,\n/**/\n    102,\n/**/\n    101,\n/**/\n    100,\n/**/\n    99,\n/**/\n    98,\n/**/\n    97,\n/**/\n    96,\n/**/\n    95,\n/**/\n    94,\n/**/\n    93,\n/**/\n    92,\n/**/\n    91,\n/**/\n    90,\n/**/\n    89,\n/**/\n    88,\n/**/\n    87,\n/**/\n    86,\n/**/\n    85,\n/**/\n    84,\n/**/\n    83,\n/**/\n    82,\n/**/\n    81,\n/**/\n    80,\n/**/\n    79,\n/**/\n    78,\n/**/\n    77,\n/**/\n    76,\n/**/\n    75,\n/**/\n    74,\n/**/\n    73,\n/**/\n    72,\n/**/\n    71,\n/**/\n    70,\n/**/\n    69,\n/**/\n    68,\n/**/\n    67,\n/**/\n    66,\n/**/\n    65,\n/**/\n    64,\n/**/\n    63,\n/**/\n    62,\n/**/\n    61,\n/**/\n    60,\n/**/\n    59,\n/**/\n    58,\n/**/\n    57,\n/**/\n    56,\n/**/\n    55,\n/**/\n    54,\n/**/\n    53,\n/**/\n    52,\n/**/\n    51,\n/**/\n    50,\n/**/\n    49,\n/**/\n    48,\n/**/\n    47,\n/**/\n    46,\n/**/\n    45,\n/**/\n    44,\n/**/\n    43,\n/**/\n    42,\n/**/\n    41,\n/**/\n    40,\n/**/\n    39,\n/**/\n    38,\n/**/\n    37,\n/**/\n    36,\n/**/\n    35,\n/**/\n    34,\n/**/\n    33,\n/**/\n    32,\n/**/\n    31,\n/**/\n    30,\n/**/\n    29,\n/**/\n    28,\n/**/\n    27,\n/**/\n    26,\n/**/\n    25,\n/**/\n    24,\n/**/\n    23,\n/**/\n    22,\n/**/\n    21,\n/**/\n    20,\n/**/\n    19,\n/**/\n    18,\n/**/\n    17,\n/**/\n    16,\n/**/\n    15,\n/**/\n    14,\n/**/\n    13,\n/**/\n    12,\n/**/\n    11,\n/**/\n    10,\n/**/\n    9,\n/**/\n    8,\n/**/\n    7,\n/**/\n    6,\n/**/\n    5,\n/**/\n    4,\n/**/\n    3,\n/**/\n    2,\n/**/\n    1,\n/**/\n    0\n};\n\n/*\n * Place to put a short description when adding a feature with a patch.\n * Keep it short, e.g.,: \"relative numbers\", \"persistent undo\".\n * Also add a comment marker to separate the lines.\n * See the official Vim patches for the diff format: It must use a context of\n * one line only.  Create it by hand or use \"diff -C2\" and edit the patch.\n */\nstatic char *(extra_patches[]) =\n{   /* Add your patch description below this line */\n/**/\n    NULL\n};\n\n    int\nhighest_patch(void)\n{\n    // this relies on the highest patch number to be the first entry\n    return included_patches[0];\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * Return TRUE if patch \"n\" has been included.\n */\n    int\nhas_patch(int n)\n{\n    int\t\th, m, l;\n\n    // Perform a binary search.\n    l = 0;\n    h = (int)ARRAY_LENGTH(included_patches) - 1;\n    for (;;)\n    {\n\tm = (l + h) / 2;\n\tif (included_patches[m] == n)\n\t    return TRUE;\n\tif (l == h)\n\t    break;\n\tif (included_patches[m] < n)\n\t    h = m;\n\telse\n\t    l = m + 1;\n    }\n    return FALSE;\n}\n#endif\n\n    void\nex_version(exarg_T *eap)\n{\n    /*\n     * Ignore a \":version 9.99\" command.\n     */\n    if (*eap->arg == NUL)\n    {\n\tmsg_putchar('\\n');\n\tlist_version();\n    }\n}\n\n/*\n * Output a string for the version message.  If it's going to wrap, output a\n * newline, unless the message is too long to fit on the screen anyway.\n * When \"wrap\" is TRUE wrap the string in [].\n */\n    static void\nversion_msg_wrap(char_u *s, int wrap)\n{\n    int\t\tlen = vim_strsize(s) + (wrap ? 2 : 0);\n\n    if (!got_int && len < (int)Columns && msg_col + len >= (int)Columns\n\t\t\t\t\t\t\t\t&& *s != '\\n')\n\tmsg_putchar('\\n');\n    if (!got_int)\n    {\n\tif (wrap)\n\t    msg_puts(\"[\");\n\tmsg_puts((char *)s);\n\tif (wrap)\n\t    msg_puts(\"]\");\n    }\n}\n\n    static void\nversion_msg(char *s)\n{\n    version_msg_wrap((char_u *)s, FALSE);\n}\n\n/*\n * List all features aligned in columns, dictionary style.\n */\n    static void\nlist_features(void)\n{\n    list_in_columns((char_u **)features, -1, -1);\n}\n\n/*\n * List string items nicely aligned in columns.\n * When \"size\" is < 0 then the last entry is marked with NULL.\n * The entry with index \"current\" is inclosed in [].\n */\n    void\nlist_in_columns(char_u **items, int size, int current)\n{\n    int\t\ti;\n    int\t\tncol;\n    int\t\tnrow;\n    int\t\tcur_row = 1;\n    int\t\titem_count = 0;\n    int\t\twidth = 0;\n#ifdef FEAT_SYN_HL\n    int\t\tuse_highlight = (items == (char_u **)features);\n#endif\n\n    // Find the length of the longest item, use that + 1 as the column\n    // width.\n    for (i = 0; size < 0 ? items[i] != NULL : i < size; ++i)\n    {\n\tint l = vim_strsize(items[i]) + (i == current ? 2 : 0);\n\n\tif (l > width)\n\t    width = l;\n\t++item_count;\n    }\n    width += 1;\n\n    if (Columns < width)\n    {\n\t// Not enough screen columns - show one per line\n\tfor (i = 0; i < item_count; ++i)\n\t{\n\t    version_msg_wrap(items[i], i == current);\n\t    if (msg_col > 0 && i < item_count - 1)\n\t\tmsg_putchar('\\n');\n\t}\n\treturn;\n    }\n\n    // The rightmost column doesn't need a separator.\n    // Sacrifice it to fit in one more column if possible.\n    ncol = (int) (Columns + 1) / width;\n    nrow = item_count / ncol + ((item_count % ncol) ? 1 : 0);\n\n    // \"i\" counts columns then rows.  \"idx\" counts rows then columns.\n    for (i = 0; !got_int && i < nrow * ncol; ++i)\n    {\n\tint idx = (i / ncol) + (i % ncol) * nrow;\n\n\tif (idx < item_count)\n\t{\n\t    int last_col = (i + 1) % ncol == 0;\n\n\t    if (idx == current)\n\t\tmsg_putchar('[');\n#ifdef FEAT_SYN_HL\n\t    if (use_highlight && items[idx][0] == '-')\n\t\tmsg_puts_attr((char *)items[idx], HL_ATTR(HLF_W));\n\t    else\n#endif\n\t\tmsg_puts((char *)items[idx]);\n\t    if (idx == current)\n\t\tmsg_putchar(']');\n\t    if (last_col)\n\t    {\n\t\tif (msg_col > 0 && cur_row < nrow)\n\t\t    msg_putchar('\\n');\n\t\t++cur_row;\n\t    }\n\t    else\n\t    {\n\t\twhile (msg_col % width)\n\t\t    msg_putchar(' ');\n\t    }\n\t}\n\telse\n\t{\n\t    // this row is out of items, thus at the end of the row\n\t    if (msg_col > 0)\n\t    {\n\t\tif (cur_row < nrow)\n\t\t    msg_putchar('\\n');\n\t\t++cur_row;\n\t    }\n\t}\n    }\n}\n\n    void\nlist_version(void)\n{\n    int\t\ti;\n    int\t\tfirst;\n    char\t*s = \"\";\n\n    /*\n     * When adding features here, don't forget to update the list of\n     * internal variables in eval.c!\n     */\n    init_longVersion();\n    msg(longVersion);\n#ifdef MSWIN\n# ifdef FEAT_GUI_MSWIN\n#  ifdef VIMDLL\n#   ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit GUI/console version\"));\n#   else\n    msg_puts(_(\"\\nMS-Windows 32-bit GUI/console version\"));\n#   endif\n#  else\n#   ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit GUI version\"));\n#   else\n    msg_puts(_(\"\\nMS-Windows 32-bit GUI version\"));\n#   endif\n#  endif\n#  ifdef FEAT_OLE\n    msg_puts(_(\" with OLE support\"));\n#  endif\n# else\n#  ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit console version\"));\n#  else\n    msg_puts(_(\"\\nMS-Windows 32-bit console version\"));\n#  endif\n# endif\n#endif\n#if defined(MACOS_X)\n# if defined(MACOS_X_DARWIN)\n    msg_puts(_(\"\\nmacOS version\"));\n# else\n    msg_puts(_(\"\\nmacOS version w/o darwin feat.\"));\n# endif\n# if defined(__arm64__)\n    msg_puts(\" - arm64\");\n# elif defined(__x86_64__)\n    msg_puts(\" - x86_64\");\n# endif\n#endif\n\n#ifdef VMS\n    msg_puts(_(\"\\nOpenVMS version\"));\n# ifdef HAVE_PATHDEF\n    if (*compiled_arch != NUL)\n    {\n\tmsg_puts(\" - \");\n\tmsg_puts((char *)compiled_arch);\n    }\n# endif\n\n#endif\n\n    // Print the list of patch numbers if there is at least one.\n    // Print a range when patches are consecutive: \"1-10, 12, 15-40, 42-45\"\n    if (included_patches[0] != 0)\n    {\n\tmsg_puts(_(\"\\nIncluded patches: \"));\n\tfirst = -1;\n\ti = (int)ARRAY_LENGTH(included_patches) - 1;\n\twhile (--i >= 0)\n\t{\n\t    if (first < 0)\n\t\tfirst = included_patches[i];\n\t    if (i == 0 || included_patches[i - 1] != included_patches[i] + 1)\n\t    {\n\t\tmsg_puts(s);\n\t\ts = \", \";\n\t\tmsg_outnum((long)first);\n\t\tif (first != included_patches[i])\n\t\t{\n\t\t    msg_puts(\"-\");\n\t\t    msg_outnum((long)included_patches[i]);\n\t\t}\n\t\tfirst = -1;\n\t    }\n\t}\n    }\n\n    // Print the list of extra patch descriptions if there is at least one.\n    if (extra_patches[0] != NULL)\n    {\n\tmsg_puts(_(\"\\nExtra patches: \"));\n\ts = \"\";\n\tfor (i = 0; extra_patches[i] != NULL; ++i)\n\t{\n\t    msg_puts(s);\n\t    s = \", \";\n\t    msg_puts(extra_patches[i]);\n\t}\n    }\n\n#ifdef MODIFIED_BY\n    msg_puts(\"\\n\");\n    msg_puts(_(\"Modified by \"));\n    msg_puts(MODIFIED_BY);\n#endif\n\n#ifdef HAVE_PATHDEF\n    if (*compiled_user != NUL || *compiled_sys != NUL)\n    {\n\tmsg_puts(_(\"\\nCompiled \"));\n\tif (*compiled_user != NUL)\n\t{\n\t    msg_puts(_(\"by \"));\n\t    msg_puts((char *)compiled_user);\n\t}\n\tif (*compiled_sys != NUL)\n\t{\n\t    msg_puts(\"@\");\n\t    msg_puts((char *)compiled_sys);\n\t}\n    }\n#endif\n\n#if defined(FEAT_HUGE)\n    msg_puts(_(\"\\nHuge version \"));\n#elif defined(FEAT_NORMAL)\n    msg_puts(_(\"\\nNormal version \"));\n#else\n    msg_puts(_(\"\\nTiny version \"));\n#endif\n#if !defined(FEAT_GUI)\n    msg_puts(_(\"without GUI.\"));\n#elif defined(FEAT_GUI_GTK)\n# if defined(USE_GTK3)\n    msg_puts(_(\"with GTK3 GUI.\"));\n# elif defined(FEAT_GUI_GNOME)\n     msg_puts(_(\"with GTK2-GNOME GUI.\"));\n# else\n     msg_puts(_(\"with GTK2 GUI.\"));\n# endif\n#elif defined(FEAT_GUI_MOTIF)\n    msg_puts(_(\"with X11-Motif GUI.\"));\n#elif defined(FEAT_GUI_HAIKU)\n    msg_puts(_(\"with Haiku GUI.\"));\n#elif defined(FEAT_GUI_PHOTON)\n    msg_puts(_(\"with Photon GUI.\"));\n#elif defined(MSWIN)\n    msg_puts(_(\"with GUI.\"));\n#endif\n    version_msg(_(\"  Features included (+) or not (-):\\n\"));\n\n    list_features();\n    if (msg_col > 0)\n\tmsg_putchar('\\n');\n\n#ifdef SYS_VIMRC_FILE\n    version_msg(_(\"   system vimrc file: \\\"\"));\n    version_msg(SYS_VIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE\n    version_msg(_(\"     user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE2\n    version_msg(_(\" 2nd user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE2);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE3\n    version_msg(_(\" 3rd user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE3);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_EXRC_FILE\n    version_msg(_(\"      user exrc file: \\\"\"));\n    version_msg(USR_EXRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_EXRC_FILE2\n    version_msg(_(\"  2nd user exrc file: \\\"\"));\n    version_msg(USR_EXRC_FILE2);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef FEAT_GUI\n# ifdef SYS_GVIMRC_FILE\n    version_msg(_(\"  system gvimrc file: \\\"\"));\n    version_msg(SYS_GVIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n# endif\n    version_msg(_(\"    user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n# ifdef USR_GVIMRC_FILE2\n    version_msg(_(\"2nd user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE2);\n    version_msg(\"\\\"\\n\");\n# endif\n# ifdef USR_GVIMRC_FILE3\n    version_msg(_(\"3rd user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE3);\n    version_msg(\"\\\"\\n\");\n# endif\n#endif\n    version_msg(_(\"       defaults file: \\\"\"));\n    version_msg(VIM_DEFAULTS_FILE);\n    version_msg(\"\\\"\\n\");\n#ifdef FEAT_GUI\n# ifdef SYS_MENU_FILE\n    version_msg(_(\"    system menu file: \\\"\"));\n    version_msg(SYS_MENU_FILE);\n    version_msg(\"\\\"\\n\");\n# endif\n#endif\n#ifdef HAVE_PATHDEF\n    if (*default_vim_dir != NUL)\n    {\n\tversion_msg(_(\"  fall-back for $VIM: \\\"\"));\n\tversion_msg((char *)default_vim_dir);\n\tversion_msg(\"\\\"\\n\");\n    }\n    if (*default_vimruntime_dir != NUL)\n    {\n\tversion_msg(_(\" f-b for $VIMRUNTIME: \\\"\"));\n\tversion_msg((char *)default_vimruntime_dir);\n\tversion_msg(\"\\\"\\n\");\n    }\n    version_msg(_(\"Compilation: \"));\n    version_msg((char *)all_cflags);\n    version_msg(\"\\n\");\n#ifdef VMS\n    if (*compiler_version != NUL)\n    {\n\tversion_msg(_(\"Compiler: \"));\n\tversion_msg((char *)compiler_version);\n\tversion_msg(\"\\n\");\n    }\n#endif\n    version_msg(_(\"Linking: \"));\n    version_msg((char *)all_lflags);\n#endif\n#ifdef DEBUG\n    version_msg(\"\\n\");\n    version_msg(_(\"  DEBUG BUILD\"));\n#endif\n}\n\nstatic void do_intro_line(int row, char_u *mesg, int add_version, int attr);\nstatic void intro_message(int colon);\n\n/*\n * Show the intro message when not editing a file.\n */\n    void\nmaybe_intro_message(void)\n{\n    if (BUFEMPTY()\n\t    && curbuf->b_fname == NULL\n\t    && firstwin->w_next == NULL\n\t    && vim_strchr(p_shm, SHM_INTRO) == NULL)\n\tintro_message(FALSE);\n}\n\n/*\n * Give an introductory message about Vim.\n * Only used when starting Vim on an empty file, without a file name.\n * Or with the \":intro\" command (for Sven :-).\n */\n    static void\nintro_message(\n    int\t\tcolon)\t\t// TRUE for \":intro\"\n{\n    int\t\ti;\n    int\t\trow;\n    int\t\tblanklines;\n    int\t\tsponsor;\n    char\t*p;\n    static char\t*(lines[]) =\n    {\n\tN_(\"VIM - Vi IMproved\"),\n\t\"\",\n\tN_(\"version \"),\n\tN_(\"by Bram Moolenaar et al.\"),\n#ifdef MODIFIED_BY\n\t\" \",\n#endif\n\tN_(\"Vim is open source and freely distributable\"),\n\t\"\",\n\tN_(\"Help poor children in Uganda!\"),\n\tN_(\"type  :help iccf<Enter>       for information \"),\n\t\"\",\n\tN_(\"type  :q<Enter>               to exit         \"),\n\tN_(\"type  :help<Enter>  or  <F1>  for on-line help\"),\n\tN_(\"type  :help version9<Enter>   for version info\"),\n\tNULL,\n\t\"\",\n\tN_(\"Running in Vi compatible mode\"),\n\tN_(\"type  :set nocp<Enter>        for Vim defaults\"),\n\tN_(\"type  :help cp-default<Enter> for info on this\"),\n    };\n#ifdef FEAT_GUI\n    static char\t*(gui_lines[]) =\n    {\n\tNULL,\n\tNULL,\n\tNULL,\n\tNULL,\n#ifdef MODIFIED_BY\n\tNULL,\n#endif\n\tNULL,\n\tNULL,\n\tNULL,\n\tN_(\"menu  Help->Orphans           for information    \"),\n\tNULL,\n\tN_(\"Running modeless, typed text is inserted\"),\n\tN_(\"menu  Edit->Global Settings->Toggle Insert Mode  \"),\n\tN_(\"                              for two modes      \"),\n\tNULL,\n\tNULL,\n\tNULL,\n\tN_(\"menu  Edit->Global Settings->Toggle Vi Compatible\"),\n\tN_(\"                              for Vim defaults   \"),\n    };\n#endif\n\n    // blanklines = screen height - # message lines\n    blanklines = (int)Rows - (ARRAY_LENGTH(lines) - 1);\n    if (!p_cp)\n\tblanklines += 4;  // add 4 for not showing \"Vi compatible\" message\n\n    // Don't overwrite a statusline.  Depends on 'cmdheight'.\n    if (p_ls > 1)\n\tblanklines -= Rows - topframe->fr_height;\n    if (blanklines < 0)\n\tblanklines = 0;\n\n    // Show the sponsor and register message one out of four times, the Uganda\n    // message two out of four times.\n    sponsor = (int)time(NULL);\n    sponsor = ((sponsor & 2) == 0) - ((sponsor & 4) == 0);\n\n    // start displaying the message lines after half of the blank lines\n    row = blanklines / 2;\n    if ((row >= 2 && Columns >= 50) || colon)\n    {\n\tfor (i = 0; i < (int)ARRAY_LENGTH(lines); ++i)\n\t{\n\t    p = lines[i];\n#ifdef FEAT_GUI\n\t    if (p_im && gui.in_use && gui_lines[i] != NULL)\n\t\tp = gui_lines[i];\n#endif\n\t    if (p == NULL)\n\t    {\n\t\tif (!p_cp)\n\t\t    break;\n\t\tcontinue;\n\t    }\n\t    if (sponsor != 0)\n\t    {\n\t\tif (strstr(p, \"children\") != NULL)\n\t\t    p = sponsor < 0\n\t\t\t? N_(\"Sponsor Vim development!\")\n\t\t\t: N_(\"Become a registered Vim user!\");\n\t\telse if (strstr(p, \"iccf\") != NULL)\n\t\t    p = sponsor < 0\n\t\t\t? N_(\"type  :help sponsor<Enter>    for information \")\n\t\t\t: N_(\"type  :help register<Enter>   for information \");\n\t\telse if (strstr(p, \"Orphans\") != NULL)\n\t\t    p = N_(\"menu  Help->Sponsor/Register  for information    \");\n\t    }\n\t    if (*p != NUL)\n\t\tdo_intro_line(row, (char_u *)_(p), i == 2, 0);\n\t    ++row;\n\t}\n    }\n\n    // Make the wait-return message appear just below the text.\n    if (colon)\n\tmsg_row = row;\n}\n\n    static void\ndo_intro_line(\n    int\t\trow,\n    char_u\t*mesg,\n    int\t\tadd_version,\n    int\t\tattr)\n{\n    char_u\tvers[20];\n    int\t\tcol;\n    char_u\t*p;\n    int\t\tl;\n    int\t\tclen;\n#ifdef MODIFIED_BY\n# define MODBY_LEN 150\n    char_u\tmodby[MODBY_LEN];\n\n    if (*mesg == ' ')\n    {\n\tvim_strncpy(modby, (char_u *)_(\"Modified by \"), MODBY_LEN - 1);\n\tl = (int)STRLEN(modby);\n\tvim_strncpy(modby + l, (char_u *)MODIFIED_BY, MODBY_LEN - l - 1);\n\tmesg = modby;\n    }\n#endif\n\n    // Center the message horizontally.\n    col = vim_strsize(mesg);\n    if (add_version)\n    {\n\tSTRCPY(vers, mediumVersion);\n\tif (highest_patch())\n\t{\n\t    // Check for 9.9x or 9.9xx, alpha/beta version\n\t    if (isalpha((int)vers[3]))\n\t    {\n\t\tint len = (isalpha((int)vers[4])) ? 5 : 4;\n\t\tsprintf((char *)vers + len, \".%d%s\", highest_patch(),\n\t\t\t\t\t\t\t mediumVersion + len);\n\t    }\n\t    else\n\t\tsprintf((char *)vers + 3, \".%d\", highest_patch());\n\t}\n\tcol += (int)STRLEN(vers);\n    }\n    col = (Columns - col) / 2;\n    if (col < 0)\n\tcol = 0;\n\n    // Split up in parts to highlight <> items differently.\n    for (p = mesg; *p != NUL; p += l)\n    {\n\tclen = 0;\n\tfor (l = 0; p[l] != NUL\n\t\t\t && (l == 0 || (p[l] != '<' && p[l - 1] != '>')); ++l)\n\t{\n\t    if (has_mbyte)\n\t    {\n\t\tclen += ptr2cells(p + l);\n\t\tl += (*mb_ptr2len)(p + l) - 1;\n\t    }\n\t    else\n\t\tclen += byte2cells(p[l]);\n\t}\n\tscreen_puts_len(p, l, row, col, *p == '<' ? HL_ATTR(HLF_8) : attr);\n\tcol += clen;\n    }\n\n    // Add the version number to the version line.\n    if (add_version)\n\tscreen_puts(vers, row, col, 0);\n}\n\n/*\n * \":intro\": clear screen, display intro screen and wait for return.\n */\n    void\nex_intro(exarg_T *eap UNUSED)\n{\n    screenclear();\n    intro_message(TRUE);\n    wait_return(TRUE);\n}\n"], "filenames": ["runtime/autoload/gzip.vim", "runtime/autoload/zip.vim", "runtime/ftplugin/perl.vim", "runtime/ftplugin/ruby.vim", "runtime/ftplugin/zig.vim", "src/version.c"], "buggy_code_start_loc": [12, 59, 57, 102, 42, 701], "buggy_code_end_loc": [19, 59, 58, 137, 43, 701], "fixing_code_start_loc": [13, 60, 57, 102, 42, 702], "fixing_code_end_loc": [24, 64, 59, 147, 45, 704], "type": "CWE-426", "message": "Untrusted Search Path in GitHub repository vim/vim prior to 9.0.1833.", "other": {"cve": {"id": "CVE-2023-4736", "sourceIdentifier": "security@huntr.dev", "published": "2023-09-02T19:15:44.863", "lastModified": "2023-12-22T18:09:33.707", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Untrusted Search Path in GitHub repository vim/vim prior to 9.0.1833."}, {"lang": "es", "value": "Ruta de b\u00fasqueda no fiable en el repositorio de GitHub vim/vim anterior a la versi\u00f3n 9.0.1833."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-426"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:vim:vim:*:*:*:*:*:*:*:*", "versionEndExcluding": "9.0.1833", "matchCriteriaId": "399AF224-8577-4DA7-BA29-B946D95E35F8"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:apple:macos:14.0:*:*:*:*:*:*:*", "matchCriteriaId": "9FE27DF1-3AF9-4BE4-8541-565FE5BC16A2"}]}]}], "references": [{"url": "http://seclists.org/fulldisclosure/2023/Oct/24", "source": "security@huntr.dev", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/vim/vim/commit/816fbcc262687b81fc46f82f7bbeb1453addfe0c", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/e1ce0995-4df4-4dec-9cd7-3136ac3e8e71", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://support.apple.com/kb/HT213984", "source": "security@huntr.dev", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/vim/vim/commit/816fbcc262687b81fc46f82f7bbeb1453addfe0c"}}