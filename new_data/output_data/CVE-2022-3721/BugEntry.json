{"buggy_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2003-2009 the SysCP Team (see authors).\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * For the full copyright and license information, please view the COPYING\n * file that was distributed with this source code. You can also view the\n * COPYING file online at http://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  (c) the authors\n * @author     Florian Lippert <flo@syscp.org> (2003-2009)\n * @author     Froxlor team <team@froxlor.org> (2010-)\n * @license    GPLv2 http://files.froxlor.org/misc/COPYING.txt\n * @package    Panel\n *\n */\ndefine('AREA', 'login');\nrequire './lib/init.php';\n\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Settings;\nuse Froxlor\\FroxlorLogger;\n\nif ($action == '') {\n\t$action = 'login';\n}\n\nif (session_status() == PHP_SESSION_NONE) {\n\tini_set(\"session.name\", \"s\");\n\tini_set(\"url_rewriter.tags\", \"\");\n\tini_set(\"session.use_cookies\", false);\n\tini_set(\"session.cookie_httponly\", true);\n\tini_set(\"session.cookie_secure\", $is_ssl);\n\tsession_id('login');\n\tsession_start();\n}\n\nif ($action == '2fa_entercode') {\n\t// page for entering the 2FA code after successful login\n\tif (! isset($_SESSION) || ! isset($_SESSION['secret_2fa'])) {\n\t\t// no session - redirect to index\n\t\t\\Froxlor\\UI\\Response::redirectTo('index.php');\n\t\texit();\n\t}\n\t// show template to enter code\n\teval(\"echo \\\"\" . \\Froxlor\\UI\\Template::getTemplate('2fa/entercode', true) . \"\\\";\");\n} elseif ($action == '2fa_verify') {\n\t// verify code from 2fa code-enter form\n\tif (! isset($_SESSION) || ! isset($_SESSION['secret_2fa'])) {\n\t\t// no session - redirect to index\n\t\t\\Froxlor\\UI\\Response::redirectTo('index.php');\n\t\texit();\n\t}\n\t$code = isset($_POST['2fa_code']) ? $_POST['2fa_code'] : null;\n\t// verify entered code\n\t$tfa = new \\Froxlor\\FroxlorTwoFactorAuth('Froxlor');\n\t$result = ($_SESSION['secret_2fa'] == 'email' ? true : $tfa->verifyCode($_SESSION['secret_2fa'], $code, 3));\n\t// either the code is valid when using authenticator-app, or we will select userdata by id and entered code\n\t// which is temporarily stored for the customer when using email-2fa\n\tif ($result) {\n\t\t// get user-data\n\t\t$table = $_SESSION['uidtable_2fa'];\n\t\t$field = $_SESSION['uidfield_2fa'];\n\t\t$uid = $_SESSION['uid_2fa'];\n\t\t$isadmin = $_SESSION['unfo_2fa'];\n\t\t$sel_param = array(\n\t\t\t'uid' => $uid\n\t\t);\n\t\tif ($_SESSION['secret_2fa'] == 'email') {\n\t\t\t// verify code by selecting user by id and the temp. stored code,\n\t\t\t// so only if it's the correct code, we get the user-data\n\t\t\t$sel_stmt = Database::prepare(\"SELECT * FROM $table WHERE `\" . $field . \"` = :uid AND `data_2fa` = :code\");\n\t\t\t$sel_param['code'] = $code;\n\t\t} else {\n\t\t\t// Authenticator-verification has already happened at this point, so just get the user-data\n\t\t\t$sel_stmt = Database::prepare(\"SELECT * FROM $table WHERE `\" . $field . \"` = :uid\");\n\t\t}\n\t\t$userinfo = Database::pexecute_first($sel_stmt, $sel_param);\n\t\t// whoops, no (valid) user? Start again\n\t\tif (empty($userinfo)) {\n\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t'showmessage' => '2'\n\t\t\t));\n\t\t}\n\t\t// set fields in $userinfo required for finishLogin()\n\t\t$userinfo['adminsession'] = $isadmin;\n\t\t$userinfo['userid'] = $uid;\n\n\t\t// if not successful somehow - start again\n\t\tif (! finishLogin($userinfo)) {\n\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t'showmessage' => '2'\n\t\t\t));\n\t\t}\n\n\t\t// when using email-2fa, remove the one-time-code\n\t\tif ($userinfo['type_2fa'] == '1') {\n\t\t\t$del_stmt = Database::prepare(\"UPDATE $table SET `data_2fa` = '' WHERE `\" . $field . \"` = :uid\");\n\t\t\t$userinfo = Database::pexecute_first($del_stmt, array(\n\t\t\t\t'uid' => $uid\n\t\t\t));\n\t\t}\n\t\texit();\n\t}\n\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t'showmessage' => '2'\n\t));\n\texit();\n} elseif ($action == 'login') {\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$loginname = \\Froxlor\\Validate\\Validate::validate($_POST['loginname'], 'loginname');\n\t\t$password = \\Froxlor\\Validate\\Validate::validate($_POST['password'], 'password');\n\n\t\t$stmt = Database::prepare(\"SELECT `loginname` AS `customer` FROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\tWHERE `loginname`= :loginname\");\n\t\tDatabase::pexecute($stmt, array(\n\t\t\t\"loginname\" => $loginname\n\t\t));\n\t\t$row = $stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\tif ($row && $row['customer'] == $loginname) {\n\t\t\t$table = \"`\" . TABLE_PANEL_CUSTOMERS . \"`\";\n\t\t\t$uid = 'customerid';\n\t\t\t$adminsession = '0';\n\t\t\t$is_admin = false;\n\t\t} else {\n\t\t\t$is_admin = true;\n\t\t\tif ((int) Settings::Get('login.domain_login') == 1) {\n\t\t\t\t$domainname = $idna_convert->encode(preg_replace(array(\n\t\t\t\t\t'/\\:(\\d)+$/',\n\t\t\t\t\t'/^https?\\:\\/\\//'\n\t\t\t\t), '', $loginname));\n\t\t\t\t$stmt = Database::prepare(\"SELECT `customerid` FROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\t\t\tWHERE `domain` = :domain\");\n\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t\"domain\" => $domainname\n\t\t\t\t));\n\t\t\t\t$row2 = $stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\t\t\tif (isset($row2['customerid']) && $row2['customerid'] > 0) {\n\t\t\t\t\t$loginname = \\Froxlor\\Customer\\Customer::getCustomerDetail($row2['customerid'], 'loginname');\n\t\t\t\t\tif ($loginname !== false) {\n\t\t\t\t\t\t$stmt = Database::prepare(\"SELECT `loginname` AS `customer` FROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\t\t\t\tWHERE `loginname`= :loginname\");\n\t\t\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t\t\t\"loginname\" => $loginname\n\t\t\t\t\t\t));\n\t\t\t\t\t\t$row3 = $stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\t\t\tif ($row3 && $row3['customer'] == $loginname) {\n\t\t\t\t\t\t\t$table = \"`\" . TABLE_PANEL_CUSTOMERS . \"`\";\n\t\t\t\t\t\t\t$uid = 'customerid';\n\t\t\t\t\t\t\t$adminsession = '0';\n\t\t\t\t\t\t\t$is_admin = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ((\\Froxlor\\Froxlor::hasUpdates() || \\Froxlor\\Froxlor::hasDbUpdates()) && $is_admin == false) {\n\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php');\n\t\t\texit();\n\t\t}\n\n\t\tif ($is_admin) {\n\t\t\tif (\\Froxlor\\Froxlor::hasUpdates() || \\Froxlor\\Froxlor::hasDbUpdates()) {\n\t\t\t\t$stmt = Database::prepare(\"SELECT `loginname` AS `admin` FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\t\tWHERE `loginname`= :loginname\n\t\t\t\t\tAND `change_serversettings` = '1'\");\n\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t\"loginname\" => $loginname\n\t\t\t\t));\n\t\t\t\t$row = $stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\tif (! isset($row['admin'])) {\n\t\t\t\t\t// not an admin who can see updates\n\t\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php');\n\t\t\t\t\texit();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$stmt = Database::prepare(\"SELECT `loginname` AS `admin` FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\t\tWHERE `loginname`= :loginname\");\n\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t\"loginname\" => $loginname\n\t\t\t\t));\n\t\t\t\t$row = $stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t}\n\n\t\t\tif ($row && $row['admin'] == $loginname) {\n\t\t\t\t$table = \"`\" . TABLE_PANEL_ADMINS . \"`\";\n\t\t\t\t$uid = 'adminid';\n\t\t\t\t$adminsession = '1';\n\t\t\t} else {\n\t\t\t\t// Log failed login\n\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf(array(\n\t\t\t\t\t'loginname' => $_SERVER['REMOTE_ADDR']\n\t\t\t\t));\n\t\t\t\t$rstlog->logAction(\\Froxlor\\FroxlorLogger::LOGIN_ACTION, LOG_WARNING, \"Unknown user '\" . $loginname . \"' tried to login.\");\n\n\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t\t'showmessage' => '2'\n\t\t\t\t));\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\t$userinfo_stmt = Database::prepare(\"SELECT * FROM $table\n\t\t\tWHERE `loginname`= :loginname\");\n\t\tDatabase::pexecute($userinfo_stmt, array(\n\t\t\t\"loginname\" => $loginname\n\t\t));\n\t\t$userinfo = $userinfo_stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\tif ($userinfo['loginfail_count'] >= Settings::Get('login.maxloginattempts') && $userinfo['lastlogin_fail'] > (time() - Settings::Get('login.deactivatetime'))) {\n\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t'showmessage' => '3'\n\t\t\t));\n\t\t\texit();\n\t\t} elseif (\\Froxlor\\System\\Crypt::validatePasswordLogin($userinfo, $password, $table, $uid)) {\n\t\t\t// only show \"you're banned\" if the login was successful\n\t\t\t// because we don't want to publish that the user does exist\n\t\t\tif ($userinfo['deactivated']) {\n\t\t\t\tunset($userinfo);\n\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t\t'showmessage' => '5'\n\t\t\t\t));\n\t\t\t\texit();\n\t\t\t} else {\n\t\t\t\t// login correct\n\t\t\t\t// reset loginfail_counter, set lastlogin_succ\n\t\t\t\t$stmt = Database::prepare(\"UPDATE $table\n\t\t              SET `lastlogin_succ`= :lastlogin_succ, `loginfail_count`='0'\n\t\t              WHERE `$uid`= :uid\");\n\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t\"lastlogin_succ\" => time(),\n\t\t\t\t\t\"uid\" => $userinfo[$uid]\n\t\t\t\t));\n\t\t\t\t$userinfo['userid'] = $userinfo[$uid];\n\t\t\t\t$userinfo['adminsession'] = $adminsession;\n\t\t\t}\n\t\t} else {\n\t\t\t// login incorrect\n\t\t\t$stmt = Database::prepare(\"UPDATE $table\n\t\t\t\tSET `lastlogin_fail`= :lastlogin_fail, `loginfail_count`=`loginfail_count`+1\n\t\t\t\tWHERE `$uid`= :uid\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\"lastlogin_fail\" => time(),\n\t\t\t\t\"uid\" => $userinfo[$uid]\n\t\t\t));\n\n\t\t\t// Log failed login\n\t\t\t$rstlog = FroxlorLogger::getInstanceOf(array(\n\t\t\t\t'loginname' => $_SERVER['REMOTE_ADDR']\n\t\t\t));\n\t\t\t$rstlog->logAction(\\Froxlor\\FroxlorLogger::LOGIN_ACTION, LOG_WARNING, \"User '\" . $loginname . \"' tried to login with wrong password.\");\n\n\t\t\tunset($userinfo);\n\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t'showmessage' => '2'\n\t\t\t));\n\t\t\texit();\n\t\t}\n\n\t\t// 2FA activated\n\t\tif (Settings::Get('2fa.enabled') == '1' && $userinfo['type_2fa'] > 0) {\n\t\t\t// redirect to code-enter-page\n\t\t\t$_SESSION['secret_2fa'] = ($userinfo['type_2fa'] == 2 ? $userinfo['data_2fa'] : 'email');\n\t\t\t$_SESSION['uid_2fa'] = $userinfo[$uid];\n\t\t\t$_SESSION['uidfield_2fa'] = $uid;\n\t\t\t$_SESSION['uidtable_2fa'] = $table;\n\t\t\t$_SESSION['unfo_2fa'] = $is_admin;\n\t\t\t// send mail if type_2fa = 1 (email)\n\t\t\tif ($userinfo['type_2fa'] == 1) {\n\t\t\t\t// generate code\n\t\t\t\t$tfa = new \\Froxlor\\FroxlorTwoFactorAuth('Froxlor');\n\t\t\t\t$code = $tfa->getCode($tfa->createSecret());\n\t\t\t\t// set code for user\n\t\t\t\t$stmt = Database::prepare(\"UPDATE $table SET `data_2fa` = :d2fa WHERE `$uid` = :uid\");\n\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t\"d2fa\" => $code,\n\t\t\t\t\t\"uid\" => $userinfo[$uid]\n\t\t\t\t));\n\t\t\t\t// build up & send email\n\t\t\t\t$_mailerror = false;\n\t\t\t\t$mailerr_msg = \"\";\n\t\t\t\t$replace_arr = array(\n\t\t\t\t\t'CODE' => $code\n\t\t\t\t);\n\t\t\t\t$mail_body = html_entity_decode(\\Froxlor\\PhpHelper::replaceVariables($lng['mails']['2fa']['mailbody'], $replace_arr));\n\n\t\t\t\ttry {\n\t\t\t\t\t$mail->Subject = $lng['mails']['2fa']['subject'];\n\t\t\t\t\t$mail->AltBody = $mail_body;\n\t\t\t\t\t$mail->MsgHTML(str_replace(\"\\n\", \"<br />\", $mail_body));\n\t\t\t\t\t$mail->AddAddress($userinfo['email'], \\Froxlor\\User::getCorrectUserSalutation($userinfo));\n\t\t\t\t\t$mail->Send();\n\t\t\t\t} catch (\\PHPMailer\\PHPMailer\\Exception $e) {\n\t\t\t\t\t$mailerr_msg = $e->errorMessage();\n\t\t\t\t\t$_mailerror = true;\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t$mailerr_msg = $e->getMessage();\n\t\t\t\t\t$_mailerror = true;\n\t\t\t\t}\n\n\t\t\t\tif ($_mailerror) {\n\t\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf(array(\n\t\t\t\t\t\t'loginname' => '2fa code-sending'\n\t\t\t\t\t));\n\t\t\t\t\t$rstlog->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_ERR, \"Error sending mail: \" . $mailerr_msg);\n\t\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t\t\t'showmessage' => '4',\n\t\t\t\t\t\t'customermail' => $userinfo['email']\n\t\t\t\t\t));\n\t\t\t\t\texit();\n\t\t\t\t}\n\n\t\t\t\t$mail->ClearAddresses();\n\t\t\t}\n\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t'action' => '2fa_entercode'\n\t\t\t));\n\t\t\texit();\n\t\t}\n\n\t\tif (! finishLogin($userinfo)) {\n\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t'showmessage' => '2'\n\t\t\t));\n\t\t}\n\t\texit();\n\t} else {\n\t\t$language_options = '';\n\t\t$language_options .= \\Froxlor\\UI\\HTML::makeoption($lng['login']['profile_lng'], 'profile', 'profile', true, true);\n\n\t\tforeach ($languages as $language_file => $language_name) {\n\t\t\t$language_options .= \\Froxlor\\UI\\HTML::makeoption($language_name, $language_file, 'profile', true);\n\t\t}\n\n\t\t$smessage = isset($_GET['showmessage']) ? (int) $_GET['showmessage'] : 0;\n\t\t$message = '';\n\t\t$successmessage = '';\n\n\t\tswitch ($smessage) {\n\t\t\tcase 1:\n\t\t\t\t$successmessage = $lng['pwdreminder']['success'];\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t$message = $lng['error']['login'];\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t$message = sprintf($lng['error']['login_blocked'], Settings::Get('login.deactivatetime'));\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t$cmail = isset($_GET['customermail']) ? $_GET['customermail'] : 'unknown';\n\t\t\t\t$message = str_replace('%s', $cmail, $lng['error']['errorsendingmail']);\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\t$message = $lng['error']['user_banned'];\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\t$successmessage = $lng['pwdreminder']['changed'];\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\t$message = $lng['pwdreminder']['wrongcode'];\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\t$message = $lng['pwdreminder']['notallowed'];\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$update_in_progress = '';\n\t\tif (\\Froxlor\\Froxlor::hasUpdates() || \\Froxlor\\Froxlor::hasDbUpdates()) {\n\t\t\t$update_in_progress = $lng['update']['updateinprogress_onlyadmincanlogin'];\n\t\t}\n\n\t\t// Pass the last used page if needed\n\t\t$lastscript = \"\";\n\t\tif (isset($_REQUEST['script']) && $_REQUEST['script'] != \"\") {\n\t\t\t$lastscript = $_REQUEST['script'];\n\t\t\t$lastscript = str_replace(\"..\", \"\", $lastscript);\n\t\t\t$lastscript = htmlspecialchars($lastscript, ENT_QUOTES);\n\n\t\t\tif (! file_exists(__DIR__ . \"/\" . $lastscript)) {\n\t\t\t\t$lastscript = \"\";\n\t\t\t}\n\t\t}\n\t\t$lastqrystr = \"\";\n\t\tif (isset($_REQUEST['qrystr']) && $_REQUEST['qrystr'] != \"\") {\n\t\t\t$lastqrystr = htmlspecialchars($_REQUEST['qrystr'], ENT_QUOTES);\n\t\t}\n\n\t\teval(\"echo \\\"\" . \\Froxlor\\UI\\Template::getTemplate('login') . \"\\\";\");\n\t}\n}\n\nif ($action == 'forgotpwd') {\n\t$adminchecked = false;\n\t$message = '';\n\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$loginname = \\Froxlor\\Validate\\Validate::validate($_POST['loginname'], 'loginname');\n\t\t$email = \\Froxlor\\Validate\\Validate::validateEmail($_POST['loginemail'], 'email');\n\t\t$result_stmt = Database::prepare(\"SELECT `adminid`, `customerid`, `customernumber`, `firstname`, `name`, `company`, `email`, `loginname`, `def_language`, `deactivated` FROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\tWHERE `loginname`= :loginname\n\t\t\tAND `email`= :email\");\n\t\tDatabase::pexecute($result_stmt, array(\n\t\t\t\"loginname\" => $loginname,\n\t\t\t\"email\" => $email\n\t\t));\n\n\t\tif (Database::num_rows() == 0) {\n\t\t\t$result_stmt = Database::prepare(\"SELECT `adminid`, `name`, `email`, `loginname`, `def_language`, `deactivated` FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\tWHERE `loginname`= :loginname\n\t\t\t\tAND `email`= :email\");\n\t\t\tDatabase::pexecute($result_stmt, array(\n\t\t\t\t\"loginname\" => $loginname,\n\t\t\t\t\"email\" => $email\n\t\t\t));\n\n\t\t\tif (Database::num_rows() > 0) {\n\t\t\t\t$adminchecked = true;\n\t\t\t} else {\n\t\t\t\t$result_stmt = null;\n\t\t\t}\n\t\t}\n\n\t\tif ($result_stmt !== null) {\n\t\t\t$user = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\t\t/* Check whether user is banned */\n\t\t\tif ($user['deactivated']) {\n\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t\t'showmessage' => '8'\n\t\t\t\t));\n\t\t\t\texit();\n\t\t\t}\n\n\t\t\tif (($adminchecked && Settings::Get('panel.allow_preset_admin') == '1') || $adminchecked == false) {\n\t\t\t\tif ($user !== false) {\n\t\t\t\t\t// build a activation code\n\t\t\t\t\t$timestamp = time();\n\t\t\t\t\t$first = substr(md5($user['loginname'] . $timestamp . \\Froxlor\\PhpHelper::randomStr(16)), 0, 15);\n\t\t\t\t\t$third = substr(md5($user['email'] . $timestamp . \\Froxlor\\PhpHelper::randomStr(16)), - 15);\n\t\t\t\t\t$activationcode = $first . $timestamp . $third . substr(md5($third . $timestamp), 0, 10);\n\n\t\t\t\t\t// Drop all existing activation codes for this user\n\t\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_ACTIVATION . \"`\n\t\t\t\t\t\tWHERE `userid` = :userid\n\t\t\t\t\t\tAND `admin` = :admin\");\n\t\t\t\t\t$params = array(\n\t\t\t\t\t\t\"userid\" => $adminchecked ? $user['adminid'] : $user['customerid'],\n\t\t\t\t\t\t\"admin\" => $adminchecked ? 1 : 0\n\t\t\t\t\t);\n\t\t\t\t\tDatabase::pexecute($stmt, $params);\n\n\t\t\t\t\t// Add new activation code to database\n\t\t\t\t\t$stmt = Database::prepare(\"INSERT INTO `\" . TABLE_PANEL_ACTIVATION . \"`\n\t\t\t\t\t\t(userid, admin, creation, activationcode)\n\t\t\t\t\t\tVALUES (:userid, :admin, :creation, :activationcode)\");\n\t\t\t\t\t$params = array(\n\t\t\t\t\t\t\"userid\" => $adminchecked ? $user['adminid'] : $user['customerid'],\n\t\t\t\t\t\t\"admin\" => $adminchecked ? 1 : 0,\n\t\t\t\t\t\t\"creation\" => $timestamp,\n\t\t\t\t\t\t\"activationcode\" => $activationcode\n\t\t\t\t\t);\n\t\t\t\t\tDatabase::pexecute($stmt, $params);\n\n\t\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf(array(\n\t\t\t\t\t\t'loginname' => 'password_reset'\n\t\t\t\t\t));\n\t\t\t\t\t$rstlog->logAction(\\Froxlor\\FroxlorLogger::USR_ACTION, LOG_WARNING, \"User '\" . $user['loginname'] . \"' requested a link for setting a new password.\");\n\n\t\t\t\t\t// Set together our activation link\n\t\t\t\t\t$protocol = empty($_SERVER['HTTPS']) ? 'http' : 'https';\n\t\t\t\t\t// this can be a fixed value to avoid potential exploiting by modifying headers\n\t\t\t\t\t$host = Settings::Get('system.hostname'); // $_SERVER['HTTP_HOST'];\n\t\t\t\t\t$port = $_SERVER['SERVER_PORT'] != 80 ? ':' . $_SERVER['SERVER_PORT'] : '';\n\t\t\t\t\t// don't add :443 when https is used, as it is default (and just looks weird!)\n\t\t\t\t\tif ($protocol == 'https' && $_SERVER['SERVER_PORT'] == '443') {\n\t\t\t\t\t\t$port = '';\n\t\t\t\t\t}\n\t\t\t\t\t// there can be only one script to handle this so we can use a fixed value here\n\t\t\t\t\t$script = \"/index.php\"; // $_SERVER['SCRIPT_NAME'];\n\t\t\t\t\tif (Settings::Get('system.froxlordirectlyviahostname') == 0) {\n\t\t\t\t\t\t$script = \\Froxlor\\FileDir::makeCorrectFile(\"/\" . basename(__DIR__) . \"/\" . $script);\n\t\t\t\t\t}\n\t\t\t\t\t$activationlink = $protocol . '://' . $host . $port . $script . '?action=resetpwd&resetcode=' . $activationcode;\n\n\t\t\t\t\t$replace_arr = array(\n\t\t\t\t\t\t'SALUTATION' => \\Froxlor\\User::getCorrectUserSalutation($user),\n\t\t\t\t\t\t'NAME' => $user['name'],\n\t\t\t\t\t\t'FIRSTNAME' => $user['firstname'] ?? \"\",\n\t\t\t\t\t\t'COMPANY' => $user['company'] ?? \"\",\n\t\t\t\t\t\t'CUSTOMER_NO' => $user['customernumber'] ?? 0,\n\t\t\t\t\t\t'USERNAME' => $loginname,\n\t\t\t\t\t\t'LINK' => $activationlink\n\t\t\t\t\t);\n\n\t\t\t\t\t$def_language = ($user['def_language'] != '') ? $user['def_language'] : Settings::Get('panel.standardlanguage');\n\t\t\t\t\t$result_stmt = Database::prepare('SELECT `value` FROM `' . TABLE_PANEL_TEMPLATES . '`\n\t\t\t\t\t\tWHERE `adminid`= :adminid\n\t\t\t\t\t\tAND `language`= :lang\n\t\t\t\t\t\tAND `templategroup`=\\'mails\\'\n\t\t\t\t\t\tAND `varname`=\\'password_reset_subject\\'');\n\t\t\t\t\tDatabase::pexecute($result_stmt, array(\n\t\t\t\t\t\t\"adminid\" => $user['adminid'],\n\t\t\t\t\t\t\"lang\" => $def_language\n\t\t\t\t\t));\n\t\t\t\t\t$result = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\t\t$mail_subject = html_entity_decode(\\Froxlor\\PhpHelper::replaceVariables((($result['value'] != '') ? $result['value'] : $lng['mails']['password_reset']['subject']), $replace_arr));\n\n\t\t\t\t\t$result_stmt = Database::prepare('SELECT `value` FROM `' . TABLE_PANEL_TEMPLATES . '`\n\t\t\t\t\t\tWHERE `adminid`= :adminid\n\t\t\t\t\t\tAND `language`= :lang\n\t\t\t\t\t\tAND `templategroup`=\\'mails\\'\n\t\t\t\t\t\tAND `varname`=\\'password_reset_mailbody\\'');\n\t\t\t\t\tDatabase::pexecute($result_stmt, array(\n\t\t\t\t\t\t\"adminid\" => $user['adminid'],\n\t\t\t\t\t\t\"lang\" => $def_language\n\t\t\t\t\t));\n\t\t\t\t\t$result = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\t\t$mail_body = html_entity_decode(\\Froxlor\\PhpHelper::replaceVariables((($result['value'] != '') ? $result['value'] : $lng['mails']['password_reset']['mailbody']), $replace_arr));\n\n\t\t\t\t\t$_mailerror = false;\n\t\t\t\t\t$mailerr_msg = \"\";\n\t\t\t\t\ttry {\n\t\t\t\t\t\t$mail->Subject = $mail_subject;\n\t\t\t\t\t\t$mail->AltBody = $mail_body;\n\t\t\t\t\t\t$mail->MsgHTML(str_replace(\"\\n\", \"<br />\", $mail_body));\n\t\t\t\t\t\t$mail->AddAddress($user['email'], \\Froxlor\\User::getCorrectUserSalutation($user));\n\t\t\t\t\t\t$mail->Send();\n\t\t\t\t\t} catch (\\PHPMailer\\PHPMailer\\Exception $e) {\n\t\t\t\t\t\t$mailerr_msg = $e->errorMessage();\n\t\t\t\t\t\t$_mailerror = true;\n\t\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t\t$mailerr_msg = $e->getMessage();\n\t\t\t\t\t\t$_mailerror = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($_mailerror) {\n\t\t\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf(array(\n\t\t\t\t\t\t\t'loginname' => 'password_reset'\n\t\t\t\t\t\t));\n\t\t\t\t\t\t$rstlog->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_ERR, \"Error sending mail: \" . $mailerr_msg);\n\t\t\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t\t\t\t'showmessage' => '4',\n\t\t\t\t\t\t\t'customermail' => $user['email']\n\t\t\t\t\t\t));\n\t\t\t\t\t\texit();\n\t\t\t\t\t}\n\n\t\t\t\t\t$mail->ClearAddresses();\n\t\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t\t\t'showmessage' => '1'\n\t\t\t\t\t));\n\t\t\t\t\texit();\n\t\t\t\t} else {\n\t\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf(array(\n\t\t\t\t\t\t'loginname' => 'password_reset'\n\t\t\t\t\t));\n\t\t\t\t\t$rstlog->logAction(\\Froxlor\\FroxlorLogger::USR_ACTION, LOG_WARNING, \"User '\" . $loginname . \"' requested to set a new password, but was not found in database!\");\n\t\t\t\t\t$message = $lng['login']['combination_not_found'];\n\t\t\t\t}\n\n\t\t\t\tunset($user);\n\t\t\t}\n\t\t} else {\n\t\t\t$message = $lng['login']['usernotfound'];\n\t\t}\n\t}\n\n\tif ($adminchecked) {\n\t\tif (Settings::Get('panel.allow_preset_admin') != '1') {\n\t\t\t$message = $lng['pwdreminder']['notallowed'];\n\t\t\tunset($adminchecked);\n\t\t}\n\t} else {\n\t\tif (Settings::Get('panel.allow_preset') != '1') {\n\t\t\t$message = $lng['pwdreminder']['notallowed'];\n\t\t}\n\t}\n\n\teval(\"echo \\\"\" . \\Froxlor\\UI\\Template::getTemplate('fpwd') . \"\\\";\");\n}\n\nif ($action == 'resetpwd') {\n\t$message = '';\n\n\t// Remove old activation codes\n\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_ACTIVATION . \"`\n\t\tWHERE creation < :oldest\");\n\tDatabase::pexecute($stmt, array(\n\t\t\"oldest\" => time() - 86400\n\t));\n\n\tif (isset($_GET['resetcode']) && strlen($_GET['resetcode']) == 50) {\n\t\t// Check if activation code is valid\n\t\t$activationcode = $_GET['resetcode'];\n\t\t$timestamp = substr($activationcode, 15, 10);\n\t\t$third = substr($activationcode, 25, 15);\n\t\t$check = substr($activationcode, 40, 10);\n\n\t\tif (substr(md5($third . $timestamp), 0, 10) == $check && $timestamp >= time() - 86400) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\t$stmt = Database::prepare(\"SELECT `userid`, `admin` FROM `\" . TABLE_PANEL_ACTIVATION . \"`\n\t\t\t\t\tWHERE `activationcode` = :activationcode\");\n\t\t\t\t$result = Database::pexecute_first($stmt, array(\n\t\t\t\t\t\"activationcode\" => $activationcode\n\t\t\t\t));\n\n\t\t\t\tif ($result !== false) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t$new_password = \\Froxlor\\System\\Crypt::validatePassword($_POST['new_password'], true);\n\t\t\t\t\t\t$new_password_confirm = \\Froxlor\\System\\Crypt::validatePassword($_POST['new_password_confirm'], true);\n\t\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t\t$message = $e->getMessage();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (empty($message) && (empty($new_password) || $new_password != $new_password_confirm)) {\n\t\t\t\t\t\t$message = $lng['error']['newpasswordconfirmerror'];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (empty($message)) {\n\t\t\t\t\t\t// Update user password\n\t\t\t\t\t\tif ($result['admin'] == 1) {\n\t\t\t\t\t\t\t$stmt = Database::prepare(\"UPDATE `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\t\t\t\t\tSET `password` = :newpassword\n\t\t\t\t\t\t\t\tWHERE `adminid` = :userid\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$stmt = Database::prepare(\"UPDATE `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\t\t\t\t\tSET `password` = :newpassword\n\t\t\t\t\t\t\t\tWHERE `customerid` = :userid\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t\t\t\"newpassword\" => \\Froxlor\\System\\Crypt::makeCryptPassword($new_password),\n\t\t\t\t\t\t\t\"userid\" => $result['userid']\n\t\t\t\t\t\t));\n\n\t\t\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf(array(\n\t\t\t\t\t\t\t'loginname' => 'password_reset'\n\t\t\t\t\t\t));\n\t\t\t\t\t\t$rstlog->logAction(\\Froxlor\\FroxlorLogger::USR_ACTION, LOG_NOTICE, \"changed password using password reset.\");\n\n\t\t\t\t\t\t// Remove activation code from DB\n\t\t\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_ACTIVATION . \"`\n\t\t\t\t\t\t\tWHERE `activationcode` = :activationcode\n\t\t\t\t\t\t\tAND `userid` = :userid\");\n\t\t\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t\t\t\"activationcode\" => $activationcode,\n\t\t\t\t\t\t\t\"userid\" => $result['userid']\n\t\t\t\t\t\t));\n\t\t\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t\t\t\t\"showmessage\" => '6'\n\t\t\t\t\t\t));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t\t\t\"showmessage\" => '7'\n\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\teval(\"echo \\\"\" . \\Froxlor\\UI\\Template::getTemplate('rpwd') . \"\\\";\");\n\t\t} else {\n\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t\"showmessage\" => '7'\n\t\t\t));\n\t\t}\n\t} else {\n\t\t\\Froxlor\\UI\\Response::redirectTo('index.php');\n\t}\n}\n\nfunction finishLogin($userinfo)\n{\n\tglobal $version, $dbversion, $remote_addr, $http_user_agent, $languages;\n\n\tif (isset($userinfo['userid']) && $userinfo['userid'] != '') {\n\t\t$s = \\Froxlor\\Froxlor::genSessionId();\n\n\t\tif (isset($_POST['language'])) {\n\t\t\t$language = \\Froxlor\\Validate\\Validate::validate($_POST['language'], 'language');\n\t\t\tif ($language == 'profile') {\n\t\t\t\t$language = $userinfo['def_language'];\n\t\t\t} elseif (! isset($languages[$language])) {\n\t\t\t\t$language = Settings::Get('panel.standardlanguage');\n\t\t\t}\n\t\t} else {\n\t\t\t$language = Settings::Get('panel.standardlanguage');\n\t\t}\n\n\t\tif (isset($userinfo['theme']) && $userinfo['theme'] != '') {\n\t\t\t$theme = $userinfo['theme'];\n\t\t} else {\n\t\t\t$theme = Settings::Get('panel.default_theme');\n\t\t}\n\n\t\tif (Settings::Get('session.allow_multiple_login') != '1') {\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_SESSIONS . \"`\n\t\t\t\t\tWHERE `userid` = :uid\n\t\t\t\t\tAND `adminsession` = :adminsession\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\"uid\" => $userinfo['userid'],\n\t\t\t\t\"adminsession\" => $userinfo['adminsession']\n\t\t\t));\n\t\t}\n\n\t\t// check for field 'theme' in session-table, refs #607\n\t\t// Changed with #1287 to new method\n\t\t$stmt = Database::query(\"SHOW COLUMNS FROM panel_sessions LIKE 'theme'\");\n\t\twhile ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\tif ($row['Field'] == \"theme\") {\n\t\t\t\t$has_theme = true;\n\t\t\t}\n\t\t}\n\n\t\t$params = array(\n\t\t\t\"hash\" => $s,\n\t\t\t\"userid\" => $userinfo['userid'],\n\t\t\t\"ipaddress\" => $remote_addr,\n\t\t\t\"useragent\" => $http_user_agent,\n\t\t\t\"lastactivity\" => time(),\n\t\t\t\"language\" => $language,\n\t\t\t\"adminsession\" => $userinfo['adminsession']\n\t\t);\n\n\t\tif ($has_theme) {\n\t\t\t$params[\"theme\"] = $theme;\n\t\t\t$stmt = Database::prepare(\"INSERT INTO `\" . TABLE_PANEL_SESSIONS . \"`\n\t\t\t\t\t(`hash`, `userid`, `ipaddress`, `useragent`, `lastactivity`, `language`, `adminsession`, `theme`)\n\t\t\t\t\tVALUES (:hash, :userid, :ipaddress, :useragent, :lastactivity, :language, :adminsession, :theme)\");\n\t\t} else {\n\t\t\t$stmt = Database::prepare(\"INSERT INTO `\" . TABLE_PANEL_SESSIONS . \"`\n\t\t\t\t\t(`hash`, `userid`, `ipaddress`, `useragent`, `lastactivity`, `language`, `adminsession`)\n\t\t\t\t\tVALUES (:hash, :userid, :ipaddress, :useragent, :lastactivity, :language, :adminsession)\");\n\t\t}\n\t\tDatabase::pexecute($stmt, $params);\n\n\t\t$qryparams = array();\n\t\tif (isset($_POST['qrystr']) && $_POST['qrystr'] != \"\") {\n\t\t\tparse_str(urldecode($_POST['qrystr']), $qryparams);\n\t\t}\n\t\t$qryparams['s'] = $s;\n\n\t\tif ($userinfo['adminsession'] == '1') {\n\t\t\tif (\\Froxlor\\Froxlor::hasUpdates() || \\Froxlor\\Froxlor::hasDbUpdates()) {\n\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('admin_updates.php', array(\n\t\t\t\t\t's' => $s\n\t\t\t\t));\n\t\t\t} else {\n\t\t\t\tif (isset($_POST['script']) && $_POST['script'] != \"\") {\n\t\t\t\t\tif (preg_match(\"/customer\\_/\", $_POST['script']) === 1) {\n\t\t\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('admin_customers.php', array(\n\t\t\t\t\t\t\t\"page\" => \"customers\"\n\t\t\t\t\t\t));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\\Froxlor\\UI\\Response::redirectTo($_POST['script'], $qryparams);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('admin_index.php', $qryparams);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (isset($_POST['script']) && $_POST['script'] != \"\") {\n\t\t\t\t\\Froxlor\\UI\\Response::redirectTo($_POST['script'], $qryparams);\n\t\t\t} else {\n\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('customer_index.php', $qryparams);\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n", "<?php\nnamespace Froxlor\\Api\\Commands;\n\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Settings;\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * For the full copyright and license information, please view the COPYING\n * file that was distributed with this source code. You can also view the\n * COPYING file online at http://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright (c) the authors\n * @author Froxlor team <team@froxlor.org> (2010-)\n * @license GPLv2 http://files.froxlor.org/misc/COPYING.txt\n * @package API\n * @since 0.10.0\n *       \n */\nclass Admins extends \\Froxlor\\Api\\ApiCommand implements \\Froxlor\\Api\\ResourceEntity\n{\n\n\t/**\n\t * lists all admin entries\n\t *\n\t * @param array $sql_search\n\t *        \toptional array with index = fieldname, and value = array with 'op' => operator (one of <, > or =), LIKE is used if left empty and 'value' => searchvalue\n\t * @param int $sql_limit\n\t *        \toptional specify number of results to be returned\n\t * @param int $sql_offset\n\t *        \toptional specify offset for resultset\n\t * @param array $sql_orderby\n\t *        \toptional array with index = fieldname and value = ASC|DESC to order the resultset by one or more fields\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array count|list\n\t */\n\tpublic function listing()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] list admins\");\n\t\t\t$query_fields = array();\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT *\n\t\t\t\tFROM `\" . TABLE_PANEL_ADMINS . \"`\" . $this->getSearchWhere($query_fields) . $this->getOrderBy() . $this->getLimit());\n\t\t\tDatabase::pexecute($result_stmt, $query_fields, true, true);\n\t\t\t$result = array();\n\t\t\twhile ($row = $result_stmt->fetch(\\PDO::FETCH_ASSOC)) {\n\t\t\t\t$result[] = $row;\n\t\t\t}\n\t\t\treturn $this->response(200, \"successful\", array(\n\t\t\t\t'count' => count($result),\n\t\t\t\t'list' => $result\n\t\t\t));\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * returns the total number of admins for the given admin\n\t *\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function listingCount()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT COUNT(*) as num_admins\n\t\t\t\tFROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\");\n\t\t\t$result = Database::pexecute_first($result_stmt, null, true, true);\n\t\t\tif ($result) {\n\t\t\t\treturn $this->response(200, \"successful\", $result['num_admins']);\n\t\t\t}\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * return an admin entry by either id or loginname\n\t *\n\t * @param int $id\n\t *        \toptional, the admin-id\n\t * @param string $loginname\n\t *        \toptional, the loginname\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function get()\n\t{\n\t\t$id = $this->getParam('id', true, 0);\n\t\t$ln_optional = ($id <= 0 ? false : true);\n\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\tif ($this->isAdmin() && ($this->getUserDetail('change_serversettings') == 1 || ($this->getUserDetail('adminid') == $id || $this->getUserDetail('loginname') == $loginname))) {\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\tWHERE \" . ($id > 0 ? \"`adminid` = :idln\" : \"`loginname` = :idln\"));\n\t\t\t$params = array(\n\t\t\t\t'idln' => ($id <= 0 ? $loginname : $id)\n\t\t\t);\n\t\t\t$result = Database::pexecute_first($result_stmt, $params, true, true);\n\t\t\tif ($result) {\n\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] get admin '\" . $result['loginname'] . \"'\");\n\t\t\t\treturn $this->response(200, \"successful\", $result);\n\t\t\t}\n\t\t\t$key = ($id > 0 ? \"id #\" . $id : \"loginname '\" . $loginname . \"'\");\n\t\t\tthrow new \\Exception(\"Admin with \" . $key . \" could not be found\", 404);\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * create a new admin user\n\t *\n\t * @param string $name\n\t * @param string $email\n\t * @param string $new_loginname\n\t * @param string $admin_password\n\t *        \toptional, default auto-generated\n\t * @param string $def_language\n\t *        \toptional, default is system-default language\n\t * @param bool $api_allowed\n\t *        \toptional, default is true if system setting api.enabled is true, else false\n\t * @param string $custom_notes\n\t *        \toptional, default empty\n\t * @param bool $custom_notes_show\n\t *        \toptional, default false\n\t * @param int $diskspace\n\t *        \toptional, default 0\n\t * @param bool $diskspace_ul\n\t *        \toptional, default false\n\t * @param int $traffic\n\t *        \toptional, default 0\n\t * @param bool $traffic_ul\n\t *        \toptional, default false\n\t * @param int $customers\n\t *        \toptional, default 0\n\t * @param bool $customers_ul\n\t *        \toptional, default false\n\t * @param int $domains\n\t *        \toptional, default 0\n\t * @param bool $domains_ul\n\t *        \toptional, default false\n\t * @param int $subdomains\n\t *        \toptional, default 0\n\t * @param bool $subdomains_ul\n\t *        \toptional, default false\n\t * @param int $emails\n\t *        \toptional, default 0\n\t * @param bool $emails_ul\n\t *        \toptional, default false\n\t * @param int $email_accounts\n\t *        \toptional, default 0\n\t * @param bool $email_accounts_ul\n\t *        \toptional, default false\n\t * @param int $email_forwarders\n\t *        \toptional, default 0\n\t * @param bool $email_forwarders_ul\n\t *        \toptional, default false\n\t * @param int $email_quota\n\t *        \toptional, default 0\n\t * @param bool $email_quota_ul\n\t *        \toptional, default false\n\t * @param int $ftps\n\t *        \toptional, default 0\n\t * @param bool $ftps_ul\n\t *        \toptional, default false\n\t * @param int $mysqls\n\t *        \toptional, default 0\n\t * @param bool $mysqls_ul\n\t *        \toptional, default false\n\t * @param bool $customers_see_all\n\t *        \toptional, default false\n\t * @param bool $domains_see_all\n\t *        \toptional, default false\n\t * @param bool $caneditphpsettings\n\t *        \toptional, default false\n\t * @param bool $change_serversettings\n\t *        \toptional, default false\n\t * @param array $ipaddress\n\t *        \toptional, list of ip-address id's; default -1 (all IP's)\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function add()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\n\t\t\t// required parameters\n\t\t\t$name = $this->getParam('name');\n\t\t\t$email = $this->getParam('email');\n\t\t\t$loginname = $this->getParam('new_loginname');\n\n\t\t\t// parameters\n\t\t\t$def_language = $this->getParam('def_language', true, Settings::Get('panel.standardlanguage'));\n\t\t\t$api_allowed = $this->getBoolParam('api_allowed', true, Settings::Get('api.enabled'));\n\t\t\t$custom_notes = $this->getParam('custom_notes', true, '');\n\t\t\t$custom_notes_show = $this->getBoolParam('custom_notes_show', true, 0);\n\t\t\t$password = $this->getParam('admin_password', true, '');\n\n\t\t\t$diskspace = $this->getUlParam('diskspace', 'diskspace_ul', true, 0);\n\t\t\t$traffic = $this->getUlParam('traffic', 'traffic_ul', true, 0);\n\t\t\t$customers = $this->getUlParam('customers', 'customers_ul', true, 0);\n\t\t\t$domains = $this->getUlParam('domains', 'domains_ul', true, 0);\n\t\t\t$subdomains = $this->getUlParam('subdomains', 'subdomains_ul', true, 0);\n\t\t\t$emails = $this->getUlParam('emails', 'emails_ul', true, 0);\n\t\t\t$email_accounts = $this->getUlParam('email_accounts', 'email_accounts_ul', true, 0);\n\t\t\t$email_forwarders = $this->getUlParam('email_forwarders', 'email_forwarders_ul', true, 0);\n\t\t\t$email_quota = $this->getUlParam('email_quota', 'email_quota_ul', true, 0);\n\t\t\t$ftps = $this->getUlParam('ftps', 'ftps_ul', true, 0);\n\t\t\t$mysqls = $this->getUlParam('mysqls', 'mysqls_ul', true, 0);\n\n\t\t\t$customers_see_all = $this->getBoolParam('customers_see_all', true, 0);\n\t\t\t$domains_see_all = $this->getBoolParam('domains_see_all', true, 0);\n\t\t\t$caneditphpsettings = $this->getBoolParam('caneditphpsettings', true, 0);\n\t\t\t$change_serversettings = $this->getBoolParam('change_serversettings', true, 0);\n\t\t\t$ipaddress = $this->getParam('ipaddress', true, - 1);\n\n\t\t\t// validation\n\t\t\t$name = \\Froxlor\\Validate\\Validate::validate($name, 'name', '', '', array(), true);\n\t\t\t$idna_convert = new \\Froxlor\\Idna\\IdnaWrapper();\n\t\t\t$email = $idna_convert->encode(\\Froxlor\\Validate\\Validate::validate($email, 'email', '', '', array(), true));\n\t\t\t$def_language = \\Froxlor\\Validate\\Validate::validate($def_language, 'default language', '', '', array(), true);\n\t\t\t$custom_notes = \\Froxlor\\Validate\\Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $custom_notes), 'custom_notes', \\Froxlor\\Validate\\Validate::REGEX_CONF_TEXT, '', array(), true);\n\n\t\t\tif (Settings::Get('system.mail_quota_enabled') != '1') {\n\t\t\t\t$email_quota = - 1;\n\t\t\t}\n\n\t\t\t$password = \\Froxlor\\Validate\\Validate::validate($password, 'password', '', '', array(), true);\n\t\t\t// only check if not empty,\n\t\t\t// cause empty == generate password automatically\n\t\t\tif ($password != '') {\n\t\t\t\t$password = \\Froxlor\\System\\Crypt::validatePassword($password, true);\n\t\t\t}\n\n\t\t\t$diskspace = $diskspace * 1024;\n\t\t\t$traffic = $traffic * 1024 * 1024;\n\n\t\t\t// Check if the account already exists\n\t\t\t// do not check via api as we skip any permission checks for this task\n\t\t\t$loginname_check_stmt = Database::prepare(\"\n\t\t\t\tSELECT `loginname` FROM `\" . TABLE_PANEL_CUSTOMERS . \"` WHERE `loginname` = :login\n\t\t\t\");\n\t\t\t$loginname_check = Database::pexecute_first($loginname_check_stmt, array(\n\t\t\t\t'login' => $loginname\n\t\t\t), true, true);\n\n\t\t\t// Check if an admin with the loginname already exists\n\t\t\t// do not check via api as we skip any permission checks for this task\n\t\t\t$loginname_check_admin_stmt = Database::prepare(\"\n\t\t\t\tSELECT `loginname` FROM `\" . TABLE_PANEL_ADMINS . \"` WHERE `loginname` = :login\n\t\t\t\");\n\t\t\t$loginname_check_admin = Database::pexecute_first($loginname_check_admin_stmt, array(\n\t\t\t\t'login' => $loginname\n\t\t\t), true, true);\n\n\t\t\tif (($loginname_check && strtolower($loginname_check['loginname']) == strtolower($loginname)) || ($loginname_check_admin && strtolower($loginname_check_admin['loginname']) == strtolower($loginname))) {\n\t\t\t\t\\Froxlor\\UI\\Response::standard_error('loginnameexists', $loginname, true);\n\t\t\t} elseif (preg_match('/^' . preg_quote(Settings::Get('customer.accountprefix'), '/') . '([0-9]+)/', $loginname)) {\n\t\t\t\t// Accounts which match systemaccounts are not allowed, filtering them\n\t\t\t\t\\Froxlor\\UI\\Response::standard_error('loginnameissystemaccount', Settings::Get('customer.accountprefix'), true);\n\t\t\t} elseif (! \\Froxlor\\Validate\\Validate::validateUsername($loginname)) {\n\t\t\t\t\\Froxlor\\UI\\Response::standard_error('loginnameiswrong', $loginname, true);\n\t\t\t} elseif (! \\Froxlor\\Validate\\Validate::validateEmail($email)) {\n\t\t\t\t\\Froxlor\\UI\\Response::standard_error('emailiswrong', $email, true);\n\t\t\t} else {\n\n\t\t\t\tif ($customers_see_all != '1') {\n\t\t\t\t\t$customers_see_all = '0';\n\t\t\t\t}\n\n\t\t\t\tif ($domains_see_all != '1') {\n\t\t\t\t\t$domains_see_all = '0';\n\t\t\t\t}\n\n\t\t\t\tif ($caneditphpsettings != '1') {\n\t\t\t\t\t$caneditphpsettings = '0';\n\t\t\t\t}\n\n\t\t\t\tif ($change_serversettings != '1') {\n\t\t\t\t\t$change_serversettings = '0';\n\t\t\t\t}\n\n\t\t\t\tif ($password == '') {\n\t\t\t\t\t$password = \\Froxlor\\System\\Crypt::generatePassword();\n\t\t\t\t}\n\n\t\t\t\t$_theme = Settings::Get('panel.default_theme');\n\n\t\t\t\t$ins_data = array(\n\t\t\t\t\t'loginname' => $loginname,\n\t\t\t\t\t'password' => \\Froxlor\\System\\Crypt::makeCryptPassword($password),\n\t\t\t\t\t'name' => $name,\n\t\t\t\t\t'email' => $email,\n\t\t\t\t\t'lang' => $def_language,\n\t\t\t\t\t'api_allowed' => $api_allowed,\n\t\t\t\t\t'change_serversettings' => $change_serversettings,\n\t\t\t\t\t'customers' => $customers,\n\t\t\t\t\t'customers_see_all' => $customers_see_all,\n\t\t\t\t\t'domains' => $domains,\n\t\t\t\t\t'domains_see_all' => $domains_see_all,\n\t\t\t\t\t'caneditphpsettings' => $caneditphpsettings,\n\t\t\t\t\t'diskspace' => $diskspace,\n\t\t\t\t\t'traffic' => $traffic,\n\t\t\t\t\t'subdomains' => $subdomains,\n\t\t\t\t\t'emails' => $emails,\n\t\t\t\t\t'accounts' => $email_accounts,\n\t\t\t\t\t'forwarders' => $email_forwarders,\n\t\t\t\t\t'quota' => $email_quota,\n\t\t\t\t\t'ftps' => $ftps,\n\t\t\t\t\t'mysqls' => $mysqls,\n\t\t\t\t\t'ip' => empty($ipaddress) ? \"\" : (is_array($ipaddress) && $ipaddress > 0 ? json_encode($ipaddress) : - 1),\n\t\t\t\t\t'theme' => $_theme,\n\t\t\t\t\t'custom_notes' => $custom_notes,\n\t\t\t\t\t'custom_notes_show' => $custom_notes_show\n\t\t\t\t);\n\n\t\t\t\t$ins_stmt = Database::prepare(\"\n\t\t\t\t\tINSERT INTO `\" . TABLE_PANEL_ADMINS . \"` SET\n\t\t\t\t\t`loginname` = :loginname,\n\t\t\t\t\t`password` = :password,\n\t\t\t\t\t`name` = :name,\n\t\t\t\t\t`email` = :email,\n\t\t\t\t\t`def_language` = :lang,\n\t\t\t\t\t`api_allowed` = :api_allowed,\n\t\t\t\t\t`change_serversettings` = :change_serversettings,\n\t\t\t\t\t`customers` = :customers,\n\t\t\t\t\t`customers_see_all` = :customers_see_all,\n\t\t\t\t\t`domains` = :domains,\n\t\t\t\t\t`domains_see_all` = :domains_see_all,\n\t\t\t\t\t`caneditphpsettings` = :caneditphpsettings,\n\t\t\t\t\t`diskspace` = :diskspace,\n\t\t\t\t\t`traffic` = :traffic,\n\t\t\t\t\t`subdomains` = :subdomains,\n\t\t\t\t\t`emails` = :emails,\n\t\t\t\t\t`email_accounts` = :accounts,\n\t\t\t\t\t`email_forwarders` = :forwarders,\n\t\t\t\t\t`email_quota` = :quota,\n\t\t\t\t\t`ftps` = :ftps,\n\t\t\t\t\t`mysqls` = :mysqls,\n\t\t\t\t\t`ip` = :ip,\n\t\t\t\t\t`theme` = :theme,\n\t\t\t\t\t`custom_notes` = :custom_notes,\n\t\t\t\t\t`custom_notes_show` = :custom_notes_show\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($ins_stmt, $ins_data, true, true);\n\n\t\t\t\t$adminid = Database::lastInsertId();\n\t\t\t\t$ins_data['adminid'] = $adminid;\n\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] added admin '\" . $loginname . \"'\");\n\n\t\t\t\t// get all admin-data for return-array\n\t\t\t\t$result = $this->apiCall('Admins.get', array(\n\t\t\t\t\t'id' => $adminid\n\t\t\t\t));\n\t\t\t\treturn $this->response(200, \"successful\", $result);\n\t\t\t}\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * update an admin user by given id or loginname\n\t *\n\t * @param int $id\n\t *        \toptional, the admin-id\n\t * @param string $loginname\n\t *        \toptional, the loginname\n\t * @param string $name\n\t *        \toptional\n\t * @param string $email\n\t *        \toptional\n\t * @param string $admin_password\n\t *        \toptional, default auto-generated\n\t * @param string $def_language\n\t *        \toptional, default is system-default language\n\t * @param bool $api_allowed\n\t *        \toptional, default is true if system setting api.enabled is true, else false\n\t * @param string $custom_notes\n\t *        \toptional, default empty\n\t * @param string $theme\n\t *        \toptional\n\t * @param bool $deactivated\n\t *        \toptional, default false\n\t * @param bool $custom_notes_show\n\t *        \toptional, default false\n\t * @param int $diskspace\n\t *        \toptional, default 0\n\t * @param bool $diskspace_ul\n\t *        \toptional, default false\n\t * @param int $traffic\n\t *        \toptional, default 0\n\t * @param bool $traffic_ul\n\t *        \toptional, default false\n\t * @param int $customers\n\t *        \toptional, default 0\n\t * @param bool $customers_ul\n\t *        \toptional, default false\n\t * @param int $domains\n\t *        \toptional, default 0\n\t * @param bool $domains_ul\n\t *        \toptional, default false\n\t * @param int $subdomains\n\t *        \toptional, default 0\n\t * @param bool $subdomains_ul\n\t *        \toptional, default false\n\t * @param int $emails\n\t *        \toptional, default 0\n\t * @param bool $emails_ul\n\t *        \toptional, default false\n\t * @param int $email_accounts\n\t *        \toptional, default 0\n\t * @param bool $email_accounts_ul\n\t *        \toptional, default false\n\t * @param int $email_forwarders\n\t *        \toptional, default 0\n\t * @param bool $email_forwarders_ul\n\t *        \toptional, default false\n\t * @param int $email_quota\n\t *        \toptional, default 0\n\t * @param bool $email_quota_ul\n\t *        \toptional, default false\n\t * @param int $ftps\n\t *        \toptional, default 0\n\t * @param bool $ftps_ul\n\t *        \toptional, default false\n\t * @param int $mysqls\n\t *        \toptional, default 0\n\t * @param bool $mysqls_ul\n\t *        \toptional, default false\n\t * @param bool $customers_see_all\n\t *        \toptional, default false\n\t * @param bool $domains_see_all\n\t *        \toptional, default false\n\t * @param bool $caneditphpsettings\n\t *        \toptional, default false\n\t * @param bool $change_serversettings\n\t *        \toptional, default false\n\t * @param array $ipaddress\n\t *        \toptional, list of ip-address id's; default -1 (all IP's)\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function update()\n\t{\n\t\tif ($this->isAdmin()) {\n\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = ($id <= 0 ? false : true);\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t\t$result = $this->apiCall('Admins.get', array(\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t));\n\t\t\t$id = $result['adminid'];\n\n\t\t\tif ($this->getUserDetail('change_serversettings') == 1 || $result['adminid'] == $this->getUserDetail('adminid')) {\n\t\t\t\t// parameters\n\t\t\t\t$name = $this->getParam('name', true, $result['name']);\n\t\t\t\t$idna_convert = new \\Froxlor\\Idna\\IdnaWrapper();\n\t\t\t\t$email = $this->getParam('email', true, $idna_convert->decode($result['email'] ?? ''));\n\t\t\t\t$password = $this->getParam('admin_password', true, '');\n\t\t\t\t$def_language = $this->getParam('def_language', true, $result['def_language']);\n\t\t\t\t$custom_notes = $this->getParam('custom_notes', true, ($result['custom_notes'] ?? \"\"));\n\t\t\t\t$custom_notes_show = $this->getBoolParam('custom_notes_show', true, $result['custom_notes_show']);\n\t\t\t\t$theme = $this->getParam('theme', true, $result['theme']);\n\n\t\t\t\t// you cannot edit some of the details of yourself\n\t\t\t\tif ($result['adminid'] == $this->getUserDetail('adminid')) {\n\t\t\t\t\t$api_allowed = $result['api_allowed'];\n\t\t\t\t\t$deactivated = $result['deactivated'];\n\t\t\t\t\t$customers = $result['customers'];\n\t\t\t\t\t$domains = $result['domains'];\n\t\t\t\t\t$subdomains = $result['subdomains'];\n\t\t\t\t\t$emails = $result['emails'];\n\t\t\t\t\t$email_accounts = $result['email_accounts'];\n\t\t\t\t\t$email_forwarders = $result['email_forwarders'];\n\t\t\t\t\t$email_quota = $result['email_quota'];\n\t\t\t\t\t$ftps = $result['ftps'];\n\t\t\t\t\t$mysqls = $result['mysqls'];\n\t\t\t\t\t$customers_see_all = $result['customers_see_all'];\n\t\t\t\t\t$domains_see_all = $result['domains_see_all'];\n\t\t\t\t\t$caneditphpsettings = $result['caneditphpsettings'];\n\t\t\t\t\t$change_serversettings = $result['change_serversettings'];\n\t\t\t\t\t$diskspace = $result['diskspace'];\n\t\t\t\t\t$traffic = $result['traffic'];\n\t\t\t\t\t$ipaddress = ($result['ip'] != - 1 ? json_decode($result['ip'], true) : - 1);\n\t\t\t\t} else {\n\t\t\t\t\t$api_allowed = $this->getBoolParam('api_allowed', true, $result['api_allowed']);\n\t\t\t\t\t$deactivated = $this->getBoolParam('deactivated', true, $result['deactivated']);\n\n\t\t\t\t\t$dec_places = Settings::Get('panel.decimal_places');\n\t\t\t\t\t$diskspace = $this->getUlParam('diskspace', 'diskspace_ul', true, round($result['diskspace'] / 1024, $dec_places));\n\t\t\t\t\t$traffic = $this->getUlParam('traffic', 'traffic_ul', true, round($result['traffic'] / (1024 * 1024), $dec_places));\n\t\t\t\t\t$customers = $this->getUlParam('customers', 'customers_ul', true, $result['customers']);\n\t\t\t\t\t$domains = $this->getUlParam('domains', 'domains_ul', true, $result['domains']);\n\t\t\t\t\t$subdomains = $this->getUlParam('subdomains', 'subdomains_ul', true, $result['subdomains']);\n\t\t\t\t\t$emails = $this->getUlParam('emails', 'emails_ul', true, $result['emails']);\n\t\t\t\t\t$email_accounts = $this->getUlParam('email_accounts', 'email_accounts_ul', true, $result['email_accounts']);\n\t\t\t\t\t$email_forwarders = $this->getUlParam('email_forwarders', 'email_forwarders_ul', true, $result['email_forwarders']);\n\t\t\t\t\t$email_quota = $this->getUlParam('email_quota', 'email_quota_ul', true, $result['email_quota']);\n\t\t\t\t\t$ftps = $this->getUlParam('ftps', 'ftps_ul', true, $result['ftps']);\n\t\t\t\t\t$mysqls = $this->getUlParam('mysqls', 'mysqls_ul', true, $result['mysqls']);\n\n\t\t\t\t\t$customers_see_all = $this->getBoolParam('customers_see_all', true, $result['customers_see_all']);\n\t\t\t\t\t$domains_see_all = $this->getBoolParam('domains_see_all', true, $result['domains_see_all']);\n\t\t\t\t\t$caneditphpsettings = $this->getBoolParam('caneditphpsettings', true, $result['caneditphpsettings']);\n\t\t\t\t\t$change_serversettings = $this->getBoolParam('change_serversettings', true, $result['change_serversettings']);\n\t\t\t\t\t$ipaddress = $this->getParam('ipaddress', true, ($result['ip'] != - 1 ? json_decode($result['ip'], true) : - 1));\n\n\t\t\t\t\t$diskspace = $diskspace * 1024;\n\t\t\t\t\t$traffic = $traffic * 1024 * 1024;\n\t\t\t\t}\n\n\t\t\t\t// validation\n\t\t\t\t$name = \\Froxlor\\Validate\\Validate::validate($name, 'name', '', '', array(), true);\n\t\t\t\t$idna_convert = new \\Froxlor\\Idna\\IdnaWrapper();\n\t\t\t\t$email = $idna_convert->encode(\\Froxlor\\Validate\\Validate::validate($email, 'email', '', '', array(), true));\n\t\t\t\t$def_language = \\Froxlor\\Validate\\Validate::validate($def_language, 'default language', '', '', array(), true);\n\t\t\t\t$custom_notes = \\Froxlor\\Validate\\Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $custom_notes), 'custom_notes', \\Froxlor\\Validate\\Validate::REGEX_CONF_TEXT, '', array(), true);\n\t\t\t\t$theme = \\Froxlor\\Validate\\Validate::validate($theme, 'theme', '', '', array(), true);\n\t\t\t\t$password = \\Froxlor\\Validate\\Validate::validate($password, 'password', '', '', array(), true);\n\n\t\t\t\tif (Settings::Get('system.mail_quota_enabled') != '1') {\n\t\t\t\t\t$email_quota = - 1;\n\t\t\t\t}\n\n\t\t\t\tif (empty($theme)) {\n\t\t\t\t\t$theme = Settings::Get('panel.default_theme');\n\t\t\t\t}\n\n\t\t\t\tif (! \\Froxlor\\Validate\\Validate::validateEmail($email)) {\n\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('emailiswrong', $email, true);\n\t\t\t\t} else {\n\n\t\t\t\t\tif ($deactivated != '1') {\n\t\t\t\t\t\t$deactivated = '0';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($customers_see_all != '1') {\n\t\t\t\t\t\t$customers_see_all = '0';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($domains_see_all != '1') {\n\t\t\t\t\t\t$domains_see_all = '0';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($caneditphpsettings != '1') {\n\t\t\t\t\t\t$caneditphpsettings = '0';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($change_serversettings != '1') {\n\t\t\t\t\t\t$change_serversettings = '0';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($password != '') {\n\t\t\t\t\t\t$password = \\Froxlor\\System\\Crypt::validatePassword($password, true);\n\t\t\t\t\t\t$password = \\Froxlor\\System\\Crypt::makeCryptPassword($password);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$password = $result['password'];\n\t\t\t\t\t}\n\n\t\t\t\t\t// check if a resource was set to something lower\n\t\t\t\t\t// than actually used by the admin/reseller\n\t\t\t\t\t$res_warning = \"\";\n\t\t\t\t\tif ($customers != $result['customers'] && $customers != - 1 && $customers < $result['customers_used']) {\n\t\t\t\t\t\t$res_warning .= sprintf($this->lng['error']['setlessthanalreadyused'], 'customers');\n\t\t\t\t\t}\n\t\t\t\t\tif ($domains != $result['domains'] && $domains != - 1 && $domains < $result['domains_used']) {\n\t\t\t\t\t\t$res_warning .= sprintf($this->lng['error']['setlessthanalreadyused'], 'domains');\n\t\t\t\t\t}\n\t\t\t\t\tif ($diskspace != $result['diskspace'] && ($diskspace / 1024) != - 1 && $diskspace < $result['diskspace_used']) {\n\t\t\t\t\t\t$res_warning .= sprintf($this->lng['error']['setlessthanalreadyused'], 'diskspace');\n\t\t\t\t\t}\n\t\t\t\t\tif ($traffic != $result['traffic'] && ($traffic / 1024 / 1024) != - 1 && $traffic < $result['traffic_used']) {\n\t\t\t\t\t\t$res_warning .= sprintf($this->lng['error']['setlessthanalreadyused'], 'traffic');\n\t\t\t\t\t}\n\t\t\t\t\tif ($emails != $result['emails'] && $emails != - 1 && $emails < $result['emails_used']) {\n\t\t\t\t\t\t$res_warning .= sprintf($this->lng['error']['setlessthanalreadyused'], 'emails');\n\t\t\t\t\t}\n\t\t\t\t\tif ($email_accounts != $result['email_accounts'] && $email_accounts != - 1 && $email_accounts < $result['email_accounts_used']) {\n\t\t\t\t\t\t$res_warning .= sprintf($this->lng['error']['setlessthanalreadyused'], 'email accounts');\n\t\t\t\t\t}\n\t\t\t\t\tif ($email_forwarders != $result['email_forwarders'] && $email_forwarders != - 1 && $email_forwarders < $result['email_forwarders_used']) {\n\t\t\t\t\t\t$res_warning .= sprintf($this->lng['error']['setlessthanalreadyused'], 'email forwarders');\n\t\t\t\t\t}\n\t\t\t\t\tif ($email_quota != $result['email_quota'] && $email_quota != - 1 && $email_quota < $result['email_quota_used']) {\n\t\t\t\t\t\t$res_warning .= sprintf($this->lng['error']['setlessthanalreadyused'], 'email quota');\n\t\t\t\t\t}\n\t\t\t\t\tif ($ftps != $result['ftps'] && $ftps != - 1 && $ftps < $result['ftps_used']) {\n\t\t\t\t\t\t$res_warning .= sprintf($this->lng['error']['setlessthanalreadyused'], 'ftps');\n\t\t\t\t\t}\n\t\t\t\t\tif ($mysqls != $result['mysqls'] && $mysqls != - 1 && $mysqls < $result['mysqls_used']) {\n\t\t\t\t\t\t$res_warning .= sprintf($this->lng['error']['setlessthanalreadyused'], 'mysqls');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (! empty($res_warning)) {\n\t\t\t\t\t\tthrow new \\Exception($res_warning, 406);\n\t\t\t\t\t}\n\n\t\t\t\t\t$upd_data = array(\n\t\t\t\t\t\t'password' => $password,\n\t\t\t\t\t\t'name' => $name,\n\t\t\t\t\t\t'email' => $email,\n\t\t\t\t\t\t'lang' => $def_language,\n\t\t\t\t\t\t'api_allowed' => $api_allowed,\n\t\t\t\t\t\t'change_serversettings' => $change_serversettings,\n\t\t\t\t\t\t'customers' => $customers,\n\t\t\t\t\t\t'customers_see_all' => $customers_see_all,\n\t\t\t\t\t\t'domains' => $domains,\n\t\t\t\t\t\t'domains_see_all' => $domains_see_all,\n\t\t\t\t\t\t'caneditphpsettings' => $caneditphpsettings,\n\t\t\t\t\t\t'diskspace' => $diskspace,\n\t\t\t\t\t\t'traffic' => $traffic,\n\t\t\t\t\t\t'subdomains' => $subdomains,\n\t\t\t\t\t\t'emails' => $emails,\n\t\t\t\t\t\t'accounts' => $email_accounts,\n\t\t\t\t\t\t'forwarders' => $email_forwarders,\n\t\t\t\t\t\t'quota' => $email_quota,\n\t\t\t\t\t\t'ftps' => $ftps,\n\t\t\t\t\t\t'mysqls' => $mysqls,\n\t\t\t\t\t\t'ip' => empty($ipaddress) ? \"\" : (is_array($ipaddress) && $ipaddress > 0 ? json_encode($ipaddress) : - 1),\n\t\t\t\t\t\t'deactivated' => $deactivated,\n\t\t\t\t\t\t'custom_notes' => $custom_notes,\n\t\t\t\t\t\t'custom_notes_show' => $custom_notes_show,\n\t\t\t\t\t\t'theme' => $theme,\n\t\t\t\t\t\t'adminid' => $id\n\t\t\t\t\t);\n\n\t\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\t\tUPDATE `\" . TABLE_PANEL_ADMINS . \"` SET\n\t\t\t\t\t\t`password` = :password,\n\t\t\t\t\t\t`name` = :name,\n\t\t\t\t\t\t`email` = :email,\n\t\t\t\t\t\t`def_language` = :lang,\n\t\t\t\t\t\t`api_allowed` = :api_allowed,\n\t\t\t\t\t\t`change_serversettings` = :change_serversettings,\n\t\t\t\t\t\t`customers` = :customers,\n\t\t\t\t\t\t`customers_see_all` = :customers_see_all,\n\t\t\t\t\t\t`domains` = :domains,\n\t\t\t\t\t\t`domains_see_all` = :domains_see_all,\n\t\t\t\t\t\t`caneditphpsettings` = :caneditphpsettings,\n\t\t\t\t\t\t`diskspace` = :diskspace,\n\t\t\t\t\t\t`traffic` = :traffic,\n\t\t\t\t\t\t`subdomains` = :subdomains,\n\t\t\t\t\t\t`emails` = :emails,\n\t\t\t\t\t\t`email_accounts` = :accounts,\n\t\t\t\t\t\t`email_forwarders` = :forwarders,\n\t\t\t\t\t\t`email_quota` = :quota,\n\t\t\t\t\t\t`ftps` = :ftps,\n\t\t\t\t\t\t`mysqls` = :mysqls,\n\t\t\t\t\t\t`ip` = :ip,\n\t\t\t\t\t\t`deactivated` = :deactivated,\n\t\t\t\t\t\t`custom_notes` = :custom_notes,\n\t\t\t\t\t\t`custom_notes_show` = :custom_notes_show,\n\t\t\t\t\t\t`theme` = :theme\n\t\t\t\t\t\tWHERE `adminid` = :adminid\n\t\t\t\t\t\");\n\t\t\t\t\tDatabase::pexecute($upd_stmt, $upd_data, true, true);\n\t\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_INFO, \"[API] edited admin '\" . $result['loginname'] . \"'\");\n\n\t\t\t\t\t// get all admin-data for return-array\n\t\t\t\t\t$result = $this->apiCall('Admins.get', array(\n\t\t\t\t\t\t'id' => $result['adminid']\n\t\t\t\t\t));\n\t\t\t\t\treturn $this->response(200, \"successful\", $result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * delete a admin entry by either id or loginname\n\t *\n\t * @param int $id\n\t *        \toptional, the admin-id\n\t * @param string $loginname\n\t *        \toptional, the loginname\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function delete()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = ($id <= 0 ? false : true);\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t\t$result = $this->apiCall('Admins.get', array(\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t));\n\t\t\t$id = $result['adminid'];\n\n\t\t\t// don't be stupid\n\t\t\tif ($id == $this->getUserDetail('adminid')) {\n\t\t\t\t\\Froxlor\\UI\\Response::standard_error('youcantdeleteyourself', '', true);\n\t\t\t}\n\t\t\t// can't delete the first superadmin\n\t\t\tif ($id == 1) {\n\t\t\t\t\\Froxlor\\UI\\Response::standard_error('cannotdeletesuperadmin', '', true);\n\t\t\t}\n\n\t\t\t// delete admin\n\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_PANEL_ADMINS . \"` WHERE `adminid` = :adminid\n\t\t\t\");\n\t\t\tDatabase::pexecute($del_stmt, array(\n\t\t\t\t'adminid' => $id\n\t\t\t), true, true);\n\n\t\t\t// delete the traffic-usage\n\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_PANEL_TRAFFIC_ADMINS . \"` WHERE `adminid` = :adminid\n\t\t\t\");\n\t\t\tDatabase::pexecute($del_stmt, array(\n\t\t\t\t'adminid' => $id\n\t\t\t), true, true);\n\n\t\t\t// set admin-id of the old admin's customer to current admins\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET\n\t\t\t\t`adminid` = :userid WHERE `adminid` = :adminid\n\t\t\t\");\n\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t'userid' => $this->getUserDetail('adminid'),\n\t\t\t\t'adminid' => $id\n\t\t\t), true, true);\n\n\t\t\t// set admin-id of the old admin's domains to current admins\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_DOMAINS . \"` SET\n\t\t\t\t`adminid` = :userid WHERE `adminid` = :adminid\n\t\t\t\");\n\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t'userid' => $this->getUserDetail('adminid'),\n\t\t\t\t'adminid' => $id\n\t\t\t), true, true);\n\n\t\t\t// delete old admin's api keys if exists (no customer keys)\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_API_KEYS . \"` WHERE\n\t\t\t\t`adminid` = :adminid AND `customerid` = '0'\n\t\t\t\");\n\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t'adminid' => $id\n\t\t\t), true, true);\n\n\t\t\t// set admin-id of the old admin's api-keys to current admins\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_API_KEYS . \"` SET\n\t\t\t\t`adminid` = :userid WHERE `adminid` = :adminid\n\t\t\t\");\n\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t'userid' => $this->getUserDetail('adminid'),\n\t\t\t\t'adminid' => $id\n\t\t\t), true, true);\n\n\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] deleted admin '\" . $result['loginname'] . \"'\");\n\t\t\t\\Froxlor\\User::updateCounters();\n\t\t\treturn $this->response(200, \"successful\", $result);\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * unlock a locked admin by either id or loginname\n\t *\n\t * @param int $id\n\t *        \toptional, the admin-id\n\t * @param string $loginname\n\t *        \toptional, the loginname\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function unlock()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = ($id <= 0 ? false : true);\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t\t$result = $this->apiCall('Admins.get', array(\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t));\n\t\t\t$id = $result['adminid'];\n\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_ADMINS . \"` SET\n\t\t\t\t`loginfail_count` = '0'\n\t\t\t\tWHERE `adminid`= :id\n\t\t\t\");\n\t\t\tDatabase::pexecute($result_stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\t\t\t// set the new value for result-array\n\t\t\t$result['loginfail_count'] = 0;\n\n\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] unlocked admin '\" . $result['loginname'] . \"'\");\n\t\t\treturn $this->response(200, \"successful\", $result);\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * increase resource-usage\n\t *\n\t * @param int $adminid\n\t * @param string $resource\n\t * @param string $extra\n\t *        \toptional, default empty\n\t * @param int $increase_by\n\t *        \toptional, default 1\n\t */\n\tpublic static function increaseUsage($adminid = 0, $resource = null, $extra = '', $increase_by = 1)\n\t{\n\t\tself::updateResourceUsage(TABLE_PANEL_ADMINS, 'adminid', $adminid, '+', $resource, $extra, $increase_by);\n\t}\n\n\t/**\n\t * decrease resource-usage\n\t *\n\t * @param int $adminid\n\t * @param string $resource\n\t * @param string $extra\n\t *        \toptional, default empty\n\t * @param int $decrease_by\n\t *        \toptional, default 1\n\t */\n\tpublic static function decreaseUsage($adminid = 0, $resource = null, $extra = '', $decrease_by = 1)\n\t{\n\t\tself::updateResourceUsage(TABLE_PANEL_ADMINS, 'adminid', $adminid, '-', $resource, $extra, $decrease_by);\n\t}\n}\n", "<?php\nnamespace Froxlor\\Api\\Commands;\n\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Settings;\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * For the full copyright and license information, please view the COPYING\n * file that was distributed with this source code. You can also view the\n * COPYING file online at http://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright (c) the authors\n * @author Froxlor team <team@froxlor.org> (2010-)\n * @license GPLv2 http://files.froxlor.org/misc/COPYING.txt\n * @package API\n * @since 0.10.0\n *       \n */\nclass Customers extends \\Froxlor\\Api\\ApiCommand implements \\Froxlor\\Api\\ResourceEntity\n{\n\n\t/**\n\t * lists all customer entries\n\t *\n\t * @param array $sql_search\n\t *        \toptional array with index = fieldname, and value = array with 'op' => operator (one of <, > or =), LIKE is used if left empty and 'value' => searchvalue\n\t * @param int $sql_limit\n\t *        \toptional specify number of results to be returned\n\t * @param int $sql_offset\n\t *        \toptional specify offset for resultset\n\t * @param array $sql_orderby\n\t *        \toptional array with index = fieldname and value = ASC|DESC to order the resultset by one or more fields\n\t * @param bool $show_usages\n\t *        \toptional, default false\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array count|list\n\t */\n\tpublic function listing()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$show_usages = $this->getBoolParam('show_usages', true, false);\n\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] list customers\");\n\t\t\t$query_fields = array();\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT `c`.*, `a`.`loginname` AS `adminname`\n\t\t\t\tFROM `\" . TABLE_PANEL_CUSTOMERS . \"` `c`, `\" . TABLE_PANEL_ADMINS . \"` `a`\n\t\t\t\tWHERE \" . ($this->getUserDetail('customers_see_all') ? '' : \" `c`.`adminid` = :adminid AND \") . \"\n\t\t\t\t`c`.`adminid` = `a`.`adminid`\" . $this->getSearchWhere($query_fields, true) . $this->getOrderBy() . $this->getLimit());\n\t\t\t$params = array();\n\t\t\tif ($this->getUserDetail('customers_see_all') == '0') {\n\t\t\t\t$params = array(\n\t\t\t\t\t'adminid' => $this->getUserDetail('adminid')\n\t\t\t\t);\n\t\t\t}\n\t\t\t$params = array_merge($params, $query_fields);\n\t\t\tDatabase::pexecute($result_stmt, $params, true, true);\n\t\t\t$result = array();\n\n\t\t\t$domains_stmt = null;\n\t\t\t$usages_stmt = null;\n\t\t\tif ($show_usages) {\n\t\t\t\t$domains_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT COUNT(`id`) AS `domains`\n\t\t\t\t\tFROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\t\t\tWHERE `customerid` = :cid\n\t\t\t\t\tAND `parentdomainid` = '0'\n\t\t\t\t\tAND `id`<> :stdd\n\t\t\t\t\");\n\t\t\t\t$usages_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_DISKSPACE . \"`\n\t\t\t\t\tWHERE `customerid` = :cid\n\t\t\t\t\tORDER BY `stamp` DESC LIMIT 1\n\t\t\t\t\");\n\t\t\t}\n\n\t\t\twhile ($row = $result_stmt->fetch(\\PDO::FETCH_ASSOC)) {\n\t\t\t\tif ($show_usages) {\n\t\t\t\t\t// get number of domains\n\t\t\t\t\tDatabase::pexecute($domains_stmt, array(\n\t\t\t\t\t\t'cid' => $row['customerid'],\n\t\t\t\t\t\t'stdd' => $row['standardsubdomain']\n\t\t\t\t\t));\n\t\t\t\t\t$domains = $domains_stmt->fetch(\\PDO::FETCH_ASSOC);\n\t\t\t\t\t$row['domains'] = intval($domains['domains']);\n\t\t\t\t\t// get disk-space usages for web, mysql and mail\n\t\t\t\t\t$usages = Database::pexecute_first($usages_stmt, array(\n\t\t\t\t\t\t'cid' => $row['customerid']\n\t\t\t\t\t));\n\t\t\t\t\tif ($usages) {\n\t\t\t\t\t\t$row['webspace_used'] = $usages['webspace'];\n\t\t\t\t\t\t$row['mailspace_used'] = $usages['mail'];\n\t\t\t\t\t\t$row['dbspace_used'] = $usages['mysql'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$row['webspace_used'] = 0;\n\t\t\t\t\t\t$row['mailspace_used'] = 0;\n\t\t\t\t\t\t$row['dbspace_used'] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$result[] = $row;\n\t\t\t}\n\t\t\treturn $this->response(200, \"successful\", array(\n\t\t\t\t'count' => count($result),\n\t\t\t\t'list' => $result\n\t\t\t));\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * returns the total number of customers for the given admin\n\t *\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function listingCount()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT COUNT(*) as num_customers\n\t\t\t\tFROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\tWHERE \" . ($this->getUserDetail('customers_see_all') ? \"1\" : \" `adminid` = :adminid \"));\n\t\t\t$params = array();\n\t\t\tif ($this->getUserDetail('customers_see_all') == '0') {\n\t\t\t\t$params = array(\n\t\t\t\t\t'adminid' => $this->getUserDetail('adminid')\n\t\t\t\t);\n\t\t\t}\n\t\t\t$result = Database::pexecute_first($result_stmt, $params, true, true);\n\t\t\tif ($result) {\n\t\t\t\treturn $this->response(200, \"successful\", $result['num_customers']);\n\t\t\t}\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * return a customer entry by either id or loginname\n\t *\n\t * @param int $id\n\t *        \toptional, the customer-id\n\t * @param string $loginname\n\t *        \toptional, the loginname\n\t * @param bool $show_usages\n\t *        \toptional, default false\n\t *        \t\n\t * @access admin, customer\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function get()\n\t{\n\t\t$id = $this->getParam('id', true, 0);\n\t\t$ln_optional = ($id <= 0 ? false : true);\n\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\t\t$show_usages = $this->getBoolParam('show_usages', true, false);\n\n\t\tif ($this->isAdmin()) {\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT `c`.*, `a`.`loginname` AS `adminname`\n\t\t\tFROM `\" . TABLE_PANEL_CUSTOMERS . \"` `c`, `\" . TABLE_PANEL_ADMINS . \"` `a`\n\t\t\tWHERE \" . ($id > 0 ? \"`c`.`customerid` = :idln\" : \"`c`.`loginname` = :idln\") . ($this->getUserDetail('customers_see_all') ? '' : \" AND `c`.`adminid` = :adminid\") . \" AND `c`.`adminid` = `a`.`adminid`\");\n\t\t\t$params = array(\n\t\t\t\t'idln' => ($id <= 0 ? $loginname : $id)\n\t\t\t);\n\t\t\tif ($this->getUserDetail('customers_see_all') == '0') {\n\t\t\t\t$params['adminid'] = $this->getUserDetail('adminid');\n\t\t\t}\n\t\t} else {\n\t\t\tif (($id > 0 && $id != $this->getUserDetail('customerid')) || ! empty($loginname) && $loginname != $this->getUserDetail('loginname')) {\n\t\t\t\tthrow new \\Exception(\"You cannot access data of other customers\", 401);\n\t\t\t}\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\tWHERE \" . ($id > 0 ? \"`customerid` = :idln\" : \"`loginname` = :idln\"));\n\t\t\t$params = array(\n\t\t\t\t'idln' => ($id <= 0 ? $loginname : $id)\n\t\t\t);\n\t\t}\n\t\t$result = Database::pexecute_first($result_stmt, $params, true, true);\n\t\tif ($result) {\n\t\t\t// check whether the admin does not want the customer to see the notes\n\t\t\tif (! $this->isAdmin() && $result['custom_notes_show'] != 1) {\n\t\t\t\t$result['custom_notes'] = \"\";\n\t\t\t}\n\t\t\tif ($show_usages) {\n\t\t\t\t// get number of domains\n\t\t\t\t$domains_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT COUNT(`id`) AS `domains`\n\t\t\t\t\tFROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\t\t\tWHERE `customerid` = :cid\n\t\t\t\t\tAND `parentdomainid` = '0'\n\t\t\t\t\tAND `id`<> :stdd\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($domains_stmt, array(\n\t\t\t\t\t'cid' => $result['customerid'],\n\t\t\t\t\t'stdd' => $result['standardsubdomain']\n\t\t\t\t));\n\t\t\t\t$domains = $domains_stmt->fetch(\\PDO::FETCH_ASSOC);\n\t\t\t\t$result['domains'] = intval($domains['domains']);\n\t\t\t\t// get disk-space usages for web, mysql and mail\n\t\t\t\t$usages_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_DISKSPACE . \"`\n\t\t\t\t\tWHERE `customerid` = :cid\n\t\t\t\t\tORDER BY `stamp` DESC LIMIT 1\n\t\t\t\t\");\n\t\t\t\t$usages = Database::pexecute_first($usages_stmt, array(\n\t\t\t\t\t'cid' => $result['customerid']\n\t\t\t\t));\n\t\t\t\tif ($usages) {\n\t\t\t\t\t$result['webspace_used'] = $usages['webspace'];\n\t\t\t\t\t$result['mailspace_used'] = $usages['mail'];\n\t\t\t\t\t$result['dbspace_used'] = $usages['mysql'];\n\t\t\t\t} else {\n\t\t\t\t\t$result['webspace_used'] = 0;\n\t\t\t\t\t$result['mailspace_used'] = 0;\n\t\t\t\t\t$result['dbspace_used'] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->logger()->logAction($this->isAdmin() ? \\Froxlor\\FroxlorLogger::ADM_ACTION : \\Froxlor\\FroxlorLogger::USR_ACTION, LOG_NOTICE, \"[API] get customer '\" . $result['loginname'] . \"'\");\n\t\t\treturn $this->response(200, \"successful\", $result);\n\t\t}\n\t\t$key = ($id > 0 ? \"id #\" . $id : \"loginname '\" . $loginname . \"'\");\n\t\tthrow new \\Exception(\"Customer with \" . $key . \" could not be found\", 404);\n\t}\n\n\t/**\n\t * create a new customer with default ftp-user and standard-subdomain (if wanted)\n\t *\n\t * @param string $email\n\t * @param string $name\n\t *        \toptional if company is set, else required\n\t * @param string $firstname\n\t *        \toptional if company is set, else required\n\t * @param string $company\n\t *        \toptional but required if name/firstname empty\n\t * @param string $street\n\t *        \toptional\n\t * @param string $zipcode\n\t *        \toptional\n\t * @param string $city\n\t *        \toptional\n\t * @param string $phone\n\t *        \toptional\n\t * @param string $fax\n\t *        \toptional\n\t * @param int $customernumber\n\t *        \toptional\n\t * @param string $def_language,\n\t *        \toptional, default is system-default language\n\t * @param bool $api_allowed\n\t *        \toptional, default is true if system setting api.enabled is true, else false\n\t * @param int $gender\n\t *        \toptional, 0 = no-gender, 1 = male, 2 = female\n\t * @param string $custom_notes\n\t *        \toptional notes\n\t * @param bool $custom_notes_show\n\t *        \toptional, whether to show the content of custom_notes to the customer, default 0 (false)\n\t * @param string $new_loginname\n\t *        \toptional, if empty generated automatically using customer-prefix and increasing number\n\t * @param string $new_customer_password\n\t *        \toptional, if empty generated automatically and send to the customer's email if $sendpassword is 1\n\t * @param bool $sendpassword\n\t *        \toptional, whether to send the password to the customer after creation, default 0 (false)\n\t * @param int $diskspace\n\t *        \toptional disk-space available for customer in MB, default 0\n\t * @param bool $diskspace_ul\n\t *        \toptional, whether customer should have unlimited diskspace, default 0 (false)\n\t * @param int $traffic\n\t *        \toptional traffic available for customer in GB, default 0\n\t * @param bool $traffic_ul\n\t *        \toptional, whether customer should have unlimited traffic, default 0 (false)\n\t * @param int $subdomains\n\t *        \toptional amount of subdomains available for customer, default 0\n\t * @param bool $subdomains_ul\n\t *        \toptional, whether customer should have unlimited subdomains, default 0 (false)\n\t * @param int $emails\n\t *        \toptional amount of emails available for customer, default 0\n\t * @param bool $emails_ul\n\t *        \toptional, whether customer should have unlimited emails, default 0 (false)\n\t * @param int $email_accounts\n\t *        \toptional amount of email-accounts available for customer, default 0\n\t * @param bool $email_accounts_ul\n\t *        \toptional, whether customer should have unlimited email-accounts, default 0 (false)\n\t * @param int $email_forwarders\n\t *        \toptional amount of email-forwarders available for customer, default 0\n\t * @param bool $email_forwarders_ul\n\t *        \toptional, whether customer should have unlimited email-forwarders, default 0 (false)\n\t * @param int $email_quota\n\t *        \toptional size of email-quota available for customer in MB, default is system-setting mail_quota\n\t * @param bool $email_quota_ul\n\t *        \toptional, whether customer should have unlimited email-quota, default 0 (false)\n\t * @param bool $email_imap\n\t *        \toptional, whether to allow IMAP access, default 0 (false)\n\t * @param bool $email_pop3\n\t *        \toptional, whether to allow POP3 access, default 0 (false)\n\t * @param int $ftps\n\t *        \toptional amount of ftp-accounts available for customer, default 0\n\t * @param bool $ftps_ul\n\t *        \toptional, whether customer should have unlimited ftp-accounts, default 0 (false)\n\t * @param int $mysqls\n\t *        \toptional amount of mysql-databases available for customer, default 0\n\t * @param bool $mysqls_ul\n\t *        \toptional, whether customer should have unlimited mysql-databases, default 0 (false)\n\t * @param bool $createstdsubdomain\n\t *        \toptional, whether to create a standard-subdomain ([loginname].froxlor-hostname.tld), default [system.createstdsubdom_default]\n\t * @param bool $phpenabled\n\t *        \toptional, whether to allow usage of PHP, default 0 (false)\n\t * @param array $allowed_phpconfigs\n\t *        \toptional, array of IDs of php-config that the customer is allowed to use, default empty (none)\n\t * @param bool $perlenabled\n\t *        \toptional, whether to allow usage of Perl/CGI, default 0 (false)\n\t * @param bool $dnsenabled\n\t *        \toptional, whether to allow usage of the DNS editor (requires activated nameserver in settings), default 0 (false)\n\t * @param bool $logviewenabled\n\t *        \toptional, whether to allow access to webserver access/error-logs, default 0 (false)\n\t * @param bool $store_defaultindex\n\t *        \toptional, whether to store the default index file to customers homedir\n\t * @param int $hosting_plan_id\n\t *        \toptional, specify a hosting-plan to set certain resource-values from the plan instead of specifying them\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function add()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\tif ($this->getUserDetail('customers_used') < $this->getUserDetail('customers') || $this->getUserDetail('customers') == '-1') {\n\n\t\t\t\t// required parameters\n\t\t\t\t$email = $this->getParam('email');\n\n\t\t\t\t// parameters\n\t\t\t\t$name = $this->getParam('name', true, '');\n\t\t\t\t$firstname = $this->getParam('firstname', true, '');\n\t\t\t\t$company_required = (! empty($name) && empty($firstname)) || (empty($name) && ! empty($firstname)) || (empty($name) && empty($firstname));\n\t\t\t\t$company = $this->getParam('company', ($company_required ? false : true), '');\n\t\t\t\t$street = $this->getParam('street', true, '');\n\t\t\t\t$zipcode = $this->getParam('zipcode', true, '');\n\t\t\t\t$city = $this->getParam('city', true, '');\n\t\t\t\t$phone = $this->getParam('phone', true, '');\n\t\t\t\t$fax = $this->getParam('fax', true, '');\n\t\t\t\t$customernumber = $this->getParam('customernumber', true, '');\n\t\t\t\t$def_language = $this->getParam('def_language', true, Settings::Get('panel.standardlanguage'));\n\t\t\t\t$api_allowed = $this->getBoolParam('api_allowed', true, Settings::Get('api.enabled'));\n\t\t\t\t$gender = (int) $this->getParam('gender', true, 0);\n\t\t\t\t$custom_notes = $this->getParam('custom_notes', true, '');\n\t\t\t\t$custom_notes_show = $this->getBoolParam('custom_notes_show', true, 0);\n\t\t\t\t$createstdsubdomain = $this->getBoolParam('createstdsubdomain', true, Settings::Get('system.createstdsubdom_default'));\n\t\t\t\t$password = $this->getParam('new_customer_password', true, '');\n\t\t\t\t$sendpassword = $this->getBoolParam('sendpassword', true, 0);\n\t\t\t\t$store_defaultindex = $this->getBoolParam('store_defaultindex', true, 0);\n\t\t\t\t$loginname = $this->getParam('new_loginname', true, '');\n\n\t\t\t\t// hosting-plan values\n\t\t\t\t$hosting_plan_id = $this->getParam('hosting_plan_id', true, 0);\n\t\t\t\tif ($hosting_plan_id > 0) {\n\t\t\t\t\t$hp_result = $this->apiCall('HostingPlans.get', array(\n\t\t\t\t\t\t'id' => $hosting_plan_id\n\t\t\t\t\t));\n\t\t\t\t\t$hp_result['value'] = json_decode($hp_result['value'], true);\n\t\t\t\t\tforeach ($hp_result['value'] as $index => $value) {\n\t\t\t\t\t\t$hp_result[$index] = $value;\n\t\t\t\t\t}\n\t\t\t\t\t$diskspace = $hp_result['diskspace'] ?? 0;\n\t\t\t\t\t$traffic = $hp_result['traffic'] ?? 0;\n\t\t\t\t\t$subdomains = $hp_result['subdomains'] ?? 0;\n\t\t\t\t\t$emails = $hp_result['emails'] ?? 0;\n\t\t\t\t\t$email_accounts = $hp_result['email_accounts'] ?? 0;\n\t\t\t\t\t$email_forwarders = $hp_result['email_forwarders'] ?? 0;\n\t\t\t\t\t$email_quota = $hp_result['email_quota'] ?? Settings::Get('system.mail_quota');\n\t\t\t\t\t$email_imap = $hp_result['email_imap'] ?? 0;\n\t\t\t\t\t$email_pop3 = $hp_result['email_pop3'] ?? 0;\n\t\t\t\t\t$ftps = $hp_result['ftps'] ?? 0;\n\t\t\t\t\t$mysqls = $hp_result['mysqls'] ?? 0;\n\t\t\t\t\t$phpenabled = $hp_result['phpenabled'] ?? 0;\n\t\t\t\t\t$p_allowed_phpconfigs = $hp_result['allowed_phpconfigs'] ?? 0;\n\t\t\t\t\t$perlenabled = $hp_result['perlenabled'] ?? 0;\n\t\t\t\t\t$dnsenabled = $hp_result['dnsenabled'] ?? 0;\n\t\t\t\t\t$logviewenabled = $hp_result['logviewenabled'] ?? 0;\n\t\t\t\t} else {\n\t\t\t\t\t$diskspace = $this->getUlParam('diskspace', 'diskspace_ul', true, 0);\n\t\t\t\t\t$traffic = $this->getUlParam('traffic', 'traffic_ul', true, 0);\n\t\t\t\t\t$subdomains = $this->getUlParam('subdomains', 'subdomains_ul', true, 0);\n\t\t\t\t\t$emails = $this->getUlParam('emails', 'emails_ul', true, 0);\n\t\t\t\t\t$email_accounts = $this->getUlParam('email_accounts', 'email_accounts_ul', true, 0);\n\t\t\t\t\t$email_forwarders = $this->getUlParam('email_forwarders', 'email_forwarders_ul', true, 0);\n\t\t\t\t\t$email_quota = $this->getUlParam('email_quota', 'email_quota_ul', true, Settings::Get('system.mail_quota'));\n\t\t\t\t\t$email_imap = $this->getBoolParam('email_imap', true, 0);\n\t\t\t\t\t$email_pop3 = $this->getBoolParam('email_pop3', true, 0);\n\t\t\t\t\t$ftps = $this->getUlParam('ftps', 'ftps_ul', true, 0);\n\t\t\t\t\t$mysqls = $this->getUlParam('mysqls', 'mysqls_ul', true, 0);\n\t\t\t\t\t$phpenabled = $this->getBoolParam('phpenabled', true, 0);\n\t\t\t\t\t$p_allowed_phpconfigs = $this->getParam('allowed_phpconfigs', true, array());\n\t\t\t\t\t$perlenabled = $this->getBoolParam('perlenabled', true, 0);\n\t\t\t\t\t$dnsenabled = $this->getBoolParam('dnsenabled', true, 0);\n\t\t\t\t\t$logviewenabled = $this->getBoolParam('logviewenabled', true, 0);\n\t\t\t\t}\n\n\t\t\t\t// validation\n\t\t\t\t$name = \\Froxlor\\Validate\\Validate::validate($name, 'name', '', '', array(), true);\n\t\t\t\t$firstname = \\Froxlor\\Validate\\Validate::validate($firstname, 'first name', '', '', array(), true);\n\t\t\t\t$company = \\Froxlor\\Validate\\Validate::validate($company, 'company', '', '', array(), true);\n\t\t\t\t$street = \\Froxlor\\Validate\\Validate::validate($street, 'street', '', '', array(), true);\n\t\t\t\t$zipcode = \\Froxlor\\Validate\\Validate::validate($zipcode, 'zipcode', '/^[0-9 \\-A-Z]*$/', '', array(), true);\n\t\t\t\t$city = \\Froxlor\\Validate\\Validate::validate($city, 'city', '', '', array(), true);\n\t\t\t\t$phone = \\Froxlor\\Validate\\Validate::validate($phone, 'phone', '/^[0-9\\- \\+\\(\\)\\/]*$/', '', array(), true);\n\t\t\t\t$fax = \\Froxlor\\Validate\\Validate::validate($fax, 'fax', '/^[0-9\\- \\+\\(\\)\\/]*$/', '', array(), true);\n\t\t\t\t$idna_convert = new \\Froxlor\\Idna\\IdnaWrapper();\n\t\t\t\t$email = $idna_convert->encode(\\Froxlor\\Validate\\Validate::validate($email, 'email', '', '', array(), true));\n\t\t\t\t$customernumber = \\Froxlor\\Validate\\Validate::validate($customernumber, 'customer number', '/^[A-Za-z0-9 \\-]*$/Di', '', array(), true);\n\t\t\t\t$def_language = \\Froxlor\\Validate\\Validate::validate($def_language, 'default language', '', '', array(), true);\n\t\t\t\t$custom_notes = \\Froxlor\\Validate\\Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $custom_notes), 'custom_notes', \\Froxlor\\Validate\\Validate::REGEX_CONF_TEXT, '', array(), true);\n\n\t\t\t\tif (Settings::Get('system.mail_quota_enabled') != '1') {\n\t\t\t\t\t$email_quota = - 1;\n\t\t\t\t}\n\n\t\t\t\t$password = \\Froxlor\\Validate\\Validate::validate($password, 'password', '', '', array(), true);\n\t\t\t\t// only check if not empty,\n\t\t\t\t// cause empty == generate password automatically\n\t\t\t\tif ($password != '') {\n\t\t\t\t\t$password = \\Froxlor\\System\\Crypt::validatePassword($password, true);\n\t\t\t\t}\n\n\t\t\t\t// gender out of range? [0,2]\n\t\t\t\tif ($gender < 0 || $gender > 2) {\n\t\t\t\t\t$gender = 0;\n\t\t\t\t}\n\n\t\t\t\t$allowed_phpconfigs = array();\n\t\t\t\tif (! empty($p_allowed_phpconfigs) && is_array($p_allowed_phpconfigs)) {\n\t\t\t\t\tforeach ($p_allowed_phpconfigs as $allowed_phpconfig) {\n\t\t\t\t\t\t$allowed_phpconfig = intval($allowed_phpconfig);\n\t\t\t\t\t\t$allowed_phpconfigs[] = $allowed_phpconfig;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$allowed_phpconfigs = array_map('intval', $allowed_phpconfigs);\n\n\t\t\t\t$diskspace = $diskspace * 1024;\n\t\t\t\t$traffic = $traffic * 1024 * 1024;\n\n\t\t\t\tif (((($this->getUserDetail('diskspace_used') + $diskspace) > $this->getUserDetail('diskspace')) && ($this->getUserDetail('diskspace') / 1024) != '-1') || ((($this->getUserDetail('mysqls_used') + $mysqls) > $this->getUserDetail('mysqls')) && $this->getUserDetail('mysqls') != '-1') || ((($this->getUserDetail('emails_used') + $emails) > $this->getUserDetail('emails')) && $this->getUserDetail('emails') != '-1') || ((($this->getUserDetail('email_accounts_used') + $email_accounts) > $this->getUserDetail('email_accounts')) && $this->getUserDetail('email_accounts') != '-1') || ((($this->getUserDetail('email_forwarders_used') + $email_forwarders) > $this->getUserDetail('email_forwarders')) && $this->getUserDetail('email_forwarders') != '-1') || ((($this->getUserDetail('email_quota_used') + $email_quota) > $this->getUserDetail('email_quota')) && $this->getUserDetail('email_quota') != '-1' && Settings::Get('system.mail_quota_enabled') == '1') || ((($this->getUserDetail('ftps_used') + $ftps) > $this->getUserDetail('ftps')) && $this->getUserDetail('ftps') != '-1') || ((($this->getUserDetail('subdomains_used') + $subdomains) > $this->getUserDetail('subdomains')) && $this->getUserDetail('subdomains') != '-1') || (($diskspace / 1024) == '-1' && ($this->getUserDetail('diskspace') / 1024) != '-1') || ($mysqls == '-1' && $this->getUserDetail('mysqls') != '-1') || ($emails == '-1' && $this->getUserDetail('emails') != '-1') || ($email_accounts == '-1' && $this->getUserDetail('email_accounts') != '-1') || ($email_forwarders == '-1' && $this->getUserDetail('email_forwarders') != '-1') || ($email_quota == '-1' && $this->getUserDetail('email_quota') != '-1' && Settings::Get('system.mail_quota_enabled') == '1') || ($ftps == '-1' && $this->getUserDetail('ftps') != '-1') || ($subdomains == '-1' && $this->getUserDetail('subdomains') != '-1')) {\n\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('youcantallocatemorethanyouhave', '', true);\n\t\t\t\t}\n\n\t\t\t\tif (! \\Froxlor\\Validate\\Validate::validateEmail($email)) {\n\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('emailiswrong', $email, true);\n\t\t\t\t} else {\n\n\t\t\t\t\tif ($loginname != '') {\n\t\t\t\t\t\t$accountnumber = intval(Settings::Get('system.lastaccountnumber'));\n\t\t\t\t\t\t$loginname = \\Froxlor\\Validate\\Validate::validate($loginname, 'loginname', '/^[a-z][a-z0-9\\-_]+$/i', '', array(), true);\n\n\t\t\t\t\t\t// Accounts which match systemaccounts are not allowed, filtering them\n\t\t\t\t\t\tif (preg_match('/^' . preg_quote(Settings::Get('customer.accountprefix'), '/') . '([0-9]+)/', $loginname)) {\n\t\t\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('loginnameissystemaccount', Settings::Get('customer.accountprefix'), true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Additional filtering for Bug #962\n\t\t\t\t\t\tif (function_exists('posix_getpwnam') && ! in_array(\"posix_getpwnam\", explode(\",\", ini_get('disable_functions'))) && posix_getpwnam($loginname)) {\n\t\t\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('loginnameissystemaccount', Settings::Get('customer.accountprefix'), true);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$accountnumber = intval(Settings::Get('system.lastaccountnumber')) + 1;\n\t\t\t\t\t\t$loginname = Settings::Get('customer.accountprefix') . $accountnumber;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if the account already exists\n\t\t\t\t\t// do not check via api as we skip any permission checks for this task\n\t\t\t\t\t$loginname_check_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `loginname` FROM `\" . TABLE_PANEL_CUSTOMERS . \"` WHERE `loginname` = :login\n\t\t\t\t\t\");\n\t\t\t\t\t$loginname_check = Database::pexecute_first($loginname_check_stmt, array(\n\t\t\t\t\t\t'login' => $loginname\n\t\t\t\t\t), true, true);\n\n\t\t\t\t\t// Check if an admin with the loginname already exists\n\t\t\t\t\t// do not check via api as we skip any permission checks for this task\n\t\t\t\t\t$loginname_check_admin_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `loginname` FROM `\" . TABLE_PANEL_ADMINS . \"` WHERE `loginname` = :login\n\t\t\t\t\t\");\n\t\t\t\t\t$loginname_check_admin = Database::pexecute_first($loginname_check_admin_stmt, array(\n\t\t\t\t\t\t'login' => $loginname\n\t\t\t\t\t), true, true);\n\n\t\t\t\t\t$mysql_maxlen = \\Froxlor\\Database\\Database::getSqlUsernameLength() - strlen(Settings::Get('customer.mysqlprefix'));\n\t\t\t\t\tif (($loginname_check && strtolower($loginname_check['loginname']) == strtolower($loginname)) || ($loginname_check_admin && strtolower($loginname_check_admin['loginname']) == strtolower($loginname))) {\n\t\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('loginnameexists', $loginname, true);\n\t\t\t\t\t} elseif (! \\Froxlor\\Validate\\Validate::validateUsername($loginname, Settings::Get('panel.unix_names'), $mysql_maxlen)) {\n\t\t\t\t\t\tif (strlen($loginname) > $mysql_maxlen) {\n\t\t\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('loginnameiswrong2', $mysql_maxlen, true);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('loginnameiswrong', $loginname, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$guid = intval(Settings::Get('system.lastguid')) + 1;\n\t\t\t\t\t$documentroot = \\Froxlor\\FileDir::makeCorrectDir(Settings::Get('system.documentroot_prefix') . '/' . $loginname);\n\n\t\t\t\t\tif (file_exists($documentroot)) {\n\t\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('documentrootexists', $documentroot, true);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($password == '') {\n\t\t\t\t\t\t$password = \\Froxlor\\System\\Crypt::generatePassword();\n\t\t\t\t\t}\n\n\t\t\t\t\t$_theme = Settings::Get('panel.default_theme');\n\n\t\t\t\t\t$ins_data = array(\n\t\t\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t\t\t'loginname' => $loginname,\n\t\t\t\t\t\t'passwd' => \\Froxlor\\System\\Crypt::makeCryptPassword($password),\n\t\t\t\t\t\t'name' => $name,\n\t\t\t\t\t\t'firstname' => $firstname,\n\t\t\t\t\t\t'gender' => $gender,\n\t\t\t\t\t\t'company' => $company,\n\t\t\t\t\t\t'street' => $street,\n\t\t\t\t\t\t'zipcode' => $zipcode,\n\t\t\t\t\t\t'city' => $city,\n\t\t\t\t\t\t'phone' => $phone,\n\t\t\t\t\t\t'fax' => $fax,\n\t\t\t\t\t\t'email' => $email,\n\t\t\t\t\t\t'customerno' => $customernumber,\n\t\t\t\t\t\t'lang' => $def_language,\n\t\t\t\t\t\t'api_allowed' => $api_allowed,\n\t\t\t\t\t\t'docroot' => $documentroot,\n\t\t\t\t\t\t'guid' => $guid,\n\t\t\t\t\t\t'diskspace' => $diskspace,\n\t\t\t\t\t\t'traffic' => $traffic,\n\t\t\t\t\t\t'subdomains' => $subdomains,\n\t\t\t\t\t\t'emails' => $emails,\n\t\t\t\t\t\t'email_accounts' => $email_accounts,\n\t\t\t\t\t\t'email_forwarders' => $email_forwarders,\n\t\t\t\t\t\t'email_quota' => $email_quota,\n\t\t\t\t\t\t'ftps' => $ftps,\n\t\t\t\t\t\t'mysqls' => $mysqls,\n\t\t\t\t\t\t'phpenabled' => $phpenabled,\n\t\t\t\t\t\t'allowed_phpconfigs' => empty($allowed_phpconfigs) ? \"\" : json_encode($allowed_phpconfigs),\n\t\t\t\t\t\t'imap' => $email_imap,\n\t\t\t\t\t\t'pop3' => $email_pop3,\n\t\t\t\t\t\t'perlenabled' => $perlenabled,\n\t\t\t\t\t\t'dnsenabled' => $dnsenabled,\n\t\t\t\t\t\t'logviewenabled' => $logviewenabled,\n\t\t\t\t\t\t'theme' => $_theme,\n\t\t\t\t\t\t'custom_notes' => $custom_notes,\n\t\t\t\t\t\t'custom_notes_show' => $custom_notes_show\n\t\t\t\t\t);\n\n\t\t\t\t\t$ins_stmt = Database::prepare(\"\n\t\t\t\t\t\tINSERT INTO `\" . TABLE_PANEL_CUSTOMERS . \"` SET\n\t\t\t\t\t\t`adminid` = :adminid,\n\t\t\t\t\t\t`loginname` = :loginname,\n\t\t\t\t\t\t`password` = :passwd,\n\t\t\t\t\t\t`name` = :name,\n\t\t\t\t\t\t`firstname` = :firstname,\n\t\t\t\t\t\t`gender` = :gender,\n\t\t\t\t\t\t`company` = :company,\n\t\t\t\t\t\t`street` = :street,\n\t\t\t\t\t\t`zipcode` = :zipcode,\n\t\t\t\t\t\t`city` = :city,\n\t\t\t\t\t\t`phone` = :phone,\n\t\t\t\t\t\t`fax` = :fax,\n\t\t\t\t\t\t`email` = :email,\n\t\t\t\t\t\t`customernumber` = :customerno,\n\t\t\t\t\t\t`def_language` = :lang,\n\t\t\t\t\t\t`api_allowed` = :api_allowed,\n\t\t\t\t\t\t`documentroot` = :docroot,\n\t\t\t\t\t\t`guid` = :guid,\n\t\t\t\t\t\t`diskspace` = :diskspace,\n\t\t\t\t\t\t`traffic` = :traffic,\n\t\t\t\t\t\t`subdomains` = :subdomains,\n\t\t\t\t\t\t`emails` = :emails,\n\t\t\t\t\t\t`email_accounts` = :email_accounts,\n\t\t\t\t\t\t`email_forwarders` = :email_forwarders,\n\t\t\t\t\t\t`email_quota` = :email_quota,\n\t\t\t\t\t\t`ftps` = :ftps,\n\t\t\t\t\t\t`mysqls` = :mysqls,\n\t\t\t\t\t\t`standardsubdomain` = '0',\n\t\t\t\t\t\t`phpenabled` = :phpenabled,\n\t\t\t\t\t\t`allowed_phpconfigs` = :allowed_phpconfigs,\n\t\t\t\t\t\t`imap` = :imap,\n\t\t\t\t\t\t`pop3` = :pop3,\n\t\t\t\t\t\t`perlenabled` = :perlenabled,\n\t\t\t\t\t\t`dnsenabled` = :dnsenabled,\n\t\t\t\t\t\t`logviewenabled` = :logviewenabled,\n\t\t\t\t\t\t`theme` = :theme,\n\t\t\t\t\t\t`custom_notes` = :custom_notes,\n\t\t\t\t\t\t`custom_notes_show` = :custom_notes_show\n\t\t\t\t\t\");\n\t\t\t\t\tDatabase::pexecute($ins_stmt, $ins_data, true, true);\n\n\t\t\t\t\t$customerid = Database::lastInsertId();\n\t\t\t\t\t$ins_data['customerid'] = $customerid;\n\n\t\t\t\t\t// update admin resource-usage\n\t\t\t\t\tif ($mysqls != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'mysqls_used', '', (int) $mysqls);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($emails != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'emails_used', '', (int) $emails);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($email_accounts != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'email_accounts_used', '', (int) $email_accounts);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($email_forwarders != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'email_forwarders_used', '', (int) $email_forwarders);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($email_quota != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'email_quota_used', '', (int) $email_quota);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($subdomains != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'subdomains_used', '', (int) $subdomains);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($ftps != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'ftps_used', '', (int) $ftps);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (($diskspace / 1024) != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'diskspace_used', '', (int) $diskspace);\n\t\t\t\t\t}\n\n\t\t\t\t\t// update last guid\n\t\t\t\t\tSettings::Set('system.lastguid', $guid, true);\n\n\t\t\t\t\tif ($accountnumber != intval(Settings::Get('system.lastaccountnumber'))) {\n\t\t\t\t\t\t// update last account number\n\t\t\t\t\t\tSettings::Set('system.lastaccountnumber', $accountnumber, true);\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_INFO, \"[API] added customer '\" . $loginname . \"'\");\n\t\t\t\t\tunset($ins_data);\n\n\t\t\t\t\t// insert task to create homedir etc.\n\t\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::CREATE_HOME, $loginname, $guid, $guid, $store_defaultindex);\n\n\t\t\t\t\t// Using filesystem - quota, insert a task which cleans the filesystem - quota\n\t\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::CREATE_QUOTA);\n\n\t\t\t\t\t// Add htpasswd for the stats-pages\n\t\t\t\t\t$htpasswdPassword = \\Froxlor\\System\\Crypt::makeCryptPassword($password, true);\n\n\t\t\t\t\t$ins_stmt = Database::prepare(\"\n\t\t\t\t\t\tINSERT INTO `\" . TABLE_PANEL_HTPASSWDS . \"` SET\n\t\t\t\t\t\t`customerid` = :customerid,\n\t\t\t\t\t\t`username` = :username,\n\t\t\t\t\t\t`password` = :passwd,\n\t\t\t\t\t\t`path` = :path\n\t\t\t\t\t\");\n\t\t\t\t\t$ins_data = array(\n\t\t\t\t\t\t'customerid' => $customerid,\n\t\t\t\t\t\t'username' => $loginname,\n\t\t\t\t\t\t'passwd' => $htpasswdPassword\n\t\t\t\t\t);\n\n\t\t\t\t\t$stats_folder = 'webalizer';\n\t\t\t\t\tif (Settings::Get('system.awstats_enabled') == '1') {\n\t\t\t\t\t\t$stats_folder = 'awstats';\n\t\t\t\t\t}\n\t\t\t\t\t$ins_data['path'] = \\Froxlor\\FileDir::makeCorrectDir($documentroot . '/' . $stats_folder . '/');\n\t\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] automatically added \" . $stats_folder . \" htpasswd for user '\" . $loginname . \"'\");\n\t\t\t\t\tDatabase::pexecute($ins_stmt, $ins_data, true, true);\n\n\t\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::REBUILD_VHOST);\n\n\t\t\t\t\t// add default FTP-User\n\t\t\t\t\t// also, add froxlor-local user to ftp-group (if exists!) to\n\t\t\t\t\t// allow access to customer-directories from within the panel, which\n\t\t\t\t\t// is necessary when pathedit = Dropdown\n\t\t\t\t\t$local_users = array(\n\t\t\t\t\t\tSettings::Get('system.httpuser')\n\t\t\t\t\t);\n\t\t\t\t\tif ((int) Settings::Get('system.mod_fcgid_ownvhost') == 1 || (int) Settings::Get('phpfpm.enabled_ownvhost') == 1) {\n\t\t\t\t\t\tif ((int) Settings::Get('system.mod_fcgid') == 1) {\n\t\t\t\t\t\t\t$local_user = Settings::Get('system.mod_fcgid_httpuser');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$local_user = Settings::Get('phpfpm.vhost_httpuser');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// check froxlor-local user membership in ftp-group\n\t\t\t\t\t\t// without this check addition may duplicate user in list if httpuser == local_user\n\t\t\t\t\t\tif (in_array($local_user, $local_users) == false) {\n\t\t\t\t\t\t\t$local_users[] = $local_user;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$this->apiCall('Ftps.add', array(\n\t\t\t\t\t\t'customerid' => $customerid,\n\t\t\t\t\t\t'path' => '/',\n\t\t\t\t\t\t'ftp_password' => $password,\n\t\t\t\t\t\t'ftp_description' => \"Default\",\n\t\t\t\t\t\t'sendinfomail' => 0,\n\t\t\t\t\t\t'ftp_username' => $loginname,\n\t\t\t\t\t\t'additional_members' => $local_users,\n\t\t\t\t\t\t'is_defaultuser' => 1\n\t\t\t\t\t));\n\n\t\t\t\t\t$_stdsubdomain = '';\n\t\t\t\t\tif ($createstdsubdomain == '1') {\n\t\t\t\t\t\tif (Settings::Get('system.stdsubdomain') !== null && Settings::Get('system.stdsubdomain') != '') {\n\t\t\t\t\t\t\t$_stdsubdomain = $loginname . '.' . Settings::Get('system.stdsubdomain');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$_stdsubdomain = $loginname . '.' . Settings::Get('system.hostname');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$ins_data = array(\n\t\t\t\t\t\t\t'domain' => $_stdsubdomain,\n\t\t\t\t\t\t\t'customerid' => $customerid,\n\t\t\t\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t\t\t\t'docroot' => $documentroot,\n\t\t\t\t\t\t\t'phpenabled' => $phpenabled,\n\t\t\t\t\t\t\t'openbasedir' => '1'\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$domainid = - 1;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t$std_domain = $this->apiCall('Domains.add', $ins_data);\n\t\t\t\t\t\t\t$domainid = $std_domain['id'];\n\t\t\t\t\t\t} catch (\\Exception $e) {\n\t\t\t\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_ERR, \"[API] Unable to add standard-subdomain: \" . $e->getMessage());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ($domainid > 0) {\n\t\t\t\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET `standardsubdomain` = :domainid WHERE `customerid` = :customerid\n\t\t\t\t\t\t\t\");\n\t\t\t\t\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t\t\t\t\t'domainid' => $domainid,\n\t\t\t\t\t\t\t\t'customerid' => $customerid\n\t\t\t\t\t\t\t), true, true);\n\t\t\t\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] automatically added standardsubdomain for user '\" . $loginname . \"'\");\n\t\t\t\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::REBUILD_VHOST);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($sendpassword == '1') {\n\n\t\t\t\t\t\t$srv_hostname = Settings::Get('system.hostname');\n\t\t\t\t\t\tif (Settings::Get('system.froxlordirectlyviahostname') == '0') {\n\t\t\t\t\t\t\t$srv_hostname .= '/' . basename(\\Froxlor\\Froxlor::getInstallDir());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$srv_ip_stmt = Database::prepare(\"\n\t\t\t\t\t\t\tSELECT ip, port FROM `\" . TABLE_PANEL_IPSANDPORTS . \"`\n\t\t\t\t\t\t\tWHERE `id` = :defaultip\n\t\t\t\t\t\t\");\n\t\t\t\t\t\t$default_ips = Settings::Get('system.defaultip');\n\t\t\t\t\t\t$default_ips = explode(',', $default_ips);\n\t\t\t\t\t\t$srv_ip = Database::pexecute_first($srv_ip_stmt, array(\n\t\t\t\t\t\t\t'defaultip' => reset($default_ips)\n\t\t\t\t\t\t), true, true);\n\n\t\t\t\t\t\t$replace_arr = array(\n\t\t\t\t\t\t\t'FIRSTNAME' => $firstname,\n\t\t\t\t\t\t\t'NAME' => $name,\n\t\t\t\t\t\t\t'COMPANY' => $company,\n\t\t\t\t\t\t\t'SALUTATION' => \\Froxlor\\User::getCorrectUserSalutation(array(\n\t\t\t\t\t\t\t\t'firstname' => $firstname,\n\t\t\t\t\t\t\t\t'name' => $name,\n\t\t\t\t\t\t\t\t'company' => $company\n\t\t\t\t\t\t\t)),\n\t\t\t\t\t\t\t'CUSTOMER_NO' => $customernumber,\n\t\t\t\t\t\t\t'USERNAME' => $loginname,\n\t\t\t\t\t\t\t'PASSWORD' => $password,\n\t\t\t\t\t\t\t'SERVER_HOSTNAME' => $srv_hostname,\n\t\t\t\t\t\t\t'SERVER_IP' => isset($srv_ip['ip']) ? $srv_ip['ip'] : '',\n\t\t\t\t\t\t\t'SERVER_PORT' => isset($srv_ip['port']) ? $srv_ip['port'] : '',\n\t\t\t\t\t\t\t'DOMAINNAME' => $_stdsubdomain\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// get template for mail subject\n\t\t\t\t\t\t$mail_subject = $this->getMailTemplate(array(\n\t\t\t\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t\t\t\t'def_language' => $def_language\n\t\t\t\t\t\t), 'mails', 'createcustomer_subject', $replace_arr, $this->lng['mails']['createcustomer']['subject']);\n\t\t\t\t\t\t// get template for mail body\n\t\t\t\t\t\t$mail_body = $this->getMailTemplate(array(\n\t\t\t\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t\t\t\t'def_language' => $def_language\n\t\t\t\t\t\t), 'mails', 'createcustomer_mailbody', $replace_arr, $this->lng['mails']['createcustomer']['mailbody']);\n\n\t\t\t\t\t\t$_mailerror = false;\n\t\t\t\t\t\t$mailerr_msg = \"\";\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t$this->mailer()->Subject = $mail_subject;\n\t\t\t\t\t\t\t$this->mailer()->AltBody = $mail_body;\n\t\t\t\t\t\t\t$this->mailer()->msgHTML(str_replace(\"\\n\", \"<br />\", $mail_body));\n\t\t\t\t\t\t\t$this->mailer()->addAddress($email, \\Froxlor\\User::getCorrectUserSalutation(array(\n\t\t\t\t\t\t\t\t'firstname' => $firstname,\n\t\t\t\t\t\t\t\t'name' => $name,\n\t\t\t\t\t\t\t\t'company' => $company\n\t\t\t\t\t\t\t)));\n\t\t\t\t\t\t\t$this->mailer()->send();\n\t\t\t\t\t\t} catch (\\PHPMailer\\PHPMailer\\Exception $e) {\n\t\t\t\t\t\t\t$mailerr_msg = $e->errorMessage();\n\t\t\t\t\t\t\t$_mailerror = true;\n\t\t\t\t\t\t} catch (\\Exception $e) {\n\t\t\t\t\t\t\t$mailerr_msg = $e->getMessage();\n\t\t\t\t\t\t\t$_mailerror = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ($_mailerror) {\n\t\t\t\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_ERR, \"[API] Error sending mail: \" . $mailerr_msg);\n\t\t\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('errorsendingmail', $email, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$this->mailer()->clearAddresses();\n\t\t\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] automatically sent password to user '\" . $loginname . \"'\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] added customer '\" . $loginname . \"'\");\n\n\t\t\t\t$result = $this->apiCall('Customers.get', array(\n\t\t\t\t\t'loginname' => $loginname\n\t\t\t\t));\n\t\t\t\treturn $this->response(200, \"successful\", $result);\n\t\t\t}\n\t\t\tthrow new \\Exception(\"No more resources available\", 406);\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * update customer entry by either id or loginname, customer can only change language, password and theme\n\t *\n\t * @param int $id\n\t *        \toptional, the customer-id\n\t * @param string $loginname\n\t *        \toptional, the loginname\n\t * @param string $email\n\t * @param string $name\n\t *        \toptional if company is set, else required\n\t * @param string $firstname\n\t *        \toptional if company is set, else required\n\t * @param string $company\n\t *        \toptional but required if name/firstname empty\n\t * @param string $street\n\t *        \toptional\n\t * @param string $zipcode\n\t *        \toptional\n\t * @param string $city\n\t *        \toptional\n\t * @param string $phone\n\t *        \toptional\n\t * @param string $fax\n\t *        \toptional\n\t * @param int $customernumber\n\t *        \toptional\n\t * @param string $def_language,\n\t *        \toptional, default is system-default language\n\t * @param bool $api_allowed\n\t *        \toptional, default is true if system setting api.enabled is true, else false\n\t * @param int $gender\n\t *        \toptional, 0 = no-gender, 1 = male, 2 = female\n\t * @param string $custom_notes\n\t *        \toptional notes\n\t * @param bool $custom_notes_show\n\t *        \toptional, whether to show the content of custom_notes to the customer, default 0 (false)\n\t * @param string $new_customer_password\n\t *        \toptional, iset new password\n\t * @param bool $sendpassword\n\t *        \toptional, whether to send the password to the customer after creation, default 0 (false)\n\t * @param int $move_to_admin\n\t *        \toptional, if valid admin-id is given here, the customer's admin/reseller can be changed\n\t * @param bool $deactivated\n\t *        \toptional, if 1 (true) the customer can be deactivated/suspended\n\t * @param int $diskspace\n\t *        \toptional disk-space available for customer in MB, default 0\n\t * @param bool $diskspace_ul\n\t *        \toptional, whether customer should have unlimited diskspace, default 0 (false)\n\t * @param int $traffic\n\t *        \toptional traffic available for customer in GB, default 0\n\t * @param bool $traffic_ul\n\t *        \toptional, whether customer should have unlimited traffic, default 0 (false)\n\t * @param int $subdomains\n\t *        \toptional amount of subdomains available for customer, default 0\n\t * @param bool $subdomains_ul\n\t *        \toptional, whether customer should have unlimited subdomains, default 0 (false)\n\t * @param int $emails\n\t *        \toptional amount of emails available for customer, default 0\n\t * @param bool $emails_ul\n\t *        \toptional, whether customer should have unlimited emails, default 0 (false)\n\t * @param int $email_accounts\n\t *        \toptional amount of email-accounts available for customer, default 0\n\t * @param bool $email_accounts_ul\n\t *        \toptional, whether customer should have unlimited email-accounts, default 0 (false)\n\t * @param int $email_forwarders\n\t *        \toptional amount of email-forwarders available for customer, default 0\n\t * @param bool $email_forwarders_ul\n\t *        \toptional, whether customer should have unlimited email-forwarders, default 0 (false)\n\t * @param int $email_quota\n\t *        \toptional size of email-quota available for customer in MB, default is system-setting mail_quota\n\t * @param bool $email_quota_ul\n\t *        \toptional, whether customer should have unlimited email-quota, default 0 (false)\n\t * @param bool $email_imap\n\t *        \toptional, whether to allow IMAP access, default 0 (false)\n\t * @param bool $email_pop3\n\t *        \toptional, whether to allow POP3 access, default 0 (false)\n\t * @param int $ftps\n\t *        \toptional amount of ftp-accounts available for customer, default 0\n\t * @param bool $ftps_ul\n\t *        \toptional, whether customer should have unlimited ftp-accounts, default 0 (false)\n\t * @param int $mysqls\n\t *        \toptional amount of mysql-databases available for customer, default 0\n\t * @param bool $mysqls_ul\n\t *        \toptional, whether customer should have unlimited mysql-databases, default 0 (false)\n\t * @param bool $createstdsubdomain\n\t *        \toptional, whether to create a standard-subdomain ([loginname].froxlor-hostname.tld), default 1 (if customer has std-subdomain) else 0 (false)\n\t * @param bool $phpenabled\n\t *        \toptional, whether to allow usage of PHP, default 0 (false)\n\t * @param array $allowed_phpconfigs\n\t *        \toptional, array of IDs of php-config that the customer is allowed to use, default empty (none)\n\t * @param bool $perlenabled\n\t *        \toptional, whether to allow usage of Perl/CGI, default 0 (false)\n\t * @param bool $dnsenabled\n\t *        \toptional, whether to allow usage of the DNS editor (requires activated nameserver in settings), default 0 (false)\n\t * @param bool $logviewenabled\n\t *        \toptional, whether to allow access to webserver access/error-logs, default 0 (false)\n\t * @param string $theme\n\t *        \toptional, change theme\n\t *        \t\n\t * @access admin, customer\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function update()\n\t{\n\t\t$id = $this->getParam('id', true, 0);\n\t\t$ln_optional = ($id <= 0 ? false : true);\n\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t$result = $this->apiCall('Customers.get', array(\n\t\t\t'id' => $id,\n\t\t\t'loginname' => $loginname\n\t\t));\n\t\t$id = $result['customerid'];\n\n\t\tif ($this->isAdmin()) {\n\t\t\t// parameters\n\t\t\t$move_to_admin = (int) ($this->getParam('move_to_admin', true, 0));\n\n\t\t\t$idna_convert = new \\Froxlor\\Idna\\IdnaWrapper();\n\t\t\t$email = $this->getParam('email', true, $idna_convert->decode($result['email'] ?? ''));\n\t\t\t$name = $this->getParam('name', true, $result['name']);\n\t\t\t$firstname = $this->getParam('firstname', true, $result['firstname']);\n\t\t\t$company_required = empty($result['company']) && ((! empty($name) && empty($firstname)) || (empty($name) && ! empty($firstname)) || (empty($name) && empty($firstname)));\n\t\t\t$company = $this->getParam('company', ($company_required ? false : true), $result['company']);\n\t\t\t$street = $this->getParam('street', true, $result['street']);\n\t\t\t$zipcode = $this->getParam('zipcode', true, $result['zipcode']);\n\t\t\t$city = $this->getParam('city', true, $result['city']);\n\t\t\t$phone = $this->getParam('phone', true, $result['phone']);\n\t\t\t$fax = $this->getParam('fax', true, $result['fax']);\n\t\t\t$customernumber = $this->getParam('customernumber', true, $result['customernumber']);\n\t\t\t$def_language = $this->getParam('def_language', true, $result['def_language']);\n\t\t\t$api_allowed = $this->getBoolParam('api_allowed', true, $result['api_allowed']);\n\t\t\t$gender = (int) $this->getParam('gender', true, $result['gender']);\n\t\t\t$custom_notes = $this->getParam('custom_notes', true, $result['custom_notes']);\n\t\t\t$custom_notes_show = $this->getBoolParam('custom_notes_show', true, $result['custom_notes_show']);\n\n\t\t\t$dec_places = Settings::Get('panel.decimal_places');\n\t\t\t$diskspace = $this->getUlParam('diskspace', 'diskspace_ul', true, round($result['diskspace'] / 1024, $dec_places));\n\t\t\t$traffic = $this->getUlParam('traffic', 'traffic_ul', true, round($result['traffic'] / (1024 * 1024), $dec_places));\n\t\t\t$subdomains = $this->getUlParam('subdomains', 'subdomains_ul', true, $result['subdomains']);\n\t\t\t$emails = $this->getUlParam('emails', 'emails_ul', true, $result['emails']);\n\t\t\t$email_accounts = $this->getUlParam('email_accounts', 'email_accounts_ul', true, $result['email_accounts']);\n\t\t\t$email_forwarders = $this->getUlParam('email_forwarders', 'email_forwarders_ul', true, $result['email_forwarders']);\n\t\t\t$email_quota = $this->getUlParam('email_quota', 'email_quota_ul', true, $result['email_quota']);\n\t\t\t$email_imap = $this->getParam('email_imap', true, $result['imap']);\n\t\t\t$email_pop3 = $this->getParam('email_pop3', true, $result['pop3']);\n\t\t\t$ftps = $this->getUlParam('ftps', 'ftps_ul', true, $result['ftps']);\n\t\t\t$mysqls = $this->getUlParam('mysqls', 'mysqls_ul', true, $result['mysqls']);\n\t\t\t$createstdsubdomain = $this->getBoolParam('createstdsubdomain', true, ($result['standardsubdomain'] != 0 ? 1 : 0));\n\t\t\t$password = $this->getParam('new_customer_password', true, '');\n\t\t\t$phpenabled = $this->getBoolParam('phpenabled', true, $result['phpenabled']);\n\t\t\t$allowed_phpconfigs = $this->getParam('allowed_phpconfigs', true, json_decode($result['allowed_phpconfigs'], true));\n\t\t\t$perlenabled = $this->getBoolParam('perlenabled', true, $result['perlenabled']);\n\t\t\t$dnsenabled = $this->getBoolParam('dnsenabled', true, $result['dnsenabled']);\n\t\t\t$logviewenabled = $this->getBoolParam('logviewenabled', true, $result['logviewenabled']);\n\t\t\t$deactivated = $this->getBoolParam('deactivated', true, $result['deactivated']);\n\t\t\t$theme = $this->getParam('theme', true, $result['theme']);\n\t\t} else {\n\t\t\t// allowed parameters\n\t\t\t$def_language = $this->getParam('def_language', true, $result['def_language']);\n\t\t\t$password = $this->getParam('new_customer_password', true, '');\n\t\t\t$theme = $this->getParam('theme', true, $result['theme']);\n\t\t}\n\n\t\t// validation\n\t\tif ($this->isAdmin()) {\n\t\t\t$idna_convert = new \\Froxlor\\Idna\\IdnaWrapper();\n\t\t\t$name = \\Froxlor\\Validate\\Validate::validate($name, 'name', '', '', array(), true);\n\t\t\t$firstname = \\Froxlor\\Validate\\Validate::validate($firstname, 'first name', '', '', array(), true);\n\t\t\t$company = \\Froxlor\\Validate\\Validate::validate($company, 'company', '', '', array(), true);\n\t\t\t$street = \\Froxlor\\Validate\\Validate::validate($street, 'street', '', '', array(), true);\n\t\t\t$zipcode = \\Froxlor\\Validate\\Validate::validate($zipcode, 'zipcode', '/^[0-9 \\-A-Z]*$/', '', array(), true);\n\t\t\t$city = \\Froxlor\\Validate\\Validate::validate($city, 'city', '', '', array(), true);\n\t\t\t$phone = \\Froxlor\\Validate\\Validate::validate($phone, 'phone', '/^[0-9\\- \\+\\(\\)\\/]*$/', '', array(), true);\n\t\t\t$fax = \\Froxlor\\Validate\\Validate::validate($fax, 'fax', '/^[0-9\\- \\+\\(\\)\\/]*$/', '', array(), true);\n\t\t\t$email = $idna_convert->encode(\\Froxlor\\Validate\\Validate::validate($email, 'email', '', '', array(), true));\n\t\t\t$customernumber = \\Froxlor\\Validate\\Validate::validate($customernumber, 'customer number', '/^[A-Za-z0-9 \\-]*$/Di', '', array(), true);\n\t\t\t$custom_notes = \\Froxlor\\Validate\\Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $custom_notes), 'custom_notes', \\Froxlor\\Validate\\Validate::REGEX_CONF_TEXT, '', array(), true);\n\t\t\tif (! empty($allowed_phpconfigs)) {\n\t\t\t\t$allowed_phpconfigs = array_map('intval', $allowed_phpconfigs);\n\t\t\t}\n\t\t}\n\t\t$def_language = \\Froxlor\\Validate\\Validate::validate($def_language, 'default language', '', '', array(), true);\n\t\t$theme = \\Froxlor\\Validate\\Validate::validate($theme, 'theme', '', '', array(), true);\n\n\t\tif (Settings::Get('system.mail_quota_enabled') != '1') {\n\t\t\t$email_quota = - 1;\n\t\t}\n\n\t\tif (empty($theme)) {\n\t\t\t$theme = Settings::Get('panel.default_theme');\n\t\t}\n\n\t\tif ($this->isAdmin()) {\n\n\t\t\t$diskspace = $diskspace * 1024;\n\t\t\t$traffic = $traffic * 1024 * 1024;\n\n\t\t\tif (((($this->getUserDetail('diskspace_used') + $diskspace - $result['diskspace']) > $this->getUserDetail('diskspace')) && ($this->getUserDetail('diskspace') / 1024) != '-1') || ((($this->getUserDetail('mysqls_used') + $mysqls - $result['mysqls']) > $this->getUserDetail('mysqls')) && $this->getUserDetail('mysqls') != '-1') || ((($this->getUserDetail('emails_used') + $emails - $result['emails']) > $this->getUserDetail('emails')) && $this->getUserDetail('emails') != '-1') || ((($this->getUserDetail('email_accounts_used') + $email_accounts - $result['email_accounts']) > $this->getUserDetail('email_accounts')) && $this->getUserDetail('email_accounts') != '-1') || ((($this->getUserDetail('email_forwarders_used') + $email_forwarders - $result['email_forwarders']) > $this->getUserDetail('email_forwarders')) && $this->getUserDetail('email_forwarders') != '-1') || ((($this->getUserDetail('email_quota_used') + $email_quota - $result['email_quota']) > $this->getUserDetail('email_quota')) && $this->getUserDetail('email_quota') != '-1' && Settings::Get('system.mail_quota_enabled') == '1') || ((($this->getUserDetail('ftps_used') + $ftps - $result['ftps']) > $this->getUserDetail('ftps')) && $this->getUserDetail('ftps') != '-1') || ((($this->getUserDetail('subdomains_used') + $subdomains - $result['subdomains']) > $this->getUserDetail('subdomains')) && $this->getUserDetail('subdomains') != '-1') || (($diskspace / 1024) == '-1' && ($this->getUserDetail('diskspace') / 1024) != '-1') || ($mysqls == '-1' && $this->getUserDetail('mysqls') != '-1') || ($emails == '-1' && $this->getUserDetail('emails') != '-1') || ($email_accounts == '-1' && $this->getUserDetail('email_accounts') != '-1') || ($email_forwarders == '-1' && $this->getUserDetail('email_forwarders') != '-1') || ($email_quota == '-1' && $this->getUserDetail('email_quota') != '-1' && Settings::Get('system.mail_quota_enabled') == '1') || ($ftps == '-1' && $this->getUserDetail('ftps') != '-1') || ($subdomains == '-1' && $this->getUserDetail('subdomains') != '-1')) {\n\t\t\t\t\\Froxlor\\UI\\Response::standard_error('youcantallocatemorethanyouhave', '', true);\n\t\t\t}\n\n\t\t\tif ($email == '') {\n\t\t\t\t\\Froxlor\\UI\\Response::standard_error(array(\n\t\t\t\t\t'stringisempty',\n\t\t\t\t\t'emailadd'\n\t\t\t\t), '', true);\n\t\t\t} elseif (! \\Froxlor\\Validate\\Validate::validateEmail($email)) {\n\t\t\t\t\\Froxlor\\UI\\Response::standard_error('emailiswrong', $email, true);\n\t\t\t}\n\t\t}\n\n\t\tif ($password != '') {\n\t\t\t$password = \\Froxlor\\System\\Crypt::validatePassword($password, true);\n\t\t\t$password = \\Froxlor\\System\\Crypt::makeCryptPassword($password);\n\t\t} else {\n\t\t\t$password = $result['password'];\n\t\t}\n\n\t\tif ($this->isAdmin()) {\n\t\t\tif ($createstdsubdomain != '1' || $deactivated) {\n\t\t\t\t$createstdsubdomain = '0';\n\t\t\t}\n\n\t\t\tif ($createstdsubdomain == '1' && $result['standardsubdomain'] == '0') {\n\n\t\t\t\tif (Settings::Get('system.stdsubdomain') !== null && Settings::Get('system.stdsubdomain') != '') {\n\t\t\t\t\t$_stdsubdomain = $result['loginname'] . '.' . Settings::Get('system.stdsubdomain');\n\t\t\t\t} else {\n\t\t\t\t\t$_stdsubdomain = $result['loginname'] . '.' . Settings::Get('system.hostname');\n\t\t\t\t}\n\n\t\t\t\t$ins_data = array(\n\t\t\t\t\t'domain' => $_stdsubdomain,\n\t\t\t\t\t'customerid' => $result['customerid'],\n\t\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t\t'docroot' => $result['documentroot'],\n\t\t\t\t\t'phpenabled' => $phpenabled,\n\t\t\t\t\t'openbasedir' => '1'\n\t\t\t\t);\n\t\t\t\t$domainid = - 1;\n\t\t\t\ttry {\n\t\t\t\t\t$std_domain = $this->apiCall('Domains.add', $ins_data);\n\t\t\t\t\t$domainid = $std_domain['id'];\n\t\t\t\t} catch (\\Exception $e) {\n\t\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_ERR, \"[API] Unable to add standard-subdomain: \" . $e->getMessage());\n\t\t\t\t}\n\n\t\t\t\tif ($domainid > 0) {\n\t\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET `standardsubdomain` = :domainid WHERE `customerid` = :customerid\n\t\t\t\t\t\t\");\n\t\t\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t\t\t'domainid' => $domainid,\n\t\t\t\t\t\t'customerid' => $result['customerid']\n\t\t\t\t\t), true, true);\n\t\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] automatically added standardsubdomain for user '\" . $result['loginname'] . \"'\");\n\t\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::REBUILD_VHOST);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($createstdsubdomain == '0' && $result['standardsubdomain'] != '0') {\n\t\t\t\ttry {\n\t\t\t\t\t$std_domain = $this->apiCall('Domains.delete', array(\n\t\t\t\t\t\t'id' => $result['standardsubdomain'],\n\t\t\t\t\t\t'is_stdsubdomain' => 1\n\t\t\t\t\t));\n\t\t\t\t} catch (\\Exception $e) {\n\t\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_ERR, \"[API] Unable to delete standard-subdomain: \" . $e->getMessage());\n\t\t\t\t}\n\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] automatically deleted standardsubdomain for user '\" . $result['loginname'] . \"'\");\n\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::REBUILD_VHOST);\n\t\t\t}\n\n\t\t\tif ($phpenabled != $result['phpenabled'] || $perlenabled != $result['perlenabled'] || $email != $result['email']) {\n\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::REBUILD_VHOST);\n\t\t\t}\n\n\t\t\t// activate/deactivate customer services\n\t\t\tif ($deactivated != $result['deactivated']) {\n\n\t\t\t\t$yesno = ($deactivated ? 'N' : 'Y');\n\t\t\t\t$pop3 = ($deactivated ? '0' : (int) $result['pop3']);\n\t\t\t\t$imap = ($deactivated ? '0' : (int) $result['imap']);\n\n\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\tUPDATE `\" . TABLE_MAIL_USERS . \"` SET `postfix`= :yesno, `pop3` = :pop3, `imap` = :imap WHERE `customerid` = :customerid\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t\t'yesno' => $yesno,\n\t\t\t\t\t'pop3' => $pop3,\n\t\t\t\t\t'imap' => $imap,\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t));\n\n\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\tUPDATE `\" . TABLE_FTP_USERS . \"` SET `login_enabled` = :yesno WHERE `customerid` = :customerid\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t\t'yesno' => $yesno,\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t));\n\n\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\t\t\tUPDATE `\" . TABLE_PANEL_DOMAINS . \"` SET `deactivated`= :deactivated WHERE `customerid` = :customerid\");\n\t\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t\t'deactivated' => $deactivated,\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t));\n\n\t\t\t\t// Retrieve customer's databases\n\t\t\t\t$databases_stmt = Database::prepare(\"SELECT * FROM \" . TABLE_PANEL_DATABASES . \" WHERE customerid = :customerid ORDER BY `dbserver`\");\n\t\t\t\tDatabase::pexecute($databases_stmt, array(\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t));\n\n\t\t\t\tDatabase::needRoot(true);\n\t\t\t\t$last_dbserver = 0;\n\n\t\t\t\t$dbm = new \\Froxlor\\Database\\DbManager($this->logger());\n\n\t\t\t\t// For each of them\n\t\t\t\t$priv_changed = false;\n\t\t\t\twhile ($row_database = $databases_stmt->fetch(\\PDO::FETCH_ASSOC)) {\n\n\t\t\t\t\tif ($last_dbserver != $row_database['dbserver']) {\n\t\t\t\t\t\t$dbm->getManager()->flushPrivileges();\n\t\t\t\t\t\tDatabase::needRoot(true, $row_database['dbserver']);\n\t\t\t\t\t\t$last_dbserver = $row_database['dbserver'];\n\t\t\t\t\t}\n\n\t\t\t\t\tforeach (array_unique(explode(',', Settings::Get('system.mysql_access_host'))) as $mysql_access_host) {\n\t\t\t\t\t\t$mysql_access_host = trim($mysql_access_host);\n\n\t\t\t\t\t\t// Prevent access, if deactivated\n\t\t\t\t\t\tif ($deactivated) {\n\t\t\t\t\t\t\t// failsafe if user has been deleted manually (requires MySQL 4.1.2+)\n\t\t\t\t\t\t\t$dbm->getManager()->disableUser($row_database['databasename'], $mysql_access_host);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Otherwise grant access\n\t\t\t\t\t\t\t$dbm->getManager()->enableUser($row_database['databasename'], $mysql_access_host);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$priv_changed = true;\n\t\t\t\t}\n\n\t\t\t\t// At last flush the new privileges\n\t\t\t\tif ($priv_changed) {\n\t\t\t\t\t$dbm->getManager()->flushPrivileges();\n\t\t\t\t}\n\t\t\t\tDatabase::needRoot(false);\n\n\t\t\t\t// reactivate/deactivate api-keys\n\t\t\t\t$valid_until = $deactivated ? 0 : - 1;\n\t\t\t\t$stmt = Database::prepare(\"UPDATE `\" . TABLE_API_KEYS . \"` SET `valid_until` = :vu WHERE `customerid` = :id\");\n\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'vu' => $valid_until\n\t\t\t\t), true, true);\n\n\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_INFO, \"[API] \" . ($deactivated ? 'deactivated' : 'reactivated') . \" user '\" . $result['loginname'] . \"'\");\n\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::REBUILD_VHOST);\n\t\t\t}\n\n\t\t\t// Disable or enable POP3 Login for customers Mail Accounts\n\t\t\tif ($email_pop3 != $result['pop3']) {\n\t\t\t\t$upd_stmt = Database::prepare(\"UPDATE `\" . TABLE_MAIL_USERS . \"` SET `pop3` = :pop3 WHERE `customerid` = :customerid\");\n\t\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t\t'pop3' => $email_pop3,\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t));\n\t\t\t}\n\n\t\t\t// Disable or enable IMAP Login for customers Mail Accounts\n\t\t\tif ($email_imap != $result['imap']) {\n\t\t\t\t$upd_stmt = Database::prepare(\"UPDATE `\" . TABLE_MAIL_USERS . \"` SET `imap` = :imap WHERE `customerid` = :customerid\");\n\t\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t\t'imap' => $email_imap,\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t));\n\t\t\t}\n\t\t}\n\n\t\t$upd_data = array(\n\t\t\t'customerid' => $id,\n\t\t\t'passwd' => $password,\n\t\t\t'lang' => $def_language,\n\t\t\t'theme' => $theme\n\t\t);\n\n\t\tif ($this->isAdmin()) {\n\t\t\t$admin_upd_data = array(\n\t\t\t\t'name' => $name,\n\t\t\t\t'firstname' => $firstname,\n\t\t\t\t'gender' => $gender,\n\t\t\t\t'company' => $company,\n\t\t\t\t'street' => $street,\n\t\t\t\t'zipcode' => $zipcode,\n\t\t\t\t'city' => $city,\n\t\t\t\t'phone' => $phone,\n\t\t\t\t'fax' => $fax,\n\t\t\t\t'email' => $email,\n\t\t\t\t'customerno' => $customernumber,\n\t\t\t\t'diskspace' => $diskspace,\n\t\t\t\t'traffic' => $traffic,\n\t\t\t\t'subdomains' => $subdomains,\n\t\t\t\t'emails' => $emails,\n\t\t\t\t'email_accounts' => $email_accounts,\n\t\t\t\t'email_forwarders' => $email_forwarders,\n\t\t\t\t'email_quota' => $email_quota,\n\t\t\t\t'ftps' => $ftps,\n\t\t\t\t'mysqls' => $mysqls,\n\t\t\t\t'deactivated' => $deactivated,\n\t\t\t\t'phpenabled' => $phpenabled,\n\t\t\t\t'allowed_phpconfigs' => empty($allowed_phpconfigs) ? \"\" : json_encode($allowed_phpconfigs),\n\t\t\t\t'imap' => $email_imap,\n\t\t\t\t'pop3' => $email_pop3,\n\t\t\t\t'perlenabled' => $perlenabled,\n\t\t\t\t'dnsenabled' => $dnsenabled,\n\t\t\t\t'logviewenabled' => $logviewenabled,\n\t\t\t\t'custom_notes' => $custom_notes,\n\t\t\t\t'custom_notes_show' => $custom_notes_show,\n\t\t\t\t'api_allowed' => $api_allowed\n\t\t\t);\n\t\t\t$upd_data = $upd_data + $admin_upd_data;\n\t\t}\n\n\t\t$upd_query = \"UPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET\n\t\t\t\t`def_language` = :lang,\n\t\t\t\t`password` = :passwd,\n\t\t\t\t`theme` = :theme\";\n\n\t\tif ($this->isAdmin()) {\n\t\t\t$admin_upd_query = \",\n\t\t\t\t`name` = :name,\n\t\t\t\t`firstname` = :firstname,\n\t\t\t\t`gender` = :gender,\n\t\t\t\t`company` = :company,\n\t\t\t\t`street` = :street,\n\t\t\t\t`zipcode` = :zipcode,\n\t\t\t\t`city` = :city,\n\t\t\t\t`phone` = :phone,\n\t\t\t\t`fax` = :fax,\n\t\t\t\t`email` = :email,\n\t\t\t\t`customernumber` = :customerno,\n\t\t\t\t`diskspace` = :diskspace,\n\t\t\t\t`traffic` = :traffic,\n\t\t\t\t`subdomains` = :subdomains,\n\t\t\t\t`emails` = :emails,\n\t\t\t\t`email_accounts` = :email_accounts,\n\t\t\t\t`email_forwarders` = :email_forwarders,\n\t\t\t\t`ftps` = :ftps,\n\t\t\t\t`mysqls` = :mysqls,\n\t\t\t\t`deactivated` = :deactivated,\n\t\t\t\t`phpenabled` = :phpenabled,\n\t\t\t\t`allowed_phpconfigs` = :allowed_phpconfigs,\n\t\t\t\t`email_quota` = :email_quota,\n\t\t\t\t`imap` = :imap,\n\t\t\t\t`pop3` = :pop3,\n\t\t\t\t`perlenabled` = :perlenabled,\n\t\t\t\t`dnsenabled` = :dnsenabled,\n\t\t\t\t`logviewenabled` = :logviewenabled,\n\t\t\t\t`custom_notes` = :custom_notes,\n\t\t\t\t`custom_notes_show` = :custom_notes_show,\n\t\t\t\t`api_allowed` = :api_allowed\";\n\t\t\t$upd_query .= $admin_upd_query;\n\t\t}\n\t\t$upd_query .= \" WHERE `customerid` = :customerid\";\n\t\t$upd_stmt = Database::prepare($upd_query);\n\t\tDatabase::pexecute($upd_stmt, $upd_data);\n\n\t\tif ($this->isAdmin()) {\n\t\t\t// Using filesystem - quota, insert a task which cleans the filesystem - quota\n\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::CREATE_QUOTA);\n\n\t\t\t$admin_update_query = \"UPDATE `\" . TABLE_PANEL_ADMINS . \"` SET `customers_used` = `customers_used` \";\n\n\t\t\tif ($mysqls != '-1' || $result['mysqls'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `mysqls_used` = `mysqls_used` \";\n\n\t\t\t\tif ($mysqls != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int) $mysqls . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['mysqls'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int) $result['mysqls'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($emails != '-1' || $result['emails'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `emails_used` = `emails_used` \";\n\n\t\t\t\tif ($emails != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int) $emails . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['emails'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int) $result['emails'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($email_accounts != '-1' || $result['email_accounts'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `email_accounts_used` = `email_accounts_used` \";\n\n\t\t\t\tif ($email_accounts != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int) $email_accounts . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['email_accounts'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int) $result['email_accounts'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($email_forwarders != '-1' || $result['email_forwarders'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `email_forwarders_used` = `email_forwarders_used` \";\n\n\t\t\t\tif ($email_forwarders != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int) $email_forwarders . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['email_forwarders'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int) $result['email_forwarders'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($email_quota != '-1' || $result['email_quota'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `email_quota_used` = `email_quota_used` \";\n\n\t\t\t\tif ($email_quota != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int) $email_quota . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['email_quota'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int) $result['email_quota'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($subdomains != '-1' || $result['subdomains'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `subdomains_used` = `subdomains_used` \";\n\n\t\t\t\tif ($subdomains != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int) $subdomains . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['subdomains'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int) $result['subdomains'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($ftps != '-1' || $result['ftps'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `ftps_used` = `ftps_used` \";\n\n\t\t\t\tif ($ftps != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int) $ftps . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['ftps'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int) $result['ftps'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (($diskspace / 1024) != '-1' || ($result['diskspace'] / 1024) != '-1') {\n\t\t\t\t$admin_update_query .= \", `diskspace_used` = `diskspace_used` \";\n\n\t\t\t\tif (($diskspace / 1024) != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int) $diskspace . \" \";\n\t\t\t\t}\n\t\t\t\tif (($result['diskspace'] / 1024) != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int) $result['diskspace'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$admin_update_query .= \" WHERE `adminid` = '\" . (int) $result['adminid'] . \"'\";\n\t\t\tDatabase::query($admin_update_query);\n\t\t}\n\n\t\t$this->logger()->logAction($this->isAdmin() ? \\Froxlor\\FroxlorLogger::ADM_ACTION : \\Froxlor\\FroxlorLogger::USR_ACTION, LOG_INFO, \"[API] edited user '\" . $result['loginname'] . \"'\");\n\n\t\t/*\n\t\t * move customer to another admin/reseller; #1166\n\t\t */\n\t\tif ($this->isAdmin()) {\n\t\t\tif ($move_to_admin > 0 && $move_to_admin != $result['adminid']) {\n\t\t\t\t$move_result = $this->apiCall('Customers.move', array(\n\t\t\t\t\t'id' => $result['customerid'],\n\t\t\t\t\t'adminid' => $move_to_admin\n\t\t\t\t));\n\t\t\t\tif ($move_result != true) {\n\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('moveofcustomerfailed', $move_result, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$result = $this->apiCall('Customers.get', array(\n\t\t\t'id' => $result['customerid']\n\t\t));\n\t\treturn $this->response(200, \"successful\", $result);\n\t}\n\n\t/**\n\t * delete a customer entry by either id or loginname\n\t *\n\t * @param int $id\n\t *        \toptional, the customer-id\n\t * @param string $loginname\n\t *        \toptional, the loginname\n\t * @param bool $delete_userfiles\n\t *        \toptional, default false\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function delete()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = ($id <= 0 ? false : true);\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\t\t\t$delete_userfiles = $this->getParam('delete_userfiles', true, 0);\n\n\t\t\t$result = $this->apiCall('Customers.get', array(\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t));\n\t\t\t$id = $result['customerid'];\n\n\t\t\t$databases_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_DATABASES . \"`\n\t\t\t\tWHERE `customerid` = :id ORDER BY `dbserver`\n\t\t\t\");\n\t\t\tDatabase::pexecute($databases_stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t));\n\t\t\tDatabase::needRoot(true);\n\t\t\t$last_dbserver = 0;\n\n\t\t\t$dbm = new \\Froxlor\\Database\\DbManager($this->logger());\n\n\t\t\t$priv_changed = false;\n\t\t\twhile ($row_database = $databases_stmt->fetch(\\PDO::FETCH_ASSOC)) {\n\t\t\t\tif ($last_dbserver != $row_database['dbserver']) {\n\t\t\t\t\tDatabase::needRoot(true, $row_database['dbserver']);\n\t\t\t\t\t$dbm->getManager()->flushPrivileges();\n\t\t\t\t\t$last_dbserver = $row_database['dbserver'];\n\t\t\t\t}\n\t\t\t\t$dbm->getManager()->deleteDatabase($row_database['databasename']);\n\t\t\t\t$priv_changed = true;\n\t\t\t}\n\t\t\tif ($priv_changed) {\n\t\t\t\t$dbm->getManager()->flushPrivileges();\n\t\t\t}\n\t\t\tDatabase::needRoot(false);\n\n\t\t\t// delete customer itself\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_CUSTOMERS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// delete customer databases\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_DATABASES . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// first gather all domain-id's to clean up panel_domaintoip, dns-entries and certificates accordingly\n\t\t\t$did_stmt = Database::prepare(\"SELECT `id`, `domain` FROM `\" . TABLE_PANEL_DOMAINS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($did_stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\t\t\twhile ($row = $did_stmt->fetch(\\PDO::FETCH_ASSOC)) {\n\t\t\t\t// remove domain->ip connection\n\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_DOMAINTOIP . \"` WHERE `id_domain` = :did\");\n\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t'did' => $row['id']\n\t\t\t\t), true, true);\n\t\t\t\t// remove domain->dns entries\n\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_DOMAIN_DNS . \"` WHERE `domain_id` = :did\");\n\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t'did' => $row['id']\n\t\t\t\t), true, true);\n\t\t\t\t// remove domain->certificates entries\n\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_DOMAIN_SSL_SETTINGS . \"` WHERE `domainid` = :did\");\n\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t'did' => $row['id']\n\t\t\t\t), true, true);\n\t\t\t\t// remove domains DNS from powerDNS if used, #581\n\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::DELETE_DOMAIN_PDNS, $row['domain']);\n\t\t\t\t// remove domain from acme.sh / lets encrypt if used\n\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::DELETE_DOMAIN_SSL, $row['domain']);\n\t\t\t}\n\t\t\t// remove customer domains\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_DOMAINS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\t\t\t$domains_deleted = $stmt->rowCount();\n\n\t\t\t// delete htpasswds\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_HTPASSWDS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// delete htaccess options\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_HTACCESS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// delete potential existing sessions\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_SESSIONS . \"` WHERE `userid` = :id AND `adminsession` = '0'\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// delete traffic information\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_TRAFFIC . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// remove diskspace analysis\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_DISKSPACE . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// delete mail-accounts\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_MAIL_USERS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// delete mail-addresses\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_MAIL_VIRTUAL . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// gather ftp-user names\n\t\t\t$result2_stmt = Database::prepare(\"SELECT `username` FROM `\" . TABLE_FTP_USERS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($result2_stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\t\t\twhile ($row = $result2_stmt->fetch(\\PDO::FETCH_ASSOC)) {\n\t\t\t\t// delete ftp-quotatallies by username\n\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_FTP_QUOTATALLIES . \"` WHERE `name` = :name\");\n\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t'name' => $row['username']\n\t\t\t\t), true, true);\n\t\t\t}\n\n\t\t\t// remove ftp-group\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_FTP_GROUPS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// remove ftp-users\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_FTP_USERS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// remove api-keys\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_API_KEYS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// Delete all waiting \"create user\" -tasks for this user, #276\n\t\t\t// Note: the WHERE selects part of a serialized array, but it should be safe this way\n\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_PANEL_TASKS . \"`\n\t\t\t\tWHERE `type` = '2' AND `data` LIKE :loginname\n\t\t\t\");\n\t\t\tDatabase::pexecute($del_stmt, array(\n\t\t\t\t'loginname' => \"%:{$result['loginname']};%\"\n\t\t\t), true, true);\n\n\t\t\t// update admin-resource-usage\n\t\t\tAdmins::decreaseUsage($this->getUserDetail('adminid'), 'customers_used');\n\t\t\tAdmins::decreaseUsage($this->getUserDetail('adminid'), 'domains_used', '', (int) ($domains_deleted - $result['subdomains_used']));\n\n\t\t\tif ($result['mysqls'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($this->getUserDetail('adminid'), 'mysqls_used', '', (int) $result['mysqls']);\n\t\t\t}\n\n\t\t\tif ($result['emails'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($this->getUserDetail('adminid'), 'emails_used', '', (int) $result['emails']);\n\t\t\t}\n\n\t\t\tif ($result['email_accounts'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($this->getUserDetail('adminid'), 'email_accounts_used', '', (int) $result['email_accounts']);\n\t\t\t}\n\n\t\t\tif ($result['email_forwarders'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($this->getUserDetail('adminid'), 'email_forwarders_used', '', (int) $result['email_forwarders']);\n\t\t\t}\n\n\t\t\tif ($result['email_quota'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($this->getUserDetail('adminid'), 'email_quota_used', '', (int) $result['email_quota']);\n\t\t\t}\n\n\t\t\tif ($result['subdomains'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($this->getUserDetail('adminid'), 'subdomains_used', '', (int) $result['subdomains']);\n\t\t\t}\n\n\t\t\tif ($result['ftps'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($this->getUserDetail('adminid'), 'ftps_used', '', (int) $result['ftps']);\n\t\t\t}\n\n\t\t\tif (($result['diskspace'] / 1024) != '-1') {\n\t\t\t\tAdmins::decreaseUsage($this->getUserDetail('adminid'), 'diskspace_used', '', (int) $result['diskspace']);\n\t\t\t}\n\n\t\t\t// rebuild configs\n\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::REBUILD_VHOST);\n\n\t\t\t// Using nameserver, insert a task which rebuilds the server config\n\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::REBUILD_DNS);\n\n\t\t\tif ($delete_userfiles == 1) {\n\t\t\t\t// insert task to remove the customers files from the filesystem\n\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::DELETE_CUSTOMER_FILES, $result['loginname']);\n\t\t\t}\n\n\t\t\t// Using filesystem - quota, insert a task which cleans the filesystem - quota\n\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::CREATE_QUOTA);\n\n\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] deleted customer '\" . $result['loginname'] . \"'\");\n\t\t\treturn $this->response(200, \"successful\", $result);\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * unlock a locked customer by either id or loginname\n\t *\n\t * @param int $id\n\t *        \toptional, the customer-id\n\t * @param string $loginname\n\t *        \toptional, the loginname\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function unlock()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = ($id <= 0 ? false : true);\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t\t$result = $this->apiCall('Customers.get', array(\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t));\n\t\t\t$id = $result['customerid'];\n\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET\n\t\t\t\t`loginfail_count` = '0'\n\t\t\t\tWHERE `customerid`= :id\n\t\t\t\");\n\t\t\tDatabase::pexecute($result_stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\t\t\t// set the new value for result-array\n\t\t\t$result['loginfail_count'] = 0;\n\n\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] unlocked customer '\" . $result['loginname'] . \"'\");\n\t\t\treturn $this->response(200, \"successful\", $result);\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * Function to move a given customer to a given admin/reseller\n\t * and update all its references accordingly\n\t *\n\t * @param int $id\n\t *        \toptional, the customer-id\n\t * @param string $loginname\n\t *        \toptional, the loginname\n\t * @param int $adminid\n\t *        \ttarget-admin-id\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function move()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t$adminid = $this->getParam('adminid');\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = ($id <= 0 ? false : true);\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t\t$c_result = $this->apiCall('Customers.get', array(\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t));\n\t\t\t$id = $c_result['customerid'];\n\n\t\t\t// check if target-admin is the current admin\n\t\t\tif ($adminid == $c_result['adminid']) {\n\t\t\t\tthrow new \\Exception(\"Cannot move customer to the same admin/reseller as he currently is assigned to\", 406);\n\t\t\t}\n\n\t\t\t// get target admin\n\t\t\t$a_result = $this->apiCall('Admins.get', array(\n\t\t\t\t'id' => $adminid\n\t\t\t));\n\n\t\t\t// Update customer entry\n\t\t\t$updCustomer_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET `adminid` = :adminid WHERE `customerid` = :cid\n\t\t\t\");\n\t\t\tDatabase::pexecute($updCustomer_stmt, array(\n\t\t\t\t'adminid' => $adminid,\n\t\t\t\t'cid' => $id\n\t\t\t), true, true);\n\n\t\t\t// Update customer-domains\n\t\t\t$updDomains_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_DOMAINS . \"` SET `adminid` = :adminid WHERE `customerid` = :cid\n\t\t\t\");\n\t\t\tDatabase::pexecute($updDomains_stmt, array(\n\t\t\t\t'adminid' => $adminid,\n\t\t\t\t'cid' => $id\n\t\t\t), true, true);\n\n\t\t\t// now, recalculate the resource-usage for the old and the new admin\n\t\t\t\\Froxlor\\User::updateCounters(false);\n\n\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_INFO, \"[API] moved user '\" . $c_result['loginname'] . \"' from admin/reseller '\" . $c_result['adminname'] . \" to admin/reseller '\" . $a_result['loginname'] . \"'\");\n\n\t\t\t$result = $this->apiCall('Customers.get', array(\n\t\t\t\t'id' => $c_result['customerid']\n\t\t\t));\n\t\t\treturn $this->response(200, \"successful\", $result);\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * increase resource-usage\n\t *\n\t * @param int $customerid\n\t * @param string $resource\n\t * @param string $extra\n\t *        \toptional, default empty\n\t * @param int $increase_by\n\t *        \toptional, default 1\n\t */\n\tpublic static function increaseUsage($customerid = 0, $resource = null, $extra = '', $increase_by = 1)\n\t{\n\t\tself::updateResourceUsage(TABLE_PANEL_CUSTOMERS, 'customerid', $customerid, '+', $resource, $extra, $increase_by);\n\t}\n\n\t/**\n\t * decrease resource-usage\n\t *\n\t * @param int $customerid\n\t * @param string $resource\n\t * @param string $extra\n\t *        \toptional, default empty\n\t * @param int $decrease_by\n\t *        \toptional, default 1\n\t */\n\tpublic static function decreaseUsage($customerid = 0, $resource = null, $extra = '', $decrease_by = 1)\n\t{\n\t\tself::updateResourceUsage(TABLE_PANEL_CUSTOMERS, 'customerid', $customerid, '-', $resource, $extra, $decrease_by);\n\t}\n}\n"], "fixing_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2003-2009 the SysCP Team (see authors).\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * For the full copyright and license information, please view the COPYING\n * file that was distributed with this source code. You can also view the\n * COPYING file online at http://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  (c) the authors\n * @author     Florian Lippert <flo@syscp.org> (2003-2009)\n * @author     Froxlor team <team@froxlor.org> (2010-)\n * @license    GPLv2 http://files.froxlor.org/misc/COPYING.txt\n * @package    Panel\n *\n */\ndefine('AREA', 'login');\nrequire './lib/init.php';\n\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Settings;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Validate\\Validate;\n\nif ($action == '') {\n\t$action = 'login';\n}\n\nif (session_status() == PHP_SESSION_NONE) {\n\tini_set(\"session.name\", \"s\");\n\tini_set(\"url_rewriter.tags\", \"\");\n\tini_set(\"session.use_cookies\", false);\n\tini_set(\"session.cookie_httponly\", true);\n\tini_set(\"session.cookie_secure\", $is_ssl);\n\tsession_id('login');\n\tsession_start();\n}\n\nif ($action == '2fa_entercode') {\n\t// page for entering the 2FA code after successful login\n\tif (! isset($_SESSION) || ! isset($_SESSION['secret_2fa'])) {\n\t\t// no session - redirect to index\n\t\t\\Froxlor\\UI\\Response::redirectTo('index.php');\n\t\texit();\n\t}\n\t// show template to enter code\n\teval(\"echo \\\"\" . \\Froxlor\\UI\\Template::getTemplate('2fa/entercode', true) . \"\\\";\");\n} elseif ($action == '2fa_verify') {\n\t// verify code from 2fa code-enter form\n\tif (! isset($_SESSION) || ! isset($_SESSION['secret_2fa'])) {\n\t\t// no session - redirect to index\n\t\t\\Froxlor\\UI\\Response::redirectTo('index.php');\n\t\texit();\n\t}\n\t$code = isset($_POST['2fa_code']) ? $_POST['2fa_code'] : null;\n\t// verify entered code\n\t$tfa = new \\Froxlor\\FroxlorTwoFactorAuth('Froxlor');\n\t$result = ($_SESSION['secret_2fa'] == 'email' ? true : $tfa->verifyCode($_SESSION['secret_2fa'], $code, 3));\n\t// either the code is valid when using authenticator-app, or we will select userdata by id and entered code\n\t// which is temporarily stored for the customer when using email-2fa\n\tif ($result) {\n\t\t// get user-data\n\t\t$table = $_SESSION['uidtable_2fa'];\n\t\t$field = $_SESSION['uidfield_2fa'];\n\t\t$uid = $_SESSION['uid_2fa'];\n\t\t$isadmin = $_SESSION['unfo_2fa'];\n\t\t$sel_param = array(\n\t\t\t'uid' => $uid\n\t\t);\n\t\tif ($_SESSION['secret_2fa'] == 'email') {\n\t\t\t// verify code by selecting user by id and the temp. stored code,\n\t\t\t// so only if it's the correct code, we get the user-data\n\t\t\t$sel_stmt = Database::prepare(\"SELECT * FROM $table WHERE `\" . $field . \"` = :uid AND `data_2fa` = :code\");\n\t\t\t$sel_param['code'] = $code;\n\t\t} else {\n\t\t\t// Authenticator-verification has already happened at this point, so just get the user-data\n\t\t\t$sel_stmt = Database::prepare(\"SELECT * FROM $table WHERE `\" . $field . \"` = :uid\");\n\t\t}\n\t\t$userinfo = Database::pexecute_first($sel_stmt, $sel_param);\n\t\t// whoops, no (valid) user? Start again\n\t\tif (empty($userinfo)) {\n\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t'showmessage' => '2'\n\t\t\t));\n\t\t}\n\t\t// set fields in $userinfo required for finishLogin()\n\t\t$userinfo['adminsession'] = $isadmin;\n\t\t$userinfo['userid'] = $uid;\n\n\t\t// if not successful somehow - start again\n\t\tif (! finishLogin($userinfo)) {\n\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t'showmessage' => '2'\n\t\t\t));\n\t\t}\n\n\t\t// when using email-2fa, remove the one-time-code\n\t\tif ($userinfo['type_2fa'] == '1') {\n\t\t\t$del_stmt = Database::prepare(\"UPDATE $table SET `data_2fa` = '' WHERE `\" . $field . \"` = :uid\");\n\t\t\t$userinfo = Database::pexecute_first($del_stmt, array(\n\t\t\t\t'uid' => $uid\n\t\t\t));\n\t\t}\n\t\texit();\n\t}\n\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t'showmessage' => '2'\n\t));\n\texit();\n} elseif ($action == 'login') {\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$loginname = \\Froxlor\\Validate\\Validate::validate($_POST['loginname'], 'loginname');\n\t\t$password = \\Froxlor\\Validate\\Validate::validate($_POST['password'], 'password');\n\n\t\t$stmt = Database::prepare(\"SELECT `loginname` AS `customer` FROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\tWHERE `loginname`= :loginname\");\n\t\tDatabase::pexecute($stmt, array(\n\t\t\t\"loginname\" => $loginname\n\t\t));\n\t\t$row = $stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\tif ($row && $row['customer'] == $loginname) {\n\t\t\t$table = \"`\" . TABLE_PANEL_CUSTOMERS . \"`\";\n\t\t\t$uid = 'customerid';\n\t\t\t$adminsession = '0';\n\t\t\t$is_admin = false;\n\t\t} else {\n\t\t\t$is_admin = true;\n\t\t\tif ((int) Settings::Get('login.domain_login') == 1) {\n\t\t\t\t$domainname = $idna_convert->encode(preg_replace(array(\n\t\t\t\t\t'/\\:(\\d)+$/',\n\t\t\t\t\t'/^https?\\:\\/\\//'\n\t\t\t\t), '', $loginname));\n\t\t\t\t$stmt = Database::prepare(\"SELECT `customerid` FROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\t\t\tWHERE `domain` = :domain\");\n\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t\"domain\" => $domainname\n\t\t\t\t));\n\t\t\t\t$row2 = $stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\t\t\tif (isset($row2['customerid']) && $row2['customerid'] > 0) {\n\t\t\t\t\t$loginname = \\Froxlor\\Customer\\Customer::getCustomerDetail($row2['customerid'], 'loginname');\n\t\t\t\t\tif ($loginname !== false) {\n\t\t\t\t\t\t$stmt = Database::prepare(\"SELECT `loginname` AS `customer` FROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\t\t\t\tWHERE `loginname`= :loginname\");\n\t\t\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t\t\t\"loginname\" => $loginname\n\t\t\t\t\t\t));\n\t\t\t\t\t\t$row3 = $stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\t\t\tif ($row3 && $row3['customer'] == $loginname) {\n\t\t\t\t\t\t\t$table = \"`\" . TABLE_PANEL_CUSTOMERS . \"`\";\n\t\t\t\t\t\t\t$uid = 'customerid';\n\t\t\t\t\t\t\t$adminsession = '0';\n\t\t\t\t\t\t\t$is_admin = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ((\\Froxlor\\Froxlor::hasUpdates() || \\Froxlor\\Froxlor::hasDbUpdates()) && $is_admin == false) {\n\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php');\n\t\t\texit();\n\t\t}\n\n\t\tif ($is_admin) {\n\t\t\tif (\\Froxlor\\Froxlor::hasUpdates() || \\Froxlor\\Froxlor::hasDbUpdates()) {\n\t\t\t\t$stmt = Database::prepare(\"SELECT `loginname` AS `admin` FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\t\tWHERE `loginname`= :loginname\n\t\t\t\t\tAND `change_serversettings` = '1'\");\n\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t\"loginname\" => $loginname\n\t\t\t\t));\n\t\t\t\t$row = $stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\tif (! isset($row['admin'])) {\n\t\t\t\t\t// not an admin who can see updates\n\t\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php');\n\t\t\t\t\texit();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$stmt = Database::prepare(\"SELECT `loginname` AS `admin` FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\t\tWHERE `loginname`= :loginname\");\n\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t\"loginname\" => $loginname\n\t\t\t\t));\n\t\t\t\t$row = $stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t}\n\n\t\t\tif ($row && $row['admin'] == $loginname) {\n\t\t\t\t$table = \"`\" . TABLE_PANEL_ADMINS . \"`\";\n\t\t\t\t$uid = 'adminid';\n\t\t\t\t$adminsession = '1';\n\t\t\t} else {\n\t\t\t\t// Log failed login\n\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf(array(\n\t\t\t\t\t'loginname' => $_SERVER['REMOTE_ADDR']\n\t\t\t\t));\n\t\t\t\t$rstlog->logAction(\\Froxlor\\FroxlorLogger::LOGIN_ACTION, LOG_WARNING, \"Unknown user '\" . $loginname . \"' tried to login.\");\n\n\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t\t'showmessage' => '2'\n\t\t\t\t));\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\t$userinfo_stmt = Database::prepare(\"SELECT * FROM $table\n\t\t\tWHERE `loginname`= :loginname\");\n\t\tDatabase::pexecute($userinfo_stmt, array(\n\t\t\t\"loginname\" => $loginname\n\t\t));\n\t\t$userinfo = $userinfo_stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\tif ($userinfo['loginfail_count'] >= Settings::Get('login.maxloginattempts') && $userinfo['lastlogin_fail'] > (time() - Settings::Get('login.deactivatetime'))) {\n\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t'showmessage' => '3'\n\t\t\t));\n\t\t\texit();\n\t\t} elseif (\\Froxlor\\System\\Crypt::validatePasswordLogin($userinfo, $password, $table, $uid)) {\n\t\t\t// only show \"you're banned\" if the login was successful\n\t\t\t// because we don't want to publish that the user does exist\n\t\t\tif ($userinfo['deactivated']) {\n\t\t\t\tunset($userinfo);\n\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t\t'showmessage' => '5'\n\t\t\t\t));\n\t\t\t\texit();\n\t\t\t} else {\n\t\t\t\t// login correct\n\t\t\t\t// reset loginfail_counter, set lastlogin_succ\n\t\t\t\t$stmt = Database::prepare(\"UPDATE $table\n\t\t              SET `lastlogin_succ`= :lastlogin_succ, `loginfail_count`='0'\n\t\t              WHERE `$uid`= :uid\");\n\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t\"lastlogin_succ\" => time(),\n\t\t\t\t\t\"uid\" => $userinfo[$uid]\n\t\t\t\t));\n\t\t\t\t$userinfo['userid'] = $userinfo[$uid];\n\t\t\t\t$userinfo['adminsession'] = $adminsession;\n\t\t\t}\n\t\t} else {\n\t\t\t// login incorrect\n\t\t\t$stmt = Database::prepare(\"UPDATE $table\n\t\t\t\tSET `lastlogin_fail`= :lastlogin_fail, `loginfail_count`=`loginfail_count`+1\n\t\t\t\tWHERE `$uid`= :uid\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\"lastlogin_fail\" => time(),\n\t\t\t\t\"uid\" => $userinfo[$uid]\n\t\t\t));\n\n\t\t\t// Log failed login\n\t\t\t$rstlog = FroxlorLogger::getInstanceOf(array(\n\t\t\t\t'loginname' => $_SERVER['REMOTE_ADDR']\n\t\t\t));\n\t\t\t$rstlog->logAction(\\Froxlor\\FroxlorLogger::LOGIN_ACTION, LOG_WARNING, \"User '\" . $loginname . \"' tried to login with wrong password.\");\n\n\t\t\tunset($userinfo);\n\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t'showmessage' => '2'\n\t\t\t));\n\t\t\texit();\n\t\t}\n\n\t\t// 2FA activated\n\t\tif (Settings::Get('2fa.enabled') == '1' && $userinfo['type_2fa'] > 0) {\n\t\t\t// redirect to code-enter-page\n\t\t\t$_SESSION['secret_2fa'] = ($userinfo['type_2fa'] == 2 ? $userinfo['data_2fa'] : 'email');\n\t\t\t$_SESSION['uid_2fa'] = $userinfo[$uid];\n\t\t\t$_SESSION['uidfield_2fa'] = $uid;\n\t\t\t$_SESSION['uidtable_2fa'] = $table;\n\t\t\t$_SESSION['unfo_2fa'] = $is_admin;\n\t\t\t// send mail if type_2fa = 1 (email)\n\t\t\tif ($userinfo['type_2fa'] == 1) {\n\t\t\t\t// generate code\n\t\t\t\t$tfa = new \\Froxlor\\FroxlorTwoFactorAuth('Froxlor');\n\t\t\t\t$code = $tfa->getCode($tfa->createSecret());\n\t\t\t\t// set code for user\n\t\t\t\t$stmt = Database::prepare(\"UPDATE $table SET `data_2fa` = :d2fa WHERE `$uid` = :uid\");\n\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t\"d2fa\" => $code,\n\t\t\t\t\t\"uid\" => $userinfo[$uid]\n\t\t\t\t));\n\t\t\t\t// build up & send email\n\t\t\t\t$_mailerror = false;\n\t\t\t\t$mailerr_msg = \"\";\n\t\t\t\t$replace_arr = array(\n\t\t\t\t\t'CODE' => $code\n\t\t\t\t);\n\t\t\t\t$mail_body = html_entity_decode(\\Froxlor\\PhpHelper::replaceVariables($lng['mails']['2fa']['mailbody'], $replace_arr));\n\n\t\t\t\ttry {\n\t\t\t\t\t$mail->Subject = $lng['mails']['2fa']['subject'];\n\t\t\t\t\t$mail->AltBody = $mail_body;\n\t\t\t\t\t$mail->MsgHTML(str_replace(\"\\n\", \"<br />\", $mail_body));\n\t\t\t\t\t$mail->AddAddress($userinfo['email'], \\Froxlor\\User::getCorrectUserSalutation($userinfo));\n\t\t\t\t\t$mail->Send();\n\t\t\t\t} catch (\\PHPMailer\\PHPMailer\\Exception $e) {\n\t\t\t\t\t$mailerr_msg = $e->errorMessage();\n\t\t\t\t\t$_mailerror = true;\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t$mailerr_msg = $e->getMessage();\n\t\t\t\t\t$_mailerror = true;\n\t\t\t\t}\n\n\t\t\t\tif ($_mailerror) {\n\t\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf(array(\n\t\t\t\t\t\t'loginname' => '2fa code-sending'\n\t\t\t\t\t));\n\t\t\t\t\t$rstlog->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_ERR, \"Error sending mail: \" . $mailerr_msg);\n\t\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t\t\t'showmessage' => '4',\n\t\t\t\t\t\t'customermail' => $userinfo['email']\n\t\t\t\t\t));\n\t\t\t\t\texit();\n\t\t\t\t}\n\n\t\t\t\t$mail->ClearAddresses();\n\t\t\t}\n\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t'action' => '2fa_entercode'\n\t\t\t));\n\t\t\texit();\n\t\t}\n\n\t\tif (! finishLogin($userinfo)) {\n\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t'showmessage' => '2'\n\t\t\t));\n\t\t}\n\t\texit();\n\t} else {\n\t\t$language_options = '';\n\t\t$language_options .= \\Froxlor\\UI\\HTML::makeoption($lng['login']['profile_lng'], 'profile', 'profile', true, true);\n\n\t\tforeach ($languages as $language_file => $language_name) {\n\t\t\t$language_options .= \\Froxlor\\UI\\HTML::makeoption($language_name, $language_file, 'profile', true);\n\t\t}\n\n\t\t$smessage = isset($_GET['showmessage']) ? (int) $_GET['showmessage'] : 0;\n\t\t$message = '';\n\t\t$successmessage = '';\n\n\t\tswitch ($smessage) {\n\t\t\tcase 1:\n\t\t\t\t$successmessage = $lng['pwdreminder']['success'];\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t$message = $lng['error']['login'];\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t$message = sprintf($lng['error']['login_blocked'], Settings::Get('login.deactivatetime'));\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t$cmail = isset($_GET['customermail']) ? $_GET['customermail'] : 'unknown';\n\t\t\t\tif (!Validate::validateEmail($cmail)) {\n\t\t\t\t\t$message = str_replace('%s', 'invalid.address', $lng['error']['errorsendingmail']);\n\t\t\t\t} else {\n\t\t\t\t\t$message = str_replace('%s', $cmail, $lng['error']['errorsendingmail']);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\t$message = $lng['error']['user_banned'];\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\t$successmessage = $lng['pwdreminder']['changed'];\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\t$message = $lng['pwdreminder']['wrongcode'];\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\t$message = $lng['pwdreminder']['notallowed'];\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$update_in_progress = '';\n\t\tif (\\Froxlor\\Froxlor::hasUpdates() || \\Froxlor\\Froxlor::hasDbUpdates()) {\n\t\t\t$update_in_progress = $lng['update']['updateinprogress_onlyadmincanlogin'];\n\t\t}\n\n\t\t// Pass the last used page if needed\n\t\t$lastscript = \"\";\n\t\tif (isset($_REQUEST['script']) && $_REQUEST['script'] != \"\") {\n\t\t\t$lastscript = $_REQUEST['script'];\n\t\t\t$lastscript = str_replace(\"..\", \"\", $lastscript);\n\t\t\t$lastscript = htmlspecialchars($lastscript, ENT_QUOTES);\n\n\t\t\tif (! file_exists(__DIR__ . \"/\" . $lastscript)) {\n\t\t\t\t$lastscript = \"\";\n\t\t\t}\n\t\t}\n\t\t$lastqrystr = \"\";\n\t\tif (isset($_REQUEST['qrystr']) && $_REQUEST['qrystr'] != \"\") {\n\t\t\t$lastqrystr = htmlspecialchars($_REQUEST['qrystr'], ENT_QUOTES);\n\t\t}\n\n\t\teval(\"echo \\\"\" . \\Froxlor\\UI\\Template::getTemplate('login') . \"\\\";\");\n\t}\n}\n\nif ($action == 'forgotpwd') {\n\t$adminchecked = false;\n\t$message = '';\n\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$loginname = \\Froxlor\\Validate\\Validate::validate($_POST['loginname'], 'loginname');\n\t\t$email = \\Froxlor\\Validate\\Validate::validateEmail($_POST['loginemail'], 'email');\n\t\t$result_stmt = Database::prepare(\"SELECT `adminid`, `customerid`, `customernumber`, `firstname`, `name`, `company`, `email`, `loginname`, `def_language`, `deactivated` FROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\tWHERE `loginname`= :loginname\n\t\t\tAND `email`= :email\");\n\t\tDatabase::pexecute($result_stmt, array(\n\t\t\t\"loginname\" => $loginname,\n\t\t\t\"email\" => $email\n\t\t));\n\n\t\tif (Database::num_rows() == 0) {\n\t\t\t$result_stmt = Database::prepare(\"SELECT `adminid`, `name`, `email`, `loginname`, `def_language`, `deactivated` FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\tWHERE `loginname`= :loginname\n\t\t\t\tAND `email`= :email\");\n\t\t\tDatabase::pexecute($result_stmt, array(\n\t\t\t\t\"loginname\" => $loginname,\n\t\t\t\t\"email\" => $email\n\t\t\t));\n\n\t\t\tif (Database::num_rows() > 0) {\n\t\t\t\t$adminchecked = true;\n\t\t\t} else {\n\t\t\t\t$result_stmt = null;\n\t\t\t}\n\t\t}\n\n\t\tif ($result_stmt !== null) {\n\t\t\t$user = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\t\t/* Check whether user is banned */\n\t\t\tif ($user['deactivated']) {\n\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t\t'showmessage' => '8'\n\t\t\t\t));\n\t\t\t\texit();\n\t\t\t}\n\n\t\t\tif (($adminchecked && Settings::Get('panel.allow_preset_admin') == '1') || $adminchecked == false) {\n\t\t\t\tif ($user !== false) {\n\t\t\t\t\t// build a activation code\n\t\t\t\t\t$timestamp = time();\n\t\t\t\t\t$first = substr(md5($user['loginname'] . $timestamp . \\Froxlor\\PhpHelper::randomStr(16)), 0, 15);\n\t\t\t\t\t$third = substr(md5($user['email'] . $timestamp . \\Froxlor\\PhpHelper::randomStr(16)), - 15);\n\t\t\t\t\t$activationcode = $first . $timestamp . $third . substr(md5($third . $timestamp), 0, 10);\n\n\t\t\t\t\t// Drop all existing activation codes for this user\n\t\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_ACTIVATION . \"`\n\t\t\t\t\t\tWHERE `userid` = :userid\n\t\t\t\t\t\tAND `admin` = :admin\");\n\t\t\t\t\t$params = array(\n\t\t\t\t\t\t\"userid\" => $adminchecked ? $user['adminid'] : $user['customerid'],\n\t\t\t\t\t\t\"admin\" => $adminchecked ? 1 : 0\n\t\t\t\t\t);\n\t\t\t\t\tDatabase::pexecute($stmt, $params);\n\n\t\t\t\t\t// Add new activation code to database\n\t\t\t\t\t$stmt = Database::prepare(\"INSERT INTO `\" . TABLE_PANEL_ACTIVATION . \"`\n\t\t\t\t\t\t(userid, admin, creation, activationcode)\n\t\t\t\t\t\tVALUES (:userid, :admin, :creation, :activationcode)\");\n\t\t\t\t\t$params = array(\n\t\t\t\t\t\t\"userid\" => $adminchecked ? $user['adminid'] : $user['customerid'],\n\t\t\t\t\t\t\"admin\" => $adminchecked ? 1 : 0,\n\t\t\t\t\t\t\"creation\" => $timestamp,\n\t\t\t\t\t\t\"activationcode\" => $activationcode\n\t\t\t\t\t);\n\t\t\t\t\tDatabase::pexecute($stmt, $params);\n\n\t\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf(array(\n\t\t\t\t\t\t'loginname' => 'password_reset'\n\t\t\t\t\t));\n\t\t\t\t\t$rstlog->logAction(\\Froxlor\\FroxlorLogger::USR_ACTION, LOG_WARNING, \"User '\" . $user['loginname'] . \"' requested a link for setting a new password.\");\n\n\t\t\t\t\t// Set together our activation link\n\t\t\t\t\t$protocol = empty($_SERVER['HTTPS']) ? 'http' : 'https';\n\t\t\t\t\t// this can be a fixed value to avoid potential exploiting by modifying headers\n\t\t\t\t\t$host = Settings::Get('system.hostname'); // $_SERVER['HTTP_HOST'];\n\t\t\t\t\t$port = $_SERVER['SERVER_PORT'] != 80 ? ':' . $_SERVER['SERVER_PORT'] : '';\n\t\t\t\t\t// don't add :443 when https is used, as it is default (and just looks weird!)\n\t\t\t\t\tif ($protocol == 'https' && $_SERVER['SERVER_PORT'] == '443') {\n\t\t\t\t\t\t$port = '';\n\t\t\t\t\t}\n\t\t\t\t\t// there can be only one script to handle this so we can use a fixed value here\n\t\t\t\t\t$script = \"/index.php\"; // $_SERVER['SCRIPT_NAME'];\n\t\t\t\t\tif (Settings::Get('system.froxlordirectlyviahostname') == 0) {\n\t\t\t\t\t\t$script = \\Froxlor\\FileDir::makeCorrectFile(\"/\" . basename(__DIR__) . \"/\" . $script);\n\t\t\t\t\t}\n\t\t\t\t\t$activationlink = $protocol . '://' . $host . $port . $script . '?action=resetpwd&resetcode=' . $activationcode;\n\n\t\t\t\t\t$replace_arr = array(\n\t\t\t\t\t\t'SALUTATION' => \\Froxlor\\User::getCorrectUserSalutation($user),\n\t\t\t\t\t\t'NAME' => $user['name'],\n\t\t\t\t\t\t'FIRSTNAME' => $user['firstname'] ?? \"\",\n\t\t\t\t\t\t'COMPANY' => $user['company'] ?? \"\",\n\t\t\t\t\t\t'CUSTOMER_NO' => $user['customernumber'] ?? 0,\n\t\t\t\t\t\t'USERNAME' => $loginname,\n\t\t\t\t\t\t'LINK' => $activationlink\n\t\t\t\t\t);\n\n\t\t\t\t\t$def_language = ($user['def_language'] != '') ? $user['def_language'] : Settings::Get('panel.standardlanguage');\n\t\t\t\t\t$result_stmt = Database::prepare('SELECT `value` FROM `' . TABLE_PANEL_TEMPLATES . '`\n\t\t\t\t\t\tWHERE `adminid`= :adminid\n\t\t\t\t\t\tAND `language`= :lang\n\t\t\t\t\t\tAND `templategroup`=\\'mails\\'\n\t\t\t\t\t\tAND `varname`=\\'password_reset_subject\\'');\n\t\t\t\t\tDatabase::pexecute($result_stmt, array(\n\t\t\t\t\t\t\"adminid\" => $user['adminid'],\n\t\t\t\t\t\t\"lang\" => $def_language\n\t\t\t\t\t));\n\t\t\t\t\t$result = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\t\t$mail_subject = html_entity_decode(\\Froxlor\\PhpHelper::replaceVariables((($result['value'] != '') ? $result['value'] : $lng['mails']['password_reset']['subject']), $replace_arr));\n\n\t\t\t\t\t$result_stmt = Database::prepare('SELECT `value` FROM `' . TABLE_PANEL_TEMPLATES . '`\n\t\t\t\t\t\tWHERE `adminid`= :adminid\n\t\t\t\t\t\tAND `language`= :lang\n\t\t\t\t\t\tAND `templategroup`=\\'mails\\'\n\t\t\t\t\t\tAND `varname`=\\'password_reset_mailbody\\'');\n\t\t\t\t\tDatabase::pexecute($result_stmt, array(\n\t\t\t\t\t\t\"adminid\" => $user['adminid'],\n\t\t\t\t\t\t\"lang\" => $def_language\n\t\t\t\t\t));\n\t\t\t\t\t$result = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\t\t$mail_body = html_entity_decode(\\Froxlor\\PhpHelper::replaceVariables((($result['value'] != '') ? $result['value'] : $lng['mails']['password_reset']['mailbody']), $replace_arr));\n\n\t\t\t\t\t$_mailerror = false;\n\t\t\t\t\t$mailerr_msg = \"\";\n\t\t\t\t\ttry {\n\t\t\t\t\t\t$mail->Subject = $mail_subject;\n\t\t\t\t\t\t$mail->AltBody = $mail_body;\n\t\t\t\t\t\t$mail->MsgHTML(str_replace(\"\\n\", \"<br />\", $mail_body));\n\t\t\t\t\t\t$mail->AddAddress($user['email'], \\Froxlor\\User::getCorrectUserSalutation($user));\n\t\t\t\t\t\t$mail->Send();\n\t\t\t\t\t} catch (\\PHPMailer\\PHPMailer\\Exception $e) {\n\t\t\t\t\t\t$mailerr_msg = $e->errorMessage();\n\t\t\t\t\t\t$_mailerror = true;\n\t\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t\t$mailerr_msg = $e->getMessage();\n\t\t\t\t\t\t$_mailerror = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($_mailerror) {\n\t\t\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf(array(\n\t\t\t\t\t\t\t'loginname' => 'password_reset'\n\t\t\t\t\t\t));\n\t\t\t\t\t\t$rstlog->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_ERR, \"Error sending mail: \" . $mailerr_msg);\n\t\t\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t\t\t\t'showmessage' => '4',\n\t\t\t\t\t\t\t'customermail' => $user['email']\n\t\t\t\t\t\t));\n\t\t\t\t\t\texit();\n\t\t\t\t\t}\n\n\t\t\t\t\t$mail->ClearAddresses();\n\t\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t\t\t'showmessage' => '1'\n\t\t\t\t\t));\n\t\t\t\t\texit();\n\t\t\t\t} else {\n\t\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf(array(\n\t\t\t\t\t\t'loginname' => 'password_reset'\n\t\t\t\t\t));\n\t\t\t\t\t$rstlog->logAction(\\Froxlor\\FroxlorLogger::USR_ACTION, LOG_WARNING, \"User '\" . $loginname . \"' requested to set a new password, but was not found in database!\");\n\t\t\t\t\t$message = $lng['login']['combination_not_found'];\n\t\t\t\t}\n\n\t\t\t\tunset($user);\n\t\t\t}\n\t\t} else {\n\t\t\t$message = $lng['login']['usernotfound'];\n\t\t}\n\t}\n\n\tif ($adminchecked) {\n\t\tif (Settings::Get('panel.allow_preset_admin') != '1') {\n\t\t\t$message = $lng['pwdreminder']['notallowed'];\n\t\t\tunset($adminchecked);\n\t\t}\n\t} else {\n\t\tif (Settings::Get('panel.allow_preset') != '1') {\n\t\t\t$message = $lng['pwdreminder']['notallowed'];\n\t\t}\n\t}\n\n\teval(\"echo \\\"\" . \\Froxlor\\UI\\Template::getTemplate('fpwd') . \"\\\";\");\n}\n\nif ($action == 'resetpwd') {\n\t$message = '';\n\n\t// Remove old activation codes\n\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_ACTIVATION . \"`\n\t\tWHERE creation < :oldest\");\n\tDatabase::pexecute($stmt, array(\n\t\t\"oldest\" => time() - 86400\n\t));\n\n\tif (isset($_GET['resetcode']) && strlen($_GET['resetcode']) == 50) {\n\t\t// Check if activation code is valid\n\t\t$activationcode = $_GET['resetcode'];\n\t\t$timestamp = substr($activationcode, 15, 10);\n\t\t$third = substr($activationcode, 25, 15);\n\t\t$check = substr($activationcode, 40, 10);\n\n\t\tif (substr(md5($third . $timestamp), 0, 10) == $check && $timestamp >= time() - 86400) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\t$stmt = Database::prepare(\"SELECT `userid`, `admin` FROM `\" . TABLE_PANEL_ACTIVATION . \"`\n\t\t\t\t\tWHERE `activationcode` = :activationcode\");\n\t\t\t\t$result = Database::pexecute_first($stmt, array(\n\t\t\t\t\t\"activationcode\" => $activationcode\n\t\t\t\t));\n\n\t\t\t\tif ($result !== false) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t$new_password = \\Froxlor\\System\\Crypt::validatePassword($_POST['new_password'], true);\n\t\t\t\t\t\t$new_password_confirm = \\Froxlor\\System\\Crypt::validatePassword($_POST['new_password_confirm'], true);\n\t\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t\t$message = $e->getMessage();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (empty($message) && (empty($new_password) || $new_password != $new_password_confirm)) {\n\t\t\t\t\t\t$message = $lng['error']['newpasswordconfirmerror'];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (empty($message)) {\n\t\t\t\t\t\t// Update user password\n\t\t\t\t\t\tif ($result['admin'] == 1) {\n\t\t\t\t\t\t\t$stmt = Database::prepare(\"UPDATE `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\t\t\t\t\tSET `password` = :newpassword\n\t\t\t\t\t\t\t\tWHERE `adminid` = :userid\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$stmt = Database::prepare(\"UPDATE `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\t\t\t\t\tSET `password` = :newpassword\n\t\t\t\t\t\t\t\tWHERE `customerid` = :userid\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t\t\t\"newpassword\" => \\Froxlor\\System\\Crypt::makeCryptPassword($new_password),\n\t\t\t\t\t\t\t\"userid\" => $result['userid']\n\t\t\t\t\t\t));\n\n\t\t\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf(array(\n\t\t\t\t\t\t\t'loginname' => 'password_reset'\n\t\t\t\t\t\t));\n\t\t\t\t\t\t$rstlog->logAction(\\Froxlor\\FroxlorLogger::USR_ACTION, LOG_NOTICE, \"changed password using password reset.\");\n\n\t\t\t\t\t\t// Remove activation code from DB\n\t\t\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_ACTIVATION . \"`\n\t\t\t\t\t\t\tWHERE `activationcode` = :activationcode\n\t\t\t\t\t\t\tAND `userid` = :userid\");\n\t\t\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t\t\t\"activationcode\" => $activationcode,\n\t\t\t\t\t\t\t\"userid\" => $result['userid']\n\t\t\t\t\t\t));\n\t\t\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t\t\t\t\"showmessage\" => '6'\n\t\t\t\t\t\t));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t\t\t\"showmessage\" => '7'\n\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\teval(\"echo \\\"\" . \\Froxlor\\UI\\Template::getTemplate('rpwd') . \"\\\";\");\n\t\t} else {\n\t\t\t\\Froxlor\\UI\\Response::redirectTo('index.php', array(\n\t\t\t\t\"showmessage\" => '7'\n\t\t\t));\n\t\t}\n\t} else {\n\t\t\\Froxlor\\UI\\Response::redirectTo('index.php');\n\t}\n}\n\nfunction finishLogin($userinfo)\n{\n\tglobal $version, $dbversion, $remote_addr, $http_user_agent, $languages;\n\n\tif (isset($userinfo['userid']) && $userinfo['userid'] != '') {\n\t\t$s = \\Froxlor\\Froxlor::genSessionId();\n\n\t\tif (isset($_POST['language'])) {\n\t\t\t$language = \\Froxlor\\Validate\\Validate::validate($_POST['language'], 'language');\n\t\t\tif ($language == 'profile') {\n\t\t\t\t$language = $userinfo['def_language'];\n\t\t\t} elseif (! isset($languages[$language])) {\n\t\t\t\t$language = Settings::Get('panel.standardlanguage');\n\t\t\t}\n\t\t} else {\n\t\t\t$language = Settings::Get('panel.standardlanguage');\n\t\t}\n\n\t\tif (isset($userinfo['theme']) && $userinfo['theme'] != '') {\n\t\t\t$theme = $userinfo['theme'];\n\t\t} else {\n\t\t\t$theme = Settings::Get('panel.default_theme');\n\t\t}\n\n\t\tif (Settings::Get('session.allow_multiple_login') != '1') {\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_SESSIONS . \"`\n\t\t\t\t\tWHERE `userid` = :uid\n\t\t\t\t\tAND `adminsession` = :adminsession\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\"uid\" => $userinfo['userid'],\n\t\t\t\t\"adminsession\" => $userinfo['adminsession']\n\t\t\t));\n\t\t}\n\n\t\t// check for field 'theme' in session-table, refs #607\n\t\t// Changed with #1287 to new method\n\t\t$stmt = Database::query(\"SHOW COLUMNS FROM panel_sessions LIKE 'theme'\");\n\t\twhile ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\tif ($row['Field'] == \"theme\") {\n\t\t\t\t$has_theme = true;\n\t\t\t}\n\t\t}\n\n\t\t$params = array(\n\t\t\t\"hash\" => $s,\n\t\t\t\"userid\" => $userinfo['userid'],\n\t\t\t\"ipaddress\" => $remote_addr,\n\t\t\t\"useragent\" => $http_user_agent,\n\t\t\t\"lastactivity\" => time(),\n\t\t\t\"language\" => $language,\n\t\t\t\"adminsession\" => $userinfo['adminsession']\n\t\t);\n\n\t\tif ($has_theme) {\n\t\t\t$params[\"theme\"] = $theme;\n\t\t\t$stmt = Database::prepare(\"INSERT INTO `\" . TABLE_PANEL_SESSIONS . \"`\n\t\t\t\t\t(`hash`, `userid`, `ipaddress`, `useragent`, `lastactivity`, `language`, `adminsession`, `theme`)\n\t\t\t\t\tVALUES (:hash, :userid, :ipaddress, :useragent, :lastactivity, :language, :adminsession, :theme)\");\n\t\t} else {\n\t\t\t$stmt = Database::prepare(\"INSERT INTO `\" . TABLE_PANEL_SESSIONS . \"`\n\t\t\t\t\t(`hash`, `userid`, `ipaddress`, `useragent`, `lastactivity`, `language`, `adminsession`)\n\t\t\t\t\tVALUES (:hash, :userid, :ipaddress, :useragent, :lastactivity, :language, :adminsession)\");\n\t\t}\n\t\tDatabase::pexecute($stmt, $params);\n\n\t\t$qryparams = array();\n\t\tif (isset($_POST['qrystr']) && $_POST['qrystr'] != \"\") {\n\t\t\tparse_str(urldecode($_POST['qrystr']), $qryparams);\n\t\t}\n\t\t$qryparams['s'] = $s;\n\n\t\tif ($userinfo['adminsession'] == '1') {\n\t\t\tif (\\Froxlor\\Froxlor::hasUpdates() || \\Froxlor\\Froxlor::hasDbUpdates()) {\n\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('admin_updates.php', array(\n\t\t\t\t\t's' => $s\n\t\t\t\t));\n\t\t\t} else {\n\t\t\t\tif (isset($_POST['script']) && $_POST['script'] != \"\") {\n\t\t\t\t\tif (preg_match(\"/customer\\_/\", $_POST['script']) === 1) {\n\t\t\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('admin_customers.php', array(\n\t\t\t\t\t\t\t\"page\" => \"customers\"\n\t\t\t\t\t\t));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\\Froxlor\\UI\\Response::redirectTo($_POST['script'], $qryparams);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('admin_index.php', $qryparams);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (isset($_POST['script']) && $_POST['script'] != \"\") {\n\t\t\t\t\\Froxlor\\UI\\Response::redirectTo($_POST['script'], $qryparams);\n\t\t\t} else {\n\t\t\t\t\\Froxlor\\UI\\Response::redirectTo('customer_index.php', $qryparams);\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n", "<?php\nnamespace Froxlor\\Api\\Commands;\n\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Settings;\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * For the full copyright and license information, please view the COPYING\n * file that was distributed with this source code. You can also view the\n * COPYING file online at http://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright (c) the authors\n * @author Froxlor team <team@froxlor.org> (2010-)\n * @license GPLv2 http://files.froxlor.org/misc/COPYING.txt\n * @package API\n * @since 0.10.0\n *       \n */\nclass Admins extends \\Froxlor\\Api\\ApiCommand implements \\Froxlor\\Api\\ResourceEntity\n{\n\n\t/**\n\t * lists all admin entries\n\t *\n\t * @param array $sql_search\n\t *        \toptional array with index = fieldname, and value = array with 'op' => operator (one of <, > or =), LIKE is used if left empty and 'value' => searchvalue\n\t * @param int $sql_limit\n\t *        \toptional specify number of results to be returned\n\t * @param int $sql_offset\n\t *        \toptional specify offset for resultset\n\t * @param array $sql_orderby\n\t *        \toptional array with index = fieldname and value = ASC|DESC to order the resultset by one or more fields\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array count|list\n\t */\n\tpublic function listing()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] list admins\");\n\t\t\t$query_fields = array();\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT *\n\t\t\t\tFROM `\" . TABLE_PANEL_ADMINS . \"`\" . $this->getSearchWhere($query_fields) . $this->getOrderBy() . $this->getLimit());\n\t\t\tDatabase::pexecute($result_stmt, $query_fields, true, true);\n\t\t\t$result = array();\n\t\t\twhile ($row = $result_stmt->fetch(\\PDO::FETCH_ASSOC)) {\n\t\t\t\t$result[] = $row;\n\t\t\t}\n\t\t\treturn $this->response(200, \"successful\", array(\n\t\t\t\t'count' => count($result),\n\t\t\t\t'list' => $result\n\t\t\t));\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * returns the total number of admins for the given admin\n\t *\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function listingCount()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT COUNT(*) as num_admins\n\t\t\t\tFROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\");\n\t\t\t$result = Database::pexecute_first($result_stmt, null, true, true);\n\t\t\tif ($result) {\n\t\t\t\treturn $this->response(200, \"successful\", $result['num_admins']);\n\t\t\t}\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * return an admin entry by either id or loginname\n\t *\n\t * @param int $id\n\t *        \toptional, the admin-id\n\t * @param string $loginname\n\t *        \toptional, the loginname\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function get()\n\t{\n\t\t$id = $this->getParam('id', true, 0);\n\t\t$ln_optional = ($id <= 0 ? false : true);\n\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\tif ($this->isAdmin() && ($this->getUserDetail('change_serversettings') == 1 || ($this->getUserDetail('adminid') == $id || $this->getUserDetail('loginname') == $loginname))) {\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\tWHERE \" . ($id > 0 ? \"`adminid` = :idln\" : \"`loginname` = :idln\"));\n\t\t\t$params = array(\n\t\t\t\t'idln' => ($id <= 0 ? $loginname : $id)\n\t\t\t);\n\t\t\t$result = Database::pexecute_first($result_stmt, $params, true, true);\n\t\t\tif ($result) {\n\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] get admin '\" . $result['loginname'] . \"'\");\n\t\t\t\treturn $this->response(200, \"successful\", $result);\n\t\t\t}\n\t\t\t$key = ($id > 0 ? \"id #\" . $id : \"loginname '\" . $loginname . \"'\");\n\t\t\tthrow new \\Exception(\"Admin with \" . $key . \" could not be found\", 404);\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * create a new admin user\n\t *\n\t * @param string $name\n\t * @param string $email\n\t * @param string $new_loginname\n\t * @param string $admin_password\n\t *        \toptional, default auto-generated\n\t * @param string $def_language\n\t *        \toptional, default is system-default language\n\t * @param bool $api_allowed\n\t *        \toptional, default is true if system setting api.enabled is true, else false\n\t * @param string $custom_notes\n\t *        \toptional, default empty\n\t * @param bool $custom_notes_show\n\t *        \toptional, default false\n\t * @param int $diskspace\n\t *        \toptional, default 0\n\t * @param bool $diskspace_ul\n\t *        \toptional, default false\n\t * @param int $traffic\n\t *        \toptional, default 0\n\t * @param bool $traffic_ul\n\t *        \toptional, default false\n\t * @param int $customers\n\t *        \toptional, default 0\n\t * @param bool $customers_ul\n\t *        \toptional, default false\n\t * @param int $domains\n\t *        \toptional, default 0\n\t * @param bool $domains_ul\n\t *        \toptional, default false\n\t * @param int $subdomains\n\t *        \toptional, default 0\n\t * @param bool $subdomains_ul\n\t *        \toptional, default false\n\t * @param int $emails\n\t *        \toptional, default 0\n\t * @param bool $emails_ul\n\t *        \toptional, default false\n\t * @param int $email_accounts\n\t *        \toptional, default 0\n\t * @param bool $email_accounts_ul\n\t *        \toptional, default false\n\t * @param int $email_forwarders\n\t *        \toptional, default 0\n\t * @param bool $email_forwarders_ul\n\t *        \toptional, default false\n\t * @param int $email_quota\n\t *        \toptional, default 0\n\t * @param bool $email_quota_ul\n\t *        \toptional, default false\n\t * @param int $ftps\n\t *        \toptional, default 0\n\t * @param bool $ftps_ul\n\t *        \toptional, default false\n\t * @param int $mysqls\n\t *        \toptional, default 0\n\t * @param bool $mysqls_ul\n\t *        \toptional, default false\n\t * @param bool $customers_see_all\n\t *        \toptional, default false\n\t * @param bool $domains_see_all\n\t *        \toptional, default false\n\t * @param bool $caneditphpsettings\n\t *        \toptional, default false\n\t * @param bool $change_serversettings\n\t *        \toptional, default false\n\t * @param array $ipaddress\n\t *        \toptional, list of ip-address id's; default -1 (all IP's)\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function add()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\n\t\t\t// required parameters\n\t\t\t$name = $this->getParam('name');\n\t\t\t$email = $this->getParam('email');\n\t\t\t$loginname = $this->getParam('new_loginname');\n\n\t\t\t// parameters\n\t\t\t$def_language = $this->getParam('def_language', true, Settings::Get('panel.standardlanguage'));\n\t\t\t$api_allowed = $this->getBoolParam('api_allowed', true, Settings::Get('api.enabled'));\n\t\t\t$custom_notes = $this->getParam('custom_notes', true, '');\n\t\t\t$custom_notes_show = $this->getBoolParam('custom_notes_show', true, 0);\n\t\t\t$password = $this->getParam('admin_password', true, '');\n\n\t\t\t$diskspace = $this->getUlParam('diskspace', 'diskspace_ul', true, 0);\n\t\t\t$traffic = $this->getUlParam('traffic', 'traffic_ul', true, 0);\n\t\t\t$customers = $this->getUlParam('customers', 'customers_ul', true, 0);\n\t\t\t$domains = $this->getUlParam('domains', 'domains_ul', true, 0);\n\t\t\t$subdomains = $this->getUlParam('subdomains', 'subdomains_ul', true, 0);\n\t\t\t$emails = $this->getUlParam('emails', 'emails_ul', true, 0);\n\t\t\t$email_accounts = $this->getUlParam('email_accounts', 'email_accounts_ul', true, 0);\n\t\t\t$email_forwarders = $this->getUlParam('email_forwarders', 'email_forwarders_ul', true, 0);\n\t\t\t$email_quota = $this->getUlParam('email_quota', 'email_quota_ul', true, 0);\n\t\t\t$ftps = $this->getUlParam('ftps', 'ftps_ul', true, 0);\n\t\t\t$mysqls = $this->getUlParam('mysqls', 'mysqls_ul', true, 0);\n\n\t\t\t$customers_see_all = $this->getBoolParam('customers_see_all', true, 0);\n\t\t\t$domains_see_all = $this->getBoolParam('domains_see_all', true, 0);\n\t\t\t$caneditphpsettings = $this->getBoolParam('caneditphpsettings', true, 0);\n\t\t\t$change_serversettings = $this->getBoolParam('change_serversettings', true, 0);\n\t\t\t$ipaddress = $this->getParam('ipaddress', true, - 1);\n\n\t\t\t// validation\n\t\t\t$name = \\Froxlor\\Validate\\Validate::validate($name, 'name', \\Froxlor\\Validate\\Validate::REGEX_DESC_TEXT, '', array(), true);\n\t\t\t$idna_convert = new \\Froxlor\\Idna\\IdnaWrapper();\n\t\t\t$email = $idna_convert->encode(\\Froxlor\\Validate\\Validate::validate($email, 'email', '', '', array(), true));\n\t\t\t$def_language = \\Froxlor\\Validate\\Validate::validate($def_language, 'default language', '', '', array(), true);\n\t\t\t$custom_notes = \\Froxlor\\Validate\\Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $custom_notes), 'custom_notes', \\Froxlor\\Validate\\Validate::REGEX_CONF_TEXT, '', array(), true);\n\n\t\t\tif (Settings::Get('system.mail_quota_enabled') != '1') {\n\t\t\t\t$email_quota = - 1;\n\t\t\t}\n\n\t\t\t$password = \\Froxlor\\Validate\\Validate::validate($password, 'password', '', '', array(), true);\n\t\t\t// only check if not empty,\n\t\t\t// cause empty == generate password automatically\n\t\t\tif ($password != '') {\n\t\t\t\t$password = \\Froxlor\\System\\Crypt::validatePassword($password, true);\n\t\t\t}\n\n\t\t\t$diskspace = $diskspace * 1024;\n\t\t\t$traffic = $traffic * 1024 * 1024;\n\n\t\t\t// Check if the account already exists\n\t\t\t// do not check via api as we skip any permission checks for this task\n\t\t\t$loginname_check_stmt = Database::prepare(\"\n\t\t\t\tSELECT `loginname` FROM `\" . TABLE_PANEL_CUSTOMERS . \"` WHERE `loginname` = :login\n\t\t\t\");\n\t\t\t$loginname_check = Database::pexecute_first($loginname_check_stmt, array(\n\t\t\t\t'login' => $loginname\n\t\t\t), true, true);\n\n\t\t\t// Check if an admin with the loginname already exists\n\t\t\t// do not check via api as we skip any permission checks for this task\n\t\t\t$loginname_check_admin_stmt = Database::prepare(\"\n\t\t\t\tSELECT `loginname` FROM `\" . TABLE_PANEL_ADMINS . \"` WHERE `loginname` = :login\n\t\t\t\");\n\t\t\t$loginname_check_admin = Database::pexecute_first($loginname_check_admin_stmt, array(\n\t\t\t\t'login' => $loginname\n\t\t\t), true, true);\n\n\t\t\tif (($loginname_check && strtolower($loginname_check['loginname']) == strtolower($loginname)) || ($loginname_check_admin && strtolower($loginname_check_admin['loginname']) == strtolower($loginname))) {\n\t\t\t\t\\Froxlor\\UI\\Response::standard_error('loginnameexists', $loginname, true);\n\t\t\t} elseif (preg_match('/^' . preg_quote(Settings::Get('customer.accountprefix'), '/') . '([0-9]+)/', $loginname)) {\n\t\t\t\t// Accounts which match systemaccounts are not allowed, filtering them\n\t\t\t\t\\Froxlor\\UI\\Response::standard_error('loginnameissystemaccount', Settings::Get('customer.accountprefix'), true);\n\t\t\t} elseif (! \\Froxlor\\Validate\\Validate::validateUsername($loginname)) {\n\t\t\t\t\\Froxlor\\UI\\Response::standard_error('loginnameiswrong', $loginname, true);\n\t\t\t} elseif (! \\Froxlor\\Validate\\Validate::validateEmail($email)) {\n\t\t\t\t\\Froxlor\\UI\\Response::standard_error('emailiswrong', $email, true);\n\t\t\t} else {\n\n\t\t\t\tif ($customers_see_all != '1') {\n\t\t\t\t\t$customers_see_all = '0';\n\t\t\t\t}\n\n\t\t\t\tif ($domains_see_all != '1') {\n\t\t\t\t\t$domains_see_all = '0';\n\t\t\t\t}\n\n\t\t\t\tif ($caneditphpsettings != '1') {\n\t\t\t\t\t$caneditphpsettings = '0';\n\t\t\t\t}\n\n\t\t\t\tif ($change_serversettings != '1') {\n\t\t\t\t\t$change_serversettings = '0';\n\t\t\t\t}\n\n\t\t\t\tif ($password == '') {\n\t\t\t\t\t$password = \\Froxlor\\System\\Crypt::generatePassword();\n\t\t\t\t}\n\n\t\t\t\t$_theme = Settings::Get('panel.default_theme');\n\n\t\t\t\t$ins_data = array(\n\t\t\t\t\t'loginname' => $loginname,\n\t\t\t\t\t'password' => \\Froxlor\\System\\Crypt::makeCryptPassword($password),\n\t\t\t\t\t'name' => $name,\n\t\t\t\t\t'email' => $email,\n\t\t\t\t\t'lang' => $def_language,\n\t\t\t\t\t'api_allowed' => $api_allowed,\n\t\t\t\t\t'change_serversettings' => $change_serversettings,\n\t\t\t\t\t'customers' => $customers,\n\t\t\t\t\t'customers_see_all' => $customers_see_all,\n\t\t\t\t\t'domains' => $domains,\n\t\t\t\t\t'domains_see_all' => $domains_see_all,\n\t\t\t\t\t'caneditphpsettings' => $caneditphpsettings,\n\t\t\t\t\t'diskspace' => $diskspace,\n\t\t\t\t\t'traffic' => $traffic,\n\t\t\t\t\t'subdomains' => $subdomains,\n\t\t\t\t\t'emails' => $emails,\n\t\t\t\t\t'accounts' => $email_accounts,\n\t\t\t\t\t'forwarders' => $email_forwarders,\n\t\t\t\t\t'quota' => $email_quota,\n\t\t\t\t\t'ftps' => $ftps,\n\t\t\t\t\t'mysqls' => $mysqls,\n\t\t\t\t\t'ip' => empty($ipaddress) ? \"\" : (is_array($ipaddress) && $ipaddress > 0 ? json_encode($ipaddress) : - 1),\n\t\t\t\t\t'theme' => $_theme,\n\t\t\t\t\t'custom_notes' => $custom_notes,\n\t\t\t\t\t'custom_notes_show' => $custom_notes_show\n\t\t\t\t);\n\n\t\t\t\t$ins_stmt = Database::prepare(\"\n\t\t\t\t\tINSERT INTO `\" . TABLE_PANEL_ADMINS . \"` SET\n\t\t\t\t\t`loginname` = :loginname,\n\t\t\t\t\t`password` = :password,\n\t\t\t\t\t`name` = :name,\n\t\t\t\t\t`email` = :email,\n\t\t\t\t\t`def_language` = :lang,\n\t\t\t\t\t`api_allowed` = :api_allowed,\n\t\t\t\t\t`change_serversettings` = :change_serversettings,\n\t\t\t\t\t`customers` = :customers,\n\t\t\t\t\t`customers_see_all` = :customers_see_all,\n\t\t\t\t\t`domains` = :domains,\n\t\t\t\t\t`domains_see_all` = :domains_see_all,\n\t\t\t\t\t`caneditphpsettings` = :caneditphpsettings,\n\t\t\t\t\t`diskspace` = :diskspace,\n\t\t\t\t\t`traffic` = :traffic,\n\t\t\t\t\t`subdomains` = :subdomains,\n\t\t\t\t\t`emails` = :emails,\n\t\t\t\t\t`email_accounts` = :accounts,\n\t\t\t\t\t`email_forwarders` = :forwarders,\n\t\t\t\t\t`email_quota` = :quota,\n\t\t\t\t\t`ftps` = :ftps,\n\t\t\t\t\t`mysqls` = :mysqls,\n\t\t\t\t\t`ip` = :ip,\n\t\t\t\t\t`theme` = :theme,\n\t\t\t\t\t`custom_notes` = :custom_notes,\n\t\t\t\t\t`custom_notes_show` = :custom_notes_show\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($ins_stmt, $ins_data, true, true);\n\n\t\t\t\t$adminid = Database::lastInsertId();\n\t\t\t\t$ins_data['adminid'] = $adminid;\n\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] added admin '\" . $loginname . \"'\");\n\n\t\t\t\t// get all admin-data for return-array\n\t\t\t\t$result = $this->apiCall('Admins.get', array(\n\t\t\t\t\t'id' => $adminid\n\t\t\t\t));\n\t\t\t\treturn $this->response(200, \"successful\", $result);\n\t\t\t}\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * update an admin user by given id or loginname\n\t *\n\t * @param int $id\n\t *        \toptional, the admin-id\n\t * @param string $loginname\n\t *        \toptional, the loginname\n\t * @param string $name\n\t *        \toptional\n\t * @param string $email\n\t *        \toptional\n\t * @param string $admin_password\n\t *        \toptional, default auto-generated\n\t * @param string $def_language\n\t *        \toptional, default is system-default language\n\t * @param bool $api_allowed\n\t *        \toptional, default is true if system setting api.enabled is true, else false\n\t * @param string $custom_notes\n\t *        \toptional, default empty\n\t * @param string $theme\n\t *        \toptional\n\t * @param bool $deactivated\n\t *        \toptional, default false\n\t * @param bool $custom_notes_show\n\t *        \toptional, default false\n\t * @param int $diskspace\n\t *        \toptional, default 0\n\t * @param bool $diskspace_ul\n\t *        \toptional, default false\n\t * @param int $traffic\n\t *        \toptional, default 0\n\t * @param bool $traffic_ul\n\t *        \toptional, default false\n\t * @param int $customers\n\t *        \toptional, default 0\n\t * @param bool $customers_ul\n\t *        \toptional, default false\n\t * @param int $domains\n\t *        \toptional, default 0\n\t * @param bool $domains_ul\n\t *        \toptional, default false\n\t * @param int $subdomains\n\t *        \toptional, default 0\n\t * @param bool $subdomains_ul\n\t *        \toptional, default false\n\t * @param int $emails\n\t *        \toptional, default 0\n\t * @param bool $emails_ul\n\t *        \toptional, default false\n\t * @param int $email_accounts\n\t *        \toptional, default 0\n\t * @param bool $email_accounts_ul\n\t *        \toptional, default false\n\t * @param int $email_forwarders\n\t *        \toptional, default 0\n\t * @param bool $email_forwarders_ul\n\t *        \toptional, default false\n\t * @param int $email_quota\n\t *        \toptional, default 0\n\t * @param bool $email_quota_ul\n\t *        \toptional, default false\n\t * @param int $ftps\n\t *        \toptional, default 0\n\t * @param bool $ftps_ul\n\t *        \toptional, default false\n\t * @param int $mysqls\n\t *        \toptional, default 0\n\t * @param bool $mysqls_ul\n\t *        \toptional, default false\n\t * @param bool $customers_see_all\n\t *        \toptional, default false\n\t * @param bool $domains_see_all\n\t *        \toptional, default false\n\t * @param bool $caneditphpsettings\n\t *        \toptional, default false\n\t * @param bool $change_serversettings\n\t *        \toptional, default false\n\t * @param array $ipaddress\n\t *        \toptional, list of ip-address id's; default -1 (all IP's)\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function update()\n\t{\n\t\tif ($this->isAdmin()) {\n\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = ($id <= 0 ? false : true);\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t\t$result = $this->apiCall('Admins.get', array(\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t));\n\t\t\t$id = $result['adminid'];\n\n\t\t\tif ($this->getUserDetail('change_serversettings') == 1 || $result['adminid'] == $this->getUserDetail('adminid')) {\n\t\t\t\t// parameters\n\t\t\t\t$name = $this->getParam('name', true, $result['name']);\n\t\t\t\t$idna_convert = new \\Froxlor\\Idna\\IdnaWrapper();\n\t\t\t\t$email = $this->getParam('email', true, $idna_convert->decode($result['email'] ?? ''));\n\t\t\t\t$password = $this->getParam('admin_password', true, '');\n\t\t\t\t$def_language = $this->getParam('def_language', true, $result['def_language']);\n\t\t\t\t$custom_notes = $this->getParam('custom_notes', true, ($result['custom_notes'] ?? \"\"));\n\t\t\t\t$custom_notes_show = $this->getBoolParam('custom_notes_show', true, $result['custom_notes_show']);\n\t\t\t\t$theme = $this->getParam('theme', true, $result['theme']);\n\n\t\t\t\t// you cannot edit some of the details of yourself\n\t\t\t\tif ($result['adminid'] == $this->getUserDetail('adminid')) {\n\t\t\t\t\t$api_allowed = $result['api_allowed'];\n\t\t\t\t\t$deactivated = $result['deactivated'];\n\t\t\t\t\t$customers = $result['customers'];\n\t\t\t\t\t$domains = $result['domains'];\n\t\t\t\t\t$subdomains = $result['subdomains'];\n\t\t\t\t\t$emails = $result['emails'];\n\t\t\t\t\t$email_accounts = $result['email_accounts'];\n\t\t\t\t\t$email_forwarders = $result['email_forwarders'];\n\t\t\t\t\t$email_quota = $result['email_quota'];\n\t\t\t\t\t$ftps = $result['ftps'];\n\t\t\t\t\t$mysqls = $result['mysqls'];\n\t\t\t\t\t$customers_see_all = $result['customers_see_all'];\n\t\t\t\t\t$domains_see_all = $result['domains_see_all'];\n\t\t\t\t\t$caneditphpsettings = $result['caneditphpsettings'];\n\t\t\t\t\t$change_serversettings = $result['change_serversettings'];\n\t\t\t\t\t$diskspace = $result['diskspace'];\n\t\t\t\t\t$traffic = $result['traffic'];\n\t\t\t\t\t$ipaddress = ($result['ip'] != - 1 ? json_decode($result['ip'], true) : - 1);\n\t\t\t\t} else {\n\t\t\t\t\t$api_allowed = $this->getBoolParam('api_allowed', true, $result['api_allowed']);\n\t\t\t\t\t$deactivated = $this->getBoolParam('deactivated', true, $result['deactivated']);\n\n\t\t\t\t\t$dec_places = Settings::Get('panel.decimal_places');\n\t\t\t\t\t$diskspace = $this->getUlParam('diskspace', 'diskspace_ul', true, round($result['diskspace'] / 1024, $dec_places));\n\t\t\t\t\t$traffic = $this->getUlParam('traffic', 'traffic_ul', true, round($result['traffic'] / (1024 * 1024), $dec_places));\n\t\t\t\t\t$customers = $this->getUlParam('customers', 'customers_ul', true, $result['customers']);\n\t\t\t\t\t$domains = $this->getUlParam('domains', 'domains_ul', true, $result['domains']);\n\t\t\t\t\t$subdomains = $this->getUlParam('subdomains', 'subdomains_ul', true, $result['subdomains']);\n\t\t\t\t\t$emails = $this->getUlParam('emails', 'emails_ul', true, $result['emails']);\n\t\t\t\t\t$email_accounts = $this->getUlParam('email_accounts', 'email_accounts_ul', true, $result['email_accounts']);\n\t\t\t\t\t$email_forwarders = $this->getUlParam('email_forwarders', 'email_forwarders_ul', true, $result['email_forwarders']);\n\t\t\t\t\t$email_quota = $this->getUlParam('email_quota', 'email_quota_ul', true, $result['email_quota']);\n\t\t\t\t\t$ftps = $this->getUlParam('ftps', 'ftps_ul', true, $result['ftps']);\n\t\t\t\t\t$mysqls = $this->getUlParam('mysqls', 'mysqls_ul', true, $result['mysqls']);\n\n\t\t\t\t\t$customers_see_all = $this->getBoolParam('customers_see_all', true, $result['customers_see_all']);\n\t\t\t\t\t$domains_see_all = $this->getBoolParam('domains_see_all', true, $result['domains_see_all']);\n\t\t\t\t\t$caneditphpsettings = $this->getBoolParam('caneditphpsettings', true, $result['caneditphpsettings']);\n\t\t\t\t\t$change_serversettings = $this->getBoolParam('change_serversettings', true, $result['change_serversettings']);\n\t\t\t\t\t$ipaddress = $this->getParam('ipaddress', true, ($result['ip'] != - 1 ? json_decode($result['ip'], true) : - 1));\n\n\t\t\t\t\t$diskspace = $diskspace * 1024;\n\t\t\t\t\t$traffic = $traffic * 1024 * 1024;\n\t\t\t\t}\n\n\t\t\t\t// validation\n\t\t\t\t$name = \\Froxlor\\Validate\\Validate::validate($name, 'name', \\Froxlor\\Validate\\Validate::REGEX_DESC_TEXT, '', array(), true);\n\t\t\t\t$idna_convert = new \\Froxlor\\Idna\\IdnaWrapper();\n\t\t\t\t$email = $idna_convert->encode(\\Froxlor\\Validate\\Validate::validate($email, 'email', '', '', array(), true));\n\t\t\t\t$def_language = \\Froxlor\\Validate\\Validate::validate($def_language, 'default language', '', '', array(), true);\n\t\t\t\t$custom_notes = \\Froxlor\\Validate\\Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $custom_notes), 'custom_notes', \\Froxlor\\Validate\\Validate::REGEX_CONF_TEXT, '', array(), true);\n\t\t\t\t$theme = \\Froxlor\\Validate\\Validate::validate($theme, 'theme', '', '', array(), true);\n\t\t\t\t$password = \\Froxlor\\Validate\\Validate::validate($password, 'password', '', '', array(), true);\n\n\t\t\t\tif (Settings::Get('system.mail_quota_enabled') != '1') {\n\t\t\t\t\t$email_quota = - 1;\n\t\t\t\t}\n\n\t\t\t\tif (empty($theme)) {\n\t\t\t\t\t$theme = Settings::Get('panel.default_theme');\n\t\t\t\t}\n\n\t\t\t\tif (! \\Froxlor\\Validate\\Validate::validateEmail($email)) {\n\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('emailiswrong', $email, true);\n\t\t\t\t} else {\n\n\t\t\t\t\tif ($deactivated != '1') {\n\t\t\t\t\t\t$deactivated = '0';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($customers_see_all != '1') {\n\t\t\t\t\t\t$customers_see_all = '0';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($domains_see_all != '1') {\n\t\t\t\t\t\t$domains_see_all = '0';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($caneditphpsettings != '1') {\n\t\t\t\t\t\t$caneditphpsettings = '0';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($change_serversettings != '1') {\n\t\t\t\t\t\t$change_serversettings = '0';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($password != '') {\n\t\t\t\t\t\t$password = \\Froxlor\\System\\Crypt::validatePassword($password, true);\n\t\t\t\t\t\t$password = \\Froxlor\\System\\Crypt::makeCryptPassword($password);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$password = $result['password'];\n\t\t\t\t\t}\n\n\t\t\t\t\t// check if a resource was set to something lower\n\t\t\t\t\t// than actually used by the admin/reseller\n\t\t\t\t\t$res_warning = \"\";\n\t\t\t\t\tif ($customers != $result['customers'] && $customers != - 1 && $customers < $result['customers_used']) {\n\t\t\t\t\t\t$res_warning .= sprintf($this->lng['error']['setlessthanalreadyused'], 'customers');\n\t\t\t\t\t}\n\t\t\t\t\tif ($domains != $result['domains'] && $domains != - 1 && $domains < $result['domains_used']) {\n\t\t\t\t\t\t$res_warning .= sprintf($this->lng['error']['setlessthanalreadyused'], 'domains');\n\t\t\t\t\t}\n\t\t\t\t\tif ($diskspace != $result['diskspace'] && ($diskspace / 1024) != - 1 && $diskspace < $result['diskspace_used']) {\n\t\t\t\t\t\t$res_warning .= sprintf($this->lng['error']['setlessthanalreadyused'], 'diskspace');\n\t\t\t\t\t}\n\t\t\t\t\tif ($traffic != $result['traffic'] && ($traffic / 1024 / 1024) != - 1 && $traffic < $result['traffic_used']) {\n\t\t\t\t\t\t$res_warning .= sprintf($this->lng['error']['setlessthanalreadyused'], 'traffic');\n\t\t\t\t\t}\n\t\t\t\t\tif ($emails != $result['emails'] && $emails != - 1 && $emails < $result['emails_used']) {\n\t\t\t\t\t\t$res_warning .= sprintf($this->lng['error']['setlessthanalreadyused'], 'emails');\n\t\t\t\t\t}\n\t\t\t\t\tif ($email_accounts != $result['email_accounts'] && $email_accounts != - 1 && $email_accounts < $result['email_accounts_used']) {\n\t\t\t\t\t\t$res_warning .= sprintf($this->lng['error']['setlessthanalreadyused'], 'email accounts');\n\t\t\t\t\t}\n\t\t\t\t\tif ($email_forwarders != $result['email_forwarders'] && $email_forwarders != - 1 && $email_forwarders < $result['email_forwarders_used']) {\n\t\t\t\t\t\t$res_warning .= sprintf($this->lng['error']['setlessthanalreadyused'], 'email forwarders');\n\t\t\t\t\t}\n\t\t\t\t\tif ($email_quota != $result['email_quota'] && $email_quota != - 1 && $email_quota < $result['email_quota_used']) {\n\t\t\t\t\t\t$res_warning .= sprintf($this->lng['error']['setlessthanalreadyused'], 'email quota');\n\t\t\t\t\t}\n\t\t\t\t\tif ($ftps != $result['ftps'] && $ftps != - 1 && $ftps < $result['ftps_used']) {\n\t\t\t\t\t\t$res_warning .= sprintf($this->lng['error']['setlessthanalreadyused'], 'ftps');\n\t\t\t\t\t}\n\t\t\t\t\tif ($mysqls != $result['mysqls'] && $mysqls != - 1 && $mysqls < $result['mysqls_used']) {\n\t\t\t\t\t\t$res_warning .= sprintf($this->lng['error']['setlessthanalreadyused'], 'mysqls');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (! empty($res_warning)) {\n\t\t\t\t\t\tthrow new \\Exception($res_warning, 406);\n\t\t\t\t\t}\n\n\t\t\t\t\t$upd_data = array(\n\t\t\t\t\t\t'password' => $password,\n\t\t\t\t\t\t'name' => $name,\n\t\t\t\t\t\t'email' => $email,\n\t\t\t\t\t\t'lang' => $def_language,\n\t\t\t\t\t\t'api_allowed' => $api_allowed,\n\t\t\t\t\t\t'change_serversettings' => $change_serversettings,\n\t\t\t\t\t\t'customers' => $customers,\n\t\t\t\t\t\t'customers_see_all' => $customers_see_all,\n\t\t\t\t\t\t'domains' => $domains,\n\t\t\t\t\t\t'domains_see_all' => $domains_see_all,\n\t\t\t\t\t\t'caneditphpsettings' => $caneditphpsettings,\n\t\t\t\t\t\t'diskspace' => $diskspace,\n\t\t\t\t\t\t'traffic' => $traffic,\n\t\t\t\t\t\t'subdomains' => $subdomains,\n\t\t\t\t\t\t'emails' => $emails,\n\t\t\t\t\t\t'accounts' => $email_accounts,\n\t\t\t\t\t\t'forwarders' => $email_forwarders,\n\t\t\t\t\t\t'quota' => $email_quota,\n\t\t\t\t\t\t'ftps' => $ftps,\n\t\t\t\t\t\t'mysqls' => $mysqls,\n\t\t\t\t\t\t'ip' => empty($ipaddress) ? \"\" : (is_array($ipaddress) && $ipaddress > 0 ? json_encode($ipaddress) : - 1),\n\t\t\t\t\t\t'deactivated' => $deactivated,\n\t\t\t\t\t\t'custom_notes' => $custom_notes,\n\t\t\t\t\t\t'custom_notes_show' => $custom_notes_show,\n\t\t\t\t\t\t'theme' => $theme,\n\t\t\t\t\t\t'adminid' => $id\n\t\t\t\t\t);\n\n\t\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\t\tUPDATE `\" . TABLE_PANEL_ADMINS . \"` SET\n\t\t\t\t\t\t`password` = :password,\n\t\t\t\t\t\t`name` = :name,\n\t\t\t\t\t\t`email` = :email,\n\t\t\t\t\t\t`def_language` = :lang,\n\t\t\t\t\t\t`api_allowed` = :api_allowed,\n\t\t\t\t\t\t`change_serversettings` = :change_serversettings,\n\t\t\t\t\t\t`customers` = :customers,\n\t\t\t\t\t\t`customers_see_all` = :customers_see_all,\n\t\t\t\t\t\t`domains` = :domains,\n\t\t\t\t\t\t`domains_see_all` = :domains_see_all,\n\t\t\t\t\t\t`caneditphpsettings` = :caneditphpsettings,\n\t\t\t\t\t\t`diskspace` = :diskspace,\n\t\t\t\t\t\t`traffic` = :traffic,\n\t\t\t\t\t\t`subdomains` = :subdomains,\n\t\t\t\t\t\t`emails` = :emails,\n\t\t\t\t\t\t`email_accounts` = :accounts,\n\t\t\t\t\t\t`email_forwarders` = :forwarders,\n\t\t\t\t\t\t`email_quota` = :quota,\n\t\t\t\t\t\t`ftps` = :ftps,\n\t\t\t\t\t\t`mysqls` = :mysqls,\n\t\t\t\t\t\t`ip` = :ip,\n\t\t\t\t\t\t`deactivated` = :deactivated,\n\t\t\t\t\t\t`custom_notes` = :custom_notes,\n\t\t\t\t\t\t`custom_notes_show` = :custom_notes_show,\n\t\t\t\t\t\t`theme` = :theme\n\t\t\t\t\t\tWHERE `adminid` = :adminid\n\t\t\t\t\t\");\n\t\t\t\t\tDatabase::pexecute($upd_stmt, $upd_data, true, true);\n\t\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_INFO, \"[API] edited admin '\" . $result['loginname'] . \"'\");\n\n\t\t\t\t\t// get all admin-data for return-array\n\t\t\t\t\t$result = $this->apiCall('Admins.get', array(\n\t\t\t\t\t\t'id' => $result['adminid']\n\t\t\t\t\t));\n\t\t\t\t\treturn $this->response(200, \"successful\", $result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * delete a admin entry by either id or loginname\n\t *\n\t * @param int $id\n\t *        \toptional, the admin-id\n\t * @param string $loginname\n\t *        \toptional, the loginname\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function delete()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = ($id <= 0 ? false : true);\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t\t$result = $this->apiCall('Admins.get', array(\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t));\n\t\t\t$id = $result['adminid'];\n\n\t\t\t// don't be stupid\n\t\t\tif ($id == $this->getUserDetail('adminid')) {\n\t\t\t\t\\Froxlor\\UI\\Response::standard_error('youcantdeleteyourself', '', true);\n\t\t\t}\n\t\t\t// can't delete the first superadmin\n\t\t\tif ($id == 1) {\n\t\t\t\t\\Froxlor\\UI\\Response::standard_error('cannotdeletesuperadmin', '', true);\n\t\t\t}\n\n\t\t\t// delete admin\n\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_PANEL_ADMINS . \"` WHERE `adminid` = :adminid\n\t\t\t\");\n\t\t\tDatabase::pexecute($del_stmt, array(\n\t\t\t\t'adminid' => $id\n\t\t\t), true, true);\n\n\t\t\t// delete the traffic-usage\n\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_PANEL_TRAFFIC_ADMINS . \"` WHERE `adminid` = :adminid\n\t\t\t\");\n\t\t\tDatabase::pexecute($del_stmt, array(\n\t\t\t\t'adminid' => $id\n\t\t\t), true, true);\n\n\t\t\t// set admin-id of the old admin's customer to current admins\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET\n\t\t\t\t`adminid` = :userid WHERE `adminid` = :adminid\n\t\t\t\");\n\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t'userid' => $this->getUserDetail('adminid'),\n\t\t\t\t'adminid' => $id\n\t\t\t), true, true);\n\n\t\t\t// set admin-id of the old admin's domains to current admins\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_DOMAINS . \"` SET\n\t\t\t\t`adminid` = :userid WHERE `adminid` = :adminid\n\t\t\t\");\n\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t'userid' => $this->getUserDetail('adminid'),\n\t\t\t\t'adminid' => $id\n\t\t\t), true, true);\n\n\t\t\t// delete old admin's api keys if exists (no customer keys)\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_API_KEYS . \"` WHERE\n\t\t\t\t`adminid` = :adminid AND `customerid` = '0'\n\t\t\t\");\n\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t'adminid' => $id\n\t\t\t), true, true);\n\n\t\t\t// set admin-id of the old admin's api-keys to current admins\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_API_KEYS . \"` SET\n\t\t\t\t`adminid` = :userid WHERE `adminid` = :adminid\n\t\t\t\");\n\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t'userid' => $this->getUserDetail('adminid'),\n\t\t\t\t'adminid' => $id\n\t\t\t), true, true);\n\n\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] deleted admin '\" . $result['loginname'] . \"'\");\n\t\t\t\\Froxlor\\User::updateCounters();\n\t\t\treturn $this->response(200, \"successful\", $result);\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * unlock a locked admin by either id or loginname\n\t *\n\t * @param int $id\n\t *        \toptional, the admin-id\n\t * @param string $loginname\n\t *        \toptional, the loginname\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function unlock()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = ($id <= 0 ? false : true);\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t\t$result = $this->apiCall('Admins.get', array(\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t));\n\t\t\t$id = $result['adminid'];\n\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_ADMINS . \"` SET\n\t\t\t\t`loginfail_count` = '0'\n\t\t\t\tWHERE `adminid`= :id\n\t\t\t\");\n\t\t\tDatabase::pexecute($result_stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\t\t\t// set the new value for result-array\n\t\t\t$result['loginfail_count'] = 0;\n\n\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] unlocked admin '\" . $result['loginname'] . \"'\");\n\t\t\treturn $this->response(200, \"successful\", $result);\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * increase resource-usage\n\t *\n\t * @param int $adminid\n\t * @param string $resource\n\t * @param string $extra\n\t *        \toptional, default empty\n\t * @param int $increase_by\n\t *        \toptional, default 1\n\t */\n\tpublic static function increaseUsage($adminid = 0, $resource = null, $extra = '', $increase_by = 1)\n\t{\n\t\tself::updateResourceUsage(TABLE_PANEL_ADMINS, 'adminid', $adminid, '+', $resource, $extra, $increase_by);\n\t}\n\n\t/**\n\t * decrease resource-usage\n\t *\n\t * @param int $adminid\n\t * @param string $resource\n\t * @param string $extra\n\t *        \toptional, default empty\n\t * @param int $decrease_by\n\t *        \toptional, default 1\n\t */\n\tpublic static function decreaseUsage($adminid = 0, $resource = null, $extra = '', $decrease_by = 1)\n\t{\n\t\tself::updateResourceUsage(TABLE_PANEL_ADMINS, 'adminid', $adminid, '-', $resource, $extra, $decrease_by);\n\t}\n}\n", "<?php\nnamespace Froxlor\\Api\\Commands;\n\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Settings;\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * For the full copyright and license information, please view the COPYING\n * file that was distributed with this source code. You can also view the\n * COPYING file online at http://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright (c) the authors\n * @author Froxlor team <team@froxlor.org> (2010-)\n * @license GPLv2 http://files.froxlor.org/misc/COPYING.txt\n * @package API\n * @since 0.10.0\n *       \n */\nclass Customers extends \\Froxlor\\Api\\ApiCommand implements \\Froxlor\\Api\\ResourceEntity\n{\n\n\t/**\n\t * lists all customer entries\n\t *\n\t * @param array $sql_search\n\t *        \toptional array with index = fieldname, and value = array with 'op' => operator (one of <, > or =), LIKE is used if left empty and 'value' => searchvalue\n\t * @param int $sql_limit\n\t *        \toptional specify number of results to be returned\n\t * @param int $sql_offset\n\t *        \toptional specify offset for resultset\n\t * @param array $sql_orderby\n\t *        \toptional array with index = fieldname and value = ASC|DESC to order the resultset by one or more fields\n\t * @param bool $show_usages\n\t *        \toptional, default false\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array count|list\n\t */\n\tpublic function listing()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$show_usages = $this->getBoolParam('show_usages', true, false);\n\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] list customers\");\n\t\t\t$query_fields = array();\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT `c`.*, `a`.`loginname` AS `adminname`\n\t\t\t\tFROM `\" . TABLE_PANEL_CUSTOMERS . \"` `c`, `\" . TABLE_PANEL_ADMINS . \"` `a`\n\t\t\t\tWHERE \" . ($this->getUserDetail('customers_see_all') ? '' : \" `c`.`adminid` = :adminid AND \") . \"\n\t\t\t\t`c`.`adminid` = `a`.`adminid`\" . $this->getSearchWhere($query_fields, true) . $this->getOrderBy() . $this->getLimit());\n\t\t\t$params = array();\n\t\t\tif ($this->getUserDetail('customers_see_all') == '0') {\n\t\t\t\t$params = array(\n\t\t\t\t\t'adminid' => $this->getUserDetail('adminid')\n\t\t\t\t);\n\t\t\t}\n\t\t\t$params = array_merge($params, $query_fields);\n\t\t\tDatabase::pexecute($result_stmt, $params, true, true);\n\t\t\t$result = array();\n\n\t\t\t$domains_stmt = null;\n\t\t\t$usages_stmt = null;\n\t\t\tif ($show_usages) {\n\t\t\t\t$domains_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT COUNT(`id`) AS `domains`\n\t\t\t\t\tFROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\t\t\tWHERE `customerid` = :cid\n\t\t\t\t\tAND `parentdomainid` = '0'\n\t\t\t\t\tAND `id`<> :stdd\n\t\t\t\t\");\n\t\t\t\t$usages_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_DISKSPACE . \"`\n\t\t\t\t\tWHERE `customerid` = :cid\n\t\t\t\t\tORDER BY `stamp` DESC LIMIT 1\n\t\t\t\t\");\n\t\t\t}\n\n\t\t\twhile ($row = $result_stmt->fetch(\\PDO::FETCH_ASSOC)) {\n\t\t\t\tif ($show_usages) {\n\t\t\t\t\t// get number of domains\n\t\t\t\t\tDatabase::pexecute($domains_stmt, array(\n\t\t\t\t\t\t'cid' => $row['customerid'],\n\t\t\t\t\t\t'stdd' => $row['standardsubdomain']\n\t\t\t\t\t));\n\t\t\t\t\t$domains = $domains_stmt->fetch(\\PDO::FETCH_ASSOC);\n\t\t\t\t\t$row['domains'] = intval($domains['domains']);\n\t\t\t\t\t// get disk-space usages for web, mysql and mail\n\t\t\t\t\t$usages = Database::pexecute_first($usages_stmt, array(\n\t\t\t\t\t\t'cid' => $row['customerid']\n\t\t\t\t\t));\n\t\t\t\t\tif ($usages) {\n\t\t\t\t\t\t$row['webspace_used'] = $usages['webspace'];\n\t\t\t\t\t\t$row['mailspace_used'] = $usages['mail'];\n\t\t\t\t\t\t$row['dbspace_used'] = $usages['mysql'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$row['webspace_used'] = 0;\n\t\t\t\t\t\t$row['mailspace_used'] = 0;\n\t\t\t\t\t\t$row['dbspace_used'] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$result[] = $row;\n\t\t\t}\n\t\t\treturn $this->response(200, \"successful\", array(\n\t\t\t\t'count' => count($result),\n\t\t\t\t'list' => $result\n\t\t\t));\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * returns the total number of customers for the given admin\n\t *\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function listingCount()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT COUNT(*) as num_customers\n\t\t\t\tFROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\tWHERE \" . ($this->getUserDetail('customers_see_all') ? \"1\" : \" `adminid` = :adminid \"));\n\t\t\t$params = array();\n\t\t\tif ($this->getUserDetail('customers_see_all') == '0') {\n\t\t\t\t$params = array(\n\t\t\t\t\t'adminid' => $this->getUserDetail('adminid')\n\t\t\t\t);\n\t\t\t}\n\t\t\t$result = Database::pexecute_first($result_stmt, $params, true, true);\n\t\t\tif ($result) {\n\t\t\t\treturn $this->response(200, \"successful\", $result['num_customers']);\n\t\t\t}\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * return a customer entry by either id or loginname\n\t *\n\t * @param int $id\n\t *        \toptional, the customer-id\n\t * @param string $loginname\n\t *        \toptional, the loginname\n\t * @param bool $show_usages\n\t *        \toptional, default false\n\t *        \t\n\t * @access admin, customer\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function get()\n\t{\n\t\t$id = $this->getParam('id', true, 0);\n\t\t$ln_optional = ($id <= 0 ? false : true);\n\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\t\t$show_usages = $this->getBoolParam('show_usages', true, false);\n\n\t\tif ($this->isAdmin()) {\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT `c`.*, `a`.`loginname` AS `adminname`\n\t\t\tFROM `\" . TABLE_PANEL_CUSTOMERS . \"` `c`, `\" . TABLE_PANEL_ADMINS . \"` `a`\n\t\t\tWHERE \" . ($id > 0 ? \"`c`.`customerid` = :idln\" : \"`c`.`loginname` = :idln\") . ($this->getUserDetail('customers_see_all') ? '' : \" AND `c`.`adminid` = :adminid\") . \" AND `c`.`adminid` = `a`.`adminid`\");\n\t\t\t$params = array(\n\t\t\t\t'idln' => ($id <= 0 ? $loginname : $id)\n\t\t\t);\n\t\t\tif ($this->getUserDetail('customers_see_all') == '0') {\n\t\t\t\t$params['adminid'] = $this->getUserDetail('adminid');\n\t\t\t}\n\t\t} else {\n\t\t\tif (($id > 0 && $id != $this->getUserDetail('customerid')) || ! empty($loginname) && $loginname != $this->getUserDetail('loginname')) {\n\t\t\t\tthrow new \\Exception(\"You cannot access data of other customers\", 401);\n\t\t\t}\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\tWHERE \" . ($id > 0 ? \"`customerid` = :idln\" : \"`loginname` = :idln\"));\n\t\t\t$params = array(\n\t\t\t\t'idln' => ($id <= 0 ? $loginname : $id)\n\t\t\t);\n\t\t}\n\t\t$result = Database::pexecute_first($result_stmt, $params, true, true);\n\t\tif ($result) {\n\t\t\t// check whether the admin does not want the customer to see the notes\n\t\t\tif (! $this->isAdmin() && $result['custom_notes_show'] != 1) {\n\t\t\t\t$result['custom_notes'] = \"\";\n\t\t\t}\n\t\t\tif ($show_usages) {\n\t\t\t\t// get number of domains\n\t\t\t\t$domains_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT COUNT(`id`) AS `domains`\n\t\t\t\t\tFROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\t\t\tWHERE `customerid` = :cid\n\t\t\t\t\tAND `parentdomainid` = '0'\n\t\t\t\t\tAND `id`<> :stdd\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($domains_stmt, array(\n\t\t\t\t\t'cid' => $result['customerid'],\n\t\t\t\t\t'stdd' => $result['standardsubdomain']\n\t\t\t\t));\n\t\t\t\t$domains = $domains_stmt->fetch(\\PDO::FETCH_ASSOC);\n\t\t\t\t$result['domains'] = intval($domains['domains']);\n\t\t\t\t// get disk-space usages for web, mysql and mail\n\t\t\t\t$usages_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_DISKSPACE . \"`\n\t\t\t\t\tWHERE `customerid` = :cid\n\t\t\t\t\tORDER BY `stamp` DESC LIMIT 1\n\t\t\t\t\");\n\t\t\t\t$usages = Database::pexecute_first($usages_stmt, array(\n\t\t\t\t\t'cid' => $result['customerid']\n\t\t\t\t));\n\t\t\t\tif ($usages) {\n\t\t\t\t\t$result['webspace_used'] = $usages['webspace'];\n\t\t\t\t\t$result['mailspace_used'] = $usages['mail'];\n\t\t\t\t\t$result['dbspace_used'] = $usages['mysql'];\n\t\t\t\t} else {\n\t\t\t\t\t$result['webspace_used'] = 0;\n\t\t\t\t\t$result['mailspace_used'] = 0;\n\t\t\t\t\t$result['dbspace_used'] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->logger()->logAction($this->isAdmin() ? \\Froxlor\\FroxlorLogger::ADM_ACTION : \\Froxlor\\FroxlorLogger::USR_ACTION, LOG_NOTICE, \"[API] get customer '\" . $result['loginname'] . \"'\");\n\t\t\treturn $this->response(200, \"successful\", $result);\n\t\t}\n\t\t$key = ($id > 0 ? \"id #\" . $id : \"loginname '\" . $loginname . \"'\");\n\t\tthrow new \\Exception(\"Customer with \" . $key . \" could not be found\", 404);\n\t}\n\n\t/**\n\t * create a new customer with default ftp-user and standard-subdomain (if wanted)\n\t *\n\t * @param string $email\n\t * @param string $name\n\t *        \toptional if company is set, else required\n\t * @param string $firstname\n\t *        \toptional if company is set, else required\n\t * @param string $company\n\t *        \toptional but required if name/firstname empty\n\t * @param string $street\n\t *        \toptional\n\t * @param string $zipcode\n\t *        \toptional\n\t * @param string $city\n\t *        \toptional\n\t * @param string $phone\n\t *        \toptional\n\t * @param string $fax\n\t *        \toptional\n\t * @param int $customernumber\n\t *        \toptional\n\t * @param string $def_language,\n\t *        \toptional, default is system-default language\n\t * @param bool $api_allowed\n\t *        \toptional, default is true if system setting api.enabled is true, else false\n\t * @param int $gender\n\t *        \toptional, 0 = no-gender, 1 = male, 2 = female\n\t * @param string $custom_notes\n\t *        \toptional notes\n\t * @param bool $custom_notes_show\n\t *        \toptional, whether to show the content of custom_notes to the customer, default 0 (false)\n\t * @param string $new_loginname\n\t *        \toptional, if empty generated automatically using customer-prefix and increasing number\n\t * @param string $new_customer_password\n\t *        \toptional, if empty generated automatically and send to the customer's email if $sendpassword is 1\n\t * @param bool $sendpassword\n\t *        \toptional, whether to send the password to the customer after creation, default 0 (false)\n\t * @param int $diskspace\n\t *        \toptional disk-space available for customer in MB, default 0\n\t * @param bool $diskspace_ul\n\t *        \toptional, whether customer should have unlimited diskspace, default 0 (false)\n\t * @param int $traffic\n\t *        \toptional traffic available for customer in GB, default 0\n\t * @param bool $traffic_ul\n\t *        \toptional, whether customer should have unlimited traffic, default 0 (false)\n\t * @param int $subdomains\n\t *        \toptional amount of subdomains available for customer, default 0\n\t * @param bool $subdomains_ul\n\t *        \toptional, whether customer should have unlimited subdomains, default 0 (false)\n\t * @param int $emails\n\t *        \toptional amount of emails available for customer, default 0\n\t * @param bool $emails_ul\n\t *        \toptional, whether customer should have unlimited emails, default 0 (false)\n\t * @param int $email_accounts\n\t *        \toptional amount of email-accounts available for customer, default 0\n\t * @param bool $email_accounts_ul\n\t *        \toptional, whether customer should have unlimited email-accounts, default 0 (false)\n\t * @param int $email_forwarders\n\t *        \toptional amount of email-forwarders available for customer, default 0\n\t * @param bool $email_forwarders_ul\n\t *        \toptional, whether customer should have unlimited email-forwarders, default 0 (false)\n\t * @param int $email_quota\n\t *        \toptional size of email-quota available for customer in MB, default is system-setting mail_quota\n\t * @param bool $email_quota_ul\n\t *        \toptional, whether customer should have unlimited email-quota, default 0 (false)\n\t * @param bool $email_imap\n\t *        \toptional, whether to allow IMAP access, default 0 (false)\n\t * @param bool $email_pop3\n\t *        \toptional, whether to allow POP3 access, default 0 (false)\n\t * @param int $ftps\n\t *        \toptional amount of ftp-accounts available for customer, default 0\n\t * @param bool $ftps_ul\n\t *        \toptional, whether customer should have unlimited ftp-accounts, default 0 (false)\n\t * @param int $mysqls\n\t *        \toptional amount of mysql-databases available for customer, default 0\n\t * @param bool $mysqls_ul\n\t *        \toptional, whether customer should have unlimited mysql-databases, default 0 (false)\n\t * @param bool $createstdsubdomain\n\t *        \toptional, whether to create a standard-subdomain ([loginname].froxlor-hostname.tld), default [system.createstdsubdom_default]\n\t * @param bool $phpenabled\n\t *        \toptional, whether to allow usage of PHP, default 0 (false)\n\t * @param array $allowed_phpconfigs\n\t *        \toptional, array of IDs of php-config that the customer is allowed to use, default empty (none)\n\t * @param bool $perlenabled\n\t *        \toptional, whether to allow usage of Perl/CGI, default 0 (false)\n\t * @param bool $dnsenabled\n\t *        \toptional, whether to allow usage of the DNS editor (requires activated nameserver in settings), default 0 (false)\n\t * @param bool $logviewenabled\n\t *        \toptional, whether to allow access to webserver access/error-logs, default 0 (false)\n\t * @param bool $store_defaultindex\n\t *        \toptional, whether to store the default index file to customers homedir\n\t * @param int $hosting_plan_id\n\t *        \toptional, specify a hosting-plan to set certain resource-values from the plan instead of specifying them\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function add()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\tif ($this->getUserDetail('customers_used') < $this->getUserDetail('customers') || $this->getUserDetail('customers') == '-1') {\n\n\t\t\t\t// required parameters\n\t\t\t\t$email = $this->getParam('email');\n\n\t\t\t\t// parameters\n\t\t\t\t$name = $this->getParam('name', true, '');\n\t\t\t\t$firstname = $this->getParam('firstname', true, '');\n\t\t\t\t$company_required = (! empty($name) && empty($firstname)) || (empty($name) && ! empty($firstname)) || (empty($name) && empty($firstname));\n\t\t\t\t$company = $this->getParam('company', ($company_required ? false : true), '');\n\t\t\t\t$street = $this->getParam('street', true, '');\n\t\t\t\t$zipcode = $this->getParam('zipcode', true, '');\n\t\t\t\t$city = $this->getParam('city', true, '');\n\t\t\t\t$phone = $this->getParam('phone', true, '');\n\t\t\t\t$fax = $this->getParam('fax', true, '');\n\t\t\t\t$customernumber = $this->getParam('customernumber', true, '');\n\t\t\t\t$def_language = $this->getParam('def_language', true, Settings::Get('panel.standardlanguage'));\n\t\t\t\t$api_allowed = $this->getBoolParam('api_allowed', true, Settings::Get('api.enabled'));\n\t\t\t\t$gender = (int) $this->getParam('gender', true, 0);\n\t\t\t\t$custom_notes = $this->getParam('custom_notes', true, '');\n\t\t\t\t$custom_notes_show = $this->getBoolParam('custom_notes_show', true, 0);\n\t\t\t\t$createstdsubdomain = $this->getBoolParam('createstdsubdomain', true, Settings::Get('system.createstdsubdom_default'));\n\t\t\t\t$password = $this->getParam('new_customer_password', true, '');\n\t\t\t\t$sendpassword = $this->getBoolParam('sendpassword', true, 0);\n\t\t\t\t$store_defaultindex = $this->getBoolParam('store_defaultindex', true, 0);\n\t\t\t\t$loginname = $this->getParam('new_loginname', true, '');\n\n\t\t\t\t// hosting-plan values\n\t\t\t\t$hosting_plan_id = $this->getParam('hosting_plan_id', true, 0);\n\t\t\t\tif ($hosting_plan_id > 0) {\n\t\t\t\t\t$hp_result = $this->apiCall('HostingPlans.get', array(\n\t\t\t\t\t\t'id' => $hosting_plan_id\n\t\t\t\t\t));\n\t\t\t\t\t$hp_result['value'] = json_decode($hp_result['value'], true);\n\t\t\t\t\tforeach ($hp_result['value'] as $index => $value) {\n\t\t\t\t\t\t$hp_result[$index] = $value;\n\t\t\t\t\t}\n\t\t\t\t\t$diskspace = $hp_result['diskspace'] ?? 0;\n\t\t\t\t\t$traffic = $hp_result['traffic'] ?? 0;\n\t\t\t\t\t$subdomains = $hp_result['subdomains'] ?? 0;\n\t\t\t\t\t$emails = $hp_result['emails'] ?? 0;\n\t\t\t\t\t$email_accounts = $hp_result['email_accounts'] ?? 0;\n\t\t\t\t\t$email_forwarders = $hp_result['email_forwarders'] ?? 0;\n\t\t\t\t\t$email_quota = $hp_result['email_quota'] ?? Settings::Get('system.mail_quota');\n\t\t\t\t\t$email_imap = $hp_result['email_imap'] ?? 0;\n\t\t\t\t\t$email_pop3 = $hp_result['email_pop3'] ?? 0;\n\t\t\t\t\t$ftps = $hp_result['ftps'] ?? 0;\n\t\t\t\t\t$mysqls = $hp_result['mysqls'] ?? 0;\n\t\t\t\t\t$phpenabled = $hp_result['phpenabled'] ?? 0;\n\t\t\t\t\t$p_allowed_phpconfigs = $hp_result['allowed_phpconfigs'] ?? 0;\n\t\t\t\t\t$perlenabled = $hp_result['perlenabled'] ?? 0;\n\t\t\t\t\t$dnsenabled = $hp_result['dnsenabled'] ?? 0;\n\t\t\t\t\t$logviewenabled = $hp_result['logviewenabled'] ?? 0;\n\t\t\t\t} else {\n\t\t\t\t\t$diskspace = $this->getUlParam('diskspace', 'diskspace_ul', true, 0);\n\t\t\t\t\t$traffic = $this->getUlParam('traffic', 'traffic_ul', true, 0);\n\t\t\t\t\t$subdomains = $this->getUlParam('subdomains', 'subdomains_ul', true, 0);\n\t\t\t\t\t$emails = $this->getUlParam('emails', 'emails_ul', true, 0);\n\t\t\t\t\t$email_accounts = $this->getUlParam('email_accounts', 'email_accounts_ul', true, 0);\n\t\t\t\t\t$email_forwarders = $this->getUlParam('email_forwarders', 'email_forwarders_ul', true, 0);\n\t\t\t\t\t$email_quota = $this->getUlParam('email_quota', 'email_quota_ul', true, Settings::Get('system.mail_quota'));\n\t\t\t\t\t$email_imap = $this->getBoolParam('email_imap', true, 0);\n\t\t\t\t\t$email_pop3 = $this->getBoolParam('email_pop3', true, 0);\n\t\t\t\t\t$ftps = $this->getUlParam('ftps', 'ftps_ul', true, 0);\n\t\t\t\t\t$mysqls = $this->getUlParam('mysqls', 'mysqls_ul', true, 0);\n\t\t\t\t\t$phpenabled = $this->getBoolParam('phpenabled', true, 0);\n\t\t\t\t\t$p_allowed_phpconfigs = $this->getParam('allowed_phpconfigs', true, array());\n\t\t\t\t\t$perlenabled = $this->getBoolParam('perlenabled', true, 0);\n\t\t\t\t\t$dnsenabled = $this->getBoolParam('dnsenabled', true, 0);\n\t\t\t\t\t$logviewenabled = $this->getBoolParam('logviewenabled', true, 0);\n\t\t\t\t}\n\n\t\t\t\t// validation\n\t\t\t\t$name = \\Froxlor\\Validate\\Validate::validate($name, 'name', \\Froxlor\\Validate\\Validate::REGEX_DESC_TEXT, '', array(), true);\n\t\t\t\t$firstname = \\Froxlor\\Validate\\Validate::validate($firstname, 'first name', \\Froxlor\\Validate\\Validate::REGEX_DESC_TEXT, '', array(), true);\n\t\t\t\t$company = \\Froxlor\\Validate\\Validate::validate($company, 'company', \\Froxlor\\Validate\\Validate::REGEX_DESC_TEXT, '', array(), true);\n\t\t\t\t$street = \\Froxlor\\Validate\\Validate::validate($street, 'street', \\Froxlor\\Validate\\Validate::REGEX_DESC_TEXT, '', array(), true);\n\t\t\t\t$zipcode = \\Froxlor\\Validate\\Validate::validate($zipcode, 'zipcode', '/^[0-9 \\-A-Z]*$/', '', array(), true);\n\t\t\t\t$city = \\Froxlor\\Validate\\Validate::validate($city, 'city', \\Froxlor\\Validate\\Validate::REGEX_DESC_TEXT, '', array(), true);\n\t\t\t\t$phone = \\Froxlor\\Validate\\Validate::validate($phone, 'phone', '/^[0-9\\- \\+\\(\\)\\/]*$/', '', array(), true);\n\t\t\t\t$fax = \\Froxlor\\Validate\\Validate::validate($fax, 'fax', '/^[0-9\\- \\+\\(\\)\\/]*$/', '', array(), true);\n\t\t\t\t$idna_convert = new \\Froxlor\\Idna\\IdnaWrapper();\n\t\t\t\t$email = $idna_convert->encode(\\Froxlor\\Validate\\Validate::validate($email, 'email', '', '', array(), true));\n\t\t\t\t$customernumber = \\Froxlor\\Validate\\Validate::validate($customernumber, 'customer number', '/^[A-Za-z0-9 \\-]*$/Di', '', array(), true);\n\t\t\t\t$def_language = \\Froxlor\\Validate\\Validate::validate($def_language, 'default language', '', '', array(), true);\n\t\t\t\t$custom_notes = \\Froxlor\\Validate\\Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $custom_notes), 'custom_notes', \\Froxlor\\Validate\\Validate::REGEX_CONF_TEXT, '', array(), true);\n\n\t\t\t\tif (Settings::Get('system.mail_quota_enabled') != '1') {\n\t\t\t\t\t$email_quota = - 1;\n\t\t\t\t}\n\n\t\t\t\t$password = \\Froxlor\\Validate\\Validate::validate($password, 'password', '', '', array(), true);\n\t\t\t\t// only check if not empty,\n\t\t\t\t// cause empty == generate password automatically\n\t\t\t\tif ($password != '') {\n\t\t\t\t\t$password = \\Froxlor\\System\\Crypt::validatePassword($password, true);\n\t\t\t\t}\n\n\t\t\t\t// gender out of range? [0,2]\n\t\t\t\tif ($gender < 0 || $gender > 2) {\n\t\t\t\t\t$gender = 0;\n\t\t\t\t}\n\n\t\t\t\t$allowed_phpconfigs = array();\n\t\t\t\tif (! empty($p_allowed_phpconfigs) && is_array($p_allowed_phpconfigs)) {\n\t\t\t\t\tforeach ($p_allowed_phpconfigs as $allowed_phpconfig) {\n\t\t\t\t\t\t$allowed_phpconfig = intval($allowed_phpconfig);\n\t\t\t\t\t\t$allowed_phpconfigs[] = $allowed_phpconfig;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$allowed_phpconfigs = array_map('intval', $allowed_phpconfigs);\n\n\t\t\t\t$diskspace = $diskspace * 1024;\n\t\t\t\t$traffic = $traffic * 1024 * 1024;\n\n\t\t\t\tif (((($this->getUserDetail('diskspace_used') + $diskspace) > $this->getUserDetail('diskspace')) && ($this->getUserDetail('diskspace') / 1024) != '-1') || ((($this->getUserDetail('mysqls_used') + $mysqls) > $this->getUserDetail('mysqls')) && $this->getUserDetail('mysqls') != '-1') || ((($this->getUserDetail('emails_used') + $emails) > $this->getUserDetail('emails')) && $this->getUserDetail('emails') != '-1') || ((($this->getUserDetail('email_accounts_used') + $email_accounts) > $this->getUserDetail('email_accounts')) && $this->getUserDetail('email_accounts') != '-1') || ((($this->getUserDetail('email_forwarders_used') + $email_forwarders) > $this->getUserDetail('email_forwarders')) && $this->getUserDetail('email_forwarders') != '-1') || ((($this->getUserDetail('email_quota_used') + $email_quota) > $this->getUserDetail('email_quota')) && $this->getUserDetail('email_quota') != '-1' && Settings::Get('system.mail_quota_enabled') == '1') || ((($this->getUserDetail('ftps_used') + $ftps) > $this->getUserDetail('ftps')) && $this->getUserDetail('ftps') != '-1') || ((($this->getUserDetail('subdomains_used') + $subdomains) > $this->getUserDetail('subdomains')) && $this->getUserDetail('subdomains') != '-1') || (($diskspace / 1024) == '-1' && ($this->getUserDetail('diskspace') / 1024) != '-1') || ($mysqls == '-1' && $this->getUserDetail('mysqls') != '-1') || ($emails == '-1' && $this->getUserDetail('emails') != '-1') || ($email_accounts == '-1' && $this->getUserDetail('email_accounts') != '-1') || ($email_forwarders == '-1' && $this->getUserDetail('email_forwarders') != '-1') || ($email_quota == '-1' && $this->getUserDetail('email_quota') != '-1' && Settings::Get('system.mail_quota_enabled') == '1') || ($ftps == '-1' && $this->getUserDetail('ftps') != '-1') || ($subdomains == '-1' && $this->getUserDetail('subdomains') != '-1')) {\n\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('youcantallocatemorethanyouhave', '', true);\n\t\t\t\t}\n\n\t\t\t\tif (! \\Froxlor\\Validate\\Validate::validateEmail($email)) {\n\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('emailiswrong', $email, true);\n\t\t\t\t} else {\n\n\t\t\t\t\tif ($loginname != '') {\n\t\t\t\t\t\t$accountnumber = intval(Settings::Get('system.lastaccountnumber'));\n\t\t\t\t\t\t$loginname = \\Froxlor\\Validate\\Validate::validate($loginname, 'loginname', '/^[a-z][a-z0-9\\-_]+$/i', '', array(), true);\n\n\t\t\t\t\t\t// Accounts which match systemaccounts are not allowed, filtering them\n\t\t\t\t\t\tif (preg_match('/^' . preg_quote(Settings::Get('customer.accountprefix'), '/') . '([0-9]+)/', $loginname)) {\n\t\t\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('loginnameissystemaccount', Settings::Get('customer.accountprefix'), true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Additional filtering for Bug #962\n\t\t\t\t\t\tif (function_exists('posix_getpwnam') && ! in_array(\"posix_getpwnam\", explode(\",\", ini_get('disable_functions'))) && posix_getpwnam($loginname)) {\n\t\t\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('loginnameissystemaccount', Settings::Get('customer.accountprefix'), true);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$accountnumber = intval(Settings::Get('system.lastaccountnumber')) + 1;\n\t\t\t\t\t\t$loginname = Settings::Get('customer.accountprefix') . $accountnumber;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if the account already exists\n\t\t\t\t\t// do not check via api as we skip any permission checks for this task\n\t\t\t\t\t$loginname_check_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `loginname` FROM `\" . TABLE_PANEL_CUSTOMERS . \"` WHERE `loginname` = :login\n\t\t\t\t\t\");\n\t\t\t\t\t$loginname_check = Database::pexecute_first($loginname_check_stmt, array(\n\t\t\t\t\t\t'login' => $loginname\n\t\t\t\t\t), true, true);\n\n\t\t\t\t\t// Check if an admin with the loginname already exists\n\t\t\t\t\t// do not check via api as we skip any permission checks for this task\n\t\t\t\t\t$loginname_check_admin_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `loginname` FROM `\" . TABLE_PANEL_ADMINS . \"` WHERE `loginname` = :login\n\t\t\t\t\t\");\n\t\t\t\t\t$loginname_check_admin = Database::pexecute_first($loginname_check_admin_stmt, array(\n\t\t\t\t\t\t'login' => $loginname\n\t\t\t\t\t), true, true);\n\n\t\t\t\t\t$mysql_maxlen = \\Froxlor\\Database\\Database::getSqlUsernameLength() - strlen(Settings::Get('customer.mysqlprefix'));\n\t\t\t\t\tif (($loginname_check && strtolower($loginname_check['loginname']) == strtolower($loginname)) || ($loginname_check_admin && strtolower($loginname_check_admin['loginname']) == strtolower($loginname))) {\n\t\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('loginnameexists', $loginname, true);\n\t\t\t\t\t} elseif (! \\Froxlor\\Validate\\Validate::validateUsername($loginname, Settings::Get('panel.unix_names'), $mysql_maxlen)) {\n\t\t\t\t\t\tif (strlen($loginname) > $mysql_maxlen) {\n\t\t\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('loginnameiswrong2', $mysql_maxlen, true);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('loginnameiswrong', $loginname, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$guid = intval(Settings::Get('system.lastguid')) + 1;\n\t\t\t\t\t$documentroot = \\Froxlor\\FileDir::makeCorrectDir(Settings::Get('system.documentroot_prefix') . '/' . $loginname);\n\n\t\t\t\t\tif (file_exists($documentroot)) {\n\t\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('documentrootexists', $documentroot, true);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($password == '') {\n\t\t\t\t\t\t$password = \\Froxlor\\System\\Crypt::generatePassword();\n\t\t\t\t\t}\n\n\t\t\t\t\t$_theme = Settings::Get('panel.default_theme');\n\n\t\t\t\t\t$ins_data = array(\n\t\t\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t\t\t'loginname' => $loginname,\n\t\t\t\t\t\t'passwd' => \\Froxlor\\System\\Crypt::makeCryptPassword($password),\n\t\t\t\t\t\t'name' => $name,\n\t\t\t\t\t\t'firstname' => $firstname,\n\t\t\t\t\t\t'gender' => $gender,\n\t\t\t\t\t\t'company' => $company,\n\t\t\t\t\t\t'street' => $street,\n\t\t\t\t\t\t'zipcode' => $zipcode,\n\t\t\t\t\t\t'city' => $city,\n\t\t\t\t\t\t'phone' => $phone,\n\t\t\t\t\t\t'fax' => $fax,\n\t\t\t\t\t\t'email' => $email,\n\t\t\t\t\t\t'customerno' => $customernumber,\n\t\t\t\t\t\t'lang' => $def_language,\n\t\t\t\t\t\t'api_allowed' => $api_allowed,\n\t\t\t\t\t\t'docroot' => $documentroot,\n\t\t\t\t\t\t'guid' => $guid,\n\t\t\t\t\t\t'diskspace' => $diskspace,\n\t\t\t\t\t\t'traffic' => $traffic,\n\t\t\t\t\t\t'subdomains' => $subdomains,\n\t\t\t\t\t\t'emails' => $emails,\n\t\t\t\t\t\t'email_accounts' => $email_accounts,\n\t\t\t\t\t\t'email_forwarders' => $email_forwarders,\n\t\t\t\t\t\t'email_quota' => $email_quota,\n\t\t\t\t\t\t'ftps' => $ftps,\n\t\t\t\t\t\t'mysqls' => $mysqls,\n\t\t\t\t\t\t'phpenabled' => $phpenabled,\n\t\t\t\t\t\t'allowed_phpconfigs' => empty($allowed_phpconfigs) ? \"\" : json_encode($allowed_phpconfigs),\n\t\t\t\t\t\t'imap' => $email_imap,\n\t\t\t\t\t\t'pop3' => $email_pop3,\n\t\t\t\t\t\t'perlenabled' => $perlenabled,\n\t\t\t\t\t\t'dnsenabled' => $dnsenabled,\n\t\t\t\t\t\t'logviewenabled' => $logviewenabled,\n\t\t\t\t\t\t'theme' => $_theme,\n\t\t\t\t\t\t'custom_notes' => $custom_notes,\n\t\t\t\t\t\t'custom_notes_show' => $custom_notes_show\n\t\t\t\t\t);\n\n\t\t\t\t\t$ins_stmt = Database::prepare(\"\n\t\t\t\t\t\tINSERT INTO `\" . TABLE_PANEL_CUSTOMERS . \"` SET\n\t\t\t\t\t\t`adminid` = :adminid,\n\t\t\t\t\t\t`loginname` = :loginname,\n\t\t\t\t\t\t`password` = :passwd,\n\t\t\t\t\t\t`name` = :name,\n\t\t\t\t\t\t`firstname` = :firstname,\n\t\t\t\t\t\t`gender` = :gender,\n\t\t\t\t\t\t`company` = :company,\n\t\t\t\t\t\t`street` = :street,\n\t\t\t\t\t\t`zipcode` = :zipcode,\n\t\t\t\t\t\t`city` = :city,\n\t\t\t\t\t\t`phone` = :phone,\n\t\t\t\t\t\t`fax` = :fax,\n\t\t\t\t\t\t`email` = :email,\n\t\t\t\t\t\t`customernumber` = :customerno,\n\t\t\t\t\t\t`def_language` = :lang,\n\t\t\t\t\t\t`api_allowed` = :api_allowed,\n\t\t\t\t\t\t`documentroot` = :docroot,\n\t\t\t\t\t\t`guid` = :guid,\n\t\t\t\t\t\t`diskspace` = :diskspace,\n\t\t\t\t\t\t`traffic` = :traffic,\n\t\t\t\t\t\t`subdomains` = :subdomains,\n\t\t\t\t\t\t`emails` = :emails,\n\t\t\t\t\t\t`email_accounts` = :email_accounts,\n\t\t\t\t\t\t`email_forwarders` = :email_forwarders,\n\t\t\t\t\t\t`email_quota` = :email_quota,\n\t\t\t\t\t\t`ftps` = :ftps,\n\t\t\t\t\t\t`mysqls` = :mysqls,\n\t\t\t\t\t\t`standardsubdomain` = '0',\n\t\t\t\t\t\t`phpenabled` = :phpenabled,\n\t\t\t\t\t\t`allowed_phpconfigs` = :allowed_phpconfigs,\n\t\t\t\t\t\t`imap` = :imap,\n\t\t\t\t\t\t`pop3` = :pop3,\n\t\t\t\t\t\t`perlenabled` = :perlenabled,\n\t\t\t\t\t\t`dnsenabled` = :dnsenabled,\n\t\t\t\t\t\t`logviewenabled` = :logviewenabled,\n\t\t\t\t\t\t`theme` = :theme,\n\t\t\t\t\t\t`custom_notes` = :custom_notes,\n\t\t\t\t\t\t`custom_notes_show` = :custom_notes_show\n\t\t\t\t\t\");\n\t\t\t\t\tDatabase::pexecute($ins_stmt, $ins_data, true, true);\n\n\t\t\t\t\t$customerid = Database::lastInsertId();\n\t\t\t\t\t$ins_data['customerid'] = $customerid;\n\n\t\t\t\t\t// update admin resource-usage\n\t\t\t\t\tif ($mysqls != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'mysqls_used', '', (int) $mysqls);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($emails != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'emails_used', '', (int) $emails);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($email_accounts != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'email_accounts_used', '', (int) $email_accounts);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($email_forwarders != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'email_forwarders_used', '', (int) $email_forwarders);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($email_quota != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'email_quota_used', '', (int) $email_quota);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($subdomains != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'subdomains_used', '', (int) $subdomains);\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($ftps != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'ftps_used', '', (int) $ftps);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (($diskspace / 1024) != '-1') {\n\t\t\t\t\t\tAdmins::increaseUsage($this->getUserDetail('adminid'), 'diskspace_used', '', (int) $diskspace);\n\t\t\t\t\t}\n\n\t\t\t\t\t// update last guid\n\t\t\t\t\tSettings::Set('system.lastguid', $guid, true);\n\n\t\t\t\t\tif ($accountnumber != intval(Settings::Get('system.lastaccountnumber'))) {\n\t\t\t\t\t\t// update last account number\n\t\t\t\t\t\tSettings::Set('system.lastaccountnumber', $accountnumber, true);\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_INFO, \"[API] added customer '\" . $loginname . \"'\");\n\t\t\t\t\tunset($ins_data);\n\n\t\t\t\t\t// insert task to create homedir etc.\n\t\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::CREATE_HOME, $loginname, $guid, $guid, $store_defaultindex);\n\n\t\t\t\t\t// Using filesystem - quota, insert a task which cleans the filesystem - quota\n\t\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::CREATE_QUOTA);\n\n\t\t\t\t\t// Add htpasswd for the stats-pages\n\t\t\t\t\t$htpasswdPassword = \\Froxlor\\System\\Crypt::makeCryptPassword($password, true);\n\n\t\t\t\t\t$ins_stmt = Database::prepare(\"\n\t\t\t\t\t\tINSERT INTO `\" . TABLE_PANEL_HTPASSWDS . \"` SET\n\t\t\t\t\t\t`customerid` = :customerid,\n\t\t\t\t\t\t`username` = :username,\n\t\t\t\t\t\t`password` = :passwd,\n\t\t\t\t\t\t`path` = :path\n\t\t\t\t\t\");\n\t\t\t\t\t$ins_data = array(\n\t\t\t\t\t\t'customerid' => $customerid,\n\t\t\t\t\t\t'username' => $loginname,\n\t\t\t\t\t\t'passwd' => $htpasswdPassword\n\t\t\t\t\t);\n\n\t\t\t\t\t$stats_folder = 'webalizer';\n\t\t\t\t\tif (Settings::Get('system.awstats_enabled') == '1') {\n\t\t\t\t\t\t$stats_folder = 'awstats';\n\t\t\t\t\t}\n\t\t\t\t\t$ins_data['path'] = \\Froxlor\\FileDir::makeCorrectDir($documentroot . '/' . $stats_folder . '/');\n\t\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] automatically added \" . $stats_folder . \" htpasswd for user '\" . $loginname . \"'\");\n\t\t\t\t\tDatabase::pexecute($ins_stmt, $ins_data, true, true);\n\n\t\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::REBUILD_VHOST);\n\n\t\t\t\t\t// add default FTP-User\n\t\t\t\t\t// also, add froxlor-local user to ftp-group (if exists!) to\n\t\t\t\t\t// allow access to customer-directories from within the panel, which\n\t\t\t\t\t// is necessary when pathedit = Dropdown\n\t\t\t\t\t$local_users = array(\n\t\t\t\t\t\tSettings::Get('system.httpuser')\n\t\t\t\t\t);\n\t\t\t\t\tif ((int) Settings::Get('system.mod_fcgid_ownvhost') == 1 || (int) Settings::Get('phpfpm.enabled_ownvhost') == 1) {\n\t\t\t\t\t\tif ((int) Settings::Get('system.mod_fcgid') == 1) {\n\t\t\t\t\t\t\t$local_user = Settings::Get('system.mod_fcgid_httpuser');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$local_user = Settings::Get('phpfpm.vhost_httpuser');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// check froxlor-local user membership in ftp-group\n\t\t\t\t\t\t// without this check addition may duplicate user in list if httpuser == local_user\n\t\t\t\t\t\tif (in_array($local_user, $local_users) == false) {\n\t\t\t\t\t\t\t$local_users[] = $local_user;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$this->apiCall('Ftps.add', array(\n\t\t\t\t\t\t'customerid' => $customerid,\n\t\t\t\t\t\t'path' => '/',\n\t\t\t\t\t\t'ftp_password' => $password,\n\t\t\t\t\t\t'ftp_description' => \"Default\",\n\t\t\t\t\t\t'sendinfomail' => 0,\n\t\t\t\t\t\t'ftp_username' => $loginname,\n\t\t\t\t\t\t'additional_members' => $local_users,\n\t\t\t\t\t\t'is_defaultuser' => 1\n\t\t\t\t\t));\n\n\t\t\t\t\t$_stdsubdomain = '';\n\t\t\t\t\tif ($createstdsubdomain == '1') {\n\t\t\t\t\t\tif (Settings::Get('system.stdsubdomain') !== null && Settings::Get('system.stdsubdomain') != '') {\n\t\t\t\t\t\t\t$_stdsubdomain = $loginname . '.' . Settings::Get('system.stdsubdomain');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$_stdsubdomain = $loginname . '.' . Settings::Get('system.hostname');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$ins_data = array(\n\t\t\t\t\t\t\t'domain' => $_stdsubdomain,\n\t\t\t\t\t\t\t'customerid' => $customerid,\n\t\t\t\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t\t\t\t'docroot' => $documentroot,\n\t\t\t\t\t\t\t'phpenabled' => $phpenabled,\n\t\t\t\t\t\t\t'openbasedir' => '1'\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$domainid = - 1;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t$std_domain = $this->apiCall('Domains.add', $ins_data);\n\t\t\t\t\t\t\t$domainid = $std_domain['id'];\n\t\t\t\t\t\t} catch (\\Exception $e) {\n\t\t\t\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_ERR, \"[API] Unable to add standard-subdomain: \" . $e->getMessage());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ($domainid > 0) {\n\t\t\t\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET `standardsubdomain` = :domainid WHERE `customerid` = :customerid\n\t\t\t\t\t\t\t\");\n\t\t\t\t\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t\t\t\t\t'domainid' => $domainid,\n\t\t\t\t\t\t\t\t'customerid' => $customerid\n\t\t\t\t\t\t\t), true, true);\n\t\t\t\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] automatically added standardsubdomain for user '\" . $loginname . \"'\");\n\t\t\t\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::REBUILD_VHOST);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($sendpassword == '1') {\n\n\t\t\t\t\t\t$srv_hostname = Settings::Get('system.hostname');\n\t\t\t\t\t\tif (Settings::Get('system.froxlordirectlyviahostname') == '0') {\n\t\t\t\t\t\t\t$srv_hostname .= '/' . basename(\\Froxlor\\Froxlor::getInstallDir());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$srv_ip_stmt = Database::prepare(\"\n\t\t\t\t\t\t\tSELECT ip, port FROM `\" . TABLE_PANEL_IPSANDPORTS . \"`\n\t\t\t\t\t\t\tWHERE `id` = :defaultip\n\t\t\t\t\t\t\");\n\t\t\t\t\t\t$default_ips = Settings::Get('system.defaultip');\n\t\t\t\t\t\t$default_ips = explode(',', $default_ips);\n\t\t\t\t\t\t$srv_ip = Database::pexecute_first($srv_ip_stmt, array(\n\t\t\t\t\t\t\t'defaultip' => reset($default_ips)\n\t\t\t\t\t\t), true, true);\n\n\t\t\t\t\t\t$replace_arr = array(\n\t\t\t\t\t\t\t'FIRSTNAME' => $firstname,\n\t\t\t\t\t\t\t'NAME' => $name,\n\t\t\t\t\t\t\t'COMPANY' => $company,\n\t\t\t\t\t\t\t'SALUTATION' => \\Froxlor\\User::getCorrectUserSalutation(array(\n\t\t\t\t\t\t\t\t'firstname' => $firstname,\n\t\t\t\t\t\t\t\t'name' => $name,\n\t\t\t\t\t\t\t\t'company' => $company\n\t\t\t\t\t\t\t)),\n\t\t\t\t\t\t\t'CUSTOMER_NO' => $customernumber,\n\t\t\t\t\t\t\t'USERNAME' => $loginname,\n\t\t\t\t\t\t\t'PASSWORD' => $password,\n\t\t\t\t\t\t\t'SERVER_HOSTNAME' => $srv_hostname,\n\t\t\t\t\t\t\t'SERVER_IP' => isset($srv_ip['ip']) ? $srv_ip['ip'] : '',\n\t\t\t\t\t\t\t'SERVER_PORT' => isset($srv_ip['port']) ? $srv_ip['port'] : '',\n\t\t\t\t\t\t\t'DOMAINNAME' => $_stdsubdomain\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// get template for mail subject\n\t\t\t\t\t\t$mail_subject = $this->getMailTemplate(array(\n\t\t\t\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t\t\t\t'def_language' => $def_language\n\t\t\t\t\t\t), 'mails', 'createcustomer_subject', $replace_arr, $this->lng['mails']['createcustomer']['subject']);\n\t\t\t\t\t\t// get template for mail body\n\t\t\t\t\t\t$mail_body = $this->getMailTemplate(array(\n\t\t\t\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t\t\t\t'def_language' => $def_language\n\t\t\t\t\t\t), 'mails', 'createcustomer_mailbody', $replace_arr, $this->lng['mails']['createcustomer']['mailbody']);\n\n\t\t\t\t\t\t$_mailerror = false;\n\t\t\t\t\t\t$mailerr_msg = \"\";\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t$this->mailer()->Subject = $mail_subject;\n\t\t\t\t\t\t\t$this->mailer()->AltBody = $mail_body;\n\t\t\t\t\t\t\t$this->mailer()->msgHTML(str_replace(\"\\n\", \"<br />\", $mail_body));\n\t\t\t\t\t\t\t$this->mailer()->addAddress($email, \\Froxlor\\User::getCorrectUserSalutation(array(\n\t\t\t\t\t\t\t\t'firstname' => $firstname,\n\t\t\t\t\t\t\t\t'name' => $name,\n\t\t\t\t\t\t\t\t'company' => $company\n\t\t\t\t\t\t\t)));\n\t\t\t\t\t\t\t$this->mailer()->send();\n\t\t\t\t\t\t} catch (\\PHPMailer\\PHPMailer\\Exception $e) {\n\t\t\t\t\t\t\t$mailerr_msg = $e->errorMessage();\n\t\t\t\t\t\t\t$_mailerror = true;\n\t\t\t\t\t\t} catch (\\Exception $e) {\n\t\t\t\t\t\t\t$mailerr_msg = $e->getMessage();\n\t\t\t\t\t\t\t$_mailerror = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ($_mailerror) {\n\t\t\t\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_ERR, \"[API] Error sending mail: \" . $mailerr_msg);\n\t\t\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('errorsendingmail', $email, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$this->mailer()->clearAddresses();\n\t\t\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] automatically sent password to user '\" . $loginname . \"'\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] added customer '\" . $loginname . \"'\");\n\n\t\t\t\t$result = $this->apiCall('Customers.get', array(\n\t\t\t\t\t'loginname' => $loginname\n\t\t\t\t));\n\t\t\t\treturn $this->response(200, \"successful\", $result);\n\t\t\t}\n\t\t\tthrow new \\Exception(\"No more resources available\", 406);\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * update customer entry by either id or loginname, customer can only change language, password and theme\n\t *\n\t * @param int $id\n\t *        \toptional, the customer-id\n\t * @param string $loginname\n\t *        \toptional, the loginname\n\t * @param string $email\n\t * @param string $name\n\t *        \toptional if company is set, else required\n\t * @param string $firstname\n\t *        \toptional if company is set, else required\n\t * @param string $company\n\t *        \toptional but required if name/firstname empty\n\t * @param string $street\n\t *        \toptional\n\t * @param string $zipcode\n\t *        \toptional\n\t * @param string $city\n\t *        \toptional\n\t * @param string $phone\n\t *        \toptional\n\t * @param string $fax\n\t *        \toptional\n\t * @param int $customernumber\n\t *        \toptional\n\t * @param string $def_language,\n\t *        \toptional, default is system-default language\n\t * @param bool $api_allowed\n\t *        \toptional, default is true if system setting api.enabled is true, else false\n\t * @param int $gender\n\t *        \toptional, 0 = no-gender, 1 = male, 2 = female\n\t * @param string $custom_notes\n\t *        \toptional notes\n\t * @param bool $custom_notes_show\n\t *        \toptional, whether to show the content of custom_notes to the customer, default 0 (false)\n\t * @param string $new_customer_password\n\t *        \toptional, iset new password\n\t * @param bool $sendpassword\n\t *        \toptional, whether to send the password to the customer after creation, default 0 (false)\n\t * @param int $move_to_admin\n\t *        \toptional, if valid admin-id is given here, the customer's admin/reseller can be changed\n\t * @param bool $deactivated\n\t *        \toptional, if 1 (true) the customer can be deactivated/suspended\n\t * @param int $diskspace\n\t *        \toptional disk-space available for customer in MB, default 0\n\t * @param bool $diskspace_ul\n\t *        \toptional, whether customer should have unlimited diskspace, default 0 (false)\n\t * @param int $traffic\n\t *        \toptional traffic available for customer in GB, default 0\n\t * @param bool $traffic_ul\n\t *        \toptional, whether customer should have unlimited traffic, default 0 (false)\n\t * @param int $subdomains\n\t *        \toptional amount of subdomains available for customer, default 0\n\t * @param bool $subdomains_ul\n\t *        \toptional, whether customer should have unlimited subdomains, default 0 (false)\n\t * @param int $emails\n\t *        \toptional amount of emails available for customer, default 0\n\t * @param bool $emails_ul\n\t *        \toptional, whether customer should have unlimited emails, default 0 (false)\n\t * @param int $email_accounts\n\t *        \toptional amount of email-accounts available for customer, default 0\n\t * @param bool $email_accounts_ul\n\t *        \toptional, whether customer should have unlimited email-accounts, default 0 (false)\n\t * @param int $email_forwarders\n\t *        \toptional amount of email-forwarders available for customer, default 0\n\t * @param bool $email_forwarders_ul\n\t *        \toptional, whether customer should have unlimited email-forwarders, default 0 (false)\n\t * @param int $email_quota\n\t *        \toptional size of email-quota available for customer in MB, default is system-setting mail_quota\n\t * @param bool $email_quota_ul\n\t *        \toptional, whether customer should have unlimited email-quota, default 0 (false)\n\t * @param bool $email_imap\n\t *        \toptional, whether to allow IMAP access, default 0 (false)\n\t * @param bool $email_pop3\n\t *        \toptional, whether to allow POP3 access, default 0 (false)\n\t * @param int $ftps\n\t *        \toptional amount of ftp-accounts available for customer, default 0\n\t * @param bool $ftps_ul\n\t *        \toptional, whether customer should have unlimited ftp-accounts, default 0 (false)\n\t * @param int $mysqls\n\t *        \toptional amount of mysql-databases available for customer, default 0\n\t * @param bool $mysqls_ul\n\t *        \toptional, whether customer should have unlimited mysql-databases, default 0 (false)\n\t * @param bool $createstdsubdomain\n\t *        \toptional, whether to create a standard-subdomain ([loginname].froxlor-hostname.tld), default 1 (if customer has std-subdomain) else 0 (false)\n\t * @param bool $phpenabled\n\t *        \toptional, whether to allow usage of PHP, default 0 (false)\n\t * @param array $allowed_phpconfigs\n\t *        \toptional, array of IDs of php-config that the customer is allowed to use, default empty (none)\n\t * @param bool $perlenabled\n\t *        \toptional, whether to allow usage of Perl/CGI, default 0 (false)\n\t * @param bool $dnsenabled\n\t *        \toptional, whether to allow usage of the DNS editor (requires activated nameserver in settings), default 0 (false)\n\t * @param bool $logviewenabled\n\t *        \toptional, whether to allow access to webserver access/error-logs, default 0 (false)\n\t * @param string $theme\n\t *        \toptional, change theme\n\t *        \t\n\t * @access admin, customer\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function update()\n\t{\n\t\t$id = $this->getParam('id', true, 0);\n\t\t$ln_optional = ($id <= 0 ? false : true);\n\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t$result = $this->apiCall('Customers.get', array(\n\t\t\t'id' => $id,\n\t\t\t'loginname' => $loginname\n\t\t));\n\t\t$id = $result['customerid'];\n\n\t\tif ($this->isAdmin()) {\n\t\t\t// parameters\n\t\t\t$move_to_admin = (int) ($this->getParam('move_to_admin', true, 0));\n\n\t\t\t$idna_convert = new \\Froxlor\\Idna\\IdnaWrapper();\n\t\t\t$email = $this->getParam('email', true, $idna_convert->decode($result['email'] ?? ''));\n\t\t\t$name = $this->getParam('name', true, $result['name']);\n\t\t\t$firstname = $this->getParam('firstname', true, $result['firstname']);\n\t\t\t$company_required = empty($result['company']) && ((! empty($name) && empty($firstname)) || (empty($name) && ! empty($firstname)) || (empty($name) && empty($firstname)));\n\t\t\t$company = $this->getParam('company', ($company_required ? false : true), $result['company']);\n\t\t\t$street = $this->getParam('street', true, $result['street']);\n\t\t\t$zipcode = $this->getParam('zipcode', true, $result['zipcode']);\n\t\t\t$city = $this->getParam('city', true, $result['city']);\n\t\t\t$phone = $this->getParam('phone', true, $result['phone']);\n\t\t\t$fax = $this->getParam('fax', true, $result['fax']);\n\t\t\t$customernumber = $this->getParam('customernumber', true, $result['customernumber']);\n\t\t\t$def_language = $this->getParam('def_language', true, $result['def_language']);\n\t\t\t$api_allowed = $this->getBoolParam('api_allowed', true, $result['api_allowed']);\n\t\t\t$gender = (int) $this->getParam('gender', true, $result['gender']);\n\t\t\t$custom_notes = $this->getParam('custom_notes', true, $result['custom_notes']);\n\t\t\t$custom_notes_show = $this->getBoolParam('custom_notes_show', true, $result['custom_notes_show']);\n\n\t\t\t$dec_places = Settings::Get('panel.decimal_places');\n\t\t\t$diskspace = $this->getUlParam('diskspace', 'diskspace_ul', true, round($result['diskspace'] / 1024, $dec_places));\n\t\t\t$traffic = $this->getUlParam('traffic', 'traffic_ul', true, round($result['traffic'] / (1024 * 1024), $dec_places));\n\t\t\t$subdomains = $this->getUlParam('subdomains', 'subdomains_ul', true, $result['subdomains']);\n\t\t\t$emails = $this->getUlParam('emails', 'emails_ul', true, $result['emails']);\n\t\t\t$email_accounts = $this->getUlParam('email_accounts', 'email_accounts_ul', true, $result['email_accounts']);\n\t\t\t$email_forwarders = $this->getUlParam('email_forwarders', 'email_forwarders_ul', true, $result['email_forwarders']);\n\t\t\t$email_quota = $this->getUlParam('email_quota', 'email_quota_ul', true, $result['email_quota']);\n\t\t\t$email_imap = $this->getParam('email_imap', true, $result['imap']);\n\t\t\t$email_pop3 = $this->getParam('email_pop3', true, $result['pop3']);\n\t\t\t$ftps = $this->getUlParam('ftps', 'ftps_ul', true, $result['ftps']);\n\t\t\t$mysqls = $this->getUlParam('mysqls', 'mysqls_ul', true, $result['mysqls']);\n\t\t\t$createstdsubdomain = $this->getBoolParam('createstdsubdomain', true, ($result['standardsubdomain'] != 0 ? 1 : 0));\n\t\t\t$password = $this->getParam('new_customer_password', true, '');\n\t\t\t$phpenabled = $this->getBoolParam('phpenabled', true, $result['phpenabled']);\n\t\t\t$allowed_phpconfigs = $this->getParam('allowed_phpconfigs', true, json_decode($result['allowed_phpconfigs'], true));\n\t\t\t$perlenabled = $this->getBoolParam('perlenabled', true, $result['perlenabled']);\n\t\t\t$dnsenabled = $this->getBoolParam('dnsenabled', true, $result['dnsenabled']);\n\t\t\t$logviewenabled = $this->getBoolParam('logviewenabled', true, $result['logviewenabled']);\n\t\t\t$deactivated = $this->getBoolParam('deactivated', true, $result['deactivated']);\n\t\t\t$theme = $this->getParam('theme', true, $result['theme']);\n\t\t} else {\n\t\t\t// allowed parameters\n\t\t\t$def_language = $this->getParam('def_language', true, $result['def_language']);\n\t\t\t$password = $this->getParam('new_customer_password', true, '');\n\t\t\t$theme = $this->getParam('theme', true, $result['theme']);\n\t\t}\n\n\t\t// validation\n\t\tif ($this->isAdmin()) {\n\t\t\t$idna_convert = new \\Froxlor\\Idna\\IdnaWrapper();\n\t\t\t$name = \\Froxlor\\Validate\\Validate::validate($name, 'name', \\Froxlor\\Validate\\Validate::REGEX_DESC_TEXT, '', array(), true);\n\t\t\t$firstname = \\Froxlor\\Validate\\Validate::validate($firstname, 'first name', \\Froxlor\\Validate\\Validate::REGEX_DESC_TEXT, '', array(), true);\n\t\t\t$company = \\Froxlor\\Validate\\Validate::validate($company, 'company', \\Froxlor\\Validate\\Validate::REGEX_DESC_TEXT, '', array(), true);\n\t\t\t$street = \\Froxlor\\Validate\\Validate::validate($street, 'street', \\Froxlor\\Validate\\Validate::REGEX_DESC_TEXT, '', array(), true);\n\t\t\t$zipcode = \\Froxlor\\Validate\\Validate::validate($zipcode, 'zipcode', '/^[0-9 \\-A-Z]*$/', '', array(), true);\n\t\t\t$city = \\Froxlor\\Validate\\Validate::validate($city, 'city', \\Froxlor\\Validate\\Validate::REGEX_DESC_TEXT, '', array(), true);\n\t\t\t$phone = \\Froxlor\\Validate\\Validate::validate($phone, 'phone', '/^[0-9\\- \\+\\(\\)\\/]*$/', '', array(), true);\n\t\t\t$fax = \\Froxlor\\Validate\\Validate::validate($fax, 'fax', '/^[0-9\\- \\+\\(\\)\\/]*$/', '', array(), true);\n\t\t\t$email = $idna_convert->encode(\\Froxlor\\Validate\\Validate::validate($email, 'email', '', '', array(), true));\n\t\t\t$customernumber = \\Froxlor\\Validate\\Validate::validate($customernumber, 'customer number', '/^[A-Za-z0-9 \\-]*$/Di', '', array(), true);\n\t\t\t$custom_notes = \\Froxlor\\Validate\\Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $custom_notes), 'custom_notes', \\Froxlor\\Validate\\Validate::REGEX_CONF_TEXT, '', array(), true);\n\t\t\tif (! empty($allowed_phpconfigs)) {\n\t\t\t\t$allowed_phpconfigs = array_map('intval', $allowed_phpconfigs);\n\t\t\t}\n\t\t}\n\t\t$def_language = \\Froxlor\\Validate\\Validate::validate($def_language, 'default language', '', '', array(), true);\n\t\t$theme = \\Froxlor\\Validate\\Validate::validate($theme, 'theme', '', '', array(), true);\n\n\t\tif (Settings::Get('system.mail_quota_enabled') != '1') {\n\t\t\t$email_quota = - 1;\n\t\t}\n\n\t\tif (empty($theme)) {\n\t\t\t$theme = Settings::Get('panel.default_theme');\n\t\t}\n\n\t\tif ($this->isAdmin()) {\n\n\t\t\t$diskspace = $diskspace * 1024;\n\t\t\t$traffic = $traffic * 1024 * 1024;\n\n\t\t\tif (((($this->getUserDetail('diskspace_used') + $diskspace - $result['diskspace']) > $this->getUserDetail('diskspace')) && ($this->getUserDetail('diskspace') / 1024) != '-1') || ((($this->getUserDetail('mysqls_used') + $mysqls - $result['mysqls']) > $this->getUserDetail('mysqls')) && $this->getUserDetail('mysqls') != '-1') || ((($this->getUserDetail('emails_used') + $emails - $result['emails']) > $this->getUserDetail('emails')) && $this->getUserDetail('emails') != '-1') || ((($this->getUserDetail('email_accounts_used') + $email_accounts - $result['email_accounts']) > $this->getUserDetail('email_accounts')) && $this->getUserDetail('email_accounts') != '-1') || ((($this->getUserDetail('email_forwarders_used') + $email_forwarders - $result['email_forwarders']) > $this->getUserDetail('email_forwarders')) && $this->getUserDetail('email_forwarders') != '-1') || ((($this->getUserDetail('email_quota_used') + $email_quota - $result['email_quota']) > $this->getUserDetail('email_quota')) && $this->getUserDetail('email_quota') != '-1' && Settings::Get('system.mail_quota_enabled') == '1') || ((($this->getUserDetail('ftps_used') + $ftps - $result['ftps']) > $this->getUserDetail('ftps')) && $this->getUserDetail('ftps') != '-1') || ((($this->getUserDetail('subdomains_used') + $subdomains - $result['subdomains']) > $this->getUserDetail('subdomains')) && $this->getUserDetail('subdomains') != '-1') || (($diskspace / 1024) == '-1' && ($this->getUserDetail('diskspace') / 1024) != '-1') || ($mysqls == '-1' && $this->getUserDetail('mysqls') != '-1') || ($emails == '-1' && $this->getUserDetail('emails') != '-1') || ($email_accounts == '-1' && $this->getUserDetail('email_accounts') != '-1') || ($email_forwarders == '-1' && $this->getUserDetail('email_forwarders') != '-1') || ($email_quota == '-1' && $this->getUserDetail('email_quota') != '-1' && Settings::Get('system.mail_quota_enabled') == '1') || ($ftps == '-1' && $this->getUserDetail('ftps') != '-1') || ($subdomains == '-1' && $this->getUserDetail('subdomains') != '-1')) {\n\t\t\t\t\\Froxlor\\UI\\Response::standard_error('youcantallocatemorethanyouhave', '', true);\n\t\t\t}\n\n\t\t\tif ($email == '') {\n\t\t\t\t\\Froxlor\\UI\\Response::standard_error(array(\n\t\t\t\t\t'stringisempty',\n\t\t\t\t\t'emailadd'\n\t\t\t\t), '', true);\n\t\t\t} elseif (! \\Froxlor\\Validate\\Validate::validateEmail($email)) {\n\t\t\t\t\\Froxlor\\UI\\Response::standard_error('emailiswrong', $email, true);\n\t\t\t}\n\t\t}\n\n\t\tif ($password != '') {\n\t\t\t$password = \\Froxlor\\System\\Crypt::validatePassword($password, true);\n\t\t\t$password = \\Froxlor\\System\\Crypt::makeCryptPassword($password);\n\t\t} else {\n\t\t\t$password = $result['password'];\n\t\t}\n\n\t\tif ($this->isAdmin()) {\n\t\t\tif ($createstdsubdomain != '1' || $deactivated) {\n\t\t\t\t$createstdsubdomain = '0';\n\t\t\t}\n\n\t\t\tif ($createstdsubdomain == '1' && $result['standardsubdomain'] == '0') {\n\n\t\t\t\tif (Settings::Get('system.stdsubdomain') !== null && Settings::Get('system.stdsubdomain') != '') {\n\t\t\t\t\t$_stdsubdomain = $result['loginname'] . '.' . Settings::Get('system.stdsubdomain');\n\t\t\t\t} else {\n\t\t\t\t\t$_stdsubdomain = $result['loginname'] . '.' . Settings::Get('system.hostname');\n\t\t\t\t}\n\n\t\t\t\t$ins_data = array(\n\t\t\t\t\t'domain' => $_stdsubdomain,\n\t\t\t\t\t'customerid' => $result['customerid'],\n\t\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t\t'docroot' => $result['documentroot'],\n\t\t\t\t\t'phpenabled' => $phpenabled,\n\t\t\t\t\t'openbasedir' => '1'\n\t\t\t\t);\n\t\t\t\t$domainid = - 1;\n\t\t\t\ttry {\n\t\t\t\t\t$std_domain = $this->apiCall('Domains.add', $ins_data);\n\t\t\t\t\t$domainid = $std_domain['id'];\n\t\t\t\t} catch (\\Exception $e) {\n\t\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_ERR, \"[API] Unable to add standard-subdomain: \" . $e->getMessage());\n\t\t\t\t}\n\n\t\t\t\tif ($domainid > 0) {\n\t\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET `standardsubdomain` = :domainid WHERE `customerid` = :customerid\n\t\t\t\t\t\t\");\n\t\t\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t\t\t'domainid' => $domainid,\n\t\t\t\t\t\t'customerid' => $result['customerid']\n\t\t\t\t\t), true, true);\n\t\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] automatically added standardsubdomain for user '\" . $result['loginname'] . \"'\");\n\t\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::REBUILD_VHOST);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($createstdsubdomain == '0' && $result['standardsubdomain'] != '0') {\n\t\t\t\ttry {\n\t\t\t\t\t$std_domain = $this->apiCall('Domains.delete', array(\n\t\t\t\t\t\t'id' => $result['standardsubdomain'],\n\t\t\t\t\t\t'is_stdsubdomain' => 1\n\t\t\t\t\t));\n\t\t\t\t} catch (\\Exception $e) {\n\t\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_ERR, \"[API] Unable to delete standard-subdomain: \" . $e->getMessage());\n\t\t\t\t}\n\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] automatically deleted standardsubdomain for user '\" . $result['loginname'] . \"'\");\n\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::REBUILD_VHOST);\n\t\t\t}\n\n\t\t\tif ($phpenabled != $result['phpenabled'] || $perlenabled != $result['perlenabled'] || $email != $result['email']) {\n\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::REBUILD_VHOST);\n\t\t\t}\n\n\t\t\t// activate/deactivate customer services\n\t\t\tif ($deactivated != $result['deactivated']) {\n\n\t\t\t\t$yesno = ($deactivated ? 'N' : 'Y');\n\t\t\t\t$pop3 = ($deactivated ? '0' : (int) $result['pop3']);\n\t\t\t\t$imap = ($deactivated ? '0' : (int) $result['imap']);\n\n\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\tUPDATE `\" . TABLE_MAIL_USERS . \"` SET `postfix`= :yesno, `pop3` = :pop3, `imap` = :imap WHERE `customerid` = :customerid\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t\t'yesno' => $yesno,\n\t\t\t\t\t'pop3' => $pop3,\n\t\t\t\t\t'imap' => $imap,\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t));\n\n\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\tUPDATE `\" . TABLE_FTP_USERS . \"` SET `login_enabled` = :yesno WHERE `customerid` = :customerid\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t\t'yesno' => $yesno,\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t));\n\n\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\t\t\tUPDATE `\" . TABLE_PANEL_DOMAINS . \"` SET `deactivated`= :deactivated WHERE `customerid` = :customerid\");\n\t\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t\t'deactivated' => $deactivated,\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t));\n\n\t\t\t\t// Retrieve customer's databases\n\t\t\t\t$databases_stmt = Database::prepare(\"SELECT * FROM \" . TABLE_PANEL_DATABASES . \" WHERE customerid = :customerid ORDER BY `dbserver`\");\n\t\t\t\tDatabase::pexecute($databases_stmt, array(\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t));\n\n\t\t\t\tDatabase::needRoot(true);\n\t\t\t\t$last_dbserver = 0;\n\n\t\t\t\t$dbm = new \\Froxlor\\Database\\DbManager($this->logger());\n\n\t\t\t\t// For each of them\n\t\t\t\t$priv_changed = false;\n\t\t\t\twhile ($row_database = $databases_stmt->fetch(\\PDO::FETCH_ASSOC)) {\n\n\t\t\t\t\tif ($last_dbserver != $row_database['dbserver']) {\n\t\t\t\t\t\t$dbm->getManager()->flushPrivileges();\n\t\t\t\t\t\tDatabase::needRoot(true, $row_database['dbserver']);\n\t\t\t\t\t\t$last_dbserver = $row_database['dbserver'];\n\t\t\t\t\t}\n\n\t\t\t\t\tforeach (array_unique(explode(',', Settings::Get('system.mysql_access_host'))) as $mysql_access_host) {\n\t\t\t\t\t\t$mysql_access_host = trim($mysql_access_host);\n\n\t\t\t\t\t\t// Prevent access, if deactivated\n\t\t\t\t\t\tif ($deactivated) {\n\t\t\t\t\t\t\t// failsafe if user has been deleted manually (requires MySQL 4.1.2+)\n\t\t\t\t\t\t\t$dbm->getManager()->disableUser($row_database['databasename'], $mysql_access_host);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Otherwise grant access\n\t\t\t\t\t\t\t$dbm->getManager()->enableUser($row_database['databasename'], $mysql_access_host);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$priv_changed = true;\n\t\t\t\t}\n\n\t\t\t\t// At last flush the new privileges\n\t\t\t\tif ($priv_changed) {\n\t\t\t\t\t$dbm->getManager()->flushPrivileges();\n\t\t\t\t}\n\t\t\t\tDatabase::needRoot(false);\n\n\t\t\t\t// reactivate/deactivate api-keys\n\t\t\t\t$valid_until = $deactivated ? 0 : - 1;\n\t\t\t\t$stmt = Database::prepare(\"UPDATE `\" . TABLE_API_KEYS . \"` SET `valid_until` = :vu WHERE `customerid` = :id\");\n\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'vu' => $valid_until\n\t\t\t\t), true, true);\n\n\t\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_INFO, \"[API] \" . ($deactivated ? 'deactivated' : 'reactivated') . \" user '\" . $result['loginname'] . \"'\");\n\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::REBUILD_VHOST);\n\t\t\t}\n\n\t\t\t// Disable or enable POP3 Login for customers Mail Accounts\n\t\t\tif ($email_pop3 != $result['pop3']) {\n\t\t\t\t$upd_stmt = Database::prepare(\"UPDATE `\" . TABLE_MAIL_USERS . \"` SET `pop3` = :pop3 WHERE `customerid` = :customerid\");\n\t\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t\t'pop3' => $email_pop3,\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t));\n\t\t\t}\n\n\t\t\t// Disable or enable IMAP Login for customers Mail Accounts\n\t\t\tif ($email_imap != $result['imap']) {\n\t\t\t\t$upd_stmt = Database::prepare(\"UPDATE `\" . TABLE_MAIL_USERS . \"` SET `imap` = :imap WHERE `customerid` = :customerid\");\n\t\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t\t'imap' => $email_imap,\n\t\t\t\t\t'customerid' => $id\n\t\t\t\t));\n\t\t\t}\n\t\t}\n\n\t\t$upd_data = array(\n\t\t\t'customerid' => $id,\n\t\t\t'passwd' => $password,\n\t\t\t'lang' => $def_language,\n\t\t\t'theme' => $theme\n\t\t);\n\n\t\tif ($this->isAdmin()) {\n\t\t\t$admin_upd_data = array(\n\t\t\t\t'name' => $name,\n\t\t\t\t'firstname' => $firstname,\n\t\t\t\t'gender' => $gender,\n\t\t\t\t'company' => $company,\n\t\t\t\t'street' => $street,\n\t\t\t\t'zipcode' => $zipcode,\n\t\t\t\t'city' => $city,\n\t\t\t\t'phone' => $phone,\n\t\t\t\t'fax' => $fax,\n\t\t\t\t'email' => $email,\n\t\t\t\t'customerno' => $customernumber,\n\t\t\t\t'diskspace' => $diskspace,\n\t\t\t\t'traffic' => $traffic,\n\t\t\t\t'subdomains' => $subdomains,\n\t\t\t\t'emails' => $emails,\n\t\t\t\t'email_accounts' => $email_accounts,\n\t\t\t\t'email_forwarders' => $email_forwarders,\n\t\t\t\t'email_quota' => $email_quota,\n\t\t\t\t'ftps' => $ftps,\n\t\t\t\t'mysqls' => $mysqls,\n\t\t\t\t'deactivated' => $deactivated,\n\t\t\t\t'phpenabled' => $phpenabled,\n\t\t\t\t'allowed_phpconfigs' => empty($allowed_phpconfigs) ? \"\" : json_encode($allowed_phpconfigs),\n\t\t\t\t'imap' => $email_imap,\n\t\t\t\t'pop3' => $email_pop3,\n\t\t\t\t'perlenabled' => $perlenabled,\n\t\t\t\t'dnsenabled' => $dnsenabled,\n\t\t\t\t'logviewenabled' => $logviewenabled,\n\t\t\t\t'custom_notes' => $custom_notes,\n\t\t\t\t'custom_notes_show' => $custom_notes_show,\n\t\t\t\t'api_allowed' => $api_allowed\n\t\t\t);\n\t\t\t$upd_data = $upd_data + $admin_upd_data;\n\t\t}\n\n\t\t$upd_query = \"UPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET\n\t\t\t\t`def_language` = :lang,\n\t\t\t\t`password` = :passwd,\n\t\t\t\t`theme` = :theme\";\n\n\t\tif ($this->isAdmin()) {\n\t\t\t$admin_upd_query = \",\n\t\t\t\t`name` = :name,\n\t\t\t\t`firstname` = :firstname,\n\t\t\t\t`gender` = :gender,\n\t\t\t\t`company` = :company,\n\t\t\t\t`street` = :street,\n\t\t\t\t`zipcode` = :zipcode,\n\t\t\t\t`city` = :city,\n\t\t\t\t`phone` = :phone,\n\t\t\t\t`fax` = :fax,\n\t\t\t\t`email` = :email,\n\t\t\t\t`customernumber` = :customerno,\n\t\t\t\t`diskspace` = :diskspace,\n\t\t\t\t`traffic` = :traffic,\n\t\t\t\t`subdomains` = :subdomains,\n\t\t\t\t`emails` = :emails,\n\t\t\t\t`email_accounts` = :email_accounts,\n\t\t\t\t`email_forwarders` = :email_forwarders,\n\t\t\t\t`ftps` = :ftps,\n\t\t\t\t`mysqls` = :mysqls,\n\t\t\t\t`deactivated` = :deactivated,\n\t\t\t\t`phpenabled` = :phpenabled,\n\t\t\t\t`allowed_phpconfigs` = :allowed_phpconfigs,\n\t\t\t\t`email_quota` = :email_quota,\n\t\t\t\t`imap` = :imap,\n\t\t\t\t`pop3` = :pop3,\n\t\t\t\t`perlenabled` = :perlenabled,\n\t\t\t\t`dnsenabled` = :dnsenabled,\n\t\t\t\t`logviewenabled` = :logviewenabled,\n\t\t\t\t`custom_notes` = :custom_notes,\n\t\t\t\t`custom_notes_show` = :custom_notes_show,\n\t\t\t\t`api_allowed` = :api_allowed\";\n\t\t\t$upd_query .= $admin_upd_query;\n\t\t}\n\t\t$upd_query .= \" WHERE `customerid` = :customerid\";\n\t\t$upd_stmt = Database::prepare($upd_query);\n\t\tDatabase::pexecute($upd_stmt, $upd_data);\n\n\t\tif ($this->isAdmin()) {\n\t\t\t// Using filesystem - quota, insert a task which cleans the filesystem - quota\n\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::CREATE_QUOTA);\n\n\t\t\t$admin_update_query = \"UPDATE `\" . TABLE_PANEL_ADMINS . \"` SET `customers_used` = `customers_used` \";\n\n\t\t\tif ($mysqls != '-1' || $result['mysqls'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `mysqls_used` = `mysqls_used` \";\n\n\t\t\t\tif ($mysqls != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int) $mysqls . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['mysqls'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int) $result['mysqls'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($emails != '-1' || $result['emails'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `emails_used` = `emails_used` \";\n\n\t\t\t\tif ($emails != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int) $emails . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['emails'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int) $result['emails'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($email_accounts != '-1' || $result['email_accounts'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `email_accounts_used` = `email_accounts_used` \";\n\n\t\t\t\tif ($email_accounts != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int) $email_accounts . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['email_accounts'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int) $result['email_accounts'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($email_forwarders != '-1' || $result['email_forwarders'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `email_forwarders_used` = `email_forwarders_used` \";\n\n\t\t\t\tif ($email_forwarders != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int) $email_forwarders . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['email_forwarders'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int) $result['email_forwarders'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($email_quota != '-1' || $result['email_quota'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `email_quota_used` = `email_quota_used` \";\n\n\t\t\t\tif ($email_quota != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int) $email_quota . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['email_quota'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int) $result['email_quota'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($subdomains != '-1' || $result['subdomains'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `subdomains_used` = `subdomains_used` \";\n\n\t\t\t\tif ($subdomains != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int) $subdomains . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['subdomains'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int) $result['subdomains'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($ftps != '-1' || $result['ftps'] != '-1') {\n\t\t\t\t$admin_update_query .= \", `ftps_used` = `ftps_used` \";\n\n\t\t\t\tif ($ftps != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int) $ftps . \" \";\n\t\t\t\t}\n\t\t\t\tif ($result['ftps'] != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int) $result['ftps'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (($diskspace / 1024) != '-1' || ($result['diskspace'] / 1024) != '-1') {\n\t\t\t\t$admin_update_query .= \", `diskspace_used` = `diskspace_used` \";\n\n\t\t\t\tif (($diskspace / 1024) != '-1') {\n\t\t\t\t\t$admin_update_query .= \" + 0\" . (int) $diskspace . \" \";\n\t\t\t\t}\n\t\t\t\tif (($result['diskspace'] / 1024) != '-1') {\n\t\t\t\t\t$admin_update_query .= \" - 0\" . (int) $result['diskspace'] . \" \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$admin_update_query .= \" WHERE `adminid` = '\" . (int) $result['adminid'] . \"'\";\n\t\t\tDatabase::query($admin_update_query);\n\t\t}\n\n\t\t$this->logger()->logAction($this->isAdmin() ? \\Froxlor\\FroxlorLogger::ADM_ACTION : \\Froxlor\\FroxlorLogger::USR_ACTION, LOG_INFO, \"[API] edited user '\" . $result['loginname'] . \"'\");\n\n\t\t/*\n\t\t * move customer to another admin/reseller; #1166\n\t\t */\n\t\tif ($this->isAdmin()) {\n\t\t\tif ($move_to_admin > 0 && $move_to_admin != $result['adminid']) {\n\t\t\t\t$move_result = $this->apiCall('Customers.move', array(\n\t\t\t\t\t'id' => $result['customerid'],\n\t\t\t\t\t'adminid' => $move_to_admin\n\t\t\t\t));\n\t\t\t\tif ($move_result != true) {\n\t\t\t\t\t\\Froxlor\\UI\\Response::standard_error('moveofcustomerfailed', $move_result, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$result = $this->apiCall('Customers.get', array(\n\t\t\t'id' => $result['customerid']\n\t\t));\n\t\treturn $this->response(200, \"successful\", $result);\n\t}\n\n\t/**\n\t * delete a customer entry by either id or loginname\n\t *\n\t * @param int $id\n\t *        \toptional, the customer-id\n\t * @param string $loginname\n\t *        \toptional, the loginname\n\t * @param bool $delete_userfiles\n\t *        \toptional, default false\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function delete()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = ($id <= 0 ? false : true);\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\t\t\t$delete_userfiles = $this->getParam('delete_userfiles', true, 0);\n\n\t\t\t$result = $this->apiCall('Customers.get', array(\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t));\n\t\t\t$id = $result['customerid'];\n\n\t\t\t$databases_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_DATABASES . \"`\n\t\t\t\tWHERE `customerid` = :id ORDER BY `dbserver`\n\t\t\t\");\n\t\t\tDatabase::pexecute($databases_stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t));\n\t\t\tDatabase::needRoot(true);\n\t\t\t$last_dbserver = 0;\n\n\t\t\t$dbm = new \\Froxlor\\Database\\DbManager($this->logger());\n\n\t\t\t$priv_changed = false;\n\t\t\twhile ($row_database = $databases_stmt->fetch(\\PDO::FETCH_ASSOC)) {\n\t\t\t\tif ($last_dbserver != $row_database['dbserver']) {\n\t\t\t\t\tDatabase::needRoot(true, $row_database['dbserver']);\n\t\t\t\t\t$dbm->getManager()->flushPrivileges();\n\t\t\t\t\t$last_dbserver = $row_database['dbserver'];\n\t\t\t\t}\n\t\t\t\t$dbm->getManager()->deleteDatabase($row_database['databasename']);\n\t\t\t\t$priv_changed = true;\n\t\t\t}\n\t\t\tif ($priv_changed) {\n\t\t\t\t$dbm->getManager()->flushPrivileges();\n\t\t\t}\n\t\t\tDatabase::needRoot(false);\n\n\t\t\t// delete customer itself\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_CUSTOMERS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// delete customer databases\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_DATABASES . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// first gather all domain-id's to clean up panel_domaintoip, dns-entries and certificates accordingly\n\t\t\t$did_stmt = Database::prepare(\"SELECT `id`, `domain` FROM `\" . TABLE_PANEL_DOMAINS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($did_stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\t\t\twhile ($row = $did_stmt->fetch(\\PDO::FETCH_ASSOC)) {\n\t\t\t\t// remove domain->ip connection\n\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_DOMAINTOIP . \"` WHERE `id_domain` = :did\");\n\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t'did' => $row['id']\n\t\t\t\t), true, true);\n\t\t\t\t// remove domain->dns entries\n\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_DOMAIN_DNS . \"` WHERE `domain_id` = :did\");\n\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t'did' => $row['id']\n\t\t\t\t), true, true);\n\t\t\t\t// remove domain->certificates entries\n\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_DOMAIN_SSL_SETTINGS . \"` WHERE `domainid` = :did\");\n\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t'did' => $row['id']\n\t\t\t\t), true, true);\n\t\t\t\t// remove domains DNS from powerDNS if used, #581\n\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::DELETE_DOMAIN_PDNS, $row['domain']);\n\t\t\t\t// remove domain from acme.sh / lets encrypt if used\n\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::DELETE_DOMAIN_SSL, $row['domain']);\n\t\t\t}\n\t\t\t// remove customer domains\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_DOMAINS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\t\t\t$domains_deleted = $stmt->rowCount();\n\n\t\t\t// delete htpasswds\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_HTPASSWDS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// delete htaccess options\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_HTACCESS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// delete potential existing sessions\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_SESSIONS . \"` WHERE `userid` = :id AND `adminsession` = '0'\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// delete traffic information\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_TRAFFIC . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// remove diskspace analysis\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_PANEL_DISKSPACE . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// delete mail-accounts\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_MAIL_USERS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// delete mail-addresses\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_MAIL_VIRTUAL . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// gather ftp-user names\n\t\t\t$result2_stmt = Database::prepare(\"SELECT `username` FROM `\" . TABLE_FTP_USERS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($result2_stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\t\t\twhile ($row = $result2_stmt->fetch(\\PDO::FETCH_ASSOC)) {\n\t\t\t\t// delete ftp-quotatallies by username\n\t\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_FTP_QUOTATALLIES . \"` WHERE `name` = :name\");\n\t\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\t'name' => $row['username']\n\t\t\t\t), true, true);\n\t\t\t}\n\n\t\t\t// remove ftp-group\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_FTP_GROUPS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// remove ftp-users\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_FTP_USERS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// remove api-keys\n\t\t\t$stmt = Database::prepare(\"DELETE FROM `\" . TABLE_API_KEYS . \"` WHERE `customerid` = :id\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\n\t\t\t// Delete all waiting \"create user\" -tasks for this user, #276\n\t\t\t// Note: the WHERE selects part of a serialized array, but it should be safe this way\n\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_PANEL_TASKS . \"`\n\t\t\t\tWHERE `type` = '2' AND `data` LIKE :loginname\n\t\t\t\");\n\t\t\tDatabase::pexecute($del_stmt, array(\n\t\t\t\t'loginname' => \"%:{$result['loginname']};%\"\n\t\t\t), true, true);\n\n\t\t\t// update admin-resource-usage\n\t\t\tAdmins::decreaseUsage($this->getUserDetail('adminid'), 'customers_used');\n\t\t\tAdmins::decreaseUsage($this->getUserDetail('adminid'), 'domains_used', '', (int) ($domains_deleted - $result['subdomains_used']));\n\n\t\t\tif ($result['mysqls'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($this->getUserDetail('adminid'), 'mysqls_used', '', (int) $result['mysqls']);\n\t\t\t}\n\n\t\t\tif ($result['emails'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($this->getUserDetail('adminid'), 'emails_used', '', (int) $result['emails']);\n\t\t\t}\n\n\t\t\tif ($result['email_accounts'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($this->getUserDetail('adminid'), 'email_accounts_used', '', (int) $result['email_accounts']);\n\t\t\t}\n\n\t\t\tif ($result['email_forwarders'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($this->getUserDetail('adminid'), 'email_forwarders_used', '', (int) $result['email_forwarders']);\n\t\t\t}\n\n\t\t\tif ($result['email_quota'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($this->getUserDetail('adminid'), 'email_quota_used', '', (int) $result['email_quota']);\n\t\t\t}\n\n\t\t\tif ($result['subdomains'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($this->getUserDetail('adminid'), 'subdomains_used', '', (int) $result['subdomains']);\n\t\t\t}\n\n\t\t\tif ($result['ftps'] != '-1') {\n\t\t\t\tAdmins::decreaseUsage($this->getUserDetail('adminid'), 'ftps_used', '', (int) $result['ftps']);\n\t\t\t}\n\n\t\t\tif (($result['diskspace'] / 1024) != '-1') {\n\t\t\t\tAdmins::decreaseUsage($this->getUserDetail('adminid'), 'diskspace_used', '', (int) $result['diskspace']);\n\t\t\t}\n\n\t\t\t// rebuild configs\n\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::REBUILD_VHOST);\n\n\t\t\t// Using nameserver, insert a task which rebuilds the server config\n\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::REBUILD_DNS);\n\n\t\t\tif ($delete_userfiles == 1) {\n\t\t\t\t// insert task to remove the customers files from the filesystem\n\t\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::DELETE_CUSTOMER_FILES, $result['loginname']);\n\t\t\t}\n\n\t\t\t// Using filesystem - quota, insert a task which cleans the filesystem - quota\n\t\t\t\\Froxlor\\System\\Cronjob::inserttask(\\Froxlor\\Cron\\TaskId::CREATE_QUOTA);\n\n\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] deleted customer '\" . $result['loginname'] . \"'\");\n\t\t\treturn $this->response(200, \"successful\", $result);\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * unlock a locked customer by either id or loginname\n\t *\n\t * @param int $id\n\t *        \toptional, the customer-id\n\t * @param string $loginname\n\t *        \toptional, the loginname\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function unlock()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = ($id <= 0 ? false : true);\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t\t$result = $this->apiCall('Customers.get', array(\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t));\n\t\t\t$id = $result['customerid'];\n\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET\n\t\t\t\t`loginfail_count` = '0'\n\t\t\t\tWHERE `customerid`= :id\n\t\t\t\");\n\t\t\tDatabase::pexecute($result_stmt, array(\n\t\t\t\t'id' => $id\n\t\t\t), true, true);\n\t\t\t// set the new value for result-array\n\t\t\t$result['loginfail_count'] = 0;\n\n\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] unlocked customer '\" . $result['loginname'] . \"'\");\n\t\t\treturn $this->response(200, \"successful\", $result);\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * Function to move a given customer to a given admin/reseller\n\t * and update all its references accordingly\n\t *\n\t * @param int $id\n\t *        \toptional, the customer-id\n\t * @param string $loginname\n\t *        \toptional, the loginname\n\t * @param int $adminid\n\t *        \ttarget-admin-id\n\t *        \t\n\t * @access admin\n\t * @throws \\Exception\n\t * @return string json-encoded array\n\t */\n\tpublic function move()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t$adminid = $this->getParam('adminid');\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = ($id <= 0 ? false : true);\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t\t$c_result = $this->apiCall('Customers.get', array(\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t));\n\t\t\t$id = $c_result['customerid'];\n\n\t\t\t// check if target-admin is the current admin\n\t\t\tif ($adminid == $c_result['adminid']) {\n\t\t\t\tthrow new \\Exception(\"Cannot move customer to the same admin/reseller as he currently is assigned to\", 406);\n\t\t\t}\n\n\t\t\t// get target admin\n\t\t\t$a_result = $this->apiCall('Admins.get', array(\n\t\t\t\t'id' => $adminid\n\t\t\t));\n\n\t\t\t// Update customer entry\n\t\t\t$updCustomer_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET `adminid` = :adminid WHERE `customerid` = :cid\n\t\t\t\");\n\t\t\tDatabase::pexecute($updCustomer_stmt, array(\n\t\t\t\t'adminid' => $adminid,\n\t\t\t\t'cid' => $id\n\t\t\t), true, true);\n\n\t\t\t// Update customer-domains\n\t\t\t$updDomains_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_DOMAINS . \"` SET `adminid` = :adminid WHERE `customerid` = :cid\n\t\t\t\");\n\t\t\tDatabase::pexecute($updDomains_stmt, array(\n\t\t\t\t'adminid' => $adminid,\n\t\t\t\t'cid' => $id\n\t\t\t), true, true);\n\n\t\t\t// now, recalculate the resource-usage for the old and the new admin\n\t\t\t\\Froxlor\\User::updateCounters(false);\n\n\t\t\t$this->logger()->logAction(\\Froxlor\\FroxlorLogger::ADM_ACTION, LOG_INFO, \"[API] moved user '\" . $c_result['loginname'] . \"' from admin/reseller '\" . $c_result['adminname'] . \" to admin/reseller '\" . $a_result['loginname'] . \"'\");\n\n\t\t\t$result = $this->apiCall('Customers.get', array(\n\t\t\t\t'id' => $c_result['customerid']\n\t\t\t));\n\t\t\treturn $this->response(200, \"successful\", $result);\n\t\t}\n\t\tthrow new \\Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * increase resource-usage\n\t *\n\t * @param int $customerid\n\t * @param string $resource\n\t * @param string $extra\n\t *        \toptional, default empty\n\t * @param int $increase_by\n\t *        \toptional, default 1\n\t */\n\tpublic static function increaseUsage($customerid = 0, $resource = null, $extra = '', $increase_by = 1)\n\t{\n\t\tself::updateResourceUsage(TABLE_PANEL_CUSTOMERS, 'customerid', $customerid, '+', $resource, $extra, $increase_by);\n\t}\n\n\t/**\n\t * decrease resource-usage\n\t *\n\t * @param int $customerid\n\t * @param string $resource\n\t * @param string $extra\n\t *        \toptional, default empty\n\t * @param int $decrease_by\n\t *        \toptional, default 1\n\t */\n\tpublic static function decreaseUsage($customerid = 0, $resource = null, $extra = '', $decrease_by = 1)\n\t{\n\t\tself::updateResourceUsage(TABLE_PANEL_CUSTOMERS, 'customerid', $customerid, '-', $resource, $extra, $decrease_by);\n\t}\n}\n"], "filenames": ["index.php", "lib/Froxlor/Api/Commands/Admins.php", "lib/Froxlor/Api/Commands/Customers.php"], "buggy_code_start_loc": [24, 230, 407], "buggy_code_end_loc": [357, 531, 1007], "fixing_code_start_loc": [25, 230, 407], "fixing_code_end_loc": [362, 531, 1007], "type": "CWE-79", "message": "Code Injection in GitHub repository froxlor/froxlor prior to 0.10.39.", "other": {"cve": {"id": "CVE-2022-3721", "sourceIdentifier": "security@huntr.dev", "published": "2022-11-04T13:15:10.400", "lastModified": "2022-11-05T02:04:09.997", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Code Injection in GitHub repository froxlor/froxlor prior to 0.10.39."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 2.5}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 7.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:froxlor:froxlor:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.10.39", "matchCriteriaId": "78B1E41B-97A1-4708-B7BC-3F73C5D91639"}]}]}], "references": [{"url": "https://github.com/froxlor/froxlor/commit/1182453c18a83309a3470b2775c148ede740806c", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/a3c506f0-5f8a-4eaa-b8cc-46fb9e35cf7a", "source": "security@huntr.dev", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/froxlor/froxlor/commit/1182453c18a83309a3470b2775c148ede740806c"}}