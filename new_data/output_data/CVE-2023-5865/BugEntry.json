{"buggy_code": ["<?php\n\n/**\n * Private phpMyFAQ Admin API: handling of Ajax user calls.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at https://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2009-2023 phpMyFAQ Team\n * @license   https://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2009-04-04\n */\n\nuse phpMyFAQ\\Auth;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Component\\Alert;\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\MailHelper;\nuse phpMyFAQ\\Permission;\nuse phpMyFAQ\\Report;\nuse phpMyFAQ\\Session\\Token;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Translation;\nuse phpMyFAQ\\User;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Mailer\\Exception\\TransportExceptionInterface;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n//\n// Create Request & Response\n//\n$response = new JsonResponse();\n$request = Request::createFromGlobals();\n\n$ajaxAction = Filter::filterVar($request->query->get('ajaxaction'), FILTER_SANITIZE_SPECIAL_CHARS);\n$userId = Filter::filterInput(INPUT_GET, 'user_id', FILTER_VALIDATE_INT);\n$userSearch = Filter::filterInput(INPUT_GET, 'q', FILTER_SANITIZE_SPECIAL_CHARS);\n$csrfToken = Filter::filterInput(INPUT_GET, 'csrf', FILTER_SANITIZE_SPECIAL_CHARS);\n\nif (\n    $user->perm->hasPermission($user->getUserId(), 'add_user') ||\n    $user->perm->hasPermission($user->getUserId(), 'edit_user') ||\n    $user->perm->hasPermission($user->getUserId(), 'delete_user')\n) {\n    $user = new User($faqConfig);\n\n    switch ($ajaxAction) {\n        case 'get_user_list':\n            $allUsers = [];\n            foreach ($user->searchUsers($userSearch) as $singleUser) {\n                $users = new stdClass();\n                $users->label = $singleUser['login'];\n                $users->value = (int)$singleUser['user_id'];\n                $allUsers[] = $users;\n            }\n            $response->setStatusCode(Response::HTTP_OK);\n            $response->setData($allUsers);\n            $response->send();\n            break;\n\n        case 'get_user_data':\n            $user->getUserById($userId, true);\n            $userdata = $user->userdata->get('*');\n            if (is_array($userdata)) {\n                $userdata['status'] = $user->getStatus();\n                $userdata['login'] = Strings::htmlentities($user->getLogin(), ENT_COMPAT);\n                $userdata['display_name'] = Strings::htmlentities($userdata['display_name'], ENT_COMPAT);\n                $userdata['is_superadmin'] = $user->isSuperAdmin();\n                $userdata['auth_source'] = $user->getUserAuthSource();\n            } else {\n                $userdata = [];\n            }\n            $response->setStatusCode(Response::HTTP_OK);\n            $response->setData($userdata);\n            $response->send();\n            break;\n\n        case 'get_all_user_data':\n            $allUsers = $user->getAllUsers(false);\n            $userData = [];\n            foreach ($allUsers as $userId) {\n                $user->getUserById($userId, true);\n                $userObject = new stdClass();\n                $userObject->id = $user->getUserId();\n                $userObject->status = $user->getStatus();\n                $userObject->isSuperAdmin = $user->isSuperAdmin();\n                $userObject->isVisible = $user->getUserData('is_visible');\n                $userObject->displayName = Report::sanitize($user->getUserData('display_name'));\n                $userObject->userName = Report::sanitize($user->getLogin());\n                $userObject->email = $user->getUserData('email');\n                $userObject->authSource = $user->getUserAuthSource();\n                $userData[] = $userObject;\n            }\n            $response->setStatusCode(Response::HTTP_OK);\n            $response->setData($userData);\n            $response->send();\n            break;\n\n        case 'get_user_rights':\n            $user->getUserById($userId, true);\n            $response->setData($user->perm->getUserRights($userId));\n            $response->send();\n            break;\n\n        case 'activate_user':\n            $postData = json_decode(file_get_contents('php://input', true));\n\n            if (!Token::getInstance()->verifyToken('user', $postData->csrfToken)) {\n                $response->setStatusCode(Response::HTTP_UNAUTHORIZED);\n                $response->setData(['error' => Translation::get('err_NotAuth')]);\n                $response->send();\n                exit(1);\n            }\n\n            $userId = Filter::filterVar($postData->userId, FILTER_VALIDATE_INT);\n\n            $user->getUserById($userId, true);\n            try {\n                if ($user->activateUser()) {\n                    $response->setStatusCode(Response::HTTP_OK);\n                    $response->setData(['success' => $user->getStatus()]);\n                } else {\n                    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                    $response->setData(['error' => $user->getStatus()]);\n                }\n            } catch (TransportExceptionInterface $e) {\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                $response->setData(['error' => $e->getMessage()]);\n            }\n            $response->send();\n            break;\n\n        case 'add_user':\n            if (!Token::getInstance()->verifyToken('add-user', $csrfToken)) {\n                $response->setStatusCode(Response::HTTP_UNAUTHORIZED);\n                $response->setData(['error' => Translation::get('err_NotAuth')]);\n                $response->send();\n                exit(1);\n            }\n\n            $errorMessage = [];\n            $successMessage = '';\n\n            $postData = json_decode(file_get_contents('php://input'), true);\n\n            $userName = Filter::filterVar($postData['userName'], FILTER_SANITIZE_SPECIAL_CHARS);\n            $userRealName = Filter::filterVar($postData['realName'], FILTER_SANITIZE_SPECIAL_CHARS);\n            $userEmail = Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL);\n            $automaticPassword = Filter::filterVar($postData['automaticPassword'], FILTER_VALIDATE_BOOLEAN);\n            $userPassword = Filter::filterVar($postData['password'], FILTER_SANITIZE_SPECIAL_CHARS);\n            $userPasswordConfirm = Filter::filterVar($postData['passwordConfirm'], FILTER_SANITIZE_SPECIAL_CHARS);\n            $userIsSuperAdmin = Filter::filterVar($postData['isSuperAdmin'], FILTER_VALIDATE_BOOLEAN);\n\n            $newUser = new User($faqConfig);\n\n            if (!$newUser->isValidLogin($userName)) {\n                $errorMessage[] = Translation::get('ad_user_error_loginInvalid');\n            }\n            if ($newUser->getUserByLogin($userName)) {\n                $errorMessage[] = Translation::get('ad_adus_exerr');\n            }\n            if ($userRealName === '') {\n                $errorMessage[] = Translation::get('ad_user_error_noRealName');\n            }\n            if (is_null($userEmail)) {\n                $errorMessage[] = Translation::get('ad_user_error_noEmail');\n            }\n            if (!$automaticPassword) {\n                if (strlen($userPassword) <= 7 || strlen($userPasswordConfirm) <= 7) {\n                    $errorMessage[] = Translation::get('ad_passwd_fail');\n                }\n            } else {\n                $userPassword = $newUser->createPassword(8, false);\n            }\n\n            if (count($errorMessage) === 0) {\n                if (!$newUser->createUser($userName, $userPassword)) {\n                    $errorMessage[] = $newUser->error();\n                } else {\n                    $newUser->userdata->set(['display_name', 'email', 'is_visible'], [$userRealName, $userEmail, 0]);\n                    $newUser->setStatus('active');\n                    $newUser->setSuperAdmin((bool)$userIsSuperAdmin);\n                    $mailHelper = new MailHelper($faqConfig);\n                    try {\n                        $mailHelper->sendMailToNewUser($newUser, $userPassword);\n                    } catch (Exception $e) {\n                        // @todo catch exception\n                    }\n                    $successMessage = [\n                        'success' => Translation::get('ad_adus_suc'),\n                        'id' => $newUser->getUserId(),\n                        'status' => $newUser->getStatus(),\n                        'isSuperAdmin' => (bool)$userIsSuperAdmin,\n                        'isVisible' => (bool) $newUser->userdata->get('is_visible'),\n                        'realName' => $userRealName,\n                        'userName' => $userName,\n                        'email' => $userEmail,\n                        'editTranslationString' => Translation::get('ad_user_edit')\n                    ];\n                }\n\n                $response->setStatusCode(Response::HTTP_OK);\n                $response->setData($successMessage);\n                $response->send();\n                exit(1);\n            }\n\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData($errorMessage);\n            $response->send();\n            break;\n\n        case 'delete_user':\n            $deleteData = json_decode(file_get_contents('php://input', true));\n\n            if (!Token::getInstance()->verifyToken('delete-user', $deleteData->csrfToken)) {\n                $response->setStatusCode(Response::HTTP_UNAUTHORIZED);\n                $response->setData(['error' => Translation::get('err_NotAuth')]);\n                $response->send();\n                exit(1);\n            }\n\n            $userId = Filter::filterVar($deleteData->userId, FILTER_VALIDATE_INT);\n\n            $user->getUserById($userId, true);\n            if ($user->getStatus() == 'protected' || $userId == 1) {\n                $message = '<p class=\"alert alert-error\">' . Translation::get('ad_user_error_protectedAccount') . '</p>';\n            } else {\n                if (!$user->deleteUser()) {\n                    $message = Translation::get('ad_user_error_delete');\n                } else {\n                    $category = new Category($faqConfig, [], false);\n                    $category->moveOwnership((int) $userId, 1);\n\n                    // Remove the user from groups\n                    if ('basic' !== $faqConfig->get('security.permLevel')) {\n                        $permissions = Permission::selectPerm('medium', $faqConfig);\n                        $permissions->removeFromAllGroups($userId);\n                    }\n\n                    $message = Alert::success('ad_user_deleted');\n                }\n            }\n            $response->setStatusCode(Response::HTTP_OK);\n            $response->setData($message);\n            $response->send();\n            break;\n\n        case 'overwrite_password':\n            $postData = json_decode(file_get_contents('php://input', true));\n\n            $userId = Filter::filterVar($postData->userId, FILTER_VALIDATE_INT);\n            $newPassword = Filter::filterVar($postData->newPassword, FILTER_SANITIZE_SPECIAL_CHARS);\n            $retypedPassword = Filter::filterVar($postData->passwordRepeat, FILTER_SANITIZE_SPECIAL_CHARS);\n\n            if (!Token::getInstance()->verifyToken('add-user', $csrfToken)) {\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                $response->setData(['error' => Translation::get('err_NotAuth')]);\n                $response->send();\n                exit(1);\n            }\n\n            if (strlen($newPassword) <= 7 || strlen($retypedPassword) <= 7) {\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                $response->setData(['error' => Translation::get('ad_passwd_fail')]);\n                $response->send();\n                exit(1);\n            }\n\n            $user->getUserById($userId, true);\n\n            $auth = new Auth($faqConfig);\n            $authSource = $auth->selectAuth($user->getAuthSource('name'));\n            $authSource->selectEncType($user->getAuthData('encType'));\n\n            if ($newPassword === $retypedPassword) {\n                if (!$user->changePassword($newPassword)) {\n                    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                    $response->setData(['error' => Translation::get('ad_passwd_fail')]);\n                    $response->send();\n                }\n                $response->setStatusCode(Response::HTTP_OK);\n                $response->setData(['success' => Translation::get('ad_passwdsuc')]);\n            } else {\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                $response->setData(['error' => Translation::get('ad_passwd_fail')]);\n            }\n            $response->send();\n            break;\n    }\n}\n", "/**\n * Functions for handling user management\n *\n * @todo move fetch() functionality to api.js\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at https://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2022-2023 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2022-03-23\n */\n\nimport { addElement } from '../../../../assets/src/utils';\n\nconst activateUser = (userId, csrfToken) => {\n  fetch('index.php?action=ajax&ajax=user&ajaxaction=delete_user', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json, text/plain, */*',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      csrfToken: csrfToken,\n      userId: userId,\n    }),\n  })\n    .then(async (response) => {\n      if (response.status === 200) {\n        return response.json();\n      }\n      throw new Error('Network response was not ok.');\n    })\n    .then(() => {\n      const icon = document.querySelector(`.icon_user_id_${userId}`);\n      icon.classList.remove('fa-ban');\n      icon.classList.add('fa-check-circle-o');\n      const button = document.getElementById(`btn_activate_user_id_${userId}`);\n      button.remove();\n    })\n    .catch((error) => {\n      const message = document.getElementById('pmf-user-message');\n      message.insertAdjacentElement(\n        'afterend',\n        addElement('div', { classList: 'alert alert-danger', innerText: error })\n      );\n    });\n};\n\nconst deleteUser = (userId, csrfToken) => {\n  const message = document.getElementById('pmf-user-message');\n  fetch('index.php?action=ajax&ajax=user&ajaxaction=delete_user', {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json, text/plain, */*',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      csrfToken: csrfToken,\n      userId: userId,\n    }),\n  })\n    .then(async (response) => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error('Network response was not ok: ', { cause: { response } });\n    })\n    .then((response) => {\n      message.insertAdjacentElement('afterend', addElement('div', { innerHTML: response }));\n      const row = document.querySelector(`.row_user_id_${userId}`);\n      row.addEventListener('click', () => (row.style.opacity = '0'));\n      row.addEventListener('transitionend', () => row.remove());\n    })\n    .catch(async (error) => {\n      const errorMessage = await error.cause.response.json();\n      message.insertAdjacentElement(\n        'afterend',\n        addElement('div', { classList: 'alert alert-danger', innerText: errorMessage })\n      );\n    });\n};\n\nexport const handleUserList = () => {\n  const activateButtons = document.querySelectorAll('.btn-activate-user');\n  const deleteButtons = document.querySelectorAll('.btn-delete-user');\n\n  if (activateButtons) {\n    activateButtons.forEach((button) => {\n      button.addEventListener('click', (event) => {\n        event.preventDefault();\n\n        const csrfToken = event.target.getAttribute('data-csrf-token');\n        const userId = event.target.getAttribute('data-user-id');\n\n        activateUser(userId, csrfToken);\n      });\n    });\n  }\n\n  if (deleteButtons) {\n    deleteButtons.forEach((button) => {\n      button.addEventListener('click', (event) => {\n        event.preventDefault();\n\n        const csrfToken = event.target.getAttribute('data-csrf-token');\n        const userId = event.target.getAttribute('data-user-id');\n\n        deleteUser(userId, csrfToken);\n      });\n    });\n  }\n};\n", "<?php\n\n/**\n * Displays the user management frontend.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at https://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Lars Tiedemann <php@larstiedemann.de>\n * @author    Uwe Pries <uwe.pries@digartis.de>\n * @author    Sarah Hermann <sayh@gmx.de>\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2005-2023 phpMyFAQ Team\n * @license   https://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2005-12-15\n */\n\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Component\\Alert;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Pagination;\nuse phpMyFAQ\\Permission;\nuse phpMyFAQ\\Session\\Token;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Translation;\nuse phpMyFAQ\\User;\nuse phpMyFAQ\\User\\CurrentUser;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\nif (\n    $user->perm->hasPermission($user->getUserId(), 'edit_user') || $user->perm->hasPermission(\n        $user->getUserId(),\n        'delete_user'\n    ) || $user->perm->hasPermission($user->getUserId(), 'add_user')\n) {\n    $userId = Filter::filterInput(INPUT_GET, 'user_id', FILTER_VALIDATE_INT);\n\n    // set some parameters\n    $selectSize = 10;\n    $defaultUserAction = 'list';\n    $defaultUserStatus = 'active';\n    $userActionList = [\n        'update_rights',\n        'update_data',\n        'delete_confirm',\n        'delete',\n        'addsave',\n        'list',\n        'listallusers'\n    ];\n\n    // what shall we do?\n    // actions defined by url: user_action=\n    $userAction = Filter::filterInput(INPUT_GET, 'user_action', FILTER_SANITIZE_SPECIAL_CHARS, $defaultUserAction);\n\n    $currentUser = new CurrentUser($faqConfig);\n\n    // actions defined by submit button\n    if (isset($_POST['user_action_deleteConfirm'])) {\n        $userAction = 'delete_confirm';\n    }\n    if (isset($_POST['cancel'])) {\n        $userAction = $defaultUserAction;\n    }\n\n    // update user rights\n    if ($userAction == 'update_rights' && $user->perm->hasPermission($user->getUserId(), 'edit_user')) {\n        $message = '';\n        $userAction = $defaultUserAction;\n        $userId = Filter::filterInput(INPUT_POST, 'user_id', FILTER_VALIDATE_INT, 0);\n        $csrfOkay = true;\n        $csrfToken = Filter::filterInput(INPUT_POST, 'pmf-csrf-token', FILTER_SANITIZE_SPECIAL_CHARS);\n        if (!Token::getInstance()->verifyToken('update-user-rights', $csrfToken)) {\n            $csrfOkay = false;\n        }\n\n        if (0 === (int)$userId || !$csrfOkay) {\n            $message .= Alert::danger('ad_user_error_noId');\n        } else {\n            $user = new User($faqConfig);\n            $perm = $user->perm;\n            // @todo: Add Filter::filterInput[]\n            $userRights = $_POST['user_rights'] ?? [];\n            if (!$perm->refuseAllUserRights($userId)) {\n                $message .= Alert::danger('ad_msg_mysqlerr');\n            }\n            foreach ($userRights as $rightId) {\n                $perm->grantUserRight($userId, $rightId);\n            }\n            $idUser = $user->getUserById($userId, true);\n            $message .= sprintf(\n                '<p class=\"alert alert-success\">%s <strong>%s</strong> %s</p>',\n                Translation::get('ad_msg_savedsuc_1'),\n                Strings::htmlentities($user->getLogin(), ENT_QUOTES),\n                Translation::get('ad_msg_savedsuc_2')\n            );\n            $user = new CurrentUser($faqConfig);\n        }\n    }\n\n    // update user data\n    if ($userAction == 'update_data' && $user->perm->hasPermission($user->getUserId(), 'edit_user')) {\n        $message = '';\n        $userAction = $defaultUserAction;\n        $userId = Filter::filterInput(INPUT_POST, 'user_id', FILTER_VALIDATE_INT, 0);\n        if ($userId === 0) {\n            $message .= Alert::danger('ad_user_error_noId');\n        } else {\n            $userData = [];\n            $userData['display_name'] = Filter::filterInput(INPUT_POST, 'display_name', FILTER_SANITIZE_SPECIAL_CHARS);\n            $userData['email'] = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n            $userData['last_modified'] = Filter::filterInput(INPUT_POST, 'last_modified', FILTER_SANITIZE_SPECIAL_CHARS);\n            $userStatus = Filter::filterInput(INPUT_POST, 'user_status', FILTER_SANITIZE_SPECIAL_CHARS, $defaultUserStatus);\n            $isSuperAdmin = Filter::filterInput(INPUT_POST, 'is_superadmin', FILTER_SANITIZE_SPECIAL_CHARS);\n            $isSuperAdmin = $isSuperAdmin === 'on';\n            $deleteTwofactor = Filter::filterInput(INPUT_POST, 'overwrite_twofactor', FILTER_SANITIZE_SPECIAL_CHARS);\n            $deleteTwofactor = $deleteTwofactor === 'on';\n\n            $user = new User($faqConfig);\n            $user->getUserById($userId, true);\n\n            $stats = $user->getStatus();\n\n            // reset two-factor authentication if required\n            if ($deleteTwofactor) {\n                $user->setUserData(['secret' => '', 'twofactor_enabled' => 0]);\n            }\n\n            // set new password and sent email if a user is switched to active\n            if ($stats == 'blocked' && $userStatus == 'active') {\n                if (!$user->activateUser()) {\n                    $userStatus = 'invalid_status';\n                }\n            }\n\n            // Set super-admin flag\n            $user->setSuperAdmin($isSuperAdmin);\n\n            if (\n                !$user->userdata->set(array_keys($userData), array_values($userData)) || !$user->setStatus(\n                    $userStatus\n                )\n            ) {\n                $message .= Alert::danger('ad_msg_mysqlerr');\n            } else {\n                $message .= sprintf(\n                    '<p class=\"alert alert-success\">%s <strong>%s</strong> %s</p>',\n                    Translation::get('ad_msg_savedsuc_1'),\n                    Strings::htmlentities($user->getLogin(), ENT_QUOTES),\n                    Translation::get('ad_msg_savedsuc_2')\n                );\n            }\n        }\n    }\n\n    // delete user confirmation\n    if ($userAction == 'delete_confirm' && $user->perm->hasPermission($user->getUserId(), 'delete_user')) {\n        $message = '';\n        $user = new CurrentUser($faqConfig);\n\n        $userId = Filter::filterInput(INPUT_GET, 'user_delete_id', FILTER_VALIDATE_INT, 0);\n        if ($userId == 0) {\n            $message .= Alert::danger('ad_user_error_noId');\n            $userAction = $defaultUserAction;\n        } else {\n            $user->getUserById($userId, true);\n            // account is protected\n            if ($user->getStatus() == 'protected' || $userId == 1) {\n                $message .= Alert::danger('ad_user_error_protectedAccount');\n                $userAction = $defaultUserAction;\n            } else {\n                ?>\n\n                <div\n                    class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n                    <h1 class=\"h2\">\n                        <i aria-hidden=\"true\" class=\"fa fa-user\"></i>\n                        <?= Translation::get('ad_user_deleteUser') ?> <?= Strings::htmlentities($user->getLogin(), ENT_QUOTES) ?>\n                    </h1>\n                </div>\n\n                <p class=\"alert alert-danger\">\n                    <?= Translation::get('ad_user_del_3') . ' ' . Translation::get(\n                        'ad_user_del_1'\n                    ) . ' ' . Translation::get('ad_user_del_2') ?>\n                </p>\n                <form action=\"?action=user&amp;user_action=delete\" method=\"post\" accept-charset=\"utf-8\">\n                    <input type=\"hidden\" name=\"user_id\" value=\"<?= $userId ?>\">\n                    <?= Token::getInstance()->getTokenInput('delete-user') ?>\n                    <p class=\"text-center\">\n                        <button class=\"btn btn-danger\" type=\"submit\">\n                            <?= Translation::get('ad_gen_yes') ?>\n                        </button>\n                        <a class=\"btn btn-info\" href=\"?action=user\">\n                            <?= Translation::get('ad_gen_no') ?>\n                        </a>\n                    </p>\n                </form>\n                <?php\n            }\n        }\n    }\n\n    // delete user\n    if ($userAction == 'delete' && $user->perm->hasPermission($user->getUserId(), 'delete_user')) {\n        $message = '';\n        $user = new User($faqConfig);\n        $userId = Filter::filterInput(INPUT_POST, 'user_id', FILTER_VALIDATE_INT, 0);\n        $csrfOkay = true;\n        $csrfToken = Filter::filterInput(INPUT_POST, 'pmf-csrf-token', FILTER_SANITIZE_SPECIAL_CHARS);\n        $userAction = $defaultUserAction;\n\n        if (!Token::getInstance()->verifyToken('delete-user', $csrfToken)) {\n            $csrfOkay = false;\n        }\n\n        if (0 === (int)$userId || !$csrfOkay) {\n            $message .= Alert::danger('ad_user_error_noId');\n        } else {\n            if (!$user->getUserById($userId, true)) {\n                $message .= Alert::danger('ad_user_error_noId');\n            }\n            if (!$user->deleteUser()) {\n                $message .= Alert::danger('ad_user_error_delete');\n            } else {\n                // Move the category ownership to admin (id == 1)\n                $oCat = new Category($faqConfig, [], false);\n                $oCat->setUser($currentAdminUser);\n                $oCat->setGroups($currentAdminGroups);\n                $oCat->moveOwnership((int)$userId, 1);\n\n                // Remove the user from groups\n                if ('basic' !== $faqConfig->get('security.permLevel')) {\n                    $oPerm = Permission::selectPerm('medium', $faqConfig);\n                    $oPerm->removeFromAllGroups($userId);\n                }\n\n                $message .= Alert::success('ad_user_deleted');\n            }\n            $userError = $user->error();\n            if ($userError != '') {\n                $message .= sprintf('<p class=\"alert alert-danger\">%s</p>', $userError);\n            }\n        }\n    }\n\n    if (!isset($message)) {\n        $message = '';\n    }\n\n    // show a list of users\n    if ($userAction === 'list') { ?>\n        <div\n            class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n            <h1 class=\"h2\">\n                <i aria-hidden=\"true\" class=\"fa fa-user\"></i>\n                <?= Translation::get('ad_user') ?>\n            </h1>\n            <div class=\"btn-toolbar mb-2 mb-md-0\">\n                <div class=\"btn-group mr-2\">\n                    <?php\n                    if ($currentUser->perm->hasPermission($user->getUserId(), 'add_user')) : ?>\n                        <button type=\"button\" class=\"btn btn-sm btn-primary\" data-bs-toggle=\"modal\"\n                                data-bs-target=\"#addUserModal\">\n                            <i class=\"fa fa-user-plus\" aria-label=\"true\"></i> <?= Translation::get('ad_user_add') ?>\n                        </button>\n                        <?php\n                    endif ?>\n                    <?php\n                    if ($currentUser->perm->hasPermission($user->getUserId(), 'edit_user')) : ?>\n                        <a class=\"btn btn-sm btn-secondary\" href=\"?action=user&amp;user_action=listallusers\">\n                            <i class=\"fa fa-users\" aria-label=\"true\"></i> <?= Translation::get('list_all_users') ?>\n                        </a>\n                        <?php\n                    endif ?>\n                </div>\n            </div>\n        </div>\n\n        <div id=\"pmf-user-message\"><?= $message ?></div>\n\n        <div class=\"row mb-2\">\n            <div class=\"col-lg-4\">\n                <form name=\"user_select\" id=\"user_select\" action=\"?action=user&amp;user_action=delete_confirm\"\n                      method=\"post\" role=\"form\" class=\"form_inline\">\n                    <input type=\"hidden\" id=\"current_user_id\" value=\"<?= $userId ?>\">\n                    <div class=\"card mb-4\">\n                        <h5 class=\"card-header py-3\">\n                            <i aria-hidden=\"true\" class=\"fa fa-search\"></i> <?= Translation::get('msgSearch') ?>\n                        </h5>\n                        <div class=\"card-body\">\n                            <div class=\"form-floating\">\n                                <input type=\"text\" class=\"form-control\" id=\"pmf-user-list-autocomplete\" aria-controls=\"\"\n                                       name=\"user_list_search\" placeholder=\"<?= Translation::get('ad_auth_user') ?>\"\n                                       spellcheck=\"false\" autocomplete=\"off\" autocapitalize=\"off\" maxlength=\"2048\">\n                                <label for=\"pmf-user-list-autocomplete\"><?= Translation::get('ad_auth_user') ?></label>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </div>\n\n            <div class=\"col-lg-4\">\n                <div class=\"card mb-4\">\n                    <h5 class=\"card-header py-3\" id=\"user_data_legend\">\n                        <i aria-hidden=\"true\" class=\"fa fa-user\"></i> <?= Translation::get('ad_user_profou') ?>\n                    </h5>\n                    <form action=\"?action=user&amp;user_action=update_data\" method=\"post\">\n                        <div class=\"card-body\">\n                            <input type=\"hidden\" id=\"last_modified\" name=\"last_modified\" value=\"\">\n                            <input id=\"update_user_id\" type=\"hidden\" name=\"user_id\" value=\"0\">\n                            <?= Token::getInstance()->getTokenInput('update-user-data') ?>\n\n                            <div class=\"row mb-2\">\n                                <label for=\"auth_source\" class=\"col-lg-4 col-form-label\">\n                                    <?= Translation::get('msgAuthenticationSource') ?>\n                                </label>\n                                <div class=\"col-lg-8\">\n                                    <input id=\"auth_source\" class=\"form-control-plaintext\" type=\"text\" value=\"\"\n                                           readonly>\n                                </div>\n                            </div>\n\n                            <div class=\"row mb-2\">\n                                <label for=\"user_status\" class=\"col-lg-4 col-form-label\">\n                                    <?= Translation::get('ad_user_status') ?>\n                                </label>\n                                <div class=\"col-lg-8\">\n                                    <select id=\"user_status\" class=\"form-select\" name=\"user_status\" disabled>\n                                        <option value=\"active\"><?= Translation::get('ad_user_active') ?></option>\n                                        <option value=\"blocked\"><?= Translation::get('ad_user_blocked') ?></option>\n                                        <option value=\"protected\"><?= Translation::get('ad_user_protected') ?></option>\n                                    </select>\n                                </div>\n                            </div>\n\n                            <div class=\"row mb-2\">\n                                <label class=\"col-lg-4 col-form-label\" for=\"display_name\">\n                                    <?= Translation::get('ad_user_realname') ?>\n                                </label>\n                                <div class=\"col-lg-8\">\n                                    <input type=\"text\" id=\"display_name\" name=\"display_name\" value=\"\"\n                                           class=\"form-control\" required disabled>\n                                </div>\n                            </div>\n\n                            <div class=\"row mb-2\">\n                                <label class=\"col-lg-4 col-form-label\" for=\"email\">\n                                    <?= Translation::get('ad_entry_email') ?>\n                                </label>\n                                <div class=\"col-lg-8\">\n                                    <input type=\"email\" id=\"email\" name=\"email\" value=\"\" class=\"form-control\" required\n                                           disabled>\n                                </div>\n                            </div>\n\n                            <div class=\"row mb-2\">\n                                <div class=\"offset-lg-4 col-lg-8\">\n                                    <div class=\"form-check\">\n                                        <input class=\"form-check-input\" type=\"checkbox\" id=\"is_superadmin\"\n                                               name=\"is_superadmin\" disabled>\n                                        <label class=\"form-check-label\" for=\"is_superadmin\">\n                                            <?= Translation::get('ad_user_is_superadmin') ?>\n                                        </label>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"row mb-2\">\n                                <div class=\"offset-lg-4 col-lg-8\">\n                                    <a class=\"btn btn-danger pmf-admin-overwrite-password\" data-bs-toggle=\"modal\"\n                                       href=\"#pmf-modal-user-password-overwrite\">\n                                        <?= Translation::get('ad_user_overwrite_passwd') ?>\n                                    </a>\n                                </div>\n                            </div>\n\n                            <div class=\"row mb-2\">\n                                <div class=\"offset-lg-4 col-lg-8\">\n                                    <div class=\"form-check\">\n                                        <input class=\"form-check-input\" type=\"checkbox\" id=\"overwrite_twofactor\" name=\"overwrite_twofactor\">\n                                        <label class=\"form-check-label\" for=\"overwrite_twofactor\">\n                                            <?= Translation::get('ad_user_overwrite_twofactor') ?>\n                                        </label>\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n                        <div class=\"card-footer text-end\">\n                            <?php if ($userId > 0): ?>\n                            <a class=\"btn btn-danger\" href=\"?action=user&amp;user_action=delete_confirm&user_delete_id=<?= $userId ?>\">\n                                <?= Translation::get('ad_user_delete') ?>\n                            </a>\n                            <?php endif; ?>\n                            <button class=\"btn btn-success\" type=\"submit\">\n                                <?= Translation::get('ad_gen_save') ?>\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n\n            <div class=\"col-lg-4\" id=\"userRights\">\n                <form id=\"rightsForm\" action=\"?action=user&amp;user_action=update_rights\" method=\"post\"\n                      accept-charset=\"utf-8\">\n                    <input type=\"hidden\" name=\"user_id\" id=\"rights_user_id\" value=\"0\">\n                    <?= Token::getInstance()->getTokenInput('update-user-rights') ?>\n\n                    <div class=\"card mb-4\">\n                        <h5 class=\"card-header py-3\" id=\"user_rights_legend\">\n                            <i aria-hidden=\"true\" class=\"fa fa-lock\"></i> <?= Translation::get('ad_user_rights') ?>\n                        </h5>\n                        <div class=\"card-body\">\n                            <div class=\"text-center mb-3\">\n                                <button type=\"button\" class=\"btn btn-primary btn-sm\" id=\"checkAll\">\n                                    <?= Translation::get('ad_user_checkall') ?>\n                                    /\n                                    <?= Translation::get('ad_user_uncheckall') ?>\n                                </button>\n                            </div>\n                            <?php\n                            foreach ($user->perm->getAllRightsData() as $right) : ?>\n                                <div class=\"form-check\">\n                                    <input id=\"user_right_<?= $right['right_id'] ?>\" type=\"checkbox\"\n                                           name=\"user_rights[]\" value=\"<?= $right['right_id'] ?>\"\n                                           class=\"form-check-input permission\">\n                                    <label class=\"form-check-label\" for=\"user_right_<?= $right['right_id'] ?>\">\n                                        <?php\n                                        try {\n                                            echo Translation::get('rightsLanguage::' . $right['name']);\n                                        } catch (ErrorException) {\n                                            echo $right['description'];\n                                        }\n                                        ?>\n                                    </label>\n                                </div>\n                                <?php\n                            endforeach; ?>\n                        </div>\n                        <div class=\"card-footer\">\n                            <div class=\"card-button text-end\">\n                                <button class=\"btn btn-success\" type=\"submit\">\n                                    <?= Translation::get('ad_gen_save') ?>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n\n        <?php\n    }\n\n    // show a list of all users\n    if ($userAction == 'listallusers' && $user->perm->hasPermission($user->getUserId(), 'edit_user')) {\n        $allUsers = $user->getAllUsers(false);\n        $numUsers = is_countable($allUsers) ? count($allUsers) : 0;\n        $page = Filter::filterInput(INPUT_GET, 'page', FILTER_VALIDATE_INT, 0);\n        $perPage = 10;\n        $numPages = ceil($numUsers / $perPage);\n        $lastPage = $page * $perPage;\n        $firstPage = $lastPage - $perPage;\n\n        $baseUrl = sprintf(\n            '%sadmin/?action=user&amp;user_action=listallusers&amp;page=%d',\n            $faqConfig->getDefaultUrl(),\n            $page\n        );\n\n        // Pagination options\n        $options = [\n            'baseUrl' => $baseUrl,\n            'total' => $numUsers,\n            'perPage' => $perPage,\n            'useRewrite' => false,\n            'pageParamName' => 'page',\n        ];\n        $pagination = new Pagination($options);\n        ?>\n\n<div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n    <h1 class=\"h2\">\n        <i aria-hidden=\"true\" class=\"fa fa-user\"></i>\n        <?= Translation::get('ad_user') ?>\n    </h1>\n    <div class=\"btn-toolbar mb-2 mb-md-0\">\n        <div class=\"btn-group mr-2\">\n            <?php\n            if ($currentUser->perm->hasPermission($user->getUserId(), 'add_user')) : ?>\n                <button type=\"button\" class=\"btn btn-sm btn-primary\" data-bs-toggle=\"modal\"\n                        data-bs-target=\"#addUserModal\">\n                    <i class=\"fa fa-user-plus\" aria-label=\"true\"></i> <?= Translation::get('ad_user_add') ?>\n                </button>\n                <?php\n            endif ?>\n            <button type=\"button\" class=\"btn btn-sm btn-secondary\" id=\"pmf-button-export-users\">\n                <i class=\"fa fa-download\" aria-label=\"true\"></i> Export users as CSV\n            </button>\n        </div>\n    </div>\n</div>\n\n        <div id=\"pmf-user-message\"><?= $message ?></div>\n\n        <table class=\"table table-striped align-middle\" id=\"pmf-admin-user-table\">\n            <thead class=\"thead-dark\">\n            <tr>\n                <th><?= Translation::get('ad_entry_id') ?></th>\n                <th><?= Translation::get('ad_user_status') ?></th>\n                <th><?= Translation::get('ad_user_is_superadmin') ?></th>\n                <th><?= Translation::get('ad_user_is_visible') ?></th>\n                <th><?= Translation::get('msgNewContentName') ?></th>\n                <th><?= Translation::get('ad_auth_user') ?></th>\n                <th><?= Translation::get('msgNewContentMail') ?></th>\n                <th colspan=\"3\">&nbsp;</th>\n            </tr>\n            </thead>\n            <?php\n            if ($perPage < $numUsers) : ?>\n                <tfoot>\n                <tr>\n                    <td colspan=\"8\"><?= $pagination->render() ?></td>\n                </tr>\n                </tfoot>\n                <?php\n            endif;\n            ?>\n        <tbody>\n        <?php\n        $counter = $displayedCounter = 0;\n        foreach ($allUsers as $listedUserId) {\n            $user->getUserById($listedUserId, true);\n\n                if ($displayedCounter >= $perPage) {\n                    continue;\n                }\n                ++$counter;\n                if ($counter <= $firstPage) {\n                    continue;\n                }\n                ++$displayedCounter;\n\n                ?>\n                <tr class=\"row_user_id_<?= $user->getUserId() ?>\">\n                    <td><?= $user->getUserId() ?></td>\n                    <td class=\"text-center\"><i class=\"fa <?php\n                    switch ($user->getStatus()) {\n                        case 'active':\n                            echo 'fa-check-circle-o';\n                            break;\n                        case 'blocked':\n                            echo 'fa-ban';\n                            break;\n                        case 'protected':\n                            echo 'fa-lock';\n                            break;\n                    }\n                    ?> icon_user_id_<?= $user->getUserId() ?>\"></i></td>\n                    <td class=\"text-center\">\n                        <i class=\"fa <?= $user->isSuperAdmin() ? 'fa-user-secret' : 'fa-user-times' ?>\"></i>\n                    </td>\n                    <td class=\"text-center\">\n                        <i class=\"fa <?= $user->getUserData('is_visible') ? 'fa-user' : 'fa-user-o' ?>\"></i>\n                    </td>\n                    <td><?= Strings::htmlentities($user->getUserData('display_name')) ?></td>\n                    <td><?= Strings::htmlentities($user->getLogin()) ?></td>\n                    <td>\n                        <a href=\"mailto:<?= $user->getUserData('email') ?>\">\n                            <?= $user->getUserData('email') ?>\n                        </a>\n                    </td>\n                    <td>\n                        <a href=\"?action=user&amp;user_id=<?= $user->getUserData('user_id') ?>\"\n                           class=\"btn btn-sm btn-info\">\n                            <i class=\"fa fa-pencil\"></i> <?= Translation::get('ad_user_edit') ?>\n                        </a>\n                    </td>\n                    <td>\n                        <?php\n                        if ($user->getStatus() === 'blocked') : ?>\n                            <button type=\"button\" class=\"btn btn-sm btn-success btn-activate-user\"\n                                    id=\"btn_activate_user_id_<?= $user->getUserData('user_id') ?>\"\n                                    data-csrf-token=\"<?= Token::getInstance()->getTokenString('activate-user') ?>\"\n                                    data-user-id=\"<?= $user->getUserData('user_id') ?>\">\n                                <?= Translation::get('ad_news_set_active') ?>\n                            </button>\n                            <?php\n                        endif;\n                        ?>\n                    </td>\n                    <td>\n                        <?php\n                        if ($user->getStatus() !== 'protected') {\n                            $csrfToken = Token::getInstance()->getTokenString('delete-user');\n                        ?>\n                            <button type=\"button\" class=\"btn btn-sm btn-danger btn-delete-user\"\n                                    id=\"btn_user_id_<?= $user->getUserData('user_id') ?>\"\n                                    data-csrf-token=\"<?= $csrfToken ?>\"\n                                    data-user-id=\"<?= $user->getUserData('user_id') ?>\">\n                                <i class=\"fa fa-trash\" data-csrf-token=\"<?= $csrfToken ?>\"\n                                   data-user-id=\"<?= $user->getUserData('user_id') ?>\"></i>\n                                <?= Translation::get('ad_user_delete') ?>\n                            </button>\n                        <?php\n                        }\n                        ?>\n                    </td>\n                </tr>\n                <?php\n            }\n            ?>\n            </tbody>\n        </table>\n        <?php\n    }\n\n    $user = CurrentUser::getCurrentUser($faqConfig);\n    ?>\n\n    <!-- Modal to add a new user -->\n    <div class=\"modal fade\" id=\"addUserModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"addUserModalLabel\"\n         aria-hidden=\"true\">\n        <div class=\"modal-dialog modal-lg\" role=\"document\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h5 class=\"modal-title\" id=\"addUserModalLabel\">\n                        <i aria-hidden=\"true\" class=\"fa fa-user-plus\"></i> <?= Translation::get('ad_adus_adduser') ?>\n                    </h5>\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <form action=\"#\" method=\"post\" role=\"form\" id=\"pmf-add-user-form\" class=\"needs-validation\"\n                          autocomplete=\"off\"\n                          novalidate>\n\n                        <input type=\"hidden\" id=\"add_user_csrf\" name=\"add_user_csrf\"\n                               value=\"<?= Token::getInstance()->getTokenString('add-user') ?>\">\n\n                        <div class=\"alert alert-danger d-none\" id=\"pmf-add-user-error-message\"></div>\n\n                        <div class=\"row mb-2\">\n                            <label class=\"col-lg-4 col-form-label\" for=\"add_user_name\">\n                                <?= Translation::get('ad_adus_name') ?>\n                            </label>\n                            <div class=\"col-lg-8\">\n                                <input type=\"text\" name=\"add_user_name\" id=\"add_user_name\" required tabindex=\"1\"\n                                       class=\"form-control\">\n                            </div>\n                        </div>\n\n                        <div class=\"row mb-2\">\n                            <label class=\"col-lg-4 col-form-label\"\n                                   for=\"add_user_realname\"><?= Translation::get('ad_user_realname') ?></label>\n                            <div class=\"col-lg-8\">\n                                <input type=\"text\" name=\"add_user_realname\" id=\"add_user_realname\" required tabindex=\"2\"\n                                       class=\"form-control\">\n                            </div>\n                        </div>\n\n                        <div class=\"row mb-2\">\n                            <label class=\"col-lg-4 col-form-label\" for=\"add_user_email\">\n                                <?= Translation::get('ad_entry_email') ?>\n                            </label>\n                            <div class=\"col-lg-8\">\n                                <input type=\"email\" name=\"user_email\" id=\"add_user_email\" required tabindex=\"3\"\n                                       class=\"form-control\">\n                            </div>\n                        </div>\n\n                        <div class=\"row mb-2\">\n                            <div class=\"col-lg-4\"></div>\n                            <div class=\"col-lg-8\">\n                                <div class=\"form-check\">\n                                    <input class=\"form-check-input\" type=\"checkbox\" id=\"add_user_automatic_password\"\n                                           name=\"add_user_automatic_password\" value=\"\">\n                                    <label class=\"form-check-label\" for=\"add_user_automatic_password\">\n                                        <?= Translation::get('ad_add_user_change_password') ?>\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div id=\"add_user_show_password_inputs\">\n                            <div class=\"row mb-2\">\n                                <label class=\"col-lg-4 col-form-label\"\n                                       for=\"add_user_password\"><?= Translation::get('ad_adus_password') ?></label>\n                                <div class=\"col-lg-8\">\n                                    <input type=\"password\" name=\"add_user_password\" id=\"add_user_password\"\n                                           class=\"form-control\" minlength=\"8\"\n                                           autocomplete=\"off\" tabindex=\"4\">\n                                </div>\n                            </div>\n\n                            <div class=\"row mb-2\">\n                                <label class=\"col-lg-4 col-form-label\"\n                                       for=\"add_user_password_confirm\"><?= Translation::get('ad_passwd_con') ?></label>\n                                <div class=\"col-lg-8\">\n                                    <input type=\"password\" name=\"add_user_password_confirm\"\n                                           id=\"add_user_password_confirm\" minlength=\"8\"\n                                           class=\"form-control\" autocomplete=\"off\" tabindex=\"5\">\n                                </div>\n                            </div>\n                        </div>\n\n                        <?php if ($user->isSuperAdmin()) { ?>\n                        <div class=\"row mb-2\">\n                            <div class=\"col-lg-4\"></div>\n                            <div class=\"col-lg-8\">\n                                <div class=\"form-check\">\n                                    <input class=\"form-check-input\" type=\"checkbox\" id=\"add_user_is_superadmin\"\n                                           name=\"user_is_superadmin\">\n                                    <label class=\"form-check-label\" for=\"add_user_is_superadmin\">\n                                        <?= Translation::get('ad_user_is_superadmin') ?>\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n                        <?php } ?>\n\n                    </form>\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">\n                        <?= Translation::get('ad_gen_cancel') ?>\n                    </button>\n                    <button type=\"button\" class=\"btn btn-primary\" id=\"pmf-add-user-action\">\n                        <?= Translation::get('ad_gen_save') ?>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <!-- Modal to overwrite password -->\n    <div class=\"modal fade\" id=\"pmf-modal-user-password-overwrite\">\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h4><?= Translation::get('ad_menu_passwd') ?></h4>\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <form action=\"#\" method=\"post\" accept-charset=\"utf-8\" autocomplete=\"off\">\n                        <input type=\"hidden\" name=\"csrf\" id=\"modal_csrf\"\n                               value=\"<?= Token::getInstance()->getTokenString('overwrite-password') ?>\">\n                        <input type=\"hidden\" name=\"user_id\" id=\"modal_user_id\" value=\"<?= $userId ?>\">\n\n                        <div class=\"row mb-2\">\n                            <label class=\"col-5 col-form-label\" for=\"npass\">\n                                <?= Translation::get('ad_passwd_new') ?>\n                            </label>\n                            <div class=\"col-7\">\n                                <input type=\"password\" autocomplete=\"off\" name=\"npass\" id=\"npass\"\n                                       class=\"form-control\" required>\n                            </div>\n                        </div>\n\n                        <div class=\"row mb-2\">\n                            <label class=\"col-5 col-form-label\" for=\"bpass\">\n                                <?= Translation::get('ad_passwd_con') ?>\n                            </label>\n                            <div class=\"col-7\">\n                                <input type=\"password\" autocomplete=\"off\" name=\"bpass\" id=\"bpass\"\n                                       class=\"form-control\" required>\n                            </div>\n                        </div>\n\n                    </form>\n                </div>\n                <div class=\"modal-footer\">\n                    <button class=\"btn btn-primary\" id=\"pmf-user-password-overwrite-action\">\n                        <?= Translation::get('ad_user_overwrite_passwd') ?>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <?php\n} else {\n    echo Translation::get('err_NotAuth');\n}\n", "<?php\n\n/**\n * Creates a new user object.\n *\n * A user are recognized by the session-id using getUserBySessionId(), by his\n * using getUserById() or by his nickname (login) using getUserByLogin(). New\n * are created using createNewUser().\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at https://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Lars Tiedemann <php@larstiedemann.de>\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Sarah Hermann <sayh@gmx.de>\n * @copyright 2005-2023 phpMyFAQ Team\n * @license   https://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2005-09-17\n */\n\nnamespace phpMyFAQ;\n\nuse Exception;\nuse phpMyFAQ\\Auth\\AuthDriverInterface;\nuse phpMyFAQ\\Permission\\MediumPermission;\nuse phpMyFAQ\\User\\UserData;\nuse Symfony\\Component\\Mailer\\Exception\\TransportExceptionInterface;\n\nif (!defined('PMF_ENCRYPTION_TYPE')) {\n    define('PMF_ENCRYPTION_TYPE', 'hash');\n}\n\n/**\n * Class User\n *\n * @package phpMyFAQ\n */\nclass User\n{\n    final public const ERROR_USER_ADD = 'Account could not be created. ';\n    final public const ERROR_USER_CANNOT_CREATE_USER = 'User account could not be created. ';\n    final public const ERROR_USER_CANNOT_CREATE_USERDATA = 'Entry for user data could not be created. ';\n    final public const ERROR_USER_CANNOT_DELETE_USER = 'User account could not be deleted. ';\n    final public const ERROR_USER_CANNOT_DELETE_USERDATA = 'Entry for user data could not be deleted. ';\n    final public const ERROR_USER_CHANGE = 'Account could not be updated. ';\n    final public const ERROR_USER_DELETE = 'Account could not be deleted. ';\n    final public const ERROR_USER_INCORRECT_LOGIN = 'The login name could not be found. ';\n    final public const ERROR_USER_INCORRECT_PASSWORD = 'The password is not correct.';\n    final public const ERROR_USER_INVALID_STATUS = 'Undefined user status.';\n    final public const ERROR_USER_LOGINNAME_TOO_SHORT = 'The chosen login name is too short.';\n    final public const ERROR_USER_LOGIN_NOT_UNIQUE = 'Specified login name already exists. ';\n    final public const ERROR_USER_LOGIN_INVALID = 'The chosen login is invalid. A valid login has at least four ' .\n        'characters. Only letters, numbers and underscore _ are allowed. The first letter must be a letter. ';\n    final public const ERROR_USER_NO_PERM = 'No permission container specified.';\n    final public const ERROR_USER_NO_USERID = 'No user-ID found. ';\n    final public const ERROR_USER_NO_USERLOGINDATA = 'No user login data found. ';\n    final public const ERROR_USER_NOT_FOUND = 'User account could not be found. ';\n    final public const ERROR_USER_NO_AUTH_WRITABLE = 'No authentication object is writable.';\n    final public const ERROR_USER_TOO_MANY_FAILED_LOGINS = 'You exceeded the maximum amounts of login attempts and ' .\n        'are temporarily blocked. Please try again later.';\n\n    final public const STATUS_USER_PROTECTED = 'User account is protected. ';\n    final public const STATUS_USER_BLOCKED = 'User account is blocked. ';\n    final public const STATUS_USER_ACTIVE = 'User account is active. ';\n\n    /**\n     * Permission container.\n     *\n     * @var Permission\n     */\n    public Permission $perm;\n\n    /**\n     * User-data storage container.\n     */\n    public ?UserData $userdata = null;\n\n    /**\n     * Public array that contains error messages.\n     *\n     * @var array<string>\n     */\n    public array $errors = [];\n\n    /**\n     * authentication container.\n     *\n     * @var array<string, AuthDriverInterface>\n     */\n    protected array $authContainer = [];\n\n    /**\n     * Default Authentication properties.\n     *\n     * @var array<string, array<string, string>|string|false>\n     */\n    private array $authData = [\n        'authSource' => [\n            'name' => 'database',\n            'type' => 'local',\n        ],\n        'encType' => PMF_ENCRYPTION_TYPE,\n        'readOnly' => false,\n    ];\n\n    /**\n     * login string.\n     */\n    private string $login = '';\n\n    /**\n     * minimum length of login string (default: 2).\n     */\n    private int $loginMinLength = 2;\n\n    /**\n     * regular expression to find invalid login strings\n     * (default: /^[a-z0-9][\\w\\.\\-@]+/is ).\n     */\n    private string $validUsername = '/^[a-z0-9][\\w\\.\\-@]+/is';\n\n    /**\n     * user ID.\n     */\n    private int $userId = -1;\n\n    /**\n     * Status of user.\n     */\n    private string $status = '';\n\n    /**\n     * IS the user a super admin?\n     */\n    private bool $isSuperAdmin = false;\n\n    /** @var string $authSource Authentication, e.g. local, ldap, azure, sso, ... */\n    private string $authSource = 'local';\n\n    /**\n     * array of allowed values for status.\n     *\n     * @var array<string>\n     */\n    private array $allowedStatus = [\n        'active' => self::STATUS_USER_ACTIVE,\n        'blocked' => self::STATUS_USER_BLOCKED,\n        'protected' => self::STATUS_USER_PROTECTED,\n    ];\n\n    /**\n     * Constructor.\n     *\n     * @throws Core\\Exception\n     */\n    public function __construct(protected ?Configuration $config)\n    {\n        $perm = Permission::selectPerm($this->config->get('security.permLevel'), $this->config);\n        if (!$this->addPerm($perm)) {\n            return;\n        }\n\n        // Always create a 'local' authentication object (see: $authData)\n        $this->authContainer = [];\n        $auth = new Auth($this->config);\n\n        $selectedAuth = $auth->selectAuth($this->getAuthSource('name'));\n        $selectedAuth->selectEncType($this->getAuthData('encType'));\n        $selectedAuth->setReadOnly($this->getAuthData('readOnly'));\n\n        if (!$this->addAuth($selectedAuth, $this->getAuthSource('type'))) {\n            return;\n        }\n\n        // additionally, set given $auth objects\n        /** @phpstan-ignore-next-line */\n        foreach ($this->authContainer as $name => $authObject) {\n            if (!$this->addAuth($authObject, $name)) {\n                break;\n            }\n        }\n\n        // user data object\n        $this->userdata = new UserData($this->config);\n    }\n\n    /**\n     * Adds a permission object to the user.\n     *\n     * @param Permission $perm Permission object\n     */\n    public function addPerm(Permission $perm): bool\n    {\n        $this->perm = $perm;\n        return true;\n    }\n\n    /**\n     * Returns a specific entry from the auth data source array.\n     */\n    public function getAuthSource(string $key): ?string\n    {\n        if (isset($this->authData['authSource'][$key])) {\n            return $this->authData['authSource'][$key];\n        }\n        return null;\n    }\n\n    public function getUserAuthSource(): string\n    {\n        return $this->authSource;\n    }\n\n    /**\n     * Returns a specific entry from the auth data array.\n     */\n    public function getAuthData(string $key): mixed\n    {\n        if (isset($this->authData[$key])) {\n            return $this->authData[$key];\n        }\n        return null;\n    }\n\n    /**\n     * adds a new authentication object to the user object.\n     *\n     * @param AuthDriverInterface $auth Driver object\n     * @param string                                                          $name Auth name\n     */\n    public function addAuth(AuthDriverInterface $auth, string $name): bool\n    {\n        if ($this->checkAuth($auth)) {\n            $this->authContainer[$name] = $auth;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns true if auth is a valid authentication object.\n     *\n     * @param Auth $auth Auth object\n     */\n    protected function checkAuth(Auth $auth): bool\n    {\n        $methods = ['checkCredentials'];\n        foreach ($methods as $method) {\n            if (!method_exists($auth, $method)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * loads basic user information from the database selecting the user with\n     * specified cookie information.\n     */\n    public function getUserByCookie(string $cookie): bool\n    {\n        $select = sprintf(\n            \"\n            SELECT\n                user_id,\n                login,\n                account_status\n            FROM\n                %sfaquser\n            WHERE\n                remember_me = '%s' AND account_status != 'blocked'\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($cookie)\n        );\n\n        $res = $this->config->getDb()->query($select);\n        if ($this->config->getDb()->numRows($res) !== 1) {\n            $this->errors[] = self::ERROR_USER_INCORRECT_LOGIN;\n\n            return false;\n        }\n        $user = $this->config->getDb()->fetchArray($res);\n\n        // Don't ever log in via anonymous user\n        if (-1 === $user['user_id']) {\n            return false;\n        }\n\n        $this->userId = (int)$user['user_id'];\n        $this->login = (string)$user['login'];\n        $this->status = (string)$user['account_status'];\n\n        // get user-data\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n        $this->userdata->load($this->getUserId());\n\n        return true;\n    }\n\n    /**\n     * Returns the User ID of the user.\n     */\n    public function getUserId(): int\n    {\n        if (isset($this->userId)) {\n            return $this->userId;\n        }\n\n        $this->userId = -1;\n        $this->errors[] = self::ERROR_USER_NO_USERID;\n\n        return -1;\n    }\n\n    /**\n     * Checks if display name is already used. Returns true, if already in use.\n     */\n    public function checkDisplayName(string $name): bool\n    {\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n\n        if ($name === $this->userdata->fetch('display_name', $name)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Checks if email address is already used. Returns true, if already in use.\n     */\n    public function checkMailAddress(string $name): bool\n    {\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n\n        if ($name === $this->userdata->fetch('email', $name)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * search users by login.\n     *\n     * @param string $search Login name\n     * @return array<int, array>\n     */\n    public function searchUsers(string $search): array\n    {\n        $select = sprintf(\n            \"\n            SELECT\n                login, \n                user_id,\n                account_status\n            FROM\n                %sfaquser\n            WHERE \n                login LIKE '%s'\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($search . '%')\n        );\n\n        $res = $this->config->getDb()->query($select);\n        if (!$res) {\n            return [];\n        }\n\n        $result = [];\n        while ($row = $this->config->getDb()->fetchArray($res)) {\n            $result[] = $row;\n        }\n\n        return $result;\n    }\n\n    /**\n     * Creates a new user and stores basic data in the database.\n     *\n     * @throws Core\\Exception\n     * @throws Exception\n     */\n    public function createUser(string $login, string $pass = '', string $domain = '', int $userId = 0): bool\n    {\n        foreach ($this->authContainer as $auth) {\n            if (!$this->checkAuth($auth)) {\n                return false;\n            }\n        }\n\n        // is $login valid?\n        if (!$this->isValidLogin($login)) {\n            $this->errors[] = self::ERROR_USER_LOGINNAME_TOO_SHORT;\n\n            return false;\n        }\n\n        // does $login already exist?\n        if ($this->getUserByLogin($login, false)) {\n            $this->errors[] = self::ERROR_USER_LOGIN_NOT_UNIQUE;\n\n            return false;\n        }\n\n        // set user-ID\n        if (0 == $userId) {\n            $this->userId = $this->config->getDb()->nextId(Database::getTablePrefix() . 'faquser', 'user_id');\n        } else {\n            $this->userId = $userId;\n        }\n\n        // create user entry\n        $insert = sprintf(\n            \"INSERT INTO %sfaquser (user_id, login, session_timestamp, member_since) VALUES (%d, '%s', %d, '%s')\",\n            Database::getTablePrefix(),\n            $this->getUserId(),\n            $this->config->getDb()->escape($login),\n            $_SERVER['REQUEST_TIME'],\n            date('YmdHis', $_SERVER['REQUEST_TIME'])\n        );\n\n        $this->config->getDb()->query($insert);\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n        $data = $this->userdata->add($this->getUserId());\n        if (!$data) {\n            $this->errors[] = self::ERROR_USER_CANNOT_CREATE_USERDATA;\n\n            return false;\n        }\n\n        // create authentication entry\n        if (strlen($pass) === 0) {\n            $pass = $this->createPassword();\n        }\n        $success = false;\n\n        foreach ($this->authContainer as $name => $auth) {\n            if ($auth->setReadOnly()) {\n                continue;\n            }\n            if (!$auth->create($login, $pass, $domain)) {\n                $this->errors[] = self::ERROR_USER_CANNOT_CREATE_USER . 'in Auth ' . $name;\n            } else {\n                $success = true;\n            }\n        }\n        if (!$success) {\n            return false;\n        }\n\n        if ($this->perm instanceof MediumPermission) {\n            $this->perm->autoJoin($this->userId);\n        }\n\n        return $this->getUserByLogin($login, false);\n    }\n\n    /**\n     * returns true if login is a valid login string.\n     * $this->loginMinLength defines the minimum length the\n     * login string. If login has more characters than allowed,\n     * false is returned.\n     * $this->login_invalidRegExp is a regular expression.\n     * If login matches this false is returned.\n     *\n     * @param string $login Login name\n     */\n    public function isValidLogin(string $login): bool\n    {\n        if (strlen($login) < $this->loginMinLength || !preg_match($this->validUsername, $login)) {\n            $this->errors[] = self::ERROR_USER_LOGIN_INVALID;\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * loads basic user information from the database selecting the user with\n     * specified login.\n     *\n     * @param string $login Login name\n     * @param bool   $raiseError Raise error?\n     */\n    public function getUserByLogin(string $login, bool $raiseError = true): bool\n    {\n        $select = sprintf(\n            \"\n            SELECT\n                user_id,\n                login,\n                account_status,\n                is_superadmin\n            FROM\n                %sfaquser\n            WHERE\n                login = '%s'\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($login)\n        );\n\n        $res = $this->config->getDb()->query($select);\n        if ($this->config->getDb()->numRows($res) !== 1) {\n            if ($raiseError) {\n                $this->errors[] = self::ERROR_USER_INCORRECT_LOGIN;\n            }\n\n            return false;\n        }\n\n        $user = $this->config->getDb()->fetchArray($res);\n\n        $this->userId = (int) $user['user_id'];\n        $this->login = (string) $user['login'];\n        $this->status = (string) $user['account_status'];\n        $this->isSuperAdmin = (bool) $user['is_superadmin'];\n\n        // get user-data\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n        $this->userdata->load($this->getUserId());\n\n        return true;\n    }\n\n    /**\n     * Returns a new password.\n     *\n     * @throws Exception\n     */\n    public function createPassword(int $minimumLength = 8, bool $allowUnderscore = true): string\n    {\n        // To make passwords harder to get wrong, a few letters & numbers have been omitted.\n        // This will ensure safety with browsers using fonts with confusable letters.\n        // Removed: o,O,0,1,l,L\n        $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'm', 'n', 'p', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n        $vowels = ['a', 'e', 'i', 'u'];\n        $newPassword = '';\n        $nextChar = '';\n        $skipped = false;\n\n        while (strlen($newPassword) < $minimumLength) {\n            $caseFunc = random_int(0, 1) ? 'strtoupper' : 'strtolower';\n\n            switch (random_int(0, $skipped ? 3 : ($allowUnderscore ? 5 : 4))) {\n                case 0:\n                case 1:\n                    $nextChar = $caseFunc($consonants[random_int(0, 18)]);\n                    break;\n                case 2:\n                case 3:\n                    $nextChar = $caseFunc($vowels[random_int(0, 3)]);\n                    break;\n                case 4:\n                    $nextChar = (string)random_int(2, 9);\n                    break;\n                case 5:\n                    $newPassword .= '_';\n                    continue 2;\n            }\n\n            $skipped = false;\n\n            // Ensure letters and numbers only occur once.\n            if (!str_contains($newPassword, $nextChar)) {\n                $newPassword .= $nextChar;\n            } else {\n                $skipped = true;\n            }\n        }\n\n        return $newPassword;\n    }\n\n    /**\n     * deletes the user from the database.\n     */\n    public function deleteUser(): bool\n    {\n        if (!isset($this->userId) || $this->userId == 0) {\n            $this->errors[] = self::ERROR_USER_NO_USERID;\n\n            return false;\n        }\n\n        if (!isset($this->login) || strlen($this->login) == 0) {\n            $this->errors[] = self::ERROR_USER_LOGIN_INVALID;\n\n            return false;\n        }\n\n        if (\n            isset($this->allowedStatus[$this->status]) &&\n            $this->allowedStatus[$this->status] === self::STATUS_USER_PROTECTED\n        ) {\n            $this->errors[] = self::ERROR_USER_CANNOT_DELETE_USER . self::STATUS_USER_PROTECTED;\n\n            return false;\n        }\n\n        $this->perm->refuseAllUserRights($this->userId);\n\n        $delete = sprintf(\n            'DELETE FROM %sfaquser WHERE user_id = %d',\n            Database::getTablePrefix(),\n            $this->userId\n        );\n\n        $res = $this->config->getDb()->query($delete);\n        if (!$res) {\n            $this->errors[] = self::ERROR_USER_CANNOT_DELETE_USER . 'error(): ' . $this->config->getDb()->error();\n\n            return false;\n        }\n\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n        $data = $this->userdata->delete($this->getUserId());\n        if (!$data) {\n            $this->errors[] = self::ERROR_USER_CANNOT_DELETE_USERDATA;\n\n            return false;\n        }\n\n        $readOnly = 0;\n        $authCount = 0;\n        $delete = [];\n        foreach ($this->authContainer as $auth) {\n            ++$authCount;\n            if ($auth->setReadOnly()) {\n                ++$readOnly;\n                continue;\n            }\n            $delete[] = $auth->delete($this->login);\n        }\n\n        if ($readOnly == $authCount) {\n            $this->errors[] = self::ERROR_USER_NO_AUTH_WRITABLE;\n        }\n        if (!in_array(true, $delete)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns a string with error messages.\n     * The string returned by error() contains messages for all errors that\n     * during object processing. Messages are separated by new lines.\n     * Error messages are stored in the public array errors.\n     */\n    public function error(): string\n    {\n        $message = '';\n\n        foreach ($this->errors as $error) {\n            $message .= $error . \"<br>\\n\";\n        }\n        $this->errors = [];\n\n        return $message;\n    }\n\n    /**\n     * Returns the data aof the auth container.\n     *\n     * @return AuthDriverInterface[]\n     */\n    public function getAuthContainer(): array\n    {\n        return $this->authContainer;\n    }\n\n    /**\n     * Returns an array with the user-IDs of all users found in\n     * the database. By default, the Anonymous User will not be returned.\n     *\n     * @param bool $withoutAnonymous Without anonymous?\n     * @param bool $allowBlockedUsers Allow blocked users as well, e.g. in admin\n     * @return array<int>\n     */\n    public function getAllUsers(bool $withoutAnonymous = true, bool $allowBlockedUsers = true): array\n    {\n        $select = sprintf(\n            '\n            SELECT\n                user_id\n            FROM\n                %sfaquser\n            WHERE\n                1 = 1\n            %s\n            %s\n            ORDER BY\n                user_id ASC',\n            Database::getTablePrefix(),\n            ($withoutAnonymous ? 'AND user_id <> -1' : ''),\n            ($allowBlockedUsers ? '' : \"AND account_status != 'blocked'\")\n        );\n\n        $res = $this->config->getDb()->query($select);\n        if (!$res) {\n            return [];\n        }\n\n        $result = [];\n        while ($row = $this->config->getDb()->fetchArray($res)) {\n            $result[] = (int) $row['user_id'];\n        }\n\n        return $result;\n    }\n\n    /**\n     * Loads basic user information from the database selecting the user with\n     * specified user-ID.\n     *\n     * @param int  $userId User ID\n     * @param bool $allowBlockedUsers Allow blocked users as well, e.g. in admin\n     */\n    public function getUserById(int $userId, bool $allowBlockedUsers = false): bool\n    {\n        $select = sprintf(\n            '\n            SELECT\n                user_id,\n                login,\n                account_status,\n                is_superadmin,\n                auth_source\n            FROM\n                %sfaquser\n            WHERE\n                user_id = %d ' . ($allowBlockedUsers ? '' : \"AND account_status != 'blocked'\"),\n            Database::getTablePrefix(),\n            $userId\n        );\n\n        $res = $this->config->getDb()->query($select);\n        if ($this->config->getDb()->numRows($res) != 1) {\n            $this->errors[] = self::ERROR_USER_NO_USERID . 'error(): ' . $this->config->getDb()->error();\n\n            return false;\n        }\n\n        $user = $this->config->getDb()->fetchArray($res);\n\n        $this->userId = (int) $user['user_id'];\n        $this->login = (string) $user['login'];\n        $this->status = (string) $user['account_status'];\n        $this->isSuperAdmin = (bool) $user['is_superadmin'];\n        $this->authSource = (string) $user['auth_source'];\n\n        // get encrypted password\n        // @todo: Add a getEncPassword method to the Auth* classes for the (local and remote) Auth Sources.\n        if ('db' === $this->getAuthSource('name')) {\n            $select = sprintf(\n                \"\n                SELECT\n                    pass\n                FROM\n                    %sfaquserlogin\n                WHERE\n                    login = '%s'\",\n                Database::getTablePrefix(),\n                $this->login\n            );\n\n            $res = $this->config->getDb()->query($select);\n            if ($this->config->getDb()->numRows($res) != 1) {\n                $this->errors[] = self::ERROR_USER_NO_USERLOGINDATA . 'error(): ' . $this->config->getDb()->error();\n\n                return false;\n            }\n        }\n        // get user-data\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n        $this->userdata->load($this->getUserId());\n\n        return true;\n    }\n\n    /**\n     * Returns the data of the current user.\n     *\n     * @param string $field Field\n     * @return array<string>|string|int|null\n     */\n    public function getUserData(string $field = '*'): array|int|string|null\n    {\n        if (!($this->userdata instanceof UserData)) {\n            $this->userdata = new UserData($this->config);\n        }\n\n        return $this->userdata->get($field);\n    }\n\n    /**\n     * Adds user data.\n     *\n     * @param array<string> $data Array with user data\n     */\n    public function setUserData(array $data): bool\n    {\n        if (!($this->userdata instanceof UserData)) {\n            $this->userdata = new UserData($this->config);\n        }\n        $this->userdata->load($this->getUserId());\n\n        return $this->userdata->set(array_keys($data), array_values($data));\n    }\n\n    /**\n     * returns the user's login.\n     */\n    public function getLogin(): string\n    {\n        return $this->login;\n    }\n\n    /**\n     * Returns the user ID from the given email address\n     */\n    public function getUserIdByEmail(string $email): int\n    {\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n\n        $userData = $this->userdata->fetchAll('email', $email);\n\n        return $userData['user_id'];\n    }\n\n    /**\n     * Returns true or false for the visibility for the given email\n     * address, if the user is not a registered user, the method\n     * returns false for anonymous users\n     */\n    public function getUserVisibilityByEmail(string $email): bool\n    {\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n\n        $userData = $this->userdata->fetchAll('email', $email);\n\n        return !isset($userData['is_visible']) || $userData['is_visible'];\n    }\n\n    /**\n     * Returns true on success.\n     * This will change a users' status to active, and send an email with a new password.\n     *\n     * @throws Exception|TransportExceptionInterface\n     */\n    public function activateUser(): bool\n    {\n        if ($this->getStatus() == 'blocked') {\n            // Generate and change user password.\n            $newPassword = $this->createPassword();\n            $this->changePassword($newPassword);\n            // Send activation email.\n            $subject = '[%sitename%] Login name / activation';\n            $message = sprintf(\n                \"\\nName: %s\\nLogin name: %s\\nNew password: %s\\n\\n\",\n                $this->getUserData('display_name'),\n                $this->getLogin(),\n                $newPassword\n            );\n            // Only set to active if the activation mail sent correctly.\n            if ($this->mailUser($subject, $message)) {\n                return $this->setStatus('active');\n            }\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * returns the user's status.\n     */\n    public function getStatus(): string\n    {\n        if (isset($this->status) && strlen($this->status) > 0) {\n            return $this->status;\n        }\n\n        return '';\n    }\n\n    /**\n     * Sets the user's status and updates the database entry.\n     *\n     * @param string $status Status\n     */\n    public function setStatus(string $status): bool\n    {\n        // is status allowed?\n        $status = strtolower($status);\n        if (!in_array($status, array_keys($this->allowedStatus))) {\n            $this->errors[] = self::ERROR_USER_INVALID_STATUS;\n\n            return false;\n        }\n\n        // update status\n        $this->status = $status;\n        $update = sprintf(\n            \"\n            UPDATE\n                %sfaquser\n            SET\n                account_status = '%s'\n            WHERE\n                user_id = %d\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($status),\n            $this->userId\n        );\n\n        $res = $this->config->getDb()->query($update);\n\n        if ($res) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * changes the user's password. If $pass is omitted, a new\n     * password is generated using the createPassword() method.\n     *\n     * @param string $pass Password\n     * @throws Exception\n     */\n    public function changePassword(string $pass = ''): bool\n    {\n        foreach ($this->authContainer as $auth) {\n            if (!$this->checkAuth($auth)) {\n                return false;\n            }\n        }\n\n        $login = $this->getLogin();\n        if ($pass == '') {\n            $pass = $this->createPassword();\n        }\n\n        $success = false;\n        foreach ($this->authContainer as $auth) {\n            if ($auth->setReadOnly()) {\n                continue;\n            }\n            if (!$auth->update($login, $pass)) {\n                continue;\n            } else {\n                $success = true;\n            }\n        }\n\n        return $success;\n    }\n\n    /**\n     * Sends mail to the current user.\n     *\n     * @throws Core\\Exception|TransportExceptionInterface\n     */\n    public function mailUser(string $subject, string $message): int\n    {\n        $mail = new Mail($this->config);\n        $mail->addTo($this->getUserData('email'));\n        $mail->subject = $subject;\n        $mail->message = $message;\n        $result = $mail->send();\n        unset($mail);\n\n        return $result;\n    }\n\n    /**\n     * Returns true, if a user is a super admin.\n     */\n    public function isSuperAdmin(): bool\n    {\n        return $this->isSuperAdmin;\n    }\n\n    /**\n     * Sets the users \"is_superadmin\" flag and updates the database entry.\n     */\n    public function setSuperAdmin(bool $isSuperAdmin): bool\n    {\n        $this->isSuperAdmin = $isSuperAdmin;\n        $update = sprintf(\n            \"\n            UPDATE\n                %sfaquser\n            SET\n                is_superadmin = %d\n            WHERE\n                user_id = %d\",\n            Database::getTablePrefix(),\n            (int)$this->isSuperAdmin,\n            $this->userId\n        );\n\n        $res = $this->config->getDb()->query($update);\n\n        if ($res) {\n            return true;\n        }\n\n        return false;\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Private phpMyFAQ Admin API: handling of Ajax user calls.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at https://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2009-2023 phpMyFAQ Team\n * @license   https://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2009-04-04\n */\n\nuse phpMyFAQ\\Auth;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Component\\Alert;\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\MailHelper;\nuse phpMyFAQ\\Permission;\nuse phpMyFAQ\\Report;\nuse phpMyFAQ\\Session\\Token;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Translation;\nuse phpMyFAQ\\User;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Mailer\\Exception\\TransportExceptionInterface;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n//\n// Create Request & Response\n//\n$response = new JsonResponse();\n$request = Request::createFromGlobals();\n\n$ajaxAction = Filter::filterVar($request->query->get('ajaxaction'), FILTER_SANITIZE_SPECIAL_CHARS);\n$userId = Filter::filterInput(INPUT_GET, 'user_id', FILTER_VALIDATE_INT);\n$userSearch = Filter::filterInput(INPUT_GET, 'q', FILTER_SANITIZE_SPECIAL_CHARS);\n$csrfToken = Filter::filterInput(INPUT_GET, 'csrf', FILTER_SANITIZE_SPECIAL_CHARS);\n\nif (\n    $user->perm->hasPermission($user->getUserId(), 'add_user') ||\n    $user->perm->hasPermission($user->getUserId(), 'edit_user') ||\n    $user->perm->hasPermission($user->getUserId(), 'delete_user')\n) {\n    $user = new User($faqConfig);\n\n    switch ($ajaxAction) {\n        case 'get_user_list':\n            $allUsers = [];\n            foreach ($user->searchUsers($userSearch) as $singleUser) {\n                $users = new stdClass();\n                $users->label = $singleUser['login'];\n                $users->value = (int)$singleUser['user_id'];\n                $allUsers[] = $users;\n            }\n            $response->setStatusCode(Response::HTTP_OK);\n            $response->setData($allUsers);\n            $response->send();\n            break;\n\n        case 'get_user_data':\n            $user->getUserById($userId, true);\n            $userdata = $user->userdata->get('*');\n            if (is_array($userdata)) {\n                $userdata['status'] = $user->getStatus();\n                $userdata['login'] = Strings::htmlentities($user->getLogin(), ENT_COMPAT);\n                $userdata['display_name'] = Strings::htmlentities($userdata['display_name'], ENT_COMPAT);\n                $userdata['is_superadmin'] = $user->isSuperAdmin();\n                $userdata['auth_source'] = $user->getUserAuthSource();\n            } else {\n                $userdata = [];\n            }\n            $response->setStatusCode(Response::HTTP_OK);\n            $response->setData($userdata);\n            $response->send();\n            break;\n\n        case 'get_all_user_data':\n            $allUsers = $user->getAllUsers(false);\n            $userData = [];\n            foreach ($allUsers as $userId) {\n                $user->getUserById($userId, true);\n                $userObject = new stdClass();\n                $userObject->id = $user->getUserId();\n                $userObject->status = $user->getStatus();\n                $userObject->isSuperAdmin = $user->isSuperAdmin();\n                $userObject->isVisible = $user->getUserData('is_visible');\n                $userObject->displayName = Report::sanitize($user->getUserData('display_name'));\n                $userObject->userName = Report::sanitize($user->getLogin());\n                $userObject->email = $user->getUserData('email');\n                $userObject->authSource = $user->getUserAuthSource();\n                $userData[] = $userObject;\n            }\n            $response->setStatusCode(Response::HTTP_OK);\n            $response->setData($userData);\n            $response->send();\n            break;\n\n        case 'get_user_rights':\n            $user->getUserById($userId, true);\n            $response->setData($user->perm->getUserRights($userId));\n            $response->send();\n            break;\n\n        case 'activate_user':\n            $postData = json_decode(file_get_contents('php://input', true));\n            if (!Token::getInstance()->verifyToken('activate-user', $postData->csrfToken)) {\n                $response->setStatusCode(Response::HTTP_UNAUTHORIZED);\n                $response->setData(['error' => Translation::get('err_NotAuth')]);\n                $response->send();\n                exit(1);\n            }\n\n            $userId = Filter::filterVar($postData->userId, FILTER_VALIDATE_INT);\n\n            $user->getUserById($userId, true);\n            try {\n                if ($user->activateUser()) {\n                    $response->setStatusCode(Response::HTTP_OK);\n                    $response->setData(['success' => $user->getStatus()]);\n                } else {\n                    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                    $response->setData(['error' => $user->getStatus()]);\n                }\n            } catch (TransportExceptionInterface $e) {\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                $response->setData(['error' => $e->getMessage()]);\n            }\n            $response->send();\n            break;\n\n        case 'add_user':\n            if (!Token::getInstance()->verifyToken('add-user', $csrfToken)) {\n                $response->setStatusCode(Response::HTTP_UNAUTHORIZED);\n                $response->setData(['error' => Translation::get('err_NotAuth')]);\n                $response->send();\n                exit(1);\n            }\n\n            $errorMessage = [];\n            $successMessage = '';\n\n            $postData = json_decode(file_get_contents('php://input'), true);\n\n            $userName = Filter::filterVar($postData['userName'], FILTER_SANITIZE_SPECIAL_CHARS);\n            $userRealName = Filter::filterVar($postData['realName'], FILTER_SANITIZE_SPECIAL_CHARS);\n            $userEmail = Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL);\n            $automaticPassword = Filter::filterVar($postData['automaticPassword'], FILTER_VALIDATE_BOOLEAN);\n            $userPassword = Filter::filterVar($postData['password'], FILTER_SANITIZE_SPECIAL_CHARS);\n            $userPasswordConfirm = Filter::filterVar($postData['passwordConfirm'], FILTER_SANITIZE_SPECIAL_CHARS);\n            $userIsSuperAdmin = Filter::filterVar($postData['isSuperAdmin'], FILTER_VALIDATE_BOOLEAN);\n\n            $newUser = new User($faqConfig);\n\n            if (!$newUser->isValidLogin($userName)) {\n                $errorMessage[] = Translation::get('ad_user_error_loginInvalid');\n            }\n            if ($newUser->getUserByLogin($userName)) {\n                $errorMessage[] = Translation::get('ad_adus_exerr');\n            }\n            if ($userRealName === '') {\n                $errorMessage[] = Translation::get('ad_user_error_noRealName');\n            }\n            if (is_null($userEmail)) {\n                $errorMessage[] = Translation::get('ad_user_error_noEmail');\n            }\n            if (!$automaticPassword) {\n                if (strlen($userPassword) <= 7 || strlen($userPasswordConfirm) <= 7) {\n                    $errorMessage[] = Translation::get('ad_passwd_fail');\n                }\n            } else {\n                $userPassword = $newUser->createPassword(8, false);\n            }\n\n            if (count($errorMessage) === 0) {\n                if (!$newUser->createUser($userName, $userPassword)) {\n                    $errorMessage[] = $newUser->error();\n                } else {\n                    $newUser->userdata->set(['display_name', 'email', 'is_visible'], [$userRealName, $userEmail, 0]);\n                    $newUser->setStatus('active');\n                    $newUser->setSuperAdmin((bool)$userIsSuperAdmin);\n                    $mailHelper = new MailHelper($faqConfig);\n                    try {\n                        $mailHelper->sendMailToNewUser($newUser, $userPassword);\n                    } catch (Exception $e) {\n                        // @todo catch exception\n                    }\n                    $successMessage = [\n                        'success' => Translation::get('ad_adus_suc'),\n                        'id' => $newUser->getUserId(),\n                        'status' => $newUser->getStatus(),\n                        'isSuperAdmin' => (bool)$userIsSuperAdmin,\n                        'isVisible' => (bool) $newUser->userdata->get('is_visible'),\n                        'realName' => $userRealName,\n                        'userName' => $userName,\n                        'email' => $userEmail,\n                        'editTranslationString' => Translation::get('ad_user_edit')\n                    ];\n                }\n\n                $response->setStatusCode(Response::HTTP_OK);\n                $response->setData($successMessage);\n                $response->send();\n                exit(1);\n            }\n\n            $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n            $response->setData($errorMessage);\n            $response->send();\n            break;\n\n        case 'delete_user':\n            $deleteData = json_decode(file_get_contents('php://input', true));\n\n            if (!Token::getInstance()->verifyToken('delete-user', $deleteData->csrfToken)) {\n                $response->setStatusCode(Response::HTTP_UNAUTHORIZED);\n                $response->setData(['error' => Translation::get('err_NotAuth')]);\n                $response->send();\n                exit(1);\n            }\n\n            $userId = Filter::filterVar($deleteData->userId, FILTER_VALIDATE_INT);\n\n            $user->getUserById($userId, true);\n            if ($user->getStatus() == 'protected' || $userId == 1) {\n                $message = '<p class=\"alert alert-error\">' . Translation::get('ad_user_error_protectedAccount') . '</p>';\n            } else {\n                if (!$user->deleteUser()) {\n                    $message = Translation::get('ad_user_error_delete');\n                } else {\n                    $category = new Category($faqConfig, [], false);\n                    $category->moveOwnership((int) $userId, 1);\n\n                    // Remove the user from groups\n                    if ('basic' !== $faqConfig->get('security.permLevel')) {\n                        $permissions = Permission::selectPerm('medium', $faqConfig);\n                        $permissions->removeFromAllGroups($userId);\n                    }\n\n                    $message = Alert::success('ad_user_deleted');\n                }\n            }\n            $response->setStatusCode(Response::HTTP_OK);\n            $response->setData($message);\n            $response->send();\n            break;\n\n        case 'overwrite_password':\n            $postData = json_decode(file_get_contents('php://input', true));\n\n            $userId = Filter::filterVar($postData->userId, FILTER_VALIDATE_INT);\n            $newPassword = Filter::filterVar($postData->newPassword, FILTER_SANITIZE_SPECIAL_CHARS);\n            $retypedPassword = Filter::filterVar($postData->passwordRepeat, FILTER_SANITIZE_SPECIAL_CHARS);\n\n            if (!Token::getInstance()->verifyToken('add-user', $csrfToken)) {\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                $response->setData(['error' => Translation::get('err_NotAuth')]);\n                $response->send();\n                exit(1);\n            }\n\n            if (strlen($newPassword) <= 7 || strlen($retypedPassword) <= 7) {\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                $response->setData(['error' => Translation::get('ad_passwd_fail')]);\n                $response->send();\n                exit(1);\n            }\n\n            $user->getUserById($userId, true);\n\n            $auth = new Auth($faqConfig);\n            $authSource = $auth->selectAuth($user->getAuthSource('name'));\n            $authSource->selectEncType($user->getAuthData('encType'));\n\n            if ($newPassword === $retypedPassword) {\n                if (!$user->changePassword($newPassword)) {\n                    $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                    $response->setData(['error' => Translation::get('ad_passwd_fail')]);\n                    $response->send();\n                }\n                $response->setStatusCode(Response::HTTP_OK);\n                $response->setData(['success' => Translation::get('ad_passwdsuc')]);\n            } else {\n                $response->setStatusCode(Response::HTTP_BAD_REQUEST);\n                $response->setData(['error' => Translation::get('ad_passwd_fail')]);\n            }\n            $response->send();\n            break;\n    }\n}\n", "/**\n * Functions for handling user management\n *\n * @todo move fetch() functionality to api.js\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at https://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2022-2023 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2022-03-23\n */\n\nimport { addElement } from '../../../../assets/src/utils';\n\nconst activateUser = (userId, csrfToken) => {\n  fetch('index.php?action=ajax&ajax=user&ajaxaction=activate_user', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json, text/plain, */*',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      csrfToken: csrfToken,\n      userId: userId,\n    }),\n  })\n    .then(async (response) => {\n      if (response.status === 200) {\n        return response.json();\n      }\n      throw new Error('Network response was not ok.');\n    })\n    .then(() => {\n      const icon = document.querySelector(`.icon_user_id_${userId}`);\n      icon.classList.remove('fa-ban');\n      icon.classList.add('fa-check-circle-o');\n      const button = document.getElementById(`btn_activate_user_id_${userId}`);\n      button.remove();\n    })\n    .catch((error) => {\n      const message = document.getElementById('pmf-user-message');\n      message.insertAdjacentElement(\n        'afterend',\n        addElement('div', { classList: 'alert alert-danger', innerText: error })\n      );\n    });\n};\n\nconst deleteUser = (userId, csrfToken) => {\n  const message = document.getElementById('pmf-user-message');\n  fetch('index.php?action=ajax&ajax=user&ajaxaction=delete_user', {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json, text/plain, */*',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      csrfToken: csrfToken,\n      userId: userId,\n    }),\n  })\n    .then(async (response) => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error('Network response was not ok: ', { cause: { response } });\n    })\n    .then((response) => {\n      message.insertAdjacentElement('afterend', addElement('div', { innerHTML: response }));\n      const row = document.querySelector(`.row_user_id_${userId}`);\n      row.addEventListener('click', () => (row.style.opacity = '0'));\n      row.addEventListener('transitionend', () => row.remove());\n    })\n    .catch(async (error) => {\n      const errorMessage = await error.cause.response.json();\n      message.insertAdjacentElement(\n        'afterend',\n        addElement('div', { classList: 'alert alert-danger', innerText: errorMessage })\n      );\n    });\n};\n\nexport const handleUserList = () => {\n  const activateButtons = document.querySelectorAll('.btn-activate-user');\n  const deleteButtons = document.querySelectorAll('.btn-delete-user');\n\n  if (activateButtons) {\n    activateButtons.forEach((button) => {\n      button.addEventListener('click', (event) => {\n        event.preventDefault();\n\n        const csrfToken = event.target.getAttribute('data-csrf-token');\n        const userId = event.target.getAttribute('data-user-id');\n\n        activateUser(userId, csrfToken);\n      });\n    });\n  }\n\n  if (deleteButtons) {\n    deleteButtons.forEach((button) => {\n      button.addEventListener('click', (event) => {\n        event.preventDefault();\n\n        const csrfToken = event.target.getAttribute('data-csrf-token');\n        const userId = event.target.getAttribute('data-user-id');\n\n        deleteUser(userId, csrfToken);\n      });\n    });\n  }\n};\n", "<?php\n\n/**\n * Displays the user management frontend.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at https://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Lars Tiedemann <php@larstiedemann.de>\n * @author    Uwe Pries <uwe.pries@digartis.de>\n * @author    Sarah Hermann <sayh@gmx.de>\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2005-2023 phpMyFAQ Team\n * @license   https://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2005-12-15\n */\n\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Component\\Alert;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Pagination;\nuse phpMyFAQ\\Permission;\nuse phpMyFAQ\\Session\\Token;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Translation;\nuse phpMyFAQ\\User;\nuse phpMyFAQ\\User\\CurrentUser;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\nif (\n    $user->perm->hasPermission($user->getUserId(), 'edit_user') || $user->perm->hasPermission(\n        $user->getUserId(),\n        'delete_user'\n    ) || $user->perm->hasPermission($user->getUserId(), 'add_user')\n) {\n    $userId = Filter::filterInput(INPUT_GET, 'user_id', FILTER_VALIDATE_INT);\n\n    // set some parameters\n    $selectSize = 10;\n    $defaultUserAction = 'list';\n    $defaultUserStatus = 'active';\n    $userActionList = [\n        'update_rights',\n        'update_data',\n        'delete_confirm',\n        'delete',\n        'addsave',\n        'list',\n        'listallusers'\n    ];\n\n    // what shall we do?\n    // actions defined by url: user_action=\n    $userAction = Filter::filterInput(INPUT_GET, 'user_action', FILTER_SANITIZE_SPECIAL_CHARS, $defaultUserAction);\n\n    $currentUser = new CurrentUser($faqConfig);\n\n    // actions defined by submit button\n    if (isset($_POST['user_action_deleteConfirm'])) {\n        $userAction = 'delete_confirm';\n    }\n    if (isset($_POST['cancel'])) {\n        $userAction = $defaultUserAction;\n    }\n\n    // update user rights\n    if ($userAction == 'update_rights' && $user->perm->hasPermission($user->getUserId(), 'edit_user')) {\n        $message = '';\n        $userAction = $defaultUserAction;\n        $userId = Filter::filterInput(INPUT_POST, 'user_id', FILTER_VALIDATE_INT, 0);\n        $csrfOkay = true;\n        $csrfToken = Filter::filterInput(INPUT_POST, 'pmf-csrf-token', FILTER_SANITIZE_SPECIAL_CHARS);\n        if (!Token::getInstance()->verifyToken('update-user-rights', $csrfToken)) {\n            $csrfOkay = false;\n        }\n\n        if (0 === (int)$userId || !$csrfOkay) {\n            $message .= Alert::danger('ad_user_error_noId');\n        } else {\n            $user = new User($faqConfig);\n            $perm = $user->perm;\n            // @todo: Add Filter::filterInput[]\n            $userRights = $_POST['user_rights'] ?? [];\n            if (!$perm->refuseAllUserRights($userId)) {\n                $message .= Alert::danger('ad_msg_mysqlerr');\n            }\n            foreach ($userRights as $rightId) {\n                $perm->grantUserRight($userId, $rightId);\n            }\n\n            $idUser = $user->getUserById($userId, true);\n            // Terminate session in case of different permissions after the update\n            $user->terminateSessionId();\n            $message .= sprintf(\n                '<p class=\"alert alert-success\">%s <strong>%s</strong> %s</p>',\n                Translation::get('ad_msg_savedsuc_1'),\n                Strings::htmlentities($user->getLogin(), ENT_QUOTES),\n                Translation::get('ad_msg_savedsuc_2')\n            );\n            $user = new CurrentUser($faqConfig);\n        }\n    }\n\n    // update user data\n    if ($userAction == 'update_data' && $user->perm->hasPermission($user->getUserId(), 'edit_user')) {\n        $message = '';\n        $userAction = $defaultUserAction;\n        $userId = Filter::filterInput(INPUT_POST, 'user_id', FILTER_VALIDATE_INT, 0);\n        if ($userId === 0) {\n            $message .= Alert::danger('ad_user_error_noId');\n        } else {\n            $userData = [];\n            $userData['display_name'] = Filter::filterInput(INPUT_POST, 'display_name', FILTER_SANITIZE_SPECIAL_CHARS);\n            $userData['email'] = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n            $userData['last_modified'] = Filter::filterInput(INPUT_POST, 'last_modified', FILTER_SANITIZE_SPECIAL_CHARS);\n            $userStatus = Filter::filterInput(INPUT_POST, 'user_status', FILTER_SANITIZE_SPECIAL_CHARS, $defaultUserStatus);\n            $isSuperAdmin = Filter::filterInput(INPUT_POST, 'is_superadmin', FILTER_SANITIZE_SPECIAL_CHARS);\n            $isSuperAdmin = $isSuperAdmin === 'on';\n            $deleteTwofactor = Filter::filterInput(INPUT_POST, 'overwrite_twofactor', FILTER_SANITIZE_SPECIAL_CHARS);\n            $deleteTwofactor = $deleteTwofactor === 'on';\n\n            $user = new User($faqConfig);\n            $user->getUserById($userId, true);\n\n            $stats = $user->getStatus();\n\n            // reset two-factor authentication if required\n            if ($deleteTwofactor) {\n                $user->setUserData(['secret' => '', 'twofactor_enabled' => 0]);\n            }\n\n            // set new password and sent email if a user is switched to active\n            if ($stats == 'blocked' && $userStatus == 'active') {\n                if (!$user->activateUser()) {\n                    $userStatus = 'invalid_status';\n                }\n            }\n\n            // Set super-admin flag\n            $user->setSuperAdmin($isSuperAdmin);\n\n            if (\n                !$user->userdata->set(array_keys($userData), array_values($userData)) || !$user->setStatus(\n                    $userStatus\n                )\n            ) {\n                $message .= Alert::danger('ad_msg_mysqlerr');\n            } else {\n                $message .= sprintf(\n                    '<p class=\"alert alert-success\">%s <strong>%s</strong> %s</p>',\n                    Translation::get('ad_msg_savedsuc_1'),\n                    Strings::htmlentities($user->getLogin(), ENT_QUOTES),\n                    Translation::get('ad_msg_savedsuc_2')\n                );\n            }\n        }\n    }\n\n    // delete user confirmation\n    if ($userAction == 'delete_confirm' && $user->perm->hasPermission($user->getUserId(), 'delete_user')) {\n        $message = '';\n        $user = new CurrentUser($faqConfig);\n\n        $userId = Filter::filterInput(INPUT_GET, 'user_delete_id', FILTER_VALIDATE_INT, 0);\n        if ($userId == 0) {\n            $message .= Alert::danger('ad_user_error_noId');\n            $userAction = $defaultUserAction;\n        } else {\n            $user->getUserById($userId, true);\n            // account is protected\n            if ($user->getStatus() == 'protected' || $userId == 1) {\n                $message .= Alert::danger('ad_user_error_protectedAccount');\n                $userAction = $defaultUserAction;\n            } else {\n                ?>\n\n                <div\n                    class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n                    <h1 class=\"h2\">\n                        <i aria-hidden=\"true\" class=\"fa fa-user\"></i>\n                        <?= Translation::get('ad_user_deleteUser') ?> <?= Strings::htmlentities($user->getLogin(), ENT_QUOTES) ?>\n                    </h1>\n                </div>\n\n                <p class=\"alert alert-danger\">\n                    <?= Translation::get('ad_user_del_3') . ' ' . Translation::get(\n                        'ad_user_del_1'\n                    ) . ' ' . Translation::get('ad_user_del_2') ?>\n                </p>\n                <form action=\"?action=user&amp;user_action=delete\" method=\"post\" accept-charset=\"utf-8\">\n                    <input type=\"hidden\" name=\"user_id\" value=\"<?= $userId ?>\">\n                    <?= Token::getInstance()->getTokenInput('delete-user') ?>\n                    <p class=\"text-center\">\n                        <button class=\"btn btn-danger\" type=\"submit\">\n                            <?= Translation::get('ad_gen_yes') ?>\n                        </button>\n                        <a class=\"btn btn-info\" href=\"?action=user\">\n                            <?= Translation::get('ad_gen_no') ?>\n                        </a>\n                    </p>\n                </form>\n                <?php\n            }\n        }\n    }\n\n    // delete user\n    if ($userAction == 'delete' && $user->perm->hasPermission($user->getUserId(), 'delete_user')) {\n        $message = '';\n        $user = new User($faqConfig);\n        $userId = Filter::filterInput(INPUT_POST, 'user_id', FILTER_VALIDATE_INT, 0);\n        $csrfOkay = true;\n        $csrfToken = Filter::filterInput(INPUT_POST, 'pmf-csrf-token', FILTER_SANITIZE_SPECIAL_CHARS);\n        $userAction = $defaultUserAction;\n\n        if (!Token::getInstance()->verifyToken('delete-user', $csrfToken)) {\n            $csrfOkay = false;\n        }\n\n        if (0 === (int)$userId || !$csrfOkay) {\n            $message .= Alert::danger('ad_user_error_noId');\n        } else {\n            if (!$user->getUserById($userId, true)) {\n                $message .= Alert::danger('ad_user_error_noId');\n            }\n            if (!$user->deleteUser()) {\n                $message .= Alert::danger('ad_user_error_delete');\n            } else {\n                // Move the category ownership to admin (id == 1)\n                $oCat = new Category($faqConfig, [], false);\n                $oCat->setUser($currentAdminUser);\n                $oCat->setGroups($currentAdminGroups);\n                $oCat->moveOwnership((int)$userId, 1);\n\n                // Remove the user from groups\n                if ('basic' !== $faqConfig->get('security.permLevel')) {\n                    $oPerm = Permission::selectPerm('medium', $faqConfig);\n                    $oPerm->removeFromAllGroups($userId);\n                }\n\n                $message .= Alert::success('ad_user_deleted');\n            }\n            $userError = $user->error();\n            if ($userError != '') {\n                $message .= sprintf('<p class=\"alert alert-danger\">%s</p>', $userError);\n            }\n        }\n    }\n\n    if (!isset($message)) {\n        $message = '';\n    }\n\n    // show a list of users\n    if ($userAction === 'list') { ?>\n        <div\n            class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n            <h1 class=\"h2\">\n                <i aria-hidden=\"true\" class=\"fa fa-user\"></i>\n                <?= Translation::get('ad_user') ?>\n            </h1>\n            <div class=\"btn-toolbar mb-2 mb-md-0\">\n                <div class=\"btn-group mr-2\">\n                    <?php\n                    if ($currentUser->perm->hasPermission($user->getUserId(), 'add_user')) : ?>\n                        <button type=\"button\" class=\"btn btn-sm btn-primary\" data-bs-toggle=\"modal\"\n                                data-bs-target=\"#addUserModal\">\n                            <i class=\"fa fa-user-plus\" aria-label=\"true\"></i> <?= Translation::get('ad_user_add') ?>\n                        </button>\n                        <?php\n                    endif ?>\n                    <?php\n                    if ($currentUser->perm->hasPermission($user->getUserId(), 'edit_user')) : ?>\n                        <a class=\"btn btn-sm btn-secondary\" href=\"?action=user&amp;user_action=listallusers\">\n                            <i class=\"fa fa-users\" aria-label=\"true\"></i> <?= Translation::get('list_all_users') ?>\n                        </a>\n                        <?php\n                    endif ?>\n                </div>\n            </div>\n        </div>\n\n        <div id=\"pmf-user-message\"><?= $message ?></div>\n\n        <div class=\"row mb-2\">\n            <div class=\"col-lg-4\">\n                <form name=\"user_select\" id=\"user_select\" action=\"?action=user&amp;user_action=delete_confirm\"\n                      method=\"post\" role=\"form\" class=\"form_inline\">\n                    <input type=\"hidden\" id=\"current_user_id\" value=\"<?= $userId ?>\">\n                    <div class=\"card mb-4\">\n                        <h5 class=\"card-header py-3\">\n                            <i aria-hidden=\"true\" class=\"fa fa-search\"></i> <?= Translation::get('msgSearch') ?>\n                        </h5>\n                        <div class=\"card-body\">\n                            <div class=\"form-floating\">\n                                <input type=\"text\" class=\"form-control\" id=\"pmf-user-list-autocomplete\" aria-controls=\"\"\n                                       name=\"user_list_search\" placeholder=\"<?= Translation::get('ad_auth_user') ?>\"\n                                       spellcheck=\"false\" autocomplete=\"off\" autocapitalize=\"off\" maxlength=\"2048\">\n                                <label for=\"pmf-user-list-autocomplete\"><?= Translation::get('ad_auth_user') ?></label>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </div>\n\n            <div class=\"col-lg-4\">\n                <div class=\"card mb-4\">\n                    <h5 class=\"card-header py-3\" id=\"user_data_legend\">\n                        <i aria-hidden=\"true\" class=\"fa fa-user\"></i> <?= Translation::get('ad_user_profou') ?>\n                    </h5>\n                    <form action=\"?action=user&amp;user_action=update_data\" method=\"post\">\n                        <div class=\"card-body\">\n                            <input type=\"hidden\" id=\"last_modified\" name=\"last_modified\" value=\"\">\n                            <input id=\"update_user_id\" type=\"hidden\" name=\"user_id\" value=\"0\">\n                            <?= Token::getInstance()->getTokenInput('update-user-data') ?>\n\n                            <div class=\"row mb-2\">\n                                <label for=\"auth_source\" class=\"col-lg-4 col-form-label\">\n                                    <?= Translation::get('msgAuthenticationSource') ?>\n                                </label>\n                                <div class=\"col-lg-8\">\n                                    <input id=\"auth_source\" class=\"form-control-plaintext\" type=\"text\" value=\"\"\n                                           readonly>\n                                </div>\n                            </div>\n\n                            <div class=\"row mb-2\">\n                                <label for=\"user_status\" class=\"col-lg-4 col-form-label\">\n                                    <?= Translation::get('ad_user_status') ?>\n                                </label>\n                                <div class=\"col-lg-8\">\n                                    <select id=\"user_status\" class=\"form-select\" name=\"user_status\" disabled>\n                                        <option value=\"active\"><?= Translation::get('ad_user_active') ?></option>\n                                        <option value=\"blocked\"><?= Translation::get('ad_user_blocked') ?></option>\n                                        <option value=\"protected\"><?= Translation::get('ad_user_protected') ?></option>\n                                    </select>\n                                </div>\n                            </div>\n\n                            <div class=\"row mb-2\">\n                                <label class=\"col-lg-4 col-form-label\" for=\"display_name\">\n                                    <?= Translation::get('ad_user_realname') ?>\n                                </label>\n                                <div class=\"col-lg-8\">\n                                    <input type=\"text\" id=\"display_name\" name=\"display_name\" value=\"\"\n                                           class=\"form-control\" required disabled>\n                                </div>\n                            </div>\n\n                            <div class=\"row mb-2\">\n                                <label class=\"col-lg-4 col-form-label\" for=\"email\">\n                                    <?= Translation::get('ad_entry_email') ?>\n                                </label>\n                                <div class=\"col-lg-8\">\n                                    <input type=\"email\" id=\"email\" name=\"email\" value=\"\" class=\"form-control\" required\n                                           disabled>\n                                </div>\n                            </div>\n\n                            <div class=\"row mb-2\">\n                                <div class=\"offset-lg-4 col-lg-8\">\n                                    <div class=\"form-check\">\n                                        <input class=\"form-check-input\" type=\"checkbox\" id=\"is_superadmin\"\n                                               name=\"is_superadmin\" disabled>\n                                        <label class=\"form-check-label\" for=\"is_superadmin\">\n                                            <?= Translation::get('ad_user_is_superadmin') ?>\n                                        </label>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"row mb-2\">\n                                <div class=\"offset-lg-4 col-lg-8\">\n                                    <a class=\"btn btn-danger pmf-admin-overwrite-password\" data-bs-toggle=\"modal\"\n                                       href=\"#pmf-modal-user-password-overwrite\">\n                                        <?= Translation::get('ad_user_overwrite_passwd') ?>\n                                    </a>\n                                </div>\n                            </div>\n\n                            <div class=\"row mb-2\">\n                                <div class=\"offset-lg-4 col-lg-8\">\n                                    <div class=\"form-check\">\n                                        <input class=\"form-check-input\" type=\"checkbox\" id=\"overwrite_twofactor\" name=\"overwrite_twofactor\">\n                                        <label class=\"form-check-label\" for=\"overwrite_twofactor\">\n                                            <?= Translation::get('ad_user_overwrite_twofactor') ?>\n                                        </label>\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n                        <div class=\"card-footer text-end\">\n                            <?php if ($userId > 0): ?>\n                            <a class=\"btn btn-danger\" href=\"?action=user&amp;user_action=delete_confirm&user_delete_id=<?= $userId ?>\">\n                                <?= Translation::get('ad_user_delete') ?>\n                            </a>\n                            <?php endif; ?>\n                            <button class=\"btn btn-success\" type=\"submit\">\n                                <?= Translation::get('ad_gen_save') ?>\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n\n            <div class=\"col-lg-4\" id=\"userRights\">\n                <form id=\"rightsForm\" action=\"?action=user&amp;user_action=update_rights\" method=\"post\"\n                      accept-charset=\"utf-8\">\n                    <input type=\"hidden\" name=\"user_id\" id=\"rights_user_id\" value=\"0\">\n                    <?= Token::getInstance()->getTokenInput('update-user-rights') ?>\n\n                    <div class=\"card mb-4\">\n                        <h5 class=\"card-header py-3\" id=\"user_rights_legend\">\n                            <i aria-hidden=\"true\" class=\"fa fa-lock\"></i> <?= Translation::get('ad_user_rights') ?>\n                        </h5>\n                        <div class=\"card-body\">\n                            <div class=\"text-center mb-3\">\n                                <button type=\"button\" class=\"btn btn-primary btn-sm\" id=\"checkAll\">\n                                    <?= Translation::get('ad_user_checkall') ?>\n                                    /\n                                    <?= Translation::get('ad_user_uncheckall') ?>\n                                </button>\n                            </div>\n                            <?php\n                            foreach ($user->perm->getAllRightsData() as $right) : ?>\n                                <div class=\"form-check\">\n                                    <input id=\"user_right_<?= $right['right_id'] ?>\" type=\"checkbox\"\n                                           name=\"user_rights[]\" value=\"<?= $right['right_id'] ?>\"\n                                           class=\"form-check-input permission\">\n                                    <label class=\"form-check-label\" for=\"user_right_<?= $right['right_id'] ?>\">\n                                        <?php\n                                        try {\n                                            echo Translation::get('rightsLanguage::' . $right['name']);\n                                        } catch (ErrorException) {\n                                            echo $right['description'];\n                                        }\n                                        ?>\n                                    </label>\n                                </div>\n                                <?php\n                            endforeach; ?>\n                        </div>\n                        <div class=\"card-footer\">\n                            <div class=\"card-button text-end\">\n                                <button class=\"btn btn-success\" type=\"submit\">\n                                    <?= Translation::get('ad_gen_save') ?>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n\n        <?php\n    }\n\n    // show a list of all users\n    if ($userAction == 'listallusers' && $user->perm->hasPermission($user->getUserId(), 'edit_user')) {\n        $allUsers = $user->getAllUsers(false);\n        $numUsers = is_countable($allUsers) ? count($allUsers) : 0;\n        $page = Filter::filterInput(INPUT_GET, 'page', FILTER_VALIDATE_INT, 0);\n        $perPage = 10;\n        $numPages = ceil($numUsers / $perPage);\n        $lastPage = $page * $perPage;\n        $firstPage = $lastPage - $perPage;\n\n        $baseUrl = sprintf(\n            '%sadmin/?action=user&amp;user_action=listallusers&amp;page=%d',\n            $faqConfig->getDefaultUrl(),\n            $page\n        );\n\n        // Pagination options\n        $options = [\n            'baseUrl' => $baseUrl,\n            'total' => $numUsers,\n            'perPage' => $perPage,\n            'useRewrite' => false,\n            'pageParamName' => 'page',\n        ];\n        $pagination = new Pagination($options);\n        ?>\n\n<div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n    <h1 class=\"h2\">\n        <i aria-hidden=\"true\" class=\"fa fa-user\"></i>\n        <?= Translation::get('ad_user') ?>\n    </h1>\n    <div class=\"btn-toolbar mb-2 mb-md-0\">\n        <div class=\"btn-group mr-2\">\n            <?php\n            if ($currentUser->perm->hasPermission($user->getUserId(), 'add_user')) : ?>\n                <button type=\"button\" class=\"btn btn-sm btn-primary\" data-bs-toggle=\"modal\"\n                        data-bs-target=\"#addUserModal\">\n                    <i class=\"fa fa-user-plus\" aria-label=\"true\"></i> <?= Translation::get('ad_user_add') ?>\n                </button>\n                <?php\n            endif ?>\n            <button type=\"button\" class=\"btn btn-sm btn-secondary\" id=\"pmf-button-export-users\">\n                <i class=\"fa fa-download\" aria-label=\"true\"></i> Export users as CSV\n            </button>\n        </div>\n    </div>\n</div>\n\n        <div id=\"pmf-user-message\"><?= $message ?></div>\n\n        <table class=\"table table-striped align-middle\" id=\"pmf-admin-user-table\">\n            <thead class=\"thead-dark\">\n            <tr>\n                <th><?= Translation::get('ad_entry_id') ?></th>\n                <th><?= Translation::get('ad_user_status') ?></th>\n                <th><?= Translation::get('ad_user_is_superadmin') ?></th>\n                <th><?= Translation::get('ad_user_is_visible') ?></th>\n                <th><?= Translation::get('msgNewContentName') ?></th>\n                <th><?= Translation::get('ad_auth_user') ?></th>\n                <th><?= Translation::get('msgNewContentMail') ?></th>\n                <th colspan=\"3\">&nbsp;</th>\n            </tr>\n            </thead>\n            <?php\n            if ($perPage < $numUsers) : ?>\n                <tfoot>\n                <tr>\n                    <td colspan=\"8\"><?= $pagination->render() ?></td>\n                </tr>\n                </tfoot>\n                <?php\n            endif;\n            ?>\n        <tbody>\n        <?php\n        $counter = $displayedCounter = 0;\n        foreach ($allUsers as $listedUserId) {\n            $user->getUserById($listedUserId, true);\n\n                if ($displayedCounter >= $perPage) {\n                    continue;\n                }\n                ++$counter;\n                if ($counter <= $firstPage) {\n                    continue;\n                }\n                ++$displayedCounter;\n\n                ?>\n                <tr class=\"row_user_id_<?= $user->getUserId() ?>\">\n                    <td><?= $user->getUserId() ?></td>\n                    <td class=\"text-center\"><i class=\"fa <?php\n                    switch ($user->getStatus()) {\n                        case 'active':\n                            echo 'fa-check-circle-o';\n                            break;\n                        case 'blocked':\n                            echo 'fa-ban';\n                            break;\n                        case 'protected':\n                            echo 'fa-lock';\n                            break;\n                    }\n                    ?> icon_user_id_<?= $user->getUserId() ?>\"></i></td>\n                    <td class=\"text-center\">\n                        <i class=\"fa <?= $user->isSuperAdmin() ? 'fa-user-secret' : 'fa-user-times' ?>\"></i>\n                    </td>\n                    <td class=\"text-center\">\n                        <i class=\"fa <?= $user->getUserData('is_visible') ? 'fa-user' : 'fa-user-o' ?>\"></i>\n                    </td>\n                    <td><?= Strings::htmlentities($user->getUserData('display_name')) ?></td>\n                    <td><?= Strings::htmlentities($user->getLogin()) ?></td>\n                    <td>\n                        <a href=\"mailto:<?= $user->getUserData('email') ?>\">\n                            <?= $user->getUserData('email') ?>\n                        </a>\n                    </td>\n                    <td>\n                        <a href=\"?action=user&amp;user_id=<?= $user->getUserData('user_id') ?>\"\n                           class=\"btn btn-sm btn-info\">\n                            <i class=\"fa fa-pencil\"></i> <?= Translation::get('ad_user_edit') ?>\n                        </a>\n                    </td>\n                    <td>\n                        <?php\n                        if ($user->getStatus() === 'blocked') : ?>\n                            <button type=\"button\" class=\"btn btn-sm btn-success btn-activate-user\"\n                                    id=\"btn_activate_user_id_<?= $user->getUserData('user_id') ?>\"\n                                    data-csrf-token=\"<?= Token::getInstance()->getTokenString('activate-user') ?>\"\n                                    data-user-id=\"<?= $user->getUserData('user_id') ?>\">\n                                <?= Translation::get('ad_news_set_active') ?>\n                            </button>\n                            <?php\n                        endif;\n                        ?>\n                    </td>\n                    <td>\n                        <?php\n                        if ($user->getStatus() !== 'protected') {\n                            $csrfToken = Token::getInstance()->getTokenString('delete-user');\n                        ?>\n                            <button type=\"button\" class=\"btn btn-sm btn-danger btn-delete-user\"\n                                    id=\"btn_user_id_<?= $user->getUserData('user_id') ?>\"\n                                    data-csrf-token=\"<?= $csrfToken ?>\"\n                                    data-user-id=\"<?= $user->getUserData('user_id') ?>\">\n                                <i class=\"fa fa-trash\" data-csrf-token=\"<?= $csrfToken ?>\"\n                                   data-user-id=\"<?= $user->getUserData('user_id') ?>\"></i>\n                                <?= Translation::get('ad_user_delete') ?>\n                            </button>\n                        <?php\n                        }\n                        ?>\n                    </td>\n                </tr>\n                <?php\n            }\n            ?>\n            </tbody>\n        </table>\n        <?php\n    }\n\n    $user = CurrentUser::getCurrentUser($faqConfig);\n    ?>\n\n    <!-- Modal to add a new user -->\n    <div class=\"modal fade\" id=\"addUserModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"addUserModalLabel\"\n         aria-hidden=\"true\">\n        <div class=\"modal-dialog modal-lg\" role=\"document\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h5 class=\"modal-title\" id=\"addUserModalLabel\">\n                        <i aria-hidden=\"true\" class=\"fa fa-user-plus\"></i> <?= Translation::get('ad_adus_adduser') ?>\n                    </h5>\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <form action=\"#\" method=\"post\" role=\"form\" id=\"pmf-add-user-form\" class=\"needs-validation\"\n                          autocomplete=\"off\"\n                          novalidate>\n\n                        <input type=\"hidden\" id=\"add_user_csrf\" name=\"add_user_csrf\"\n                               value=\"<?= Token::getInstance()->getTokenString('add-user') ?>\">\n\n                        <div class=\"alert alert-danger d-none\" id=\"pmf-add-user-error-message\"></div>\n\n                        <div class=\"row mb-2\">\n                            <label class=\"col-lg-4 col-form-label\" for=\"add_user_name\">\n                                <?= Translation::get('ad_adus_name') ?>\n                            </label>\n                            <div class=\"col-lg-8\">\n                                <input type=\"text\" name=\"add_user_name\" id=\"add_user_name\" required tabindex=\"1\"\n                                       class=\"form-control\">\n                            </div>\n                        </div>\n\n                        <div class=\"row mb-2\">\n                            <label class=\"col-lg-4 col-form-label\"\n                                   for=\"add_user_realname\"><?= Translation::get('ad_user_realname') ?></label>\n                            <div class=\"col-lg-8\">\n                                <input type=\"text\" name=\"add_user_realname\" id=\"add_user_realname\" required tabindex=\"2\"\n                                       class=\"form-control\">\n                            </div>\n                        </div>\n\n                        <div class=\"row mb-2\">\n                            <label class=\"col-lg-4 col-form-label\" for=\"add_user_email\">\n                                <?= Translation::get('ad_entry_email') ?>\n                            </label>\n                            <div class=\"col-lg-8\">\n                                <input type=\"email\" name=\"user_email\" id=\"add_user_email\" required tabindex=\"3\"\n                                       class=\"form-control\">\n                            </div>\n                        </div>\n\n                        <div class=\"row mb-2\">\n                            <div class=\"col-lg-4\"></div>\n                            <div class=\"col-lg-8\">\n                                <div class=\"form-check\">\n                                    <input class=\"form-check-input\" type=\"checkbox\" id=\"add_user_automatic_password\"\n                                           name=\"add_user_automatic_password\" value=\"\">\n                                    <label class=\"form-check-label\" for=\"add_user_automatic_password\">\n                                        <?= Translation::get('ad_add_user_change_password') ?>\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div id=\"add_user_show_password_inputs\">\n                            <div class=\"row mb-2\">\n                                <label class=\"col-lg-4 col-form-label\"\n                                       for=\"add_user_password\"><?= Translation::get('ad_adus_password') ?></label>\n                                <div class=\"col-lg-8\">\n                                    <input type=\"password\" name=\"add_user_password\" id=\"add_user_password\"\n                                           class=\"form-control\" minlength=\"8\"\n                                           autocomplete=\"off\" tabindex=\"4\">\n                                </div>\n                            </div>\n\n                            <div class=\"row mb-2\">\n                                <label class=\"col-lg-4 col-form-label\"\n                                       for=\"add_user_password_confirm\"><?= Translation::get('ad_passwd_con') ?></label>\n                                <div class=\"col-lg-8\">\n                                    <input type=\"password\" name=\"add_user_password_confirm\"\n                                           id=\"add_user_password_confirm\" minlength=\"8\"\n                                           class=\"form-control\" autocomplete=\"off\" tabindex=\"5\">\n                                </div>\n                            </div>\n                        </div>\n\n                        <?php if ($user->isSuperAdmin()) { ?>\n                        <div class=\"row mb-2\">\n                            <div class=\"col-lg-4\"></div>\n                            <div class=\"col-lg-8\">\n                                <div class=\"form-check\">\n                                    <input class=\"form-check-input\" type=\"checkbox\" id=\"add_user_is_superadmin\"\n                                           name=\"user_is_superadmin\">\n                                    <label class=\"form-check-label\" for=\"add_user_is_superadmin\">\n                                        <?= Translation::get('ad_user_is_superadmin') ?>\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n                        <?php } ?>\n\n                    </form>\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">\n                        <?= Translation::get('ad_gen_cancel') ?>\n                    </button>\n                    <button type=\"button\" class=\"btn btn-primary\" id=\"pmf-add-user-action\">\n                        <?= Translation::get('ad_gen_save') ?>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <!-- Modal to overwrite password -->\n    <div class=\"modal fade\" id=\"pmf-modal-user-password-overwrite\">\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h4><?= Translation::get('ad_menu_passwd') ?></h4>\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <form action=\"#\" method=\"post\" accept-charset=\"utf-8\" autocomplete=\"off\">\n                        <input type=\"hidden\" name=\"csrf\" id=\"modal_csrf\"\n                               value=\"<?= Token::getInstance()->getTokenString('overwrite-password') ?>\">\n                        <input type=\"hidden\" name=\"user_id\" id=\"modal_user_id\" value=\"<?= $userId ?>\">\n\n                        <div class=\"row mb-2\">\n                            <label class=\"col-5 col-form-label\" for=\"npass\">\n                                <?= Translation::get('ad_passwd_new') ?>\n                            </label>\n                            <div class=\"col-7\">\n                                <input type=\"password\" autocomplete=\"off\" name=\"npass\" id=\"npass\"\n                                       class=\"form-control\" required>\n                            </div>\n                        </div>\n\n                        <div class=\"row mb-2\">\n                            <label class=\"col-5 col-form-label\" for=\"bpass\">\n                                <?= Translation::get('ad_passwd_con') ?>\n                            </label>\n                            <div class=\"col-7\">\n                                <input type=\"password\" autocomplete=\"off\" name=\"bpass\" id=\"bpass\"\n                                       class=\"form-control\" required>\n                            </div>\n                        </div>\n\n                    </form>\n                </div>\n                <div class=\"modal-footer\">\n                    <button class=\"btn btn-primary\" id=\"pmf-user-password-overwrite-action\">\n                        <?= Translation::get('ad_user_overwrite_passwd') ?>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <?php\n} else {\n    echo Translation::get('err_NotAuth');\n}\n", "<?php\n\n/**\n * Creates a new user object.\n *\n * A user are recognized by the session-id using getUserBySessionId(), by his\n * using getUserById() or by his nickname (login) using getUserByLogin(). New\n * are created using createNewUser().\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at https://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Lars Tiedemann <php@larstiedemann.de>\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Sarah Hermann <sayh@gmx.de>\n * @copyright 2005-2023 phpMyFAQ Team\n * @license   https://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2005-09-17\n */\n\nnamespace phpMyFAQ;\n\nuse Exception;\nuse phpMyFAQ\\Auth\\AuthDriverInterface;\nuse phpMyFAQ\\Permission\\MediumPermission;\nuse phpMyFAQ\\User\\UserData;\nuse Symfony\\Component\\Mailer\\Exception\\TransportExceptionInterface;\n\nif (!defined('PMF_ENCRYPTION_TYPE')) {\n    define('PMF_ENCRYPTION_TYPE', 'hash');\n}\n\n/**\n * Class User\n *\n * @package phpMyFAQ\n */\nclass User\n{\n    final public const ERROR_USER_ADD = 'Account could not be created. ';\n    final public const ERROR_USER_CANNOT_CREATE_USER = 'User account could not be created. ';\n    final public const ERROR_USER_CANNOT_CREATE_USERDATA = 'Entry for user data could not be created. ';\n    final public const ERROR_USER_CANNOT_DELETE_USER = 'User account could not be deleted. ';\n    final public const ERROR_USER_CANNOT_DELETE_USERDATA = 'Entry for user data could not be deleted. ';\n    final public const ERROR_USER_CHANGE = 'Account could not be updated. ';\n    final public const ERROR_USER_DELETE = 'Account could not be deleted. ';\n    final public const ERROR_USER_INCORRECT_LOGIN = 'The login name could not be found. ';\n    final public const ERROR_USER_INCORRECT_PASSWORD = 'The password is not correct.';\n    final public const ERROR_USER_INVALID_STATUS = 'Undefined user status.';\n    final public const ERROR_USER_LOGINNAME_TOO_SHORT = 'The chosen login name is too short.';\n    final public const ERROR_USER_LOGIN_NOT_UNIQUE = 'Specified login name already exists. ';\n    final public const ERROR_USER_LOGIN_INVALID = 'The chosen login is invalid. A valid login has at least four ' .\n        'characters. Only letters, numbers and underscore _ are allowed. The first letter must be a letter. ';\n    final public const ERROR_USER_NO_PERM = 'No permission container specified.';\n    final public const ERROR_USER_NO_USERID = 'No user-ID found. ';\n    final public const ERROR_USER_NO_USERLOGINDATA = 'No user login data found. ';\n    final public const ERROR_USER_NOT_FOUND = 'User account could not be found. ';\n    final public const ERROR_USER_NO_AUTH_WRITABLE = 'No authentication object is writable.';\n    final public const ERROR_USER_TOO_MANY_FAILED_LOGINS = 'You exceeded the maximum amounts of login attempts and ' .\n        'are temporarily blocked. Please try again later.';\n\n    final public const STATUS_USER_PROTECTED = 'User account is protected. ';\n    final public const STATUS_USER_BLOCKED = 'User account is blocked. ';\n    final public const STATUS_USER_ACTIVE = 'User account is active. ';\n\n    /**\n     * Permission container.\n     *\n     * @var Permission\n     */\n    public Permission $perm;\n\n    /**\n     * User-data storage container.\n     */\n    public ?UserData $userdata = null;\n\n    /**\n     * Public array that contains error messages.\n     *\n     * @var array<string>\n     */\n    public array $errors = [];\n\n    /**\n     * authentication container.\n     *\n     * @var array<string, AuthDriverInterface>\n     */\n    protected array $authContainer = [];\n\n    /**\n     * Default Authentication properties.\n     *\n     * @var array<string, array<string, string>|string|false>\n     */\n    private array $authData = [\n        'authSource' => [\n            'name' => 'database',\n            'type' => 'local',\n        ],\n        'encType' => PMF_ENCRYPTION_TYPE,\n        'readOnly' => false,\n    ];\n\n    /**\n     * login string.\n     */\n    private string $login = '';\n\n    /**\n     * minimum length of login string (default: 2).\n     */\n    private int $loginMinLength = 2;\n\n    /**\n     * regular expression to find invalid login strings\n     * (default: /^[a-z0-9][\\w\\.\\-@]+/is ).\n     */\n    private string $validUsername = '/^[a-z0-9][\\w\\.\\-@]+/is';\n\n    /**\n     * user ID.\n     */\n    private int $userId = -1;\n\n    /**\n     * Status of user.\n     */\n    private string $status = '';\n\n    /**\n     * IS the user a super admin?\n     */\n    private bool $isSuperAdmin = false;\n\n    /** @var string $authSource Authentication, e.g. local, ldap, azure, sso, ... */\n    private string $authSource = 'local';\n\n    /**\n     * array of allowed values for status.\n     *\n     * @var array<string>\n     */\n    private array $allowedStatus = [\n        'active' => self::STATUS_USER_ACTIVE,\n        'blocked' => self::STATUS_USER_BLOCKED,\n        'protected' => self::STATUS_USER_PROTECTED,\n    ];\n\n    /**\n     * Constructor.\n     *\n     * @throws Core\\Exception\n     */\n    public function __construct(protected ?Configuration $config)\n    {\n        $perm = Permission::selectPerm($this->config->get('security.permLevel'), $this->config);\n        if (!$this->addPerm($perm)) {\n            return;\n        }\n\n        // Always create a 'local' authentication object (see: $authData)\n        $this->authContainer = [];\n        $auth = new Auth($this->config);\n\n        $selectedAuth = $auth->selectAuth($this->getAuthSource('name'));\n        $selectedAuth->selectEncType($this->getAuthData('encType'));\n        $selectedAuth->setReadOnly($this->getAuthData('readOnly'));\n\n        if (!$this->addAuth($selectedAuth, $this->getAuthSource('type'))) {\n            return;\n        }\n\n        // additionally, set given $auth objects\n        /** @phpstan-ignore-next-line */\n        foreach ($this->authContainer as $name => $authObject) {\n            if (!$this->addAuth($authObject, $name)) {\n                break;\n            }\n        }\n\n        // user data object\n        $this->userdata = new UserData($this->config);\n    }\n\n    /**\n     * Adds a permission object to the user.\n     *\n     * @param Permission $perm Permission object\n     */\n    public function addPerm(Permission $perm): bool\n    {\n        $this->perm = $perm;\n        return true;\n    }\n\n    /**\n     * Returns a specific entry from the auth data source array.\n     */\n    public function getAuthSource(string $key): ?string\n    {\n        if (isset($this->authData['authSource'][$key])) {\n            return $this->authData['authSource'][$key];\n        }\n        return null;\n    }\n\n    public function getUserAuthSource(): string\n    {\n        return $this->authSource;\n    }\n\n    /**\n     * Returns a specific entry from the auth data array.\n     */\n    public function getAuthData(string $key): mixed\n    {\n        if (isset($this->authData[$key])) {\n            return $this->authData[$key];\n        }\n        return null;\n    }\n\n    /**\n     * adds a new authentication object to the user object.\n     *\n     * @param AuthDriverInterface $auth Driver object\n     * @param string                                                          $name Auth name\n     */\n    public function addAuth(AuthDriverInterface $auth, string $name): bool\n    {\n        if ($this->checkAuth($auth)) {\n            $this->authContainer[$name] = $auth;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns true if auth is a valid authentication object.\n     *\n     * @param Auth $auth Auth object\n     */\n    protected function checkAuth(Auth $auth): bool\n    {\n        $methods = ['checkCredentials'];\n        foreach ($methods as $method) {\n            if (!method_exists($auth, $method)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * loads basic user information from the database selecting the user with\n     * specified cookie information.\n     */\n    public function getUserByCookie(string $cookie): bool\n    {\n        $select = sprintf(\n            \"\n            SELECT\n                user_id,\n                login,\n                account_status\n            FROM\n                %sfaquser\n            WHERE\n                remember_me = '%s' AND account_status != 'blocked'\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($cookie)\n        );\n\n        $res = $this->config->getDb()->query($select);\n        if ($this->config->getDb()->numRows($res) !== 1) {\n            $this->errors[] = self::ERROR_USER_INCORRECT_LOGIN;\n\n            return false;\n        }\n        $user = $this->config->getDb()->fetchArray($res);\n\n        // Don't ever log in via anonymous user\n        if (-1 === $user['user_id']) {\n            return false;\n        }\n\n        $this->userId = (int)$user['user_id'];\n        $this->login = (string)$user['login'];\n        $this->status = (string)$user['account_status'];\n\n        // get user-data\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n        $this->userdata->load($this->getUserId());\n\n        return true;\n    }\n\n    /**\n     * Returns the User ID of the user.\n     */\n    public function getUserId(): int\n    {\n        if (isset($this->userId)) {\n            return $this->userId;\n        }\n\n        $this->userId = -1;\n        $this->errors[] = self::ERROR_USER_NO_USERID;\n\n        return -1;\n    }\n\n    /**\n     * Checks if display name is already used. Returns true, if already in use.\n     */\n    public function checkDisplayName(string $name): bool\n    {\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n\n        if ($name === $this->userdata->fetch('display_name', $name)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Checks if email address is already used. Returns true, if already in use.\n     */\n    public function checkMailAddress(string $name): bool\n    {\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n\n        if ($name === $this->userdata->fetch('email', $name)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * search users by login.\n     *\n     * @param string $search Login name\n     * @return array<int, array>\n     */\n    public function searchUsers(string $search): array\n    {\n        $select = sprintf(\n            \"\n            SELECT\n                login, \n                user_id,\n                account_status\n            FROM\n                %sfaquser\n            WHERE \n                login LIKE '%s'\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($search . '%')\n        );\n\n        $res = $this->config->getDb()->query($select);\n        if (!$res) {\n            return [];\n        }\n\n        $result = [];\n        while ($row = $this->config->getDb()->fetchArray($res)) {\n            $result[] = $row;\n        }\n\n        return $result;\n    }\n\n    /**\n     * Creates a new user and stores basic data in the database.\n     *\n     * @throws Core\\Exception\n     * @throws Exception\n     */\n    public function createUser(string $login, string $pass = '', string $domain = '', int $userId = 0): bool\n    {\n        foreach ($this->authContainer as $auth) {\n            if (!$this->checkAuth($auth)) {\n                return false;\n            }\n        }\n\n        // is $login valid?\n        if (!$this->isValidLogin($login)) {\n            $this->errors[] = self::ERROR_USER_LOGINNAME_TOO_SHORT;\n\n            return false;\n        }\n\n        // does $login already exist?\n        if ($this->getUserByLogin($login, false)) {\n            $this->errors[] = self::ERROR_USER_LOGIN_NOT_UNIQUE;\n\n            return false;\n        }\n\n        // set user-ID\n        if (0 == $userId) {\n            $this->userId = $this->config->getDb()->nextId(Database::getTablePrefix() . 'faquser', 'user_id');\n        } else {\n            $this->userId = $userId;\n        }\n\n        // create user entry\n        $insert = sprintf(\n            \"INSERT INTO %sfaquser (user_id, login, session_timestamp, member_since) VALUES (%d, '%s', %d, '%s')\",\n            Database::getTablePrefix(),\n            $this->getUserId(),\n            $this->config->getDb()->escape($login),\n            $_SERVER['REQUEST_TIME'],\n            date('YmdHis', $_SERVER['REQUEST_TIME'])\n        );\n\n        $this->config->getDb()->query($insert);\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n        $data = $this->userdata->add($this->getUserId());\n        if (!$data) {\n            $this->errors[] = self::ERROR_USER_CANNOT_CREATE_USERDATA;\n\n            return false;\n        }\n\n        // create authentication entry\n        if (strlen($pass) === 0) {\n            $pass = $this->createPassword();\n        }\n        $success = false;\n\n        foreach ($this->authContainer as $name => $auth) {\n            if ($auth->setReadOnly()) {\n                continue;\n            }\n            if (!$auth->create($login, $pass, $domain)) {\n                $this->errors[] = self::ERROR_USER_CANNOT_CREATE_USER . 'in Auth ' . $name;\n            } else {\n                $success = true;\n            }\n        }\n        if (!$success) {\n            return false;\n        }\n\n        if ($this->perm instanceof MediumPermission) {\n            $this->perm->autoJoin($this->userId);\n        }\n\n        return $this->getUserByLogin($login, false);\n    }\n\n    /**\n     * returns true if login is a valid login string.\n     * $this->loginMinLength defines the minimum length the\n     * login string. If login has more characters than allowed,\n     * false is returned.\n     * $this->login_invalidRegExp is a regular expression.\n     * If login matches this false is returned.\n     *\n     * @param string $login Login name\n     */\n    public function isValidLogin(string $login): bool\n    {\n        if (strlen($login) < $this->loginMinLength || !preg_match($this->validUsername, $login)) {\n            $this->errors[] = self::ERROR_USER_LOGIN_INVALID;\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * loads basic user information from the database selecting the user with\n     * specified login.\n     *\n     * @param string $login Login name\n     * @param bool   $raiseError Raise error?\n     */\n    public function getUserByLogin(string $login, bool $raiseError = true): bool\n    {\n        $select = sprintf(\n            \"\n            SELECT\n                user_id,\n                login,\n                account_status,\n                is_superadmin\n            FROM\n                %sfaquser\n            WHERE\n                login = '%s'\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($login)\n        );\n\n        $res = $this->config->getDb()->query($select);\n        if ($this->config->getDb()->numRows($res) !== 1) {\n            if ($raiseError) {\n                $this->errors[] = self::ERROR_USER_INCORRECT_LOGIN;\n            }\n\n            return false;\n        }\n\n        $user = $this->config->getDb()->fetchArray($res);\n\n        $this->userId = (int) $user['user_id'];\n        $this->login = (string) $user['login'];\n        $this->status = (string) $user['account_status'];\n        $this->isSuperAdmin = (bool) $user['is_superadmin'];\n\n        // get user-data\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n        $this->userdata->load($this->getUserId());\n\n        return true;\n    }\n\n    /**\n     * Returns a new password.\n     *\n     * @throws Exception\n     */\n    public function createPassword(int $minimumLength = 8, bool $allowUnderscore = true): string\n    {\n        // To make passwords harder to get wrong, a few letters & numbers have been omitted.\n        // This will ensure safety with browsers using fonts with confusable letters.\n        // Removed: o,O,0,1,l,L\n        $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'm', 'n', 'p', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n        $vowels = ['a', 'e', 'i', 'u'];\n        $newPassword = '';\n        $nextChar = '';\n        $skipped = false;\n\n        while (strlen($newPassword) < $minimumLength) {\n            $caseFunc = random_int(0, 1) ? 'strtoupper' : 'strtolower';\n\n            switch (random_int(0, $skipped ? 3 : ($allowUnderscore ? 5 : 4))) {\n                case 0:\n                case 1:\n                    $nextChar = $caseFunc($consonants[random_int(0, 18)]);\n                    break;\n                case 2:\n                case 3:\n                    $nextChar = $caseFunc($vowels[random_int(0, 3)]);\n                    break;\n                case 4:\n                    $nextChar = (string)random_int(2, 9);\n                    break;\n                case 5:\n                    $newPassword .= '_';\n                    continue 2;\n            }\n\n            $skipped = false;\n\n            // Ensure letters and numbers only occur once.\n            if (!str_contains($newPassword, $nextChar)) {\n                $newPassword .= $nextChar;\n            } else {\n                $skipped = true;\n            }\n        }\n\n        return $newPassword;\n    }\n\n    /**\n     * deletes the user from the database.\n     */\n    public function deleteUser(): bool\n    {\n        if (!isset($this->userId) || $this->userId == 0) {\n            $this->errors[] = self::ERROR_USER_NO_USERID;\n\n            return false;\n        }\n\n        if (!isset($this->login) || strlen($this->login) == 0) {\n            $this->errors[] = self::ERROR_USER_LOGIN_INVALID;\n\n            return false;\n        }\n\n        if (\n            isset($this->allowedStatus[$this->status]) &&\n            $this->allowedStatus[$this->status] === self::STATUS_USER_PROTECTED\n        ) {\n            $this->errors[] = self::ERROR_USER_CANNOT_DELETE_USER . self::STATUS_USER_PROTECTED;\n\n            return false;\n        }\n\n        $this->perm->refuseAllUserRights($this->userId);\n\n        $delete = sprintf(\n            'DELETE FROM %sfaquser WHERE user_id = %d',\n            Database::getTablePrefix(),\n            $this->userId\n        );\n\n        $res = $this->config->getDb()->query($delete);\n        if (!$res) {\n            $this->errors[] = self::ERROR_USER_CANNOT_DELETE_USER . 'error(): ' . $this->config->getDb()->error();\n\n            return false;\n        }\n\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n        $data = $this->userdata->delete($this->getUserId());\n        if (!$data) {\n            $this->errors[] = self::ERROR_USER_CANNOT_DELETE_USERDATA;\n\n            return false;\n        }\n\n        $readOnly = 0;\n        $authCount = 0;\n        $delete = [];\n        foreach ($this->authContainer as $auth) {\n            ++$authCount;\n            if ($auth->setReadOnly()) {\n                ++$readOnly;\n                continue;\n            }\n            $delete[] = $auth->delete($this->login);\n        }\n\n        if ($readOnly == $authCount) {\n            $this->errors[] = self::ERROR_USER_NO_AUTH_WRITABLE;\n        }\n        if (!in_array(true, $delete)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns a string with error messages.\n     * The string returned by error() contains messages for all errors that\n     * during object processing. Messages are separated by new lines.\n     * Error messages are stored in the public array errors.\n     */\n    public function error(): string\n    {\n        $message = '';\n\n        foreach ($this->errors as $error) {\n            $message .= $error . \"<br>\\n\";\n        }\n        $this->errors = [];\n\n        return $message;\n    }\n\n    /**\n     * Returns the data aof the auth container.\n     *\n     * @return AuthDriverInterface[]\n     */\n    public function getAuthContainer(): array\n    {\n        return $this->authContainer;\n    }\n\n    /**\n     * Returns an array with the user-IDs of all users found in\n     * the database. By default, the Anonymous User will not be returned.\n     *\n     * @param bool $withoutAnonymous Without anonymous?\n     * @param bool $allowBlockedUsers Allow blocked users as well, e.g. in admin\n     * @return array<int>\n     */\n    public function getAllUsers(bool $withoutAnonymous = true, bool $allowBlockedUsers = true): array\n    {\n        $select = sprintf(\n            '\n            SELECT\n                user_id\n            FROM\n                %sfaquser\n            WHERE\n                1 = 1\n            %s\n            %s\n            ORDER BY\n                user_id ASC',\n            Database::getTablePrefix(),\n            ($withoutAnonymous ? 'AND user_id <> -1' : ''),\n            ($allowBlockedUsers ? '' : \"AND account_status != 'blocked'\")\n        );\n\n        $res = $this->config->getDb()->query($select);\n        if (!$res) {\n            return [];\n        }\n\n        $result = [];\n        while ($row = $this->config->getDb()->fetchArray($res)) {\n            $result[] = (int) $row['user_id'];\n        }\n\n        return $result;\n    }\n\n    /**\n     * Loads basic user information from the database selecting the user with\n     * specified user-ID.\n     *\n     * @param int  $userId User ID\n     * @param bool $allowBlockedUsers Allow blocked users as well, e.g. in admin\n     */\n    public function getUserById(int $userId, bool $allowBlockedUsers = false): bool\n    {\n        $select = sprintf(\n            '\n            SELECT\n                user_id,\n                login,\n                account_status,\n                is_superadmin,\n                auth_source\n            FROM\n                %sfaquser\n            WHERE\n                user_id = %d ' . ($allowBlockedUsers ? '' : \"AND account_status != 'blocked'\"),\n            Database::getTablePrefix(),\n            $userId\n        );\n\n        $res = $this->config->getDb()->query($select);\n        if ($this->config->getDb()->numRows($res) != 1) {\n            $this->errors[] = self::ERROR_USER_NO_USERID . 'error(): ' . $this->config->getDb()->error();\n\n            return false;\n        }\n\n        $user = $this->config->getDb()->fetchArray($res);\n\n        $this->userId = (int) $user['user_id'];\n        $this->login = (string) $user['login'];\n        $this->status = (string) $user['account_status'];\n        $this->isSuperAdmin = (bool) $user['is_superadmin'];\n        $this->authSource = (string) $user['auth_source'];\n\n        // get encrypted password\n        // @todo: Add a getEncPassword method to the Auth* classes for the (local and remote) Auth Sources.\n        if ('db' === $this->getAuthSource('name')) {\n            $select = sprintf(\n                \"\n                SELECT\n                    pass\n                FROM\n                    %sfaquserlogin\n                WHERE\n                    login = '%s'\",\n                Database::getTablePrefix(),\n                $this->login\n            );\n\n            $res = $this->config->getDb()->query($select);\n            if ($this->config->getDb()->numRows($res) != 1) {\n                $this->errors[] = self::ERROR_USER_NO_USERLOGINDATA . 'error(): ' . $this->config->getDb()->error();\n\n                return false;\n            }\n        }\n        // get user-data\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n        $this->userdata->load($this->getUserId());\n\n        return true;\n    }\n\n    /**\n     * Returns the data of the current user.\n     *\n     * @param string $field Field\n     * @return array<string>|string|int|null\n     */\n    public function getUserData(string $field = '*'): array|int|string|null\n    {\n        if (!($this->userdata instanceof UserData)) {\n            $this->userdata = new UserData($this->config);\n        }\n\n        return $this->userdata->get($field);\n    }\n\n    /**\n     * Adds user data.\n     *\n     * @param array<string> $data Array with user data\n     */\n    public function setUserData(array $data): bool\n    {\n        if (!($this->userdata instanceof UserData)) {\n            $this->userdata = new UserData($this->config);\n        }\n        $this->userdata->load($this->getUserId());\n\n        return $this->userdata->set(array_keys($data), array_values($data));\n    }\n\n    /**\n     * returns the user's login.\n     */\n    public function getLogin(): string\n    {\n        return $this->login;\n    }\n\n    /**\n     * Returns the user ID from the given email address\n     */\n    public function getUserIdByEmail(string $email): int\n    {\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n\n        $userData = $this->userdata->fetchAll('email', $email);\n\n        return $userData['user_id'];\n    }\n\n    /**\n     * Returns true or false for the visibility for the given email\n     * address, if the user is not a registered user, the method\n     * returns false for anonymous users\n     */\n    public function getUserVisibilityByEmail(string $email): bool\n    {\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n\n        $userData = $this->userdata->fetchAll('email', $email);\n\n        return !isset($userData['is_visible']) || $userData['is_visible'];\n    }\n\n    /**\n     * Returns true on success.\n     * This will change a users' status to active, and send an email with a new password.\n     *\n     * @throws Exception|TransportExceptionInterface\n     */\n    public function activateUser(): bool\n    {\n        if ($this->getStatus() == 'blocked') {\n            // Generate and change user password.\n            $newPassword = $this->createPassword();\n            $this->changePassword($newPassword);\n            // Send activation email.\n            $subject = '[%sitename%] Login name / activation';\n            $message = sprintf(\n                \"\\nName: %s\\nLogin name: %s\\nNew password: %s\\n\\n\",\n                $this->getUserData('display_name'),\n                $this->getLogin(),\n                $newPassword\n            );\n            // Only set to active if the activation mail sent correctly.\n            if ($this->mailUser($subject, $message)) {\n                return $this->setStatus('active');\n            }\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * returns the user's status.\n     */\n    public function getStatus(): string\n    {\n        if (isset($this->status) && strlen($this->status) > 0) {\n            return $this->status;\n        }\n\n        return '';\n    }\n\n    /**\n     * Sets the user's status and updates the database entry.\n     *\n     * @param string $status Status\n     */\n    public function setStatus(string $status): bool\n    {\n        // is status allowed?\n        $status = strtolower($status);\n        if (!in_array($status, array_keys($this->allowedStatus))) {\n            $this->errors[] = self::ERROR_USER_INVALID_STATUS;\n\n            return false;\n        }\n\n        // update status\n        $this->status = $status;\n        $update = sprintf(\n            \"\n            UPDATE\n                %sfaquser\n            SET\n                account_status = '%s'\n            WHERE\n                user_id = %d\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($status),\n            $this->userId\n        );\n\n        $res = $this->config->getDb()->query($update);\n\n        if ($res) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * changes the user's password. If $pass is omitted, a new\n     * password is generated using the createPassword() method.\n     *\n     * @param string $pass Password\n     * @throws Exception\n     */\n    public function changePassword(string $pass = ''): bool\n    {\n        foreach ($this->authContainer as $auth) {\n            if (!$this->checkAuth($auth)) {\n                return false;\n            }\n        }\n\n        $login = $this->getLogin();\n        if ($pass == '') {\n            $pass = $this->createPassword();\n        }\n\n        $success = false;\n        foreach ($this->authContainer as $auth) {\n            if ($auth->setReadOnly()) {\n                continue;\n            }\n            if (!$auth->update($login, $pass)) {\n                continue;\n            } else {\n                $success = true;\n            }\n        }\n\n        return $success;\n    }\n\n    /**\n     * Sends mail to the current user.\n     *\n     * @throws Core\\Exception|TransportExceptionInterface\n     */\n    public function mailUser(string $subject, string $message): int\n    {\n        $mail = new Mail($this->config);\n        $mail->addTo($this->getUserData('email'));\n        $mail->subject = $subject;\n        $mail->message = $message;\n        $result = $mail->send();\n        unset($mail);\n\n        return $result;\n    }\n\n    /**\n     * Returns true, if a user is a super admin.\n     */\n    public function isSuperAdmin(): bool\n    {\n        return $this->isSuperAdmin;\n    }\n\n    /**\n     * Sets the users \"is_superadmin\" flag and updates the database entry.\n     */\n    public function setSuperAdmin(bool $isSuperAdmin): bool\n    {\n        $this->isSuperAdmin = $isSuperAdmin;\n        $update = sprintf(\n            \"\n            UPDATE\n                %sfaquser\n            SET\n                is_superadmin = %d\n            WHERE\n                user_id = %d\",\n            Database::getTablePrefix(),\n            (int)$this->isSuperAdmin,\n            $this->userId\n        );\n\n        $res = $this->config->getDb()->query($update);\n\n        if ($res) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Terminates the session ID of user\n     * @return bool\n     */\n    public function terminateSessionId(): bool\n    {\n        $update = sprintf(\n            \"UPDATE %sfaquser SET session_id = '' WHERE user_id = %d\",\n            Database::getTablePrefix(),\n            $this->userId\n        );\n\n        return (bool) $this->config->getDb()->query($update);\n    }\n}\n"], "filenames": ["phpmyfaq/admin/api/user.php", "phpmyfaq/admin/assets/src/user/user-list.js", "phpmyfaq/admin/user.php", "phpmyfaq/src/phpMyFAQ/User.php"], "buggy_code_start_loc": [118, 21, 96, 1039], "buggy_code_end_loc": [120, 22, 97, 1039], "fixing_code_start_loc": [118, 21, 97, 1040], "fixing_code_end_loc": [119, 22, 101, 1055], "type": "CWE-613", "message": "Insufficient Session Expiration in GitHub repository thorsten/phpmyfaq prior to 3.2.2.", "other": {"cve": {"id": "CVE-2023-5865", "sourceIdentifier": "security@huntr.dev", "published": "2023-10-31T01:15:07.880", "lastModified": "2023-11-09T19:55:22.720", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Insufficient Session Expiration in GitHub repository thorsten/phpmyfaq prior to 3.2.2."}, {"lang": "es", "value": "Caducidad de sesi\u00f3n insuficiente en el repositorio de GitHub thorsten/phpmyfaq anterior a 3.2.2."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 7.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-613"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.2.2", "matchCriteriaId": "ABD3B984-C15B-43BF-ADE8-2AF970E88C8C"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/5f43786f52c3d517e7665abd25d534e180e08dc5", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.com/bounties/4c4b7395-d9fd-4ca0-98d7-2e20c1249aff", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/5f43786f52c3d517e7665abd25d534e180e08dc5"}}