{"buggy_code": ["<?php\n/**\n * Functions related to registering and parsing blocks.\n *\n * @package WordPress\n * @subpackage Blocks\n * @since 5.0.0\n */\n\n/**\n * Registers a block type.\n *\n * @since 5.0.0\n *\n * @param string|WP_Block_Type $name Block type name including namespace, or alternatively a\n *                                   complete WP_Block_Type instance. In case a WP_Block_Type\n *                                   is provided, the $args parameter will be ignored.\n * @param array                $args {\n *     Optional. Array of block type arguments. Any arguments may be defined, however the\n *     ones described below are supported by default. Default empty array.\n *\n *     @type callable $render_callback Callback used to render blocks of this block type.\n * }\n * @return WP_Block_Type|false The registered block type on success, or false on failure.\n */\nfunction register_block_type( $name, $args = array() ) {\n\treturn WP_Block_Type_Registry::get_instance()->register( $name, $args );\n}\n\n/**\n * Unregisters a block type.\n *\n * @since 5.0.0\n *\n * @param string|WP_Block_Type $name Block type name including namespace, or alternatively a\n *                                   complete WP_Block_Type instance.\n * @return WP_Block_Type|false The unregistered block type on success, or false on failure.\n */\nfunction unregister_block_type( $name ) {\n\treturn WP_Block_Type_Registry::get_instance()->unregister( $name );\n}\n\n/**\n * Determine whether a post or content string has blocks.\n *\n * This test optimizes for performance rather than strict accuracy, detecting\n * the pattern of a block but not validating its structure. For strict accuracy,\n * you should use the block parser on post content.\n *\n * @since 5.0.0\n * @see parse_blocks()\n *\n * @param int|string|WP_Post|null $post Optional. Post content, post ID, or post object. Defaults to global $post.\n * @return bool Whether the post has blocks.\n */\nfunction has_blocks( $post = null ) {\n\tif ( ! is_string( $post ) ) {\n\t\t$wp_post = get_post( $post );\n\t\tif ( $wp_post instanceof WP_Post ) {\n\t\t\t$post = $wp_post->post_content;\n\t\t}\n\t}\n\n\treturn false !== strpos( (string) $post, '<!-- wp:' );\n}\n\n/**\n * Determine whether a $post or a string contains a specific block type.\n *\n * This test optimizes for performance rather than strict accuracy, detecting\n * the block type exists but not validating its structure. For strict accuracy,\n * you should use the block parser on post content.\n *\n * @since 5.0.0\n * @see parse_blocks()\n *\n * @param string                  $block_type Full Block type to look for.\n * @param int|string|WP_Post|null $post Optional. Post content, post ID, or post object. Defaults to global $post.\n * @return bool Whether the post content contains the specified block.\n */\nfunction has_block( $block_type, $post = null ) {\n\tif ( ! has_blocks( $post ) ) {\n\t\treturn false;\n\t}\n\n\tif ( ! is_string( $post ) ) {\n\t\t$wp_post = get_post( $post );\n\t\tif ( $wp_post instanceof WP_Post ) {\n\t\t\t$post = $wp_post->post_content;\n\t\t}\n\t}\n\n\treturn false !== strpos( $post, '<!-- wp:' . $block_type . ' ' );\n}\n\n/**\n * Returns an array of the names of all registered dynamic block types.\n *\n * @since 5.0.0\n *\n * @return array Array of dynamic block names.\n */\nfunction get_dynamic_block_names() {\n\t$dynamic_block_names = array();\n\n\t$block_types = WP_Block_Type_Registry::get_instance()->get_all_registered();\n\tforeach ( $block_types as $block_type ) {\n\t\tif ( $block_type->is_dynamic() ) {\n\t\t\t$dynamic_block_names[] = $block_type->name;\n\t\t}\n\t}\n\n\treturn $dynamic_block_names;\n}\n\n/**\n * Parses blocks out of a content string, and renders those appropriate for the excerpt.\n *\n * As the excerpt should be a small string of text relevant to the full post content,\n * this function renders the blocks that are most likely to contain such text.\n *\n * @since 5.0.0\n *\n * @param string $content The content to parse.\n * @return string The parsed and filtered content.\n */\nfunction excerpt_remove_blocks( $content ) {\n\t$allowed_inner_blocks = array(\n\t\t// Classic blocks have their blockName set to null.\n\t\tnull,\n\t\t'core/freeform',\n\t\t'core/heading',\n\t\t'core/html',\n\t\t'core/list',\n\t\t'core/media-text',\n\t\t'core/paragraph',\n\t\t'core/preformatted',\n\t\t'core/pullquote',\n\t\t'core/quote',\n\t\t'core/table',\n\t\t'core/verse',\n\t);\n\n\t$allowed_blocks = array_merge( $allowed_inner_blocks, array( 'core/columns' ) );\n\n\t/**\n\t * Filters the list of blocks that can contribute to the excerpt.\n\t *\n\t * If a dynamic block is added to this list, it must not generate another\n\t * excerpt, as this will cause an infinite loop to occur.\n\t *\n\t * @since 5.0.0\n\t *\n\t * @param array $allowed_blocks The list of allowed blocks.\n\t */\n\t$allowed_blocks = apply_filters( 'excerpt_allowed_blocks', $allowed_blocks );\n\t$blocks         = parse_blocks( $content );\n\t$output         = '';\n\n\tforeach ( $blocks as $block ) {\n\t\tif ( in_array( $block['blockName'], $allowed_blocks, true ) ) {\n\t\t\tif ( ! empty( $block['innerBlocks'] ) ) {\n\t\t\t\tif ( 'core/columns' === $block['blockName'] ) {\n\t\t\t\t\t$output .= _excerpt_render_inner_columns_blocks( $block, $allowed_inner_blocks );\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Skip the block if it has disallowed or nested inner blocks.\n\t\t\t\tforeach ( $block['innerBlocks'] as $inner_block ) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t! in_array( $inner_block['blockName'], $allowed_inner_blocks, true ) ||\n\t\t\t\t\t\t! empty( $inner_block['innerBlocks'] )\n\t\t\t\t\t) {\n\t\t\t\t\t\tcontinue 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$output .= render_block( $block );\n\t\t}\n\t}\n\n\treturn $output;\n}\n\n/**\n * Render inner blocks from the `core/columns` block for generating an excerpt.\n *\n * @since 5.2.0\n * @access private\n *\n * @param array $columns        The parsed columns block.\n * @param array $allowed_blocks The list of allowed inner blocks.\n * @return string The rendered inner blocks.\n */\nfunction _excerpt_render_inner_columns_blocks( $columns, $allowed_blocks ) {\n\t$output = '';\n\n\tforeach ( $columns['innerBlocks'] as $column ) {\n\t\tforeach ( $column['innerBlocks'] as $inner_block ) {\n\t\t\tif ( in_array( $inner_block['blockName'], $allowed_blocks, true ) && empty( $inner_block['innerBlocks'] ) ) {\n\t\t\t\t$output .= render_block( $inner_block );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $output;\n}\n\n/**\n * Renders a single block into a HTML string.\n *\n * @since 5.0.0\n *\n * @global WP_Post $post The post to edit.\n *\n * @param array $block A single parsed block object.\n * @return string String of rendered HTML.\n */\nfunction render_block( $block ) {\n\tglobal $post;\n\n\t/**\n\t * Allows render_block() to be shortcircuited, by returning a non-null value.\n\t *\n\t * @since 5.1.0\n\t *\n\t * @param string|null $pre_render The pre-rendered content. Default null.\n\t * @param array       $block      The block being rendered.\n\t */\n\t$pre_render = apply_filters( 'pre_render_block', null, $block );\n\tif ( ! is_null( $pre_render ) ) {\n\t\treturn $pre_render;\n\t}\n\n\t$source_block = $block;\n\n\t/**\n\t * Filters the block being rendered in render_block(), before it's processed.\n\t *\n\t * @since 5.1.0\n\t *\n\t * @param array $block        The block being rendered.\n\t * @param array $source_block An un-modified copy of $block, as it appeared in the source content.\n\t */\n\t$block = apply_filters( 'render_block_data', $block, $source_block );\n\n\t$block_type    = WP_Block_Type_Registry::get_instance()->get_registered( $block['blockName'] );\n\t$is_dynamic    = $block['blockName'] && null !== $block_type && $block_type->is_dynamic();\n\t$block_content = '';\n\t$index         = 0;\n\n\tforeach ( $block['innerContent'] as $chunk ) {\n\t\t$block_content .= is_string( $chunk ) ? $chunk : render_block( $block['innerBlocks'][ $index++ ] );\n\t}\n\n\tif ( ! is_array( $block['attrs'] ) ) {\n\t\t$block['attrs'] = array();\n\t}\n\n\tif ( $is_dynamic ) {\n\t\t$global_post   = $post;\n\t\t$block_content = $block_type->render( $block['attrs'], $block_content );\n\t\t$post          = $global_post;\n\t}\n\n\t/**\n\t * Filters the content of a single block.\n\t *\n\t * @since 5.0.0\n\t *\n\t * @param string $block_content The block content about to be appended.\n\t * @param array  $block         The full block, including name and attributes.\n\t */\n\treturn apply_filters( 'render_block', $block_content, $block );\n}\n\n/**\n * Parses blocks out of a content string.\n *\n * @since 5.0.0\n *\n * @param string $content Post content.\n * @return array Array of parsed block objects.\n */\nfunction parse_blocks( $content ) {\n\t/**\n\t * Filter to allow plugins to replace the server-side block parser\n\t *\n\t * @since 5.0.0\n\t *\n\t * @param string $parser_class Name of block parser class.\n\t */\n\t$parser_class = apply_filters( 'block_parser_class', 'WP_Block_Parser' );\n\n\t$parser = new $parser_class();\n\treturn $parser->parse( $content );\n}\n\n/**\n * Parses dynamic blocks out of `post_content` and re-renders them.\n *\n * @since 5.0.0\n *\n * @param string $content Post content.\n * @return string Updated post content.\n */\nfunction do_blocks( $content ) {\n\t$blocks = parse_blocks( $content );\n\t$output = '';\n\n\tforeach ( $blocks as $block ) {\n\t\t$output .= render_block( $block );\n\t}\n\n\t// If there are blocks in this content, we shouldn't run wpautop() on it later.\n\t$priority = has_filter( 'the_content', 'wpautop' );\n\tif ( false !== $priority && doing_filter( 'the_content' ) && has_blocks( $content ) ) {\n\t\tremove_filter( 'the_content', 'wpautop', $priority );\n\t\tadd_filter( 'the_content', '_restore_wpautop_hook', $priority + 1 );\n\t}\n\n\treturn $output;\n}\n\n/**\n * If do_blocks() needs to remove wpautop() from the `the_content` filter, this re-adds it afterwards,\n * for subsequent `the_content` usage.\n *\n * @access private\n *\n * @since 5.0.0\n *\n * @param string $content The post content running through this filter.\n * @return string The unmodified content.\n */\nfunction _restore_wpautop_hook( $content ) {\n\t$current_priority = has_filter( 'the_content', '_restore_wpautop_hook' );\n\n\tadd_filter( 'the_content', 'wpautop', $current_priority - 1 );\n\tremove_filter( 'the_content', '_restore_wpautop_hook', $current_priority );\n\n\treturn $content;\n}\n\n/**\n * Returns the current version of the block format that the content string is using.\n *\n * If the string doesn't contain blocks, it returns 0.\n *\n * @since 5.0.0\n *\n * @param string $content Content to test.\n * @return int The block format version is 1 if the content contains one or more blocks, 0 otherwise.\n */\nfunction block_version( $content ) {\n\treturn has_blocks( $content ) ? 1 : 0;\n}\n\n/**\n * Registers a new block style.\n *\n * @since 5.3.0\n *\n * @param string $block_name       Block type name including namespace.\n * @param array  $style_properties Array containing the properties of the style name, label, style (name of the stylesheet to be enqueued), inline_style (string containing the CSS to be added).\n *\n * @return boolean True if the block style was registered with success and false otherwise.\n */\nfunction register_block_style( $block_name, $style_properties ) {\n\treturn WP_Block_Styles_Registry::get_instance()->register( $block_name, $style_properties );\n}\n\n/**\n * Unregisters a block style.\n *\n * @since 5.3.0\n *\n * @param string $block_name       Block type name including namespace.\n * @param array  $block_style_name Block style name.\n *\n * @return boolean True if the block style was unregistered with success and false otherwise.\n */\nfunction unregister_block_style( $block_name, $block_style_name ) {\n\treturn WP_Block_Styles_Registry::get_instance()->unregister( $block_name, $block_style_name );\n}\n", "<?php\n/**\n * Sets up the default filters and actions for most\n * of the WordPress hooks.\n *\n * If you need to remove a default hook, this file will\n * give you the priority for which to use to remove the\n * hook.\n *\n * Not all of the default hooks are found in default-filters.php\n *\n * @package WordPress\n */\n\n// Strip, trim, kses, special chars for string saves\nforeach ( array( 'pre_term_name', 'pre_comment_author_name', 'pre_link_name', 'pre_link_target', 'pre_link_rel', 'pre_user_display_name', 'pre_user_first_name', 'pre_user_last_name', 'pre_user_nickname' ) as $filter ) {\n\tadd_filter( $filter, 'sanitize_text_field' );\n\tadd_filter( $filter, 'wp_filter_kses' );\n\tadd_filter( $filter, '_wp_specialchars', 30 );\n}\n\n// Strip, kses, special chars for string display\nforeach ( array( 'term_name', 'comment_author_name', 'link_name', 'link_target', 'link_rel', 'user_display_name', 'user_first_name', 'user_last_name', 'user_nickname' ) as $filter ) {\n\tif ( is_admin() ) {\n\t\t// These are expensive. Run only on admin pages for defense in depth.\n\t\tadd_filter( $filter, 'sanitize_text_field' );\n\t\tadd_filter( $filter, 'wp_kses_data' );\n\t}\n\tadd_filter( $filter, '_wp_specialchars', 30 );\n}\n\n// Kses only for textarea saves\nforeach ( array( 'pre_term_description', 'pre_link_description', 'pre_link_notes', 'pre_user_description' ) as $filter ) {\n\tadd_filter( $filter, 'wp_filter_kses' );\n}\n\n// Kses only for textarea admin displays\nif ( is_admin() ) {\n\tforeach ( array( 'term_description', 'link_description', 'link_notes', 'user_description' ) as $filter ) {\n\t\tadd_filter( $filter, 'wp_kses_data' );\n\t}\n\tadd_filter( 'comment_text', 'wp_kses_post' );\n}\n\n// Email saves\nforeach ( array( 'pre_comment_author_email', 'pre_user_email' ) as $filter ) {\n\tadd_filter( $filter, 'trim' );\n\tadd_filter( $filter, 'sanitize_email' );\n\tadd_filter( $filter, 'wp_filter_kses' );\n}\n\n// Email admin display\nforeach ( array( 'comment_author_email', 'user_email' ) as $filter ) {\n\tadd_filter( $filter, 'sanitize_email' );\n\tif ( is_admin() ) {\n\t\tadd_filter( $filter, 'wp_kses_data' );\n\t}\n}\n\n// Save URL\nforeach ( array(\n\t'pre_comment_author_url',\n\t'pre_user_url',\n\t'pre_link_url',\n\t'pre_link_image',\n\t'pre_link_rss',\n\t'pre_post_guid',\n) as $filter ) {\n\tadd_filter( $filter, 'wp_strip_all_tags' );\n\tadd_filter( $filter, 'esc_url_raw' );\n\tadd_filter( $filter, 'wp_filter_kses' );\n}\n\n// Display URL\nforeach ( array( 'user_url', 'link_url', 'link_image', 'link_rss', 'comment_url', 'post_guid' ) as $filter ) {\n\tif ( is_admin() ) {\n\t\tadd_filter( $filter, 'wp_strip_all_tags' );\n\t}\n\tadd_filter( $filter, 'esc_url' );\n\tif ( is_admin() ) {\n\t\tadd_filter( $filter, 'wp_kses_data' );\n\t}\n}\n\n// Slugs\nadd_filter( 'pre_term_slug', 'sanitize_title' );\nadd_filter( 'wp_insert_post_data', '_wp_customize_changeset_filter_insert_post_data', 10, 2 );\n\n// Keys\nforeach ( array( 'pre_post_type', 'pre_post_status', 'pre_post_comment_status', 'pre_post_ping_status' ) as $filter ) {\n\tadd_filter( $filter, 'sanitize_key' );\n}\n\n// Mime types\nadd_filter( 'pre_post_mime_type', 'sanitize_mime_type' );\nadd_filter( 'post_mime_type', 'sanitize_mime_type' );\n\n// Meta\nadd_filter( 'register_meta_args', '_wp_register_meta_args_whitelist', 10, 2 );\n\n// Post meta\nadd_action( 'added_post_meta', 'wp_cache_set_posts_last_changed' );\nadd_action( 'updated_post_meta', 'wp_cache_set_posts_last_changed' );\nadd_action( 'deleted_post_meta', 'wp_cache_set_posts_last_changed' );\n\n// Term meta\nadd_action( 'added_term_meta', 'wp_cache_set_terms_last_changed' );\nadd_action( 'updated_term_meta', 'wp_cache_set_terms_last_changed' );\nadd_action( 'deleted_term_meta', 'wp_cache_set_terms_last_changed' );\nadd_filter( 'get_term_metadata', 'wp_check_term_meta_support_prefilter' );\nadd_filter( 'add_term_metadata', 'wp_check_term_meta_support_prefilter' );\nadd_filter( 'update_term_metadata', 'wp_check_term_meta_support_prefilter' );\nadd_filter( 'delete_term_metadata', 'wp_check_term_meta_support_prefilter' );\nadd_filter( 'get_term_metadata_by_mid', 'wp_check_term_meta_support_prefilter' );\nadd_filter( 'update_term_metadata_by_mid', 'wp_check_term_meta_support_prefilter' );\nadd_filter( 'delete_term_metadata_by_mid', 'wp_check_term_meta_support_prefilter' );\nadd_filter( 'update_term_metadata_cache', 'wp_check_term_meta_support_prefilter' );\n\n// Comment meta\nadd_action( 'added_comment_meta', 'wp_cache_set_comments_last_changed' );\nadd_action( 'updated_comment_meta', 'wp_cache_set_comments_last_changed' );\nadd_action( 'deleted_comment_meta', 'wp_cache_set_comments_last_changed' );\n\n// Places to balance tags on input\nforeach ( array( 'content_save_pre', 'excerpt_save_pre', 'comment_save_pre', 'pre_comment_content' ) as $filter ) {\n\tadd_filter( $filter, 'convert_invalid_entities' );\n\tadd_filter( $filter, 'balanceTags', 50 );\n}\n\n// Add proper rel values for links with target.\nadd_action( 'init', 'wp_init_targeted_link_rel_filters' );\n\n// Format strings for display.\nforeach ( array( 'comment_author', 'term_name', 'link_name', 'link_description', 'link_notes', 'bloginfo', 'wp_title', 'widget_title' ) as $filter ) {\n\tadd_filter( $filter, 'wptexturize' );\n\tadd_filter( $filter, 'convert_chars' );\n\tadd_filter( $filter, 'esc_html' );\n}\n\n// Format WordPress\nforeach ( array( 'the_content', 'the_title', 'wp_title' ) as $filter ) {\n\tadd_filter( $filter, 'capital_P_dangit', 11 );\n}\nadd_filter( 'comment_text', 'capital_P_dangit', 31 );\n\n// Format titles\nforeach ( array( 'single_post_title', 'single_cat_title', 'single_tag_title', 'single_month_title', 'nav_menu_attr_title', 'nav_menu_description' ) as $filter ) {\n\tadd_filter( $filter, 'wptexturize' );\n\tadd_filter( $filter, 'strip_tags' );\n}\n\n// Format text area for display.\nforeach ( array( 'term_description', 'get_the_post_type_description' ) as $filter ) {\n\tadd_filter( $filter, 'wptexturize' );\n\tadd_filter( $filter, 'convert_chars' );\n\tadd_filter( $filter, 'wpautop' );\n\tadd_filter( $filter, 'shortcode_unautop' );\n}\n\n// Format for RSS\nadd_filter( 'term_name_rss', 'convert_chars' );\n\n// Pre save hierarchy\nadd_filter( 'wp_insert_post_parent', 'wp_check_post_hierarchy_for_loops', 10, 2 );\nadd_filter( 'wp_update_term_parent', 'wp_check_term_hierarchy_for_loops', 10, 3 );\n\n// Display filters\nadd_filter( 'the_title', 'wptexturize' );\nadd_filter( 'the_title', 'convert_chars' );\nadd_filter( 'the_title', 'trim' );\n\nadd_filter( 'the_content', 'do_blocks', 9 );\nadd_filter( 'the_content', 'wptexturize' );\nadd_filter( 'the_content', 'convert_smilies', 20 );\nadd_filter( 'the_content', 'wpautop' );\nadd_filter( 'the_content', 'shortcode_unautop' );\nadd_filter( 'the_content', 'prepend_attachment' );\nadd_filter( 'the_content', 'wp_make_content_images_responsive' );\n\nadd_filter( 'the_excerpt', 'wptexturize' );\nadd_filter( 'the_excerpt', 'convert_smilies' );\nadd_filter( 'the_excerpt', 'convert_chars' );\nadd_filter( 'the_excerpt', 'wpautop' );\nadd_filter( 'the_excerpt', 'shortcode_unautop' );\nadd_filter( 'get_the_excerpt', 'wp_trim_excerpt', 10, 2 );\n\nadd_filter( 'the_post_thumbnail_caption', 'wptexturize' );\nadd_filter( 'the_post_thumbnail_caption', 'convert_smilies' );\nadd_filter( 'the_post_thumbnail_caption', 'convert_chars' );\n\nadd_filter( 'comment_text', 'wptexturize' );\nadd_filter( 'comment_text', 'convert_chars' );\nadd_filter( 'comment_text', 'make_clickable', 9 );\nadd_filter( 'comment_text', 'force_balance_tags', 25 );\nadd_filter( 'comment_text', 'convert_smilies', 20 );\nadd_filter( 'comment_text', 'wpautop', 30 );\n\nadd_filter( 'comment_excerpt', 'convert_chars' );\n\nadd_filter( 'list_cats', 'wptexturize' );\n\nadd_filter( 'wp_sprintf', 'wp_sprintf_l', 10, 2 );\n\nadd_filter( 'widget_text', 'balanceTags' );\nadd_filter( 'widget_text_content', 'capital_P_dangit', 11 );\nadd_filter( 'widget_text_content', 'wptexturize' );\nadd_filter( 'widget_text_content', 'convert_smilies', 20 );\nadd_filter( 'widget_text_content', 'wpautop' );\nadd_filter( 'widget_text_content', 'shortcode_unautop' );\nadd_filter( 'widget_text_content', 'do_shortcode', 11 ); // Runs after wpautop(); note that $post global will be null when shortcodes run.\n\n// RSS filters\nadd_filter( 'the_title_rss', 'strip_tags' );\nadd_filter( 'the_title_rss', 'ent2ncr', 8 );\nadd_filter( 'the_title_rss', 'esc_html' );\nadd_filter( 'the_content_rss', 'ent2ncr', 8 );\nadd_filter( 'the_content_feed', 'wp_staticize_emoji' );\nadd_filter( 'the_content_feed', '_oembed_filter_feed_content' );\nadd_filter( 'the_excerpt_rss', 'convert_chars' );\nadd_filter( 'the_excerpt_rss', 'ent2ncr', 8 );\nadd_filter( 'comment_author_rss', 'ent2ncr', 8 );\nadd_filter( 'comment_text_rss', 'ent2ncr', 8 );\nadd_filter( 'comment_text_rss', 'esc_html' );\nadd_filter( 'comment_text_rss', 'wp_staticize_emoji' );\nadd_filter( 'bloginfo_rss', 'ent2ncr', 8 );\nadd_filter( 'the_author', 'ent2ncr', 8 );\nadd_filter( 'the_guid', 'esc_url' );\n\n// Email filters\nadd_filter( 'wp_mail', 'wp_staticize_emoji_for_email' );\n\n// Mark site as no longer fresh\nforeach ( array( 'publish_post', 'publish_page', 'wp_ajax_save-widget', 'wp_ajax_widgets-order', 'customize_save_after' ) as $action ) {\n\tadd_action( $action, '_delete_option_fresh_site', 0 );\n}\n\n// Misc filters\nadd_filter( 'option_ping_sites', 'privacy_ping_filter' );\nadd_filter( 'option_blog_charset', '_wp_specialchars' ); // IMPORTANT: This must not be wp_specialchars() or esc_html() or it'll cause an infinite loop\nadd_filter( 'option_blog_charset', '_canonical_charset' );\nadd_filter( 'option_home', '_config_wp_home' );\nadd_filter( 'option_siteurl', '_config_wp_siteurl' );\nadd_filter( 'tiny_mce_before_init', '_mce_set_direction' );\nadd_filter( 'teeny_mce_before_init', '_mce_set_direction' );\nadd_filter( 'pre_kses', 'wp_pre_kses_less_than' );\nadd_filter( 'sanitize_title', 'sanitize_title_with_dashes', 10, 3 );\nadd_action( 'check_comment_flood', 'check_comment_flood_db', 10, 4 );\nadd_filter( 'comment_flood_filter', 'wp_throttle_comment_flood', 10, 3 );\nadd_filter( 'pre_comment_content', 'wp_rel_ugc', 15 );\nadd_filter( 'comment_email', 'antispambot' );\nadd_filter( 'option_tag_base', '_wp_filter_taxonomy_base' );\nadd_filter( 'option_category_base', '_wp_filter_taxonomy_base' );\nadd_filter( 'the_posts', '_close_comments_for_old_posts', 10, 2 );\nadd_filter( 'comments_open', '_close_comments_for_old_post', 10, 2 );\nadd_filter( 'pings_open', '_close_comments_for_old_post', 10, 2 );\nadd_filter( 'editable_slug', 'urldecode' );\nadd_filter( 'editable_slug', 'esc_textarea' );\nadd_filter( 'nav_menu_meta_box_object', '_wp_nav_menu_meta_box_object' );\nadd_filter( 'pingback_ping_source_uri', 'pingback_ping_source_uri' );\nadd_filter( 'xmlrpc_pingback_error', 'xmlrpc_pingback_error' );\nadd_filter( 'title_save_pre', 'trim' );\n\nadd_action( 'transition_comment_status', '_clear_modified_cache_on_transition_comment_status', 10, 2 );\n\nadd_filter( 'http_request_host_is_external', 'allowed_http_request_hosts', 10, 2 );\n\n// REST API filters.\nadd_action( 'xmlrpc_rsd_apis', 'rest_output_rsd' );\nadd_action( 'wp_head', 'rest_output_link_wp_head', 10, 0 );\nadd_action( 'template_redirect', 'rest_output_link_header', 11, 0 );\nadd_action( 'auth_cookie_malformed', 'rest_cookie_collect_status' );\nadd_action( 'auth_cookie_expired', 'rest_cookie_collect_status' );\nadd_action( 'auth_cookie_bad_username', 'rest_cookie_collect_status' );\nadd_action( 'auth_cookie_bad_hash', 'rest_cookie_collect_status' );\nadd_action( 'auth_cookie_valid', 'rest_cookie_collect_status' );\nadd_filter( 'rest_authentication_errors', 'rest_cookie_check_errors', 100 );\n\n// Actions\nadd_action( 'wp_head', '_wp_render_title_tag', 1 );\nadd_action( 'wp_head', 'wp_enqueue_scripts', 1 );\nadd_action( 'wp_head', 'wp_resource_hints', 2 );\nadd_action( 'wp_head', 'feed_links', 2 );\nadd_action( 'wp_head', 'feed_links_extra', 3 );\nadd_action( 'wp_head', 'rsd_link' );\nadd_action( 'wp_head', 'wlwmanifest_link' );\nadd_action( 'wp_head', 'adjacent_posts_rel_link_wp_head', 10, 0 );\nadd_action( 'wp_head', 'locale_stylesheet' );\nadd_action( 'publish_future_post', 'check_and_publish_future_post', 10, 1 );\nadd_action( 'wp_head', 'noindex', 1 );\nadd_action( 'wp_head', 'print_emoji_detection_script', 7 );\nadd_action( 'wp_head', 'wp_print_styles', 8 );\nadd_action( 'wp_head', 'wp_print_head_scripts', 9 );\nadd_action( 'wp_head', 'wp_generator' );\nadd_action( 'wp_head', 'rel_canonical' );\nadd_action( 'wp_head', 'wp_shortlink_wp_head', 10, 0 );\nadd_action( 'wp_head', 'wp_custom_css_cb', 101 );\nadd_action( 'wp_head', 'wp_site_icon', 99 );\nadd_action( 'wp_footer', 'wp_print_footer_scripts', 20 );\nadd_action( 'template_redirect', 'wp_shortlink_header', 11, 0 );\nadd_action( 'wp_print_footer_scripts', '_wp_footer_scripts' );\nadd_action( 'init', 'check_theme_switched', 99 );\nadd_action( 'after_switch_theme', '_wp_menus_changed' );\nadd_action( 'after_switch_theme', '_wp_sidebars_changed' );\nadd_action( 'wp_print_styles', 'print_emoji_styles' );\n\nif ( isset( $_GET['replytocom'] ) ) {\n\tadd_action( 'wp_head', 'wp_no_robots' );\n}\n\n// Login actions\nadd_filter( 'login_head', 'wp_resource_hints', 8 );\nadd_action( 'login_head', 'wp_print_head_scripts', 9 );\nadd_action( 'login_head', 'print_admin_styles', 9 );\nadd_action( 'login_head', 'wp_site_icon', 99 );\nadd_action( 'login_footer', 'wp_print_footer_scripts', 20 );\nadd_action( 'login_init', 'send_frame_options_header', 10, 0 );\n\n// Feed Generator Tags\nforeach ( array( 'rss2_head', 'commentsrss2_head', 'rss_head', 'rdf_header', 'atom_head', 'comments_atom_head', 'opml_head', 'app_head' ) as $action ) {\n\tadd_action( $action, 'the_generator' );\n}\n\n// Feed Site Icon\nadd_action( 'atom_head', 'atom_site_icon' );\nadd_action( 'rss2_head', 'rss2_site_icon' );\n\n\n// WP Cron\nif ( ! defined( 'DOING_CRON' ) ) {\n\tadd_action( 'init', 'wp_cron' );\n}\n\n// 2 Actions 2 Furious\nadd_action( 'do_feed_rdf', 'do_feed_rdf', 10, 0 );\nadd_action( 'do_feed_rss', 'do_feed_rss', 10, 0 );\nadd_action( 'do_feed_rss2', 'do_feed_rss2', 10, 1 );\nadd_action( 'do_feed_atom', 'do_feed_atom', 10, 1 );\nadd_action( 'do_pings', 'do_all_pings', 10, 0 );\nadd_action( 'do_robots', 'do_robots' );\nadd_action( 'set_comment_cookies', 'wp_set_comment_cookies', 10, 3 );\nadd_action( 'sanitize_comment_cookies', 'sanitize_comment_cookies' );\nadd_action( 'admin_print_scripts', 'print_emoji_detection_script' );\nadd_action( 'admin_print_scripts', 'print_head_scripts', 20 );\nadd_action( 'admin_print_footer_scripts', '_wp_footer_scripts' );\nadd_action( 'admin_print_styles', 'print_emoji_styles' );\nadd_action( 'admin_print_styles', 'print_admin_styles', 20 );\nadd_action( 'init', 'smilies_init', 5 );\nadd_action( 'plugins_loaded', 'wp_maybe_load_widgets', 0 );\nadd_action( 'plugins_loaded', 'wp_maybe_load_embeds', 0 );\nadd_action( 'shutdown', 'wp_ob_end_flush_all', 1 );\n// Create a revision whenever a post is updated.\nadd_action( 'post_updated', 'wp_save_post_revision', 10, 1 );\nadd_action( 'publish_post', '_publish_post_hook', 5, 1 );\nadd_action( 'transition_post_status', '_transition_post_status', 5, 3 );\nadd_action( 'transition_post_status', '_update_term_count_on_transition_post_status', 10, 3 );\nadd_action( 'comment_form', 'wp_comment_form_unfiltered_html_nonce' );\nadd_action( 'admin_init', 'send_frame_options_header', 10, 0 );\nadd_action( 'welcome_panel', 'wp_welcome_panel' );\n\n// Privacy\nadd_action( 'user_request_action_confirmed', '_wp_privacy_account_request_confirmed' );\nadd_action( 'user_request_action_confirmed', '_wp_privacy_send_request_confirmation_notification', 12 ); // After request marked as completed.\nadd_filter( 'wp_privacy_personal_data_exporters', 'wp_register_comment_personal_data_exporter' );\nadd_filter( 'wp_privacy_personal_data_exporters', 'wp_register_media_personal_data_exporter' );\nadd_filter( 'wp_privacy_personal_data_exporters', 'wp_register_user_personal_data_exporter', 1 );\nadd_filter( 'wp_privacy_personal_data_erasers', 'wp_register_comment_personal_data_eraser' );\nadd_action( 'init', 'wp_schedule_delete_old_privacy_export_files' );\nadd_action( 'wp_privacy_delete_old_export_files', 'wp_privacy_delete_old_export_files' );\n\n// Cron tasks\nadd_action( 'wp_scheduled_delete', 'wp_scheduled_delete' );\nadd_action( 'wp_scheduled_auto_draft_delete', 'wp_delete_auto_drafts' );\nadd_action( 'importer_scheduled_cleanup', 'wp_delete_attachment' );\nadd_action( 'upgrader_scheduled_cleanup', 'wp_delete_attachment' );\nadd_action( 'delete_expired_transients', 'delete_expired_transients' );\n\n// Navigation menu actions\nadd_action( 'delete_post', '_wp_delete_post_menu_item' );\nadd_action( 'delete_term', '_wp_delete_tax_menu_item', 10, 3 );\nadd_action( 'transition_post_status', '_wp_auto_add_pages_to_menu', 10, 3 );\nadd_action( 'delete_post', '_wp_delete_customize_changeset_dependent_auto_drafts' );\n\n// Post Thumbnail CSS class filtering\nadd_action( 'begin_fetch_post_thumbnail_html', '_wp_post_thumbnail_class_filter_add' );\nadd_action( 'end_fetch_post_thumbnail_html', '_wp_post_thumbnail_class_filter_remove' );\n\n// Redirect Old Slugs\nadd_action( 'template_redirect', 'wp_old_slug_redirect' );\nadd_action( 'post_updated', 'wp_check_for_changed_slugs', 12, 3 );\nadd_action( 'attachment_updated', 'wp_check_for_changed_slugs', 12, 3 );\n\n// Redirect Old Dates\nadd_action( 'post_updated', 'wp_check_for_changed_dates', 12, 3 );\nadd_action( 'attachment_updated', 'wp_check_for_changed_dates', 12, 3 );\n\n// Nonce check for Post Previews\nadd_action( 'init', '_show_post_preview' );\n\n// Output JS to reset window.name for previews\nadd_action( 'wp_head', 'wp_post_preview_js', 1 );\n\n// Timezone\nadd_filter( 'pre_option_gmt_offset', 'wp_timezone_override_offset' );\n\n// Admin Color Schemes\nadd_action( 'admin_init', 'register_admin_color_schemes', 1 );\nadd_action( 'admin_color_scheme_picker', 'admin_color_scheme_picker' );\n\n// If the upgrade hasn't run yet, assume link manager is used.\nadd_filter( 'default_option_link_manager_enabled', '__return_true' );\n\n// This option no longer exists; tell plugins we always support auto-embedding.\nadd_filter( 'pre_option_embed_autourls', '__return_true' );\n\n// Default settings for heartbeat\nadd_filter( 'heartbeat_settings', 'wp_heartbeat_settings' );\n\n// Check if the user is logged out\nadd_action( 'admin_enqueue_scripts', 'wp_auth_check_load' );\nadd_filter( 'heartbeat_send', 'wp_auth_check' );\nadd_filter( 'heartbeat_nopriv_send', 'wp_auth_check' );\n\n// Default authentication filters\nadd_filter( 'authenticate', 'wp_authenticate_username_password', 20, 3 );\nadd_filter( 'authenticate', 'wp_authenticate_email_password', 20, 3 );\nadd_filter( 'authenticate', 'wp_authenticate_spam_check', 99 );\nadd_filter( 'determine_current_user', 'wp_validate_auth_cookie' );\nadd_filter( 'determine_current_user', 'wp_validate_logged_in_cookie', 20 );\n\n// Split term updates.\nadd_action( 'admin_init', '_wp_check_for_scheduled_split_terms' );\nadd_action( 'split_shared_term', '_wp_check_split_default_terms', 10, 4 );\nadd_action( 'split_shared_term', '_wp_check_split_terms_in_menus', 10, 4 );\nadd_action( 'split_shared_term', '_wp_check_split_nav_menu_terms', 10, 4 );\nadd_action( 'wp_split_shared_term_batch', '_wp_batch_split_terms' );\n\n// Email notifications.\nadd_action( 'comment_post', 'wp_new_comment_notify_moderator' );\nadd_action( 'comment_post', 'wp_new_comment_notify_postauthor' );\nadd_action( 'after_password_reset', 'wp_password_change_notification' );\nadd_action( 'register_new_user', 'wp_send_new_user_notifications' );\nadd_action( 'edit_user_created_user', 'wp_send_new_user_notifications', 10, 2 );\n\n// REST API actions.\nadd_action( 'init', 'rest_api_init' );\nadd_action( 'rest_api_init', 'rest_api_default_filters', 10, 1 );\nadd_action( 'rest_api_init', 'register_initial_settings', 10 );\nadd_action( 'rest_api_init', 'create_initial_rest_routes', 99 );\nadd_action( 'parse_request', 'rest_api_loaded' );\n\n/**\n * Filters formerly mixed into wp-includes\n */\n// Theme\nadd_action( 'wp_loaded', '_custom_header_background_just_in_time' );\nadd_action( 'wp_head', '_custom_logo_header_styles' );\nadd_action( 'plugins_loaded', '_wp_customize_include' );\nadd_action( 'transition_post_status', '_wp_customize_publish_changeset', 10, 3 );\nadd_action( 'admin_enqueue_scripts', '_wp_customize_loader_settings' );\nadd_action( 'delete_attachment', '_delete_attachment_theme_mod' );\nadd_action( 'transition_post_status', '_wp_keep_alive_customize_changeset_dependent_auto_drafts', 20, 3 );\n\n// Calendar widget cache\nadd_action( 'save_post', 'delete_get_calendar_cache' );\nadd_action( 'delete_post', 'delete_get_calendar_cache' );\nadd_action( 'update_option_start_of_week', 'delete_get_calendar_cache' );\nadd_action( 'update_option_gmt_offset', 'delete_get_calendar_cache' );\n\n// Author\nadd_action( 'transition_post_status', '__clear_multi_author_cache' );\n\n// Post\nadd_action( 'init', 'create_initial_post_types', 0 ); // highest priority\nadd_action( 'admin_menu', '_add_post_type_submenus' );\nadd_action( 'before_delete_post', '_reset_front_page_settings_for_post' );\nadd_action( 'wp_trash_post', '_reset_front_page_settings_for_post' );\nadd_action( 'change_locale', 'create_initial_post_types' );\n\n// Post Formats\nadd_filter( 'request', '_post_format_request' );\nadd_filter( 'term_link', '_post_format_link', 10, 3 );\nadd_filter( 'get_post_format', '_post_format_get_term' );\nadd_filter( 'get_terms', '_post_format_get_terms', 10, 3 );\nadd_filter( 'wp_get_object_terms', '_post_format_wp_get_object_terms' );\n\n// KSES\nadd_action( 'init', 'kses_init' );\nadd_action( 'set_current_user', 'kses_init' );\n\n// Script Loader\nadd_action( 'wp_default_scripts', 'wp_default_scripts' );\nadd_action( 'wp_default_scripts', 'wp_default_packages' );\n\nadd_action( 'wp_enqueue_scripts', 'wp_localize_jquery_ui_datepicker', 1000 );\nadd_action( 'admin_enqueue_scripts', 'wp_localize_jquery_ui_datepicker', 1000 );\nadd_action( 'wp_enqueue_scripts', 'wp_common_block_scripts_and_styles' );\nadd_action( 'admin_enqueue_scripts', 'wp_common_block_scripts_and_styles' );\nadd_action( 'enqueue_block_assets', 'wp_enqueue_registered_block_scripts_and_styles' );\nadd_action( 'enqueue_block_editor_assets', 'wp_enqueue_registered_block_scripts_and_styles' );\nadd_action( 'admin_print_scripts-index.php', 'wp_localize_community_events' );\nadd_filter( 'wp_print_scripts', 'wp_just_in_time_script_localization' );\nadd_filter( 'print_scripts_array', 'wp_prototype_before_jquery' );\nadd_filter( 'customize_controls_print_styles', 'wp_resource_hints', 1 );\nadd_action( 'enqueue_block_assets', 'enqueue_block_styles_assets', 30 );\nadd_action( 'enqueue_block_editor_assets', 'enqueue_editor_block_styles_assets' );\n\nadd_action( 'wp_default_styles', 'wp_default_styles' );\nadd_filter( 'style_loader_src', 'wp_style_loader_src', 10, 2 );\n\n// Taxonomy\nadd_action( 'init', 'create_initial_taxonomies', 0 ); // highest priority\nadd_action( 'change_locale', 'create_initial_taxonomies' );\n\n// Canonical\nadd_action( 'template_redirect', 'redirect_canonical' );\nadd_action( 'template_redirect', 'wp_redirect_admin_locations', 1000 );\n\n// Shortcodes\nadd_filter( 'the_content', 'do_shortcode', 11 ); // AFTER wpautop()\n\n// Media\nadd_action( 'wp_playlist_scripts', 'wp_playlist_scripts' );\nadd_action( 'customize_controls_enqueue_scripts', 'wp_plupload_default_settings' );\nadd_action( 'plugins_loaded', '_wp_add_additional_image_sizes', 0 );\n\n// Nav menu\nadd_filter( 'nav_menu_item_id', '_nav_menu_item_id_use_once', 10, 2 );\n\n// Widgets\nadd_action( 'init', 'wp_widgets_init', 1 );\n\n// Admin Bar\n// Don't remove. Wrong way to disable.\nadd_action( 'template_redirect', '_wp_admin_bar_init', 0 );\nadd_action( 'admin_init', '_wp_admin_bar_init' );\nadd_action( 'before_signup_header', '_wp_admin_bar_init' );\nadd_action( 'activate_header', '_wp_admin_bar_init' );\nadd_action( 'wp_footer', 'wp_admin_bar_render', 1000 );\nadd_action( 'in_admin_header', 'wp_admin_bar_render', 0 );\n\n// Former admin filters that can also be hooked on the front end\nadd_action( 'media_buttons', 'media_buttons' );\nadd_filter( 'image_send_to_editor', 'image_add_caption', 20, 8 );\nadd_filter( 'media_send_to_editor', 'image_media_send_to_editor', 10, 3 );\n\n// Embeds\nadd_action( 'rest_api_init', 'wp_oembed_register_route' );\nadd_filter( 'rest_pre_serve_request', '_oembed_rest_pre_serve_request', 10, 4 );\n\nadd_action( 'wp_head', 'wp_oembed_add_discovery_links' );\nadd_action( 'wp_head', 'wp_oembed_add_host_js' );\n\nadd_action( 'embed_head', 'enqueue_embed_scripts', 1 );\nadd_action( 'embed_head', 'print_emoji_detection_script' );\nadd_action( 'embed_head', 'print_embed_styles' );\nadd_action( 'embed_head', 'wp_print_head_scripts', 20 );\nadd_action( 'embed_head', 'wp_print_styles', 20 );\nadd_action( 'embed_head', 'wp_no_robots' );\nadd_action( 'embed_head', 'rel_canonical' );\nadd_action( 'embed_head', 'locale_stylesheet', 30 );\n\nadd_action( 'embed_content_meta', 'print_embed_comments_button' );\nadd_action( 'embed_content_meta', 'print_embed_sharing_button' );\n\nadd_action( 'embed_footer', 'print_embed_sharing_dialog' );\nadd_action( 'embed_footer', 'print_embed_scripts' );\nadd_action( 'embed_footer', 'wp_print_footer_scripts', 20 );\n\nadd_filter( 'excerpt_more', 'wp_embed_excerpt_more', 20 );\nadd_filter( 'the_excerpt_embed', 'wptexturize' );\nadd_filter( 'the_excerpt_embed', 'convert_chars' );\nadd_filter( 'the_excerpt_embed', 'wpautop' );\nadd_filter( 'the_excerpt_embed', 'shortcode_unautop' );\nadd_filter( 'the_excerpt_embed', 'wp_embed_excerpt_attachment' );\n\nadd_filter( 'oembed_dataparse', 'wp_filter_oembed_result', 10, 3 );\nadd_filter( 'oembed_dataparse', 'wp_filter_oembed_iframe_title_attribute', 20, 3 );\nadd_filter( 'oembed_response_data', 'get_oembed_response_data_rich', 10, 4 );\nadd_filter( 'pre_oembed_result', 'wp_filter_pre_oembed_result', 10, 3 );\n\n// Capabilities\nadd_filter( 'user_has_cap', 'wp_maybe_grant_install_languages_cap', 1 );\nadd_filter( 'user_has_cap', 'wp_maybe_grant_resume_extensions_caps', 1 );\nadd_filter( 'user_has_cap', 'wp_maybe_grant_site_health_caps', 1, 4 );\n\nunset( $filter, $action );\n", "<?php\n/**\n * Main WordPress Formatting API.\n *\n * Handles many functions for formatting output.\n *\n * @package WordPress\n */\n\n/**\n * Replaces common plain text characters into formatted entities\n *\n * As an example,\n *\n *     'cause today's effort makes it worth tomorrow's \"holiday\" ...\n *\n * Becomes:\n *\n *     &#8217;cause today&#8217;s effort makes it worth tomorrow&#8217;s &#8220;holiday&#8221; &#8230;\n *\n * Code within certain html blocks are skipped.\n *\n * Do not use this function before the {@see 'init'} action hook; everything will break.\n *\n * @since 0.71\n *\n * @global array $wp_cockneyreplace Array of formatted entities for certain common phrases\n * @global array $shortcode_tags\n * @staticvar array  $static_characters\n * @staticvar array  $static_replacements\n * @staticvar array  $dynamic_characters\n * @staticvar array  $dynamic_replacements\n * @staticvar array  $default_no_texturize_tags\n * @staticvar array  $default_no_texturize_shortcodes\n * @staticvar bool   $run_texturize\n * @staticvar string $apos\n * @staticvar string $prime\n * @staticvar string $double_prime\n * @staticvar string $opening_quote\n * @staticvar string $closing_quote\n * @staticvar string $opening_single_quote\n * @staticvar string $closing_single_quote\n * @staticvar string $open_q_flag\n * @staticvar string $open_sq_flag\n * @staticvar string $apos_flag\n *\n * @param string $text The text to be formatted\n * @param bool   $reset Set to true for unit testing. Translated patterns will reset.\n * @return string The string replaced with html entities\n */\nfunction wptexturize( $text, $reset = false ) {\n\tglobal $wp_cockneyreplace, $shortcode_tags;\n\tstatic $static_characters            = null,\n\t\t$static_replacements             = null,\n\t\t$dynamic_characters              = null,\n\t\t$dynamic_replacements            = null,\n\t\t$default_no_texturize_tags       = null,\n\t\t$default_no_texturize_shortcodes = null,\n\t\t$run_texturize                   = true,\n\t\t$apos                            = null,\n\t\t$prime                           = null,\n\t\t$double_prime                    = null,\n\t\t$opening_quote                   = null,\n\t\t$closing_quote                   = null,\n\t\t$opening_single_quote            = null,\n\t\t$closing_single_quote            = null,\n\t\t$open_q_flag                     = '<!--oq-->',\n\t\t$open_sq_flag                    = '<!--osq-->',\n\t\t$apos_flag                       = '<!--apos-->';\n\n\t// If there's nothing to do, just stop.\n\tif ( empty( $text ) || false === $run_texturize ) {\n\t\treturn $text;\n\t}\n\n\t// Set up static variables. Run once only.\n\tif ( $reset || ! isset( $static_characters ) ) {\n\t\t/**\n\t\t * Filters whether to skip running wptexturize().\n\t\t *\n\t\t * Passing false to the filter will effectively short-circuit wptexturize().\n\t\t * returning the original text passed to the function instead.\n\t\t *\n\t\t * The filter runs only once, the first time wptexturize() is called.\n\t\t *\n\t\t * @since 4.0.0\n\t\t *\n\t\t * @see wptexturize()\n\t\t *\n\t\t * @param bool $run_texturize Whether to short-circuit wptexturize().\n\t\t */\n\t\t$run_texturize = apply_filters( 'run_wptexturize', $run_texturize );\n\t\tif ( false === $run_texturize ) {\n\t\t\treturn $text;\n\t\t}\n\n\t\t/* translators: Opening curly double quote. */\n\t\t$opening_quote = _x( '&#8220;', 'opening curly double quote' );\n\t\t/* translators: Closing curly double quote. */\n\t\t$closing_quote = _x( '&#8221;', 'closing curly double quote' );\n\n\t\t/* translators: Apostrophe, for example in 'cause or can't. */\n\t\t$apos = _x( '&#8217;', 'apostrophe' );\n\n\t\t/* translators: Prime, for example in 9' (nine feet). */\n\t\t$prime = _x( '&#8242;', 'prime' );\n\t\t/* translators: Double prime, for example in 9\" (nine inches). */\n\t\t$double_prime = _x( '&#8243;', 'double prime' );\n\n\t\t/* translators: Opening curly single quote. */\n\t\t$opening_single_quote = _x( '&#8216;', 'opening curly single quote' );\n\t\t/* translators: Closing curly single quote. */\n\t\t$closing_single_quote = _x( '&#8217;', 'closing curly single quote' );\n\n\t\t/* translators: En dash. */\n\t\t$en_dash = _x( '&#8211;', 'en dash' );\n\t\t/* translators: Em dash. */\n\t\t$em_dash = _x( '&#8212;', 'em dash' );\n\n\t\t$default_no_texturize_tags       = array( 'pre', 'code', 'kbd', 'style', 'script', 'tt' );\n\t\t$default_no_texturize_shortcodes = array( 'code' );\n\n\t\t// if a plugin has provided an autocorrect array, use it\n\t\tif ( isset( $wp_cockneyreplace ) ) {\n\t\t\t$cockney        = array_keys( $wp_cockneyreplace );\n\t\t\t$cockneyreplace = array_values( $wp_cockneyreplace );\n\t\t} else {\n\t\t\t/*\n\t\t\t * translators: This is a comma-separated list of words that defy the syntax of quotations in normal use,\n\t\t\t * for example...  'We do not have enough words yet' ... is a typical quoted phrase.  But when we write\n\t\t\t * lines of code 'til we have enough of 'em, then we need to insert apostrophes instead of quotes.\n\t\t\t */\n\t\t\t$cockney = explode(\n\t\t\t\t',',\n\t\t\t\t_x(\n\t\t\t\t\t\"'tain't,'twere,'twas,'tis,'twill,'til,'bout,'nuff,'round,'cause,'em\",\n\t\t\t\t\t'Comma-separated list of words to texturize in your language'\n\t\t\t\t)\n\t\t\t);\n\n\t\t\t$cockneyreplace = explode(\n\t\t\t\t',',\n\t\t\t\t_x(\n\t\t\t\t\t'&#8217;tain&#8217;t,&#8217;twere,&#8217;twas,&#8217;tis,&#8217;twill,&#8217;til,&#8217;bout,&#8217;nuff,&#8217;round,&#8217;cause,&#8217;em',\n\t\t\t\t\t'Comma-separated list of replacement words in your language'\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t$static_characters   = array_merge( array( '...', '``', '\\'\\'', ' (tm)' ), $cockney );\n\t\t$static_replacements = array_merge( array( '&#8230;', $opening_quote, $closing_quote, ' &#8482;' ), $cockneyreplace );\n\n\t\t// Pattern-based replacements of characters.\n\t\t// Sort the remaining patterns into several arrays for performance tuning.\n\t\t$dynamic_characters   = array(\n\t\t\t'apos'  => array(),\n\t\t\t'quote' => array(),\n\t\t\t'dash'  => array(),\n\t\t);\n\t\t$dynamic_replacements = array(\n\t\t\t'apos'  => array(),\n\t\t\t'quote' => array(),\n\t\t\t'dash'  => array(),\n\t\t);\n\t\t$dynamic              = array();\n\t\t$spaces               = wp_spaces_regexp();\n\n\t\t// '99' and '99\" are ambiguous among other patterns; assume it's an abbreviated year at the end of a quotation.\n\t\tif ( \"'\" !== $apos || \"'\" !== $closing_single_quote ) {\n\t\t\t$dynamic[ '/\\'(\\d\\d)\\'(?=\\Z|[.,:;!?)}\\-\\]]|&gt;|' . $spaces . ')/' ] = $apos_flag . '$1' . $closing_single_quote;\n\t\t}\n\t\tif ( \"'\" !== $apos || '\"' !== $closing_quote ) {\n\t\t\t$dynamic[ '/\\'(\\d\\d)\"(?=\\Z|[.,:;!?)}\\-\\]]|&gt;|' . $spaces . ')/' ] = $apos_flag . '$1' . $closing_quote;\n\t\t}\n\n\t\t// '99 '99s '99's (apostrophe)  But never '9 or '99% or '999 or '99.0.\n\t\tif ( \"'\" !== $apos ) {\n\t\t\t$dynamic['/\\'(?=\\d\\d(?:\\Z|(?![%\\d]|[.,]\\d)))/'] = $apos_flag;\n\t\t}\n\n\t\t// Quoted Numbers like '0.42'\n\t\tif ( \"'\" !== $opening_single_quote && \"'\" !== $closing_single_quote ) {\n\t\t\t$dynamic[ '/(?<=\\A|' . $spaces . ')\\'(\\d[.,\\d]*)\\'/' ] = $open_sq_flag . '$1' . $closing_single_quote;\n\t\t}\n\n\t\t// Single quote at start, or preceded by (, {, <, [, \", -, or spaces.\n\t\tif ( \"'\" !== $opening_single_quote ) {\n\t\t\t$dynamic[ '/(?<=\\A|[([{\"\\-]|&lt;|' . $spaces . ')\\'/' ] = $open_sq_flag;\n\t\t}\n\n\t\t// Apostrophe in a word.  No spaces, double apostrophes, or other punctuation.\n\t\tif ( \"'\" !== $apos ) {\n\t\t\t$dynamic[ '/(?<!' . $spaces . ')\\'(?!\\Z|[.,:;!?\"\\'(){}[\\]\\-]|&[lg]t;|' . $spaces . ')/' ] = $apos_flag;\n\t\t}\n\n\t\t$dynamic_characters['apos']   = array_keys( $dynamic );\n\t\t$dynamic_replacements['apos'] = array_values( $dynamic );\n\t\t$dynamic                      = array();\n\n\t\t// Quoted Numbers like \"42\"\n\t\tif ( '\"' !== $opening_quote && '\"' !== $closing_quote ) {\n\t\t\t$dynamic[ '/(?<=\\A|' . $spaces . ')\"(\\d[.,\\d]*)\"/' ] = $open_q_flag . '$1' . $closing_quote;\n\t\t}\n\n\t\t// Double quote at start, or preceded by (, {, <, [, -, or spaces, and not followed by spaces.\n\t\tif ( '\"' !== $opening_quote ) {\n\t\t\t$dynamic[ '/(?<=\\A|[([{\\-]|&lt;|' . $spaces . ')\"(?!' . $spaces . ')/' ] = $open_q_flag;\n\t\t}\n\n\t\t$dynamic_characters['quote']   = array_keys( $dynamic );\n\t\t$dynamic_replacements['quote'] = array_values( $dynamic );\n\t\t$dynamic                       = array();\n\n\t\t// Dashes and spaces\n\t\t$dynamic['/---/'] = $em_dash;\n\t\t$dynamic[ '/(?<=^|' . $spaces . ')--(?=$|' . $spaces . ')/' ] = $em_dash;\n\t\t$dynamic['/(?<!xn)--/']                                       = $en_dash;\n\t\t$dynamic[ '/(?<=^|' . $spaces . ')-(?=$|' . $spaces . ')/' ]  = $en_dash;\n\n\t\t$dynamic_characters['dash']   = array_keys( $dynamic );\n\t\t$dynamic_replacements['dash'] = array_values( $dynamic );\n\t}\n\n\t// Must do this every time in case plugins use these filters in a context sensitive manner\n\t/**\n\t * Filters the list of HTML elements not to texturize.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param array $default_no_texturize_tags An array of HTML element names.\n\t */\n\t$no_texturize_tags = apply_filters( 'no_texturize_tags', $default_no_texturize_tags );\n\t/**\n\t * Filters the list of shortcodes not to texturize.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param array $default_no_texturize_shortcodes An array of shortcode names.\n\t */\n\t$no_texturize_shortcodes = apply_filters( 'no_texturize_shortcodes', $default_no_texturize_shortcodes );\n\n\t$no_texturize_tags_stack       = array();\n\t$no_texturize_shortcodes_stack = array();\n\n\t// Look for shortcodes and HTML elements.\n\n\tpreg_match_all( '@\\[/?([^<>&/\\[\\]\\x00-\\x20=]++)@', $text, $matches );\n\t$tagnames         = array_intersect( array_keys( $shortcode_tags ), $matches[1] );\n\t$found_shortcodes = ! empty( $tagnames );\n\t$shortcode_regex  = $found_shortcodes ? _get_wptexturize_shortcode_regex( $tagnames ) : '';\n\t$regex            = _get_wptexturize_split_regex( $shortcode_regex );\n\n\t$textarr = preg_split( $regex, $text, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY );\n\n\tforeach ( $textarr as &$curl ) {\n\t\t// Only call _wptexturize_pushpop_element if $curl is a delimiter.\n\t\t$first = $curl[0];\n\t\tif ( '<' === $first ) {\n\t\t\tif ( '<!--' === substr( $curl, 0, 4 ) ) {\n\t\t\t\t// This is an HTML comment delimiter.\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\t// This is an HTML element delimiter.\n\n\t\t\t\t// Replace each & with &#038; unless it already looks like an entity.\n\t\t\t\t$curl = preg_replace( '/&(?!#(?:\\d+|x[a-f0-9]+);|[a-z1-4]{1,8};)/i', '&#038;', $curl );\n\n\t\t\t\t_wptexturize_pushpop_element( $curl, $no_texturize_tags_stack, $no_texturize_tags );\n\t\t\t}\n\t\t} elseif ( '' === trim( $curl ) ) {\n\t\t\t// This is a newline between delimiters.  Performance improves when we check this.\n\t\t\tcontinue;\n\n\t\t} elseif ( '[' === $first && $found_shortcodes && 1 === preg_match( '/^' . $shortcode_regex . '$/', $curl ) ) {\n\t\t\t// This is a shortcode delimiter.\n\n\t\t\tif ( '[[' !== substr( $curl, 0, 2 ) && ']]' !== substr( $curl, -2 ) ) {\n\t\t\t\t// Looks like a normal shortcode.\n\t\t\t\t_wptexturize_pushpop_element( $curl, $no_texturize_shortcodes_stack, $no_texturize_shortcodes );\n\t\t\t} else {\n\t\t\t\t// Looks like an escaped shortcode.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t} elseif ( empty( $no_texturize_shortcodes_stack ) && empty( $no_texturize_tags_stack ) ) {\n\t\t\t// This is neither a delimiter, nor is this content inside of no_texturize pairs.  Do texturize.\n\n\t\t\t$curl = str_replace( $static_characters, $static_replacements, $curl );\n\n\t\t\tif ( false !== strpos( $curl, \"'\" ) ) {\n\t\t\t\t$curl = preg_replace( $dynamic_characters['apos'], $dynamic_replacements['apos'], $curl );\n\t\t\t\t$curl = wptexturize_primes( $curl, \"'\", $prime, $open_sq_flag, $closing_single_quote );\n\t\t\t\t$curl = str_replace( $apos_flag, $apos, $curl );\n\t\t\t\t$curl = str_replace( $open_sq_flag, $opening_single_quote, $curl );\n\t\t\t}\n\t\t\tif ( false !== strpos( $curl, '\"' ) ) {\n\t\t\t\t$curl = preg_replace( $dynamic_characters['quote'], $dynamic_replacements['quote'], $curl );\n\t\t\t\t$curl = wptexturize_primes( $curl, '\"', $double_prime, $open_q_flag, $closing_quote );\n\t\t\t\t$curl = str_replace( $open_q_flag, $opening_quote, $curl );\n\t\t\t}\n\t\t\tif ( false !== strpos( $curl, '-' ) ) {\n\t\t\t\t$curl = preg_replace( $dynamic_characters['dash'], $dynamic_replacements['dash'], $curl );\n\t\t\t}\n\n\t\t\t// 9x9 (times), but never 0x9999\n\t\t\tif ( 1 === preg_match( '/(?<=\\d)x\\d/', $curl ) ) {\n\t\t\t\t// Searching for a digit is 10 times more expensive than for the x, so we avoid doing this one!\n\t\t\t\t$curl = preg_replace( '/\\b(\\d(?(?<=0)[\\d\\.,]+|[\\d\\.,]*))x(\\d[\\d\\.,]*)\\b/', '$1&#215;$2', $curl );\n\t\t\t}\n\n\t\t\t// Replace each & with &#038; unless it already looks like an entity.\n\t\t\t$curl = preg_replace( '/&(?!#(?:\\d+|x[a-f0-9]+);|[a-z1-4]{1,8};)/i', '&#038;', $curl );\n\t\t}\n\t}\n\n\treturn implode( '', $textarr );\n}\n\n/**\n * Implements a logic tree to determine whether or not \"7'.\" represents seven feet,\n * then converts the special char into either a prime char or a closing quote char.\n *\n * @since 4.3.0\n *\n * @param string $haystack    The plain text to be searched.\n * @param string $needle      The character to search for such as ' or \".\n * @param string $prime       The prime char to use for replacement.\n * @param string $open_quote  The opening quote char. Opening quote replacement must be\n *                            accomplished already.\n * @param string $close_quote The closing quote char to use for replacement.\n * @return string The $haystack value after primes and quotes replacements.\n */\nfunction wptexturize_primes( $haystack, $needle, $prime, $open_quote, $close_quote ) {\n\t$spaces           = wp_spaces_regexp();\n\t$flag             = '<!--wp-prime-or-quote-->';\n\t$quote_pattern    = \"/$needle(?=\\\\Z|[.,:;!?)}\\\\-\\\\]]|&gt;|\" . $spaces . ')/';\n\t$prime_pattern    = \"/(?<=\\\\d)$needle/\";\n\t$flag_after_digit = \"/(?<=\\\\d)$flag/\";\n\t$flag_no_digit    = \"/(?<!\\\\d)$flag/\";\n\n\t$sentences = explode( $open_quote, $haystack );\n\n\tforeach ( $sentences as $key => &$sentence ) {\n\t\tif ( false === strpos( $sentence, $needle ) ) {\n\t\t\tcontinue;\n\t\t} elseif ( 0 !== $key && 0 === substr_count( $sentence, $close_quote ) ) {\n\t\t\t$sentence = preg_replace( $quote_pattern, $flag, $sentence, -1, $count );\n\t\t\tif ( $count > 1 ) {\n\t\t\t\t// This sentence appears to have multiple closing quotes.  Attempt Vulcan logic.\n\t\t\t\t$sentence = preg_replace( $flag_no_digit, $close_quote, $sentence, -1, $count2 );\n\t\t\t\tif ( 0 === $count2 ) {\n\t\t\t\t\t// Try looking for a quote followed by a period.\n\t\t\t\t\t$count2 = substr_count( $sentence, \"$flag.\" );\n\t\t\t\t\tif ( $count2 > 0 ) {\n\t\t\t\t\t\t// Assume the rightmost quote-period match is the end of quotation.\n\t\t\t\t\t\t$pos = strrpos( $sentence, \"$flag.\" );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// When all else fails, make the rightmost candidate a closing quote.\n\t\t\t\t\t\t// This is most likely to be problematic in the context of bug #18549.\n\t\t\t\t\t\t$pos = strrpos( $sentence, $flag );\n\t\t\t\t\t}\n\t\t\t\t\t$sentence = substr_replace( $sentence, $close_quote, $pos, strlen( $flag ) );\n\t\t\t\t}\n\t\t\t\t// Use conventional replacement on any remaining primes and quotes.\n\t\t\t\t$sentence = preg_replace( $prime_pattern, $prime, $sentence );\n\t\t\t\t$sentence = preg_replace( $flag_after_digit, $prime, $sentence );\n\t\t\t\t$sentence = str_replace( $flag, $close_quote, $sentence );\n\t\t\t} elseif ( 1 == $count ) {\n\t\t\t\t// Found only one closing quote candidate, so give it priority over primes.\n\t\t\t\t$sentence = str_replace( $flag, $close_quote, $sentence );\n\t\t\t\t$sentence = preg_replace( $prime_pattern, $prime, $sentence );\n\t\t\t} else {\n\t\t\t\t// No closing quotes found.  Just run primes pattern.\n\t\t\t\t$sentence = preg_replace( $prime_pattern, $prime, $sentence );\n\t\t\t}\n\t\t} else {\n\t\t\t$sentence = preg_replace( $prime_pattern, $prime, $sentence );\n\t\t\t$sentence = preg_replace( $quote_pattern, $close_quote, $sentence );\n\t\t}\n\t\tif ( '\"' == $needle && false !== strpos( $sentence, '\"' ) ) {\n\t\t\t$sentence = str_replace( '\"', $close_quote, $sentence );\n\t\t}\n\t}\n\n\treturn implode( $open_quote, $sentences );\n}\n\n/**\n * Search for disabled element tags. Push element to stack on tag open and pop\n * on tag close.\n *\n * Assumes first char of $text is tag opening and last char is tag closing.\n * Assumes second char of $text is optionally '/' to indicate closing as in </html>.\n *\n * @since 2.9.0\n * @access private\n *\n * @param string $text Text to check. Must be a tag like `<html>` or `[shortcode]`.\n * @param array  $stack List of open tag elements.\n * @param array  $disabled_elements The tag names to match against. Spaces are not allowed in tag names.\n */\nfunction _wptexturize_pushpop_element( $text, &$stack, $disabled_elements ) {\n\t// Is it an opening tag or closing tag?\n\tif ( isset( $text[1] ) && '/' !== $text[1] ) {\n\t\t$opening_tag = true;\n\t\t$name_offset = 1;\n\t} elseif ( 0 == count( $stack ) ) {\n\t\t// Stack is empty. Just stop.\n\t\treturn;\n\t} else {\n\t\t$opening_tag = false;\n\t\t$name_offset = 2;\n\t}\n\n\t// Parse out the tag name.\n\t$space = strpos( $text, ' ' );\n\tif ( false === $space ) {\n\t\t$space = -1;\n\t} else {\n\t\t$space -= $name_offset;\n\t}\n\t$tag = substr( $text, $name_offset, $space );\n\n\t// Handle disabled tags.\n\tif ( in_array( $tag, $disabled_elements ) ) {\n\t\tif ( $opening_tag ) {\n\t\t\t/*\n\t\t\t * This disables texturize until we find a closing tag of our type\n\t\t\t * (e.g. <pre>) even if there was invalid nesting before that\n\t\t\t *\n\t\t\t * Example: in the case <pre>sadsadasd</code>\"baba\"</pre>\n\t\t\t *          \"baba\" won't be texturize\n\t\t\t */\n\n\t\t\tarray_push( $stack, $tag );\n\t\t} elseif ( end( $stack ) == $tag ) {\n\t\t\tarray_pop( $stack );\n\t\t}\n\t}\n}\n\n/**\n * Replaces double line-breaks with paragraph elements.\n *\n * A group of regex replaces used to identify text formatted with newlines and\n * replace double line-breaks with HTML paragraph tags. The remaining line-breaks\n * after conversion become <<br />> tags, unless $br is set to '0' or 'false'.\n *\n * @since 0.71\n *\n * @param string $pee The text which has to be formatted.\n * @param bool   $br  Optional. If set, this will convert all remaining line-breaks\n *                    after paragraphing. Default true.\n * @return string Text which has been converted into correct paragraph tags.\n */\nfunction wpautop( $pee, $br = true ) {\n\t$pre_tags = array();\n\n\tif ( trim( $pee ) === '' ) {\n\t\treturn '';\n\t}\n\n\t// Just to make things a little easier, pad the end.\n\t$pee = $pee . \"\\n\";\n\n\t/*\n\t * Pre tags shouldn't be touched by autop.\n\t * Replace pre tags with placeholders and bring them back after autop.\n\t */\n\tif ( strpos( $pee, '<pre' ) !== false ) {\n\t\t$pee_parts = explode( '</pre>', $pee );\n\t\t$last_pee  = array_pop( $pee_parts );\n\t\t$pee       = '';\n\t\t$i         = 0;\n\n\t\tforeach ( $pee_parts as $pee_part ) {\n\t\t\t$start = strpos( $pee_part, '<pre' );\n\n\t\t\t// Malformed html?\n\t\t\tif ( $start === false ) {\n\t\t\t\t$pee .= $pee_part;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$name              = \"<pre wp-pre-tag-$i></pre>\";\n\t\t\t$pre_tags[ $name ] = substr( $pee_part, $start ) . '</pre>';\n\n\t\t\t$pee .= substr( $pee_part, 0, $start ) . $name;\n\t\t\t$i++;\n\t\t}\n\n\t\t$pee .= $last_pee;\n\t}\n\t// Change multiple <br>s into two line breaks, which will turn into paragraphs.\n\t$pee = preg_replace( '|<br\\s*/?>\\s*<br\\s*/?>|', \"\\n\\n\", $pee );\n\n\t$allblocks = '(?:table|thead|tfoot|caption|col|colgroup|tbody|tr|td|th|div|dl|dd|dt|ul|ol|li|pre|form|map|area|blockquote|address|math|style|p|h[1-6]|hr|fieldset|legend|section|article|aside|hgroup|header|footer|nav|figure|figcaption|details|menu|summary)';\n\n\t// Add a double line break above block-level opening tags.\n\t$pee = preg_replace( '!(<' . $allblocks . '[\\s/>])!', \"\\n\\n$1\", $pee );\n\n\t// Add a double line break below block-level closing tags.\n\t$pee = preg_replace( '!(</' . $allblocks . '>)!', \"$1\\n\\n\", $pee );\n\n\t// Add a double line break after hr tags, which are self closing.\n\t$pee = preg_replace( '!(<hr\\s*?/?>)!', \"$1\\n\\n\", $pee );\n\n\t// Standardize newline characters to \"\\n\".\n\t$pee = str_replace( array( \"\\r\\n\", \"\\r\" ), \"\\n\", $pee );\n\n\t// Find newlines in all elements and add placeholders.\n\t$pee = wp_replace_in_html_tags( $pee, array( \"\\n\" => ' <!-- wpnl --> ' ) );\n\n\t// Collapse line breaks before and after <option> elements so they don't get autop'd.\n\tif ( strpos( $pee, '<option' ) !== false ) {\n\t\t$pee = preg_replace( '|\\s*<option|', '<option', $pee );\n\t\t$pee = preg_replace( '|</option>\\s*|', '</option>', $pee );\n\t}\n\n\t/*\n\t * Collapse line breaks inside <object> elements, before <param> and <embed> elements\n\t * so they don't get autop'd.\n\t */\n\tif ( strpos( $pee, '</object>' ) !== false ) {\n\t\t$pee = preg_replace( '|(<object[^>]*>)\\s*|', '$1', $pee );\n\t\t$pee = preg_replace( '|\\s*</object>|', '</object>', $pee );\n\t\t$pee = preg_replace( '%\\s*(</?(?:param|embed)[^>]*>)\\s*%', '$1', $pee );\n\t}\n\n\t/*\n\t * Collapse line breaks inside <audio> and <video> elements,\n\t * before and after <source> and <track> elements.\n\t */\n\tif ( strpos( $pee, '<source' ) !== false || strpos( $pee, '<track' ) !== false ) {\n\t\t$pee = preg_replace( '%([<\\[](?:audio|video)[^>\\]]*[>\\]])\\s*%', '$1', $pee );\n\t\t$pee = preg_replace( '%\\s*([<\\[]/(?:audio|video)[>\\]])%', '$1', $pee );\n\t\t$pee = preg_replace( '%\\s*(<(?:source|track)[^>]*>)\\s*%', '$1', $pee );\n\t}\n\n\t// Collapse line breaks before and after <figcaption> elements.\n\tif ( strpos( $pee, '<figcaption' ) !== false ) {\n\t\t$pee = preg_replace( '|\\s*(<figcaption[^>]*>)|', '$1', $pee );\n\t\t$pee = preg_replace( '|</figcaption>\\s*|', '</figcaption>', $pee );\n\t}\n\n\t// Remove more than two contiguous line breaks.\n\t$pee = preg_replace( \"/\\n\\n+/\", \"\\n\\n\", $pee );\n\n\t// Split up the contents into an array of strings, separated by double line breaks.\n\t$pees = preg_split( '/\\n\\s*\\n/', $pee, -1, PREG_SPLIT_NO_EMPTY );\n\n\t// Reset $pee prior to rebuilding.\n\t$pee = '';\n\n\t// Rebuild the content as a string, wrapping every bit with a <p>.\n\tforeach ( $pees as $tinkle ) {\n\t\t$pee .= '<p>' . trim( $tinkle, \"\\n\" ) . \"</p>\\n\";\n\t}\n\n\t// Under certain strange conditions it could create a P of entirely whitespace.\n\t$pee = preg_replace( '|<p>\\s*</p>|', '', $pee );\n\n\t// Add a closing <p> inside <div>, <address>, or <form> tag if missing.\n\t$pee = preg_replace( '!<p>([^<]+)</(div|address|form)>!', '<p>$1</p></$2>', $pee );\n\n\t// If an opening or closing block element tag is wrapped in a <p>, unwrap it.\n\t$pee = preg_replace( '!<p>\\s*(</?' . $allblocks . '[^>]*>)\\s*</p>!', '$1', $pee );\n\n\t// In some cases <li> may get wrapped in <p>, fix them.\n\t$pee = preg_replace( '|<p>(<li.+?)</p>|', '$1', $pee );\n\n\t// If a <blockquote> is wrapped with a <p>, move it inside the <blockquote>.\n\t$pee = preg_replace( '|<p><blockquote([^>]*)>|i', '<blockquote$1><p>', $pee );\n\t$pee = str_replace( '</blockquote></p>', '</p></blockquote>', $pee );\n\n\t// If an opening or closing block element tag is preceded by an opening <p> tag, remove it.\n\t$pee = preg_replace( '!<p>\\s*(</?' . $allblocks . '[^>]*>)!', '$1', $pee );\n\n\t// If an opening or closing block element tag is followed by a closing <p> tag, remove it.\n\t$pee = preg_replace( '!(</?' . $allblocks . '[^>]*>)\\s*</p>!', '$1', $pee );\n\n\t// Optionally insert line breaks.\n\tif ( $br ) {\n\t\t// Replace newlines that shouldn't be touched with a placeholder.\n\t\t$pee = preg_replace_callback( '/<(script|style|svg).*?<\\/\\\\1>/s', '_autop_newline_preservation_helper', $pee );\n\n\t\t// Normalize <br>\n\t\t$pee = str_replace( array( '<br>', '<br/>' ), '<br />', $pee );\n\n\t\t// Replace any new line characters that aren't preceded by a <br /> with a <br />.\n\t\t$pee = preg_replace( '|(?<!<br />)\\s*\\n|', \"<br />\\n\", $pee );\n\n\t\t// Replace newline placeholders with newlines.\n\t\t$pee = str_replace( '<WPPreserveNewline />', \"\\n\", $pee );\n\t}\n\n\t// If a <br /> tag is after an opening or closing block tag, remove it.\n\t$pee = preg_replace( '!(</?' . $allblocks . '[^>]*>)\\s*<br />!', '$1', $pee );\n\n\t// If a <br /> tag is before a subset of opening or closing block tags, remove it.\n\t$pee = preg_replace( '!<br />(\\s*</?(?:p|li|div|dl|dd|dt|th|pre|td|ul|ol)[^>]*>)!', '$1', $pee );\n\t$pee = preg_replace( \"|\\n</p>$|\", '</p>', $pee );\n\n\t// Replace placeholder <pre> tags with their original content.\n\tif ( ! empty( $pre_tags ) ) {\n\t\t$pee = str_replace( array_keys( $pre_tags ), array_values( $pre_tags ), $pee );\n\t}\n\n\t// Restore newlines in all elements.\n\tif ( false !== strpos( $pee, '<!-- wpnl -->' ) ) {\n\t\t$pee = str_replace( array( ' <!-- wpnl --> ', '<!-- wpnl -->' ), \"\\n\", $pee );\n\t}\n\n\treturn $pee;\n}\n\n/**\n * Separate HTML elements and comments from the text.\n *\n * @since 4.2.4\n *\n * @param string $input The text which has to be formatted.\n * @return array The formatted text.\n */\nfunction wp_html_split( $input ) {\n\treturn preg_split( get_html_split_regex(), $input, -1, PREG_SPLIT_DELIM_CAPTURE );\n}\n\n/**\n * Retrieve the regular expression for an HTML element.\n *\n * @since 4.4.0\n *\n * @staticvar string $regex\n *\n * @return string The regular expression\n */\nfunction get_html_split_regex() {\n\tstatic $regex;\n\n\tif ( ! isset( $regex ) ) {\n\t\t// phpcs:disable Squiz.Strings.ConcatenationSpacing.PaddingFound -- don't remove regex indentation\n\t\t$comments =\n\t\t\t'!'             // Start of comment, after the <.\n\t\t\t. '(?:'         // Unroll the loop: Consume everything until --> is found.\n\t\t\t.     '-(?!->)' // Dash not followed by end of comment.\n\t\t\t.     '[^\\-]*+' // Consume non-dashes.\n\t\t\t. ')*+'         // Loop possessively.\n\t\t\t. '(?:-->)?';   // End of comment. If not found, match all input.\n\n\t\t$cdata =\n\t\t\t'!\\[CDATA\\['    // Start of comment, after the <.\n\t\t\t. '[^\\]]*+'     // Consume non-].\n\t\t\t. '(?:'         // Unroll the loop: Consume everything until ]]> is found.\n\t\t\t.     '](?!]>)' // One ] not followed by end of comment.\n\t\t\t.     '[^\\]]*+' // Consume non-].\n\t\t\t. ')*+'         // Loop possessively.\n\t\t\t. '(?:]]>)?';   // End of comment. If not found, match all input.\n\n\t\t$escaped =\n\t\t\t'(?='             // Is the element escaped?\n\t\t\t.    '!--'\n\t\t\t. '|'\n\t\t\t.    '!\\[CDATA\\['\n\t\t\t. ')'\n\t\t\t. '(?(?=!-)'      // If yes, which type?\n\t\t\t.     $comments\n\t\t\t. '|'\n\t\t\t.     $cdata\n\t\t\t. ')';\n\n\t\t$regex =\n\t\t\t'/('                // Capture the entire match.\n\t\t\t.     '<'           // Find start of element.\n\t\t\t.     '(?'          // Conditional expression follows.\n\t\t\t.         $escaped  // Find end of escaped element.\n\t\t\t.     '|'           // ... else ...\n\t\t\t.         '[^>]*>?' // Find end of normal element.\n\t\t\t.     ')'\n\t\t\t. ')/';\n\t\t// phpcs:enable\n\t}\n\n\treturn $regex;\n}\n\n/**\n * Retrieve the combined regular expression for HTML and shortcodes.\n *\n * @access private\n * @ignore\n * @internal This function will be removed in 4.5.0 per Shortcode API Roadmap.\n * @since 4.4.0\n *\n * @staticvar string $html_regex\n *\n * @param string $shortcode_regex The result from _get_wptexturize_shortcode_regex().  Optional.\n * @return string The regular expression\n */\nfunction _get_wptexturize_split_regex( $shortcode_regex = '' ) {\n\tstatic $html_regex;\n\n\tif ( ! isset( $html_regex ) ) {\n\t\t// phpcs:disable Squiz.Strings.ConcatenationSpacing.PaddingFound -- don't remove regex indentation\n\t\t$comment_regex =\n\t\t\t'!'             // Start of comment, after the <.\n\t\t\t. '(?:'         // Unroll the loop: Consume everything until --> is found.\n\t\t\t.     '-(?!->)' // Dash not followed by end of comment.\n\t\t\t.     '[^\\-]*+' // Consume non-dashes.\n\t\t\t. ')*+'         // Loop possessively.\n\t\t\t. '(?:-->)?';   // End of comment. If not found, match all input.\n\n\t\t$html_regex = // Needs replaced with wp_html_split() per Shortcode API Roadmap.\n\t\t\t'<'                  // Find start of element.\n\t\t\t. '(?(?=!--)'        // Is this a comment?\n\t\t\t.     $comment_regex // Find end of comment.\n\t\t\t. '|'\n\t\t\t.     '[^>]*>?'      // Find end of element. If not found, match all input.\n\t\t\t. ')';\n\t\t// phpcs:enable\n\t}\n\n\tif ( empty( $shortcode_regex ) ) {\n\t\t$regex = '/(' . $html_regex . ')/';\n\t} else {\n\t\t$regex = '/(' . $html_regex . '|' . $shortcode_regex . ')/';\n\t}\n\n\treturn $regex;\n}\n\n/**\n * Retrieve the regular expression for shortcodes.\n *\n * @access private\n * @ignore\n * @internal This function will be removed in 4.5.0 per Shortcode API Roadmap.\n * @since 4.4.0\n *\n * @param array $tagnames List of shortcodes to find.\n * @return string The regular expression\n */\nfunction _get_wptexturize_shortcode_regex( $tagnames ) {\n\t$tagregexp = join( '|', array_map( 'preg_quote', $tagnames ) );\n\t$tagregexp = \"(?:$tagregexp)(?=[\\\\s\\\\]\\\\/])\"; // Excerpt of get_shortcode_regex().\n\t// phpcs:disable Squiz.Strings.ConcatenationSpacing.PaddingFound -- don't remove regex indentation\n\t$regex =\n\t\t'\\['              // Find start of shortcode.\n\t\t. '[\\/\\[]?'         // Shortcodes may begin with [/ or [[\n\t\t. $tagregexp        // Only match registered shortcodes, because performance.\n\t\t. '(?:'\n\t\t.     '[^\\[\\]<>]+'  // Shortcodes do not contain other shortcodes. Quantifier critical.\n\t\t. '|'\n\t\t.     '<[^\\[\\]>]*>' // HTML elements permitted. Prevents matching ] before >.\n\t\t. ')*+'             // Possessive critical.\n\t\t. '\\]'              // Find end of shortcode.\n\t\t. '\\]?';            // Shortcodes may end with ]]\n\t// phpcs:enable\n\n\treturn $regex;\n}\n\n/**\n * Replace characters or phrases within HTML elements only.\n *\n * @since 4.2.3\n *\n * @param string $haystack The text which has to be formatted.\n * @param array $replace_pairs In the form array('from' => 'to', ...).\n * @return string The formatted text.\n */\nfunction wp_replace_in_html_tags( $haystack, $replace_pairs ) {\n\t// Find all elements.\n\t$textarr = wp_html_split( $haystack );\n\t$changed = false;\n\n\t// Optimize when searching for one item.\n\tif ( 1 === count( $replace_pairs ) ) {\n\t\t// Extract $needle and $replace.\n\t\tforeach ( $replace_pairs as $needle => $replace ) {\n\t\t}\n\n\t\t// Loop through delimiters (elements) only.\n\t\tfor ( $i = 1, $c = count( $textarr ); $i < $c; $i += 2 ) {\n\t\t\tif ( false !== strpos( $textarr[ $i ], $needle ) ) {\n\t\t\t\t$textarr[ $i ] = str_replace( $needle, $replace, $textarr[ $i ] );\n\t\t\t\t$changed       = true;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Extract all $needles.\n\t\t$needles = array_keys( $replace_pairs );\n\n\t\t// Loop through delimiters (elements) only.\n\t\tfor ( $i = 1, $c = count( $textarr ); $i < $c; $i += 2 ) {\n\t\t\tforeach ( $needles as $needle ) {\n\t\t\t\tif ( false !== strpos( $textarr[ $i ], $needle ) ) {\n\t\t\t\t\t$textarr[ $i ] = strtr( $textarr[ $i ], $replace_pairs );\n\t\t\t\t\t$changed       = true;\n\t\t\t\t\t// After one strtr() break out of the foreach loop and look at next element.\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( $changed ) {\n\t\t$haystack = implode( $textarr );\n\t}\n\n\treturn $haystack;\n}\n\n/**\n * Newline preservation help function for wpautop\n *\n * @since 3.1.0\n * @access private\n *\n * @param array $matches preg_replace_callback matches array\n * @return string\n */\nfunction _autop_newline_preservation_helper( $matches ) {\n\treturn str_replace( \"\\n\", '<WPPreserveNewline />', $matches[0] );\n}\n\n/**\n * Don't auto-p wrap shortcodes that stand alone\n *\n * Ensures that shortcodes are not wrapped in `<p>...</p>`.\n *\n * @since 2.9.0\n *\n * @global array $shortcode_tags\n *\n * @param string $pee The content.\n * @return string The filtered content.\n */\nfunction shortcode_unautop( $pee ) {\n\tglobal $shortcode_tags;\n\n\tif ( empty( $shortcode_tags ) || ! is_array( $shortcode_tags ) ) {\n\t\treturn $pee;\n\t}\n\n\t$tagregexp = join( '|', array_map( 'preg_quote', array_keys( $shortcode_tags ) ) );\n\t$spaces    = wp_spaces_regexp();\n\n\t// phpcs:disable Squiz.Strings.ConcatenationSpacing.PaddingFound,WordPress.WhiteSpace.PrecisionAlignment.Found -- don't remove regex indentation\n\t$pattern =\n\t\t'/'\n\t\t. '<p>'                              // Opening paragraph\n\t\t. '(?:' . $spaces . ')*+'            // Optional leading whitespace\n\t\t. '('                                // 1: The shortcode\n\t\t.     '\\\\['                          // Opening bracket\n\t\t.     \"($tagregexp)\"                 // 2: Shortcode name\n\t\t.     '(?![\\\\w-])'                   // Not followed by word character or hyphen\n\t\t\t\t\t\t\t\t\t\t\t // Unroll the loop: Inside the opening shortcode tag\n\t\t.     '[^\\\\]\\\\/]*'                   // Not a closing bracket or forward slash\n\t\t.     '(?:'\n\t\t.         '\\\\/(?!\\\\])'               // A forward slash not followed by a closing bracket\n\t\t.         '[^\\\\]\\\\/]*'               // Not a closing bracket or forward slash\n\t\t.     ')*?'\n\t\t.     '(?:'\n\t\t.         '\\\\/\\\\]'                   // Self closing tag and closing bracket\n\t\t.     '|'\n\t\t.         '\\\\]'                      // Closing bracket\n\t\t.         '(?:'                      // Unroll the loop: Optionally, anything between the opening and closing shortcode tags\n\t\t.             '[^\\\\[]*+'             // Not an opening bracket\n\t\t.             '(?:'\n\t\t.                 '\\\\[(?!\\\\/\\\\2\\\\])' // An opening bracket not followed by the closing shortcode tag\n\t\t.                 '[^\\\\[]*+'         // Not an opening bracket\n\t\t.             ')*+'\n\t\t.             '\\\\[\\\\/\\\\2\\\\]'         // Closing shortcode tag\n\t\t.         ')?'\n\t\t.     ')'\n\t\t. ')'\n\t\t. '(?:' . $spaces . ')*+'            // optional trailing whitespace\n\t\t. '<\\\\/p>'                           // closing paragraph\n\t\t. '/';\n\t// phpcs:enable\n\n\treturn preg_replace( $pattern, '$1', $pee );\n}\n\n/**\n * Checks to see if a string is utf8 encoded.\n *\n * NOTE: This function checks for 5-Byte sequences, UTF8\n *       has Bytes Sequences with a maximum length of 4.\n *\n * @author bmorel at ssi dot fr (modified)\n * @since 1.2.1\n *\n * @param string $str The string to be checked\n * @return bool True if $str fits a UTF-8 model, false otherwise.\n */\nfunction seems_utf8( $str ) {\n\tmbstring_binary_safe_encoding();\n\t$length = strlen( $str );\n\treset_mbstring_encoding();\n\tfor ( $i = 0; $i < $length; $i++ ) {\n\t\t$c = ord( $str[ $i ] );\n\t\tif ( $c < 0x80 ) {\n\t\t\t$n = 0; // 0bbbbbbb\n\t\t} elseif ( ( $c & 0xE0 ) == 0xC0 ) {\n\t\t\t$n = 1; // 110bbbbb\n\t\t} elseif ( ( $c & 0xF0 ) == 0xE0 ) {\n\t\t\t$n = 2; // 1110bbbb\n\t\t} elseif ( ( $c & 0xF8 ) == 0xF0 ) {\n\t\t\t$n = 3; // 11110bbb\n\t\t} elseif ( ( $c & 0xFC ) == 0xF8 ) {\n\t\t\t$n = 4; // 111110bb\n\t\t} elseif ( ( $c & 0xFE ) == 0xFC ) {\n\t\t\t$n = 5; // 1111110b\n\t\t} else {\n\t\t\treturn false; // Does not match any model\n\t\t}\n\t\tfor ( $j = 0; $j < $n; $j++ ) { // n bytes matching 10bbbbbb follow ?\n\t\t\tif ( ( ++$i == $length ) || ( ( ord( $str[ $i ] ) & 0xC0 ) != 0x80 ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * Converts a number of special characters into their HTML entities.\n *\n * Specifically deals with: &, <, >, \", and '.\n *\n * $quote_style can be set to ENT_COMPAT to encode \" to\n * &quot;, or ENT_QUOTES to do both. Default is ENT_NOQUOTES where no quotes are encoded.\n *\n * @since 1.2.2\n * @access private\n *\n * @staticvar string $_charset\n *\n * @param string       $string        The text which is to be encoded.\n * @param int|string   $quote_style   Optional. Converts double quotes if set to ENT_COMPAT,\n *                                    both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES.\n *                                    Also compatible with old values; converting single quotes if set to 'single',\n *                                    double if set to 'double' or both if otherwise set.\n *                                    Default is ENT_NOQUOTES.\n * @param false|string $charset       Optional. The character encoding of the string. Default is false.\n * @param bool         $double_encode Optional. Whether to encode existing html entities. Default is false.\n * @return string The encoded text with HTML entities.\n */\nfunction _wp_specialchars( $string, $quote_style = ENT_NOQUOTES, $charset = false, $double_encode = false ) {\n\t$string = (string) $string;\n\n\tif ( 0 === strlen( $string ) ) {\n\t\treturn '';\n\t}\n\n\t// Don't bother if there are no specialchars - saves some processing\n\tif ( ! preg_match( '/[&<>\"\\']/', $string ) ) {\n\t\treturn $string;\n\t}\n\n\t// Account for the previous behaviour of the function when the $quote_style is not an accepted value\n\tif ( empty( $quote_style ) ) {\n\t\t$quote_style = ENT_NOQUOTES;\n\t} elseif ( ! in_array( $quote_style, array( 0, 2, 3, 'single', 'double' ), true ) ) {\n\t\t$quote_style = ENT_QUOTES;\n\t}\n\n\t// Store the site charset as a static to avoid multiple calls to wp_load_alloptions()\n\tif ( ! $charset ) {\n\t\tstatic $_charset = null;\n\t\tif ( ! isset( $_charset ) ) {\n\t\t\t$alloptions = wp_load_alloptions();\n\t\t\t$_charset   = isset( $alloptions['blog_charset'] ) ? $alloptions['blog_charset'] : '';\n\t\t}\n\t\t$charset = $_charset;\n\t}\n\n\tif ( in_array( $charset, array( 'utf8', 'utf-8', 'UTF8' ) ) ) {\n\t\t$charset = 'UTF-8';\n\t}\n\n\t$_quote_style = $quote_style;\n\n\tif ( $quote_style === 'double' ) {\n\t\t$quote_style  = ENT_COMPAT;\n\t\t$_quote_style = ENT_COMPAT;\n\t} elseif ( $quote_style === 'single' ) {\n\t\t$quote_style = ENT_NOQUOTES;\n\t}\n\n\tif ( ! $double_encode ) {\n\t\t// Guarantee every &entity; is valid, convert &garbage; into &amp;garbage;\n\t\t// This is required for PHP < 5.4.0 because ENT_HTML401 flag is unavailable.\n\t\t$string = wp_kses_normalize_entities( $string );\n\t}\n\n\t$string = htmlspecialchars( $string, $quote_style, $charset, $double_encode );\n\n\t// Back-compat.\n\tif ( 'single' === $_quote_style ) {\n\t\t$string = str_replace( \"'\", '&#039;', $string );\n\t}\n\n\treturn $string;\n}\n\n/**\n * Converts a number of HTML entities into their special characters.\n *\n * Specifically deals with: &, <, >, \", and '.\n *\n * $quote_style can be set to ENT_COMPAT to decode \" entities,\n * or ENT_QUOTES to do both \" and '. Default is ENT_NOQUOTES where no quotes are decoded.\n *\n * @since 2.8.0\n *\n * @param string     $string The text which is to be decoded.\n * @param string|int $quote_style Optional. Converts double quotes if set to ENT_COMPAT,\n *                                both single and double if set to ENT_QUOTES or\n *                                none if set to ENT_NOQUOTES.\n *                                Also compatible with old _wp_specialchars() values;\n *                                converting single quotes if set to 'single',\n *                                double if set to 'double' or both if otherwise set.\n *                                Default is ENT_NOQUOTES.\n * @return string The decoded text without HTML entities.\n */\nfunction wp_specialchars_decode( $string, $quote_style = ENT_NOQUOTES ) {\n\t$string = (string) $string;\n\n\tif ( 0 === strlen( $string ) ) {\n\t\treturn '';\n\t}\n\n\t// Don't bother if there are no entities - saves a lot of processing\n\tif ( strpos( $string, '&' ) === false ) {\n\t\treturn $string;\n\t}\n\n\t// Match the previous behaviour of _wp_specialchars() when the $quote_style is not an accepted value\n\tif ( empty( $quote_style ) ) {\n\t\t$quote_style = ENT_NOQUOTES;\n\t} elseif ( ! in_array( $quote_style, array( 0, 2, 3, 'single', 'double' ), true ) ) {\n\t\t$quote_style = ENT_QUOTES;\n\t}\n\n\t// More complete than get_html_translation_table( HTML_SPECIALCHARS )\n\t$single      = array(\n\t\t'&#039;' => '\\'',\n\t\t'&#x27;' => '\\'',\n\t);\n\t$single_preg = array(\n\t\t'/&#0*39;/'   => '&#039;',\n\t\t'/&#x0*27;/i' => '&#x27;',\n\t);\n\t$double      = array(\n\t\t'&quot;' => '\"',\n\t\t'&#034;' => '\"',\n\t\t'&#x22;' => '\"',\n\t);\n\t$double_preg = array(\n\t\t'/&#0*34;/'   => '&#034;',\n\t\t'/&#x0*22;/i' => '&#x22;',\n\t);\n\t$others      = array(\n\t\t'&lt;'   => '<',\n\t\t'&#060;' => '<',\n\t\t'&gt;'   => '>',\n\t\t'&#062;' => '>',\n\t\t'&amp;'  => '&',\n\t\t'&#038;' => '&',\n\t\t'&#x26;' => '&',\n\t);\n\t$others_preg = array(\n\t\t'/&#0*60;/'   => '&#060;',\n\t\t'/&#0*62;/'   => '&#062;',\n\t\t'/&#0*38;/'   => '&#038;',\n\t\t'/&#x0*26;/i' => '&#x26;',\n\t);\n\n\tif ( $quote_style === ENT_QUOTES ) {\n\t\t$translation      = array_merge( $single, $double, $others );\n\t\t$translation_preg = array_merge( $single_preg, $double_preg, $others_preg );\n\t} elseif ( $quote_style === ENT_COMPAT || $quote_style === 'double' ) {\n\t\t$translation      = array_merge( $double, $others );\n\t\t$translation_preg = array_merge( $double_preg, $others_preg );\n\t} elseif ( $quote_style === 'single' ) {\n\t\t$translation      = array_merge( $single, $others );\n\t\t$translation_preg = array_merge( $single_preg, $others_preg );\n\t} elseif ( $quote_style === ENT_NOQUOTES ) {\n\t\t$translation      = $others;\n\t\t$translation_preg = $others_preg;\n\t}\n\n\t// Remove zero padding on numeric entities\n\t$string = preg_replace( array_keys( $translation_preg ), array_values( $translation_preg ), $string );\n\n\t// Replace characters according to translation table\n\treturn strtr( $string, $translation );\n}\n\n/**\n * Checks for invalid UTF8 in a string.\n *\n * @since 2.8.0\n *\n * @staticvar bool $is_utf8\n * @staticvar bool $utf8_pcre\n *\n * @param string  $string The text which is to be checked.\n * @param bool    $strip Optional. Whether to attempt to strip out invalid UTF8. Default is false.\n * @return string The checked text.\n */\nfunction wp_check_invalid_utf8( $string, $strip = false ) {\n\t$string = (string) $string;\n\n\tif ( 0 === strlen( $string ) ) {\n\t\treturn '';\n\t}\n\n\t// Store the site charset as a static to avoid multiple calls to get_option()\n\tstatic $is_utf8 = null;\n\tif ( ! isset( $is_utf8 ) ) {\n\t\t$is_utf8 = in_array( get_option( 'blog_charset' ), array( 'utf8', 'utf-8', 'UTF8', 'UTF-8' ) );\n\t}\n\tif ( ! $is_utf8 ) {\n\t\treturn $string;\n\t}\n\n\t// Check for support for utf8 in the installed PCRE library once and store the result in a static\n\tstatic $utf8_pcre = null;\n\tif ( ! isset( $utf8_pcre ) ) {\n\t\t// phpcs:ignore WordPress.PHP.NoSilencedErrors.Discouraged\n\t\t$utf8_pcre = @preg_match( '/^./u', 'a' );\n\t}\n\t// We can't demand utf8 in the PCRE installation, so just return the string in those cases\n\tif ( ! $utf8_pcre ) {\n\t\treturn $string;\n\t}\n\n\t// phpcs:ignore WordPress.PHP.NoSilencedErrors.Discouraged -- preg_match fails when it encounters invalid UTF8 in $string\n\tif ( 1 === @preg_match( '/^./us', $string ) ) {\n\t\treturn $string;\n\t}\n\n\t// Attempt to strip the bad chars if requested (not recommended)\n\tif ( $strip && function_exists( 'iconv' ) ) {\n\t\treturn iconv( 'utf-8', 'utf-8', $string );\n\t}\n\n\treturn '';\n}\n\n/**\n * Encode the Unicode values to be used in the URI.\n *\n * @since 1.5.0\n *\n * @param string $utf8_string\n * @param int    $length Max  length of the string\n * @return string String with Unicode encoded for URI.\n */\nfunction utf8_uri_encode( $utf8_string, $length = 0 ) {\n\t$unicode        = '';\n\t$values         = array();\n\t$num_octets     = 1;\n\t$unicode_length = 0;\n\n\tmbstring_binary_safe_encoding();\n\t$string_length = strlen( $utf8_string );\n\treset_mbstring_encoding();\n\n\tfor ( $i = 0; $i < $string_length; $i++ ) {\n\n\t\t$value = ord( $utf8_string[ $i ] );\n\n\t\tif ( $value < 128 ) {\n\t\t\tif ( $length && ( $unicode_length >= $length ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$unicode .= chr( $value );\n\t\t\t$unicode_length++;\n\t\t} else {\n\t\t\tif ( count( $values ) == 0 ) {\n\t\t\t\tif ( $value < 224 ) {\n\t\t\t\t\t$num_octets = 2;\n\t\t\t\t} elseif ( $value < 240 ) {\n\t\t\t\t\t$num_octets = 3;\n\t\t\t\t} else {\n\t\t\t\t\t$num_octets = 4;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$values[] = $value;\n\n\t\t\tif ( $length && ( $unicode_length + ( $num_octets * 3 ) ) > $length ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( count( $values ) == $num_octets ) {\n\t\t\t\tfor ( $j = 0; $j < $num_octets; $j++ ) {\n\t\t\t\t\t$unicode .= '%' . dechex( $values[ $j ] );\n\t\t\t\t}\n\n\t\t\t\t$unicode_length += $num_octets * 3;\n\n\t\t\t\t$values     = array();\n\t\t\t\t$num_octets = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $unicode;\n}\n\n/**\n * Converts all accent characters to ASCII characters.\n *\n * If there are no accent characters, then the string given is just returned.\n *\n * **Accent characters converted:**\n *\n * Currency signs:\n *\n * |   Code   | Glyph | Replacement |     Description     |\n * | -------- | ----- | ----------- | ------------------- |\n * | U+00A3   | \u00a3     | (empty)     | British Pound sign  |\n * | U+20AC   | \u20ac     | E           | Euro sign           |\n *\n * Decompositions for Latin-1 Supplement:\n *\n * |  Code   | Glyph | Replacement |               Description              |\n * | ------- | ----- | ----------- | -------------------------------------- |\n * | U+00AA  | \u00aa     | a           | Feminine ordinal indicator             |\n * | U+00BA  | \u00ba     | o           | Masculine ordinal indicator            |\n * | U+00C0  | \u00c0     | A           | Latin capital letter A with grave      |\n * | U+00C1  | \u00c1     | A           | Latin capital letter A with acute      |\n * | U+00C2  | \u00c2     | A           | Latin capital letter A with circumflex |\n * | U+00C3  | \u00c3     | A           | Latin capital letter A with tilde      |\n * | U+00C4  | \u00c4     | A           | Latin capital letter A with diaeresis  |\n * | U+00C5  | \u00c5     | A           | Latin capital letter A with ring above |\n * | U+00C6  | \u00c6     | AE          | Latin capital letter AE                |\n * | U+00C7  | \u00c7     | C           | Latin capital letter C with cedilla    |\n * | U+00C8  | \u00c8     | E           | Latin capital letter E with grave      |\n * | U+00C9  | \u00c9     | E           | Latin capital letter E with acute      |\n * | U+00CA  | \u00ca     | E           | Latin capital letter E with circumflex |\n * | U+00CB  | \u00cb     | E           | Latin capital letter E with diaeresis  |\n * | U+00CC  | \u00cc     | I           | Latin capital letter I with grave      |\n * | U+00CD  | \u00cd     | I           | Latin capital letter I with acute      |\n * | U+00CE  | \u00ce     | I           | Latin capital letter I with circumflex |\n * | U+00CF  | \u00cf     | I           | Latin capital letter I with diaeresis  |\n * | U+00D0  | \u00d0     | D           | Latin capital letter Eth               |\n * | U+00D1  | \u00d1     | N           | Latin capital letter N with tilde      |\n * | U+00D2  | \u00d2     | O           | Latin capital letter O with grave      |\n * | U+00D3  | \u00d3     | O           | Latin capital letter O with acute      |\n * | U+00D4  | \u00d4     | O           | Latin capital letter O with circumflex |\n * | U+00D5  | \u00d5     | O           | Latin capital letter O with tilde      |\n * | U+00D6  | \u00d6     | O           | Latin capital letter O with diaeresis  |\n * | U+00D8  | \u00d8     | O           | Latin capital letter O with stroke     |\n * | U+00D9  | \u00d9     | U           | Latin capital letter U with grave      |\n * | U+00DA  | \u00da     | U           | Latin capital letter U with acute      |\n * | U+00DB  | \u00db     | U           | Latin capital letter U with circumflex |\n * | U+00DC  | \u00dc     | U           | Latin capital letter U with diaeresis  |\n * | U+00DD  | \u00dd     | Y           | Latin capital letter Y with acute      |\n * | U+00DE  | \u00de     | TH          | Latin capital letter Thorn             |\n * | U+00DF  | \u00df     | s           | Latin small letter sharp s             |\n * | U+00E0  | \u00e0     | a           | Latin small letter a with grave        |\n * | U+00E1  | \u00e1     | a           | Latin small letter a with acute        |\n * | U+00E2  | \u00e2     | a           | Latin small letter a with circumflex   |\n * | U+00E3  | \u00e3     | a           | Latin small letter a with tilde        |\n * | U+00E4  | \u00e4     | a           | Latin small letter a with diaeresis    |\n * | U+00E5  | \u00e5     | a           | Latin small letter a with ring above   |\n * | U+00E6  | \u00e6     | ae          | Latin small letter ae                  |\n * | U+00E7  | \u00e7     | c           | Latin small letter c with cedilla      |\n * | U+00E8  | \u00e8     | e           | Latin small letter e with grave        |\n * | U+00E9  | \u00e9     | e           | Latin small letter e with acute        |\n * | U+00EA  | \u00ea     | e           | Latin small letter e with circumflex   |\n * | U+00EB  | \u00eb     | e           | Latin small letter e with diaeresis    |\n * | U+00EC  | \u00ec     | i           | Latin small letter i with grave        |\n * | U+00ED  | \u00ed     | i           | Latin small letter i with acute        |\n * | U+00EE  | \u00ee     | i           | Latin small letter i with circumflex   |\n * | U+00EF  | \u00ef     | i           | Latin small letter i with diaeresis    |\n * | U+00F0  | \u00f0     | d           | Latin small letter Eth                 |\n * | U+00F1  | \u00f1     | n           | Latin small letter n with tilde        |\n * | U+00F2  | \u00f2     | o           | Latin small letter o with grave        |\n * | U+00F3  | \u00f3     | o           | Latin small letter o with acute        |\n * | U+00F4  | \u00f4     | o           | Latin small letter o with circumflex   |\n * | U+00F5  | \u00f5     | o           | Latin small letter o with tilde        |\n * | U+00F6  | \u00f6     | o           | Latin small letter o with diaeresis    |\n * | U+00F8  | \u00f8     | o           | Latin small letter o with stroke       |\n * | U+00F9  | \u00f9     | u           | Latin small letter u with grave        |\n * | U+00FA  | \u00fa     | u           | Latin small letter u with acute        |\n * | U+00FB  | \u00fb     | u           | Latin small letter u with circumflex   |\n * | U+00FC  | \u00fc     | u           | Latin small letter u with diaeresis    |\n * | U+00FD  | \u00fd     | y           | Latin small letter y with acute        |\n * | U+00FE  | \u00fe     | th          | Latin small letter Thorn               |\n * | U+00FF  | \u00ff     | y           | Latin small letter y with diaeresis    |\n *\n * Decompositions for Latin Extended-A:\n *\n * |  Code   | Glyph | Replacement |                    Description                    |\n * | ------- | ----- | ----------- | ------------------------------------------------- |\n * | U+0100  | \u0100     | A           | Latin capital letter A with macron                |\n * | U+0101  | \u0101     | a           | Latin small letter a with macron                  |\n * | U+0102  | \u0102     | A           | Latin capital letter A with breve                 |\n * | U+0103  | \u0103     | a           | Latin small letter a with breve                   |\n * | U+0104  | \u0104     | A           | Latin capital letter A with ogonek                |\n * | U+0105  | \u0105     | a           | Latin small letter a with ogonek                  |\n * | U+01006 | \u0106     | C           | Latin capital letter C with acute                 |\n * | U+0107  | \u0107     | c           | Latin small letter c with acute                   |\n * | U+0108  | \u0108     | C           | Latin capital letter C with circumflex            |\n * | U+0109  | \u0109     | c           | Latin small letter c with circumflex              |\n * | U+010A  | \u010a     | C           | Latin capital letter C with dot above             |\n * | U+010B  | \u010b     | c           | Latin small letter c with dot above               |\n * | U+010C  | \u010c     | C           | Latin capital letter C with caron                 |\n * | U+010D  | \u010d     | c           | Latin small letter c with caron                   |\n * | U+010E  | \u010e     | D           | Latin capital letter D with caron                 |\n * | U+010F  | \u010f     | d           | Latin small letter d with caron                   |\n * | U+0110  | \u0110     | D           | Latin capital letter D with stroke                |\n * | U+0111  | \u0111     | d           | Latin small letter d with stroke                  |\n * | U+0112  | \u0112     | E           | Latin capital letter E with macron                |\n * | U+0113  | \u0113     | e           | Latin small letter e with macron                  |\n * | U+0114  | \u0114     | E           | Latin capital letter E with breve                 |\n * | U+0115  | \u0115     | e           | Latin small letter e with breve                   |\n * | U+0116  | \u0116     | E           | Latin capital letter E with dot above             |\n * | U+0117  | \u0117     | e           | Latin small letter e with dot above               |\n * | U+0118  | \u0118     | E           | Latin capital letter E with ogonek                |\n * | U+0119  | \u0119     | e           | Latin small letter e with ogonek                  |\n * | U+011A  | \u011a     | E           | Latin capital letter E with caron                 |\n * | U+011B  | \u011b     | e           | Latin small letter e with caron                   |\n * | U+011C  | \u011c     | G           | Latin capital letter G with circumflex            |\n * | U+011D  | \u011d     | g           | Latin small letter g with circumflex              |\n * | U+011E  | \u011e     | G           | Latin capital letter G with breve                 |\n * | U+011F  | \u011f     | g           | Latin small letter g with breve                   |\n * | U+0120  | \u0120     | G           | Latin capital letter G with dot above             |\n * | U+0121  | \u0121     | g           | Latin small letter g with dot above               |\n * | U+0122  | \u0122     | G           | Latin capital letter G with cedilla               |\n * | U+0123  | \u0123     | g           | Latin small letter g with cedilla                 |\n * | U+0124  | \u0124     | H           | Latin capital letter H with circumflex            |\n * | U+0125  | \u0125     | h           | Latin small letter h with circumflex              |\n * | U+0126  | \u0126     | H           | Latin capital letter H with stroke                |\n * | U+0127  | \u0127     | h           | Latin small letter h with stroke                  |\n * | U+0128  | \u0128     | I           | Latin capital letter I with tilde                 |\n * | U+0129  | \u0129     | i           | Latin small letter i with tilde                   |\n * | U+012A  | \u012a     | I           | Latin capital letter I with macron                |\n * | U+012B  | \u012b     | i           | Latin small letter i with macron                  |\n * | U+012C  | \u012c     | I           | Latin capital letter I with breve                 |\n * | U+012D  | \u012d     | i           | Latin small letter i with breve                   |\n * | U+012E  | \u012e     | I           | Latin capital letter I with ogonek                |\n * | U+012F  | \u012f     | i           | Latin small letter i with ogonek                  |\n * | U+0130  | \u0130     | I           | Latin capital letter I with dot above             |\n * | U+0131  | \u0131     | i           | Latin small letter dotless i                      |\n * | U+0132  | \u0132     | IJ          | Latin capital ligature IJ                         |\n * | U+0133  | \u0133     | ij          | Latin small ligature ij                           |\n * | U+0134  | \u0134     | J           | Latin capital letter J with circumflex            |\n * | U+0135  | \u0135     | j           | Latin small letter j with circumflex              |\n * | U+0136  | \u0136     | K           | Latin capital letter K with cedilla               |\n * | U+0137  | \u0137     | k           | Latin small letter k with cedilla                 |\n * | U+0138  | \u0138     | k           | Latin small letter Kra                            |\n * | U+0139  | \u0139     | L           | Latin capital letter L with acute                 |\n * | U+013A  | \u013a     | l           | Latin small letter l with acute                   |\n * | U+013B  | \u013b     | L           | Latin capital letter L with cedilla               |\n * | U+013C  | \u013c     | l           | Latin small letter l with cedilla                 |\n * | U+013D  | \u013d     | L           | Latin capital letter L with caron                 |\n * | U+013E  | \u013e     | l           | Latin small letter l with caron                   |\n * | U+013F  | \u013f     | L           | Latin capital letter L with middle dot            |\n * | U+0140  | \u0140     | l           | Latin small letter l with middle dot              |\n * | U+0141  | \u0141     | L           | Latin capital letter L with stroke                |\n * | U+0142  | \u0142     | l           | Latin small letter l with stroke                  |\n * | U+0143  | \u0143     | N           | Latin capital letter N with acute                 |\n * | U+0144  | \u0144     | n           | Latin small letter N with acute                   |\n * | U+0145  | \u0145     | N           | Latin capital letter N with cedilla               |\n * | U+0146  | \u0146     | n           | Latin small letter n with cedilla                 |\n * | U+0147  | \u0147     | N           | Latin capital letter N with caron                 |\n * | U+0148  | \u0148     | n           | Latin small letter n with caron                   |\n * | U+0149  | \u0149     | n           | Latin small letter n preceded by apostrophe       |\n * | U+014A  | \u014a     | N           | Latin capital letter Eng                          |\n * | U+014B  | \u014b     | n           | Latin small letter Eng                            |\n * | U+014C  | \u014c     | O           | Latin capital letter O with macron                |\n * | U+014D  | \u014d     | o           | Latin small letter o with macron                  |\n * | U+014E  | \u014e     | O           | Latin capital letter O with breve                 |\n * | U+014F  | \u014f     | o           | Latin small letter o with breve                   |\n * | U+0150  | \u0150     | O           | Latin capital letter O with double acute          |\n * | U+0151  | \u0151     | o           | Latin small letter o with double acute            |\n * | U+0152  | \u0152     | OE          | Latin capital ligature OE                         |\n * | U+0153  | \u0153     | oe          | Latin small ligature oe                           |\n * | U+0154  | \u0154     | R           | Latin capital letter R with acute                 |\n * | U+0155  | \u0155     | r           | Latin small letter r with acute                   |\n * | U+0156  | \u0156     | R           | Latin capital letter R with cedilla               |\n * | U+0157  | \u0157     | r           | Latin small letter r with cedilla                 |\n * | U+0158  | \u0158     | R           | Latin capital letter R with caron                 |\n * | U+0159  | \u0159     | r           | Latin small letter r with caron                   |\n * | U+015A  | \u015a     | S           | Latin capital letter S with acute                 |\n * | U+015B  | \u015b     | s           | Latin small letter s with acute                   |\n * | U+015C  | \u015c     | S           | Latin capital letter S with circumflex            |\n * | U+015D  | \u015d     | s           | Latin small letter s with circumflex              |\n * | U+015E  | \u015e     | S           | Latin capital letter S with cedilla               |\n * | U+015F  | \u015f     | s           | Latin small letter s with cedilla                 |\n * | U+0160  | \u0160     | S           | Latin capital letter S with caron                 |\n * | U+0161  | \u0161     | s           | Latin small letter s with caron                   |\n * | U+0162  | \u0162     | T           | Latin capital letter T with cedilla               |\n * | U+0163  | \u0163     | t           | Latin small letter t with cedilla                 |\n * | U+0164  | \u0164     | T           | Latin capital letter T with caron                 |\n * | U+0165  | \u0165     | t           | Latin small letter t with caron                   |\n * | U+0166  | \u0166     | T           | Latin capital letter T with stroke                |\n * | U+0167  | \u0167     | t           | Latin small letter t with stroke                  |\n * | U+0168  | \u0168     | U           | Latin capital letter U with tilde                 |\n * | U+0169  | \u0169     | u           | Latin small letter u with tilde                   |\n * | U+016A  | \u016a     | U           | Latin capital letter U with macron                |\n * | U+016B  | \u016b     | u           | Latin small letter u with macron                  |\n * | U+016C  | \u016c     | U           | Latin capital letter U with breve                 |\n * | U+016D  | \u016d     | u           | Latin small letter u with breve                   |\n * | U+016E  | \u016e     | U           | Latin capital letter U with ring above            |\n * | U+016F  | \u016f     | u           | Latin small letter u with ring above              |\n * | U+0170  | \u0170     | U           | Latin capital letter U with double acute          |\n * | U+0171  | \u0171     | u           | Latin small letter u with double acute            |\n * | U+0172  | \u0172     | U           | Latin capital letter U with ogonek                |\n * | U+0173  | \u0173     | u           | Latin small letter u with ogonek                  |\n * | U+0174  | \u0174     | W           | Latin capital letter W with circumflex            |\n * | U+0175  | \u0175     | w           | Latin small letter w with circumflex              |\n * | U+0176  | \u0176     | Y           | Latin capital letter Y with circumflex            |\n * | U+0177  | \u0177     | y           | Latin small letter y with circumflex              |\n * | U+0178  | \u0178     | Y           | Latin capital letter Y with diaeresis             |\n * | U+0179  | \u0179     | Z           | Latin capital letter Z with acute                 |\n * | U+017A  | \u017a     | z           | Latin small letter z with acute                   |\n * | U+017B  | \u017b     | Z           | Latin capital letter Z with dot above             |\n * | U+017C  | \u017c     | z           | Latin small letter z with dot above               |\n * | U+017D  | \u017d     | Z           | Latin capital letter Z with caron                 |\n * | U+017E  | \u017e     | z           | Latin small letter z with caron                   |\n * | U+017F  | \u017f     | s           | Latin small letter long s                         |\n * | U+01A0  | \u01a0     | O           | Latin capital letter O with horn                  |\n * | U+01A1  | \u01a1     | o           | Latin small letter o with horn                    |\n * | U+01AF  | \u01af     | U           | Latin capital letter U with horn                  |\n * | U+01B0  | \u01b0     | u           | Latin small letter u with horn                    |\n * | U+01CD  | \u01cd     | A           | Latin capital letter A with caron                 |\n * | U+01CE  | \u01ce     | a           | Latin small letter a with caron                   |\n * | U+01CF  | \u01cf     | I           | Latin capital letter I with caron                 |\n * | U+01D0  | \u01d0     | i           | Latin small letter i with caron                   |\n * | U+01D1  | \u01d1     | O           | Latin capital letter O with caron                 |\n * | U+01D2  | \u01d2     | o           | Latin small letter o with caron                   |\n * | U+01D3  | \u01d3     | U           | Latin capital letter U with caron                 |\n * | U+01D4  | \u01d4     | u           | Latin small letter u with caron                   |\n * | U+01D5  | \u01d5     | U           | Latin capital letter U with diaeresis and macron  |\n * | U+01D6  | \u01d6     | u           | Latin small letter u with diaeresis and macron    |\n * | U+01D7  | \u01d7     | U           | Latin capital letter U with diaeresis and acute   |\n * | U+01D8  | \u01d8     | u           | Latin small letter u with diaeresis and acute     |\n * | U+01D9  | \u01d9     | U           | Latin capital letter U with diaeresis and caron   |\n * | U+01DA  | \u01da     | u           | Latin small letter u with diaeresis and caron     |\n * | U+01DB  | \u01db     | U           | Latin capital letter U with diaeresis and grave   |\n * | U+01DC  | \u01dc     | u           | Latin small letter u with diaeresis and grave     |\n *\n * Decompositions for Latin Extended-B:\n *\n * |   Code   | Glyph | Replacement |                Description                |\n * | -------- | ----- | ----------- | ----------------------------------------- |\n * | U+0218   | \u0218     | S           | Latin capital letter S with comma below   |\n * | U+0219   | \u0219     | s           | Latin small letter s with comma below     |\n * | U+021A   | \u021a     | T           | Latin capital letter T with comma below   |\n * | U+021B   | \u021b     | t           | Latin small letter t with comma below     |\n *\n * Vowels with diacritic (Chinese, Hanyu Pinyin):\n *\n * |   Code   | Glyph | Replacement |                      Description                      |\n * | -------- | ----- | ----------- | ----------------------------------------------------- |\n * | U+0251   | \u0251     | a           | Latin small letter alpha                              |\n * | U+1EA0   | \u1ea0     | A           | Latin capital letter A with dot below                 |\n * | U+1EA1   | \u1ea1     | a           | Latin small letter a with dot below                   |\n * | U+1EA2   | \u1ea2     | A           | Latin capital letter A with hook above                |\n * | U+1EA3   | \u1ea3     | a           | Latin small letter a with hook above                  |\n * | U+1EA4   | \u1ea4     | A           | Latin capital letter A with circumflex and acute      |\n * | U+1EA5   | \u1ea5     | a           | Latin small letter a with circumflex and acute        |\n * | U+1EA6   | \u1ea6     | A           | Latin capital letter A with circumflex and grave      |\n * | U+1EA7   | \u1ea7     | a           | Latin small letter a with circumflex and grave        |\n * | U+1EA8   | \u1ea8     | A           | Latin capital letter A with circumflex and hook above |\n * | U+1EA9   | \u1ea9     | a           | Latin small letter a with circumflex and hook above   |\n * | U+1EAA   | \u1eaa     | A           | Latin capital letter A with circumflex and tilde      |\n * | U+1EAB   | \u1eab     | a           | Latin small letter a with circumflex and tilde        |\n * | U+1EA6   | \u1eac     | A           | Latin capital letter A with circumflex and dot below  |\n * | U+1EAD   | \u1ead     | a           | Latin small letter a with circumflex and dot below    |\n * | U+1EAE   | \u1eae     | A           | Latin capital letter A with breve and acute           |\n * | U+1EAF   | \u1eaf     | a           | Latin small letter a with breve and acute             |\n * | U+1EB0   | \u1eb0     | A           | Latin capital letter A with breve and grave           |\n * | U+1EB1   | \u1eb1     | a           | Latin small letter a with breve and grave             |\n * | U+1EB2   | \u1eb2     | A           | Latin capital letter A with breve and hook above      |\n * | U+1EB3   | \u1eb3     | a           | Latin small letter a with breve and hook above        |\n * | U+1EB4   | \u1eb4     | A           | Latin capital letter A with breve and tilde           |\n * | U+1EB5   | \u1eb5     | a           | Latin small letter a with breve and tilde             |\n * | U+1EB6   | \u1eb6     | A           | Latin capital letter A with breve and dot below       |\n * | U+1EB7   | \u1eb7     | a           | Latin small letter a with breve and dot below         |\n * | U+1EB8   | \u1eb8     | E           | Latin capital letter E with dot below                 |\n * | U+1EB9   | \u1eb9     | e           | Latin small letter e with dot below                   |\n * | U+1EBA   | \u1eba     | E           | Latin capital letter E with hook above                |\n * | U+1EBB   | \u1ebb     | e           | Latin small letter e with hook above                  |\n * | U+1EBC   | \u1ebc     | E           | Latin capital letter E with tilde                     |\n * | U+1EBD   | \u1ebd     | e           | Latin small letter e with tilde                       |\n * | U+1EBE   | \u1ebe     | E           | Latin capital letter E with circumflex and acute      |\n * | U+1EBF   | \u1ebf     | e           | Latin small letter e with circumflex and acute        |\n * | U+1EC0   | \u1ec0     | E           | Latin capital letter E with circumflex and grave      |\n * | U+1EC1   | \u1ec1     | e           | Latin small letter e with circumflex and grave        |\n * | U+1EC2   | \u1ec2     | E           | Latin capital letter E with circumflex and hook above |\n * | U+1EC3   | \u1ec3     | e           | Latin small letter e with circumflex and hook above   |\n * | U+1EC4   | \u1ec4     | E           | Latin capital letter E with circumflex and tilde      |\n * | U+1EC5   | \u1ec5     | e           | Latin small letter e with circumflex and tilde        |\n * | U+1EC6   | \u1ec6     | E           | Latin capital letter E with circumflex and dot below  |\n * | U+1EC7   | \u1ec7     | e           | Latin small letter e with circumflex and dot below    |\n * | U+1EC8   | \u1ec8     | I           | Latin capital letter I with hook above                |\n * | U+1EC9   | \u1ec9     | i           | Latin small letter i with hook above                  |\n * | U+1ECA   | \u1eca     | I           | Latin capital letter I with dot below                 |\n * | U+1ECB   | \u1ecb     | i           | Latin small letter i with dot below                   |\n * | U+1ECC   | \u1ecc     | O           | Latin capital letter O with dot below                 |\n * | U+1ECD   | \u1ecd     | o           | Latin small letter o with dot below                   |\n * | U+1ECE   | \u1ece     | O           | Latin capital letter O with hook above                |\n * | U+1ECF   | \u1ecf     | o           | Latin small letter o with hook above                  |\n * | U+1ED0   | \u1ed0     | O           | Latin capital letter O with circumflex and acute      |\n * | U+1ED1   | \u1ed1     | o           | Latin small letter o with circumflex and acute        |\n * | U+1ED2   | \u1ed2     | O           | Latin capital letter O with circumflex and grave      |\n * | U+1ED3   | \u1ed3     | o           | Latin small letter o with circumflex and grave        |\n * | U+1ED4   | \u1ed4     | O           | Latin capital letter O with circumflex and hook above |\n * | U+1ED5   | \u1ed5     | o           | Latin small letter o with circumflex and hook above   |\n * | U+1ED6   | \u1ed6     | O           | Latin capital letter O with circumflex and tilde      |\n * | U+1ED7   | \u1ed7     | o           | Latin small letter o with circumflex and tilde        |\n * | U+1ED8   | \u1ed8     | O           | Latin capital letter O with circumflex and dot below  |\n * | U+1ED9   | \u1ed9     | o           | Latin small letter o with circumflex and dot below    |\n * | U+1EDA   | \u1eda     | O           | Latin capital letter O with horn and acute            |\n * | U+1EDB   | \u1edb     | o           | Latin small letter o with horn and acute              |\n * | U+1EDC   | \u1edc     | O           | Latin capital letter O with horn and grave            |\n * | U+1EDD   | \u1edd     | o           | Latin small letter o with horn and grave              |\n * | U+1EDE   | \u1ede     | O           | Latin capital letter O with horn and hook above       |\n * | U+1EDF   | \u1edf     | o           | Latin small letter o with horn and hook above         |\n * | U+1EE0   | \u1ee0     | O           | Latin capital letter O with horn and tilde            |\n * | U+1EE1   | \u1ee1     | o           | Latin small letter o with horn and tilde              |\n * | U+1EE2   | \u1ee2     | O           | Latin capital letter O with horn and dot below        |\n * | U+1EE3   | \u1ee3     | o           | Latin small letter o with horn and dot below          |\n * | U+1EE4   | \u1ee4     | U           | Latin capital letter U with dot below                 |\n * | U+1EE5   | \u1ee5     | u           | Latin small letter u with dot below                   |\n * | U+1EE6   | \u1ee6     | U           | Latin capital letter U with hook above                |\n * | U+1EE7   | \u1ee7     | u           | Latin small letter u with hook above                  |\n * | U+1EE8   | \u1ee8     | U           | Latin capital letter U with horn and acute            |\n * | U+1EE9   | \u1ee9     | u           | Latin small letter u with horn and acute              |\n * | U+1EEA   | \u1eea     | U           | Latin capital letter U with horn and grave            |\n * | U+1EEB   | \u1eeb     | u           | Latin small letter u with horn and grave              |\n * | U+1EEC   | \u1eec     | U           | Latin capital letter U with horn and hook above       |\n * | U+1EED   | \u1eed     | u           | Latin small letter u with horn and hook above         |\n * | U+1EEE   | \u1eee     | U           | Latin capital letter U with horn and tilde            |\n * | U+1EEF   | \u1eef     | u           | Latin small letter u with horn and tilde              |\n * | U+1EF0   | \u1ef0     | U           | Latin capital letter U with horn and dot below        |\n * | U+1EF1   | \u1ef1     | u           | Latin small letter u with horn and dot below          |\n * | U+1EF2   | \u1ef2     | Y           | Latin capital letter Y with grave                     |\n * | U+1EF3   | \u1ef3     | y           | Latin small letter y with grave                       |\n * | U+1EF4   | \u1ef4     | Y           | Latin capital letter Y with dot below                 |\n * | U+1EF5   | \u1ef5     | y           | Latin small letter y with dot below                   |\n * | U+1EF6   | \u1ef6     | Y           | Latin capital letter Y with hook above                |\n * | U+1EF7   | \u1ef7     | y           | Latin small letter y with hook above                  |\n * | U+1EF8   | \u1ef8     | Y           | Latin capital letter Y with tilde                     |\n * | U+1EF9   | \u1ef9     | y           | Latin small letter y with tilde                       |\n *\n * German (`de_DE`), German formal (`de_DE_formal`), German (Switzerland) formal (`de_CH`),\n * and German (Switzerland) informal (`de_CH_informal`) locales:\n *\n * |   Code   | Glyph | Replacement |               Description               |\n * | -------- | ----- | ----------- | --------------------------------------- |\n * | U+00C4   | \u00c4     | Ae          | Latin capital letter A with diaeresis   |\n * | U+00E4   | \u00e4     | ae          | Latin small letter a with diaeresis     |\n * | U+00D6   | \u00d6     | Oe          | Latin capital letter O with diaeresis   |\n * | U+00F6   | \u00f6     | oe          | Latin small letter o with diaeresis     |\n * | U+00DC   | \u00dc     | Ue          | Latin capital letter U with diaeresis   |\n * | U+00FC   | \u00fc     | ue          | Latin small letter u with diaeresis     |\n * | U+00DF   | \u00df     | ss          | Latin small letter sharp s              |\n *\n * Danish (`da_DK`) locale:\n *\n * |   Code   | Glyph | Replacement |               Description               |\n * | -------- | ----- | ----------- | --------------------------------------- |\n * | U+00C6   | \u00c6     | Ae          | Latin capital letter AE                 |\n * | U+00E6   | \u00e6     | ae          | Latin small letter ae                   |\n * | U+00D8   | \u00d8     | Oe          | Latin capital letter O with stroke      |\n * | U+00F8   | \u00f8     | oe          | Latin small letter o with stroke        |\n * | U+00C5   | \u00c5     | Aa          | Latin capital letter A with ring above  |\n * | U+00E5   | \u00e5     | aa          | Latin small letter a with ring above    |\n *\n * Catalan (`ca`) locale:\n *\n * |   Code   | Glyph | Replacement |               Description               |\n * | -------- | ----- | ----------- | --------------------------------------- |\n * | U+00B7   | l\u00b7l   | ll          | Flown dot (between two Ls)              |\n *\n * Serbian (`sr_RS`) and Bosnian (`bs_BA`) locales:\n *\n * |   Code   | Glyph | Replacement |               Description               |\n * | -------- | ----- | ----------- | --------------------------------------- |\n * | U+0110   | \u0110     | DJ          | Latin capital letter D with stroke      |\n * | U+0111   | \u0111     | dj          | Latin small letter d with stroke        |\n *\n * @since 1.2.1\n * @since 4.6.0 Added locale support for `de_CH`, `de_CH_informal`, and `ca`.\n * @since 4.7.0 Added locale support for `sr_RS`.\n * @since 4.8.0 Added locale support for `bs_BA`.\n *\n * @param string $string Text that might have accent characters\n * @return string Filtered string with replaced \"nice\" characters.\n */\nfunction remove_accents( $string ) {\n\tif ( ! preg_match( '/[\\x80-\\xff]/', $string ) ) {\n\t\treturn $string;\n\t}\n\n\tif ( seems_utf8( $string ) ) {\n\t\t$chars = array(\n\t\t\t// Decompositions for Latin-1 Supplement\n\t\t\t'\u00aa' => 'a',\n\t\t\t'\u00ba' => 'o',\n\t\t\t'\u00c0' => 'A',\n\t\t\t'\u00c1' => 'A',\n\t\t\t'\u00c2' => 'A',\n\t\t\t'\u00c3' => 'A',\n\t\t\t'\u00c4' => 'A',\n\t\t\t'\u00c5' => 'A',\n\t\t\t'\u00c6' => 'AE',\n\t\t\t'\u00c7' => 'C',\n\t\t\t'\u00c8' => 'E',\n\t\t\t'\u00c9' => 'E',\n\t\t\t'\u00ca' => 'E',\n\t\t\t'\u00cb' => 'E',\n\t\t\t'\u00cc' => 'I',\n\t\t\t'\u00cd' => 'I',\n\t\t\t'\u00ce' => 'I',\n\t\t\t'\u00cf' => 'I',\n\t\t\t'\u00d0' => 'D',\n\t\t\t'\u00d1' => 'N',\n\t\t\t'\u00d2' => 'O',\n\t\t\t'\u00d3' => 'O',\n\t\t\t'\u00d4' => 'O',\n\t\t\t'\u00d5' => 'O',\n\t\t\t'\u00d6' => 'O',\n\t\t\t'\u00d9' => 'U',\n\t\t\t'\u00da' => 'U',\n\t\t\t'\u00db' => 'U',\n\t\t\t'\u00dc' => 'U',\n\t\t\t'\u00dd' => 'Y',\n\t\t\t'\u00de' => 'TH',\n\t\t\t'\u00df' => 's',\n\t\t\t'\u00e0' => 'a',\n\t\t\t'\u00e1' => 'a',\n\t\t\t'\u00e2' => 'a',\n\t\t\t'\u00e3' => 'a',\n\t\t\t'\u00e4' => 'a',\n\t\t\t'\u00e5' => 'a',\n\t\t\t'\u00e6' => 'ae',\n\t\t\t'\u00e7' => 'c',\n\t\t\t'\u00e8' => 'e',\n\t\t\t'\u00e9' => 'e',\n\t\t\t'\u00ea' => 'e',\n\t\t\t'\u00eb' => 'e',\n\t\t\t'\u00ec' => 'i',\n\t\t\t'\u00ed' => 'i',\n\t\t\t'\u00ee' => 'i',\n\t\t\t'\u00ef' => 'i',\n\t\t\t'\u00f0' => 'd',\n\t\t\t'\u00f1' => 'n',\n\t\t\t'\u00f2' => 'o',\n\t\t\t'\u00f3' => 'o',\n\t\t\t'\u00f4' => 'o',\n\t\t\t'\u00f5' => 'o',\n\t\t\t'\u00f6' => 'o',\n\t\t\t'\u00f8' => 'o',\n\t\t\t'\u00f9' => 'u',\n\t\t\t'\u00fa' => 'u',\n\t\t\t'\u00fb' => 'u',\n\t\t\t'\u00fc' => 'u',\n\t\t\t'\u00fd' => 'y',\n\t\t\t'\u00fe' => 'th',\n\t\t\t'\u00ff' => 'y',\n\t\t\t'\u00d8' => 'O',\n\t\t\t// Decompositions for Latin Extended-A\n\t\t\t'\u0100' => 'A',\n\t\t\t'\u0101' => 'a',\n\t\t\t'\u0102' => 'A',\n\t\t\t'\u0103' => 'a',\n\t\t\t'\u0104' => 'A',\n\t\t\t'\u0105' => 'a',\n\t\t\t'\u0106' => 'C',\n\t\t\t'\u0107' => 'c',\n\t\t\t'\u0108' => 'C',\n\t\t\t'\u0109' => 'c',\n\t\t\t'\u010a' => 'C',\n\t\t\t'\u010b' => 'c',\n\t\t\t'\u010c' => 'C',\n\t\t\t'\u010d' => 'c',\n\t\t\t'\u010e' => 'D',\n\t\t\t'\u010f' => 'd',\n\t\t\t'\u0110' => 'D',\n\t\t\t'\u0111' => 'd',\n\t\t\t'\u0112' => 'E',\n\t\t\t'\u0113' => 'e',\n\t\t\t'\u0114' => 'E',\n\t\t\t'\u0115' => 'e',\n\t\t\t'\u0116' => 'E',\n\t\t\t'\u0117' => 'e',\n\t\t\t'\u0118' => 'E',\n\t\t\t'\u0119' => 'e',\n\t\t\t'\u011a' => 'E',\n\t\t\t'\u011b' => 'e',\n\t\t\t'\u011c' => 'G',\n\t\t\t'\u011d' => 'g',\n\t\t\t'\u011e' => 'G',\n\t\t\t'\u011f' => 'g',\n\t\t\t'\u0120' => 'G',\n\t\t\t'\u0121' => 'g',\n\t\t\t'\u0122' => 'G',\n\t\t\t'\u0123' => 'g',\n\t\t\t'\u0124' => 'H',\n\t\t\t'\u0125' => 'h',\n\t\t\t'\u0126' => 'H',\n\t\t\t'\u0127' => 'h',\n\t\t\t'\u0128' => 'I',\n\t\t\t'\u0129' => 'i',\n\t\t\t'\u012a' => 'I',\n\t\t\t'\u012b' => 'i',\n\t\t\t'\u012c' => 'I',\n\t\t\t'\u012d' => 'i',\n\t\t\t'\u012e' => 'I',\n\t\t\t'\u012f' => 'i',\n\t\t\t'\u0130' => 'I',\n\t\t\t'\u0131' => 'i',\n\t\t\t'\u0132' => 'IJ',\n\t\t\t'\u0133' => 'ij',\n\t\t\t'\u0134' => 'J',\n\t\t\t'\u0135' => 'j',\n\t\t\t'\u0136' => 'K',\n\t\t\t'\u0137' => 'k',\n\t\t\t'\u0138' => 'k',\n\t\t\t'\u0139' => 'L',\n\t\t\t'\u013a' => 'l',\n\t\t\t'\u013b' => 'L',\n\t\t\t'\u013c' => 'l',\n\t\t\t'\u013d' => 'L',\n\t\t\t'\u013e' => 'l',\n\t\t\t'\u013f' => 'L',\n\t\t\t'\u0140' => 'l',\n\t\t\t'\u0141' => 'L',\n\t\t\t'\u0142' => 'l',\n\t\t\t'\u0143' => 'N',\n\t\t\t'\u0144' => 'n',\n\t\t\t'\u0145' => 'N',\n\t\t\t'\u0146' => 'n',\n\t\t\t'\u0147' => 'N',\n\t\t\t'\u0148' => 'n',\n\t\t\t'\u0149' => 'n',\n\t\t\t'\u014a' => 'N',\n\t\t\t'\u014b' => 'n',\n\t\t\t'\u014c' => 'O',\n\t\t\t'\u014d' => 'o',\n\t\t\t'\u014e' => 'O',\n\t\t\t'\u014f' => 'o',\n\t\t\t'\u0150' => 'O',\n\t\t\t'\u0151' => 'o',\n\t\t\t'\u0152' => 'OE',\n\t\t\t'\u0153' => 'oe',\n\t\t\t'\u0154' => 'R',\n\t\t\t'\u0155' => 'r',\n\t\t\t'\u0156' => 'R',\n\t\t\t'\u0157' => 'r',\n\t\t\t'\u0158' => 'R',\n\t\t\t'\u0159' => 'r',\n\t\t\t'\u015a' => 'S',\n\t\t\t'\u015b' => 's',\n\t\t\t'\u015c' => 'S',\n\t\t\t'\u015d' => 's',\n\t\t\t'\u015e' => 'S',\n\t\t\t'\u015f' => 's',\n\t\t\t'\u0160' => 'S',\n\t\t\t'\u0161' => 's',\n\t\t\t'\u0162' => 'T',\n\t\t\t'\u0163' => 't',\n\t\t\t'\u0164' => 'T',\n\t\t\t'\u0165' => 't',\n\t\t\t'\u0166' => 'T',\n\t\t\t'\u0167' => 't',\n\t\t\t'\u0168' => 'U',\n\t\t\t'\u0169' => 'u',\n\t\t\t'\u016a' => 'U',\n\t\t\t'\u016b' => 'u',\n\t\t\t'\u016c' => 'U',\n\t\t\t'\u016d' => 'u',\n\t\t\t'\u016e' => 'U',\n\t\t\t'\u016f' => 'u',\n\t\t\t'\u0170' => 'U',\n\t\t\t'\u0171' => 'u',\n\t\t\t'\u0172' => 'U',\n\t\t\t'\u0173' => 'u',\n\t\t\t'\u0174' => 'W',\n\t\t\t'\u0175' => 'w',\n\t\t\t'\u0176' => 'Y',\n\t\t\t'\u0177' => 'y',\n\t\t\t'\u0178' => 'Y',\n\t\t\t'\u0179' => 'Z',\n\t\t\t'\u017a' => 'z',\n\t\t\t'\u017b' => 'Z',\n\t\t\t'\u017c' => 'z',\n\t\t\t'\u017d' => 'Z',\n\t\t\t'\u017e' => 'z',\n\t\t\t'\u017f' => 's',\n\t\t\t// Decompositions for Latin Extended-B\n\t\t\t'\u0218' => 'S',\n\t\t\t'\u0219' => 's',\n\t\t\t'\u021a' => 'T',\n\t\t\t'\u021b' => 't',\n\t\t\t// Euro Sign\n\t\t\t'\u20ac' => 'E',\n\t\t\t// GBP (Pound) Sign\n\t\t\t'\u00a3' => '',\n\t\t\t// Vowels with diacritic (Vietnamese)\n\t\t\t// unmarked\n\t\t\t'\u01a0' => 'O',\n\t\t\t'\u01a1' => 'o',\n\t\t\t'\u01af' => 'U',\n\t\t\t'\u01b0' => 'u',\n\t\t\t// grave accent\n\t\t\t'\u1ea6' => 'A',\n\t\t\t'\u1ea7' => 'a',\n\t\t\t'\u1eb0' => 'A',\n\t\t\t'\u1eb1' => 'a',\n\t\t\t'\u1ec0' => 'E',\n\t\t\t'\u1ec1' => 'e',\n\t\t\t'\u1ed2' => 'O',\n\t\t\t'\u1ed3' => 'o',\n\t\t\t'\u1edc' => 'O',\n\t\t\t'\u1edd' => 'o',\n\t\t\t'\u1eea' => 'U',\n\t\t\t'\u1eeb' => 'u',\n\t\t\t'\u1ef2' => 'Y',\n\t\t\t'\u1ef3' => 'y',\n\t\t\t// hook\n\t\t\t'\u1ea2' => 'A',\n\t\t\t'\u1ea3' => 'a',\n\t\t\t'\u1ea8' => 'A',\n\t\t\t'\u1ea9' => 'a',\n\t\t\t'\u1eb2' => 'A',\n\t\t\t'\u1eb3' => 'a',\n\t\t\t'\u1eba' => 'E',\n\t\t\t'\u1ebb' => 'e',\n\t\t\t'\u1ec2' => 'E',\n\t\t\t'\u1ec3' => 'e',\n\t\t\t'\u1ec8' => 'I',\n\t\t\t'\u1ec9' => 'i',\n\t\t\t'\u1ece' => 'O',\n\t\t\t'\u1ecf' => 'o',\n\t\t\t'\u1ed4' => 'O',\n\t\t\t'\u1ed5' => 'o',\n\t\t\t'\u1ede' => 'O',\n\t\t\t'\u1edf' => 'o',\n\t\t\t'\u1ee6' => 'U',\n\t\t\t'\u1ee7' => 'u',\n\t\t\t'\u1eec' => 'U',\n\t\t\t'\u1eed' => 'u',\n\t\t\t'\u1ef6' => 'Y',\n\t\t\t'\u1ef7' => 'y',\n\t\t\t// tilde\n\t\t\t'\u1eaa' => 'A',\n\t\t\t'\u1eab' => 'a',\n\t\t\t'\u1eb4' => 'A',\n\t\t\t'\u1eb5' => 'a',\n\t\t\t'\u1ebc' => 'E',\n\t\t\t'\u1ebd' => 'e',\n\t\t\t'\u1ec4' => 'E',\n\t\t\t'\u1ec5' => 'e',\n\t\t\t'\u1ed6' => 'O',\n\t\t\t'\u1ed7' => 'o',\n\t\t\t'\u1ee0' => 'O',\n\t\t\t'\u1ee1' => 'o',\n\t\t\t'\u1eee' => 'U',\n\t\t\t'\u1eef' => 'u',\n\t\t\t'\u1ef8' => 'Y',\n\t\t\t'\u1ef9' => 'y',\n\t\t\t// acute accent\n\t\t\t'\u1ea4' => 'A',\n\t\t\t'\u1ea5' => 'a',\n\t\t\t'\u1eae' => 'A',\n\t\t\t'\u1eaf' => 'a',\n\t\t\t'\u1ebe' => 'E',\n\t\t\t'\u1ebf' => 'e',\n\t\t\t'\u1ed0' => 'O',\n\t\t\t'\u1ed1' => 'o',\n\t\t\t'\u1eda' => 'O',\n\t\t\t'\u1edb' => 'o',\n\t\t\t'\u1ee8' => 'U',\n\t\t\t'\u1ee9' => 'u',\n\t\t\t// dot below\n\t\t\t'\u1ea0' => 'A',\n\t\t\t'\u1ea1' => 'a',\n\t\t\t'\u1eac' => 'A',\n\t\t\t'\u1ead' => 'a',\n\t\t\t'\u1eb6' => 'A',\n\t\t\t'\u1eb7' => 'a',\n\t\t\t'\u1eb8' => 'E',\n\t\t\t'\u1eb9' => 'e',\n\t\t\t'\u1ec6' => 'E',\n\t\t\t'\u1ec7' => 'e',\n\t\t\t'\u1eca' => 'I',\n\t\t\t'\u1ecb' => 'i',\n\t\t\t'\u1ecc' => 'O',\n\t\t\t'\u1ecd' => 'o',\n\t\t\t'\u1ed8' => 'O',\n\t\t\t'\u1ed9' => 'o',\n\t\t\t'\u1ee2' => 'O',\n\t\t\t'\u1ee3' => 'o',\n\t\t\t'\u1ee4' => 'U',\n\t\t\t'\u1ee5' => 'u',\n\t\t\t'\u1ef0' => 'U',\n\t\t\t'\u1ef1' => 'u',\n\t\t\t'\u1ef4' => 'Y',\n\t\t\t'\u1ef5' => 'y',\n\t\t\t// Vowels with diacritic (Chinese, Hanyu Pinyin)\n\t\t\t'\u0251' => 'a',\n\t\t\t// macron\n\t\t\t'\u01d5' => 'U',\n\t\t\t'\u01d6' => 'u',\n\t\t\t// acute accent\n\t\t\t'\u01d7' => 'U',\n\t\t\t'\u01d8' => 'u',\n\t\t\t// caron\n\t\t\t'\u01cd' => 'A',\n\t\t\t'\u01ce' => 'a',\n\t\t\t'\u01cf' => 'I',\n\t\t\t'\u01d0' => 'i',\n\t\t\t'\u01d1' => 'O',\n\t\t\t'\u01d2' => 'o',\n\t\t\t'\u01d3' => 'U',\n\t\t\t'\u01d4' => 'u',\n\t\t\t'\u01d9' => 'U',\n\t\t\t'\u01da' => 'u',\n\t\t\t// grave accent\n\t\t\t'\u01db' => 'U',\n\t\t\t'\u01dc' => 'u',\n\t\t);\n\n\t\t// Used for locale-specific rules\n\t\t$locale = get_locale();\n\n\t\tif ( 'de_DE' == $locale || 'de_DE_formal' == $locale || 'de_CH' == $locale || 'de_CH_informal' == $locale ) {\n\t\t\t$chars['\u00c4'] = 'Ae';\n\t\t\t$chars['\u00e4'] = 'ae';\n\t\t\t$chars['\u00d6'] = 'Oe';\n\t\t\t$chars['\u00f6'] = 'oe';\n\t\t\t$chars['\u00dc'] = 'Ue';\n\t\t\t$chars['\u00fc'] = 'ue';\n\t\t\t$chars['\u00df'] = 'ss';\n\t\t} elseif ( 'da_DK' === $locale ) {\n\t\t\t$chars['\u00c6'] = 'Ae';\n\t\t\t$chars['\u00e6'] = 'ae';\n\t\t\t$chars['\u00d8'] = 'Oe';\n\t\t\t$chars['\u00f8'] = 'oe';\n\t\t\t$chars['\u00c5'] = 'Aa';\n\t\t\t$chars['\u00e5'] = 'aa';\n\t\t} elseif ( 'ca' === $locale ) {\n\t\t\t$chars['l\u00b7l'] = 'll';\n\t\t} elseif ( 'sr_RS' === $locale || 'bs_BA' === $locale ) {\n\t\t\t$chars['\u0110'] = 'DJ';\n\t\t\t$chars['\u0111'] = 'dj';\n\t\t}\n\n\t\t$string = strtr( $string, $chars );\n\t} else {\n\t\t$chars = array();\n\t\t// Assume ISO-8859-1 if not UTF-8\n\t\t$chars['in'] = \"\\x80\\x83\\x8a\\x8e\\x9a\\x9e\"\n\t\t\t. \"\\x9f\\xa2\\xa5\\xb5\\xc0\\xc1\\xc2\"\n\t\t\t. \"\\xc3\\xc4\\xc5\\xc7\\xc8\\xc9\\xca\"\n\t\t\t. \"\\xcb\\xcc\\xcd\\xce\\xcf\\xd1\\xd2\"\n\t\t\t. \"\\xd3\\xd4\\xd5\\xd6\\xd8\\xd9\\xda\"\n\t\t\t. \"\\xdb\\xdc\\xdd\\xe0\\xe1\\xe2\\xe3\"\n\t\t\t. \"\\xe4\\xe5\\xe7\\xe8\\xe9\\xea\\xeb\"\n\t\t\t. \"\\xec\\xed\\xee\\xef\\xf1\\xf2\\xf3\"\n\t\t\t. \"\\xf4\\xf5\\xf6\\xf8\\xf9\\xfa\\xfb\"\n\t\t\t. \"\\xfc\\xfd\\xff\";\n\n\t\t$chars['out'] = 'EfSZszYcYuAAAAAACEEEEIIIINOOOOOOUUUUYaaaaaaceeeeiiiinoooooouuuuyy';\n\n\t\t$string              = strtr( $string, $chars['in'], $chars['out'] );\n\t\t$double_chars        = array();\n\t\t$double_chars['in']  = array( \"\\x8c\", \"\\x9c\", \"\\xc6\", \"\\xd0\", \"\\xde\", \"\\xdf\", \"\\xe6\", \"\\xf0\", \"\\xfe\" );\n\t\t$double_chars['out'] = array( 'OE', 'oe', 'AE', 'DH', 'TH', 'ss', 'ae', 'dh', 'th' );\n\t\t$string              = str_replace( $double_chars['in'], $double_chars['out'], $string );\n\t}\n\n\treturn $string;\n}\n\n/**\n * Sanitizes a filename, replacing whitespace with dashes.\n *\n * Removes special characters that are illegal in filenames on certain\n * operating systems and special characters requiring special escaping\n * to manipulate at the command line. Replaces spaces and consecutive\n * dashes with a single dash. Trims period, dash and underscore from beginning\n * and end of filename. It is not guaranteed that this function will return a\n * filename that is allowed to be uploaded.\n *\n * @since 2.1.0\n *\n * @param string $filename The filename to be sanitized\n * @return string The sanitized filename\n */\nfunction sanitize_file_name( $filename ) {\n\t$filename_raw  = $filename;\n\t$special_chars = array( '?', '[', ']', '/', '\\\\', '=', '<', '>', ':', ';', ',', \"'\", '\"', '&', '$', '#', '*', '(', ')', '|', '~', '`', '!', '{', '}', '%', '+', chr( 0 ) );\n\t/**\n\t * Filters the list of characters to remove from a filename.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param array  $special_chars Characters to remove.\n\t * @param string $filename_raw  Filename as it was passed into sanitize_file_name().\n\t */\n\t$special_chars = apply_filters( 'sanitize_file_name_chars', $special_chars, $filename_raw );\n\t$filename      = preg_replace( \"#\\x{00a0}#siu\", ' ', $filename );\n\t$filename      = str_replace( $special_chars, '', $filename );\n\t$filename      = str_replace( array( '%20', '+' ), '-', $filename );\n\t$filename      = preg_replace( '/[\\r\\n\\t -]+/', '-', $filename );\n\t$filename      = trim( $filename, '.-_' );\n\n\tif ( false === strpos( $filename, '.' ) ) {\n\t\t$mime_types = wp_get_mime_types();\n\t\t$filetype   = wp_check_filetype( 'test.' . $filename, $mime_types );\n\t\tif ( $filetype['ext'] === $filename ) {\n\t\t\t$filename = 'unnamed-file.' . $filetype['ext'];\n\t\t}\n\t}\n\n\t// Split the filename into a base and extension[s]\n\t$parts = explode( '.', $filename );\n\n\t// Return if only one extension\n\tif ( count( $parts ) <= 2 ) {\n\t\t/**\n\t\t * Filters a sanitized filename string.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param string $filename     Sanitized filename.\n\t\t * @param string $filename_raw The filename prior to sanitization.\n\t\t */\n\t\treturn apply_filters( 'sanitize_file_name', $filename, $filename_raw );\n\t}\n\n\t// Process multiple extensions\n\t$filename  = array_shift( $parts );\n\t$extension = array_pop( $parts );\n\t$mimes     = get_allowed_mime_types();\n\n\t/*\n\t * Loop over any intermediate extensions. Postfix them with a trailing underscore\n\t * if they are a 2 - 5 character long alpha string not in the extension whitelist.\n\t */\n\tforeach ( (array) $parts as $part ) {\n\t\t$filename .= '.' . $part;\n\n\t\tif ( preg_match( '/^[a-zA-Z]{2,5}\\d?$/', $part ) ) {\n\t\t\t$allowed = false;\n\t\t\tforeach ( $mimes as $ext_preg => $mime_match ) {\n\t\t\t\t$ext_preg = '!^(' . $ext_preg . ')$!i';\n\t\t\t\tif ( preg_match( $ext_preg, $part ) ) {\n\t\t\t\t\t$allowed = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( ! $allowed ) {\n\t\t\t\t$filename .= '_';\n\t\t\t}\n\t\t}\n\t}\n\t$filename .= '.' . $extension;\n\t/** This filter is documented in wp-includes/formatting.php */\n\treturn apply_filters( 'sanitize_file_name', $filename, $filename_raw );\n}\n\n/**\n * Sanitizes a username, stripping out unsafe characters.\n *\n * Removes tags, octets, entities, and if strict is enabled, will only keep\n * alphanumeric, _, space, ., -, @. After sanitizing, it passes the username,\n * raw username (the username in the parameter), and the value of $strict as\n * parameters for the {@see 'sanitize_user'} filter.\n *\n * @since 2.0.0\n *\n * @param string $username The username to be sanitized.\n * @param bool   $strict   If set limits $username to specific characters. Default false.\n * @return string The sanitized username, after passing through filters.\n */\nfunction sanitize_user( $username, $strict = false ) {\n\t$raw_username = $username;\n\t$username     = wp_strip_all_tags( $username );\n\t$username     = remove_accents( $username );\n\t// Kill octets\n\t$username = preg_replace( '|%([a-fA-F0-9][a-fA-F0-9])|', '', $username );\n\t$username = preg_replace( '/&.+?;/', '', $username ); // Kill entities\n\n\t// If strict, reduce to ASCII for max portability.\n\tif ( $strict ) {\n\t\t$username = preg_replace( '|[^a-z0-9 _.\\-@]|i', '', $username );\n\t}\n\n\t$username = trim( $username );\n\t// Consolidate contiguous whitespace\n\t$username = preg_replace( '|\\s+|', ' ', $username );\n\n\t/**\n\t * Filters a sanitized username string.\n\t *\n\t * @since 2.0.1\n\t *\n\t * @param string $username     Sanitized username.\n\t * @param string $raw_username The username prior to sanitization.\n\t * @param bool   $strict       Whether to limit the sanitization to specific characters. Default false.\n\t */\n\treturn apply_filters( 'sanitize_user', $username, $raw_username, $strict );\n}\n\n/**\n * Sanitizes a string key.\n *\n * Keys are used as internal identifiers. Lowercase alphanumeric characters, dashes and underscores are allowed.\n *\n * @since 3.0.0\n *\n * @param string $key String key\n * @return string Sanitized key\n */\nfunction sanitize_key( $key ) {\n\t$raw_key = $key;\n\t$key     = strtolower( $key );\n\t$key     = preg_replace( '/[^a-z0-9_\\-]/', '', $key );\n\n\t/**\n\t * Filters a sanitized key string.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string $key     Sanitized key.\n\t * @param string $raw_key The key prior to sanitization.\n\t */\n\treturn apply_filters( 'sanitize_key', $key, $raw_key );\n}\n\n/**\n * Sanitizes a title, or returns a fallback title.\n *\n * Specifically, HTML and PHP tags are stripped. Further actions can be added\n * via the plugin API. If $title is empty and $fallback_title is set, the latter\n * will be used.\n *\n * @since 1.0.0\n *\n * @param string $title          The string to be sanitized.\n * @param string $fallback_title Optional. A title to use if $title is empty.\n * @param string $context        Optional. The operation for which the string is sanitized\n * @return string The sanitized string.\n */\nfunction sanitize_title( $title, $fallback_title = '', $context = 'save' ) {\n\t$raw_title = $title;\n\n\tif ( 'save' == $context ) {\n\t\t$title = remove_accents( $title );\n\t}\n\n\t/**\n\t * Filters a sanitized title string.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param string $title     Sanitized title.\n\t * @param string $raw_title The title prior to sanitization.\n\t * @param string $context   The context for which the title is being sanitized.\n\t */\n\t$title = apply_filters( 'sanitize_title', $title, $raw_title, $context );\n\n\tif ( '' === $title || false === $title ) {\n\t\t$title = $fallback_title;\n\t}\n\n\treturn $title;\n}\n\n/**\n * Sanitizes a title with the 'query' context.\n *\n * Used for querying the database for a value from URL.\n *\n * @since 3.1.0\n *\n * @param string $title The string to be sanitized.\n * @return string The sanitized string.\n */\nfunction sanitize_title_for_query( $title ) {\n\treturn sanitize_title( $title, '', 'query' );\n}\n\n/**\n * Sanitizes a title, replacing whitespace and a few other characters with dashes.\n *\n * Limits the output to alphanumeric characters, underscore (_) and dash (-).\n * Whitespace becomes a dash.\n *\n * @since 1.2.0\n *\n * @param string $title     The title to be sanitized.\n * @param string $raw_title Optional. Not used.\n * @param string $context   Optional. The operation for which the string is sanitized.\n * @return string The sanitized title.\n */\nfunction sanitize_title_with_dashes( $title, $raw_title = '', $context = 'display' ) {\n\t$title = strip_tags( $title );\n\t// Preserve escaped octets.\n\t$title = preg_replace( '|%([a-fA-F0-9][a-fA-F0-9])|', '---$1---', $title );\n\t// Remove percent signs that are not part of an octet.\n\t$title = str_replace( '%', '', $title );\n\t// Restore octets.\n\t$title = preg_replace( '|---([a-fA-F0-9][a-fA-F0-9])---|', '%$1', $title );\n\n\tif ( seems_utf8( $title ) ) {\n\t\tif ( function_exists( 'mb_strtolower' ) ) {\n\t\t\t$title = mb_strtolower( $title, 'UTF-8' );\n\t\t}\n\t\t$title = utf8_uri_encode( $title, 200 );\n\t}\n\n\t$title = strtolower( $title );\n\n\tif ( 'save' == $context ) {\n\t\t// Convert nbsp, ndash and mdash to hyphens\n\t\t$title = str_replace( array( '%c2%a0', '%e2%80%93', '%e2%80%94' ), '-', $title );\n\t\t// Convert nbsp, ndash and mdash HTML entities to hyphens\n\t\t$title = str_replace( array( '&nbsp;', '&#160;', '&ndash;', '&#8211;', '&mdash;', '&#8212;' ), '-', $title );\n\t\t// Convert forward slash to hyphen\n\t\t$title = str_replace( '/', '-', $title );\n\n\t\t// Strip these characters entirely\n\t\t$title = str_replace(\n\t\t\tarray(\n\t\t\t\t// soft hyphens\n\t\t\t\t'%c2%ad',\n\t\t\t\t// iexcl and iquest\n\t\t\t\t'%c2%a1',\n\t\t\t\t'%c2%bf',\n\t\t\t\t// angle quotes\n\t\t\t\t'%c2%ab',\n\t\t\t\t'%c2%bb',\n\t\t\t\t'%e2%80%b9',\n\t\t\t\t'%e2%80%ba',\n\t\t\t\t// curly quotes\n\t\t\t\t'%e2%80%98',\n\t\t\t\t'%e2%80%99',\n\t\t\t\t'%e2%80%9c',\n\t\t\t\t'%e2%80%9d',\n\t\t\t\t'%e2%80%9a',\n\t\t\t\t'%e2%80%9b',\n\t\t\t\t'%e2%80%9e',\n\t\t\t\t'%e2%80%9f',\n\t\t\t\t// copy, reg, deg, hellip and trade\n\t\t\t\t'%c2%a9',\n\t\t\t\t'%c2%ae',\n\t\t\t\t'%c2%b0',\n\t\t\t\t'%e2%80%a6',\n\t\t\t\t'%e2%84%a2',\n\t\t\t\t// acute accents\n\t\t\t\t'%c2%b4',\n\t\t\t\t'%cb%8a',\n\t\t\t\t'%cc%81',\n\t\t\t\t'%cd%81',\n\t\t\t\t// grave accent, macron, caron\n\t\t\t\t'%cc%80',\n\t\t\t\t'%cc%84',\n\t\t\t\t'%cc%8c',\n\t\t\t),\n\t\t\t'',\n\t\t\t$title\n\t\t);\n\n\t\t// Convert times to x\n\t\t$title = str_replace( '%c3%97', 'x', $title );\n\t}\n\n\t$title = preg_replace( '/&.+?;/', '', $title ); // kill entities\n\t$title = str_replace( '.', '-', $title );\n\n\t$title = preg_replace( '/[^%a-z0-9 _-]/', '', $title );\n\t$title = preg_replace( '/\\s+/', '-', $title );\n\t$title = preg_replace( '|-+|', '-', $title );\n\t$title = trim( $title, '-' );\n\n\treturn $title;\n}\n\n/**\n * Ensures a string is a valid SQL 'order by' clause.\n *\n * Accepts one or more columns, with or without a sort order (ASC / DESC).\n * e.g. 'column_1', 'column_1, column_2', 'column_1 ASC, column_2 DESC' etc.\n *\n * Also accepts 'RAND()'.\n *\n * @since 2.5.1\n *\n * @param string $orderby Order by clause to be validated.\n * @return string|false Returns $orderby if valid, false otherwise.\n */\nfunction sanitize_sql_orderby( $orderby ) {\n\tif ( preg_match( '/^\\s*(([a-z0-9_]+|`[a-z0-9_]+`)(\\s+(ASC|DESC))?\\s*(,\\s*(?=[a-z0-9_`])|$))+$/i', $orderby ) || preg_match( '/^\\s*RAND\\(\\s*\\)\\s*$/i', $orderby ) ) {\n\t\treturn $orderby;\n\t}\n\treturn false;\n}\n\n/**\n * Sanitizes an HTML classname to ensure it only contains valid characters.\n *\n * Strips the string down to A-Z,a-z,0-9,_,-. If this results in an empty\n * string then it will return the alternative value supplied.\n *\n * @todo Expand to support the full range of CDATA that a class attribute can contain.\n *\n * @since 2.8.0\n *\n * @param string $class    The classname to be sanitized\n * @param string $fallback Optional. The value to return if the sanitization ends up as an empty string.\n *  Defaults to an empty string.\n * @return string The sanitized value\n */\nfunction sanitize_html_class( $class, $fallback = '' ) {\n\t//Strip out any % encoded octets\n\t$sanitized = preg_replace( '|%[a-fA-F0-9][a-fA-F0-9]|', '', $class );\n\n\t//Limit to A-Z,a-z,0-9,_,-\n\t$sanitized = preg_replace( '/[^A-Za-z0-9_-]/', '', $sanitized );\n\n\tif ( '' == $sanitized && $fallback ) {\n\t\treturn sanitize_html_class( $fallback );\n\t}\n\t/**\n\t * Filters a sanitized HTML class string.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $sanitized The sanitized HTML class.\n\t * @param string $class     HTML class before sanitization.\n\t * @param string $fallback  The fallback string.\n\t */\n\treturn apply_filters( 'sanitize_html_class', $sanitized, $class, $fallback );\n}\n\n/**\n * Converts lone & characters into `&#038;` (a.k.a. `&amp;`)\n *\n * @since 0.71\n *\n * @param string $content    String of characters to be converted.\n * @param string $deprecated Not used.\n * @return string Converted string.\n */\nfunction convert_chars( $content, $deprecated = '' ) {\n\tif ( ! empty( $deprecated ) ) {\n\t\t_deprecated_argument( __FUNCTION__, '0.71' );\n\t}\n\n\tif ( strpos( $content, '&' ) !== false ) {\n\t\t$content = preg_replace( '/&([^#])(?![a-z1-4]{1,8};)/i', '&#038;$1', $content );\n\t}\n\n\treturn $content;\n}\n\n/**\n * Converts invalid Unicode references range to valid range.\n *\n * @since 4.3.0\n *\n * @param string $content String with entities that need converting.\n * @return string Converted string.\n */\nfunction convert_invalid_entities( $content ) {\n\t$wp_htmltranswinuni = array(\n\t\t'&#128;' => '&#8364;', // the Euro sign\n\t\t'&#129;' => '',\n\t\t'&#130;' => '&#8218;', // these are Windows CP1252 specific characters\n\t\t'&#131;' => '&#402;',  // they would look weird on non-Windows browsers\n\t\t'&#132;' => '&#8222;',\n\t\t'&#133;' => '&#8230;',\n\t\t'&#134;' => '&#8224;',\n\t\t'&#135;' => '&#8225;',\n\t\t'&#136;' => '&#710;',\n\t\t'&#137;' => '&#8240;',\n\t\t'&#138;' => '&#352;',\n\t\t'&#139;' => '&#8249;',\n\t\t'&#140;' => '&#338;',\n\t\t'&#141;' => '',\n\t\t'&#142;' => '&#381;',\n\t\t'&#143;' => '',\n\t\t'&#144;' => '',\n\t\t'&#145;' => '&#8216;',\n\t\t'&#146;' => '&#8217;',\n\t\t'&#147;' => '&#8220;',\n\t\t'&#148;' => '&#8221;',\n\t\t'&#149;' => '&#8226;',\n\t\t'&#150;' => '&#8211;',\n\t\t'&#151;' => '&#8212;',\n\t\t'&#152;' => '&#732;',\n\t\t'&#153;' => '&#8482;',\n\t\t'&#154;' => '&#353;',\n\t\t'&#155;' => '&#8250;',\n\t\t'&#156;' => '&#339;',\n\t\t'&#157;' => '',\n\t\t'&#158;' => '&#382;',\n\t\t'&#159;' => '&#376;',\n\t);\n\n\tif ( strpos( $content, '&#1' ) !== false ) {\n\t\t$content = strtr( $content, $wp_htmltranswinuni );\n\t}\n\n\treturn $content;\n}\n\n/**\n * Balances tags if forced to, or if the 'use_balanceTags' option is set to true.\n *\n * @since 0.71\n *\n * @param string $text  Text to be balanced\n * @param bool   $force If true, forces balancing, ignoring the value of the option. Default false.\n * @return string Balanced text\n */\nfunction balanceTags( $text, $force = false ) {  // phpcs:ignore WordPress.NamingConventions.ValidFunctionName.FunctionNameInvalid\n\tif ( $force || (int) get_option( 'use_balanceTags' ) === 1 ) {\n\t\treturn force_balance_tags( $text );\n\t} else {\n\t\treturn $text;\n\t}\n}\n\n/**\n * Balances tags of string using a modified stack.\n *\n * @since 2.0.4\n * @since 5.3.0 Improve accuracy and add support for custom element tags.\n *\n * @author Leonard Lin <leonard@acm.org>\n * @license GPL\n * @copyright November 4, 2001\n * @version 1.1\n * @todo Make better - change loop condition to $text in 1.2\n * @internal Modified by Scott Reilly (coffee2code) 02 Aug 2004\n *      1.1  Fixed handling of append/stack pop order of end text\n *           Added Cleaning Hooks\n *      1.0  First Version\n *\n * @param string $text Text to be balanced.\n * @return string Balanced text.\n */\nfunction force_balance_tags( $text ) {\n\t$tagstack  = array();\n\t$stacksize = 0;\n\t$tagqueue  = '';\n\t$newtext   = '';\n\t// Known single-entity/self-closing tags\n\t$single_tags = array( 'area', 'base', 'basefont', 'br', 'col', 'command', 'embed', 'frame', 'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param', 'source' );\n\t// Tags that can be immediately nested within themselves\n\t$nestable_tags = array( 'blockquote', 'div', 'object', 'q', 'span' );\n\n\t// WP bug fix for comments - in case you REALLY meant to type '< !--'\n\t$text = str_replace( '< !--', '<    !--', $text );\n\t// WP bug fix for LOVE <3 (and other situations with '<' before a number)\n\t$text = preg_replace( '#<([0-9]{1})#', '&lt;$1', $text );\n\n\t/**\n\t * Matches supported tags.\n\t *\n\t * To get the pattern as a string without the comments paste into a PHP\n\t * REPL like `php -a`.\n\t *\n\t * @see https://html.spec.whatwg.org/#elements-2\n\t * @see https://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name\n\t *\n\t * @example\n\t * ~# php -a\n\t * php > $s = [paste copied contents of expression below including parentheses];\n\t * php > echo $s;\n\t */\n\t$tag_pattern = (\n\t\t'#<' . // Start with an opening bracket.\n\t\t'(/?)' . // Group 1 - If it's a closing tag it'll have a leading slash.\n\t\t'(' . // Group 2 - Tag name.\n\t\t\t// Custom element tags have more lenient rules than HTML tag names.\n\t\t\t'(?:[a-z](?:[a-z0-9._]*)-(?:[a-z0-9._-]+)+)' .\n\t\t\t\t'|' .\n\t\t\t// Traditional tag rules approximate HTML tag names.\n\t\t\t'(?:[\\w:]+)' .\n\t\t')' .\n\t\t'(?:' .\n\t\t\t// We either immediately close the tag with its '>' and have nothing here.\n\t\t\t'\\s*' .\n\t\t\t'(/?)' . // Group 3 - \"attributes\" for empty tag.\n\t\t\t\t'|' .\n\t\t\t// Or we must start with space characters to separate the tag name from the attributes (or whitespace).\n\t\t\t'(\\s+)' . // Group 4 - Pre-attribute whitespace.\n\t\t\t'([^>]*)' . // Group 5 - Attributes.\n\t\t')' .\n\t\t'>#' // End with a closing bracket.\n\t);\n\n\twhile ( preg_match( $tag_pattern, $text, $regex ) ) {\n\t\t$full_match        = $regex[0];\n\t\t$has_leading_slash = ! empty( $regex[1] );\n\t\t$tag_name          = $regex[2];\n\t\t$tag               = strtolower( $tag_name );\n\t\t$is_single_tag     = in_array( $tag, $single_tags, true );\n\t\t$pre_attribute_ws  = isset( $regex[4] ) ? $regex[4] : '';\n\t\t$attributes        = trim( isset( $regex[5] ) ? $regex[5] : $regex[3] );\n\t\t$has_self_closer   = '/' === substr( $attributes, -1 );\n\n\t\t$newtext .= $tagqueue;\n\n\t\t$i = strpos( $text, $full_match );\n\t\t$l = strlen( $full_match );\n\n\t\t// Clear the shifter.\n\t\t$tagqueue = '';\n\t\tif ( $has_leading_slash ) { // End Tag.\n\t\t\t// If too many closing tags.\n\t\t\tif ( $stacksize <= 0 ) {\n\t\t\t\t$tag = '';\n\t\t\t\t// Or close to be safe $tag = '/' . $tag.\n\n\t\t\t\t// If stacktop value = tag close value, then pop.\n\t\t\t} elseif ( $tagstack[ $stacksize - 1 ] === $tag ) { // Found closing tag.\n\t\t\t\t$tag = '</' . $tag . '>'; // Close Tag.\n\t\t\t\tarray_pop( $tagstack );\n\t\t\t\t$stacksize--;\n\t\t\t} else { // Closing tag not at top, search for it.\n\t\t\t\tfor ( $j = $stacksize - 1; $j >= 0; $j-- ) {\n\t\t\t\t\tif ( $tagstack[ $j ] === $tag ) {\n\t\t\t\t\t\t// Add tag to tagqueue.\n\t\t\t\t\t\tfor ( $k = $stacksize - 1; $k >= $j; $k-- ) {\n\t\t\t\t\t\t\t$tagqueue .= '</' . array_pop( $tagstack ) . '>';\n\t\t\t\t\t\t\t$stacksize--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$tag = '';\n\t\t\t}\n\t\t} else { // Begin Tag.\n\t\t\tif ( $has_self_closer ) { // If it presents itself as a self-closing tag...\n\t\t\t\t// ...but it isn't a known single-entity self-closing tag, then don't let it be treated as such and\n\t\t\t\t// immediately close it with a closing tag (the tag will encapsulate no text as a result)\n\t\t\t\tif ( ! $is_single_tag ) {\n\t\t\t\t\t$attributes = trim( substr( $attributes, 0, -1 ) ) . \"></$tag\";\n\t\t\t\t}\n\t\t\t} elseif ( $is_single_tag ) { // ElseIf it's a known single-entity tag but it doesn't close itself, do so\n\t\t\t\t$pre_attribute_ws = ' ';\n\t\t\t\t$attributes      .= '/';\n\t\t\t} else { // It's not a single-entity tag.\n\t\t\t\t// If the top of the stack is the same as the tag we want to push, close previous tag.\n\t\t\t\tif ( $stacksize > 0 && ! in_array( $tag, $nestable_tags, true ) && $tagstack[ $stacksize - 1 ] === $tag ) {\n\t\t\t\t\t$tagqueue = '</' . array_pop( $tagstack ) . '>';\n\t\t\t\t\t$stacksize--;\n\t\t\t\t}\n\t\t\t\t$stacksize = array_push( $tagstack, $tag );\n\t\t\t}\n\n\t\t\t// Attributes.\n\t\t\tif ( $has_self_closer && $is_single_tag ) {\n\t\t\t\t// We need some space - avoid <br/> and prefer <br />.\n\t\t\t\t$pre_attribute_ws = ' ';\n\t\t\t}\n\n\t\t\t$tag = '<' . $tag . $pre_attribute_ws . $attributes . '>';\n\t\t\t// If already queuing a close tag, then put this tag on too.\n\t\t\tif ( ! empty( $tagqueue ) ) {\n\t\t\t\t$tagqueue .= $tag;\n\t\t\t\t$tag       = '';\n\t\t\t}\n\t\t}\n\t\t$newtext .= substr( $text, 0, $i ) . $tag;\n\t\t$text     = substr( $text, $i + $l );\n\t}\n\n\t// Clear Tag Queue.\n\t$newtext .= $tagqueue;\n\n\t// Add remaining text.\n\t$newtext .= $text;\n\n\twhile ( $x = array_pop( $tagstack ) ) {\n\t\t$newtext .= '</' . $x . '>'; // Add remaining tags to close.\n\t}\n\n\t// WP fix for the bug with HTML comments.\n\t$newtext = str_replace( '< !--', '<!--', $newtext );\n\t$newtext = str_replace( '<    !--', '< !--', $newtext );\n\n\treturn $newtext;\n}\n\n/**\n * Acts on text which is about to be edited.\n *\n * The $content is run through esc_textarea(), which uses htmlspecialchars()\n * to convert special characters to HTML entities. If `$richedit` is set to true,\n * it is simply a holder for the {@see 'format_to_edit'} filter.\n *\n * @since 0.71\n * @since 4.4.0 The `$richedit` parameter was renamed to `$rich_text` for clarity.\n *\n * @param string $content   The text about to be edited.\n * @param bool   $rich_text Optional. Whether `$content` should be considered rich text,\n *                          in which case it would not be passed through esc_textarea().\n *                          Default false.\n * @return string The text after the filter (and possibly htmlspecialchars()) has been run.\n */\nfunction format_to_edit( $content, $rich_text = false ) {\n\t/**\n\t * Filters the text to be formatted for editing.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param string $content The text, prior to formatting for editing.\n\t */\n\t$content = apply_filters( 'format_to_edit', $content );\n\tif ( ! $rich_text ) {\n\t\t$content = esc_textarea( $content );\n\t}\n\treturn $content;\n}\n\n/**\n * Add leading zeros when necessary.\n *\n * If you set the threshold to '4' and the number is '10', then you will get\n * back '0010'. If you set the threshold to '4' and the number is '5000', then you\n * will get back '5000'.\n *\n * Uses sprintf to append the amount of zeros based on the $threshold parameter\n * and the size of the number. If the number is large enough, then no zeros will\n * be appended.\n *\n * @since 0.71\n *\n * @param int $number     Number to append zeros to if not greater than threshold.\n * @param int $threshold  Digit places number needs to be to not have zeros added.\n * @return string Adds leading zeros to number if needed.\n */\nfunction zeroise( $number, $threshold ) {\n\treturn sprintf( '%0' . $threshold . 's', $number );\n}\n\n/**\n * Adds backslashes before letters and before a number at the start of a string.\n *\n * @since 0.71\n *\n * @param string $string Value to which backslashes will be added.\n * @return string String with backslashes inserted.\n */\nfunction backslashit( $string ) {\n\tif ( isset( $string[0] ) && $string[0] >= '0' && $string[0] <= '9' ) {\n\t\t$string = '\\\\\\\\' . $string;\n\t}\n\treturn addcslashes( $string, 'A..Za..z' );\n}\n\n/**\n * Appends a trailing slash.\n *\n * Will remove trailing forward and backslashes if it exists already before adding\n * a trailing forward slash. This prevents double slashing a string or path.\n *\n * The primary use of this is for paths and thus should be used for paths. It is\n * not restricted to paths and offers no specific path support.\n *\n * @since 1.2.0\n *\n * @param string $string What to add the trailing slash to.\n * @return string String with trailing slash added.\n */\nfunction trailingslashit( $string ) {\n\treturn untrailingslashit( $string ) . '/';\n}\n\n/**\n * Removes trailing forward slashes and backslashes if they exist.\n *\n * The primary use of this is for paths and thus should be used for paths. It is\n * not restricted to paths and offers no specific path support.\n *\n * @since 2.2.0\n *\n * @param string $string What to remove the trailing slashes from.\n * @return string String without the trailing slashes.\n */\nfunction untrailingslashit( $string ) {\n\treturn rtrim( $string, '/\\\\' );\n}\n\n/**\n * Adds slashes to escape strings.\n *\n * Slashes will first be removed if magic_quotes_gpc is set, see {@link\n * https://secure.php.net/magic_quotes} for more details.\n *\n * @since 0.71\n *\n * @param string $gpc The string returned from HTTP request data.\n * @return string Returns a string escaped with slashes.\n */\nfunction addslashes_gpc( $gpc ) {\n\treturn wp_slash( $gpc );\n}\n\n/**\n * Navigates through an array, object, or scalar, and removes slashes from the values.\n *\n * @since 2.0.0\n *\n * @param mixed $value The value to be stripped.\n * @return mixed Stripped value.\n */\nfunction stripslashes_deep( $value ) {\n\treturn map_deep( $value, 'stripslashes_from_strings_only' );\n}\n\n/**\n * Callback function for `stripslashes_deep()` which strips slashes from strings.\n *\n * @since 4.4.0\n *\n * @param mixed $value The array or string to be stripped.\n * @return mixed $value The stripped value.\n */\nfunction stripslashes_from_strings_only( $value ) {\n\treturn is_string( $value ) ? stripslashes( $value ) : $value;\n}\n\n/**\n * Navigates through an array, object, or scalar, and encodes the values to be used in a URL.\n *\n * @since 2.2.0\n *\n * @param mixed $value The array or string to be encoded.\n * @return mixed $value The encoded value.\n */\nfunction urlencode_deep( $value ) {\n\treturn map_deep( $value, 'urlencode' );\n}\n\n/**\n * Navigates through an array, object, or scalar, and raw-encodes the values to be used in a URL.\n *\n * @since 3.4.0\n *\n * @param mixed $value The array or string to be encoded.\n * @return mixed $value The encoded value.\n */\nfunction rawurlencode_deep( $value ) {\n\treturn map_deep( $value, 'rawurlencode' );\n}\n\n/**\n * Navigates through an array, object, or scalar, and decodes URL-encoded values\n *\n * @since 4.4.0\n *\n * @param mixed $value The array or string to be decoded.\n * @return mixed $value The decoded value.\n */\nfunction urldecode_deep( $value ) {\n\treturn map_deep( $value, 'urldecode' );\n}\n\n/**\n * Converts email addresses characters to HTML entities to block spam bots.\n *\n * @since 0.71\n *\n * @param string $email_address Email address.\n * @param int    $hex_encoding  Optional. Set to 1 to enable hex encoding.\n * @return string Converted email address.\n */\nfunction antispambot( $email_address, $hex_encoding = 0 ) {\n\t$email_no_spam_address = '';\n\tfor ( $i = 0, $len = strlen( $email_address ); $i < $len; $i++ ) {\n\t\t$j = rand( 0, 1 + $hex_encoding );\n\t\tif ( $j == 0 ) {\n\t\t\t$email_no_spam_address .= '&#' . ord( $email_address[ $i ] ) . ';';\n\t\t} elseif ( $j == 1 ) {\n\t\t\t$email_no_spam_address .= $email_address[ $i ];\n\t\t} elseif ( $j == 2 ) {\n\t\t\t$email_no_spam_address .= '%' . zeroise( dechex( ord( $email_address[ $i ] ) ), 2 );\n\t\t}\n\t}\n\n\treturn str_replace( '@', '&#64;', $email_no_spam_address );\n}\n\n/**\n * Callback to convert URI match to HTML A element.\n *\n * This function was backported from 2.5.0 to 2.3.2. Regex callback for make_clickable().\n *\n * @since 2.3.2\n * @access private\n *\n * @param array $matches Single Regex Match.\n * @return string HTML A element with URI address.\n */\nfunction _make_url_clickable_cb( $matches ) {\n\t$url = $matches[2];\n\n\tif ( ')' == $matches[3] && strpos( $url, '(' ) ) {\n\t\t// If the trailing character is a closing parethesis, and the URL has an opening parenthesis in it, add the closing parenthesis to the URL.\n\t\t// Then we can let the parenthesis balancer do its thing below.\n\t\t$url   .= $matches[3];\n\t\t$suffix = '';\n\t} else {\n\t\t$suffix = $matches[3];\n\t}\n\n\t// Include parentheses in the URL only if paired\n\twhile ( substr_count( $url, '(' ) < substr_count( $url, ')' ) ) {\n\t\t$suffix = strrchr( $url, ')' ) . $suffix;\n\t\t$url    = substr( $url, 0, strrpos( $url, ')' ) );\n\t}\n\n\t$url = esc_url( $url );\n\tif ( empty( $url ) ) {\n\t\treturn $matches[0];\n\t}\n\n\tif ( 'comment_text' === current_filter() ) {\n\t\t$rel = 'nofollow ugc';\n\t} else {\n\t\t$rel = 'nofollow';\n\t}\n\n\t/**\n\t * Filters the rel value that is added to URL matches converted to links.\n\t *\n\t * @since 5.3.0\n\t *\n\t * @param string $rel The rel value.\n\t * @param string $url The matched URL being converted to a link tag.\n\t */\n\t$rel = apply_filters( 'make_clickable_rel', $rel, $url );\n\t$rel = esc_attr( $rel );\n\n\treturn $matches[1] . \"<a href=\\\"$url\\\" rel=\\\"$rel\\\">$url</a>\" . $suffix;\n}\n\n/**\n * Callback to convert URL match to HTML A element.\n *\n * This function was backported from 2.5.0 to 2.3.2. Regex callback for make_clickable().\n *\n * @since 2.3.2\n * @access private\n *\n * @param array $matches Single Regex Match.\n * @return string HTML A element with URL address.\n */\nfunction _make_web_ftp_clickable_cb( $matches ) {\n\t$ret  = '';\n\t$dest = $matches[2];\n\t$dest = 'http://' . $dest;\n\n\t// removed trailing [.,;:)] from URL\n\tif ( in_array( substr( $dest, -1 ), array( '.', ',', ';', ':', ')' ) ) === true ) {\n\t\t$ret  = substr( $dest, -1 );\n\t\t$dest = substr( $dest, 0, strlen( $dest ) - 1 );\n\t}\n\n\t$dest = esc_url( $dest );\n\tif ( empty( $dest ) ) {\n\t\treturn $matches[0];\n\t}\n\n\tif ( 'comment_text' === current_filter() ) {\n\t\t$rel = 'nofollow ugc';\n\t} else {\n\t\t$rel = 'nofollow';\n\t}\n\n\t/** This filter is documented in wp-includes/formatting.php */\n\t$rel = apply_filters( 'make_clickable_rel', $rel, $dest );\n\t$rel = esc_attr( $rel );\n\n\treturn $matches[1] . \"<a href=\\\"$dest\\\" rel=\\\"$rel\\\">$dest</a>$ret\";\n}\n\n/**\n * Callback to convert email address match to HTML A element.\n *\n * This function was backported from 2.5.0 to 2.3.2. Regex callback for make_clickable().\n *\n * @since 2.3.2\n * @access private\n *\n * @param array $matches Single Regex Match.\n * @return string HTML A element with email address.\n */\nfunction _make_email_clickable_cb( $matches ) {\n\t$email = $matches[2] . '@' . $matches[3];\n\treturn $matches[1] . \"<a href=\\\"mailto:$email\\\">$email</a>\";\n}\n\n/**\n * Convert plaintext URI to HTML links.\n *\n * Converts URI, www and ftp, and email addresses. Finishes by fixing links\n * within links.\n *\n * @since 0.71\n *\n * @param string $text Content to convert URIs.\n * @return string Content with converted URIs.\n */\nfunction make_clickable( $text ) {\n\t$r               = '';\n\t$textarr         = preg_split( '/(<[^<>]+>)/', $text, -1, PREG_SPLIT_DELIM_CAPTURE ); // split out HTML tags\n\t$nested_code_pre = 0; // Keep track of how many levels link is nested inside <pre> or <code>\n\tforeach ( $textarr as $piece ) {\n\n\t\tif ( preg_match( '|^<code[\\s>]|i', $piece ) || preg_match( '|^<pre[\\s>]|i', $piece ) || preg_match( '|^<script[\\s>]|i', $piece ) || preg_match( '|^<style[\\s>]|i', $piece ) ) {\n\t\t\t$nested_code_pre++;\n\t\t} elseif ( $nested_code_pre && ( '</code>' === strtolower( $piece ) || '</pre>' === strtolower( $piece ) || '</script>' === strtolower( $piece ) || '</style>' === strtolower( $piece ) ) ) {\n\t\t\t$nested_code_pre--;\n\t\t}\n\n\t\tif ( $nested_code_pre || empty( $piece ) || ( $piece[0] === '<' && ! preg_match( '|^<\\s*[\\w]{1,20}+://|', $piece ) ) ) {\n\t\t\t$r .= $piece;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Long strings might contain expensive edge cases ...\n\t\tif ( 10000 < strlen( $piece ) ) {\n\t\t\t// ... break it up\n\t\t\tforeach ( _split_str_by_whitespace( $piece, 2100 ) as $chunk ) { // 2100: Extra room for scheme and leading and trailing paretheses\n\t\t\t\tif ( 2101 < strlen( $chunk ) ) {\n\t\t\t\t\t$r .= $chunk; // Too big, no whitespace: bail.\n\t\t\t\t} else {\n\t\t\t\t\t$r .= make_clickable( $chunk );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$ret = \" $piece \"; // Pad with whitespace to simplify the regexes\n\n\t\t\t$url_clickable = '~\n\t\t\t\t([\\\\s(<.,;:!?])                                        # 1: Leading whitespace, or punctuation\n\t\t\t\t(                                                      # 2: URL\n\t\t\t\t\t[\\\\w]{1,20}+://                                # Scheme and hier-part prefix\n\t\t\t\t\t(?=\\S{1,2000}\\s)                               # Limit to URLs less than about 2000 characters long\n\t\t\t\t\t[\\\\w\\\\x80-\\\\xff#%\\\\~/@\\\\[\\\\]*(+=&$-]*+         # Non-punctuation URL character\n\t\t\t\t\t(?:                                            # Unroll the Loop: Only allow puctuation URL character if followed by a non-punctuation URL character\n\t\t\t\t\t\t[\\'.,;:!?)]                            # Punctuation URL character\n\t\t\t\t\t\t[\\\\w\\\\x80-\\\\xff#%\\\\~/@\\\\[\\\\]*(+=&$-]++ # Non-punctuation URL character\n\t\t\t\t\t)*\n\t\t\t\t)\n\t\t\t\t(\\)?)                                                  # 3: Trailing closing parenthesis (for parethesis balancing post processing)\n\t\t\t~xS';\n\t\t\t// The regex is a non-anchored pattern and does not have a single fixed starting character.\n\t\t\t// Tell PCRE to spend more time optimizing since, when used on a page load, it will probably be used several times.\n\n\t\t\t$ret = preg_replace_callback( $url_clickable, '_make_url_clickable_cb', $ret );\n\n\t\t\t$ret = preg_replace_callback( '#([\\s>])((www|ftp)\\.[\\w\\\\x80-\\\\xff\\#$%&~/.\\-;:=,?@\\[\\]+]+)#is', '_make_web_ftp_clickable_cb', $ret );\n\t\t\t$ret = preg_replace_callback( '#([\\s>])([.0-9a-z_+-]+)@(([0-9a-z-]+\\.)+[0-9a-z]{2,})#i', '_make_email_clickable_cb', $ret );\n\n\t\t\t$ret = substr( $ret, 1, -1 ); // Remove our whitespace padding.\n\t\t\t$r  .= $ret;\n\t\t}\n\t}\n\n\t// Cleanup of accidental links within links\n\treturn preg_replace( '#(<a([ \\r\\n\\t]+[^>]+?>|>))<a [^>]+?>([^>]+?)</a></a>#i', '$1$3</a>', $r );\n}\n\n/**\n * Breaks a string into chunks by splitting at whitespace characters.\n * The length of each returned chunk is as close to the specified length goal as possible,\n * with the caveat that each chunk includes its trailing delimiter.\n * Chunks longer than the goal are guaranteed to not have any inner whitespace.\n *\n * Joining the returned chunks with empty delimiters reconstructs the input string losslessly.\n *\n * Input string must have no null characters (or eventual transformations on output chunks must not care about null characters)\n *\n *     _split_str_by_whitespace( \"1234 67890 1234 67890a cd 1234   890 123456789 1234567890a    45678   1 3 5 7 90 \", 10 ) ==\n *     array (\n *         0 => '1234 67890 ',  // 11 characters: Perfect split\n *         1 => '1234 ',        //  5 characters: '1234 67890a' was too long\n *         2 => '67890a cd ',   // 10 characters: '67890a cd 1234' was too long\n *         3 => '1234   890 ',  // 11 characters: Perfect split\n *         4 => '123456789 ',   // 10 characters: '123456789 1234567890a' was too long\n *         5 => '1234567890a ', // 12 characters: Too long, but no inner whitespace on which to split\n *         6 => '   45678   ',  // 11 characters: Perfect split\n *         7 => '1 3 5 7 90 ',  // 11 characters: End of $string\n *     );\n *\n * @since 3.4.0\n * @access private\n *\n * @param string $string The string to split.\n * @param int    $goal   The desired chunk length.\n * @return array Numeric array of chunks.\n */\nfunction _split_str_by_whitespace( $string, $goal ) {\n\t$chunks = array();\n\n\t$string_nullspace = strtr( $string, \"\\r\\n\\t\\v\\f \", \"\\000\\000\\000\\000\\000\\000\" );\n\n\twhile ( $goal < strlen( $string_nullspace ) ) {\n\t\t$pos = strrpos( substr( $string_nullspace, 0, $goal + 1 ), \"\\000\" );\n\n\t\tif ( false === $pos ) {\n\t\t\t$pos = strpos( $string_nullspace, \"\\000\", $goal + 1 );\n\t\t\tif ( false === $pos ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t$chunks[]         = substr( $string, 0, $pos + 1 );\n\t\t$string           = substr( $string, $pos + 1 );\n\t\t$string_nullspace = substr( $string_nullspace, $pos + 1 );\n\t}\n\n\tif ( $string ) {\n\t\t$chunks[] = $string;\n\t}\n\n\treturn $chunks;\n}\n\n/**\n * Callback to add a rel attribute to HTML A element.\n *\n * Will remove already existing string before adding to prevent invalidating (X)HTML.\n *\n * @since 5.3.0\n *\n * @param array  $matches Single match.\n * @param string $rel     The rel attribute to add.\n * @return string HTML A element with the added rel attribute.\n */\nfunction wp_rel_callback( $matches, $rel ) {\n\t$text = $matches[1];\n\t$atts = wp_kses_hair( $matches[1], wp_allowed_protocols() );\n\n\tif ( ! empty( $atts['href'] ) ) {\n\t\tif ( in_array( strtolower( wp_parse_url( $atts['href']['value'], PHP_URL_SCHEME ) ), array( 'http', 'https' ), true ) ) {\n\t\t\tif ( strtolower( wp_parse_url( $atts['href']['value'], PHP_URL_HOST ) ) === strtolower( wp_parse_url( home_url(), PHP_URL_HOST ) ) ) {\n\t\t\t\treturn \"<a $text>\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( ! empty( $atts['rel'] ) ) {\n\t\t$parts     = array_map( 'trim', explode( ' ', $atts['rel']['value'] ) );\n\t\t$rel_array = array_map( 'trim', explode( ' ', $rel ) );\n\t\t$parts     = array_unique( array_merge( $parts, $rel_array ) );\n\t\t$rel       = implode( ' ', $parts );\n\t\tunset( $atts['rel'] );\n\n\t\t$html = '';\n\t\tforeach ( $atts as $name => $value ) {\n\t\t\tif ( isset( $value['vless'] ) && 'y' === $value['vless'] ) {\n\t\t\t\t$html .= $name . ' ';\n\t\t\t} else {\n\t\t\t\t$html .= \"{$name}=\\\"\" . esc_attr( $value['value'] ) . '\" ';\n\t\t\t}\n\t\t}\n\t\t$text = trim( $html );\n\t}\n\treturn \"<a $text rel=\\\"\" . esc_attr( $rel ) . '\">';\n}\n\n/**\n * Adds `rel=\"nofollow\"` string to all HTML A elements in content.\n *\n * @since 1.5.0\n *\n * @param string $text Content that may contain HTML A elements.\n * @return string Converted content.\n */\nfunction wp_rel_nofollow( $text ) {\n\t// This is a pre-save filter, so text is already escaped.\n\t$text = stripslashes( $text );\n\t$text = preg_replace_callback(\n\t\t'|<a (.+?)>|i',\n\t\tfunction( $matches ) {\n\t\t\treturn wp_rel_callback( $matches, 'nofollow' );\n\t\t},\n\t\t$text\n\t);\n\treturn wp_slash( $text );\n}\n\n/**\n * Callback to add `rel=\"nofollow\"` string to HTML A element.\n *\n * @since 2.3.0\n * @deprecated 5.3.0 Use wp_rel_callback()\n *\n * @param array $matches Single match.\n * @return string HTML A Element with `rel=\"nofollow\"`.\n */\nfunction wp_rel_nofollow_callback( $matches ) {\n\treturn wp_rel_callback( $matches, 'nofollow' );\n}\n\n/**\n * Adds `rel=\"nofollow ugc\"` string to all HTML A elements in content.\n *\n * @since 5.3.0\n *\n * @param string $text Content that may contain HTML A elements.\n * @return string Converted content.\n */\nfunction wp_rel_ugc( $text ) {\n\t// This is a pre-save filter, so text is already escaped.\n\t$text = stripslashes( $text );\n\t$text = preg_replace_callback(\n\t\t'|<a (.+?)>|i',\n\t\tfunction( $matches ) {\n\t\t\treturn wp_rel_callback( $matches, 'nofollow ugc' );\n\t\t},\n\t\t$text\n\t);\n\treturn wp_slash( $text );\n}\n\n/**\n * Adds rel noreferrer and noopener to all HTML A elements that have a target.\n *\n * @since 5.1.0\n *\n * @param string $text Content that may contain HTML A elements.\n * @return string Converted content.\n */\nfunction wp_targeted_link_rel( $text ) {\n\t// Don't run (more expensive) regex if no links with targets.\n\tif ( stripos( $text, 'target' ) === false || stripos( $text, '<a ' ) === false || is_serialized( $text ) ) {\n\t\treturn $text;\n\t}\n\n\t$script_and_style_regex = '/<(script|style).*?<\\/\\\\1>/si';\n\n\tpreg_match_all( $script_and_style_regex, $text, $matches );\n\t$extra_parts = $matches[0];\n\t$html_parts  = preg_split( $script_and_style_regex, $text );\n\n\tforeach ( $html_parts as &$part ) {\n\t\t$part = preg_replace_callback( '|<a\\s([^>]*target\\s*=[^>]*)>|i', 'wp_targeted_link_rel_callback', $part );\n\t}\n\n\t$text = '';\n\tfor ( $i = 0; $i < count( $html_parts ); $i++ ) {\n\t\t$text .= $html_parts[ $i ];\n\t\tif ( isset( $extra_parts[ $i ] ) ) {\n\t\t\t$text .= $extra_parts[ $i ];\n\t\t}\n\t}\n\n\treturn $text;\n}\n\n/**\n * Callback to add rel=\"noreferrer noopener\" string to HTML A element.\n *\n * Will not duplicate existing noreferrer and noopener values\n * to prevent from invalidating the HTML.\n *\n * @since 5.1.0\n *\n * @param array $matches Single Match\n * @return string HTML A Element with rel noreferrer noopener in addition to any existing values\n */\nfunction wp_targeted_link_rel_callback( $matches ) {\n\t$link_html          = $matches[1];\n\t$original_link_html = $link_html;\n\n\t// Consider the html escaped if there are no unescaped quotes\n\t$is_escaped = ! preg_match( '/(^|[^\\\\\\\\])[\\'\"]/', $link_html );\n\tif ( $is_escaped ) {\n\t\t// Replace only the quotes so that they are parsable by wp_kses_hair, leave the rest as is\n\t\t$link_html = preg_replace( '/\\\\\\\\([\\'\"])/', '$1', $link_html );\n\t}\n\n\t$atts = wp_kses_hair( $link_html, wp_allowed_protocols() );\n\n\t/**\n\t * Filters the rel values that are added to links with `target` attribute.\n\t *\n\t * @since 5.1.0\n\t *\n\t * @param string $rel       The rel values.\n\t * @param string $link_html The matched content of the link tag including all HTML attributes.\n\t */\n\t$rel = apply_filters( 'wp_targeted_link_rel', 'noopener noreferrer', $link_html );\n\n\t// Return early if no rel values to be added or if no actual target attribute\n\tif ( ! $rel || ! isset( $atts['target'] ) ) {\n\t\treturn \"<a $original_link_html>\";\n\t}\n\n\tif ( isset( $atts['rel'] ) ) {\n\t\t$all_parts = preg_split( '/\\s/', \"{$atts['rel']['value']} $rel\", -1, PREG_SPLIT_NO_EMPTY );\n\t\t$rel       = implode( ' ', array_unique( $all_parts ) );\n\t}\n\n\t$atts['rel']['whole'] = 'rel=\"' . esc_attr( $rel ) . '\"';\n\t$link_html            = join( ' ', array_column( $atts, 'whole' ) );\n\n\tif ( $is_escaped ) {\n\t\t$link_html = preg_replace( '/[\\'\"]/', '\\\\\\\\$0', $link_html );\n\t}\n\n\treturn \"<a $link_html>\";\n}\n\n/**\n * Adds all filters modifying the rel attribute of targeted links.\n *\n * @since 5.1.0\n */\nfunction wp_init_targeted_link_rel_filters() {\n\t$filters = array(\n\t\t'title_save_pre',\n\t\t'content_save_pre',\n\t\t'excerpt_save_pre',\n\t\t'content_filtered_save_pre',\n\t\t'pre_comment_content',\n\t\t'pre_term_description',\n\t\t'pre_link_description',\n\t\t'pre_link_notes',\n\t\t'pre_user_description',\n\t);\n\n\tforeach ( $filters as $filter ) {\n\t\tadd_filter( $filter, 'wp_targeted_link_rel' );\n\t};\n}\n\n/**\n * Removes all filters modifying the rel attribute of targeted links.\n *\n * @since 5.1.0\n */\nfunction wp_remove_targeted_link_rel_filters() {\n\t$filters = array(\n\t\t'title_save_pre',\n\t\t'content_save_pre',\n\t\t'excerpt_save_pre',\n\t\t'content_filtered_save_pre',\n\t\t'pre_comment_content',\n\t\t'pre_term_description',\n\t\t'pre_link_description',\n\t\t'pre_link_notes',\n\t\t'pre_user_description',\n\t);\n\n\tforeach ( $filters as $filter ) {\n\t\tremove_filter( $filter, 'wp_targeted_link_rel' );\n\t};\n}\n\n/**\n * Convert one smiley code to the icon graphic file equivalent.\n *\n * Callback handler for convert_smilies().\n *\n * Looks up one smiley code in the $wpsmiliestrans global array and returns an\n * `<img>` string for that smiley.\n *\n * @since 2.8.0\n *\n * @global array $wpsmiliestrans\n *\n * @param array $matches Single match. Smiley code to convert to image.\n * @return string Image string for smiley.\n */\nfunction translate_smiley( $matches ) {\n\tglobal $wpsmiliestrans;\n\n\tif ( count( $matches ) == 0 ) {\n\t\treturn '';\n\t}\n\n\t$smiley = trim( reset( $matches ) );\n\t$img    = $wpsmiliestrans[ $smiley ];\n\n\t$matches    = array();\n\t$ext        = preg_match( '/\\.([^.]+)$/', $img, $matches ) ? strtolower( $matches[1] ) : false;\n\t$image_exts = array( 'jpg', 'jpeg', 'jpe', 'gif', 'png' );\n\n\t// Don't convert smilies that aren't images - they're probably emoji.\n\tif ( ! in_array( $ext, $image_exts ) ) {\n\t\treturn $img;\n\t}\n\n\t/**\n\t * Filters the Smiley image URL before it's used in the image element.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param string $smiley_url URL for the smiley image.\n\t * @param string $img        Filename for the smiley image.\n\t * @param string $site_url   Site URL, as returned by site_url().\n\t */\n\t$src_url = apply_filters( 'smilies_src', includes_url( \"images/smilies/$img\" ), $img, site_url() );\n\n\treturn sprintf( '<img src=\"%s\" alt=\"%s\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />', esc_url( $src_url ), esc_attr( $smiley ) );\n}\n\n/**\n * Convert text equivalent of smilies to images.\n *\n * Will only convert smilies if the option 'use_smilies' is true and the global\n * used in the function isn't empty.\n *\n * @since 0.71\n *\n * @global string|array $wp_smiliessearch\n *\n * @param string $text Content to convert smilies from text.\n * @return string Converted content with text smilies replaced with images.\n */\nfunction convert_smilies( $text ) {\n\tglobal $wp_smiliessearch;\n\t$output = '';\n\tif ( get_option( 'use_smilies' ) && ! empty( $wp_smiliessearch ) ) {\n\t\t// HTML loop taken from texturize function, could possible be consolidated\n\t\t$textarr = preg_split( '/(<.*>)/U', $text, -1, PREG_SPLIT_DELIM_CAPTURE ); // capture the tags as well as in between\n\t\t$stop    = count( $textarr );// loop stuff\n\n\t\t// Ignore proessing of specific tags\n\t\t$tags_to_ignore       = 'code|pre|style|script|textarea';\n\t\t$ignore_block_element = '';\n\n\t\tfor ( $i = 0; $i < $stop; $i++ ) {\n\t\t\t$content = $textarr[ $i ];\n\n\t\t\t// If we're in an ignore block, wait until we find its closing tag\n\t\t\tif ( '' == $ignore_block_element && preg_match( '/^<(' . $tags_to_ignore . ')[^>]*>/', $content, $matches ) ) {\n\t\t\t\t$ignore_block_element = $matches[1];\n\t\t\t}\n\n\t\t\t// If it's not a tag and not in ignore block\n\t\t\tif ( '' == $ignore_block_element && strlen( $content ) > 0 && '<' != $content[0] ) {\n\t\t\t\t$content = preg_replace_callback( $wp_smiliessearch, 'translate_smiley', $content );\n\t\t\t}\n\n\t\t\t// did we exit ignore block\n\t\t\tif ( '' != $ignore_block_element && '</' . $ignore_block_element . '>' == $content ) {\n\t\t\t\t$ignore_block_element = '';\n\t\t\t}\n\n\t\t\t$output .= $content;\n\t\t}\n\t} else {\n\t\t// return default text.\n\t\t$output = $text;\n\t}\n\treturn $output;\n}\n\n/**\n * Verifies that an email is valid.\n *\n * Does not grok i18n domains. Not RFC compliant.\n *\n * @since 0.71\n *\n * @param string $email      Email address to verify.\n * @param bool   $deprecated Deprecated.\n * @return string|false Valid email address on success, false on failure.\n */\nfunction is_email( $email, $deprecated = false ) {\n\tif ( ! empty( $deprecated ) ) {\n\t\t_deprecated_argument( __FUNCTION__, '3.0.0' );\n\t}\n\n\t// Test for the minimum length the email can be\n\tif ( strlen( $email ) < 6 ) {\n\t\t/**\n\t\t * Filters whether an email address is valid.\n\t\t *\n\t\t * This filter is evaluated under several different contexts, such as 'email_too_short',\n\t\t * 'email_no_at', 'local_invalid_chars', 'domain_period_sequence', 'domain_period_limits',\n\t\t * 'domain_no_periods', 'sub_hyphen_limits', 'sub_invalid_chars', or no specific context.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param string|false $is_email The email address if successfully passed the is_email() checks, false otherwise.\n\t\t * @param string       $email    The email address being checked.\n\t\t * @param string       $context  Context under which the email was tested.\n\t\t */\n\t\treturn apply_filters( 'is_email', false, $email, 'email_too_short' );\n\t}\n\n\t// Test for an @ character after the first position\n\tif ( strpos( $email, '@', 1 ) === false ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'is_email', false, $email, 'email_no_at' );\n\t}\n\n\t// Split out the local and domain parts\n\tlist( $local, $domain ) = explode( '@', $email, 2 );\n\n\t// LOCAL PART\n\t// Test for invalid characters\n\tif ( ! preg_match( '/^[a-zA-Z0-9!#$%&\\'*+\\/=?^_`{|}~\\.-]+$/', $local ) ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'is_email', false, $email, 'local_invalid_chars' );\n\t}\n\n\t// DOMAIN PART\n\t// Test for sequences of periods\n\tif ( preg_match( '/\\.{2,}/', $domain ) ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'is_email', false, $email, 'domain_period_sequence' );\n\t}\n\n\t// Test for leading and trailing periods and whitespace\n\tif ( trim( $domain, \" \\t\\n\\r\\0\\x0B.\" ) !== $domain ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'is_email', false, $email, 'domain_period_limits' );\n\t}\n\n\t// Split the domain into subs\n\t$subs = explode( '.', $domain );\n\n\t// Assume the domain will have at least two subs\n\tif ( 2 > count( $subs ) ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'is_email', false, $email, 'domain_no_periods' );\n\t}\n\n\t// Loop through each sub\n\tforeach ( $subs as $sub ) {\n\t\t// Test for leading and trailing hyphens and whitespace\n\t\tif ( trim( $sub, \" \\t\\n\\r\\0\\x0B-\" ) !== $sub ) {\n\t\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\t\treturn apply_filters( 'is_email', false, $email, 'sub_hyphen_limits' );\n\t\t}\n\n\t\t// Test for invalid characters\n\t\tif ( ! preg_match( '/^[a-z0-9-]+$/i', $sub ) ) {\n\t\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\t\treturn apply_filters( 'is_email', false, $email, 'sub_invalid_chars' );\n\t\t}\n\t}\n\n\t// Congratulations your email made it!\n\t/** This filter is documented in wp-includes/formatting.php */\n\treturn apply_filters( 'is_email', $email, $email, null );\n}\n\n/**\n * Convert to ASCII from email subjects.\n *\n * @since 1.2.0\n *\n * @param string $string Subject line\n * @return string Converted string to ASCII\n */\nfunction wp_iso_descrambler( $string ) {\n\t/* this may only work with iso-8859-1, I'm afraid */\n\tif ( ! preg_match( '#\\=\\?(.+)\\?Q\\?(.+)\\?\\=#i', $string, $matches ) ) {\n\t\treturn $string;\n\t} else {\n\t\t$subject = str_replace( '_', ' ', $matches[2] );\n\t\treturn preg_replace_callback( '#\\=([0-9a-f]{2})#i', '_wp_iso_convert', $subject );\n\t}\n}\n\n/**\n * Helper function to convert hex encoded chars to ASCII\n *\n * @since 3.1.0\n * @access private\n *\n * @param array $match The preg_replace_callback matches array\n * @return string Converted chars\n */\nfunction _wp_iso_convert( $match ) {\n\treturn chr( hexdec( strtolower( $match[1] ) ) );\n}\n\n/**\n * Returns a date in the GMT equivalent.\n *\n * Requires and returns a date in the Y-m-d H:i:s format.\n * Return format can be overridden using the $format parameter.\n *\n * @since 1.2.0\n *\n * @param string $string The date to be converted.\n * @param string $format The format string for the returned date. Default 'Y-m-d H:i:s'.\n * @return string GMT version of the date provided.\n */\nfunction get_gmt_from_date( $string, $format = 'Y-m-d H:i:s' ) {\n\t$datetime = date_create( $string, wp_timezone() );\n\n\tif ( false === $datetime ) {\n\t\treturn gmdate( $format, 0 );\n\t}\n\n\treturn $datetime->setTimezone( new DateTimeZone( 'UTC' ) )->format( $format );\n}\n\n/**\n * Converts a GMT date into the correct format for the blog.\n *\n * Requires and returns a date in the Y-m-d H:i:s format.\n * Return format can be overridden using the $format parameter.\n *\n * @since 1.2.0\n *\n * @param string $string The date to be converted.\n * @param string $format The format string for the returned date. Default 'Y-m-d H:i:s'.\n * @return string Formatted date relative to the timezone.\n */\nfunction get_date_from_gmt( $string, $format = 'Y-m-d H:i:s' ) {\n\t$datetime = date_create( $string, new DateTimeZone( 'UTC' ) );\n\n\tif ( false === $datetime ) {\n\t\treturn gmdate( $format, 0 );\n\t}\n\n\treturn $datetime->setTimezone( wp_timezone() )->format( $format );\n}\n\n/**\n * Computes an offset in seconds from an iso8601 timezone.\n *\n * @since 1.5.0\n *\n * @param string $timezone Either 'Z' for 0 offset or '\u00b1hhmm'.\n * @return int|float The offset in seconds.\n */\nfunction iso8601_timezone_to_offset( $timezone ) {\n\t// $timezone is either 'Z' or '[+|-]hhmm'\n\tif ( $timezone == 'Z' ) {\n\t\t$offset = 0;\n\t} else {\n\t\t$sign    = ( substr( $timezone, 0, 1 ) == '+' ) ? 1 : -1;\n\t\t$hours   = intval( substr( $timezone, 1, 2 ) );\n\t\t$minutes = intval( substr( $timezone, 3, 4 ) ) / 60;\n\t\t$offset  = $sign * HOUR_IN_SECONDS * ( $hours + $minutes );\n\t}\n\treturn $offset;\n}\n\n/**\n * Converts an iso8601 (Ymd\\TH:i:sO) date to MySQL DateTime (Y-m-d H:i:s) format used by post_date[_gmt].\n *\n * @since 1.5.0\n *\n * @param string $date_string Date and time in ISO 8601 format {@link https://en.wikipedia.org/wiki/ISO_8601}.\n * @param string $timezone    Optional. If set to 'gmt' returns the result in UTC. Default 'user'.\n * @return string|bool The date and time in MySQL DateTime format - Y-m-d H:i:s, or false on failure.\n */\nfunction iso8601_to_datetime( $date_string, $timezone = 'user' ) {\n\t$timezone    = strtolower( $timezone );\n\t$wp_timezone = wp_timezone();\n\t$datetime    = date_create( $date_string, $wp_timezone ); // Timezone is ignored if input has one.\n\n\tif ( false === $datetime ) {\n\t\treturn false;\n\t}\n\n\tif ( 'gmt' === $timezone ) {\n\t\treturn $datetime->setTimezone( new DateTimeZone( 'UTC' ) )->format( 'Y-m-d H:i:s' );\n\t}\n\n\tif ( 'user' === $timezone ) {\n\t\treturn $datetime->setTimezone( $wp_timezone )->format( 'Y-m-d H:i:s' );\n\t}\n\n\treturn false;\n}\n\n/**\n * Strips out all characters that are not allowable in an email.\n *\n * @since 1.5.0\n *\n * @param string $email Email address to filter.\n * @return string Filtered email address.\n */\nfunction sanitize_email( $email ) {\n\t// Test for the minimum length the email can be\n\tif ( strlen( $email ) < 6 ) {\n\t\t/**\n\t\t * Filters a sanitized email address.\n\t\t *\n\t\t * This filter is evaluated under several contexts, including 'email_too_short',\n\t\t * 'email_no_at', 'local_invalid_chars', 'domain_period_sequence', 'domain_period_limits',\n\t\t * 'domain_no_periods', 'domain_no_valid_subs', or no context.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param string $sanitized_email The sanitized email address.\n\t\t * @param string $email           The email address, as provided to sanitize_email().\n\t\t * @param string|null $message    A message to pass to the user. null if email is sanitized.\n\t\t */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'email_too_short' );\n\t}\n\n\t// Test for an @ character after the first position\n\tif ( strpos( $email, '@', 1 ) === false ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'email_no_at' );\n\t}\n\n\t// Split out the local and domain parts\n\tlist( $local, $domain ) = explode( '@', $email, 2 );\n\n\t// LOCAL PART\n\t// Test for invalid characters\n\t$local = preg_replace( '/[^a-zA-Z0-9!#$%&\\'*+\\/=?^_`{|}~\\.-]/', '', $local );\n\tif ( '' === $local ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'local_invalid_chars' );\n\t}\n\n\t// DOMAIN PART\n\t// Test for sequences of periods\n\t$domain = preg_replace( '/\\.{2,}/', '', $domain );\n\tif ( '' === $domain ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'domain_period_sequence' );\n\t}\n\n\t// Test for leading and trailing periods and whitespace\n\t$domain = trim( $domain, \" \\t\\n\\r\\0\\x0B.\" );\n\tif ( '' === $domain ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'domain_period_limits' );\n\t}\n\n\t// Split the domain into subs\n\t$subs = explode( '.', $domain );\n\n\t// Assume the domain will have at least two subs\n\tif ( 2 > count( $subs ) ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'domain_no_periods' );\n\t}\n\n\t// Create an array that will contain valid subs\n\t$new_subs = array();\n\n\t// Loop through each sub\n\tforeach ( $subs as $sub ) {\n\t\t// Test for leading and trailing hyphens\n\t\t$sub = trim( $sub, \" \\t\\n\\r\\0\\x0B-\" );\n\n\t\t// Test for invalid characters\n\t\t$sub = preg_replace( '/[^a-z0-9-]+/i', '', $sub );\n\n\t\t// If there's anything left, add it to the valid subs\n\t\tif ( '' !== $sub ) {\n\t\t\t$new_subs[] = $sub;\n\t\t}\n\t}\n\n\t// If there aren't 2 or more valid subs\n\tif ( 2 > count( $new_subs ) ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'domain_no_valid_subs' );\n\t}\n\n\t// Join valid subs into the new domain\n\t$domain = join( '.', $new_subs );\n\n\t// Put the email back together\n\t$sanitized_email = $local . '@' . $domain;\n\n\t// Congratulations your email made it!\n\t/** This filter is documented in wp-includes/formatting.php */\n\treturn apply_filters( 'sanitize_email', $sanitized_email, $email, null );\n}\n\n/**\n * Determines the difference between two timestamps.\n *\n * The difference is returned in a human readable format such as \"1 hour\",\n * \"5 mins\", \"2 days\".\n *\n * @since 1.5.0\n * @since 5.3.0 Added support for showing a difference in seconds.\n *\n * @param int $from Unix timestamp from which the difference begins.\n * @param int $to   Optional. Unix timestamp to end the time difference. Default becomes time() if not set.\n * @return string Human readable time difference.\n */\nfunction human_time_diff( $from, $to = 0 ) {\n\tif ( empty( $to ) ) {\n\t\t$to = time();\n\t}\n\n\t$diff = (int) abs( $to - $from );\n\n\tif ( $diff < MINUTE_IN_SECONDS ) {\n\t\t$secs = $diff;\n\t\tif ( $secs <= 1 ) {\n\t\t\t$secs = 1;\n\t\t}\n\t\t/* translators: Time difference between two dates, in seconds. %s: Number of seconds. */\n\t\t$since = sprintf( _n( '%s second', '%s seconds', $secs ), $secs );\n\t} elseif ( $diff < HOUR_IN_SECONDS && $diff >= MINUTE_IN_SECONDS ) {\n\t\t$mins = round( $diff / MINUTE_IN_SECONDS );\n\t\tif ( $mins <= 1 ) {\n\t\t\t$mins = 1;\n\t\t}\n\t\t/* translators: Time difference between two dates, in minutes (min=minute). %s: Number of minutes. */\n\t\t$since = sprintf( _n( '%s min', '%s mins', $mins ), $mins );\n\t} elseif ( $diff < DAY_IN_SECONDS && $diff >= HOUR_IN_SECONDS ) {\n\t\t$hours = round( $diff / HOUR_IN_SECONDS );\n\t\tif ( $hours <= 1 ) {\n\t\t\t$hours = 1;\n\t\t}\n\t\t/* translators: Time difference between two dates, in hours. %s: Number of hours. */\n\t\t$since = sprintf( _n( '%s hour', '%s hours', $hours ), $hours );\n\t} elseif ( $diff < WEEK_IN_SECONDS && $diff >= DAY_IN_SECONDS ) {\n\t\t$days = round( $diff / DAY_IN_SECONDS );\n\t\tif ( $days <= 1 ) {\n\t\t\t$days = 1;\n\t\t}\n\t\t/* translators: Time difference between two dates, in days. %s: Number of days. */\n\t\t$since = sprintf( _n( '%s day', '%s days', $days ), $days );\n\t} elseif ( $diff < MONTH_IN_SECONDS && $diff >= WEEK_IN_SECONDS ) {\n\t\t$weeks = round( $diff / WEEK_IN_SECONDS );\n\t\tif ( $weeks <= 1 ) {\n\t\t\t$weeks = 1;\n\t\t}\n\t\t/* translators: Time difference between two dates, in weeks. %s: Number of weeks. */\n\t\t$since = sprintf( _n( '%s week', '%s weeks', $weeks ), $weeks );\n\t} elseif ( $diff < YEAR_IN_SECONDS && $diff >= MONTH_IN_SECONDS ) {\n\t\t$months = round( $diff / MONTH_IN_SECONDS );\n\t\tif ( $months <= 1 ) {\n\t\t\t$months = 1;\n\t\t}\n\t\t/* translators: Time difference between two dates, in months. %s: Number of months. */\n\t\t$since = sprintf( _n( '%s month', '%s months', $months ), $months );\n\t} elseif ( $diff >= YEAR_IN_SECONDS ) {\n\t\t$years = round( $diff / YEAR_IN_SECONDS );\n\t\tif ( $years <= 1 ) {\n\t\t\t$years = 1;\n\t\t}\n\t\t/* translators: Time difference between two dates, in years. %s: Number of years. */\n\t\t$since = sprintf( _n( '%s year', '%s years', $years ), $years );\n\t}\n\n\t/**\n\t * Filters the human readable difference between two timestamps.\n\t *\n\t * @since 4.0.0\n\t *\n\t * @param string $since The difference in human readable text.\n\t * @param int    $diff  The difference in seconds.\n\t * @param int    $from  Unix timestamp from which the difference begins.\n\t * @param int    $to    Unix timestamp to end the time difference.\n\t */\n\treturn apply_filters( 'human_time_diff', $since, $diff, $from, $to );\n}\n\n/**\n * Generates an excerpt from the content, if needed.\n *\n * Returns a maximum of 55 words with an ellipsis appended if necessary.\n *\n * The 55 word limit can be modified by plugins/themes using the {@see 'excerpt_length'} filter\n * The ' [&hellip;]' string can be modified by plugins/themes using the {@see 'excerpt_more'} filter\n *\n * @since 1.5.0\n * @since 5.2.0 Added the `$post` parameter.\n *\n * @param string             $text Optional. The excerpt. If set to empty, an excerpt is generated.\n * @param WP_Post|object|int $post Optional. WP_Post instance or Post ID/object. Default is null.\n * @return string The excerpt.\n */\nfunction wp_trim_excerpt( $text = '', $post = null ) {\n\t$raw_excerpt = $text;\n\tif ( '' == $text ) {\n\t\t$post = get_post( $post );\n\t\t$text = get_the_content( '', false, $post );\n\n\t\t$text = strip_shortcodes( $text );\n\t\t$text = excerpt_remove_blocks( $text );\n\n\t\t/** This filter is documented in wp-includes/post-template.php */\n\t\t$text = apply_filters( 'the_content', $text );\n\t\t$text = str_replace( ']]>', ']]&gt;', $text );\n\n\t\t/* translators: Maximum number of words used in a post excerpt. */\n\t\t$excerpt_length = intval( _x( '55', 'excerpt_length' ) );\n\n\t\t/**\n\t\t * Filters the maximum number of words in a post excerpt.\n\t\t *\n\t\t * @since 2.7.0\n\t\t *\n\t\t * @param int $number The maximum number of words. Default 55.\n\t\t */\n\t\t$excerpt_length = (int) apply_filters( 'excerpt_length', $excerpt_length );\n\n\t\t/**\n\t\t * Filters the string in the \"more\" link displayed after a trimmed excerpt.\n\t\t *\n\t\t * @since 2.9.0\n\t\t *\n\t\t * @param string $more_string The string shown within the more link.\n\t\t */\n\t\t$excerpt_more = apply_filters( 'excerpt_more', ' ' . '[&hellip;]' );\n\t\t$text         = wp_trim_words( $text, $excerpt_length, $excerpt_more );\n\t}\n\n\t/**\n\t * Filters the trimmed excerpt string.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $text        The trimmed text.\n\t * @param string $raw_excerpt The text prior to trimming.\n\t */\n\treturn apply_filters( 'wp_trim_excerpt', $text, $raw_excerpt );\n}\n\n/**\n * Trims text to a certain number of words.\n *\n * This function is localized. For languages that count 'words' by the individual\n * character (such as East Asian languages), the $num_words argument will apply\n * to the number of individual characters.\n *\n * @since 3.3.0\n *\n * @param string $text      Text to trim.\n * @param int    $num_words Number of words. Default 55.\n * @param string $more      Optional. What to append if $text needs to be trimmed. Default '&hellip;'.\n * @return string Trimmed text.\n */\nfunction wp_trim_words( $text, $num_words = 55, $more = null ) {\n\tif ( null === $more ) {\n\t\t$more = __( '&hellip;' );\n\t}\n\n\t$original_text = $text;\n\t$text          = wp_strip_all_tags( $text );\n\t$num_words     = (int) $num_words;\n\n\t/*\n\t * translators: If your word count is based on single characters (e.g. East Asian characters),\n\t * enter 'characters_excluding_spaces' or 'characters_including_spaces'. Otherwise, enter 'words'.\n\t * Do not translate into your own language.\n\t */\n\tif ( strpos( _x( 'words', 'Word count type. Do not translate!' ), 'characters' ) === 0 && preg_match( '/^utf\\-?8$/i', get_option( 'blog_charset' ) ) ) {\n\t\t$text = trim( preg_replace( \"/[\\n\\r\\t ]+/\", ' ', $text ), ' ' );\n\t\tpreg_match_all( '/./u', $text, $words_array );\n\t\t$words_array = array_slice( $words_array[0], 0, $num_words + 1 );\n\t\t$sep         = '';\n\t} else {\n\t\t$words_array = preg_split( \"/[\\n\\r\\t ]+/\", $text, $num_words + 1, PREG_SPLIT_NO_EMPTY );\n\t\t$sep         = ' ';\n\t}\n\n\tif ( count( $words_array ) > $num_words ) {\n\t\tarray_pop( $words_array );\n\t\t$text = implode( $sep, $words_array );\n\t\t$text = $text . $more;\n\t} else {\n\t\t$text = implode( $sep, $words_array );\n\t}\n\n\t/**\n\t * Filters the text content after words have been trimmed.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param string $text          The trimmed text.\n\t * @param int    $num_words     The number of words to trim the text to. Default 55.\n\t * @param string $more          An optional string to append to the end of the trimmed text, e.g. &hellip;.\n\t * @param string $original_text The text before it was trimmed.\n\t */\n\treturn apply_filters( 'wp_trim_words', $text, $num_words, $more, $original_text );\n}\n\n/**\n * Converts named entities into numbered entities.\n *\n * @since 1.5.1\n *\n * @param string $text The text within which entities will be converted.\n * @return string Text with converted entities.\n */\nfunction ent2ncr( $text ) {\n\n\t/**\n\t * Filters text before named entities are converted into numbered entities.\n\t *\n\t * A non-null string must be returned for the filter to be evaluated.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param string|null $converted_text The text to be converted. Default null.\n\t * @param string      $text           The text prior to entity conversion.\n\t */\n\t$filtered = apply_filters( 'pre_ent2ncr', null, $text );\n\tif ( null !== $filtered ) {\n\t\treturn $filtered;\n\t}\n\n\t$to_ncr = array(\n\t\t'&quot;'     => '&#34;',\n\t\t'&amp;'      => '&#38;',\n\t\t'&lt;'       => '&#60;',\n\t\t'&gt;'       => '&#62;',\n\t\t'|'          => '&#124;',\n\t\t'&nbsp;'     => '&#160;',\n\t\t'&iexcl;'    => '&#161;',\n\t\t'&cent;'     => '&#162;',\n\t\t'&pound;'    => '&#163;',\n\t\t'&curren;'   => '&#164;',\n\t\t'&yen;'      => '&#165;',\n\t\t'&brvbar;'   => '&#166;',\n\t\t'&brkbar;'   => '&#166;',\n\t\t'&sect;'     => '&#167;',\n\t\t'&uml;'      => '&#168;',\n\t\t'&die;'      => '&#168;',\n\t\t'&copy;'     => '&#169;',\n\t\t'&ordf;'     => '&#170;',\n\t\t'&laquo;'    => '&#171;',\n\t\t'&not;'      => '&#172;',\n\t\t'&shy;'      => '&#173;',\n\t\t'&reg;'      => '&#174;',\n\t\t'&macr;'     => '&#175;',\n\t\t'&hibar;'    => '&#175;',\n\t\t'&deg;'      => '&#176;',\n\t\t'&plusmn;'   => '&#177;',\n\t\t'&sup2;'     => '&#178;',\n\t\t'&sup3;'     => '&#179;',\n\t\t'&acute;'    => '&#180;',\n\t\t'&micro;'    => '&#181;',\n\t\t'&para;'     => '&#182;',\n\t\t'&middot;'   => '&#183;',\n\t\t'&cedil;'    => '&#184;',\n\t\t'&sup1;'     => '&#185;',\n\t\t'&ordm;'     => '&#186;',\n\t\t'&raquo;'    => '&#187;',\n\t\t'&frac14;'   => '&#188;',\n\t\t'&frac12;'   => '&#189;',\n\t\t'&frac34;'   => '&#190;',\n\t\t'&iquest;'   => '&#191;',\n\t\t'&Agrave;'   => '&#192;',\n\t\t'&Aacute;'   => '&#193;',\n\t\t'&Acirc;'    => '&#194;',\n\t\t'&Atilde;'   => '&#195;',\n\t\t'&Auml;'     => '&#196;',\n\t\t'&Aring;'    => '&#197;',\n\t\t'&AElig;'    => '&#198;',\n\t\t'&Ccedil;'   => '&#199;',\n\t\t'&Egrave;'   => '&#200;',\n\t\t'&Eacute;'   => '&#201;',\n\t\t'&Ecirc;'    => '&#202;',\n\t\t'&Euml;'     => '&#203;',\n\t\t'&Igrave;'   => '&#204;',\n\t\t'&Iacute;'   => '&#205;',\n\t\t'&Icirc;'    => '&#206;',\n\t\t'&Iuml;'     => '&#207;',\n\t\t'&ETH;'      => '&#208;',\n\t\t'&Ntilde;'   => '&#209;',\n\t\t'&Ograve;'   => '&#210;',\n\t\t'&Oacute;'   => '&#211;',\n\t\t'&Ocirc;'    => '&#212;',\n\t\t'&Otilde;'   => '&#213;',\n\t\t'&Ouml;'     => '&#214;',\n\t\t'&times;'    => '&#215;',\n\t\t'&Oslash;'   => '&#216;',\n\t\t'&Ugrave;'   => '&#217;',\n\t\t'&Uacute;'   => '&#218;',\n\t\t'&Ucirc;'    => '&#219;',\n\t\t'&Uuml;'     => '&#220;',\n\t\t'&Yacute;'   => '&#221;',\n\t\t'&THORN;'    => '&#222;',\n\t\t'&szlig;'    => '&#223;',\n\t\t'&agrave;'   => '&#224;',\n\t\t'&aacute;'   => '&#225;',\n\t\t'&acirc;'    => '&#226;',\n\t\t'&atilde;'   => '&#227;',\n\t\t'&auml;'     => '&#228;',\n\t\t'&aring;'    => '&#229;',\n\t\t'&aelig;'    => '&#230;',\n\t\t'&ccedil;'   => '&#231;',\n\t\t'&egrave;'   => '&#232;',\n\t\t'&eacute;'   => '&#233;',\n\t\t'&ecirc;'    => '&#234;',\n\t\t'&euml;'     => '&#235;',\n\t\t'&igrave;'   => '&#236;',\n\t\t'&iacute;'   => '&#237;',\n\t\t'&icirc;'    => '&#238;',\n\t\t'&iuml;'     => '&#239;',\n\t\t'&eth;'      => '&#240;',\n\t\t'&ntilde;'   => '&#241;',\n\t\t'&ograve;'   => '&#242;',\n\t\t'&oacute;'   => '&#243;',\n\t\t'&ocirc;'    => '&#244;',\n\t\t'&otilde;'   => '&#245;',\n\t\t'&ouml;'     => '&#246;',\n\t\t'&divide;'   => '&#247;',\n\t\t'&oslash;'   => '&#248;',\n\t\t'&ugrave;'   => '&#249;',\n\t\t'&uacute;'   => '&#250;',\n\t\t'&ucirc;'    => '&#251;',\n\t\t'&uuml;'     => '&#252;',\n\t\t'&yacute;'   => '&#253;',\n\t\t'&thorn;'    => '&#254;',\n\t\t'&yuml;'     => '&#255;',\n\t\t'&OElig;'    => '&#338;',\n\t\t'&oelig;'    => '&#339;',\n\t\t'&Scaron;'   => '&#352;',\n\t\t'&scaron;'   => '&#353;',\n\t\t'&Yuml;'     => '&#376;',\n\t\t'&fnof;'     => '&#402;',\n\t\t'&circ;'     => '&#710;',\n\t\t'&tilde;'    => '&#732;',\n\t\t'&Alpha;'    => '&#913;',\n\t\t'&Beta;'     => '&#914;',\n\t\t'&Gamma;'    => '&#915;',\n\t\t'&Delta;'    => '&#916;',\n\t\t'&Epsilon;'  => '&#917;',\n\t\t'&Zeta;'     => '&#918;',\n\t\t'&Eta;'      => '&#919;',\n\t\t'&Theta;'    => '&#920;',\n\t\t'&Iota;'     => '&#921;',\n\t\t'&Kappa;'    => '&#922;',\n\t\t'&Lambda;'   => '&#923;',\n\t\t'&Mu;'       => '&#924;',\n\t\t'&Nu;'       => '&#925;',\n\t\t'&Xi;'       => '&#926;',\n\t\t'&Omicron;'  => '&#927;',\n\t\t'&Pi;'       => '&#928;',\n\t\t'&Rho;'      => '&#929;',\n\t\t'&Sigma;'    => '&#931;',\n\t\t'&Tau;'      => '&#932;',\n\t\t'&Upsilon;'  => '&#933;',\n\t\t'&Phi;'      => '&#934;',\n\t\t'&Chi;'      => '&#935;',\n\t\t'&Psi;'      => '&#936;',\n\t\t'&Omega;'    => '&#937;',\n\t\t'&alpha;'    => '&#945;',\n\t\t'&beta;'     => '&#946;',\n\t\t'&gamma;'    => '&#947;',\n\t\t'&delta;'    => '&#948;',\n\t\t'&epsilon;'  => '&#949;',\n\t\t'&zeta;'     => '&#950;',\n\t\t'&eta;'      => '&#951;',\n\t\t'&theta;'    => '&#952;',\n\t\t'&iota;'     => '&#953;',\n\t\t'&kappa;'    => '&#954;',\n\t\t'&lambda;'   => '&#955;',\n\t\t'&mu;'       => '&#956;',\n\t\t'&nu;'       => '&#957;',\n\t\t'&xi;'       => '&#958;',\n\t\t'&omicron;'  => '&#959;',\n\t\t'&pi;'       => '&#960;',\n\t\t'&rho;'      => '&#961;',\n\t\t'&sigmaf;'   => '&#962;',\n\t\t'&sigma;'    => '&#963;',\n\t\t'&tau;'      => '&#964;',\n\t\t'&upsilon;'  => '&#965;',\n\t\t'&phi;'      => '&#966;',\n\t\t'&chi;'      => '&#967;',\n\t\t'&psi;'      => '&#968;',\n\t\t'&omega;'    => '&#969;',\n\t\t'&thetasym;' => '&#977;',\n\t\t'&upsih;'    => '&#978;',\n\t\t'&piv;'      => '&#982;',\n\t\t'&ensp;'     => '&#8194;',\n\t\t'&emsp;'     => '&#8195;',\n\t\t'&thinsp;'   => '&#8201;',\n\t\t'&zwnj;'     => '&#8204;',\n\t\t'&zwj;'      => '&#8205;',\n\t\t'&lrm;'      => '&#8206;',\n\t\t'&rlm;'      => '&#8207;',\n\t\t'&ndash;'    => '&#8211;',\n\t\t'&mdash;'    => '&#8212;',\n\t\t'&lsquo;'    => '&#8216;',\n\t\t'&rsquo;'    => '&#8217;',\n\t\t'&sbquo;'    => '&#8218;',\n\t\t'&ldquo;'    => '&#8220;',\n\t\t'&rdquo;'    => '&#8221;',\n\t\t'&bdquo;'    => '&#8222;',\n\t\t'&dagger;'   => '&#8224;',\n\t\t'&Dagger;'   => '&#8225;',\n\t\t'&bull;'     => '&#8226;',\n\t\t'&hellip;'   => '&#8230;',\n\t\t'&permil;'   => '&#8240;',\n\t\t'&prime;'    => '&#8242;',\n\t\t'&Prime;'    => '&#8243;',\n\t\t'&lsaquo;'   => '&#8249;',\n\t\t'&rsaquo;'   => '&#8250;',\n\t\t'&oline;'    => '&#8254;',\n\t\t'&frasl;'    => '&#8260;',\n\t\t'&euro;'     => '&#8364;',\n\t\t'&image;'    => '&#8465;',\n\t\t'&weierp;'   => '&#8472;',\n\t\t'&real;'     => '&#8476;',\n\t\t'&trade;'    => '&#8482;',\n\t\t'&alefsym;'  => '&#8501;',\n\t\t'&crarr;'    => '&#8629;',\n\t\t'&lArr;'     => '&#8656;',\n\t\t'&uArr;'     => '&#8657;',\n\t\t'&rArr;'     => '&#8658;',\n\t\t'&dArr;'     => '&#8659;',\n\t\t'&hArr;'     => '&#8660;',\n\t\t'&forall;'   => '&#8704;',\n\t\t'&part;'     => '&#8706;',\n\t\t'&exist;'    => '&#8707;',\n\t\t'&empty;'    => '&#8709;',\n\t\t'&nabla;'    => '&#8711;',\n\t\t'&isin;'     => '&#8712;',\n\t\t'&notin;'    => '&#8713;',\n\t\t'&ni;'       => '&#8715;',\n\t\t'&prod;'     => '&#8719;',\n\t\t'&sum;'      => '&#8721;',\n\t\t'&minus;'    => '&#8722;',\n\t\t'&lowast;'   => '&#8727;',\n\t\t'&radic;'    => '&#8730;',\n\t\t'&prop;'     => '&#8733;',\n\t\t'&infin;'    => '&#8734;',\n\t\t'&ang;'      => '&#8736;',\n\t\t'&and;'      => '&#8743;',\n\t\t'&or;'       => '&#8744;',\n\t\t'&cap;'      => '&#8745;',\n\t\t'&cup;'      => '&#8746;',\n\t\t'&int;'      => '&#8747;',\n\t\t'&there4;'   => '&#8756;',\n\t\t'&sim;'      => '&#8764;',\n\t\t'&cong;'     => '&#8773;',\n\t\t'&asymp;'    => '&#8776;',\n\t\t'&ne;'       => '&#8800;',\n\t\t'&equiv;'    => '&#8801;',\n\t\t'&le;'       => '&#8804;',\n\t\t'&ge;'       => '&#8805;',\n\t\t'&sub;'      => '&#8834;',\n\t\t'&sup;'      => '&#8835;',\n\t\t'&nsub;'     => '&#8836;',\n\t\t'&sube;'     => '&#8838;',\n\t\t'&supe;'     => '&#8839;',\n\t\t'&oplus;'    => '&#8853;',\n\t\t'&otimes;'   => '&#8855;',\n\t\t'&perp;'     => '&#8869;',\n\t\t'&sdot;'     => '&#8901;',\n\t\t'&lceil;'    => '&#8968;',\n\t\t'&rceil;'    => '&#8969;',\n\t\t'&lfloor;'   => '&#8970;',\n\t\t'&rfloor;'   => '&#8971;',\n\t\t'&lang;'     => '&#9001;',\n\t\t'&rang;'     => '&#9002;',\n\t\t'&larr;'     => '&#8592;',\n\t\t'&uarr;'     => '&#8593;',\n\t\t'&rarr;'     => '&#8594;',\n\t\t'&darr;'     => '&#8595;',\n\t\t'&harr;'     => '&#8596;',\n\t\t'&loz;'      => '&#9674;',\n\t\t'&spades;'   => '&#9824;',\n\t\t'&clubs;'    => '&#9827;',\n\t\t'&hearts;'   => '&#9829;',\n\t\t'&diams;'    => '&#9830;',\n\t);\n\n\treturn str_replace( array_keys( $to_ncr ), array_values( $to_ncr ), $text );\n}\n\n/**\n * Formats text for the editor.\n *\n * Generally the browsers treat everything inside a textarea as text, but\n * it is still a good idea to HTML entity encode `<`, `>` and `&` in the content.\n *\n * The filter {@see 'format_for_editor'} is applied here. If `$text` is empty the\n * filter will be applied to an empty string.\n *\n * @since 4.3.0\n *\n * @see _WP_Editors::editor()\n *\n * @param string $text           The text to be formatted.\n * @param string $default_editor The default editor for the current user.\n *                               It is usually either 'html' or 'tinymce'.\n * @return string The formatted text after filter is applied.\n */\nfunction format_for_editor( $text, $default_editor = null ) {\n\tif ( $text ) {\n\t\t$text = htmlspecialchars( $text, ENT_NOQUOTES, get_option( 'blog_charset' ) );\n\t}\n\n\t/**\n\t * Filters the text after it is formatted for the editor.\n\t *\n\t * @since 4.3.0\n\t *\n\t * @param string $text           The formatted text.\n\t * @param string $default_editor The default editor for the current user.\n\t *                               It is usually either 'html' or 'tinymce'.\n\t */\n\treturn apply_filters( 'format_for_editor', $text, $default_editor );\n}\n\n/**\n * Perform a deep string replace operation to ensure the values in $search are no longer present\n *\n * Repeats the replacement operation until it no longer replaces anything so as to remove \"nested\" values\n * e.g. $subject = '%0%0%0DDD', $search ='%0D', $result ='' rather than the '%0%0DD' that\n * str_replace would return\n *\n * @since 2.8.1\n * @access private\n *\n * @param string|array $search  The value being searched for, otherwise known as the needle.\n *                              An array may be used to designate multiple needles.\n * @param string       $subject The string being searched and replaced on, otherwise known as the haystack.\n * @return string The string with the replaced values.\n */\nfunction _deep_replace( $search, $subject ) {\n\t$subject = (string) $subject;\n\n\t$count = 1;\n\twhile ( $count ) {\n\t\t$subject = str_replace( $search, '', $subject, $count );\n\t}\n\n\treturn $subject;\n}\n\n/**\n * Escapes data for use in a MySQL query.\n *\n * Usually you should prepare queries using wpdb::prepare().\n * Sometimes, spot-escaping is required or useful. One example\n * is preparing an array for use in an IN clause.\n *\n * NOTE: Since 4.8.3, '%' characters will be replaced with a placeholder string,\n * this prevents certain SQLi attacks from taking place. This change in behaviour\n * may cause issues for code that expects the return value of esc_sql() to be useable\n * for other purposes.\n *\n * @since 2.8.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string|array $data Unescaped data\n * @return string|array Escaped data\n */\nfunction esc_sql( $data ) {\n\tglobal $wpdb;\n\treturn $wpdb->_escape( $data );\n}\n\n/**\n * Checks and cleans a URL.\n *\n * A number of characters are removed from the URL. If the URL is for displaying\n * (the default behaviour) ampersands are also replaced. The {@see 'clean_url'} filter\n * is applied to the returned cleaned URL.\n *\n * @since 2.8.0\n *\n * @param string $url       The URL to be cleaned.\n * @param array  $protocols Optional. An array of acceptable protocols.\n *                          Defaults to return value of wp_allowed_protocols()\n * @param string $_context  Private. Use esc_url_raw() for database usage.\n * @return string The cleaned $url after the {@see 'clean_url'} filter is applied.\n */\nfunction esc_url( $url, $protocols = null, $_context = 'display' ) {\n\t$original_url = $url;\n\n\tif ( '' == $url ) {\n\t\treturn $url;\n\t}\n\n\t$url = str_replace( ' ', '%20', ltrim( $url ) );\n\t$url = preg_replace( '|[^a-z0-9-~+_.?#=!&;,/:%@$\\|*\\'()\\[\\]\\\\x80-\\\\xff]|i', '', $url );\n\n\tif ( '' === $url ) {\n\t\treturn $url;\n\t}\n\n\tif ( 0 !== stripos( $url, 'mailto:' ) ) {\n\t\t$strip = array( '%0d', '%0a', '%0D', '%0A' );\n\t\t$url   = _deep_replace( $strip, $url );\n\t}\n\n\t$url = str_replace( ';//', '://', $url );\n\t/* If the URL doesn't appear to contain a scheme, we\n\t * presume it needs http:// prepended (unless a relative\n\t * link starting with /, # or ? or a php file).\n\t */\n\tif ( strpos( $url, ':' ) === false && ! in_array( $url[0], array( '/', '#', '?' ) ) &&\n\t\t! preg_match( '/^[a-z0-9-]+?\\.php/i', $url ) ) {\n\t\t$url = 'http://' . $url;\n\t}\n\n\t// Replace ampersands and single quotes only when displaying.\n\tif ( 'display' == $_context ) {\n\t\t$url = wp_kses_normalize_entities( $url );\n\t\t$url = str_replace( '&amp;', '&#038;', $url );\n\t\t$url = str_replace( \"'\", '&#039;', $url );\n\t}\n\n\tif ( ( false !== strpos( $url, '[' ) ) || ( false !== strpos( $url, ']' ) ) ) {\n\n\t\t$parsed = wp_parse_url( $url );\n\t\t$front  = '';\n\n\t\tif ( isset( $parsed['scheme'] ) ) {\n\t\t\t$front .= $parsed['scheme'] . '://';\n\t\t} elseif ( '/' === $url[0] ) {\n\t\t\t$front .= '//';\n\t\t}\n\n\t\tif ( isset( $parsed['user'] ) ) {\n\t\t\t$front .= $parsed['user'];\n\t\t}\n\n\t\tif ( isset( $parsed['pass'] ) ) {\n\t\t\t$front .= ':' . $parsed['pass'];\n\t\t}\n\n\t\tif ( isset( $parsed['user'] ) || isset( $parsed['pass'] ) ) {\n\t\t\t$front .= '@';\n\t\t}\n\n\t\tif ( isset( $parsed['host'] ) ) {\n\t\t\t$front .= $parsed['host'];\n\t\t}\n\n\t\tif ( isset( $parsed['port'] ) ) {\n\t\t\t$front .= ':' . $parsed['port'];\n\t\t}\n\n\t\t$end_dirty = str_replace( $front, '', $url );\n\t\t$end_clean = str_replace( array( '[', ']' ), array( '%5B', '%5D' ), $end_dirty );\n\t\t$url       = str_replace( $end_dirty, $end_clean, $url );\n\n\t}\n\n\tif ( '/' === $url[0] ) {\n\t\t$good_protocol_url = $url;\n\t} else {\n\t\tif ( ! is_array( $protocols ) ) {\n\t\t\t$protocols = wp_allowed_protocols();\n\t\t}\n\t\t$good_protocol_url = wp_kses_bad_protocol( $url, $protocols );\n\t\tif ( strtolower( $good_protocol_url ) != strtolower( $url ) ) {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\t/**\n\t * Filters a string cleaned and escaped for output as a URL.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $good_protocol_url The cleaned URL to be returned.\n\t * @param string $original_url      The URL prior to cleaning.\n\t * @param string $_context          If 'display', replace ampersands and single quotes only.\n\t */\n\treturn apply_filters( 'clean_url', $good_protocol_url, $original_url, $_context );\n}\n\n/**\n * Performs esc_url() for database usage.\n *\n * @since 2.8.0\n *\n * @param string $url       The URL to be cleaned.\n * @param array  $protocols An array of acceptable protocols.\n * @return string The cleaned URL.\n */\nfunction esc_url_raw( $url, $protocols = null ) {\n\treturn esc_url( $url, $protocols, 'db' );\n}\n\n/**\n * Convert entities, while preserving already-encoded entities.\n *\n * @link https://secure.php.net/htmlentities Borrowed from the PHP Manual user notes.\n *\n * @since 1.2.2\n *\n * @param string $myHTML The text to be converted.\n * @return string Converted text.\n */\nfunction htmlentities2( $myHTML ) {\n\t$translation_table              = get_html_translation_table( HTML_ENTITIES, ENT_QUOTES );\n\t$translation_table[ chr( 38 ) ] = '&';\n\treturn preg_replace( '/&(?![A-Za-z]{0,4}\\w{2,3};|#[0-9]{2,3};)/', '&amp;', strtr( $myHTML, $translation_table ) );\n}\n\n/**\n * Escape single quotes, htmlspecialchar \" < > &, and fix line endings.\n *\n * Escapes text strings for echoing in JS. It is intended to be used for inline JS\n * (in a tag attribute, for example onclick=\"...\"). Note that the strings have to\n * be in single quotes. The {@see 'js_escape'} filter is also applied here.\n *\n * @since 2.8.0\n *\n * @param string $text The text to be escaped.\n * @return string Escaped text.\n */\nfunction esc_js( $text ) {\n\t$safe_text = wp_check_invalid_utf8( $text );\n\t$safe_text = _wp_specialchars( $safe_text, ENT_COMPAT );\n\t$safe_text = preg_replace( '/&#(x)?0*(?(1)27|39);?/i', \"'\", stripslashes( $safe_text ) );\n\t$safe_text = str_replace( \"\\r\", '', $safe_text );\n\t$safe_text = str_replace( \"\\n\", '\\\\n', addslashes( $safe_text ) );\n\t/**\n\t * Filters a string cleaned and escaped for output in JavaScript.\n\t *\n\t * Text passed to esc_js() is stripped of invalid or special characters,\n\t * and properly slashed for output.\n\t *\n\t * @since 2.0.6\n\t *\n\t * @param string $safe_text The text after it has been escaped.\n\t * @param string $text      The text prior to being escaped.\n\t */\n\treturn apply_filters( 'js_escape', $safe_text, $text );\n}\n\n/**\n * Escaping for HTML blocks.\n *\n * @since 2.8.0\n *\n * @param string $text\n * @return string\n */\nfunction esc_html( $text ) {\n\t$safe_text = wp_check_invalid_utf8( $text );\n\t$safe_text = _wp_specialchars( $safe_text, ENT_QUOTES );\n\t/**\n\t * Filters a string cleaned and escaped for output in HTML.\n\t *\n\t * Text passed to esc_html() is stripped of invalid or special characters\n\t * before output.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $safe_text The text after it has been escaped.\n\t * @param string $text      The text prior to being escaped.\n\t */\n\treturn apply_filters( 'esc_html', $safe_text, $text );\n}\n\n/**\n * Escaping for HTML attributes.\n *\n * @since 2.8.0\n *\n * @param string $text\n * @return string\n */\nfunction esc_attr( $text ) {\n\t$safe_text = wp_check_invalid_utf8( $text );\n\t$safe_text = _wp_specialchars( $safe_text, ENT_QUOTES );\n\t/**\n\t * Filters a string cleaned and escaped for output in an HTML attribute.\n\t *\n\t * Text passed to esc_attr() is stripped of invalid or special characters\n\t * before output.\n\t *\n\t * @since 2.0.6\n\t *\n\t * @param string $safe_text The text after it has been escaped.\n\t * @param string $text      The text prior to being escaped.\n\t */\n\treturn apply_filters( 'attribute_escape', $safe_text, $text );\n}\n\n/**\n * Escaping for textarea values.\n *\n * @since 3.1.0\n *\n * @param string $text\n * @return string\n */\nfunction esc_textarea( $text ) {\n\t$safe_text = htmlspecialchars( $text, ENT_QUOTES, get_option( 'blog_charset' ) );\n\t/**\n\t * Filters a string cleaned and escaped for output in a textarea element.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param string $safe_text The text after it has been escaped.\n\t * @param string $text      The text prior to being escaped.\n\t */\n\treturn apply_filters( 'esc_textarea', $safe_text, $text );\n}\n\n/**\n * Escape an HTML tag name.\n *\n * @since 2.5.0\n *\n * @param string $tag_name\n * @return string\n */\nfunction tag_escape( $tag_name ) {\n\t$safe_tag = strtolower( preg_replace( '/[^a-zA-Z0-9_:]/', '', $tag_name ) );\n\t/**\n\t * Filters a string cleaned and escaped for output as an HTML tag.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $safe_tag The tag name after it has been escaped.\n\t * @param string $tag_name The text before it was escaped.\n\t */\n\treturn apply_filters( 'tag_escape', $safe_tag, $tag_name );\n}\n\n/**\n * Convert full URL paths to absolute paths.\n *\n * Removes the http or https protocols and the domain. Keeps the path '/' at the\n * beginning, so it isn't a true relative link, but from the web root base.\n *\n * @since 2.1.0\n * @since 4.1.0 Support was added for relative URLs.\n *\n * @param string $link Full URL path.\n * @return string Absolute path.\n */\nfunction wp_make_link_relative( $link ) {\n\treturn preg_replace( '|^(https?:)?//[^/]+(/?.*)|i', '$2', $link );\n}\n\n/**\n * Sanitises various option values based on the nature of the option.\n *\n * This is basically a switch statement which will pass $value through a number\n * of functions depending on the $option.\n *\n * @since 2.0.5\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $option The name of the option.\n * @param string $value  The unsanitised value.\n * @return string Sanitized value.\n */\nfunction sanitize_option( $option, $value ) {\n\tglobal $wpdb;\n\n\t$original_value = $value;\n\t$error          = '';\n\n\tswitch ( $option ) {\n\t\tcase 'admin_email':\n\t\tcase 'new_admin_email':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\t$value = sanitize_email( $value );\n\t\t\t\tif ( ! is_email( $value ) ) {\n\t\t\t\t\t$error = __( 'The email address entered did not appear to be a valid email address. Please enter a valid email address.' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'thumbnail_size_w':\n\t\tcase 'thumbnail_size_h':\n\t\tcase 'medium_size_w':\n\t\tcase 'medium_size_h':\n\t\tcase 'medium_large_size_w':\n\t\tcase 'medium_large_size_h':\n\t\tcase 'large_size_w':\n\t\tcase 'large_size_h':\n\t\tcase 'mailserver_port':\n\t\tcase 'comment_max_links':\n\t\tcase 'page_on_front':\n\t\tcase 'page_for_posts':\n\t\tcase 'rss_excerpt_length':\n\t\tcase 'default_category':\n\t\tcase 'default_email_category':\n\t\tcase 'default_link_category':\n\t\tcase 'close_comments_days_old':\n\t\tcase 'comments_per_page':\n\t\tcase 'thread_comments_depth':\n\t\tcase 'users_can_register':\n\t\tcase 'start_of_week':\n\t\tcase 'site_icon':\n\t\t\t$value = absint( $value );\n\t\t\tbreak;\n\n\t\tcase 'posts_per_page':\n\t\tcase 'posts_per_rss':\n\t\t\t$value = (int) $value;\n\t\t\tif ( empty( $value ) ) {\n\t\t\t\t$value = 1;\n\t\t\t}\n\t\t\tif ( $value < -1 ) {\n\t\t\t\t$value = abs( $value );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'default_ping_status':\n\t\tcase 'default_comment_status':\n\t\t\t// Options that if not there have 0 value but need to be something like \"closed\"\n\t\t\tif ( $value == '0' || $value == '' ) {\n\t\t\t\t$value = 'closed';\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'blogdescription':\n\t\tcase 'blogname':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( $value !== $original_value ) {\n\t\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', wp_encode_emoji( $original_value ) );\n\t\t\t}\n\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\t$value = esc_html( $value );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'blog_charset':\n\t\t\t$value = preg_replace( '/[^a-zA-Z0-9_-]/', '', $value ); // strips slashes\n\t\t\tbreak;\n\n\t\tcase 'blog_public':\n\t\t\t// This is the value if the settings checkbox is not checked on POST. Don't rely on this.\n\t\t\tif ( null === $value ) {\n\t\t\t\t$value = 1;\n\t\t\t} else {\n\t\t\t\t$value = intval( $value );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'date_format':\n\t\tcase 'time_format':\n\t\tcase 'mailserver_url':\n\t\tcase 'mailserver_login':\n\t\tcase 'mailserver_pass':\n\t\tcase 'upload_path':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\t$value = strip_tags( $value );\n\t\t\t\t$value = wp_kses_data( $value );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'ping_sites':\n\t\t\t$value = explode( \"\\n\", $value );\n\t\t\t$value = array_filter( array_map( 'trim', $value ) );\n\t\t\t$value = array_filter( array_map( 'esc_url_raw', $value ) );\n\t\t\t$value = implode( \"\\n\", $value );\n\t\t\tbreak;\n\n\t\tcase 'gmt_offset':\n\t\t\t$value = preg_replace( '/[^0-9:.-]/', '', $value ); // strips slashes\n\t\t\tbreak;\n\n\t\tcase 'siteurl':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\tif ( preg_match( '#http(s?)://(.+)#i', $value ) ) {\n\t\t\t\t\t$value = esc_url_raw( $value );\n\t\t\t\t} else {\n\t\t\t\t\t$error = __( 'The WordPress address you entered did not appear to be a valid URL. Please enter a valid URL.' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'home':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\tif ( preg_match( '#http(s?)://(.+)#i', $value ) ) {\n\t\t\t\t\t$value = esc_url_raw( $value );\n\t\t\t\t} else {\n\t\t\t\t\t$error = __( 'The Site address you entered did not appear to be a valid URL. Please enter a valid URL.' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'WPLANG':\n\t\t\t$allowed = get_available_languages();\n\t\t\tif ( ! is_multisite() && defined( 'WPLANG' ) && '' !== WPLANG && 'en_US' !== WPLANG ) {\n\t\t\t\t$allowed[] = WPLANG;\n\t\t\t}\n\t\t\tif ( ! in_array( $value, $allowed ) && ! empty( $value ) ) {\n\t\t\t\t$value = get_option( $option );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'illegal_names':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\tif ( ! is_array( $value ) ) {\n\t\t\t\t\t$value = explode( ' ', $value );\n\t\t\t\t}\n\n\t\t\t\t$value = array_values( array_filter( array_map( 'trim', $value ) ) );\n\n\t\t\t\tif ( ! $value ) {\n\t\t\t\t\t$value = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'limited_email_domains':\n\t\tcase 'banned_email_domains':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\tif ( ! is_array( $value ) ) {\n\t\t\t\t\t$value = explode( \"\\n\", $value );\n\t\t\t\t}\n\n\t\t\t\t$domains = array_values( array_filter( array_map( 'trim', $value ) ) );\n\t\t\t\t$value   = array();\n\n\t\t\t\tforeach ( $domains as $domain ) {\n\t\t\t\t\tif ( ! preg_match( '/(--|\\.\\.)/', $domain ) && preg_match( '|^([a-zA-Z0-9-\\.])+$|', $domain ) ) {\n\t\t\t\t\t\t$value[] = $domain;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( ! $value ) {\n\t\t\t\t\t$value = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'timezone_string':\n\t\t\t$allowed_zones = timezone_identifiers_list();\n\t\t\tif ( ! in_array( $value, $allowed_zones ) && ! empty( $value ) ) {\n\t\t\t\t$error = __( 'The timezone you have entered is not valid. Please select a valid timezone.' );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'permalink_structure':\n\t\tcase 'category_base':\n\t\tcase 'tag_base':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\t$value = esc_url_raw( $value );\n\t\t\t\t$value = str_replace( 'http://', '', $value );\n\t\t\t}\n\n\t\t\tif ( 'permalink_structure' === $option && '' !== $value && ! preg_match( '/%[^\\/%]+%/', $value ) ) {\n\t\t\t\t$error = sprintf(\n\t\t\t\t\t/* translators: %s: Documentation URL. */\n\t\t\t\t\t__( 'A structure tag is required when using custom permalinks. <a href=\"%s\">Learn more</a>' ),\n\t\t\t\t\t__( 'https://wordpress.org/support/article/using-permalinks/#choosing-your-permalink-structure' )\n\t\t\t\t);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'default_role':\n\t\t\tif ( ! get_role( $value ) && get_role( 'subscriber' ) ) {\n\t\t\t\t$value = 'subscriber';\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'moderation_keys':\n\t\tcase 'blacklist_keys':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\t$value = explode( \"\\n\", $value );\n\t\t\t\t$value = array_filter( array_map( 'trim', $value ) );\n\t\t\t\t$value = array_unique( $value );\n\t\t\t\t$value = implode( \"\\n\", $value );\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\tif ( ! empty( $error ) ) {\n\t\t$value = get_option( $option );\n\t\tif ( function_exists( 'add_settings_error' ) ) {\n\t\t\tadd_settings_error( $option, \"invalid_{$option}\", $error );\n\t\t}\n\t}\n\n\t/**\n\t * Filters an option value following sanitization.\n\t *\n\t * @since 2.3.0\n\t * @since 4.3.0 Added the `$original_value` parameter.\n\t *\n\t * @param string $value          The sanitized option value.\n\t * @param string $option         The option name.\n\t * @param string $original_value The original value passed to the function.\n\t */\n\treturn apply_filters( \"sanitize_option_{$option}\", $value, $option, $original_value );\n}\n\n/**\n * Maps a function to all non-iterable elements of an array or an object.\n *\n * This is similar to `array_walk_recursive()` but acts upon objects too.\n *\n * @since 4.4.0\n *\n * @param mixed    $value    The array, object, or scalar.\n * @param callable $callback The function to map onto $value.\n * @return mixed The value with the callback applied to all non-arrays and non-objects inside it.\n */\nfunction map_deep( $value, $callback ) {\n\tif ( is_array( $value ) ) {\n\t\tforeach ( $value as $index => $item ) {\n\t\t\t$value[ $index ] = map_deep( $item, $callback );\n\t\t}\n\t} elseif ( is_object( $value ) ) {\n\t\t$object_vars = get_object_vars( $value );\n\t\tforeach ( $object_vars as $property_name => $property_value ) {\n\t\t\t$value->$property_name = map_deep( $property_value, $callback );\n\t\t}\n\t} else {\n\t\t$value = call_user_func( $callback, $value );\n\t}\n\n\treturn $value;\n}\n\n/**\n * Parses a string into variables to be stored in an array.\n *\n *\n * @since 2.2.1\n *\n * @param string $string The string to be parsed.\n * @param array  $array  Variables will be stored in this array.\n */\nfunction wp_parse_str( $string, &$array ) {\n\tparse_str( $string, $array );\n\n\t/**\n\t * Filters the array of variables derived from a parsed string.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param array $array The array populated with variables.\n\t */\n\t$array = apply_filters( 'wp_parse_str', $array );\n}\n\n/**\n * Convert lone less than signs.\n *\n * KSES already converts lone greater than signs.\n *\n * @since 2.3.0\n *\n * @param string $text Text to be converted.\n * @return string Converted text.\n */\nfunction wp_pre_kses_less_than( $text ) {\n\treturn preg_replace_callback( '%<[^>]*?((?=<)|>|$)%', 'wp_pre_kses_less_than_callback', $text );\n}\n\n/**\n * Callback function used by preg_replace.\n *\n * @since 2.3.0\n *\n * @param array $matches Populated by matches to preg_replace.\n * @return string The text returned after esc_html if needed.\n */\nfunction wp_pre_kses_less_than_callback( $matches ) {\n\tif ( false === strpos( $matches[0], '>' ) ) {\n\t\treturn esc_html( $matches[0] );\n\t}\n\treturn $matches[0];\n}\n\n/**\n * WordPress implementation of PHP sprintf() with filters.\n *\n * @since 2.5.0\n * @since 5.3.0 Formalized the existing and already documented `...$args` parameter\n *              by adding it to the function signature.\n *\n * @link https://secure.php.net/sprintf\n *\n * @param string $pattern The string which formatted args are inserted.\n * @param mixed  ...$args Arguments to be formatted into the $pattern string.\n * @return string The formatted string.\n */\nfunction wp_sprintf( $pattern, ...$args ) {\n\t$len       = strlen( $pattern );\n\t$start     = 0;\n\t$result    = '';\n\t$arg_index = 0;\n\twhile ( $len > $start ) {\n\t\t// Last character: append and break\n\t\tif ( strlen( $pattern ) - 1 == $start ) {\n\t\t\t$result .= substr( $pattern, -1 );\n\t\t\tbreak;\n\t\t}\n\n\t\t// Literal %: append and continue\n\t\tif ( substr( $pattern, $start, 2 ) == '%%' ) {\n\t\t\t$start  += 2;\n\t\t\t$result .= '%';\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Get fragment before next %\n\t\t$end = strpos( $pattern, '%', $start + 1 );\n\t\tif ( false === $end ) {\n\t\t\t$end = $len;\n\t\t}\n\t\t$fragment = substr( $pattern, $start, $end - $start );\n\n\t\t// Fragment has a specifier\n\t\tif ( $pattern[ $start ] == '%' ) {\n\t\t\t// Find numbered arguments or take the next one in order\n\t\t\tif ( preg_match( '/^%(\\d+)\\$/', $fragment, $matches ) ) {\n\t\t\t\t$index    = $matches[1] - 1; // 0-based array vs 1-based sprintf arguments.\n\t\t\t\t$arg      = isset( $args[ $index ] ) ? $args[ $index ] : '';\n\t\t\t\t$fragment = str_replace( \"%{$matches[1]}$\", '%', $fragment );\n\t\t\t} else {\n\t\t\t\t$arg = isset( $args[ $arg_index ] ) ? $args[ $arg_index ] : '';\n\t\t\t\t++$arg_index;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Filters a fragment from the pattern passed to wp_sprintf().\n\t\t\t *\n\t\t\t * If the fragment is unchanged, then sprintf() will be run on the fragment.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t *\n\t\t\t * @param string $fragment A fragment from the pattern.\n\t\t\t * @param string $arg      The argument.\n\t\t\t */\n\t\t\t$_fragment = apply_filters( 'wp_sprintf', $fragment, $arg );\n\t\t\tif ( $_fragment != $fragment ) {\n\t\t\t\t$fragment = $_fragment;\n\t\t\t} else {\n\t\t\t\t$fragment = sprintf( $fragment, strval( $arg ) );\n\t\t\t}\n\t\t}\n\n\t\t// Append to result and move to next fragment\n\t\t$result .= $fragment;\n\t\t$start   = $end;\n\t}\n\treturn $result;\n}\n\n/**\n * Localize list items before the rest of the content.\n *\n * The '%l' must be at the first characters can then contain the rest of the\n * content. The list items will have ', ', ', and', and ' and ' added depending\n * on the amount of list items in the $args parameter.\n *\n * @since 2.5.0\n *\n * @param string $pattern Content containing '%l' at the beginning.\n * @param array  $args    List items to prepend to the content and replace '%l'.\n * @return string Localized list items and rest of the content.\n */\nfunction wp_sprintf_l( $pattern, $args ) {\n\t// Not a match\n\tif ( substr( $pattern, 0, 2 ) != '%l' ) {\n\t\treturn $pattern;\n\t}\n\n\t// Nothing to work with\n\tif ( empty( $args ) ) {\n\t\treturn '';\n\t}\n\n\t/**\n\t * Filters the translated delimiters used by wp_sprintf_l().\n\t * Placeholders (%s) are included to assist translators and then\n\t * removed before the array of strings reaches the filter.\n\t *\n\t * Please note: Ampersands and entities should be avoided here.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param array $delimiters An array of translated delimiters.\n\t */\n\t$l = apply_filters(\n\t\t'wp_sprintf_l',\n\t\tarray(\n\t\t\t/* translators: Used to join items in a list with more than 2 items. */\n\t\t\t'between'          => sprintf( __( '%1$s, %2$s' ), '', '' ),\n\t\t\t/* translators: Used to join last two items in a list with more than 2 times. */\n\t\t\t'between_last_two' => sprintf( __( '%1$s, and %2$s' ), '', '' ),\n\t\t\t/* translators: Used to join items in a list with only 2 items. */\n\t\t\t'between_only_two' => sprintf( __( '%1$s and %2$s' ), '', '' ),\n\t\t)\n\t);\n\n\t$args   = (array) $args;\n\t$result = array_shift( $args );\n\tif ( count( $args ) == 1 ) {\n\t\t$result .= $l['between_only_two'] . array_shift( $args );\n\t}\n\t// Loop when more than two args\n\t$i = count( $args );\n\twhile ( $i ) {\n\t\t$arg = array_shift( $args );\n\t\t$i--;\n\t\tif ( 0 == $i ) {\n\t\t\t$result .= $l['between_last_two'] . $arg;\n\t\t} else {\n\t\t\t$result .= $l['between'] . $arg;\n\t\t}\n\t}\n\treturn $result . substr( $pattern, 2 );\n}\n\n/**\n * Safely extracts not more than the first $count characters from html string.\n *\n * UTF-8, tags and entities safe prefix extraction. Entities inside will *NOT*\n * be counted as one character. For example &amp; will be counted as 4, &lt; as\n * 3, etc.\n *\n * @since 2.5.0\n *\n * @param string $str   String to get the excerpt from.\n * @param int    $count Maximum number of characters to take.\n * @param string $more  Optional. What to append if $str needs to be trimmed. Defaults to empty string.\n * @return string The excerpt.\n */\nfunction wp_html_excerpt( $str, $count, $more = null ) {\n\tif ( null === $more ) {\n\t\t$more = '';\n\t}\n\t$str     = wp_strip_all_tags( $str, true );\n\t$excerpt = mb_substr( $str, 0, $count );\n\t// remove part of an entity at the end\n\t$excerpt = preg_replace( '/&[^;\\s]{0,6}$/', '', $excerpt );\n\tif ( $str != $excerpt ) {\n\t\t$excerpt = trim( $excerpt ) . $more;\n\t}\n\treturn $excerpt;\n}\n\n/**\n * Add a Base url to relative links in passed content.\n *\n * By default it supports the 'src' and 'href' attributes. However this can be\n * changed via the 3rd param.\n *\n * @since 2.7.0\n *\n * @global string $_links_add_base\n *\n * @param string $content String to search for links in.\n * @param string $base    The base URL to prefix to links.\n * @param array  $attrs   The attributes which should be processed.\n * @return string The processed content.\n */\nfunction links_add_base_url( $content, $base, $attrs = array( 'src', 'href' ) ) {\n\tglobal $_links_add_base;\n\t$_links_add_base = $base;\n\t$attrs           = implode( '|', (array) $attrs );\n\treturn preg_replace_callback( \"!($attrs)=(['\\\"])(.+?)\\\\2!i\", '_links_add_base', $content );\n}\n\n/**\n * Callback to add a base url to relative links in passed content.\n *\n * @since 2.7.0\n * @access private\n *\n * @global string $_links_add_base\n *\n * @param string $m The matched link.\n * @return string The processed link.\n */\nfunction _links_add_base( $m ) {\n\tglobal $_links_add_base;\n\t//1 = attribute name  2 = quotation mark  3 = URL\n\treturn $m[1] . '=' . $m[2] .\n\t\t( preg_match( '#^(\\w{1,20}):#', $m[3], $protocol ) && in_array( $protocol[1], wp_allowed_protocols() ) ?\n\t\t\t$m[3] :\n\t\t\tWP_Http::make_absolute_url( $m[3], $_links_add_base )\n\t\t)\n\t\t. $m[2];\n}\n\n/**\n * Adds a Target attribute to all links in passed content.\n *\n * This function by default only applies to `<a>` tags, however this can be\n * modified by the 3rd param.\n *\n * *NOTE:* Any current target attributed will be stripped and replaced.\n *\n * @since 2.7.0\n *\n * @global string $_links_add_target\n *\n * @param string $content String to search for links in.\n * @param string $target  The Target to add to the links.\n * @param array  $tags    An array of tags to apply to.\n * @return string The processed content.\n */\nfunction links_add_target( $content, $target = '_blank', $tags = array( 'a' ) ) {\n\tglobal $_links_add_target;\n\t$_links_add_target = $target;\n\t$tags              = implode( '|', (array) $tags );\n\treturn preg_replace_callback( \"!<($tags)([^>]*)>!i\", '_links_add_target', $content );\n}\n\n/**\n * Callback to add a target attribute to all links in passed content.\n *\n * @since 2.7.0\n * @access private\n *\n * @global string $_links_add_target\n *\n * @param string $m The matched link.\n * @return string The processed link.\n */\nfunction _links_add_target( $m ) {\n\tglobal $_links_add_target;\n\t$tag  = $m[1];\n\t$link = preg_replace( '|( target=([\\'\"])(.*?)\\2)|i', '', $m[2] );\n\treturn '<' . $tag . $link . ' target=\"' . esc_attr( $_links_add_target ) . '\">';\n}\n\n/**\n * Normalize EOL characters and strip duplicate whitespace.\n *\n * @since 2.7.0\n *\n * @param string $str The string to normalize.\n * @return string The normalized string.\n */\nfunction normalize_whitespace( $str ) {\n\t$str = trim( $str );\n\t$str = str_replace( \"\\r\", \"\\n\", $str );\n\t$str = preg_replace( array( '/\\n+/', '/[ \\t]+/' ), array( \"\\n\", ' ' ), $str );\n\treturn $str;\n}\n\n/**\n * Properly strip all HTML tags including script and style\n *\n * This differs from strip_tags() because it removes the contents of\n * the `<script>` and `<style>` tags. E.g. `strip_tags( '<script>something</script>' )`\n * will return 'something'. wp_strip_all_tags will return ''\n *\n * @since 2.9.0\n *\n * @param string $string        String containing HTML tags\n * @param bool   $remove_breaks Optional. Whether to remove left over line breaks and white space chars\n * @return string The processed string.\n */\nfunction wp_strip_all_tags( $string, $remove_breaks = false ) {\n\t$string = preg_replace( '@<(script|style)[^>]*?>.*?</\\\\1>@si', '', $string );\n\t$string = strip_tags( $string );\n\n\tif ( $remove_breaks ) {\n\t\t$string = preg_replace( '/[\\r\\n\\t ]+/', ' ', $string );\n\t}\n\n\treturn trim( $string );\n}\n\n/**\n * Sanitizes a string from user input or from the database.\n *\n * - Checks for invalid UTF-8,\n * - Converts single `<` characters to entities\n * - Strips all tags\n * - Removes line breaks, tabs, and extra whitespace\n * - Strips octets\n *\n * @since 2.9.0\n *\n * @see sanitize_textarea_field()\n * @see wp_check_invalid_utf8()\n * @see wp_strip_all_tags()\n *\n * @param string $str String to sanitize.\n * @return string Sanitized string.\n */\nfunction sanitize_text_field( $str ) {\n\t$filtered = _sanitize_text_fields( $str, false );\n\n\t/**\n\t * Filters a sanitized text field string.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param string $filtered The sanitized string.\n\t * @param string $str      The string prior to being sanitized.\n\t */\n\treturn apply_filters( 'sanitize_text_field', $filtered, $str );\n}\n\n/**\n * Sanitizes a multiline string from user input or from the database.\n *\n * The function is like sanitize_text_field(), but preserves\n * new lines (\\n) and other whitespace, which are legitimate\n * input in textarea elements.\n *\n * @see sanitize_text_field()\n *\n * @since 4.7.0\n *\n * @param string $str String to sanitize.\n * @return string Sanitized string.\n */\nfunction sanitize_textarea_field( $str ) {\n\t$filtered = _sanitize_text_fields( $str, true );\n\n\t/**\n\t * Filters a sanitized textarea field string.\n\t *\n\t * @since 4.7.0\n\t *\n\t * @param string $filtered The sanitized string.\n\t * @param string $str      The string prior to being sanitized.\n\t */\n\treturn apply_filters( 'sanitize_textarea_field', $filtered, $str );\n}\n\n/**\n * Internal helper function to sanitize a string from user input or from the db\n *\n * @since 4.7.0\n * @access private\n *\n * @param string $str String to sanitize.\n * @param bool $keep_newlines optional Whether to keep newlines. Default: false.\n * @return string Sanitized string.\n */\nfunction _sanitize_text_fields( $str, $keep_newlines = false ) {\n\tif ( is_object( $str ) || is_array( $str ) ) {\n\t\treturn '';\n\t}\n\n\t$str = (string) $str;\n\n\t$filtered = wp_check_invalid_utf8( $str );\n\n\tif ( strpos( $filtered, '<' ) !== false ) {\n\t\t$filtered = wp_pre_kses_less_than( $filtered );\n\t\t// This will strip extra whitespace for us.\n\t\t$filtered = wp_strip_all_tags( $filtered, false );\n\n\t\t// Use html entities in a special case to make sure no later\n\t\t// newline stripping stage could lead to a functional tag\n\t\t$filtered = str_replace( \"<\\n\", \"&lt;\\n\", $filtered );\n\t}\n\n\tif ( ! $keep_newlines ) {\n\t\t$filtered = preg_replace( '/[\\r\\n\\t ]+/', ' ', $filtered );\n\t}\n\t$filtered = trim( $filtered );\n\n\t$found = false;\n\twhile ( preg_match( '/%[a-f0-9]{2}/i', $filtered, $match ) ) {\n\t\t$filtered = str_replace( $match[0], '', $filtered );\n\t\t$found    = true;\n\t}\n\n\tif ( $found ) {\n\t\t// Strip out the whitespace that may now exist after removing the octets.\n\t\t$filtered = trim( preg_replace( '/ +/', ' ', $filtered ) );\n\t}\n\n\treturn $filtered;\n}\n\n/**\n * i18n friendly version of basename()\n *\n * @since 3.1.0\n *\n * @param string $path   A path.\n * @param string $suffix If the filename ends in suffix this will also be cut off.\n * @return string\n */\nfunction wp_basename( $path, $suffix = '' ) {\n\treturn urldecode( basename( str_replace( array( '%2F', '%5C' ), '/', urlencode( $path ) ), $suffix ) );\n}\n\n// phpcs:disable WordPress.WP.CapitalPDangit.Misspelled, WordPress.NamingConventions.ValidFunctionName.FunctionNameInvalid -- 8-)\n/**\n * Forever eliminate \"Wordpress\" from the planet (or at least the little bit we can influence).\n *\n * Violating our coding standards for a good function name.\n *\n * @since 3.0.0\n *\n * @staticvar string|false $dblq\n *\n * @param string $text The text to be modified.\n * @return string The modified text.\n */\nfunction capital_P_dangit( $text ) {\n\t// Simple replacement for titles\n\t$current_filter = current_filter();\n\tif ( 'the_title' === $current_filter || 'wp_title' === $current_filter ) {\n\t\treturn str_replace( 'Wordpress', 'WordPress', $text );\n\t}\n\t// Still here? Use the more judicious replacement\n\tstatic $dblq = false;\n\tif ( false === $dblq ) {\n\t\t$dblq = _x( '&#8220;', 'opening curly double quote' );\n\t}\n\treturn str_replace(\n\t\tarray( ' Wordpress', '&#8216;Wordpress', $dblq . 'Wordpress', '>Wordpress', '(Wordpress' ),\n\t\tarray( ' WordPress', '&#8216;WordPress', $dblq . 'WordPress', '>WordPress', '(WordPress' ),\n\t\t$text\n\t);\n}\n// phpcs:enable\n\n/**\n * Sanitize a mime type\n *\n * @since 3.1.3\n *\n * @param string $mime_type Mime type\n * @return string Sanitized mime type\n */\nfunction sanitize_mime_type( $mime_type ) {\n\t$sani_mime_type = preg_replace( '/[^-+*.a-zA-Z0-9\\/]/', '', $mime_type );\n\t/**\n\t * Filters a mime type following sanitization.\n\t *\n\t * @since 3.1.3\n\t *\n\t * @param string $sani_mime_type The sanitized mime type.\n\t * @param string $mime_type      The mime type prior to sanitization.\n\t */\n\treturn apply_filters( 'sanitize_mime_type', $sani_mime_type, $mime_type );\n}\n\n/**\n * Sanitize space or carriage return separated URLs that are used to send trackbacks.\n *\n * @since 3.4.0\n *\n * @param string $to_ping Space or carriage return separated URLs\n * @return string URLs starting with the http or https protocol, separated by a carriage return.\n */\nfunction sanitize_trackback_urls( $to_ping ) {\n\t$urls_to_ping = preg_split( '/[\\r\\n\\t ]/', trim( $to_ping ), -1, PREG_SPLIT_NO_EMPTY );\n\tforeach ( $urls_to_ping as $k => $url ) {\n\t\tif ( ! preg_match( '#^https?://.#i', $url ) ) {\n\t\t\tunset( $urls_to_ping[ $k ] );\n\t\t}\n\t}\n\t$urls_to_ping = array_map( 'esc_url_raw', $urls_to_ping );\n\t$urls_to_ping = implode( \"\\n\", $urls_to_ping );\n\t/**\n\t * Filters a list of trackback URLs following sanitization.\n\t *\n\t * The string returned here consists of a space or carriage return-delimited list\n\t * of trackback URLs.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param string $urls_to_ping Sanitized space or carriage return separated URLs.\n\t * @param string $to_ping      Space or carriage return separated URLs before sanitization.\n\t */\n\treturn apply_filters( 'sanitize_trackback_urls', $urls_to_ping, $to_ping );\n}\n\n/**\n * Add slashes to a string or array of strings.\n *\n * This should be used when preparing data for core API that expects slashed data.\n * This should not be used to escape data going directly into an SQL query.\n *\n * @since 3.6.0\n *\n * @param string|array $value String or array of strings to slash.\n * @return string|array Slashed $value\n */\nfunction wp_slash( $value ) {\n\tif ( is_array( $value ) ) {\n\t\tforeach ( $value as $k => $v ) {\n\t\t\tif ( is_array( $v ) ) {\n\t\t\t\t$value[ $k ] = wp_slash( $v );\n\t\t\t} else {\n\t\t\t\t$value[ $k ] = addslashes( $v );\n\t\t\t}\n\t\t}\n\t} else {\n\t\t$value = addslashes( $value );\n\t}\n\n\treturn $value;\n}\n\n/**\n * Remove slashes from a string or array of strings.\n *\n * This should be used to remove slashes from data passed to core API that\n * expects data to be unslashed.\n *\n * @since 3.6.0\n *\n * @param string|array $value String or array of strings to unslash.\n * @return string|array Unslashed $value\n */\nfunction wp_unslash( $value ) {\n\treturn stripslashes_deep( $value );\n}\n\n/**\n * Adds slashes to only string values in an array of values.\n *\n * This should be used when preparing data for core APIs that expect slashed data.\n * This should not be used to escape data going directly into an SQL query.\n *\n * @since 5.3.0\n *\n * @param mixed $value Scalar or array of scalars.\n * @return mixed Slashes $value\n */\nfunction wp_slash_strings_only( $value ) {\n\treturn map_deep( $value, 'addslashes_strings_only' );\n}\n\n/**\n * Adds slashes only if the provided value is a string.\n *\n * @since 5.3.0\n *\n * @param mixed $value\n * @return mixed\n */\nfunction addslashes_strings_only( $value ) {\n\treturn is_string( $value ) ? addslashes( $value ) : $value;\n}\n\n/**\n * Extract and return the first URL from passed content.\n *\n * @since 3.6.0\n *\n * @param string $content A string which might contain a URL.\n * @return string|false The found URL.\n */\nfunction get_url_in_content( $content ) {\n\tif ( empty( $content ) ) {\n\t\treturn false;\n\t}\n\n\tif ( preg_match( '/<a\\s[^>]*?href=([\\'\"])(.+?)\\1/is', $content, $matches ) ) {\n\t\treturn esc_url_raw( $matches[2] );\n\t}\n\n\treturn false;\n}\n\n/**\n * Returns the regexp for common whitespace characters.\n *\n * By default, spaces include new lines, tabs, nbsp entities, and the UTF-8 nbsp.\n * This is designed to replace the PCRE \\s sequence.  In ticket #22692, that\n * sequence was found to be unreliable due to random inclusion of the A0 byte.\n *\n * @since 4.0.0\n *\n * @staticvar string $spaces\n *\n * @return string The spaces regexp.\n */\nfunction wp_spaces_regexp() {\n\tstatic $spaces = '';\n\n\tif ( empty( $spaces ) ) {\n\t\t/**\n\t\t * Filters the regexp for common whitespace characters.\n\t\t *\n\t\t * This string is substituted for the \\s sequence as needed in regular\n\t\t * expressions. For websites not written in English, different characters\n\t\t * may represent whitespace. For websites not encoded in UTF-8, the 0xC2 0xA0\n\t\t * sequence may not be in use.\n\t\t *\n\t\t * @since 4.0.0\n\t\t *\n\t\t * @param string $spaces Regexp pattern for matching common whitespace characters.\n\t\t */\n\t\t$spaces = apply_filters( 'wp_spaces_regexp', '[\\r\\n\\t ]|\\xC2\\xA0|&nbsp;' );\n\t}\n\n\treturn $spaces;\n}\n\n/**\n * Print the important emoji-related styles.\n *\n * @since 4.2.0\n *\n * @staticvar bool $printed\n */\nfunction print_emoji_styles() {\n\tstatic $printed = false;\n\n\tif ( $printed ) {\n\t\treturn;\n\t}\n\n\t$printed = true;\n\n\t$type_attr = current_theme_supports( 'html5', 'style' ) ? '' : ' type=\"text/css\"';\n\t?>\n<style<?php echo $type_attr; ?>>\nimg.wp-smiley,\nimg.emoji {\n\tdisplay: inline !important;\n\tborder: none !important;\n\tbox-shadow: none !important;\n\theight: 1em !important;\n\twidth: 1em !important;\n\tmargin: 0 .07em !important;\n\tvertical-align: -0.1em !important;\n\tbackground: none !important;\n\tpadding: 0 !important;\n}\n</style>\n\t<?php\n}\n\n/**\n * Print the inline Emoji detection script if it is not already printed.\n *\n * @since 4.2.0\n * @staticvar bool $printed\n */\nfunction print_emoji_detection_script() {\n\tstatic $printed = false;\n\n\tif ( $printed ) {\n\t\treturn;\n\t}\n\n\t$printed = true;\n\n\t_print_emoji_detection_script();\n}\n\n/**\n * Prints inline Emoji detection script.\n *\n * @ignore\n * @since 4.6.0\n * @access private\n */\nfunction _print_emoji_detection_script() {\n\t$settings = array(\n\t\t/**\n\t\t * Filters the URL where emoji png images are hosted.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param string The emoji base URL for png images.\n\t\t */\n\t\t'baseUrl' => apply_filters( 'emoji_url', 'https://s.w.org/images/core/emoji/12.0.0-1/72x72/' ),\n\n\t\t/**\n\t\t * Filters the extension of the emoji png files.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param string The emoji extension for png files. Default .png.\n\t\t */\n\t\t'ext'     => apply_filters( 'emoji_ext', '.png' ),\n\n\t\t/**\n\t\t * Filters the URL where emoji SVG images are hosted.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param string The emoji base URL for svg images.\n\t\t */\n\t\t'svgUrl'  => apply_filters( 'emoji_svg_url', 'https://s.w.org/images/core/emoji/12.0.0-1/svg/' ),\n\n\t\t/**\n\t\t * Filters the extension of the emoji SVG files.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param string The emoji extension for svg files. Default .svg.\n\t\t */\n\t\t'svgExt'  => apply_filters( 'emoji_svg_ext', '.svg' ),\n\t);\n\n\t$version   = 'ver=' . get_bloginfo( 'version' );\n\t$type_attr = current_theme_supports( 'html5', 'style' ) ? '' : ' type=\"text/javascript\"';\n\n\tif ( SCRIPT_DEBUG ) {\n\t\t$settings['source'] = array(\n\t\t\t/** This filter is documented in wp-includes/class.wp-scripts.php */\n\t\t\t'wpemoji' => apply_filters( 'script_loader_src', includes_url( \"js/wp-emoji.js?$version\" ), 'wpemoji' ),\n\t\t\t/** This filter is documented in wp-includes/class.wp-scripts.php */\n\t\t\t'twemoji' => apply_filters( 'script_loader_src', includes_url( \"js/twemoji.js?$version\" ), 'twemoji' ),\n\t\t);\n\n\t\t?>\n\t\t<script<?php echo $type_attr; ?>>\n\t\t\twindow._wpemojiSettings = <?php echo wp_json_encode( $settings ); ?>;\n\t\t\t<?php readfile( ABSPATH . WPINC . '/js/wp-emoji-loader.js' ); ?>\n\t\t</script>\n\t\t<?php\n\t} else {\n\t\t$settings['source'] = array(\n\t\t\t/** This filter is documented in wp-includes/class.wp-scripts.php */\n\t\t\t'concatemoji' => apply_filters( 'script_loader_src', includes_url( \"js/wp-emoji-release.min.js?$version\" ), 'concatemoji' ),\n\t\t);\n\n\t\t/*\n\t\t * If you're looking at a src version of this file, you'll see an \"include\"\n\t\t * statement below. This is used by the `npm run build` process to directly\n\t\t * include a minified version of wp-emoji-loader.js, instead of using the\n\t\t * readfile() method from above.\n\t\t *\n\t\t * If you're looking at a build version of this file, you'll see a string of\n\t\t * minified JavaScript. If you need to debug it, please turn on SCRIPT_DEBUG\n\t\t * and edit wp-emoji-loader.js directly.\n\t\t */\n\t\t?>\n\t\t<script<?php echo $type_attr; ?>>\n\t\t\twindow._wpemojiSettings = <?php echo wp_json_encode( $settings ); ?>;\n\t\t\tinclude \"js/wp-emoji-loader.min.js\"\n\t\t</script>\n\t\t<?php\n\t}\n}\n\n/**\n * Convert emoji characters to their equivalent HTML entity.\n *\n * This allows us to store emoji in a DB using the utf8 character set.\n *\n * @since 4.2.0\n *\n * @param string $content The content to encode.\n * @return string The encoded content.\n */\nfunction wp_encode_emoji( $content ) {\n\t$emoji = _wp_emoji_list( 'partials' );\n\n\tforeach ( $emoji as $emojum ) {\n\t\t$emoji_char = html_entity_decode( $emojum );\n\t\tif ( false !== strpos( $content, $emoji_char ) ) {\n\t\t\t$content = preg_replace( \"/$emoji_char/\", $emojum, $content );\n\t\t}\n\t}\n\n\treturn $content;\n}\n\n/**\n * Convert emoji to a static img element.\n *\n * @since 4.2.0\n *\n * @param string $text The content to encode.\n * @return string The encoded content.\n */\nfunction wp_staticize_emoji( $text ) {\n\tif ( false === strpos( $text, '&#x' ) ) {\n\t\tif ( ( function_exists( 'mb_check_encoding' ) && mb_check_encoding( $text, 'ASCII' ) ) || ! preg_match( '/[^\\x00-\\x7F]/', $text ) ) {\n\t\t\t// The text doesn't contain anything that might be emoji, so we can return early.\n\t\t\treturn $text;\n\t\t} else {\n\t\t\t$encoded_text = wp_encode_emoji( $text );\n\t\t\tif ( $encoded_text === $text ) {\n\t\t\t\treturn $encoded_text;\n\t\t\t}\n\n\t\t\t$text = $encoded_text;\n\t\t}\n\t}\n\n\t$emoji = _wp_emoji_list( 'entities' );\n\n\t// Quickly narrow down the list of emoji that might be in the text and need replacing.\n\t$possible_emoji = array();\n\tforeach ( $emoji as $emojum ) {\n\t\tif ( false !== strpos( $text, $emojum ) ) {\n\t\t\t$possible_emoji[ $emojum ] = html_entity_decode( $emojum );\n\t\t}\n\t}\n\n\tif ( ! $possible_emoji ) {\n\t\treturn $text;\n\t}\n\n\t/** This filter is documented in wp-includes/formatting.php */\n\t$cdn_url = apply_filters( 'emoji_url', 'https://s.w.org/images/core/emoji/12.0.0-1/72x72/' );\n\n\t/** This filter is documented in wp-includes/formatting.php */\n\t$ext = apply_filters( 'emoji_ext', '.png' );\n\n\t$output = '';\n\t/*\n\t * HTML loop taken from smiley function, which was taken from texturize function.\n\t * It'll never be consolidated.\n\t *\n\t * First, capture the tags as well as in between.\n\t */\n\t$textarr = preg_split( '/(<.*>)/U', $text, -1, PREG_SPLIT_DELIM_CAPTURE );\n\t$stop    = count( $textarr );\n\n\t// Ignore processing of specific tags.\n\t$tags_to_ignore       = 'code|pre|style|script|textarea';\n\t$ignore_block_element = '';\n\n\tfor ( $i = 0; $i < $stop; $i++ ) {\n\t\t$content = $textarr[ $i ];\n\n\t\t// If we're in an ignore block, wait until we find its closing tag.\n\t\tif ( '' == $ignore_block_element && preg_match( '/^<(' . $tags_to_ignore . ')>/', $content, $matches ) ) {\n\t\t\t$ignore_block_element = $matches[1];\n\t\t}\n\n\t\t// If it's not a tag and not in ignore block.\n\t\tif ( '' == $ignore_block_element && strlen( $content ) > 0 && '<' != $content[0] && false !== strpos( $content, '&#x' ) ) {\n\t\t\tforeach ( $possible_emoji as $emojum => $emoji_char ) {\n\t\t\t\tif ( false === strpos( $content, $emojum ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$file = str_replace( ';&#x', '-', $emojum );\n\t\t\t\t$file = str_replace( array( '&#x', ';' ), '', $file );\n\n\t\t\t\t$entity = sprintf( '<img src=\"%s\" alt=\"%s\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />', $cdn_url . $file . $ext, $emoji_char );\n\n\t\t\t\t$content = str_replace( $emojum, $entity, $content );\n\t\t\t}\n\t\t}\n\n\t\t// Did we exit ignore block.\n\t\tif ( '' != $ignore_block_element && '</' . $ignore_block_element . '>' == $content ) {\n\t\t\t$ignore_block_element = '';\n\t\t}\n\n\t\t$output .= $content;\n\t}\n\n\t// Finally, remove any stray U+FE0F characters\n\t$output = str_replace( '&#xfe0f;', '', $output );\n\n\treturn $output;\n}\n\n/**\n * Convert emoji in emails into static images.\n *\n * @since 4.2.0\n *\n * @param array $mail The email data array.\n * @return array The email data array, with emoji in the message staticized.\n */\nfunction wp_staticize_emoji_for_email( $mail ) {\n\tif ( ! isset( $mail['message'] ) ) {\n\t\treturn $mail;\n\t}\n\n\t/*\n\t * We can only transform the emoji into images if it's a text/html email.\n\t * To do that, here's a cut down version of the same process that happens\n\t * in wp_mail() - get the Content-Type from the headers, if there is one,\n\t * then pass it through the wp_mail_content_type filter, in case a plugin\n\t * is handling changing the Content-Type.\n\t */\n\t$headers = array();\n\tif ( isset( $mail['headers'] ) ) {\n\t\tif ( is_array( $mail['headers'] ) ) {\n\t\t\t$headers = $mail['headers'];\n\t\t} else {\n\t\t\t$headers = explode( \"\\n\", str_replace( \"\\r\\n\", \"\\n\", $mail['headers'] ) );\n\t\t}\n\t}\n\n\tforeach ( $headers as $header ) {\n\t\tif ( strpos( $header, ':' ) === false ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Explode them out.\n\t\tlist( $name, $content ) = explode( ':', trim( $header ), 2 );\n\n\t\t// Cleanup crew.\n\t\t$name    = trim( $name );\n\t\t$content = trim( $content );\n\n\t\tif ( 'content-type' === strtolower( $name ) ) {\n\t\t\tif ( strpos( $content, ';' ) !== false ) {\n\t\t\t\tlist( $type, $charset ) = explode( ';', $content );\n\t\t\t\t$content_type           = trim( $type );\n\t\t\t} else {\n\t\t\t\t$content_type = trim( $content );\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Set Content-Type if we don't have a content-type from the input headers.\n\tif ( ! isset( $content_type ) ) {\n\t\t$content_type = 'text/plain';\n\t}\n\n\t/** This filter is documented in wp-includes/pluggable.php */\n\t$content_type = apply_filters( 'wp_mail_content_type', $content_type );\n\n\tif ( 'text/html' === $content_type ) {\n\t\t$mail['message'] = wp_staticize_emoji( $mail['message'] );\n\t}\n\n\treturn $mail;\n}\n\n/**\n * Returns arrays of emoji data.\n *\n * These arrays are automatically built from the regex in twemoji.js - if they need to be updated,\n * you should update the regex there, then run the `npm run grunt precommit:emoji` job.\n *\n * @since 4.9.0\n * @access private\n *\n * @param string $type Optional. Which array type to return. Accepts 'partials' or 'entities', default 'entities'.\n * @return array An array to match all emoji that WordPress recognises.\n */\nfunction _wp_emoji_list( $type = 'entities' ) {\n\t// Do not remove the START/END comments - they're used to find where to insert the arrays.\n\n\t// START: emoji arrays\n\t$entities = array( '&#x1f469;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f48b;&#x200d;&#x1f469;', '&#x1f469;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f48b;&#x200d;&#x1f468;', '&#x1f468;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f48b;&#x200d;&#x1f468;', '&#x1f3f4;&#xe0067;&#xe0062;&#xe0077;&#xe006c;&#xe0073;&#xe007f;', '&#x1f3f4;&#xe0067;&#xe0062;&#xe0073;&#xe0063;&#xe0074;&#xe007f;', '&#x1f3f4;&#xe0067;&#xe0062;&#xe0065;&#xe006e;&#xe0067;&#xe007f;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fb;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fc;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fd;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f469;&#x1f3fc;', '&#x1f9d1;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3ff;', '&#x1f9d1;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fe;', '&#x1f9d1;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fd;', '&#x1f9d1;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fc;', '&#x1f9d1;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fb;', '&#x1f9d1;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fe;', '&#x1f9d1;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fd;', '&#x1f9d1;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fc;', '&#x1f9d1;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fb;', '&#x1f9d1;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fd;', '&#x1f9d1;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fc;', '&#x1f9d1;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fb;', '&#x1f9d1;&#x1f3fc;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fc;', '&#x1f9d1;&#x1f3fc;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fb;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fb;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fc;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fd;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fe;', '&#x1f9d1;&#x1f3fb;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fb;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f469;&#x1f3fb;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fe;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fd;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fc;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fb;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f469;&#x1f3fd;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fb;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f469;&#x1f3fe;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f469;&#x1f3fc;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f469;&#x1f3fb;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f469;&#x1f3fd;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fb;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fc;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fc;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fd;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fe;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3ff;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fb;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fd;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fe;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3ff;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f91d;&#x200d;&#x1f469;&#x1f3fb;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fb;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fc;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fe;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3ff;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f469;&#x1f3fb;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f469;&#x1f3fc;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fb;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fc;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fd;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3ff;', '&#x1f468;&#x200d;&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f467;', '&#x1f468;&#x200d;&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f466;', '&#x1f469;&#x200d;&#x1f469;&#x200d;&#x1f466;&#x200d;&#x1f466;', '&#x1f468;&#x200d;&#x1f468;&#x200d;&#x1f467;&#x200d;&#x1f467;', '&#x1f468;&#x200d;&#x1f468;&#x200d;&#x1f467;&#x200d;&#x1f466;', '&#x1f469;&#x200d;&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f466;', '&#x1f468;&#x200d;&#x1f468;&#x200d;&#x1f466;&#x200d;&#x1f466;', '&#x1f469;&#x200d;&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f467;', '&#x1f468;&#x200d;&#x1f469;&#x200d;&#x1f466;&#x200d;&#x1f466;', '&#x1f469;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f468;', '&#x1f468;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f468;', '&#x1f469;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f469;', '&#x1f468;&#x200d;&#x1f468;&#x200d;&#x1f466;', '&#x1f468;&#x200d;&#x1f469;&#x200d;&#x1f467;', '&#x1f469;&#x200d;&#x1f466;&#x200d;&#x1f466;', '&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f466;', '&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f467;', '&#x1f468;&#x200d;&#x1f468;&#x200d;&#x1f467;', '&#x1f469;&#x200d;&#x1f469;&#x200d;&#x1f466;', '&#x1f468;&#x200d;&#x1f469;&#x200d;&#x1f466;', '&#x1f468;&#x200d;&#x1f467;&#x200d;&#x1f467;', '&#x1f469;&#x200d;&#x1f469;&#x200d;&#x1f467;', '&#x1f468;&#x200d;&#x1f467;&#x200d;&#x1f466;', '&#x1f468;&#x200d;&#x1f466;&#x200d;&#x1f466;', '&#x1f9d1;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;', '&#x1f939;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9da;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9da;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9da;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9da;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c3;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9da;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9da;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9da;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9da;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9da;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d9;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d9;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f468;&#x1f3fc;&#x200d;&#x2695;&#xfe0f;', '&#x1f468;&#x1f3fc;&#x200d;&#x2696;&#xfe0f;', '&#x1f468;&#x1f3fc;&#x200d;&#x2708;&#xfe0f;', '&#x1f9d9;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d9;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d9;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d9;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d9;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d9;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d9;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d9;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d8;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d8;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d8;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d8;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d8;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c3;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c3;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d8;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d8;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d8;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d8;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d8;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d7;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d7;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f468;&#x1f3fd;&#x200d;&#x2695;&#xfe0f;', '&#x1f468;&#x1f3fd;&#x200d;&#x2696;&#xfe0f;', '&#x1f468;&#x1f3fd;&#x200d;&#x2708;&#xfe0f;', '&#x1f9d7;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d7;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d7;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d7;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d7;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d7;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d7;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d7;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d6;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d6;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d6;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d6;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d6;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c3;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c3;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f3c3;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d6;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d6;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d6;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d6;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d6;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f3c4;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f3c4;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f468;&#x1f3fe;&#x200d;&#x2695;&#xfe0f;', '&#x1f468;&#x1f3fe;&#x200d;&#x2696;&#xfe0f;', '&#x1f468;&#x1f3fe;&#x200d;&#x2708;&#xfe0f;', '&#x1f3c4;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f3c4;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c4;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f3c4;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c4;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f3c4;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c4;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f3c4;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f3ca;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f3ca;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f3ca;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f3ca;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f3ca;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f3ca;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f3ca;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f3ca;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f3ca;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f3ca;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cf;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cf;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9cf;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cf;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9cf;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cf;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f468;&#x1f3ff;&#x200d;&#x2695;&#xfe0f;', '&#x1f468;&#x1f3ff;&#x200d;&#x2696;&#xfe0f;', '&#x1f468;&#x1f3ff;&#x200d;&#x2708;&#xfe0f;', '&#x1f9cf;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cf;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9cf;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cf;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9ce;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9ce;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9ce;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cb;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9ce;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cb;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cb;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9ce;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cb;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cb;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cb;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cb;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cb;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cb;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cb;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cc;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cc;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cc;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9ce;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9ce;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9ce;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9ce;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9ce;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9cd;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cd;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9cd;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cd;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9cd;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cd;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9cd;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cd;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9cd;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cd;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b9;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cc;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cc;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b9;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b9;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9b9;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b9;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f9b9;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b9;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9b9;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b9;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9b9;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b8;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9b8;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b8;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9b8;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cc;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cc;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cc;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cc;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b8;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f9b8;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b8;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9b8;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b8;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9b8;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f93e;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f469;&#x1f3fb;&#x200d;&#x2695;&#xfe0f;', '&#x1f469;&#x1f3fb;&#x200d;&#x2696;&#xfe0f;', '&#x1f469;&#x1f3fb;&#x200d;&#x2708;&#xfe0f;', '&#x1f93e;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f93e;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f93e;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f93e;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f93e;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f93e;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f93e;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f93e;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f93e;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f93d;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f93d;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f93d;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f93d;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cc;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64d;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f3c3;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f3c3;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dd;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f93d;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f93d;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f93d;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f93d;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f93d;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f93d;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f939;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f469;&#x1f3fc;&#x200d;&#x2695;&#xfe0f;', '&#x1f469;&#x1f3fc;&#x200d;&#x2696;&#xfe0f;', '&#x1f469;&#x1f3fc;&#x200d;&#x2708;&#xfe0f;', '&#x1f939;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f939;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f939;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f939;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f939;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f939;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f939;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f939;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c3;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f938;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f938;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f938;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f938;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dd;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dd;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dd;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dd;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dd;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dd;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f938;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f938;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f938;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f938;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f938;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f938;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f937;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f469;&#x1f3fd;&#x200d;&#x2695;&#xfe0f;', '&#x1f469;&#x1f3fd;&#x200d;&#x2696;&#xfe0f;', '&#x1f469;&#x1f3fd;&#x200d;&#x2708;&#xfe0f;', '&#x1f937;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f937;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f937;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f937;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f937;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f937;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f937;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f937;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f937;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f935;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f935;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f935;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f935;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dd;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dd;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dd;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dc;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dc;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dc;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dc;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f935;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f935;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f935;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f935;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f935;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f935;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f926;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f469;&#x1f3fe;&#x200d;&#x2695;&#xfe0f;', '&#x1f469;&#x1f3fe;&#x200d;&#x2696;&#xfe0f;', '&#x1f469;&#x1f3fe;&#x200d;&#x2708;&#xfe0f;', '&#x1f926;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f926;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f926;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f926;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f926;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f926;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f926;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f926;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f926;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b6;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b6;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b6;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b6;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dc;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dc;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dc;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dc;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dc;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dc;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9db;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9db;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b6;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b6;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b6;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b6;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b6;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b6;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b5;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f469;&#x1f3ff;&#x200d;&#x2695;&#xfe0f;', '&#x1f469;&#x1f3ff;&#x200d;&#x2696;&#xfe0f;', '&#x1f469;&#x1f3ff;&#x200d;&#x2708;&#xfe0f;', '&#x1f6b5;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b5;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b5;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b5;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b5;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b5;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b5;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f468;&#x1f3fb;&#x200d;&#x2695;&#xfe0f;', '&#x1f6b5;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f468;&#x1f3fb;&#x200d;&#x2696;&#xfe0f;', '&#x1f468;&#x1f3fb;&#x200d;&#x2708;&#xfe0f;', '&#x1f6b5;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9db;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9db;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9db;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f9db;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9db;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b4;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b4;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b4;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b4;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b4;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b4;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b4;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b4;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b4;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b4;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f6a3;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f6a3;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f6a3;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f6a3;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f6a3;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f6a3;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9db;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9db;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9db;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9da;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f46e;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f46e;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f46e;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f46e;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f46e;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f46e;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f46e;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f46e;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f46e;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f46e;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f6a3;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f6a3;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f6a3;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f6a3;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f471;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f471;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f471;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f471;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f471;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f471;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f471;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f471;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f471;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f471;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64e;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64e;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f473;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f473;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f473;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f473;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f473;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f473;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f473;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f473;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f473;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f473;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64e;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f64e;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f477;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f477;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f477;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f477;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f477;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f477;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f477;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f477;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f477;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f477;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64e;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c3;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f481;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f481;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f481;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f481;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f481;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f481;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f481;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f481;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f481;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f481;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64e;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f64e;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f482;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f482;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f482;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f482;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f482;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f482;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f482;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f482;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f482;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f482;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64e;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f64e;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f486;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f486;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f486;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f486;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f486;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f486;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f486;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f486;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f486;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f486;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64e;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f64d;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f487;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f487;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f487;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f487;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f487;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f487;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f487;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f487;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f487;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f487;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64d;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f64d;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f574;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f574;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f574;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f574;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f574;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f574;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f574;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f574;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f574;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f574;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f575;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f575;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f575;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f575;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f575;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f575;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f575;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f575;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f575;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f575;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f645;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f645;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f645;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f645;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f645;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f645;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f645;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f645;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f645;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f645;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64d;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f64d;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f646;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f646;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f646;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f646;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f646;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f646;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f646;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f646;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f646;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f646;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64d;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f64d;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f647;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f647;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f647;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f647;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f647;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f647;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f647;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f647;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f647;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f647;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64d;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f64d;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f64b;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f64b;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f64b;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f64b;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f64b;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f64b;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f64b;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f64b;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f64b;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f64b;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x26f9;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x26f9;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x26f9;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x26f9;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cb;&#xfe0f;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cb;&#xfe0f;&#x200d;&#x2642;&#xfe0f;', '&#x1f575;&#xfe0f;&#x200d;&#x2640;&#xfe0f;', '&#x1f575;&#xfe0f;&#x200d;&#x2642;&#xfe0f;', '&#x26f9;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cc;&#xfe0f;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cc;&#xfe0f;&#x200d;&#x2642;&#xfe0f;', '&#x26f9;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f574;&#xfe0f;&#x200d;&#x2640;&#xfe0f;', '&#x1f574;&#xfe0f;&#x200d;&#x2642;&#xfe0f;', '&#x1f3f3;&#xfe0f;&#x200d;&#x26a7;&#xfe0f;', '&#x26f9;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x26f9;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x26f9;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x26f9;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x26f9;&#xfe0f;&#x200d;&#x2642;&#xfe0f;', '&#x26f9;&#xfe0f;&#x200d;&#x2640;&#xfe0f;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f4bc;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f3eb;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f33e;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f373;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f393;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f3a4;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f3a8;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f3eb;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f9bd;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f9bc;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f9b3;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f9b2;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f9b1;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f9b0;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f9af;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f692;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f680;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f52c;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f527;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f4bc;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f4bb;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f3ed;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f3eb;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f3a8;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f3a4;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f393;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f373;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f33e;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f9bd;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f9bc;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f9b3;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f9b2;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f9b1;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f9b0;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f9af;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f692;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f680;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f52c;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f527;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f4bc;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f4bb;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f3ed;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f3eb;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f3a8;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f3a4;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f393;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f373;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f33e;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f9bd;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f9bc;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f9b3;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f9b2;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f9b1;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f9b0;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f9af;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f692;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f680;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f52c;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f527;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f4bc;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f4bb;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f3ed;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f3eb;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f3a8;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f3a4;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f393;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f373;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f33e;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f9bd;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f9bc;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f9b3;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f9b2;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f9b1;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f9b0;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f9af;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f692;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f680;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f52c;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f527;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f4bc;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f4bb;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f3ed;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f3eb;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f3a8;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f3a4;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f393;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f373;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f33e;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f9bd;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f9bc;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f9b3;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f9b2;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f9b1;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f9b0;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f9af;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f692;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f680;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f52c;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f527;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f3ed;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f4bb;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f3eb;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f3a8;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f3a4;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f393;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f373;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f33e;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f3ed;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f4bb;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f4bc;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f527;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f52c;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f680;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f692;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f9af;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f9b0;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f9b1;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f9b2;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f9b3;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f9bc;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f9bd;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f33e;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f373;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f393;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f3a4;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f9bd;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f9bc;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f9b3;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f9b2;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f9b1;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f9b0;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f9af;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f692;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f680;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f52c;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f527;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f4bc;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f4bb;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f3ed;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f3eb;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f3a8;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f3a4;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f393;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f373;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f33e;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f9bd;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f9bc;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f9b3;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f9b2;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f9b1;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f9b0;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f9af;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f692;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f680;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f52c;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f527;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f4bc;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f4bb;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f3ed;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f3eb;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f3a8;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f3a4;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f393;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f373;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f33e;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f9bd;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f9bc;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f9b3;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f9b2;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f9b1;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f9b0;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f9af;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f692;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f680;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f52c;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f527;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f4bc;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f4bb;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f3ed;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f3eb;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f3a8;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f3a4;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f393;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f373;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f33e;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f9bd;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f9bc;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f9b3;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f9b2;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f9b1;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f9b0;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f9af;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f692;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f680;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f52c;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f527;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f4bc;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f4bb;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f3ed;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f3a8;', '&#x1f3f3;&#xfe0f;&#x200d;&#x1f308;', '&#x1f64d;&#x200d;&#x2640;&#xfe0f;', '&#x1f64d;&#x200d;&#x2642;&#xfe0f;', '&#x1f9ce;&#x200d;&#x2640;&#xfe0f;', '&#x1f9ce;&#x200d;&#x2642;&#xfe0f;', '&#x1f486;&#x200d;&#x2640;&#xfe0f;', '&#x1f482;&#x200d;&#x2642;&#xfe0f;', '&#x1f482;&#x200d;&#x2640;&#xfe0f;', '&#x1f481;&#x200d;&#x2642;&#xfe0f;', '&#x1f481;&#x200d;&#x2640;&#xfe0f;', '&#x1f477;&#x200d;&#x2640;&#xfe0f;', '&#x1f473;&#x200d;&#x2642;&#xfe0f;', '&#x1f473;&#x200d;&#x2640;&#xfe0f;', '&#x1f939;&#x200d;&#x2640;&#xfe0f;', '&#x1f939;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cf;&#x200d;&#x2640;&#xfe0f;', '&#x1f9cf;&#x200d;&#x2642;&#xfe0f;', '&#x1f93c;&#x200d;&#x2640;&#xfe0f;', '&#x1f93c;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b6;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b6;&#x200d;&#x2642;&#xfe0f;', '&#x1f471;&#x200d;&#x2642;&#xfe0f;', '&#x1f471;&#x200d;&#x2640;&#xfe0f;', '&#x1f64e;&#x200d;&#x2640;&#xfe0f;', '&#x1f64e;&#x200d;&#x2642;&#xfe0f;', '&#x1f46f;&#x200d;&#x2642;&#xfe0f;', '&#x1f46f;&#x200d;&#x2640;&#xfe0f;', '&#x1f46e;&#x200d;&#x2642;&#xfe0f;', '&#x1f46e;&#x200d;&#x2640;&#xfe0f;', '&#x1f93d;&#x200d;&#x2640;&#xfe0f;', '&#x1f93d;&#x200d;&#x2642;&#xfe0f;', '&#x1f469;&#x200d;&#x2708;&#xfe0f;', '&#x1f469;&#x200d;&#x2696;&#xfe0f;', '&#x1f926;&#x200d;&#x2640;&#xfe0f;', '&#x1f926;&#x200d;&#x2642;&#xfe0f;', '&#x1f469;&#x200d;&#x2695;&#xfe0f;', '&#x1f3c3;&#x200d;&#x2640;&#xfe0f;', '&#x1f3c3;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c4;&#x200d;&#x2640;&#xfe0f;', '&#x1f6a3;&#x200d;&#x2640;&#xfe0f;', '&#x1f6a3;&#x200d;&#x2642;&#xfe0f;', '&#x1f93e;&#x200d;&#x2640;&#xfe0f;', '&#x1f93e;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d6;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d6;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c4;&#x200d;&#x2642;&#xfe0f;', '&#x1f3ca;&#x200d;&#x2640;&#xfe0f;', '&#x1f3ca;&#x200d;&#x2642;&#xfe0f;', '&#x1f64b;&#x200d;&#x2642;&#xfe0f;', '&#x1f935;&#x200d;&#x2640;&#xfe0f;', '&#x1f935;&#x200d;&#x2642;&#xfe0f;', '&#x1f647;&#x200d;&#x2642;&#xfe0f;', '&#x1f647;&#x200d;&#x2640;&#xfe0f;', '&#x1f3f4;&#x200d;&#x2620;&#xfe0f;', '&#x1f9df;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d7;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d7;&#x200d;&#x2642;&#xfe0f;', '&#x1f9b8;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b8;&#x200d;&#x2642;&#xfe0f;', '&#x1f9df;&#x200d;&#x2640;&#xfe0f;', '&#x1f9de;&#x200d;&#x2642;&#xfe0f;', '&#x1f64b;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b4;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b4;&#x200d;&#x2642;&#xfe0f;', '&#x1f9de;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dd;&#x200d;&#x2642;&#xfe0f;', '&#x1f937;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d8;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d8;&#x200d;&#x2642;&#xfe0f;', '&#x1f937;&#x200d;&#x2642;&#xfe0f;', '&#x1f468;&#x200d;&#x2708;&#xfe0f;', '&#x1f9b9;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b9;&#x200d;&#x2642;&#xfe0f;', '&#x1f468;&#x200d;&#x2696;&#xfe0f;', '&#x1f468;&#x200d;&#x2695;&#xfe0f;', '&#x1f9dd;&#x200d;&#x2640;&#xfe0f;', '&#x1f646;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d9;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d9;&#x200d;&#x2642;&#xfe0f;', '&#x1f646;&#x200d;&#x2640;&#xfe0f;', '&#x1f645;&#x200d;&#x2642;&#xfe0f;', '&#x1f645;&#x200d;&#x2640;&#xfe0f;', '&#x1f487;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9cd;&#x200d;&#x2642;&#xfe0f;', '&#x1f487;&#x200d;&#x2640;&#xfe0f;', '&#x1f486;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b5;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b5;&#x200d;&#x2642;&#xfe0f;', '&#x1f9da;&#x200d;&#x2640;&#xfe0f;', '&#x1f9da;&#x200d;&#x2642;&#xfe0f;', '&#x1f938;&#x200d;&#x2640;&#xfe0f;', '&#x1f938;&#x200d;&#x2642;&#xfe0f;', '&#x1f9db;&#x200d;&#x2642;&#xfe0f;', '&#x1f9db;&#x200d;&#x2640;&#xfe0f;', '&#x1f477;&#x200d;&#x2642;&#xfe0f;', '&#x1f468;&#x200d;&#x1f33e;', '&#x1f468;&#x200d;&#x1f393;', '&#x1f468;&#x200d;&#x1f3a4;', '&#x1f468;&#x200d;&#x1f3a8;', '&#x1f468;&#x200d;&#x1f3eb;', '&#x1f468;&#x200d;&#x1f3ed;', '&#x1f468;&#x200d;&#x1f466;', '&#x1f468;&#x200d;&#x1f467;', '&#x1f468;&#x200d;&#x1f4bb;', '&#x1f468;&#x200d;&#x1f4bc;', '&#x1f468;&#x200d;&#x1f527;', '&#x1f468;&#x200d;&#x1f52c;', '&#x1f468;&#x200d;&#x1f680;', '&#x1f468;&#x200d;&#x1f692;', '&#x1f468;&#x200d;&#x1f9af;', '&#x1f468;&#x200d;&#x1f9b0;', '&#x1f468;&#x200d;&#x1f9b1;', '&#x1f468;&#x200d;&#x1f9b2;', '&#x1f468;&#x200d;&#x1f9b3;', '&#x1f468;&#x200d;&#x1f9bc;', '&#x1f468;&#x200d;&#x1f9bd;', '&#x1f469;&#x200d;&#x1f33e;', '&#x1f468;&#x200d;&#x1f373;', '&#x1f469;&#x200d;&#x1f393;', '&#x1f469;&#x200d;&#x1f3a4;', '&#x1f469;&#x200d;&#x1f3a8;', '&#x1f469;&#x200d;&#x1f3eb;', '&#x1f441;&#x200d;&#x1f5e8;', '&#x1f415;&#x200d;&#x1f9ba;', '&#x1f469;&#x200d;&#x1f3ed;', '&#x1f469;&#x200d;&#x1f466;', '&#x1f469;&#x200d;&#x1f467;', '&#x1f469;&#x200d;&#x1f4bb;', '&#x1f469;&#x200d;&#x1f4bc;', '&#x1f469;&#x200d;&#x1f527;', '&#x1f469;&#x200d;&#x1f52c;', '&#x1f469;&#x200d;&#x1f680;', '&#x1f469;&#x200d;&#x1f692;', '&#x1f469;&#x200d;&#x1f9af;', '&#x1f469;&#x200d;&#x1f9b0;', '&#x1f469;&#x200d;&#x1f9b1;', '&#x1f469;&#x200d;&#x1f9b2;', '&#x1f469;&#x200d;&#x1f9b3;', '&#x1f469;&#x200d;&#x1f9bc;', '&#x1f469;&#x200d;&#x1f9bd;', '&#x1f469;&#x200d;&#x1f373;', '&#x1f1ed;&#x1f1f7;', '&#x1f481;&#x1f3ff;', '&#x1f1ed;&#x1f1f9;', '&#x1f1ed;&#x1f1fa;', '&#x1f1ee;&#x1f1e8;', '&#x1f1ee;&#x1f1e9;', '&#x1f482;&#x1f3fb;', '&#x1f1ee;&#x1f1ea;', '&#x1f1ee;&#x1f1f1;', '&#x1f482;&#x1f3fc;', '&#x1f1ee;&#x1f1f2;', '&#x1f1ee;&#x1f1f3;', '&#x1f482;&#x1f3fd;', '&#x1f1ee;&#x1f1f4;', '&#x1f1ee;&#x1f1f6;', '&#x1f482;&#x1f3fe;', '&#x1f1ee;&#x1f1f7;', '&#x1f1ee;&#x1f1f8;', '&#x1f482;&#x1f3ff;', '&#x1f1ee;&#x1f1f9;', '&#x1f468;&#x1f3fc;', '&#x1f483;&#x1f3fb;', '&#x1f483;&#x1f3fc;', '&#x1f483;&#x1f3fd;', '&#x1f483;&#x1f3fe;', '&#x1f483;&#x1f3ff;', '&#x1f485;&#x1f3fb;', '&#x1f485;&#x1f3fc;', '&#x1f485;&#x1f3fd;', '&#x1f485;&#x1f3fe;', '&#x1f485;&#x1f3ff;', '&#x1f1ef;&#x1f1ea;', '&#x1f1ef;&#x1f1f2;', '&#x1f486;&#x1f3fb;', '&#x1f1ef;&#x1f1f4;', '&#x1f1ef;&#x1f1f5;', '&#x1f486;&#x1f3fc;', '&#x1f1f0;&#x1f1ea;', '&#x1f1f0;&#x1f1ec;', '&#x1f486;&#x1f3fd;', '&#x1f1f0;&#x1f1ed;', '&#x1f1f0;&#x1f1ee;', '&#x1f486;&#x1f3fe;', '&#x1f1f0;&#x1f1f2;', '&#x1f1f0;&#x1f1f3;', '&#x1f486;&#x1f3ff;', '&#x1f1f0;&#x1f1f5;', '&#x1f1f0;&#x1f1f7;', '&#x1f1f0;&#x1f1fc;', '&#x1f1f0;&#x1f1fe;', '&#x1f487;&#x1f3fb;', '&#x1f1f0;&#x1f1ff;', '&#x1f1f1;&#x1f1e6;', '&#x1f487;&#x1f3fc;', '&#x1f1f1;&#x1f1e7;', '&#x1f1f1;&#x1f1e8;', '&#x1f487;&#x1f3fd;', '&#x1f1f1;&#x1f1ee;', '&#x1f1f1;&#x1f1f0;', '&#x1f487;&#x1f3fe;', '&#x1f1f1;&#x1f1f7;', '&#x1f1f1;&#x1f1f8;', '&#x1f487;&#x1f3ff;', '&#x1f1f1;&#x1f1f9;', '&#x1f1f1;&#x1f1fa;', '&#x1f4aa;&#x1f3fb;', '&#x1f4aa;&#x1f3fc;', '&#x1f4aa;&#x1f3fd;', '&#x1f4aa;&#x1f3fe;', '&#x1f4aa;&#x1f3ff;', '&#x1f1f1;&#x1f1fb;', '&#x1f468;&#x1f3fd;', '&#x1f574;&#x1f3fb;', '&#x1f1f1;&#x1f1fe;', '&#x1f1f2;&#x1f1e6;', '&#x1f574;&#x1f3fc;', '&#x1f1f2;&#x1f1e8;', '&#x1f1f2;&#x1f1e9;', '&#x1f574;&#x1f3fd;', '&#x1f1f2;&#x1f1ea;', '&#x1f1f2;&#x1f1eb;', '&#x1f574;&#x1f3fe;', '&#x1f1f2;&#x1f1ec;', '&#x1f1f2;&#x1f1ed;', '&#x1f574;&#x1f3ff;', '&#x1f1f2;&#x1f1f0;', '&#x1f1f2;&#x1f1f1;', '&#x1f1f2;&#x1f1f2;', '&#x1f1f2;&#x1f1f3;', '&#x1f575;&#x1f3fb;', '&#x1f1f2;&#x1f1f4;', '&#x1f1f2;&#x1f1f5;', '&#x1f575;&#x1f3fc;', '&#x1f1f2;&#x1f1f6;', '&#x1f1f2;&#x1f1f7;', '&#x1f575;&#x1f3fd;', '&#x1f1f2;&#x1f1f8;', '&#x1f1f2;&#x1f1f9;', '&#x1f575;&#x1f3fe;', '&#x1f1f2;&#x1f1fa;', '&#x1f1f2;&#x1f1fb;', '&#x1f575;&#x1f3ff;', '&#x1f1f2;&#x1f1fc;', '&#x1f1f2;&#x1f1fd;', '&#x1f57a;&#x1f3fb;', '&#x1f57a;&#x1f3fc;', '&#x1f57a;&#x1f3fd;', '&#x1f57a;&#x1f3fe;', '&#x1f57a;&#x1f3ff;', '&#x1f590;&#x1f3fb;', '&#x1f590;&#x1f3fc;', '&#x1f590;&#x1f3fd;', '&#x1f590;&#x1f3fe;', '&#x1f590;&#x1f3ff;', '&#x1f595;&#x1f3fb;', '&#x1f595;&#x1f3fc;', '&#x1f595;&#x1f3fd;', '&#x1f595;&#x1f3fe;', '&#x1f595;&#x1f3ff;', '&#x1f596;&#x1f3fb;', '&#x1f596;&#x1f3fc;', '&#x1f596;&#x1f3fd;', '&#x1f596;&#x1f3fe;', '&#x1f596;&#x1f3ff;', '&#x1f1f2;&#x1f1fe;', '&#x1f1f2;&#x1f1ff;', '&#x1f645;&#x1f3fb;', '&#x1f1f3;&#x1f1e6;', '&#x1f1f3;&#x1f1e8;', '&#x1f645;&#x1f3fc;', '&#x1f468;&#x1f3fe;', '&#x1f1f3;&#x1f1ea;', '&#x1f645;&#x1f3fd;', '&#x1f1f3;&#x1f1eb;', '&#x1f1f3;&#x1f1ec;', '&#x1f645;&#x1f3fe;', '&#x1f1f3;&#x1f1ee;', '&#x1f1f3;&#x1f1f1;', '&#x1f645;&#x1f3ff;', '&#x1f1f3;&#x1f1f4;', '&#x1f1f3;&#x1f1f5;', '&#x1f1f3;&#x1f1f7;', '&#x1f1f3;&#x1f1fa;', '&#x1f646;&#x1f3fb;', '&#x1f1f3;&#x1f1ff;', '&#x1f1f4;&#x1f1f2;', '&#x1f646;&#x1f3fc;', '&#x1f1f5;&#x1f1e6;', '&#x1f1f5;&#x1f1ea;', '&#x1f646;&#x1f3fd;', '&#x1f1f5;&#x1f1eb;', '&#x1f1f5;&#x1f1ec;', '&#x1f646;&#x1f3fe;', '&#x1f1f5;&#x1f1ed;', '&#x1f1f5;&#x1f1f0;', '&#x1f646;&#x1f3ff;', '&#x1f1f5;&#x1f1f1;', '&#x1f1f5;&#x1f1f2;', '&#x1f1f5;&#x1f1f3;', '&#x1f1f5;&#x1f1f7;', '&#x1f647;&#x1f3fb;', '&#x1f1f5;&#x1f1f8;', '&#x1f1f5;&#x1f1f9;', '&#x1f647;&#x1f3fc;', '&#x1f1f5;&#x1f1fc;', '&#x1f1f5;&#x1f1fe;', '&#x1f647;&#x1f3fd;', '&#x1f1f6;&#x1f1e6;', '&#x1f1f7;&#x1f1ea;', '&#x1f647;&#x1f3fe;', '&#x1f468;&#x1f3ff;', '&#x1f1f7;&#x1f1f4;', '&#x1f647;&#x1f3ff;', '&#x1f1f7;&#x1f1f8;', '&#x1f1f7;&#x1f1fa;', '&#x1f1f7;&#x1f1fc;', '&#x1f1f8;&#x1f1e6;', '&#x1f64b;&#x1f3fb;', '&#x1f1f8;&#x1f1e7;', '&#x1f1f8;&#x1f1e8;', '&#x1f64b;&#x1f3fc;', '&#x1f1f8;&#x1f1e9;', '&#x1f1f8;&#x1f1ea;', '&#x1f64b;&#x1f3fd;', '&#x1f1f8;&#x1f1ec;', '&#x1f1f8;&#x1f1ed;', '&#x1f64b;&#x1f3fe;', '&#x1f1f8;&#x1f1ee;', '&#x1f1f8;&#x1f1ef;', '&#x1f64b;&#x1f3ff;', '&#x1f1f8;&#x1f1f0;', '&#x1f1f8;&#x1f1f1;', '&#x1f64c;&#x1f3fb;', '&#x1f64c;&#x1f3fc;', '&#x1f64c;&#x1f3fd;', '&#x1f64c;&#x1f3fe;', '&#x1f64c;&#x1f3ff;', '&#x1f1f8;&#x1f1f2;', '&#x1f1f8;&#x1f1f3;', '&#x1f64d;&#x1f3fb;', '&#x1f1f8;&#x1f1f4;', '&#x1f1f8;&#x1f1f7;', '&#x1f64d;&#x1f3fc;', '&#x1f1f8;&#x1f1f8;', '&#x1f1f8;&#x1f1f9;', '&#x1f64d;&#x1f3fd;', '&#x1f1f8;&#x1f1fb;', '&#x1f1f8;&#x1f1fd;', '&#x1f64d;&#x1f3fe;', '&#x1f1f8;&#x1f1fe;', '&#x1f1f8;&#x1f1ff;', '&#x1f64d;&#x1f3ff;', '&#x1f1f9;&#x1f1e6;', '&#x1f1f9;&#x1f1e8;', '&#x1f1f9;&#x1f1e9;', '&#x1f1f9;&#x1f1eb;', '&#x1f64e;&#x1f3fb;', '&#x1f1f9;&#x1f1ec;', '&#x1f1f9;&#x1f1ed;', '&#x1f64e;&#x1f3fc;', '&#x1f1f9;&#x1f1ef;', '&#x1f1f9;&#x1f1f0;', '&#x1f64e;&#x1f3fd;', '&#x1f1f9;&#x1f1f1;', '&#x1f1f9;&#x1f1f2;', '&#x1f64e;&#x1f3fe;', '&#x1f1f9;&#x1f1f3;', '&#x1f1f9;&#x1f1f4;', '&#x1f64e;&#x1f3ff;', '&#x1f1f9;&#x1f1f7;', '&#x1f1f9;&#x1f1f9;', '&#x1f64f;&#x1f3fb;', '&#x1f64f;&#x1f3fc;', '&#x1f64f;&#x1f3fd;', '&#x1f64f;&#x1f3fe;', '&#x1f64f;&#x1f3ff;', '&#x1f1f9;&#x1f1fb;', '&#x1f1f9;&#x1f1fc;', '&#x1f6a3;&#x1f3fb;', '&#x1f1f9;&#x1f1ff;', '&#x1f1fa;&#x1f1e6;', '&#x1f6a3;&#x1f3fc;', '&#x1f1fa;&#x1f1ec;', '&#x1f1fa;&#x1f1f2;', '&#x1f6a3;&#x1f3fd;', '&#x1f1fa;&#x1f1f3;', '&#x1f1fa;&#x1f1f8;', '&#x1f6a3;&#x1f3fe;', '&#x1f1fa;&#x1f1fe;', '&#x1f1fa;&#x1f1ff;', '&#x1f6a3;&#x1f3ff;', '&#x1f1fb;&#x1f1e6;', '&#x1f1fb;&#x1f1e8;', '&#x1f1fb;&#x1f1ea;', '&#x1f1fb;&#x1f1ec;', '&#x1f6b4;&#x1f3fb;', '&#x1f1fb;&#x1f1ee;', '&#x1f1fb;&#x1f1f3;', '&#x1f6b4;&#x1f3fc;', '&#x1f1fb;&#x1f1fa;', '&#x1f1fc;&#x1f1eb;', '&#x1f6b4;&#x1f3fd;', '&#x1f1fc;&#x1f1f8;', '&#x1f1fd;&#x1f1f0;', '&#x1f6b4;&#x1f3fe;', '&#x1f1fe;&#x1f1ea;', '&#x1f1fe;&#x1f1f9;', '&#x1f6b4;&#x1f3ff;', '&#x1f1ff;&#x1f1e6;', '&#x1f1ff;&#x1f1f2;', '&#x1f1ff;&#x1f1fc;', '&#x1f385;&#x1f3fb;', '&#x1f6b5;&#x1f3fb;', '&#x1f385;&#x1f3fc;', '&#x1f385;&#x1f3fd;', '&#x1f6b5;&#x1f3fc;', '&#x1f469;&#x1f3fb;', '&#x1f385;&#x1f3fe;', '&#x1f6b5;&#x1f3fd;', '&#x1f385;&#x1f3ff;', '&#x1f3c2;&#x1f3fb;', '&#x1f6b5;&#x1f3fe;', '&#x1f3c2;&#x1f3fc;', '&#x1f3c2;&#x1f3fd;', '&#x1f6b5;&#x1f3ff;', '&#x1f3c2;&#x1f3fe;', '&#x1f3c2;&#x1f3ff;', '&#x1f44b;&#x1f3fc;', '&#x1f1e6;&#x1f1ea;', '&#x1f6b6;&#x1f3fb;', '&#x1f3c3;&#x1f3fb;', '&#x1f1e6;&#x1f1eb;', '&#x1f6b6;&#x1f3fc;', '&#x1f1e6;&#x1f1ec;', '&#x1f3c3;&#x1f3fc;', '&#x1f6b6;&#x1f3fd;', '&#x1f1e6;&#x1f1ee;', '&#x1f1e6;&#x1f1f1;', '&#x1f6b6;&#x1f3fe;', '&#x1f3c3;&#x1f3fd;', '&#x1f1e6;&#x1f1f2;', '&#x1f6b6;&#x1f3ff;', '&#x1f1e6;&#x1f1f4;', '&#x1f3c3;&#x1f3fe;', '&#x1f6c0;&#x1f3fb;', '&#x1f6c0;&#x1f3fc;', '&#x1f6c0;&#x1f3fd;', '&#x1f6c0;&#x1f3fe;', '&#x1f6c0;&#x1f3ff;', '&#x1f6cc;&#x1f3fb;', '&#x1f6cc;&#x1f3fc;', '&#x1f6cc;&#x1f3fd;', '&#x1f6cc;&#x1f3fe;', '&#x1f6cc;&#x1f3ff;', '&#x1f90f;&#x1f3fb;', '&#x1f90f;&#x1f3fc;', '&#x1f90f;&#x1f3fd;', '&#x1f90f;&#x1f3fe;', '&#x1f90f;&#x1f3ff;', '&#x1f918;&#x1f3fb;', '&#x1f918;&#x1f3fc;', '&#x1f918;&#x1f3fd;', '&#x1f918;&#x1f3fe;', '&#x1f918;&#x1f3ff;', '&#x1f919;&#x1f3fb;', '&#x1f919;&#x1f3fc;', '&#x1f919;&#x1f3fd;', '&#x1f919;&#x1f3fe;', '&#x1f919;&#x1f3ff;', '&#x1f91a;&#x1f3fb;', '&#x1f91a;&#x1f3fc;', '&#x1f91a;&#x1f3fd;', '&#x1f91a;&#x1f3fe;', '&#x1f91a;&#x1f3ff;', '&#x1f91b;&#x1f3fb;', '&#x1f91b;&#x1f3fc;', '&#x1f91b;&#x1f3fd;', '&#x1f91b;&#x1f3fe;', '&#x1f91b;&#x1f3ff;', '&#x1f91c;&#x1f3fb;', '&#x1f91c;&#x1f3fc;', '&#x1f91c;&#x1f3fd;', '&#x1f91c;&#x1f3fe;', '&#x1f91c;&#x1f3ff;', '&#x1f91e;&#x1f3fb;', '&#x1f91e;&#x1f3fc;', '&#x1f91e;&#x1f3fd;', '&#x1f91e;&#x1f3fe;', '&#x1f91e;&#x1f3ff;', '&#x1f91f;&#x1f3fb;', '&#x1f91f;&#x1f3fc;', '&#x1f91f;&#x1f3fd;', '&#x1f91f;&#x1f3fe;', '&#x1f91f;&#x1f3ff;', '&#x1f1e6;&#x1f1f6;', '&#x1f1e6;&#x1f1f7;', '&#x1f926;&#x1f3fb;', '&#x1f3c3;&#x1f3ff;', '&#x1f1e6;&#x1f1f8;', '&#x1f926;&#x1f3fc;', '&#x1f1e6;&#x1f1f9;', '&#x1f1e6;&#x1f1fa;', '&#x1f926;&#x1f3fd;', '&#x1f1e6;&#x1f1fc;', '&#x1f3c4;&#x1f3fb;', '&#x1f926;&#x1f3fe;', '&#x1f1e6;&#x1f1fd;', '&#x1f469;&#x1f3fc;', '&#x1f926;&#x1f3ff;', '&#x1f1e6;&#x1f1ff;', '&#x1f3c4;&#x1f3fc;', '&#x1f930;&#x1f3fb;', '&#x1f930;&#x1f3fc;', '&#x1f930;&#x1f3fd;', '&#x1f930;&#x1f3fe;', '&#x1f930;&#x1f3ff;', '&#x1f931;&#x1f3fb;', '&#x1f931;&#x1f3fc;', '&#x1f931;&#x1f3fd;', '&#x1f931;&#x1f3fe;', '&#x1f931;&#x1f3ff;', '&#x1f932;&#x1f3fb;', '&#x1f932;&#x1f3fc;', '&#x1f932;&#x1f3fd;', '&#x1f932;&#x1f3fe;', '&#x1f932;&#x1f3ff;', '&#x1f933;&#x1f3fb;', '&#x1f933;&#x1f3fc;', '&#x1f933;&#x1f3fd;', '&#x1f933;&#x1f3fe;', '&#x1f933;&#x1f3ff;', '&#x1f934;&#x1f3fb;', '&#x1f934;&#x1f3fc;', '&#x1f934;&#x1f3fd;', '&#x1f934;&#x1f3fe;', '&#x1f934;&#x1f3ff;', '&#x1f1e7;&#x1f1e6;', '&#x1f1e7;&#x1f1e7;', '&#x1f935;&#x1f3fb;', '&#x1f3c4;&#x1f3fd;', '&#x1f1e7;&#x1f1e9;', '&#x1f935;&#x1f3fc;', '&#x1f1e7;&#x1f1ea;', '&#x1f3c4;&#x1f3fe;', '&#x1f935;&#x1f3fd;', '&#x1f1e7;&#x1f1eb;', '&#x1f1e7;&#x1f1ec;', '&#x1f935;&#x1f3fe;', '&#x1f3c4;&#x1f3ff;', '&#x1f1e7;&#x1f1ed;', '&#x1f935;&#x1f3ff;', '&#x1f1e7;&#x1f1ee;', '&#x1f3c7;&#x1f3fb;', '&#x1f936;&#x1f3fb;', '&#x1f936;&#x1f3fc;', '&#x1f936;&#x1f3fd;', '&#x1f936;&#x1f3fe;', '&#x1f936;&#x1f3ff;', '&#x1f3c7;&#x1f3fc;', '&#x1f3c7;&#x1f3fd;', '&#x1f937;&#x1f3fb;', '&#x1f3c7;&#x1f3fe;', '&#x1f3c7;&#x1f3ff;', '&#x1f937;&#x1f3fc;', '&#x1f1e7;&#x1f1ef;', '&#x1f1e7;&#x1f1f1;', '&#x1f937;&#x1f3fd;', '&#x1f3ca;&#x1f3fb;', '&#x1f1e7;&#x1f1f2;', '&#x1f937;&#x1f3fe;', '&#x1f1e7;&#x1f1f3;', '&#x1f3ca;&#x1f3fc;', '&#x1f937;&#x1f3ff;', '&#x1f1e7;&#x1f1f4;', '&#x1f1e7;&#x1f1f6;', '&#x1f3ca;&#x1f3fd;', '&#x1f1e7;&#x1f1f7;', '&#x1f938;&#x1f3fb;', '&#x1f1e7;&#x1f1f8;', '&#x1f469;&#x1f3fd;', '&#x1f938;&#x1f3fc;', '&#x1f3ca;&#x1f3fe;', '&#x1f1e7;&#x1f1f9;', '&#x1f938;&#x1f3fd;', '&#x1f1e7;&#x1f1fb;', '&#x1f3ca;&#x1f3ff;', '&#x1f938;&#x1f3fe;', '&#x1f1e7;&#x1f1fc;', '&#x1f1e7;&#x1f1fe;', '&#x1f938;&#x1f3ff;', '&#x1f1e7;&#x1f1ff;', '&#x1f1e8;&#x1f1e6;', '&#x1f3cb;&#x1f3fb;', '&#x1f1e8;&#x1f1e8;', '&#x1f939;&#x1f3fb;', '&#x1f1e8;&#x1f1e9;', '&#x1f3cb;&#x1f3fc;', '&#x1f939;&#x1f3fc;', '&#x1f1e8;&#x1f1eb;', '&#x1f1e8;&#x1f1ec;', '&#x1f939;&#x1f3fd;', '&#x1f3cb;&#x1f3fd;', '&#x1f1e8;&#x1f1ed;', '&#x1f939;&#x1f3fe;', '&#x1f1e8;&#x1f1ee;', '&#x1f3cb;&#x1f3fe;', '&#x1f939;&#x1f3ff;', '&#x1f1e8;&#x1f1f0;', '&#x1f1e8;&#x1f1f1;', '&#x1f3cb;&#x1f3ff;', '&#x1f1e8;&#x1f1f2;', '&#x1f1e8;&#x1f1f3;', '&#x1f1e8;&#x1f1f4;', '&#x1f93d;&#x1f3fb;', '&#x1f1e8;&#x1f1f5;', '&#x1f3cc;&#x1f3fb;', '&#x1f93d;&#x1f3fc;', '&#x1f1e8;&#x1f1f7;', '&#x1f1e8;&#x1f1fa;', '&#x1f93d;&#x1f3fd;', '&#x1f3cc;&#x1f3fc;', '&#x1f1e8;&#x1f1fb;', '&#x1f93d;&#x1f3fe;', '&#x1f469;&#x1f3fe;', '&#x1f1e8;&#x1f1fc;', '&#x1f93d;&#x1f3ff;', '&#x1f3cc;&#x1f3fd;', '&#x1f1e8;&#x1f1fd;', '&#x1f1e8;&#x1f1fe;', '&#x1f3cc;&#x1f3fe;', '&#x1f93e;&#x1f3fb;', '&#x1f1e8;&#x1f1ff;', '&#x1f1e9;&#x1f1ea;', '&#x1f93e;&#x1f3fc;', '&#x1f3cc;&#x1f3ff;', '&#x1f1e9;&#x1f1ec;', '&#x1f93e;&#x1f3fd;', '&#x1f1e9;&#x1f1ef;', '&#x1f1e9;&#x1f1f0;', '&#x1f93e;&#x1f3fe;', '&#x1f1e9;&#x1f1f2;', '&#x1f1e9;&#x1f1f4;', '&#x1f93e;&#x1f3ff;', '&#x1f1e9;&#x1f1ff;', '&#x1f1ea;&#x1f1e6;', '&#x1f9b5;&#x1f3fb;', '&#x1f9b5;&#x1f3fc;', '&#x1f9b5;&#x1f3fd;', '&#x1f9b5;&#x1f3fe;', '&#x1f9b5;&#x1f3ff;', '&#x1f9b6;&#x1f3fb;', '&#x1f9b6;&#x1f3fc;', '&#x1f9b6;&#x1f3fd;', '&#x1f9b6;&#x1f3fe;', '&#x1f9b6;&#x1f3ff;', '&#x1f1ea;&#x1f1e8;', '&#x1f1ea;&#x1f1ea;', '&#x1f9b8;&#x1f3fb;', '&#x1f1ea;&#x1f1ec;', '&#x1f442;&#x1f3fb;', '&#x1f9b8;&#x1f3fc;', '&#x1f442;&#x1f3fc;', '&#x1f442;&#x1f3fd;', '&#x1f9b8;&#x1f3fd;', '&#x1f442;&#x1f3fe;', '&#x1f442;&#x1f3ff;', '&#x1f9b8;&#x1f3fe;', '&#x1f443;&#x1f3fb;', '&#x1f443;&#x1f3fc;', '&#x1f9b8;&#x1f3ff;', '&#x1f443;&#x1f3fd;', '&#x1f443;&#x1f3fe;', '&#x1f443;&#x1f3ff;', '&#x1f446;&#x1f3fb;', '&#x1f9b9;&#x1f3fb;', '&#x1f446;&#x1f3fc;', '&#x1f446;&#x1f3fd;', '&#x1f9b9;&#x1f3fc;', '&#x1f469;&#x1f3ff;', '&#x1f446;&#x1f3fe;', '&#x1f9b9;&#x1f3fd;', '&#x1f446;&#x1f3ff;', '&#x1f447;&#x1f3fb;', '&#x1f9b9;&#x1f3fe;', '&#x1f447;&#x1f3fc;', '&#x1f447;&#x1f3fd;', '&#x1f9b9;&#x1f3ff;', '&#x1f447;&#x1f3fe;', '&#x1f447;&#x1f3ff;', '&#x1f9bb;&#x1f3fb;', '&#x1f9bb;&#x1f3fc;', '&#x1f9bb;&#x1f3fd;', '&#x1f9bb;&#x1f3fe;', '&#x1f9bb;&#x1f3ff;', '&#x1f448;&#x1f3fb;', '&#x1f448;&#x1f3fc;', '&#x1f9cd;&#x1f3fb;', '&#x1f448;&#x1f3fd;', '&#x1f448;&#x1f3fe;', '&#x1f9cd;&#x1f3fc;', '&#x1f448;&#x1f3ff;', '&#x1f449;&#x1f3fb;', '&#x1f9cd;&#x1f3fd;', '&#x1f449;&#x1f3fc;', '&#x1f449;&#x1f3fd;', '&#x1f9cd;&#x1f3fe;', '&#x1f449;&#x1f3fe;', '&#x1f449;&#x1f3ff;', '&#x1f9cd;&#x1f3ff;', '&#x1f44a;&#x1f3fb;', '&#x1f44a;&#x1f3fc;', '&#x1f44a;&#x1f3fd;', '&#x1f44a;&#x1f3fe;', '&#x1f9ce;&#x1f3fb;', '&#x1f44a;&#x1f3ff;', '&#x1f44b;&#x1f3fb;', '&#x1f9ce;&#x1f3fc;', '&#x1f1e6;&#x1f1e8;', '&#x1f44b;&#x1f3fd;', '&#x1f9ce;&#x1f3fd;', '&#x1f44b;&#x1f3fe;', '&#x1f44b;&#x1f3ff;', '&#x1f9ce;&#x1f3fe;', '&#x1f44c;&#x1f3fb;', '&#x1f44c;&#x1f3fc;', '&#x1f9ce;&#x1f3ff;', '&#x1f44c;&#x1f3fd;', '&#x1f44c;&#x1f3fe;', '&#x1f44c;&#x1f3ff;', '&#x1f44d;&#x1f3fb;', '&#x1f9cf;&#x1f3fb;', '&#x1f44d;&#x1f3fc;', '&#x1f44d;&#x1f3fd;', '&#x1f9cf;&#x1f3fc;', '&#x1f44d;&#x1f3fe;', '&#x1f44d;&#x1f3ff;', '&#x1f9cf;&#x1f3fd;', '&#x1f46b;&#x1f3fb;', '&#x1f46b;&#x1f3fc;', '&#x1f9cf;&#x1f3fe;', '&#x1f46b;&#x1f3fd;', '&#x1f46b;&#x1f3fe;', '&#x1f9cf;&#x1f3ff;', '&#x1f46b;&#x1f3ff;', '&#x1f46c;&#x1f3fb;', '&#x1f46c;&#x1f3fc;', '&#x1f9d1;&#x1f3fb;', '&#x1f46c;&#x1f3fd;', '&#x1f46c;&#x1f3fe;', '&#x1f9d1;&#x1f3fc;', '&#x1f46c;&#x1f3ff;', '&#x1f46d;&#x1f3fb;', '&#x1f46d;&#x1f3fc;', '&#x1f9d1;&#x1f3fd;', '&#x1f46d;&#x1f3fd;', '&#x1f46d;&#x1f3fe;', '&#x1f46d;&#x1f3ff;', '&#x1f44e;&#x1f3fb;', '&#x1f9d1;&#x1f3fe;', '&#x1f44e;&#x1f3fc;', '&#x1f46e;&#x1f3fb;', '&#x1f44e;&#x1f3fd;', '&#x1f44e;&#x1f3fe;', '&#x1f46e;&#x1f3fc;', '&#x1f9d1;&#x1f3ff;', '&#x1f44e;&#x1f3ff;', '&#x1f9d2;&#x1f3fb;', '&#x1f9d2;&#x1f3fc;', '&#x1f9d2;&#x1f3fd;', '&#x1f9d2;&#x1f3fe;', '&#x1f9d2;&#x1f3ff;', '&#x1f9d3;&#x1f3fb;', '&#x1f9d3;&#x1f3fc;', '&#x1f9d3;&#x1f3fd;', '&#x1f9d3;&#x1f3fe;', '&#x1f9d3;&#x1f3ff;', '&#x1f9d4;&#x1f3fb;', '&#x1f9d4;&#x1f3fc;', '&#x1f9d4;&#x1f3fd;', '&#x1f9d4;&#x1f3fe;', '&#x1f9d4;&#x1f3ff;', '&#x1f9d5;&#x1f3fb;', '&#x1f9d5;&#x1f3fc;', '&#x1f9d5;&#x1f3fd;', '&#x1f9d5;&#x1f3fe;', '&#x1f9d5;&#x1f3ff;', '&#x1f44f;&#x1f3fb;', '&#x1f46e;&#x1f3fd;', '&#x1f9d6;&#x1f3fb;', '&#x1f44f;&#x1f3fc;', '&#x1f44f;&#x1f3fd;', '&#x1f9d6;&#x1f3fc;', '&#x1f46e;&#x1f3fe;', '&#x1f44f;&#x1f3fe;', '&#x1f9d6;&#x1f3fd;', '&#x1f44f;&#x1f3ff;', '&#x1f46e;&#x1f3ff;', '&#x1f9d6;&#x1f3fe;', '&#x1f450;&#x1f3fb;', '&#x1f450;&#x1f3fc;', '&#x1f9d6;&#x1f3ff;', '&#x1f450;&#x1f3fd;', '&#x1f450;&#x1f3fe;', '&#x1f470;&#x1f3fb;', '&#x1f470;&#x1f3fc;', '&#x1f9d7;&#x1f3fb;', '&#x1f470;&#x1f3fd;', '&#x1f470;&#x1f3fe;', '&#x1f9d7;&#x1f3fc;', '&#x1f470;&#x1f3ff;', '&#x1f450;&#x1f3ff;', '&#x1f9d7;&#x1f3fd;', '&#x1f466;&#x1f3fb;', '&#x1f471;&#x1f3fb;', '&#x1f9d7;&#x1f3fe;', '&#x1f466;&#x1f3fc;', '&#x1f466;&#x1f3fd;', '&#x1f9d7;&#x1f3ff;', '&#x1f471;&#x1f3fc;', '&#x1f466;&#x1f3fe;', '&#x1f466;&#x1f3ff;', '&#x1f471;&#x1f3fd;', '&#x1f9d8;&#x1f3fb;', '&#x1f467;&#x1f3fb;', '&#x1f467;&#x1f3fc;', '&#x1f9d8;&#x1f3fc;', '&#x1f471;&#x1f3fe;', '&#x1f467;&#x1f3fd;', '&#x1f9d8;&#x1f3fd;', '&#x1f467;&#x1f3fe;', '&#x1f471;&#x1f3ff;', '&#x1f9d8;&#x1f3fe;', '&#x1f467;&#x1f3ff;', '&#x1f1ea;&#x1f1ed;', '&#x1f9d8;&#x1f3ff;', '&#x1f472;&#x1f3fb;', '&#x1f472;&#x1f3fc;', '&#x1f472;&#x1f3fd;', '&#x1f472;&#x1f3fe;', '&#x1f9d9;&#x1f3fb;', '&#x1f472;&#x1f3ff;', '&#x1f1ea;&#x1f1f7;', '&#x1f9d9;&#x1f3fc;', '&#x1f1ea;&#x1f1f8;', '&#x1f473;&#x1f3fb;', '&#x1f9d9;&#x1f3fd;', '&#x1f1ea;&#x1f1f9;', '&#x1f1ea;&#x1f1fa;', '&#x1f9d9;&#x1f3fe;', '&#x1f473;&#x1f3fc;', '&#x1f1eb;&#x1f1ee;', '&#x1f9d9;&#x1f3ff;', '&#x1f1eb;&#x1f1ef;', '&#x1f473;&#x1f3fd;', '&#x1f1eb;&#x1f1f0;', '&#x1f1eb;&#x1f1f2;', '&#x1f9da;&#x1f3fb;', '&#x1f473;&#x1f3fe;', '&#x1f1eb;&#x1f1f4;', '&#x1f9da;&#x1f3fc;', '&#x1f1eb;&#x1f1f7;', '&#x1f473;&#x1f3ff;', '&#x1f9da;&#x1f3fd;', '&#x1f1ec;&#x1f1e6;', '&#x1f1ec;&#x1f1e7;', '&#x1f9da;&#x1f3fe;', '&#x1f474;&#x1f3fb;', '&#x1f474;&#x1f3fc;', '&#x1f9da;&#x1f3ff;', '&#x1f474;&#x1f3fd;', '&#x1f474;&#x1f3fe;', '&#x1f474;&#x1f3ff;', '&#x1f475;&#x1f3fb;', '&#x1f9db;&#x1f3fb;', '&#x1f475;&#x1f3fc;', '&#x1f475;&#x1f3fd;', '&#x1f9db;&#x1f3fc;', '&#x1f475;&#x1f3fe;', '&#x1f475;&#x1f3ff;', '&#x1f9db;&#x1f3fd;', '&#x1f476;&#x1f3fb;', '&#x1f476;&#x1f3fc;', '&#x1f9db;&#x1f3fe;', '&#x1f476;&#x1f3fd;', '&#x1f476;&#x1f3fe;', '&#x1f9db;&#x1f3ff;', '&#x1f476;&#x1f3ff;', '&#x1f1ec;&#x1f1e9;', '&#x1f1ec;&#x1f1ea;', '&#x1f477;&#x1f3fb;', '&#x1f9dc;&#x1f3fb;', '&#x1f1ec;&#x1f1eb;', '&#x1f1ec;&#x1f1ec;', '&#x1f9dc;&#x1f3fc;', '&#x1f477;&#x1f3fc;', '&#x1f1ec;&#x1f1ed;', '&#x1f9dc;&#x1f3fd;', '&#x1f1ec;&#x1f1ee;', '&#x1f477;&#x1f3fd;', '&#x1f9dc;&#x1f3fe;', '&#x1f1ec;&#x1f1f1;', '&#x1f1ec;&#x1f1f2;', '&#x1f9dc;&#x1f3ff;', '&#x1f477;&#x1f3fe;', '&#x1f1ec;&#x1f1f3;', '&#x1f1ec;&#x1f1f5;', '&#x1f477;&#x1f3ff;', '&#x1f9dd;&#x1f3fb;', '&#x1f468;&#x1f3fb;', '&#x1f1ec;&#x1f1f6;', '&#x1f9dd;&#x1f3fc;', '&#x1f478;&#x1f3fb;', '&#x1f478;&#x1f3fc;', '&#x1f9dd;&#x1f3fd;', '&#x1f478;&#x1f3fd;', '&#x1f478;&#x1f3fe;', '&#x1f9dd;&#x1f3fe;', '&#x1f478;&#x1f3ff;', '&#x1f47c;&#x1f3fb;', '&#x1f9dd;&#x1f3ff;', '&#x1f47c;&#x1f3fc;', '&#x1f47c;&#x1f3fd;', '&#x1f47c;&#x1f3fe;', '&#x1f47c;&#x1f3ff;', '&#x1f1ec;&#x1f1f7;', '&#x1f1ec;&#x1f1f8;', '&#x1f481;&#x1f3fb;', '&#x1f1ec;&#x1f1f9;', '&#x1f1ec;&#x1f1fa;', '&#x1f481;&#x1f3fc;', '&#x1f1ec;&#x1f1fc;', '&#x1f1ec;&#x1f1fe;', '&#x1f481;&#x1f3fd;', '&#x1f1ed;&#x1f1f0;', '&#x1f1ed;&#x1f1f2;', '&#x1f481;&#x1f3fe;', '&#x1f1ed;&#x1f1f3;', '&#x1f1e6;&#x1f1e9;', '&#x270d;&#x1f3ff;', '&#x26f9;&#x1f3fb;', '&#x270d;&#x1f3fe;', '&#x270d;&#x1f3fd;', '&#x270d;&#x1f3fc;', '&#x270d;&#x1f3fb;', '&#x270c;&#x1f3ff;', '&#x270c;&#x1f3fe;', '&#x270c;&#x1f3fd;', '&#x270c;&#x1f3fc;', '&#x270c;&#x1f3fb;', '&#x270b;&#x1f3ff;', '&#x270b;&#x1f3fe;', '&#x270b;&#x1f3fd;', '&#x270b;&#x1f3fc;', '&#x270b;&#x1f3fb;', '&#x270a;&#x1f3ff;', '&#x270a;&#x1f3fe;', '&#x270a;&#x1f3fd;', '&#x270a;&#x1f3fc;', '&#x270a;&#x1f3fb;', '&#x26f7;&#x1f3fd;', '&#x26f7;&#x1f3fe;', '&#x26f9;&#x1f3ff;', '&#x261d;&#x1f3ff;', '&#x261d;&#x1f3fe;', '&#x26f9;&#x1f3fe;', '&#x261d;&#x1f3fd;', '&#x261d;&#x1f3fc;', '&#x26f9;&#x1f3fd;', '&#x261d;&#x1f3fb;', '&#x26f7;&#x1f3ff;', '&#x26f9;&#x1f3fc;', '&#x26f7;&#x1f3fb;', '&#x26f7;&#x1f3fc;', '&#x34;&#x20e3;', '&#x23;&#x20e3;', '&#x30;&#x20e3;', '&#x31;&#x20e3;', '&#x32;&#x20e3;', '&#x33;&#x20e3;', '&#x2a;&#x20e3;', '&#x35;&#x20e3;', '&#x36;&#x20e3;', '&#x37;&#x20e3;', '&#x38;&#x20e3;', '&#x39;&#x20e3;', '&#x1f1f3;', '&#x1f61b;', '&#x1f61c;', '&#x1f61d;', '&#x1f61e;', '&#x1f61f;', '&#x1f620;', '&#x1f621;', '&#x1f622;', '&#x1f623;', '&#x1f624;', '&#x1f625;', '&#x1f626;', '&#x1f627;', '&#x1f628;', '&#x1f629;', '&#x1f62a;', '&#x1f62b;', '&#x1f62c;', '&#x1f62d;', '&#x1f62e;', '&#x1f62f;', '&#x1f630;', '&#x1f631;', '&#x1f632;', '&#x1f633;', '&#x1f634;', '&#x1f635;', '&#x1f636;', '&#x1f637;', '&#x1f638;', '&#x1f639;', '&#x1f63a;', '&#x1f63b;', '&#x1f63c;', '&#x1f63d;', '&#x1f63e;', '&#x1f63f;', '&#x1f640;', '&#x1f641;', '&#x1f642;', '&#x1f643;', '&#x1f644;', '&#x1f3ef;', '&#x1f3f0;', '&#x1f32d;', '&#x1f32e;', '&#x1f3f3;', '&#x1f32f;', '&#x1f330;', '&#x1f331;', '&#x1f332;', '&#x1f3f4;', '&#x1f3f5;', '&#x1f3f7;', '&#x1f3f8;', '&#x1f3f9;', '&#x1f3fa;', '&#x1f3fb;', '&#x1f3fc;', '&#x1f645;', '&#x1f3fd;', '&#x1f3fe;', '&#x1f3ff;', '&#x1f400;', '&#x1f401;', '&#x1f402;', '&#x1f403;', '&#x1f404;', '&#x1f405;', '&#x1f406;', '&#x1f407;', '&#x1f408;', '&#x1f409;', '&#x1f40a;', '&#x1f40b;', '&#x1f40c;', '&#x1f40d;', '&#x1f646;', '&#x1f40e;', '&#x1f40f;', '&#x1f410;', '&#x1f411;', '&#x1f412;', '&#x1f413;', '&#x1f414;', '&#x1f333;', '&#x1f415;', '&#x1f416;', '&#x1f417;', '&#x1f418;', '&#x1f419;', '&#x1f41a;', '&#x1f41b;', '&#x1f41c;', '&#x1f41d;', '&#x1f647;', '&#x1f648;', '&#x1f649;', '&#x1f64a;', '&#x1f41e;', '&#x1f41f;', '&#x1f420;', '&#x1f421;', '&#x1f422;', '&#x1f423;', '&#x1f424;', '&#x1f425;', '&#x1f426;', '&#x1f427;', '&#x1f428;', '&#x1f429;', '&#x1f42a;', '&#x1f42b;', '&#x1f42c;', '&#x1f42d;', '&#x1f42e;', '&#x1f64b;', '&#x1f42f;', '&#x1f430;', '&#x1f431;', '&#x1f432;', '&#x1f433;', '&#x1f64c;', '&#x1f434;', '&#x1f435;', '&#x1f436;', '&#x1f437;', '&#x1f438;', '&#x1f439;', '&#x1f43a;', '&#x1f43b;', '&#x1f43c;', '&#x1f43d;', '&#x1f43e;', '&#x1f43f;', '&#x1f440;', '&#x1f334;', '&#x1f441;', '&#x1f335;', '&#x1f336;', '&#x1f64d;', '&#x1f337;', '&#x1f338;', '&#x1f339;', '&#x1f442;', '&#x1f33a;', '&#x1f33b;', '&#x1f33c;', '&#x1f33d;', '&#x1f33e;', '&#x1f443;', '&#x1f444;', '&#x1f445;', '&#x1f33f;', '&#x1f340;', '&#x1f341;', '&#x1f342;', '&#x1f343;', '&#x1f64e;', '&#x1f446;', '&#x1f344;', '&#x1f345;', '&#x1f346;', '&#x1f347;', '&#x1f64f;', '&#x1f680;', '&#x1f681;', '&#x1f682;', '&#x1f683;', '&#x1f684;', '&#x1f685;', '&#x1f686;', '&#x1f687;', '&#x1f688;', '&#x1f689;', '&#x1f68a;', '&#x1f68b;', '&#x1f68c;', '&#x1f68d;', '&#x1f68e;', '&#x1f68f;', '&#x1f690;', '&#x1f691;', '&#x1f692;', '&#x1f693;', '&#x1f694;', '&#x1f695;', '&#x1f696;', '&#x1f697;', '&#x1f698;', '&#x1f699;', '&#x1f69a;', '&#x1f69b;', '&#x1f69c;', '&#x1f69d;', '&#x1f69e;', '&#x1f69f;', '&#x1f6a0;', '&#x1f6a1;', '&#x1f6a2;', '&#x1f348;', '&#x1f447;', '&#x1f349;', '&#x1f34a;', '&#x1f34b;', '&#x1f34c;', '&#x1f34d;', '&#x1f448;', '&#x1f34e;', '&#x1f34f;', '&#x1f350;', '&#x1f351;', '&#x1f352;', '&#x1f449;', '&#x1f353;', '&#x1f354;', '&#x1f355;', '&#x1f6a3;', '&#x1f6a4;', '&#x1f6a5;', '&#x1f6a6;', '&#x1f6a7;', '&#x1f6a8;', '&#x1f6a9;', '&#x1f6aa;', '&#x1f6ab;', '&#x1f6ac;', '&#x1f6ad;', '&#x1f6ae;', '&#x1f6af;', '&#x1f6b0;', '&#x1f6b1;', '&#x1f6b2;', '&#x1f6b3;', '&#x1f356;', '&#x1f357;', '&#x1f44a;', '&#x1f358;', '&#x1f359;', '&#x1f35a;', '&#x1f35b;', '&#x1f35c;', '&#x1f44b;', '&#x1f35d;', '&#x1f35e;', '&#x1f35f;', '&#x1f360;', '&#x1f361;', '&#x1f44c;', '&#x1f362;', '&#x1f363;', '&#x1f6b4;', '&#x1f364;', '&#x1f365;', '&#x1f366;', '&#x1f44d;', '&#x1f367;', '&#x1f469;', '&#x1f46a;', '&#x1f368;', '&#x1f369;', '&#x1f36a;', '&#x1f36b;', '&#x1f44e;', '&#x1f46b;', '&#x1f36c;', '&#x1f36d;', '&#x1f36e;', '&#x1f36f;', '&#x1f6b5;', '&#x1f370;', '&#x1f46c;', '&#x1f44f;', '&#x1f371;', '&#x1f372;', '&#x1f373;', '&#x1f374;', '&#x1f46d;', '&#x1f375;', '&#x1f450;', '&#x1f451;', '&#x1f452;', '&#x1f453;', '&#x1f454;', '&#x1f455;', '&#x1f456;', '&#x1f457;', '&#x1f6b6;', '&#x1f6b7;', '&#x1f6b8;', '&#x1f6b9;', '&#x1f6ba;', '&#x1f6bb;', '&#x1f6bc;', '&#x1f6bd;', '&#x1f6be;', '&#x1f6bf;', '&#x1f458;', '&#x1f459;', '&#x1f45a;', '&#x1f45b;', '&#x1f45c;', '&#x1f6c0;', '&#x1f6c1;', '&#x1f6c2;', '&#x1f6c3;', '&#x1f6c4;', '&#x1f6c5;', '&#x1f6cb;', '&#x1f45d;', '&#x1f45e;', '&#x1f45f;', '&#x1f46e;', '&#x1f460;', '&#x1f6cc;', '&#x1f6cd;', '&#x1f6ce;', '&#x1f6cf;', '&#x1f6d0;', '&#x1f6d1;', '&#x1f6d2;', '&#x1f6d5;', '&#x1f6e0;', '&#x1f6e1;', '&#x1f6e2;', '&#x1f6e3;', '&#x1f6e4;', '&#x1f6e5;', '&#x1f6e9;', '&#x1f6eb;', '&#x1f6ec;', '&#x1f6f0;', '&#x1f6f3;', '&#x1f6f4;', '&#x1f6f5;', '&#x1f6f6;', '&#x1f6f7;', '&#x1f6f8;', '&#x1f6f9;', '&#x1f6fa;', '&#x1f7e0;', '&#x1f7e1;', '&#x1f7e2;', '&#x1f7e3;', '&#x1f7e4;', '&#x1f7e5;', '&#x1f7e6;', '&#x1f7e7;', '&#x1f7e8;', '&#x1f7e9;', '&#x1f7ea;', '&#x1f7eb;', '&#x1f90d;', '&#x1f90e;', '&#x1f461;', '&#x1f46f;', '&#x1f462;', '&#x1f463;', '&#x1f464;', '&#x1f90f;', '&#x1f910;', '&#x1f911;', '&#x1f912;', '&#x1f913;', '&#x1f914;', '&#x1f915;', '&#x1f916;', '&#x1f917;', '&#x1f465;', '&#x1f376;', '&#x1f470;', '&#x1f377;', '&#x1f378;', '&#x1f918;', '&#x1f379;', '&#x1f37a;', '&#x1f466;', '&#x1f37b;', '&#x1f37c;', '&#x1f919;', '&#x1f37d;', '&#x1f37e;', '&#x1f37f;', '&#x1f467;', '&#x1f380;', '&#x1f91a;', '&#x1f381;', '&#x1f382;', '&#x1f383;', '&#x1f384;', '&#x1f1f5;', '&#x1f91b;', '&#x1f471;', '&#x1f17e;', '&#x1f1f6;', '&#x1f1f2;', '&#x1f17f;', '&#x1f91c;', '&#x1f91d;', '&#x1f385;', '&#x1f472;', '&#x1f386;', '&#x1f387;', '&#x1f388;', '&#x1f91e;', '&#x1f389;', '&#x1f38a;', '&#x1f38b;', '&#x1f38c;', '&#x1f38d;', '&#x1f91f;', '&#x1f920;', '&#x1f921;', '&#x1f922;', '&#x1f923;', '&#x1f924;', '&#x1f925;', '&#x1f38e;', '&#x1f38f;', '&#x1f390;', '&#x1f391;', '&#x1f392;', '&#x1f393;', '&#x1f396;', '&#x1f397;', '&#x1f399;', '&#x1f473;', '&#x1f39a;', '&#x1f39b;', '&#x1f39e;', '&#x1f39f;', '&#x1f3a0;', '&#x1f474;', '&#x1f3a1;', '&#x1f926;', '&#x1f927;', '&#x1f928;', '&#x1f929;', '&#x1f92a;', '&#x1f92b;', '&#x1f92c;', '&#x1f92d;', '&#x1f92e;', '&#x1f92f;', '&#x1f3a2;', '&#x1f3a3;', '&#x1f3a4;', '&#x1f3a5;', '&#x1f475;', '&#x1f930;', '&#x1f3a6;', '&#x1f3a7;', '&#x1f3a8;', '&#x1f3a9;', '&#x1f3aa;', '&#x1f931;', '&#x1f476;', '&#x1f3ab;', '&#x1f3ac;', '&#x1f3ad;', '&#x1f3ae;', '&#x1f932;', '&#x1f3af;', '&#x1f3b0;', '&#x1f3b1;', '&#x1f3b2;', '&#x1f3b3;', '&#x1f933;', '&#x1f3b4;', '&#x1f3b5;', '&#x1f3b6;', '&#x1f3b7;', '&#x1f3b8;', '&#x1f934;', '&#x1f3b9;', '&#x1f3ba;', '&#x1f3bb;', '&#x1f477;', '&#x1f3bc;', '&#x1f3bd;', '&#x1f3be;', '&#x1f3bf;', '&#x1f3c0;', '&#x1f478;', '&#x1f479;', '&#x1f47a;', '&#x1f47b;', '&#x1f3c1;', '&#x1f1e7;', '&#x1f1ee;', '&#x1f1ea;', '&#x1f935;', '&#x1f1f7;', '&#x1f47c;', '&#x1f47d;', '&#x1f47e;', '&#x1f47f;', '&#x1f936;', '&#x1f480;', '&#x1f1f1;', '&#x1f3c2;', '&#x1f18e;', '&#x1f191;', '&#x1f1e8;', '&#x1f1f9;', '&#x1f1ef;', '&#x1f192;', '&#x1f1ec;', '&#x1f193;', '&#x1f0cf;', '&#x1f194;', '&#x1f1f4;', '&#x1f1fa;', '&#x1f1eb;', '&#x1f195;', '&#x1f937;', '&#x1f196;', '&#x1f481;', '&#x1f197;', '&#x1f1ed;', '&#x1f3c3;', '&#x1f198;', '&#x1f1e9;', '&#x1f1fb;', '&#x1f1f0;', '&#x1f199;', '&#x1f1fc;', '&#x1f19a;', '&#x1f1fd;', '&#x1f1f8;', '&#x1f004;', '&#x1f1fe;', '&#x1f1e6;', '&#x1f938;', '&#x1f170;', '&#x1f171;', '&#x1f482;', '&#x1f1ff;', '&#x1f201;', '&#x1f202;', '&#x1f3c4;', '&#x1f3c5;', '&#x1f483;', '&#x1f484;', '&#x1f3c6;', '&#x1f21a;', '&#x1f22f;', '&#x1f232;', '&#x1f233;', '&#x1f485;', '&#x1f234;', '&#x1f939;', '&#x1f93a;', '&#x1f3c7;', '&#x1f3c8;', '&#x1f93c;', '&#x1f3c9;', '&#x1f235;', '&#x1f236;', '&#x1f237;', '&#x1f238;', '&#x1f239;', '&#x1f23a;', '&#x1f250;', '&#x1f251;', '&#x1f300;', '&#x1f301;', '&#x1f302;', '&#x1f303;', '&#x1f304;', '&#x1f486;', '&#x1f305;', '&#x1f306;', '&#x1f93d;', '&#x1f307;', '&#x1f308;', '&#x1f3ca;', '&#x1f309;', '&#x1f30a;', '&#x1f30b;', '&#x1f30c;', '&#x1f30d;', '&#x1f30e;', '&#x1f30f;', '&#x1f310;', '&#x1f311;', '&#x1f312;', '&#x1f313;', '&#x1f314;', '&#x1f487;', '&#x1f488;', '&#x1f93e;', '&#x1f93f;', '&#x1f940;', '&#x1f941;', '&#x1f942;', '&#x1f943;', '&#x1f944;', '&#x1f945;', '&#x1f947;', '&#x1f948;', '&#x1f949;', '&#x1f94a;', '&#x1f94b;', '&#x1f94c;', '&#x1f94d;', '&#x1f94e;', '&#x1f94f;', '&#x1f950;', '&#x1f951;', '&#x1f952;', '&#x1f953;', '&#x1f954;', '&#x1f955;', '&#x1f956;', '&#x1f957;', '&#x1f958;', '&#x1f959;', '&#x1f95a;', '&#x1f95b;', '&#x1f95c;', '&#x1f95d;', '&#x1f95e;', '&#x1f95f;', '&#x1f960;', '&#x1f961;', '&#x1f962;', '&#x1f963;', '&#x1f964;', '&#x1f965;', '&#x1f966;', '&#x1f967;', '&#x1f968;', '&#x1f969;', '&#x1f96a;', '&#x1f96b;', '&#x1f96c;', '&#x1f96d;', '&#x1f96e;', '&#x1f96f;', '&#x1f970;', '&#x1f971;', '&#x1f973;', '&#x1f974;', '&#x1f975;', '&#x1f976;', '&#x1f97a;', '&#x1f97b;', '&#x1f97c;', '&#x1f97d;', '&#x1f97e;', '&#x1f97f;', '&#x1f980;', '&#x1f981;', '&#x1f982;', '&#x1f983;', '&#x1f984;', '&#x1f985;', '&#x1f986;', '&#x1f987;', '&#x1f988;', '&#x1f989;', '&#x1f98a;', '&#x1f98b;', '&#x1f98c;', '&#x1f98d;', '&#x1f98e;', '&#x1f98f;', '&#x1f990;', '&#x1f991;', '&#x1f992;', '&#x1f993;', '&#x1f994;', '&#x1f995;', '&#x1f996;', '&#x1f997;', '&#x1f998;', '&#x1f999;', '&#x1f99a;', '&#x1f99b;', '&#x1f99c;', '&#x1f99d;', '&#x1f99e;', '&#x1f99f;', '&#x1f9a0;', '&#x1f9a1;', '&#x1f9a2;', '&#x1f9a5;', '&#x1f9a6;', '&#x1f9a7;', '&#x1f9a8;', '&#x1f9a9;', '&#x1f9aa;', '&#x1f9ae;', '&#x1f9af;', '&#x1f9b0;', '&#x1f9b1;', '&#x1f9b2;', '&#x1f9b3;', '&#x1f9b4;', '&#x1f489;', '&#x1f48a;', '&#x1f48b;', '&#x1f48c;', '&#x1f48d;', '&#x1f9b5;', '&#x1f48e;', '&#x1f48f;', '&#x1f490;', '&#x1f491;', '&#x1f492;', '&#x1f9b6;', '&#x1f9b7;', '&#x1f493;', '&#x1f494;', '&#x1f495;', '&#x1f496;', '&#x1f497;', '&#x1f498;', '&#x1f499;', '&#x1f49a;', '&#x1f49b;', '&#x1f49c;', '&#x1f49d;', '&#x1f49e;', '&#x1f49f;', '&#x1f4a0;', '&#x1f4a1;', '&#x1f4a2;', '&#x1f4a3;', '&#x1f9b8;', '&#x1f4a4;', '&#x1f4a5;', '&#x1f4a6;', '&#x1f4a7;', '&#x1f4a8;', '&#x1f4a9;', '&#x1f315;', '&#x1f316;', '&#x1f317;', '&#x1f318;', '&#x1f319;', '&#x1f4aa;', '&#x1f4ab;', '&#x1f4ac;', '&#x1f4ad;', '&#x1f4ae;', '&#x1f4af;', '&#x1f9b9;', '&#x1f9ba;', '&#x1f4b0;', '&#x1f4b1;', '&#x1f4b2;', '&#x1f4b3;', '&#x1f4b4;', '&#x1f9bb;', '&#x1f9bc;', '&#x1f9bd;', '&#x1f9be;', '&#x1f9bf;', '&#x1f9c0;', '&#x1f9c1;', '&#x1f9c2;', '&#x1f9c3;', '&#x1f9c4;', '&#x1f9c5;', '&#x1f9c6;', '&#x1f9c7;', '&#x1f9c8;', '&#x1f9c9;', '&#x1f9ca;', '&#x1f4b5;', '&#x1f4b6;', '&#x1f4b7;', '&#x1f4b8;', '&#x1f4b9;', '&#x1f4ba;', '&#x1f4bb;', '&#x1f4bc;', '&#x1f4bd;', '&#x1f4be;', '&#x1f4bf;', '&#x1f4c0;', '&#x1f4c1;', '&#x1f4c2;', '&#x1f4c3;', '&#x1f4c4;', '&#x1f4c5;', '&#x1f9cd;', '&#x1f4c6;', '&#x1f4c7;', '&#x1f4c8;', '&#x1f4c9;', '&#x1f4ca;', '&#x1f4cb;', '&#x1f4cc;', '&#x1f4cd;', '&#x1f4ce;', '&#x1f4cf;', '&#x1f4d0;', '&#x1f4d1;', '&#x1f4d2;', '&#x1f4d3;', '&#x1f4d4;', '&#x1f4d5;', '&#x1f4d6;', '&#x1f9ce;', '&#x1f4d7;', '&#x1f4d8;', '&#x1f4d9;', '&#x1f4da;', '&#x1f4db;', '&#x1f4dc;', '&#x1f4dd;', '&#x1f4de;', '&#x1f4df;', '&#x1f4e0;', '&#x1f4e1;', '&#x1f4e2;', '&#x1f4e3;', '&#x1f4e4;', '&#x1f4e5;', '&#x1f4e6;', '&#x1f4e7;', '&#x1f9cf;', '&#x1f9d0;', '&#x1f4e8;', '&#x1f4e9;', '&#x1f4ea;', '&#x1f4eb;', '&#x1f4ec;', '&#x1f4ed;', '&#x1f4ee;', '&#x1f4ef;', '&#x1f4f0;', '&#x1f4f1;', '&#x1f4f2;', '&#x1f4f3;', '&#x1f4f4;', '&#x1f4f5;', '&#x1f4f6;', '&#x1f4f7;', '&#x1f4f8;', '&#x1f4f9;', '&#x1f4fa;', '&#x1f4fb;', '&#x1f4fc;', '&#x1f9d1;', '&#x1f4fd;', '&#x1f4ff;', '&#x1f500;', '&#x1f501;', '&#x1f502;', '&#x1f9d2;', '&#x1f503;', '&#x1f504;', '&#x1f505;', '&#x1f506;', '&#x1f507;', '&#x1f9d3;', '&#x1f508;', '&#x1f509;', '&#x1f50a;', '&#x1f50b;', '&#x1f50c;', '&#x1f9d4;', '&#x1f50d;', '&#x1f50e;', '&#x1f50f;', '&#x1f510;', '&#x1f511;', '&#x1f9d5;', '&#x1f512;', '&#x1f513;', '&#x1f514;', '&#x1f515;', '&#x1f516;', '&#x1f517;', '&#x1f518;', '&#x1f519;', '&#x1f51a;', '&#x1f51b;', '&#x1f51c;', '&#x1f51d;', '&#x1f51e;', '&#x1f51f;', '&#x1f520;', '&#x1f521;', '&#x1f522;', '&#x1f9d6;', '&#x1f523;', '&#x1f524;', '&#x1f525;', '&#x1f526;', '&#x1f527;', '&#x1f528;', '&#x1f529;', '&#x1f52a;', '&#x1f52b;', '&#x1f52c;', '&#x1f52d;', '&#x1f52e;', '&#x1f52f;', '&#x1f530;', '&#x1f531;', '&#x1f532;', '&#x1f533;', '&#x1f9d7;', '&#x1f534;', '&#x1f535;', '&#x1f536;', '&#x1f537;', '&#x1f538;', '&#x1f539;', '&#x1f53a;', '&#x1f53b;', '&#x1f53c;', '&#x1f53d;', '&#x1f549;', '&#x1f54a;', '&#x1f54b;', '&#x1f54c;', '&#x1f54d;', '&#x1f54e;', '&#x1f550;', '&#x1f9d8;', '&#x1f551;', '&#x1f552;', '&#x1f553;', '&#x1f554;', '&#x1f555;', '&#x1f556;', '&#x1f557;', '&#x1f558;', '&#x1f559;', '&#x1f55a;', '&#x1f55b;', '&#x1f55c;', '&#x1f55d;', '&#x1f55e;', '&#x1f55f;', '&#x1f560;', '&#x1f561;', '&#x1f9d9;', '&#x1f562;', '&#x1f563;', '&#x1f564;', '&#x1f565;', '&#x1f566;', '&#x1f567;', '&#x1f56f;', '&#x1f570;', '&#x1f573;', '&#x1f3cb;', '&#x1f31a;', '&#x1f31b;', '&#x1f31c;', '&#x1f31d;', '&#x1f31e;', '&#x1f31f;', '&#x1f320;', '&#x1f9da;', '&#x1f321;', '&#x1f324;', '&#x1f325;', '&#x1f326;', '&#x1f327;', '&#x1f328;', '&#x1f329;', '&#x1f32a;', '&#x1f32b;', '&#x1f574;', '&#x1f468;', '&#x1f32c;', '&#x1f3cc;', '&#x1f3cd;', '&#x1f3ce;', '&#x1f3cf;', '&#x1f3d0;', '&#x1f9db;', '&#x1f3d1;', '&#x1f3d2;', '&#x1f3d3;', '&#x1f3d4;', '&#x1f3d5;', '&#x1f3d6;', '&#x1f3d7;', '&#x1f3d8;', '&#x1f3d9;', '&#x1f3da;', '&#x1f575;', '&#x1f576;', '&#x1f577;', '&#x1f578;', '&#x1f579;', '&#x1f3db;', '&#x1f3dc;', '&#x1f9dc;', '&#x1f3dd;', '&#x1f3de;', '&#x1f3df;', '&#x1f57a;', '&#x1f587;', '&#x1f58a;', '&#x1f58b;', '&#x1f58c;', '&#x1f58d;', '&#x1f3e0;', '&#x1f3e1;', '&#x1f3e2;', '&#x1f3e3;', '&#x1f3e4;', '&#x1f590;', '&#x1f3e5;', '&#x1f3e6;', '&#x1f9dd;', '&#x1f3e7;', '&#x1f3e8;', '&#x1f9de;', '&#x1f3e9;', '&#x1f595;', '&#x1f9df;', '&#x1f9e0;', '&#x1f9e1;', '&#x1f9e2;', '&#x1f9e3;', '&#x1f9e4;', '&#x1f9e5;', '&#x1f9e6;', '&#x1f9e7;', '&#x1f9e8;', '&#x1f9e9;', '&#x1f9ea;', '&#x1f9eb;', '&#x1f9ec;', '&#x1f9ed;', '&#x1f9ee;', '&#x1f9ef;', '&#x1f9f0;', '&#x1f9f1;', '&#x1f9f2;', '&#x1f9f3;', '&#x1f9f4;', '&#x1f9f5;', '&#x1f9f6;', '&#x1f9f7;', '&#x1f9f8;', '&#x1f9f9;', '&#x1f9fa;', '&#x1f9fb;', '&#x1f9fc;', '&#x1f9fd;', '&#x1f9fe;', '&#x1f9ff;', '&#x1fa70;', '&#x1fa71;', '&#x1fa72;', '&#x1fa73;', '&#x1fa78;', '&#x1fa79;', '&#x1fa7a;', '&#x1fa80;', '&#x1fa81;', '&#x1fa82;', '&#x1fa90;', '&#x1fa91;', '&#x1fa92;', '&#x1fa93;', '&#x1fa94;', '&#x1fa95;', '&#x1f3ea;', '&#x1f3eb;', '&#x1f3ec;', '&#x1f3ed;', '&#x1f3ee;', '&#x1f596;', '&#x1f5a4;', '&#x1f5a5;', '&#x1f5a8;', '&#x1f5b1;', '&#x1f5b2;', '&#x1f5bc;', '&#x1f5c2;', '&#x1f5c3;', '&#x1f5c4;', '&#x1f5d1;', '&#x1f5d2;', '&#x1f5d3;', '&#x1f5dc;', '&#x1f5dd;', '&#x1f5de;', '&#x1f5e1;', '&#x1f5e3;', '&#x1f5e8;', '&#x1f5ef;', '&#x1f5f3;', '&#x1f5fa;', '&#x1f5fb;', '&#x1f5fc;', '&#x1f5fd;', '&#x1f5fe;', '&#x1f5ff;', '&#x1f600;', '&#x1f601;', '&#x1f602;', '&#x1f603;', '&#x1f604;', '&#x1f605;', '&#x1f606;', '&#x1f607;', '&#x1f608;', '&#x1f609;', '&#x1f60a;', '&#x1f60b;', '&#x1f60c;', '&#x1f60d;', '&#x1f60e;', '&#x1f60f;', '&#x1f610;', '&#x1f611;', '&#x1f612;', '&#x1f613;', '&#x1f614;', '&#x1f615;', '&#x1f616;', '&#x1f617;', '&#x1f618;', '&#x1f619;', '&#x1f61a;', '&#x25ab;', '&#x2626;', '&#x262e;', '&#x262f;', '&#x2638;', '&#x2639;', '&#x263a;', '&#x2640;', '&#x2642;', '&#x2648;', '&#x2649;', '&#x264a;', '&#x264b;', '&#x264c;', '&#x264d;', '&#x264e;', '&#x264f;', '&#x2650;', '&#x2651;', '&#x2652;', '&#x2653;', '&#x265f;', '&#x2660;', '&#x2663;', '&#x2665;', '&#x2666;', '&#x2668;', '&#x267b;', '&#x267e;', '&#x267f;', '&#x2692;', '&#x2693;', '&#x2694;', '&#x2695;', '&#x2696;', '&#x2697;', '&#x2699;', '&#x269b;', '&#x269c;', '&#x26a0;', '&#x26a1;', '&#x26a7;', '&#x26aa;', '&#x26ab;', '&#x26b0;', '&#x26b1;', '&#x26bd;', '&#x26be;', '&#x26c4;', '&#x26c5;', '&#x26c8;', '&#x26ce;', '&#x26cf;', '&#x26d1;', '&#x26d3;', '&#x26d4;', '&#x26e9;', '&#x26ea;', '&#x26f0;', '&#x26f1;', '&#x26f2;', '&#x26f3;', '&#x26f4;', '&#x26f5;', '&#x2623;', '&#x2622;', '&#x2620;', '&#x261d;', '&#x2618;', '&#x26f7;', '&#x26f8;', '&#x2615;', '&#x2614;', '&#x2611;', '&#x260e;', '&#x2604;', '&#x2603;', '&#x2602;', '&#x2601;', '&#x2600;', '&#x25fe;', '&#x25fd;', '&#x25fc;', '&#x25fb;', '&#x25c0;', '&#x25b6;', '&#x262a;', '&#x25aa;', '&#x26f9;', '&#x26fa;', '&#x26fd;', '&#x2702;', '&#x2705;', '&#x2708;', '&#x2709;', '&#x24c2;', '&#x23fa;', '&#x23f9;', '&#x23f8;', '&#x23f3;', '&#x270a;', '&#x23f2;', '&#x23f1;', '&#x23f0;', '&#x23ef;', '&#x23ee;', '&#x270b;', '&#x23ed;', '&#x23ec;', '&#x23eb;', '&#x23ea;', '&#x23e9;', '&#x270c;', '&#x23cf;', '&#x2328;', '&#x231b;', '&#x231a;', '&#x21aa;', '&#x270d;', '&#x270f;', '&#x2712;', '&#x2714;', '&#x2716;', '&#x271d;', '&#x2721;', '&#x2728;', '&#x2733;', '&#x2734;', '&#x2744;', '&#x2747;', '&#x274c;', '&#x274e;', '&#x2753;', '&#x2754;', '&#x2755;', '&#x2757;', '&#x2763;', '&#x2764;', '&#x2795;', '&#x2796;', '&#x2797;', '&#x27a1;', '&#x27b0;', '&#x27bf;', '&#x2934;', '&#x2935;', '&#x21a9;', '&#x2b05;', '&#x2b06;', '&#x2b07;', '&#x2b1b;', '&#x2b1c;', '&#x2b50;', '&#x2b55;', '&#x2199;', '&#x3030;', '&#x303d;', '&#x2198;', '&#x2197;', '&#x3297;', '&#x3299;', '&#x2196;', '&#x2195;', '&#x2194;', '&#x2139;', '&#x2122;', '&#x2049;', '&#x203c;', '&#xe50a;' );\n\t$partials = array( '&#x1f004;', '&#x1f0cf;', '&#x1f170;', '&#x1f171;', '&#x1f17e;', '&#x1f17f;', '&#x1f18e;', '&#x1f191;', '&#x1f192;', '&#x1f193;', '&#x1f194;', '&#x1f195;', '&#x1f196;', '&#x1f197;', '&#x1f198;', '&#x1f199;', '&#x1f19a;', '&#x1f1e6;', '&#x1f1e8;', '&#x1f1e9;', '&#x1f1ea;', '&#x1f1eb;', '&#x1f1ec;', '&#x1f1ee;', '&#x1f1f1;', '&#x1f1f2;', '&#x1f1f4;', '&#x1f1f6;', '&#x1f1f7;', '&#x1f1f8;', '&#x1f1f9;', '&#x1f1fa;', '&#x1f1fc;', '&#x1f1fd;', '&#x1f1ff;', '&#x1f1e7;', '&#x1f1ed;', '&#x1f1ef;', '&#x1f1f3;', '&#x1f1fb;', '&#x1f1fe;', '&#x1f1f0;', '&#x1f1f5;', '&#x1f201;', '&#x1f202;', '&#x1f21a;', '&#x1f22f;', '&#x1f232;', '&#x1f233;', '&#x1f234;', '&#x1f235;', '&#x1f236;', '&#x1f237;', '&#x1f238;', '&#x1f239;', '&#x1f23a;', '&#x1f250;', '&#x1f251;', '&#x1f300;', '&#x1f301;', '&#x1f302;', '&#x1f303;', '&#x1f304;', '&#x1f305;', '&#x1f306;', '&#x1f307;', '&#x1f308;', '&#x1f309;', '&#x1f30a;', '&#x1f30b;', '&#x1f30c;', '&#x1f30d;', '&#x1f30e;', '&#x1f30f;', '&#x1f310;', '&#x1f311;', '&#x1f312;', '&#x1f313;', '&#x1f314;', '&#x1f315;', '&#x1f316;', '&#x1f317;', '&#x1f318;', '&#x1f319;', '&#x1f31a;', '&#x1f31b;', '&#x1f31c;', '&#x1f31d;', '&#x1f31e;', '&#x1f31f;', '&#x1f320;', '&#x1f321;', '&#x1f324;', '&#x1f325;', '&#x1f326;', '&#x1f327;', '&#x1f328;', '&#x1f329;', '&#x1f32a;', '&#x1f32b;', '&#x1f32c;', '&#x1f32d;', '&#x1f32e;', '&#x1f32f;', '&#x1f330;', '&#x1f331;', '&#x1f332;', '&#x1f333;', '&#x1f334;', '&#x1f335;', '&#x1f336;', '&#x1f337;', '&#x1f338;', '&#x1f339;', '&#x1f33a;', '&#x1f33b;', '&#x1f33c;', '&#x1f33d;', '&#x1f33e;', '&#x1f33f;', '&#x1f340;', '&#x1f341;', '&#x1f342;', '&#x1f343;', '&#x1f344;', '&#x1f345;', '&#x1f346;', '&#x1f347;', '&#x1f348;', '&#x1f349;', '&#x1f34a;', '&#x1f34b;', '&#x1f34c;', '&#x1f34d;', '&#x1f34e;', '&#x1f34f;', '&#x1f350;', '&#x1f351;', '&#x1f352;', '&#x1f353;', '&#x1f354;', '&#x1f355;', '&#x1f356;', '&#x1f357;', '&#x1f358;', '&#x1f359;', '&#x1f35a;', '&#x1f35b;', '&#x1f35c;', '&#x1f35d;', '&#x1f35e;', '&#x1f35f;', '&#x1f360;', '&#x1f361;', '&#x1f362;', '&#x1f363;', '&#x1f364;', '&#x1f365;', '&#x1f366;', '&#x1f367;', '&#x1f368;', '&#x1f369;', '&#x1f36a;', '&#x1f36b;', '&#x1f36c;', '&#x1f36d;', '&#x1f36e;', '&#x1f36f;', '&#x1f370;', '&#x1f371;', '&#x1f372;', '&#x1f373;', '&#x1f374;', '&#x1f375;', '&#x1f376;', '&#x1f377;', '&#x1f378;', '&#x1f379;', '&#x1f37a;', '&#x1f37b;', '&#x1f37c;', '&#x1f37d;', '&#x1f37e;', '&#x1f37f;', '&#x1f380;', '&#x1f381;', '&#x1f382;', '&#x1f383;', '&#x1f384;', '&#x1f385;', '&#x1f3fb;', '&#x1f3fc;', '&#x1f3fd;', '&#x1f3fe;', '&#x1f3ff;', '&#x1f386;', '&#x1f387;', '&#x1f388;', '&#x1f389;', '&#x1f38a;', '&#x1f38b;', '&#x1f38c;', '&#x1f38d;', '&#x1f38e;', '&#x1f38f;', '&#x1f390;', '&#x1f391;', '&#x1f392;', '&#x1f393;', '&#x1f396;', '&#x1f397;', '&#x1f399;', '&#x1f39a;', '&#x1f39b;', '&#x1f39e;', '&#x1f39f;', '&#x1f3a0;', '&#x1f3a1;', '&#x1f3a2;', '&#x1f3a3;', '&#x1f3a4;', '&#x1f3a5;', '&#x1f3a6;', '&#x1f3a7;', '&#x1f3a8;', '&#x1f3a9;', '&#x1f3aa;', '&#x1f3ab;', '&#x1f3ac;', '&#x1f3ad;', '&#x1f3ae;', '&#x1f3af;', '&#x1f3b0;', '&#x1f3b1;', '&#x1f3b2;', '&#x1f3b3;', '&#x1f3b4;', '&#x1f3b5;', '&#x1f3b6;', '&#x1f3b7;', '&#x1f3b8;', '&#x1f3b9;', '&#x1f3ba;', '&#x1f3bb;', '&#x1f3bc;', '&#x1f3bd;', '&#x1f3be;', '&#x1f3bf;', '&#x1f3c0;', '&#x1f3c1;', '&#x1f3c2;', '&#x1f3c3;', '&#x200d;', '&#x2640;', '&#xfe0f;', '&#x2642;', '&#x1f3c4;', '&#x1f3c5;', '&#x1f3c6;', '&#x1f3c7;', '&#x1f3c8;', '&#x1f3c9;', '&#x1f3ca;', '&#x1f3cb;', '&#x1f3cc;', '&#x1f3cd;', '&#x1f3ce;', '&#x1f3cf;', '&#x1f3d0;', '&#x1f3d1;', '&#x1f3d2;', '&#x1f3d3;', '&#x1f3d4;', '&#x1f3d5;', '&#x1f3d6;', '&#x1f3d7;', '&#x1f3d8;', '&#x1f3d9;', '&#x1f3da;', '&#x1f3db;', '&#x1f3dc;', '&#x1f3dd;', '&#x1f3de;', '&#x1f3df;', '&#x1f3e0;', '&#x1f3e1;', '&#x1f3e2;', '&#x1f3e3;', '&#x1f3e4;', '&#x1f3e5;', '&#x1f3e6;', '&#x1f3e7;', '&#x1f3e8;', '&#x1f3e9;', '&#x1f3ea;', '&#x1f3eb;', '&#x1f3ec;', '&#x1f3ed;', '&#x1f3ee;', '&#x1f3ef;', '&#x1f3f0;', '&#x1f3f3;', '&#x26a7;', '&#x1f3f4;', '&#x2620;', '&#xe0067;', '&#xe0062;', '&#xe0065;', '&#xe006e;', '&#xe007f;', '&#xe0073;', '&#xe0063;', '&#xe0074;', '&#xe0077;', '&#xe006c;', '&#x1f3f5;', '&#x1f3f7;', '&#x1f3f8;', '&#x1f3f9;', '&#x1f3fa;', '&#x1f400;', '&#x1f401;', '&#x1f402;', '&#x1f403;', '&#x1f404;', '&#x1f405;', '&#x1f406;', '&#x1f407;', '&#x1f408;', '&#x1f409;', '&#x1f40a;', '&#x1f40b;', '&#x1f40c;', '&#x1f40d;', '&#x1f40e;', '&#x1f40f;', '&#x1f410;', '&#x1f411;', '&#x1f412;', '&#x1f413;', '&#x1f414;', '&#x1f415;', '&#x1f9ba;', '&#x1f416;', '&#x1f417;', '&#x1f418;', '&#x1f419;', '&#x1f41a;', '&#x1f41b;', '&#x1f41c;', '&#x1f41d;', '&#x1f41e;', '&#x1f41f;', '&#x1f420;', '&#x1f421;', '&#x1f422;', '&#x1f423;', '&#x1f424;', '&#x1f425;', '&#x1f426;', '&#x1f427;', '&#x1f428;', '&#x1f429;', '&#x1f42a;', '&#x1f42b;', '&#x1f42c;', '&#x1f42d;', '&#x1f42e;', '&#x1f42f;', '&#x1f430;', '&#x1f431;', '&#x1f432;', '&#x1f433;', '&#x1f434;', '&#x1f435;', '&#x1f436;', '&#x1f437;', '&#x1f438;', '&#x1f439;', '&#x1f43a;', '&#x1f43b;', '&#x1f43c;', '&#x1f43d;', '&#x1f43e;', '&#x1f43f;', '&#x1f440;', '&#x1f441;', '&#x1f5e8;', '&#x1f442;', '&#x1f443;', '&#x1f444;', '&#x1f445;', '&#x1f446;', '&#x1f447;', '&#x1f448;', '&#x1f449;', '&#x1f44a;', '&#x1f44b;', '&#x1f44c;', '&#x1f44d;', '&#x1f44e;', '&#x1f44f;', '&#x1f450;', '&#x1f451;', '&#x1f452;', '&#x1f453;', '&#x1f454;', '&#x1f455;', '&#x1f456;', '&#x1f457;', '&#x1f458;', '&#x1f459;', '&#x1f45a;', '&#x1f45b;', '&#x1f45c;', '&#x1f45d;', '&#x1f45e;', '&#x1f45f;', '&#x1f460;', '&#x1f461;', '&#x1f462;', '&#x1f463;', '&#x1f464;', '&#x1f465;', '&#x1f466;', '&#x1f467;', '&#x1f468;', '&#x1f4bb;', '&#x1f4bc;', '&#x1f527;', '&#x1f52c;', '&#x1f680;', '&#x1f692;', '&#x1f9af;', '&#x1f9b0;', '&#x1f9b1;', '&#x1f9b2;', '&#x1f9b3;', '&#x1f9bc;', '&#x1f9bd;', '&#x2695;', '&#x2696;', '&#x2708;', '&#x1f91d;', '&#x1f469;', '&#x2764;', '&#x1f48b;', '&#x1f46a;', '&#x1f46b;', '&#x1f46c;', '&#x1f46d;', '&#x1f46e;', '&#x1f46f;', '&#x1f470;', '&#x1f471;', '&#x1f472;', '&#x1f473;', '&#x1f474;', '&#x1f475;', '&#x1f476;', '&#x1f477;', '&#x1f478;', '&#x1f479;', '&#x1f47a;', '&#x1f47b;', '&#x1f47c;', '&#x1f47d;', '&#x1f47e;', '&#x1f47f;', '&#x1f480;', '&#x1f481;', '&#x1f482;', '&#x1f483;', '&#x1f484;', '&#x1f485;', '&#x1f486;', '&#x1f487;', '&#x1f488;', '&#x1f489;', '&#x1f48a;', '&#x1f48c;', '&#x1f48d;', '&#x1f48e;', '&#x1f48f;', '&#x1f490;', '&#x1f491;', '&#x1f492;', '&#x1f493;', '&#x1f494;', '&#x1f495;', '&#x1f496;', '&#x1f497;', '&#x1f498;', '&#x1f499;', '&#x1f49a;', '&#x1f49b;', '&#x1f49c;', '&#x1f49d;', '&#x1f49e;', '&#x1f49f;', '&#x1f4a0;', '&#x1f4a1;', '&#x1f4a2;', '&#x1f4a3;', '&#x1f4a4;', '&#x1f4a5;', '&#x1f4a6;', '&#x1f4a7;', '&#x1f4a8;', '&#x1f4a9;', '&#x1f4aa;', '&#x1f4ab;', '&#x1f4ac;', '&#x1f4ad;', '&#x1f4ae;', '&#x1f4af;', '&#x1f4b0;', '&#x1f4b1;', '&#x1f4b2;', '&#x1f4b3;', '&#x1f4b4;', '&#x1f4b5;', '&#x1f4b6;', '&#x1f4b7;', '&#x1f4b8;', '&#x1f4b9;', '&#x1f4ba;', '&#x1f4bd;', '&#x1f4be;', '&#x1f4bf;', '&#x1f4c0;', '&#x1f4c1;', '&#x1f4c2;', '&#x1f4c3;', '&#x1f4c4;', '&#x1f4c5;', '&#x1f4c6;', '&#x1f4c7;', '&#x1f4c8;', '&#x1f4c9;', '&#x1f4ca;', '&#x1f4cb;', '&#x1f4cc;', '&#x1f4cd;', '&#x1f4ce;', '&#x1f4cf;', '&#x1f4d0;', '&#x1f4d1;', '&#x1f4d2;', '&#x1f4d3;', '&#x1f4d4;', '&#x1f4d5;', '&#x1f4d6;', '&#x1f4d7;', '&#x1f4d8;', '&#x1f4d9;', '&#x1f4da;', '&#x1f4db;', '&#x1f4dc;', '&#x1f4dd;', '&#x1f4de;', '&#x1f4df;', '&#x1f4e0;', '&#x1f4e1;', '&#x1f4e2;', '&#x1f4e3;', '&#x1f4e4;', '&#x1f4e5;', '&#x1f4e6;', '&#x1f4e7;', '&#x1f4e8;', '&#x1f4e9;', '&#x1f4ea;', '&#x1f4eb;', '&#x1f4ec;', '&#x1f4ed;', '&#x1f4ee;', '&#x1f4ef;', '&#x1f4f0;', '&#x1f4f1;', '&#x1f4f2;', '&#x1f4f3;', '&#x1f4f4;', '&#x1f4f5;', '&#x1f4f6;', '&#x1f4f7;', '&#x1f4f8;', '&#x1f4f9;', '&#x1f4fa;', '&#x1f4fb;', '&#x1f4fc;', '&#x1f4fd;', '&#x1f4ff;', '&#x1f500;', '&#x1f501;', '&#x1f502;', '&#x1f503;', '&#x1f504;', '&#x1f505;', '&#x1f506;', '&#x1f507;', '&#x1f508;', '&#x1f509;', '&#x1f50a;', '&#x1f50b;', '&#x1f50c;', '&#x1f50d;', '&#x1f50e;', '&#x1f50f;', '&#x1f510;', '&#x1f511;', '&#x1f512;', '&#x1f513;', '&#x1f514;', '&#x1f515;', '&#x1f516;', '&#x1f517;', '&#x1f518;', '&#x1f519;', '&#x1f51a;', '&#x1f51b;', '&#x1f51c;', '&#x1f51d;', '&#x1f51e;', '&#x1f51f;', '&#x1f520;', '&#x1f521;', '&#x1f522;', '&#x1f523;', '&#x1f524;', '&#x1f525;', '&#x1f526;', '&#x1f528;', '&#x1f529;', '&#x1f52a;', '&#x1f52b;', '&#x1f52d;', '&#x1f52e;', '&#x1f52f;', '&#x1f530;', '&#x1f531;', '&#x1f532;', '&#x1f533;', '&#x1f534;', '&#x1f535;', '&#x1f536;', '&#x1f537;', '&#x1f538;', '&#x1f539;', '&#x1f53a;', '&#x1f53b;', '&#x1f53c;', '&#x1f53d;', '&#x1f549;', '&#x1f54a;', '&#x1f54b;', '&#x1f54c;', '&#x1f54d;', '&#x1f54e;', '&#x1f550;', '&#x1f551;', '&#x1f552;', '&#x1f553;', '&#x1f554;', '&#x1f555;', '&#x1f556;', '&#x1f557;', '&#x1f558;', '&#x1f559;', '&#x1f55a;', '&#x1f55b;', '&#x1f55c;', '&#x1f55d;', '&#x1f55e;', '&#x1f55f;', '&#x1f560;', '&#x1f561;', '&#x1f562;', '&#x1f563;', '&#x1f564;', '&#x1f565;', '&#x1f566;', '&#x1f567;', '&#x1f56f;', '&#x1f570;', '&#x1f573;', '&#x1f574;', '&#x1f575;', '&#x1f576;', '&#x1f577;', '&#x1f578;', '&#x1f579;', '&#x1f57a;', '&#x1f587;', '&#x1f58a;', '&#x1f58b;', '&#x1f58c;', '&#x1f58d;', '&#x1f590;', '&#x1f595;', '&#x1f596;', '&#x1f5a4;', '&#x1f5a5;', '&#x1f5a8;', '&#x1f5b1;', '&#x1f5b2;', '&#x1f5bc;', '&#x1f5c2;', '&#x1f5c3;', '&#x1f5c4;', '&#x1f5d1;', '&#x1f5d2;', '&#x1f5d3;', '&#x1f5dc;', '&#x1f5dd;', '&#x1f5de;', '&#x1f5e1;', '&#x1f5e3;', '&#x1f5ef;', '&#x1f5f3;', '&#x1f5fa;', '&#x1f5fb;', '&#x1f5fc;', '&#x1f5fd;', '&#x1f5fe;', '&#x1f5ff;', '&#x1f600;', '&#x1f601;', '&#x1f602;', '&#x1f603;', '&#x1f604;', '&#x1f605;', '&#x1f606;', '&#x1f607;', '&#x1f608;', '&#x1f609;', '&#x1f60a;', '&#x1f60b;', '&#x1f60c;', '&#x1f60d;', '&#x1f60e;', '&#x1f60f;', '&#x1f610;', '&#x1f611;', '&#x1f612;', '&#x1f613;', '&#x1f614;', '&#x1f615;', '&#x1f616;', '&#x1f617;', '&#x1f618;', '&#x1f619;', '&#x1f61a;', '&#x1f61b;', '&#x1f61c;', '&#x1f61d;', '&#x1f61e;', '&#x1f61f;', '&#x1f620;', '&#x1f621;', '&#x1f622;', '&#x1f623;', '&#x1f624;', '&#x1f625;', '&#x1f626;', '&#x1f627;', '&#x1f628;', '&#x1f629;', '&#x1f62a;', '&#x1f62b;', '&#x1f62c;', '&#x1f62d;', '&#x1f62e;', '&#x1f62f;', '&#x1f630;', '&#x1f631;', '&#x1f632;', '&#x1f633;', '&#x1f634;', '&#x1f635;', '&#x1f636;', '&#x1f637;', '&#x1f638;', '&#x1f639;', '&#x1f63a;', '&#x1f63b;', '&#x1f63c;', '&#x1f63d;', '&#x1f63e;', '&#x1f63f;', '&#x1f640;', '&#x1f641;', '&#x1f642;', '&#x1f643;', '&#x1f644;', '&#x1f645;', '&#x1f646;', '&#x1f647;', '&#x1f648;', '&#x1f649;', '&#x1f64a;', '&#x1f64b;', '&#x1f64c;', '&#x1f64d;', '&#x1f64e;', '&#x1f64f;', '&#x1f681;', '&#x1f682;', '&#x1f683;', '&#x1f684;', '&#x1f685;', '&#x1f686;', '&#x1f687;', '&#x1f688;', '&#x1f689;', '&#x1f68a;', '&#x1f68b;', '&#x1f68c;', '&#x1f68d;', '&#x1f68e;', '&#x1f68f;', '&#x1f690;', '&#x1f691;', '&#x1f693;', '&#x1f694;', '&#x1f695;', '&#x1f696;', '&#x1f697;', '&#x1f698;', '&#x1f699;', '&#x1f69a;', '&#x1f69b;', '&#x1f69c;', '&#x1f69d;', '&#x1f69e;', '&#x1f69f;', '&#x1f6a0;', '&#x1f6a1;', '&#x1f6a2;', '&#x1f6a3;', '&#x1f6a4;', '&#x1f6a5;', '&#x1f6a6;', '&#x1f6a7;', '&#x1f6a8;', '&#x1f6a9;', '&#x1f6aa;', '&#x1f6ab;', '&#x1f6ac;', '&#x1f6ad;', '&#x1f6ae;', '&#x1f6af;', '&#x1f6b0;', '&#x1f6b1;', '&#x1f6b2;', '&#x1f6b3;', '&#x1f6b4;', '&#x1f6b5;', '&#x1f6b6;', '&#x1f6b7;', '&#x1f6b8;', '&#x1f6b9;', '&#x1f6ba;', '&#x1f6bb;', '&#x1f6bc;', '&#x1f6bd;', '&#x1f6be;', '&#x1f6bf;', '&#x1f6c0;', '&#x1f6c1;', '&#x1f6c2;', '&#x1f6c3;', '&#x1f6c4;', '&#x1f6c5;', '&#x1f6cb;', '&#x1f6cc;', '&#x1f6cd;', '&#x1f6ce;', '&#x1f6cf;', '&#x1f6d0;', '&#x1f6d1;', '&#x1f6d2;', '&#x1f6d5;', '&#x1f6e0;', '&#x1f6e1;', '&#x1f6e2;', '&#x1f6e3;', '&#x1f6e4;', '&#x1f6e5;', '&#x1f6e9;', '&#x1f6eb;', '&#x1f6ec;', '&#x1f6f0;', '&#x1f6f3;', '&#x1f6f4;', '&#x1f6f5;', '&#x1f6f6;', '&#x1f6f7;', '&#x1f6f8;', '&#x1f6f9;', '&#x1f6fa;', '&#x1f7e0;', '&#x1f7e1;', '&#x1f7e2;', '&#x1f7e3;', '&#x1f7e4;', '&#x1f7e5;', '&#x1f7e6;', '&#x1f7e7;', '&#x1f7e8;', '&#x1f7e9;', '&#x1f7ea;', '&#x1f7eb;', '&#x1f90d;', '&#x1f90e;', '&#x1f90f;', '&#x1f910;', '&#x1f911;', '&#x1f912;', '&#x1f913;', '&#x1f914;', '&#x1f915;', '&#x1f916;', '&#x1f917;', '&#x1f918;', '&#x1f919;', '&#x1f91a;', '&#x1f91b;', '&#x1f91c;', '&#x1f91e;', '&#x1f91f;', '&#x1f920;', '&#x1f921;', '&#x1f922;', '&#x1f923;', '&#x1f924;', '&#x1f925;', '&#x1f926;', '&#x1f927;', '&#x1f928;', '&#x1f929;', '&#x1f92a;', '&#x1f92b;', '&#x1f92c;', '&#x1f92d;', '&#x1f92e;', '&#x1f92f;', '&#x1f930;', '&#x1f931;', '&#x1f932;', '&#x1f933;', '&#x1f934;', '&#x1f935;', '&#x1f936;', '&#x1f937;', '&#x1f938;', '&#x1f939;', '&#x1f93a;', '&#x1f93c;', '&#x1f93d;', '&#x1f93e;', '&#x1f93f;', '&#x1f940;', '&#x1f941;', '&#x1f942;', '&#x1f943;', '&#x1f944;', '&#x1f945;', '&#x1f947;', '&#x1f948;', '&#x1f949;', '&#x1f94a;', '&#x1f94b;', '&#x1f94c;', '&#x1f94d;', '&#x1f94e;', '&#x1f94f;', '&#x1f950;', '&#x1f951;', '&#x1f952;', '&#x1f953;', '&#x1f954;', '&#x1f955;', '&#x1f956;', '&#x1f957;', '&#x1f958;', '&#x1f959;', '&#x1f95a;', '&#x1f95b;', '&#x1f95c;', '&#x1f95d;', '&#x1f95e;', '&#x1f95f;', '&#x1f960;', '&#x1f961;', '&#x1f962;', '&#x1f963;', '&#x1f964;', '&#x1f965;', '&#x1f966;', '&#x1f967;', '&#x1f968;', '&#x1f969;', '&#x1f96a;', '&#x1f96b;', '&#x1f96c;', '&#x1f96d;', '&#x1f96e;', '&#x1f96f;', '&#x1f970;', '&#x1f971;', '&#x1f973;', '&#x1f974;', '&#x1f975;', '&#x1f976;', '&#x1f97a;', '&#x1f97b;', '&#x1f97c;', '&#x1f97d;', '&#x1f97e;', '&#x1f97f;', '&#x1f980;', '&#x1f981;', '&#x1f982;', '&#x1f983;', '&#x1f984;', '&#x1f985;', '&#x1f986;', '&#x1f987;', '&#x1f988;', '&#x1f989;', '&#x1f98a;', '&#x1f98b;', '&#x1f98c;', '&#x1f98d;', '&#x1f98e;', '&#x1f98f;', '&#x1f990;', '&#x1f991;', '&#x1f992;', '&#x1f993;', '&#x1f994;', '&#x1f995;', '&#x1f996;', '&#x1f997;', '&#x1f998;', '&#x1f999;', '&#x1f99a;', '&#x1f99b;', '&#x1f99c;', '&#x1f99d;', '&#x1f99e;', '&#x1f99f;', '&#x1f9a0;', '&#x1f9a1;', '&#x1f9a2;', '&#x1f9a5;', '&#x1f9a6;', '&#x1f9a7;', '&#x1f9a8;', '&#x1f9a9;', '&#x1f9aa;', '&#x1f9ae;', '&#x1f9b4;', '&#x1f9b5;', '&#x1f9b6;', '&#x1f9b7;', '&#x1f9b8;', '&#x1f9b9;', '&#x1f9bb;', '&#x1f9be;', '&#x1f9bf;', '&#x1f9c0;', '&#x1f9c1;', '&#x1f9c2;', '&#x1f9c3;', '&#x1f9c4;', '&#x1f9c5;', '&#x1f9c6;', '&#x1f9c7;', '&#x1f9c8;', '&#x1f9c9;', '&#x1f9ca;', '&#x1f9cd;', '&#x1f9ce;', '&#x1f9cf;', '&#x1f9d0;', '&#x1f9d1;', '&#x1f9d2;', '&#x1f9d3;', '&#x1f9d4;', '&#x1f9d5;', '&#x1f9d6;', '&#x1f9d7;', '&#x1f9d8;', '&#x1f9d9;', '&#x1f9da;', '&#x1f9db;', '&#x1f9dc;', '&#x1f9dd;', '&#x1f9de;', '&#x1f9df;', '&#x1f9e0;', '&#x1f9e1;', '&#x1f9e2;', '&#x1f9e3;', '&#x1f9e4;', '&#x1f9e5;', '&#x1f9e6;', '&#x1f9e7;', '&#x1f9e8;', '&#x1f9e9;', '&#x1f9ea;', '&#x1f9eb;', '&#x1f9ec;', '&#x1f9ed;', '&#x1f9ee;', '&#x1f9ef;', '&#x1f9f0;', '&#x1f9f1;', '&#x1f9f2;', '&#x1f9f3;', '&#x1f9f4;', '&#x1f9f5;', '&#x1f9f6;', '&#x1f9f7;', '&#x1f9f8;', '&#x1f9f9;', '&#x1f9fa;', '&#x1f9fb;', '&#x1f9fc;', '&#x1f9fd;', '&#x1f9fe;', '&#x1f9ff;', '&#x1fa70;', '&#x1fa71;', '&#x1fa72;', '&#x1fa73;', '&#x1fa78;', '&#x1fa79;', '&#x1fa7a;', '&#x1fa80;', '&#x1fa81;', '&#x1fa82;', '&#x1fa90;', '&#x1fa91;', '&#x1fa92;', '&#x1fa93;', '&#x1fa94;', '&#x1fa95;', '&#x203c;', '&#x2049;', '&#x2122;', '&#x2139;', '&#x2194;', '&#x2195;', '&#x2196;', '&#x2197;', '&#x2198;', '&#x2199;', '&#x21a9;', '&#x21aa;', '&#x20e3;', '&#x231a;', '&#x231b;', '&#x2328;', '&#x23cf;', '&#x23e9;', '&#x23ea;', '&#x23eb;', '&#x23ec;', '&#x23ed;', '&#x23ee;', '&#x23ef;', '&#x23f0;', '&#x23f1;', '&#x23f2;', '&#x23f3;', '&#x23f8;', '&#x23f9;', '&#x23fa;', '&#x24c2;', '&#x25aa;', '&#x25ab;', '&#x25b6;', '&#x25c0;', '&#x25fb;', '&#x25fc;', '&#x25fd;', '&#x25fe;', '&#x2600;', '&#x2601;', '&#x2602;', '&#x2603;', '&#x2604;', '&#x260e;', '&#x2611;', '&#x2614;', '&#x2615;', '&#x2618;', '&#x261d;', '&#x2622;', '&#x2623;', '&#x2626;', '&#x262a;', '&#x262e;', '&#x262f;', '&#x2638;', '&#x2639;', '&#x263a;', '&#x2648;', '&#x2649;', '&#x264a;', '&#x264b;', '&#x264c;', '&#x264d;', '&#x264e;', '&#x264f;', '&#x2650;', '&#x2651;', '&#x2652;', '&#x2653;', '&#x265f;', '&#x2660;', '&#x2663;', '&#x2665;', '&#x2666;', '&#x2668;', '&#x267b;', '&#x267e;', '&#x267f;', '&#x2692;', '&#x2693;', '&#x2694;', '&#x2697;', '&#x2699;', '&#x269b;', '&#x269c;', '&#x26a0;', '&#x26a1;', '&#x26aa;', '&#x26ab;', '&#x26b0;', '&#x26b1;', '&#x26bd;', '&#x26be;', '&#x26c4;', '&#x26c5;', '&#x26c8;', '&#x26ce;', '&#x26cf;', '&#x26d1;', '&#x26d3;', '&#x26d4;', '&#x26e9;', '&#x26ea;', '&#x26f0;', '&#x26f1;', '&#x26f2;', '&#x26f3;', '&#x26f4;', '&#x26f5;', '&#x26f7;', '&#x26f8;', '&#x26f9;', '&#x26fa;', '&#x26fd;', '&#x2702;', '&#x2705;', '&#x2709;', '&#x270a;', '&#x270b;', '&#x270c;', '&#x270d;', '&#x270f;', '&#x2712;', '&#x2714;', '&#x2716;', '&#x271d;', '&#x2721;', '&#x2728;', '&#x2733;', '&#x2734;', '&#x2744;', '&#x2747;', '&#x274c;', '&#x274e;', '&#x2753;', '&#x2754;', '&#x2755;', '&#x2757;', '&#x2763;', '&#x2795;', '&#x2796;', '&#x2797;', '&#x27a1;', '&#x27b0;', '&#x27bf;', '&#x2934;', '&#x2935;', '&#x2b05;', '&#x2b06;', '&#x2b07;', '&#x2b1b;', '&#x2b1c;', '&#x2b50;', '&#x2b55;', '&#x3030;', '&#x303d;', '&#x3297;', '&#x3299;', '&#xe50a;' );\n\t// END: emoji arrays\n\n\tif ( 'entities' === $type ) {\n\t\treturn $entities;\n\t}\n\n\treturn $partials;\n}\n\n/**\n * Shorten a URL, to be used as link text.\n *\n * @since 1.2.0\n * @since 4.4.0 Moved to wp-includes/formatting.php from wp-admin/includes/misc.php and added $length param.\n *\n * @param string $url    URL to shorten.\n * @param int    $length Optional. Maximum length of the shortened URL. Default 35 characters.\n * @return string Shortened URL.\n */\nfunction url_shorten( $url, $length = 35 ) {\n\t$stripped  = str_replace( array( 'https://', 'http://', 'www.' ), '', $url );\n\t$short_url = untrailingslashit( $stripped );\n\n\tif ( strlen( $short_url ) > $length ) {\n\t\t$short_url = substr( $short_url, 0, $length - 3 ) . '&hellip;';\n\t}\n\treturn $short_url;\n}\n\n/**\n * Sanitizes a hex color.\n *\n * Returns either '', a 3 or 6 digit hex color (with #), or nothing.\n * For sanitizing values without a #, see sanitize_hex_color_no_hash().\n *\n * @since 3.4.0\n *\n * @param string $color\n * @return string|void\n */\nfunction sanitize_hex_color( $color ) {\n\tif ( '' === $color ) {\n\t\treturn '';\n\t}\n\n\t// 3 or 6 hex digits, or the empty string.\n\tif ( preg_match( '|^#([A-Fa-f0-9]{3}){1,2}$|', $color ) ) {\n\t\treturn $color;\n\t}\n}\n\n/**\n * Sanitizes a hex color without a hash. Use sanitize_hex_color() when possible.\n *\n * Saving hex colors without a hash puts the burden of adding the hash on the\n * UI, which makes it difficult to use or upgrade to other color types such as\n * rgba, hsl, rgb, and html color names.\n *\n * Returns either '', a 3 or 6 digit hex color (without a #), or null.\n *\n * @since 3.4.0\n *\n * @param string $color\n * @return string|null\n */\nfunction sanitize_hex_color_no_hash( $color ) {\n\t$color = ltrim( $color, '#' );\n\n\tif ( '' === $color ) {\n\t\treturn '';\n\t}\n\n\treturn sanitize_hex_color( '#' . $color ) ? $color : null;\n}\n\n/**\n * Ensures that any hex color is properly hashed.\n * Otherwise, returns value untouched.\n *\n * This method should only be necessary if using sanitize_hex_color_no_hash().\n *\n * @since 3.4.0\n *\n * @param string $color\n * @return string\n */\nfunction maybe_hash_hex_color( $color ) {\n\t$unhashed = sanitize_hex_color_no_hash( $color );\n\tif ( $unhashed ) {\n\t\treturn '#' . $unhashed;\n\t}\n\n\treturn $color;\n}\n", "<?php\n/**\n * WP_Block_Type Tests\n *\n * @package WordPress\n * @subpackage Blocks\n * @since 5.0.0\n */\n\n/**\n * Tests for WP_Block_Type\n *\n * @since 5.0.0\n *\n * @group blocks\n */\nclass WP_Test_Block_Type extends WP_UnitTestCase {\n\n\t/**\n\t * Editor user ID.\n\t *\n\t * @since 5.0.0\n\t * @var int\n\t */\n\tprotected static $editor_user_id;\n\n\t/**\n\t * ID for a post containing blocks.\n\t *\n\t * @since 5.0.0\n\t * @var int\n\t */\n\tprotected static $post_with_blocks;\n\n\t/**\n\t * ID for a post without blocks.\n\t *\n\t * @since 5.0.0\n\t * @var int\n\t */\n\tprotected static $post_without_blocks;\n\n\t/**\n\t * Set up before class.\n\t *\n\t * @since 5.0.0\n\t */\n\tpublic static function wpSetUpBeforeClass() {\n\t\tself::$editor_user_id = self::factory()->user->create(\n\t\t\tarray(\n\t\t\t\t'role' => 'editor',\n\t\t\t)\n\t\t);\n\n\t\tself::$post_with_blocks = self::factory()->post->create(\n\t\t\tarray(\n\t\t\t\t'post_title'   => 'Example',\n\t\t\t\t'post_content' => \"<!-- wp:core/text {\\\"dropCap\\\":true} -->\\n<p class=\\\"has-drop-cap\\\">Tester</p>\\n<!-- /wp:core/text -->\",\n\t\t\t)\n\t\t);\n\n\t\tself::$post_without_blocks = self::factory()->post->create(\n\t\t\tarray(\n\t\t\t\t'post_title'   => 'Example',\n\t\t\t\t'post_content' => 'Tester',\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @ticket 45097\n\t */\n\tpublic function test_set_props() {\n\t\t$name = 'core/fake';\n\t\t$args = array(\n\t\t\t'render_callback' => array( $this, 'render_fake_block' ),\n\t\t\t'foo'             => 'bar',\n\t\t);\n\n\t\t$block_type = new WP_Block_Type( $name, $args );\n\n\t\t$this->assertSame( $name, $block_type->name );\n\t\t$this->assertSame( $args['render_callback'], $block_type->render_callback );\n\t\t$this->assertSame( $args['foo'], $block_type->foo );\n\t}\n\n\t/**\n\t * @ticket 45097\n\t */\n\tpublic function test_render() {\n\t\t$attributes = array(\n\t\t\t'foo' => 'bar',\n\t\t\t'bar' => 'foo',\n\t\t);\n\n\t\t$block_type = new WP_Block_Type(\n\t\t\t'core/fake',\n\t\t\tarray(\n\t\t\t\t'render_callback' => array( $this, 'render_fake_block' ),\n\t\t\t)\n\t\t);\n\t\t$output     = $block_type->render( $attributes );\n\t\t$this->assertEquals( $attributes, json_decode( $output, true ) );\n\t}\n\n\t/**\n\t * @ticket 45097\n\t */\n\tpublic function test_render_with_content() {\n\t\t$attributes = array(\n\t\t\t'foo' => 'bar',\n\t\t\t'bar' => 'foo',\n\t\t);\n\n\t\t$content = 'baz';\n\n\t\t$expected = array_merge( $attributes, array( '_content' => $content ) );\n\n\t\t$block_type = new WP_Block_Type(\n\t\t\t'core/fake',\n\t\t\tarray(\n\t\t\t\t'render_callback' => array( $this, 'render_fake_block_with_content' ),\n\t\t\t)\n\t\t);\n\t\t$output     = $block_type->render( $attributes, $content );\n\t\t$this->assertEquals( $expected, json_decode( $output, true ) );\n\t}\n\n\t/**\n\t * @ticket 45097\n\t */\n\tpublic function test_render_for_static_block() {\n\t\t$block_type = new WP_Block_Type( 'core/fake', array() );\n\t\t$output     = $block_type->render();\n\n\t\t$this->assertEquals( '', $output );\n\t}\n\n\t/**\n\t * @ticket 45097\n\t */\n\tpublic function test_is_dynamic_for_static_block() {\n\t\t$block_type = new WP_Block_Type( 'core/fake', array() );\n\n\t\t$this->assertFalse( $block_type->is_dynamic() );\n\t}\n\n\t/**\n\t * @ticket 45097\n\t */\n\tpublic function test_is_dynamic_for_dynamic_block() {\n\t\t$block_type = new WP_Block_Type(\n\t\t\t'core/fake',\n\t\t\tarray(\n\t\t\t\t'render_callback' => array( $this, 'render_fake_block' ),\n\t\t\t)\n\t\t);\n\n\t\t$this->assertTrue( $block_type->is_dynamic() );\n\t}\n\n\t/**\n\t * @ticket 45097\n\t */\n\tpublic function test_prepare_attributes() {\n\t\t$attributes = array(\n\t\t\t'correct'            => 'include',\n\t\t\t'wrongType'          => 5,\n\t\t\t'wrongTypeDefaulted' => 5,\n\t\t\t/* missingDefaulted */\n\t\t\t'undefined'          => 'include',\n\t\t\t'intendedNull'       => null,\n\t\t);\n\n\t\t$block_type = new WP_Block_Type(\n\t\t\t'core/fake',\n\t\t\tarray(\n\t\t\t\t'attributes' => array(\n\t\t\t\t\t'correct'            => array(\n\t\t\t\t\t\t'type' => 'string',\n\t\t\t\t\t),\n\t\t\t\t\t'wrongType'          => array(\n\t\t\t\t\t\t'type' => 'string',\n\t\t\t\t\t),\n\t\t\t\t\t'wrongTypeDefaulted' => array(\n\t\t\t\t\t\t'type'    => 'string',\n\t\t\t\t\t\t'default' => 'defaulted',\n\t\t\t\t\t),\n\t\t\t\t\t'missingDefaulted'   => array(\n\t\t\t\t\t\t'type'    => 'string',\n\t\t\t\t\t\t'default' => 'define',\n\t\t\t\t\t),\n\t\t\t\t\t'intendedNull'       => array(\n\t\t\t\t\t\t'type'    => array( 'string', 'null' ),\n\t\t\t\t\t\t'default' => 'wrong',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\n\t\t$prepared_attributes = $block_type->prepare_attributes_for_render( $attributes );\n\n\t\t$this->assertEquals(\n\t\t\tarray(\n\t\t\t\t'correct'            => 'include',\n\t\t\t\t/* wrongType */\n\t\t\t\t'wrongTypeDefaulted' => 'defaulted',\n\t\t\t\t'missingDefaulted'   => 'define',\n\t\t\t\t'undefined'          => 'include',\n\t\t\t\t'intendedNull'       => null,\n\t\t\t),\n\t\t\t$prepared_attributes\n\t\t);\n\t}\n\n\t/**\n\t * @ticket 45145\n\t */\n\tfunction test_prepare_attributes_none_defined() {\n\t\t$attributes = array( 'exists' => 'keep' );\n\n\t\t$block_type = new WP_Block_Type( 'core/dummy', array() );\n\n\t\t$prepared_attributes = $block_type->prepare_attributes_for_render( $attributes );\n\n\t\t$this->assertEquals( $attributes, $prepared_attributes );\n\t}\n\n\t/**\n\t * @ticket 45097\n\t */\n\tpublic function test_has_block_with_mixed_content() {\n\t\t$mixed_post_content = 'before' .\n\t\t'<!-- wp:core/fake --><!-- /wp:core/fake -->' .\n\t\t'<!-- wp:core/fake_atts {\"value\":\"b1\"} --><!-- /wp:core/fake_atts -->' .\n\t\t'<!-- wp:core/fake-child -->\n\t\t<p>testing the test</p>\n\t\t<!-- /wp:core/fake-child -->' .\n\t\t'between' .\n\t\t'<!-- wp:core/self-close-fake /-->' .\n\t\t'<!-- wp:custom/fake {\"value\":\"b2\"} /-->' .\n\t\t'after';\n\n\t\t$this->assertTrue( has_block( 'core/fake', $mixed_post_content ) );\n\n\t\t$this->assertTrue( has_block( 'core/fake_atts', $mixed_post_content ) );\n\n\t\t$this->assertTrue( has_block( 'core/fake-child', $mixed_post_content ) );\n\n\t\t$this->assertTrue( has_block( 'core/self-close-fake', $mixed_post_content ) );\n\n\t\t$this->assertTrue( has_block( 'custom/fake', $mixed_post_content ) );\n\n\t\t// checking for a partial block name should fail.\n\t\t$this->assertFalse( has_block( 'core/fak', $mixed_post_content ) );\n\n\t\t// checking for a wrong namespace should fail.\n\t\t$this->assertFalse( has_block( 'custom/fake_atts', $mixed_post_content ) );\n\n\t\t// checking for namespace only should not work. Or maybe ... ?\n\t\t$this->assertFalse( has_block( 'core', $mixed_post_content ) );\n\t}\n\n\t/**\n\t * @ticket 45097\n\t */\n\tpublic function test_has_block_with_invalid_content() {\n\t\t// some content with invalid HMTL comments and a single valid block.\n\t\t$invalid_content = 'before' .\n\t\t'<!- - wp:core/weird-space --><!-- /wp:core/weird-space -->' .\n\t\t'<!--wp:core/untrimmed-left --><!-- /wp:core/untrimmed -->' .\n\t\t'<!-- wp:core/fake --><!-- /wp:core/fake -->' .\n\t\t'<!-- wp:core/untrimmed-right--><!-- /wp:core/untrimmed2 -->' .\n\t\t'after';\n\n\t\t$this->assertFalse( has_block( 'core/text', self::$post_without_blocks ) );\n\n\t\t$this->assertFalse( has_block( 'core/weird-space', $invalid_content ) );\n\n\t\t$this->assertFalse( has_block( 'core/untrimmed-left', $invalid_content ) );\n\n\t\t$this->assertFalse( has_block( 'core/untrimmed-right', $invalid_content ) );\n\n\t\t$this->assertTrue( has_block( 'core/fake', $invalid_content ) );\n\t}\n\n\t/**\n\t * @ticket 45097\n\t */\n\tpublic function test_post_has_block() {\n\t\t// should fail for a non-existent block `custom/fake`.\n\t\t$this->assertFalse( has_block( 'custom/fake', self::$post_with_blocks ) );\n\n\t\t// this functions should not work without the second param until the $post global is set.\n\t\t$this->assertFalse( has_block( 'core/text' ) );\n\t\t$this->assertFalse( has_block( 'core/fake' ) );\n\n\t\tglobal $post;\n\t\t$post = get_post( self::$post_with_blocks );\n\n\t\t// check if the function correctly detects content from the $post global.\n\t\t$this->assertTrue( has_block( 'core/text' ) );\n\t\t// even if it detects a proper $post global it should still be false for a missing block.\n\t\t$this->assertFalse( has_block( 'core/fake' ) );\n\t}\n\n\t/**\n\t * Renders a test block without content.\n\t *\n\t * @since 5.0.0\n\t *\n\t * @param array $attributes Block attributes. Default empty array.\n\t * @return string JSON encoded list of attributes.\n\t */\n\tpublic function render_fake_block( $attributes ) {\n\t\treturn json_encode( $attributes );\n\t}\n\n\t/**\n\t * Renders a test block with content.\n\t *\n\t * @since 5.0.0\n\t *\n\t * @param array  $attributes Block attributes. Default empty array.\n\t * @param string $content    Block content. Default empty string.\n\t * @return string JSON encoded list of attributes.\n\t */\n\tpublic function render_fake_block_with_content( $attributes, $content ) {\n\t\t$attributes['_content'] = $content;\n\n\t\treturn json_encode( $attributes );\n\t}\n\n\t/**\n\t * Testing the block version.\n\t *\n\t * @ticket 43887\n\t *\n\t * @dataProvider data_block_version\n\t *\n\t * @param string|null $content  Content.\n\t * @param int         $expected Expected block version.\n\t */\n\tpublic function test_block_version( $content, $expected ) {\n\t\t$this->assertSame( $expected, block_version( $content ) );\n\t}\n\n\t/**\n\t * Test cases for test_block_version().\n\t *\n\t * @since 5.0.0\n\t *\n\t * @return array {\n\t *     @type array {\n\t *         @type string|null Content.\n\t *         @type int         Expected block version.\n\t *     }\n\t * }\n\t */\n\tpublic function data_block_version() {\n\t\treturn array(\n\t\t\t// Null.\n\t\t\tarray( null, 0 ),\n\t\t\t// Empty post content.\n\t\t\tarray( '', 0 ),\n\t\t\t// Post content without blocks.\n\t\t\tarray( '<hr class=\"wp-block-separator\" />', 0 ),\n\t\t\t// Post content with a block.\n\t\t\tarray( '<!-- wp:core/separator -->', 1 ),\n\t\t\t// Post content with a fake block.\n\t\t\tarray( '<!-- wp:core/fake --><!-- /wp:core/fake -->', 1 ),\n\t\t\t// Post content with an invalid block.\n\t\t\tarray( '<!- - wp:core/separator -->', 0 ),\n\t\t);\n\t}\n}\n"], "fixing_code": ["<?php\n/**\n * Functions related to registering and parsing blocks.\n *\n * @package WordPress\n * @subpackage Blocks\n * @since 5.0.0\n */\n\n/**\n * Registers a block type.\n *\n * @since 5.0.0\n *\n * @param string|WP_Block_Type $name Block type name including namespace, or alternatively a\n *                                   complete WP_Block_Type instance. In case a WP_Block_Type\n *                                   is provided, the $args parameter will be ignored.\n * @param array                $args {\n *     Optional. Array of block type arguments. Any arguments may be defined, however the\n *     ones described below are supported by default. Default empty array.\n *\n *     @type callable $render_callback Callback used to render blocks of this block type.\n * }\n * @return WP_Block_Type|false The registered block type on success, or false on failure.\n */\nfunction register_block_type( $name, $args = array() ) {\n\treturn WP_Block_Type_Registry::get_instance()->register( $name, $args );\n}\n\n/**\n * Unregisters a block type.\n *\n * @since 5.0.0\n *\n * @param string|WP_Block_Type $name Block type name including namespace, or alternatively a\n *                                   complete WP_Block_Type instance.\n * @return WP_Block_Type|false The unregistered block type on success, or false on failure.\n */\nfunction unregister_block_type( $name ) {\n\treturn WP_Block_Type_Registry::get_instance()->unregister( $name );\n}\n\n/**\n * Determine whether a post or content string has blocks.\n *\n * This test optimizes for performance rather than strict accuracy, detecting\n * the pattern of a block but not validating its structure. For strict accuracy,\n * you should use the block parser on post content.\n *\n * @since 5.0.0\n * @see parse_blocks()\n *\n * @param int|string|WP_Post|null $post Optional. Post content, post ID, or post object. Defaults to global $post.\n * @return bool Whether the post has blocks.\n */\nfunction has_blocks( $post = null ) {\n\tif ( ! is_string( $post ) ) {\n\t\t$wp_post = get_post( $post );\n\t\tif ( $wp_post instanceof WP_Post ) {\n\t\t\t$post = $wp_post->post_content;\n\t\t}\n\t}\n\n\treturn false !== strpos( (string) $post, '<!-- wp:' );\n}\n\n/**\n * Determine whether a $post or a string contains a specific block type.\n *\n * This test optimizes for performance rather than strict accuracy, detecting\n * the block type exists but not validating its structure. For strict accuracy,\n * you should use the block parser on post content.\n *\n * @since 5.0.0\n * @see parse_blocks()\n *\n * @param string                  $block_name Full Block type to look for.\n * @param int|string|WP_Post|null $post Optional. Post content, post ID, or post object. Defaults to global $post.\n * @return bool Whether the post content contains the specified block.\n */\nfunction has_block( $block_name, $post = null ) {\n\tif ( ! has_blocks( $post ) ) {\n\t\treturn false;\n\t}\n\n\tif ( ! is_string( $post ) ) {\n\t\t$wp_post = get_post( $post );\n\t\tif ( $wp_post instanceof WP_Post ) {\n\t\t\t$post = $wp_post->post_content;\n\t\t}\n\t}\n\n\t/*\n\t * Normalize block name to include namespace, if provided as non-namespaced.\n\t * This matches behavior for WordPress 5.0.0 - 5.3.0 in matching blocks by\n\t * their serialized names.\n\t */\n\tif ( false === strpos( $block_name, '/' ) ) {\n\t\t$block_name = 'core/' . $block_name;\n\t}\n\n\t// Test for existence of block by its fully qualified name.\n\t$has_block = false !== strpos( $post, '<!-- wp:' . $block_name . ' ' );\n\n\tif ( ! $has_block ) {\n\t\t/*\n\t\t * If the given block name would serialize to a different name, test for\n\t\t * existence by the serialized form.\n\t\t */\n\t\t$serialized_block_name = strip_core_block_namespace( $block_name );\n\t\tif ( $serialized_block_name !== $block_name ) {\n\t\t\t$has_block = false !== strpos( $post, '<!-- wp:' . $serialized_block_name . ' ' );\n\t\t}\n\t}\n\n\treturn $has_block;\n}\n\n/**\n * Returns an array of the names of all registered dynamic block types.\n *\n * @since 5.0.0\n *\n * @return array Array of dynamic block names.\n */\nfunction get_dynamic_block_names() {\n\t$dynamic_block_names = array();\n\n\t$block_types = WP_Block_Type_Registry::get_instance()->get_all_registered();\n\tforeach ( $block_types as $block_type ) {\n\t\tif ( $block_type->is_dynamic() ) {\n\t\t\t$dynamic_block_names[] = $block_type->name;\n\t\t}\n\t}\n\n\treturn $dynamic_block_names;\n}\n\n/**\n * Given an array of attributes, returns a string in the serialized attributes\n * format prepared for post content.\n *\n * The serialized result is a JSON-encoded string, with unicode escape sequence\n * substitution for characters which might otherwise interfere with embedding\n * the result in an HTML comment.\n *\n * @since 5.3.1\n *\n * @param array $attributes Attributes object.\n * @return string Serialized attributes.\n */\nfunction serialize_block_attributes( $block_attributes ) {\n\t$encoded_attributes = json_encode( $block_attributes );\n\t$encoded_attributes = preg_replace( '/--/', '\\\\u002d\\\\u002d', $encoded_attributes );\n\t$encoded_attributes = preg_replace( '/</', '\\\\u003c', $encoded_attributes );\n\t$encoded_attributes = preg_replace( '/>/', '\\\\u003e', $encoded_attributes );\n\t$encoded_attributes = preg_replace( '/&/', '\\\\u0026', $encoded_attributes );\n\t// Regex: /\\\\\"/\n\t$encoded_attributes = preg_replace( '/\\\\\\\\\"/', '\\\\u0022', $encoded_attributes );\n\n\treturn $encoded_attributes;\n}\n\n/**\n * Returns the block name to use for serialization. This will remove the default\n * \"core/\" namespace from a block name.\n *\n * @since 5.3.1\n *\n * @param string $block_name Original block name.\n * @return string Block name to use for serialization.\n */\nfunction strip_core_block_namespace( $block_name = null ) {\n\tif ( is_string( $block_name ) && 0 === strpos( $block_name, 'core/' ) ) {\n\t\treturn substr( $block_name, 5 );\n\t}\n\n\treturn $block_name;\n}\n\n/**\n * Returns the content of a block, including comment delimiters.\n *\n * @since 5.3.1\n *\n * @param string $block_name Block name.\n * @param array  $attributes Block attributes.\n * @param string $content    Block save content.\n * @return string Comment-delimited block content.\n */\nfunction get_comment_delimited_block_content( $block_name = null, $block_attributes, $block_content ) {\n\tif ( is_null( $block_name ) ) {\n\t\treturn $block_content;\n\t}\n\n\t$serialized_block_name = strip_core_block_namespace( $block_name );\n\t$serialized_attributes = empty( $block_attributes ) ? '' : serialize_block_attributes( $block_attributes ) . ' ';\n\n\tif ( empty( $block_content ) ) {\n\t\treturn sprintf( '<!-- wp:%s %s/-->', $serialized_block_name, $serialized_attributes );\n\t}\n\n\treturn sprintf(\n\t\t'<!-- wp:%s %s-->%s<!-- /wp:%s -->',\n\t\t$serialized_block_name,\n\t\t$serialized_attributes,\n\t\t$block_content,\n\t\t$serialized_block_name\n\t);\n}\n\n/**\n * Returns the content of a block, including comment delimiters, serializing all\n * attributes from the given parsed block.\n *\n * This should be used when preparing a block to be saved to post content.\n * Prefer `render_block` when preparing a block for display. Unlike\n * `render_block`, this does not evaluate a block's `render_callback`, and will\n * instead preserve the markup as parsed.\n *\n * @since 5.3.1\n *\n * @param WP_Block_Parser_Block $block A single parsed block object.\n * @return string String of rendered HTML.\n */\nfunction serialize_block( $block ) {\n\t$block_content = '';\n\n\t$index = 0;\n\tforeach ( $block['innerContent'] as $chunk ) {\n\t\t$block_content .= is_string( $chunk ) ? $chunk : serialize_block( $block['innerBlocks'][ $index++ ] );\n\t}\n\n\tif ( ! is_array( $block['attrs'] ) ) {\n\t\t$block['attrs'] = array();\n\t}\n\n\treturn get_comment_delimited_block_content(\n\t\t$block['blockName'],\n\t\t$block['attrs'],\n\t\t$block_content\n\t);\n}\n\n/**\n * Returns a joined string of the aggregate serialization of the given parsed\n * blocks.\n *\n * @since 5.3.1\n *\n * @param WP_Block_Parser_Block[] $blocks Parsed block objects.\n * @return string String of rendered HTML.\n */\nfunction serialize_blocks( $blocks ) {\n\treturn implode( '', array_map( 'serialize_block', $blocks ) );\n}\n\n/**\n * Filters and sanitizes block content to remove non-allowable HTML from\n * parsed block attribute values.\n *\n * @since 5.3.1\n *\n * @param string         $text              Text that may contain block content.\n * @param array[]|string $allowed_html      An array of allowed HTML elements\n *                                          and attributes, or a context name\n *                                          such as 'post'.\n * @param string[]       $allowed_protocols Array of allowed URL protocols.\n * @return string The filtered and sanitized content result.\n */\nfunction filter_block_content( $text, $allowed_html = 'post', $allowed_protocols = array() ) {\n\t$result = '';\n\n\t$blocks = parse_blocks( $text );\n\tforeach ( $blocks as $block ) {\n\t\t$block   = filter_block_kses( $block, $allowed_html, $allowed_protocols );\n\t\t$result .= serialize_block( $block );\n\t}\n\n\treturn $result;\n}\n\n/**\n * Filters and sanitizes a parsed block to remove non-allowable HTML from block\n * attribute values.\n *\n * @since 5.3.1\n *\n * @param WP_Block_Parser_Block $block             The parsed block object.\n * @param array[]|string        $allowed_html      An array of allowed HTML\n *                                                 elements and attributes, or a\n *                                                 context name such as 'post'.\n * @param string[]              $allowed_protocols Allowed URL protocols.\n * @return array The filtered and sanitized block object result.\n */\nfunction filter_block_kses( $block, $allowed_html, $allowed_protocols = array() ) {\n\t$block['attrs'] = filter_block_kses_value( $block['attrs'], $allowed_html, $allowed_protocols );\n\n\tif ( is_array( $block['innerBlocks'] ) ) {\n\t\tforeach ( $block['innerBlocks'] as $i => $inner_block ) {\n\t\t\t$block['innerBlocks'][ $i ] = filter_block_kses( $inner_block, $allowed_html, $allowed_protocols );\n\t\t}\n\t}\n\n\treturn $block;\n}\n\n/**\n * Filters and sanitizes a parsed block attribute value to remove non-allowable\n * HTML.\n *\n * @since 5.3.1\n *\n * @param mixed          $value             The attribute value to filter.\n * @param array[]|string $allowed_html      An array of allowed HTML elements\n *                                          and attributes, or a context name\n *                                          such as 'post'.\n * @param string[]       $allowed_protocols Array of allowed URL protocols.\n * @return array The filtered and sanitized result.\n */\nfunction filter_block_kses_value( $value, $allowed_html, $allowed_protocols = array() ) {\n\tif ( is_array( $value ) ) {\n\t\tforeach ( $value as $key => $inner_value ) {\n\t\t\t$filtered_key   = filter_block_kses_value( $key, $allowed_html, $allowed_protocols );\n\t\t\t$filtered_value = filter_block_kses_value( $inner_value, $allowed_html, $allowed_protocols );\n\n\t\t\tif ( $filtered_key !== $key ) {\n\t\t\t\tunset( $value[ $key ] );\n\t\t\t}\n\n\t\t\t$value[ $filtered_key ] = $filtered_value;\n\t\t}\n\t} elseif ( is_string( $value ) ) {\n\t\treturn wp_kses( $value, $allowed_html, $allowed_protocols );\n\t}\n\n\treturn $value;\n}\n\n/**\n * Parses blocks out of a content string, and renders those appropriate for the excerpt.\n *\n * As the excerpt should be a small string of text relevant to the full post content,\n * this function renders the blocks that are most likely to contain such text.\n *\n * @since 5.0.0\n *\n * @param string $content The content to parse.\n * @return string The parsed and filtered content.\n */\nfunction excerpt_remove_blocks( $content ) {\n\t$allowed_inner_blocks = array(\n\t\t// Classic blocks have their blockName set to null.\n\t\tnull,\n\t\t'core/freeform',\n\t\t'core/heading',\n\t\t'core/html',\n\t\t'core/list',\n\t\t'core/media-text',\n\t\t'core/paragraph',\n\t\t'core/preformatted',\n\t\t'core/pullquote',\n\t\t'core/quote',\n\t\t'core/table',\n\t\t'core/verse',\n\t);\n\n\t$allowed_blocks = array_merge( $allowed_inner_blocks, array( 'core/columns' ) );\n\n\t/**\n\t * Filters the list of blocks that can contribute to the excerpt.\n\t *\n\t * If a dynamic block is added to this list, it must not generate another\n\t * excerpt, as this will cause an infinite loop to occur.\n\t *\n\t * @since 5.0.0\n\t *\n\t * @param array $allowed_blocks The list of allowed blocks.\n\t */\n\t$allowed_blocks = apply_filters( 'excerpt_allowed_blocks', $allowed_blocks );\n\t$blocks         = parse_blocks( $content );\n\t$output         = '';\n\n\tforeach ( $blocks as $block ) {\n\t\tif ( in_array( $block['blockName'], $allowed_blocks, true ) ) {\n\t\t\tif ( ! empty( $block['innerBlocks'] ) ) {\n\t\t\t\tif ( 'core/columns' === $block['blockName'] ) {\n\t\t\t\t\t$output .= _excerpt_render_inner_columns_blocks( $block, $allowed_inner_blocks );\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Skip the block if it has disallowed or nested inner blocks.\n\t\t\t\tforeach ( $block['innerBlocks'] as $inner_block ) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t! in_array( $inner_block['blockName'], $allowed_inner_blocks, true ) ||\n\t\t\t\t\t\t! empty( $inner_block['innerBlocks'] )\n\t\t\t\t\t) {\n\t\t\t\t\t\tcontinue 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$output .= render_block( $block );\n\t\t}\n\t}\n\n\treturn $output;\n}\n\n/**\n * Render inner blocks from the `core/columns` block for generating an excerpt.\n *\n * @since 5.2.0\n * @access private\n *\n * @param array $columns        The parsed columns block.\n * @param array $allowed_blocks The list of allowed inner blocks.\n * @return string The rendered inner blocks.\n */\nfunction _excerpt_render_inner_columns_blocks( $columns, $allowed_blocks ) {\n\t$output = '';\n\n\tforeach ( $columns['innerBlocks'] as $column ) {\n\t\tforeach ( $column['innerBlocks'] as $inner_block ) {\n\t\t\tif ( in_array( $inner_block['blockName'], $allowed_blocks, true ) && empty( $inner_block['innerBlocks'] ) ) {\n\t\t\t\t$output .= render_block( $inner_block );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $output;\n}\n\n/**\n * Renders a single block into a HTML string.\n *\n * @since 5.0.0\n *\n * @global WP_Post $post The post to edit.\n *\n * @param array $block A single parsed block object.\n * @return string String of rendered HTML.\n */\nfunction render_block( $block ) {\n\tglobal $post;\n\n\t/**\n\t * Allows render_block() to be shortcircuited, by returning a non-null value.\n\t *\n\t * @since 5.1.0\n\t *\n\t * @param string|null $pre_render The pre-rendered content. Default null.\n\t * @param array       $block      The block being rendered.\n\t */\n\t$pre_render = apply_filters( 'pre_render_block', null, $block );\n\tif ( ! is_null( $pre_render ) ) {\n\t\treturn $pre_render;\n\t}\n\n\t$source_block = $block;\n\n\t/**\n\t * Filters the block being rendered in render_block(), before it's processed.\n\t *\n\t * @since 5.1.0\n\t *\n\t * @param array $block        The block being rendered.\n\t * @param array $source_block An un-modified copy of $block, as it appeared in the source content.\n\t */\n\t$block = apply_filters( 'render_block_data', $block, $source_block );\n\n\t$block_type    = WP_Block_Type_Registry::get_instance()->get_registered( $block['blockName'] );\n\t$is_dynamic    = $block['blockName'] && null !== $block_type && $block_type->is_dynamic();\n\t$block_content = '';\n\t$index         = 0;\n\n\tforeach ( $block['innerContent'] as $chunk ) {\n\t\t$block_content .= is_string( $chunk ) ? $chunk : render_block( $block['innerBlocks'][ $index++ ] );\n\t}\n\n\tif ( ! is_array( $block['attrs'] ) ) {\n\t\t$block['attrs'] = array();\n\t}\n\n\tif ( $is_dynamic ) {\n\t\t$global_post   = $post;\n\t\t$block_content = $block_type->render( $block['attrs'], $block_content );\n\t\t$post          = $global_post;\n\t}\n\n\t/**\n\t * Filters the content of a single block.\n\t *\n\t * @since 5.0.0\n\t *\n\t * @param string $block_content The block content about to be appended.\n\t * @param array  $block         The full block, including name and attributes.\n\t */\n\treturn apply_filters( 'render_block', $block_content, $block );\n}\n\n/**\n * Parses blocks out of a content string.\n *\n * @since 5.0.0\n *\n * @param string $content Post content.\n * @return array Array of parsed block objects.\n */\nfunction parse_blocks( $content ) {\n\t/**\n\t * Filter to allow plugins to replace the server-side block parser\n\t *\n\t * @since 5.0.0\n\t *\n\t * @param string $parser_class Name of block parser class.\n\t */\n\t$parser_class = apply_filters( 'block_parser_class', 'WP_Block_Parser' );\n\n\t$parser = new $parser_class();\n\treturn $parser->parse( $content );\n}\n\n/**\n * Parses dynamic blocks out of `post_content` and re-renders them.\n *\n * @since 5.0.0\n *\n * @param string $content Post content.\n * @return string Updated post content.\n */\nfunction do_blocks( $content ) {\n\t$blocks = parse_blocks( $content );\n\t$output = '';\n\n\tforeach ( $blocks as $block ) {\n\t\t$output .= render_block( $block );\n\t}\n\n\t// If there are blocks in this content, we shouldn't run wpautop() on it later.\n\t$priority = has_filter( 'the_content', 'wpautop' );\n\tif ( false !== $priority && doing_filter( 'the_content' ) && has_blocks( $content ) ) {\n\t\tremove_filter( 'the_content', 'wpautop', $priority );\n\t\tadd_filter( 'the_content', '_restore_wpautop_hook', $priority + 1 );\n\t}\n\n\treturn $output;\n}\n\n/**\n * If do_blocks() needs to remove wpautop() from the `the_content` filter, this re-adds it afterwards,\n * for subsequent `the_content` usage.\n *\n * @access private\n *\n * @since 5.0.0\n *\n * @param string $content The post content running through this filter.\n * @return string The unmodified content.\n */\nfunction _restore_wpautop_hook( $content ) {\n\t$current_priority = has_filter( 'the_content', '_restore_wpautop_hook' );\n\n\tadd_filter( 'the_content', 'wpautop', $current_priority - 1 );\n\tremove_filter( 'the_content', '_restore_wpautop_hook', $current_priority );\n\n\treturn $content;\n}\n\n/**\n * Returns the current version of the block format that the content string is using.\n *\n * If the string doesn't contain blocks, it returns 0.\n *\n * @since 5.0.0\n *\n * @param string $content Content to test.\n * @return int The block format version is 1 if the content contains one or more blocks, 0 otherwise.\n */\nfunction block_version( $content ) {\n\treturn has_blocks( $content ) ? 1 : 0;\n}\n\n/**\n * Registers a new block style.\n *\n * @since 5.3.0\n *\n * @param string $block_name       Block type name including namespace.\n * @param array  $style_properties Array containing the properties of the style name, label, style (name of the stylesheet to be enqueued), inline_style (string containing the CSS to be added).\n *\n * @return boolean True if the block style was registered with success and false otherwise.\n */\nfunction register_block_style( $block_name, $style_properties ) {\n\treturn WP_Block_Styles_Registry::get_instance()->register( $block_name, $style_properties );\n}\n\n/**\n * Unregisters a block style.\n *\n * @since 5.3.0\n *\n * @param string $block_name       Block type name including namespace.\n * @param array  $block_style_name Block style name.\n *\n * @return boolean True if the block style was unregistered with success and false otherwise.\n */\nfunction unregister_block_style( $block_name, $block_style_name ) {\n\treturn WP_Block_Styles_Registry::get_instance()->unregister( $block_name, $block_style_name );\n}\n", "<?php\n/**\n * Sets up the default filters and actions for most\n * of the WordPress hooks.\n *\n * If you need to remove a default hook, this file will\n * give you the priority for which to use to remove the\n * hook.\n *\n * Not all of the default hooks are found in default-filters.php\n *\n * @package WordPress\n */\n\n// Strip, trim, kses, special chars for string saves\nforeach ( array( 'pre_term_name', 'pre_comment_author_name', 'pre_link_name', 'pre_link_target', 'pre_link_rel', 'pre_user_display_name', 'pre_user_first_name', 'pre_user_last_name', 'pre_user_nickname' ) as $filter ) {\n\tadd_filter( $filter, 'sanitize_text_field' );\n\tadd_filter( $filter, 'wp_filter_kses' );\n\tadd_filter( $filter, '_wp_specialchars', 30 );\n}\n\n// Strip, kses, special chars for string display\nforeach ( array( 'term_name', 'comment_author_name', 'link_name', 'link_target', 'link_rel', 'user_display_name', 'user_first_name', 'user_last_name', 'user_nickname' ) as $filter ) {\n\tif ( is_admin() ) {\n\t\t// These are expensive. Run only on admin pages for defense in depth.\n\t\tadd_filter( $filter, 'sanitize_text_field' );\n\t\tadd_filter( $filter, 'wp_kses_data' );\n\t}\n\tadd_filter( $filter, '_wp_specialchars', 30 );\n}\n\n// Kses only for textarea saves\nforeach ( array( 'pre_term_description', 'pre_link_description', 'pre_link_notes', 'pre_user_description' ) as $filter ) {\n\tadd_filter( $filter, 'wp_filter_kses' );\n}\n\n// Kses only for textarea admin displays\nif ( is_admin() ) {\n\tforeach ( array( 'term_description', 'link_description', 'link_notes', 'user_description' ) as $filter ) {\n\t\tadd_filter( $filter, 'wp_kses_data' );\n\t}\n\tadd_filter( 'comment_text', 'wp_kses_post' );\n}\n\n// Email saves\nforeach ( array( 'pre_comment_author_email', 'pre_user_email' ) as $filter ) {\n\tadd_filter( $filter, 'trim' );\n\tadd_filter( $filter, 'sanitize_email' );\n\tadd_filter( $filter, 'wp_filter_kses' );\n}\n\n// Email admin display\nforeach ( array( 'comment_author_email', 'user_email' ) as $filter ) {\n\tadd_filter( $filter, 'sanitize_email' );\n\tif ( is_admin() ) {\n\t\tadd_filter( $filter, 'wp_kses_data' );\n\t}\n}\n\n// Save URL\nforeach ( array(\n\t'pre_comment_author_url',\n\t'pre_user_url',\n\t'pre_link_url',\n\t'pre_link_image',\n\t'pre_link_rss',\n\t'pre_post_guid',\n) as $filter ) {\n\tadd_filter( $filter, 'wp_strip_all_tags' );\n\tadd_filter( $filter, 'esc_url_raw' );\n\tadd_filter( $filter, 'wp_filter_kses' );\n}\n\n// Display URL\nforeach ( array( 'user_url', 'link_url', 'link_image', 'link_rss', 'comment_url', 'post_guid' ) as $filter ) {\n\tif ( is_admin() ) {\n\t\tadd_filter( $filter, 'wp_strip_all_tags' );\n\t}\n\tadd_filter( $filter, 'esc_url' );\n\tif ( is_admin() ) {\n\t\tadd_filter( $filter, 'wp_kses_data' );\n\t}\n}\n\n// Slugs\nadd_filter( 'pre_term_slug', 'sanitize_title' );\nadd_filter( 'wp_insert_post_data', '_wp_customize_changeset_filter_insert_post_data', 10, 2 );\n\n// Keys\nforeach ( array( 'pre_post_type', 'pre_post_status', 'pre_post_comment_status', 'pre_post_ping_status' ) as $filter ) {\n\tadd_filter( $filter, 'sanitize_key' );\n}\n\n// Mime types\nadd_filter( 'pre_post_mime_type', 'sanitize_mime_type' );\nadd_filter( 'post_mime_type', 'sanitize_mime_type' );\n\n// Meta\nadd_filter( 'register_meta_args', '_wp_register_meta_args_whitelist', 10, 2 );\n\n// Post meta\nadd_action( 'added_post_meta', 'wp_cache_set_posts_last_changed' );\nadd_action( 'updated_post_meta', 'wp_cache_set_posts_last_changed' );\nadd_action( 'deleted_post_meta', 'wp_cache_set_posts_last_changed' );\n\n// Term meta\nadd_action( 'added_term_meta', 'wp_cache_set_terms_last_changed' );\nadd_action( 'updated_term_meta', 'wp_cache_set_terms_last_changed' );\nadd_action( 'deleted_term_meta', 'wp_cache_set_terms_last_changed' );\nadd_filter( 'get_term_metadata', 'wp_check_term_meta_support_prefilter' );\nadd_filter( 'add_term_metadata', 'wp_check_term_meta_support_prefilter' );\nadd_filter( 'update_term_metadata', 'wp_check_term_meta_support_prefilter' );\nadd_filter( 'delete_term_metadata', 'wp_check_term_meta_support_prefilter' );\nadd_filter( 'get_term_metadata_by_mid', 'wp_check_term_meta_support_prefilter' );\nadd_filter( 'update_term_metadata_by_mid', 'wp_check_term_meta_support_prefilter' );\nadd_filter( 'delete_term_metadata_by_mid', 'wp_check_term_meta_support_prefilter' );\nadd_filter( 'update_term_metadata_cache', 'wp_check_term_meta_support_prefilter' );\n\n// Comment meta\nadd_action( 'added_comment_meta', 'wp_cache_set_comments_last_changed' );\nadd_action( 'updated_comment_meta', 'wp_cache_set_comments_last_changed' );\nadd_action( 'deleted_comment_meta', 'wp_cache_set_comments_last_changed' );\n\n// Places to balance tags on input\nforeach ( array( 'content_save_pre', 'excerpt_save_pre', 'comment_save_pre', 'pre_comment_content' ) as $filter ) {\n\tadd_filter( $filter, 'convert_invalid_entities' );\n\tadd_filter( $filter, 'balanceTags', 50 );\n}\n\n// Add proper rel values for links with target.\nadd_action( 'init', 'wp_init_targeted_link_rel_filters' );\n\n// Format strings for display.\nforeach ( array( 'comment_author', 'term_name', 'link_name', 'link_description', 'link_notes', 'bloginfo', 'wp_title', 'widget_title' ) as $filter ) {\n\tadd_filter( $filter, 'wptexturize' );\n\tadd_filter( $filter, 'convert_chars' );\n\tadd_filter( $filter, 'esc_html' );\n}\n\n// Format WordPress\nforeach ( array( 'the_content', 'the_title', 'wp_title' ) as $filter ) {\n\tadd_filter( $filter, 'capital_P_dangit', 11 );\n}\nadd_filter( 'comment_text', 'capital_P_dangit', 31 );\n\n// Format titles\nforeach ( array( 'single_post_title', 'single_cat_title', 'single_tag_title', 'single_month_title', 'nav_menu_attr_title', 'nav_menu_description' ) as $filter ) {\n\tadd_filter( $filter, 'wptexturize' );\n\tadd_filter( $filter, 'strip_tags' );\n}\n\n// Format text area for display.\nforeach ( array( 'term_description', 'get_the_post_type_description' ) as $filter ) {\n\tadd_filter( $filter, 'wptexturize' );\n\tadd_filter( $filter, 'convert_chars' );\n\tadd_filter( $filter, 'wpautop' );\n\tadd_filter( $filter, 'shortcode_unautop' );\n}\n\n// Format for RSS\nadd_filter( 'term_name_rss', 'convert_chars' );\n\n// Pre save hierarchy\nadd_filter( 'wp_insert_post_parent', 'wp_check_post_hierarchy_for_loops', 10, 2 );\nadd_filter( 'wp_update_term_parent', 'wp_check_term_hierarchy_for_loops', 10, 3 );\n\n// Display filters\nadd_filter( 'the_title', 'wptexturize' );\nadd_filter( 'the_title', 'convert_chars' );\nadd_filter( 'the_title', 'trim' );\n\nadd_filter( 'the_content', 'do_blocks', 9 );\nadd_filter( 'the_content', 'wptexturize' );\nadd_filter( 'the_content', 'convert_smilies', 20 );\nadd_filter( 'the_content', 'wpautop' );\nadd_filter( 'the_content', 'shortcode_unautop' );\nadd_filter( 'the_content', 'prepend_attachment' );\nadd_filter( 'the_content', 'wp_make_content_images_responsive' );\n\nadd_filter( 'the_excerpt', 'wptexturize' );\nadd_filter( 'the_excerpt', 'convert_smilies' );\nadd_filter( 'the_excerpt', 'convert_chars' );\nadd_filter( 'the_excerpt', 'wpautop' );\nadd_filter( 'the_excerpt', 'shortcode_unautop' );\nadd_filter( 'get_the_excerpt', 'wp_trim_excerpt', 10, 2 );\n\nadd_filter( 'the_post_thumbnail_caption', 'wptexturize' );\nadd_filter( 'the_post_thumbnail_caption', 'convert_smilies' );\nadd_filter( 'the_post_thumbnail_caption', 'convert_chars' );\n\nadd_filter( 'comment_text', 'wptexturize' );\nadd_filter( 'comment_text', 'convert_chars' );\nadd_filter( 'comment_text', 'make_clickable', 9 );\nadd_filter( 'comment_text', 'force_balance_tags', 25 );\nadd_filter( 'comment_text', 'convert_smilies', 20 );\nadd_filter( 'comment_text', 'wpautop', 30 );\n\nadd_filter( 'comment_excerpt', 'convert_chars' );\n\nadd_filter( 'list_cats', 'wptexturize' );\n\nadd_filter( 'wp_sprintf', 'wp_sprintf_l', 10, 2 );\n\nadd_filter( 'widget_text', 'balanceTags' );\nadd_filter( 'widget_text_content', 'capital_P_dangit', 11 );\nadd_filter( 'widget_text_content', 'wptexturize' );\nadd_filter( 'widget_text_content', 'convert_smilies', 20 );\nadd_filter( 'widget_text_content', 'wpautop' );\nadd_filter( 'widget_text_content', 'shortcode_unautop' );\nadd_filter( 'widget_text_content', 'do_shortcode', 11 ); // Runs after wpautop(); note that $post global will be null when shortcodes run.\n\n// RSS filters\nadd_filter( 'the_title_rss', 'strip_tags' );\nadd_filter( 'the_title_rss', 'ent2ncr', 8 );\nadd_filter( 'the_title_rss', 'esc_html' );\nadd_filter( 'the_content_rss', 'ent2ncr', 8 );\nadd_filter( 'the_content_feed', 'wp_staticize_emoji' );\nadd_filter( 'the_content_feed', '_oembed_filter_feed_content' );\nadd_filter( 'the_excerpt_rss', 'convert_chars' );\nadd_filter( 'the_excerpt_rss', 'ent2ncr', 8 );\nadd_filter( 'comment_author_rss', 'ent2ncr', 8 );\nadd_filter( 'comment_text_rss', 'ent2ncr', 8 );\nadd_filter( 'comment_text_rss', 'esc_html' );\nadd_filter( 'comment_text_rss', 'wp_staticize_emoji' );\nadd_filter( 'bloginfo_rss', 'ent2ncr', 8 );\nadd_filter( 'the_author', 'ent2ncr', 8 );\nadd_filter( 'the_guid', 'esc_url' );\n\n// Email filters\nadd_filter( 'wp_mail', 'wp_staticize_emoji_for_email' );\n\n// Mark site as no longer fresh\nforeach ( array( 'publish_post', 'publish_page', 'wp_ajax_save-widget', 'wp_ajax_widgets-order', 'customize_save_after' ) as $action ) {\n\tadd_action( $action, '_delete_option_fresh_site', 0 );\n}\n\n// Misc filters\nadd_filter( 'option_ping_sites', 'privacy_ping_filter' );\nadd_filter( 'option_blog_charset', '_wp_specialchars' ); // IMPORTANT: This must not be wp_specialchars() or esc_html() or it'll cause an infinite loop\nadd_filter( 'option_blog_charset', '_canonical_charset' );\nadd_filter( 'option_home', '_config_wp_home' );\nadd_filter( 'option_siteurl', '_config_wp_siteurl' );\nadd_filter( 'tiny_mce_before_init', '_mce_set_direction' );\nadd_filter( 'teeny_mce_before_init', '_mce_set_direction' );\nadd_filter( 'pre_kses', 'wp_pre_kses_less_than' );\nadd_filter( 'pre_kses', 'wp_pre_kses_block_attributes', 10, 3 );\nadd_filter( 'sanitize_title', 'sanitize_title_with_dashes', 10, 3 );\nadd_action( 'check_comment_flood', 'check_comment_flood_db', 10, 4 );\nadd_filter( 'comment_flood_filter', 'wp_throttle_comment_flood', 10, 3 );\nadd_filter( 'pre_comment_content', 'wp_rel_ugc', 15 );\nadd_filter( 'comment_email', 'antispambot' );\nadd_filter( 'option_tag_base', '_wp_filter_taxonomy_base' );\nadd_filter( 'option_category_base', '_wp_filter_taxonomy_base' );\nadd_filter( 'the_posts', '_close_comments_for_old_posts', 10, 2 );\nadd_filter( 'comments_open', '_close_comments_for_old_post', 10, 2 );\nadd_filter( 'pings_open', '_close_comments_for_old_post', 10, 2 );\nadd_filter( 'editable_slug', 'urldecode' );\nadd_filter( 'editable_slug', 'esc_textarea' );\nadd_filter( 'nav_menu_meta_box_object', '_wp_nav_menu_meta_box_object' );\nadd_filter( 'pingback_ping_source_uri', 'pingback_ping_source_uri' );\nadd_filter( 'xmlrpc_pingback_error', 'xmlrpc_pingback_error' );\nadd_filter( 'title_save_pre', 'trim' );\n\nadd_action( 'transition_comment_status', '_clear_modified_cache_on_transition_comment_status', 10, 2 );\n\nadd_filter( 'http_request_host_is_external', 'allowed_http_request_hosts', 10, 2 );\n\n// REST API filters.\nadd_action( 'xmlrpc_rsd_apis', 'rest_output_rsd' );\nadd_action( 'wp_head', 'rest_output_link_wp_head', 10, 0 );\nadd_action( 'template_redirect', 'rest_output_link_header', 11, 0 );\nadd_action( 'auth_cookie_malformed', 'rest_cookie_collect_status' );\nadd_action( 'auth_cookie_expired', 'rest_cookie_collect_status' );\nadd_action( 'auth_cookie_bad_username', 'rest_cookie_collect_status' );\nadd_action( 'auth_cookie_bad_hash', 'rest_cookie_collect_status' );\nadd_action( 'auth_cookie_valid', 'rest_cookie_collect_status' );\nadd_filter( 'rest_authentication_errors', 'rest_cookie_check_errors', 100 );\n\n// Actions\nadd_action( 'wp_head', '_wp_render_title_tag', 1 );\nadd_action( 'wp_head', 'wp_enqueue_scripts', 1 );\nadd_action( 'wp_head', 'wp_resource_hints', 2 );\nadd_action( 'wp_head', 'feed_links', 2 );\nadd_action( 'wp_head', 'feed_links_extra', 3 );\nadd_action( 'wp_head', 'rsd_link' );\nadd_action( 'wp_head', 'wlwmanifest_link' );\nadd_action( 'wp_head', 'adjacent_posts_rel_link_wp_head', 10, 0 );\nadd_action( 'wp_head', 'locale_stylesheet' );\nadd_action( 'publish_future_post', 'check_and_publish_future_post', 10, 1 );\nadd_action( 'wp_head', 'noindex', 1 );\nadd_action( 'wp_head', 'print_emoji_detection_script', 7 );\nadd_action( 'wp_head', 'wp_print_styles', 8 );\nadd_action( 'wp_head', 'wp_print_head_scripts', 9 );\nadd_action( 'wp_head', 'wp_generator' );\nadd_action( 'wp_head', 'rel_canonical' );\nadd_action( 'wp_head', 'wp_shortlink_wp_head', 10, 0 );\nadd_action( 'wp_head', 'wp_custom_css_cb', 101 );\nadd_action( 'wp_head', 'wp_site_icon', 99 );\nadd_action( 'wp_footer', 'wp_print_footer_scripts', 20 );\nadd_action( 'template_redirect', 'wp_shortlink_header', 11, 0 );\nadd_action( 'wp_print_footer_scripts', '_wp_footer_scripts' );\nadd_action( 'init', 'check_theme_switched', 99 );\nadd_action( 'after_switch_theme', '_wp_menus_changed' );\nadd_action( 'after_switch_theme', '_wp_sidebars_changed' );\nadd_action( 'wp_print_styles', 'print_emoji_styles' );\n\nif ( isset( $_GET['replytocom'] ) ) {\n\tadd_action( 'wp_head', 'wp_no_robots' );\n}\n\n// Login actions\nadd_filter( 'login_head', 'wp_resource_hints', 8 );\nadd_action( 'login_head', 'wp_print_head_scripts', 9 );\nadd_action( 'login_head', 'print_admin_styles', 9 );\nadd_action( 'login_head', 'wp_site_icon', 99 );\nadd_action( 'login_footer', 'wp_print_footer_scripts', 20 );\nadd_action( 'login_init', 'send_frame_options_header', 10, 0 );\n\n// Feed Generator Tags\nforeach ( array( 'rss2_head', 'commentsrss2_head', 'rss_head', 'rdf_header', 'atom_head', 'comments_atom_head', 'opml_head', 'app_head' ) as $action ) {\n\tadd_action( $action, 'the_generator' );\n}\n\n// Feed Site Icon\nadd_action( 'atom_head', 'atom_site_icon' );\nadd_action( 'rss2_head', 'rss2_site_icon' );\n\n\n// WP Cron\nif ( ! defined( 'DOING_CRON' ) ) {\n\tadd_action( 'init', 'wp_cron' );\n}\n\n// 2 Actions 2 Furious\nadd_action( 'do_feed_rdf', 'do_feed_rdf', 10, 0 );\nadd_action( 'do_feed_rss', 'do_feed_rss', 10, 0 );\nadd_action( 'do_feed_rss2', 'do_feed_rss2', 10, 1 );\nadd_action( 'do_feed_atom', 'do_feed_atom', 10, 1 );\nadd_action( 'do_pings', 'do_all_pings', 10, 0 );\nadd_action( 'do_robots', 'do_robots' );\nadd_action( 'set_comment_cookies', 'wp_set_comment_cookies', 10, 3 );\nadd_action( 'sanitize_comment_cookies', 'sanitize_comment_cookies' );\nadd_action( 'admin_print_scripts', 'print_emoji_detection_script' );\nadd_action( 'admin_print_scripts', 'print_head_scripts', 20 );\nadd_action( 'admin_print_footer_scripts', '_wp_footer_scripts' );\nadd_action( 'admin_print_styles', 'print_emoji_styles' );\nadd_action( 'admin_print_styles', 'print_admin_styles', 20 );\nadd_action( 'init', 'smilies_init', 5 );\nadd_action( 'plugins_loaded', 'wp_maybe_load_widgets', 0 );\nadd_action( 'plugins_loaded', 'wp_maybe_load_embeds', 0 );\nadd_action( 'shutdown', 'wp_ob_end_flush_all', 1 );\n// Create a revision whenever a post is updated.\nadd_action( 'post_updated', 'wp_save_post_revision', 10, 1 );\nadd_action( 'publish_post', '_publish_post_hook', 5, 1 );\nadd_action( 'transition_post_status', '_transition_post_status', 5, 3 );\nadd_action( 'transition_post_status', '_update_term_count_on_transition_post_status', 10, 3 );\nadd_action( 'comment_form', 'wp_comment_form_unfiltered_html_nonce' );\nadd_action( 'admin_init', 'send_frame_options_header', 10, 0 );\nadd_action( 'welcome_panel', 'wp_welcome_panel' );\n\n// Privacy\nadd_action( 'user_request_action_confirmed', '_wp_privacy_account_request_confirmed' );\nadd_action( 'user_request_action_confirmed', '_wp_privacy_send_request_confirmation_notification', 12 ); // After request marked as completed.\nadd_filter( 'wp_privacy_personal_data_exporters', 'wp_register_comment_personal_data_exporter' );\nadd_filter( 'wp_privacy_personal_data_exporters', 'wp_register_media_personal_data_exporter' );\nadd_filter( 'wp_privacy_personal_data_exporters', 'wp_register_user_personal_data_exporter', 1 );\nadd_filter( 'wp_privacy_personal_data_erasers', 'wp_register_comment_personal_data_eraser' );\nadd_action( 'init', 'wp_schedule_delete_old_privacy_export_files' );\nadd_action( 'wp_privacy_delete_old_export_files', 'wp_privacy_delete_old_export_files' );\n\n// Cron tasks\nadd_action( 'wp_scheduled_delete', 'wp_scheduled_delete' );\nadd_action( 'wp_scheduled_auto_draft_delete', 'wp_delete_auto_drafts' );\nadd_action( 'importer_scheduled_cleanup', 'wp_delete_attachment' );\nadd_action( 'upgrader_scheduled_cleanup', 'wp_delete_attachment' );\nadd_action( 'delete_expired_transients', 'delete_expired_transients' );\n\n// Navigation menu actions\nadd_action( 'delete_post', '_wp_delete_post_menu_item' );\nadd_action( 'delete_term', '_wp_delete_tax_menu_item', 10, 3 );\nadd_action( 'transition_post_status', '_wp_auto_add_pages_to_menu', 10, 3 );\nadd_action( 'delete_post', '_wp_delete_customize_changeset_dependent_auto_drafts' );\n\n// Post Thumbnail CSS class filtering\nadd_action( 'begin_fetch_post_thumbnail_html', '_wp_post_thumbnail_class_filter_add' );\nadd_action( 'end_fetch_post_thumbnail_html', '_wp_post_thumbnail_class_filter_remove' );\n\n// Redirect Old Slugs\nadd_action( 'template_redirect', 'wp_old_slug_redirect' );\nadd_action( 'post_updated', 'wp_check_for_changed_slugs', 12, 3 );\nadd_action( 'attachment_updated', 'wp_check_for_changed_slugs', 12, 3 );\n\n// Redirect Old Dates\nadd_action( 'post_updated', 'wp_check_for_changed_dates', 12, 3 );\nadd_action( 'attachment_updated', 'wp_check_for_changed_dates', 12, 3 );\n\n// Nonce check for Post Previews\nadd_action( 'init', '_show_post_preview' );\n\n// Output JS to reset window.name for previews\nadd_action( 'wp_head', 'wp_post_preview_js', 1 );\n\n// Timezone\nadd_filter( 'pre_option_gmt_offset', 'wp_timezone_override_offset' );\n\n// Admin Color Schemes\nadd_action( 'admin_init', 'register_admin_color_schemes', 1 );\nadd_action( 'admin_color_scheme_picker', 'admin_color_scheme_picker' );\n\n// If the upgrade hasn't run yet, assume link manager is used.\nadd_filter( 'default_option_link_manager_enabled', '__return_true' );\n\n// This option no longer exists; tell plugins we always support auto-embedding.\nadd_filter( 'pre_option_embed_autourls', '__return_true' );\n\n// Default settings for heartbeat\nadd_filter( 'heartbeat_settings', 'wp_heartbeat_settings' );\n\n// Check if the user is logged out\nadd_action( 'admin_enqueue_scripts', 'wp_auth_check_load' );\nadd_filter( 'heartbeat_send', 'wp_auth_check' );\nadd_filter( 'heartbeat_nopriv_send', 'wp_auth_check' );\n\n// Default authentication filters\nadd_filter( 'authenticate', 'wp_authenticate_username_password', 20, 3 );\nadd_filter( 'authenticate', 'wp_authenticate_email_password', 20, 3 );\nadd_filter( 'authenticate', 'wp_authenticate_spam_check', 99 );\nadd_filter( 'determine_current_user', 'wp_validate_auth_cookie' );\nadd_filter( 'determine_current_user', 'wp_validate_logged_in_cookie', 20 );\n\n// Split term updates.\nadd_action( 'admin_init', '_wp_check_for_scheduled_split_terms' );\nadd_action( 'split_shared_term', '_wp_check_split_default_terms', 10, 4 );\nadd_action( 'split_shared_term', '_wp_check_split_terms_in_menus', 10, 4 );\nadd_action( 'split_shared_term', '_wp_check_split_nav_menu_terms', 10, 4 );\nadd_action( 'wp_split_shared_term_batch', '_wp_batch_split_terms' );\n\n// Email notifications.\nadd_action( 'comment_post', 'wp_new_comment_notify_moderator' );\nadd_action( 'comment_post', 'wp_new_comment_notify_postauthor' );\nadd_action( 'after_password_reset', 'wp_password_change_notification' );\nadd_action( 'register_new_user', 'wp_send_new_user_notifications' );\nadd_action( 'edit_user_created_user', 'wp_send_new_user_notifications', 10, 2 );\n\n// REST API actions.\nadd_action( 'init', 'rest_api_init' );\nadd_action( 'rest_api_init', 'rest_api_default_filters', 10, 1 );\nadd_action( 'rest_api_init', 'register_initial_settings', 10 );\nadd_action( 'rest_api_init', 'create_initial_rest_routes', 99 );\nadd_action( 'parse_request', 'rest_api_loaded' );\n\n/**\n * Filters formerly mixed into wp-includes\n */\n// Theme\nadd_action( 'wp_loaded', '_custom_header_background_just_in_time' );\nadd_action( 'wp_head', '_custom_logo_header_styles' );\nadd_action( 'plugins_loaded', '_wp_customize_include' );\nadd_action( 'transition_post_status', '_wp_customize_publish_changeset', 10, 3 );\nadd_action( 'admin_enqueue_scripts', '_wp_customize_loader_settings' );\nadd_action( 'delete_attachment', '_delete_attachment_theme_mod' );\nadd_action( 'transition_post_status', '_wp_keep_alive_customize_changeset_dependent_auto_drafts', 20, 3 );\n\n// Calendar widget cache\nadd_action( 'save_post', 'delete_get_calendar_cache' );\nadd_action( 'delete_post', 'delete_get_calendar_cache' );\nadd_action( 'update_option_start_of_week', 'delete_get_calendar_cache' );\nadd_action( 'update_option_gmt_offset', 'delete_get_calendar_cache' );\n\n// Author\nadd_action( 'transition_post_status', '__clear_multi_author_cache' );\n\n// Post\nadd_action( 'init', 'create_initial_post_types', 0 ); // highest priority\nadd_action( 'admin_menu', '_add_post_type_submenus' );\nadd_action( 'before_delete_post', '_reset_front_page_settings_for_post' );\nadd_action( 'wp_trash_post', '_reset_front_page_settings_for_post' );\nadd_action( 'change_locale', 'create_initial_post_types' );\n\n// Post Formats\nadd_filter( 'request', '_post_format_request' );\nadd_filter( 'term_link', '_post_format_link', 10, 3 );\nadd_filter( 'get_post_format', '_post_format_get_term' );\nadd_filter( 'get_terms', '_post_format_get_terms', 10, 3 );\nadd_filter( 'wp_get_object_terms', '_post_format_wp_get_object_terms' );\n\n// KSES\nadd_action( 'init', 'kses_init' );\nadd_action( 'set_current_user', 'kses_init' );\n\n// Script Loader\nadd_action( 'wp_default_scripts', 'wp_default_scripts' );\nadd_action( 'wp_default_scripts', 'wp_default_packages' );\n\nadd_action( 'wp_enqueue_scripts', 'wp_localize_jquery_ui_datepicker', 1000 );\nadd_action( 'admin_enqueue_scripts', 'wp_localize_jquery_ui_datepicker', 1000 );\nadd_action( 'wp_enqueue_scripts', 'wp_common_block_scripts_and_styles' );\nadd_action( 'admin_enqueue_scripts', 'wp_common_block_scripts_and_styles' );\nadd_action( 'enqueue_block_assets', 'wp_enqueue_registered_block_scripts_and_styles' );\nadd_action( 'enqueue_block_editor_assets', 'wp_enqueue_registered_block_scripts_and_styles' );\nadd_action( 'admin_print_scripts-index.php', 'wp_localize_community_events' );\nadd_filter( 'wp_print_scripts', 'wp_just_in_time_script_localization' );\nadd_filter( 'print_scripts_array', 'wp_prototype_before_jquery' );\nadd_filter( 'customize_controls_print_styles', 'wp_resource_hints', 1 );\nadd_action( 'enqueue_block_assets', 'enqueue_block_styles_assets', 30 );\nadd_action( 'enqueue_block_editor_assets', 'enqueue_editor_block_styles_assets' );\n\nadd_action( 'wp_default_styles', 'wp_default_styles' );\nadd_filter( 'style_loader_src', 'wp_style_loader_src', 10, 2 );\n\n// Taxonomy\nadd_action( 'init', 'create_initial_taxonomies', 0 ); // highest priority\nadd_action( 'change_locale', 'create_initial_taxonomies' );\n\n// Canonical\nadd_action( 'template_redirect', 'redirect_canonical' );\nadd_action( 'template_redirect', 'wp_redirect_admin_locations', 1000 );\n\n// Shortcodes\nadd_filter( 'the_content', 'do_shortcode', 11 ); // AFTER wpautop()\n\n// Media\nadd_action( 'wp_playlist_scripts', 'wp_playlist_scripts' );\nadd_action( 'customize_controls_enqueue_scripts', 'wp_plupload_default_settings' );\nadd_action( 'plugins_loaded', '_wp_add_additional_image_sizes', 0 );\n\n// Nav menu\nadd_filter( 'nav_menu_item_id', '_nav_menu_item_id_use_once', 10, 2 );\n\n// Widgets\nadd_action( 'init', 'wp_widgets_init', 1 );\n\n// Admin Bar\n// Don't remove. Wrong way to disable.\nadd_action( 'template_redirect', '_wp_admin_bar_init', 0 );\nadd_action( 'admin_init', '_wp_admin_bar_init' );\nadd_action( 'before_signup_header', '_wp_admin_bar_init' );\nadd_action( 'activate_header', '_wp_admin_bar_init' );\nadd_action( 'wp_footer', 'wp_admin_bar_render', 1000 );\nadd_action( 'in_admin_header', 'wp_admin_bar_render', 0 );\n\n// Former admin filters that can also be hooked on the front end\nadd_action( 'media_buttons', 'media_buttons' );\nadd_filter( 'image_send_to_editor', 'image_add_caption', 20, 8 );\nadd_filter( 'media_send_to_editor', 'image_media_send_to_editor', 10, 3 );\n\n// Embeds\nadd_action( 'rest_api_init', 'wp_oembed_register_route' );\nadd_filter( 'rest_pre_serve_request', '_oembed_rest_pre_serve_request', 10, 4 );\n\nadd_action( 'wp_head', 'wp_oembed_add_discovery_links' );\nadd_action( 'wp_head', 'wp_oembed_add_host_js' );\n\nadd_action( 'embed_head', 'enqueue_embed_scripts', 1 );\nadd_action( 'embed_head', 'print_emoji_detection_script' );\nadd_action( 'embed_head', 'print_embed_styles' );\nadd_action( 'embed_head', 'wp_print_head_scripts', 20 );\nadd_action( 'embed_head', 'wp_print_styles', 20 );\nadd_action( 'embed_head', 'wp_no_robots' );\nadd_action( 'embed_head', 'rel_canonical' );\nadd_action( 'embed_head', 'locale_stylesheet', 30 );\n\nadd_action( 'embed_content_meta', 'print_embed_comments_button' );\nadd_action( 'embed_content_meta', 'print_embed_sharing_button' );\n\nadd_action( 'embed_footer', 'print_embed_sharing_dialog' );\nadd_action( 'embed_footer', 'print_embed_scripts' );\nadd_action( 'embed_footer', 'wp_print_footer_scripts', 20 );\n\nadd_filter( 'excerpt_more', 'wp_embed_excerpt_more', 20 );\nadd_filter( 'the_excerpt_embed', 'wptexturize' );\nadd_filter( 'the_excerpt_embed', 'convert_chars' );\nadd_filter( 'the_excerpt_embed', 'wpautop' );\nadd_filter( 'the_excerpt_embed', 'shortcode_unautop' );\nadd_filter( 'the_excerpt_embed', 'wp_embed_excerpt_attachment' );\n\nadd_filter( 'oembed_dataparse', 'wp_filter_oembed_result', 10, 3 );\nadd_filter( 'oembed_dataparse', 'wp_filter_oembed_iframe_title_attribute', 20, 3 );\nadd_filter( 'oembed_response_data', 'get_oembed_response_data_rich', 10, 4 );\nadd_filter( 'pre_oembed_result', 'wp_filter_pre_oembed_result', 10, 3 );\n\n// Capabilities\nadd_filter( 'user_has_cap', 'wp_maybe_grant_install_languages_cap', 1 );\nadd_filter( 'user_has_cap', 'wp_maybe_grant_resume_extensions_caps', 1 );\nadd_filter( 'user_has_cap', 'wp_maybe_grant_site_health_caps', 1, 4 );\n\nunset( $filter, $action );\n", "<?php\n/**\n * Main WordPress Formatting API.\n *\n * Handles many functions for formatting output.\n *\n * @package WordPress\n */\n\n/**\n * Replaces common plain text characters into formatted entities\n *\n * As an example,\n *\n *     'cause today's effort makes it worth tomorrow's \"holiday\" ...\n *\n * Becomes:\n *\n *     &#8217;cause today&#8217;s effort makes it worth tomorrow&#8217;s &#8220;holiday&#8221; &#8230;\n *\n * Code within certain html blocks are skipped.\n *\n * Do not use this function before the {@see 'init'} action hook; everything will break.\n *\n * @since 0.71\n *\n * @global array $wp_cockneyreplace Array of formatted entities for certain common phrases\n * @global array $shortcode_tags\n * @staticvar array  $static_characters\n * @staticvar array  $static_replacements\n * @staticvar array  $dynamic_characters\n * @staticvar array  $dynamic_replacements\n * @staticvar array  $default_no_texturize_tags\n * @staticvar array  $default_no_texturize_shortcodes\n * @staticvar bool   $run_texturize\n * @staticvar string $apos\n * @staticvar string $prime\n * @staticvar string $double_prime\n * @staticvar string $opening_quote\n * @staticvar string $closing_quote\n * @staticvar string $opening_single_quote\n * @staticvar string $closing_single_quote\n * @staticvar string $open_q_flag\n * @staticvar string $open_sq_flag\n * @staticvar string $apos_flag\n *\n * @param string $text The text to be formatted\n * @param bool   $reset Set to true for unit testing. Translated patterns will reset.\n * @return string The string replaced with html entities\n */\nfunction wptexturize( $text, $reset = false ) {\n\tglobal $wp_cockneyreplace, $shortcode_tags;\n\tstatic $static_characters            = null,\n\t\t$static_replacements             = null,\n\t\t$dynamic_characters              = null,\n\t\t$dynamic_replacements            = null,\n\t\t$default_no_texturize_tags       = null,\n\t\t$default_no_texturize_shortcodes = null,\n\t\t$run_texturize                   = true,\n\t\t$apos                            = null,\n\t\t$prime                           = null,\n\t\t$double_prime                    = null,\n\t\t$opening_quote                   = null,\n\t\t$closing_quote                   = null,\n\t\t$opening_single_quote            = null,\n\t\t$closing_single_quote            = null,\n\t\t$open_q_flag                     = '<!--oq-->',\n\t\t$open_sq_flag                    = '<!--osq-->',\n\t\t$apos_flag                       = '<!--apos-->';\n\n\t// If there's nothing to do, just stop.\n\tif ( empty( $text ) || false === $run_texturize ) {\n\t\treturn $text;\n\t}\n\n\t// Set up static variables. Run once only.\n\tif ( $reset || ! isset( $static_characters ) ) {\n\t\t/**\n\t\t * Filters whether to skip running wptexturize().\n\t\t *\n\t\t * Passing false to the filter will effectively short-circuit wptexturize().\n\t\t * returning the original text passed to the function instead.\n\t\t *\n\t\t * The filter runs only once, the first time wptexturize() is called.\n\t\t *\n\t\t * @since 4.0.0\n\t\t *\n\t\t * @see wptexturize()\n\t\t *\n\t\t * @param bool $run_texturize Whether to short-circuit wptexturize().\n\t\t */\n\t\t$run_texturize = apply_filters( 'run_wptexturize', $run_texturize );\n\t\tif ( false === $run_texturize ) {\n\t\t\treturn $text;\n\t\t}\n\n\t\t/* translators: Opening curly double quote. */\n\t\t$opening_quote = _x( '&#8220;', 'opening curly double quote' );\n\t\t/* translators: Closing curly double quote. */\n\t\t$closing_quote = _x( '&#8221;', 'closing curly double quote' );\n\n\t\t/* translators: Apostrophe, for example in 'cause or can't. */\n\t\t$apos = _x( '&#8217;', 'apostrophe' );\n\n\t\t/* translators: Prime, for example in 9' (nine feet). */\n\t\t$prime = _x( '&#8242;', 'prime' );\n\t\t/* translators: Double prime, for example in 9\" (nine inches). */\n\t\t$double_prime = _x( '&#8243;', 'double prime' );\n\n\t\t/* translators: Opening curly single quote. */\n\t\t$opening_single_quote = _x( '&#8216;', 'opening curly single quote' );\n\t\t/* translators: Closing curly single quote. */\n\t\t$closing_single_quote = _x( '&#8217;', 'closing curly single quote' );\n\n\t\t/* translators: En dash. */\n\t\t$en_dash = _x( '&#8211;', 'en dash' );\n\t\t/* translators: Em dash. */\n\t\t$em_dash = _x( '&#8212;', 'em dash' );\n\n\t\t$default_no_texturize_tags       = array( 'pre', 'code', 'kbd', 'style', 'script', 'tt' );\n\t\t$default_no_texturize_shortcodes = array( 'code' );\n\n\t\t// if a plugin has provided an autocorrect array, use it\n\t\tif ( isset( $wp_cockneyreplace ) ) {\n\t\t\t$cockney        = array_keys( $wp_cockneyreplace );\n\t\t\t$cockneyreplace = array_values( $wp_cockneyreplace );\n\t\t} else {\n\t\t\t/*\n\t\t\t * translators: This is a comma-separated list of words that defy the syntax of quotations in normal use,\n\t\t\t * for example...  'We do not have enough words yet' ... is a typical quoted phrase.  But when we write\n\t\t\t * lines of code 'til we have enough of 'em, then we need to insert apostrophes instead of quotes.\n\t\t\t */\n\t\t\t$cockney = explode(\n\t\t\t\t',',\n\t\t\t\t_x(\n\t\t\t\t\t\"'tain't,'twere,'twas,'tis,'twill,'til,'bout,'nuff,'round,'cause,'em\",\n\t\t\t\t\t'Comma-separated list of words to texturize in your language'\n\t\t\t\t)\n\t\t\t);\n\n\t\t\t$cockneyreplace = explode(\n\t\t\t\t',',\n\t\t\t\t_x(\n\t\t\t\t\t'&#8217;tain&#8217;t,&#8217;twere,&#8217;twas,&#8217;tis,&#8217;twill,&#8217;til,&#8217;bout,&#8217;nuff,&#8217;round,&#8217;cause,&#8217;em',\n\t\t\t\t\t'Comma-separated list of replacement words in your language'\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t$static_characters   = array_merge( array( '...', '``', '\\'\\'', ' (tm)' ), $cockney );\n\t\t$static_replacements = array_merge( array( '&#8230;', $opening_quote, $closing_quote, ' &#8482;' ), $cockneyreplace );\n\n\t\t// Pattern-based replacements of characters.\n\t\t// Sort the remaining patterns into several arrays for performance tuning.\n\t\t$dynamic_characters   = array(\n\t\t\t'apos'  => array(),\n\t\t\t'quote' => array(),\n\t\t\t'dash'  => array(),\n\t\t);\n\t\t$dynamic_replacements = array(\n\t\t\t'apos'  => array(),\n\t\t\t'quote' => array(),\n\t\t\t'dash'  => array(),\n\t\t);\n\t\t$dynamic              = array();\n\t\t$spaces               = wp_spaces_regexp();\n\n\t\t// '99' and '99\" are ambiguous among other patterns; assume it's an abbreviated year at the end of a quotation.\n\t\tif ( \"'\" !== $apos || \"'\" !== $closing_single_quote ) {\n\t\t\t$dynamic[ '/\\'(\\d\\d)\\'(?=\\Z|[.,:;!?)}\\-\\]]|&gt;|' . $spaces . ')/' ] = $apos_flag . '$1' . $closing_single_quote;\n\t\t}\n\t\tif ( \"'\" !== $apos || '\"' !== $closing_quote ) {\n\t\t\t$dynamic[ '/\\'(\\d\\d)\"(?=\\Z|[.,:;!?)}\\-\\]]|&gt;|' . $spaces . ')/' ] = $apos_flag . '$1' . $closing_quote;\n\t\t}\n\n\t\t// '99 '99s '99's (apostrophe)  But never '9 or '99% or '999 or '99.0.\n\t\tif ( \"'\" !== $apos ) {\n\t\t\t$dynamic['/\\'(?=\\d\\d(?:\\Z|(?![%\\d]|[.,]\\d)))/'] = $apos_flag;\n\t\t}\n\n\t\t// Quoted Numbers like '0.42'\n\t\tif ( \"'\" !== $opening_single_quote && \"'\" !== $closing_single_quote ) {\n\t\t\t$dynamic[ '/(?<=\\A|' . $spaces . ')\\'(\\d[.,\\d]*)\\'/' ] = $open_sq_flag . '$1' . $closing_single_quote;\n\t\t}\n\n\t\t// Single quote at start, or preceded by (, {, <, [, \", -, or spaces.\n\t\tif ( \"'\" !== $opening_single_quote ) {\n\t\t\t$dynamic[ '/(?<=\\A|[([{\"\\-]|&lt;|' . $spaces . ')\\'/' ] = $open_sq_flag;\n\t\t}\n\n\t\t// Apostrophe in a word.  No spaces, double apostrophes, or other punctuation.\n\t\tif ( \"'\" !== $apos ) {\n\t\t\t$dynamic[ '/(?<!' . $spaces . ')\\'(?!\\Z|[.,:;!?\"\\'(){}[\\]\\-]|&[lg]t;|' . $spaces . ')/' ] = $apos_flag;\n\t\t}\n\n\t\t$dynamic_characters['apos']   = array_keys( $dynamic );\n\t\t$dynamic_replacements['apos'] = array_values( $dynamic );\n\t\t$dynamic                      = array();\n\n\t\t// Quoted Numbers like \"42\"\n\t\tif ( '\"' !== $opening_quote && '\"' !== $closing_quote ) {\n\t\t\t$dynamic[ '/(?<=\\A|' . $spaces . ')\"(\\d[.,\\d]*)\"/' ] = $open_q_flag . '$1' . $closing_quote;\n\t\t}\n\n\t\t// Double quote at start, or preceded by (, {, <, [, -, or spaces, and not followed by spaces.\n\t\tif ( '\"' !== $opening_quote ) {\n\t\t\t$dynamic[ '/(?<=\\A|[([{\\-]|&lt;|' . $spaces . ')\"(?!' . $spaces . ')/' ] = $open_q_flag;\n\t\t}\n\n\t\t$dynamic_characters['quote']   = array_keys( $dynamic );\n\t\t$dynamic_replacements['quote'] = array_values( $dynamic );\n\t\t$dynamic                       = array();\n\n\t\t// Dashes and spaces\n\t\t$dynamic['/---/'] = $em_dash;\n\t\t$dynamic[ '/(?<=^|' . $spaces . ')--(?=$|' . $spaces . ')/' ] = $em_dash;\n\t\t$dynamic['/(?<!xn)--/']                                       = $en_dash;\n\t\t$dynamic[ '/(?<=^|' . $spaces . ')-(?=$|' . $spaces . ')/' ]  = $en_dash;\n\n\t\t$dynamic_characters['dash']   = array_keys( $dynamic );\n\t\t$dynamic_replacements['dash'] = array_values( $dynamic );\n\t}\n\n\t// Must do this every time in case plugins use these filters in a context sensitive manner\n\t/**\n\t * Filters the list of HTML elements not to texturize.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param array $default_no_texturize_tags An array of HTML element names.\n\t */\n\t$no_texturize_tags = apply_filters( 'no_texturize_tags', $default_no_texturize_tags );\n\t/**\n\t * Filters the list of shortcodes not to texturize.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param array $default_no_texturize_shortcodes An array of shortcode names.\n\t */\n\t$no_texturize_shortcodes = apply_filters( 'no_texturize_shortcodes', $default_no_texturize_shortcodes );\n\n\t$no_texturize_tags_stack       = array();\n\t$no_texturize_shortcodes_stack = array();\n\n\t// Look for shortcodes and HTML elements.\n\n\tpreg_match_all( '@\\[/?([^<>&/\\[\\]\\x00-\\x20=]++)@', $text, $matches );\n\t$tagnames         = array_intersect( array_keys( $shortcode_tags ), $matches[1] );\n\t$found_shortcodes = ! empty( $tagnames );\n\t$shortcode_regex  = $found_shortcodes ? _get_wptexturize_shortcode_regex( $tagnames ) : '';\n\t$regex            = _get_wptexturize_split_regex( $shortcode_regex );\n\n\t$textarr = preg_split( $regex, $text, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY );\n\n\tforeach ( $textarr as &$curl ) {\n\t\t// Only call _wptexturize_pushpop_element if $curl is a delimiter.\n\t\t$first = $curl[0];\n\t\tif ( '<' === $first ) {\n\t\t\tif ( '<!--' === substr( $curl, 0, 4 ) ) {\n\t\t\t\t// This is an HTML comment delimiter.\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\t// This is an HTML element delimiter.\n\n\t\t\t\t// Replace each & with &#038; unless it already looks like an entity.\n\t\t\t\t$curl = preg_replace( '/&(?!#(?:\\d+|x[a-f0-9]+);|[a-z1-4]{1,8};)/i', '&#038;', $curl );\n\n\t\t\t\t_wptexturize_pushpop_element( $curl, $no_texturize_tags_stack, $no_texturize_tags );\n\t\t\t}\n\t\t} elseif ( '' === trim( $curl ) ) {\n\t\t\t// This is a newline between delimiters.  Performance improves when we check this.\n\t\t\tcontinue;\n\n\t\t} elseif ( '[' === $first && $found_shortcodes && 1 === preg_match( '/^' . $shortcode_regex . '$/', $curl ) ) {\n\t\t\t// This is a shortcode delimiter.\n\n\t\t\tif ( '[[' !== substr( $curl, 0, 2 ) && ']]' !== substr( $curl, -2 ) ) {\n\t\t\t\t// Looks like a normal shortcode.\n\t\t\t\t_wptexturize_pushpop_element( $curl, $no_texturize_shortcodes_stack, $no_texturize_shortcodes );\n\t\t\t} else {\n\t\t\t\t// Looks like an escaped shortcode.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t} elseif ( empty( $no_texturize_shortcodes_stack ) && empty( $no_texturize_tags_stack ) ) {\n\t\t\t// This is neither a delimiter, nor is this content inside of no_texturize pairs.  Do texturize.\n\n\t\t\t$curl = str_replace( $static_characters, $static_replacements, $curl );\n\n\t\t\tif ( false !== strpos( $curl, \"'\" ) ) {\n\t\t\t\t$curl = preg_replace( $dynamic_characters['apos'], $dynamic_replacements['apos'], $curl );\n\t\t\t\t$curl = wptexturize_primes( $curl, \"'\", $prime, $open_sq_flag, $closing_single_quote );\n\t\t\t\t$curl = str_replace( $apos_flag, $apos, $curl );\n\t\t\t\t$curl = str_replace( $open_sq_flag, $opening_single_quote, $curl );\n\t\t\t}\n\t\t\tif ( false !== strpos( $curl, '\"' ) ) {\n\t\t\t\t$curl = preg_replace( $dynamic_characters['quote'], $dynamic_replacements['quote'], $curl );\n\t\t\t\t$curl = wptexturize_primes( $curl, '\"', $double_prime, $open_q_flag, $closing_quote );\n\t\t\t\t$curl = str_replace( $open_q_flag, $opening_quote, $curl );\n\t\t\t}\n\t\t\tif ( false !== strpos( $curl, '-' ) ) {\n\t\t\t\t$curl = preg_replace( $dynamic_characters['dash'], $dynamic_replacements['dash'], $curl );\n\t\t\t}\n\n\t\t\t// 9x9 (times), but never 0x9999\n\t\t\tif ( 1 === preg_match( '/(?<=\\d)x\\d/', $curl ) ) {\n\t\t\t\t// Searching for a digit is 10 times more expensive than for the x, so we avoid doing this one!\n\t\t\t\t$curl = preg_replace( '/\\b(\\d(?(?<=0)[\\d\\.,]+|[\\d\\.,]*))x(\\d[\\d\\.,]*)\\b/', '$1&#215;$2', $curl );\n\t\t\t}\n\n\t\t\t// Replace each & with &#038; unless it already looks like an entity.\n\t\t\t$curl = preg_replace( '/&(?!#(?:\\d+|x[a-f0-9]+);|[a-z1-4]{1,8};)/i', '&#038;', $curl );\n\t\t}\n\t}\n\n\treturn implode( '', $textarr );\n}\n\n/**\n * Implements a logic tree to determine whether or not \"7'.\" represents seven feet,\n * then converts the special char into either a prime char or a closing quote char.\n *\n * @since 4.3.0\n *\n * @param string $haystack    The plain text to be searched.\n * @param string $needle      The character to search for such as ' or \".\n * @param string $prime       The prime char to use for replacement.\n * @param string $open_quote  The opening quote char. Opening quote replacement must be\n *                            accomplished already.\n * @param string $close_quote The closing quote char to use for replacement.\n * @return string The $haystack value after primes and quotes replacements.\n */\nfunction wptexturize_primes( $haystack, $needle, $prime, $open_quote, $close_quote ) {\n\t$spaces           = wp_spaces_regexp();\n\t$flag             = '<!--wp-prime-or-quote-->';\n\t$quote_pattern    = \"/$needle(?=\\\\Z|[.,:;!?)}\\\\-\\\\]]|&gt;|\" . $spaces . ')/';\n\t$prime_pattern    = \"/(?<=\\\\d)$needle/\";\n\t$flag_after_digit = \"/(?<=\\\\d)$flag/\";\n\t$flag_no_digit    = \"/(?<!\\\\d)$flag/\";\n\n\t$sentences = explode( $open_quote, $haystack );\n\n\tforeach ( $sentences as $key => &$sentence ) {\n\t\tif ( false === strpos( $sentence, $needle ) ) {\n\t\t\tcontinue;\n\t\t} elseif ( 0 !== $key && 0 === substr_count( $sentence, $close_quote ) ) {\n\t\t\t$sentence = preg_replace( $quote_pattern, $flag, $sentence, -1, $count );\n\t\t\tif ( $count > 1 ) {\n\t\t\t\t// This sentence appears to have multiple closing quotes.  Attempt Vulcan logic.\n\t\t\t\t$sentence = preg_replace( $flag_no_digit, $close_quote, $sentence, -1, $count2 );\n\t\t\t\tif ( 0 === $count2 ) {\n\t\t\t\t\t// Try looking for a quote followed by a period.\n\t\t\t\t\t$count2 = substr_count( $sentence, \"$flag.\" );\n\t\t\t\t\tif ( $count2 > 0 ) {\n\t\t\t\t\t\t// Assume the rightmost quote-period match is the end of quotation.\n\t\t\t\t\t\t$pos = strrpos( $sentence, \"$flag.\" );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// When all else fails, make the rightmost candidate a closing quote.\n\t\t\t\t\t\t// This is most likely to be problematic in the context of bug #18549.\n\t\t\t\t\t\t$pos = strrpos( $sentence, $flag );\n\t\t\t\t\t}\n\t\t\t\t\t$sentence = substr_replace( $sentence, $close_quote, $pos, strlen( $flag ) );\n\t\t\t\t}\n\t\t\t\t// Use conventional replacement on any remaining primes and quotes.\n\t\t\t\t$sentence = preg_replace( $prime_pattern, $prime, $sentence );\n\t\t\t\t$sentence = preg_replace( $flag_after_digit, $prime, $sentence );\n\t\t\t\t$sentence = str_replace( $flag, $close_quote, $sentence );\n\t\t\t} elseif ( 1 == $count ) {\n\t\t\t\t// Found only one closing quote candidate, so give it priority over primes.\n\t\t\t\t$sentence = str_replace( $flag, $close_quote, $sentence );\n\t\t\t\t$sentence = preg_replace( $prime_pattern, $prime, $sentence );\n\t\t\t} else {\n\t\t\t\t// No closing quotes found.  Just run primes pattern.\n\t\t\t\t$sentence = preg_replace( $prime_pattern, $prime, $sentence );\n\t\t\t}\n\t\t} else {\n\t\t\t$sentence = preg_replace( $prime_pattern, $prime, $sentence );\n\t\t\t$sentence = preg_replace( $quote_pattern, $close_quote, $sentence );\n\t\t}\n\t\tif ( '\"' == $needle && false !== strpos( $sentence, '\"' ) ) {\n\t\t\t$sentence = str_replace( '\"', $close_quote, $sentence );\n\t\t}\n\t}\n\n\treturn implode( $open_quote, $sentences );\n}\n\n/**\n * Search for disabled element tags. Push element to stack on tag open and pop\n * on tag close.\n *\n * Assumes first char of $text is tag opening and last char is tag closing.\n * Assumes second char of $text is optionally '/' to indicate closing as in </html>.\n *\n * @since 2.9.0\n * @access private\n *\n * @param string $text Text to check. Must be a tag like `<html>` or `[shortcode]`.\n * @param array  $stack List of open tag elements.\n * @param array  $disabled_elements The tag names to match against. Spaces are not allowed in tag names.\n */\nfunction _wptexturize_pushpop_element( $text, &$stack, $disabled_elements ) {\n\t// Is it an opening tag or closing tag?\n\tif ( isset( $text[1] ) && '/' !== $text[1] ) {\n\t\t$opening_tag = true;\n\t\t$name_offset = 1;\n\t} elseif ( 0 == count( $stack ) ) {\n\t\t// Stack is empty. Just stop.\n\t\treturn;\n\t} else {\n\t\t$opening_tag = false;\n\t\t$name_offset = 2;\n\t}\n\n\t// Parse out the tag name.\n\t$space = strpos( $text, ' ' );\n\tif ( false === $space ) {\n\t\t$space = -1;\n\t} else {\n\t\t$space -= $name_offset;\n\t}\n\t$tag = substr( $text, $name_offset, $space );\n\n\t// Handle disabled tags.\n\tif ( in_array( $tag, $disabled_elements ) ) {\n\t\tif ( $opening_tag ) {\n\t\t\t/*\n\t\t\t * This disables texturize until we find a closing tag of our type\n\t\t\t * (e.g. <pre>) even if there was invalid nesting before that\n\t\t\t *\n\t\t\t * Example: in the case <pre>sadsadasd</code>\"baba\"</pre>\n\t\t\t *          \"baba\" won't be texturize\n\t\t\t */\n\n\t\t\tarray_push( $stack, $tag );\n\t\t} elseif ( end( $stack ) == $tag ) {\n\t\t\tarray_pop( $stack );\n\t\t}\n\t}\n}\n\n/**\n * Replaces double line-breaks with paragraph elements.\n *\n * A group of regex replaces used to identify text formatted with newlines and\n * replace double line-breaks with HTML paragraph tags. The remaining line-breaks\n * after conversion become <<br />> tags, unless $br is set to '0' or 'false'.\n *\n * @since 0.71\n *\n * @param string $pee The text which has to be formatted.\n * @param bool   $br  Optional. If set, this will convert all remaining line-breaks\n *                    after paragraphing. Default true.\n * @return string Text which has been converted into correct paragraph tags.\n */\nfunction wpautop( $pee, $br = true ) {\n\t$pre_tags = array();\n\n\tif ( trim( $pee ) === '' ) {\n\t\treturn '';\n\t}\n\n\t// Just to make things a little easier, pad the end.\n\t$pee = $pee . \"\\n\";\n\n\t/*\n\t * Pre tags shouldn't be touched by autop.\n\t * Replace pre tags with placeholders and bring them back after autop.\n\t */\n\tif ( strpos( $pee, '<pre' ) !== false ) {\n\t\t$pee_parts = explode( '</pre>', $pee );\n\t\t$last_pee  = array_pop( $pee_parts );\n\t\t$pee       = '';\n\t\t$i         = 0;\n\n\t\tforeach ( $pee_parts as $pee_part ) {\n\t\t\t$start = strpos( $pee_part, '<pre' );\n\n\t\t\t// Malformed html?\n\t\t\tif ( $start === false ) {\n\t\t\t\t$pee .= $pee_part;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$name              = \"<pre wp-pre-tag-$i></pre>\";\n\t\t\t$pre_tags[ $name ] = substr( $pee_part, $start ) . '</pre>';\n\n\t\t\t$pee .= substr( $pee_part, 0, $start ) . $name;\n\t\t\t$i++;\n\t\t}\n\n\t\t$pee .= $last_pee;\n\t}\n\t// Change multiple <br>s into two line breaks, which will turn into paragraphs.\n\t$pee = preg_replace( '|<br\\s*/?>\\s*<br\\s*/?>|', \"\\n\\n\", $pee );\n\n\t$allblocks = '(?:table|thead|tfoot|caption|col|colgroup|tbody|tr|td|th|div|dl|dd|dt|ul|ol|li|pre|form|map|area|blockquote|address|math|style|p|h[1-6]|hr|fieldset|legend|section|article|aside|hgroup|header|footer|nav|figure|figcaption|details|menu|summary)';\n\n\t// Add a double line break above block-level opening tags.\n\t$pee = preg_replace( '!(<' . $allblocks . '[\\s/>])!', \"\\n\\n$1\", $pee );\n\n\t// Add a double line break below block-level closing tags.\n\t$pee = preg_replace( '!(</' . $allblocks . '>)!', \"$1\\n\\n\", $pee );\n\n\t// Add a double line break after hr tags, which are self closing.\n\t$pee = preg_replace( '!(<hr\\s*?/?>)!', \"$1\\n\\n\", $pee );\n\n\t// Standardize newline characters to \"\\n\".\n\t$pee = str_replace( array( \"\\r\\n\", \"\\r\" ), \"\\n\", $pee );\n\n\t// Find newlines in all elements and add placeholders.\n\t$pee = wp_replace_in_html_tags( $pee, array( \"\\n\" => ' <!-- wpnl --> ' ) );\n\n\t// Collapse line breaks before and after <option> elements so they don't get autop'd.\n\tif ( strpos( $pee, '<option' ) !== false ) {\n\t\t$pee = preg_replace( '|\\s*<option|', '<option', $pee );\n\t\t$pee = preg_replace( '|</option>\\s*|', '</option>', $pee );\n\t}\n\n\t/*\n\t * Collapse line breaks inside <object> elements, before <param> and <embed> elements\n\t * so they don't get autop'd.\n\t */\n\tif ( strpos( $pee, '</object>' ) !== false ) {\n\t\t$pee = preg_replace( '|(<object[^>]*>)\\s*|', '$1', $pee );\n\t\t$pee = preg_replace( '|\\s*</object>|', '</object>', $pee );\n\t\t$pee = preg_replace( '%\\s*(</?(?:param|embed)[^>]*>)\\s*%', '$1', $pee );\n\t}\n\n\t/*\n\t * Collapse line breaks inside <audio> and <video> elements,\n\t * before and after <source> and <track> elements.\n\t */\n\tif ( strpos( $pee, '<source' ) !== false || strpos( $pee, '<track' ) !== false ) {\n\t\t$pee = preg_replace( '%([<\\[](?:audio|video)[^>\\]]*[>\\]])\\s*%', '$1', $pee );\n\t\t$pee = preg_replace( '%\\s*([<\\[]/(?:audio|video)[>\\]])%', '$1', $pee );\n\t\t$pee = preg_replace( '%\\s*(<(?:source|track)[^>]*>)\\s*%', '$1', $pee );\n\t}\n\n\t// Collapse line breaks before and after <figcaption> elements.\n\tif ( strpos( $pee, '<figcaption' ) !== false ) {\n\t\t$pee = preg_replace( '|\\s*(<figcaption[^>]*>)|', '$1', $pee );\n\t\t$pee = preg_replace( '|</figcaption>\\s*|', '</figcaption>', $pee );\n\t}\n\n\t// Remove more than two contiguous line breaks.\n\t$pee = preg_replace( \"/\\n\\n+/\", \"\\n\\n\", $pee );\n\n\t// Split up the contents into an array of strings, separated by double line breaks.\n\t$pees = preg_split( '/\\n\\s*\\n/', $pee, -1, PREG_SPLIT_NO_EMPTY );\n\n\t// Reset $pee prior to rebuilding.\n\t$pee = '';\n\n\t// Rebuild the content as a string, wrapping every bit with a <p>.\n\tforeach ( $pees as $tinkle ) {\n\t\t$pee .= '<p>' . trim( $tinkle, \"\\n\" ) . \"</p>\\n\";\n\t}\n\n\t// Under certain strange conditions it could create a P of entirely whitespace.\n\t$pee = preg_replace( '|<p>\\s*</p>|', '', $pee );\n\n\t// Add a closing <p> inside <div>, <address>, or <form> tag if missing.\n\t$pee = preg_replace( '!<p>([^<]+)</(div|address|form)>!', '<p>$1</p></$2>', $pee );\n\n\t// If an opening or closing block element tag is wrapped in a <p>, unwrap it.\n\t$pee = preg_replace( '!<p>\\s*(</?' . $allblocks . '[^>]*>)\\s*</p>!', '$1', $pee );\n\n\t// In some cases <li> may get wrapped in <p>, fix them.\n\t$pee = preg_replace( '|<p>(<li.+?)</p>|', '$1', $pee );\n\n\t// If a <blockquote> is wrapped with a <p>, move it inside the <blockquote>.\n\t$pee = preg_replace( '|<p><blockquote([^>]*)>|i', '<blockquote$1><p>', $pee );\n\t$pee = str_replace( '</blockquote></p>', '</p></blockquote>', $pee );\n\n\t// If an opening or closing block element tag is preceded by an opening <p> tag, remove it.\n\t$pee = preg_replace( '!<p>\\s*(</?' . $allblocks . '[^>]*>)!', '$1', $pee );\n\n\t// If an opening or closing block element tag is followed by a closing <p> tag, remove it.\n\t$pee = preg_replace( '!(</?' . $allblocks . '[^>]*>)\\s*</p>!', '$1', $pee );\n\n\t// Optionally insert line breaks.\n\tif ( $br ) {\n\t\t// Replace newlines that shouldn't be touched with a placeholder.\n\t\t$pee = preg_replace_callback( '/<(script|style|svg).*?<\\/\\\\1>/s', '_autop_newline_preservation_helper', $pee );\n\n\t\t// Normalize <br>\n\t\t$pee = str_replace( array( '<br>', '<br/>' ), '<br />', $pee );\n\n\t\t// Replace any new line characters that aren't preceded by a <br /> with a <br />.\n\t\t$pee = preg_replace( '|(?<!<br />)\\s*\\n|', \"<br />\\n\", $pee );\n\n\t\t// Replace newline placeholders with newlines.\n\t\t$pee = str_replace( '<WPPreserveNewline />', \"\\n\", $pee );\n\t}\n\n\t// If a <br /> tag is after an opening or closing block tag, remove it.\n\t$pee = preg_replace( '!(</?' . $allblocks . '[^>]*>)\\s*<br />!', '$1', $pee );\n\n\t// If a <br /> tag is before a subset of opening or closing block tags, remove it.\n\t$pee = preg_replace( '!<br />(\\s*</?(?:p|li|div|dl|dd|dt|th|pre|td|ul|ol)[^>]*>)!', '$1', $pee );\n\t$pee = preg_replace( \"|\\n</p>$|\", '</p>', $pee );\n\n\t// Replace placeholder <pre> tags with their original content.\n\tif ( ! empty( $pre_tags ) ) {\n\t\t$pee = str_replace( array_keys( $pre_tags ), array_values( $pre_tags ), $pee );\n\t}\n\n\t// Restore newlines in all elements.\n\tif ( false !== strpos( $pee, '<!-- wpnl -->' ) ) {\n\t\t$pee = str_replace( array( ' <!-- wpnl --> ', '<!-- wpnl -->' ), \"\\n\", $pee );\n\t}\n\n\treturn $pee;\n}\n\n/**\n * Separate HTML elements and comments from the text.\n *\n * @since 4.2.4\n *\n * @param string $input The text which has to be formatted.\n * @return array The formatted text.\n */\nfunction wp_html_split( $input ) {\n\treturn preg_split( get_html_split_regex(), $input, -1, PREG_SPLIT_DELIM_CAPTURE );\n}\n\n/**\n * Retrieve the regular expression for an HTML element.\n *\n * @since 4.4.0\n *\n * @staticvar string $regex\n *\n * @return string The regular expression\n */\nfunction get_html_split_regex() {\n\tstatic $regex;\n\n\tif ( ! isset( $regex ) ) {\n\t\t// phpcs:disable Squiz.Strings.ConcatenationSpacing.PaddingFound -- don't remove regex indentation\n\t\t$comments =\n\t\t\t'!'             // Start of comment, after the <.\n\t\t\t. '(?:'         // Unroll the loop: Consume everything until --> is found.\n\t\t\t.     '-(?!->)' // Dash not followed by end of comment.\n\t\t\t.     '[^\\-]*+' // Consume non-dashes.\n\t\t\t. ')*+'         // Loop possessively.\n\t\t\t. '(?:-->)?';   // End of comment. If not found, match all input.\n\n\t\t$cdata =\n\t\t\t'!\\[CDATA\\['    // Start of comment, after the <.\n\t\t\t. '[^\\]]*+'     // Consume non-].\n\t\t\t. '(?:'         // Unroll the loop: Consume everything until ]]> is found.\n\t\t\t.     '](?!]>)' // One ] not followed by end of comment.\n\t\t\t.     '[^\\]]*+' // Consume non-].\n\t\t\t. ')*+'         // Loop possessively.\n\t\t\t. '(?:]]>)?';   // End of comment. If not found, match all input.\n\n\t\t$escaped =\n\t\t\t'(?='             // Is the element escaped?\n\t\t\t.    '!--'\n\t\t\t. '|'\n\t\t\t.    '!\\[CDATA\\['\n\t\t\t. ')'\n\t\t\t. '(?(?=!-)'      // If yes, which type?\n\t\t\t.     $comments\n\t\t\t. '|'\n\t\t\t.     $cdata\n\t\t\t. ')';\n\n\t\t$regex =\n\t\t\t'/('                // Capture the entire match.\n\t\t\t.     '<'           // Find start of element.\n\t\t\t.     '(?'          // Conditional expression follows.\n\t\t\t.         $escaped  // Find end of escaped element.\n\t\t\t.     '|'           // ... else ...\n\t\t\t.         '[^>]*>?' // Find end of normal element.\n\t\t\t.     ')'\n\t\t\t. ')/';\n\t\t// phpcs:enable\n\t}\n\n\treturn $regex;\n}\n\n/**\n * Retrieve the combined regular expression for HTML and shortcodes.\n *\n * @access private\n * @ignore\n * @internal This function will be removed in 4.5.0 per Shortcode API Roadmap.\n * @since 4.4.0\n *\n * @staticvar string $html_regex\n *\n * @param string $shortcode_regex The result from _get_wptexturize_shortcode_regex().  Optional.\n * @return string The regular expression\n */\nfunction _get_wptexturize_split_regex( $shortcode_regex = '' ) {\n\tstatic $html_regex;\n\n\tif ( ! isset( $html_regex ) ) {\n\t\t// phpcs:disable Squiz.Strings.ConcatenationSpacing.PaddingFound -- don't remove regex indentation\n\t\t$comment_regex =\n\t\t\t'!'             // Start of comment, after the <.\n\t\t\t. '(?:'         // Unroll the loop: Consume everything until --> is found.\n\t\t\t.     '-(?!->)' // Dash not followed by end of comment.\n\t\t\t.     '[^\\-]*+' // Consume non-dashes.\n\t\t\t. ')*+'         // Loop possessively.\n\t\t\t. '(?:-->)?';   // End of comment. If not found, match all input.\n\n\t\t$html_regex = // Needs replaced with wp_html_split() per Shortcode API Roadmap.\n\t\t\t'<'                  // Find start of element.\n\t\t\t. '(?(?=!--)'        // Is this a comment?\n\t\t\t.     $comment_regex // Find end of comment.\n\t\t\t. '|'\n\t\t\t.     '[^>]*>?'      // Find end of element. If not found, match all input.\n\t\t\t. ')';\n\t\t// phpcs:enable\n\t}\n\n\tif ( empty( $shortcode_regex ) ) {\n\t\t$regex = '/(' . $html_regex . ')/';\n\t} else {\n\t\t$regex = '/(' . $html_regex . '|' . $shortcode_regex . ')/';\n\t}\n\n\treturn $regex;\n}\n\n/**\n * Retrieve the regular expression for shortcodes.\n *\n * @access private\n * @ignore\n * @internal This function will be removed in 4.5.0 per Shortcode API Roadmap.\n * @since 4.4.0\n *\n * @param array $tagnames List of shortcodes to find.\n * @return string The regular expression\n */\nfunction _get_wptexturize_shortcode_regex( $tagnames ) {\n\t$tagregexp = join( '|', array_map( 'preg_quote', $tagnames ) );\n\t$tagregexp = \"(?:$tagregexp)(?=[\\\\s\\\\]\\\\/])\"; // Excerpt of get_shortcode_regex().\n\t// phpcs:disable Squiz.Strings.ConcatenationSpacing.PaddingFound -- don't remove regex indentation\n\t$regex =\n\t\t'\\['              // Find start of shortcode.\n\t\t. '[\\/\\[]?'         // Shortcodes may begin with [/ or [[\n\t\t. $tagregexp        // Only match registered shortcodes, because performance.\n\t\t. '(?:'\n\t\t.     '[^\\[\\]<>]+'  // Shortcodes do not contain other shortcodes. Quantifier critical.\n\t\t. '|'\n\t\t.     '<[^\\[\\]>]*>' // HTML elements permitted. Prevents matching ] before >.\n\t\t. ')*+'             // Possessive critical.\n\t\t. '\\]'              // Find end of shortcode.\n\t\t. '\\]?';            // Shortcodes may end with ]]\n\t// phpcs:enable\n\n\treturn $regex;\n}\n\n/**\n * Replace characters or phrases within HTML elements only.\n *\n * @since 4.2.3\n *\n * @param string $haystack The text which has to be formatted.\n * @param array $replace_pairs In the form array('from' => 'to', ...).\n * @return string The formatted text.\n */\nfunction wp_replace_in_html_tags( $haystack, $replace_pairs ) {\n\t// Find all elements.\n\t$textarr = wp_html_split( $haystack );\n\t$changed = false;\n\n\t// Optimize when searching for one item.\n\tif ( 1 === count( $replace_pairs ) ) {\n\t\t// Extract $needle and $replace.\n\t\tforeach ( $replace_pairs as $needle => $replace ) {\n\t\t}\n\n\t\t// Loop through delimiters (elements) only.\n\t\tfor ( $i = 1, $c = count( $textarr ); $i < $c; $i += 2 ) {\n\t\t\tif ( false !== strpos( $textarr[ $i ], $needle ) ) {\n\t\t\t\t$textarr[ $i ] = str_replace( $needle, $replace, $textarr[ $i ] );\n\t\t\t\t$changed       = true;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Extract all $needles.\n\t\t$needles = array_keys( $replace_pairs );\n\n\t\t// Loop through delimiters (elements) only.\n\t\tfor ( $i = 1, $c = count( $textarr ); $i < $c; $i += 2 ) {\n\t\t\tforeach ( $needles as $needle ) {\n\t\t\t\tif ( false !== strpos( $textarr[ $i ], $needle ) ) {\n\t\t\t\t\t$textarr[ $i ] = strtr( $textarr[ $i ], $replace_pairs );\n\t\t\t\t\t$changed       = true;\n\t\t\t\t\t// After one strtr() break out of the foreach loop and look at next element.\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( $changed ) {\n\t\t$haystack = implode( $textarr );\n\t}\n\n\treturn $haystack;\n}\n\n/**\n * Newline preservation help function for wpautop\n *\n * @since 3.1.0\n * @access private\n *\n * @param array $matches preg_replace_callback matches array\n * @return string\n */\nfunction _autop_newline_preservation_helper( $matches ) {\n\treturn str_replace( \"\\n\", '<WPPreserveNewline />', $matches[0] );\n}\n\n/**\n * Don't auto-p wrap shortcodes that stand alone\n *\n * Ensures that shortcodes are not wrapped in `<p>...</p>`.\n *\n * @since 2.9.0\n *\n * @global array $shortcode_tags\n *\n * @param string $pee The content.\n * @return string The filtered content.\n */\nfunction shortcode_unautop( $pee ) {\n\tglobal $shortcode_tags;\n\n\tif ( empty( $shortcode_tags ) || ! is_array( $shortcode_tags ) ) {\n\t\treturn $pee;\n\t}\n\n\t$tagregexp = join( '|', array_map( 'preg_quote', array_keys( $shortcode_tags ) ) );\n\t$spaces    = wp_spaces_regexp();\n\n\t// phpcs:disable Squiz.Strings.ConcatenationSpacing.PaddingFound,WordPress.WhiteSpace.PrecisionAlignment.Found -- don't remove regex indentation\n\t$pattern =\n\t\t'/'\n\t\t. '<p>'                              // Opening paragraph\n\t\t. '(?:' . $spaces . ')*+'            // Optional leading whitespace\n\t\t. '('                                // 1: The shortcode\n\t\t.     '\\\\['                          // Opening bracket\n\t\t.     \"($tagregexp)\"                 // 2: Shortcode name\n\t\t.     '(?![\\\\w-])'                   // Not followed by word character or hyphen\n\t\t\t\t\t\t\t\t\t\t\t // Unroll the loop: Inside the opening shortcode tag\n\t\t.     '[^\\\\]\\\\/]*'                   // Not a closing bracket or forward slash\n\t\t.     '(?:'\n\t\t.         '\\\\/(?!\\\\])'               // A forward slash not followed by a closing bracket\n\t\t.         '[^\\\\]\\\\/]*'               // Not a closing bracket or forward slash\n\t\t.     ')*?'\n\t\t.     '(?:'\n\t\t.         '\\\\/\\\\]'                   // Self closing tag and closing bracket\n\t\t.     '|'\n\t\t.         '\\\\]'                      // Closing bracket\n\t\t.         '(?:'                      // Unroll the loop: Optionally, anything between the opening and closing shortcode tags\n\t\t.             '[^\\\\[]*+'             // Not an opening bracket\n\t\t.             '(?:'\n\t\t.                 '\\\\[(?!\\\\/\\\\2\\\\])' // An opening bracket not followed by the closing shortcode tag\n\t\t.                 '[^\\\\[]*+'         // Not an opening bracket\n\t\t.             ')*+'\n\t\t.             '\\\\[\\\\/\\\\2\\\\]'         // Closing shortcode tag\n\t\t.         ')?'\n\t\t.     ')'\n\t\t. ')'\n\t\t. '(?:' . $spaces . ')*+'            // optional trailing whitespace\n\t\t. '<\\\\/p>'                           // closing paragraph\n\t\t. '/';\n\t// phpcs:enable\n\n\treturn preg_replace( $pattern, '$1', $pee );\n}\n\n/**\n * Checks to see if a string is utf8 encoded.\n *\n * NOTE: This function checks for 5-Byte sequences, UTF8\n *       has Bytes Sequences with a maximum length of 4.\n *\n * @author bmorel at ssi dot fr (modified)\n * @since 1.2.1\n *\n * @param string $str The string to be checked\n * @return bool True if $str fits a UTF-8 model, false otherwise.\n */\nfunction seems_utf8( $str ) {\n\tmbstring_binary_safe_encoding();\n\t$length = strlen( $str );\n\treset_mbstring_encoding();\n\tfor ( $i = 0; $i < $length; $i++ ) {\n\t\t$c = ord( $str[ $i ] );\n\t\tif ( $c < 0x80 ) {\n\t\t\t$n = 0; // 0bbbbbbb\n\t\t} elseif ( ( $c & 0xE0 ) == 0xC0 ) {\n\t\t\t$n = 1; // 110bbbbb\n\t\t} elseif ( ( $c & 0xF0 ) == 0xE0 ) {\n\t\t\t$n = 2; // 1110bbbb\n\t\t} elseif ( ( $c & 0xF8 ) == 0xF0 ) {\n\t\t\t$n = 3; // 11110bbb\n\t\t} elseif ( ( $c & 0xFC ) == 0xF8 ) {\n\t\t\t$n = 4; // 111110bb\n\t\t} elseif ( ( $c & 0xFE ) == 0xFC ) {\n\t\t\t$n = 5; // 1111110b\n\t\t} else {\n\t\t\treturn false; // Does not match any model\n\t\t}\n\t\tfor ( $j = 0; $j < $n; $j++ ) { // n bytes matching 10bbbbbb follow ?\n\t\t\tif ( ( ++$i == $length ) || ( ( ord( $str[ $i ] ) & 0xC0 ) != 0x80 ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * Converts a number of special characters into their HTML entities.\n *\n * Specifically deals with: &, <, >, \", and '.\n *\n * $quote_style can be set to ENT_COMPAT to encode \" to\n * &quot;, or ENT_QUOTES to do both. Default is ENT_NOQUOTES where no quotes are encoded.\n *\n * @since 1.2.2\n * @access private\n *\n * @staticvar string $_charset\n *\n * @param string       $string        The text which is to be encoded.\n * @param int|string   $quote_style   Optional. Converts double quotes if set to ENT_COMPAT,\n *                                    both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES.\n *                                    Also compatible with old values; converting single quotes if set to 'single',\n *                                    double if set to 'double' or both if otherwise set.\n *                                    Default is ENT_NOQUOTES.\n * @param false|string $charset       Optional. The character encoding of the string. Default is false.\n * @param bool         $double_encode Optional. Whether to encode existing html entities. Default is false.\n * @return string The encoded text with HTML entities.\n */\nfunction _wp_specialchars( $string, $quote_style = ENT_NOQUOTES, $charset = false, $double_encode = false ) {\n\t$string = (string) $string;\n\n\tif ( 0 === strlen( $string ) ) {\n\t\treturn '';\n\t}\n\n\t// Don't bother if there are no specialchars - saves some processing\n\tif ( ! preg_match( '/[&<>\"\\']/', $string ) ) {\n\t\treturn $string;\n\t}\n\n\t// Account for the previous behaviour of the function when the $quote_style is not an accepted value\n\tif ( empty( $quote_style ) ) {\n\t\t$quote_style = ENT_NOQUOTES;\n\t} elseif ( ! in_array( $quote_style, array( 0, 2, 3, 'single', 'double' ), true ) ) {\n\t\t$quote_style = ENT_QUOTES;\n\t}\n\n\t// Store the site charset as a static to avoid multiple calls to wp_load_alloptions()\n\tif ( ! $charset ) {\n\t\tstatic $_charset = null;\n\t\tif ( ! isset( $_charset ) ) {\n\t\t\t$alloptions = wp_load_alloptions();\n\t\t\t$_charset   = isset( $alloptions['blog_charset'] ) ? $alloptions['blog_charset'] : '';\n\t\t}\n\t\t$charset = $_charset;\n\t}\n\n\tif ( in_array( $charset, array( 'utf8', 'utf-8', 'UTF8' ) ) ) {\n\t\t$charset = 'UTF-8';\n\t}\n\n\t$_quote_style = $quote_style;\n\n\tif ( $quote_style === 'double' ) {\n\t\t$quote_style  = ENT_COMPAT;\n\t\t$_quote_style = ENT_COMPAT;\n\t} elseif ( $quote_style === 'single' ) {\n\t\t$quote_style = ENT_NOQUOTES;\n\t}\n\n\tif ( ! $double_encode ) {\n\t\t// Guarantee every &entity; is valid, convert &garbage; into &amp;garbage;\n\t\t// This is required for PHP < 5.4.0 because ENT_HTML401 flag is unavailable.\n\t\t$string = wp_kses_normalize_entities( $string );\n\t}\n\n\t$string = htmlspecialchars( $string, $quote_style, $charset, $double_encode );\n\n\t// Back-compat.\n\tif ( 'single' === $_quote_style ) {\n\t\t$string = str_replace( \"'\", '&#039;', $string );\n\t}\n\n\treturn $string;\n}\n\n/**\n * Converts a number of HTML entities into their special characters.\n *\n * Specifically deals with: &, <, >, \", and '.\n *\n * $quote_style can be set to ENT_COMPAT to decode \" entities,\n * or ENT_QUOTES to do both \" and '. Default is ENT_NOQUOTES where no quotes are decoded.\n *\n * @since 2.8.0\n *\n * @param string     $string The text which is to be decoded.\n * @param string|int $quote_style Optional. Converts double quotes if set to ENT_COMPAT,\n *                                both single and double if set to ENT_QUOTES or\n *                                none if set to ENT_NOQUOTES.\n *                                Also compatible with old _wp_specialchars() values;\n *                                converting single quotes if set to 'single',\n *                                double if set to 'double' or both if otherwise set.\n *                                Default is ENT_NOQUOTES.\n * @return string The decoded text without HTML entities.\n */\nfunction wp_specialchars_decode( $string, $quote_style = ENT_NOQUOTES ) {\n\t$string = (string) $string;\n\n\tif ( 0 === strlen( $string ) ) {\n\t\treturn '';\n\t}\n\n\t// Don't bother if there are no entities - saves a lot of processing\n\tif ( strpos( $string, '&' ) === false ) {\n\t\treturn $string;\n\t}\n\n\t// Match the previous behaviour of _wp_specialchars() when the $quote_style is not an accepted value\n\tif ( empty( $quote_style ) ) {\n\t\t$quote_style = ENT_NOQUOTES;\n\t} elseif ( ! in_array( $quote_style, array( 0, 2, 3, 'single', 'double' ), true ) ) {\n\t\t$quote_style = ENT_QUOTES;\n\t}\n\n\t// More complete than get_html_translation_table( HTML_SPECIALCHARS )\n\t$single      = array(\n\t\t'&#039;' => '\\'',\n\t\t'&#x27;' => '\\'',\n\t);\n\t$single_preg = array(\n\t\t'/&#0*39;/'   => '&#039;',\n\t\t'/&#x0*27;/i' => '&#x27;',\n\t);\n\t$double      = array(\n\t\t'&quot;' => '\"',\n\t\t'&#034;' => '\"',\n\t\t'&#x22;' => '\"',\n\t);\n\t$double_preg = array(\n\t\t'/&#0*34;/'   => '&#034;',\n\t\t'/&#x0*22;/i' => '&#x22;',\n\t);\n\t$others      = array(\n\t\t'&lt;'   => '<',\n\t\t'&#060;' => '<',\n\t\t'&gt;'   => '>',\n\t\t'&#062;' => '>',\n\t\t'&amp;'  => '&',\n\t\t'&#038;' => '&',\n\t\t'&#x26;' => '&',\n\t);\n\t$others_preg = array(\n\t\t'/&#0*60;/'   => '&#060;',\n\t\t'/&#0*62;/'   => '&#062;',\n\t\t'/&#0*38;/'   => '&#038;',\n\t\t'/&#x0*26;/i' => '&#x26;',\n\t);\n\n\tif ( $quote_style === ENT_QUOTES ) {\n\t\t$translation      = array_merge( $single, $double, $others );\n\t\t$translation_preg = array_merge( $single_preg, $double_preg, $others_preg );\n\t} elseif ( $quote_style === ENT_COMPAT || $quote_style === 'double' ) {\n\t\t$translation      = array_merge( $double, $others );\n\t\t$translation_preg = array_merge( $double_preg, $others_preg );\n\t} elseif ( $quote_style === 'single' ) {\n\t\t$translation      = array_merge( $single, $others );\n\t\t$translation_preg = array_merge( $single_preg, $others_preg );\n\t} elseif ( $quote_style === ENT_NOQUOTES ) {\n\t\t$translation      = $others;\n\t\t$translation_preg = $others_preg;\n\t}\n\n\t// Remove zero padding on numeric entities\n\t$string = preg_replace( array_keys( $translation_preg ), array_values( $translation_preg ), $string );\n\n\t// Replace characters according to translation table\n\treturn strtr( $string, $translation );\n}\n\n/**\n * Checks for invalid UTF8 in a string.\n *\n * @since 2.8.0\n *\n * @staticvar bool $is_utf8\n * @staticvar bool $utf8_pcre\n *\n * @param string  $string The text which is to be checked.\n * @param bool    $strip Optional. Whether to attempt to strip out invalid UTF8. Default is false.\n * @return string The checked text.\n */\nfunction wp_check_invalid_utf8( $string, $strip = false ) {\n\t$string = (string) $string;\n\n\tif ( 0 === strlen( $string ) ) {\n\t\treturn '';\n\t}\n\n\t// Store the site charset as a static to avoid multiple calls to get_option()\n\tstatic $is_utf8 = null;\n\tif ( ! isset( $is_utf8 ) ) {\n\t\t$is_utf8 = in_array( get_option( 'blog_charset' ), array( 'utf8', 'utf-8', 'UTF8', 'UTF-8' ) );\n\t}\n\tif ( ! $is_utf8 ) {\n\t\treturn $string;\n\t}\n\n\t// Check for support for utf8 in the installed PCRE library once and store the result in a static\n\tstatic $utf8_pcre = null;\n\tif ( ! isset( $utf8_pcre ) ) {\n\t\t// phpcs:ignore WordPress.PHP.NoSilencedErrors.Discouraged\n\t\t$utf8_pcre = @preg_match( '/^./u', 'a' );\n\t}\n\t// We can't demand utf8 in the PCRE installation, so just return the string in those cases\n\tif ( ! $utf8_pcre ) {\n\t\treturn $string;\n\t}\n\n\t// phpcs:ignore WordPress.PHP.NoSilencedErrors.Discouraged -- preg_match fails when it encounters invalid UTF8 in $string\n\tif ( 1 === @preg_match( '/^./us', $string ) ) {\n\t\treturn $string;\n\t}\n\n\t// Attempt to strip the bad chars if requested (not recommended)\n\tif ( $strip && function_exists( 'iconv' ) ) {\n\t\treturn iconv( 'utf-8', 'utf-8', $string );\n\t}\n\n\treturn '';\n}\n\n/**\n * Encode the Unicode values to be used in the URI.\n *\n * @since 1.5.0\n *\n * @param string $utf8_string\n * @param int    $length Max  length of the string\n * @return string String with Unicode encoded for URI.\n */\nfunction utf8_uri_encode( $utf8_string, $length = 0 ) {\n\t$unicode        = '';\n\t$values         = array();\n\t$num_octets     = 1;\n\t$unicode_length = 0;\n\n\tmbstring_binary_safe_encoding();\n\t$string_length = strlen( $utf8_string );\n\treset_mbstring_encoding();\n\n\tfor ( $i = 0; $i < $string_length; $i++ ) {\n\n\t\t$value = ord( $utf8_string[ $i ] );\n\n\t\tif ( $value < 128 ) {\n\t\t\tif ( $length && ( $unicode_length >= $length ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$unicode .= chr( $value );\n\t\t\t$unicode_length++;\n\t\t} else {\n\t\t\tif ( count( $values ) == 0 ) {\n\t\t\t\tif ( $value < 224 ) {\n\t\t\t\t\t$num_octets = 2;\n\t\t\t\t} elseif ( $value < 240 ) {\n\t\t\t\t\t$num_octets = 3;\n\t\t\t\t} else {\n\t\t\t\t\t$num_octets = 4;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$values[] = $value;\n\n\t\t\tif ( $length && ( $unicode_length + ( $num_octets * 3 ) ) > $length ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( count( $values ) == $num_octets ) {\n\t\t\t\tfor ( $j = 0; $j < $num_octets; $j++ ) {\n\t\t\t\t\t$unicode .= '%' . dechex( $values[ $j ] );\n\t\t\t\t}\n\n\t\t\t\t$unicode_length += $num_octets * 3;\n\n\t\t\t\t$values     = array();\n\t\t\t\t$num_octets = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $unicode;\n}\n\n/**\n * Converts all accent characters to ASCII characters.\n *\n * If there are no accent characters, then the string given is just returned.\n *\n * **Accent characters converted:**\n *\n * Currency signs:\n *\n * |   Code   | Glyph | Replacement |     Description     |\n * | -------- | ----- | ----------- | ------------------- |\n * | U+00A3   | \u00a3     | (empty)     | British Pound sign  |\n * | U+20AC   | \u20ac     | E           | Euro sign           |\n *\n * Decompositions for Latin-1 Supplement:\n *\n * |  Code   | Glyph | Replacement |               Description              |\n * | ------- | ----- | ----------- | -------------------------------------- |\n * | U+00AA  | \u00aa     | a           | Feminine ordinal indicator             |\n * | U+00BA  | \u00ba     | o           | Masculine ordinal indicator            |\n * | U+00C0  | \u00c0     | A           | Latin capital letter A with grave      |\n * | U+00C1  | \u00c1     | A           | Latin capital letter A with acute      |\n * | U+00C2  | \u00c2     | A           | Latin capital letter A with circumflex |\n * | U+00C3  | \u00c3     | A           | Latin capital letter A with tilde      |\n * | U+00C4  | \u00c4     | A           | Latin capital letter A with diaeresis  |\n * | U+00C5  | \u00c5     | A           | Latin capital letter A with ring above |\n * | U+00C6  | \u00c6     | AE          | Latin capital letter AE                |\n * | U+00C7  | \u00c7     | C           | Latin capital letter C with cedilla    |\n * | U+00C8  | \u00c8     | E           | Latin capital letter E with grave      |\n * | U+00C9  | \u00c9     | E           | Latin capital letter E with acute      |\n * | U+00CA  | \u00ca     | E           | Latin capital letter E with circumflex |\n * | U+00CB  | \u00cb     | E           | Latin capital letter E with diaeresis  |\n * | U+00CC  | \u00cc     | I           | Latin capital letter I with grave      |\n * | U+00CD  | \u00cd     | I           | Latin capital letter I with acute      |\n * | U+00CE  | \u00ce     | I           | Latin capital letter I with circumflex |\n * | U+00CF  | \u00cf     | I           | Latin capital letter I with diaeresis  |\n * | U+00D0  | \u00d0     | D           | Latin capital letter Eth               |\n * | U+00D1  | \u00d1     | N           | Latin capital letter N with tilde      |\n * | U+00D2  | \u00d2     | O           | Latin capital letter O with grave      |\n * | U+00D3  | \u00d3     | O           | Latin capital letter O with acute      |\n * | U+00D4  | \u00d4     | O           | Latin capital letter O with circumflex |\n * | U+00D5  | \u00d5     | O           | Latin capital letter O with tilde      |\n * | U+00D6  | \u00d6     | O           | Latin capital letter O with diaeresis  |\n * | U+00D8  | \u00d8     | O           | Latin capital letter O with stroke     |\n * | U+00D9  | \u00d9     | U           | Latin capital letter U with grave      |\n * | U+00DA  | \u00da     | U           | Latin capital letter U with acute      |\n * | U+00DB  | \u00db     | U           | Latin capital letter U with circumflex |\n * | U+00DC  | \u00dc     | U           | Latin capital letter U with diaeresis  |\n * | U+00DD  | \u00dd     | Y           | Latin capital letter Y with acute      |\n * | U+00DE  | \u00de     | TH          | Latin capital letter Thorn             |\n * | U+00DF  | \u00df     | s           | Latin small letter sharp s             |\n * | U+00E0  | \u00e0     | a           | Latin small letter a with grave        |\n * | U+00E1  | \u00e1     | a           | Latin small letter a with acute        |\n * | U+00E2  | \u00e2     | a           | Latin small letter a with circumflex   |\n * | U+00E3  | \u00e3     | a           | Latin small letter a with tilde        |\n * | U+00E4  | \u00e4     | a           | Latin small letter a with diaeresis    |\n * | U+00E5  | \u00e5     | a           | Latin small letter a with ring above   |\n * | U+00E6  | \u00e6     | ae          | Latin small letter ae                  |\n * | U+00E7  | \u00e7     | c           | Latin small letter c with cedilla      |\n * | U+00E8  | \u00e8     | e           | Latin small letter e with grave        |\n * | U+00E9  | \u00e9     | e           | Latin small letter e with acute        |\n * | U+00EA  | \u00ea     | e           | Latin small letter e with circumflex   |\n * | U+00EB  | \u00eb     | e           | Latin small letter e with diaeresis    |\n * | U+00EC  | \u00ec     | i           | Latin small letter i with grave        |\n * | U+00ED  | \u00ed     | i           | Latin small letter i with acute        |\n * | U+00EE  | \u00ee     | i           | Latin small letter i with circumflex   |\n * | U+00EF  | \u00ef     | i           | Latin small letter i with diaeresis    |\n * | U+00F0  | \u00f0     | d           | Latin small letter Eth                 |\n * | U+00F1  | \u00f1     | n           | Latin small letter n with tilde        |\n * | U+00F2  | \u00f2     | o           | Latin small letter o with grave        |\n * | U+00F3  | \u00f3     | o           | Latin small letter o with acute        |\n * | U+00F4  | \u00f4     | o           | Latin small letter o with circumflex   |\n * | U+00F5  | \u00f5     | o           | Latin small letter o with tilde        |\n * | U+00F6  | \u00f6     | o           | Latin small letter o with diaeresis    |\n * | U+00F8  | \u00f8     | o           | Latin small letter o with stroke       |\n * | U+00F9  | \u00f9     | u           | Latin small letter u with grave        |\n * | U+00FA  | \u00fa     | u           | Latin small letter u with acute        |\n * | U+00FB  | \u00fb     | u           | Latin small letter u with circumflex   |\n * | U+00FC  | \u00fc     | u           | Latin small letter u with diaeresis    |\n * | U+00FD  | \u00fd     | y           | Latin small letter y with acute        |\n * | U+00FE  | \u00fe     | th          | Latin small letter Thorn               |\n * | U+00FF  | \u00ff     | y           | Latin small letter y with diaeresis    |\n *\n * Decompositions for Latin Extended-A:\n *\n * |  Code   | Glyph | Replacement |                    Description                    |\n * | ------- | ----- | ----------- | ------------------------------------------------- |\n * | U+0100  | \u0100     | A           | Latin capital letter A with macron                |\n * | U+0101  | \u0101     | a           | Latin small letter a with macron                  |\n * | U+0102  | \u0102     | A           | Latin capital letter A with breve                 |\n * | U+0103  | \u0103     | a           | Latin small letter a with breve                   |\n * | U+0104  | \u0104     | A           | Latin capital letter A with ogonek                |\n * | U+0105  | \u0105     | a           | Latin small letter a with ogonek                  |\n * | U+01006 | \u0106     | C           | Latin capital letter C with acute                 |\n * | U+0107  | \u0107     | c           | Latin small letter c with acute                   |\n * | U+0108  | \u0108     | C           | Latin capital letter C with circumflex            |\n * | U+0109  | \u0109     | c           | Latin small letter c with circumflex              |\n * | U+010A  | \u010a     | C           | Latin capital letter C with dot above             |\n * | U+010B  | \u010b     | c           | Latin small letter c with dot above               |\n * | U+010C  | \u010c     | C           | Latin capital letter C with caron                 |\n * | U+010D  | \u010d     | c           | Latin small letter c with caron                   |\n * | U+010E  | \u010e     | D           | Latin capital letter D with caron                 |\n * | U+010F  | \u010f     | d           | Latin small letter d with caron                   |\n * | U+0110  | \u0110     | D           | Latin capital letter D with stroke                |\n * | U+0111  | \u0111     | d           | Latin small letter d with stroke                  |\n * | U+0112  | \u0112     | E           | Latin capital letter E with macron                |\n * | U+0113  | \u0113     | e           | Latin small letter e with macron                  |\n * | U+0114  | \u0114     | E           | Latin capital letter E with breve                 |\n * | U+0115  | \u0115     | e           | Latin small letter e with breve                   |\n * | U+0116  | \u0116     | E           | Latin capital letter E with dot above             |\n * | U+0117  | \u0117     | e           | Latin small letter e with dot above               |\n * | U+0118  | \u0118     | E           | Latin capital letter E with ogonek                |\n * | U+0119  | \u0119     | e           | Latin small letter e with ogonek                  |\n * | U+011A  | \u011a     | E           | Latin capital letter E with caron                 |\n * | U+011B  | \u011b     | e           | Latin small letter e with caron                   |\n * | U+011C  | \u011c     | G           | Latin capital letter G with circumflex            |\n * | U+011D  | \u011d     | g           | Latin small letter g with circumflex              |\n * | U+011E  | \u011e     | G           | Latin capital letter G with breve                 |\n * | U+011F  | \u011f     | g           | Latin small letter g with breve                   |\n * | U+0120  | \u0120     | G           | Latin capital letter G with dot above             |\n * | U+0121  | \u0121     | g           | Latin small letter g with dot above               |\n * | U+0122  | \u0122     | G           | Latin capital letter G with cedilla               |\n * | U+0123  | \u0123     | g           | Latin small letter g with cedilla                 |\n * | U+0124  | \u0124     | H           | Latin capital letter H with circumflex            |\n * | U+0125  | \u0125     | h           | Latin small letter h with circumflex              |\n * | U+0126  | \u0126     | H           | Latin capital letter H with stroke                |\n * | U+0127  | \u0127     | h           | Latin small letter h with stroke                  |\n * | U+0128  | \u0128     | I           | Latin capital letter I with tilde                 |\n * | U+0129  | \u0129     | i           | Latin small letter i with tilde                   |\n * | U+012A  | \u012a     | I           | Latin capital letter I with macron                |\n * | U+012B  | \u012b     | i           | Latin small letter i with macron                  |\n * | U+012C  | \u012c     | I           | Latin capital letter I with breve                 |\n * | U+012D  | \u012d     | i           | Latin small letter i with breve                   |\n * | U+012E  | \u012e     | I           | Latin capital letter I with ogonek                |\n * | U+012F  | \u012f     | i           | Latin small letter i with ogonek                  |\n * | U+0130  | \u0130     | I           | Latin capital letter I with dot above             |\n * | U+0131  | \u0131     | i           | Latin small letter dotless i                      |\n * | U+0132  | \u0132     | IJ          | Latin capital ligature IJ                         |\n * | U+0133  | \u0133     | ij          | Latin small ligature ij                           |\n * | U+0134  | \u0134     | J           | Latin capital letter J with circumflex            |\n * | U+0135  | \u0135     | j           | Latin small letter j with circumflex              |\n * | U+0136  | \u0136     | K           | Latin capital letter K with cedilla               |\n * | U+0137  | \u0137     | k           | Latin small letter k with cedilla                 |\n * | U+0138  | \u0138     | k           | Latin small letter Kra                            |\n * | U+0139  | \u0139     | L           | Latin capital letter L with acute                 |\n * | U+013A  | \u013a     | l           | Latin small letter l with acute                   |\n * | U+013B  | \u013b     | L           | Latin capital letter L with cedilla               |\n * | U+013C  | \u013c     | l           | Latin small letter l with cedilla                 |\n * | U+013D  | \u013d     | L           | Latin capital letter L with caron                 |\n * | U+013E  | \u013e     | l           | Latin small letter l with caron                   |\n * | U+013F  | \u013f     | L           | Latin capital letter L with middle dot            |\n * | U+0140  | \u0140     | l           | Latin small letter l with middle dot              |\n * | U+0141  | \u0141     | L           | Latin capital letter L with stroke                |\n * | U+0142  | \u0142     | l           | Latin small letter l with stroke                  |\n * | U+0143  | \u0143     | N           | Latin capital letter N with acute                 |\n * | U+0144  | \u0144     | n           | Latin small letter N with acute                   |\n * | U+0145  | \u0145     | N           | Latin capital letter N with cedilla               |\n * | U+0146  | \u0146     | n           | Latin small letter n with cedilla                 |\n * | U+0147  | \u0147     | N           | Latin capital letter N with caron                 |\n * | U+0148  | \u0148     | n           | Latin small letter n with caron                   |\n * | U+0149  | \u0149     | n           | Latin small letter n preceded by apostrophe       |\n * | U+014A  | \u014a     | N           | Latin capital letter Eng                          |\n * | U+014B  | \u014b     | n           | Latin small letter Eng                            |\n * | U+014C  | \u014c     | O           | Latin capital letter O with macron                |\n * | U+014D  | \u014d     | o           | Latin small letter o with macron                  |\n * | U+014E  | \u014e     | O           | Latin capital letter O with breve                 |\n * | U+014F  | \u014f     | o           | Latin small letter o with breve                   |\n * | U+0150  | \u0150     | O           | Latin capital letter O with double acute          |\n * | U+0151  | \u0151     | o           | Latin small letter o with double acute            |\n * | U+0152  | \u0152     | OE          | Latin capital ligature OE                         |\n * | U+0153  | \u0153     | oe          | Latin small ligature oe                           |\n * | U+0154  | \u0154     | R           | Latin capital letter R with acute                 |\n * | U+0155  | \u0155     | r           | Latin small letter r with acute                   |\n * | U+0156  | \u0156     | R           | Latin capital letter R with cedilla               |\n * | U+0157  | \u0157     | r           | Latin small letter r with cedilla                 |\n * | U+0158  | \u0158     | R           | Latin capital letter R with caron                 |\n * | U+0159  | \u0159     | r           | Latin small letter r with caron                   |\n * | U+015A  | \u015a     | S           | Latin capital letter S with acute                 |\n * | U+015B  | \u015b     | s           | Latin small letter s with acute                   |\n * | U+015C  | \u015c     | S           | Latin capital letter S with circumflex            |\n * | U+015D  | \u015d     | s           | Latin small letter s with circumflex              |\n * | U+015E  | \u015e     | S           | Latin capital letter S with cedilla               |\n * | U+015F  | \u015f     | s           | Latin small letter s with cedilla                 |\n * | U+0160  | \u0160     | S           | Latin capital letter S with caron                 |\n * | U+0161  | \u0161     | s           | Latin small letter s with caron                   |\n * | U+0162  | \u0162     | T           | Latin capital letter T with cedilla               |\n * | U+0163  | \u0163     | t           | Latin small letter t with cedilla                 |\n * | U+0164  | \u0164     | T           | Latin capital letter T with caron                 |\n * | U+0165  | \u0165     | t           | Latin small letter t with caron                   |\n * | U+0166  | \u0166     | T           | Latin capital letter T with stroke                |\n * | U+0167  | \u0167     | t           | Latin small letter t with stroke                  |\n * | U+0168  | \u0168     | U           | Latin capital letter U with tilde                 |\n * | U+0169  | \u0169     | u           | Latin small letter u with tilde                   |\n * | U+016A  | \u016a     | U           | Latin capital letter U with macron                |\n * | U+016B  | \u016b     | u           | Latin small letter u with macron                  |\n * | U+016C  | \u016c     | U           | Latin capital letter U with breve                 |\n * | U+016D  | \u016d     | u           | Latin small letter u with breve                   |\n * | U+016E  | \u016e     | U           | Latin capital letter U with ring above            |\n * | U+016F  | \u016f     | u           | Latin small letter u with ring above              |\n * | U+0170  | \u0170     | U           | Latin capital letter U with double acute          |\n * | U+0171  | \u0171     | u           | Latin small letter u with double acute            |\n * | U+0172  | \u0172     | U           | Latin capital letter U with ogonek                |\n * | U+0173  | \u0173     | u           | Latin small letter u with ogonek                  |\n * | U+0174  | \u0174     | W           | Latin capital letter W with circumflex            |\n * | U+0175  | \u0175     | w           | Latin small letter w with circumflex              |\n * | U+0176  | \u0176     | Y           | Latin capital letter Y with circumflex            |\n * | U+0177  | \u0177     | y           | Latin small letter y with circumflex              |\n * | U+0178  | \u0178     | Y           | Latin capital letter Y with diaeresis             |\n * | U+0179  | \u0179     | Z           | Latin capital letter Z with acute                 |\n * | U+017A  | \u017a     | z           | Latin small letter z with acute                   |\n * | U+017B  | \u017b     | Z           | Latin capital letter Z with dot above             |\n * | U+017C  | \u017c     | z           | Latin small letter z with dot above               |\n * | U+017D  | \u017d     | Z           | Latin capital letter Z with caron                 |\n * | U+017E  | \u017e     | z           | Latin small letter z with caron                   |\n * | U+017F  | \u017f     | s           | Latin small letter long s                         |\n * | U+01A0  | \u01a0     | O           | Latin capital letter O with horn                  |\n * | U+01A1  | \u01a1     | o           | Latin small letter o with horn                    |\n * | U+01AF  | \u01af     | U           | Latin capital letter U with horn                  |\n * | U+01B0  | \u01b0     | u           | Latin small letter u with horn                    |\n * | U+01CD  | \u01cd     | A           | Latin capital letter A with caron                 |\n * | U+01CE  | \u01ce     | a           | Latin small letter a with caron                   |\n * | U+01CF  | \u01cf     | I           | Latin capital letter I with caron                 |\n * | U+01D0  | \u01d0     | i           | Latin small letter i with caron                   |\n * | U+01D1  | \u01d1     | O           | Latin capital letter O with caron                 |\n * | U+01D2  | \u01d2     | o           | Latin small letter o with caron                   |\n * | U+01D3  | \u01d3     | U           | Latin capital letter U with caron                 |\n * | U+01D4  | \u01d4     | u           | Latin small letter u with caron                   |\n * | U+01D5  | \u01d5     | U           | Latin capital letter U with diaeresis and macron  |\n * | U+01D6  | \u01d6     | u           | Latin small letter u with diaeresis and macron    |\n * | U+01D7  | \u01d7     | U           | Latin capital letter U with diaeresis and acute   |\n * | U+01D8  | \u01d8     | u           | Latin small letter u with diaeresis and acute     |\n * | U+01D9  | \u01d9     | U           | Latin capital letter U with diaeresis and caron   |\n * | U+01DA  | \u01da     | u           | Latin small letter u with diaeresis and caron     |\n * | U+01DB  | \u01db     | U           | Latin capital letter U with diaeresis and grave   |\n * | U+01DC  | \u01dc     | u           | Latin small letter u with diaeresis and grave     |\n *\n * Decompositions for Latin Extended-B:\n *\n * |   Code   | Glyph | Replacement |                Description                |\n * | -------- | ----- | ----------- | ----------------------------------------- |\n * | U+0218   | \u0218     | S           | Latin capital letter S with comma below   |\n * | U+0219   | \u0219     | s           | Latin small letter s with comma below     |\n * | U+021A   | \u021a     | T           | Latin capital letter T with comma below   |\n * | U+021B   | \u021b     | t           | Latin small letter t with comma below     |\n *\n * Vowels with diacritic (Chinese, Hanyu Pinyin):\n *\n * |   Code   | Glyph | Replacement |                      Description                      |\n * | -------- | ----- | ----------- | ----------------------------------------------------- |\n * | U+0251   | \u0251     | a           | Latin small letter alpha                              |\n * | U+1EA0   | \u1ea0     | A           | Latin capital letter A with dot below                 |\n * | U+1EA1   | \u1ea1     | a           | Latin small letter a with dot below                   |\n * | U+1EA2   | \u1ea2     | A           | Latin capital letter A with hook above                |\n * | U+1EA3   | \u1ea3     | a           | Latin small letter a with hook above                  |\n * | U+1EA4   | \u1ea4     | A           | Latin capital letter A with circumflex and acute      |\n * | U+1EA5   | \u1ea5     | a           | Latin small letter a with circumflex and acute        |\n * | U+1EA6   | \u1ea6     | A           | Latin capital letter A with circumflex and grave      |\n * | U+1EA7   | \u1ea7     | a           | Latin small letter a with circumflex and grave        |\n * | U+1EA8   | \u1ea8     | A           | Latin capital letter A with circumflex and hook above |\n * | U+1EA9   | \u1ea9     | a           | Latin small letter a with circumflex and hook above   |\n * | U+1EAA   | \u1eaa     | A           | Latin capital letter A with circumflex and tilde      |\n * | U+1EAB   | \u1eab     | a           | Latin small letter a with circumflex and tilde        |\n * | U+1EA6   | \u1eac     | A           | Latin capital letter A with circumflex and dot below  |\n * | U+1EAD   | \u1ead     | a           | Latin small letter a with circumflex and dot below    |\n * | U+1EAE   | \u1eae     | A           | Latin capital letter A with breve and acute           |\n * | U+1EAF   | \u1eaf     | a           | Latin small letter a with breve and acute             |\n * | U+1EB0   | \u1eb0     | A           | Latin capital letter A with breve and grave           |\n * | U+1EB1   | \u1eb1     | a           | Latin small letter a with breve and grave             |\n * | U+1EB2   | \u1eb2     | A           | Latin capital letter A with breve and hook above      |\n * | U+1EB3   | \u1eb3     | a           | Latin small letter a with breve and hook above        |\n * | U+1EB4   | \u1eb4     | A           | Latin capital letter A with breve and tilde           |\n * | U+1EB5   | \u1eb5     | a           | Latin small letter a with breve and tilde             |\n * | U+1EB6   | \u1eb6     | A           | Latin capital letter A with breve and dot below       |\n * | U+1EB7   | \u1eb7     | a           | Latin small letter a with breve and dot below         |\n * | U+1EB8   | \u1eb8     | E           | Latin capital letter E with dot below                 |\n * | U+1EB9   | \u1eb9     | e           | Latin small letter e with dot below                   |\n * | U+1EBA   | \u1eba     | E           | Latin capital letter E with hook above                |\n * | U+1EBB   | \u1ebb     | e           | Latin small letter e with hook above                  |\n * | U+1EBC   | \u1ebc     | E           | Latin capital letter E with tilde                     |\n * | U+1EBD   | \u1ebd     | e           | Latin small letter e with tilde                       |\n * | U+1EBE   | \u1ebe     | E           | Latin capital letter E with circumflex and acute      |\n * | U+1EBF   | \u1ebf     | e           | Latin small letter e with circumflex and acute        |\n * | U+1EC0   | \u1ec0     | E           | Latin capital letter E with circumflex and grave      |\n * | U+1EC1   | \u1ec1     | e           | Latin small letter e with circumflex and grave        |\n * | U+1EC2   | \u1ec2     | E           | Latin capital letter E with circumflex and hook above |\n * | U+1EC3   | \u1ec3     | e           | Latin small letter e with circumflex and hook above   |\n * | U+1EC4   | \u1ec4     | E           | Latin capital letter E with circumflex and tilde      |\n * | U+1EC5   | \u1ec5     | e           | Latin small letter e with circumflex and tilde        |\n * | U+1EC6   | \u1ec6     | E           | Latin capital letter E with circumflex and dot below  |\n * | U+1EC7   | \u1ec7     | e           | Latin small letter e with circumflex and dot below    |\n * | U+1EC8   | \u1ec8     | I           | Latin capital letter I with hook above                |\n * | U+1EC9   | \u1ec9     | i           | Latin small letter i with hook above                  |\n * | U+1ECA   | \u1eca     | I           | Latin capital letter I with dot below                 |\n * | U+1ECB   | \u1ecb     | i           | Latin small letter i with dot below                   |\n * | U+1ECC   | \u1ecc     | O           | Latin capital letter O with dot below                 |\n * | U+1ECD   | \u1ecd     | o           | Latin small letter o with dot below                   |\n * | U+1ECE   | \u1ece     | O           | Latin capital letter O with hook above                |\n * | U+1ECF   | \u1ecf     | o           | Latin small letter o with hook above                  |\n * | U+1ED0   | \u1ed0     | O           | Latin capital letter O with circumflex and acute      |\n * | U+1ED1   | \u1ed1     | o           | Latin small letter o with circumflex and acute        |\n * | U+1ED2   | \u1ed2     | O           | Latin capital letter O with circumflex and grave      |\n * | U+1ED3   | \u1ed3     | o           | Latin small letter o with circumflex and grave        |\n * | U+1ED4   | \u1ed4     | O           | Latin capital letter O with circumflex and hook above |\n * | U+1ED5   | \u1ed5     | o           | Latin small letter o with circumflex and hook above   |\n * | U+1ED6   | \u1ed6     | O           | Latin capital letter O with circumflex and tilde      |\n * | U+1ED7   | \u1ed7     | o           | Latin small letter o with circumflex and tilde        |\n * | U+1ED8   | \u1ed8     | O           | Latin capital letter O with circumflex and dot below  |\n * | U+1ED9   | \u1ed9     | o           | Latin small letter o with circumflex and dot below    |\n * | U+1EDA   | \u1eda     | O           | Latin capital letter O with horn and acute            |\n * | U+1EDB   | \u1edb     | o           | Latin small letter o with horn and acute              |\n * | U+1EDC   | \u1edc     | O           | Latin capital letter O with horn and grave            |\n * | U+1EDD   | \u1edd     | o           | Latin small letter o with horn and grave              |\n * | U+1EDE   | \u1ede     | O           | Latin capital letter O with horn and hook above       |\n * | U+1EDF   | \u1edf     | o           | Latin small letter o with horn and hook above         |\n * | U+1EE0   | \u1ee0     | O           | Latin capital letter O with horn and tilde            |\n * | U+1EE1   | \u1ee1     | o           | Latin small letter o with horn and tilde              |\n * | U+1EE2   | \u1ee2     | O           | Latin capital letter O with horn and dot below        |\n * | U+1EE3   | \u1ee3     | o           | Latin small letter o with horn and dot below          |\n * | U+1EE4   | \u1ee4     | U           | Latin capital letter U with dot below                 |\n * | U+1EE5   | \u1ee5     | u           | Latin small letter u with dot below                   |\n * | U+1EE6   | \u1ee6     | U           | Latin capital letter U with hook above                |\n * | U+1EE7   | \u1ee7     | u           | Latin small letter u with hook above                  |\n * | U+1EE8   | \u1ee8     | U           | Latin capital letter U with horn and acute            |\n * | U+1EE9   | \u1ee9     | u           | Latin small letter u with horn and acute              |\n * | U+1EEA   | \u1eea     | U           | Latin capital letter U with horn and grave            |\n * | U+1EEB   | \u1eeb     | u           | Latin small letter u with horn and grave              |\n * | U+1EEC   | \u1eec     | U           | Latin capital letter U with horn and hook above       |\n * | U+1EED   | \u1eed     | u           | Latin small letter u with horn and hook above         |\n * | U+1EEE   | \u1eee     | U           | Latin capital letter U with horn and tilde            |\n * | U+1EEF   | \u1eef     | u           | Latin small letter u with horn and tilde              |\n * | U+1EF0   | \u1ef0     | U           | Latin capital letter U with horn and dot below        |\n * | U+1EF1   | \u1ef1     | u           | Latin small letter u with horn and dot below          |\n * | U+1EF2   | \u1ef2     | Y           | Latin capital letter Y with grave                     |\n * | U+1EF3   | \u1ef3     | y           | Latin small letter y with grave                       |\n * | U+1EF4   | \u1ef4     | Y           | Latin capital letter Y with dot below                 |\n * | U+1EF5   | \u1ef5     | y           | Latin small letter y with dot below                   |\n * | U+1EF6   | \u1ef6     | Y           | Latin capital letter Y with hook above                |\n * | U+1EF7   | \u1ef7     | y           | Latin small letter y with hook above                  |\n * | U+1EF8   | \u1ef8     | Y           | Latin capital letter Y with tilde                     |\n * | U+1EF9   | \u1ef9     | y           | Latin small letter y with tilde                       |\n *\n * German (`de_DE`), German formal (`de_DE_formal`), German (Switzerland) formal (`de_CH`),\n * and German (Switzerland) informal (`de_CH_informal`) locales:\n *\n * |   Code   | Glyph | Replacement |               Description               |\n * | -------- | ----- | ----------- | --------------------------------------- |\n * | U+00C4   | \u00c4     | Ae          | Latin capital letter A with diaeresis   |\n * | U+00E4   | \u00e4     | ae          | Latin small letter a with diaeresis     |\n * | U+00D6   | \u00d6     | Oe          | Latin capital letter O with diaeresis   |\n * | U+00F6   | \u00f6     | oe          | Latin small letter o with diaeresis     |\n * | U+00DC   | \u00dc     | Ue          | Latin capital letter U with diaeresis   |\n * | U+00FC   | \u00fc     | ue          | Latin small letter u with diaeresis     |\n * | U+00DF   | \u00df     | ss          | Latin small letter sharp s              |\n *\n * Danish (`da_DK`) locale:\n *\n * |   Code   | Glyph | Replacement |               Description               |\n * | -------- | ----- | ----------- | --------------------------------------- |\n * | U+00C6   | \u00c6     | Ae          | Latin capital letter AE                 |\n * | U+00E6   | \u00e6     | ae          | Latin small letter ae                   |\n * | U+00D8   | \u00d8     | Oe          | Latin capital letter O with stroke      |\n * | U+00F8   | \u00f8     | oe          | Latin small letter o with stroke        |\n * | U+00C5   | \u00c5     | Aa          | Latin capital letter A with ring above  |\n * | U+00E5   | \u00e5     | aa          | Latin small letter a with ring above    |\n *\n * Catalan (`ca`) locale:\n *\n * |   Code   | Glyph | Replacement |               Description               |\n * | -------- | ----- | ----------- | --------------------------------------- |\n * | U+00B7   | l\u00b7l   | ll          | Flown dot (between two Ls)              |\n *\n * Serbian (`sr_RS`) and Bosnian (`bs_BA`) locales:\n *\n * |   Code   | Glyph | Replacement |               Description               |\n * | -------- | ----- | ----------- | --------------------------------------- |\n * | U+0110   | \u0110     | DJ          | Latin capital letter D with stroke      |\n * | U+0111   | \u0111     | dj          | Latin small letter d with stroke        |\n *\n * @since 1.2.1\n * @since 4.6.0 Added locale support for `de_CH`, `de_CH_informal`, and `ca`.\n * @since 4.7.0 Added locale support for `sr_RS`.\n * @since 4.8.0 Added locale support for `bs_BA`.\n *\n * @param string $string Text that might have accent characters\n * @return string Filtered string with replaced \"nice\" characters.\n */\nfunction remove_accents( $string ) {\n\tif ( ! preg_match( '/[\\x80-\\xff]/', $string ) ) {\n\t\treturn $string;\n\t}\n\n\tif ( seems_utf8( $string ) ) {\n\t\t$chars = array(\n\t\t\t// Decompositions for Latin-1 Supplement\n\t\t\t'\u00aa' => 'a',\n\t\t\t'\u00ba' => 'o',\n\t\t\t'\u00c0' => 'A',\n\t\t\t'\u00c1' => 'A',\n\t\t\t'\u00c2' => 'A',\n\t\t\t'\u00c3' => 'A',\n\t\t\t'\u00c4' => 'A',\n\t\t\t'\u00c5' => 'A',\n\t\t\t'\u00c6' => 'AE',\n\t\t\t'\u00c7' => 'C',\n\t\t\t'\u00c8' => 'E',\n\t\t\t'\u00c9' => 'E',\n\t\t\t'\u00ca' => 'E',\n\t\t\t'\u00cb' => 'E',\n\t\t\t'\u00cc' => 'I',\n\t\t\t'\u00cd' => 'I',\n\t\t\t'\u00ce' => 'I',\n\t\t\t'\u00cf' => 'I',\n\t\t\t'\u00d0' => 'D',\n\t\t\t'\u00d1' => 'N',\n\t\t\t'\u00d2' => 'O',\n\t\t\t'\u00d3' => 'O',\n\t\t\t'\u00d4' => 'O',\n\t\t\t'\u00d5' => 'O',\n\t\t\t'\u00d6' => 'O',\n\t\t\t'\u00d9' => 'U',\n\t\t\t'\u00da' => 'U',\n\t\t\t'\u00db' => 'U',\n\t\t\t'\u00dc' => 'U',\n\t\t\t'\u00dd' => 'Y',\n\t\t\t'\u00de' => 'TH',\n\t\t\t'\u00df' => 's',\n\t\t\t'\u00e0' => 'a',\n\t\t\t'\u00e1' => 'a',\n\t\t\t'\u00e2' => 'a',\n\t\t\t'\u00e3' => 'a',\n\t\t\t'\u00e4' => 'a',\n\t\t\t'\u00e5' => 'a',\n\t\t\t'\u00e6' => 'ae',\n\t\t\t'\u00e7' => 'c',\n\t\t\t'\u00e8' => 'e',\n\t\t\t'\u00e9' => 'e',\n\t\t\t'\u00ea' => 'e',\n\t\t\t'\u00eb' => 'e',\n\t\t\t'\u00ec' => 'i',\n\t\t\t'\u00ed' => 'i',\n\t\t\t'\u00ee' => 'i',\n\t\t\t'\u00ef' => 'i',\n\t\t\t'\u00f0' => 'd',\n\t\t\t'\u00f1' => 'n',\n\t\t\t'\u00f2' => 'o',\n\t\t\t'\u00f3' => 'o',\n\t\t\t'\u00f4' => 'o',\n\t\t\t'\u00f5' => 'o',\n\t\t\t'\u00f6' => 'o',\n\t\t\t'\u00f8' => 'o',\n\t\t\t'\u00f9' => 'u',\n\t\t\t'\u00fa' => 'u',\n\t\t\t'\u00fb' => 'u',\n\t\t\t'\u00fc' => 'u',\n\t\t\t'\u00fd' => 'y',\n\t\t\t'\u00fe' => 'th',\n\t\t\t'\u00ff' => 'y',\n\t\t\t'\u00d8' => 'O',\n\t\t\t// Decompositions for Latin Extended-A\n\t\t\t'\u0100' => 'A',\n\t\t\t'\u0101' => 'a',\n\t\t\t'\u0102' => 'A',\n\t\t\t'\u0103' => 'a',\n\t\t\t'\u0104' => 'A',\n\t\t\t'\u0105' => 'a',\n\t\t\t'\u0106' => 'C',\n\t\t\t'\u0107' => 'c',\n\t\t\t'\u0108' => 'C',\n\t\t\t'\u0109' => 'c',\n\t\t\t'\u010a' => 'C',\n\t\t\t'\u010b' => 'c',\n\t\t\t'\u010c' => 'C',\n\t\t\t'\u010d' => 'c',\n\t\t\t'\u010e' => 'D',\n\t\t\t'\u010f' => 'd',\n\t\t\t'\u0110' => 'D',\n\t\t\t'\u0111' => 'd',\n\t\t\t'\u0112' => 'E',\n\t\t\t'\u0113' => 'e',\n\t\t\t'\u0114' => 'E',\n\t\t\t'\u0115' => 'e',\n\t\t\t'\u0116' => 'E',\n\t\t\t'\u0117' => 'e',\n\t\t\t'\u0118' => 'E',\n\t\t\t'\u0119' => 'e',\n\t\t\t'\u011a' => 'E',\n\t\t\t'\u011b' => 'e',\n\t\t\t'\u011c' => 'G',\n\t\t\t'\u011d' => 'g',\n\t\t\t'\u011e' => 'G',\n\t\t\t'\u011f' => 'g',\n\t\t\t'\u0120' => 'G',\n\t\t\t'\u0121' => 'g',\n\t\t\t'\u0122' => 'G',\n\t\t\t'\u0123' => 'g',\n\t\t\t'\u0124' => 'H',\n\t\t\t'\u0125' => 'h',\n\t\t\t'\u0126' => 'H',\n\t\t\t'\u0127' => 'h',\n\t\t\t'\u0128' => 'I',\n\t\t\t'\u0129' => 'i',\n\t\t\t'\u012a' => 'I',\n\t\t\t'\u012b' => 'i',\n\t\t\t'\u012c' => 'I',\n\t\t\t'\u012d' => 'i',\n\t\t\t'\u012e' => 'I',\n\t\t\t'\u012f' => 'i',\n\t\t\t'\u0130' => 'I',\n\t\t\t'\u0131' => 'i',\n\t\t\t'\u0132' => 'IJ',\n\t\t\t'\u0133' => 'ij',\n\t\t\t'\u0134' => 'J',\n\t\t\t'\u0135' => 'j',\n\t\t\t'\u0136' => 'K',\n\t\t\t'\u0137' => 'k',\n\t\t\t'\u0138' => 'k',\n\t\t\t'\u0139' => 'L',\n\t\t\t'\u013a' => 'l',\n\t\t\t'\u013b' => 'L',\n\t\t\t'\u013c' => 'l',\n\t\t\t'\u013d' => 'L',\n\t\t\t'\u013e' => 'l',\n\t\t\t'\u013f' => 'L',\n\t\t\t'\u0140' => 'l',\n\t\t\t'\u0141' => 'L',\n\t\t\t'\u0142' => 'l',\n\t\t\t'\u0143' => 'N',\n\t\t\t'\u0144' => 'n',\n\t\t\t'\u0145' => 'N',\n\t\t\t'\u0146' => 'n',\n\t\t\t'\u0147' => 'N',\n\t\t\t'\u0148' => 'n',\n\t\t\t'\u0149' => 'n',\n\t\t\t'\u014a' => 'N',\n\t\t\t'\u014b' => 'n',\n\t\t\t'\u014c' => 'O',\n\t\t\t'\u014d' => 'o',\n\t\t\t'\u014e' => 'O',\n\t\t\t'\u014f' => 'o',\n\t\t\t'\u0150' => 'O',\n\t\t\t'\u0151' => 'o',\n\t\t\t'\u0152' => 'OE',\n\t\t\t'\u0153' => 'oe',\n\t\t\t'\u0154' => 'R',\n\t\t\t'\u0155' => 'r',\n\t\t\t'\u0156' => 'R',\n\t\t\t'\u0157' => 'r',\n\t\t\t'\u0158' => 'R',\n\t\t\t'\u0159' => 'r',\n\t\t\t'\u015a' => 'S',\n\t\t\t'\u015b' => 's',\n\t\t\t'\u015c' => 'S',\n\t\t\t'\u015d' => 's',\n\t\t\t'\u015e' => 'S',\n\t\t\t'\u015f' => 's',\n\t\t\t'\u0160' => 'S',\n\t\t\t'\u0161' => 's',\n\t\t\t'\u0162' => 'T',\n\t\t\t'\u0163' => 't',\n\t\t\t'\u0164' => 'T',\n\t\t\t'\u0165' => 't',\n\t\t\t'\u0166' => 'T',\n\t\t\t'\u0167' => 't',\n\t\t\t'\u0168' => 'U',\n\t\t\t'\u0169' => 'u',\n\t\t\t'\u016a' => 'U',\n\t\t\t'\u016b' => 'u',\n\t\t\t'\u016c' => 'U',\n\t\t\t'\u016d' => 'u',\n\t\t\t'\u016e' => 'U',\n\t\t\t'\u016f' => 'u',\n\t\t\t'\u0170' => 'U',\n\t\t\t'\u0171' => 'u',\n\t\t\t'\u0172' => 'U',\n\t\t\t'\u0173' => 'u',\n\t\t\t'\u0174' => 'W',\n\t\t\t'\u0175' => 'w',\n\t\t\t'\u0176' => 'Y',\n\t\t\t'\u0177' => 'y',\n\t\t\t'\u0178' => 'Y',\n\t\t\t'\u0179' => 'Z',\n\t\t\t'\u017a' => 'z',\n\t\t\t'\u017b' => 'Z',\n\t\t\t'\u017c' => 'z',\n\t\t\t'\u017d' => 'Z',\n\t\t\t'\u017e' => 'z',\n\t\t\t'\u017f' => 's',\n\t\t\t// Decompositions for Latin Extended-B\n\t\t\t'\u0218' => 'S',\n\t\t\t'\u0219' => 's',\n\t\t\t'\u021a' => 'T',\n\t\t\t'\u021b' => 't',\n\t\t\t// Euro Sign\n\t\t\t'\u20ac' => 'E',\n\t\t\t// GBP (Pound) Sign\n\t\t\t'\u00a3' => '',\n\t\t\t// Vowels with diacritic (Vietnamese)\n\t\t\t// unmarked\n\t\t\t'\u01a0' => 'O',\n\t\t\t'\u01a1' => 'o',\n\t\t\t'\u01af' => 'U',\n\t\t\t'\u01b0' => 'u',\n\t\t\t// grave accent\n\t\t\t'\u1ea6' => 'A',\n\t\t\t'\u1ea7' => 'a',\n\t\t\t'\u1eb0' => 'A',\n\t\t\t'\u1eb1' => 'a',\n\t\t\t'\u1ec0' => 'E',\n\t\t\t'\u1ec1' => 'e',\n\t\t\t'\u1ed2' => 'O',\n\t\t\t'\u1ed3' => 'o',\n\t\t\t'\u1edc' => 'O',\n\t\t\t'\u1edd' => 'o',\n\t\t\t'\u1eea' => 'U',\n\t\t\t'\u1eeb' => 'u',\n\t\t\t'\u1ef2' => 'Y',\n\t\t\t'\u1ef3' => 'y',\n\t\t\t// hook\n\t\t\t'\u1ea2' => 'A',\n\t\t\t'\u1ea3' => 'a',\n\t\t\t'\u1ea8' => 'A',\n\t\t\t'\u1ea9' => 'a',\n\t\t\t'\u1eb2' => 'A',\n\t\t\t'\u1eb3' => 'a',\n\t\t\t'\u1eba' => 'E',\n\t\t\t'\u1ebb' => 'e',\n\t\t\t'\u1ec2' => 'E',\n\t\t\t'\u1ec3' => 'e',\n\t\t\t'\u1ec8' => 'I',\n\t\t\t'\u1ec9' => 'i',\n\t\t\t'\u1ece' => 'O',\n\t\t\t'\u1ecf' => 'o',\n\t\t\t'\u1ed4' => 'O',\n\t\t\t'\u1ed5' => 'o',\n\t\t\t'\u1ede' => 'O',\n\t\t\t'\u1edf' => 'o',\n\t\t\t'\u1ee6' => 'U',\n\t\t\t'\u1ee7' => 'u',\n\t\t\t'\u1eec' => 'U',\n\t\t\t'\u1eed' => 'u',\n\t\t\t'\u1ef6' => 'Y',\n\t\t\t'\u1ef7' => 'y',\n\t\t\t// tilde\n\t\t\t'\u1eaa' => 'A',\n\t\t\t'\u1eab' => 'a',\n\t\t\t'\u1eb4' => 'A',\n\t\t\t'\u1eb5' => 'a',\n\t\t\t'\u1ebc' => 'E',\n\t\t\t'\u1ebd' => 'e',\n\t\t\t'\u1ec4' => 'E',\n\t\t\t'\u1ec5' => 'e',\n\t\t\t'\u1ed6' => 'O',\n\t\t\t'\u1ed7' => 'o',\n\t\t\t'\u1ee0' => 'O',\n\t\t\t'\u1ee1' => 'o',\n\t\t\t'\u1eee' => 'U',\n\t\t\t'\u1eef' => 'u',\n\t\t\t'\u1ef8' => 'Y',\n\t\t\t'\u1ef9' => 'y',\n\t\t\t// acute accent\n\t\t\t'\u1ea4' => 'A',\n\t\t\t'\u1ea5' => 'a',\n\t\t\t'\u1eae' => 'A',\n\t\t\t'\u1eaf' => 'a',\n\t\t\t'\u1ebe' => 'E',\n\t\t\t'\u1ebf' => 'e',\n\t\t\t'\u1ed0' => 'O',\n\t\t\t'\u1ed1' => 'o',\n\t\t\t'\u1eda' => 'O',\n\t\t\t'\u1edb' => 'o',\n\t\t\t'\u1ee8' => 'U',\n\t\t\t'\u1ee9' => 'u',\n\t\t\t// dot below\n\t\t\t'\u1ea0' => 'A',\n\t\t\t'\u1ea1' => 'a',\n\t\t\t'\u1eac' => 'A',\n\t\t\t'\u1ead' => 'a',\n\t\t\t'\u1eb6' => 'A',\n\t\t\t'\u1eb7' => 'a',\n\t\t\t'\u1eb8' => 'E',\n\t\t\t'\u1eb9' => 'e',\n\t\t\t'\u1ec6' => 'E',\n\t\t\t'\u1ec7' => 'e',\n\t\t\t'\u1eca' => 'I',\n\t\t\t'\u1ecb' => 'i',\n\t\t\t'\u1ecc' => 'O',\n\t\t\t'\u1ecd' => 'o',\n\t\t\t'\u1ed8' => 'O',\n\t\t\t'\u1ed9' => 'o',\n\t\t\t'\u1ee2' => 'O',\n\t\t\t'\u1ee3' => 'o',\n\t\t\t'\u1ee4' => 'U',\n\t\t\t'\u1ee5' => 'u',\n\t\t\t'\u1ef0' => 'U',\n\t\t\t'\u1ef1' => 'u',\n\t\t\t'\u1ef4' => 'Y',\n\t\t\t'\u1ef5' => 'y',\n\t\t\t// Vowels with diacritic (Chinese, Hanyu Pinyin)\n\t\t\t'\u0251' => 'a',\n\t\t\t// macron\n\t\t\t'\u01d5' => 'U',\n\t\t\t'\u01d6' => 'u',\n\t\t\t// acute accent\n\t\t\t'\u01d7' => 'U',\n\t\t\t'\u01d8' => 'u',\n\t\t\t// caron\n\t\t\t'\u01cd' => 'A',\n\t\t\t'\u01ce' => 'a',\n\t\t\t'\u01cf' => 'I',\n\t\t\t'\u01d0' => 'i',\n\t\t\t'\u01d1' => 'O',\n\t\t\t'\u01d2' => 'o',\n\t\t\t'\u01d3' => 'U',\n\t\t\t'\u01d4' => 'u',\n\t\t\t'\u01d9' => 'U',\n\t\t\t'\u01da' => 'u',\n\t\t\t// grave accent\n\t\t\t'\u01db' => 'U',\n\t\t\t'\u01dc' => 'u',\n\t\t);\n\n\t\t// Used for locale-specific rules\n\t\t$locale = get_locale();\n\n\t\tif ( 'de_DE' == $locale || 'de_DE_formal' == $locale || 'de_CH' == $locale || 'de_CH_informal' == $locale ) {\n\t\t\t$chars['\u00c4'] = 'Ae';\n\t\t\t$chars['\u00e4'] = 'ae';\n\t\t\t$chars['\u00d6'] = 'Oe';\n\t\t\t$chars['\u00f6'] = 'oe';\n\t\t\t$chars['\u00dc'] = 'Ue';\n\t\t\t$chars['\u00fc'] = 'ue';\n\t\t\t$chars['\u00df'] = 'ss';\n\t\t} elseif ( 'da_DK' === $locale ) {\n\t\t\t$chars['\u00c6'] = 'Ae';\n\t\t\t$chars['\u00e6'] = 'ae';\n\t\t\t$chars['\u00d8'] = 'Oe';\n\t\t\t$chars['\u00f8'] = 'oe';\n\t\t\t$chars['\u00c5'] = 'Aa';\n\t\t\t$chars['\u00e5'] = 'aa';\n\t\t} elseif ( 'ca' === $locale ) {\n\t\t\t$chars['l\u00b7l'] = 'll';\n\t\t} elseif ( 'sr_RS' === $locale || 'bs_BA' === $locale ) {\n\t\t\t$chars['\u0110'] = 'DJ';\n\t\t\t$chars['\u0111'] = 'dj';\n\t\t}\n\n\t\t$string = strtr( $string, $chars );\n\t} else {\n\t\t$chars = array();\n\t\t// Assume ISO-8859-1 if not UTF-8\n\t\t$chars['in'] = \"\\x80\\x83\\x8a\\x8e\\x9a\\x9e\"\n\t\t\t. \"\\x9f\\xa2\\xa5\\xb5\\xc0\\xc1\\xc2\"\n\t\t\t. \"\\xc3\\xc4\\xc5\\xc7\\xc8\\xc9\\xca\"\n\t\t\t. \"\\xcb\\xcc\\xcd\\xce\\xcf\\xd1\\xd2\"\n\t\t\t. \"\\xd3\\xd4\\xd5\\xd6\\xd8\\xd9\\xda\"\n\t\t\t. \"\\xdb\\xdc\\xdd\\xe0\\xe1\\xe2\\xe3\"\n\t\t\t. \"\\xe4\\xe5\\xe7\\xe8\\xe9\\xea\\xeb\"\n\t\t\t. \"\\xec\\xed\\xee\\xef\\xf1\\xf2\\xf3\"\n\t\t\t. \"\\xf4\\xf5\\xf6\\xf8\\xf9\\xfa\\xfb\"\n\t\t\t. \"\\xfc\\xfd\\xff\";\n\n\t\t$chars['out'] = 'EfSZszYcYuAAAAAACEEEEIIIINOOOOOOUUUUYaaaaaaceeeeiiiinoooooouuuuyy';\n\n\t\t$string              = strtr( $string, $chars['in'], $chars['out'] );\n\t\t$double_chars        = array();\n\t\t$double_chars['in']  = array( \"\\x8c\", \"\\x9c\", \"\\xc6\", \"\\xd0\", \"\\xde\", \"\\xdf\", \"\\xe6\", \"\\xf0\", \"\\xfe\" );\n\t\t$double_chars['out'] = array( 'OE', 'oe', 'AE', 'DH', 'TH', 'ss', 'ae', 'dh', 'th' );\n\t\t$string              = str_replace( $double_chars['in'], $double_chars['out'], $string );\n\t}\n\n\treturn $string;\n}\n\n/**\n * Sanitizes a filename, replacing whitespace with dashes.\n *\n * Removes special characters that are illegal in filenames on certain\n * operating systems and special characters requiring special escaping\n * to manipulate at the command line. Replaces spaces and consecutive\n * dashes with a single dash. Trims period, dash and underscore from beginning\n * and end of filename. It is not guaranteed that this function will return a\n * filename that is allowed to be uploaded.\n *\n * @since 2.1.0\n *\n * @param string $filename The filename to be sanitized\n * @return string The sanitized filename\n */\nfunction sanitize_file_name( $filename ) {\n\t$filename_raw  = $filename;\n\t$special_chars = array( '?', '[', ']', '/', '\\\\', '=', '<', '>', ':', ';', ',', \"'\", '\"', '&', '$', '#', '*', '(', ')', '|', '~', '`', '!', '{', '}', '%', '+', chr( 0 ) );\n\t/**\n\t * Filters the list of characters to remove from a filename.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param array  $special_chars Characters to remove.\n\t * @param string $filename_raw  Filename as it was passed into sanitize_file_name().\n\t */\n\t$special_chars = apply_filters( 'sanitize_file_name_chars', $special_chars, $filename_raw );\n\t$filename      = preg_replace( \"#\\x{00a0}#siu\", ' ', $filename );\n\t$filename      = str_replace( $special_chars, '', $filename );\n\t$filename      = str_replace( array( '%20', '+' ), '-', $filename );\n\t$filename      = preg_replace( '/[\\r\\n\\t -]+/', '-', $filename );\n\t$filename      = trim( $filename, '.-_' );\n\n\tif ( false === strpos( $filename, '.' ) ) {\n\t\t$mime_types = wp_get_mime_types();\n\t\t$filetype   = wp_check_filetype( 'test.' . $filename, $mime_types );\n\t\tif ( $filetype['ext'] === $filename ) {\n\t\t\t$filename = 'unnamed-file.' . $filetype['ext'];\n\t\t}\n\t}\n\n\t// Split the filename into a base and extension[s]\n\t$parts = explode( '.', $filename );\n\n\t// Return if only one extension\n\tif ( count( $parts ) <= 2 ) {\n\t\t/**\n\t\t * Filters a sanitized filename string.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param string $filename     Sanitized filename.\n\t\t * @param string $filename_raw The filename prior to sanitization.\n\t\t */\n\t\treturn apply_filters( 'sanitize_file_name', $filename, $filename_raw );\n\t}\n\n\t// Process multiple extensions\n\t$filename  = array_shift( $parts );\n\t$extension = array_pop( $parts );\n\t$mimes     = get_allowed_mime_types();\n\n\t/*\n\t * Loop over any intermediate extensions. Postfix them with a trailing underscore\n\t * if they are a 2 - 5 character long alpha string not in the extension whitelist.\n\t */\n\tforeach ( (array) $parts as $part ) {\n\t\t$filename .= '.' . $part;\n\n\t\tif ( preg_match( '/^[a-zA-Z]{2,5}\\d?$/', $part ) ) {\n\t\t\t$allowed = false;\n\t\t\tforeach ( $mimes as $ext_preg => $mime_match ) {\n\t\t\t\t$ext_preg = '!^(' . $ext_preg . ')$!i';\n\t\t\t\tif ( preg_match( $ext_preg, $part ) ) {\n\t\t\t\t\t$allowed = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( ! $allowed ) {\n\t\t\t\t$filename .= '_';\n\t\t\t}\n\t\t}\n\t}\n\t$filename .= '.' . $extension;\n\t/** This filter is documented in wp-includes/formatting.php */\n\treturn apply_filters( 'sanitize_file_name', $filename, $filename_raw );\n}\n\n/**\n * Sanitizes a username, stripping out unsafe characters.\n *\n * Removes tags, octets, entities, and if strict is enabled, will only keep\n * alphanumeric, _, space, ., -, @. After sanitizing, it passes the username,\n * raw username (the username in the parameter), and the value of $strict as\n * parameters for the {@see 'sanitize_user'} filter.\n *\n * @since 2.0.0\n *\n * @param string $username The username to be sanitized.\n * @param bool   $strict   If set limits $username to specific characters. Default false.\n * @return string The sanitized username, after passing through filters.\n */\nfunction sanitize_user( $username, $strict = false ) {\n\t$raw_username = $username;\n\t$username     = wp_strip_all_tags( $username );\n\t$username     = remove_accents( $username );\n\t// Kill octets\n\t$username = preg_replace( '|%([a-fA-F0-9][a-fA-F0-9])|', '', $username );\n\t$username = preg_replace( '/&.+?;/', '', $username ); // Kill entities\n\n\t// If strict, reduce to ASCII for max portability.\n\tif ( $strict ) {\n\t\t$username = preg_replace( '|[^a-z0-9 _.\\-@]|i', '', $username );\n\t}\n\n\t$username = trim( $username );\n\t// Consolidate contiguous whitespace\n\t$username = preg_replace( '|\\s+|', ' ', $username );\n\n\t/**\n\t * Filters a sanitized username string.\n\t *\n\t * @since 2.0.1\n\t *\n\t * @param string $username     Sanitized username.\n\t * @param string $raw_username The username prior to sanitization.\n\t * @param bool   $strict       Whether to limit the sanitization to specific characters. Default false.\n\t */\n\treturn apply_filters( 'sanitize_user', $username, $raw_username, $strict );\n}\n\n/**\n * Sanitizes a string key.\n *\n * Keys are used as internal identifiers. Lowercase alphanumeric characters, dashes and underscores are allowed.\n *\n * @since 3.0.0\n *\n * @param string $key String key\n * @return string Sanitized key\n */\nfunction sanitize_key( $key ) {\n\t$raw_key = $key;\n\t$key     = strtolower( $key );\n\t$key     = preg_replace( '/[^a-z0-9_\\-]/', '', $key );\n\n\t/**\n\t * Filters a sanitized key string.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string $key     Sanitized key.\n\t * @param string $raw_key The key prior to sanitization.\n\t */\n\treturn apply_filters( 'sanitize_key', $key, $raw_key );\n}\n\n/**\n * Sanitizes a title, or returns a fallback title.\n *\n * Specifically, HTML and PHP tags are stripped. Further actions can be added\n * via the plugin API. If $title is empty and $fallback_title is set, the latter\n * will be used.\n *\n * @since 1.0.0\n *\n * @param string $title          The string to be sanitized.\n * @param string $fallback_title Optional. A title to use if $title is empty.\n * @param string $context        Optional. The operation for which the string is sanitized\n * @return string The sanitized string.\n */\nfunction sanitize_title( $title, $fallback_title = '', $context = 'save' ) {\n\t$raw_title = $title;\n\n\tif ( 'save' == $context ) {\n\t\t$title = remove_accents( $title );\n\t}\n\n\t/**\n\t * Filters a sanitized title string.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param string $title     Sanitized title.\n\t * @param string $raw_title The title prior to sanitization.\n\t * @param string $context   The context for which the title is being sanitized.\n\t */\n\t$title = apply_filters( 'sanitize_title', $title, $raw_title, $context );\n\n\tif ( '' === $title || false === $title ) {\n\t\t$title = $fallback_title;\n\t}\n\n\treturn $title;\n}\n\n/**\n * Sanitizes a title with the 'query' context.\n *\n * Used for querying the database for a value from URL.\n *\n * @since 3.1.0\n *\n * @param string $title The string to be sanitized.\n * @return string The sanitized string.\n */\nfunction sanitize_title_for_query( $title ) {\n\treturn sanitize_title( $title, '', 'query' );\n}\n\n/**\n * Sanitizes a title, replacing whitespace and a few other characters with dashes.\n *\n * Limits the output to alphanumeric characters, underscore (_) and dash (-).\n * Whitespace becomes a dash.\n *\n * @since 1.2.0\n *\n * @param string $title     The title to be sanitized.\n * @param string $raw_title Optional. Not used.\n * @param string $context   Optional. The operation for which the string is sanitized.\n * @return string The sanitized title.\n */\nfunction sanitize_title_with_dashes( $title, $raw_title = '', $context = 'display' ) {\n\t$title = strip_tags( $title );\n\t// Preserve escaped octets.\n\t$title = preg_replace( '|%([a-fA-F0-9][a-fA-F0-9])|', '---$1---', $title );\n\t// Remove percent signs that are not part of an octet.\n\t$title = str_replace( '%', '', $title );\n\t// Restore octets.\n\t$title = preg_replace( '|---([a-fA-F0-9][a-fA-F0-9])---|', '%$1', $title );\n\n\tif ( seems_utf8( $title ) ) {\n\t\tif ( function_exists( 'mb_strtolower' ) ) {\n\t\t\t$title = mb_strtolower( $title, 'UTF-8' );\n\t\t}\n\t\t$title = utf8_uri_encode( $title, 200 );\n\t}\n\n\t$title = strtolower( $title );\n\n\tif ( 'save' == $context ) {\n\t\t// Convert nbsp, ndash and mdash to hyphens\n\t\t$title = str_replace( array( '%c2%a0', '%e2%80%93', '%e2%80%94' ), '-', $title );\n\t\t// Convert nbsp, ndash and mdash HTML entities to hyphens\n\t\t$title = str_replace( array( '&nbsp;', '&#160;', '&ndash;', '&#8211;', '&mdash;', '&#8212;' ), '-', $title );\n\t\t// Convert forward slash to hyphen\n\t\t$title = str_replace( '/', '-', $title );\n\n\t\t// Strip these characters entirely\n\t\t$title = str_replace(\n\t\t\tarray(\n\t\t\t\t// soft hyphens\n\t\t\t\t'%c2%ad',\n\t\t\t\t// iexcl and iquest\n\t\t\t\t'%c2%a1',\n\t\t\t\t'%c2%bf',\n\t\t\t\t// angle quotes\n\t\t\t\t'%c2%ab',\n\t\t\t\t'%c2%bb',\n\t\t\t\t'%e2%80%b9',\n\t\t\t\t'%e2%80%ba',\n\t\t\t\t// curly quotes\n\t\t\t\t'%e2%80%98',\n\t\t\t\t'%e2%80%99',\n\t\t\t\t'%e2%80%9c',\n\t\t\t\t'%e2%80%9d',\n\t\t\t\t'%e2%80%9a',\n\t\t\t\t'%e2%80%9b',\n\t\t\t\t'%e2%80%9e',\n\t\t\t\t'%e2%80%9f',\n\t\t\t\t// copy, reg, deg, hellip and trade\n\t\t\t\t'%c2%a9',\n\t\t\t\t'%c2%ae',\n\t\t\t\t'%c2%b0',\n\t\t\t\t'%e2%80%a6',\n\t\t\t\t'%e2%84%a2',\n\t\t\t\t// acute accents\n\t\t\t\t'%c2%b4',\n\t\t\t\t'%cb%8a',\n\t\t\t\t'%cc%81',\n\t\t\t\t'%cd%81',\n\t\t\t\t// grave accent, macron, caron\n\t\t\t\t'%cc%80',\n\t\t\t\t'%cc%84',\n\t\t\t\t'%cc%8c',\n\t\t\t),\n\t\t\t'',\n\t\t\t$title\n\t\t);\n\n\t\t// Convert times to x\n\t\t$title = str_replace( '%c3%97', 'x', $title );\n\t}\n\n\t$title = preg_replace( '/&.+?;/', '', $title ); // kill entities\n\t$title = str_replace( '.', '-', $title );\n\n\t$title = preg_replace( '/[^%a-z0-9 _-]/', '', $title );\n\t$title = preg_replace( '/\\s+/', '-', $title );\n\t$title = preg_replace( '|-+|', '-', $title );\n\t$title = trim( $title, '-' );\n\n\treturn $title;\n}\n\n/**\n * Ensures a string is a valid SQL 'order by' clause.\n *\n * Accepts one or more columns, with or without a sort order (ASC / DESC).\n * e.g. 'column_1', 'column_1, column_2', 'column_1 ASC, column_2 DESC' etc.\n *\n * Also accepts 'RAND()'.\n *\n * @since 2.5.1\n *\n * @param string $orderby Order by clause to be validated.\n * @return string|false Returns $orderby if valid, false otherwise.\n */\nfunction sanitize_sql_orderby( $orderby ) {\n\tif ( preg_match( '/^\\s*(([a-z0-9_]+|`[a-z0-9_]+`)(\\s+(ASC|DESC))?\\s*(,\\s*(?=[a-z0-9_`])|$))+$/i', $orderby ) || preg_match( '/^\\s*RAND\\(\\s*\\)\\s*$/i', $orderby ) ) {\n\t\treturn $orderby;\n\t}\n\treturn false;\n}\n\n/**\n * Sanitizes an HTML classname to ensure it only contains valid characters.\n *\n * Strips the string down to A-Z,a-z,0-9,_,-. If this results in an empty\n * string then it will return the alternative value supplied.\n *\n * @todo Expand to support the full range of CDATA that a class attribute can contain.\n *\n * @since 2.8.0\n *\n * @param string $class    The classname to be sanitized\n * @param string $fallback Optional. The value to return if the sanitization ends up as an empty string.\n *  Defaults to an empty string.\n * @return string The sanitized value\n */\nfunction sanitize_html_class( $class, $fallback = '' ) {\n\t//Strip out any % encoded octets\n\t$sanitized = preg_replace( '|%[a-fA-F0-9][a-fA-F0-9]|', '', $class );\n\n\t//Limit to A-Z,a-z,0-9,_,-\n\t$sanitized = preg_replace( '/[^A-Za-z0-9_-]/', '', $sanitized );\n\n\tif ( '' == $sanitized && $fallback ) {\n\t\treturn sanitize_html_class( $fallback );\n\t}\n\t/**\n\t * Filters a sanitized HTML class string.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $sanitized The sanitized HTML class.\n\t * @param string $class     HTML class before sanitization.\n\t * @param string $fallback  The fallback string.\n\t */\n\treturn apply_filters( 'sanitize_html_class', $sanitized, $class, $fallback );\n}\n\n/**\n * Converts lone & characters into `&#038;` (a.k.a. `&amp;`)\n *\n * @since 0.71\n *\n * @param string $content    String of characters to be converted.\n * @param string $deprecated Not used.\n * @return string Converted string.\n */\nfunction convert_chars( $content, $deprecated = '' ) {\n\tif ( ! empty( $deprecated ) ) {\n\t\t_deprecated_argument( __FUNCTION__, '0.71' );\n\t}\n\n\tif ( strpos( $content, '&' ) !== false ) {\n\t\t$content = preg_replace( '/&([^#])(?![a-z1-4]{1,8};)/i', '&#038;$1', $content );\n\t}\n\n\treturn $content;\n}\n\n/**\n * Converts invalid Unicode references range to valid range.\n *\n * @since 4.3.0\n *\n * @param string $content String with entities that need converting.\n * @return string Converted string.\n */\nfunction convert_invalid_entities( $content ) {\n\t$wp_htmltranswinuni = array(\n\t\t'&#128;' => '&#8364;', // the Euro sign\n\t\t'&#129;' => '',\n\t\t'&#130;' => '&#8218;', // these are Windows CP1252 specific characters\n\t\t'&#131;' => '&#402;',  // they would look weird on non-Windows browsers\n\t\t'&#132;' => '&#8222;',\n\t\t'&#133;' => '&#8230;',\n\t\t'&#134;' => '&#8224;',\n\t\t'&#135;' => '&#8225;',\n\t\t'&#136;' => '&#710;',\n\t\t'&#137;' => '&#8240;',\n\t\t'&#138;' => '&#352;',\n\t\t'&#139;' => '&#8249;',\n\t\t'&#140;' => '&#338;',\n\t\t'&#141;' => '',\n\t\t'&#142;' => '&#381;',\n\t\t'&#143;' => '',\n\t\t'&#144;' => '',\n\t\t'&#145;' => '&#8216;',\n\t\t'&#146;' => '&#8217;',\n\t\t'&#147;' => '&#8220;',\n\t\t'&#148;' => '&#8221;',\n\t\t'&#149;' => '&#8226;',\n\t\t'&#150;' => '&#8211;',\n\t\t'&#151;' => '&#8212;',\n\t\t'&#152;' => '&#732;',\n\t\t'&#153;' => '&#8482;',\n\t\t'&#154;' => '&#353;',\n\t\t'&#155;' => '&#8250;',\n\t\t'&#156;' => '&#339;',\n\t\t'&#157;' => '',\n\t\t'&#158;' => '&#382;',\n\t\t'&#159;' => '&#376;',\n\t);\n\n\tif ( strpos( $content, '&#1' ) !== false ) {\n\t\t$content = strtr( $content, $wp_htmltranswinuni );\n\t}\n\n\treturn $content;\n}\n\n/**\n * Balances tags if forced to, or if the 'use_balanceTags' option is set to true.\n *\n * @since 0.71\n *\n * @param string $text  Text to be balanced\n * @param bool   $force If true, forces balancing, ignoring the value of the option. Default false.\n * @return string Balanced text\n */\nfunction balanceTags( $text, $force = false ) {  // phpcs:ignore WordPress.NamingConventions.ValidFunctionName.FunctionNameInvalid\n\tif ( $force || (int) get_option( 'use_balanceTags' ) === 1 ) {\n\t\treturn force_balance_tags( $text );\n\t} else {\n\t\treturn $text;\n\t}\n}\n\n/**\n * Balances tags of string using a modified stack.\n *\n * @since 2.0.4\n * @since 5.3.0 Improve accuracy and add support for custom element tags.\n *\n * @author Leonard Lin <leonard@acm.org>\n * @license GPL\n * @copyright November 4, 2001\n * @version 1.1\n * @todo Make better - change loop condition to $text in 1.2\n * @internal Modified by Scott Reilly (coffee2code) 02 Aug 2004\n *      1.1  Fixed handling of append/stack pop order of end text\n *           Added Cleaning Hooks\n *      1.0  First Version\n *\n * @param string $text Text to be balanced.\n * @return string Balanced text.\n */\nfunction force_balance_tags( $text ) {\n\t$tagstack  = array();\n\t$stacksize = 0;\n\t$tagqueue  = '';\n\t$newtext   = '';\n\t// Known single-entity/self-closing tags\n\t$single_tags = array( 'area', 'base', 'basefont', 'br', 'col', 'command', 'embed', 'frame', 'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param', 'source' );\n\t// Tags that can be immediately nested within themselves\n\t$nestable_tags = array( 'blockquote', 'div', 'object', 'q', 'span' );\n\n\t// WP bug fix for comments - in case you REALLY meant to type '< !--'\n\t$text = str_replace( '< !--', '<    !--', $text );\n\t// WP bug fix for LOVE <3 (and other situations with '<' before a number)\n\t$text = preg_replace( '#<([0-9]{1})#', '&lt;$1', $text );\n\n\t/**\n\t * Matches supported tags.\n\t *\n\t * To get the pattern as a string without the comments paste into a PHP\n\t * REPL like `php -a`.\n\t *\n\t * @see https://html.spec.whatwg.org/#elements-2\n\t * @see https://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name\n\t *\n\t * @example\n\t * ~# php -a\n\t * php > $s = [paste copied contents of expression below including parentheses];\n\t * php > echo $s;\n\t */\n\t$tag_pattern = (\n\t\t'#<' . // Start with an opening bracket.\n\t\t'(/?)' . // Group 1 - If it's a closing tag it'll have a leading slash.\n\t\t'(' . // Group 2 - Tag name.\n\t\t\t// Custom element tags have more lenient rules than HTML tag names.\n\t\t\t'(?:[a-z](?:[a-z0-9._]*)-(?:[a-z0-9._-]+)+)' .\n\t\t\t\t'|' .\n\t\t\t// Traditional tag rules approximate HTML tag names.\n\t\t\t'(?:[\\w:]+)' .\n\t\t')' .\n\t\t'(?:' .\n\t\t\t// We either immediately close the tag with its '>' and have nothing here.\n\t\t\t'\\s*' .\n\t\t\t'(/?)' . // Group 3 - \"attributes\" for empty tag.\n\t\t\t\t'|' .\n\t\t\t// Or we must start with space characters to separate the tag name from the attributes (or whitespace).\n\t\t\t'(\\s+)' . // Group 4 - Pre-attribute whitespace.\n\t\t\t'([^>]*)' . // Group 5 - Attributes.\n\t\t')' .\n\t\t'>#' // End with a closing bracket.\n\t);\n\n\twhile ( preg_match( $tag_pattern, $text, $regex ) ) {\n\t\t$full_match        = $regex[0];\n\t\t$has_leading_slash = ! empty( $regex[1] );\n\t\t$tag_name          = $regex[2];\n\t\t$tag               = strtolower( $tag_name );\n\t\t$is_single_tag     = in_array( $tag, $single_tags, true );\n\t\t$pre_attribute_ws  = isset( $regex[4] ) ? $regex[4] : '';\n\t\t$attributes        = trim( isset( $regex[5] ) ? $regex[5] : $regex[3] );\n\t\t$has_self_closer   = '/' === substr( $attributes, -1 );\n\n\t\t$newtext .= $tagqueue;\n\n\t\t$i = strpos( $text, $full_match );\n\t\t$l = strlen( $full_match );\n\n\t\t// Clear the shifter.\n\t\t$tagqueue = '';\n\t\tif ( $has_leading_slash ) { // End Tag.\n\t\t\t// If too many closing tags.\n\t\t\tif ( $stacksize <= 0 ) {\n\t\t\t\t$tag = '';\n\t\t\t\t// Or close to be safe $tag = '/' . $tag.\n\n\t\t\t\t// If stacktop value = tag close value, then pop.\n\t\t\t} elseif ( $tagstack[ $stacksize - 1 ] === $tag ) { // Found closing tag.\n\t\t\t\t$tag = '</' . $tag . '>'; // Close Tag.\n\t\t\t\tarray_pop( $tagstack );\n\t\t\t\t$stacksize--;\n\t\t\t} else { // Closing tag not at top, search for it.\n\t\t\t\tfor ( $j = $stacksize - 1; $j >= 0; $j-- ) {\n\t\t\t\t\tif ( $tagstack[ $j ] === $tag ) {\n\t\t\t\t\t\t// Add tag to tagqueue.\n\t\t\t\t\t\tfor ( $k = $stacksize - 1; $k >= $j; $k-- ) {\n\t\t\t\t\t\t\t$tagqueue .= '</' . array_pop( $tagstack ) . '>';\n\t\t\t\t\t\t\t$stacksize--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$tag = '';\n\t\t\t}\n\t\t} else { // Begin Tag.\n\t\t\tif ( $has_self_closer ) { // If it presents itself as a self-closing tag...\n\t\t\t\t// ...but it isn't a known single-entity self-closing tag, then don't let it be treated as such and\n\t\t\t\t// immediately close it with a closing tag (the tag will encapsulate no text as a result)\n\t\t\t\tif ( ! $is_single_tag ) {\n\t\t\t\t\t$attributes = trim( substr( $attributes, 0, -1 ) ) . \"></$tag\";\n\t\t\t\t}\n\t\t\t} elseif ( $is_single_tag ) { // ElseIf it's a known single-entity tag but it doesn't close itself, do so\n\t\t\t\t$pre_attribute_ws = ' ';\n\t\t\t\t$attributes      .= '/';\n\t\t\t} else { // It's not a single-entity tag.\n\t\t\t\t// If the top of the stack is the same as the tag we want to push, close previous tag.\n\t\t\t\tif ( $stacksize > 0 && ! in_array( $tag, $nestable_tags, true ) && $tagstack[ $stacksize - 1 ] === $tag ) {\n\t\t\t\t\t$tagqueue = '</' . array_pop( $tagstack ) . '>';\n\t\t\t\t\t$stacksize--;\n\t\t\t\t}\n\t\t\t\t$stacksize = array_push( $tagstack, $tag );\n\t\t\t}\n\n\t\t\t// Attributes.\n\t\t\tif ( $has_self_closer && $is_single_tag ) {\n\t\t\t\t// We need some space - avoid <br/> and prefer <br />.\n\t\t\t\t$pre_attribute_ws = ' ';\n\t\t\t}\n\n\t\t\t$tag = '<' . $tag . $pre_attribute_ws . $attributes . '>';\n\t\t\t// If already queuing a close tag, then put this tag on too.\n\t\t\tif ( ! empty( $tagqueue ) ) {\n\t\t\t\t$tagqueue .= $tag;\n\t\t\t\t$tag       = '';\n\t\t\t}\n\t\t}\n\t\t$newtext .= substr( $text, 0, $i ) . $tag;\n\t\t$text     = substr( $text, $i + $l );\n\t}\n\n\t// Clear Tag Queue.\n\t$newtext .= $tagqueue;\n\n\t// Add remaining text.\n\t$newtext .= $text;\n\n\twhile ( $x = array_pop( $tagstack ) ) {\n\t\t$newtext .= '</' . $x . '>'; // Add remaining tags to close.\n\t}\n\n\t// WP fix for the bug with HTML comments.\n\t$newtext = str_replace( '< !--', '<!--', $newtext );\n\t$newtext = str_replace( '<    !--', '< !--', $newtext );\n\n\treturn $newtext;\n}\n\n/**\n * Acts on text which is about to be edited.\n *\n * The $content is run through esc_textarea(), which uses htmlspecialchars()\n * to convert special characters to HTML entities. If `$richedit` is set to true,\n * it is simply a holder for the {@see 'format_to_edit'} filter.\n *\n * @since 0.71\n * @since 4.4.0 The `$richedit` parameter was renamed to `$rich_text` for clarity.\n *\n * @param string $content   The text about to be edited.\n * @param bool   $rich_text Optional. Whether `$content` should be considered rich text,\n *                          in which case it would not be passed through esc_textarea().\n *                          Default false.\n * @return string The text after the filter (and possibly htmlspecialchars()) has been run.\n */\nfunction format_to_edit( $content, $rich_text = false ) {\n\t/**\n\t * Filters the text to be formatted for editing.\n\t *\n\t * @since 1.2.0\n\t *\n\t * @param string $content The text, prior to formatting for editing.\n\t */\n\t$content = apply_filters( 'format_to_edit', $content );\n\tif ( ! $rich_text ) {\n\t\t$content = esc_textarea( $content );\n\t}\n\treturn $content;\n}\n\n/**\n * Add leading zeros when necessary.\n *\n * If you set the threshold to '4' and the number is '10', then you will get\n * back '0010'. If you set the threshold to '4' and the number is '5000', then you\n * will get back '5000'.\n *\n * Uses sprintf to append the amount of zeros based on the $threshold parameter\n * and the size of the number. If the number is large enough, then no zeros will\n * be appended.\n *\n * @since 0.71\n *\n * @param int $number     Number to append zeros to if not greater than threshold.\n * @param int $threshold  Digit places number needs to be to not have zeros added.\n * @return string Adds leading zeros to number if needed.\n */\nfunction zeroise( $number, $threshold ) {\n\treturn sprintf( '%0' . $threshold . 's', $number );\n}\n\n/**\n * Adds backslashes before letters and before a number at the start of a string.\n *\n * @since 0.71\n *\n * @param string $string Value to which backslashes will be added.\n * @return string String with backslashes inserted.\n */\nfunction backslashit( $string ) {\n\tif ( isset( $string[0] ) && $string[0] >= '0' && $string[0] <= '9' ) {\n\t\t$string = '\\\\\\\\' . $string;\n\t}\n\treturn addcslashes( $string, 'A..Za..z' );\n}\n\n/**\n * Appends a trailing slash.\n *\n * Will remove trailing forward and backslashes if it exists already before adding\n * a trailing forward slash. This prevents double slashing a string or path.\n *\n * The primary use of this is for paths and thus should be used for paths. It is\n * not restricted to paths and offers no specific path support.\n *\n * @since 1.2.0\n *\n * @param string $string What to add the trailing slash to.\n * @return string String with trailing slash added.\n */\nfunction trailingslashit( $string ) {\n\treturn untrailingslashit( $string ) . '/';\n}\n\n/**\n * Removes trailing forward slashes and backslashes if they exist.\n *\n * The primary use of this is for paths and thus should be used for paths. It is\n * not restricted to paths and offers no specific path support.\n *\n * @since 2.2.0\n *\n * @param string $string What to remove the trailing slashes from.\n * @return string String without the trailing slashes.\n */\nfunction untrailingslashit( $string ) {\n\treturn rtrim( $string, '/\\\\' );\n}\n\n/**\n * Adds slashes to escape strings.\n *\n * Slashes will first be removed if magic_quotes_gpc is set, see {@link\n * https://secure.php.net/magic_quotes} for more details.\n *\n * @since 0.71\n *\n * @param string $gpc The string returned from HTTP request data.\n * @return string Returns a string escaped with slashes.\n */\nfunction addslashes_gpc( $gpc ) {\n\treturn wp_slash( $gpc );\n}\n\n/**\n * Navigates through an array, object, or scalar, and removes slashes from the values.\n *\n * @since 2.0.0\n *\n * @param mixed $value The value to be stripped.\n * @return mixed Stripped value.\n */\nfunction stripslashes_deep( $value ) {\n\treturn map_deep( $value, 'stripslashes_from_strings_only' );\n}\n\n/**\n * Callback function for `stripslashes_deep()` which strips slashes from strings.\n *\n * @since 4.4.0\n *\n * @param mixed $value The array or string to be stripped.\n * @return mixed $value The stripped value.\n */\nfunction stripslashes_from_strings_only( $value ) {\n\treturn is_string( $value ) ? stripslashes( $value ) : $value;\n}\n\n/**\n * Navigates through an array, object, or scalar, and encodes the values to be used in a URL.\n *\n * @since 2.2.0\n *\n * @param mixed $value The array or string to be encoded.\n * @return mixed $value The encoded value.\n */\nfunction urlencode_deep( $value ) {\n\treturn map_deep( $value, 'urlencode' );\n}\n\n/**\n * Navigates through an array, object, or scalar, and raw-encodes the values to be used in a URL.\n *\n * @since 3.4.0\n *\n * @param mixed $value The array or string to be encoded.\n * @return mixed $value The encoded value.\n */\nfunction rawurlencode_deep( $value ) {\n\treturn map_deep( $value, 'rawurlencode' );\n}\n\n/**\n * Navigates through an array, object, or scalar, and decodes URL-encoded values\n *\n * @since 4.4.0\n *\n * @param mixed $value The array or string to be decoded.\n * @return mixed $value The decoded value.\n */\nfunction urldecode_deep( $value ) {\n\treturn map_deep( $value, 'urldecode' );\n}\n\n/**\n * Converts email addresses characters to HTML entities to block spam bots.\n *\n * @since 0.71\n *\n * @param string $email_address Email address.\n * @param int    $hex_encoding  Optional. Set to 1 to enable hex encoding.\n * @return string Converted email address.\n */\nfunction antispambot( $email_address, $hex_encoding = 0 ) {\n\t$email_no_spam_address = '';\n\tfor ( $i = 0, $len = strlen( $email_address ); $i < $len; $i++ ) {\n\t\t$j = rand( 0, 1 + $hex_encoding );\n\t\tif ( $j == 0 ) {\n\t\t\t$email_no_spam_address .= '&#' . ord( $email_address[ $i ] ) . ';';\n\t\t} elseif ( $j == 1 ) {\n\t\t\t$email_no_spam_address .= $email_address[ $i ];\n\t\t} elseif ( $j == 2 ) {\n\t\t\t$email_no_spam_address .= '%' . zeroise( dechex( ord( $email_address[ $i ] ) ), 2 );\n\t\t}\n\t}\n\n\treturn str_replace( '@', '&#64;', $email_no_spam_address );\n}\n\n/**\n * Callback to convert URI match to HTML A element.\n *\n * This function was backported from 2.5.0 to 2.3.2. Regex callback for make_clickable().\n *\n * @since 2.3.2\n * @access private\n *\n * @param array $matches Single Regex Match.\n * @return string HTML A element with URI address.\n */\nfunction _make_url_clickable_cb( $matches ) {\n\t$url = $matches[2];\n\n\tif ( ')' == $matches[3] && strpos( $url, '(' ) ) {\n\t\t// If the trailing character is a closing parethesis, and the URL has an opening parenthesis in it, add the closing parenthesis to the URL.\n\t\t// Then we can let the parenthesis balancer do its thing below.\n\t\t$url   .= $matches[3];\n\t\t$suffix = '';\n\t} else {\n\t\t$suffix = $matches[3];\n\t}\n\n\t// Include parentheses in the URL only if paired\n\twhile ( substr_count( $url, '(' ) < substr_count( $url, ')' ) ) {\n\t\t$suffix = strrchr( $url, ')' ) . $suffix;\n\t\t$url    = substr( $url, 0, strrpos( $url, ')' ) );\n\t}\n\n\t$url = esc_url( $url );\n\tif ( empty( $url ) ) {\n\t\treturn $matches[0];\n\t}\n\n\tif ( 'comment_text' === current_filter() ) {\n\t\t$rel = 'nofollow ugc';\n\t} else {\n\t\t$rel = 'nofollow';\n\t}\n\n\t/**\n\t * Filters the rel value that is added to URL matches converted to links.\n\t *\n\t * @since 5.3.0\n\t *\n\t * @param string $rel The rel value.\n\t * @param string $url The matched URL being converted to a link tag.\n\t */\n\t$rel = apply_filters( 'make_clickable_rel', $rel, $url );\n\t$rel = esc_attr( $rel );\n\n\treturn $matches[1] . \"<a href=\\\"$url\\\" rel=\\\"$rel\\\">$url</a>\" . $suffix;\n}\n\n/**\n * Callback to convert URL match to HTML A element.\n *\n * This function was backported from 2.5.0 to 2.3.2. Regex callback for make_clickable().\n *\n * @since 2.3.2\n * @access private\n *\n * @param array $matches Single Regex Match.\n * @return string HTML A element with URL address.\n */\nfunction _make_web_ftp_clickable_cb( $matches ) {\n\t$ret  = '';\n\t$dest = $matches[2];\n\t$dest = 'http://' . $dest;\n\n\t// removed trailing [.,;:)] from URL\n\tif ( in_array( substr( $dest, -1 ), array( '.', ',', ';', ':', ')' ) ) === true ) {\n\t\t$ret  = substr( $dest, -1 );\n\t\t$dest = substr( $dest, 0, strlen( $dest ) - 1 );\n\t}\n\n\t$dest = esc_url( $dest );\n\tif ( empty( $dest ) ) {\n\t\treturn $matches[0];\n\t}\n\n\tif ( 'comment_text' === current_filter() ) {\n\t\t$rel = 'nofollow ugc';\n\t} else {\n\t\t$rel = 'nofollow';\n\t}\n\n\t/** This filter is documented in wp-includes/formatting.php */\n\t$rel = apply_filters( 'make_clickable_rel', $rel, $dest );\n\t$rel = esc_attr( $rel );\n\n\treturn $matches[1] . \"<a href=\\\"$dest\\\" rel=\\\"$rel\\\">$dest</a>$ret\";\n}\n\n/**\n * Callback to convert email address match to HTML A element.\n *\n * This function was backported from 2.5.0 to 2.3.2. Regex callback for make_clickable().\n *\n * @since 2.3.2\n * @access private\n *\n * @param array $matches Single Regex Match.\n * @return string HTML A element with email address.\n */\nfunction _make_email_clickable_cb( $matches ) {\n\t$email = $matches[2] . '@' . $matches[3];\n\treturn $matches[1] . \"<a href=\\\"mailto:$email\\\">$email</a>\";\n}\n\n/**\n * Convert plaintext URI to HTML links.\n *\n * Converts URI, www and ftp, and email addresses. Finishes by fixing links\n * within links.\n *\n * @since 0.71\n *\n * @param string $text Content to convert URIs.\n * @return string Content with converted URIs.\n */\nfunction make_clickable( $text ) {\n\t$r               = '';\n\t$textarr         = preg_split( '/(<[^<>]+>)/', $text, -1, PREG_SPLIT_DELIM_CAPTURE ); // split out HTML tags\n\t$nested_code_pre = 0; // Keep track of how many levels link is nested inside <pre> or <code>\n\tforeach ( $textarr as $piece ) {\n\n\t\tif ( preg_match( '|^<code[\\s>]|i', $piece ) || preg_match( '|^<pre[\\s>]|i', $piece ) || preg_match( '|^<script[\\s>]|i', $piece ) || preg_match( '|^<style[\\s>]|i', $piece ) ) {\n\t\t\t$nested_code_pre++;\n\t\t} elseif ( $nested_code_pre && ( '</code>' === strtolower( $piece ) || '</pre>' === strtolower( $piece ) || '</script>' === strtolower( $piece ) || '</style>' === strtolower( $piece ) ) ) {\n\t\t\t$nested_code_pre--;\n\t\t}\n\n\t\tif ( $nested_code_pre || empty( $piece ) || ( $piece[0] === '<' && ! preg_match( '|^<\\s*[\\w]{1,20}+://|', $piece ) ) ) {\n\t\t\t$r .= $piece;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Long strings might contain expensive edge cases ...\n\t\tif ( 10000 < strlen( $piece ) ) {\n\t\t\t// ... break it up\n\t\t\tforeach ( _split_str_by_whitespace( $piece, 2100 ) as $chunk ) { // 2100: Extra room for scheme and leading and trailing paretheses\n\t\t\t\tif ( 2101 < strlen( $chunk ) ) {\n\t\t\t\t\t$r .= $chunk; // Too big, no whitespace: bail.\n\t\t\t\t} else {\n\t\t\t\t\t$r .= make_clickable( $chunk );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$ret = \" $piece \"; // Pad with whitespace to simplify the regexes\n\n\t\t\t$url_clickable = '~\n\t\t\t\t([\\\\s(<.,;:!?])                                        # 1: Leading whitespace, or punctuation\n\t\t\t\t(                                                      # 2: URL\n\t\t\t\t\t[\\\\w]{1,20}+://                                # Scheme and hier-part prefix\n\t\t\t\t\t(?=\\S{1,2000}\\s)                               # Limit to URLs less than about 2000 characters long\n\t\t\t\t\t[\\\\w\\\\x80-\\\\xff#%\\\\~/@\\\\[\\\\]*(+=&$-]*+         # Non-punctuation URL character\n\t\t\t\t\t(?:                                            # Unroll the Loop: Only allow puctuation URL character if followed by a non-punctuation URL character\n\t\t\t\t\t\t[\\'.,;:!?)]                            # Punctuation URL character\n\t\t\t\t\t\t[\\\\w\\\\x80-\\\\xff#%\\\\~/@\\\\[\\\\]*(+=&$-]++ # Non-punctuation URL character\n\t\t\t\t\t)*\n\t\t\t\t)\n\t\t\t\t(\\)?)                                                  # 3: Trailing closing parenthesis (for parethesis balancing post processing)\n\t\t\t~xS';\n\t\t\t// The regex is a non-anchored pattern and does not have a single fixed starting character.\n\t\t\t// Tell PCRE to spend more time optimizing since, when used on a page load, it will probably be used several times.\n\n\t\t\t$ret = preg_replace_callback( $url_clickable, '_make_url_clickable_cb', $ret );\n\n\t\t\t$ret = preg_replace_callback( '#([\\s>])((www|ftp)\\.[\\w\\\\x80-\\\\xff\\#$%&~/.\\-;:=,?@\\[\\]+]+)#is', '_make_web_ftp_clickable_cb', $ret );\n\t\t\t$ret = preg_replace_callback( '#([\\s>])([.0-9a-z_+-]+)@(([0-9a-z-]+\\.)+[0-9a-z]{2,})#i', '_make_email_clickable_cb', $ret );\n\n\t\t\t$ret = substr( $ret, 1, -1 ); // Remove our whitespace padding.\n\t\t\t$r  .= $ret;\n\t\t}\n\t}\n\n\t// Cleanup of accidental links within links\n\treturn preg_replace( '#(<a([ \\r\\n\\t]+[^>]+?>|>))<a [^>]+?>([^>]+?)</a></a>#i', '$1$3</a>', $r );\n}\n\n/**\n * Breaks a string into chunks by splitting at whitespace characters.\n * The length of each returned chunk is as close to the specified length goal as possible,\n * with the caveat that each chunk includes its trailing delimiter.\n * Chunks longer than the goal are guaranteed to not have any inner whitespace.\n *\n * Joining the returned chunks with empty delimiters reconstructs the input string losslessly.\n *\n * Input string must have no null characters (or eventual transformations on output chunks must not care about null characters)\n *\n *     _split_str_by_whitespace( \"1234 67890 1234 67890a cd 1234   890 123456789 1234567890a    45678   1 3 5 7 90 \", 10 ) ==\n *     array (\n *         0 => '1234 67890 ',  // 11 characters: Perfect split\n *         1 => '1234 ',        //  5 characters: '1234 67890a' was too long\n *         2 => '67890a cd ',   // 10 characters: '67890a cd 1234' was too long\n *         3 => '1234   890 ',  // 11 characters: Perfect split\n *         4 => '123456789 ',   // 10 characters: '123456789 1234567890a' was too long\n *         5 => '1234567890a ', // 12 characters: Too long, but no inner whitespace on which to split\n *         6 => '   45678   ',  // 11 characters: Perfect split\n *         7 => '1 3 5 7 90 ',  // 11 characters: End of $string\n *     );\n *\n * @since 3.4.0\n * @access private\n *\n * @param string $string The string to split.\n * @param int    $goal   The desired chunk length.\n * @return array Numeric array of chunks.\n */\nfunction _split_str_by_whitespace( $string, $goal ) {\n\t$chunks = array();\n\n\t$string_nullspace = strtr( $string, \"\\r\\n\\t\\v\\f \", \"\\000\\000\\000\\000\\000\\000\" );\n\n\twhile ( $goal < strlen( $string_nullspace ) ) {\n\t\t$pos = strrpos( substr( $string_nullspace, 0, $goal + 1 ), \"\\000\" );\n\n\t\tif ( false === $pos ) {\n\t\t\t$pos = strpos( $string_nullspace, \"\\000\", $goal + 1 );\n\t\t\tif ( false === $pos ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t$chunks[]         = substr( $string, 0, $pos + 1 );\n\t\t$string           = substr( $string, $pos + 1 );\n\t\t$string_nullspace = substr( $string_nullspace, $pos + 1 );\n\t}\n\n\tif ( $string ) {\n\t\t$chunks[] = $string;\n\t}\n\n\treturn $chunks;\n}\n\n/**\n * Callback to add a rel attribute to HTML A element.\n *\n * Will remove already existing string before adding to prevent invalidating (X)HTML.\n *\n * @since 5.3.0\n *\n * @param array  $matches Single match.\n * @param string $rel     The rel attribute to add.\n * @return string HTML A element with the added rel attribute.\n */\nfunction wp_rel_callback( $matches, $rel ) {\n\t$text = $matches[1];\n\t$atts = wp_kses_hair( $matches[1], wp_allowed_protocols() );\n\n\tif ( ! empty( $atts['href'] ) ) {\n\t\tif ( in_array( strtolower( wp_parse_url( $atts['href']['value'], PHP_URL_SCHEME ) ), array( 'http', 'https' ), true ) ) {\n\t\t\tif ( strtolower( wp_parse_url( $atts['href']['value'], PHP_URL_HOST ) ) === strtolower( wp_parse_url( home_url(), PHP_URL_HOST ) ) ) {\n\t\t\t\treturn \"<a $text>\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( ! empty( $atts['rel'] ) ) {\n\t\t$parts     = array_map( 'trim', explode( ' ', $atts['rel']['value'] ) );\n\t\t$rel_array = array_map( 'trim', explode( ' ', $rel ) );\n\t\t$parts     = array_unique( array_merge( $parts, $rel_array ) );\n\t\t$rel       = implode( ' ', $parts );\n\t\tunset( $atts['rel'] );\n\n\t\t$html = '';\n\t\tforeach ( $atts as $name => $value ) {\n\t\t\tif ( isset( $value['vless'] ) && 'y' === $value['vless'] ) {\n\t\t\t\t$html .= $name . ' ';\n\t\t\t} else {\n\t\t\t\t$html .= \"{$name}=\\\"\" . esc_attr( $value['value'] ) . '\" ';\n\t\t\t}\n\t\t}\n\t\t$text = trim( $html );\n\t}\n\treturn \"<a $text rel=\\\"\" . esc_attr( $rel ) . '\">';\n}\n\n/**\n * Adds `rel=\"nofollow\"` string to all HTML A elements in content.\n *\n * @since 1.5.0\n *\n * @param string $text Content that may contain HTML A elements.\n * @return string Converted content.\n */\nfunction wp_rel_nofollow( $text ) {\n\t// This is a pre-save filter, so text is already escaped.\n\t$text = stripslashes( $text );\n\t$text = preg_replace_callback(\n\t\t'|<a (.+?)>|i',\n\t\tfunction( $matches ) {\n\t\t\treturn wp_rel_callback( $matches, 'nofollow' );\n\t\t},\n\t\t$text\n\t);\n\treturn wp_slash( $text );\n}\n\n/**\n * Callback to add `rel=\"nofollow\"` string to HTML A element.\n *\n * @since 2.3.0\n * @deprecated 5.3.0 Use wp_rel_callback()\n *\n * @param array $matches Single match.\n * @return string HTML A Element with `rel=\"nofollow\"`.\n */\nfunction wp_rel_nofollow_callback( $matches ) {\n\treturn wp_rel_callback( $matches, 'nofollow' );\n}\n\n/**\n * Adds `rel=\"nofollow ugc\"` string to all HTML A elements in content.\n *\n * @since 5.3.0\n *\n * @param string $text Content that may contain HTML A elements.\n * @return string Converted content.\n */\nfunction wp_rel_ugc( $text ) {\n\t// This is a pre-save filter, so text is already escaped.\n\t$text = stripslashes( $text );\n\t$text = preg_replace_callback(\n\t\t'|<a (.+?)>|i',\n\t\tfunction( $matches ) {\n\t\t\treturn wp_rel_callback( $matches, 'nofollow ugc' );\n\t\t},\n\t\t$text\n\t);\n\treturn wp_slash( $text );\n}\n\n/**\n * Adds rel noreferrer and noopener to all HTML A elements that have a target.\n *\n * @since 5.1.0\n *\n * @param string $text Content that may contain HTML A elements.\n * @return string Converted content.\n */\nfunction wp_targeted_link_rel( $text ) {\n\t// Don't run (more expensive) regex if no links with targets.\n\tif ( stripos( $text, 'target' ) === false || stripos( $text, '<a ' ) === false || is_serialized( $text ) ) {\n\t\treturn $text;\n\t}\n\n\t$script_and_style_regex = '/<(script|style).*?<\\/\\\\1>/si';\n\n\tpreg_match_all( $script_and_style_regex, $text, $matches );\n\t$extra_parts = $matches[0];\n\t$html_parts  = preg_split( $script_and_style_regex, $text );\n\n\tforeach ( $html_parts as &$part ) {\n\t\t$part = preg_replace_callback( '|<a\\s([^>]*target\\s*=[^>]*)>|i', 'wp_targeted_link_rel_callback', $part );\n\t}\n\n\t$text = '';\n\tfor ( $i = 0; $i < count( $html_parts ); $i++ ) {\n\t\t$text .= $html_parts[ $i ];\n\t\tif ( isset( $extra_parts[ $i ] ) ) {\n\t\t\t$text .= $extra_parts[ $i ];\n\t\t}\n\t}\n\n\treturn $text;\n}\n\n/**\n * Callback to add rel=\"noreferrer noopener\" string to HTML A element.\n *\n * Will not duplicate existing noreferrer and noopener values\n * to prevent from invalidating the HTML.\n *\n * @since 5.1.0\n *\n * @param array $matches Single Match\n * @return string HTML A Element with rel noreferrer noopener in addition to any existing values\n */\nfunction wp_targeted_link_rel_callback( $matches ) {\n\t$link_html          = $matches[1];\n\t$original_link_html = $link_html;\n\n\t// Consider the html escaped if there are no unescaped quotes\n\t$is_escaped = ! preg_match( '/(^|[^\\\\\\\\])[\\'\"]/', $link_html );\n\tif ( $is_escaped ) {\n\t\t// Replace only the quotes so that they are parsable by wp_kses_hair, leave the rest as is\n\t\t$link_html = preg_replace( '/\\\\\\\\([\\'\"])/', '$1', $link_html );\n\t}\n\n\t$atts = wp_kses_hair( $link_html, wp_allowed_protocols() );\n\n\t/**\n\t * Filters the rel values that are added to links with `target` attribute.\n\t *\n\t * @since 5.1.0\n\t *\n\t * @param string $rel       The rel values.\n\t * @param string $link_html The matched content of the link tag including all HTML attributes.\n\t */\n\t$rel = apply_filters( 'wp_targeted_link_rel', 'noopener noreferrer', $link_html );\n\n\t// Return early if no rel values to be added or if no actual target attribute\n\tif ( ! $rel || ! isset( $atts['target'] ) ) {\n\t\treturn \"<a $original_link_html>\";\n\t}\n\n\tif ( isset( $atts['rel'] ) ) {\n\t\t$all_parts = preg_split( '/\\s/', \"{$atts['rel']['value']} $rel\", -1, PREG_SPLIT_NO_EMPTY );\n\t\t$rel       = implode( ' ', array_unique( $all_parts ) );\n\t}\n\n\t$atts['rel']['whole'] = 'rel=\"' . esc_attr( $rel ) . '\"';\n\t$link_html            = join( ' ', array_column( $atts, 'whole' ) );\n\n\tif ( $is_escaped ) {\n\t\t$link_html = preg_replace( '/[\\'\"]/', '\\\\\\\\$0', $link_html );\n\t}\n\n\treturn \"<a $link_html>\";\n}\n\n/**\n * Adds all filters modifying the rel attribute of targeted links.\n *\n * @since 5.1.0\n */\nfunction wp_init_targeted_link_rel_filters() {\n\t$filters = array(\n\t\t'title_save_pre',\n\t\t'content_save_pre',\n\t\t'excerpt_save_pre',\n\t\t'content_filtered_save_pre',\n\t\t'pre_comment_content',\n\t\t'pre_term_description',\n\t\t'pre_link_description',\n\t\t'pre_link_notes',\n\t\t'pre_user_description',\n\t);\n\n\tforeach ( $filters as $filter ) {\n\t\tadd_filter( $filter, 'wp_targeted_link_rel' );\n\t};\n}\n\n/**\n * Removes all filters modifying the rel attribute of targeted links.\n *\n * @since 5.1.0\n */\nfunction wp_remove_targeted_link_rel_filters() {\n\t$filters = array(\n\t\t'title_save_pre',\n\t\t'content_save_pre',\n\t\t'excerpt_save_pre',\n\t\t'content_filtered_save_pre',\n\t\t'pre_comment_content',\n\t\t'pre_term_description',\n\t\t'pre_link_description',\n\t\t'pre_link_notes',\n\t\t'pre_user_description',\n\t);\n\n\tforeach ( $filters as $filter ) {\n\t\tremove_filter( $filter, 'wp_targeted_link_rel' );\n\t};\n}\n\n/**\n * Convert one smiley code to the icon graphic file equivalent.\n *\n * Callback handler for convert_smilies().\n *\n * Looks up one smiley code in the $wpsmiliestrans global array and returns an\n * `<img>` string for that smiley.\n *\n * @since 2.8.0\n *\n * @global array $wpsmiliestrans\n *\n * @param array $matches Single match. Smiley code to convert to image.\n * @return string Image string for smiley.\n */\nfunction translate_smiley( $matches ) {\n\tglobal $wpsmiliestrans;\n\n\tif ( count( $matches ) == 0 ) {\n\t\treturn '';\n\t}\n\n\t$smiley = trim( reset( $matches ) );\n\t$img    = $wpsmiliestrans[ $smiley ];\n\n\t$matches    = array();\n\t$ext        = preg_match( '/\\.([^.]+)$/', $img, $matches ) ? strtolower( $matches[1] ) : false;\n\t$image_exts = array( 'jpg', 'jpeg', 'jpe', 'gif', 'png' );\n\n\t// Don't convert smilies that aren't images - they're probably emoji.\n\tif ( ! in_array( $ext, $image_exts ) ) {\n\t\treturn $img;\n\t}\n\n\t/**\n\t * Filters the Smiley image URL before it's used in the image element.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param string $smiley_url URL for the smiley image.\n\t * @param string $img        Filename for the smiley image.\n\t * @param string $site_url   Site URL, as returned by site_url().\n\t */\n\t$src_url = apply_filters( 'smilies_src', includes_url( \"images/smilies/$img\" ), $img, site_url() );\n\n\treturn sprintf( '<img src=\"%s\" alt=\"%s\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />', esc_url( $src_url ), esc_attr( $smiley ) );\n}\n\n/**\n * Convert text equivalent of smilies to images.\n *\n * Will only convert smilies if the option 'use_smilies' is true and the global\n * used in the function isn't empty.\n *\n * @since 0.71\n *\n * @global string|array $wp_smiliessearch\n *\n * @param string $text Content to convert smilies from text.\n * @return string Converted content with text smilies replaced with images.\n */\nfunction convert_smilies( $text ) {\n\tglobal $wp_smiliessearch;\n\t$output = '';\n\tif ( get_option( 'use_smilies' ) && ! empty( $wp_smiliessearch ) ) {\n\t\t// HTML loop taken from texturize function, could possible be consolidated\n\t\t$textarr = preg_split( '/(<.*>)/U', $text, -1, PREG_SPLIT_DELIM_CAPTURE ); // capture the tags as well as in between\n\t\t$stop    = count( $textarr );// loop stuff\n\n\t\t// Ignore proessing of specific tags\n\t\t$tags_to_ignore       = 'code|pre|style|script|textarea';\n\t\t$ignore_block_element = '';\n\n\t\tfor ( $i = 0; $i < $stop; $i++ ) {\n\t\t\t$content = $textarr[ $i ];\n\n\t\t\t// If we're in an ignore block, wait until we find its closing tag\n\t\t\tif ( '' == $ignore_block_element && preg_match( '/^<(' . $tags_to_ignore . ')[^>]*>/', $content, $matches ) ) {\n\t\t\t\t$ignore_block_element = $matches[1];\n\t\t\t}\n\n\t\t\t// If it's not a tag and not in ignore block\n\t\t\tif ( '' == $ignore_block_element && strlen( $content ) > 0 && '<' != $content[0] ) {\n\t\t\t\t$content = preg_replace_callback( $wp_smiliessearch, 'translate_smiley', $content );\n\t\t\t}\n\n\t\t\t// did we exit ignore block\n\t\t\tif ( '' != $ignore_block_element && '</' . $ignore_block_element . '>' == $content ) {\n\t\t\t\t$ignore_block_element = '';\n\t\t\t}\n\n\t\t\t$output .= $content;\n\t\t}\n\t} else {\n\t\t// return default text.\n\t\t$output = $text;\n\t}\n\treturn $output;\n}\n\n/**\n * Verifies that an email is valid.\n *\n * Does not grok i18n domains. Not RFC compliant.\n *\n * @since 0.71\n *\n * @param string $email      Email address to verify.\n * @param bool   $deprecated Deprecated.\n * @return string|false Valid email address on success, false on failure.\n */\nfunction is_email( $email, $deprecated = false ) {\n\tif ( ! empty( $deprecated ) ) {\n\t\t_deprecated_argument( __FUNCTION__, '3.0.0' );\n\t}\n\n\t// Test for the minimum length the email can be\n\tif ( strlen( $email ) < 6 ) {\n\t\t/**\n\t\t * Filters whether an email address is valid.\n\t\t *\n\t\t * This filter is evaluated under several different contexts, such as 'email_too_short',\n\t\t * 'email_no_at', 'local_invalid_chars', 'domain_period_sequence', 'domain_period_limits',\n\t\t * 'domain_no_periods', 'sub_hyphen_limits', 'sub_invalid_chars', or no specific context.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param string|false $is_email The email address if successfully passed the is_email() checks, false otherwise.\n\t\t * @param string       $email    The email address being checked.\n\t\t * @param string       $context  Context under which the email was tested.\n\t\t */\n\t\treturn apply_filters( 'is_email', false, $email, 'email_too_short' );\n\t}\n\n\t// Test for an @ character after the first position\n\tif ( strpos( $email, '@', 1 ) === false ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'is_email', false, $email, 'email_no_at' );\n\t}\n\n\t// Split out the local and domain parts\n\tlist( $local, $domain ) = explode( '@', $email, 2 );\n\n\t// LOCAL PART\n\t// Test for invalid characters\n\tif ( ! preg_match( '/^[a-zA-Z0-9!#$%&\\'*+\\/=?^_`{|}~\\.-]+$/', $local ) ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'is_email', false, $email, 'local_invalid_chars' );\n\t}\n\n\t// DOMAIN PART\n\t// Test for sequences of periods\n\tif ( preg_match( '/\\.{2,}/', $domain ) ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'is_email', false, $email, 'domain_period_sequence' );\n\t}\n\n\t// Test for leading and trailing periods and whitespace\n\tif ( trim( $domain, \" \\t\\n\\r\\0\\x0B.\" ) !== $domain ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'is_email', false, $email, 'domain_period_limits' );\n\t}\n\n\t// Split the domain into subs\n\t$subs = explode( '.', $domain );\n\n\t// Assume the domain will have at least two subs\n\tif ( 2 > count( $subs ) ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'is_email', false, $email, 'domain_no_periods' );\n\t}\n\n\t// Loop through each sub\n\tforeach ( $subs as $sub ) {\n\t\t// Test for leading and trailing hyphens and whitespace\n\t\tif ( trim( $sub, \" \\t\\n\\r\\0\\x0B-\" ) !== $sub ) {\n\t\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\t\treturn apply_filters( 'is_email', false, $email, 'sub_hyphen_limits' );\n\t\t}\n\n\t\t// Test for invalid characters\n\t\tif ( ! preg_match( '/^[a-z0-9-]+$/i', $sub ) ) {\n\t\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\t\treturn apply_filters( 'is_email', false, $email, 'sub_invalid_chars' );\n\t\t}\n\t}\n\n\t// Congratulations your email made it!\n\t/** This filter is documented in wp-includes/formatting.php */\n\treturn apply_filters( 'is_email', $email, $email, null );\n}\n\n/**\n * Convert to ASCII from email subjects.\n *\n * @since 1.2.0\n *\n * @param string $string Subject line\n * @return string Converted string to ASCII\n */\nfunction wp_iso_descrambler( $string ) {\n\t/* this may only work with iso-8859-1, I'm afraid */\n\tif ( ! preg_match( '#\\=\\?(.+)\\?Q\\?(.+)\\?\\=#i', $string, $matches ) ) {\n\t\treturn $string;\n\t} else {\n\t\t$subject = str_replace( '_', ' ', $matches[2] );\n\t\treturn preg_replace_callback( '#\\=([0-9a-f]{2})#i', '_wp_iso_convert', $subject );\n\t}\n}\n\n/**\n * Helper function to convert hex encoded chars to ASCII\n *\n * @since 3.1.0\n * @access private\n *\n * @param array $match The preg_replace_callback matches array\n * @return string Converted chars\n */\nfunction _wp_iso_convert( $match ) {\n\treturn chr( hexdec( strtolower( $match[1] ) ) );\n}\n\n/**\n * Returns a date in the GMT equivalent.\n *\n * Requires and returns a date in the Y-m-d H:i:s format.\n * Return format can be overridden using the $format parameter.\n *\n * @since 1.2.0\n *\n * @param string $string The date to be converted.\n * @param string $format The format string for the returned date. Default 'Y-m-d H:i:s'.\n * @return string GMT version of the date provided.\n */\nfunction get_gmt_from_date( $string, $format = 'Y-m-d H:i:s' ) {\n\t$datetime = date_create( $string, wp_timezone() );\n\n\tif ( false === $datetime ) {\n\t\treturn gmdate( $format, 0 );\n\t}\n\n\treturn $datetime->setTimezone( new DateTimeZone( 'UTC' ) )->format( $format );\n}\n\n/**\n * Converts a GMT date into the correct format for the blog.\n *\n * Requires and returns a date in the Y-m-d H:i:s format.\n * Return format can be overridden using the $format parameter.\n *\n * @since 1.2.0\n *\n * @param string $string The date to be converted.\n * @param string $format The format string for the returned date. Default 'Y-m-d H:i:s'.\n * @return string Formatted date relative to the timezone.\n */\nfunction get_date_from_gmt( $string, $format = 'Y-m-d H:i:s' ) {\n\t$datetime = date_create( $string, new DateTimeZone( 'UTC' ) );\n\n\tif ( false === $datetime ) {\n\t\treturn gmdate( $format, 0 );\n\t}\n\n\treturn $datetime->setTimezone( wp_timezone() )->format( $format );\n}\n\n/**\n * Computes an offset in seconds from an iso8601 timezone.\n *\n * @since 1.5.0\n *\n * @param string $timezone Either 'Z' for 0 offset or '\u00b1hhmm'.\n * @return int|float The offset in seconds.\n */\nfunction iso8601_timezone_to_offset( $timezone ) {\n\t// $timezone is either 'Z' or '[+|-]hhmm'\n\tif ( $timezone == 'Z' ) {\n\t\t$offset = 0;\n\t} else {\n\t\t$sign    = ( substr( $timezone, 0, 1 ) == '+' ) ? 1 : -1;\n\t\t$hours   = intval( substr( $timezone, 1, 2 ) );\n\t\t$minutes = intval( substr( $timezone, 3, 4 ) ) / 60;\n\t\t$offset  = $sign * HOUR_IN_SECONDS * ( $hours + $minutes );\n\t}\n\treturn $offset;\n}\n\n/**\n * Converts an iso8601 (Ymd\\TH:i:sO) date to MySQL DateTime (Y-m-d H:i:s) format used by post_date[_gmt].\n *\n * @since 1.5.0\n *\n * @param string $date_string Date and time in ISO 8601 format {@link https://en.wikipedia.org/wiki/ISO_8601}.\n * @param string $timezone    Optional. If set to 'gmt' returns the result in UTC. Default 'user'.\n * @return string|bool The date and time in MySQL DateTime format - Y-m-d H:i:s, or false on failure.\n */\nfunction iso8601_to_datetime( $date_string, $timezone = 'user' ) {\n\t$timezone    = strtolower( $timezone );\n\t$wp_timezone = wp_timezone();\n\t$datetime    = date_create( $date_string, $wp_timezone ); // Timezone is ignored if input has one.\n\n\tif ( false === $datetime ) {\n\t\treturn false;\n\t}\n\n\tif ( 'gmt' === $timezone ) {\n\t\treturn $datetime->setTimezone( new DateTimeZone( 'UTC' ) )->format( 'Y-m-d H:i:s' );\n\t}\n\n\tif ( 'user' === $timezone ) {\n\t\treturn $datetime->setTimezone( $wp_timezone )->format( 'Y-m-d H:i:s' );\n\t}\n\n\treturn false;\n}\n\n/**\n * Strips out all characters that are not allowable in an email.\n *\n * @since 1.5.0\n *\n * @param string $email Email address to filter.\n * @return string Filtered email address.\n */\nfunction sanitize_email( $email ) {\n\t// Test for the minimum length the email can be\n\tif ( strlen( $email ) < 6 ) {\n\t\t/**\n\t\t * Filters a sanitized email address.\n\t\t *\n\t\t * This filter is evaluated under several contexts, including 'email_too_short',\n\t\t * 'email_no_at', 'local_invalid_chars', 'domain_period_sequence', 'domain_period_limits',\n\t\t * 'domain_no_periods', 'domain_no_valid_subs', or no context.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param string $sanitized_email The sanitized email address.\n\t\t * @param string $email           The email address, as provided to sanitize_email().\n\t\t * @param string|null $message    A message to pass to the user. null if email is sanitized.\n\t\t */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'email_too_short' );\n\t}\n\n\t// Test for an @ character after the first position\n\tif ( strpos( $email, '@', 1 ) === false ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'email_no_at' );\n\t}\n\n\t// Split out the local and domain parts\n\tlist( $local, $domain ) = explode( '@', $email, 2 );\n\n\t// LOCAL PART\n\t// Test for invalid characters\n\t$local = preg_replace( '/[^a-zA-Z0-9!#$%&\\'*+\\/=?^_`{|}~\\.-]/', '', $local );\n\tif ( '' === $local ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'local_invalid_chars' );\n\t}\n\n\t// DOMAIN PART\n\t// Test for sequences of periods\n\t$domain = preg_replace( '/\\.{2,}/', '', $domain );\n\tif ( '' === $domain ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'domain_period_sequence' );\n\t}\n\n\t// Test for leading and trailing periods and whitespace\n\t$domain = trim( $domain, \" \\t\\n\\r\\0\\x0B.\" );\n\tif ( '' === $domain ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'domain_period_limits' );\n\t}\n\n\t// Split the domain into subs\n\t$subs = explode( '.', $domain );\n\n\t// Assume the domain will have at least two subs\n\tif ( 2 > count( $subs ) ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'domain_no_periods' );\n\t}\n\n\t// Create an array that will contain valid subs\n\t$new_subs = array();\n\n\t// Loop through each sub\n\tforeach ( $subs as $sub ) {\n\t\t// Test for leading and trailing hyphens\n\t\t$sub = trim( $sub, \" \\t\\n\\r\\0\\x0B-\" );\n\n\t\t// Test for invalid characters\n\t\t$sub = preg_replace( '/[^a-z0-9-]+/i', '', $sub );\n\n\t\t// If there's anything left, add it to the valid subs\n\t\tif ( '' !== $sub ) {\n\t\t\t$new_subs[] = $sub;\n\t\t}\n\t}\n\n\t// If there aren't 2 or more valid subs\n\tif ( 2 > count( $new_subs ) ) {\n\t\t/** This filter is documented in wp-includes/formatting.php */\n\t\treturn apply_filters( 'sanitize_email', '', $email, 'domain_no_valid_subs' );\n\t}\n\n\t// Join valid subs into the new domain\n\t$domain = join( '.', $new_subs );\n\n\t// Put the email back together\n\t$sanitized_email = $local . '@' . $domain;\n\n\t// Congratulations your email made it!\n\t/** This filter is documented in wp-includes/formatting.php */\n\treturn apply_filters( 'sanitize_email', $sanitized_email, $email, null );\n}\n\n/**\n * Determines the difference between two timestamps.\n *\n * The difference is returned in a human readable format such as \"1 hour\",\n * \"5 mins\", \"2 days\".\n *\n * @since 1.5.0\n * @since 5.3.0 Added support for showing a difference in seconds.\n *\n * @param int $from Unix timestamp from which the difference begins.\n * @param int $to   Optional. Unix timestamp to end the time difference. Default becomes time() if not set.\n * @return string Human readable time difference.\n */\nfunction human_time_diff( $from, $to = 0 ) {\n\tif ( empty( $to ) ) {\n\t\t$to = time();\n\t}\n\n\t$diff = (int) abs( $to - $from );\n\n\tif ( $diff < MINUTE_IN_SECONDS ) {\n\t\t$secs = $diff;\n\t\tif ( $secs <= 1 ) {\n\t\t\t$secs = 1;\n\t\t}\n\t\t/* translators: Time difference between two dates, in seconds. %s: Number of seconds. */\n\t\t$since = sprintf( _n( '%s second', '%s seconds', $secs ), $secs );\n\t} elseif ( $diff < HOUR_IN_SECONDS && $diff >= MINUTE_IN_SECONDS ) {\n\t\t$mins = round( $diff / MINUTE_IN_SECONDS );\n\t\tif ( $mins <= 1 ) {\n\t\t\t$mins = 1;\n\t\t}\n\t\t/* translators: Time difference between two dates, in minutes (min=minute). %s: Number of minutes. */\n\t\t$since = sprintf( _n( '%s min', '%s mins', $mins ), $mins );\n\t} elseif ( $diff < DAY_IN_SECONDS && $diff >= HOUR_IN_SECONDS ) {\n\t\t$hours = round( $diff / HOUR_IN_SECONDS );\n\t\tif ( $hours <= 1 ) {\n\t\t\t$hours = 1;\n\t\t}\n\t\t/* translators: Time difference between two dates, in hours. %s: Number of hours. */\n\t\t$since = sprintf( _n( '%s hour', '%s hours', $hours ), $hours );\n\t} elseif ( $diff < WEEK_IN_SECONDS && $diff >= DAY_IN_SECONDS ) {\n\t\t$days = round( $diff / DAY_IN_SECONDS );\n\t\tif ( $days <= 1 ) {\n\t\t\t$days = 1;\n\t\t}\n\t\t/* translators: Time difference between two dates, in days. %s: Number of days. */\n\t\t$since = sprintf( _n( '%s day', '%s days', $days ), $days );\n\t} elseif ( $diff < MONTH_IN_SECONDS && $diff >= WEEK_IN_SECONDS ) {\n\t\t$weeks = round( $diff / WEEK_IN_SECONDS );\n\t\tif ( $weeks <= 1 ) {\n\t\t\t$weeks = 1;\n\t\t}\n\t\t/* translators: Time difference between two dates, in weeks. %s: Number of weeks. */\n\t\t$since = sprintf( _n( '%s week', '%s weeks', $weeks ), $weeks );\n\t} elseif ( $diff < YEAR_IN_SECONDS && $diff >= MONTH_IN_SECONDS ) {\n\t\t$months = round( $diff / MONTH_IN_SECONDS );\n\t\tif ( $months <= 1 ) {\n\t\t\t$months = 1;\n\t\t}\n\t\t/* translators: Time difference between two dates, in months. %s: Number of months. */\n\t\t$since = sprintf( _n( '%s month', '%s months', $months ), $months );\n\t} elseif ( $diff >= YEAR_IN_SECONDS ) {\n\t\t$years = round( $diff / YEAR_IN_SECONDS );\n\t\tif ( $years <= 1 ) {\n\t\t\t$years = 1;\n\t\t}\n\t\t/* translators: Time difference between two dates, in years. %s: Number of years. */\n\t\t$since = sprintf( _n( '%s year', '%s years', $years ), $years );\n\t}\n\n\t/**\n\t * Filters the human readable difference between two timestamps.\n\t *\n\t * @since 4.0.0\n\t *\n\t * @param string $since The difference in human readable text.\n\t * @param int    $diff  The difference in seconds.\n\t * @param int    $from  Unix timestamp from which the difference begins.\n\t * @param int    $to    Unix timestamp to end the time difference.\n\t */\n\treturn apply_filters( 'human_time_diff', $since, $diff, $from, $to );\n}\n\n/**\n * Generates an excerpt from the content, if needed.\n *\n * Returns a maximum of 55 words with an ellipsis appended if necessary.\n *\n * The 55 word limit can be modified by plugins/themes using the {@see 'excerpt_length'} filter\n * The ' [&hellip;]' string can be modified by plugins/themes using the {@see 'excerpt_more'} filter\n *\n * @since 1.5.0\n * @since 5.2.0 Added the `$post` parameter.\n *\n * @param string             $text Optional. The excerpt. If set to empty, an excerpt is generated.\n * @param WP_Post|object|int $post Optional. WP_Post instance or Post ID/object. Default is null.\n * @return string The excerpt.\n */\nfunction wp_trim_excerpt( $text = '', $post = null ) {\n\t$raw_excerpt = $text;\n\tif ( '' == $text ) {\n\t\t$post = get_post( $post );\n\t\t$text = get_the_content( '', false, $post );\n\n\t\t$text = strip_shortcodes( $text );\n\t\t$text = excerpt_remove_blocks( $text );\n\n\t\t/** This filter is documented in wp-includes/post-template.php */\n\t\t$text = apply_filters( 'the_content', $text );\n\t\t$text = str_replace( ']]>', ']]&gt;', $text );\n\n\t\t/* translators: Maximum number of words used in a post excerpt. */\n\t\t$excerpt_length = intval( _x( '55', 'excerpt_length' ) );\n\n\t\t/**\n\t\t * Filters the maximum number of words in a post excerpt.\n\t\t *\n\t\t * @since 2.7.0\n\t\t *\n\t\t * @param int $number The maximum number of words. Default 55.\n\t\t */\n\t\t$excerpt_length = (int) apply_filters( 'excerpt_length', $excerpt_length );\n\n\t\t/**\n\t\t * Filters the string in the \"more\" link displayed after a trimmed excerpt.\n\t\t *\n\t\t * @since 2.9.0\n\t\t *\n\t\t * @param string $more_string The string shown within the more link.\n\t\t */\n\t\t$excerpt_more = apply_filters( 'excerpt_more', ' ' . '[&hellip;]' );\n\t\t$text         = wp_trim_words( $text, $excerpt_length, $excerpt_more );\n\t}\n\n\t/**\n\t * Filters the trimmed excerpt string.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $text        The trimmed text.\n\t * @param string $raw_excerpt The text prior to trimming.\n\t */\n\treturn apply_filters( 'wp_trim_excerpt', $text, $raw_excerpt );\n}\n\n/**\n * Trims text to a certain number of words.\n *\n * This function is localized. For languages that count 'words' by the individual\n * character (such as East Asian languages), the $num_words argument will apply\n * to the number of individual characters.\n *\n * @since 3.3.0\n *\n * @param string $text      Text to trim.\n * @param int    $num_words Number of words. Default 55.\n * @param string $more      Optional. What to append if $text needs to be trimmed. Default '&hellip;'.\n * @return string Trimmed text.\n */\nfunction wp_trim_words( $text, $num_words = 55, $more = null ) {\n\tif ( null === $more ) {\n\t\t$more = __( '&hellip;' );\n\t}\n\n\t$original_text = $text;\n\t$text          = wp_strip_all_tags( $text );\n\t$num_words     = (int) $num_words;\n\n\t/*\n\t * translators: If your word count is based on single characters (e.g. East Asian characters),\n\t * enter 'characters_excluding_spaces' or 'characters_including_spaces'. Otherwise, enter 'words'.\n\t * Do not translate into your own language.\n\t */\n\tif ( strpos( _x( 'words', 'Word count type. Do not translate!' ), 'characters' ) === 0 && preg_match( '/^utf\\-?8$/i', get_option( 'blog_charset' ) ) ) {\n\t\t$text = trim( preg_replace( \"/[\\n\\r\\t ]+/\", ' ', $text ), ' ' );\n\t\tpreg_match_all( '/./u', $text, $words_array );\n\t\t$words_array = array_slice( $words_array[0], 0, $num_words + 1 );\n\t\t$sep         = '';\n\t} else {\n\t\t$words_array = preg_split( \"/[\\n\\r\\t ]+/\", $text, $num_words + 1, PREG_SPLIT_NO_EMPTY );\n\t\t$sep         = ' ';\n\t}\n\n\tif ( count( $words_array ) > $num_words ) {\n\t\tarray_pop( $words_array );\n\t\t$text = implode( $sep, $words_array );\n\t\t$text = $text . $more;\n\t} else {\n\t\t$text = implode( $sep, $words_array );\n\t}\n\n\t/**\n\t * Filters the text content after words have been trimmed.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param string $text          The trimmed text.\n\t * @param int    $num_words     The number of words to trim the text to. Default 55.\n\t * @param string $more          An optional string to append to the end of the trimmed text, e.g. &hellip;.\n\t * @param string $original_text The text before it was trimmed.\n\t */\n\treturn apply_filters( 'wp_trim_words', $text, $num_words, $more, $original_text );\n}\n\n/**\n * Converts named entities into numbered entities.\n *\n * @since 1.5.1\n *\n * @param string $text The text within which entities will be converted.\n * @return string Text with converted entities.\n */\nfunction ent2ncr( $text ) {\n\n\t/**\n\t * Filters text before named entities are converted into numbered entities.\n\t *\n\t * A non-null string must be returned for the filter to be evaluated.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param string|null $converted_text The text to be converted. Default null.\n\t * @param string      $text           The text prior to entity conversion.\n\t */\n\t$filtered = apply_filters( 'pre_ent2ncr', null, $text );\n\tif ( null !== $filtered ) {\n\t\treturn $filtered;\n\t}\n\n\t$to_ncr = array(\n\t\t'&quot;'     => '&#34;',\n\t\t'&amp;'      => '&#38;',\n\t\t'&lt;'       => '&#60;',\n\t\t'&gt;'       => '&#62;',\n\t\t'|'          => '&#124;',\n\t\t'&nbsp;'     => '&#160;',\n\t\t'&iexcl;'    => '&#161;',\n\t\t'&cent;'     => '&#162;',\n\t\t'&pound;'    => '&#163;',\n\t\t'&curren;'   => '&#164;',\n\t\t'&yen;'      => '&#165;',\n\t\t'&brvbar;'   => '&#166;',\n\t\t'&brkbar;'   => '&#166;',\n\t\t'&sect;'     => '&#167;',\n\t\t'&uml;'      => '&#168;',\n\t\t'&die;'      => '&#168;',\n\t\t'&copy;'     => '&#169;',\n\t\t'&ordf;'     => '&#170;',\n\t\t'&laquo;'    => '&#171;',\n\t\t'&not;'      => '&#172;',\n\t\t'&shy;'      => '&#173;',\n\t\t'&reg;'      => '&#174;',\n\t\t'&macr;'     => '&#175;',\n\t\t'&hibar;'    => '&#175;',\n\t\t'&deg;'      => '&#176;',\n\t\t'&plusmn;'   => '&#177;',\n\t\t'&sup2;'     => '&#178;',\n\t\t'&sup3;'     => '&#179;',\n\t\t'&acute;'    => '&#180;',\n\t\t'&micro;'    => '&#181;',\n\t\t'&para;'     => '&#182;',\n\t\t'&middot;'   => '&#183;',\n\t\t'&cedil;'    => '&#184;',\n\t\t'&sup1;'     => '&#185;',\n\t\t'&ordm;'     => '&#186;',\n\t\t'&raquo;'    => '&#187;',\n\t\t'&frac14;'   => '&#188;',\n\t\t'&frac12;'   => '&#189;',\n\t\t'&frac34;'   => '&#190;',\n\t\t'&iquest;'   => '&#191;',\n\t\t'&Agrave;'   => '&#192;',\n\t\t'&Aacute;'   => '&#193;',\n\t\t'&Acirc;'    => '&#194;',\n\t\t'&Atilde;'   => '&#195;',\n\t\t'&Auml;'     => '&#196;',\n\t\t'&Aring;'    => '&#197;',\n\t\t'&AElig;'    => '&#198;',\n\t\t'&Ccedil;'   => '&#199;',\n\t\t'&Egrave;'   => '&#200;',\n\t\t'&Eacute;'   => '&#201;',\n\t\t'&Ecirc;'    => '&#202;',\n\t\t'&Euml;'     => '&#203;',\n\t\t'&Igrave;'   => '&#204;',\n\t\t'&Iacute;'   => '&#205;',\n\t\t'&Icirc;'    => '&#206;',\n\t\t'&Iuml;'     => '&#207;',\n\t\t'&ETH;'      => '&#208;',\n\t\t'&Ntilde;'   => '&#209;',\n\t\t'&Ograve;'   => '&#210;',\n\t\t'&Oacute;'   => '&#211;',\n\t\t'&Ocirc;'    => '&#212;',\n\t\t'&Otilde;'   => '&#213;',\n\t\t'&Ouml;'     => '&#214;',\n\t\t'&times;'    => '&#215;',\n\t\t'&Oslash;'   => '&#216;',\n\t\t'&Ugrave;'   => '&#217;',\n\t\t'&Uacute;'   => '&#218;',\n\t\t'&Ucirc;'    => '&#219;',\n\t\t'&Uuml;'     => '&#220;',\n\t\t'&Yacute;'   => '&#221;',\n\t\t'&THORN;'    => '&#222;',\n\t\t'&szlig;'    => '&#223;',\n\t\t'&agrave;'   => '&#224;',\n\t\t'&aacute;'   => '&#225;',\n\t\t'&acirc;'    => '&#226;',\n\t\t'&atilde;'   => '&#227;',\n\t\t'&auml;'     => '&#228;',\n\t\t'&aring;'    => '&#229;',\n\t\t'&aelig;'    => '&#230;',\n\t\t'&ccedil;'   => '&#231;',\n\t\t'&egrave;'   => '&#232;',\n\t\t'&eacute;'   => '&#233;',\n\t\t'&ecirc;'    => '&#234;',\n\t\t'&euml;'     => '&#235;',\n\t\t'&igrave;'   => '&#236;',\n\t\t'&iacute;'   => '&#237;',\n\t\t'&icirc;'    => '&#238;',\n\t\t'&iuml;'     => '&#239;',\n\t\t'&eth;'      => '&#240;',\n\t\t'&ntilde;'   => '&#241;',\n\t\t'&ograve;'   => '&#242;',\n\t\t'&oacute;'   => '&#243;',\n\t\t'&ocirc;'    => '&#244;',\n\t\t'&otilde;'   => '&#245;',\n\t\t'&ouml;'     => '&#246;',\n\t\t'&divide;'   => '&#247;',\n\t\t'&oslash;'   => '&#248;',\n\t\t'&ugrave;'   => '&#249;',\n\t\t'&uacute;'   => '&#250;',\n\t\t'&ucirc;'    => '&#251;',\n\t\t'&uuml;'     => '&#252;',\n\t\t'&yacute;'   => '&#253;',\n\t\t'&thorn;'    => '&#254;',\n\t\t'&yuml;'     => '&#255;',\n\t\t'&OElig;'    => '&#338;',\n\t\t'&oelig;'    => '&#339;',\n\t\t'&Scaron;'   => '&#352;',\n\t\t'&scaron;'   => '&#353;',\n\t\t'&Yuml;'     => '&#376;',\n\t\t'&fnof;'     => '&#402;',\n\t\t'&circ;'     => '&#710;',\n\t\t'&tilde;'    => '&#732;',\n\t\t'&Alpha;'    => '&#913;',\n\t\t'&Beta;'     => '&#914;',\n\t\t'&Gamma;'    => '&#915;',\n\t\t'&Delta;'    => '&#916;',\n\t\t'&Epsilon;'  => '&#917;',\n\t\t'&Zeta;'     => '&#918;',\n\t\t'&Eta;'      => '&#919;',\n\t\t'&Theta;'    => '&#920;',\n\t\t'&Iota;'     => '&#921;',\n\t\t'&Kappa;'    => '&#922;',\n\t\t'&Lambda;'   => '&#923;',\n\t\t'&Mu;'       => '&#924;',\n\t\t'&Nu;'       => '&#925;',\n\t\t'&Xi;'       => '&#926;',\n\t\t'&Omicron;'  => '&#927;',\n\t\t'&Pi;'       => '&#928;',\n\t\t'&Rho;'      => '&#929;',\n\t\t'&Sigma;'    => '&#931;',\n\t\t'&Tau;'      => '&#932;',\n\t\t'&Upsilon;'  => '&#933;',\n\t\t'&Phi;'      => '&#934;',\n\t\t'&Chi;'      => '&#935;',\n\t\t'&Psi;'      => '&#936;',\n\t\t'&Omega;'    => '&#937;',\n\t\t'&alpha;'    => '&#945;',\n\t\t'&beta;'     => '&#946;',\n\t\t'&gamma;'    => '&#947;',\n\t\t'&delta;'    => '&#948;',\n\t\t'&epsilon;'  => '&#949;',\n\t\t'&zeta;'     => '&#950;',\n\t\t'&eta;'      => '&#951;',\n\t\t'&theta;'    => '&#952;',\n\t\t'&iota;'     => '&#953;',\n\t\t'&kappa;'    => '&#954;',\n\t\t'&lambda;'   => '&#955;',\n\t\t'&mu;'       => '&#956;',\n\t\t'&nu;'       => '&#957;',\n\t\t'&xi;'       => '&#958;',\n\t\t'&omicron;'  => '&#959;',\n\t\t'&pi;'       => '&#960;',\n\t\t'&rho;'      => '&#961;',\n\t\t'&sigmaf;'   => '&#962;',\n\t\t'&sigma;'    => '&#963;',\n\t\t'&tau;'      => '&#964;',\n\t\t'&upsilon;'  => '&#965;',\n\t\t'&phi;'      => '&#966;',\n\t\t'&chi;'      => '&#967;',\n\t\t'&psi;'      => '&#968;',\n\t\t'&omega;'    => '&#969;',\n\t\t'&thetasym;' => '&#977;',\n\t\t'&upsih;'    => '&#978;',\n\t\t'&piv;'      => '&#982;',\n\t\t'&ensp;'     => '&#8194;',\n\t\t'&emsp;'     => '&#8195;',\n\t\t'&thinsp;'   => '&#8201;',\n\t\t'&zwnj;'     => '&#8204;',\n\t\t'&zwj;'      => '&#8205;',\n\t\t'&lrm;'      => '&#8206;',\n\t\t'&rlm;'      => '&#8207;',\n\t\t'&ndash;'    => '&#8211;',\n\t\t'&mdash;'    => '&#8212;',\n\t\t'&lsquo;'    => '&#8216;',\n\t\t'&rsquo;'    => '&#8217;',\n\t\t'&sbquo;'    => '&#8218;',\n\t\t'&ldquo;'    => '&#8220;',\n\t\t'&rdquo;'    => '&#8221;',\n\t\t'&bdquo;'    => '&#8222;',\n\t\t'&dagger;'   => '&#8224;',\n\t\t'&Dagger;'   => '&#8225;',\n\t\t'&bull;'     => '&#8226;',\n\t\t'&hellip;'   => '&#8230;',\n\t\t'&permil;'   => '&#8240;',\n\t\t'&prime;'    => '&#8242;',\n\t\t'&Prime;'    => '&#8243;',\n\t\t'&lsaquo;'   => '&#8249;',\n\t\t'&rsaquo;'   => '&#8250;',\n\t\t'&oline;'    => '&#8254;',\n\t\t'&frasl;'    => '&#8260;',\n\t\t'&euro;'     => '&#8364;',\n\t\t'&image;'    => '&#8465;',\n\t\t'&weierp;'   => '&#8472;',\n\t\t'&real;'     => '&#8476;',\n\t\t'&trade;'    => '&#8482;',\n\t\t'&alefsym;'  => '&#8501;',\n\t\t'&crarr;'    => '&#8629;',\n\t\t'&lArr;'     => '&#8656;',\n\t\t'&uArr;'     => '&#8657;',\n\t\t'&rArr;'     => '&#8658;',\n\t\t'&dArr;'     => '&#8659;',\n\t\t'&hArr;'     => '&#8660;',\n\t\t'&forall;'   => '&#8704;',\n\t\t'&part;'     => '&#8706;',\n\t\t'&exist;'    => '&#8707;',\n\t\t'&empty;'    => '&#8709;',\n\t\t'&nabla;'    => '&#8711;',\n\t\t'&isin;'     => '&#8712;',\n\t\t'&notin;'    => '&#8713;',\n\t\t'&ni;'       => '&#8715;',\n\t\t'&prod;'     => '&#8719;',\n\t\t'&sum;'      => '&#8721;',\n\t\t'&minus;'    => '&#8722;',\n\t\t'&lowast;'   => '&#8727;',\n\t\t'&radic;'    => '&#8730;',\n\t\t'&prop;'     => '&#8733;',\n\t\t'&infin;'    => '&#8734;',\n\t\t'&ang;'      => '&#8736;',\n\t\t'&and;'      => '&#8743;',\n\t\t'&or;'       => '&#8744;',\n\t\t'&cap;'      => '&#8745;',\n\t\t'&cup;'      => '&#8746;',\n\t\t'&int;'      => '&#8747;',\n\t\t'&there4;'   => '&#8756;',\n\t\t'&sim;'      => '&#8764;',\n\t\t'&cong;'     => '&#8773;',\n\t\t'&asymp;'    => '&#8776;',\n\t\t'&ne;'       => '&#8800;',\n\t\t'&equiv;'    => '&#8801;',\n\t\t'&le;'       => '&#8804;',\n\t\t'&ge;'       => '&#8805;',\n\t\t'&sub;'      => '&#8834;',\n\t\t'&sup;'      => '&#8835;',\n\t\t'&nsub;'     => '&#8836;',\n\t\t'&sube;'     => '&#8838;',\n\t\t'&supe;'     => '&#8839;',\n\t\t'&oplus;'    => '&#8853;',\n\t\t'&otimes;'   => '&#8855;',\n\t\t'&perp;'     => '&#8869;',\n\t\t'&sdot;'     => '&#8901;',\n\t\t'&lceil;'    => '&#8968;',\n\t\t'&rceil;'    => '&#8969;',\n\t\t'&lfloor;'   => '&#8970;',\n\t\t'&rfloor;'   => '&#8971;',\n\t\t'&lang;'     => '&#9001;',\n\t\t'&rang;'     => '&#9002;',\n\t\t'&larr;'     => '&#8592;',\n\t\t'&uarr;'     => '&#8593;',\n\t\t'&rarr;'     => '&#8594;',\n\t\t'&darr;'     => '&#8595;',\n\t\t'&harr;'     => '&#8596;',\n\t\t'&loz;'      => '&#9674;',\n\t\t'&spades;'   => '&#9824;',\n\t\t'&clubs;'    => '&#9827;',\n\t\t'&hearts;'   => '&#9829;',\n\t\t'&diams;'    => '&#9830;',\n\t);\n\n\treturn str_replace( array_keys( $to_ncr ), array_values( $to_ncr ), $text );\n}\n\n/**\n * Formats text for the editor.\n *\n * Generally the browsers treat everything inside a textarea as text, but\n * it is still a good idea to HTML entity encode `<`, `>` and `&` in the content.\n *\n * The filter {@see 'format_for_editor'} is applied here. If `$text` is empty the\n * filter will be applied to an empty string.\n *\n * @since 4.3.0\n *\n * @see _WP_Editors::editor()\n *\n * @param string $text           The text to be formatted.\n * @param string $default_editor The default editor for the current user.\n *                               It is usually either 'html' or 'tinymce'.\n * @return string The formatted text after filter is applied.\n */\nfunction format_for_editor( $text, $default_editor = null ) {\n\tif ( $text ) {\n\t\t$text = htmlspecialchars( $text, ENT_NOQUOTES, get_option( 'blog_charset' ) );\n\t}\n\n\t/**\n\t * Filters the text after it is formatted for the editor.\n\t *\n\t * @since 4.3.0\n\t *\n\t * @param string $text           The formatted text.\n\t * @param string $default_editor The default editor for the current user.\n\t *                               It is usually either 'html' or 'tinymce'.\n\t */\n\treturn apply_filters( 'format_for_editor', $text, $default_editor );\n}\n\n/**\n * Perform a deep string replace operation to ensure the values in $search are no longer present\n *\n * Repeats the replacement operation until it no longer replaces anything so as to remove \"nested\" values\n * e.g. $subject = '%0%0%0DDD', $search ='%0D', $result ='' rather than the '%0%0DD' that\n * str_replace would return\n *\n * @since 2.8.1\n * @access private\n *\n * @param string|array $search  The value being searched for, otherwise known as the needle.\n *                              An array may be used to designate multiple needles.\n * @param string       $subject The string being searched and replaced on, otherwise known as the haystack.\n * @return string The string with the replaced values.\n */\nfunction _deep_replace( $search, $subject ) {\n\t$subject = (string) $subject;\n\n\t$count = 1;\n\twhile ( $count ) {\n\t\t$subject = str_replace( $search, '', $subject, $count );\n\t}\n\n\treturn $subject;\n}\n\n/**\n * Escapes data for use in a MySQL query.\n *\n * Usually you should prepare queries using wpdb::prepare().\n * Sometimes, spot-escaping is required or useful. One example\n * is preparing an array for use in an IN clause.\n *\n * NOTE: Since 4.8.3, '%' characters will be replaced with a placeholder string,\n * this prevents certain SQLi attacks from taking place. This change in behaviour\n * may cause issues for code that expects the return value of esc_sql() to be useable\n * for other purposes.\n *\n * @since 2.8.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string|array $data Unescaped data\n * @return string|array Escaped data\n */\nfunction esc_sql( $data ) {\n\tglobal $wpdb;\n\treturn $wpdb->_escape( $data );\n}\n\n/**\n * Checks and cleans a URL.\n *\n * A number of characters are removed from the URL. If the URL is for displaying\n * (the default behaviour) ampersands are also replaced. The {@see 'clean_url'} filter\n * is applied to the returned cleaned URL.\n *\n * @since 2.8.0\n *\n * @param string $url       The URL to be cleaned.\n * @param array  $protocols Optional. An array of acceptable protocols.\n *                          Defaults to return value of wp_allowed_protocols()\n * @param string $_context  Private. Use esc_url_raw() for database usage.\n * @return string The cleaned $url after the {@see 'clean_url'} filter is applied.\n */\nfunction esc_url( $url, $protocols = null, $_context = 'display' ) {\n\t$original_url = $url;\n\n\tif ( '' == $url ) {\n\t\treturn $url;\n\t}\n\n\t$url = str_replace( ' ', '%20', ltrim( $url ) );\n\t$url = preg_replace( '|[^a-z0-9-~+_.?#=!&;,/:%@$\\|*\\'()\\[\\]\\\\x80-\\\\xff]|i', '', $url );\n\n\tif ( '' === $url ) {\n\t\treturn $url;\n\t}\n\n\tif ( 0 !== stripos( $url, 'mailto:' ) ) {\n\t\t$strip = array( '%0d', '%0a', '%0D', '%0A' );\n\t\t$url   = _deep_replace( $strip, $url );\n\t}\n\n\t$url = str_replace( ';//', '://', $url );\n\t/* If the URL doesn't appear to contain a scheme, we\n\t * presume it needs http:// prepended (unless a relative\n\t * link starting with /, # or ? or a php file).\n\t */\n\tif ( strpos( $url, ':' ) === false && ! in_array( $url[0], array( '/', '#', '?' ) ) &&\n\t\t! preg_match( '/^[a-z0-9-]+?\\.php/i', $url ) ) {\n\t\t$url = 'http://' . $url;\n\t}\n\n\t// Replace ampersands and single quotes only when displaying.\n\tif ( 'display' == $_context ) {\n\t\t$url = wp_kses_normalize_entities( $url );\n\t\t$url = str_replace( '&amp;', '&#038;', $url );\n\t\t$url = str_replace( \"'\", '&#039;', $url );\n\t}\n\n\tif ( ( false !== strpos( $url, '[' ) ) || ( false !== strpos( $url, ']' ) ) ) {\n\n\t\t$parsed = wp_parse_url( $url );\n\t\t$front  = '';\n\n\t\tif ( isset( $parsed['scheme'] ) ) {\n\t\t\t$front .= $parsed['scheme'] . '://';\n\t\t} elseif ( '/' === $url[0] ) {\n\t\t\t$front .= '//';\n\t\t}\n\n\t\tif ( isset( $parsed['user'] ) ) {\n\t\t\t$front .= $parsed['user'];\n\t\t}\n\n\t\tif ( isset( $parsed['pass'] ) ) {\n\t\t\t$front .= ':' . $parsed['pass'];\n\t\t}\n\n\t\tif ( isset( $parsed['user'] ) || isset( $parsed['pass'] ) ) {\n\t\t\t$front .= '@';\n\t\t}\n\n\t\tif ( isset( $parsed['host'] ) ) {\n\t\t\t$front .= $parsed['host'];\n\t\t}\n\n\t\tif ( isset( $parsed['port'] ) ) {\n\t\t\t$front .= ':' . $parsed['port'];\n\t\t}\n\n\t\t$end_dirty = str_replace( $front, '', $url );\n\t\t$end_clean = str_replace( array( '[', ']' ), array( '%5B', '%5D' ), $end_dirty );\n\t\t$url       = str_replace( $end_dirty, $end_clean, $url );\n\n\t}\n\n\tif ( '/' === $url[0] ) {\n\t\t$good_protocol_url = $url;\n\t} else {\n\t\tif ( ! is_array( $protocols ) ) {\n\t\t\t$protocols = wp_allowed_protocols();\n\t\t}\n\t\t$good_protocol_url = wp_kses_bad_protocol( $url, $protocols );\n\t\tif ( strtolower( $good_protocol_url ) != strtolower( $url ) ) {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\t/**\n\t * Filters a string cleaned and escaped for output as a URL.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $good_protocol_url The cleaned URL to be returned.\n\t * @param string $original_url      The URL prior to cleaning.\n\t * @param string $_context          If 'display', replace ampersands and single quotes only.\n\t */\n\treturn apply_filters( 'clean_url', $good_protocol_url, $original_url, $_context );\n}\n\n/**\n * Performs esc_url() for database usage.\n *\n * @since 2.8.0\n *\n * @param string $url       The URL to be cleaned.\n * @param array  $protocols An array of acceptable protocols.\n * @return string The cleaned URL.\n */\nfunction esc_url_raw( $url, $protocols = null ) {\n\treturn esc_url( $url, $protocols, 'db' );\n}\n\n/**\n * Convert entities, while preserving already-encoded entities.\n *\n * @link https://secure.php.net/htmlentities Borrowed from the PHP Manual user notes.\n *\n * @since 1.2.2\n *\n * @param string $myHTML The text to be converted.\n * @return string Converted text.\n */\nfunction htmlentities2( $myHTML ) {\n\t$translation_table              = get_html_translation_table( HTML_ENTITIES, ENT_QUOTES );\n\t$translation_table[ chr( 38 ) ] = '&';\n\treturn preg_replace( '/&(?![A-Za-z]{0,4}\\w{2,3};|#[0-9]{2,3};)/', '&amp;', strtr( $myHTML, $translation_table ) );\n}\n\n/**\n * Escape single quotes, htmlspecialchar \" < > &, and fix line endings.\n *\n * Escapes text strings for echoing in JS. It is intended to be used for inline JS\n * (in a tag attribute, for example onclick=\"...\"). Note that the strings have to\n * be in single quotes. The {@see 'js_escape'} filter is also applied here.\n *\n * @since 2.8.0\n *\n * @param string $text The text to be escaped.\n * @return string Escaped text.\n */\nfunction esc_js( $text ) {\n\t$safe_text = wp_check_invalid_utf8( $text );\n\t$safe_text = _wp_specialchars( $safe_text, ENT_COMPAT );\n\t$safe_text = preg_replace( '/&#(x)?0*(?(1)27|39);?/i', \"'\", stripslashes( $safe_text ) );\n\t$safe_text = str_replace( \"\\r\", '', $safe_text );\n\t$safe_text = str_replace( \"\\n\", '\\\\n', addslashes( $safe_text ) );\n\t/**\n\t * Filters a string cleaned and escaped for output in JavaScript.\n\t *\n\t * Text passed to esc_js() is stripped of invalid or special characters,\n\t * and properly slashed for output.\n\t *\n\t * @since 2.0.6\n\t *\n\t * @param string $safe_text The text after it has been escaped.\n\t * @param string $text      The text prior to being escaped.\n\t */\n\treturn apply_filters( 'js_escape', $safe_text, $text );\n}\n\n/**\n * Escaping for HTML blocks.\n *\n * @since 2.8.0\n *\n * @param string $text\n * @return string\n */\nfunction esc_html( $text ) {\n\t$safe_text = wp_check_invalid_utf8( $text );\n\t$safe_text = _wp_specialchars( $safe_text, ENT_QUOTES );\n\t/**\n\t * Filters a string cleaned and escaped for output in HTML.\n\t *\n\t * Text passed to esc_html() is stripped of invalid or special characters\n\t * before output.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $safe_text The text after it has been escaped.\n\t * @param string $text      The text prior to being escaped.\n\t */\n\treturn apply_filters( 'esc_html', $safe_text, $text );\n}\n\n/**\n * Escaping for HTML attributes.\n *\n * @since 2.8.0\n *\n * @param string $text\n * @return string\n */\nfunction esc_attr( $text ) {\n\t$safe_text = wp_check_invalid_utf8( $text );\n\t$safe_text = _wp_specialchars( $safe_text, ENT_QUOTES );\n\t/**\n\t * Filters a string cleaned and escaped for output in an HTML attribute.\n\t *\n\t * Text passed to esc_attr() is stripped of invalid or special characters\n\t * before output.\n\t *\n\t * @since 2.0.6\n\t *\n\t * @param string $safe_text The text after it has been escaped.\n\t * @param string $text      The text prior to being escaped.\n\t */\n\treturn apply_filters( 'attribute_escape', $safe_text, $text );\n}\n\n/**\n * Escaping for textarea values.\n *\n * @since 3.1.0\n *\n * @param string $text\n * @return string\n */\nfunction esc_textarea( $text ) {\n\t$safe_text = htmlspecialchars( $text, ENT_QUOTES, get_option( 'blog_charset' ) );\n\t/**\n\t * Filters a string cleaned and escaped for output in a textarea element.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param string $safe_text The text after it has been escaped.\n\t * @param string $text      The text prior to being escaped.\n\t */\n\treturn apply_filters( 'esc_textarea', $safe_text, $text );\n}\n\n/**\n * Escape an HTML tag name.\n *\n * @since 2.5.0\n *\n * @param string $tag_name\n * @return string\n */\nfunction tag_escape( $tag_name ) {\n\t$safe_tag = strtolower( preg_replace( '/[^a-zA-Z0-9_:]/', '', $tag_name ) );\n\t/**\n\t * Filters a string cleaned and escaped for output as an HTML tag.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $safe_tag The tag name after it has been escaped.\n\t * @param string $tag_name The text before it was escaped.\n\t */\n\treturn apply_filters( 'tag_escape', $safe_tag, $tag_name );\n}\n\n/**\n * Convert full URL paths to absolute paths.\n *\n * Removes the http or https protocols and the domain. Keeps the path '/' at the\n * beginning, so it isn't a true relative link, but from the web root base.\n *\n * @since 2.1.0\n * @since 4.1.0 Support was added for relative URLs.\n *\n * @param string $link Full URL path.\n * @return string Absolute path.\n */\nfunction wp_make_link_relative( $link ) {\n\treturn preg_replace( '|^(https?:)?//[^/]+(/?.*)|i', '$2', $link );\n}\n\n/**\n * Sanitises various option values based on the nature of the option.\n *\n * This is basically a switch statement which will pass $value through a number\n * of functions depending on the $option.\n *\n * @since 2.0.5\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $option The name of the option.\n * @param string $value  The unsanitised value.\n * @return string Sanitized value.\n */\nfunction sanitize_option( $option, $value ) {\n\tglobal $wpdb;\n\n\t$original_value = $value;\n\t$error          = '';\n\n\tswitch ( $option ) {\n\t\tcase 'admin_email':\n\t\tcase 'new_admin_email':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\t$value = sanitize_email( $value );\n\t\t\t\tif ( ! is_email( $value ) ) {\n\t\t\t\t\t$error = __( 'The email address entered did not appear to be a valid email address. Please enter a valid email address.' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'thumbnail_size_w':\n\t\tcase 'thumbnail_size_h':\n\t\tcase 'medium_size_w':\n\t\tcase 'medium_size_h':\n\t\tcase 'medium_large_size_w':\n\t\tcase 'medium_large_size_h':\n\t\tcase 'large_size_w':\n\t\tcase 'large_size_h':\n\t\tcase 'mailserver_port':\n\t\tcase 'comment_max_links':\n\t\tcase 'page_on_front':\n\t\tcase 'page_for_posts':\n\t\tcase 'rss_excerpt_length':\n\t\tcase 'default_category':\n\t\tcase 'default_email_category':\n\t\tcase 'default_link_category':\n\t\tcase 'close_comments_days_old':\n\t\tcase 'comments_per_page':\n\t\tcase 'thread_comments_depth':\n\t\tcase 'users_can_register':\n\t\tcase 'start_of_week':\n\t\tcase 'site_icon':\n\t\t\t$value = absint( $value );\n\t\t\tbreak;\n\n\t\tcase 'posts_per_page':\n\t\tcase 'posts_per_rss':\n\t\t\t$value = (int) $value;\n\t\t\tif ( empty( $value ) ) {\n\t\t\t\t$value = 1;\n\t\t\t}\n\t\t\tif ( $value < -1 ) {\n\t\t\t\t$value = abs( $value );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'default_ping_status':\n\t\tcase 'default_comment_status':\n\t\t\t// Options that if not there have 0 value but need to be something like \"closed\"\n\t\t\tif ( $value == '0' || $value == '' ) {\n\t\t\t\t$value = 'closed';\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'blogdescription':\n\t\tcase 'blogname':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( $value !== $original_value ) {\n\t\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', wp_encode_emoji( $original_value ) );\n\t\t\t}\n\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\t$value = esc_html( $value );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'blog_charset':\n\t\t\t$value = preg_replace( '/[^a-zA-Z0-9_-]/', '', $value ); // strips slashes\n\t\t\tbreak;\n\n\t\tcase 'blog_public':\n\t\t\t// This is the value if the settings checkbox is not checked on POST. Don't rely on this.\n\t\t\tif ( null === $value ) {\n\t\t\t\t$value = 1;\n\t\t\t} else {\n\t\t\t\t$value = intval( $value );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'date_format':\n\t\tcase 'time_format':\n\t\tcase 'mailserver_url':\n\t\tcase 'mailserver_login':\n\t\tcase 'mailserver_pass':\n\t\tcase 'upload_path':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\t$value = strip_tags( $value );\n\t\t\t\t$value = wp_kses_data( $value );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'ping_sites':\n\t\t\t$value = explode( \"\\n\", $value );\n\t\t\t$value = array_filter( array_map( 'trim', $value ) );\n\t\t\t$value = array_filter( array_map( 'esc_url_raw', $value ) );\n\t\t\t$value = implode( \"\\n\", $value );\n\t\t\tbreak;\n\n\t\tcase 'gmt_offset':\n\t\t\t$value = preg_replace( '/[^0-9:.-]/', '', $value ); // strips slashes\n\t\t\tbreak;\n\n\t\tcase 'siteurl':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\tif ( preg_match( '#http(s?)://(.+)#i', $value ) ) {\n\t\t\t\t\t$value = esc_url_raw( $value );\n\t\t\t\t} else {\n\t\t\t\t\t$error = __( 'The WordPress address you entered did not appear to be a valid URL. Please enter a valid URL.' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'home':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\tif ( preg_match( '#http(s?)://(.+)#i', $value ) ) {\n\t\t\t\t\t$value = esc_url_raw( $value );\n\t\t\t\t} else {\n\t\t\t\t\t$error = __( 'The Site address you entered did not appear to be a valid URL. Please enter a valid URL.' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'WPLANG':\n\t\t\t$allowed = get_available_languages();\n\t\t\tif ( ! is_multisite() && defined( 'WPLANG' ) && '' !== WPLANG && 'en_US' !== WPLANG ) {\n\t\t\t\t$allowed[] = WPLANG;\n\t\t\t}\n\t\t\tif ( ! in_array( $value, $allowed ) && ! empty( $value ) ) {\n\t\t\t\t$value = get_option( $option );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'illegal_names':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\tif ( ! is_array( $value ) ) {\n\t\t\t\t\t$value = explode( ' ', $value );\n\t\t\t\t}\n\n\t\t\t\t$value = array_values( array_filter( array_map( 'trim', $value ) ) );\n\n\t\t\t\tif ( ! $value ) {\n\t\t\t\t\t$value = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'limited_email_domains':\n\t\tcase 'banned_email_domains':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\tif ( ! is_array( $value ) ) {\n\t\t\t\t\t$value = explode( \"\\n\", $value );\n\t\t\t\t}\n\n\t\t\t\t$domains = array_values( array_filter( array_map( 'trim', $value ) ) );\n\t\t\t\t$value   = array();\n\n\t\t\t\tforeach ( $domains as $domain ) {\n\t\t\t\t\tif ( ! preg_match( '/(--|\\.\\.)/', $domain ) && preg_match( '|^([a-zA-Z0-9-\\.])+$|', $domain ) ) {\n\t\t\t\t\t\t$value[] = $domain;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( ! $value ) {\n\t\t\t\t\t$value = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'timezone_string':\n\t\t\t$allowed_zones = timezone_identifiers_list();\n\t\t\tif ( ! in_array( $value, $allowed_zones ) && ! empty( $value ) ) {\n\t\t\t\t$error = __( 'The timezone you have entered is not valid. Please select a valid timezone.' );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'permalink_structure':\n\t\tcase 'category_base':\n\t\tcase 'tag_base':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\t$value = esc_url_raw( $value );\n\t\t\t\t$value = str_replace( 'http://', '', $value );\n\t\t\t}\n\n\t\t\tif ( 'permalink_structure' === $option && '' !== $value && ! preg_match( '/%[^\\/%]+%/', $value ) ) {\n\t\t\t\t$error = sprintf(\n\t\t\t\t\t/* translators: %s: Documentation URL. */\n\t\t\t\t\t__( 'A structure tag is required when using custom permalinks. <a href=\"%s\">Learn more</a>' ),\n\t\t\t\t\t__( 'https://wordpress.org/support/article/using-permalinks/#choosing-your-permalink-structure' )\n\t\t\t\t);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'default_role':\n\t\t\tif ( ! get_role( $value ) && get_role( 'subscriber' ) ) {\n\t\t\t\t$value = 'subscriber';\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'moderation_keys':\n\t\tcase 'blacklist_keys':\n\t\t\t$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );\n\t\t\tif ( is_wp_error( $value ) ) {\n\t\t\t\t$error = $value->get_error_message();\n\t\t\t} else {\n\t\t\t\t$value = explode( \"\\n\", $value );\n\t\t\t\t$value = array_filter( array_map( 'trim', $value ) );\n\t\t\t\t$value = array_unique( $value );\n\t\t\t\t$value = implode( \"\\n\", $value );\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\tif ( ! empty( $error ) ) {\n\t\t$value = get_option( $option );\n\t\tif ( function_exists( 'add_settings_error' ) ) {\n\t\t\tadd_settings_error( $option, \"invalid_{$option}\", $error );\n\t\t}\n\t}\n\n\t/**\n\t * Filters an option value following sanitization.\n\t *\n\t * @since 2.3.0\n\t * @since 4.3.0 Added the `$original_value` parameter.\n\t *\n\t * @param string $value          The sanitized option value.\n\t * @param string $option         The option name.\n\t * @param string $original_value The original value passed to the function.\n\t */\n\treturn apply_filters( \"sanitize_option_{$option}\", $value, $option, $original_value );\n}\n\n/**\n * Maps a function to all non-iterable elements of an array or an object.\n *\n * This is similar to `array_walk_recursive()` but acts upon objects too.\n *\n * @since 4.4.0\n *\n * @param mixed    $value    The array, object, or scalar.\n * @param callable $callback The function to map onto $value.\n * @return mixed The value with the callback applied to all non-arrays and non-objects inside it.\n */\nfunction map_deep( $value, $callback ) {\n\tif ( is_array( $value ) ) {\n\t\tforeach ( $value as $index => $item ) {\n\t\t\t$value[ $index ] = map_deep( $item, $callback );\n\t\t}\n\t} elseif ( is_object( $value ) ) {\n\t\t$object_vars = get_object_vars( $value );\n\t\tforeach ( $object_vars as $property_name => $property_value ) {\n\t\t\t$value->$property_name = map_deep( $property_value, $callback );\n\t\t}\n\t} else {\n\t\t$value = call_user_func( $callback, $value );\n\t}\n\n\treturn $value;\n}\n\n/**\n * Parses a string into variables to be stored in an array.\n *\n *\n * @since 2.2.1\n *\n * @param string $string The string to be parsed.\n * @param array  $array  Variables will be stored in this array.\n */\nfunction wp_parse_str( $string, &$array ) {\n\tparse_str( $string, $array );\n\n\t/**\n\t * Filters the array of variables derived from a parsed string.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param array $array The array populated with variables.\n\t */\n\t$array = apply_filters( 'wp_parse_str', $array );\n}\n\n/**\n * Convert lone less than signs.\n *\n * KSES already converts lone greater than signs.\n *\n * @since 2.3.0\n *\n * @param string $text Text to be converted.\n * @return string Converted text.\n */\nfunction wp_pre_kses_less_than( $text ) {\n\treturn preg_replace_callback( '%<[^>]*?((?=<)|>|$)%', 'wp_pre_kses_less_than_callback', $text );\n}\n\n/**\n * Callback function used by preg_replace.\n *\n * @since 2.3.0\n *\n * @param array $matches Populated by matches to preg_replace.\n * @return string The text returned after esc_html if needed.\n */\nfunction wp_pre_kses_less_than_callback( $matches ) {\n\tif ( false === strpos( $matches[0], '>' ) ) {\n\t\treturn esc_html( $matches[0] );\n\t}\n\treturn $matches[0];\n}\n\n/**\n * Remove non-allowable HTML from parsed block attribute values when filtering\n * in the post context.\n *\n * @since 5.3.1\n *\n * @param string         $string            Content to be run through KSES.\n * @param array[]|string $allowed_html      An array of allowed HTML elements\n *                                          and attributes, or a context name\n *                                          such as 'post'.\n * @param string[]       $allowed_protocols Array of allowed URL protocols.\n * @return string Filtered text to run through KSES.\n */\nfunction wp_pre_kses_block_attributes( $string, $allowed_html, $allowed_protocols ) {\n\t/*\n\t * `filter_block_content` is expected to call `wp_kses`. Temporarily remove\n\t * the filter to avoid recursion.\n\t */\n\tremove_filter( 'pre_kses', 'wp_pre_kses_block_attributes', 10 );\n\t$string = filter_block_content( $string, $allowed_html, $allowed_protocols );\n\tadd_filter( 'pre_kses', 'wp_pre_kses_block_attributes', 10, 3 );\n\n\treturn $string;\n}\n\n/**\n * WordPress implementation of PHP sprintf() with filters.\n *\n * @since 2.5.0\n * @since 5.3.0 Formalized the existing and already documented `...$args` parameter\n *              by adding it to the function signature.\n *\n * @link https://secure.php.net/sprintf\n *\n * @param string $pattern The string which formatted args are inserted.\n * @param mixed  ...$args Arguments to be formatted into the $pattern string.\n * @return string The formatted string.\n */\nfunction wp_sprintf( $pattern, ...$args ) {\n\t$len       = strlen( $pattern );\n\t$start     = 0;\n\t$result    = '';\n\t$arg_index = 0;\n\twhile ( $len > $start ) {\n\t\t// Last character: append and break\n\t\tif ( strlen( $pattern ) - 1 == $start ) {\n\t\t\t$result .= substr( $pattern, -1 );\n\t\t\tbreak;\n\t\t}\n\n\t\t// Literal %: append and continue\n\t\tif ( substr( $pattern, $start, 2 ) == '%%' ) {\n\t\t\t$start  += 2;\n\t\t\t$result .= '%';\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Get fragment before next %\n\t\t$end = strpos( $pattern, '%', $start + 1 );\n\t\tif ( false === $end ) {\n\t\t\t$end = $len;\n\t\t}\n\t\t$fragment = substr( $pattern, $start, $end - $start );\n\n\t\t// Fragment has a specifier\n\t\tif ( $pattern[ $start ] == '%' ) {\n\t\t\t// Find numbered arguments or take the next one in order\n\t\t\tif ( preg_match( '/^%(\\d+)\\$/', $fragment, $matches ) ) {\n\t\t\t\t$index    = $matches[1] - 1; // 0-based array vs 1-based sprintf arguments.\n\t\t\t\t$arg      = isset( $args[ $index ] ) ? $args[ $index ] : '';\n\t\t\t\t$fragment = str_replace( \"%{$matches[1]}$\", '%', $fragment );\n\t\t\t} else {\n\t\t\t\t$arg = isset( $args[ $arg_index ] ) ? $args[ $arg_index ] : '';\n\t\t\t\t++$arg_index;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Filters a fragment from the pattern passed to wp_sprintf().\n\t\t\t *\n\t\t\t * If the fragment is unchanged, then sprintf() will be run on the fragment.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t *\n\t\t\t * @param string $fragment A fragment from the pattern.\n\t\t\t * @param string $arg      The argument.\n\t\t\t */\n\t\t\t$_fragment = apply_filters( 'wp_sprintf', $fragment, $arg );\n\t\t\tif ( $_fragment != $fragment ) {\n\t\t\t\t$fragment = $_fragment;\n\t\t\t} else {\n\t\t\t\t$fragment = sprintf( $fragment, strval( $arg ) );\n\t\t\t}\n\t\t}\n\n\t\t// Append to result and move to next fragment\n\t\t$result .= $fragment;\n\t\t$start   = $end;\n\t}\n\treturn $result;\n}\n\n/**\n * Localize list items before the rest of the content.\n *\n * The '%l' must be at the first characters can then contain the rest of the\n * content. The list items will have ', ', ', and', and ' and ' added depending\n * on the amount of list items in the $args parameter.\n *\n * @since 2.5.0\n *\n * @param string $pattern Content containing '%l' at the beginning.\n * @param array  $args    List items to prepend to the content and replace '%l'.\n * @return string Localized list items and rest of the content.\n */\nfunction wp_sprintf_l( $pattern, $args ) {\n\t// Not a match\n\tif ( substr( $pattern, 0, 2 ) != '%l' ) {\n\t\treturn $pattern;\n\t}\n\n\t// Nothing to work with\n\tif ( empty( $args ) ) {\n\t\treturn '';\n\t}\n\n\t/**\n\t * Filters the translated delimiters used by wp_sprintf_l().\n\t * Placeholders (%s) are included to assist translators and then\n\t * removed before the array of strings reaches the filter.\n\t *\n\t * Please note: Ampersands and entities should be avoided here.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param array $delimiters An array of translated delimiters.\n\t */\n\t$l = apply_filters(\n\t\t'wp_sprintf_l',\n\t\tarray(\n\t\t\t/* translators: Used to join items in a list with more than 2 items. */\n\t\t\t'between'          => sprintf( __( '%1$s, %2$s' ), '', '' ),\n\t\t\t/* translators: Used to join last two items in a list with more than 2 times. */\n\t\t\t'between_last_two' => sprintf( __( '%1$s, and %2$s' ), '', '' ),\n\t\t\t/* translators: Used to join items in a list with only 2 items. */\n\t\t\t'between_only_two' => sprintf( __( '%1$s and %2$s' ), '', '' ),\n\t\t)\n\t);\n\n\t$args   = (array) $args;\n\t$result = array_shift( $args );\n\tif ( count( $args ) == 1 ) {\n\t\t$result .= $l['between_only_two'] . array_shift( $args );\n\t}\n\t// Loop when more than two args\n\t$i = count( $args );\n\twhile ( $i ) {\n\t\t$arg = array_shift( $args );\n\t\t$i--;\n\t\tif ( 0 == $i ) {\n\t\t\t$result .= $l['between_last_two'] . $arg;\n\t\t} else {\n\t\t\t$result .= $l['between'] . $arg;\n\t\t}\n\t}\n\treturn $result . substr( $pattern, 2 );\n}\n\n/**\n * Safely extracts not more than the first $count characters from html string.\n *\n * UTF-8, tags and entities safe prefix extraction. Entities inside will *NOT*\n * be counted as one character. For example &amp; will be counted as 4, &lt; as\n * 3, etc.\n *\n * @since 2.5.0\n *\n * @param string $str   String to get the excerpt from.\n * @param int    $count Maximum number of characters to take.\n * @param string $more  Optional. What to append if $str needs to be trimmed. Defaults to empty string.\n * @return string The excerpt.\n */\nfunction wp_html_excerpt( $str, $count, $more = null ) {\n\tif ( null === $more ) {\n\t\t$more = '';\n\t}\n\t$str     = wp_strip_all_tags( $str, true );\n\t$excerpt = mb_substr( $str, 0, $count );\n\t// remove part of an entity at the end\n\t$excerpt = preg_replace( '/&[^;\\s]{0,6}$/', '', $excerpt );\n\tif ( $str != $excerpt ) {\n\t\t$excerpt = trim( $excerpt ) . $more;\n\t}\n\treturn $excerpt;\n}\n\n/**\n * Add a Base url to relative links in passed content.\n *\n * By default it supports the 'src' and 'href' attributes. However this can be\n * changed via the 3rd param.\n *\n * @since 2.7.0\n *\n * @global string $_links_add_base\n *\n * @param string $content String to search for links in.\n * @param string $base    The base URL to prefix to links.\n * @param array  $attrs   The attributes which should be processed.\n * @return string The processed content.\n */\nfunction links_add_base_url( $content, $base, $attrs = array( 'src', 'href' ) ) {\n\tglobal $_links_add_base;\n\t$_links_add_base = $base;\n\t$attrs           = implode( '|', (array) $attrs );\n\treturn preg_replace_callback( \"!($attrs)=(['\\\"])(.+?)\\\\2!i\", '_links_add_base', $content );\n}\n\n/**\n * Callback to add a base url to relative links in passed content.\n *\n * @since 2.7.0\n * @access private\n *\n * @global string $_links_add_base\n *\n * @param string $m The matched link.\n * @return string The processed link.\n */\nfunction _links_add_base( $m ) {\n\tglobal $_links_add_base;\n\t//1 = attribute name  2 = quotation mark  3 = URL\n\treturn $m[1] . '=' . $m[2] .\n\t\t( preg_match( '#^(\\w{1,20}):#', $m[3], $protocol ) && in_array( $protocol[1], wp_allowed_protocols() ) ?\n\t\t\t$m[3] :\n\t\t\tWP_Http::make_absolute_url( $m[3], $_links_add_base )\n\t\t)\n\t\t. $m[2];\n}\n\n/**\n * Adds a Target attribute to all links in passed content.\n *\n * This function by default only applies to `<a>` tags, however this can be\n * modified by the 3rd param.\n *\n * *NOTE:* Any current target attributed will be stripped and replaced.\n *\n * @since 2.7.0\n *\n * @global string $_links_add_target\n *\n * @param string $content String to search for links in.\n * @param string $target  The Target to add to the links.\n * @param array  $tags    An array of tags to apply to.\n * @return string The processed content.\n */\nfunction links_add_target( $content, $target = '_blank', $tags = array( 'a' ) ) {\n\tglobal $_links_add_target;\n\t$_links_add_target = $target;\n\t$tags              = implode( '|', (array) $tags );\n\treturn preg_replace_callback( \"!<($tags)([^>]*)>!i\", '_links_add_target', $content );\n}\n\n/**\n * Callback to add a target attribute to all links in passed content.\n *\n * @since 2.7.0\n * @access private\n *\n * @global string $_links_add_target\n *\n * @param string $m The matched link.\n * @return string The processed link.\n */\nfunction _links_add_target( $m ) {\n\tglobal $_links_add_target;\n\t$tag  = $m[1];\n\t$link = preg_replace( '|( target=([\\'\"])(.*?)\\2)|i', '', $m[2] );\n\treturn '<' . $tag . $link . ' target=\"' . esc_attr( $_links_add_target ) . '\">';\n}\n\n/**\n * Normalize EOL characters and strip duplicate whitespace.\n *\n * @since 2.7.0\n *\n * @param string $str The string to normalize.\n * @return string The normalized string.\n */\nfunction normalize_whitespace( $str ) {\n\t$str = trim( $str );\n\t$str = str_replace( \"\\r\", \"\\n\", $str );\n\t$str = preg_replace( array( '/\\n+/', '/[ \\t]+/' ), array( \"\\n\", ' ' ), $str );\n\treturn $str;\n}\n\n/**\n * Properly strip all HTML tags including script and style\n *\n * This differs from strip_tags() because it removes the contents of\n * the `<script>` and `<style>` tags. E.g. `strip_tags( '<script>something</script>' )`\n * will return 'something'. wp_strip_all_tags will return ''\n *\n * @since 2.9.0\n *\n * @param string $string        String containing HTML tags\n * @param bool   $remove_breaks Optional. Whether to remove left over line breaks and white space chars\n * @return string The processed string.\n */\nfunction wp_strip_all_tags( $string, $remove_breaks = false ) {\n\t$string = preg_replace( '@<(script|style)[^>]*?>.*?</\\\\1>@si', '', $string );\n\t$string = strip_tags( $string );\n\n\tif ( $remove_breaks ) {\n\t\t$string = preg_replace( '/[\\r\\n\\t ]+/', ' ', $string );\n\t}\n\n\treturn trim( $string );\n}\n\n/**\n * Sanitizes a string from user input or from the database.\n *\n * - Checks for invalid UTF-8,\n * - Converts single `<` characters to entities\n * - Strips all tags\n * - Removes line breaks, tabs, and extra whitespace\n * - Strips octets\n *\n * @since 2.9.0\n *\n * @see sanitize_textarea_field()\n * @see wp_check_invalid_utf8()\n * @see wp_strip_all_tags()\n *\n * @param string $str String to sanitize.\n * @return string Sanitized string.\n */\nfunction sanitize_text_field( $str ) {\n\t$filtered = _sanitize_text_fields( $str, false );\n\n\t/**\n\t * Filters a sanitized text field string.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param string $filtered The sanitized string.\n\t * @param string $str      The string prior to being sanitized.\n\t */\n\treturn apply_filters( 'sanitize_text_field', $filtered, $str );\n}\n\n/**\n * Sanitizes a multiline string from user input or from the database.\n *\n * The function is like sanitize_text_field(), but preserves\n * new lines (\\n) and other whitespace, which are legitimate\n * input in textarea elements.\n *\n * @see sanitize_text_field()\n *\n * @since 4.7.0\n *\n * @param string $str String to sanitize.\n * @return string Sanitized string.\n */\nfunction sanitize_textarea_field( $str ) {\n\t$filtered = _sanitize_text_fields( $str, true );\n\n\t/**\n\t * Filters a sanitized textarea field string.\n\t *\n\t * @since 4.7.0\n\t *\n\t * @param string $filtered The sanitized string.\n\t * @param string $str      The string prior to being sanitized.\n\t */\n\treturn apply_filters( 'sanitize_textarea_field', $filtered, $str );\n}\n\n/**\n * Internal helper function to sanitize a string from user input or from the db\n *\n * @since 4.7.0\n * @access private\n *\n * @param string $str String to sanitize.\n * @param bool $keep_newlines optional Whether to keep newlines. Default: false.\n * @return string Sanitized string.\n */\nfunction _sanitize_text_fields( $str, $keep_newlines = false ) {\n\tif ( is_object( $str ) || is_array( $str ) ) {\n\t\treturn '';\n\t}\n\n\t$str = (string) $str;\n\n\t$filtered = wp_check_invalid_utf8( $str );\n\n\tif ( strpos( $filtered, '<' ) !== false ) {\n\t\t$filtered = wp_pre_kses_less_than( $filtered );\n\t\t// This will strip extra whitespace for us.\n\t\t$filtered = wp_strip_all_tags( $filtered, false );\n\n\t\t// Use html entities in a special case to make sure no later\n\t\t// newline stripping stage could lead to a functional tag\n\t\t$filtered = str_replace( \"<\\n\", \"&lt;\\n\", $filtered );\n\t}\n\n\tif ( ! $keep_newlines ) {\n\t\t$filtered = preg_replace( '/[\\r\\n\\t ]+/', ' ', $filtered );\n\t}\n\t$filtered = trim( $filtered );\n\n\t$found = false;\n\twhile ( preg_match( '/%[a-f0-9]{2}/i', $filtered, $match ) ) {\n\t\t$filtered = str_replace( $match[0], '', $filtered );\n\t\t$found    = true;\n\t}\n\n\tif ( $found ) {\n\t\t// Strip out the whitespace that may now exist after removing the octets.\n\t\t$filtered = trim( preg_replace( '/ +/', ' ', $filtered ) );\n\t}\n\n\treturn $filtered;\n}\n\n/**\n * i18n friendly version of basename()\n *\n * @since 3.1.0\n *\n * @param string $path   A path.\n * @param string $suffix If the filename ends in suffix this will also be cut off.\n * @return string\n */\nfunction wp_basename( $path, $suffix = '' ) {\n\treturn urldecode( basename( str_replace( array( '%2F', '%5C' ), '/', urlencode( $path ) ), $suffix ) );\n}\n\n// phpcs:disable WordPress.WP.CapitalPDangit.Misspelled, WordPress.NamingConventions.ValidFunctionName.FunctionNameInvalid -- 8-)\n/**\n * Forever eliminate \"Wordpress\" from the planet (or at least the little bit we can influence).\n *\n * Violating our coding standards for a good function name.\n *\n * @since 3.0.0\n *\n * @staticvar string|false $dblq\n *\n * @param string $text The text to be modified.\n * @return string The modified text.\n */\nfunction capital_P_dangit( $text ) {\n\t// Simple replacement for titles\n\t$current_filter = current_filter();\n\tif ( 'the_title' === $current_filter || 'wp_title' === $current_filter ) {\n\t\treturn str_replace( 'Wordpress', 'WordPress', $text );\n\t}\n\t// Still here? Use the more judicious replacement\n\tstatic $dblq = false;\n\tif ( false === $dblq ) {\n\t\t$dblq = _x( '&#8220;', 'opening curly double quote' );\n\t}\n\treturn str_replace(\n\t\tarray( ' Wordpress', '&#8216;Wordpress', $dblq . 'Wordpress', '>Wordpress', '(Wordpress' ),\n\t\tarray( ' WordPress', '&#8216;WordPress', $dblq . 'WordPress', '>WordPress', '(WordPress' ),\n\t\t$text\n\t);\n}\n// phpcs:enable\n\n/**\n * Sanitize a mime type\n *\n * @since 3.1.3\n *\n * @param string $mime_type Mime type\n * @return string Sanitized mime type\n */\nfunction sanitize_mime_type( $mime_type ) {\n\t$sani_mime_type = preg_replace( '/[^-+*.a-zA-Z0-9\\/]/', '', $mime_type );\n\t/**\n\t * Filters a mime type following sanitization.\n\t *\n\t * @since 3.1.3\n\t *\n\t * @param string $sani_mime_type The sanitized mime type.\n\t * @param string $mime_type      The mime type prior to sanitization.\n\t */\n\treturn apply_filters( 'sanitize_mime_type', $sani_mime_type, $mime_type );\n}\n\n/**\n * Sanitize space or carriage return separated URLs that are used to send trackbacks.\n *\n * @since 3.4.0\n *\n * @param string $to_ping Space or carriage return separated URLs\n * @return string URLs starting with the http or https protocol, separated by a carriage return.\n */\nfunction sanitize_trackback_urls( $to_ping ) {\n\t$urls_to_ping = preg_split( '/[\\r\\n\\t ]/', trim( $to_ping ), -1, PREG_SPLIT_NO_EMPTY );\n\tforeach ( $urls_to_ping as $k => $url ) {\n\t\tif ( ! preg_match( '#^https?://.#i', $url ) ) {\n\t\t\tunset( $urls_to_ping[ $k ] );\n\t\t}\n\t}\n\t$urls_to_ping = array_map( 'esc_url_raw', $urls_to_ping );\n\t$urls_to_ping = implode( \"\\n\", $urls_to_ping );\n\t/**\n\t * Filters a list of trackback URLs following sanitization.\n\t *\n\t * The string returned here consists of a space or carriage return-delimited list\n\t * of trackback URLs.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @param string $urls_to_ping Sanitized space or carriage return separated URLs.\n\t * @param string $to_ping      Space or carriage return separated URLs before sanitization.\n\t */\n\treturn apply_filters( 'sanitize_trackback_urls', $urls_to_ping, $to_ping );\n}\n\n/**\n * Add slashes to a string or array of strings.\n *\n * This should be used when preparing data for core API that expects slashed data.\n * This should not be used to escape data going directly into an SQL query.\n *\n * @since 3.6.0\n *\n * @param string|array $value String or array of strings to slash.\n * @return string|array Slashed $value\n */\nfunction wp_slash( $value ) {\n\tif ( is_array( $value ) ) {\n\t\tforeach ( $value as $k => $v ) {\n\t\t\tif ( is_array( $v ) ) {\n\t\t\t\t$value[ $k ] = wp_slash( $v );\n\t\t\t} else {\n\t\t\t\t$value[ $k ] = addslashes( $v );\n\t\t\t}\n\t\t}\n\t} else {\n\t\t$value = addslashes( $value );\n\t}\n\n\treturn $value;\n}\n\n/**\n * Remove slashes from a string or array of strings.\n *\n * This should be used to remove slashes from data passed to core API that\n * expects data to be unslashed.\n *\n * @since 3.6.0\n *\n * @param string|array $value String or array of strings to unslash.\n * @return string|array Unslashed $value\n */\nfunction wp_unslash( $value ) {\n\treturn stripslashes_deep( $value );\n}\n\n/**\n * Adds slashes to only string values in an array of values.\n *\n * This should be used when preparing data for core APIs that expect slashed data.\n * This should not be used to escape data going directly into an SQL query.\n *\n * @since 5.3.0\n *\n * @param mixed $value Scalar or array of scalars.\n * @return mixed Slashes $value\n */\nfunction wp_slash_strings_only( $value ) {\n\treturn map_deep( $value, 'addslashes_strings_only' );\n}\n\n/**\n * Adds slashes only if the provided value is a string.\n *\n * @since 5.3.0\n *\n * @param mixed $value\n * @return mixed\n */\nfunction addslashes_strings_only( $value ) {\n\treturn is_string( $value ) ? addslashes( $value ) : $value;\n}\n\n/**\n * Extract and return the first URL from passed content.\n *\n * @since 3.6.0\n *\n * @param string $content A string which might contain a URL.\n * @return string|false The found URL.\n */\nfunction get_url_in_content( $content ) {\n\tif ( empty( $content ) ) {\n\t\treturn false;\n\t}\n\n\tif ( preg_match( '/<a\\s[^>]*?href=([\\'\"])(.+?)\\1/is', $content, $matches ) ) {\n\t\treturn esc_url_raw( $matches[2] );\n\t}\n\n\treturn false;\n}\n\n/**\n * Returns the regexp for common whitespace characters.\n *\n * By default, spaces include new lines, tabs, nbsp entities, and the UTF-8 nbsp.\n * This is designed to replace the PCRE \\s sequence.  In ticket #22692, that\n * sequence was found to be unreliable due to random inclusion of the A0 byte.\n *\n * @since 4.0.0\n *\n * @staticvar string $spaces\n *\n * @return string The spaces regexp.\n */\nfunction wp_spaces_regexp() {\n\tstatic $spaces = '';\n\n\tif ( empty( $spaces ) ) {\n\t\t/**\n\t\t * Filters the regexp for common whitespace characters.\n\t\t *\n\t\t * This string is substituted for the \\s sequence as needed in regular\n\t\t * expressions. For websites not written in English, different characters\n\t\t * may represent whitespace. For websites not encoded in UTF-8, the 0xC2 0xA0\n\t\t * sequence may not be in use.\n\t\t *\n\t\t * @since 4.0.0\n\t\t *\n\t\t * @param string $spaces Regexp pattern for matching common whitespace characters.\n\t\t */\n\t\t$spaces = apply_filters( 'wp_spaces_regexp', '[\\r\\n\\t ]|\\xC2\\xA0|&nbsp;' );\n\t}\n\n\treturn $spaces;\n}\n\n/**\n * Print the important emoji-related styles.\n *\n * @since 4.2.0\n *\n * @staticvar bool $printed\n */\nfunction print_emoji_styles() {\n\tstatic $printed = false;\n\n\tif ( $printed ) {\n\t\treturn;\n\t}\n\n\t$printed = true;\n\n\t$type_attr = current_theme_supports( 'html5', 'style' ) ? '' : ' type=\"text/css\"';\n\t?>\n<style<?php echo $type_attr; ?>>\nimg.wp-smiley,\nimg.emoji {\n\tdisplay: inline !important;\n\tborder: none !important;\n\tbox-shadow: none !important;\n\theight: 1em !important;\n\twidth: 1em !important;\n\tmargin: 0 .07em !important;\n\tvertical-align: -0.1em !important;\n\tbackground: none !important;\n\tpadding: 0 !important;\n}\n</style>\n\t<?php\n}\n\n/**\n * Print the inline Emoji detection script if it is not already printed.\n *\n * @since 4.2.0\n * @staticvar bool $printed\n */\nfunction print_emoji_detection_script() {\n\tstatic $printed = false;\n\n\tif ( $printed ) {\n\t\treturn;\n\t}\n\n\t$printed = true;\n\n\t_print_emoji_detection_script();\n}\n\n/**\n * Prints inline Emoji detection script.\n *\n * @ignore\n * @since 4.6.0\n * @access private\n */\nfunction _print_emoji_detection_script() {\n\t$settings = array(\n\t\t/**\n\t\t * Filters the URL where emoji png images are hosted.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param string The emoji base URL for png images.\n\t\t */\n\t\t'baseUrl' => apply_filters( 'emoji_url', 'https://s.w.org/images/core/emoji/12.0.0-1/72x72/' ),\n\n\t\t/**\n\t\t * Filters the extension of the emoji png files.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param string The emoji extension for png files. Default .png.\n\t\t */\n\t\t'ext'     => apply_filters( 'emoji_ext', '.png' ),\n\n\t\t/**\n\t\t * Filters the URL where emoji SVG images are hosted.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param string The emoji base URL for svg images.\n\t\t */\n\t\t'svgUrl'  => apply_filters( 'emoji_svg_url', 'https://s.w.org/images/core/emoji/12.0.0-1/svg/' ),\n\n\t\t/**\n\t\t * Filters the extension of the emoji SVG files.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param string The emoji extension for svg files. Default .svg.\n\t\t */\n\t\t'svgExt'  => apply_filters( 'emoji_svg_ext', '.svg' ),\n\t);\n\n\t$version   = 'ver=' . get_bloginfo( 'version' );\n\t$type_attr = current_theme_supports( 'html5', 'style' ) ? '' : ' type=\"text/javascript\"';\n\n\tif ( SCRIPT_DEBUG ) {\n\t\t$settings['source'] = array(\n\t\t\t/** This filter is documented in wp-includes/class.wp-scripts.php */\n\t\t\t'wpemoji' => apply_filters( 'script_loader_src', includes_url( \"js/wp-emoji.js?$version\" ), 'wpemoji' ),\n\t\t\t/** This filter is documented in wp-includes/class.wp-scripts.php */\n\t\t\t'twemoji' => apply_filters( 'script_loader_src', includes_url( \"js/twemoji.js?$version\" ), 'twemoji' ),\n\t\t);\n\n\t\t?>\n\t\t<script<?php echo $type_attr; ?>>\n\t\t\twindow._wpemojiSettings = <?php echo wp_json_encode( $settings ); ?>;\n\t\t\t<?php readfile( ABSPATH . WPINC . '/js/wp-emoji-loader.js' ); ?>\n\t\t</script>\n\t\t<?php\n\t} else {\n\t\t$settings['source'] = array(\n\t\t\t/** This filter is documented in wp-includes/class.wp-scripts.php */\n\t\t\t'concatemoji' => apply_filters( 'script_loader_src', includes_url( \"js/wp-emoji-release.min.js?$version\" ), 'concatemoji' ),\n\t\t);\n\n\t\t/*\n\t\t * If you're looking at a src version of this file, you'll see an \"include\"\n\t\t * statement below. This is used by the `npm run build` process to directly\n\t\t * include a minified version of wp-emoji-loader.js, instead of using the\n\t\t * readfile() method from above.\n\t\t *\n\t\t * If you're looking at a build version of this file, you'll see a string of\n\t\t * minified JavaScript. If you need to debug it, please turn on SCRIPT_DEBUG\n\t\t * and edit wp-emoji-loader.js directly.\n\t\t */\n\t\t?>\n\t\t<script<?php echo $type_attr; ?>>\n\t\t\twindow._wpemojiSettings = <?php echo wp_json_encode( $settings ); ?>;\n\t\t\tinclude \"js/wp-emoji-loader.min.js\"\n\t\t</script>\n\t\t<?php\n\t}\n}\n\n/**\n * Convert emoji characters to their equivalent HTML entity.\n *\n * This allows us to store emoji in a DB using the utf8 character set.\n *\n * @since 4.2.0\n *\n * @param string $content The content to encode.\n * @return string The encoded content.\n */\nfunction wp_encode_emoji( $content ) {\n\t$emoji = _wp_emoji_list( 'partials' );\n\n\tforeach ( $emoji as $emojum ) {\n\t\t$emoji_char = html_entity_decode( $emojum );\n\t\tif ( false !== strpos( $content, $emoji_char ) ) {\n\t\t\t$content = preg_replace( \"/$emoji_char/\", $emojum, $content );\n\t\t}\n\t}\n\n\treturn $content;\n}\n\n/**\n * Convert emoji to a static img element.\n *\n * @since 4.2.0\n *\n * @param string $text The content to encode.\n * @return string The encoded content.\n */\nfunction wp_staticize_emoji( $text ) {\n\tif ( false === strpos( $text, '&#x' ) ) {\n\t\tif ( ( function_exists( 'mb_check_encoding' ) && mb_check_encoding( $text, 'ASCII' ) ) || ! preg_match( '/[^\\x00-\\x7F]/', $text ) ) {\n\t\t\t// The text doesn't contain anything that might be emoji, so we can return early.\n\t\t\treturn $text;\n\t\t} else {\n\t\t\t$encoded_text = wp_encode_emoji( $text );\n\t\t\tif ( $encoded_text === $text ) {\n\t\t\t\treturn $encoded_text;\n\t\t\t}\n\n\t\t\t$text = $encoded_text;\n\t\t}\n\t}\n\n\t$emoji = _wp_emoji_list( 'entities' );\n\n\t// Quickly narrow down the list of emoji that might be in the text and need replacing.\n\t$possible_emoji = array();\n\tforeach ( $emoji as $emojum ) {\n\t\tif ( false !== strpos( $text, $emojum ) ) {\n\t\t\t$possible_emoji[ $emojum ] = html_entity_decode( $emojum );\n\t\t}\n\t}\n\n\tif ( ! $possible_emoji ) {\n\t\treturn $text;\n\t}\n\n\t/** This filter is documented in wp-includes/formatting.php */\n\t$cdn_url = apply_filters( 'emoji_url', 'https://s.w.org/images/core/emoji/12.0.0-1/72x72/' );\n\n\t/** This filter is documented in wp-includes/formatting.php */\n\t$ext = apply_filters( 'emoji_ext', '.png' );\n\n\t$output = '';\n\t/*\n\t * HTML loop taken from smiley function, which was taken from texturize function.\n\t * It'll never be consolidated.\n\t *\n\t * First, capture the tags as well as in between.\n\t */\n\t$textarr = preg_split( '/(<.*>)/U', $text, -1, PREG_SPLIT_DELIM_CAPTURE );\n\t$stop    = count( $textarr );\n\n\t// Ignore processing of specific tags.\n\t$tags_to_ignore       = 'code|pre|style|script|textarea';\n\t$ignore_block_element = '';\n\n\tfor ( $i = 0; $i < $stop; $i++ ) {\n\t\t$content = $textarr[ $i ];\n\n\t\t// If we're in an ignore block, wait until we find its closing tag.\n\t\tif ( '' == $ignore_block_element && preg_match( '/^<(' . $tags_to_ignore . ')>/', $content, $matches ) ) {\n\t\t\t$ignore_block_element = $matches[1];\n\t\t}\n\n\t\t// If it's not a tag and not in ignore block.\n\t\tif ( '' == $ignore_block_element && strlen( $content ) > 0 && '<' != $content[0] && false !== strpos( $content, '&#x' ) ) {\n\t\t\tforeach ( $possible_emoji as $emojum => $emoji_char ) {\n\t\t\t\tif ( false === strpos( $content, $emojum ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$file = str_replace( ';&#x', '-', $emojum );\n\t\t\t\t$file = str_replace( array( '&#x', ';' ), '', $file );\n\n\t\t\t\t$entity = sprintf( '<img src=\"%s\" alt=\"%s\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />', $cdn_url . $file . $ext, $emoji_char );\n\n\t\t\t\t$content = str_replace( $emojum, $entity, $content );\n\t\t\t}\n\t\t}\n\n\t\t// Did we exit ignore block.\n\t\tif ( '' != $ignore_block_element && '</' . $ignore_block_element . '>' == $content ) {\n\t\t\t$ignore_block_element = '';\n\t\t}\n\n\t\t$output .= $content;\n\t}\n\n\t// Finally, remove any stray U+FE0F characters\n\t$output = str_replace( '&#xfe0f;', '', $output );\n\n\treturn $output;\n}\n\n/**\n * Convert emoji in emails into static images.\n *\n * @since 4.2.0\n *\n * @param array $mail The email data array.\n * @return array The email data array, with emoji in the message staticized.\n */\nfunction wp_staticize_emoji_for_email( $mail ) {\n\tif ( ! isset( $mail['message'] ) ) {\n\t\treturn $mail;\n\t}\n\n\t/*\n\t * We can only transform the emoji into images if it's a text/html email.\n\t * To do that, here's a cut down version of the same process that happens\n\t * in wp_mail() - get the Content-Type from the headers, if there is one,\n\t * then pass it through the wp_mail_content_type filter, in case a plugin\n\t * is handling changing the Content-Type.\n\t */\n\t$headers = array();\n\tif ( isset( $mail['headers'] ) ) {\n\t\tif ( is_array( $mail['headers'] ) ) {\n\t\t\t$headers = $mail['headers'];\n\t\t} else {\n\t\t\t$headers = explode( \"\\n\", str_replace( \"\\r\\n\", \"\\n\", $mail['headers'] ) );\n\t\t}\n\t}\n\n\tforeach ( $headers as $header ) {\n\t\tif ( strpos( $header, ':' ) === false ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Explode them out.\n\t\tlist( $name, $content ) = explode( ':', trim( $header ), 2 );\n\n\t\t// Cleanup crew.\n\t\t$name    = trim( $name );\n\t\t$content = trim( $content );\n\n\t\tif ( 'content-type' === strtolower( $name ) ) {\n\t\t\tif ( strpos( $content, ';' ) !== false ) {\n\t\t\t\tlist( $type, $charset ) = explode( ';', $content );\n\t\t\t\t$content_type           = trim( $type );\n\t\t\t} else {\n\t\t\t\t$content_type = trim( $content );\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Set Content-Type if we don't have a content-type from the input headers.\n\tif ( ! isset( $content_type ) ) {\n\t\t$content_type = 'text/plain';\n\t}\n\n\t/** This filter is documented in wp-includes/pluggable.php */\n\t$content_type = apply_filters( 'wp_mail_content_type', $content_type );\n\n\tif ( 'text/html' === $content_type ) {\n\t\t$mail['message'] = wp_staticize_emoji( $mail['message'] );\n\t}\n\n\treturn $mail;\n}\n\n/**\n * Returns arrays of emoji data.\n *\n * These arrays are automatically built from the regex in twemoji.js - if they need to be updated,\n * you should update the regex there, then run the `npm run grunt precommit:emoji` job.\n *\n * @since 4.9.0\n * @access private\n *\n * @param string $type Optional. Which array type to return. Accepts 'partials' or 'entities', default 'entities'.\n * @return array An array to match all emoji that WordPress recognises.\n */\nfunction _wp_emoji_list( $type = 'entities' ) {\n\t// Do not remove the START/END comments - they're used to find where to insert the arrays.\n\n\t// START: emoji arrays\n\t$entities = array( '&#x1f469;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f48b;&#x200d;&#x1f469;', '&#x1f469;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f48b;&#x200d;&#x1f468;', '&#x1f468;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f48b;&#x200d;&#x1f468;', '&#x1f3f4;&#xe0067;&#xe0062;&#xe0077;&#xe006c;&#xe0073;&#xe007f;', '&#x1f3f4;&#xe0067;&#xe0062;&#xe0073;&#xe0063;&#xe0074;&#xe007f;', '&#x1f3f4;&#xe0067;&#xe0062;&#xe0065;&#xe006e;&#xe0067;&#xe007f;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fb;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fc;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fd;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f469;&#x1f3fc;', '&#x1f9d1;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3ff;', '&#x1f9d1;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fe;', '&#x1f9d1;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fd;', '&#x1f9d1;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fc;', '&#x1f9d1;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fb;', '&#x1f9d1;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fe;', '&#x1f9d1;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fd;', '&#x1f9d1;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fc;', '&#x1f9d1;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fb;', '&#x1f9d1;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fd;', '&#x1f9d1;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fc;', '&#x1f9d1;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fb;', '&#x1f9d1;&#x1f3fc;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fc;', '&#x1f9d1;&#x1f3fc;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fb;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fb;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fc;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fd;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fe;', '&#x1f9d1;&#x1f3fb;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;&#x1f3fb;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f469;&#x1f3fb;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fe;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fd;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fc;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fb;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f469;&#x1f3fd;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fb;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f469;&#x1f3fe;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f469;&#x1f3fc;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f469;&#x1f3fb;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f91d;&#x200d;&#x1f469;&#x1f3fd;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fb;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fc;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fc;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fd;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fe;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3ff;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fb;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fd;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fe;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3ff;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f91d;&#x200d;&#x1f469;&#x1f3fb;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fb;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fc;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fe;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3ff;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f469;&#x1f3fb;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f91d;&#x200d;&#x1f469;&#x1f3fc;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fb;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fc;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3fd;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f91d;&#x200d;&#x1f468;&#x1f3ff;', '&#x1f468;&#x200d;&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f467;', '&#x1f468;&#x200d;&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f466;', '&#x1f469;&#x200d;&#x1f469;&#x200d;&#x1f466;&#x200d;&#x1f466;', '&#x1f468;&#x200d;&#x1f468;&#x200d;&#x1f467;&#x200d;&#x1f467;', '&#x1f468;&#x200d;&#x1f468;&#x200d;&#x1f467;&#x200d;&#x1f466;', '&#x1f469;&#x200d;&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f466;', '&#x1f468;&#x200d;&#x1f468;&#x200d;&#x1f466;&#x200d;&#x1f466;', '&#x1f469;&#x200d;&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f467;', '&#x1f468;&#x200d;&#x1f469;&#x200d;&#x1f466;&#x200d;&#x1f466;', '&#x1f469;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f468;', '&#x1f468;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f468;', '&#x1f469;&#x200d;&#x2764;&#xfe0f;&#x200d;&#x1f469;', '&#x1f468;&#x200d;&#x1f468;&#x200d;&#x1f466;', '&#x1f468;&#x200d;&#x1f469;&#x200d;&#x1f467;', '&#x1f469;&#x200d;&#x1f466;&#x200d;&#x1f466;', '&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f466;', '&#x1f469;&#x200d;&#x1f467;&#x200d;&#x1f467;', '&#x1f468;&#x200d;&#x1f468;&#x200d;&#x1f467;', '&#x1f469;&#x200d;&#x1f469;&#x200d;&#x1f466;', '&#x1f468;&#x200d;&#x1f469;&#x200d;&#x1f466;', '&#x1f468;&#x200d;&#x1f467;&#x200d;&#x1f467;', '&#x1f469;&#x200d;&#x1f469;&#x200d;&#x1f467;', '&#x1f468;&#x200d;&#x1f467;&#x200d;&#x1f466;', '&#x1f468;&#x200d;&#x1f466;&#x200d;&#x1f466;', '&#x1f9d1;&#x200d;&#x1f91d;&#x200d;&#x1f9d1;', '&#x1f939;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9da;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9da;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9da;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9da;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c3;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9da;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9da;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9da;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9da;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9da;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d9;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d9;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f468;&#x1f3fc;&#x200d;&#x2695;&#xfe0f;', '&#x1f468;&#x1f3fc;&#x200d;&#x2696;&#xfe0f;', '&#x1f468;&#x1f3fc;&#x200d;&#x2708;&#xfe0f;', '&#x1f9d9;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d9;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d9;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d9;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d9;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d9;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d9;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d9;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d8;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d8;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d8;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d8;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d8;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c3;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c3;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d8;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d8;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d8;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d8;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d8;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d7;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d7;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f468;&#x1f3fd;&#x200d;&#x2695;&#xfe0f;', '&#x1f468;&#x1f3fd;&#x200d;&#x2696;&#xfe0f;', '&#x1f468;&#x1f3fd;&#x200d;&#x2708;&#xfe0f;', '&#x1f9d7;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d7;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d7;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d7;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d7;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d7;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d7;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d7;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d6;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d6;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d6;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d6;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d6;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c3;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c3;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f3c3;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d6;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d6;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d6;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d6;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d6;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f3c4;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f3c4;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f468;&#x1f3fe;&#x200d;&#x2695;&#xfe0f;', '&#x1f468;&#x1f3fe;&#x200d;&#x2696;&#xfe0f;', '&#x1f468;&#x1f3fe;&#x200d;&#x2708;&#xfe0f;', '&#x1f3c4;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f3c4;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c4;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f3c4;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c4;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f3c4;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c4;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f3c4;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f3ca;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f3ca;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f3ca;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f3ca;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f3ca;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f3ca;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f3ca;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f3ca;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f3ca;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f3ca;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cf;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cf;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9cf;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cf;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9cf;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cf;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f468;&#x1f3ff;&#x200d;&#x2695;&#xfe0f;', '&#x1f468;&#x1f3ff;&#x200d;&#x2696;&#xfe0f;', '&#x1f468;&#x1f3ff;&#x200d;&#x2708;&#xfe0f;', '&#x1f9cf;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cf;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9cf;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cf;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9ce;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9ce;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9ce;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cb;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9ce;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cb;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cb;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9ce;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cb;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cb;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cb;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cb;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cb;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cb;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cb;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cc;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cc;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cc;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9ce;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9ce;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9ce;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9ce;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9ce;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9cd;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cd;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9cd;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cd;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9cd;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cd;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9cd;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cd;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9cd;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cd;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b9;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cc;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cc;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b9;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b9;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9b9;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b9;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f9b9;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b9;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9b9;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b9;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9b9;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b8;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9b8;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b8;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9b8;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cc;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cc;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cc;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cc;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b8;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f9b8;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b8;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9b8;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b8;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9b8;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f93e;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f469;&#x1f3fb;&#x200d;&#x2695;&#xfe0f;', '&#x1f469;&#x1f3fb;&#x200d;&#x2696;&#xfe0f;', '&#x1f469;&#x1f3fb;&#x200d;&#x2708;&#xfe0f;', '&#x1f93e;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f93e;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f93e;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f93e;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f93e;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f93e;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f93e;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f93e;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f93e;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f93d;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f93d;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f93d;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f93d;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cc;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64d;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f3c3;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f3c3;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dd;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f93d;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f93d;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f93d;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f93d;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f93d;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f93d;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f939;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f469;&#x1f3fc;&#x200d;&#x2695;&#xfe0f;', '&#x1f469;&#x1f3fc;&#x200d;&#x2696;&#xfe0f;', '&#x1f469;&#x1f3fc;&#x200d;&#x2708;&#xfe0f;', '&#x1f939;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f939;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f939;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f939;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f939;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f939;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f939;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f939;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c3;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f938;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f938;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f938;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f938;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dd;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dd;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dd;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dd;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dd;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dd;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f938;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f938;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f938;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f938;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f938;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f938;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f937;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f469;&#x1f3fd;&#x200d;&#x2695;&#xfe0f;', '&#x1f469;&#x1f3fd;&#x200d;&#x2696;&#xfe0f;', '&#x1f469;&#x1f3fd;&#x200d;&#x2708;&#xfe0f;', '&#x1f937;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f937;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f937;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f937;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f937;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f937;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f937;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f937;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f937;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f935;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f935;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f935;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f935;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dd;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dd;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dd;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dc;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dc;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dc;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dc;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f935;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f935;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f935;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f935;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f935;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f935;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f926;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f469;&#x1f3fe;&#x200d;&#x2695;&#xfe0f;', '&#x1f469;&#x1f3fe;&#x200d;&#x2696;&#xfe0f;', '&#x1f469;&#x1f3fe;&#x200d;&#x2708;&#xfe0f;', '&#x1f926;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f926;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f926;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f926;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f926;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f926;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f926;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f926;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f926;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b6;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b6;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b6;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b6;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dc;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dc;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dc;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dc;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dc;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dc;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9db;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f9db;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b6;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b6;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b6;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b6;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b6;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b6;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b5;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f469;&#x1f3ff;&#x200d;&#x2695;&#xfe0f;', '&#x1f469;&#x1f3ff;&#x200d;&#x2696;&#xfe0f;', '&#x1f469;&#x1f3ff;&#x200d;&#x2708;&#xfe0f;', '&#x1f6b5;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b5;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b5;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b5;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b5;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b5;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b5;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f468;&#x1f3fb;&#x200d;&#x2695;&#xfe0f;', '&#x1f6b5;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f468;&#x1f3fb;&#x200d;&#x2696;&#xfe0f;', '&#x1f468;&#x1f3fb;&#x200d;&#x2708;&#xfe0f;', '&#x1f6b5;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9db;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f9db;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f9db;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f9db;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9db;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b4;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b4;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b4;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b4;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b4;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b4;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b4;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b4;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b4;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b4;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f6a3;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f6a3;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f6a3;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f6a3;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f6a3;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f6a3;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9db;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9db;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f9db;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f9da;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f46e;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f46e;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f46e;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f46e;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f46e;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f46e;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f46e;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f46e;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f46e;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f46e;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f6a3;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f6a3;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f6a3;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f6a3;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f471;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f471;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f471;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f471;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f471;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f471;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f471;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f471;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f471;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f471;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64e;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64e;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f473;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f473;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f473;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f473;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f473;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f473;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f473;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f473;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f473;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f473;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64e;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f64e;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f477;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f477;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f477;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f477;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f477;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f477;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f477;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f477;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f477;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f477;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64e;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c3;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f481;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f481;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f481;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f481;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f481;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f481;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f481;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f481;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f481;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f481;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64e;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f64e;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f482;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f482;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f482;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f482;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f482;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f482;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f482;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f482;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f482;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f482;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64e;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f64e;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f486;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f486;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f486;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f486;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f486;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f486;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f486;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f486;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f486;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f486;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64e;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f64d;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f487;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f487;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f487;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f487;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f487;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f487;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f487;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f487;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f487;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f487;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64d;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f64d;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f574;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f574;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f574;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f574;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f574;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f574;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f574;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f574;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f574;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f574;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f575;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f575;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f575;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f575;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f575;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f575;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f575;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f575;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f575;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f575;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f645;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f645;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f645;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f645;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f645;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f645;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f645;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f645;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f645;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f645;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64d;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f64d;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f646;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f646;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f646;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f646;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f646;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f646;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f646;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f646;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f646;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f646;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64d;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f64d;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f647;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f647;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f647;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f647;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f647;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f647;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f647;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f647;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f647;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f647;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x1f64d;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f64d;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f64b;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x1f64b;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f64b;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x1f64b;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f64b;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x1f64b;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x1f64b;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f64b;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x1f64b;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x1f64b;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x26f9;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;', '&#x26f9;&#x1f3fd;&#x200d;&#x2640;&#xfe0f;', '&#x26f9;&#x1f3fd;&#x200d;&#x2642;&#xfe0f;', '&#x26f9;&#x1f3fc;&#x200d;&#x2642;&#xfe0f;', '&#x1f3cb;&#xfe0f;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cb;&#xfe0f;&#x200d;&#x2642;&#xfe0f;', '&#x1f575;&#xfe0f;&#x200d;&#x2640;&#xfe0f;', '&#x1f575;&#xfe0f;&#x200d;&#x2642;&#xfe0f;', '&#x26f9;&#x1f3fe;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cc;&#xfe0f;&#x200d;&#x2640;&#xfe0f;', '&#x1f3cc;&#xfe0f;&#x200d;&#x2642;&#xfe0f;', '&#x26f9;&#x1f3fb;&#x200d;&#x2642;&#xfe0f;', '&#x1f574;&#xfe0f;&#x200d;&#x2640;&#xfe0f;', '&#x1f574;&#xfe0f;&#x200d;&#x2642;&#xfe0f;', '&#x1f3f3;&#xfe0f;&#x200d;&#x26a7;&#xfe0f;', '&#x26f9;&#x1f3fb;&#x200d;&#x2640;&#xfe0f;', '&#x26f9;&#x1f3fe;&#x200d;&#x2642;&#xfe0f;', '&#x26f9;&#x1f3ff;&#x200d;&#x2640;&#xfe0f;', '&#x26f9;&#x1f3ff;&#x200d;&#x2642;&#xfe0f;', '&#x26f9;&#xfe0f;&#x200d;&#x2642;&#xfe0f;', '&#x26f9;&#xfe0f;&#x200d;&#x2640;&#xfe0f;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f4bc;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f3eb;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f33e;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f373;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f393;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f3a4;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f3a8;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f3eb;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f9bd;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f9bc;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f9b3;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f9b2;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f9b1;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f9b0;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f9af;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f692;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f680;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f52c;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f527;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f4bc;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f4bb;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f3ed;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f3eb;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f3a8;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f3a4;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f393;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f373;', '&#x1f469;&#x1f3ff;&#x200d;&#x1f33e;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f9bd;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f9bc;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f9b3;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f9b2;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f9b1;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f9b0;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f9af;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f692;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f680;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f52c;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f527;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f4bc;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f4bb;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f3ed;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f3eb;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f3a8;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f3a4;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f393;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f373;', '&#x1f469;&#x1f3fe;&#x200d;&#x1f33e;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f9bd;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f9bc;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f9b3;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f9b2;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f9b1;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f9b0;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f9af;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f692;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f680;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f52c;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f527;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f4bc;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f4bb;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f3ed;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f3eb;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f3a8;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f3a4;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f393;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f373;', '&#x1f469;&#x1f3fd;&#x200d;&#x1f33e;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f9bd;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f9bc;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f9b3;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f9b2;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f9b1;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f9b0;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f9af;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f692;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f680;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f52c;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f527;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f4bc;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f4bb;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f3ed;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f3eb;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f3a8;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f3a4;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f393;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f373;', '&#x1f469;&#x1f3fc;&#x200d;&#x1f33e;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f9bd;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f9bc;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f9b3;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f9b2;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f9b1;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f9b0;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f9af;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f692;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f680;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f52c;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f527;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f3ed;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f4bb;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f3eb;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f3a8;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f3a4;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f393;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f373;', '&#x1f469;&#x1f3fb;&#x200d;&#x1f33e;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f3ed;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f4bb;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f4bc;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f527;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f52c;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f680;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f692;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f9af;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f9b0;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f9b1;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f9b2;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f9b3;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f9bc;', '&#x1f468;&#x1f3fb;&#x200d;&#x1f9bd;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f33e;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f373;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f393;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f3a4;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f9bd;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f9bc;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f9b3;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f9b2;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f9b1;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f9b0;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f9af;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f692;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f680;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f52c;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f527;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f4bc;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f4bb;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f3ed;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f3eb;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f3a8;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f3a4;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f393;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f373;', '&#x1f468;&#x1f3ff;&#x200d;&#x1f33e;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f9bd;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f9bc;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f9b3;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f9b2;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f9b1;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f9b0;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f9af;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f692;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f680;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f52c;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f527;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f4bc;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f4bb;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f3ed;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f3eb;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f3a8;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f3a4;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f393;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f373;', '&#x1f468;&#x1f3fe;&#x200d;&#x1f33e;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f9bd;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f9bc;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f9b3;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f9b2;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f9b1;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f9b0;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f9af;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f692;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f680;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f52c;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f527;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f4bc;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f4bb;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f3ed;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f3eb;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f3a8;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f3a4;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f393;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f373;', '&#x1f468;&#x1f3fd;&#x200d;&#x1f33e;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f9bd;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f9bc;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f9b3;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f9b2;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f9b1;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f9b0;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f9af;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f692;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f680;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f52c;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f527;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f4bc;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f4bb;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f3ed;', '&#x1f468;&#x1f3fc;&#x200d;&#x1f3a8;', '&#x1f3f3;&#xfe0f;&#x200d;&#x1f308;', '&#x1f64d;&#x200d;&#x2640;&#xfe0f;', '&#x1f64d;&#x200d;&#x2642;&#xfe0f;', '&#x1f9ce;&#x200d;&#x2640;&#xfe0f;', '&#x1f9ce;&#x200d;&#x2642;&#xfe0f;', '&#x1f486;&#x200d;&#x2640;&#xfe0f;', '&#x1f482;&#x200d;&#x2642;&#xfe0f;', '&#x1f482;&#x200d;&#x2640;&#xfe0f;', '&#x1f481;&#x200d;&#x2642;&#xfe0f;', '&#x1f481;&#x200d;&#x2640;&#xfe0f;', '&#x1f477;&#x200d;&#x2640;&#xfe0f;', '&#x1f473;&#x200d;&#x2642;&#xfe0f;', '&#x1f473;&#x200d;&#x2640;&#xfe0f;', '&#x1f939;&#x200d;&#x2640;&#xfe0f;', '&#x1f939;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cf;&#x200d;&#x2640;&#xfe0f;', '&#x1f9cf;&#x200d;&#x2642;&#xfe0f;', '&#x1f93c;&#x200d;&#x2640;&#xfe0f;', '&#x1f93c;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b6;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b6;&#x200d;&#x2642;&#xfe0f;', '&#x1f471;&#x200d;&#x2642;&#xfe0f;', '&#x1f471;&#x200d;&#x2640;&#xfe0f;', '&#x1f64e;&#x200d;&#x2640;&#xfe0f;', '&#x1f64e;&#x200d;&#x2642;&#xfe0f;', '&#x1f46f;&#x200d;&#x2642;&#xfe0f;', '&#x1f46f;&#x200d;&#x2640;&#xfe0f;', '&#x1f46e;&#x200d;&#x2642;&#xfe0f;', '&#x1f46e;&#x200d;&#x2640;&#xfe0f;', '&#x1f93d;&#x200d;&#x2640;&#xfe0f;', '&#x1f93d;&#x200d;&#x2642;&#xfe0f;', '&#x1f469;&#x200d;&#x2708;&#xfe0f;', '&#x1f469;&#x200d;&#x2696;&#xfe0f;', '&#x1f926;&#x200d;&#x2640;&#xfe0f;', '&#x1f926;&#x200d;&#x2642;&#xfe0f;', '&#x1f469;&#x200d;&#x2695;&#xfe0f;', '&#x1f3c3;&#x200d;&#x2640;&#xfe0f;', '&#x1f3c3;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c4;&#x200d;&#x2640;&#xfe0f;', '&#x1f6a3;&#x200d;&#x2640;&#xfe0f;', '&#x1f6a3;&#x200d;&#x2642;&#xfe0f;', '&#x1f93e;&#x200d;&#x2640;&#xfe0f;', '&#x1f93e;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d6;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d6;&#x200d;&#x2642;&#xfe0f;', '&#x1f3c4;&#x200d;&#x2642;&#xfe0f;', '&#x1f3ca;&#x200d;&#x2640;&#xfe0f;', '&#x1f3ca;&#x200d;&#x2642;&#xfe0f;', '&#x1f64b;&#x200d;&#x2642;&#xfe0f;', '&#x1f935;&#x200d;&#x2640;&#xfe0f;', '&#x1f935;&#x200d;&#x2642;&#xfe0f;', '&#x1f647;&#x200d;&#x2642;&#xfe0f;', '&#x1f647;&#x200d;&#x2640;&#xfe0f;', '&#x1f3f4;&#x200d;&#x2620;&#xfe0f;', '&#x1f9df;&#x200d;&#x2642;&#xfe0f;', '&#x1f9d7;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d7;&#x200d;&#x2642;&#xfe0f;', '&#x1f9b8;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b8;&#x200d;&#x2642;&#xfe0f;', '&#x1f9df;&#x200d;&#x2640;&#xfe0f;', '&#x1f9de;&#x200d;&#x2642;&#xfe0f;', '&#x1f64b;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b4;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b4;&#x200d;&#x2642;&#xfe0f;', '&#x1f9de;&#x200d;&#x2640;&#xfe0f;', '&#x1f9dd;&#x200d;&#x2642;&#xfe0f;', '&#x1f937;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d8;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d8;&#x200d;&#x2642;&#xfe0f;', '&#x1f937;&#x200d;&#x2642;&#xfe0f;', '&#x1f468;&#x200d;&#x2708;&#xfe0f;', '&#x1f9b9;&#x200d;&#x2640;&#xfe0f;', '&#x1f9b9;&#x200d;&#x2642;&#xfe0f;', '&#x1f468;&#x200d;&#x2696;&#xfe0f;', '&#x1f468;&#x200d;&#x2695;&#xfe0f;', '&#x1f9dd;&#x200d;&#x2640;&#xfe0f;', '&#x1f646;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dc;&#x200d;&#x2642;&#xfe0f;', '&#x1f9dc;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d9;&#x200d;&#x2640;&#xfe0f;', '&#x1f9d9;&#x200d;&#x2642;&#xfe0f;', '&#x1f646;&#x200d;&#x2640;&#xfe0f;', '&#x1f645;&#x200d;&#x2642;&#xfe0f;', '&#x1f645;&#x200d;&#x2640;&#xfe0f;', '&#x1f487;&#x200d;&#x2642;&#xfe0f;', '&#x1f9cd;&#x200d;&#x2640;&#xfe0f;', '&#x1f9cd;&#x200d;&#x2642;&#xfe0f;', '&#x1f487;&#x200d;&#x2640;&#xfe0f;', '&#x1f486;&#x200d;&#x2642;&#xfe0f;', '&#x1f6b5;&#x200d;&#x2640;&#xfe0f;', '&#x1f6b5;&#x200d;&#x2642;&#xfe0f;', '&#x1f9da;&#x200d;&#x2640;&#xfe0f;', '&#x1f9da;&#x200d;&#x2642;&#xfe0f;', '&#x1f938;&#x200d;&#x2640;&#xfe0f;', '&#x1f938;&#x200d;&#x2642;&#xfe0f;', '&#x1f9db;&#x200d;&#x2642;&#xfe0f;', '&#x1f9db;&#x200d;&#x2640;&#xfe0f;', '&#x1f477;&#x200d;&#x2642;&#xfe0f;', '&#x1f468;&#x200d;&#x1f33e;', '&#x1f468;&#x200d;&#x1f393;', '&#x1f468;&#x200d;&#x1f3a4;', '&#x1f468;&#x200d;&#x1f3a8;', '&#x1f468;&#x200d;&#x1f3eb;', '&#x1f468;&#x200d;&#x1f3ed;', '&#x1f468;&#x200d;&#x1f466;', '&#x1f468;&#x200d;&#x1f467;', '&#x1f468;&#x200d;&#x1f4bb;', '&#x1f468;&#x200d;&#x1f4bc;', '&#x1f468;&#x200d;&#x1f527;', '&#x1f468;&#x200d;&#x1f52c;', '&#x1f468;&#x200d;&#x1f680;', '&#x1f468;&#x200d;&#x1f692;', '&#x1f468;&#x200d;&#x1f9af;', '&#x1f468;&#x200d;&#x1f9b0;', '&#x1f468;&#x200d;&#x1f9b1;', '&#x1f468;&#x200d;&#x1f9b2;', '&#x1f468;&#x200d;&#x1f9b3;', '&#x1f468;&#x200d;&#x1f9bc;', '&#x1f468;&#x200d;&#x1f9bd;', '&#x1f469;&#x200d;&#x1f33e;', '&#x1f468;&#x200d;&#x1f373;', '&#x1f469;&#x200d;&#x1f393;', '&#x1f469;&#x200d;&#x1f3a4;', '&#x1f469;&#x200d;&#x1f3a8;', '&#x1f469;&#x200d;&#x1f3eb;', '&#x1f441;&#x200d;&#x1f5e8;', '&#x1f415;&#x200d;&#x1f9ba;', '&#x1f469;&#x200d;&#x1f3ed;', '&#x1f469;&#x200d;&#x1f466;', '&#x1f469;&#x200d;&#x1f467;', '&#x1f469;&#x200d;&#x1f4bb;', '&#x1f469;&#x200d;&#x1f4bc;', '&#x1f469;&#x200d;&#x1f527;', '&#x1f469;&#x200d;&#x1f52c;', '&#x1f469;&#x200d;&#x1f680;', '&#x1f469;&#x200d;&#x1f692;', '&#x1f469;&#x200d;&#x1f9af;', '&#x1f469;&#x200d;&#x1f9b0;', '&#x1f469;&#x200d;&#x1f9b1;', '&#x1f469;&#x200d;&#x1f9b2;', '&#x1f469;&#x200d;&#x1f9b3;', '&#x1f469;&#x200d;&#x1f9bc;', '&#x1f469;&#x200d;&#x1f9bd;', '&#x1f469;&#x200d;&#x1f373;', '&#x1f1ed;&#x1f1f7;', '&#x1f481;&#x1f3ff;', '&#x1f1ed;&#x1f1f9;', '&#x1f1ed;&#x1f1fa;', '&#x1f1ee;&#x1f1e8;', '&#x1f1ee;&#x1f1e9;', '&#x1f482;&#x1f3fb;', '&#x1f1ee;&#x1f1ea;', '&#x1f1ee;&#x1f1f1;', '&#x1f482;&#x1f3fc;', '&#x1f1ee;&#x1f1f2;', '&#x1f1ee;&#x1f1f3;', '&#x1f482;&#x1f3fd;', '&#x1f1ee;&#x1f1f4;', '&#x1f1ee;&#x1f1f6;', '&#x1f482;&#x1f3fe;', '&#x1f1ee;&#x1f1f7;', '&#x1f1ee;&#x1f1f8;', '&#x1f482;&#x1f3ff;', '&#x1f1ee;&#x1f1f9;', '&#x1f468;&#x1f3fc;', '&#x1f483;&#x1f3fb;', '&#x1f483;&#x1f3fc;', '&#x1f483;&#x1f3fd;', '&#x1f483;&#x1f3fe;', '&#x1f483;&#x1f3ff;', '&#x1f485;&#x1f3fb;', '&#x1f485;&#x1f3fc;', '&#x1f485;&#x1f3fd;', '&#x1f485;&#x1f3fe;', '&#x1f485;&#x1f3ff;', '&#x1f1ef;&#x1f1ea;', '&#x1f1ef;&#x1f1f2;', '&#x1f486;&#x1f3fb;', '&#x1f1ef;&#x1f1f4;', '&#x1f1ef;&#x1f1f5;', '&#x1f486;&#x1f3fc;', '&#x1f1f0;&#x1f1ea;', '&#x1f1f0;&#x1f1ec;', '&#x1f486;&#x1f3fd;', '&#x1f1f0;&#x1f1ed;', '&#x1f1f0;&#x1f1ee;', '&#x1f486;&#x1f3fe;', '&#x1f1f0;&#x1f1f2;', '&#x1f1f0;&#x1f1f3;', '&#x1f486;&#x1f3ff;', '&#x1f1f0;&#x1f1f5;', '&#x1f1f0;&#x1f1f7;', '&#x1f1f0;&#x1f1fc;', '&#x1f1f0;&#x1f1fe;', '&#x1f487;&#x1f3fb;', '&#x1f1f0;&#x1f1ff;', '&#x1f1f1;&#x1f1e6;', '&#x1f487;&#x1f3fc;', '&#x1f1f1;&#x1f1e7;', '&#x1f1f1;&#x1f1e8;', '&#x1f487;&#x1f3fd;', '&#x1f1f1;&#x1f1ee;', '&#x1f1f1;&#x1f1f0;', '&#x1f487;&#x1f3fe;', '&#x1f1f1;&#x1f1f7;', '&#x1f1f1;&#x1f1f8;', '&#x1f487;&#x1f3ff;', '&#x1f1f1;&#x1f1f9;', '&#x1f1f1;&#x1f1fa;', '&#x1f4aa;&#x1f3fb;', '&#x1f4aa;&#x1f3fc;', '&#x1f4aa;&#x1f3fd;', '&#x1f4aa;&#x1f3fe;', '&#x1f4aa;&#x1f3ff;', '&#x1f1f1;&#x1f1fb;', '&#x1f468;&#x1f3fd;', '&#x1f574;&#x1f3fb;', '&#x1f1f1;&#x1f1fe;', '&#x1f1f2;&#x1f1e6;', '&#x1f574;&#x1f3fc;', '&#x1f1f2;&#x1f1e8;', '&#x1f1f2;&#x1f1e9;', '&#x1f574;&#x1f3fd;', '&#x1f1f2;&#x1f1ea;', '&#x1f1f2;&#x1f1eb;', '&#x1f574;&#x1f3fe;', '&#x1f1f2;&#x1f1ec;', '&#x1f1f2;&#x1f1ed;', '&#x1f574;&#x1f3ff;', '&#x1f1f2;&#x1f1f0;', '&#x1f1f2;&#x1f1f1;', '&#x1f1f2;&#x1f1f2;', '&#x1f1f2;&#x1f1f3;', '&#x1f575;&#x1f3fb;', '&#x1f1f2;&#x1f1f4;', '&#x1f1f2;&#x1f1f5;', '&#x1f575;&#x1f3fc;', '&#x1f1f2;&#x1f1f6;', '&#x1f1f2;&#x1f1f7;', '&#x1f575;&#x1f3fd;', '&#x1f1f2;&#x1f1f8;', '&#x1f1f2;&#x1f1f9;', '&#x1f575;&#x1f3fe;', '&#x1f1f2;&#x1f1fa;', '&#x1f1f2;&#x1f1fb;', '&#x1f575;&#x1f3ff;', '&#x1f1f2;&#x1f1fc;', '&#x1f1f2;&#x1f1fd;', '&#x1f57a;&#x1f3fb;', '&#x1f57a;&#x1f3fc;', '&#x1f57a;&#x1f3fd;', '&#x1f57a;&#x1f3fe;', '&#x1f57a;&#x1f3ff;', '&#x1f590;&#x1f3fb;', '&#x1f590;&#x1f3fc;', '&#x1f590;&#x1f3fd;', '&#x1f590;&#x1f3fe;', '&#x1f590;&#x1f3ff;', '&#x1f595;&#x1f3fb;', '&#x1f595;&#x1f3fc;', '&#x1f595;&#x1f3fd;', '&#x1f595;&#x1f3fe;', '&#x1f595;&#x1f3ff;', '&#x1f596;&#x1f3fb;', '&#x1f596;&#x1f3fc;', '&#x1f596;&#x1f3fd;', '&#x1f596;&#x1f3fe;', '&#x1f596;&#x1f3ff;', '&#x1f1f2;&#x1f1fe;', '&#x1f1f2;&#x1f1ff;', '&#x1f645;&#x1f3fb;', '&#x1f1f3;&#x1f1e6;', '&#x1f1f3;&#x1f1e8;', '&#x1f645;&#x1f3fc;', '&#x1f468;&#x1f3fe;', '&#x1f1f3;&#x1f1ea;', '&#x1f645;&#x1f3fd;', '&#x1f1f3;&#x1f1eb;', '&#x1f1f3;&#x1f1ec;', '&#x1f645;&#x1f3fe;', '&#x1f1f3;&#x1f1ee;', '&#x1f1f3;&#x1f1f1;', '&#x1f645;&#x1f3ff;', '&#x1f1f3;&#x1f1f4;', '&#x1f1f3;&#x1f1f5;', '&#x1f1f3;&#x1f1f7;', '&#x1f1f3;&#x1f1fa;', '&#x1f646;&#x1f3fb;', '&#x1f1f3;&#x1f1ff;', '&#x1f1f4;&#x1f1f2;', '&#x1f646;&#x1f3fc;', '&#x1f1f5;&#x1f1e6;', '&#x1f1f5;&#x1f1ea;', '&#x1f646;&#x1f3fd;', '&#x1f1f5;&#x1f1eb;', '&#x1f1f5;&#x1f1ec;', '&#x1f646;&#x1f3fe;', '&#x1f1f5;&#x1f1ed;', '&#x1f1f5;&#x1f1f0;', '&#x1f646;&#x1f3ff;', '&#x1f1f5;&#x1f1f1;', '&#x1f1f5;&#x1f1f2;', '&#x1f1f5;&#x1f1f3;', '&#x1f1f5;&#x1f1f7;', '&#x1f647;&#x1f3fb;', '&#x1f1f5;&#x1f1f8;', '&#x1f1f5;&#x1f1f9;', '&#x1f647;&#x1f3fc;', '&#x1f1f5;&#x1f1fc;', '&#x1f1f5;&#x1f1fe;', '&#x1f647;&#x1f3fd;', '&#x1f1f6;&#x1f1e6;', '&#x1f1f7;&#x1f1ea;', '&#x1f647;&#x1f3fe;', '&#x1f468;&#x1f3ff;', '&#x1f1f7;&#x1f1f4;', '&#x1f647;&#x1f3ff;', '&#x1f1f7;&#x1f1f8;', '&#x1f1f7;&#x1f1fa;', '&#x1f1f7;&#x1f1fc;', '&#x1f1f8;&#x1f1e6;', '&#x1f64b;&#x1f3fb;', '&#x1f1f8;&#x1f1e7;', '&#x1f1f8;&#x1f1e8;', '&#x1f64b;&#x1f3fc;', '&#x1f1f8;&#x1f1e9;', '&#x1f1f8;&#x1f1ea;', '&#x1f64b;&#x1f3fd;', '&#x1f1f8;&#x1f1ec;', '&#x1f1f8;&#x1f1ed;', '&#x1f64b;&#x1f3fe;', '&#x1f1f8;&#x1f1ee;', '&#x1f1f8;&#x1f1ef;', '&#x1f64b;&#x1f3ff;', '&#x1f1f8;&#x1f1f0;', '&#x1f1f8;&#x1f1f1;', '&#x1f64c;&#x1f3fb;', '&#x1f64c;&#x1f3fc;', '&#x1f64c;&#x1f3fd;', '&#x1f64c;&#x1f3fe;', '&#x1f64c;&#x1f3ff;', '&#x1f1f8;&#x1f1f2;', '&#x1f1f8;&#x1f1f3;', '&#x1f64d;&#x1f3fb;', '&#x1f1f8;&#x1f1f4;', '&#x1f1f8;&#x1f1f7;', '&#x1f64d;&#x1f3fc;', '&#x1f1f8;&#x1f1f8;', '&#x1f1f8;&#x1f1f9;', '&#x1f64d;&#x1f3fd;', '&#x1f1f8;&#x1f1fb;', '&#x1f1f8;&#x1f1fd;', '&#x1f64d;&#x1f3fe;', '&#x1f1f8;&#x1f1fe;', '&#x1f1f8;&#x1f1ff;', '&#x1f64d;&#x1f3ff;', '&#x1f1f9;&#x1f1e6;', '&#x1f1f9;&#x1f1e8;', '&#x1f1f9;&#x1f1e9;', '&#x1f1f9;&#x1f1eb;', '&#x1f64e;&#x1f3fb;', '&#x1f1f9;&#x1f1ec;', '&#x1f1f9;&#x1f1ed;', '&#x1f64e;&#x1f3fc;', '&#x1f1f9;&#x1f1ef;', '&#x1f1f9;&#x1f1f0;', '&#x1f64e;&#x1f3fd;', '&#x1f1f9;&#x1f1f1;', '&#x1f1f9;&#x1f1f2;', '&#x1f64e;&#x1f3fe;', '&#x1f1f9;&#x1f1f3;', '&#x1f1f9;&#x1f1f4;', '&#x1f64e;&#x1f3ff;', '&#x1f1f9;&#x1f1f7;', '&#x1f1f9;&#x1f1f9;', '&#x1f64f;&#x1f3fb;', '&#x1f64f;&#x1f3fc;', '&#x1f64f;&#x1f3fd;', '&#x1f64f;&#x1f3fe;', '&#x1f64f;&#x1f3ff;', '&#x1f1f9;&#x1f1fb;', '&#x1f1f9;&#x1f1fc;', '&#x1f6a3;&#x1f3fb;', '&#x1f1f9;&#x1f1ff;', '&#x1f1fa;&#x1f1e6;', '&#x1f6a3;&#x1f3fc;', '&#x1f1fa;&#x1f1ec;', '&#x1f1fa;&#x1f1f2;', '&#x1f6a3;&#x1f3fd;', '&#x1f1fa;&#x1f1f3;', '&#x1f1fa;&#x1f1f8;', '&#x1f6a3;&#x1f3fe;', '&#x1f1fa;&#x1f1fe;', '&#x1f1fa;&#x1f1ff;', '&#x1f6a3;&#x1f3ff;', '&#x1f1fb;&#x1f1e6;', '&#x1f1fb;&#x1f1e8;', '&#x1f1fb;&#x1f1ea;', '&#x1f1fb;&#x1f1ec;', '&#x1f6b4;&#x1f3fb;', '&#x1f1fb;&#x1f1ee;', '&#x1f1fb;&#x1f1f3;', '&#x1f6b4;&#x1f3fc;', '&#x1f1fb;&#x1f1fa;', '&#x1f1fc;&#x1f1eb;', '&#x1f6b4;&#x1f3fd;', '&#x1f1fc;&#x1f1f8;', '&#x1f1fd;&#x1f1f0;', '&#x1f6b4;&#x1f3fe;', '&#x1f1fe;&#x1f1ea;', '&#x1f1fe;&#x1f1f9;', '&#x1f6b4;&#x1f3ff;', '&#x1f1ff;&#x1f1e6;', '&#x1f1ff;&#x1f1f2;', '&#x1f1ff;&#x1f1fc;', '&#x1f385;&#x1f3fb;', '&#x1f6b5;&#x1f3fb;', '&#x1f385;&#x1f3fc;', '&#x1f385;&#x1f3fd;', '&#x1f6b5;&#x1f3fc;', '&#x1f469;&#x1f3fb;', '&#x1f385;&#x1f3fe;', '&#x1f6b5;&#x1f3fd;', '&#x1f385;&#x1f3ff;', '&#x1f3c2;&#x1f3fb;', '&#x1f6b5;&#x1f3fe;', '&#x1f3c2;&#x1f3fc;', '&#x1f3c2;&#x1f3fd;', '&#x1f6b5;&#x1f3ff;', '&#x1f3c2;&#x1f3fe;', '&#x1f3c2;&#x1f3ff;', '&#x1f44b;&#x1f3fc;', '&#x1f1e6;&#x1f1ea;', '&#x1f6b6;&#x1f3fb;', '&#x1f3c3;&#x1f3fb;', '&#x1f1e6;&#x1f1eb;', '&#x1f6b6;&#x1f3fc;', '&#x1f1e6;&#x1f1ec;', '&#x1f3c3;&#x1f3fc;', '&#x1f6b6;&#x1f3fd;', '&#x1f1e6;&#x1f1ee;', '&#x1f1e6;&#x1f1f1;', '&#x1f6b6;&#x1f3fe;', '&#x1f3c3;&#x1f3fd;', '&#x1f1e6;&#x1f1f2;', '&#x1f6b6;&#x1f3ff;', '&#x1f1e6;&#x1f1f4;', '&#x1f3c3;&#x1f3fe;', '&#x1f6c0;&#x1f3fb;', '&#x1f6c0;&#x1f3fc;', '&#x1f6c0;&#x1f3fd;', '&#x1f6c0;&#x1f3fe;', '&#x1f6c0;&#x1f3ff;', '&#x1f6cc;&#x1f3fb;', '&#x1f6cc;&#x1f3fc;', '&#x1f6cc;&#x1f3fd;', '&#x1f6cc;&#x1f3fe;', '&#x1f6cc;&#x1f3ff;', '&#x1f90f;&#x1f3fb;', '&#x1f90f;&#x1f3fc;', '&#x1f90f;&#x1f3fd;', '&#x1f90f;&#x1f3fe;', '&#x1f90f;&#x1f3ff;', '&#x1f918;&#x1f3fb;', '&#x1f918;&#x1f3fc;', '&#x1f918;&#x1f3fd;', '&#x1f918;&#x1f3fe;', '&#x1f918;&#x1f3ff;', '&#x1f919;&#x1f3fb;', '&#x1f919;&#x1f3fc;', '&#x1f919;&#x1f3fd;', '&#x1f919;&#x1f3fe;', '&#x1f919;&#x1f3ff;', '&#x1f91a;&#x1f3fb;', '&#x1f91a;&#x1f3fc;', '&#x1f91a;&#x1f3fd;', '&#x1f91a;&#x1f3fe;', '&#x1f91a;&#x1f3ff;', '&#x1f91b;&#x1f3fb;', '&#x1f91b;&#x1f3fc;', '&#x1f91b;&#x1f3fd;', '&#x1f91b;&#x1f3fe;', '&#x1f91b;&#x1f3ff;', '&#x1f91c;&#x1f3fb;', '&#x1f91c;&#x1f3fc;', '&#x1f91c;&#x1f3fd;', '&#x1f91c;&#x1f3fe;', '&#x1f91c;&#x1f3ff;', '&#x1f91e;&#x1f3fb;', '&#x1f91e;&#x1f3fc;', '&#x1f91e;&#x1f3fd;', '&#x1f91e;&#x1f3fe;', '&#x1f91e;&#x1f3ff;', '&#x1f91f;&#x1f3fb;', '&#x1f91f;&#x1f3fc;', '&#x1f91f;&#x1f3fd;', '&#x1f91f;&#x1f3fe;', '&#x1f91f;&#x1f3ff;', '&#x1f1e6;&#x1f1f6;', '&#x1f1e6;&#x1f1f7;', '&#x1f926;&#x1f3fb;', '&#x1f3c3;&#x1f3ff;', '&#x1f1e6;&#x1f1f8;', '&#x1f926;&#x1f3fc;', '&#x1f1e6;&#x1f1f9;', '&#x1f1e6;&#x1f1fa;', '&#x1f926;&#x1f3fd;', '&#x1f1e6;&#x1f1fc;', '&#x1f3c4;&#x1f3fb;', '&#x1f926;&#x1f3fe;', '&#x1f1e6;&#x1f1fd;', '&#x1f469;&#x1f3fc;', '&#x1f926;&#x1f3ff;', '&#x1f1e6;&#x1f1ff;', '&#x1f3c4;&#x1f3fc;', '&#x1f930;&#x1f3fb;', '&#x1f930;&#x1f3fc;', '&#x1f930;&#x1f3fd;', '&#x1f930;&#x1f3fe;', '&#x1f930;&#x1f3ff;', '&#x1f931;&#x1f3fb;', '&#x1f931;&#x1f3fc;', '&#x1f931;&#x1f3fd;', '&#x1f931;&#x1f3fe;', '&#x1f931;&#x1f3ff;', '&#x1f932;&#x1f3fb;', '&#x1f932;&#x1f3fc;', '&#x1f932;&#x1f3fd;', '&#x1f932;&#x1f3fe;', '&#x1f932;&#x1f3ff;', '&#x1f933;&#x1f3fb;', '&#x1f933;&#x1f3fc;', '&#x1f933;&#x1f3fd;', '&#x1f933;&#x1f3fe;', '&#x1f933;&#x1f3ff;', '&#x1f934;&#x1f3fb;', '&#x1f934;&#x1f3fc;', '&#x1f934;&#x1f3fd;', '&#x1f934;&#x1f3fe;', '&#x1f934;&#x1f3ff;', '&#x1f1e7;&#x1f1e6;', '&#x1f1e7;&#x1f1e7;', '&#x1f935;&#x1f3fb;', '&#x1f3c4;&#x1f3fd;', '&#x1f1e7;&#x1f1e9;', '&#x1f935;&#x1f3fc;', '&#x1f1e7;&#x1f1ea;', '&#x1f3c4;&#x1f3fe;', '&#x1f935;&#x1f3fd;', '&#x1f1e7;&#x1f1eb;', '&#x1f1e7;&#x1f1ec;', '&#x1f935;&#x1f3fe;', '&#x1f3c4;&#x1f3ff;', '&#x1f1e7;&#x1f1ed;', '&#x1f935;&#x1f3ff;', '&#x1f1e7;&#x1f1ee;', '&#x1f3c7;&#x1f3fb;', '&#x1f936;&#x1f3fb;', '&#x1f936;&#x1f3fc;', '&#x1f936;&#x1f3fd;', '&#x1f936;&#x1f3fe;', '&#x1f936;&#x1f3ff;', '&#x1f3c7;&#x1f3fc;', '&#x1f3c7;&#x1f3fd;', '&#x1f937;&#x1f3fb;', '&#x1f3c7;&#x1f3fe;', '&#x1f3c7;&#x1f3ff;', '&#x1f937;&#x1f3fc;', '&#x1f1e7;&#x1f1ef;', '&#x1f1e7;&#x1f1f1;', '&#x1f937;&#x1f3fd;', '&#x1f3ca;&#x1f3fb;', '&#x1f1e7;&#x1f1f2;', '&#x1f937;&#x1f3fe;', '&#x1f1e7;&#x1f1f3;', '&#x1f3ca;&#x1f3fc;', '&#x1f937;&#x1f3ff;', '&#x1f1e7;&#x1f1f4;', '&#x1f1e7;&#x1f1f6;', '&#x1f3ca;&#x1f3fd;', '&#x1f1e7;&#x1f1f7;', '&#x1f938;&#x1f3fb;', '&#x1f1e7;&#x1f1f8;', '&#x1f469;&#x1f3fd;', '&#x1f938;&#x1f3fc;', '&#x1f3ca;&#x1f3fe;', '&#x1f1e7;&#x1f1f9;', '&#x1f938;&#x1f3fd;', '&#x1f1e7;&#x1f1fb;', '&#x1f3ca;&#x1f3ff;', '&#x1f938;&#x1f3fe;', '&#x1f1e7;&#x1f1fc;', '&#x1f1e7;&#x1f1fe;', '&#x1f938;&#x1f3ff;', '&#x1f1e7;&#x1f1ff;', '&#x1f1e8;&#x1f1e6;', '&#x1f3cb;&#x1f3fb;', '&#x1f1e8;&#x1f1e8;', '&#x1f939;&#x1f3fb;', '&#x1f1e8;&#x1f1e9;', '&#x1f3cb;&#x1f3fc;', '&#x1f939;&#x1f3fc;', '&#x1f1e8;&#x1f1eb;', '&#x1f1e8;&#x1f1ec;', '&#x1f939;&#x1f3fd;', '&#x1f3cb;&#x1f3fd;', '&#x1f1e8;&#x1f1ed;', '&#x1f939;&#x1f3fe;', '&#x1f1e8;&#x1f1ee;', '&#x1f3cb;&#x1f3fe;', '&#x1f939;&#x1f3ff;', '&#x1f1e8;&#x1f1f0;', '&#x1f1e8;&#x1f1f1;', '&#x1f3cb;&#x1f3ff;', '&#x1f1e8;&#x1f1f2;', '&#x1f1e8;&#x1f1f3;', '&#x1f1e8;&#x1f1f4;', '&#x1f93d;&#x1f3fb;', '&#x1f1e8;&#x1f1f5;', '&#x1f3cc;&#x1f3fb;', '&#x1f93d;&#x1f3fc;', '&#x1f1e8;&#x1f1f7;', '&#x1f1e8;&#x1f1fa;', '&#x1f93d;&#x1f3fd;', '&#x1f3cc;&#x1f3fc;', '&#x1f1e8;&#x1f1fb;', '&#x1f93d;&#x1f3fe;', '&#x1f469;&#x1f3fe;', '&#x1f1e8;&#x1f1fc;', '&#x1f93d;&#x1f3ff;', '&#x1f3cc;&#x1f3fd;', '&#x1f1e8;&#x1f1fd;', '&#x1f1e8;&#x1f1fe;', '&#x1f3cc;&#x1f3fe;', '&#x1f93e;&#x1f3fb;', '&#x1f1e8;&#x1f1ff;', '&#x1f1e9;&#x1f1ea;', '&#x1f93e;&#x1f3fc;', '&#x1f3cc;&#x1f3ff;', '&#x1f1e9;&#x1f1ec;', '&#x1f93e;&#x1f3fd;', '&#x1f1e9;&#x1f1ef;', '&#x1f1e9;&#x1f1f0;', '&#x1f93e;&#x1f3fe;', '&#x1f1e9;&#x1f1f2;', '&#x1f1e9;&#x1f1f4;', '&#x1f93e;&#x1f3ff;', '&#x1f1e9;&#x1f1ff;', '&#x1f1ea;&#x1f1e6;', '&#x1f9b5;&#x1f3fb;', '&#x1f9b5;&#x1f3fc;', '&#x1f9b5;&#x1f3fd;', '&#x1f9b5;&#x1f3fe;', '&#x1f9b5;&#x1f3ff;', '&#x1f9b6;&#x1f3fb;', '&#x1f9b6;&#x1f3fc;', '&#x1f9b6;&#x1f3fd;', '&#x1f9b6;&#x1f3fe;', '&#x1f9b6;&#x1f3ff;', '&#x1f1ea;&#x1f1e8;', '&#x1f1ea;&#x1f1ea;', '&#x1f9b8;&#x1f3fb;', '&#x1f1ea;&#x1f1ec;', '&#x1f442;&#x1f3fb;', '&#x1f9b8;&#x1f3fc;', '&#x1f442;&#x1f3fc;', '&#x1f442;&#x1f3fd;', '&#x1f9b8;&#x1f3fd;', '&#x1f442;&#x1f3fe;', '&#x1f442;&#x1f3ff;', '&#x1f9b8;&#x1f3fe;', '&#x1f443;&#x1f3fb;', '&#x1f443;&#x1f3fc;', '&#x1f9b8;&#x1f3ff;', '&#x1f443;&#x1f3fd;', '&#x1f443;&#x1f3fe;', '&#x1f443;&#x1f3ff;', '&#x1f446;&#x1f3fb;', '&#x1f9b9;&#x1f3fb;', '&#x1f446;&#x1f3fc;', '&#x1f446;&#x1f3fd;', '&#x1f9b9;&#x1f3fc;', '&#x1f469;&#x1f3ff;', '&#x1f446;&#x1f3fe;', '&#x1f9b9;&#x1f3fd;', '&#x1f446;&#x1f3ff;', '&#x1f447;&#x1f3fb;', '&#x1f9b9;&#x1f3fe;', '&#x1f447;&#x1f3fc;', '&#x1f447;&#x1f3fd;', '&#x1f9b9;&#x1f3ff;', '&#x1f447;&#x1f3fe;', '&#x1f447;&#x1f3ff;', '&#x1f9bb;&#x1f3fb;', '&#x1f9bb;&#x1f3fc;', '&#x1f9bb;&#x1f3fd;', '&#x1f9bb;&#x1f3fe;', '&#x1f9bb;&#x1f3ff;', '&#x1f448;&#x1f3fb;', '&#x1f448;&#x1f3fc;', '&#x1f9cd;&#x1f3fb;', '&#x1f448;&#x1f3fd;', '&#x1f448;&#x1f3fe;', '&#x1f9cd;&#x1f3fc;', '&#x1f448;&#x1f3ff;', '&#x1f449;&#x1f3fb;', '&#x1f9cd;&#x1f3fd;', '&#x1f449;&#x1f3fc;', '&#x1f449;&#x1f3fd;', '&#x1f9cd;&#x1f3fe;', '&#x1f449;&#x1f3fe;', '&#x1f449;&#x1f3ff;', '&#x1f9cd;&#x1f3ff;', '&#x1f44a;&#x1f3fb;', '&#x1f44a;&#x1f3fc;', '&#x1f44a;&#x1f3fd;', '&#x1f44a;&#x1f3fe;', '&#x1f9ce;&#x1f3fb;', '&#x1f44a;&#x1f3ff;', '&#x1f44b;&#x1f3fb;', '&#x1f9ce;&#x1f3fc;', '&#x1f1e6;&#x1f1e8;', '&#x1f44b;&#x1f3fd;', '&#x1f9ce;&#x1f3fd;', '&#x1f44b;&#x1f3fe;', '&#x1f44b;&#x1f3ff;', '&#x1f9ce;&#x1f3fe;', '&#x1f44c;&#x1f3fb;', '&#x1f44c;&#x1f3fc;', '&#x1f9ce;&#x1f3ff;', '&#x1f44c;&#x1f3fd;', '&#x1f44c;&#x1f3fe;', '&#x1f44c;&#x1f3ff;', '&#x1f44d;&#x1f3fb;', '&#x1f9cf;&#x1f3fb;', '&#x1f44d;&#x1f3fc;', '&#x1f44d;&#x1f3fd;', '&#x1f9cf;&#x1f3fc;', '&#x1f44d;&#x1f3fe;', '&#x1f44d;&#x1f3ff;', '&#x1f9cf;&#x1f3fd;', '&#x1f46b;&#x1f3fb;', '&#x1f46b;&#x1f3fc;', '&#x1f9cf;&#x1f3fe;', '&#x1f46b;&#x1f3fd;', '&#x1f46b;&#x1f3fe;', '&#x1f9cf;&#x1f3ff;', '&#x1f46b;&#x1f3ff;', '&#x1f46c;&#x1f3fb;', '&#x1f46c;&#x1f3fc;', '&#x1f9d1;&#x1f3fb;', '&#x1f46c;&#x1f3fd;', '&#x1f46c;&#x1f3fe;', '&#x1f9d1;&#x1f3fc;', '&#x1f46c;&#x1f3ff;', '&#x1f46d;&#x1f3fb;', '&#x1f46d;&#x1f3fc;', '&#x1f9d1;&#x1f3fd;', '&#x1f46d;&#x1f3fd;', '&#x1f46d;&#x1f3fe;', '&#x1f46d;&#x1f3ff;', '&#x1f44e;&#x1f3fb;', '&#x1f9d1;&#x1f3fe;', '&#x1f44e;&#x1f3fc;', '&#x1f46e;&#x1f3fb;', '&#x1f44e;&#x1f3fd;', '&#x1f44e;&#x1f3fe;', '&#x1f46e;&#x1f3fc;', '&#x1f9d1;&#x1f3ff;', '&#x1f44e;&#x1f3ff;', '&#x1f9d2;&#x1f3fb;', '&#x1f9d2;&#x1f3fc;', '&#x1f9d2;&#x1f3fd;', '&#x1f9d2;&#x1f3fe;', '&#x1f9d2;&#x1f3ff;', '&#x1f9d3;&#x1f3fb;', '&#x1f9d3;&#x1f3fc;', '&#x1f9d3;&#x1f3fd;', '&#x1f9d3;&#x1f3fe;', '&#x1f9d3;&#x1f3ff;', '&#x1f9d4;&#x1f3fb;', '&#x1f9d4;&#x1f3fc;', '&#x1f9d4;&#x1f3fd;', '&#x1f9d4;&#x1f3fe;', '&#x1f9d4;&#x1f3ff;', '&#x1f9d5;&#x1f3fb;', '&#x1f9d5;&#x1f3fc;', '&#x1f9d5;&#x1f3fd;', '&#x1f9d5;&#x1f3fe;', '&#x1f9d5;&#x1f3ff;', '&#x1f44f;&#x1f3fb;', '&#x1f46e;&#x1f3fd;', '&#x1f9d6;&#x1f3fb;', '&#x1f44f;&#x1f3fc;', '&#x1f44f;&#x1f3fd;', '&#x1f9d6;&#x1f3fc;', '&#x1f46e;&#x1f3fe;', '&#x1f44f;&#x1f3fe;', '&#x1f9d6;&#x1f3fd;', '&#x1f44f;&#x1f3ff;', '&#x1f46e;&#x1f3ff;', '&#x1f9d6;&#x1f3fe;', '&#x1f450;&#x1f3fb;', '&#x1f450;&#x1f3fc;', '&#x1f9d6;&#x1f3ff;', '&#x1f450;&#x1f3fd;', '&#x1f450;&#x1f3fe;', '&#x1f470;&#x1f3fb;', '&#x1f470;&#x1f3fc;', '&#x1f9d7;&#x1f3fb;', '&#x1f470;&#x1f3fd;', '&#x1f470;&#x1f3fe;', '&#x1f9d7;&#x1f3fc;', '&#x1f470;&#x1f3ff;', '&#x1f450;&#x1f3ff;', '&#x1f9d7;&#x1f3fd;', '&#x1f466;&#x1f3fb;', '&#x1f471;&#x1f3fb;', '&#x1f9d7;&#x1f3fe;', '&#x1f466;&#x1f3fc;', '&#x1f466;&#x1f3fd;', '&#x1f9d7;&#x1f3ff;', '&#x1f471;&#x1f3fc;', '&#x1f466;&#x1f3fe;', '&#x1f466;&#x1f3ff;', '&#x1f471;&#x1f3fd;', '&#x1f9d8;&#x1f3fb;', '&#x1f467;&#x1f3fb;', '&#x1f467;&#x1f3fc;', '&#x1f9d8;&#x1f3fc;', '&#x1f471;&#x1f3fe;', '&#x1f467;&#x1f3fd;', '&#x1f9d8;&#x1f3fd;', '&#x1f467;&#x1f3fe;', '&#x1f471;&#x1f3ff;', '&#x1f9d8;&#x1f3fe;', '&#x1f467;&#x1f3ff;', '&#x1f1ea;&#x1f1ed;', '&#x1f9d8;&#x1f3ff;', '&#x1f472;&#x1f3fb;', '&#x1f472;&#x1f3fc;', '&#x1f472;&#x1f3fd;', '&#x1f472;&#x1f3fe;', '&#x1f9d9;&#x1f3fb;', '&#x1f472;&#x1f3ff;', '&#x1f1ea;&#x1f1f7;', '&#x1f9d9;&#x1f3fc;', '&#x1f1ea;&#x1f1f8;', '&#x1f473;&#x1f3fb;', '&#x1f9d9;&#x1f3fd;', '&#x1f1ea;&#x1f1f9;', '&#x1f1ea;&#x1f1fa;', '&#x1f9d9;&#x1f3fe;', '&#x1f473;&#x1f3fc;', '&#x1f1eb;&#x1f1ee;', '&#x1f9d9;&#x1f3ff;', '&#x1f1eb;&#x1f1ef;', '&#x1f473;&#x1f3fd;', '&#x1f1eb;&#x1f1f0;', '&#x1f1eb;&#x1f1f2;', '&#x1f9da;&#x1f3fb;', '&#x1f473;&#x1f3fe;', '&#x1f1eb;&#x1f1f4;', '&#x1f9da;&#x1f3fc;', '&#x1f1eb;&#x1f1f7;', '&#x1f473;&#x1f3ff;', '&#x1f9da;&#x1f3fd;', '&#x1f1ec;&#x1f1e6;', '&#x1f1ec;&#x1f1e7;', '&#x1f9da;&#x1f3fe;', '&#x1f474;&#x1f3fb;', '&#x1f474;&#x1f3fc;', '&#x1f9da;&#x1f3ff;', '&#x1f474;&#x1f3fd;', '&#x1f474;&#x1f3fe;', '&#x1f474;&#x1f3ff;', '&#x1f475;&#x1f3fb;', '&#x1f9db;&#x1f3fb;', '&#x1f475;&#x1f3fc;', '&#x1f475;&#x1f3fd;', '&#x1f9db;&#x1f3fc;', '&#x1f475;&#x1f3fe;', '&#x1f475;&#x1f3ff;', '&#x1f9db;&#x1f3fd;', '&#x1f476;&#x1f3fb;', '&#x1f476;&#x1f3fc;', '&#x1f9db;&#x1f3fe;', '&#x1f476;&#x1f3fd;', '&#x1f476;&#x1f3fe;', '&#x1f9db;&#x1f3ff;', '&#x1f476;&#x1f3ff;', '&#x1f1ec;&#x1f1e9;', '&#x1f1ec;&#x1f1ea;', '&#x1f477;&#x1f3fb;', '&#x1f9dc;&#x1f3fb;', '&#x1f1ec;&#x1f1eb;', '&#x1f1ec;&#x1f1ec;', '&#x1f9dc;&#x1f3fc;', '&#x1f477;&#x1f3fc;', '&#x1f1ec;&#x1f1ed;', '&#x1f9dc;&#x1f3fd;', '&#x1f1ec;&#x1f1ee;', '&#x1f477;&#x1f3fd;', '&#x1f9dc;&#x1f3fe;', '&#x1f1ec;&#x1f1f1;', '&#x1f1ec;&#x1f1f2;', '&#x1f9dc;&#x1f3ff;', '&#x1f477;&#x1f3fe;', '&#x1f1ec;&#x1f1f3;', '&#x1f1ec;&#x1f1f5;', '&#x1f477;&#x1f3ff;', '&#x1f9dd;&#x1f3fb;', '&#x1f468;&#x1f3fb;', '&#x1f1ec;&#x1f1f6;', '&#x1f9dd;&#x1f3fc;', '&#x1f478;&#x1f3fb;', '&#x1f478;&#x1f3fc;', '&#x1f9dd;&#x1f3fd;', '&#x1f478;&#x1f3fd;', '&#x1f478;&#x1f3fe;', '&#x1f9dd;&#x1f3fe;', '&#x1f478;&#x1f3ff;', '&#x1f47c;&#x1f3fb;', '&#x1f9dd;&#x1f3ff;', '&#x1f47c;&#x1f3fc;', '&#x1f47c;&#x1f3fd;', '&#x1f47c;&#x1f3fe;', '&#x1f47c;&#x1f3ff;', '&#x1f1ec;&#x1f1f7;', '&#x1f1ec;&#x1f1f8;', '&#x1f481;&#x1f3fb;', '&#x1f1ec;&#x1f1f9;', '&#x1f1ec;&#x1f1fa;', '&#x1f481;&#x1f3fc;', '&#x1f1ec;&#x1f1fc;', '&#x1f1ec;&#x1f1fe;', '&#x1f481;&#x1f3fd;', '&#x1f1ed;&#x1f1f0;', '&#x1f1ed;&#x1f1f2;', '&#x1f481;&#x1f3fe;', '&#x1f1ed;&#x1f1f3;', '&#x1f1e6;&#x1f1e9;', '&#x270d;&#x1f3ff;', '&#x26f9;&#x1f3fb;', '&#x270d;&#x1f3fe;', '&#x270d;&#x1f3fd;', '&#x270d;&#x1f3fc;', '&#x270d;&#x1f3fb;', '&#x270c;&#x1f3ff;', '&#x270c;&#x1f3fe;', '&#x270c;&#x1f3fd;', '&#x270c;&#x1f3fc;', '&#x270c;&#x1f3fb;', '&#x270b;&#x1f3ff;', '&#x270b;&#x1f3fe;', '&#x270b;&#x1f3fd;', '&#x270b;&#x1f3fc;', '&#x270b;&#x1f3fb;', '&#x270a;&#x1f3ff;', '&#x270a;&#x1f3fe;', '&#x270a;&#x1f3fd;', '&#x270a;&#x1f3fc;', '&#x270a;&#x1f3fb;', '&#x26f7;&#x1f3fd;', '&#x26f7;&#x1f3fe;', '&#x26f9;&#x1f3ff;', '&#x261d;&#x1f3ff;', '&#x261d;&#x1f3fe;', '&#x26f9;&#x1f3fe;', '&#x261d;&#x1f3fd;', '&#x261d;&#x1f3fc;', '&#x26f9;&#x1f3fd;', '&#x261d;&#x1f3fb;', '&#x26f7;&#x1f3ff;', '&#x26f9;&#x1f3fc;', '&#x26f7;&#x1f3fb;', '&#x26f7;&#x1f3fc;', '&#x34;&#x20e3;', '&#x23;&#x20e3;', '&#x30;&#x20e3;', '&#x31;&#x20e3;', '&#x32;&#x20e3;', '&#x33;&#x20e3;', '&#x2a;&#x20e3;', '&#x35;&#x20e3;', '&#x36;&#x20e3;', '&#x37;&#x20e3;', '&#x38;&#x20e3;', '&#x39;&#x20e3;', '&#x1f1f3;', '&#x1f61b;', '&#x1f61c;', '&#x1f61d;', '&#x1f61e;', '&#x1f61f;', '&#x1f620;', '&#x1f621;', '&#x1f622;', '&#x1f623;', '&#x1f624;', '&#x1f625;', '&#x1f626;', '&#x1f627;', '&#x1f628;', '&#x1f629;', '&#x1f62a;', '&#x1f62b;', '&#x1f62c;', '&#x1f62d;', '&#x1f62e;', '&#x1f62f;', '&#x1f630;', '&#x1f631;', '&#x1f632;', '&#x1f633;', '&#x1f634;', '&#x1f635;', '&#x1f636;', '&#x1f637;', '&#x1f638;', '&#x1f639;', '&#x1f63a;', '&#x1f63b;', '&#x1f63c;', '&#x1f63d;', '&#x1f63e;', '&#x1f63f;', '&#x1f640;', '&#x1f641;', '&#x1f642;', '&#x1f643;', '&#x1f644;', '&#x1f3ef;', '&#x1f3f0;', '&#x1f32d;', '&#x1f32e;', '&#x1f3f3;', '&#x1f32f;', '&#x1f330;', '&#x1f331;', '&#x1f332;', '&#x1f3f4;', '&#x1f3f5;', '&#x1f3f7;', '&#x1f3f8;', '&#x1f3f9;', '&#x1f3fa;', '&#x1f3fb;', '&#x1f3fc;', '&#x1f645;', '&#x1f3fd;', '&#x1f3fe;', '&#x1f3ff;', '&#x1f400;', '&#x1f401;', '&#x1f402;', '&#x1f403;', '&#x1f404;', '&#x1f405;', '&#x1f406;', '&#x1f407;', '&#x1f408;', '&#x1f409;', '&#x1f40a;', '&#x1f40b;', '&#x1f40c;', '&#x1f40d;', '&#x1f646;', '&#x1f40e;', '&#x1f40f;', '&#x1f410;', '&#x1f411;', '&#x1f412;', '&#x1f413;', '&#x1f414;', '&#x1f333;', '&#x1f415;', '&#x1f416;', '&#x1f417;', '&#x1f418;', '&#x1f419;', '&#x1f41a;', '&#x1f41b;', '&#x1f41c;', '&#x1f41d;', '&#x1f647;', '&#x1f648;', '&#x1f649;', '&#x1f64a;', '&#x1f41e;', '&#x1f41f;', '&#x1f420;', '&#x1f421;', '&#x1f422;', '&#x1f423;', '&#x1f424;', '&#x1f425;', '&#x1f426;', '&#x1f427;', '&#x1f428;', '&#x1f429;', '&#x1f42a;', '&#x1f42b;', '&#x1f42c;', '&#x1f42d;', '&#x1f42e;', '&#x1f64b;', '&#x1f42f;', '&#x1f430;', '&#x1f431;', '&#x1f432;', '&#x1f433;', '&#x1f64c;', '&#x1f434;', '&#x1f435;', '&#x1f436;', '&#x1f437;', '&#x1f438;', '&#x1f439;', '&#x1f43a;', '&#x1f43b;', '&#x1f43c;', '&#x1f43d;', '&#x1f43e;', '&#x1f43f;', '&#x1f440;', '&#x1f334;', '&#x1f441;', '&#x1f335;', '&#x1f336;', '&#x1f64d;', '&#x1f337;', '&#x1f338;', '&#x1f339;', '&#x1f442;', '&#x1f33a;', '&#x1f33b;', '&#x1f33c;', '&#x1f33d;', '&#x1f33e;', '&#x1f443;', '&#x1f444;', '&#x1f445;', '&#x1f33f;', '&#x1f340;', '&#x1f341;', '&#x1f342;', '&#x1f343;', '&#x1f64e;', '&#x1f446;', '&#x1f344;', '&#x1f345;', '&#x1f346;', '&#x1f347;', '&#x1f64f;', '&#x1f680;', '&#x1f681;', '&#x1f682;', '&#x1f683;', '&#x1f684;', '&#x1f685;', '&#x1f686;', '&#x1f687;', '&#x1f688;', '&#x1f689;', '&#x1f68a;', '&#x1f68b;', '&#x1f68c;', '&#x1f68d;', '&#x1f68e;', '&#x1f68f;', '&#x1f690;', '&#x1f691;', '&#x1f692;', '&#x1f693;', '&#x1f694;', '&#x1f695;', '&#x1f696;', '&#x1f697;', '&#x1f698;', '&#x1f699;', '&#x1f69a;', '&#x1f69b;', '&#x1f69c;', '&#x1f69d;', '&#x1f69e;', '&#x1f69f;', '&#x1f6a0;', '&#x1f6a1;', '&#x1f6a2;', '&#x1f348;', '&#x1f447;', '&#x1f349;', '&#x1f34a;', '&#x1f34b;', '&#x1f34c;', '&#x1f34d;', '&#x1f448;', '&#x1f34e;', '&#x1f34f;', '&#x1f350;', '&#x1f351;', '&#x1f352;', '&#x1f449;', '&#x1f353;', '&#x1f354;', '&#x1f355;', '&#x1f6a3;', '&#x1f6a4;', '&#x1f6a5;', '&#x1f6a6;', '&#x1f6a7;', '&#x1f6a8;', '&#x1f6a9;', '&#x1f6aa;', '&#x1f6ab;', '&#x1f6ac;', '&#x1f6ad;', '&#x1f6ae;', '&#x1f6af;', '&#x1f6b0;', '&#x1f6b1;', '&#x1f6b2;', '&#x1f6b3;', '&#x1f356;', '&#x1f357;', '&#x1f44a;', '&#x1f358;', '&#x1f359;', '&#x1f35a;', '&#x1f35b;', '&#x1f35c;', '&#x1f44b;', '&#x1f35d;', '&#x1f35e;', '&#x1f35f;', '&#x1f360;', '&#x1f361;', '&#x1f44c;', '&#x1f362;', '&#x1f363;', '&#x1f6b4;', '&#x1f364;', '&#x1f365;', '&#x1f366;', '&#x1f44d;', '&#x1f367;', '&#x1f469;', '&#x1f46a;', '&#x1f368;', '&#x1f369;', '&#x1f36a;', '&#x1f36b;', '&#x1f44e;', '&#x1f46b;', '&#x1f36c;', '&#x1f36d;', '&#x1f36e;', '&#x1f36f;', '&#x1f6b5;', '&#x1f370;', '&#x1f46c;', '&#x1f44f;', '&#x1f371;', '&#x1f372;', '&#x1f373;', '&#x1f374;', '&#x1f46d;', '&#x1f375;', '&#x1f450;', '&#x1f451;', '&#x1f452;', '&#x1f453;', '&#x1f454;', '&#x1f455;', '&#x1f456;', '&#x1f457;', '&#x1f6b6;', '&#x1f6b7;', '&#x1f6b8;', '&#x1f6b9;', '&#x1f6ba;', '&#x1f6bb;', '&#x1f6bc;', '&#x1f6bd;', '&#x1f6be;', '&#x1f6bf;', '&#x1f458;', '&#x1f459;', '&#x1f45a;', '&#x1f45b;', '&#x1f45c;', '&#x1f6c0;', '&#x1f6c1;', '&#x1f6c2;', '&#x1f6c3;', '&#x1f6c4;', '&#x1f6c5;', '&#x1f6cb;', '&#x1f45d;', '&#x1f45e;', '&#x1f45f;', '&#x1f46e;', '&#x1f460;', '&#x1f6cc;', '&#x1f6cd;', '&#x1f6ce;', '&#x1f6cf;', '&#x1f6d0;', '&#x1f6d1;', '&#x1f6d2;', '&#x1f6d5;', '&#x1f6e0;', '&#x1f6e1;', '&#x1f6e2;', '&#x1f6e3;', '&#x1f6e4;', '&#x1f6e5;', '&#x1f6e9;', '&#x1f6eb;', '&#x1f6ec;', '&#x1f6f0;', '&#x1f6f3;', '&#x1f6f4;', '&#x1f6f5;', '&#x1f6f6;', '&#x1f6f7;', '&#x1f6f8;', '&#x1f6f9;', '&#x1f6fa;', '&#x1f7e0;', '&#x1f7e1;', '&#x1f7e2;', '&#x1f7e3;', '&#x1f7e4;', '&#x1f7e5;', '&#x1f7e6;', '&#x1f7e7;', '&#x1f7e8;', '&#x1f7e9;', '&#x1f7ea;', '&#x1f7eb;', '&#x1f90d;', '&#x1f90e;', '&#x1f461;', '&#x1f46f;', '&#x1f462;', '&#x1f463;', '&#x1f464;', '&#x1f90f;', '&#x1f910;', '&#x1f911;', '&#x1f912;', '&#x1f913;', '&#x1f914;', '&#x1f915;', '&#x1f916;', '&#x1f917;', '&#x1f465;', '&#x1f376;', '&#x1f470;', '&#x1f377;', '&#x1f378;', '&#x1f918;', '&#x1f379;', '&#x1f37a;', '&#x1f466;', '&#x1f37b;', '&#x1f37c;', '&#x1f919;', '&#x1f37d;', '&#x1f37e;', '&#x1f37f;', '&#x1f467;', '&#x1f380;', '&#x1f91a;', '&#x1f381;', '&#x1f382;', '&#x1f383;', '&#x1f384;', '&#x1f1f5;', '&#x1f91b;', '&#x1f471;', '&#x1f17e;', '&#x1f1f6;', '&#x1f1f2;', '&#x1f17f;', '&#x1f91c;', '&#x1f91d;', '&#x1f385;', '&#x1f472;', '&#x1f386;', '&#x1f387;', '&#x1f388;', '&#x1f91e;', '&#x1f389;', '&#x1f38a;', '&#x1f38b;', '&#x1f38c;', '&#x1f38d;', '&#x1f91f;', '&#x1f920;', '&#x1f921;', '&#x1f922;', '&#x1f923;', '&#x1f924;', '&#x1f925;', '&#x1f38e;', '&#x1f38f;', '&#x1f390;', '&#x1f391;', '&#x1f392;', '&#x1f393;', '&#x1f396;', '&#x1f397;', '&#x1f399;', '&#x1f473;', '&#x1f39a;', '&#x1f39b;', '&#x1f39e;', '&#x1f39f;', '&#x1f3a0;', '&#x1f474;', '&#x1f3a1;', '&#x1f926;', '&#x1f927;', '&#x1f928;', '&#x1f929;', '&#x1f92a;', '&#x1f92b;', '&#x1f92c;', '&#x1f92d;', '&#x1f92e;', '&#x1f92f;', '&#x1f3a2;', '&#x1f3a3;', '&#x1f3a4;', '&#x1f3a5;', '&#x1f475;', '&#x1f930;', '&#x1f3a6;', '&#x1f3a7;', '&#x1f3a8;', '&#x1f3a9;', '&#x1f3aa;', '&#x1f931;', '&#x1f476;', '&#x1f3ab;', '&#x1f3ac;', '&#x1f3ad;', '&#x1f3ae;', '&#x1f932;', '&#x1f3af;', '&#x1f3b0;', '&#x1f3b1;', '&#x1f3b2;', '&#x1f3b3;', '&#x1f933;', '&#x1f3b4;', '&#x1f3b5;', '&#x1f3b6;', '&#x1f3b7;', '&#x1f3b8;', '&#x1f934;', '&#x1f3b9;', '&#x1f3ba;', '&#x1f3bb;', '&#x1f477;', '&#x1f3bc;', '&#x1f3bd;', '&#x1f3be;', '&#x1f3bf;', '&#x1f3c0;', '&#x1f478;', '&#x1f479;', '&#x1f47a;', '&#x1f47b;', '&#x1f3c1;', '&#x1f1e7;', '&#x1f1ee;', '&#x1f1ea;', '&#x1f935;', '&#x1f1f7;', '&#x1f47c;', '&#x1f47d;', '&#x1f47e;', '&#x1f47f;', '&#x1f936;', '&#x1f480;', '&#x1f1f1;', '&#x1f3c2;', '&#x1f18e;', '&#x1f191;', '&#x1f1e8;', '&#x1f1f9;', '&#x1f1ef;', '&#x1f192;', '&#x1f1ec;', '&#x1f193;', '&#x1f0cf;', '&#x1f194;', '&#x1f1f4;', '&#x1f1fa;', '&#x1f1eb;', '&#x1f195;', '&#x1f937;', '&#x1f196;', '&#x1f481;', '&#x1f197;', '&#x1f1ed;', '&#x1f3c3;', '&#x1f198;', '&#x1f1e9;', '&#x1f1fb;', '&#x1f1f0;', '&#x1f199;', '&#x1f1fc;', '&#x1f19a;', '&#x1f1fd;', '&#x1f1f8;', '&#x1f004;', '&#x1f1fe;', '&#x1f1e6;', '&#x1f938;', '&#x1f170;', '&#x1f171;', '&#x1f482;', '&#x1f1ff;', '&#x1f201;', '&#x1f202;', '&#x1f3c4;', '&#x1f3c5;', '&#x1f483;', '&#x1f484;', '&#x1f3c6;', '&#x1f21a;', '&#x1f22f;', '&#x1f232;', '&#x1f233;', '&#x1f485;', '&#x1f234;', '&#x1f939;', '&#x1f93a;', '&#x1f3c7;', '&#x1f3c8;', '&#x1f93c;', '&#x1f3c9;', '&#x1f235;', '&#x1f236;', '&#x1f237;', '&#x1f238;', '&#x1f239;', '&#x1f23a;', '&#x1f250;', '&#x1f251;', '&#x1f300;', '&#x1f301;', '&#x1f302;', '&#x1f303;', '&#x1f304;', '&#x1f486;', '&#x1f305;', '&#x1f306;', '&#x1f93d;', '&#x1f307;', '&#x1f308;', '&#x1f3ca;', '&#x1f309;', '&#x1f30a;', '&#x1f30b;', '&#x1f30c;', '&#x1f30d;', '&#x1f30e;', '&#x1f30f;', '&#x1f310;', '&#x1f311;', '&#x1f312;', '&#x1f313;', '&#x1f314;', '&#x1f487;', '&#x1f488;', '&#x1f93e;', '&#x1f93f;', '&#x1f940;', '&#x1f941;', '&#x1f942;', '&#x1f943;', '&#x1f944;', '&#x1f945;', '&#x1f947;', '&#x1f948;', '&#x1f949;', '&#x1f94a;', '&#x1f94b;', '&#x1f94c;', '&#x1f94d;', '&#x1f94e;', '&#x1f94f;', '&#x1f950;', '&#x1f951;', '&#x1f952;', '&#x1f953;', '&#x1f954;', '&#x1f955;', '&#x1f956;', '&#x1f957;', '&#x1f958;', '&#x1f959;', '&#x1f95a;', '&#x1f95b;', '&#x1f95c;', '&#x1f95d;', '&#x1f95e;', '&#x1f95f;', '&#x1f960;', '&#x1f961;', '&#x1f962;', '&#x1f963;', '&#x1f964;', '&#x1f965;', '&#x1f966;', '&#x1f967;', '&#x1f968;', '&#x1f969;', '&#x1f96a;', '&#x1f96b;', '&#x1f96c;', '&#x1f96d;', '&#x1f96e;', '&#x1f96f;', '&#x1f970;', '&#x1f971;', '&#x1f973;', '&#x1f974;', '&#x1f975;', '&#x1f976;', '&#x1f97a;', '&#x1f97b;', '&#x1f97c;', '&#x1f97d;', '&#x1f97e;', '&#x1f97f;', '&#x1f980;', '&#x1f981;', '&#x1f982;', '&#x1f983;', '&#x1f984;', '&#x1f985;', '&#x1f986;', '&#x1f987;', '&#x1f988;', '&#x1f989;', '&#x1f98a;', '&#x1f98b;', '&#x1f98c;', '&#x1f98d;', '&#x1f98e;', '&#x1f98f;', '&#x1f990;', '&#x1f991;', '&#x1f992;', '&#x1f993;', '&#x1f994;', '&#x1f995;', '&#x1f996;', '&#x1f997;', '&#x1f998;', '&#x1f999;', '&#x1f99a;', '&#x1f99b;', '&#x1f99c;', '&#x1f99d;', '&#x1f99e;', '&#x1f99f;', '&#x1f9a0;', '&#x1f9a1;', '&#x1f9a2;', '&#x1f9a5;', '&#x1f9a6;', '&#x1f9a7;', '&#x1f9a8;', '&#x1f9a9;', '&#x1f9aa;', '&#x1f9ae;', '&#x1f9af;', '&#x1f9b0;', '&#x1f9b1;', '&#x1f9b2;', '&#x1f9b3;', '&#x1f9b4;', '&#x1f489;', '&#x1f48a;', '&#x1f48b;', '&#x1f48c;', '&#x1f48d;', '&#x1f9b5;', '&#x1f48e;', '&#x1f48f;', '&#x1f490;', '&#x1f491;', '&#x1f492;', '&#x1f9b6;', '&#x1f9b7;', '&#x1f493;', '&#x1f494;', '&#x1f495;', '&#x1f496;', '&#x1f497;', '&#x1f498;', '&#x1f499;', '&#x1f49a;', '&#x1f49b;', '&#x1f49c;', '&#x1f49d;', '&#x1f49e;', '&#x1f49f;', '&#x1f4a0;', '&#x1f4a1;', '&#x1f4a2;', '&#x1f4a3;', '&#x1f9b8;', '&#x1f4a4;', '&#x1f4a5;', '&#x1f4a6;', '&#x1f4a7;', '&#x1f4a8;', '&#x1f4a9;', '&#x1f315;', '&#x1f316;', '&#x1f317;', '&#x1f318;', '&#x1f319;', '&#x1f4aa;', '&#x1f4ab;', '&#x1f4ac;', '&#x1f4ad;', '&#x1f4ae;', '&#x1f4af;', '&#x1f9b9;', '&#x1f9ba;', '&#x1f4b0;', '&#x1f4b1;', '&#x1f4b2;', '&#x1f4b3;', '&#x1f4b4;', '&#x1f9bb;', '&#x1f9bc;', '&#x1f9bd;', '&#x1f9be;', '&#x1f9bf;', '&#x1f9c0;', '&#x1f9c1;', '&#x1f9c2;', '&#x1f9c3;', '&#x1f9c4;', '&#x1f9c5;', '&#x1f9c6;', '&#x1f9c7;', '&#x1f9c8;', '&#x1f9c9;', '&#x1f9ca;', '&#x1f4b5;', '&#x1f4b6;', '&#x1f4b7;', '&#x1f4b8;', '&#x1f4b9;', '&#x1f4ba;', '&#x1f4bb;', '&#x1f4bc;', '&#x1f4bd;', '&#x1f4be;', '&#x1f4bf;', '&#x1f4c0;', '&#x1f4c1;', '&#x1f4c2;', '&#x1f4c3;', '&#x1f4c4;', '&#x1f4c5;', '&#x1f9cd;', '&#x1f4c6;', '&#x1f4c7;', '&#x1f4c8;', '&#x1f4c9;', '&#x1f4ca;', '&#x1f4cb;', '&#x1f4cc;', '&#x1f4cd;', '&#x1f4ce;', '&#x1f4cf;', '&#x1f4d0;', '&#x1f4d1;', '&#x1f4d2;', '&#x1f4d3;', '&#x1f4d4;', '&#x1f4d5;', '&#x1f4d6;', '&#x1f9ce;', '&#x1f4d7;', '&#x1f4d8;', '&#x1f4d9;', '&#x1f4da;', '&#x1f4db;', '&#x1f4dc;', '&#x1f4dd;', '&#x1f4de;', '&#x1f4df;', '&#x1f4e0;', '&#x1f4e1;', '&#x1f4e2;', '&#x1f4e3;', '&#x1f4e4;', '&#x1f4e5;', '&#x1f4e6;', '&#x1f4e7;', '&#x1f9cf;', '&#x1f9d0;', '&#x1f4e8;', '&#x1f4e9;', '&#x1f4ea;', '&#x1f4eb;', '&#x1f4ec;', '&#x1f4ed;', '&#x1f4ee;', '&#x1f4ef;', '&#x1f4f0;', '&#x1f4f1;', '&#x1f4f2;', '&#x1f4f3;', '&#x1f4f4;', '&#x1f4f5;', '&#x1f4f6;', '&#x1f4f7;', '&#x1f4f8;', '&#x1f4f9;', '&#x1f4fa;', '&#x1f4fb;', '&#x1f4fc;', '&#x1f9d1;', '&#x1f4fd;', '&#x1f4ff;', '&#x1f500;', '&#x1f501;', '&#x1f502;', '&#x1f9d2;', '&#x1f503;', '&#x1f504;', '&#x1f505;', '&#x1f506;', '&#x1f507;', '&#x1f9d3;', '&#x1f508;', '&#x1f509;', '&#x1f50a;', '&#x1f50b;', '&#x1f50c;', '&#x1f9d4;', '&#x1f50d;', '&#x1f50e;', '&#x1f50f;', '&#x1f510;', '&#x1f511;', '&#x1f9d5;', '&#x1f512;', '&#x1f513;', '&#x1f514;', '&#x1f515;', '&#x1f516;', '&#x1f517;', '&#x1f518;', '&#x1f519;', '&#x1f51a;', '&#x1f51b;', '&#x1f51c;', '&#x1f51d;', '&#x1f51e;', '&#x1f51f;', '&#x1f520;', '&#x1f521;', '&#x1f522;', '&#x1f9d6;', '&#x1f523;', '&#x1f524;', '&#x1f525;', '&#x1f526;', '&#x1f527;', '&#x1f528;', '&#x1f529;', '&#x1f52a;', '&#x1f52b;', '&#x1f52c;', '&#x1f52d;', '&#x1f52e;', '&#x1f52f;', '&#x1f530;', '&#x1f531;', '&#x1f532;', '&#x1f533;', '&#x1f9d7;', '&#x1f534;', '&#x1f535;', '&#x1f536;', '&#x1f537;', '&#x1f538;', '&#x1f539;', '&#x1f53a;', '&#x1f53b;', '&#x1f53c;', '&#x1f53d;', '&#x1f549;', '&#x1f54a;', '&#x1f54b;', '&#x1f54c;', '&#x1f54d;', '&#x1f54e;', '&#x1f550;', '&#x1f9d8;', '&#x1f551;', '&#x1f552;', '&#x1f553;', '&#x1f554;', '&#x1f555;', '&#x1f556;', '&#x1f557;', '&#x1f558;', '&#x1f559;', '&#x1f55a;', '&#x1f55b;', '&#x1f55c;', '&#x1f55d;', '&#x1f55e;', '&#x1f55f;', '&#x1f560;', '&#x1f561;', '&#x1f9d9;', '&#x1f562;', '&#x1f563;', '&#x1f564;', '&#x1f565;', '&#x1f566;', '&#x1f567;', '&#x1f56f;', '&#x1f570;', '&#x1f573;', '&#x1f3cb;', '&#x1f31a;', '&#x1f31b;', '&#x1f31c;', '&#x1f31d;', '&#x1f31e;', '&#x1f31f;', '&#x1f320;', '&#x1f9da;', '&#x1f321;', '&#x1f324;', '&#x1f325;', '&#x1f326;', '&#x1f327;', '&#x1f328;', '&#x1f329;', '&#x1f32a;', '&#x1f32b;', '&#x1f574;', '&#x1f468;', '&#x1f32c;', '&#x1f3cc;', '&#x1f3cd;', '&#x1f3ce;', '&#x1f3cf;', '&#x1f3d0;', '&#x1f9db;', '&#x1f3d1;', '&#x1f3d2;', '&#x1f3d3;', '&#x1f3d4;', '&#x1f3d5;', '&#x1f3d6;', '&#x1f3d7;', '&#x1f3d8;', '&#x1f3d9;', '&#x1f3da;', '&#x1f575;', '&#x1f576;', '&#x1f577;', '&#x1f578;', '&#x1f579;', '&#x1f3db;', '&#x1f3dc;', '&#x1f9dc;', '&#x1f3dd;', '&#x1f3de;', '&#x1f3df;', '&#x1f57a;', '&#x1f587;', '&#x1f58a;', '&#x1f58b;', '&#x1f58c;', '&#x1f58d;', '&#x1f3e0;', '&#x1f3e1;', '&#x1f3e2;', '&#x1f3e3;', '&#x1f3e4;', '&#x1f590;', '&#x1f3e5;', '&#x1f3e6;', '&#x1f9dd;', '&#x1f3e7;', '&#x1f3e8;', '&#x1f9de;', '&#x1f3e9;', '&#x1f595;', '&#x1f9df;', '&#x1f9e0;', '&#x1f9e1;', '&#x1f9e2;', '&#x1f9e3;', '&#x1f9e4;', '&#x1f9e5;', '&#x1f9e6;', '&#x1f9e7;', '&#x1f9e8;', '&#x1f9e9;', '&#x1f9ea;', '&#x1f9eb;', '&#x1f9ec;', '&#x1f9ed;', '&#x1f9ee;', '&#x1f9ef;', '&#x1f9f0;', '&#x1f9f1;', '&#x1f9f2;', '&#x1f9f3;', '&#x1f9f4;', '&#x1f9f5;', '&#x1f9f6;', '&#x1f9f7;', '&#x1f9f8;', '&#x1f9f9;', '&#x1f9fa;', '&#x1f9fb;', '&#x1f9fc;', '&#x1f9fd;', '&#x1f9fe;', '&#x1f9ff;', '&#x1fa70;', '&#x1fa71;', '&#x1fa72;', '&#x1fa73;', '&#x1fa78;', '&#x1fa79;', '&#x1fa7a;', '&#x1fa80;', '&#x1fa81;', '&#x1fa82;', '&#x1fa90;', '&#x1fa91;', '&#x1fa92;', '&#x1fa93;', '&#x1fa94;', '&#x1fa95;', '&#x1f3ea;', '&#x1f3eb;', '&#x1f3ec;', '&#x1f3ed;', '&#x1f3ee;', '&#x1f596;', '&#x1f5a4;', '&#x1f5a5;', '&#x1f5a8;', '&#x1f5b1;', '&#x1f5b2;', '&#x1f5bc;', '&#x1f5c2;', '&#x1f5c3;', '&#x1f5c4;', '&#x1f5d1;', '&#x1f5d2;', '&#x1f5d3;', '&#x1f5dc;', '&#x1f5dd;', '&#x1f5de;', '&#x1f5e1;', '&#x1f5e3;', '&#x1f5e8;', '&#x1f5ef;', '&#x1f5f3;', '&#x1f5fa;', '&#x1f5fb;', '&#x1f5fc;', '&#x1f5fd;', '&#x1f5fe;', '&#x1f5ff;', '&#x1f600;', '&#x1f601;', '&#x1f602;', '&#x1f603;', '&#x1f604;', '&#x1f605;', '&#x1f606;', '&#x1f607;', '&#x1f608;', '&#x1f609;', '&#x1f60a;', '&#x1f60b;', '&#x1f60c;', '&#x1f60d;', '&#x1f60e;', '&#x1f60f;', '&#x1f610;', '&#x1f611;', '&#x1f612;', '&#x1f613;', '&#x1f614;', '&#x1f615;', '&#x1f616;', '&#x1f617;', '&#x1f618;', '&#x1f619;', '&#x1f61a;', '&#x25ab;', '&#x2626;', '&#x262e;', '&#x262f;', '&#x2638;', '&#x2639;', '&#x263a;', '&#x2640;', '&#x2642;', '&#x2648;', '&#x2649;', '&#x264a;', '&#x264b;', '&#x264c;', '&#x264d;', '&#x264e;', '&#x264f;', '&#x2650;', '&#x2651;', '&#x2652;', '&#x2653;', '&#x265f;', '&#x2660;', '&#x2663;', '&#x2665;', '&#x2666;', '&#x2668;', '&#x267b;', '&#x267e;', '&#x267f;', '&#x2692;', '&#x2693;', '&#x2694;', '&#x2695;', '&#x2696;', '&#x2697;', '&#x2699;', '&#x269b;', '&#x269c;', '&#x26a0;', '&#x26a1;', '&#x26a7;', '&#x26aa;', '&#x26ab;', '&#x26b0;', '&#x26b1;', '&#x26bd;', '&#x26be;', '&#x26c4;', '&#x26c5;', '&#x26c8;', '&#x26ce;', '&#x26cf;', '&#x26d1;', '&#x26d3;', '&#x26d4;', '&#x26e9;', '&#x26ea;', '&#x26f0;', '&#x26f1;', '&#x26f2;', '&#x26f3;', '&#x26f4;', '&#x26f5;', '&#x2623;', '&#x2622;', '&#x2620;', '&#x261d;', '&#x2618;', '&#x26f7;', '&#x26f8;', '&#x2615;', '&#x2614;', '&#x2611;', '&#x260e;', '&#x2604;', '&#x2603;', '&#x2602;', '&#x2601;', '&#x2600;', '&#x25fe;', '&#x25fd;', '&#x25fc;', '&#x25fb;', '&#x25c0;', '&#x25b6;', '&#x262a;', '&#x25aa;', '&#x26f9;', '&#x26fa;', '&#x26fd;', '&#x2702;', '&#x2705;', '&#x2708;', '&#x2709;', '&#x24c2;', '&#x23fa;', '&#x23f9;', '&#x23f8;', '&#x23f3;', '&#x270a;', '&#x23f2;', '&#x23f1;', '&#x23f0;', '&#x23ef;', '&#x23ee;', '&#x270b;', '&#x23ed;', '&#x23ec;', '&#x23eb;', '&#x23ea;', '&#x23e9;', '&#x270c;', '&#x23cf;', '&#x2328;', '&#x231b;', '&#x231a;', '&#x21aa;', '&#x270d;', '&#x270f;', '&#x2712;', '&#x2714;', '&#x2716;', '&#x271d;', '&#x2721;', '&#x2728;', '&#x2733;', '&#x2734;', '&#x2744;', '&#x2747;', '&#x274c;', '&#x274e;', '&#x2753;', '&#x2754;', '&#x2755;', '&#x2757;', '&#x2763;', '&#x2764;', '&#x2795;', '&#x2796;', '&#x2797;', '&#x27a1;', '&#x27b0;', '&#x27bf;', '&#x2934;', '&#x2935;', '&#x21a9;', '&#x2b05;', '&#x2b06;', '&#x2b07;', '&#x2b1b;', '&#x2b1c;', '&#x2b50;', '&#x2b55;', '&#x2199;', '&#x3030;', '&#x303d;', '&#x2198;', '&#x2197;', '&#x3297;', '&#x3299;', '&#x2196;', '&#x2195;', '&#x2194;', '&#x2139;', '&#x2122;', '&#x2049;', '&#x203c;', '&#xe50a;' );\n\t$partials = array( '&#x1f004;', '&#x1f0cf;', '&#x1f170;', '&#x1f171;', '&#x1f17e;', '&#x1f17f;', '&#x1f18e;', '&#x1f191;', '&#x1f192;', '&#x1f193;', '&#x1f194;', '&#x1f195;', '&#x1f196;', '&#x1f197;', '&#x1f198;', '&#x1f199;', '&#x1f19a;', '&#x1f1e6;', '&#x1f1e8;', '&#x1f1e9;', '&#x1f1ea;', '&#x1f1eb;', '&#x1f1ec;', '&#x1f1ee;', '&#x1f1f1;', '&#x1f1f2;', '&#x1f1f4;', '&#x1f1f6;', '&#x1f1f7;', '&#x1f1f8;', '&#x1f1f9;', '&#x1f1fa;', '&#x1f1fc;', '&#x1f1fd;', '&#x1f1ff;', '&#x1f1e7;', '&#x1f1ed;', '&#x1f1ef;', '&#x1f1f3;', '&#x1f1fb;', '&#x1f1fe;', '&#x1f1f0;', '&#x1f1f5;', '&#x1f201;', '&#x1f202;', '&#x1f21a;', '&#x1f22f;', '&#x1f232;', '&#x1f233;', '&#x1f234;', '&#x1f235;', '&#x1f236;', '&#x1f237;', '&#x1f238;', '&#x1f239;', '&#x1f23a;', '&#x1f250;', '&#x1f251;', '&#x1f300;', '&#x1f301;', '&#x1f302;', '&#x1f303;', '&#x1f304;', '&#x1f305;', '&#x1f306;', '&#x1f307;', '&#x1f308;', '&#x1f309;', '&#x1f30a;', '&#x1f30b;', '&#x1f30c;', '&#x1f30d;', '&#x1f30e;', '&#x1f30f;', '&#x1f310;', '&#x1f311;', '&#x1f312;', '&#x1f313;', '&#x1f314;', '&#x1f315;', '&#x1f316;', '&#x1f317;', '&#x1f318;', '&#x1f319;', '&#x1f31a;', '&#x1f31b;', '&#x1f31c;', '&#x1f31d;', '&#x1f31e;', '&#x1f31f;', '&#x1f320;', '&#x1f321;', '&#x1f324;', '&#x1f325;', '&#x1f326;', '&#x1f327;', '&#x1f328;', '&#x1f329;', '&#x1f32a;', '&#x1f32b;', '&#x1f32c;', '&#x1f32d;', '&#x1f32e;', '&#x1f32f;', '&#x1f330;', '&#x1f331;', '&#x1f332;', '&#x1f333;', '&#x1f334;', '&#x1f335;', '&#x1f336;', '&#x1f337;', '&#x1f338;', '&#x1f339;', '&#x1f33a;', '&#x1f33b;', '&#x1f33c;', '&#x1f33d;', '&#x1f33e;', '&#x1f33f;', '&#x1f340;', '&#x1f341;', '&#x1f342;', '&#x1f343;', '&#x1f344;', '&#x1f345;', '&#x1f346;', '&#x1f347;', '&#x1f348;', '&#x1f349;', '&#x1f34a;', '&#x1f34b;', '&#x1f34c;', '&#x1f34d;', '&#x1f34e;', '&#x1f34f;', '&#x1f350;', '&#x1f351;', '&#x1f352;', '&#x1f353;', '&#x1f354;', '&#x1f355;', '&#x1f356;', '&#x1f357;', '&#x1f358;', '&#x1f359;', '&#x1f35a;', '&#x1f35b;', '&#x1f35c;', '&#x1f35d;', '&#x1f35e;', '&#x1f35f;', '&#x1f360;', '&#x1f361;', '&#x1f362;', '&#x1f363;', '&#x1f364;', '&#x1f365;', '&#x1f366;', '&#x1f367;', '&#x1f368;', '&#x1f369;', '&#x1f36a;', '&#x1f36b;', '&#x1f36c;', '&#x1f36d;', '&#x1f36e;', '&#x1f36f;', '&#x1f370;', '&#x1f371;', '&#x1f372;', '&#x1f373;', '&#x1f374;', '&#x1f375;', '&#x1f376;', '&#x1f377;', '&#x1f378;', '&#x1f379;', '&#x1f37a;', '&#x1f37b;', '&#x1f37c;', '&#x1f37d;', '&#x1f37e;', '&#x1f37f;', '&#x1f380;', '&#x1f381;', '&#x1f382;', '&#x1f383;', '&#x1f384;', '&#x1f385;', '&#x1f3fb;', '&#x1f3fc;', '&#x1f3fd;', '&#x1f3fe;', '&#x1f3ff;', '&#x1f386;', '&#x1f387;', '&#x1f388;', '&#x1f389;', '&#x1f38a;', '&#x1f38b;', '&#x1f38c;', '&#x1f38d;', '&#x1f38e;', '&#x1f38f;', '&#x1f390;', '&#x1f391;', '&#x1f392;', '&#x1f393;', '&#x1f396;', '&#x1f397;', '&#x1f399;', '&#x1f39a;', '&#x1f39b;', '&#x1f39e;', '&#x1f39f;', '&#x1f3a0;', '&#x1f3a1;', '&#x1f3a2;', '&#x1f3a3;', '&#x1f3a4;', '&#x1f3a5;', '&#x1f3a6;', '&#x1f3a7;', '&#x1f3a8;', '&#x1f3a9;', '&#x1f3aa;', '&#x1f3ab;', '&#x1f3ac;', '&#x1f3ad;', '&#x1f3ae;', '&#x1f3af;', '&#x1f3b0;', '&#x1f3b1;', '&#x1f3b2;', '&#x1f3b3;', '&#x1f3b4;', '&#x1f3b5;', '&#x1f3b6;', '&#x1f3b7;', '&#x1f3b8;', '&#x1f3b9;', '&#x1f3ba;', '&#x1f3bb;', '&#x1f3bc;', '&#x1f3bd;', '&#x1f3be;', '&#x1f3bf;', '&#x1f3c0;', '&#x1f3c1;', '&#x1f3c2;', '&#x1f3c3;', '&#x200d;', '&#x2640;', '&#xfe0f;', '&#x2642;', '&#x1f3c4;', '&#x1f3c5;', '&#x1f3c6;', '&#x1f3c7;', '&#x1f3c8;', '&#x1f3c9;', '&#x1f3ca;', '&#x1f3cb;', '&#x1f3cc;', '&#x1f3cd;', '&#x1f3ce;', '&#x1f3cf;', '&#x1f3d0;', '&#x1f3d1;', '&#x1f3d2;', '&#x1f3d3;', '&#x1f3d4;', '&#x1f3d5;', '&#x1f3d6;', '&#x1f3d7;', '&#x1f3d8;', '&#x1f3d9;', '&#x1f3da;', '&#x1f3db;', '&#x1f3dc;', '&#x1f3dd;', '&#x1f3de;', '&#x1f3df;', '&#x1f3e0;', '&#x1f3e1;', '&#x1f3e2;', '&#x1f3e3;', '&#x1f3e4;', '&#x1f3e5;', '&#x1f3e6;', '&#x1f3e7;', '&#x1f3e8;', '&#x1f3e9;', '&#x1f3ea;', '&#x1f3eb;', '&#x1f3ec;', '&#x1f3ed;', '&#x1f3ee;', '&#x1f3ef;', '&#x1f3f0;', '&#x1f3f3;', '&#x26a7;', '&#x1f3f4;', '&#x2620;', '&#xe0067;', '&#xe0062;', '&#xe0065;', '&#xe006e;', '&#xe007f;', '&#xe0073;', '&#xe0063;', '&#xe0074;', '&#xe0077;', '&#xe006c;', '&#x1f3f5;', '&#x1f3f7;', '&#x1f3f8;', '&#x1f3f9;', '&#x1f3fa;', '&#x1f400;', '&#x1f401;', '&#x1f402;', '&#x1f403;', '&#x1f404;', '&#x1f405;', '&#x1f406;', '&#x1f407;', '&#x1f408;', '&#x1f409;', '&#x1f40a;', '&#x1f40b;', '&#x1f40c;', '&#x1f40d;', '&#x1f40e;', '&#x1f40f;', '&#x1f410;', '&#x1f411;', '&#x1f412;', '&#x1f413;', '&#x1f414;', '&#x1f415;', '&#x1f9ba;', '&#x1f416;', '&#x1f417;', '&#x1f418;', '&#x1f419;', '&#x1f41a;', '&#x1f41b;', '&#x1f41c;', '&#x1f41d;', '&#x1f41e;', '&#x1f41f;', '&#x1f420;', '&#x1f421;', '&#x1f422;', '&#x1f423;', '&#x1f424;', '&#x1f425;', '&#x1f426;', '&#x1f427;', '&#x1f428;', '&#x1f429;', '&#x1f42a;', '&#x1f42b;', '&#x1f42c;', '&#x1f42d;', '&#x1f42e;', '&#x1f42f;', '&#x1f430;', '&#x1f431;', '&#x1f432;', '&#x1f433;', '&#x1f434;', '&#x1f435;', '&#x1f436;', '&#x1f437;', '&#x1f438;', '&#x1f439;', '&#x1f43a;', '&#x1f43b;', '&#x1f43c;', '&#x1f43d;', '&#x1f43e;', '&#x1f43f;', '&#x1f440;', '&#x1f441;', '&#x1f5e8;', '&#x1f442;', '&#x1f443;', '&#x1f444;', '&#x1f445;', '&#x1f446;', '&#x1f447;', '&#x1f448;', '&#x1f449;', '&#x1f44a;', '&#x1f44b;', '&#x1f44c;', '&#x1f44d;', '&#x1f44e;', '&#x1f44f;', '&#x1f450;', '&#x1f451;', '&#x1f452;', '&#x1f453;', '&#x1f454;', '&#x1f455;', '&#x1f456;', '&#x1f457;', '&#x1f458;', '&#x1f459;', '&#x1f45a;', '&#x1f45b;', '&#x1f45c;', '&#x1f45d;', '&#x1f45e;', '&#x1f45f;', '&#x1f460;', '&#x1f461;', '&#x1f462;', '&#x1f463;', '&#x1f464;', '&#x1f465;', '&#x1f466;', '&#x1f467;', '&#x1f468;', '&#x1f4bb;', '&#x1f4bc;', '&#x1f527;', '&#x1f52c;', '&#x1f680;', '&#x1f692;', '&#x1f9af;', '&#x1f9b0;', '&#x1f9b1;', '&#x1f9b2;', '&#x1f9b3;', '&#x1f9bc;', '&#x1f9bd;', '&#x2695;', '&#x2696;', '&#x2708;', '&#x1f91d;', '&#x1f469;', '&#x2764;', '&#x1f48b;', '&#x1f46a;', '&#x1f46b;', '&#x1f46c;', '&#x1f46d;', '&#x1f46e;', '&#x1f46f;', '&#x1f470;', '&#x1f471;', '&#x1f472;', '&#x1f473;', '&#x1f474;', '&#x1f475;', '&#x1f476;', '&#x1f477;', '&#x1f478;', '&#x1f479;', '&#x1f47a;', '&#x1f47b;', '&#x1f47c;', '&#x1f47d;', '&#x1f47e;', '&#x1f47f;', '&#x1f480;', '&#x1f481;', '&#x1f482;', '&#x1f483;', '&#x1f484;', '&#x1f485;', '&#x1f486;', '&#x1f487;', '&#x1f488;', '&#x1f489;', '&#x1f48a;', '&#x1f48c;', '&#x1f48d;', '&#x1f48e;', '&#x1f48f;', '&#x1f490;', '&#x1f491;', '&#x1f492;', '&#x1f493;', '&#x1f494;', '&#x1f495;', '&#x1f496;', '&#x1f497;', '&#x1f498;', '&#x1f499;', '&#x1f49a;', '&#x1f49b;', '&#x1f49c;', '&#x1f49d;', '&#x1f49e;', '&#x1f49f;', '&#x1f4a0;', '&#x1f4a1;', '&#x1f4a2;', '&#x1f4a3;', '&#x1f4a4;', '&#x1f4a5;', '&#x1f4a6;', '&#x1f4a7;', '&#x1f4a8;', '&#x1f4a9;', '&#x1f4aa;', '&#x1f4ab;', '&#x1f4ac;', '&#x1f4ad;', '&#x1f4ae;', '&#x1f4af;', '&#x1f4b0;', '&#x1f4b1;', '&#x1f4b2;', '&#x1f4b3;', '&#x1f4b4;', '&#x1f4b5;', '&#x1f4b6;', '&#x1f4b7;', '&#x1f4b8;', '&#x1f4b9;', '&#x1f4ba;', '&#x1f4bd;', '&#x1f4be;', '&#x1f4bf;', '&#x1f4c0;', '&#x1f4c1;', '&#x1f4c2;', '&#x1f4c3;', '&#x1f4c4;', '&#x1f4c5;', '&#x1f4c6;', '&#x1f4c7;', '&#x1f4c8;', '&#x1f4c9;', '&#x1f4ca;', '&#x1f4cb;', '&#x1f4cc;', '&#x1f4cd;', '&#x1f4ce;', '&#x1f4cf;', '&#x1f4d0;', '&#x1f4d1;', '&#x1f4d2;', '&#x1f4d3;', '&#x1f4d4;', '&#x1f4d5;', '&#x1f4d6;', '&#x1f4d7;', '&#x1f4d8;', '&#x1f4d9;', '&#x1f4da;', '&#x1f4db;', '&#x1f4dc;', '&#x1f4dd;', '&#x1f4de;', '&#x1f4df;', '&#x1f4e0;', '&#x1f4e1;', '&#x1f4e2;', '&#x1f4e3;', '&#x1f4e4;', '&#x1f4e5;', '&#x1f4e6;', '&#x1f4e7;', '&#x1f4e8;', '&#x1f4e9;', '&#x1f4ea;', '&#x1f4eb;', '&#x1f4ec;', '&#x1f4ed;', '&#x1f4ee;', '&#x1f4ef;', '&#x1f4f0;', '&#x1f4f1;', '&#x1f4f2;', '&#x1f4f3;', '&#x1f4f4;', '&#x1f4f5;', '&#x1f4f6;', '&#x1f4f7;', '&#x1f4f8;', '&#x1f4f9;', '&#x1f4fa;', '&#x1f4fb;', '&#x1f4fc;', '&#x1f4fd;', '&#x1f4ff;', '&#x1f500;', '&#x1f501;', '&#x1f502;', '&#x1f503;', '&#x1f504;', '&#x1f505;', '&#x1f506;', '&#x1f507;', '&#x1f508;', '&#x1f509;', '&#x1f50a;', '&#x1f50b;', '&#x1f50c;', '&#x1f50d;', '&#x1f50e;', '&#x1f50f;', '&#x1f510;', '&#x1f511;', '&#x1f512;', '&#x1f513;', '&#x1f514;', '&#x1f515;', '&#x1f516;', '&#x1f517;', '&#x1f518;', '&#x1f519;', '&#x1f51a;', '&#x1f51b;', '&#x1f51c;', '&#x1f51d;', '&#x1f51e;', '&#x1f51f;', '&#x1f520;', '&#x1f521;', '&#x1f522;', '&#x1f523;', '&#x1f524;', '&#x1f525;', '&#x1f526;', '&#x1f528;', '&#x1f529;', '&#x1f52a;', '&#x1f52b;', '&#x1f52d;', '&#x1f52e;', '&#x1f52f;', '&#x1f530;', '&#x1f531;', '&#x1f532;', '&#x1f533;', '&#x1f534;', '&#x1f535;', '&#x1f536;', '&#x1f537;', '&#x1f538;', '&#x1f539;', '&#x1f53a;', '&#x1f53b;', '&#x1f53c;', '&#x1f53d;', '&#x1f549;', '&#x1f54a;', '&#x1f54b;', '&#x1f54c;', '&#x1f54d;', '&#x1f54e;', '&#x1f550;', '&#x1f551;', '&#x1f552;', '&#x1f553;', '&#x1f554;', '&#x1f555;', '&#x1f556;', '&#x1f557;', '&#x1f558;', '&#x1f559;', '&#x1f55a;', '&#x1f55b;', '&#x1f55c;', '&#x1f55d;', '&#x1f55e;', '&#x1f55f;', '&#x1f560;', '&#x1f561;', '&#x1f562;', '&#x1f563;', '&#x1f564;', '&#x1f565;', '&#x1f566;', '&#x1f567;', '&#x1f56f;', '&#x1f570;', '&#x1f573;', '&#x1f574;', '&#x1f575;', '&#x1f576;', '&#x1f577;', '&#x1f578;', '&#x1f579;', '&#x1f57a;', '&#x1f587;', '&#x1f58a;', '&#x1f58b;', '&#x1f58c;', '&#x1f58d;', '&#x1f590;', '&#x1f595;', '&#x1f596;', '&#x1f5a4;', '&#x1f5a5;', '&#x1f5a8;', '&#x1f5b1;', '&#x1f5b2;', '&#x1f5bc;', '&#x1f5c2;', '&#x1f5c3;', '&#x1f5c4;', '&#x1f5d1;', '&#x1f5d2;', '&#x1f5d3;', '&#x1f5dc;', '&#x1f5dd;', '&#x1f5de;', '&#x1f5e1;', '&#x1f5e3;', '&#x1f5ef;', '&#x1f5f3;', '&#x1f5fa;', '&#x1f5fb;', '&#x1f5fc;', '&#x1f5fd;', '&#x1f5fe;', '&#x1f5ff;', '&#x1f600;', '&#x1f601;', '&#x1f602;', '&#x1f603;', '&#x1f604;', '&#x1f605;', '&#x1f606;', '&#x1f607;', '&#x1f608;', '&#x1f609;', '&#x1f60a;', '&#x1f60b;', '&#x1f60c;', '&#x1f60d;', '&#x1f60e;', '&#x1f60f;', '&#x1f610;', '&#x1f611;', '&#x1f612;', '&#x1f613;', '&#x1f614;', '&#x1f615;', '&#x1f616;', '&#x1f617;', '&#x1f618;', '&#x1f619;', '&#x1f61a;', '&#x1f61b;', '&#x1f61c;', '&#x1f61d;', '&#x1f61e;', '&#x1f61f;', '&#x1f620;', '&#x1f621;', '&#x1f622;', '&#x1f623;', '&#x1f624;', '&#x1f625;', '&#x1f626;', '&#x1f627;', '&#x1f628;', '&#x1f629;', '&#x1f62a;', '&#x1f62b;', '&#x1f62c;', '&#x1f62d;', '&#x1f62e;', '&#x1f62f;', '&#x1f630;', '&#x1f631;', '&#x1f632;', '&#x1f633;', '&#x1f634;', '&#x1f635;', '&#x1f636;', '&#x1f637;', '&#x1f638;', '&#x1f639;', '&#x1f63a;', '&#x1f63b;', '&#x1f63c;', '&#x1f63d;', '&#x1f63e;', '&#x1f63f;', '&#x1f640;', '&#x1f641;', '&#x1f642;', '&#x1f643;', '&#x1f644;', '&#x1f645;', '&#x1f646;', '&#x1f647;', '&#x1f648;', '&#x1f649;', '&#x1f64a;', '&#x1f64b;', '&#x1f64c;', '&#x1f64d;', '&#x1f64e;', '&#x1f64f;', '&#x1f681;', '&#x1f682;', '&#x1f683;', '&#x1f684;', '&#x1f685;', '&#x1f686;', '&#x1f687;', '&#x1f688;', '&#x1f689;', '&#x1f68a;', '&#x1f68b;', '&#x1f68c;', '&#x1f68d;', '&#x1f68e;', '&#x1f68f;', '&#x1f690;', '&#x1f691;', '&#x1f693;', '&#x1f694;', '&#x1f695;', '&#x1f696;', '&#x1f697;', '&#x1f698;', '&#x1f699;', '&#x1f69a;', '&#x1f69b;', '&#x1f69c;', '&#x1f69d;', '&#x1f69e;', '&#x1f69f;', '&#x1f6a0;', '&#x1f6a1;', '&#x1f6a2;', '&#x1f6a3;', '&#x1f6a4;', '&#x1f6a5;', '&#x1f6a6;', '&#x1f6a7;', '&#x1f6a8;', '&#x1f6a9;', '&#x1f6aa;', '&#x1f6ab;', '&#x1f6ac;', '&#x1f6ad;', '&#x1f6ae;', '&#x1f6af;', '&#x1f6b0;', '&#x1f6b1;', '&#x1f6b2;', '&#x1f6b3;', '&#x1f6b4;', '&#x1f6b5;', '&#x1f6b6;', '&#x1f6b7;', '&#x1f6b8;', '&#x1f6b9;', '&#x1f6ba;', '&#x1f6bb;', '&#x1f6bc;', '&#x1f6bd;', '&#x1f6be;', '&#x1f6bf;', '&#x1f6c0;', '&#x1f6c1;', '&#x1f6c2;', '&#x1f6c3;', '&#x1f6c4;', '&#x1f6c5;', '&#x1f6cb;', '&#x1f6cc;', '&#x1f6cd;', '&#x1f6ce;', '&#x1f6cf;', '&#x1f6d0;', '&#x1f6d1;', '&#x1f6d2;', '&#x1f6d5;', '&#x1f6e0;', '&#x1f6e1;', '&#x1f6e2;', '&#x1f6e3;', '&#x1f6e4;', '&#x1f6e5;', '&#x1f6e9;', '&#x1f6eb;', '&#x1f6ec;', '&#x1f6f0;', '&#x1f6f3;', '&#x1f6f4;', '&#x1f6f5;', '&#x1f6f6;', '&#x1f6f7;', '&#x1f6f8;', '&#x1f6f9;', '&#x1f6fa;', '&#x1f7e0;', '&#x1f7e1;', '&#x1f7e2;', '&#x1f7e3;', '&#x1f7e4;', '&#x1f7e5;', '&#x1f7e6;', '&#x1f7e7;', '&#x1f7e8;', '&#x1f7e9;', '&#x1f7ea;', '&#x1f7eb;', '&#x1f90d;', '&#x1f90e;', '&#x1f90f;', '&#x1f910;', '&#x1f911;', '&#x1f912;', '&#x1f913;', '&#x1f914;', '&#x1f915;', '&#x1f916;', '&#x1f917;', '&#x1f918;', '&#x1f919;', '&#x1f91a;', '&#x1f91b;', '&#x1f91c;', '&#x1f91e;', '&#x1f91f;', '&#x1f920;', '&#x1f921;', '&#x1f922;', '&#x1f923;', '&#x1f924;', '&#x1f925;', '&#x1f926;', '&#x1f927;', '&#x1f928;', '&#x1f929;', '&#x1f92a;', '&#x1f92b;', '&#x1f92c;', '&#x1f92d;', '&#x1f92e;', '&#x1f92f;', '&#x1f930;', '&#x1f931;', '&#x1f932;', '&#x1f933;', '&#x1f934;', '&#x1f935;', '&#x1f936;', '&#x1f937;', '&#x1f938;', '&#x1f939;', '&#x1f93a;', '&#x1f93c;', '&#x1f93d;', '&#x1f93e;', '&#x1f93f;', '&#x1f940;', '&#x1f941;', '&#x1f942;', '&#x1f943;', '&#x1f944;', '&#x1f945;', '&#x1f947;', '&#x1f948;', '&#x1f949;', '&#x1f94a;', '&#x1f94b;', '&#x1f94c;', '&#x1f94d;', '&#x1f94e;', '&#x1f94f;', '&#x1f950;', '&#x1f951;', '&#x1f952;', '&#x1f953;', '&#x1f954;', '&#x1f955;', '&#x1f956;', '&#x1f957;', '&#x1f958;', '&#x1f959;', '&#x1f95a;', '&#x1f95b;', '&#x1f95c;', '&#x1f95d;', '&#x1f95e;', '&#x1f95f;', '&#x1f960;', '&#x1f961;', '&#x1f962;', '&#x1f963;', '&#x1f964;', '&#x1f965;', '&#x1f966;', '&#x1f967;', '&#x1f968;', '&#x1f969;', '&#x1f96a;', '&#x1f96b;', '&#x1f96c;', '&#x1f96d;', '&#x1f96e;', '&#x1f96f;', '&#x1f970;', '&#x1f971;', '&#x1f973;', '&#x1f974;', '&#x1f975;', '&#x1f976;', '&#x1f97a;', '&#x1f97b;', '&#x1f97c;', '&#x1f97d;', '&#x1f97e;', '&#x1f97f;', '&#x1f980;', '&#x1f981;', '&#x1f982;', '&#x1f983;', '&#x1f984;', '&#x1f985;', '&#x1f986;', '&#x1f987;', '&#x1f988;', '&#x1f989;', '&#x1f98a;', '&#x1f98b;', '&#x1f98c;', '&#x1f98d;', '&#x1f98e;', '&#x1f98f;', '&#x1f990;', '&#x1f991;', '&#x1f992;', '&#x1f993;', '&#x1f994;', '&#x1f995;', '&#x1f996;', '&#x1f997;', '&#x1f998;', '&#x1f999;', '&#x1f99a;', '&#x1f99b;', '&#x1f99c;', '&#x1f99d;', '&#x1f99e;', '&#x1f99f;', '&#x1f9a0;', '&#x1f9a1;', '&#x1f9a2;', '&#x1f9a5;', '&#x1f9a6;', '&#x1f9a7;', '&#x1f9a8;', '&#x1f9a9;', '&#x1f9aa;', '&#x1f9ae;', '&#x1f9b4;', '&#x1f9b5;', '&#x1f9b6;', '&#x1f9b7;', '&#x1f9b8;', '&#x1f9b9;', '&#x1f9bb;', '&#x1f9be;', '&#x1f9bf;', '&#x1f9c0;', '&#x1f9c1;', '&#x1f9c2;', '&#x1f9c3;', '&#x1f9c4;', '&#x1f9c5;', '&#x1f9c6;', '&#x1f9c7;', '&#x1f9c8;', '&#x1f9c9;', '&#x1f9ca;', '&#x1f9cd;', '&#x1f9ce;', '&#x1f9cf;', '&#x1f9d0;', '&#x1f9d1;', '&#x1f9d2;', '&#x1f9d3;', '&#x1f9d4;', '&#x1f9d5;', '&#x1f9d6;', '&#x1f9d7;', '&#x1f9d8;', '&#x1f9d9;', '&#x1f9da;', '&#x1f9db;', '&#x1f9dc;', '&#x1f9dd;', '&#x1f9de;', '&#x1f9df;', '&#x1f9e0;', '&#x1f9e1;', '&#x1f9e2;', '&#x1f9e3;', '&#x1f9e4;', '&#x1f9e5;', '&#x1f9e6;', '&#x1f9e7;', '&#x1f9e8;', '&#x1f9e9;', '&#x1f9ea;', '&#x1f9eb;', '&#x1f9ec;', '&#x1f9ed;', '&#x1f9ee;', '&#x1f9ef;', '&#x1f9f0;', '&#x1f9f1;', '&#x1f9f2;', '&#x1f9f3;', '&#x1f9f4;', '&#x1f9f5;', '&#x1f9f6;', '&#x1f9f7;', '&#x1f9f8;', '&#x1f9f9;', '&#x1f9fa;', '&#x1f9fb;', '&#x1f9fc;', '&#x1f9fd;', '&#x1f9fe;', '&#x1f9ff;', '&#x1fa70;', '&#x1fa71;', '&#x1fa72;', '&#x1fa73;', '&#x1fa78;', '&#x1fa79;', '&#x1fa7a;', '&#x1fa80;', '&#x1fa81;', '&#x1fa82;', '&#x1fa90;', '&#x1fa91;', '&#x1fa92;', '&#x1fa93;', '&#x1fa94;', '&#x1fa95;', '&#x203c;', '&#x2049;', '&#x2122;', '&#x2139;', '&#x2194;', '&#x2195;', '&#x2196;', '&#x2197;', '&#x2198;', '&#x2199;', '&#x21a9;', '&#x21aa;', '&#x20e3;', '&#x231a;', '&#x231b;', '&#x2328;', '&#x23cf;', '&#x23e9;', '&#x23ea;', '&#x23eb;', '&#x23ec;', '&#x23ed;', '&#x23ee;', '&#x23ef;', '&#x23f0;', '&#x23f1;', '&#x23f2;', '&#x23f3;', '&#x23f8;', '&#x23f9;', '&#x23fa;', '&#x24c2;', '&#x25aa;', '&#x25ab;', '&#x25b6;', '&#x25c0;', '&#x25fb;', '&#x25fc;', '&#x25fd;', '&#x25fe;', '&#x2600;', '&#x2601;', '&#x2602;', '&#x2603;', '&#x2604;', '&#x260e;', '&#x2611;', '&#x2614;', '&#x2615;', '&#x2618;', '&#x261d;', '&#x2622;', '&#x2623;', '&#x2626;', '&#x262a;', '&#x262e;', '&#x262f;', '&#x2638;', '&#x2639;', '&#x263a;', '&#x2648;', '&#x2649;', '&#x264a;', '&#x264b;', '&#x264c;', '&#x264d;', '&#x264e;', '&#x264f;', '&#x2650;', '&#x2651;', '&#x2652;', '&#x2653;', '&#x265f;', '&#x2660;', '&#x2663;', '&#x2665;', '&#x2666;', '&#x2668;', '&#x267b;', '&#x267e;', '&#x267f;', '&#x2692;', '&#x2693;', '&#x2694;', '&#x2697;', '&#x2699;', '&#x269b;', '&#x269c;', '&#x26a0;', '&#x26a1;', '&#x26aa;', '&#x26ab;', '&#x26b0;', '&#x26b1;', '&#x26bd;', '&#x26be;', '&#x26c4;', '&#x26c5;', '&#x26c8;', '&#x26ce;', '&#x26cf;', '&#x26d1;', '&#x26d3;', '&#x26d4;', '&#x26e9;', '&#x26ea;', '&#x26f0;', '&#x26f1;', '&#x26f2;', '&#x26f3;', '&#x26f4;', '&#x26f5;', '&#x26f7;', '&#x26f8;', '&#x26f9;', '&#x26fa;', '&#x26fd;', '&#x2702;', '&#x2705;', '&#x2709;', '&#x270a;', '&#x270b;', '&#x270c;', '&#x270d;', '&#x270f;', '&#x2712;', '&#x2714;', '&#x2716;', '&#x271d;', '&#x2721;', '&#x2728;', '&#x2733;', '&#x2734;', '&#x2744;', '&#x2747;', '&#x274c;', '&#x274e;', '&#x2753;', '&#x2754;', '&#x2755;', '&#x2757;', '&#x2763;', '&#x2795;', '&#x2796;', '&#x2797;', '&#x27a1;', '&#x27b0;', '&#x27bf;', '&#x2934;', '&#x2935;', '&#x2b05;', '&#x2b06;', '&#x2b07;', '&#x2b1b;', '&#x2b1c;', '&#x2b50;', '&#x2b55;', '&#x3030;', '&#x303d;', '&#x3297;', '&#x3299;', '&#xe50a;' );\n\t// END: emoji arrays\n\n\tif ( 'entities' === $type ) {\n\t\treturn $entities;\n\t}\n\n\treturn $partials;\n}\n\n/**\n * Shorten a URL, to be used as link text.\n *\n * @since 1.2.0\n * @since 4.4.0 Moved to wp-includes/formatting.php from wp-admin/includes/misc.php and added $length param.\n *\n * @param string $url    URL to shorten.\n * @param int    $length Optional. Maximum length of the shortened URL. Default 35 characters.\n * @return string Shortened URL.\n */\nfunction url_shorten( $url, $length = 35 ) {\n\t$stripped  = str_replace( array( 'https://', 'http://', 'www.' ), '', $url );\n\t$short_url = untrailingslashit( $stripped );\n\n\tif ( strlen( $short_url ) > $length ) {\n\t\t$short_url = substr( $short_url, 0, $length - 3 ) . '&hellip;';\n\t}\n\treturn $short_url;\n}\n\n/**\n * Sanitizes a hex color.\n *\n * Returns either '', a 3 or 6 digit hex color (with #), or nothing.\n * For sanitizing values without a #, see sanitize_hex_color_no_hash().\n *\n * @since 3.4.0\n *\n * @param string $color\n * @return string|void\n */\nfunction sanitize_hex_color( $color ) {\n\tif ( '' === $color ) {\n\t\treturn '';\n\t}\n\n\t// 3 or 6 hex digits, or the empty string.\n\tif ( preg_match( '|^#([A-Fa-f0-9]{3}){1,2}$|', $color ) ) {\n\t\treturn $color;\n\t}\n}\n\n/**\n * Sanitizes a hex color without a hash. Use sanitize_hex_color() when possible.\n *\n * Saving hex colors without a hash puts the burden of adding the hash on the\n * UI, which makes it difficult to use or upgrade to other color types such as\n * rgba, hsl, rgb, and html color names.\n *\n * Returns either '', a 3 or 6 digit hex color (without a #), or null.\n *\n * @since 3.4.0\n *\n * @param string $color\n * @return string|null\n */\nfunction sanitize_hex_color_no_hash( $color ) {\n\t$color = ltrim( $color, '#' );\n\n\tif ( '' === $color ) {\n\t\treturn '';\n\t}\n\n\treturn sanitize_hex_color( '#' . $color ) ? $color : null;\n}\n\n/**\n * Ensures that any hex color is properly hashed.\n * Otherwise, returns value untouched.\n *\n * This method should only be necessary if using sanitize_hex_color_no_hash().\n *\n * @since 3.4.0\n *\n * @param string $color\n * @return string\n */\nfunction maybe_hash_hex_color( $color ) {\n\t$unhashed = sanitize_hex_color_no_hash( $color );\n\tif ( $unhashed ) {\n\t\treturn '#' . $unhashed;\n\t}\n\n\treturn $color;\n}\n", "<?php\n/**\n * WP_Block_Type Tests\n *\n * @package WordPress\n * @subpackage Blocks\n * @since 5.0.0\n */\n\n/**\n * Tests for WP_Block_Type\n *\n * @since 5.0.0\n *\n * @group blocks\n */\nclass WP_Test_Block_Type extends WP_UnitTestCase {\n\n\t/**\n\t * Editor user ID.\n\t *\n\t * @since 5.0.0\n\t * @var int\n\t */\n\tprotected static $editor_user_id;\n\n\t/**\n\t * ID for a post containing blocks.\n\t *\n\t * @since 5.0.0\n\t * @var int\n\t */\n\tprotected static $post_with_blocks;\n\n\t/**\n\t * ID for a post without blocks.\n\t *\n\t * @since 5.0.0\n\t * @var int\n\t */\n\tprotected static $post_without_blocks;\n\n\t/**\n\t * Set up before class.\n\t *\n\t * @since 5.0.0\n\t */\n\tpublic static function wpSetUpBeforeClass() {\n\t\tself::$editor_user_id = self::factory()->user->create(\n\t\t\tarray(\n\t\t\t\t'role' => 'editor',\n\t\t\t)\n\t\t);\n\n\t\tself::$post_with_blocks = self::factory()->post->create(\n\t\t\tarray(\n\t\t\t\t'post_title'   => 'Example',\n\t\t\t\t'post_content' => \"<!-- wp:core/text {\\\"dropCap\\\":true} -->\\n<p class=\\\"has-drop-cap\\\">Tester</p>\\n<!-- /wp:core/text -->\",\n\t\t\t)\n\t\t);\n\n\t\tself::$post_without_blocks = self::factory()->post->create(\n\t\t\tarray(\n\t\t\t\t'post_title'   => 'Example',\n\t\t\t\t'post_content' => 'Tester',\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @ticket 45097\n\t */\n\tpublic function test_set_props() {\n\t\t$name = 'core/fake';\n\t\t$args = array(\n\t\t\t'render_callback' => array( $this, 'render_fake_block' ),\n\t\t\t'foo'             => 'bar',\n\t\t);\n\n\t\t$block_type = new WP_Block_Type( $name, $args );\n\n\t\t$this->assertSame( $name, $block_type->name );\n\t\t$this->assertSame( $args['render_callback'], $block_type->render_callback );\n\t\t$this->assertSame( $args['foo'], $block_type->foo );\n\t}\n\n\t/**\n\t * @ticket 45097\n\t */\n\tpublic function test_render() {\n\t\t$attributes = array(\n\t\t\t'foo' => 'bar',\n\t\t\t'bar' => 'foo',\n\t\t);\n\n\t\t$block_type = new WP_Block_Type(\n\t\t\t'core/fake',\n\t\t\tarray(\n\t\t\t\t'render_callback' => array( $this, 'render_fake_block' ),\n\t\t\t)\n\t\t);\n\t\t$output     = $block_type->render( $attributes );\n\t\t$this->assertEquals( $attributes, json_decode( $output, true ) );\n\t}\n\n\t/**\n\t * @ticket 45097\n\t */\n\tpublic function test_render_with_content() {\n\t\t$attributes = array(\n\t\t\t'foo' => 'bar',\n\t\t\t'bar' => 'foo',\n\t\t);\n\n\t\t$content = 'baz';\n\n\t\t$expected = array_merge( $attributes, array( '_content' => $content ) );\n\n\t\t$block_type = new WP_Block_Type(\n\t\t\t'core/fake',\n\t\t\tarray(\n\t\t\t\t'render_callback' => array( $this, 'render_fake_block_with_content' ),\n\t\t\t)\n\t\t);\n\t\t$output     = $block_type->render( $attributes, $content );\n\t\t$this->assertEquals( $expected, json_decode( $output, true ) );\n\t}\n\n\t/**\n\t * @ticket 45097\n\t */\n\tpublic function test_render_for_static_block() {\n\t\t$block_type = new WP_Block_Type( 'core/fake', array() );\n\t\t$output     = $block_type->render();\n\n\t\t$this->assertEquals( '', $output );\n\t}\n\n\t/**\n\t * @ticket 45097\n\t */\n\tpublic function test_is_dynamic_for_static_block() {\n\t\t$block_type = new WP_Block_Type( 'core/fake', array() );\n\n\t\t$this->assertFalse( $block_type->is_dynamic() );\n\t}\n\n\t/**\n\t * @ticket 45097\n\t */\n\tpublic function test_is_dynamic_for_dynamic_block() {\n\t\t$block_type = new WP_Block_Type(\n\t\t\t'core/fake',\n\t\t\tarray(\n\t\t\t\t'render_callback' => array( $this, 'render_fake_block' ),\n\t\t\t)\n\t\t);\n\n\t\t$this->assertTrue( $block_type->is_dynamic() );\n\t}\n\n\t/**\n\t * @ticket 45097\n\t */\n\tpublic function test_prepare_attributes() {\n\t\t$attributes = array(\n\t\t\t'correct'            => 'include',\n\t\t\t'wrongType'          => 5,\n\t\t\t'wrongTypeDefaulted' => 5,\n\t\t\t/* missingDefaulted */\n\t\t\t'undefined'          => 'include',\n\t\t\t'intendedNull'       => null,\n\t\t);\n\n\t\t$block_type = new WP_Block_Type(\n\t\t\t'core/fake',\n\t\t\tarray(\n\t\t\t\t'attributes' => array(\n\t\t\t\t\t'correct'            => array(\n\t\t\t\t\t\t'type' => 'string',\n\t\t\t\t\t),\n\t\t\t\t\t'wrongType'          => array(\n\t\t\t\t\t\t'type' => 'string',\n\t\t\t\t\t),\n\t\t\t\t\t'wrongTypeDefaulted' => array(\n\t\t\t\t\t\t'type'    => 'string',\n\t\t\t\t\t\t'default' => 'defaulted',\n\t\t\t\t\t),\n\t\t\t\t\t'missingDefaulted'   => array(\n\t\t\t\t\t\t'type'    => 'string',\n\t\t\t\t\t\t'default' => 'define',\n\t\t\t\t\t),\n\t\t\t\t\t'intendedNull'       => array(\n\t\t\t\t\t\t'type'    => array( 'string', 'null' ),\n\t\t\t\t\t\t'default' => 'wrong',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\n\t\t$prepared_attributes = $block_type->prepare_attributes_for_render( $attributes );\n\n\t\t$this->assertEquals(\n\t\t\tarray(\n\t\t\t\t'correct'            => 'include',\n\t\t\t\t/* wrongType */\n\t\t\t\t'wrongTypeDefaulted' => 'defaulted',\n\t\t\t\t'missingDefaulted'   => 'define',\n\t\t\t\t'undefined'          => 'include',\n\t\t\t\t'intendedNull'       => null,\n\t\t\t),\n\t\t\t$prepared_attributes\n\t\t);\n\t}\n\n\t/**\n\t * @ticket 45145\n\t */\n\tfunction test_prepare_attributes_none_defined() {\n\t\t$attributes = array( 'exists' => 'keep' );\n\n\t\t$block_type = new WP_Block_Type( 'core/dummy', array() );\n\n\t\t$prepared_attributes = $block_type->prepare_attributes_for_render( $attributes );\n\n\t\t$this->assertEquals( $attributes, $prepared_attributes );\n\t}\n\n\t/**\n\t * @ticket 45097\n\t */\n\tpublic function test_has_block_with_mixed_content() {\n\t\t$mixed_post_content = 'before' .\n\t\t'<!-- wp:core/fake --><!-- /wp:core/fake -->' .\n\t\t'<!-- wp:core/fake_atts {\"value\":\"b1\"} --><!-- /wp:core/fake_atts -->' .\n\t\t'<!-- wp:core/fake-child -->\n\t\t<p>testing the test</p>\n\t\t<!-- /wp:core/fake-child -->' .\n\t\t'between' .\n\t\t'<!-- wp:core/self-close-fake /-->' .\n\t\t'<!-- wp:custom/fake {\"value\":\"b2\"} /-->' .\n\t\t'after';\n\n\t\t$this->assertTrue( has_block( 'core/fake', $mixed_post_content ) );\n\n\t\t$this->assertTrue( has_block( 'core/fake_atts', $mixed_post_content ) );\n\n\t\t$this->assertTrue( has_block( 'core/fake-child', $mixed_post_content ) );\n\n\t\t$this->assertTrue( has_block( 'core/self-close-fake', $mixed_post_content ) );\n\n\t\t$this->assertTrue( has_block( 'custom/fake', $mixed_post_content ) );\n\n\t\t// checking for a partial block name should fail.\n\t\t$this->assertFalse( has_block( 'core/fak', $mixed_post_content ) );\n\n\t\t// checking for a wrong namespace should fail.\n\t\t$this->assertFalse( has_block( 'custom/fake_atts', $mixed_post_content ) );\n\n\t\t// checking for namespace only should not work. Or maybe ... ?\n\t\t$this->assertFalse( has_block( 'core', $mixed_post_content ) );\n\t}\n\n\t/**\n\t * @ticket 45097\n\t */\n\tpublic function test_has_block_with_invalid_content() {\n\t\t// some content with invalid HMTL comments and a single valid block.\n\t\t$invalid_content = 'before' .\n\t\t'<!- - wp:core/weird-space --><!-- /wp:core/weird-space -->' .\n\t\t'<!--wp:core/untrimmed-left --><!-- /wp:core/untrimmed -->' .\n\t\t'<!-- wp:core/fake --><!-- /wp:core/fake -->' .\n\t\t'<!-- wp:core/untrimmed-right--><!-- /wp:core/untrimmed2 -->' .\n\t\t'after';\n\n\t\t$this->assertFalse( has_block( 'core/text', self::$post_without_blocks ) );\n\n\t\t$this->assertFalse( has_block( 'core/weird-space', $invalid_content ) );\n\n\t\t$this->assertFalse( has_block( 'core/untrimmed-left', $invalid_content ) );\n\n\t\t$this->assertFalse( has_block( 'core/untrimmed-right', $invalid_content ) );\n\n\t\t$this->assertTrue( has_block( 'core/fake', $invalid_content ) );\n\t}\n\n\t/**\n\t * @ticket 45097\n\t */\n\tpublic function test_post_has_block() {\n\t\t// should fail for a non-existent block `custom/fake`.\n\t\t$this->assertFalse( has_block( 'custom/fake', self::$post_with_blocks ) );\n\n\t\t// this functions should not work without the second param until the $post global is set.\n\t\t$this->assertFalse( has_block( 'core/text' ) );\n\t\t$this->assertFalse( has_block( 'core/fake' ) );\n\n\t\tglobal $post;\n\t\t$post = get_post( self::$post_with_blocks );\n\n\t\t// check if the function correctly detects content from the $post global.\n\t\t$this->assertTrue( has_block( 'core/text' ) );\n\t\t// even if it detects a proper $post global it should still be false for a missing block.\n\t\t$this->assertFalse( has_block( 'core/fake' ) );\n\t}\n\n\tpublic function test_post_has_block_serialized_name() {\n\t\t$content = '<!-- wp:serialized /--><!-- wp:core/normalized /--><!-- wp:plugin/third-party /-->';\n\n\t\t$this->assertTrue( has_block( 'core/serialized', $content ) );\n\n\t\t/*\n\t\t * Technically, `has_block` should receive a \"full\" (normalized, parsed)\n\t\t * block name. But this test conforms to expected pre-5.3.1 behavior.\n\t\t */\n\t\t$this->assertTrue( has_block( 'serialized', $content ) );\n\t\t$this->assertTrue( has_block( 'core/normalized', $content ) );\n\t\t$this->assertTrue( has_block( 'normalized', $content ) );\n\t\t$this->assertFalse( has_block( 'plugin/normalized', $content ) );\n\t\t$this->assertFalse( has_block( 'plugin/serialized', $content ) );\n\t\t$this->assertFalse( has_block( 'third-party', $content ) );\n\t\t$this->assertFalse( has_block( 'core/third-party', $content ) );\n\t}\n\n\t/**\n\t * Renders a test block without content.\n\t *\n\t * @since 5.0.0\n\t *\n\t * @param array $attributes Block attributes. Default empty array.\n\t * @return string JSON encoded list of attributes.\n\t */\n\tpublic function render_fake_block( $attributes ) {\n\t\treturn json_encode( $attributes );\n\t}\n\n\t/**\n\t * Renders a test block with content.\n\t *\n\t * @since 5.0.0\n\t *\n\t * @param array  $attributes Block attributes. Default empty array.\n\t * @param string $content    Block content. Default empty string.\n\t * @return string JSON encoded list of attributes.\n\t */\n\tpublic function render_fake_block_with_content( $attributes, $content ) {\n\t\t$attributes['_content'] = $content;\n\n\t\treturn json_encode( $attributes );\n\t}\n\n\t/**\n\t * Testing the block version.\n\t *\n\t * @ticket 43887\n\t *\n\t * @dataProvider data_block_version\n\t *\n\t * @param string|null $content  Content.\n\t * @param int         $expected Expected block version.\n\t */\n\tpublic function test_block_version( $content, $expected ) {\n\t\t$this->assertSame( $expected, block_version( $content ) );\n\t}\n\n\t/**\n\t * Test cases for test_block_version().\n\t *\n\t * @since 5.0.0\n\t *\n\t * @return array {\n\t *     @type array {\n\t *         @type string|null Content.\n\t *         @type int         Expected block version.\n\t *     }\n\t * }\n\t */\n\tpublic function data_block_version() {\n\t\treturn array(\n\t\t\t// Null.\n\t\t\tarray( null, 0 ),\n\t\t\t// Empty post content.\n\t\t\tarray( '', 0 ),\n\t\t\t// Post content without blocks.\n\t\t\tarray( '<hr class=\"wp-block-separator\" />', 0 ),\n\t\t\t// Post content with a block.\n\t\t\tarray( '<!-- wp:core/separator -->', 1 ),\n\t\t\t// Post content with a fake block.\n\t\t\tarray( '<!-- wp:core/fake --><!-- /wp:core/fake -->', 1 ),\n\t\t\t// Post content with an invalid block.\n\t\t\tarray( '<!- - wp:core/separator -->', 0 ),\n\t\t);\n\t}\n}\n"], "filenames": ["src/wp-includes/blocks.php", "src/wp-includes/default-filters.php", "src/wp-includes/formatting.php", "tests/phpunit/tests/blocks/block-type.php"], "buggy_code_start_loc": [77, 245, 4905, 304], "buggy_code_end_loc": [113, 245, 4905, 304], "fixing_code_start_loc": [77, 246, 4906, 305], "fixing_code_end_loc": [338, 247, 4931, 323], "type": "CWE-79", "message": "WordPress users with lower privileges (like contributors) can inject JavaScript code in the block editor using a specific payload, which is executed within the dashboard. This can lead to XSS if an admin opens the post in the editor. Execution of this attack does require an authenticated user. This has been patched in WordPress 5.3.1, along with all the previous WordPress versions from 3.7 to 5.3 via a minor release. Automatic updates are enabled by default for minor releases and we strongly recommend that you keep them enabled.", "other": {"cve": {"id": "CVE-2019-16780", "sourceIdentifier": "security-advisories@github.com", "published": "2019-12-26T17:15:13.503", "lastModified": "2022-11-23T20:12:24.560", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "WordPress users with lower privileges (like contributors) can inject JavaScript code in the block editor using a specific payload, which is executed within the dashboard. This can lead to XSS if an admin opens the post in the editor. Execution of this attack does require an authenticated user. This has been patched in WordPress 5.3.1, along with all the previous WordPress versions from 3.7 to 5.3 via a minor release. Automatic updates are enabled by default for minor releases and we strongly recommend that you keep them enabled."}, {"lang": "es", "value": "Los usuarios de WordPress con privilegios m\u00e1s bajos (como los contribuyentes) pueden inyectar c\u00f3digo JavaScript en el editor de bloques usando una carga \u00fatil espec\u00edfica, que es ejecutada dentro del panel. Esto puede conllevar a un ataque de tipo XSS si un administrador abre la publicaci\u00f3n en el editor. La ejecuci\u00f3n de este ataque requiere de un usuario autenticado. Esto ha sido parcheado en WordPress versi\u00f3n 5.3.1, junto con todas las versiones anteriores de WordPress desde 3.7 hasta 5.3 por medio de una versi\u00f3n menor. Las actualizaciones autom\u00e1ticas est\u00e1n habilitadas por defecto para versiones menores y recomendamos encarecidamente que las mantenga habilitadas."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.3, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartExcluding": "3.7", "versionEndExcluding": "5.3.1", "matchCriteriaId": "F1E7474D-B427-4D12-9F37-C1ADE704DB07"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:3.7:-:*:*:*:*:*:*", "matchCriteriaId": "46E9E628-C00C-4117-B625-50C9455E9FA1"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}]}]}], "references": [{"url": "https://github.com/WordPress/wordpress-develop/commit/505dd6a20b6fc3d06130018c1caeff764248c29e", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/WordPress/wordpress-develop/security/advisories/GHSA-x3wp-h3qx-9w94", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://hackerone.com/reports/738644", "source": "security-advisories@github.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://seclists.org/bugtraq/2020/Jan/8", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://wordpress.org/news/2019/12/wordpress-5-3-1-security-and-maintenance-release/", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/9976", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.debian.org/security/2020/dsa-4599", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.debian.org/security/2020/dsa-4677", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WordPress/wordpress-develop/commit/505dd6a20b6fc3d06130018c1caeff764248c29e"}}