{"buggy_code": ["<?php\n\n/**\n * AJAX: handling of Ajax user calls.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2009-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2009-04-04\n */\n\nuse phpMyFAQ\\Auth;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\HttpHelper;\nuse phpMyFAQ\\Helper\\MailHelper;\nuse phpMyFAQ\\Permission;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\User;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n$ajaxAction = Filter::filterInput(INPUT_GET, 'ajaxaction', FILTER_UNSAFE_RAW);\n$userId = Filter::filterInput(INPUT_GET, 'user_id', FILTER_VALIDATE_INT);\n$userSearch = Filter::filterInput(INPUT_GET, 'q', FILTER_UNSAFE_RAW);\n$csrfToken = Filter::filterInput(INPUT_GET, 'csrf', FILTER_UNSAFE_RAW);\n\n// Send headers\n$http = new HttpHelper();\n$http->setContentType('application/json');\n$http->addHeader();\n\nif (\n    $user->perm->hasPermission($user->getUserId(), 'add_user') ||\n    $user->perm->hasPermission($user->getUserId(), 'edit_user') ||\n    $user->perm->hasPermission($user->getUserId(), 'delete_user')\n) {\n    $user = new User($faqConfig);\n\n    switch ($ajaxAction) {\n        case 'get_user_list':\n            $allUsers = [];\n            foreach ($user->searchUsers($userSearch) as $singleUser) {\n                $users = new \\stdClass();\n                $users->user_id = (int)$singleUser['user_id'];\n                $users->name = $singleUser['login'];\n                $allUsers[] = $users;\n            }\n            $http->sendJsonWithHeaders($allUsers);\n            break;\n\n        case 'get_user_data':\n            $user->getUserById($userId, true);\n            $userdata = [];\n            $userdata = $user->userdata->get('*');\n            $userdata['status'] = $user->getStatus();\n            $userdata['login'] = Strings::htmlentities($user->getLogin());\n            $userdata['is_superadmin'] = $user->isSuperAdmin();\n            $http->sendJsonWithHeaders($userdata);\n            break;\n\n        case 'get_all_user_data':\n            $allUsers = $user->getAllUsers(false);\n            $userData = [];\n            foreach ($allUsers as $userId) {\n                $user->getUserById($userId, true);\n                $userObject = new \\stdClass();\n                $userObject->id = $user->getUserId();\n                $userObject->status = $user->getStatus();\n                $userObject->isSuperAdmin = $user->isSuperAdmin();\n                $userObject->isVisible = $user->getUserData('is_visible');\n                $userObject->displayName = $user->getUserData('display_name');\n                $userObject->userName = $user->getLogin();\n                $userObject->email = $user->getUserData('email');\n                $userData[] = $userObject;\n            }\n            $http->setStatus(200);\n            $http->sendJsonWithHeaders($userData);\n            break;\n\n        case 'get_user_rights':\n            $user->getUserById($userId, true);\n            $http->sendJsonWithHeaders($user->perm->getUserRights($userId));\n            break;\n\n        case 'activate_user':\n            if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n                exit(1);\n            }\n\n            $user->getUserById($userId, true);\n            $user->activateUser();\n            $http->sendJsonWithHeaders($user->getStatus());\n            break;\n\n        case 'add_user':\n            if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n                exit(1);\n            }\n\n            $errorMessage = [];\n            $successMessage = '';\n\n            $postData = json_decode(file_get_contents('php://input'), true);\n\n            $userName = Filter::filterVar($postData['userName'], FILTER_UNSAFE_RAW);\n            $userRealName = Filter::filterVar($postData['realName'], FILTER_UNSAFE_RAW);\n            $userEmail = Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL);\n            $automaticPassword = Filter::filterVar($postData['automaticPassword'], FILTER_VALIDATE_BOOLEAN);\n            $userPassword = Filter::filterVar($postData['password'], FILTER_UNSAFE_RAW);\n            $userPasswordConfirm = Filter::filterVar($postData['passwordConfirm'], FILTER_UNSAFE_RAW);\n            $userIsSuperAdmin = Filter::filterVar($postData['isSuperAdmin'], FILTER_VALIDATE_BOOLEAN);\n\n            $newUser = new User($faqConfig);\n\n            if (!$newUser->isValidLogin($userName)) {\n                $errorMessage[] = $PMF_LANG['ad_user_error_loginInvalid'];\n            }\n            if ($newUser->getUserByLogin($userName)) {\n                $errorMessage[] = $PMF_LANG['ad_adus_exerr'];\n            }\n            if ($userRealName === '') {\n                $errorMessage[] = $PMF_LANG['ad_user_error_noRealName'];\n            }\n            if (is_null($userEmail)) {\n                $errorMessage[] = $PMF_LANG['ad_user_error_noEmail'];\n            }\n            if (!$automaticPassword) {\n                if (strlen($userPassword) <= 7 || strlen($userPasswordConfirm) <= 7) {\n                    $errorMessage[] = $PMF_LANG['ad_passwd_fail'];\n                }\n            }\n\n            if (count($errorMessage) === 0) {\n                if (!$newUser->createUser($userName, $userPassword)) {\n                    $errorMessage[] = $newUser->error();\n                } else {\n                    $newUser->userdata->set(['display_name', 'email', 'is_visible'], [$userRealName, $userEmail, 0]);\n                    $newUser->setStatus('active');\n                    $newUser->setSuperAdmin(!is_null($userIsSuperAdmin));\n                    $mailHelper = new MailHelper($faqConfig);\n                    try {\n                        $mailHelper->sendMailToNewUser($newUser, $userPassword);\n                    } catch (Exception $e) {\n                        // @todo catch exception\n                    }\n                    $successMessage = [ 'data' => $PMF_LANG['ad_adus_suc'] ];\n                }\n\n                $http->setStatus(201);\n                $http->sendJsonWithHeaders($successMessage);\n                exit(1);\n            }\n\n            $http->setStatus(400);\n            $http->sendJsonWithHeaders($errorMessage);\n            break;\n\n        case 'delete_user':\n            if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n                exit(1);\n            }\n\n            $user->getUserById($userId, true);\n            if ($user->getStatus() == 'protected' || $userId == 1) {\n                $message = '<p class=\"alert alert-error\">' . $PMF_LANG['ad_user_error_protectedAccount'] . '</p>';\n            } else {\n                if (!$user->deleteUser()) {\n                    $message = $PMF_LANG['ad_user_error_delete'];\n                } else {\n                    $category = new Category($faqConfig, [], false);\n                    $category->moveOwnership((int) $userId, 1);\n\n                    // Remove the user from groups\n                    if ('basic' !== $faqConfig->get('security.permLevel')) {\n                        $permissions = Permission::selectPerm('medium', $faqConfig);\n                        $permissions->removeFromAllGroups($userId);\n                    }\n\n                    $message = '<p class=\"alert alert-success\">' . $PMF_LANG['ad_user_deleted'] . '</p>';\n                }\n            }\n            $http->sendJsonWithHeaders($message);\n            break;\n\n        case 'overwrite_password':\n            $userId = Filter::filterInput(INPUT_POST, 'user_id', FILTER_VALIDATE_INT);\n            $csrfToken = Filter::filterInput(INPUT_POST, 'csrf', FILTER_UNSAFE_RAW);\n            $newPassword = Filter::filterInput(INPUT_POST, 'npass', FILTER_UNSAFE_RAW);\n            $retypedPassword = Filter::filterInput(INPUT_POST, 'bpass', FILTER_UNSAFE_RAW);\n\n            if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n                exit(1);\n            }\n\n            if (strlen($newPassword) <= 7 || strlen($retypedPassword) <= 7) {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['ad_passwd_fail']]);\n                exit(1);\n            }\n\n            $user->getUserById($userId, true);\n            $auth = new Auth($faqConfig);\n            $authSource = $auth->selectAuth($user->getAuthSource('name'));\n            $authSource->selectEncType($user->getAuthData('encType'));\n\n            if ($newPassword === $retypedPassword) {\n                if (!$user->changePassword($newPassword)) {\n                    $http->setStatus(400);\n                    $http->sendJsonWithHeaders(['error' => $PMF_LANG['ad_passwd_fail']]);\n                }\n                $http->sendJsonWithHeaders(['success' => $PMF_LANG['ad_passwdsuc']]);\n            } else {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['ad_passwd_fail']]);\n            }\n\n            break;\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * AJAX: handling of Ajax user calls.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2009-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2009-04-04\n */\n\nuse phpMyFAQ\\Auth;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\HttpHelper;\nuse phpMyFAQ\\Helper\\MailHelper;\nuse phpMyFAQ\\Permission;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\User;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n$ajaxAction = Filter::filterInput(INPUT_GET, 'ajaxaction', FILTER_UNSAFE_RAW);\n$userId = Filter::filterInput(INPUT_GET, 'user_id', FILTER_VALIDATE_INT);\n$userSearch = Filter::filterInput(INPUT_GET, 'q', FILTER_UNSAFE_RAW);\n$csrfToken = Filter::filterInput(INPUT_GET, 'csrf', FILTER_UNSAFE_RAW);\n\n// Send headers\n$http = new HttpHelper();\n$http->setContentType('application/json');\n$http->addHeader();\n\nif (\n    $user->perm->hasPermission($user->getUserId(), 'add_user') ||\n    $user->perm->hasPermission($user->getUserId(), 'edit_user') ||\n    $user->perm->hasPermission($user->getUserId(), 'delete_user')\n) {\n    $user = new User($faqConfig);\n\n    switch ($ajaxAction) {\n        case 'get_user_list':\n            $allUsers = [];\n            foreach ($user->searchUsers($userSearch) as $singleUser) {\n                $users = new \\stdClass();\n                $users->user_id = (int)$singleUser['user_id'];\n                $users->name = $singleUser['login'];\n                $allUsers[] = $users;\n            }\n            $http->sendJsonWithHeaders($allUsers);\n            break;\n\n        case 'get_user_data':\n            $user->getUserById($userId, true);\n            $userdata = [];\n            $userdata = $user->userdata->get('*');\n            $userdata['status'] = $user->getStatus();\n            $userdata['login'] = Strings::htmlentities($user->getLogin());\n            $userdata['is_superadmin'] = $user->isSuperAdmin();\n            $http->sendJsonWithHeaders($userdata);\n            break;\n\n        case 'get_all_user_data':\n            $allUsers = $user->getAllUsers(false);\n            $userData = [];\n            foreach ($allUsers as $userId) {\n                $user->getUserById($userId, true);\n                $userObject = new \\stdClass();\n                $userObject->id = $user->getUserId();\n                $userObject->status = $user->getStatus();\n                $userObject->isSuperAdmin = $user->isSuperAdmin();\n                $userObject->isVisible = $user->getUserData('is_visible');\n                $userObject->displayName = $user->getUserData('display_name');\n                $userObject->userName = $user->getLogin();\n                $userObject->email = $user->getUserData('email');\n                $userData[] = $userObject;\n            }\n            $http->setStatus(200);\n            $http->sendJsonWithHeaders($userData);\n            break;\n\n        case 'get_user_rights':\n            $user->getUserById($userId, true);\n            $http->sendJsonWithHeaders($user->perm->getUserRights($userId));\n            break;\n\n        case 'activate_user':\n            if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n                exit(1);\n            }\n\n            $user->getUserById($userId, true);\n            $user->activateUser();\n            $http->sendJsonWithHeaders($user->getStatus());\n            break;\n\n        case 'add_user':\n            if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n                exit(1);\n            }\n\n            $errorMessage = [];\n            $successMessage = '';\n\n            $postData = json_decode(file_get_contents('php://input'), true);\n\n            $userName = Filter::filterVar($postData['userName'], FILTER_UNSAFE_RAW);\n            $userRealName = Filter::filterVar($postData['realName'], FILTER_UNSAFE_RAW);\n            $userEmail = Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL);\n            $automaticPassword = Filter::filterVar($postData['automaticPassword'], FILTER_VALIDATE_BOOLEAN);\n            $userPassword = Filter::filterVar($postData['password'], FILTER_UNSAFE_RAW);\n            $userPasswordConfirm = Filter::filterVar($postData['passwordConfirm'], FILTER_UNSAFE_RAW);\n            $userIsSuperAdmin = Filter::filterVar($postData['isSuperAdmin'], FILTER_VALIDATE_BOOLEAN);\n\n            $newUser = new User($faqConfig);\n\n            if (!$newUser->isValidLogin($userName)) {\n                $errorMessage[] = $PMF_LANG['ad_user_error_loginInvalid'];\n            }\n            if ($newUser->getUserByLogin($userName)) {\n                $errorMessage[] = $PMF_LANG['ad_adus_exerr'];\n            }\n            if ($userRealName === '') {\n                $errorMessage[] = $PMF_LANG['ad_user_error_noRealName'];\n            }\n            if (is_null($userEmail)) {\n                $errorMessage[] = $PMF_LANG['ad_user_error_noEmail'];\n            }\n            if (!$automaticPassword) {\n                if (strlen($userPassword) <= 7 || strlen($userPasswordConfirm) <= 7) {\n                    $errorMessage[] = $PMF_LANG['ad_passwd_fail'];\n                }\n            } else {\n                $userPassword = ''; // set password to empty, so a new one is created\n            }\n\n            if (count($errorMessage) === 0) {\n                if (!$newUser->createUser($userName, $userPassword)) {\n                    $errorMessage[] = $newUser->error();\n                } else {\n                    $newUser->userdata->set(['display_name', 'email', 'is_visible'], [$userRealName, $userEmail, 0]);\n                    $newUser->setStatus('active');\n                    $newUser->setSuperAdmin(!is_null($userIsSuperAdmin));\n                    $mailHelper = new MailHelper($faqConfig);\n                    try {\n                        $mailHelper->sendMailToNewUser($newUser, $userPassword);\n                    } catch (Exception $e) {\n                        // @todo catch exception\n                    }\n                    $successMessage = [ 'data' => $PMF_LANG['ad_adus_suc'] ];\n                }\n\n                $http->setStatus(201);\n                $http->sendJsonWithHeaders($successMessage);\n                exit(1);\n            }\n\n            $http->setStatus(400);\n            $http->sendJsonWithHeaders($errorMessage);\n            break;\n\n        case 'delete_user':\n            if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n                exit(1);\n            }\n\n            $user->getUserById($userId, true);\n            if ($user->getStatus() == 'protected' || $userId == 1) {\n                $message = '<p class=\"alert alert-error\">' . $PMF_LANG['ad_user_error_protectedAccount'] . '</p>';\n            } else {\n                if (!$user->deleteUser()) {\n                    $message = $PMF_LANG['ad_user_error_delete'];\n                } else {\n                    $category = new Category($faqConfig, [], false);\n                    $category->moveOwnership((int) $userId, 1);\n\n                    // Remove the user from groups\n                    if ('basic' !== $faqConfig->get('security.permLevel')) {\n                        $permissions = Permission::selectPerm('medium', $faqConfig);\n                        $permissions->removeFromAllGroups($userId);\n                    }\n\n                    $message = '<p class=\"alert alert-success\">' . $PMF_LANG['ad_user_deleted'] . '</p>';\n                }\n            }\n            $http->sendJsonWithHeaders($message);\n            break;\n\n        case 'overwrite_password':\n            $userId = Filter::filterInput(INPUT_POST, 'user_id', FILTER_VALIDATE_INT);\n            $csrfToken = Filter::filterInput(INPUT_POST, 'csrf', FILTER_UNSAFE_RAW);\n            $newPassword = Filter::filterInput(INPUT_POST, 'npass', FILTER_UNSAFE_RAW);\n            $retypedPassword = Filter::filterInput(INPUT_POST, 'bpass', FILTER_UNSAFE_RAW);\n\n            if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n                exit(1);\n            }\n\n            if (strlen($newPassword) <= 7 || strlen($retypedPassword) <= 7) {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['ad_passwd_fail']]);\n                exit(1);\n            }\n\n            $user->getUserById($userId, true);\n            $auth = new Auth($faqConfig);\n            $authSource = $auth->selectAuth($user->getAuthSource('name'));\n            $authSource->selectEncType($user->getAuthData('encType'));\n\n            if ($newPassword === $retypedPassword) {\n                if (!$user->changePassword($newPassword)) {\n                    $http->setStatus(400);\n                    $http->sendJsonWithHeaders(['error' => $PMF_LANG['ad_passwd_fail']]);\n                }\n                $http->sendJsonWithHeaders(['success' => $PMF_LANG['ad_passwdsuc']]);\n            } else {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['ad_passwd_fail']]);\n            }\n\n            break;\n    }\n}\n"], "filenames": ["phpmyfaq/admin/ajax.user.php"], "buggy_code_start_loc": [145], "buggy_code_end_loc": [145], "fixing_code_start_loc": [146], "fixing_code_end_loc": [148], "type": "CWE-521", "message": "Weak Password Requirements in GitHub repository thorsten/phpmyfaq prior to 3.1.12.", "other": {"cve": {"id": "CVE-2023-1753", "sourceIdentifier": "security@huntr.dev", "published": "2023-03-31T01:15:09.160", "lastModified": "2023-04-07T02:47:01.177", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Weak Password Requirements in GitHub repository thorsten/phpmyfaq prior to 3.1.12."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 4.2}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-521"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.12", "matchCriteriaId": "653EC167-06FC-4D30-AAF8-B75F596519AE"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/f612a72494080e04947da7028340fee4493fe8a5", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/01d6ae23-3a8f-42a8-99f4-10246187d71b", "source": "security@huntr.dev", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/f612a72494080e04947da7028340fee4493fe8a5"}}