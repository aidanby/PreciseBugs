{"buggy_code": ["name: Branch Names\ndescription: Retrieve github branch or tag information without the /ref/* prefix\nauthor: tj-actions\ninputs:\n  strip_tag_prefix:\n    description: 'The prefix that should be stripped from the tag e.g `v` -> with a tag `v0.0.1` -> returns `0.0.1`'\n    default: ''\n    required: false\n\noutputs:\n  is_default:\n    value: ${{ steps.default.outputs.is_default }}\n    description: 'Returns `\"true\"` if the current branch is the default else `\"false\"`.'\n  is_tag:\n    value: ${{ steps.tag.outputs.is_tag }}\n    description: 'Returns `\"true\"` if the current branch is a tag else `\"false\"`.'\n  default_branch:\n    value: ${{ steps.default.outputs.default_branch }}\n    description: 'The default branch name e.g `main` OR `master`'\n  current_branch:\n    value: ${{ steps.current_branch.outputs.current_branch }}\n    description: 'The current branch name regardless of event_type e.g `main`, `feature/test`'\n  base_ref_branch:\n    value: ${{ steps.branch.outputs.base_ref_branch }}\n    description: 'The target branch of a pull request or tag e.g `main`'\n  head_ref_branch:\n    value: ${{ steps.branch.outputs.head_ref_branch }}\n    description: 'The source branch of a pull request e.g `feature/test`'\n  ref_branch:\n    value: ${{ steps.branch.outputs.ref_branch }}\n    description: 'The branch that triggered the workflow run. e.g `1/merge`, `main`'\n  tag:\n    value: ${{ steps.tag.outputs.tag }}\n    description: 'The tag that triggered the workflow run. e.g `v0.0.1`, `0.0.1`'\n\nruns:\n  using: \"composite\"\n  steps:\n    - id: branch\n      run: |\n        # \"Set branch names...\"\n        if [[ \"${{ github.ref }}\" != \"refs/tags/\"* ]]; then\n          BASE_REF=$(printf \"%q\" \"${{ github.event.pull_request.base.ref || github.base_ref }}\")\n          HEAD_REF=$(printf \"%q\" \"${{ github.event.pull_request.head.ref || github.head_ref }}\")\n          REF=$(printf \"%q\" \"${{ github.ref }}\")\n\n          BASE_REF=${BASE_REF/refs\\/heads\\//}\n          HEAD_REF=${HEAD_REF/refs\\/heads\\//}\n          REF_BRANCH=${REF/refs\\/pull\\//}\n          REF_BRANCH=${REF_BRANCH/refs\\/heads\\//}\n          \n          echo \"base_ref_branch=$(eval printf \"%s\" \"$BASE_REF\")\" >> \"$GITHUB_OUTPUT\"\n          echo \"head_ref_branch=$(eval printf \"%s\" \"$HEAD_REF\")\" >> \"$GITHUB_OUTPUT\"\n          echo \"ref_branch=$(eval printf \"%s\" \"$REF_BRANCH\")\" >> \"$GITHUB_OUTPUT\"\n        else\n          BASE_REF=$(printf \"%q\" \"${{ github.event.base_ref }}\")\n          BASE_REF=${BASE_REF/refs\\/heads\\/${{ inputs.strip_tag_prefix }}/}\n          \n          echo \"base_ref_branch=$(eval printf \"%s\" \"$BASE_REF\")\" >> \"$GITHUB_OUTPUT\"\n        fi\n      shell: bash\n    - id: current_branch\n      run: |\n        # \"Set the current branch name...\"\n        if [[ \"${{ github.ref }}\" != \"refs/tags/\"* ]]; then\n          if [[ ${{ github.event_name }} == *\"pull_request\"* ]]; then\n            echo \"current_branch=${{ steps.branch.outputs.head_ref_branch }}\" >> \"$GITHUB_OUTPUT\"\n          else\n            echo \"current_branch=${{ steps.branch.outputs.ref_branch }}\" >> \"$GITHUB_OUTPUT\"\n          fi\n        fi\n      shell: bash\n    - id: default\n      run: |\n        # \"Set the default branch name...\"\n        if [[ \"${{ github.ref }}\" != \"refs/tags/\"* ]]; then\n          if [[ \"${{ steps.current_branch.outputs.current_branch }}\" == \"${{ github.event.repository.default_branch }}\" && \"${{ github.event.pull_request.head.repo.fork }}\" != \"true\" ]]; then\n            echo \"is_default=true\" >> \"$GITHUB_OUTPUT\"\n            echo \"default_branch=${{ github.event.repository.default_branch }}\" >> \"$GITHUB_OUTPUT\"\n          else\n            echo \"is_default=false\" >> \"$GITHUB_OUTPUT\"\n            echo \"default_branch=${{ github.event.repository.default_branch }}\" >> \"$GITHUB_OUTPUT\"\n          fi\n        fi\n      shell: bash\n    - id: tag\n      run: |\n        # \"Set the tag name...\"\n        if [[ \"${{ github.ref }}\" == \"refs/tags/\"* ]]; then\n          REF=$(printf \"%q\" \"${{ github.ref }}\")\n          TAG=${REF/refs\\/tags\\/${{ inputs.strip_tag_prefix }}/}\n\n          echo \"tag=$(eval printf \"%s\" \"$TAG\")\" >> \"$GITHUB_OUTPUT\"\n          echo \"is_tag=true\" >> \"$GITHUB_OUTPUT\"\n        else\n          echo \"is_tag=false\" >> \"$GITHUB_OUTPUT\"\n        fi\n      shell: bash\n\nbranding:\n  icon: git-branch\n  color: white\n"], "fixing_code": ["name: Branch Names\ndescription: Retrieve github branch or tag information without the /ref/* prefix\nauthor: tj-actions\ninputs:\n  strip_tag_prefix:\n    description: 'The prefix that should be stripped from the tag e.g `v` -> with a tag `v0.0.1` -> returns `0.0.1`'\n    default: ''\n    required: false\n\noutputs:\n  is_default:\n    value: ${{ steps.default.outputs.is_default }}\n    description: 'Returns `\"true\"` if the current branch is the default else `\"false\"`.'\n  is_tag:\n    value: ${{ steps.tag.outputs.is_tag }}\n    description: 'Returns `\"true\"` if the current branch is a tag else `\"false\"`.'\n  default_branch:\n    value: ${{ steps.default.outputs.default_branch }}\n    description: 'The default branch name e.g `main` OR `master`'\n  current_branch:\n    value: ${{ steps.current_branch.outputs.current_branch }}\n    description: 'The current branch name regardless of event_type e.g `main`, `feature/test`'\n  base_ref_branch:\n    value: ${{ steps.branch.outputs.base_ref_branch }}\n    description: 'The target branch of a pull request or tag e.g `main`'\n  head_ref_branch:\n    value: ${{ steps.branch.outputs.head_ref_branch }}\n    description: 'The source branch of a pull request e.g `feature/test`'\n  ref_branch:\n    value: ${{ steps.branch.outputs.ref_branch }}\n    description: 'The branch that triggered the workflow run. e.g `1/merge`, `main`'\n  tag:\n    value: ${{ steps.tag.outputs.tag }}\n    description: 'The tag that triggered the workflow run. e.g `v0.0.1`, `0.0.1`'\n\nruns:\n  using: \"composite\"\n  steps:\n    - id: branch\n      env:\n        GITHUB_REF: ${{ github.ref }}\n        GITHUB_BASE_REF: ${{ github.event.pull_request.base.ref || github.base_ref }}\n        GITHUB_HEAD_REF: ${{ github.event.pull_request.head.ref || github.head_ref }}\n        GITHUB_EVENT_BASE_REF: ${{ github.event.base_ref }}\n        INPUTS_STRIP_TAG_PREFIX: ${{ inputs.strip_tag_prefix }}\n      run: |\n        # \"Set branch names...\"\n        if [[ \"$GITHUB_REF\" != \"refs/tags/\"* ]]; then\n          BASE_REF=$(printf \"%q\" \"$GITHUB_BASE_REF\")\n          HEAD_REF=$(printf \"%q\" \"$GITHUB_HEAD_REF\")\n          REF=$(printf \"%q\" \"$GITHUB_REF\")\n\n          BASE_REF=${BASE_REF/refs\\/heads\\//}\n          HEAD_REF=${HEAD_REF/refs\\/heads\\//}\n          REF_BRANCH=${REF/refs\\/pull\\//}\n          REF_BRANCH=${REF_BRANCH/refs\\/heads\\//}\n          \n          echo \"base_ref_branch=$(eval printf \"%s\" \"$BASE_REF\")\" >> \"$GITHUB_OUTPUT\"\n          echo \"head_ref_branch=$(eval printf \"%s\" \"$HEAD_REF\")\" >> \"$GITHUB_OUTPUT\"\n          echo \"ref_branch=$(eval printf \"%s\" \"$REF_BRANCH\")\" >> \"$GITHUB_OUTPUT\"\n        else\n          BASE_REF=$(printf \"%q\" \"$GITHUB_EVENT_BASE_REF\")\n          BASE_REF=${BASE_REF/refs\\/heads\\/$INPUTS_STRIP_TAG_PREFIX/}\n          \n          echo \"base_ref_branch=$(eval printf \"%s\" \"$BASE_REF\")\" >> \"$GITHUB_OUTPUT\"\n        fi\n      shell: bash\n    - id: current_branch\n      env:\n        GITHUB_REF: ${{ github.ref }}\n        GITHUB_EVENT_NAME: ${{ github.event_name }}\n        HEAD_REF_BRANCH: ${{ steps.branch.outputs.head_ref_branch }}\n        REF_BRANCH: ${{ steps.branch.outputs.ref_branch }}\n      run: |\n        # \"Set the current branch name...\"\n        if [[ \"$GITHUB_REF\" != \"refs/tags/\"* ]]; then\n          if [[ \"$GITHUB_EVENT_NAME\" == *\"pull_request\"* ]]; then\n            echo \"current_branch=$HEAD_REF_BRANCH\" >> \"$GITHUB_OUTPUT\"\n          else\n            echo \"current_branch=$REF_BRANCH\" >> \"$GITHUB_OUTPUT\"\n          fi\n        fi\n      shell: bash\n    - id: default\n      env:\n        GITHUB_REF: ${{ github.ref }}\n        CURRENT_BRANCH: ${{ steps.current_branch.outputs.current_branch }}\n        DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}\n        FORK: ${{ github.event.pull_request.head.repo.fork }}\n      run: |\n        # \"Set the default branch name...\"\n        if [[ \"$GITHUB_REF\" != \"refs/tags/\"* ]]; then\n          if [[ \"$CURRENT_BRANCH\" == \"$DEFAULT_BRANCH\" && \"$FORK\" != \"true\" ]]; then\n            echo \"is_default=true\" >> \"$GITHUB_OUTPUT\"\n            echo \"default_branch=$DEFAULT_BRANCH\" >> \"$GITHUB_OUTPUT\"\n          else\n            echo \"is_default=false\" >> \"$GITHUB_OUTPUT\"\n            echo \"default_branch=$DEFAULT_BRANCH\" >> \"$GITHUB_OUTPUT\"\n          fi\n        fi\n      shell: bash\n    - id: tag\n      env:\n        GITHUB_REF: ${{ github.ref }}\n        INPUTS_STRIP_TAG_PREFIX: ${{ inputs.strip_tag_prefix }}\n      run: |\n        # \"Set the tag name...\"\n        if [[ \"$GITHUB_REF\" == \"refs/tags/\"* ]]; then\n          REF=$(printf \"%q\" \"$GITHUB_REF\")\n          TAG=\"${REF/refs\\/tags\\/$INPUTS_STRIP_TAG_PREFIX/}\"\n\n          echo \"tag=$(eval printf \"%s\" \"$TAG\")\" >> \"$GITHUB_OUTPUT\"\n          echo \"is_tag=true\" >> \"$GITHUB_OUTPUT\"\n        else\n          echo \"is_tag=false\" >> \"$GITHUB_OUTPUT\"\n        fi\n      shell: bash\n\nbranding:\n  icon: git-branch\n  color: white\n"], "filenames": ["action.yml"], "buggy_code_start_loc": [39], "buggy_code_end_loc": [92], "fixing_code_start_loc": [40], "fixing_code_end_loc": [111], "type": "NVD-CWE-noinfo", "message": "tj-actions/branch-names is a Github action to retrieve branch or tag names with support for all events. The `tj-actions/branch-names` GitHub Actions improperly references the `github.event.pull_request.head.ref` and `github.head_ref` context variables within a GitHub Actions `run` step. The head ref variable is the branch name and can be used to execute arbitrary code using a specially crafted branch name. As a result an attacker can use this vulnerability to steal secrets from or abuse `GITHUB_TOKEN` permissions. This vulnerability has been addressed in version 7.0.7. Users are advised to upgrade. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2023-49291", "sourceIdentifier": "security-advisories@github.com", "published": "2023-12-05T00:15:09.403", "lastModified": "2023-12-08T17:24:26.643", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "tj-actions/branch-names is a Github action to retrieve branch or tag names with support for all events. The `tj-actions/branch-names` GitHub Actions improperly references the `github.event.pull_request.head.ref` and `github.head_ref` context variables within a GitHub Actions `run` step. The head ref variable is the branch name and can be used to execute arbitrary code using a specially crafted branch name. As a result an attacker can use this vulnerability to steal secrets from or abuse `GITHUB_TOKEN` permissions. This vulnerability has been addressed in version 7.0.7. Users are advised to upgrade. There are no known workarounds for this vulnerability."}, {"lang": "es", "value": "tj-actions/branch-names es una acci\u00f3n de Github para recuperar nombres de ramas o etiquetas con soporte para todos los eventos. Las GitHub Actions `tj-actions/branch-names` hacen referencia incorrectamente a las variables de contexto `github.event.pull_request.head.ref` y `github.head_ref` dentro de un paso de `ejecuci\u00f3n` de GitHub Actions. La variable head ref es el nombre de la rama y se puede usar para ejecutar c\u00f3digo arbitrario usando un nombre de rama especialmente manipulado. Como resultado, un atacante puede utilizar esta vulnerabilidad para robar secretos o abusar de los permisos \"GITHUB_TOKEN\". Esta vulnerabilidad se ha solucionado en la versi\u00f3n 7.0.7. Se recomienda a los usuarios que actualicen. No se conocen workarounds para esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.3, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 4.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:tj-actions:branch-names:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.0.0", "matchCriteriaId": "4AB0A58B-E056-49E3-9CD4-063AF78D1ECB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:tj-actions:branch-names:*:*:*:*:*:*:*:*", "versionStartIncluding": "7.0.1", "versionEndExcluding": "7.0.7", "matchCriteriaId": "04A7066A-CDAB-4C39-AD1F-87ADAF23495A"}]}]}], "references": [{"url": "https://github.com/tj-actions/branch-names/commit/4923d1ca41f928c24f1c1b3af9daaadfb71e6337", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/tj-actions/branch-names/commit/6c999acf206f5561e19f46301bb310e9e70d8815", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/tj-actions/branch-names/commit/726fe9ba5e9da4fcc716223b7994ffd0358af060", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/tj-actions/branch-names/security/advisories/GHSA-8v8w-v8xg-79rf", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}, {"url": "https://securitylab.github.com/research/github-actions-untrusted-input", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tj-actions/branch-names/commit/4923d1ca41f928c24f1c1b3af9daaadfb71e6337"}}