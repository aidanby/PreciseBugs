{"buggy_code": ["const Entities = require('html-entities').AllHtmlEntities;\nconst htmlentities = new Entities().encode;\nconst htmlparser2 = require('@joplin/fork-htmlparser2');\n\n// [\\s\\S] instead of . for multiline matching\n// https://stackoverflow.com/a/16119722/561309\nconst imageRegex = /<img([\\s\\S]*?)src=[\"']([\\s\\S]*?)[\"']([\\s\\S]*?)>/gi;\n\nconst anchorRegex = /<a([\\s\\S]*?)href=[\"']([\\s\\S]*?)[\"']([\\s\\S]*?)>/gi;\n\nconst selfClosingElements = [\n\t'area',\n\t'base',\n\t'basefont',\n\t'br',\n\t'col',\n\t'command',\n\t'embed',\n\t'frame',\n\t'hr',\n\t'img',\n\t'input',\n\t'isindex',\n\t'keygen',\n\t'link',\n\t'meta',\n\t'param',\n\t'source',\n\t'track',\n\t'wbr',\n];\n\nclass HtmlUtils {\n\n\tattributesHtml(attr: any) {\n\t\tconst output = [];\n\n\t\tfor (const n in attr) {\n\t\t\tif (!attr.hasOwnProperty(n)) continue;\n\t\t\toutput.push(`${n}=\"${htmlentities(attr[n])}\"`);\n\t\t}\n\n\t\treturn output.join(' ');\n\t}\n\n\tprocessImageTags(html: string, callback: Function) {\n\t\tif (!html) return '';\n\n\t\treturn html.replace(imageRegex, (_v, before, src, after) => {\n\t\t\tconst action = callback({ src: src });\n\n\t\t\tif (!action) return `<img${before}src=\"${src}\"${after}>`;\n\n\t\t\tif (action.type === 'replaceElement') {\n\t\t\t\treturn action.html;\n\t\t\t}\n\n\t\t\tif (action.type === 'replaceSource') {\n\t\t\t\treturn `<img${before}src=\"${action.src}\"${after}>`;\n\t\t\t}\n\n\t\t\tif (action.type === 'setAttributes') {\n\t\t\t\tconst attrHtml = this.attributesHtml(action.attrs);\n\t\t\t\treturn `<img${before}${attrHtml}${after}>`;\n\t\t\t}\n\n\t\t\tthrow new Error(`Invalid action: ${action.type}`);\n\t\t});\n\t}\n\n\tprocessAnchorTags(html: string, callback: Function) {\n\t\tif (!html) return '';\n\n\t\treturn html.replace(anchorRegex, (_v, before, href, after) => {\n\t\t\tconst action = callback({ href: href });\n\n\t\t\tif (!action) return `<a${before}href=\"${href}\"${after}>`;\n\n\t\t\tif (action.type === 'replaceElement') {\n\t\t\t\treturn action.html;\n\t\t\t}\n\n\t\t\tif (action.type === 'replaceSource') {\n\t\t\t\treturn `<img${before}href=\"${action.href}\"${after}>`;\n\t\t\t}\n\n\t\t\tif (action.type === 'setAttributes') {\n\t\t\t\tconst attrHtml = this.attributesHtml(action.attrs);\n\t\t\t\treturn `<img${before}${attrHtml}${after}>`;\n\t\t\t}\n\n\t\t\tthrow new Error(`Invalid action: ${action.type}`);\n\t\t});\n\t}\n\n\tisSelfClosingTag(tagName: string) {\n\t\treturn selfClosingElements.includes(tagName.toLowerCase());\n\t}\n\n\t// TODO: copied from @joplin/lib\n\tstripHtml(html: string) {\n\t\tconst output: string[] = [];\n\n\t\tconst tagStack: string[] = [];\n\n\t\tconst currentTag = () => {\n\t\t\tif (!tagStack.length) return '';\n\t\t\treturn tagStack[tagStack.length - 1];\n\t\t};\n\n\t\tconst disallowedTags = ['script', 'style', 'head', 'iframe', 'frameset', 'frame', 'object', 'base'];\n\n\t\tconst parser = new htmlparser2.Parser({\n\n\t\t\tonopentag: (name: string) => {\n\t\t\t\ttagStack.push(name.toLowerCase());\n\t\t\t},\n\n\t\t\tontext: (decodedText: string) => {\n\t\t\t\tif (disallowedTags.includes(currentTag())) return;\n\t\t\t\toutput.push(decodedText);\n\t\t\t},\n\n\t\t\tonclosetag: (name: string) => {\n\t\t\t\tif (currentTag() === name.toLowerCase()) tagStack.pop();\n\t\t\t},\n\n\t\t}, { decodeEntities: true });\n\n\t\tparser.write(html);\n\t\tparser.end();\n\n\t\treturn output.join('').replace(/\\s+/g, ' ');\n\t}\n\n\tsanitizeHtml(html: string, options: any = null) {\n\t\toptions = Object.assign({}, {\n\t\t\t// If true, adds a \"jop-noMdConv\" class to all the tags.\n\t\t\t// It can be used afterwards to restore HTML tags in Markdown.\n\t\t\taddNoMdConvClass: false,\n\t\t}, options);\n\n\t\tconst output: string[] = [];\n\n\t\tconst tagStack: string[] = [];\n\n\t\tconst currentTag = () => {\n\t\t\tif (!tagStack.length) return '';\n\t\t\treturn tagStack[tagStack.length - 1];\n\t\t};\n\n\t\t// The BASE tag allows changing the base URL from which files are\n\t\t// loaded, and that can break several plugins, such as Katex (which\n\t\t// needs to load CSS files using a relative URL). For that reason\n\t\t// it is disabled. More info:\n\t\t// https://github.com/laurent22/joplin/issues/3021\n\t\t//\n\t\t// \"link\" can be used to escape the parser and inject JavaScript.\n\t\t// Adding \"meta\" too for the same reason as it shouldn't be used in\n\t\t// notes anyway.\n\t\tconst disallowedTags = ['script', 'iframe', 'frameset', 'frame', 'object', 'base', 'embed', 'link', 'meta'];\n\n\t\tconst parser = new htmlparser2.Parser({\n\n\t\t\tonopentag: (name: string, attrs: any) => {\n\t\t\t\ttagStack.push(name.toLowerCase());\n\n\t\t\t\tif (disallowedTags.includes(currentTag())) return;\n\n\t\t\t\tattrs = Object.assign({}, attrs);\n\n\t\t\t\t// Remove all the attributes that start with \"on\", which\n\t\t\t\t// normally should be JavaScript events. A better solution\n\t\t\t\t// would be to blacklist known events only but it seems the\n\t\t\t\t// list is not well defined [0] and we don't want any to slip\n\t\t\t\t// throught the cracks. A side effect of this change is a\n\t\t\t\t// regular harmless attribute that starts with \"on\" will also\n\t\t\t\t// be removed.\n\t\t\t\t// 0: https://developer.mozilla.org/en-US/docs/Web/Events\n\t\t\t\tfor (const name in attrs) {\n\t\t\t\t\tif (!attrs.hasOwnProperty(name)) continue;\n\t\t\t\t\tif (name.length <= 2) continue;\n\t\t\t\t\tif (name.toLowerCase().substr(0, 2) !== 'on') continue;\n\t\t\t\t\tdelete attrs[name];\n\t\t\t\t}\n\n\t\t\t\tif (options.addNoMdConvClass) {\n\t\t\t\t\tlet classAttr = attrs['class'] || '';\n\t\t\t\t\tif (!classAttr.includes('jop-noMdConv')) {\n\t\t\t\t\t\tclassAttr += ' jop-noMdConv';\n\t\t\t\t\t\tattrs['class'] = classAttr.trim();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet attrHtml = this.attributesHtml(attrs);\n\t\t\t\tif (attrHtml) attrHtml = ` ${attrHtml}`;\n\t\t\t\tconst closingSign = this.isSelfClosingTag(name) ? '/>' : '>';\n\t\t\t\toutput.push(`<${name}${attrHtml}${closingSign}`);\n\t\t\t},\n\n\t\t\tontext: (decodedText: string) => {\n\t\t\t\tif (disallowedTags.includes(currentTag())) return;\n\n\t\t\t\tif (currentTag() === 'style') {\n\t\t\t\t\t// For CSS, we have to put the style as-is inside the tag because if we html-entities encode\n\t\t\t\t\t// it, it's not going to work. But it's ok because JavaScript won't run within the style tag.\n\t\t\t\t\t// Ideally CSS should be loaded from an external file.\n\t\t\t\t\toutput.push(decodedText);\n\t\t\t\t} else {\n\t\t\t\t\toutput.push(htmlentities(decodedText));\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tonclosetag: (name: string) => {\n\t\t\t\tconst current = currentTag();\n\n\t\t\t\tif (current === name.toLowerCase()) tagStack.pop();\n\n\t\t\t\tif (disallowedTags.includes(current)) return;\n\n\t\t\t\tif (this.isSelfClosingTag(name)) return;\n\t\t\t\toutput.push(`</${name}>`);\n\t\t\t},\n\n\t\t}, { decodeEntities: true });\n\n\t\tparser.write(html);\n\t\tparser.end();\n\n\t\treturn output.join('');\n\t}\n\n\n}\n\nexport default new HtmlUtils();\n"], "fixing_code": ["const Entities = require('html-entities').AllHtmlEntities;\nconst htmlentities = new Entities().encode;\nconst htmlparser2 = require('@joplin/fork-htmlparser2');\n\n// [\\s\\S] instead of . for multiline matching\n// https://stackoverflow.com/a/16119722/561309\nconst imageRegex = /<img([\\s\\S]*?)src=[\"']([\\s\\S]*?)[\"']([\\s\\S]*?)>/gi;\n\nconst anchorRegex = /<a([\\s\\S]*?)href=[\"']([\\s\\S]*?)[\"']([\\s\\S]*?)>/gi;\n\nconst selfClosingElements = [\n\t'area',\n\t'base',\n\t'basefont',\n\t'br',\n\t'col',\n\t'command',\n\t'embed',\n\t'frame',\n\t'hr',\n\t'img',\n\t'input',\n\t'isindex',\n\t'keygen',\n\t'link',\n\t'meta',\n\t'param',\n\t'source',\n\t'track',\n\t'wbr',\n];\n\nclass HtmlUtils {\n\n\tattributesHtml(attr: any) {\n\t\tconst output = [];\n\n\t\tfor (const n in attr) {\n\t\t\tif (!attr.hasOwnProperty(n)) continue;\n\t\t\toutput.push(`${n}=\"${htmlentities(attr[n])}\"`);\n\t\t}\n\n\t\treturn output.join(' ');\n\t}\n\n\tprocessImageTags(html: string, callback: Function) {\n\t\tif (!html) return '';\n\n\t\treturn html.replace(imageRegex, (_v, before, src, after) => {\n\t\t\tconst action = callback({ src: src });\n\n\t\t\tif (!action) return `<img${before}src=\"${src}\"${after}>`;\n\n\t\t\tif (action.type === 'replaceElement') {\n\t\t\t\treturn action.html;\n\t\t\t}\n\n\t\t\tif (action.type === 'replaceSource') {\n\t\t\t\treturn `<img${before}src=\"${action.src}\"${after}>`;\n\t\t\t}\n\n\t\t\tif (action.type === 'setAttributes') {\n\t\t\t\tconst attrHtml = this.attributesHtml(action.attrs);\n\t\t\t\treturn `<img${before}${attrHtml}${after}>`;\n\t\t\t}\n\n\t\t\tthrow new Error(`Invalid action: ${action.type}`);\n\t\t});\n\t}\n\n\tprocessAnchorTags(html: string, callback: Function) {\n\t\tif (!html) return '';\n\n\t\treturn html.replace(anchorRegex, (_v, before, href, after) => {\n\t\t\tconst action = callback({ href: href });\n\n\t\t\tif (!action) return `<a${before}href=\"${href}\"${after}>`;\n\n\t\t\tif (action.type === 'replaceElement') {\n\t\t\t\treturn action.html;\n\t\t\t}\n\n\t\t\tif (action.type === 'replaceSource') {\n\t\t\t\treturn `<img${before}href=\"${action.href}\"${after}>`;\n\t\t\t}\n\n\t\t\tif (action.type === 'setAttributes') {\n\t\t\t\tconst attrHtml = this.attributesHtml(action.attrs);\n\t\t\t\treturn `<img${before}${attrHtml}${after}>`;\n\t\t\t}\n\n\t\t\tthrow new Error(`Invalid action: ${action.type}`);\n\t\t});\n\t}\n\n\tisSelfClosingTag(tagName: string) {\n\t\treturn selfClosingElements.includes(tagName.toLowerCase());\n\t}\n\n\t// TODO: copied from @joplin/lib\n\tstripHtml(html: string) {\n\t\tconst output: string[] = [];\n\n\t\tconst tagStack: string[] = [];\n\n\t\tconst currentTag = () => {\n\t\t\tif (!tagStack.length) return '';\n\t\t\treturn tagStack[tagStack.length - 1];\n\t\t};\n\n\t\tconst disallowedTags = ['script', 'style', 'head', 'iframe', 'frameset', 'frame', 'object', 'base'];\n\n\t\tconst parser = new htmlparser2.Parser({\n\n\t\t\tonopentag: (name: string) => {\n\t\t\t\ttagStack.push(name.toLowerCase());\n\t\t\t},\n\n\t\t\tontext: (decodedText: string) => {\n\t\t\t\tif (disallowedTags.includes(currentTag())) return;\n\t\t\t\toutput.push(decodedText);\n\t\t\t},\n\n\t\t\tonclosetag: (name: string) => {\n\t\t\t\tif (currentTag() === name.toLowerCase()) tagStack.pop();\n\t\t\t},\n\n\t\t}, { decodeEntities: true });\n\n\t\tparser.write(html);\n\t\tparser.end();\n\n\t\treturn output.join('').replace(/\\s+/g, ' ');\n\t}\n\n\tpublic sanitizeHtml(html: string, options: any = null) {\n\t\toptions = Object.assign({}, {\n\t\t\t// If true, adds a \"jop-noMdConv\" class to all the tags.\n\t\t\t// It can be used afterwards to restore HTML tags in Markdown.\n\t\t\taddNoMdConvClass: false,\n\t\t}, options);\n\n\t\tconst output: string[] = [];\n\n\t\tconst tagStack: string[] = [];\n\n\t\tconst currentTag = () => {\n\t\t\tif (!tagStack.length) return '';\n\t\t\treturn tagStack[tagStack.length - 1];\n\t\t};\n\n\t\t// The BASE tag allows changing the base URL from which files are\n\t\t// loaded, and that can break several plugins, such as Katex (which\n\t\t// needs to load CSS files using a relative URL). For that reason\n\t\t// it is disabled. More info:\n\t\t// https://github.com/laurent22/joplin/issues/3021\n\t\t//\n\t\t// \"link\" can be used to escape the parser and inject JavaScript.\n\t\t// Adding \"meta\" too for the same reason as it shouldn't be used in\n\t\t// notes anyway.\n\t\tconst disallowedTags = ['script', 'iframe', 'frameset', 'frame', 'object', 'base', 'embed', 'link', 'meta', 'noscript'];\n\n\t\tconst parser = new htmlparser2.Parser({\n\n\t\t\tonopentag: (name: string, attrs: any) => {\n\t\t\t\ttagStack.push(name.toLowerCase());\n\n\t\t\t\tif (disallowedTags.includes(currentTag())) return;\n\n\t\t\t\tattrs = Object.assign({}, attrs);\n\n\t\t\t\t// Remove all the attributes that start with \"on\", which\n\t\t\t\t// normally should be JavaScript events. A better solution\n\t\t\t\t// would be to blacklist known events only but it seems the\n\t\t\t\t// list is not well defined [0] and we don't want any to slip\n\t\t\t\t// throught the cracks. A side effect of this change is a\n\t\t\t\t// regular harmless attribute that starts with \"on\" will also\n\t\t\t\t// be removed.\n\t\t\t\t// 0: https://developer.mozilla.org/en-US/docs/Web/Events\n\t\t\t\tfor (const name in attrs) {\n\t\t\t\t\tif (!attrs.hasOwnProperty(name)) continue;\n\t\t\t\t\tif (name.length <= 2) continue;\n\t\t\t\t\tif (name.toLowerCase().substr(0, 2) !== 'on') continue;\n\t\t\t\t\tdelete attrs[name];\n\t\t\t\t}\n\n\t\t\t\tif (options.addNoMdConvClass) {\n\t\t\t\t\tlet classAttr = attrs['class'] || '';\n\t\t\t\t\tif (!classAttr.includes('jop-noMdConv')) {\n\t\t\t\t\t\tclassAttr += ' jop-noMdConv';\n\t\t\t\t\t\tattrs['class'] = classAttr.trim();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet attrHtml = this.attributesHtml(attrs);\n\t\t\t\tif (attrHtml) attrHtml = ` ${attrHtml}`;\n\t\t\t\tconst closingSign = this.isSelfClosingTag(name) ? '/>' : '>';\n\t\t\t\toutput.push(`<${name}${attrHtml}${closingSign}`);\n\t\t\t},\n\n\t\t\tontext: (decodedText: string) => {\n\t\t\t\tif (disallowedTags.includes(currentTag())) return;\n\n\t\t\t\tif (currentTag() === 'style') {\n\t\t\t\t\t// For CSS, we have to put the style as-is inside the tag because if we html-entities encode\n\t\t\t\t\t// it, it's not going to work. But it's ok because JavaScript won't run within the style tag.\n\t\t\t\t\t// Ideally CSS should be loaded from an external file.\n\t\t\t\t\toutput.push(decodedText);\n\t\t\t\t} else {\n\t\t\t\t\toutput.push(htmlentities(decodedText));\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tonclosetag: (name: string) => {\n\t\t\t\tconst current = currentTag();\n\n\t\t\t\tif (current === name.toLowerCase()) tagStack.pop();\n\n\t\t\t\tif (disallowedTags.includes(current)) return;\n\n\t\t\t\tif (this.isSelfClosingTag(name)) return;\n\t\t\t\toutput.push(`</${name}>`);\n\t\t\t},\n\n\t\t}, { decodeEntities: true });\n\n\t\tparser.write(html);\n\t\tparser.end();\n\n\t\treturn output.join('');\n\t}\n\n\n}\n\nexport default new HtmlUtils();\n"], "filenames": ["packages/renderer/htmlUtils.ts"], "buggy_code_start_loc": [136], "buggy_code_end_loc": [162], "fixing_code_start_loc": [136], "fixing_code_end_loc": [162], "type": "CWE-79", "message": "Cross Site Scripting (XSS) vulnerability in Joplin Desktop App before 1.8.5 allows attackers to execute aribrary code due to improper sanitizing of html.", "other": {"cve": {"id": "CVE-2021-33295", "sourceIdentifier": "cve@mitre.org", "published": "2022-06-16T21:15:07.833", "lastModified": "2022-06-27T17:49:30.210", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross Site Scripting (XSS) vulnerability in Joplin Desktop App before 1.8.5 allows attackers to execute aribrary code due to improper sanitizing of html."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross Site Scripting (XSS) en Joplin Desktop App versiones anteriores a 1.8.5, permite a atacantes ejecutar c\u00f3digo arbitrario debido a un saneo inapropiado del html"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:joplin_project:joplin:*:*:*:*:*:-:*:*", "versionEndExcluding": "1.8.5", "matchCriteriaId": "650D9E1E-D56C-4186-AF77-C0FEFD5CEE0B"}]}]}], "references": [{"url": "https://github.com/laurent22/joplin/commit/9c20d5947d1fa4678a8b640792ff3d31224f0adf", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/laurent22/joplin/releases/tag/v1.8.5", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://the-it-wonders.blogspot.com/2021/05/joplin-app-desktop-version-vulnerable.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/laurent22/joplin/commit/9c20d5947d1fa4678a8b640792ff3d31224f0adf"}}