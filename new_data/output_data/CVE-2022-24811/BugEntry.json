{"buggy_code": ["<?php\n// Copyright (C) 2010-2018 Combodo SARL\n//\n//   This file is part of iTop.\n//\n//   iTop is free software; you can redistribute it and/or modify\t\n//   it under the terms of the GNU Affero General Public License as published by\n//   the Free Software Foundation, either version 3 of the License, or\n//   (at your option) any later version.\n//\n//   iTop is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n//\n//   You should have received a copy of the GNU Affero General Public License\n//   along with iTop. If not, see <http://www.gnu.org/licenses/>\n\n\ndefine('ITOP_APPLICATION', 'iTop');\ndefine('ITOP_APPLICATION_SHORT', 'iTop');\ndefine('ITOP_VERSION', '2.6.2');\ndefine('ITOP_REVISION', 'svn');\ndefine('ITOP_BUILD_DATE', '$WCNOW$');\n\ndefine('ACCESS_USER_WRITE', 1);\ndefine('ACCESS_ADMIN_WRITE', 2);\ndefine('ACCESS_FULL', ACCESS_USER_WRITE | ACCESS_ADMIN_WRITE);\ndefine('ACCESS_READONLY', 0);\n\n/**\n * Configuration read/write\n *\n * @copyright   Copyright (C) 2010-2018 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\n\nrequire_once('coreexception.class.inc.php');\nrequire_once('attributedef.class.inc.php'); // For the defines\nrequire_once('simplecrypt.class.inc.php');\n\nclass ConfigException extends CoreException\n{\n}\n\n// was utf8 but it only supports BMP chars (https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html)\n// so we switched to utf8mb4 in iTop 2.5, adding dependency to MySQL 5.5.3\n// The config params db_character_set and db_collation were introduced as a temporary workaround and removed in iTop 2.5\n// now everything uses those fixed value !\ndefine('DEFAULT_CHARACTER_SET', 'utf8mb4');\ndefine('DEFAULT_COLLATION', 'utf8mb4_unicode_ci');\n\ndefine('DEFAULT_LOG_GLOBAL', true);\ndefine('DEFAULT_LOG_NOTIFICATION', true);\ndefine('DEFAULT_LOG_ISSUE', true);\ndefine('DEFAULT_LOG_WEB_SERVICE', true);\n\ndefine('DEFAULT_QUERY_CACHE_ENABLED', true);\n\n\ndefine('DEFAULT_MIN_DISPLAY_LIMIT', 10);\ndefine('DEFAULT_MAX_DISPLAY_LIMIT', 15);\ndefine('DEFAULT_STANDARD_RELOAD_INTERVAL', 5 * 60);\ndefine('DEFAULT_FAST_RELOAD_INTERVAL', 1 * 60);\ndefine('DEFAULT_SECURE_CONNECTION_REQUIRED', false);\ndefine('DEFAULT_ALLOWED_LOGIN_TYPES', 'form|basic|external');\ndefine('DEFAULT_EXT_AUTH_VARIABLE', '$_SERVER[\\'REMOTE_USER\\']');\ndefine('DEFAULT_ENCRYPTION_KEY', '@iT0pEncr1pti0n!'); // We'll use a random generated key later (if possible)\ndefine('DEFAULT_ENCRYPTION_LIB', 'Mcrypt'); // We'll define the best encryption available later\n/**\n * Config\n * configuration data (this class cannot not be localized, because it is responsible for loading the dictionaries)\n *\n * @package     iTopORM\n *\n * @see \\MetaModel::GetConfig() to get the config, if the metamodel was already loaded\n * @see utils::GetConfig() to load config from the current env, if metamodel is not loaded\n */\nclass Config\n{\n\t//protected $m_bIsLoaded = false;\n\tprotected $m_sFile = '';\n\n\tprotected $m_aAppModules;\n\tprotected $m_aDataModels;\n\tprotected $m_aWebServiceCategories;\n\tprotected $m_aAddons;\n\n\tprotected $m_aModuleSettings;\n\n\t/**\n\t * New way to store the settings !\n\t *\n\t * @var array\n\t * @since 2.5 db* variables\n\t */\n\tprotected $m_aSettings = array(\n\t\t'app_env_label' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Label displayed to describe the current application environment, defaults to the environment name (e.g. \"production\")',\n\t\t\t'default' => '',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'app_root_url' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Root URL used for navigating within the application, or from an email to the application (you can put $SERVER_NAME$ as a placeholder for the server\\'s name)',\n\t\t\t'default' => '',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'app_icon_url' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Hyperlink to redirect the user when clicking on the application icon (in the main window, or login/logoff pages)',\n\t\t\t'default' => 'http://www.combodo.com/itop',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'db_host' => array(\n\t\t\t'type' => 'string',\n\t\t\t'default' => null,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'db_user' => array(\n\t\t\t'type' => 'string',\n\t\t\t'default' => null,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'db_pwd' => array(\n\t\t\t'type' => 'string',\n\t\t\t'default' => null,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'db_name' => array(\n\t\t\t'type' => 'string',\n\t\t\t'default' => null,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'db_subname' => array(\n\t\t\t'type' => 'string',\n\t\t\t'default' => null,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'db_tls.enabled' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'If true then the connection to the DB will be encrypted',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'db_tls.ca' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Path to certificate authority file for SSL',\n\t\t\t'default' => null,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'db_character_set' => array( // @deprecated to remove in 2.7 ? N\u00b01001 utf8mb4 switch\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Deprecated since iTop 2.5 : now using utf8mb4',\n\t\t\t'default' => 'DEPRECATED_2.5',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'db_collation' => array( // @deprecated to remove in 2.7 ? N\u00b01001 utf8mb4 switch\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Deprecated since iTop 2.5 : now using utf8mb4_unicode_ci',\n\t\t\t'default' => 'DEPRECATED_2.5',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'skip_check_to_write' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Disable data format and integrity checks to boost up data load (insert or update)',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'skip_check_ext_keys' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Disable external key check when checking the value of attributes',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'skip_strong_security' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Disable strong security - TEMPORARY: this flag should be removed when we are more confident in the recent change in security',\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'query_optimization_enabled' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'The queries are optimized based on the assumption that the DB integrity has been preserved. By disabling the optimization one can ensure that the fetched data is clean... but this can be really slower or not usable at all (some queries will exceed the allowed number of joins in MySQL: 61!)',\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'query_indentation_enabled' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'For developers: format the SQL queries for human analysis',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'disable_mandatory_ext_keys' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'For developers: allow every external keys to be undefined',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'graphviz_path' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Path to the Graphviz \"dot\" executable for graphing objects lifecycle',\n\t\t\t'default' => '/usr/bin/dot',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'php_path' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Path to the php executable in CLI mode',\n\t\t\t'default' => 'php',\n\t\t\t'value' => 'php',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'session_name' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'The name of the cookie used to store the PHP session id',\n\t\t\t'default' => 'iTop',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'max_combo_length' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'The maximum number of elements in a drop-down list. If more then an autocomplete will be used',\n\t\t\t'default' => 50,\n\t\t\t'value' => 50,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'min_autocomplete_chars' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'The minimum number of characters to type in order to trigger the \"autocomplete\" behavior',\n\t\t\t'default' => 2,\n\t\t\t'value' => 2,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'allow_menu_on_linkset' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Display Action menus in view mode on any LinkedSet with edit_mode != none',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'allow_target_creation' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Displays the + button on external keys to create target objects',\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t// Levels that trigger a confirmation in the CSV import/synchro wizard\n\t\t'csv_import_min_object_confirmation' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Minimum number of objects to check for the confirmation percentages',\n\t\t\t'default' => 3,\n\t\t\t'value' => 3,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'csv_import_errors_percentage' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Percentage of errors that trigger a confirmation in the CSV import',\n\t\t\t'default' => 50,\n\t\t\t'value' => 50,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'csv_import_modifications_percentage' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Percentage of modifications that trigger a confirmation in the CSV import',\n\t\t\t'default' => 50,\n\t\t\t'value' => 50,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'csv_import_creations_percentage' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Percentage of creations that trigger a confirmation in the CSV import',\n\t\t\t'default' => 50,\n\t\t\t'value' => 50,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'csv_import_history_display' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Display the history tab in the import wizard',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'access_mode' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Access mode: ACCESS_READONLY = 0, ACCESS_ADMIN_WRITE = 2, ACCESS_FULL = 3',\n\t\t\t'default' => ACCESS_FULL,\n\t\t\t'value' => ACCESS_FULL,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'access_message' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Message displayed to the users when there is any access restriction',\n\t\t\t'default' => 'iTop is temporarily frozen, please wait... (the admin team)',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'online_help' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Hyperlink to the online-help web page',\n\t\t\t'default' => 'http://www.combodo.com/itop-help',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'log_usage' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Log the usage of the application (i.e. the date/time and the user name of each login)',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'log_rest_service' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Log the usage of the REST/JSON service',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'synchro_trace' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Synchronization details: none, display, save (includes \\'display\\')',\n\t\t\t'default' => 'none',\n\t\t\t'value' => 'none',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'link_set_item_separator' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Link set from string: line separator',\n\t\t\t'default' => '|',\n\t\t\t'value' => '|',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'link_set_attribute_separator' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Link set from string: attribute separator',\n\t\t\t'default' => ';',\n\t\t\t'value' => ';',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'link_set_value_separator' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Link set from string: value separator (between the attcode and the value itself',\n\t\t\t'default' => ':',\n\t\t\t'value' => ':',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'link_set_attribute_qualifier' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Link set from string: attribute qualifier (encloses both the attcode and the value)',\n\t\t\t'default' => \"'\",\n\t\t\t'value' => \"'\",\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'tag_set_item_separator' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Tag set from string: tag label separator',\n\t\t\t'default' => '|',\n\t\t\t'value' => '|',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'cron_max_execution_time' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Duration (seconds) of the page cron.php, must be shorter than php setting max_execution_time and shorter than the web server response timeout',\n\t\t\t'default' => 600,\n\t\t\t'value' => 600,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'cron_sleep' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Duration (seconds) before cron.php checks again if something must be done',\n\t\t\t'default' => 2,\n\t\t\t'value' => 2,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'async_task_retries' => array(\n\t\t\t'type' => 'array',\n\t\t\t'description' => 'Automatic retries of asynchronous tasks in case of failure (per class)',\n\t\t\t'default' => array('AsyncSendEmail' => array('max_retries' => 0, 'retry_delay' => 600)),\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'email_asynchronous' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'If set, the emails are sent off line, which requires cron.php to be activated. Exception: some features like the email test utility will force the serialized mode',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'email_transport' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Mean to send emails: PHPMail (uses the function mail()) or SMTP (implements the client protocol)',\n\t\t\t'default' => \"PHPMail\",\n\t\t\t'value' => \"PHPMail\",\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'email_transport_smtp.host' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'host name or IP address (optional)',\n\t\t\t'default' => \"localhost\",\n\t\t\t'value' => \"localhost\",\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'email_transport_smtp.port' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'port number (optional)',\n\t\t\t'default' => 25,\n\t\t\t'value' => 25,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'email_transport_smtp.encryption' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'tls or ssl (optional)',\n\t\t\t'default' => \"\",\n\t\t\t'value' => \"\",\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'email_transport_smtp.username' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Authentication user (optional)',\n\t\t\t'default' => \"\",\n\t\t\t'value' => \"\",\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'email_transport_smtp.password' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Authentication password (optional)',\n\t\t\t'default' => \"\",\n\t\t\t'value' => \"\",\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'email_css' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'CSS that will override the standard stylesheet used for the notifications',\n\t\t\t'default' => \"\",\n\t\t\t'value' => \"\",\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'email_default_sender_address' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Default address provided in the email from header field.',\n\t\t\t'default' => \"\",\n\t\t\t'value' => \"\",\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'email_default_sender_label' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Default label provided in the email from header field.',\n\t\t\t'default' => \"\",\n\t\t\t'value' => \"\",\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'apc_cache.enabled' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'If set, the APC cache is allowed (the PHP extension must also be active)',\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'apc_cache.query_ttl' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Time to live set in APC for the prepared queries (seconds - 0 means no timeout)',\n\t\t\t'default' => 3600,\n\t\t\t'value' => 3600,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'apc_cache_emulation.max_entries' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Maximum number of cache entries (0 means no limit)',\n\t\t\t'default' => 1000,\n\t\t\t'value' => 1000,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'timezone' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Timezone (reference: http://php.net/manual/en/timezones.php). If empty, it will be left unchanged and MUST be explicitly configured in PHP',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'examples' => array(\n\t\t\t\t'America/Sao_Paulo',\n\t\t\t\t'America/New_York (standing for EDT)',\n\t\t\t\t'America/Los_Angeles (standing for PDT)',\n\t\t\t\t'Asia/Istanbul',\n\t\t\t\t'Asia/Singapore',\n\t\t\t\t'Africa/Casablanca',\n\t\t\t\t'Australia/Sydney'\n\t\t\t),\n\t\t\t'default' => 'Europe/Paris',\n\t\t\t'value' => 'Europe/Paris',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'cas_include_path' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'The path where to find the phpCAS library',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => '/usr/share/php',\n\t\t\t'value' => '/usr/share/php',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'cas_version' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'The CAS protocol version to use: \"1.0\" (CAS v1), \"2.0\" (CAS v2) or \"S1\" (SAML V1) )',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => '2.0',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_host' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'The name of the CAS host',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => '',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_port' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'The port used by the CAS server',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => 443,\n\t\t\t'value' => 443,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_context' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'The CAS context',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => '',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_server_ca_cert_path' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'The path where to find the certificate of the CA for validating the certificate of the CAS server',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => '',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_logout_redirect_service' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'The redirect service (URL) to use when logging-out with CAS',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => '',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_memberof' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'A semicolon separated list of group names that the user must be member of (works only with SAML - e.g. cas_version=> \"S1\")',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => '',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_user_synchro' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Whether or not to synchronize users with CAS/LDAP',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => 0,\n\t\t\t'value' => 0,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_update_profiles' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Whether or not to update the profiles of an existing user from the CAS information',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => 0,\n\t\t\t'value' => 0,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_profile_pattern' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'A regular expression pattern to extract the name of the iTop profile from the name of an LDAP/CAS group',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => '/^cn=([^,]+),/',\n\t\t\t'value' => '/^cn=([^,]+),/',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_default_profiles' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'A semi-colon separated list of iTop Profiles to use when creating a new user if no profile is retrieved from CAS',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => 'Portal user',\n\t\t\t'value' => 'Portal user',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_debug' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Activate the CAS debug',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'forgot_password' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Enable the \"Forgot password\" feature',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'forgot_password_from' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Sender email address for the \"forgot password\" feature. If empty, defaults to the recipient\\'s  email address.',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => '',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'deadline_format' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'The format used for displaying \"deadline\" attributes: any string with the following placeholders: $date$, $difference$',\n\t\t\t// examples... $date$ ($deadline$)\n\t\t\t'default' => '$difference$',\n\t\t\t'value' => '$difference$',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'buttons_position' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Position of the forms buttons: bottom | top | both',\n\t\t\t// examples... not used\n\t\t\t'default' => 'both',\n\t\t\t'value' => 'both',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'shortcut_actions' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Actions that are available as direct buttons next to the \"Actions\" menu',\n\t\t\t// examples... not used\n\t\t\t'default' => 'UI:Menu:Modify,UI:Menu:New',\n\t\t\t'value' => 'UI:Menu:Modify',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'complex_actions_limit' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Display the \"actions\" menu items that require long computation only if the list of objects is contains less objects than this number (0 means no limit)',\n\t\t\t// examples... not used\n\t\t\t'default' => 50,\n\t\t\t'value' => 50,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'synchro_prevent_delete_all' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Stop the synchro if all the replicas of a data source become obsolete at the same time.',\n\t\t\t// examples... not used\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'source_dir' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Source directory for the datamodel files. (which gets compiled to env-production).',\n\t\t\t// examples... not used\n\t\t\t'default' => '',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'csv_file_default_charset' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Character set used by default for downloading and uploading data as a CSV file. Warning: it is case sensitive (uppercase is preferable).',\n\t\t\t// examples... not used\n\t\t\t'default' => 'ISO-8859-1',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'debug_report_spurious_chars' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Report, in the error log, the characters found in the output buffer, echoed by mistake in the loaded modules, and potentially corrupting the output',\n\t\t\t// examples... not used\n\t\t\t'default' => false,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'impact_analysis_first_tab' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Which tab to display first in the impact analysis view: list or graphics. Graphics are nicer but slower to display when there are many objects',\n\t\t\t// examples... not used\n\t\t\t'default' => 'graphics',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'url_validation_pattern' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Regular expression to validate/detect the format of an URL (URL attributes and Wiki formatting for Text attributes)',\n\t\t\t'default' => '(https?|ftp)\\://([a-zA-Z0-9+!*(),;?&=\\$_.-]+(\\:[a-zA-Z0-9+!*(),;?&=\\$_.-]+)?@)?([a-zA-Z0-9-.]{3,})(\\:[0-9]{2,5})?(/([a-zA-Z0-9%+\\$_-]\\.?)+)*/?(\\?[a-zA-Z+&\\$_.-][a-zA-Z0-9;:[\\]@&%=+/\\$_.-]*)?(#[a-zA-Z_.-][a-zA-Z0-9+\\$_.-]*)?',\n\t\t\t//            SHEME.......... USER....................... PASSWORD.......................... HOST/IP........... PORT.......... PATH........................ GET............................................ ANCHOR............................\n\t\t\t// Example: http://User:passWord@127.0.0.1:8888/patH/Page.php?arrayArgument[2]=something:blah20#myAnchor\n\t\t\t// Origin of this regexp: http://www.php.net/manual/fr/function.preg-match.php#93824\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n        'email_validation_pattern' => array(\n            'type' => 'string',\n            'description' => 'Regular expression to validate/detect the format of an eMail address',\n            'default' => \"[a-zA-Z0-9._&'-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z0-9-]{2,}\",\n            'value' => '',\n            'source_of_value' => '',\n            'show_in_conf_sample' => true,\n        ),\n        'email_decoration_class' => array(\n            'type' => 'string',\n            'description' => 'CSS class(es) to use as decoration for the HTML rendering of the attribute. eg. \"fa fa-envelope\" will put a mail icon.',\n            'default' => 'fa fa-envelope',\n            'value' => '',\n            'source_of_value' => '',\n            'show_in_conf_sample' => false,\n        ),\n        'phone_number_validation_pattern' => array(\n            'type' => 'string',\n            'description' => 'Regular expression to validate/detect the format of a phone number',\n            'default' => \"[0-9.\\-\\ \\+\\(\\)]+\",\n            'value' => '',\n            'source_of_value' => '',\n            'show_in_conf_sample' => false,\n        ),\n        'phone_number_url_pattern' => array(\n            'type' => 'string',\n            'description' => 'Format for phone number url, use %1$s as a placeholder for the value. eg. \"tel:%1$s\" for regular phone applications or \"callto:%1$s\" for Skype. Default is \"tel:%1$s\".',\n            'default' => 'tel:%1$s',\n            'value' => '',\n            'source_of_value' => '',\n            'show_in_conf_sample' => false,\n        ),\n        'phone_number_decoration_class' => array(\n            'type' => 'string',\n            'description' => 'CSS class(es) to use as decoration for the HTML rendering of the attribute. eg. \"fa fa-phone\" will put a phone icon.',\n            'default' => 'fa fa-phone',\n            'value' => '',\n            'source_of_value' => '',\n            'show_in_conf_sample' => false,\n        ),\n\t\t'log_kpi_duration' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Level of logging for troubleshooting performance issues (1 to enable, 2 +blame callers)',\n\t\t\t// examples... not used\n\t\t\t'default' => 0,\n\t\t\t'value' => 0,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'log_kpi_memory' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Level of logging for troubleshooting memory limit issues',\n\t\t\t// examples... not used\n\t\t\t'default' => 0,\n\t\t\t'value' => 0,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'log_kpi_user_id' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Limit the scope of users to the given user id (* means no limit)',\n\t\t\t// examples... not used\n\t\t\t'default' => '*',\n\t\t\t'value' => '*',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'max_linkset_output' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Maximum number of items shown when getting a list of related items in an email, using the form $this->some_list$. 0 means no limit.',\n\t\t\t'default' => 100,\n\t\t\t'value' => 100,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'demo_mode' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Set to true to prevent users from changing passwords/languages',\n\t\t\t'default' => false,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'portal_tickets' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'CSV list of classes supported in the portal',\n\t\t\t// examples... not used\n\t\t\t'default' => 'UserRequest',\n\t\t\t'value' => 'UserRequest',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'portal_dispatch_urls' => array(\n\t\t\t'type' => 'array',\n\t\t\t'description' => 'Associative array of sPortalId => Home page URL (relatively to the application root)',\n\t\t\t// examples... not used\n\t\t\t'default' => array(),\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'max_execution_time_per_loop' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Maximum execution time requested, per loop, during bulk operations. Zero means no limit.',\n\t\t\t// examples... not used\n\t\t\t'default' => 30,\n\t\t\t'value' => 30,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'max_history_length' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Maximum length of the history table (in the \"History\" tab on each object) before it gets truncated. Latest modifications are displayed first.',\n\t\t\t// examples... not used\n\t\t\t'default' => 50,\n\t\t\t'value' => 50,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'max_history_case_log_entry_length' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'The length (in number of characters) at which to truncate the (expandable) display (in the history) of a case log entry. If zero, the display in the history is not truncated.',\n\t\t\t// examples... not used\n\t\t\t'default' => 60,\n\t\t\t'value' => 60,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'full_text_chunk_duration' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Delay after which the results are displayed.',\n\t\t\t// examples... not used\n\t\t\t'default' => 2,\n\t\t\t'value' => 2,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'full_text_accelerators' => array(\n\t\t\t'type' => 'array',\n\t\t\t'description' => 'Specifies classes to be searched at first (and the subset of data) when running the full text search.',\n\t\t\t'default' => array(),\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'full_text_needle_min' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Minimum size of the full text needle.',\n\t\t\t'default' => 3,\n\t\t\t'value' => 3,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'tracking_level_linked_set_default' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Default tracking level if not explicitly set at the attribute level, for AttributeLinkedSet (defaults to NONE in case of a fresh install, LIST otherwise - this to preserve backward compatibility while upgrading from a version older than 2.0.3 - see TRAC #936)',\n\t\t\t'default' => LINKSET_TRACKING_LIST,\n\t\t\t'value' => LINKSET_TRACKING_LIST,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'tracking_level_linked_set_indirect_default' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Default tracking level if not explicitly set at the attribute level, for AttributeLinkedSetIndirect',\n\t\t\t'default' => LINKSET_TRACKING_ALL,\n\t\t\t'value' => LINKSET_TRACKING_ALL,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'user_rights_legacy' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Set to true to restore the buggy algorithm for the computation of user rights (within the same profile, ALLOW on the class itself has precedence on DENY of a parent class)',\n\t\t\t'default' => false,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'xlsx_exporter_memory_limit' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Memory limit to use when (interactively) exporting data to Excel',\n\t\t\t'default' => '2048M', // Huuuuuuge 2GB!\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'min_reload_interval' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Minimum refresh interval (seconds) for dashboards, shortcuts, etc. Even if the interval is set programmatically, it is forced to that minimum',\n\t\t\t'default' => 5, // In iTop 2.0.3, this was the hardcoded value\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'relations_max_depth' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Maximum number of successive levels (depth) to explore when displaying the impact/depends on relations.',\n\t\t\t'default' => 20, // In iTop 2.0.3, this was the hardcoded value\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'transaction_storage' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'The type of mechanism to use for storing the unique identifiers for transactions (Session|File).',\n\t\t\t'default' => 'File',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'transactions_enabled' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Whether or not the whole mechanism to prevent multiple submissions of a page is enabled.',\n\t\t\t'default' => true,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'log_transactions' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Whether or not to enable the debug log for the transactions.',\n\t\t\t'default' => false,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'concurrent_lock_enabled' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Whether or not to activate the locking mechanism in order to prevent concurrent edition of the same object.',\n\t\t\t'default' => false,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'concurrent_lock_expiration_delay' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Delay (in seconds) for a concurrent lock to expire',\n\t\t\t'default' => 120,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'concurrent_lock_override_profiles' => array(\n\t\t\t'type' => 'array',\n\t\t\t'description' => 'The list of profiles allowed to \"kill\" a lock',\n\t\t\t'default' => array('Administrator'),\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'html_sanitizer' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'The class to use for HTML sanitization: HTMLDOMSanitizer, HTMLPurifierSanitizer or HTMLNullSanitizer',\n\t\t\t'default' => 'HTMLDOMSanitizer',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'inline_image_max_display_width' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'The maximum width (in pixels) when displaying images inside an HTML formatted attribute. Images will be displayed using this this maximum width.',\n\t\t\t'default' => '250',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'inline_image_max_storage_width' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'The maximum width (in pixels) when uploading images to be used inside an HTML formatted attribute. Images larger than the given size will be downsampled before storing them in the database.',\n\t\t\t'default' => '1600',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'draft_attachments_lifetime' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Lifetime (in seconds) of drafts\\' attachments and inline images: after this duration, the garbage collector will delete them.',\n\t\t\t'default' => 86400,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'date_and_time_format' => array(\n\t\t\t'type' => 'array',\n\t\t\t'description' => 'Format for date and time display (per language)',\n\t\t\t'default' => array('default' => array('date' => 'Y-m-d', 'time' => 'H:i:s', 'date_time' => '$date $time')),\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'breadcrumb.max_count' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Maximum number of items kept in the history breadcrumb. Set it to 0 to entirely disable the breadcrumb.',\n\t\t\t'default' => 8,\n\t\t\t'value' => 8,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'obsolescence.show_obsolete_data' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Default value for the user preference \"show obsolete data\"',\n\t\t\t'default' => false,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'obsolescence.date_update_interval' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Delay in seconds between two refreshes of the obsolescence dates.',\n\t\t\t'default' => 600,\n\t\t\t'value' => 600,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'disable_attachments_download_legacy_portal' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Disable attachments download from legacy portal',\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'secure_rest_services' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'When set to true, only the users with the profile \"REST Services User\" are allowed to use the REST web services.',\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'search_manual_submit' => array(\n\t\t\t'type' => 'array',\n\t\t\t'description' => 'Force manual submit of search all requests',\n\t\t\t'default' => false,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'optimize_requests_for_join_count' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Optimize request joins to minimize the count (default is true, try to set it to false in case of performance issues)',\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'high_cardinality_classes' => array(\n\t\t\t'type' => 'array',\n\t\t\t'description' => 'List of classes with high cardinality (Force manual submit of search)',\n\t\t\t'default' => array(),\n\t\t\t'value' => array(),\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'newsroom_enabled' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Whether or not the whole newsroom is enabled',\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'regenerate_session_id_enabled' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'If true then session id will be regenerated on each login, to prevent session fixation.',\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t);\n\n\tpublic function IsProperty($sPropCode)\n\t{\n\t\treturn (array_key_exists($sPropCode, $this->m_aSettings));\n\t}\n\n\t/**\n\t * @return string identifier that can be used for example to name WebStorage/SessionStorage keys (they\n\t *     are related to a whole domain, and a domain can host multiple itop)\n\t *     Beware: do not expose server side information to the client !\n\t */\n\tpublic function GetItopInstanceid()\n\t{\n\t\treturn md5(utils::GetAbsoluteUrlAppRoot()\n\t\t\t.'==='.$this->Get('db_host')\n\t\t\t.'/'.$this->Get('db_name')\n\t\t\t.'/'.$this->Get('db_subname'));\n\t}\n\n\tpublic function GetDescription($sPropCode)\n\t{\n\t\treturn $this->m_aSettings[$sPropCode];\n\t}\n\n\t/**\n\t * @param string $sPropCode\n\t * @param mixed $value\n\t * @param string $sSourceDesc mandatory for variables with show_in_conf_sample=false\n\t *\n\t * @throws \\CoreException\n\t */\n\tpublic function Set($sPropCode, $value, $sSourceDesc = 'unknown')\n\t{\n\t\t$sType = $this->m_aSettings[$sPropCode]['type'];\n\t\tswitch ($sType)\n\t\t{\n\t\t\tcase 'bool':\n\t\t\t\t$value = (bool)$value;\n\t\t\t\tbreak;\n\t\t\tcase 'string':\n\t\t\t\t$value = (string)$value;\n\t\t\t\tbreak;\n\t\t\tcase 'integer':\n\t\t\t\t$value = (integer)$value;\n\t\t\t\tbreak;\n\t\t\tcase 'float':\n\t\t\t\t$value = (float)$value;\n\t\t\t\tbreak;\n\t\t\tcase 'array':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new CoreException('Unknown type for setting', array('property' => $sPropCode, 'type' => $sType));\n\t\t}\n\t\t$this->m_aSettings[$sPropCode]['value'] = $value;\n\t\t$this->m_aSettings[$sPropCode]['source_of_value'] = $sSourceDesc;\n\n\t}\n\n    /**\n     * @param string $sPropCode\n     *\n     * @return mixed\n     */\n    public function Get($sPropCode)\n    {\n        return $this->m_aSettings[$sPropCode]['value'];\n    }\n\n\t/**\n\t * Event log options (see LOG_... definition)\n\t */\n\t// Those variables will be deprecated later, when the transition to ...Get('my_setting') will be done\n\tprotected $m_bLogGlobal;\n\tprotected $m_bLogNotification;\n\tprotected $m_bLogIssue;\n\tprotected $m_bLogWebService;\n\tprotected $m_bQueryCacheEnabled; // private setting\n\n\t/**\n\t * @var integer Number of elements to be displayed when there are more than m_iMaxDisplayLimit elements\n\t */\n\tprotected $m_iMinDisplayLimit;\n\t/**\n\t * @var integer Max number of elements before truncating the display\n\t */\n\tprotected $m_iMaxDisplayLimit;\n\n\t/**\n\t * @var integer Number of seconds between two reloads of the display (standard)\n\t */\n\tprotected $m_iStandardReloadInterval;\n\t/**\n\t * @var integer Number of seconds between two reloads of the display (fast)\n\t */\n\tprotected $m_iFastReloadInterval;\n\n\t/**\n\t * @var boolean Whether or not a secure connection is required for using the application.\n\t *              If set, any attempt to connect to an iTop page with http:// will be redirected\n\t *              to https://\n\t */\n\tprotected $m_bSecureConnectionRequired;\n\n\t/**\n\t * @var string Langage code, default if the user language is undefined\n\t */\n\tprotected $m_sDefaultLanguage;\n\n\t/**\n\t * @var string Type of login process allowed: form|basic|url|external\n\t */\n\tprotected $m_sAllowedLoginTypes;\n\n\t/**\n\t * @var string Name of the PHP variable in which external authentication information is passed by the web server\n\t */\n\tprotected $m_sExtAuthVariable;\n\n\t/**\n\t * @var string Encryption key used for all attributes of type \"encrypted string\". Can be set to a random value\n\t *             unless you want to import a database from another iTop instance, in which case you must use\n\t *             the same encryption key in order to properly decode the encrypted fields\n\t */\n\tprotected $m_sEncryptionKey;\n\n\t/**\n\t * @var string Encryption key used for all attributes of type \"encrypted string\". Can be set to a random value\n\t *             unless you want to import a database from another iTop instance, in which case you must use\n\t *             the same encryption key in order to properly decode the encrypted fields\n\t */\n\tprotected $m_sEncryptionLibrary;\n\n\t/**\n\t * @var array Additional character sets to be supported by the interactive CSV import\n\t *            'iconv_code' => 'display name'\n\t */\n\tprotected $m_aCharsets;\n\n    /**\n     * Config constructor.\n     *\n     * @param string|null $sConfigFile\n     * @param bool $bLoadConfig\n     *\n     * @throws \\ConfigException\n     * @throws \\CoreException\n     */\n    public function __construct($sConfigFile = null, $bLoadConfig = true)\n\t{\n\t\t$this->m_sFile = $sConfigFile;\n\t\tif (is_null($sConfigFile))\n\t\t{\n\t\t\t$bLoadConfig = false;\n\t\t}\n\n\t\t$this->m_aAddons = array(\n\t\t\t// Default AddOn, always present can be moved to an official iTop Module later if needed\n\t\t\t'user rights' => 'addons/userrights/userrightsprofile.class.inc.php',\n\t\t);\n\n\t\tforeach ($this->m_aSettings as $sPropCode => $aSettingInfo)\n\t\t{\n\t\t\t$this->m_aSettings[$sPropCode]['value'] = $aSettingInfo['default'];\n\t\t}\n\n\t\t$this->m_bLogGlobal = DEFAULT_LOG_GLOBAL;\n\t\t$this->m_bLogNotification = DEFAULT_LOG_NOTIFICATION;\n\t\t$this->m_bLogIssue = DEFAULT_LOG_ISSUE;\n\t\t$this->m_bLogWebService = DEFAULT_LOG_WEB_SERVICE;\n\t\t$this->m_iMinDisplayLimit = DEFAULT_MIN_DISPLAY_LIMIT;\n\t\t$this->m_iMaxDisplayLimit = DEFAULT_MAX_DISPLAY_LIMIT;\n\t\t$this->m_iStandardReloadInterval = DEFAULT_STANDARD_RELOAD_INTERVAL;\n\t\t$this->m_iFastReloadInterval = DEFAULT_FAST_RELOAD_INTERVAL;\n\t\t$this->m_bSecureConnectionRequired = DEFAULT_SECURE_CONNECTION_REQUIRED;\n\t\t$this->m_sDefaultLanguage = 'EN US';\n\t\t$this->m_sAllowedLoginTypes = DEFAULT_ALLOWED_LOGIN_TYPES;\n\t\t$this->m_sExtAuthVariable = DEFAULT_EXT_AUTH_VARIABLE;\n\t\t$this->m_aCharsets = array();\n\t\t$this->m_bQueryCacheEnabled = DEFAULT_QUERY_CACHE_ENABLED;\n\n\t\t//define default encryption params according to php install\n\t\t$aEncryptParams = SimpleCrypt::GetNewDefaultParams();\n\t\t$this->m_sEncryptionLibrary = isset($aEncryptParams['lib']) ? $aEncryptParams['lib'] : DEFAULT_ENCRYPTION_LIB;\n\t\t$this->m_sEncryptionKey= isset($aEncryptParams['key']) ? $aEncryptParams['key'] : DEFAULT_ENCRYPTION_KEY;\n\n\t\t$this->m_aModuleSettings = array();\n\n\t\tif ($bLoadConfig)\n\t\t{\n\t\t\t$this->Load($sConfigFile);\n\t\t\t$this->Verify();\n\t\t}\n\n\t\t// Application root url: set a default value, then normalize it\n\t\t/*\n\t\t * Does not work in CLI/unattended mode\n\t\t\t\t$sAppRootUrl = trim($this->Get('app_root_url'));\n\t\t\t\tif (strlen($sAppRootUrl) == 0)\n\t\t\t\t{\n\t\t\t\t\t$sAppRootUrl = utils::GetDefaultUrlAppRoot();\n\t\t\t\t}\n\t\t\t\tif (substr($sAppRootUrl, -1, 1) != '/')\n\t\t\t\t{\n\t\t\t\t\t$sAppRootUrl .= '/';\n\t\t\t\t}\n\t\t\t\t$this->Set('app_root_url', $sAppRootUrl);\n\t\t */\n\t}\n\n    /**\n     * @param string $sPurpose\n     * @param string $sFileName\n     *\n     * @throws \\ConfigException\n     */\n    protected function CheckFile($sPurpose, $sFileName)\n\t{\n\t\tif (!file_exists($sFileName))\n\t\t{\n\t\t\tthrow new ConfigException(\"Could not find $sPurpose file\", array('file' => $sFileName));\n\t\t}\n\t\tif (!is_readable($sFileName))\n\t\t{\n\t\t\tthrow new ConfigException(\"Could not read $sPurpose file (the file exists but cannot be read). Do you have the rights to access this file?\",\n\t\t\t\tarray('file' => $sFileName));\n\t\t}\n\t}\n\n\t/**\n\t * @param string $sConfigFile\n\t *\n\t * @throws \\ConfigException\n\t * @throws \\CoreException\n\t */\n\tprotected function Load($sConfigFile)\n\t{\n\t\t$this->CheckFile('configuration', $sConfigFile);\n\n\t\t$sConfigCode = trim(file_get_contents($sConfigFile));\n\n\t\t// Variables created when doing an eval() on the config file\n\t\t/** @var array $MySettings */\n\t\t$MySettings = null;\n\t\t/** @var array $MyModuleSettings */\n\t\t$MyModuleSettings = null;\n\t\t/** @var array $MyModules */\n\t\t$MyModules = null;\n\n\t\t// This does not work on several lines\n\t\t// preg_match('/^<\\\\?php(.*)\\\\?'.'>$/', $sConfigCode, $aMatches)...\n\t\t// So, I've implemented a solution suggested in the PHP doc (search for phpWrapper)\n\t\ttry\n\t\t{\n\t\t\tob_start();\n\t\t\teval('?'.'>'.trim($sConfigCode));\n\t\t\t$sNoise = trim(ob_get_contents());\n\t\t\tob_end_clean();\n\t\t}\n\t\tcatch (Exception $e)\n\t\t{\n\t\t\t// well, never reach in case of parsing error :-(\n\t\t\t// will be improved in PHP 6 ?\n\t\t\tthrow new ConfigException('Error in configuration file',\n\t\t\t\tarray('file' => $sConfigFile, 'error' => $e->getMessage()));\n\t\t}\n\t\tcatch(Error $e)\n\t\t{\n\t\t    // PHP 7\n\t\t    throw new ConfigException('Error in configuration file',\n\t\t        array('file' => $sConfigFile, 'error' => $e->getMessage().' at line '.$e->getLine()));\n\t\t}\n\t\tif (strlen($sNoise) > 0)\n\t\t{\n\t\t\t// Note: sNoise is an html output, but so far it was ok for me (e.g. showing the entire call stack) \n\t\t\tthrow new ConfigException('Syntax error in configuration file',\n\t\t\t\tarray('file' => $sConfigFile, 'error' => '<tt>'.htmlentities($sNoise, ENT_QUOTES, 'UTF-8').'</tt>'));\n\t\t}\n\n\t\tif (!isset($MySettings) || !is_array($MySettings))\n\t\t{\n\t\t\tthrow new ConfigException('Missing array in configuration file',\n\t\t\t\tarray('file' => $sConfigFile, 'expected' => '$MySettings'));\n\t\t}\n\n\t\tif (!array_key_exists('addons', $MyModules))\n\t\t{\n\t\t\tthrow new ConfigException('Missing item in configuration file',\n\t\t\t\tarray('file' => $sConfigFile, 'expected' => '$MyModules[\\'addons\\']'));\n\t\t}\n\t\tif (!array_key_exists('user rights', $MyModules['addons']))\n\t\t{\n\t\t\t// Add one, by default\n\t\t\t$MyModules['addons']['user rights'] = '/addons/userrights/userrightsnull.class.inc.php';\n\t\t}\n\n\t\t$this->m_aAddons = $MyModules['addons'];\n\n\t\tforeach ($MySettings as $sPropCode => $rawvalue)\n\t\t{\n\t\t\tif ($this->IsProperty($sPropCode))\n\t\t\t{\n\t\t\t\tif (is_string($rawvalue))\n\t\t\t\t{\n\t\t\t\t\t$value = trim($rawvalue);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$value = $rawvalue;\n\t\t\t\t}\n\t\t\t\t$this->Set($sPropCode, $value, $sConfigFile);\n\t\t\t}\n\t\t}\n\n\t\t$this->m_bLogGlobal = isset($MySettings['log_global']) ? (bool)trim($MySettings['log_global']) : DEFAULT_LOG_GLOBAL;\n\t\t$this->m_bLogNotification = isset($MySettings['log_notification']) ? (bool)trim($MySettings['log_notification']) : DEFAULT_LOG_NOTIFICATION;\n\t\t$this->m_bLogIssue = isset($MySettings['log_issue']) ? (bool)trim($MySettings['log_issue']) : DEFAULT_LOG_ISSUE;\n\t\t$this->m_bLogWebService = isset($MySettings['log_web_service']) ? (bool)trim($MySettings['log_web_service']) : DEFAULT_LOG_WEB_SERVICE;\n\t\t$this->m_bQueryCacheEnabled = isset($MySettings['query_cache_enabled']) ? (bool)trim($MySettings['query_cache_enabled']) : DEFAULT_QUERY_CACHE_ENABLED;\n\n\t\t$this->m_iMinDisplayLimit = isset($MySettings['min_display_limit']) ? trim($MySettings['min_display_limit']) : DEFAULT_MIN_DISPLAY_LIMIT;\n\t\t$this->m_iMaxDisplayLimit = isset($MySettings['max_display_limit']) ? trim($MySettings['max_display_limit']) : DEFAULT_MAX_DISPLAY_LIMIT;\n\t\t$this->m_iStandardReloadInterval = isset($MySettings['standard_reload_interval']) ? trim($MySettings['standard_reload_interval']) : DEFAULT_STANDARD_RELOAD_INTERVAL;\n\t\t$this->m_iFastReloadInterval = isset($MySettings['fast_reload_interval']) ? trim($MySettings['fast_reload_interval']) : DEFAULT_FAST_RELOAD_INTERVAL;\n\t\t$this->m_bSecureConnectionRequired = isset($MySettings['secure_connection_required']) ? (bool)trim($MySettings['secure_connection_required']) : DEFAULT_SECURE_CONNECTION_REQUIRED;\n\n\t\t$this->m_aModuleSettings = isset($MyModuleSettings) ? $MyModuleSettings : array();\n\n\t\t$this->m_sDefaultLanguage = isset($MySettings['default_language']) ? trim($MySettings['default_language']) : 'EN US';\n\t\t$this->m_sAllowedLoginTypes = isset($MySettings['allowed_login_types']) ? trim($MySettings['allowed_login_types']) : DEFAULT_ALLOWED_LOGIN_TYPES;\n\t\t$this->m_sExtAuthVariable = isset($MySettings['ext_auth_variable']) ? trim($MySettings['ext_auth_variable']) : DEFAULT_EXT_AUTH_VARIABLE;\n\t\t$this->m_sEncryptionKey = isset($MySettings['encryption_key']) ? trim($MySettings['encryption_key']) : $this->m_sEncryptionKey;\n\t\t$this->m_sEncryptionLibrary = isset($MySettings['encryption_library']) ? trim($MySettings['encryption_library']) : $this->m_sEncryptionLibrary;\n\t\t$this->m_aCharsets = isset($MySettings['csv_import_charsets']) ? $MySettings['csv_import_charsets'] : array();\n\t}\n\n\tprotected function Verify()\n\t{\n\t\t// Files are verified later on, just before using them -see MetaModel::Plugin()\n\t\t// (we have their final path at that point)\n\t}\n\n\tpublic function GetModuleSetting($sModule, $sProperty, $defaultvalue = null)\n\t{\n\t\tif (isset($this->m_aModuleSettings[$sModule][$sProperty]))\n\t\t{\n\t\t\treturn $this->m_aModuleSettings[$sModule][$sProperty];\n\t\t}\n\n\t\t// Fall back to the predefined XML parameter, if any\n\t\treturn $this->GetModuleParameter($sModule, $sProperty, $defaultvalue);\n\t}\n\n    /**\n     * @param string $sModule\n     * @param string $sProperty\n     * @param mixed|null $defaultvalue\n     *\n     * @return mixed|null\n     */\n    public function GetModuleParameter($sModule, $sProperty, $defaultvalue = null)\n\t{\n\t\t$ret = $defaultvalue;\n\t\tif (class_exists('ModulesXMLParameters'))\n\t\t{\n\t\t\t$aAllParams = ModulesXMLParameters::GetData($sModule);\n\t\t\tif (array_key_exists($sProperty, $aAllParams))\n\t\t\t{\n\t\t\t\t$ret = $aAllParams[$sProperty];\n\t\t\t}\n\t\t}\n\n\t\treturn $ret;\n\t}\n\n\tpublic function SetModuleSetting($sModule, $sProperty, $value)\n\t{\n\t\t$this->m_aModuleSettings[$sModule][$sProperty] = $value;\n\t}\n\n\tpublic function GetAddons()\n\t{\n\t\treturn $this->m_aAddons;\n\t}\n\n\tpublic function SetAddons($aAddons)\n\t{\n\t\t$this->m_aAddons = $aAddons;\n\t}\n\n\t/**\n\t * @return string\n\t *\n\t * @deprecated 2.5 will be removed in 2.6\n\t * @see Config::Get() as a replacement\n\t */\n\tpublic function GetDBHost()\n\t{\n\t\treturn $this->Get('db_host');\n\t}\n\n\t/**\n\t * @return string\n\t *\n\t * @deprecated 2.5 will be removed in 2.6\n\t * @see Config::Get() as a replacement\n\t */\n\tpublic function GetDBName()\n\t{\n\t\treturn $this->Get('db_name');\n\t}\n\n\t/**\n\t * @return string\n\t *\n\t * @deprecated 2.5 will be removed in 2.6\n\t * @see Config::Get() as a replacement\n\t */\n\tpublic function GetDBSubname()\n\t{\n\t\treturn $this->Get('db_subname');\n\t}\n\n\t/**\n\t * @return string\n\t *\n\t * @deprecated 2.5 will be removed in 2.6 N\u00b01001 utf8mb4 switch\n\t * @see Config::DEFAULT_CHARACTER_SET\n\t */\n\tpublic function GetDBCharacterSet()\n\t{\n\t\treturn DEFAULT_CHARACTER_SET;\n\t}\n\n\t/**\n\t * @return string\n\t *\n\t * @deprecated 2.5 will be removed in 2.6 N\u00b01001 utf8mb4 switch\n\t * @see Config::DEFAULT_COLLATION\n\t */\n\tpublic function GetDBCollation()\n\t{\n\t\treturn DEFAULT_COLLATION;\n\t}\n\n\t/**\n\t * @return string\n\t *\n\t * @deprecated 2.5 will be removed in 2.6\n\t * @see Config::Get() as a replacement\n\t */\n\tpublic function GetDBUser()\n\t{\n\t\treturn $this->Get('db_user');\n\t}\n\n\t/**\n\t * @return string\n\t *\n\t * @deprecated 2.5 will be removed in 2.6\n\t * @see Config::Get() as a replacement\n\t */\n\tpublic function GetDBPwd()\n\t{\n\t\treturn $this->Get('db_pwd');\n\t}\n\n\tpublic function GetLogGlobal()\n\t{\n\t\treturn $this->m_bLogGlobal;\n\t}\n\n\tpublic function GetLogNotification()\n\t{\n\t\treturn $this->m_bLogNotification;\n\t}\n\n\tpublic function GetLogIssue()\n\t{\n\t\treturn $this->m_bLogIssue;\n\t}\n\n\tpublic function GetLogWebService()\n\t{\n\t\treturn $this->m_bLogWebService;\n\t}\n\n\tpublic function GetLogQueries()\n\t{\n\t\treturn false;\n\t}\n\n\tpublic function GetQueryCacheEnabled()\n\t{\n\t\treturn $this->m_bQueryCacheEnabled;\n\t}\n\n\tpublic function GetMinDisplayLimit()\n\t{\n\t\treturn $this->m_iMinDisplayLimit;\n\t}\n\n\tpublic function GetMaxDisplayLimit()\n\t{\n\t\treturn $this->m_iMaxDisplayLimit;\n\t}\n\n\tpublic function GetStandardReloadInterval()\n\t{\n\t\treturn $this->m_iStandardReloadInterval;\n\t}\n\n\tpublic function GetFastReloadInterval()\n\t{\n\t\treturn $this->m_iFastReloadInterval;\n\t}\n\n\tpublic function GetSecureConnectionRequired()\n\t{\n\t\treturn $this->m_bSecureConnectionRequired;\n\t}\n\n\tpublic function GetDefaultLanguage()\n\t{\n\t\treturn $this->m_sDefaultLanguage;\n\t}\n\n\tpublic function GetEncryptionKey()\n\t{\n\t\treturn $this->m_sEncryptionKey;\n\t}\n\n\tpublic function GetEncryptionLibrary()\n\t{\n\t\treturn $this->m_sEncryptionLibrary;\n\t}\n\n\tpublic function GetAllowedLoginTypes()\n\t{\n\t\treturn explode('|', $this->m_sAllowedLoginTypes);\n\t}\n\n\tpublic function GetExternalAuthenticationVariable()\n\t{\n\t\treturn $this->m_sExtAuthVariable;\n\t}\n\n\tpublic function GetCSVImportCharsets()\n\t{\n\t\treturn $this->m_aCharsets;\n\t}\n\n\tpublic function SetLogGlobal($iLogGlobal)\n\t{\n\t\t$this->m_iLogGlobal = $iLogGlobal;\n\t}\n\n\tpublic function SetLogNotification($iLogNotification)\n\t{\n\t\t$this->m_iLogNotification = $iLogNotification;\n\t}\n\n\tpublic function SetLogIssue($iLogIssue)\n\t{\n\t\t$this->m_iLogIssue = $iLogIssue;\n\t}\n\n\tpublic function SetLogWebService($iLogWebService)\n\t{\n\t\t$this->m_iLogWebService = $iLogWebService;\n\t}\n\n\tpublic function SetMinDisplayLimit($iMinDisplayLimit)\n\t{\n\t\t$this->m_iMinDisplayLimit = $iMinDisplayLimit;\n\t}\n\n\tpublic function SetMaxDisplayLimit($iMaxDisplayLimit)\n\t{\n\t\t$this->m_iMaxDisplayLimit = $iMaxDisplayLimit;\n\t}\n\n\tpublic function SetStandardReloadInterval($iStandardReloadInterval)\n\t{\n\t\t$this->m_iStandardReloadInterval = $iStandardReloadInterval;\n\t}\n\n\tpublic function SetFastReloadInterval($iFastReloadInterval)\n\t{\n\t\t$this->m_iFastReloadInterval = $iFastReloadInterval;\n\t}\n\n\tpublic function SetSecureConnectionRequired($bSecureConnectionRequired)\n\t{\n\t\t$this->m_bSecureConnectionRequired = $bSecureConnectionRequired;\n\t}\n\n\tpublic function SetDefaultLanguage($sLanguageCode)\n\t{\n\t\t$this->m_sDefaultLanguage = $sLanguageCode;\n\t}\n\n\tpublic function SetAllowedLoginTypes($aAllowedLoginTypes)\n\t{\n\t\t$this->m_sAllowedLoginTypes = implode('|', $aAllowedLoginTypes);\n\t}\n\n\tpublic function SetExternalAuthenticationVariable($sExtAuthVariable)\n\t{\n\t\t$this->m_sExtAuthVariable = $sExtAuthVariable;\n\t}\n\n\tpublic function SetEncryptionKey($sKey)\n\t{\n\t\t$this->m_sEncryptionKey = $sKey;\n\t}\n\n\tpublic function SetCSVImportCharsets($aCharsets)\n\t{\n\t\t$this->m_aCharsets = $aCharsets;\n\t}\n\n\tpublic function AddCSVImportCharset($sIconvCode, $sDisplayName)\n\t{\n\t\t$this->m_aCharsets[$sIconvCode] = $sDisplayName;\n\t}\n\n\tpublic function GetLoadedFile()\n\t{\n\t\tif (is_null($this->m_sFile))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn $this->m_sFile;\n\t\t}\n\t}\n\n\t/**\n\t * Render the configuration as an associative array\n\t *\n\t * @return array\n\t */\n\tpublic function ToArray()\n\t{\n\t\t$aSettings = array();\n\t\tforeach ($this->m_aSettings as $sPropCode => $aSettingInfo)\n\t\t{\n\t\t\t$aSettings[$sPropCode] = $aSettingInfo['value'];\n\t\t}\n\t\t$aSettings['log_global'] = $this->m_bLogGlobal;\n\t\t$aSettings['log_notification'] = $this->m_bLogNotification;\n\t\t$aSettings['log_issue'] = $this->m_bLogIssue;\n\t\t$aSettings['log_web_service'] = $this->m_bLogWebService;\n\t\t$aSettings['query_cache_enabled'] = $this->m_bQueryCacheEnabled;\n\t\t$aSettings['min_display_limit'] = $this->m_iMinDisplayLimit;\n\t\t$aSettings['max_display_limit'] = $this->m_iMaxDisplayLimit;\n\t\t$aSettings['standard_reload_interval'] = $this->m_iStandardReloadInterval;\n\t\t$aSettings['fast_reload_interval'] = $this->m_iFastReloadInterval;\n\t\t$aSettings['secure_connection_required'] = $this->m_bSecureConnectionRequired;\n\t\t$aSettings['default_language'] = $this->m_sDefaultLanguage;\n\t\t$aSettings['allowed_login_types'] = $this->m_sAllowedLoginTypes;\n\t\t$aSettings['ext_auth_variable'] = $this->m_sExtAuthVariable;\n\t\t$aSettings['encryption_key'] = $this->m_sEncryptionKey;\n\t\t$aSettings['encryption_library'] = $this->m_sEncryptionLibrary;\n\t\t$aSettings['csv_import_charsets'] = $this->m_aCharsets;\n\n\t\tforeach ($this->m_aModuleSettings as $sModule => $aProperties)\n\t\t{\n\t\t\tforeach ($aProperties as $sProperty => $value)\n\t\t\t{\n\t\t\t\t$aSettings['module_settings'][$sModule][$sProperty] = $value;\n\t\t\t}\n\t\t}\n\t\tforeach ($this->m_aAddons as $sKey => $sFile)\n\t\t{\n\t\t\t$aSettings['addon_list'][] = $sFile;\n\t\t}\n\n\t\treturn $aSettings;\n\t}\n\n    /**\n     * Write the configuration to a file (php format) that can be reloaded later\n     * By default write to the same file that was specified when constructing the object\n     *\n     * @param string $sFileName string Name of the file to write to (emtpy to write to the same file)\n     *\n     * @return boolean True otherwise throws an Exception\n\t *\n     * @throws \\ConfigException\n     */\n\tpublic function WriteToFile($sFileName = '')\n\t{\n\t\tif (empty($sFileName))\n\t\t{\n\t\t\t$sFileName = $this->m_sFile;\n\t\t}\n\t\t$hFile = @fopen($sFileName, 'w');\n\t\tif ($hFile !== false)\n\t\t{\n\t\t\tfwrite($hFile, \"<?php\\n\");\n\t\t\tfwrite($hFile, \"\\n/**\\n\");\n\t\t\tfwrite($hFile, \" *\\n\");\n\t\t\tfwrite($hFile, \" * Configuration file, generated by the \".ITOP_APPLICATION.\" configuration wizard\\n\");\n\t\t\tfwrite($hFile, \" *\\n\");\n\t\t\tfwrite($hFile,\n\t\t\t\t\" * The file is used in MetaModel::LoadConfig() which does all the necessary initialization job\\n\");\n\t\t\tfwrite($hFile, \" *\\n\");\n\t\t\tfwrite($hFile, \" */\\n\");\n\n\t\t\t$aConfigSettings = $this->m_aSettings;\n\n\t\t\t// Old fashioned boolean settings\n\t\t\t$aBoolValues = array(\n\t\t\t\t'log_global' => $this->m_bLogGlobal,\n\t\t\t\t'log_notification' => $this->m_bLogNotification,\n\t\t\t\t'log_issue' => $this->m_bLogIssue,\n\t\t\t\t'log_web_service' => $this->m_bLogWebService,\n\t\t\t\t'query_cache_enabled' => $this->m_bQueryCacheEnabled,\n\t\t\t\t'secure_connection_required' => $this->m_bSecureConnectionRequired,\n\t\t\t);\n\t\t\tforeach ($aBoolValues as $sKey => $bValue)\n\t\t\t{\n\t\t\t\t$aConfigSettings[$sKey] = array(\n\t\t\t\t\t'show_in_conf_sample' => true,\n\t\t\t\t\t'type' => 'bool',\n\t\t\t\t\t'value' => $bValue,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Old fashioned integer settings\n\t\t\t$aIntValues = array(\n\t\t\t\t'fast_reload_interval' => $this->m_iFastReloadInterval,\n\t\t\t\t'max_display_limit' => $this->m_iMaxDisplayLimit,\n\t\t\t\t'min_display_limit' => $this->m_iMinDisplayLimit,\n\t\t\t\t'standard_reload_interval' => $this->m_iStandardReloadInterval,\n\t\t\t);\n\t\t\tforeach ($aIntValues as $sKey => $iValue)\n\t\t\t{\n\t\t\t\t$aConfigSettings[$sKey] = array(\n\t\t\t\t\t'show_in_conf_sample' => true,\n\t\t\t\t\t'type' => 'integer',\n\t\t\t\t\t'value' => $iValue,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Old fashioned remaining values\n\t\t\t$aOtherValues = array(\n\t\t\t\t'default_language' => $this->m_sDefaultLanguage,\n\t\t\t\t'allowed_login_types' => $this->m_sAllowedLoginTypes,\n\t\t\t\t'ext_auth_variable' => $this->m_sExtAuthVariable,\n\t\t\t\t'encryption_key' => $this->m_sEncryptionKey,\n\t\t\t\t'encryption_library' => $this->m_sEncryptionLibrary,\n\t\t\t\t'csv_import_charsets' => $this->m_aCharsets,\n\t\t\t);\n\t\t\tforeach ($aOtherValues as $sKey => $value)\n\t\t\t{\n\t\t\t\t$aConfigSettings[$sKey] = array(\n\t\t\t\t\t'show_in_conf_sample' => true,\n\t\t\t\t\t'type' => is_string($value) ? 'string' : 'mixed',\n\t\t\t\t\t'value' => $value,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tksort($aConfigSettings);\n\t\t\tfwrite($hFile, \"\\$MySettings = array(\\n\");\n\t\t\tforeach ($aConfigSettings as $sPropCode => $aSettingInfo)\n\t\t\t{\n\t\t\t\t// Write all values that are either always visible or present in the cloned config file\n\t\t\t\tif ($aSettingInfo['show_in_conf_sample'] || (!empty($aSettingInfo['source_of_value']) && ($aSettingInfo['source_of_value'] != 'unknown')))\n\t\t\t\t{\n\t\t\t\t\t$sType = $aSettingInfo['type'];\n\t\t\t\t\tswitch ($sType)\n\t\t\t\t\t{\n\t\t\t\t\t\tcase 'bool':\n\t\t\t\t\t\t\t$sSeenAs = $aSettingInfo['value'] ? 'true' : 'false';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$sSeenAs = self::PrettyVarExport($aSettingInfo['value'], \"\\t\");\n\t\t\t\t\t}\n\t\t\t\t\tfwrite($hFile, \"\\n\");\n\t\t\t\t\tif (isset($aSettingInfo['description']))\n\t\t\t\t\t{\n\t\t\t\t\t\tfwrite($hFile, \"\\t// $sPropCode: {$aSettingInfo['description']}\\n\");\n\t\t\t\t\t}\n\t\t\t\t\tif (isset($aSettingInfo['default']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$default = $aSettingInfo['default'];\n\t\t\t\t\t\tif ($aSettingInfo['type'] == 'bool')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$default = $default ? 'true' : 'false';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfwrite($hFile,\n\t\t\t\t\t\t\t\"\\t//\\tdefault: \".self::PrettyVarExport($aSettingInfo['default'], \"\\t//\\t\\t\", true).\"\\n\");\n\t\t\t\t\t}\n\t\t\t\t\tfwrite($hFile, \"\\t'$sPropCode' => $sSeenAs,\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tfwrite($hFile, \");\\n\");\n\n\t\t\tfwrite($hFile, \"\\n\");\n\t\t\tfwrite($hFile, \"/**\\n *\\n * Modules specific settings\\n *\\n */\\n\");\n\t\t\tfwrite($hFile, \"\\$MyModuleSettings = array(\\n\");\n\t\t\tforeach ($this->m_aModuleSettings as $sModule => $aProperties)\n\t\t\t{\n\t\t\t\tfwrite($hFile, \"\\t'$sModule' => array (\\n\");\n\t\t\t\tforeach ($aProperties as $sProperty => $value)\n\t\t\t\t{\n\t\t\t\t\t$sNiceExport = self::PrettyVarExport($value, \"\\t\\t\");\n\t\t\t\t\tfwrite($hFile, \"\\t\\t'$sProperty' => $sNiceExport,\\n\");\n\t\t\t\t}\n\t\t\t\tfwrite($hFile, \"\\t),\\n\");\n\t\t\t}\n\t\t\tfwrite($hFile, \");\\n\");\n\n\t\t\tfwrite($hFile, \"\\n/**\\n\");\n\t\t\tfwrite($hFile, \" *\\n\");\n\t\t\tfwrite($hFile, \" * Data model modules to be loaded. Names are specified as relative paths\\n\");\n\t\t\tfwrite($hFile, \" *\\n\");\n\t\t\tfwrite($hFile, \" */\\n\");\n\t\t\tfwrite($hFile, \"\\$MyModules = array(\\n\");\n\t\t\tfwrite($hFile, \"\\t'addons' => array (\\n\");\n\t\t\tforeach ($this->m_aAddons as $sKey => $sFile)\n\t\t\t{\n\t\t\t\tfwrite($hFile, \"\\t\\t'$sKey' => '$sFile',\\n\");\n\t\t\t}\n\t\t\tfwrite($hFile, \"\\t),\\n\");\n\t\t\tfwrite($hFile, \");\\n\");\n\t\t\tfwrite($hFile, '?'.'>'); // Avoid perturbing the syntax highlighting !\n\n\t\t\treturn fclose($hFile);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new ConfigException(\"Could not write to configuration file\", array('file' => $sFileName));\n\t\t}\n\t}\n\n    /**\n     * Helper function to initialize a configuration from the page arguments\n     *\n     * @param array $aParamValues\n     * @param string|null $sModulesDir\n     * @param bool $bPreserveModuleSettings\n     *\n     * @throws \\Exception\n     * @throws \\CoreException\n     */\n\tpublic function UpdateFromParams($aParamValues, $sModulesDir = null, $bPreserveModuleSettings = false)\n\t{\n\t\tif (isset($aParamValues['application_path']))\n\t\t{\n\t\t\t$this->Set('app_root_url', $aParamValues['application_path']);\n\t\t}\n\t\tif (isset($aParamValues['graphviz_path']))\n\t\t{\n\t\t\t$this->Set('graphviz_path', $aParamValues['graphviz_path']);\n\t\t}\n\t\tif (isset($aParamValues['mode']) && isset($aParamValues['language']))\n\t\t{\n\t\t\tif (($aParamValues['mode'] == 'install') || $this->GetDefaultLanguage() == '')\n\t\t\t{\n\t\t\t\t$this->SetDefaultLanguage($aParamValues['language']);\n\t\t\t}\n\t\t}\n\t\tif (isset($aParamValues['db_server']))\n\t\t{\n\t\t\t$this->Set('db_host', $aParamValues['db_server']);\n\t\t\t$this->Set('db_user', $aParamValues['db_user']);\n\t\t\t$this->Set('db_pwd', $aParamValues['db_pwd']);\n\t\t\t$sDBName = $aParamValues['db_name'];\n\t\t\tif ($sDBName == '')\n\t\t\t{\n\t\t\t\t// Todo - obsolete after the transition to the new setup (2.0) is complete (WARNING: used by the designer)\n\t\t\t\tif (isset($aParamValues['new_db_name']))\n\t\t\t\t{\n\t\t\t\t\t$sDBName = $aParamValues['new_db_name'];\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->Set('db_name', $sDBName);\n\t\t\t$this->Set('db_subname', $aParamValues['db_prefix']);\n\n\t\t\t$bDbTlsEnabled = (bool) $aParamValues['db_tls_enabled'];\n\t\t\tif ($bDbTlsEnabled)\n\t\t\t{\n\t\t\t\t$this->Set('db_tls.enabled', $bDbTlsEnabled, 'UpdateFromParams');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// disabled : we don't want parameter in the file\n\t\t\t\t$this->Set('db_tls.enabled', $bDbTlsEnabled, null);\n\t\t\t}\n\t\t\t$sDbTlsCa = $bDbTlsEnabled ? $aParamValues['db_tls_ca'] : null;\n\t\t\tif (isset($sDbTlsCa) && !empty($sDbTlsCa)) {\n\t\t\t\t$this->Set('db_tls.ca', $sDbTlsCa, 'UpdateFromParams');\n\t\t\t} else {\n\t\t\t\t// empty parameter : we don't want it in the file\n\t\t\t\t$this->Set('db_tls.ca', null, null);\n\t\t\t}\n\t\t}\n\n\t\tif (isset($aParamValues['selected_modules']))\n\t\t{\n\t\t\t$aSelectedModules = explode(',', $aParamValues['selected_modules']);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$aSelectedModules = null;\n\t\t}\n\t\t$this->UpdateIncludes($sModulesDir, $aSelectedModules);\n\n\t\tif (isset($aParamValues['source_dir']))\n\t\t{\n\t\t\t$this->Set('source_dir', $aParamValues['source_dir']);\n\t\t}\n\t}\n\n\t/**\n\t * Helper function to rebuild the default configuration and the list of includes from a directory and a list of\n\t * selected modules\n\t *\n\t * @param string $sModulesDir The relative path to the directory to scan for modules (typically the 'env-xxx'\n\t *     directory resulting from the compilation)\n\t * @param array $aSelectedModules An array of selected modules' identifiers. If null all modules found will be\n\t *     considered as installed\n\t *\n\t * @throws Exception\n\t */\n\tpublic function UpdateIncludes($sModulesDir, $aSelectedModules = null)\n\t{\n\t\tif (!is_null($sModulesDir))\n\t\t{\n\t\t\t// Initialize the arrays below with default values for the application...\n\t\t\t$oEmptyConfig = new Config('dummy_file', false); // Do NOT load any config file, just set the default values\n\t\t\t$aAddOns = $oEmptyConfig->GetAddOns();\n\n\t\t\t$aModules = ModuleDiscovery::GetAvailableModules(array(APPROOT.$sModulesDir));\n\t\t\tforeach ($aModules as $sModuleId => $aModuleInfo)\n\t\t\t{\n\t\t\t\tlist ($sModuleName, $sModuleVersion) = ModuleDiscovery::GetModuleName($sModuleId);\n\t\t\t\tif (is_null($aSelectedModules) || in_array($sModuleName, $aSelectedModules))\n\t\t\t\t{\n\t\t\t\t\tif (isset($aModuleInfo['settings']))\n\t\t\t\t\t{\n\t\t\t\t\t\tlist ($sName, $sVersion) = ModuleDiscovery::GetModuleName($sModuleId);\n\t\t\t\t\t\tforeach ($aModuleInfo['settings'] as $sProperty => $value)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (isset($this->m_aModuleSettings[$sName][$sProperty]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Do nothing keep the original value\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->SetModuleSetting($sName, $sProperty, $value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (isset($aModuleInfo['installer']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$sModuleInstallerClass = $aModuleInfo['installer'];\n\t\t\t\t\t\tif (!class_exists($sModuleInstallerClass))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthrow new Exception(\"Wrong installer class: '$sModuleInstallerClass' is not a PHP class - Module: \".$aModuleInfo['label']);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!is_subclass_of($sModuleInstallerClass, 'ModuleInstallerAPI'))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthrow new Exception(\"Wrong installer class: '$sModuleInstallerClass' is not derived from 'ModuleInstallerAPI' - Module: \".$aModuleInfo['label']);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$aCallSpec = array($sModuleInstallerClass, 'BeforeWritingConfig');\n\t\t\t\t\t\tcall_user_func_array($aCallSpec, array($this));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->SetAddOns($aAddOns);\n\t\t}\n\t}\n\n    /**\n     * Helper: for an array of string, change the prefix when found\n     *\n     * @param array $aStrings\n     * @param string $sSearchPrefix\n     * @param string $sNewPrefix\n     */\n\tprotected static function ChangePrefix(&$aStrings, $sSearchPrefix, $sNewPrefix)\n\t{\n\t\tforeach ($aStrings as &$sFile)\n\t\t{\n\t\t\tif (substr($sFile, 0, strlen($sSearchPrefix)) == $sSearchPrefix)\n\t\t\t{\n\t\t\t\t$sFile = $sNewPrefix.substr($sFile, strlen($sSearchPrefix));\n\t\t\t}\n\t\t}\n\t}\n\n    /**\n     * Obsolete: kept only for backward compatibility of the Toolkit\n     * Quick and dirty way to clone a config file into another environment\n     *\n     * @param string $sSourceEnv\n     * @param string $sTargetEnv\n     */\n\tpublic function ChangeModulesPath($sSourceEnv, $sTargetEnv)\n\t{\n\t\t// Now does nothing since the includes are built into the environment itself\n\t}\n\n\t/**\n\t * Pretty format a var_export'ed value so that (if possible) the identation is preserved on every line\n\t *\n\t * @param mixed $value The value to export\n\t * @param string $sIndentation The string to use to indent the text\n\t * @param bool $bForceIndentation Forces the identation (enven if it breaks/changes an eval, for example to ouput a\n\t *     value inside a comment)\n\t *\n\t * @return string The indented export string\n\t */\n\tprotected static function PrettyVarExport($value, $sIndentation, $bForceIndentation = false)\n\t{\n\t\t$sExport = var_export($value, true);\n\t\t$sNiceExport = str_replace(array(\"\\r\\n\", \"\\n\", \"\\r\"), \"\\n\".$sIndentation, trim($sExport));\n\t\tif (!$bForceIndentation)\n\t\t{\n\t\t\t/** @var array $aImported */\n\t\t\t$aImported = null;\n\t\t\teval('$aImported='.$sNiceExport.';');\n\t\t\t// Check if adding the identations at the beginning of each line\n\t\t\t// did not modify the values (in case of a string containing a line break)\n\t\t\tif ($aImported != $value)\n\t\t\t{\n\t\t\t\t$sNiceExport = $sExport;\n\t\t\t}\n\t\t}\n\n\t\treturn $sNiceExport;\n\t}\n\n}\n", "<?php\n\n// Copyright (C) 2010-2018 Combodo SARL\n//\n//   This file is part of iTop.\n//\n//   iTop is free software; you can redistribute it and/or modify\n//   it under the terms of the GNU Affero General Public License as published by\n//   the Free Software Foundation, either version 3 of the License, or\n//   (at your option) any later version.\n//\n//   iTop is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n//\n//   You should have received a copy of the GNU Affero General Public License\n//   along with iTop. If not, see <http://www.gnu.org/licenses/>\n\nnamespace Combodo\\iTop\\Portal\\Controller;\n\nuse Silex\\Application;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Exception;\nuse FileUploadException;\nuse utils;\nuse Dict;\nuse IssueLog;\nuse MetaModel;\nuse DBObject;\nuse DBSearch;\nuse DBObjectSearch;\nuse FalseExpression;\nuse BinaryExpression;\nuse FieldExpression;\nuse VariableExpression;\nuse ListExpression;\nuse ScalarExpression;\nuse DBObjectSet;\nuse AttributeEnum;\nuse AttributeImage;\nuse AttributeFinalClass;\nuse AttributeFriendlyName;\nuse UserRights;\nuse iPopupMenuExtension;\nuse URLButtonItem;\nuse JSButtonItem;\nuse Combodo\\iTop\\Portal\\Helper\\ApplicationHelper;\nuse Combodo\\iTop\\Portal\\Helper\\SecurityHelper;\nuse Combodo\\iTop\\Portal\\Helper\\ContextManipulatorHelper;\nuse Combodo\\iTop\\Portal\\Form\\ObjectFormManager;\nuse Combodo\\iTop\\Renderer\\Bootstrap\\BsFormRenderer;\n\n/**\n * Class ObjectController\n *\n * Controller to handle basic view / edit / create of cmdbAbstractObjectClass ManageBrickController\n *\n * @package Combodo\\iTop\\Portal\\Controller\n * @author Guillaume Lajarige <guillaume.lajarige@combodo.com>\n * @since 2.3.0\n */\nclass ObjectController extends AbstractController\n{\n\n\tconst ENUM_MODE_VIEW = 'view';\n\tconst ENUM_MODE_EDIT = 'edit';\n\tconst ENUM_MODE_CREATE = 'create';\n\n\tconst DEFAULT_PAGE_NUMBER = 1;\n\tconst DEFAULT_LIST_LENGTH = 10;\n\n    /**\n     * Displays an cmdbAbstractObject if the connected user is allowed to.\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param string $sObjectClass (Class must be instance of cmdbAbstractObject)\n     * @param string $sObjectId\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\n     * @throws \\Exception\n     * @throws \\ArchivedObjectException\n     * @throws \\CoreException\n     * @throws \\DictExceptionMissingString\n     */\n\tpublic function ViewAction(Request $oRequest, Application $oApp, $sObjectClass, $sObjectId)\n\t{\n\t\t// Checking parameters\n\t\tif ($sObjectClass === '' || $sObjectId === '')\n\t\t{\n\t\t\tIssueLog::Info(__METHOD__ . ' at line ' . __LINE__ . ' : sObjectClass and sObjectId expected, \"' . $sObjectClass . '\" and \"' . $sObjectId . '\" given.');\n\t\t\t$oApp->abort(500, Dict::Format('UI:Error:2ParametersMissing', 'class', 'id'));\n\t\t}\n\n\t\t// Checking security layers\n\t\tif (!SecurityHelper::IsActionAllowed($oApp, UR_ACTION_READ, $sObjectClass, $sObjectId))\n\t\t{\n\t\t\tIssueLog::Warning(__METHOD__ . ' at line ' . __LINE__ . ' : User #' . UserRights::GetUserId() . ' not allowed to read ' . $sObjectClass . '::' . $sObjectId . ' object.');\n\t\t\t$oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\n\t\t// Retrieving object\n\t\t$oObject = MetaModel::GetObject($sObjectClass, $sObjectId, false /* MustBeFound */, $oApp['scope_validator']->IsAllDataAllowedForScope(UserRights::ListProfiles(), $sObjectClass));\n\t\tif ($oObject === null)\n\t\t{\n\t\t\t// We should never be there as the secuirty helper makes sure that the object exists, but just in case.\n\t\t\tIssueLog::Info(__METHOD__ . ' at line ' . __LINE__ . ' : Could not load object ' . $sObjectClass . '::' . $sObjectId . '.');\n\t\t\t$oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\n\t\t$sOperation = $oApp['request_manipulator']->ReadParam('operation', '');\n\n\t\t$aData = array('sMode' => 'view');\n\t\t$aData['form'] = $this->HandleForm($oRequest, $oApp, $aData['sMode'], $sObjectClass, $sObjectId);\n\t\t$aData['form']['title'] = Dict::Format('Brick:Portal:Object:Form:View:Title', MetaModel::GetName($sObjectClass), $oObject->GetName());\n\n\t\t// Add an edit button if user is allowed\n\t\tif (SecurityHelper::IsActionAllowed($oApp, UR_ACTION_MODIFY, $sObjectClass, $sObjectId))\n\t\t{\n\t\t    $oModifyButton = new URLButtonItem(\n\t\t        'modify_object',\n                Dict::S('UI:Menu:Modify'),\n\t\t\t\t$oApp['url_generator']->generate('p_object_edit', array('sObjectClass' => $sObjectClass, 'sObjectId' => $sObjectId))\n            );\n\t\t    // Putting this one first\n\t\t    $aData['form']['buttons']['links'][] = $oModifyButton->GetMenuItem();\n\t\t}\n\n\t\t// Preparing response\n\t\tif ($oRequest->isXmlHttpRequest())\n\t\t{\n\t\t\t// We have to check whether the 'operation' parameter is defined or not in order to know if the form is required via ajax (to be displayed as a modal dialog) or if it's a lifecycle call from a existing form.\n\t\t\tif (empty($sOperation))\n\t\t\t{\n\t\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/bricks/object/modal.html.twig', $aData);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oResponse = $oApp->json($aData);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Adding brick if it was passed\n\t\t\t$sBrickId = $oApp['request_manipulator']->ReadParam('sBrickId', '');\n\t\t\tif (!empty($sBrickId))\n\t\t\t{\n\t\t\t\t$oBrick = ApplicationHelper::GetLoadedBrickFromId($oApp, $sBrickId);\n\t\t\t\tif ($oBrick !== null)\n\t\t\t\t{\n\t\t\t\t\t$aData['oBrick'] = $oBrick;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$aData['sPageTitle'] = $aData['form']['title'];\n\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/bricks/object/layout.html.twig', $aData);\n\t\t}\n\n\t\treturn $oResponse;\n\t}\n\n    /**\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param $sObjectClass\n     * @param $sObjectId\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\n     * @throws \\Exception\n     * @throws \\ArchivedObjectException\n     * @throws \\CoreException\n     * @throws \\DictExceptionMissingString\n     */\n\tpublic function EditAction(Request $oRequest, Application $oApp, $sObjectClass, $sObjectId)\n\t{\n\t\t// Checking parameters\n\t\tif ($sObjectClass === '' || $sObjectId === '')\n\t\t{\n\t\t\tIssueLog::Info(__METHOD__ . ' at line ' . __LINE__ . ' : sObjectClass and sObjectId expected, \"' . $sObjectClass . '\" and \"' . $sObjectId . '\" given.');\n\t\t\t$oApp->abort(500, Dict::Format('UI:Error:2ParametersMissing', 'class', 'id'));\n\t\t}\n\t\t\n\t\t// Checking security layers\n\t\t// Warning : This is a dirty quick fix to allow editing its own contact information\n\t\t$bAllowWrite = ($sObjectClass === 'Person' && $sObjectId == UserRights::GetContactId());\n\t\tif (!SecurityHelper::IsActionAllowed($oApp, UR_ACTION_MODIFY, $sObjectClass, $sObjectId) && !$bAllowWrite)\n\t\t{\n\t\t\tIssueLog::Warning(__METHOD__ . ' at line ' . __LINE__ . ' : User #' . UserRights::GetUserId() . ' not allowed to modify ' . $sObjectClass . '::' . $sObjectId . ' object.');\n\t\t\t$oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\n\t\t// Retrieving object\n\t\t$oObject = MetaModel::GetObject($sObjectClass, $sObjectId, false /* MustBeFound */, $oApp['scope_validator']->IsAllDataAllowedForScope(UserRights::ListProfiles(), $sObjectClass));\n\t\tif ($oObject === null)\n\t\t{\n\t\t\t// We should never be there as the secuirty helper makes sure that the object exists, but just in case.\n\t\t\tIssueLog::Info(__METHOD__ . ' at line ' . __LINE__ . ' : Could not load object ' . $sObjectClass . '::' . $sObjectId . '.');\n\t\t\t$oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\n\t\t$sOperation = $oApp['request_manipulator']->ReadParam('operation', '');\n\n\t\t$aData = array('sMode' => 'edit');\n\t\t$aData['form'] = $this->HandleForm($oRequest, $oApp, $aData['sMode'], $sObjectClass, $sObjectId);\n\t\t$aData['form']['title'] = Dict::Format('Brick:Portal:Object:Form:Edit:Title', MetaModel::GetName($sObjectClass), $aData['form']['object_name']);\n\n\t\t// Preparing response\n\t\tif ($oRequest->isXmlHttpRequest())\n\t\t{\n\t\t\t// We have to check whether the 'operation' parameter is defined or not in order to know if the form is required via ajax (to be displayed as a modal dialog) or if it's a lifecycle call from a existing form.\n\t\t\tif (empty($sOperation))\n\t\t\t{\n\t\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/bricks/object/modal.html.twig', $aData);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oResponse = $oApp->json($aData);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Adding brick if it was passed\n\t\t\t$sBrickId = $oApp['request_manipulator']->ReadParam('sBrickId', '');\n\t\t\tif (!empty($sBrickId))\n\t\t\t{\n\t\t\t\t$oBrick = ApplicationHelper::GetLoadedBrickFromId($oApp, $sBrickId);\n\t\t\t\tif ($oBrick !== null)\n\t\t\t\t{\n\t\t\t\t\t$aData['oBrick'] = $oBrick;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$aData['sPageTitle'] = $aData['form']['title'];\n\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/bricks/object/layout.html.twig', $aData);\n\t\t}\n\n\t\treturn $oResponse;\n\t}\n\n    /**\n     * Creates an cmdbAbstractObject of the $sObjectClass\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param string $sObjectClass\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\n     * @throws \\Exception\n     * @throws \\CoreException\n     * @throws \\DictExceptionMissingString\n     */\n\tpublic function CreateAction(Request $oRequest, Application $oApp, $sObjectClass)\n\t{\n\t\t// Checking security layers\n\t\tif (!SecurityHelper::IsActionAllowed($oApp, UR_ACTION_CREATE, $sObjectClass))\n\t\t{\n\t\t\tIssueLog::Warning(__METHOD__ . ' at line ' . __LINE__ . ' : User #' . UserRights::GetUserId() . ' not allowed to create ' . $sObjectClass . ' object.');\n\t\t\t$oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\n\t\t$sOperation = $oApp['request_manipulator']->ReadParam('operation', '');\n\n\t\t$aData = array('sMode' => 'create');\n\t\t$aData['form'] = $this->HandleForm($oRequest, $oApp, $aData['sMode'], $sObjectClass);\n\t\t$aData['form']['title'] = Dict::Format('Brick:Portal:Object:Form:Create:Title', MetaModel::GetName($sObjectClass));\n\n\t\t// Preparing response\n\t\tif ($oRequest->isXmlHttpRequest())\n\t\t{\n\t\t\t// We have to check whether the 'operation' parameter is defined or not in order to know if the form is required via ajax (to be displayed as a modal dialog) or if it's a lifecycle call from a existing form.\n\t\t\tif (empty($sOperation))\n\t\t\t{\n\t\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/bricks/object/modal.html.twig', $aData);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oResponse = $oApp->json($aData);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Adding brick if it was passed\n\t\t\t$sBrickId = $oApp['request_manipulator']->ReadParam('sBrickId', '');\n\t\t\tif (!empty($sBrickId))\n\t\t\t{\n\t\t\t\t$oBrick = ApplicationHelper::GetLoadedBrickFromId($oApp, $sBrickId);\n\t\t\t\tif ($oBrick !== null)\n\t\t\t\t{\n\t\t\t\t\t$aData['oBrick'] = $oBrick;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$aData['sPageTitle'] = $aData['form']['title'];\n\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/bricks/object/layout.html.twig', $aData);\n\t\t}\n\n\t\treturn $oResponse;\n\t}\n\n    /**\n     * Creates an cmdbAbstractObject of a class determined by the method encoded in $sEncodedMethodName.\n     * This method use an origin DBObject in order to determine the created cmdbAbstractObject.\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param string $sObjectClass Class of the origin object\n     * @param string $sObjectId ID of the origin object\n     * @param string $sEncodedMethodName Base64 encoded factory method name\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\n     * @throws \\Exception\n     * @throws \\ArchivedObjectException\n     * @throws \\CoreException\n     */\n\tpublic function CreateFromFactoryAction(Request $oRequest, Application $oApp, $sObjectClass, $sObjectId, $sEncodedMethodName)\n\t{\n\t\t$sMethodName = base64_decode($sEncodedMethodName);\n\n\t\t// Checking that the factory method is valid\n\t\tif (!is_callable($sMethodName))\n\t\t{\n\t\t\tIssueLog::Error(__METHOD__ . ' at line ' . __LINE__ . ' : Invalid factory method \"' . $sMethodName . '\" used when creating an object.');\n\t\t\t$oApp->abort(500, 'Invalid factory method \"' . $sMethodName . '\" used when creating an object');\n\t\t}\n\t\t\n\t\t// Retrieving origin object\n\t\t// Note : AllowAllData set to true here instead of checking scope's flag because we are displaying a value that has been set and validated\n\t\t$oOriginObject = MetaModel::GetObject($sObjectClass, $sObjectId, true, true);\n\n\t\t// Retrieving target object (We check if the method is a simple function or if it's part of a class in which case only static function are supported)\n\t\tif (!strpos($sMethodName, '::'))\n\t\t{\n\t\t\t$oTargetObject = $sMethodName($oOriginObject);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$aMethodNameParts = explode('::', $sMethodName);\n\t\t\t$sMethodClass = $aMethodNameParts[0];\n\t\t\t$sMethodName = $aMethodNameParts[1];\n\t\t\t$oTargetObject = $sMethodClass::$sMethodName($oOriginObject);\n\t\t}\n\n\t\t// Preparing redirection\n\t\t// - Route\n\t\t$aRouteParams = array(\n\t\t\t'sObjectClass' => get_class($oTargetObject)\n\t\t);\n\t\t$sRedirectRoute = $oApp['url_generator']->generate('p_object_create', $aRouteParams);\n\t\t// - Request\n\t\t$oSubRequest = Request::create($sRedirectRoute, 'GET', $oRequest->query->all(), $oRequest->cookies->all(), array(), $oRequest->server->all());\n\n\t\treturn $oApp->handle($oSubRequest, HttpKernelInterface::SUB_REQUEST, true);\n\t}\n\n    /**\n     * Applies a stimulus $sStimulus on an cmdbAbstractObject\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param string $sObjectClass\n     * @param string $sObjectId\n     * @param string $sStimulusCode\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\n     * @throws \\Exception\n     * @throws \\ArchivedObjectException\n     * @throws \\CoreException\n     */\n\tpublic function ApplyStimulusAction(Request $oRequest, Application $oApp, $sObjectClass, $sObjectId, $sStimulusCode)\n\t{\n\t\t// Checking parameters\n\t\tif ($sObjectClass === '' || $sObjectId === '' || $sStimulusCode === '')\n\t\t{\n\t\t\tIssueLog::Info(__METHOD__ . ' at line ' . __LINE__ . ' : sObjectClass, sObjectId and $sStimulusCode expected, \"' . $sObjectClass . '\", \"' . $sObjectId . '\" and \"' . $sStimulusCode . '\" given.');\n\t\t\t$oApp->abort(500, Dict::Format('UI:Error:3ParametersMissing', 'class', 'id', 'stimulus'));\n\t\t}\n\n\t\t// Checking security layers\n        if(!SecurityHelper::IsStimulusAllowed($oApp, $sStimulusCode, $sObjectClass))\n\t\t{\n\t\t\t$oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\t\t\n\t\t// Retrieving object\n\t\t$oObject = MetaModel::GetObject($sObjectClass, $sObjectId, false /* MustBeFound */, $oApp['scope_validator']->IsAllDataAllowedForScope(UserRights::ListProfiles(), $sObjectClass));\n\t\tif ($oObject === null)\n\t\t{\n\t\t\t// We should never be there as the secuirty helper makes sure that the object exists, but just in case.\n\t\t\tIssueLog::Info(__METHOD__ . ' at line ' . __LINE__ . ' : Could not load object ' . $sObjectClass . '::' . $sObjectId . '.');\n\t\t\t$oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\n\t\t// Retrieving request parameters\n\t\t$sOperation = $oApp['request_manipulator']->ReadParam('operation', '');\n\n\t\t// Retrieving form properties\n        $aStimuliForms = ApplicationHelper::GetLoadedFormFromClass($oApp, $sObjectClass, 'apply_stimulus');\n        if(array_key_exists($sStimulusCode, $aStimuliForms))\n        {\n            $aFormProperties = $aStimuliForms[$sStimulusCode];\n        }\n        // Or preparing a default form for the stimulus application\n        else\n        {\n            // Preparing default form\n            $aFormProperties = array(\n                'id' => 'apply-stimulus',\n                'type' => 'custom_list',\n                'fields' => array(),\n                'layout' => null\n            );\n        }\n\n        // Adding stimulus code to form\n        $aFormProperties['stimulus_code'] = $sStimulusCode;\n\n\t\t// Adding target_state to current_values\n\t\t$oRequest->request->set('apply_stimulus', array('code' => $sStimulusCode));\n\n\t\t$aData = array('sMode' => 'apply_stimulus');\n\t\t$aData['form'] = $this->HandleForm($oRequest, $oApp, $aData['sMode'], $sObjectClass, $sObjectId, $aFormProperties);\n\t\t$aData['form']['title'] = Dict::Format('Brick:Portal:Object:Form:Stimulus:Title');\n\t\t$aData['form']['validation']['redirection'] = array(\n\t\t\t'url' => $oApp['url_generator']->generate('p_object_edit', array('sObjectClass' => $sObjectClass, 'sObjectId' => $sObjectId))\n\t\t);\n\n\t\t// TODO : This is a ugly patch to avoid showing a modal with a readonly form to the user as it would prevent user from finishing the transition.\n\t\t// Instead, we apply the stimulus directly here and then go to the edited object.\n\t\tif (empty($sOperation))\n\t\t{\n\t\t\tif (isset($aData['form']['editable_fields_count']) && $aData['form']['editable_fields_count'] === 0)\n\t\t\t{\n\t\t\t\t$sOperation = 'redirect';\n\n\t\t\t\t$oSubRequest = $oRequest;\n\t\t\t\t$oSubRequest->request->set('operation', 'submit');\n\t\t\t\t$oSubRequest->request->set('stimulus_code', '');\n\t\t\t\t\n\t\t\t\t$aData = array('sMode' => 'apply_stimulus');\n\t\t\t\t$aData['form'] = $this->HandleForm($oSubRequest, $oApp, $aData['sMode'], $sObjectClass, $sObjectId, $aFormProperties);\n\t\t\t\t// Redefining the array to be as simple as possible :\n\t\t\t\t$aData = array('redirection' =>\n\t\t\t\t\tarray('url' => $oApp['url_generator']->generate('p_object_edit', array('sObjectClass' => $sObjectClass, 'sObjectId' => $sObjectId)))\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Preparing response\n\t\tif ($oRequest->isXmlHttpRequest())\n\t\t{\n\t\t\t// We have to check whether the 'operation' parameter is defined or not in order to know if the form is required via ajax (to be displayed as a modal dialog) or if it's a lifecycle call from a existing form.\n\t\t\tif (empty($sOperation))\n\t\t\t{\n\t\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/bricks/object/modal.html.twig', $aData);\n\t\t\t}\n\t\t\telseif ($sOperation === 'redirect')\n\t\t\t{\n\t\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/modal/mode_loader.html.twig', $aData);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oResponse = $oApp->json($aData);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/bricks/object/layout.html.twig', $aData);\n\t\t}\n\n\t\treturn $oResponse;\n\t}\n\n    /**\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param string $sMode\n     * @param string $sObjectClass\n     * @param string $sObjectId\n     * @param string $aFormProperties\n     *\n     * @return array\n     *\n     * @throws \\Exception\n     * @throws \\ArchivedObjectException\n     * @throws \\CoreException\n     * @throws \\OQLException\n     * @throws \\Twig_Error_Loader\n     * @throws \\Twig_Error_Runtime\n     * @throws \\Twig_Error_Syntax\n     */\n\tpublic static function HandleForm(Request $oRequest, Application $oApp, $sMode, $sObjectClass, $sObjectId = null, $aFormProperties = null)\n\t{\n\t\t$aFormData = array();\n\t\t$sOperation = $oApp['request_manipulator']->ReadParam('operation', '');\n\t\t$bModal = ($oRequest->isXmlHttpRequest() && empty($sOperation));\n\n\t\t// - Retrieve form properties\n\t\tif ($aFormProperties === null)\n\t\t{\n\t\t\t$aFormProperties = ApplicationHelper::GetLoadedFormFromClass($oApp, $sObjectClass, $sMode);\n\t\t}\n\n\t\t// - Create and\n\t\tif (empty($sOperation))\n\t\t{\n\t\t\t// Retrieving action rules\n\t\t\t//\n\t\t\t// Note : The action rules must be a base64-encoded JSON object, this is just so users are tempted to changes values.\n\t\t\t// But it would not be a security issue as it only presets values in the form.\n            $sActionRulesToken = $oApp['request_manipulator']->ReadParam('ar_token', '');\n\t\t\t$aActionRules = (!empty($sActionRulesToken)) ? ContextManipulatorHelper::DecodeRulesToken($sActionRulesToken) : array();\n\t\t\t\n\t\t\t// Preparing object\n\t\t\tif ($sObjectId === null)\n\t\t\t{\n\t\t\t\t// Create new UserRequest\n\t\t\t\t$oObject = MetaModel::NewObject($sObjectClass);\n\n\t\t\t\t// Retrieve action rules information to auto-fill the form if available\n\t\t\t\t// Preparing object\n\t\t\t\t$oApp['context_manipulator']->PrepareObject($aActionRules, $oObject);\n\t\t\t\t$aPrefillFormParam = array( 'user' => $_SESSION[\"auth_user\"],\n\t\t\t\t\t\t\t\t\t\t\t'origin' => 'portal');\n\t\t\t\t$oObject->PrefillForm('creation_from_0', $aPrefillFormParam);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oObject = MetaModel::GetObject($sObjectClass, $sObjectId, true, $oApp['scope_validator']->IsAllDataAllowedForScope(UserRights::ListProfiles(), $sObjectClass));\n\t\t\t}\n\n\t\t\t// Preparing buttons\n\t\t\t$aFormData['buttons'] = array(\n\t\t\t\t'transitions' => array(),\n                'actions' => array(),\n                'links' => array(),\n                'submit' => array(\n                    'label' => Dict::S('Portal:Button:Submit'),\n                ),\n\t\t\t);\n\t\t\tif ($sMode !== 'apply_stimulus')\n\t\t\t{\n\t\t\t    // Add transition buttons\n\t\t\t\t$oSetToCheckRights = DBObjectSet::FromObject($oObject);\n\t\t\t\t$aStimuli = Metamodel::EnumStimuli($sObjectClass);\n\t\t\t\tforeach ($oObject->EnumTransitions() as $sStimulusCode => $aTransitionDef)\n\t\t\t\t{\n\t\t\t\t\tif(SecurityHelper::IsStimulusAllowed($oApp, $sStimulusCode, $sObjectClass, $oSetToCheckRights))\n                    {\n                        $aFormData['buttons']['transitions'][$sStimulusCode] = $aStimuli[$sStimulusCode]->GetLabel();\n                    }\n\t\t\t\t}\n\n                // Add plugin buttons\n                foreach (MetaModel::EnumPlugins('iPopupMenuExtension') as $oExtensionInstance)\n                {\n                    foreach($oExtensionInstance->EnumItems(iPopupMenuExtension::PORTAL_OBJDETAILS_ACTIONS, array('portal_id' => $oApp['combodo.portal.instance.id'], 'object' => $oObject, 'mode' => $sMode)) as $oMenuItem)\n                    {\n                        if (is_object($oMenuItem))\n                        {\n                            if($oMenuItem instanceof JSButtonItem)\n                            {\n                                $aFormData['buttons']['actions'][] = $oMenuItem->GetMenuItem() + array('js_files' => $oMenuItem->GetLinkedScripts());\n                            }\n                            elseif($oMenuItem instanceof URLButtonItem)\n                            {\n                                $aFormData['buttons']['links'][] = $oMenuItem->GetMenuItem();\n                            }\n                        }\n                    }\n                }\n\n                // Hiding submit button or changing its label if necessary\n                if(!empty($aFormData['buttons']['transitions']) && isset($aFormProperties['properties']) &&$aFormProperties['properties']['always_show_submit'] === false)\n                {\n                    unset($aFormData['buttons']['submit']);\n                }\n                elseif($sMode === static::ENUM_MODE_EDIT)\n                {\n                    $aFormData['buttons']['submit']['label'] = Dict::S('Portal:Button:Apply');\n                }\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$aPrefillFormParam = array(\n\t\t\t\t    'user' => $_SESSION[\"auth_user\"],\n\t\t\t\t\t'origin' => 'portal',\n\t\t\t\t\t'stimulus' => $oApp['request_manipulator']->ReadParam('apply_stimulus', null)['code'],\n                );\n\t\t\t\t$oObject->PrefillForm('state_change', $aPrefillFormParam);\n\t\t\t}\n\n\t\t\t// Preparing callback urls\n\t\t\t$aCallbackUrls = $oApp['context_manipulator']->GetCallbackUrls($oApp, $aActionRules, $oObject, $bModal);\n\t\t\t$aFormData['submit_callback'] = $aCallbackUrls['submit'];\n\t\t\t$aFormData['cancel_callback'] = $aCallbackUrls['cancel'];\n\n\t\t\t// Preparing renderer\n\t\t\t// Note : We might need to distinguish form & renderer endpoints\n\t\t\tif (in_array($sMode, array('create', 'edit', 'view')))\n\t\t\t{\n\t\t\t\t$sFormEndpoint = $oApp['url_generator']->generate('p_object_' . $sMode, array('sObjectClass' => $sObjectClass, 'sObjectId' => $sObjectId));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$sFormEndpoint = $_SERVER['REQUEST_URI'];\n\t\t\t}\n\t\t\t$oFormRenderer = new BsFormRenderer();\n\t\t\t$oFormRenderer->SetEndpoint($sFormEndpoint);\n\n\t\t\t$oFormManager = new ObjectFormManager();\n\t\t\t$oFormManager->SetApplication($oApp)\n\t\t\t\t->SetObject($oObject)\n\t\t\t\t->SetMode($sMode)\n\t\t\t\t->SetActionRulesToken($sActionRulesToken)\n\t\t\t\t->SetRenderer($oFormRenderer)\n\t\t\t\t->SetFormProperties($aFormProperties);\n\n\t\t\t$oFormManager->Build();\n\n\t\t\t// Check the number of editable fields\n\t\t\t$aFormData['editable_fields_count'] = $oFormManager->GetForm()->GetEditableFieldCount();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Update / Submit / Cancel\n\t\t\t$sFormManagerClass = $oApp['request_manipulator']->ReadParam('formmanager_class', '', FILTER_UNSAFE_RAW);\n\t\t\t$sFormManagerData = $oApp['request_manipulator']->ReadParam('formmanager_data', '', FILTER_UNSAFE_RAW);\n\t\t\tif ( empty($sFormManagerClass) || empty($sFormManagerData) )\n\t\t\t{\n\t\t\t\tIssueLog::Error(__METHOD__ . ' at line ' . __LINE__ . ' : Parameters formmanager_class and formamanager_data must be defined.');\n\t\t\t\t$oApp->abort(500, 'Parameters formmanager_class and formmanager_data must be defined.');\n\t\t\t}\n\n\t\t\t$oFormManager = $sFormManagerClass::FromJSON($sFormManagerData);\n\t\t\t$oFormManager->SetApplication($oApp);\n\t\t\t\n\t\t\t// Applying action rules if present\n\t\t\tif (($oFormManager->GetActionRulesToken() !== null) && ($oFormManager->GetActionRulesToken() !== ''))\n\t\t\t{\n\t\t\t\t$aActionRules = ContextManipulatorHelper::DecodeRulesToken($oFormManager->GetActionRulesToken());\n\t\t\t\t$oObj = $oFormManager->GetObject();\n\t\t\t\t$oApp['context_manipulator']->PrepareObject($aActionRules, $oObj);\n\t\t\t\t$oFormManager->SetObject($oObj);\n\t\t\t}\n\t\t\t\n\t\t\tswitch ($sOperation)\n\t\t\t{\n\t\t\t\tcase 'submit':\n\t\t\t\t\t// Applying modification to object\n\t\t\t\t\t$aFormData['validation'] = $oFormManager->OnSubmit(array('currentValues' => $oApp['request_manipulator']->ReadParam('current_values', array(), FILTER_UNSAFE_RAW), 'attachmentIds' => $oApp['request_manipulator']->ReadParam('attachment_ids', array(), FILTER_UNSAFE_RAW), 'formProperties' => $aFormProperties, 'applyStimulus' => $oApp['request_manipulator']->ReadParam('apply_stimulus', null)));\n\t\t\t\t\tif ($aFormData['validation']['valid'] === true)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Note : We don't use $sObjectId there as it can be null if we are creating a new one. Instead we use the id from the created object once it has been seralized\n\t\t\t\t\t\t// Check if stimulus has to be applied\n                        $sStimulusCode = $oApp['request_manipulator']->ReadParam('stimulus_code', '');\n\t\t\t\t\t\tif (!empty($sStimulusCode))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aFormData['validation']['redirection'] = array(\n\t\t\t\t\t\t\t\t'url' => $oApp['url_generator']->generate('p_object_apply_stimulus', array('sObjectClass' => $sObjectClass, 'sObjectId' => $oFormManager->GetObject()->GetKey(), 'sStimulusCode' => $sStimulusCode)),\n\t\t\t\t\t\t\t\t'ajax' => true\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Otherwise, we show the object if there is no default\n//\t\t\t\t\t\telse\n//\t\t\t\t\t\t{\n//\t\t\t\t\t\t\t$aFormData['validation']['redirection'] = array(\n//\t\t\t\t\t\t\t\t'alternative_url' => $oApp['url_generator']->generate('p_object_edit', array('sObjectClass' => $sObjectClass, 'sObjectId' => $oFormManager->GetObject()->GetKey()))\n//\t\t\t\t\t\t\t);\n//\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'update':\n\t\t\t\t\t$oFormManager->OnUpdate(array('currentValues' => $oApp['request_manipulator']->ReadParam('current_values', array(), FILTER_UNSAFE_RAW), 'formProperties' => $aFormProperties));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'cancel':\n\t\t\t\t\t$oFormManager->OnCancel();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Preparing field_set data\n\t\t$aFieldSetData = array(\n\t\t\t//'fields_list' => $oFormManager->GetRenderer()->Render(), // GLA : This should be done just after in the if statement.\n\t\t\t'fields_impacts' => $oFormManager->GetForm()->GetFieldsImpacts(),\n\t\t\t'form_path' => $oFormManager->GetForm()->GetId()\n\t\t);\n\n\t\t// Preparing fields list regarding the operation\n\t\tif ($sOperation === 'update')\n\t\t{\n\t\t\t$aRequestedFields = $oApp['request_manipulator']->ReadParam('requested_fields', array(), FILTER_UNSAFE_RAW);\n\t\t\t$sFormPath = $oApp['request_manipulator']->ReadParam('form_path', '');\n\n\t\t\t// Checking if the update was on a subform, if so we need to make the rendering for that part only\n\t\t\tif ( !empty($sFormPath) && $sFormPath !== $oFormManager->GetForm()->GetId() )\n\t\t\t{\n\t\t\t\t$oSubForm = $oFormManager->GetForm()->FindSubForm($sFormPath);\n\t\t\t\t$oSubFormRenderer = new BsFormRenderer($oSubForm);\n\t\t\t\t$oSubFormRenderer->SetEndpoint($oFormManager->GetRenderer()->GetEndpoint());\n\t\t\t\t$aFormData['updated_fields'] = $oSubFormRenderer->Render($aRequestedFields);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$aFormData['updated_fields'] = $oFormManager->GetRenderer()->Render($aRequestedFields);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$aFieldSetData['fields_list'] = $oFormManager->GetRenderer()->Render();\n\t\t}\n\n\t\t// Preparing form data\n\t\t$aFormData['id'] = $oFormManager->GetForm()->GetId();\n\t\t$aFormData['transaction_id'] = $oFormManager->GetForm()->GetTransactionId();\n\t\t$aFormData['formmanager_class'] = $oFormManager->GetClass();\n\t\t$aFormData['formmanager_data'] = $oFormManager->ToJSON();\n\t\t$aFormData['renderer'] = $oFormManager->GetRenderer();\n\t\t$aFormData['object_name'] = $oFormManager->GetObject()->GetName();\n\t\t$aFormData['object_class'] = get_class($oFormManager->GetObject());\n\t\t$aFormData['object_id'] = $oFormManager->GetObject()->GetKey();\n\t\t$aFormData['object_state'] = $oFormManager->GetObject()->GetState();\n\t\t$aFormData['fieldset'] = $aFieldSetData;\n        $aFormData['display_mode'] = (isset($aFormProperties['properties'])) ? $aFormProperties['properties']['display_mode'] : ApplicationHelper::FORM_DEFAULT_DISPLAY_MODE;\n\n\t\treturn $aFormData;\n\t}\n\n    /**\n     * Handles the autocomplete search\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param string $sTargetAttCode Attribute code of the host object pointing to the Object class to search\n     * @param string $sHostObjectClass Class name of the host object\n     * @param string $sHostObjectId Id of the host object\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\n     * @throws \\Exception\n     * @throws \\ArchivedObjectException\n     * @throws \\CoreException\n     * @throws \\OQLException\n     */\n\tpublic function SearchAutocompleteAction(Request $oRequest, Application $oApp, $sTargetAttCode, $sHostObjectClass, $sHostObjectId = null)\n\t{\n\t\t$aData = array(\n\t\t\t'results' => array(\n\t\t\t\t'count' => 0,\n\t\t\t\t'items' => array()\n\t\t\t)\n\t\t);\n\n\t\t// Parsing parameters from request payload\n\t\tparse_str($oRequest->getContent(), $aRequestContent);\n\n\t\t// Checking parameters\n\t\tif (!isset($aRequestContent['sQuery']))\n\t\t{\n\t\t\tIssueLog::Error(__METHOD__ . ' at line ' . __LINE__ . ' : Parameter sQuery missing.');\n\t\t\t$oApp->abort(500, Dict::Format('UI:Error:ParameterMissing', 'sQuery'));\n\t\t}\n\n\t\t// Retrieving parameters\n\t\t$sQuery = $aRequestContent['sQuery'];\n\t\t$sFieldId = $aRequestContent['sFieldId'];\n\n\t\t// Checking security layers\n\t\tif (!SecurityHelper::IsActionAllowed($oApp, UR_ACTION_READ, $sHostObjectClass, $sHostObjectId))\n\t\t{\n\t\t\tIssueLog::Warning(__METHOD__ . ' at line ' . __LINE__ . ' : Could not load object ' . $sHostObjectClass . '::' . $sHostObjectId . '.');\n\t\t\t$oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\n\t\t// Retrieving host object for future DBSearch parameters\n\t\tif ($sHostObjectId !== null)\n\t\t{\n\t\t\t// Note : AllowAllData set to true here instead of checking scope's flag because we are displaying a value that has been set and validated\n\t\t\t$oHostObject = MetaModel::GetObject($sHostObjectClass, $sHostObjectId, true, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oHostObject = MetaModel::NewObject($sHostObjectClass);\n\t\t\t// Retrieving action rules\n\t\t\t//\n\t\t\t// Note : The action rules must be a base64-encoded JSON object, this is just so users are tempted to changes values.\n\t\t\t// But it would not be a security issue as it only presets values in the form.\n            $sActionRulesToken = $oApp['request_manipulator']->ReadParam('ar_token', '');\n\t\t\t$aActionRules = (!empty($sActionRulesToken)) ? ContextManipulatorHelper::DecodeRulesToken($sActionRulesToken) : array();\n\t\t\t// Preparing object\n\t\t\t$oApp['context_manipulator']->PrepareObject($aActionRules, $oHostObject);\n\t\t}\n\n\t\t// Updating host object with form data / values\n\t\t$sFormManagerClass = $aRequestContent['formmanager_class'];\n\t\t$sFormManagerData = $aRequestContent['formmanager_data'];\n\t\tif (!empty($sFormManagerClass) && !empty($sFormManagerData))\n\t\t{\n\t\t\t$oFormManager = $sFormManagerClass::FromJSON($sFormManagerData);\n\t\t\t$oFormManager->SetApplication($oApp);\n\t\t\t$oFormManager->SetObject($oHostObject);\n\n\t\t\t// Applying action rules if present\n\t\t\tif (($oFormManager->GetActionRulesToken() !== null) && ($oFormManager->GetActionRulesToken() !== ''))\n\t\t\t{\n\t\t\t\t$aActionRules = ContextManipulatorHelper::DecodeRulesToken($oFormManager->GetActionRulesToken());\n\t\t\t\t$oObj = $oFormManager->GetObject();\n\t\t\t\t$oApp['context_manipulator']->PrepareObject($aActionRules, $oObj);\n\t\t\t\t$oFormManager->SetObject($oObj);\n\t\t\t}\n\t\t\t\n\t\t\t// Updating host object\n\t\t\t$oFormManager->OnUpdate(array('currentValues' => $aRequestContent['current_values']));\n\t\t\t$oHostObject = $oFormManager->GetObject();\n\t\t}\n\n\t\t// Building search query\n\t\t// - Retrieving target object class from attcode\n\t\t$oTargetAttDef = MetaModel::GetAttributeDef($sHostObjectClass, $sTargetAttCode);\n\t\tif ($oTargetAttDef->GetEditClass() === 'CustomFields')\n\t\t{\n\t\t\t$oRequestTemplate = $oHostObject->Get($sTargetAttCode);\n\t\t\t$oTemplateFieldSearch = $oRequestTemplate->GetForm()->GetField('user_data')->GetForm()->GetField($sFieldId)->GetSearch();\n\t\t\t$sTargetObjectClass = $oTemplateFieldSearch->GetClass();\n\t\t}\n\t\telseif ($oTargetAttDef->IsLinkSet())\n\t\t{\n\t\t\tthrow new Exception('Search autocomplete cannot apply on AttributeLinkedSet objects, ' . get_class($oTargetAttDef) . ' (' . $sHostObjectClass . '->' . $sTargetAttCode . ') given.');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sTargetObjectClass = $oTargetAttDef->GetTargetClass();\n\t\t}\n\t\t// - Base query from meta model\n\t\tif ($oTargetAttDef->GetEditClass() === 'CustomFields')\n\t\t{\n\t\t\t$oSearch = $oTemplateFieldSearch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oSearch = DBSearch::FromOQL($oTargetAttDef->GetValuesDef()->GetFilterExpression());\n\t\t}\n\t\t// - Adding query condition\n\t\t$oSearch->AddConditionExpression(new BinaryExpression(new FieldExpression('friendlyname', $oSearch->GetClassAlias()), 'LIKE', new VariableExpression('ac_query')));\n\t\t// - Intersecting with scope constraints\n\t\t// Note : This do NOT apply to custom fields as the portal administrator is not supposed to know which objects will be put in the templates.\n\t\t// It is the responsability of the template designer to write the right query so the user see only what he should.\n\t\tif ($oTargetAttDef->GetEditClass() !== 'CustomFields')\n\t\t{\n\t\t\t$oScopeSearch = $oApp['scope_validator']->GetScopeFilterForProfiles(UserRights::ListProfiles(), $sTargetObjectClass, UR_ACTION_READ);\n\t\t\t$oSearch = $oSearch->Intersect($oScopeSearch);\n\t\t\t// - Allowing all data if necessary\n\t\t\tif ($oScopeSearch->IsAllDataAllowed())\n\t\t\t{\n\t\t\t\t$oSearch->AllowAllData();\n\t\t\t}\n\t\t}\n\n\t\t// Retrieving results\n\t\t// - Preparing object set\n\t\t$oSet = new DBObjectSet($oSearch, array(), array('this' => $oHostObject, 'ac_query' => '%' . $sQuery . '%'));\n\t\t$oSet->OptimizeColumnLoad(array($oSearch->GetClassAlias() => array('friendlyname')));\n\t\t// Note : This limit is also used in the field renderer by typeahead to determine how many suggestions to display\n\t\tif ($oTargetAttDef->GetEditClass() === 'CustomFields')\n\t\t{\n\t\t\t$oSet->SetLimit(static::DEFAULT_LIST_LENGTH);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oSet->SetLimit($oTargetAttDef->GetMaximumComboLength()); // TODO : Is this the right limit value ? We might want to use another parameter\n\t\t}\n\t\t// - Retrieving objects\n\t\twhile ($oItem = $oSet->Fetch())\n\t\t{\n\t\t\t$aData['results']['items'][] = array('id' => $oItem->GetKey(), 'name' => html_entity_decode($oItem->GetName(), ENT_QUOTES, 'UTF-8'));\n\t\t\t$aData['results']['count'] ++;\n\t\t}\n\n\t\t// Preparing response\n\t\tif ($oRequest->isXmlHttpRequest())\n\t\t{\n\t\t\t$oResponse = $oApp->json($aData);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oResponse = $oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\n\t\treturn $oResponse;\n\t}\n\n    /**\n     * Handles the regular (table) search from an attribute\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param string $sTargetAttCode Attribute code of the host object pointing to the Object class to search\n     * @param string $sHostObjectClass Class name of the host object\n     * @param string $sHostObjectId Id of the host object\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\n     * @throws \\Exception\n     * @throws \\ArchivedObjectException\n     * @throws \\CoreException\n     * @throws \\DictExceptionMissingString\n     * @throws \\OQLException\n     */\n\tpublic function SearchFromAttributeAction(Request $oRequest, Application $oApp, $sTargetAttCode, $sHostObjectClass, $sHostObjectId = null)\n\t{\n\t\t$aData = array(\n\t\t\t'sMode' => 'search_regular',\n\t\t\t'sTargetAttCode' => $sTargetAttCode,\n\t\t\t'sHostObjectClass' => $sHostObjectClass,\n\t\t\t'sHostObjectId' => $sHostObjectId,\n\t\t\t'sActionRulesToken' => $oApp['request_manipulator']->ReadParam('ar_token', ''),\n\t\t);\n\n\t\t// Checking security layers\n\t\tif (!SecurityHelper::IsActionAllowed($oApp, UR_ACTION_READ, $sHostObjectClass, $sHostObjectId))\n\t\t{\n\t\t\tIssueLog::Warning(__METHOD__ . ' at line ' . __LINE__ . ' : User #' . UserRights::GetUserId() . ' not allowed to read ' . $sHostObjectClass . '::' . $sHostObjectId . ' object.');\n\t\t\t$oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\n\t\t// Retrieving host object for future DBSearch parameters\n\t\tif ($sHostObjectId !== null)\n\t\t{\n\t\t\t// Note : AllowAllData set to true here instead of checking scope's flag because we are displaying a value that has been set and validated\n\t\t\t$oHostObject = MetaModel::GetObject($sHostObjectClass, $sHostObjectId, true, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oHostObject = MetaModel::NewObject($sHostObjectClass);\n\t\t\t// Retrieving action rules\n\t\t\t//\n\t\t\t// Note : The action rules must be a base64-encoded JSON object, this is just so users are tempted to changes values.\n\t\t\t// But it would not be a security issue as it only presets values in the form.\n\t\t\t$aActionRules = !empty($aData['sActionRulesToken']) ? ContextManipulatorHelper::DecodeRulesToken($aData['sActionRulesToken']) : array();\n\t\t\t// Preparing object\n\t\t\t$oApp['context_manipulator']->PrepareObject($aActionRules, $oHostObject);\n\t\t}\n\n\t\t// Updating host object with form data / values\n\t\t$sFormManagerClass = $oApp['request_manipulator']->ReadParam('formmanager_class', '', FILTER_UNSAFE_RAW);\n\t\t$sFormManagerData = $oApp['request_manipulator']->ReadParam('formmanager_data', '', FILTER_UNSAFE_RAW);\n\t\tif ( !empty($sFormManagerClass) && !empty($sFormManagerData) )\n\t\t{\n\t\t\t$oFormManager = $sFormManagerClass::FromJSON($sFormManagerData);\n\t\t\t$oFormManager->SetApplication($oApp);\n\t\t\t$oFormManager->SetObject($oHostObject);\n\n\t\t\t// Applying action rules if present\n\t\t\tif (($oFormManager->GetActionRulesToken() !== null) && ($oFormManager->GetActionRulesToken() !== ''))\n\t\t\t{\n\t\t\t\t$aActionRules = ContextManipulatorHelper::DecodeRulesToken($oFormManager->GetActionRulesToken());\n\t\t\t\t$oObj = $oFormManager->GetObject();\n\t\t\t\t$oApp['context_manipulator']->PrepareObject($aActionRules, $oObj);\n\t\t\t\t$oFormManager->SetObject($oObj);\n\t\t\t}\n\t\t\t\n\t\t\t// Updating host object\n\t\t\t$oFormManager->OnUpdate(array('currentValues' => $oApp['request_manipulator']->ReadParam('current_values', array(), FILTER_UNSAFE_RAW)));\n\t\t\t$oHostObject = $oFormManager->GetObject();\n\t\t}\n\t\t\n\t\t// Retrieving request parameters\n\t\t$iPageNumber = $oApp['request_manipulator']->ReadParam('iPageNumber', static::DEFAULT_PAGE_NUMBER, FILTER_SANITIZE_NUMBER_INT);\n\t\t$iListLength = $oApp['request_manipulator']->ReadParam('iListLength', static::DEFAULT_LIST_LENGTH, FILTER_SANITIZE_NUMBER_INT);\n\t\t$bInitalPass = $oApp['request_manipulator']->HasParam('draw') ? false : true;\n\t\t$sQuery = $oApp['request_manipulator']->ReadParam('sSearchValue', '');\n\t\t$sFormPath = $oApp['request_manipulator']->ReadParam('sFormPath', '');\n\t\t$sFieldId = $oApp['request_manipulator']->ReadParam('sFieldId', '');\n\t\t$aObjectIdsToIgnore = $oApp['request_manipulator']->ReadParam('aObjectIdsToIgnore', null, FILTER_UNSAFE_RAW);\n\n\t\t// Building search query\n\t\t// - Retrieving target object class from attcode\n\t\t$oTargetAttDef = MetaModel::GetAttributeDef($sHostObjectClass, $sTargetAttCode);\n\t\tif ($oTargetAttDef->IsExternalKey())\n\t\t{\n\t\t\t$sTargetObjectClass = $oTargetAttDef->GetTargetClass();\n\t\t}\n\t\telseif ($oTargetAttDef->IsLinkSet())\n\t\t{\n\t\t\tif (!$oTargetAttDef->IsIndirect())\n\t\t\t{\n\t\t\t\t$sTargetObjectClass = $oTargetAttDef->GetLinkedClass();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oRemoteAttDef = MetaModel::GetAttributeDef($oTargetAttDef->GetLinkedClass(), $oTargetAttDef->GetExtKeyToRemote());\n\t\t\t\t$sTargetObjectClass = $oRemoteAttDef->GetTargetClass();\n\t\t\t}\n\t\t}\n\t\telseif ($oTargetAttDef->GetEditClass() === 'CustomFields')\n\t\t{\n\t\t\t$oRequestTemplate = $oHostObject->Get($sTargetAttCode);\n\t\t\t$oTemplateFieldSearch = $oRequestTemplate->GetForm()->GetField('user_data')->GetForm()->GetField($sFieldId)->GetSearch();\n\t\t\t$sTargetObjectClass = $oTemplateFieldSearch->GetClass();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new Exception('Search from attribute can only apply on AttributeExternalKey or AttributeLinkedSet objects, ' . get_class($oTargetAttDef) . ' given.');\n\t\t}\n\t\t\n\t\t// - Retrieving class attribute list\n\t\t$aAttCodes = ApplicationHelper::GetLoadedListFromClass($oApp, $sTargetObjectClass, 'list');\n\t\t// - Adding friendlyname attribute to the list is not already in it\n\t\t$sTitleAttCode = 'friendlyname';\n\t\tif (($sTitleAttCode !== null) && !in_array($sTitleAttCode, $aAttCodes))\n\t\t{\n\t\t\t$aAttCodes = array_merge(array($sTitleAttCode), $aAttCodes);\n\t\t}\n\n\t\t// - Retrieving scope search\n\t\t// Note : This do NOT apply to custom fields as the portal administrator is not supposed to know which objects will be put in the templates.\n\t\t// It is the responsability of the template designer to write the right query so the user see only what he should.\n\t\t$oScopeSearch = $oApp['scope_validator']->GetScopeFilterForProfiles(UserRights::ListProfiles(), $sTargetObjectClass, UR_ACTION_READ);\n\t\t$aInternalParams = array();\n\t\tif (($oScopeSearch === null) && ($oTargetAttDef->GetEditClass() !== 'CustomFields'))\n\t\t{\n\t\t\tIssueLog::Info(__METHOD__ . ' at line ' . __LINE__ . ' : User #' . UserRights::GetUserId() . ' has no scope query for ' . $sTargetObjectClass . ' class.');\n\t\t\t$oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\n\t\t// - Base query from meta model\n\t\tif ($oTargetAttDef->IsExternalKey())\n\t\t{\n\t\t\t$oSearch = DBSearch::FromOQL($oTargetAttDef->GetValuesDef()->GetFilterExpression());\n\t\t}\n\t\telseif ($oTargetAttDef->IsLinkSet())\n\t\t{\n\t\t\t$oSearch = $oScopeSearch;\n\t\t}\n\t\telseif ($oTargetAttDef->GetEditClass() === 'CustomFields')\n\t\t{\n\t\t\t// Note : $oTemplateFieldSearch has been defined in the \"Retrieving target object class from attcode\" part, it is not available otherwise\n\t\t\t$oSearch = $oTemplateFieldSearch;\n\t\t}\n\n\t\t// - Filtering objects to ignore\n\t\tif (($aObjectIdsToIgnore !== null) && (is_array($aObjectIdsToIgnore)))\n\t\t{\n\t\t\t//$oSearch->AddConditionExpression('id', $aObjectIdsToIgnore, 'NOT IN');\n\t\t\t$aExpressions = array();\n\t\t\tforeach ($aObjectIdsToIgnore as $sObjectIdToIgnore)\n\t\t\t{\n\t\t\t\t$aExpressions[] = new ScalarExpression($sObjectIdToIgnore);\n\t\t\t}\n\t\t\t$oSearch->AddConditionExpression(new BinaryExpression(new FieldExpression('id', $oSearch->GetClassAlias()), 'NOT IN', new ListExpression($aExpressions)));\n\t\t}\n\t\t\n\t\t// - Adding query condition\n\t\t$aInternalParams['this'] = $oHostObject;\n\t\tif (!empty($sQuery))\n\t\t{\n\t\t\t$oFullExpr = null;\n\t\t\tfor ($i = 0; $i < count($aAttCodes); $i++)\n\t\t\t{\n\t\t\t\t// Checking if the current attcode is an external key in order to search on the friendlyname\n\t\t\t\t$oAttDef = MetaModel::GetAttributeDef($sTargetObjectClass, $aAttCodes[$i]);\n\t\t\t\t$sAttCode = (!$oAttDef->IsExternalKey()) ? $aAttCodes[$i] : $aAttCodes[$i] . '_friendlyname';\n\t\t\t\t// Building expression for the current attcode\n\t\t\t\t// - For attributes that need conversion from their display value to storage value\n\t\t\t\t//   Note : This is dirty hack that will need to be refactored in the OQL core in order to be nicer and to be extended to other types such as dates etc...\n\t\t\t\tif (($oAttDef instanceof AttributeEnum) || ($oAttDef instanceof AttributeFinalClass))\n\t\t\t\t{\n\t\t\t\t\t// Looking up storage value\n\t\t\t\t\t$aMatchedCodes = array();\n\t\t\t\t\tforeach ($oAttDef->GetAllowedValues() as $sValueCode => $sValueLabel)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (stripos($sValueLabel, $sQuery) !== false)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aMatchedCodes[] = $sValueCode;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Building expression\n\t\t\t\t\tif (!empty($aMatchedCodes))\n\t\t\t\t\t{\n\t\t\t\t\t\t$oEnumeratedListExpr = ListExpression::FromScalars($aMatchedCodes);\n\t\t\t\t\t\t$oBinExpr = new BinaryExpression(new FieldExpression($sAttCode, $oSearch->GetClassAlias()), 'IN', $oEnumeratedListExpr);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$oBinExpr = new FalseExpression();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// - For regular attributs\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$oBinExpr = new BinaryExpression(new FieldExpression($sAttCode, $oSearch->GetClassAlias()), 'LIKE', new VariableExpression('re_query'));\n\t\t\t\t}\n\t\t\t\t// Adding expression to the full expression (all attcodes)\n\t\t\t\tif ($i === 0)\n\t\t\t\t{\n\t\t\t\t\t$oFullExpr = $oBinExpr;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$oFullExpr = new BinaryExpression($oFullExpr, 'OR', $oBinExpr);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Adding full expression to the search object\n\t\t\t$oSearch->AddConditionExpression($oFullExpr);\n\t\t\t$aInternalParams['re_query'] = '%' . $sQuery . '%';\n\t\t}\n\n\t\t// - Intersecting with scope constraints\n\t\t// Note : This do NOT apply to custom fields as the portal administrator is not supposed to know which objects will be put in the templates.\n\t\t// It is the responsability of the template designer to write the right query so the user see only what he should.\n\t\tif (($oScopeSearch !== null) && ($oTargetAttDef->GetEditClass() !== 'CustomFields'))\n\t\t{\n\t\t\t$oSearch = $oSearch->Intersect($oScopeSearch);\n\t\t\t// - Allowing all data if necessary\n\t\t\tif ($oScopeSearch->IsAllDataAllowed())\n\t\t\t{\n\t\t\t\t$oSearch->AllowAllData();\n\t\t\t}\n\t\t}\n\n\t\t// Retrieving results\n\t\t// - Preparing object set\n\t\t$oSet = new DBObjectSet($oSearch, array(), $aInternalParams);\n\t\t$oSet->OptimizeColumnLoad(array($oSearch->GetClassAlias() => $aAttCodes));\n\t\t$oSet->SetLimit($iListLength, $iListLength * ($iPageNumber - 1));\n\t\t// - Retrieving columns properties\n\t\t$aColumnProperties = array();\n\t\tforeach ($aAttCodes as $sAttCode)\n\t\t{\n\t\t\t$oAttDef = MetaModel::GetAttributeDef($sTargetObjectClass, $sAttCode);\n\t\t\t$aColumnProperties[$sAttCode] = array(\n\t\t\t\t'title' => $oAttDef->GetLabel()\n\t\t\t);\n\t\t}\n\t\t// - Retrieving objects\n\t\t$aItems = array();\n\t\twhile ($oItem = $oSet->Fetch())\n\t\t{\n\t\t\t$aItems[] = $this->PrepareObjectInformations($oApp, $oItem, $aAttCodes);\n\t\t}\n\t\t\n\t\t// Preparing response\n\t\tif ($bInitalPass)\n\t\t{\n\t\t\t$aData = $aData + array(\n\t\t\t\t'form' => array(\n\t\t\t\t\t'id' => 'object_search_form_' . time(),\n\t\t\t\t\t'title' => Dict::Format('Brick:Portal:Object:Search:Regular:Title', $oTargetAttDef->GetLabel(), MetaModel::GetName($sTargetObjectClass))\n\t\t\t\t),\n\t\t\t\t'aColumnProperties' => json_encode($aColumnProperties),\n\t\t\t\t'aResults' => array(\n\t\t\t\t\t'aItems' => json_encode($aItems),\n\t\t\t\t\t'iCount' => count($aItems)\n\t\t\t\t),\n\t\t\t\t'bMultipleSelect' => $oTargetAttDef->IsLinkSet(),\n\t\t\t\t'aSource' => array(\n\t\t\t\t\t'sFormPath' => $sFormPath,\n\t\t\t\t\t'sFieldId' => $sFieldId,\n\t\t\t\t\t'aObjectIdsToIgnore' => $aObjectIdsToIgnore,\n\t\t\t\t\t'sFormManagerClass' => $sFormManagerClass,\n\t\t\t\t\t'sFormManagerData' => $sFormManagerData\n\t\t\t\t)\n\t\t\t);\n\t\t\t\n\t\t\tif ($oRequest->isXmlHttpRequest())\n\t\t\t{\n\t\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/bricks/object/modal.html.twig', $aData);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//$oResponse = $oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/bricks/object/layout.html.twig', $aData);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$aData = $aData + array(\n\t\t\t\t'levelsProperties' => $aColumnProperties,\n\t\t\t\t'data' => $aItems,\n\t\t\t\t'recordsTotal' => $oSet->Count(),\n\t\t\t\t'recordsFiltered' => $oSet->Count()\n\t\t\t);\n\n\t\t\t$oResponse = $oApp->json($aData);\n\t\t}\n\n\t\treturn $oResponse;\n\t}\n\n    /**\n     * Handles the hierarchical search from an attribute\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param string $sTargetAttCode Attribute code of the host object pointing to the Object class to search\n     * @param string $sHostObjectClass Class name of the host object\n     * @param string $sHostObjectId Id of the host object\n     *\n     * @return void\n     *\n     */\n\tpublic function SearchHierarchyAction(Request $oRequest, Application $oApp, $sTargetAttCode, $sHostObjectClass, $sHostObjectId = null)\n\t{\n\t\t// TODO\n\t}\n\n    /**\n     * Handles ormDocument display / download from an object\n     *\n     * Note: This is inspired from pages/ajax.document.php, but duplicated as there is no secret mecanism for ormDocument yet.\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param string $sOperation\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\n     * @throws \\ArchivedObjectException\n     * @throws \\CoreException\n     */\n\tpublic function DocumentAction(Request $oRequest, Application $oApp, $sOperation = null)\n    {\n        // Setting default operation\n        if($sOperation === null)\n        {\n            $sOperation = 'display';\n        }\n\n        // Retrieving ormDocument's host object\n        $sObjectClass = $oApp['request_manipulator']->ReadParam('sObjectClass', '');\n        $sObjectId = $oApp['request_manipulator']->ReadParam('sObjectId', '');\n        $sObjectField = $oApp['request_manipulator']->ReadParam('sObjectField', '');\n\n        // When reaching to an Attachment, we have to check security on its host object instead of the Attachment itself\n        if($sObjectClass === 'Attachment')\n        {\n            $oAttachment = MetaModel::GetObject($sObjectClass, $sObjectId, true, true);\n            $sHostClass = $oAttachment->Get('item_class');\n            $sHostId = $oAttachment->Get('item_id');\n        }\n        else\n        {\n            $sHostClass = $sObjectClass;\n            $sHostId = $sObjectId;\n        }\n\n        // Checking security layers\n\t    // Note: Checking if host object already exists as we can try to download document from an object that is being created\n        if (($sHostId > 0) && !SecurityHelper::IsActionAllowed($oApp, UR_ACTION_READ, $sHostClass, $sHostId))\n        {\n            IssueLog::Warning(__METHOD__ . ' at line ' . __LINE__ . ' : User #' . UserRights::GetUserId() . ' not allowed to retrieve document from attribute ' . $sObjectField . ' as it not allowed to read ' . $sHostClass . '::' . $sHostId . ' object.');\n            $oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n        }\n\n        // Retrieving object\n        $oObject = MetaModel::GetObject($sObjectClass, $sObjectId, false /* Must not be found */, $oApp['scope_validator']->IsAllDataAllowedForScope(UserRights::ListProfiles(), $sHostClass));\n        if ($oObject === null)\n        {\n            // We should never be there as the secuirty helper makes sure that the object exists, but just in case.\n            IssueLog::Info(__METHOD__ . ' at line ' . __LINE__ . ' : Could not load object ' . $sObjectClass . '::' . $sObjectId . '.');\n            $oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n        }\n\n        // Setting cache timeout\n        // Note: Attachment download should be handle through AttachmentAction()\n        if($sObjectClass === 'Attachment')\n        {\n            // One year ahead: an attachement cannot change\n            $iCacheSec = 31556926;\n        }\n        else\n        {\n            $iCacheSec = $oApp['request_manipulator']->ReadParam('cache', 0, FILTER_SANITIZE_NUMBER_INT);\n        }\n\n        $aHeaders = array();\n        if($iCacheSec > 0)\n        {\n            $aHeaders['Expires'] = '';\n            $aHeaders['Cache-Control'] = 'no-transform, public,max-age='.$iCacheSec.',s-maxage='.$iCacheSec;\n            // Reset the value set previously\n            $aHeaders['Pragma'] = 'cache';\n            // An arbitrary date in the past is ok\n            $aHeaders['Last-Modified'] = 'Wed, 15 Jun 2015 13:21:15 GMT';\n        }\n\n        /** @var \\ormDocument $oDocument */\n        $oDocument = $oObject->Get($sObjectField);\n        $aHeaders['Content-Type'] = $oDocument->GetMimeType();\n        $aHeaders['Content-Disposition'] = (($sOperation === 'display') ? 'inline' : 'attachment') . ';filename=\"'.$oDocument->GetFileName().'\"';\n\n        return new Response($oDocument->GetData(), Response::HTTP_OK, $aHeaders);\n    }\n\n    /**\n     * Handles attachment add/remove on an object\n     *\n     * Note: This is inspired from itop-attachment/ajax.attachment.php\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param string $sOperation\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\n     * @throws \\Exception\n     * @throws \\CoreException\n     * @throws \\CoreUnexpectedValue\n     */\n\tpublic function AttachmentAction(Request $oRequest, Application $oApp, $sOperation = null)\n\t{\n\t\t$aData = array(\n\t\t\t'att_id' => 0,\n\t\t\t'preview' => false,\n\t\t\t'msg' => ''\n\t\t);\n\n\t\t// Retrieving sOperation from request only if it wasn't forced (determined by the route)\n\t\tif ($sOperation === null)\n\t\t{\n\t\t\t$sOperation = $oApp['request_manipulator']->ReadParam('operation', null);\n\t\t}\n\t\tswitch ($sOperation)\n\t\t{\n\t\t\tcase 'add':\n\t\t\t\t$sFieldName = $oApp['request_manipulator']->ReadParam('field_name', '');\n\t\t\t\t$sObjectClass = $oApp['request_manipulator']->ReadParam('object_class', '');\n\t\t\t\t$sTempId = $oApp['request_manipulator']->ReadParam('temp_id', '');\n\n\t\t\t\tif (empty($sObjectClass) || empty($sTempId))\n\t\t\t\t{\n\t\t\t\t\t$aData['error'] = Dict::Format('UI:Error:2ParametersMissing', 'object_class', 'temp_id');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t$oDocument = utils::ReadPostedDocument($sFieldName);\n\t\t\t\t\t\t$oAttachment = MetaModel::NewObject('Attachment');\n\t\t\t\t\t\t$oAttachment->Set('expire', time() + MetaModel::GetConfig()->Get('draft_attachments_lifetime')); // one hour...\n\t\t\t\t\t\t$oAttachment->Set('temp_id', $sTempId);\n\t\t\t\t\t\t$oAttachment->Set('item_class', $sObjectClass);\n\t\t\t\t\t\t$oAttachment->SetDefaultOrgId();\n\t\t\t\t\t\t$oAttachment->Set('contents', $oDocument);\n\t\t\t\t\t\t$iAttId = $oAttachment->DBInsert();\n\n\t\t\t\t\t\t$aData['msg'] = htmlentities($oDocument->GetFileName(), ENT_QUOTES, 'UTF-8');\n\t\t\t\t\t\t// TODO : Change icon location when itop-attachment is refactored\n\t\t\t\t\t\t//$aData['icon'] = utils::GetAbsoluteUrlAppRoot() . AttachmentPlugIn::GetFileIcon($oDoc->GetFileName());\n\t\t\t\t\t\t$aData['icon'] = utils::GetAbsoluteUrlAppRoot() . 'env-' . utils::GetCurrentEnvironment() . '/itop-attachments/icons/image.png';\n\t\t\t\t\t\t$aData['att_id'] = $iAttId;\n\t\t\t\t\t\t$aData['preview'] = $oDocument->IsPreviewAvailable() ? 'true' : 'false';\n\t\t\t\t\t}\n\t\t\t\t\tcatch (FileUploadException $e)\n\t\t\t\t\t{\n\t\t\t\t\t\t$aData['error'] = $e->GetMessage();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Note : The Content-Type header is set to 'text/plain' in order to be IE9 compatible. Otherwise ('application/json') IE9 will download the response as a JSON file to the user computer...\n\t\t\t\t$oResponse = $oApp->json($aData, 200, array('Content-Type' => 'text/plain'));\n\t\t\t\tbreak;\n\n\t\t\tcase 'download':\n\t\t\t\t// Preparing redirection\n                // - Route\n                $aRouteParams = array(\n                    'sObjectClass' => 'Attachment',\n                    'sObjectId' => $oApp['request_manipulator']->ReadParam('sAttachmentId', null),\n                    'sObjectField' => 'contents',\n                );\n                $sRedirectRoute = $oApp['url_generator']->generate('p_object_document_download', $aRouteParams);\n                // - Request\n                $oSubRequest = Request::create($sRedirectRoute, 'GET', $oRequest->query->all(), $oRequest->cookies->all(), array(), $oRequest->server->all());\n\n                $oResponse = $oApp->handle($oSubRequest, HttpKernelInterface::SUB_REQUEST, true);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t$oApp->abort(403, Dict::S('Error:HTTP:400'));\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn $oResponse;\n\t}\n\n    /**\n     * Returns a json response containing an array of objects informations.\n     *\n     * The service must be given 3 parameters :\n     * - sObjectClass : The class of objects to retrieve information from\n     * - aObjectIds : An array of object ids\n     * - aObjectAttCodes : An array of attribute codes to retrieve\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\n     * @throws \\OQLException\n     * @throws \\CoreException\n     */\n\tpublic function GetInformationsAsJsonAction(Request $oRequest, Application $oApp)\n\t{\n\t\t$aData = array();\n\n\t\t// Retrieving parameters\n\t\t$sObjectClass = $oApp['request_manipulator']->ReadParam('sObjectClass', '');\n\t\t$aObjectIds = $oApp['request_manipulator']->ReadParam('aObjectIds', array(), FILTER_UNSAFE_RAW);\n\t\t$aObjectAttCodes = $oApp['request_manipulator']->ReadParam('aObjectAttCodes', array(), FILTER_UNSAFE_RAW);\n\t\tif ( empty($sObjectClass) || empty($aObjectIds) || empty($aObjectAttCodes) )\n\t\t{\n\t\t\tIssueLog::Info(__METHOD__ . ' at line ' . __LINE__ . ' : sObjectClass, aObjectIds and aObjectAttCodes expected, \"' . $sObjectClass . '\", \"' . implode('/', $aObjectIds) . '\" given.');\n\t\t\t$oApp->abort(500, 'Invalid request data, some informations are missing');\n\t\t}\n\n\t\t// Checking that id is in the AttCodes\n\t\tif (!in_array('id', $aObjectAttCodes))\n\t\t{\n\t\t\t$aObjectAttCodes = array_merge(array('id'), $aObjectAttCodes);\n\t\t}\n\n\t\t// Building the search\n\t\t$bIgnoreSilos = $oApp['scope_validator']->IsAllDataAllowedForScope(UserRights::ListProfiles(), $sObjectClass);\n\t\t$oSearch = DBObjectSearch::FromOQL(\"SELECT \" . $sObjectClass . \" WHERE id IN ('\" . implode(\"','\", $aObjectIds) . \"')\");\n\t\tif ($bIgnoreSilos === true)\n\t\t{\n\t\t\t$oSearch->AllowAllData();\n\t\t}\n\t\t$oSet = new DBObjectSet($oSearch);\n\t\t$oSet->OptimizeColumnLoad($aObjectAttCodes);\n\n\t\t// Retrieving objects\n\t\twhile ($oObject = $oSet->Fetch())\n\t\t{\n\t\t\t$aData['items'][] = $this->PrepareObjectInformations($oApp, $oObject, $aObjectAttCodes);\n\t\t}\n\n\t\treturn $oApp->json($aData);\n\t}\n\n    /**\n     * Prepare a DBObject informations as an array for a client side usage (typically, add a row in a table)\n     *\n     * @param \\Silex\\Application $oApp\n     * @param \\DBObject $oObject\n     * @param array $aAttCodes\n     *\n     * @return array\n     *\n     * @throws \\Exception\n     * @throws \\CoreException\n     */\n\tprotected function PrepareObjectInformations(Application $oApp, DBObject $oObject, $aAttCodes = array())\n\t{\n\t\t$sObjectClass = get_class($oObject);\n\t\t$aObjectData = array(\n\t\t\t'id' => $oObject->GetKey(),\n\t\t\t'name' => $oObject->GetName(),\n\t\t\t'attributes' => array(),\n\t\t);\n\n\t\t// Retrieving attributes definitions\n\t\t$aAttDefs = array();\n\t\tforeach ($aAttCodes as $sAttCode)\n\t\t{\n\t\t\tif ($sAttCode === 'id')\n\t\t\t\tcontinue;\n\n\t\t\t$aAttDefs[$sAttCode] = MetaModel::GetAttributeDef($sObjectClass, $sAttCode);\n\t\t}\n\n\t\t// Preparing attribute data\n\t\tforeach ($aAttDefs as $oAttDef)\n\t\t{\n\t\t\t$aAttData = array(\n\t\t\t\t'att_code' => $oAttDef->GetCode()\n\t\t\t);\n\n\t\t\tif ($oAttDef->IsExternalKey())\n\t\t\t{\n\t\t\t\t$aAttData['value'] = $oObject->GetAsHTML($oAttDef->GetCode() . '_friendlyname');\n\n\t\t\t\t// Checking if user can access object's external key\n\t\t\t\tif (SecurityHelper::IsActionAllowed($oApp, UR_ACTION_READ, $oAttDef->GetTargetClass()))\n\t\t\t\t{\n\t\t\t\t\t$aAttData['url'] = $oApp['url_generator']->generate('p_object_view', array('sObjectClass' => $oAttDef->GetTargetClass(), 'sObjectId' => $oObject->Get($oAttDef->GetCode())));\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif ($oAttDef->IsLinkSet())\n\t\t\t{\n\t\t\t\t// We skip it\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telseif ($oAttDef instanceof AttributeImage)\n            {\n                $oOrmDoc = $oObject->Get($oAttDef->GetCode());\n                if (is_object($oOrmDoc) && !$oOrmDoc->IsEmpty())\n                {\n                    $sUrl = $oApp['url_generator']->generate('p_object_document_display', array('sObjectClass' => get_class($oObject), 'sObjectId' => $oObject->GetKey(), 'sObjectField' => $oAttDef->GetCode(), 'cache' => 86400));\n                }\n                else\n                {\n                    $sUrl = $oAttDef->Get('default_image');\n                }\n                $aAttData['value'] = '<img src=\"' . $sUrl . '\" />';\n            }\n\t\t\telse\n\t\t\t{\n\t\t\t\t$aAttData['value'] = $oAttDef->GetAsHTML($oObject->Get($oAttDef->GetCode()));\n\n\t\t\t\tif ($oAttDef instanceof AttributeFriendlyName)\n\t\t\t\t{\n\t\t\t\t\t// Checking if user can access object\n\t\t\t\t\tif(SecurityHelper::IsActionAllowed($oApp, UR_ACTION_READ, $sObjectClass))\n\t\t\t\t\t{\n\t\t\t\t\t\t$aAttData['url'] = $oApp['url_generator']->generate('p_object_view', array('sObjectClass' => $sObjectClass, 'sObjectId' => $oObject->GetKey()));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$aObjectData['attributes'][$oAttDef->GetCode()] = $aAttData;\n\t\t}\n\n\t\treturn $aObjectData;\n\t}\n\n}\n", "<?php\n// Copyright (C) 2010-2017 Combodo SARL\n//\n//   This file is part of iTop.\n//\n//   iTop is free software; you can redistribute it and/or modify\t\n//   it under the terms of the GNU Affero General Public License as published by\n//   the Free Software Foundation, either version 3 of the License, or\n//   (at your option) any later version.\n//\n//   iTop is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n//\n//   You should have received a copy of the GNU Affero General Public License\n//   along with iTop. If not, see <http://www.gnu.org/licenses/>\n\n\n/**\n * Handles various ajax requests\n *\n * @copyright   Copyright (C) 2010-2017 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\n\nrequire_once('../approot.inc.php');\nrequire_once(APPROOT.'application/application.inc.php');\nrequire_once(APPROOT.'application/webpage.class.inc.php');\nrequire_once(APPROOT.'application/ajaxwebpage.class.inc.php');\nrequire_once(APPROOT.'application/pdfpage.class.inc.php');\nrequire_once(APPROOT.'application/wizardhelper.class.inc.php');\nrequire_once(APPROOT.'application/ui.linkswidget.class.inc.php');\nrequire_once(APPROOT.'application/ui.searchformforeignkeys.class.inc.php');\nrequire_once(APPROOT.'application/ui.extkeywidget.class.inc.php');\nrequire_once(APPROOT.'application/datatable.class.inc.php');\nrequire_once(APPROOT.'application/excelexporter.class.inc.php');\n\n\nfunction LogErrorMessage($sMsgPrefix, $aContextInfo) {\n\t$sCurrentUserLogin = UserRights::GetUser();\n\t$sContextInfo = urldecode(http_build_query($aContextInfo, '', ', '));\n\t$sErrorMessage = \"$sMsgPrefix - User='$sCurrentUserLogin', $sContextInfo\";\n\tIssueLog::Error($sErrorMessage);\n}\n\n\ntry\n{\n\trequire_once(APPROOT.'/application/startup.inc.php');\n\trequire_once(APPROOT.'/application/user.preferences.class.inc.php');\n\n\trequire_once(APPROOT.'/application/loginwebpage.class.inc.php');\n\t$operation = utils::ReadParam('operation', '');\n\n\t// Only allow export functions to portal users\n\tswitch ($operation)\n\t{\n\t\tcase 'export_build':\n\t\tcase 'export_cancel':\n\t\tcase 'export_download':\n\t\tcase 'cke_img_upload':\n\t\tcase 'cke_upload_and_browse':\n\t\tcase 'cke_browse':\n\t\t\t$sRequestedPortalId = null;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t$sRequestedPortalId = (MetaModel::GetConfig()->Get('disable_attachments_download_legacy_portal') === true) ? 'backoffice' : null;\n\t}\n\tLoginWebPage::DoLoginEx($sRequestedPortalId, false);\n\n\t$oPage = new ajax_page(\"\");\n\t$oPage->no_cache();\n\n\n\t$sFilter = utils::ReadParam('filter', '', false, 'raw_data');\n\t$sEncoding = utils::ReadParam('encoding', 'serialize');\n\t$sClass = utils::ReadParam('class', 'MissingAjaxParam', false, 'class');\n\t$sStyle = utils::ReadParam('style', 'list');\n\n\tswitch ($operation)\n\t{\n\t\tcase 'datatable':\n\t\tcase 'pagination':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$extraParams = utils::ReadParam('extra_param', '', false, 'raw_data');\n\t\t\t$aExtraParams = array();\n\t\t\tif (is_array($extraParams))\n\t\t\t{\n\t\t\t\t$aExtraParams = $extraParams;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$sExtraParams = stripslashes($extraParams);\n\t\t\t\tif (!empty($sExtraParams))\n\t\t\t\t{\n\t\t\t\t\t$val = json_decode(str_replace(\"'\", '\"', $sExtraParams), true /* associative array */);\n\t\t\t\t\tif ($val !== null)\n\t\t\t\t\t{\n\t\t\t\t\t\t$aExtraParams = $val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($sEncoding == 'oql')\n\t\t\t{\n\t\t\t\t$oFilter = DBSearch::FromOQL($sFilter);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oFilter = DBSearch::unserialize($sFilter);\n\t\t\t}\n\t\t\t$iStart = utils::ReadParam('start', 0);\n\t\t\t$iEnd = utils::ReadParam('end', 1);\n\t\t\t$iSortCol = utils::ReadParam('sort_col', 'null');\n\t\t\t$sSelectMode = utils::ReadParam('select_mode', '');\n\t\t\tif (!empty($sSelectMode) && ($sSelectMode != 'none'))\n\t\t\t{\n\t\t\t\t// The first column is used for the selection (radio / checkbox) and is not sortable\n\t\t\t\t$iSortCol--;\n\t\t\t}\n\t\t\t$bDisplayKey = utils::ReadParam('display_key', 'true') == 'true';\n\t\t\t$aColumns = utils::ReadParam('columns', array(), false, 'raw_data');\n\t\t\t$aClassAliases = utils::ReadParam('class_aliases', array());\n\t\t\t$iListId = utils::ReadParam('list_id', 0);\n\n\t\t\t// Filter the list to removed linked set since we are not able to display them here\n\t\t\t$aOrderBy = array();\n\t\t\t$iSortIndex = 0;\n\n\t\t\t$aColumnsLoad = array();\n\t\t\tforeach($aClassAliases as $sAlias => $sClassName)\n\t\t\t{\n\t\t\t\t$aColumnsLoad[$sAlias] = array();\n\t\t\t\tforeach($aColumns[$sAlias] as $sAttCode => $aData)\n\t\t\t\t{\n\t\t\t\t\tif ($aData['checked'] == 'true')\n\t\t\t\t\t{\n\t\t\t\t\t\t$aColumns[$sAlias][$sAttCode]['checked'] = true;\n\t\t\t\t\t\tif ($sAttCode == '_key_')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ($iSortCol == $iSortIndex)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!MetaModel::HasChildrenClasses($oFilter->GetClass()))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$aNameSpec = MetaModel::GetNameSpec($oFilter->GetClass());\n\t\t\t\t\t\t\t\t\tif ($aNameSpec[0] == '%1$s')\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// The name is made of a single column, let's sort according to the sort algorithm for this column\n\t\t\t\t\t\t\t\t\t\t$aOrderBy[$sAlias.'.'.$aNameSpec[1][0]] = (utils::ReadParam('sort_order', 'asc') == 'asc');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$aOrderBy[$sAlias.'.'.'friendlyname'] = (utils::ReadParam('sort_order', 'asc') == 'asc');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$aOrderBy[$sAlias.'.'.'friendlyname'] = (utils::ReadParam('sort_order', 'asc') == 'asc');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$oAttDef = MetaModel::GetAttributeDef($sClassName, $sAttCode);\n\t\t\t\t\t\t\tif ($oAttDef instanceof AttributeLinkedSet)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Removed from the display list\n\t\t\t\t\t\t\t\tunset($aColumns[$sAlias][$sAttCode]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$aColumnsLoad[$sAlias][] = $sAttCode;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ($iSortCol == $iSortIndex)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif ($oAttDef->IsExternalKey())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$sSortCol = $sAttCode.'_friendlyname';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$sSortCol = $sAttCode;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$aOrderBy[$sAlias.'.'.$sSortCol] = (utils::ReadParam('sort_order', 'asc') == 'asc');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$iSortIndex++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$aColumns[$sAlias][$sAttCode]['checked'] = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Load only the requested columns\n\t\t\t$oSet = new DBObjectSet($oFilter, $aOrderBy, $aExtraParams, null, $iEnd - $iStart, $iStart);\n\t\t\t$oSet->OptimizeColumnLoad($aColumnsLoad);\n\n\t\t\tif (isset($aExtraParams['show_obsolete_data']))\n\t\t\t{\n\t\t\t\t$bShowObsoleteData = $aExtraParams['show_obsolete_data'];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$bShowObsoleteData = utils::ShowObsoleteData();\n\t\t\t}\n\t\t\t$oSet->SetShowObsoleteData($bShowObsoleteData);\n\n\t\t\t$oDataTable = new DataTable($iListId, $oSet, $oSet->GetSelectedClasses());\n\t\t\tif ($operation == 'datatable')\n\t\t\t{\n\t\t\t\t// Redraw the whole table\n\t\t\t\t$sHtml = $oDataTable->UpdatePager($oPage, $iEnd - $iStart, $iStart); // Set the default page size\n\t\t\t\t$sHtml .= $oDataTable->GetHTMLTable($oPage, $aColumns, $sSelectMode, $iEnd - $iStart, $bDisplayKey, $aExtraParams);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// redraw just the needed rows\n\t\t\t\t$sHtml = $oDataTable->GetAsHTMLTableRows($oPage, $iEnd - $iStart, $aColumns, $sSelectMode, $bDisplayKey, $aExtraParams);\n\t\t\t}\n\t\t\t$oPage->add($sHtml);\n\t\t\tbreak;\n\n\t\tcase 'datatable_save_settings':\n\t\t\t$oPage->SetContentType('text/plain');\n\t\t\t$iPageSize = utils::ReadParam('page_size', 10);\n\t\t\t$sTableId = utils::ReadParam('table_id', null, false, 'raw_data');\n\t\t\t$bSaveAsDefaults = (utils::ReadParam('defaults', 'true') == 'true');\n\t\t\t$aClassAliases = utils::ReadParam('class_aliases', array(), false, 'raw_data');\n\t\t\t$aColumns = utils::ReadParam('columns', array(), false, 'raw_data');\n\n\t\t\tforeach($aColumns as $sAlias => $aList)\n\t\t\t{\n\t\t\t\tforeach($aList as $sAttCode => $aData)\n\t\t\t\t{\n\t\t\t\t\t$aColumns[$sAlias][$sAttCode]['checked'] = ($aData['checked'] == 'true');\n\t\t\t\t\t$aColumns[$sAlias][$sAttCode]['disabled'] = ($aData['disabled'] == 'true');\n\t\t\t\t\t$aColumns[$sAlias][$sAttCode]['sort'] = ($aData['sort']);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$oSettings = new DataTableSettings($aClassAliases, $sTableId);\n\t\t\t$oSettings->iDefaultPageSize = $iPageSize;\n\t\t\t$oSettings->aColumns = $aColumns;\n\n\t\t\tif ($bSaveAsDefaults)\n\t\t\t{\n\t\t\t\tif ($sTableId != null)\n\t\t\t\t{\n\t\t\t\t\t$oCurrSettings = DataTableSettings::GetTableSettings($aClassAliases, $sTableId, true /* bOnlyTable */);\n\t\t\t\t\tif ($oCurrSettings)\n\t\t\t\t\t{\n\t\t\t\t\t\t$oCurrSettings->ResetToDefault(false); // Reset this table to the defaults\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$bRet = $oSettings->SaveAsDefault();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$bRet = $oSettings->Save();\n\t\t\t}\n\t\t\t$oPage->add($bRet ? 'Ok' : 'KO');\n\t\t\tbreak;\n\n\t\tcase 'datatable_reset_settings':\n\t\t\t$oPage->SetContentType('text/plain');\n\t\t\t$sTableId = utils::ReadParam('table_id', null, false, 'raw_data');\n\t\t\t$aClassAliases = utils::ReadParam('class_aliases', array(), false, 'raw_data');\n\t\t\t$bResetAll = (utils::ReadParam('defaults', 'true') == 'true');\n\n\t\t\t$oSettings = new DataTableSettings($aClassAliases, $sTableId);\n\t\t\t$bRet = $oSettings->ResetToDefault($bResetAll);\n\t\t\t$oPage->add($bRet ? 'Ok' : 'KO');\n\t\t\tbreak;\n\n\t\t// ui.searchformforeignkeys\n\t\tcase 'ShowModalSearchForeignKeys':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$sTitle = utils::ReadParam('sTitle', '', false, 'raw_data');\n\t\t\t$sTargetClass = utils::ReadParam('sTargetClass', '', false, 'class');\n\t\t\t$oWidget = new UISearchFormForeignKeys($sTargetClass, $iInputId);\n\t\t\t$oWidget->ShowModalSearchForeignKeys($oPage, $sTitle);\n\t\t\tbreak;\n\n\t\t// ui.searchformforeignkeys\n\t\tcase 'GetFullListForeignKeysFromSelection':\n\t\t\t$oPage->SetContentType('application/json');\n\t\t\t$oWidget = new UISearchFormForeignKeys($sClass);\n\t\t\t$oFullSetFilter = new DBObjectSearch($sClass);\n\t\t\t$oWidget->GetFullListForeignKeysFromSelection($oPage, $oFullSetFilter);\n\t\t\tbreak;\n\n\t\t// ui.searchformforeignkeys\n\t\tcase 'ListResultsSearchForeignKeys':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sTargetClass = utils::ReadParam('sTargetClass', '', false, 'class');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$sRemoteClass = utils::ReadParam('sRemoteClass', '', false, 'class');\n\t\t\t$oWidget = new UISearchFormForeignKeys($sTargetClass, $iInputId);\n\t\t\t$oWidget->ListResultsSearchForeignKeys($oPage, $sRemoteClass);\n\t\t\tbreak;\n\n\n\t\t// ui.linkswidget\n\t\tcase 'addObjects':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sAttCode = utils::ReadParam('sAttCode', '');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$sSuffix = utils::ReadParam('sSuffix', '');\n\t\t\t$bDuplicates = (utils::ReadParam('bDuplicates', 'false') == 'false') ? false : true;\n\t\t\t$sJson = utils::ReadParam('json', '', false, 'raw_data');\n\t\t\tif (!empty($sJson))\n\t\t\t{\n\t\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Search form: no current object\n\t\t\t\t$oObj = null;\n\t\t\t}\n\t\t\t$oWidget = new UILinksWidget($sClass, $sAttCode, $iInputId, $sSuffix, $bDuplicates);\n\t\t\t$oAppContext = new ApplicationContext();\n\t\t\t$aPrefillFormParam = array( 'user' => $_SESSION[\"auth_user\"],\n\t\t\t\t'context' => $oAppContext->GetAsHash(),\n\t\t\t\t'att_code' => $sAttCode,\n\t\t\t\t'origin' => 'console',\n\t\t\t\t'source_obj' => $oObj\n\t\t\t);\n\t\t\t$aAlreadyLinked = utils::ReadParam('aAlreadyLinked', array());\n\t\t\t$oWidget->GetObjectPickerDialog($oPage, $oObj, $sJson, $aAlreadyLinked, $aPrefillFormParam);\n\t\t\tbreak;\n\t\t\n\t\t// ui.linkswidget\n\t\tcase 'searchObjectsToAdd':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sRemoteClass = utils::ReadParam('sRemoteClass', '', false, 'class');\n\t\t\t$sAttCode = utils::ReadParam('sAttCode', '');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$sSuffix = utils::ReadParam('sSuffix', '');\n\t\t\t$bDuplicates = (utils::ReadParam('bDuplicates', 'false') == 'false') ? false : true;\n\t\t\t$aAlreadyLinked = utils::ReadParam('aAlreadyLinked', array());\n\t\t\t$oWidget = new UILinksWidget($sClass, $sAttCode, $iInputId, $sSuffix, $bDuplicates);\n\t\t\t$oWidget->SearchObjectsToAdd($oPage, $sRemoteClass, $aAlreadyLinked);\n\t\t\tbreak;\n\n\t\t//ui.linksdirectwidget\n\t\tcase 'createObject':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sClass = utils::ReadParam('class', '', false, 'class');\n\t\t\t$sRealClass = utils::ReadParam('real_class', '', false, 'class');\n\t\t\t$sAttCode = utils::ReadParam('att_code', '');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sJson = utils::ReadParam('json', '', false, 'raw_data');\n\t\t\tif (!empty($sJson))\n\t\t\t{\n\t\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t}\n\t\t\t$oObj =\t$oWizardHelper->GetTargetObject();\n\t\t\t$oWidget = new UILinksWidgetDirect($sClass, $sAttCode, $iInputId);\n\t\t\t$oWidget->GetObjectCreationDlg($oPage, $sRealClass, $oObj);\n\t\tbreak;\n\t\t\n\t\t// ui.linksdirectwidget\n\t\tcase 'getLinksetRow':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sClass = utils::ReadParam('class', '', false, 'class');\n\t\t\t$sRealClass = utils::ReadParam('real_class', '', false, 'class');\n\t\t\t$sAttCode = utils::ReadParam('att_code', '');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$iTempId = utils::ReadParam('tempId', '');\n\t\t\t$aValues = utils::ReadParam('values', array(), false, 'raw_data');\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$oWidget = new UILinksWidgetDirect($sClass, $sAttCode, $iInputId);\n\t\t\t$oPage->add($oWidget->GetRow($oPage, $sRealClass, $aValues, -$iTempId));\n\t\t\tbreak;\n\n\t\t// ui.linksdirectwidget\n\t\tcase 'selectObjectsToAdd':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sClass = utils::ReadParam('class', '', false, 'class');\n\t\t\t$aAlreadyLinked = utils::ReadParam('aAlreadyLinked', array());\n\t\t\t$sJson = utils::ReadParam('json', '', false, 'raw_data');\n\t\t\t$oObj = null;\n\t\t\tif ($sJson != '')\n\t\t\t{\n\t\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t}\n\t\t\t$sRealClass = utils::ReadParam('real_class', '', false, 'class');\n\t\t\t$sAttCode = utils::ReadParam('att_code', '');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$iCurrObjectId = utils::ReadParam('iObjId', 0);\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$oAppContext = new ApplicationContext();\n\t\t\t$aPrefillFormParam = array( 'user' => $_SESSION[\"auth_user\"],\n\t\t\t\t'context' => $oAppContext->GetAsHash(),\n\t\t\t\t'att_code' => $sAttCode,\n\t\t\t\t'origin' => 'console',\n\t\t\t\t'source_obj' => $oObj,\n\t\t\t);\n\t\t\t$aPrefillFormParam['dest_class'] = ($oObj === null ? '' : $oObj->Get($sAttCode)->GetClass());\n\t\t\t$oWidget = new UILinksWidgetDirect($sClass, $sAttCode, $iInputId);\n\t\t\t$oWidget->GetObjectsSelectionDlg($oPage, $oObj, $aAlreadyLinked, $aPrefillFormParam);\n\t\t\tbreak;\n\n\t\t// ui.linksdirectwidget\n\t\tcase 'searchObjectsToAdd2':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sClass = utils::ReadParam('class', '', false, 'class');\n\t\t\t$sRealClass = utils::ReadParam('real_class', '', false, 'class');\n\t\t\t$sAttCode = utils::ReadParam('att_code', '');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$aAlreadyLinked = utils::ReadParam('aAlreadyLinked', array());\n\t\t\t$sJson = utils::ReadParam('json', '', false, 'raw_data');\n\t\t\t$oObj = null;\n\t\t\tif ($sJson != '')\n\t\t\t{\n\t\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t}\n\t\t\t$oAppContext = new ApplicationContext();\n\t\t\t$aPrefillFormParam = array( 'user' => $_SESSION[\"auth_user\"],\n\t\t\t\t'context' => $oAppContext->GetAsHash(),\n\t\t\t\t'att_code' => $sAttCode,\n\t\t\t\t'origin' => 'console',\n\t\t\t\t'source_obj' => $oObj,\n\t\t\t);\n\t\t\t$aPrefillFormParam['dest_class'] = ($oObj === null ? '' : $oObj->Get($sAttCode)->GetClass());\n\t\t\t$oWidget = new UILinksWidgetDirect($sClass, $sAttCode, $iInputId);\n\t\t\t$oWidget->SearchObjectsToAdd($oPage, $sRealClass, $aAlreadyLinked, $oObj, $aPrefillFormParam);\n\t\t\tbreak;\n\n\t\t// ui.linksdirectwidget\n\t\tcase 'doAddObjects2':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sClass = utils::ReadParam('class', '', false, 'class');\n\t\t\t$sRealClass = utils::ReadParam('real_class', '', false, 'class');\n\t\t\t$sAttCode = utils::ReadParam('att_code', '');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$iCurrObjectId = utils::ReadParam('iObjId', 0);\n\t\t\t$sFilter = utils::ReadParam('filter', '', false, 'raw_data');\n\t\t\tif ($sFilter != '')\n\t\t\t{\n\t\t\t\t$oFullSetFilter = DBObjectSearch::unserialize($sFilter);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oLinksetDef = MetaModel::GetAttributeDef($sClass, $sAttCode);\n\t\t\t\t$valuesDef = $oLinksetDef->GetValuesDef();\n\t\t\t\tif ($valuesDef === null)\n\t\t\t\t{\n\t\t\t\t\t$oFullSetFilter = new DBObjectSearch($oLinksetDef->GetLinkedClass());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (!$valuesDef instanceof ValueSetObjects)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new Exception('Error: only ValueSetObjects are supported for \"allowed_values\" in AttributeLinkedSet ('.$this->sClass.'/'.$this->sAttCode.').');\n\t\t\t\t\t}\n\t\t\t\t\t$oFullSetFilter = DBObjectSearch::FromOQL($valuesDef->GetFilterExpression());\n\t\t\t\t}\n\t\t\t}\n\t\t\t$oWidget = new UILinksWidgetDirect($sClass, $sAttCode, $iInputId);\n\t\t\t$oWidget->DoAddObjects($oPage, $oFullSetFilter);\n\t\t\tbreak;\n\n\t\t////////////////////////////////////////////////////////////\n\n\t\t// ui.extkeywidget\n\t\tcase 'searchObjectsToSelect':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sTargetClass = utils::ReadParam('sTargetClass', '', false, 'class');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$sRemoteClass = utils::ReadParam('sRemoteClass', '', false, 'class');\n\t\t\t$sFilter = utils::ReadParam('sFilter', '', false, 'raw_data');\n\t\t\t$sJson = utils::ReadParam('json', '', false, 'raw_data');\n\t\t\t$sAttCode = utils::ReadParam('sAttCode', '');\n\t\t\t$bSearchMode = (utils::ReadParam('bSearchMode', 'false') == 'true');\n\t\t\tif (!empty($sJson))\n\t\t\t{\n\t\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Search form: no current object\n\t\t\t\t$oObj = null;\n\t\t\t}\n\t\t\t$oWidget = new UIExtKeyWidget($sTargetClass, $iInputId, $sAttCode, $bSearchMode);\n\t\t\t$oWidget->SearchObjectsToSelect($oPage, $sFilter, $sRemoteClass, $oObj);\n\t\t\tbreak;\n\n\t\t// ui.extkeywidget: autocomplete\n\t\tcase 'ac_extkey':\n\t\t\t$oPage->SetContentType('text/plain');\n\t\t\t$sTargetClass = utils::ReadParam('sTargetClass', '', false, 'class');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$sFilter = utils::ReadParam('sFilter', '', false, 'raw_data');\n\t\t\t$sJson = utils::ReadParam('json', '', false, 'raw_data');\n\t\t\t$sContains = utils::ReadParam('q', '', false, 'raw_data');\n\t\t\t$bSearchMode = (utils::ReadParam('bSearchMode', 'false') == 'true');\n\t\t\t$sOutputFormat = utils::ReadParam('sOutputFormat', UIExtKeyWidget::ENUM_OUTPUT_FORMAT_CSV, false, 'raw_data');\n            $sAutocompleteOperation = utils::ReadParam('sAutocompleteOperation', null, false, 'raw_data');\n\t\t\tif ($sContains != '')\n\t\t\t{\n\t\t\t\tif (!empty($sJson))\n\t\t\t\t{\n\t\t\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Search form: no current object\n\t\t\t\t\t$oObj = null;\n\t\t\t\t}\n\t\t\t\t$oWidget = new UIExtKeyWidget($sTargetClass, $iInputId, '', $bSearchMode);\n\t\t\t\t$oWidget->AutoComplete($oPage, $sFilter, $oObj, $sContains, $sOutputFormat, $sAutocompleteOperation);\n\t\t\t}\n\t\t\tbreak;\n\n\t\t// ui.extkeywidget\n\t\tcase 'objectSearchForm':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sTargetClass = utils::ReadParam('sTargetClass', '', false, 'class');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$sTitle = utils::ReadParam('sTitle', '', false, 'raw_data');\n\t\t\t$sAttCode = utils::ReadParam('sAttCode', '');\n\t\t\t$bSearchMode = (utils::ReadParam('bSearchMode', 'false') == 'true');\n\t\t\t$oWidget = new UIExtKeyWidget($sTargetClass, $iInputId, $sAttCode, $bSearchMode);\n\t\t\t$sJson = utils::ReadParam('json', '', false, 'raw_data');\n\t\t\tif (!empty($sJson))\n\t\t\t{\n\t\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Search form: no current object\n\t\t\t\t$oObj = null;\n\t\t\t}\n\t\t\t$oWidget->GetSearchDialog($oPage, $sTitle, $oObj);\n\t\t\tbreak;\n\n\t\t// ui.extkeywidget\n\t\tcase 'objectCreationForm':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t// Retrieving parameters\n\t\t\t$sTargetClass = utils::ReadParam('sTargetClass', '', false, 'class');\n\t        $iInputId = utils::ReadParam('iInputId', '');\n\t        $sAttCode = utils::ReadParam('sAttCode', '');\n\t        $sJson = utils::ReadParam('json', '', false, 'raw_data');\n\t\t\t// Building form, if target class is abstract we ask the user for the desired leaf class\n\t        $oWidget = new UIExtKeyWidget($sTargetClass, $iInputId, $sAttCode, false);\n\t        if(MetaModel::IsAbstract($sTargetClass))\n\t        {\n\t            $oWidget->GetClassSelectionForm($oPage);\n\t        }\n\t        else\n\t        {\n\t\t        $aPrefillFormParam = array();\n\t            if (!empty($sJson))\n\t            {\n\t\t            $oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t            $oObj = $oWizardHelper->GetTargetObject();\n\t\t            $oAppContext = new ApplicationContext();\n\t\t            $aPrefillFormParam = array( 'user' => $_SESSION[\"auth_user\"],\n\t\t\t                                    'context' => $oAppContext->GetAsHash(),\n\t\t\t                                    'att_code' => $sAttCode,\n\t\t                                        'source_obj' => $oObj,\n\t\t\t                                    'origin' => 'console'\n\t\t            );\n\t            }\n\t            else\n\t            {\n\t                // Search form: no current object\n\t                $oObj = null;\n\t            }\n\t            $oWidget->GetObjectCreationForm($oPage, $oObj, $aPrefillFormParam);\n\t        }\n\t\t\tbreak;\n\t\t\n\t\t// ui.extkeywidget\n\t\tcase 'doCreateObject':\n\t\t\t$oPage->SetContentType('application/json');\n\t\t\t$sTargetClass = utils::ReadParam('sTargetClass', '', false, 'class');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$sFormPrefix = utils::ReadParam('sFormPrefix', '');\n\t\t\t$sAttCode = utils::ReadParam('sAttCode', '');\n\t\t\t$oWidget = new UIExtKeyWidget($sTargetClass, $iInputId, $sAttCode, false);\n\t\t\t$aResult = $oWidget->DoCreateObject($oPage);\n\t\t\techo json_encode($aResult);\n\t\t\tbreak;\n\n\t\t// ui.extkeywidget\n\t\tcase 'getObjectName':\n\t\t\t$oPage->SetContentType('application/json');\n\t\t\t$sTargetClass = utils::ReadParam('sTargetClass', '', false, 'class');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$iObjectId = utils::ReadParam('iObjectId', '');\n\t\t\t$bSearchMode = (utils::ReadParam('bSearchMode', 'false') == 'true');\n\t\t\t$oWidget = new UIExtKeyWidget($sTargetClass, $iInputId, '', $bSearchMode);\n\t\t\t$sName = $oWidget->GetObjectName($iObjectId);\n\t\t\techo json_encode(array('name' => $sName));\n\t\t\tbreak;\n\n\t\t// ui.extkeywidget\n\t\tcase 'displayHierarchy':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sTargetClass = utils::ReadParam('sTargetClass', '', false, 'class');\n\t\t\t$sInputId = utils::ReadParam('sInputId', '');\n\t\t\t$sFilter = utils::ReadParam('sFilter', '', false, 'raw_data');\n\t\t\t$sJson = utils::ReadParam('json', '', false, 'raw_data');\n\t\t\t$currValue = utils::ReadParam('value', '');\n\t\t\t$bSearchMode = (utils::ReadParam('bSearchMode', 'false') == 'true');\n\t\t\tif (!empty($sJson))\n\t\t\t{\n\t\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Search form: no current object\n\t\t\t\t$oObj = null;\n\t\t\t}\n\t\t\t$oWidget = new UIExtKeyWidget($sTargetClass, $sInputId, '', $bSearchMode);\n\t\t\t$oWidget->DisplayHierarchy($oPage, $sFilter, $currValue, $oObj);\n\t\t\tbreak;\n\n\t\t////////////////////////////////////////////////////\n\n\t\t// ui.linkswidget\n\t\tcase 'doAddObjects':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sAttCode = utils::ReadParam('sAttCode', '');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$sSuffix = utils::ReadParam('sSuffix', '');\n\t\t\t$sRemoteClass = utils::ReadParam('sRemoteClass', $sClass, false, 'class');\n\t\t\t$bDuplicates = (utils::ReadParam('bDuplicates', 'false') == 'false') ? false : true;\n\t\t\t$sJson = utils::ReadParam('json', '', false, 'raw_data');\n\t\t\t$iMaxAddedId = utils::ReadParam('max_added_id');\n\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t$oWidget = new UILinksWidget($sClass, $sAttCode, $iInputId, $sSuffix, $bDuplicates);\n\t\t\tif ($sFilter != '')\n\t\t\t{\n\t\t\t\t$oFullSetFilter = DBObjectSearch::unserialize($sFilter);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oFullSetFilter = new DBObjectSearch($sRemoteClass);\n\t\t\t}\n\t\t\t$oWidget->DoAddObjects($oPage, $iMaxAddedId, $oFullSetFilter, $oObj);\n\t\t\tbreak;\n\n\t\t////////////////////////////////////////////////////////////\n\n\t\tcase 'wizard_helper_preview':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sJson = utils::ReadParam('json_obj', '', false, 'raw_data');\n\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t$oObj->DisplayBareProperties($oPage);\n\t\t\tbreak;\n\n\t\tcase 'wizard_helper':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sJson = utils::ReadParam('json_obj', '', false, 'raw_data');\n\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t$sClass = $oWizardHelper->GetTargetClass();\n\t\t\tforeach($oWizardHelper->GetFieldsForDefaultValue() as $sAttCode)\n\t\t\t{\n\t\t\t\t$oAttDef = MetaModel::GetAttributeDef($sClass, $sAttCode);\n\t\t\t\t$defaultValue = $oAttDef->GetDefaultValue($oObj);\n\t\t\t\t$oWizardHelper->SetDefaultValue($sAttCode, $defaultValue);\n\t\t\t\t$oObj->Set($sAttCode, $defaultValue);\n\t\t\t}\n\t\t\t$sFormPrefix = $oWizardHelper->GetFormPrefix();\n\t\t\t$aExpectedAttributes = ($oWizardHelper->GetStimulus() === null) ? array() : $oObj->GetTransitionAttributes($oWizardHelper->GetStimulus(), $oWizardHelper->GetInitialState());\n\t\t\tforeach($oWizardHelper->GetFieldsForAllowedValues() as $sAttCode)\n\t\t\t{\n\t\t\t\t$sId = $oWizardHelper->GetIdForField($sAttCode);\n\t\t\t\tif ($sId != '')\n\t\t\t\t{\n\t\t\t\t\tif (array_key_exists($sAttCode, $aExpectedAttributes))\n\t\t\t\t\t{\n\t\t\t\t\t\t$iFlags = $aExpectedAttributes[$sAttCode];\n\t\t\t\t\t}\n\t\t\t\t\telseif ($oObj->IsNew())\n\t\t\t\t\t{\n\t\t\t\t\t\t$iFlags = $oObj->GetInitialStateAttributeFlags($sAttCode);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$iFlags = $oObj->GetAttributeFlags($sAttCode);\n\t\t\t\t\t}\n\t\t\t\t\tif ($iFlags & OPT_ATT_READONLY)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sHTMLValue = \"<span id=\\\"field_{$sId}\\\">\".$oObj->GetAsHTML($sAttCode);\n\t\t\t\t\t\t$oWizardHelper->SetAllowedValuesHtml($sAttCode, $sHTMLValue);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// It may happen that the field we'd like to update does not\n\t\t\t\t\t\t// exist in the form. For example, if the field should be hidden/read-only\n\t\t\t\t\t\t// in the current state of the object\n\t\t\t\t\t\t$value = $oObj->Get($sAttCode);\n\t\t\t\t\t\t$displayValue = $oObj->GetEditValue($sAttCode);\n\t\t\t\t\t\t$oAttDef = MetaModel::GetAttributeDef($sClass, $sAttCode);\n\t\t\t\t\t\tif (!$oAttDef->IsWritable())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Even non-writable fields (like AttributeExternal) can be refreshed\n\t\t\t\t\t\t\t$sHTMLValue = $oObj->GetAsHTML($sAttCode);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$iFlags = MetaModel::GetAttributeFlags($sClass, $oObj->GetState(), $sAttCode);\n\t\t\t\t\t\t\t$sHTMLValue = cmdbAbstractObject::GetFormElementForField($oPage, $sClass, $sAttCode, $oAttDef, $value, $displayValue, $sId, '', $iFlags, array('this' => $oObj, 'formPrefix' => $sFormPrefix), false);\n\t\t\t\t\t\t\t// Make sure that we immediately validate the field when we reload it\n\t\t\t\t\t\t\t$oPage->add_ready_script(\"$('#$sId').trigger('validate');\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$oWizardHelper->SetAllowedValuesHtml($sAttCode, $sHTMLValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$oPage->add_script(\"oWizardHelper{$sFormPrefix}.m_oData=\".$oWizardHelper->ToJSON().\";\\noWizardHelper{$sFormPrefix}.UpdateFields();\\n\");\n\t\t\tbreak;\n\n\t\tcase 'obj_creation_form':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sJson = utils::ReadParam('json_obj', '', false, 'raw_data');\n\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t$sClass = $oWizardHelper->GetTargetClass();\n\t\t\t$sTargetState = utils::ReadParam('target_state', '');\n\t\t\t$iTransactionId = utils::ReadParam('transaction_id', '', false, 'transaction_id');\n\t\t\t$oObj->Set(MetaModel::GetStateAttributeCode($sClass), $sTargetState);\n\t\t\tcmdbAbstractObject::DisplayCreationForm($oPage, $sClass, $oObj, array(), array('action' => utils::GetAbsoluteUrlAppRoot().'pages/UI.php', 'transaction_id' => $iTransactionId));\n\t\t\tbreak;\n\n\t\t// DisplayBlock\n\t\tcase 'ajax':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\tif ($sFilter != \"\")\n\t\t\t{\n\t\t\t\t$sExtraParams = stripslashes(utils::ReadParam('extra_params', '', false, 'raw_data'));\n\t\t\t\t$aExtraParams = array();\n\t\t\t\tif (!empty($sExtraParams))\n\t\t\t\t{\n\t\t\t\t\t$aExtraParams = json_decode(str_replace(\"'\", '\"', $sExtraParams), true /* associative array */);\n\t\t\t\t}\n\t\t\t\t// Restore the app context from the ExtraParams\n\t\t\t\t$oAppContext = new ApplicationContext(false); // false => don't read the context yet !\n\t\t\t\t$aContext = array();\n\t\t\t\tforeach($oAppContext->GetNames() as $sName)\n\t\t\t\t{\n\t\t\t\t\t$sParamName = 'c['.$sName.']';\n\t\t\t\t\tif (isset($aExtraParams[$sParamName]))\n\t\t\t\t\t{\n\t\t\t\t\t\t$aContext[$sName] = $aExtraParams[$sParamName];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$_REQUEST['c'] = $aContext;\n\t\t\t\tif ($sEncoding == 'oql')\n\t\t\t\t{\n\t\t\t\t\t$oFilter = DBSearch::FromOQL($sFilter);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t$oFilter = DBSearch::unserialize($sFilter);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (CoreException $e)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sFilter = utils::HtmlEntities($sFilter);\n\t\t\t\t\t\t$oPage->p(\"Invalid query (invalid filter) : <code>$sFilter</code>\");\n\t\t\t\t\t\tIssueLog::Error(\"ajax.render operation='ajax', invalid DBSearch filter param : $sFilter\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$oDisplayBlock = new DisplayBlock($oFilter, $sStyle, false);\n\t\t\t\t$aExtraParams['display_limit'] = true;\n\t\t\t\t$aExtraParams['truncated'] = true;\n\t\t\t\t$oDisplayBlock->RenderContent($oPage, $aExtraParams);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oPage->p(\"Invalid query (empty filter).\");\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'displayCSVHistory':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$bShowAll = (utils::ReadParam('showall', 'false') == 'true');\n\t\t\tBulkChange::DisplayImportHistory($oPage, true, $bShowAll);\n\t\t\tbreak;\n\n\t\tcase 'details':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$key = utils::ReadParam('id', 0);\n\t\t\t$oFilter = new DBObjectSearch($sClass);\n\t\t\t$oFilter->AddCondition('id', $key, '=');\n\t\t\t$oDisplayBlock = new DisplayBlock($oFilter, 'details', false);\n\t\t\t$oDisplayBlock->RenderContent($oPage);\n\t\t\tbreak;\n\n\t\tcase 'pie_chart':\n\t\t\t$oPage->SetContentType('application/json');\n\t\t\t$sGroupBy = utils::ReadParam('group_by', '');\n\t\t\tif ($sFilter != '')\n\t\t\t{\n\t\t\t\tif ($sEncoding == 'oql')\n\t\t\t\t{\n\t\t\t\t\t$oFilter = DBSearch::FromOQL($sFilter);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$oFilter = DBSearch::unserialize($sFilter);\n\t\t\t\t}\n\t\t\t\t$oDisplayBlock = new DisplayBlock($oFilter, 'pie_chart_ajax', false);\n\t\t\t\t$oDisplayBlock->RenderContent($oPage, array('group_by' => $sGroupBy));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\n\t\t\t\t$oPage->add(\"<chart>\\n<chart_type>3d pie</chart_type><!-- empty filter '$sFilter' --></chart>\\n.\");\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'chart':\n\t\t\t// Workaround for IE8 + IIS + HTTPS\n\t\t\t// See TRAC #363, fix described here: http://forums.codecharge.com/posts.php?post_id=97771\n\t\t\t$oPage->add_header(\"Expires: Fri, 17 Jul 1970 05:00:00 GMT\");\n\t\t\t$oPage->add_header(\"Cache-Control: cache, must-revalidate\");\n\t\t\t$oPage->add_header(\"Pragma: public\");\n\n\t\t\t$aParams = utils::ReadParam('params', array(), false, 'raw_data');\n\t\t\tif ($sFilter != '')\n\t\t\t{\n\t\t\t\t$oFilter = DBSearch::unserialize($sFilter);\n\t\t\t\t$oDisplayBlock = new DisplayBlock($oFilter, 'chart_ajax', false);\n\t\t\t\t$oDisplayBlock->RenderContent($oPage, $aParams);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\n\t\t\t\t$oPage->add(\"<chart>\\n<chart_type>3d pie</chart_type><!-- empty filter '$sFilter' --></chart>\\n.\");\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'modal_details':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$key = utils::ReadParam('id', 0);\n\t\t\t$oFilter = new DBObjectSearch($sClass);\n\t\t\t$oFilter->AddCondition('id', $key, '=');\n\t\t\t$oPage->Add(\"<p style=\\\"width:100%; margin-top:-5px;padding:3px; background-color:#33f; color:#fff;\\\">Object Details</p>\\n\");\n\t\t\t$oDisplayBlock = new DisplayBlock($oFilter, 'details', false);\n\t\t\t$oDisplayBlock->RenderContent($oPage);\n\t\t\t$oPage->Add(\"<input type=\\\"button\\\" class=\\\"jqmClose\\\" value=\\\" Close \\\" />\\n\");\n\t\t\tbreak;\n\n\t\tcase 'link':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sClass = utils::ReadParam('sclass', 'logInfra', false, 'class');\n\t\t\t$sAttCode = utils::ReadParam('attCode', 'name');\n\t\t\t//$sOrg = utils::ReadParam('org_id', '');\n\t\t\t$sName = utils::ReadParam('q', '');\n\t\t\t$iMaxCount = utils::ReadParam('max', 30);\n\t\t\t$iCount = 0;\n\t\t\t$oFilter = new DBObjectSearch($sClass);\n\t\t\t$oFilter->AddCondition($sAttCode, $sName, 'Begins with');\n\t\t\t//$oFilter->AddCondition('org_id', $sOrg, '=');\n\t\t\t$oSet = new CMDBObjectSet($oFilter, array($sAttCode => true));\n\t\t\twhile (($iCount < $iMaxCount) && ($oObj = $oSet->fetch()))\n\t\t\t{\n\t\t\t\t$oPage->add($oObj->GetAsHTML($sAttCode).\"|\".$oObj->GetKey().\"\\n\");\n\t\t\t\t$iCount++;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'combo_options':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$oFilter = DBSearch::FromOQL($sFilter);\n\t\t\t$oSet = new CMDBObjectSet($oFilter);\n\t\t\twhile ($oObj = $oSet->fetch())\n\t\t\t{\n\t\t\t\t$oPage->add('<option title=\"Here is more information...\" value=\"'.$oObj->GetKey().'\">'.$oObj->GetName().'</option>');\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'display_document':\n\t\t\t$id = utils::ReadParam('id', '');\n\t\t\t$sField = utils::ReadParam('field', '');\n\t\t\tif (!empty($sClass) && ($sClass != 'InlineImage') && !empty($id) && !empty($sField))\n\t\t\t{\n\t\t\t\t$oPage->add_header('X-Frame-Options:'); // resets header, see N\u00b03416\n\t\t\t\tormDocument::DownloadDocument($oPage, $sClass, $id, $sField, 'inline');\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'search_form':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sClass = utils::ReadParam('className', '', false, 'class');\n\t\t\t$sRootClass = utils::ReadParam('baseClass', '', false, 'class');\n\t\t\t$currentId = utils::ReadParam('currentId', '');\n\t\t\t$sTableId = utils::ReadParam('_table_id_', null, false, 'raw_data');\n\t\t\t$sAction = utils::ReadParam('action', '');\n\t\t\t$sSelectionMode = utils::ReadParam('selection_mode', null,false,'raw_data');\n\t\t\t$sResultListOuterSelector = utils::ReadParam('result_list_outer_selector', null,false,'raw_data');\n\t\t\t$scssCount = utils::ReadParam('css_count', null,false,'raw_data');\n\t\t\t$sTableInnerId = utils::ReadParam('table_inner_id', null,false,'raw_data');\n\n\t\t\t$oFilter = new DBObjectSearch($sClass);\n\t\t\t$oSet = new CMDBObjectSet($oFilter);\n\t\t\t$sHtml = cmdbAbstractObject::GetSearchForm($oPage, $oSet, array('currentId' => $currentId,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'baseClass' => $sRootClass,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'action' => $sAction,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'table_id' => $sTableId,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'selection_mode' => $sSelectionMode,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'result_list_outer_selector' => $sResultListOuterSelector,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'cssCount' => $scssCount,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'table_inner_id' => $sTableInnerId));\n\t\t\t$oPage->add($sHtml);\n\t\t\tbreak;\n\n\t\tcase 'set_pref':\n\t\t\t$sCode = utils::ReadPostedParam('code', '');\n\t\t\t$sValue = utils::ReadPostedParam('value', '', 'raw_data');\n\t\t\tappUserPreferences::SetPref($sCode, $sValue);\n\t\t\tbreak;\n\n\t\tcase 'erase_all_pref':\n\t\t\t// Can be useful in case a user got some corrupted prefs...\n\t\t\tappUserPreferences::ClearPreferences();\n\t\t\tbreak;\n\n\t\tcase 'on_form_cancel':\n\t\t\t// Called when a creation/modification form is cancelled by the end-user\n\t\t\t// Let's take this opportunity to inform the plug-ins so that they can perform some cleanup\n\t\t\t$iTransactionId = utils::ReadParam('transaction_id', 0, false, 'transaction_id');\n\t\t\t$sTempId = utils::GetUploadTempId($iTransactionId);\n\t\t\tInlineImage::OnFormCancel($sTempId);\n\t\t\t/** @var \\iApplicationUIExtension $oExtensionInstance */\n\t\t\tforeach(MetaModel::EnumPlugins('iApplicationUIExtension') as $oExtensionInstance)\n\t\t\t{\n\t\t\t\t$oExtensionInstance->OnFormCancel($sTempId);\n\t\t\t}\n\t\t\t$sObjClass = utils::ReadParam('obj_class', '', false, 'class');\n\t\t\t$iObjKey = (int)utils::ReadParam('obj_key', 0, false, 'integer');\n\t\t\t$sToken = utils::ReadParam('token', 0, false, 'raw_data');\n\t\t\tif (($sObjClass != '') && ($iObjKey != 0) && ($sToken != ''))\n\t\t\t{\n\t\t\t\t$bReleaseLock = iTopOwnershipLock::ReleaseLock($sObjClass, $iObjKey, $sToken);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'dashboard':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$id = (int)utils::ReadParam('id', 0);\n\t\t\t$sAttCode = utils::ReadParam('attcode', '');\n\t\t\t/** @var \\cmdbAbstractObject $oObj */\n\t\t\t$oObj = MetaModel::GetObject($sClass, $id);\n\t\t\t$oObj->DisplayDashboard($oPage, $sAttCode);\n\t\t\tbreak;\n\n\t\tcase 'export_dashboard':\n\t\t\t$sDashboardId = utils::ReadParam('id', '', false, 'raw_data');\n\t\t\t$sDashboardFile = utils::ReadParam('file', '', false, 'raw_data');\n\t\t\t$oDashboard = RuntimeDashboard::GetDashboard($sDashboardFile, $sDashboardId);\n\t\t\tif (!is_null($oDashboard))\n\t\t\t{\n\t\t\t\t$oPage->TrashUnexpectedOutput();\n\t\t\t\t$oPage->SetContentType('text/xml');\n\t\t\t\t$oPage->SetContentDisposition('attachment', 'dashboard_'.$oDashboard->GetTitle().'.xml');\n\t\t\t\t$oPage->add($oDashboard->ToXml());\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'import_dashboard':\n\t\t\t$sTransactionId = utils::ReadParam('transaction_id', '', false, 'transaction_id');\n\t\t\tif (!utils::IsTransactionValid($sTransactionId, true))\n\t\t\t{\n\t\t\t\tthrow new SecurityException('ajax.render.php import_dashboard : invalid transaction_id');\n\t\t\t}\n\t\t\t$sDashboardId = utils::ReadParam('id', '', false, 'raw_data');\n\t\t\t$sDashboardFile = utils::ReadParam('file', '', false, 'raw_data');\n\t\t\t$oDashboard = RuntimeDashboard::GetDashboard($sDashboardFile, $sDashboardId);\n\t\t\t$aResult = array('error' => '');\n\t\t\tif (!is_null($oDashboard))\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t$oDoc = utils::ReadPostedDocument('dashboard_upload_file');\n\t\t\t\t\t$oDashboard->FromXml($oDoc->GetData());\n\t\t\t\t\t$oDashboard->Save();\n\t\t\t\t} catch (DOMException $e)\n\t\t\t\t{\n\t\t\t\t\t$aResult = array('error' => Dict::S('UI:Error:InvalidDashboardFile'));\n\t\t\t\t} catch (Exception $e)\n\t\t\t\t{\n\t\t\t\t\t$aResult = array('error' => $e->getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$aResult['error'] = 'Dashboard id=\"'.$sDashboardId.'\" not found.';\n\t\t\t}\n\t\t\t$oPage->add(json_encode($aResult));\n\t\t\tbreak;\n\n\t\tcase 'toggle_dashboard':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sDashboardId = utils::ReadParam('dashboard_id', '', false, 'raw_data');\n\n\t\t\t$bStandardSelected = appUserPreferences::GetPref('display_original_dashboard_'.$sDashboardId, false);\n\t\t\tappUserPreferences::UnsetPref('display_original_dashboard_'.$sDashboardId);\n\t\t\tappUserPreferences::SetPref('display_original_dashboard_'.$sDashboardId, !$bStandardSelected);\n\n\t\t\t$aExtraParams = utils::ReadParam('extra_params', array(), false, 'raw_data');\n\t\t\t$sDashboardFile = utils::ReadParam('file', '', false, 'raw_data');\n\t\t\t$sReloadURL = utils::ReadParam('reload_url', '', false, 'raw_data');\n\t\t\t$oDashboard = RuntimeDashboard::GetDashboard($sDashboardFile, $sDashboardId);\n\t\t\t$aResult = array('error' => '');\n\t\t\tif (!is_null($oDashboard))\n\t\t\t{\n\t\t\t\tif (!empty($sReloadURL))\n\t\t\t\t{\n\t\t\t\t\t$oDashboard->SetReloadURL($sReloadURL);\n\t\t\t\t}\n\t\t\t\t$oDashboard->Render($oPage, false, $aExtraParams);\n\t\t\t}\n\t\t\t$oPage->add_ready_script(\"$('.dashboard_contents table.listResults').tableHover(); $('.dashboard_contents table.listResults').tablesorter( { widgets: ['myZebra', 'truncatedList']} );\");\n\t\t\tbreak;\n\n\t\tcase 'reload_dashboard':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sDashboardId = utils::ReadParam('dashboard_id', '', false, 'raw_data');\n\t\t\t$aExtraParams = utils::ReadParam('extra_params', array(), false, 'raw_data');\n\t\t\t$sDashboardFile = utils::ReadParam('file', '', false, 'raw_data');\n\t\t\t$sReloadURL = utils::ReadParam('reload_url', '', false, 'raw_data');\n\t\t\t$oDashboard = RuntimeDashboard::GetDashboard($sDashboardFile, $sDashboardId);\n\t\t\t$aResult = array('error' => '');\n\t\t\tif (!is_null($oDashboard))\n\t\t\t{\n\t\t\t\tif (!empty($sReloadURL))\n\t\t\t\t{\n\t\t\t\t\t$oDashboard->SetReloadURL($sReloadURL);\n\t\t\t\t}\n\t\t\t\t$oDashboard->Render($oPage, false, $aExtraParams);\n\t\t\t}\n\t\t\t$oPage->add_ready_script(\"$('.dashboard_contents table.listResults').tableHover(); $('.dashboard_contents table.listResults').tablesorter( { widgets: ['myZebra', 'truncatedList']} );\");\n\t\t\tbreak;\n\n\t\tcase 'save_dashboard':\n\t\t\t$sDashboardId = utils::ReadParam('dashboard_id', '', false, 'raw_data');\n\t\t\t$aExtraParams = utils::ReadParam('extra_params', array(), false, 'raw_data');\n\t\t\t$sReloadURL = utils::ReadParam('reload_url', '', false, 'raw_data');\n\t\t\t$sJSExtraParams = json_encode($aExtraParams);\n\t\t\t$aParams = array();\n\t\t\t$aParams['layout_class'] = utils::ReadParam('layout_class', '');\n\t\t\t$aParams['title'] = utils::ReadParam('title', '', false, 'raw_data');\n\t\t\t$aParams['auto_reload'] = utils::ReadParam('auto_reload', false);\n\t\t\t$aParams['auto_reload_sec'] = utils::ReadParam('auto_reload_sec', 300);\n\t\t\t$aParams['cells'] = utils::ReadParam('cells', array(), false, 'raw_data');\n\t\t\t$oDashboard = new RuntimeDashboard($sDashboardId);\n\t\t\t$oDashboard->FromParams($aParams);\n\t\t\t$oDashboard->Save();\n\t\t\t$sDashboardFile = addslashes(utils::ReadParam('file', '', false, 'raw_data'));\n\t\t\t$sDivId = preg_replace('/[^a-zA-Z0-9_]/', '', $sDashboardId);\n\t\t\t// trigger a reload of the current page since the dashboard just changed\n\t\t\t$oPage->add_script(\n<<<EOF\n\t\t\t$('.dashboard_contents#$sDivId').block();\n\t\t\t$.post(GetAbsoluteUrlAppRoot()+'pages/ajax.render.php',\n\t\t\t   { operation: 'reload_dashboard', dashboard_id: '$sDashboardId', file: '$sDashboardFile', extra_params: $sJSExtraParams, reload_url: '$sReloadURL'},\n\t\t\t   function(data){\n\t\t\t\t $('.dashboard_contents#$sDivId').html(data);\n\t\t\t\t $('.dashboard_contents#$sDivId').unblock();\n\t\t\t\t}\n\t\t\t );\nEOF\n\t\t\t);\n\t\t\tbreak;\n\n\t\tcase 'revert_dashboard':\n\t\t\t$sDashboardId = utils::ReadParam('dashboard_id', '', false, 'raw_data');\n\t\t\t$sReloadURL = utils::ReadParam('reload_url', '', false, 'raw_data');\n\t\t\tappUserPreferences::UnsetPref('display_original_dashboard_'.$sDashboardId);\n\t\t\t$oDashboard = new RuntimeDashboard($sDashboardId);\n\t\t\t$oDashboard->Revert();\n\t\t\t$sFile = addslashes($oDashboard->GetDefinitionFile());\n\t\t\t$sDivId = preg_replace('/[^a-zA-Z0-9_]/', '', $sDashboardId);\n\t\t\t// trigger a reload of the current page since the dashboard just changed\n\t\t\t$oPage->add_script(\n<<<EOF\n\t\t\t$('.dashboard_contents#$sDivId').block();\n\t\t\t$.post(GetAbsoluteUrlAppRoot()+'pages/ajax.render.php',\n\t\t\t   { operation: 'reload_dashboard', dashboard_id: '$sDashboardId', file: '$sFile', reload_url: '$sReloadURL'},\n\t\t\t   function(data){\n\t\t\t\t $('.dashboard_contents#$sDivId').html(data);\n\t\t\t\t $('.dashboard_contents#$sDivId').unblock();\n\t\t\t\t}\n\t\t\t );\nEOF\n\t\t\t);\n\t\t\tbreak;\n\n\t\tcase 'render_dashboard':\n\t\t\t$sDashboardId = utils::ReadParam('dashboard_id', '', false, 'raw_data');\n\t\t\t$aExtraParams = utils::ReadParam('extra_params', array(), false, 'raw_data');\n\t\t\t$aParams = array();\n\t\t\t$aParams['layout_class'] = utils::ReadParam('layout_class', '');\n\t\t\t$aParams['title'] = utils::ReadParam('title', '', false, 'raw_data');\n\t\t\t$aParams['cells'] = utils::ReadParam('cells', array(), false, 'raw_data');\n\t\t\t$aParams['auto_reload'] = utils::ReadParam('auto_reload', false);\n\t\t\t$aParams['auto_reload_sec'] = utils::ReadParam('auto_reload_sec', 300);\n\t\t\t$sReloadURL = utils::ReadParam('reload_url', '', false, 'raw_data');\n\t\t\t$oDashboard = new RuntimeDashboard($sDashboardId);\n\t\t\t$oDashboard->FromParams($aParams);\n\t\t\t$oDashboard->SetReloadURL($sReloadURL);\n\t\t\t$oDashboard->Render($oPage, true /* bEditMode */, $aExtraParams);\n\t\t\tbreak;\n\n\t\tcase 'dashboard_editor':\n\t\t\t$sId = utils::ReadParam('id', '', false, 'context_param');\n\t\t\t$aExtraParams = utils::ReadParam('extra_params', array(), false, 'raw_data');\n\t\t\t$sDashboardFile = utils::ReadParam('file', '', false, 'raw_data');\n\t\t\t$sReloadURL = utils::ReadParam('reload_url', '', false, 'raw_data');\n\t\t\t$oDashboard = RuntimeDashboard::GetDashboard($sDashboardFile, $sId);\n\t\t\tif (!is_null($oDashboard))\n\t\t\t{\n\t\t\t\tif (!empty($sReloadURL))\n\t\t\t\t{\n\t\t\t\t\t$oDashboard->SetReloadURL($sReloadURL);\n\t\t\t\t}\n\t\t\t\t$oDashboard->RenderEditor($oPage, $aExtraParams);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'new_dashlet':\n\t\t\trequire_once(APPROOT.'application/forms.class.inc.php');\n\t\t\trequire_once(APPROOT.'application/dashlet.class.inc.php');\n\t\t\t$sDashletClass = utils::ReadParam('dashlet_class', '');\n\t\t\t$sDashletId = utils::ReadParam('dashlet_id', '', false, 'raw_data');\n\t\t\tif (is_subclass_of($sDashletClass, 'Dashlet'))\n\t\t\t{\n\t\t\t\t$oDashlet = new $sDashletClass(new ModelReflectionRuntime(), $sDashletId);\n\t\t\t\t$offset = $oPage->start_capture();\n\t\t\t\t$oDashlet->DoRender($oPage, true /* bEditMode */, false /* bEnclosingDiv */);\n\t\t\t\t$sHtml = addslashes($oPage->end_capture($offset));\n\t\t\t\t$sHtml = str_replace(\"\\n\", '', $sHtml);\n\t\t\t\t$sHtml = str_replace(\"\\r\", '', $sHtml);\n\t\t\t\t$oPage->add_script(\"$('#dashlet_$sDashletId').html('$sHtml');\"); // in ajax web page add_script has the same effect as add_ready_script\n\t\t\t\t// but is executed BEFORE all 'ready_scripts'\n\t\t\t\t$oForm = $oDashlet->GetForm(); // Rebuild the form since the values/content changed\n\t\t\t\t$oForm->SetSubmitParams(utils::GetAbsoluteUrlAppRoot().'pages/ajax.render.php', array('operation' => 'update_dashlet_property'));\n\t\t\t\t$sHtml = addslashes($oForm->RenderAsPropertySheet($oPage, true /* bReturnHtml */, '.itop-dashboard'));\n\t\t\t\t$sHtml = str_replace(\"\\n\", '', $sHtml);\n\t\t\t\t$sHtml = str_replace(\"\\r\", '', $sHtml);\n\t\t\t\t$oPage->add_script(\"$('#dashlet_properties_$sDashletId').html('$sHtml')\"); // in ajax web page add_script has the same effect as add_ready_script\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   // but is executed BEFORE all 'ready_scripts'\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'update_dashlet_property':\n\t\t\trequire_once(APPROOT.'application/forms.class.inc.php');\n\t\t\trequire_once(APPROOT.'application/dashlet.class.inc.php');\n\t\t\t$aExtraParams = utils::ReadParam('extra_params', array(), false, 'raw_data');\n\t\t\t$aParams = utils::ReadParam('params', '', false, 'raw_data');\n\t\t\t$sDashletClass = $aParams['attr_dashlet_class'];\n\t\t\t$sDashletType = $aParams['attr_dashlet_type'];\n\t\t\t$sDashletId = $aParams['attr_dashlet_id'];\n\t\t\t$aUpdatedProperties = $aParams['updated']; // Code of the changed properties as an array: 'attr_xxx', 'attr_xxy', etc...\n\t\t\t$aPreviousValues = $aParams['previous_values']; // hash array: 'attr_xxx' => 'old_value'\n\t\t\tif (is_subclass_of($sDashletClass, 'Dashlet'))\n\t\t\t{\n\t\t\t\t/** @var \\Dashlet $oDashlet */\n\t\t\t\t$oDashlet = new $sDashletClass(new ModelReflectionRuntime(), $sDashletId);\n\t\t\t\t$oDashlet->SetDashletType($sDashletType);\n\t\t\t\t$oForm = $oDashlet->GetForm();\n\t\t\t\t$aValues = $oForm->ReadParams(); // hash array: 'xxx' => 'new_value'\n\n\t\t\t\t$aCurrentValues = $aValues;\n\t\t\t\t$aUpdatedDecoded = array();\n\t\t\t\tforeach($aUpdatedProperties as $sProp)\n\t\t\t\t{\n\t\t\t\t\t$sDecodedProp = str_replace('attr_', '', $sProp); // Remove the attr_ prefix\n\t\t\t\t\t$aCurrentValues[$sDecodedProp] = (isset($aPreviousValues[$sProp]) ? $aPreviousValues[$sProp] : ''); // Set the previous value\n\t\t\t\t\t$aUpdatedDecoded[] = $sDecodedProp;\n\t\t\t\t}\n\n\t\t\t\t$oDashlet->FromParams($aCurrentValues);\n\t\t\t\t$sPrevClass = get_class($oDashlet);\n\t\t\t\t$oDashlet = $oDashlet->Update($aValues, $aUpdatedDecoded);\n\t\t\t\t$sNewClass = get_class($oDashlet);\n\t\t\t\tif ($sNewClass != $sPrevClass)\n\t\t\t\t{\n\t\t\t\t\t$oPage->add_ready_script(\"$('#dashlet_$sDashletId').dashlet('option', {dashlet_class: '$sNewClass'});\");\n\t\t\t\t}\n\t\t\t\tif ($oDashlet->IsRedrawNeeded())\n\t\t\t\t{\n\t\t\t\t\t$offset = $oPage->start_capture();\n\t\t\t\t\t$oDashlet->DoRender($oPage, true /* bEditMode */, false /* bEnclosingDiv */, $aExtraParams);\n\t\t\t\t\t$sHtml = addslashes($oPage->end_capture($offset));\n\t\t\t\t\t$sHtml = str_replace(\"\\n\", '', $sHtml);\n\t\t\t\t\t$sHtml = str_replace(\"\\r\", '', $sHtml);\n\n\t\t\t\t\t$oPage->add_script(\"$('#dashlet_$sDashletId').html('$sHtml');\"); // in ajax web page add_script has the same effect as add_ready_script\n\t\t\t\t\t// but is executed BEFORE all 'ready_scripts'\n\t\t\t\t}\n\t\t\t\tif ($oDashlet->IsFormRedrawNeeded())\n\t\t\t\t{\n\t\t\t\t\t$oForm = $oDashlet->GetForm(); // Rebuild the form since the values/content changed\n\t\t\t\t\t$oForm->SetSubmitParams(utils::GetAbsoluteUrlAppRoot().'pages/ajax.render.php', array('operation' => 'update_dashlet_property', 'extra_params' => $aExtraParams));\n\t\t\t\t\t$sHtml = addslashes($oForm->RenderAsPropertySheet($oPage, true /* bReturnHtml */, '.itop-dashboard'));\n\t\t\t\t\t$sHtml = str_replace(\"\\n\", '', $sHtml);\n\t\t\t\t\t$sHtml = str_replace(\"\\r\", '', $sHtml);\n\t\t\t\t\t$oPage->add_script(\"$('#dashlet_properties_$sDashletId').html('$sHtml')\"); // in ajax web page add_script has the same effect as add_ready_script\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   // but is executed BEFORE all 'ready_scripts'\n\t\t\t\t\t// but is executed BEFORE all 'ready_scripts'\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'dashlet_creation_dlg':\n\t\t\t$sOQL = utils::ReadParam('oql', '', false, 'raw_data');\n\t\t\tRuntimeDashboard::GetDashletCreationDlgFromOQL($oPage, $sOQL);\n\t\t\tbreak;\n\n\t\tcase 'add_dashlet':\n\t\t\t$oForm = RuntimeDashboard::GetDashletCreationForm();\n\t\t\t$aValues = $oForm->ReadParams();\n\n\t\t\t$sDashletClass = $aValues['dashlet_class'];\n\t\t\t$sMenuId = $aValues['menu_id'];\n\n\t\t\tif (is_subclass_of($sDashletClass, 'Dashlet'))\n\t\t\t{\n\t\t\t\t$oDashlet = new $sDashletClass(new ModelReflectionRuntime(), 0);\n\t\t\t\t$oDashlet->FromParams($aValues);\n\n\t\t\t\tApplicationMenu::LoadAdditionalMenus();\n\t\t\t\t$index = ApplicationMenu::GetMenuIndexById($sMenuId);\n\t\t\t\t$oMenu = ApplicationMenu::GetMenuNode($index);\n\t\t\t\t$oMenu->AddDashlet($oDashlet);\n\t\t\t\t// navigate to the dashboard page\n\t\t\t\tif ($aValues['open_editor'])\n\t\t\t\t{\n\t\t\t\t\t$oPage->add_ready_script(\"window.location.href='\".addslashes(utils::GetAbsoluteUrlAppRoot().'pages/UI.php?c[menu]='.urlencode($sMenuId)).\"&edit=1';\"); // reloads the page, doing a GET even if we arrived via a POST\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'shortcut_list_dlg':\n\t\t\t$sOQL = utils::ReadParam('oql', '', false, 'raw_data');\n\t\t\t$sTableSettings = utils::ReadParam('table_settings', '', false, 'raw_data');\n\t\t\tShortcutOQL::GetCreationDlgFromOQL($oPage, $sOQL, $sTableSettings);\n\t\t\tbreak;\n\n\t\tcase 'shortcut_list_create':\n\t\t\t$oForm = ShortcutOQL::GetCreationForm();\n\t\t\t$aValues = $oForm->ReadParams();\n\n\t\t\t$oAppContext = new ApplicationContext();\n\t\t\t$aContext = $oAppContext->GetAsHash();\n\t\t\t$sContext = serialize($aContext);\n\n\t\t\t$oShortcut = MetaModel::NewObject(\"ShortcutOQL\");\n\t\t\t$oShortcut->Set('user_id', UserRights::GetUserId());\n\t\t\t$oShortcut->Set(\"context\", $sContext);\n\t\t\t$oShortcut->Set(\"name\", $aValues['name']);\n\t\t\t$oShortcut->Set(\"oql\", $aValues['oql']);\n\t\t\t$iAutoReload = (int)$aValues['auto_reload_sec'];\n\t\t\tif (($aValues['auto_reload']) && ($iAutoReload > 0))\n\t\t\t{\n\t\t\t\t$oShortcut->Set(\"auto_reload_sec\", max(MetaModel::GetConfig()->Get('min_reload_interval'), $iAutoReload));\n\t\t\t\t$oShortcut->Set(\"auto_reload\", 'custom');\n\t\t\t}\n\t\t\tutils::PushArchiveMode(false);\n\t\t\t$iId = $oShortcut->DBInsertNoReload();\n\t\t\tutils::PopArchiveMode();\n\n\t\t\t$oShortcut->CloneTableSettings($aValues['table_settings']);\n\n\t\t\t// Add the menu node in the right place\n\t\t\t//\n\t\t\t// Mmmm... already done because the newly created menu is read from the DB\n\t\t\t//         as soon as we invoke DisplayMenu\n\n\t\t\t// Refresh the menu pane\n\t\t\t$aExtraParams = array();\n\t\t\tApplicationMenu::DisplayMenu($oPage, $aExtraParams);\n\t\t\tbreak;\n\n\t\tcase 'shortcut_rename_dlg':\n\t\t\t$oSearch = new DBObjectSearch('Shortcut');\n\t\t\t$aShortcuts = utils::ReadMultipleSelection($oSearch);\n\t\t\t$iShortcut = $aShortcuts[0];\n\t\t\t$oShortcut = MetaModel::GetObject('Shortcut', $iShortcut);\n\t\t\t$oShortcut->StartRenameDialog($oPage);\n\t\t\tbreak;\n\n\t\tcase 'shortcut_rename_go':\n\t\t\t$iShortcut = utils::ReadParam('id', 0);\n\t\t\t$oShortcut = MetaModel::GetObject('Shortcut', $iShortcut);\n\n\t\t\t$sName = utils::ReadParam('attr_name', '', false, 'raw_data');\n\t\t\tif (strlen($sName) > 0)\n\t\t\t{\n\t\t\t\t$oShortcut->Set('name', $sName);\n\t\t\t\tutils::PushArchiveMode(false);\n\t\t\t\t$oShortcut->DBUpdate();\n\t\t\t\tutils::PopArchiveMode();\n\t\t\t\t$oPage->add_ready_script('window.location.reload();');\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase 'shortcut_delete_go':\n\t\t\t$oSearch = new DBObjectSearch('Shortcut');\n\t\t\t$oSearch->AddCondition('user_id', UserRights::GetUserId(), '=');\n\t\t\t$aShortcuts = utils::ReadMultipleSelection($oSearch);\n\t\t\tforeach($aShortcuts as $iShortcut)\n\t\t\t{\n\t\t\t\t$oShortcut = MetaModel::GetObject('Shortcut', $iShortcut);\n\t\t\t\tutils::PushArchiveMode(false);\n\t\t\t\t$oShortcut->DBDelete();\n\t\t\t\tutils::PopArchiveMode();\n\t\t\t\t$oPage->add_ready_script('window.location.reload();');\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'about_box':\n\t\t\t$oPage->SetContentType('text/html');\n\n\t\t\t$sDialogTitle = addslashes(Dict::S('UI:About:Title'));\n\t\t\t$oPage->add_ready_script(\n\t\t\t\t<<<EOF\n$('#about_box').dialog({\n\twidth: 700,\n\tmodal: true,\n\ttitle: '$sDialogTitle',\n\tclose: function() { $(this).remove(); }\n});\n$(\"#collapse_support_details\").click(function() {\n\t$(\"#support_details\").slideToggle('normal');\n\t$(\"#collapse_support_details\").toggleClass('open');\n});\n$('#support_details').toggle();\nEOF\n\t\t\t);\n\t\t\t$sVersionString = Dict::Format('UI:iTopVersion:Long', ITOP_APPLICATION, ITOP_VERSION, ITOP_REVISION, ITOP_BUILD_DATE);\n\t\t\t$sMySQLVersion = CMDBSource::GetDBVersion();\n\t\t\t$sPHPVersion = phpversion();\n\t\t\t$sOSVersion = PHP_OS;\n\t\t\t$sWebServerVersion = $_SERVER[\"SERVER_SOFTWARE\"];\n\t\t\t$sModules = implode(', ', get_loaded_extensions());\n\n\t\t\t// Get the datamodel directory\n\t\t\t$oFilter = DBObjectSearch::FromOQL('SELECT ModuleInstallation WHERE name=\"datamodel\"');\n\t\t\t$oSet = new DBObjectSet($oFilter, array('installed' => false)); // Most recent first\n\t\t\t$oLastInstall = $oSet->Fetch();\n\t\t\t$sLastInstallDate = $oLastInstall->Get('installed');\n\t\t\t$sDataModelVersion = $oLastInstall->Get('version');\n\t\t\t$aDataModelInfo = json_decode($oLastInstall->Get('comment'), true);\n\t\t\t$sDataModelSourceDir = $aDataModelInfo['source_dir'];\n\n\t\t\trequire_once(APPROOT.'setup/runtimeenv.class.inc.php');\n\t\t\t$sCurrEnv = utils::GetCurrentEnvironment();\n\t\t\t$oRuntimeEnv = new RunTimeEnvironment($sCurrEnv);\n\t\t\t$aSearchDirs = array(APPROOT.$sDataModelSourceDir);\n\t\t\tif (file_exists(APPROOT.'extensions'))\n\t\t\t{\n\t\t\t\t$aSearchDirs[] = APPROOT.'extensions';\n\t\t\t}\n\t\t\t$sExtraDir = APPROOT.'data/'.$sCurrEnv.'-modules/';\n\t\t\tif (file_exists($sExtraDir))\n\t\t\t{\n\t\t\t\t$aSearchDirs[] = $sExtraDir;\n\t\t\t}\n\t\t\t$aAvailableModules = $oRuntimeEnv->AnalyzeInstallation(MetaModel::GetConfig(), $aSearchDirs);\n\n\t\t\trequire_once(APPROOT.'setup/setuputils.class.inc.php');\n\t\t\t$aLicenses = SetupUtils::GetLicenses($sCurrEnv);\n\n\t\t\t$aItopSettings = array('cron_max_execution_time', 'timezone');\n\t\t\t$aPHPSettings = array('memory_limit', 'max_execution_time', 'upload_max_filesize', 'post_max_size');\n\t\t\t$aMySQLSettings = array('max_allowed_packet', 'key_buffer_size', 'query_cache_size');\n\t\t\t$aMySQLStatuses = array('Key_read_requests', 'Key_reads');\n\n\t\t\tif (extension_loaded('suhosin'))\n\t\t\t{\n\t\t\t\t$aPHPSettings[] = 'suhosin.post.max_vars';\n\t\t\t\t$aPHPSettings[] = 'suhosin.get.max_value_length';\n\t\t\t}\n\n\t\t\t$aMySQLVars = array();\n\t\t\tforeach(CMDBSource::QueryToArray('SHOW VARIABLES') as $aRow)\n\t\t\t{\n\t\t\t\t$aMySQLVars[$aRow['Variable_name']] = $aRow['Value'];\n\t\t\t}\n\n\t\t\t$aMySQLStats = array();\n\t\t\tforeach(CMDBSource::QueryToArray('SHOW GLOBAL STATUS') as $aRow)\n\t\t\t{\n\t\t\t\t$aMySQLStats[$aRow['Variable_name']] = $aRow['Value'];\n\t\t\t}\n\n\t\t\t// Display\n\t\t\t//\n\t\t\t$oPage->add(\"<div id=\\\"about_box\\\">\");\n\t\t\t$oPage->add('<div style=\"margin-left: 120px;\">');\n\t\t\t$oPage->add('<table>');\n\t\t\t$oPage->add('<tr>');\n\t\t\t$oPage->add('<td><a href=\"http://www.combodo.com\" title=\"www.combodo.com\" target=\"_blank\" style=\"background: none;\"><img src=\"../images/logo-combodo.png?t='.utils::GetCacheBusterTimestamp().'\" style=\"float: right;\"/></a></td>');\n\t\t\t$oPage->add('<td style=\"padding-left: 20px;\">');\n\t\t\t$oPage->add($sVersionString.'<br/>');\n\t\t\t$oPage->add(Dict::S('UI:About:DataModel').': '.$sDataModelVersion.'<br/>');\n\t\t\t$oPage->add('MySQL: '.$sMySQLVersion.'<br/>');\n\t\t\t$oPage->add('PHP: '.$sPHPVersion.'<br/>');\n\t\t\t$oPage->add('</td>');\n\t\t\t$oPage->add('</tr>');\n\t\t\t$oPage->add('</table>');\n\t\t\t$oPage->add(\"</div>\");\n\n\t\t\t$oPage->add(\"<div>\");\n\t\t\t$oPage->add('<fieldset>');\n\t\t\t$oPage->add('<legend>'.Dict::S('UI:About:Licenses').'</legend>');\n\t\t\t$oPage->add('<ul style=\"margin: 0; font-size: smaller; max-height: 15em; overflow: auto;\">');\n\t\t\t$index = 0;\n\t\t\tforeach($aLicenses as $oLicense)\n\t\t\t{\n\t\t\t\t$oPage->add('<li><b>'.$oLicense->product.'</b>, &copy; '.$oLicense->author.' is licensed under the <b>'.$oLicense->license_type.' license</b>. (<a id=\"toggle_'.$index.'\" class=\"CollapsibleLabel\" style=\"cursor:pointer;\">Details</a>)');\n\t\t\t\t$oPage->add('<div id=\"license_'.$index.'\" class=\"license_text\" style=\"display:none;overflow:auto;max-height:10em;font-size:small;border:1px #696969 solid;margin-bottom:1em; margin-top:0.5em;padding:0.5em;\">'.$oLicense->text.'</div>');\n\t\t\t\t$oPage->add_ready_script('$(\"#toggle_'.$index.'\").click( function() { $(\"#license_'.$index.'\").slideToggle(\"normal\"); } );');\n\t\t\t\t$index++;\n\t\t\t}\n\t\t\t$oPage->add('</ul>');\n\t\t\t$oPage->add('</fieldset>');\n\t\t\t$oPage->add(\"</div>\");\n\n\t\t\t$oPage->add('<fieldset>');\n\t\t\t$oPage->add('<legend>'.Dict::S('UI:About:InstallationOptions').'</legend>');\n\t\t\t$oPage->add(\"<div style=\\\"max-height: 150px; overflow: auto; font-size: smaller;\\\">\");\n\t\t\t$oPage->add('<ul style=\"margin: 0;\">');\n\n\t\t\trequire_once(APPROOT.'setup/extensionsmap.class.inc.php');\n\t\t\t$oExtensionsMap = new iTopExtensionsMap();\n\t\t\t$oExtensionsMap->LoadChoicesFromDatabase(MetaModel::GetConfig());\n\t\t\t$aChoices = $oExtensionsMap->GetChoices();\n\t\t\tforeach($aChoices as $oExtension)\n\t\t\t{\n\t\t\t\tswitch ($oExtension->sSource)\n\t\t\t\t{\n\t\t\t\t\tcase iTopExtension::SOURCE_REMOTE:\n\t\t\t\t\t\t$sSource = ' <span class=\"extension-source\">'.Dict::S('UI:About:RemoteExtensionSource').'</span>';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase iTopExtension::SOURCE_MANUAL:\n\t\t\t\t\t\t$sSource = ' <span class=\"extension-source\">'.Dict::S('UI:About:ManualExtensionSource').'</span>';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$sSource = '';\n\t\t\t\t}\n\t\t\t\t$oPage->add('<li title=\"'.Dict::Format('UI:About:Extension_Version', $oExtension->sInstalledVersion).'\">'.$oExtension->sLabel.$sSource.'</li>');\n\t\t\t}\n\t\t\t$oPage->add('</ul>');\n\t\t\t$oPage->add(\"</div>\");\n\t\t\t$oPage->add('</fieldset>');\n\n\n\t\t\t// MUST NOT be localized, as the information given here will be sent to the support\n\t\t\t$oPage->add(\"<a id=\\\"collapse_support_details\\\" class=\\\"CollapsibleLabel\\\" href=\\\"#\\\">\".Dict::S('UI:About:Support').\"</a></br>\\n\");\n\t\t\t$oPage->add(\"<div id=\\\"support_details\\\">\");\n\t\t\t$oPage->add('<textarea readonly style=\"width: 660px; height: 150px; font-size: smaller;\">');\n\t\t\t$oPage->add(\"===== begin =====\\n\");\n\t\t\t$oPage->add('iTopVersion: '.ITOP_VERSION.\"\\n\");\n\t\t\t$oPage->add('iTopBuild: '.ITOP_REVISION.\"\\n\");\n\t\t\t$oPage->add('iTopBuildDate: '.ITOP_BUILD_DATE.\"\\n\");\n\t\t\t$oPage->add('DataModelVersion: '.$sDataModelVersion.\"\\n\");\n\t\t\t$oPage->add('MySQLVersion: '.$sMySQLVersion.\"\\n\");\n\t\t\t$oPage->add('PHPVersion: '.$sPHPVersion.\"\\n\");\n\t\t\t$oPage->add('OSVersion: '.$sOSVersion.\"\\n\");\n\t\t\t$oPage->add('WebServerVersion: '.$sWebServerVersion.\"\\n\");\n\t\t\t$oPage->add('PHPModules: '.$sModules.\"\\n\");\n\t\t\tforeach($aItopSettings as $siTopVar)\n\t\t\t{\n\t\t\t\t$oPage->add('ItopSetting/'.$siTopVar.': '.MetaModel::GetConfig()->Get($siTopVar).\"\\n\");\n\t\t\t}\n\t\t\tforeach($aPHPSettings as $sPHPVar)\n\t\t\t{\n\t\t\t\t$oPage->add('PHPSetting/'.$sPHPVar.': '.ini_get($sPHPVar).\"\\n\");\n\t\t\t}\n\t\t\tforeach($aMySQLSettings as $sMySQLVar)\n\t\t\t{\n\t\t\t\t$oPage->add('MySQLSetting/'.$sMySQLVar.': '.$aMySQLVars[$sMySQLVar].\"\\n\");\n\t\t\t}\n\t\t\tforeach($aMySQLStatuses as $sMySQLStatus)\n\t\t\t{\n\t\t\t\t$oPage->add('MySQLStatus/'.$sMySQLStatus.': '.$aMySQLStats[$sMySQLStatus].\"\\n\");\n\t\t\t}\n\n\t\t\t$oPage->add('InstallDate: '.$sLastInstallDate.\"\\n\");\n\t\t\t$oPage->add('InstallPath: '.APPROOT.\"\\n\");\n\t\t\t$oPage->add(\"---- Installation choices ----\\n\");\n\t\t\tforeach($aChoices as $oExtension)\n\t\t\t{\n\t\t\t\tswitch ($oExtension->sSource)\n\t\t\t\t{\n\t\t\t\t\tcase iTopExtension::SOURCE_REMOTE:\n\t\t\t\t\t\t$sSource = ' ('.Dict::S('UI:About:RemoteExtensionSource').')';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase iTopExtension::SOURCE_MANUAL:\n\t\t\t\t\t\t$sSource = ' ('.Dict::S('UI:About:ManualExtensionSource').')';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$sSource = '';\n\t\t\t\t}\n\t\t\t\t$oPage->add('InstalledExtension/'.$oExtension->sCode.'/'.$oExtension->sVersion.$sSource.\"\\n\");\n\t\t\t}\n\t\t\t$oPage->add(\"---- Actual modules installed ----\\n\");\n\t\t\tforeach($aAvailableModules as $sModuleId => $aModuleData)\n\t\t\t{\n\t\t\t\tif ($sModuleId == '_Root_') continue;\n\t\t\t\tif ($aModuleData['version_db'] == '') continue;\n\t\t\t\t$oPage->add('InstalledModule/'.$sModuleId.': '.$aModuleData['version_db'].\"\\n\");\n\t\t\t}\n\n\t\t\t$oPage->add('===== end =====');\n\t\t\t$oPage->add('</textarea>');\n\t\t\t$oPage->add(\"</div>\");\n\n\t\t\t$oPage->add(\"</div>\");\n\t\t\tbreak;\n\n\t\tcase 'history':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$id = (int)utils::ReadParam('id', 0);\n\t\t\t$iStart = (int)utils::ReadParam('start', 0);\n\t\t\t$iCount = (int)utils::ReadParam('count', MetaModel::GetConfig()->Get('max_history_length'));\n\t\t\t$oObj = MetaModel::GetObject($sClass, $id);\n\t\t\t$oObj->DisplayBareHistory($oPage, false, $iCount, $iStart);\n\t\t\t$oPage->add_ready_script(\"$('#history table.listResults').tableHover(); $('#history table.listResults').tablesorter( { widgets: ['myZebra', 'truncatedList']} );\");\n\t\t\tbreak;\n\n\t\tcase 'history_from_filter':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$oHistoryFilter = DBSearch::unserialize($sFilter);\n\t\t\t$iStart = (int)utils::ReadParam('start', 0);\n\t\t\t$iCount = (int)utils::ReadParam('count', MetaModel::GetConfig()->Get('max_history_length'));\n\t\t\t$oBlock = new HistoryBlock($oHistoryFilter, 'table', false);\n\t\t\t$oBlock->SetLimit($iCount, $iStart);\n\t\t\t$oBlock->Display($oPage, 'history');\n\t\t\t$oPage->add_ready_script(\"$('#history table.listResults').tableHover(); $('#history table.listResults').tablesorter( { widgets: ['myZebra', 'truncatedList']} );\");\n\t\t\tbreak;\n\n\t\tcase 'full_text_search':\n\t\t\t$aFullTextNeedles = utils::ReadParam('needles', array(), false, 'raw_data');\n\t\t\t$sFullText = trim(implode(' ', $aFullTextNeedles));\n\t\t\t$sClassName = utils::ReadParam('class', '');\n\t\t\t$iCount = utils::ReadParam('count', 0);\n\t\t\t$iCurrentPos = utils::ReadParam('position', 0);\n\t\t\t$iTune = utils::ReadParam('tune', 0);\n\t\t\tif (empty($sFullText))\n\t\t\t{\n\t\t\t\t$oPage->p(Dict::S('UI:Search:NoSearch'));\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Search in full text mode in all the classes\n\t\t\t$aMatches = array();\n\n\t\t\t// Build the ordered list of classes to search into\n\t\t\t//\n\t\t\tif (empty($sClassName))\n\t\t\t{\n\t\t\t\t$aSearchClasses = MetaModel::GetClasses('searchable');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Search is limited to a given class and its subclasses\n\t\t\t\t$aSearchClasses = MetaModel::EnumChildClasses($sClassName, ENUM_CHILD_CLASSES_ALL);\n\t\t\t}\n\t\t\t// Skip abstract classes, since we search in all the child classes anyway\n\t\t\tforeach($aSearchClasses as $idx => $sClass)\n\t\t\t{\n\t\t\t\tif (MetaModel::IsAbstract($sClass))\n\t\t\t\t{\n\t\t\t\t\tunset($aSearchClasses[$idx]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$sMaxChunkDuration = MetaModel::GetConfig()->Get('full_text_chunk_duration');\n\t\t\t$aAccelerators = MetaModel::GetConfig()->Get('full_text_accelerators');\n\n\t\t\tforeach(array_reverse($aAccelerators) as $sClass => $aRestriction)\n\t\t\t{\n\t\t\t\t$bSkip = false;\n\t\t\t\t$iPos = array_search($sClass, $aSearchClasses);\n\t\t\t\tif ($iPos !== false)\n\t\t\t\t{\n\t\t\t\t\tunset($aSearchClasses[$iPos]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$bSkip = true;\n\t\t\t\t}\n\t\t\t\t$bSkip |= array_key_exists('skip', $aRestriction) ? $aRestriction['skip'] : false;\n\t\t\t\tif (!in_array($sClass, $aSearchClasses))\n\t\t\t\t{\n\t\t\t\t\tif ($sClass == $sClassName)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Class explicitely requested, do NOT skip it\n\t\t\t\t\t\t// beware: there may not be a 'query' defined for a skipped class !\n\t\t\t\t\t\t$bSkip = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!$bSkip)\n\t\t\t\t{\n\t\t\t\t\t// NOT skipped, add the class to the list of classes to search into\n\t\t\t\t\tif (array_key_exists('query', $aRestriction))\n\t\t\t\t\t{\n\t\t\t\t\t\tarray_unshift($aSearchClasses, $aRestriction['query']);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// No accelerator query\n\t\t\t\t\t\tarray_unshift($aSearchClasses, $sClassName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$aSearchClasses = array_values($aSearchClasses); // renumbers the array starting from zero, removing the missing indexes\n\t\t\t$fStarted = microtime(true);\n\t\t\t$iFoundInThisRound = 0;\n\t\t\tfor($iPos = $iCurrentPos; $iPos < count($aSearchClasses); $iPos++)\n\t\t\t{\n\t\t\t\tif ($iFoundInThisRound && (microtime(true) - $fStarted >= $sMaxChunkDuration))\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$sClassSpec = $aSearchClasses[$iPos];\n\t\t\t\tif (substr($sClassSpec, 0, 7) == 'SELECT ')\n\t\t\t\t{\n\t\t\t\t\t$oFilter = DBObjectSearch::FromOQL($sClassSpec);\n\t\t\t\t\t$sClassName = $oFilter->GetClass();\n\t\t\t\t\t$sNeedleFormat = isset($aAccelerators[$sClassName]['needle']) ? $aAccelerators[$sClassName]['needle'] : '%$needle$%';\n\t\t\t\t\t$sNeedle = str_replace('$needle$', $sFullText, $sNeedleFormat);\n\t\t\t\t\t$aParams = array('needle' => $sNeedle);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$sClassName = $sClassSpec;\n\t\t\t\t\t$oFilter = new DBObjectSearch($sClassName);\n\t\t\t\t\t$aParams = array();\n\n\t\t\t\t\tforeach($aFullTextNeedles as $sSearchText)\n\t\t\t\t\t{\n\t\t\t\t\t\t$oFilter->AddCondition_FullText($sSearchText);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$oFilter->SetShowObsoleteData(utils::ShowObsoleteData());\n\t\t\t\t// Skip abstract classes\n\t\t\t\tif (MetaModel::IsAbstract($sClassName)) continue;\n\n\t\t\t\tif ($iTune > 0)\n\t\t\t\t{\n\t\t\t\t\t$fStartedClass = microtime(true);\n\t\t\t\t}\n\t\t\t\t$oSet = new DBObjectSet($oFilter, array(), $aParams);\n\t\t\t\tif (array_key_exists($sClassName, $aAccelerators) && array_key_exists('attributes', $aAccelerators[$sClassName]))\n\t\t\t\t{\n\t\t\t\t\t$oSet->OptimizeColumnLoad(array($oFilter->GetClassAlias() => $aAccelerators[$sClassName]['attributes']));\n\t\t\t\t}\n\n\t\t\t\t$sFullTextJS = addslashes($sFullText);\n\t\t\t\t$bEnableEnlarge = array_key_exists($sClassName, $aAccelerators) && array_key_exists('query', $aAccelerators[$sClassName]);\n\t\t\t\tif (array_key_exists($sClassName, $aAccelerators) && array_key_exists('enable_enlarge', $aAccelerators[$sClassName]))\n\t\t\t\t{\n\t\t\t\t\t$bEnableEnlarge &= $aAccelerators[$sClassName]['enable_enlarge'];\n\t\t\t\t}\n\t\t\t\t$sEnlargeTheSearch =\n\t\t\t\t\t<<<EOF\n\t\t\t$('.search-class-$sClassName button').prop('disabled', true);\n\n\t\t\t$('.search-class-$sClassName h2').append('&nbsp;<img id=\"indicator\" src=\"../images/indicator.gif\">');\n\t\t\tvar oParams = {operation: 'full_text_search_enlarge', class: '$sClassName', text: '$sFullTextJS'};\n\t\t\t$.post(GetAbsoluteUrlAppRoot()+'pages/ajax.render.php', oParams, function(data) {\n\t\t\t\t$('.search-class-$sClassName').html(data);\n\t\t\t});\nEOF;\n\n\n\t\t\t\t$sEnlargeButton = '';\n\t\t\t\tif ($bEnableEnlarge)\n\t\t\t\t{\n\t\t\t\t\t$sEnlargeButton = \"&nbsp;<button onclick=\\\"\".htmlentities($sEnlargeTheSearch, ENT_QUOTES, 'UTF-8').\"\\\">\".Dict::S('UI:Search:Enlarge').\"</button>\";\n\t\t\t\t}\n\t\t\t\tif ($oSet->Count() > 0)\n\t\t\t\t{\n\t\t\t\t\t$aLeafs = array();\n\t\t\t\t\twhile ($oObj = $oSet->Fetch())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (get_class($oObj) == $sClassName)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aLeafs[] = $oObj->GetKey();\n\t\t\t\t\t\t\t$iFoundInThisRound++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$oLeafsFilter = new DBObjectSearch($sClassName);\n\t\t\t\t\tif (count($aLeafs) > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$iCount += count($aLeafs);\n\t\t\t\t\t\t$oPage->add(\"<div class=\\\"search-class-result search-class-$sClassName\\\">\\n\");\n\t\t\t\t\t\t$oPage->add(\"<div class=\\\"page_header\\\">\\n\");\n\t\t\t\t\t\tif (array_key_exists($sClassName, $aAccelerators))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$oPage->add(\"<h2>\".MetaModel::GetClassIcon($sClassName).\"&nbsp;<span class=\\\"hilite\\\">\".Dict::Format('UI:Search:Count_ObjectsOf_Class_Found', count($aLeafs), Metamodel::GetName($sClassName)).$sEnlargeButton.\"</h2>\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$oPage->add(\"<h2>\".MetaModel::GetClassIcon($sClassName).\"&nbsp;<span class=\\\"hilite\\\">\".Dict::Format('UI:Search:Count_ObjectsOf_Class_Found', count($aLeafs), Metamodel::GetName($sClassName)).\"</h2>\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$oPage->add(\"</div>\\n\");\n\t\t\t\t\t\t$oLeafsFilter->AddCondition('id', $aLeafs, 'IN');\n\t\t\t\t\t\t$oBlock = new DisplayBlock($oLeafsFilter, 'list', false);\n\t\t\t\t\t\t$sBlockId = 'global_search_'.$sClassName;\n\t\t\t\t\t\t$oPage->add('<div id=\"'.$sBlockId.'\">');\n\t\t\t\t\t\t$oBlock->RenderContent($oPage, array('table_id' => $sBlockId, 'currentId' => $sBlockId));\n\t\t\t\t\t\t$oPage->add(\"</div>\\n\");\n\t\t\t\t\t\t$oPage->add(\"</div>\\n\");\n\t\t\t\t\t\t$oPage->p('&nbsp;'); // Some space ?\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (array_key_exists($sClassName, $aAccelerators))\n\t\t\t\t\t{\n\t\t\t\t\t\t$oPage->add(\"<div class=\\\"search-class-result search-class-$sClassName\\\">\\n\");\n\t\t\t\t\t\t$oPage->add(\"<div class=\\\"page_header\\\">\\n\");\n\t\t\t\t\t\t$oPage->add(\"<h2>\".MetaModel::GetClassIcon($sClassName).\"&nbsp;<span class=\\\"hilite\\\">\".Dict::Format('UI:Search:Count_ObjectsOf_Class_Found', 0, Metamodel::GetName($sClassName)).$sEnlargeButton.\"</h2>\\n\");\n\t\t\t\t\t\t$oPage->add(\"</div>\\n\");\n\t\t\t\t\t\t$oPage->add(\"</div>\\n\");\n\t\t\t\t\t\t$oPage->p('&nbsp;'); // Some space ?\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ($iTune > 0)\n\t\t\t\t{\n\t\t\t\t\t$fDurationClass = microtime(true) - $fStartedClass;\n\t\t\t\t\t$oPage->add_script(\"oTimeStatistics.$sClassName = $fDurationClass;\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($iPos < count($aSearchClasses))\n\t\t\t{\n\t\t\t\t$sJSNeedle = json_encode($aFullTextNeedles);\n\t\t\t\t$oPage->add_ready_script(\n\t\t\t\t\t<<<EOF\n\t\t\t\tvar oParams = {operation: 'full_text_search', position: $iPos, needles: $sJSNeedle, count: $iCount, tune: $iTune};\n\t\t\t\t$.post(GetAbsoluteUrlAppRoot()+'pages/ajax.render.php', oParams, function(data) {\n\t\t\t\t\t$('#full_text_results').append(data);\n\t\t\t\t});\nEOF\n\t\t\t\t);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// We're done\n\t\t\t\t$oPage->add_ready_script(\n\t\t\t\t\t<<<EOF\n$('#full_text_indicator').hide();\n$('#full_text_progress,#full_text_progress_placeholder').hide(500);\nEOF\n\t\t\t\t);\n\n\t\t\t\tif ($iTune > 0)\n\t\t\t\t{\n\t\t\t\t\t$oPage->add_ready_script(\n\t\t\t\t\t\t<<<EOF\n\t\t\t\tvar sRes = '<h4>Search statistics (tune = 1)</h4><table>';\n\t\t\t\tsRes += '<thead><tr><th>Class</th><th>Time</th></tr></thead>';\n\t\t\t\tsRes += '<tbody>';\n\t\t\t\tvar fTotal = 0;\n\t\t\t\tfor (var sClass in oTimeStatistics)\n\t\t\t\t{\n\t\t\t\t\tfTotal = fTotal + oTimeStatistics[sClass];\n\t\t\t\t\tfRounded = Math.round(oTimeStatistics[sClass] * 1000) / 1000;\n\t\t\t\t\tsRes += '<tr><td>' + sClass + '</td><td>' + fRounded + '</td></tr>';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfRoundedTotal = Math.round(fTotal * 1000) / 1000;\n\t\t\t\tsRes += '<tr><td><b>Total</b></td><td><b>' + fRoundedTotal + '</b></td></tr>';\n\t\t\t\tsRes += '</tbody>';\n\t\t\t\tsRes += '</table>';\n\t\t\t\t$('#full_text_results').append(sRes);\nEOF\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif ($iCount == 0)\n\t\t\t\t{\n\t\t\t\t\t$sFullTextSummary = addslashes(Dict::S('UI:Search:NoObjectFound'));\n\t\t\t\t\t$oPage->add_ready_script(\"$('#full_text_results').append('<div id=\\\"no_object_found\\\">$sFullTextSummary</div>');\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'full_text_search_enlarge':\n\t\t\t$sFullText = trim(utils::ReadParam('text', '', false, 'raw_data'));\n\t\t\t$sClass = trim(utils::ReadParam('class', ''));\n\t\t\t$iTune = utils::ReadParam('tune', 0);\n\n\t\t\tif (preg_match('/^\"(.*)\"$/', $sFullText, $aMatches))\n\t\t\t{\n\t\t\t\t// The text is surrounded by double-quotes, remove the quotes and treat it as one single expression\n\t\t\t\t$aFullTextNeedles = array($aMatches[1]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Split the text on the blanks and treat this as a search for <word1> AND <word2> AND <word3>\n\t\t\t\t$aFullTextNeedles = explode(' ', $sFullText);\n\t\t\t}\n\n\t\t\t$oFilter = new DBObjectSearch($sClass);\n\t\t\tforeach($aFullTextNeedles as $sSearchText)\n\t\t\t{\n\t\t\t\t$oFilter->AddCondition_FullText($sSearchText);\n\t\t\t}\n\t\t\t$oFilter->SetShowObsoleteData(utils::ShowObsoleteData());\n\t\t\t$oSet = new DBObjectSet($oFilter);\n\t\t\t$oPage->add(\"<div class=\\\"page_header\\\">\\n\");\n\t\t\t$oPage->add(\"<h2>\".MetaModel::GetClassIcon($sClass).\"&nbsp;<span class=\\\"hilite\\\">\".Dict::Format('UI:Search:Count_ObjectsOf_Class_Found', $oSet->Count(), Metamodel::GetName($sClass)).\"</h2>\\n\");\n\t\t\t$oPage->add(\"</div>\\n\");\n\t\t\tif ($oSet->Count() > 0)\n\t\t\t{\n\t\t\t\t$aLeafs = array();\n\t\t\t\twhile ($oObj = $oSet->Fetch())\n\t\t\t\t{\n\t\t\t\t\tif (get_class($oObj) == $sClass)\n\t\t\t\t\t{\n\t\t\t\t\t\t$aLeafs[] = $oObj->GetKey();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$oLeafsFilter = new DBObjectSearch($sClass);\n\t\t\t\tif (count($aLeafs) > 0)\n\t\t\t\t{\n\t\t\t\t\t$oLeafsFilter->AddCondition('id', $aLeafs, 'IN');\n\t\t\t\t\t$oBlock = new DisplayBlock($oLeafsFilter, 'list', false);\n\t\t\t\t\t$sBlockId = 'global_search_'.$sClass;\n\t\t\t\t\t$oPage->add('<div id=\"'.$sBlockId.'\">');\n\t\t\t\t\t$oBlock->RenderContent($oPage, array('table_id' => $sBlockId, 'currentId' => $sBlockId));\n\t\t\t\t\t$oPage->add('</div>');\n\t\t\t\t\t$oPage->P('&nbsp;'); // Some space ?\n\t\t\t\t\t// Hide \"no object found\"\n\t\t\t\t\t$oPage->add_ready_script('$(\"#no_object_found\").hide();');\n\t\t\t\t}\n\t\t\t}\n\t\t\t$oPage->add_ready_script(\n\t\t\t\t<<<EOF\n$('#full_text_indicator').hide();\n$('#full_text_progress,#full_text_progress_placeholder').hide(500);\nEOF\n\t\t\t);\n\t\t\tbreak;\n\n\t\tcase 'xlsx_export_dialog':\n\t\t\t$sFilter = utils::ReadParam('filter', '', false, 'raw_data');\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$oPage->add(\n\t\t\t\t<<<EOF\n<style>\n .ui-progressbar {\n\tposition: relative;\n}\n.progress-label {\n\tposition: absolute;\n\tleft: 50%;\n\ttop: 1px;\n\tfont-size: 11pt;\n}\n.download-form button {\n\tdisplay:block;\n\tmargin-left: auto;\n\tmargin-right: auto;\n\tmargin-top: 2em;\n}\n.ui-progressbar-value {\n\tbackground: url(../setup/orange-progress.gif);\n}\n.progress-bar {\n\theight: 20px;\n}\n.statistics > div {\n\tpadding-left: 16px;\n\tcursor: pointer;\n\tfont-size: 10pt;\n\tbackground: url(../images/minus.gif) 0 2px no-repeat;\n}\t\t\t\t\n.statistics > div.closed {\n\tpadding-left: 16px;\n\tbackground: url(../images/plus.gif) 0 2px no-repeat;\n}\n\t\t\t\t\n.statistics .closed .stats-data {\n\tdisplay: none;\n}\n.stats-data td {\n\tpadding-right: 5px;\n}\n</style>\t\t\t\t\nEOF\n\t\t\t);\n\t\t\t$oPage->add('<div id=\"XlsxExportDlg\">');\n\t\t\t$oPage->add('<div class=\"export-options\">');\n\t\t\t$oPage->add('<p><input type=\"checkbox\" id=\"export-advanced-mode\"/>&nbsp;<label for=\"export-advanced-mode\">'.Dict::S('UI:CSVImport:AdvancedMode').'</label></p>');\n\t\t\t$oPage->add('<p style=\"font-size:10pt;margin-left:2em;margin-top:-0.5em;padding-bottom:1em;\">'.Dict::S('UI:CSVImport:AdvancedMode+').'</p>');\n\t\t\t$oPage->add('<p><input type=\"checkbox\" id=\"export-auto-download\" checked=\"checked\"/>&nbsp;<label for=\"export-auto-download\">'.Dict::S('ExcelExport:AutoDownload').'</label></p>');\n\t\t\t$oPage->add('</div>');\n\t\t\t$oPage->add('<div class=\"progress\"><p class=\"status-message\">'.Dict::S('ExcelExport:PreparingExport').'</p><div class=\"progress-bar\"><div class=\"progress-label\"></div></div></div>');\n\t\t\t$oPage->add('<div class=\"statistics\"><div class=\"stats-toggle closed\">'.Dict::S('ExcelExport:Statistics').'<div class=\"stats-data\"></div></div></div>');\n\t\t\t$oPage->add('</div>');\n\t\t\t$aLabels = array(\n\t\t\t\t'dialog_title' => Dict::S('ExcelExporter:ExportDialogTitle'),\n\t\t\t\t'cancel_button' => Dict::S('UI:Button:Cancel'),\n\t\t\t\t'export_button' => Dict::S('ExcelExporter:ExportButton'),\n\t\t\t\t'download_button' => Dict::Format('ExcelExporter:DownloadButton', 'export.xlsx'), //TODO: better name for the file (based on the class of the filter??)\n\t\t\t);\n\t\t\t$sJSLabels = json_encode($aLabels);\n\t\t\t$sFilter = addslashes($sFilter);\n\t\t\t$sJSPageUrl = addslashes(utils::GetAbsoluteUrlAppRoot().'pages/ajax.render.php');\n\t\t\t$oPage->add_ready_script(\"$('#XlsxExportDlg').xlsxexporter({filter: '$sFilter', labels: $sJSLabels, ajax_page_url: '$sJSPageUrl'});\");\n\t\t\tbreak;\n\n\t\tcase 'xlsx_start':\n\t\t\t$sFilter = utils::ReadParam('filter', '', false, 'raw_data');\n\t\t\t$bAdvanced = (utils::ReadParam('advanced', 'false') == 'true');\n\t\t\t$oSearch = DBObjectSearch::unserialize($sFilter);\n\n\t\t\t$oExcelExporter = new ExcelExporter();\n\t\t\t$oExcelExporter->SetObjectList($oSearch);\n\t\t\t//$oExcelExporter->SetChunkSize(10); //Only for testing\n\t\t\t$oExcelExporter->SetAdvancedMode($bAdvanced);\n\t\t\t$sToken = $oExcelExporter->SaveState();\n\t\t\t$oPage->add(json_encode(array('status' => 'ok', 'token' => $sToken)));\n\t\t\tbreak;\n\n\t\tcase 'xlsx_run':\n\t\t\t$sMemoryLimit = MetaModel::GetConfig()->Get('xlsx_exporter_memory_limit');\n\t\t\tini_set('memory_limit', $sMemoryLimit);\n\t\t\tini_set('max_execution_time', max(300, ini_get('max_execution_time'))); // At least 5 minutes\n\n\t\t\t$sToken = utils::ReadParam('token', '', false, 'raw_data');\n\t\t\t$oExcelExporter = new ExcelExporter($sToken);\n\t\t\t$aStatus = $oExcelExporter->Run();\n\t\t\t$aResults = array('status' => $aStatus['code'], 'percentage' => $aStatus['percentage'], 'message' => $aStatus['message']);\n\t\t\tif ($aStatus['code'] == 'done')\n\t\t\t{\n\t\t\t\t$aResults['statistics'] = $oExcelExporter->GetStatistics('html');\n\t\t\t}\n\t\t\t$oPage->add(json_encode($aResults));\n\t\t\tbreak;\n\n\t\tcase 'xlsx_download':\n\t\t\t$sToken = utils::ReadParam('token', '', false, 'raw_data');\n\t\t\t$oPage->SetContentType('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n\t\t\t$oPage->SetContentDisposition('attachment', 'export.xlsx');\n\t\t\t$sFileContent = ExcelExporter::GetExcelFileFromToken($sToken);\n\t\t\t$oPage->add($sFileContent);\n\t\t\tExcelExporter::CleanupFromToken($sToken);\n\t\t\tbreak;\n\n\t\tcase 'xlsx_abort':\n\t\t\t// Stop & cleanup an export...\n\t\t\t$sToken = utils::ReadParam('token', '', false, 'raw_data');\n\t\t\tExcelExporter::CleanupFromToken($sToken);\n\t\t\tbreak;\n\n\t\tcase 'relation_pdf':\n\t\tcase 'relation_attachment':\n\t\t\trequire_once(APPROOT.'core/simplegraph.class.inc.php');\n\t\t\trequire_once(APPROOT.'core/relationgraph.class.inc.php');\n\t\t\trequire_once(APPROOT.'core/displayablegraph.class.inc.php');\n\t\t\t$sRelation = utils::ReadParam('relation', 'impacts');\n\t\t\t$sDirection = utils::ReadParam('direction', 'down');\n\n\t\t\t$iGroupingThreshold = utils::ReadParam('g', 5, false, 'integer');\n\t\t\t$sPageFormat = utils::ReadParam('p', 'A4');\n\t\t\t$sPageOrientation = utils::ReadParam('o', 'L');\n\t\t\t$sTitle = utils::ReadParam('title', '', false, 'raw_data');\n\t\t\t$sPositions = utils::ReadParam('positions', null, false, 'raw_data');\n\t\t\t$aExcludedClasses = utils::ReadParam('excluded_classes', array(), false, 'raw_data');\n\t\t\t$bIncludeList = (bool)utils::ReadParam('include_list', false);\n\t\t\t$sComments = utils::ReadParam('comments', '', false, 'raw_data');\n\t\t\t$aContexts = utils::ReadParam('contexts', array(), false, 'raw_data');\n\t\t\t$sContextKey = utils::ReadParam('context_key', '', false, 'raw_data');\n\t\t\t$aPositions = null;\n\t\t\tif ($sPositions != null)\n\t\t\t{\n\t\t\t\t$aPositions = json_decode($sPositions, true);\n\t\t\t}\n\n\t\t\t// Get the list of source objects\n\t\t\t$aSources = utils::ReadParam('sources', array(), false, 'raw_data');\n\t\t\t$aSourceObjects = array();\n\t\t\tforeach($aSources as $sClass => $aIDs)\n\t\t\t{\n\t\t\t\t$oSearch = new DBObjectSearch($sClass);\n\t\t\t\t$oSearch->AddCondition('id', $aIDs, 'IN');\n\t\t\t\t$oSet = new DBObjectSet($oSearch);\n\t\t\t\twhile ($oObj = $oSet->Fetch())\n\t\t\t\t{\n\t\t\t\t\t$aSourceObjects[] = $oObj;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$sSourceClass = '*';\n\t\t\tif (count($aSourceObjects) == 1)\n\t\t\t{\n\t\t\t\t$sSourceClass = get_class($aSourceObjects[0]);\n\t\t\t}\n\n\t\t\t// Get the list of excluded objects\n\t\t\t$aExcluded = utils::ReadParam('excluded', array(), false, 'raw_data');\n\t\t\t$aExcludedObjects = array();\n\t\t\tforeach($aExcluded as $sClass => $aIDs)\n\t\t\t{\n\t\t\t\t$oSearch = new DBObjectSearch($sClass);\n\t\t\t\t$oSearch->AddCondition('id', $aIDs, 'IN');\n\t\t\t\t$oSet = new DBObjectSet($oSearch);\n\t\t\t\twhile ($oObj = $oSet->Fetch())\n\t\t\t\t{\n\t\t\t\t\t$aExcludedObjects[] = $oObj;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$iMaxRecursionDepth = MetaModel::GetConfig()->Get('relations_max_depth');\n\t\t\tif ($sDirection == 'up')\n\t\t\t{\n\t\t\t\t$oRelGraph = MetaModel::GetRelatedObjectsUp($sRelation, $aSourceObjects, $iMaxRecursionDepth, true, $aContexts);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oRelGraph = MetaModel::GetRelatedObjectsDown($sRelation, $aSourceObjects, $iMaxRecursionDepth, true, $aExcludedObjects, $aContexts);\n\t\t\t}\n\n\t\t\t// Remove excluded classes from the graph\n\t\t\tif (count($aExcludedClasses) > 0)\n\t\t\t{\n\t\t\t\t$oIterator = new RelationTypeIterator($oRelGraph, 'Node');\n\t\t\t\tforeach($oIterator as $oNode)\n\t\t\t\t{\n\t\t\t\t\t$oObj = $oNode->GetProperty('object');\n\t\t\t\t\tif ($oObj && in_array(get_class($oObj), $aExcludedClasses))\n\t\t\t\t\t{\n\t\t\t\t\t\t$oRelGraph->FilterNode($oNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$oPage = new PDFPage($sTitle, $sPageFormat, $sPageOrientation);\n\t\t\t$oPage->SetContentDisposition('attachment', $sTitle.'.pdf');\n\n\t\t\t$oGraph = DisplayableGraph::FromRelationGraph($oRelGraph, $iGroupingThreshold, ($sDirection == 'down'));\n\t\t\t$oGraph->InitFromGraphviz();\n\t\t\tif ($aPositions != null)\n\t\t\t{\n\t\t\t\t$oGraph->UpdatePositions($aPositions);\n\t\t\t}\n\n\t\t\t$aGroups = array();\n\t\t\t$oIterator = new RelationTypeIterator($oGraph, 'Node');\n\t\t\tforeach($oIterator as $oNode)\n\t\t\t{\n\t\t\t\tif ($oNode instanceof DisplayableGroupNode)\n\t\t\t\t{\n\t\t\t\t\t$aGroups[$oNode->GetProperty('group_index')] = $oNode->GetObjects();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// First page is the graph\n\t\t\t$oGraph->RenderAsPDF($oPage, $sComments, $sContextKey);\n\n\t\t\tif ($bIncludeList)\n\t\t\t{\n\t\t\t\t// Then the lists of objects (one table per finalclass)\n\t\t\t\t$aResults = array();\n\t\t\t\t$oIterator = new RelationTypeIterator($oRelGraph, 'Node');\n\t\t\t\tforeach($oIterator as $oNode)\n\t\t\t\t{\n\t\t\t\t\t$oObj = $oNode->GetProperty('object'); // Some nodes (Redundancy Nodes and Group) do not contain an object\n\t\t\t\t\tif ($oObj)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sObjClass = get_class($oObj);\n\t\t\t\t\t\tif (!array_key_exists($sObjClass, $aResults))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aResults[$sObjClass] = array();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$aResults[$sObjClass][] = $oObj;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$oPage->get_tcpdf()->AddPage();\n\t\t\t\t$oPage->get_tcpdf()->SetFont('dejavusans', '', 10, '', true); // Reset the font size to its default\n\t\t\t\t$oPage->add('<div class=\"page_header\"><h1>'.Dict::S('UI:RelationshipList').'</h1></div>');\n\t\t\t\t$iLoopTimeLimit = MetaModel::GetConfig()->Get('max_execution_time_per_loop');\n\t\t\t\tforeach($aResults as $sListClass => $aObjects)\n\t\t\t\t{\n\t\t\t\t\tset_time_limit($iLoopTimeLimit * count($aObjects));\n\t\t\t\t\t$oSet = CMDBObjectSet::FromArray($sListClass, $aObjects);\n\t\t\t\t\t$oSet->SetShowObsoleteData(utils::ShowObsoleteData());\n\t\t\t\t\t$sHtml = \"<div class=\\\"page_header\\\">\\n\";\n\t\t\t\t\t$sHtml .= \"<table class=\\\"section\\\"><tr><td>\".MetaModel::GetClassIcon($sListClass, true, 'width: 24px; height: 24px;').\" \".Dict::Format('UI:Search:Count_ObjectsOf_Class_Found', $oSet->Count(),\n\t\t\t\t\t\t\tMetamodel::GetName($sListClass)).\"</td></tr></table>\\n\";\n\t\t\t\t\t$sHtml .= \"</div>\\n\";\n\t\t\t\t\t$oPage->add($sHtml);\n\t\t\t\t\tcmdbAbstractObject::DisplaySet($oPage, $oSet, array('table_id' => $sSourceClass.'_'.$sRelation.'_'.$sDirection.'_'.$sListClass));\n\t\t\t\t\t$oPage->p(''); // Some space\n\t\t\t\t}\n\n\t\t\t\t// Then the content of the groups (one table per group)\n\t\t\t\tif (count($aGroups) > 0)\n\t\t\t\t{\n\t\t\t\t\t$oPage->get_tcpdf()->AddPage();\n\t\t\t\t\t$oPage->add('<div class=\"page_header\"><h1>'.Dict::S('UI:RelationGroups').'</h1></div>');\n\t\t\t\t\tforeach($aGroups as $idx => $aObjects)\n\t\t\t\t\t{\n\t\t\t\t\t\tset_time_limit($iLoopTimeLimit * count($aObjects));\n\t\t\t\t\t\t$sListClass = get_class(current($aObjects));\n\t\t\t\t\t\t$oSet = CMDBObjectSet::FromArray($sListClass, $aObjects);\n\t\t\t\t\t\t$sHtml = \"<div class=\\\"page_header\\\">\\n\";\n\t\t\t\t\t\t$sHtml .= \"<table class=\\\"section\\\"><tr><td>\".MetaModel::GetClassIcon($sListClass, true, 'width: 24px; height: 24px;').\" \".Dict::Format('UI:RelationGroupNumber_N', (1 + $idx)).\"</td></tr></table>\\n\";\n\t\t\t\t\t\t$sHtml .= \"</div>\\n\";\n\t\t\t\t\t\t$oPage->add($sHtml);\n\t\t\t\t\t\tcmdbAbstractObject::DisplaySet($oPage, $oSet);\n\t\t\t\t\t\t$oPage->p(''); // Some space\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($operation == 'relation_attachment')\n\t\t\t{\n\t\t\t\t$sObjClass = utils::ReadParam('obj_class', '', false, 'class');\n\t\t\t\t$iObjKey = (int)utils::ReadParam('obj_key', 0, false, 'integer');\n\n\t\t\t\t// Save the generated PDF as an attachment\n\t\t\t\t$sPDF = $oPage->get_pdf();\n\t\t\t\t$oPage = new ajax_page('');\n\t\t\t\t$oAttachment = new Attachment();\n\t\t\t\t$oAttachment->Set('item_class', $sObjClass);\n\t\t\t\t$oAttachment->Set('item_id', $iObjKey);\n\t\t\t\t$oDoc = new ormDocument($sPDF, 'application/pdf', $sTitle.'.pdf');\n\t\t\t\t$oAttachment->Set('contents', $oDoc);\n\t\t\t\t$iAttachmentId = $oAttachment->DBInsert();\n\t\t\t\t$aRet = array(\n\t\t\t\t\t'status' => 'ok',\n\t\t\t\t\t'att_id' => $iAttachmentId,\n\t\t\t\t);\n\t\t\t\t$oPage->add(json_encode($aRet));\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'relation_json':\n\t\t\trequire_once(APPROOT.'core/simplegraph.class.inc.php');\n\t\t\trequire_once(APPROOT.'core/relationgraph.class.inc.php');\n\t\t\trequire_once(APPROOT.'core/displayablegraph.class.inc.php');\n\t\t\t$sRelation = utils::ReadParam('relation', 'impacts');\n\t\t\t$sDirection = utils::ReadParam('direction', 'down');\n\t\t\t$iGroupingThreshold = utils::ReadParam('g', 5);\n\t\t\t$sPositions = utils::ReadParam('positions', null, false, 'raw_data');\n\t\t\t$aExcludedClasses = utils::ReadParam('excluded_classes', array(), false, 'raw_data');\n\t\t\t$aContexts = utils::ReadParam('contexts', array(), false, 'raw_data');\n\t\t\t$sContextKey = utils::ReadParam('context_key', array(), false, 'raw_data');\n\t\t\t$aPositions = null;\n\t\t\tif ($sPositions != null)\n\t\t\t{\n\t\t\t\t$aPositions = json_decode($sPositions, true);\n\t\t\t}\n\n\t\t\t// Get the list of source objects\n\t\t\t$aSources = utils::ReadParam('sources', array(), false, 'raw_data');\n\t\t\t$aSourceObjects = array();\n\t\t\tforeach($aSources as $sClass => $aIDs)\n\t\t\t{\n\t\t\t\t$oSearch = new DBObjectSearch($sClass);\n\t\t\t\t$oSearch->AddCondition('id', $aIDs, 'IN');\n\t\t\t\t$oSet = new DBObjectSet($oSearch);\n\t\t\t\twhile ($oObj = $oSet->Fetch())\n\t\t\t\t{\n\t\t\t\t\t$aSourceObjects[] = $oObj;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Get the list of excluded objects\n\t\t\t$aExcluded = utils::ReadParam('excluded', array(), false, 'raw_data');\n\t\t\t$aExcludedObjects = array();\n\t\t\tforeach($aExcluded as $sClass => $aIDs)\n\t\t\t{\n\t\t\t\t$oSearch = new DBObjectSearch($sClass);\n\t\t\t\t$oSearch->AddCondition('id', $aIDs, 'IN');\n\t\t\t\t$oSet = new DBObjectSet($oSearch);\n\t\t\t\twhile ($oObj = $oSet->Fetch())\n\t\t\t\t{\n\t\t\t\t\t$aExcludedObjects[] = $oObj;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Compute the graph\n\t\t\t$iMaxRecursionDepth = MetaModel::GetConfig()->Get('relations_max_depth');\n\t\t\tif ($sDirection == 'up')\n\t\t\t{\n\t\t\t\t$oRelGraph = MetaModel::GetRelatedObjectsUp($sRelation, $aSourceObjects, $iMaxRecursionDepth, true, $aContexts);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oRelGraph = MetaModel::GetRelatedObjectsDown($sRelation, $aSourceObjects, $iMaxRecursionDepth, true, $aExcludedObjects, $aContexts);\n\t\t\t}\n\n\t\t\t// Remove excluded classes from the graph\n\t\t\tif (count($aExcludedClasses) > 0)\n\t\t\t{\n\t\t\t\t$oIterator = new RelationTypeIterator($oRelGraph, 'Node');\n\t\t\t\tforeach($oIterator as $oNode)\n\t\t\t\t{\n\t\t\t\t\t$oObj = $oNode->GetProperty('object');\n\t\t\t\t\tif ($oObj && in_array(get_class($oObj), $aExcludedClasses))\n\t\t\t\t\t{\n\t\t\t\t\t\t$oRelGraph->FilterNode($oNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$oGraph = DisplayableGraph::FromRelationGraph($oRelGraph, $iGroupingThreshold, ($sDirection == 'down'));\n\t\t\t$oGraph->InitFromGraphviz();\n\t\t\tif ($aPositions != null)\n\t\t\t{\n\t\t\t\t$oGraph->UpdatePositions($aPositions);\n\t\t\t}\n\t\t\t$oPage->add($oGraph->GetAsJSON($sContextKey));\n\t\t\t$oPage->SetContentType('application/json');\n\t\t\tbreak;\n\n\t\tcase 'relation_groups':\n\t\t\t$aGroups = utils::ReadParam('groups');\n\t\t\t$iBlock = 1; // Zero is not a valid blockid\n\t\t\tforeach($aGroups as $idx => $aDefinition)\n\t\t\t{\n\t\t\t\t$sListClass = $aDefinition['class'];\n\t\t\t\t$oSearch = new DBObjectSearch($sListClass);\n\t\t\t\t$oSearch->AddCondition('id', $aDefinition['keys'], 'IN');\n\t\t\t\t$oSearch->SetShowObsoleteData(utils::ShowObsoleteData());\n\t\t\t\t$oPage->add(\"<h1>\".Dict::Format('UI:RelationGroupNumber_N', (1 + $idx)).\"</h1>\\n\");\n\t\t\t\t$oPage->add(\"<div id=\\\"relation_group_$idx\\\" class=\\\"page_header\\\">\\n\");\n\t\t\t\t$oPage->add(\"<h2>\".MetaModel::GetClassIcon($sListClass).\"&nbsp;<span class=\\\"hilite\\\">\".Dict::Format('UI:Search:Count_ObjectsOf_Class_Found', count($aDefinition['keys']), Metamodel::GetName($sListClass)).\"</h2>\\n\");\n\t\t\t\t$oPage->add(\"</div>\\n\");\n\t\t\t\t$oBlock = new DisplayBlock($oSearch, 'list');\n\t\t\t\t$oBlock->Display($oPage, 'group_'.$iBlock++);\n\t\t\t\t$oPage->p('&nbsp;'); // Some space ?\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'relation_lists':\n\t\t\t$aLists = utils::ReadParam('lists');\n\t\t\t$iBlock = 1; // Zero is not a valid blockid\n\t\t\tforeach($aLists as $sListClass => $aKeys)\n\t\t\t{\n\t\t\t\t$oSearch = new DBObjectSearch($sListClass);\n\t\t\t\t$oSearch->AddCondition('id', $aKeys, 'IN');\n\t\t\t\t$oSearch->SetShowObsoleteData(utils::ShowObsoleteData());\n\t\t\t\t$oPage->add(\"<div class=\\\"page_header\\\">\\n\");\n\t\t\t\t$oPage->add(\"<h2>\".MetaModel::GetClassIcon($sListClass).\"&nbsp;<span class=\\\"hilite\\\">\".Dict::Format('UI:Search:Count_ObjectsOf_Class_Found', count($aKeys), Metamodel::GetName($sListClass)).\"</h2>\\n\");\n\t\t\t\t$oPage->add(\"</div>\\n\");\n\t\t\t\t$oBlock = new DisplayBlock($oSearch, 'list');\n\t\t\t\t$oBlock->Display($oPage, 'list_'.$iBlock++, array('table_id' => 'ImpactAnalysis_'.$sListClass));\n\t\t\t\t$oPage->p('&nbsp;'); // Some space ?\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'ticket_impact':\n\t\t\trequire_once(APPROOT.'core/simplegraph.class.inc.php');\n\t\t\trequire_once(APPROOT.'core/relationgraph.class.inc.php');\n\t\t\trequire_once(APPROOT.'core/displayablegraph.class.inc.php');\n\t\t\t$sRelation = utils::ReadParam('relation', 'impacts');\n\t\t\t$sDirection = utils::ReadParam('direction', 'down');\n\t\t\t$iGroupingThreshold = utils::ReadParam('g', 5);\n\t\t\t$sClass = utils::ReadParam('class', '', false, 'class');\n\t\t\t$sAttCode = utils::ReadParam('attcode', 'functionalcis_list');\n\t\t\t$sImpactAttCode = utils::ReadParam('impact_attcode', 'impact_code');\n\t\t\t$sImpactAttCodeValue = utils::ReadParam('impact_attcode_value', 'manual');\n\t\t\t$iId = (int)utils::ReadParam('id', 0, false, 'integer');\n\n\t\t\t// Get the list of source objects\n\t\t\t$oTicket = MetaModel::GetObject($sClass, $iId);\n\t\t\t$oAttDef = MetaModel::GetAttributeDef($sClass, $sAttCode);\n\t\t\t$sExtKeyToRemote = $oAttDef->GetExtKeyToRemote();\n\t\t\t$oExtKeyToRemote = MetaModel::GetAttributeDef($oAttDef->GetLinkedClass(), $sExtKeyToRemote);\n\t\t\t$sRemoteClass = $oExtKeyToRemote->GetTargetClass();\n\t\t\t$oSet = $oTicket->Get($sAttCode);\n\t\t\t$aSourceObjects = array();\n\t\t\t$aExcludedObjects = array();\n\t\t\twhile ($oLnk = $oSet->Fetch())\n\t\t\t{\n\t\t\t\tif ($oLnk->Get($sImpactAttCode) == 'manual')\n\t\t\t\t{\n\t\t\t\t\t$aSourceObjects[] = MetaModel::GetObject($sRemoteClass, $oLnk->Get($sExtKeyToRemote));\n\t\t\t\t}\n\t\t\t\tif ($oLnk->Get($sImpactAttCode) == 'not_impacted')\n\t\t\t\t{\n\t\t\t\t\t$aExcludedObjects[] = MetaModel::GetObject($sRemoteClass, $oLnk->Get($sExtKeyToRemote));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Compute the graph\n\t\t\t$iMaxRecursionDepth = MetaModel::GetConfig()->Get('relations_max_depth');\n\t\t\tif ($sDirection == 'up')\n\t\t\t{\n\t\t\t\t$oRelGraph = MetaModel::GetRelatedObjectsUp($sRelation, $aSourceObjects, $iMaxRecursionDepth);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oRelGraph = MetaModel::GetRelatedObjectsDown($sRelation, $aSourceObjects, $iMaxRecursionDepth, $aExcludedObjects);\n\t\t\t}\n\n\t\t\t$aResults = $oRelGraph->GetObjectsByClass();\n\t\t\t$oGraph = DisplayableGraph::FromRelationGraph($oRelGraph, $iGroupingThreshold, ($sDirection == 'down'));\n\n\t\t\t$sContextKey = 'itop-tickets/relation_context/'.$sClass.'/'.$sRelation.'/'.$sDirection;\n\t\t\t$oAppContext = new ApplicationContext();\n\t\t\t$oGraph->Display($oPage, $aResults, $sRelation, $oAppContext, $aExcludedObjects, $sClass, $iId, $sContextKey, array('this' => $oTicket));\n\t\t\tbreak;\n\n\t\tcase 'export_build':\n\t\t\tregister_shutdown_function(function () {\n\t\t\t\t$aErr = error_get_last();\n\t\t\t\tif (($aErr !== null) && ($aErr['type'] & (E_ERROR | E_PARSE | E_CORE_ERROR | E_COMPILE_ERROR | E_USER_ERROR)))\n\t\t\t\t{\n\t\t\t\t\tob_end_clean();\n\t\t\t\t\techo json_encode(array('code' => 'error', 'percentage' => 100, 'message' => Dict::Format('UI:Error_Details', $aErr['message'])));\n\t\t\t\t}\n\t\t\t});\n\t\t\ttry\n\t\t\t{\n\t\t\t\t$token = utils::ReadParam('token', null);\n\t\t\t\t$sTokenForDisplay = utils::HtmlEntities($token);\n\t\t\t\t$aResult = array( // Fallback error, just in case\n\t\t\t\t\t'code' => 'error',\n\t\t\t\t\t'percentage' => 100,\n\t\t\t\t\t'message' => \"Export not found for token: '$sTokenForDisplay'\",\n\t\t\t\t);\n\t\t\t\t$data = '';\n\t\t\t\tif ($token === null)\n\t\t\t\t{\n\t\t\t\t\t$sFormat = utils::ReadParam('format', '');\n\t\t\t\t\t$sExpression = utils::ReadParam('expression', null, false, 'raw_data');\n\t\t\t\t\t$iQueryId = utils::ReadParam('query', null);\n\t\t\t\t\tif ($sExpression === null)\n\t\t\t\t\t{\n\t\t\t\t\t\t$oQuerySearch = DBObjectSearch::FromOQL('SELECT QueryOQL WHERE id = :query_id', array('query_id' => $iQueryId));\n\t\t\t\t\t\t$oQuerySearch->UpdateContextFromUser();\n\t\t\t\t\t\t$oQueries = new DBObjectSet($oQuerySearch);\n\t\t\t\t\t\tif ($oQueries->Count() > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$oQuery = $oQueries->Fetch();\n\t\t\t\t\t\t\t$sExpression = $oQuery->Get('oql');\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aResult = array('code' => 'error', 'percentage' => 100, 'message' => \"Invalid query phrasebook identifier: '$iQueryId'\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ($sExpression !== null)\n\t\t\t\t\t{\n\t\t\t\t\t\t$oSearch = DBObjectSearch::FromOQL($sExpression);\n\t\t\t\t\t\t$oSearch->UpdateContextFromUser();\n\t\t\t\t\t\t$oExporter = BulkExport::FindExporter($sFormat, $oSearch);\n\t\t\t\t\t\t$oExporter->SetObjectList($oSearch);\n\t\t\t\t\t\t$oExporter->SetFormat($sFormat);\n\t\t\t\t\t\t$oExporter->SetChunkSize(EXPORTER_DEFAULT_CHUNK_SIZE);\n\t\t\t\t\t\t$oExporter->ReadParameters();\n\t\t\t\t\t}\n\n\t\t\t\t\t// First pass, generate the headers\n\t\t\t\t\t$data .= $oExporter->GetHeader();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$oExporter = BulkExport::FindExporterFromToken($token);\n\t\t\t\t}\n\n\t\t\t\tif ($oExporter)\n\t\t\t\t{\n\t\t\t\t\t$data .= $oExporter->GetNextChunk($aResult);\n\t\t\t\t\tif ($aResult['code'] != 'done')\n\t\t\t\t\t{\n\t\t\t\t\t\t$oExporter->AppendToTmpFile($data);\n\t\t\t\t\t\t$aResult['token'] = $oExporter->SaveState();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// Last pass\n\t\t\t\t\t\t$data .= $oExporter->GetFooter();\n\t\t\t\t\t\t$oExporter->AppendToTmpFile($data);\n\t\t\t\t\t\t$aResult['token'] = $oExporter->SaveState();\n\t\t\t\t\t\tif (substr($oExporter->GetMimeType(), 0, 5) == 'text/')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Result must be encoded in UTF-8 to be passed as part of a JSON structure\n\t\t\t\t\t\t\t$sCharset = $oExporter->GetCharacterSet();\n\t\t\t\t\t\t\tif (strtoupper($sCharset) != 'UTF-8')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$aResult['text_result'] = iconv($sCharset, 'UTF-8', file_get_contents($oExporter->GetTmpFilePath()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$aResult['text_result'] = file_get_contents($oExporter->GetTmpFilePath());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$aResult['mime_type'] = $oExporter->GetMimeType();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$aResult['message'] = Dict::Format('Core:BulkExport:ClickHereToDownload_FileName', $oExporter->GetDownloadFileName());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$oPage->add(json_encode($aResult));\n\t\t\t} catch (BulkExportException $e)\n\t\t\t{\n\t\t\t\t$aResult = array('code' => 'error', 'percentage' => 100, 'message' => utils::HtmlEntities($e->GetLocalizedMessage()));\n\t\t\t\t$oPage->add(json_encode($aResult));\n\t\t\t} catch (Exception $e)\n\t\t\t{\n\t\t\t\t$aResult = array('code' => 'error', 'percentage' => 100, 'message' => utils::HtmlEntities($e->getMessage()));\n\t\t\t\t$oPage->add(json_encode($aResult));\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'export_download':\n\t\t\t$token = utils::ReadParam('token', null);\n\t\t\tif ($token !== null)\n\t\t\t{\n\t\t\t\t$oExporter = BulkExport::FindExporterFromToken($token);\n\t\t\t\tif ($oExporter)\n\t\t\t\t{\n\t\t\t\t\t$sMimeType = $oExporter->GetMimeType();\n\t\t\t\t\tif (substr($sMimeType, 0, 5) == 'text/')\n\t\t\t\t\t{\n\t\t\t\t\t\t$sMimeType .= ';charset='.strtolower($oExporter->GetCharacterSet());\n\t\t\t\t\t}\n\t\t\t\t\t$oPage->SetContentType($sMimeType);\n\t\t\t\t\t$oPage->SetContentDisposition('attachment', $oExporter->GetDownloadFileName());\n\t\t\t\t\t$oPage->add(file_get_contents($oExporter->GetTmpFilePath()));\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'export_cancel':\n\t\t\t$token = utils::ReadParam('token', null);\n\t\t\tif ($token !== null)\n\t\t\t{\n\t\t\t\t$oExporter = BulkExport::FindExporterFromToken($token);\n\t\t\t\tif ($oExporter)\n\t\t\t\t{\n\t\t\t\t\t$oExporter->Cleanup();\n\t\t\t\t}\n\t\t\t}\n\t\t\t$aResult = array('code' => 'error', 'percentage' => 100, 'message' => Dict::S('Core:BulkExport:ExportCancelledByUser'));\n\t\t\t$oPage->add(json_encode($aResult));\n\t\t\tbreak;\n\n\t\tcase 'extend_lock':\n\t\t\t$sObjClass = utils::ReadParam('obj_class', '', false, 'class');\n\t\t\t$iObjKey = (int)utils::ReadParam('obj_key', 0, false, 'integer');\n\t\t\t$sToken = utils::ReadParam('token', 0, false, 'raw_data');\n\t\t\t$aResult = iTopOwnershipLock::ExtendLock($sObjClass, $iObjKey, $sToken);\n\t\t\tif (!$aResult['status'])\n\t\t\t{\n\t\t\t\tif ($aResult['operation'] == 'lost')\n\t\t\t\t{\n\t\t\t\t\t$sName = $aResult['owner']->GetName();\n\t\t\t\t\tif ($aResult['owner']->Get('contactid') != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sName .= ' ('.$aResult['owner']->Get('contactid_friendlyname').')';\n\t\t\t\t\t}\n\t\t\t\t\t$aResult['message'] = Dict::Format('UI:CurrentObjectIsLockedBy_User', $sName);\n\t\t\t\t\t$aResult['popup_message'] = Dict::Format('UI:CurrentObjectIsLockedBy_User_Explanation', $sName);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif ($aResult['operation'] == 'expired')\n\t\t\t\t\t{\n\t\t\t\t\t\t$aResult['message'] = Dict::S('UI:CurrentObjectLockExpired');\n\t\t\t\t\t\t$aResult['popup_message'] = Dict::S('UI:CurrentObjectLockExpired_Explanation');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$oPage->add(json_encode($aResult));\n\t\t\tbreak;\n\n\t\tcase 'watchdog':\n\t\t\t$oPage->add('ok'); // Better for debugging...\n\t\t\tbreak;\n\n\t\tcase 'cke_img_upload':\n\t\t\t// Image uploaded via CKEditor\n\t\t\t$aResult = array(\n\t\t\t\t'uploaded' => 0,\n\t\t\t\t'fileName' => '',\n\t\t\t\t'url' => '',\n\t\t\t\t'icon' => '',\n\t\t\t\t'msg' => '',\n\t\t\t\t'att_id' => 0,\n\t\t\t\t'preview' => 'false',\n\t\t\t);\n\n\t\t\t$sObjClass = stripslashes(utils::ReadParam('obj_class', '', false, 'class'));\n\t\t\t$sTempId = utils::ReadParam('temp_id', '', false, 'transaction_id');\n\t\t\tif (empty($sObjClass))\n\t\t\t{\n\t\t\t\t$aResult['error'] = \"Missing argument 'obj_class'\";\n\t\t\t}\n\t\t\telseif (empty($sTempId))\n\t\t\t{\n\t\t\t\t$aResult['error'] = \"Missing argument 'temp_id'\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t$oDoc = utils::ReadPostedDocument('upload');\n\t\t\t\t\tif (InlineImage::IsImage($oDoc->GetMimeType()))\n\t\t\t\t\t{\n\t\t\t\t\t\t$aDimensions = null;\n\t\t\t\t\t\t$oDoc = InlineImage::ResizeImageToFit($oDoc, $aDimensions);\n\t\t\t\t\t\t$oAttachment = MetaModel::NewObject('InlineImage');\n\t\t\t\t\t\t$oAttachment->Set('expire', time() + MetaModel::GetConfig()->Get('draft_attachments_lifetime'));\n\t\t\t\t\t\t$oAttachment->Set('temp_id', $sTempId);\n\t\t\t\t\t\t$oAttachment->Set('item_class', $sObjClass);\n\t\t\t\t\t\t$oAttachment->SetDefaultOrgId();\n\t\t\t\t\t\t$oAttachment->Set('contents', $oDoc);\n\t\t\t\t\t\t$oAttachment->Set('secret', sprintf('%06x', mt_rand(0, 0xFFFFFF))); // something not easy to guess\n\t\t\t\t\t\t$iAttId = $oAttachment->DBInsert();\n\n\t\t\t\t\t\t$aResult['uploaded'] = 1;\n\t\t\t\t\t\t$aResult['msg'] = htmlentities($oDoc->GetFileName(), ENT_QUOTES, 'UTF-8');\n\t\t\t\t\t\t$aResult['fileName'] = $oDoc->GetFileName();\n\t\t\t\t\t\t$aResult['url'] = utils::GetAbsoluteUrlAppRoot().INLINEIMAGE_DOWNLOAD_URL.$iAttId.'&s='.$oAttachment->Get('secret');\n\t\t\t\t\t\tif (is_array($aDimensions))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aResult['width'] = $aDimensions['width'];\n\t\t\t\t\t\t\t$aResult['height'] = $aDimensions['height'];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$aResult['error'] = $oDoc->GetFileName().' is not a valid image format.';\n\t\t\t\t\t}\n\t\t\t\t} catch (FileUploadException $e)\n\t\t\t\t{\n\t\t\t\t\t$aResult['error'] = $e->GetMessage();\n\t\t\t\t}\n\t\t\t}\n\t\t\t$oPage->add(json_encode($aResult));\n\t\t\tbreak;\n\n\t\tcase 'cke_upload_and_browse':\n\t\t\t$sTempId = utils::ReadParam('temp_id', '', false, 'transaction_id');\n\t\t\t$sObjClass = utils::ReadParam('obj_class', '', false, 'class');\n\t\t\ttry\n\t\t\t{\n\t\t\t\t$oDoc = utils::ReadPostedDocument('upload');\n\t\t\t\t$sDocMimeType = $oDoc->GetMimeType();\n\t\t\t\tif (!InlineImage::IsImage($sDocMimeType))\n\t\t\t\t{\n\t\t\t\t\tLogErrorMessage('CKE : error when uploading image in ajax.render.php, not an image',\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'operation' => 'cke_upload_and_browse',\n\t\t\t\t\t\t\t'class' => $sObjClass,\n\t\t\t\t\t\t\t'ImgMimeType' => $sDocMimeType,\n\t\t\t\t\t\t));\n\t\t\t\t} else {\n\t\t\t\t\t$aDimensions = null;\n\t\t\t\t\t$oDoc = InlineImage::ResizeImageToFit($oDoc, $aDimensions);\n\t\t\t\t\t$oAttachment = MetaModel::NewObject('InlineImage');\n\t\t\t\t\t$oAttachment->Set('expire', time() + MetaModel::GetConfig()->Get('draft_attachments_lifetime'));\n\t\t\t\t\t$oAttachment->Set('temp_id', $sTempId);\n\t\t\t\t\t$oAttachment->Set('item_class', $sObjClass);\n\t\t\t\t\t$oAttachment->SetDefaultOrgId();\n\t\t\t\t\t$oAttachment->Set('contents', $oDoc);\n\t\t\t\t\t$oAttachment->Set('secret', sprintf('%06x', mt_rand(0, 0xFFFFFF))); // something not easy to guess\n\t\t\t\t\t$iAttId = $oAttachment->DBInsert();\n\t\t\t\t}\n\n\t\t\t} catch (FileUploadException $e)\n\t\t\t{\n\t\t\t\tLogErrorMessage('CKE : error when uploading image in ajax.render.php, exception occured',\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'operation' => 'cke_upload_and_browse',\n\t\t\t\t\t\t'class' => $sObjClass,\n\t\t\t\t\t\t'exceptionMsg' => $e,\n\t\t\t\t\t));\n\t\t\t}\n\t\t// Fall though !! => browse\n\n\t\tcase 'cke_browse':\n\t\t\t$oPage = new NiceWebPage(Dict::S('UI:BrowseInlineImages'));\n\t\t\t$oPage->add_linked_stylesheet(utils::GetAbsoluteUrlAppRoot().'css/magnific-popup.css');\n\t\t\t$oPage->add_linked_script(utils::GetAbsoluteUrlAppRoot().'js/jquery.magnific-popup.min.js');\n\t\t\t$sImgUrl = utils::GetAbsoluteUrlAppRoot().INLINEIMAGE_DOWNLOAD_URL;\n\n\t\t\t$sTempId = utils::ReadParam('temp_id', '', false, 'transaction_id');\n\t\t\t$sClass = utils::ReadParam('obj_class', '', false, 'class');\n\t\t\t$iObjectId = utils::ReadParam('obj_key', 0, false, 'integer');\n\t\t\t$sCKEditorFuncNum = utils::ReadParam('CKEditorFuncNum', '');\n\n\t\t\t$sPostUrl = utils::GetAbsoluteUrlAppRoot().'pages/ajax.render.php?CKEditorFuncNum='.$sCKEditorFuncNum;\n\n\t\t\t$oPage->add_style(\n\t\t\t\t<<<EOF\nbody {\n\toverflow: auto;\n}\nEOF\n\t\t\t);\n\t\t\t$sMaxUpload = InlineImage::GetMaxUpload();\n\t\t\t$sUploadLegend = Dict::S('UI:UploadInlineImageLegend');\n\t\t\t$sUploadLabel = Dict::S('UI:SelectInlineImageToUpload');\n\t\t\t$sAvailableImagesLegend = Dict::S('UI:AvailableInlineImagesLegend');\n\t\t\t$sInsertBtnLabel = Dict::S('UI:Button:Insert');\n\t\t\t$sNoInlineImage = Dict::S('UI:NoInlineImage');\n\t\t\t$oPage->add(\n\t\t\t\t<<<EOF\n<div>\n\t<fieldset>\n\t\t<legend>$sUploadLegend</legend>\n\t\t<form method=\"post\" id=\"upload_form\" action=\"$sPostUrl\" enctype=\"multipart/form-data\">\n\t\t\t<input type=\"hidden\" name=\"operation\" value=\"cke_upload_and_browse\">\n\t\t\t<input type=\"hidden\" name=\"temp_id\" value=\"$sTempId\">\n\t\t\t<input type=\"hidden\" name=\"obj_class\" value=\"$sClass\">\n\t\t\t<input type=\"hidden\" name=\"obj_key\" value=\"$iObjectId\">\n\t\t\t$sUploadLabel <input id=\"upload_button\" type=\"file\" name=\"upload\"> <span id=\"upload_status\"> $sMaxUpload</span>\n\t\t</form>\n\t</fieldset>\n</div>\nEOF\n\t\t\t);\n\n\t\t\t$oPage->add_script(\n\t\t\t\t<<<EOF\n        // Helper function to get parameters from the query string.\n        function getUrlParam( paramName ) {\n            var reParam = new RegExp( '(?:[\\?&]|&)' + paramName + '=([^&]+)', 'i' );\n            var match = window.location.search.match( reParam );\n\t\t\n            return ( match && match.length > 1 ) ? match[1] : null;\n        }\n        // Simulate user action of selecting a file to be returned to CKEditor.\n        function returnFileUrl(iAttId, sAltText, sSecret) {\n\n            var funcNum = getUrlParam( 'CKEditorFuncNum' );\n            var fileUrl = '$sImgUrl'+iAttId+'&s='+sSecret;\n            window.opener.CKEDITOR.tools.callFunction( funcNum, fileUrl, function() {\n                // Get the reference to a dialog window.\n                var dialog = this.getDialog();\n                // Check if this is the Image Properties dialog window.\n                if ( dialog.getName() == 'image' ) {\n                    // Get the reference to a text field that stores the \"alt\" attribute.\n                    var element = dialog.getContentElement( 'info', 'txtAlt' );\n                    // Assign the new value.\n                    if ( element )\n                        element.setValue(sAltText);\n                }\n                // Return \"false\" to stop further execution. In such case CKEditor will ignore the second argument (\"fileUrl\")\n                // and the \"onSelect\" function assigned to the button that called the file manager (if defined).\n                // return false;\n            } );\n            window.close();\n        }\nEOF\n\t\t\t);\n\t\t\t$oPage->add_ready_script(\n\t\t\t\t<<<EOF\n$('#upload_button').on('change', function() {\n\t$('#upload_status').html('<img src=\"../images/indicator.gif\">'); \n\t$('#upload_form').submit();\n\t$(this).prop('disabled', true);\n});\n$('.img-picker').magnificPopup({type: 'image', closeOnContentClick: true });\nEOF\n\t\t\t);\n\t\t\t$sOQL = \"SELECT InlineImage WHERE ((temp_id = :temp_id) OR (item_class = :obj_class AND item_id = :obj_id))\";\n\t\t\t$oSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('temp_id' => $sTempId, 'obj_class' => $sClass, 'obj_id' => $iObjectId));\n\t\t\t$oPage->add(\"<div><fieldset><legend>$sAvailableImagesLegend</legend>\");\n\n\t\t\tif ($oSet->Count() == 0)\n\t\t\t{\n\t\t\t\t$oPage->add(\"<p style=\\\"text-align:center\\\">$sNoInlineImage</p>\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twhile ($oAttachment = $oSet->Fetch())\n\t\t\t\t{\n\t\t\t\t\t$oDoc = $oAttachment->Get('contents');\n\t\t\t\t\tif ($oDoc->GetMainMimeType() == 'image')\n\t\t\t\t\t{\n\t\t\t\t\t\t$sDocName = addslashes(htmlentities($oDoc->GetFileName(), ENT_QUOTES, 'UTF-8'));\n\t\t\t\t\t\t$iAttId = $oAttachment->GetKey();\n\t\t\t\t\t\t$sSecret = $oAttachment->Get('secret');\n\t\t\t\t\t\t$oPage->add(\"<div style=\\\"float:left;margin:1em;text-align:center;\\\"><img class=\\\"img-picker\\\" style=\\\"max-width:300px;cursor:zoom-in\\\" href=\\\"{$sImgUrl}{$iAttId}&s={$sSecret}\\\" alt=\\\"$sDocName\\\" title=\\\"$sDocName\\\" src=\\\"{$sImgUrl}{$iAttId}&s={$sSecret}\\\"><br/><button onclick=\\\"returnFileUrl($iAttId, '$sDocName', '$sSecret')\\\">$sInsertBtnLabel</button></div>\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$oPage->add(\"</fieldset></div>\");\n\t\t\tbreak;\n\n\t\tcase 'custom_fields_update':\n\t\t\t$oPage->SetContentType('application/json');\n\t\t\t$sAttCode = utils::ReadParam('attcode', '');\n\t\t\t$aRequestedFields = utils::ReadParam('requested_fields', array());\n\t\t\t$sRequestedFieldsFormPath = utils::ReadParam('form_path', '');\n\t\t\t$sJson = utils::ReadParam('json_obj', '', false, 'raw_data');\n\n\t\t\t$aResult = array();\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\n\t\t\t\t$oOrmCustomFieldValue = $oObj->Get($sAttCode);\n\t\t\t\t$oForm = $oOrmCustomFieldValue->GetForm();\n\t\t\t\t$oSubForm = $oForm->FindSubForm($sRequestedFieldsFormPath);\n\t\t\t\t$oRenderer = new \\Combodo\\iTop\\Renderer\\Console\\ConsoleFormRenderer($oSubForm);\n\t\t\t\t$aRenderRes = $oRenderer->Render($aRequestedFields);\n\n\t\t\t\t$aResult['form']['updated_fields'] = $aRenderRes;\n\t\t\t} catch (Exception $e)\n\t\t\t{\n\t\t\t\t$aResult['error'] = $e->getMessage();\n\t\t\t}\n\t\t\t$oPage->add(json_encode($aResult));\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t$oPage->p(\"Invalid query.\");\n\t}\n\n\t$oPage->output();\n} catch (Exception $e)\n{\n\t// note: transform to cope with XSS attacks\n\techo htmlentities($e->GetMessage(), ENT_QUOTES, 'utf-8');\n\tIssueLog::Error($e->getMessage().\"\\nDebug trace:\\n\".$e->getTraceAsString());\n}\n"], "fixing_code": ["<?php\n// Copyright (C) 2010-2018 Combodo SARL\n//\n//   This file is part of iTop.\n//\n//   iTop is free software; you can redistribute it and/or modify\t\n//   it under the terms of the GNU Affero General Public License as published by\n//   the Free Software Foundation, either version 3 of the License, or\n//   (at your option) any later version.\n//\n//   iTop is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n//\n//   You should have received a copy of the GNU Affero General Public License\n//   along with iTop. If not, see <http://www.gnu.org/licenses/>\n\n\ndefine('ITOP_APPLICATION', 'iTop');\ndefine('ITOP_APPLICATION_SHORT', 'iTop');\ndefine('ITOP_VERSION', '2.6.2');\ndefine('ITOP_REVISION', 'svn');\ndefine('ITOP_BUILD_DATE', '$WCNOW$');\n\ndefine('ACCESS_USER_WRITE', 1);\ndefine('ACCESS_ADMIN_WRITE', 2);\ndefine('ACCESS_FULL', ACCESS_USER_WRITE | ACCESS_ADMIN_WRITE);\ndefine('ACCESS_READONLY', 0);\n\n/**\n * Configuration read/write\n *\n * @copyright   Copyright (C) 2010-2018 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\n\nrequire_once('coreexception.class.inc.php');\nrequire_once('attributedef.class.inc.php'); // For the defines\nrequire_once('simplecrypt.class.inc.php');\n\nclass ConfigException extends CoreException\n{\n}\n\n// was utf8 but it only supports BMP chars (https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html)\n// so we switched to utf8mb4 in iTop 2.5, adding dependency to MySQL 5.5.3\n// The config params db_character_set and db_collation were introduced as a temporary workaround and removed in iTop 2.5\n// now everything uses those fixed value !\ndefine('DEFAULT_CHARACTER_SET', 'utf8mb4');\ndefine('DEFAULT_COLLATION', 'utf8mb4_unicode_ci');\n\ndefine('DEFAULT_LOG_GLOBAL', true);\ndefine('DEFAULT_LOG_NOTIFICATION', true);\ndefine('DEFAULT_LOG_ISSUE', true);\ndefine('DEFAULT_LOG_WEB_SERVICE', true);\n\ndefine('DEFAULT_QUERY_CACHE_ENABLED', true);\n\n\ndefine('DEFAULT_MIN_DISPLAY_LIMIT', 10);\ndefine('DEFAULT_MAX_DISPLAY_LIMIT', 15);\ndefine('DEFAULT_STANDARD_RELOAD_INTERVAL', 5 * 60);\ndefine('DEFAULT_FAST_RELOAD_INTERVAL', 1 * 60);\ndefine('DEFAULT_SECURE_CONNECTION_REQUIRED', false);\ndefine('DEFAULT_ALLOWED_LOGIN_TYPES', 'form|basic|external');\ndefine('DEFAULT_EXT_AUTH_VARIABLE', '$_SERVER[\\'REMOTE_USER\\']');\ndefine('DEFAULT_ENCRYPTION_KEY', '@iT0pEncr1pti0n!'); // We'll use a random generated key later (if possible)\ndefine('DEFAULT_ENCRYPTION_LIB', 'Mcrypt'); // We'll define the best encryption available later\n/**\n * Config\n * configuration data (this class cannot not be localized, because it is responsible for loading the dictionaries)\n *\n * @package     iTopORM\n *\n * @see \\MetaModel::GetConfig() to get the config, if the metamodel was already loaded\n * @see utils::GetConfig() to load config from the current env, if metamodel is not loaded\n */\nclass Config\n{\n\t//protected $m_bIsLoaded = false;\n\tprotected $m_sFile = '';\n\n\tprotected $m_aAppModules;\n\tprotected $m_aDataModels;\n\tprotected $m_aWebServiceCategories;\n\tprotected $m_aAddons;\n\n\tprotected $m_aModuleSettings;\n\n\t/**\n\t * New way to store the settings !\n\t *\n\t * @var array\n\t * @since 2.5 db* variables\n\t */\n\tprotected $m_aSettings = array(\n\t\t'app_env_label' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Label displayed to describe the current application environment, defaults to the environment name (e.g. \"production\")',\n\t\t\t'default' => '',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'app_root_url' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Root URL used for navigating within the application, or from an email to the application (you can put $SERVER_NAME$ as a placeholder for the server\\'s name)',\n\t\t\t'default' => '',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'app_icon_url' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Hyperlink to redirect the user when clicking on the application icon (in the main window, or login/logoff pages)',\n\t\t\t'default' => 'http://www.combodo.com/itop',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'db_host' => array(\n\t\t\t'type' => 'string',\n\t\t\t'default' => null,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'db_user' => array(\n\t\t\t'type' => 'string',\n\t\t\t'default' => null,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'db_pwd' => array(\n\t\t\t'type' => 'string',\n\t\t\t'default' => null,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'db_name' => array(\n\t\t\t'type' => 'string',\n\t\t\t'default' => null,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'db_subname' => array(\n\t\t\t'type' => 'string',\n\t\t\t'default' => null,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'db_tls.enabled' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'If true then the connection to the DB will be encrypted',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'db_tls.ca' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Path to certificate authority file for SSL',\n\t\t\t'default' => null,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'db_character_set' => array( // @deprecated to remove in 2.7 ? N\u00b01001 utf8mb4 switch\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Deprecated since iTop 2.5 : now using utf8mb4',\n\t\t\t'default' => 'DEPRECATED_2.5',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'db_collation' => array( // @deprecated to remove in 2.7 ? N\u00b01001 utf8mb4 switch\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Deprecated since iTop 2.5 : now using utf8mb4_unicode_ci',\n\t\t\t'default' => 'DEPRECATED_2.5',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'skip_check_to_write' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Disable data format and integrity checks to boost up data load (insert or update)',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'skip_check_ext_keys' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Disable external key check when checking the value of attributes',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'skip_strong_security' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Disable strong security - TEMPORARY: this flag should be removed when we are more confident in the recent change in security',\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'query_optimization_enabled' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'The queries are optimized based on the assumption that the DB integrity has been preserved. By disabling the optimization one can ensure that the fetched data is clean... but this can be really slower or not usable at all (some queries will exceed the allowed number of joins in MySQL: 61!)',\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'query_indentation_enabled' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'For developers: format the SQL queries for human analysis',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'disable_mandatory_ext_keys' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'For developers: allow every external keys to be undefined',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'graphviz_path' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Path to the Graphviz \"dot\" executable for graphing objects lifecycle',\n\t\t\t'default' => '/usr/bin/dot',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'php_path' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Path to the php executable in CLI mode',\n\t\t\t'default' => 'php',\n\t\t\t'value' => 'php',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'session_name' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'The name of the cookie used to store the PHP session id',\n\t\t\t'default' => 'iTop',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'max_combo_length' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'The maximum number of elements in a drop-down list. If more then an autocomplete will be used',\n\t\t\t'default' => 50,\n\t\t\t'value' => 50,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'min_autocomplete_chars' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'The minimum number of characters to type in order to trigger the \"autocomplete\" behavior',\n\t\t\t'default' => 2,\n\t\t\t'value' => 2,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'allow_menu_on_linkset' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Display Action menus in view mode on any LinkedSet with edit_mode != none',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'allow_target_creation' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Displays the + button on external keys to create target objects',\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t// Levels that trigger a confirmation in the CSV import/synchro wizard\n\t\t'csv_import_min_object_confirmation' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Minimum number of objects to check for the confirmation percentages',\n\t\t\t'default' => 3,\n\t\t\t'value' => 3,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'csv_import_errors_percentage' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Percentage of errors that trigger a confirmation in the CSV import',\n\t\t\t'default' => 50,\n\t\t\t'value' => 50,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'csv_import_modifications_percentage' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Percentage of modifications that trigger a confirmation in the CSV import',\n\t\t\t'default' => 50,\n\t\t\t'value' => 50,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'csv_import_creations_percentage' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Percentage of creations that trigger a confirmation in the CSV import',\n\t\t\t'default' => 50,\n\t\t\t'value' => 50,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'csv_import_history_display' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Display the history tab in the import wizard',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'access_mode' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Access mode: ACCESS_READONLY = 0, ACCESS_ADMIN_WRITE = 2, ACCESS_FULL = 3',\n\t\t\t'default' => ACCESS_FULL,\n\t\t\t'value' => ACCESS_FULL,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'access_message' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Message displayed to the users when there is any access restriction',\n\t\t\t'default' => 'iTop is temporarily frozen, please wait... (the admin team)',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'online_help' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Hyperlink to the online-help web page',\n\t\t\t'default' => 'http://www.combodo.com/itop-help',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'log_usage' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Log the usage of the application (i.e. the date/time and the user name of each login)',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'log_rest_service' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Log the usage of the REST/JSON service',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'synchro_trace' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Synchronization details: none, display, save (includes \\'display\\')',\n\t\t\t'default' => 'none',\n\t\t\t'value' => 'none',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'link_set_item_separator' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Link set from string: line separator',\n\t\t\t'default' => '|',\n\t\t\t'value' => '|',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'link_set_attribute_separator' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Link set from string: attribute separator',\n\t\t\t'default' => ';',\n\t\t\t'value' => ';',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'link_set_value_separator' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Link set from string: value separator (between the attcode and the value itself',\n\t\t\t'default' => ':',\n\t\t\t'value' => ':',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'link_set_attribute_qualifier' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Link set from string: attribute qualifier (encloses both the attcode and the value)',\n\t\t\t'default' => \"'\",\n\t\t\t'value' => \"'\",\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'tag_set_item_separator' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Tag set from string: tag label separator',\n\t\t\t'default' => '|',\n\t\t\t'value' => '|',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'cron_max_execution_time' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Duration (seconds) of the page cron.php, must be shorter than php setting max_execution_time and shorter than the web server response timeout',\n\t\t\t'default' => 600,\n\t\t\t'value' => 600,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'cron_sleep' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Duration (seconds) before cron.php checks again if something must be done',\n\t\t\t'default' => 2,\n\t\t\t'value' => 2,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'async_task_retries' => array(\n\t\t\t'type' => 'array',\n\t\t\t'description' => 'Automatic retries of asynchronous tasks in case of failure (per class)',\n\t\t\t'default' => array('AsyncSendEmail' => array('max_retries' => 0, 'retry_delay' => 600)),\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'email_asynchronous' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'If set, the emails are sent off line, which requires cron.php to be activated. Exception: some features like the email test utility will force the serialized mode',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'email_transport' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Mean to send emails: PHPMail (uses the function mail()) or SMTP (implements the client protocol)',\n\t\t\t'default' => \"PHPMail\",\n\t\t\t'value' => \"PHPMail\",\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'email_transport_smtp.host' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'host name or IP address (optional)',\n\t\t\t'default' => \"localhost\",\n\t\t\t'value' => \"localhost\",\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'email_transport_smtp.port' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'port number (optional)',\n\t\t\t'default' => 25,\n\t\t\t'value' => 25,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'email_transport_smtp.encryption' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'tls or ssl (optional)',\n\t\t\t'default' => \"\",\n\t\t\t'value' => \"\",\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'email_transport_smtp.username' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Authentication user (optional)',\n\t\t\t'default' => \"\",\n\t\t\t'value' => \"\",\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'email_transport_smtp.password' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Authentication password (optional)',\n\t\t\t'default' => \"\",\n\t\t\t'value' => \"\",\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'email_css' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'CSS that will override the standard stylesheet used for the notifications',\n\t\t\t'default' => \"\",\n\t\t\t'value' => \"\",\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'email_default_sender_address' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Default address provided in the email from header field.',\n\t\t\t'default' => \"\",\n\t\t\t'value' => \"\",\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'email_default_sender_label' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Default label provided in the email from header field.',\n\t\t\t'default' => \"\",\n\t\t\t'value' => \"\",\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'apc_cache.enabled' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'If set, the APC cache is allowed (the PHP extension must also be active)',\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'apc_cache.query_ttl' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Time to live set in APC for the prepared queries (seconds - 0 means no timeout)',\n\t\t\t'default' => 3600,\n\t\t\t'value' => 3600,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'apc_cache_emulation.max_entries' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Maximum number of cache entries (0 means no limit)',\n\t\t\t'default' => 1000,\n\t\t\t'value' => 1000,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'timezone' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Timezone (reference: http://php.net/manual/en/timezones.php). If empty, it will be left unchanged and MUST be explicitly configured in PHP',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'examples' => array(\n\t\t\t\t'America/Sao_Paulo',\n\t\t\t\t'America/New_York (standing for EDT)',\n\t\t\t\t'America/Los_Angeles (standing for PDT)',\n\t\t\t\t'Asia/Istanbul',\n\t\t\t\t'Asia/Singapore',\n\t\t\t\t'Africa/Casablanca',\n\t\t\t\t'Australia/Sydney'\n\t\t\t),\n\t\t\t'default' => 'Europe/Paris',\n\t\t\t'value' => 'Europe/Paris',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'cas_include_path' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'The path where to find the phpCAS library',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => '/usr/share/php',\n\t\t\t'value' => '/usr/share/php',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'cas_version' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'The CAS protocol version to use: \"1.0\" (CAS v1), \"2.0\" (CAS v2) or \"S1\" (SAML V1) )',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => '2.0',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_host' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'The name of the CAS host',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => '',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_port' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'The port used by the CAS server',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => 443,\n\t\t\t'value' => 443,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_context' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'The CAS context',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => '',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_server_ca_cert_path' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'The path where to find the certificate of the CA for validating the certificate of the CAS server',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => '',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_logout_redirect_service' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'The redirect service (URL) to use when logging-out with CAS',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => '',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_memberof' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'A semicolon separated list of group names that the user must be member of (works only with SAML - e.g. cas_version=> \"S1\")',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => '',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_user_synchro' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Whether or not to synchronize users with CAS/LDAP',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => 0,\n\t\t\t'value' => 0,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_update_profiles' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Whether or not to update the profiles of an existing user from the CAS information',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => 0,\n\t\t\t'value' => 0,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_profile_pattern' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'A regular expression pattern to extract the name of the iTop profile from the name of an LDAP/CAS group',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => '/^cn=([^,]+),/',\n\t\t\t'value' => '/^cn=([^,]+),/',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_default_profiles' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'A semi-colon separated list of iTop Profiles to use when creating a new user if no profile is retrieved from CAS',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => 'Portal user',\n\t\t\t'value' => 'Portal user',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'cas_debug' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Activate the CAS debug',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'forgot_password' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Enable the \"Forgot password\" feature',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'forgot_password_from' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Sender email address for the \"forgot password\" feature. If empty, defaults to the recipient\\'s  email address.',\n\t\t\t// examples... not used (nor 'description')\n\t\t\t'default' => '',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'deadline_format' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'The format used for displaying \"deadline\" attributes: any string with the following placeholders: $date$, $difference$',\n\t\t\t// examples... $date$ ($deadline$)\n\t\t\t'default' => '$difference$',\n\t\t\t'value' => '$difference$',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'buttons_position' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Position of the forms buttons: bottom | top | both',\n\t\t\t// examples... not used\n\t\t\t'default' => 'both',\n\t\t\t'value' => 'both',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'shortcut_actions' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Actions that are available as direct buttons next to the \"Actions\" menu',\n\t\t\t// examples... not used\n\t\t\t'default' => 'UI:Menu:Modify,UI:Menu:New',\n\t\t\t'value' => 'UI:Menu:Modify',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'complex_actions_limit' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Display the \"actions\" menu items that require long computation only if the list of objects is contains less objects than this number (0 means no limit)',\n\t\t\t// examples... not used\n\t\t\t'default' => 50,\n\t\t\t'value' => 50,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'synchro_prevent_delete_all' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Stop the synchro if all the replicas of a data source become obsolete at the same time.',\n\t\t\t// examples... not used\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'source_dir' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Source directory for the datamodel files. (which gets compiled to env-production).',\n\t\t\t// examples... not used\n\t\t\t'default' => '',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'csv_file_default_charset' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Character set used by default for downloading and uploading data as a CSV file. Warning: it is case sensitive (uppercase is preferable).',\n\t\t\t// examples... not used\n\t\t\t'default' => 'ISO-8859-1',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'debug_report_spurious_chars' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Report, in the error log, the characters found in the output buffer, echoed by mistake in the loaded modules, and potentially corrupting the output',\n\t\t\t// examples... not used\n\t\t\t'default' => false,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'impact_analysis_first_tab' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Which tab to display first in the impact analysis view: list or graphics. Graphics are nicer but slower to display when there are many objects',\n\t\t\t// examples... not used\n\t\t\t'default' => 'graphics',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'url_validation_pattern' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Regular expression to validate/detect the format of an URL (URL attributes and Wiki formatting for Text attributes)',\n\t\t\t'default' => '(https?|ftp)\\://([a-zA-Z0-9+!*(),;?&=\\$_.-]+(\\:[a-zA-Z0-9+!*(),;?&=\\$_.-]+)?@)?([a-zA-Z0-9-.]{3,})(\\:[0-9]{2,5})?(/([a-zA-Z0-9%+\\$_-]\\.?)+)*/?(\\?[a-zA-Z+&\\$_.-][a-zA-Z0-9;:[\\]@&%=+/\\$_.-]*)?(#[a-zA-Z_.-][a-zA-Z0-9+\\$_.-]*)?',\n\t\t\t//            SHEME.......... USER....................... PASSWORD.......................... HOST/IP........... PORT.......... PATH........................ GET............................................ ANCHOR............................\n\t\t\t// Example: http://User:passWord@127.0.0.1:8888/patH/Page.php?arrayArgument[2]=something:blah20#myAnchor\n\t\t\t// Origin of this regexp: http://www.php.net/manual/fr/function.preg-match.php#93824\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n        'email_validation_pattern' => array(\n            'type' => 'string',\n            'description' => 'Regular expression to validate/detect the format of an eMail address',\n            'default' => \"[a-zA-Z0-9._&'-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z0-9-]{2,}\",\n            'value' => '',\n            'source_of_value' => '',\n            'show_in_conf_sample' => true,\n        ),\n        'email_decoration_class' => array(\n            'type' => 'string',\n            'description' => 'CSS class(es) to use as decoration for the HTML rendering of the attribute. eg. \"fa fa-envelope\" will put a mail icon.',\n            'default' => 'fa fa-envelope',\n            'value' => '',\n            'source_of_value' => '',\n            'show_in_conf_sample' => false,\n        ),\n        'phone_number_validation_pattern' => array(\n            'type' => 'string',\n            'description' => 'Regular expression to validate/detect the format of a phone number',\n            'default' => \"[0-9.\\-\\ \\+\\(\\)]+\",\n            'value' => '',\n            'source_of_value' => '',\n            'show_in_conf_sample' => false,\n        ),\n        'phone_number_url_pattern' => array(\n            'type' => 'string',\n            'description' => 'Format for phone number url, use %1$s as a placeholder for the value. eg. \"tel:%1$s\" for regular phone applications or \"callto:%1$s\" for Skype. Default is \"tel:%1$s\".',\n            'default' => 'tel:%1$s',\n            'value' => '',\n            'source_of_value' => '',\n            'show_in_conf_sample' => false,\n        ),\n        'phone_number_decoration_class' => array(\n            'type' => 'string',\n            'description' => 'CSS class(es) to use as decoration for the HTML rendering of the attribute. eg. \"fa fa-phone\" will put a phone icon.',\n            'default' => 'fa fa-phone',\n            'value' => '',\n            'source_of_value' => '',\n            'show_in_conf_sample' => false,\n        ),\n\t\t'log_kpi_duration' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Level of logging for troubleshooting performance issues (1 to enable, 2 +blame callers)',\n\t\t\t// examples... not used\n\t\t\t'default' => 0,\n\t\t\t'value' => 0,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'log_kpi_memory' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Level of logging for troubleshooting memory limit issues',\n\t\t\t// examples... not used\n\t\t\t'default' => 0,\n\t\t\t'value' => 0,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'log_kpi_user_id' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Limit the scope of users to the given user id (* means no limit)',\n\t\t\t// examples... not used\n\t\t\t'default' => '*',\n\t\t\t'value' => '*',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'max_linkset_output' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Maximum number of items shown when getting a list of related items in an email, using the form $this->some_list$. 0 means no limit.',\n\t\t\t'default' => 100,\n\t\t\t'value' => 100,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'demo_mode' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Set to true to prevent users from changing passwords/languages',\n\t\t\t'default' => false,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'portal_tickets' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'CSV list of classes supported in the portal',\n\t\t\t// examples... not used\n\t\t\t'default' => 'UserRequest',\n\t\t\t'value' => 'UserRequest',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'portal_dispatch_urls' => array(\n\t\t\t'type' => 'array',\n\t\t\t'description' => 'Associative array of sPortalId => Home page URL (relatively to the application root)',\n\t\t\t// examples... not used\n\t\t\t'default' => array(),\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'max_execution_time_per_loop' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Maximum execution time requested, per loop, during bulk operations. Zero means no limit.',\n\t\t\t// examples... not used\n\t\t\t'default' => 30,\n\t\t\t'value' => 30,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'max_history_length' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Maximum length of the history table (in the \"History\" tab on each object) before it gets truncated. Latest modifications are displayed first.',\n\t\t\t// examples... not used\n\t\t\t'default' => 50,\n\t\t\t'value' => 50,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'max_history_case_log_entry_length' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'The length (in number of characters) at which to truncate the (expandable) display (in the history) of a case log entry. If zero, the display in the history is not truncated.',\n\t\t\t// examples... not used\n\t\t\t'default' => 60,\n\t\t\t'value' => 60,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'full_text_chunk_duration' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Delay after which the results are displayed.',\n\t\t\t// examples... not used\n\t\t\t'default' => 2,\n\t\t\t'value' => 2,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'full_text_accelerators' => array(\n\t\t\t'type' => 'array',\n\t\t\t'description' => 'Specifies classes to be searched at first (and the subset of data) when running the full text search.',\n\t\t\t'default' => array(),\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'full_text_needle_min' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Minimum size of the full text needle.',\n\t\t\t'default' => 3,\n\t\t\t'value' => 3,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'tracking_level_linked_set_default' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Default tracking level if not explicitly set at the attribute level, for AttributeLinkedSet (defaults to NONE in case of a fresh install, LIST otherwise - this to preserve backward compatibility while upgrading from a version older than 2.0.3 - see TRAC #936)',\n\t\t\t'default' => LINKSET_TRACKING_LIST,\n\t\t\t'value' => LINKSET_TRACKING_LIST,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'tracking_level_linked_set_indirect_default' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Default tracking level if not explicitly set at the attribute level, for AttributeLinkedSetIndirect',\n\t\t\t'default' => LINKSET_TRACKING_ALL,\n\t\t\t'value' => LINKSET_TRACKING_ALL,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'user_rights_legacy' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Set to true to restore the buggy algorithm for the computation of user rights (within the same profile, ALLOW on the class itself has precedence on DENY of a parent class)',\n\t\t\t'default' => false,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'xlsx_exporter_memory_limit' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'Memory limit to use when (interactively) exporting data to Excel',\n\t\t\t'default' => '2048M', // Huuuuuuge 2GB!\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'min_reload_interval' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Minimum refresh interval (seconds) for dashboards, shortcuts, etc. Even if the interval is set programmatically, it is forced to that minimum',\n\t\t\t'default' => 5, // In iTop 2.0.3, this was the hardcoded value\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'relations_max_depth' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Maximum number of successive levels (depth) to explore when displaying the impact/depends on relations.',\n\t\t\t'default' => 20, // In iTop 2.0.3, this was the hardcoded value\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'transaction_storage' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'The type of mechanism to use for storing the unique identifiers for transactions (Session|File).',\n\t\t\t'default' => 'File',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'transactions_enabled' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Whether or not the whole mechanism to prevent multiple submissions of a page is enabled.',\n\t\t\t'default' => true,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'log_transactions' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Whether or not to enable the debug log for the transactions.',\n\t\t\t'default' => false,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'concurrent_lock_enabled' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Whether or not to activate the locking mechanism in order to prevent concurrent edition of the same object.',\n\t\t\t'default' => false,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'concurrent_lock_expiration_delay' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Delay (in seconds) for a concurrent lock to expire',\n\t\t\t'default' => 120,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'concurrent_lock_override_profiles' => array(\n\t\t\t'type' => 'array',\n\t\t\t'description' => 'The list of profiles allowed to \"kill\" a lock',\n\t\t\t'default' => array('Administrator'),\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'html_sanitizer' => array(\n\t\t\t'type' => 'string',\n\t\t\t'description' => 'The class to use for HTML sanitization: HTMLDOMSanitizer, HTMLPurifierSanitizer or HTMLNullSanitizer',\n\t\t\t'default' => 'HTMLDOMSanitizer',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'inline_image_max_display_width' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'The maximum width (in pixels) when displaying images inside an HTML formatted attribute. Images will be displayed using this this maximum width.',\n\t\t\t'default' => '250',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'inline_image_max_storage_width' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'The maximum width (in pixels) when uploading images to be used inside an HTML formatted attribute. Images larger than the given size will be downsampled before storing them in the database.',\n\t\t\t'default' => '1600',\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'draft_attachments_lifetime' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Lifetime (in seconds) of drafts\\' attachments and inline images: after this duration, the garbage collector will delete them.',\n\t\t\t'default' => 86400,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'date_and_time_format' => array(\n\t\t\t'type' => 'array',\n\t\t\t'description' => 'Format for date and time display (per language)',\n\t\t\t'default' => array('default' => array('date' => 'Y-m-d', 'time' => 'H:i:s', 'date_time' => '$date $time')),\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'breadcrumb.max_count' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Maximum number of items kept in the history breadcrumb. Set it to 0 to entirely disable the breadcrumb.',\n\t\t\t'default' => 8,\n\t\t\t'value' => 8,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'obsolescence.show_obsolete_data' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Default value for the user preference \"show obsolete data\"',\n\t\t\t'default' => false,\n\t\t\t'value' => '',\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'obsolescence.date_update_interval' => array(\n\t\t\t'type' => 'integer',\n\t\t\t'description' => 'Delay in seconds between two refreshes of the obsolescence dates.',\n\t\t\t'default' => 600,\n\t\t\t'value' => 600,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'disable_attachments_download_legacy_portal' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Disable attachments download from legacy portal',\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'secure_rest_services' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'When set to true, only the users with the profile \"REST Services User\" are allowed to use the REST web services.',\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'search_manual_submit' => array(\n\t\t\t'type' => 'array',\n\t\t\t'description' => 'Force manual submit of search all requests',\n\t\t\t'default' => false,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'optimize_requests_for_join_count' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Optimize request joins to minimize the count (default is true, try to set it to false in case of performance issues)',\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'high_cardinality_classes' => array(\n\t\t\t'type' => 'array',\n\t\t\t'description' => 'List of classes with high cardinality (Force manual submit of search)',\n\t\t\t'default' => array(),\n\t\t\t'value' => array(),\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => true,\n\t\t),\n\t\t'newsroom_enabled' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'Whether or not the whole newsroom is enabled',\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'regenerate_session_id_enabled' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'If true then session id will be regenerated on each login, to prevent session fixation.',\n\t\t\t'default' => true,\n\t\t\t'value' => true,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t\t'security.disable_inline_documents_sandbox' => array(\n\t\t\t'type' => 'bool',\n\t\t\t'description' => 'If true then the sandbox for documents displayed in a browser tab will be disabled; enabling scripts and other interactive content. Note that setting this to true will open the application to potential XSS attacks!',\n\t\t\t'default' => false,\n\t\t\t'value' => false,\n\t\t\t'source_of_value' => '',\n\t\t\t'show_in_conf_sample' => false,\n\t\t),\n\t);\n\n\tpublic function IsProperty($sPropCode)\n\t{\n\t\treturn (array_key_exists($sPropCode, $this->m_aSettings));\n\t}\n\n\t/**\n\t * @return string identifier that can be used for example to name WebStorage/SessionStorage keys (they\n\t *     are related to a whole domain, and a domain can host multiple itop)\n\t *     Beware: do not expose server side information to the client !\n\t */\n\tpublic function GetItopInstanceid()\n\t{\n\t\treturn md5(utils::GetAbsoluteUrlAppRoot()\n\t\t\t.'==='.$this->Get('db_host')\n\t\t\t.'/'.$this->Get('db_name')\n\t\t\t.'/'.$this->Get('db_subname'));\n\t}\n\n\tpublic function GetDescription($sPropCode)\n\t{\n\t\treturn $this->m_aSettings[$sPropCode];\n\t}\n\n\t/**\n\t * @param string $sPropCode\n\t * @param mixed $value\n\t * @param string $sSourceDesc mandatory for variables with show_in_conf_sample=false\n\t *\n\t * @throws \\CoreException\n\t */\n\tpublic function Set($sPropCode, $value, $sSourceDesc = 'unknown')\n\t{\n\t\t$sType = $this->m_aSettings[$sPropCode]['type'];\n\t\tswitch ($sType)\n\t\t{\n\t\t\tcase 'bool':\n\t\t\t\t$value = (bool)$value;\n\t\t\t\tbreak;\n\t\t\tcase 'string':\n\t\t\t\t$value = (string)$value;\n\t\t\t\tbreak;\n\t\t\tcase 'integer':\n\t\t\t\t$value = (integer)$value;\n\t\t\t\tbreak;\n\t\t\tcase 'float':\n\t\t\t\t$value = (float)$value;\n\t\t\t\tbreak;\n\t\t\tcase 'array':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new CoreException('Unknown type for setting', array('property' => $sPropCode, 'type' => $sType));\n\t\t}\n\t\t$this->m_aSettings[$sPropCode]['value'] = $value;\n\t\t$this->m_aSettings[$sPropCode]['source_of_value'] = $sSourceDesc;\n\n\t}\n\n    /**\n     * @param string $sPropCode\n     *\n     * @return mixed\n     */\n    public function Get($sPropCode)\n    {\n        return $this->m_aSettings[$sPropCode]['value'];\n    }\n\n\t/**\n\t * Event log options (see LOG_... definition)\n\t */\n\t// Those variables will be deprecated later, when the transition to ...Get('my_setting') will be done\n\tprotected $m_bLogGlobal;\n\tprotected $m_bLogNotification;\n\tprotected $m_bLogIssue;\n\tprotected $m_bLogWebService;\n\tprotected $m_bQueryCacheEnabled; // private setting\n\n\t/**\n\t * @var integer Number of elements to be displayed when there are more than m_iMaxDisplayLimit elements\n\t */\n\tprotected $m_iMinDisplayLimit;\n\t/**\n\t * @var integer Max number of elements before truncating the display\n\t */\n\tprotected $m_iMaxDisplayLimit;\n\n\t/**\n\t * @var integer Number of seconds between two reloads of the display (standard)\n\t */\n\tprotected $m_iStandardReloadInterval;\n\t/**\n\t * @var integer Number of seconds between two reloads of the display (fast)\n\t */\n\tprotected $m_iFastReloadInterval;\n\n\t/**\n\t * @var boolean Whether or not a secure connection is required for using the application.\n\t *              If set, any attempt to connect to an iTop page with http:// will be redirected\n\t *              to https://\n\t */\n\tprotected $m_bSecureConnectionRequired;\n\n\t/**\n\t * @var string Langage code, default if the user language is undefined\n\t */\n\tprotected $m_sDefaultLanguage;\n\n\t/**\n\t * @var string Type of login process allowed: form|basic|url|external\n\t */\n\tprotected $m_sAllowedLoginTypes;\n\n\t/**\n\t * @var string Name of the PHP variable in which external authentication information is passed by the web server\n\t */\n\tprotected $m_sExtAuthVariable;\n\n\t/**\n\t * @var string Encryption key used for all attributes of type \"encrypted string\". Can be set to a random value\n\t *             unless you want to import a database from another iTop instance, in which case you must use\n\t *             the same encryption key in order to properly decode the encrypted fields\n\t */\n\tprotected $m_sEncryptionKey;\n\n\t/**\n\t * @var string Encryption key used for all attributes of type \"encrypted string\". Can be set to a random value\n\t *             unless you want to import a database from another iTop instance, in which case you must use\n\t *             the same encryption key in order to properly decode the encrypted fields\n\t */\n\tprotected $m_sEncryptionLibrary;\n\n\t/**\n\t * @var array Additional character sets to be supported by the interactive CSV import\n\t *            'iconv_code' => 'display name'\n\t */\n\tprotected $m_aCharsets;\n\n    /**\n     * Config constructor.\n     *\n     * @param string|null $sConfigFile\n     * @param bool $bLoadConfig\n     *\n     * @throws \\ConfigException\n     * @throws \\CoreException\n     */\n    public function __construct($sConfigFile = null, $bLoadConfig = true)\n\t{\n\t\t$this->m_sFile = $sConfigFile;\n\t\tif (is_null($sConfigFile))\n\t\t{\n\t\t\t$bLoadConfig = false;\n\t\t}\n\n\t\t$this->m_aAddons = array(\n\t\t\t// Default AddOn, always present can be moved to an official iTop Module later if needed\n\t\t\t'user rights' => 'addons/userrights/userrightsprofile.class.inc.php',\n\t\t);\n\n\t\tforeach ($this->m_aSettings as $sPropCode => $aSettingInfo)\n\t\t{\n\t\t\t$this->m_aSettings[$sPropCode]['value'] = $aSettingInfo['default'];\n\t\t}\n\n\t\t$this->m_bLogGlobal = DEFAULT_LOG_GLOBAL;\n\t\t$this->m_bLogNotification = DEFAULT_LOG_NOTIFICATION;\n\t\t$this->m_bLogIssue = DEFAULT_LOG_ISSUE;\n\t\t$this->m_bLogWebService = DEFAULT_LOG_WEB_SERVICE;\n\t\t$this->m_iMinDisplayLimit = DEFAULT_MIN_DISPLAY_LIMIT;\n\t\t$this->m_iMaxDisplayLimit = DEFAULT_MAX_DISPLAY_LIMIT;\n\t\t$this->m_iStandardReloadInterval = DEFAULT_STANDARD_RELOAD_INTERVAL;\n\t\t$this->m_iFastReloadInterval = DEFAULT_FAST_RELOAD_INTERVAL;\n\t\t$this->m_bSecureConnectionRequired = DEFAULT_SECURE_CONNECTION_REQUIRED;\n\t\t$this->m_sDefaultLanguage = 'EN US';\n\t\t$this->m_sAllowedLoginTypes = DEFAULT_ALLOWED_LOGIN_TYPES;\n\t\t$this->m_sExtAuthVariable = DEFAULT_EXT_AUTH_VARIABLE;\n\t\t$this->m_aCharsets = array();\n\t\t$this->m_bQueryCacheEnabled = DEFAULT_QUERY_CACHE_ENABLED;\n\n\t\t//define default encryption params according to php install\n\t\t$aEncryptParams = SimpleCrypt::GetNewDefaultParams();\n\t\t$this->m_sEncryptionLibrary = isset($aEncryptParams['lib']) ? $aEncryptParams['lib'] : DEFAULT_ENCRYPTION_LIB;\n\t\t$this->m_sEncryptionKey= isset($aEncryptParams['key']) ? $aEncryptParams['key'] : DEFAULT_ENCRYPTION_KEY;\n\n\t\t$this->m_aModuleSettings = array();\n\n\t\tif ($bLoadConfig)\n\t\t{\n\t\t\t$this->Load($sConfigFile);\n\t\t\t$this->Verify();\n\t\t}\n\n\t\t// Application root url: set a default value, then normalize it\n\t\t/*\n\t\t * Does not work in CLI/unattended mode\n\t\t\t\t$sAppRootUrl = trim($this->Get('app_root_url'));\n\t\t\t\tif (strlen($sAppRootUrl) == 0)\n\t\t\t\t{\n\t\t\t\t\t$sAppRootUrl = utils::GetDefaultUrlAppRoot();\n\t\t\t\t}\n\t\t\t\tif (substr($sAppRootUrl, -1, 1) != '/')\n\t\t\t\t{\n\t\t\t\t\t$sAppRootUrl .= '/';\n\t\t\t\t}\n\t\t\t\t$this->Set('app_root_url', $sAppRootUrl);\n\t\t */\n\t}\n\n    /**\n     * @param string $sPurpose\n     * @param string $sFileName\n     *\n     * @throws \\ConfigException\n     */\n    protected function CheckFile($sPurpose, $sFileName)\n\t{\n\t\tif (!file_exists($sFileName))\n\t\t{\n\t\t\tthrow new ConfigException(\"Could not find $sPurpose file\", array('file' => $sFileName));\n\t\t}\n\t\tif (!is_readable($sFileName))\n\t\t{\n\t\t\tthrow new ConfigException(\"Could not read $sPurpose file (the file exists but cannot be read). Do you have the rights to access this file?\",\n\t\t\t\tarray('file' => $sFileName));\n\t\t}\n\t}\n\n\t/**\n\t * @param string $sConfigFile\n\t *\n\t * @throws \\ConfigException\n\t * @throws \\CoreException\n\t */\n\tprotected function Load($sConfigFile)\n\t{\n\t\t$this->CheckFile('configuration', $sConfigFile);\n\n\t\t$sConfigCode = trim(file_get_contents($sConfigFile));\n\n\t\t// Variables created when doing an eval() on the config file\n\t\t/** @var array $MySettings */\n\t\t$MySettings = null;\n\t\t/** @var array $MyModuleSettings */\n\t\t$MyModuleSettings = null;\n\t\t/** @var array $MyModules */\n\t\t$MyModules = null;\n\n\t\t// This does not work on several lines\n\t\t// preg_match('/^<\\\\?php(.*)\\\\?'.'>$/', $sConfigCode, $aMatches)...\n\t\t// So, I've implemented a solution suggested in the PHP doc (search for phpWrapper)\n\t\ttry\n\t\t{\n\t\t\tob_start();\n\t\t\teval('?'.'>'.trim($sConfigCode));\n\t\t\t$sNoise = trim(ob_get_contents());\n\t\t\tob_end_clean();\n\t\t}\n\t\tcatch (Exception $e)\n\t\t{\n\t\t\t// well, never reach in case of parsing error :-(\n\t\t\t// will be improved in PHP 6 ?\n\t\t\tthrow new ConfigException('Error in configuration file',\n\t\t\t\tarray('file' => $sConfigFile, 'error' => $e->getMessage()));\n\t\t}\n\t\tcatch(Error $e)\n\t\t{\n\t\t    // PHP 7\n\t\t    throw new ConfigException('Error in configuration file',\n\t\t        array('file' => $sConfigFile, 'error' => $e->getMessage().' at line '.$e->getLine()));\n\t\t}\n\t\tif (strlen($sNoise) > 0)\n\t\t{\n\t\t\t// Note: sNoise is an html output, but so far it was ok for me (e.g. showing the entire call stack) \n\t\t\tthrow new ConfigException('Syntax error in configuration file',\n\t\t\t\tarray('file' => $sConfigFile, 'error' => '<tt>'.htmlentities($sNoise, ENT_QUOTES, 'UTF-8').'</tt>'));\n\t\t}\n\n\t\tif (!isset($MySettings) || !is_array($MySettings))\n\t\t{\n\t\t\tthrow new ConfigException('Missing array in configuration file',\n\t\t\t\tarray('file' => $sConfigFile, 'expected' => '$MySettings'));\n\t\t}\n\n\t\tif (!array_key_exists('addons', $MyModules))\n\t\t{\n\t\t\tthrow new ConfigException('Missing item in configuration file',\n\t\t\t\tarray('file' => $sConfigFile, 'expected' => '$MyModules[\\'addons\\']'));\n\t\t}\n\t\tif (!array_key_exists('user rights', $MyModules['addons']))\n\t\t{\n\t\t\t// Add one, by default\n\t\t\t$MyModules['addons']['user rights'] = '/addons/userrights/userrightsnull.class.inc.php';\n\t\t}\n\n\t\t$this->m_aAddons = $MyModules['addons'];\n\n\t\tforeach ($MySettings as $sPropCode => $rawvalue)\n\t\t{\n\t\t\tif ($this->IsProperty($sPropCode))\n\t\t\t{\n\t\t\t\tif (is_string($rawvalue))\n\t\t\t\t{\n\t\t\t\t\t$value = trim($rawvalue);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$value = $rawvalue;\n\t\t\t\t}\n\t\t\t\t$this->Set($sPropCode, $value, $sConfigFile);\n\t\t\t}\n\t\t}\n\n\t\t$this->m_bLogGlobal = isset($MySettings['log_global']) ? (bool)trim($MySettings['log_global']) : DEFAULT_LOG_GLOBAL;\n\t\t$this->m_bLogNotification = isset($MySettings['log_notification']) ? (bool)trim($MySettings['log_notification']) : DEFAULT_LOG_NOTIFICATION;\n\t\t$this->m_bLogIssue = isset($MySettings['log_issue']) ? (bool)trim($MySettings['log_issue']) : DEFAULT_LOG_ISSUE;\n\t\t$this->m_bLogWebService = isset($MySettings['log_web_service']) ? (bool)trim($MySettings['log_web_service']) : DEFAULT_LOG_WEB_SERVICE;\n\t\t$this->m_bQueryCacheEnabled = isset($MySettings['query_cache_enabled']) ? (bool)trim($MySettings['query_cache_enabled']) : DEFAULT_QUERY_CACHE_ENABLED;\n\n\t\t$this->m_iMinDisplayLimit = isset($MySettings['min_display_limit']) ? trim($MySettings['min_display_limit']) : DEFAULT_MIN_DISPLAY_LIMIT;\n\t\t$this->m_iMaxDisplayLimit = isset($MySettings['max_display_limit']) ? trim($MySettings['max_display_limit']) : DEFAULT_MAX_DISPLAY_LIMIT;\n\t\t$this->m_iStandardReloadInterval = isset($MySettings['standard_reload_interval']) ? trim($MySettings['standard_reload_interval']) : DEFAULT_STANDARD_RELOAD_INTERVAL;\n\t\t$this->m_iFastReloadInterval = isset($MySettings['fast_reload_interval']) ? trim($MySettings['fast_reload_interval']) : DEFAULT_FAST_RELOAD_INTERVAL;\n\t\t$this->m_bSecureConnectionRequired = isset($MySettings['secure_connection_required']) ? (bool)trim($MySettings['secure_connection_required']) : DEFAULT_SECURE_CONNECTION_REQUIRED;\n\n\t\t$this->m_aModuleSettings = isset($MyModuleSettings) ? $MyModuleSettings : array();\n\n\t\t$this->m_sDefaultLanguage = isset($MySettings['default_language']) ? trim($MySettings['default_language']) : 'EN US';\n\t\t$this->m_sAllowedLoginTypes = isset($MySettings['allowed_login_types']) ? trim($MySettings['allowed_login_types']) : DEFAULT_ALLOWED_LOGIN_TYPES;\n\t\t$this->m_sExtAuthVariable = isset($MySettings['ext_auth_variable']) ? trim($MySettings['ext_auth_variable']) : DEFAULT_EXT_AUTH_VARIABLE;\n\t\t$this->m_sEncryptionKey = isset($MySettings['encryption_key']) ? trim($MySettings['encryption_key']) : $this->m_sEncryptionKey;\n\t\t$this->m_sEncryptionLibrary = isset($MySettings['encryption_library']) ? trim($MySettings['encryption_library']) : $this->m_sEncryptionLibrary;\n\t\t$this->m_aCharsets = isset($MySettings['csv_import_charsets']) ? $MySettings['csv_import_charsets'] : array();\n\t}\n\n\tprotected function Verify()\n\t{\n\t\t// Files are verified later on, just before using them -see MetaModel::Plugin()\n\t\t// (we have their final path at that point)\n\t}\n\n\tpublic function GetModuleSetting($sModule, $sProperty, $defaultvalue = null)\n\t{\n\t\tif (isset($this->m_aModuleSettings[$sModule][$sProperty]))\n\t\t{\n\t\t\treturn $this->m_aModuleSettings[$sModule][$sProperty];\n\t\t}\n\n\t\t// Fall back to the predefined XML parameter, if any\n\t\treturn $this->GetModuleParameter($sModule, $sProperty, $defaultvalue);\n\t}\n\n    /**\n     * @param string $sModule\n     * @param string $sProperty\n     * @param mixed|null $defaultvalue\n     *\n     * @return mixed|null\n     */\n    public function GetModuleParameter($sModule, $sProperty, $defaultvalue = null)\n\t{\n\t\t$ret = $defaultvalue;\n\t\tif (class_exists('ModulesXMLParameters'))\n\t\t{\n\t\t\t$aAllParams = ModulesXMLParameters::GetData($sModule);\n\t\t\tif (array_key_exists($sProperty, $aAllParams))\n\t\t\t{\n\t\t\t\t$ret = $aAllParams[$sProperty];\n\t\t\t}\n\t\t}\n\n\t\treturn $ret;\n\t}\n\n\tpublic function SetModuleSetting($sModule, $sProperty, $value)\n\t{\n\t\t$this->m_aModuleSettings[$sModule][$sProperty] = $value;\n\t}\n\n\tpublic function GetAddons()\n\t{\n\t\treturn $this->m_aAddons;\n\t}\n\n\tpublic function SetAddons($aAddons)\n\t{\n\t\t$this->m_aAddons = $aAddons;\n\t}\n\n\t/**\n\t * @return string\n\t *\n\t * @deprecated 2.5 will be removed in 2.6\n\t * @see Config::Get() as a replacement\n\t */\n\tpublic function GetDBHost()\n\t{\n\t\treturn $this->Get('db_host');\n\t}\n\n\t/**\n\t * @return string\n\t *\n\t * @deprecated 2.5 will be removed in 2.6\n\t * @see Config::Get() as a replacement\n\t */\n\tpublic function GetDBName()\n\t{\n\t\treturn $this->Get('db_name');\n\t}\n\n\t/**\n\t * @return string\n\t *\n\t * @deprecated 2.5 will be removed in 2.6\n\t * @see Config::Get() as a replacement\n\t */\n\tpublic function GetDBSubname()\n\t{\n\t\treturn $this->Get('db_subname');\n\t}\n\n\t/**\n\t * @return string\n\t *\n\t * @deprecated 2.5 will be removed in 2.6 N\u00b01001 utf8mb4 switch\n\t * @see Config::DEFAULT_CHARACTER_SET\n\t */\n\tpublic function GetDBCharacterSet()\n\t{\n\t\treturn DEFAULT_CHARACTER_SET;\n\t}\n\n\t/**\n\t * @return string\n\t *\n\t * @deprecated 2.5 will be removed in 2.6 N\u00b01001 utf8mb4 switch\n\t * @see Config::DEFAULT_COLLATION\n\t */\n\tpublic function GetDBCollation()\n\t{\n\t\treturn DEFAULT_COLLATION;\n\t}\n\n\t/**\n\t * @return string\n\t *\n\t * @deprecated 2.5 will be removed in 2.6\n\t * @see Config::Get() as a replacement\n\t */\n\tpublic function GetDBUser()\n\t{\n\t\treturn $this->Get('db_user');\n\t}\n\n\t/**\n\t * @return string\n\t *\n\t * @deprecated 2.5 will be removed in 2.6\n\t * @see Config::Get() as a replacement\n\t */\n\tpublic function GetDBPwd()\n\t{\n\t\treturn $this->Get('db_pwd');\n\t}\n\n\tpublic function GetLogGlobal()\n\t{\n\t\treturn $this->m_bLogGlobal;\n\t}\n\n\tpublic function GetLogNotification()\n\t{\n\t\treturn $this->m_bLogNotification;\n\t}\n\n\tpublic function GetLogIssue()\n\t{\n\t\treturn $this->m_bLogIssue;\n\t}\n\n\tpublic function GetLogWebService()\n\t{\n\t\treturn $this->m_bLogWebService;\n\t}\n\n\tpublic function GetLogQueries()\n\t{\n\t\treturn false;\n\t}\n\n\tpublic function GetQueryCacheEnabled()\n\t{\n\t\treturn $this->m_bQueryCacheEnabled;\n\t}\n\n\tpublic function GetMinDisplayLimit()\n\t{\n\t\treturn $this->m_iMinDisplayLimit;\n\t}\n\n\tpublic function GetMaxDisplayLimit()\n\t{\n\t\treturn $this->m_iMaxDisplayLimit;\n\t}\n\n\tpublic function GetStandardReloadInterval()\n\t{\n\t\treturn $this->m_iStandardReloadInterval;\n\t}\n\n\tpublic function GetFastReloadInterval()\n\t{\n\t\treturn $this->m_iFastReloadInterval;\n\t}\n\n\tpublic function GetSecureConnectionRequired()\n\t{\n\t\treturn $this->m_bSecureConnectionRequired;\n\t}\n\n\tpublic function GetDefaultLanguage()\n\t{\n\t\treturn $this->m_sDefaultLanguage;\n\t}\n\n\tpublic function GetEncryptionKey()\n\t{\n\t\treturn $this->m_sEncryptionKey;\n\t}\n\n\tpublic function GetEncryptionLibrary()\n\t{\n\t\treturn $this->m_sEncryptionLibrary;\n\t}\n\n\tpublic function GetAllowedLoginTypes()\n\t{\n\t\treturn explode('|', $this->m_sAllowedLoginTypes);\n\t}\n\n\tpublic function GetExternalAuthenticationVariable()\n\t{\n\t\treturn $this->m_sExtAuthVariable;\n\t}\n\n\tpublic function GetCSVImportCharsets()\n\t{\n\t\treturn $this->m_aCharsets;\n\t}\n\n\tpublic function SetLogGlobal($iLogGlobal)\n\t{\n\t\t$this->m_iLogGlobal = $iLogGlobal;\n\t}\n\n\tpublic function SetLogNotification($iLogNotification)\n\t{\n\t\t$this->m_iLogNotification = $iLogNotification;\n\t}\n\n\tpublic function SetLogIssue($iLogIssue)\n\t{\n\t\t$this->m_iLogIssue = $iLogIssue;\n\t}\n\n\tpublic function SetLogWebService($iLogWebService)\n\t{\n\t\t$this->m_iLogWebService = $iLogWebService;\n\t}\n\n\tpublic function SetMinDisplayLimit($iMinDisplayLimit)\n\t{\n\t\t$this->m_iMinDisplayLimit = $iMinDisplayLimit;\n\t}\n\n\tpublic function SetMaxDisplayLimit($iMaxDisplayLimit)\n\t{\n\t\t$this->m_iMaxDisplayLimit = $iMaxDisplayLimit;\n\t}\n\n\tpublic function SetStandardReloadInterval($iStandardReloadInterval)\n\t{\n\t\t$this->m_iStandardReloadInterval = $iStandardReloadInterval;\n\t}\n\n\tpublic function SetFastReloadInterval($iFastReloadInterval)\n\t{\n\t\t$this->m_iFastReloadInterval = $iFastReloadInterval;\n\t}\n\n\tpublic function SetSecureConnectionRequired($bSecureConnectionRequired)\n\t{\n\t\t$this->m_bSecureConnectionRequired = $bSecureConnectionRequired;\n\t}\n\n\tpublic function SetDefaultLanguage($sLanguageCode)\n\t{\n\t\t$this->m_sDefaultLanguage = $sLanguageCode;\n\t}\n\n\tpublic function SetAllowedLoginTypes($aAllowedLoginTypes)\n\t{\n\t\t$this->m_sAllowedLoginTypes = implode('|', $aAllowedLoginTypes);\n\t}\n\n\tpublic function SetExternalAuthenticationVariable($sExtAuthVariable)\n\t{\n\t\t$this->m_sExtAuthVariable = $sExtAuthVariable;\n\t}\n\n\tpublic function SetEncryptionKey($sKey)\n\t{\n\t\t$this->m_sEncryptionKey = $sKey;\n\t}\n\n\tpublic function SetCSVImportCharsets($aCharsets)\n\t{\n\t\t$this->m_aCharsets = $aCharsets;\n\t}\n\n\tpublic function AddCSVImportCharset($sIconvCode, $sDisplayName)\n\t{\n\t\t$this->m_aCharsets[$sIconvCode] = $sDisplayName;\n\t}\n\n\tpublic function GetLoadedFile()\n\t{\n\t\tif (is_null($this->m_sFile))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn $this->m_sFile;\n\t\t}\n\t}\n\n\t/**\n\t * Render the configuration as an associative array\n\t *\n\t * @return array\n\t */\n\tpublic function ToArray()\n\t{\n\t\t$aSettings = array();\n\t\tforeach ($this->m_aSettings as $sPropCode => $aSettingInfo)\n\t\t{\n\t\t\t$aSettings[$sPropCode] = $aSettingInfo['value'];\n\t\t}\n\t\t$aSettings['log_global'] = $this->m_bLogGlobal;\n\t\t$aSettings['log_notification'] = $this->m_bLogNotification;\n\t\t$aSettings['log_issue'] = $this->m_bLogIssue;\n\t\t$aSettings['log_web_service'] = $this->m_bLogWebService;\n\t\t$aSettings['query_cache_enabled'] = $this->m_bQueryCacheEnabled;\n\t\t$aSettings['min_display_limit'] = $this->m_iMinDisplayLimit;\n\t\t$aSettings['max_display_limit'] = $this->m_iMaxDisplayLimit;\n\t\t$aSettings['standard_reload_interval'] = $this->m_iStandardReloadInterval;\n\t\t$aSettings['fast_reload_interval'] = $this->m_iFastReloadInterval;\n\t\t$aSettings['secure_connection_required'] = $this->m_bSecureConnectionRequired;\n\t\t$aSettings['default_language'] = $this->m_sDefaultLanguage;\n\t\t$aSettings['allowed_login_types'] = $this->m_sAllowedLoginTypes;\n\t\t$aSettings['ext_auth_variable'] = $this->m_sExtAuthVariable;\n\t\t$aSettings['encryption_key'] = $this->m_sEncryptionKey;\n\t\t$aSettings['encryption_library'] = $this->m_sEncryptionLibrary;\n\t\t$aSettings['csv_import_charsets'] = $this->m_aCharsets;\n\n\t\tforeach ($this->m_aModuleSettings as $sModule => $aProperties)\n\t\t{\n\t\t\tforeach ($aProperties as $sProperty => $value)\n\t\t\t{\n\t\t\t\t$aSettings['module_settings'][$sModule][$sProperty] = $value;\n\t\t\t}\n\t\t}\n\t\tforeach ($this->m_aAddons as $sKey => $sFile)\n\t\t{\n\t\t\t$aSettings['addon_list'][] = $sFile;\n\t\t}\n\n\t\treturn $aSettings;\n\t}\n\n    /**\n     * Write the configuration to a file (php format) that can be reloaded later\n     * By default write to the same file that was specified when constructing the object\n     *\n     * @param string $sFileName string Name of the file to write to (emtpy to write to the same file)\n     *\n     * @return boolean True otherwise throws an Exception\n\t *\n     * @throws \\ConfigException\n     */\n\tpublic function WriteToFile($sFileName = '')\n\t{\n\t\tif (empty($sFileName))\n\t\t{\n\t\t\t$sFileName = $this->m_sFile;\n\t\t}\n\t\t$hFile = @fopen($sFileName, 'w');\n\t\tif ($hFile !== false)\n\t\t{\n\t\t\tfwrite($hFile, \"<?php\\n\");\n\t\t\tfwrite($hFile, \"\\n/**\\n\");\n\t\t\tfwrite($hFile, \" *\\n\");\n\t\t\tfwrite($hFile, \" * Configuration file, generated by the \".ITOP_APPLICATION.\" configuration wizard\\n\");\n\t\t\tfwrite($hFile, \" *\\n\");\n\t\t\tfwrite($hFile,\n\t\t\t\t\" * The file is used in MetaModel::LoadConfig() which does all the necessary initialization job\\n\");\n\t\t\tfwrite($hFile, \" *\\n\");\n\t\t\tfwrite($hFile, \" */\\n\");\n\n\t\t\t$aConfigSettings = $this->m_aSettings;\n\n\t\t\t// Old fashioned boolean settings\n\t\t\t$aBoolValues = array(\n\t\t\t\t'log_global' => $this->m_bLogGlobal,\n\t\t\t\t'log_notification' => $this->m_bLogNotification,\n\t\t\t\t'log_issue' => $this->m_bLogIssue,\n\t\t\t\t'log_web_service' => $this->m_bLogWebService,\n\t\t\t\t'query_cache_enabled' => $this->m_bQueryCacheEnabled,\n\t\t\t\t'secure_connection_required' => $this->m_bSecureConnectionRequired,\n\t\t\t);\n\t\t\tforeach ($aBoolValues as $sKey => $bValue)\n\t\t\t{\n\t\t\t\t$aConfigSettings[$sKey] = array(\n\t\t\t\t\t'show_in_conf_sample' => true,\n\t\t\t\t\t'type' => 'bool',\n\t\t\t\t\t'value' => $bValue,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Old fashioned integer settings\n\t\t\t$aIntValues = array(\n\t\t\t\t'fast_reload_interval' => $this->m_iFastReloadInterval,\n\t\t\t\t'max_display_limit' => $this->m_iMaxDisplayLimit,\n\t\t\t\t'min_display_limit' => $this->m_iMinDisplayLimit,\n\t\t\t\t'standard_reload_interval' => $this->m_iStandardReloadInterval,\n\t\t\t);\n\t\t\tforeach ($aIntValues as $sKey => $iValue)\n\t\t\t{\n\t\t\t\t$aConfigSettings[$sKey] = array(\n\t\t\t\t\t'show_in_conf_sample' => true,\n\t\t\t\t\t'type' => 'integer',\n\t\t\t\t\t'value' => $iValue,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Old fashioned remaining values\n\t\t\t$aOtherValues = array(\n\t\t\t\t'default_language' => $this->m_sDefaultLanguage,\n\t\t\t\t'allowed_login_types' => $this->m_sAllowedLoginTypes,\n\t\t\t\t'ext_auth_variable' => $this->m_sExtAuthVariable,\n\t\t\t\t'encryption_key' => $this->m_sEncryptionKey,\n\t\t\t\t'encryption_library' => $this->m_sEncryptionLibrary,\n\t\t\t\t'csv_import_charsets' => $this->m_aCharsets,\n\t\t\t);\n\t\t\tforeach ($aOtherValues as $sKey => $value)\n\t\t\t{\n\t\t\t\t$aConfigSettings[$sKey] = array(\n\t\t\t\t\t'show_in_conf_sample' => true,\n\t\t\t\t\t'type' => is_string($value) ? 'string' : 'mixed',\n\t\t\t\t\t'value' => $value,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tksort($aConfigSettings);\n\t\t\tfwrite($hFile, \"\\$MySettings = array(\\n\");\n\t\t\tforeach ($aConfigSettings as $sPropCode => $aSettingInfo)\n\t\t\t{\n\t\t\t\t// Write all values that are either always visible or present in the cloned config file\n\t\t\t\tif ($aSettingInfo['show_in_conf_sample'] || (!empty($aSettingInfo['source_of_value']) && ($aSettingInfo['source_of_value'] != 'unknown')))\n\t\t\t\t{\n\t\t\t\t\t$sType = $aSettingInfo['type'];\n\t\t\t\t\tswitch ($sType)\n\t\t\t\t\t{\n\t\t\t\t\t\tcase 'bool':\n\t\t\t\t\t\t\t$sSeenAs = $aSettingInfo['value'] ? 'true' : 'false';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$sSeenAs = self::PrettyVarExport($aSettingInfo['value'], \"\\t\");\n\t\t\t\t\t}\n\t\t\t\t\tfwrite($hFile, \"\\n\");\n\t\t\t\t\tif (isset($aSettingInfo['description']))\n\t\t\t\t\t{\n\t\t\t\t\t\tfwrite($hFile, \"\\t// $sPropCode: {$aSettingInfo['description']}\\n\");\n\t\t\t\t\t}\n\t\t\t\t\tif (isset($aSettingInfo['default']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$default = $aSettingInfo['default'];\n\t\t\t\t\t\tif ($aSettingInfo['type'] == 'bool')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$default = $default ? 'true' : 'false';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfwrite($hFile,\n\t\t\t\t\t\t\t\"\\t//\\tdefault: \".self::PrettyVarExport($aSettingInfo['default'], \"\\t//\\t\\t\", true).\"\\n\");\n\t\t\t\t\t}\n\t\t\t\t\tfwrite($hFile, \"\\t'$sPropCode' => $sSeenAs,\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tfwrite($hFile, \");\\n\");\n\n\t\t\tfwrite($hFile, \"\\n\");\n\t\t\tfwrite($hFile, \"/**\\n *\\n * Modules specific settings\\n *\\n */\\n\");\n\t\t\tfwrite($hFile, \"\\$MyModuleSettings = array(\\n\");\n\t\t\tforeach ($this->m_aModuleSettings as $sModule => $aProperties)\n\t\t\t{\n\t\t\t\tfwrite($hFile, \"\\t'$sModule' => array (\\n\");\n\t\t\t\tforeach ($aProperties as $sProperty => $value)\n\t\t\t\t{\n\t\t\t\t\t$sNiceExport = self::PrettyVarExport($value, \"\\t\\t\");\n\t\t\t\t\tfwrite($hFile, \"\\t\\t'$sProperty' => $sNiceExport,\\n\");\n\t\t\t\t}\n\t\t\t\tfwrite($hFile, \"\\t),\\n\");\n\t\t\t}\n\t\t\tfwrite($hFile, \");\\n\");\n\n\t\t\tfwrite($hFile, \"\\n/**\\n\");\n\t\t\tfwrite($hFile, \" *\\n\");\n\t\t\tfwrite($hFile, \" * Data model modules to be loaded. Names are specified as relative paths\\n\");\n\t\t\tfwrite($hFile, \" *\\n\");\n\t\t\tfwrite($hFile, \" */\\n\");\n\t\t\tfwrite($hFile, \"\\$MyModules = array(\\n\");\n\t\t\tfwrite($hFile, \"\\t'addons' => array (\\n\");\n\t\t\tforeach ($this->m_aAddons as $sKey => $sFile)\n\t\t\t{\n\t\t\t\tfwrite($hFile, \"\\t\\t'$sKey' => '$sFile',\\n\");\n\t\t\t}\n\t\t\tfwrite($hFile, \"\\t),\\n\");\n\t\t\tfwrite($hFile, \");\\n\");\n\t\t\tfwrite($hFile, '?'.'>'); // Avoid perturbing the syntax highlighting !\n\n\t\t\treturn fclose($hFile);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new ConfigException(\"Could not write to configuration file\", array('file' => $sFileName));\n\t\t}\n\t}\n\n    /**\n     * Helper function to initialize a configuration from the page arguments\n     *\n     * @param array $aParamValues\n     * @param string|null $sModulesDir\n     * @param bool $bPreserveModuleSettings\n     *\n     * @throws \\Exception\n     * @throws \\CoreException\n     */\n\tpublic function UpdateFromParams($aParamValues, $sModulesDir = null, $bPreserveModuleSettings = false)\n\t{\n\t\tif (isset($aParamValues['application_path']))\n\t\t{\n\t\t\t$this->Set('app_root_url', $aParamValues['application_path']);\n\t\t}\n\t\tif (isset($aParamValues['graphviz_path']))\n\t\t{\n\t\t\t$this->Set('graphviz_path', $aParamValues['graphviz_path']);\n\t\t}\n\t\tif (isset($aParamValues['mode']) && isset($aParamValues['language']))\n\t\t{\n\t\t\tif (($aParamValues['mode'] == 'install') || $this->GetDefaultLanguage() == '')\n\t\t\t{\n\t\t\t\t$this->SetDefaultLanguage($aParamValues['language']);\n\t\t\t}\n\t\t}\n\t\tif (isset($aParamValues['db_server']))\n\t\t{\n\t\t\t$this->Set('db_host', $aParamValues['db_server']);\n\t\t\t$this->Set('db_user', $aParamValues['db_user']);\n\t\t\t$this->Set('db_pwd', $aParamValues['db_pwd']);\n\t\t\t$sDBName = $aParamValues['db_name'];\n\t\t\tif ($sDBName == '')\n\t\t\t{\n\t\t\t\t// Todo - obsolete after the transition to the new setup (2.0) is complete (WARNING: used by the designer)\n\t\t\t\tif (isset($aParamValues['new_db_name']))\n\t\t\t\t{\n\t\t\t\t\t$sDBName = $aParamValues['new_db_name'];\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->Set('db_name', $sDBName);\n\t\t\t$this->Set('db_subname', $aParamValues['db_prefix']);\n\n\t\t\t$bDbTlsEnabled = (bool) $aParamValues['db_tls_enabled'];\n\t\t\tif ($bDbTlsEnabled)\n\t\t\t{\n\t\t\t\t$this->Set('db_tls.enabled', $bDbTlsEnabled, 'UpdateFromParams');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// disabled : we don't want parameter in the file\n\t\t\t\t$this->Set('db_tls.enabled', $bDbTlsEnabled, null);\n\t\t\t}\n\t\t\t$sDbTlsCa = $bDbTlsEnabled ? $aParamValues['db_tls_ca'] : null;\n\t\t\tif (isset($sDbTlsCa) && !empty($sDbTlsCa)) {\n\t\t\t\t$this->Set('db_tls.ca', $sDbTlsCa, 'UpdateFromParams');\n\t\t\t} else {\n\t\t\t\t// empty parameter : we don't want it in the file\n\t\t\t\t$this->Set('db_tls.ca', null, null);\n\t\t\t}\n\t\t}\n\n\t\tif (isset($aParamValues['selected_modules']))\n\t\t{\n\t\t\t$aSelectedModules = explode(',', $aParamValues['selected_modules']);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$aSelectedModules = null;\n\t\t}\n\t\t$this->UpdateIncludes($sModulesDir, $aSelectedModules);\n\n\t\tif (isset($aParamValues['source_dir']))\n\t\t{\n\t\t\t$this->Set('source_dir', $aParamValues['source_dir']);\n\t\t}\n\t}\n\n\t/**\n\t * Helper function to rebuild the default configuration and the list of includes from a directory and a list of\n\t * selected modules\n\t *\n\t * @param string $sModulesDir The relative path to the directory to scan for modules (typically the 'env-xxx'\n\t *     directory resulting from the compilation)\n\t * @param array $aSelectedModules An array of selected modules' identifiers. If null all modules found will be\n\t *     considered as installed\n\t *\n\t * @throws Exception\n\t */\n\tpublic function UpdateIncludes($sModulesDir, $aSelectedModules = null)\n\t{\n\t\tif (!is_null($sModulesDir))\n\t\t{\n\t\t\t// Initialize the arrays below with default values for the application...\n\t\t\t$oEmptyConfig = new Config('dummy_file', false); // Do NOT load any config file, just set the default values\n\t\t\t$aAddOns = $oEmptyConfig->GetAddOns();\n\n\t\t\t$aModules = ModuleDiscovery::GetAvailableModules(array(APPROOT.$sModulesDir));\n\t\t\tforeach ($aModules as $sModuleId => $aModuleInfo)\n\t\t\t{\n\t\t\t\tlist ($sModuleName, $sModuleVersion) = ModuleDiscovery::GetModuleName($sModuleId);\n\t\t\t\tif (is_null($aSelectedModules) || in_array($sModuleName, $aSelectedModules))\n\t\t\t\t{\n\t\t\t\t\tif (isset($aModuleInfo['settings']))\n\t\t\t\t\t{\n\t\t\t\t\t\tlist ($sName, $sVersion) = ModuleDiscovery::GetModuleName($sModuleId);\n\t\t\t\t\t\tforeach ($aModuleInfo['settings'] as $sProperty => $value)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (isset($this->m_aModuleSettings[$sName][$sProperty]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Do nothing keep the original value\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->SetModuleSetting($sName, $sProperty, $value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (isset($aModuleInfo['installer']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$sModuleInstallerClass = $aModuleInfo['installer'];\n\t\t\t\t\t\tif (!class_exists($sModuleInstallerClass))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthrow new Exception(\"Wrong installer class: '$sModuleInstallerClass' is not a PHP class - Module: \".$aModuleInfo['label']);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!is_subclass_of($sModuleInstallerClass, 'ModuleInstallerAPI'))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthrow new Exception(\"Wrong installer class: '$sModuleInstallerClass' is not derived from 'ModuleInstallerAPI' - Module: \".$aModuleInfo['label']);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$aCallSpec = array($sModuleInstallerClass, 'BeforeWritingConfig');\n\t\t\t\t\t\tcall_user_func_array($aCallSpec, array($this));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->SetAddOns($aAddOns);\n\t\t}\n\t}\n\n    /**\n     * Helper: for an array of string, change the prefix when found\n     *\n     * @param array $aStrings\n     * @param string $sSearchPrefix\n     * @param string $sNewPrefix\n     */\n\tprotected static function ChangePrefix(&$aStrings, $sSearchPrefix, $sNewPrefix)\n\t{\n\t\tforeach ($aStrings as &$sFile)\n\t\t{\n\t\t\tif (substr($sFile, 0, strlen($sSearchPrefix)) == $sSearchPrefix)\n\t\t\t{\n\t\t\t\t$sFile = $sNewPrefix.substr($sFile, strlen($sSearchPrefix));\n\t\t\t}\n\t\t}\n\t}\n\n    /**\n     * Obsolete: kept only for backward compatibility of the Toolkit\n     * Quick and dirty way to clone a config file into another environment\n     *\n     * @param string $sSourceEnv\n     * @param string $sTargetEnv\n     */\n\tpublic function ChangeModulesPath($sSourceEnv, $sTargetEnv)\n\t{\n\t\t// Now does nothing since the includes are built into the environment itself\n\t}\n\n\t/**\n\t * Pretty format a var_export'ed value so that (if possible) the identation is preserved on every line\n\t *\n\t * @param mixed $value The value to export\n\t * @param string $sIndentation The string to use to indent the text\n\t * @param bool $bForceIndentation Forces the identation (enven if it breaks/changes an eval, for example to ouput a\n\t *     value inside a comment)\n\t *\n\t * @return string The indented export string\n\t */\n\tprotected static function PrettyVarExport($value, $sIndentation, $bForceIndentation = false)\n\t{\n\t\t$sExport = var_export($value, true);\n\t\t$sNiceExport = str_replace(array(\"\\r\\n\", \"\\n\", \"\\r\"), \"\\n\".$sIndentation, trim($sExport));\n\t\tif (!$bForceIndentation)\n\t\t{\n\t\t\t/** @var array $aImported */\n\t\t\t$aImported = null;\n\t\t\teval('$aImported='.$sNiceExport.';');\n\t\t\t// Check if adding the identations at the beginning of each line\n\t\t\t// did not modify the values (in case of a string containing a line break)\n\t\t\tif ($aImported != $value)\n\t\t\t{\n\t\t\t\t$sNiceExport = $sExport;\n\t\t\t}\n\t\t}\n\n\t\treturn $sNiceExport;\n\t}\n\n}\n", "<?php\n\n// Copyright (C) 2010-2018 Combodo SARL\n//\n//   This file is part of iTop.\n//\n//   iTop is free software; you can redistribute it and/or modify\n//   it under the terms of the GNU Affero General Public License as published by\n//   the Free Software Foundation, either version 3 of the License, or\n//   (at your option) any later version.\n//\n//   iTop is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n//\n//   You should have received a copy of the GNU Affero General Public License\n//   along with iTop. If not, see <http://www.gnu.org/licenses/>\n\nnamespace Combodo\\iTop\\Portal\\Controller;\n\nuse Silex\\Application;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\nuse Exception;\nuse FileUploadException;\nuse utils;\nuse Dict;\nuse IssueLog;\nuse MetaModel;\nuse DBObject;\nuse DBSearch;\nuse DBObjectSearch;\nuse FalseExpression;\nuse BinaryExpression;\nuse FieldExpression;\nuse VariableExpression;\nuse ListExpression;\nuse ScalarExpression;\nuse DBObjectSet;\nuse AttributeEnum;\nuse AttributeImage;\nuse AttributeFinalClass;\nuse AttributeFriendlyName;\nuse UserRights;\nuse iPopupMenuExtension;\nuse URLButtonItem;\nuse JSButtonItem;\nuse Combodo\\iTop\\Portal\\Helper\\ApplicationHelper;\nuse Combodo\\iTop\\Portal\\Helper\\SecurityHelper;\nuse Combodo\\iTop\\Portal\\Helper\\ContextManipulatorHelper;\nuse Combodo\\iTop\\Portal\\Form\\ObjectFormManager;\nuse Combodo\\iTop\\Renderer\\Bootstrap\\BsFormRenderer;\n\n/**\n * Class ObjectController\n *\n * Controller to handle basic view / edit / create of cmdbAbstractObjectClass ManageBrickController\n *\n * @package Combodo\\iTop\\Portal\\Controller\n * @author Guillaume Lajarige <guillaume.lajarige@combodo.com>\n * @since 2.3.0\n */\nclass ObjectController extends AbstractController\n{\n\n\tconst ENUM_MODE_VIEW = 'view';\n\tconst ENUM_MODE_EDIT = 'edit';\n\tconst ENUM_MODE_CREATE = 'create';\n\n\tconst DEFAULT_PAGE_NUMBER = 1;\n\tconst DEFAULT_LIST_LENGTH = 10;\n\n    /**\n     * Displays an cmdbAbstractObject if the connected user is allowed to.\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param string $sObjectClass (Class must be instance of cmdbAbstractObject)\n     * @param string $sObjectId\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\n     * @throws \\Exception\n     * @throws \\ArchivedObjectException\n     * @throws \\CoreException\n     * @throws \\DictExceptionMissingString\n     */\n\tpublic function ViewAction(Request $oRequest, Application $oApp, $sObjectClass, $sObjectId)\n\t{\n\t\t// Checking parameters\n\t\tif ($sObjectClass === '' || $sObjectId === '')\n\t\t{\n\t\t\tIssueLog::Info(__METHOD__ . ' at line ' . __LINE__ . ' : sObjectClass and sObjectId expected, \"' . $sObjectClass . '\" and \"' . $sObjectId . '\" given.');\n\t\t\t$oApp->abort(500, Dict::Format('UI:Error:2ParametersMissing', 'class', 'id'));\n\t\t}\n\n\t\t// Checking security layers\n\t\tif (!SecurityHelper::IsActionAllowed($oApp, UR_ACTION_READ, $sObjectClass, $sObjectId))\n\t\t{\n\t\t\tIssueLog::Warning(__METHOD__ . ' at line ' . __LINE__ . ' : User #' . UserRights::GetUserId() . ' not allowed to read ' . $sObjectClass . '::' . $sObjectId . ' object.');\n\t\t\t$oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\n\t\t// Retrieving object\n\t\t$oObject = MetaModel::GetObject($sObjectClass, $sObjectId, false /* MustBeFound */, $oApp['scope_validator']->IsAllDataAllowedForScope(UserRights::ListProfiles(), $sObjectClass));\n\t\tif ($oObject === null)\n\t\t{\n\t\t\t// We should never be there as the secuirty helper makes sure that the object exists, but just in case.\n\t\t\tIssueLog::Info(__METHOD__ . ' at line ' . __LINE__ . ' : Could not load object ' . $sObjectClass . '::' . $sObjectId . '.');\n\t\t\t$oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\n\t\t$sOperation = $oApp['request_manipulator']->ReadParam('operation', '');\n\n\t\t$aData = array('sMode' => 'view');\n\t\t$aData['form'] = $this->HandleForm($oRequest, $oApp, $aData['sMode'], $sObjectClass, $sObjectId);\n\t\t$aData['form']['title'] = Dict::Format('Brick:Portal:Object:Form:View:Title', MetaModel::GetName($sObjectClass), $oObject->GetName());\n\n\t\t// Add an edit button if user is allowed\n\t\tif (SecurityHelper::IsActionAllowed($oApp, UR_ACTION_MODIFY, $sObjectClass, $sObjectId))\n\t\t{\n\t\t    $oModifyButton = new URLButtonItem(\n\t\t        'modify_object',\n                Dict::S('UI:Menu:Modify'),\n\t\t\t\t$oApp['url_generator']->generate('p_object_edit', array('sObjectClass' => $sObjectClass, 'sObjectId' => $sObjectId))\n            );\n\t\t    // Putting this one first\n\t\t    $aData['form']['buttons']['links'][] = $oModifyButton->GetMenuItem();\n\t\t}\n\n\t\t// Preparing response\n\t\tif ($oRequest->isXmlHttpRequest())\n\t\t{\n\t\t\t// We have to check whether the 'operation' parameter is defined or not in order to know if the form is required via ajax (to be displayed as a modal dialog) or if it's a lifecycle call from a existing form.\n\t\t\tif (empty($sOperation))\n\t\t\t{\n\t\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/bricks/object/modal.html.twig', $aData);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oResponse = $oApp->json($aData);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Adding brick if it was passed\n\t\t\t$sBrickId = $oApp['request_manipulator']->ReadParam('sBrickId', '');\n\t\t\tif (!empty($sBrickId))\n\t\t\t{\n\t\t\t\t$oBrick = ApplicationHelper::GetLoadedBrickFromId($oApp, $sBrickId);\n\t\t\t\tif ($oBrick !== null)\n\t\t\t\t{\n\t\t\t\t\t$aData['oBrick'] = $oBrick;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$aData['sPageTitle'] = $aData['form']['title'];\n\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/bricks/object/layout.html.twig', $aData);\n\t\t}\n\n\t\treturn $oResponse;\n\t}\n\n    /**\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param $sObjectClass\n     * @param $sObjectId\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\n     * @throws \\Exception\n     * @throws \\ArchivedObjectException\n     * @throws \\CoreException\n     * @throws \\DictExceptionMissingString\n     */\n\tpublic function EditAction(Request $oRequest, Application $oApp, $sObjectClass, $sObjectId)\n\t{\n\t\t// Checking parameters\n\t\tif ($sObjectClass === '' || $sObjectId === '')\n\t\t{\n\t\t\tIssueLog::Info(__METHOD__ . ' at line ' . __LINE__ . ' : sObjectClass and sObjectId expected, \"' . $sObjectClass . '\" and \"' . $sObjectId . '\" given.');\n\t\t\t$oApp->abort(500, Dict::Format('UI:Error:2ParametersMissing', 'class', 'id'));\n\t\t}\n\t\t\n\t\t// Checking security layers\n\t\t// Warning : This is a dirty quick fix to allow editing its own contact information\n\t\t$bAllowWrite = ($sObjectClass === 'Person' && $sObjectId == UserRights::GetContactId());\n\t\tif (!SecurityHelper::IsActionAllowed($oApp, UR_ACTION_MODIFY, $sObjectClass, $sObjectId) && !$bAllowWrite)\n\t\t{\n\t\t\tIssueLog::Warning(__METHOD__ . ' at line ' . __LINE__ . ' : User #' . UserRights::GetUserId() . ' not allowed to modify ' . $sObjectClass . '::' . $sObjectId . ' object.');\n\t\t\t$oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\n\t\t// Retrieving object\n\t\t$oObject = MetaModel::GetObject($sObjectClass, $sObjectId, false /* MustBeFound */, $oApp['scope_validator']->IsAllDataAllowedForScope(UserRights::ListProfiles(), $sObjectClass));\n\t\tif ($oObject === null)\n\t\t{\n\t\t\t// We should never be there as the secuirty helper makes sure that the object exists, but just in case.\n\t\t\tIssueLog::Info(__METHOD__ . ' at line ' . __LINE__ . ' : Could not load object ' . $sObjectClass . '::' . $sObjectId . '.');\n\t\t\t$oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\n\t\t$sOperation = $oApp['request_manipulator']->ReadParam('operation', '');\n\n\t\t$aData = array('sMode' => 'edit');\n\t\t$aData['form'] = $this->HandleForm($oRequest, $oApp, $aData['sMode'], $sObjectClass, $sObjectId);\n\t\t$aData['form']['title'] = Dict::Format('Brick:Portal:Object:Form:Edit:Title', MetaModel::GetName($sObjectClass), $aData['form']['object_name']);\n\n\t\t// Preparing response\n\t\tif ($oRequest->isXmlHttpRequest())\n\t\t{\n\t\t\t// We have to check whether the 'operation' parameter is defined or not in order to know if the form is required via ajax (to be displayed as a modal dialog) or if it's a lifecycle call from a existing form.\n\t\t\tif (empty($sOperation))\n\t\t\t{\n\t\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/bricks/object/modal.html.twig', $aData);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oResponse = $oApp->json($aData);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Adding brick if it was passed\n\t\t\t$sBrickId = $oApp['request_manipulator']->ReadParam('sBrickId', '');\n\t\t\tif (!empty($sBrickId))\n\t\t\t{\n\t\t\t\t$oBrick = ApplicationHelper::GetLoadedBrickFromId($oApp, $sBrickId);\n\t\t\t\tif ($oBrick !== null)\n\t\t\t\t{\n\t\t\t\t\t$aData['oBrick'] = $oBrick;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$aData['sPageTitle'] = $aData['form']['title'];\n\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/bricks/object/layout.html.twig', $aData);\n\t\t}\n\n\t\treturn $oResponse;\n\t}\n\n    /**\n     * Creates an cmdbAbstractObject of the $sObjectClass\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param string $sObjectClass\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\n     * @throws \\Exception\n     * @throws \\CoreException\n     * @throws \\DictExceptionMissingString\n     */\n\tpublic function CreateAction(Request $oRequest, Application $oApp, $sObjectClass)\n\t{\n\t\t// Checking security layers\n\t\tif (!SecurityHelper::IsActionAllowed($oApp, UR_ACTION_CREATE, $sObjectClass))\n\t\t{\n\t\t\tIssueLog::Warning(__METHOD__ . ' at line ' . __LINE__ . ' : User #' . UserRights::GetUserId() . ' not allowed to create ' . $sObjectClass . ' object.');\n\t\t\t$oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\n\t\t$sOperation = $oApp['request_manipulator']->ReadParam('operation', '');\n\n\t\t$aData = array('sMode' => 'create');\n\t\t$aData['form'] = $this->HandleForm($oRequest, $oApp, $aData['sMode'], $sObjectClass);\n\t\t$aData['form']['title'] = Dict::Format('Brick:Portal:Object:Form:Create:Title', MetaModel::GetName($sObjectClass));\n\n\t\t// Preparing response\n\t\tif ($oRequest->isXmlHttpRequest())\n\t\t{\n\t\t\t// We have to check whether the 'operation' parameter is defined or not in order to know if the form is required via ajax (to be displayed as a modal dialog) or if it's a lifecycle call from a existing form.\n\t\t\tif (empty($sOperation))\n\t\t\t{\n\t\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/bricks/object/modal.html.twig', $aData);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oResponse = $oApp->json($aData);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Adding brick if it was passed\n\t\t\t$sBrickId = $oApp['request_manipulator']->ReadParam('sBrickId', '');\n\t\t\tif (!empty($sBrickId))\n\t\t\t{\n\t\t\t\t$oBrick = ApplicationHelper::GetLoadedBrickFromId($oApp, $sBrickId);\n\t\t\t\tif ($oBrick !== null)\n\t\t\t\t{\n\t\t\t\t\t$aData['oBrick'] = $oBrick;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$aData['sPageTitle'] = $aData['form']['title'];\n\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/bricks/object/layout.html.twig', $aData);\n\t\t}\n\n\t\treturn $oResponse;\n\t}\n\n    /**\n     * Creates an cmdbAbstractObject of a class determined by the method encoded in $sEncodedMethodName.\n     * This method use an origin DBObject in order to determine the created cmdbAbstractObject.\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param string $sObjectClass Class of the origin object\n     * @param string $sObjectId ID of the origin object\n     * @param string $sEncodedMethodName Base64 encoded factory method name\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\n     * @throws \\Exception\n     * @throws \\ArchivedObjectException\n     * @throws \\CoreException\n     */\n\tpublic function CreateFromFactoryAction(Request $oRequest, Application $oApp, $sObjectClass, $sObjectId, $sEncodedMethodName)\n\t{\n\t\t$sMethodName = base64_decode($sEncodedMethodName);\n\n\t\t// Checking that the factory method is valid\n\t\tif (!is_callable($sMethodName))\n\t\t{\n\t\t\tIssueLog::Error(__METHOD__ . ' at line ' . __LINE__ . ' : Invalid factory method \"' . $sMethodName . '\" used when creating an object.');\n\t\t\t$oApp->abort(500, 'Invalid factory method \"' . $sMethodName . '\" used when creating an object');\n\t\t}\n\t\t\n\t\t// Retrieving origin object\n\t\t// Note : AllowAllData set to true here instead of checking scope's flag because we are displaying a value that has been set and validated\n\t\t$oOriginObject = MetaModel::GetObject($sObjectClass, $sObjectId, true, true);\n\n\t\t// Retrieving target object (We check if the method is a simple function or if it's part of a class in which case only static function are supported)\n\t\tif (!strpos($sMethodName, '::'))\n\t\t{\n\t\t\t$oTargetObject = $sMethodName($oOriginObject);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$aMethodNameParts = explode('::', $sMethodName);\n\t\t\t$sMethodClass = $aMethodNameParts[0];\n\t\t\t$sMethodName = $aMethodNameParts[1];\n\t\t\t$oTargetObject = $sMethodClass::$sMethodName($oOriginObject);\n\t\t}\n\n\t\t// Preparing redirection\n\t\t// - Route\n\t\t$aRouteParams = array(\n\t\t\t'sObjectClass' => get_class($oTargetObject)\n\t\t);\n\t\t$sRedirectRoute = $oApp['url_generator']->generate('p_object_create', $aRouteParams);\n\t\t// - Request\n\t\t$oSubRequest = Request::create($sRedirectRoute, 'GET', $oRequest->query->all(), $oRequest->cookies->all(), array(), $oRequest->server->all());\n\n\t\treturn $oApp->handle($oSubRequest, HttpKernelInterface::SUB_REQUEST, true);\n\t}\n\n    /**\n     * Applies a stimulus $sStimulus on an cmdbAbstractObject\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param string $sObjectClass\n     * @param string $sObjectId\n     * @param string $sStimulusCode\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\n     * @throws \\Exception\n     * @throws \\ArchivedObjectException\n     * @throws \\CoreException\n     */\n\tpublic function ApplyStimulusAction(Request $oRequest, Application $oApp, $sObjectClass, $sObjectId, $sStimulusCode)\n\t{\n\t\t// Checking parameters\n\t\tif ($sObjectClass === '' || $sObjectId === '' || $sStimulusCode === '')\n\t\t{\n\t\t\tIssueLog::Info(__METHOD__ . ' at line ' . __LINE__ . ' : sObjectClass, sObjectId and $sStimulusCode expected, \"' . $sObjectClass . '\", \"' . $sObjectId . '\" and \"' . $sStimulusCode . '\" given.');\n\t\t\t$oApp->abort(500, Dict::Format('UI:Error:3ParametersMissing', 'class', 'id', 'stimulus'));\n\t\t}\n\n\t\t// Checking security layers\n        if(!SecurityHelper::IsStimulusAllowed($oApp, $sStimulusCode, $sObjectClass))\n\t\t{\n\t\t\t$oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\t\t\n\t\t// Retrieving object\n\t\t$oObject = MetaModel::GetObject($sObjectClass, $sObjectId, false /* MustBeFound */, $oApp['scope_validator']->IsAllDataAllowedForScope(UserRights::ListProfiles(), $sObjectClass));\n\t\tif ($oObject === null)\n\t\t{\n\t\t\t// We should never be there as the secuirty helper makes sure that the object exists, but just in case.\n\t\t\tIssueLog::Info(__METHOD__ . ' at line ' . __LINE__ . ' : Could not load object ' . $sObjectClass . '::' . $sObjectId . '.');\n\t\t\t$oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\n\t\t// Retrieving request parameters\n\t\t$sOperation = $oApp['request_manipulator']->ReadParam('operation', '');\n\n\t\t// Retrieving form properties\n        $aStimuliForms = ApplicationHelper::GetLoadedFormFromClass($oApp, $sObjectClass, 'apply_stimulus');\n        if(array_key_exists($sStimulusCode, $aStimuliForms))\n        {\n            $aFormProperties = $aStimuliForms[$sStimulusCode];\n        }\n        // Or preparing a default form for the stimulus application\n        else\n        {\n            // Preparing default form\n            $aFormProperties = array(\n                'id' => 'apply-stimulus',\n                'type' => 'custom_list',\n                'fields' => array(),\n                'layout' => null\n            );\n        }\n\n        // Adding stimulus code to form\n        $aFormProperties['stimulus_code'] = $sStimulusCode;\n\n\t\t// Adding target_state to current_values\n\t\t$oRequest->request->set('apply_stimulus', array('code' => $sStimulusCode));\n\n\t\t$aData = array('sMode' => 'apply_stimulus');\n\t\t$aData['form'] = $this->HandleForm($oRequest, $oApp, $aData['sMode'], $sObjectClass, $sObjectId, $aFormProperties);\n\t\t$aData['form']['title'] = Dict::Format('Brick:Portal:Object:Form:Stimulus:Title');\n\t\t$aData['form']['validation']['redirection'] = array(\n\t\t\t'url' => $oApp['url_generator']->generate('p_object_edit', array('sObjectClass' => $sObjectClass, 'sObjectId' => $sObjectId))\n\t\t);\n\n\t\t// TODO : This is a ugly patch to avoid showing a modal with a readonly form to the user as it would prevent user from finishing the transition.\n\t\t// Instead, we apply the stimulus directly here and then go to the edited object.\n\t\tif (empty($sOperation))\n\t\t{\n\t\t\tif (isset($aData['form']['editable_fields_count']) && $aData['form']['editable_fields_count'] === 0)\n\t\t\t{\n\t\t\t\t$sOperation = 'redirect';\n\n\t\t\t\t$oSubRequest = $oRequest;\n\t\t\t\t$oSubRequest->request->set('operation', 'submit');\n\t\t\t\t$oSubRequest->request->set('stimulus_code', '');\n\t\t\t\t\n\t\t\t\t$aData = array('sMode' => 'apply_stimulus');\n\t\t\t\t$aData['form'] = $this->HandleForm($oSubRequest, $oApp, $aData['sMode'], $sObjectClass, $sObjectId, $aFormProperties);\n\t\t\t\t// Redefining the array to be as simple as possible :\n\t\t\t\t$aData = array('redirection' =>\n\t\t\t\t\tarray('url' => $oApp['url_generator']->generate('p_object_edit', array('sObjectClass' => $sObjectClass, 'sObjectId' => $sObjectId)))\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Preparing response\n\t\tif ($oRequest->isXmlHttpRequest())\n\t\t{\n\t\t\t// We have to check whether the 'operation' parameter is defined or not in order to know if the form is required via ajax (to be displayed as a modal dialog) or if it's a lifecycle call from a existing form.\n\t\t\tif (empty($sOperation))\n\t\t\t{\n\t\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/bricks/object/modal.html.twig', $aData);\n\t\t\t}\n\t\t\telseif ($sOperation === 'redirect')\n\t\t\t{\n\t\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/modal/mode_loader.html.twig', $aData);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oResponse = $oApp->json($aData);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/bricks/object/layout.html.twig', $aData);\n\t\t}\n\n\t\treturn $oResponse;\n\t}\n\n    /**\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param string $sMode\n     * @param string $sObjectClass\n     * @param string $sObjectId\n     * @param string $aFormProperties\n     *\n     * @return array\n     *\n     * @throws \\Exception\n     * @throws \\ArchivedObjectException\n     * @throws \\CoreException\n     * @throws \\OQLException\n     * @throws \\Twig_Error_Loader\n     * @throws \\Twig_Error_Runtime\n     * @throws \\Twig_Error_Syntax\n     */\n\tpublic static function HandleForm(Request $oRequest, Application $oApp, $sMode, $sObjectClass, $sObjectId = null, $aFormProperties = null)\n\t{\n\t\t$aFormData = array();\n\t\t$sOperation = $oApp['request_manipulator']->ReadParam('operation', '');\n\t\t$bModal = ($oRequest->isXmlHttpRequest() && empty($sOperation));\n\n\t\t// - Retrieve form properties\n\t\tif ($aFormProperties === null)\n\t\t{\n\t\t\t$aFormProperties = ApplicationHelper::GetLoadedFormFromClass($oApp, $sObjectClass, $sMode);\n\t\t}\n\n\t\t// - Create and\n\t\tif (empty($sOperation))\n\t\t{\n\t\t\t// Retrieving action rules\n\t\t\t//\n\t\t\t// Note : The action rules must be a base64-encoded JSON object, this is just so users are tempted to changes values.\n\t\t\t// But it would not be a security issue as it only presets values in the form.\n            $sActionRulesToken = $oApp['request_manipulator']->ReadParam('ar_token', '');\n\t\t\t$aActionRules = (!empty($sActionRulesToken)) ? ContextManipulatorHelper::DecodeRulesToken($sActionRulesToken) : array();\n\t\t\t\n\t\t\t// Preparing object\n\t\t\tif ($sObjectId === null)\n\t\t\t{\n\t\t\t\t// Create new UserRequest\n\t\t\t\t$oObject = MetaModel::NewObject($sObjectClass);\n\n\t\t\t\t// Retrieve action rules information to auto-fill the form if available\n\t\t\t\t// Preparing object\n\t\t\t\t$oApp['context_manipulator']->PrepareObject($aActionRules, $oObject);\n\t\t\t\t$aPrefillFormParam = array( 'user' => $_SESSION[\"auth_user\"],\n\t\t\t\t\t\t\t\t\t\t\t'origin' => 'portal');\n\t\t\t\t$oObject->PrefillForm('creation_from_0', $aPrefillFormParam);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oObject = MetaModel::GetObject($sObjectClass, $sObjectId, true, $oApp['scope_validator']->IsAllDataAllowedForScope(UserRights::ListProfiles(), $sObjectClass));\n\t\t\t}\n\n\t\t\t// Preparing buttons\n\t\t\t$aFormData['buttons'] = array(\n\t\t\t\t'transitions' => array(),\n                'actions' => array(),\n                'links' => array(),\n                'submit' => array(\n                    'label' => Dict::S('Portal:Button:Submit'),\n                ),\n\t\t\t);\n\t\t\tif ($sMode !== 'apply_stimulus')\n\t\t\t{\n\t\t\t    // Add transition buttons\n\t\t\t\t$oSetToCheckRights = DBObjectSet::FromObject($oObject);\n\t\t\t\t$aStimuli = Metamodel::EnumStimuli($sObjectClass);\n\t\t\t\tforeach ($oObject->EnumTransitions() as $sStimulusCode => $aTransitionDef)\n\t\t\t\t{\n\t\t\t\t\tif(SecurityHelper::IsStimulusAllowed($oApp, $sStimulusCode, $sObjectClass, $oSetToCheckRights))\n                    {\n                        $aFormData['buttons']['transitions'][$sStimulusCode] = $aStimuli[$sStimulusCode]->GetLabel();\n                    }\n\t\t\t\t}\n\n                // Add plugin buttons\n                foreach (MetaModel::EnumPlugins('iPopupMenuExtension') as $oExtensionInstance)\n                {\n                    foreach($oExtensionInstance->EnumItems(iPopupMenuExtension::PORTAL_OBJDETAILS_ACTIONS, array('portal_id' => $oApp['combodo.portal.instance.id'], 'object' => $oObject, 'mode' => $sMode)) as $oMenuItem)\n                    {\n                        if (is_object($oMenuItem))\n                        {\n                            if($oMenuItem instanceof JSButtonItem)\n                            {\n                                $aFormData['buttons']['actions'][] = $oMenuItem->GetMenuItem() + array('js_files' => $oMenuItem->GetLinkedScripts());\n                            }\n                            elseif($oMenuItem instanceof URLButtonItem)\n                            {\n                                $aFormData['buttons']['links'][] = $oMenuItem->GetMenuItem();\n                            }\n                        }\n                    }\n                }\n\n                // Hiding submit button or changing its label if necessary\n                if(!empty($aFormData['buttons']['transitions']) && isset($aFormProperties['properties']) &&$aFormProperties['properties']['always_show_submit'] === false)\n                {\n                    unset($aFormData['buttons']['submit']);\n                }\n                elseif($sMode === static::ENUM_MODE_EDIT)\n                {\n                    $aFormData['buttons']['submit']['label'] = Dict::S('Portal:Button:Apply');\n                }\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$aPrefillFormParam = array(\n\t\t\t\t    'user' => $_SESSION[\"auth_user\"],\n\t\t\t\t\t'origin' => 'portal',\n\t\t\t\t\t'stimulus' => $oApp['request_manipulator']->ReadParam('apply_stimulus', null)['code'],\n                );\n\t\t\t\t$oObject->PrefillForm('state_change', $aPrefillFormParam);\n\t\t\t}\n\n\t\t\t// Preparing callback urls\n\t\t\t$aCallbackUrls = $oApp['context_manipulator']->GetCallbackUrls($oApp, $aActionRules, $oObject, $bModal);\n\t\t\t$aFormData['submit_callback'] = $aCallbackUrls['submit'];\n\t\t\t$aFormData['cancel_callback'] = $aCallbackUrls['cancel'];\n\n\t\t\t// Preparing renderer\n\t\t\t// Note : We might need to distinguish form & renderer endpoints\n\t\t\tif (in_array($sMode, array('create', 'edit', 'view')))\n\t\t\t{\n\t\t\t\t$sFormEndpoint = $oApp['url_generator']->generate('p_object_' . $sMode, array('sObjectClass' => $sObjectClass, 'sObjectId' => $sObjectId));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$sFormEndpoint = $_SERVER['REQUEST_URI'];\n\t\t\t}\n\t\t\t$oFormRenderer = new BsFormRenderer();\n\t\t\t$oFormRenderer->SetEndpoint($sFormEndpoint);\n\n\t\t\t$oFormManager = new ObjectFormManager();\n\t\t\t$oFormManager->SetApplication($oApp)\n\t\t\t\t->SetObject($oObject)\n\t\t\t\t->SetMode($sMode)\n\t\t\t\t->SetActionRulesToken($sActionRulesToken)\n\t\t\t\t->SetRenderer($oFormRenderer)\n\t\t\t\t->SetFormProperties($aFormProperties);\n\n\t\t\t$oFormManager->Build();\n\n\t\t\t// Check the number of editable fields\n\t\t\t$aFormData['editable_fields_count'] = $oFormManager->GetForm()->GetEditableFieldCount();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Update / Submit / Cancel\n\t\t\t$sFormManagerClass = $oApp['request_manipulator']->ReadParam('formmanager_class', '', FILTER_UNSAFE_RAW);\n\t\t\t$sFormManagerData = $oApp['request_manipulator']->ReadParam('formmanager_data', '', FILTER_UNSAFE_RAW);\n\t\t\tif ( empty($sFormManagerClass) || empty($sFormManagerData) )\n\t\t\t{\n\t\t\t\tIssueLog::Error(__METHOD__ . ' at line ' . __LINE__ . ' : Parameters formmanager_class and formamanager_data must be defined.');\n\t\t\t\t$oApp->abort(500, 'Parameters formmanager_class and formmanager_data must be defined.');\n\t\t\t}\n\n\t\t\t$oFormManager = $sFormManagerClass::FromJSON($sFormManagerData);\n\t\t\t$oFormManager->SetApplication($oApp);\n\t\t\t\n\t\t\t// Applying action rules if present\n\t\t\tif (($oFormManager->GetActionRulesToken() !== null) && ($oFormManager->GetActionRulesToken() !== ''))\n\t\t\t{\n\t\t\t\t$aActionRules = ContextManipulatorHelper::DecodeRulesToken($oFormManager->GetActionRulesToken());\n\t\t\t\t$oObj = $oFormManager->GetObject();\n\t\t\t\t$oApp['context_manipulator']->PrepareObject($aActionRules, $oObj);\n\t\t\t\t$oFormManager->SetObject($oObj);\n\t\t\t}\n\t\t\t\n\t\t\tswitch ($sOperation)\n\t\t\t{\n\t\t\t\tcase 'submit':\n\t\t\t\t\t// Applying modification to object\n\t\t\t\t\t$aFormData['validation'] = $oFormManager->OnSubmit(array('currentValues' => $oApp['request_manipulator']->ReadParam('current_values', array(), FILTER_UNSAFE_RAW), 'attachmentIds' => $oApp['request_manipulator']->ReadParam('attachment_ids', array(), FILTER_UNSAFE_RAW), 'formProperties' => $aFormProperties, 'applyStimulus' => $oApp['request_manipulator']->ReadParam('apply_stimulus', null)));\n\t\t\t\t\tif ($aFormData['validation']['valid'] === true)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Note : We don't use $sObjectId there as it can be null if we are creating a new one. Instead we use the id from the created object once it has been seralized\n\t\t\t\t\t\t// Check if stimulus has to be applied\n                        $sStimulusCode = $oApp['request_manipulator']->ReadParam('stimulus_code', '');\n\t\t\t\t\t\tif (!empty($sStimulusCode))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aFormData['validation']['redirection'] = array(\n\t\t\t\t\t\t\t\t'url' => $oApp['url_generator']->generate('p_object_apply_stimulus', array('sObjectClass' => $sObjectClass, 'sObjectId' => $oFormManager->GetObject()->GetKey(), 'sStimulusCode' => $sStimulusCode)),\n\t\t\t\t\t\t\t\t'ajax' => true\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Otherwise, we show the object if there is no default\n//\t\t\t\t\t\telse\n//\t\t\t\t\t\t{\n//\t\t\t\t\t\t\t$aFormData['validation']['redirection'] = array(\n//\t\t\t\t\t\t\t\t'alternative_url' => $oApp['url_generator']->generate('p_object_edit', array('sObjectClass' => $sObjectClass, 'sObjectId' => $oFormManager->GetObject()->GetKey()))\n//\t\t\t\t\t\t\t);\n//\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'update':\n\t\t\t\t\t$oFormManager->OnUpdate(array('currentValues' => $oApp['request_manipulator']->ReadParam('current_values', array(), FILTER_UNSAFE_RAW), 'formProperties' => $aFormProperties));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'cancel':\n\t\t\t\t\t$oFormManager->OnCancel();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Preparing field_set data\n\t\t$aFieldSetData = array(\n\t\t\t//'fields_list' => $oFormManager->GetRenderer()->Render(), // GLA : This should be done just after in the if statement.\n\t\t\t'fields_impacts' => $oFormManager->GetForm()->GetFieldsImpacts(),\n\t\t\t'form_path' => $oFormManager->GetForm()->GetId()\n\t\t);\n\n\t\t// Preparing fields list regarding the operation\n\t\tif ($sOperation === 'update')\n\t\t{\n\t\t\t$aRequestedFields = $oApp['request_manipulator']->ReadParam('requested_fields', array(), FILTER_UNSAFE_RAW);\n\t\t\t$sFormPath = $oApp['request_manipulator']->ReadParam('form_path', '');\n\n\t\t\t// Checking if the update was on a subform, if so we need to make the rendering for that part only\n\t\t\tif ( !empty($sFormPath) && $sFormPath !== $oFormManager->GetForm()->GetId() )\n\t\t\t{\n\t\t\t\t$oSubForm = $oFormManager->GetForm()->FindSubForm($sFormPath);\n\t\t\t\t$oSubFormRenderer = new BsFormRenderer($oSubForm);\n\t\t\t\t$oSubFormRenderer->SetEndpoint($oFormManager->GetRenderer()->GetEndpoint());\n\t\t\t\t$aFormData['updated_fields'] = $oSubFormRenderer->Render($aRequestedFields);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$aFormData['updated_fields'] = $oFormManager->GetRenderer()->Render($aRequestedFields);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$aFieldSetData['fields_list'] = $oFormManager->GetRenderer()->Render();\n\t\t}\n\n\t\t// Preparing form data\n\t\t$aFormData['id'] = $oFormManager->GetForm()->GetId();\n\t\t$aFormData['transaction_id'] = $oFormManager->GetForm()->GetTransactionId();\n\t\t$aFormData['formmanager_class'] = $oFormManager->GetClass();\n\t\t$aFormData['formmanager_data'] = $oFormManager->ToJSON();\n\t\t$aFormData['renderer'] = $oFormManager->GetRenderer();\n\t\t$aFormData['object_name'] = $oFormManager->GetObject()->GetName();\n\t\t$aFormData['object_class'] = get_class($oFormManager->GetObject());\n\t\t$aFormData['object_id'] = $oFormManager->GetObject()->GetKey();\n\t\t$aFormData['object_state'] = $oFormManager->GetObject()->GetState();\n\t\t$aFormData['fieldset'] = $aFieldSetData;\n        $aFormData['display_mode'] = (isset($aFormProperties['properties'])) ? $aFormProperties['properties']['display_mode'] : ApplicationHelper::FORM_DEFAULT_DISPLAY_MODE;\n\n\t\treturn $aFormData;\n\t}\n\n    /**\n     * Handles the autocomplete search\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param string $sTargetAttCode Attribute code of the host object pointing to the Object class to search\n     * @param string $sHostObjectClass Class name of the host object\n     * @param string $sHostObjectId Id of the host object\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\n     * @throws \\Exception\n     * @throws \\ArchivedObjectException\n     * @throws \\CoreException\n     * @throws \\OQLException\n     */\n\tpublic function SearchAutocompleteAction(Request $oRequest, Application $oApp, $sTargetAttCode, $sHostObjectClass, $sHostObjectId = null)\n\t{\n\t\t$aData = array(\n\t\t\t'results' => array(\n\t\t\t\t'count' => 0,\n\t\t\t\t'items' => array()\n\t\t\t)\n\t\t);\n\n\t\t// Parsing parameters from request payload\n\t\tparse_str($oRequest->getContent(), $aRequestContent);\n\n\t\t// Checking parameters\n\t\tif (!isset($aRequestContent['sQuery']))\n\t\t{\n\t\t\tIssueLog::Error(__METHOD__ . ' at line ' . __LINE__ . ' : Parameter sQuery missing.');\n\t\t\t$oApp->abort(500, Dict::Format('UI:Error:ParameterMissing', 'sQuery'));\n\t\t}\n\n\t\t// Retrieving parameters\n\t\t$sQuery = $aRequestContent['sQuery'];\n\t\t$sFieldId = $aRequestContent['sFieldId'];\n\n\t\t// Checking security layers\n\t\tif (!SecurityHelper::IsActionAllowed($oApp, UR_ACTION_READ, $sHostObjectClass, $sHostObjectId))\n\t\t{\n\t\t\tIssueLog::Warning(__METHOD__ . ' at line ' . __LINE__ . ' : Could not load object ' . $sHostObjectClass . '::' . $sHostObjectId . '.');\n\t\t\t$oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\n\t\t// Retrieving host object for future DBSearch parameters\n\t\tif ($sHostObjectId !== null)\n\t\t{\n\t\t\t// Note : AllowAllData set to true here instead of checking scope's flag because we are displaying a value that has been set and validated\n\t\t\t$oHostObject = MetaModel::GetObject($sHostObjectClass, $sHostObjectId, true, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oHostObject = MetaModel::NewObject($sHostObjectClass);\n\t\t\t// Retrieving action rules\n\t\t\t//\n\t\t\t// Note : The action rules must be a base64-encoded JSON object, this is just so users are tempted to changes values.\n\t\t\t// But it would not be a security issue as it only presets values in the form.\n            $sActionRulesToken = $oApp['request_manipulator']->ReadParam('ar_token', '');\n\t\t\t$aActionRules = (!empty($sActionRulesToken)) ? ContextManipulatorHelper::DecodeRulesToken($sActionRulesToken) : array();\n\t\t\t// Preparing object\n\t\t\t$oApp['context_manipulator']->PrepareObject($aActionRules, $oHostObject);\n\t\t}\n\n\t\t// Updating host object with form data / values\n\t\t$sFormManagerClass = $aRequestContent['formmanager_class'];\n\t\t$sFormManagerData = $aRequestContent['formmanager_data'];\n\t\tif (!empty($sFormManagerClass) && !empty($sFormManagerData))\n\t\t{\n\t\t\t$oFormManager = $sFormManagerClass::FromJSON($sFormManagerData);\n\t\t\t$oFormManager->SetApplication($oApp);\n\t\t\t$oFormManager->SetObject($oHostObject);\n\n\t\t\t// Applying action rules if present\n\t\t\tif (($oFormManager->GetActionRulesToken() !== null) && ($oFormManager->GetActionRulesToken() !== ''))\n\t\t\t{\n\t\t\t\t$aActionRules = ContextManipulatorHelper::DecodeRulesToken($oFormManager->GetActionRulesToken());\n\t\t\t\t$oObj = $oFormManager->GetObject();\n\t\t\t\t$oApp['context_manipulator']->PrepareObject($aActionRules, $oObj);\n\t\t\t\t$oFormManager->SetObject($oObj);\n\t\t\t}\n\t\t\t\n\t\t\t// Updating host object\n\t\t\t$oFormManager->OnUpdate(array('currentValues' => $aRequestContent['current_values']));\n\t\t\t$oHostObject = $oFormManager->GetObject();\n\t\t}\n\n\t\t// Building search query\n\t\t// - Retrieving target object class from attcode\n\t\t$oTargetAttDef = MetaModel::GetAttributeDef($sHostObjectClass, $sTargetAttCode);\n\t\tif ($oTargetAttDef->GetEditClass() === 'CustomFields')\n\t\t{\n\t\t\t$oRequestTemplate = $oHostObject->Get($sTargetAttCode);\n\t\t\t$oTemplateFieldSearch = $oRequestTemplate->GetForm()->GetField('user_data')->GetForm()->GetField($sFieldId)->GetSearch();\n\t\t\t$sTargetObjectClass = $oTemplateFieldSearch->GetClass();\n\t\t}\n\t\telseif ($oTargetAttDef->IsLinkSet())\n\t\t{\n\t\t\tthrow new Exception('Search autocomplete cannot apply on AttributeLinkedSet objects, ' . get_class($oTargetAttDef) . ' (' . $sHostObjectClass . '->' . $sTargetAttCode . ') given.');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sTargetObjectClass = $oTargetAttDef->GetTargetClass();\n\t\t}\n\t\t// - Base query from meta model\n\t\tif ($oTargetAttDef->GetEditClass() === 'CustomFields')\n\t\t{\n\t\t\t$oSearch = $oTemplateFieldSearch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oSearch = DBSearch::FromOQL($oTargetAttDef->GetValuesDef()->GetFilterExpression());\n\t\t}\n\t\t// - Adding query condition\n\t\t$oSearch->AddConditionExpression(new BinaryExpression(new FieldExpression('friendlyname', $oSearch->GetClassAlias()), 'LIKE', new VariableExpression('ac_query')));\n\t\t// - Intersecting with scope constraints\n\t\t// Note : This do NOT apply to custom fields as the portal administrator is not supposed to know which objects will be put in the templates.\n\t\t// It is the responsability of the template designer to write the right query so the user see only what he should.\n\t\tif ($oTargetAttDef->GetEditClass() !== 'CustomFields')\n\t\t{\n\t\t\t$oScopeSearch = $oApp['scope_validator']->GetScopeFilterForProfiles(UserRights::ListProfiles(), $sTargetObjectClass, UR_ACTION_READ);\n\t\t\t$oSearch = $oSearch->Intersect($oScopeSearch);\n\t\t\t// - Allowing all data if necessary\n\t\t\tif ($oScopeSearch->IsAllDataAllowed())\n\t\t\t{\n\t\t\t\t$oSearch->AllowAllData();\n\t\t\t}\n\t\t}\n\n\t\t// Retrieving results\n\t\t// - Preparing object set\n\t\t$oSet = new DBObjectSet($oSearch, array(), array('this' => $oHostObject, 'ac_query' => '%' . $sQuery . '%'));\n\t\t$oSet->OptimizeColumnLoad(array($oSearch->GetClassAlias() => array('friendlyname')));\n\t\t// Note : This limit is also used in the field renderer by typeahead to determine how many suggestions to display\n\t\tif ($oTargetAttDef->GetEditClass() === 'CustomFields')\n\t\t{\n\t\t\t$oSet->SetLimit(static::DEFAULT_LIST_LENGTH);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oSet->SetLimit($oTargetAttDef->GetMaximumComboLength()); // TODO : Is this the right limit value ? We might want to use another parameter\n\t\t}\n\t\t// - Retrieving objects\n\t\twhile ($oItem = $oSet->Fetch())\n\t\t{\n\t\t\t$aData['results']['items'][] = array('id' => $oItem->GetKey(), 'name' => html_entity_decode($oItem->GetName(), ENT_QUOTES, 'UTF-8'));\n\t\t\t$aData['results']['count'] ++;\n\t\t}\n\n\t\t// Preparing response\n\t\tif ($oRequest->isXmlHttpRequest())\n\t\t{\n\t\t\t$oResponse = $oApp->json($aData);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oResponse = $oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\n\t\treturn $oResponse;\n\t}\n\n    /**\n     * Handles the regular (table) search from an attribute\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param string $sTargetAttCode Attribute code of the host object pointing to the Object class to search\n     * @param string $sHostObjectClass Class name of the host object\n     * @param string $sHostObjectId Id of the host object\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\n     * @throws \\Exception\n     * @throws \\ArchivedObjectException\n     * @throws \\CoreException\n     * @throws \\DictExceptionMissingString\n     * @throws \\OQLException\n     */\n\tpublic function SearchFromAttributeAction(Request $oRequest, Application $oApp, $sTargetAttCode, $sHostObjectClass, $sHostObjectId = null)\n\t{\n\t\t$aData = array(\n\t\t\t'sMode' => 'search_regular',\n\t\t\t'sTargetAttCode' => $sTargetAttCode,\n\t\t\t'sHostObjectClass' => $sHostObjectClass,\n\t\t\t'sHostObjectId' => $sHostObjectId,\n\t\t\t'sActionRulesToken' => $oApp['request_manipulator']->ReadParam('ar_token', ''),\n\t\t);\n\n\t\t// Checking security layers\n\t\tif (!SecurityHelper::IsActionAllowed($oApp, UR_ACTION_READ, $sHostObjectClass, $sHostObjectId))\n\t\t{\n\t\t\tIssueLog::Warning(__METHOD__ . ' at line ' . __LINE__ . ' : User #' . UserRights::GetUserId() . ' not allowed to read ' . $sHostObjectClass . '::' . $sHostObjectId . ' object.');\n\t\t\t$oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\n\t\t// Retrieving host object for future DBSearch parameters\n\t\tif ($sHostObjectId !== null)\n\t\t{\n\t\t\t// Note : AllowAllData set to true here instead of checking scope's flag because we are displaying a value that has been set and validated\n\t\t\t$oHostObject = MetaModel::GetObject($sHostObjectClass, $sHostObjectId, true, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$oHostObject = MetaModel::NewObject($sHostObjectClass);\n\t\t\t// Retrieving action rules\n\t\t\t//\n\t\t\t// Note : The action rules must be a base64-encoded JSON object, this is just so users are tempted to changes values.\n\t\t\t// But it would not be a security issue as it only presets values in the form.\n\t\t\t$aActionRules = !empty($aData['sActionRulesToken']) ? ContextManipulatorHelper::DecodeRulesToken($aData['sActionRulesToken']) : array();\n\t\t\t// Preparing object\n\t\t\t$oApp['context_manipulator']->PrepareObject($aActionRules, $oHostObject);\n\t\t}\n\n\t\t// Updating host object with form data / values\n\t\t$sFormManagerClass = $oApp['request_manipulator']->ReadParam('formmanager_class', '', FILTER_UNSAFE_RAW);\n\t\t$sFormManagerData = $oApp['request_manipulator']->ReadParam('formmanager_data', '', FILTER_UNSAFE_RAW);\n\t\tif ( !empty($sFormManagerClass) && !empty($sFormManagerData) )\n\t\t{\n\t\t\t$oFormManager = $sFormManagerClass::FromJSON($sFormManagerData);\n\t\t\t$oFormManager->SetApplication($oApp);\n\t\t\t$oFormManager->SetObject($oHostObject);\n\n\t\t\t// Applying action rules if present\n\t\t\tif (($oFormManager->GetActionRulesToken() !== null) && ($oFormManager->GetActionRulesToken() !== ''))\n\t\t\t{\n\t\t\t\t$aActionRules = ContextManipulatorHelper::DecodeRulesToken($oFormManager->GetActionRulesToken());\n\t\t\t\t$oObj = $oFormManager->GetObject();\n\t\t\t\t$oApp['context_manipulator']->PrepareObject($aActionRules, $oObj);\n\t\t\t\t$oFormManager->SetObject($oObj);\n\t\t\t}\n\t\t\t\n\t\t\t// Updating host object\n\t\t\t$oFormManager->OnUpdate(array('currentValues' => $oApp['request_manipulator']->ReadParam('current_values', array(), FILTER_UNSAFE_RAW)));\n\t\t\t$oHostObject = $oFormManager->GetObject();\n\t\t}\n\t\t\n\t\t// Retrieving request parameters\n\t\t$iPageNumber = $oApp['request_manipulator']->ReadParam('iPageNumber', static::DEFAULT_PAGE_NUMBER, FILTER_SANITIZE_NUMBER_INT);\n\t\t$iListLength = $oApp['request_manipulator']->ReadParam('iListLength', static::DEFAULT_LIST_LENGTH, FILTER_SANITIZE_NUMBER_INT);\n\t\t$bInitalPass = $oApp['request_manipulator']->HasParam('draw') ? false : true;\n\t\t$sQuery = $oApp['request_manipulator']->ReadParam('sSearchValue', '');\n\t\t$sFormPath = $oApp['request_manipulator']->ReadParam('sFormPath', '');\n\t\t$sFieldId = $oApp['request_manipulator']->ReadParam('sFieldId', '');\n\t\t$aObjectIdsToIgnore = $oApp['request_manipulator']->ReadParam('aObjectIdsToIgnore', null, FILTER_UNSAFE_RAW);\n\n\t\t// Building search query\n\t\t// - Retrieving target object class from attcode\n\t\t$oTargetAttDef = MetaModel::GetAttributeDef($sHostObjectClass, $sTargetAttCode);\n\t\tif ($oTargetAttDef->IsExternalKey())\n\t\t{\n\t\t\t$sTargetObjectClass = $oTargetAttDef->GetTargetClass();\n\t\t}\n\t\telseif ($oTargetAttDef->IsLinkSet())\n\t\t{\n\t\t\tif (!$oTargetAttDef->IsIndirect())\n\t\t\t{\n\t\t\t\t$sTargetObjectClass = $oTargetAttDef->GetLinkedClass();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oRemoteAttDef = MetaModel::GetAttributeDef($oTargetAttDef->GetLinkedClass(), $oTargetAttDef->GetExtKeyToRemote());\n\t\t\t\t$sTargetObjectClass = $oRemoteAttDef->GetTargetClass();\n\t\t\t}\n\t\t}\n\t\telseif ($oTargetAttDef->GetEditClass() === 'CustomFields')\n\t\t{\n\t\t\t$oRequestTemplate = $oHostObject->Get($sTargetAttCode);\n\t\t\t$oTemplateFieldSearch = $oRequestTemplate->GetForm()->GetField('user_data')->GetForm()->GetField($sFieldId)->GetSearch();\n\t\t\t$sTargetObjectClass = $oTemplateFieldSearch->GetClass();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new Exception('Search from attribute can only apply on AttributeExternalKey or AttributeLinkedSet objects, ' . get_class($oTargetAttDef) . ' given.');\n\t\t}\n\t\t\n\t\t// - Retrieving class attribute list\n\t\t$aAttCodes = ApplicationHelper::GetLoadedListFromClass($oApp, $sTargetObjectClass, 'list');\n\t\t// - Adding friendlyname attribute to the list is not already in it\n\t\t$sTitleAttCode = 'friendlyname';\n\t\tif (($sTitleAttCode !== null) && !in_array($sTitleAttCode, $aAttCodes))\n\t\t{\n\t\t\t$aAttCodes = array_merge(array($sTitleAttCode), $aAttCodes);\n\t\t}\n\n\t\t// - Retrieving scope search\n\t\t// Note : This do NOT apply to custom fields as the portal administrator is not supposed to know which objects will be put in the templates.\n\t\t// It is the responsability of the template designer to write the right query so the user see only what he should.\n\t\t$oScopeSearch = $oApp['scope_validator']->GetScopeFilterForProfiles(UserRights::ListProfiles(), $sTargetObjectClass, UR_ACTION_READ);\n\t\t$aInternalParams = array();\n\t\tif (($oScopeSearch === null) && ($oTargetAttDef->GetEditClass() !== 'CustomFields'))\n\t\t{\n\t\t\tIssueLog::Info(__METHOD__ . ' at line ' . __LINE__ . ' : User #' . UserRights::GetUserId() . ' has no scope query for ' . $sTargetObjectClass . ' class.');\n\t\t\t$oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t}\n\n\t\t// - Base query from meta model\n\t\tif ($oTargetAttDef->IsExternalKey())\n\t\t{\n\t\t\t$oSearch = DBSearch::FromOQL($oTargetAttDef->GetValuesDef()->GetFilterExpression());\n\t\t}\n\t\telseif ($oTargetAttDef->IsLinkSet())\n\t\t{\n\t\t\t$oSearch = $oScopeSearch;\n\t\t}\n\t\telseif ($oTargetAttDef->GetEditClass() === 'CustomFields')\n\t\t{\n\t\t\t// Note : $oTemplateFieldSearch has been defined in the \"Retrieving target object class from attcode\" part, it is not available otherwise\n\t\t\t$oSearch = $oTemplateFieldSearch;\n\t\t}\n\n\t\t// - Filtering objects to ignore\n\t\tif (($aObjectIdsToIgnore !== null) && (is_array($aObjectIdsToIgnore)))\n\t\t{\n\t\t\t//$oSearch->AddConditionExpression('id', $aObjectIdsToIgnore, 'NOT IN');\n\t\t\t$aExpressions = array();\n\t\t\tforeach ($aObjectIdsToIgnore as $sObjectIdToIgnore)\n\t\t\t{\n\t\t\t\t$aExpressions[] = new ScalarExpression($sObjectIdToIgnore);\n\t\t\t}\n\t\t\t$oSearch->AddConditionExpression(new BinaryExpression(new FieldExpression('id', $oSearch->GetClassAlias()), 'NOT IN', new ListExpression($aExpressions)));\n\t\t}\n\t\t\n\t\t// - Adding query condition\n\t\t$aInternalParams['this'] = $oHostObject;\n\t\tif (!empty($sQuery))\n\t\t{\n\t\t\t$oFullExpr = null;\n\t\t\tfor ($i = 0; $i < count($aAttCodes); $i++)\n\t\t\t{\n\t\t\t\t// Checking if the current attcode is an external key in order to search on the friendlyname\n\t\t\t\t$oAttDef = MetaModel::GetAttributeDef($sTargetObjectClass, $aAttCodes[$i]);\n\t\t\t\t$sAttCode = (!$oAttDef->IsExternalKey()) ? $aAttCodes[$i] : $aAttCodes[$i] . '_friendlyname';\n\t\t\t\t// Building expression for the current attcode\n\t\t\t\t// - For attributes that need conversion from their display value to storage value\n\t\t\t\t//   Note : This is dirty hack that will need to be refactored in the OQL core in order to be nicer and to be extended to other types such as dates etc...\n\t\t\t\tif (($oAttDef instanceof AttributeEnum) || ($oAttDef instanceof AttributeFinalClass))\n\t\t\t\t{\n\t\t\t\t\t// Looking up storage value\n\t\t\t\t\t$aMatchedCodes = array();\n\t\t\t\t\tforeach ($oAttDef->GetAllowedValues() as $sValueCode => $sValueLabel)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (stripos($sValueLabel, $sQuery) !== false)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aMatchedCodes[] = $sValueCode;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Building expression\n\t\t\t\t\tif (!empty($aMatchedCodes))\n\t\t\t\t\t{\n\t\t\t\t\t\t$oEnumeratedListExpr = ListExpression::FromScalars($aMatchedCodes);\n\t\t\t\t\t\t$oBinExpr = new BinaryExpression(new FieldExpression($sAttCode, $oSearch->GetClassAlias()), 'IN', $oEnumeratedListExpr);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$oBinExpr = new FalseExpression();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// - For regular attributs\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$oBinExpr = new BinaryExpression(new FieldExpression($sAttCode, $oSearch->GetClassAlias()), 'LIKE', new VariableExpression('re_query'));\n\t\t\t\t}\n\t\t\t\t// Adding expression to the full expression (all attcodes)\n\t\t\t\tif ($i === 0)\n\t\t\t\t{\n\t\t\t\t\t$oFullExpr = $oBinExpr;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$oFullExpr = new BinaryExpression($oFullExpr, 'OR', $oBinExpr);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Adding full expression to the search object\n\t\t\t$oSearch->AddConditionExpression($oFullExpr);\n\t\t\t$aInternalParams['re_query'] = '%' . $sQuery . '%';\n\t\t}\n\n\t\t// - Intersecting with scope constraints\n\t\t// Note : This do NOT apply to custom fields as the portal administrator is not supposed to know which objects will be put in the templates.\n\t\t// It is the responsability of the template designer to write the right query so the user see only what he should.\n\t\tif (($oScopeSearch !== null) && ($oTargetAttDef->GetEditClass() !== 'CustomFields'))\n\t\t{\n\t\t\t$oSearch = $oSearch->Intersect($oScopeSearch);\n\t\t\t// - Allowing all data if necessary\n\t\t\tif ($oScopeSearch->IsAllDataAllowed())\n\t\t\t{\n\t\t\t\t$oSearch->AllowAllData();\n\t\t\t}\n\t\t}\n\n\t\t// Retrieving results\n\t\t// - Preparing object set\n\t\t$oSet = new DBObjectSet($oSearch, array(), $aInternalParams);\n\t\t$oSet->OptimizeColumnLoad(array($oSearch->GetClassAlias() => $aAttCodes));\n\t\t$oSet->SetLimit($iListLength, $iListLength * ($iPageNumber - 1));\n\t\t// - Retrieving columns properties\n\t\t$aColumnProperties = array();\n\t\tforeach ($aAttCodes as $sAttCode)\n\t\t{\n\t\t\t$oAttDef = MetaModel::GetAttributeDef($sTargetObjectClass, $sAttCode);\n\t\t\t$aColumnProperties[$sAttCode] = array(\n\t\t\t\t'title' => $oAttDef->GetLabel()\n\t\t\t);\n\t\t}\n\t\t// - Retrieving objects\n\t\t$aItems = array();\n\t\twhile ($oItem = $oSet->Fetch())\n\t\t{\n\t\t\t$aItems[] = $this->PrepareObjectInformations($oApp, $oItem, $aAttCodes);\n\t\t}\n\t\t\n\t\t// Preparing response\n\t\tif ($bInitalPass)\n\t\t{\n\t\t\t$aData = $aData + array(\n\t\t\t\t'form' => array(\n\t\t\t\t\t'id' => 'object_search_form_' . time(),\n\t\t\t\t\t'title' => Dict::Format('Brick:Portal:Object:Search:Regular:Title', $oTargetAttDef->GetLabel(), MetaModel::GetName($sTargetObjectClass))\n\t\t\t\t),\n\t\t\t\t'aColumnProperties' => json_encode($aColumnProperties),\n\t\t\t\t'aResults' => array(\n\t\t\t\t\t'aItems' => json_encode($aItems),\n\t\t\t\t\t'iCount' => count($aItems)\n\t\t\t\t),\n\t\t\t\t'bMultipleSelect' => $oTargetAttDef->IsLinkSet(),\n\t\t\t\t'aSource' => array(\n\t\t\t\t\t'sFormPath' => $sFormPath,\n\t\t\t\t\t'sFieldId' => $sFieldId,\n\t\t\t\t\t'aObjectIdsToIgnore' => $aObjectIdsToIgnore,\n\t\t\t\t\t'sFormManagerClass' => $sFormManagerClass,\n\t\t\t\t\t'sFormManagerData' => $sFormManagerData\n\t\t\t\t)\n\t\t\t);\n\t\t\t\n\t\t\tif ($oRequest->isXmlHttpRequest())\n\t\t\t{\n\t\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/bricks/object/modal.html.twig', $aData);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//$oResponse = $oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n\t\t\t\t$oResponse = $oApp['twig']->render('itop-portal-base/portal/src/views/bricks/object/layout.html.twig', $aData);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$aData = $aData + array(\n\t\t\t\t'levelsProperties' => $aColumnProperties,\n\t\t\t\t'data' => $aItems,\n\t\t\t\t'recordsTotal' => $oSet->Count(),\n\t\t\t\t'recordsFiltered' => $oSet->Count()\n\t\t\t);\n\n\t\t\t$oResponse = $oApp->json($aData);\n\t\t}\n\n\t\treturn $oResponse;\n\t}\n\n    /**\n     * Handles the hierarchical search from an attribute\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param string $sTargetAttCode Attribute code of the host object pointing to the Object class to search\n     * @param string $sHostObjectClass Class name of the host object\n     * @param string $sHostObjectId Id of the host object\n     *\n     * @return void\n     *\n     */\n\tpublic function SearchHierarchyAction(Request $oRequest, Application $oApp, $sTargetAttCode, $sHostObjectClass, $sHostObjectId = null)\n\t{\n\t\t// TODO\n\t}\n\n    /**\n     * Handles ormDocument display / download from an object\n     *\n     * Note: This is inspired from pages/ajax.document.php, but duplicated as there is no secret mecanism for ormDocument yet.\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param string $sOperation\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\n     * @throws \\ArchivedObjectException\n     * @throws \\CoreException\n     */\n\tpublic function DocumentAction(Request $oRequest, Application $oApp, $sOperation = null)\n    {\n        // Setting default operation\n        if($sOperation === null)\n        {\n            $sOperation = 'display';\n        }\n\n        // Retrieving ormDocument's host object\n        $sObjectClass = $oApp['request_manipulator']->ReadParam('sObjectClass', '');\n        $sObjectId = $oApp['request_manipulator']->ReadParam('sObjectId', '');\n        $sObjectField = $oApp['request_manipulator']->ReadParam('sObjectField', '');\n\n        // When reaching to an Attachment, we have to check security on its host object instead of the Attachment itself\n        if($sObjectClass === 'Attachment')\n        {\n            $oAttachment = MetaModel::GetObject($sObjectClass, $sObjectId, true, true);\n            $sHostClass = $oAttachment->Get('item_class');\n            $sHostId = $oAttachment->Get('item_id');\n        }\n        else\n        {\n            $sHostClass = $sObjectClass;\n            $sHostId = $sObjectId;\n        }\n\n        // Checking security layers\n\t    // Note: Checking if host object already exists as we can try to download document from an object that is being created\n        if (($sHostId > 0) && !SecurityHelper::IsActionAllowed($oApp, UR_ACTION_READ, $sHostClass, $sHostId))\n        {\n            IssueLog::Warning(__METHOD__ . ' at line ' . __LINE__ . ' : User #' . UserRights::GetUserId() . ' not allowed to retrieve document from attribute ' . $sObjectField . ' as it not allowed to read ' . $sHostClass . '::' . $sHostId . ' object.');\n            $oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n        }\n\n        // Retrieving object\n        $oObject = MetaModel::GetObject($sObjectClass, $sObjectId, false /* Must not be found */, $oApp['scope_validator']->IsAllDataAllowedForScope(UserRights::ListProfiles(), $sHostClass));\n        if ($oObject === null)\n        {\n            // We should never be there as the secuirty helper makes sure that the object exists, but just in case.\n            IssueLog::Info(__METHOD__ . ' at line ' . __LINE__ . ' : Could not load object ' . $sObjectClass . '::' . $sObjectId . '.');\n            $oApp->abort(404, Dict::S('UI:ObjectDoesNotExist'));\n        }\n\n        // Setting cache timeout\n        // Note: Attachment download should be handle through AttachmentAction()\n        if($sObjectClass === 'Attachment')\n        {\n            // One year ahead: an attachement cannot change\n            $iCacheSec = 31556926;\n        }\n        else\n        {\n            $iCacheSec = $oApp['request_manipulator']->ReadParam('cache', 0, FILTER_SANITIZE_NUMBER_INT);\n        }\n\n        $aHeaders = array();\n        if($iCacheSec > 0)\n        {\n            $aHeaders['Expires'] = '';\n            $aHeaders['Cache-Control'] = 'no-transform, public,max-age='.$iCacheSec.',s-maxage='.$iCacheSec;\n            // Reset the value set previously\n            $aHeaders['Pragma'] = 'cache';\n            // An arbitrary date in the past is ok\n            $aHeaders['Last-Modified'] = 'Wed, 15 Jun 2015 13:21:15 GMT';\n        }\n\n        /** @var \\ormDocument $oDocument */\n        $oDocument = $oObject->Get($sObjectField);\n        $aHeaders['Content-Type'] = $oDocument->GetMimeType();\n        $aHeaders['Content-Disposition'] = (($sOperation === 'display') ? 'inline' : 'attachment') . ';filename=\"'.$oDocument->GetFileName().'\"';\n\n\t    // N\u00b04129 - Prevent XSS attacks & other script executions\n\t    if (utils::GetConfig()->Get('security.disable_inline_documents_sandbox') === false) {\n\t\t    $aHeaders['Content-Security-Policy'] = 'sandbox';\n\t    }\n\n        return new Response($oDocument->GetData(), Response::HTTP_OK, $aHeaders);\n    }\n\n    /**\n     * Handles attachment add/remove on an object\n     *\n     * Note: This is inspired from itop-attachment/ajax.attachment.php\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     * @param string $sOperation\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\n     * @throws \\Exception\n     * @throws \\CoreException\n     * @throws \\CoreUnexpectedValue\n     */\n\tpublic function AttachmentAction(Request $oRequest, Application $oApp, $sOperation = null)\n\t{\n\t\t$aData = array(\n\t\t\t'att_id' => 0,\n\t\t\t'preview' => false,\n\t\t\t'msg' => ''\n\t\t);\n\n\t\t// Retrieving sOperation from request only if it wasn't forced (determined by the route)\n\t\tif ($sOperation === null)\n\t\t{\n\t\t\t$sOperation = $oApp['request_manipulator']->ReadParam('operation', null);\n\t\t}\n\t\tswitch ($sOperation)\n\t\t{\n\t\t\tcase 'add':\n\t\t\t\t$sFieldName = $oApp['request_manipulator']->ReadParam('field_name', '');\n\t\t\t\t$sObjectClass = $oApp['request_manipulator']->ReadParam('object_class', '');\n\t\t\t\t$sTempId = $oApp['request_manipulator']->ReadParam('temp_id', '');\n\n\t\t\t\tif (empty($sObjectClass) || empty($sTempId))\n\t\t\t\t{\n\t\t\t\t\t$aData['error'] = Dict::Format('UI:Error:2ParametersMissing', 'object_class', 'temp_id');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t$oDocument = utils::ReadPostedDocument($sFieldName);\n\t\t\t\t\t\t$oAttachment = MetaModel::NewObject('Attachment');\n\t\t\t\t\t\t$oAttachment->Set('expire', time() + MetaModel::GetConfig()->Get('draft_attachments_lifetime')); // one hour...\n\t\t\t\t\t\t$oAttachment->Set('temp_id', $sTempId);\n\t\t\t\t\t\t$oAttachment->Set('item_class', $sObjectClass);\n\t\t\t\t\t\t$oAttachment->SetDefaultOrgId();\n\t\t\t\t\t\t$oAttachment->Set('contents', $oDocument);\n\t\t\t\t\t\t$iAttId = $oAttachment->DBInsert();\n\n\t\t\t\t\t\t$aData['msg'] = htmlentities($oDocument->GetFileName(), ENT_QUOTES, 'UTF-8');\n\t\t\t\t\t\t// TODO : Change icon location when itop-attachment is refactored\n\t\t\t\t\t\t//$aData['icon'] = utils::GetAbsoluteUrlAppRoot() . AttachmentPlugIn::GetFileIcon($oDoc->GetFileName());\n\t\t\t\t\t\t$aData['icon'] = utils::GetAbsoluteUrlAppRoot() . 'env-' . utils::GetCurrentEnvironment() . '/itop-attachments/icons/image.png';\n\t\t\t\t\t\t$aData['att_id'] = $iAttId;\n\t\t\t\t\t\t$aData['preview'] = $oDocument->IsPreviewAvailable() ? 'true' : 'false';\n\t\t\t\t\t}\n\t\t\t\t\tcatch (FileUploadException $e)\n\t\t\t\t\t{\n\t\t\t\t\t\t$aData['error'] = $e->GetMessage();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Note : The Content-Type header is set to 'text/plain' in order to be IE9 compatible. Otherwise ('application/json') IE9 will download the response as a JSON file to the user computer...\n\t\t\t\t$oResponse = $oApp->json($aData, 200, array('Content-Type' => 'text/plain'));\n\t\t\t\tbreak;\n\n\t\t\tcase 'download':\n\t\t\t\t// Preparing redirection\n                // - Route\n                $aRouteParams = array(\n                    'sObjectClass' => 'Attachment',\n                    'sObjectId' => $oApp['request_manipulator']->ReadParam('sAttachmentId', null),\n                    'sObjectField' => 'contents',\n                );\n                $sRedirectRoute = $oApp['url_generator']->generate('p_object_document_download', $aRouteParams);\n                // - Request\n                $oSubRequest = Request::create($sRedirectRoute, 'GET', $oRequest->query->all(), $oRequest->cookies->all(), array(), $oRequest->server->all());\n\n                $oResponse = $oApp->handle($oSubRequest, HttpKernelInterface::SUB_REQUEST, true);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t$oApp->abort(403, Dict::S('Error:HTTP:400'));\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn $oResponse;\n\t}\n\n    /**\n     * Returns a json response containing an array of objects informations.\n     *\n     * The service must be given 3 parameters :\n     * - sObjectClass : The class of objects to retrieve information from\n     * - aObjectIds : An array of object ids\n     * - aObjectAttCodes : An array of attribute codes to retrieve\n     *\n     * @param \\Symfony\\Component\\HttpFoundation\\Request $oRequest\n     * @param \\Silex\\Application $oApp\n     *\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\n     *\n     * @throws \\OQLException\n     * @throws \\CoreException\n     */\n\tpublic function GetInformationsAsJsonAction(Request $oRequest, Application $oApp)\n\t{\n\t\t$aData = array();\n\n\t\t// Retrieving parameters\n\t\t$sObjectClass = $oApp['request_manipulator']->ReadParam('sObjectClass', '');\n\t\t$aObjectIds = $oApp['request_manipulator']->ReadParam('aObjectIds', array(), FILTER_UNSAFE_RAW);\n\t\t$aObjectAttCodes = $oApp['request_manipulator']->ReadParam('aObjectAttCodes', array(), FILTER_UNSAFE_RAW);\n\t\tif ( empty($sObjectClass) || empty($aObjectIds) || empty($aObjectAttCodes) )\n\t\t{\n\t\t\tIssueLog::Info(__METHOD__ . ' at line ' . __LINE__ . ' : sObjectClass, aObjectIds and aObjectAttCodes expected, \"' . $sObjectClass . '\", \"' . implode('/', $aObjectIds) . '\" given.');\n\t\t\t$oApp->abort(500, 'Invalid request data, some informations are missing');\n\t\t}\n\n\t\t// Checking that id is in the AttCodes\n\t\tif (!in_array('id', $aObjectAttCodes))\n\t\t{\n\t\t\t$aObjectAttCodes = array_merge(array('id'), $aObjectAttCodes);\n\t\t}\n\n\t\t// Building the search\n\t\t$bIgnoreSilos = $oApp['scope_validator']->IsAllDataAllowedForScope(UserRights::ListProfiles(), $sObjectClass);\n\t\t$oSearch = DBObjectSearch::FromOQL(\"SELECT \" . $sObjectClass . \" WHERE id IN ('\" . implode(\"','\", $aObjectIds) . \"')\");\n\t\tif ($bIgnoreSilos === true)\n\t\t{\n\t\t\t$oSearch->AllowAllData();\n\t\t}\n\t\t$oSet = new DBObjectSet($oSearch);\n\t\t$oSet->OptimizeColumnLoad($aObjectAttCodes);\n\n\t\t// Retrieving objects\n\t\twhile ($oObject = $oSet->Fetch())\n\t\t{\n\t\t\t$aData['items'][] = $this->PrepareObjectInformations($oApp, $oObject, $aObjectAttCodes);\n\t\t}\n\n\t\treturn $oApp->json($aData);\n\t}\n\n    /**\n     * Prepare a DBObject informations as an array for a client side usage (typically, add a row in a table)\n     *\n     * @param \\Silex\\Application $oApp\n     * @param \\DBObject $oObject\n     * @param array $aAttCodes\n     *\n     * @return array\n     *\n     * @throws \\Exception\n     * @throws \\CoreException\n     */\n\tprotected function PrepareObjectInformations(Application $oApp, DBObject $oObject, $aAttCodes = array())\n\t{\n\t\t$sObjectClass = get_class($oObject);\n\t\t$aObjectData = array(\n\t\t\t'id' => $oObject->GetKey(),\n\t\t\t'name' => $oObject->GetName(),\n\t\t\t'attributes' => array(),\n\t\t);\n\n\t\t// Retrieving attributes definitions\n\t\t$aAttDefs = array();\n\t\tforeach ($aAttCodes as $sAttCode)\n\t\t{\n\t\t\tif ($sAttCode === 'id')\n\t\t\t\tcontinue;\n\n\t\t\t$aAttDefs[$sAttCode] = MetaModel::GetAttributeDef($sObjectClass, $sAttCode);\n\t\t}\n\n\t\t// Preparing attribute data\n\t\tforeach ($aAttDefs as $oAttDef)\n\t\t{\n\t\t\t$aAttData = array(\n\t\t\t\t'att_code' => $oAttDef->GetCode()\n\t\t\t);\n\n\t\t\tif ($oAttDef->IsExternalKey())\n\t\t\t{\n\t\t\t\t$aAttData['value'] = $oObject->GetAsHTML($oAttDef->GetCode() . '_friendlyname');\n\n\t\t\t\t// Checking if user can access object's external key\n\t\t\t\tif (SecurityHelper::IsActionAllowed($oApp, UR_ACTION_READ, $oAttDef->GetTargetClass()))\n\t\t\t\t{\n\t\t\t\t\t$aAttData['url'] = $oApp['url_generator']->generate('p_object_view', array('sObjectClass' => $oAttDef->GetTargetClass(), 'sObjectId' => $oObject->Get($oAttDef->GetCode())));\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif ($oAttDef->IsLinkSet())\n\t\t\t{\n\t\t\t\t// We skip it\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telseif ($oAttDef instanceof AttributeImage)\n            {\n                $oOrmDoc = $oObject->Get($oAttDef->GetCode());\n                if (is_object($oOrmDoc) && !$oOrmDoc->IsEmpty())\n                {\n                    $sUrl = $oApp['url_generator']->generate('p_object_document_display', array('sObjectClass' => get_class($oObject), 'sObjectId' => $oObject->GetKey(), 'sObjectField' => $oAttDef->GetCode(), 'cache' => 86400));\n                }\n                else\n                {\n                    $sUrl = $oAttDef->Get('default_image');\n                }\n                $aAttData['value'] = '<img src=\"' . $sUrl . '\" />';\n            }\n\t\t\telse\n\t\t\t{\n\t\t\t\t$aAttData['value'] = $oAttDef->GetAsHTML($oObject->Get($oAttDef->GetCode()));\n\n\t\t\t\tif ($oAttDef instanceof AttributeFriendlyName)\n\t\t\t\t{\n\t\t\t\t\t// Checking if user can access object\n\t\t\t\t\tif(SecurityHelper::IsActionAllowed($oApp, UR_ACTION_READ, $sObjectClass))\n\t\t\t\t\t{\n\t\t\t\t\t\t$aAttData['url'] = $oApp['url_generator']->generate('p_object_view', array('sObjectClass' => $sObjectClass, 'sObjectId' => $oObject->GetKey()));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$aObjectData['attributes'][$oAttDef->GetCode()] = $aAttData;\n\t\t}\n\n\t\treturn $aObjectData;\n\t}\n\n}\n", "<?php\n// Copyright (C) 2010-2017 Combodo SARL\n//\n//   This file is part of iTop.\n//\n//   iTop is free software; you can redistribute it and/or modify\t\n//   it under the terms of the GNU Affero General Public License as published by\n//   the Free Software Foundation, either version 3 of the License, or\n//   (at your option) any later version.\n//\n//   iTop is distributed in the hope that it will be useful,\n//   but WITHOUT ANY WARRANTY; without even the implied warranty of\n//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//   GNU Affero General Public License for more details.\n//\n//   You should have received a copy of the GNU Affero General Public License\n//   along with iTop. If not, see <http://www.gnu.org/licenses/>\n\n\n/**\n * Handles various ajax requests\n *\n * @copyright   Copyright (C) 2010-2017 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\n\nrequire_once('../approot.inc.php');\nrequire_once(APPROOT.'application/application.inc.php');\nrequire_once(APPROOT.'application/webpage.class.inc.php');\nrequire_once(APPROOT.'application/ajaxwebpage.class.inc.php');\nrequire_once(APPROOT.'application/pdfpage.class.inc.php');\nrequire_once(APPROOT.'application/wizardhelper.class.inc.php');\nrequire_once(APPROOT.'application/ui.linkswidget.class.inc.php');\nrequire_once(APPROOT.'application/ui.searchformforeignkeys.class.inc.php');\nrequire_once(APPROOT.'application/ui.extkeywidget.class.inc.php');\nrequire_once(APPROOT.'application/datatable.class.inc.php');\nrequire_once(APPROOT.'application/excelexporter.class.inc.php');\n\n\nfunction LogErrorMessage($sMsgPrefix, $aContextInfo) {\n\t$sCurrentUserLogin = UserRights::GetUser();\n\t$sContextInfo = urldecode(http_build_query($aContextInfo, '', ', '));\n\t$sErrorMessage = \"$sMsgPrefix - User='$sCurrentUserLogin', $sContextInfo\";\n\tIssueLog::Error($sErrorMessage);\n}\n\n\ntry\n{\n\trequire_once(APPROOT.'/application/startup.inc.php');\n\trequire_once(APPROOT.'/application/user.preferences.class.inc.php');\n\n\trequire_once(APPROOT.'/application/loginwebpage.class.inc.php');\n\t$operation = utils::ReadParam('operation', '');\n\n\t// Only allow export functions to portal users\n\tswitch ($operation)\n\t{\n\t\tcase 'export_build':\n\t\tcase 'export_cancel':\n\t\tcase 'export_download':\n\t\tcase 'cke_img_upload':\n\t\tcase 'cke_upload_and_browse':\n\t\tcase 'cke_browse':\n\t\t\t$sRequestedPortalId = null;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t$sRequestedPortalId = (MetaModel::GetConfig()->Get('disable_attachments_download_legacy_portal') === true) ? 'backoffice' : null;\n\t}\n\tLoginWebPage::DoLoginEx($sRequestedPortalId, false);\n\n\t$oPage = new ajax_page(\"\");\n\t$oPage->no_cache();\n\n\n\t$sFilter = utils::ReadParam('filter', '', false, 'raw_data');\n\t$sEncoding = utils::ReadParam('encoding', 'serialize');\n\t$sClass = utils::ReadParam('class', 'MissingAjaxParam', false, 'class');\n\t$sStyle = utils::ReadParam('style', 'list');\n\n\tswitch ($operation)\n\t{\n\t\tcase 'datatable':\n\t\tcase 'pagination':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$extraParams = utils::ReadParam('extra_param', '', false, 'raw_data');\n\t\t\t$aExtraParams = array();\n\t\t\tif (is_array($extraParams))\n\t\t\t{\n\t\t\t\t$aExtraParams = $extraParams;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$sExtraParams = stripslashes($extraParams);\n\t\t\t\tif (!empty($sExtraParams))\n\t\t\t\t{\n\t\t\t\t\t$val = json_decode(str_replace(\"'\", '\"', $sExtraParams), true /* associative array */);\n\t\t\t\t\tif ($val !== null)\n\t\t\t\t\t{\n\t\t\t\t\t\t$aExtraParams = $val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($sEncoding == 'oql')\n\t\t\t{\n\t\t\t\t$oFilter = DBSearch::FromOQL($sFilter);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oFilter = DBSearch::unserialize($sFilter);\n\t\t\t}\n\t\t\t$iStart = utils::ReadParam('start', 0);\n\t\t\t$iEnd = utils::ReadParam('end', 1);\n\t\t\t$iSortCol = utils::ReadParam('sort_col', 'null');\n\t\t\t$sSelectMode = utils::ReadParam('select_mode', '');\n\t\t\tif (!empty($sSelectMode) && ($sSelectMode != 'none'))\n\t\t\t{\n\t\t\t\t// The first column is used for the selection (radio / checkbox) and is not sortable\n\t\t\t\t$iSortCol--;\n\t\t\t}\n\t\t\t$bDisplayKey = utils::ReadParam('display_key', 'true') == 'true';\n\t\t\t$aColumns = utils::ReadParam('columns', array(), false, 'raw_data');\n\t\t\t$aClassAliases = utils::ReadParam('class_aliases', array());\n\t\t\t$iListId = utils::ReadParam('list_id', 0);\n\n\t\t\t// Filter the list to removed linked set since we are not able to display them here\n\t\t\t$aOrderBy = array();\n\t\t\t$iSortIndex = 0;\n\n\t\t\t$aColumnsLoad = array();\n\t\t\tforeach($aClassAliases as $sAlias => $sClassName)\n\t\t\t{\n\t\t\t\t$aColumnsLoad[$sAlias] = array();\n\t\t\t\tforeach($aColumns[$sAlias] as $sAttCode => $aData)\n\t\t\t\t{\n\t\t\t\t\tif ($aData['checked'] == 'true')\n\t\t\t\t\t{\n\t\t\t\t\t\t$aColumns[$sAlias][$sAttCode]['checked'] = true;\n\t\t\t\t\t\tif ($sAttCode == '_key_')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ($iSortCol == $iSortIndex)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!MetaModel::HasChildrenClasses($oFilter->GetClass()))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$aNameSpec = MetaModel::GetNameSpec($oFilter->GetClass());\n\t\t\t\t\t\t\t\t\tif ($aNameSpec[0] == '%1$s')\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// The name is made of a single column, let's sort according to the sort algorithm for this column\n\t\t\t\t\t\t\t\t\t\t$aOrderBy[$sAlias.'.'.$aNameSpec[1][0]] = (utils::ReadParam('sort_order', 'asc') == 'asc');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$aOrderBy[$sAlias.'.'.'friendlyname'] = (utils::ReadParam('sort_order', 'asc') == 'asc');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$aOrderBy[$sAlias.'.'.'friendlyname'] = (utils::ReadParam('sort_order', 'asc') == 'asc');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$oAttDef = MetaModel::GetAttributeDef($sClassName, $sAttCode);\n\t\t\t\t\t\t\tif ($oAttDef instanceof AttributeLinkedSet)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Removed from the display list\n\t\t\t\t\t\t\t\tunset($aColumns[$sAlias][$sAttCode]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$aColumnsLoad[$sAlias][] = $sAttCode;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ($iSortCol == $iSortIndex)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif ($oAttDef->IsExternalKey())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$sSortCol = $sAttCode.'_friendlyname';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$sSortCol = $sAttCode;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$aOrderBy[$sAlias.'.'.$sSortCol] = (utils::ReadParam('sort_order', 'asc') == 'asc');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$iSortIndex++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$aColumns[$sAlias][$sAttCode]['checked'] = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Load only the requested columns\n\t\t\t$oSet = new DBObjectSet($oFilter, $aOrderBy, $aExtraParams, null, $iEnd - $iStart, $iStart);\n\t\t\t$oSet->OptimizeColumnLoad($aColumnsLoad);\n\n\t\t\tif (isset($aExtraParams['show_obsolete_data']))\n\t\t\t{\n\t\t\t\t$bShowObsoleteData = $aExtraParams['show_obsolete_data'];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$bShowObsoleteData = utils::ShowObsoleteData();\n\t\t\t}\n\t\t\t$oSet->SetShowObsoleteData($bShowObsoleteData);\n\n\t\t\t$oDataTable = new DataTable($iListId, $oSet, $oSet->GetSelectedClasses());\n\t\t\tif ($operation == 'datatable')\n\t\t\t{\n\t\t\t\t// Redraw the whole table\n\t\t\t\t$sHtml = $oDataTable->UpdatePager($oPage, $iEnd - $iStart, $iStart); // Set the default page size\n\t\t\t\t$sHtml .= $oDataTable->GetHTMLTable($oPage, $aColumns, $sSelectMode, $iEnd - $iStart, $bDisplayKey, $aExtraParams);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// redraw just the needed rows\n\t\t\t\t$sHtml = $oDataTable->GetAsHTMLTableRows($oPage, $iEnd - $iStart, $aColumns, $sSelectMode, $bDisplayKey, $aExtraParams);\n\t\t\t}\n\t\t\t$oPage->add($sHtml);\n\t\t\tbreak;\n\n\t\tcase 'datatable_save_settings':\n\t\t\t$oPage->SetContentType('text/plain');\n\t\t\t$iPageSize = utils::ReadParam('page_size', 10);\n\t\t\t$sTableId = utils::ReadParam('table_id', null, false, 'raw_data');\n\t\t\t$bSaveAsDefaults = (utils::ReadParam('defaults', 'true') == 'true');\n\t\t\t$aClassAliases = utils::ReadParam('class_aliases', array(), false, 'raw_data');\n\t\t\t$aColumns = utils::ReadParam('columns', array(), false, 'raw_data');\n\n\t\t\tforeach($aColumns as $sAlias => $aList)\n\t\t\t{\n\t\t\t\tforeach($aList as $sAttCode => $aData)\n\t\t\t\t{\n\t\t\t\t\t$aColumns[$sAlias][$sAttCode]['checked'] = ($aData['checked'] == 'true');\n\t\t\t\t\t$aColumns[$sAlias][$sAttCode]['disabled'] = ($aData['disabled'] == 'true');\n\t\t\t\t\t$aColumns[$sAlias][$sAttCode]['sort'] = ($aData['sort']);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$oSettings = new DataTableSettings($aClassAliases, $sTableId);\n\t\t\t$oSettings->iDefaultPageSize = $iPageSize;\n\t\t\t$oSettings->aColumns = $aColumns;\n\n\t\t\tif ($bSaveAsDefaults)\n\t\t\t{\n\t\t\t\tif ($sTableId != null)\n\t\t\t\t{\n\t\t\t\t\t$oCurrSettings = DataTableSettings::GetTableSettings($aClassAliases, $sTableId, true /* bOnlyTable */);\n\t\t\t\t\tif ($oCurrSettings)\n\t\t\t\t\t{\n\t\t\t\t\t\t$oCurrSettings->ResetToDefault(false); // Reset this table to the defaults\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$bRet = $oSettings->SaveAsDefault();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$bRet = $oSettings->Save();\n\t\t\t}\n\t\t\t$oPage->add($bRet ? 'Ok' : 'KO');\n\t\t\tbreak;\n\n\t\tcase 'datatable_reset_settings':\n\t\t\t$oPage->SetContentType('text/plain');\n\t\t\t$sTableId = utils::ReadParam('table_id', null, false, 'raw_data');\n\t\t\t$aClassAliases = utils::ReadParam('class_aliases', array(), false, 'raw_data');\n\t\t\t$bResetAll = (utils::ReadParam('defaults', 'true') == 'true');\n\n\t\t\t$oSettings = new DataTableSettings($aClassAliases, $sTableId);\n\t\t\t$bRet = $oSettings->ResetToDefault($bResetAll);\n\t\t\t$oPage->add($bRet ? 'Ok' : 'KO');\n\t\t\tbreak;\n\n\t\t// ui.searchformforeignkeys\n\t\tcase 'ShowModalSearchForeignKeys':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$sTitle = utils::ReadParam('sTitle', '', false, 'raw_data');\n\t\t\t$sTargetClass = utils::ReadParam('sTargetClass', '', false, 'class');\n\t\t\t$oWidget = new UISearchFormForeignKeys($sTargetClass, $iInputId);\n\t\t\t$oWidget->ShowModalSearchForeignKeys($oPage, $sTitle);\n\t\t\tbreak;\n\n\t\t// ui.searchformforeignkeys\n\t\tcase 'GetFullListForeignKeysFromSelection':\n\t\t\t$oPage->SetContentType('application/json');\n\t\t\t$oWidget = new UISearchFormForeignKeys($sClass);\n\t\t\t$oFullSetFilter = new DBObjectSearch($sClass);\n\t\t\t$oWidget->GetFullListForeignKeysFromSelection($oPage, $oFullSetFilter);\n\t\t\tbreak;\n\n\t\t// ui.searchformforeignkeys\n\t\tcase 'ListResultsSearchForeignKeys':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sTargetClass = utils::ReadParam('sTargetClass', '', false, 'class');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$sRemoteClass = utils::ReadParam('sRemoteClass', '', false, 'class');\n\t\t\t$oWidget = new UISearchFormForeignKeys($sTargetClass, $iInputId);\n\t\t\t$oWidget->ListResultsSearchForeignKeys($oPage, $sRemoteClass);\n\t\t\tbreak;\n\n\n\t\t// ui.linkswidget\n\t\tcase 'addObjects':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sAttCode = utils::ReadParam('sAttCode', '');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$sSuffix = utils::ReadParam('sSuffix', '');\n\t\t\t$bDuplicates = (utils::ReadParam('bDuplicates', 'false') == 'false') ? false : true;\n\t\t\t$sJson = utils::ReadParam('json', '', false, 'raw_data');\n\t\t\tif (!empty($sJson))\n\t\t\t{\n\t\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Search form: no current object\n\t\t\t\t$oObj = null;\n\t\t\t}\n\t\t\t$oWidget = new UILinksWidget($sClass, $sAttCode, $iInputId, $sSuffix, $bDuplicates);\n\t\t\t$oAppContext = new ApplicationContext();\n\t\t\t$aPrefillFormParam = array( 'user' => $_SESSION[\"auth_user\"],\n\t\t\t\t'context' => $oAppContext->GetAsHash(),\n\t\t\t\t'att_code' => $sAttCode,\n\t\t\t\t'origin' => 'console',\n\t\t\t\t'source_obj' => $oObj\n\t\t\t);\n\t\t\t$aAlreadyLinked = utils::ReadParam('aAlreadyLinked', array());\n\t\t\t$oWidget->GetObjectPickerDialog($oPage, $oObj, $sJson, $aAlreadyLinked, $aPrefillFormParam);\n\t\t\tbreak;\n\t\t\n\t\t// ui.linkswidget\n\t\tcase 'searchObjectsToAdd':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sRemoteClass = utils::ReadParam('sRemoteClass', '', false, 'class');\n\t\t\t$sAttCode = utils::ReadParam('sAttCode', '');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$sSuffix = utils::ReadParam('sSuffix', '');\n\t\t\t$bDuplicates = (utils::ReadParam('bDuplicates', 'false') == 'false') ? false : true;\n\t\t\t$aAlreadyLinked = utils::ReadParam('aAlreadyLinked', array());\n\t\t\t$oWidget = new UILinksWidget($sClass, $sAttCode, $iInputId, $sSuffix, $bDuplicates);\n\t\t\t$oWidget->SearchObjectsToAdd($oPage, $sRemoteClass, $aAlreadyLinked);\n\t\t\tbreak;\n\n\t\t//ui.linksdirectwidget\n\t\tcase 'createObject':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sClass = utils::ReadParam('class', '', false, 'class');\n\t\t\t$sRealClass = utils::ReadParam('real_class', '', false, 'class');\n\t\t\t$sAttCode = utils::ReadParam('att_code', '');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sJson = utils::ReadParam('json', '', false, 'raw_data');\n\t\t\tif (!empty($sJson))\n\t\t\t{\n\t\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t}\n\t\t\t$oObj =\t$oWizardHelper->GetTargetObject();\n\t\t\t$oWidget = new UILinksWidgetDirect($sClass, $sAttCode, $iInputId);\n\t\t\t$oWidget->GetObjectCreationDlg($oPage, $sRealClass, $oObj);\n\t\tbreak;\n\t\t\n\t\t// ui.linksdirectwidget\n\t\tcase 'getLinksetRow':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sClass = utils::ReadParam('class', '', false, 'class');\n\t\t\t$sRealClass = utils::ReadParam('real_class', '', false, 'class');\n\t\t\t$sAttCode = utils::ReadParam('att_code', '');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$iTempId = utils::ReadParam('tempId', '');\n\t\t\t$aValues = utils::ReadParam('values', array(), false, 'raw_data');\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$oWidget = new UILinksWidgetDirect($sClass, $sAttCode, $iInputId);\n\t\t\t$oPage->add($oWidget->GetRow($oPage, $sRealClass, $aValues, -$iTempId));\n\t\t\tbreak;\n\n\t\t// ui.linksdirectwidget\n\t\tcase 'selectObjectsToAdd':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sClass = utils::ReadParam('class', '', false, 'class');\n\t\t\t$aAlreadyLinked = utils::ReadParam('aAlreadyLinked', array());\n\t\t\t$sJson = utils::ReadParam('json', '', false, 'raw_data');\n\t\t\t$oObj = null;\n\t\t\tif ($sJson != '')\n\t\t\t{\n\t\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t}\n\t\t\t$sRealClass = utils::ReadParam('real_class', '', false, 'class');\n\t\t\t$sAttCode = utils::ReadParam('att_code', '');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$iCurrObjectId = utils::ReadParam('iObjId', 0);\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$oAppContext = new ApplicationContext();\n\t\t\t$aPrefillFormParam = array( 'user' => $_SESSION[\"auth_user\"],\n\t\t\t\t'context' => $oAppContext->GetAsHash(),\n\t\t\t\t'att_code' => $sAttCode,\n\t\t\t\t'origin' => 'console',\n\t\t\t\t'source_obj' => $oObj,\n\t\t\t);\n\t\t\t$aPrefillFormParam['dest_class'] = ($oObj === null ? '' : $oObj->Get($sAttCode)->GetClass());\n\t\t\t$oWidget = new UILinksWidgetDirect($sClass, $sAttCode, $iInputId);\n\t\t\t$oWidget->GetObjectsSelectionDlg($oPage, $oObj, $aAlreadyLinked, $aPrefillFormParam);\n\t\t\tbreak;\n\n\t\t// ui.linksdirectwidget\n\t\tcase 'searchObjectsToAdd2':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sClass = utils::ReadParam('class', '', false, 'class');\n\t\t\t$sRealClass = utils::ReadParam('real_class', '', false, 'class');\n\t\t\t$sAttCode = utils::ReadParam('att_code', '');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$aAlreadyLinked = utils::ReadParam('aAlreadyLinked', array());\n\t\t\t$sJson = utils::ReadParam('json', '', false, 'raw_data');\n\t\t\t$oObj = null;\n\t\t\tif ($sJson != '')\n\t\t\t{\n\t\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t}\n\t\t\t$oAppContext = new ApplicationContext();\n\t\t\t$aPrefillFormParam = array( 'user' => $_SESSION[\"auth_user\"],\n\t\t\t\t'context' => $oAppContext->GetAsHash(),\n\t\t\t\t'att_code' => $sAttCode,\n\t\t\t\t'origin' => 'console',\n\t\t\t\t'source_obj' => $oObj,\n\t\t\t);\n\t\t\t$aPrefillFormParam['dest_class'] = ($oObj === null ? '' : $oObj->Get($sAttCode)->GetClass());\n\t\t\t$oWidget = new UILinksWidgetDirect($sClass, $sAttCode, $iInputId);\n\t\t\t$oWidget->SearchObjectsToAdd($oPage, $sRealClass, $aAlreadyLinked, $oObj, $aPrefillFormParam);\n\t\t\tbreak;\n\n\t\t// ui.linksdirectwidget\n\t\tcase 'doAddObjects2':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sClass = utils::ReadParam('class', '', false, 'class');\n\t\t\t$sRealClass = utils::ReadParam('real_class', '', false, 'class');\n\t\t\t$sAttCode = utils::ReadParam('att_code', '');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$iCurrObjectId = utils::ReadParam('iObjId', 0);\n\t\t\t$sFilter = utils::ReadParam('filter', '', false, 'raw_data');\n\t\t\tif ($sFilter != '')\n\t\t\t{\n\t\t\t\t$oFullSetFilter = DBObjectSearch::unserialize($sFilter);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oLinksetDef = MetaModel::GetAttributeDef($sClass, $sAttCode);\n\t\t\t\t$valuesDef = $oLinksetDef->GetValuesDef();\n\t\t\t\tif ($valuesDef === null)\n\t\t\t\t{\n\t\t\t\t\t$oFullSetFilter = new DBObjectSearch($oLinksetDef->GetLinkedClass());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (!$valuesDef instanceof ValueSetObjects)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new Exception('Error: only ValueSetObjects are supported for \"allowed_values\" in AttributeLinkedSet ('.$this->sClass.'/'.$this->sAttCode.').');\n\t\t\t\t\t}\n\t\t\t\t\t$oFullSetFilter = DBObjectSearch::FromOQL($valuesDef->GetFilterExpression());\n\t\t\t\t}\n\t\t\t}\n\t\t\t$oWidget = new UILinksWidgetDirect($sClass, $sAttCode, $iInputId);\n\t\t\t$oWidget->DoAddObjects($oPage, $oFullSetFilter);\n\t\t\tbreak;\n\n\t\t////////////////////////////////////////////////////////////\n\n\t\t// ui.extkeywidget\n\t\tcase 'searchObjectsToSelect':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sTargetClass = utils::ReadParam('sTargetClass', '', false, 'class');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$sRemoteClass = utils::ReadParam('sRemoteClass', '', false, 'class');\n\t\t\t$sFilter = utils::ReadParam('sFilter', '', false, 'raw_data');\n\t\t\t$sJson = utils::ReadParam('json', '', false, 'raw_data');\n\t\t\t$sAttCode = utils::ReadParam('sAttCode', '');\n\t\t\t$bSearchMode = (utils::ReadParam('bSearchMode', 'false') == 'true');\n\t\t\tif (!empty($sJson))\n\t\t\t{\n\t\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Search form: no current object\n\t\t\t\t$oObj = null;\n\t\t\t}\n\t\t\t$oWidget = new UIExtKeyWidget($sTargetClass, $iInputId, $sAttCode, $bSearchMode);\n\t\t\t$oWidget->SearchObjectsToSelect($oPage, $sFilter, $sRemoteClass, $oObj);\n\t\t\tbreak;\n\n\t\t// ui.extkeywidget: autocomplete\n\t\tcase 'ac_extkey':\n\t\t\t$oPage->SetContentType('text/plain');\n\t\t\t$sTargetClass = utils::ReadParam('sTargetClass', '', false, 'class');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$sFilter = utils::ReadParam('sFilter', '', false, 'raw_data');\n\t\t\t$sJson = utils::ReadParam('json', '', false, 'raw_data');\n\t\t\t$sContains = utils::ReadParam('q', '', false, 'raw_data');\n\t\t\t$bSearchMode = (utils::ReadParam('bSearchMode', 'false') == 'true');\n\t\t\t$sOutputFormat = utils::ReadParam('sOutputFormat', UIExtKeyWidget::ENUM_OUTPUT_FORMAT_CSV, false, 'raw_data');\n            $sAutocompleteOperation = utils::ReadParam('sAutocompleteOperation', null, false, 'raw_data');\n\t\t\tif ($sContains != '')\n\t\t\t{\n\t\t\t\tif (!empty($sJson))\n\t\t\t\t{\n\t\t\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Search form: no current object\n\t\t\t\t\t$oObj = null;\n\t\t\t\t}\n\t\t\t\t$oWidget = new UIExtKeyWidget($sTargetClass, $iInputId, '', $bSearchMode);\n\t\t\t\t$oWidget->AutoComplete($oPage, $sFilter, $oObj, $sContains, $sOutputFormat, $sAutocompleteOperation);\n\t\t\t}\n\t\t\tbreak;\n\n\t\t// ui.extkeywidget\n\t\tcase 'objectSearchForm':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sTargetClass = utils::ReadParam('sTargetClass', '', false, 'class');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$sTitle = utils::ReadParam('sTitle', '', false, 'raw_data');\n\t\t\t$sAttCode = utils::ReadParam('sAttCode', '');\n\t\t\t$bSearchMode = (utils::ReadParam('bSearchMode', 'false') == 'true');\n\t\t\t$oWidget = new UIExtKeyWidget($sTargetClass, $iInputId, $sAttCode, $bSearchMode);\n\t\t\t$sJson = utils::ReadParam('json', '', false, 'raw_data');\n\t\t\tif (!empty($sJson))\n\t\t\t{\n\t\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Search form: no current object\n\t\t\t\t$oObj = null;\n\t\t\t}\n\t\t\t$oWidget->GetSearchDialog($oPage, $sTitle, $oObj);\n\t\t\tbreak;\n\n\t\t// ui.extkeywidget\n\t\tcase 'objectCreationForm':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t// Retrieving parameters\n\t\t\t$sTargetClass = utils::ReadParam('sTargetClass', '', false, 'class');\n\t        $iInputId = utils::ReadParam('iInputId', '');\n\t        $sAttCode = utils::ReadParam('sAttCode', '');\n\t        $sJson = utils::ReadParam('json', '', false, 'raw_data');\n\t\t\t// Building form, if target class is abstract we ask the user for the desired leaf class\n\t        $oWidget = new UIExtKeyWidget($sTargetClass, $iInputId, $sAttCode, false);\n\t        if(MetaModel::IsAbstract($sTargetClass))\n\t        {\n\t            $oWidget->GetClassSelectionForm($oPage);\n\t        }\n\t        else\n\t        {\n\t\t        $aPrefillFormParam = array();\n\t            if (!empty($sJson))\n\t            {\n\t\t            $oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t            $oObj = $oWizardHelper->GetTargetObject();\n\t\t            $oAppContext = new ApplicationContext();\n\t\t            $aPrefillFormParam = array( 'user' => $_SESSION[\"auth_user\"],\n\t\t\t                                    'context' => $oAppContext->GetAsHash(),\n\t\t\t                                    'att_code' => $sAttCode,\n\t\t                                        'source_obj' => $oObj,\n\t\t\t                                    'origin' => 'console'\n\t\t            );\n\t            }\n\t            else\n\t            {\n\t                // Search form: no current object\n\t                $oObj = null;\n\t            }\n\t            $oWidget->GetObjectCreationForm($oPage, $oObj, $aPrefillFormParam);\n\t        }\n\t\t\tbreak;\n\t\t\n\t\t// ui.extkeywidget\n\t\tcase 'doCreateObject':\n\t\t\t$oPage->SetContentType('application/json');\n\t\t\t$sTargetClass = utils::ReadParam('sTargetClass', '', false, 'class');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$sFormPrefix = utils::ReadParam('sFormPrefix', '');\n\t\t\t$sAttCode = utils::ReadParam('sAttCode', '');\n\t\t\t$oWidget = new UIExtKeyWidget($sTargetClass, $iInputId, $sAttCode, false);\n\t\t\t$aResult = $oWidget->DoCreateObject($oPage);\n\t\t\techo json_encode($aResult);\n\t\t\tbreak;\n\n\t\t// ui.extkeywidget\n\t\tcase 'getObjectName':\n\t\t\t$oPage->SetContentType('application/json');\n\t\t\t$sTargetClass = utils::ReadParam('sTargetClass', '', false, 'class');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$iObjectId = utils::ReadParam('iObjectId', '');\n\t\t\t$bSearchMode = (utils::ReadParam('bSearchMode', 'false') == 'true');\n\t\t\t$oWidget = new UIExtKeyWidget($sTargetClass, $iInputId, '', $bSearchMode);\n\t\t\t$sName = $oWidget->GetObjectName($iObjectId);\n\t\t\techo json_encode(array('name' => $sName));\n\t\t\tbreak;\n\n\t\t// ui.extkeywidget\n\t\tcase 'displayHierarchy':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sTargetClass = utils::ReadParam('sTargetClass', '', false, 'class');\n\t\t\t$sInputId = utils::ReadParam('sInputId', '');\n\t\t\t$sFilter = utils::ReadParam('sFilter', '', false, 'raw_data');\n\t\t\t$sJson = utils::ReadParam('json', '', false, 'raw_data');\n\t\t\t$currValue = utils::ReadParam('value', '');\n\t\t\t$bSearchMode = (utils::ReadParam('bSearchMode', 'false') == 'true');\n\t\t\tif (!empty($sJson))\n\t\t\t{\n\t\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Search form: no current object\n\t\t\t\t$oObj = null;\n\t\t\t}\n\t\t\t$oWidget = new UIExtKeyWidget($sTargetClass, $sInputId, '', $bSearchMode);\n\t\t\t$oWidget->DisplayHierarchy($oPage, $sFilter, $currValue, $oObj);\n\t\t\tbreak;\n\n\t\t////////////////////////////////////////////////////\n\n\t\t// ui.linkswidget\n\t\tcase 'doAddObjects':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sAttCode = utils::ReadParam('sAttCode', '');\n\t\t\t$iInputId = utils::ReadParam('iInputId', '');\n\t\t\t$sSuffix = utils::ReadParam('sSuffix', '');\n\t\t\t$sRemoteClass = utils::ReadParam('sRemoteClass', $sClass, false, 'class');\n\t\t\t$bDuplicates = (utils::ReadParam('bDuplicates', 'false') == 'false') ? false : true;\n\t\t\t$sJson = utils::ReadParam('json', '', false, 'raw_data');\n\t\t\t$iMaxAddedId = utils::ReadParam('max_added_id');\n\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t$oWidget = new UILinksWidget($sClass, $sAttCode, $iInputId, $sSuffix, $bDuplicates);\n\t\t\tif ($sFilter != '')\n\t\t\t{\n\t\t\t\t$oFullSetFilter = DBObjectSearch::unserialize($sFilter);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oFullSetFilter = new DBObjectSearch($sRemoteClass);\n\t\t\t}\n\t\t\t$oWidget->DoAddObjects($oPage, $iMaxAddedId, $oFullSetFilter, $oObj);\n\t\t\tbreak;\n\n\t\t////////////////////////////////////////////////////////////\n\n\t\tcase 'wizard_helper_preview':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sJson = utils::ReadParam('json_obj', '', false, 'raw_data');\n\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t$oObj->DisplayBareProperties($oPage);\n\t\t\tbreak;\n\n\t\tcase 'wizard_helper':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sJson = utils::ReadParam('json_obj', '', false, 'raw_data');\n\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t$sClass = $oWizardHelper->GetTargetClass();\n\t\t\tforeach($oWizardHelper->GetFieldsForDefaultValue() as $sAttCode)\n\t\t\t{\n\t\t\t\t$oAttDef = MetaModel::GetAttributeDef($sClass, $sAttCode);\n\t\t\t\t$defaultValue = $oAttDef->GetDefaultValue($oObj);\n\t\t\t\t$oWizardHelper->SetDefaultValue($sAttCode, $defaultValue);\n\t\t\t\t$oObj->Set($sAttCode, $defaultValue);\n\t\t\t}\n\t\t\t$sFormPrefix = $oWizardHelper->GetFormPrefix();\n\t\t\t$aExpectedAttributes = ($oWizardHelper->GetStimulus() === null) ? array() : $oObj->GetTransitionAttributes($oWizardHelper->GetStimulus(), $oWizardHelper->GetInitialState());\n\t\t\tforeach($oWizardHelper->GetFieldsForAllowedValues() as $sAttCode)\n\t\t\t{\n\t\t\t\t$sId = $oWizardHelper->GetIdForField($sAttCode);\n\t\t\t\tif ($sId != '')\n\t\t\t\t{\n\t\t\t\t\tif (array_key_exists($sAttCode, $aExpectedAttributes))\n\t\t\t\t\t{\n\t\t\t\t\t\t$iFlags = $aExpectedAttributes[$sAttCode];\n\t\t\t\t\t}\n\t\t\t\t\telseif ($oObj->IsNew())\n\t\t\t\t\t{\n\t\t\t\t\t\t$iFlags = $oObj->GetInitialStateAttributeFlags($sAttCode);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$iFlags = $oObj->GetAttributeFlags($sAttCode);\n\t\t\t\t\t}\n\t\t\t\t\tif ($iFlags & OPT_ATT_READONLY)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sHTMLValue = \"<span id=\\\"field_{$sId}\\\">\".$oObj->GetAsHTML($sAttCode);\n\t\t\t\t\t\t$oWizardHelper->SetAllowedValuesHtml($sAttCode, $sHTMLValue);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// It may happen that the field we'd like to update does not\n\t\t\t\t\t\t// exist in the form. For example, if the field should be hidden/read-only\n\t\t\t\t\t\t// in the current state of the object\n\t\t\t\t\t\t$value = $oObj->Get($sAttCode);\n\t\t\t\t\t\t$displayValue = $oObj->GetEditValue($sAttCode);\n\t\t\t\t\t\t$oAttDef = MetaModel::GetAttributeDef($sClass, $sAttCode);\n\t\t\t\t\t\tif (!$oAttDef->IsWritable())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Even non-writable fields (like AttributeExternal) can be refreshed\n\t\t\t\t\t\t\t$sHTMLValue = $oObj->GetAsHTML($sAttCode);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$iFlags = MetaModel::GetAttributeFlags($sClass, $oObj->GetState(), $sAttCode);\n\t\t\t\t\t\t\t$sHTMLValue = cmdbAbstractObject::GetFormElementForField($oPage, $sClass, $sAttCode, $oAttDef, $value, $displayValue, $sId, '', $iFlags, array('this' => $oObj, 'formPrefix' => $sFormPrefix), false);\n\t\t\t\t\t\t\t// Make sure that we immediately validate the field when we reload it\n\t\t\t\t\t\t\t$oPage->add_ready_script(\"$('#$sId').trigger('validate');\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$oWizardHelper->SetAllowedValuesHtml($sAttCode, $sHTMLValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$oPage->add_script(\"oWizardHelper{$sFormPrefix}.m_oData=\".$oWizardHelper->ToJSON().\";\\noWizardHelper{$sFormPrefix}.UpdateFields();\\n\");\n\t\t\tbreak;\n\n\t\tcase 'obj_creation_form':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sJson = utils::ReadParam('json_obj', '', false, 'raw_data');\n\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\t\t\t$sClass = $oWizardHelper->GetTargetClass();\n\t\t\t$sTargetState = utils::ReadParam('target_state', '');\n\t\t\t$iTransactionId = utils::ReadParam('transaction_id', '', false, 'transaction_id');\n\t\t\t$oObj->Set(MetaModel::GetStateAttributeCode($sClass), $sTargetState);\n\t\t\tcmdbAbstractObject::DisplayCreationForm($oPage, $sClass, $oObj, array(), array('action' => utils::GetAbsoluteUrlAppRoot().'pages/UI.php', 'transaction_id' => $iTransactionId));\n\t\t\tbreak;\n\n\t\t// DisplayBlock\n\t\tcase 'ajax':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\tif ($sFilter != \"\")\n\t\t\t{\n\t\t\t\t$sExtraParams = stripslashes(utils::ReadParam('extra_params', '', false, 'raw_data'));\n\t\t\t\t$aExtraParams = array();\n\t\t\t\tif (!empty($sExtraParams))\n\t\t\t\t{\n\t\t\t\t\t$aExtraParams = json_decode(str_replace(\"'\", '\"', $sExtraParams), true /* associative array */);\n\t\t\t\t}\n\t\t\t\t// Restore the app context from the ExtraParams\n\t\t\t\t$oAppContext = new ApplicationContext(false); // false => don't read the context yet !\n\t\t\t\t$aContext = array();\n\t\t\t\tforeach($oAppContext->GetNames() as $sName)\n\t\t\t\t{\n\t\t\t\t\t$sParamName = 'c['.$sName.']';\n\t\t\t\t\tif (isset($aExtraParams[$sParamName]))\n\t\t\t\t\t{\n\t\t\t\t\t\t$aContext[$sName] = $aExtraParams[$sParamName];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$_REQUEST['c'] = $aContext;\n\t\t\t\tif ($sEncoding == 'oql')\n\t\t\t\t{\n\t\t\t\t\t$oFilter = DBSearch::FromOQL($sFilter);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t$oFilter = DBSearch::unserialize($sFilter);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (CoreException $e)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sFilter = utils::HtmlEntities($sFilter);\n\t\t\t\t\t\t$oPage->p(\"Invalid query (invalid filter) : <code>$sFilter</code>\");\n\t\t\t\t\t\tIssueLog::Error(\"ajax.render operation='ajax', invalid DBSearch filter param : $sFilter\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$oDisplayBlock = new DisplayBlock($oFilter, $sStyle, false);\n\t\t\t\t$aExtraParams['display_limit'] = true;\n\t\t\t\t$aExtraParams['truncated'] = true;\n\t\t\t\t$oDisplayBlock->RenderContent($oPage, $aExtraParams);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oPage->p(\"Invalid query (empty filter).\");\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'displayCSVHistory':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$bShowAll = (utils::ReadParam('showall', 'false') == 'true');\n\t\t\tBulkChange::DisplayImportHistory($oPage, true, $bShowAll);\n\t\t\tbreak;\n\n\t\tcase 'details':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$key = utils::ReadParam('id', 0);\n\t\t\t$oFilter = new DBObjectSearch($sClass);\n\t\t\t$oFilter->AddCondition('id', $key, '=');\n\t\t\t$oDisplayBlock = new DisplayBlock($oFilter, 'details', false);\n\t\t\t$oDisplayBlock->RenderContent($oPage);\n\t\t\tbreak;\n\n\t\tcase 'pie_chart':\n\t\t\t$oPage->SetContentType('application/json');\n\t\t\t$sGroupBy = utils::ReadParam('group_by', '');\n\t\t\tif ($sFilter != '')\n\t\t\t{\n\t\t\t\tif ($sEncoding == 'oql')\n\t\t\t\t{\n\t\t\t\t\t$oFilter = DBSearch::FromOQL($sFilter);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$oFilter = DBSearch::unserialize($sFilter);\n\t\t\t\t}\n\t\t\t\t$oDisplayBlock = new DisplayBlock($oFilter, 'pie_chart_ajax', false);\n\t\t\t\t$oDisplayBlock->RenderContent($oPage, array('group_by' => $sGroupBy));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\n\t\t\t\t$oPage->add(\"<chart>\\n<chart_type>3d pie</chart_type><!-- empty filter '$sFilter' --></chart>\\n.\");\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'chart':\n\t\t\t// Workaround for IE8 + IIS + HTTPS\n\t\t\t// See TRAC #363, fix described here: http://forums.codecharge.com/posts.php?post_id=97771\n\t\t\t$oPage->add_header(\"Expires: Fri, 17 Jul 1970 05:00:00 GMT\");\n\t\t\t$oPage->add_header(\"Cache-Control: cache, must-revalidate\");\n\t\t\t$oPage->add_header(\"Pragma: public\");\n\n\t\t\t$aParams = utils::ReadParam('params', array(), false, 'raw_data');\n\t\t\tif ($sFilter != '')\n\t\t\t{\n\t\t\t\t$oFilter = DBSearch::unserialize($sFilter);\n\t\t\t\t$oDisplayBlock = new DisplayBlock($oFilter, 'chart_ajax', false);\n\t\t\t\t$oDisplayBlock->RenderContent($oPage, $aParams);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\n\t\t\t\t$oPage->add(\"<chart>\\n<chart_type>3d pie</chart_type><!-- empty filter '$sFilter' --></chart>\\n.\");\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'modal_details':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$key = utils::ReadParam('id', 0);\n\t\t\t$oFilter = new DBObjectSearch($sClass);\n\t\t\t$oFilter->AddCondition('id', $key, '=');\n\t\t\t$oPage->Add(\"<p style=\\\"width:100%; margin-top:-5px;padding:3px; background-color:#33f; color:#fff;\\\">Object Details</p>\\n\");\n\t\t\t$oDisplayBlock = new DisplayBlock($oFilter, 'details', false);\n\t\t\t$oDisplayBlock->RenderContent($oPage);\n\t\t\t$oPage->Add(\"<input type=\\\"button\\\" class=\\\"jqmClose\\\" value=\\\" Close \\\" />\\n\");\n\t\t\tbreak;\n\n\t\tcase 'link':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sClass = utils::ReadParam('sclass', 'logInfra', false, 'class');\n\t\t\t$sAttCode = utils::ReadParam('attCode', 'name');\n\t\t\t//$sOrg = utils::ReadParam('org_id', '');\n\t\t\t$sName = utils::ReadParam('q', '');\n\t\t\t$iMaxCount = utils::ReadParam('max', 30);\n\t\t\t$iCount = 0;\n\t\t\t$oFilter = new DBObjectSearch($sClass);\n\t\t\t$oFilter->AddCondition($sAttCode, $sName, 'Begins with');\n\t\t\t//$oFilter->AddCondition('org_id', $sOrg, '=');\n\t\t\t$oSet = new CMDBObjectSet($oFilter, array($sAttCode => true));\n\t\t\twhile (($iCount < $iMaxCount) && ($oObj = $oSet->fetch()))\n\t\t\t{\n\t\t\t\t$oPage->add($oObj->GetAsHTML($sAttCode).\"|\".$oObj->GetKey().\"\\n\");\n\t\t\t\t$iCount++;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'combo_options':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$oFilter = DBSearch::FromOQL($sFilter);\n\t\t\t$oSet = new CMDBObjectSet($oFilter);\n\t\t\twhile ($oObj = $oSet->fetch())\n\t\t\t{\n\t\t\t\t$oPage->add('<option title=\"Here is more information...\" value=\"'.$oObj->GetKey().'\">'.$oObj->GetName().'</option>');\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'display_document':\n\t\t\t$id = utils::ReadParam('id', '');\n\t\t\t$sField = utils::ReadParam('field', '');\n\t\t\tif (!empty($sClass) && ($sClass != 'InlineImage') && !empty($id) && !empty($sField))\n\t\t\t{\n\t\t\t\t// Resets header, see N\u00b03416\n\t\t\t\t$oPage->add_header('X-Frame-Options:');\n\t\t\t\t// N\u00b04129 - Prevent XSS attacks & other script executions\n\t\t\t\tif (utils::GetConfig()->Get('security.disable_inline_documents_sandbox') === false) {\n\t\t\t\t\t$oPage->add_header('Content-Security-Policy: sandbox;');\n\t\t\t\t}\n\t\t\t\tormDocument::DownloadDocument($oPage, $sClass, $id, $sField, 'inline');\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'search_form':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sClass = utils::ReadParam('className', '', false, 'class');\n\t\t\t$sRootClass = utils::ReadParam('baseClass', '', false, 'class');\n\t\t\t$currentId = utils::ReadParam('currentId', '');\n\t\t\t$sTableId = utils::ReadParam('_table_id_', null, false, 'raw_data');\n\t\t\t$sAction = utils::ReadParam('action', '');\n\t\t\t$sSelectionMode = utils::ReadParam('selection_mode', null,false,'raw_data');\n\t\t\t$sResultListOuterSelector = utils::ReadParam('result_list_outer_selector', null,false,'raw_data');\n\t\t\t$scssCount = utils::ReadParam('css_count', null,false,'raw_data');\n\t\t\t$sTableInnerId = utils::ReadParam('table_inner_id', null,false,'raw_data');\n\n\t\t\t$oFilter = new DBObjectSearch($sClass);\n\t\t\t$oSet = new CMDBObjectSet($oFilter);\n\t\t\t$sHtml = cmdbAbstractObject::GetSearchForm($oPage, $oSet, array('currentId' => $currentId,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'baseClass' => $sRootClass,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'action' => $sAction,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'table_id' => $sTableId,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'selection_mode' => $sSelectionMode,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'result_list_outer_selector' => $sResultListOuterSelector,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'cssCount' => $scssCount,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'table_inner_id' => $sTableInnerId));\n\t\t\t$oPage->add($sHtml);\n\t\t\tbreak;\n\n\t\tcase 'set_pref':\n\t\t\t$sCode = utils::ReadPostedParam('code', '');\n\t\t\t$sValue = utils::ReadPostedParam('value', '', 'raw_data');\n\t\t\tappUserPreferences::SetPref($sCode, $sValue);\n\t\t\tbreak;\n\n\t\tcase 'erase_all_pref':\n\t\t\t// Can be useful in case a user got some corrupted prefs...\n\t\t\tappUserPreferences::ClearPreferences();\n\t\t\tbreak;\n\n\t\tcase 'on_form_cancel':\n\t\t\t// Called when a creation/modification form is cancelled by the end-user\n\t\t\t// Let's take this opportunity to inform the plug-ins so that they can perform some cleanup\n\t\t\t$iTransactionId = utils::ReadParam('transaction_id', 0, false, 'transaction_id');\n\t\t\t$sTempId = utils::GetUploadTempId($iTransactionId);\n\t\t\tInlineImage::OnFormCancel($sTempId);\n\t\t\t/** @var \\iApplicationUIExtension $oExtensionInstance */\n\t\t\tforeach(MetaModel::EnumPlugins('iApplicationUIExtension') as $oExtensionInstance)\n\t\t\t{\n\t\t\t\t$oExtensionInstance->OnFormCancel($sTempId);\n\t\t\t}\n\t\t\t$sObjClass = utils::ReadParam('obj_class', '', false, 'class');\n\t\t\t$iObjKey = (int)utils::ReadParam('obj_key', 0, false, 'integer');\n\t\t\t$sToken = utils::ReadParam('token', 0, false, 'raw_data');\n\t\t\tif (($sObjClass != '') && ($iObjKey != 0) && ($sToken != ''))\n\t\t\t{\n\t\t\t\t$bReleaseLock = iTopOwnershipLock::ReleaseLock($sObjClass, $iObjKey, $sToken);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'dashboard':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$id = (int)utils::ReadParam('id', 0);\n\t\t\t$sAttCode = utils::ReadParam('attcode', '');\n\t\t\t/** @var \\cmdbAbstractObject $oObj */\n\t\t\t$oObj = MetaModel::GetObject($sClass, $id);\n\t\t\t$oObj->DisplayDashboard($oPage, $sAttCode);\n\t\t\tbreak;\n\n\t\tcase 'export_dashboard':\n\t\t\t$sDashboardId = utils::ReadParam('id', '', false, 'raw_data');\n\t\t\t$sDashboardFile = utils::ReadParam('file', '', false, 'raw_data');\n\t\t\t$oDashboard = RuntimeDashboard::GetDashboard($sDashboardFile, $sDashboardId);\n\t\t\tif (!is_null($oDashboard))\n\t\t\t{\n\t\t\t\t$oPage->TrashUnexpectedOutput();\n\t\t\t\t$oPage->SetContentType('text/xml');\n\t\t\t\t$oPage->SetContentDisposition('attachment', 'dashboard_'.$oDashboard->GetTitle().'.xml');\n\t\t\t\t$oPage->add($oDashboard->ToXml());\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'import_dashboard':\n\t\t\t$sTransactionId = utils::ReadParam('transaction_id', '', false, 'transaction_id');\n\t\t\tif (!utils::IsTransactionValid($sTransactionId, true))\n\t\t\t{\n\t\t\t\tthrow new SecurityException('ajax.render.php import_dashboard : invalid transaction_id');\n\t\t\t}\n\t\t\t$sDashboardId = utils::ReadParam('id', '', false, 'raw_data');\n\t\t\t$sDashboardFile = utils::ReadParam('file', '', false, 'raw_data');\n\t\t\t$oDashboard = RuntimeDashboard::GetDashboard($sDashboardFile, $sDashboardId);\n\t\t\t$aResult = array('error' => '');\n\t\t\tif (!is_null($oDashboard))\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t$oDoc = utils::ReadPostedDocument('dashboard_upload_file');\n\t\t\t\t\t$oDashboard->FromXml($oDoc->GetData());\n\t\t\t\t\t$oDashboard->Save();\n\t\t\t\t} catch (DOMException $e)\n\t\t\t\t{\n\t\t\t\t\t$aResult = array('error' => Dict::S('UI:Error:InvalidDashboardFile'));\n\t\t\t\t} catch (Exception $e)\n\t\t\t\t{\n\t\t\t\t\t$aResult = array('error' => $e->getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$aResult['error'] = 'Dashboard id=\"'.$sDashboardId.'\" not found.';\n\t\t\t}\n\t\t\t$oPage->add(json_encode($aResult));\n\t\t\tbreak;\n\n\t\tcase 'toggle_dashboard':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sDashboardId = utils::ReadParam('dashboard_id', '', false, 'raw_data');\n\n\t\t\t$bStandardSelected = appUserPreferences::GetPref('display_original_dashboard_'.$sDashboardId, false);\n\t\t\tappUserPreferences::UnsetPref('display_original_dashboard_'.$sDashboardId);\n\t\t\tappUserPreferences::SetPref('display_original_dashboard_'.$sDashboardId, !$bStandardSelected);\n\n\t\t\t$aExtraParams = utils::ReadParam('extra_params', array(), false, 'raw_data');\n\t\t\t$sDashboardFile = utils::ReadParam('file', '', false, 'raw_data');\n\t\t\t$sReloadURL = utils::ReadParam('reload_url', '', false, 'raw_data');\n\t\t\t$oDashboard = RuntimeDashboard::GetDashboard($sDashboardFile, $sDashboardId);\n\t\t\t$aResult = array('error' => '');\n\t\t\tif (!is_null($oDashboard))\n\t\t\t{\n\t\t\t\tif (!empty($sReloadURL))\n\t\t\t\t{\n\t\t\t\t\t$oDashboard->SetReloadURL($sReloadURL);\n\t\t\t\t}\n\t\t\t\t$oDashboard->Render($oPage, false, $aExtraParams);\n\t\t\t}\n\t\t\t$oPage->add_ready_script(\"$('.dashboard_contents table.listResults').tableHover(); $('.dashboard_contents table.listResults').tablesorter( { widgets: ['myZebra', 'truncatedList']} );\");\n\t\t\tbreak;\n\n\t\tcase 'reload_dashboard':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$sDashboardId = utils::ReadParam('dashboard_id', '', false, 'raw_data');\n\t\t\t$aExtraParams = utils::ReadParam('extra_params', array(), false, 'raw_data');\n\t\t\t$sDashboardFile = utils::ReadParam('file', '', false, 'raw_data');\n\t\t\t$sReloadURL = utils::ReadParam('reload_url', '', false, 'raw_data');\n\t\t\t$oDashboard = RuntimeDashboard::GetDashboard($sDashboardFile, $sDashboardId);\n\t\t\t$aResult = array('error' => '');\n\t\t\tif (!is_null($oDashboard))\n\t\t\t{\n\t\t\t\tif (!empty($sReloadURL))\n\t\t\t\t{\n\t\t\t\t\t$oDashboard->SetReloadURL($sReloadURL);\n\t\t\t\t}\n\t\t\t\t$oDashboard->Render($oPage, false, $aExtraParams);\n\t\t\t}\n\t\t\t$oPage->add_ready_script(\"$('.dashboard_contents table.listResults').tableHover(); $('.dashboard_contents table.listResults').tablesorter( { widgets: ['myZebra', 'truncatedList']} );\");\n\t\t\tbreak;\n\n\t\tcase 'save_dashboard':\n\t\t\t$sDashboardId = utils::ReadParam('dashboard_id', '', false, 'raw_data');\n\t\t\t$aExtraParams = utils::ReadParam('extra_params', array(), false, 'raw_data');\n\t\t\t$sReloadURL = utils::ReadParam('reload_url', '', false, 'raw_data');\n\t\t\t$sJSExtraParams = json_encode($aExtraParams);\n\t\t\t$aParams = array();\n\t\t\t$aParams['layout_class'] = utils::ReadParam('layout_class', '');\n\t\t\t$aParams['title'] = utils::ReadParam('title', '', false, 'raw_data');\n\t\t\t$aParams['auto_reload'] = utils::ReadParam('auto_reload', false);\n\t\t\t$aParams['auto_reload_sec'] = utils::ReadParam('auto_reload_sec', 300);\n\t\t\t$aParams['cells'] = utils::ReadParam('cells', array(), false, 'raw_data');\n\t\t\t$oDashboard = new RuntimeDashboard($sDashboardId);\n\t\t\t$oDashboard->FromParams($aParams);\n\t\t\t$oDashboard->Save();\n\t\t\t$sDashboardFile = addslashes(utils::ReadParam('file', '', false, 'raw_data'));\n\t\t\t$sDivId = preg_replace('/[^a-zA-Z0-9_]/', '', $sDashboardId);\n\t\t\t// trigger a reload of the current page since the dashboard just changed\n\t\t\t$oPage->add_script(\n<<<EOF\n\t\t\t$('.dashboard_contents#$sDivId').block();\n\t\t\t$.post(GetAbsoluteUrlAppRoot()+'pages/ajax.render.php',\n\t\t\t   { operation: 'reload_dashboard', dashboard_id: '$sDashboardId', file: '$sDashboardFile', extra_params: $sJSExtraParams, reload_url: '$sReloadURL'},\n\t\t\t   function(data){\n\t\t\t\t $('.dashboard_contents#$sDivId').html(data);\n\t\t\t\t $('.dashboard_contents#$sDivId').unblock();\n\t\t\t\t}\n\t\t\t );\nEOF\n\t\t\t);\n\t\t\tbreak;\n\n\t\tcase 'revert_dashboard':\n\t\t\t$sDashboardId = utils::ReadParam('dashboard_id', '', false, 'raw_data');\n\t\t\t$sReloadURL = utils::ReadParam('reload_url', '', false, 'raw_data');\n\t\t\tappUserPreferences::UnsetPref('display_original_dashboard_'.$sDashboardId);\n\t\t\t$oDashboard = new RuntimeDashboard($sDashboardId);\n\t\t\t$oDashboard->Revert();\n\t\t\t$sFile = addslashes($oDashboard->GetDefinitionFile());\n\t\t\t$sDivId = preg_replace('/[^a-zA-Z0-9_]/', '', $sDashboardId);\n\t\t\t// trigger a reload of the current page since the dashboard just changed\n\t\t\t$oPage->add_script(\n<<<EOF\n\t\t\t$('.dashboard_contents#$sDivId').block();\n\t\t\t$.post(GetAbsoluteUrlAppRoot()+'pages/ajax.render.php',\n\t\t\t   { operation: 'reload_dashboard', dashboard_id: '$sDashboardId', file: '$sFile', reload_url: '$sReloadURL'},\n\t\t\t   function(data){\n\t\t\t\t $('.dashboard_contents#$sDivId').html(data);\n\t\t\t\t $('.dashboard_contents#$sDivId').unblock();\n\t\t\t\t}\n\t\t\t );\nEOF\n\t\t\t);\n\t\t\tbreak;\n\n\t\tcase 'render_dashboard':\n\t\t\t$sDashboardId = utils::ReadParam('dashboard_id', '', false, 'raw_data');\n\t\t\t$aExtraParams = utils::ReadParam('extra_params', array(), false, 'raw_data');\n\t\t\t$aParams = array();\n\t\t\t$aParams['layout_class'] = utils::ReadParam('layout_class', '');\n\t\t\t$aParams['title'] = utils::ReadParam('title', '', false, 'raw_data');\n\t\t\t$aParams['cells'] = utils::ReadParam('cells', array(), false, 'raw_data');\n\t\t\t$aParams['auto_reload'] = utils::ReadParam('auto_reload', false);\n\t\t\t$aParams['auto_reload_sec'] = utils::ReadParam('auto_reload_sec', 300);\n\t\t\t$sReloadURL = utils::ReadParam('reload_url', '', false, 'raw_data');\n\t\t\t$oDashboard = new RuntimeDashboard($sDashboardId);\n\t\t\t$oDashboard->FromParams($aParams);\n\t\t\t$oDashboard->SetReloadURL($sReloadURL);\n\t\t\t$oDashboard->Render($oPage, true /* bEditMode */, $aExtraParams);\n\t\t\tbreak;\n\n\t\tcase 'dashboard_editor':\n\t\t\t$sId = utils::ReadParam('id', '', false, 'context_param');\n\t\t\t$aExtraParams = utils::ReadParam('extra_params', array(), false, 'raw_data');\n\t\t\t$sDashboardFile = utils::ReadParam('file', '', false, 'raw_data');\n\t\t\t$sReloadURL = utils::ReadParam('reload_url', '', false, 'raw_data');\n\t\t\t$oDashboard = RuntimeDashboard::GetDashboard($sDashboardFile, $sId);\n\t\t\tif (!is_null($oDashboard))\n\t\t\t{\n\t\t\t\tif (!empty($sReloadURL))\n\t\t\t\t{\n\t\t\t\t\t$oDashboard->SetReloadURL($sReloadURL);\n\t\t\t\t}\n\t\t\t\t$oDashboard->RenderEditor($oPage, $aExtraParams);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'new_dashlet':\n\t\t\trequire_once(APPROOT.'application/forms.class.inc.php');\n\t\t\trequire_once(APPROOT.'application/dashlet.class.inc.php');\n\t\t\t$sDashletClass = utils::ReadParam('dashlet_class', '');\n\t\t\t$sDashletId = utils::ReadParam('dashlet_id', '', false, 'raw_data');\n\t\t\tif (is_subclass_of($sDashletClass, 'Dashlet'))\n\t\t\t{\n\t\t\t\t$oDashlet = new $sDashletClass(new ModelReflectionRuntime(), $sDashletId);\n\t\t\t\t$offset = $oPage->start_capture();\n\t\t\t\t$oDashlet->DoRender($oPage, true /* bEditMode */, false /* bEnclosingDiv */);\n\t\t\t\t$sHtml = addslashes($oPage->end_capture($offset));\n\t\t\t\t$sHtml = str_replace(\"\\n\", '', $sHtml);\n\t\t\t\t$sHtml = str_replace(\"\\r\", '', $sHtml);\n\t\t\t\t$oPage->add_script(\"$('#dashlet_$sDashletId').html('$sHtml');\"); // in ajax web page add_script has the same effect as add_ready_script\n\t\t\t\t// but is executed BEFORE all 'ready_scripts'\n\t\t\t\t$oForm = $oDashlet->GetForm(); // Rebuild the form since the values/content changed\n\t\t\t\t$oForm->SetSubmitParams(utils::GetAbsoluteUrlAppRoot().'pages/ajax.render.php', array('operation' => 'update_dashlet_property'));\n\t\t\t\t$sHtml = addslashes($oForm->RenderAsPropertySheet($oPage, true /* bReturnHtml */, '.itop-dashboard'));\n\t\t\t\t$sHtml = str_replace(\"\\n\", '', $sHtml);\n\t\t\t\t$sHtml = str_replace(\"\\r\", '', $sHtml);\n\t\t\t\t$oPage->add_script(\"$('#dashlet_properties_$sDashletId').html('$sHtml')\"); // in ajax web page add_script has the same effect as add_ready_script\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   // but is executed BEFORE all 'ready_scripts'\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'update_dashlet_property':\n\t\t\trequire_once(APPROOT.'application/forms.class.inc.php');\n\t\t\trequire_once(APPROOT.'application/dashlet.class.inc.php');\n\t\t\t$aExtraParams = utils::ReadParam('extra_params', array(), false, 'raw_data');\n\t\t\t$aParams = utils::ReadParam('params', '', false, 'raw_data');\n\t\t\t$sDashletClass = $aParams['attr_dashlet_class'];\n\t\t\t$sDashletType = $aParams['attr_dashlet_type'];\n\t\t\t$sDashletId = $aParams['attr_dashlet_id'];\n\t\t\t$aUpdatedProperties = $aParams['updated']; // Code of the changed properties as an array: 'attr_xxx', 'attr_xxy', etc...\n\t\t\t$aPreviousValues = $aParams['previous_values']; // hash array: 'attr_xxx' => 'old_value'\n\t\t\tif (is_subclass_of($sDashletClass, 'Dashlet'))\n\t\t\t{\n\t\t\t\t/** @var \\Dashlet $oDashlet */\n\t\t\t\t$oDashlet = new $sDashletClass(new ModelReflectionRuntime(), $sDashletId);\n\t\t\t\t$oDashlet->SetDashletType($sDashletType);\n\t\t\t\t$oForm = $oDashlet->GetForm();\n\t\t\t\t$aValues = $oForm->ReadParams(); // hash array: 'xxx' => 'new_value'\n\n\t\t\t\t$aCurrentValues = $aValues;\n\t\t\t\t$aUpdatedDecoded = array();\n\t\t\t\tforeach($aUpdatedProperties as $sProp)\n\t\t\t\t{\n\t\t\t\t\t$sDecodedProp = str_replace('attr_', '', $sProp); // Remove the attr_ prefix\n\t\t\t\t\t$aCurrentValues[$sDecodedProp] = (isset($aPreviousValues[$sProp]) ? $aPreviousValues[$sProp] : ''); // Set the previous value\n\t\t\t\t\t$aUpdatedDecoded[] = $sDecodedProp;\n\t\t\t\t}\n\n\t\t\t\t$oDashlet->FromParams($aCurrentValues);\n\t\t\t\t$sPrevClass = get_class($oDashlet);\n\t\t\t\t$oDashlet = $oDashlet->Update($aValues, $aUpdatedDecoded);\n\t\t\t\t$sNewClass = get_class($oDashlet);\n\t\t\t\tif ($sNewClass != $sPrevClass)\n\t\t\t\t{\n\t\t\t\t\t$oPage->add_ready_script(\"$('#dashlet_$sDashletId').dashlet('option', {dashlet_class: '$sNewClass'});\");\n\t\t\t\t}\n\t\t\t\tif ($oDashlet->IsRedrawNeeded())\n\t\t\t\t{\n\t\t\t\t\t$offset = $oPage->start_capture();\n\t\t\t\t\t$oDashlet->DoRender($oPage, true /* bEditMode */, false /* bEnclosingDiv */, $aExtraParams);\n\t\t\t\t\t$sHtml = addslashes($oPage->end_capture($offset));\n\t\t\t\t\t$sHtml = str_replace(\"\\n\", '', $sHtml);\n\t\t\t\t\t$sHtml = str_replace(\"\\r\", '', $sHtml);\n\n\t\t\t\t\t$oPage->add_script(\"$('#dashlet_$sDashletId').html('$sHtml');\"); // in ajax web page add_script has the same effect as add_ready_script\n\t\t\t\t\t// but is executed BEFORE all 'ready_scripts'\n\t\t\t\t}\n\t\t\t\tif ($oDashlet->IsFormRedrawNeeded())\n\t\t\t\t{\n\t\t\t\t\t$oForm = $oDashlet->GetForm(); // Rebuild the form since the values/content changed\n\t\t\t\t\t$oForm->SetSubmitParams(utils::GetAbsoluteUrlAppRoot().'pages/ajax.render.php', array('operation' => 'update_dashlet_property', 'extra_params' => $aExtraParams));\n\t\t\t\t\t$sHtml = addslashes($oForm->RenderAsPropertySheet($oPage, true /* bReturnHtml */, '.itop-dashboard'));\n\t\t\t\t\t$sHtml = str_replace(\"\\n\", '', $sHtml);\n\t\t\t\t\t$sHtml = str_replace(\"\\r\", '', $sHtml);\n\t\t\t\t\t$oPage->add_script(\"$('#dashlet_properties_$sDashletId').html('$sHtml')\"); // in ajax web page add_script has the same effect as add_ready_script\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   // but is executed BEFORE all 'ready_scripts'\n\t\t\t\t\t// but is executed BEFORE all 'ready_scripts'\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'dashlet_creation_dlg':\n\t\t\t$sOQL = utils::ReadParam('oql', '', false, 'raw_data');\n\t\t\tRuntimeDashboard::GetDashletCreationDlgFromOQL($oPage, $sOQL);\n\t\t\tbreak;\n\n\t\tcase 'add_dashlet':\n\t\t\t$oForm = RuntimeDashboard::GetDashletCreationForm();\n\t\t\t$aValues = $oForm->ReadParams();\n\n\t\t\t$sDashletClass = $aValues['dashlet_class'];\n\t\t\t$sMenuId = $aValues['menu_id'];\n\n\t\t\tif (is_subclass_of($sDashletClass, 'Dashlet'))\n\t\t\t{\n\t\t\t\t$oDashlet = new $sDashletClass(new ModelReflectionRuntime(), 0);\n\t\t\t\t$oDashlet->FromParams($aValues);\n\n\t\t\t\tApplicationMenu::LoadAdditionalMenus();\n\t\t\t\t$index = ApplicationMenu::GetMenuIndexById($sMenuId);\n\t\t\t\t$oMenu = ApplicationMenu::GetMenuNode($index);\n\t\t\t\t$oMenu->AddDashlet($oDashlet);\n\t\t\t\t// navigate to the dashboard page\n\t\t\t\tif ($aValues['open_editor'])\n\t\t\t\t{\n\t\t\t\t\t$oPage->add_ready_script(\"window.location.href='\".addslashes(utils::GetAbsoluteUrlAppRoot().'pages/UI.php?c[menu]='.urlencode($sMenuId)).\"&edit=1';\"); // reloads the page, doing a GET even if we arrived via a POST\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'shortcut_list_dlg':\n\t\t\t$sOQL = utils::ReadParam('oql', '', false, 'raw_data');\n\t\t\t$sTableSettings = utils::ReadParam('table_settings', '', false, 'raw_data');\n\t\t\tShortcutOQL::GetCreationDlgFromOQL($oPage, $sOQL, $sTableSettings);\n\t\t\tbreak;\n\n\t\tcase 'shortcut_list_create':\n\t\t\t$oForm = ShortcutOQL::GetCreationForm();\n\t\t\t$aValues = $oForm->ReadParams();\n\n\t\t\t$oAppContext = new ApplicationContext();\n\t\t\t$aContext = $oAppContext->GetAsHash();\n\t\t\t$sContext = serialize($aContext);\n\n\t\t\t$oShortcut = MetaModel::NewObject(\"ShortcutOQL\");\n\t\t\t$oShortcut->Set('user_id', UserRights::GetUserId());\n\t\t\t$oShortcut->Set(\"context\", $sContext);\n\t\t\t$oShortcut->Set(\"name\", $aValues['name']);\n\t\t\t$oShortcut->Set(\"oql\", $aValues['oql']);\n\t\t\t$iAutoReload = (int)$aValues['auto_reload_sec'];\n\t\t\tif (($aValues['auto_reload']) && ($iAutoReload > 0))\n\t\t\t{\n\t\t\t\t$oShortcut->Set(\"auto_reload_sec\", max(MetaModel::GetConfig()->Get('min_reload_interval'), $iAutoReload));\n\t\t\t\t$oShortcut->Set(\"auto_reload\", 'custom');\n\t\t\t}\n\t\t\tutils::PushArchiveMode(false);\n\t\t\t$iId = $oShortcut->DBInsertNoReload();\n\t\t\tutils::PopArchiveMode();\n\n\t\t\t$oShortcut->CloneTableSettings($aValues['table_settings']);\n\n\t\t\t// Add the menu node in the right place\n\t\t\t//\n\t\t\t// Mmmm... already done because the newly created menu is read from the DB\n\t\t\t//         as soon as we invoke DisplayMenu\n\n\t\t\t// Refresh the menu pane\n\t\t\t$aExtraParams = array();\n\t\t\tApplicationMenu::DisplayMenu($oPage, $aExtraParams);\n\t\t\tbreak;\n\n\t\tcase 'shortcut_rename_dlg':\n\t\t\t$oSearch = new DBObjectSearch('Shortcut');\n\t\t\t$aShortcuts = utils::ReadMultipleSelection($oSearch);\n\t\t\t$iShortcut = $aShortcuts[0];\n\t\t\t$oShortcut = MetaModel::GetObject('Shortcut', $iShortcut);\n\t\t\t$oShortcut->StartRenameDialog($oPage);\n\t\t\tbreak;\n\n\t\tcase 'shortcut_rename_go':\n\t\t\t$iShortcut = utils::ReadParam('id', 0);\n\t\t\t$oShortcut = MetaModel::GetObject('Shortcut', $iShortcut);\n\n\t\t\t$sName = utils::ReadParam('attr_name', '', false, 'raw_data');\n\t\t\tif (strlen($sName) > 0)\n\t\t\t{\n\t\t\t\t$oShortcut->Set('name', $sName);\n\t\t\t\tutils::PushArchiveMode(false);\n\t\t\t\t$oShortcut->DBUpdate();\n\t\t\t\tutils::PopArchiveMode();\n\t\t\t\t$oPage->add_ready_script('window.location.reload();');\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase 'shortcut_delete_go':\n\t\t\t$oSearch = new DBObjectSearch('Shortcut');\n\t\t\t$oSearch->AddCondition('user_id', UserRights::GetUserId(), '=');\n\t\t\t$aShortcuts = utils::ReadMultipleSelection($oSearch);\n\t\t\tforeach($aShortcuts as $iShortcut)\n\t\t\t{\n\t\t\t\t$oShortcut = MetaModel::GetObject('Shortcut', $iShortcut);\n\t\t\t\tutils::PushArchiveMode(false);\n\t\t\t\t$oShortcut->DBDelete();\n\t\t\t\tutils::PopArchiveMode();\n\t\t\t\t$oPage->add_ready_script('window.location.reload();');\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'about_box':\n\t\t\t$oPage->SetContentType('text/html');\n\n\t\t\t$sDialogTitle = addslashes(Dict::S('UI:About:Title'));\n\t\t\t$oPage->add_ready_script(\n\t\t\t\t<<<EOF\n$('#about_box').dialog({\n\twidth: 700,\n\tmodal: true,\n\ttitle: '$sDialogTitle',\n\tclose: function() { $(this).remove(); }\n});\n$(\"#collapse_support_details\").click(function() {\n\t$(\"#support_details\").slideToggle('normal');\n\t$(\"#collapse_support_details\").toggleClass('open');\n});\n$('#support_details').toggle();\nEOF\n\t\t\t);\n\t\t\t$sVersionString = Dict::Format('UI:iTopVersion:Long', ITOP_APPLICATION, ITOP_VERSION, ITOP_REVISION, ITOP_BUILD_DATE);\n\t\t\t$sMySQLVersion = CMDBSource::GetDBVersion();\n\t\t\t$sPHPVersion = phpversion();\n\t\t\t$sOSVersion = PHP_OS;\n\t\t\t$sWebServerVersion = $_SERVER[\"SERVER_SOFTWARE\"];\n\t\t\t$sModules = implode(', ', get_loaded_extensions());\n\n\t\t\t// Get the datamodel directory\n\t\t\t$oFilter = DBObjectSearch::FromOQL('SELECT ModuleInstallation WHERE name=\"datamodel\"');\n\t\t\t$oSet = new DBObjectSet($oFilter, array('installed' => false)); // Most recent first\n\t\t\t$oLastInstall = $oSet->Fetch();\n\t\t\t$sLastInstallDate = $oLastInstall->Get('installed');\n\t\t\t$sDataModelVersion = $oLastInstall->Get('version');\n\t\t\t$aDataModelInfo = json_decode($oLastInstall->Get('comment'), true);\n\t\t\t$sDataModelSourceDir = $aDataModelInfo['source_dir'];\n\n\t\t\trequire_once(APPROOT.'setup/runtimeenv.class.inc.php');\n\t\t\t$sCurrEnv = utils::GetCurrentEnvironment();\n\t\t\t$oRuntimeEnv = new RunTimeEnvironment($sCurrEnv);\n\t\t\t$aSearchDirs = array(APPROOT.$sDataModelSourceDir);\n\t\t\tif (file_exists(APPROOT.'extensions'))\n\t\t\t{\n\t\t\t\t$aSearchDirs[] = APPROOT.'extensions';\n\t\t\t}\n\t\t\t$sExtraDir = APPROOT.'data/'.$sCurrEnv.'-modules/';\n\t\t\tif (file_exists($sExtraDir))\n\t\t\t{\n\t\t\t\t$aSearchDirs[] = $sExtraDir;\n\t\t\t}\n\t\t\t$aAvailableModules = $oRuntimeEnv->AnalyzeInstallation(MetaModel::GetConfig(), $aSearchDirs);\n\n\t\t\trequire_once(APPROOT.'setup/setuputils.class.inc.php');\n\t\t\t$aLicenses = SetupUtils::GetLicenses($sCurrEnv);\n\n\t\t\t$aItopSettings = array('cron_max_execution_time', 'timezone');\n\t\t\t$aPHPSettings = array('memory_limit', 'max_execution_time', 'upload_max_filesize', 'post_max_size');\n\t\t\t$aMySQLSettings = array('max_allowed_packet', 'key_buffer_size', 'query_cache_size');\n\t\t\t$aMySQLStatuses = array('Key_read_requests', 'Key_reads');\n\n\t\t\tif (extension_loaded('suhosin'))\n\t\t\t{\n\t\t\t\t$aPHPSettings[] = 'suhosin.post.max_vars';\n\t\t\t\t$aPHPSettings[] = 'suhosin.get.max_value_length';\n\t\t\t}\n\n\t\t\t$aMySQLVars = array();\n\t\t\tforeach(CMDBSource::QueryToArray('SHOW VARIABLES') as $aRow)\n\t\t\t{\n\t\t\t\t$aMySQLVars[$aRow['Variable_name']] = $aRow['Value'];\n\t\t\t}\n\n\t\t\t$aMySQLStats = array();\n\t\t\tforeach(CMDBSource::QueryToArray('SHOW GLOBAL STATUS') as $aRow)\n\t\t\t{\n\t\t\t\t$aMySQLStats[$aRow['Variable_name']] = $aRow['Value'];\n\t\t\t}\n\n\t\t\t// Display\n\t\t\t//\n\t\t\t$oPage->add(\"<div id=\\\"about_box\\\">\");\n\t\t\t$oPage->add('<div style=\"margin-left: 120px;\">');\n\t\t\t$oPage->add('<table>');\n\t\t\t$oPage->add('<tr>');\n\t\t\t$oPage->add('<td><a href=\"http://www.combodo.com\" title=\"www.combodo.com\" target=\"_blank\" style=\"background: none;\"><img src=\"../images/logo-combodo.png?t='.utils::GetCacheBusterTimestamp().'\" style=\"float: right;\"/></a></td>');\n\t\t\t$oPage->add('<td style=\"padding-left: 20px;\">');\n\t\t\t$oPage->add($sVersionString.'<br/>');\n\t\t\t$oPage->add(Dict::S('UI:About:DataModel').': '.$sDataModelVersion.'<br/>');\n\t\t\t$oPage->add('MySQL: '.$sMySQLVersion.'<br/>');\n\t\t\t$oPage->add('PHP: '.$sPHPVersion.'<br/>');\n\t\t\t$oPage->add('</td>');\n\t\t\t$oPage->add('</tr>');\n\t\t\t$oPage->add('</table>');\n\t\t\t$oPage->add(\"</div>\");\n\n\t\t\t$oPage->add(\"<div>\");\n\t\t\t$oPage->add('<fieldset>');\n\t\t\t$oPage->add('<legend>'.Dict::S('UI:About:Licenses').'</legend>');\n\t\t\t$oPage->add('<ul style=\"margin: 0; font-size: smaller; max-height: 15em; overflow: auto;\">');\n\t\t\t$index = 0;\n\t\t\tforeach($aLicenses as $oLicense)\n\t\t\t{\n\t\t\t\t$oPage->add('<li><b>'.$oLicense->product.'</b>, &copy; '.$oLicense->author.' is licensed under the <b>'.$oLicense->license_type.' license</b>. (<a id=\"toggle_'.$index.'\" class=\"CollapsibleLabel\" style=\"cursor:pointer;\">Details</a>)');\n\t\t\t\t$oPage->add('<div id=\"license_'.$index.'\" class=\"license_text\" style=\"display:none;overflow:auto;max-height:10em;font-size:small;border:1px #696969 solid;margin-bottom:1em; margin-top:0.5em;padding:0.5em;\">'.$oLicense->text.'</div>');\n\t\t\t\t$oPage->add_ready_script('$(\"#toggle_'.$index.'\").click( function() { $(\"#license_'.$index.'\").slideToggle(\"normal\"); } );');\n\t\t\t\t$index++;\n\t\t\t}\n\t\t\t$oPage->add('</ul>');\n\t\t\t$oPage->add('</fieldset>');\n\t\t\t$oPage->add(\"</div>\");\n\n\t\t\t$oPage->add('<fieldset>');\n\t\t\t$oPage->add('<legend>'.Dict::S('UI:About:InstallationOptions').'</legend>');\n\t\t\t$oPage->add(\"<div style=\\\"max-height: 150px; overflow: auto; font-size: smaller;\\\">\");\n\t\t\t$oPage->add('<ul style=\"margin: 0;\">');\n\n\t\t\trequire_once(APPROOT.'setup/extensionsmap.class.inc.php');\n\t\t\t$oExtensionsMap = new iTopExtensionsMap();\n\t\t\t$oExtensionsMap->LoadChoicesFromDatabase(MetaModel::GetConfig());\n\t\t\t$aChoices = $oExtensionsMap->GetChoices();\n\t\t\tforeach($aChoices as $oExtension)\n\t\t\t{\n\t\t\t\tswitch ($oExtension->sSource)\n\t\t\t\t{\n\t\t\t\t\tcase iTopExtension::SOURCE_REMOTE:\n\t\t\t\t\t\t$sSource = ' <span class=\"extension-source\">'.Dict::S('UI:About:RemoteExtensionSource').'</span>';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase iTopExtension::SOURCE_MANUAL:\n\t\t\t\t\t\t$sSource = ' <span class=\"extension-source\">'.Dict::S('UI:About:ManualExtensionSource').'</span>';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$sSource = '';\n\t\t\t\t}\n\t\t\t\t$oPage->add('<li title=\"'.Dict::Format('UI:About:Extension_Version', $oExtension->sInstalledVersion).'\">'.$oExtension->sLabel.$sSource.'</li>');\n\t\t\t}\n\t\t\t$oPage->add('</ul>');\n\t\t\t$oPage->add(\"</div>\");\n\t\t\t$oPage->add('</fieldset>');\n\n\n\t\t\t// MUST NOT be localized, as the information given here will be sent to the support\n\t\t\t$oPage->add(\"<a id=\\\"collapse_support_details\\\" class=\\\"CollapsibleLabel\\\" href=\\\"#\\\">\".Dict::S('UI:About:Support').\"</a></br>\\n\");\n\t\t\t$oPage->add(\"<div id=\\\"support_details\\\">\");\n\t\t\t$oPage->add('<textarea readonly style=\"width: 660px; height: 150px; font-size: smaller;\">');\n\t\t\t$oPage->add(\"===== begin =====\\n\");\n\t\t\t$oPage->add('iTopVersion: '.ITOP_VERSION.\"\\n\");\n\t\t\t$oPage->add('iTopBuild: '.ITOP_REVISION.\"\\n\");\n\t\t\t$oPage->add('iTopBuildDate: '.ITOP_BUILD_DATE.\"\\n\");\n\t\t\t$oPage->add('DataModelVersion: '.$sDataModelVersion.\"\\n\");\n\t\t\t$oPage->add('MySQLVersion: '.$sMySQLVersion.\"\\n\");\n\t\t\t$oPage->add('PHPVersion: '.$sPHPVersion.\"\\n\");\n\t\t\t$oPage->add('OSVersion: '.$sOSVersion.\"\\n\");\n\t\t\t$oPage->add('WebServerVersion: '.$sWebServerVersion.\"\\n\");\n\t\t\t$oPage->add('PHPModules: '.$sModules.\"\\n\");\n\t\t\tforeach($aItopSettings as $siTopVar)\n\t\t\t{\n\t\t\t\t$oPage->add('ItopSetting/'.$siTopVar.': '.MetaModel::GetConfig()->Get($siTopVar).\"\\n\");\n\t\t\t}\n\t\t\tforeach($aPHPSettings as $sPHPVar)\n\t\t\t{\n\t\t\t\t$oPage->add('PHPSetting/'.$sPHPVar.': '.ini_get($sPHPVar).\"\\n\");\n\t\t\t}\n\t\t\tforeach($aMySQLSettings as $sMySQLVar)\n\t\t\t{\n\t\t\t\t$oPage->add('MySQLSetting/'.$sMySQLVar.': '.$aMySQLVars[$sMySQLVar].\"\\n\");\n\t\t\t}\n\t\t\tforeach($aMySQLStatuses as $sMySQLStatus)\n\t\t\t{\n\t\t\t\t$oPage->add('MySQLStatus/'.$sMySQLStatus.': '.$aMySQLStats[$sMySQLStatus].\"\\n\");\n\t\t\t}\n\n\t\t\t$oPage->add('InstallDate: '.$sLastInstallDate.\"\\n\");\n\t\t\t$oPage->add('InstallPath: '.APPROOT.\"\\n\");\n\t\t\t$oPage->add(\"---- Installation choices ----\\n\");\n\t\t\tforeach($aChoices as $oExtension)\n\t\t\t{\n\t\t\t\tswitch ($oExtension->sSource)\n\t\t\t\t{\n\t\t\t\t\tcase iTopExtension::SOURCE_REMOTE:\n\t\t\t\t\t\t$sSource = ' ('.Dict::S('UI:About:RemoteExtensionSource').')';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase iTopExtension::SOURCE_MANUAL:\n\t\t\t\t\t\t$sSource = ' ('.Dict::S('UI:About:ManualExtensionSource').')';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$sSource = '';\n\t\t\t\t}\n\t\t\t\t$oPage->add('InstalledExtension/'.$oExtension->sCode.'/'.$oExtension->sVersion.$sSource.\"\\n\");\n\t\t\t}\n\t\t\t$oPage->add(\"---- Actual modules installed ----\\n\");\n\t\t\tforeach($aAvailableModules as $sModuleId => $aModuleData)\n\t\t\t{\n\t\t\t\tif ($sModuleId == '_Root_') continue;\n\t\t\t\tif ($aModuleData['version_db'] == '') continue;\n\t\t\t\t$oPage->add('InstalledModule/'.$sModuleId.': '.$aModuleData['version_db'].\"\\n\");\n\t\t\t}\n\n\t\t\t$oPage->add('===== end =====');\n\t\t\t$oPage->add('</textarea>');\n\t\t\t$oPage->add(\"</div>\");\n\n\t\t\t$oPage->add(\"</div>\");\n\t\t\tbreak;\n\n\t\tcase 'history':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$id = (int)utils::ReadParam('id', 0);\n\t\t\t$iStart = (int)utils::ReadParam('start', 0);\n\t\t\t$iCount = (int)utils::ReadParam('count', MetaModel::GetConfig()->Get('max_history_length'));\n\t\t\t$oObj = MetaModel::GetObject($sClass, $id);\n\t\t\t$oObj->DisplayBareHistory($oPage, false, $iCount, $iStart);\n\t\t\t$oPage->add_ready_script(\"$('#history table.listResults').tableHover(); $('#history table.listResults').tablesorter( { widgets: ['myZebra', 'truncatedList']} );\");\n\t\t\tbreak;\n\n\t\tcase 'history_from_filter':\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$oHistoryFilter = DBSearch::unserialize($sFilter);\n\t\t\t$iStart = (int)utils::ReadParam('start', 0);\n\t\t\t$iCount = (int)utils::ReadParam('count', MetaModel::GetConfig()->Get('max_history_length'));\n\t\t\t$oBlock = new HistoryBlock($oHistoryFilter, 'table', false);\n\t\t\t$oBlock->SetLimit($iCount, $iStart);\n\t\t\t$oBlock->Display($oPage, 'history');\n\t\t\t$oPage->add_ready_script(\"$('#history table.listResults').tableHover(); $('#history table.listResults').tablesorter( { widgets: ['myZebra', 'truncatedList']} );\");\n\t\t\tbreak;\n\n\t\tcase 'full_text_search':\n\t\t\t$aFullTextNeedles = utils::ReadParam('needles', array(), false, 'raw_data');\n\t\t\t$sFullText = trim(implode(' ', $aFullTextNeedles));\n\t\t\t$sClassName = utils::ReadParam('class', '');\n\t\t\t$iCount = utils::ReadParam('count', 0);\n\t\t\t$iCurrentPos = utils::ReadParam('position', 0);\n\t\t\t$iTune = utils::ReadParam('tune', 0);\n\t\t\tif (empty($sFullText))\n\t\t\t{\n\t\t\t\t$oPage->p(Dict::S('UI:Search:NoSearch'));\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Search in full text mode in all the classes\n\t\t\t$aMatches = array();\n\n\t\t\t// Build the ordered list of classes to search into\n\t\t\t//\n\t\t\tif (empty($sClassName))\n\t\t\t{\n\t\t\t\t$aSearchClasses = MetaModel::GetClasses('searchable');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Search is limited to a given class and its subclasses\n\t\t\t\t$aSearchClasses = MetaModel::EnumChildClasses($sClassName, ENUM_CHILD_CLASSES_ALL);\n\t\t\t}\n\t\t\t// Skip abstract classes, since we search in all the child classes anyway\n\t\t\tforeach($aSearchClasses as $idx => $sClass)\n\t\t\t{\n\t\t\t\tif (MetaModel::IsAbstract($sClass))\n\t\t\t\t{\n\t\t\t\t\tunset($aSearchClasses[$idx]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$sMaxChunkDuration = MetaModel::GetConfig()->Get('full_text_chunk_duration');\n\t\t\t$aAccelerators = MetaModel::GetConfig()->Get('full_text_accelerators');\n\n\t\t\tforeach(array_reverse($aAccelerators) as $sClass => $aRestriction)\n\t\t\t{\n\t\t\t\t$bSkip = false;\n\t\t\t\t$iPos = array_search($sClass, $aSearchClasses);\n\t\t\t\tif ($iPos !== false)\n\t\t\t\t{\n\t\t\t\t\tunset($aSearchClasses[$iPos]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$bSkip = true;\n\t\t\t\t}\n\t\t\t\t$bSkip |= array_key_exists('skip', $aRestriction) ? $aRestriction['skip'] : false;\n\t\t\t\tif (!in_array($sClass, $aSearchClasses))\n\t\t\t\t{\n\t\t\t\t\tif ($sClass == $sClassName)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Class explicitely requested, do NOT skip it\n\t\t\t\t\t\t// beware: there may not be a 'query' defined for a skipped class !\n\t\t\t\t\t\t$bSkip = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!$bSkip)\n\t\t\t\t{\n\t\t\t\t\t// NOT skipped, add the class to the list of classes to search into\n\t\t\t\t\tif (array_key_exists('query', $aRestriction))\n\t\t\t\t\t{\n\t\t\t\t\t\tarray_unshift($aSearchClasses, $aRestriction['query']);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// No accelerator query\n\t\t\t\t\t\tarray_unshift($aSearchClasses, $sClassName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$aSearchClasses = array_values($aSearchClasses); // renumbers the array starting from zero, removing the missing indexes\n\t\t\t$fStarted = microtime(true);\n\t\t\t$iFoundInThisRound = 0;\n\t\t\tfor($iPos = $iCurrentPos; $iPos < count($aSearchClasses); $iPos++)\n\t\t\t{\n\t\t\t\tif ($iFoundInThisRound && (microtime(true) - $fStarted >= $sMaxChunkDuration))\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$sClassSpec = $aSearchClasses[$iPos];\n\t\t\t\tif (substr($sClassSpec, 0, 7) == 'SELECT ')\n\t\t\t\t{\n\t\t\t\t\t$oFilter = DBObjectSearch::FromOQL($sClassSpec);\n\t\t\t\t\t$sClassName = $oFilter->GetClass();\n\t\t\t\t\t$sNeedleFormat = isset($aAccelerators[$sClassName]['needle']) ? $aAccelerators[$sClassName]['needle'] : '%$needle$%';\n\t\t\t\t\t$sNeedle = str_replace('$needle$', $sFullText, $sNeedleFormat);\n\t\t\t\t\t$aParams = array('needle' => $sNeedle);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$sClassName = $sClassSpec;\n\t\t\t\t\t$oFilter = new DBObjectSearch($sClassName);\n\t\t\t\t\t$aParams = array();\n\n\t\t\t\t\tforeach($aFullTextNeedles as $sSearchText)\n\t\t\t\t\t{\n\t\t\t\t\t\t$oFilter->AddCondition_FullText($sSearchText);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$oFilter->SetShowObsoleteData(utils::ShowObsoleteData());\n\t\t\t\t// Skip abstract classes\n\t\t\t\tif (MetaModel::IsAbstract($sClassName)) continue;\n\n\t\t\t\tif ($iTune > 0)\n\t\t\t\t{\n\t\t\t\t\t$fStartedClass = microtime(true);\n\t\t\t\t}\n\t\t\t\t$oSet = new DBObjectSet($oFilter, array(), $aParams);\n\t\t\t\tif (array_key_exists($sClassName, $aAccelerators) && array_key_exists('attributes', $aAccelerators[$sClassName]))\n\t\t\t\t{\n\t\t\t\t\t$oSet->OptimizeColumnLoad(array($oFilter->GetClassAlias() => $aAccelerators[$sClassName]['attributes']));\n\t\t\t\t}\n\n\t\t\t\t$sFullTextJS = addslashes($sFullText);\n\t\t\t\t$bEnableEnlarge = array_key_exists($sClassName, $aAccelerators) && array_key_exists('query', $aAccelerators[$sClassName]);\n\t\t\t\tif (array_key_exists($sClassName, $aAccelerators) && array_key_exists('enable_enlarge', $aAccelerators[$sClassName]))\n\t\t\t\t{\n\t\t\t\t\t$bEnableEnlarge &= $aAccelerators[$sClassName]['enable_enlarge'];\n\t\t\t\t}\n\t\t\t\t$sEnlargeTheSearch =\n\t\t\t\t\t<<<EOF\n\t\t\t$('.search-class-$sClassName button').prop('disabled', true);\n\n\t\t\t$('.search-class-$sClassName h2').append('&nbsp;<img id=\"indicator\" src=\"../images/indicator.gif\">');\n\t\t\tvar oParams = {operation: 'full_text_search_enlarge', class: '$sClassName', text: '$sFullTextJS'};\n\t\t\t$.post(GetAbsoluteUrlAppRoot()+'pages/ajax.render.php', oParams, function(data) {\n\t\t\t\t$('.search-class-$sClassName').html(data);\n\t\t\t});\nEOF;\n\n\n\t\t\t\t$sEnlargeButton = '';\n\t\t\t\tif ($bEnableEnlarge)\n\t\t\t\t{\n\t\t\t\t\t$sEnlargeButton = \"&nbsp;<button onclick=\\\"\".htmlentities($sEnlargeTheSearch, ENT_QUOTES, 'UTF-8').\"\\\">\".Dict::S('UI:Search:Enlarge').\"</button>\";\n\t\t\t\t}\n\t\t\t\tif ($oSet->Count() > 0)\n\t\t\t\t{\n\t\t\t\t\t$aLeafs = array();\n\t\t\t\t\twhile ($oObj = $oSet->Fetch())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (get_class($oObj) == $sClassName)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aLeafs[] = $oObj->GetKey();\n\t\t\t\t\t\t\t$iFoundInThisRound++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$oLeafsFilter = new DBObjectSearch($sClassName);\n\t\t\t\t\tif (count($aLeafs) > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$iCount += count($aLeafs);\n\t\t\t\t\t\t$oPage->add(\"<div class=\\\"search-class-result search-class-$sClassName\\\">\\n\");\n\t\t\t\t\t\t$oPage->add(\"<div class=\\\"page_header\\\">\\n\");\n\t\t\t\t\t\tif (array_key_exists($sClassName, $aAccelerators))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$oPage->add(\"<h2>\".MetaModel::GetClassIcon($sClassName).\"&nbsp;<span class=\\\"hilite\\\">\".Dict::Format('UI:Search:Count_ObjectsOf_Class_Found', count($aLeafs), Metamodel::GetName($sClassName)).$sEnlargeButton.\"</h2>\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$oPage->add(\"<h2>\".MetaModel::GetClassIcon($sClassName).\"&nbsp;<span class=\\\"hilite\\\">\".Dict::Format('UI:Search:Count_ObjectsOf_Class_Found', count($aLeafs), Metamodel::GetName($sClassName)).\"</h2>\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$oPage->add(\"</div>\\n\");\n\t\t\t\t\t\t$oLeafsFilter->AddCondition('id', $aLeafs, 'IN');\n\t\t\t\t\t\t$oBlock = new DisplayBlock($oLeafsFilter, 'list', false);\n\t\t\t\t\t\t$sBlockId = 'global_search_'.$sClassName;\n\t\t\t\t\t\t$oPage->add('<div id=\"'.$sBlockId.'\">');\n\t\t\t\t\t\t$oBlock->RenderContent($oPage, array('table_id' => $sBlockId, 'currentId' => $sBlockId));\n\t\t\t\t\t\t$oPage->add(\"</div>\\n\");\n\t\t\t\t\t\t$oPage->add(\"</div>\\n\");\n\t\t\t\t\t\t$oPage->p('&nbsp;'); // Some space ?\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (array_key_exists($sClassName, $aAccelerators))\n\t\t\t\t\t{\n\t\t\t\t\t\t$oPage->add(\"<div class=\\\"search-class-result search-class-$sClassName\\\">\\n\");\n\t\t\t\t\t\t$oPage->add(\"<div class=\\\"page_header\\\">\\n\");\n\t\t\t\t\t\t$oPage->add(\"<h2>\".MetaModel::GetClassIcon($sClassName).\"&nbsp;<span class=\\\"hilite\\\">\".Dict::Format('UI:Search:Count_ObjectsOf_Class_Found', 0, Metamodel::GetName($sClassName)).$sEnlargeButton.\"</h2>\\n\");\n\t\t\t\t\t\t$oPage->add(\"</div>\\n\");\n\t\t\t\t\t\t$oPage->add(\"</div>\\n\");\n\t\t\t\t\t\t$oPage->p('&nbsp;'); // Some space ?\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ($iTune > 0)\n\t\t\t\t{\n\t\t\t\t\t$fDurationClass = microtime(true) - $fStartedClass;\n\t\t\t\t\t$oPage->add_script(\"oTimeStatistics.$sClassName = $fDurationClass;\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($iPos < count($aSearchClasses))\n\t\t\t{\n\t\t\t\t$sJSNeedle = json_encode($aFullTextNeedles);\n\t\t\t\t$oPage->add_ready_script(\n\t\t\t\t\t<<<EOF\n\t\t\t\tvar oParams = {operation: 'full_text_search', position: $iPos, needles: $sJSNeedle, count: $iCount, tune: $iTune};\n\t\t\t\t$.post(GetAbsoluteUrlAppRoot()+'pages/ajax.render.php', oParams, function(data) {\n\t\t\t\t\t$('#full_text_results').append(data);\n\t\t\t\t});\nEOF\n\t\t\t\t);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// We're done\n\t\t\t\t$oPage->add_ready_script(\n\t\t\t\t\t<<<EOF\n$('#full_text_indicator').hide();\n$('#full_text_progress,#full_text_progress_placeholder').hide(500);\nEOF\n\t\t\t\t);\n\n\t\t\t\tif ($iTune > 0)\n\t\t\t\t{\n\t\t\t\t\t$oPage->add_ready_script(\n\t\t\t\t\t\t<<<EOF\n\t\t\t\tvar sRes = '<h4>Search statistics (tune = 1)</h4><table>';\n\t\t\t\tsRes += '<thead><tr><th>Class</th><th>Time</th></tr></thead>';\n\t\t\t\tsRes += '<tbody>';\n\t\t\t\tvar fTotal = 0;\n\t\t\t\tfor (var sClass in oTimeStatistics)\n\t\t\t\t{\n\t\t\t\t\tfTotal = fTotal + oTimeStatistics[sClass];\n\t\t\t\t\tfRounded = Math.round(oTimeStatistics[sClass] * 1000) / 1000;\n\t\t\t\t\tsRes += '<tr><td>' + sClass + '</td><td>' + fRounded + '</td></tr>';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfRoundedTotal = Math.round(fTotal * 1000) / 1000;\n\t\t\t\tsRes += '<tr><td><b>Total</b></td><td><b>' + fRoundedTotal + '</b></td></tr>';\n\t\t\t\tsRes += '</tbody>';\n\t\t\t\tsRes += '</table>';\n\t\t\t\t$('#full_text_results').append(sRes);\nEOF\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif ($iCount == 0)\n\t\t\t\t{\n\t\t\t\t\t$sFullTextSummary = addslashes(Dict::S('UI:Search:NoObjectFound'));\n\t\t\t\t\t$oPage->add_ready_script(\"$('#full_text_results').append('<div id=\\\"no_object_found\\\">$sFullTextSummary</div>');\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'full_text_search_enlarge':\n\t\t\t$sFullText = trim(utils::ReadParam('text', '', false, 'raw_data'));\n\t\t\t$sClass = trim(utils::ReadParam('class', ''));\n\t\t\t$iTune = utils::ReadParam('tune', 0);\n\n\t\t\tif (preg_match('/^\"(.*)\"$/', $sFullText, $aMatches))\n\t\t\t{\n\t\t\t\t// The text is surrounded by double-quotes, remove the quotes and treat it as one single expression\n\t\t\t\t$aFullTextNeedles = array($aMatches[1]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Split the text on the blanks and treat this as a search for <word1> AND <word2> AND <word3>\n\t\t\t\t$aFullTextNeedles = explode(' ', $sFullText);\n\t\t\t}\n\n\t\t\t$oFilter = new DBObjectSearch($sClass);\n\t\t\tforeach($aFullTextNeedles as $sSearchText)\n\t\t\t{\n\t\t\t\t$oFilter->AddCondition_FullText($sSearchText);\n\t\t\t}\n\t\t\t$oFilter->SetShowObsoleteData(utils::ShowObsoleteData());\n\t\t\t$oSet = new DBObjectSet($oFilter);\n\t\t\t$oPage->add(\"<div class=\\\"page_header\\\">\\n\");\n\t\t\t$oPage->add(\"<h2>\".MetaModel::GetClassIcon($sClass).\"&nbsp;<span class=\\\"hilite\\\">\".Dict::Format('UI:Search:Count_ObjectsOf_Class_Found', $oSet->Count(), Metamodel::GetName($sClass)).\"</h2>\\n\");\n\t\t\t$oPage->add(\"</div>\\n\");\n\t\t\tif ($oSet->Count() > 0)\n\t\t\t{\n\t\t\t\t$aLeafs = array();\n\t\t\t\twhile ($oObj = $oSet->Fetch())\n\t\t\t\t{\n\t\t\t\t\tif (get_class($oObj) == $sClass)\n\t\t\t\t\t{\n\t\t\t\t\t\t$aLeafs[] = $oObj->GetKey();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$oLeafsFilter = new DBObjectSearch($sClass);\n\t\t\t\tif (count($aLeafs) > 0)\n\t\t\t\t{\n\t\t\t\t\t$oLeafsFilter->AddCondition('id', $aLeafs, 'IN');\n\t\t\t\t\t$oBlock = new DisplayBlock($oLeafsFilter, 'list', false);\n\t\t\t\t\t$sBlockId = 'global_search_'.$sClass;\n\t\t\t\t\t$oPage->add('<div id=\"'.$sBlockId.'\">');\n\t\t\t\t\t$oBlock->RenderContent($oPage, array('table_id' => $sBlockId, 'currentId' => $sBlockId));\n\t\t\t\t\t$oPage->add('</div>');\n\t\t\t\t\t$oPage->P('&nbsp;'); // Some space ?\n\t\t\t\t\t// Hide \"no object found\"\n\t\t\t\t\t$oPage->add_ready_script('$(\"#no_object_found\").hide();');\n\t\t\t\t}\n\t\t\t}\n\t\t\t$oPage->add_ready_script(\n\t\t\t\t<<<EOF\n$('#full_text_indicator').hide();\n$('#full_text_progress,#full_text_progress_placeholder').hide(500);\nEOF\n\t\t\t);\n\t\t\tbreak;\n\n\t\tcase 'xlsx_export_dialog':\n\t\t\t$sFilter = utils::ReadParam('filter', '', false, 'raw_data');\n\t\t\t$oPage->SetContentType('text/html');\n\t\t\t$oPage->add(\n\t\t\t\t<<<EOF\n<style>\n .ui-progressbar {\n\tposition: relative;\n}\n.progress-label {\n\tposition: absolute;\n\tleft: 50%;\n\ttop: 1px;\n\tfont-size: 11pt;\n}\n.download-form button {\n\tdisplay:block;\n\tmargin-left: auto;\n\tmargin-right: auto;\n\tmargin-top: 2em;\n}\n.ui-progressbar-value {\n\tbackground: url(../setup/orange-progress.gif);\n}\n.progress-bar {\n\theight: 20px;\n}\n.statistics > div {\n\tpadding-left: 16px;\n\tcursor: pointer;\n\tfont-size: 10pt;\n\tbackground: url(../images/minus.gif) 0 2px no-repeat;\n}\t\t\t\t\n.statistics > div.closed {\n\tpadding-left: 16px;\n\tbackground: url(../images/plus.gif) 0 2px no-repeat;\n}\n\t\t\t\t\n.statistics .closed .stats-data {\n\tdisplay: none;\n}\n.stats-data td {\n\tpadding-right: 5px;\n}\n</style>\t\t\t\t\nEOF\n\t\t\t);\n\t\t\t$oPage->add('<div id=\"XlsxExportDlg\">');\n\t\t\t$oPage->add('<div class=\"export-options\">');\n\t\t\t$oPage->add('<p><input type=\"checkbox\" id=\"export-advanced-mode\"/>&nbsp;<label for=\"export-advanced-mode\">'.Dict::S('UI:CSVImport:AdvancedMode').'</label></p>');\n\t\t\t$oPage->add('<p style=\"font-size:10pt;margin-left:2em;margin-top:-0.5em;padding-bottom:1em;\">'.Dict::S('UI:CSVImport:AdvancedMode+').'</p>');\n\t\t\t$oPage->add('<p><input type=\"checkbox\" id=\"export-auto-download\" checked=\"checked\"/>&nbsp;<label for=\"export-auto-download\">'.Dict::S('ExcelExport:AutoDownload').'</label></p>');\n\t\t\t$oPage->add('</div>');\n\t\t\t$oPage->add('<div class=\"progress\"><p class=\"status-message\">'.Dict::S('ExcelExport:PreparingExport').'</p><div class=\"progress-bar\"><div class=\"progress-label\"></div></div></div>');\n\t\t\t$oPage->add('<div class=\"statistics\"><div class=\"stats-toggle closed\">'.Dict::S('ExcelExport:Statistics').'<div class=\"stats-data\"></div></div></div>');\n\t\t\t$oPage->add('</div>');\n\t\t\t$aLabels = array(\n\t\t\t\t'dialog_title' => Dict::S('ExcelExporter:ExportDialogTitle'),\n\t\t\t\t'cancel_button' => Dict::S('UI:Button:Cancel'),\n\t\t\t\t'export_button' => Dict::S('ExcelExporter:ExportButton'),\n\t\t\t\t'download_button' => Dict::Format('ExcelExporter:DownloadButton', 'export.xlsx'), //TODO: better name for the file (based on the class of the filter??)\n\t\t\t);\n\t\t\t$sJSLabels = json_encode($aLabels);\n\t\t\t$sFilter = addslashes($sFilter);\n\t\t\t$sJSPageUrl = addslashes(utils::GetAbsoluteUrlAppRoot().'pages/ajax.render.php');\n\t\t\t$oPage->add_ready_script(\"$('#XlsxExportDlg').xlsxexporter({filter: '$sFilter', labels: $sJSLabels, ajax_page_url: '$sJSPageUrl'});\");\n\t\t\tbreak;\n\n\t\tcase 'xlsx_start':\n\t\t\t$sFilter = utils::ReadParam('filter', '', false, 'raw_data');\n\t\t\t$bAdvanced = (utils::ReadParam('advanced', 'false') == 'true');\n\t\t\t$oSearch = DBObjectSearch::unserialize($sFilter);\n\n\t\t\t$oExcelExporter = new ExcelExporter();\n\t\t\t$oExcelExporter->SetObjectList($oSearch);\n\t\t\t//$oExcelExporter->SetChunkSize(10); //Only for testing\n\t\t\t$oExcelExporter->SetAdvancedMode($bAdvanced);\n\t\t\t$sToken = $oExcelExporter->SaveState();\n\t\t\t$oPage->add(json_encode(array('status' => 'ok', 'token' => $sToken)));\n\t\t\tbreak;\n\n\t\tcase 'xlsx_run':\n\t\t\t$sMemoryLimit = MetaModel::GetConfig()->Get('xlsx_exporter_memory_limit');\n\t\t\tini_set('memory_limit', $sMemoryLimit);\n\t\t\tini_set('max_execution_time', max(300, ini_get('max_execution_time'))); // At least 5 minutes\n\n\t\t\t$sToken = utils::ReadParam('token', '', false, 'raw_data');\n\t\t\t$oExcelExporter = new ExcelExporter($sToken);\n\t\t\t$aStatus = $oExcelExporter->Run();\n\t\t\t$aResults = array('status' => $aStatus['code'], 'percentage' => $aStatus['percentage'], 'message' => $aStatus['message']);\n\t\t\tif ($aStatus['code'] == 'done')\n\t\t\t{\n\t\t\t\t$aResults['statistics'] = $oExcelExporter->GetStatistics('html');\n\t\t\t}\n\t\t\t$oPage->add(json_encode($aResults));\n\t\t\tbreak;\n\n\t\tcase 'xlsx_download':\n\t\t\t$sToken = utils::ReadParam('token', '', false, 'raw_data');\n\t\t\t$oPage->SetContentType('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n\t\t\t$oPage->SetContentDisposition('attachment', 'export.xlsx');\n\t\t\t$sFileContent = ExcelExporter::GetExcelFileFromToken($sToken);\n\t\t\t$oPage->add($sFileContent);\n\t\t\tExcelExporter::CleanupFromToken($sToken);\n\t\t\tbreak;\n\n\t\tcase 'xlsx_abort':\n\t\t\t// Stop & cleanup an export...\n\t\t\t$sToken = utils::ReadParam('token', '', false, 'raw_data');\n\t\t\tExcelExporter::CleanupFromToken($sToken);\n\t\t\tbreak;\n\n\t\tcase 'relation_pdf':\n\t\tcase 'relation_attachment':\n\t\t\trequire_once(APPROOT.'core/simplegraph.class.inc.php');\n\t\t\trequire_once(APPROOT.'core/relationgraph.class.inc.php');\n\t\t\trequire_once(APPROOT.'core/displayablegraph.class.inc.php');\n\t\t\t$sRelation = utils::ReadParam('relation', 'impacts');\n\t\t\t$sDirection = utils::ReadParam('direction', 'down');\n\n\t\t\t$iGroupingThreshold = utils::ReadParam('g', 5, false, 'integer');\n\t\t\t$sPageFormat = utils::ReadParam('p', 'A4');\n\t\t\t$sPageOrientation = utils::ReadParam('o', 'L');\n\t\t\t$sTitle = utils::ReadParam('title', '', false, 'raw_data');\n\t\t\t$sPositions = utils::ReadParam('positions', null, false, 'raw_data');\n\t\t\t$aExcludedClasses = utils::ReadParam('excluded_classes', array(), false, 'raw_data');\n\t\t\t$bIncludeList = (bool)utils::ReadParam('include_list', false);\n\t\t\t$sComments = utils::ReadParam('comments', '', false, 'raw_data');\n\t\t\t$aContexts = utils::ReadParam('contexts', array(), false, 'raw_data');\n\t\t\t$sContextKey = utils::ReadParam('context_key', '', false, 'raw_data');\n\t\t\t$aPositions = null;\n\t\t\tif ($sPositions != null)\n\t\t\t{\n\t\t\t\t$aPositions = json_decode($sPositions, true);\n\t\t\t}\n\n\t\t\t// Get the list of source objects\n\t\t\t$aSources = utils::ReadParam('sources', array(), false, 'raw_data');\n\t\t\t$aSourceObjects = array();\n\t\t\tforeach($aSources as $sClass => $aIDs)\n\t\t\t{\n\t\t\t\t$oSearch = new DBObjectSearch($sClass);\n\t\t\t\t$oSearch->AddCondition('id', $aIDs, 'IN');\n\t\t\t\t$oSet = new DBObjectSet($oSearch);\n\t\t\t\twhile ($oObj = $oSet->Fetch())\n\t\t\t\t{\n\t\t\t\t\t$aSourceObjects[] = $oObj;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$sSourceClass = '*';\n\t\t\tif (count($aSourceObjects) == 1)\n\t\t\t{\n\t\t\t\t$sSourceClass = get_class($aSourceObjects[0]);\n\t\t\t}\n\n\t\t\t// Get the list of excluded objects\n\t\t\t$aExcluded = utils::ReadParam('excluded', array(), false, 'raw_data');\n\t\t\t$aExcludedObjects = array();\n\t\t\tforeach($aExcluded as $sClass => $aIDs)\n\t\t\t{\n\t\t\t\t$oSearch = new DBObjectSearch($sClass);\n\t\t\t\t$oSearch->AddCondition('id', $aIDs, 'IN');\n\t\t\t\t$oSet = new DBObjectSet($oSearch);\n\t\t\t\twhile ($oObj = $oSet->Fetch())\n\t\t\t\t{\n\t\t\t\t\t$aExcludedObjects[] = $oObj;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$iMaxRecursionDepth = MetaModel::GetConfig()->Get('relations_max_depth');\n\t\t\tif ($sDirection == 'up')\n\t\t\t{\n\t\t\t\t$oRelGraph = MetaModel::GetRelatedObjectsUp($sRelation, $aSourceObjects, $iMaxRecursionDepth, true, $aContexts);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oRelGraph = MetaModel::GetRelatedObjectsDown($sRelation, $aSourceObjects, $iMaxRecursionDepth, true, $aExcludedObjects, $aContexts);\n\t\t\t}\n\n\t\t\t// Remove excluded classes from the graph\n\t\t\tif (count($aExcludedClasses) > 0)\n\t\t\t{\n\t\t\t\t$oIterator = new RelationTypeIterator($oRelGraph, 'Node');\n\t\t\t\tforeach($oIterator as $oNode)\n\t\t\t\t{\n\t\t\t\t\t$oObj = $oNode->GetProperty('object');\n\t\t\t\t\tif ($oObj && in_array(get_class($oObj), $aExcludedClasses))\n\t\t\t\t\t{\n\t\t\t\t\t\t$oRelGraph->FilterNode($oNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$oPage = new PDFPage($sTitle, $sPageFormat, $sPageOrientation);\n\t\t\t$oPage->SetContentDisposition('attachment', $sTitle.'.pdf');\n\n\t\t\t$oGraph = DisplayableGraph::FromRelationGraph($oRelGraph, $iGroupingThreshold, ($sDirection == 'down'));\n\t\t\t$oGraph->InitFromGraphviz();\n\t\t\tif ($aPositions != null)\n\t\t\t{\n\t\t\t\t$oGraph->UpdatePositions($aPositions);\n\t\t\t}\n\n\t\t\t$aGroups = array();\n\t\t\t$oIterator = new RelationTypeIterator($oGraph, 'Node');\n\t\t\tforeach($oIterator as $oNode)\n\t\t\t{\n\t\t\t\tif ($oNode instanceof DisplayableGroupNode)\n\t\t\t\t{\n\t\t\t\t\t$aGroups[$oNode->GetProperty('group_index')] = $oNode->GetObjects();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// First page is the graph\n\t\t\t$oGraph->RenderAsPDF($oPage, $sComments, $sContextKey);\n\n\t\t\tif ($bIncludeList)\n\t\t\t{\n\t\t\t\t// Then the lists of objects (one table per finalclass)\n\t\t\t\t$aResults = array();\n\t\t\t\t$oIterator = new RelationTypeIterator($oRelGraph, 'Node');\n\t\t\t\tforeach($oIterator as $oNode)\n\t\t\t\t{\n\t\t\t\t\t$oObj = $oNode->GetProperty('object'); // Some nodes (Redundancy Nodes and Group) do not contain an object\n\t\t\t\t\tif ($oObj)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sObjClass = get_class($oObj);\n\t\t\t\t\t\tif (!array_key_exists($sObjClass, $aResults))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aResults[$sObjClass] = array();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$aResults[$sObjClass][] = $oObj;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$oPage->get_tcpdf()->AddPage();\n\t\t\t\t$oPage->get_tcpdf()->SetFont('dejavusans', '', 10, '', true); // Reset the font size to its default\n\t\t\t\t$oPage->add('<div class=\"page_header\"><h1>'.Dict::S('UI:RelationshipList').'</h1></div>');\n\t\t\t\t$iLoopTimeLimit = MetaModel::GetConfig()->Get('max_execution_time_per_loop');\n\t\t\t\tforeach($aResults as $sListClass => $aObjects)\n\t\t\t\t{\n\t\t\t\t\tset_time_limit($iLoopTimeLimit * count($aObjects));\n\t\t\t\t\t$oSet = CMDBObjectSet::FromArray($sListClass, $aObjects);\n\t\t\t\t\t$oSet->SetShowObsoleteData(utils::ShowObsoleteData());\n\t\t\t\t\t$sHtml = \"<div class=\\\"page_header\\\">\\n\";\n\t\t\t\t\t$sHtml .= \"<table class=\\\"section\\\"><tr><td>\".MetaModel::GetClassIcon($sListClass, true, 'width: 24px; height: 24px;').\" \".Dict::Format('UI:Search:Count_ObjectsOf_Class_Found', $oSet->Count(),\n\t\t\t\t\t\t\tMetamodel::GetName($sListClass)).\"</td></tr></table>\\n\";\n\t\t\t\t\t$sHtml .= \"</div>\\n\";\n\t\t\t\t\t$oPage->add($sHtml);\n\t\t\t\t\tcmdbAbstractObject::DisplaySet($oPage, $oSet, array('table_id' => $sSourceClass.'_'.$sRelation.'_'.$sDirection.'_'.$sListClass));\n\t\t\t\t\t$oPage->p(''); // Some space\n\t\t\t\t}\n\n\t\t\t\t// Then the content of the groups (one table per group)\n\t\t\t\tif (count($aGroups) > 0)\n\t\t\t\t{\n\t\t\t\t\t$oPage->get_tcpdf()->AddPage();\n\t\t\t\t\t$oPage->add('<div class=\"page_header\"><h1>'.Dict::S('UI:RelationGroups').'</h1></div>');\n\t\t\t\t\tforeach($aGroups as $idx => $aObjects)\n\t\t\t\t\t{\n\t\t\t\t\t\tset_time_limit($iLoopTimeLimit * count($aObjects));\n\t\t\t\t\t\t$sListClass = get_class(current($aObjects));\n\t\t\t\t\t\t$oSet = CMDBObjectSet::FromArray($sListClass, $aObjects);\n\t\t\t\t\t\t$sHtml = \"<div class=\\\"page_header\\\">\\n\";\n\t\t\t\t\t\t$sHtml .= \"<table class=\\\"section\\\"><tr><td>\".MetaModel::GetClassIcon($sListClass, true, 'width: 24px; height: 24px;').\" \".Dict::Format('UI:RelationGroupNumber_N', (1 + $idx)).\"</td></tr></table>\\n\";\n\t\t\t\t\t\t$sHtml .= \"</div>\\n\";\n\t\t\t\t\t\t$oPage->add($sHtml);\n\t\t\t\t\t\tcmdbAbstractObject::DisplaySet($oPage, $oSet);\n\t\t\t\t\t\t$oPage->p(''); // Some space\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($operation == 'relation_attachment')\n\t\t\t{\n\t\t\t\t$sObjClass = utils::ReadParam('obj_class', '', false, 'class');\n\t\t\t\t$iObjKey = (int)utils::ReadParam('obj_key', 0, false, 'integer');\n\n\t\t\t\t// Save the generated PDF as an attachment\n\t\t\t\t$sPDF = $oPage->get_pdf();\n\t\t\t\t$oPage = new ajax_page('');\n\t\t\t\t$oAttachment = new Attachment();\n\t\t\t\t$oAttachment->Set('item_class', $sObjClass);\n\t\t\t\t$oAttachment->Set('item_id', $iObjKey);\n\t\t\t\t$oDoc = new ormDocument($sPDF, 'application/pdf', $sTitle.'.pdf');\n\t\t\t\t$oAttachment->Set('contents', $oDoc);\n\t\t\t\t$iAttachmentId = $oAttachment->DBInsert();\n\t\t\t\t$aRet = array(\n\t\t\t\t\t'status' => 'ok',\n\t\t\t\t\t'att_id' => $iAttachmentId,\n\t\t\t\t);\n\t\t\t\t$oPage->add(json_encode($aRet));\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'relation_json':\n\t\t\trequire_once(APPROOT.'core/simplegraph.class.inc.php');\n\t\t\trequire_once(APPROOT.'core/relationgraph.class.inc.php');\n\t\t\trequire_once(APPROOT.'core/displayablegraph.class.inc.php');\n\t\t\t$sRelation = utils::ReadParam('relation', 'impacts');\n\t\t\t$sDirection = utils::ReadParam('direction', 'down');\n\t\t\t$iGroupingThreshold = utils::ReadParam('g', 5);\n\t\t\t$sPositions = utils::ReadParam('positions', null, false, 'raw_data');\n\t\t\t$aExcludedClasses = utils::ReadParam('excluded_classes', array(), false, 'raw_data');\n\t\t\t$aContexts = utils::ReadParam('contexts', array(), false, 'raw_data');\n\t\t\t$sContextKey = utils::ReadParam('context_key', array(), false, 'raw_data');\n\t\t\t$aPositions = null;\n\t\t\tif ($sPositions != null)\n\t\t\t{\n\t\t\t\t$aPositions = json_decode($sPositions, true);\n\t\t\t}\n\n\t\t\t// Get the list of source objects\n\t\t\t$aSources = utils::ReadParam('sources', array(), false, 'raw_data');\n\t\t\t$aSourceObjects = array();\n\t\t\tforeach($aSources as $sClass => $aIDs)\n\t\t\t{\n\t\t\t\t$oSearch = new DBObjectSearch($sClass);\n\t\t\t\t$oSearch->AddCondition('id', $aIDs, 'IN');\n\t\t\t\t$oSet = new DBObjectSet($oSearch);\n\t\t\t\twhile ($oObj = $oSet->Fetch())\n\t\t\t\t{\n\t\t\t\t\t$aSourceObjects[] = $oObj;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Get the list of excluded objects\n\t\t\t$aExcluded = utils::ReadParam('excluded', array(), false, 'raw_data');\n\t\t\t$aExcludedObjects = array();\n\t\t\tforeach($aExcluded as $sClass => $aIDs)\n\t\t\t{\n\t\t\t\t$oSearch = new DBObjectSearch($sClass);\n\t\t\t\t$oSearch->AddCondition('id', $aIDs, 'IN');\n\t\t\t\t$oSet = new DBObjectSet($oSearch);\n\t\t\t\twhile ($oObj = $oSet->Fetch())\n\t\t\t\t{\n\t\t\t\t\t$aExcludedObjects[] = $oObj;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Compute the graph\n\t\t\t$iMaxRecursionDepth = MetaModel::GetConfig()->Get('relations_max_depth');\n\t\t\tif ($sDirection == 'up')\n\t\t\t{\n\t\t\t\t$oRelGraph = MetaModel::GetRelatedObjectsUp($sRelation, $aSourceObjects, $iMaxRecursionDepth, true, $aContexts);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oRelGraph = MetaModel::GetRelatedObjectsDown($sRelation, $aSourceObjects, $iMaxRecursionDepth, true, $aExcludedObjects, $aContexts);\n\t\t\t}\n\n\t\t\t// Remove excluded classes from the graph\n\t\t\tif (count($aExcludedClasses) > 0)\n\t\t\t{\n\t\t\t\t$oIterator = new RelationTypeIterator($oRelGraph, 'Node');\n\t\t\t\tforeach($oIterator as $oNode)\n\t\t\t\t{\n\t\t\t\t\t$oObj = $oNode->GetProperty('object');\n\t\t\t\t\tif ($oObj && in_array(get_class($oObj), $aExcludedClasses))\n\t\t\t\t\t{\n\t\t\t\t\t\t$oRelGraph->FilterNode($oNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$oGraph = DisplayableGraph::FromRelationGraph($oRelGraph, $iGroupingThreshold, ($sDirection == 'down'));\n\t\t\t$oGraph->InitFromGraphviz();\n\t\t\tif ($aPositions != null)\n\t\t\t{\n\t\t\t\t$oGraph->UpdatePositions($aPositions);\n\t\t\t}\n\t\t\t$oPage->add($oGraph->GetAsJSON($sContextKey));\n\t\t\t$oPage->SetContentType('application/json');\n\t\t\tbreak;\n\n\t\tcase 'relation_groups':\n\t\t\t$aGroups = utils::ReadParam('groups');\n\t\t\t$iBlock = 1; // Zero is not a valid blockid\n\t\t\tforeach($aGroups as $idx => $aDefinition)\n\t\t\t{\n\t\t\t\t$sListClass = $aDefinition['class'];\n\t\t\t\t$oSearch = new DBObjectSearch($sListClass);\n\t\t\t\t$oSearch->AddCondition('id', $aDefinition['keys'], 'IN');\n\t\t\t\t$oSearch->SetShowObsoleteData(utils::ShowObsoleteData());\n\t\t\t\t$oPage->add(\"<h1>\".Dict::Format('UI:RelationGroupNumber_N', (1 + $idx)).\"</h1>\\n\");\n\t\t\t\t$oPage->add(\"<div id=\\\"relation_group_$idx\\\" class=\\\"page_header\\\">\\n\");\n\t\t\t\t$oPage->add(\"<h2>\".MetaModel::GetClassIcon($sListClass).\"&nbsp;<span class=\\\"hilite\\\">\".Dict::Format('UI:Search:Count_ObjectsOf_Class_Found', count($aDefinition['keys']), Metamodel::GetName($sListClass)).\"</h2>\\n\");\n\t\t\t\t$oPage->add(\"</div>\\n\");\n\t\t\t\t$oBlock = new DisplayBlock($oSearch, 'list');\n\t\t\t\t$oBlock->Display($oPage, 'group_'.$iBlock++);\n\t\t\t\t$oPage->p('&nbsp;'); // Some space ?\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'relation_lists':\n\t\t\t$aLists = utils::ReadParam('lists');\n\t\t\t$iBlock = 1; // Zero is not a valid blockid\n\t\t\tforeach($aLists as $sListClass => $aKeys)\n\t\t\t{\n\t\t\t\t$oSearch = new DBObjectSearch($sListClass);\n\t\t\t\t$oSearch->AddCondition('id', $aKeys, 'IN');\n\t\t\t\t$oSearch->SetShowObsoleteData(utils::ShowObsoleteData());\n\t\t\t\t$oPage->add(\"<div class=\\\"page_header\\\">\\n\");\n\t\t\t\t$oPage->add(\"<h2>\".MetaModel::GetClassIcon($sListClass).\"&nbsp;<span class=\\\"hilite\\\">\".Dict::Format('UI:Search:Count_ObjectsOf_Class_Found', count($aKeys), Metamodel::GetName($sListClass)).\"</h2>\\n\");\n\t\t\t\t$oPage->add(\"</div>\\n\");\n\t\t\t\t$oBlock = new DisplayBlock($oSearch, 'list');\n\t\t\t\t$oBlock->Display($oPage, 'list_'.$iBlock++, array('table_id' => 'ImpactAnalysis_'.$sListClass));\n\t\t\t\t$oPage->p('&nbsp;'); // Some space ?\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'ticket_impact':\n\t\t\trequire_once(APPROOT.'core/simplegraph.class.inc.php');\n\t\t\trequire_once(APPROOT.'core/relationgraph.class.inc.php');\n\t\t\trequire_once(APPROOT.'core/displayablegraph.class.inc.php');\n\t\t\t$sRelation = utils::ReadParam('relation', 'impacts');\n\t\t\t$sDirection = utils::ReadParam('direction', 'down');\n\t\t\t$iGroupingThreshold = utils::ReadParam('g', 5);\n\t\t\t$sClass = utils::ReadParam('class', '', false, 'class');\n\t\t\t$sAttCode = utils::ReadParam('attcode', 'functionalcis_list');\n\t\t\t$sImpactAttCode = utils::ReadParam('impact_attcode', 'impact_code');\n\t\t\t$sImpactAttCodeValue = utils::ReadParam('impact_attcode_value', 'manual');\n\t\t\t$iId = (int)utils::ReadParam('id', 0, false, 'integer');\n\n\t\t\t// Get the list of source objects\n\t\t\t$oTicket = MetaModel::GetObject($sClass, $iId);\n\t\t\t$oAttDef = MetaModel::GetAttributeDef($sClass, $sAttCode);\n\t\t\t$sExtKeyToRemote = $oAttDef->GetExtKeyToRemote();\n\t\t\t$oExtKeyToRemote = MetaModel::GetAttributeDef($oAttDef->GetLinkedClass(), $sExtKeyToRemote);\n\t\t\t$sRemoteClass = $oExtKeyToRemote->GetTargetClass();\n\t\t\t$oSet = $oTicket->Get($sAttCode);\n\t\t\t$aSourceObjects = array();\n\t\t\t$aExcludedObjects = array();\n\t\t\twhile ($oLnk = $oSet->Fetch())\n\t\t\t{\n\t\t\t\tif ($oLnk->Get($sImpactAttCode) == 'manual')\n\t\t\t\t{\n\t\t\t\t\t$aSourceObjects[] = MetaModel::GetObject($sRemoteClass, $oLnk->Get($sExtKeyToRemote));\n\t\t\t\t}\n\t\t\t\tif ($oLnk->Get($sImpactAttCode) == 'not_impacted')\n\t\t\t\t{\n\t\t\t\t\t$aExcludedObjects[] = MetaModel::GetObject($sRemoteClass, $oLnk->Get($sExtKeyToRemote));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Compute the graph\n\t\t\t$iMaxRecursionDepth = MetaModel::GetConfig()->Get('relations_max_depth');\n\t\t\tif ($sDirection == 'up')\n\t\t\t{\n\t\t\t\t$oRelGraph = MetaModel::GetRelatedObjectsUp($sRelation, $aSourceObjects, $iMaxRecursionDepth);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$oRelGraph = MetaModel::GetRelatedObjectsDown($sRelation, $aSourceObjects, $iMaxRecursionDepth, $aExcludedObjects);\n\t\t\t}\n\n\t\t\t$aResults = $oRelGraph->GetObjectsByClass();\n\t\t\t$oGraph = DisplayableGraph::FromRelationGraph($oRelGraph, $iGroupingThreshold, ($sDirection == 'down'));\n\n\t\t\t$sContextKey = 'itop-tickets/relation_context/'.$sClass.'/'.$sRelation.'/'.$sDirection;\n\t\t\t$oAppContext = new ApplicationContext();\n\t\t\t$oGraph->Display($oPage, $aResults, $sRelation, $oAppContext, $aExcludedObjects, $sClass, $iId, $sContextKey, array('this' => $oTicket));\n\t\t\tbreak;\n\n\t\tcase 'export_build':\n\t\t\tregister_shutdown_function(function () {\n\t\t\t\t$aErr = error_get_last();\n\t\t\t\tif (($aErr !== null) && ($aErr['type'] & (E_ERROR | E_PARSE | E_CORE_ERROR | E_COMPILE_ERROR | E_USER_ERROR)))\n\t\t\t\t{\n\t\t\t\t\tob_end_clean();\n\t\t\t\t\techo json_encode(array('code' => 'error', 'percentage' => 100, 'message' => Dict::Format('UI:Error_Details', $aErr['message'])));\n\t\t\t\t}\n\t\t\t});\n\t\t\ttry\n\t\t\t{\n\t\t\t\t$token = utils::ReadParam('token', null);\n\t\t\t\t$sTokenForDisplay = utils::HtmlEntities($token);\n\t\t\t\t$aResult = array( // Fallback error, just in case\n\t\t\t\t\t'code' => 'error',\n\t\t\t\t\t'percentage' => 100,\n\t\t\t\t\t'message' => \"Export not found for token: '$sTokenForDisplay'\",\n\t\t\t\t);\n\t\t\t\t$data = '';\n\t\t\t\tif ($token === null)\n\t\t\t\t{\n\t\t\t\t\t$sFormat = utils::ReadParam('format', '');\n\t\t\t\t\t$sExpression = utils::ReadParam('expression', null, false, 'raw_data');\n\t\t\t\t\t$iQueryId = utils::ReadParam('query', null);\n\t\t\t\t\tif ($sExpression === null)\n\t\t\t\t\t{\n\t\t\t\t\t\t$oQuerySearch = DBObjectSearch::FromOQL('SELECT QueryOQL WHERE id = :query_id', array('query_id' => $iQueryId));\n\t\t\t\t\t\t$oQuerySearch->UpdateContextFromUser();\n\t\t\t\t\t\t$oQueries = new DBObjectSet($oQuerySearch);\n\t\t\t\t\t\tif ($oQueries->Count() > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$oQuery = $oQueries->Fetch();\n\t\t\t\t\t\t\t$sExpression = $oQuery->Get('oql');\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aResult = array('code' => 'error', 'percentage' => 100, 'message' => \"Invalid query phrasebook identifier: '$iQueryId'\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ($sExpression !== null)\n\t\t\t\t\t{\n\t\t\t\t\t\t$oSearch = DBObjectSearch::FromOQL($sExpression);\n\t\t\t\t\t\t$oSearch->UpdateContextFromUser();\n\t\t\t\t\t\t$oExporter = BulkExport::FindExporter($sFormat, $oSearch);\n\t\t\t\t\t\t$oExporter->SetObjectList($oSearch);\n\t\t\t\t\t\t$oExporter->SetFormat($sFormat);\n\t\t\t\t\t\t$oExporter->SetChunkSize(EXPORTER_DEFAULT_CHUNK_SIZE);\n\t\t\t\t\t\t$oExporter->ReadParameters();\n\t\t\t\t\t}\n\n\t\t\t\t\t// First pass, generate the headers\n\t\t\t\t\t$data .= $oExporter->GetHeader();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$oExporter = BulkExport::FindExporterFromToken($token);\n\t\t\t\t}\n\n\t\t\t\tif ($oExporter)\n\t\t\t\t{\n\t\t\t\t\t$data .= $oExporter->GetNextChunk($aResult);\n\t\t\t\t\tif ($aResult['code'] != 'done')\n\t\t\t\t\t{\n\t\t\t\t\t\t$oExporter->AppendToTmpFile($data);\n\t\t\t\t\t\t$aResult['token'] = $oExporter->SaveState();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// Last pass\n\t\t\t\t\t\t$data .= $oExporter->GetFooter();\n\t\t\t\t\t\t$oExporter->AppendToTmpFile($data);\n\t\t\t\t\t\t$aResult['token'] = $oExporter->SaveState();\n\t\t\t\t\t\tif (substr($oExporter->GetMimeType(), 0, 5) == 'text/')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Result must be encoded in UTF-8 to be passed as part of a JSON structure\n\t\t\t\t\t\t\t$sCharset = $oExporter->GetCharacterSet();\n\t\t\t\t\t\t\tif (strtoupper($sCharset) != 'UTF-8')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$aResult['text_result'] = iconv($sCharset, 'UTF-8', file_get_contents($oExporter->GetTmpFilePath()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$aResult['text_result'] = file_get_contents($oExporter->GetTmpFilePath());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$aResult['mime_type'] = $oExporter->GetMimeType();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$aResult['message'] = Dict::Format('Core:BulkExport:ClickHereToDownload_FileName', $oExporter->GetDownloadFileName());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$oPage->add(json_encode($aResult));\n\t\t\t} catch (BulkExportException $e)\n\t\t\t{\n\t\t\t\t$aResult = array('code' => 'error', 'percentage' => 100, 'message' => utils::HtmlEntities($e->GetLocalizedMessage()));\n\t\t\t\t$oPage->add(json_encode($aResult));\n\t\t\t} catch (Exception $e)\n\t\t\t{\n\t\t\t\t$aResult = array('code' => 'error', 'percentage' => 100, 'message' => utils::HtmlEntities($e->getMessage()));\n\t\t\t\t$oPage->add(json_encode($aResult));\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'export_download':\n\t\t\t$token = utils::ReadParam('token', null);\n\t\t\tif ($token !== null)\n\t\t\t{\n\t\t\t\t$oExporter = BulkExport::FindExporterFromToken($token);\n\t\t\t\tif ($oExporter)\n\t\t\t\t{\n\t\t\t\t\t$sMimeType = $oExporter->GetMimeType();\n\t\t\t\t\tif (substr($sMimeType, 0, 5) == 'text/')\n\t\t\t\t\t{\n\t\t\t\t\t\t$sMimeType .= ';charset='.strtolower($oExporter->GetCharacterSet());\n\t\t\t\t\t}\n\t\t\t\t\t$oPage->SetContentType($sMimeType);\n\t\t\t\t\t$oPage->SetContentDisposition('attachment', $oExporter->GetDownloadFileName());\n\t\t\t\t\t$oPage->add(file_get_contents($oExporter->GetTmpFilePath()));\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'export_cancel':\n\t\t\t$token = utils::ReadParam('token', null);\n\t\t\tif ($token !== null)\n\t\t\t{\n\t\t\t\t$oExporter = BulkExport::FindExporterFromToken($token);\n\t\t\t\tif ($oExporter)\n\t\t\t\t{\n\t\t\t\t\t$oExporter->Cleanup();\n\t\t\t\t}\n\t\t\t}\n\t\t\t$aResult = array('code' => 'error', 'percentage' => 100, 'message' => Dict::S('Core:BulkExport:ExportCancelledByUser'));\n\t\t\t$oPage->add(json_encode($aResult));\n\t\t\tbreak;\n\n\t\tcase 'extend_lock':\n\t\t\t$sObjClass = utils::ReadParam('obj_class', '', false, 'class');\n\t\t\t$iObjKey = (int)utils::ReadParam('obj_key', 0, false, 'integer');\n\t\t\t$sToken = utils::ReadParam('token', 0, false, 'raw_data');\n\t\t\t$aResult = iTopOwnershipLock::ExtendLock($sObjClass, $iObjKey, $sToken);\n\t\t\tif (!$aResult['status'])\n\t\t\t{\n\t\t\t\tif ($aResult['operation'] == 'lost')\n\t\t\t\t{\n\t\t\t\t\t$sName = $aResult['owner']->GetName();\n\t\t\t\t\tif ($aResult['owner']->Get('contactid') != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sName .= ' ('.$aResult['owner']->Get('contactid_friendlyname').')';\n\t\t\t\t\t}\n\t\t\t\t\t$aResult['message'] = Dict::Format('UI:CurrentObjectIsLockedBy_User', $sName);\n\t\t\t\t\t$aResult['popup_message'] = Dict::Format('UI:CurrentObjectIsLockedBy_User_Explanation', $sName);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif ($aResult['operation'] == 'expired')\n\t\t\t\t\t{\n\t\t\t\t\t\t$aResult['message'] = Dict::S('UI:CurrentObjectLockExpired');\n\t\t\t\t\t\t$aResult['popup_message'] = Dict::S('UI:CurrentObjectLockExpired_Explanation');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$oPage->add(json_encode($aResult));\n\t\t\tbreak;\n\n\t\tcase 'watchdog':\n\t\t\t$oPage->add('ok'); // Better for debugging...\n\t\t\tbreak;\n\n\t\tcase 'cke_img_upload':\n\t\t\t// Image uploaded via CKEditor\n\t\t\t$aResult = array(\n\t\t\t\t'uploaded' => 0,\n\t\t\t\t'fileName' => '',\n\t\t\t\t'url' => '',\n\t\t\t\t'icon' => '',\n\t\t\t\t'msg' => '',\n\t\t\t\t'att_id' => 0,\n\t\t\t\t'preview' => 'false',\n\t\t\t);\n\n\t\t\t$sObjClass = stripslashes(utils::ReadParam('obj_class', '', false, 'class'));\n\t\t\t$sTempId = utils::ReadParam('temp_id', '', false, 'transaction_id');\n\t\t\tif (empty($sObjClass))\n\t\t\t{\n\t\t\t\t$aResult['error'] = \"Missing argument 'obj_class'\";\n\t\t\t}\n\t\t\telseif (empty($sTempId))\n\t\t\t{\n\t\t\t\t$aResult['error'] = \"Missing argument 'temp_id'\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t$oDoc = utils::ReadPostedDocument('upload');\n\t\t\t\t\tif (InlineImage::IsImage($oDoc->GetMimeType()))\n\t\t\t\t\t{\n\t\t\t\t\t\t$aDimensions = null;\n\t\t\t\t\t\t$oDoc = InlineImage::ResizeImageToFit($oDoc, $aDimensions);\n\t\t\t\t\t\t$oAttachment = MetaModel::NewObject('InlineImage');\n\t\t\t\t\t\t$oAttachment->Set('expire', time() + MetaModel::GetConfig()->Get('draft_attachments_lifetime'));\n\t\t\t\t\t\t$oAttachment->Set('temp_id', $sTempId);\n\t\t\t\t\t\t$oAttachment->Set('item_class', $sObjClass);\n\t\t\t\t\t\t$oAttachment->SetDefaultOrgId();\n\t\t\t\t\t\t$oAttachment->Set('contents', $oDoc);\n\t\t\t\t\t\t$oAttachment->Set('secret', sprintf('%06x', mt_rand(0, 0xFFFFFF))); // something not easy to guess\n\t\t\t\t\t\t$iAttId = $oAttachment->DBInsert();\n\n\t\t\t\t\t\t$aResult['uploaded'] = 1;\n\t\t\t\t\t\t$aResult['msg'] = htmlentities($oDoc->GetFileName(), ENT_QUOTES, 'UTF-8');\n\t\t\t\t\t\t$aResult['fileName'] = $oDoc->GetFileName();\n\t\t\t\t\t\t$aResult['url'] = utils::GetAbsoluteUrlAppRoot().INLINEIMAGE_DOWNLOAD_URL.$iAttId.'&s='.$oAttachment->Get('secret');\n\t\t\t\t\t\tif (is_array($aDimensions))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aResult['width'] = $aDimensions['width'];\n\t\t\t\t\t\t\t$aResult['height'] = $aDimensions['height'];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$aResult['error'] = $oDoc->GetFileName().' is not a valid image format.';\n\t\t\t\t\t}\n\t\t\t\t} catch (FileUploadException $e)\n\t\t\t\t{\n\t\t\t\t\t$aResult['error'] = $e->GetMessage();\n\t\t\t\t}\n\t\t\t}\n\t\t\t$oPage->add(json_encode($aResult));\n\t\t\tbreak;\n\n\t\tcase 'cke_upload_and_browse':\n\t\t\t$sTempId = utils::ReadParam('temp_id', '', false, 'transaction_id');\n\t\t\t$sObjClass = utils::ReadParam('obj_class', '', false, 'class');\n\t\t\ttry\n\t\t\t{\n\t\t\t\t$oDoc = utils::ReadPostedDocument('upload');\n\t\t\t\t$sDocMimeType = $oDoc->GetMimeType();\n\t\t\t\tif (!InlineImage::IsImage($sDocMimeType))\n\t\t\t\t{\n\t\t\t\t\tLogErrorMessage('CKE : error when uploading image in ajax.render.php, not an image',\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'operation' => 'cke_upload_and_browse',\n\t\t\t\t\t\t\t'class' => $sObjClass,\n\t\t\t\t\t\t\t'ImgMimeType' => $sDocMimeType,\n\t\t\t\t\t\t));\n\t\t\t\t} else {\n\t\t\t\t\t$aDimensions = null;\n\t\t\t\t\t$oDoc = InlineImage::ResizeImageToFit($oDoc, $aDimensions);\n\t\t\t\t\t$oAttachment = MetaModel::NewObject('InlineImage');\n\t\t\t\t\t$oAttachment->Set('expire', time() + MetaModel::GetConfig()->Get('draft_attachments_lifetime'));\n\t\t\t\t\t$oAttachment->Set('temp_id', $sTempId);\n\t\t\t\t\t$oAttachment->Set('item_class', $sObjClass);\n\t\t\t\t\t$oAttachment->SetDefaultOrgId();\n\t\t\t\t\t$oAttachment->Set('contents', $oDoc);\n\t\t\t\t\t$oAttachment->Set('secret', sprintf('%06x', mt_rand(0, 0xFFFFFF))); // something not easy to guess\n\t\t\t\t\t$iAttId = $oAttachment->DBInsert();\n\t\t\t\t}\n\n\t\t\t} catch (FileUploadException $e)\n\t\t\t{\n\t\t\t\tLogErrorMessage('CKE : error when uploading image in ajax.render.php, exception occured',\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'operation' => 'cke_upload_and_browse',\n\t\t\t\t\t\t'class' => $sObjClass,\n\t\t\t\t\t\t'exceptionMsg' => $e,\n\t\t\t\t\t));\n\t\t\t}\n\t\t// Fall though !! => browse\n\n\t\tcase 'cke_browse':\n\t\t\t$oPage = new NiceWebPage(Dict::S('UI:BrowseInlineImages'));\n\t\t\t$oPage->add_linked_stylesheet(utils::GetAbsoluteUrlAppRoot().'css/magnific-popup.css');\n\t\t\t$oPage->add_linked_script(utils::GetAbsoluteUrlAppRoot().'js/jquery.magnific-popup.min.js');\n\t\t\t$sImgUrl = utils::GetAbsoluteUrlAppRoot().INLINEIMAGE_DOWNLOAD_URL;\n\n\t\t\t$sTempId = utils::ReadParam('temp_id', '', false, 'transaction_id');\n\t\t\t$sClass = utils::ReadParam('obj_class', '', false, 'class');\n\t\t\t$iObjectId = utils::ReadParam('obj_key', 0, false, 'integer');\n\t\t\t$sCKEditorFuncNum = utils::ReadParam('CKEditorFuncNum', '');\n\n\t\t\t$sPostUrl = utils::GetAbsoluteUrlAppRoot().'pages/ajax.render.php?CKEditorFuncNum='.$sCKEditorFuncNum;\n\n\t\t\t$oPage->add_style(\n\t\t\t\t<<<EOF\nbody {\n\toverflow: auto;\n}\nEOF\n\t\t\t);\n\t\t\t$sMaxUpload = InlineImage::GetMaxUpload();\n\t\t\t$sUploadLegend = Dict::S('UI:UploadInlineImageLegend');\n\t\t\t$sUploadLabel = Dict::S('UI:SelectInlineImageToUpload');\n\t\t\t$sAvailableImagesLegend = Dict::S('UI:AvailableInlineImagesLegend');\n\t\t\t$sInsertBtnLabel = Dict::S('UI:Button:Insert');\n\t\t\t$sNoInlineImage = Dict::S('UI:NoInlineImage');\n\t\t\t$oPage->add(\n\t\t\t\t<<<EOF\n<div>\n\t<fieldset>\n\t\t<legend>$sUploadLegend</legend>\n\t\t<form method=\"post\" id=\"upload_form\" action=\"$sPostUrl\" enctype=\"multipart/form-data\">\n\t\t\t<input type=\"hidden\" name=\"operation\" value=\"cke_upload_and_browse\">\n\t\t\t<input type=\"hidden\" name=\"temp_id\" value=\"$sTempId\">\n\t\t\t<input type=\"hidden\" name=\"obj_class\" value=\"$sClass\">\n\t\t\t<input type=\"hidden\" name=\"obj_key\" value=\"$iObjectId\">\n\t\t\t$sUploadLabel <input id=\"upload_button\" type=\"file\" name=\"upload\"> <span id=\"upload_status\"> $sMaxUpload</span>\n\t\t</form>\n\t</fieldset>\n</div>\nEOF\n\t\t\t);\n\n\t\t\t$oPage->add_script(\n\t\t\t\t<<<EOF\n        // Helper function to get parameters from the query string.\n        function getUrlParam( paramName ) {\n            var reParam = new RegExp( '(?:[\\?&]|&)' + paramName + '=([^&]+)', 'i' );\n            var match = window.location.search.match( reParam );\n\t\t\n            return ( match && match.length > 1 ) ? match[1] : null;\n        }\n        // Simulate user action of selecting a file to be returned to CKEditor.\n        function returnFileUrl(iAttId, sAltText, sSecret) {\n\n            var funcNum = getUrlParam( 'CKEditorFuncNum' );\n            var fileUrl = '$sImgUrl'+iAttId+'&s='+sSecret;\n            window.opener.CKEDITOR.tools.callFunction( funcNum, fileUrl, function() {\n                // Get the reference to a dialog window.\n                var dialog = this.getDialog();\n                // Check if this is the Image Properties dialog window.\n                if ( dialog.getName() == 'image' ) {\n                    // Get the reference to a text field that stores the \"alt\" attribute.\n                    var element = dialog.getContentElement( 'info', 'txtAlt' );\n                    // Assign the new value.\n                    if ( element )\n                        element.setValue(sAltText);\n                }\n                // Return \"false\" to stop further execution. In such case CKEditor will ignore the second argument (\"fileUrl\")\n                // and the \"onSelect\" function assigned to the button that called the file manager (if defined).\n                // return false;\n            } );\n            window.close();\n        }\nEOF\n\t\t\t);\n\t\t\t$oPage->add_ready_script(\n\t\t\t\t<<<EOF\n$('#upload_button').on('change', function() {\n\t$('#upload_status').html('<img src=\"../images/indicator.gif\">'); \n\t$('#upload_form').submit();\n\t$(this).prop('disabled', true);\n});\n$('.img-picker').magnificPopup({type: 'image', closeOnContentClick: true });\nEOF\n\t\t\t);\n\t\t\t$sOQL = \"SELECT InlineImage WHERE ((temp_id = :temp_id) OR (item_class = :obj_class AND item_id = :obj_id))\";\n\t\t\t$oSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('temp_id' => $sTempId, 'obj_class' => $sClass, 'obj_id' => $iObjectId));\n\t\t\t$oPage->add(\"<div><fieldset><legend>$sAvailableImagesLegend</legend>\");\n\n\t\t\tif ($oSet->Count() == 0)\n\t\t\t{\n\t\t\t\t$oPage->add(\"<p style=\\\"text-align:center\\\">$sNoInlineImage</p>\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twhile ($oAttachment = $oSet->Fetch())\n\t\t\t\t{\n\t\t\t\t\t$oDoc = $oAttachment->Get('contents');\n\t\t\t\t\tif ($oDoc->GetMainMimeType() == 'image')\n\t\t\t\t\t{\n\t\t\t\t\t\t$sDocName = addslashes(htmlentities($oDoc->GetFileName(), ENT_QUOTES, 'UTF-8'));\n\t\t\t\t\t\t$iAttId = $oAttachment->GetKey();\n\t\t\t\t\t\t$sSecret = $oAttachment->Get('secret');\n\t\t\t\t\t\t$oPage->add(\"<div style=\\\"float:left;margin:1em;text-align:center;\\\"><img class=\\\"img-picker\\\" style=\\\"max-width:300px;cursor:zoom-in\\\" href=\\\"{$sImgUrl}{$iAttId}&s={$sSecret}\\\" alt=\\\"$sDocName\\\" title=\\\"$sDocName\\\" src=\\\"{$sImgUrl}{$iAttId}&s={$sSecret}\\\"><br/><button onclick=\\\"returnFileUrl($iAttId, '$sDocName', '$sSecret')\\\">$sInsertBtnLabel</button></div>\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$oPage->add(\"</fieldset></div>\");\n\t\t\tbreak;\n\n\t\tcase 'custom_fields_update':\n\t\t\t$oPage->SetContentType('application/json');\n\t\t\t$sAttCode = utils::ReadParam('attcode', '');\n\t\t\t$aRequestedFields = utils::ReadParam('requested_fields', array());\n\t\t\t$sRequestedFieldsFormPath = utils::ReadParam('form_path', '');\n\t\t\t$sJson = utils::ReadParam('json_obj', '', false, 'raw_data');\n\n\t\t\t$aResult = array();\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\t$oWizardHelper = WizardHelper::FromJSON($sJson);\n\t\t\t\t$oObj = $oWizardHelper->GetTargetObject();\n\n\t\t\t\t$oOrmCustomFieldValue = $oObj->Get($sAttCode);\n\t\t\t\t$oForm = $oOrmCustomFieldValue->GetForm();\n\t\t\t\t$oSubForm = $oForm->FindSubForm($sRequestedFieldsFormPath);\n\t\t\t\t$oRenderer = new \\Combodo\\iTop\\Renderer\\Console\\ConsoleFormRenderer($oSubForm);\n\t\t\t\t$aRenderRes = $oRenderer->Render($aRequestedFields);\n\n\t\t\t\t$aResult['form']['updated_fields'] = $aRenderRes;\n\t\t\t} catch (Exception $e)\n\t\t\t{\n\t\t\t\t$aResult['error'] = $e->getMessage();\n\t\t\t}\n\t\t\t$oPage->add(json_encode($aResult));\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t$oPage->p(\"Invalid query.\");\n\t}\n\n\t$oPage->output();\n} catch (Exception $e)\n{\n\t// note: transform to cope with XSS attacks\n\techo htmlentities($e->GetMessage(), ENT_QUOTES, 'utf-8');\n\tIssueLog::Error($e->getMessage().\"\\nDebug trace:\\n\".$e->getTraceAsString());\n}\n"], "filenames": ["core/config.class.inc.php", "datamodels/2.x/itop-portal-base/portal/src/controllers/objectcontroller.class.inc.php", "pages/ajax.render.php"], "buggy_code_start_loc": [1163, 1297, 905], "buggy_code_end_loc": [1163, 1297, 906], "fixing_code_start_loc": [1164, 1298, 905], "fixing_code_end_loc": [1172, 1303, 911], "type": "CWE-79", "message": "Combodi iTop is a web based IT Service Management tool. Prior to versions 2.7.6 and 3.0.0, cross-site scripting is possible for scripts outside of script tags when displaying HTML attachments. This issue is fixed in versions 2.7.6 and 3.0.0. There are currently no known workarounds.", "other": {"cve": {"id": "CVE-2022-24811", "sourceIdentifier": "security-advisories@github.com", "published": "2022-04-05T19:15:08.170", "lastModified": "2022-04-19T15:21:45.163", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Combodi iTop is a web based IT Service Management tool. Prior to versions 2.7.6 and 3.0.0, cross-site scripting is possible for scripts outside of script tags when displaying HTML attachments. This issue is fixed in versions 2.7.6 and 3.0.0. There are currently no known workarounds."}, {"lang": "es", "value": "Combodi iTop es una herramienta de Administraci\u00f3n de Servicios de TI basada en la web. En versiones anteriores a 2.7.6 y 3.0.0, era posible un ataque de tipo cross-site scripting para scripts fuera de las etiquetas de script cuando son mostrados archivos adjuntos HTML. Este problema ha sido solucionado en versiones 2.7.6 y 3.0.0. Actualmente no son conocidas medidas de mitigaci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:combodo:itop:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.7.6", "matchCriteriaId": "EFDA4E60-0B4B-4E74-BAAD-AA774836EBA9"}]}]}], "references": [{"url": "https://github.com/Combodo/iTop/commit/92a9a8c65f3cbb2cd4414ca3a3b45a5754ba57b4", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Combodo/iTop/security/advisories/GHSA-67x5-mqg4-rvgc", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/1625056478879-Combodo/iTop/", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Combodo/iTop/commit/92a9a8c65f3cbb2cd4414ca3a3b45a5754ba57b4"}}