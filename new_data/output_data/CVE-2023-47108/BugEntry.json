{"buggy_code": ["# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n\nThis project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n### Added\n\n- Add the new `go.opentelemetry.io/contrib/instrgen` package to provide auto-generated source code instrumentation. (#3068, #3108)\n- Add `\"go.opentelemetry.io/contrib/samplers/jaegerremote\".WithSamplingStrategyFetcher` which sets custom fetcher implementation. (#4045)\n- Add `\"go.opentelemetry.io/contrib/config\"` package that includes configuration models generated via go-jsonschema. (#4376)\n- Add `NewSDK` function to `\"go.opentelemetry.io/contrib/config\"`. The initial implementation only returns noop providers. (#4414)\n- Add metrics support (No-op, OTLP and Prometheus) to `go.opentelemetry.io/contrib/exporters/autoexport`. (#4229, #4479)\n- Add support for `console` span exporter and metrics exporter in `go.opentelemetry.io/contrib/exporters/autoexport`. (#4486)\n- Set unit and description on all instruments in `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp`. (#4500)\n- Add metric support for `grpc.StatsHandler` in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc`. (#4356) \n\n### Changed\n\n- Dropped compatibility testing for [Go 1.19].\n  The project no longer guarantees support for this version of Go. (#4352)\n\n### Deprecated\n\n- In `go.opentelemetry.io/contrib/exporters/autoexport`, `Option` was renamed to `SpanOption`. The old name is deprecated but continues to be supported as an alias. (#4229)\n\n### Fixed\n\n- The `go.opentelemetry.io/contrib/samplers/jaegerremote` sampler does not panic when the default HTTP round-tripper (`http.DefaultTransport`) is not `*http.Transport`. (#4045)\n- The `UnaryServerInterceptor` in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc` now sets gRPC status code correctly for the `rpc.server.duration` metric. (#4481)\n\n## [1.20.0/0.45.0/0.14.0] - 2023-09-28\n\n### Added\n\n- Set the description for the `rpc.server.duration` metric in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc`. (#4302)\n- Add `NewServerHandler` and `NewClientHandler` that return a `grpc.StatsHandler` used for gRPC instrumentation in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc`. (#3002)\n- Add new Prometheus bridge module in `go.opentelemetry.io/contrib/bridges/prometheus`. (#4227)\n\n### Changed\n\n- Upgrade dependencies of OpenTelemetry Go to use the new [`v1.19.0`/`v0.42.0`/`v0.0.7` release](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v1.19.0).\n- Use `grpc.StatsHandler` for gRPC instrumentation in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc/example`. (#4325)\n\n## [1.19.0/0.44.0/0.13.0] - 2023-09-12\n\n### Added\n\n- Add `gcp.gce.instance.name` and `gcp.gce.instance.hostname` resource attributes to `go.opentelemetry.io/contrib/detectors/gcp`. (#4263)\n\n### Changed\n\n- The semantic conventions used by `go.opentelemetry.io/contrib/detectors/aws/ec2` have been upgraded to v1.21.0. (#4265)\n- The semantic conventions used by `go.opentelemetry.io/contrib/detectors/aws/ecs` have been upgraded to v1.21.0. (#4265)\n- The semantic conventions used by `go.opentelemetry.io/contrib/detectors/aws/eks` have been upgraded to v1.21.0. (#4265)\n- The semantic conventions used by `go.opentelemetry.io/contrib/detectors/aws/lambda` have been upgraded to v1.21.0. (#4265)\n- The semantic conventions used by `go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-lambda-go/otellambda` have been upgraded to v1.21.0. (#4265)\n  - The `faas.execution` attribute is now `faas.invocation_id`.\n  - The `faas.id` attribute is now `aws.lambda.invoked_arn`.\n- The semantic conventions used by `go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws` have been upgraded to v1.21.0. (#4265)\n- The `http.request.method` attribute will only allow known HTTP methods from the metrics generated by `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp`. (#4277)\n\n### Removed\n\n- The high cardinality attributes `net.sock.peer.addr`, `net.sock.peer.port`, `http.user_agent`, `enduser.id`, and `http.client_ip` were removed from the metrics generated by `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp`. (#4277)\n- The deprecated `go.opentelemetry.io/contrib/instrumentation/github.com/astaxie/beego/otelbeego` module is removed. (#4295)\n- The deprecated `go.opentelemetry.io/contrib/instrumentation/github.com/go-kit/kit/otelkit` module is removed. (#4295)\n- The deprecated `go.opentelemetry.io/contrib/instrumentation/github.com/Shopify/sarama/otelsarama` module is removed. (#4295)\n- The deprecated `go.opentelemetry.io/contrib/instrumentation/github.com/bradfitz/gomemcache/memcache/otelmemcache` module is removed. (#4295)\n- The deprecated `go.opentelemetry.io/contrib/instrumentation/github.com/gocql/gocql/otelgocql` module is removed. (#4295)\n\n## [1.18.0/0.43.0/0.12.0] - 2023-08-28\n\n### Added\n\n- Add `NewMiddleware` function in `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp`. (#2964)\n- The `go.opentelemetry.io/contrib/exporters/autoexport` package to provide configuration of trace exporters with useful defaults and environment variable support. (#2753, #4100, #4130, #4132, #4134)\n- `WithRouteTag` in `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp` adds HTTP route attribute to metrics. (#615)\n- Add `WithSpanOptions` option in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc`. (#3768)\n- Add testing support for Go 1.21. (#4233)\n- Add `WithFilter` option to `go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux`. (#4230)\n\n### Changed\n\n- Change interceptors in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc` to disable `SENT`/`RECEIVED` events.\n  Use `WithMessageEvents()` to turn back on. (#3964)\n\n### Changed\n\n- `go.opentelemetry.io/contrib/detectors/gcp`: Detect `faas.instance` instead of `faas.id`, since `faas.id` is being removed. (#4198)\n\n### Fixed\n\n- AWS XRay Remote Sampling to cap `quotaBalance` to 1x quota in `go.opentelemetry.io/contrib/samplers/aws/xray`. (#3651, #3652)\n- Do not panic when the HTTP request has the \"Expect: 100-continue\" header in `go.opentelemetry.io/contrib/instrumentation/net/http/httptrace/otelhttptrace`. (#3892)\n- Fix span status value set for non-standard HTTP status codes in modules listed below. (#3966)\n  - `go.opentelemetry.io/contrib/instrumentation/github.com/emicklei/go-restful/otelrestful`\n  - `go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin`\n  - `go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux`\n  - `go.opentelemetry.io/contrib/instrumentation/github.com/labstack/echo/otelecho`\n  - `go.opentelemetry.io/contrib/instrumentation/gopkg.in/macaron.v1/otelmacaron`\n  - `go.opentelemetry.io/contrib/instrumentation/net/http/httptrace/otelhttptrace`\n  - `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp`\n- Do not modify the origin request in `RoundTripper` in `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp`. (#4033)\n- Handle empty value of `OTEL_PROPAGATORS` environment variable the same way as when the variable is unset in `go.opentelemetry.io/contrib/propagators/autoprop`. (#4101)\n- Fix gRPC service/method URL path parsing discrepancies in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc`. (#4135)\n\n### Deprecated\n\n- The `go.opentelemetry.io/contrib/instrumentation/github.com/astaxie/beego/otelbeego` module is deprecated. (#4092, #4104)\n- The `go.opentelemetry.io/contrib/instrumentation/github.com/go-kit/kit/otelkit` module is deprecated. (#4093, #4104)\n- The `go.opentelemetry.io/contrib/instrumentation/github.com/Shopify/sarama/otelsarama` module is deprecated. (#4099)\n- The `go.opentelemetry.io/contrib/instrumentation/github.com/bradfitz/gomemcache/memcache/otelmemcache` module is deprecated. (#4164)\n- The `go.opentelemetry.io/contrib/instrumentation/github.com/gocql/gocql/otelgocql` module is deprecated. (#4164)\n\n### Removed\n\n- Remove `Handler` type in `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp`. (#2964)\n\n## [1.17.0/0.42.0/0.11.0] - 2023-05-23\n\n### Changed\n\n- Use `strings.Cut()` instead of `string.SplitN()` for better readability and memory use. (#3822)\n\n## [1.17.0-rc.1/0.42.0-rc.1/0.11.0-rc.1] - 2023-05-17\n\n### Changed\n\n- Upgrade dependencies of OpenTelemetry Go to use the new [`v1.16.0-rc.1`/`v0.39.0-rc.1` release](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v1.16.0-rc.1).\n- Remove `semver:` prefix from instrumentation version. (#3681, #3798)\n\n### Deprecated\n\n- `SemVersion` functions in instrumentation packages are deprecated, use `Version` instead. (#3681, #3798)\n\n## [1.16.1/0.41.1/0.10.1] - 2023-05-02\n\n### Added\n\n- The `WithPublicEndpoint` and `WithPublicEndpointFn` options in `go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux`. (#3661)\n\n### Changed\n\n- Upgrade dependencies of OpenTelemetry Go to use the new [`v1.15.1`/`v0.38.1` release](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v1.15.1)\n\n### Fixed\n\n- AWS XRay Remote Sampling to preserve previous rule if updated rule property has not changed in `go.opentelemetry.io/contrib/samplers/aws/xray`. (#3619, #3620)\n\n## [1.16.0/0.41.0/0.10.0] - 2023-04-28\n\n### Added\n\n- AWS SDK add `rpc.system` attribute in `go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws`. (#3582, #3617)\n\n### Changed\n\n- Update `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc` to align gRPC server span status with the changes in the OpenTelemetry specification. (#3685)\n- Adding the `db.statement` tag to spans in `go.opentelemetry.io/contrib/instrumentation/go.mongodb.org/mongo-driver/mongo/otelmongo` is now disabled by default. (#3519)\n\n### Fixed\n\n- The error received by `otelecho` middleware is then passed back to upstream middleware instead of being swallowed. (#3656)\n- Prevent taking from reservoir in AWS XRay Remote Sampler when there is zero capacity in `go.opentelemetry.io/contrib/samplers/aws/xray`. (#3684)\n- Fix `otelhttp.Handler` in `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp` to propagate multiple `WriteHeader` calls while persisting the initial `statusCode`. (#3580)\n\n## [1.16.0-rc.2/0.41.0-rc.2/0.10.0-rc.2] - 2023-03-23\n\n### Added\n\n- The `WithPublicEndpoint` and `WithPublicEndpointFn` options in `go.opentelemetry.io/contrib/instrumentation/github.com/emicklei/go-restful/otelrestful`. (#3563)\n\n### Fixed\n\n- AWS SDK rename attributes `aws.operation`, `aws.service` to `rpc.method`,`rpc.service` in `go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws`. (#3582, #3617)\n- AWS SDK span name to be of the format `Service.Operation` in `go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws`. (#3582, #3521)\n- Prevent sampler configuration reset from erroneously sampling first span in `go.opentelemetry.io/contrib/samplers/jaegerremote`. (#3603, #3604)\n\n## [1.16.0-rc.1/0.41.0-rc.1/0.10.0-rc.1] - 2023-03-02\n\n### Changed\n\n- Dropped compatibility testing for [Go 1.18].\n  The project no longer guarantees support for this version of Go. (#3516)\n\n## [1.15.0/0.40.0/0.9.0] - 2023-02-27\n\nThis release is the last to support [Go 1.18].\nThe next release will require at least [Go 1.19].\n\n### Added\n\n- Support [Go 1.20]. (#3372)\n- Add `SpanNameFormatter` option to package `go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin`. (#3343)\n\n### Changed\n\n- Change to use protobuf parser instead of encoding/json to accept enums as strings in `go.opentelemetry.io/contrib/samplers/jaegerremote`. (#3183)\n\n### Fixed\n\n- Remove use of deprecated `\"math/rand\".Seed` in `go.opentelemetry.io/contrib/instrumentation/github.com/Shopify/sarama/otelsarama/example/producer`. (#3396)\n- Do not assume \"aws\" partition in ecs detector to prevent panic in `go.opentelemetry.io/contrib/detectors/aws/ecs`. (#3167)\n- The span name of producer spans from `go.opentelemetry.io/contrib/instrumentation/github.com/Shopify/sarama/otelsarama` is corrected to use `publish` instead of `send`. (#3369)\n- Attribute types are corrected in `go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws`. (#3369)\n  - `aws.dynamodb.table_names` is now a string slice value.\n  - `aws.dynamodb.global_secondary_indexes` is now a string slice value.\n  - `aws.dynamodb.local_secondary_indexes` is now a string slice value.\n  - `aws.dynamodb.attribute_definitions` is now a string slice value.\n  - `aws.dynamodb.global_secondary_index_updates` is now a string slice value.\n  - `aws.dynamodb.provisioned_read_capacity` is now a `float64` value.\n  - `aws.dynamodb.provisioned_write_capacity` is now a `float64` value.\n\n## [1.14.0/0.39.0/0.8.0] - 2023-02-07\n\n### Changed\n\n- Change `runtime.uptime` instrument in `go.opentelemetry.io/contrib/instrumentation/runtime` from `Int64ObservableUpDownCounter` to `Int64ObservableCounter`,\n since the value is monotonic. (#3347)\n- `samplers/jaegerremote`: change to use protobuf parser instead of encoding/json to accept enums as strings. (#3183)\n\n### Fixed\n\n- The GCE detector in `go.opentelemetry.io/contrib/detectors/gcp` includes the \"cloud.region\" attribute when appropriate. (#3367)\n\n## [1.13.0/0.38.0/0.7.0] - 2023-01-30\n\n### Added\n\n- Add `WithSpanNameFormatter` to `go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux` to allow customizing span names. (#3041)\n- Add missing recommended AWS Lambda resource attributes `faas.instance` and `faas.max_memory` in `go.opentelemetry.io/contrib/detectors/aws/lambda`. (#3148)\n- Improve documentation for `go.opentelemetry.io/contrib/samplers/jaegerremote` by providing examples of sampling endpoints. (#3147)\n- Add `WithServerName` to `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp` to set the primary server name of a `Handler`. (#3182)\n\n### Changed\n\n- Remove expensive calculation of uncompressed message size attribute in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc`. (#3168)\n- Upgrade all `semconv` packages to use `v1.17.0`. (#3182)\n- Upgrade dependencies of OpenTelemetry Go to use the new [`v1.12.0`/`v0.35.0` release](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v1.12.0). (#3190, #3170)\n\n## [1.12.0/0.37.0/0.6.0]\n\n### Added\n\n- Implemented retrieving the [`aws.ecs.*` resource attributes](https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/cloud_provider/aws/ecs/) in `go.opentelemetry.io/detectors/aws/ecs` based on the ECS Metadata v4 endpoint. (#2626)\n- The `WithLogger` option to `go.opentelemetry.io/contrib/samplers/jaegerremote` to allow users to pass a `logr.Logger` and have operations logged. (#2566)\n- Add the `messaging.url` & `messaging.system` attributes to all appropriate SQS operations in the `go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws` package. (#2879)\n- Add example use of the metrics signal to `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp/example`. (#2610)\n- [otelgin] Add support for filters to the `go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin` package to provide the way to control which inbound requests are traced. (#2965, #2963)\n\n### Fixed\n\n- Set the status_code span attribute even if the HTTP handler hasn't written anything. (#2822)\n- Do not wrap http.NoBody in `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp`, which fixes handling of that special request body. (#2983)\n\n## [1.11.1/0.36.4/0.5.2]\n\n### Added\n\n- Add trace context propagation support to `instrumentation/github.com/aws/aws-sdk-go-v2/otelaws` (#2856).\n- [otelgrpc] Add `WithMeterProvider` function to enable metric and add metric `rpc.server.duration` to otelgrpc instrumentation library. (#2700)\n\n### Changed\n\n- Upgrade dependencies of OpenTelemetry Go to use the new [`v1.11.1`/`v0.33.0` release](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v1.11.1)\n\n## [1.11.0/0.36.3/0.5.1]\n\n### Changed\n\n- Upgrade dependencies of the OpenTelemetry Go Metric SDK to use the new [`v1.11.0`/`v0.32.3` release](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v1.11.0)\n\n## [0.36.2]\n\n### Changed\n\n- Upgrade dependencies of the OpenTelemetry Go Metric SDK to use the new [`v0.32.2` release](https://github.com/open-telemetry/opentelemetry-go/releases/tag/sdk%2Fmetric%2Fv0.32.2)\n- Avoid getting a new Tracer for every RPC in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc`. (#2835)\n- Conditionally compute message size for tracing events using proto v2 API rather than legacy v1 API in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc`. (#2647)\n\n### Deprecated\n\n- The `Inject` function in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc` is deprecated. (#2838)\n- The `Extract` function in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc` is deprecated. (#2838)\n\n## [0.36.1]\n\n### Changed\n\n- Upgrade dependencies of the OpenTelemetry Go Metric SDK to use the new [`v0.32.1` release](https://github.com/open-telemetry/opentelemetry-go/releases/tag/sdk%2Fmetric%2Fv0.32.1)\n\n### Removed\n\n- Drop support for Go 1.17.\n  The project currently only supports Go 1.18 and above. (#2785)\n\n## [0.36.0]\n\n### Changed\n\n- Upgrade dependencies of the OpenTelemetry Go Metric SDK to use the new [`v0.32.0` release](https://github.com/open-telemetry/opentelemetry-go/releases/tag/sdk%2Fmetric%2Fv0.32.0). (#2781, #2756, #2758, #2760, #2762)\n\n## [1.10.0/0.35.0/0.5.0]\n\n### Changed\n\n- Rename the `Typ` field of `\"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc\".InterceptorInfo` to `Type`. (#2688)\n- Use Go 1.19 as the default version for CI testing/linting. (#2675)\n\n### Fixed\n\n- Fix the Jaeger propagator rejecting trace IDs that are both shorter than 128 bits and not exactly 64 bits long (while not being 0).\n  Also fix the propagator rejecting span IDs shorter than 64 bits.\n  This fixes compatibility with Jaeger clients encoding trace and span IDs as variable-length hex strings, [as required by the Jaeger propagation format](https://www.jaegertracing.io/docs/1.37/client-libraries/#value). (#2731)\n\n## [1.9.0/0.34.0/0.4.0] - 2022-08-02\n\n### Added\n\n- Add gRPC trace `Filter` to the `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc` package to provide the way to filter the traces automatically generated in interceptors. (#2572)\n- The `TextMapPropagator` function to `go.opentelemetry.io/contrib/propagators/autoprop`.\n  This function is used to return a composite `TextMapPropagator` from registered names (instead of having to specify with an environment variable). (#2593)\n\n### Changed\n\n- Upgraded all `semconv` package use to `v1.12.0`. (#2589)\n\n## [1.8.0/0.33.0] - 2022-07-08\n\n### Added\n\n- The `go.opentelemetry.io/contrib/propagators/autoprop` package to provide configuration of propagators with useful defaults and envar support. (#2258)\n- `WithPublicEndpointFn` hook to dynamically detect public HTTP requests and set their trace parent as a link. (#2342)\n\n### Fixed\n\n- Fix the `otelhttp`, `otelgin`, `otelmacaron`, `otelrestful` middlewares\n  by using `SpanKindServer` when deciding the `SpanStatus`.\n  This makes `4xx` response codes to not be an error anymore. (#2427)\n\n## [1.7.0/0.32.0] - 2022-04-28\n\n### Added\n\n- Consistent probability sampler implementation. (#1379)\n\n### Changed\n\n- Upgraded all `semconv` package use to `v1.10.0`.\n  This includes a backwards incompatible change for the `otelgocql` package to conform with the specification [change](https://github.com/open-telemetry/opentelemetry-specification/pull/1973).\n  The `db.cassandra.keyspace` attribute is now transmitted as the `db.name` attribute. (#2222)\n\n### Fixed\n\n- Fix the `otelmux` middleware by using `SpanKindServer` when deciding the `SpanStatus`.\n  This makes `4xx` response codes to not be an error anymore. (#1973)\n- Fixed jaegerremote sampler not behaving properly with per operation strategy set. (#2137)\n- Stopped injecting propagation context into response headers in otelhttp. (#2180)\n- Fix issue where attributes for DynamoDB were not added because of a string miss match. (#2272)\n\n### Removed\n\n- Drop support for Go 1.16.\n  The project currently only supports Go 1.17 and above. (#2314)\n\n## [1.6.0/0.31.0] - 2022-03-28\n\n### Added\n\n- The project is now tested against Go 1.18 (in addition to the existing 1.16 and 1.17) (#1976)\n\n### Changed\n\n- Upgraded all dependencies on stable modules from `go.opentelemetry.io/otel` from v1.5.0 to v1.6.1. (#2134)\n- Upgraded all dependencies on metric modules from `go.opentelemetry.io/otel` from v0.27.0 to v0.28.0. (#1977)\n\n### Fixed\n\n- otelhttp: Avoid panic by adding nil check to `wrappedBody.Close` (#2164)\n\n## [1.5.0/0.30.0/0.1.0] - 2022-03-16\n\n### Added\n\n- Added the `go.opentelemetry.io/contrib/samplers/jaegerremote` package.\n  This package implements the Jaeger remote sampler for OpenTelemetry Go. (#936)\n- DynamoDB spans created with the `go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws` package now have the appropriate database attributes added for the operation being performed.\n  These attributes are detected automatically, but it is also now possible to provide a custom function to set attributes using `WithAttributeSetter`. (#1582)\n- Add resource detector for GCP cloud function. (#1584)\n- Add OpenTracing baggage extraction to the OpenTracing propagator in `go.opentelemetry.io/contrib/propagators/ot`. (#1880)\n\n### Fixed\n\n- Fix the `echo` middleware by using `SpanKind.SERVER` when deciding the `SpanStatus`.\n  This makes `4xx` response codes to not be an error anymore. (#1848)\n\n### Removed\n\n- The deprecated `go.opentelemetry.io/contrib/exporters/metric/datadog` module is removed. (#1920)\n- The deprecated `go.opentelemetry.io/contrib/exporters/metric/dogstatsd` module is removed. (#1920)\n- The deprecated `go.opentelemetry.io/contrib/exporters/metric/cortex` module is removed.\n  Use the `go.opentelemetry.io/otel/exporters/otlp/otlpmetric` exporter as a replacement to send data to a collector which can then export with its PRW exporter. (#1920)\n\n## [1.4.0/0.29.0] - 2022-02-14\n\n### Added\n\n- Add `WithClientTrace` option to `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp`. (#875)\n\n### Changed\n\n- All metric instruments from the `go.opentelemetry.io/contrib/instrumentation/runtime` package have been renamed from `runtime.go.*` to `process.runtime.go.*` so as to comply with OpenTelemetry semantic conventions. (#1549)\n\n### Fixed\n\n- Change the `http-server-duration` instrument in `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp` to record milliseconds instead of microseconds.\n  This changes fixes the code to comply with the OpenTelemetry specification. (#1414, #1537)\n- Fixed the region reported by the `\"go.opentelemetry.io/contrib/detectors/gcp\".CloudRun` detector to comply with the OpenTelemetry specification.\n  It no longer includes the project scoped region path, instead just the region. (#1546)\n- The `\"go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp\".Transport` type now correctly handles protocol switching responses.\n  The returned response body implements the `io.ReadWriteCloser` interface if the underlying one does.\n  This ensures that protocol switching requests receive a response body that they can write to. (#1329, #1628)\n\n### Deprecated\n\n- The `go.opentelemetry.io/contrib/exporters/metric/datadog` module is deprecated. (#1639)\n- The `go.opentelemetry.io/contrib/exporters/metric/dogstatsd` module is deprecated. (#1639)\n- The `go.opentelemetry.io/contrib/exporters/metric/cortex` module is deprecated.\n  Use the go.opentelemetry.io/otel/exporters/otlp/otlpmetric exporter as a replacement to send data to a collector which can then export with its PRW exporter. (#1639)\n\n### Removed\n\n- Remove the `MinMaxSumCount` from cortex and datadog exporter. (#1554)\n- The `go.opentelemetry.io/contrib/exporters/metric/dogstatsd` exporter no longer support exporting histogram or exact data points. (#1639)\n- The `go.opentelemetry.io/contrib/exporters/metric/datadog` exporter no longer support exporting exact data points. (#1639)\n\n## [1.3.0/0.28.0] - 2021-12-10\n\n### \u26a0\ufe0f Notice \u26a0\ufe0f\n\nWe have updated the project minimum supported Go version to 1.16\n\n### Changed\n\n- `otelhttptrace.NewClientTrace` now uses `TracerProvider` from the parent context if one exists and none was set with `WithTracerProvider` (#874)\n\n### Fixed\n\n- The `\"go.opentelemetry.io/contrib/detector/aws/ecs\".Detector` no longer errors if not running in ECS. (#1428)\n- `go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux`\n  does not require instrumented HTTP handlers to call `Write` nor\n  `WriteHeader` anymore. (#1443)\n\n## [1.2.0/0.27.0] - 2021-11-15\n\n### Changed\n\n- Update dependency on the `go.opentelemetry.io/otel` project to `v1.2.0`.\n- `go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-lambda-go/otellambda/xrayconfig`\n  updated to ensure access to the `TracerProvider`.\n  - A `NewTracerProvider()` function is available to construct a recommended\n    `TracerProvider` configuration.\n  - `AllRecommendedOptions()` has been renamed to `WithRecommendedOptions()`\n    and takes a `TracerProvider` as an argument.\n  - `EventToCarrier()` and `Propagator()` are now `WithEventToCarrier()` and\n    `WithPropagator()` to reflect that they return `Option` implementations.\n\n## [1.1.1/0.26.1] - 2021-11-04\n\n### Changed\n\n- The `Transport`, `Handler`, and HTTP client convenience wrappers in the `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp` package now use the `TracerProvider` from the parent context if one exists and none was explicitly set when configuring the instrumentation. (#873)\n- Semantic conventions now use `go.opentelemetry.io/otel/semconv/v1.7.0\"`. (#1385)\n\n## [1.1.0/0.26.0] - 2021-10-28\n\nUpdate dependency on the `go.opentelemetry.io/otel` project to `v1.1.0`.\n\n### Added\n\n- Add instrumentation for the `github.com/aws/aws-lambda-go` package. (#983)\n- Add resource detector for AWS Lambda. (#983)\n- Add `WithTracerProvider` option for `otelhttptrace.NewClientTrace`. (#1128)\n- Add optional AWS X-Ray configuration module for AWS Lambda Instrumentation. (#984)\n\n### Fixed\n\n- The `go.opentelemetry.io/contrib/propagators/ot` propagator returns the words `true` or `false` for the `ot-tracer-sampled` header instead of numerical `0` and `1`. (#1358)\n\n## [1.0.0/0.25.0] - 2021-10-06\n\n- Resource detectors and propagators (with the exception of `go.\n  opentelemetry.io/contrib/propagators/opencensus`) are now stable and\n  released at v1.0.0.\n- Update dependency on the `go.opentelemetry.io/otel` project to `v1.0.1`.\n- Update dependency on `go.opentelemetry.io/otel/metric` to `v0.24.0`.\n\n## [0.24.0] - 2021-09-21\n\n- Update dependency on the `go.opentelemetry.io/otel` project to `v1.0.0`.\n\n## [0.23.0] - 2021-09-08\n\n### Added\n\n- Add `WithoutSubSpans`, `WithRedactedHeaders`, `WithoutHeaders`, and `WithInsecureHeaders` options for `otelhttptrace.NewClientTrace`. (#879)\n\n### Changed\n\n- Split `go.opentelemetry.io/contrib/propagators` module into `b3`, `jaeger`, `ot` modules. (#985)\n- `otelmongodb` span attributes, name and span status now conform to specification. (#769)\n- Migrated EC2 resource detector support from root module `go.opentelemetry.io/contrib/detectors/aws` to a separate EC2 resource detector module `go.opentelemetry.io/contrib/detectors/aws/ec2` (#1017)\n- Add `cloud.provider` and `cloud.platform` to AWS detectors. (#1043)\n- `otelhttptrace.NewClientTrace` now redacts known sensitive headers by default. (#879)\n\n### Fixed\n\n- Fix span not marked as error in `otelhttp.Transport` when `RoundTrip` fails with an error. (#950)\n\n## [0.22.0] - 2021-07-26\n\n### Added\n\n- Add the `zpages` span processor. (#894)\n\n### Changed\n\n- The `b3.B3` type has been removed.\n  `b3.New()` and `b3.WithInjectEncoding(encoding)` are added to replace it. (#868)\n\n### Fixed\n\n- Fix deadlocks and race conditions in `otelsarama.WrapAsyncProducer`.\n  The `messaging.message_id` and `messaging.kafka.partition` attributes are now not set if a message was not processed. (#754) (#755) (#881)\n- Fix `otelsarama.WrapAsyncProducer` so that the messages from the `Errors` channel contain the original `Metadata`. (#754)\n\n## [0.21.0] - 2021-06-18\n\n### Fixed\n\n- Dockerfile based examples for `otelgin` and `otelmacaron`. (#767)\n\n### Changed\n\n- Supported minimum version of Go bumped from 1.14 to 1.15. (#787)\n- EKS Resource Detector now use the Kubernetes Go client to obtain the ConfigMap. (#813)\n\n### Removed\n\n- Remove service name from `otelmongodb` configuration and span attributes. (#763)\n\n## [0.20.0] - 2021-04-23\n\n### Changed\n\n- The `go.opentelemetry.io/contrib/instrumentation/go.mongodb.org/mongo-driver/mongo/otelmongo` instrumentation now accepts a `WithCommandAttributeDisabled`,\n   so the caller can specify whether to opt-out of tracing the mongo command. (#712)\n- Upgrade to v0.20.0 of `go.opentelemetry.io/otel`. (#758)\n- The B3 and Jaeger propagators now store their debug or deferred state in the context.Context instead of the SpanContext. (#758)\n\n## [0.19.0] - 2021-03-19\n\n### Changed\n\n- Upgrade to v0.19.0 of `go.opentelemetry.io/otel`.\n- Fix Span names created in HTTP Instrumentation package to conform with guidelines. (#757)\n\n## [0.18.0] - 2021-03-04\n\n### Fixed\n\n- `otelmemcache` no longer sets span status to OK instead of leaving it unset. (#477)\n- Fix goroutine leak in gRPC `StreamClientInterceptor`. (#581)\n\n### Removed\n\n- Remove service name from `otelmemcache` configuration and span attributes. (#477)\n\n## [0.17.0] - 2021-02-15\n\n### Added\n\n- Add `ot-tracer` propagator (#562)\n\n### Changed\n\n- Rename project default branch from `master` to `main`.\n\n### Fixed\n\n- Added failure message for AWS ECS resource detector for better debugging (#568)\n- Goroutine leak in gRPC StreamClientInterceptor while streamer returns an error. (#581)\n\n## [0.16.0] - 2021-01-13\n\n### Fixed\n\n- Fix module path for AWS ECS resource detector (#517)\n\n## [0.15.1] - 2020-12-14\n\n### Added\n\n- Add registry link check to `Makefile` and pre-release script. (#446)\n- A new AWS X-Ray ID Generator (#459)\n- Migrate CircleCI jobs to GitHub Actions (#476)\n- Add CodeQL GitHub Action (#506)\n- Add gosec workflow to GitHub Actions (#507)\n\n### Fixed\n\n- Fixes the body replacement in otelhttp to not to mutate a nil body. (#484)\n\n## [0.15.0] - 2020-12-11\n\n### Added\n\n- A new Amazon EKS resource detector. (#465)\n- A new `gcp.CloudRun` detector for detecting resource from a Cloud Run instance. (#455)\n\n## [0.14.0] - 2020-11-20\n\n### Added\n\n- `otelhttp.{Get,Head,Post,PostForm}` convenience wrappers for their `http` counterparts. (#390)\n- The AWS detector now adds the cloud zone, host image ID, host type, and host name to the returned `Resource`. (#410)\n- Add Amazon ECS Resource Detector for AWS X-Ray. (#466)\n- Add propagator for AWS X-Ray (#462)\n\n### Changed\n\n- Add semantic version to `Tracer` / `Meter` created by instrumentation packages `otelsaram`, `otelrestful`, `otelmongo`, `otelhttp` and `otelhttptrace`. (#412)\n- Update instrumentation guidelines about tracer / meter semantic version. (#412)\n- Replace internal tracer and meter helpers by helpers from `go.opentelemetry.io/otel`. (#414)\n- gRPC instrumentation sets span attribute `rpc.grpc.status_code`. (#453)\n\n## Fixed\n\n- `/detectors/aws` no longer fails if instance metadata is not available (e.g. not running in AWS) (#401)\n- The AWS detector now returns a partial resource and an appropriate error if it encounters an error part way through determining a `Resource` identity. (#410)\n- The `host` instrumentation unit test has been updated to not depend on the system it runs on. (#426)\n\n## [0.13.0] - 2020-10-09\n\n## Added\n\n- A Jaeger propagator. (#375)\n\n## Changed\n\n- The `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc` package instrumentation no longer accepts a `Tracer` as an argument to the interceptor function.\n   Instead, a new `WithTracerProvider` option is added to configure the `TracerProvider` used when creating the `Tracer` for the instrumentation. (#373)\n- The `go.opentelemetry.io/contrib/instrumentation/gopkg.in/macaron.v1/otelmacaron` instrumentation now accepts a `TracerProvider` rather than a `Tracer`. (#374)\n- Remove `go.opentelemetry.io/otel/sdk` dependency from instrumentation. (#381)\n- Use `httpsnoop` in `go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux` to ensure `http.ResponseWriter` additional interfaces are preserved. (#388)\n\n### Fixed\n\n- The `go.opentelemetry.io/contrib/instrumentation/github.com/labstack/echo/otelecho.Middleware` no longer sends duplicate errors to the global `ErrorHandler`. (#377, #364)\n- The import comment in `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp` is now correctly quoted. (#379)\n- The B3 propagator sets the sample bitmask when the sampling decision is `debug`. (#369)\n\n## [0.12.0] - 2020-09-25\n\n### Added\n\n- Benchmark tests for the gRPC instrumentation. (#296)\n- Integration testing for the gRPC instrumentation. (#297)\n- Allow custom labels to be added to net/http metrics. (#306)\n- Added B3 propagator, moving it out of open.telemetry.io/otel repo. (#344)\n\n### Changed\n\n- Unify instrumentation about provider options for `go.mongodb.org/mongo-driver`, `gin-gonic/gin`, `gorilla/mux`,\n  `labstack/echo`, `emicklei/go-restful`, `bradfitz/gomemcache`, `Shopify/sarama`, `net/http` and `beego`. (#303)\n- Update instrumentation guidelines about uniform provider options. Also, update style guide. (#303)\n- Make config struct of instrumentation unexported. (#303)\n- Instrumentations have been updated to adhere to the [configuration style guide's](https://github.com/open-telemetry/opentelemetry-go/blob/master/CONTRIBUTING.md#config)\n   updated recommendation to use `newConfig()` instead of `configure()`. (#336)\n- A new instrumentation naming scheme is implemented to avoid package name conflicts for instrumented packages while still remaining discoverable. (#359)\n  - `google.golang.org/grpc` -> `google.golang.org/grpc/otelgrpc`\n  - `go.mongodb.org/mongo-driver` -> `go.mongodb.org/mongo-driver/mongo/otelmongo`\n  - `net/http` -> `net/http/otelhttp`\n  - `net/http/httptrace` -> `net/http/httptrace/otelhttptrace`\n  - `github.com/labstack/echo` -> `github.com/labstack/echo/otelecho`\n  - `github.com/bradfitz/gomemcache` -> `github.com/bradfitz/gomemcache/memcache/otelmemcache`\n  - `github.com/gin-gonic/gin` -> `github.com/gin-gonic/gin/otelgin`\n  - `github.com/gocql/gocql` -> `github.com/gocql/gocql/otelgocql`\n  - `github.com/emicklei/go-restful` -> `github.com/emicklei/go-restful/otelrestful`\n  - `github.com/Shopify/sarama` -> `github.com/Shopify/sarama/otelsarama`\n  - `github.com/gorilla/mux` -> `github.com/gorilla/mux/otelmux`\n  - `github.com/astaxie/beego` -> `github.com/astaxie/beego/otelbeego`\n  - `gopkg.in/macaron.v1` -> `gopkg.in/macaron.v1/otelmacaron`\n- Rename `OTelBeegoHandler` to `Handler` in the `go.opentelemetry.io/contrib/instrumentation/github.com/astaxie/beego/otelbeego` package. (#359)\n- Replace `WithTracer` with `WithTracerProvider` in the `go.opentelemetry.io/contrib/instrumentation/gopkg.in/macaron.v1/otelmacaron` instrumentation. (#374)\n\n## [0.11.0] - 2020-08-25\n\n### Added\n\n- Top-level `Version()` and `SemVersion()` functions defining the current version of the contrib package. (#225)\n- Instrumentation for the `github.com/astaxie/beego` package. (#200)\n- Instrumentation for the `github.com/bradfitz/gomemcache` package. (#204)\n- Host metrics instrumentation. (#231)\n- Cortex histogram and distribution support. (#237)\n- Cortex example project. (#238)\n- Cortex HTTP authentication. (#246)\n\n### Changed\n\n- Remove service name as a parameter of Sarama instrumentation. (#221)\n- Replace `WithTracer` with `WithTracerProvider` in Sarama instrumentation. (#221)\n- Switch to use common top-level module `SemVersion()` when creating versioned tracer in `bradfitz/gomemcache`. (#226)\n- Use `IntegrationShouldRun` in `gomemcache_test`. (#254)\n- Use Go 1.15 for CI builds. (#236)\n- Improved configuration for `runtime` instrumentation. (#224)\n\n### Fixed\n\n- Update dependabot configuration to include newly added `bradfitz/gomemcache` package. (#226)\n- Correct `runtime` instrumentation name. (#241)\n\n## [0.10.1] - 2020-08-13\n\n### Added\n\n- The `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc` module has been added to replace the instrumentation that had previoiusly existed in the `go.opentelemetry.io/otel/instrumentation/grpctrace` package. (#189)\n- Instrumentation for the stdlib `net/http` and `net/http/httptrace` packages. (#190)\n- Initial Cortex exporter. (#202, #205, #210, #211, #215)\n\n### Fixed\n\n- Bump google.golang.org/grpc from 1.30.0 to 1.31.0. (#166)\n- Bump go.mongodb.org/mongo-driver from 1.3.5 to 1.4.0 in /instrumentation/go.mongodb.org/mongo-driver. (#170)\n- Bump google.golang.org/grpc in /instrumentation/github.com/gin-gonic/gin. (#173)\n- Bump google.golang.org/grpc in /instrumentation/github.com/labstack/echo. (#176)\n- Bump google.golang.org/grpc from 1.30.0 to 1.31.0 in /instrumentation/github.com/Shopify/sarama. (#179)\n- Bump cloud.google.com/go from 0.61.0 to 0.63.0 in /detectors/gcp. (#181, #199)\n- Bump github.com/aws/aws-sdk-go from 1.33.15 to 1.34.1 in /detectors/aws. (#184, #192, #193, #198, #201, #203)\n- Bump github.com/golangci/golangci-lint from 1.29.0 to 1.30.0 in /tools. (#186)\n- Setup CI to run tests that require external resources (Cassandra and MongoDB). (#191)\n- Bump github.com/Shopify/sarama from 1.26.4 to 1.27.0 in /instrumentation/github.com/Shopify/sarama. (#206)\n\n## [0.10.0] - 2020-07-31\n\nThis release upgrades its [go.opentelemetry.io/otel](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v0.10.0) dependency to v0.10.0 and includes new instrumentation for popular Kafka and Cassandra clients.\n\n### Added\n\n- A detector that generate resources from GCE instance. (#132)\n- A detector that generate resources from AWS instances. (#139)\n- Instrumentation for the Kafka client github.com/Shopify/sarama. (#134, #153)\n- Links and status message for mock span in the internal testing library. (#134)\n- Instrumentation for the Cassandra client github.com/gocql/gocql. (#137)\n- A detector that generate resources from GKE clusters. (#154)\n\n### Fixed\n\n- Bump github.com/aws/aws-sdk-go from 1.33.8 to 1.33.15 in /detectors/aws. (#155, #157, #159, #162)\n- Bump github.com/golangci/golangci-lint from 1.28.3 to 1.29.0 in /tools. (#146)\n\n## [0.9.0] - 2020-07-20\n\nThis release upgrades its [go.opentelemetry.io/otel](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v0.9.0) dependency to v0.9.0.\n\n### Fixed\n\n- Bump github.com/emicklei/go-restful/v3 from 3.0.0 to 3.2.0 in /instrumentation/github.com/emicklei/go-restful. (#133)\n- Update dependabot configuration to correctly check all included packages. (#131)\n- Update `RELEASING.md` with correct `tag.sh` command. (#130)\n\n## [0.8.0] - 2020-07-10\n\nThis release upgrades its [go.opentelemetry.io/otel](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v0.8.0) dependency to v0.8.0, includes minor fixes, and new instrumentation.\n\n### Added\n\n- Create this `CHANGELOG.md`. (#114)\n- Add `emicklei/go-restful/v3` trace instrumentation. (#115)\n\n### Changed\n\n- Update `CONTRIBUTING.md` to ask for updates to `CHANGELOG.md` with each pull request. (#114)\n- Move all `github.com` package instrumentation under a `github.com` directory. (#118)\n\n### Fixed\n\n- Update README to include information about external instrumentation.\n   To start, this includes native instrumentation found in the `go-redis/redis` package. (#117)\n- Bump github.com/golangci/golangci-lint from 1.27.0 to 1.28.2 in /tools. (#122, #123, #125)\n- Bump go.mongodb.org/mongo-driver from 1.3.4 to 1.3.5 in /instrumentation/go.mongodb.org/mongo-driver. (#124)\n\n## [0.7.0] - 2020-06-29\n\nThis release upgrades its [go.opentelemetry.io/otel](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v0.7.0) dependency to v0.7.0.\n\n### Added\n\n- Create `RELEASING.md` instructions. (#101)\n- Apply transitive dependabot go.mod updates as part of a new automatic Github workflow. (#94)\n- New dependabot integration to automate package upgrades. (#61)\n- Add automatic tag generation script for release. (#60)\n\n### Changed\n\n- Upgrade Datadog metrics exporter to include Resource tags. (#46)\n- Added output validation to Datadog example. (#96)\n- Move Macaron package to match layout guidelines. (#92)\n- Update top-level README and instrumentation README. (#92)\n- Bump google.golang.org/grpc from 1.29.1 to 1.30.0. (#99)\n- Bump github.com/golangci/golangci-lint from 1.21.0 to 1.27.0 in /tools. (#77)\n- Bump go.mongodb.org/mongo-driver from 1.3.2 to 1.3.4 in /instrumentation/go.mongodb.org/mongo-driver. (#76)\n- Bump github.com/stretchr/testify from 1.5.1 to 1.6.1. (#74)\n- Bump gopkg.in/macaron.v1 from 1.3.5 to 1.3.9 in /instrumentation/macaron. (#68)\n- Bump github.com/gin-gonic/gin from 1.6.2 to 1.6.3 in /instrumentation/gin-gonic/gin. (#73)\n- Bump github.com/DataDog/datadog-go from 3.5.0+incompatible to 3.7.2+incompatible in /exporters/metric/datadog. (#78)\n- Replaced `internal/trace/http.go` helpers with `api/standard` helpers from otel-go repo. (#112)\n\n## [0.6.1] - 2020-06-08\n\nFirst official tagged release of `contrib` repository.\n\n### Added\n\n- `labstack/echo` trace instrumentation (#42)\n- `mongodb` trace instrumentation (#26)\n- Go Runtime metrics (#9)\n- `gorilla/mux` trace instrumentation (#19)\n- `gin-gonic` trace instrumentation (#15)\n- `macaron` trace instrumentation (#20)\n- `dogstatsd` metrics exporter (#10)\n- `datadog` metrics exporter (#22)\n- Tags to all modules in repository\n- Repository folder structure and automated build (#3)\n\n### Changes\n\n- Prefix support for dogstatsd (#34)\n- Update Go Runtime package to use batch observer (#44)\n\n[Unreleased]: https://github.com/open-telemetry/opentelemetry-go-contrib/compare/v1.20.0...HEAD\n[1.20.0/0.45.0/0.14.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.20.0\n[1.19.0/0.44.0/0.13.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.19.0\n[1.18.0/0.43.0/0.12.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.18.0\n[1.17.0/0.42.0/0.11.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.17.0\n[1.17.0-rc.1/0.42.0-rc.1/0.11.0-rc.1]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.17.0-rc.1\n[1.16.1/0.41.1/0.10.1]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.16.1\n[1.16.0/0.41.0/0.10.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.16.0\n[1.16.0-rc.2/0.41.0-rc.2/0.10.0-rc.2]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.16.0-rc.2\n[1.16.0-rc.1/0.41.0-rc.1/0.10.0-rc.1]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.16.0-rc.1\n[1.15.0/0.40.0/0.9.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.15.0\n[1.14.0/0.39.0/0.8.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.14.0\n[1.13.0/0.38.0/0.7.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.13.0\n[1.12.0/0.37.0/0.6.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.12.0\n[1.11.1/0.36.4/0.5.2]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.11.1\n[1.11.0/0.36.3/0.5.1]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.11.0\n[0.36.2]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/zpages/v0.36.2\n[0.36.1]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/zpages/v0.36.1\n[0.36.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/zpages/v0.36.0\n[1.10.0/0.35.0/0.5.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.10.0\n[1.9.0/0.34.0/0.4.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.9.0\n[1.8.0/0.33.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.8.0\n[1.7.0/0.32.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.7.0\n[1.6.0/0.31.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.6.0\n[1.5.0/0.30.0/0.1.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.5.0\n[1.4.0/0.29.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.4.0\n[1.3.0/0.28.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.3.0\n[1.2.0/0.27.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.2.0\n[1.1.1/0.26.1]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.1.1\n[1.1.0/0.26.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.1.0\n[1.0.0/0.25.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.0.0\n[0.24.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.24.0\n[0.23.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.23.0\n[0.22.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.22.0\n[0.21.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.21.0\n[0.20.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.20.0\n[0.19.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.19.0\n[0.18.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.18.0\n[0.17.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.17.0\n[0.16.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.16.0\n[0.15.1]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.15.1\n[0.15.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.15.0\n[0.14.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.14.0\n[0.13.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.13.0\n[0.12.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.12.0\n[0.11.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.11.0\n[0.10.1]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.10.1\n[0.10.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.10.0\n[0.9.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.9.0\n[0.8.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.8.0\n[0.7.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.7.0\n[0.6.1]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.6.1\n\n[Go 1.20]: https://go.dev/doc/go1.20\n[Go 1.19]: https://go.dev/doc/go1.19\n[Go 1.18]: https://go.dev/doc/go1.18\n", "// Copyright The OpenTelemetry Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage otelgrpc // import \"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc\"\n\n// gRPC tracing middleware\n// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/rpc.md\nimport (\n\t\"context\"\n\t\"io\"\n\t\"net\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\tgrpc_codes \"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/peer\"\n\t\"google.golang.org/grpc/status\"\n\t\"google.golang.org/protobuf/proto\"\n\n\t\"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc/internal\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/metric\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.17.0\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\ntype messageType attribute.KeyValue\n\n// Event adds an event of the messageType to the span associated with the\n// passed context with a message id.\nfunc (m messageType) Event(ctx context.Context, id int, _ interface{}) {\n\tspan := trace.SpanFromContext(ctx)\n\tif !span.IsRecording() {\n\t\treturn\n\t}\n\tspan.AddEvent(\"message\", trace.WithAttributes(\n\t\tattribute.KeyValue(m),\n\t\tRPCMessageIDKey.Int(id),\n\t))\n}\n\nvar (\n\tmessageSent     = messageType(RPCMessageTypeSent)\n\tmessageReceived = messageType(RPCMessageTypeReceived)\n)\n\n// UnaryClientInterceptor returns a grpc.UnaryClientInterceptor suitable\n// for use in a grpc.Dial call.\nfunc UnaryClientInterceptor(opts ...Option) grpc.UnaryClientInterceptor {\n\tcfg := newConfig(opts, \"client\")\n\ttracer := cfg.TracerProvider.Tracer(\n\t\tinstrumentationName,\n\t\ttrace.WithInstrumentationVersion(Version()),\n\t)\n\n\treturn func(\n\t\tctx context.Context,\n\t\tmethod string,\n\t\treq, reply interface{},\n\t\tcc *grpc.ClientConn,\n\t\tinvoker grpc.UnaryInvoker,\n\t\tcallOpts ...grpc.CallOption,\n\t) error {\n\t\ti := &InterceptorInfo{\n\t\t\tMethod: method,\n\t\t\tType:   UnaryClient,\n\t\t}\n\t\tif cfg.Filter != nil && !cfg.Filter(i) {\n\t\t\treturn invoker(ctx, method, req, reply, cc, callOpts...)\n\t\t}\n\n\t\tname, attr := spanInfo(method, cc.Target())\n\n\t\tstartOpts := append([]trace.SpanStartOption{\n\t\t\ttrace.WithSpanKind(trace.SpanKindClient),\n\t\t\ttrace.WithAttributes(attr...),\n\t\t},\n\t\t\tcfg.SpanStartOptions...,\n\t\t)\n\n\t\tctx, span := tracer.Start(\n\t\t\tctx,\n\t\t\tname,\n\t\t\tstartOpts...,\n\t\t)\n\t\tdefer span.End()\n\n\t\tctx = inject(ctx, cfg.Propagators)\n\n\t\tif cfg.SentEvent {\n\t\t\tmessageSent.Event(ctx, 1, req)\n\t\t}\n\n\t\terr := invoker(ctx, method, req, reply, cc, callOpts...)\n\n\t\tif cfg.ReceivedEvent {\n\t\t\tmessageReceived.Event(ctx, 1, reply)\n\t\t}\n\n\t\tif err != nil {\n\t\t\ts, _ := status.FromError(err)\n\t\t\tspan.SetStatus(codes.Error, s.Message())\n\t\t\tspan.SetAttributes(statusCodeAttr(s.Code()))\n\t\t} else {\n\t\t\tspan.SetAttributes(statusCodeAttr(grpc_codes.OK))\n\t\t}\n\n\t\treturn err\n\t}\n}\n\ntype streamEventType int\n\ntype streamEvent struct {\n\tType streamEventType\n\tErr  error\n}\n\nconst (\n\treceiveEndEvent streamEventType = iota\n\terrorEvent\n)\n\n// clientStream  wraps around the embedded grpc.ClientStream, and intercepts the RecvMsg and\n// SendMsg method call.\ntype clientStream struct {\n\tgrpc.ClientStream\n\n\tdesc       *grpc.StreamDesc\n\tevents     chan streamEvent\n\teventsDone chan struct{}\n\tfinished   chan error\n\n\treceivedEvent bool\n\tsentEvent     bool\n\n\treceivedMessageID int\n\tsentMessageID     int\n}\n\nvar _ = proto.Marshal\n\nfunc (w *clientStream) RecvMsg(m interface{}) error {\n\terr := w.ClientStream.RecvMsg(m)\n\n\tif err == nil && !w.desc.ServerStreams {\n\t\tw.sendStreamEvent(receiveEndEvent, nil)\n\t} else if err == io.EOF {\n\t\tw.sendStreamEvent(receiveEndEvent, nil)\n\t} else if err != nil {\n\t\tw.sendStreamEvent(errorEvent, err)\n\t} else {\n\t\tw.receivedMessageID++\n\n\t\tif w.receivedEvent {\n\t\t\tmessageReceived.Event(w.Context(), w.receivedMessageID, m)\n\t\t}\n\t}\n\n\treturn err\n}\n\nfunc (w *clientStream) SendMsg(m interface{}) error {\n\terr := w.ClientStream.SendMsg(m)\n\n\tw.sentMessageID++\n\n\tif w.sentEvent {\n\t\tmessageSent.Event(w.Context(), w.sentMessageID, m)\n\t}\n\n\tif err != nil {\n\t\tw.sendStreamEvent(errorEvent, err)\n\t}\n\n\treturn err\n}\n\nfunc (w *clientStream) Header() (metadata.MD, error) {\n\tmd, err := w.ClientStream.Header()\n\tif err != nil {\n\t\tw.sendStreamEvent(errorEvent, err)\n\t}\n\n\treturn md, err\n}\n\nfunc (w *clientStream) CloseSend() error {\n\terr := w.ClientStream.CloseSend()\n\tif err != nil {\n\t\tw.sendStreamEvent(errorEvent, err)\n\t}\n\n\treturn err\n}\n\nfunc wrapClientStream(ctx context.Context, s grpc.ClientStream, desc *grpc.StreamDesc, cfg *config) *clientStream {\n\tevents := make(chan streamEvent)\n\teventsDone := make(chan struct{})\n\tfinished := make(chan error)\n\n\tgo func() {\n\t\tdefer close(eventsDone)\n\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase event := <-events:\n\t\t\t\tswitch event.Type {\n\t\t\t\tcase receiveEndEvent:\n\t\t\t\t\tfinished <- nil\n\t\t\t\t\treturn\n\t\t\t\tcase errorEvent:\n\t\t\t\t\tfinished <- event.Err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\tcase <-ctx.Done():\n\t\t\t\tfinished <- ctx.Err()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn &clientStream{\n\t\tClientStream:  s,\n\t\tdesc:          desc,\n\t\tevents:        events,\n\t\teventsDone:    eventsDone,\n\t\tfinished:      finished,\n\t\treceivedEvent: cfg.ReceivedEvent,\n\t\tsentEvent:     cfg.SentEvent,\n\t}\n}\n\nfunc (w *clientStream) sendStreamEvent(eventType streamEventType, err error) {\n\tselect {\n\tcase <-w.eventsDone:\n\tcase w.events <- streamEvent{Type: eventType, Err: err}:\n\t}\n}\n\n// StreamClientInterceptor returns a grpc.StreamClientInterceptor suitable\n// for use in a grpc.Dial call.\nfunc StreamClientInterceptor(opts ...Option) grpc.StreamClientInterceptor {\n\tcfg := newConfig(opts, \"client\")\n\ttracer := cfg.TracerProvider.Tracer(\n\t\tinstrumentationName,\n\t\ttrace.WithInstrumentationVersion(Version()),\n\t)\n\n\treturn func(\n\t\tctx context.Context,\n\t\tdesc *grpc.StreamDesc,\n\t\tcc *grpc.ClientConn,\n\t\tmethod string,\n\t\tstreamer grpc.Streamer,\n\t\tcallOpts ...grpc.CallOption,\n\t) (grpc.ClientStream, error) {\n\t\ti := &InterceptorInfo{\n\t\t\tMethod: method,\n\t\t\tType:   StreamClient,\n\t\t}\n\t\tif cfg.Filter != nil && !cfg.Filter(i) {\n\t\t\treturn streamer(ctx, desc, cc, method, callOpts...)\n\t\t}\n\n\t\tname, attr := spanInfo(method, cc.Target())\n\n\t\tstartOpts := append([]trace.SpanStartOption{\n\t\t\ttrace.WithSpanKind(trace.SpanKindClient),\n\t\t\ttrace.WithAttributes(attr...),\n\t\t},\n\t\t\tcfg.SpanStartOptions...,\n\t\t)\n\n\t\tctx, span := tracer.Start(\n\t\t\tctx,\n\t\t\tname,\n\t\t\tstartOpts...,\n\t\t)\n\n\t\tctx = inject(ctx, cfg.Propagators)\n\n\t\ts, err := streamer(ctx, desc, cc, method, callOpts...)\n\t\tif err != nil {\n\t\t\tgrpcStatus, _ := status.FromError(err)\n\t\t\tspan.SetStatus(codes.Error, grpcStatus.Message())\n\t\t\tspan.SetAttributes(statusCodeAttr(grpcStatus.Code()))\n\t\t\tspan.End()\n\t\t\treturn s, err\n\t\t}\n\t\tstream := wrapClientStream(ctx, s, desc, cfg)\n\n\t\tgo func() {\n\t\t\terr := <-stream.finished\n\n\t\t\tif err != nil {\n\t\t\t\ts, _ := status.FromError(err)\n\t\t\t\tspan.SetStatus(codes.Error, s.Message())\n\t\t\t\tspan.SetAttributes(statusCodeAttr(s.Code()))\n\t\t\t} else {\n\t\t\t\tspan.SetAttributes(statusCodeAttr(grpc_codes.OK))\n\t\t\t}\n\n\t\t\tspan.End()\n\t\t}()\n\n\t\treturn stream, nil\n\t}\n}\n\n// UnaryServerInterceptor returns a grpc.UnaryServerInterceptor suitable\n// for use in a grpc.NewServer call.\nfunc UnaryServerInterceptor(opts ...Option) grpc.UnaryServerInterceptor {\n\tcfg := newConfig(opts, \"server\")\n\ttracer := cfg.TracerProvider.Tracer(\n\t\tinstrumentationName,\n\t\ttrace.WithInstrumentationVersion(Version()),\n\t)\n\n\treturn func(\n\t\tctx context.Context,\n\t\treq interface{},\n\t\tinfo *grpc.UnaryServerInfo,\n\t\thandler grpc.UnaryHandler,\n\t) (interface{}, error) {\n\t\ti := &InterceptorInfo{\n\t\t\tUnaryServerInfo: info,\n\t\t\tType:            UnaryServer,\n\t\t}\n\t\tif cfg.Filter != nil && !cfg.Filter(i) {\n\t\t\treturn handler(ctx, req)\n\t\t}\n\n\t\tctx = extract(ctx, cfg.Propagators)\n\t\tname, attr := spanInfo(info.FullMethod, peerFromCtx(ctx))\n\n\t\tstartOpts := append([]trace.SpanStartOption{\n\t\t\ttrace.WithSpanKind(trace.SpanKindServer),\n\t\t\ttrace.WithAttributes(attr...),\n\t\t},\n\t\t\tcfg.SpanStartOptions...,\n\t\t)\n\n\t\tctx, span := tracer.Start(\n\t\t\ttrace.ContextWithRemoteSpanContext(ctx, trace.SpanContextFromContext(ctx)),\n\t\t\tname,\n\t\t\tstartOpts...,\n\t\t)\n\t\tdefer span.End()\n\n\t\tif cfg.ReceivedEvent {\n\t\t\tmessageReceived.Event(ctx, 1, req)\n\t\t}\n\n\t\tbefore := time.Now()\n\n\t\tresp, err := handler(ctx, req)\n\n\t\ts, _ := status.FromError(err)\n\t\tif err != nil {\n\t\t\tstatusCode, msg := serverStatus(s)\n\t\t\tspan.SetStatus(statusCode, msg)\n\t\t\tif cfg.SentEvent {\n\t\t\t\tmessageSent.Event(ctx, 1, s.Proto())\n\t\t\t}\n\t\t} else {\n\t\t\tif cfg.SentEvent {\n\t\t\t\tmessageSent.Event(ctx, 1, resp)\n\t\t\t}\n\t\t}\n\t\tgrpcStatusCodeAttr := statusCodeAttr(s.Code())\n\t\tspan.SetAttributes(grpcStatusCodeAttr)\n\n\t\telapsedTime := time.Since(before).Milliseconds()\n\t\tattr = append(attr, grpcStatusCodeAttr)\n\t\tcfg.rpcDuration.Record(ctx, float64(elapsedTime), metric.WithAttributes(attr...))\n\n\t\treturn resp, err\n\t}\n}\n\n// serverStream wraps around the embedded grpc.ServerStream, and intercepts the RecvMsg and\n// SendMsg method call.\ntype serverStream struct {\n\tgrpc.ServerStream\n\tctx context.Context\n\n\treceivedMessageID int\n\tsentMessageID     int\n\n\treceivedEvent bool\n\tsentEvent     bool\n}\n\nfunc (w *serverStream) Context() context.Context {\n\treturn w.ctx\n}\n\nfunc (w *serverStream) RecvMsg(m interface{}) error {\n\terr := w.ServerStream.RecvMsg(m)\n\n\tif err == nil {\n\t\tw.receivedMessageID++\n\t\tif w.receivedEvent {\n\t\t\tmessageReceived.Event(w.Context(), w.receivedMessageID, m)\n\t\t}\n\t}\n\n\treturn err\n}\n\nfunc (w *serverStream) SendMsg(m interface{}) error {\n\terr := w.ServerStream.SendMsg(m)\n\n\tw.sentMessageID++\n\tif w.sentEvent {\n\t\tmessageSent.Event(w.Context(), w.sentMessageID, m)\n\t}\n\n\treturn err\n}\n\nfunc wrapServerStream(ctx context.Context, ss grpc.ServerStream, cfg *config) *serverStream {\n\treturn &serverStream{\n\t\tServerStream:  ss,\n\t\tctx:           ctx,\n\t\treceivedEvent: cfg.ReceivedEvent,\n\t\tsentEvent:     cfg.SentEvent,\n\t}\n}\n\n// StreamServerInterceptor returns a grpc.StreamServerInterceptor suitable\n// for use in a grpc.NewServer call.\nfunc StreamServerInterceptor(opts ...Option) grpc.StreamServerInterceptor {\n\tcfg := newConfig(opts, \"server\")\n\ttracer := cfg.TracerProvider.Tracer(\n\t\tinstrumentationName,\n\t\ttrace.WithInstrumentationVersion(Version()),\n\t)\n\n\treturn func(\n\t\tsrv interface{},\n\t\tss grpc.ServerStream,\n\t\tinfo *grpc.StreamServerInfo,\n\t\thandler grpc.StreamHandler,\n\t) error {\n\t\tctx := ss.Context()\n\t\ti := &InterceptorInfo{\n\t\t\tStreamServerInfo: info,\n\t\t\tType:             StreamServer,\n\t\t}\n\t\tif cfg.Filter != nil && !cfg.Filter(i) {\n\t\t\treturn handler(srv, wrapServerStream(ctx, ss, cfg))\n\t\t}\n\n\t\tctx = extract(ctx, cfg.Propagators)\n\t\tname, attr := spanInfo(info.FullMethod, peerFromCtx(ctx))\n\n\t\tstartOpts := append([]trace.SpanStartOption{\n\t\t\ttrace.WithSpanKind(trace.SpanKindServer),\n\t\t\ttrace.WithAttributes(attr...),\n\t\t},\n\t\t\tcfg.SpanStartOptions...,\n\t\t)\n\n\t\tctx, span := tracer.Start(\n\t\t\ttrace.ContextWithRemoteSpanContext(ctx, trace.SpanContextFromContext(ctx)),\n\t\t\tname,\n\t\t\tstartOpts...,\n\t\t)\n\t\tdefer span.End()\n\n\t\terr := handler(srv, wrapServerStream(ctx, ss, cfg))\n\t\tif err != nil {\n\t\t\ts, _ := status.FromError(err)\n\t\t\tstatusCode, msg := serverStatus(s)\n\t\t\tspan.SetStatus(statusCode, msg)\n\t\t\tspan.SetAttributes(statusCodeAttr(s.Code()))\n\t\t} else {\n\t\t\tspan.SetAttributes(statusCodeAttr(grpc_codes.OK))\n\t\t}\n\n\t\treturn err\n\t}\n}\n\n// spanInfo returns a span name and all appropriate attributes from the gRPC\n// method and peer address.\nfunc spanInfo(fullMethod, peerAddress string) (string, []attribute.KeyValue) {\n\tname, mAttrs := internal.ParseFullMethod(fullMethod)\n\tpeerAttrs := peerAttr(peerAddress)\n\n\tattrs := make([]attribute.KeyValue, 0, 1+len(mAttrs)+len(peerAttrs))\n\tattrs = append(attrs, RPCSystemGRPC)\n\tattrs = append(attrs, mAttrs...)\n\tattrs = append(attrs, peerAttrs...)\n\treturn name, attrs\n}\n\n// peerAttr returns attributes about the peer address.\nfunc peerAttr(addr string) []attribute.KeyValue {\n\thost, p, err := net.SplitHostPort(addr)\n\tif err != nil {\n\t\treturn nil\n\t}\n\n\tif host == \"\" {\n\t\thost = \"127.0.0.1\"\n\t}\n\tport, err := strconv.Atoi(p)\n\tif err != nil {\n\t\treturn nil\n\t}\n\n\tvar attr []attribute.KeyValue\n\tif ip := net.ParseIP(host); ip != nil {\n\t\tattr = []attribute.KeyValue{\n\t\t\tsemconv.NetSockPeerAddr(host),\n\t\t\tsemconv.NetSockPeerPort(port),\n\t\t}\n\t} else {\n\t\tattr = []attribute.KeyValue{\n\t\t\tsemconv.NetPeerName(host),\n\t\t\tsemconv.NetPeerPort(port),\n\t\t}\n\t}\n\n\treturn attr\n}\n\n// peerFromCtx returns a peer address from a context, if one exists.\nfunc peerFromCtx(ctx context.Context) string {\n\tp, ok := peer.FromContext(ctx)\n\tif !ok {\n\t\treturn \"\"\n\t}\n\treturn p.Addr.String()\n}\n\n// statusCodeAttr returns status code attribute based on given gRPC code.\nfunc statusCodeAttr(c grpc_codes.Code) attribute.KeyValue {\n\treturn GRPCStatusCodeKey.Int64(int64(c))\n}\n\n// serverStatus returns a span status code and message for a given gRPC\n// status code. It maps specific gRPC status codes to a corresponding span\n// status code and message. This function is intended for use on the server\n// side of a gRPC connection.\n//\n// If the gRPC status code is Unknown, DeadlineExceeded, Unimplemented,\n// Internal, Unavailable, or DataLoss, it returns a span status code of Error\n// and the message from the gRPC status. Otherwise, it returns a span status\n// code of Unset and an empty message.\nfunc serverStatus(grpcStatus *status.Status) (codes.Code, string) {\n\tswitch grpcStatus.Code() {\n\tcase grpc_codes.Unknown,\n\t\tgrpc_codes.DeadlineExceeded,\n\t\tgrpc_codes.Unimplemented,\n\t\tgrpc_codes.Internal,\n\t\tgrpc_codes.Unavailable,\n\t\tgrpc_codes.DataLoss:\n\t\treturn codes.Error, grpcStatus.Message()\n\tdefault:\n\t\treturn codes.Unset, \"\"\n\t}\n}\n", "// Copyright The OpenTelemetry Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage test\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"strconv\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/interop\"\n\tpb \"google.golang.org/grpc/interop/grpc_testing\"\n\n\t\"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/sdk/instrumentation\"\n\t\"go.opentelemetry.io/otel/sdk/metric\"\n\t\"go.opentelemetry.io/otel/sdk/metric/metricdata\"\n\t\"go.opentelemetry.io/otel/sdk/metric/metricdata/metricdatatest\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/sdk/trace/tracetest\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.17.0\"\n)\n\nvar wantInstrumentationScope = instrumentation.Scope{\n\tName:      \"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc\",\n\tSchemaURL: \"https://opentelemetry.io/schemas/1.17.0\",\n\tVersion:   otelgrpc.Version(),\n}\n\nconst bufSize = 2048\n\n// newGrpcTest creats a grpc server, starts it, and executes all the calls, closes everything down.\nfunc newGrpcTest(listener net.Listener, cOpt []grpc.DialOption, sOpt []grpc.ServerOption) error {\n\tgrpcServer := grpc.NewServer(sOpt...)\n\tpb.RegisterTestServiceServer(grpcServer, interop.NewTestServer())\n\terrCh := make(chan error)\n\tgo func() {\n\t\terrCh <- grpcServer.Serve(listener)\n\t}()\n\tctx := context.Background()\n\n\tcOpt = append(cOpt, grpc.WithBlock(), grpc.WithTransportCredentials(insecure.NewCredentials()))\n\n\tif l, ok := listener.(interface{ Dial() (net.Conn, error) }); ok {\n\t\tdial := func(context.Context, string) (net.Conn, error) { return l.Dial() }\n\t\tcOpt = append(cOpt, grpc.WithContextDialer(dial))\n\t}\n\n\tconn, err := grpc.DialContext(\n\t\tctx,\n\t\tlistener.Addr().String(),\n\t\tcOpt...,\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\tclient := pb.NewTestServiceClient(conn)\n\n\tdoCalls(client)\n\n\tconn.Close()\n\tgrpcServer.Stop()\n\n\treturn <-errCh\n}\n\nfunc doCalls(client pb.TestServiceClient) {\n\tinterop.DoEmptyUnaryCall(client)\n\tinterop.DoLargeUnaryCall(client)\n\tinterop.DoClientStreaming(client)\n\tinterop.DoServerStreaming(client)\n\tinterop.DoPingPong(client)\n}\n\nfunc TestInterceptors(t *testing.T) {\n\tclientUnarySR := tracetest.NewSpanRecorder()\n\tclientUnaryTP := trace.NewTracerProvider(trace.WithSpanProcessor(clientUnarySR))\n\n\tclientStreamSR := tracetest.NewSpanRecorder()\n\tclientStreamTP := trace.NewTracerProvider(trace.WithSpanProcessor(clientStreamSR))\n\n\tserverUnarySR := tracetest.NewSpanRecorder()\n\tserverUnaryTP := trace.NewTracerProvider(trace.WithSpanProcessor(serverUnarySR))\n\tserverUnaryMetricReader := metric.NewManualReader()\n\tserverUnaryMP := metric.NewMeterProvider(metric.WithReader(serverUnaryMetricReader))\n\n\tserverStreamSR := tracetest.NewSpanRecorder()\n\tserverStreamTP := trace.NewTracerProvider(trace.WithSpanProcessor(serverStreamSR))\n\n\tlistener, err := net.Listen(\"tcp\", \"127.0.0.1:0\")\n\trequire.NoError(t, err, \"failed to open port\")\n\terr = newGrpcTest(listener, []grpc.DialOption{\n\t\tgrpc.WithUnaryInterceptor(otelgrpc.UnaryClientInterceptor(\n\t\t\totelgrpc.WithTracerProvider(clientUnaryTP),\n\t\t\totelgrpc.WithMessageEvents(otelgrpc.ReceivedEvents, otelgrpc.SentEvents),\n\t\t)),\n\t\tgrpc.WithStreamInterceptor(otelgrpc.StreamClientInterceptor(\n\t\t\totelgrpc.WithTracerProvider(clientStreamTP),\n\t\t\totelgrpc.WithMessageEvents(otelgrpc.ReceivedEvents, otelgrpc.SentEvents),\n\t\t)),\n\t},\n\t\t[]grpc.ServerOption{\n\t\t\tgrpc.UnaryInterceptor(otelgrpc.UnaryServerInterceptor(\n\t\t\t\totelgrpc.WithTracerProvider(serverUnaryTP),\n\t\t\t\totelgrpc.WithMeterProvider(serverUnaryMP),\n\t\t\t\totelgrpc.WithMessageEvents(otelgrpc.ReceivedEvents, otelgrpc.SentEvents),\n\t\t\t)),\n\t\t\tgrpc.StreamInterceptor(otelgrpc.StreamServerInterceptor(\n\t\t\t\totelgrpc.WithTracerProvider(serverStreamTP),\n\t\t\t\totelgrpc.WithMessageEvents(otelgrpc.ReceivedEvents, otelgrpc.SentEvents),\n\t\t\t)),\n\t\t},\n\t)\n\trequire.NoError(t, err)\n\n\tt.Run(\"UnaryClientSpans\", func(t *testing.T) {\n\t\tcheckUnaryClientSpans(t, clientUnarySR.Ended(), listener.Addr().String())\n\t})\n\n\tt.Run(\"StreamClientSpans\", func(t *testing.T) {\n\t\tcheckStreamClientSpans(t, clientStreamSR.Ended(), listener.Addr().String())\n\t})\n\n\tt.Run(\"UnaryServerSpans\", func(t *testing.T) {\n\t\tcheckUnaryServerSpans(t, serverUnarySR.Ended())\n\t\tcheckUnaryServerRecords(t, serverUnaryMetricReader)\n\t})\n\n\tt.Run(\"StreamServerSpans\", func(t *testing.T) {\n\t\tcheckStreamServerSpans(t, serverStreamSR.Ended())\n\t})\n}\n\nfunc checkUnaryClientSpans(t *testing.T, spans []trace.ReadOnlySpan, addr string) {\n\trequire.Len(t, spans, 2)\n\n\thost, p, err := net.SplitHostPort(addr)\n\trequire.NoError(t, err)\n\tport, err := strconv.Atoi(p)\n\trequire.NoError(t, err)\n\n\temptySpan := spans[0]\n\tassert.False(t, emptySpan.EndTime().IsZero())\n\tassert.Equal(t, \"grpc.testing.TestService/EmptyCall\", emptySpan.Name())\n\tassertEvents(t, []trace.Event{\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t}, emptySpan.Events())\n\tassert.ElementsMatch(t, []attribute.KeyValue{\n\t\tsemconv.RPCMethod(\"EmptyCall\"),\n\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\totelgrpc.RPCSystemGRPC,\n\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\tsemconv.NetSockPeerAddr(host),\n\t\tsemconv.NetSockPeerPort(port),\n\t}, emptySpan.Attributes())\n\n\tlargeSpan := spans[1]\n\tassert.False(t, largeSpan.EndTime().IsZero())\n\tassert.Equal(t, \"grpc.testing.TestService/UnaryCall\", largeSpan.Name())\n\tassertEvents(t, []trace.Event{\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t\t// largeReqSize from \"google.golang.org/grpc/interop\" + 12 (overhead).\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t\t// largeRespSize from \"google.golang.org/grpc/interop\" + 8 (overhead).\n\t\t\t},\n\t\t},\n\t}, largeSpan.Events())\n\tassert.ElementsMatch(t, []attribute.KeyValue{\n\t\tsemconv.RPCMethod(\"UnaryCall\"),\n\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\totelgrpc.RPCSystemGRPC,\n\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\tsemconv.NetSockPeerAddr(host),\n\t\tsemconv.NetSockPeerPort(port),\n\t}, largeSpan.Attributes())\n}\n\nfunc checkStreamClientSpans(t *testing.T, spans []trace.ReadOnlySpan, addr string) {\n\trequire.Len(t, spans, 3)\n\n\thost, p, err := net.SplitHostPort(addr)\n\trequire.NoError(t, err)\n\tport, err := strconv.Atoi(p)\n\trequire.NoError(t, err)\n\n\tstreamInput := spans[0]\n\tassert.False(t, streamInput.EndTime().IsZero())\n\tassert.Equal(t, \"grpc.testing.TestService/StreamingInputCall\", streamInput.Name())\n\t// sizes from reqSizes in \"google.golang.org/grpc/interop\".\n\tassertEvents(t, []trace.Event{\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(2),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(3),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(4),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t// client does not record an event for the server response.\n\t}, streamInput.Events())\n\tassert.ElementsMatch(t, []attribute.KeyValue{\n\t\tsemconv.RPCMethod(\"StreamingInputCall\"),\n\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\totelgrpc.RPCSystemGRPC,\n\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\tsemconv.NetSockPeerAddr(host),\n\t\tsemconv.NetSockPeerPort(port),\n\t}, streamInput.Attributes())\n\n\tstreamOutput := spans[1]\n\tassert.False(t, streamOutput.EndTime().IsZero())\n\tassert.Equal(t, \"grpc.testing.TestService/StreamingOutputCall\", streamOutput.Name())\n\t// sizes from respSizes in \"google.golang.org/grpc/interop\".\n\tassertEvents(t, []trace.Event{\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(2),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(3),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(4),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t}, streamOutput.Events())\n\tassert.ElementsMatch(t, []attribute.KeyValue{\n\t\tsemconv.RPCMethod(\"StreamingOutputCall\"),\n\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\totelgrpc.RPCSystemGRPC,\n\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\tsemconv.NetSockPeerAddr(host),\n\t\tsemconv.NetSockPeerPort(port),\n\t}, streamOutput.Attributes())\n\n\tpingPong := spans[2]\n\tassert.False(t, pingPong.EndTime().IsZero())\n\tassert.Equal(t, \"grpc.testing.TestService/FullDuplexCall\", pingPong.Name())\n\tassertEvents(t, []trace.Event{\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(2),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(2),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(3),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(3),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(4),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(4),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t}, pingPong.Events())\n\tassert.ElementsMatch(t, []attribute.KeyValue{\n\t\tsemconv.RPCMethod(\"FullDuplexCall\"),\n\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\totelgrpc.RPCSystemGRPC,\n\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\tsemconv.NetSockPeerAddr(host),\n\t\tsemconv.NetSockPeerPort(port),\n\t}, pingPong.Attributes())\n}\n\nfunc checkStreamServerSpans(t *testing.T, spans []trace.ReadOnlySpan) {\n\trequire.Len(t, spans, 3)\n\n\tstreamInput := spans[0]\n\tassert.False(t, streamInput.EndTime().IsZero())\n\tassert.Equal(t, \"grpc.testing.TestService/StreamingInputCall\", streamInput.Name())\n\t// sizes from reqSizes in \"google.golang.org/grpc/interop\".\n\tassertEvents(t, []trace.Event{\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(2),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(3),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(4),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t}, streamInput.Events())\n\tport, ok := findAttribute(streamInput.Attributes(), semconv.NetSockPeerPortKey)\n\tassert.True(t, ok)\n\n\tassert.ElementsMatch(t, []attribute.KeyValue{\n\t\tsemconv.RPCMethod(\"StreamingInputCall\"),\n\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\totelgrpc.RPCSystemGRPC,\n\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\tsemconv.NetSockPeerAddr(\"127.0.0.1\"),\n\t\tport,\n\t}, streamInput.Attributes())\n\n\tstreamOutput := spans[1]\n\tassert.False(t, streamOutput.EndTime().IsZero())\n\tassert.Equal(t, \"grpc.testing.TestService/StreamingOutputCall\", streamOutput.Name())\n\t// sizes from respSizes in \"google.golang.org/grpc/interop\".\n\tassertEvents(t, []trace.Event{\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(2),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(3),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(4),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t}, streamOutput.Events())\n\n\tport, ok = findAttribute(streamOutput.Attributes(), semconv.NetSockPeerPortKey)\n\tassert.True(t, ok)\n\n\tassert.ElementsMatch(t, []attribute.KeyValue{\n\t\tsemconv.RPCMethod(\"StreamingOutputCall\"),\n\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\totelgrpc.RPCSystemGRPC,\n\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\tsemconv.NetSockPeerAddr(\"127.0.0.1\"),\n\t\tport,\n\t}, streamOutput.Attributes())\n\n\tpingPong := spans[2]\n\tassert.False(t, pingPong.EndTime().IsZero())\n\tassert.Equal(t, \"grpc.testing.TestService/FullDuplexCall\", pingPong.Name())\n\tassertEvents(t, []trace.Event{\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(2),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(2),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(3),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(3),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(4),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(4),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t}, pingPong.Events())\n\tport, ok = findAttribute(pingPong.Attributes(), semconv.NetSockPeerPortKey)\n\tassert.True(t, ok)\n\tassert.ElementsMatch(t, []attribute.KeyValue{\n\t\tsemconv.RPCMethod(\"FullDuplexCall\"),\n\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\totelgrpc.RPCSystemGRPC,\n\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\tsemconv.NetSockPeerAddr(\"127.0.0.1\"),\n\t\tport,\n\t}, pingPong.Attributes())\n}\n\nfunc checkUnaryServerSpans(t *testing.T, spans []trace.ReadOnlySpan) {\n\trequire.Len(t, spans, 2)\n\n\temptySpan := spans[0]\n\tassert.False(t, emptySpan.EndTime().IsZero())\n\tassert.Equal(t, \"grpc.testing.TestService/EmptyCall\", emptySpan.Name())\n\tassertEvents(t, []trace.Event{\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t}, emptySpan.Events())\n\n\tport, ok := findAttribute(emptySpan.Attributes(), semconv.NetSockPeerPortKey)\n\tassert.True(t, ok)\n\tassert.ElementsMatch(t, []attribute.KeyValue{\n\t\tsemconv.RPCMethod(\"EmptyCall\"),\n\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\totelgrpc.RPCSystemGRPC,\n\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\tsemconv.NetSockPeerAddr(\"127.0.0.1\"),\n\t\tport,\n\t}, emptySpan.Attributes())\n\n\tlargeSpan := spans[1]\n\tassert.False(t, largeSpan.EndTime().IsZero())\n\tassert.Equal(t, \"grpc.testing.TestService/UnaryCall\", largeSpan.Name())\n\tassertEvents(t, []trace.Event{\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t\t// largeReqSize from \"google.golang.org/grpc/interop\" + 12 (overhead).\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t\t// largeRespSize from \"google.golang.org/grpc/interop\" + 8 (overhead).\n\t\t\t},\n\t\t},\n\t}, largeSpan.Events())\n\n\tport, ok = findAttribute(largeSpan.Attributes(), semconv.NetSockPeerPortKey)\n\tassert.True(t, ok)\n\tassert.ElementsMatch(t, []attribute.KeyValue{\n\t\tsemconv.RPCMethod(\"UnaryCall\"),\n\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\totelgrpc.RPCSystemGRPC,\n\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\tsemconv.NetSockPeerAddr(\"127.0.0.1\"),\n\t\tport,\n\t}, largeSpan.Attributes())\n}\n\nfunc assertEvents(t *testing.T, expected, actual []trace.Event) bool {\n\tif !assert.Len(t, actual, len(expected)) {\n\t\treturn false\n\t}\n\n\tvar failed bool\n\tfor i, e := range expected {\n\t\tif !assert.Equal(t, e.Name, actual[i].Name, \"names do not match\") {\n\t\t\tfailed = true\n\t\t}\n\t\tif !assert.ElementsMatch(t, e.Attributes, actual[i].Attributes, \"attributes do not match: %s\", e.Name) {\n\t\t\tfailed = true\n\t\t}\n\t}\n\n\treturn !failed\n}\n\nfunc checkUnaryServerRecords(t *testing.T, reader metric.Reader) {\n\trm := metricdata.ResourceMetrics{}\n\terr := reader.Collect(context.Background(), &rm)\n\tassert.NoError(t, err)\n\trequire.Len(t, rm.ScopeMetrics, 1)\n\n\t// TODO: Remove these #4322\n\taddress, ok := findScopeMetricAttribute(rm.ScopeMetrics[0], semconv.NetSockPeerAddrKey)\n\tassert.True(t, ok)\n\tport, ok := findScopeMetricAttribute(rm.ScopeMetrics[0], semconv.NetSockPeerPortKey)\n\tassert.True(t, ok)\n\n\twant := metricdata.ScopeMetrics{\n\t\tScope: wantInstrumentationScope,\n\t\tMetrics: []metricdata.Metrics{\n\t\t\t{\n\t\t\t\tName:        \"rpc.server.duration\",\n\t\t\t\tDescription: \"Measures the duration of inbound RPC.\",\n\t\t\t\tUnit:        \"ms\",\n\t\t\t\tData: metricdata.Histogram[float64]{\n\t\t\t\t\tTemporality: metricdata.CumulativeTemporality,\n\t\t\t\t\tDataPoints: []metricdata.HistogramDataPoint[float64]{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tAttributes: attribute.NewSet(\n\t\t\t\t\t\t\t\tsemconv.RPCMethod(\"EmptyCall\"),\n\t\t\t\t\t\t\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\t\t\t\t\t\t\totelgrpc.RPCSystemGRPC,\n\t\t\t\t\t\t\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\t\t\t\t\t\t\taddress,\n\t\t\t\t\t\t\t\tport,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tAttributes: attribute.NewSet(\n\t\t\t\t\t\t\t\tsemconv.RPCMethod(\"UnaryCall\"),\n\t\t\t\t\t\t\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\t\t\t\t\t\t\totelgrpc.RPCSystemGRPC,\n\t\t\t\t\t\t\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\t\t\t\t\t\t\taddress,\n\t\t\t\t\t\t\t\tport,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tmetricdatatest.AssertEqual(t, want, rm.ScopeMetrics[0], metricdatatest.IgnoreTimestamp(), metricdatatest.IgnoreValue())\n}\n\nfunc findAttribute(kvs []attribute.KeyValue, key attribute.Key) (attribute.KeyValue, bool) {\n\tfor _, kv := range kvs {\n\t\tif kv.Key == key {\n\t\t\treturn kv, true\n\t\t}\n\t}\n\treturn attribute.KeyValue{}, false\n}\n\nfunc findScopeMetricAttribute(sm metricdata.ScopeMetrics, key attribute.Key) (attribute.KeyValue, bool) {\n\tfor _, m := range sm.Metrics {\n\t\t// This only needs to cover data types used by the instrumentation.\n\t\tswitch d := m.Data.(type) {\n\t\tcase metricdata.Histogram[int64]:\n\t\t\tfor _, dp := range d.DataPoints {\n\t\t\t\tif kv, ok := findAttribute(dp.Attributes.ToSlice(), key); ok {\n\t\t\t\t\treturn kv, true\n\t\t\t\t}\n\t\t\t}\n\t\tcase metricdata.Histogram[float64]:\n\t\t\tfor _, dp := range d.DataPoints {\n\t\t\t\tif kv, ok := findAttribute(dp.Attributes.ToSlice(), key); ok {\n\t\t\t\t\treturn kv, true\n\t\t\t\t}\n\t\t\t}\n\t\tdefault:\n\t\t\tpanic(fmt.Sprintf(\"unexpected data type %T - name %s\", d, m.Name))\n\t\t}\n\t}\n\treturn attribute.KeyValue{}, false\n}\n"], "fixing_code": ["# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n\nThis project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n### Added\n\n- Add the new `go.opentelemetry.io/contrib/instrgen` package to provide auto-generated source code instrumentation. (#3068, #3108)\n- Add `\"go.opentelemetry.io/contrib/samplers/jaegerremote\".WithSamplingStrategyFetcher` which sets custom fetcher implementation. (#4045)\n- Add `\"go.opentelemetry.io/contrib/config\"` package that includes configuration models generated via go-jsonschema. (#4376)\n- Add `NewSDK` function to `\"go.opentelemetry.io/contrib/config\"`. The initial implementation only returns noop providers. (#4414)\n- Add metrics support (No-op, OTLP and Prometheus) to `go.opentelemetry.io/contrib/exporters/autoexport`. (#4229, #4479)\n- Add support for `console` span exporter and metrics exporter in `go.opentelemetry.io/contrib/exporters/autoexport`. (#4486)\n- Set unit and description on all instruments in `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp`. (#4500)\n- Add metric support for `grpc.StatsHandler` in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc`. (#4356) \n\n### Changed\n\n- Dropped compatibility testing for [Go 1.19].\n  The project no longer guarantees support for this version of Go. (#4352)\n\n### Deprecated\n\n- In `go.opentelemetry.io/contrib/exporters/autoexport`, `Option` was renamed to `SpanOption`. The old name is deprecated but continues to be supported as an alias. (#4229)\n\n### Fixed\n\n- The `go.opentelemetry.io/contrib/samplers/jaegerremote` sampler does not panic when the default HTTP round-tripper (`http.DefaultTransport`) is not `*http.Transport`. (#4045)\n- The `UnaryServerInterceptor` in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc` now sets gRPC status code correctly for the `rpc.server.duration` metric. (#4481)\n\n## [1.20.0/0.45.0/0.14.0] - 2023-09-28\n\n### Added\n\n- Set the description for the `rpc.server.duration` metric in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc`. (#4302)\n- Add `NewServerHandler` and `NewClientHandler` that return a `grpc.StatsHandler` used for gRPC instrumentation in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc`. (#3002)\n- Add new Prometheus bridge module in `go.opentelemetry.io/contrib/bridges/prometheus`. (#4227)\n\n### Changed\n\n- Upgrade dependencies of OpenTelemetry Go to use the new [`v1.19.0`/`v0.42.0`/`v0.0.7` release](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v1.19.0).\n- Use `grpc.StatsHandler` for gRPC instrumentation in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc/example`. (#4325)\n\n### Removed\n\n- The `net.sock.peer.*` and `net.peer.*` high cardinality attributes are removed from the metrics generated by `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc`. (#4322)\n\n## [1.19.0/0.44.0/0.13.0] - 2023-09-12\n\n### Added\n\n- Add `gcp.gce.instance.name` and `gcp.gce.instance.hostname` resource attributes to `go.opentelemetry.io/contrib/detectors/gcp`. (#4263)\n\n### Changed\n\n- The semantic conventions used by `go.opentelemetry.io/contrib/detectors/aws/ec2` have been upgraded to v1.21.0. (#4265)\n- The semantic conventions used by `go.opentelemetry.io/contrib/detectors/aws/ecs` have been upgraded to v1.21.0. (#4265)\n- The semantic conventions used by `go.opentelemetry.io/contrib/detectors/aws/eks` have been upgraded to v1.21.0. (#4265)\n- The semantic conventions used by `go.opentelemetry.io/contrib/detectors/aws/lambda` have been upgraded to v1.21.0. (#4265)\n- The semantic conventions used by `go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-lambda-go/otellambda` have been upgraded to v1.21.0. (#4265)\n  - The `faas.execution` attribute is now `faas.invocation_id`.\n  - The `faas.id` attribute is now `aws.lambda.invoked_arn`.\n- The semantic conventions used by `go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws` have been upgraded to v1.21.0. (#4265)\n- The `http.request.method` attribute will only allow known HTTP methods from the metrics generated by `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp`. (#4277)\n\n### Removed\n\n- The high cardinality attributes `net.sock.peer.addr`, `net.sock.peer.port`, `http.user_agent`, `enduser.id`, and `http.client_ip` were removed from the metrics generated by `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp`. (#4277)\n- The deprecated `go.opentelemetry.io/contrib/instrumentation/github.com/astaxie/beego/otelbeego` module is removed. (#4295)\n- The deprecated `go.opentelemetry.io/contrib/instrumentation/github.com/go-kit/kit/otelkit` module is removed. (#4295)\n- The deprecated `go.opentelemetry.io/contrib/instrumentation/github.com/Shopify/sarama/otelsarama` module is removed. (#4295)\n- The deprecated `go.opentelemetry.io/contrib/instrumentation/github.com/bradfitz/gomemcache/memcache/otelmemcache` module is removed. (#4295)\n- The deprecated `go.opentelemetry.io/contrib/instrumentation/github.com/gocql/gocql/otelgocql` module is removed. (#4295)\n\n## [1.18.0/0.43.0/0.12.0] - 2023-08-28\n\n### Added\n\n- Add `NewMiddleware` function in `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp`. (#2964)\n- The `go.opentelemetry.io/contrib/exporters/autoexport` package to provide configuration of trace exporters with useful defaults and environment variable support. (#2753, #4100, #4130, #4132, #4134)\n- `WithRouteTag` in `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp` adds HTTP route attribute to metrics. (#615)\n- Add `WithSpanOptions` option in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc`. (#3768)\n- Add testing support for Go 1.21. (#4233)\n- Add `WithFilter` option to `go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux`. (#4230)\n\n### Changed\n\n- Change interceptors in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc` to disable `SENT`/`RECEIVED` events.\n  Use `WithMessageEvents()` to turn back on. (#3964)\n\n### Changed\n\n- `go.opentelemetry.io/contrib/detectors/gcp`: Detect `faas.instance` instead of `faas.id`, since `faas.id` is being removed. (#4198)\n\n### Fixed\n\n- AWS XRay Remote Sampling to cap `quotaBalance` to 1x quota in `go.opentelemetry.io/contrib/samplers/aws/xray`. (#3651, #3652)\n- Do not panic when the HTTP request has the \"Expect: 100-continue\" header in `go.opentelemetry.io/contrib/instrumentation/net/http/httptrace/otelhttptrace`. (#3892)\n- Fix span status value set for non-standard HTTP status codes in modules listed below. (#3966)\n  - `go.opentelemetry.io/contrib/instrumentation/github.com/emicklei/go-restful/otelrestful`\n  - `go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin`\n  - `go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux`\n  - `go.opentelemetry.io/contrib/instrumentation/github.com/labstack/echo/otelecho`\n  - `go.opentelemetry.io/contrib/instrumentation/gopkg.in/macaron.v1/otelmacaron`\n  - `go.opentelemetry.io/contrib/instrumentation/net/http/httptrace/otelhttptrace`\n  - `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp`\n- Do not modify the origin request in `RoundTripper` in `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp`. (#4033)\n- Handle empty value of `OTEL_PROPAGATORS` environment variable the same way as when the variable is unset in `go.opentelemetry.io/contrib/propagators/autoprop`. (#4101)\n- Fix gRPC service/method URL path parsing discrepancies in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc`. (#4135)\n\n### Deprecated\n\n- The `go.opentelemetry.io/contrib/instrumentation/github.com/astaxie/beego/otelbeego` module is deprecated. (#4092, #4104)\n- The `go.opentelemetry.io/contrib/instrumentation/github.com/go-kit/kit/otelkit` module is deprecated. (#4093, #4104)\n- The `go.opentelemetry.io/contrib/instrumentation/github.com/Shopify/sarama/otelsarama` module is deprecated. (#4099)\n- The `go.opentelemetry.io/contrib/instrumentation/github.com/bradfitz/gomemcache/memcache/otelmemcache` module is deprecated. (#4164)\n- The `go.opentelemetry.io/contrib/instrumentation/github.com/gocql/gocql/otelgocql` module is deprecated. (#4164)\n\n### Removed\n\n- Remove `Handler` type in `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp`. (#2964)\n\n## [1.17.0/0.42.0/0.11.0] - 2023-05-23\n\n### Changed\n\n- Use `strings.Cut()` instead of `string.SplitN()` for better readability and memory use. (#3822)\n\n## [1.17.0-rc.1/0.42.0-rc.1/0.11.0-rc.1] - 2023-05-17\n\n### Changed\n\n- Upgrade dependencies of OpenTelemetry Go to use the new [`v1.16.0-rc.1`/`v0.39.0-rc.1` release](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v1.16.0-rc.1).\n- Remove `semver:` prefix from instrumentation version. (#3681, #3798)\n\n### Deprecated\n\n- `SemVersion` functions in instrumentation packages are deprecated, use `Version` instead. (#3681, #3798)\n\n## [1.16.1/0.41.1/0.10.1] - 2023-05-02\n\n### Added\n\n- The `WithPublicEndpoint` and `WithPublicEndpointFn` options in `go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux`. (#3661)\n\n### Changed\n\n- Upgrade dependencies of OpenTelemetry Go to use the new [`v1.15.1`/`v0.38.1` release](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v1.15.1)\n\n### Fixed\n\n- AWS XRay Remote Sampling to preserve previous rule if updated rule property has not changed in `go.opentelemetry.io/contrib/samplers/aws/xray`. (#3619, #3620)\n\n## [1.16.0/0.41.0/0.10.0] - 2023-04-28\n\n### Added\n\n- AWS SDK add `rpc.system` attribute in `go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws`. (#3582, #3617)\n\n### Changed\n\n- Update `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc` to align gRPC server span status with the changes in the OpenTelemetry specification. (#3685)\n- Adding the `db.statement` tag to spans in `go.opentelemetry.io/contrib/instrumentation/go.mongodb.org/mongo-driver/mongo/otelmongo` is now disabled by default. (#3519)\n\n### Fixed\n\n- The error received by `otelecho` middleware is then passed back to upstream middleware instead of being swallowed. (#3656)\n- Prevent taking from reservoir in AWS XRay Remote Sampler when there is zero capacity in `go.opentelemetry.io/contrib/samplers/aws/xray`. (#3684)\n- Fix `otelhttp.Handler` in `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp` to propagate multiple `WriteHeader` calls while persisting the initial `statusCode`. (#3580)\n\n## [1.16.0-rc.2/0.41.0-rc.2/0.10.0-rc.2] - 2023-03-23\n\n### Added\n\n- The `WithPublicEndpoint` and `WithPublicEndpointFn` options in `go.opentelemetry.io/contrib/instrumentation/github.com/emicklei/go-restful/otelrestful`. (#3563)\n\n### Fixed\n\n- AWS SDK rename attributes `aws.operation`, `aws.service` to `rpc.method`,`rpc.service` in `go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws`. (#3582, #3617)\n- AWS SDK span name to be of the format `Service.Operation` in `go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws`. (#3582, #3521)\n- Prevent sampler configuration reset from erroneously sampling first span in `go.opentelemetry.io/contrib/samplers/jaegerremote`. (#3603, #3604)\n\n## [1.16.0-rc.1/0.41.0-rc.1/0.10.0-rc.1] - 2023-03-02\n\n### Changed\n\n- Dropped compatibility testing for [Go 1.18].\n  The project no longer guarantees support for this version of Go. (#3516)\n\n## [1.15.0/0.40.0/0.9.0] - 2023-02-27\n\nThis release is the last to support [Go 1.18].\nThe next release will require at least [Go 1.19].\n\n### Added\n\n- Support [Go 1.20]. (#3372)\n- Add `SpanNameFormatter` option to package `go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin`. (#3343)\n\n### Changed\n\n- Change to use protobuf parser instead of encoding/json to accept enums as strings in `go.opentelemetry.io/contrib/samplers/jaegerremote`. (#3183)\n\n### Fixed\n\n- Remove use of deprecated `\"math/rand\".Seed` in `go.opentelemetry.io/contrib/instrumentation/github.com/Shopify/sarama/otelsarama/example/producer`. (#3396)\n- Do not assume \"aws\" partition in ecs detector to prevent panic in `go.opentelemetry.io/contrib/detectors/aws/ecs`. (#3167)\n- The span name of producer spans from `go.opentelemetry.io/contrib/instrumentation/github.com/Shopify/sarama/otelsarama` is corrected to use `publish` instead of `send`. (#3369)\n- Attribute types are corrected in `go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws`. (#3369)\n  - `aws.dynamodb.table_names` is now a string slice value.\n  - `aws.dynamodb.global_secondary_indexes` is now a string slice value.\n  - `aws.dynamodb.local_secondary_indexes` is now a string slice value.\n  - `aws.dynamodb.attribute_definitions` is now a string slice value.\n  - `aws.dynamodb.global_secondary_index_updates` is now a string slice value.\n  - `aws.dynamodb.provisioned_read_capacity` is now a `float64` value.\n  - `aws.dynamodb.provisioned_write_capacity` is now a `float64` value.\n\n## [1.14.0/0.39.0/0.8.0] - 2023-02-07\n\n### Changed\n\n- Change `runtime.uptime` instrument in `go.opentelemetry.io/contrib/instrumentation/runtime` from `Int64ObservableUpDownCounter` to `Int64ObservableCounter`,\n since the value is monotonic. (#3347)\n- `samplers/jaegerremote`: change to use protobuf parser instead of encoding/json to accept enums as strings. (#3183)\n\n### Fixed\n\n- The GCE detector in `go.opentelemetry.io/contrib/detectors/gcp` includes the \"cloud.region\" attribute when appropriate. (#3367)\n\n## [1.13.0/0.38.0/0.7.0] - 2023-01-30\n\n### Added\n\n- Add `WithSpanNameFormatter` to `go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux` to allow customizing span names. (#3041)\n- Add missing recommended AWS Lambda resource attributes `faas.instance` and `faas.max_memory` in `go.opentelemetry.io/contrib/detectors/aws/lambda`. (#3148)\n- Improve documentation for `go.opentelemetry.io/contrib/samplers/jaegerremote` by providing examples of sampling endpoints. (#3147)\n- Add `WithServerName` to `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp` to set the primary server name of a `Handler`. (#3182)\n\n### Changed\n\n- Remove expensive calculation of uncompressed message size attribute in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc`. (#3168)\n- Upgrade all `semconv` packages to use `v1.17.0`. (#3182)\n- Upgrade dependencies of OpenTelemetry Go to use the new [`v1.12.0`/`v0.35.0` release](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v1.12.0). (#3190, #3170)\n\n## [1.12.0/0.37.0/0.6.0]\n\n### Added\n\n- Implemented retrieving the [`aws.ecs.*` resource attributes](https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/cloud_provider/aws/ecs/) in `go.opentelemetry.io/detectors/aws/ecs` based on the ECS Metadata v4 endpoint. (#2626)\n- The `WithLogger` option to `go.opentelemetry.io/contrib/samplers/jaegerremote` to allow users to pass a `logr.Logger` and have operations logged. (#2566)\n- Add the `messaging.url` & `messaging.system` attributes to all appropriate SQS operations in the `go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws` package. (#2879)\n- Add example use of the metrics signal to `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp/example`. (#2610)\n- [otelgin] Add support for filters to the `go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin` package to provide the way to control which inbound requests are traced. (#2965, #2963)\n\n### Fixed\n\n- Set the status_code span attribute even if the HTTP handler hasn't written anything. (#2822)\n- Do not wrap http.NoBody in `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp`, which fixes handling of that special request body. (#2983)\n\n## [1.11.1/0.36.4/0.5.2]\n\n### Added\n\n- Add trace context propagation support to `instrumentation/github.com/aws/aws-sdk-go-v2/otelaws` (#2856).\n- [otelgrpc] Add `WithMeterProvider` function to enable metric and add metric `rpc.server.duration` to otelgrpc instrumentation library. (#2700)\n\n### Changed\n\n- Upgrade dependencies of OpenTelemetry Go to use the new [`v1.11.1`/`v0.33.0` release](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v1.11.1)\n\n## [1.11.0/0.36.3/0.5.1]\n\n### Changed\n\n- Upgrade dependencies of the OpenTelemetry Go Metric SDK to use the new [`v1.11.0`/`v0.32.3` release](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v1.11.0)\n\n## [0.36.2]\n\n### Changed\n\n- Upgrade dependencies of the OpenTelemetry Go Metric SDK to use the new [`v0.32.2` release](https://github.com/open-telemetry/opentelemetry-go/releases/tag/sdk%2Fmetric%2Fv0.32.2)\n- Avoid getting a new Tracer for every RPC in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc`. (#2835)\n- Conditionally compute message size for tracing events using proto v2 API rather than legacy v1 API in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc`. (#2647)\n\n### Deprecated\n\n- The `Inject` function in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc` is deprecated. (#2838)\n- The `Extract` function in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc` is deprecated. (#2838)\n\n## [0.36.1]\n\n### Changed\n\n- Upgrade dependencies of the OpenTelemetry Go Metric SDK to use the new [`v0.32.1` release](https://github.com/open-telemetry/opentelemetry-go/releases/tag/sdk%2Fmetric%2Fv0.32.1)\n\n### Removed\n\n- Drop support for Go 1.17.\n  The project currently only supports Go 1.18 and above. (#2785)\n\n## [0.36.0]\n\n### Changed\n\n- Upgrade dependencies of the OpenTelemetry Go Metric SDK to use the new [`v0.32.0` release](https://github.com/open-telemetry/opentelemetry-go/releases/tag/sdk%2Fmetric%2Fv0.32.0). (#2781, #2756, #2758, #2760, #2762)\n\n## [1.10.0/0.35.0/0.5.0]\n\n### Changed\n\n- Rename the `Typ` field of `\"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc\".InterceptorInfo` to `Type`. (#2688)\n- Use Go 1.19 as the default version for CI testing/linting. (#2675)\n\n### Fixed\n\n- Fix the Jaeger propagator rejecting trace IDs that are both shorter than 128 bits and not exactly 64 bits long (while not being 0).\n  Also fix the propagator rejecting span IDs shorter than 64 bits.\n  This fixes compatibility with Jaeger clients encoding trace and span IDs as variable-length hex strings, [as required by the Jaeger propagation format](https://www.jaegertracing.io/docs/1.37/client-libraries/#value). (#2731)\n\n## [1.9.0/0.34.0/0.4.0] - 2022-08-02\n\n### Added\n\n- Add gRPC trace `Filter` to the `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc` package to provide the way to filter the traces automatically generated in interceptors. (#2572)\n- The `TextMapPropagator` function to `go.opentelemetry.io/contrib/propagators/autoprop`.\n  This function is used to return a composite `TextMapPropagator` from registered names (instead of having to specify with an environment variable). (#2593)\n\n### Changed\n\n- Upgraded all `semconv` package use to `v1.12.0`. (#2589)\n\n## [1.8.0/0.33.0] - 2022-07-08\n\n### Added\n\n- The `go.opentelemetry.io/contrib/propagators/autoprop` package to provide configuration of propagators with useful defaults and envar support. (#2258)\n- `WithPublicEndpointFn` hook to dynamically detect public HTTP requests and set their trace parent as a link. (#2342)\n\n### Fixed\n\n- Fix the `otelhttp`, `otelgin`, `otelmacaron`, `otelrestful` middlewares\n  by using `SpanKindServer` when deciding the `SpanStatus`.\n  This makes `4xx` response codes to not be an error anymore. (#2427)\n\n## [1.7.0/0.32.0] - 2022-04-28\n\n### Added\n\n- Consistent probability sampler implementation. (#1379)\n\n### Changed\n\n- Upgraded all `semconv` package use to `v1.10.0`.\n  This includes a backwards incompatible change for the `otelgocql` package to conform with the specification [change](https://github.com/open-telemetry/opentelemetry-specification/pull/1973).\n  The `db.cassandra.keyspace` attribute is now transmitted as the `db.name` attribute. (#2222)\n\n### Fixed\n\n- Fix the `otelmux` middleware by using `SpanKindServer` when deciding the `SpanStatus`.\n  This makes `4xx` response codes to not be an error anymore. (#1973)\n- Fixed jaegerremote sampler not behaving properly with per operation strategy set. (#2137)\n- Stopped injecting propagation context into response headers in otelhttp. (#2180)\n- Fix issue where attributes for DynamoDB were not added because of a string miss match. (#2272)\n\n### Removed\n\n- Drop support for Go 1.16.\n  The project currently only supports Go 1.17 and above. (#2314)\n\n## [1.6.0/0.31.0] - 2022-03-28\n\n### Added\n\n- The project is now tested against Go 1.18 (in addition to the existing 1.16 and 1.17) (#1976)\n\n### Changed\n\n- Upgraded all dependencies on stable modules from `go.opentelemetry.io/otel` from v1.5.0 to v1.6.1. (#2134)\n- Upgraded all dependencies on metric modules from `go.opentelemetry.io/otel` from v0.27.0 to v0.28.0. (#1977)\n\n### Fixed\n\n- otelhttp: Avoid panic by adding nil check to `wrappedBody.Close` (#2164)\n\n## [1.5.0/0.30.0/0.1.0] - 2022-03-16\n\n### Added\n\n- Added the `go.opentelemetry.io/contrib/samplers/jaegerremote` package.\n  This package implements the Jaeger remote sampler for OpenTelemetry Go. (#936)\n- DynamoDB spans created with the `go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-sdk-go-v2/otelaws` package now have the appropriate database attributes added for the operation being performed.\n  These attributes are detected automatically, but it is also now possible to provide a custom function to set attributes using `WithAttributeSetter`. (#1582)\n- Add resource detector for GCP cloud function. (#1584)\n- Add OpenTracing baggage extraction to the OpenTracing propagator in `go.opentelemetry.io/contrib/propagators/ot`. (#1880)\n\n### Fixed\n\n- Fix the `echo` middleware by using `SpanKind.SERVER` when deciding the `SpanStatus`.\n  This makes `4xx` response codes to not be an error anymore. (#1848)\n\n### Removed\n\n- The deprecated `go.opentelemetry.io/contrib/exporters/metric/datadog` module is removed. (#1920)\n- The deprecated `go.opentelemetry.io/contrib/exporters/metric/dogstatsd` module is removed. (#1920)\n- The deprecated `go.opentelemetry.io/contrib/exporters/metric/cortex` module is removed.\n  Use the `go.opentelemetry.io/otel/exporters/otlp/otlpmetric` exporter as a replacement to send data to a collector which can then export with its PRW exporter. (#1920)\n\n## [1.4.0/0.29.0] - 2022-02-14\n\n### Added\n\n- Add `WithClientTrace` option to `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp`. (#875)\n\n### Changed\n\n- All metric instruments from the `go.opentelemetry.io/contrib/instrumentation/runtime` package have been renamed from `runtime.go.*` to `process.runtime.go.*` so as to comply with OpenTelemetry semantic conventions. (#1549)\n\n### Fixed\n\n- Change the `http-server-duration` instrument in `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp` to record milliseconds instead of microseconds.\n  This changes fixes the code to comply with the OpenTelemetry specification. (#1414, #1537)\n- Fixed the region reported by the `\"go.opentelemetry.io/contrib/detectors/gcp\".CloudRun` detector to comply with the OpenTelemetry specification.\n  It no longer includes the project scoped region path, instead just the region. (#1546)\n- The `\"go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp\".Transport` type now correctly handles protocol switching responses.\n  The returned response body implements the `io.ReadWriteCloser` interface if the underlying one does.\n  This ensures that protocol switching requests receive a response body that they can write to. (#1329, #1628)\n\n### Deprecated\n\n- The `go.opentelemetry.io/contrib/exporters/metric/datadog` module is deprecated. (#1639)\n- The `go.opentelemetry.io/contrib/exporters/metric/dogstatsd` module is deprecated. (#1639)\n- The `go.opentelemetry.io/contrib/exporters/metric/cortex` module is deprecated.\n  Use the go.opentelemetry.io/otel/exporters/otlp/otlpmetric exporter as a replacement to send data to a collector which can then export with its PRW exporter. (#1639)\n\n### Removed\n\n- Remove the `MinMaxSumCount` from cortex and datadog exporter. (#1554)\n- The `go.opentelemetry.io/contrib/exporters/metric/dogstatsd` exporter no longer support exporting histogram or exact data points. (#1639)\n- The `go.opentelemetry.io/contrib/exporters/metric/datadog` exporter no longer support exporting exact data points. (#1639)\n\n## [1.3.0/0.28.0] - 2021-12-10\n\n### \u26a0\ufe0f Notice \u26a0\ufe0f\n\nWe have updated the project minimum supported Go version to 1.16\n\n### Changed\n\n- `otelhttptrace.NewClientTrace` now uses `TracerProvider` from the parent context if one exists and none was set with `WithTracerProvider` (#874)\n\n### Fixed\n\n- The `\"go.opentelemetry.io/contrib/detector/aws/ecs\".Detector` no longer errors if not running in ECS. (#1428)\n- `go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux`\n  does not require instrumented HTTP handlers to call `Write` nor\n  `WriteHeader` anymore. (#1443)\n\n## [1.2.0/0.27.0] - 2021-11-15\n\n### Changed\n\n- Update dependency on the `go.opentelemetry.io/otel` project to `v1.2.0`.\n- `go.opentelemetry.io/contrib/instrumentation/github.com/aws/aws-lambda-go/otellambda/xrayconfig`\n  updated to ensure access to the `TracerProvider`.\n  - A `NewTracerProvider()` function is available to construct a recommended\n    `TracerProvider` configuration.\n  - `AllRecommendedOptions()` has been renamed to `WithRecommendedOptions()`\n    and takes a `TracerProvider` as an argument.\n  - `EventToCarrier()` and `Propagator()` are now `WithEventToCarrier()` and\n    `WithPropagator()` to reflect that they return `Option` implementations.\n\n## [1.1.1/0.26.1] - 2021-11-04\n\n### Changed\n\n- The `Transport`, `Handler`, and HTTP client convenience wrappers in the `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp` package now use the `TracerProvider` from the parent context if one exists and none was explicitly set when configuring the instrumentation. (#873)\n- Semantic conventions now use `go.opentelemetry.io/otel/semconv/v1.7.0\"`. (#1385)\n\n## [1.1.0/0.26.0] - 2021-10-28\n\nUpdate dependency on the `go.opentelemetry.io/otel` project to `v1.1.0`.\n\n### Added\n\n- Add instrumentation for the `github.com/aws/aws-lambda-go` package. (#983)\n- Add resource detector for AWS Lambda. (#983)\n- Add `WithTracerProvider` option for `otelhttptrace.NewClientTrace`. (#1128)\n- Add optional AWS X-Ray configuration module for AWS Lambda Instrumentation. (#984)\n\n### Fixed\n\n- The `go.opentelemetry.io/contrib/propagators/ot` propagator returns the words `true` or `false` for the `ot-tracer-sampled` header instead of numerical `0` and `1`. (#1358)\n\n## [1.0.0/0.25.0] - 2021-10-06\n\n- Resource detectors and propagators (with the exception of `go.\n  opentelemetry.io/contrib/propagators/opencensus`) are now stable and\n  released at v1.0.0.\n- Update dependency on the `go.opentelemetry.io/otel` project to `v1.0.1`.\n- Update dependency on `go.opentelemetry.io/otel/metric` to `v0.24.0`.\n\n## [0.24.0] - 2021-09-21\n\n- Update dependency on the `go.opentelemetry.io/otel` project to `v1.0.0`.\n\n## [0.23.0] - 2021-09-08\n\n### Added\n\n- Add `WithoutSubSpans`, `WithRedactedHeaders`, `WithoutHeaders`, and `WithInsecureHeaders` options for `otelhttptrace.NewClientTrace`. (#879)\n\n### Changed\n\n- Split `go.opentelemetry.io/contrib/propagators` module into `b3`, `jaeger`, `ot` modules. (#985)\n- `otelmongodb` span attributes, name and span status now conform to specification. (#769)\n- Migrated EC2 resource detector support from root module `go.opentelemetry.io/contrib/detectors/aws` to a separate EC2 resource detector module `go.opentelemetry.io/contrib/detectors/aws/ec2` (#1017)\n- Add `cloud.provider` and `cloud.platform` to AWS detectors. (#1043)\n- `otelhttptrace.NewClientTrace` now redacts known sensitive headers by default. (#879)\n\n### Fixed\n\n- Fix span not marked as error in `otelhttp.Transport` when `RoundTrip` fails with an error. (#950)\n\n## [0.22.0] - 2021-07-26\n\n### Added\n\n- Add the `zpages` span processor. (#894)\n\n### Changed\n\n- The `b3.B3` type has been removed.\n  `b3.New()` and `b3.WithInjectEncoding(encoding)` are added to replace it. (#868)\n\n### Fixed\n\n- Fix deadlocks and race conditions in `otelsarama.WrapAsyncProducer`.\n  The `messaging.message_id` and `messaging.kafka.partition` attributes are now not set if a message was not processed. (#754) (#755) (#881)\n- Fix `otelsarama.WrapAsyncProducer` so that the messages from the `Errors` channel contain the original `Metadata`. (#754)\n\n## [0.21.0] - 2021-06-18\n\n### Fixed\n\n- Dockerfile based examples for `otelgin` and `otelmacaron`. (#767)\n\n### Changed\n\n- Supported minimum version of Go bumped from 1.14 to 1.15. (#787)\n- EKS Resource Detector now use the Kubernetes Go client to obtain the ConfigMap. (#813)\n\n### Removed\n\n- Remove service name from `otelmongodb` configuration and span attributes. (#763)\n\n## [0.20.0] - 2021-04-23\n\n### Changed\n\n- The `go.opentelemetry.io/contrib/instrumentation/go.mongodb.org/mongo-driver/mongo/otelmongo` instrumentation now accepts a `WithCommandAttributeDisabled`,\n   so the caller can specify whether to opt-out of tracing the mongo command. (#712)\n- Upgrade to v0.20.0 of `go.opentelemetry.io/otel`. (#758)\n- The B3 and Jaeger propagators now store their debug or deferred state in the context.Context instead of the SpanContext. (#758)\n\n## [0.19.0] - 2021-03-19\n\n### Changed\n\n- Upgrade to v0.19.0 of `go.opentelemetry.io/otel`.\n- Fix Span names created in HTTP Instrumentation package to conform with guidelines. (#757)\n\n## [0.18.0] - 2021-03-04\n\n### Fixed\n\n- `otelmemcache` no longer sets span status to OK instead of leaving it unset. (#477)\n- Fix goroutine leak in gRPC `StreamClientInterceptor`. (#581)\n\n### Removed\n\n- Remove service name from `otelmemcache` configuration and span attributes. (#477)\n\n## [0.17.0] - 2021-02-15\n\n### Added\n\n- Add `ot-tracer` propagator (#562)\n\n### Changed\n\n- Rename project default branch from `master` to `main`.\n\n### Fixed\n\n- Added failure message for AWS ECS resource detector for better debugging (#568)\n- Goroutine leak in gRPC StreamClientInterceptor while streamer returns an error. (#581)\n\n## [0.16.0] - 2021-01-13\n\n### Fixed\n\n- Fix module path for AWS ECS resource detector (#517)\n\n## [0.15.1] - 2020-12-14\n\n### Added\n\n- Add registry link check to `Makefile` and pre-release script. (#446)\n- A new AWS X-Ray ID Generator (#459)\n- Migrate CircleCI jobs to GitHub Actions (#476)\n- Add CodeQL GitHub Action (#506)\n- Add gosec workflow to GitHub Actions (#507)\n\n### Fixed\n\n- Fixes the body replacement in otelhttp to not to mutate a nil body. (#484)\n\n## [0.15.0] - 2020-12-11\n\n### Added\n\n- A new Amazon EKS resource detector. (#465)\n- A new `gcp.CloudRun` detector for detecting resource from a Cloud Run instance. (#455)\n\n## [0.14.0] - 2020-11-20\n\n### Added\n\n- `otelhttp.{Get,Head,Post,PostForm}` convenience wrappers for their `http` counterparts. (#390)\n- The AWS detector now adds the cloud zone, host image ID, host type, and host name to the returned `Resource`. (#410)\n- Add Amazon ECS Resource Detector for AWS X-Ray. (#466)\n- Add propagator for AWS X-Ray (#462)\n\n### Changed\n\n- Add semantic version to `Tracer` / `Meter` created by instrumentation packages `otelsaram`, `otelrestful`, `otelmongo`, `otelhttp` and `otelhttptrace`. (#412)\n- Update instrumentation guidelines about tracer / meter semantic version. (#412)\n- Replace internal tracer and meter helpers by helpers from `go.opentelemetry.io/otel`. (#414)\n- gRPC instrumentation sets span attribute `rpc.grpc.status_code`. (#453)\n\n## Fixed\n\n- `/detectors/aws` no longer fails if instance metadata is not available (e.g. not running in AWS) (#401)\n- The AWS detector now returns a partial resource and an appropriate error if it encounters an error part way through determining a `Resource` identity. (#410)\n- The `host` instrumentation unit test has been updated to not depend on the system it runs on. (#426)\n\n## [0.13.0] - 2020-10-09\n\n## Added\n\n- A Jaeger propagator. (#375)\n\n## Changed\n\n- The `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc` package instrumentation no longer accepts a `Tracer` as an argument to the interceptor function.\n   Instead, a new `WithTracerProvider` option is added to configure the `TracerProvider` used when creating the `Tracer` for the instrumentation. (#373)\n- The `go.opentelemetry.io/contrib/instrumentation/gopkg.in/macaron.v1/otelmacaron` instrumentation now accepts a `TracerProvider` rather than a `Tracer`. (#374)\n- Remove `go.opentelemetry.io/otel/sdk` dependency from instrumentation. (#381)\n- Use `httpsnoop` in `go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux` to ensure `http.ResponseWriter` additional interfaces are preserved. (#388)\n\n### Fixed\n\n- The `go.opentelemetry.io/contrib/instrumentation/github.com/labstack/echo/otelecho.Middleware` no longer sends duplicate errors to the global `ErrorHandler`. (#377, #364)\n- The import comment in `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp` is now correctly quoted. (#379)\n- The B3 propagator sets the sample bitmask when the sampling decision is `debug`. (#369)\n\n## [0.12.0] - 2020-09-25\n\n### Added\n\n- Benchmark tests for the gRPC instrumentation. (#296)\n- Integration testing for the gRPC instrumentation. (#297)\n- Allow custom labels to be added to net/http metrics. (#306)\n- Added B3 propagator, moving it out of open.telemetry.io/otel repo. (#344)\n\n### Changed\n\n- Unify instrumentation about provider options for `go.mongodb.org/mongo-driver`, `gin-gonic/gin`, `gorilla/mux`,\n  `labstack/echo`, `emicklei/go-restful`, `bradfitz/gomemcache`, `Shopify/sarama`, `net/http` and `beego`. (#303)\n- Update instrumentation guidelines about uniform provider options. Also, update style guide. (#303)\n- Make config struct of instrumentation unexported. (#303)\n- Instrumentations have been updated to adhere to the [configuration style guide's](https://github.com/open-telemetry/opentelemetry-go/blob/master/CONTRIBUTING.md#config)\n   updated recommendation to use `newConfig()` instead of `configure()`. (#336)\n- A new instrumentation naming scheme is implemented to avoid package name conflicts for instrumented packages while still remaining discoverable. (#359)\n  - `google.golang.org/grpc` -> `google.golang.org/grpc/otelgrpc`\n  - `go.mongodb.org/mongo-driver` -> `go.mongodb.org/mongo-driver/mongo/otelmongo`\n  - `net/http` -> `net/http/otelhttp`\n  - `net/http/httptrace` -> `net/http/httptrace/otelhttptrace`\n  - `github.com/labstack/echo` -> `github.com/labstack/echo/otelecho`\n  - `github.com/bradfitz/gomemcache` -> `github.com/bradfitz/gomemcache/memcache/otelmemcache`\n  - `github.com/gin-gonic/gin` -> `github.com/gin-gonic/gin/otelgin`\n  - `github.com/gocql/gocql` -> `github.com/gocql/gocql/otelgocql`\n  - `github.com/emicklei/go-restful` -> `github.com/emicklei/go-restful/otelrestful`\n  - `github.com/Shopify/sarama` -> `github.com/Shopify/sarama/otelsarama`\n  - `github.com/gorilla/mux` -> `github.com/gorilla/mux/otelmux`\n  - `github.com/astaxie/beego` -> `github.com/astaxie/beego/otelbeego`\n  - `gopkg.in/macaron.v1` -> `gopkg.in/macaron.v1/otelmacaron`\n- Rename `OTelBeegoHandler` to `Handler` in the `go.opentelemetry.io/contrib/instrumentation/github.com/astaxie/beego/otelbeego` package. (#359)\n- Replace `WithTracer` with `WithTracerProvider` in the `go.opentelemetry.io/contrib/instrumentation/gopkg.in/macaron.v1/otelmacaron` instrumentation. (#374)\n\n## [0.11.0] - 2020-08-25\n\n### Added\n\n- Top-level `Version()` and `SemVersion()` functions defining the current version of the contrib package. (#225)\n- Instrumentation for the `github.com/astaxie/beego` package. (#200)\n- Instrumentation for the `github.com/bradfitz/gomemcache` package. (#204)\n- Host metrics instrumentation. (#231)\n- Cortex histogram and distribution support. (#237)\n- Cortex example project. (#238)\n- Cortex HTTP authentication. (#246)\n\n### Changed\n\n- Remove service name as a parameter of Sarama instrumentation. (#221)\n- Replace `WithTracer` with `WithTracerProvider` in Sarama instrumentation. (#221)\n- Switch to use common top-level module `SemVersion()` when creating versioned tracer in `bradfitz/gomemcache`. (#226)\n- Use `IntegrationShouldRun` in `gomemcache_test`. (#254)\n- Use Go 1.15 for CI builds. (#236)\n- Improved configuration for `runtime` instrumentation. (#224)\n\n### Fixed\n\n- Update dependabot configuration to include newly added `bradfitz/gomemcache` package. (#226)\n- Correct `runtime` instrumentation name. (#241)\n\n## [0.10.1] - 2020-08-13\n\n### Added\n\n- The `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc` module has been added to replace the instrumentation that had previoiusly existed in the `go.opentelemetry.io/otel/instrumentation/grpctrace` package. (#189)\n- Instrumentation for the stdlib `net/http` and `net/http/httptrace` packages. (#190)\n- Initial Cortex exporter. (#202, #205, #210, #211, #215)\n\n### Fixed\n\n- Bump google.golang.org/grpc from 1.30.0 to 1.31.0. (#166)\n- Bump go.mongodb.org/mongo-driver from 1.3.5 to 1.4.0 in /instrumentation/go.mongodb.org/mongo-driver. (#170)\n- Bump google.golang.org/grpc in /instrumentation/github.com/gin-gonic/gin. (#173)\n- Bump google.golang.org/grpc in /instrumentation/github.com/labstack/echo. (#176)\n- Bump google.golang.org/grpc from 1.30.0 to 1.31.0 in /instrumentation/github.com/Shopify/sarama. (#179)\n- Bump cloud.google.com/go from 0.61.0 to 0.63.0 in /detectors/gcp. (#181, #199)\n- Bump github.com/aws/aws-sdk-go from 1.33.15 to 1.34.1 in /detectors/aws. (#184, #192, #193, #198, #201, #203)\n- Bump github.com/golangci/golangci-lint from 1.29.0 to 1.30.0 in /tools. (#186)\n- Setup CI to run tests that require external resources (Cassandra and MongoDB). (#191)\n- Bump github.com/Shopify/sarama from 1.26.4 to 1.27.0 in /instrumentation/github.com/Shopify/sarama. (#206)\n\n## [0.10.0] - 2020-07-31\n\nThis release upgrades its [go.opentelemetry.io/otel](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v0.10.0) dependency to v0.10.0 and includes new instrumentation for popular Kafka and Cassandra clients.\n\n### Added\n\n- A detector that generate resources from GCE instance. (#132)\n- A detector that generate resources from AWS instances. (#139)\n- Instrumentation for the Kafka client github.com/Shopify/sarama. (#134, #153)\n- Links and status message for mock span in the internal testing library. (#134)\n- Instrumentation for the Cassandra client github.com/gocql/gocql. (#137)\n- A detector that generate resources from GKE clusters. (#154)\n\n### Fixed\n\n- Bump github.com/aws/aws-sdk-go from 1.33.8 to 1.33.15 in /detectors/aws. (#155, #157, #159, #162)\n- Bump github.com/golangci/golangci-lint from 1.28.3 to 1.29.0 in /tools. (#146)\n\n## [0.9.0] - 2020-07-20\n\nThis release upgrades its [go.opentelemetry.io/otel](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v0.9.0) dependency to v0.9.0.\n\n### Fixed\n\n- Bump github.com/emicklei/go-restful/v3 from 3.0.0 to 3.2.0 in /instrumentation/github.com/emicklei/go-restful. (#133)\n- Update dependabot configuration to correctly check all included packages. (#131)\n- Update `RELEASING.md` with correct `tag.sh` command. (#130)\n\n## [0.8.0] - 2020-07-10\n\nThis release upgrades its [go.opentelemetry.io/otel](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v0.8.0) dependency to v0.8.0, includes minor fixes, and new instrumentation.\n\n### Added\n\n- Create this `CHANGELOG.md`. (#114)\n- Add `emicklei/go-restful/v3` trace instrumentation. (#115)\n\n### Changed\n\n- Update `CONTRIBUTING.md` to ask for updates to `CHANGELOG.md` with each pull request. (#114)\n- Move all `github.com` package instrumentation under a `github.com` directory. (#118)\n\n### Fixed\n\n- Update README to include information about external instrumentation.\n   To start, this includes native instrumentation found in the `go-redis/redis` package. (#117)\n- Bump github.com/golangci/golangci-lint from 1.27.0 to 1.28.2 in /tools. (#122, #123, #125)\n- Bump go.mongodb.org/mongo-driver from 1.3.4 to 1.3.5 in /instrumentation/go.mongodb.org/mongo-driver. (#124)\n\n## [0.7.0] - 2020-06-29\n\nThis release upgrades its [go.opentelemetry.io/otel](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v0.7.0) dependency to v0.7.0.\n\n### Added\n\n- Create `RELEASING.md` instructions. (#101)\n- Apply transitive dependabot go.mod updates as part of a new automatic Github workflow. (#94)\n- New dependabot integration to automate package upgrades. (#61)\n- Add automatic tag generation script for release. (#60)\n\n### Changed\n\n- Upgrade Datadog metrics exporter to include Resource tags. (#46)\n- Added output validation to Datadog example. (#96)\n- Move Macaron package to match layout guidelines. (#92)\n- Update top-level README and instrumentation README. (#92)\n- Bump google.golang.org/grpc from 1.29.1 to 1.30.0. (#99)\n- Bump github.com/golangci/golangci-lint from 1.21.0 to 1.27.0 in /tools. (#77)\n- Bump go.mongodb.org/mongo-driver from 1.3.2 to 1.3.4 in /instrumentation/go.mongodb.org/mongo-driver. (#76)\n- Bump github.com/stretchr/testify from 1.5.1 to 1.6.1. (#74)\n- Bump gopkg.in/macaron.v1 from 1.3.5 to 1.3.9 in /instrumentation/macaron. (#68)\n- Bump github.com/gin-gonic/gin from 1.6.2 to 1.6.3 in /instrumentation/gin-gonic/gin. (#73)\n- Bump github.com/DataDog/datadog-go from 3.5.0+incompatible to 3.7.2+incompatible in /exporters/metric/datadog. (#78)\n- Replaced `internal/trace/http.go` helpers with `api/standard` helpers from otel-go repo. (#112)\n\n## [0.6.1] - 2020-06-08\n\nFirst official tagged release of `contrib` repository.\n\n### Added\n\n- `labstack/echo` trace instrumentation (#42)\n- `mongodb` trace instrumentation (#26)\n- Go Runtime metrics (#9)\n- `gorilla/mux` trace instrumentation (#19)\n- `gin-gonic` trace instrumentation (#15)\n- `macaron` trace instrumentation (#20)\n- `dogstatsd` metrics exporter (#10)\n- `datadog` metrics exporter (#22)\n- Tags to all modules in repository\n- Repository folder structure and automated build (#3)\n\n### Changes\n\n- Prefix support for dogstatsd (#34)\n- Update Go Runtime package to use batch observer (#44)\n\n[Unreleased]: https://github.com/open-telemetry/opentelemetry-go-contrib/compare/v1.20.0...HEAD\n[1.20.0/0.45.0/0.14.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.20.0\n[1.19.0/0.44.0/0.13.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.19.0\n[1.18.0/0.43.0/0.12.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.18.0\n[1.17.0/0.42.0/0.11.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.17.0\n[1.17.0-rc.1/0.42.0-rc.1/0.11.0-rc.1]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.17.0-rc.1\n[1.16.1/0.41.1/0.10.1]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.16.1\n[1.16.0/0.41.0/0.10.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.16.0\n[1.16.0-rc.2/0.41.0-rc.2/0.10.0-rc.2]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.16.0-rc.2\n[1.16.0-rc.1/0.41.0-rc.1/0.10.0-rc.1]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.16.0-rc.1\n[1.15.0/0.40.0/0.9.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.15.0\n[1.14.0/0.39.0/0.8.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.14.0\n[1.13.0/0.38.0/0.7.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.13.0\n[1.12.0/0.37.0/0.6.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.12.0\n[1.11.1/0.36.4/0.5.2]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.11.1\n[1.11.0/0.36.3/0.5.1]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.11.0\n[0.36.2]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/zpages/v0.36.2\n[0.36.1]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/zpages/v0.36.1\n[0.36.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/zpages/v0.36.0\n[1.10.0/0.35.0/0.5.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.10.0\n[1.9.0/0.34.0/0.4.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.9.0\n[1.8.0/0.33.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.8.0\n[1.7.0/0.32.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.7.0\n[1.6.0/0.31.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.6.0\n[1.5.0/0.30.0/0.1.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.5.0\n[1.4.0/0.29.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.4.0\n[1.3.0/0.28.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.3.0\n[1.2.0/0.27.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.2.0\n[1.1.1/0.26.1]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.1.1\n[1.1.0/0.26.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.1.0\n[1.0.0/0.25.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.0.0\n[0.24.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.24.0\n[0.23.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.23.0\n[0.22.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.22.0\n[0.21.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.21.0\n[0.20.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.20.0\n[0.19.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.19.0\n[0.18.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.18.0\n[0.17.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.17.0\n[0.16.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.16.0\n[0.15.1]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.15.1\n[0.15.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.15.0\n[0.14.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.14.0\n[0.13.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.13.0\n[0.12.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.12.0\n[0.11.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.11.0\n[0.10.1]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.10.1\n[0.10.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.10.0\n[0.9.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.9.0\n[0.8.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.8.0\n[0.7.0]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.7.0\n[0.6.1]: https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v0.6.1\n\n[Go 1.20]: https://go.dev/doc/go1.20\n[Go 1.19]: https://go.dev/doc/go1.19\n[Go 1.18]: https://go.dev/doc/go1.18\n", "// Copyright The OpenTelemetry Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage otelgrpc // import \"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc\"\n\n// gRPC tracing middleware\n// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/rpc.md\nimport (\n\t\"context\"\n\t\"io\"\n\t\"net\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\tgrpc_codes \"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/peer\"\n\t\"google.golang.org/grpc/status\"\n\t\"google.golang.org/protobuf/proto\"\n\n\t\"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc/internal\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/metric\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.17.0\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\ntype messageType attribute.KeyValue\n\n// Event adds an event of the messageType to the span associated with the\n// passed context with a message id.\nfunc (m messageType) Event(ctx context.Context, id int, _ interface{}) {\n\tspan := trace.SpanFromContext(ctx)\n\tif !span.IsRecording() {\n\t\treturn\n\t}\n\tspan.AddEvent(\"message\", trace.WithAttributes(\n\t\tattribute.KeyValue(m),\n\t\tRPCMessageIDKey.Int(id),\n\t))\n}\n\nvar (\n\tmessageSent     = messageType(RPCMessageTypeSent)\n\tmessageReceived = messageType(RPCMessageTypeReceived)\n)\n\n// UnaryClientInterceptor returns a grpc.UnaryClientInterceptor suitable\n// for use in a grpc.Dial call.\nfunc UnaryClientInterceptor(opts ...Option) grpc.UnaryClientInterceptor {\n\tcfg := newConfig(opts, \"client\")\n\ttracer := cfg.TracerProvider.Tracer(\n\t\tinstrumentationName,\n\t\ttrace.WithInstrumentationVersion(Version()),\n\t)\n\n\treturn func(\n\t\tctx context.Context,\n\t\tmethod string,\n\t\treq, reply interface{},\n\t\tcc *grpc.ClientConn,\n\t\tinvoker grpc.UnaryInvoker,\n\t\tcallOpts ...grpc.CallOption,\n\t) error {\n\t\ti := &InterceptorInfo{\n\t\t\tMethod: method,\n\t\t\tType:   UnaryClient,\n\t\t}\n\t\tif cfg.Filter != nil && !cfg.Filter(i) {\n\t\t\treturn invoker(ctx, method, req, reply, cc, callOpts...)\n\t\t}\n\n\t\tname, attr, _ := telemetryAttributes(method, cc.Target())\n\n\t\tstartOpts := append([]trace.SpanStartOption{\n\t\t\ttrace.WithSpanKind(trace.SpanKindClient),\n\t\t\ttrace.WithAttributes(attr...),\n\t\t},\n\t\t\tcfg.SpanStartOptions...,\n\t\t)\n\n\t\tctx, span := tracer.Start(\n\t\t\tctx,\n\t\t\tname,\n\t\t\tstartOpts...,\n\t\t)\n\t\tdefer span.End()\n\n\t\tctx = inject(ctx, cfg.Propagators)\n\n\t\tif cfg.SentEvent {\n\t\t\tmessageSent.Event(ctx, 1, req)\n\t\t}\n\n\t\terr := invoker(ctx, method, req, reply, cc, callOpts...)\n\n\t\tif cfg.ReceivedEvent {\n\t\t\tmessageReceived.Event(ctx, 1, reply)\n\t\t}\n\n\t\tif err != nil {\n\t\t\ts, _ := status.FromError(err)\n\t\t\tspan.SetStatus(codes.Error, s.Message())\n\t\t\tspan.SetAttributes(statusCodeAttr(s.Code()))\n\t\t} else {\n\t\t\tspan.SetAttributes(statusCodeAttr(grpc_codes.OK))\n\t\t}\n\n\t\treturn err\n\t}\n}\n\ntype streamEventType int\n\ntype streamEvent struct {\n\tType streamEventType\n\tErr  error\n}\n\nconst (\n\treceiveEndEvent streamEventType = iota\n\terrorEvent\n)\n\n// clientStream  wraps around the embedded grpc.ClientStream, and intercepts the RecvMsg and\n// SendMsg method call.\ntype clientStream struct {\n\tgrpc.ClientStream\n\n\tdesc       *grpc.StreamDesc\n\tevents     chan streamEvent\n\teventsDone chan struct{}\n\tfinished   chan error\n\n\treceivedEvent bool\n\tsentEvent     bool\n\n\treceivedMessageID int\n\tsentMessageID     int\n}\n\nvar _ = proto.Marshal\n\nfunc (w *clientStream) RecvMsg(m interface{}) error {\n\terr := w.ClientStream.RecvMsg(m)\n\n\tif err == nil && !w.desc.ServerStreams {\n\t\tw.sendStreamEvent(receiveEndEvent, nil)\n\t} else if err == io.EOF {\n\t\tw.sendStreamEvent(receiveEndEvent, nil)\n\t} else if err != nil {\n\t\tw.sendStreamEvent(errorEvent, err)\n\t} else {\n\t\tw.receivedMessageID++\n\n\t\tif w.receivedEvent {\n\t\t\tmessageReceived.Event(w.Context(), w.receivedMessageID, m)\n\t\t}\n\t}\n\n\treturn err\n}\n\nfunc (w *clientStream) SendMsg(m interface{}) error {\n\terr := w.ClientStream.SendMsg(m)\n\n\tw.sentMessageID++\n\n\tif w.sentEvent {\n\t\tmessageSent.Event(w.Context(), w.sentMessageID, m)\n\t}\n\n\tif err != nil {\n\t\tw.sendStreamEvent(errorEvent, err)\n\t}\n\n\treturn err\n}\n\nfunc (w *clientStream) Header() (metadata.MD, error) {\n\tmd, err := w.ClientStream.Header()\n\tif err != nil {\n\t\tw.sendStreamEvent(errorEvent, err)\n\t}\n\n\treturn md, err\n}\n\nfunc (w *clientStream) CloseSend() error {\n\terr := w.ClientStream.CloseSend()\n\tif err != nil {\n\t\tw.sendStreamEvent(errorEvent, err)\n\t}\n\n\treturn err\n}\n\nfunc wrapClientStream(ctx context.Context, s grpc.ClientStream, desc *grpc.StreamDesc, cfg *config) *clientStream {\n\tevents := make(chan streamEvent)\n\teventsDone := make(chan struct{})\n\tfinished := make(chan error)\n\n\tgo func() {\n\t\tdefer close(eventsDone)\n\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase event := <-events:\n\t\t\t\tswitch event.Type {\n\t\t\t\tcase receiveEndEvent:\n\t\t\t\t\tfinished <- nil\n\t\t\t\t\treturn\n\t\t\t\tcase errorEvent:\n\t\t\t\t\tfinished <- event.Err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\tcase <-ctx.Done():\n\t\t\t\tfinished <- ctx.Err()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn &clientStream{\n\t\tClientStream:  s,\n\t\tdesc:          desc,\n\t\tevents:        events,\n\t\teventsDone:    eventsDone,\n\t\tfinished:      finished,\n\t\treceivedEvent: cfg.ReceivedEvent,\n\t\tsentEvent:     cfg.SentEvent,\n\t}\n}\n\nfunc (w *clientStream) sendStreamEvent(eventType streamEventType, err error) {\n\tselect {\n\tcase <-w.eventsDone:\n\tcase w.events <- streamEvent{Type: eventType, Err: err}:\n\t}\n}\n\n// StreamClientInterceptor returns a grpc.StreamClientInterceptor suitable\n// for use in a grpc.Dial call.\nfunc StreamClientInterceptor(opts ...Option) grpc.StreamClientInterceptor {\n\tcfg := newConfig(opts, \"client\")\n\ttracer := cfg.TracerProvider.Tracer(\n\t\tinstrumentationName,\n\t\ttrace.WithInstrumentationVersion(Version()),\n\t)\n\n\treturn func(\n\t\tctx context.Context,\n\t\tdesc *grpc.StreamDesc,\n\t\tcc *grpc.ClientConn,\n\t\tmethod string,\n\t\tstreamer grpc.Streamer,\n\t\tcallOpts ...grpc.CallOption,\n\t) (grpc.ClientStream, error) {\n\t\ti := &InterceptorInfo{\n\t\t\tMethod: method,\n\t\t\tType:   StreamClient,\n\t\t}\n\t\tif cfg.Filter != nil && !cfg.Filter(i) {\n\t\t\treturn streamer(ctx, desc, cc, method, callOpts...)\n\t\t}\n\n\t\tname, attr, _ := telemetryAttributes(method, cc.Target())\n\n\t\tstartOpts := append([]trace.SpanStartOption{\n\t\t\ttrace.WithSpanKind(trace.SpanKindClient),\n\t\t\ttrace.WithAttributes(attr...),\n\t\t},\n\t\t\tcfg.SpanStartOptions...,\n\t\t)\n\n\t\tctx, span := tracer.Start(\n\t\t\tctx,\n\t\t\tname,\n\t\t\tstartOpts...,\n\t\t)\n\n\t\tctx = inject(ctx, cfg.Propagators)\n\n\t\ts, err := streamer(ctx, desc, cc, method, callOpts...)\n\t\tif err != nil {\n\t\t\tgrpcStatus, _ := status.FromError(err)\n\t\t\tspan.SetStatus(codes.Error, grpcStatus.Message())\n\t\t\tspan.SetAttributes(statusCodeAttr(grpcStatus.Code()))\n\t\t\tspan.End()\n\t\t\treturn s, err\n\t\t}\n\t\tstream := wrapClientStream(ctx, s, desc, cfg)\n\n\t\tgo func() {\n\t\t\terr := <-stream.finished\n\n\t\t\tif err != nil {\n\t\t\t\ts, _ := status.FromError(err)\n\t\t\t\tspan.SetStatus(codes.Error, s.Message())\n\t\t\t\tspan.SetAttributes(statusCodeAttr(s.Code()))\n\t\t\t} else {\n\t\t\t\tspan.SetAttributes(statusCodeAttr(grpc_codes.OK))\n\t\t\t}\n\n\t\t\tspan.End()\n\t\t}()\n\n\t\treturn stream, nil\n\t}\n}\n\n// UnaryServerInterceptor returns a grpc.UnaryServerInterceptor suitable\n// for use in a grpc.NewServer call.\nfunc UnaryServerInterceptor(opts ...Option) grpc.UnaryServerInterceptor {\n\tcfg := newConfig(opts, \"server\")\n\ttracer := cfg.TracerProvider.Tracer(\n\t\tinstrumentationName,\n\t\ttrace.WithInstrumentationVersion(Version()),\n\t)\n\n\treturn func(\n\t\tctx context.Context,\n\t\treq interface{},\n\t\tinfo *grpc.UnaryServerInfo,\n\t\thandler grpc.UnaryHandler,\n\t) (interface{}, error) {\n\t\ti := &InterceptorInfo{\n\t\t\tUnaryServerInfo: info,\n\t\t\tType:            UnaryServer,\n\t\t}\n\t\tif cfg.Filter != nil && !cfg.Filter(i) {\n\t\t\treturn handler(ctx, req)\n\t\t}\n\n\t\tctx = extract(ctx, cfg.Propagators)\n\t\tname, attr, metricAttrs := telemetryAttributes(info.FullMethod, peerFromCtx(ctx))\n\n\t\tstartOpts := append([]trace.SpanStartOption{\n\t\t\ttrace.WithSpanKind(trace.SpanKindServer),\n\t\t\ttrace.WithAttributes(attr...),\n\t\t},\n\t\t\tcfg.SpanStartOptions...,\n\t\t)\n\n\t\tctx, span := tracer.Start(\n\t\t\ttrace.ContextWithRemoteSpanContext(ctx, trace.SpanContextFromContext(ctx)),\n\t\t\tname,\n\t\t\tstartOpts...,\n\t\t)\n\t\tdefer span.End()\n\n\t\tif cfg.ReceivedEvent {\n\t\t\tmessageReceived.Event(ctx, 1, req)\n\t\t}\n\n\t\tbefore := time.Now()\n\n\t\tresp, err := handler(ctx, req)\n\n\t\ts, _ := status.FromError(err)\n\t\tif err != nil {\n\t\t\tstatusCode, msg := serverStatus(s)\n\t\t\tspan.SetStatus(statusCode, msg)\n\t\t\tif cfg.SentEvent {\n\t\t\t\tmessageSent.Event(ctx, 1, s.Proto())\n\t\t\t}\n\t\t} else {\n\t\t\tif cfg.SentEvent {\n\t\t\t\tmessageSent.Event(ctx, 1, resp)\n\t\t\t}\n\t\t}\n\t\tgrpcStatusCodeAttr := statusCodeAttr(s.Code())\n\t\tspan.SetAttributes(grpcStatusCodeAttr)\n\n\t\telapsedTime := time.Since(before).Milliseconds()\n\t\tmetricAttrs = append(metricAttrs, grpcStatusCodeAttr)\n\t\tcfg.rpcDuration.Record(ctx, float64(elapsedTime), metric.WithAttributes(metricAttrs...))\n\n\t\treturn resp, err\n\t}\n}\n\n// serverStream wraps around the embedded grpc.ServerStream, and intercepts the RecvMsg and\n// SendMsg method call.\ntype serverStream struct {\n\tgrpc.ServerStream\n\tctx context.Context\n\n\treceivedMessageID int\n\tsentMessageID     int\n\n\treceivedEvent bool\n\tsentEvent     bool\n}\n\nfunc (w *serverStream) Context() context.Context {\n\treturn w.ctx\n}\n\nfunc (w *serverStream) RecvMsg(m interface{}) error {\n\terr := w.ServerStream.RecvMsg(m)\n\n\tif err == nil {\n\t\tw.receivedMessageID++\n\t\tif w.receivedEvent {\n\t\t\tmessageReceived.Event(w.Context(), w.receivedMessageID, m)\n\t\t}\n\t}\n\n\treturn err\n}\n\nfunc (w *serverStream) SendMsg(m interface{}) error {\n\terr := w.ServerStream.SendMsg(m)\n\n\tw.sentMessageID++\n\tif w.sentEvent {\n\t\tmessageSent.Event(w.Context(), w.sentMessageID, m)\n\t}\n\n\treturn err\n}\n\nfunc wrapServerStream(ctx context.Context, ss grpc.ServerStream, cfg *config) *serverStream {\n\treturn &serverStream{\n\t\tServerStream:  ss,\n\t\tctx:           ctx,\n\t\treceivedEvent: cfg.ReceivedEvent,\n\t\tsentEvent:     cfg.SentEvent,\n\t}\n}\n\n// StreamServerInterceptor returns a grpc.StreamServerInterceptor suitable\n// for use in a grpc.NewServer call.\nfunc StreamServerInterceptor(opts ...Option) grpc.StreamServerInterceptor {\n\tcfg := newConfig(opts, \"server\")\n\ttracer := cfg.TracerProvider.Tracer(\n\t\tinstrumentationName,\n\t\ttrace.WithInstrumentationVersion(Version()),\n\t)\n\n\treturn func(\n\t\tsrv interface{},\n\t\tss grpc.ServerStream,\n\t\tinfo *grpc.StreamServerInfo,\n\t\thandler grpc.StreamHandler,\n\t) error {\n\t\tctx := ss.Context()\n\t\ti := &InterceptorInfo{\n\t\t\tStreamServerInfo: info,\n\t\t\tType:             StreamServer,\n\t\t}\n\t\tif cfg.Filter != nil && !cfg.Filter(i) {\n\t\t\treturn handler(srv, wrapServerStream(ctx, ss, cfg))\n\t\t}\n\n\t\tctx = extract(ctx, cfg.Propagators)\n\t\tname, attr, _ := telemetryAttributes(info.FullMethod, peerFromCtx(ctx))\n\n\t\tstartOpts := append([]trace.SpanStartOption{\n\t\t\ttrace.WithSpanKind(trace.SpanKindServer),\n\t\t\ttrace.WithAttributes(attr...),\n\t\t},\n\t\t\tcfg.SpanStartOptions...,\n\t\t)\n\n\t\tctx, span := tracer.Start(\n\t\t\ttrace.ContextWithRemoteSpanContext(ctx, trace.SpanContextFromContext(ctx)),\n\t\t\tname,\n\t\t\tstartOpts...,\n\t\t)\n\t\tdefer span.End()\n\n\t\terr := handler(srv, wrapServerStream(ctx, ss, cfg))\n\t\tif err != nil {\n\t\t\ts, _ := status.FromError(err)\n\t\t\tstatusCode, msg := serverStatus(s)\n\t\t\tspan.SetStatus(statusCode, msg)\n\t\t\tspan.SetAttributes(statusCodeAttr(s.Code()))\n\t\t} else {\n\t\t\tspan.SetAttributes(statusCodeAttr(grpc_codes.OK))\n\t\t}\n\n\t\treturn err\n\t}\n}\n\n// telemetryAttributes returns a span name and span and metric attributes from\n// the gRPC method and peer address.\nfunc telemetryAttributes(fullMethod, peerAddress string) (string, []attribute.KeyValue, []attribute.KeyValue) {\n\tname, methodAttrs := internal.ParseFullMethod(fullMethod)\n\tpeerAttrs := peerAttr(peerAddress)\n\n\tattrs := make([]attribute.KeyValue, 0, 1+len(methodAttrs)+len(peerAttrs))\n\tattrs = append(attrs, RPCSystemGRPC)\n\tattrs = append(attrs, methodAttrs...)\n\tmetricAttrs := attrs[:1+len(methodAttrs)]\n\tattrs = append(attrs, peerAttrs...)\n\treturn name, attrs, metricAttrs\n}\n\n// peerAttr returns attributes about the peer address.\nfunc peerAttr(addr string) []attribute.KeyValue {\n\thost, p, err := net.SplitHostPort(addr)\n\tif err != nil {\n\t\treturn nil\n\t}\n\n\tif host == \"\" {\n\t\thost = \"127.0.0.1\"\n\t}\n\tport, err := strconv.Atoi(p)\n\tif err != nil {\n\t\treturn nil\n\t}\n\n\tvar attr []attribute.KeyValue\n\tif ip := net.ParseIP(host); ip != nil {\n\t\tattr = []attribute.KeyValue{\n\t\t\tsemconv.NetSockPeerAddr(host),\n\t\t\tsemconv.NetSockPeerPort(port),\n\t\t}\n\t} else {\n\t\tattr = []attribute.KeyValue{\n\t\t\tsemconv.NetPeerName(host),\n\t\t\tsemconv.NetPeerPort(port),\n\t\t}\n\t}\n\n\treturn attr\n}\n\n// peerFromCtx returns a peer address from a context, if one exists.\nfunc peerFromCtx(ctx context.Context) string {\n\tp, ok := peer.FromContext(ctx)\n\tif !ok {\n\t\treturn \"\"\n\t}\n\treturn p.Addr.String()\n}\n\n// statusCodeAttr returns status code attribute based on given gRPC code.\nfunc statusCodeAttr(c grpc_codes.Code) attribute.KeyValue {\n\treturn GRPCStatusCodeKey.Int64(int64(c))\n}\n\n// serverStatus returns a span status code and message for a given gRPC\n// status code. It maps specific gRPC status codes to a corresponding span\n// status code and message. This function is intended for use on the server\n// side of a gRPC connection.\n//\n// If the gRPC status code is Unknown, DeadlineExceeded, Unimplemented,\n// Internal, Unavailable, or DataLoss, it returns a span status code of Error\n// and the message from the gRPC status. Otherwise, it returns a span status\n// code of Unset and an empty message.\nfunc serverStatus(grpcStatus *status.Status) (codes.Code, string) {\n\tswitch grpcStatus.Code() {\n\tcase grpc_codes.Unknown,\n\t\tgrpc_codes.DeadlineExceeded,\n\t\tgrpc_codes.Unimplemented,\n\t\tgrpc_codes.Internal,\n\t\tgrpc_codes.Unavailable,\n\t\tgrpc_codes.DataLoss:\n\t\treturn codes.Error, grpcStatus.Message()\n\tdefault:\n\t\treturn codes.Unset, \"\"\n\t}\n}\n", "// Copyright The OpenTelemetry Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage test\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"strconv\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/interop\"\n\tpb \"google.golang.org/grpc/interop/grpc_testing\"\n\n\t\"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/sdk/instrumentation\"\n\t\"go.opentelemetry.io/otel/sdk/metric\"\n\t\"go.opentelemetry.io/otel/sdk/metric/metricdata\"\n\t\"go.opentelemetry.io/otel/sdk/metric/metricdata/metricdatatest\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/sdk/trace/tracetest\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.17.0\"\n)\n\nvar wantInstrumentationScope = instrumentation.Scope{\n\tName:      \"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc\",\n\tSchemaURL: \"https://opentelemetry.io/schemas/1.17.0\",\n\tVersion:   otelgrpc.Version(),\n}\n\nconst bufSize = 2048\n\n// newGrpcTest creats a grpc server, starts it, and executes all the calls, closes everything down.\nfunc newGrpcTest(listener net.Listener, cOpt []grpc.DialOption, sOpt []grpc.ServerOption) error {\n\tgrpcServer := grpc.NewServer(sOpt...)\n\tpb.RegisterTestServiceServer(grpcServer, interop.NewTestServer())\n\terrCh := make(chan error)\n\tgo func() {\n\t\terrCh <- grpcServer.Serve(listener)\n\t}()\n\tctx := context.Background()\n\n\tcOpt = append(cOpt, grpc.WithBlock(), grpc.WithTransportCredentials(insecure.NewCredentials()))\n\n\tif l, ok := listener.(interface{ Dial() (net.Conn, error) }); ok {\n\t\tdial := func(context.Context, string) (net.Conn, error) { return l.Dial() }\n\t\tcOpt = append(cOpt, grpc.WithContextDialer(dial))\n\t}\n\n\tconn, err := grpc.DialContext(\n\t\tctx,\n\t\tlistener.Addr().String(),\n\t\tcOpt...,\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\tclient := pb.NewTestServiceClient(conn)\n\n\tdoCalls(client)\n\n\tconn.Close()\n\tgrpcServer.Stop()\n\n\treturn <-errCh\n}\n\nfunc doCalls(client pb.TestServiceClient) {\n\tinterop.DoEmptyUnaryCall(client)\n\tinterop.DoLargeUnaryCall(client)\n\tinterop.DoClientStreaming(client)\n\tinterop.DoServerStreaming(client)\n\tinterop.DoPingPong(client)\n}\n\nfunc TestInterceptors(t *testing.T) {\n\tclientUnarySR := tracetest.NewSpanRecorder()\n\tclientUnaryTP := trace.NewTracerProvider(trace.WithSpanProcessor(clientUnarySR))\n\n\tclientStreamSR := tracetest.NewSpanRecorder()\n\tclientStreamTP := trace.NewTracerProvider(trace.WithSpanProcessor(clientStreamSR))\n\n\tserverUnarySR := tracetest.NewSpanRecorder()\n\tserverUnaryTP := trace.NewTracerProvider(trace.WithSpanProcessor(serverUnarySR))\n\tserverUnaryMetricReader := metric.NewManualReader()\n\tserverUnaryMP := metric.NewMeterProvider(metric.WithReader(serverUnaryMetricReader))\n\n\tserverStreamSR := tracetest.NewSpanRecorder()\n\tserverStreamTP := trace.NewTracerProvider(trace.WithSpanProcessor(serverStreamSR))\n\n\tlistener, err := net.Listen(\"tcp\", \"127.0.0.1:0\")\n\trequire.NoError(t, err, \"failed to open port\")\n\terr = newGrpcTest(listener, []grpc.DialOption{\n\t\tgrpc.WithUnaryInterceptor(otelgrpc.UnaryClientInterceptor(\n\t\t\totelgrpc.WithTracerProvider(clientUnaryTP),\n\t\t\totelgrpc.WithMessageEvents(otelgrpc.ReceivedEvents, otelgrpc.SentEvents),\n\t\t)),\n\t\tgrpc.WithStreamInterceptor(otelgrpc.StreamClientInterceptor(\n\t\t\totelgrpc.WithTracerProvider(clientStreamTP),\n\t\t\totelgrpc.WithMessageEvents(otelgrpc.ReceivedEvents, otelgrpc.SentEvents),\n\t\t)),\n\t},\n\t\t[]grpc.ServerOption{\n\t\t\tgrpc.UnaryInterceptor(otelgrpc.UnaryServerInterceptor(\n\t\t\t\totelgrpc.WithTracerProvider(serverUnaryTP),\n\t\t\t\totelgrpc.WithMeterProvider(serverUnaryMP),\n\t\t\t\totelgrpc.WithMessageEvents(otelgrpc.ReceivedEvents, otelgrpc.SentEvents),\n\t\t\t)),\n\t\t\tgrpc.StreamInterceptor(otelgrpc.StreamServerInterceptor(\n\t\t\t\totelgrpc.WithTracerProvider(serverStreamTP),\n\t\t\t\totelgrpc.WithMessageEvents(otelgrpc.ReceivedEvents, otelgrpc.SentEvents),\n\t\t\t)),\n\t\t},\n\t)\n\trequire.NoError(t, err)\n\n\tt.Run(\"UnaryClientSpans\", func(t *testing.T) {\n\t\tcheckUnaryClientSpans(t, clientUnarySR.Ended(), listener.Addr().String())\n\t})\n\n\tt.Run(\"StreamClientSpans\", func(t *testing.T) {\n\t\tcheckStreamClientSpans(t, clientStreamSR.Ended(), listener.Addr().String())\n\t})\n\n\tt.Run(\"UnaryServerSpans\", func(t *testing.T) {\n\t\tcheckUnaryServerSpans(t, serverUnarySR.Ended())\n\t\tcheckUnaryServerRecords(t, serverUnaryMetricReader)\n\t})\n\n\tt.Run(\"StreamServerSpans\", func(t *testing.T) {\n\t\tcheckStreamServerSpans(t, serverStreamSR.Ended())\n\t})\n}\n\nfunc checkUnaryClientSpans(t *testing.T, spans []trace.ReadOnlySpan, addr string) {\n\trequire.Len(t, spans, 2)\n\n\thost, p, err := net.SplitHostPort(addr)\n\trequire.NoError(t, err)\n\tport, err := strconv.Atoi(p)\n\trequire.NoError(t, err)\n\n\temptySpan := spans[0]\n\tassert.False(t, emptySpan.EndTime().IsZero())\n\tassert.Equal(t, \"grpc.testing.TestService/EmptyCall\", emptySpan.Name())\n\tassertEvents(t, []trace.Event{\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t}, emptySpan.Events())\n\tassert.ElementsMatch(t, []attribute.KeyValue{\n\t\tsemconv.RPCMethod(\"EmptyCall\"),\n\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\totelgrpc.RPCSystemGRPC,\n\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\tsemconv.NetSockPeerAddr(host),\n\t\tsemconv.NetSockPeerPort(port),\n\t}, emptySpan.Attributes())\n\n\tlargeSpan := spans[1]\n\tassert.False(t, largeSpan.EndTime().IsZero())\n\tassert.Equal(t, \"grpc.testing.TestService/UnaryCall\", largeSpan.Name())\n\tassertEvents(t, []trace.Event{\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t\t// largeReqSize from \"google.golang.org/grpc/interop\" + 12 (overhead).\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t\t// largeRespSize from \"google.golang.org/grpc/interop\" + 8 (overhead).\n\t\t\t},\n\t\t},\n\t}, largeSpan.Events())\n\tassert.ElementsMatch(t, []attribute.KeyValue{\n\t\tsemconv.RPCMethod(\"UnaryCall\"),\n\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\totelgrpc.RPCSystemGRPC,\n\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\tsemconv.NetSockPeerAddr(host),\n\t\tsemconv.NetSockPeerPort(port),\n\t}, largeSpan.Attributes())\n}\n\nfunc checkStreamClientSpans(t *testing.T, spans []trace.ReadOnlySpan, addr string) {\n\trequire.Len(t, spans, 3)\n\n\thost, p, err := net.SplitHostPort(addr)\n\trequire.NoError(t, err)\n\tport, err := strconv.Atoi(p)\n\trequire.NoError(t, err)\n\n\tstreamInput := spans[0]\n\tassert.False(t, streamInput.EndTime().IsZero())\n\tassert.Equal(t, \"grpc.testing.TestService/StreamingInputCall\", streamInput.Name())\n\t// sizes from reqSizes in \"google.golang.org/grpc/interop\".\n\tassertEvents(t, []trace.Event{\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(2),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(3),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(4),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t// client does not record an event for the server response.\n\t}, streamInput.Events())\n\tassert.ElementsMatch(t, []attribute.KeyValue{\n\t\tsemconv.RPCMethod(\"StreamingInputCall\"),\n\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\totelgrpc.RPCSystemGRPC,\n\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\tsemconv.NetSockPeerAddr(host),\n\t\tsemconv.NetSockPeerPort(port),\n\t}, streamInput.Attributes())\n\n\tstreamOutput := spans[1]\n\tassert.False(t, streamOutput.EndTime().IsZero())\n\tassert.Equal(t, \"grpc.testing.TestService/StreamingOutputCall\", streamOutput.Name())\n\t// sizes from respSizes in \"google.golang.org/grpc/interop\".\n\tassertEvents(t, []trace.Event{\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(2),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(3),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(4),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t}, streamOutput.Events())\n\tassert.ElementsMatch(t, []attribute.KeyValue{\n\t\tsemconv.RPCMethod(\"StreamingOutputCall\"),\n\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\totelgrpc.RPCSystemGRPC,\n\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\tsemconv.NetSockPeerAddr(host),\n\t\tsemconv.NetSockPeerPort(port),\n\t}, streamOutput.Attributes())\n\n\tpingPong := spans[2]\n\tassert.False(t, pingPong.EndTime().IsZero())\n\tassert.Equal(t, \"grpc.testing.TestService/FullDuplexCall\", pingPong.Name())\n\tassertEvents(t, []trace.Event{\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(2),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(2),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(3),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(3),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(4),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(4),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t}, pingPong.Events())\n\tassert.ElementsMatch(t, []attribute.KeyValue{\n\t\tsemconv.RPCMethod(\"FullDuplexCall\"),\n\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\totelgrpc.RPCSystemGRPC,\n\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\tsemconv.NetSockPeerAddr(host),\n\t\tsemconv.NetSockPeerPort(port),\n\t}, pingPong.Attributes())\n}\n\nfunc checkStreamServerSpans(t *testing.T, spans []trace.ReadOnlySpan) {\n\trequire.Len(t, spans, 3)\n\n\tstreamInput := spans[0]\n\tassert.False(t, streamInput.EndTime().IsZero())\n\tassert.Equal(t, \"grpc.testing.TestService/StreamingInputCall\", streamInput.Name())\n\t// sizes from reqSizes in \"google.golang.org/grpc/interop\".\n\tassertEvents(t, []trace.Event{\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(2),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(3),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(4),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t}, streamInput.Events())\n\tport, ok := findAttribute(streamInput.Attributes(), semconv.NetSockPeerPortKey)\n\tassert.True(t, ok)\n\n\tassert.ElementsMatch(t, []attribute.KeyValue{\n\t\tsemconv.RPCMethod(\"StreamingInputCall\"),\n\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\totelgrpc.RPCSystemGRPC,\n\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\tsemconv.NetSockPeerAddr(\"127.0.0.1\"),\n\t\tport,\n\t}, streamInput.Attributes())\n\n\tstreamOutput := spans[1]\n\tassert.False(t, streamOutput.EndTime().IsZero())\n\tassert.Equal(t, \"grpc.testing.TestService/StreamingOutputCall\", streamOutput.Name())\n\t// sizes from respSizes in \"google.golang.org/grpc/interop\".\n\tassertEvents(t, []trace.Event{\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(2),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(3),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(4),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t}, streamOutput.Events())\n\n\tport, ok = findAttribute(streamOutput.Attributes(), semconv.NetSockPeerPortKey)\n\tassert.True(t, ok)\n\n\tassert.ElementsMatch(t, []attribute.KeyValue{\n\t\tsemconv.RPCMethod(\"StreamingOutputCall\"),\n\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\totelgrpc.RPCSystemGRPC,\n\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\tsemconv.NetSockPeerAddr(\"127.0.0.1\"),\n\t\tport,\n\t}, streamOutput.Attributes())\n\n\tpingPong := spans[2]\n\tassert.False(t, pingPong.EndTime().IsZero())\n\tassert.Equal(t, \"grpc.testing.TestService/FullDuplexCall\", pingPong.Name())\n\tassertEvents(t, []trace.Event{\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(2),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(2),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(3),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(3),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(4),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(4),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t}, pingPong.Events())\n\tport, ok = findAttribute(pingPong.Attributes(), semconv.NetSockPeerPortKey)\n\tassert.True(t, ok)\n\tassert.ElementsMatch(t, []attribute.KeyValue{\n\t\tsemconv.RPCMethod(\"FullDuplexCall\"),\n\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\totelgrpc.RPCSystemGRPC,\n\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\tsemconv.NetSockPeerAddr(\"127.0.0.1\"),\n\t\tport,\n\t}, pingPong.Attributes())\n}\n\nfunc checkUnaryServerSpans(t *testing.T, spans []trace.ReadOnlySpan) {\n\trequire.Len(t, spans, 2)\n\n\temptySpan := spans[0]\n\tassert.False(t, emptySpan.EndTime().IsZero())\n\tassert.Equal(t, \"grpc.testing.TestService/EmptyCall\", emptySpan.Name())\n\tassertEvents(t, []trace.Event{\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t},\n\t\t},\n\t}, emptySpan.Events())\n\n\tport, ok := findAttribute(emptySpan.Attributes(), semconv.NetSockPeerPortKey)\n\tassert.True(t, ok)\n\tassert.ElementsMatch(t, []attribute.KeyValue{\n\t\tsemconv.RPCMethod(\"EmptyCall\"),\n\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\totelgrpc.RPCSystemGRPC,\n\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\tsemconv.NetSockPeerAddr(\"127.0.0.1\"),\n\t\tport,\n\t}, emptySpan.Attributes())\n\n\tlargeSpan := spans[1]\n\tassert.False(t, largeSpan.EndTime().IsZero())\n\tassert.Equal(t, \"grpc.testing.TestService/UnaryCall\", largeSpan.Name())\n\tassertEvents(t, []trace.Event{\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"RECEIVED\"),\n\t\t\t\t// largeReqSize from \"google.golang.org/grpc/interop\" + 12 (overhead).\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"message\",\n\t\t\tAttributes: []attribute.KeyValue{\n\t\t\t\totelgrpc.RPCMessageIDKey.Int(1),\n\t\t\t\totelgrpc.RPCMessageTypeKey.String(\"SENT\"),\n\t\t\t\t// largeRespSize from \"google.golang.org/grpc/interop\" + 8 (overhead).\n\t\t\t},\n\t\t},\n\t}, largeSpan.Events())\n\n\tport, ok = findAttribute(largeSpan.Attributes(), semconv.NetSockPeerPortKey)\n\tassert.True(t, ok)\n\tassert.ElementsMatch(t, []attribute.KeyValue{\n\t\tsemconv.RPCMethod(\"UnaryCall\"),\n\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\totelgrpc.RPCSystemGRPC,\n\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\tsemconv.NetSockPeerAddr(\"127.0.0.1\"),\n\t\tport,\n\t}, largeSpan.Attributes())\n}\n\nfunc assertEvents(t *testing.T, expected, actual []trace.Event) bool {\n\tif !assert.Len(t, actual, len(expected)) {\n\t\treturn false\n\t}\n\n\tvar failed bool\n\tfor i, e := range expected {\n\t\tif !assert.Equal(t, e.Name, actual[i].Name, \"names do not match\") {\n\t\t\tfailed = true\n\t\t}\n\t\tif !assert.ElementsMatch(t, e.Attributes, actual[i].Attributes, \"attributes do not match: %s\", e.Name) {\n\t\t\tfailed = true\n\t\t}\n\t}\n\n\treturn !failed\n}\n\nfunc checkUnaryServerRecords(t *testing.T, reader metric.Reader) {\n\trm := metricdata.ResourceMetrics{}\n\terr := reader.Collect(context.Background(), &rm)\n\tassert.NoError(t, err)\n\trequire.Len(t, rm.ScopeMetrics, 1)\n\n\twant := metricdata.ScopeMetrics{\n\t\tScope: wantInstrumentationScope,\n\t\tMetrics: []metricdata.Metrics{\n\t\t\t{\n\t\t\t\tName:        \"rpc.server.duration\",\n\t\t\t\tDescription: \"Measures the duration of inbound RPC.\",\n\t\t\t\tUnit:        \"ms\",\n\t\t\t\tData: metricdata.Histogram[float64]{\n\t\t\t\t\tTemporality: metricdata.CumulativeTemporality,\n\t\t\t\t\tDataPoints: []metricdata.HistogramDataPoint[float64]{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tAttributes: attribute.NewSet(\n\t\t\t\t\t\t\t\tsemconv.RPCMethod(\"EmptyCall\"),\n\t\t\t\t\t\t\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\t\t\t\t\t\t\totelgrpc.RPCSystemGRPC,\n\t\t\t\t\t\t\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tAttributes: attribute.NewSet(\n\t\t\t\t\t\t\t\tsemconv.RPCMethod(\"UnaryCall\"),\n\t\t\t\t\t\t\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n\t\t\t\t\t\t\t\totelgrpc.RPCSystemGRPC,\n\t\t\t\t\t\t\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tmetricdatatest.AssertEqual(t, want, rm.ScopeMetrics[0], metricdatatest.IgnoreTimestamp(), metricdatatest.IgnoreValue())\n}\n\nfunc findAttribute(kvs []attribute.KeyValue, key attribute.Key) (attribute.KeyValue, bool) {\n\tfor _, kv := range kvs {\n\t\tif kv.Key == key {\n\t\t\treturn kv, true\n\t\t}\n\t}\n\treturn attribute.KeyValue{}, false\n}\n"], "filenames": ["CHANGELOG.md", "instrumentation/google.golang.org/grpc/otelgrpc/interceptor.go", "instrumentation/google.golang.org/grpc/otelgrpc/test/grpc_test.go"], "buggy_code_start_loc": [47, 86, 19], "buggy_code_end_loc": [47, 512, 744], "fixing_code_start_loc": [48, 86, 18], "fixing_code_end_loc": [52, 513, 709], "type": "CWE-770", "message": "OpenTelemetry-Go Contrib is a collection of third-party packages for OpenTelemetry-Go. Prior to version 0.46.0, the grpc Unary Server Interceptor out of the box adds labels `net.peer.sock.addr` and `net.peer.sock.port` that have unbound cardinality. It leads to the server's potential memory exhaustion when many malicious requests are sent. An attacker can easily flood the peer address and port for requests. Version 0.46.0 contains a fix for this issue. As a workaround to stop being affected, a view removing the attributes can be used. The other possibility is to disable grpc metrics instrumentation by passing `otelgrpc.WithMeterProvider` option with `noop.NewMeterProvider`.", "other": {"cve": {"id": "CVE-2023-47108", "sourceIdentifier": "security-advisories@github.com", "published": "2023-11-10T19:15:16.410", "lastModified": "2023-11-20T19:34:26.493", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OpenTelemetry-Go Contrib is a collection of third-party packages for OpenTelemetry-Go. Prior to version 0.46.0, the grpc Unary Server Interceptor out of the box adds labels `net.peer.sock.addr` and `net.peer.sock.port` that have unbound cardinality. It leads to the server's potential memory exhaustion when many malicious requests are sent. An attacker can easily flood the peer address and port for requests. Version 0.46.0 contains a fix for this issue. As a workaround to stop being affected, a view removing the attributes can be used. The other possibility is to disable grpc metrics instrumentation by passing `otelgrpc.WithMeterProvider` option with `noop.NewMeterProvider`."}, {"lang": "es", "value": "OpenTelemetry-Go Contrib es una colecci\u00f3n de paquetes de terceros para OpenTelemetry-Go. Antes de la versi\u00f3n 0.46.0, grpc Unary Server Interceptor agrega etiquetas `net.peer.sock.addr` y `net.peer.sock.port` que tienen cardinalidad independiente. Conduce al posible agotamiento de la memoria del servidor cuando se env\u00edan muchas solicitudes maliciosas. Un atacante puede inundar f\u00e1cilmente la direcci\u00f3n y el puerto del par para solicitudes. La versi\u00f3n 0.46.0 contiene una soluci\u00f3n para este problema. Como workaround para dejar de verse afectado, se puede utilizar una vista que elimine los atributos. La otra posibilidad es deshabilitar la instrumentaci\u00f3n de m\u00e9tricas de grpc pasando la opci\u00f3n `otelgrpc.WithMeterProvider` con `noop.NewMeterProvider`."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-770"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:opentelemetry:opentelemetry:*:*:*:*:*:go:*:*", "versionEndExcluding": "0.46.0", "matchCriteriaId": "3F6FEFCC-23A7-4CB6-BC7E-5D6B3872786A"}]}]}], "references": [{"url": "https://github.com/open-telemetry/opentelemetry-go-contrib/blob/9d4eb7e7706038b07d33f83f76afbe13f53d171d/instrumentation/google.golang.org/grpc/otelgrpc/interceptor.go#L327", "source": "security-advisories@github.com", "tags": ["Product"]}, {"url": "https://github.com/open-telemetry/opentelemetry-go-contrib/blob/instrumentation/google.golang.org/grpc/otelgrpc/v0.45.0/instrumentation/google.golang.org/grpc/otelgrpc/config.go#L138", "source": "security-advisories@github.com", "tags": ["Product"]}, {"url": "https://github.com/open-telemetry/opentelemetry-go-contrib/commit/b44dfc9092b157625a5815cb437583cee663333b", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/open-telemetry/opentelemetry-go-contrib/pull/4322", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Patch"]}, {"url": "https://github.com/open-telemetry/opentelemetry-go-contrib/security/advisories/GHSA-8pgv-569h-w5rw", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://pkg.go.dev/go.opentelemetry.io/otel/metric/noop#NewMeterProvider", "source": "security-advisories@github.com", "tags": ["Product"]}]}, "github_commit_url": "https://github.com/open-telemetry/opentelemetry-go-contrib/commit/b44dfc9092b157625a5815cb437583cee663333b"}}