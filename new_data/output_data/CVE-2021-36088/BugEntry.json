{"buggy_code": ["/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */\n\n/*  Fluent Bit\n *  ==========\n *  Copyright (C) 2019-2021 The Fluent Bit Authors\n *  Copyright (C) 2015-2018 Treasure Data Inc.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n#define _GNU_SOURCE\n#include <time.h>\n\n#include <fluent-bit/flb_parser.h>\n#include <fluent-bit/flb_pack.h>\n#include <fluent-bit/flb_mem.h>\n#include <fluent-bit/flb_parser_decoder.h>\n\nint flb_parser_json_do(struct flb_parser *parser,\n                       const char *in_buf, size_t in_size,\n                       void **out_buf, size_t *out_size,\n                       struct flb_time *out_time)\n{\n    int i;\n    int skip;\n    int ret;\n    int slen;\n    int root_type;\n    int records;\n    double tmfrac = 0;\n    char *mp_buf = NULL;\n    char *time_key;\n    char *tmp_out_buf = NULL;\n    char tmp[255];\n    size_t tmp_out_size = 0;\n    size_t off = 0;\n    size_t map_size;\n    size_t mp_size;\n    size_t len;\n    msgpack_sbuffer mp_sbuf;\n    msgpack_packer  mp_pck;\n    msgpack_unpacked result;\n    msgpack_object map;\n    msgpack_object *k = NULL;\n    msgpack_object *v = NULL;\n    time_t time_lookup;\n    struct tm tm = {0};\n    struct flb_time *t;\n\n    /* Convert incoming in_buf JSON message to message pack format */\n    ret = flb_pack_json_recs(in_buf, in_size, &mp_buf, &mp_size, &root_type,\n                             &records);\n    if (ret != 0) {\n        return -1;\n    }\n\n    if (records != 1) {\n        flb_free(mp_buf);\n        return -1;\n    }\n\n    /* Make sure object is a map */\n    msgpack_unpacked_init(&result);\n    if (msgpack_unpack_next(&result, mp_buf, mp_size, &off) == MSGPACK_UNPACK_SUCCESS) {\n        map = result.data;\n        if (map.type != MSGPACK_OBJECT_MAP) {\n            flb_free(mp_buf);\n            msgpack_unpacked_destroy(&result);\n            return -1;\n        }\n    }\n    else {\n        if (mp_size > 0) {\n            flb_free(mp_buf);\n        }\n        msgpack_unpacked_destroy(&result);\n        return -1;\n    }\n\n    /* Export results (might change later) */\n    tmp_out_buf = mp_buf;\n    tmp_out_size = mp_size;\n\n    /* Do we have some decoders set ? */\n    if (parser->decoders) {\n        ret = flb_parser_decoder_do(parser->decoders,\n                                    mp_buf, mp_size,\n                                    &tmp_out_buf, &tmp_out_size);\n        if (ret == 0) {\n            /* re-process the unpack context */\n            off = 0;\n            msgpack_unpacked_destroy(&result);\n            msgpack_unpacked_init(&result);\n            msgpack_unpack_next(&result, tmp_out_buf, tmp_out_size, &off);\n            map = result.data;\n        }\n    }\n\n    /* Set the possible outgoing buffer */\n    *out_buf = tmp_out_buf;\n    *out_size = tmp_out_size;\n    if (mp_buf != tmp_out_buf) {\n        flb_free(mp_buf);\n    }\n\n    /* Do time resolution ? */\n    if (!parser->time_fmt) {\n        msgpack_unpacked_destroy(&result);\n        return *out_size;\n    }\n\n    if (parser->time_key) {\n        time_key = parser->time_key;\n    }\n    else {\n        time_key = \"time\";\n    }\n    slen = strlen(time_key);\n\n    /* Lookup time field */\n    map_size = map.via.map.size;\n    skip = map_size;\n    for (i = 0; i < map_size; i++) {\n        k = &map.via.map.ptr[i].key;\n        v = &map.via.map.ptr[i].val;\n\n        if (k->via.str.size != slen) {\n            continue;\n        }\n\n        /* Ensure the pointer we are about to read is not NULL */\n        if (k->via.str.ptr == NULL) {\n            flb_free(mp_buf);\n            *out_buf = NULL;\n            msgpack_unpacked_destroy(&result);\n            return -1;\n        }\n\n        if (strncmp(k->via.str.ptr, time_key, k->via.str.size) == 0) {\n            /* We found the key, break the loop and keep the index */\n            if (parser->time_keep == FLB_FALSE) {\n                skip = i;\n                break;\n            }\n            else {\n                skip = -1;\n            }\n            break;\n        }\n\n        k = NULL;\n        v = NULL;\n    }\n\n    /* No time_key field found */\n    if (i >= map_size || !k || !v) {\n        msgpack_unpacked_destroy(&result);\n        return *out_size;\n    }\n\n    /* Ensure we have an accurate type */\n    if (v->type != MSGPACK_OBJECT_STR) {\n        msgpack_unpacked_destroy(&result);\n        return *out_size;\n    }\n\n    /* Lookup time */\n    ret = flb_parser_time_lookup(v->via.str.ptr, v->via.str.size,\n                                 0, parser, &tm, &tmfrac);\n    if (ret == -1) {\n        len = v->via.str.size;\n        if (len > sizeof(tmp) - 1) {\n            len = sizeof(tmp) - 1;\n        }\n        memcpy(tmp, v->via.str.ptr, len);\n        tmp[len] = '\\0';\n        flb_warn(\"[parser:%s] invalid time format %s for '%s'\",\n                 parser->name, parser->time_fmt_full, tmp);\n        time_lookup = 0;\n    }\n    else {\n        time_lookup = flb_parser_tm2time(&tm);\n    }\n\n    /* Compose a new map without the time_key field */\n    msgpack_sbuffer_init(&mp_sbuf);\n    msgpack_packer_init(&mp_pck, &mp_sbuf, msgpack_sbuffer_write);\n\n    if (parser->time_keep == FLB_FALSE) {\n        msgpack_pack_map(&mp_pck, map_size - 1);\n    }\n    else {\n        msgpack_pack_map(&mp_pck, map_size);\n    }\n\n    for (i = 0; i < map_size; i++) {\n        if (i == skip) {\n            continue;\n        }\n        msgpack_pack_object(&mp_pck, map.via.map.ptr[i].key);\n        msgpack_pack_object(&mp_pck, map.via.map.ptr[i].val);\n    }\n\n    /* Export the proper buffer */\n    flb_free(tmp_out_buf);\n    *out_buf = mp_sbuf.data;\n    *out_size = mp_sbuf.size;\n\n    t = out_time;\n    t->tm.tv_sec  = time_lookup;\n    t->tm.tv_nsec = (tmfrac * 1000000000);\n\n    msgpack_unpacked_destroy(&result);\n    return *out_size;\n}\n"], "fixing_code": ["/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */\n\n/*  Fluent Bit\n *  ==========\n *  Copyright (C) 2019-2021 The Fluent Bit Authors\n *  Copyright (C) 2015-2018 Treasure Data Inc.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n#define _GNU_SOURCE\n#include <time.h>\n\n#include <fluent-bit/flb_parser.h>\n#include <fluent-bit/flb_pack.h>\n#include <fluent-bit/flb_mem.h>\n#include <fluent-bit/flb_parser_decoder.h>\n\nint flb_parser_json_do(struct flb_parser *parser,\n                       const char *in_buf, size_t in_size,\n                       void **out_buf, size_t *out_size,\n                       struct flb_time *out_time)\n{\n    int i;\n    int skip;\n    int ret;\n    int slen;\n    int root_type;\n    int records;\n    double tmfrac = 0;\n    char *mp_buf = NULL;\n    char *time_key;\n    char *tmp_out_buf = NULL;\n    char tmp[255];\n    size_t tmp_out_size = 0;\n    size_t off = 0;\n    size_t map_size;\n    size_t mp_size;\n    size_t len;\n    msgpack_sbuffer mp_sbuf;\n    msgpack_packer  mp_pck;\n    msgpack_unpacked result;\n    msgpack_object map;\n    msgpack_object *k = NULL;\n    msgpack_object *v = NULL;\n    time_t time_lookup;\n    struct tm tm = {0};\n    struct flb_time *t;\n\n    /* Convert incoming in_buf JSON message to message pack format */\n    ret = flb_pack_json_recs(in_buf, in_size, &mp_buf, &mp_size, &root_type,\n                             &records);\n    if (ret != 0) {\n        return -1;\n    }\n\n    if (records != 1) {\n        flb_free(mp_buf);\n        return -1;\n    }\n\n    /* Make sure object is a map */\n    msgpack_unpacked_init(&result);\n    if (msgpack_unpack_next(&result, mp_buf, mp_size, &off) == MSGPACK_UNPACK_SUCCESS) {\n        map = result.data;\n        if (map.type != MSGPACK_OBJECT_MAP) {\n            flb_free(mp_buf);\n            msgpack_unpacked_destroy(&result);\n            return -1;\n        }\n    }\n    else {\n        if (mp_size > 0) {\n            flb_free(mp_buf);\n        }\n        msgpack_unpacked_destroy(&result);\n        return -1;\n    }\n\n    /* Export results (might change later) */\n    tmp_out_buf = mp_buf;\n    tmp_out_size = mp_size;\n\n    /* Do we have some decoders set ? */\n    if (parser->decoders) {\n        ret = flb_parser_decoder_do(parser->decoders,\n                                    mp_buf, mp_size,\n                                    &tmp_out_buf, &tmp_out_size);\n        if (ret == 0) {\n            /* re-process the unpack context */\n            off = 0;\n            msgpack_unpacked_destroy(&result);\n            msgpack_unpacked_init(&result);\n            msgpack_unpack_next(&result, tmp_out_buf, tmp_out_size, &off);\n            map = result.data;\n        }\n    }\n\n    /* Set the possible outgoing buffer */\n    *out_buf = tmp_out_buf;\n    *out_size = tmp_out_size;\n    if (mp_buf != tmp_out_buf) {\n        flb_free(mp_buf);\n        mp_buf = NULL;\n    }\n\n    /* Do time resolution ? */\n    if (!parser->time_fmt) {\n        msgpack_unpacked_destroy(&result);\n        return *out_size;\n    }\n\n    if (parser->time_key) {\n        time_key = parser->time_key;\n    }\n    else {\n        time_key = \"time\";\n    }\n    slen = strlen(time_key);\n\n    /* Lookup time field */\n    map_size = map.via.map.size;\n    skip = map_size;\n    for (i = 0; i < map_size; i++) {\n        k = &map.via.map.ptr[i].key;\n        v = &map.via.map.ptr[i].val;\n\n        if (k->via.str.size != slen) {\n            continue;\n        }\n\n        /* Ensure the pointer we are about to read is not NULL */\n        if (k->via.str.ptr == NULL) {\n            flb_free(mp_buf);\n            flb_free(tmp_out_buf);\n            *out_buf = NULL;\n            msgpack_unpacked_destroy(&result);\n            return -1;\n        }\n\n        if (strncmp(k->via.str.ptr, time_key, k->via.str.size) == 0) {\n            /* We found the key, break the loop and keep the index */\n            if (parser->time_keep == FLB_FALSE) {\n                skip = i;\n                break;\n            }\n            else {\n                skip = -1;\n            }\n            break;\n        }\n\n        k = NULL;\n        v = NULL;\n    }\n\n    /* No time_key field found */\n    if (i >= map_size || !k || !v) {\n        msgpack_unpacked_destroy(&result);\n        return *out_size;\n    }\n\n    /* Ensure we have an accurate type */\n    if (v->type != MSGPACK_OBJECT_STR) {\n        msgpack_unpacked_destroy(&result);\n        return *out_size;\n    }\n\n    /* Lookup time */\n    ret = flb_parser_time_lookup(v->via.str.ptr, v->via.str.size,\n                                 0, parser, &tm, &tmfrac);\n    if (ret == -1) {\n        len = v->via.str.size;\n        if (len > sizeof(tmp) - 1) {\n            len = sizeof(tmp) - 1;\n        }\n        memcpy(tmp, v->via.str.ptr, len);\n        tmp[len] = '\\0';\n        flb_warn(\"[parser:%s] invalid time format %s for '%s'\",\n                 parser->name, parser->time_fmt_full, tmp);\n        time_lookup = 0;\n    }\n    else {\n        time_lookup = flb_parser_tm2time(&tm);\n    }\n\n    /* Compose a new map without the time_key field */\n    msgpack_sbuffer_init(&mp_sbuf);\n    msgpack_packer_init(&mp_pck, &mp_sbuf, msgpack_sbuffer_write);\n\n    if (parser->time_keep == FLB_FALSE) {\n        msgpack_pack_map(&mp_pck, map_size - 1);\n    }\n    else {\n        msgpack_pack_map(&mp_pck, map_size);\n    }\n\n    for (i = 0; i < map_size; i++) {\n        if (i == skip) {\n            continue;\n        }\n        msgpack_pack_object(&mp_pck, map.via.map.ptr[i].key);\n        msgpack_pack_object(&mp_pck, map.via.map.ptr[i].val);\n    }\n\n    /* Export the proper buffer */\n    flb_free(tmp_out_buf);\n    *out_buf = mp_sbuf.data;\n    *out_size = mp_sbuf.size;\n\n    t = out_time;\n    t->tm.tv_sec  = time_lookup;\n    t->tm.tv_nsec = (tmfrac * 1000000000);\n\n    msgpack_unpacked_destroy(&result);\n    return *out_size;\n}\n"], "filenames": ["src/flb_parser_json.c"], "buggy_code_start_loc": [113], "buggy_code_end_loc": [143], "fixing_code_start_loc": [114], "fixing_code_end_loc": [146], "type": "CWE-415", "message": "Fluent Bit (aka fluent-bit) 1.7.0 through 1.7,4 has a double free in flb_free (called from flb_parser_json_do and flb_parser_do).", "other": {"cve": {"id": "CVE-2021-36088", "sourceIdentifier": "cve@mitre.org", "published": "2021-07-01T03:15:08.847", "lastModified": "2021-07-08T18:33:52.517", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Fluent Bit (aka fluent-bit) 1.7.0 through 1.7,4 has a double free in flb_free (called from flb_parser_json_do and flb_parser_do)."}, {"lang": "es", "value": "Fluent Bit (tambi\u00e9n se conoce como fluent-bit) versiones 1.7.0 hasta 1.7,4 presenta una doble liberaci\u00f3n en la funci\u00f3n flb_free (llamado desde flb_parser_json_do y flb_parser_do)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-415"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:treasuredata:fluent_bit:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.7.0", "versionEndIncluding": "1.7.4", "matchCriteriaId": "ADC73357-2D28-4021-AEF7-0CB5CE9D9011"}]}]}], "references": [{"url": "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=33750", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/fluent/fluent-bit/commit/22346a74c07ceb90296be872be2d53eb92252a54", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/fluent/fluent-bit/pull/3453", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/google/oss-fuzz-vulns/blob/main/vulns/fluent-bit/OSV-2021-702.yaml", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/fluent/fluent-bit/commit/22346a74c07ceb90296be872be2d53eb92252a54"}}