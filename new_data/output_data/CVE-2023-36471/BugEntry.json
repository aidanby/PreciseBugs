{"buggy_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\n/*\n * Alternatively, at your choice, the contents of this file may be used under the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\npackage org.xwiki.xml.internal.html;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.inject.Singleton;\n\nimport org.xwiki.component.annotation.Component;\n\n/**\n * Provides definitions of safe HTML attributes and tags.\n * <p>\n * Unless otherwise noted, lists of elements and attributes are copied from DOMPurify by Cure53 and other contributors |\n * Released under the Apache license 2.0 and Mozilla Public License 2.0 -\n * <a href=\"https://github.com/cure53/DOMPurify/blob/main/LICENSE\">LICENSE</a>.\n *\n * @version $Id$\n * @since 14.6RC1\n */\n@Component(roles = HTMLDefinitions.class)\n@Singleton\npublic class HTMLDefinitions\n{\n    /**\n     * Allowed HTML elements.\n     */\n    private final Set<String> htmlTags;\n\n    /**\n     * Allowed attributes.\n     */\n    private final Set<String> htmlAttributes;\n\n    /**\n     * Default constructor.\n     */\n    public HTMLDefinitions()\n    {\n        this.htmlTags = new HashSet<>(\n            Arrays.asList(\"a\", \"abbr\", \"acronym\", \"address\", \"area\", \"article\", \"aside\", \"audio\", \"b\", \"bdi\", \"bdo\",\n                \"big\", \"blink\", \"blockquote\", \"body\", \"br\", \"button\", \"canvas\", \"caption\", \"center\", \"cite\", \"code\",\n                \"col\", \"colgroup\", \"content\", \"data\", \"datalist\", \"dd\", \"decorator\", \"del\", \"details\", \"dfn\", \"dialog\",\n                \"dir\", \"div\", \"dl\", \"dt\", \"element\", \"em\", \"fieldset\", \"figcaption\", \"figure\", \"font\", \"footer\", \"form\",\n                \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"i\", \"img\", \"input\",\n                \"ins\", \"kbd\", \"label\", \"legend\", \"li\", \"main\", \"map\", \"mark\", \"marquee\", \"menu\", \"menuitem\", \"meter\",\n                \"nav\", \"nobr\", \"ol\", \"optgroup\", \"option\", \"output\", \"p\", \"picture\", \"pre\", \"progress\", \"q\", \"rp\", \"rt\",\n                \"ruby\", \"s\", \"samp\", \"section\", \"select\", \"shadow\", \"small\", \"source\", \"spacer\", \"span\", \"strike\",\n                \"strong\", \"style\", \"sub\", \"summary\", \"sup\", \"table\", \"tbody\", \"td\", \"template\", \"textarea\", \"tfoot\",\n                \"th\", \"thead\", \"time\", \"tr\", \"track\", \"tt\", \"u\", \"ul\", \"var\", \"video\", \"wbr\"));\n\n        // Attributes that are in general allowed. Note that \"target\" is not generally safe, but XWiki contains code\n        // that already adds the necessary attributes to make it safe both in HTMLCleaner and in XHTML rendering.\n        this.htmlAttributes = new HashSet<>(\n            Arrays.asList(\"accept\", \"action\", \"align\", \"alt\", \"autocapitalize\", \"autocomplete\", \"autopictureinpicture\",\n                \"autoplay\", \"background\", \"bgcolor\", \"border\", \"capture\", \"cellpadding\", \"cellspacing\", \"checked\",\n                \"cite\", \"class\", \"clear\", \"color\", \"cols\", \"colspan\", \"controls\", \"controlslist\", \"coords\",\n                \"crossorigin\", \"datetime\", \"decoding\", \"default\", \"dir\", \"disabled\", \"disablepictureinpicture\",\n                \"disableremoteplayback\", \"download\", \"draggable\", \"enctype\", \"enterkeyhint\", \"face\", \"for\", \"headers\",\n                \"height\", \"hidden\", \"high\", \"href\", \"hreflang\", \"id\", \"inputmode\", \"integrity\", \"ismap\", \"kind\",\n                \"label\", \"lang\", \"list\", \"loading\", \"loop\", \"low\", \"max\", \"maxlength\", \"media\", \"method\", \"min\",\n                \"minlength\", \"multiple\", \"muted\", \"name\", \"nonce\", \"noshade\", \"novalidate\", \"nowrap\", \"open\", \"optimum\",\n                \"pattern\", \"placeholder\", \"playsinline\", \"poster\", \"preload\", \"pubdate\", \"radiogroup\", \"readonly\",\n                \"rel\", \"required\", \"rev\", \"reversed\", \"role\", \"rows\", \"rowspan\", \"spellcheck\", \"scope\", \"selected\",\n                \"shape\", \"size\", \"sizes\", \"span\", \"srclang\", \"start\", \"src\", \"srcset\", \"step\", \"style\", \"summary\",\n                \"tabindex\", \"title\", \"translate\", \"type\", \"usemap\", \"valign\", \"value\", \"width\", \"xmlns\", \"slot\",\n                \"target\"));\n    }\n\n    /**\n     * @param tagName the name of the tag to check\n     * @return if the tag is considered safe\n     */\n    public boolean isSafeTag(String tagName)\n    {\n        return this.htmlTags.contains(tagName);\n    }\n\n    /**\n     * @param attributeName the name of the attribute to check\n     * @return if the attribute is allowed\n     */\n    public boolean isAllowedAttribute(String attributeName)\n    {\n        return this.htmlAttributes.contains(attributeName);\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.xml.internal.html;\n\nimport java.util.Arrays;\nimport java.util.Collections;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\nimport org.xwiki.test.annotation.BeforeComponent;\nimport org.xwiki.test.annotation.ComponentList;\nimport org.xwiki.test.junit5.mockito.ComponentTest;\nimport org.xwiki.test.junit5.mockito.InjectMockComponents;\nimport org.xwiki.test.junit5.mockito.MockComponent;\nimport org.xwiki.xml.html.HTMLConstants;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.when;\n\n/**\n * Unit tests for the {@link SecureHTMLElementSanitizer}.\n *\n * @version $Id$\n * @since 14.6RC1\n */\n@ComponentTest\n@ComponentList({\n    HTMLDefinitions.class,\n    MathMLDefinitions.class,\n    SVGDefinitions.class\n})\nclass SecureHTMLElementSanitizerTest\n{\n    private static final String ALLOWED_ATTRIBUTE = \"allowed_attribute\";\n\n    private static final String ONERROR = \"onerror\";\n\n    @MockComponent\n    private HTMLElementSanitizerConfiguration htmlElementSanitizerConfiguration;\n\n    @InjectMockComponents\n    private SecureHTMLElementSanitizer secureHTMLElementSanitizer;\n\n    @BeforeComponent\n    void setupMocks()\n    {\n        when(this.htmlElementSanitizerConfiguration.getForbidTags())\n            .thenReturn(Collections.singletonList(HTMLConstants.TAG_A));\n        when(this.htmlElementSanitizerConfiguration.getForbidAttributes())\n            .thenReturn(Collections.singletonList(HTMLConstants.ATTRIBUTE_ALT));\n        when(this.htmlElementSanitizerConfiguration.getExtraAllowedTags())\n            .thenReturn(Collections.singletonList(HTMLConstants.TAG_SCRIPT));\n        when(this.htmlElementSanitizerConfiguration.getExtraAllowedAttributes())\n            .thenReturn(Arrays.asList(ALLOWED_ATTRIBUTE, ONERROR));\n        when(this.htmlElementSanitizerConfiguration.getExtraUriSafeAttributes())\n            .thenReturn(Collections.singletonList(HTMLConstants.ATTRIBUTE_SRC));\n        when(this.htmlElementSanitizerConfiguration.getExtraDataUriTags())\n            .thenReturn(Arrays.asList(HTMLConstants.TAG_SCRIPT, HTMLConstants.TAG_NAV));\n        when(this.htmlElementSanitizerConfiguration.isAllowUnknownProtocols())\n            .thenReturn(false);\n        when(this.htmlElementSanitizerConfiguration.getAllowedUriRegexp())\n            .thenReturn(\"^(xwiki|https):\");\n    }\n\n    @Test\n    void forbiddenTags()\n    {\n        assertFalse(this.secureHTMLElementSanitizer.isElementAllowed(HTMLConstants.TAG_A));\n    }\n\n    @Test\n    void forbiddenAttributes()\n    {\n        assertFalse(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_IMG,\n            HTMLConstants.ATTRIBUTE_ALT, \"XWiki\"));\n    }\n\n    @Test\n    void extraAllowedTags()\n    {\n        assertTrue(this.secureHTMLElementSanitizer.isElementAllowed(HTMLConstants.TAG_SCRIPT));\n    }\n\n    @Test\n    void extraAllowedAttributes()\n    {\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_IMG, ALLOWED_ATTRIBUTE,\n            \"value\"));\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_IMG, ONERROR, \"alert(1)\"));\n    }\n\n    @Test\n    void extraUriSafeAttributes()\n    {\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_IMG,\n            HTMLConstants.ATTRIBUTE_SRC, \"javascript:alert(1)\"));\n    }\n\n    @Test\n    void extraDataUriTags()\n    {\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_NAV,\n            HTMLConstants.ATTRIBUTE_HREF, \"data:test\"));\n        // Script cannot be enabled for data-attributes.\n        assertFalse(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_SCRIPT,\n            HTMLConstants.ATTRIBUTE_HREF, \"data:script\"));\n    }\n\n    @Test\n    void restrictedURIs()\n    {\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_A,\n            HTMLConstants.ATTRIBUTE_HREF, \"https://www.xwiki.org\"));\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_A,\n            HTMLConstants.ATTRIBUTE_HREF, \"xwiki:test\"));\n        assertFalse(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_A,\n            HTMLConstants.ATTRIBUTE_HREF, \"http://example.com\"));\n    }\n\n    @ParameterizedTest\n    @CsvSource({\n        \"data-, false\",\n        \"data-a, true\",\n        \"data-x-wiki.test_\\u0192, true\",\n        \"data-x\\u2713, false\",\n        \"data-x/test, false\",\n        \"data-x>test, false\",\n        \"data-x:y, false\"\n    })\n    void dataAttributes(String attribute, boolean accepted)\n    {\n        assertEquals(accepted, this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_DIV, attribute,\n            \"hello\"));\n    }\n}\n"], "fixing_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\n/*\n * Alternatively, at your choice, the contents of this file may be used under the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\npackage org.xwiki.xml.internal.html;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport javax.inject.Singleton;\n\nimport org.xwiki.component.annotation.Component;\n\n/**\n * Provides definitions of safe HTML attributes and tags.\n * <p>\n * Unless otherwise noted, lists of elements and attributes are copied from DOMPurify by Cure53 and other contributors |\n * Released under the Apache license 2.0 and Mozilla Public License 2.0 -\n * <a href=\"https://github.com/cure53/DOMPurify/blob/main/LICENSE\">LICENSE</a>.\n *\n * @version $Id$\n * @since 14.6RC1\n */\n@Component(roles = HTMLDefinitions.class)\n@Singleton\npublic class HTMLDefinitions\n{\n    /**\n     * Allowed HTML elements.\n     */\n    private final Set<String> htmlTags;\n\n    /**\n     * Allowed attributes.\n     */\n    private final Set<String> htmlAttributes;\n\n    /**\n     * Default constructor.\n     */\n    public HTMLDefinitions()\n    {\n        // Compared to DOMPurify, this disallows form-related tags as they can be dangerous in the context of XWiki.\n        this.htmlTags = new HashSet<>(\n            Arrays.asList(\"a\", \"abbr\", \"acronym\", \"address\", \"area\", \"article\", \"aside\", \"audio\", \"b\", \"bdi\", \"bdo\",\n                \"big\", \"blink\", \"blockquote\", \"body\", \"br\", \"canvas\", \"caption\", \"center\", \"cite\", \"code\",\n                \"col\", \"colgroup\", \"content\", \"data\", \"datalist\", \"dd\", \"decorator\", \"del\", \"details\", \"dfn\", \"dialog\",\n                \"dir\", \"div\", \"dl\", \"dt\", \"element\", \"em\", \"fieldset\", \"figcaption\", \"figure\", \"font\", \"footer\",\n                \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"i\", \"img\",\n                \"ins\", \"kbd\", \"label\", \"legend\", \"li\", \"main\", \"map\", \"mark\", \"marquee\", \"menu\", \"menuitem\", \"meter\",\n                \"nav\", \"nobr\", \"ol\", \"optgroup\", \"option\", \"output\", \"p\", \"picture\", \"pre\", \"progress\", \"q\", \"rp\", \"rt\",\n                \"ruby\", \"s\", \"samp\", \"section\", \"shadow\", \"small\", \"source\", \"spacer\", \"span\", \"strike\",\n                \"strong\", \"style\", \"sub\", \"summary\", \"sup\", \"table\", \"tbody\", \"td\", \"template\", \"tfoot\",\n                \"th\", \"thead\", \"time\", \"tr\", \"track\", \"tt\", \"u\", \"ul\", \"var\", \"video\", \"wbr\"));\n\n        // Attributes that are in general allowed. Note that \"target\" is not generally safe, but XWiki contains code\n        // that already adds the necessary attributes to make it safe both in HTMLCleaner and in XHTML rendering.\n        this.htmlAttributes = new HashSet<>(\n            Arrays.asList(\"accept\", \"action\", \"align\", \"alt\", \"autocapitalize\", \"autocomplete\", \"autopictureinpicture\",\n                \"autoplay\", \"background\", \"bgcolor\", \"border\", \"capture\", \"cellpadding\", \"cellspacing\", \"checked\",\n                \"cite\", \"class\", \"clear\", \"color\", \"cols\", \"colspan\", \"controls\", \"controlslist\", \"coords\",\n                \"crossorigin\", \"datetime\", \"decoding\", \"default\", \"dir\", \"disabled\", \"disablepictureinpicture\",\n                \"disableremoteplayback\", \"download\", \"draggable\", \"enctype\", \"enterkeyhint\", \"face\", \"for\", \"headers\",\n                \"height\", \"hidden\", \"high\", \"href\", \"hreflang\", \"id\", \"inputmode\", \"integrity\", \"ismap\", \"kind\",\n                \"label\", \"lang\", \"list\", \"loading\", \"loop\", \"low\", \"max\", \"maxlength\", \"media\", \"method\", \"min\",\n                \"minlength\", \"multiple\", \"muted\", \"name\", \"nonce\", \"noshade\", \"novalidate\", \"nowrap\", \"open\", \"optimum\",\n                \"pattern\", \"placeholder\", \"playsinline\", \"poster\", \"preload\", \"pubdate\", \"radiogroup\", \"readonly\",\n                \"rel\", \"required\", \"rev\", \"reversed\", \"role\", \"rows\", \"rowspan\", \"spellcheck\", \"scope\", \"selected\",\n                \"shape\", \"size\", \"sizes\", \"span\", \"srclang\", \"start\", \"src\", \"srcset\", \"step\", \"style\", \"summary\",\n                \"tabindex\", \"title\", \"translate\", \"type\", \"usemap\", \"valign\", \"value\", \"width\", \"xmlns\", \"slot\",\n                \"target\"));\n    }\n\n    /**\n     * @param tagName the name of the tag to check\n     * @return if the tag is considered safe\n     */\n    public boolean isSafeTag(String tagName)\n    {\n        return this.htmlTags.contains(tagName);\n    }\n\n    /**\n     * @param attributeName the name of the attribute to check\n     * @return if the attribute is allowed\n     */\n    public boolean isAllowedAttribute(String attributeName)\n    {\n        return this.htmlAttributes.contains(attributeName);\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.xml.internal.html;\n\nimport java.util.Arrays;\nimport java.util.Collections;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\nimport org.junit.jupiter.params.provider.ValueSource;\nimport org.xwiki.test.annotation.BeforeComponent;\nimport org.xwiki.test.annotation.ComponentList;\nimport org.xwiki.test.junit5.mockito.ComponentTest;\nimport org.xwiki.test.junit5.mockito.InjectMockComponents;\nimport org.xwiki.test.junit5.mockito.MockComponent;\nimport org.xwiki.xml.html.HTMLConstants;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.when;\n\n/**\n * Unit tests for the {@link SecureHTMLElementSanitizer}.\n *\n * @version $Id$\n * @since 14.6RC1\n */\n@ComponentTest\n@ComponentList({\n    HTMLDefinitions.class,\n    MathMLDefinitions.class,\n    SVGDefinitions.class\n})\nclass SecureHTMLElementSanitizerTest\n{\n    private static final String ALLOWED_ATTRIBUTE = \"allowed_attribute\";\n\n    private static final String ONERROR = \"onerror\";\n\n    @MockComponent\n    private HTMLElementSanitizerConfiguration htmlElementSanitizerConfiguration;\n\n    @InjectMockComponents\n    private SecureHTMLElementSanitizer secureHTMLElementSanitizer;\n\n    @BeforeComponent\n    void setupMocks()\n    {\n        when(this.htmlElementSanitizerConfiguration.getForbidTags())\n            .thenReturn(Collections.singletonList(HTMLConstants.TAG_A));\n        when(this.htmlElementSanitizerConfiguration.getForbidAttributes())\n            .thenReturn(Collections.singletonList(HTMLConstants.ATTRIBUTE_ALT));\n        when(this.htmlElementSanitizerConfiguration.getExtraAllowedTags())\n            .thenReturn(Collections.singletonList(HTMLConstants.TAG_SCRIPT));\n        when(this.htmlElementSanitizerConfiguration.getExtraAllowedAttributes())\n            .thenReturn(Arrays.asList(ALLOWED_ATTRIBUTE, ONERROR));\n        when(this.htmlElementSanitizerConfiguration.getExtraUriSafeAttributes())\n            .thenReturn(Collections.singletonList(HTMLConstants.ATTRIBUTE_SRC));\n        when(this.htmlElementSanitizerConfiguration.getExtraDataUriTags())\n            .thenReturn(Arrays.asList(HTMLConstants.TAG_SCRIPT, HTMLConstants.TAG_NAV));\n        when(this.htmlElementSanitizerConfiguration.isAllowUnknownProtocols())\n            .thenReturn(false);\n        when(this.htmlElementSanitizerConfiguration.getAllowedUriRegexp())\n            .thenReturn(\"^(xwiki|https):\");\n    }\n\n    @Test\n    void forbiddenTags()\n    {\n        assertFalse(this.secureHTMLElementSanitizer.isElementAllowed(HTMLConstants.TAG_A));\n    }\n\n    @ParameterizedTest\n    @ValueSource(strings = { \"form\", \"input\", \"select\", \"textarea\", \"button\" })\n    void formTags(String tagName)\n    {\n        assertFalse(this.secureHTMLElementSanitizer.isElementAllowed(tagName));\n    }\n\n    @Test\n    void forbiddenAttributes()\n    {\n        assertFalse(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_IMG,\n            HTMLConstants.ATTRIBUTE_ALT, \"XWiki\"));\n    }\n\n    @Test\n    void extraAllowedTags()\n    {\n        assertTrue(this.secureHTMLElementSanitizer.isElementAllowed(HTMLConstants.TAG_SCRIPT));\n    }\n\n    @Test\n    void extraAllowedAttributes()\n    {\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_IMG, ALLOWED_ATTRIBUTE,\n            \"value\"));\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_IMG, ONERROR, \"alert(1)\"));\n    }\n\n    @Test\n    void extraUriSafeAttributes()\n    {\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_IMG,\n            HTMLConstants.ATTRIBUTE_SRC, \"javascript:alert(1)\"));\n    }\n\n    @Test\n    void extraDataUriTags()\n    {\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_NAV,\n            HTMLConstants.ATTRIBUTE_HREF, \"data:test\"));\n        // Script cannot be enabled for data-attributes.\n        assertFalse(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_SCRIPT,\n            HTMLConstants.ATTRIBUTE_HREF, \"data:script\"));\n    }\n\n    @Test\n    void restrictedURIs()\n    {\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_A,\n            HTMLConstants.ATTRIBUTE_HREF, \"https://www.xwiki.org\"));\n        assertTrue(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_A,\n            HTMLConstants.ATTRIBUTE_HREF, \"xwiki:test\"));\n        assertFalse(this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_A,\n            HTMLConstants.ATTRIBUTE_HREF, \"http://example.com\"));\n    }\n\n    @ParameterizedTest\n    @CsvSource({\n        \"data-, false\",\n        \"data-a, true\",\n        \"data-x-wiki.test_\\u0192, true\",\n        \"data-x\\u2713, false\",\n        \"data-x/test, false\",\n        \"data-x>test, false\",\n        \"data-x:y, false\"\n    })\n    void dataAttributes(String attribute, boolean accepted)\n    {\n        assertEquals(accepted, this.secureHTMLElementSanitizer.isAttributeAllowed(HTMLConstants.TAG_DIV, attribute,\n            \"hello\"));\n    }\n}\n"], "filenames": ["xwiki-commons-core/xwiki-commons-xml/src/main/java/org/xwiki/xml/internal/html/HTMLDefinitions.java", "xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/internal/html/SecureHTMLElementSanitizerTest.java"], "buggy_code_start_loc": [62, 27], "buggy_code_end_loc": [73, 88], "fixing_code_start_loc": [63, 28], "fixing_code_end_loc": [74, 97], "type": "CWE-79", "message": "Xwiki commons is the common modules used by other XWiki top level projects. The HTML sanitizer that is included in XWiki since version 14.6RC1 allowed form and input HTML tags. In the context of XWiki, this allows an attacker without script right to either create forms that can be used for phishing attacks or also in the context of a sheet, the attacker could add an input like `{{html}}<input type=\"hidden\" name=\"content\" value=\"{{groovy}}println(&quot;Hello from Groovy!&quot;)\" />{{/html}}` that would allow remote code execution when it is submitted by an admin (the sheet is rendered as part of the edit form). The attacker would need to ensure that the edit form looks plausible, though, which can be non-trivial as without script right the attacker cannot display the regular content of the document. This has been patched in XWiki 14.10.6 and 15.2RC1 by removing the central form-related tags from the list of allowed tags. Users are advised to upgrade. As a workaround an admin can manually disallow the tags by adding `form, input, select, textarea, button` to the configuration option `xml.htmlElementSanitizer.forbidTags` in the `xwiki.properties` configuration file.", "other": {"cve": {"id": "CVE-2023-36471", "sourceIdentifier": "security-advisories@github.com", "published": "2023-06-29T20:15:10.003", "lastModified": "2023-07-10T14:02:32.227", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Xwiki commons is the common modules used by other XWiki top level projects. The HTML sanitizer that is included in XWiki since version 14.6RC1 allowed form and input HTML tags. In the context of XWiki, this allows an attacker without script right to either create forms that can be used for phishing attacks or also in the context of a sheet, the attacker could add an input like `{{html}}<input type=\"hidden\" name=\"content\" value=\"{{groovy}}println(&quot;Hello from Groovy!&quot;)\" />{{/html}}` that would allow remote code execution when it is submitted by an admin (the sheet is rendered as part of the edit form). The attacker would need to ensure that the edit form looks plausible, though, which can be non-trivial as without script right the attacker cannot display the regular content of the document. This has been patched in XWiki 14.10.6 and 15.2RC1 by removing the central form-related tags from the list of allowed tags. Users are advised to upgrade. As a workaround an admin can manually disallow the tags by adding `form, input, select, textarea, button` to the configuration option `xml.htmlElementSanitizer.forbidTags` in the `xwiki.properties` configuration file."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:commons:*:*:*:*:*:*:*:*", "versionStartIncluding": "14.6", "versionEndExcluding": "14.10.6", "matchCriteriaId": "28D2C022-6760-4865-B087-19EB62B226A3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:commons:15.0:-:*:*:*:*:*:*", "matchCriteriaId": "B5E0E97B-07B7-43D5-BF0B-A20F41AB1B5B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:commons:15.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "3686A321-60C2-4BCE-8D0B-32F56D1D2C63"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:commons:15.1:-:*:*:*:*:*:*", "matchCriteriaId": "0E3494D6-09D1-426B-BC58-5B11F2371645"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:commons:15.1:rc1:*:*:*:*:*:*", "matchCriteriaId": "C4FFC387-3B28-4875-819C-B0847083CD55"}]}]}], "references": [{"url": "https://github.com/xwiki/xwiki-commons/commit/99484d48e899a68a1b6e33d457825b776c6fe8c3", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/xwiki/xwiki-commons/security/advisories/GHSA-6pqf-c99p-758v", "source": "security-advisories@github.com", "tags": ["Exploit", "Mitigation", "Vendor Advisory"]}, {"url": "https://jira.xwiki.org/browse/XCOMMONS-2634", "source": "security-advisories@github.com", "tags": ["Exploit", "Issue Tracking", "Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/xwiki/xwiki-commons/commit/99484d48e899a68a1b6e33d457825b776c6fe8c3"}}