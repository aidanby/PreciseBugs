{"buggy_code": ["*** Sidebar Manager to WooSidebars Converter Changelog ***\n\n2013.01.14 - version 1.1.1\n * /classes/class-woosidebars-sbm-converter-updater.php - REMOVED.\n * /classes/class-woosidebars-sbm-converter.php - Replaced camelCase WooSidebars with Woosidebars in class name, in accordance with WordPress class naming standards.\n * woosidebars-sbm-converter.php - Updated WooSidebars to Woosidebars in class instantiation.\n\n2012.09.19 - version 1.1.0\n * /classes/class-woosidebars-sbm-converter.php - Only display \"these sidebars had trouble converting\" logic if performing the \"convert\" action. Add UI and logic for functionality to temporarily disable the WooFramework's Sidebar Manager. Adjust text above the new button to clarify it's exact intention.\n * woosidebars-sbm-converter.php - Load the plugin on both frontend and admin, in order to run the Sidebar Manager disable logic.\n\n2012.09.11 - version 1.0.0\n * Initial release. Woo!", "<?php\n/**\n * WooSidebars SBM Converter Class\n *\n * @package WordPress\n * @subpackage WooSidebars SBM Converter\n * @category Core\n * @author WooThemes\n * @since 1.0.0\n *\n * TABLE OF CONTENTS\n *\n * - __construct()\n * - load_localisation()\n * - load_plugin_textdomain()\n * - register_admin_screen()\n * - process_request()\n * - admin_notices()\n * - admin_screen()\n * - has_sidebars()\n * - convert_sidebars()\n * - prepare_sidebars_data()\n * - store_unconverted_sidebars()\n * - parse_single_sidebar()\n * - determine_conditions()\n * - add_sidebar()\n * - prepare_internal_comparison_data()\n * - get_hierarchy_options()\n * - delete_sidebars()\n * - toggle_sidebar_manager_status()\n * - disable_sidebar_manager()\n * - remove_sbm_registration()\n * - remove_sbm_filter()\n */\n\nclass Woosidebars_SBM_Converter {\n\tprivate $file = '';\n\tprivate $token = '';\n\tprivate $title = '';\n\tprivate $hook = '';\n\tprivate $sbm_data = array();\n\tprivate $not_converted = array();\n\tprivate $converted = array();\n\tprivate $dependencies = array();\n\tprivate $comparison_data = array();\n\n\tpublic $version;\n\t\n\t/**\n\t * Constructor function.\n\t * @since  1.0.0\n\t * @return void\n\t */\n\tpublic function __construct ( $file ) {\n\t\t$this->file = $file;\n\t\t$this->token = 'woosidebars-sbm-converter';\n\t\t$this->title = __( 'Sidebar Manager Converter', 'woosidebars-sbm-converter' );\n\n\t\tif ( is_admin() ) {\n\t\t\t// Get existing converted sidebar id's\n\t\t\t$this->converted = get_option( $this->token . '-converted', array() );\n\n\t\t\tadd_action( 'admin_menu', array( &$this, 'register_admin_screen' ) );\n\t\t\t\n\t\t\t// Localisation\n\t\t\t$this->load_plugin_textdomain();\n\t\t\tadd_action( 'init', array( &$this, 'load_localisation' ), 0 );\n\t\t}\n\n\t\t// 1 = enabled Sidebar Manager, 0 = disabled Sidebar Manager\n\t\tif ( '1' != get_option( $this->token . '-sbm-status', '1' ) ) {\n\t\t\t$this->disable_sidebar_manager();\n\t\t}\n\t} // End __construct()\n\t\n\t/**\n\t * Load the plugin's localisation file.\n\t * @access public\n\t * @since 1.0.0\n\t * @return void\n\t */\n\tpublic function load_localisation () {\n\t\tload_plugin_textdomain( 'woosidebars-sbm-converter', false, dirname( plugin_basename( $this->file ) ) . '/lang/' );\n\t} // End load_localisation()\n\n\t/**\n\t * Load the plugin textdomain from the main WordPress \"languages\" folder.\n\t * @since  1.0.0\n\t * @return  void\n\t */\n\tpublic function load_plugin_textdomain () {\n\t    $domain = 'woosidebars-sbm-converter';\n\t    // The \"plugin_locale\" filter is also used in load_plugin_textdomain()\n\t    $locale = apply_filters( 'plugin_locale', get_locale(), $domain );\n\t \n\t    load_textdomain( $domain, WP_LANG_DIR . '/' . $domain . '/' . $domain . '-' . $locale . '.mo' );\n\t    load_plugin_textdomain( $domain, FALSE, dirname( plugin_basename( $this->file ) ) . '/lang/' );\n\t} // End load_plugin_textdomain()\n\t\n\t/**\n\t * Register the admin screen within WordPress.\n\t * @since  1.0.0\n\t * @return void\n\t */\n\tpublic function register_admin_screen () {\n\t\t$hook = add_submenu_page( 'tools.php', $this->title, __( 'Convert Sidebars', 'woosidebars-sbm-converter' ), 'edit_theme_options', 'woosidebars-sbm-converter', array( &$this, 'admin_screen' ) );\n\n\t\t$this->hook = $hook;\n\n\t\tadd_action( 'load-' . $hook, array( &$this, 'process_request' ) );\n\t} // End register_admin_screen()\n\n\t/**\n\t * Process the desired action, if applicable.\n\t * @since  1.0.0\n\t * @return void\n\t */\n\tpublic function process_request () {\n\t\tadd_action( 'admin_notices', array( &$this, 'admin_notices' ) );\n\n\t\tif ( isset( $_GET['action'] ) && in_array( $_GET['action'], array( 'convert', 'delete', 'toggle-sbm' ) ) && check_admin_referer( $this->token ) ) {\n\t\t\t$response = false;\n\t\t\t$status = 'false';\n\n\t\t\tswitch ( $_GET['action'] ) {\n\t\t\t\tcase 'convert':\n\t\t\t\t\t$response = $this->convert_sidebars();\n\t\t\t\tbreak;\n\n\t\t\t\tcase 'delete':\n\t\t\t\t\t$response = $this->delete_sidebars();\n\t\t\t\tbreak;\n\n\t\t\t\tcase 'toggle-sbm':\n\t\t\t\t\t$response = $this->toggle_sidebar_manager_status();\n\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif ( $response == true ) {\n\t\t\t\t$status = 'true';\n\t\t\t}\n\n\t\t\twp_safe_redirect( add_query_arg( 'type', urlencode( $_GET['action'] ),  add_query_arg( 'status', urlencode( $status ), add_query_arg( 'page', urlencode( $this->token ),  admin_url( 'tools.php' ) ) ) ) );\n\t\t\texit;\n\t\t}\n\t} // End process_request()\n\n\t/**\n\t * Display admin notices.\n\t * @since  1.0.0\n\t * @return void\n\t */\n\tpublic function admin_notices () {\n\t\t$message = '';\n\t\t$response = '';\n\t\t\n\t\t// Display unconverted sidebars\n\t\t$has_sidebars = $this->has_sidebars();\n\t\t\n\t\tif ( isset( $_GET['status'] ) && in_array( $_GET['status'], array( 'true', 'false' ) ) && isset( $_GET['type'] ) && in_array( $_GET['type'], array( 'convert', 'delete', 'toggle-sbm' ) ) ) {\n\t\t\t$terminology = array( 'convert' => __( 'converted', 'woosidebars-sbm-converter' ), 'delete' => __( 'deleted', 'woosidebars-sbm-converter' ) );\n\t\t\t$classes = array( 'true' => 'updated', 'false' => 'error' );\n\n\t\t\tif ( 'toggle-sbm' == $_GET['type'] ) {\n\t\t\t\t$sbm_status = get_option( $this->token . '-sbm-status', '1' );\n\t        \t$status_label = __( 'enabled', 'woosidebars-sbm-converter' );\n\t        \tif ( '1' != $sbm_status ) {\n\t        \t\t$status_label = __( 'disabled', 'woosidebars-sbm-converter' );\n\t        \t}\n\t        \tif ( 'true' == $_GET['status'] ) {\n\t\t\t\t\t$message = sprintf( __( 'WooFramework Sidebar Manager %s successfully.', 'woosidebars-sbm-converter' ), $status_label );\n\t\t\t\t} else {\n\t\t\t\t\t$message = sprintf( __( 'There was an error and the WooFramework Sidebar Manager was not %s.', 'woosidebars-sbm-converter' ), $status_label );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( 'true' == $_GET['status'] ) {\n\t\t\t\t\t$message = sprintf( __( 'Sidebars %s successfully.', 'woosidebars-sbm-converter' ), $terminology[$_GET['type']] );\n\t\t\t\t} else {\n\t\t\t\t\t$message = sprintf( __( 'There was an error and not all sidebars were %s.', 'woosidebars-sbm-converter' ), $terminology[$_GET['type']] );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$response = '<div class=\"' . esc_attr( $classes[$_GET['status']] ) . ' fade\">' . \"\\n\";\n\t\t\t$response .= wpautop( $message );\n\t\t\t\n\t\t\tif ( 'convert' == $_GET['type'] ) {\n\t\t\t\t// Show troublesome sidebars.\n\t\t\t\t$not_converted = get_option( $this->token . '-not-converted', array() );\n\t\t\t\tif ( is_array( $not_converted ) && ( 0 < count( $not_converted ) ) ) {\n\t\t\t\t\t$response .= '<h4>' . __( 'The following sidebars were not converted:', 'woosidebars-sbm-converter' ) . '</h4>' . \"\\n\";\n\t\t\t\t\t$response .= '<ul>' . \"\\n\";\n\t\t\t\t\tforeach ( $not_converted as $k => $v ) {\n\t\t\t\t\t\tif ( isset( $v['setup']['name'] ) ) {\n\t\t\t\t\t\t\t$response .= '<li>' . $v['setup']['name'] . ' <small>(' . $v['setup']['id'] . ')</small></li>' . \"\\n\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$response .= '</ul>' . \"\\n\";\n\t\t\t\t}\n\n\t\t\t\t$dependencies = get_option( $this->token . '-dependencies', array() );\n\t\t\t\tif ( is_array( $dependencies ) && ( 0 < count( $dependencies ) ) ) {\n\t\t\t\t\t$response .= '<h4>' . __( 'The following sidebar dependencies were not converted:', 'woosidebars-sbm-converter' ) . '</h4>' . \"\\n\";\n\t\t\t\t\t$response .= '<ul>' . \"\\n\";\n\t\t\t\t\tforeach ( $dependencies as $k => $v ) {\n\t\t\t\t\t\tif ( isset( $v['setup']['name'] ) ) {\n\t\t\t\t\t\t\t$response .= '<li>' . $v['setup']['name'] . ' <small>(' . $v['setup']['id'] . ')</small></li>' . \"\\n\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$response .= '</ul>' . \"\\n\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$response .= '</div>' . \"\\n\";\n\n\t\t\tif ( '' != $response ) {\n\t\t\t\techo $response;\n\t\t\t}\n\t\t}\n\t} // End admin_notices()\n\n\t/**\n\t * The output of the admin screen.\n\t * @since  1.0.0\n\t * @return void\n\t */\n\tpublic function admin_screen () {\n\t\techo '<div class=\"wrap\">' . \"\\n\";\n\t\tscreen_icon();\n\t\techo '<h2>' . esc_html( $this->title ) . '</h2>' . \"\\n\";\n\t\t\n\t\t$update = false;\n\t\tif ( defined( 'THEME_FRAMEWORK' ) && constant( 'THEME_FRAMEWORK' ) == 'woothemes' ) {\n\t\t\t// Check if there is a later version of the Woo Framework\n\t\t\t$localversion = get_option( 'woo_framework_version' );\n        \t// Test if new version\n\t\t\t$update = version_compare( $localversion, '5.4.0', '<' );\n\t\t}\n        \t\t\n\t\t// HTML\n        if ( $update ) {\n        \techo '<p>' . __( 'Please update your WooFramework to the latest version before attempting to convert your existing sidebars.', 'woosidebars-sbm-converter' ) . '</p>' . \"\\n\";\n        \techo '<p class=\"submitbox\"><br /><a href=\"' . esc_url( admin_url( 'admin.php?page=woothemes_framework_update' ) ) . '\" class=\"button upgrade\">' . __( 'Upgrade your WooFramework', 'woosidebars-sbm-converter' ) . '</a></p>' . \"\\n\";\n        } else {\n        \t// Determine the current status of the Sidebar Manager (\"Disable\" if 1, \"Enable\" if 0).\n        \t$sbm_status = get_option( $this->token . '-sbm-status', '1' );\n        \t$status_label = __( 'Disable', 'woosidebars-sbm-converter' );\n        \tif ( '1' != $sbm_status ) {\n        \t\t$status_label = __( 'Enable', 'woosidebars-sbm-converter' );\n        \t}\n\n        \techo '<p>' . __( 'Convert your custom sidebars created using the WooFramework\\'s \"Sidebar Manager\" into Widget Areas for use with the WooSidebars plugin, with the appropriate conditions applied.', 'woosidebars-sbm-converter' ) . '</p>' . \"\\n\";\n\t\t\tif ( ! $this->has_sidebars() ) {\n\t\t\t\techo '<div class=\"updated\">' . \"\\n\";\n\t\t\t\techo '<p>' . __( 'You\\'ve got no outstanding Sidebar Manager sidebars... you\\'re good to go!', 'woosidebars-sbm-converter' ) . '</p>' . \"\\n\";\n\t\t\t\techo '</div>' . \"\\n\";\n\t\t\t} else {\n\t\t\t\techo '<div class=\"updated fade\"><p>' . __( 'We\\'ve detected that you\\'ve got data outstanding in the \"Sidebar Manager\". Clicking the button below will attempt to convert that data for use with the WooSidebars plugin.', 'woosidebars-sbm-converter' ) . '</p></div>' . \"\\n\";\n\n\t\t\t\t// Convert button.\n\t\t\t\techo '<p><br /><a href=\"' . esc_url( wp_nonce_url( add_query_arg( 'action', 'convert', admin_url( 'tools.php?page=' . urlencode( $this->token ) ) ), $this->token ) ) . '\" class=\"button\">' . __( 'Convert Sidebar Manager Data', 'woosidebars-sbm-converter' ) . '</a></p>' . \"\\n\";\n\n\t\t\t\techo '<p><br />' . sprintf( __( 'Once you\\'ve converted your Sidebar Manager data for use with WooSidebars, please visit the \"%sWidget Areas%s\" screen to see if your sidebars converted successfully.', 'woosidebars-sbm-converter' ), '<a href=\"' . esc_url( admin_url( 'edit.php?post_type=sidebar' ) ) . '\" target=\"_blank\">', '</a>' ) . '</p>' . \"\\n\";\n\n\t\t\t\techo '<p>' . __( 'To use WooSidebars in place of the WooFramework\\'s Sidebar Manager, you need to disable the WooFramework\\'s Sidebar Manager. To enable or disable the Sidebar Manager, please use the button below.', 'woosidebars-sbm-converter' ) . '</p>' . \"\\n\";\n\n\t\t\t\t// Toggle Sidebar Manager button.\n\t\t\t\techo '<p><br /><a href=\"' . esc_url( wp_nonce_url( add_query_arg( 'action', 'toggle-sbm', admin_url( 'tools.php?page=' . urlencode( $this->token ) ) ), $this->token ) ) . '\" class=\"button\">' . sprintf( __( '%s Sidebar Manager', 'woosidebars-sbm-converter' ), $status_label ) . '</a></p>' . \"\\n\";\n\t\t\t\n\t\t\t\techo '<p style=\"display: none;\"><br />' . sprintf( __( 'Once you\\'re happy that your sidebars have been converted successfully, you can remove the outdated \"Sidebar Manager\" data using the link below %s(this cannot be undone)%s.', 'woosidebars-sbm-converter' ), '<strong>', '</strong>' ) . '</p>' . \"\\n\";\n\n\t\t\t\t// Remove button.\n\t\t\t\techo '<p class=\"submitbox\" style=\"display: none;\"><br /><a href=\"' . esc_url( wp_nonce_url( add_query_arg( 'action', 'delete', admin_url( 'tools.php?page=' . urlencode( $this->token ) ) ), $this->token ) ) . '\" class=\"submitdelete deletion\">' . __( 'Remove Sidebar Manager Data', 'woosidebars-sbm-converter' ) . '</a></p>' . \"\\n\";\n\t\t\t} // End If Statement\n        \n        } // End If Statement\n\t\techo '</div><!--/.wrap-->' . \"\\n\";\n\t} // End admin_screen()\n\n\t/**\n\t * Check if we've got existing Sidebar Manager data. Assign the data internally if we do have.\n\t * @since  1.0.0\n\t * @return boolean\n\t */\n\tprivate function has_sidebars () {\n\t\t$response = false;\n\n\t\tif ( 0 < count( $this->sbm_data ) ) return true; // If we've already checked, we don't need to check again.\n\n\t\t$data = get_option( 'sbm_woo_sbm_options', array() );\n\n\t\tif ( isset( $data['sidebars'] ) && is_array( $data['sidebars'] ) && ( 0 < count( $data['sidebars'] ) ) ) {\n\t\t\t$this->sbm_data = (array)$data['sidebars'];\n\t\t\t$response = true;\n\t\t}\n\n\t\treturn $response;\n\t} // End has_sidebars()\n\n\t/**\n\t * Convert sidebars to work with WooSidebars.\n\t * @since  1.0.0\n\t * @return boolean\n\t */\n\tprivate function convert_sidebars () {\n\t\t$response = false;\n\t\t\n\t\tif ( $this->has_sidebars() ) {\n\t\t\t$response = $this->prepare_sidebars_data( $this->sbm_data );\n\n\t\t\tif ( 0 < count( (array)$response ) ) {\n\t\t\t\tforeach ( (array)$response as $k => $v ) {\n\t\t\t\t\t$this->add_sidebar( $v );\n\t\t\t\t}\n\t\t\t\tupdate_option( $this->token . '-converted', $this->converted );\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $response;\n\t} // End convert_sidebars()\n\n\t/**\n\t * Prepare the data for entry as Widget Areas.\n\t * @since  1.0.0\n\t * @param  array $data Sidebar Manager data.\n\t * @return array       Prepared data for entry into WooSidebars.\n\t */\n\tprivate function prepare_sidebars_data ( $data ) {\n\t\t$response = array();\n\n\t\t$this->prepare_internal_comparison_data();\n\n\t\tforeach ( (array)$data as $k => $v ) {\n\t\t\t// Skip over dependencies. We'll do those once all main sidebars have been processed.\n\t\t\tif ( isset( $v['conditionals']['piggy'] ) && ( '' != $v['conditionals']['piggy'] ) ) {\n\t\t\t\t$this->dependencies[$k] = $v;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$prep = $this->parse_single_sidebar( $k, $v );\n\n\t\t\t$response[$k] = $prep;\n\t\t}\n\t\t\n\t\tif ( 0 <= count( (array)$this->dependencies ) ) {\n\t\t\tforeach ( $this->dependencies as $k => $v ) {\n\t\t\t\tif ( in_array( $v['conditionals']['piggy'], array_keys( $response ) ) ) {\n\t\t\t\t\t$conditions = $this->determine_conditions( $v );\n\t\t\t\t\tif ( 0 <= count( (array)$conditions ) ) {\n\t\t\t\t\t\t$response[$v['conditionals']['piggy']]['post_meta']['_condition'] = array_merge( $response[$v['conditionals']['piggy']]['post_meta']['_condition'], $conditions );\n\t\t\t\t\t\tunset( $this->dependencies[$k] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$this->store_unconverted_sidebars();\n\t\t\n\t\treturn $response;\n\t} // End prepare_sidebars_data()\n\n\t/**\n\t * Store data that the converter had trouble converting.\n\t * @since  1.0.0\n\t * @return void\n\t */\n\tprivate function store_unconverted_sidebars () {\n\t\tif ( 0 <= count( (array)$this->not_converted ) ) {\n\t\t\tupdate_option( $this->token . '-not-converted', $this->not_converted, 120 );\n\t\t}\n\n\t\tif ( 0 <= count( (array)$this->dependencies ) ) {\n\t\t\tupdate_option( $this->token . '-dependencies', $this->dependencies, 120 );\n\t\t}\n\t} // End store_unconverted_sidebars()\n\n\t/**\n\t * Parse data for a single sidebar.\n\t * @since  1.0.0\n\t * @param  string $k The ID of the sidebar.\n\t * @param  array  $v Data pertaining to the sidebar being parsed.\n\t * @return array\n\t */\n\tprivate function parse_single_sidebar ( $k, $v ) {\n\t\t$response = array( 'post_meta' => array( '_condition' => array() ) );\n\t\n\t\t// Check if the sidebar has already been converted\n\t\tif ( isset( $v['conditionals']['sidebar_id'] ) && ( in_array( $v['conditionals']['sidebar_id'], $this->converted ) ) ) {\n\t\t\treturn array();\n\t\t} // End If Statement\n\t\t\n\t\t// Check for a slug. If we don't have one, skip over this sidebar.\n\t\tif ( isset( $v['conditionals']['sidebar_id'] ) && ( '' != $v['conditionals']['sidebar_id'] ) ) {\n\t\t\t$response['post_name'] = esc_attr( $v['conditionals']['sidebar_id'] );\n\t\t} else {\n\t\t\t$this->not_converted[$k] = $v; // Keep a log of this item, which wasn't converted.\n\t\t\tcontinue; // Skip this one, as we don't have a proper slug.\n\t\t}\n\n\t\t// Conditions.\n\t\t$response['post_meta']['_condition'] = $this->determine_conditions( $v );\n\t\t\n\t\tif ( 0 >= count( (array)$response['post_meta']['_condition'] ) ) {\n\t\t\t$this->not_converted[$k] = $v; // Keep a log of this item, which wasn't converted.\n\t\t\treturn array(); // Skip over this one if we don't have any conditions.\n\t\t}\n\n\t\t// Title.\n\t\tif ( isset( $v['conditionals']['name'] ) ) {\n\t\t\t$response['post_title'] = esc_attr( $v['conditionals']['name'] );\n\t\t}\n\n\t\t// Sidebar to replace.\n\t\tif ( isset( $v['conditionals']['sidebar_to_replace'] ) && ( '' != $v['conditionals']['sidebar_to_replace'] ) ) {\n\t\t\t$response['post_meta']['_sidebar_to_replace'] = esc_attr( $v['conditionals']['sidebar_to_replace'] );\n\t\t}\n\n\t\t// Description.\n\t\tif ( isset( $v['setup']['description'] ) ) {\n\t\t\t$response['post_excerpt'] = esc_attr( $v['setup']['description'] );\n\t\t}\n\n\t\treturn $response;\n\t} // End parse_single_sidebar()\n\n\t/**\n\t * Determine the conditions for this given data.\n\t * @since  1.0.0\n\t * @param  array $data Sidebar Manager data.\n\t * @return array       Conditions.\n\t */\n\tprivate function determine_conditions ( $data ) {\n\t\t$conditions = array();\n\n\t\tif ( ! isset( $data['conditionals']['conditional'] ) && ! isset( $data['conditionals']['id'] ) ) { return $conditions; }\n\n\t\t$condition = $data['conditionals']['conditional'];\n\t\n\t\tif ( 'hierarchy' == $condition ) {\n\t\t\t$condition = $data['conditionals']['id'];\n\t\t}\n\n\t\tif ( '' == $condition ) {\n\t\t\t$condition = $data['conditionals']['type'];\n\t\t}\n\n\t\tif ( '' == $condition ) { return $conditions; }\n\n\t\t$type = '';\n\t\t\n\t\tforeach ( $this->comparison_data as $k => $v ) {\n\t\t\tif ( in_array( $condition, $v ) ) {\n\t\t\t\t$type = $k;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ( '' == $type ) { $type = $condition; }\n\t\t\n\t\tswitch ( $type ) {\n\t\t\tcase 'post_types':\n\t\t\tif ( 'page' == $data['conditionals']['id'] ) {\n\t\t\t\t$conditions[] = 'page';\n\t\t\t} else {\n\t\t\t\t$conditions[] = 'post-' . $data['conditionals']['id'];\n\t\t\t} // End If Statement\n\t\t\tbreak;\n\n\t\t\tcase 'taxonomies':\n\t\t\tif ( 'category' == $data['conditionals']['id'] ) {\n\t\t\t\t$conditions[] = 'archive-' . $data['conditionals']['id'];\n\t\t\t} else {\n\t\t\t\t$conditions[] = 'term-' . $data['conditionals']['id'];\n\t\t\t} // End If Statement\n\t\t\tbreak;\n\n\t\t\tcase 'custom_post_type':\n\t\t\t$conditions[] = 'post-type-' . $data['conditionals']['id'];\n\t\t\tbreak;\n\n\t\t\tcase 'post_type_archive':\n\t\t\t$conditions[] = 'post-type-archive-' . $data['conditionals']['id'];\n\t\t\tbreak;\n\n\t\t\tcase 'page_template':\n\t\t\t$token = str_replace( '.php', '', 'page-template-' . $data['conditionals']['id'] );\n\t\t\t$conditions[] = esc_attr( $token );\n\t\t\tbreak;\n\n\t\t\tcase 'hierarchy':\n\t\t\tif ( 'tag' == $data['conditionals']['id'] ) {\n\t\t\t\t$conditions[] = 'archive-post_' . $data['conditionals']['id'];\n\t\t\t} elseif ( 'tax' == $data['conditionals']['id'] ) {\n\t\t\t\t$conditions[] = 'archive-taxonomy';\n\t\t\t} elseif ( 'attach' == $data['conditionals']['id'] ) {\n\t\t\t\t$conditions[] = 'attachment';\n\t\t\t} else {\n\t\t\t\tif ( in_array( $data['conditionals']['id'], $this->comparison_data['hierarchy'] ) ) { $conditions[] = $data['conditionals']['id']; }\n\t\t\t} // End If Statement\n\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\n\t\treturn $conditions;\n\t} // End determine_conditions()\n\n\t/**\n\t * Add a widgetized area to WooSidebars.\n\t * @since  1.0.0\n\t * @param  array $data Data for the widget area.\n\t * @return boolean\n\t */\n\tprivate function add_sidebar ( $data ) {\n\t\t$response = false;\n\t\t\n\t\t// Check if there is data\n\t\tif ( isset( $data['post_name'] ) && ( $data['post_name'] != '' ) ) {\n\t\t\t$post_id = wp_insert_post( array( 'post_title' => esc_html( $data['post_title'] ), 'post_name' => urlencode( $data['post_name'] ), 'post_excerpt' => esc_html( $data['post_excerpt'] ), 'post_status' => 'publish', 'post_type' => 'sidebar' ) );\n\t\t\t\n\t\t\tif ( 0 < intval( $post_id ) ) {\n\t\t\t\tadd_post_meta( intval( $post_id ), '_sidebar_to_replace', esc_attr( $data['post_meta']['_sidebar_to_replace'] ), true );\n\t\t\t\t\n\t\t\t\tforeach ( $data['post_meta']['_condition'] as $k => $v ) {\n\t\t\t\t\tadd_post_meta( intval( $post_id ), '_condition', esc_attr( $v ), false );\n\t\t\t\t}\n\t\t\t\n\t\t\t\t// Add Sidebar to already converted list in the db - woo_sbm_converted\n\t\t\t\tif ( ! in_array( $data['post_name'], $this->converted ) ) {\n\t\t\t\t\tarray_push( $this->converted, $data['post_name'] );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$response = true;\n\t\t\t}\t\n\t\t}\n\t\t\n\t\treturn $response;\n\t} // End add_sidebar()\n\n\t/**\n\t * Prepare the data to be compared against when determining the conditions.\n\t * @since  1.0.0\n\t * @return void\n\t */\n\tprivate function prepare_internal_comparison_data () {\n\t\t$this->comparison_data['post_types'] = get_post_types();\n\t\t$this->comparison_data['taxonomies'] = get_taxonomies();\n\t\t$this->comparison_data['hierarchy'] = $this->get_hierarchy_options();\n\t} // End prepare_internal_comparison_data()\n\n\t/**\n\t * Return an array of Sidebar Manager hierarchy options.\n\t * @since  1.0.0\n\t * @return array\n\t */\n\tprivate function get_hierarchy_options () {\n\t\treturn array( 'front_page', 'home', 'single', 'page', 'singular', 'archive', 'category', 'tag', 'tax', 'author', 'date', 'search', 'paged', 'attach', '404' );\n\t} // End get_hierarchy_options()\n\n\t/**\n\t * Delete the old sidebars data.\n\t * @since  1.0.0\n\t * @return boolean\n\t */\n\tprivate function delete_sidebars () {\n\t\t$response = false;\n\t\t$response = delete_option( 'sbm_woo_sbm_options' );\n\t\treturn $response;\n\t} // End delete_sidebars()\n\n\t/**\n\t * Toggle the status of whether or not the Sidebar Manager is enabled (1 = currently enabled, 0 = currently disabled).\n\t * @since  1.1.0\n\t * @return boolean Whether or not the update process was successful.\n\t */\n\tprivate function toggle_sidebar_manager_status () {\n\t\t$response = get_option( $this->token . '-sbm-status', '1' );\n\t\tif ( '1' != $response ) { $response = '1'; } else { $response = '0'; }\n\t\t$status = update_option( $this->token . '-sbm-status', $response );\n\n\t\treturn $status;\n\t} // End toggle_sidebar_manager_status()\n\n\t/**\n\t * Add actions that disable the filters and actions added by the WooFramework's Sidebar Manager.\n\t * @since  1.1.0\n\t * @return  void\n\t */\n\tprivate function disable_sidebar_manager () {\n\t\tadd_action( 'after_setup_theme', array( &$this, 'remove_sbm_registration' ) );\n\t\tadd_action( 'get_header', array( &$this, 'remove_sbm_filter' ) );\n\t} // End disable_sidebar_manager()\n\n\t/**\n\t * Remove the action that registers the WooFramework's custom sidebars.\n\t * @since  1.1.0\n\t * @return  void\n\t */\n\tpublic function remove_sbm_registration () {\n    \tremove_action( 'init', 'woo_sbm_widgets_init' );\n\t} // End remove_sbm_registration()\n\n\t/**\n\t * Remove the frontend filter that detects the WooFramework's custom sidebars.\n\t * @since  1.1.0\n\t * @return  void\n\t */\n\tpublic function remove_sbm_filter () {\n\t    remove_filter( 'woo_inject_sidebar', 'woo_sbm_sidebar' );\n\t} // End remove_sbm_filter()\n} // End Class\n?>", "=== WooSidebars Sidebar Manager Converter ===\nContributors: woothemes, mattyza, jeffikus\nTags: widgets, sidebars, widget-areas, import, tools, converter\nRequires at least: 3.3\nTested up to: 3.5\nStable tag: 1.1.1\nLicense: GPLv2 or later\nLicense URI: http://www.gnu.org/licenses/gpl-2.0.html\n\nUse the WooSidebars Sidebar Manager Converter to convert your sidebars from the WooFramework's old Sidebar Manager to the new WooSidebars plugin.\n\n== Description ==\n\nThe WooFramework by WooThemes, the code that powers all WooThemes themes, used to contain a Sidebar Manager. Over time, this feature required a re-vamping and was rewritten from the ground up as a standalone plugin. [WooSidebars](http://wordpress.org/extend/plugins/woosidebars/), the newly-imagined Sidebar Manager, can work with any theme that supports dynamic widget areas and is a far easier and more intuitive system.\n\nThe WooSidebars Sidebar Manager Converter plugin makes it easy to transfer your custom sidebars from the old Sidebar Manager system over to use with WooSidebars, with all conditions and settings in tact.\n\nLooking for a helping hand? [View plugin documentation](http://dojodocs.woothemes.com/sidebar-manager-to-woosidebars-converter/).\n\nLooking to contribute code to this plugin? [Fork the repository over at GitHub](http://github.com/woothemes/woosidebars-sbm-converter/).\n(submit pull requests to the \"develop\" branch)\n\n== Installation ==\n\n= Minimum Requirements =\n\n* WordPress 3.3 or greater\n* PHP version 5.2.4 or greater\n* MySQL version 5.0 or greater\n\n= Automatic installation =\n\nAutomatic installation is the easiest option as WordPress handles the file transfers itself and you don\u2019t even need to leave your web browser. To do an automatic install of WooSidebars Sidebar Manager Converter, log in to your WordPress admin panel, navigate to the Plugins menu and click Add New. \n\nIn the search field type \"WooSidebars Sidebar Manager Converter\" and click Search Plugins. Once you\u2019ve found our widget areas plugin you can view details about it such as the the point release, rating and description. Most importantly of course, you can install it by simply clicking Install Now. After clicking that link you will be asked if you\u2019re sure you want to install the plugin. Click yes and WordPress will automatically complete the installation. \n\n= Manual installation =\n\nThe manual installation method involves downloading WooSidebars Sidebar Manager Converter and uploading it to your webserver via your favourite FTP application.\n\n1. Download the plugin file to your computer and unzip it\n2. Using an FTP program, or your hosting control panel, upload the unzipped plugin folder to your WordPress installation\u2019s wp-content/plugins/ directory.\n3. Activate the plugin from the Plugins menu within the WordPress admin.\n\n= Where to go after installation =\n\nOnce WooSidebars has been installed and activated, please visit the \"Tools -> Convert Sidebars\" screen to check if you have any sidebars to be converted.\n\n= Upgrading =\n\nAutomatic updates should work a charm; as always though, ensure you backup your site just in case. \n\n== Frequently Asked Questions == \n\n= Where can I find WooSidebars documentation and user guides? =\n\nFor further documentation on using WooSidebars, please view the [WooSidebars Sidebar Manager Converter Documentation](http://dojodocs.woothemes.com/sidebar-manager-to-woosidebars-converter/).\n\n= The message comes up that I'm \"good to go\". What does that mean? =\n\nExcellent. This means you don't have any Sidebar Manager data to convert. You can deactivate and uninstall this plugin.\n\n= How can I contribute to WooSidebars Sidebar Manager Converter development? =\n\nLooking to contribute code to this plugin? [Fork the repository over at GitHub](http://github.com/woothemes/woosidebars-sbm-converter/).\n(submit pull requests to the \"develop\" branch)\n\n== Screenshots ==\n\n1. The Sidebar Manager converter screen.\n\n== Upgrade Notice ==\n\n= 1.1.1 =\nMoved to WordPress.org. Woo!\n\n== Changelog ==\n\n= 1.1.1 = \n* 2013-01-14\n* Moved to WordPress.org. Woo!", "<?php\n/*\nPlugin Name: WooSidebars - Sidebar Manager to WooSidebars Converter\nPlugin URI: http://woothemes.com/\nDescription: Convert your custom sidebars in the WooFramework's Sidebar Manager to Widget Areas in WooSidebars, with the appropriate conditions assigned.\nVersion: 1.1.1\nAuthor: WooThemes\nAuthor URI: http://woothemes.com/\nLicense: GPL version 2 or later - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n*/\n/*  Copyright 2012  WooThemes  (email : info@woothemes.com)\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License, version 2, as \n    published by the Free Software Foundation.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n    require_once( 'classes/class-woosidebars-sbm-converter.php' );\n\n\tglobal $woosidebars_sbm_converter;\n\t$woosidebars_sbm_converter = new Woosidebars_SBM_Converter( __FILE__ );\n\t$woosidebars_sbm_converter->version = '1.1.1';\n?>"], "fixing_code": ["*** Sidebar Manager to WooSidebars Converter Changelog ***\n\n2015.04.22 - version 1.1.2\n* classes/class-woosidebars-sbm-converter.php - Security Fix for remove_query_arg vulnerability\n\n2013.01.14 - version 1.1.1\n * /classes/class-woosidebars-sbm-converter-updater.php - REMOVED.\n * /classes/class-woosidebars-sbm-converter.php - Replaced camelCase WooSidebars with Woosidebars in class name, in accordance with WordPress class naming standards.\n * woosidebars-sbm-converter.php - Updated WooSidebars to Woosidebars in class instantiation.\n\n2012.09.19 - version 1.1.0\n * /classes/class-woosidebars-sbm-converter.php - Only display \"these sidebars had trouble converting\" logic if performing the \"convert\" action. Add UI and logic for functionality to temporarily disable the WooFramework's Sidebar Manager. Adjust text above the new button to clarify it's exact intention.\n * woosidebars-sbm-converter.php - Load the plugin on both frontend and admin, in order to run the Sidebar Manager disable logic.\n\n2012.09.11 - version 1.0.0\n * Initial release. Woo!", "<?php\n/**\n * WooSidebars SBM Converter Class\n *\n * @package WordPress\n * @subpackage WooSidebars SBM Converter\n * @category Core\n * @author WooThemes\n * @since 1.0.0\n *\n * TABLE OF CONTENTS\n *\n * - __construct()\n * - load_localisation()\n * - load_plugin_textdomain()\n * - register_admin_screen()\n * - process_request()\n * - admin_notices()\n * - admin_screen()\n * - has_sidebars()\n * - convert_sidebars()\n * - prepare_sidebars_data()\n * - store_unconverted_sidebars()\n * - parse_single_sidebar()\n * - determine_conditions()\n * - add_sidebar()\n * - prepare_internal_comparison_data()\n * - get_hierarchy_options()\n * - delete_sidebars()\n * - toggle_sidebar_manager_status()\n * - disable_sidebar_manager()\n * - remove_sbm_registration()\n * - remove_sbm_filter()\n */\n\nclass Woosidebars_SBM_Converter {\n\tprivate $file = '';\n\tprivate $token = '';\n\tprivate $title = '';\n\tprivate $hook = '';\n\tprivate $sbm_data = array();\n\tprivate $not_converted = array();\n\tprivate $converted = array();\n\tprivate $dependencies = array();\n\tprivate $comparison_data = array();\n\n\tpublic $version;\n\t\n\t/**\n\t * Constructor function.\n\t * @since  1.0.0\n\t * @return void\n\t */\n\tpublic function __construct ( $file ) {\n\t\t$this->file = $file;\n\t\t$this->token = 'woosidebars-sbm-converter';\n\t\t$this->title = __( 'Sidebar Manager Converter', 'woosidebars-sbm-converter' );\n\n\t\tif ( is_admin() ) {\n\t\t\t// Get existing converted sidebar id's\n\t\t\t$this->converted = get_option( $this->token . '-converted', array() );\n\n\t\t\tadd_action( 'admin_menu', array( &$this, 'register_admin_screen' ) );\n\t\t\t\n\t\t\t// Localisation\n\t\t\t$this->load_plugin_textdomain();\n\t\t\tadd_action( 'init', array( &$this, 'load_localisation' ), 0 );\n\t\t}\n\n\t\t// 1 = enabled Sidebar Manager, 0 = disabled Sidebar Manager\n\t\tif ( '1' != get_option( $this->token . '-sbm-status', '1' ) ) {\n\t\t\t$this->disable_sidebar_manager();\n\t\t}\n\t} // End __construct()\n\t\n\t/**\n\t * Load the plugin's localisation file.\n\t * @access public\n\t * @since 1.0.0\n\t * @return void\n\t */\n\tpublic function load_localisation () {\n\t\tload_plugin_textdomain( 'woosidebars-sbm-converter', false, dirname( plugin_basename( $this->file ) ) . '/lang/' );\n\t} // End load_localisation()\n\n\t/**\n\t * Load the plugin textdomain from the main WordPress \"languages\" folder.\n\t * @since  1.0.0\n\t * @return  void\n\t */\n\tpublic function load_plugin_textdomain () {\n\t    $domain = 'woosidebars-sbm-converter';\n\t    // The \"plugin_locale\" filter is also used in load_plugin_textdomain()\n\t    $locale = apply_filters( 'plugin_locale', get_locale(), $domain );\n\t \n\t    load_textdomain( $domain, WP_LANG_DIR . '/' . $domain . '/' . $domain . '-' . $locale . '.mo' );\n\t    load_plugin_textdomain( $domain, FALSE, dirname( plugin_basename( $this->file ) ) . '/lang/' );\n\t} // End load_plugin_textdomain()\n\t\n\t/**\n\t * Register the admin screen within WordPress.\n\t * @since  1.0.0\n\t * @return void\n\t */\n\tpublic function register_admin_screen () {\n\t\t$hook = add_submenu_page( 'tools.php', $this->title, __( 'Convert Sidebars', 'woosidebars-sbm-converter' ), 'edit_theme_options', 'woosidebars-sbm-converter', array( &$this, 'admin_screen' ) );\n\n\t\t$this->hook = $hook;\n\n\t\tadd_action( 'load-' . $hook, array( &$this, 'process_request' ) );\n\t} // End register_admin_screen()\n\n\t/**\n\t * Process the desired action, if applicable.\n\t * @since  1.0.0\n\t * @return void\n\t */\n\tpublic function process_request () {\n\t\tadd_action( 'admin_notices', array( &$this, 'admin_notices' ) );\n\n\t\tif ( isset( $_GET['action'] ) && in_array( $_GET['action'], array( 'convert', 'delete', 'toggle-sbm' ) ) && check_admin_referer( $this->token ) ) {\n\t\t\t$response = false;\n\t\t\t$status = 'false';\n\n\t\t\tswitch ( $_GET['action'] ) {\n\t\t\t\tcase 'convert':\n\t\t\t\t\t$response = $this->convert_sidebars();\n\t\t\t\tbreak;\n\n\t\t\t\tcase 'delete':\n\t\t\t\t\t$response = $this->delete_sidebars();\n\t\t\t\tbreak;\n\n\t\t\t\tcase 'toggle-sbm':\n\t\t\t\t\t$response = $this->toggle_sidebar_manager_status();\n\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif ( $response == true ) {\n\t\t\t\t$status = 'true';\n\t\t\t}\n\n\t\t\twp_safe_redirect( esc_url( add_query_arg( 'type', urlencode( $_GET['action'] ),  add_query_arg( 'status', urlencode( $status ), add_query_arg( 'page', urlencode( $this->token ),  admin_url( 'tools.php' ) ) ) ) ) );\n\t\t\texit;\n\t\t}\n\t} // End process_request()\n\n\t/**\n\t * Display admin notices.\n\t * @since  1.0.0\n\t * @return void\n\t */\n\tpublic function admin_notices () {\n\t\t$message = '';\n\t\t$response = '';\n\t\t\n\t\t// Display unconverted sidebars\n\t\t$has_sidebars = $this->has_sidebars();\n\t\t\n\t\tif ( isset( $_GET['status'] ) && in_array( $_GET['status'], array( 'true', 'false' ) ) && isset( $_GET['type'] ) && in_array( $_GET['type'], array( 'convert', 'delete', 'toggle-sbm' ) ) ) {\n\t\t\t$terminology = array( 'convert' => __( 'converted', 'woosidebars-sbm-converter' ), 'delete' => __( 'deleted', 'woosidebars-sbm-converter' ) );\n\t\t\t$classes = array( 'true' => 'updated', 'false' => 'error' );\n\n\t\t\tif ( 'toggle-sbm' == $_GET['type'] ) {\n\t\t\t\t$sbm_status = get_option( $this->token . '-sbm-status', '1' );\n\t        \t$status_label = __( 'enabled', 'woosidebars-sbm-converter' );\n\t        \tif ( '1' != $sbm_status ) {\n\t        \t\t$status_label = __( 'disabled', 'woosidebars-sbm-converter' );\n\t        \t}\n\t        \tif ( 'true' == $_GET['status'] ) {\n\t\t\t\t\t$message = sprintf( __( 'WooFramework Sidebar Manager %s successfully.', 'woosidebars-sbm-converter' ), $status_label );\n\t\t\t\t} else {\n\t\t\t\t\t$message = sprintf( __( 'There was an error and the WooFramework Sidebar Manager was not %s.', 'woosidebars-sbm-converter' ), $status_label );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( 'true' == $_GET['status'] ) {\n\t\t\t\t\t$message = sprintf( __( 'Sidebars %s successfully.', 'woosidebars-sbm-converter' ), $terminology[$_GET['type']] );\n\t\t\t\t} else {\n\t\t\t\t\t$message = sprintf( __( 'There was an error and not all sidebars were %s.', 'woosidebars-sbm-converter' ), $terminology[$_GET['type']] );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$response = '<div class=\"' . esc_attr( $classes[$_GET['status']] ) . ' fade\">' . \"\\n\";\n\t\t\t$response .= wpautop( $message );\n\t\t\t\n\t\t\tif ( 'convert' == $_GET['type'] ) {\n\t\t\t\t// Show troublesome sidebars.\n\t\t\t\t$not_converted = get_option( $this->token . '-not-converted', array() );\n\t\t\t\tif ( is_array( $not_converted ) && ( 0 < count( $not_converted ) ) ) {\n\t\t\t\t\t$response .= '<h4>' . __( 'The following sidebars were not converted:', 'woosidebars-sbm-converter' ) . '</h4>' . \"\\n\";\n\t\t\t\t\t$response .= '<ul>' . \"\\n\";\n\t\t\t\t\tforeach ( $not_converted as $k => $v ) {\n\t\t\t\t\t\tif ( isset( $v['setup']['name'] ) ) {\n\t\t\t\t\t\t\t$response .= '<li>' . $v['setup']['name'] . ' <small>(' . $v['setup']['id'] . ')</small></li>' . \"\\n\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$response .= '</ul>' . \"\\n\";\n\t\t\t\t}\n\n\t\t\t\t$dependencies = get_option( $this->token . '-dependencies', array() );\n\t\t\t\tif ( is_array( $dependencies ) && ( 0 < count( $dependencies ) ) ) {\n\t\t\t\t\t$response .= '<h4>' . __( 'The following sidebar dependencies were not converted:', 'woosidebars-sbm-converter' ) . '</h4>' . \"\\n\";\n\t\t\t\t\t$response .= '<ul>' . \"\\n\";\n\t\t\t\t\tforeach ( $dependencies as $k => $v ) {\n\t\t\t\t\t\tif ( isset( $v['setup']['name'] ) ) {\n\t\t\t\t\t\t\t$response .= '<li>' . $v['setup']['name'] . ' <small>(' . $v['setup']['id'] . ')</small></li>' . \"\\n\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$response .= '</ul>' . \"\\n\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$response .= '</div>' . \"\\n\";\n\n\t\t\tif ( '' != $response ) {\n\t\t\t\techo $response;\n\t\t\t}\n\t\t}\n\t} // End admin_notices()\n\n\t/**\n\t * The output of the admin screen.\n\t * @since  1.0.0\n\t * @return void\n\t */\n\tpublic function admin_screen () {\n\t\techo '<div class=\"wrap\">' . \"\\n\";\n\t\tscreen_icon();\n\t\techo '<h2>' . esc_html( $this->title ) . '</h2>' . \"\\n\";\n\t\t\n\t\t$update = false;\n\t\tif ( defined( 'THEME_FRAMEWORK' ) && constant( 'THEME_FRAMEWORK' ) == 'woothemes' ) {\n\t\t\t// Check if there is a later version of the Woo Framework\n\t\t\t$localversion = get_option( 'woo_framework_version' );\n        \t// Test if new version\n\t\t\t$update = version_compare( $localversion, '5.4.0', '<' );\n\t\t}\n        \t\t\n\t\t// HTML\n        if ( $update ) {\n        \techo '<p>' . __( 'Please update your WooFramework to the latest version before attempting to convert your existing sidebars.', 'woosidebars-sbm-converter' ) . '</p>' . \"\\n\";\n        \techo '<p class=\"submitbox\"><br /><a href=\"' . esc_url( admin_url( 'admin.php?page=woothemes_framework_update' ) ) . '\" class=\"button upgrade\">' . __( 'Upgrade your WooFramework', 'woosidebars-sbm-converter' ) . '</a></p>' . \"\\n\";\n        } else {\n        \t// Determine the current status of the Sidebar Manager (\"Disable\" if 1, \"Enable\" if 0).\n        \t$sbm_status = get_option( $this->token . '-sbm-status', '1' );\n        \t$status_label = __( 'Disable', 'woosidebars-sbm-converter' );\n        \tif ( '1' != $sbm_status ) {\n        \t\t$status_label = __( 'Enable', 'woosidebars-sbm-converter' );\n        \t}\n\n        \techo '<p>' . __( 'Convert your custom sidebars created using the WooFramework\\'s \"Sidebar Manager\" into Widget Areas for use with the WooSidebars plugin, with the appropriate conditions applied.', 'woosidebars-sbm-converter' ) . '</p>' . \"\\n\";\n\t\t\tif ( ! $this->has_sidebars() ) {\n\t\t\t\techo '<div class=\"updated\">' . \"\\n\";\n\t\t\t\techo '<p>' . __( 'You\\'ve got no outstanding Sidebar Manager sidebars... you\\'re good to go!', 'woosidebars-sbm-converter' ) . '</p>' . \"\\n\";\n\t\t\t\techo '</div>' . \"\\n\";\n\t\t\t} else {\n\t\t\t\techo '<div class=\"updated fade\"><p>' . __( 'We\\'ve detected that you\\'ve got data outstanding in the \"Sidebar Manager\". Clicking the button below will attempt to convert that data for use with the WooSidebars plugin.', 'woosidebars-sbm-converter' ) . '</p></div>' . \"\\n\";\n\n\t\t\t\t// Convert button.\n\t\t\t\techo '<p><br /><a href=\"' . esc_url( wp_nonce_url( add_query_arg( 'action', 'convert', admin_url( 'tools.php?page=' . urlencode( $this->token ) ) ), $this->token ) ) . '\" class=\"button\">' . __( 'Convert Sidebar Manager Data', 'woosidebars-sbm-converter' ) . '</a></p>' . \"\\n\";\n\n\t\t\t\techo '<p><br />' . sprintf( __( 'Once you\\'ve converted your Sidebar Manager data for use with WooSidebars, please visit the \"%sWidget Areas%s\" screen to see if your sidebars converted successfully.', 'woosidebars-sbm-converter' ), '<a href=\"' . esc_url( admin_url( 'edit.php?post_type=sidebar' ) ) . '\" target=\"_blank\">', '</a>' ) . '</p>' . \"\\n\";\n\n\t\t\t\techo '<p>' . __( 'To use WooSidebars in place of the WooFramework\\'s Sidebar Manager, you need to disable the WooFramework\\'s Sidebar Manager. To enable or disable the Sidebar Manager, please use the button below.', 'woosidebars-sbm-converter' ) . '</p>' . \"\\n\";\n\n\t\t\t\t// Toggle Sidebar Manager button.\n\t\t\t\techo '<p><br /><a href=\"' . esc_url( wp_nonce_url( add_query_arg( 'action', 'toggle-sbm', admin_url( 'tools.php?page=' . urlencode( $this->token ) ) ), $this->token ) ) . '\" class=\"button\">' . sprintf( __( '%s Sidebar Manager', 'woosidebars-sbm-converter' ), $status_label ) . '</a></p>' . \"\\n\";\n\t\t\t\n\t\t\t\techo '<p style=\"display: none;\"><br />' . sprintf( __( 'Once you\\'re happy that your sidebars have been converted successfully, you can remove the outdated \"Sidebar Manager\" data using the link below %s(this cannot be undone)%s.', 'woosidebars-sbm-converter' ), '<strong>', '</strong>' ) . '</p>' . \"\\n\";\n\n\t\t\t\t// Remove button.\n\t\t\t\techo '<p class=\"submitbox\" style=\"display: none;\"><br /><a href=\"' . esc_url( wp_nonce_url( add_query_arg( 'action', 'delete', admin_url( 'tools.php?page=' . urlencode( $this->token ) ) ), $this->token ) ) . '\" class=\"submitdelete deletion\">' . __( 'Remove Sidebar Manager Data', 'woosidebars-sbm-converter' ) . '</a></p>' . \"\\n\";\n\t\t\t} // End If Statement\n        \n        } // End If Statement\n\t\techo '</div><!--/.wrap-->' . \"\\n\";\n\t} // End admin_screen()\n\n\t/**\n\t * Check if we've got existing Sidebar Manager data. Assign the data internally if we do have.\n\t * @since  1.0.0\n\t * @return boolean\n\t */\n\tprivate function has_sidebars () {\n\t\t$response = false;\n\n\t\tif ( 0 < count( $this->sbm_data ) ) return true; // If we've already checked, we don't need to check again.\n\n\t\t$data = get_option( 'sbm_woo_sbm_options', array() );\n\n\t\tif ( isset( $data['sidebars'] ) && is_array( $data['sidebars'] ) && ( 0 < count( $data['sidebars'] ) ) ) {\n\t\t\t$this->sbm_data = (array)$data['sidebars'];\n\t\t\t$response = true;\n\t\t}\n\n\t\treturn $response;\n\t} // End has_sidebars()\n\n\t/**\n\t * Convert sidebars to work with WooSidebars.\n\t * @since  1.0.0\n\t * @return boolean\n\t */\n\tprivate function convert_sidebars () {\n\t\t$response = false;\n\t\t\n\t\tif ( $this->has_sidebars() ) {\n\t\t\t$response = $this->prepare_sidebars_data( $this->sbm_data );\n\n\t\t\tif ( 0 < count( (array)$response ) ) {\n\t\t\t\tforeach ( (array)$response as $k => $v ) {\n\t\t\t\t\t$this->add_sidebar( $v );\n\t\t\t\t}\n\t\t\t\tupdate_option( $this->token . '-converted', $this->converted );\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $response;\n\t} // End convert_sidebars()\n\n\t/**\n\t * Prepare the data for entry as Widget Areas.\n\t * @since  1.0.0\n\t * @param  array $data Sidebar Manager data.\n\t * @return array       Prepared data for entry into WooSidebars.\n\t */\n\tprivate function prepare_sidebars_data ( $data ) {\n\t\t$response = array();\n\n\t\t$this->prepare_internal_comparison_data();\n\n\t\tforeach ( (array)$data as $k => $v ) {\n\t\t\t// Skip over dependencies. We'll do those once all main sidebars have been processed.\n\t\t\tif ( isset( $v['conditionals']['piggy'] ) && ( '' != $v['conditionals']['piggy'] ) ) {\n\t\t\t\t$this->dependencies[$k] = $v;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$prep = $this->parse_single_sidebar( $k, $v );\n\n\t\t\t$response[$k] = $prep;\n\t\t}\n\t\t\n\t\tif ( 0 <= count( (array)$this->dependencies ) ) {\n\t\t\tforeach ( $this->dependencies as $k => $v ) {\n\t\t\t\tif ( in_array( $v['conditionals']['piggy'], array_keys( $response ) ) ) {\n\t\t\t\t\t$conditions = $this->determine_conditions( $v );\n\t\t\t\t\tif ( 0 <= count( (array)$conditions ) ) {\n\t\t\t\t\t\t$response[$v['conditionals']['piggy']]['post_meta']['_condition'] = array_merge( $response[$v['conditionals']['piggy']]['post_meta']['_condition'], $conditions );\n\t\t\t\t\t\tunset( $this->dependencies[$k] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$this->store_unconverted_sidebars();\n\t\t\n\t\treturn $response;\n\t} // End prepare_sidebars_data()\n\n\t/**\n\t * Store data that the converter had trouble converting.\n\t * @since  1.0.0\n\t * @return void\n\t */\n\tprivate function store_unconverted_sidebars () {\n\t\tif ( 0 <= count( (array)$this->not_converted ) ) {\n\t\t\tupdate_option( $this->token . '-not-converted', $this->not_converted, 120 );\n\t\t}\n\n\t\tif ( 0 <= count( (array)$this->dependencies ) ) {\n\t\t\tupdate_option( $this->token . '-dependencies', $this->dependencies, 120 );\n\t\t}\n\t} // End store_unconverted_sidebars()\n\n\t/**\n\t * Parse data for a single sidebar.\n\t * @since  1.0.0\n\t * @param  string $k The ID of the sidebar.\n\t * @param  array  $v Data pertaining to the sidebar being parsed.\n\t * @return array\n\t */\n\tprivate function parse_single_sidebar ( $k, $v ) {\n\t\t$response = array( 'post_meta' => array( '_condition' => array() ) );\n\t\n\t\t// Check if the sidebar has already been converted\n\t\tif ( isset( $v['conditionals']['sidebar_id'] ) && ( in_array( $v['conditionals']['sidebar_id'], $this->converted ) ) ) {\n\t\t\treturn array();\n\t\t} // End If Statement\n\t\t\n\t\t// Check for a slug. If we don't have one, skip over this sidebar.\n\t\tif ( isset( $v['conditionals']['sidebar_id'] ) && ( '' != $v['conditionals']['sidebar_id'] ) ) {\n\t\t\t$response['post_name'] = esc_attr( $v['conditionals']['sidebar_id'] );\n\t\t} else {\n\t\t\t$this->not_converted[$k] = $v; // Keep a log of this item, which wasn't converted.\n\t\t\tcontinue; // Skip this one, as we don't have a proper slug.\n\t\t}\n\n\t\t// Conditions.\n\t\t$response['post_meta']['_condition'] = $this->determine_conditions( $v );\n\t\t\n\t\tif ( 0 >= count( (array)$response['post_meta']['_condition'] ) ) {\n\t\t\t$this->not_converted[$k] = $v; // Keep a log of this item, which wasn't converted.\n\t\t\treturn array(); // Skip over this one if we don't have any conditions.\n\t\t}\n\n\t\t// Title.\n\t\tif ( isset( $v['conditionals']['name'] ) ) {\n\t\t\t$response['post_title'] = esc_attr( $v['conditionals']['name'] );\n\t\t}\n\n\t\t// Sidebar to replace.\n\t\tif ( isset( $v['conditionals']['sidebar_to_replace'] ) && ( '' != $v['conditionals']['sidebar_to_replace'] ) ) {\n\t\t\t$response['post_meta']['_sidebar_to_replace'] = esc_attr( $v['conditionals']['sidebar_to_replace'] );\n\t\t}\n\n\t\t// Description.\n\t\tif ( isset( $v['setup']['description'] ) ) {\n\t\t\t$response['post_excerpt'] = esc_attr( $v['setup']['description'] );\n\t\t}\n\n\t\treturn $response;\n\t} // End parse_single_sidebar()\n\n\t/**\n\t * Determine the conditions for this given data.\n\t * @since  1.0.0\n\t * @param  array $data Sidebar Manager data.\n\t * @return array       Conditions.\n\t */\n\tprivate function determine_conditions ( $data ) {\n\t\t$conditions = array();\n\n\t\tif ( ! isset( $data['conditionals']['conditional'] ) && ! isset( $data['conditionals']['id'] ) ) { return $conditions; }\n\n\t\t$condition = $data['conditionals']['conditional'];\n\t\n\t\tif ( 'hierarchy' == $condition ) {\n\t\t\t$condition = $data['conditionals']['id'];\n\t\t}\n\n\t\tif ( '' == $condition ) {\n\t\t\t$condition = $data['conditionals']['type'];\n\t\t}\n\n\t\tif ( '' == $condition ) { return $conditions; }\n\n\t\t$type = '';\n\t\t\n\t\tforeach ( $this->comparison_data as $k => $v ) {\n\t\t\tif ( in_array( $condition, $v ) ) {\n\t\t\t\t$type = $k;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ( '' == $type ) { $type = $condition; }\n\t\t\n\t\tswitch ( $type ) {\n\t\t\tcase 'post_types':\n\t\t\tif ( 'page' == $data['conditionals']['id'] ) {\n\t\t\t\t$conditions[] = 'page';\n\t\t\t} else {\n\t\t\t\t$conditions[] = 'post-' . $data['conditionals']['id'];\n\t\t\t} // End If Statement\n\t\t\tbreak;\n\n\t\t\tcase 'taxonomies':\n\t\t\tif ( 'category' == $data['conditionals']['id'] ) {\n\t\t\t\t$conditions[] = 'archive-' . $data['conditionals']['id'];\n\t\t\t} else {\n\t\t\t\t$conditions[] = 'term-' . $data['conditionals']['id'];\n\t\t\t} // End If Statement\n\t\t\tbreak;\n\n\t\t\tcase 'custom_post_type':\n\t\t\t$conditions[] = 'post-type-' . $data['conditionals']['id'];\n\t\t\tbreak;\n\n\t\t\tcase 'post_type_archive':\n\t\t\t$conditions[] = 'post-type-archive-' . $data['conditionals']['id'];\n\t\t\tbreak;\n\n\t\t\tcase 'page_template':\n\t\t\t$token = str_replace( '.php', '', 'page-template-' . $data['conditionals']['id'] );\n\t\t\t$conditions[] = esc_attr( $token );\n\t\t\tbreak;\n\n\t\t\tcase 'hierarchy':\n\t\t\tif ( 'tag' == $data['conditionals']['id'] ) {\n\t\t\t\t$conditions[] = 'archive-post_' . $data['conditionals']['id'];\n\t\t\t} elseif ( 'tax' == $data['conditionals']['id'] ) {\n\t\t\t\t$conditions[] = 'archive-taxonomy';\n\t\t\t} elseif ( 'attach' == $data['conditionals']['id'] ) {\n\t\t\t\t$conditions[] = 'attachment';\n\t\t\t} else {\n\t\t\t\tif ( in_array( $data['conditionals']['id'], $this->comparison_data['hierarchy'] ) ) { $conditions[] = $data['conditionals']['id']; }\n\t\t\t} // End If Statement\n\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\n\t\treturn $conditions;\n\t} // End determine_conditions()\n\n\t/**\n\t * Add a widgetized area to WooSidebars.\n\t * @since  1.0.0\n\t * @param  array $data Data for the widget area.\n\t * @return boolean\n\t */\n\tprivate function add_sidebar ( $data ) {\n\t\t$response = false;\n\t\t\n\t\t// Check if there is data\n\t\tif ( isset( $data['post_name'] ) && ( $data['post_name'] != '' ) ) {\n\t\t\t$post_id = wp_insert_post( array( 'post_title' => esc_html( $data['post_title'] ), 'post_name' => urlencode( $data['post_name'] ), 'post_excerpt' => esc_html( $data['post_excerpt'] ), 'post_status' => 'publish', 'post_type' => 'sidebar' ) );\n\t\t\t\n\t\t\tif ( 0 < intval( $post_id ) ) {\n\t\t\t\tadd_post_meta( intval( $post_id ), '_sidebar_to_replace', esc_attr( $data['post_meta']['_sidebar_to_replace'] ), true );\n\t\t\t\t\n\t\t\t\tforeach ( $data['post_meta']['_condition'] as $k => $v ) {\n\t\t\t\t\tadd_post_meta( intval( $post_id ), '_condition', esc_attr( $v ), false );\n\t\t\t\t}\n\t\t\t\n\t\t\t\t// Add Sidebar to already converted list in the db - woo_sbm_converted\n\t\t\t\tif ( ! in_array( $data['post_name'], $this->converted ) ) {\n\t\t\t\t\tarray_push( $this->converted, $data['post_name'] );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$response = true;\n\t\t\t}\t\n\t\t}\n\t\t\n\t\treturn $response;\n\t} // End add_sidebar()\n\n\t/**\n\t * Prepare the data to be compared against when determining the conditions.\n\t * @since  1.0.0\n\t * @return void\n\t */\n\tprivate function prepare_internal_comparison_data () {\n\t\t$this->comparison_data['post_types'] = get_post_types();\n\t\t$this->comparison_data['taxonomies'] = get_taxonomies();\n\t\t$this->comparison_data['hierarchy'] = $this->get_hierarchy_options();\n\t} // End prepare_internal_comparison_data()\n\n\t/**\n\t * Return an array of Sidebar Manager hierarchy options.\n\t * @since  1.0.0\n\t * @return array\n\t */\n\tprivate function get_hierarchy_options () {\n\t\treturn array( 'front_page', 'home', 'single', 'page', 'singular', 'archive', 'category', 'tag', 'tax', 'author', 'date', 'search', 'paged', 'attach', '404' );\n\t} // End get_hierarchy_options()\n\n\t/**\n\t * Delete the old sidebars data.\n\t * @since  1.0.0\n\t * @return boolean\n\t */\n\tprivate function delete_sidebars () {\n\t\t$response = false;\n\t\t$response = delete_option( 'sbm_woo_sbm_options' );\n\t\treturn $response;\n\t} // End delete_sidebars()\n\n\t/**\n\t * Toggle the status of whether or not the Sidebar Manager is enabled (1 = currently enabled, 0 = currently disabled).\n\t * @since  1.1.0\n\t * @return boolean Whether or not the update process was successful.\n\t */\n\tprivate function toggle_sidebar_manager_status () {\n\t\t$response = get_option( $this->token . '-sbm-status', '1' );\n\t\tif ( '1' != $response ) { $response = '1'; } else { $response = '0'; }\n\t\t$status = update_option( $this->token . '-sbm-status', $response );\n\n\t\treturn $status;\n\t} // End toggle_sidebar_manager_status()\n\n\t/**\n\t * Add actions that disable the filters and actions added by the WooFramework's Sidebar Manager.\n\t * @since  1.1.0\n\t * @return  void\n\t */\n\tprivate function disable_sidebar_manager () {\n\t\tadd_action( 'after_setup_theme', array( &$this, 'remove_sbm_registration' ) );\n\t\tadd_action( 'get_header', array( &$this, 'remove_sbm_filter' ) );\n\t} // End disable_sidebar_manager()\n\n\t/**\n\t * Remove the action that registers the WooFramework's custom sidebars.\n\t * @since  1.1.0\n\t * @return  void\n\t */\n\tpublic function remove_sbm_registration () {\n    \tremove_action( 'init', 'woo_sbm_widgets_init' );\n\t} // End remove_sbm_registration()\n\n\t/**\n\t * Remove the frontend filter that detects the WooFramework's custom sidebars.\n\t * @since  1.1.0\n\t * @return  void\n\t */\n\tpublic function remove_sbm_filter () {\n\t    remove_filter( 'woo_inject_sidebar', 'woo_sbm_sidebar' );\n\t} // End remove_sbm_filter()\n} // End Class\n?>", "=== WooSidebars Sidebar Manager Converter ===\nContributors: woothemes, mattyza, jeffikus\nTags: widgets, sidebars, widget-areas, import, tools, converter\nRequires at least: 3.3\nTested up to: 4.1.1\nStable tag: 1.1.2\nLicense: GPLv2 or later\nLicense URI: http://www.gnu.org/licenses/gpl-2.0.html\n\nUse the WooSidebars Sidebar Manager Converter to convert your sidebars from the WooFramework's old Sidebar Manager to the new WooSidebars plugin.\n\n== Description ==\n\nThe WooFramework by WooThemes, the code that powers all WooThemes themes, used to contain a Sidebar Manager. Over time, this feature required a re-vamping and was rewritten from the ground up as a standalone plugin. [WooSidebars](http://wordpress.org/extend/plugins/woosidebars/), the newly-imagined Sidebar Manager, can work with any theme that supports dynamic widget areas and is a far easier and more intuitive system.\n\nThe WooSidebars Sidebar Manager Converter plugin makes it easy to transfer your custom sidebars from the old Sidebar Manager system over to use with WooSidebars, with all conditions and settings in tact.\n\nLooking for a helping hand? [View plugin documentation](http://dojodocs.woothemes.com/sidebar-manager-to-woosidebars-converter/).\n\nLooking to contribute code to this plugin? [Fork the repository over at GitHub](http://github.com/woothemes/woosidebars-sbm-converter/).\n(submit pull requests to the \"develop\" branch)\n\n== Installation ==\n\n= Minimum Requirements =\n\n* WordPress 3.3 or greater\n* PHP version 5.2.4 or greater\n* MySQL version 5.0 or greater\n\n= Automatic installation =\n\nAutomatic installation is the easiest option as WordPress handles the file transfers itself and you don\u2019t even need to leave your web browser. To do an automatic install of WooSidebars Sidebar Manager Converter, log in to your WordPress admin panel, navigate to the Plugins menu and click Add New. \n\nIn the search field type \"WooSidebars Sidebar Manager Converter\" and click Search Plugins. Once you\u2019ve found our widget areas plugin you can view details about it such as the the point release, rating and description. Most importantly of course, you can install it by simply clicking Install Now. After clicking that link you will be asked if you\u2019re sure you want to install the plugin. Click yes and WordPress will automatically complete the installation. \n\n= Manual installation =\n\nThe manual installation method involves downloading WooSidebars Sidebar Manager Converter and uploading it to your webserver via your favourite FTP application.\n\n1. Download the plugin file to your computer and unzip it\n2. Using an FTP program, or your hosting control panel, upload the unzipped plugin folder to your WordPress installation\u2019s wp-content/plugins/ directory.\n3. Activate the plugin from the Plugins menu within the WordPress admin.\n\n= Where to go after installation =\n\nOnce WooSidebars has been installed and activated, please visit the \"Tools -> Convert Sidebars\" screen to check if you have any sidebars to be converted.\n\n= Upgrading =\n\nAutomatic updates should work a charm; as always though, ensure you backup your site just in case. \n\n== Frequently Asked Questions == \n\n= Where can I find WooSidebars documentation and user guides? =\n\nFor further documentation on using WooSidebars, please view the [WooSidebars Sidebar Manager Converter Documentation](http://dojodocs.woothemes.com/sidebar-manager-to-woosidebars-converter/).\n\n= The message comes up that I'm \"good to go\". What does that mean? =\n\nExcellent. This means you don't have any Sidebar Manager data to convert. You can deactivate and uninstall this plugin.\n\n= How can I contribute to WooSidebars Sidebar Manager Converter development? =\n\nLooking to contribute code to this plugin? [Fork the repository over at GitHub](http://github.com/woothemes/woosidebars-sbm-converter/).\n(submit pull requests to the \"develop\" branch)\n\n== Screenshots ==\n\n1. The Sidebar Manager converter screen.\n\n== Upgrade Notice ==\n\n= 1.1.2 =\n* 2015-04-22\n* Security Fix for add_query_arg vulnerability\n\n= 1.1.1 =\nMoved to WordPress.org. Woo!\n\n== Changelog ==\n\n= 1.1.2 =\n* 2015-04-22\n* Security Fix for add_query_arg vulnerability\n\n= 1.1.1 = \n* 2013-01-14\n* Moved to WordPress.org. Woo!", "<?php\n/*\nPlugin Name: WooSidebars - Sidebar Manager to WooSidebars Converter\nPlugin URI: http://woothemes.com/\nDescription: Convert your custom sidebars in the WooFramework's Sidebar Manager to Widget Areas in WooSidebars, with the appropriate conditions assigned.\nVersion: 1.1.2\nAuthor: WooThemes\nAuthor URI: http://woothemes.com/\nLicense: GPL version 2 or later - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n*/\n/*  Copyright 2012  WooThemes  (email : info@woothemes.com)\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License, version 2, as \n    published by the Free Software Foundation.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n    require_once( 'classes/class-woosidebars-sbm-converter.php' );\n\n\tglobal $woosidebars_sbm_converter;\n\t$woosidebars_sbm_converter = new Woosidebars_SBM_Converter( __FILE__ );\n\t$woosidebars_sbm_converter->version = '1.1.2';\n?>"], "filenames": ["changelog.txt", "classes/class-woosidebars-sbm-converter.php", "readme.txt", "woosidebars-sbm-converter.php"], "buggy_code_start_loc": [1, 146, 5, 6], "buggy_code_end_loc": [1, 147, 78, 31], "fixing_code_start_loc": [2, 146, 5, 6], "fixing_code_end_loc": [5, 147, 87, 31], "type": "CWE-601", "message": "A vulnerability, which was classified as problematic, was found in WooSidebars Sidebar Manager Converter Plugin up to 1.1.1 on WordPress. This affects the function process_request of the file classes/class-woosidebars-sbm-converter.php. The manipulation leads to open redirect. It is possible to initiate the attack remotely. Upgrading to version 1.1.2 is able to address this issue. The patch is named a0efb4ffb9dfe2925b889c1aa5ea40b4abbbda8a. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-230655.", "other": {"cve": {"id": "CVE-2015-10115", "sourceIdentifier": "cna@vuldb.com", "published": "2023-06-05T18:15:09.417", "lastModified": "2024-02-29T01:16:11.737", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, was found in WooSidebars Sidebar Manager Converter Plugin up to 1.1.1 on WordPress. This affects the function process_request of the file classes/class-woosidebars-sbm-converter.php. The manipulation leads to open redirect. It is possible to initiate the attack remotely. Upgrading to version 1.1.2 is able to address this issue. The patch is named a0efb4ffb9dfe2925b889c1aa5ea40b4abbbda8a. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-230655."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:woocommerce:sidebar_manager_to_woosidebars_converter:*:*:*:*:*:wordpress:*:*", "versionEndIncluding": "1.1.1", "matchCriteriaId": "907D83AE-E7F4-42FF-B156-B41AE1989BE4"}]}]}], "references": [{"url": "https://github.com/wp-plugins/woosidebars-sbm-converter/commit/a0efb4ffb9dfe2925b889c1aa5ea40b4abbbda8a", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://vuldb.com/?ctiid.230655", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.230655", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/wp-plugins/woosidebars-sbm-converter/commit/a0efb4ffb9dfe2925b889c1aa5ea40b4abbbda8a"}}