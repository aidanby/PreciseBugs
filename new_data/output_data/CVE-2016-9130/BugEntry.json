{"buggy_code": ["<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\n/**\n * @package    MaxDelivery\n * @subpackage ad\n *\n * This library contains the functions to select and generate the HTML for an ad\n *\n * The code below makes several references to an \"ad-array\", this is /almost/ an ad-object, and implements\n * the following interface.\n *\n * Array\n *   (\n *       [ad_id] => 123\n *       [placement_id] => 4\n *       [active] => t\n *       [name] => Web Flash (With backup)\n *       [type] => web\n *       [contenttype] => swf\n *       [pluginversion] => 6\n *       [filename] => banner_468x60.swf\n *       [imageurl] =>\n *       [htmltemplate] =>\n *       [htmlcache] =>\n *       [width] => 468\n *       [height] => 60\n *       [weight] => 1\n *       [seq] => 0\n *       [target] => _blank\n *       [url] => http://www.example.net/landing_page/\n *       [alt] =>\n *       [status] =>\n *       [bannertext] =>\n *       [adserver] =>\n *       [block] => 0\n *       [capping] => 0\n *       [session_capping] => 0\n *       [compiledlimitation] =>\n *       [acl_plugins] =>\n *       [prepend] =>\n *       [append] =>\n *       [bannertype] => 0\n *       [alt_filename] => backup_banner_468x60.gif\n *       [alt_imageurl] =>\n *       [alt_contenttype] => gif\n *       [campaign_priority] => 5\n *       [campaign_weight] => 0\n *       [campaign_companion] => 0\n *       [priority] => 0.10989010989\n *       [zoneid] => 567\n *       [bannerid] => 123\n *       [storagetype] => web\n *       [campaignid] => 4\n *       [zone_companion] =>\n *       [prepend] =>\n *   )\n *\n */\n\n/**\n * This is the code that renders the HTML required to display an ad\n *\n * @param array   $aBanner      The array of banner properties for the banner to be rendered\n * @param int     $zoneId       The zone ID of the zone used to select this ad (if zone-selected)\n * @param string  $source       The \"source\" parameter passed into the adcall\n * @param string  $target       The target attribute for generated <a href> links\n * @param string  $ct0          The 3rd party click tracking URL to redirect to after logging\n * @param boolean $withtext     Should \"text below banner\" be appended to the generated code\n * @param string  $charset      Character set to convert the rendered output into\n * @param bookean $logClick     Should this click be logged (clicks in admin should not be logged)\n * @param boolean $logView      Should this view be logged (views in admin should not be logged\n *                              also - 3rd party callback logging should not be logged at view time)\n * @param boolean $richMedia    Does this invocation method allow for serving 3rd party/html ads\n * @param string  $loc          The \"current page\" URL\n * @param string  $referer      The \"referring page\" URL\n * @param array   $context      The context of this ad selection\n *                              - used for companion positioning\n *                              - and excluding banner/campaigns from this ad-call\n *\n * @return string   The HTML to display this ad\n */\nfunction MAX_adRender(&$aBanner, $zoneId=0, $source='', $target='', $ct0='', $withText=false, $charset = '', $logClick=true, $logView=true, $richMedia=true, $loc='', $referer='', &$context = array())\n{\n    $conf = $GLOBALS['_MAX']['CONF'];\n\n    // Sanitize these user-inputted variables before passing to the _adRenderX calls\n    if (empty($target)) {\n        $target = !empty($aBanner['target']) ? $aBanner['target'] : '_blank';\n    }\n    $target = htmlspecialchars($target, ENT_QUOTES);\n    $source = htmlspecialchars($source, ENT_QUOTES);\n\t$aBanner['bannerContent'] = \"\";\n\n\t// Pre adRender hook\n\tOX_Delivery_Common_hook('preAdRender', array(&$aBanner, &$zoneId, &$source, &$ct0, &$withText, &$logClick, &$logView, null, &$richMedia, &$loc, &$referer));\n\n\t$functionName = _getAdRenderFunction($aBanner, $richMedia);\n\t$code = OX_Delivery_Common_hook('adRender', array(&$aBanner, &$zoneId, &$source, &$ct0, &$withText, &$logClick, &$logView, null, &$richMedia, &$loc, &$referer), $functionName);\n\n    // Transform any code\n\n    // Get a timestamp\n    list($usec, $sec) = explode(' ', microtime());\n    $time = (float)$usec + (float)$sec;\n    // Get a random number\n    $random = MAX_getRandomNumber();\n    global $cookie_random;  // Temporary fix to get doubleclick tracking working (Bug # 88)\n    $cookie_random = $random;\n    // Get the click URL\n    $clickUrl = _adRenderBuildClickUrl($aBanner, $zoneId, $source, $ct0, $logClick, true);\n\t// Get URL prefix, stripping the traling slash\n    $urlPrefix = substr(MAX_commonGetDeliveryUrl(), 0, -1);\n\n    $code = str_replace('{clickurl}', $clickUrl, $code);  // This step needs to be done separately because {clickurl} can contain {random}...\n\n    if (strpos($code, '{logurl}') !== false) {\n        $logUrl = _adRenderBuildLogURL($aBanner, $zoneId, $source, $loc, $referer, '&');\n        $code = str_replace('{logurl}', $logUrl, $code);  // This step needs to be done separately because {logurl} does contain {random}...\n    }\n    if (strpos($code, '{logurl_enc}') !== false) {\n        $logUrl_enc = urlencode(_adRenderBuildLogURL($aBanner, $zoneId, $source, $loc, $referer, '&'));\n        $code = str_replace('{logurl_enc}', $logUrl_enc, $code);  // This step needs to be done separately because {logurl} does contain {random}...\n    }\n    if (strpos($code, '{clickurlparams}')) {\n        $maxparams = _adRenderBuildParams($aBanner, $zoneId, $source, urlencode($ct0), $logClick, true);\n        $code = str_replace('{clickurlparams}', $maxparams, $code);  // This step needs to be done separately because {clickurlparams} does contain {random}...\n    }\n    $search = array('{timestamp}','{random}','{target}','{url_prefix}','{bannerid}','{zoneid}','{source}', '{pageurl}', '{width}', '{height}', '{websiteid}', '{campaignid}', '{advertiserid}', '{referer}');\n    $locReplace = isset($GLOBALS['loc']) ? $GLOBALS['loc'] : '';\n    $websiteid = (!empty($aBanner['affiliate_id'])) ? $aBanner['affiliate_id'] : '0';\n    $replace = array($time, $random, $target, $urlPrefix, $aBanner['ad_id'], $zoneId, $source, urlencode($locReplace), $aBanner['width'], $aBanner['height'], $websiteid, $aBanner['campaign_id'], $aBanner['client_id'], $referer);\n\n    preg_match_all('#{(.*?)(_enc)?}#', $code, $macros);\n    for ($i=0;$i<count($macros[1]);$i++) {\n        if (!in_array($macros[0][$i], $search) && isset($_REQUEST[$macros[1][$i]])) {\n            $search[] = $macros[0][$i];\n            $replace[] = (!empty($macros[2][$i])) ? urlencode(stripslashes($_REQUEST[$macros[1][$i]])) : htmlspecialchars(stripslashes($_REQUEST[$macros[1][$i]]), ENT_QUOTES);\n        }\n    }\n    // addUrlParams hook for plugins to add key=value pairs to the log/click URLs\n    $componentParams =  OX_Delivery_Common_hook('addUrlParams', array($aBanner));\n    if (!empty($componentParams) && is_array($componentParams)) {\n        foreach ($componentParams as $params) {\n            if (!empty($params) && is_array($params)) {\n                foreach ($params as $key => $value) {\n                    $search[]  = '{' . $key . '}';\n                    $replace[] = urlencode($value);\n                }\n            }\n        }\n    }\n    $code = str_replace($search, $replace, $code);\n\n    $clickUrl = str_replace($search, $replace, $clickUrl);\n    $aBanner['clickUrl'] = $clickUrl;\n\n    // Now we can finally replace {clickurl_enc}\n    if (strpos($code, '{clickurl_enc}') !== false) {\n        $code = str_replace('{clickurl_enc}', urlencode($clickUrl), $code);\n    }\n\n    $logUrl = _adRenderBuildLogURL($aBanner, $zoneId, $source, $loc, $referer, '&');\n    $logUrl = str_replace($search, $replace, $logUrl);\n    $aBanner['logUrl'] = $logUrl;\n\n    // Pass over the search / replace patterns\n    $aBanner['aSearch']  = $search;\n    $aBanner['aReplace'] = $replace;\n\n\t// post adRender hook\n\tOX_Delivery_Common_hook('postAdRender', array(&$code, $aBanner, &$context));\n\n//    return $code;\n    return MAX_commonConvertEncoding($code, $charset);\n}\n\n/**\n * This function builds the HTML to display a 1x1 logging beacon\n *\n * @param string $logUrl    The log URL\n * @param string $beaconId  The ID of the HTML beacon tag, an underscore plus a random string will be appended\n * @param array  $userAgent The optional user agent, if null $_SERVER[HTTP_USER_AGENT]\n *                          will be used\n * @return string The HTML to show the 1x1 logging beacon\n */\nfunction MAX_adRenderImageBeacon($logUrl, $beaconId = 'beacon', $userAgent = null)\n{\n    if (!isset($userAgent) && isset($_SERVER['HTTP_USER_AGENT'])) {\n        $userAgent = $_SERVER['HTTP_USER_AGENT'];\n    }\n    $beaconId .= '_{random}';\n    // Add beacon image for logging\n    if (isset($userAgent) && preg_match(\"#Mozilla/(1|2|3|4)#\", $userAgent)\n        && !preg_match(\"#compatible#\", $userAgent)) {\n        $div = \"<layer id='{$beaconId}' width='0' height='0' border='0' visibility='hide'>\";\n        $style = '';\n        $divEnd = '</layer>';\n    } else {\n        $div = \"<div id='{$beaconId}' style='position: absolute; left: 0px; top: 0px; visibility: hidden;'>\";\n        $style = \" style='width: 0px; height: 0px;'\";\n        $divEnd = '</div>';\n    }\n        $beacon = \"$div<img src='\".htmlspecialchars($logUrl).\"' width='0' height='0' alt=''{$style} />{$divEnd}\";\n        return $beacon;\n}\n\n/**\n * This function builds the HTML code to display an \"image\" ad (e.g. GIF/JPG/PNG)\n *\n * @param array   $aBanner      The ad-array for the ad to render code for\n * @param int     $zoneId       The zone ID of the zone used to select this ad (if zone-selected)\n * @param string  $source       The \"source\" parameter passed into the adcall\n * @param string  $ct0          The 3rd party click tracking URL to redirect to after logging\n * @param int     $withText     Should \"text below banner\" be appended to the generated code\n * @param bookean $logClick     Should this click be logged (clicks in admin should not be logged)\n * @param boolean $logView      Should this view be logged (views in admin should not be logged\n *                              also - 3rd party callback logging should not be logged at view time)\n * @param boolean $useAlt       Should the backup file be used for this code\n * @param boolean $richMedia    Does this invocation method allow for serving 3rd party/html ads\n * @param string  $loc          The \"current page\" URL\n * @param string  $referer      The \"referring page\" URL\n * @param boolean $useAppend    Should any appended code appended to the banner be output?\n *\n * @return string               The HTML to display this ad\n */\nfunction _adRenderImage(&$aBanner, $zoneId=0, $source='', $ct0='', $withText=false, $logClick=true, $logView=true, $useAlt=false, $richMedia=true, $loc='', $referer='', $context=array(), $useAppend=true)\n{\n    $conf = $GLOBALS['_MAX']['CONF'];\n    $aBanner['bannerContent'] = $imageUrl = _adRenderBuildFileUrl($aBanner, $useAlt);\n\n    if (!$richMedia) {\n        return _adRenderBuildFileUrl($aBanner, $useAlt);\n    }\n    $prepend = (!empty($aBanner['prepend']) && $useAppend) ? $aBanner['prepend'] : '';\n    $append = (!empty($aBanner['append']) && $useAppend) ? $aBanner['append'] : '';\n\n    // Create the anchor tag..\n    $clickUrl = _adRenderBuildClickUrl($aBanner, $zoneId, $source, $ct0, $logClick);\n    if (!empty($clickUrl)) {  // There is a link\n        $status = _adRenderBuildStatusCode($aBanner);\n        //$target = !empty($aBanner['target']) ? $aBanner['target'] : '_blank';\n        $clickTag = \"<a href='$clickUrl' target='{target}'$status>\";\n        $clickTagEnd = '</a>';\n    } else {\n        $clickTag = '';\n        $clickTagEnd = '';\n    }\n    // Create the image tag..\n    if (!empty($imageUrl)) {\n        $imgStatus = empty($clickTag) && !empty($status) ? $status : '';\n        $width = !empty($aBanner['width']) ? $aBanner['width'] : 0;\n        $height = !empty($aBanner['height']) ? $aBanner['height'] : 0;\n        $alt = !empty($aBanner['alt']) ? htmlspecialchars($aBanner['alt'], ENT_QUOTES) : '';\n        $imageTag = \"$clickTag<img src='$imageUrl' width='$width' height='$height' alt='$alt' title='$alt' border='0'$imgStatus />$clickTagEnd\";\n    } else {\n        $imageTag = '';\n    }\n    // Get the text below the banner\n    $bannerText = $withText && !empty($aBanner['bannertext']) ? \"<br />$clickTag\" . htmlspecialchars($aBanner['bannertext'], ENT_QUOTES) . \"$clickTagEnd\" : '';\n    // Get the image beacon...\n    $beaconTag = ($logView && $conf['logging']['adImpressions']) ? _adRenderImageBeacon($aBanner, $zoneId, $source, $loc, $referer) : '';\n    return $prepend . $imageTag . $bannerText . $beaconTag . $append;\n}\n\n/**\n * This function generates the code to show a \"flash\" ad\n *\n * @param array   $aBanner      The ad-array for the ad to render code for\n * @param int     $zoneId       The zone ID of the zone used to select this ad (if zone-selected)\n * @param string  $source       The \"source\" parameter passed into the adcall\n * @param string  $ct0          The 3rd party click tracking URL to redirect to after logging\n * @param int     $withText     Should \"text below banner\" be appended to the generated code\n * @param bookean $logClick     Should this click be logged (clicks in admin should not be logged)\n * @param boolean $logView      Should this view be logged (views in admin should not be logged\n *                              also - 3rd party callback logging should not be logged at view time)\n * @param boolean $richMedia    Does this invocation method allow for serving 3rd party/html ads\n * @param string  $loc          The \"current page\" URL\n * @param string  $referer      The \"referring page\" URL\n *\n * @return string               The HTML to display this ad\n */\nfunction _adRenderFlash(&$aBanner, $zoneId=0, $source='', $ct0='', $withText=false, $logClick=true, $logView=true, $useAlt=false, $richMedia=true, $loc='', $referer='', $context=array())\n{\n    $conf = $GLOBALS['_MAX']['CONF'];\n    $prepend = !empty($aBanner['prepend']) ? $aBanner['prepend'] : '';\n    $append = !empty($aBanner['append']) ? $aBanner['append'] : '';\n    $width = !empty($aBanner['width']) ? $aBanner['width'] : 0;\n    $height = !empty($aBanner['height']) ? $aBanner['height'] : 0;\n    $pluginVersion = !empty($aBanner['pluginversion']) ? _adRenderGetRealPluginVersion($aBanner['pluginversion']) : '4';\n    $logURL = _adRenderBuildLogURL($aBanner, $zoneId, $source, $loc, $referer, '&');\n\n    if (!empty($aBanner['alt_filename']) || !empty($aBanner['alt_imageurl'])) {\n        $altImageAdCode = _adRenderImage($aBanner, $zoneId, $source, $ct0, false, $logClick, false, true, true, $loc, $referer, $context, false);\n        $fallBackLogURL = _adRenderBuildLogURL($aBanner, $zoneId, $source, $loc, $referer, '&', true);\n    } else {\n        $alt = !empty($aBanner['alt']) ? htmlspecialchars($aBanner['alt'], ENT_QUOTES) : '';\n        $altImageAdCode = \"<img src='\" . _adRenderBuildImageUrlPrefix() . '/1x1.gif' . \"' alt='\".$alt.\"' title='\".$alt.\"' border='0' />\";\n\n        if ($zoneId) {\n            // Log a blank impression instead\n            $fallBackLogURL = _adRenderBuildLogURL(array(\n                    'ad_id' => 0,\n                    'placement_id' => 0,\n                ), $zoneId, $source, $loc, $referer, '&', true);\n        } else {\n            // No zone, skip logging\n            $fallBackLogURL = false;\n        }\n    }\n\n    // Create the anchor tag..\n    $clickUrl = _adRenderBuildClickUrl($aBanner, $zoneId, $source, $ct0, $logClick);\n    if (!empty($clickUrl)) {  // There is a link\n        $status = _adRenderBuildStatusCode($aBanner);\n        $target = !empty($aBanner['target']) ? $aBanner['target'] : '_blank';\n        $swfParams = array('clickTARGET' => $target, 'clickTAG' => $clickUrl);\n        $clickTag = \"<a href='$clickUrl' target='$target'$status>\";\n        $clickTagEnd = '</a>';\n    } else {\n        $swfParams = array();\n        $clickTag = '';\n        $clickTagEnd = '';\n    }\n\n    if (!empty($aBanner['parameters'])) {\n        $aAdParams = unserialize($aBanner['parameters']);\n        if (isset($aAdParams['swf']) && is_array($aAdParams['swf'])) {\n            // Converted SWF file, use paramters content\n            $swfParams = array();\n            $aBannerSwf = $aBanner;\n            // Set the flag to let _adRenderBuildClickUrl know that we're not using clickTAG\n            $aBannerSwf['noClickTag'] = true;\n            foreach ($aAdParams['swf'] as $iKey => $aSwf) {\n                $aBannerSwf['url'] = $aSwf['link'];\n                $swfParams[\"alink{$iKey}\"] = _adRenderBuildClickUrl($aBannerSwf, $zoneId, $source, $ct0, $logClick);\n                $swfParams[\"atar{$iKey}\"]  = $aSwf['tar'];\n            }\n        }\n    }\n    $fileUrl = _adRenderBuildFileUrl($aBanner, false);\n    $id = 'rv_swf_{random}';\n\n    $swfId = (!empty($aBanner['alt']) ? $aBanner['alt'] : 'Advertisement');\n    $swfId = 'id-' . preg_replace('/[a-z0-1]+/', '', strtolower($swfId));\n\n    $code = \"\n<div id='{$id}' style='display: inline;'>$altImageAdCode</div>\n<script type='text/javascript'><!--/\".\"/ <![CDATA[\n    var ox_swf = new FlashObject('{$fileUrl}', '{$swfId}', '{$width}', '{$height}', '{$pluginVersion}');\\n\";\n    foreach ($swfParams as $key => $value) {\n        // URL encode the value, but leave any Openads \"magic macros\" unescaped to allow substitution\n        $code .= \"    ox_swf.addVariable('{$key}', '\" . preg_replace('#%7B(.*?)%7D#', '{$1}', urlencode($value)) . \"');\\n\";\n    }\n    if (!empty($aBanner['transparent'])) {\n        $code .= \"    ox_swf.addParam('wmode','transparent');\\n\";\n    } else {\n        $code .= \"    ox_swf.addParam('wmode','opaque');\\n\";\n    }\n    $code .= \"    ox_swf.addParam('allowScriptAccess','always');\\n\";\n\n    if ($logView && $conf['logging']['adImpressions']) {\n        // Only render the log beacon if the user has the minumum required flash player version\n        // Otherwise log a fallback impression (if there is a fallback creative configured)\n        $code .= \"    ox_swf.write('{$id}', \".json_encode($logURL).\", \".json_encode($fallBackLogURL).\");\\n\";\n    } else {\n        $code .= \"    ox_swf.write('{$id}');\\n\";\n    }\n\n    $code .= \"/\".\"/ ]]> --></script>\";\n    if ($fallBackLogURL) {\n        $code .= '<noscript>' . _adRenderImageBeacon($aBanner, $zoneId, $source, $loc, $referer, $fallBackLogURL) . '</noscript>';\n    }\n    $bannerText = $withText && !empty($aBanner['bannertext']) ? \"<br />{$clickTag}{$aBanner['bannertext']}{$clickTagEnd}\" : '';\n\n    return $prepend . $code . $bannerText . $append;\n}\n\n/**\n * This function generates the code to show an \"HTML\" ad (usually 3rd party adserver code)\n *\n * @param array   $aBanner      The ad-array for the ad to render code for\n * @param int     $zoneId       The zone ID of the zone used to select this ad (if zone-selected)\n * @param string  $source       The \"source\" parameter passed into the adcall\n * @param string  $ct0          The 3rd party click tracking URL to redirect to after logging\n * @param int     $withText     Should \"text below banner\" be appended to the generated code\n * @param bookean $logClick     Should this click be logged (clicks in admin should not be logged)\n * @param boolean $logView      Should this view be logged (views in admin should not be logged\n *                              also - 3rd party callback logging should not be logged at view time)\n * @param boolean $useAlt       Should the backup file be used for this code\n * @param boolean $richMedia    Does this invocation method allow for serving 3rd party/html ads\n * @param string  $loc          The \"current page\" URL\n * @param string  $referer      The \"referring page\" URL\n *\n * @return string               The HTML to display this ad\n */\nfunction _adRenderHtml(&$aBanner, $zoneId=0, $source='', $ct0='', $withText=false, $logClick=true, $logView=true, $useAlt=false, $richMedia=true, $loc='', $referer='', $context=array())\n{\n    // This is a wrapper to the \"parent\" bannerTypeHtml function\n    $aConf = $GLOBALS['_MAX']['CONF'];\n    if (!function_exists('Plugin_BannerTypeHtml_delivery_adRender')) {\n        @include LIB_PATH . '/Extension/bannerTypeHtml/bannerTypeHtmlDelivery.php';\n    }\n    return Plugin_BannerTypeHtml_delivery_adRender($aBanner, $zoneId, $source, $ct0, $withText, $logClick, $logView, $useAlt, $richMedia, $loc, $referer);\n}\n\n/**\n * This function generates the code to show a \"text\" ad\n *\n * @param array   $aBanner      The ad-array for the ad to render code for\n * @param int     $zoneId       The zone ID of the zone used to select this ad (if zone-selected)\n * @param string  $source       The \"source\" parameter passed into the adcall\n * @param string  $ct0          The 3rd party click tracking URL to redirect to after logging\n * @param int     $withText     Should \"text below banner\" be appended to the generated code\n * @param bookean $logClick     Should this click be logged (clicks in admin should not be logged)\n * @param boolean $logView      Should this view be logged (views in admin should not be logged\n *                              also - 3rd party callback logging should not be logged at view time)\n * @param boolean $useAlt       Should the backup file be used for this code\n * @param boolean $richMedia    Does this invocation method allow for serving 3rd party/html ads\n * @param string  $loc          The \"current page\" URL\n * @param string  $referer      The \"referring page\" URL\n *\n * @return string               The HTML to display this ad\n */\nfunction _adRenderText(&$aBanner, $zoneId=0, $source='', $ct0='', $withText=false, $logClick=true, $logView=true, $useAlt=false, $richMedia=false, $loc='', $referer='', $context=array())\n{\n    // This is a wrapper to the \"parent\" bannerTypeHtml function\n    $aConf = $GLOBALS['_MAX']['CONF'];\n    if (!function_exists('Plugin_BannerTypeText_delivery_adRender')) {\n        @include LIB_PATH . '/Extension/bannerTypeText/bannerTypeTextDelivery.php';\n    }\n    return Plugin_BannerTypeText_delivery_adRender($aBanner, $zoneId, $source, $ct0, $withText, $logClick, $logView, $useAlt, $richMedia, $loc, $referer);\n}\n\n/**\n * This method builds the URL to an uploaded creative.\n *\n * @param array   $aBanner  The ad-array for the ad to render code for\n * @param boolean $useAlt   Should the backup file be used for this code\n * @param string  $params   Any additional parameters that should be passed to the creative\n * @return string   The URL to the creative\n */\nfunction _adRenderBuildFileUrl($aBanner, $useAlt = false, $params = '')\n{\n    $conf = $GLOBALS['_MAX']['CONF'];\n    $fileUrl = '';\n    if ($aBanner['type'] == 'url') {\n        $fileUrl = $useAlt ? $aBanner['alt_imageurl'] : $aBanner['imageurl'];\n        if (!empty($params)) {\n            $fileUrl .= \"?{$params}\";\n        }\n    } else {\n        $fileName = $useAlt ? $aBanner['alt_filename'] : $aBanner['filename'];\n        $params = !empty($params) ? $params : '';\n        if (!empty($fileName)) {\n            if ($aBanner['type'] == 'web') {\n                $fileUrl = _adRenderBuildImageUrlPrefix() . \"/{$fileName}\";\n                if (!empty($params)) {\n                    $fileUrl .= \"?{$params}\";\n                }\n            } elseif ($aBanner['type'] == 'sql') {\n                $fileUrl = MAX_commonGetDeliveryUrl($conf['file']['image']) . \"?filename={$fileName}&contenttype={$aBanner['contenttype']}\";\n                if (!empty($params)) {\n                    $fileUrl .= \"&{$params}\";\n                }\n            }\n        }\n    }\n    return $fileUrl;\n}\n\n/**\n * This function gets the server address and path for local images\n *\n * @return string The URL to access the images folder\n */\nfunction _adRenderBuildImageUrlPrefix()\n{\n    $conf = $GLOBALS['_MAX']['CONF'];\n    return $GLOBALS['_MAX']['SSL_REQUEST'] ? 'https://' . $conf['webpath']['imagesSSL'] : 'http://' .  $conf['webpath']['images'];\n}\n\n/**\n * This function builds the URL to the logging beacon\n *\n * @param array   $aBanner      The ad-array for the ad to render code for\n * @param int     $zoneId       The zone ID of the zone used to select this ad (if zone-selected)\n * @param string  $source       The \"source\" parameter passed into the adcall\n * @param string  $loc          The \"current page\" URL\n * @param string  $referer      The \"referring page\" URL\n * @param string  $amp          The seperator to use for joining parameters (&amp; is XHTML compliant\n *                              for when writing out to a page, & is necessary when redirecting directly\n * @return string  The logging beacon URL\n */\nfunction _adRenderBuildLogURL($aBanner, $zoneId = 0, $source = '', $loc = '', $referer = '', $amp = '&amp;', $fallBack = false)\n{\n    $conf = $GLOBALS['_MAX']['CONF'];\n    // If there is an OpenX->OpenX internal redirect, log both zones information\n    $delimiter = $GLOBALS['_MAX']['MAX_DELIVERY_MULTIPLE_DELIMITER'];\n\n    $logLastAction = (!empty($aBanner['viewwindow']) && !empty($aBanner['tracker_status'])) ? '1' : '';\n\n    if (!empty($GLOBALS['_MAX']['adChain'])) {\n        foreach ($GLOBALS['_MAX']['adChain'] as $index => $ad) {\n            $aBanner['ad_id'] .= $delimiter . $ad['ad_id'];\n            $aBanner['placement_id'] .= $delimiter . $ad['placement_id'];\n            $zoneId .= $delimiter . $ad['zoneid'];\n            $aBanner['block_ad'] .= $delimiter . $ad['block_ad'];\n            $aBanner['cap_ad'] .= $delimiter . $ad['cap_ad'];\n            $aBanner['session_cap_ad'] .= $delimiter . $ad['session_cap_ad'];\n            $aBanner['block_campaign'] .= $delimiter . $ad['block_campaign'];\n            $aBanner['cap_campaign'] .= $delimiter . $ad['cap_campaign'];\n            $aBanner['session_cap_campaign'] .= $delimiter . $ad['session_cap_campaign'];\n            $aBanner['block_zone'] .= $delimiter . $ad['block_zone'];\n            $aBanner['cap_zone'] .= $delimiter . $ad['cap_zone'];\n            $aBanner['session_cap_zone'] .= $delimiter . $ad['session_cap_zone'];\n            $logLastAction .= $delimiter . (!empty($ad['viewwindow']) && !empty($ad['tracker_status'])) ? '1' : '0';\n        }\n    }\n    $url = MAX_commonGetDeliveryUrl($conf['file']['log']);\n    $url .= \"?\" . $conf['var']['adId'] . \"=\" . $aBanner['ad_id'];\n    $url .= $amp . $conf['var']['campaignId'] . \"=\" . $aBanner['placement_id'];\n    $url .= $amp . $conf['var']['zoneId'] . \"=\" . $zoneId;\n    if (!empty($source)) $url .= $amp . $conf['var']['channel'] . \"=\" . $source;\n    if (!empty($aBanner['block_ad'])) $url .= $amp . $conf['var']['blockAd'] . \"=\" . $aBanner['block_ad'];\n    if (!empty($aBanner['cap_ad'])) $url .= $amp . $conf['var']['capAd'] . \"=\" . $aBanner['cap_ad'];\n    if (!empty($aBanner['session_cap_ad'])) $url .= $amp . $conf['var']['sessionCapAd'] . \"=\" . $aBanner['session_cap_ad'];\n    if (!empty($aBanner['block_campaign'])) $url .= $amp . $conf['var']['blockCampaign'] . \"=\" . $aBanner['block_campaign'];\n    if (!empty($aBanner['cap_campaign'])) $url .= $amp . $conf['var']['capCampaign'] . \"=\" . $aBanner['cap_campaign'];\n    if (!empty($aBanner['session_cap_campaign'])) $url .= $amp . $conf['var']['sessionCapCampaign'] . \"=\" . $aBanner['session_cap_campaign'];\n    if (!empty($aBanner['block_zone'])) $url .= $amp . $conf['var']['blockZone'] . \"=\" . $aBanner['block_zone'];\n    if (!empty($aBanner['cap_zone'])) $url .= $amp . $conf['var']['capZone'] . \"=\" . $aBanner['cap_zone'];\n    if (!empty($aBanner['session_cap_zone'])) $url .= $amp . $conf['var']['sessionCapZone'] . \"=\" . $aBanner['session_cap_zone'];\n    if (!empty($logLastAction)) $url .= $amp . $conf['var']['lastView'] . \"=\" . $logLastAction;\n    if (!empty($loc)) $url .= $amp . \"loc=\" . urlencode($loc);\n    if (!empty($referer)) $url .= $amp . \"referer=\" . urlencode($referer);\n    if (!empty($fallBack)) $url .= $amp . $conf['var']['fallBack'] . '=1';\n    $url .= $amp . \"cb={random}\";\n\n    // addUrlParams hook for plugins to add key=value pairs to the log/click URLs\n    $componentParams =  OX_Delivery_Common_hook('addUrlParams', array($aBanner));\n    if (!empty($componentParams) && is_array($componentParams)) {\n        foreach ($componentParams as $params) {\n            if (!empty($params) && is_array($params)) {\n                foreach ($params as $key => $value) {\n                    $url .= $amp . urlencode($key) . '=' . urlencode($value);\n                }\n            }\n        }\n    }\n    return $url;\n}\n\n/**\n * This function builds the HTML to display the 1x1 logging beacon\n *\n * @param array   $aBanner      The ad-array for the ad to render code for\n * @param int     $zoneId       The zone ID of the zone used to select this ad (if zone-selected)\n * @param string  $source       The \"source\" parameter passed into the adcall\n * @param string  $loc          The \"current page\" URL\n * @param string  $referer      The \"referring page\" URL\n * @param string  $logUrl       The log URL, if empty, it will be generated automatically (default)\n *\n * @return string   The HTML to show the 1x1 logging beacon\n */\nfunction _adRenderImageBeacon($aBanner, $zoneId = 0, $source = '', $loc = '', $referer = '', $logUrl = '')\n{\n    if (empty($logUrl)) {\n        $logUrl = _adRenderBuildLogURL($aBanner, $zoneId, $source, $loc, $referer, '&');\n    }\n    return MAX_adRenderImageBeacon($logUrl);\n}\n\n/**\n * This function builds the custom params string (the params string uses a custom delimiter to avoid problems\n * when passing in plain (non-url encoded) destination URLs\n *\n * @param array   $aBanner      The ad-array for the ad to render code for\n * @param int     $zoneId       The zone ID of the zone used to select this ad (if zone-selected)\n * @param string  $source       The \"source\" parameter passed into the adcall\n * @param string  $ct0          The 3rd party click tracking URL to redirect to after logging\n * @param bookean $logClick     Should this click be logged (clicks in admin should not be logged)\n * @param boolean $overrideDest Should the URL from the banner override a passed in destination?\n *\n * @return string The params string\n */\n\nfunction _adRenderBuildParams($aBanner, $zoneId=0, $source='', $ct0='', $logClick=true, $overrideDest=false)\n{\n    // HACK - sometimes $aBanner has the banner ID as bannerid, and others it is ad_id.  This needs\n    //  to be sorted in all parts of the application to reference ad_id rather than bannerid.\n    if (isset($aBanner['ad_id']) && empty($aBanner['bannerid'])) {\n        $aBanner['bannerid'] = $aBanner['ad_id'];\n    }\n\n    $conf = $GLOBALS['_MAX']['CONF'];\n    $delimiter = $GLOBALS['_MAX']['MAX_DELIVERY_MULTIPLE_DELIMITER'];\n\n    $logLastClick = (!empty($aBanner['clickwindow'])) ? '1' : '';\n    // If there is an OpenX->OpenX internal redirect, log both zones information\n    if (!empty($GLOBALS['_MAX']['adChain'])) {\n        foreach ($GLOBALS['_MAX']['adChain'] as $index => $ad) {\n            $aBanner['bannerid'] .= $delimiter . $ad['bannerid'];\n            $aBanner['placement_id'] .= $delimiter . $ad['placement_id'];\n            $zoneId .= $delimiter . $ad['zoneid'];\n            $logLastClick .= (!empty($aBanner['clickwindow'])) ? '1' : '0';\n        }\n    }\n\n    $maxparams = '';\n    if (!empty($aBanner['url']) || $overrideDest) {\n        // There is a link\n        $del = $conf['delivery']['ctDelimiter'];\n        $delnum = strlen($del);\n        $random = \"{$del}{$conf['var']['cacheBuster']}={random}\";\n        $bannerId = !empty($aBanner['bannerid']) ? \"{$del}{$conf['var']['adId']}={$aBanner['bannerid']}\" : '';\n        $zoneId = \"{$del}{$conf['var']['zoneId']}={$zoneId}\";\n        $source = !empty($source) ? \"{$del}source=\" . urlencode($source) : '';\n        $log = $logClick ? '' : \"{$del}{$conf['var']['logClick']}=no\";\n        // Determine the destination\n        $dest = !empty($aBanner['url']) ? $aBanner['url'] : '';\n        // If the passed in a ct0= value that is not a valid URL (simple checking), then ignore it\n        if (!empty($ct0) && strtolower(substr($ct0, 0, 4)) == 'http') {\n            // Append and urlencode, but allow magic macros\n            $dest = $ct0.preg_replace('/%7B(.*?)%7D/', '{$1}', urlencode($dest));\n        }\n        // Urlencode, but allow magic macros\n        $dest = preg_replace('/%7B(.*?)%7D/', '{$1}', urlencode($dest));\n\n        $maxdest = \"{$del}{$conf['var']['dest']}={$dest}\";\n\n        $log .= (!empty($logLastClick)) ? $del . $conf['var']['lastClick'] . '=' . $logLastClick : '';\n\n        $maxparams = $delnum . $bannerId . $zoneId . $source . $log . $random;\n        // addUrlParams hook for plugins to add key=value pairs to the log/click URLs\n        $componentParams =  OX_Delivery_Common_hook('addUrlParams', array($aBanner));\n        if (!empty($componentParams) && is_array($componentParams)) {\n            foreach ($componentParams as $params) {\n                if (!empty($params) && is_array($params)) {\n                    foreach ($params as $key => $value) {\n                        $maxparams .= $del . urlencode($key) . '=' . urlencode($value);\n                    }\n                }\n            }\n        }\n        $maxparams .= $maxdest;\n    }\n    return $maxparams;\n}\n\n/**\n * This function builds the Click through URL for this ad\n *\n * @param array   $aBanner      The ad-array for the ad to render code for\n * @param int     $zoneId       The zone ID of the zone used to select this ad (if zone-selected)\n * @param string  $source       The \"source\" parameter passed into the adcall\n * @param string  $ct0          The 3rd party click tracking URL to redirect to after logging\n * @param bookean $logClick     Should this click be logged (clicks in admin should not be logged)\n * @param boolean $overrideDest Should the URL from the banner override a passed in destination?\n *\n * @return string The click URL\n */\nfunction _adRenderBuildClickUrl($aBanner, $zoneId=0, $source='', $ct0='', $logClick=true, $overrideDest=false)\n{\n    $conf = $GLOBALS['_MAX']['CONF'];\n    $clickUrl = '';\n    if (is_string($logClick)) {\n        $clickUrl = $logClick;\n    } elseif (!empty($aBanner['url']) || $overrideDest) {\n        $clickUrl = MAX_commonGetDeliveryUrl($conf['file']['click']) . '?' . $conf['var']['params'] . '=' . _adRenderBuildParams($aBanner, $zoneId, $source, $ct0, $logClick, true);\n    }\n    return $clickUrl;\n}\n\n/**\n * Generate the Javascript onMouseOver self.status code to attempt to set the browser status bar text\n * Note: Most modern browsers prevent this feature\n *\n * @param array $aBanner The ad-array for the ad to generate status code for\n * @return string The\n */\nfunction _adRenderBuildStatusCode($aBanner)\n{\n    return !empty($aBanner['status']) ? \" onmouseover=\\\"self.status='\" . addslashes($aBanner['status']) . \"'; return true;\\\" onmouseout=\\\"self.status=''; return true;\\\"\" : '';\n\n}\n\n/**\n * Calculate the minimum plugin version required to display a file with\n * a certain SWF version. Until version 10, all that was needed was a plugin\n * with a matching major version, but until version 23 SWF and plugin\n * versions were following a \"custom\" scheme involving minor versions too.\n *\n * For more info:\n * http://sleepydesign.blogspot.it/2012/04/flash-swf-version-meaning.html\n * http://blogs.adobe.com/flashplayer/2013/11/new-version-numbering-2.html\n *\n * @param int $swfVersion\n * @return string\n */\nfunction _adRenderGetRealPluginVersion($swfVersion)\n{\n    if ($swfVersion <= 10) {\n        // SWF and plugin major matching\n        $pluginVersion = $swfVersion;\n    } elseif ($swfVersion >= 23) {\n        // No weird versioning anymore... at last, thanks Adobe! ;)\n        $pluginVersion = $swfVersion - 11;\n    } elseif ($swfVersion == 11 || $swfVersion == 12) {\n        // SWF11 -> 10.2, SWF12 -> 10.3\n        $pluginVersion = 10 + ($swfVersion - 9) / 10;\n    } elseif ($swfVersion >= 13 && $swfVersion <= 22) {\n        // SWF13 -> 11.0 until SWF22 -> 11.9\n        $pluginVersion = 11 + ($swfVersion - 13) / 10;\n    }\n\n    return (string)$pluginVersion;\n}\n\nfunction _getAdRenderFunction($aBanner, $richMedia = true)\n{\n    $functionName = false;\n    if (!empty($aBanner['ext_bannertype'])) {\n        return OX_Delivery_Common_getFunctionFromComponentIdentifier($aBanner['ext_bannertype'], 'adRender');\n    } else {\n        switch ($aBanner['contenttype']) {\n            case 'gif'  :\n            case 'jpeg' :\n            case 'png'  :\n                $functionName = '_adRenderImage';\n                break;\n            case 'swf'  :\n                if ($richMedia) {\n                    $functionName = '_adRenderFlash';\n                } else {\n                    $functionName = '_adRenderImage';\n                }\n                break;\n            case 'txt'  :\n                    $functionName = '_adRenderText';\n                break;\n            default :\n                switch ($aBanner['type']) {\n                    case 'html' :\n                        $functionName = '_adRenderHtml';\n                        break;\n                    case 'url' : // External banner without a recognised content type - assume image...\n                        $functionName = '_adRenderImage';\n                        break;\n                    case 'txt' :\n                        $functionName = '_adRenderText';\n                        break;\n                    default:\n                        $functionName = '_adRenderHtml';\n                        break;\n                }\n                break;\n        }\n    }\n    return $functionName;\n}\n\n?>\n", "{*<!--\n\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n\n-->*}\n{if $status == 'linked'}\n  {assign var=\"checkboxPrefix\" value=\"l\"}\n{else}\n  {assign var=\"checkboxPrefix\" value=\"a\"}\n{/if}\n\n\n<!--rows-{$status}-start-->\n{if !empty($topPager->links)}\n<span id=\"page-{$status}\" class=\"hide\">{$page}</span>\n<div class=\"tableWrapper topPagerContainer clearfix\">\n  <div class=\"pager topPager\">\n    {$topPager->links}\n  </div>\n</div>\n{/if}\n<table id=\"zones-{$status}\" class=\"zones new-table tableWrapper\">\n  <tbody>\n    <tr class=\"header hide\">\n      <th class=\"name\"><label><input type=\"checkbox\" id=\"{$status}-select-all\" class=\"checkbox select-all\" /> {t str=SelectUnselectAll}</label></th>\n      <th class=\"link\"></th>\n      {if !empty($showStats)}\n          <th class=\"ctr\">{t str=FinanceCTR}</th>\n          <th class=\"cr\">{t str=FinanceCR}</th>\n          <th class=\"ecpm last\">{t str=FinanceCPM}</th>\n      {/if}\n    </tr>\n  </tbody>\n\n  {if !empty($topPager->links)}\n  <tbody id=\"select-all-container-{$status}\" class=\"hide\">\n    <tr class=\"header\">\n      <th colspan=\"{$colspan}\">\n        <div id=\"zones-{$status}-select-all\" class=\"selectAllInAccount hide\">\n          All <em>{$zonescounts.showing}</em> zones on this page selected. <a href=\"#\">Select all <em>{$zonescounts.matching}</em> matching zones from this account.</a>\n        </div>\n        <div id=\"zones-{$status}-all-selected\" class=\"selectAllInAccount hide\">\n          All <em>{$zonescounts.matching}</em> matching zones from this account selected. <a href=\"#\">Clear selection</a></a>\n        </div>\n      </th>\n    </tr>\n  </tbody>\n  {/if}\n\n  <tbody id=\"zones-{$status}-rows\">\n    {foreach from=$websites key=websiteid item=website}\n    <tr class=\"website\">\n      <td class=\"name\" title=\"{$website.name|escape}\">\n        <label style=\"white-space: nowrap\">\n            <input id=\"{$checkboxPrefix}w{$websiteid}\"\n                   name=\"w{$websiteid}\" type=\"checkbox\" class=\"checkbox parent\" />{boldSearchPhrase text=$website.name search=$text}\n        </label>\n      </td>\n      <td class=\"link\">\n          <a title=\"{t str=EditWebsite} {$website.name}\" class=\"website-icon\" href=\"affiliate-edit.php?affiliateid={$websiteid}\">&nbsp;</a>\n      </td>\n      {if !empty($showStats)}\n          <td></td>\n          <td></td>\n          <td></td>\n      {/if}\n    </tr>\n\n      {foreach from=$website.zones key=zoneid item=zone}\n      <tr class=\"zone {if $aZonesIdHash[$zoneid]} just-linked{/if}\">\n        <td class=\"name\" title=\"{$zone.name|escape}\">\n        <label>\n            <input id=\"{$checkboxPrefix}w{$websiteid}_z{$zoneid}\"\n                   name=\"z{$zoneid}\" type=\"checkbox\" class=\"checkbox\" />\n            {boldSearchPhrase text=$zone.name search=$text}\n        </label>\n        </td>\n        <td class=\"link\">\n            <a title=\"{t str=EditZone} {$website.name}\" class=\"zone-icon\" href=\"zone-edit.php?affiliateid={$websiteid}&zoneid={$zoneid}\">&nbsp;</a>\n        </td>\n        {if !empty($showStats)}\n            {assign var=\"ctr\" value=\"`$zone.ctr*100`\"}\n            {assign var=\"cr\" value=\"`$zone.cr*100`\"}\n            <td {if $zone.campaign_stats}class=\"estim\"{/if}>{$ctr|string_format:\"%.3f\"}%</td>\n            <td {if $zone.campaign_stats}class=\"estim\"{/if}>{$cr|string_format:\"%.3f\"}%</td>\n            <td {if $zone.campaign_stats}class=\"estim\"{/if}>${$zone.ecpm|string_format:\"%.2f\"}</td>\n        {/if}\n      </tr>\n      {/foreach}\n\n    {foreachelse}\n    <tr class=\"empty\">\n      <td colspan=\"{$colspan}\">\n        {t str=NoWebsitesAndZones}\n        {if $text}\n          {t str=NoWebsitesAndZonesText values=$text|escape}\n        {/if}\n\n        {if $checkboxPrefix == 'a'}\n        {t str=ToLink}\n        {else}\n        {t str=ToUnlink}\n        {/if}\n      </td>\n    </tr>\n    {/foreach}\n  </tbody>\n  {if !empty($pager->links)}\n  <tfoot class=\"tableFooter\">\n      <tr>\n      <td  colspan=\"{$colspan}\">\n            <div class=\"pager\">\n              <span class=\"summary\">{$pager->summary}</span>\n              <span class=\"controls\">{$pager->links}</span>\n            </div>\n      </td>\n      </tr>\n  </tfoot>\n  {/if}\n\n</table>\n<!--rows-{$status}-end-->\n\n<!--status-{$status}-start-->\n  {if $status == 'linked'}\n  {t str=Linked}:\n  {else}\n  {t str=Available}:\n  {/if}\n  <span class=\"status-value\">{$zonescounts.all}</span><br />\n\n  {t str=Showing}: <span class=\"status-value\">{$zonescounts.showing}</span>\n<!--status-{$status}-end-->\n"], "fixing_code": ["<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\n/**\n * @package    MaxDelivery\n * @subpackage ad\n *\n * This library contains the functions to select and generate the HTML for an ad\n *\n * The code below makes several references to an \"ad-array\", this is /almost/ an ad-object, and implements\n * the following interface.\n *\n * Array\n *   (\n *       [ad_id] => 123\n *       [placement_id] => 4\n *       [active] => t\n *       [name] => Web Flash (With backup)\n *       [type] => web\n *       [contenttype] => swf\n *       [pluginversion] => 6\n *       [filename] => banner_468x60.swf\n *       [imageurl] =>\n *       [htmltemplate] =>\n *       [htmlcache] =>\n *       [width] => 468\n *       [height] => 60\n *       [weight] => 1\n *       [seq] => 0\n *       [target] => _blank\n *       [url] => http://www.example.net/landing_page/\n *       [alt] =>\n *       [status] =>\n *       [bannertext] =>\n *       [adserver] =>\n *       [block] => 0\n *       [capping] => 0\n *       [session_capping] => 0\n *       [compiledlimitation] =>\n *       [acl_plugins] =>\n *       [prepend] =>\n *       [append] =>\n *       [bannertype] => 0\n *       [alt_filename] => backup_banner_468x60.gif\n *       [alt_imageurl] =>\n *       [alt_contenttype] => gif\n *       [campaign_priority] => 5\n *       [campaign_weight] => 0\n *       [campaign_companion] => 0\n *       [priority] => 0.10989010989\n *       [zoneid] => 567\n *       [bannerid] => 123\n *       [storagetype] => web\n *       [campaignid] => 4\n *       [zone_companion] =>\n *       [prepend] =>\n *   )\n *\n */\n\n/**\n * This is the code that renders the HTML required to display an ad\n *\n * @param array   $aBanner      The array of banner properties for the banner to be rendered\n * @param int     $zoneId       The zone ID of the zone used to select this ad (if zone-selected)\n * @param string  $source       The \"source\" parameter passed into the adcall\n * @param string  $target       The target attribute for generated <a href> links\n * @param string  $ct0          The 3rd party click tracking URL to redirect to after logging\n * @param boolean $withtext     Should \"text below banner\" be appended to the generated code\n * @param string  $charset      Character set to convert the rendered output into\n * @param bookean $logClick     Should this click be logged (clicks in admin should not be logged)\n * @param boolean $logView      Should this view be logged (views in admin should not be logged\n *                              also - 3rd party callback logging should not be logged at view time)\n * @param boolean $richMedia    Does this invocation method allow for serving 3rd party/html ads\n * @param string  $loc          The \"current page\" URL\n * @param string  $referer      The \"referring page\" URL\n * @param array   $context      The context of this ad selection\n *                              - used for companion positioning\n *                              - and excluding banner/campaigns from this ad-call\n *\n * @return string   The HTML to display this ad\n */\nfunction MAX_adRender(&$aBanner, $zoneId=0, $source='', $target='', $ct0='', $withText=false, $charset = '', $logClick=true, $logView=true, $richMedia=true, $loc='', $referer='', &$context = array())\n{\n    $conf = $GLOBALS['_MAX']['CONF'];\n\n    // Sanitize these user-inputted variables before passing to the _adRenderX calls\n    if (empty($target)) {\n        $target = !empty($aBanner['target']) ? $aBanner['target'] : '_blank';\n    }\n    $target = htmlspecialchars($target, ENT_QUOTES);\n    $source = htmlspecialchars($source, ENT_QUOTES);\n\t$aBanner['bannerContent'] = \"\";\n\n\t// Pre adRender hook\n\tOX_Delivery_Common_hook('preAdRender', array(&$aBanner, &$zoneId, &$source, &$ct0, &$withText, &$logClick, &$logView, null, &$richMedia, &$loc, &$referer));\n\n\t$functionName = _getAdRenderFunction($aBanner, $richMedia);\n\t$code = OX_Delivery_Common_hook('adRender', array(&$aBanner, &$zoneId, &$source, &$ct0, &$withText, &$logClick, &$logView, null, &$richMedia, &$loc, &$referer), $functionName);\n\n    // Transform any code\n\n    // Get a timestamp\n    list($usec, $sec) = explode(' ', microtime());\n    $time = (float)$usec + (float)$sec;\n    // Get a random number\n    $random = MAX_getRandomNumber();\n    global $cookie_random;  // Temporary fix to get doubleclick tracking working (Bug # 88)\n    $cookie_random = $random;\n    // Get the click URL\n    $clickUrl = _adRenderBuildClickUrl($aBanner, $zoneId, $source, $ct0, $logClick, true);\n\t// Get URL prefix, stripping the traling slash\n    $urlPrefix = substr(MAX_commonGetDeliveryUrl(), 0, -1);\n\n    $code = str_replace('{clickurl}', $clickUrl, $code);  // This step needs to be done separately because {clickurl} can contain {random}...\n\n    if (strpos($code, '{logurl}') !== false) {\n        $logUrl = _adRenderBuildLogURL($aBanner, $zoneId, $source, $loc, $referer, '&');\n        $code = str_replace('{logurl}', $logUrl, $code);  // This step needs to be done separately because {logurl} does contain {random}...\n    }\n    if (strpos($code, '{logurl_enc}') !== false) {\n        $logUrl_enc = urlencode(_adRenderBuildLogURL($aBanner, $zoneId, $source, $loc, $referer, '&'));\n        $code = str_replace('{logurl_enc}', $logUrl_enc, $code);  // This step needs to be done separately because {logurl} does contain {random}...\n    }\n    if (strpos($code, '{clickurlparams}')) {\n        $maxparams = _adRenderBuildParams($aBanner, $zoneId, $source, urlencode($ct0), $logClick, true);\n        $code = str_replace('{clickurlparams}', $maxparams, $code);  // This step needs to be done separately because {clickurlparams} does contain {random}...\n    }\n    $search = array('{timestamp}','{random}','{target}','{url_prefix}','{bannerid}','{zoneid}','{source}', '{pageurl}', '{width}', '{height}', '{websiteid}', '{campaignid}', '{advertiserid}', '{referer}');\n    $locReplace = isset($GLOBALS['loc']) ? $GLOBALS['loc'] : '';\n    $websiteid = (!empty($aBanner['affiliate_id'])) ? $aBanner['affiliate_id'] : '0';\n    $replace = array($time, $random, $target, $urlPrefix, $aBanner['ad_id'], $zoneId, $source, urlencode($locReplace), $aBanner['width'], $aBanner['height'], $websiteid, $aBanner['campaign_id'], $aBanner['client_id'], $referer);\n\n    preg_match_all('#{(.*?)(_enc)?}#', $code, $macros);\n    for ($i=0;$i<count($macros[1]);$i++) {\n        if (!in_array($macros[0][$i], $search) && isset($_REQUEST[$macros[1][$i]])) {\n            $search[] = $macros[0][$i];\n            $replace[] = (!empty($macros[2][$i])) ? urlencode(stripslashes($_REQUEST[$macros[1][$i]])) : htmlspecialchars(stripslashes($_REQUEST[$macros[1][$i]]), ENT_QUOTES);\n        }\n    }\n    // addUrlParams hook for plugins to add key=value pairs to the log/click URLs\n    $componentParams =  OX_Delivery_Common_hook('addUrlParams', array($aBanner));\n    if (!empty($componentParams) && is_array($componentParams)) {\n        foreach ($componentParams as $params) {\n            if (!empty($params) && is_array($params)) {\n                foreach ($params as $key => $value) {\n                    $search[]  = '{' . $key . '}';\n                    $replace[] = urlencode($value);\n                }\n            }\n        }\n    }\n    $code = str_replace($search, $replace, $code);\n\n    $clickUrl = str_replace($search, $replace, $clickUrl);\n    $aBanner['clickUrl'] = $clickUrl;\n\n    // Now we can finally replace {clickurl_enc}\n    if (strpos($code, '{clickurl_enc}') !== false) {\n        $code = str_replace('{clickurl_enc}', urlencode($clickUrl), $code);\n    }\n\n    $logUrl = _adRenderBuildLogURL($aBanner, $zoneId, $source, $loc, $referer, '&');\n    $logUrl = str_replace($search, $replace, $logUrl);\n    $aBanner['logUrl'] = $logUrl;\n\n    // Pass over the search / replace patterns\n    $aBanner['aSearch']  = $search;\n    $aBanner['aReplace'] = $replace;\n\n\t// post adRender hook\n\tOX_Delivery_Common_hook('postAdRender', array(&$code, $aBanner, &$context));\n\n//    return $code;\n    return MAX_commonConvertEncoding($code, $charset);\n}\n\n/**\n * This function builds the HTML to display a 1x1 logging beacon\n *\n * @param string $logUrl    The log URL\n * @param string $beaconId  The ID of the HTML beacon tag, an underscore plus a random string will be appended\n * @param array  $userAgent The optional user agent, if null $_SERVER[HTTP_USER_AGENT]\n *                          will be used\n * @return string The HTML to show the 1x1 logging beacon\n */\nfunction MAX_adRenderImageBeacon($logUrl, $beaconId = 'beacon', $userAgent = null)\n{\n    if (!isset($userAgent) && isset($_SERVER['HTTP_USER_AGENT'])) {\n        $userAgent = $_SERVER['HTTP_USER_AGENT'];\n    }\n    $beaconId .= '_{random}';\n    // Add beacon image for logging\n    if (isset($userAgent) && preg_match(\"#Mozilla/(1|2|3|4)#\", $userAgent)\n        && !preg_match(\"#compatible#\", $userAgent)) {\n        $div = \"<layer id='{$beaconId}' width='0' height='0' border='0' visibility='hide'>\";\n        $style = '';\n        $divEnd = '</layer>';\n    } else {\n        $div = \"<div id='{$beaconId}' style='position: absolute; left: 0px; top: 0px; visibility: hidden;'>\";\n        $style = \" style='width: 0px; height: 0px;'\";\n        $divEnd = '</div>';\n    }\n        $beacon = \"$div<img src='\".htmlspecialchars($logUrl, ENT_QUOTES).\"' width='0' height='0' alt=''{$style} />{$divEnd}\";\n        return $beacon;\n}\n\n/**\n * This function builds the HTML code to display an \"image\" ad (e.g. GIF/JPG/PNG)\n *\n * @param array   $aBanner      The ad-array for the ad to render code for\n * @param int     $zoneId       The zone ID of the zone used to select this ad (if zone-selected)\n * @param string  $source       The \"source\" parameter passed into the adcall\n * @param string  $ct0          The 3rd party click tracking URL to redirect to after logging\n * @param int     $withText     Should \"text below banner\" be appended to the generated code\n * @param bookean $logClick     Should this click be logged (clicks in admin should not be logged)\n * @param boolean $logView      Should this view be logged (views in admin should not be logged\n *                              also - 3rd party callback logging should not be logged at view time)\n * @param boolean $useAlt       Should the backup file be used for this code\n * @param boolean $richMedia    Does this invocation method allow for serving 3rd party/html ads\n * @param string  $loc          The \"current page\" URL\n * @param string  $referer      The \"referring page\" URL\n * @param boolean $useAppend    Should any appended code appended to the banner be output?\n *\n * @return string               The HTML to display this ad\n */\nfunction _adRenderImage(&$aBanner, $zoneId=0, $source='', $ct0='', $withText=false, $logClick=true, $logView=true, $useAlt=false, $richMedia=true, $loc='', $referer='', $context=array(), $useAppend=true)\n{\n    $conf = $GLOBALS['_MAX']['CONF'];\n    $aBanner['bannerContent'] = $imageUrl = _adRenderBuildFileUrl($aBanner, $useAlt);\n\n    if (!$richMedia) {\n        return _adRenderBuildFileUrl($aBanner, $useAlt);\n    }\n    $prepend = (!empty($aBanner['prepend']) && $useAppend) ? $aBanner['prepend'] : '';\n    $append = (!empty($aBanner['append']) && $useAppend) ? $aBanner['append'] : '';\n\n    // Create the anchor tag..\n    $clickUrl = _adRenderBuildClickUrl($aBanner, $zoneId, $source, $ct0, $logClick);\n    if (!empty($clickUrl)) {  // There is a link\n        $status = _adRenderBuildStatusCode($aBanner);\n        //$target = !empty($aBanner['target']) ? $aBanner['target'] : '_blank';\n        $clickTag = \"<a href='\".htmlspecialchars($clickUrl, ENT_QUOTES).\"' target='{target}'$status>\";\n        $clickTagEnd = '</a>';\n    } else {\n        $clickTag = '';\n        $clickTagEnd = '';\n    }\n    // Create the image tag..\n    if (!empty($imageUrl)) {\n        $imgStatus = empty($clickTag) && !empty($status) ? $status : '';\n        $width = !empty($aBanner['width']) ? $aBanner['width'] : 0;\n        $height = !empty($aBanner['height']) ? $aBanner['height'] : 0;\n        $alt = !empty($aBanner['alt']) ? htmlspecialchars($aBanner['alt'], ENT_QUOTES) : '';\n        $imageTag = \"$clickTag<img src='\".htmlspecialchars($imageUrl, ENT_QUOTES).\"' width='$width' height='$height' alt='$alt' title='$alt' border='0'$imgStatus />$clickTagEnd\";\n    } else {\n        $imageTag = '';\n    }\n    // Get the text below the banner\n    $bannerText = $withText && !empty($aBanner['bannertext']) ? \"<br />$clickTag\" . htmlspecialchars($aBanner['bannertext'], ENT_QUOTES) . \"$clickTagEnd\" : '';\n    // Get the image beacon...\n    $beaconTag = ($logView && $conf['logging']['adImpressions']) ? _adRenderImageBeacon($aBanner, $zoneId, $source, $loc, $referer) : '';\n    return $prepend . $imageTag . $bannerText . $beaconTag . $append;\n}\n\n/**\n * This function generates the code to show a \"flash\" ad\n *\n * @param array   $aBanner      The ad-array for the ad to render code for\n * @param int     $zoneId       The zone ID of the zone used to select this ad (if zone-selected)\n * @param string  $source       The \"source\" parameter passed into the adcall\n * @param string  $ct0          The 3rd party click tracking URL to redirect to after logging\n * @param int     $withText     Should \"text below banner\" be appended to the generated code\n * @param bookean $logClick     Should this click be logged (clicks in admin should not be logged)\n * @param boolean $logView      Should this view be logged (views in admin should not be logged\n *                              also - 3rd party callback logging should not be logged at view time)\n * @param boolean $richMedia    Does this invocation method allow for serving 3rd party/html ads\n * @param string  $loc          The \"current page\" URL\n * @param string  $referer      The \"referring page\" URL\n *\n * @return string               The HTML to display this ad\n */\nfunction _adRenderFlash(&$aBanner, $zoneId=0, $source='', $ct0='', $withText=false, $logClick=true, $logView=true, $useAlt=false, $richMedia=true, $loc='', $referer='', $context=array())\n{\n    $conf = $GLOBALS['_MAX']['CONF'];\n    $prepend = !empty($aBanner['prepend']) ? $aBanner['prepend'] : '';\n    $append = !empty($aBanner['append']) ? $aBanner['append'] : '';\n    $width = !empty($aBanner['width']) ? $aBanner['width'] : 0;\n    $height = !empty($aBanner['height']) ? $aBanner['height'] : 0;\n    $pluginVersion = !empty($aBanner['pluginversion']) ? _adRenderGetRealPluginVersion($aBanner['pluginversion']) : '4';\n    $logURL = _adRenderBuildLogURL($aBanner, $zoneId, $source, $loc, $referer, '&');\n\n    if (!empty($aBanner['alt_filename']) || !empty($aBanner['alt_imageurl'])) {\n        $altImageAdCode = _adRenderImage($aBanner, $zoneId, $source, $ct0, false, $logClick, false, true, true, $loc, $referer, $context, false);\n        $fallBackLogURL = _adRenderBuildLogURL($aBanner, $zoneId, $source, $loc, $referer, '&', true);\n    } else {\n        $alt = !empty($aBanner['alt']) ? htmlspecialchars($aBanner['alt'], ENT_QUOTES) : '';\n        $altImageAdCode = \"<img src='\" . _adRenderBuildImageUrlPrefix() . '/1x1.gif' . \"' alt='\".$alt.\"' title='\".$alt.\"' border='0' />\";\n\n        if ($zoneId) {\n            // Log a blank impression instead\n            $fallBackLogURL = _adRenderBuildLogURL(array(\n                    'ad_id' => 0,\n                    'placement_id' => 0,\n                ), $zoneId, $source, $loc, $referer, '&', true);\n        } else {\n            // No zone, skip logging\n            $fallBackLogURL = false;\n        }\n    }\n\n    // Create the anchor tag..\n    $clickUrl = _adRenderBuildClickUrl($aBanner, $zoneId, $source, $ct0, $logClick);\n    if (!empty($clickUrl)) {  // There is a link\n        $status = _adRenderBuildStatusCode($aBanner);\n        $target = !empty($aBanner['target']) ? $aBanner['target'] : '_blank';\n        $swfParams = array('clickTARGET' => $target, 'clickTAG' => $clickUrl);\n        $clickTag = \"<a href='\".htmlspecialchars($clickUrl, ENT_QUOTES).\"' target='$target'$status>\";\n        $clickTagEnd = '</a>';\n    } else {\n        $swfParams = array();\n        $clickTag = '';\n        $clickTagEnd = '';\n    }\n\n    if (!empty($aBanner['parameters'])) {\n        $aAdParams = unserialize($aBanner['parameters']);\n        if (isset($aAdParams['swf']) && is_array($aAdParams['swf'])) {\n            // Converted SWF file, use paramters content\n            $swfParams = array();\n            $aBannerSwf = $aBanner;\n            // Set the flag to let _adRenderBuildClickUrl know that we're not using clickTAG\n            $aBannerSwf['noClickTag'] = true;\n            foreach ($aAdParams['swf'] as $iKey => $aSwf) {\n                $aBannerSwf['url'] = $aSwf['link'];\n                $swfParams[\"alink{$iKey}\"] = _adRenderBuildClickUrl($aBannerSwf, $zoneId, $source, $ct0, $logClick);\n                $swfParams[\"atar{$iKey}\"]  = $aSwf['tar'];\n            }\n        }\n    }\n    $fileUrl = _adRenderBuildFileUrl($aBanner, false);\n    $id = 'rv_swf_{random}';\n\n    $swfId = (!empty($aBanner['alt']) ? $aBanner['alt'] : 'Advertisement');\n    $swfId = 'id-' . preg_replace('/[a-z0-1]+/', '', strtolower($swfId));\n\n    $code = \"\n<div id='{$id}' style='display: inline;'>$altImageAdCode</div>\n<script type='text/javascript'><!--/\".\"/ <![CDATA[\n    var ox_swf = new FlashObject('{$fileUrl}', '{$swfId}', '{$width}', '{$height}', '{$pluginVersion}');\\n\";\n    foreach ($swfParams as $key => $value) {\n        // URL encode the value, but leave any Openads \"magic macros\" unescaped to allow substitution\n        $code .= \"    ox_swf.addVariable('{$key}', '\" . preg_replace('#%7B(.*?)%7D#', '{$1}', urlencode($value)) . \"');\\n\";\n    }\n    if (!empty($aBanner['transparent'])) {\n        $code .= \"    ox_swf.addParam('wmode','transparent');\\n\";\n    } else {\n        $code .= \"    ox_swf.addParam('wmode','opaque');\\n\";\n    }\n    $code .= \"    ox_swf.addParam('allowScriptAccess','always');\\n\";\n\n    if ($logView && $conf['logging']['adImpressions']) {\n        // Only render the log beacon if the user has the minumum required flash player version\n        // Otherwise log a fallback impression (if there is a fallback creative configured)\n        $code .= \"    ox_swf.write('{$id}', \".json_encode($logURL).\", \".json_encode($fallBackLogURL).\");\\n\";\n    } else {\n        $code .= \"    ox_swf.write('{$id}');\\n\";\n    }\n\n    $code .= \"/\".\"/ ]]> --></script>\";\n    if ($fallBackLogURL) {\n        $code .= '<noscript>' . _adRenderImageBeacon($aBanner, $zoneId, $source, $loc, $referer, $fallBackLogURL) . '</noscript>';\n    }\n    $bannerText = $withText && !empty($aBanner['bannertext']) ? \"<br />{$clickTag}{$aBanner['bannertext']}{$clickTagEnd}\" : '';\n\n    return $prepend . $code . $bannerText . $append;\n}\n\n/**\n * This function generates the code to show an \"HTML\" ad (usually 3rd party adserver code)\n *\n * @param array   $aBanner      The ad-array for the ad to render code for\n * @param int     $zoneId       The zone ID of the zone used to select this ad (if zone-selected)\n * @param string  $source       The \"source\" parameter passed into the adcall\n * @param string  $ct0          The 3rd party click tracking URL to redirect to after logging\n * @param int     $withText     Should \"text below banner\" be appended to the generated code\n * @param bookean $logClick     Should this click be logged (clicks in admin should not be logged)\n * @param boolean $logView      Should this view be logged (views in admin should not be logged\n *                              also - 3rd party callback logging should not be logged at view time)\n * @param boolean $useAlt       Should the backup file be used for this code\n * @param boolean $richMedia    Does this invocation method allow for serving 3rd party/html ads\n * @param string  $loc          The \"current page\" URL\n * @param string  $referer      The \"referring page\" URL\n *\n * @return string               The HTML to display this ad\n */\nfunction _adRenderHtml(&$aBanner, $zoneId=0, $source='', $ct0='', $withText=false, $logClick=true, $logView=true, $useAlt=false, $richMedia=true, $loc='', $referer='', $context=array())\n{\n    // This is a wrapper to the \"parent\" bannerTypeHtml function\n    $aConf = $GLOBALS['_MAX']['CONF'];\n    if (!function_exists('Plugin_BannerTypeHtml_delivery_adRender')) {\n        @include LIB_PATH . '/Extension/bannerTypeHtml/bannerTypeHtmlDelivery.php';\n    }\n    return Plugin_BannerTypeHtml_delivery_adRender($aBanner, $zoneId, $source, $ct0, $withText, $logClick, $logView, $useAlt, $richMedia, $loc, $referer);\n}\n\n/**\n * This function generates the code to show a \"text\" ad\n *\n * @param array   $aBanner      The ad-array for the ad to render code for\n * @param int     $zoneId       The zone ID of the zone used to select this ad (if zone-selected)\n * @param string  $source       The \"source\" parameter passed into the adcall\n * @param string  $ct0          The 3rd party click tracking URL to redirect to after logging\n * @param int     $withText     Should \"text below banner\" be appended to the generated code\n * @param bookean $logClick     Should this click be logged (clicks in admin should not be logged)\n * @param boolean $logView      Should this view be logged (views in admin should not be logged\n *                              also - 3rd party callback logging should not be logged at view time)\n * @param boolean $useAlt       Should the backup file be used for this code\n * @param boolean $richMedia    Does this invocation method allow for serving 3rd party/html ads\n * @param string  $loc          The \"current page\" URL\n * @param string  $referer      The \"referring page\" URL\n *\n * @return string               The HTML to display this ad\n */\nfunction _adRenderText(&$aBanner, $zoneId=0, $source='', $ct0='', $withText=false, $logClick=true, $logView=true, $useAlt=false, $richMedia=false, $loc='', $referer='', $context=array())\n{\n    // This is a wrapper to the \"parent\" bannerTypeHtml function\n    $aConf = $GLOBALS['_MAX']['CONF'];\n    if (!function_exists('Plugin_BannerTypeText_delivery_adRender')) {\n        @include LIB_PATH . '/Extension/bannerTypeText/bannerTypeTextDelivery.php';\n    }\n    return Plugin_BannerTypeText_delivery_adRender($aBanner, $zoneId, $source, $ct0, $withText, $logClick, $logView, $useAlt, $richMedia, $loc, $referer);\n}\n\n/**\n * This method builds the URL to an uploaded creative.\n *\n * @param array   $aBanner  The ad-array for the ad to render code for\n * @param boolean $useAlt   Should the backup file be used for this code\n * @param string  $params   Any additional parameters that should be passed to the creative\n * @return string   The URL to the creative\n */\nfunction _adRenderBuildFileUrl($aBanner, $useAlt = false, $params = '')\n{\n    $conf = $GLOBALS['_MAX']['CONF'];\n    $fileUrl = '';\n    if ($aBanner['type'] == 'url') {\n        $fileUrl = $useAlt ? $aBanner['alt_imageurl'] : $aBanner['imageurl'];\n        if (!empty($params)) {\n            $fileUrl .= \"?{$params}\";\n        }\n    } else {\n        $fileName = $useAlt ? $aBanner['alt_filename'] : $aBanner['filename'];\n        $params = !empty($params) ? $params : '';\n        if (!empty($fileName)) {\n            if ($aBanner['type'] == 'web') {\n                $fileUrl = _adRenderBuildImageUrlPrefix() . \"/{$fileName}\";\n                if (!empty($params)) {\n                    $fileUrl .= \"?{$params}\";\n                }\n            } elseif ($aBanner['type'] == 'sql') {\n                $fileUrl = MAX_commonGetDeliveryUrl($conf['file']['image']) . \"?filename={$fileName}&contenttype={$aBanner['contenttype']}\";\n                if (!empty($params)) {\n                    $fileUrl .= \"&{$params}\";\n                }\n            }\n        }\n    }\n    return $fileUrl;\n}\n\n/**\n * This function gets the server address and path for local images\n *\n * @return string The URL to access the images folder\n */\nfunction _adRenderBuildImageUrlPrefix()\n{\n    $conf = $GLOBALS['_MAX']['CONF'];\n    return $GLOBALS['_MAX']['SSL_REQUEST'] ? 'https://' . $conf['webpath']['imagesSSL'] : 'http://' .  $conf['webpath']['images'];\n}\n\n/**\n * This function builds the URL to the logging beacon\n *\n * @param array   $aBanner      The ad-array for the ad to render code for\n * @param int     $zoneId       The zone ID of the zone used to select this ad (if zone-selected)\n * @param string  $source       The \"source\" parameter passed into the adcall\n * @param string  $loc          The \"current page\" URL\n * @param string  $referer      The \"referring page\" URL\n * @param string  $amp          The seperator to use for joining parameters (&amp; is XHTML compliant\n *                              for when writing out to a page, & is necessary when redirecting directly\n * @return string  The logging beacon URL\n */\nfunction _adRenderBuildLogURL($aBanner, $zoneId = 0, $source = '', $loc = '', $referer = '', $amp = '&amp;', $fallBack = false)\n{\n    $conf = $GLOBALS['_MAX']['CONF'];\n    // If there is an OpenX->OpenX internal redirect, log both zones information\n    $delimiter = $GLOBALS['_MAX']['MAX_DELIVERY_MULTIPLE_DELIMITER'];\n\n    $logLastAction = (!empty($aBanner['viewwindow']) && !empty($aBanner['tracker_status'])) ? '1' : '';\n\n    if (!empty($GLOBALS['_MAX']['adChain'])) {\n        foreach ($GLOBALS['_MAX']['adChain'] as $index => $ad) {\n            $aBanner['ad_id'] .= $delimiter . $ad['ad_id'];\n            $aBanner['placement_id'] .= $delimiter . $ad['placement_id'];\n            $zoneId .= $delimiter . $ad['zoneid'];\n            $aBanner['block_ad'] .= $delimiter . $ad['block_ad'];\n            $aBanner['cap_ad'] .= $delimiter . $ad['cap_ad'];\n            $aBanner['session_cap_ad'] .= $delimiter . $ad['session_cap_ad'];\n            $aBanner['block_campaign'] .= $delimiter . $ad['block_campaign'];\n            $aBanner['cap_campaign'] .= $delimiter . $ad['cap_campaign'];\n            $aBanner['session_cap_campaign'] .= $delimiter . $ad['session_cap_campaign'];\n            $aBanner['block_zone'] .= $delimiter . $ad['block_zone'];\n            $aBanner['cap_zone'] .= $delimiter . $ad['cap_zone'];\n            $aBanner['session_cap_zone'] .= $delimiter . $ad['session_cap_zone'];\n            $logLastAction .= $delimiter . (!empty($ad['viewwindow']) && !empty($ad['tracker_status'])) ? '1' : '0';\n        }\n    }\n    $url = MAX_commonGetDeliveryUrl($conf['file']['log']);\n    $url .= \"?\" . $conf['var']['adId'] . \"=\" . $aBanner['ad_id'];\n    $url .= $amp . $conf['var']['campaignId'] . \"=\" . $aBanner['placement_id'];\n    $url .= $amp . $conf['var']['zoneId'] . \"=\" . $zoneId;\n    if (!empty($source)) $url .= $amp . $conf['var']['channel'] . \"=\" . $source;\n    if (!empty($aBanner['block_ad'])) $url .= $amp . $conf['var']['blockAd'] . \"=\" . $aBanner['block_ad'];\n    if (!empty($aBanner['cap_ad'])) $url .= $amp . $conf['var']['capAd'] . \"=\" . $aBanner['cap_ad'];\n    if (!empty($aBanner['session_cap_ad'])) $url .= $amp . $conf['var']['sessionCapAd'] . \"=\" . $aBanner['session_cap_ad'];\n    if (!empty($aBanner['block_campaign'])) $url .= $amp . $conf['var']['blockCampaign'] . \"=\" . $aBanner['block_campaign'];\n    if (!empty($aBanner['cap_campaign'])) $url .= $amp . $conf['var']['capCampaign'] . \"=\" . $aBanner['cap_campaign'];\n    if (!empty($aBanner['session_cap_campaign'])) $url .= $amp . $conf['var']['sessionCapCampaign'] . \"=\" . $aBanner['session_cap_campaign'];\n    if (!empty($aBanner['block_zone'])) $url .= $amp . $conf['var']['blockZone'] . \"=\" . $aBanner['block_zone'];\n    if (!empty($aBanner['cap_zone'])) $url .= $amp . $conf['var']['capZone'] . \"=\" . $aBanner['cap_zone'];\n    if (!empty($aBanner['session_cap_zone'])) $url .= $amp . $conf['var']['sessionCapZone'] . \"=\" . $aBanner['session_cap_zone'];\n    if (!empty($logLastAction)) $url .= $amp . $conf['var']['lastView'] . \"=\" . $logLastAction;\n    if (!empty($loc)) $url .= $amp . \"loc=\" . urlencode($loc);\n    if (!empty($referer)) $url .= $amp . \"referer=\" . urlencode($referer);\n    if (!empty($fallBack)) $url .= $amp . $conf['var']['fallBack'] . '=1';\n    $url .= $amp . \"cb={random}\";\n\n    // addUrlParams hook for plugins to add key=value pairs to the log/click URLs\n    $componentParams =  OX_Delivery_Common_hook('addUrlParams', array($aBanner));\n    if (!empty($componentParams) && is_array($componentParams)) {\n        foreach ($componentParams as $params) {\n            if (!empty($params) && is_array($params)) {\n                foreach ($params as $key => $value) {\n                    $url .= $amp . urlencode($key) . '=' . urlencode($value);\n                }\n            }\n        }\n    }\n    return $url;\n}\n\n/**\n * This function builds the HTML to display the 1x1 logging beacon\n *\n * @param array   $aBanner      The ad-array for the ad to render code for\n * @param int     $zoneId       The zone ID of the zone used to select this ad (if zone-selected)\n * @param string  $source       The \"source\" parameter passed into the adcall\n * @param string  $loc          The \"current page\" URL\n * @param string  $referer      The \"referring page\" URL\n * @param string  $logUrl       The log URL, if empty, it will be generated automatically (default)\n *\n * @return string   The HTML to show the 1x1 logging beacon\n */\nfunction _adRenderImageBeacon($aBanner, $zoneId = 0, $source = '', $loc = '', $referer = '', $logUrl = '')\n{\n    if (empty($logUrl)) {\n        $logUrl = _adRenderBuildLogURL($aBanner, $zoneId, $source, $loc, $referer, '&');\n    }\n    return MAX_adRenderImageBeacon($logUrl);\n}\n\n/**\n * This function builds the custom params string (the params string uses a custom delimiter to avoid problems\n * when passing in plain (non-url encoded) destination URLs\n *\n * @param array   $aBanner      The ad-array for the ad to render code for\n * @param int     $zoneId       The zone ID of the zone used to select this ad (if zone-selected)\n * @param string  $source       The \"source\" parameter passed into the adcall\n * @param string  $ct0          The 3rd party click tracking URL to redirect to after logging\n * @param bookean $logClick     Should this click be logged (clicks in admin should not be logged)\n * @param boolean $overrideDest Should the URL from the banner override a passed in destination?\n *\n * @return string The params string\n */\n\nfunction _adRenderBuildParams($aBanner, $zoneId=0, $source='', $ct0='', $logClick=true, $overrideDest=false)\n{\n    // HACK - sometimes $aBanner has the banner ID as bannerid, and others it is ad_id.  This needs\n    //  to be sorted in all parts of the application to reference ad_id rather than bannerid.\n    if (isset($aBanner['ad_id']) && empty($aBanner['bannerid'])) {\n        $aBanner['bannerid'] = $aBanner['ad_id'];\n    }\n\n    $conf = $GLOBALS['_MAX']['CONF'];\n    $delimiter = $GLOBALS['_MAX']['MAX_DELIVERY_MULTIPLE_DELIMITER'];\n\n    $logLastClick = (!empty($aBanner['clickwindow'])) ? '1' : '';\n    // If there is an OpenX->OpenX internal redirect, log both zones information\n    if (!empty($GLOBALS['_MAX']['adChain'])) {\n        foreach ($GLOBALS['_MAX']['adChain'] as $index => $ad) {\n            $aBanner['bannerid'] .= $delimiter . $ad['bannerid'];\n            $aBanner['placement_id'] .= $delimiter . $ad['placement_id'];\n            $zoneId .= $delimiter . $ad['zoneid'];\n            $logLastClick .= (!empty($aBanner['clickwindow'])) ? '1' : '0';\n        }\n    }\n\n    $maxparams = '';\n    if (!empty($aBanner['url']) || $overrideDest) {\n        // There is a link\n        $del = $conf['delivery']['ctDelimiter'];\n        $delnum = strlen($del);\n        $random = \"{$del}{$conf['var']['cacheBuster']}={random}\";\n        $bannerId = !empty($aBanner['bannerid']) ? \"{$del}{$conf['var']['adId']}={$aBanner['bannerid']}\" : '';\n        $zoneId = \"{$del}{$conf['var']['zoneId']}={$zoneId}\";\n        $source = !empty($source) ? \"{$del}source=\" . urlencode($source) : '';\n        $log = $logClick ? '' : \"{$del}{$conf['var']['logClick']}=no\";\n        // Determine the destination\n        $dest = !empty($aBanner['url']) ? $aBanner['url'] : '';\n        // If the passed in a ct0= value that is not a valid URL (simple checking), then ignore it\n        if (!empty($ct0) && strtolower(substr($ct0, 0, 4)) == 'http') {\n            // Append and urlencode, but allow magic macros\n            $dest = $ct0.preg_replace('/%7B(.*?)%7D/', '{$1}', urlencode($dest));\n        }\n        // Urlencode, but allow magic macros\n        $dest = preg_replace('/%7B(.*?)%7D/', '{$1}', urlencode($dest));\n\n        $maxdest = \"{$del}{$conf['var']['dest']}={$dest}\";\n\n        $log .= (!empty($logLastClick)) ? $del . $conf['var']['lastClick'] . '=' . $logLastClick : '';\n\n        $maxparams = $delnum . $bannerId . $zoneId . $source . $log . $random;\n        // addUrlParams hook for plugins to add key=value pairs to the log/click URLs\n        $componentParams =  OX_Delivery_Common_hook('addUrlParams', array($aBanner));\n        if (!empty($componentParams) && is_array($componentParams)) {\n            foreach ($componentParams as $params) {\n                if (!empty($params) && is_array($params)) {\n                    foreach ($params as $key => $value) {\n                        $maxparams .= $del . urlencode($key) . '=' . urlencode($value);\n                    }\n                }\n            }\n        }\n        $maxparams .= $maxdest;\n    }\n    return $maxparams;\n}\n\n/**\n * This function builds the Click through URL for this ad\n *\n * @param array   $aBanner      The ad-array for the ad to render code for\n * @param int     $zoneId       The zone ID of the zone used to select this ad (if zone-selected)\n * @param string  $source       The \"source\" parameter passed into the adcall\n * @param string  $ct0          The 3rd party click tracking URL to redirect to after logging\n * @param bookean $logClick     Should this click be logged (clicks in admin should not be logged)\n * @param boolean $overrideDest Should the URL from the banner override a passed in destination?\n *\n * @return string The click URL\n */\nfunction _adRenderBuildClickUrl($aBanner, $zoneId=0, $source='', $ct0='', $logClick=true, $overrideDest=false)\n{\n    $conf = $GLOBALS['_MAX']['CONF'];\n    $clickUrl = '';\n    if (is_string($logClick)) {\n        $clickUrl = $logClick;\n    } elseif (!empty($aBanner['url']) || $overrideDest) {\n        $clickUrl = MAX_commonGetDeliveryUrl($conf['file']['click']) . '?' . $conf['var']['params'] . '=' . _adRenderBuildParams($aBanner, $zoneId, $source, $ct0, $logClick, true);\n    }\n    return $clickUrl;\n}\n\n/**\n * Generate the Javascript onMouseOver self.status code to attempt to set the browser status bar text\n * Note: Most modern browsers prevent this feature\n *\n * @param array $aBanner The ad-array for the ad to generate status code for\n * @return string The\n */\nfunction _adRenderBuildStatusCode($aBanner)\n{\n    return !empty($aBanner['status']) ? \" onmouseover=\\\"self.status='\" . addslashes($aBanner['status']) . \"'; return true;\\\" onmouseout=\\\"self.status=''; return true;\\\"\" : '';\n\n}\n\n/**\n * Calculate the minimum plugin version required to display a file with\n * a certain SWF version. Until version 10, all that was needed was a plugin\n * with a matching major version, but until version 23 SWF and plugin\n * versions were following a \"custom\" scheme involving minor versions too.\n *\n * For more info:\n * http://sleepydesign.blogspot.it/2012/04/flash-swf-version-meaning.html\n * http://blogs.adobe.com/flashplayer/2013/11/new-version-numbering-2.html\n *\n * @param int $swfVersion\n * @return string\n */\nfunction _adRenderGetRealPluginVersion($swfVersion)\n{\n    if ($swfVersion <= 10) {\n        // SWF and plugin major matching\n        $pluginVersion = $swfVersion;\n    } elseif ($swfVersion >= 23) {\n        // No weird versioning anymore... at last, thanks Adobe! ;)\n        $pluginVersion = $swfVersion - 11;\n    } elseif ($swfVersion == 11 || $swfVersion == 12) {\n        // SWF11 -> 10.2, SWF12 -> 10.3\n        $pluginVersion = 10 + ($swfVersion - 9) / 10;\n    } elseif ($swfVersion >= 13 && $swfVersion <= 22) {\n        // SWF13 -> 11.0 until SWF22 -> 11.9\n        $pluginVersion = 11 + ($swfVersion - 13) / 10;\n    }\n\n    return (string)$pluginVersion;\n}\n\nfunction _getAdRenderFunction($aBanner, $richMedia = true)\n{\n    $functionName = false;\n    if (!empty($aBanner['ext_bannertype'])) {\n        return OX_Delivery_Common_getFunctionFromComponentIdentifier($aBanner['ext_bannertype'], 'adRender');\n    } else {\n        switch ($aBanner['contenttype']) {\n            case 'gif'  :\n            case 'jpeg' :\n            case 'png'  :\n                $functionName = '_adRenderImage';\n                break;\n            case 'swf'  :\n                if ($richMedia) {\n                    $functionName = '_adRenderFlash';\n                } else {\n                    $functionName = '_adRenderImage';\n                }\n                break;\n            case 'txt'  :\n                    $functionName = '_adRenderText';\n                break;\n            default :\n                switch ($aBanner['type']) {\n                    case 'html' :\n                        $functionName = '_adRenderHtml';\n                        break;\n                    case 'url' : // External banner without a recognised content type - assume image...\n                        $functionName = '_adRenderImage';\n                        break;\n                    case 'txt' :\n                        $functionName = '_adRenderText';\n                        break;\n                    default:\n                        $functionName = '_adRenderHtml';\n                        break;\n                }\n                break;\n        }\n    }\n    return $functionName;\n}\n\n?>\n", "{*<!--\n\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n\n-->*}\n{if $status == 'linked'}\n  {assign var=\"checkboxPrefix\" value=\"l\"}\n{else}\n  {assign var=\"checkboxPrefix\" value=\"a\"}\n{/if}\n\n\n<!--rows-{$status}-start-->\n{if !empty($topPager->links)}\n<span id=\"page-{$status}\" class=\"hide\">{$page}</span>\n<div class=\"tableWrapper topPagerContainer clearfix\">\n  <div class=\"pager topPager\">\n    {$topPager->links}\n  </div>\n</div>\n{/if}\n<table id=\"zones-{$status}\" class=\"zones new-table tableWrapper\">\n  <tbody>\n    <tr class=\"header hide\">\n      <th class=\"name\"><label><input type=\"checkbox\" id=\"{$status}-select-all\" class=\"checkbox select-all\" /> {t str=SelectUnselectAll}</label></th>\n      <th class=\"link\"></th>\n      {if !empty($showStats)}\n          <th class=\"ctr\">{t str=FinanceCTR}</th>\n          <th class=\"cr\">{t str=FinanceCR}</th>\n          <th class=\"ecpm last\">{t str=FinanceCPM}</th>\n      {/if}\n    </tr>\n  </tbody>\n\n  {if !empty($topPager->links)}\n  <tbody id=\"select-all-container-{$status}\" class=\"hide\">\n    <tr class=\"header\">\n      <th colspan=\"{$colspan}\">\n        <div id=\"zones-{$status}-select-all\" class=\"selectAllInAccount hide\">\n          All <em>{$zonescounts.showing}</em> zones on this page selected. <a href=\"#\">Select all <em>{$zonescounts.matching}</em> matching zones from this account.</a>\n        </div>\n        <div id=\"zones-{$status}-all-selected\" class=\"selectAllInAccount hide\">\n          All <em>{$zonescounts.matching}</em> matching zones from this account selected. <a href=\"#\">Clear selection</a></a>\n        </div>\n      </th>\n    </tr>\n  </tbody>\n  {/if}\n\n  <tbody id=\"zones-{$status}-rows\">\n    {foreach from=$websites key=websiteid item=website}\n    <tr class=\"website\">\n      <td class=\"name\" title=\"{$website.name|escape}\">\n        <label style=\"white-space: nowrap\">\n            <input id=\"{$checkboxPrefix}w{$websiteid}\"\n                   name=\"w{$websiteid}\" type=\"checkbox\" class=\"checkbox parent\" />{boldSearchPhrase text=$website.name search=$text}\n        </label>\n      </td>\n      <td class=\"link\">\n          <a title=\"{t str=EditWebsite} {$website.name|escape}\" class=\"website-icon\" href=\"affiliate-edit.php?affiliateid={$websiteid}\">&nbsp;</a>\n      </td>\n      {if !empty($showStats)}\n          <td></td>\n          <td></td>\n          <td></td>\n      {/if}\n    </tr>\n\n      {foreach from=$website.zones key=zoneid item=zone}\n      <tr class=\"zone {if $aZonesIdHash[$zoneid]} just-linked{/if}\">\n        <td class=\"name\" title=\"{$zone.name|escape}\">\n        <label>\n            <input id=\"{$checkboxPrefix}w{$websiteid}_z{$zoneid}\"\n                   name=\"z{$zoneid}\" type=\"checkbox\" class=\"checkbox\" />\n            {boldSearchPhrase text=$zone.name search=$text}\n        </label>\n        </td>\n        <td class=\"link\">\n            <a title=\"{t str=EditZone} {$website.name|escape}\" class=\"zone-icon\" href=\"zone-edit.php?affiliateid={$websiteid}&zoneid={$zoneid}\">&nbsp;</a>\n        </td>\n        {if !empty($showStats)}\n            {assign var=\"ctr\" value=\"`$zone.ctr*100`\"}\n            {assign var=\"cr\" value=\"`$zone.cr*100`\"}\n            <td {if $zone.campaign_stats}class=\"estim\"{/if}>{$ctr|string_format:\"%.3f\"}%</td>\n            <td {if $zone.campaign_stats}class=\"estim\"{/if}>{$cr|string_format:\"%.3f\"}%</td>\n            <td {if $zone.campaign_stats}class=\"estim\"{/if}>${$zone.ecpm|string_format:\"%.2f\"}</td>\n        {/if}\n      </tr>\n      {/foreach}\n\n    {foreachelse}\n    <tr class=\"empty\">\n      <td colspan=\"{$colspan}\">\n        {t str=NoWebsitesAndZones}\n        {if $text}\n          {t str=NoWebsitesAndZonesText values=$text|escape}\n        {/if}\n\n        {if $checkboxPrefix == 'a'}\n        {t str=ToLink}\n        {else}\n        {t str=ToUnlink}\n        {/if}\n      </td>\n    </tr>\n    {/foreach}\n  </tbody>\n  {if !empty($pager->links)}\n  <tfoot class=\"tableFooter\">\n      <tr>\n      <td  colspan=\"{$colspan}\">\n            <div class=\"pager\">\n              <span class=\"summary\">{$pager->summary}</span>\n              <span class=\"controls\">{$pager->links}</span>\n            </div>\n      </td>\n      </tr>\n  </tfoot>\n  {/if}\n\n</table>\n<!--rows-{$status}-end-->\n\n<!--status-{$status}-start-->\n  {if $status == 'linked'}\n  {t str=Linked}:\n  {else}\n  {t str=Available}:\n  {/if}\n  <span class=\"status-value\">{$zonescounts.all}</span><br />\n\n  {t str=Showing}: <span class=\"status-value\">{$zonescounts.showing}</span>\n<!--status-{$status}-end-->\n"], "filenames": ["lib/max/Delivery/adRender.php", "lib/templates/admin/campaign-zone-zones.html"], "buggy_code_start_loc": [213, 66], "buggy_code_end_loc": [328, 86], "fixing_code_start_loc": [213, 66], "fixing_code_end_loc": [328, 86], "type": "CWE-79", "message": "Revive Adserver before 3.2.3 suffers from Persistent XSS. A vector for persistent XSS attacks via the Revive Adserver user interface exists, requiring a trusted (non-admin) account. The website name wasn't properly escaped when displayed in the campaign-zone.php script.", "other": {"cve": {"id": "CVE-2016-9130", "sourceIdentifier": "support@hackerone.com", "published": "2017-03-28T02:59:00.557", "lastModified": "2019-10-09T23:20:19.507", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Revive Adserver before 3.2.3 suffers from Persistent XSS. A vector for persistent XSS attacks via the Revive Adserver user interface exists, requiring a trusted (non-admin) account. The website name wasn't properly escaped when displayed in the campaign-zone.php script."}, {"lang": "es", "value": "Revive Adserver en versiones anteriores a 3.2.3 sufre de XSS persistente. Existe un vector para ataques XSS persistentes a trav\u00e9s de la interfaz de usuario Revive Adserver, requiriendo una cuenta de confianza (no admin). El nombre del sitio web no se fug\u00f3 correctamente cuando se muestra en el script campaign-zone.php."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "support@hackerone.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:revive-adserver:revive_adserver:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.2.2", "matchCriteriaId": "94F64F5A-ACD3-4AED-82BE-832D7B4801DA"}]}]}], "references": [{"url": "https://github.com/revive-adserver/revive-adserver/commit/f6880330a8e11e804663f132867e9eb9b1f94e83", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://www.revive-adserver.com/security/revive-sa-2016-001/", "source": "support@hackerone.com", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/revive-adserver/revive-adserver/commit/f6880330a8e11e804663f132867e9eb9b1f94e83"}}