{"buggy_code": ["<?php\n\n/*\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\CMS\\Core\\Error;\n\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Log\\LoggerAwareInterface;\nuse Psr\\Log\\LoggerAwareTrait;\nuse TYPO3\\CMS\\Core\\Authentication\\BackendUserAuthentication;\nuse TYPO3\\CMS\\Core\\Database\\ConnectionPool;\nuse TYPO3\\CMS\\Core\\Http\\ApplicationType;\nuse TYPO3\\CMS\\Core\\SingletonInterface;\nuse TYPO3\\CMS\\Core\\SysLog\\Action as SystemLogGenericAction;\nuse TYPO3\\CMS\\Core\\SysLog\\Error as SystemLogErrorClassification;\nuse TYPO3\\CMS\\Core\\SysLog\\Type as SystemLogType;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\nuse TYPO3\\CMS\\Core\\Utility\\HttpUtility;\n\n/**\n * An abstract exception handler\n *\n * This file is a backport from TYPO3 Flow\n */\nabstract class AbstractExceptionHandler implements ExceptionHandlerInterface, SingletonInterface, LoggerAwareInterface\n{\n    use LoggerAwareTrait;\n\n    const CONTEXT_WEB = 'WEB';\n    const CONTEXT_CLI = 'CLI';\n\n    private const IGNORED_EXCEPTION_CODES = [\n        1396795884, // Current host header value does not match the configured trusted hosts pattern\n        1581862822, // Failed HMAC validation due to modified __trustedProperties in extbase property mapping\n        1581862823, // Failed HMAC validation due to modified form state in ext:forms\n        1616175867, // Backend login request is rate limited\n        1616175847,  // Frontend login request is rate limited\n    ];\n\n    /**\n     * Displays the given exception\n     *\n     * @param \\Throwable $exception The throwable object.\n     *\n     * @throws \\Exception\n     */\n    public function handleException(\\Throwable $exception)\n    {\n        switch (PHP_SAPI) {\n            case 'cli':\n                $this->echoExceptionCLI($exception);\n                break;\n            default:\n                $this->echoExceptionWeb($exception);\n        }\n    }\n\n    /**\n     * Writes exception to different logs\n     *\n     * @param \\Throwable $exception The throwable object.\n     * @param string $mode The context where the exception was thrown.\n     *     Either self::CONTEXT_WEB or self::CONTEXT_CLI.\n     */\n    protected function writeLogEntries(\\Throwable $exception, string $mode): void\n    {\n        // Do not write any logs for some messages to avoid filling up tables or files with illegal requests\n        if (in_array($exception->getCode(), self::IGNORED_EXCEPTION_CODES, true)) {\n            return;\n        }\n\n        // PSR-3 logging framework.\n        try {\n            if ($this->logger) {\n                // 'FE' if in FrontendApplication, else 'BE' (also in CLI without request object)\n                $applicationMode = ($GLOBALS['TYPO3_REQUEST'] ?? null) instanceof ServerRequestInterface\n                    && ApplicationType::fromRequest($GLOBALS['TYPO3_REQUEST'])->isFrontend()\n                    ? 'FE'\n                    : 'BE';\n                $requestUrl = $this->anonymizeToken(GeneralUtility::getIndpEnv('TYPO3_REQUEST_URL'));\n                $this->logger->critical('Core: Exception handler ({mode}: {application_mode}): {exception_class}, code #{exception_code}, file {file}, line {line}: {message}', [\n                    'mode' => $mode,\n                    'application_mode' => $applicationMode,\n                    'exception_class' => get_class($exception),\n                    'exception_code' => $exception->getCode(),\n                    'file' => $exception->getFile(),\n                    'line' => $exception->getLine(),\n                    'message' => $exception->getMessage(),\n                    'request_url' => $requestUrl,\n                    'exception' => $exception,\n                ]);\n            }\n        } catch (\\Exception $exception) {\n            // A nested exception here was probably caused by a database failure, which means there's little\n            // else that can be done other than moving on and letting the system hard-fail.\n        }\n\n        // Legacy logger.  Remove this section eventually.\n        $filePathAndName = $exception->getFile();\n        $exceptionCodeNumber = $exception->getCode() > 0 ? '#' . $exception->getCode() . ': ' : '';\n        $logTitle = 'Core: Exception handler (' . $mode . ')';\n        $logMessage = 'Uncaught TYPO3 Exception: ' . $exceptionCodeNumber . $exception->getMessage() . ' | '\n            . get_class($exception) . ' thrown in file ' . $filePathAndName . ' in line ' . $exception->getLine();\n        if ($mode === self::CONTEXT_WEB) {\n            $logMessage .= '. Requested URL: ' . $this->anonymizeToken(GeneralUtility::getIndpEnv('TYPO3_REQUEST_URL'));\n        }\n        // When database credentials are wrong, the exception is probably\n        // caused by this. Therefore we cannot do any database operation,\n        // otherwise this will lead into recurring exceptions.\n        try {\n            // Write error message to sys_log table\n            $this->writeLog($logTitle . ': ' . $logMessage);\n        } catch (\\Exception $exception) {\n        }\n    }\n\n    /**\n     * Writes an exception in the sys_log table\n     *\n     * @param string $logMessage Default text that follows the message.\n     */\n    protected function writeLog(string $logMessage)\n    {\n        $connection = GeneralUtility::makeInstance(ConnectionPool::class)\n            ->getConnectionForTable('sys_log');\n\n        if (!$connection->isConnected()) {\n            return;\n        }\n        $userId = 0;\n        $workspace = 0;\n        $data = [];\n        $backendUser = $this->getBackendUser();\n        if ($backendUser instanceof BackendUserAuthentication) {\n            if (isset($backendUser->user['uid'])) {\n                $userId = $backendUser->user['uid'];\n            }\n            $workspace = $backendUser->workspace;\n            if ($backUserId = $backendUser->getOriginalUserIdWhenInSwitchUserMode()) {\n                $data['originalUser'] = $backUserId;\n            }\n        }\n\n        $connection->insert(\n            'sys_log',\n            [\n                'userid' => $userId,\n                'type' => SystemLogType::ERROR,\n                'channel' => SystemLogType::toChannel(SystemLogType::ERROR),\n                'action' => SystemLogGenericAction::UNDEFINED,\n                'error' => SystemLogErrorClassification::SYSTEM_ERROR,\n                'details_nr' => 0,\n                'details' => str_replace('%', '%%', $logMessage),\n                'log_data' => empty($data) ? '' : json_encode($data),\n                'IP' => (string)GeneralUtility::getIndpEnv('REMOTE_ADDR'),\n                'tstamp' => $GLOBALS['EXEC_TIME'],\n                'workspace' => $workspace,\n            ]\n        );\n    }\n\n    /**\n     * Sends the HTTP Status 500 code, if $exception is *not* a\n     * TYPO3\\CMS\\Core\\Error\\Http\\StatusException and headers are not sent, yet.\n     *\n     * @param \\Throwable $exception The throwable object.\n     */\n    protected function sendStatusHeaders(\\Throwable $exception)\n    {\n        if (method_exists($exception, 'getStatusHeaders')) {\n            $headers = $exception->getStatusHeaders();\n        } else {\n            $headers = [HttpUtility::HTTP_STATUS_500];\n        }\n        if (!headers_sent()) {\n            foreach ($headers as $header) {\n                header($header);\n            }\n        }\n    }\n\n    protected function getBackendUser(): ?BackendUserAuthentication\n    {\n        return $GLOBALS['BE_USER'] ?? null;\n    }\n\n    /**\n     * Replaces the generated token with a generic equivalent\n     *\n     * @param string $requestedUrl\n     * @return string\n     */\n    protected function anonymizeToken(string $requestedUrl): string\n    {\n        $pattern = '/(?:(?<=[tT]oken=)|(?<=[tT]oken%3D))[0-9a-fA-F]{40}/';\n        return preg_replace($pattern, '--AnonymizedToken--', $requestedUrl);\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\CMS\\Core\\Error;\n\nuse TYPO3\\CMS\\Core\\Information\\Typo3Information;\n\n/**\n * A basic but solid exception handler which catches everything which\n * falls through the other exception handlers and provides useful debugging\n * information.\n */\nclass DebugExceptionHandler extends AbstractExceptionHandler\n{\n    /**\n     * Constructs this exception handler - registers itself as the default exception handler.\n     */\n    public function __construct()\n    {\n        $callable = [$this, 'handleException'];\n        if (is_callable($callable)) {\n            set_exception_handler($callable);\n        }\n    }\n\n    /**\n     * Formats and echoes the exception as XHTML.\n     *\n     * @param \\Throwable $exception The throwable object.\n     */\n    public function echoExceptionWeb(\\Throwable $exception)\n    {\n        $this->sendStatusHeaders($exception);\n        $this->writeLogEntries($exception, self::CONTEXT_WEB);\n\n        $content = $this->getContent($exception);\n        $css = $this->getStylesheet();\n\n        echo <<<HTML\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\" />\n        <title>TYPO3 Exception</title>\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\n        <style>$css</style>\n    </head>\n    <body>\n        $content\n    </body>\n</html>\nHTML;\n    }\n\n    /**\n     * Formats and echoes the exception for the command line\n     *\n     * @param \\Throwable $exception The throwable object.\n     */\n    public function echoExceptionCLI(\\Throwable $exception)\n    {\n        $filePathAndName = $exception->getFile();\n        $exceptionCodeNumber = $exception->getCode() > 0 ? '#' . $exception->getCode() . ': ' : '';\n        $this->writeLogEntries($exception, self::CONTEXT_CLI);\n        echo LF . 'Uncaught TYPO3 Exception ' . $exceptionCodeNumber . $exception->getMessage() . LF;\n        echo 'thrown in file ' . $filePathAndName . LF;\n        echo 'in line ' . $exception->getLine() . LF . LF;\n        die(1);\n    }\n\n    /**\n     * Generates the HTML for the error output.\n     *\n     * @param \\Throwable $throwable\n     * @return string\n     */\n    protected function getContent(\\Throwable $throwable): string\n    {\n        $content = '';\n\n        // exceptions can be chained\n        // for easier debugging, all exceptions are displayed to the developer\n        $throwables = $this->getAllThrowables($throwable);\n        $count = count($throwables);\n        foreach ($throwables as $position => $e) {\n            $content .= $this->getSingleThrowableContent($e, $position + 1, $count);\n        }\n\n        $exceptionInfo = '';\n        if ($throwable->getCode() > 0) {\n            $documentationLink = Typo3Information::URL_EXCEPTION . 'debug/' . $throwable->getCode();\n            $exceptionInfo = <<<INFO\n            <div class=\"container\">\n                <div class=\"callout\">\n                    <h4 class=\"callout-title\">Get help in the TYPO3 Documentation</h4>\n                    <div class=\"callout-body\">\n                        <p>\n                            If you need help solving this exception, you can have a look at the TYPO3 Documentation.\n                            There you can find solutions provided by the TYPO3 community.\n                            Once you have found a solution to the problem, help others by contributing to the\n                            documentation page.\n                        </p>\n                        <p>\n                            <a href=\"$documentationLink\" target=\"_blank\" rel=\"noreferrer\">Find a solution for this exception in the TYPO3 Documentation.</a>\n                        </p>\n                    </div>\n                </div>\n            </div>\nINFO;\n        }\n\n        $typo3Logo = $this->getTypo3LogoAsSvg();\n\n        return <<<HTML\n            <div class=\"exception-page\">\n                <div class=\"exception-summary\">\n                    <div class=\"container\">\n                        <div class=\"exception-message-wrapper\">\n                            <div class=\"exception-illustration hidden-xs-down\">$typo3Logo</div>\n                            <h1 class=\"exception-message break-long-words\">Whoops, looks like something went wrong.</h1>\n                        </div>\n                    </div>\n                </div>\n\n                $exceptionInfo\n\n                <div class=\"container\">\n                    $content\n                </div>\n            </div>\nHTML;\n    }\n\n    /**\n     * Renders the HTML for a single throwable.\n     *\n     * @param \\Throwable $throwable\n     * @param int $index\n     * @param int $total\n     * @return string\n     */\n    protected function getSingleThrowableContent(\\Throwable $throwable, int $index, int $total): string\n    {\n        $exceptionTitle = get_class($throwable);\n        $exceptionCode = $throwable->getCode() ? '#' . $throwable->getCode() . ' ' : '';\n        $exceptionMessage = $this->escapeHtml($throwable->getMessage());\n\n        // The trace does not contain the step where the exception is thrown.\n        // To display it as well it is added manually to the trace.\n        $trace = $throwable->getTrace();\n        array_unshift($trace, [\n            'file' => $throwable->getFile(),\n            'line' => $throwable->getLine(),\n            'args' => [],\n        ]);\n\n        $backtraceCode = $this->getBacktraceCode($trace);\n\n        return <<<HTML\n            <div class=\"trace\">\n                <div class=\"trace-head\">\n                    <h3 class=\"trace-class\">\n                        <span class=\"text-muted\">({$index}/{$total})</span>\n                        <span class=\"exception-title\">{$exceptionCode}{$exceptionTitle}</span>\n                    </h3>\n                    <p class=\"trace-message break-long-words\">{$exceptionMessage}</p>\n                </div>\n                <div class=\"trace-body\">\n                    {$backtraceCode}\n                </div>\n            </div>\nHTML;\n    }\n\n    /**\n     * Generates the stylesheet needed to display the error page.\n     *\n     * @return string\n     */\n    protected function getStylesheet(): string\n    {\n        return <<<STYLESHEET\n            html {\n                -webkit-text-size-adjust: 100%;\n                -ms-text-size-adjust: 100%;\n                -ms-overflow-style: scrollbar;\n                -webkit-tap-highlight-color: transparent;\n            }\n\n            body {\n                margin: 0;\n            }\n\n            .exception-page {\n                background-color: #eaeaea;\n                color: #212121;\n                font-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";\n                font-weight: 400;\n                height: 100vh;\n                line-height: 1.5;\n                overflow-x: hidden;\n                overflow-y: scroll;\n                text-align: left;\n                top: 0;\n            }\n\n            .panel-collapse .exception-page {\n                height: 100%;\n            }\n\n            .exception-page a {\n                color: #ff8700;\n                text-decoration: underline;\n            }\n\n            .exception-page a:hover {\n                text-decoration: none;\n            }\n\n            .exception-page abbr[title] {\n                border-bottom: none;\n                cursor: help;\n                text-decoration: none;\n            }\n\n            .exception-page code,\n            .exception-page kbd,\n            .exception-page pre,\n            .exception-page samp {\n                font-family: SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;\n                font-size: 1em;\n            }\n\n            .exception-page pre {\n                background-color: #ffffff;\n                overflow-x: auto;\n                border: 1px solid rgba(0,0,0,0.125);\n            }\n\n            .exception-page pre span {\n                display: block;\n                line-height: 1.3em;\n            }\n\n            .exception-page pre span:before {\n                display: inline-block;\n                content: attr(data-line);\n                border-right: 1px solid #b9b9b9;\n                margin-right: 0.5em;\n                padding-right: 0.5em;\n                background-color: #f4f4f4;\n                width: 4em;\n                text-align: right;\n                color: #515151;\n            }\n\n            .exception-page pre span.highlight {\n                background-color: #cce5ff;\n            }\n\n            .exception-page .break-long-words {\n                -ms-word-break: break-all;\n                word-break: break-all;\n                word-break: break-word;\n                -webkit-hyphens: auto;\n                -moz-hyphens: auto;\n                hyphens: auto;\n            }\n\n            .exception-page .callout {\n                padding: 1.5rem;\n                background-color: #fff;\n                margin-bottom: 2em;\n                box-shadow: 0 2px 1px rgba(0,0,0,.15);\n                border-left: 3px solid #8c8c8c;\n            }\n\n            .exception-page .callout-title {\n                margin: 0;\n            }\n\n            .exception-page .callout-body p:last-child {\n                margin-bottom: 0;\n            }\n\n            .exception-page .container {\n                max-width: 1140px;\n                margin: 0 auto;\n                padding: 0 30px;\n            }\n\n            .panel-collapse .exception-page .container {\n                width: 100%;\n            }\n\n            .exception-page .exception-illustration {\n                width: 3em;\n                height: 3em;\n                float: left;\n                margin-right: 1rem;\n            }\n\n            .exception-page .exception-illustration svg {\n                width: 100%;\n            }\n\n            .exception-page .exception-illustration svg path {\n                fill: #ff8700;\n            }\n\n            .exception-page .exception-summary {\n                background: #000000;\n                color: #fff;\n                padding: 1.5rem 0;\n                margin-bottom: 2rem;\n            }\n\n            .exception-page .exception-summary h1 {\n                margin: 0;\n            }\n\n            .exception-page .text-muted {\n                opacity: 0.5;\n            }\n\n            .exception-page .trace {\n                background-color: #fff;\n                margin-bottom: 2rem;\n                box-shadow: 0 2px 1px rgba(0,0,0,.15);\n            }\n\n            .exception-page .trace-arguments {\n                color: #8c8c8c;\n            }\n\n            .exception-page .trace-body {\n            }\n\n            .exception-page .trace-call {\n                margin-bottom: 1rem;\n            }\n\n            .exception-page .trace-class {\n                margin: 0;\n            }\n\n            .exception-page .trace-file pre {\n                margin-top: 1.5rem;\n                margin-bottom: 0;\n            }\n\n            .exception-page .trace-head {\n                color: #721c24;\n                background-color: #f8d7da;\n                padding: 1.5rem;\n            }\n\n            .exception-page .trace-file-path {\n                word-break: break-all;\n            }\n\n            .exception-page .trace-message {\n                margin-bottom: 0;\n            }\n\n            .exception-page .trace-step {\n                padding: 1.5rem;\n                border-bottom: 1px solid #b9b9b9;\n            }\n\n            .exception-page .trace-step > *:first-child {\n                margin-top: 0;\n            }\n\n            .exception-page .trace-step > *:last-child {\n                margin-bottom: 0;\n            }\n\n            .exception-page .trace-step:nth-child(even)\n            {\n                background-color: #fafafa;\n            }\n\n            .exception-page .trace-step:last-child {\n                border-bottom: none;\n            }\nSTYLESHEET;\n    }\n\n    /**\n     * Renders the backtrace as HTML.\n     *\n     * @param array $trace\n     * @return string\n     */\n    protected function getBacktraceCode(array $trace): string\n    {\n        $content = '';\n\n        foreach ($trace as $index => $step) {\n            $content .= '<div class=\"trace-step\">';\n            $args = $this->flattenArgs($step['args'] ?? []);\n\n            if (isset($step['function'])) {\n                $content .= '<div class=\"trace-call\">' . sprintf(\n                    'at <span class=\"trace-class\">%s</span><span class=\"trace-type\">%s</span><span class=\"trace-method\">%s</span>(<span class=\"trace-arguments\">%s</span>)',\n                    $step['class'] ?? '',\n                    $step['type'] ?? '',\n                    $step['function'],\n                    $this->formatArgs($args)\n                ) . '</div>';\n            }\n\n            if (isset($step['file']) && isset($step['line'])) {\n                $content .= $this->getCodeSnippet($step['file'], $step['line']);\n            }\n\n            $content .= '</div>';\n        }\n\n        return $content;\n    }\n\n    /**\n     * Returns a code snippet from the specified file.\n     *\n     * @param string $filePathAndName Absolute path and file name of the PHP file\n     * @param int $lineNumber Line number defining the center of the code snippet\n     * @return string The code snippet\n     */\n    protected function getCodeSnippet(string $filePathAndName, int $lineNumber): string\n    {\n        $showLinesAround = 4;\n\n        $content = '<div class=\"trace-file\">';\n        $content .= '<div class=\"trace-file-head\">' . $this->formatPath($filePathAndName, $lineNumber) . '</div>';\n\n        if (@file_exists($filePathAndName)) {\n            $phpFile = @file($filePathAndName);\n            if (is_array($phpFile)) {\n                $startLine = $lineNumber > $showLinesAround ? $lineNumber - $showLinesAround : 1;\n                $phpFileCount = count($phpFile);\n                $endLine = $lineNumber < $phpFileCount - $showLinesAround ? $lineNumber + $showLinesAround + 1 : $phpFileCount + 1;\n                if ($endLine > $startLine) {\n                    $content .= '<div class=\"trace-file-content\">';\n                    $content .= '<pre>';\n\n                    for ($line = $startLine; $line < $endLine; $line++) {\n                        $codeLine = str_replace(\"\\t\", ' ', $phpFile[$line - 1]);\n                        $spanClass = '';\n                        if ($line === $lineNumber) {\n                            $spanClass = 'highlight';\n                        }\n\n                        $content .= '<span class=\"' . $spanClass . '\" data-line=\"' . $line . '\">' . $this->escapeHtml($codeLine) . '</span>';\n                    }\n\n                    $content .= '</pre>';\n                    $content .= '</div>';\n                }\n            }\n        }\n\n        $content .= '</div>';\n\n        return $content;\n    }\n\n    /**\n     * Formats a path adding a line number.\n     *\n     * @param string $path The full path of the file.\n     * @param int $line The line number.\n     * @return string\n     */\n    protected function formatPath(string $path, int $line): string\n    {\n        return sprintf(\n            '<span class=\"block trace-file-path\">in <strong>%s</strong>%s</span>',\n            $this->escapeHtml($path),\n            0 < $line ? ' line ' . $line : ''\n        );\n    }\n\n    /**\n     * Formats the arguments of a method call.\n     *\n     * @param array $args The flattened args of method/function call\n     * @return string\n     */\n    protected function formatArgs(array $args): string\n    {\n        $result = [];\n        foreach ($args as $key => $item) {\n            if ('object' === $item[0]) {\n                $formattedValue = sprintf('<em>object</em>(%s)', $item[1]);\n            } elseif ('array' === $item[0]) {\n                $formattedValue = sprintf('<em>array</em>(%s)', is_array($item[1]) ? $this->formatArgs($item[1]) : $item[1]);\n            } elseif ('null' === $item[0]) {\n                $formattedValue = '<em>null</em>';\n            } elseif ('boolean' === $item[0]) {\n                $formattedValue = '<em>' . strtolower(var_export($item[1], true)) . '</em>';\n            } elseif ('resource' === $item[0]) {\n                $formattedValue = '<em>resource</em>';\n            } else {\n                $formattedValue = str_replace(\"\\n\", '', $this->escapeHtml(var_export($item[1], true)));\n            }\n\n            $result[] = \\is_int($key) ? $formattedValue : sprintf(\"'%s' => %s\", $this->escapeHtml($key), $formattedValue);\n        }\n\n        return implode(', ', $result);\n    }\n\n    protected function flattenArgs(array $args, int $level = 0, int &$count = 0): array\n    {\n        $result = [];\n        foreach ($args as $key => $value) {\n            if (++$count > 1e4) {\n                return ['array', '*SKIPPED over 10000 entries*'];\n            }\n            if ($value instanceof \\__PHP_Incomplete_Class) {\n                // is_object() returns false on PHP<=7.1\n                $result[$key] = ['incomplete-object', $this->getClassNameFromIncomplete($value)];\n            } elseif (is_object($value)) {\n                $result[$key] = ['object', get_class($value)];\n            } elseif (is_array($value)) {\n                if ($level > 10) {\n                    $result[$key] = ['array', '*DEEP NESTED ARRAY*'];\n                } else {\n                    $result[$key] = ['array', $this->flattenArgs($value, $level + 1, $count)];\n                }\n            } elseif (null === $value) {\n                $result[$key] = ['null', null];\n            } elseif (is_bool($value)) {\n                $result[$key] = ['boolean', $value];\n            } elseif (is_int($value)) {\n                $result[$key] = ['integer', $value];\n            } elseif (is_float($value)) {\n                $result[$key] = ['float', $value];\n            } elseif (is_resource($value)) {\n                $result[$key] = ['resource', get_resource_type($value)];\n            } else {\n                $result[$key] = ['string', (string)$value];\n            }\n        }\n\n        return $result;\n    }\n\n    protected function getClassNameFromIncomplete(\\__PHP_Incomplete_Class $value): string\n    {\n        $array = new \\ArrayObject($value);\n\n        return $array['__PHP_Incomplete_Class_Name'];\n    }\n\n    protected function escapeHtml(string $str): string\n    {\n        return htmlspecialchars($str, ENT_COMPAT | ENT_SUBSTITUTE);\n    }\n\n    protected function getTypo3LogoAsSvg(): string\n    {\n        return <<<SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path d=\"M11.1 10.3c-.2 0-.3.1-.5.1C9 10.4 6.8 5 6.8 3.2c0-.7.2-.9.4-1.1-2 .2-4.2.9-4.9 1.8-.2.2-.3.6-.3 1 0 2.8 3 9.2 5.1 9.2 1 0 2.6-1.6 4-3.8m-1-8.4c1.9 0 3.9.3 3.9 1.4 0 2.2-1.4 4.9-2.1 4.9C10.6 8.3 9 4.7 9 2.9c0-.8.3-1 1.1-1\"></path></svg>\nSVG;\n    }\n\n    protected function getAllThrowables(\\Throwable $throwable): array\n    {\n        $all = [$throwable];\n\n        while ($throwable = $throwable->getPrevious()) {\n            $all[] = $throwable;\n        }\n\n        return $all;\n    }\n}\n"], "fixing_code": ["<?php\n\n/*\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\CMS\\Core\\Error;\n\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Log\\LoggerAwareInterface;\nuse Psr\\Log\\LoggerAwareTrait;\nuse TYPO3\\CMS\\Core\\Authentication\\BackendUserAuthentication;\nuse TYPO3\\CMS\\Core\\Database\\ConnectionPool;\nuse TYPO3\\CMS\\Core\\Http\\ApplicationType;\nuse TYPO3\\CMS\\Core\\SingletonInterface;\nuse TYPO3\\CMS\\Core\\SysLog\\Action as SystemLogGenericAction;\nuse TYPO3\\CMS\\Core\\SysLog\\Error as SystemLogErrorClassification;\nuse TYPO3\\CMS\\Core\\SysLog\\Type as SystemLogType;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\nuse TYPO3\\CMS\\Core\\Utility\\HttpUtility;\n\n/**\n * An abstract exception handler\n *\n * This file is a backport from TYPO3 Flow\n */\nabstract class AbstractExceptionHandler implements ExceptionHandlerInterface, SingletonInterface, LoggerAwareInterface\n{\n    use LoggerAwareTrait;\n\n    const CONTEXT_WEB = 'WEB';\n    const CONTEXT_CLI = 'CLI';\n\n    protected bool $logExceptionStackTrace = false;\n\n    private const IGNORED_EXCEPTION_CODES = [\n        1396795884, // Current host header value does not match the configured trusted hosts pattern\n        1581862822, // Failed HMAC validation due to modified __trustedProperties in extbase property mapping\n        1581862823, // Failed HMAC validation due to modified form state in ext:forms\n        1616175867, // Backend login request is rate limited\n        1616175847,  // Frontend login request is rate limited\n    ];\n\n    /**\n     * Displays the given exception\n     *\n     * @param \\Throwable $exception The throwable object.\n     *\n     * @throws \\Exception\n     */\n    public function handleException(\\Throwable $exception)\n    {\n        switch (PHP_SAPI) {\n            case 'cli':\n                $this->echoExceptionCLI($exception);\n                break;\n            default:\n                $this->echoExceptionWeb($exception);\n        }\n    }\n\n    /**\n     * Writes exception to different logs\n     *\n     * @param \\Throwable $exception The throwable object.\n     * @param string $mode The context where the exception was thrown.\n     *     Either self::CONTEXT_WEB or self::CONTEXT_CLI.\n     */\n    protected function writeLogEntries(\\Throwable $exception, string $mode): void\n    {\n        // Do not write any logs for some messages to avoid filling up tables or files with illegal requests\n        if (in_array($exception->getCode(), self::IGNORED_EXCEPTION_CODES, true)) {\n            return;\n        }\n\n        // PSR-3 logging framework.\n        try {\n            if ($this->logger) {\n                // 'FE' if in FrontendApplication, else 'BE' (also in CLI without request object)\n                $applicationMode = ($GLOBALS['TYPO3_REQUEST'] ?? null) instanceof ServerRequestInterface\n                    && ApplicationType::fromRequest($GLOBALS['TYPO3_REQUEST'])->isFrontend()\n                    ? 'FE'\n                    : 'BE';\n                $requestUrl = $this->anonymizeToken(GeneralUtility::getIndpEnv('TYPO3_REQUEST_URL'));\n                $this->logger->critical('Core: Exception handler ({mode}: {application_mode}): {exception_class}, code #{exception_code}, file {file}, line {line}: {message}', [\n                    'mode' => $mode,\n                    'application_mode' => $applicationMode,\n                    'exception_class' => get_class($exception),\n                    'exception_code' => $exception->getCode(),\n                    'file' => $exception->getFile(),\n                    'line' => $exception->getLine(),\n                    'message' => $exception->getMessage(),\n                    'request_url' => $requestUrl,\n                    'exception' => $this->logExceptionStackTrace ? $exception : null,\n                ]);\n            }\n        } catch (\\Exception $exception) {\n            // A nested exception here was probably caused by a database failure, which means there's little\n            // else that can be done other than moving on and letting the system hard-fail.\n        }\n\n        // Legacy logger.  Remove this section eventually.\n        $filePathAndName = $exception->getFile();\n        $exceptionCodeNumber = $exception->getCode() > 0 ? '#' . $exception->getCode() . ': ' : '';\n        $logTitle = 'Core: Exception handler (' . $mode . ')';\n        $logMessage = 'Uncaught TYPO3 Exception: ' . $exceptionCodeNumber . $exception->getMessage() . ' | '\n            . get_class($exception) . ' thrown in file ' . $filePathAndName . ' in line ' . $exception->getLine();\n        if ($mode === self::CONTEXT_WEB) {\n            $logMessage .= '. Requested URL: ' . $this->anonymizeToken(GeneralUtility::getIndpEnv('TYPO3_REQUEST_URL'));\n        }\n        // When database credentials are wrong, the exception is probably\n        // caused by this. Therefore we cannot do any database operation,\n        // otherwise this will lead into recurring exceptions.\n        try {\n            // Write error message to sys_log table\n            $this->writeLog($logTitle . ': ' . $logMessage);\n        } catch (\\Exception $exception) {\n        }\n    }\n\n    /**\n     * Writes an exception in the sys_log table\n     *\n     * @param string $logMessage Default text that follows the message.\n     */\n    protected function writeLog(string $logMessage)\n    {\n        $connection = GeneralUtility::makeInstance(ConnectionPool::class)\n            ->getConnectionForTable('sys_log');\n\n        if (!$connection->isConnected()) {\n            return;\n        }\n        $userId = 0;\n        $workspace = 0;\n        $data = [];\n        $backendUser = $this->getBackendUser();\n        if ($backendUser instanceof BackendUserAuthentication) {\n            if (isset($backendUser->user['uid'])) {\n                $userId = $backendUser->user['uid'];\n            }\n            $workspace = $backendUser->workspace;\n            if ($backUserId = $backendUser->getOriginalUserIdWhenInSwitchUserMode()) {\n                $data['originalUser'] = $backUserId;\n            }\n        }\n\n        $connection->insert(\n            'sys_log',\n            [\n                'userid' => $userId,\n                'type' => SystemLogType::ERROR,\n                'channel' => SystemLogType::toChannel(SystemLogType::ERROR),\n                'action' => SystemLogGenericAction::UNDEFINED,\n                'error' => SystemLogErrorClassification::SYSTEM_ERROR,\n                'details_nr' => 0,\n                'details' => str_replace('%', '%%', $logMessage),\n                'log_data' => empty($data) ? '' : json_encode($data),\n                'IP' => (string)GeneralUtility::getIndpEnv('REMOTE_ADDR'),\n                'tstamp' => $GLOBALS['EXEC_TIME'],\n                'workspace' => $workspace,\n            ]\n        );\n    }\n\n    /**\n     * Sends the HTTP Status 500 code, if $exception is *not* a\n     * TYPO3\\CMS\\Core\\Error\\Http\\StatusException and headers are not sent, yet.\n     *\n     * @param \\Throwable $exception The throwable object.\n     */\n    protected function sendStatusHeaders(\\Throwable $exception)\n    {\n        if (method_exists($exception, 'getStatusHeaders')) {\n            $headers = $exception->getStatusHeaders();\n        } else {\n            $headers = [HttpUtility::HTTP_STATUS_500];\n        }\n        if (!headers_sent()) {\n            foreach ($headers as $header) {\n                header($header);\n            }\n        }\n    }\n\n    protected function getBackendUser(): ?BackendUserAuthentication\n    {\n        return $GLOBALS['BE_USER'] ?? null;\n    }\n\n    /**\n     * Replaces the generated token with a generic equivalent\n     *\n     * @param string $requestedUrl\n     * @return string\n     */\n    protected function anonymizeToken(string $requestedUrl): string\n    {\n        $pattern = '/(?:(?<=[tT]oken=)|(?<=[tT]oken%3D))[0-9a-fA-F]{40}/';\n        return preg_replace($pattern, '--AnonymizedToken--', $requestedUrl);\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\CMS\\Core\\Error;\n\nuse TYPO3\\CMS\\Core\\Information\\Typo3Information;\n\n/**\n * A basic but solid exception handler which catches everything which\n * falls through the other exception handlers and provides useful debugging\n * information.\n */\nclass DebugExceptionHandler extends AbstractExceptionHandler\n{\n    protected bool $logExceptionStackTrace = true;\n\n    /**\n     * Constructs this exception handler - registers itself as the default exception handler.\n     */\n    public function __construct()\n    {\n        $callable = [$this, 'handleException'];\n        if (is_callable($callable)) {\n            set_exception_handler($callable);\n        }\n    }\n\n    /**\n     * Formats and echoes the exception as XHTML.\n     *\n     * @param \\Throwable $exception The throwable object.\n     */\n    public function echoExceptionWeb(\\Throwable $exception)\n    {\n        $this->sendStatusHeaders($exception);\n        $this->writeLogEntries($exception, self::CONTEXT_WEB);\n\n        $content = $this->getContent($exception);\n        $css = $this->getStylesheet();\n\n        echo <<<HTML\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\" />\n        <title>TYPO3 Exception</title>\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\n        <style>$css</style>\n    </head>\n    <body>\n        $content\n    </body>\n</html>\nHTML;\n    }\n\n    /**\n     * Formats and echoes the exception for the command line\n     *\n     * @param \\Throwable $exception The throwable object.\n     */\n    public function echoExceptionCLI(\\Throwable $exception)\n    {\n        $filePathAndName = $exception->getFile();\n        $exceptionCodeNumber = $exception->getCode() > 0 ? '#' . $exception->getCode() . ': ' : '';\n        $this->writeLogEntries($exception, self::CONTEXT_CLI);\n        echo LF . 'Uncaught TYPO3 Exception ' . $exceptionCodeNumber . $exception->getMessage() . LF;\n        echo 'thrown in file ' . $filePathAndName . LF;\n        echo 'in line ' . $exception->getLine() . LF . LF;\n        die(1);\n    }\n\n    /**\n     * Generates the HTML for the error output.\n     *\n     * @param \\Throwable $throwable\n     * @return string\n     */\n    protected function getContent(\\Throwable $throwable): string\n    {\n        $content = '';\n\n        // exceptions can be chained\n        // for easier debugging, all exceptions are displayed to the developer\n        $throwables = $this->getAllThrowables($throwable);\n        $count = count($throwables);\n        foreach ($throwables as $position => $e) {\n            $content .= $this->getSingleThrowableContent($e, $position + 1, $count);\n        }\n\n        $exceptionInfo = '';\n        if ($throwable->getCode() > 0) {\n            $documentationLink = Typo3Information::URL_EXCEPTION . 'debug/' . $throwable->getCode();\n            $exceptionInfo = <<<INFO\n            <div class=\"container\">\n                <div class=\"callout\">\n                    <h4 class=\"callout-title\">Get help in the TYPO3 Documentation</h4>\n                    <div class=\"callout-body\">\n                        <p>\n                            If you need help solving this exception, you can have a look at the TYPO3 Documentation.\n                            There you can find solutions provided by the TYPO3 community.\n                            Once you have found a solution to the problem, help others by contributing to the\n                            documentation page.\n                        </p>\n                        <p>\n                            <a href=\"$documentationLink\" target=\"_blank\" rel=\"noreferrer\">Find a solution for this exception in the TYPO3 Documentation.</a>\n                        </p>\n                    </div>\n                </div>\n            </div>\nINFO;\n        }\n\n        $typo3Logo = $this->getTypo3LogoAsSvg();\n\n        return <<<HTML\n            <div class=\"exception-page\">\n                <div class=\"exception-summary\">\n                    <div class=\"container\">\n                        <div class=\"exception-message-wrapper\">\n                            <div class=\"exception-illustration hidden-xs-down\">$typo3Logo</div>\n                            <h1 class=\"exception-message break-long-words\">Whoops, looks like something went wrong.</h1>\n                        </div>\n                    </div>\n                </div>\n\n                $exceptionInfo\n\n                <div class=\"container\">\n                    $content\n                </div>\n            </div>\nHTML;\n    }\n\n    /**\n     * Renders the HTML for a single throwable.\n     *\n     * @param \\Throwable $throwable\n     * @param int $index\n     * @param int $total\n     * @return string\n     */\n    protected function getSingleThrowableContent(\\Throwable $throwable, int $index, int $total): string\n    {\n        $exceptionTitle = get_class($throwable);\n        $exceptionCode = $throwable->getCode() ? '#' . $throwable->getCode() . ' ' : '';\n        $exceptionMessage = $this->escapeHtml($throwable->getMessage());\n\n        // The trace does not contain the step where the exception is thrown.\n        // To display it as well it is added manually to the trace.\n        $trace = $throwable->getTrace();\n        array_unshift($trace, [\n            'file' => $throwable->getFile(),\n            'line' => $throwable->getLine(),\n            'args' => [],\n        ]);\n\n        $backtraceCode = $this->getBacktraceCode($trace);\n\n        return <<<HTML\n            <div class=\"trace\">\n                <div class=\"trace-head\">\n                    <h3 class=\"trace-class\">\n                        <span class=\"text-muted\">({$index}/{$total})</span>\n                        <span class=\"exception-title\">{$exceptionCode}{$exceptionTitle}</span>\n                    </h3>\n                    <p class=\"trace-message break-long-words\">{$exceptionMessage}</p>\n                </div>\n                <div class=\"trace-body\">\n                    {$backtraceCode}\n                </div>\n            </div>\nHTML;\n    }\n\n    /**\n     * Generates the stylesheet needed to display the error page.\n     *\n     * @return string\n     */\n    protected function getStylesheet(): string\n    {\n        return <<<STYLESHEET\n            html {\n                -webkit-text-size-adjust: 100%;\n                -ms-text-size-adjust: 100%;\n                -ms-overflow-style: scrollbar;\n                -webkit-tap-highlight-color: transparent;\n            }\n\n            body {\n                margin: 0;\n            }\n\n            .exception-page {\n                background-color: #eaeaea;\n                color: #212121;\n                font-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";\n                font-weight: 400;\n                height: 100vh;\n                line-height: 1.5;\n                overflow-x: hidden;\n                overflow-y: scroll;\n                text-align: left;\n                top: 0;\n            }\n\n            .panel-collapse .exception-page {\n                height: 100%;\n            }\n\n            .exception-page a {\n                color: #ff8700;\n                text-decoration: underline;\n            }\n\n            .exception-page a:hover {\n                text-decoration: none;\n            }\n\n            .exception-page abbr[title] {\n                border-bottom: none;\n                cursor: help;\n                text-decoration: none;\n            }\n\n            .exception-page code,\n            .exception-page kbd,\n            .exception-page pre,\n            .exception-page samp {\n                font-family: SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;\n                font-size: 1em;\n            }\n\n            .exception-page pre {\n                background-color: #ffffff;\n                overflow-x: auto;\n                border: 1px solid rgba(0,0,0,0.125);\n            }\n\n            .exception-page pre span {\n                display: block;\n                line-height: 1.3em;\n            }\n\n            .exception-page pre span:before {\n                display: inline-block;\n                content: attr(data-line);\n                border-right: 1px solid #b9b9b9;\n                margin-right: 0.5em;\n                padding-right: 0.5em;\n                background-color: #f4f4f4;\n                width: 4em;\n                text-align: right;\n                color: #515151;\n            }\n\n            .exception-page pre span.highlight {\n                background-color: #cce5ff;\n            }\n\n            .exception-page .break-long-words {\n                -ms-word-break: break-all;\n                word-break: break-all;\n                word-break: break-word;\n                -webkit-hyphens: auto;\n                -moz-hyphens: auto;\n                hyphens: auto;\n            }\n\n            .exception-page .callout {\n                padding: 1.5rem;\n                background-color: #fff;\n                margin-bottom: 2em;\n                box-shadow: 0 2px 1px rgba(0,0,0,.15);\n                border-left: 3px solid #8c8c8c;\n            }\n\n            .exception-page .callout-title {\n                margin: 0;\n            }\n\n            .exception-page .callout-body p:last-child {\n                margin-bottom: 0;\n            }\n\n            .exception-page .container {\n                max-width: 1140px;\n                margin: 0 auto;\n                padding: 0 30px;\n            }\n\n            .panel-collapse .exception-page .container {\n                width: 100%;\n            }\n\n            .exception-page .exception-illustration {\n                width: 3em;\n                height: 3em;\n                float: left;\n                margin-right: 1rem;\n            }\n\n            .exception-page .exception-illustration svg {\n                width: 100%;\n            }\n\n            .exception-page .exception-illustration svg path {\n                fill: #ff8700;\n            }\n\n            .exception-page .exception-summary {\n                background: #000000;\n                color: #fff;\n                padding: 1.5rem 0;\n                margin-bottom: 2rem;\n            }\n\n            .exception-page .exception-summary h1 {\n                margin: 0;\n            }\n\n            .exception-page .text-muted {\n                opacity: 0.5;\n            }\n\n            .exception-page .trace {\n                background-color: #fff;\n                margin-bottom: 2rem;\n                box-shadow: 0 2px 1px rgba(0,0,0,.15);\n            }\n\n            .exception-page .trace-arguments {\n                color: #8c8c8c;\n            }\n\n            .exception-page .trace-body {\n            }\n\n            .exception-page .trace-call {\n                margin-bottom: 1rem;\n            }\n\n            .exception-page .trace-class {\n                margin: 0;\n            }\n\n            .exception-page .trace-file pre {\n                margin-top: 1.5rem;\n                margin-bottom: 0;\n            }\n\n            .exception-page .trace-head {\n                color: #721c24;\n                background-color: #f8d7da;\n                padding: 1.5rem;\n            }\n\n            .exception-page .trace-file-path {\n                word-break: break-all;\n            }\n\n            .exception-page .trace-message {\n                margin-bottom: 0;\n            }\n\n            .exception-page .trace-step {\n                padding: 1.5rem;\n                border-bottom: 1px solid #b9b9b9;\n            }\n\n            .exception-page .trace-step > *:first-child {\n                margin-top: 0;\n            }\n\n            .exception-page .trace-step > *:last-child {\n                margin-bottom: 0;\n            }\n\n            .exception-page .trace-step:nth-child(even)\n            {\n                background-color: #fafafa;\n            }\n\n            .exception-page .trace-step:last-child {\n                border-bottom: none;\n            }\nSTYLESHEET;\n    }\n\n    /**\n     * Renders the backtrace as HTML.\n     *\n     * @param array $trace\n     * @return string\n     */\n    protected function getBacktraceCode(array $trace): string\n    {\n        $content = '';\n\n        foreach ($trace as $index => $step) {\n            $content .= '<div class=\"trace-step\">';\n            $args = $this->flattenArgs($step['args'] ?? []);\n\n            if (isset($step['function'])) {\n                $content .= '<div class=\"trace-call\">' . sprintf(\n                    'at <span class=\"trace-class\">%s</span><span class=\"trace-type\">%s</span><span class=\"trace-method\">%s</span>(<span class=\"trace-arguments\">%s</span>)',\n                    $step['class'] ?? '',\n                    $step['type'] ?? '',\n                    $step['function'],\n                    $this->formatArgs($args)\n                ) . '</div>';\n            }\n\n            if (isset($step['file']) && isset($step['line'])) {\n                $content .= $this->getCodeSnippet($step['file'], $step['line']);\n            }\n\n            $content .= '</div>';\n        }\n\n        return $content;\n    }\n\n    /**\n     * Returns a code snippet from the specified file.\n     *\n     * @param string $filePathAndName Absolute path and file name of the PHP file\n     * @param int $lineNumber Line number defining the center of the code snippet\n     * @return string The code snippet\n     */\n    protected function getCodeSnippet(string $filePathAndName, int $lineNumber): string\n    {\n        $showLinesAround = 4;\n\n        $content = '<div class=\"trace-file\">';\n        $content .= '<div class=\"trace-file-head\">' . $this->formatPath($filePathAndName, $lineNumber) . '</div>';\n\n        if (@file_exists($filePathAndName)) {\n            $phpFile = @file($filePathAndName);\n            if (is_array($phpFile)) {\n                $startLine = $lineNumber > $showLinesAround ? $lineNumber - $showLinesAround : 1;\n                $phpFileCount = count($phpFile);\n                $endLine = $lineNumber < $phpFileCount - $showLinesAround ? $lineNumber + $showLinesAround + 1 : $phpFileCount + 1;\n                if ($endLine > $startLine) {\n                    $content .= '<div class=\"trace-file-content\">';\n                    $content .= '<pre>';\n\n                    for ($line = $startLine; $line < $endLine; $line++) {\n                        $codeLine = str_replace(\"\\t\", ' ', $phpFile[$line - 1]);\n                        $spanClass = '';\n                        if ($line === $lineNumber) {\n                            $spanClass = 'highlight';\n                        }\n\n                        $content .= '<span class=\"' . $spanClass . '\" data-line=\"' . $line . '\">' . $this->escapeHtml($codeLine) . '</span>';\n                    }\n\n                    $content .= '</pre>';\n                    $content .= '</div>';\n                }\n            }\n        }\n\n        $content .= '</div>';\n\n        return $content;\n    }\n\n    /**\n     * Formats a path adding a line number.\n     *\n     * @param string $path The full path of the file.\n     * @param int $line The line number.\n     * @return string\n     */\n    protected function formatPath(string $path, int $line): string\n    {\n        return sprintf(\n            '<span class=\"block trace-file-path\">in <strong>%s</strong>%s</span>',\n            $this->escapeHtml($path),\n            0 < $line ? ' line ' . $line : ''\n        );\n    }\n\n    /**\n     * Formats the arguments of a method call.\n     *\n     * @param array $args The flattened args of method/function call\n     * @return string\n     */\n    protected function formatArgs(array $args): string\n    {\n        $result = [];\n        foreach ($args as $key => $item) {\n            if ('object' === $item[0]) {\n                $formattedValue = sprintf('<em>object</em>(%s)', $item[1]);\n            } elseif ('array' === $item[0]) {\n                $formattedValue = sprintf('<em>array</em>(%s)', is_array($item[1]) ? $this->formatArgs($item[1]) : $item[1]);\n            } elseif ('null' === $item[0]) {\n                $formattedValue = '<em>null</em>';\n            } elseif ('boolean' === $item[0]) {\n                $formattedValue = '<em>' . strtolower(var_export($item[1], true)) . '</em>';\n            } elseif ('resource' === $item[0]) {\n                $formattedValue = '<em>resource</em>';\n            } else {\n                $formattedValue = str_replace(\"\\n\", '', $this->escapeHtml(var_export($item[1], true)));\n            }\n\n            $result[] = \\is_int($key) ? $formattedValue : sprintf(\"'%s' => %s\", $this->escapeHtml($key), $formattedValue);\n        }\n\n        return implode(', ', $result);\n    }\n\n    protected function flattenArgs(array $args, int $level = 0, int &$count = 0): array\n    {\n        $result = [];\n        foreach ($args as $key => $value) {\n            if (++$count > 1e4) {\n                return ['array', '*SKIPPED over 10000 entries*'];\n            }\n            if ($value instanceof \\__PHP_Incomplete_Class) {\n                // is_object() returns false on PHP<=7.1\n                $result[$key] = ['incomplete-object', $this->getClassNameFromIncomplete($value)];\n            } elseif (is_object($value)) {\n                $result[$key] = ['object', get_class($value)];\n            } elseif (is_array($value)) {\n                if ($level > 10) {\n                    $result[$key] = ['array', '*DEEP NESTED ARRAY*'];\n                } else {\n                    $result[$key] = ['array', $this->flattenArgs($value, $level + 1, $count)];\n                }\n            } elseif (null === $value) {\n                $result[$key] = ['null', null];\n            } elseif (is_bool($value)) {\n                $result[$key] = ['boolean', $value];\n            } elseif (is_int($value)) {\n                $result[$key] = ['integer', $value];\n            } elseif (is_float($value)) {\n                $result[$key] = ['float', $value];\n            } elseif (is_resource($value)) {\n                $result[$key] = ['resource', get_resource_type($value)];\n            } else {\n                $result[$key] = ['string', (string)$value];\n            }\n        }\n\n        return $result;\n    }\n\n    protected function getClassNameFromIncomplete(\\__PHP_Incomplete_Class $value): string\n    {\n        $array = new \\ArrayObject($value);\n\n        return $array['__PHP_Incomplete_Class_Name'];\n    }\n\n    protected function escapeHtml(string $str): string\n    {\n        return htmlspecialchars($str, ENT_COMPAT | ENT_SUBSTITUTE);\n    }\n\n    protected function getTypo3LogoAsSvg(): string\n    {\n        return <<<SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path d=\"M11.1 10.3c-.2 0-.3.1-.5.1C9 10.4 6.8 5 6.8 3.2c0-.7.2-.9.4-1.1-2 .2-4.2.9-4.9 1.8-.2.2-.3.6-.3 1 0 2.8 3 9.2 5.1 9.2 1 0 2.6-1.6 4-3.8m-1-8.4c1.9 0 3.9.3 3.9 1.4 0 2.2-1.4 4.9-2.1 4.9C10.6 8.3 9 4.7 9 2.9c0-.8.3-1 1.1-1\"></path></svg>\nSVG;\n    }\n\n    protected function getAllThrowables(\\Throwable $throwable): array\n    {\n        $all = [$throwable];\n\n        while ($throwable = $throwable->getPrevious()) {\n            $all[] = $throwable;\n        }\n\n        return $all;\n    }\n}\n"], "filenames": ["typo3/sysext/core/Classes/Error/AbstractExceptionHandler.php", "typo3/sysext/core/Classes/Error/DebugExceptionHandler.php"], "buggy_code_start_loc": [41, 28], "buggy_code_end_loc": [102, 28], "fixing_code_start_loc": [42, 29], "fixing_code_end_loc": [104, 31], "type": "CWE-532", "message": "TYPO3 is an open source web content management system. Prior to versions 7.6.57 ELTS, 8.7.47 ELTS, 9.5.34 ELTS, 10.4.29, and 11.5.11, system internal credentials or keys (e.g. database credentials) can be logged as plaintext in exception handlers, when logging the complete exception stack trace. TYPO3 versions 7.6.57 ELTS, 8.7.47 ELTS, 9.5.34 ELTS, 10.4.29, 11.5.11 contain a fix for the problem.", "other": {"cve": {"id": "CVE-2022-31047", "sourceIdentifier": "security-advisories@github.com", "published": "2022-06-14T21:15:16.050", "lastModified": "2022-06-23T19:57:34.097", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TYPO3 is an open source web content management system. Prior to versions 7.6.57 ELTS, 8.7.47 ELTS, 9.5.34 ELTS, 10.4.29, and 11.5.11, system internal credentials or keys (e.g. database credentials) can be logged as plaintext in exception handlers, when logging the complete exception stack trace. TYPO3 versions 7.6.57 ELTS, 8.7.47 ELTS, 9.5.34 ELTS, 10.4.29, 11.5.11 contain a fix for the problem."}, {"lang": "es", "value": "TYPO3 es un sistema de administraci\u00f3n de contenidos web de c\u00f3digo abierto. En versiones anteriores a 7.6.57 ELTS, 8.7.47 ELTS, 9.5.34 ELTS, 10.4.29 y 11.5.11, las credenciales o claves internas del sistema (por ejemplo, las credenciales de la base de datos) pod\u00edan registrarse como texto plano en los manejadores de excepciones, cuando es registrado el seguimiento completo de la pila de excepciones. TYPO3 versiones 7.6.57 ELTS, 8.7.47 ELTS, 9.5.34 ELTS, 10.4.29, 11.5.11 contienen una correcci\u00f3n del problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-532"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:elts:*:*:*", "versionStartIncluding": "7.0.0", "versionEndExcluding": "7.6.57", "matchCriteriaId": "A15251A1-BC05-4C05-AED2-0E2CF75BB054"}, {"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:elts:*:*:*", "versionStartIncluding": "8.0.0", "versionEndExcluding": "8.7.47", "matchCriteriaId": "CD542E1B-F3BA-4816-B97D-D877EFADA02D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:elts:*:*:*", "versionStartIncluding": "9.0.0", "versionEndExcluding": "9.5.35", "matchCriteriaId": "83732441-A020-4401-A274-067B95354BB6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:*:*:*:*", "versionStartIncluding": "10.0.0", "versionEndExcluding": "10.4.29", "matchCriteriaId": "272C6A8B-94DB-4A74-BB3A-24CD0486DFA7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:*:*:*:*", "versionStartIncluding": "11.0.0", "versionEndExcluding": "11.5.11", "matchCriteriaId": "772D645D-5158-416C-BF2C-74E5E43EF1DC"}]}]}], "references": [{"url": "https://github.com/TYPO3/typo3/commit/c93ea692e7dfef03b7c50fe5437487545bee4d6a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/TYPO3/typo3/security/advisories/GHSA-fh99-4pgr-8j99", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://typo3.org/security/advisory/typo3-core-sa-2022-002", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/TYPO3/typo3/commit/c93ea692e7dfef03b7c50fe5437487545bee4d6a"}}