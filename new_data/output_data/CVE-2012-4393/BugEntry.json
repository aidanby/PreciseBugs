{"buggy_code": ["<?php\n\n/**\n* ownCloud - bookmarks plugin\n*\n* @author Arthur Schiwon\n* @copyright 2011 Arthur Schiwon blizzz@arthur-schiwon.de\n* \n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n* License as published by the Free Software Foundation; either \n* version 3 of the License, or any later version.\n* \n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n*  \n* You should have received a copy of the GNU Lesser General Public \n* License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n* \n*/\n\n//no apps or filesystem\n$RUNTIME_NOSETUPFS=true;\n\n \n\n// Check if we are a user\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('bookmarks');\n\nrequire_once(OC::$APPSROOT . '/apps/bookmarks/bookmarksHelper.php');\n$id = addBookmark($_POST['url'], $_POST['title'], $_POST['tags']);\nOCP\\JSON::success(array('data' => $id));", "<?php\n\n/**\n* ownCloud - bookmarks plugin\n*\n* @author Arthur Schiwon\n* @copyright 2011 Arthur Schiwon blizzz@arthur-schiwon.de\n* \n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n* License as published by the Free Software Foundation; either \n* version 3 of the License, or any later version.\n* \n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n*  \n* You should have received a copy of the GNU Lesser General Public \n* License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n* \n*/\n\n//no apps or filesystem\n$RUNTIME_NOSETUPFS=true;\n\n \n\n// Check if we are a user\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('bookmarks');\n\n$id = $_POST['id'];\nif (!OC_Bookmarks_Bookmarks::deleteUrl($id)){\n\tOC_JSON::error();\n\texit();\n}\n\nOCP\\JSON::success();\n", "<?php\n\n/**\n* ownCloud - bookmarks plugin - edit bookmark script\n*\n* @author Golnaz Nilieh\n* @copyright 2011 Golnaz Nilieh <golnaz.nilieh@gmail.com>\n* \n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n* License as published by the Free Software Foundation; either \n* version 3 of the License, or any later version.\n* \n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n*  \n* You should have received a copy of the GNU Lesser General Public \n* License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n* \n*/\n\n//no apps or filesystem\n$RUNTIME_NOSETUPFS=true;\n\n \n\n// Check if we are a user\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('bookmarks');\n\n$CONFIG_DBTYPE = OCP\\Config::getSystemValue( \"dbtype\", \"sqlite\" );\nif( $CONFIG_DBTYPE == 'sqlite' or $CONFIG_DBTYPE == 'sqlite3' ){\n\t$_ut = \"strftime('%s','now')\";\n} elseif($CONFIG_DBTYPE == 'pgsql') {\n\t$_ut = 'date_part(\\'epoch\\',now())::integer';\n} else {\n\t$_ut = \"UNIX_TIMESTAMP()\";\n}\n\n$bookmark_id = (int)$_POST[\"id\"];\n$user_id = OCP\\USER::getUser();\n\n$query = OCP\\DB::prepare(\"\n\tUPDATE *PREFIX*bookmarks\n\tSET url = ?, title =?, lastmodified = $_ut\n\tWHERE id = ?\n\tAND user_id = ?\n\t\");\n\n$params=array(\n\thtmlspecialchars_decode($_POST[\"url\"]),\n\thtmlspecialchars_decode($_POST[\"title\"]),\n\t$bookmark_id,\n\t$user_id,\n\t);\n\n$result = $query->execute($params);\n\n# Abort the operation if bookmark couldn't be set (probably because the user is not allowed to edit this bookmark)\nif ($result->numRows() == 0) exit();\n\n# Remove old tags and insert new ones.\n$query = OCP\\DB::prepare(\"\n\tDELETE FROM *PREFIX*bookmarks_tags\n\tWHERE bookmark_id = $bookmark_id\n\t\");\n\n$query->execute();\n\n$query = OCP\\DB::prepare(\"\n\tINSERT INTO *PREFIX*bookmarks_tags\n\t(bookmark_id, tag)\n\tVALUES (?, ?)\n\t\");\n\n$tags = explode(' ', urldecode($_POST[\"tags\"]));\nforeach ($tags as $tag) {\n\tif(empty($tag)) {\n\t\t//avoid saving blankspaces\n\t\tcontinue;\n\t}\n\t$params = array($bookmark_id, trim($tag));\n\t$query->execute($params);\n}\n", "<?php\n/**\n * Copyright (c) 2011 Georg Ehrke <ownclouddev at georgswebsite dot de>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n \n\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('calendar');\n\n$cal = $_POST[\"calendarid\"];\n$calendar = OC_Calendar_App::getCalendar($cal, true);\nif(!$calendar){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\n$del = OC_Calendar_Calendar::deleteCalendar($cal);\nif($del == true){\n\tOCP\\JSON::success();\n}else{\n\tOCP\\JSON::error(array('error'=>'dberror'));\n}", "<?php\n/**\n * Copyright (c) 2011 Bart Visscher <bartv@thisnet.nl>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n\n \nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('calendar');\n\n$calendarcolor_options = OC_Calendar_Calendar::getCalendarColorOptions();\n$calendar = OC_Calendar_App::getCalendar($_GET['calendarid'], true);\nif(!$calendar){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\n$tmpl = new OCP\\Template(\"calendar\", \"part.editcalendar\");\n$tmpl->assign('new', false);\n$tmpl->assign('calendarcolor_options', $calendarcolor_options);\n$tmpl->assign('calendar', $calendar);\n$tmpl->printPage();", "<?php\n/**\n * Copyright (c) 2011 Bart Visscher <bartv@thisnet.nl>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n\n \n\n// Check if we are a user\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('calendar');\n\nif(trim($_POST['name']) == ''){\n\tOCP\\JSON::error(array('message'=>'empty'));\n\texit;\n}\n$calendars = OC_Calendar_Calendar::allCalendars(OCP\\USER::getUser());\nforeach($calendars as $cal){\n\tif($cal['displayname'] == $_POST['name']){\n\t\tOCP\\JSON::error(array('message'=>'namenotavailable'));\n\t\texit;\n\t}\n}\n\n$userid = OCP\\USER::getUser();\n$calendarid = OC_Calendar_Calendar::addCalendar($userid, strip_tags($_POST['name']), 'VEVENT,VTODO,VJOURNAL', null, 0, $_POST['color']);\nOC_Calendar_Calendar::setCalendarActive($calendarid, 1);\n\n$calendar = OC_Calendar_Calendar::find($calendarid);\n$tmpl = new OCP\\Template('calendar', 'part.choosecalendar.rowfields');\n$tmpl->assign('calendar', $calendar);\nOCP\\JSON::success(array(\n\t'page' => $tmpl->fetchPage(),\n\t'eventSource' => OC_Calendar_Calendar::getEventSourceInfo($calendar),\n));", "<?php\n/**\n * Copyright (c) 2011 Bart Visscher <bartv@thisnet.nl>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n\n \n\n// Check if we are a user\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('calendar');\n\nif(trim($_POST['name']) == ''){\n\tOCP\\JSON::error(array('message'=>'empty'));\n\texit;\n}\n$calendars = OC_Calendar_Calendar::allCalendars(OCP\\USER::getUser());\nforeach($calendars as $cal){\n\tif($cal['displayname'] == $_POST['name'] && $cal['id'] != $_POST['id']){\n\t\tOCP\\JSON::error(array('message'=>'namenotavailable'));\n\t\texit;\n\t}\n}\n\n$calendarid = $_POST['id'];\n$calendar = OC_Calendar_App::getCalendar($calendarid, true);\nif(!$calendar){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\nOC_Calendar_Calendar::editCalendar($calendarid, strip_tags($_POST['name']), null, null, null, $_POST['color']);\nOC_Calendar_Calendar::setCalendarActive($calendarid, $_POST['active']);\n\n$calendar = OC_Calendar_App::getCalendar($calendarid);\n$tmpl = new OCP\\Template('calendar', 'part.choosecalendar.rowfields');\n$tmpl->assign('calendar', $calendar);\nOCP\\JSON::success(array(\n\t'page' => $tmpl->fetchPage(),\n\t'eventSource' => OC_Calendar_Calendar::getEventSourceInfo($calendar),\n));", "<?php\n/**\n * Copyright (c) 2011 Bart Visscher <bartv@thisnet.nl>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n \n\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('calendar');\n\n$id = $_POST['id'];\n$access = OC_Calendar_App::getaccess($id, OC_Calendar_App::EVENT);\nif($access != 'owner' && $access != 'rw'){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\n$result = OC_Calendar_Object::delete($id);\nOCP\\JSON::success();", "<?php\n/**\n * Copyright (c) 2011 Bart Visscher <bartv@thisnet.nl>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n\n \nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('calendar');\n\n$id = $_POST['id'];\n\nif(!array_key_exists('calendar', $_POST)){\n\t$cal = OC_Calendar_Object::getCalendarid($id);\n\t$_POST['calendar'] = $cal;\n}else{\n\t$cal = $_POST['calendar'];\n}\n\n$access = OC_Calendar_App::getaccess($id, OC_Calendar_App::EVENT);\nif($access != 'owner' && $access != 'rw'){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\n\n$errarr = OC_Calendar_Object::validateRequest($_POST);\nif($errarr){\n\t//show validate errors\n\tOCP\\JSON::error($errarr);\n\texit;\n}else{\n\t$data = OC_Calendar_App::getEventObject($id, false, false);\n\t$vcalendar = OC_VObject::parse($data['calendardata']);\n\n\tOC_Calendar_App::isNotModified($vcalendar->VEVENT, $_POST['lastmodified']);\n\tOC_Calendar_Object::updateVCalendarFromRequest($_POST, $vcalendar);\n\n\tOC_Calendar_Object::edit($id, $vcalendar->serialize());\n\tif ($data['calendarid'] != $cal) {\n\t\tOC_Calendar_Object::moveToCalendar($id, $cal);\n\t}\n\tOCP\\JSON::success();\n}", "<?php\n/**\n * Copyright (c) 2011 Bart Visscher <bartv@thisnet.nl>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n \nOCP\\JSON::checkLoggedIn();\n\n$id = $_POST['id'];\n$access = OC_Calendar_App::getaccess($id, OC_Calendar_App::EVENT);\nif($access != 'owner' && $access != 'rw'){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\n$vcalendar = OC_Calendar_App::getVCalendar($id, false, false);\n$vevent = $vcalendar->VEVENT;\n\n$allday = $_POST['allDay'];\n$delta = new DateInterval('P0D');\n$delta->d = $_POST['dayDelta'];\n$delta->i = $_POST['minuteDelta'];\nOC_Calendar_App::isNotModified($vevent, $_POST['lastmodified']);\n\n$dtstart = $vevent->DTSTART;\n$dtend = OC_Calendar_Object::getDTEndFromVEvent($vevent);\n$start_type = $dtstart->getDateType();\n$end_type = $dtend->getDateType();\nif ($allday && $start_type != Sabre_VObject_Property_DateTime::DATE){\n\t$start_type = $end_type = Sabre_VObject_Property_DateTime::DATE;\n\t$dtend->setDateTime($dtend->getDateTime()->modify('+1 day'), $end_type);\n}\nif (!$allday && $start_type == Sabre_VObject_Property_DateTime::DATE){\n\t$start_type = $end_type = Sabre_VObject_Property_DateTime::LOCALTZ;\n}\n$dtstart->setDateTime($dtstart->getDateTime()->add($delta), $start_type);\n$dtend->setDateTime($dtend->getDateTime()->add($delta), $end_type);\nunset($vevent->DURATION);\n\n$vevent->setDateTime('LAST-MODIFIED', 'now', Sabre_VObject_Property_DateTime::UTC);\n$vevent->setDateTime('DTSTAMP', 'now', Sabre_VObject_Property_DateTime::UTC);\n\n$result = OC_Calendar_Object::edit($id, $vcalendar->serialize());\n$lastmodified = $vevent->__get('LAST-MODIFIED')->getDateTime();\nOCP\\JSON::success(array('lastmodified'=>(int)$lastmodified->format('U')));", "<?php\n/**\n * Copyright (c) 2011 Georg Ehrke <ownclouddev at georgswebsite dot de>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n\n \n\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('calendar');\n\n$errarr = OC_Calendar_Object::validateRequest($_POST);\nif($errarr){\n\t//show validate errors\n\tOCP\\JSON::error($errarr);\n\texit;\n}else{\n\t$cal = $_POST['calendar'];\n\t$vcalendar = OC_Calendar_Object::createVCalendarFromRequest($_POST);\n\t$result = OC_Calendar_Object::add($cal, $vcalendar->serialize());\n\tOCP\\JSON::success();\n}", "<?php\n/**\n * Copyright (c) 2012 Georg Ehrke <ownclouddev at georgswebsite dot de>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n//check for calendar rights or create new one\nob_start();\nOCP\\JSON::checkLoggedIn();\nOCP\\App::checkAppEnabled('calendar');\n$nl=\"\\r\\n\";\n$comps = array('VEVENT'=>true, 'VTODO'=>true, 'VJOURNAL'=>true);\n$progressfile = 'import_tmp/' . md5(session_id()) . '.txt';\nif(is_writable('import_tmp/')){\n\t$progressfopen = fopen($progressfile, 'w');\n\tfwrite($progressfopen, '10');\n\tfclose($progressfopen);\n}\n$file = OC_Filesystem::file_get_contents($_POST['path'] . '/' . $_POST['file']);\nif($_POST['method'] == 'new'){\n\t$id = OC_Calendar_Calendar::addCalendar(OCP\\USER::getUser(), $_POST['calname']);\n\tOC_Calendar_Calendar::setCalendarActive($id, 1);\n}else{\n\t$calendar = OC_Calendar_App::getCalendar($_POST['id']);\n\tif($calendar['userid'] != OCP\\USER::getUser()){\n\t\tOCP\\JSON::error();\n\t\texit();\n\t}\n\t$id = $_POST['id'];\n}\nif(is_writable('import_tmp/')){\n\t$progressfopen = fopen($progressfile, 'w');\n\tfwrite($progressfopen, '20');\n\tfclose($progressfopen);\n}\n// normalize the newlines\n$file = str_replace(array(\"\\r\",\"\\n\\n\"), array(\"\\n\",\"\\n\"), $file);\n$lines = explode(\"\\n\", $file);\nunset($file);\nif(is_writable('import_tmp/')){\n\t$progressfopen = fopen($progressfile, 'w');\n\tfwrite($progressfopen, '30');\n\tfclose($progressfopen);\n}\n// analyze the file, group components by uid, and keep refs to originating calendar object\n// $cals is array calendar objects, keys are 1st line# $cal, ie array( $cal => $caldata )\n//   $caldata is array( 'first' => 1st component line#, 'last' => last comp line#, 'end' => end line# )\n//   $caldata is used to create prefix/suffix strings when building import text\n// $uids is array of component arrays, keys are $uid, ie array( $uid => array( $beginlineno => $component ) )\n//   $component is array( 'end' => end line#, 'cal'=> $cal )\n$comp=$uid=$cal=false;\n$cals=$uids=array();\n$i = 0;\nforeach($lines as $line) {\n\n\tif(strpos($line, ':')!==false) {\n\t\tlist($attr, $val) = explode(':', strtoupper($line));\n\t\tif ($attr == 'BEGIN' && $val == 'VCALENDAR') {\n\t\t\t$cal = $i;\n\t\t\t$cals[$cal] = array('first'=>$i,'last'=>$i,'end'=>$i);\n\t\t} elseif ($attr =='BEGIN' && $cal!==false && isset($comps[$val])) {\n\t\t\t$comp = $val;\n\t\t\t$beginNo = $i;\n\t\t} elseif ($attr == 'END' && $cal!==false && $val == 'VCALENDAR') {\n\t\t\tif($comp!==false) {\n\t\t\t\tunset($cals[$cal]); // corrupt calendar, unset it\n\t\t\t} else {\n\t\t\t\t$cals[$cal]['end'] = $i;\n\t\t\t}\n\t\t\t$comp=$uid=$cal=false; // reset calendar\n\t\t} elseif ($attr == 'END' && $comp!==false && $val == $comp) {\n\t\t\tif(! $uid) {\n\t\t\t\t$uid = OC_Calendar_Object::createUID();\n\t\t\t}\n\t\t\t$uids[$uid][$beginNo] = array('end'=>$i, 'cal'=>$cal);\n\t\t\tif ($cals[$cal]['first'] == $cal) {\n\t\t\t\t$cals[$cal]['first'] = $beginNo;\n\t\t\t}\n\t\t\t$cals[$cal]['last'] = $i;\n\t\t\t$comp=$uid=false; // reset component\n\t\t} elseif ($attr ==\"UID\" && $comp!==false) {\n\t\t\tlist($attr, $uid) = explode(':', $line);\n\t\t}\n\t}\n\t$i++;\n}\n// import the calendar\nif(is_writable('import_tmp/')){\n\t$progressfopen = fopen($progressfile, 'w');\n\tfwrite($progressfopen, '60');\n\tfclose($progressfopen);\n}\nforeach($uids as $uid) {\n\t\n\t$prefix=$suffix=$content=array();\n\tforeach($uid as $begin=>$details) {\n\t\t\n\t\t$cal = $details['cal'];\n\t\tif(!isset($cals[$cal])) {\n\t\t\tcontinue; // from corrupt/incomplete calendar\n\t\t}\n\t\t$cdata = $cals[$cal];\n\t\t// if we have multiple components from different calendar objects,\n\t\t// we should really merge their elements (enhancement?) -- 1st one wins for now.\n\t\tif(! count($prefix)) {\n\t\t\t$prefix = array_slice($lines, $cal, $cdata['first'] - $cal);\n\t\t}\n\t\tif(! count($suffix)) {\n\t\t\t$suffix = array_slice($lines, $cdata['last']+1, $cdata['end'] - $cdata['last']);\n\t\t}\n\t\t$content = array_merge($content, array_slice($lines, $begin, $details['end'] - $begin + 1));\n\t}\n\tif(count($content)) {\n\t\t$import = join($nl, array_merge($prefix, $content, $suffix)) . $nl;\n\t\tOC_Calendar_Object::add($id, $import);\n\t}\n}\n// finished import\nif(is_writable('import_tmp/')){\n\t$progressfopen = fopen($progressfile, 'w');\n\tfwrite($progressfopen, '100');\n\tfclose($progressfopen);\n}\nsleep(3);\nif(is_writable('import_tmp/')){\n\tunlink($progressfile);\n}\nOCP\\JSON::success();", "<?php\n/**\n * Copyright (c) 2012 Georg Ehrke <ownclouddev at georgswebsite dot de>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n \nOCP\\JSON::checkLoggedIn();\nif(isset($_POST[\"firstday\"])){\n\tOCP\\Config::setUserValue(OCP\\USER::getUser(), 'calendar', 'firstday', $_POST[\"firstday\"]);\n\tOCP\\JSON::success();\n}else{\n\tOCP\\JSON::error();\n}", "<?php\n/**\n * Copyright (c) 2011 Georg Ehrke <ownclouddev at georgswebsite dot de>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n \nOCP\\JSON::checkLoggedIn();\nif(isset($_POST[\"timeformat\"])){\n\tOCP\\Config::setUserValue(OCP\\USER::getUser(), 'calendar', 'timeformat', $_POST[\"timeformat\"]);\n\tOCP\\JSON::success();\n}else{\n\tOCP\\JSON::error();\n}", "<?php\n/**\n * Copyright (c) 2012 Georg Ehrke <ownclouddev@georgswebsite.de>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n \n$id = strip_tags($_GET['id']);\n$idtype = strip_tags($_GET['idtype']);\n$permission = (int) strip_tags($_GET['permission']);\nswitch($idtype){\n\tcase 'calendar':\n\tcase 'event':\n\t\tbreak;\n\tdefault:\n\t\tOCP\\JSON::error(array('message'=>'unexspected parameter'));\n\t\texit;\n}\nif($idtype == 'calendar' && !OC_Calendar_App::getCalendar($id)){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\nif($idtype == 'event' && !OC_Calendar_App::getEventObject($id)){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\n$sharewith = $_GET['sharewith'];\n$sharetype = strip_tags($_GET['sharetype']);\nswitch($sharetype){\n\tcase 'user':\n\tcase 'group':\n\tcase 'public':\n\t\tbreak;\n\tdefault:\n\t\tOCP\\JSON::error(array('message'=>'unexspected parameter'));\n\t\texit;\n}\nif($sharetype == 'user' && !OCP\\User::userExists($sharewith)){\n\tOCP\\JSON::error(array('message'=>'user not found'));\n\texit;\n}\nif($sharetype == 'group' && !OC_Group::groupExists($sharewith)){\n\tOCP\\JSON::error(array('message'=>'group not found'));\n\texit;\n}\n$success = OC_Calendar_Share::changepermission($sharewith, $sharetype, $id, $permission, (($idtype=='calendar') ? OC_Calendar_Share::CALENDAR : OC_Calendar_Share::EVENT));\nOCP\\JSON::success();", "<?php\n/**\n * Copyright (c) 2012 Georg Ehrke <ownclouddev@georgswebsite.de>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n \n$id = strip_tags($_GET['id']);\n$idtype = strip_tags($_GET['idtype']);\nswitch($idtype){\n\tcase 'calendar':\n\tcase 'event':\n\t\tbreak;\n\tdefault:\n\t\tOCP\\JSON::error(array('message'=>'unexpected parameter'));\n\t\texit;\n}\nif($idtype == 'calendar' && !OC_Calendar_App::getCalendar($id)){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\nif($idtype == 'event' && !OC_Calendar_App::getEventObject($id)){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\n$sharewith = $_GET['sharewith'];\n$sharetype = strip_tags($_GET['sharetype']);\nswitch($sharetype){\n\tcase 'user':\n\tcase 'group':\n\tcase 'public':\n\t\tbreak;\n\tdefault:\n\t\tOCP\\JSON::error(array('message'=>'unexpected parameter'));\n\t\texit;\n}\nif($sharetype == 'user' && !OCP\\User::userExists($sharewith)){\n\tOCP\\JSON::error(array('message'=>'user not found'));\n\texit;\n}\nif($sharetype == 'group' && !OC_Group::groupExists($sharewith)){\n\tOCP\\JSON::error(array('message'=>'group not found'));\n\texit;\n}\nif($sharetype == 'user' && OCP\\USER::getUser() == $sharewith){\n\tOCP\\JSON::error(array('message'=>'you can not share with yourself'));\n}\n$success = OC_Calendar_Share::share(OCP\\USER::getUser(), $sharewith, $sharetype, $id, (($idtype=='calendar') ? OC_Calendar_Share::CALENDAR : OC_Calendar_Share::EVENT));\nif($success){\n\tif($sharetype == 'public'){\n\t\tOCP\\JSON::success(array('message'=>$success));\n\t}else{\n\t\tOCP\\JSON::success(array('message'=>'shared'));\n\t}\n}else{\n\tOCP\\JSON::error(array('message'=>'can not share'));\n\texit;\n}", "<?php\n/**\n * Copyright (c) 2012 Georg Ehrke <ownclouddev@georgswebsite.de>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n \n$id = strip_tags($_GET['id']);\n$idtype = strip_tags($_GET['idtype']);\nswitch($idtype){\n\tcase 'calendar':\n\tcase 'event':\n\t\tbreak;\n\tdefault:\n\t\tOCP\\JSON::error(array('message'=>'unexspected parameter'));\n\t\texit;\n}\nif($idtype == 'calendar' && !OC_Calendar_App::getCalendar($id)){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\nif($idtype == 'event' && !OC_Calendar_App::getEventObject($id)){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\n$sharewith = $_GET['sharewith'];\n$sharetype = strip_tags($_GET['sharetype']);\nswitch($sharetype){\n\tcase 'user':\n\tcase 'group':\n\tcase 'public':\n\t\tbreak;\n\tdefault:\n\t\tOCP\\JSON::error(array('message'=>'unexspected parameter'));\n\t\texit;\n}\nif($sharetype == 'user' && !OCP\\User::userExists($sharewith)){\n\tOCP\\JSON::error(array('message'=>'user not found'));\n\texit;\n}elseif($sharetype == 'group' && !OC_Group::groupExists($sharewith)){\n\tOCP\\JSON::error(array('message'=>'group not found'));\n\texit;\n}\n$success = OC_Calendar_Share::unshare(OCP\\USER::getUser(), $sharewith, $sharetype, $id, (($idtype=='calendar') ? OC_Calendar_Share::CALENDAR : OC_Calendar_Share::EVENT));\nif($success){\n\tOCP\\JSON::success();\n}else{\n\tOCP\\JSON::error(array('message'=>'can not unshare'));\n\texit;\n}", "<?php\n\n/**\n * Copyright (c) 2011, Frank Karlitschek <karlitschek@kde.org>\n * This file is licensed under the Affero General Public License version 3 or later.\n * See the COPYING-README file.\n */\n\n \nOCP\\User::checkAdminUser();\n\n$sites = array();\nfor ($i = 0; $i < sizeof($_POST['site_name']); $i++) {\n\tif (!empty($_POST['site_name'][$i]) && !empty($_POST['site_url'][$i])) {\n\t\tarray_push($sites, array(strip_tags($_POST['site_name'][$i]), strip_tags($_POST['site_url'][$i])));\n\t}\n}\n\nif (sizeof($sites) == 0)\n\tOC_Appconfig::deleteKey('external', 'sites');\nelse\n\tOCP\\Config::setAppValue('external', 'sites', json_encode($sites));\n\necho 'true';\n?>\n", "<?php\n\n// Init owncloud\n\n\nOCP\\JSON::checkLoggedIn();\n\n// Get data\n$dir = stripslashes($_GET[\"dir\"]);\n$files = isset($_GET[\"file\"]) ? stripslashes($_GET[\"file\"]) : stripslashes($_GET[\"files\"]);\n\n$files = explode(';', $files);\n$filesWithError = '';\n$success = true;\n//Now delete\nforeach($files as $file) {\n    if( !OC_Files::delete( $dir, $file )){\n\t\t$filesWithError .= $file . \"\\n\";\n\t\t$success = false;\n\t}\n}\n\nif($success) {\n\tOCP\\JSON::success(array(\"data\" => array( \"dir\" => $dir, \"files\" => $files )));\n} else {\n\tOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Could not delete:\\n\" . $filesWithError )));\n}\n\n?>\n", "<?php\n\n// Init owncloud\n\n\nOCP\\JSON::checkLoggedIn();\n\n// Get data\n$dir = stripslashes($_GET[\"dir\"]);\n$file = stripslashes($_GET[\"file\"]);\n$target = stripslashes($_GET[\"target\"]);\n\n\nif(OC_Files::move($dir,$file,$target,$file)){\n\tOCP\\JSON::success(array(\"data\" => array( \"dir\" => $dir, \"files\" => $file )));\n}else{\n\tOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Could not move $file\" )));\n}\n\n?>\n", "<?php\n\n// Init owncloud\n\n\nOCP\\JSON::checkLoggedIn();\n\n// Get the params\n$dir = isset( $_POST['dir'] ) ? stripslashes($_POST['dir']) : '';\n$filename = isset( $_POST['filename'] ) ? stripslashes($_POST['filename']) : '';\n$content = isset( $_POST['content'] ) ? $_POST['content'] : '';\n$source = isset( $_POST['source'] ) ? stripslashes($_POST['source']) : '';\n\nif($filename == '') {\n\tOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Empty Filename\" )));\n\texit();\n}\nif(strpos($filename,'/')!==false){\n\tOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Invalid Filename\" )));\n\texit();\n}\n\nif($source){\n\tif(substr($source,0,8)!='https://' and substr($source,0,7)!='http://'){\n\t\tOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Not a valid source\" )));\n\t\texit();\n\t}\n\t$sourceStream=fopen($source,'rb');\n\t$target=$dir.'/'.$filename;\n\t$result=OC_Filesystem::file_put_contents($target,$sourceStream);\n\tif($result){\n\t\t$mime=OC_Filesystem::getMimetype($target);\n\t\tOCP\\JSON::success(array(\"data\" => array('mime'=>$mime)));\n\t\texit();\n\t}else{\n\t\tOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Error while downloading \".$source. ' to '.$target )));\n\t\texit();\n\t}\n}else{\n\tif($content){\n\t\tif(OC_Filesystem::file_put_contents($dir.'/'.$filename,$content)){\n\t\t\tOCP\\JSON::success(array(\"data\" => array('content'=>$content)));\n\t\t\texit();\n\t\t}\n\t}elseif(OC_Files::newFile($dir, $filename, 'file')){\n\t\tOCP\\JSON::success(array(\"data\" => array('content'=>$content)));\n\t\texit();\n\t}\n}\n\n\nOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Error when creating the file\" )));\n", "<?php\n\n// Init owncloud\n\n\nOCP\\JSON::checkLoggedIn();\n\n// Get the params\n$dir = isset( $_POST['dir'] ) ? stripslashes($_POST['dir']) : '';\n$foldername = isset( $_POST['foldername'] ) ? stripslashes($_POST['foldername']) : '';\n\nif(trim($foldername) == '') {\n\tOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Empty Foldername\" )));\n\texit();\n}\nif(strpos($foldername,'/')!==false){\n\tOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Invalid Foldername\" )));\n\texit();\n}\n\nif(OC_Files::newFile($dir, stripslashes($foldername), 'dir')) {\n\tOCP\\JSON::success(array(\"data\" => array()));\n\texit();\n}\n\nOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Error when creating the folder\" )));\n", "<?php\n\n// Init owncloud\n\n\nOCP\\JSON::checkLoggedIn();\n\n// Get data\n$dir = stripslashes($_GET[\"dir\"]);\n$file = stripslashes($_GET[\"file\"]);\n$newname = stripslashes($_GET[\"newname\"]);\n\n// Delete\nif( OC_Files::move( $dir, $file, $dir, $newname )) {\n\tOCP\\JSON::success(array(\"data\" => array( \"dir\" => $dir, \"file\" => $file, \"newname\" => $newname )));\n}\nelse{\n\tOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Unable to rename file\" )));\n}\n\n?>\n", "<?php\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('files_sharing');\n$user = OCP\\USER::getUser();\n// TODO translations\n$type = (strpos($_POST['file'], '.') === false) ? 'folder' : 'file';\n$subject = $user.' shared a '.$type.' with you';\n$link = $_POST['link'];\n$text = $user.' shared the '.$type.' '.$_POST['file'].' with you. It is available for download here: '.$link;\n$fromaddress = OCP\\Config::getUserValue($user, 'settings', 'email', 'sharing-noreply@'.OCP\\Util::getServerHost());\nOCP\\Util::sendMail($_POST['toaddress'], $_POST['toaddress'], $subject, $text, $fromaddress, $user);\n", "<?php\nrequire_once(OC::$APPSROOT . '/apps/files_sharing/lib_share.php');\n\nOCP\\JSON::checkAppEnabled('files_sharing');\nOCP\\JSON::checkLoggedIn();\n\n$source = '/'.OCP\\USER::getUser().'/files'.$_POST['source'];\n$uid_shared_with = $_POST['uid_shared_with'];\n$permissions = $_POST['permissions'];\nOC_Share::setPermissions($source, $uid_shared_with, $permissions);\n\nOCP\\JSON::success();\n\n?>\n", "<?php\nrequire_once(OC::$APPSROOT . '/apps/files_sharing/lib_share.php');\n\nOCP\\JSON::checkAppEnabled('files_sharing');\nOCP\\JSON::checkLoggedIn();\n\n$userDirectory = '/'.OCP\\USER::getUser().'/files';\n$sources = explode(';', $_POST['sources']);\n$uid_shared_with = $_POST['uid_shared_with'];\n$permissions = $_POST['permissions'];\nforeach ($sources as $source) {\n\t$file = OC_FileCache::get($source);\n\t$path = ltrim($source, '/'); \n\t$source = $userDirectory.$source;\n\t// Check if the file exists or if the file is being reshared\n\tif ($source && $file['encrypted'] == false && (OC_FILESYSTEM::file_exists($path) && OC_FILESYSTEM::is_readable($path) || OC_Share::getSource($source))) {\n\t\ttry {\n\t\t\t$shared = new OC_Share($source, $uid_shared_with, $permissions);\n\t\t\t// If this is a private link, return the token\n\t\t\tif ($uid_shared_with == OC_Share::PUBLICLINK) {\n\t\t\t\tOCP\\JSON::success(array('data' => $shared->getToken()));\n\t\t\t} else {\n\t\t\t\tOCP\\JSON::success();\n\t\t\t}\n\t\t} catch (Exception $exception) {\n\t\t\tOCP\\Util::writeLog('files_sharing', 'Unexpected Error : '.$exception->getMessage(), OCP\\Util::ERROR);\n\t\t\tOCP\\JSON::error(array('data' => array('message' => $exception->getMessage())));\n\t\t}\n\t} else {\n\t\tif ($file['encrypted'] == true) {\n\t\t\tOCP\\JSON::error(array('data' => array('message' => 'Encrypted files cannot be shared')));\n\t\t} else {\n\t\t\tOCP\\Util::writeLog('files_sharing', 'File does not exist or is not readable :'.$source, OCP\\Util::ERROR);\n\t\t\tOCP\\JSON::error(array('data' => array('message' => 'File does not exist or is not readable')));\n\t\t}\n\t}\n}\n\n?>\n", "<?php\n\nOCP\\JSON::checkAppEnabled('files_sharing');\nOCP\\JSON::checkAdminUser();\nif ($_POST['resharing'] == true) {\n\tOCP\\Config::setAppValue('files_sharing', 'resharing', 'yes');\n} else {\n\tOCP\\Config::setAppValue('files_sharing', 'resharing', 'no');\n}\n\n?>\n", "<?php\n\nOCP\\JSON::checkAppEnabled('files_sharing');\nOCP\\JSON::checkAdminUser();\nif ($_POST['allowSharingWithEveryone'] == true) {\n\tOCP\\Config::setAppValue('files_sharing', 'allowSharingWithEveryone', 'yes');\n} else {\n\tOCP\\Config::setAppValue('files_sharing', 'allowSharingWithEveryone', 'no');\n}", "<?php\nrequire_once(OC::$APPSROOT . '/apps/files_sharing/lib_share.php');\n\nOCP\\JSON::checkAppEnabled('files_sharing');\nOCP\\JSON::checkLoggedIn();\n\n$source = '/'.OCP\\USER::getUser().'/files'.$_POST['source'];\n$uid_shared_with = $_POST['uid_shared_with'];\nOC_Share::unshare($source, $uid_shared_with);\n\nOCP\\JSON::success();\n\n?>\n", "<?php\n/**\n * ownCloud - files_texteditor\n *\n * @author Tom Needham\n * @copyright 2011 Tom Needham contact@tomneedham.com\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n *\n * You should have received a copy of the GNU Affero General Public\n * License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n// Init owncloud\n \n\n\n// Check if we are a user\nOCP\\JSON::checkLoggedIn();\n\n// Get paramteres\n$filecontents = isset($_POST['filecontents']) ? $_POST['filecontents'] : false;\n$path = isset($_POST['path']) ? $_POST['path'] : '';\n$mtime = isset($_POST['mtime']) ? $_POST['mtime'] : '';\n\nif($path != '' && $mtime != '' && $filecontents)\n{\n\t// Get file mtime\n\t$filemtime = OC_Filesystem::filemtime($path);\n\tif($mtime != $filemtime)\n\t{\n\t\t// Then the file has changed since opening\n\t\tOCP\\JSON::error();\n\t\tOCP\\Util::writeLog('files_texteditor',\"File: \".$path.\" modified since opening.\",OCP\\Util::ERROR);\t\n\t}\n\telse\n\t{\n\t\t// File same as when opened\n\t\t// Save file\n\t\tif(OC_Filesystem::is_writable($path))\n\t\t{\n\t\t\tOC_Filesystem::file_put_contents($path, $filecontents);\n\t\t\t// Clear statcache\n\t\t\tclearstatcache();\n\t\t\t// Get new mtime\n\t\t\t$newmtime = OC_Filesystem::filemtime($path);\n\t\t\tOCP\\JSON::success(array('data' => array('mtime' => $newmtime)));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not writeable!\n\t\t\tOCP\\JSON::error(array('data' => array( 'message' => 'Insufficient permissions')));\t\n\t\t\tOCP\\Util::writeLog('files_texteditor',\"User does not have permission to write to file: \".$path,OCP\\Util::ERROR);\n\t\t}\n\t}\n} else if($path == ''){\n\tOCP\\JSON::error(array('data' => array( 'message' => 'File path not supplied')));\n\tOCP\\Util::writeLog('files_texteditor','No file path supplied', OCP\\Util::ERROR);\n} else if($mtime == ''){\n\tOCP\\JSON::error(array('data' => array( 'message' => 'File mtime not supplied')));\n\tOCP\\Util::writeLog('files_texteditor','No file mtime supplied' ,OCP\\Util::ERROR);\n} else if(!$filecontents){\n\tOCP\\JSON::error(array('data' => array( 'message' => 'File contents not supplied')));\n\tOCP\\Util::writeLog('files_texteditor','The file contents was not supplied',OCP\\Util::ERROR);\t\n}\n", "<?php\n\nOCP\\JSON::checkAppEnabled('files_versions');\n\nrequire_once('apps/files_versions/versions.php');\n\n$userDirectory = \"/\".OCP\\USER::getUser().\"/files\";\n\n$file = $_GET['file'];\n$revision=(int)$_GET['revision'];\n\nif( OCA_Versions\\Storage::isversioned( $file ) ) {\n\tif(OCA_Versions\\Storage::rollback( $file, $revision )){\n\t\tOCP\\JSON::success(array(\"data\" => array( \"revision\" => $revision, \"file\" => $file )));\n\t}else{\n\t\tOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Could not revert:\" . $file )));\n\t}\n}\n", "<?php\n\n/**\n* ownCloud - gallery application\n*\n* @author Bartek Przybylski\n* @copyright 2012 Bartek Przybylski bart.p.pl@gmail.com\n* \n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n* License as published by the Free Software Foundation; either \n* version 3 of the License, or any later version.\n* \n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n*  \n* You should have received a copy of the GNU Lesser General Public \n* License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n* \n*/\n\n \nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('gallery');\n\nOC_Gallery_Album::create(OCP\\USER::getUser(), $_GET['album_name']);\n\nOCP\\JSON::success(array('name' => $_GET['album_name']));\n\n?>\n", "<?php\n\n/**\n* ownCloud - gallery application\n*\n* @author Bartek Przybylski\n* @copyright 2012 Bartek Przybylski bartek@alefzero.eu\n* \n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n* License as published by the Free Software Foundation; either \n* version 3 of the License, or any later version.\n* \n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n*  \n* You should have received a copy of the GNU Lesser General Public \n* License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n* \n*/\n\n \n\nif (!isset($_GET['token']) || !isset($_GET['operation'])) {\n  OCP\\JSON::error(array('cause' => 'Not enought arguments'));\n  exit;\n}\n\n$operation = $_GET['operation'];\n$token = $_GET['token'];\n\nif (!OC_Gallery_Sharing::isTokenValid($token)) {\n  OCP\\JSON::error(array('cause' => 'Given token is not valid'));\n  exit;\n}\n\nfunction handleGetGallery($token, $path) {\n  $owner = OC_Gallery_Sharing::getTokenOwner($token);\n  $apath = OC_Gallery_Sharing::getPath($token);\n\n  if ($path == false)\n    $root = $apath;\n  else\n    $root =  rtrim($apath,'/').$path;\n\n  $r = OC_Gallery_Album::find($owner, null, $root);\n  $albums = array();\n  $photos = array();\n  $albumId = -1;\n  if ($row = $r->fetchRow()) {\n    $albumId = $row['album_id'];\n  }\n  if ($albumId != -1) {\n\n    if (OC_Gallery_Sharing::isRecursive($token)) {\n      $r = OC_Gallery_Album::find($owner, null, null, $root);\n      while ($row = $r->fetchRow())\n        $albums[] = $row['album_name'];\n    }\n\n    $r = OC_Gallery_Photo::find($albumId);\n    while ($row = $r->fetchRow())\n      $photos[] = $row['file_path'];\n  }\n\n  OCP\\JSON::success(array('albums' => $albums, 'photos' => $photos));\n}\n\nfunction handleGetThumbnail($token, $imgpath) {\n  $owner = OC_Gallery_Sharing::getTokenOwner($token);\n  $image = OC_Gallery_Photo::getThumbnail($imgpath, $owner);\n  if ($image) {\n    OCP\\Response::enableCaching(3600 * 24); // 24 hour\n    $image->show();\n  }\n}\n\nfunction handleGetAlbumThumbnail($token, $albumname)\n{\n  $owner = OC_Gallery_Sharing::getTokenOwner($token);\n  $file = OCP\\Config::getSystemValue(\"datadirectory\").'/'. $owner .'/gallery/'.$albumname.'.png';\n  $image = new OC_Image($file);\n  if ($image->valid()) {\n    $image->centerCrop();\n    $image->resize(200);\n    $image->fixOrientation();\n    OCP\\Response::enableCaching(3600 * 24); // 24 hour\n    $image->show();\n  }\n}\n\nfunction handleGetPhoto($token, $photo) {\n  $owner = OC_Gallery_Sharing::getTokenOwner($token);\n  $file = OCP\\Config::getSystemValue( \"datadirectory\", OC::$SERVERROOT.\"/data\" ).'/'.$owner.'/files'.urldecode($photo);\n  header('Content-Type: '.OC_Image::getMimeTypeForFile($file));\n  OCP\\Response::sendFile($file);\n}\n\nswitch ($operation) {\n  case 'get_gallery':\n    handleGetGallery($token, isset($_GET['path'])? $_GET['path'] : false);\n    break;\n  case 'get_thumbnail':\n    handleGetThumbnail($token, urldecode($_GET['img']));\n    break;\n  case 'get_album_thumbnail':\n    handleGetAlbumThumbnail($token, urldecode($_GET['albumname']));\n    break;\n  case 'get_photo':\n    handleGetPhoto($token, urldecode($_GET['photo']));\n    break;\n}\n\n", "<?php\n\n// Init owncloud\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('tasks');\n\n$calendars = OC_Calendar_Calendar::allCalendars(OCP\\User::getUser(), true);\n$first_calendar = reset($calendars);\n$cid = $first_calendar['id'];\n\n$input = $_POST['text'];\n$request = array();\n$request['summary'] = $input;\n$request[\"categories\"] = null;\n$request['priority'] = null;\n$request['percent_complete'] = null;\n$request['completed'] = null;\n$request['location'] = null;\n$request['due'] = null;\n$request['description'] = null;\n$vcalendar = OC_Task_App::createVCalendarFromRequest($request);\n$id = OC_Calendar_Object::add($cid, $vcalendar->serialize());\n\n$user_timezone = OCP\\Config::getUserValue(OCP\\User::getUser(), 'calendar', 'timezone', date_default_timezone_get());\n$task = OC_Task_App::arrayForJSON($id, $vcalendar->VTODO, $user_timezone);\n\nOCP\\JSON::success(array('task' => $task));\n", "<?php\n\n// Init owncloud\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('tasks');\n\n$calendars = OC_Calendar_Calendar::allCalendars(OCP\\User::getUser(), true);\n$category_options = OC_Calendar_App::getCategoryOptions();\n$percent_options = range(0, 100, 10);\n$priority_options = OC_Task_App::getPriorityOptions();\n$tmpl = new OCP\\Template('tasks','part.addtaskform');\n$tmpl->assign('calendars',$calendars);\n$tmpl->assign('category_options', $category_options);\n$tmpl->assign('percent_options', $percent_options);\n$tmpl->assign('priority_options', $priority_options);\n$tmpl->assign('details', new OC_VObject('VTODO'));\n$tmpl->assign('categories', '');\n$page = $tmpl->fetchPage();\n\nOCP\\JSON::success(array('data' => array( 'page' => $page )));\n", "<?php\n/**\n * ownCloud - Addressbook\n *\n * @author Jakob Sack\n * @copyright 2011 Jakob Sack mail@jakobsack.de\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n *\n * You should have received a copy of the GNU Affero General Public\n * License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n// Init owncloud\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('tasks');\n\n$id = $_POST['id'];\n$task = OC_Calendar_App::getEventObject( $id );\n\nOC_Calendar_Object::delete($id);\nOCP\\JSON::success(array('data' => array( 'id' => $id )));\n", "<?php\n\n// Init owncloud\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('tasks');\n\n$l10n = new OC_L10N('tasks');\n\n$id = $_POST['id'];\n$vcalendar = OC_Calendar_App::getVCalendar($id);\n\n$errors = OC_Task_App::validateRequest($_POST);\nif (!empty($errors)) {\n\tOCP\\JSON::error(array('data' => array( 'errors' => $errors )));\n\texit();\n}\n\nOC_Task_App::updateVCalendarFromRequest($_POST, $vcalendar);\nOC_Calendar_Object::edit($id, $vcalendar->serialize());\n\n$priority_options = OC_Task_App::getPriorityOptions();\n$tmpl = new OCP\\Template('tasks','part.details');\n$tmpl->assign('priority_options', $priority_options);\n$tmpl->assign('details', $vcalendar->VTODO);\n$tmpl->assign('id', $id);\n$page = $tmpl->fetchPage();\n\n$user_timezone = OCP\\Config::getUserValue(OCP\\User::getUser(), 'calendar', 'timezone', date_default_timezone_get());\n$task = OC_Task_App::arrayForJSON($id, $vcalendar->VTODO, $user_timezone);\n\nOCP\\JSON::success(array('data' => array( 'id' => $id, 'page' => $page, 'task' => $task )));\n"], "fixing_code": ["<?php\n\n/**\n* ownCloud - bookmarks plugin\n*\n* @author Arthur Schiwon\n* @copyright 2011 Arthur Schiwon blizzz@arthur-schiwon.de\n* \n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n* License as published by the Free Software Foundation; either \n* version 3 of the License, or any later version.\n* \n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n*  \n* You should have received a copy of the GNU Lesser General Public \n* License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n* \n*/\n\n//no apps or filesystem\n$RUNTIME_NOSETUPFS=true;\n\n \n\n// Check if we are a user\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('bookmarks');\nOCP\\JSON::callCheck();\n\nrequire_once(OC::$APPSROOT . '/apps/bookmarks/bookmarksHelper.php');\n$id = addBookmark($_POST['url'], $_POST['title'], $_POST['tags']);\nOCP\\JSON::success(array('data' => $id));", "<?php\n\n/**\n* ownCloud - bookmarks plugin\n*\n* @author Arthur Schiwon\n* @copyright 2011 Arthur Schiwon blizzz@arthur-schiwon.de\n* \n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n* License as published by the Free Software Foundation; either \n* version 3 of the License, or any later version.\n* \n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n*  \n* You should have received a copy of the GNU Lesser General Public \n* License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n* \n*/\n\n//no apps or filesystem\n$RUNTIME_NOSETUPFS=true;\n\n \n\n// Check if we are a user\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('bookmarks');\nOCP\\JSON::callCheck();\n\n$id = $_POST['id'];\nif (!OC_Bookmarks_Bookmarks::deleteUrl($id)){\n\tOC_JSON::error();\n\texit();\n}\n\nOCP\\JSON::success();\n", "<?php\n\n/**\n* ownCloud - bookmarks plugin - edit bookmark script\n*\n* @author Golnaz Nilieh\n* @copyright 2011 Golnaz Nilieh <golnaz.nilieh@gmail.com>\n* \n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n* License as published by the Free Software Foundation; either \n* version 3 of the License, or any later version.\n* \n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n*  \n* You should have received a copy of the GNU Lesser General Public \n* License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n* \n*/\n\n//no apps or filesystem\n$RUNTIME_NOSETUPFS=true;\n\n \n\n// Check if we are a user\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('bookmarks');\nOCP\\JSON::callCheck();\n\n$CONFIG_DBTYPE = OCP\\Config::getSystemValue( \"dbtype\", \"sqlite\" );\nif( $CONFIG_DBTYPE == 'sqlite' or $CONFIG_DBTYPE == 'sqlite3' ){\n\t$_ut = \"strftime('%s','now')\";\n} elseif($CONFIG_DBTYPE == 'pgsql') {\n\t$_ut = 'date_part(\\'epoch\\',now())::integer';\n} else {\n\t$_ut = \"UNIX_TIMESTAMP()\";\n}\n\n$bookmark_id = (int)$_POST[\"id\"];\n$user_id = OCP\\USER::getUser();\n\n$query = OCP\\DB::prepare(\"\n\tUPDATE *PREFIX*bookmarks\n\tSET url = ?, title =?, lastmodified = $_ut\n\tWHERE id = ?\n\tAND user_id = ?\n\t\");\n\n$params=array(\n\thtmlspecialchars_decode($_POST[\"url\"]),\n\thtmlspecialchars_decode($_POST[\"title\"]),\n\t$bookmark_id,\n\t$user_id,\n\t);\n\n$result = $query->execute($params);\n\n# Abort the operation if bookmark couldn't be set (probably because the user is not allowed to edit this bookmark)\nif ($result->numRows() == 0) exit();\n\n# Remove old tags and insert new ones.\n$query = OCP\\DB::prepare(\"\n\tDELETE FROM *PREFIX*bookmarks_tags\n\tWHERE bookmark_id = $bookmark_id\n\t\");\n\n$query->execute();\n\n$query = OCP\\DB::prepare(\"\n\tINSERT INTO *PREFIX*bookmarks_tags\n\t(bookmark_id, tag)\n\tVALUES (?, ?)\n\t\");\n\n$tags = explode(' ', urldecode($_POST[\"tags\"]));\nforeach ($tags as $tag) {\n\tif(empty($tag)) {\n\t\t//avoid saving blankspaces\n\t\tcontinue;\n\t}\n\t$params = array($bookmark_id, trim($tag));\n\t$query->execute($params);\n}\n", "<?php\n/**\n * Copyright (c) 2011 Georg Ehrke <ownclouddev at georgswebsite dot de>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n \n\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('calendar');\nOCP\\JSON::callCheck();\n\n$cal = $_POST[\"calendarid\"];\n$calendar = OC_Calendar_App::getCalendar($cal, true);\nif(!$calendar){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\n$del = OC_Calendar_Calendar::deleteCalendar($cal);\nif($del == true){\n\tOCP\\JSON::success();\n}else{\n\tOCP\\JSON::error(array('error'=>'dberror'));\n}", "<?php\n/**\n * Copyright (c) 2011 Bart Visscher <bartv@thisnet.nl>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n\n \nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('calendar');\nOCP\\JSON::callCheck();\n\n$calendarcolor_options = OC_Calendar_Calendar::getCalendarColorOptions();\n$calendar = OC_Calendar_App::getCalendar($_GET['calendarid'], true);\nif(!$calendar){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\n$tmpl = new OCP\\Template(\"calendar\", \"part.editcalendar\");\n$tmpl->assign('new', false);\n$tmpl->assign('calendarcolor_options', $calendarcolor_options);\n$tmpl->assign('calendar', $calendar);\n$tmpl->printPage();", "<?php\n/**\n * Copyright (c) 2011 Bart Visscher <bartv@thisnet.nl>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n\n \n\n// Check if we are a user\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('calendar');\nOCP\\JSON::callCheck();\n\nif(trim($_POST['name']) == ''){\n\tOCP\\JSON::error(array('message'=>'empty'));\n\texit;\n}\n$calendars = OC_Calendar_Calendar::allCalendars(OCP\\USER::getUser());\nforeach($calendars as $cal){\n\tif($cal['displayname'] == $_POST['name']){\n\t\tOCP\\JSON::error(array('message'=>'namenotavailable'));\n\t\texit;\n\t}\n}\n\n$userid = OCP\\USER::getUser();\n$calendarid = OC_Calendar_Calendar::addCalendar($userid, strip_tags($_POST['name']), 'VEVENT,VTODO,VJOURNAL', null, 0, $_POST['color']);\nOC_Calendar_Calendar::setCalendarActive($calendarid, 1);\n\n$calendar = OC_Calendar_Calendar::find($calendarid);\n$tmpl = new OCP\\Template('calendar', 'part.choosecalendar.rowfields');\n$tmpl->assign('calendar', $calendar);\nOCP\\JSON::success(array(\n\t'page' => $tmpl->fetchPage(),\n\t'eventSource' => OC_Calendar_Calendar::getEventSourceInfo($calendar),\n));", "<?php\n/**\n * Copyright (c) 2011 Bart Visscher <bartv@thisnet.nl>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n\n \n\n// Check if we are a user\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('calendar');\nOCP\\JSON::callCheck();\n\nif(trim($_POST['name']) == ''){\n\tOCP\\JSON::error(array('message'=>'empty'));\n\texit;\n}\n$calendars = OC_Calendar_Calendar::allCalendars(OCP\\USER::getUser());\nforeach($calendars as $cal){\n\tif($cal['displayname'] == $_POST['name'] && $cal['id'] != $_POST['id']){\n\t\tOCP\\JSON::error(array('message'=>'namenotavailable'));\n\t\texit;\n\t}\n}\n\n$calendarid = $_POST['id'];\n$calendar = OC_Calendar_App::getCalendar($calendarid, true);\nif(!$calendar){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\nOC_Calendar_Calendar::editCalendar($calendarid, strip_tags($_POST['name']), null, null, null, $_POST['color']);\nOC_Calendar_Calendar::setCalendarActive($calendarid, $_POST['active']);\n\n$calendar = OC_Calendar_App::getCalendar($calendarid);\n$tmpl = new OCP\\Template('calendar', 'part.choosecalendar.rowfields');\n$tmpl->assign('calendar', $calendar);\nOCP\\JSON::success(array(\n\t'page' => $tmpl->fetchPage(),\n\t'eventSource' => OC_Calendar_Calendar::getEventSourceInfo($calendar),\n));", "<?php\n/**\n * Copyright (c) 2011 Bart Visscher <bartv@thisnet.nl>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n \n\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('calendar');\nOCP\\JSON::callCheck();\n\n$id = $_POST['id'];\n$access = OC_Calendar_App::getaccess($id, OC_Calendar_App::EVENT);\nif($access != 'owner' && $access != 'rw'){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\n$result = OC_Calendar_Object::delete($id);\nOCP\\JSON::success();", "<?php\n/**\n * Copyright (c) 2011 Bart Visscher <bartv@thisnet.nl>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n\n \nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('calendar');\nOCP\\JSON::callCheck();\n\n$id = $_POST['id'];\n\nif(!array_key_exists('calendar', $_POST)){\n\t$cal = OC_Calendar_Object::getCalendarid($id);\n\t$_POST['calendar'] = $cal;\n}else{\n\t$cal = $_POST['calendar'];\n}\n\n$access = OC_Calendar_App::getaccess($id, OC_Calendar_App::EVENT);\nif($access != 'owner' && $access != 'rw'){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\n\n$errarr = OC_Calendar_Object::validateRequest($_POST);\nif($errarr){\n\t//show validate errors\n\tOCP\\JSON::error($errarr);\n\texit;\n}else{\n\t$data = OC_Calendar_App::getEventObject($id, false, false);\n\t$vcalendar = OC_VObject::parse($data['calendardata']);\n\n\tOC_Calendar_App::isNotModified($vcalendar->VEVENT, $_POST['lastmodified']);\n\tOC_Calendar_Object::updateVCalendarFromRequest($_POST, $vcalendar);\n\n\tOC_Calendar_Object::edit($id, $vcalendar->serialize());\n\tif ($data['calendarid'] != $cal) {\n\t\tOC_Calendar_Object::moveToCalendar($id, $cal);\n\t}\n\tOCP\\JSON::success();\n}", "<?php\n/**\n * Copyright (c) 2011 Bart Visscher <bartv@thisnet.nl>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n \nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::callCheck();\n\n$id = $_POST['id'];\n$access = OC_Calendar_App::getaccess($id, OC_Calendar_App::EVENT);\nif($access != 'owner' && $access != 'rw'){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\n$vcalendar = OC_Calendar_App::getVCalendar($id, false, false);\n$vevent = $vcalendar->VEVENT;\n\n$allday = $_POST['allDay'];\n$delta = new DateInterval('P0D');\n$delta->d = $_POST['dayDelta'];\n$delta->i = $_POST['minuteDelta'];\nOC_Calendar_App::isNotModified($vevent, $_POST['lastmodified']);\n\n$dtstart = $vevent->DTSTART;\n$dtend = OC_Calendar_Object::getDTEndFromVEvent($vevent);\n$start_type = $dtstart->getDateType();\n$end_type = $dtend->getDateType();\nif ($allday && $start_type != Sabre_VObject_Property_DateTime::DATE){\n\t$start_type = $end_type = Sabre_VObject_Property_DateTime::DATE;\n\t$dtend->setDateTime($dtend->getDateTime()->modify('+1 day'), $end_type);\n}\nif (!$allday && $start_type == Sabre_VObject_Property_DateTime::DATE){\n\t$start_type = $end_type = Sabre_VObject_Property_DateTime::LOCALTZ;\n}\n$dtstart->setDateTime($dtstart->getDateTime()->add($delta), $start_type);\n$dtend->setDateTime($dtend->getDateTime()->add($delta), $end_type);\nunset($vevent->DURATION);\n\n$vevent->setDateTime('LAST-MODIFIED', 'now', Sabre_VObject_Property_DateTime::UTC);\n$vevent->setDateTime('DTSTAMP', 'now', Sabre_VObject_Property_DateTime::UTC);\n\n$result = OC_Calendar_Object::edit($id, $vcalendar->serialize());\n$lastmodified = $vevent->__get('LAST-MODIFIED')->getDateTime();\nOCP\\JSON::success(array('lastmodified'=>(int)$lastmodified->format('U')));", "<?php\n/**\n * Copyright (c) 2011 Georg Ehrke <ownclouddev at georgswebsite dot de>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n\n \n\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('calendar');\nOCP\\JSON::callCheck();\n\n$errarr = OC_Calendar_Object::validateRequest($_POST);\nif($errarr){\n\t//show validate errors\n\tOCP\\JSON::error($errarr);\n\texit;\n}else{\n\t$cal = $_POST['calendar'];\n\t$vcalendar = OC_Calendar_Object::createVCalendarFromRequest($_POST);\n\t$result = OC_Calendar_Object::add($cal, $vcalendar->serialize());\n\tOCP\\JSON::success();\n}", "<?php\n/**\n * Copyright (c) 2012 Georg Ehrke <ownclouddev at georgswebsite dot de>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n//check for calendar rights or create new one\nob_start();\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::callCheck();\nOCP\\App::checkAppEnabled('calendar');\n$nl=\"\\r\\n\";\n$comps = array('VEVENT'=>true, 'VTODO'=>true, 'VJOURNAL'=>true);\n$progressfile = 'import_tmp/' . md5(session_id()) . '.txt';\nif(is_writable('import_tmp/')){\n\t$progressfopen = fopen($progressfile, 'w');\n\tfwrite($progressfopen, '10');\n\tfclose($progressfopen);\n}\n$file = OC_Filesystem::file_get_contents($_POST['path'] . '/' . $_POST['file']);\nif($_POST['method'] == 'new'){\n\t$id = OC_Calendar_Calendar::addCalendar(OCP\\USER::getUser(), $_POST['calname']);\n\tOC_Calendar_Calendar::setCalendarActive($id, 1);\n}else{\n\t$calendar = OC_Calendar_App::getCalendar($_POST['id']);\n\tif($calendar['userid'] != OCP\\USER::getUser()){\n\t\tOCP\\JSON::error();\n\t\texit();\n\t}\n\t$id = $_POST['id'];\n}\nif(is_writable('import_tmp/')){\n\t$progressfopen = fopen($progressfile, 'w');\n\tfwrite($progressfopen, '20');\n\tfclose($progressfopen);\n}\n// normalize the newlines\n$file = str_replace(array(\"\\r\",\"\\n\\n\"), array(\"\\n\",\"\\n\"), $file);\n$lines = explode(\"\\n\", $file);\nunset($file);\nif(is_writable('import_tmp/')){\n\t$progressfopen = fopen($progressfile, 'w');\n\tfwrite($progressfopen, '30');\n\tfclose($progressfopen);\n}\n// analyze the file, group components by uid, and keep refs to originating calendar object\n// $cals is array calendar objects, keys are 1st line# $cal, ie array( $cal => $caldata )\n//   $caldata is array( 'first' => 1st component line#, 'last' => last comp line#, 'end' => end line# )\n//   $caldata is used to create prefix/suffix strings when building import text\n// $uids is array of component arrays, keys are $uid, ie array( $uid => array( $beginlineno => $component ) )\n//   $component is array( 'end' => end line#, 'cal'=> $cal )\n$comp=$uid=$cal=false;\n$cals=$uids=array();\n$i = 0;\nforeach($lines as $line) {\n\n\tif(strpos($line, ':')!==false) {\n\t\tlist($attr, $val) = explode(':', strtoupper($line));\n\t\tif ($attr == 'BEGIN' && $val == 'VCALENDAR') {\n\t\t\t$cal = $i;\n\t\t\t$cals[$cal] = array('first'=>$i,'last'=>$i,'end'=>$i);\n\t\t} elseif ($attr =='BEGIN' && $cal!==false && isset($comps[$val])) {\n\t\t\t$comp = $val;\n\t\t\t$beginNo = $i;\n\t\t} elseif ($attr == 'END' && $cal!==false && $val == 'VCALENDAR') {\n\t\t\tif($comp!==false) {\n\t\t\t\tunset($cals[$cal]); // corrupt calendar, unset it\n\t\t\t} else {\n\t\t\t\t$cals[$cal]['end'] = $i;\n\t\t\t}\n\t\t\t$comp=$uid=$cal=false; // reset calendar\n\t\t} elseif ($attr == 'END' && $comp!==false && $val == $comp) {\n\t\t\tif(! $uid) {\n\t\t\t\t$uid = OC_Calendar_Object::createUID();\n\t\t\t}\n\t\t\t$uids[$uid][$beginNo] = array('end'=>$i, 'cal'=>$cal);\n\t\t\tif ($cals[$cal]['first'] == $cal) {\n\t\t\t\t$cals[$cal]['first'] = $beginNo;\n\t\t\t}\n\t\t\t$cals[$cal]['last'] = $i;\n\t\t\t$comp=$uid=false; // reset component\n\t\t} elseif ($attr ==\"UID\" && $comp!==false) {\n\t\t\tlist($attr, $uid) = explode(':', $line);\n\t\t}\n\t}\n\t$i++;\n}\n// import the calendar\nif(is_writable('import_tmp/')){\n\t$progressfopen = fopen($progressfile, 'w');\n\tfwrite($progressfopen, '60');\n\tfclose($progressfopen);\n}\nforeach($uids as $uid) {\n\t\n\t$prefix=$suffix=$content=array();\n\tforeach($uid as $begin=>$details) {\n\t\t\n\t\t$cal = $details['cal'];\n\t\tif(!isset($cals[$cal])) {\n\t\t\tcontinue; // from corrupt/incomplete calendar\n\t\t}\n\t\t$cdata = $cals[$cal];\n\t\t// if we have multiple components from different calendar objects,\n\t\t// we should really merge their elements (enhancement?) -- 1st one wins for now.\n\t\tif(! count($prefix)) {\n\t\t\t$prefix = array_slice($lines, $cal, $cdata['first'] - $cal);\n\t\t}\n\t\tif(! count($suffix)) {\n\t\t\t$suffix = array_slice($lines, $cdata['last']+1, $cdata['end'] - $cdata['last']);\n\t\t}\n\t\t$content = array_merge($content, array_slice($lines, $begin, $details['end'] - $begin + 1));\n\t}\n\tif(count($content)) {\n\t\t$import = join($nl, array_merge($prefix, $content, $suffix)) . $nl;\n\t\tOC_Calendar_Object::add($id, $import);\n\t}\n}\n// finished import\nif(is_writable('import_tmp/')){\n\t$progressfopen = fopen($progressfile, 'w');\n\tfwrite($progressfopen, '100');\n\tfclose($progressfopen);\n}\nsleep(3);\nif(is_writable('import_tmp/')){\n\tunlink($progressfile);\n}\nOCP\\JSON::success();", "<?php\n/**\n * Copyright (c) 2012 Georg Ehrke <ownclouddev at georgswebsite dot de>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n \nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::callCheck();\n\nif(isset($_POST[\"firstday\"])){\n\tOCP\\Config::setUserValue(OCP\\USER::getUser(), 'calendar', 'firstday', $_POST[\"firstday\"]);\n\tOCP\\JSON::success();\n}else{\n\tOCP\\JSON::error();\n}", "<?php\n/**\n * Copyright (c) 2011 Georg Ehrke <ownclouddev at georgswebsite dot de>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n \nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::callCheck();\n\nif(isset($_POST[\"timeformat\"])){\n\tOCP\\Config::setUserValue(OCP\\USER::getUser(), 'calendar', 'timeformat', $_POST[\"timeformat\"]);\n\tOCP\\JSON::success();\n}else{\n\tOCP\\JSON::error();\n}", "<?php\n/**\n * Copyright (c) 2012 Georg Ehrke <ownclouddev@georgswebsite.de>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n OCP\\JSON::callCheck();\n\n$id = strip_tags($_GET['id']);\n$idtype = strip_tags($_GET['idtype']);\n$permission = (int) strip_tags($_GET['permission']);\nswitch($idtype){\n\tcase 'calendar':\n\tcase 'event':\n\t\tbreak;\n\tdefault:\n\t\tOCP\\JSON::error(array('message'=>'unexspected parameter'));\n\t\texit;\n}\nif($idtype == 'calendar' && !OC_Calendar_App::getCalendar($id)){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\nif($idtype == 'event' && !OC_Calendar_App::getEventObject($id)){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\n$sharewith = $_GET['sharewith'];\n$sharetype = strip_tags($_GET['sharetype']);\nswitch($sharetype){\n\tcase 'user':\n\tcase 'group':\n\tcase 'public':\n\t\tbreak;\n\tdefault:\n\t\tOCP\\JSON::error(array('message'=>'unexspected parameter'));\n\t\texit;\n}\nif($sharetype == 'user' && !OCP\\User::userExists($sharewith)){\n\tOCP\\JSON::error(array('message'=>'user not found'));\n\texit;\n}\nif($sharetype == 'group' && !OC_Group::groupExists($sharewith)){\n\tOCP\\JSON::error(array('message'=>'group not found'));\n\texit;\n}\n$success = OC_Calendar_Share::changepermission($sharewith, $sharetype, $id, $permission, (($idtype=='calendar') ? OC_Calendar_Share::CALENDAR : OC_Calendar_Share::EVENT));\nOCP\\JSON::success();", "<?php\n/**\n * Copyright (c) 2012 Georg Ehrke <ownclouddev@georgswebsite.de>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n OCP\\JSON::callCheck();\n\n$id = strip_tags($_GET['id']);\n$idtype = strip_tags($_GET['idtype']);\nswitch($idtype){\n\tcase 'calendar':\n\tcase 'event':\n\t\tbreak;\n\tdefault:\n\t\tOCP\\JSON::error(array('message'=>'unexpected parameter'));\n\t\texit;\n}\nif($idtype == 'calendar' && !OC_Calendar_App::getCalendar($id)){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\nif($idtype == 'event' && !OC_Calendar_App::getEventObject($id)){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\n$sharewith = $_GET['sharewith'];\n$sharetype = strip_tags($_GET['sharetype']);\nswitch($sharetype){\n\tcase 'user':\n\tcase 'group':\n\tcase 'public':\n\t\tbreak;\n\tdefault:\n\t\tOCP\\JSON::error(array('message'=>'unexpected parameter'));\n\t\texit;\n}\nif($sharetype == 'user' && !OCP\\User::userExists($sharewith)){\n\tOCP\\JSON::error(array('message'=>'user not found'));\n\texit;\n}\nif($sharetype == 'group' && !OC_Group::groupExists($sharewith)){\n\tOCP\\JSON::error(array('message'=>'group not found'));\n\texit;\n}\nif($sharetype == 'user' && OCP\\USER::getUser() == $sharewith){\n\tOCP\\JSON::error(array('message'=>'you can not share with yourself'));\n}\n$success = OC_Calendar_Share::share(OCP\\USER::getUser(), $sharewith, $sharetype, $id, (($idtype=='calendar') ? OC_Calendar_Share::CALENDAR : OC_Calendar_Share::EVENT));\nif($success){\n\tif($sharetype == 'public'){\n\t\tOCP\\JSON::success(array('message'=>$success));\n\t}else{\n\t\tOCP\\JSON::success(array('message'=>'shared'));\n\t}\n}else{\n\tOCP\\JSON::error(array('message'=>'can not share'));\n\texit;\n}", "<?php\n/**\n * Copyright (c) 2012 Georg Ehrke <ownclouddev@georgswebsite.de>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\n OCP\\JSON::callCheck();\n\n$id = strip_tags($_GET['id']);\n$idtype = strip_tags($_GET['idtype']);\nswitch($idtype){\n\tcase 'calendar':\n\tcase 'event':\n\t\tbreak;\n\tdefault:\n\t\tOCP\\JSON::error(array('message'=>'unexspected parameter'));\n\t\texit;\n}\nif($idtype == 'calendar' && !OC_Calendar_App::getCalendar($id)){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\nif($idtype == 'event' && !OC_Calendar_App::getEventObject($id)){\n\tOCP\\JSON::error(array('message'=>'permission denied'));\n\texit;\n}\n$sharewith = $_GET['sharewith'];\n$sharetype = strip_tags($_GET['sharetype']);\nswitch($sharetype){\n\tcase 'user':\n\tcase 'group':\n\tcase 'public':\n\t\tbreak;\n\tdefault:\n\t\tOCP\\JSON::error(array('message'=>'unexspected parameter'));\n\t\texit;\n}\nif($sharetype == 'user' && !OCP\\User::userExists($sharewith)){\n\tOCP\\JSON::error(array('message'=>'user not found'));\n\texit;\n}elseif($sharetype == 'group' && !OC_Group::groupExists($sharewith)){\n\tOCP\\JSON::error(array('message'=>'group not found'));\n\texit;\n}\n$success = OC_Calendar_Share::unshare(OCP\\USER::getUser(), $sharewith, $sharetype, $id, (($idtype=='calendar') ? OC_Calendar_Share::CALENDAR : OC_Calendar_Share::EVENT));\nif($success){\n\tOCP\\JSON::success();\n}else{\n\tOCP\\JSON::error(array('message'=>'can not unshare'));\n\texit;\n}", "<?php\n\n/**\n * Copyright (c) 2011, Frank Karlitschek <karlitschek@kde.org>\n * This file is licensed under the Affero General Public License version 3 or later.\n * See the COPYING-README file.\n */\n\n \nOCP\\User::checkAdminUser();\nOCP\\JSON::callCheck();\n\n$sites = array();\nfor ($i = 0; $i < sizeof($_POST['site_name']); $i++) {\n\tif (!empty($_POST['site_name'][$i]) && !empty($_POST['site_url'][$i])) {\n\t\tarray_push($sites, array(strip_tags($_POST['site_name'][$i]), strip_tags($_POST['site_url'][$i])));\n\t}\n}\n\nif (sizeof($sites) == 0)\n\tOC_Appconfig::deleteKey('external', 'sites');\nelse\n\tOCP\\Config::setAppValue('external', 'sites', json_encode($sites));\n\necho 'true';\n?>\n", "<?php\n\n// Init owncloud\n\n\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::callCheck();\n\n// Get data\n$dir = stripslashes($_GET[\"dir\"]);\n$files = isset($_GET[\"file\"]) ? stripslashes($_GET[\"file\"]) : stripslashes($_GET[\"files\"]);\n\n$files = explode(';', $files);\n$filesWithError = '';\n$success = true;\n//Now delete\nforeach($files as $file) {\n    if( !OC_Files::delete( $dir, $file )){\n\t\t$filesWithError .= $file . \"\\n\";\n\t\t$success = false;\n\t}\n}\n\nif($success) {\n\tOCP\\JSON::success(array(\"data\" => array( \"dir\" => $dir, \"files\" => $files )));\n} else {\n\tOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Could not delete:\\n\" . $filesWithError )));\n}\n\n?>\n", "<?php\n\n// Init owncloud\n\n\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::callCheck();\n\n// Get data\n$dir = stripslashes($_GET[\"dir\"]);\n$file = stripslashes($_GET[\"file\"]);\n$target = stripslashes($_GET[\"target\"]);\n\n\nif(OC_Files::move($dir,$file,$target,$file)){\n\tOCP\\JSON::success(array(\"data\" => array( \"dir\" => $dir, \"files\" => $file )));\n}else{\n\tOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Could not move $file\" )));\n}\n\n?>\n", "<?php\n\n// Init owncloud\n\n\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::callCheck();\n\n// Get the params\n$dir = isset( $_POST['dir'] ) ? stripslashes($_POST['dir']) : '';\n$filename = isset( $_POST['filename'] ) ? stripslashes($_POST['filename']) : '';\n$content = isset( $_POST['content'] ) ? $_POST['content'] : '';\n$source = isset( $_POST['source'] ) ? stripslashes($_POST['source']) : '';\n\nif($filename == '') {\n\tOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Empty Filename\" )));\n\texit();\n}\nif(strpos($filename,'/')!==false){\n\tOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Invalid Filename\" )));\n\texit();\n}\n\nif($source){\n\tif(substr($source,0,8)!='https://' and substr($source,0,7)!='http://'){\n\t\tOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Not a valid source\" )));\n\t\texit();\n\t}\n\t$sourceStream=fopen($source,'rb');\n\t$target=$dir.'/'.$filename;\n\t$result=OC_Filesystem::file_put_contents($target,$sourceStream);\n\tif($result){\n\t\t$mime=OC_Filesystem::getMimetype($target);\n\t\tOCP\\JSON::success(array(\"data\" => array('mime'=>$mime)));\n\t\texit();\n\t}else{\n\t\tOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Error while downloading \".$source. ' to '.$target )));\n\t\texit();\n\t}\n}else{\n\tif($content){\n\t\tif(OC_Filesystem::file_put_contents($dir.'/'.$filename,$content)){\n\t\t\tOCP\\JSON::success(array(\"data\" => array('content'=>$content)));\n\t\t\texit();\n\t\t}\n\t}elseif(OC_Files::newFile($dir, $filename, 'file')){\n\t\tOCP\\JSON::success(array(\"data\" => array('content'=>$content)));\n\t\texit();\n\t}\n}\n\n\nOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Error when creating the file\" )));\n", "<?php\n\n// Init owncloud\n\n\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::callCheck();\n\n// Get the params\n$dir = isset( $_POST['dir'] ) ? stripslashes($_POST['dir']) : '';\n$foldername = isset( $_POST['foldername'] ) ? stripslashes($_POST['foldername']) : '';\n\nif(trim($foldername) == '') {\n\tOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Empty Foldername\" )));\n\texit();\n}\nif(strpos($foldername,'/')!==false){\n\tOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Invalid Foldername\" )));\n\texit();\n}\n\nif(OC_Files::newFile($dir, stripslashes($foldername), 'dir')) {\n\tOCP\\JSON::success(array(\"data\" => array()));\n\texit();\n}\n\nOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Error when creating the folder\" )));\n", "<?php\n\n// Init owncloud\n\n\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::callCheck();\n\n// Get data\n$dir = stripslashes($_GET[\"dir\"]);\n$file = stripslashes($_GET[\"file\"]);\n$newname = stripslashes($_GET[\"newname\"]);\n\n// Delete\nif( OC_Files::move( $dir, $file, $dir, $newname )) {\n\tOCP\\JSON::success(array(\"data\" => array( \"dir\" => $dir, \"file\" => $file, \"newname\" => $newname )));\n}\nelse{\n\tOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Unable to rename file\" )));\n}\n\n?>\n", "<?php\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::callCheck();\nOCP\\JSON::checkAppEnabled('files_sharing');\n$user = OCP\\USER::getUser();\n// TODO translations\n$type = (strpos($_POST['file'], '.') === false) ? 'folder' : 'file';\n$subject = $user.' shared a '.$type.' with you';\n$link = $_POST['link'];\n$text = $user.' shared the '.$type.' '.$_POST['file'].' with you. It is available for download here: '.$link;\n$fromaddress = OCP\\Config::getUserValue($user, 'settings', 'email', 'sharing-noreply@'.OCP\\Util::getServerHost());\nOCP\\Util::sendMail($_POST['toaddress'], $_POST['toaddress'], $subject, $text, $fromaddress, $user);\n", "<?php\nrequire_once(OC::$APPSROOT . '/apps/files_sharing/lib_share.php');\n\nOCP\\JSON::checkAppEnabled('files_sharing');\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::callCheck();\n\n$source = '/'.OCP\\USER::getUser().'/files'.$_POST['source'];\n$uid_shared_with = $_POST['uid_shared_with'];\n$permissions = $_POST['permissions'];\nOC_Share::setPermissions($source, $uid_shared_with, $permissions);\n\nOCP\\JSON::success();\n\n?>\n", "<?php\nrequire_once(OC::$APPSROOT . '/apps/files_sharing/lib_share.php');\n\nOCP\\JSON::checkAppEnabled('files_sharing');\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::callCheck();\n\n$userDirectory = '/'.OCP\\USER::getUser().'/files';\n$sources = explode(';', $_POST['sources']);\n$uid_shared_with = $_POST['uid_shared_with'];\n$permissions = $_POST['permissions'];\nforeach ($sources as $source) {\n\t$file = OC_FileCache::get($source);\n\t$path = ltrim($source, '/'); \n\t$source = $userDirectory.$source;\n\t// Check if the file exists or if the file is being reshared\n\tif ($source && $file['encrypted'] == false && (OC_FILESYSTEM::file_exists($path) && OC_FILESYSTEM::is_readable($path) || OC_Share::getSource($source))) {\n\t\ttry {\n\t\t\t$shared = new OC_Share($source, $uid_shared_with, $permissions);\n\t\t\t// If this is a private link, return the token\n\t\t\tif ($uid_shared_with == OC_Share::PUBLICLINK) {\n\t\t\t\tOCP\\JSON::success(array('data' => $shared->getToken()));\n\t\t\t} else {\n\t\t\t\tOCP\\JSON::success();\n\t\t\t}\n\t\t} catch (Exception $exception) {\n\t\t\tOCP\\Util::writeLog('files_sharing', 'Unexpected Error : '.$exception->getMessage(), OCP\\Util::ERROR);\n\t\t\tOCP\\JSON::error(array('data' => array('message' => $exception->getMessage())));\n\t\t}\n\t} else {\n\t\tif ($file['encrypted'] == true) {\n\t\t\tOCP\\JSON::error(array('data' => array('message' => 'Encrypted files cannot be shared')));\n\t\t} else {\n\t\t\tOCP\\Util::writeLog('files_sharing', 'File does not exist or is not readable :'.$source, OCP\\Util::ERROR);\n\t\t\tOCP\\JSON::error(array('data' => array('message' => 'File does not exist or is not readable')));\n\t\t}\n\t}\n}\n\n?>\n", "<?php\n\nOCP\\JSON::callCheck();\n\nOCP\\JSON::checkAppEnabled('files_sharing');\nOCP\\JSON::checkAdminUser();\nif ($_POST['resharing'] == true) {\n\tOCP\\Config::setAppValue('files_sharing', 'resharing', 'yes');\n} else {\n\tOCP\\Config::setAppValue('files_sharing', 'resharing', 'no');\n}\n\n?>\n", "<?php\n\nOCP\\JSON::callCheck();\n\nOCP\\JSON::checkAppEnabled('files_sharing');\nOCP\\JSON::checkAdminUser();\nif ($_POST['allowSharingWithEveryone'] == true) {\n\tOCP\\Config::setAppValue('files_sharing', 'allowSharingWithEveryone', 'yes');\n} else {\n\tOCP\\Config::setAppValue('files_sharing', 'allowSharingWithEveryone', 'no');\n}", "<?php\nrequire_once(OC::$APPSROOT . '/apps/files_sharing/lib_share.php');\n\nOCP\\JSON::checkAppEnabled('files_sharing');\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::callCheck();\n\n$source = '/'.OCP\\USER::getUser().'/files'.$_POST['source'];\n$uid_shared_with = $_POST['uid_shared_with'];\nOC_Share::unshare($source, $uid_shared_with);\n\nOCP\\JSON::success();\n\n?>\n", "<?php\n/**\n * ownCloud - files_texteditor\n *\n * @author Tom Needham\n * @copyright 2011 Tom Needham contact@tomneedham.com\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n *\n * You should have received a copy of the GNU Affero General Public\n * License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n// Init owncloud\n \n\n\n// Check if we are a user\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::callCheck();\n\n// Get paramteres\n$filecontents = isset($_POST['filecontents']) ? $_POST['filecontents'] : false;\n$path = isset($_POST['path']) ? $_POST['path'] : '';\n$mtime = isset($_POST['mtime']) ? $_POST['mtime'] : '';\n\nif($path != '' && $mtime != '' && $filecontents)\n{\n\t// Get file mtime\n\t$filemtime = OC_Filesystem::filemtime($path);\n\tif($mtime != $filemtime)\n\t{\n\t\t// Then the file has changed since opening\n\t\tOCP\\JSON::error();\n\t\tOCP\\Util::writeLog('files_texteditor',\"File: \".$path.\" modified since opening.\",OCP\\Util::ERROR);\t\n\t}\n\telse\n\t{\n\t\t// File same as when opened\n\t\t// Save file\n\t\tif(OC_Filesystem::is_writable($path))\n\t\t{\n\t\t\tOC_Filesystem::file_put_contents($path, $filecontents);\n\t\t\t// Clear statcache\n\t\t\tclearstatcache();\n\t\t\t// Get new mtime\n\t\t\t$newmtime = OC_Filesystem::filemtime($path);\n\t\t\tOCP\\JSON::success(array('data' => array('mtime' => $newmtime)));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not writeable!\n\t\t\tOCP\\JSON::error(array('data' => array( 'message' => 'Insufficient permissions')));\t\n\t\t\tOCP\\Util::writeLog('files_texteditor',\"User does not have permission to write to file: \".$path,OCP\\Util::ERROR);\n\t\t}\n\t}\n} else if($path == ''){\n\tOCP\\JSON::error(array('data' => array( 'message' => 'File path not supplied')));\n\tOCP\\Util::writeLog('files_texteditor','No file path supplied', OCP\\Util::ERROR);\n} else if($mtime == ''){\n\tOCP\\JSON::error(array('data' => array( 'message' => 'File mtime not supplied')));\n\tOCP\\Util::writeLog('files_texteditor','No file mtime supplied' ,OCP\\Util::ERROR);\n} else if(!$filecontents){\n\tOCP\\JSON::error(array('data' => array( 'message' => 'File contents not supplied')));\n\tOCP\\Util::writeLog('files_texteditor','The file contents was not supplied',OCP\\Util::ERROR);\t\n}\n", "<?php\n\nOCP\\JSON::checkAppEnabled('files_versions');\nOCP\\JSON::callCheck();\n\nrequire_once('apps/files_versions/versions.php');\n\n$userDirectory = \"/\".OCP\\USER::getUser().\"/files\";\n\n$file = $_GET['file'];\n$revision=(int)$_GET['revision'];\n\nif( OCA_Versions\\Storage::isversioned( $file ) ) {\n\tif(OCA_Versions\\Storage::rollback( $file, $revision )){\n\t\tOCP\\JSON::success(array(\"data\" => array( \"revision\" => $revision, \"file\" => $file )));\n\t}else{\n\t\tOCP\\JSON::error(array(\"data\" => array( \"message\" => \"Could not revert:\" . $file )));\n\t}\n}\n", "<?php\n\n/**\n* ownCloud - gallery application\n*\n* @author Bartek Przybylski\n* @copyright 2012 Bartek Przybylski bart.p.pl@gmail.com\n* \n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n* License as published by the Free Software Foundation; either \n* version 3 of the License, or any later version.\n* \n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n*  \n* You should have received a copy of the GNU Lesser General Public \n* License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n* \n*/\n\n \nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('gallery');\nOCP\\JSON::callCheck();\n\nOC_Gallery_Album::create(OCP\\USER::getUser(), $_GET['album_name']);\n\nOCP\\JSON::success(array('name' => $_GET['album_name']));\n\n?>\n", "<?php\n\n/**\n* ownCloud - gallery application\n*\n* @author Bartek Przybylski\n* @copyright 2012 Bartek Przybylski bartek@alefzero.eu\n* \n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n* License as published by the Free Software Foundation; either \n* version 3 of the License, or any later version.\n* \n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n*  \n* You should have received a copy of the GNU Lesser General Public \n* License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n* \n*/\n\n \nOCP\\JSON::callCheck();\n\nif (!isset($_GET['token']) || !isset($_GET['operation'])) {\n  OCP\\JSON::error(array('cause' => 'Not enought arguments'));\n  exit;\n}\n\n$operation = $_GET['operation'];\n$token = $_GET['token'];\n\nif (!OC_Gallery_Sharing::isTokenValid($token)) {\n  OCP\\JSON::error(array('cause' => 'Given token is not valid'));\n  exit;\n}\n\nfunction handleGetGallery($token, $path) {\n  $owner = OC_Gallery_Sharing::getTokenOwner($token);\n  $apath = OC_Gallery_Sharing::getPath($token);\n\n  if ($path == false)\n    $root = $apath;\n  else\n    $root =  rtrim($apath,'/').$path;\n\n  $r = OC_Gallery_Album::find($owner, null, $root);\n  $albums = array();\n  $photos = array();\n  $albumId = -1;\n  if ($row = $r->fetchRow()) {\n    $albumId = $row['album_id'];\n  }\n  if ($albumId != -1) {\n\n    if (OC_Gallery_Sharing::isRecursive($token)) {\n      $r = OC_Gallery_Album::find($owner, null, null, $root);\n      while ($row = $r->fetchRow())\n        $albums[] = $row['album_name'];\n    }\n\n    $r = OC_Gallery_Photo::find($albumId);\n    while ($row = $r->fetchRow())\n      $photos[] = $row['file_path'];\n  }\n\n  OCP\\JSON::success(array('albums' => $albums, 'photos' => $photos));\n}\n\nfunction handleGetThumbnail($token, $imgpath) {\n  $owner = OC_Gallery_Sharing::getTokenOwner($token);\n  $image = OC_Gallery_Photo::getThumbnail($imgpath, $owner);\n  if ($image) {\n    OCP\\Response::enableCaching(3600 * 24); // 24 hour\n    $image->show();\n  }\n}\n\nfunction handleGetAlbumThumbnail($token, $albumname)\n{\n  $owner = OC_Gallery_Sharing::getTokenOwner($token);\n  $file = OCP\\Config::getSystemValue(\"datadirectory\").'/'. $owner .'/gallery/'.$albumname.'.png';\n  $image = new OC_Image($file);\n  if ($image->valid()) {\n    $image->centerCrop();\n    $image->resize(200);\n    $image->fixOrientation();\n    OCP\\Response::enableCaching(3600 * 24); // 24 hour\n    $image->show();\n  }\n}\n\nfunction handleGetPhoto($token, $photo) {\n  $owner = OC_Gallery_Sharing::getTokenOwner($token);\n  $file = OCP\\Config::getSystemValue( \"datadirectory\", OC::$SERVERROOT.\"/data\" ).'/'.$owner.'/files'.urldecode($photo);\n  header('Content-Type: '.OC_Image::getMimeTypeForFile($file));\n  OCP\\Response::sendFile($file);\n}\n\nswitch ($operation) {\n  case 'get_gallery':\n    handleGetGallery($token, isset($_GET['path'])? $_GET['path'] : false);\n    break;\n  case 'get_thumbnail':\n    handleGetThumbnail($token, urldecode($_GET['img']));\n    break;\n  case 'get_album_thumbnail':\n    handleGetAlbumThumbnail($token, urldecode($_GET['albumname']));\n    break;\n  case 'get_photo':\n    handleGetPhoto($token, urldecode($_GET['photo']));\n    break;\n}\n\n", "<?php\n\n// Init owncloud\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('tasks');\nOCP\\JSON::callCheck();\n\n$calendars = OC_Calendar_Calendar::allCalendars(OCP\\User::getUser(), true);\n$first_calendar = reset($calendars);\n$cid = $first_calendar['id'];\n\n$input = $_POST['text'];\n$request = array();\n$request['summary'] = $input;\n$request[\"categories\"] = null;\n$request['priority'] = null;\n$request['percent_complete'] = null;\n$request['completed'] = null;\n$request['location'] = null;\n$request['due'] = null;\n$request['description'] = null;\n$vcalendar = OC_Task_App::createVCalendarFromRequest($request);\n$id = OC_Calendar_Object::add($cid, $vcalendar->serialize());\n\n$user_timezone = OCP\\Config::getUserValue(OCP\\User::getUser(), 'calendar', 'timezone', date_default_timezone_get());\n$task = OC_Task_App::arrayForJSON($id, $vcalendar->VTODO, $user_timezone);\n\nOCP\\JSON::success(array('task' => $task));\n", "<?php\n\n// Init owncloud\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('tasks');\nOCP\\JSON::callCheck();\n\n$calendars = OC_Calendar_Calendar::allCalendars(OCP\\User::getUser(), true);\n$category_options = OC_Calendar_App::getCategoryOptions();\n$percent_options = range(0, 100, 10);\n$priority_options = OC_Task_App::getPriorityOptions();\n$tmpl = new OCP\\Template('tasks','part.addtaskform');\n$tmpl->assign('calendars',$calendars);\n$tmpl->assign('category_options', $category_options);\n$tmpl->assign('percent_options', $percent_options);\n$tmpl->assign('priority_options', $priority_options);\n$tmpl->assign('details', new OC_VObject('VTODO'));\n$tmpl->assign('categories', '');\n$page = $tmpl->fetchPage();\n\nOCP\\JSON::success(array('data' => array( 'page' => $page )));\n", "<?php\n/**\n * ownCloud - Addressbook\n *\n * @author Jakob Sack\n * @copyright 2011 Jakob Sack mail@jakobsack.de\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n *\n * You should have received a copy of the GNU Affero General Public\n * License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n// Init owncloud\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('tasks');\nOCP\\JSON::callCheck();\n\n$id = $_POST['id'];\n$task = OC_Calendar_App::getEventObject( $id );\n\nOC_Calendar_Object::delete($id);\nOCP\\JSON::success(array('data' => array( 'id' => $id )));\n", "<?php\n\n// Init owncloud\nOCP\\JSON::checkLoggedIn();\nOCP\\JSON::checkAppEnabled('tasks');\nOCP\\JSON::callCheck();\n\n$l10n = new OC_L10N('tasks');\n\n$id = $_POST['id'];\n$vcalendar = OC_Calendar_App::getVCalendar($id);\n\n$errors = OC_Task_App::validateRequest($_POST);\nif (!empty($errors)) {\n\tOCP\\JSON::error(array('data' => array( 'errors' => $errors )));\n\texit();\n}\n\nOC_Task_App::updateVCalendarFromRequest($_POST, $vcalendar);\nOC_Calendar_Object::edit($id, $vcalendar->serialize());\n\n$priority_options = OC_Task_App::getPriorityOptions();\n$tmpl = new OCP\\Template('tasks','part.details');\n$tmpl->assign('priority_options', $priority_options);\n$tmpl->assign('details', $vcalendar->VTODO);\n$tmpl->assign('id', $id);\n$page = $tmpl->fetchPage();\n\n$user_timezone = OCP\\Config::getUserValue(OCP\\User::getUser(), 'calendar', 'timezone', date_default_timezone_get());\n$task = OC_Task_App::arrayForJSON($id, $vcalendar->VTODO, $user_timezone);\n\nOCP\\JSON::success(array('data' => array( 'id' => $id, 'page' => $page, 'task' => $task )));\n"], "filenames": ["apps/bookmarks/ajax/addBookmark.php", "apps/bookmarks/ajax/delBookmark.php", "apps/bookmarks/ajax/editBookmark.php", "apps/calendar/ajax/calendar/delete.php", "apps/calendar/ajax/calendar/edit.php", "apps/calendar/ajax/calendar/new.php", "apps/calendar/ajax/calendar/update.php", "apps/calendar/ajax/event/delete.php", "apps/calendar/ajax/event/edit.php", "apps/calendar/ajax/event/move.php", "apps/calendar/ajax/event/new.php", "apps/calendar/ajax/import/import.php", "apps/calendar/ajax/settings/setfirstday.php", "apps/calendar/ajax/settings/settimeformat.php", "apps/calendar/ajax/share/changepermission.php", "apps/calendar/ajax/share/share.php", "apps/calendar/ajax/share/unshare.php", "apps/external/ajax/setsites.php", "apps/files/ajax/delete.php", "apps/files/ajax/move.php", "apps/files/ajax/newfile.php", "apps/files/ajax/newfolder.php", "apps/files/ajax/rename.php", "apps/files_sharing/ajax/email.php", "apps/files_sharing/ajax/setpermissions.php", "apps/files_sharing/ajax/share.php", "apps/files_sharing/ajax/toggleresharing.php", "apps/files_sharing/ajax/togglesharewitheveryone.php", "apps/files_sharing/ajax/unshare.php", "apps/files_texteditor/ajax/savefile.php", "apps/files_versions/ajax/rollbackVersion.php", "apps/gallery/ajax/createAlbum.php", "apps/gallery/ajax/sharing.php", "apps/tasks/ajax/addtask.php", "apps/tasks/ajax/addtaskform.php", "apps/tasks/ajax/delete.php", "apps/tasks/ajax/edittask.php"], "buggy_code_start_loc": [31, 31, 31, 11, 11, 13, 13, 11, 11, 9, 12, 10, 9, 9, 8, 8, 8, 10, 6, 6, 6, 6, 6, 2, 5, 5, 1, 1, 5, 28, 3, 26, 24, 5, 5, 25, 5], "buggy_code_end_loc": [31, 31, 31, 11, 11, 13, 13, 11, 11, 9, 12, 10, 9, 9, 9, 9, 9, 10, 6, 6, 6, 6, 6, 2, 5, 5, 1, 1, 5, 28, 3, 26, 24, 5, 5, 25, 5], "fixing_code_start_loc": [32, 32, 32, 12, 12, 14, 14, 12, 12, 10, 13, 11, 10, 10, 8, 8, 8, 11, 7, 7, 7, 7, 7, 3, 6, 6, 2, 2, 6, 29, 4, 27, 25, 6, 6, 26, 6], "fixing_code_end_loc": [33, 33, 33, 13, 13, 15, 15, 13, 13, 11, 14, 12, 12, 12, 10, 10, 10, 12, 8, 8, 8, 8, 8, 4, 7, 7, 4, 4, 7, 30, 5, 28, 26, 7, 7, 27, 7], "type": "CWE-352", "message": "Multiple cross-site request forgery (CSRF) vulnerabilities in ownCloud before 4.0.6 allow remote attackers to hijack the authentication of arbitrary users for requests that use (1) addBookmark.php, (2) delBookmark.php, or (3) editBookmark.php in bookmarks/ajax/; (4) calendar/delete.php, (5) calendar/edit.php, (6) calendar/new.php, (7) calendar/update.php, (8) event/delete.php, (9) event/edit.php, (10) event/move.php, (11) event/new.php, (12) import/import.php, (13) settings/setfirstday.php, (14) settings/settimeformat.php, (15) share/changepermission.php, (16) share/share.php, (17) or share/unshare.php in calendar/ajax/; (18) external/ajax/setsites.php, (19) files/ajax/delete.php, (20) files/ajax/move.php, (21) files/ajax/newfile.php, (22) files/ajax/newfolder.php, (23) files/ajax/rename.php, (24) files_sharing/ajax/email.php, (25) files_sharing/ajax/setpermissions.php, (26) files_sharing/ajax/share.php, (27) files_sharing/ajax/toggleresharing.php, (28) files_sharing/ajax/togglesharewitheveryone.php, (29) files_sharing/ajax/unshare.php, (30) files_texteditor/ajax/savefile.php, (31) files_versions/ajax/rollbackVersion.php, (32) gallery/ajax/createAlbum.php, (33) gallery/ajax/sharing.php, (34) tasks/ajax/addtask.php, (35) tasks/ajax/addtaskform.php, (36) tasks/ajax/delete.php, or (37) tasks/ajax/edittask.php in apps/; or administrators for requests that use (38) changepassword.php, (39) creategroup.php, (40) createuser.php, (41) disableapp.php, (42) enableapp.php, (43) lostpassword.php, (44) removegroup.php, (45) removeuser.php, (46) setlanguage.php, (47) setloglevel.php, (48) setquota.php, or (49) togglegroups.php in settings/ajax/.", "other": {"cve": {"id": "CVE-2012-4393", "sourceIdentifier": "secalert@redhat.com", "published": "2012-09-05T23:55:02.913", "lastModified": "2013-10-11T14:10:37.283", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Multiple cross-site request forgery (CSRF) vulnerabilities in ownCloud before 4.0.6 allow remote attackers to hijack the authentication of arbitrary users for requests that use (1) addBookmark.php, (2) delBookmark.php, or (3) editBookmark.php in bookmarks/ajax/; (4) calendar/delete.php, (5) calendar/edit.php, (6) calendar/new.php, (7) calendar/update.php, (8) event/delete.php, (9) event/edit.php, (10) event/move.php, (11) event/new.php, (12) import/import.php, (13) settings/setfirstday.php, (14) settings/settimeformat.php, (15) share/changepermission.php, (16) share/share.php, (17) or share/unshare.php in calendar/ajax/; (18) external/ajax/setsites.php, (19) files/ajax/delete.php, (20) files/ajax/move.php, (21) files/ajax/newfile.php, (22) files/ajax/newfolder.php, (23) files/ajax/rename.php, (24) files_sharing/ajax/email.php, (25) files_sharing/ajax/setpermissions.php, (26) files_sharing/ajax/share.php, (27) files_sharing/ajax/toggleresharing.php, (28) files_sharing/ajax/togglesharewitheveryone.php, (29) files_sharing/ajax/unshare.php, (30) files_texteditor/ajax/savefile.php, (31) files_versions/ajax/rollbackVersion.php, (32) gallery/ajax/createAlbum.php, (33) gallery/ajax/sharing.php, (34) tasks/ajax/addtask.php, (35) tasks/ajax/addtaskform.php, (36) tasks/ajax/delete.php, or (37) tasks/ajax/edittask.php in apps/; or administrators for requests that use (38) changepassword.php, (39) creategroup.php, (40) createuser.php, (41) disableapp.php, (42) enableapp.php, (43) lostpassword.php, (44) removegroup.php, (45) removeuser.php, (46) setlanguage.php, (47) setloglevel.php, (48) setquota.php, or (49) togglegroups.php in settings/ajax/."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de ejecuci\u00f3n de secuencias de comandos en sitios cruzados en ownCloud anterior a v4.0.6 permite a atacantes remotos secuestrar la autenticaci\u00f3n de usuarios arbitrarios para las solicitudes que utilizan (1) addBookmark.php, (2) delBookmark.php, o (3) editBookmark.php en bookmarks/ajax/; (4) calendar/delete.php, (5) calendar/edit.php, (6) calendar/new.php, (7) calendar/update.php, (8) event/delete.php, (9) event/edit.php, (10) event/move.php, (11) event/new.php, (12) import/import.php, (13) settings/setfirstday.php, (14) settings/settimeformat.php, (15) share/changepermission.php, (16) share/share.php, (17) o share/unshare.php en calendar/ajax/; (18) external/ajax/setsites.php, (19) files/ajax/delete.php, (20) files/ajax/move.php, (21) files/ajax/newfile.php, (22) files/ajax/newfolder.php, (23) files/ajax/rename.php, (24) files_sharing/ajax/email.php, (25) files_sharing/ajax/setpermissions.php, (26) files_sharing/ajax/share.php, (27) files_sharing/ajax/toggleresharing.php, (28) files_sharing/a!  jax/togglesharewitheveryone.php, (29) files_sharing/ajax/unshare.php, (30) files_texteditor/ajax/savefile.php, (31) files_versions/ajax/rollbackVersion.php, (32) gallery/ajax/createAlbum.php, (33) gallery/ajax/sharing.php, (34) tasks/ajax/addtask.php, (35) tasks/ajax/addtaskform.php, (36) tasks/ajax/delete.php, o (37) tasks/ajax/edittask.php en apps/; o administrators for requests that use (38) changepassword.php, (39) creategroup.php, (40) createuser.php, (41) disableapp.php, (42) enableapp.php, (43) lostpassword.php, (44) removegroup.php, (45) removeuser.php, (46) setlanguage.php, (47) setloglevel.php, (48) setquota.php, o (49) togglegroups.php en settings/ajax/."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.0.5", "matchCriteriaId": "B1FA4A92-1FE7-4E83-B951-F33B0569835B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:3.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "0A1021FF-2A5A-49AA-A376-09C98FECC519"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:3.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "3F6C12F7-5897-4DBB-A9AB-8180101F37C3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:3.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "E9CC055C-CFA3-4A23-AF91-83F7F087F282"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:3.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "AA5445B4-9115-4D31-9DF9-E7E30CAF1FFD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:4.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "8FAE7D90-6190-44E2-B4EA-F47FF3263BE6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:4.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "C7BAB402-B6A0-4314-A37A-C9465157BF5E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:4.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "8A32BED8-F428-44D3-BEAC-E0BB0208B6B6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:4.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "F46F53A9-52B2-41D6-859B-9062B1F02B86"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:4.0.4:*:*:*:*:*:*:*", "matchCriteriaId": "875B306F-92A2-4360-979E-2B53466A33F0"}]}]}], "references": [{"url": "http://owncloud.org/changelog/", "source": "secalert@redhat.com"}, {"url": "http://www.openwall.com/lists/oss-security/2012/08/11/1", "source": "secalert@redhat.com"}, {"url": "http://www.openwall.com/lists/oss-security/2012/09/02/2", "source": "secalert@redhat.com"}, {"url": "https://github.com/owncloud/core/commit/38271ded753bc9ea9943cef3c2706f8d71f3a58f", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/owncloud/core/commit/93579d88dcea389205c01ddf6da41f37ad9b8745", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/owncloud/core/commit/38271ded753bc9ea9943cef3c2706f8d71f3a58f"}}