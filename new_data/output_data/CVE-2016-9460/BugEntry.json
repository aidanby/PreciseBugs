{"buggy_code": ["/*\n * Copyright (c) 2014\n *\n * This file is licensed under the Affero General Public License version 3\n * or later.\n *\n * See the COPYING-README file.\n *\n */\n\n(function() {\n\n\tvar TEMPLATE_ADDBUTTON = '<a href=\"#\" class=\"button new\">' +\n\t\t'<span class=\"icon {{iconClass}}\"></span>' +\n\t\t'<span class=\"hidden-visually\">{{addText}}</span>' +\n\t\t'</a>';\n\n\t/**\n\t * @class OCA.Files.FileList\n\t * @classdesc\n\t *\n\t * The FileList class manages a file list view.\n\t * A file list view consists of a controls bar and\n\t * a file list table.\n\t *\n\t * @param $el container element with existing markup for the #controls\n\t * and a table\n\t * @param {Object} [options] map of options, see other parameters\n\t * @param {Object} [options.scrollContainer] scrollable container, defaults to $(window)\n\t * @param {Object} [options.dragOptions] drag options, disabled by default\n\t * @param {Object} [options.folderDropOptions] folder drop options, disabled by default\n\t * @param {boolean} [options.detailsViewEnabled=true] whether to enable details view\n\t * @param {OC.Files.Client} [options.filesClient] files client to use\n\t */\n\tvar FileList = function($el, options) {\n\t\tthis.initialize($el, options);\n\t};\n\t/**\n\t * @memberof OCA.Files\n\t */\n\tFileList.prototype = {\n\t\tSORT_INDICATOR_ASC_CLASS: 'icon-triangle-n',\n\t\tSORT_INDICATOR_DESC_CLASS: 'icon-triangle-s',\n\n\t\tid: 'files',\n\t\tappName: t('files', 'Files'),\n\t\tisEmpty: true,\n\t\tuseUndo:true,\n\n\t\t/**\n\t\t * Top-level container with controls and file list\n\t\t */\n\t\t$el: null,\n\n\t\t/**\n\t\t * Files table\n\t\t */\n\t\t$table: null,\n\n\t\t/**\n\t\t * List of rows (table tbody)\n\t\t */\n\t\t$fileList: null,\n\n\t\t/**\n\t\t * @type OCA.Files.BreadCrumb\n\t\t */\n\t\tbreadcrumb: null,\n\n\t\t/**\n\t\t * @type OCA.Files.FileSummary\n\t\t */\n\t\tfileSummary: null,\n\n\t\t/**\n\t\t * @type OCA.Files.DetailsView\n\t\t */\n\t\t_detailsView: null,\n\n\t\t/**\n\t\t * Files client instance\n\t\t *\n\t\t * @type OC.Files.Client\n\t\t */\n\t\tfilesClient: null,\n\n\t\t/**\n\t\t * Whether the file list was initialized already.\n\t\t * @type boolean\n\t\t */\n\t\tinitialized: false,\n\n\t\t/**\n\t\t * Number of files per page\n\t\t *\n\t\t * @return {int} page size\n\t\t */\n\t\tpageSize: function() {\n\t\t\treturn Math.ceil(this.$container.height() / 50);\n\t\t},\n\n\t\t/**\n\t\t * Array of files in the current folder.\n\t\t * The entries are of file data.\n\t\t *\n\t\t * @type Array.<OC.Files.FileInfo>\n\t\t */\n\t\tfiles: [],\n\n\t\t/**\n\t\t * Current directory entry\n\t\t *\n\t\t * @type OC.Files.FileInfo\n\t\t */\n\t\tdirInfo: null,\n\n\t\t/**\n\t\t * File actions handler, defaults to OCA.Files.FileActions\n\t\t * @type OCA.Files.FileActions\n\t\t */\n\t\tfileActions: null,\n\n\t\t/**\n\t\t * Whether selection is allowed, checkboxes and selection overlay will\n\t\t * be rendered\n\t\t */\n\t\t_allowSelection: true,\n\n\t\t/**\n\t\t * Map of file id to file data\n\t\t * @type Object.<int, Object>\n\t\t */\n\t\t_selectedFiles: {},\n\n\t\t/**\n\t\t * Summary of selected files.\n\t\t * @type OCA.Files.FileSummary\n\t\t */\n\t\t_selectionSummary: null,\n\n\t\t/**\n\t\t * If not empty, only files containing this string will be shown\n\t\t * @type String\n\t\t */\n\t\t_filter: '',\n\n\t\t/**\n\t\t * Sort attribute\n\t\t * @type String\n\t\t */\n\t\t_sort: 'name',\n\n\t\t/**\n\t\t * Sort direction: 'asc' or 'desc'\n\t\t * @type String\n\t\t */\n\t\t_sortDirection: 'asc',\n\n\t\t/**\n\t\t * Sort comparator function for the current sort\n\t\t * @type Function\n\t\t */\n\t\t_sortComparator: null,\n\n\t\t/**\n\t\t * Whether to do a client side sort.\n\t\t * When false, clicking on a table header will call reload().\n\t\t * When true, clicking on a table header will simply resort the list.\n\t\t */\n\t\t_clientSideSort: true,\n\n\t\t/**\n\t\t * Current directory\n\t\t * @type String\n\t\t */\n\t\t_currentDirectory: null,\n\n\t\t_dragOptions: null,\n\t\t_folderDropOptions: null,\n\n\t\t/**\n\t\t * Initialize the file list and its components\n\t\t *\n\t\t * @param $el container element with existing markup for the #controls\n\t\t * and a table\n\t\t * @param options map of options, see other parameters\n\t\t * @param options.scrollContainer scrollable container, defaults to $(window)\n\t\t * @param options.dragOptions drag options, disabled by default\n\t\t * @param options.folderDropOptions folder drop options, disabled by default\n\t\t * @param options.scrollTo name of file to scroll to after the first load\n\t\t * @param {OC.Files.Client} [options.filesClient] files API client\n\t\t * @private\n\t\t */\n\t\tinitialize: function($el, options) {\n\t\t\tvar self = this;\n\t\t\toptions = options || {};\n\t\t\tif (this.initialized) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (options.dragOptions) {\n\t\t\t\tthis._dragOptions = options.dragOptions;\n\t\t\t}\n\t\t\tif (options.folderDropOptions) {\n\t\t\t\tthis._folderDropOptions = options.folderDropOptions;\n\t\t\t}\n\t\t\tif (options.filesClient) {\n\t\t\t\tthis.filesClient = options.filesClient;\n\t\t\t} else {\n\t\t\t\t// default client if not specified\n\t\t\t\tthis.filesClient = OC.Files.getClient();\n\t\t\t}\n\n\t\t\tthis.$el = $el;\n\t\t\tif (options.id) {\n\t\t\t\tthis.id = options.id;\n\t\t\t}\n\t\t\tthis.$container = options.scrollContainer || $(window);\n\t\t\tthis.$table = $el.find('table:first');\n\t\t\tthis.$fileList = $el.find('#fileList');\n\n\t\t\tif (_.isUndefined(options.detailsViewEnabled) || options.detailsViewEnabled) {\n\t\t\t\tthis._detailsView = new OCA.Files.DetailsView();\n\t\t\t\tthis._detailsView.$el.insertBefore(this.$el);\n\t\t\t\tthis._detailsView.$el.addClass('disappear');\n\t\t\t}\n\n\t\t\tthis._initFileActions(options.fileActions);\n\n\t\t\tif (this._detailsView) {\n\t\t\t\tthis._detailsView.addDetailView(new OCA.Files.MainFileInfoDetailView({fileList: this, fileActions: this.fileActions}));\n\t\t\t}\n\n\t\t\tthis.files = [];\n\t\t\tthis._selectedFiles = {};\n\t\t\tthis._selectionSummary = new OCA.Files.FileSummary();\n\t\t\t// dummy root dir info\n\t\t\tthis.dirInfo = new OC.Files.FileInfo({});\n\n\t\t\tthis.fileSummary = this._createSummary();\n\n\t\t\tthis.setSort('name', 'asc');\n\n\t\t\tvar breadcrumbOptions = {\n\t\t\t\tonClick: _.bind(this._onClickBreadCrumb, this),\n\t\t\t\tgetCrumbUrl: function(part) {\n\t\t\t\t\treturn self.linkTo(part.dir);\n\t\t\t\t}\n\t\t\t};\n\t\t\t// if dropping on folders is allowed, then also allow on breadcrumbs\n\t\t\tif (this._folderDropOptions) {\n\t\t\t\tbreadcrumbOptions.onDrop = _.bind(this._onDropOnBreadCrumb, this);\n\t\t\t}\n\t\t\tthis.breadcrumb = new OCA.Files.BreadCrumb(breadcrumbOptions);\n\n\t\t\tvar $controls = this.$el.find('#controls');\n\t\t\tif ($controls.length > 0) {\n\t\t\t\t$controls.prepend(this.breadcrumb.$el);\n\t\t\t\tthis.$table.addClass('has-controls');\n\t\t\t}\n\n\t\t\tthis._renderNewButton();\n\n\t\t\tthis.$el.find('thead th .columntitle').click(_.bind(this._onClickHeader, this));\n\n\t\t\tthis._onResize = _.debounce(_.bind(this._onResize, this), 100);\n\t\t\t$('#app-content').on('appresized', this._onResize);\n\t\t\t$(window).resize(this._onResize);\n\n\t\t\tthis.$el.on('show', this._onResize);\n\n\t\t\tthis.updateSearch();\n\n\t\t\tthis.$fileList.on('click','td.filename>a.name, td.filesize, td.date', _.bind(this._onClickFile, this));\n\n\t\t\tthis.$fileList.on('change', 'td.filename>.selectCheckBox', _.bind(this._onClickFileCheckbox, this));\n\t\t\tthis.$el.on('urlChanged', _.bind(this._onUrlChanged, this));\n\t\t\tthis.$el.find('.select-all').click(_.bind(this._onClickSelectAll, this));\n\t\t\tthis.$el.find('.download').click(_.bind(this._onClickDownloadSelected, this));\n\t\t\tthis.$el.find('.delete-selected').click(_.bind(this._onClickDeleteSelected, this));\n\n\t\t\tthis.$el.find('.selectedActions a').tooltip({placement:'top'});\n\n\t\t\tthis.setupUploadEvents();\n\n\t\t\tthis.$container.on('scroll', _.bind(this._onScroll, this));\n\n\t\t\tif (options.scrollTo) {\n\t\t\t\tthis.$fileList.one('updated', function() {\n\t\t\t\t\tself.scrollTo(options.scrollTo);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tOC.Plugins.attach('OCA.Files.FileList', this);\n\t\t},\n\n\t\t/**\n\t\t * Destroy / uninitialize this instance.\n\t\t */\n\t\tdestroy: function() {\n\t\t\tif (this._newFileMenu) {\n\t\t\t\tthis._newFileMenu.remove();\n\t\t\t}\n\t\t\tif (this._newButton) {\n\t\t\t\tthis._newButton.remove();\n\t\t\t}\n\t\t\tif (this._detailsView) {\n\t\t\t\tthis._detailsView.remove();\n\t\t\t}\n\t\t\t// TODO: also unregister other event handlers\n\t\t\tthis.fileActions.off('registerAction', this._onFileActionsUpdated);\n\t\t\tthis.fileActions.off('setDefault', this._onFileActionsUpdated);\n\t\t\tOC.Plugins.detach('OCA.Files.FileList', this);\n\t\t\t$('#app-content').off('appresized', this._onResize);\n\t\t},\n\n\t\t/**\n\t\t * Initializes the file actions, set up listeners.\n\t\t *\n\t\t * @param {OCA.Files.FileActions} fileActions file actions\n\t\t */\n\t\t_initFileActions: function(fileActions) {\n\t\t\tvar self = this;\n\t\t\tthis.fileActions = fileActions;\n\t\t\tif (!this.fileActions) {\n\t\t\t\tthis.fileActions = new OCA.Files.FileActions();\n\t\t\t\tthis.fileActions.registerDefaultActions();\n\t\t\t}\n\n\t\t\tif (this._detailsView) {\n\t\t\t\tthis.fileActions.registerAction({\n\t\t\t\t\tname: 'Details',\n\t\t\t\t\tdisplayName: t('files', 'Details'),\n\t\t\t\t\tmime: 'all',\n\t\t\t\t\torder: -50,\n\t\t\t\t\ticonClass: 'icon-details',\n\t\t\t\t\tpermissions: OC.PERMISSION_READ,\n\t\t\t\t\tactionHandler: function(fileName, context) {\n\t\t\t\t\t\tself._updateDetailsView(fileName);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._onFileActionsUpdated = _.debounce(_.bind(this._onFileActionsUpdated, this), 100);\n\t\t\tthis.fileActions.on('registerAction', this._onFileActionsUpdated);\n\t\t\tthis.fileActions.on('setDefault', this._onFileActionsUpdated);\n\t\t},\n\n\t\t/**\n\t\t * Returns a unique model for the given file name.\n\t\t *\n\t\t * @param {string|object} fileName file name or jquery row\n\t\t * @return {OCA.Files.FileInfoModel} file info model\n\t\t */\n\t\tgetModelForFile: function(fileName) {\n\t\t\tvar self = this;\n\t\t\tvar $tr;\n\t\t\t// jQuery object ?\n\t\t\tif (fileName.is) {\n\t\t\t\t$tr = fileName;\n\t\t\t\tfileName = $tr.attr('data-file');\n\t\t\t} else {\n\t\t\t\t$tr = this.findFileEl(fileName);\n\t\t\t}\n\n\t\t\tif (!$tr || !$tr.length) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// if requesting the selected model, return it\n\t\t\tif (this._currentFileModel && this._currentFileModel.get('name') === fileName) {\n\t\t\t\treturn this._currentFileModel;\n\t\t\t}\n\n\t\t\t// TODO: note, this is a temporary model required for synchronising\n\t\t\t// state between different views.\n\t\t\t// In the future the FileList should work with Backbone.Collection\n\t\t\t// and contain existing models that can be used.\n\t\t\t// This method would in the future simply retrieve the matching model from the collection.\n\t\t\tvar model = new OCA.Files.FileInfoModel(this.elementToFile($tr));\n\t\t\tif (!model.get('path')) {\n\t\t\t\tmodel.set('path', this.getCurrentDirectory(), {silent: true});\n\t\t\t}\n\n\t\t\tmodel.on('change', function(model) {\n\t\t\t\t// re-render row\n\t\t\t\tvar highlightState = $tr.hasClass('highlighted');\n\t\t\t\t$tr = self.updateRow(\n\t\t\t\t\t$tr,\n\t\t\t\t\tmodel.toJSON(),\n\t\t\t\t\t{updateSummary: true, silent: false, animate: true}\n\t\t\t\t);\n\t\t\t\t$tr.toggleClass('highlighted', highlightState);\n\t\t\t});\n\t\t\tmodel.on('busy', function(model, state) {\n\t\t\t\tself.showFileBusyState($tr, state);\n\t\t\t});\n\n\t\t\treturn model;\n\t\t},\n\n\t\t/**\n\t\t * Displays the details view for the given file and\n\t\t * selects the given tab\n\t\t *\n\t\t * @param {string} fileName file name for which to show details\n\t\t * @param {string} [tabId] optional tab id to select\n\t\t */\n\t\tshowDetailsView: function(fileName, tabId) {\n\t\t\tthis._updateDetailsView(fileName);\n\t\t\tif (tabId) {\n\t\t\t\tthis._detailsView.selectTab(tabId);\n\t\t\t}\n\t\t\tOC.Apps.showAppSidebar(this._detailsView.$el);\n\t\t},\n\n\t\t/**\n\t\t * Update the details view to display the given file\n\t\t *\n\t\t * @param {string} fileName file name from the current list\n\t\t * @param {boolean} [show=true] whether to open the sidebar if it was closed\n\t\t */\n\t\t_updateDetailsView: function(fileName, show) {\n\t\t\tif (!this._detailsView) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// show defaults to true\n\t\t\tshow = _.isUndefined(show) || !!show;\n\t\t\tvar oldFileInfo = this._detailsView.getFileInfo();\n\t\t\tif (oldFileInfo) {\n\t\t\t\t// TODO: use more efficient way, maybe track the highlight\n\t\t\t\tthis.$fileList.children().filterAttr('data-id', '' + oldFileInfo.get('id')).removeClass('highlighted');\n\t\t\t\toldFileInfo.off('change', this._onSelectedModelChanged, this);\n\t\t\t}\n\n\t\t\tif (!fileName) {\n\t\t\t\tthis._detailsView.setFileInfo(null);\n\t\t\t\tif (this._currentFileModel) {\n\t\t\t\t\tthis._currentFileModel.off();\n\t\t\t\t}\n\t\t\t\tthis._currentFileModel = null;\n\t\t\t\tOC.Apps.hideAppSidebar(this._detailsView.$el);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (show && this._detailsView.$el.hasClass('disappear')) {\n\t\t\t\tOC.Apps.showAppSidebar(this._detailsView.$el);\n\t\t\t}\n\n\t\t\tvar $tr = this.findFileEl(fileName);\n\t\t\tvar model = this.getModelForFile($tr);\n\n\t\t\tthis._currentFileModel = model;\n\n\t\t\t$tr.addClass('highlighted');\n\n\t\t\tthis._detailsView.setFileInfo(model);\n\t\t\tthis._detailsView.$el.scrollTop(0);\n\t\t},\n\n\t\t/**\n\t\t * Event handler for when the window size changed\n\t\t */\n\t\t_onResize: function() {\n\t\t\tvar containerWidth = this.$el.width();\n\t\t\tvar actionsWidth = 0;\n\t\t\t$.each(this.$el.find('#controls .actions'), function(index, action) {\n\t\t\t\tactionsWidth += $(action).outerWidth();\n\t\t\t});\n\n\t\t\t// substract app navigation toggle when visible\n\t\t\tcontainerWidth -= $('#app-navigation-toggle').width();\n\n\t\t\tthis.breadcrumb.setMaxWidth(containerWidth - actionsWidth - 10);\n\n\t\t\tthis.$table.find('>thead').width($('#app-content').width() - OC.Util.getScrollBarWidth());\n\t\t},\n\n\t\t/**\n\t\t * Event handler for when the URL changed\n\t\t */\n\t\t_onUrlChanged: function(e) {\n\t\t\tif (e && e.dir) {\n\t\t\t\tthis.changeDirectory(e.dir, false, true);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Selected/deselects the given file element and updated\n\t\t * the internal selection cache.\n\t\t *\n\t\t * @param {Object} $tr single file row element\n\t\t * @param {bool} state true to select, false to deselect\n\t\t */\n\t\t_selectFileEl: function($tr, state, showDetailsView) {\n\t\t\tvar $checkbox = $tr.find('td.filename>.selectCheckBox');\n\t\t\tvar oldData = !!this._selectedFiles[$tr.data('id')];\n\t\t\tvar data;\n\t\t\t$checkbox.prop('checked', state);\n\t\t\t$tr.toggleClass('selected', state);\n\t\t\t// already selected ?\n\t\t\tif (state === oldData) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdata = this.elementToFile($tr);\n\t\t\tif (state) {\n\t\t\t\tthis._selectedFiles[$tr.data('id')] = data;\n\t\t\t\tthis._selectionSummary.add(data);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdelete this._selectedFiles[$tr.data('id')];\n\t\t\t\tthis._selectionSummary.remove(data);\n\t\t\t}\n\t\t\tif (this._detailsView && !this._detailsView.$el.hasClass('disappear')) {\n\t\t\t\t// hide sidebar\n\t\t\t\tthis._updateDetailsView(null);\n\t\t\t}\n\t\t\tthis.$el.find('.select-all').prop('checked', this._selectionSummary.getTotal() === this.files.length);\n\t\t},\n\n\t\t/**\n\t\t * Event handler for when clicking on files to select them\n\t\t */\n\t\t_onClickFile: function(event) {\n\t\t\tvar $tr = $(event.target).closest('tr');\n\t\t\tif ($tr.hasClass('dragging')) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this._allowSelection && (event.ctrlKey || event.shiftKey)) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tif (event.shiftKey) {\n\t\t\t\t\tvar $lastTr = $(this._lastChecked);\n\t\t\t\t\tvar lastIndex = $lastTr.index();\n\t\t\t\t\tvar currentIndex = $tr.index();\n\t\t\t\t\tvar $rows = this.$fileList.children('tr');\n\n\t\t\t\t\t// last clicked checkbox below current one ?\n\t\t\t\t\tif (lastIndex > currentIndex) {\n\t\t\t\t\t\tvar aux = lastIndex;\n\t\t\t\t\t\tlastIndex = currentIndex;\n\t\t\t\t\t\tcurrentIndex = aux;\n\t\t\t\t\t}\n\n\t\t\t\t\t// auto-select everything in-between\n\t\t\t\t\tfor (var i = lastIndex + 1; i < currentIndex; i++) {\n\t\t\t\t\t\tthis._selectFileEl($rows.eq(i), true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis._lastChecked = $tr;\n\t\t\t\t}\n\t\t\t\tvar $checkbox = $tr.find('td.filename>.selectCheckBox');\n\t\t\t\tthis._selectFileEl($tr, !$checkbox.prop('checked'));\n\t\t\t\tthis.updateSelectionSummary();\n\t\t\t} else {\n\t\t\t\t// clicked directly on the name\n\t\t\t\tif (!this._detailsView || $(event.target).is('.nametext') || $(event.target).closest('.nametext').length) {\n\t\t\t\t\tvar filename = $tr.attr('data-file');\n\t\t\t\t\tvar renaming = $tr.data('renaming');\n\t\t\t\t\tif (!renaming) {\n\t\t\t\t\t\tthis.fileActions.currentFile = $tr.find('td');\n\t\t\t\t\t\tvar mime = this.fileActions.getCurrentMimeType();\n\t\t\t\t\t\tvar type = this.fileActions.getCurrentType();\n\t\t\t\t\t\tvar permissions = this.fileActions.getCurrentPermissions();\n\t\t\t\t\t\tvar action = this.fileActions.getDefault(mime,type, permissions);\n\t\t\t\t\t\tif (action) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t// also set on global object for legacy apps\n\t\t\t\t\t\t\twindow.FileActions.currentFile = this.fileActions.currentFile;\n\t\t\t\t\t\t\taction(filename, {\n\t\t\t\t\t\t\t\t$file: $tr,\n\t\t\t\t\t\t\t\tfileList: this,\n\t\t\t\t\t\t\t\tfileActions: this.fileActions,\n\t\t\t\t\t\t\t\tdir: $tr.attr('data-path') || this.getCurrentDirectory()\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// deselect row\n\t\t\t\t\t\t$(event.target).closest('a').blur();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._updateDetailsView($tr.attr('data-file'));\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Event handler for when clicking on a file's checkbox\n\t\t */\n\t\t_onClickFileCheckbox: function(e) {\n\t\t\tvar $tr = $(e.target).closest('tr');\n\t\t\tvar state = !$tr.hasClass('selected');\n\t\t\tthis._selectFileEl($tr, state);\n\t\t\tthis._lastChecked = $tr;\n\t\t\tthis.updateSelectionSummary();\n\t\t\tif (this._detailsView && !this._detailsView.$el.hasClass('disappear')) {\n\t\t\t\t// hide sidebar\n\t\t\t\tthis._updateDetailsView(null);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Event handler for when selecting/deselecting all files\n\t\t */\n\t\t_onClickSelectAll: function(e) {\n\t\t\tvar checked = $(e.target).prop('checked');\n\t\t\tthis.$fileList.find('td.filename>.selectCheckBox').prop('checked', checked)\n\t\t\t\t.closest('tr').toggleClass('selected', checked);\n\t\t\tthis._selectedFiles = {};\n\t\t\tthis._selectionSummary.clear();\n\t\t\tif (checked) {\n\t\t\t\tfor (var i = 0; i < this.files.length; i++) {\n\t\t\t\t\tvar fileData = this.files[i];\n\t\t\t\t\tthis._selectedFiles[fileData.id] = fileData;\n\t\t\t\t\tthis._selectionSummary.add(fileData);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.updateSelectionSummary();\n\t\t\tif (this._detailsView && !this._detailsView.$el.hasClass('disappear')) {\n\t\t\t\t// hide sidebar\n\t\t\t\tthis._updateDetailsView(null);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Event handler for when clicking on \"Download\" for the selected files\n\t\t */\n\t\t_onClickDownloadSelected: function(event) {\n\t\t\tvar files;\n\t\t\tvar dir = this.getCurrentDirectory();\n\t\t\tif (this.isAllSelected() && this.getSelectedFiles().length > 1) {\n\t\t\t\tfiles = OC.basename(dir);\n\t\t\t\tdir = OC.dirname(dir) || '/';\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfiles = _.pluck(this.getSelectedFiles(), 'name');\n\t\t\t}\n\n\t\t\tvar downloadFileaction = $('#selectedActionsList').find('.download');\n\n\t\t\t// don't allow a second click on the download action\n\t\t\tif(downloadFileaction.hasClass('disabled')) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar disableLoadingState = function(){\n\t\t\t\tOCA.Files.FileActions.updateFileActionSpinner(downloadFileaction, false);\n\t\t\t};\n\n\t\t\tOCA.Files.FileActions.updateFileActionSpinner(downloadFileaction, true);\n\t\t\tif(this.getSelectedFiles().length > 1) {\n\t\t\t\tOCA.Files.Files.handleDownload(this.getDownloadUrl(files, dir, true), disableLoadingState);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfirst = this.getSelectedFiles()[0];\n\t\t\t\tOCA.Files.Files.handleDownload(this.getDownloadUrl(first.name, dir, true), disableLoadingState);\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\n\t\t/**\n\t\t * Event handler for when clicking on \"Delete\" for the selected files\n\t\t */\n\t\t_onClickDeleteSelected: function(event) {\n\t\t\tvar files = null;\n\t\t\tif (!this.isAllSelected()) {\n\t\t\t\tfiles = _.pluck(this.getSelectedFiles(), 'name');\n\t\t\t}\n\t\t\tthis.do_delete(files);\n\t\t\tevent.preventDefault();\n\t\t\treturn false;\n\t\t},\n\n\t\t/**\n\t\t * Event handler when clicking on a table header\n\t\t */\n\t\t_onClickHeader: function(e) {\n\t\t\tif (this.$table.hasClass('multiselect')) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar $target = $(e.target);\n\t\t\tvar sort;\n\t\t\tif (!$target.is('a')) {\n\t\t\t\t$target = $target.closest('a');\n\t\t\t}\n\t\t\tsort = $target.attr('data-sort');\n\t\t\tif (sort) {\n\t\t\t\tif (this._sort === sort) {\n\t\t\t\t\tthis.setSort(sort, (this._sortDirection === 'desc')?'asc':'desc', true);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif ( sort === 'name' ) {\t//default sorting of name is opposite to size and mtime\n\t\t\t\t\t\tthis.setSort(sort, 'asc', true);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.setSort(sort, 'desc', true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Event handler when clicking on a bread crumb\n\t\t */\n\t\t_onClickBreadCrumb: function(e) {\n\t\t\tvar $el = $(e.target).closest('.crumb'),\n\t\t\t\t$targetDir = $el.data('dir');\n\n\t\t\tif ($targetDir !== undefined && e.which === 1) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.changeDirectory($targetDir);\n\t\t\t\tthis.updateSearch();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Event handler for when scrolling the list container.\n\t\t * This appends/renders the next page of entries when reaching the bottom.\n\t\t */\n\t\t_onScroll: function(e) {\n\t\t\tif (this.$container.scrollTop() + this.$container.height() > this.$el.height() - 300) {\n\t\t\t\tthis._nextPage(true);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Event handler when dropping on a breadcrumb\n\t\t */\n\t\t_onDropOnBreadCrumb: function( event, ui ) {\n\t\t\tvar self = this;\n\t\t\tvar $target = $(event.target);\n\t\t\tif (!$target.is('.crumb')) {\n\t\t\t\t$target = $target.closest('.crumb');\n\t\t\t}\n\t\t\tvar targetPath = $(event.target).data('dir');\n\t\t\tvar dir = this.getCurrentDirectory();\n\t\t\twhile (dir.substr(0,1) === '/') {//remove extra leading /'s\n\t\t\t\tdir = dir.substr(1);\n\t\t\t}\n\t\t\tdir = '/' + dir;\n\t\t\tif (dir.substr(-1,1) !== '/') {\n\t\t\t\tdir = dir + '/';\n\t\t\t}\n\t\t\t// do nothing if dragged on current dir\n\t\t\tif (targetPath === dir || targetPath + '/' === dir) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar files = this.getSelectedFiles();\n\t\t\tif (files.length === 0) {\n\t\t\t\t// single one selected without checkbox?\n\t\t\t\tfiles = _.map(ui.helper.find('tr'), function(el) {\n\t\t\t\t\treturn self.elementToFile($(el));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.move(_.pluck(files, 'name'), targetPath);\n\t\t},\n\n\t\t/**\n\t\t * Sets a new page title\n\t\t */\n\t\tsetPageTitle: function(title){\n\t\t\tif (title) {\n\t\t\t\ttitle += ' - ';\n\t\t\t} else {\n\t\t\t\ttitle = '';\n\t\t\t}\n\t\t\ttitle += this.appName;\n\t\t\t// Sets the page title with the \" - ownCloud\" suffix as in templates\n\t\t\twindow.document.title = title + ' - ' + oc_defaults.title;\n\n\t\t\treturn true;\n\t\t},\n\t\t/**\n\t\t * Returns the file info for the given file name from the internal collection.\n\t\t *\n\t\t * @param {string} fileName file name\n\t\t * @return {OCA.Files.FileInfo} file info or null if it was not found\n\t\t *\n\t\t * @since 8.2\n\t\t */\n\t\tfindFile: function(fileName) {\n\t\t\treturn _.find(this.files, function(aFile) {\n\t\t\t\treturn (aFile.name === fileName);\n\t\t\t}) || null;\n\t\t},\n\t\t/**\n\t\t * Returns the tr element for a given file name, but only if it was already rendered.\n\t\t *\n\t\t * @param {string} fileName file name\n\t\t * @return {Object} jQuery object of the matching row\n\t\t */\n\t\tfindFileEl: function(fileName){\n\t\t\t// use filterAttr to avoid escaping issues\n\t\t\treturn this.$fileList.find('tr').filterAttr('data-file', fileName);\n\t\t},\n\n\t\t/**\n\t\t * Returns the file data from a given file element.\n\t\t * @param $el file tr element\n\t\t * @return file data\n\t\t */\n\t\telementToFile: function($el){\n\t\t\t$el = $($el);\n\t\t\tvar data = {\n\t\t\t\tid: parseInt($el.attr('data-id'), 10),\n\t\t\t\tname: $el.attr('data-file'),\n\t\t\t\tmimetype: $el.attr('data-mime'),\n\t\t\t\tmtime: parseInt($el.attr('data-mtime'), 10),\n\t\t\t\ttype: $el.attr('data-type'),\n\t\t\t\tsize: parseInt($el.attr('data-size'), 10),\n\t\t\t\tetag: $el.attr('data-etag'),\n\t\t\t\tpermissions: parseInt($el.attr('data-permissions'), 10)\n\t\t\t};\n\t\t\tvar icon = $el.attr('data-icon');\n\t\t\tif (icon) {\n\t\t\t\tdata.icon = icon;\n\t\t\t}\n\t\t\tvar mountType = $el.attr('data-mounttype');\n\t\t\tif (mountType) {\n\t\t\t\tdata.mountType = mountType;\n\t\t\t}\n\t\t\tvar path = $el.attr('data-path');\n\t\t\tif (path) {\n\t\t\t\tdata.path = path;\n\t\t\t}\n\t\t\treturn data;\n\t\t},\n\n\t\t/**\n\t\t * Appends the next page of files into the table\n\t\t * @param animate true to animate the new elements\n\t\t * @return array of DOM elements of the newly added files\n\t\t */\n\t\t_nextPage: function(animate) {\n\t\t\tvar index = this.$fileList.children().length,\n\t\t\t\tcount = this.pageSize(),\n\t\t\t\thidden,\n\t\t\t\ttr,\n\t\t\t\tfileData,\n\t\t\t\tnewTrs = [],\n\t\t\t\tisAllSelected = this.isAllSelected();\n\n\t\t\tif (index >= this.files.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\twhile (count > 0 && index < this.files.length) {\n\t\t\t\tfileData = this.files[index];\n\t\t\t\tif (this._filter) {\n\t\t\t\t\thidden = fileData.name.toLowerCase().indexOf(this._filter.toLowerCase()) === -1;\n\t\t\t\t} else {\n\t\t\t\t\thidden = false;\n\t\t\t\t}\n\t\t\t\ttr = this._renderRow(fileData, {updateSummary: false, silent: true, hidden: hidden});\n\t\t\t\tthis.$fileList.append(tr);\n\t\t\t\tif (isAllSelected || this._selectedFiles[fileData.id]) {\n\t\t\t\t\ttr.addClass('selected');\n\t\t\t\t\ttr.find('.selectCheckBox').prop('checked', true);\n\t\t\t\t}\n\t\t\t\tif (animate) {\n\t\t\t\t\ttr.addClass('appear transparent');\n\t\t\t\t}\n\t\t\t\tnewTrs.push(tr);\n\t\t\t\tindex++;\n\t\t\t\tcount--;\n\t\t\t}\n\n\t\t\t// trigger event for newly added rows\n\t\t\tif (newTrs.length > 0) {\n\t\t\t\tthis.$fileList.trigger($.Event('fileActionsReady', {fileList: this, $files: newTrs}));\n\t\t\t}\n\n\t\t\tif (animate) {\n\t\t\t\t// defer, for animation\n\t\t\t\twindow.setTimeout(function() {\n\t\t\t\t\tfor (var i = 0; i < newTrs.length; i++ ) {\n\t\t\t\t\t\tnewTrs[i].removeClass('transparent');\n\t\t\t\t\t}\n\t\t\t\t}, 0);\n\t\t\t}\n\t\t\treturn newTrs;\n\t\t},\n\n\t\t/**\n\t\t * Event handler for when file actions were updated.\n\t\t * This will refresh the file actions on the list.\n\t\t */\n\t\t_onFileActionsUpdated: function() {\n\t\t\tvar self = this;\n\t\t\tvar $files = this.$fileList.find('tr');\n\t\t\tif (!$files.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$files.each(function() {\n\t\t\t\tself.fileActions.display($(this).find('td.filename'), false, self);\n\t\t\t});\n\t\t\tthis.$fileList.trigger($.Event('fileActionsReady', {fileList: this, $files: $files}));\n\n\t\t},\n\n\t\t/**\n\t\t * Sets the files to be displayed in the list.\n\t\t * This operation will re-render the list and update the summary.\n\t\t * @param filesArray array of file data (map)\n\t\t */\n\t\tsetFiles: function(filesArray) {\n\t\t\tvar self = this;\n\n\t\t\t// detach to make adding multiple rows faster\n\t\t\tthis.files = filesArray;\n\n\t\t\tthis.$fileList.empty();\n\n\t\t\t// clear \"Select all\" checkbox\n\t\t\tthis.$el.find('.select-all').prop('checked', false);\n\n\t\t\tthis.isEmpty = this.files.length === 0;\n\t\t\tthis._nextPage();\n\n\t\t\tthis.updateEmptyContent();\n\n\t\t\tthis.fileSummary.calculate(filesArray);\n\n\t\t\tthis._selectedFiles = {};\n\t\t\tthis._selectionSummary.clear();\n\t\t\tthis.updateSelectionSummary();\n\t\t\t$(window).scrollTop(0);\n\n\t\t\tthis.$fileList.trigger(jQuery.Event('updated'));\n\t\t\t_.defer(function() {\n\t\t\t\tself.$el.closest('#app-content').trigger(jQuery.Event('apprendered'));\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Returns the icon URL matching the given file info\n\t\t *\n\t\t * @param {OC.Files.FileInfo} fileInfo file info\n\t\t *\n\t\t * @return {string} icon URL\n\t\t */\n\t\t_getIconUrl: function(fileInfo) {\n\t\t\tvar mimeType = fileInfo.mimetype || 'application/octet-stream';\n\t\t\tif (mimeType === 'httpd/unix-directory') {\n\t\t\t\t// use default folder icon\n\t\t\t\tif (fileInfo.mountType === 'shared' || fileInfo.mountType === 'shared-root') {\n\t\t\t\t\treturn OC.MimeType.getIconUrl('dir-shared');\n\t\t\t\t} else if (fileInfo.mountType === 'external-root') {\n\t\t\t\t\treturn OC.MimeType.getIconUrl('dir-external');\n\t\t\t\t}\n\t\t\t\treturn OC.MimeType.getIconUrl('dir');\n\t\t\t}\n\t\t\treturn OC.MimeType.getIconUrl(mimeType);\n\t\t},\n\n\t\t/**\n\t\t * Creates a new table row element using the given file data.\n\t\t * @param {OC.Files.FileInfo} fileData file info attributes\n\t\t * @param options map of attributes\n\t\t * @return new tr element (not appended to the table)\n\t\t */\n\t\t_createRow: function(fileData, options) {\n\t\t\tvar td, simpleSize, basename, extension, sizeColor,\n\t\t\t\ticon = fileData.icon || this._getIconUrl(fileData),\n\t\t\t\tname = fileData.name,\n\t\t\t\t// TODO: get rid of type, only use mime type\n\t\t\t\ttype = fileData.type || 'file',\n\t\t\t\tmtime = parseInt(fileData.mtime, 10),\n\t\t\t\tmime = fileData.mimetype,\n\t\t\t\tpath = fileData.path,\n\t\t\t\tdataIcon = null,\n\t\t\t\tlinkUrl;\n\t\t\toptions = options || {};\n\n\t\t\tif (isNaN(mtime)) {\n\t\t\t\tmtime = new Date().getTime();\n\t\t\t}\n\n\t\t\tif (type === 'dir') {\n\t\t\t\tmime = mime || 'httpd/unix-directory';\n\n\t\t\t\tif (fileData.mountType && fileData.mountType.indexOf('external') === 0) {\n\t\t\t\t\ticon = OC.MimeType.getIconUrl('dir-external');\n\t\t\t\t\tdataIcon = icon;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//containing tr\n\t\t\tvar tr = $('<tr></tr>').attr({\n\t\t\t\t\"data-id\" : fileData.id,\n\t\t\t\t\"data-type\": type,\n\t\t\t\t\"data-size\": fileData.size,\n\t\t\t\t\"data-file\": name,\n\t\t\t\t\"data-mime\": mime,\n\t\t\t\t\"data-mtime\": mtime,\n\t\t\t\t\"data-etag\": fileData.etag,\n\t\t\t\t\"data-permissions\": fileData.permissions || this.getDirectoryPermissions()\n\t\t\t});\n\n\t\t\tif (dataIcon) {\n\t\t\t\t// icon override\n\t\t\t\ttr.attr('data-icon', dataIcon);\n\t\t\t}\n\n\t\t\tif (fileData.mountType) {\n\t\t\t\t// dirInfo (parent) only exist for the \"real\" file list\n\t\t\t\tif (this.dirInfo.id) {\n\t\t\t\t\t// FIXME: HACK: detect shared-root\n\t\t\t\t\tif (fileData.mountType === 'shared' && this.dirInfo.mountType !== 'shared' && this.dirInfo.mountType !== 'shared-root') {\n\t\t\t\t\t\t// if parent folder isn't share, assume the displayed folder is a share root\n\t\t\t\t\t\tfileData.mountType = 'shared-root';\n\t\t\t\t\t} else if (fileData.mountType === 'external' && this.dirInfo.mountType !== 'external' && this.dirInfo.mountType !== 'external-root') {\n\t\t\t\t\t\t// if parent folder isn't external, assume the displayed folder is the external storage root\n\t\t\t\t\t\tfileData.mountType = 'external-root';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttr.attr('data-mounttype', fileData.mountType);\n\t\t\t}\n\n\t\t\tif (!_.isUndefined(path)) {\n\t\t\t\ttr.attr('data-path', path);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpath = this.getCurrentDirectory();\n\t\t\t}\n\n\t\t\t// filename td\n\t\t\ttd = $('<td class=\"filename\"></td>');\n\n\n\t\t\t// linkUrl\n\t\t\tif (mime === 'httpd/unix-directory') {\n\t\t\t\tlinkUrl = this.linkTo(path + '/' + name);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlinkUrl = this.getDownloadUrl(name, path, type === 'dir');\n\t\t\t}\n\t\t\tif (this._allowSelection) {\n\t\t\t\ttd.append(\n\t\t\t\t\t'<input id=\"select-' + this.id + '-' + fileData.id +\n\t\t\t\t\t'\" type=\"checkbox\" class=\"selectCheckBox checkbox\"/><label for=\"select-' + this.id + '-' + fileData.id + '\">' +\n\t\t\t\t\t'<div class=\"thumbnail\" style=\"background-image:url(' + icon + '); background-size: 32px;\"></div>' +\n\t\t\t\t\t'<span class=\"hidden-visually\">' + t('files', 'Select') + '</span>' +\n\t\t\t\t\t'</label>'\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\ttd.append('<div class=\"thumbnail\" style=\"background-image:url(' + icon + '); background-size: 32px;\"></div>');\n\t\t\t}\n\t\t\tvar linkElem = $('<a></a>').attr({\n\t\t\t\t\"class\": \"name\",\n\t\t\t\t\"href\": linkUrl\n\t\t\t});\n\n\t\t\t// from here work on the display name\n\t\t\tname = fileData.displayName || name;\n\n\t\t\t// show hidden files (starting with a dot) completely in gray\n\t\t\tif(name.indexOf('.') === 0) {\n\t\t\t\tbasename = '';\n\t\t\t\textension = name;\n\t\t\t// split extension from filename for non dirs\n\t\t\t} else if (mime !== 'httpd/unix-directory' && name.indexOf('.') !== -1) {\n\t\t\t\tbasename = name.substr(0, name.lastIndexOf('.'));\n\t\t\t\textension = name.substr(name.lastIndexOf('.'));\n\t\t\t} else {\n\t\t\t\tbasename = name;\n\t\t\t\textension = false;\n\t\t\t}\n\t\t\tvar nameSpan=$('<span></span>').addClass('nametext');\n\t\t\tvar innernameSpan = $('<span></span>').addClass('innernametext').text(basename);\n\t\t\tnameSpan.append(innernameSpan);\n\t\t\tlinkElem.append(nameSpan);\n\t\t\tif (extension) {\n\t\t\t\tnameSpan.append($('<span></span>').addClass('extension').text(extension));\n\t\t\t}\n\t\t\tif (fileData.extraData) {\n\t\t\t\tif (fileData.extraData.charAt(0) === '/') {\n\t\t\t\t\tfileData.extraData = fileData.extraData.substr(1);\n\t\t\t\t}\n\t\t\t\tnameSpan.addClass('extra-data').attr('title', fileData.extraData);\n\t\t\t\tnameSpan.tooltip({placement: 'right'});\n\t\t\t}\n\t\t\t// dirs can show the number of uploaded files\n\t\t\tif (mime === 'httpd/unix-directory') {\n\t\t\t\tlinkElem.append($('<span></span>').attr({\n\t\t\t\t\t'class': 'uploadtext',\n\t\t\t\t\t'currentUploads': 0\n\t\t\t\t}));\n\t\t\t}\n\t\t\ttd.append(linkElem);\n\t\t\ttr.append(td);\n\n\t\t\t// size column\n\t\t\tif (typeof(fileData.size) !== 'undefined' && fileData.size >= 0) {\n\t\t\t\tsimpleSize = humanFileSize(parseInt(fileData.size, 10), true);\n\t\t\t\tsizeColor = Math.round(160-Math.pow((fileData.size/(1024*1024)),2));\n\t\t\t} else {\n\t\t\t\tsimpleSize = t('files', 'Pending');\n\t\t\t}\n\n\t\t\ttd = $('<td></td>').attr({\n\t\t\t\t\"class\": \"filesize\",\n\t\t\t\t\"style\": 'color:rgb(' + sizeColor + ',' + sizeColor + ',' + sizeColor + ')'\n\t\t\t}).text(simpleSize);\n\t\t\ttr.append(td);\n\n\t\t\t// date column (1000 milliseconds to seconds, 60 seconds, 60 minutes, 24 hours)\n\t\t\t// difference in days multiplied by 5 - brightest shade for files older than 32 days (160/5)\n\t\t\tvar modifiedColor = Math.round(((new Date()).getTime() - mtime )/1000/60/60/24*5 );\n\t\t\t// ensure that the brightest color is still readable\n\t\t\tif (modifiedColor >= '160') {\n\t\t\t\tmodifiedColor = 160;\n\t\t\t}\n\t\t\tvar formatted;\n\t\t\tvar text;\n\t\t\tif (mtime > 0) {\n\t\t\t\tformatted = OC.Util.formatDate(mtime);\n\t\t\t\ttext = OC.Util.relativeModifiedDate(mtime);\n\t\t\t} else {\n\t\t\t\tformatted = t('files', 'Unable to determine date');\n\t\t\t\ttext = '?';\n\t\t\t}\n\t\t\ttd = $('<td></td>').attr({ \"class\": \"date\" });\n\t\t\ttd.append($('<span></span>').attr({\n\t\t\t\t\"class\": \"modified\",\n\t\t\t\t\"title\": formatted,\n\t\t\t\t\"style\": 'color:rgb('+modifiedColor+','+modifiedColor+','+modifiedColor+')'\n\t\t\t}).text(text)\n\t\t\t  .tooltip({placement: 'top'})\n\t\t\t);\n\t\t\ttr.find('.filesize').text(simpleSize);\n\t\t\ttr.append(td);\n\t\t\treturn tr;\n\t\t},\n\n\t\t/**\n\t\t * Adds an entry to the files array and also into the DOM\n\t\t * in a sorted manner.\n\t\t *\n\t\t * @param {OC.Files.FileInfo} fileData map of file attributes\n\t\t * @param {Object} [options] map of attributes\n\t\t * @param {boolean} [options.updateSummary] true to update the summary\n\t\t * after adding (default), false otherwise. Defaults to true.\n\t\t * @param {boolean} [options.silent] true to prevent firing events like \"fileActionsReady\",\n\t\t * defaults to false.\n\t\t * @param {boolean} [options.animate] true to animate the thumbnail image after load\n\t\t * defaults to true.\n\t\t * @return new tr element (not appended to the table)\n\t\t */\n\t\tadd: function(fileData, options) {\n\t\t\tvar index = -1;\n\t\t\tvar $tr;\n\t\t\tvar $rows;\n\t\t\tvar $insertionPoint;\n\t\t\toptions = _.extend({animate: true}, options || {});\n\n\t\t\t// there are three situations to cover:\n\t\t\t// 1) insertion point is visible on the current page\n\t\t\t// 2) insertion point is on a not visible page (visible after scrolling)\n\t\t\t// 3) insertion point is at the end of the list\n\n\t\t\t$rows = this.$fileList.children();\n\t\t\tindex = this._findInsertionIndex(fileData);\n\t\t\tif (index > this.files.length) {\n\t\t\t\tindex = this.files.length;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$insertionPoint = $rows.eq(index);\n\t\t\t}\n\n\t\t\t// is the insertion point visible ?\n\t\t\tif ($insertionPoint.length) {\n\t\t\t\t// only render if it will really be inserted\n\t\t\t\t$tr = this._renderRow(fileData, options);\n\t\t\t\t$insertionPoint.before($tr);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// if insertion point is after the last visible\n\t\t\t\t// entry, append\n\t\t\t\tif (index === $rows.length) {\n\t\t\t\t\t$tr = this._renderRow(fileData, options);\n\t\t\t\t\tthis.$fileList.append($tr);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.isEmpty = false;\n\t\t\tthis.files.splice(index, 0, fileData);\n\n\t\t\tif ($tr && options.animate) {\n\t\t\t\t$tr.addClass('appear transparent');\n\t\t\t\twindow.setTimeout(function() {\n\t\t\t\t\t$tr.removeClass('transparent');\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (options.scrollTo) {\n\t\t\t\tthis.scrollTo(fileData.name);\n\t\t\t}\n\n\t\t\t// defaults to true if not defined\n\t\t\tif (typeof(options.updateSummary) === 'undefined' || !!options.updateSummary) {\n\t\t\t\tthis.fileSummary.add(fileData, true);\n\t\t\t\tthis.updateEmptyContent();\n\t\t\t}\n\n\t\t\treturn $tr;\n\t\t},\n\n\t\t/**\n\t\t * Creates a new row element based on the given attributes\n\t\t * and returns it.\n\t\t *\n\t\t * @param {OC.Files.FileInfo} fileData map of file attributes\n\t\t * @param {Object} [options] map of attributes\n\t\t * @param {int} [options.index] index at which to insert the element\n\t\t * @param {boolean} [options.updateSummary] true to update the summary\n\t\t * after adding (default), false otherwise. Defaults to true.\n\t\t * @param {boolean} [options.animate] true to animate the thumbnail image after load\n\t\t * defaults to true.\n\t\t * @return new tr element (not appended to the table)\n\t\t */\n\t\t_renderRow: function(fileData, options) {\n\t\t\toptions = options || {};\n\t\t\tvar type = fileData.type || 'file',\n\t\t\t\tmime = fileData.mimetype,\n\t\t\t\tpath = fileData.path || this.getCurrentDirectory(),\n\t\t\t\tpermissions = parseInt(fileData.permissions, 10) || 0;\n\n\t\t\tif (fileData.isShareMountPoint) {\n\t\t\t\tpermissions = permissions | OC.PERMISSION_UPDATE;\n\t\t\t}\n\n\t\t\tif (type === 'dir') {\n\t\t\t\tmime = mime || 'httpd/unix-directory';\n\t\t\t}\n\t\t\tvar tr = this._createRow(\n\t\t\t\tfileData,\n\t\t\t\toptions\n\t\t\t);\n\t\t\tvar filenameTd = tr.find('td.filename');\n\n\t\t\t// TODO: move dragging to FileActions ?\n\t\t\t// enable drag only for deletable files\n\t\t\tif (this._dragOptions && permissions & OC.PERMISSION_DELETE) {\n\t\t\t\tfilenameTd.draggable(this._dragOptions);\n\t\t\t}\n\t\t\t// allow dropping on folders\n\t\t\tif (this._folderDropOptions && mime === 'httpd/unix-directory') {\n\t\t\t\tfilenameTd.droppable(this._folderDropOptions);\n\t\t\t}\n\n\t\t\tif (options.hidden) {\n\t\t\t\ttr.addClass('hidden');\n\t\t\t}\n\n\t\t\t// display actions\n\t\t\tthis.fileActions.display(filenameTd, !options.silent, this);\n\n\t\t\tif (mime !== 'httpd/unix-directory') {\n\t\t\t\tvar iconDiv = filenameTd.find('.thumbnail');\n\t\t\t\t// lazy load / newly inserted td ?\n\t\t\t\t// the typeof check ensures that the default value of animate is true\n\t\t\t\tif (typeof(options.animate) === 'undefined' || !!options.animate) {\n\t\t\t\t\tthis.lazyLoadPreview({\n\t\t\t\t\t\tpath: path + '/' + fileData.name,\n\t\t\t\t\t\tmime: mime,\n\t\t\t\t\t\tetag: fileData.etag,\n\t\t\t\t\t\tcallback: function(url) {\n\t\t\t\t\t\t\ticonDiv.css('background-image', 'url(\"' + url + '\")');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// set the preview URL directly\n\t\t\t\t\tvar urlSpec = {\n\t\t\t\t\t\t\tfile: path + '/' + fileData.name,\n\t\t\t\t\t\t\tc: fileData.etag\n\t\t\t\t\t\t};\n\t\t\t\t\tvar previewUrl = this.generatePreviewUrl(urlSpec);\n\t\t\t\t\tpreviewUrl = previewUrl.replace('(', '%28').replace(')', '%29');\n\t\t\t\t\ticonDiv.css('background-image', 'url(\"' + previewUrl + '\")');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tr;\n\t\t},\n\t\t/**\n\t\t * Returns the current directory\n\t\t * @method getCurrentDirectory\n\t\t * @return current directory\n\t\t */\n\t\tgetCurrentDirectory: function(){\n\t\t\treturn this._currentDirectory || this.$el.find('#dir').val() || '/';\n\t\t},\n\t\t/**\n\t\t * Returns the directory permissions\n\t\t * @return permission value as integer\n\t\t */\n\t\tgetDirectoryPermissions: function() {\n\t\t\treturn parseInt(this.$el.find('#permissions').val(), 10);\n\t\t},\n\t\t/**\n\t\t * @brief Changes the current directory and reload the file list.\n\t\t * @param targetDir target directory (non URL encoded)\n\t\t * @param changeUrl false if the URL must not be changed (defaults to true)\n\t\t * @param {boolean} force set to true to force changing directory\n\t\t */\n\t\tchangeDirectory: function(targetDir, changeUrl, force) {\n\t\t\tvar self = this;\n\t\t\tvar currentDir = this.getCurrentDirectory();\n\t\t\ttargetDir = targetDir || '/';\n\t\t\tif (!force && currentDir === targetDir) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._setCurrentDir(targetDir, changeUrl);\n\t\t\tthis.reload().then(function(success){\n\t\t\t\tif (!success) {\n\t\t\t\t\tself.changeDirectory(currentDir, true);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tlinkTo: function(dir) {\n\t\t\treturn OC.linkTo('files', 'index.php')+\"?dir=\"+ encodeURIComponent(dir).replace(/%2F/g, '/');\n\t\t},\n\n\t\t/**\n\t\t * Sets the current directory name and updates the breadcrumb.\n\t\t * @param targetDir directory to display\n\t\t * @param changeUrl true to also update the URL, false otherwise (default)\n\t\t */\n\t\t_setCurrentDir: function(targetDir, changeUrl) {\n\t\t\ttargetDir = targetDir.replace(/\\\\/g, '/');\n\t\t\tvar previousDir = this.getCurrentDirectory(),\n\t\t\t\tbaseDir = OC.basename(targetDir);\n\n\t\t\tif (baseDir !== '') {\n\t\t\t\tthis.setPageTitle(baseDir);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.setPageTitle();\n\t\t\t}\n\n\t\t\tthis._currentDirectory = targetDir;\n\n\t\t\t// legacy stuff\n\t\t\tthis.$el.find('#dir').val(targetDir);\n\n\t\t\tif (changeUrl !== false) {\n\t\t\t\tthis.$el.trigger(jQuery.Event('changeDirectory', {\n\t\t\t\t\tdir: targetDir,\n\t\t\t\t\tpreviousDir: previousDir\n\t\t\t\t}));\n\t\t\t}\n\t\t\tthis.breadcrumb.setDirectory(this.getCurrentDirectory());\n\t\t},\n\t\t/**\n\t\t * Sets the current sorting and refreshes the list\n\t\t *\n\t\t * @param sort sort attribute name\n\t\t * @param direction sort direction, one of \"asc\" or \"desc\"\n\t\t * @param update true to update the list, false otherwise (default)\n\t\t */\n\t\tsetSort: function(sort, direction, update) {\n\t\t\tvar comparator = FileList.Comparators[sort] || FileList.Comparators.name;\n\t\t\tthis._sort = sort;\n\t\t\tthis._sortDirection = (direction === 'desc')?'desc':'asc';\n\t\t\tthis._sortComparator = comparator;\n\n\t\t\tif (direction === 'desc') {\n\t\t\t\tthis._sortComparator = function(fileInfo1, fileInfo2) {\n\t\t\t\t\treturn -comparator(fileInfo1, fileInfo2);\n\t\t\t\t};\n\t\t\t}\n\t\t\tthis.$el.find('thead th .sort-indicator')\n\t\t\t\t.removeClass(this.SORT_INDICATOR_ASC_CLASS)\n\t\t\t\t.removeClass(this.SORT_INDICATOR_DESC_CLASS)\n\t\t\t\t.toggleClass('hidden', true)\n\t\t\t\t.addClass(this.SORT_INDICATOR_DESC_CLASS);\n\n\t\t\tthis.$el.find('thead th.column-' + sort + ' .sort-indicator')\n\t\t\t\t.removeClass(this.SORT_INDICATOR_ASC_CLASS)\n\t\t\t\t.removeClass(this.SORT_INDICATOR_DESC_CLASS)\n\t\t\t\t.toggleClass('hidden', false)\n\t\t\t\t.addClass(direction === 'desc' ? this.SORT_INDICATOR_DESC_CLASS : this.SORT_INDICATOR_ASC_CLASS);\n\t\t\tif (update) {\n\t\t\t\tif (this._clientSideSort) {\n\t\t\t\t\tthis.files.sort(this._sortComparator);\n\t\t\t\t\tthis.setFiles(this.files);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.reload();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Returns list of webdav properties to request\n\t\t */\n\t\t_getWebdavProperties: function() {\n\t\t\treturn [].concat(this.filesClient.getPropfindProperties());\n\t\t},\n\n\t\t/**\n\t\t * Reloads the file list using ajax call\n\t\t *\n\t\t * @return ajax call object\n\t\t */\n\t\treload: function() {\n\t\t\tthis._selectedFiles = {};\n\t\t\tthis._selectionSummary.clear();\n\t\t\tif (this._currentFileModel) {\n\t\t\t\tthis._currentFileModel.off();\n\t\t\t}\n\t\t\tthis._currentFileModel = null;\n\t\t\tthis.$el.find('.select-all').prop('checked', false);\n\t\t\tthis.showMask();\n\t\t\tthis._reloadCall = this.filesClient.getFolderContents(\n\t\t\t\tthis.getCurrentDirectory(), {\n\t\t\t\t\tincludeParent: true,\n\t\t\t\t\tproperties: this._getWebdavProperties()\n\t\t\t\t}\n\t\t\t);\n\t\t\tif (this._detailsView) {\n\t\t\t\t// close sidebar\n\t\t\t\tthis._updateDetailsView(null);\n\t\t\t}\n\t\t\tvar callBack = this.reloadCallback.bind(this);\n\t\t\treturn this._reloadCall.then(callBack, callBack);\n\t\t},\n\t\treloadCallback: function(status, result) {\n\t\t\tdelete this._reloadCall;\n\t\t\tthis.hideMask();\n\n\t\t\tif (status === 401) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Firewall Blocked request?\n\t\t\tif (status === 403) {\n\t\t\t\t// Go home\n\t\t\t\tthis.changeDirectory('/');\n\t\t\t\tOC.Notification.showTemporary(t('files', 'This operation is forbidden'));\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Did share service die or something else fail?\n\t\t\tif (status === 500) {\n\t\t\t\t// Go home\n\t\t\t\tthis.changeDirectory('/');\n\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\tt('files', 'This directory is unavailable, please check the logs or contact the administrator')\n\t\t\t\t);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (status === 503) {\n\t\t\t\t// Go home\n\t\t\t\tif (this.getCurrentDirectory() !== '/') {\n\t\t\t\t\tthis.changeDirectory('/');\n\t\t\t\t\t// TODO: read error message from exception\n\t\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\t\tt('files', 'Storage not available')\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (status === 404) {\n\t\t\t\t// go back home\n\t\t\t\tthis.changeDirectory('/');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// aborted ?\n\t\t\tif (status === 0){\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// TODO: parse remaining quota from PROPFIND response\n\t\t\tthis.updateStorageStatistics(true);\n\n\t\t\t// first entry is the root\n\t\t\tthis.dirInfo = result.shift();\n\n\t\t\tif (this.dirInfo.permissions) {\n\t\t\t\tthis.setDirectoryPermissions(this.dirInfo.permissions);\n\t\t\t}\n\n\t\t\tresult.sort(this._sortComparator);\n\t\t\tthis.setFiles(result);\n\t\t\treturn true;\n\t\t},\n\n\t\tupdateStorageStatistics: function(force) {\n\t\t\tOCA.Files.Files.updateStorageStatistics(this.getCurrentDirectory(), force);\n\t\t},\n\n\t\t/**\n\t\t * @deprecated do not use nor override\n\t\t */\n\t\tgetAjaxUrl: function(action, params) {\n\t\t\treturn OCA.Files.Files.getAjaxUrl(action, params);\n\t\t},\n\n\t\tgetDownloadUrl: function(files, dir, isDir) {\n\t\t\treturn OCA.Files.Files.getDownloadUrl(files, dir || this.getCurrentDirectory(), isDir);\n\t\t},\n\n\t\t/**\n\t\t * Generates a preview URL based on the URL space.\n\t\t * @param urlSpec attributes for the URL\n\t\t * @param {int} urlSpec.x width\n\t\t * @param {int} urlSpec.y height\n\t\t * @param {String} urlSpec.file path to the file\n\t\t * @return preview URL\n\t\t */\n\t\tgeneratePreviewUrl: function(urlSpec) {\n\t\t\turlSpec = urlSpec || {};\n\t\t\tif (!urlSpec.x) {\n\t\t\t\turlSpec.x = this.$table.data('preview-x') || 32;\n\t\t\t}\n\t\t\tif (!urlSpec.y) {\n\t\t\t\turlSpec.y = this.$table.data('preview-y') || 32;\n\t\t\t}\n\t\t\turlSpec.x *= window.devicePixelRatio;\n\t\t\turlSpec.y *= window.devicePixelRatio;\n\t\t\turlSpec.x = Math.ceil(urlSpec.x);\n\t\t\turlSpec.y = Math.ceil(urlSpec.y);\n\t\t\turlSpec.forceIcon = 0;\n\t\t\treturn OC.generateUrl('/core/preview.png?') + $.param(urlSpec);\n\t\t},\n\n\t\t/**\n\t\t * Lazy load a file's preview.\n\t\t *\n\t\t * @param path path of the file\n\t\t * @param mime mime type\n\t\t * @param callback callback function to call when the image was loaded\n\t\t * @param etag file etag (for caching)\n\t\t */\n\t\tlazyLoadPreview : function(options) {\n\t\t\tvar self = this;\n\t\t\tvar path = options.path;\n\t\t\tvar mime = options.mime;\n\t\t\tvar ready = options.callback;\n\t\t\tvar etag = options.etag;\n\n\t\t\t// get mime icon url\n\t\t\tvar iconURL = OC.MimeType.getIconUrl(mime);\n\t\t\tvar previewURL,\n\t\t\t\turlSpec = {};\n\t\t\tready(iconURL); // set mimeicon URL\n\n\t\t\turlSpec.file = OCA.Files.Files.fixPath(path);\n\t\t\tif (options.x) {\n\t\t\t\turlSpec.x = options.x;\n\t\t\t}\n\t\t\tif (options.y) {\n\t\t\t\turlSpec.y = options.y;\n\t\t\t}\n\t\t\tif (options.a) {\n\t\t\t\turlSpec.a = options.a;\n\t\t\t}\n\t\t\tif (options.mode) {\n\t\t\t\turlSpec.mode = options.mode;\n\t\t\t}\n\n\t\t\tif (etag){\n\t\t\t\t// use etag as cache buster\n\t\t\t\turlSpec.c = etag;\n\t\t\t}\n\n\t\t\tpreviewURL = self.generatePreviewUrl(urlSpec);\n\t\t\tpreviewURL = previewURL.replace('(', '%28');\n\t\t\tpreviewURL = previewURL.replace(')', '%29');\n\n\t\t\t// preload image to prevent delay\n\t\t\t// this will make the browser cache the image\n\t\t\tvar img = new Image();\n\t\t\timg.onload = function(){\n\t\t\t\t// if loading the preview image failed (no preview for the mimetype) then img.width will < 5\n\t\t\t\tif (img.width > 5) {\n\t\t\t\t\tready(previewURL, img);\n\t\t\t\t} else if (options.error) {\n\t\t\t\t\toptions.error();\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (options.error) {\n\t\t\t\timg.onerror = options.error;\n\t\t\t}\n\t\t\timg.src = previewURL;\n\t\t},\n\n\t\t/**\n\t\t * @deprecated\n\t\t */\n\t\tsetDirectoryPermissions: function(permissions) {\n\t\t\tvar isCreatable = (permissions & OC.PERMISSION_CREATE) !== 0;\n\t\t\tthis.$el.find('#permissions').val(permissions);\n\t\t\tthis.$el.find('.creatable').toggleClass('hidden', !isCreatable);\n\t\t\tthis.$el.find('.notCreatable').toggleClass('hidden', isCreatable);\n\t\t},\n\t\t/**\n\t\t * Shows/hides action buttons\n\t\t *\n\t\t * @param show true for enabling, false for disabling\n\t\t */\n\t\tshowActions: function(show){\n\t\t\tthis.$el.find('.actions,#file_action_panel').toggleClass('hidden', !show);\n\t\t\tif (show){\n\t\t\t\t// make sure to display according to permissions\n\t\t\t\tvar permissions = this.getDirectoryPermissions();\n\t\t\t\tvar isCreatable = (permissions & OC.PERMISSION_CREATE) !== 0;\n\t\t\t\tthis.$el.find('.creatable').toggleClass('hidden', !isCreatable);\n\t\t\t\tthis.$el.find('.notCreatable').toggleClass('hidden', isCreatable);\n\t\t\t\t// remove old style breadcrumbs (some apps might create them)\n\t\t\t\tthis.$el.find('#controls .crumb').remove();\n\t\t\t\t// refresh breadcrumbs in case it was replaced by an app\n\t\t\t\tthis.breadcrumb.render();\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthis.$el.find('.creatable, .notCreatable').addClass('hidden');\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Enables/disables viewer mode.\n\t\t * In viewer mode, apps can embed themselves under the controls bar.\n\t\t * In viewer mode, the actions of the file list will be hidden.\n\t\t * @param show true for enabling, false for disabling\n\t\t */\n\t\tsetViewerMode: function(show){\n\t\t\tthis.showActions(!show);\n\t\t\tthis.$el.find('#filestable').toggleClass('hidden', show);\n\t\t\tthis.$el.trigger(new $.Event('changeViewerMode', {viewerModeEnabled: show}));\n\t\t},\n\t\t/**\n\t\t * Removes a file entry from the list\n\t\t * @param name name of the file to remove\n\t\t * @param {Object} [options] map of attributes\n\t\t * @param {boolean} [options.updateSummary] true to update the summary\n\t\t * after removing, false otherwise. Defaults to true.\n\t\t * @return deleted element\n\t\t */\n\t\tremove: function(name, options){\n\t\t\toptions = options || {};\n\t\t\tvar fileEl = this.findFileEl(name);\n\t\t\tvar fileId = fileEl.data('id');\n\t\t\tvar index = fileEl.index();\n\t\t\tif (!fileEl.length) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (this._selectedFiles[fileId]) {\n\t\t\t\t// remove from selection first\n\t\t\t\tthis._selectFileEl(fileEl, false);\n\t\t\t\tthis.updateSelectionSummary();\n\t\t\t}\n\t\t\tif (this._dragOptions && (fileEl.data('permissions') & OC.PERMISSION_DELETE)) {\n\t\t\t\t// file is only draggable when delete permissions are set\n\t\t\t\tfileEl.find('td.filename').draggable('destroy');\n\t\t\t}\n\t\t\tthis.files.splice(index, 1);\n\t\t\tif (this._currentFileModel && this._currentFileModel.get('id') === fileId) {\n\t\t\t\t// Note: in the future we should call destroy() directly on the model\n\t\t\t\t// and the model will take care of the deletion.\n\t\t\t\t// Here we only trigger the event to notify listeners that\n\t\t\t\t// the file was removed.\n\t\t\t\tthis._currentFileModel.trigger('destroy');\n\t\t\t\tthis._updateDetailsView(null);\n\t\t\t}\n\t\t\tfileEl.remove();\n\t\t\t// TODO: improve performance on batch update\n\t\t\tthis.isEmpty = !this.files.length;\n\t\t\tif (typeof(options.updateSummary) === 'undefined' || !!options.updateSummary) {\n\t\t\t\tthis.updateEmptyContent();\n\t\t\t\tthis.fileSummary.remove({type: fileEl.attr('data-type'), size: fileEl.attr('data-size')}, true);\n\t\t\t}\n\n\t\t\tvar lastIndex = this.$fileList.children().length;\n\t\t\t// if there are less elements visible than one page\n\t\t\t// but there are still pending elements in the array,\n\t\t\t// then directly append the next page\n\t\t\tif (lastIndex < this.files.length && lastIndex < this.pageSize()) {\n\t\t\t\tthis._nextPage(true);\n\t\t\t}\n\n\t\t\treturn fileEl;\n\t\t},\n\t\t/**\n\t\t * Finds the index of the row before which the given\n\t\t * fileData should be inserted, considering the current\n\t\t * sorting\n\t\t *\n\t\t * @param {OC.Files.FileInfo} fileData file info\n\t\t */\n\t\t_findInsertionIndex: function(fileData) {\n\t\t\tvar index = 0;\n\t\t\twhile (index < this.files.length && this._sortComparator(fileData, this.files[index]) > 0) {\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\treturn index;\n\t\t},\n\t\t/**\n\t\t * Moves a file to a given target folder.\n\t\t *\n\t\t * @param fileNames array of file names to move\n\t\t * @param targetPath absolute target path\n\t\t */\n\t\tmove: function(fileNames, targetPath) {\n\t\t\tvar self = this;\n\t\t\tvar dir = this.getCurrentDirectory();\n\t\t\tif (dir.charAt(dir.length - 1) !== '/') {\n\t\t\t\tdir += '/';\n\t\t\t}\n\t\t\tvar target = OC.basename(targetPath);\n\t\t\tif (!_.isArray(fileNames)) {\n\t\t\t\tfileNames = [fileNames];\n\t\t\t}\n\t\t\t_.each(fileNames, function(fileName) {\n\t\t\t\tvar $tr = self.findFileEl(fileName);\n\t\t\t\tself.showFileBusyState($tr, true);\n\t\t\t\tif (targetPath.charAt(targetPath.length - 1) !== '/') {\n\t\t\t\t\t// make sure we move the files into the target dir,\n\t\t\t\t\t// not overwrite it\n\t\t\t\t\ttargetPath = targetPath + '/';\n\t\t\t\t}\n\t\t\t\tself.filesClient.move(dir + fileName, targetPath + fileName)\n\t\t\t\t\t.done(function() {\n\t\t\t\t\t\t// if still viewing the same directory\n\t\t\t\t\t\tif (OC.joinPaths(self.getCurrentDirectory(), '/') === dir) {\n\t\t\t\t\t\t\t// recalculate folder size\n\t\t\t\t\t\t\tvar oldFile = self.findFileEl(target);\n\t\t\t\t\t\t\tvar newFile = self.findFileEl(fileName);\n\t\t\t\t\t\t\tvar oldSize = oldFile.data('size');\n\t\t\t\t\t\t\tvar newSize = oldSize + newFile.data('size');\n\t\t\t\t\t\t\toldFile.data('size', newSize);\n\t\t\t\t\t\t\toldFile.find('td.filesize').text(OC.Util.humanFileSize(newSize));\n\n\t\t\t\t\t\t\t// TODO: also update entry in FileList.files\n\t\t\t\t\t\t\tself.remove(fileName);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.fail(function(status) {\n\t\t\t\t\t\tif (status === 412) {\n\t\t\t\t\t\t\t// TODO: some day here we should invoke the conflict dialog\n\t\t\t\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\t\t\t\tt('files', 'Could not move \"{file}\", target exists', {file: fileName})\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\t\t\t\tt('files', 'Could not move \"{file}\"', {file: fileName})\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.always(function() {\n\t\t\t\t\t\tself.showFileBusyState($tr, false);\n\t\t\t\t\t});\n\t\t\t});\n\n\t\t},\n\n\t\t/**\n\t\t * Updates the given row with the given file info\n\t\t *\n\t\t * @param {Object} $tr row element\n\t\t * @param {OCA.Files.FileInfo} fileInfo file info\n\t\t * @param {Object} options options\n\t\t *\n\t\t * @return {Object} new row element\n\t\t */\n\t\tupdateRow: function($tr, fileInfo, options) {\n\t\t\tthis.files.splice($tr.index(), 1);\n\t\t\t$tr.remove();\n\t\t\toptions = _.extend({silent: true}, options);\n\t\t\toptions = _.extend(options, {updateSummary: false});\n\t\t\t$tr = this.add(fileInfo, options);\n\t\t\tthis.$fileList.trigger($.Event('fileActionsReady', {fileList: this, $files: $tr}));\n\t\t\treturn $tr;\n\t\t},\n\n\t\t/**\n\t\t * Triggers file rename input field for the given file name.\n\t\t * If the user enters a new name, the file will be renamed.\n\t\t *\n\t\t * @param oldName file name of the file to rename\n\t\t */\n\t\trename: function(oldName) {\n\t\t\tvar self = this;\n\t\t\tvar tr, td, input, form;\n\t\t\ttr = this.findFileEl(oldName);\n\t\t\tvar oldFileInfo = this.files[tr.index()];\n\t\t\ttr.data('renaming',true);\n\t\t\ttd = tr.children('td.filename');\n\t\t\tinput = $('<input type=\"text\" class=\"filename\"/>').val(oldName);\n\t\t\tform = $('<form></form>');\n\t\t\tform.append(input);\n\t\t\ttd.children('a.name').hide();\n\t\t\ttd.append(form);\n\t\t\tinput.focus();\n\t\t\t//preselect input\n\t\t\tvar len = input.val().lastIndexOf('.');\n\t\t\tif ( len === -1 ||\n\t\t\t\ttr.data('type') === 'dir' ) {\n\t\t\t\tlen = input.val().length;\n\t\t\t}\n\t\t\tinput.selectRange(0, len);\n\t\t\tvar checkInput = function () {\n\t\t\t\tvar filename = input.val();\n\t\t\t\tif (filename !== oldName) {\n\t\t\t\t\t// Files.isFileNameValid(filename) throws an exception itself\n\t\t\t\t\tOCA.Files.Files.isFileNameValid(filename);\n\t\t\t\t\tif (self.inList(filename)) {\n\t\t\t\t\t\tthrow t('files', '{newName} already exists', {newName: filename});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t};\n\n\t\t\tfunction restore() {\n\t\t\t\tinput.tooltip('hide');\n\t\t\t\ttr.data('renaming',false);\n\t\t\t\tform.remove();\n\t\t\t\ttd.children('a.name').show();\n\t\t\t}\n\n\t\t\tfunction updateInList(fileInfo) {\n\t\t\t\tself.updateRow(tr, fileInfo);\n\t\t\t\tself._updateDetailsView(fileInfo.name, false);\n\t\t\t}\n\n\t\t\t// TODO: too many nested blocks, move parts into functions\n\t\t\tform.submit(function(event) {\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tevent.preventDefault();\n\t\t\t\tif (input.hasClass('error')) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tvar newName = input.val();\n\t\t\t\t\tinput.tooltip('hide');\n\t\t\t\t\tform.remove();\n\n\t\t\t\t\tif (newName !== oldName) {\n\t\t\t\t\t\tcheckInput();\n\t\t\t\t\t\t// mark as loading (temp element)\n\t\t\t\t\t\tself.showFileBusyState(tr, true);\n\t\t\t\t\t\ttr.attr('data-file', newName);\n\t\t\t\t\t\tvar basename = newName;\n\t\t\t\t\t\tif (newName.indexOf('.') > 0 && tr.data('type') !== 'dir') {\n\t\t\t\t\t\t\tbasename = newName.substr(0, newName.lastIndexOf('.'));\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttd.find('a.name span.nametext').text(basename);\n\t\t\t\t\t\ttd.children('a.name').show();\n\n\t\t\t\t\t\tvar path = tr.attr('data-path') || self.getCurrentDirectory();\n\t\t\t\t\t\tself.filesClient.move(OC.joinPaths(path, oldName), OC.joinPaths(path, newName))\n\t\t\t\t\t\t\t.done(function() {\n\t\t\t\t\t\t\t\toldFileInfo.name = newName;\n\t\t\t\t\t\t\t\tupdateInList(oldFileInfo);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.fail(function(status) {\n\t\t\t\t\t\t\t\t// TODO: 409 means current folder does not exist, redirect ?\n\t\t\t\t\t\t\t\tif (status === 404) {\n\t\t\t\t\t\t\t\t\t// source not found, so remove it from the list\n\t\t\t\t\t\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\t\t\t\t\t\tt(\n\t\t\t\t\t\t\t\t\t\t\t'files',\n\t\t\t\t\t\t\t\t\t\t\t'Could not rename \"{fileName}\", it does not exist any more',\n\t\t\t\t\t\t\t\t\t\t\t{fileName: oldName}\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tself.remove(newName, {updateSummary: true});\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t} else if (status === 412) {\n\t\t\t\t\t\t\t\t\t// target exists\n\t\t\t\t\t\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\t\t\t\t\t\tt(\n\t\t\t\t\t\t\t\t\t\t\t'files',\n\t\t\t\t\t\t\t\t\t\t\t'The name \"{targetName}\" is already used in the folder \"{dir}\". Please choose a different name.',\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\ttargetName: newName,\n\t\t\t\t\t\t\t\t\t\t\t\tdir: self.getCurrentDirectory()\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// restore the item to its previous state\n\t\t\t\t\t\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\t\t\t\t\t\tt('files', 'Could not rename \"{fileName}\"', {fileName: oldName})\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tupdateInList(oldFileInfo);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// add back the old file info when cancelled\n\t\t\t\t\t\tself.files.splice(tr.index(), 1);\n\t\t\t\t\t\ttr.remove();\n\t\t\t\t\t\ttr = self.add(oldFileInfo, {updateSummary: false, silent: true});\n\t\t\t\t\t\tself.$fileList.trigger($.Event('fileActionsReady', {fileList: self, $files: $(tr)}));\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tinput.attr('title', error);\n\t\t\t\t\tinput.tooltip({placement: 'right', trigger: 'manual'});\n\t\t\t\t\tinput.tooltip('show');\n\t\t\t\t\tinput.addClass('error');\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t\tinput.keyup(function(event) {\n\t\t\t\t// verify filename on typing\n\t\t\t\ttry {\n\t\t\t\t\tcheckInput();\n\t\t\t\t\tinput.tooltip('hide');\n\t\t\t\t\tinput.removeClass('error');\n\t\t\t\t} catch (error) {\n\t\t\t\t\tinput.attr('title', error);\n\t\t\t\t\tinput.tooltip({placement: 'right', trigger: 'manual'});\n\t\t\t\t\tinput.tooltip('show');\n\t\t\t\t\tinput.addClass('error');\n\t\t\t\t}\n\t\t\t\tif (event.keyCode === 27) {\n\t\t\t\t\trestore();\n\t\t\t\t}\n\t\t\t});\n\t\t\tinput.click(function(event) {\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tevent.preventDefault();\n\t\t\t});\n\t\t\tinput.blur(function() {\n\t\t\t\tform.trigger('submit');\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Create an empty file inside the current directory.\n\t\t *\n\t\t * @param {string} name name of the file\n\t\t *\n\t\t * @return {Promise} promise that will be resolved after the\n\t\t * file was created\n\t\t *\n\t\t * @since 8.2\n\t\t */\n\t\tcreateFile: function(name) {\n\t\t\tvar self = this;\n\t\t\tvar deferred = $.Deferred();\n\t\t\tvar promise = deferred.promise();\n\n\t\t\tOCA.Files.Files.isFileNameValid(name);\n\n\t\t\tif (this.lastAction) {\n\t\t\t\tthis.lastAction();\n\t\t\t}\n\n\t\t\tname = this.getUniqueName(name);\n\t\t\tvar targetPath = this.getCurrentDirectory() + '/' + name;\n\n\t\t\tself.filesClient.putFileContents(\n\t\t\t\t\ttargetPath,\n\t\t\t\t\t'',\n\t\t\t\t\t{\n\t\t\t\t\t\tcontentType: 'text/plain',\n\t\t\t\t\t\toverwrite: true\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\t.done(function() {\n\t\t\t\t\t// TODO: error handling / conflicts\n\t\t\t\t\tself.filesClient.getFileInfo(\n\t\t\t\t\t\t\ttargetPath, {\n\t\t\t\t\t\t\t\tproperties: self._getWebdavProperties()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.then(function(status, data) {\n\t\t\t\t\t\t\tself.add(data, {animate: true, scrollTo: true});\n\t\t\t\t\t\t\tdeferred.resolve(status, data);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.fail(function(status) {\n\t\t\t\t\t\t\tOC.Notification.showTemporary(t('files', 'Could not create file \"{file}\"', {file: name}));\n\t\t\t\t\t\t\tdeferred.reject(status);\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.fail(function(status) {\n\t\t\t\t\tif (status === 412) {\n\t\t\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\t\t\tt('files', 'Could not create file \"{file}\" because it already exists', {file: name})\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tOC.Notification.showTemporary(t('files', 'Could not create file \"{file}\"', {file: name}));\n\t\t\t\t\t}\n\t\t\t\t\tdeferred.reject(status);\n\t\t\t\t});\n\n\t\t\treturn promise;\n\t\t},\n\n\t\t/**\n\t\t * Create a directory inside the current directory.\n\t\t *\n\t\t * @param {string} name name of the directory\n\t\t *\n\t\t * @return {Promise} promise that will be resolved after the\n\t\t * directory was created\n\t\t *\n\t\t * @since 8.2\n\t\t */\n\t\tcreateDirectory: function(name) {\n\t\t\tvar self = this;\n\t\t\tvar deferred = $.Deferred();\n\t\t\tvar promise = deferred.promise();\n\n\t\t\tOCA.Files.Files.isFileNameValid(name);\n\n\t\t\tif (this.lastAction) {\n\t\t\t\tthis.lastAction();\n\t\t\t}\n\n\t\t\tname = this.getUniqueName(name);\n\t\t\tvar targetPath = this.getCurrentDirectory() + '/' + name;\n\n\t\t\tthis.filesClient.createDirectory(targetPath)\n\t\t\t\t.done(function(createStatus) {\n\t\t\t\t\tself.filesClient.getFileInfo(\n\t\t\t\t\t\t\ttargetPath, {\n\t\t\t\t\t\t\t\tproperties: self._getWebdavProperties()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.done(function(status, data) {\n\t\t\t\t\t\t\tself.add(data, {animate: true, scrollTo: true});\n\t\t\t\t\t\t\tdeferred.resolve(status, data);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.fail(function() {\n\t\t\t\t\t\t\tOC.Notification.showTemporary(t('files', 'Could not create folder \"{dir}\"', {dir: name}));\n\t\t\t\t\t\t\tdeferred.reject(createStatus);\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.fail(function(createStatus) {\n\t\t\t\t\t// method not allowed, folder might exist already\n\t\t\t\t\tif (createStatus === 405) {\n\t\t\t\t\t\tself.filesClient.getFileInfo(\n\t\t\t\t\t\t\t\ttargetPath, {\n\t\t\t\t\t\t\t\t\tproperties: self._getWebdavProperties()\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.done(function(status, data) {\n\t\t\t\t\t\t\t\t// add it to the list, for completeness\n\t\t\t\t\t\t\t\tself.add(data, {animate: true, scrollTo: true});\n\t\t\t\t\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\t\t\t\t\tt('files', 'Could not create folder \"{dir}\" because it already exists', {dir: name})\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t// still consider a failure\n\t\t\t\t\t\t\t\tdeferred.reject(createStatus, data);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.fail(function() {\n\t\t\t\t\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\t\t\t\t\tt('files', 'Could not create folder \"{dir}\"', {dir: name})\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdeferred.reject(status);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tOC.Notification.showTemporary(t('files', 'Could not create folder \"{dir}\"', {dir: name}));\n\t\t\t\t\t\tdeferred.reject(createStatus);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\treturn promise;\n\t\t},\n\n\t\t/**\n\t\t * Returns whether the given file name exists in the list\n\t\t *\n\t\t * @param {string} file file name\n\t\t *\n\t\t * @return {bool} true if the file exists in the list, false otherwise\n\t\t */\n\t\tinList:function(file) {\n\t\t\treturn this.findFile(file);\n\t\t},\n\n\t\t/**\n\t\t * Shows busy state on a given file row or multiple\n\t\t *\n\t\t * @param {string|Array.<string>} files file name or array of file names\n\t\t * @param {bool} [busy=true] busy state, true for busy, false to remove busy state\n\t\t *\n\t\t * @since 8.2\n\t\t */\n\t\tshowFileBusyState: function(files, state) {\n\t\t\tvar self = this;\n\t\t\tif (!_.isArray(files) && !files.is) {\n\t\t\t\tfiles = [files];\n\t\t\t}\n\n\t\t\tif (_.isUndefined(state)) {\n\t\t\t\tstate = true;\n\t\t\t}\n\n\t\t\t_.each(files, function(fileName) {\n\t\t\t\t// jquery element already ?\n\t\t\t\tvar $tr;\n\t\t\t\tif (_.isString(fileName)) {\n\t\t\t\t\t$tr = self.findFileEl(fileName);\n\t\t\t\t} else {\n\t\t\t\t\t$tr = $(fileName);\n\t\t\t\t}\n\n\t\t\t\tvar $thumbEl = $tr.find('.thumbnail');\n\t\t\t\t$tr.toggleClass('busy', state);\n\n\t\t\t\tif (state) {\n\t\t\t\t\t$thumbEl.attr('data-oldimage', $thumbEl.css('background-image'));\n\t\t\t\t\t$thumbEl.css('background-image', 'url('+ OC.imagePath('core', 'loading.gif') + ')');\n\t\t\t\t} else {\n\t\t\t\t\t$thumbEl.css('background-image', $thumbEl.attr('data-oldimage'));\n\t\t\t\t\t$thumbEl.removeAttr('data-oldimage');\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Delete the given files from the given dir\n\t\t * @param files file names list (without path)\n\t\t * @param dir directory in which to delete the files, defaults to the current\n\t\t * directory\n\t\t */\n\t\tdo_delete:function(files, dir) {\n\t\t\tvar self = this;\n\t\t\tif (files && files.substr) {\n\t\t\t\tfiles=[files];\n\t\t\t}\n\t\t\tif (!files) {\n\t\t\t\t// delete all files in directory\n\t\t\t\tfiles = _.pluck(this.files, 'name');\n\t\t\t}\n\t\t\tif (files) {\n\t\t\t\tthis.showFileBusyState(files, true);\n\t\t\t}\n\t\t\t// Finish any existing actions\n\t\t\tif (this.lastAction) {\n\t\t\t\tthis.lastAction();\n\t\t\t}\n\n\t\t\tdir = dir || this.getCurrentDirectory();\n\n\t\t\tfunction removeFromList(file) {\n\t\t\t\tvar fileEl = self.remove(file, {updateSummary: false});\n\t\t\t\t// FIXME: not sure why we need this after the\n\t\t\t\t// element isn't even in the DOM any more\n\t\t\t\tfileEl.find('.selectCheckBox').prop('checked', false);\n\t\t\t\tfileEl.removeClass('selected');\n\t\t\t\tself.fileSummary.remove({type: fileEl.attr('data-type'), size: fileEl.attr('data-size')});\n\t\t\t\t// TODO: this info should be returned by the ajax call!\n\t\t\t\tself.updateEmptyContent();\n\t\t\t\tself.fileSummary.update();\n\t\t\t\tself.updateSelectionSummary();\n\t\t\t\t// FIXME: don't repeat this, do it once all files are done\n\t\t\t\tself.updateStorageStatistics();\n\t\t\t}\n\n\t\t\t_.each(files, function(file) {\n\t\t\t\tself.filesClient.remove(dir + '/' + file)\n\t\t\t\t\t.done(function() {\n\t\t\t\t\t\tremoveFromList(file);\n\t\t\t\t\t})\n\t\t\t\t\t.fail(function(status) {\n\t\t\t\t\t\tif (status === 404) {\n\t\t\t\t\t\t\t// the file already did not exist, remove it from the list\n\t\t\t\t\t\t\tremoveFromList(file);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// only reset the spinner for that one file\n\t\t\t\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\t\t\t\t\tt('files', 'Error deleting file \"{fileName}\".', {fileName: file}),\n\t\t\t\t\t\t\t\t\t{timeout: 10}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tvar deleteAction = self.findFileEl(file).find('.action.delete');\n\t\t\t\t\t\t\tdeleteAction.removeClass('icon-loading-small').addClass('icon-delete');\n\t\t\t\t\t\t\tself.showFileBusyState(files, false);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t/**\n\t\t * Creates the file summary section\n\t\t */\n\t\t_createSummary: function() {\n\t\t\tvar $tr = $('<tr class=\"summary\"></tr>');\n\t\t\tthis.$el.find('tfoot').append($tr);\n\n\t\t\treturn new OCA.Files.FileSummary($tr);\n\t\t},\n\t\tupdateEmptyContent: function() {\n\t\t\tvar permissions = this.getDirectoryPermissions();\n\t\t\tvar isCreatable = (permissions & OC.PERMISSION_CREATE) !== 0;\n\t\t\tthis.$el.find('#emptycontent').toggleClass('hidden', !this.isEmpty);\n\t\t\tthis.$el.find('#emptycontent .uploadmessage').toggleClass('hidden', !isCreatable || !this.isEmpty);\n\t\t\tthis.$el.find('#filestable thead th').toggleClass('hidden', this.isEmpty);\n\t\t},\n\t\t/**\n\t\t * Shows the loading mask.\n\t\t *\n\t\t * @see OCA.Files.FileList#hideMask\n\t\t */\n\t\tshowMask: function() {\n\t\t\t// in case one was shown before\n\t\t\tvar $mask = this.$el.find('.mask');\n\t\t\tif ($mask.exists()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.$table.addClass('hidden');\n\t\t\tthis.$el.find('#emptycontent').addClass('hidden');\n\n\t\t\t$mask = $('<div class=\"mask transparent\"></div>');\n\n\t\t\t$mask.css('background-image', 'url('+ OC.imagePath('core', 'loading.gif') + ')');\n\t\t\t$mask.css('background-repeat', 'no-repeat');\n\t\t\tthis.$el.append($mask);\n\n\t\t\t$mask.removeClass('transparent');\n\t\t},\n\t\t/**\n\t\t * Hide the loading mask.\n\t\t * @see OCA.Files.FileList#showMask\n\t\t */\n\t\thideMask: function() {\n\t\t\tthis.$el.find('.mask').remove();\n\t\t\tthis.$table.removeClass('hidden');\n\t\t},\n\t\tscrollTo:function(file) {\n\t\t\tif (!_.isArray(file)) {\n\t\t\t\tfile = [file];\n\t\t\t}\n\t\t\tthis.highlightFiles(file, function($tr) {\n\t\t\t\t$tr.addClass('searchresult');\n\t\t\t\t$tr.one('hover', function() {\n\t\t\t\t\t$tr.removeClass('searchresult');\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t/**\n\t\t * @deprecated use setFilter(filter)\n\t\t */\n\t\tfilter:function(query) {\n\t\t\tthis.setFilter('');\n\t\t},\n\t\t/**\n\t\t * @deprecated use setFilter('')\n\t\t */\n\t\tunfilter:function() {\n\t\t\tthis.setFilter('');\n\t\t},\n\t\t/**\n\t\t * hide files matching the given filter\n\t\t * @param filter\n\t\t */\n\t\tsetFilter:function(filter) {\n\t\t\tthis._filter = filter;\n\t\t\tthis.fileSummary.setFilter(filter, this.files);\n\t\t\tif (!this.$el.find('.mask').exists()) {\n\t\t\t\tthis.hideIrrelevantUIWhenNoFilesMatch();\n\t\t\t}\n\t\t\tvar that = this;\n\t\t\tfilter = filter.toLowerCase();\n\t\t\tthis.$fileList.find('tr').each(function(i,e) {\n\t\t\t\tvar $e = $(e);\n\t\t\t\tif ($e.data('file').toString().toLowerCase().indexOf(filter) === -1) {\n\t\t\t\t\t$e.addClass('hidden');\n\t\t\t\t} else {\n\t\t\t\t\t$e.removeClass('hidden');\n\t\t\t\t}\n\t\t\t});\n\t\t\tthat.$container.trigger('scroll');\n\t\t},\n\t\thideIrrelevantUIWhenNoFilesMatch:function() {\n\t\t\tif (this._filter && this.fileSummary.summary.totalDirs + this.fileSummary.summary.totalFiles === 0) {\n\t\t\t\tthis.$el.find('#filestable thead th').addClass('hidden');\n\t\t\t\tthis.$el.find('#emptycontent').addClass('hidden');\n\t\t\t\t$('#searchresults').addClass('filter-empty');\n\t\t\t\tif ( $('#searchresults').length === 0 || $('#searchresults').hasClass('hidden') ) {\n\t\t\t\t\tthis.$el.find('.nofilterresults').removeClass('hidden').\n\t\t\t\t\t\tfind('p').text(t('files', \"No entries in this folder match '{filter}'\", {filter:this._filter},  null, {'escape': false}));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$('#searchresults').removeClass('filter-empty');\n\t\t\t\tthis.$el.find('#filestable thead th').toggleClass('hidden', this.isEmpty);\n\t\t\t\tif (!this.$el.find('.mask').exists()) {\n\t\t\t\t\tthis.$el.find('#emptycontent').toggleClass('hidden', !this.isEmpty);\n\t\t\t\t}\n\t\t\t\tthis.$el.find('.nofilterresults').addClass('hidden');\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * get the current filter\n\t\t * @param filter\n\t\t */\n\t\tgetFilter:function(filter) {\n\t\t\treturn this._filter;\n\t\t},\n\t\t/**\n\t\t * update the search object to use this filelist when filtering\n\t\t */\n\t\tupdateSearch:function() {\n\t\t\tif (OCA.Search.files) {\n\t\t\t\tOCA.Search.files.setFileList(this);\n\t\t\t}\n\t\t\tif (OC.Search) {\n\t\t\t\tOC.Search.clear();\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Update UI based on the current selection\n\t\t */\n\t\tupdateSelectionSummary: function() {\n\t\t\tvar summary = this._selectionSummary.summary;\n\t\t\tvar selection;\n\n\t\t\tif (summary.totalFiles === 0 && summary.totalDirs === 0) {\n\t\t\t\tthis.$el.find('#headerName a.name>span:first').text(t('files','Name'));\n\t\t\t\tthis.$el.find('#headerSize a>span:first').text(t('files','Size'));\n\t\t\t\tthis.$el.find('#modified a>span:first').text(t('files','Modified'));\n\t\t\t\tthis.$el.find('table').removeClass('multiselect');\n\t\t\t\tthis.$el.find('.selectedActions').addClass('hidden');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.$el.find('.selectedActions').removeClass('hidden');\n\t\t\t\tthis.$el.find('#headerSize a>span:first').text(OC.Util.humanFileSize(summary.totalSize));\n\n\t\t\t\tvar directoryInfo = n('files', '%n folder', '%n folders', summary.totalDirs);\n\t\t\t\tvar fileInfo = n('files', '%n file', '%n files', summary.totalFiles);\n\n\t\t\t\tif (summary.totalDirs > 0 && summary.totalFiles > 0) {\n\t\t\t\t\tvar selectionVars = {\n\t\t\t\t\t\tdirs: directoryInfo,\n\t\t\t\t\t\tfiles: fileInfo\n\t\t\t\t\t};\n\t\t\t\t\tselection = t('files', '{dirs} and {files}', selectionVars);\n\t\t\t\t} else if (summary.totalDirs > 0) {\n\t\t\t\t\tselection = directoryInfo;\n\t\t\t\t} else {\n\t\t\t\t\tselection = fileInfo;\n\t\t\t\t}\n\n\t\t\t\tthis.$el.find('#headerName a.name>span:first').text(selection);\n\t\t\t\tthis.$el.find('#modified a>span:first').text('');\n\t\t\t\tthis.$el.find('table').addClass('multiselect');\n\t\t\t\tthis.$el.find('.delete-selected').toggleClass('hidden', !this.isSelectedDeletable());\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Check whether all selected files are deletable\n\t\t */\n\t\tisSelectedDeletable: function() {\n\t\t\treturn _.reduce(this.getSelectedFiles(), function(deletable, file) {\n\t\t\t\treturn deletable && (file.permissions & OC.PERMISSION_DELETE);\n\t\t\t}, true);\n\t\t},\n\n\t\t/**\n\t\t * Returns whether all files are selected\n\t\t * @return true if all files are selected, false otherwise\n\t\t */\n\t\tisAllSelected: function() {\n\t\t\treturn this.$el.find('.select-all').prop('checked');\n\t\t},\n\n\t\t/**\n\t\t * Returns the file info of the selected files\n\t\t *\n\t\t * @return array of file names\n\t\t */\n\t\tgetSelectedFiles: function() {\n\t\t\treturn _.values(this._selectedFiles);\n\t\t},\n\n\t\tgetUniqueName: function(name) {\n\t\t\tif (this.findFileEl(name).exists()) {\n\t\t\t\tvar numMatch;\n\t\t\t\tvar parts=name.split('.');\n\t\t\t\tvar extension = \"\";\n\t\t\t\tif (parts.length > 1) {\n\t\t\t\t\textension=parts.pop();\n\t\t\t\t}\n\t\t\t\tvar base=parts.join('.');\n\t\t\t\tnumMatch=base.match(/\\((\\d+)\\)/);\n\t\t\t\tvar num=2;\n\t\t\t\tif (numMatch && numMatch.length>0) {\n\t\t\t\t\tnum=parseInt(numMatch[numMatch.length-1], 10)+1;\n\t\t\t\t\tbase=base.split('(');\n\t\t\t\t\tbase.pop();\n\t\t\t\t\tbase=$.trim(base.join('('));\n\t\t\t\t}\n\t\t\t\tname=base+' ('+num+')';\n\t\t\t\tif (extension) {\n\t\t\t\t\tname = name+'.'+extension;\n\t\t\t\t}\n\t\t\t\t// FIXME: ugly recursion\n\t\t\t\treturn this.getUniqueName(name);\n\t\t\t}\n\t\t\treturn name;\n\t\t},\n\n\t\t/**\n\t\t * Shows a \"permission denied\" notification\n\t\t */\n\t\t_showPermissionDeniedNotification: function() {\n\t\t\tvar message = t('core', 'You don\u2019t have permission to upload or create files here');\n\t\t\tOC.Notification.showTemporary(message);\n\t\t},\n\n\t\t/**\n\t\t * Setup file upload events related to the file-upload plugin\n\t\t */\n\t\tsetupUploadEvents: function() {\n\t\t\tvar self = this;\n\n\t\t\t// handle upload events\n\t\t\tvar fileUploadStart = this.$el.find('#file_upload_start');\n\n\t\t\t// detect the progress bar resize\n\t\t\tfileUploadStart.on('resized', this._onResize);\n\n\t\t\tfileUploadStart.on('fileuploaddrop', function(e, data) {\n\t\t\t\tOC.Upload.log('filelist handle fileuploaddrop', e, data);\n\n\t\t\t\tif (self.$el.hasClass('hidden')) {\n\t\t\t\t\t// do not upload to invisible lists\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tvar dropTarget = $(e.originalEvent.target);\n\t\t\t\t// check if dropped inside this container and not another one\n\t\t\t\tif (dropTarget.length\n\t\t\t\t\t&& !self.$el.is(dropTarget) // dropped on list directly\n\t\t\t\t\t&& !self.$el.has(dropTarget).length // dropped inside list\n\t\t\t\t\t&& !dropTarget.is(self.$container) // dropped on main container\n\t\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// find the closest tr or crumb to use as target\n\t\t\t\tdropTarget = dropTarget.closest('tr, .crumb');\n\n\t\t\t\t// if dropping on tr or crumb, drag&drop upload to folder\n\t\t\t\tif (dropTarget && (dropTarget.data('type') === 'dir' ||\n\t\t\t\t\tdropTarget.hasClass('crumb'))) {\n\n\t\t\t\t\t// remember as context\n\t\t\t\t\tdata.context = dropTarget;\n\n\t\t\t\t\t// if permissions are specified, only allow if create permission is there\n\t\t\t\t\tvar permissions = dropTarget.data('permissions');\n\t\t\t\t\tif (!_.isUndefined(permissions) && (permissions & OC.PERMISSION_CREATE) === 0) {\n\t\t\t\t\t\tself._showPermissionDeniedNotification();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tvar dir = dropTarget.data('file');\n\t\t\t\t\t// if from file list, need to prepend parent dir\n\t\t\t\t\tif (dir) {\n\t\t\t\t\t\tvar parentDir = self.getCurrentDirectory();\n\t\t\t\t\t\tif (parentDir[parentDir.length - 1] !== '/') {\n\t\t\t\t\t\t\tparentDir += '/';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdir = parentDir + dir;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t// read full path from crumb\n\t\t\t\t\t\tdir = dropTarget.data('dir') || '/';\n\t\t\t\t\t}\n\n\t\t\t\t\t// add target dir\n\t\t\t\t\tdata.targetDir = dir;\n\t\t\t\t} else {\n\t\t\t\t\t// we are dropping somewhere inside the file list, which will\n\t\t\t\t\t// upload the file to the current directory\n\t\t\t\t\tdata.targetDir = self.getCurrentDirectory();\n\n\t\t\t\t\t// cancel uploads to current dir if no permission\n\t\t\t\t\tvar isCreatable = (self.getDirectoryPermissions() & OC.PERMISSION_CREATE) !== 0;\n\t\t\t\t\tif (!isCreatable) {\n\t\t\t\t\t\tself._showPermissionDeniedNotification();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tfileUploadStart.on('fileuploadadd', function(e, data) {\n\t\t\t\tconsole.log('XXXXXXX');\n\t\t\t\tOC.Upload.log('filelist handle fileuploadadd', e, data);\n\n\t\t\t\t//finish delete if we are uploading a deleted file\n\t\t\t\tif (self.deleteFiles && self.deleteFiles.indexOf(data.files[0].name)!==-1) {\n\t\t\t\t\tself.finishDelete(null, true); //delete file before continuing\n\t\t\t\t}\n\n\t\t\t\t// add ui visualization to existing folder\n\t\t\t\tif (data.context && data.context.data('type') === 'dir') {\n\t\t\t\t\t// add to existing folder\n\n\t\t\t\t\t// update upload counter ui\n\t\t\t\t\tvar uploadText = data.context.find('.uploadtext');\n\t\t\t\t\tvar currentUploads = parseInt(uploadText.attr('currentUploads'), 10);\n\t\t\t\t\tcurrentUploads += 1;\n\t\t\t\t\tuploadText.attr('currentUploads', currentUploads);\n\n\t\t\t\t\tvar translatedText = n('files', 'Uploading %n file', 'Uploading %n files', currentUploads);\n\t\t\t\t\tif (currentUploads === 1) {\n\t\t\t\t\t\tself.showFileBusyState(uploadText.closest('tr'), true);\n\t\t\t\t\t\tuploadText.text(translatedText);\n\t\t\t\t\t\tuploadText.show();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tuploadText.text(translatedText);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t});\n\t\t\t/*\n\t\t\t * when file upload done successfully add row to filelist\n\t\t\t * update counter when uploading to sub folder\n\t\t\t */\n\t\t\tfileUploadStart.on('fileuploaddone', function(e, data) {\n\t\t\t\tOC.Upload.log('filelist handle fileuploaddone', e, data);\n\n\t\t\t\tvar response;\n\t\t\t\tif (typeof data.result === 'string') {\n\t\t\t\t\tresponse = data.result;\n\t\t\t\t} else {\n\t\t\t\t\t// fetch response from iframe\n\t\t\t\t\tresponse = data.result[0].body.innerText;\n\t\t\t\t}\n\t\t\t\tvar result=$.parseJSON(response);\n\n\t\t\t\tif (typeof result[0] !== 'undefined' && result[0].status === 'success') {\n\t\t\t\t\tvar file = result[0];\n\t\t\t\t\tvar size = 0;\n\n\t\t\t\t\tif (data.context && data.context.data('type') === 'dir') {\n\n\t\t\t\t\t\t// update upload counter ui\n\t\t\t\t\t\tvar uploadText = data.context.find('.uploadtext');\n\t\t\t\t\t\tvar currentUploads = parseInt(uploadText.attr('currentUploads'), 10);\n\t\t\t\t\t\tcurrentUploads -= 1;\n\t\t\t\t\t\tuploadText.attr('currentUploads', currentUploads);\n\t\t\t\t\t\tvar translatedText = n('files', 'Uploading %n file', 'Uploading %n files', currentUploads);\n\t\t\t\t\t\tif (currentUploads === 0) {\n\t\t\t\t\t\t\tself.showFileBusyState(uploadText.closest('tr'), false);\n\t\t\t\t\t\t\tuploadText.text(translatedText);\n\t\t\t\t\t\t\tuploadText.hide();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuploadText.text(translatedText);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// update folder size\n\t\t\t\t\t\tsize = parseInt(data.context.data('size'), 10);\n\t\t\t\t\t\tsize += parseInt(file.size, 10);\n\t\t\t\t\t\tdata.context.attr('data-size', size);\n\t\t\t\t\t\tdata.context.find('td.filesize').text(humanFileSize(size));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// only append new file if uploaded into the current folder\n\t\t\t\t\t\tif (file.directory !== self.getCurrentDirectory()) {\n\t\t\t\t\t\t\t// Uploading folders actually uploads a list of files\n\t\t\t\t\t\t\t// for which the target directory (file.directory) might lie deeper\n\t\t\t\t\t\t\t// than the current directory\n\n\t\t\t\t\t\t\tvar fileDirectory = file.directory.replace('/','').replace(/\\/$/, \"\");\n\t\t\t\t\t\t\tvar currentDirectory = self.getCurrentDirectory().replace('/','').replace(/\\/$/, \"\") + '/';\n\n\t\t\t\t\t\t\tif (currentDirectory !== '/') {\n\t\t\t\t\t\t\t\t// abort if fileDirectory does not start with current one\n\t\t\t\t\t\t\t\tif (fileDirectory.indexOf(currentDirectory) !== 0) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// remove the current directory part\n\t\t\t\t\t\t\t\tfileDirectory = fileDirectory.substr(currentDirectory.length);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// only take the first section of the path\n\t\t\t\t\t\t\tfileDirectory = fileDirectory.split('/');\n\n\t\t\t\t\t\t\tvar fd;\n\t\t\t\t\t\t\t// if the first section exists / is a subdir\n\t\t\t\t\t\t\tif (fileDirectory.length) {\n\t\t\t\t\t\t\t\tfileDirectory = fileDirectory[0];\n\n\t\t\t\t\t\t\t\t// See whether it is already in the list\n\t\t\t\t\t\t\t\tfd = self.findFileEl(fileDirectory);\n\t\t\t\t\t\t\t\tif (fd.length === 0) {\n\t\t\t\t\t\t\t\t\tvar dir = {\n\t\t\t\t\t\t\t\t\t\tname: fileDirectory,\n\t\t\t\t\t\t\t\t\t\ttype: 'dir',\n\t\t\t\t\t\t\t\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\t\t\t\t\t\t\t\tpermissions: file.permissions,\n\t\t\t\t\t\t\t\t\t\tsize: 0,\n\t\t\t\t\t\t\t\t\t\tid: file.parentId\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tfd = self.add(dir, {insert: true});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// update folder size\n\t\t\t\t\t\t\t\tsize = parseInt(fd.attr('data-size'), 10);\n\t\t\t\t\t\t\t\tsize += parseInt(file.size, 10);\n\t\t\t\t\t\t\t\tfd.attr('data-size', size);\n\t\t\t\t\t\t\t\tfd.find('td.filesize').text(OC.Util.humanFileSize(size));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// add as stand-alone row to filelist\n\t\t\t\t\t\tsize = t('files', 'Pending');\n\t\t\t\t\t\tif (data.files[0].size>=0) {\n\t\t\t\t\t\t\tsize=data.files[0].size;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//should the file exist in the list remove it\n\t\t\t\t\t\tself.remove(file.name);\n\n\t\t\t\t\t\t// create new file context\n\t\t\t\t\t\tdata.context = self.add(file, {animate: true});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tfileUploadStart.on('fileuploadstop', function() {\n\t\t\t\tOC.Upload.log('filelist handle fileuploadstop');\n\n\t\t\t\t//cleanup uploading to a dir\n\t\t\t\tvar uploadText = self.$fileList.find('tr .uploadtext');\n\t\t\t\tself.showFileBusyState(uploadText.closest('tr'), false);\n\t\t\t\tuploadText.fadeOut();\n\t\t\t\tuploadText.attr('currentUploads', 0);\n\n\t\t\t\tself.updateStorageStatistics();\n\t\t\t});\n\t\t\tfileUploadStart.on('fileuploadfail', function(e, data) {\n\t\t\t\tOC.Upload.log('filelist handle fileuploadfail', e, data);\n\n\t\t\t\t//if user pressed cancel hide upload chrome\n\t\t\t\tif (data.errorThrown === 'abort') {\n\t\t\t\t\t//cleanup uploading to a dir\n\t\t\t\t\tvar uploadText = self.$fileList.find('tr .uploadtext');\n\t\t\t\t\tself.showFileBusyState(uploadText.closest('tr'), false);\n\t\t\t\t\tuploadText.fadeOut();\n\t\t\t\t\tuploadText.attr('currentUploads', 0);\n\t\t\t\t}\n\t\t\t\tself.updateStorageStatistics();\n\t\t\t});\n\n\t\t},\n\n\t\t/**\n\t\t * Scroll to the last file of the given list\n\t\t * Highlight the list of files\n\t\t * @param files array of filenames,\n\t\t * @param {Function} [highlightFunction] optional function\n\t\t * to be called after the scrolling is finished\n\t\t */\n\t\thighlightFiles: function(files, highlightFunction) {\n\t\t\t// Detection of the uploaded element\n\t\t\tvar filename = files[files.length - 1];\n\t\t\tvar $fileRow = this.findFileEl(filename);\n\n\t\t\twhile(!$fileRow.exists() && this._nextPage(false) !== false) { // Checking element existence\n\t\t\t\t$fileRow = this.findFileEl(filename);\n\t\t\t}\n\n\t\t\tif (!$fileRow.exists()) { // Element not present in the file list\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar currentOffset = this.$container.scrollTop();\n\t\t\tvar additionalOffset = this.$el.find(\"#controls\").height()+this.$el.find(\"#controls\").offset().top;\n\n\t\t\t// Animation\n\t\t\tvar _this = this;\n\t\t\tvar $scrollContainer = this.$container;\n\t\t\tif ($scrollContainer[0] === window) {\n\t\t\t\t// need to use \"body\" to animate scrolling\n\t\t\t\t// when the scroll container is the window\n\t\t\t\t$scrollContainer = $('body');\n\t\t\t}\n\t\t\t$scrollContainer.animate({\n\t\t\t\t// Scrolling to the top of the new element\n\t\t\t\tscrollTop: currentOffset + $fileRow.offset().top - $fileRow.height() * 2 - additionalOffset\n\t\t\t}, {\n\t\t\t\tduration: 500,\n\t\t\t\tcomplete: function() {\n\t\t\t\t\t// Highlighting function\n\t\t\t\t\tvar highlightRow = highlightFunction;\n\n\t\t\t\t\tif (!highlightRow) {\n\t\t\t\t\t\thighlightRow = function($fileRow) {\n\t\t\t\t\t\t\t$fileRow.addClass(\"highlightUploaded\");\n\t\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\t\t$fileRow.removeClass(\"highlightUploaded\");\n\t\t\t\t\t\t\t}, 2500);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Loop over uploaded files\n\t\t\t\t\tfor(var i=0; i<files.length; i++) {\n\t\t\t\t\t\tvar $fileRow = _this.findFileEl(files[i]);\n\n\t\t\t\t\t\tif($fileRow.length !== 0) { // Checking element existence\n\t\t\t\t\t\t\thighlightRow($fileRow);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t_renderNewButton: function() {\n\t\t\t// if an upload button (legacy) already exists or no actions container exist, skip\n\t\t\tvar $actionsContainer = this.$el.find('#controls .actions');\n\t\t\tif (!$actionsContainer.length || this.$el.find('.button.upload').length) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!this._addButtonTemplate) {\n\t\t\t\tthis._addButtonTemplate = Handlebars.compile(TEMPLATE_ADDBUTTON);\n\t\t\t}\n\t\t\tvar $newButton = $(this._addButtonTemplate({\n\t\t\t\taddText: t('files', 'New'),\n\t\t\t\ticonClass: 'icon-add'\n\t\t\t}));\n\n\t\t\t$actionsContainer.prepend($newButton);\n\t\t\t$newButton.tooltip({'placement': 'bottom'});\n\n\t\t\t$newButton.click(_.bind(this._onClickNewButton, this));\n\t\t\tthis._newButton = $newButton;\n\t\t},\n\n\t\t_onClickNewButton: function(event) {\n\t\t\tvar $target = $(event.target);\n\t\t\tif (!$target.hasClass('.button')) {\n\t\t\t\t$target = $target.closest('.button');\n\t\t\t}\n\t\t\tthis._newButton.tooltip('hide');\n\t\t\tevent.preventDefault();\n\t\t\tif ($target.hasClass('disabled')) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!this._newFileMenu) {\n\t\t\t\tthis._newFileMenu = new OCA.Files.NewFileMenu({\n\t\t\t\t\tfileList: this\n\t\t\t\t});\n\t\t\t\t$('body').append(this._newFileMenu.$el);\n\t\t\t}\n\t\t\tthis._newFileMenu.showAt($target);\n\n\t\t\treturn false;\n\t\t},\n\n\t\t/**\n\t\t * Register a tab view to be added to all views\n\t\t */\n\t\tregisterTabView: function(tabView) {\n\t\t\tif (this._detailsView) {\n\t\t\t\tthis._detailsView.addTabView(tabView);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Register a detail view to be added to all views\n\t\t */\n\t\tregisterDetailView: function(detailView) {\n\t\t\tif (this._detailsView) {\n\t\t\t\tthis._detailsView.addDetailView(detailView);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Sort comparators.\n\t * @namespace OCA.Files.FileList.Comparators\n\t * @private\n\t */\n\tFileList.Comparators = {\n\t\t/**\n\t\t * Compares two file infos by name, making directories appear\n\t\t * first.\n\t\t *\n\t\t * @param {OC.Files.FileInfo} fileInfo1 file info\n\t\t * @param {OC.Files.FileInfo} fileInfo2 file info\n\t\t * @return {int} -1 if the first file must appear before the second one,\n\t\t * 0 if they are identify, 1 otherwise.\n\t\t */\n\t\tname: function(fileInfo1, fileInfo2) {\n\t\t\tif (fileInfo1.type === 'dir' && fileInfo2.type !== 'dir') {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (fileInfo1.type !== 'dir' && fileInfo2.type === 'dir') {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn OC.Util.naturalSortCompare(fileInfo1.name, fileInfo2.name);\n\t\t},\n\t\t/**\n\t\t * Compares two file infos by size.\n\t\t *\n\t\t * @param {OC.Files.FileInfo} fileInfo1 file info\n\t\t * @param {OC.Files.FileInfo} fileInfo2 file info\n\t\t * @return {int} -1 if the first file must appear before the second one,\n\t\t * 0 if they are identify, 1 otherwise.\n\t\t */\n\t\tsize: function(fileInfo1, fileInfo2) {\n\t\t\treturn fileInfo1.size - fileInfo2.size;\n\t\t},\n\t\t/**\n\t\t * Compares two file infos by timestamp.\n\t\t *\n\t\t * @param {OC.Files.FileInfo} fileInfo1 file info\n\t\t * @param {OC.Files.FileInfo} fileInfo2 file info\n\t\t * @return {int} -1 if the first file must appear before the second one,\n\t\t * 0 if they are identify, 1 otherwise.\n\t\t */\n\t\tmtime: function(fileInfo1, fileInfo2) {\n\t\t\treturn fileInfo1.mtime - fileInfo2.mtime;\n\t\t}\n\t};\n\n\t/**\n\t * File info attributes.\n\t *\n\t * @typedef {Object} OC.Files.FileInfo\n\t *\n\t * @lends OC.Files.FileInfo\n\t *\n\t * @deprecated use OC.Files.FileInfo instead\n\t *\n\t */\n\tOCA.Files.FileInfo = OC.Files.FileInfo;\n\n\tOCA.Files.FileList = FileList;\n})();\n\n$(document).ready(function() {\n\t// FIXME: unused ?\n\tOCA.Files.FileList.useUndo = (window.onbeforeunload)?true:false;\n\t$(window).bind('beforeunload', function () {\n\t\tif (OCA.Files.FileList.lastAction) {\n\t\t\tOCA.Files.FileList.lastAction();\n\t\t}\n\t});\n\t$(window).unload(function () {\n\t\t$(window).trigger('beforeunload');\n\t});\n\n});\n", "/**\n* ownCloud\n*\n* @author Vincent Petry\n* @copyright 2014 Vincent Petry <pvince81@owncloud.com>\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n* License as published by the Free Software Foundation; either\n* version 3 of the License, or any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n*\n* You should have received a copy of the GNU Affero General Public\n* License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*\n*/\n\ndescribe('OCA.Files.FileList tests', function() {\n\tvar FileInfo = OC.Files.FileInfo;\n\tvar testFiles, testRoot, notificationStub, fileList, pageSizeStub;\n\tvar bcResizeStub;\n\tvar filesClient;\n\tvar redirectStub;\n\n\t/**\n\t * Generate test file data\n\t */\n\tfunction generateFiles(startIndex, endIndex) {\n\t\tvar files = [];\n\t\tvar name;\n\t\tfor (var i = startIndex; i <= endIndex; i++) {\n\t\t\tname = 'File with index ';\n\t\t\tif (i < 10) {\n\t\t\t\t// do not rely on localeCompare here\n\t\t\t\t// and make the sorting predictable\n\t\t\t\t// cross-browser\n\t\t\t\tname += '0';\n\t\t\t}\n\t\t\tname += i + '.txt';\n\t\t\tfiles.push(new FileInfo({\n\t\t\t\tid: i,\n\t\t\t\ttype: 'file',\n\t\t\t\tname: name,\n\t\t\t\tmimetype: 'text/plain',\n\t\t\t\tsize: i * 2,\n\t\t\t\tetag: 'abc'\n\t\t\t}));\n\t\t}\n\t\treturn files;\n\t}\n\n\tbeforeEach(function() {\n\t\tfilesClient = new OC.Files.Client({\n\t\t\thost: 'localhost',\n\t\t\tport: 80,\n\t\t\t// FIXME: uncomment after fixing the test OC.webroot\n\t\t\t//root: OC.webroot + '/remote.php/webdav',\n\t\t\troot: '/remote.php/webdav',\n\t\t\tuseHTTPS: false\n\t\t});\n\t\tredirectStub = sinon.stub(OC, 'redirect');\n\t\tnotificationStub = sinon.stub(OC.Notification, 'showTemporary');\n\t\t// prevent resize algo to mess up breadcrumb order while\n\t\t// testing\n\t\tbcResizeStub = sinon.stub(OCA.Files.BreadCrumb.prototype, '_resize');\n\n\t\t// init parameters and test table elements\n\t\t$('#testArea').append(\n\t\t\t'<div id=\"app-content-files\">' +\n\t\t\t// init horrible parameters\n\t\t\t'<input type=\"hidden\" id=\"dir\" value=\"/subdir\"/>' +\n\t\t\t'<input type=\"hidden\" id=\"permissions\" value=\"31\"/>' +\n\t\t\t// dummy controls\n\t\t\t'<div id=\"controls\">' +\n\t\t\t'   <div class=\"actions creatable\"></div>' +\n\t\t\t'   <div class=\"notCreatable\"></div>' +\n\t\t\t'</div>' +\n\t\t\t// uploader\n\t\t\t'<input type=\"file\" id=\"file_upload_start\" name=\"files[]\" multiple=\"multiple\">' +\n\t\t\t// dummy table\n\t\t\t// TODO: at some point this will be rendered by the fileList class itself!\n\t\t\t'<table id=\"filestable\">' +\n\t\t\t'<thead><tr>' +\n\t\t\t'<th id=\"headerName\" class=\"hidden column-name\">' +\n\t\t\t'<input type=\"checkbox\" id=\"select_all_files\" class=\"select-all checkbox\">' +\n\t\t\t'<a class=\"name columntitle\" data-sort=\"name\"><span>Name</span><span class=\"sort-indicator\"></span></a>' +\n\t\t\t'<span id=\"selectedActionsList\" class=\"selectedActions hidden\">' +\n\t\t\t'<a href class=\"download\"><img src=\"actions/download.svg\">Download</a>' +\n\t\t\t'<a href class=\"delete-selected\">Delete</a></span>' +\n\t\t\t'</th>' +\n\t\t\t'<th class=\"hidden column-size\"><a class=\"columntitle\" data-sort=\"size\"><span class=\"sort-indicator\"></span></a></th>' +\n\t\t\t'<th class=\"hidden column-mtime\"><a class=\"columntitle\" data-sort=\"mtime\"><span class=\"sort-indicator\"></span></a></th>' +\n\t\t\t'</tr></thead>' +\n\t\t\t'<tbody id=\"fileList\"></tbody>' +\n\t\t\t'<tfoot></tfoot>' +\n\t\t\t'</table>' +\n\t\t\t// TODO: move to handlebars template\n\t\t\t'<div id=\"emptycontent\"><h2>Empty content message</h2><p class=\"uploadmessage\">Upload message</p></div>' +\n\t\t\t'<div class=\"nofilterresults hidden\"></div>' +\n\t\t\t'</div>'\n\t\t);\n\n\t\ttestRoot = new FileInfo({\n\t\t\t// root entry\n\t\t\tid: 99,\n\t\t\ttype: 'dir',\n\t\t\tname: '/subdir',\n\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\tsize: 1200000,\n\t\t\tetag: 'a0b0c0d0',\n\t\t\tpermissions: OC.PERMISSION_ALL\n\t\t});\n\t\ttestFiles = [new FileInfo({\n\t\t\tid: 1,\n\t\t\ttype: 'file',\n\t\t\tname: 'One.txt',\n\t\t\tmimetype: 'text/plain',\n\t\t\tmtime: 123456789,\n\t\t\tsize: 12,\n\t\t\tetag: 'abc',\n\t\t\tpermissions: OC.PERMISSION_ALL\n\t\t}), new FileInfo({\n\t\t\tid: 2,\n\t\t\ttype: 'file',\n\t\t\tname: 'Two.jpg',\n\t\t\tmimetype: 'image/jpeg',\n\t\t\tmtime: 234567890,\n\t\t\tsize: 12049,\n\t\t\tetag: 'def',\n\t\t\tpermissions: OC.PERMISSION_ALL\n\t\t}), new FileInfo({\n\t\t\tid: 3,\n\t\t\ttype: 'file',\n\t\t\tname: 'Three.pdf',\n\t\t\tmimetype: 'application/pdf',\n\t\t\tmtime: 234560000,\n\t\t\tsize: 58009,\n\t\t\tetag: '123',\n\t\t\tpermissions: OC.PERMISSION_ALL\n\t\t}), new FileInfo({\n\t\t\tid: 4,\n\t\t\ttype: 'dir',\n\t\t\tname: 'somedir',\n\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\tmtime: 134560000,\n\t\t\tsize: 250,\n\t\t\tetag: '456',\n\t\t\tpermissions: OC.PERMISSION_ALL\n\t\t})];\n\t\tpageSizeStub = sinon.stub(OCA.Files.FileList.prototype, 'pageSize').returns(20);\n\t\tfileList = new OCA.Files.FileList($('#app-content-files'), {\n\t\t\tfilesClient: filesClient\n\t\t});\n\t});\n\tafterEach(function() {\n\t\ttestFiles = undefined;\n\t\tif (fileList) {\n\t\t\tfileList.destroy();\n\t\t}\n\t\tfileList = undefined;\n\n\t\tnotificationStub.restore();\n\t\tbcResizeStub.restore();\n\t\tpageSizeStub.restore();\n\t\tredirectStub.restore();\n\t});\n\tdescribe('Getters', function() {\n\t\tit('Returns the current directory', function() {\n\t\t\t$('#dir').val('/one/two/three');\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/one/two/three');\n\t\t});\n\t\tit('Returns the directory permissions as int', function() {\n\t\t\t$('#permissions').val('23');\n\t\t\texpect(fileList.getDirectoryPermissions()).toEqual(23);\n\t\t});\n\t});\n\tdescribe('Adding files', function() {\n\t\tvar clock, now;\n\t\tbeforeEach(function() {\n\t\t\t// to prevent date comparison issues\n\t\t\tclock = sinon.useFakeTimers();\n\t\t\tnow = new Date();\n\t\t});\n\t\tafterEach(function() {\n\t\t\tclock.restore();\n\t\t});\n\t\tit('generates file element with correct attributes when calling add() with file data', function() {\n\t\t\tvar fileData = new FileInfo({\n\t\t\t\tid: 18,\n\t\t\t\tname: 'testName.txt',\n\t\t\t\tmimetype: 'text/plain',\n\t\t\t\tsize: 1234,\n\t\t\t\tetag: 'a01234c',\n\t\t\t\tmtime: 123456\n\t\t\t});\n\t\t\tvar $tr = fileList.add(fileData);\n\n\t\t\texpect($tr).toBeDefined();\n\t\t\texpect($tr[0].tagName.toLowerCase()).toEqual('tr');\n\t\t\texpect($tr.attr('data-id')).toEqual('18');\n\t\t\texpect($tr.attr('data-type')).toEqual('file');\n\t\t\texpect($tr.attr('data-file')).toEqual('testName.txt');\n\t\t\texpect($tr.attr('data-size')).toEqual('1234');\n\t\t\texpect($tr.attr('data-etag')).toEqual('a01234c');\n\t\t\texpect($tr.attr('data-permissions')).toEqual('31');\n\t\t\texpect($tr.attr('data-mime')).toEqual('text/plain');\n\t\t\texpect($tr.attr('data-mtime')).toEqual('123456');\n\t\t\texpect($tr.find('a.name').attr('href'))\n\t\t\t\t.toEqual(OC.webroot + '/remote.php/webdav/subdir/testName.txt');\n\t\t\texpect($tr.find('.nametext').text().trim()).toEqual('testName.txt');\n\n\t\t\texpect($tr.find('.filesize').text()).toEqual('1 KB');\n\t\t\texpect($tr.find('.date').text()).not.toEqual('?');\n\t\t\texpect(fileList.findFileEl('testName.txt')[0]).toEqual($tr[0]);\n\t\t});\n\t\tit('generates dir element with correct attributes when calling add() with dir data', function() {\n\t\t\tvar fileData = new FileInfo({\n\t\t\t\tid: 19,\n\t\t\t\tname: 'testFolder',\n\t\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\t\tsize: 1234,\n\t\t\t\tetag: 'a01234c',\n\t\t\t\tmtime: 123456\n\t\t\t});\n\t\t\tvar $tr = fileList.add(fileData);\n\n\t\t\texpect($tr).toBeDefined();\n\t\t\texpect($tr[0].tagName.toLowerCase()).toEqual('tr');\n\t\t\texpect($tr.attr('data-id')).toEqual('19');\n\t\t\texpect($tr.attr('data-type')).toEqual('dir');\n\t\t\texpect($tr.attr('data-file')).toEqual('testFolder');\n\t\t\texpect($tr.attr('data-size')).toEqual('1234');\n\t\t\texpect($tr.attr('data-etag')).toEqual('a01234c');\n\t\t\texpect($tr.attr('data-permissions')).toEqual('31');\n\t\t\texpect($tr.attr('data-mime')).toEqual('httpd/unix-directory');\n\t\t\texpect($tr.attr('data-mtime')).toEqual('123456');\n\n\t\t\texpect($tr.find('.filesize').text()).toEqual('1 KB');\n\t\t\texpect($tr.find('.date').text()).not.toEqual('?');\n\n\t\t\texpect(fileList.findFileEl('testFolder')[0]).toEqual($tr[0]);\n\t\t});\n\t\tit('generates file element with default attributes when calling add() with minimal data', function() {\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'testFile.txt'\n\t\t\t};\n\n\t\t\tclock.tick(123456);\n\t\t\tvar $tr = fileList.add(fileData);\n\n\t\t\texpect($tr).toBeDefined();\n\t\t\texpect($tr[0].tagName.toLowerCase()).toEqual('tr');\n\t\t\texpect($tr.attr('data-id')).toBeUndefined();\n\t\t\texpect($tr.attr('data-type')).toEqual('file');\n\t\t\texpect($tr.attr('data-file')).toEqual('testFile.txt');\n\t\t\texpect($tr.attr('data-size')).toBeUndefined();\n\t\t\texpect($tr.attr('data-etag')).toBeUndefined();\n\t\t\texpect($tr.attr('data-permissions')).toEqual('31');\n\t\t\texpect($tr.attr('data-mime')).toBeUndefined();\n\t\t\texpect($tr.attr('data-mtime')).toEqual('123456');\n\n\t\t\texpect($tr.find('.filesize').text()).toEqual('Pending');\n\t\t\texpect($tr.find('.date').text()).not.toEqual('?');\n\t\t});\n\t\tit('generates dir element with default attributes when calling add() with minimal data', function() {\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'dir',\n\t\t\t\tname: 'testFolder'\n\t\t\t};\n\t\t\tclock.tick(123456);\n\t\t\tvar $tr = fileList.add(fileData);\n\n\t\t\texpect($tr).toBeDefined();\n\t\t\texpect($tr[0].tagName.toLowerCase()).toEqual('tr');\n\t\t\texpect($tr.attr('data-id')).toBeUndefined();\n\t\t\texpect($tr.attr('data-type')).toEqual('dir');\n\t\t\texpect($tr.attr('data-file')).toEqual('testFolder');\n\t\t\texpect($tr.attr('data-size')).toBeUndefined();\n\t\t\texpect($tr.attr('data-etag')).toBeUndefined();\n\t\t\texpect($tr.attr('data-permissions')).toEqual('31');\n\t\t\texpect($tr.attr('data-mime')).toEqual('httpd/unix-directory');\n\t\t\texpect($tr.attr('data-mtime')).toEqual('123456');\n\n\t\t\texpect($tr.find('.filesize').text()).toEqual('Pending');\n\t\t\texpect($tr.find('.date').text()).not.toEqual('?');\n\t\t});\n\t\tit('generates file element with zero size when size is explicitly zero', function() {\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'dir',\n\t\t\t\tname: 'testFolder',\n\t\t\t\tsize: '0'\n\t\t\t};\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\texpect($tr.find('.filesize').text()).toEqual('0 KB');\n\t\t});\n\t\tit('generates file element with unknown date when mtime invalid', function() {\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'dir',\n\t\t\t\tname: 'testFolder',\n\t\t\t\tmtime: -1\n\t\t\t};\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\texpect($tr.find('.date .modified').text()).toEqual('?');\n\t\t});\n\t\tit('adds new file to the end of the list', function() {\n\t\t\tvar $tr;\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'ZZZ.txt'\n\t\t\t};\n\t\t\tfileList.setFiles(testFiles);\n\t\t\t$tr = fileList.add(fileData);\n\t\t\texpect($tr.index()).toEqual(4);\n\t\t});\n\t\tit('inserts files in a sorted manner when insert option is enabled', function() {\n\t\t\tfor (var i = 0; i < testFiles.length; i++) {\n\t\t\t\tfileList.add(testFiles[i]);\n\t\t\t}\n\t\t\texpect(fileList.files[0].name).toEqual('somedir');\n\t\t\texpect(fileList.files[1].name).toEqual('One.txt');\n\t\t\texpect(fileList.files[2].name).toEqual('Three.pdf');\n\t\t\texpect(fileList.files[3].name).toEqual('Two.jpg');\n\t\t});\n\t\tit('inserts new file at correct position', function() {\n\t\t\tvar $tr;\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'P comes after O.txt'\n\t\t\t};\n\t\t\tfor (var i = 0; i < testFiles.length; i++) {\n\t\t\t\tfileList.add(testFiles[i]);\n\t\t\t}\n\t\t\t$tr = fileList.add(fileData);\n\t\t\t// after \"One.txt\"\n\t\t\texpect($tr.index()).toEqual(2);\n\t\t\texpect(fileList.files[2]).toEqual(fileData);\n\t\t});\n\t\tit('inserts new folder at correct position in insert mode', function() {\n\t\t\tvar $tr;\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'dir',\n\t\t\t\tname: 'somedir2 comes after somedir'\n\t\t\t};\n\t\t\tfor (var i = 0; i < testFiles.length; i++) {\n\t\t\t\tfileList.add(testFiles[i]);\n\t\t\t}\n\t\t\t$tr = fileList.add(fileData);\n\t\t\texpect($tr.index()).toEqual(1);\n\t\t\texpect(fileList.files[1]).toEqual(fileData);\n\t\t});\n\t\tit('inserts new file at the end correctly', function() {\n\t\t\tvar $tr;\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'zzz.txt'\n\t\t\t};\n\t\t\tfor (var i = 0; i < testFiles.length; i++) {\n\t\t\t\tfileList.add(testFiles[i]);\n\t\t\t}\n\t\t\t$tr = fileList.add(fileData);\n\t\t\texpect($tr.index()).toEqual(4);\n\t\t\texpect(fileList.files[4]).toEqual(fileData);\n\t\t});\n\t\tit('removes empty content message and shows summary when adding first file', function() {\n\t\t\tvar $summary;\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'first file.txt',\n\t\t\t\tsize: 12\n\t\t\t};\n\t\t\tfileList.setFiles([]);\n\t\t\texpect(fileList.isEmpty).toEqual(true);\n\t\t\tfileList.add(fileData);\n\t\t\t$summary = $('#filestable .summary');\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\t// yes, ugly...\n\t\t\texpect($summary.find('.info').text()).toEqual('0 folders and 1 file');\n\t\t\texpect($summary.find('.dirinfo').hasClass('hidden')).toEqual(true);\n\t\t\texpect($summary.find('.fileinfo').hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.filesize').text()).toEqual('12 B');\n\t\t\texpect($('#filestable thead th').hasClass('hidden')).toEqual(false);\n\t\t\texpect($('#emptycontent').hasClass('hidden')).toEqual(true);\n\t\t\texpect(fileList.isEmpty).toEqual(false);\n\t\t});\n\t\tit('correctly adds the extension markup and show hidden files completely in gray', function() {\n\t\t\tvar $tr;\n\t\t\tvar testDataAndExpectedResult = [\n\t\t\t\t{file: {type: 'file', name: 'ZZZ.txt'}, extension: '.txt'},\n\t\t\t\t{file: {type: 'file', name: 'ZZZ.tar.gz'}, extension: '.gz'},\n\t\t\t\t{file: {type: 'file', name: 'test.with.some.dots.in.it.txt'}, extension: '.txt'},\n\t\t\t\t// we render hidden files completely in gray\n\t\t\t\t{file: {type: 'file', name: '.test.with.some.dots.in.it.txt'}, extension: '.test.with.some.dots.in.it.txt'},\n\t\t\t\t{file: {type: 'file', name: '.hidden'}, extension: '.hidden'},\n\t\t\t];\n\t\t\tfileList.setFiles(testFiles);\n\n\t\t\tfor(var i = 0; i < testDataAndExpectedResult.length; i++) {\n\t\t\t\tvar testSet = testDataAndExpectedResult[i];\n\t\t\t\tvar fileData = testSet['file'];\n\t\t\t\t$tr = fileList.add(fileData);\n\t\t\t\texpect($tr.find('.nametext .extension').text()).toEqual(testSet['extension']);\n\t\t\t}\n\t\t});\n\t});\n\tdescribe('Removing files from the list', function() {\n\t\tit('Removes file from list when calling remove() and updates summary', function() {\n\t\t\tvar $summary;\n\t\t\tvar $removedEl;\n\t\t\tfileList.setFiles(testFiles);\n\t\t\t$removedEl = fileList.remove('One.txt');\n\t\t\texpect($removedEl).toBeDefined();\n\t\t\texpect($removedEl.attr('data-file')).toEqual('One.txt');\n\t\t\texpect($('#fileList tr').length).toEqual(3);\n\t\t\texpect(fileList.files.length).toEqual(3);\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(0);\n\n\t\t\t$summary = $('#filestable .summary');\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.info').text()).toEqual('1 folder and 2 files');\n\t\t\texpect($summary.find('.dirinfo').hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.fileinfo').hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.filesize').text()).toEqual('69 KB');\n\t\t\texpect(fileList.isEmpty).toEqual(false);\n\t\t});\n\t\tit('Shows empty content when removing last file', function() {\n\t\t\tvar $summary;\n\t\t\tfileList.setFiles([testFiles[0]]);\n\t\t\tfileList.remove('One.txt');\n\t\t\texpect($('#fileList tr').length).toEqual(0);\n\t\t\texpect(fileList.files.length).toEqual(0);\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(0);\n\n\t\t\t$summary = $('#filestable .summary');\n\t\t\texpect($summary.hasClass('hidden')).toEqual(true);\n\t\t\texpect($('#filestable thead th').hasClass('hidden')).toEqual(true);\n\t\t\texpect($('#emptycontent').hasClass('hidden')).toEqual(false);\n\t\t\texpect(fileList.isEmpty).toEqual(true);\n\t\t});\n\t});\n\tdescribe('Deleting files', function() {\n\t\tvar deferredDelete;\n\t\tvar deleteStub;\n\n\t\tbeforeEach(function() {\n\t\t\tdeferredDelete = $.Deferred();\n\t\t\tdeleteStub = sinon.stub(filesClient, 'remove').returns(deferredDelete.promise());\n\t\t});\n\t\tafterEach(function() {\n\t\t\tdeleteStub.restore();\n\t\t});\n\n\t\tfunction doDelete() {\n\t\t\t// note: normally called from FileActions\n\t\t\tfileList.do_delete(['One.txt', 'Two.jpg']);\n\n\t\t\texpect(deleteStub.calledTwice).toEqual(true);\n\t\t\texpect(deleteStub.getCall(0).args[0]).toEqual('/subdir/One.txt');\n\t\t\texpect(deleteStub.getCall(1).args[0]).toEqual('/subdir/Two.jpg');\n\t\t}\n\t\tit('calls delete.php, removes the deleted entries and updates summary', function() {\n\t\t\tvar $summary;\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tdoDelete();\n\n\t\t\tdeferredDelete.resolve(200);\n\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(0);\n\t\t\texpect(fileList.findFileEl('Two.jpg').length).toEqual(0);\n\t\t\texpect(fileList.findFileEl('Three.pdf').length).toEqual(1);\n\t\t\texpect(fileList.$fileList.find('tr').length).toEqual(2);\n\n\t\t\t$summary = $('#filestable .summary');\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.info').text()).toEqual('1 folder and 1 file');\n\t\t\texpect($summary.find('.dirinfo').hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.fileinfo').hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.filesize').text()).toEqual('57 KB');\n\t\t\texpect(fileList.isEmpty).toEqual(false);\n\t\t\texpect($('#filestable thead th').hasClass('hidden')).toEqual(false);\n\t\t\texpect($('#emptycontent').hasClass('hidden')).toEqual(true);\n\n\t\t\texpect(notificationStub.notCalled).toEqual(true);\n\t\t});\n\t\tit('shows busy state on files to be deleted', function() {\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tdoDelete();\n\n\t\t\texpect(fileList.findFileEl('One.txt').hasClass('busy')).toEqual(true);\n\t\t\texpect(fileList.findFileEl('Three.pdf').hasClass('busy')).toEqual(false);\n\t\t});\n\t\tit('shows busy state on all files when deleting all', function() {\n\t\t\tfileList.setFiles(testFiles);\n\n\t\t\tfileList.do_delete();\n\n\t\t\texpect(fileList.$fileList.find('tr.busy').length).toEqual(4);\n\t\t});\n\t\tit('updates summary when deleting last file', function() {\n\t\t\tvar $summary;\n\t\t\tfileList.setFiles([testFiles[0], testFiles[1]]);\n\t\t\tdoDelete();\n\n\t\t\tdeferredDelete.resolve(200);\n\n\t\t\texpect(fileList.$fileList.find('tr').length).toEqual(0);\n\n\t\t\t$summary = $('#filestable .summary');\n\t\t\texpect($summary.hasClass('hidden')).toEqual(true);\n\t\t\texpect(fileList.isEmpty).toEqual(true);\n\t\t\texpect(fileList.files.length).toEqual(0);\n\t\t\texpect($('#filestable thead th').hasClass('hidden')).toEqual(true);\n\t\t\texpect($('#emptycontent').hasClass('hidden')).toEqual(false);\n\t\t});\n\t\tit('bring back deleted item when delete call failed', function() {\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tdoDelete();\n\n\t\t\tdeferredDelete.reject(403);\n\n\t\t\t// files are still in the list\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(1);\n\t\t\texpect(fileList.findFileEl('Two.jpg').length).toEqual(1);\n\t\t\texpect(fileList.$fileList.find('tr').length).toEqual(4);\n\n\t\t\texpect(notificationStub.calledTwice).toEqual(true);\n\t\t});\n\t\tit('remove file from list if delete call returned 404 not found', function() {\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tdoDelete();\n\n\t\t\tdeferredDelete.reject(404);\n\n\t\t\t// files are still in the list\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(0);\n\t\t\texpect(fileList.findFileEl('Two.jpg').length).toEqual(0);\n\t\t\texpect(fileList.$fileList.find('tr').length).toEqual(2);\n\n\t\t\texpect(notificationStub.notCalled).toEqual(true);\n\t\t});\n\t});\n\tdescribe('Renaming files', function() {\n\t\tvar deferredRename;\n\t\tvar renameStub;\n\n\t\tbeforeEach(function() {\n\t\t\tdeferredRename = $.Deferred();\n\t\t\trenameStub = sinon.stub(filesClient, 'move').returns(deferredRename.promise());\n\t\t});\n\t\tafterEach(function() {\n\t\t\trenameStub.restore();\n\t\t});\n\n\t\tfunction doCancelRename() {\n\t\t\tvar $input;\n\t\t\tfor (var i = 0; i < testFiles.length; i++) {\n\t\t\t\tfileList.add(testFiles[i]);\n\t\t\t}\n\n\t\t\t// trigger rename prompt\n\t\t\tfileList.rename('One.txt');\n\t\t\t$input = fileList.$fileList.find('input.filename');\n\t\t\t// keep same name\n\t\t\t$input.val('One.txt');\n\t\t\t// trigger submit because triggering blur doesn't work in all browsers\n\t\t\t$input.closest('form').trigger('submit');\n\n\t\t\texpect(renameStub.notCalled).toEqual(true);\n\t\t}\n\t\tfunction doRename() {\n\t\t\tvar $input;\n\n\t\t\tfor (var i = 0; i < testFiles.length; i++) {\n\t\t\t\tvar file = testFiles[i];\n\t\t\t\tfile.path = '/some/subdir';\n\t\t\t\tfileList.add(file, {silent: true});\n\t\t\t}\n\n\t\t\t// trigger rename prompt\n\t\t\tfileList.rename('One.txt');\n\t\t\t$input = fileList.$fileList.find('input.filename');\n\t\t\t$input.val('Tu_after_three.txt');\n\t\t\t// trigger submit because triggering blur doesn't work in all browsers\n\t\t\t$input.closest('form').trigger('submit');\n\n\t\t\texpect(renameStub.calledOnce).toEqual(true);\n\t\t\texpect(renameStub.getCall(0).args[0]).toEqual('/some/subdir/One.txt');\n\t\t\texpect(renameStub.getCall(0).args[1]).toEqual('/some/subdir/Tu_after_three.txt');\n\t\t}\n\t\tit('Inserts renamed file entry at correct position if rename ajax call suceeded', function() {\n\t\t\tdoRename();\n\n\t\t\tdeferredRename.resolve(201);\n\n\t\t\t// element stays renamed\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(0);\n\t\t\texpect(fileList.findFileEl('Tu_after_three.txt').length).toEqual(1);\n\t\t\texpect(fileList.findFileEl('Tu_after_three.txt').index()).toEqual(2); // after Two.jpg\n\n\t\t\texpect(notificationStub.notCalled).toEqual(true);\n\t\t});\n\t\tit('Reverts file entry if rename ajax call failed', function() {\n\t\t\tdoRename();\n\n\t\t\tdeferredRename.reject(403);\n\n\t\t\t// element was reverted\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(1);\n\t\t\texpect(fileList.findFileEl('One.txt').index()).toEqual(1); // after somedir\n\t\t\texpect(fileList.findFileEl('Tu_after_three.txt').length).toEqual(0);\n\n\t\t\texpect(notificationStub.calledOnce).toEqual(true);\n\t\t});\n\t\tit('Correctly updates file link after rename', function() {\n\t\t\tvar $tr;\n\t\t\tdoRename();\n\n\t\t\tdeferredRename.resolve(201);\n\n\t\t\t$tr = fileList.findFileEl('Tu_after_three.txt');\n\t\t\texpect($tr.find('a.name').attr('href'))\n\t\t\t\t.toEqual(OC.webroot + '/remote.php/webdav/some/subdir/Tu_after_three.txt');\n\t\t});\n\t\tit('Triggers \"fileActionsReady\" event after rename', function() {\n\t\t\tvar handler = sinon.stub();\n\t\t\tfileList.$fileList.on('fileActionsReady', handler);\n\t\t\tdoRename();\n\t\t\texpect(handler.notCalled).toEqual(true);\n\n\t\t\tdeferredRename.resolve(201);\n\n\t\t\texpect(handler.calledOnce).toEqual(true);\n\t\t\texpect(fileList.$fileList.find('.test').length).toEqual(0);\n\t\t});\n\t\tit('Leaves the summary alone when reinserting renamed element', function() {\n\t\t\tvar $summary = $('#filestable .summary');\n\t\t\tdoRename();\n\n\t\t\tdeferredRename.resolve(201);\n\n\t\t\texpect($summary.find('.info').text()).toEqual('1 folder and 3 files');\n\t\t});\n\t\tit('Leaves the summary alone when cancel renaming', function() {\n\t\t\tvar $summary = $('#filestable .summary');\n\t\t\tdoCancelRename();\n\t\t\texpect($summary.find('.info').text()).toEqual('1 folder and 3 files');\n\t\t});\n\t\tit('Shows busy state while rename in progress', function() {\n\t\t\tvar $tr;\n\t\t\tdoRename();\n\n\t\t\t// element is renamed before the request finishes\n\t\t\t$tr = fileList.findFileEl('Tu_after_three.txt');\n\t\t\texpect($tr.length).toEqual(1);\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(0);\n\t\t\t// file actions are hidden\n\t\t\texpect($tr.hasClass('busy')).toEqual(true);\n\n\t\t\t// input and form are gone\n\t\t\texpect(fileList.$fileList.find('input.filename').length).toEqual(0);\n\t\t\texpect(fileList.$fileList.find('form').length).toEqual(0);\n\t\t});\n\t\tit('Validates the file name', function() {\n\t\t\tvar $input, $tr;\n\n\t\t\tfor (var i = 0; i < testFiles.length; i++) {\n\t\t\t\tfileList.add(testFiles[i], {silent: true});\n\t\t\t}\n\n\t\t\t// trigger rename prompt\n\t\t\tfileList.rename('One.txt');\n\t\t\t$input = fileList.$fileList.find('input.filename');\n\t\t\t$input.val('Two.jpg');\n\n\t\t\t// simulate key to trigger validation\n\t\t\t$input.trigger(new $.Event('keyup', {keyCode: 97}));\n\n\t\t\t// input is still there with error\n\t\t\texpect(fileList.$fileList.find('input.filename').length).toEqual(1);\n\t\t\texpect(fileList.$fileList.find('input.filename').hasClass('error')).toEqual(true);\n\n\t\t\t// trigger submit does not send server request\n\t\t\t$input.closest('form').trigger('submit');\n\t\t\texpect(renameStub.notCalled).toEqual(true);\n\n\t\t\t// simulate escape key\n\t\t\t$input.trigger(new $.Event('keyup', {keyCode: 27}));\n\n\t\t\t// element is added back with the correct name\n\t\t\t$tr = fileList.findFileEl('One.txt');\n\t\t\texpect($tr.length).toEqual(1);\n\t\t\texpect($tr.find('a .nametext').text().trim()).toEqual('One.txt');\n\t\t\texpect($tr.find('a.name').is(':visible')).toEqual(true);\n\n\t\t\t$tr = fileList.findFileEl('Two.jpg');\n\t\t\texpect($tr.length).toEqual(1);\n\t\t\texpect($tr.find('a .nametext').text().trim()).toEqual('Two.jpg');\n\t\t\texpect($tr.find('a.name').is(':visible')).toEqual(true);\n\n\t\t\t// input and form are gone\n\t\t\texpect(fileList.$fileList.find('input.filename').length).toEqual(0);\n\t\t\texpect(fileList.$fileList.find('form').length).toEqual(0);\n\t\t});\n\t\tit('Restores thumbnail when rename was cancelled', function() {\n\t\t\tdoRename();\n\n\t\t\texpect(OC.TestUtil.getImageUrl(fileList.findFileEl('Tu_after_three.txt').find('.thumbnail')))\n\t\t\t\t.toEqual(OC.imagePath('core', 'loading.gif'));\n\n\t\t\tdeferredRename.reject(409);\n\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(1);\n\t\t\texpect(OC.TestUtil.getImageUrl(fileList.findFileEl('One.txt').find('.thumbnail')))\n\t\t\t\t.toEqual(OC.imagePath('core', 'filetypes/text.svg'));\n\t\t});\n\t});\n\tdescribe('Moving files', function() {\n\t\tvar deferredMove;\n\t\tvar moveStub;\n\n\t\tbeforeEach(function() {\n\t\t\tdeferredMove = $.Deferred();\n\t\t\tmoveStub = sinon.stub(filesClient, 'move').returns(deferredMove.promise());\n\n\t\t\tfileList.setFiles(testFiles);\n\t\t});\n\t\tafterEach(function() {\n\t\t\tmoveStub.restore();\n\t\t});\n\n\t\tit('Moves single file to target folder', function() {\n\t\t\tfileList.move('One.txt', '/somedir');\n\n\t\t\texpect(moveStub.calledOnce).toEqual(true);\n\t\t\texpect(moveStub.getCall(0).args[0]).toEqual('/subdir/One.txt');\n\t\t\texpect(moveStub.getCall(0).args[1]).toEqual('/somedir/One.txt');\n\n\t\t\tdeferredMove.resolve(201);\n\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(0);\n\n\t\t\t// folder size has increased\n\t\t\texpect(fileList.findFileEl('somedir').data('size')).toEqual(262);\n\t\t\texpect(fileList.findFileEl('somedir').find('.filesize').text()).toEqual('262 B');\n\n\t\t\texpect(notificationStub.notCalled).toEqual(true);\n\t\t});\n\t\tit('Moves list of files to target folder', function() {\n\t\t\tvar deferredMove1 = $.Deferred();\n\t\t\tvar deferredMove2 = $.Deferred();\n\t\t\tmoveStub.onCall(0).returns(deferredMove1.promise());\n\t\t\tmoveStub.onCall(1).returns(deferredMove2.promise());\n\n\t\t\tfileList.move(['One.txt', 'Two.jpg'], '/somedir');\n\n\t\t\texpect(moveStub.calledTwice).toEqual(true);\n\t\t\texpect(moveStub.getCall(0).args[0]).toEqual('/subdir/One.txt');\n\t\t\texpect(moveStub.getCall(0).args[1]).toEqual('/somedir/One.txt');\n\t\t\texpect(moveStub.getCall(1).args[0]).toEqual('/subdir/Two.jpg');\n\t\t\texpect(moveStub.getCall(1).args[1]).toEqual('/somedir/Two.jpg');\n\n\t\t\tdeferredMove1.resolve(201);\n\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(0);\n\n\t\t\t// folder size has increased during move\n\t\t\texpect(fileList.findFileEl('somedir').data('size')).toEqual(262);\n\t\t\texpect(fileList.findFileEl('somedir').find('.filesize').text()).toEqual('262 B');\n\n\t\t\tdeferredMove2.resolve(201);\n\n\t\t\texpect(fileList.findFileEl('Two.jpg').length).toEqual(0);\n\n\t\t\t// folder size has increased\n\t\t\texpect(fileList.findFileEl('somedir').data('size')).toEqual(12311);\n\t\t\texpect(fileList.findFileEl('somedir').find('.filesize').text()).toEqual('12 KB');\n\n\t\t\texpect(notificationStub.notCalled).toEqual(true);\n\t\t});\n\t\tit('Shows notification if a file could not be moved', function() {\n\t\t\tfileList.move('One.txt', '/somedir');\n\n\t\t\texpect(moveStub.calledOnce).toEqual(true);\n\n\t\t\tdeferredMove.reject(409);\n\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(1);\n\n\t\t\texpect(notificationStub.calledOnce).toEqual(true);\n\t\t\texpect(notificationStub.getCall(0).args[0]).toEqual('Could not move \"One.txt\"');\n\t\t});\n\t\tit('Restores thumbnail if a file could not be moved', function() {\n\t\t\tfileList.move('One.txt', '/somedir');\n\n\t\t\texpect(OC.TestUtil.getImageUrl(fileList.findFileEl('One.txt').find('.thumbnail')))\n\t\t\t\t.toEqual(OC.imagePath('core', 'loading.gif'));\n\n\t\t\texpect(moveStub.calledOnce).toEqual(true);\n\n\t\t\tdeferredMove.reject(409);\n\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(1);\n\n\t\t\texpect(notificationStub.calledOnce).toEqual(true);\n\t\t\texpect(notificationStub.getCall(0).args[0]).toEqual('Could not move \"One.txt\"');\n\n\t\t\texpect(OC.TestUtil.getImageUrl(fileList.findFileEl('One.txt').find('.thumbnail')))\n\t\t\t\t.toEqual(OC.imagePath('core', 'filetypes/text.svg'));\n\t\t});\n\t});\n\tdescribe('Update file', function() {\n\t\tit('does not change summary', function() {\n\t\t\tvar $summary = $('#filestable .summary');\n\t\t\tvar fileData = new FileInfo({\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'test file',\n\t\t\t});\n\t\t\tvar $tr = fileList.add(fileData);\n\n\t\t\texpect($summary.find('.info').text()).toEqual('0 folders and 1 file');\n\n\t\t\tvar model = fileList.getModelForFile('test file');\n\t\t\tmodel.set({size: '100'});\n\t\t\texpect($summary.find('.info').text()).toEqual('0 folders and 1 file');\n\t\t});\n\t})\n\tdescribe('List rendering', function() {\n\t\tit('renders a list of files using add()', function() {\n\t\t\texpect(fileList.files.length).toEqual(0);\n\t\t\texpect(fileList.files).toEqual([]);\n\t\t\tfileList.setFiles(testFiles);\n\t\t\texpect($('#fileList tr').length).toEqual(4);\n\t\t\texpect(fileList.files.length).toEqual(4);\n\t\t\texpect(fileList.files).toEqual(testFiles);\n\t\t});\n\t\tit('updates summary using the file sizes', function() {\n\t\t\tvar $summary;\n\t\t\tfileList.setFiles(testFiles);\n\t\t\t$summary = $('#filestable .summary');\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.info').text()).toEqual('1 folder and 3 files');\n\t\t\texpect($summary.find('.filesize').text()).toEqual('69 KB');\n\t\t});\n\t\tit('shows headers, summary and hide empty content message after setting files', function(){\n\t\t\tfileList.setFiles(testFiles);\n\t\t\texpect($('#filestable thead th').hasClass('hidden')).toEqual(false);\n\t\t\texpect($('#emptycontent').hasClass('hidden')).toEqual(true);\n\t\t\texpect(fileList.$el.find('.summary').hasClass('hidden')).toEqual(false);\n\t\t});\n\t\tit('hides headers, summary and show empty content message after setting empty file list', function(){\n\t\t\tfileList.setFiles([]);\n\t\t\texpect($('#filestable thead th').hasClass('hidden')).toEqual(true);\n\t\t\texpect($('#emptycontent').hasClass('hidden')).toEqual(false);\n\t\t\texpect($('#emptycontent .uploadmessage').hasClass('hidden')).toEqual(false);\n\t\t\texpect(fileList.$el.find('.summary').hasClass('hidden')).toEqual(true);\n\t\t});\n\t\tit('hides headers, upload message, and summary when list is empty and user has no creation permission', function(){\n\t\t\t$('#permissions').val(0);\n\t\t\tfileList.setFiles([]);\n\t\t\texpect($('#filestable thead th').hasClass('hidden')).toEqual(true);\n\t\t\texpect($('#emptycontent').hasClass('hidden')).toEqual(false);\n\t\t\texpect($('#emptycontent .uploadmessage').hasClass('hidden')).toEqual(true);\n\t\t\texpect(fileList.$el.find('.summary').hasClass('hidden')).toEqual(true);\n\t\t});\n\t\tit('calling findFileEl() can find existing file element', function() {\n\t\t\tfileList.setFiles(testFiles);\n\t\t\texpect(fileList.findFileEl('Two.jpg').length).toEqual(1);\n\t\t});\n\t\tit('calling findFileEl() returns empty when file not found in file', function() {\n\t\t\tfileList.setFiles(testFiles);\n\t\t\texpect(fileList.findFileEl('unexist.dat').length).toEqual(0);\n\t\t});\n\t\tit('only add file if in same current directory', function() {\n\t\t\t$('#dir').val('/current dir');\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'testFile.txt',\n\t\t\t\tdirectory: '/current dir'\n\t\t\t};\n\t\t\tfileList.add(fileData);\n\t\t\texpect(fileList.findFileEl('testFile.txt').length).toEqual(1);\n\t\t});\n\t\tit('triggers \"fileActionsReady\" event after update', function() {\n\t\t\tvar handler = sinon.stub();\n\t\t\tfileList.$fileList.on('fileActionsReady', handler);\n\t\t\tfileList.setFiles(testFiles);\n\t\t\texpect(handler.calledOnce).toEqual(true);\n\t\t\texpect(handler.getCall(0).args[0].$files.length).toEqual(testFiles.length);\n\t\t});\n\t\tit('triggers \"fileActionsReady\" event after single add', function() {\n\t\t\tvar handler = sinon.stub();\n\t\t\tvar $tr;\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tfileList.$fileList.on('fileActionsReady', handler);\n\t\t\t$tr = fileList.add({name: 'test.txt'});\n\t\t\texpect(handler.calledOnce).toEqual(true);\n\t\t\texpect(handler.getCall(0).args[0].$files.is($tr)).toEqual(true);\n\t\t});\n\t\tit('triggers \"fileActionsReady\" event after next page load with the newly appended files', function() {\n\t\t\tvar handler = sinon.stub();\n\t\t\tfileList.setFiles(generateFiles(0, 64));\n\t\t\tfileList.$fileList.on('fileActionsReady', handler);\n\t\t\tfileList._nextPage();\n\t\t\texpect(handler.calledOnce).toEqual(true);\n\t\t\texpect(handler.getCall(0).args[0].$files.length).toEqual(fileList.pageSize());\n\t\t});\n\t\tit('does not trigger \"fileActionsReady\" event after single add with silent argument', function() {\n\t\t\tvar handler = sinon.stub();\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tfileList.$fileList.on('fileActionsReady', handler);\n\t\t\tfileList.add({name: 'test.txt'}, {silent: true});\n\t\t\texpect(handler.notCalled).toEqual(true);\n\t\t});\n\t\tit('triggers \"updated\" event after update', function() {\n\t\t\tvar handler = sinon.stub();\n\t\t\tfileList.$fileList.on('updated', handler);\n\t\t\tfileList.setFiles(testFiles);\n\t\t\texpect(handler.calledOnce).toEqual(true);\n\t\t});\n\t\tit('does not update summary when removing non-existing files', function() {\n\t\t\tvar $summary;\n\t\t\t// single file\n\t\t\tfileList.setFiles([testFiles[0]]);\n\t\t\t$summary = $('#filestable .summary');\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.info').text()).toEqual('0 folders and 1 file');\n\t\t\tfileList.remove('unexist.txt');\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.info').text()).toEqual('0 folders and 1 file');\n\t\t});\n\t});\n\tdescribe('Filtered list rendering', function() {\n\t\tit('filters the list of files using filter()', function() {\n\t\t\texpect(fileList.files.length).toEqual(0);\n\t\t\texpect(fileList.files).toEqual([]);\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tvar $summary = $('#filestable .summary');\n\t\t\tvar $nofilterresults = fileList.$el.find(\".nofilterresults\");\n\t\t\texpect($nofilterresults.length).toEqual(1);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\n\t\t\texpect($('#fileList tr:not(.hidden)').length).toEqual(4);\n\t\t\texpect(fileList.files.length).toEqual(4);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(true);\n\n\t\t\tfileList.setFilter('e');\n\t\t\texpect($('#fileList tr:not(.hidden)').length).toEqual(3);\n\t\t\texpect(fileList.files.length).toEqual(4);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.info').text()).toEqual(\"1 folder and 2 files match 'e'\");\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(true);\n\n\t\t\tfileList.setFilter('ee');\n\t\t\texpect($('#fileList tr:not(.hidden)').length).toEqual(1);\n\t\t\texpect(fileList.files.length).toEqual(4);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.info').text()).toEqual(\"0 folders and 1 file matches 'ee'\");\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(true);\n\n\t\t\tfileList.setFilter('eee');\n\t\t\texpect($('#fileList tr:not(.hidden)').length).toEqual(0);\n\t\t\texpect(fileList.files.length).toEqual(4);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(true);\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(false);\n\n\t\t\tfileList.setFilter('ee');\n\t\t\texpect($('#fileList tr:not(.hidden)').length).toEqual(1);\n\t\t\texpect(fileList.files.length).toEqual(4);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.info').text()).toEqual(\"0 folders and 1 file matches 'ee'\");\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(true);\n\n\t\t\tfileList.setFilter('e');\n\t\t\texpect($('#fileList tr:not(.hidden)').length).toEqual(3);\n\t\t\texpect(fileList.files.length).toEqual(4);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.info').text()).toEqual(\"1 folder and 2 files match 'e'\");\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(true);\n\n\t\t\tfileList.setFilter('');\n\t\t\texpect($('#fileList tr:not(.hidden)').length).toEqual(4);\n\t\t\texpect(fileList.files.length).toEqual(4);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.info').text()).toEqual(\"1 folder and 3 files\");\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(true);\n\t\t});\n\t\tit('hides the emptyfiles notice when using filter()', function() {\n\t\t\texpect(fileList.files.length).toEqual(0);\n\t\t\texpect(fileList.files).toEqual([]);\n\t\t\tfileList.setFiles([]);\n\t\t\tvar $summary = $('#filestable .summary');\n\t\t\tvar $emptycontent = fileList.$el.find(\"#emptycontent\");\n\t\t\tvar $nofilterresults = fileList.$el.find(\".nofilterresults\");\n\t\t\texpect($emptycontent.length).toEqual(1);\n\t\t\texpect($nofilterresults.length).toEqual(1);\n\n\t\t\texpect($('#fileList tr:not(.hidden)').length).toEqual(0);\n\t\t\texpect(fileList.files.length).toEqual(0);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(true);\n\t\t\texpect($emptycontent.hasClass('hidden')).toEqual(false);\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(true);\n\n\t\t\tfileList.setFilter('e');\n\t\t\texpect($('#fileList tr:not(.hidden)').length).toEqual(0);\n\t\t\texpect(fileList.files.length).toEqual(0);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(true);\n\t\t\texpect($emptycontent.hasClass('hidden')).toEqual(true);\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(false);\n\n\t\t\tfileList.setFilter('');\n\t\t\texpect($('#fileList tr:not(.hidden)').length).toEqual(0);\n\t\t\texpect(fileList.files.length).toEqual(0);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(true);\n\t\t\texpect($emptycontent.hasClass('hidden')).toEqual(false);\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(true);\n\t\t});\n\t\tit('does not show the emptyfiles or nofilterresults notice when the mask is active', function() {\n\t\t\texpect(fileList.files.length).toEqual(0);\n\t\t\texpect(fileList.files).toEqual([]);\n\t\t\tfileList.showMask();\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tvar $emptycontent = fileList.$el.find(\"#emptycontent\");\n\t\t\tvar $nofilterresults = fileList.$el.find(\".nofilterresults\");\n\t\t\texpect($emptycontent.length).toEqual(1);\n\t\t\texpect($nofilterresults.length).toEqual(1);\n\n\t\t\texpect($emptycontent.hasClass('hidden')).toEqual(true);\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(true);\n\n\t\t\t/*\n\t\t\tfileList.setFilter('e');\n\t\t\texpect($emptycontent.hasClass('hidden')).toEqual(true);\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(false);\n\t\t\t*/\n\n\t\t\tfileList.setFilter('');\n\t\t\texpect($emptycontent.hasClass('hidden')).toEqual(true);\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(true);\n\t\t});\n\t});\n\tdescribe('Rendering next page on scroll', function() {\n\t\tbeforeEach(function() {\n\t\t\tfileList.setFiles(generateFiles(0, 64));\n\t\t});\n\t\tit('renders only the first page', function() {\n\t\t\texpect(fileList.files.length).toEqual(65);\n\t\t\texpect($('#fileList tr').length).toEqual(20);\n\t\t});\n\t\tit('renders the second page when scrolling down (trigger nextPage)', function() {\n\t\t\t// TODO: can't simulate scrolling here, so calling nextPage directly\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(40);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(60);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(65);\n\t\t\tfileList._nextPage(true);\n\t\t\t// stays at 65\n\t\t\texpect($('#fileList tr').length).toEqual(65);\n\t\t});\n\t\tit('inserts into the DOM if insertion point is in the visible page ', function() {\n\t\t\tfileList.add({\n\t\t\t\tid: 2000,\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'File with index 15b.txt'\n\t\t\t});\n\t\t\texpect($('#fileList tr').length).toEqual(21);\n\t\t\texpect(fileList.findFileEl('File with index 15b.txt').index()).toEqual(16);\n\t\t});\n\t\tit('does not inserts into the DOM if insertion point is not the visible page ', function() {\n\t\t\tfileList.add({\n\t\t\t\tid: 2000,\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'File with index 28b.txt'\n\t\t\t});\n\t\t\texpect($('#fileList tr').length).toEqual(20);\n\t\t\texpect(fileList.findFileEl('File with index 28b.txt').length).toEqual(0);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(40);\n\t\t\texpect(fileList.findFileEl('File with index 28b.txt').index()).toEqual(29);\n\t\t});\n\t\tit('appends into the DOM when inserting a file after the last visible element', function() {\n\t\t\tfileList.add({\n\t\t\t\tid: 2000,\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'File with index 19b.txt'\n\t\t\t});\n\t\t\texpect($('#fileList tr').length).toEqual(21);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(41);\n\t\t});\n\t\tit('appends into the DOM when inserting a file on the last page when visible', function() {\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(40);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(60);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(65);\n\t\t\tfileList._nextPage(true);\n\t\t\tfileList.add({\n\t\t\t\tid: 2000,\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'File with index 88.txt'\n\t\t\t});\n\t\t\texpect($('#fileList tr').length).toEqual(66);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(66);\n\t\t});\n\t\tit('shows additional page when appending a page of files and scrolling down', function() {\n\t\t\tvar newFiles = generateFiles(66, 81);\n\t\t\tfor (var i = 0; i < newFiles.length; i++) {\n\t\t\t\tfileList.add(newFiles[i]);\n\t\t\t}\n\t\t\texpect($('#fileList tr').length).toEqual(20);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(40);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(60);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(80);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(81);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(81);\n\t\t});\n\t\tit('automatically renders next page when there are not enough elements visible', function() {\n\t\t\t// delete the 15 first elements\n\t\t\tfor (var i = 0; i < 15; i++) {\n\t\t\t\tfileList.remove(fileList.files[0].name);\n\t\t\t}\n\t\t\t// still makes sure that there are 20 elements visible, if any\n\t\t\texpect($('#fileList tr').length).toEqual(25);\n\t\t});\n\t});\n\tdescribe('file previews', function() {\n\t\tvar previewLoadStub;\n\n\t\tbeforeEach(function() {\n\t\t\tpreviewLoadStub = sinon.stub(OCA.Files.FileList.prototype, 'lazyLoadPreview');\n\t\t});\n\t\tafterEach(function() {\n\t\t\tpreviewLoadStub.restore();\n\t\t});\n\t\tit('renders default file icon when none provided and no mime type is set', function() {\n\t\t\tvar fileData = {\n\t\t\t\tname: 'testFile.txt'\n\t\t\t};\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\tvar $imgDiv = $tr.find('td.filename .thumbnail');\n\t\t\texpect(OC.TestUtil.getImageUrl($imgDiv)).toEqual(OC.webroot + '/core/img/filetypes/file.svg');\n\t\t\t// tries to load preview\n\t\t\texpect(previewLoadStub.calledOnce).toEqual(true);\n\t\t});\n\t\tit('renders default icon for folder when none provided', function() {\n\t\t\tvar fileData = {\n\t\t\t\tname: 'test dir',\n\t\t\t\tmimetype: 'httpd/unix-directory'\n\t\t\t};\n\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\tvar $imgDiv = $tr.find('td.filename .thumbnail');\n\t\t\texpect(OC.TestUtil.getImageUrl($imgDiv)).toEqual(OC.webroot + '/core/img/filetypes/folder.svg');\n\t\t\t// no preview since it's a directory\n\t\t\texpect(previewLoadStub.notCalled).toEqual(true);\n\t\t});\n\t\tit('renders provided icon for file when provided', function() {\n\t\t\tvar fileData = new FileInfo({\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'test file',\n\t\t\t\ticon: OC.webroot + '/core/img/filetypes/application-pdf.svg',\n\t\t\t\tmimetype: 'application/pdf'\n\t\t\t});\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\tvar $imgDiv = $tr.find('td.filename .thumbnail');\n\t\t\texpect(OC.TestUtil.getImageUrl($imgDiv)).toEqual(OC.webroot + '/core/img/filetypes/application-pdf.svg');\n\t\t\t// try loading preview\n\t\t\texpect(previewLoadStub.calledOnce).toEqual(true);\n\t\t});\n\t\tit('renders provided icon for file when provided', function() {\n\t\t\tvar fileData = new FileInfo({\n\t\t\t\tname: 'somefile.pdf',\n\t\t\t\ticon: OC.webroot + '/core/img/filetypes/application-pdf.svg'\n\t\t\t});\n\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\tvar $imgDiv = $tr.find('td.filename .thumbnail');\n\t\t\texpect(OC.TestUtil.getImageUrl($imgDiv)).toEqual(OC.webroot + '/core/img/filetypes/application-pdf.svg');\n\t\t\t// try loading preview\n\t\t\texpect(previewLoadStub.calledOnce).toEqual(true);\n\t\t});\n\t\tit('renders provided icon for folder when provided', function() {\n\t\t\tvar fileData = new FileInfo({\n\t\t\t\tname: 'some folder',\n\t\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\t\ticon: OC.webroot + '/core/img/filetypes/folder-alt.svg'\n\t\t\t});\n\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\tvar $imgDiv = $tr.find('td.filename .thumbnail');\n\t\t\texpect(OC.TestUtil.getImageUrl($imgDiv)).toEqual(OC.webroot + '/core/img/filetypes/folder-alt.svg');\n\t\t\t// do not load preview for folders\n\t\t\texpect(previewLoadStub.notCalled).toEqual(true);\n\t\t});\n\t\tit('renders preview when no icon was provided', function() {\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'test file'\n\t\t\t};\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\tvar $td = $tr.find('td.filename');\n\t\t\texpect(OC.TestUtil.getImageUrl($td.find('.thumbnail')))\n\t\t\t\t.toEqual(OC.webroot + '/core/img/filetypes/file.svg');\n\t\t\texpect(previewLoadStub.calledOnce).toEqual(true);\n\t\t\t// third argument is callback\n\t\t\tpreviewLoadStub.getCall(0).args[0].callback(OC.webroot + '/somepath.png');\n\t\t\texpect(OC.TestUtil.getImageUrl($td.find('.thumbnail'))).toEqual(OC.webroot + '/somepath.png');\n\t\t});\n\t\tit('does not render preview for directories', function() {\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'dir',\n\t\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\t\tname: 'test dir'\n\t\t\t};\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\tvar $td = $tr.find('td.filename');\n\t\t\texpect(OC.TestUtil.getImageUrl($td.find('.thumbnail'))).toEqual(OC.webroot + '/core/img/filetypes/folder.svg');\n\t\t\texpect(previewLoadStub.notCalled).toEqual(true);\n\t\t});\n\t\tit('render external storage icon for external storage root', function() {\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'dir',\n\t\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\t\tname: 'test dir',\n\t\t\t\tmountType: 'external-root'\n\t\t\t};\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\tvar $td = $tr.find('td.filename');\n\t\t\texpect(OC.TestUtil.getImageUrl($td.find('.thumbnail'))).toEqual(OC.webroot + '/core/img/filetypes/folder-external.svg');\n\t\t\texpect(previewLoadStub.notCalled).toEqual(true);\n\t\t});\n\t\tit('render external storage icon for external storage subdir', function() {\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'dir',\n\t\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\t\tname: 'test dir',\n\t\t\t\tmountType: 'external'\n\t\t\t};\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\tvar $td = $tr.find('td.filename');\n\t\t\texpect(OC.TestUtil.getImageUrl($td.find('.thumbnail'))).toEqual(OC.webroot + '/core/img/filetypes/folder-external.svg');\n\t\t\texpect(previewLoadStub.notCalled).toEqual(true);\n\t\t\t// default icon override\n\t\t\texpect($tr.attr('data-icon')).toEqual(OC.webroot + '/core/img/filetypes/folder-external.svg');\n\t\t});\n\n\t});\n\tdescribe('viewer mode', function() {\n\t\tit('enabling viewer mode hides files table and action buttons', function() {\n\t\t\tfileList.setViewerMode(true);\n\t\t\texpect($('#filestable').hasClass('hidden')).toEqual(true);\n\t\t\texpect($('.actions').hasClass('hidden')).toEqual(true);\n\t\t\texpect($('.notCreatable').hasClass('hidden')).toEqual(true);\n\t\t});\n\t\tit('disabling viewer mode restores files table and action buttons', function() {\n\t\t\tfileList.setViewerMode(true);\n\t\t\tfileList.setViewerMode(false);\n\t\t\texpect($('#filestable').hasClass('hidden')).toEqual(false);\n\t\t\texpect($('.actions').hasClass('hidden')).toEqual(false);\n\t\t\texpect($('.notCreatable').hasClass('hidden')).toEqual(true);\n\t\t});\n\t\tit('disabling viewer mode restores files table and action buttons with correct permissions', function() {\n\t\t\t$('#permissions').val(0);\n\t\t\tfileList.setViewerMode(true);\n\t\t\tfileList.setViewerMode(false);\n\t\t\texpect($('#filestable').hasClass('hidden')).toEqual(false);\n\t\t\texpect($('.actions').hasClass('hidden')).toEqual(true);\n\t\t\texpect($('.notCreatable').hasClass('hidden')).toEqual(false);\n\t\t});\n\t\tit('toggling viewer mode triggers event', function() {\n\t\t\tvar handler = sinon.stub();\n\t\t\tfileList.$el.on('changeViewerMode', handler);\n\t\t\tfileList.setViewerMode(true);\n\t\t\texpect(handler.calledOnce).toEqual(true);\n\t\t\texpect(handler.getCall(0).args[0].viewerModeEnabled).toEqual(true);\n\n\t\t\thandler.reset();\n\t\t\tfileList.setViewerMode(false);\n\t\t\texpect(handler.calledOnce).toEqual(true);\n\t\t\texpect(handler.getCall(0).args[0].viewerModeEnabled).toEqual(false);\n\t\t});\n\t});\n\tdescribe('loading file list', function() {\n\t\tvar deferredList;\n\t\tvar getFolderContentsStub;\n\n\t\tbeforeEach(function() {\n\t\t\tdeferredList = $.Deferred();\n\t\t\tgetFolderContentsStub = sinon.stub(filesClient, 'getFolderContents').returns(deferredList.promise());\n\t\t});\n\t\tafterEach(function() {\n\t\t\tgetFolderContentsStub.restore();\n\t\t});\n\t\tit('fetches file list from server and renders it when reload() is called', function() {\n\t\t\tfileList.reload();\n\t\t\texpect(getFolderContentsStub.calledOnce).toEqual(true);\n\t\t\texpect(getFolderContentsStub.calledWith('/subdir')).toEqual(true);\n\t\t\tdeferredList.resolve(200, [testRoot].concat(testFiles));\n\t\t\texpect($('#fileList tr').length).toEqual(4);\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(1);\n\t\t});\n\t\tit('switches dir and fetches file list when calling changeDirectory()', function() {\n\t\t\tfileList.changeDirectory('/anothersubdir');\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/anothersubdir');\n\t\t\texpect(getFolderContentsStub.calledOnce).toEqual(true);\n\t\t\texpect(getFolderContentsStub.calledWith('/anothersubdir')).toEqual(true);\n\t\t});\n\t\tit('converts backslashes to slashes when calling changeDirectory()', function() {\n\t\t\tfileList.changeDirectory('/another\\\\subdir');\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/another/subdir');\n\t\t});\n\t\tit('switches to root dir when current directory does not exist', function() {\n\t\t\tfileList.changeDirectory('/unexist');\n\t\t\tdeferredList.reject(404);\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/');\n\t\t});\n\t\tit('switches to root dir when current directory is forbidden', function() {\n\t\t\tfileList.changeDirectory('/unexist');\n\t\t\tdeferredList.reject(403);\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/');\n\t\t});\n\t\tit('switches to root dir when current directory is unavailable', function() {\n\t\t\tfileList.changeDirectory('/unexist');\n\t\t\tdeferredList.reject(500);\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/');\n\t\t});\n\t\tit('shows mask before loading file list then hides it at the end', function() {\n\t\t\tvar showMaskStub = sinon.stub(fileList, 'showMask');\n\t\t\tvar hideMaskStub = sinon.stub(fileList, 'hideMask');\n\t\t\tfileList.changeDirectory('/anothersubdir');\n\t\t\texpect(showMaskStub.calledOnce).toEqual(true);\n\t\t\texpect(hideMaskStub.calledOnce).toEqual(false);\n\t\t\tdeferredList.resolve(200, [testRoot].concat(testFiles));\n\t\t\texpect(showMaskStub.calledOnce).toEqual(true);\n\t\t\texpect(hideMaskStub.calledOnce).toEqual(true);\n\t\t\tshowMaskStub.restore();\n\t\t\thideMaskStub.restore();\n\t\t});\n\t\tit('triggers \"changeDirectory\" event when changing directory', function() {\n\t\t\tvar handler = sinon.stub();\n\t\t\t$('#app-content-files').on('changeDirectory', handler);\n\t\t\tfileList.changeDirectory('/somedir');\n\t\t\tdeferredList.resolve(200, [testRoot].concat(testFiles));\n\t\t\texpect(handler.calledOnce).toEqual(true);\n\t\t\texpect(handler.getCall(0).args[0].dir).toEqual('/somedir');\n\t\t});\n\t\tit('changes the directory when receiving \"urlChanged\" event', function() {\n\t\t\t$('#app-content-files').trigger(new $.Event('urlChanged', {view: 'files', dir: '/somedir'}));\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/somedir');\n\t\t});\n\t\tit('refreshes breadcrumb after update', function() {\n\t\t\tvar setDirSpy = sinon.spy(fileList.breadcrumb, 'setDirectory');\n\t\t\tfileList.changeDirectory('/anothersubdir');\n\t\t\tdeferredList.resolve(200, [testRoot].concat(testFiles));\n\t\t\texpect(fileList.breadcrumb.setDirectory.calledOnce).toEqual(true);\n\t\t\texpect(fileList.breadcrumb.setDirectory.calledWith('/anothersubdir')).toEqual(true);\n\t\t\tsetDirSpy.restore();\n\t\t\tgetFolderContentsStub.restore();\n\t\t});\n\t});\n\tdescribe('breadcrumb events', function() {\n\t\tvar deferredList;\n\t\tvar getFolderContentsStub;\n\n\t\tbeforeEach(function() {\n\t\t\tdeferredList = $.Deferred();\n\t\t\tgetFolderContentsStub = sinon.stub(filesClient, 'getFolderContents').returns(deferredList.promise());\n\t\t});\n\t\tafterEach(function() {\n\t\t\tgetFolderContentsStub.restore();\n\t\t});\n\t\tit('clicking on root breadcrumb changes directory to root', function() {\n\t\t\tfileList.changeDirectory('/subdir/two/three with space/four/five');\n\t\t\tdeferredList.resolve(200, [testRoot].concat(testFiles));\n\t\t\tvar changeDirStub = sinon.stub(fileList, 'changeDirectory');\n\t\t\tfileList.breadcrumb.$el.find('.crumb:eq(0)').trigger({type: 'click', which: 1});\n\n\t\t\texpect(changeDirStub.calledOnce).toEqual(true);\n\t\t\texpect(changeDirStub.getCall(0).args[0]).toEqual('/');\n\t\t\tchangeDirStub.restore();\n\t\t});\n\t\tit('clicking on breadcrumb changes directory', function() {\n\t\t\tfileList.changeDirectory('/subdir/two/three with space/four/five');\n\t\t\tdeferredList.resolve(200, [testRoot].concat(testFiles));\n\t\t\tvar changeDirStub = sinon.stub(fileList, 'changeDirectory');\n\t\t\tfileList.breadcrumb.$el.find('.crumb:eq(3)').trigger({type: 'click', which: 1});\n\n\t\t\texpect(changeDirStub.calledOnce).toEqual(true);\n\t\t\texpect(changeDirStub.getCall(0).args[0]).toEqual('/subdir/two/three with space');\n\t\t\tchangeDirStub.restore();\n\t\t});\n\t\tit('dropping files on breadcrumb calls move operation', function() {\n\t\t\tvar testDir = '/subdir/two/three with space/four/five';\n\t\t\tvar moveStub = sinon.stub(filesClient, 'move').returns($.Deferred().promise());\n\t\t\tfileList.changeDirectory(testDir);\n\t\t\tdeferredList.resolve(200, [testRoot].concat(testFiles));\n\t\t\tvar $crumb = fileList.breadcrumb.$el.find('.crumb:eq(3)');\n\t\t\t// no idea what this is but is required by the handler\n\t\t\tvar ui = {\n\t\t\t\thelper: {\n\t\t\t\t\tfind: sinon.stub()\n\t\t\t\t}\n\t\t\t};\n\t\t\t// returns a list of tr that were dragged\n\t\t\tui.helper.find.returns([\n\t\t\t\t$('<tr data-file=\"One.txt\" data-dir=\"' + testDir + '\"></tr>'),\n\t\t\t\t$('<tr data-file=\"Two.jpg\" data-dir=\"' + testDir + '\"></tr>')\n\t\t\t]);\n\t\t\t// simulate drop event\n\t\t\tfileList._onDropOnBreadCrumb(new $.Event('drop', {target: $crumb}), ui);\n\n\t\t\texpect(moveStub.callCount).toEqual(2);\n\t\t\texpect(moveStub.getCall(0).args[0]).toEqual(testDir + '/One.txt');\n\t\t\texpect(moveStub.getCall(0).args[1]).toEqual('/subdir/two/three with space/One.txt');\n\t\t\texpect(moveStub.getCall(1).args[0]).toEqual(testDir + '/Two.jpg');\n\t\t\texpect(moveStub.getCall(1).args[1]).toEqual('/subdir/two/three with space/Two.jpg');\n\t\t\tmoveStub.restore();\n\t\t});\n\t\tit('dropping files on same dir breadcrumb does nothing', function() {\n\t\t\tvar testDir = '/subdir/two/three with space/four/five';\n\t\t\tvar moveStub = sinon.stub(filesClient, 'move').returns($.Deferred().promise());\n\t\t\tfileList.changeDirectory(testDir);\n\t\t\tdeferredList.resolve(200, [testRoot].concat(testFiles));\n\t\t\tvar $crumb = fileList.breadcrumb.$el.find('.crumb:last');\n\t\t\t// no idea what this is but is required by the handler\n\t\t\tvar ui = {\n\t\t\t\thelper: {\n\t\t\t\t\tfind: sinon.stub()\n\t\t\t\t}\n\t\t\t};\n\t\t\t// returns a list of tr that were dragged\n\t\t\tui.helper.find.returns([\n\t\t\t\t$('<tr data-file=\"One.txt\" data-dir=\"' + testDir + '\"></tr>'),\n\t\t\t\t$('<tr data-file=\"Two.jpg\" data-dir=\"' + testDir + '\"></tr>')\n\t\t\t]);\n\t\t\t// simulate drop event\n\t\t\tfileList._onDropOnBreadCrumb(new $.Event('drop', {target: $crumb}), ui);\n\n\t\t\t// no extra server request\n\t\t\texpect(moveStub.notCalled).toEqual(true);\n\t\t});\n\t});\n\tdescribe('Download Url', function() {\n\t\tit('returns correct download URL for single files', function() {\n\t\t\texpect(fileList.getDownloadUrl('some file.txt'))\n\t\t\t\t.toEqual(OC.webroot + '/remote.php/webdav/subdir/some%20file.txt');\n\t\t\texpect(fileList.getDownloadUrl('some file.txt', '/anotherpath/abc'))\n\t\t\t\t.toEqual(OC.webroot + '/remote.php/webdav/anotherpath/abc/some%20file.txt');\n\t\t\t$('#dir').val('/');\n\t\t\texpect(fileList.getDownloadUrl('some file.txt'))\n\t\t\t\t.toEqual(OC.webroot + '/remote.php/webdav/some%20file.txt');\n\t\t});\n\t\tit('returns correct download URL for multiple files', function() {\n\t\t\texpect(fileList.getDownloadUrl(['a b c.txt', 'd e f.txt']))\n\t\t\t\t.toEqual(OC.webroot + '/index.php/apps/files/ajax/download.php?dir=%2Fsubdir&files=%5B%22a%20b%20c.txt%22%2C%22d%20e%20f.txt%22%5D');\n\t\t});\n\t\tit('returns the correct ajax URL', function() {\n\t\t\texpect(fileList.getAjaxUrl('test', {a:1, b:'x y'}))\n\t\t\t\t.toEqual(OC.webroot + '/index.php/apps/files/ajax/test.php?a=1&b=x%20y');\n\t\t});\n\t});\n\tdescribe('File selection', function() {\n\t\tbeforeEach(function() {\n\t\t\tfileList.setFiles(testFiles);\n\t\t});\n\t\tit('Selects a file when clicking its checkbox', function() {\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\texpect($tr.find('input:checkbox').prop('checked')).toEqual(false);\n\t\t\t$tr.find('td.filename input:checkbox').click();\n\n\t\t\texpect($tr.find('input:checkbox').prop('checked')).toEqual(true);\n\t\t});\n\t\tit('Selects/deselect a file when clicking on the name while holding Ctrl', function() {\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\tvar $tr2 = fileList.findFileEl('Three.pdf');\n\t\t\tvar e;\n\t\t\texpect($tr.find('input:checkbox').prop('checked')).toEqual(false);\n\t\t\texpect($tr2.find('input:checkbox').prop('checked')).toEqual(false);\n\t\t\te = new $.Event('click');\n\t\t\te.ctrlKey = true;\n\t\t\t$tr.find('td.filename .name').trigger(e);\n\n\t\t\texpect($tr.find('input:checkbox').prop('checked')).toEqual(true);\n\t\t\texpect($tr2.find('input:checkbox').prop('checked')).toEqual(false);\n\n\t\t\t// click on second entry, does not clear the selection\n\t\t\te = new $.Event('click');\n\t\t\te.ctrlKey = true;\n\t\t\t$tr2.find('td.filename .name').trigger(e);\n\t\t\texpect($tr.find('input:checkbox').prop('checked')).toEqual(true);\n\t\t\texpect($tr2.find('input:checkbox').prop('checked')).toEqual(true);\n\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name')).toEqual(['One.txt', 'Three.pdf']);\n\n\t\t\t// deselect now\n\t\t\te = new $.Event('click');\n\t\t\te.ctrlKey = true;\n\t\t\t$tr2.find('td.filename .name').trigger(e);\n\t\t\texpect($tr.find('input:checkbox').prop('checked')).toEqual(true);\n\t\t\texpect($tr2.find('input:checkbox').prop('checked')).toEqual(false);\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name')).toEqual(['One.txt']);\n\t\t});\n\t\tit('Selects a range when clicking on one file then Shift clicking on another one', function() {\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\tvar $tr2 = fileList.findFileEl('Three.pdf');\n\t\t\tvar e;\n\t\t\t$tr.find('td.filename input:checkbox').click();\n\t\t\te = new $.Event('click');\n\t\t\te.shiftKey = true;\n\t\t\t$tr2.find('td.filename .name').trigger(e);\n\n\t\t\texpect($tr.find('input:checkbox').prop('checked')).toEqual(true);\n\t\t\texpect($tr2.find('input:checkbox').prop('checked')).toEqual(true);\n\t\t\texpect(fileList.findFileEl('Two.jpg').find('input:checkbox').prop('checked')).toEqual(true);\n\t\t\tvar selection = _.pluck(fileList.getSelectedFiles(), 'name');\n\t\t\texpect(selection.length).toEqual(3);\n\t\t\texpect(selection).toContain('One.txt');\n\t\t\texpect(selection).toContain('Two.jpg');\n\t\t\texpect(selection).toContain('Three.pdf');\n\t\t});\n\t\tit('Selects a range when clicking on one file then Shift clicking on another one that is above the first one', function() {\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\tvar $tr2 = fileList.findFileEl('Three.pdf');\n\t\t\tvar e;\n\t\t\t$tr2.find('td.filename input:checkbox').click();\n\t\t\te = new $.Event('click');\n\t\t\te.shiftKey = true;\n\t\t\t$tr.find('td.filename .name').trigger(e);\n\n\t\t\texpect($tr.find('input:checkbox').prop('checked')).toEqual(true);\n\t\t\texpect($tr2.find('input:checkbox').prop('checked')).toEqual(true);\n\t\t\texpect(fileList.findFileEl('Two.jpg').find('input:checkbox').prop('checked')).toEqual(true);\n\t\t\tvar selection = _.pluck(fileList.getSelectedFiles(), 'name');\n\t\t\texpect(selection.length).toEqual(3);\n\t\t\texpect(selection).toContain('One.txt');\n\t\t\texpect(selection).toContain('Two.jpg');\n\t\t\texpect(selection).toContain('Three.pdf');\n\t\t});\n\t\tit('Selecting all files will automatically check \"select all\" checkbox', function() {\n\t\t\texpect($('.select-all').prop('checked')).toEqual(false);\n\t\t\t$('#fileList tr td.filename input:checkbox').click();\n\t\t\texpect($('.select-all').prop('checked')).toEqual(true);\n\t\t});\n\t\tit('Selecting all files on the first visible page will not automatically check \"select all\" checkbox', function() {\n\t\t\tfileList.setFiles(generateFiles(0, 41));\n\t\t\texpect($('.select-all').prop('checked')).toEqual(false);\n\t\t\t$('#fileList tr td.filename input:checkbox').click();\n\t\t\texpect($('.select-all').prop('checked')).toEqual(false);\n\t\t});\n\t\tit('Clicking \"select all\" will select/deselect all files', function() {\n\t\t\tfileList.setFiles(generateFiles(0, 41));\n\t\t\t$('.select-all').click();\n\t\t\texpect($('.select-all').prop('checked')).toEqual(true);\n\t\t\t$('#fileList tr input:checkbox').each(function() {\n\t\t\t\texpect($(this).prop('checked')).toEqual(true);\n\t\t\t});\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name').length).toEqual(42);\n\n\t\t\t$('.select-all').click();\n\t\t\texpect($('.select-all').prop('checked')).toEqual(false);\n\n\t\t\t$('#fileList tr input:checkbox').each(function() {\n\t\t\t\texpect($(this).prop('checked')).toEqual(false);\n\t\t\t});\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name').length).toEqual(0);\n\t\t});\n\t\tit('Clicking \"select all\" then deselecting a file will uncheck \"select all\"', function() {\n\t\t\t$('.select-all').click();\n\t\t\texpect($('.select-all').prop('checked')).toEqual(true);\n\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\t$tr.find('input:checkbox').click();\n\n\t\t\texpect($('.select-all').prop('checked')).toEqual(false);\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name').length).toEqual(3);\n\t\t});\n\t\tit('Updates the selection summary when doing a few manipulations with \"Select all\"', function() {\n\t\t\t$('.select-all').click();\n\t\t\texpect($('.select-all').prop('checked')).toEqual(true);\n\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\t// unselect one\n\t\t\t$tr.find('input:checkbox').click();\n\n\t\t\texpect($('.select-all').prop('checked')).toEqual(false);\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name').length).toEqual(3);\n\n\t\t\t// select all\n\t\t\t$('.select-all').click();\n\t\t\texpect($('.select-all').prop('checked')).toEqual(true);\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name').length).toEqual(4);\n\n\t\t\t// unselect one\n\t\t\t$tr.find('input:checkbox').click();\n\t\t\texpect($('.select-all').prop('checked')).toEqual(false);\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name').length).toEqual(3);\n\n\t\t\t// re-select it\n\t\t\t$tr.find('input:checkbox').click();\n\t\t\texpect($('.select-all').prop('checked')).toEqual(true);\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name').length).toEqual(4);\n\t\t});\n\t\tit('Auto-selects files on next page when \"select all\" is checked', function() {\n\t\t\tfileList.setFiles(generateFiles(0, 41));\n\t\t\t$('.select-all').click();\n\n\t\t\texpect(fileList.$fileList.find('tr input:checkbox:checked').length).toEqual(20);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect(fileList.$fileList.find('tr input:checkbox:checked').length).toEqual(40);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect(fileList.$fileList.find('tr input:checkbox:checked').length).toEqual(42);\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name').length).toEqual(42);\n\t\t});\n\t\tit('Selecting files updates selection summary', function() {\n\t\t\tvar $summary = $('#headerName a.name>span:first');\n\t\t\texpect($summary.text()).toEqual('Name');\n\t\t\tfileList.findFileEl('One.txt').find('input:checkbox').click();\n\t\t\tfileList.findFileEl('Three.pdf').find('input:checkbox').click();\n\t\t\tfileList.findFileEl('somedir').find('input:checkbox').click();\n\t\t\texpect($summary.text()).toEqual('1 folder and 2 files');\n\t\t});\n\t\tit('Unselecting files hides selection summary', function() {\n\t\t\tvar $summary = $('#headerName a.name>span:first');\n\t\t\tfileList.findFileEl('One.txt').find('input:checkbox').click().click();\n\t\t\texpect($summary.text()).toEqual('Name');\n\t\t});\n\t\tit('Select/deselect files shows/hides file actions', function() {\n\t\t\tvar $actions = $('#headerName .selectedActions');\n\t\t\tvar $checkbox = fileList.findFileEl('One.txt').find('input:checkbox');\n\t\t\texpect($actions.hasClass('hidden')).toEqual(true);\n\t\t\t$checkbox.click();\n\t\t\texpect($actions.hasClass('hidden')).toEqual(false);\n\t\t\t$checkbox.click();\n\t\t\texpect($actions.hasClass('hidden')).toEqual(true);\n\t\t});\n\t\tit('Selection is cleared when switching dirs', function() {\n\t\t\t$('.select-all').click();\n\t\t\tvar deferredList = $.Deferred();\n\t\t\tvar getFolderContentsStub = sinon.stub(filesClient, 'getFolderContents').returns(deferredList.promise());\n\n\t\t\tfileList.changeDirectory('/');\n\n\t\t\tdeferredList.resolve(200, [testRoot].concat(testFiles));\n\n\t\t\texpect($('.select-all').prop('checked')).toEqual(false);\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name')).toEqual([]);\n\n\t\t\tgetFolderContentsStub.restore();\n\t\t});\n\t\tit('getSelectedFiles returns the selected files even when they are on the next page', function() {\n\t\t\tvar selectedFiles;\n\t\t\tfileList.setFiles(generateFiles(0, 41));\n\t\t\t$('.select-all').click();\n\t\t\t// unselect one to not have the \"allFiles\" case\n\t\t\tfileList.$fileList.find('tr input:checkbox:first').click();\n\n\t\t\t// only 20 files visible, must still return all the selected ones\n\t\t\tselectedFiles = _.pluck(fileList.getSelectedFiles(), 'name');\n\n\t\t\texpect(selectedFiles.length).toEqual(41);\n\t\t});\n\t\tdescribe('clearing the selection', function() {\n\t\t\tit('clears selected files selected individually calling setFiles()', function() {\n\t\t\t\tvar selectedFiles;\n\n\t\t\t\tfileList.setFiles(generateFiles(0, 41));\n\t\t\t\tfileList.$fileList.find('tr:eq(5) input:checkbox:first').click();\n\t\t\t\tfileList.$fileList.find('tr:eq(7) input:checkbox:first').click();\n\n\t\t\t\tselectedFiles = _.pluck(fileList.getSelectedFiles(), 'name');\n\t\t\t\texpect(selectedFiles.length).toEqual(2);\n\n\t\t\t\tfileList.setFiles(generateFiles(0, 2));\n\n\t\t\t\tselectedFiles = _.pluck(fileList.getSelectedFiles(), 'name');\n\t\t\t\texpect(selectedFiles.length).toEqual(0);\n\t\t\t});\n\t\t\tit('clears selected files selected with select all when calling setFiles()', function() {\n\t\t\t\tvar selectedFiles;\n\n\t\t\t\tfileList.setFiles(generateFiles(0, 41));\n\t\t\t\t$('.select-all').click();\n\n\t\t\t\tselectedFiles = _.pluck(fileList.getSelectedFiles(), 'name');\n\t\t\t\texpect(selectedFiles.length).toEqual(42);\n\n\t\t\t\tfileList.setFiles(generateFiles(0, 2));\n\n\t\t\t\tselectedFiles = _.pluck(fileList.getSelectedFiles(), 'name');\n\t\t\t\texpect(selectedFiles.length).toEqual(0);\n\t\t\t});\n\t\t});\n\t\tdescribe('Selection overlay', function() {\n\t\t\tit('show doesnt show the delete action if one or more files are not deletable', function () {\n\t\t\t\tfileList.setFiles(testFiles);\n\t\t\t\t$('#permissions').val(OC.PERMISSION_READ | OC.PERMISSION_DELETE);\n\t\t\t\t$('.select-all').click();\n\t\t\t\texpect(fileList.$el.find('.delete-selected').hasClass('hidden')).toEqual(false);\n\t\t\t\ttestFiles[0].permissions = OC.PERMISSION_READ;\n\t\t\t\t$('.select-all').click();\n\t\t\t\tfileList.setFiles(testFiles);\n\t\t\t\t$('.select-all').click();\n\t\t\t\texpect(fileList.$el.find('.delete-selected').hasClass('hidden')).toEqual(true);\n\t\t\t});\n\t\t});\n\t\tdescribe('Actions', function() {\n\t\t\tbeforeEach(function() {\n\t\t\t\tfileList.findFileEl('One.txt').find('input:checkbox').click();\n\t\t\t\tfileList.findFileEl('Three.pdf').find('input:checkbox').click();\n\t\t\t\tfileList.findFileEl('somedir').find('input:checkbox').click();\n\t\t\t});\n\t\t\tit('getSelectedFiles returns the selected file data', function() {\n\t\t\t\tvar files = fileList.getSelectedFiles();\n\t\t\t\texpect(files.length).toEqual(3);\n\t\t\t\texpect(files[0]).toEqual({\n\t\t\t\t\tid: 1,\n\t\t\t\t\tname: 'One.txt',\n\t\t\t\t\tmimetype: 'text/plain',\n\t\t\t\t\tmtime: 123456789,\n\t\t\t\t\ttype: 'file',\n\t\t\t\t\tsize: 12,\n\t\t\t\t\tetag: 'abc',\n\t\t\t\t\tpermissions: OC.PERMISSION_ALL\n\t\t\t\t});\n\t\t\t\texpect(files[1]).toEqual({\n\t\t\t\t\tid: 3,\n\t\t\t\t\ttype: 'file',\n\t\t\t\t\tname: 'Three.pdf',\n\t\t\t\t\tmimetype: 'application/pdf',\n\t\t\t\t\tmtime: 234560000,\n\t\t\t\t\tsize: 58009,\n\t\t\t\t\tetag: '123',\n\t\t\t\t\tpermissions: OC.PERMISSION_ALL\n\t\t\t\t});\n\t\t\t\texpect(files[2]).toEqual({\n\t\t\t\t\tid: 4,\n\t\t\t\t\ttype: 'dir',\n\t\t\t\t\tname: 'somedir',\n\t\t\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\t\t\tmtime: 134560000,\n\t\t\t\t\tsize: 250,\n\t\t\t\t\tetag: '456',\n\t\t\t\t\tpermissions: OC.PERMISSION_ALL\n\t\t\t\t});\n\t\t\t\texpect(files[0].id).toEqual(1);\n\t\t\t\texpect(files[0].name).toEqual('One.txt');\n\t\t\t\texpect(files[1].id).toEqual(3);\n\t\t\t\texpect(files[1].name).toEqual('Three.pdf');\n\t\t\t\texpect(files[2].id).toEqual(4);\n\t\t\t\texpect(files[2].name).toEqual('somedir');\n\t\t\t});\n\t\t\tit('Removing a file removes it from the selection', function() {\n\t\t\t\tfileList.remove('Three.pdf');\n\t\t\t\tvar files = fileList.getSelectedFiles();\n\t\t\t\texpect(files.length).toEqual(2);\n\t\t\t\texpect(files[0]).toEqual({\n\t\t\t\t\tid: 1,\n\t\t\t\t\tname: 'One.txt',\n\t\t\t\t\tmimetype: 'text/plain',\n\t\t\t\t\tmtime: 123456789,\n\t\t\t\t\ttype: 'file',\n\t\t\t\t\tsize: 12,\n\t\t\t\t\tetag: 'abc',\n\t\t\t\t\tpermissions: OC.PERMISSION_ALL\n\t\t\t\t});\n\t\t\t\texpect(files[1]).toEqual({\n\t\t\t\t\tid: 4,\n\t\t\t\t\ttype: 'dir',\n\t\t\t\t\tname: 'somedir',\n\t\t\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\t\t\tmtime: 134560000,\n\t\t\t\t\tsize: 250,\n\t\t\t\t\tetag: '456',\n\t\t\t\t\tpermissions: OC.PERMISSION_ALL\n\t\t\t\t});\n\t\t\t});\n\t\t\tdescribe('Download', function() {\n\t\t\t\tit('Opens download URL when clicking \"Download\"', function() {\n\t\t\t\t\t$('.selectedActions .download').click();\n\t\t\t\t\texpect(redirectStub.calledOnce).toEqual(true);\n\t\t\t\t\texpect(redirectStub.getCall(0).args[0]).toContain(OC.webroot + '/index.php/apps/files/ajax/download.php?dir=%2Fsubdir&files=%5B%22One.txt%22%2C%22Three.pdf%22%2C%22somedir%22%5D');\n\t\t\t\t\tredirectStub.restore();\n\t\t\t\t});\n\t\t\t\tit('Downloads root folder when all selected in root folder', function() {\n\t\t\t\t\t$('#dir').val('/');\n\t\t\t\t\t$('.select-all').click();\n\t\t\t\t\t$('.selectedActions .download').click();\n\t\t\t\t\texpect(redirectStub.calledOnce).toEqual(true);\n\t\t\t\t\texpect(redirectStub.getCall(0).args[0]).toContain(OC.webroot + '/index.php/apps/files/ajax/download.php?dir=%2F&files=');\n\t\t\t\t});\n\t\t\t\tit('Downloads parent folder when all selected in subfolder', function() {\n\t\t\t\t\t$('.select-all').click();\n\t\t\t\t\t$('.selectedActions .download').click();\n\t\t\t\t\texpect(redirectStub.calledOnce).toEqual(true);\n\t\t\t\t\texpect(redirectStub.getCall(0).args[0]).toContain(OC.webroot + '/index.php/apps/files/ajax/download.php?dir=%2F&files=subdir');\n\t\t\t\t});\n\t\t\t});\n\t\t\tdescribe('Delete', function() {\n\t\t\t\tvar deleteStub, deferredDelete;\n\t\t\t\tbeforeEach(function() {\n\t\t\t\t\tdeferredDelete = $.Deferred();\n\t\t\t\t\tdeleteStub = sinon.stub(filesClient, 'remove').returns(deferredDelete.promise());\n\t\t\t\t});\n\t\t\t\tafterEach(function() {\n\t\t\t\t\tdeleteStub.restore();\n\t\t\t\t});\n\t\t\t\tit('Deletes selected files when \"Delete\" clicked', function() {\n\t\t\t\t\t$('.selectedActions .delete-selected').click();\n\n\t\t\t\t\texpect(deleteStub.callCount).toEqual(3);\n\t\t\t\t\texpect(deleteStub.getCall(0).args[0]).toEqual('/subdir/One.txt');\n\t\t\t\t\texpect(deleteStub.getCall(1).args[0]).toEqual('/subdir/Three.pdf');\n\t\t\t\t\texpect(deleteStub.getCall(2).args[0]).toEqual('/subdir/somedir');\n\n\t\t\t\t\tdeferredDelete.resolve(204);\n\n\t\t\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(0);\n\t\t\t\t\texpect(fileList.findFileEl('Three.pdf').length).toEqual(0);\n\t\t\t\t\texpect(fileList.findFileEl('somedir').length).toEqual(0);\n\t\t\t\t\texpect(fileList.findFileEl('Two.jpg').length).toEqual(1);\n\t\t\t\t});\n\t\t\t\tit('Deletes all files when all selected when \"Delete\" clicked', function() {\n\t\t\t\t\t$('.select-all').click();\n\t\t\t\t\t$('.selectedActions .delete-selected').click();\n\n\t\t\t\t\texpect(deleteStub.callCount).toEqual(4);\n\t\t\t\t\texpect(deleteStub.getCall(0).args[0]).toEqual('/subdir/One.txt');\n\t\t\t\t\texpect(deleteStub.getCall(1).args[0]).toEqual('/subdir/Two.jpg');\n\t\t\t\t\texpect(deleteStub.getCall(2).args[0]).toEqual('/subdir/Three.pdf');\n\t\t\t\t\texpect(deleteStub.getCall(3).args[0]).toEqual('/subdir/somedir');\n\n\t\t\t\t\tdeferredDelete.resolve(204);\n\n\t\t\t\t\texpect(fileList.isEmpty).toEqual(true);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\tit('resets the file selection on reload', function() {\n\t\t\tfileList.$el.find('.select-all').click();\n\t\t\tfileList.reload();\n\t\t\texpect(fileList.$el.find('.select-all').prop('checked')).toEqual(false);\n\t\t\texpect(fileList.getSelectedFiles()).toEqual([]);\n\t\t});\n\t\tdescribe('Disabled selection', function() {\n\t\t\tbeforeEach(function() {\n\t\t\t\tfileList._allowSelection = false;\n\t\t\t\tfileList.setFiles(testFiles);\n\t\t\t});\n\t\t\tit('Does not render checkboxes', function() {\n\t\t\t\texpect(fileList.$fileList.find('.selectCheckBox').length).toEqual(0);\n\t\t\t});\n\t\t\tit('Does not select a file with Ctrl or Shift if selection is not allowed', function() {\n\t\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\t\tvar $tr2 = fileList.findFileEl('Three.pdf');\n\t\t\t\tvar e;\n\t\t\t\te = new $.Event('click');\n\t\t\t\te.ctrlKey = true;\n\t\t\t\t$tr.find('td.filename .name').trigger(e);\n\n\t\t\t\t// click on second entry, does not clear the selection\n\t\t\t\te = new $.Event('click');\n\t\t\t\te.ctrlKey = true;\n\t\t\t\t$tr2.find('td.filename .name').trigger(e);\n\n\t\t\t\texpect(fileList.getSelectedFiles().length).toEqual(0);\n\n\t\t\t\t// deselect now\n\t\t\t\te = new $.Event('click');\n\t\t\t\te.shiftKey = true;\n\t\t\t\t$tr2.find('td.filename .name').trigger(e);\n\t\t\t\texpect(fileList.getSelectedFiles().length).toEqual(0);\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('Details sidebar', function() {\n\t\tbeforeEach(function() {\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tfileList.showDetailsView('Two.jpg');\n\t\t});\n\t\tdescribe('registering', function() {\n\t\t\tvar addTabStub;\n\t\t\tvar addDetailStub;\n\n\t\t\tbeforeEach(function() {\n\t\t\t\taddTabStub = sinon.stub(OCA.Files.DetailsView.prototype, 'addTabView');\n\t\t\t\taddDetailStub = sinon.stub(OCA.Files.DetailsView.prototype, 'addDetailView');\n\t\t\t});\n\t\t\tafterEach(function() {\n\t\t\t\taddTabStub.restore();\n\t\t\t\taddDetailStub.restore();\n\t\t\t});\n\t\t\tit('forward the registered views to the underlying DetailsView', function() {\n\t\t\t\tfileList.destroy();\n\t\t\t\tfileList = new OCA.Files.FileList($('#app-content-files'), {\n\t\t\t\t\tdetailsViewEnabled: true\n\t\t\t\t});\n\t\t\t\tfileList.registerTabView(new OCA.Files.DetailTabView());\n\t\t\t\tfileList.registerDetailView(new OCA.Files.DetailFileInfoView());\n\n\t\t\t\texpect(addTabStub.calledOnce).toEqual(true);\n\t\t\t\t// twice because the filelist already registers one by default\n\t\t\t\texpect(addDetailStub.calledTwice).toEqual(true);\n\t\t\t});\n\t\t\tit('does not error when registering panels when not details view configured', function() {\n\t\t\t\tfileList.destroy();\n\t\t\t\tfileList = new OCA.Files.FileList($('#app-content-files'), {\n\t\t\t\t\tdetailsViewEnabled: false\n\t\t\t\t});\n\t\t\t\tfileList.registerTabView(new OCA.Files.DetailTabView());\n\t\t\t\tfileList.registerDetailView(new OCA.Files.DetailFileInfoView());\n\n\t\t\t\texpect(addTabStub.notCalled).toEqual(true);\n\t\t\t\texpect(addDetailStub.notCalled).toEqual(true);\n\t\t\t});\n\t\t});\n\t\tit('triggers file action when clicking on row if no details view configured', function() {\n\t\t\tfileList.destroy();\n\t\t\tfileList = new OCA.Files.FileList($('#app-content-files'), {\n\t\t\t\tdetailsViewEnabled: false\n\t\t\t});\n\t\t\tvar updateDetailsViewStub = sinon.stub(fileList, '_updateDetailsView');\n\t\t\tvar actionStub = sinon.stub();\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tfileList.fileActions.register(\n\t\t\t\t'text/plain',\n\t\t\t\t'Test',\n\t\t\t\tOC.PERMISSION_ALL,\n\t\t\t\tfunction() {\n\t\t\t\t\t// Specify icon for hitory button\n\t\t\t\t\treturn OC.imagePath('core','actions/history');\n\t\t\t\t},\n\t\t\t\tactionStub\n\t\t\t);\n\t\t\tfileList.fileActions.setDefault('text/plain', 'Test');\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\t$tr.find('td.filename>a.name').click();\n\t\t\texpect(actionStub.calledOnce).toEqual(true);\n\t\t\texpect(updateDetailsViewStub.notCalled).toEqual(true);\n\t\t\tupdateDetailsViewStub.restore();\n\t\t});\n\t\tit('highlights current file when clicked and updates sidebar', function() {\n\t\t\tfileList.fileActions.setDefault('text/plain', 'Test');\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\t$tr.find('td.filename>a.name').click();\n\t\t\texpect($tr.hasClass('highlighted')).toEqual(true);\n\n\t\t\texpect(fileList._detailsView.getFileInfo().id).toEqual(1);\n\t\t});\n\t\tit('keeps the last highlighted file when clicking outside', function() {\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\t$tr.find('td.filename>a.name').click();\n\n\t\t\tfileList.$el.find('tfoot').click();\n\n\t\t\texpect($tr.hasClass('highlighted')).toEqual(true);\n\t\t\texpect(fileList._detailsView.getFileInfo().id).toEqual(1);\n\t\t});\n\t\tit('removes last highlighted file when selecting via checkbox', function() {\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\n\t\t\t// select\n\t\t\t$tr.find('td.filename>a.name').click();\n\t\t\t$tr.find('input:checkbox').click();\n\t\t\texpect($tr.hasClass('highlighted')).toEqual(false);\n\n\t\t\t// deselect\n\t\t\t$tr.find('td.filename>a.name').click();\n\t\t\t$tr.find('input:checkbox').click();\n\t\t\texpect($tr.hasClass('highlighted')).toEqual(false);\n\n\t\t\texpect(fileList._detailsView.getFileInfo()).toEqual(null);\n\t\t});\n\t\tit('removes last highlighted file when selecting all files via checkbox', function() {\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\n\t\t\t// select\n\t\t\t$tr.find('td.filename>a.name').click();\n\t\t\tfileList.$el.find('.select-all.checkbox').click();\n\t\t\texpect($tr.hasClass('highlighted')).toEqual(false);\n\n\t\t\t// deselect\n\t\t\t$tr.find('td.filename>a.name').click();\n\t\t\tfileList.$el.find('.select-all.checkbox').click();\n\t\t\texpect($tr.hasClass('highlighted')).toEqual(false);\n\n\t\t\texpect(fileList._detailsView.getFileInfo()).toEqual(null);\n\t\t});\n\t\tit('closes sidebar whenever the currently highlighted file was removed from the list', function() {\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\t$tr.find('td.filename>a.name').click();\n\t\t\texpect($tr.hasClass('highlighted')).toEqual(true);\n\n\t\t\texpect(fileList._detailsView.getFileInfo().id).toEqual(1);\n\n\t\t\texpect($('#app-sidebar').hasClass('disappear')).toEqual(false);\n\t\t\tfileList.remove('One.txt');\n\t\t\texpect($('#app-sidebar').hasClass('disappear')).toEqual(true);\n\t\t});\n\t\tit('returns the currently selected model instance when calling getModelForFile', function() {\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\t$tr.find('td.filename>a.name').click();\n\n\t\t\tvar model1 = fileList.getModelForFile('One.txt');\n\t\t\tvar model2 = fileList.getModelForFile('One.txt');\n\t\t\tmodel1.set('test', true);\n\n\t\t\t// it's the same model\n\t\t\texpect(model2).toEqual(model1);\n\n\t\t\tvar model3 = fileList.getModelForFile($tr);\n\t\t\texpect(model3).toEqual(model1);\n\t\t});\n\t\tit('closes the sidebar when switching folders', function() {\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\t$tr.find('td.filename>a.name').click();\n\n\t\t\texpect($('#app-sidebar').hasClass('disappear')).toEqual(false);\n\t\t\tfileList.changeDirectory('/another');\n\t\t\texpect($('#app-sidebar').hasClass('disappear')).toEqual(true);\n\t\t});\n\t});\n\tdescribe('File actions', function() {\n\t\tit('Clicking on a file name will trigger default action', function() {\n\t\t\tvar actionStub = sinon.stub();\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tfileList.fileActions.registerAction({\n\t\t\t\tmime: 'text/plain',\n\t\t\t\tname: 'Test',\n\t\t\t\ttype: OCA.Files.FileActions.TYPE_INLINE,\n\t\t\t\tpermissions: OC.PERMISSION_ALL,\n\t\t\t\ticon: function() {\n\t\t\t\t\t// Specify icon for hitory button\n\t\t\t\t\treturn OC.imagePath('core','actions/history');\n\t\t\t\t},\n\t\t\t\tactionHandler: actionStub\n\t\t\t});\n\t\t\tfileList.fileActions.setDefault('text/plain', 'Test');\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\t$tr.find('td.filename .nametext').click();\n\t\t\texpect(actionStub.calledOnce).toEqual(true);\n\t\t\texpect(actionStub.getCall(0).args[0]).toEqual('One.txt');\n\t\t\tvar context = actionStub.getCall(0).args[1];\n\t\t\texpect(context.$file.is($tr)).toEqual(true);\n\t\t\texpect(context.fileList).toBeDefined();\n\t\t\texpect(context.fileActions).toBeDefined();\n\t\t\texpect(context.dir).toEqual('/subdir');\n\t\t});\n\t\tit('redisplays actions when new actions have been registered', function() {\n\t\t\tvar actionStub = sinon.stub();\n\t\t\tvar readyHandler = sinon.stub();\n\t\t\tvar clock = sinon.useFakeTimers();\n\t\t\tvar debounceStub = sinon.stub(_, 'debounce', function(callback) {\n\t\t\t\treturn function() {\n\t\t\t\t\t// defer instead of debounce, to make it work with clock\n\t\t\t\t\t_.defer(callback);\n\t\t\t\t};\n\t\t\t});\n\n\t\t\t// need to reinit the list to make the debounce call\n\t\t\tfileList.destroy();\n\t\t\tfileList = new OCA.Files.FileList($('#app-content-files'));\n\n\t\t\tfileList.setFiles(testFiles);\n\n\t\t\tfileList.$fileList.on('fileActionsReady', readyHandler);\n\n\t\t\tfileList.fileActions.registerAction({\n\t\t\t\tmime: 'text/plain',\n\t\t\t\tname: 'Test',\n\t\t\t\ttype: OCA.Files.FileActions.TYPE_INLINE,\n\t\t\t\tpermissions: OC.PERMISSION_ALL,\n\t\t\t\ticon: function() {\n\t\t\t\t\t// Specify icon for hitory button\n\t\t\t\t\treturn OC.imagePath('core','actions/history');\n\t\t\t\t},\n\t\t\t\tactionHandler: actionStub\n\t\t\t});\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\texpect($tr.find('.action-test').length).toEqual(0);\n\t\t\texpect(readyHandler.notCalled).toEqual(true);\n\n\t\t\t// update is delayed\n\t\t\tclock.tick(100);\n\t\t\texpect($tr.find('.action-test').length).toEqual(1);\n\t\t\texpect(readyHandler.calledOnce).toEqual(true);\n\n\t\t\tclock.restore();\n\t\t\tdebounceStub.restore();\n\t\t});\n\t});\n\tdescribe('Sorting files', function() {\n\t\tit('Toggles the sort indicator when clicking on a column header', function() {\n\t\t\tvar ASC_CLASS = fileList.SORT_INDICATOR_ASC_CLASS;\n\t\t\tvar DESC_CLASS = fileList.SORT_INDICATOR_DESC_CLASS;\n\t\t\tfileList.$el.find('.column-size .columntitle').click();\n\t\t\t// moves triangle to size column, check indicator on name is hidden\n\t\t\texpect(\n\t\t\t\tfileList.$el.find('.column-name .sort-indicator').hasClass('hidden')\n\t\t\t).toEqual(true);\n\t\t\t// check indicator on size is visible and defaults to descending\n\t\t\texpect(\n\t\t\t\tfileList.$el.find('.column-size .sort-indicator').hasClass('hidden')\n\t\t\t).toEqual(false);\n\t\t\texpect(\n\t\t\t\tfileList.$el.find('.column-size .sort-indicator').hasClass(DESC_CLASS)\n\t\t\t).toEqual(true);\n\n\t\t\t// click again on size column, reverses direction\n\t\t\tfileList.$el.find('.column-size .columntitle').click();\n\t\t\texpect(\n\t\t\t\tfileList.$el.find('.column-size .sort-indicator').hasClass('hidden')\n\t\t\t).toEqual(false);\n\t\t\texpect(\n\t\t\t\tfileList.$el.find('.column-size .sort-indicator').hasClass(ASC_CLASS)\n\t\t\t).toEqual(true);\n\n\t\t\t// click again on size column, reverses direction\n\t\t\tfileList.$el.find('.column-size .columntitle').click();\n\t\t\texpect(\n\t\t\t\tfileList.$el.find('.column-size .sort-indicator').hasClass('hidden')\n\t\t\t).toEqual(false);\n\t\t\texpect(\n\t\t\t\tfileList.$el.find('.column-size .sort-indicator').hasClass(DESC_CLASS)\n\t\t\t).toEqual(true);\n\n\t\t\t// click on mtime column, moves indicator there\n\t\t\tfileList.$el.find('.column-mtime .columntitle').click();\n\t\t\texpect(\n\t\t\t\tfileList.$el.find('.column-size .sort-indicator').hasClass('hidden')\n\t\t\t).toEqual(true);\n\t\t\texpect(\n\t\t\t\tfileList.$el.find('.column-mtime .sort-indicator').hasClass('hidden')\n\t\t\t).toEqual(false);\n\t\t\texpect(\n\t\t\t\tfileList.$el.find('.column-mtime .sort-indicator').hasClass(DESC_CLASS)\n\t\t\t).toEqual(true);\n\t\t});\n\t\tit('Uses correct sort comparator when inserting files', function() {\n\t\t\ttestFiles.sort(OCA.Files.FileList.Comparators.size);\n\t\t\ttestFiles.reverse();\t//default is descending\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tfileList.$el.find('.column-size .columntitle').click();\n\t\t\tvar newFileData = new FileInfo({\n\t\t\t\tid: 999,\n\t\t\t\tname: 'new file.txt',\n\t\t\t\tmimetype: 'text/plain',\n\t\t\t\tsize: 40001,\n\t\t\t\tetag: '999'\n\t\t\t});\n\t\t\tfileList.add(newFileData);\n\t\t\texpect(fileList.findFileEl('Three.pdf').index()).toEqual(0);\n\t\t\texpect(fileList.findFileEl('new file.txt').index()).toEqual(1);\n\t\t\texpect(fileList.findFileEl('Two.jpg').index()).toEqual(2);\n\t\t\texpect(fileList.findFileEl('somedir').index()).toEqual(3);\n\t\t\texpect(fileList.findFileEl('One.txt').index()).toEqual(4);\n\t\t\texpect(fileList.files.length).toEqual(5);\n\t\t\texpect(fileList.$fileList.find('tr').length).toEqual(5);\n\t\t});\n\t\tit('Uses correct reversed sort comparator when inserting files', function() {\n\t\t\ttestFiles.sort(OCA.Files.FileList.Comparators.size);\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tfileList.$el.find('.column-size .columntitle').click();\n\n\t\t\t// reverse sort\n\t\t\tfileList.$el.find('.column-size .columntitle').click();\n\t\t\tvar newFileData = new FileInfo({\n\t\t\t\tid: 999,\n\t\t\t\tname: 'new file.txt',\n\t\t\t\tmimetype: 'text/plain',\n\t\t\t\tsize: 40001,\n\t\t\t\tetag: '999'\n\t\t\t});\n\t\t\tfileList.add(newFileData);\n\t\t\texpect(fileList.findFileEl('One.txt').index()).toEqual(0);\n\t\t\texpect(fileList.findFileEl('somedir').index()).toEqual(1);\n\t\t\texpect(fileList.findFileEl('Two.jpg').index()).toEqual(2);\n\t\t\texpect(fileList.findFileEl('new file.txt').index()).toEqual(3);\n\t\t\texpect(fileList.findFileEl('Three.pdf').index()).toEqual(4);\n\t\t\texpect(fileList.files.length).toEqual(5);\n\t\t\texpect(fileList.$fileList.find('tr').length).toEqual(5);\n\t\t});\n\t\tit('does not sort when clicking on header whenever multiselect is enabled', function() {\n\t\t\tvar sortStub = sinon.stub(OCA.Files.FileList.prototype, 'setSort');\n\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tfileList.findFileEl('One.txt').find('input:checkbox:first').click();\n\n\t\t\tfileList.$el.find('.column-size .columntitle').click();\n\n\t\t\texpect(sortStub.notCalled).toEqual(true);\n\n\t\t\t// can sort again after deselecting\n\t\t\tfileList.findFileEl('One.txt').find('input:checkbox:first').click();\n\n\t\t\tfileList.$el.find('.column-size .columntitle').click();\n\n\t\t\texpect(sortStub.calledOnce).toEqual(true);\n\n\t\t\tsortStub.restore();\n\t\t});\n\t});\n\tdescribe('create file', function() {\n\t\tvar deferredCreate;\n\t\tvar deferredInfo;\n\t\tvar createStub;\n\t\tvar getFileInfoStub;\n\n\t\tbeforeEach(function() {\n\t\t\tdeferredCreate = $.Deferred();\n\t\t\tdeferredInfo = $.Deferred();\n\t\t\tcreateStub = sinon.stub(filesClient, 'putFileContents')\n\t\t\t\t.returns(deferredCreate.promise());\n\t\t\tgetFileInfoStub = sinon.stub(filesClient, 'getFileInfo')\n\t\t\t\t.returns(deferredInfo.promise());\n\t\t});\n\t\tafterEach(function() {\n\t\t\tcreateStub.restore();\n\t\t\tgetFileInfoStub.restore();\n\t\t});\n\n\t\tit('creates file with given name and adds it to the list', function() {\n\t\t\tfileList.createFile('test.txt');\n\n\t\t\texpect(createStub.calledOnce).toEqual(true);\n\t\t\texpect(createStub.getCall(0).args[0]).toEqual('/subdir/test.txt');\n\t\t\texpect(createStub.getCall(0).args[2]).toEqual({\n\t\t\t\tcontentType: 'text/plain',\n\t\t\t\toverwrite: true\n\t\t\t});\n\n\t\t\tdeferredCreate.resolve(200);\n\n\t\t\texpect(getFileInfoStub.calledOnce).toEqual(true);\n\t\t\texpect(getFileInfoStub.getCall(0).args[0]).toEqual('/subdir/test.txt');\n\n\t\t\tdeferredInfo.resolve(\n\t\t\t\t200,\n\t\t\t   \tnew FileInfo({\n\t\t\t\t\tpath: '/subdir',\n\t\t\t\t\tname: 'test.txt',\n\t\t\t\t\tmimetype: 'text/plain'\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tvar $tr = fileList.findFileEl('test.txt');\n\t\t\texpect($tr.length).toEqual(1);\n\t\t\texpect($tr.attr('data-mime')).toEqual('text/plain');\n\t\t});\n\t\t// TODO: error cases\n\t\t// TODO: unique name cases\n\t});\n\tdescribe('create folder', function() {\n\t\tvar deferredCreate;\n\t\tvar deferredInfo;\n\t\tvar createStub;\n\t\tvar getFileInfoStub;\n\n\t\tbeforeEach(function() {\n\t\t\tdeferredCreate = $.Deferred();\n\t\t\tdeferredInfo = $.Deferred();\n\t\t\tcreateStub = sinon.stub(filesClient, 'createDirectory')\n\t\t\t\t.returns(deferredCreate.promise());\n\t\t\tgetFileInfoStub = sinon.stub(filesClient, 'getFileInfo')\n\t\t\t\t.returns(deferredInfo.promise());\n\t\t});\n\t\tafterEach(function() {\n\t\t\tcreateStub.restore();\n\t\t\tgetFileInfoStub.restore();\n\t\t});\n\n\t\tit('creates folder with given name and adds it to the list', function() {\n\t\t\tfileList.createDirectory('sub dir');\n\n\t\t\texpect(createStub.calledOnce).toEqual(true);\n\t\t\texpect(createStub.getCall(0).args[0]).toEqual('/subdir/sub dir');\n\n\t\t\tdeferredCreate.resolve(200);\n\n\t\t\texpect(getFileInfoStub.calledOnce).toEqual(true);\n\t\t\texpect(getFileInfoStub.getCall(0).args[0]).toEqual('/subdir/sub dir');\n\n\t\t\tdeferredInfo.resolve(\n\t\t\t\t200,\n\t\t\t   \tnew FileInfo({\n\t\t\t\t\tpath: '/subdir',\n\t\t\t\t\tname: 'sub dir',\n\t\t\t\t\tmimetype: 'httpd/unix-directory'\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tvar $tr = fileList.findFileEl('sub dir');\n\t\t\texpect($tr.length).toEqual(1);\n\t\t\texpect($tr.attr('data-mime')).toEqual('httpd/unix-directory');\n\t\t});\n\t\t// TODO: error cases\n\t\t// TODO: unique name cases\n\t});\n\t/**\n\t * Test upload mostly by testing the code inside the event handlers\n\t * that were registered on the magic upload object\n\t */\n\tdescribe('file upload', function() {\n\t\tvar $uploader;\n\n\t\tbeforeEach(function() {\n\t\t\t// note: this isn't the real blueimp file uploader from jquery.fileupload\n\t\t\t// but it makes it possible to simulate the event triggering to\n\t\t\t// test the response of the handlers\n\t\t\t$uploader = $('#file_upload_start');\n\t\t\tfileList.setFiles(testFiles);\n\t\t});\n\n\t\tafterEach(function() {\n\t\t\t$uploader = null;\n\t\t});\n\n\t\tdescribe('dropping external files', function() {\n\t\t\tvar uploadData;\n\n\t\t\t/**\n\t\t\t * Simulate drop event on the given target\n\t\t\t *\n\t\t\t * @param $target target element to drop on\n\t\t\t * @return event object including the result\n\t\t\t */\n\t\t\tfunction dropOn($target, data) {\n\t\t\t\tvar eventData = {\n\t\t\t\t\toriginalEvent: {\n\t\t\t\t\t\ttarget: $target\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tvar ev = new $.Event('fileuploaddrop', eventData);\n\t\t\t\t// using triggerHandler instead of trigger so we can pass\n\t\t\t\t// extra data\n\t\t\t\t$uploader.triggerHandler(ev, data || {});\n\t\t\t\treturn ev;\n\t\t\t}\n\n\t\t\tbeforeEach(function() {\n\t\t\t\t// simulate data structure from jquery.upload\n\t\t\t\tuploadData = {\n\t\t\t\t\tfiles: [{\n\t\t\t\t\t\trelativePath: 'fileToUpload.txt'\n\t\t\t\t\t}]\n\t\t\t\t};\n\t\t\t});\n\t\t\tafterEach(function() {\n\t\t\t\tuploadData = null;\n\t\t\t});\n\t\t\tit('drop on a tr or crumb outside file list does not trigger upload', function() {\n\t\t\t\tvar $anotherTable = $('<table><tbody><tr><td>outside<div class=\"crumb\">crumb</div></td></tr></table>');\n\t\t\t\tvar ev;\n\t\t\t\t$('#testArea').append($anotherTable);\n\t\t\t\tev = dropOn($anotherTable.find('tr'), uploadData);\n\t\t\t\texpect(ev.result).toEqual(false);\n\n\t\t\t\tev = dropOn($anotherTable.find('.crumb'));\n\t\t\t\texpect(ev.result).toEqual(false);\n\t\t\t});\n\t\t\tit('drop on an element outside file list container does not trigger upload', function() {\n\t\t\t\tvar $anotherEl = $('<div>outside</div>');\n\t\t\t\tvar ev;\n\t\t\t\t$('#testArea').append($anotherEl);\n\t\t\t\tev = dropOn($anotherEl);\n\n\t\t\t\texpect(ev.result).toEqual(false);\n\t\t\t});\n\t\t\tit('drop on an element inside the table triggers upload', function() {\n\t\t\t\tvar ev;\n\t\t\t\tev = dropOn(fileList.$fileList.find('th:first'), uploadData);\n\n\t\t\t\texpect(ev.result).not.toEqual(false);\n\t\t\t});\n\t\t\tit('drop on an element on the table container triggers upload', function() {\n\t\t\t\tvar ev;\n\t\t\t\tev = dropOn($('#app-content-files'), uploadData);\n\n\t\t\t\texpect(ev.result).not.toEqual(false);\n\t\t\t});\n\t\t\tit('drop on an element inside the table does not trigger upload if no upload permission', function() {\n\t\t\t\t$('#permissions').val(0);\n\t\t\t\tvar ev;\n\t\t\t\tev = dropOn(fileList.$fileList.find('th:first'));\n\n\t\t\t\texpect(ev.result).toEqual(false);\n\t\t\t\texpect(notificationStub.calledOnce).toEqual(true);\n\t\t\t});\n\t\t\tit('drop on an folder does not trigger upload if no upload permission on that folder', function() {\n\t\t\t\tvar $tr = fileList.findFileEl('somedir');\n\t\t\t\tvar ev;\n\t\t\t\t$tr.data('permissions', OC.PERMISSION_READ);\n\t\t\t\tev = dropOn($tr);\n\n\t\t\t\texpect(ev.result).toEqual(false);\n\t\t\t\texpect(notificationStub.calledOnce).toEqual(true);\n\t\t\t});\n\t\t\tit('drop on a file row inside the table triggers upload to current folder', function() {\n\t\t\t\tvar ev;\n\t\t\t\tev = dropOn(fileList.findFileEl('One.txt').find('td:first'), uploadData);\n\n\t\t\t\texpect(ev.result).not.toEqual(false);\n\t\t\t});\n\t\t\tit('drop on a folder row inside the table triggers upload to target folder', function() {\n\t\t\t\tvar ev;\n\t\t\t\tev = dropOn(fileList.findFileEl('somedir').find('td:eq(2)'), uploadData);\n\n\t\t\t\texpect(ev.result).not.toEqual(false);\n\t\t\t\texpect(uploadData.targetDir).toEqual('/subdir/somedir');\n\t\t\t});\n\t\t\tit('drop on a breadcrumb inside the table triggers upload to target folder', function() {\n\t\t\t\tvar ev;\n\t\t\t\tfileList.changeDirectory('a/b/c/d');\n\t\t\t\tev = dropOn(fileList.$el.find('.crumb:eq(2)'), uploadData);\n\n\t\t\t\texpect(ev.result).not.toEqual(false);\n\t\t\t\texpect(uploadData.targetDir).toEqual('/a/b');\n\t\t\t});\n\t\t\tit('renders upload indicator element for folders only', function() {\n\t\t\t\tfileList.add({\n\t\t\t\t\tname: 'afolder',\n\t\t\t\t\ttype: 'dir',\n\t\t\t\t\tmime: 'httpd/unix-directory'\n\t\t\t\t});\n\t\t\t\tfileList.add({\n\t\t\t\t\tname: 'afile.txt',\n\t\t\t\t\ttype: 'file',\n\t\t\t\t\tmime: 'text/plain'\n\t\t\t\t});\n\n\t\t\t\texpect(fileList.findFileEl('afolder').find('.uploadtext').length).toEqual(1);\n\t\t\t\texpect(fileList.findFileEl('afile.txt').find('.uploadtext').length).toEqual(0);\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('Handling errors', function () {\n\t\tvar deferredList;\n\t\tvar getFolderContentsStub;\n\n\t\tbeforeEach(function() {\n\t\t\tdeferredList = $.Deferred();\n\t\t\tgetFolderContentsStub =\n\t\t\t\tsinon.stub(filesClient, 'getFolderContents');\n\t\t\tgetFolderContentsStub.onCall(0).returns(deferredList.promise());\n\t\t\tgetFolderContentsStub.onCall(1).returns($.Deferred().promise());\n\t\t\tfileList.reload();\n\t\t});\n\t\tafterEach(function() {\n\t\t\tgetFolderContentsStub.restore();\n\t\t\tfileList = undefined;\n\t\t});\n\t\tit('redirects to root folder in case of forbidden access', function () {\n\t\t\tdeferredList.reject(403);\n\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/');\n\t\t\texpect(getFolderContentsStub.calledTwice).toEqual(true);\n\t\t});\n\t\tit('redirects to root folder and shows notification in case of internal server error', function () {\n\t\t\texpect(notificationStub.notCalled).toEqual(true);\n\t\t\tdeferredList.reject(500);\n\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/');\n\t\t\texpect(getFolderContentsStub.calledTwice).toEqual(true);\n\t\t\texpect(notificationStub.calledOnce).toEqual(true);\n\t\t});\n\t\tit('redirects to root folder and shows notification in case of storage not available', function () {\n\t\t\texpect(notificationStub.notCalled).toEqual(true);\n\t\t\tdeferredList.reject(503, 'Storage not available');\n\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/');\n\t\t\texpect(getFolderContentsStub.calledTwice).toEqual(true);\n\t\t\texpect(notificationStub.calledOnce).toEqual(true);\n\t\t});\n\t});\n\tdescribe('showFileBusyState', function() {\n\t\tvar $tr;\n\n\t\tbeforeEach(function() {\n\t\t\tfileList.setFiles(testFiles);\n\t\t\t$tr = fileList.findFileEl('Two.jpg');\n\t\t});\n\t\tit('shows spinner on busy rows', function() {\n\t\t\tfileList.showFileBusyState('Two.jpg', true);\n\t\t\texpect($tr.hasClass('busy')).toEqual(true);\n\t\t\texpect(OC.TestUtil.getImageUrl($tr.find('.thumbnail')))\n\t\t\t\t.toEqual(OC.imagePath('core', 'loading.gif'));\n\n\t\t\tfileList.showFileBusyState('Two.jpg', false);\n\t\t\texpect($tr.hasClass('busy')).toEqual(false);\n\t\t\texpect(OC.TestUtil.getImageUrl($tr.find('.thumbnail')))\n\t\t\t\t.toEqual(OC.imagePath('core', 'filetypes/image.svg'));\n\t\t});\n\t\tit('accepts multiple input formats', function() {\n\t\t\t_.each([\n\t\t\t\t'Two.jpg',\n\t\t\t\t['Two.jpg'],\n\t\t\t\t$tr,\n\t\t\t\t[$tr]\n\t\t\t], function(testCase) {\n\t\t\t\tfileList.showFileBusyState(testCase, true);\n\t\t\t\texpect($tr.hasClass('busy')).toEqual(true);\n\t\t\t\tfileList.showFileBusyState(testCase, false);\n\t\t\t\texpect($tr.hasClass('busy')).toEqual(false);\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('elementToFile', function() {\n\t\tvar $tr;\n\n\t\tbeforeEach(function() {\n\t\t\tfileList.setFiles(testFiles);\n\t\t\t$tr = fileList.findFileEl('One.txt');\n\t\t});\n\n\t\tit('converts data attributes to file info structure', function() {\n\t\t\tvar fileInfo = fileList.elementToFile($tr);\n\t\t\texpect(fileInfo.id).toEqual(1);\n\t\t\texpect(fileInfo.name).toEqual('One.txt');\n\t\t\texpect(fileInfo.mtime).toEqual(123456789);\n\t\t\texpect(fileInfo.etag).toEqual('abc');\n\t\t\texpect(fileInfo.permissions).toEqual(OC.PERMISSION_ALL);\n\t\t\texpect(fileInfo.size).toEqual(12);\n\t\t\texpect(fileInfo.mimetype).toEqual('text/plain');\n\t\t\texpect(fileInfo.type).toEqual('file');\n\t\t\texpect(fileInfo.path).not.toBeDefined();\n\t\t});\n\t\tit('adds path attribute if available', function() {\n\t\t\t$tr.attr('data-path', '/subdir');\n\t\t\tvar fileInfo = fileList.elementToFile($tr);\n\t\t\texpect(fileInfo.path).toEqual('/subdir');\n\t\t});\n\t});\n\tdescribe('new file menu', function() {\n\t\tvar newFileMenuStub;\n\n\t\tbeforeEach(function() {\n\t\t\tnewFileMenuStub = sinon.stub(OCA.Files.NewFileMenu.prototype, 'showAt');\n\t\t});\n\t\tafterEach(function() {\n\t\t\tnewFileMenuStub.restore();\n\t\t})\n\t\tit('renders new button when no legacy upload button exists', function() {\n\t\t\texpect(fileList.$el.find('.button.upload').length).toEqual(0);\n\t\t\texpect(fileList.$el.find('.button.new').length).toEqual(1);\n\t\t});\n\t\tit('does not render new button when no legacy upload button exists (public page)', function() {\n\t\t\tfileList.destroy();\n\t\t\t$('#controls').append('<input type=\"button\" class=\"button upload\" />');\n\t\t\tfileList = new OCA.Files.FileList($('#app-content-files'));\n\t\t\texpect(fileList.$el.find('.button.upload').length).toEqual(1);\n\t\t\texpect(fileList.$el.find('.button.new').length).toEqual(0);\n\t\t});\n\t\tit('opens the new file menu when clicking on the \"New\" button', function() {\n\t\t\tvar $button = fileList.$el.find('.button.new');\n\t\t\t$button.click();\n\t\t\texpect(newFileMenuStub.calledOnce).toEqual(true);\n\t\t});\n\t\tit('does not open the new file menu when button is disabled', function() {\n\t\t\tvar $button = fileList.$el.find('.button.new');\n\t\t\t$button.addClass('disabled');\n\t\t\t$button.click();\n\t\t\texpect(newFileMenuStub.notCalled).toEqual(true);\n\t\t});\n\t});\n\tdescribe('mount type detection', function() {\n\t\tfunction testMountType(dirInfoId, dirInfoMountType, inputMountType, expectedMountType) {\n\t\t\tvar $tr;\n\t\t\tfileList.dirInfo.id = dirInfoId;\n\t\t\tfileList.dirInfo.mountType = dirInfoMountType;\n\t\t\t$tr = fileList.add({\n\t\t\t\ttype: 'dir',\n\t\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\t\tname: 'test dir',\n\t\t\t\tmountType: inputMountType\n\t\t\t});\n\n\t\t\texpect($tr.attr('data-mounttype')).toEqual(expectedMountType);\n\t\t}\n\n\t\tit('leaves mount type as is if no parent exists', function() {\n\t\t\ttestMountType(null, null, 'external', 'external');\n\t\t\ttestMountType(null, null, 'shared', 'shared');\n\t\t});\n\t\tit('detects share root if parent exists', function() {\n\t\t\ttestMountType(123, null, 'shared', 'shared-root');\n\t\t\ttestMountType(123, 'shared', 'shared', 'shared');\n\t\t\ttestMountType(123, 'shared-root', 'shared', 'shared');\n\t\t});\n\t\tit('detects external storage root if parent exists', function() {\n\t\t\ttestMountType(123, null, 'external', 'external-root');\n\t\t\ttestMountType(123, 'external', 'external', 'external');\n\t\t\ttestMountType(123, 'external-root', 'external', 'external');\n\t\t});\n\t});\n});\n"], "fixing_code": ["/*\n * Copyright (c) 2014\n *\n * This file is licensed under the Affero General Public License version 3\n * or later.\n *\n * See the COPYING-README file.\n *\n */\n\n(function() {\n\n\tvar TEMPLATE_ADDBUTTON = '<a href=\"#\" class=\"button new\">' +\n\t\t'<span class=\"icon {{iconClass}}\"></span>' +\n\t\t'<span class=\"hidden-visually\">{{addText}}</span>' +\n\t\t'</a>';\n\n\t/**\n\t * @class OCA.Files.FileList\n\t * @classdesc\n\t *\n\t * The FileList class manages a file list view.\n\t * A file list view consists of a controls bar and\n\t * a file list table.\n\t *\n\t * @param $el container element with existing markup for the #controls\n\t * and a table\n\t * @param {Object} [options] map of options, see other parameters\n\t * @param {Object} [options.scrollContainer] scrollable container, defaults to $(window)\n\t * @param {Object} [options.dragOptions] drag options, disabled by default\n\t * @param {Object} [options.folderDropOptions] folder drop options, disabled by default\n\t * @param {boolean} [options.detailsViewEnabled=true] whether to enable details view\n\t * @param {OC.Files.Client} [options.filesClient] files client to use\n\t */\n\tvar FileList = function($el, options) {\n\t\tthis.initialize($el, options);\n\t};\n\t/**\n\t * @memberof OCA.Files\n\t */\n\tFileList.prototype = {\n\t\tSORT_INDICATOR_ASC_CLASS: 'icon-triangle-n',\n\t\tSORT_INDICATOR_DESC_CLASS: 'icon-triangle-s',\n\n\t\tid: 'files',\n\t\tappName: t('files', 'Files'),\n\t\tisEmpty: true,\n\t\tuseUndo:true,\n\n\t\t/**\n\t\t * Top-level container with controls and file list\n\t\t */\n\t\t$el: null,\n\n\t\t/**\n\t\t * Files table\n\t\t */\n\t\t$table: null,\n\n\t\t/**\n\t\t * List of rows (table tbody)\n\t\t */\n\t\t$fileList: null,\n\n\t\t/**\n\t\t * @type OCA.Files.BreadCrumb\n\t\t */\n\t\tbreadcrumb: null,\n\n\t\t/**\n\t\t * @type OCA.Files.FileSummary\n\t\t */\n\t\tfileSummary: null,\n\n\t\t/**\n\t\t * @type OCA.Files.DetailsView\n\t\t */\n\t\t_detailsView: null,\n\n\t\t/**\n\t\t * Files client instance\n\t\t *\n\t\t * @type OC.Files.Client\n\t\t */\n\t\tfilesClient: null,\n\n\t\t/**\n\t\t * Whether the file list was initialized already.\n\t\t * @type boolean\n\t\t */\n\t\tinitialized: false,\n\n\t\t/**\n\t\t * Number of files per page\n\t\t *\n\t\t * @return {int} page size\n\t\t */\n\t\tpageSize: function() {\n\t\t\treturn Math.ceil(this.$container.height() / 50);\n\t\t},\n\n\t\t/**\n\t\t * Array of files in the current folder.\n\t\t * The entries are of file data.\n\t\t *\n\t\t * @type Array.<OC.Files.FileInfo>\n\t\t */\n\t\tfiles: [],\n\n\t\t/**\n\t\t * Current directory entry\n\t\t *\n\t\t * @type OC.Files.FileInfo\n\t\t */\n\t\tdirInfo: null,\n\n\t\t/**\n\t\t * File actions handler, defaults to OCA.Files.FileActions\n\t\t * @type OCA.Files.FileActions\n\t\t */\n\t\tfileActions: null,\n\n\t\t/**\n\t\t * Whether selection is allowed, checkboxes and selection overlay will\n\t\t * be rendered\n\t\t */\n\t\t_allowSelection: true,\n\n\t\t/**\n\t\t * Map of file id to file data\n\t\t * @type Object.<int, Object>\n\t\t */\n\t\t_selectedFiles: {},\n\n\t\t/**\n\t\t * Summary of selected files.\n\t\t * @type OCA.Files.FileSummary\n\t\t */\n\t\t_selectionSummary: null,\n\n\t\t/**\n\t\t * If not empty, only files containing this string will be shown\n\t\t * @type String\n\t\t */\n\t\t_filter: '',\n\n\t\t/**\n\t\t * Sort attribute\n\t\t * @type String\n\t\t */\n\t\t_sort: 'name',\n\n\t\t/**\n\t\t * Sort direction: 'asc' or 'desc'\n\t\t * @type String\n\t\t */\n\t\t_sortDirection: 'asc',\n\n\t\t/**\n\t\t * Sort comparator function for the current sort\n\t\t * @type Function\n\t\t */\n\t\t_sortComparator: null,\n\n\t\t/**\n\t\t * Whether to do a client side sort.\n\t\t * When false, clicking on a table header will call reload().\n\t\t * When true, clicking on a table header will simply resort the list.\n\t\t */\n\t\t_clientSideSort: true,\n\n\t\t/**\n\t\t * Current directory\n\t\t * @type String\n\t\t */\n\t\t_currentDirectory: null,\n\n\t\t_dragOptions: null,\n\t\t_folderDropOptions: null,\n\n\t\t/**\n\t\t * Initialize the file list and its components\n\t\t *\n\t\t * @param $el container element with existing markup for the #controls\n\t\t * and a table\n\t\t * @param options map of options, see other parameters\n\t\t * @param options.scrollContainer scrollable container, defaults to $(window)\n\t\t * @param options.dragOptions drag options, disabled by default\n\t\t * @param options.folderDropOptions folder drop options, disabled by default\n\t\t * @param options.scrollTo name of file to scroll to after the first load\n\t\t * @param {OC.Files.Client} [options.filesClient] files API client\n\t\t * @private\n\t\t */\n\t\tinitialize: function($el, options) {\n\t\t\tvar self = this;\n\t\t\toptions = options || {};\n\t\t\tif (this.initialized) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (options.dragOptions) {\n\t\t\t\tthis._dragOptions = options.dragOptions;\n\t\t\t}\n\t\t\tif (options.folderDropOptions) {\n\t\t\t\tthis._folderDropOptions = options.folderDropOptions;\n\t\t\t}\n\t\t\tif (options.filesClient) {\n\t\t\t\tthis.filesClient = options.filesClient;\n\t\t\t} else {\n\t\t\t\t// default client if not specified\n\t\t\t\tthis.filesClient = OC.Files.getClient();\n\t\t\t}\n\n\t\t\tthis.$el = $el;\n\t\t\tif (options.id) {\n\t\t\t\tthis.id = options.id;\n\t\t\t}\n\t\t\tthis.$container = options.scrollContainer || $(window);\n\t\t\tthis.$table = $el.find('table:first');\n\t\t\tthis.$fileList = $el.find('#fileList');\n\n\t\t\tif (_.isUndefined(options.detailsViewEnabled) || options.detailsViewEnabled) {\n\t\t\t\tthis._detailsView = new OCA.Files.DetailsView();\n\t\t\t\tthis._detailsView.$el.insertBefore(this.$el);\n\t\t\t\tthis._detailsView.$el.addClass('disappear');\n\t\t\t}\n\n\t\t\tthis._initFileActions(options.fileActions);\n\n\t\t\tif (this._detailsView) {\n\t\t\t\tthis._detailsView.addDetailView(new OCA.Files.MainFileInfoDetailView({fileList: this, fileActions: this.fileActions}));\n\t\t\t}\n\n\t\t\tthis.files = [];\n\t\t\tthis._selectedFiles = {};\n\t\t\tthis._selectionSummary = new OCA.Files.FileSummary();\n\t\t\t// dummy root dir info\n\t\t\tthis.dirInfo = new OC.Files.FileInfo({});\n\n\t\t\tthis.fileSummary = this._createSummary();\n\n\t\t\tthis.setSort('name', 'asc');\n\n\t\t\tvar breadcrumbOptions = {\n\t\t\t\tonClick: _.bind(this._onClickBreadCrumb, this),\n\t\t\t\tgetCrumbUrl: function(part) {\n\t\t\t\t\treturn self.linkTo(part.dir);\n\t\t\t\t}\n\t\t\t};\n\t\t\t// if dropping on folders is allowed, then also allow on breadcrumbs\n\t\t\tif (this._folderDropOptions) {\n\t\t\t\tbreadcrumbOptions.onDrop = _.bind(this._onDropOnBreadCrumb, this);\n\t\t\t}\n\t\t\tthis.breadcrumb = new OCA.Files.BreadCrumb(breadcrumbOptions);\n\n\t\t\tvar $controls = this.$el.find('#controls');\n\t\t\tif ($controls.length > 0) {\n\t\t\t\t$controls.prepend(this.breadcrumb.$el);\n\t\t\t\tthis.$table.addClass('has-controls');\n\t\t\t}\n\n\t\t\tthis._renderNewButton();\n\n\t\t\tthis.$el.find('thead th .columntitle').click(_.bind(this._onClickHeader, this));\n\n\t\t\tthis._onResize = _.debounce(_.bind(this._onResize, this), 100);\n\t\t\t$('#app-content').on('appresized', this._onResize);\n\t\t\t$(window).resize(this._onResize);\n\n\t\t\tthis.$el.on('show', this._onResize);\n\n\t\t\tthis.updateSearch();\n\n\t\t\tthis.$fileList.on('click','td.filename>a.name, td.filesize, td.date', _.bind(this._onClickFile, this));\n\n\t\t\tthis.$fileList.on('change', 'td.filename>.selectCheckBox', _.bind(this._onClickFileCheckbox, this));\n\t\t\tthis.$el.on('urlChanged', _.bind(this._onUrlChanged, this));\n\t\t\tthis.$el.find('.select-all').click(_.bind(this._onClickSelectAll, this));\n\t\t\tthis.$el.find('.download').click(_.bind(this._onClickDownloadSelected, this));\n\t\t\tthis.$el.find('.delete-selected').click(_.bind(this._onClickDeleteSelected, this));\n\n\t\t\tthis.$el.find('.selectedActions a').tooltip({placement:'top'});\n\n\t\t\tthis.setupUploadEvents();\n\n\t\t\tthis.$container.on('scroll', _.bind(this._onScroll, this));\n\n\t\t\tif (options.scrollTo) {\n\t\t\t\tthis.$fileList.one('updated', function() {\n\t\t\t\t\tself.scrollTo(options.scrollTo);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tOC.Plugins.attach('OCA.Files.FileList', this);\n\t\t},\n\n\t\t/**\n\t\t * Destroy / uninitialize this instance.\n\t\t */\n\t\tdestroy: function() {\n\t\t\tif (this._newFileMenu) {\n\t\t\t\tthis._newFileMenu.remove();\n\t\t\t}\n\t\t\tif (this._newButton) {\n\t\t\t\tthis._newButton.remove();\n\t\t\t}\n\t\t\tif (this._detailsView) {\n\t\t\t\tthis._detailsView.remove();\n\t\t\t}\n\t\t\t// TODO: also unregister other event handlers\n\t\t\tthis.fileActions.off('registerAction', this._onFileActionsUpdated);\n\t\t\tthis.fileActions.off('setDefault', this._onFileActionsUpdated);\n\t\t\tOC.Plugins.detach('OCA.Files.FileList', this);\n\t\t\t$('#app-content').off('appresized', this._onResize);\n\t\t},\n\n\t\t/**\n\t\t * Initializes the file actions, set up listeners.\n\t\t *\n\t\t * @param {OCA.Files.FileActions} fileActions file actions\n\t\t */\n\t\t_initFileActions: function(fileActions) {\n\t\t\tvar self = this;\n\t\t\tthis.fileActions = fileActions;\n\t\t\tif (!this.fileActions) {\n\t\t\t\tthis.fileActions = new OCA.Files.FileActions();\n\t\t\t\tthis.fileActions.registerDefaultActions();\n\t\t\t}\n\n\t\t\tif (this._detailsView) {\n\t\t\t\tthis.fileActions.registerAction({\n\t\t\t\t\tname: 'Details',\n\t\t\t\t\tdisplayName: t('files', 'Details'),\n\t\t\t\t\tmime: 'all',\n\t\t\t\t\torder: -50,\n\t\t\t\t\ticonClass: 'icon-details',\n\t\t\t\t\tpermissions: OC.PERMISSION_READ,\n\t\t\t\t\tactionHandler: function(fileName, context) {\n\t\t\t\t\t\tself._updateDetailsView(fileName);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._onFileActionsUpdated = _.debounce(_.bind(this._onFileActionsUpdated, this), 100);\n\t\t\tthis.fileActions.on('registerAction', this._onFileActionsUpdated);\n\t\t\tthis.fileActions.on('setDefault', this._onFileActionsUpdated);\n\t\t},\n\n\t\t/**\n\t\t * Returns a unique model for the given file name.\n\t\t *\n\t\t * @param {string|object} fileName file name or jquery row\n\t\t * @return {OCA.Files.FileInfoModel} file info model\n\t\t */\n\t\tgetModelForFile: function(fileName) {\n\t\t\tvar self = this;\n\t\t\tvar $tr;\n\t\t\t// jQuery object ?\n\t\t\tif (fileName.is) {\n\t\t\t\t$tr = fileName;\n\t\t\t\tfileName = $tr.attr('data-file');\n\t\t\t} else {\n\t\t\t\t$tr = this.findFileEl(fileName);\n\t\t\t}\n\n\t\t\tif (!$tr || !$tr.length) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// if requesting the selected model, return it\n\t\t\tif (this._currentFileModel && this._currentFileModel.get('name') === fileName) {\n\t\t\t\treturn this._currentFileModel;\n\t\t\t}\n\n\t\t\t// TODO: note, this is a temporary model required for synchronising\n\t\t\t// state between different views.\n\t\t\t// In the future the FileList should work with Backbone.Collection\n\t\t\t// and contain existing models that can be used.\n\t\t\t// This method would in the future simply retrieve the matching model from the collection.\n\t\t\tvar model = new OCA.Files.FileInfoModel(this.elementToFile($tr));\n\t\t\tif (!model.get('path')) {\n\t\t\t\tmodel.set('path', this.getCurrentDirectory(), {silent: true});\n\t\t\t}\n\n\t\t\tmodel.on('change', function(model) {\n\t\t\t\t// re-render row\n\t\t\t\tvar highlightState = $tr.hasClass('highlighted');\n\t\t\t\t$tr = self.updateRow(\n\t\t\t\t\t$tr,\n\t\t\t\t\tmodel.toJSON(),\n\t\t\t\t\t{updateSummary: true, silent: false, animate: true}\n\t\t\t\t);\n\t\t\t\t$tr.toggleClass('highlighted', highlightState);\n\t\t\t});\n\t\t\tmodel.on('busy', function(model, state) {\n\t\t\t\tself.showFileBusyState($tr, state);\n\t\t\t});\n\n\t\t\treturn model;\n\t\t},\n\n\t\t/**\n\t\t * Displays the details view for the given file and\n\t\t * selects the given tab\n\t\t *\n\t\t * @param {string} fileName file name for which to show details\n\t\t * @param {string} [tabId] optional tab id to select\n\t\t */\n\t\tshowDetailsView: function(fileName, tabId) {\n\t\t\tthis._updateDetailsView(fileName);\n\t\t\tif (tabId) {\n\t\t\t\tthis._detailsView.selectTab(tabId);\n\t\t\t}\n\t\t\tOC.Apps.showAppSidebar(this._detailsView.$el);\n\t\t},\n\n\t\t/**\n\t\t * Update the details view to display the given file\n\t\t *\n\t\t * @param {string} fileName file name from the current list\n\t\t * @param {boolean} [show=true] whether to open the sidebar if it was closed\n\t\t */\n\t\t_updateDetailsView: function(fileName, show) {\n\t\t\tif (!this._detailsView) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// show defaults to true\n\t\t\tshow = _.isUndefined(show) || !!show;\n\t\t\tvar oldFileInfo = this._detailsView.getFileInfo();\n\t\t\tif (oldFileInfo) {\n\t\t\t\t// TODO: use more efficient way, maybe track the highlight\n\t\t\t\tthis.$fileList.children().filterAttr('data-id', '' + oldFileInfo.get('id')).removeClass('highlighted');\n\t\t\t\toldFileInfo.off('change', this._onSelectedModelChanged, this);\n\t\t\t}\n\n\t\t\tif (!fileName) {\n\t\t\t\tthis._detailsView.setFileInfo(null);\n\t\t\t\tif (this._currentFileModel) {\n\t\t\t\t\tthis._currentFileModel.off();\n\t\t\t\t}\n\t\t\t\tthis._currentFileModel = null;\n\t\t\t\tOC.Apps.hideAppSidebar(this._detailsView.$el);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (show && this._detailsView.$el.hasClass('disappear')) {\n\t\t\t\tOC.Apps.showAppSidebar(this._detailsView.$el);\n\t\t\t}\n\n\t\t\tvar $tr = this.findFileEl(fileName);\n\t\t\tvar model = this.getModelForFile($tr);\n\n\t\t\tthis._currentFileModel = model;\n\n\t\t\t$tr.addClass('highlighted');\n\n\t\t\tthis._detailsView.setFileInfo(model);\n\t\t\tthis._detailsView.$el.scrollTop(0);\n\t\t},\n\n\t\t/**\n\t\t * Event handler for when the window size changed\n\t\t */\n\t\t_onResize: function() {\n\t\t\tvar containerWidth = this.$el.width();\n\t\t\tvar actionsWidth = 0;\n\t\t\t$.each(this.$el.find('#controls .actions'), function(index, action) {\n\t\t\t\tactionsWidth += $(action).outerWidth();\n\t\t\t});\n\n\t\t\t// substract app navigation toggle when visible\n\t\t\tcontainerWidth -= $('#app-navigation-toggle').width();\n\n\t\t\tthis.breadcrumb.setMaxWidth(containerWidth - actionsWidth - 10);\n\n\t\t\tthis.$table.find('>thead').width($('#app-content').width() - OC.Util.getScrollBarWidth());\n\t\t},\n\n\t\t/**\n\t\t * Event handler for when the URL changed\n\t\t */\n\t\t_onUrlChanged: function(e) {\n\t\t\tif (e && e.dir) {\n\t\t\t\tthis.changeDirectory(e.dir, false, true);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Selected/deselects the given file element and updated\n\t\t * the internal selection cache.\n\t\t *\n\t\t * @param {Object} $tr single file row element\n\t\t * @param {bool} state true to select, false to deselect\n\t\t */\n\t\t_selectFileEl: function($tr, state, showDetailsView) {\n\t\t\tvar $checkbox = $tr.find('td.filename>.selectCheckBox');\n\t\t\tvar oldData = !!this._selectedFiles[$tr.data('id')];\n\t\t\tvar data;\n\t\t\t$checkbox.prop('checked', state);\n\t\t\t$tr.toggleClass('selected', state);\n\t\t\t// already selected ?\n\t\t\tif (state === oldData) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdata = this.elementToFile($tr);\n\t\t\tif (state) {\n\t\t\t\tthis._selectedFiles[$tr.data('id')] = data;\n\t\t\t\tthis._selectionSummary.add(data);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdelete this._selectedFiles[$tr.data('id')];\n\t\t\t\tthis._selectionSummary.remove(data);\n\t\t\t}\n\t\t\tif (this._detailsView && !this._detailsView.$el.hasClass('disappear')) {\n\t\t\t\t// hide sidebar\n\t\t\t\tthis._updateDetailsView(null);\n\t\t\t}\n\t\t\tthis.$el.find('.select-all').prop('checked', this._selectionSummary.getTotal() === this.files.length);\n\t\t},\n\n\t\t/**\n\t\t * Event handler for when clicking on files to select them\n\t\t */\n\t\t_onClickFile: function(event) {\n\t\t\tvar $tr = $(event.target).closest('tr');\n\t\t\tif ($tr.hasClass('dragging')) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this._allowSelection && (event.ctrlKey || event.shiftKey)) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tif (event.shiftKey) {\n\t\t\t\t\tvar $lastTr = $(this._lastChecked);\n\t\t\t\t\tvar lastIndex = $lastTr.index();\n\t\t\t\t\tvar currentIndex = $tr.index();\n\t\t\t\t\tvar $rows = this.$fileList.children('tr');\n\n\t\t\t\t\t// last clicked checkbox below current one ?\n\t\t\t\t\tif (lastIndex > currentIndex) {\n\t\t\t\t\t\tvar aux = lastIndex;\n\t\t\t\t\t\tlastIndex = currentIndex;\n\t\t\t\t\t\tcurrentIndex = aux;\n\t\t\t\t\t}\n\n\t\t\t\t\t// auto-select everything in-between\n\t\t\t\t\tfor (var i = lastIndex + 1; i < currentIndex; i++) {\n\t\t\t\t\t\tthis._selectFileEl($rows.eq(i), true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis._lastChecked = $tr;\n\t\t\t\t}\n\t\t\t\tvar $checkbox = $tr.find('td.filename>.selectCheckBox');\n\t\t\t\tthis._selectFileEl($tr, !$checkbox.prop('checked'));\n\t\t\t\tthis.updateSelectionSummary();\n\t\t\t} else {\n\t\t\t\t// clicked directly on the name\n\t\t\t\tif (!this._detailsView || $(event.target).is('.nametext') || $(event.target).closest('.nametext').length) {\n\t\t\t\t\tvar filename = $tr.attr('data-file');\n\t\t\t\t\tvar renaming = $tr.data('renaming');\n\t\t\t\t\tif (!renaming) {\n\t\t\t\t\t\tthis.fileActions.currentFile = $tr.find('td');\n\t\t\t\t\t\tvar mime = this.fileActions.getCurrentMimeType();\n\t\t\t\t\t\tvar type = this.fileActions.getCurrentType();\n\t\t\t\t\t\tvar permissions = this.fileActions.getCurrentPermissions();\n\t\t\t\t\t\tvar action = this.fileActions.getDefault(mime,type, permissions);\n\t\t\t\t\t\tif (action) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t// also set on global object for legacy apps\n\t\t\t\t\t\t\twindow.FileActions.currentFile = this.fileActions.currentFile;\n\t\t\t\t\t\t\taction(filename, {\n\t\t\t\t\t\t\t\t$file: $tr,\n\t\t\t\t\t\t\t\tfileList: this,\n\t\t\t\t\t\t\t\tfileActions: this.fileActions,\n\t\t\t\t\t\t\t\tdir: $tr.attr('data-path') || this.getCurrentDirectory()\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// deselect row\n\t\t\t\t\t\t$(event.target).closest('a').blur();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._updateDetailsView($tr.attr('data-file'));\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Event handler for when clicking on a file's checkbox\n\t\t */\n\t\t_onClickFileCheckbox: function(e) {\n\t\t\tvar $tr = $(e.target).closest('tr');\n\t\t\tvar state = !$tr.hasClass('selected');\n\t\t\tthis._selectFileEl($tr, state);\n\t\t\tthis._lastChecked = $tr;\n\t\t\tthis.updateSelectionSummary();\n\t\t\tif (this._detailsView && !this._detailsView.$el.hasClass('disappear')) {\n\t\t\t\t// hide sidebar\n\t\t\t\tthis._updateDetailsView(null);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Event handler for when selecting/deselecting all files\n\t\t */\n\t\t_onClickSelectAll: function(e) {\n\t\t\tvar checked = $(e.target).prop('checked');\n\t\t\tthis.$fileList.find('td.filename>.selectCheckBox').prop('checked', checked)\n\t\t\t\t.closest('tr').toggleClass('selected', checked);\n\t\t\tthis._selectedFiles = {};\n\t\t\tthis._selectionSummary.clear();\n\t\t\tif (checked) {\n\t\t\t\tfor (var i = 0; i < this.files.length; i++) {\n\t\t\t\t\tvar fileData = this.files[i];\n\t\t\t\t\tthis._selectedFiles[fileData.id] = fileData;\n\t\t\t\t\tthis._selectionSummary.add(fileData);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.updateSelectionSummary();\n\t\t\tif (this._detailsView && !this._detailsView.$el.hasClass('disappear')) {\n\t\t\t\t// hide sidebar\n\t\t\t\tthis._updateDetailsView(null);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Event handler for when clicking on \"Download\" for the selected files\n\t\t */\n\t\t_onClickDownloadSelected: function(event) {\n\t\t\tvar files;\n\t\t\tvar dir = this.getCurrentDirectory();\n\t\t\tif (this.isAllSelected() && this.getSelectedFiles().length > 1) {\n\t\t\t\tfiles = OC.basename(dir);\n\t\t\t\tdir = OC.dirname(dir) || '/';\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfiles = _.pluck(this.getSelectedFiles(), 'name');\n\t\t\t}\n\n\t\t\tvar downloadFileaction = $('#selectedActionsList').find('.download');\n\n\t\t\t// don't allow a second click on the download action\n\t\t\tif(downloadFileaction.hasClass('disabled')) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar disableLoadingState = function(){\n\t\t\t\tOCA.Files.FileActions.updateFileActionSpinner(downloadFileaction, false);\n\t\t\t};\n\n\t\t\tOCA.Files.FileActions.updateFileActionSpinner(downloadFileaction, true);\n\t\t\tif(this.getSelectedFiles().length > 1) {\n\t\t\t\tOCA.Files.Files.handleDownload(this.getDownloadUrl(files, dir, true), disableLoadingState);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfirst = this.getSelectedFiles()[0];\n\t\t\t\tOCA.Files.Files.handleDownload(this.getDownloadUrl(first.name, dir, true), disableLoadingState);\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\n\t\t/**\n\t\t * Event handler for when clicking on \"Delete\" for the selected files\n\t\t */\n\t\t_onClickDeleteSelected: function(event) {\n\t\t\tvar files = null;\n\t\t\tif (!this.isAllSelected()) {\n\t\t\t\tfiles = _.pluck(this.getSelectedFiles(), 'name');\n\t\t\t}\n\t\t\tthis.do_delete(files);\n\t\t\tevent.preventDefault();\n\t\t\treturn false;\n\t\t},\n\n\t\t/**\n\t\t * Event handler when clicking on a table header\n\t\t */\n\t\t_onClickHeader: function(e) {\n\t\t\tif (this.$table.hasClass('multiselect')) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar $target = $(e.target);\n\t\t\tvar sort;\n\t\t\tif (!$target.is('a')) {\n\t\t\t\t$target = $target.closest('a');\n\t\t\t}\n\t\t\tsort = $target.attr('data-sort');\n\t\t\tif (sort) {\n\t\t\t\tif (this._sort === sort) {\n\t\t\t\t\tthis.setSort(sort, (this._sortDirection === 'desc')?'asc':'desc', true);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif ( sort === 'name' ) {\t//default sorting of name is opposite to size and mtime\n\t\t\t\t\t\tthis.setSort(sort, 'asc', true);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.setSort(sort, 'desc', true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Event handler when clicking on a bread crumb\n\t\t */\n\t\t_onClickBreadCrumb: function(e) {\n\t\t\tvar $el = $(e.target).closest('.crumb'),\n\t\t\t\t$targetDir = $el.data('dir');\n\n\t\t\tif ($targetDir !== undefined && e.which === 1) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.changeDirectory($targetDir);\n\t\t\t\tthis.updateSearch();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Event handler for when scrolling the list container.\n\t\t * This appends/renders the next page of entries when reaching the bottom.\n\t\t */\n\t\t_onScroll: function(e) {\n\t\t\tif (this.$container.scrollTop() + this.$container.height() > this.$el.height() - 300) {\n\t\t\t\tthis._nextPage(true);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Event handler when dropping on a breadcrumb\n\t\t */\n\t\t_onDropOnBreadCrumb: function( event, ui ) {\n\t\t\tvar self = this;\n\t\t\tvar $target = $(event.target);\n\t\t\tif (!$target.is('.crumb')) {\n\t\t\t\t$target = $target.closest('.crumb');\n\t\t\t}\n\t\t\tvar targetPath = $(event.target).data('dir');\n\t\t\tvar dir = this.getCurrentDirectory();\n\t\t\twhile (dir.substr(0,1) === '/') {//remove extra leading /'s\n\t\t\t\tdir = dir.substr(1);\n\t\t\t}\n\t\t\tdir = '/' + dir;\n\t\t\tif (dir.substr(-1,1) !== '/') {\n\t\t\t\tdir = dir + '/';\n\t\t\t}\n\t\t\t// do nothing if dragged on current dir\n\t\t\tif (targetPath === dir || targetPath + '/' === dir) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar files = this.getSelectedFiles();\n\t\t\tif (files.length === 0) {\n\t\t\t\t// single one selected without checkbox?\n\t\t\t\tfiles = _.map(ui.helper.find('tr'), function(el) {\n\t\t\t\t\treturn self.elementToFile($(el));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.move(_.pluck(files, 'name'), targetPath);\n\t\t},\n\n\t\t/**\n\t\t * Sets a new page title\n\t\t */\n\t\tsetPageTitle: function(title){\n\t\t\tif (title) {\n\t\t\t\ttitle += ' - ';\n\t\t\t} else {\n\t\t\t\ttitle = '';\n\t\t\t}\n\t\t\ttitle += this.appName;\n\t\t\t// Sets the page title with the \" - ownCloud\" suffix as in templates\n\t\t\twindow.document.title = title + ' - ' + oc_defaults.title;\n\n\t\t\treturn true;\n\t\t},\n\t\t/**\n\t\t * Returns the file info for the given file name from the internal collection.\n\t\t *\n\t\t * @param {string} fileName file name\n\t\t * @return {OCA.Files.FileInfo} file info or null if it was not found\n\t\t *\n\t\t * @since 8.2\n\t\t */\n\t\tfindFile: function(fileName) {\n\t\t\treturn _.find(this.files, function(aFile) {\n\t\t\t\treturn (aFile.name === fileName);\n\t\t\t}) || null;\n\t\t},\n\t\t/**\n\t\t * Returns the tr element for a given file name, but only if it was already rendered.\n\t\t *\n\t\t * @param {string} fileName file name\n\t\t * @return {Object} jQuery object of the matching row\n\t\t */\n\t\tfindFileEl: function(fileName){\n\t\t\t// use filterAttr to avoid escaping issues\n\t\t\treturn this.$fileList.find('tr').filterAttr('data-file', fileName);\n\t\t},\n\n\t\t/**\n\t\t * Returns the file data from a given file element.\n\t\t * @param $el file tr element\n\t\t * @return file data\n\t\t */\n\t\telementToFile: function($el){\n\t\t\t$el = $($el);\n\t\t\tvar data = {\n\t\t\t\tid: parseInt($el.attr('data-id'), 10),\n\t\t\t\tname: $el.attr('data-file'),\n\t\t\t\tmimetype: $el.attr('data-mime'),\n\t\t\t\tmtime: parseInt($el.attr('data-mtime'), 10),\n\t\t\t\ttype: $el.attr('data-type'),\n\t\t\t\tsize: parseInt($el.attr('data-size'), 10),\n\t\t\t\tetag: $el.attr('data-etag'),\n\t\t\t\tpermissions: parseInt($el.attr('data-permissions'), 10)\n\t\t\t};\n\t\t\tvar icon = $el.attr('data-icon');\n\t\t\tif (icon) {\n\t\t\t\tdata.icon = icon;\n\t\t\t}\n\t\t\tvar mountType = $el.attr('data-mounttype');\n\t\t\tif (mountType) {\n\t\t\t\tdata.mountType = mountType;\n\t\t\t}\n\t\t\tvar path = $el.attr('data-path');\n\t\t\tif (path) {\n\t\t\t\tdata.path = path;\n\t\t\t}\n\t\t\treturn data;\n\t\t},\n\n\t\t/**\n\t\t * Appends the next page of files into the table\n\t\t * @param animate true to animate the new elements\n\t\t * @return array of DOM elements of the newly added files\n\t\t */\n\t\t_nextPage: function(animate) {\n\t\t\tvar index = this.$fileList.children().length,\n\t\t\t\tcount = this.pageSize(),\n\t\t\t\thidden,\n\t\t\t\ttr,\n\t\t\t\tfileData,\n\t\t\t\tnewTrs = [],\n\t\t\t\tisAllSelected = this.isAllSelected();\n\n\t\t\tif (index >= this.files.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\twhile (count > 0 && index < this.files.length) {\n\t\t\t\tfileData = this.files[index];\n\t\t\t\tif (this._filter) {\n\t\t\t\t\thidden = fileData.name.toLowerCase().indexOf(this._filter.toLowerCase()) === -1;\n\t\t\t\t} else {\n\t\t\t\t\thidden = false;\n\t\t\t\t}\n\t\t\t\ttr = this._renderRow(fileData, {updateSummary: false, silent: true, hidden: hidden});\n\t\t\t\tthis.$fileList.append(tr);\n\t\t\t\tif (isAllSelected || this._selectedFiles[fileData.id]) {\n\t\t\t\t\ttr.addClass('selected');\n\t\t\t\t\ttr.find('.selectCheckBox').prop('checked', true);\n\t\t\t\t}\n\t\t\t\tif (animate) {\n\t\t\t\t\ttr.addClass('appear transparent');\n\t\t\t\t}\n\t\t\t\tnewTrs.push(tr);\n\t\t\t\tindex++;\n\t\t\t\tcount--;\n\t\t\t}\n\n\t\t\t// trigger event for newly added rows\n\t\t\tif (newTrs.length > 0) {\n\t\t\t\tthis.$fileList.trigger($.Event('fileActionsReady', {fileList: this, $files: newTrs}));\n\t\t\t}\n\n\t\t\tif (animate) {\n\t\t\t\t// defer, for animation\n\t\t\t\twindow.setTimeout(function() {\n\t\t\t\t\tfor (var i = 0; i < newTrs.length; i++ ) {\n\t\t\t\t\t\tnewTrs[i].removeClass('transparent');\n\t\t\t\t\t}\n\t\t\t\t}, 0);\n\t\t\t}\n\t\t\treturn newTrs;\n\t\t},\n\n\t\t/**\n\t\t * Event handler for when file actions were updated.\n\t\t * This will refresh the file actions on the list.\n\t\t */\n\t\t_onFileActionsUpdated: function() {\n\t\t\tvar self = this;\n\t\t\tvar $files = this.$fileList.find('tr');\n\t\t\tif (!$files.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$files.each(function() {\n\t\t\t\tself.fileActions.display($(this).find('td.filename'), false, self);\n\t\t\t});\n\t\t\tthis.$fileList.trigger($.Event('fileActionsReady', {fileList: this, $files: $files}));\n\n\t\t},\n\n\t\t/**\n\t\t * Sets the files to be displayed in the list.\n\t\t * This operation will re-render the list and update the summary.\n\t\t * @param filesArray array of file data (map)\n\t\t */\n\t\tsetFiles: function(filesArray) {\n\t\t\tvar self = this;\n\n\t\t\t// detach to make adding multiple rows faster\n\t\t\tthis.files = filesArray;\n\n\t\t\tthis.$fileList.empty();\n\n\t\t\t// clear \"Select all\" checkbox\n\t\t\tthis.$el.find('.select-all').prop('checked', false);\n\n\t\t\tthis.isEmpty = this.files.length === 0;\n\t\t\tthis._nextPage();\n\n\t\t\tthis.updateEmptyContent();\n\n\t\t\tthis.fileSummary.calculate(filesArray);\n\n\t\t\tthis._selectedFiles = {};\n\t\t\tthis._selectionSummary.clear();\n\t\t\tthis.updateSelectionSummary();\n\t\t\t$(window).scrollTop(0);\n\n\t\t\tthis.$fileList.trigger(jQuery.Event('updated'));\n\t\t\t_.defer(function() {\n\t\t\t\tself.$el.closest('#app-content').trigger(jQuery.Event('apprendered'));\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Returns the icon URL matching the given file info\n\t\t *\n\t\t * @param {OC.Files.FileInfo} fileInfo file info\n\t\t *\n\t\t * @return {string} icon URL\n\t\t */\n\t\t_getIconUrl: function(fileInfo) {\n\t\t\tvar mimeType = fileInfo.mimetype || 'application/octet-stream';\n\t\t\tif (mimeType === 'httpd/unix-directory') {\n\t\t\t\t// use default folder icon\n\t\t\t\tif (fileInfo.mountType === 'shared' || fileInfo.mountType === 'shared-root') {\n\t\t\t\t\treturn OC.MimeType.getIconUrl('dir-shared');\n\t\t\t\t} else if (fileInfo.mountType === 'external-root') {\n\t\t\t\t\treturn OC.MimeType.getIconUrl('dir-external');\n\t\t\t\t}\n\t\t\t\treturn OC.MimeType.getIconUrl('dir');\n\t\t\t}\n\t\t\treturn OC.MimeType.getIconUrl(mimeType);\n\t\t},\n\n\t\t/**\n\t\t * Creates a new table row element using the given file data.\n\t\t * @param {OC.Files.FileInfo} fileData file info attributes\n\t\t * @param options map of attributes\n\t\t * @return new tr element (not appended to the table)\n\t\t */\n\t\t_createRow: function(fileData, options) {\n\t\t\tvar td, simpleSize, basename, extension, sizeColor,\n\t\t\t\ticon = fileData.icon || this._getIconUrl(fileData),\n\t\t\t\tname = fileData.name,\n\t\t\t\t// TODO: get rid of type, only use mime type\n\t\t\t\ttype = fileData.type || 'file',\n\t\t\t\tmtime = parseInt(fileData.mtime, 10),\n\t\t\t\tmime = fileData.mimetype,\n\t\t\t\tpath = fileData.path,\n\t\t\t\tdataIcon = null,\n\t\t\t\tlinkUrl;\n\t\t\toptions = options || {};\n\n\t\t\tif (isNaN(mtime)) {\n\t\t\t\tmtime = new Date().getTime();\n\t\t\t}\n\n\t\t\tif (type === 'dir') {\n\t\t\t\tmime = mime || 'httpd/unix-directory';\n\n\t\t\t\tif (fileData.mountType && fileData.mountType.indexOf('external') === 0) {\n\t\t\t\t\ticon = OC.MimeType.getIconUrl('dir-external');\n\t\t\t\t\tdataIcon = icon;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//containing tr\n\t\t\tvar tr = $('<tr></tr>').attr({\n\t\t\t\t\"data-id\" : fileData.id,\n\t\t\t\t\"data-type\": type,\n\t\t\t\t\"data-size\": fileData.size,\n\t\t\t\t\"data-file\": name,\n\t\t\t\t\"data-mime\": mime,\n\t\t\t\t\"data-mtime\": mtime,\n\t\t\t\t\"data-etag\": fileData.etag,\n\t\t\t\t\"data-permissions\": fileData.permissions || this.getDirectoryPermissions()\n\t\t\t});\n\n\t\t\tif (dataIcon) {\n\t\t\t\t// icon override\n\t\t\t\ttr.attr('data-icon', dataIcon);\n\t\t\t}\n\n\t\t\tif (fileData.mountType) {\n\t\t\t\t// dirInfo (parent) only exist for the \"real\" file list\n\t\t\t\tif (this.dirInfo.id) {\n\t\t\t\t\t// FIXME: HACK: detect shared-root\n\t\t\t\t\tif (fileData.mountType === 'shared' && this.dirInfo.mountType !== 'shared' && this.dirInfo.mountType !== 'shared-root') {\n\t\t\t\t\t\t// if parent folder isn't share, assume the displayed folder is a share root\n\t\t\t\t\t\tfileData.mountType = 'shared-root';\n\t\t\t\t\t} else if (fileData.mountType === 'external' && this.dirInfo.mountType !== 'external' && this.dirInfo.mountType !== 'external-root') {\n\t\t\t\t\t\t// if parent folder isn't external, assume the displayed folder is the external storage root\n\t\t\t\t\t\tfileData.mountType = 'external-root';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttr.attr('data-mounttype', fileData.mountType);\n\t\t\t}\n\n\t\t\tif (!_.isUndefined(path)) {\n\t\t\t\ttr.attr('data-path', path);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpath = this.getCurrentDirectory();\n\t\t\t}\n\n\t\t\t// filename td\n\t\t\ttd = $('<td class=\"filename\"></td>');\n\n\n\t\t\t// linkUrl\n\t\t\tif (mime === 'httpd/unix-directory') {\n\t\t\t\tlinkUrl = this.linkTo(path + '/' + name);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlinkUrl = this.getDownloadUrl(name, path, type === 'dir');\n\t\t\t}\n\t\t\tif (this._allowSelection) {\n\t\t\t\ttd.append(\n\t\t\t\t\t'<input id=\"select-' + this.id + '-' + fileData.id +\n\t\t\t\t\t'\" type=\"checkbox\" class=\"selectCheckBox checkbox\"/><label for=\"select-' + this.id + '-' + fileData.id + '\">' +\n\t\t\t\t\t'<div class=\"thumbnail\" style=\"background-image:url(' + icon + '); background-size: 32px;\"></div>' +\n\t\t\t\t\t'<span class=\"hidden-visually\">' + t('files', 'Select') + '</span>' +\n\t\t\t\t\t'</label>'\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\ttd.append('<div class=\"thumbnail\" style=\"background-image:url(' + icon + '); background-size: 32px;\"></div>');\n\t\t\t}\n\t\t\tvar linkElem = $('<a></a>').attr({\n\t\t\t\t\"class\": \"name\",\n\t\t\t\t\"href\": linkUrl\n\t\t\t});\n\n\t\t\t// from here work on the display name\n\t\t\tname = fileData.displayName || name;\n\n\t\t\t// show hidden files (starting with a dot) completely in gray\n\t\t\tif(name.indexOf('.') === 0) {\n\t\t\t\tbasename = '';\n\t\t\t\textension = name;\n\t\t\t// split extension from filename for non dirs\n\t\t\t} else if (mime !== 'httpd/unix-directory' && name.indexOf('.') !== -1) {\n\t\t\t\tbasename = name.substr(0, name.lastIndexOf('.'));\n\t\t\t\textension = name.substr(name.lastIndexOf('.'));\n\t\t\t} else {\n\t\t\t\tbasename = name;\n\t\t\t\textension = false;\n\t\t\t}\n\t\t\tvar nameSpan=$('<span></span>').addClass('nametext');\n\t\t\tvar innernameSpan = $('<span></span>').addClass('innernametext').text(basename);\n\t\t\tnameSpan.append(innernameSpan);\n\t\t\tlinkElem.append(nameSpan);\n\t\t\tif (extension) {\n\t\t\t\tnameSpan.append($('<span></span>').addClass('extension').text(extension));\n\t\t\t}\n\t\t\tif (fileData.extraData) {\n\t\t\t\tif (fileData.extraData.charAt(0) === '/') {\n\t\t\t\t\tfileData.extraData = fileData.extraData.substr(1);\n\t\t\t\t}\n\t\t\t\tnameSpan.addClass('extra-data').attr('title', fileData.extraData);\n\t\t\t\tnameSpan.tooltip({placement: 'right'});\n\t\t\t}\n\t\t\t// dirs can show the number of uploaded files\n\t\t\tif (mime === 'httpd/unix-directory') {\n\t\t\t\tlinkElem.append($('<span></span>').attr({\n\t\t\t\t\t'class': 'uploadtext',\n\t\t\t\t\t'currentUploads': 0\n\t\t\t\t}));\n\t\t\t}\n\t\t\ttd.append(linkElem);\n\t\t\ttr.append(td);\n\n\t\t\t// size column\n\t\t\tif (typeof(fileData.size) !== 'undefined' && fileData.size >= 0) {\n\t\t\t\tsimpleSize = humanFileSize(parseInt(fileData.size, 10), true);\n\t\t\t\tsizeColor = Math.round(160-Math.pow((fileData.size/(1024*1024)),2));\n\t\t\t} else {\n\t\t\t\tsimpleSize = t('files', 'Pending');\n\t\t\t}\n\n\t\t\ttd = $('<td></td>').attr({\n\t\t\t\t\"class\": \"filesize\",\n\t\t\t\t\"style\": 'color:rgb(' + sizeColor + ',' + sizeColor + ',' + sizeColor + ')'\n\t\t\t}).text(simpleSize);\n\t\t\ttr.append(td);\n\n\t\t\t// date column (1000 milliseconds to seconds, 60 seconds, 60 minutes, 24 hours)\n\t\t\t// difference in days multiplied by 5 - brightest shade for files older than 32 days (160/5)\n\t\t\tvar modifiedColor = Math.round(((new Date()).getTime() - mtime )/1000/60/60/24*5 );\n\t\t\t// ensure that the brightest color is still readable\n\t\t\tif (modifiedColor >= '160') {\n\t\t\t\tmodifiedColor = 160;\n\t\t\t}\n\t\t\tvar formatted;\n\t\t\tvar text;\n\t\t\tif (mtime > 0) {\n\t\t\t\tformatted = OC.Util.formatDate(mtime);\n\t\t\t\ttext = OC.Util.relativeModifiedDate(mtime);\n\t\t\t} else {\n\t\t\t\tformatted = t('files', 'Unable to determine date');\n\t\t\t\ttext = '?';\n\t\t\t}\n\t\t\ttd = $('<td></td>').attr({ \"class\": \"date\" });\n\t\t\ttd.append($('<span></span>').attr({\n\t\t\t\t\"class\": \"modified\",\n\t\t\t\t\"title\": formatted,\n\t\t\t\t\"style\": 'color:rgb('+modifiedColor+','+modifiedColor+','+modifiedColor+')'\n\t\t\t}).text(text)\n\t\t\t  .tooltip({placement: 'top'})\n\t\t\t);\n\t\t\ttr.find('.filesize').text(simpleSize);\n\t\t\ttr.append(td);\n\t\t\treturn tr;\n\t\t},\n\n\t\t/**\n\t\t * Adds an entry to the files array and also into the DOM\n\t\t * in a sorted manner.\n\t\t *\n\t\t * @param {OC.Files.FileInfo} fileData map of file attributes\n\t\t * @param {Object} [options] map of attributes\n\t\t * @param {boolean} [options.updateSummary] true to update the summary\n\t\t * after adding (default), false otherwise. Defaults to true.\n\t\t * @param {boolean} [options.silent] true to prevent firing events like \"fileActionsReady\",\n\t\t * defaults to false.\n\t\t * @param {boolean} [options.animate] true to animate the thumbnail image after load\n\t\t * defaults to true.\n\t\t * @return new tr element (not appended to the table)\n\t\t */\n\t\tadd: function(fileData, options) {\n\t\t\tvar index = -1;\n\t\t\tvar $tr;\n\t\t\tvar $rows;\n\t\t\tvar $insertionPoint;\n\t\t\toptions = _.extend({animate: true}, options || {});\n\n\t\t\t// there are three situations to cover:\n\t\t\t// 1) insertion point is visible on the current page\n\t\t\t// 2) insertion point is on a not visible page (visible after scrolling)\n\t\t\t// 3) insertion point is at the end of the list\n\n\t\t\t$rows = this.$fileList.children();\n\t\t\tindex = this._findInsertionIndex(fileData);\n\t\t\tif (index > this.files.length) {\n\t\t\t\tindex = this.files.length;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$insertionPoint = $rows.eq(index);\n\t\t\t}\n\n\t\t\t// is the insertion point visible ?\n\t\t\tif ($insertionPoint.length) {\n\t\t\t\t// only render if it will really be inserted\n\t\t\t\t$tr = this._renderRow(fileData, options);\n\t\t\t\t$insertionPoint.before($tr);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// if insertion point is after the last visible\n\t\t\t\t// entry, append\n\t\t\t\tif (index === $rows.length) {\n\t\t\t\t\t$tr = this._renderRow(fileData, options);\n\t\t\t\t\tthis.$fileList.append($tr);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.isEmpty = false;\n\t\t\tthis.files.splice(index, 0, fileData);\n\n\t\t\tif ($tr && options.animate) {\n\t\t\t\t$tr.addClass('appear transparent');\n\t\t\t\twindow.setTimeout(function() {\n\t\t\t\t\t$tr.removeClass('transparent');\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (options.scrollTo) {\n\t\t\t\tthis.scrollTo(fileData.name);\n\t\t\t}\n\n\t\t\t// defaults to true if not defined\n\t\t\tif (typeof(options.updateSummary) === 'undefined' || !!options.updateSummary) {\n\t\t\t\tthis.fileSummary.add(fileData, true);\n\t\t\t\tthis.updateEmptyContent();\n\t\t\t}\n\n\t\t\treturn $tr;\n\t\t},\n\n\t\t/**\n\t\t * Creates a new row element based on the given attributes\n\t\t * and returns it.\n\t\t *\n\t\t * @param {OC.Files.FileInfo} fileData map of file attributes\n\t\t * @param {Object} [options] map of attributes\n\t\t * @param {int} [options.index] index at which to insert the element\n\t\t * @param {boolean} [options.updateSummary] true to update the summary\n\t\t * after adding (default), false otherwise. Defaults to true.\n\t\t * @param {boolean} [options.animate] true to animate the thumbnail image after load\n\t\t * defaults to true.\n\t\t * @return new tr element (not appended to the table)\n\t\t */\n\t\t_renderRow: function(fileData, options) {\n\t\t\toptions = options || {};\n\t\t\tvar type = fileData.type || 'file',\n\t\t\t\tmime = fileData.mimetype,\n\t\t\t\tpath = fileData.path || this.getCurrentDirectory(),\n\t\t\t\tpermissions = parseInt(fileData.permissions, 10) || 0;\n\n\t\t\tif (fileData.isShareMountPoint) {\n\t\t\t\tpermissions = permissions | OC.PERMISSION_UPDATE;\n\t\t\t}\n\n\t\t\tif (type === 'dir') {\n\t\t\t\tmime = mime || 'httpd/unix-directory';\n\t\t\t}\n\t\t\tvar tr = this._createRow(\n\t\t\t\tfileData,\n\t\t\t\toptions\n\t\t\t);\n\t\t\tvar filenameTd = tr.find('td.filename');\n\n\t\t\t// TODO: move dragging to FileActions ?\n\t\t\t// enable drag only for deletable files\n\t\t\tif (this._dragOptions && permissions & OC.PERMISSION_DELETE) {\n\t\t\t\tfilenameTd.draggable(this._dragOptions);\n\t\t\t}\n\t\t\t// allow dropping on folders\n\t\t\tif (this._folderDropOptions && mime === 'httpd/unix-directory') {\n\t\t\t\tfilenameTd.droppable(this._folderDropOptions);\n\t\t\t}\n\n\t\t\tif (options.hidden) {\n\t\t\t\ttr.addClass('hidden');\n\t\t\t}\n\n\t\t\t// display actions\n\t\t\tthis.fileActions.display(filenameTd, !options.silent, this);\n\n\t\t\tif (mime !== 'httpd/unix-directory') {\n\t\t\t\tvar iconDiv = filenameTd.find('.thumbnail');\n\t\t\t\t// lazy load / newly inserted td ?\n\t\t\t\t// the typeof check ensures that the default value of animate is true\n\t\t\t\tif (typeof(options.animate) === 'undefined' || !!options.animate) {\n\t\t\t\t\tthis.lazyLoadPreview({\n\t\t\t\t\t\tpath: path + '/' + fileData.name,\n\t\t\t\t\t\tmime: mime,\n\t\t\t\t\t\tetag: fileData.etag,\n\t\t\t\t\t\tcallback: function(url) {\n\t\t\t\t\t\t\ticonDiv.css('background-image', 'url(\"' + url + '\")');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// set the preview URL directly\n\t\t\t\t\tvar urlSpec = {\n\t\t\t\t\t\t\tfile: path + '/' + fileData.name,\n\t\t\t\t\t\t\tc: fileData.etag\n\t\t\t\t\t\t};\n\t\t\t\t\tvar previewUrl = this.generatePreviewUrl(urlSpec);\n\t\t\t\t\tpreviewUrl = previewUrl.replace('(', '%28').replace(')', '%29');\n\t\t\t\t\ticonDiv.css('background-image', 'url(\"' + previewUrl + '\")');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tr;\n\t\t},\n\t\t/**\n\t\t * Returns the current directory\n\t\t * @method getCurrentDirectory\n\t\t * @return current directory\n\t\t */\n\t\tgetCurrentDirectory: function(){\n\t\t\treturn this._currentDirectory || this.$el.find('#dir').val() || '/';\n\t\t},\n\t\t/**\n\t\t * Returns the directory permissions\n\t\t * @return permission value as integer\n\t\t */\n\t\tgetDirectoryPermissions: function() {\n\t\t\treturn parseInt(this.$el.find('#permissions').val(), 10);\n\t\t},\n\t\t/**\n\t\t * @brief Changes the current directory and reload the file list.\n\t\t * @param targetDir target directory (non URL encoded)\n\t\t * @param changeUrl false if the URL must not be changed (defaults to true)\n\t\t * @param {boolean} force set to true to force changing directory\n\t\t */\n\t\tchangeDirectory: function(targetDir, changeUrl, force) {\n\t\t\tvar self = this;\n\t\t\tvar currentDir = this.getCurrentDirectory();\n\t\t\ttargetDir = targetDir || '/';\n\t\t\tif (!force && currentDir === targetDir) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._setCurrentDir(targetDir, changeUrl);\n\t\t\tthis.reload().then(function(success){\n\t\t\t\tif (!success) {\n\t\t\t\t\tself.changeDirectory(currentDir, true);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tlinkTo: function(dir) {\n\t\t\treturn OC.linkTo('files', 'index.php')+\"?dir=\"+ encodeURIComponent(dir).replace(/%2F/g, '/');\n\t\t},\n\n\t\t/**\n\t\t * Sets the current directory name and updates the breadcrumb.\n\t\t * @param targetDir directory to display\n\t\t * @param changeUrl true to also update the URL, false otherwise (default)\n\t\t */\n\t\t_setCurrentDir: function(targetDir, changeUrl) {\n\t\t\ttargetDir = targetDir.replace(/\\\\/g, '/').replace(/\\.\\.\\//g, '');\n\t\t\tvar previousDir = this.getCurrentDirectory(),\n\t\t\t\tbaseDir = OC.basename(targetDir);\n\n\t\t\tif (baseDir !== '') {\n\t\t\t\tthis.setPageTitle(baseDir);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.setPageTitle();\n\t\t\t}\n\n\t\t\tthis._currentDirectory = targetDir;\n\n\t\t\t// legacy stuff\n\t\t\tthis.$el.find('#dir').val(targetDir);\n\n\t\t\tif (changeUrl !== false) {\n\t\t\t\tthis.$el.trigger(jQuery.Event('changeDirectory', {\n\t\t\t\t\tdir: targetDir,\n\t\t\t\t\tpreviousDir: previousDir\n\t\t\t\t}));\n\t\t\t}\n\t\t\tthis.breadcrumb.setDirectory(this.getCurrentDirectory());\n\t\t},\n\t\t/**\n\t\t * Sets the current sorting and refreshes the list\n\t\t *\n\t\t * @param sort sort attribute name\n\t\t * @param direction sort direction, one of \"asc\" or \"desc\"\n\t\t * @param update true to update the list, false otherwise (default)\n\t\t */\n\t\tsetSort: function(sort, direction, update) {\n\t\t\tvar comparator = FileList.Comparators[sort] || FileList.Comparators.name;\n\t\t\tthis._sort = sort;\n\t\t\tthis._sortDirection = (direction === 'desc')?'desc':'asc';\n\t\t\tthis._sortComparator = comparator;\n\n\t\t\tif (direction === 'desc') {\n\t\t\t\tthis._sortComparator = function(fileInfo1, fileInfo2) {\n\t\t\t\t\treturn -comparator(fileInfo1, fileInfo2);\n\t\t\t\t};\n\t\t\t}\n\t\t\tthis.$el.find('thead th .sort-indicator')\n\t\t\t\t.removeClass(this.SORT_INDICATOR_ASC_CLASS)\n\t\t\t\t.removeClass(this.SORT_INDICATOR_DESC_CLASS)\n\t\t\t\t.toggleClass('hidden', true)\n\t\t\t\t.addClass(this.SORT_INDICATOR_DESC_CLASS);\n\n\t\t\tthis.$el.find('thead th.column-' + sort + ' .sort-indicator')\n\t\t\t\t.removeClass(this.SORT_INDICATOR_ASC_CLASS)\n\t\t\t\t.removeClass(this.SORT_INDICATOR_DESC_CLASS)\n\t\t\t\t.toggleClass('hidden', false)\n\t\t\t\t.addClass(direction === 'desc' ? this.SORT_INDICATOR_DESC_CLASS : this.SORT_INDICATOR_ASC_CLASS);\n\t\t\tif (update) {\n\t\t\t\tif (this._clientSideSort) {\n\t\t\t\t\tthis.files.sort(this._sortComparator);\n\t\t\t\t\tthis.setFiles(this.files);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.reload();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Returns list of webdav properties to request\n\t\t */\n\t\t_getWebdavProperties: function() {\n\t\t\treturn [].concat(this.filesClient.getPropfindProperties());\n\t\t},\n\n\t\t/**\n\t\t * Reloads the file list using ajax call\n\t\t *\n\t\t * @return ajax call object\n\t\t */\n\t\treload: function() {\n\t\t\tthis._selectedFiles = {};\n\t\t\tthis._selectionSummary.clear();\n\t\t\tif (this._currentFileModel) {\n\t\t\t\tthis._currentFileModel.off();\n\t\t\t}\n\t\t\tthis._currentFileModel = null;\n\t\t\tthis.$el.find('.select-all').prop('checked', false);\n\t\t\tthis.showMask();\n\t\t\tthis._reloadCall = this.filesClient.getFolderContents(\n\t\t\t\tthis.getCurrentDirectory(), {\n\t\t\t\t\tincludeParent: true,\n\t\t\t\t\tproperties: this._getWebdavProperties()\n\t\t\t\t}\n\t\t\t);\n\t\t\tif (this._detailsView) {\n\t\t\t\t// close sidebar\n\t\t\t\tthis._updateDetailsView(null);\n\t\t\t}\n\t\t\tvar callBack = this.reloadCallback.bind(this);\n\t\t\treturn this._reloadCall.then(callBack, callBack);\n\t\t},\n\t\treloadCallback: function(status, result) {\n\t\t\tdelete this._reloadCall;\n\t\t\tthis.hideMask();\n\n\t\t\tif (status === 401) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Firewall Blocked request?\n\t\t\tif (status === 403) {\n\t\t\t\t// Go home\n\t\t\t\tthis.changeDirectory('/');\n\t\t\t\tOC.Notification.showTemporary(t('files', 'This operation is forbidden'));\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Did share service die or something else fail?\n\t\t\tif (status === 500) {\n\t\t\t\t// Go home\n\t\t\t\tthis.changeDirectory('/');\n\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\tt('files', 'This directory is unavailable, please check the logs or contact the administrator')\n\t\t\t\t);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (status === 503) {\n\t\t\t\t// Go home\n\t\t\t\tif (this.getCurrentDirectory() !== '/') {\n\t\t\t\t\tthis.changeDirectory('/');\n\t\t\t\t\t// TODO: read error message from exception\n\t\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\t\tt('files', 'Storage not available')\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (status === 404) {\n\t\t\t\t// go back home\n\t\t\t\tthis.changeDirectory('/');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// aborted ?\n\t\t\tif (status === 0){\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// TODO: parse remaining quota from PROPFIND response\n\t\t\tthis.updateStorageStatistics(true);\n\n\t\t\t// first entry is the root\n\t\t\tthis.dirInfo = result.shift();\n\n\t\t\tif (this.dirInfo.permissions) {\n\t\t\t\tthis.setDirectoryPermissions(this.dirInfo.permissions);\n\t\t\t}\n\n\t\t\tresult.sort(this._sortComparator);\n\t\t\tthis.setFiles(result);\n\t\t\treturn true;\n\t\t},\n\n\t\tupdateStorageStatistics: function(force) {\n\t\t\tOCA.Files.Files.updateStorageStatistics(this.getCurrentDirectory(), force);\n\t\t},\n\n\t\t/**\n\t\t * @deprecated do not use nor override\n\t\t */\n\t\tgetAjaxUrl: function(action, params) {\n\t\t\treturn OCA.Files.Files.getAjaxUrl(action, params);\n\t\t},\n\n\t\tgetDownloadUrl: function(files, dir, isDir) {\n\t\t\treturn OCA.Files.Files.getDownloadUrl(files, dir || this.getCurrentDirectory(), isDir);\n\t\t},\n\n\t\t/**\n\t\t * Generates a preview URL based on the URL space.\n\t\t * @param urlSpec attributes for the URL\n\t\t * @param {int} urlSpec.x width\n\t\t * @param {int} urlSpec.y height\n\t\t * @param {String} urlSpec.file path to the file\n\t\t * @return preview URL\n\t\t */\n\t\tgeneratePreviewUrl: function(urlSpec) {\n\t\t\turlSpec = urlSpec || {};\n\t\t\tif (!urlSpec.x) {\n\t\t\t\turlSpec.x = this.$table.data('preview-x') || 32;\n\t\t\t}\n\t\t\tif (!urlSpec.y) {\n\t\t\t\turlSpec.y = this.$table.data('preview-y') || 32;\n\t\t\t}\n\t\t\turlSpec.x *= window.devicePixelRatio;\n\t\t\turlSpec.y *= window.devicePixelRatio;\n\t\t\turlSpec.x = Math.ceil(urlSpec.x);\n\t\t\turlSpec.y = Math.ceil(urlSpec.y);\n\t\t\turlSpec.forceIcon = 0;\n\t\t\treturn OC.generateUrl('/core/preview.png?') + $.param(urlSpec);\n\t\t},\n\n\t\t/**\n\t\t * Lazy load a file's preview.\n\t\t *\n\t\t * @param path path of the file\n\t\t * @param mime mime type\n\t\t * @param callback callback function to call when the image was loaded\n\t\t * @param etag file etag (for caching)\n\t\t */\n\t\tlazyLoadPreview : function(options) {\n\t\t\tvar self = this;\n\t\t\tvar path = options.path;\n\t\t\tvar mime = options.mime;\n\t\t\tvar ready = options.callback;\n\t\t\tvar etag = options.etag;\n\n\t\t\t// get mime icon url\n\t\t\tvar iconURL = OC.MimeType.getIconUrl(mime);\n\t\t\tvar previewURL,\n\t\t\t\turlSpec = {};\n\t\t\tready(iconURL); // set mimeicon URL\n\n\t\t\turlSpec.file = OCA.Files.Files.fixPath(path);\n\t\t\tif (options.x) {\n\t\t\t\turlSpec.x = options.x;\n\t\t\t}\n\t\t\tif (options.y) {\n\t\t\t\turlSpec.y = options.y;\n\t\t\t}\n\t\t\tif (options.a) {\n\t\t\t\turlSpec.a = options.a;\n\t\t\t}\n\t\t\tif (options.mode) {\n\t\t\t\turlSpec.mode = options.mode;\n\t\t\t}\n\n\t\t\tif (etag){\n\t\t\t\t// use etag as cache buster\n\t\t\t\turlSpec.c = etag;\n\t\t\t}\n\n\t\t\tpreviewURL = self.generatePreviewUrl(urlSpec);\n\t\t\tpreviewURL = previewURL.replace('(', '%28');\n\t\t\tpreviewURL = previewURL.replace(')', '%29');\n\n\t\t\t// preload image to prevent delay\n\t\t\t// this will make the browser cache the image\n\t\t\tvar img = new Image();\n\t\t\timg.onload = function(){\n\t\t\t\t// if loading the preview image failed (no preview for the mimetype) then img.width will < 5\n\t\t\t\tif (img.width > 5) {\n\t\t\t\t\tready(previewURL, img);\n\t\t\t\t} else if (options.error) {\n\t\t\t\t\toptions.error();\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (options.error) {\n\t\t\t\timg.onerror = options.error;\n\t\t\t}\n\t\t\timg.src = previewURL;\n\t\t},\n\n\t\t/**\n\t\t * @deprecated\n\t\t */\n\t\tsetDirectoryPermissions: function(permissions) {\n\t\t\tvar isCreatable = (permissions & OC.PERMISSION_CREATE) !== 0;\n\t\t\tthis.$el.find('#permissions').val(permissions);\n\t\t\tthis.$el.find('.creatable').toggleClass('hidden', !isCreatable);\n\t\t\tthis.$el.find('.notCreatable').toggleClass('hidden', isCreatable);\n\t\t},\n\t\t/**\n\t\t * Shows/hides action buttons\n\t\t *\n\t\t * @param show true for enabling, false for disabling\n\t\t */\n\t\tshowActions: function(show){\n\t\t\tthis.$el.find('.actions,#file_action_panel').toggleClass('hidden', !show);\n\t\t\tif (show){\n\t\t\t\t// make sure to display according to permissions\n\t\t\t\tvar permissions = this.getDirectoryPermissions();\n\t\t\t\tvar isCreatable = (permissions & OC.PERMISSION_CREATE) !== 0;\n\t\t\t\tthis.$el.find('.creatable').toggleClass('hidden', !isCreatable);\n\t\t\t\tthis.$el.find('.notCreatable').toggleClass('hidden', isCreatable);\n\t\t\t\t// remove old style breadcrumbs (some apps might create them)\n\t\t\t\tthis.$el.find('#controls .crumb').remove();\n\t\t\t\t// refresh breadcrumbs in case it was replaced by an app\n\t\t\t\tthis.breadcrumb.render();\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthis.$el.find('.creatable, .notCreatable').addClass('hidden');\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Enables/disables viewer mode.\n\t\t * In viewer mode, apps can embed themselves under the controls bar.\n\t\t * In viewer mode, the actions of the file list will be hidden.\n\t\t * @param show true for enabling, false for disabling\n\t\t */\n\t\tsetViewerMode: function(show){\n\t\t\tthis.showActions(!show);\n\t\t\tthis.$el.find('#filestable').toggleClass('hidden', show);\n\t\t\tthis.$el.trigger(new $.Event('changeViewerMode', {viewerModeEnabled: show}));\n\t\t},\n\t\t/**\n\t\t * Removes a file entry from the list\n\t\t * @param name name of the file to remove\n\t\t * @param {Object} [options] map of attributes\n\t\t * @param {boolean} [options.updateSummary] true to update the summary\n\t\t * after removing, false otherwise. Defaults to true.\n\t\t * @return deleted element\n\t\t */\n\t\tremove: function(name, options){\n\t\t\toptions = options || {};\n\t\t\tvar fileEl = this.findFileEl(name);\n\t\t\tvar fileId = fileEl.data('id');\n\t\t\tvar index = fileEl.index();\n\t\t\tif (!fileEl.length) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (this._selectedFiles[fileId]) {\n\t\t\t\t// remove from selection first\n\t\t\t\tthis._selectFileEl(fileEl, false);\n\t\t\t\tthis.updateSelectionSummary();\n\t\t\t}\n\t\t\tif (this._dragOptions && (fileEl.data('permissions') & OC.PERMISSION_DELETE)) {\n\t\t\t\t// file is only draggable when delete permissions are set\n\t\t\t\tfileEl.find('td.filename').draggable('destroy');\n\t\t\t}\n\t\t\tthis.files.splice(index, 1);\n\t\t\tif (this._currentFileModel && this._currentFileModel.get('id') === fileId) {\n\t\t\t\t// Note: in the future we should call destroy() directly on the model\n\t\t\t\t// and the model will take care of the deletion.\n\t\t\t\t// Here we only trigger the event to notify listeners that\n\t\t\t\t// the file was removed.\n\t\t\t\tthis._currentFileModel.trigger('destroy');\n\t\t\t\tthis._updateDetailsView(null);\n\t\t\t}\n\t\t\tfileEl.remove();\n\t\t\t// TODO: improve performance on batch update\n\t\t\tthis.isEmpty = !this.files.length;\n\t\t\tif (typeof(options.updateSummary) === 'undefined' || !!options.updateSummary) {\n\t\t\t\tthis.updateEmptyContent();\n\t\t\t\tthis.fileSummary.remove({type: fileEl.attr('data-type'), size: fileEl.attr('data-size')}, true);\n\t\t\t}\n\n\t\t\tvar lastIndex = this.$fileList.children().length;\n\t\t\t// if there are less elements visible than one page\n\t\t\t// but there are still pending elements in the array,\n\t\t\t// then directly append the next page\n\t\t\tif (lastIndex < this.files.length && lastIndex < this.pageSize()) {\n\t\t\t\tthis._nextPage(true);\n\t\t\t}\n\n\t\t\treturn fileEl;\n\t\t},\n\t\t/**\n\t\t * Finds the index of the row before which the given\n\t\t * fileData should be inserted, considering the current\n\t\t * sorting\n\t\t *\n\t\t * @param {OC.Files.FileInfo} fileData file info\n\t\t */\n\t\t_findInsertionIndex: function(fileData) {\n\t\t\tvar index = 0;\n\t\t\twhile (index < this.files.length && this._sortComparator(fileData, this.files[index]) > 0) {\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\treturn index;\n\t\t},\n\t\t/**\n\t\t * Moves a file to a given target folder.\n\t\t *\n\t\t * @param fileNames array of file names to move\n\t\t * @param targetPath absolute target path\n\t\t */\n\t\tmove: function(fileNames, targetPath) {\n\t\t\tvar self = this;\n\t\t\tvar dir = this.getCurrentDirectory();\n\t\t\tif (dir.charAt(dir.length - 1) !== '/') {\n\t\t\t\tdir += '/';\n\t\t\t}\n\t\t\tvar target = OC.basename(targetPath);\n\t\t\tif (!_.isArray(fileNames)) {\n\t\t\t\tfileNames = [fileNames];\n\t\t\t}\n\t\t\t_.each(fileNames, function(fileName) {\n\t\t\t\tvar $tr = self.findFileEl(fileName);\n\t\t\t\tself.showFileBusyState($tr, true);\n\t\t\t\tif (targetPath.charAt(targetPath.length - 1) !== '/') {\n\t\t\t\t\t// make sure we move the files into the target dir,\n\t\t\t\t\t// not overwrite it\n\t\t\t\t\ttargetPath = targetPath + '/';\n\t\t\t\t}\n\t\t\t\tself.filesClient.move(dir + fileName, targetPath + fileName)\n\t\t\t\t\t.done(function() {\n\t\t\t\t\t\t// if still viewing the same directory\n\t\t\t\t\t\tif (OC.joinPaths(self.getCurrentDirectory(), '/') === dir) {\n\t\t\t\t\t\t\t// recalculate folder size\n\t\t\t\t\t\t\tvar oldFile = self.findFileEl(target);\n\t\t\t\t\t\t\tvar newFile = self.findFileEl(fileName);\n\t\t\t\t\t\t\tvar oldSize = oldFile.data('size');\n\t\t\t\t\t\t\tvar newSize = oldSize + newFile.data('size');\n\t\t\t\t\t\t\toldFile.data('size', newSize);\n\t\t\t\t\t\t\toldFile.find('td.filesize').text(OC.Util.humanFileSize(newSize));\n\n\t\t\t\t\t\t\t// TODO: also update entry in FileList.files\n\t\t\t\t\t\t\tself.remove(fileName);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.fail(function(status) {\n\t\t\t\t\t\tif (status === 412) {\n\t\t\t\t\t\t\t// TODO: some day here we should invoke the conflict dialog\n\t\t\t\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\t\t\t\tt('files', 'Could not move \"{file}\", target exists', {file: fileName})\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\t\t\t\tt('files', 'Could not move \"{file}\"', {file: fileName})\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.always(function() {\n\t\t\t\t\t\tself.showFileBusyState($tr, false);\n\t\t\t\t\t});\n\t\t\t});\n\n\t\t},\n\n\t\t/**\n\t\t * Updates the given row with the given file info\n\t\t *\n\t\t * @param {Object} $tr row element\n\t\t * @param {OCA.Files.FileInfo} fileInfo file info\n\t\t * @param {Object} options options\n\t\t *\n\t\t * @return {Object} new row element\n\t\t */\n\t\tupdateRow: function($tr, fileInfo, options) {\n\t\t\tthis.files.splice($tr.index(), 1);\n\t\t\t$tr.remove();\n\t\t\toptions = _.extend({silent: true}, options);\n\t\t\toptions = _.extend(options, {updateSummary: false});\n\t\t\t$tr = this.add(fileInfo, options);\n\t\t\tthis.$fileList.trigger($.Event('fileActionsReady', {fileList: this, $files: $tr}));\n\t\t\treturn $tr;\n\t\t},\n\n\t\t/**\n\t\t * Triggers file rename input field for the given file name.\n\t\t * If the user enters a new name, the file will be renamed.\n\t\t *\n\t\t * @param oldName file name of the file to rename\n\t\t */\n\t\trename: function(oldName) {\n\t\t\tvar self = this;\n\t\t\tvar tr, td, input, form;\n\t\t\ttr = this.findFileEl(oldName);\n\t\t\tvar oldFileInfo = this.files[tr.index()];\n\t\t\ttr.data('renaming',true);\n\t\t\ttd = tr.children('td.filename');\n\t\t\tinput = $('<input type=\"text\" class=\"filename\"/>').val(oldName);\n\t\t\tform = $('<form></form>');\n\t\t\tform.append(input);\n\t\t\ttd.children('a.name').hide();\n\t\t\ttd.append(form);\n\t\t\tinput.focus();\n\t\t\t//preselect input\n\t\t\tvar len = input.val().lastIndexOf('.');\n\t\t\tif ( len === -1 ||\n\t\t\t\ttr.data('type') === 'dir' ) {\n\t\t\t\tlen = input.val().length;\n\t\t\t}\n\t\t\tinput.selectRange(0, len);\n\t\t\tvar checkInput = function () {\n\t\t\t\tvar filename = input.val();\n\t\t\t\tif (filename !== oldName) {\n\t\t\t\t\t// Files.isFileNameValid(filename) throws an exception itself\n\t\t\t\t\tOCA.Files.Files.isFileNameValid(filename);\n\t\t\t\t\tif (self.inList(filename)) {\n\t\t\t\t\t\tthrow t('files', '{newName} already exists', {newName: filename});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t};\n\n\t\t\tfunction restore() {\n\t\t\t\tinput.tooltip('hide');\n\t\t\t\ttr.data('renaming',false);\n\t\t\t\tform.remove();\n\t\t\t\ttd.children('a.name').show();\n\t\t\t}\n\n\t\t\tfunction updateInList(fileInfo) {\n\t\t\t\tself.updateRow(tr, fileInfo);\n\t\t\t\tself._updateDetailsView(fileInfo.name, false);\n\t\t\t}\n\n\t\t\t// TODO: too many nested blocks, move parts into functions\n\t\t\tform.submit(function(event) {\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tevent.preventDefault();\n\t\t\t\tif (input.hasClass('error')) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tvar newName = input.val();\n\t\t\t\t\tinput.tooltip('hide');\n\t\t\t\t\tform.remove();\n\n\t\t\t\t\tif (newName !== oldName) {\n\t\t\t\t\t\tcheckInput();\n\t\t\t\t\t\t// mark as loading (temp element)\n\t\t\t\t\t\tself.showFileBusyState(tr, true);\n\t\t\t\t\t\ttr.attr('data-file', newName);\n\t\t\t\t\t\tvar basename = newName;\n\t\t\t\t\t\tif (newName.indexOf('.') > 0 && tr.data('type') !== 'dir') {\n\t\t\t\t\t\t\tbasename = newName.substr(0, newName.lastIndexOf('.'));\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttd.find('a.name span.nametext').text(basename);\n\t\t\t\t\t\ttd.children('a.name').show();\n\n\t\t\t\t\t\tvar path = tr.attr('data-path') || self.getCurrentDirectory();\n\t\t\t\t\t\tself.filesClient.move(OC.joinPaths(path, oldName), OC.joinPaths(path, newName))\n\t\t\t\t\t\t\t.done(function() {\n\t\t\t\t\t\t\t\toldFileInfo.name = newName;\n\t\t\t\t\t\t\t\tupdateInList(oldFileInfo);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.fail(function(status) {\n\t\t\t\t\t\t\t\t// TODO: 409 means current folder does not exist, redirect ?\n\t\t\t\t\t\t\t\tif (status === 404) {\n\t\t\t\t\t\t\t\t\t// source not found, so remove it from the list\n\t\t\t\t\t\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\t\t\t\t\t\tt(\n\t\t\t\t\t\t\t\t\t\t\t'files',\n\t\t\t\t\t\t\t\t\t\t\t'Could not rename \"{fileName}\", it does not exist any more',\n\t\t\t\t\t\t\t\t\t\t\t{fileName: oldName}\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tself.remove(newName, {updateSummary: true});\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t} else if (status === 412) {\n\t\t\t\t\t\t\t\t\t// target exists\n\t\t\t\t\t\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\t\t\t\t\t\tt(\n\t\t\t\t\t\t\t\t\t\t\t'files',\n\t\t\t\t\t\t\t\t\t\t\t'The name \"{targetName}\" is already used in the folder \"{dir}\". Please choose a different name.',\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\ttargetName: newName,\n\t\t\t\t\t\t\t\t\t\t\t\tdir: self.getCurrentDirectory()\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// restore the item to its previous state\n\t\t\t\t\t\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\t\t\t\t\t\tt('files', 'Could not rename \"{fileName}\"', {fileName: oldName})\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tupdateInList(oldFileInfo);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// add back the old file info when cancelled\n\t\t\t\t\t\tself.files.splice(tr.index(), 1);\n\t\t\t\t\t\ttr.remove();\n\t\t\t\t\t\ttr = self.add(oldFileInfo, {updateSummary: false, silent: true});\n\t\t\t\t\t\tself.$fileList.trigger($.Event('fileActionsReady', {fileList: self, $files: $(tr)}));\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tinput.attr('title', error);\n\t\t\t\t\tinput.tooltip({placement: 'right', trigger: 'manual'});\n\t\t\t\t\tinput.tooltip('show');\n\t\t\t\t\tinput.addClass('error');\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t\tinput.keyup(function(event) {\n\t\t\t\t// verify filename on typing\n\t\t\t\ttry {\n\t\t\t\t\tcheckInput();\n\t\t\t\t\tinput.tooltip('hide');\n\t\t\t\t\tinput.removeClass('error');\n\t\t\t\t} catch (error) {\n\t\t\t\t\tinput.attr('title', error);\n\t\t\t\t\tinput.tooltip({placement: 'right', trigger: 'manual'});\n\t\t\t\t\tinput.tooltip('show');\n\t\t\t\t\tinput.addClass('error');\n\t\t\t\t}\n\t\t\t\tif (event.keyCode === 27) {\n\t\t\t\t\trestore();\n\t\t\t\t}\n\t\t\t});\n\t\t\tinput.click(function(event) {\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tevent.preventDefault();\n\t\t\t});\n\t\t\tinput.blur(function() {\n\t\t\t\tform.trigger('submit');\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Create an empty file inside the current directory.\n\t\t *\n\t\t * @param {string} name name of the file\n\t\t *\n\t\t * @return {Promise} promise that will be resolved after the\n\t\t * file was created\n\t\t *\n\t\t * @since 8.2\n\t\t */\n\t\tcreateFile: function(name) {\n\t\t\tvar self = this;\n\t\t\tvar deferred = $.Deferred();\n\t\t\tvar promise = deferred.promise();\n\n\t\t\tOCA.Files.Files.isFileNameValid(name);\n\n\t\t\tif (this.lastAction) {\n\t\t\t\tthis.lastAction();\n\t\t\t}\n\n\t\t\tname = this.getUniqueName(name);\n\t\t\tvar targetPath = this.getCurrentDirectory() + '/' + name;\n\n\t\t\tself.filesClient.putFileContents(\n\t\t\t\t\ttargetPath,\n\t\t\t\t\t'',\n\t\t\t\t\t{\n\t\t\t\t\t\tcontentType: 'text/plain',\n\t\t\t\t\t\toverwrite: true\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\t.done(function() {\n\t\t\t\t\t// TODO: error handling / conflicts\n\t\t\t\t\tself.filesClient.getFileInfo(\n\t\t\t\t\t\t\ttargetPath, {\n\t\t\t\t\t\t\t\tproperties: self._getWebdavProperties()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.then(function(status, data) {\n\t\t\t\t\t\t\tself.add(data, {animate: true, scrollTo: true});\n\t\t\t\t\t\t\tdeferred.resolve(status, data);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.fail(function(status) {\n\t\t\t\t\t\t\tOC.Notification.showTemporary(t('files', 'Could not create file \"{file}\"', {file: name}));\n\t\t\t\t\t\t\tdeferred.reject(status);\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.fail(function(status) {\n\t\t\t\t\tif (status === 412) {\n\t\t\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\t\t\tt('files', 'Could not create file \"{file}\" because it already exists', {file: name})\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tOC.Notification.showTemporary(t('files', 'Could not create file \"{file}\"', {file: name}));\n\t\t\t\t\t}\n\t\t\t\t\tdeferred.reject(status);\n\t\t\t\t});\n\n\t\t\treturn promise;\n\t\t},\n\n\t\t/**\n\t\t * Create a directory inside the current directory.\n\t\t *\n\t\t * @param {string} name name of the directory\n\t\t *\n\t\t * @return {Promise} promise that will be resolved after the\n\t\t * directory was created\n\t\t *\n\t\t * @since 8.2\n\t\t */\n\t\tcreateDirectory: function(name) {\n\t\t\tvar self = this;\n\t\t\tvar deferred = $.Deferred();\n\t\t\tvar promise = deferred.promise();\n\n\t\t\tOCA.Files.Files.isFileNameValid(name);\n\n\t\t\tif (this.lastAction) {\n\t\t\t\tthis.lastAction();\n\t\t\t}\n\n\t\t\tname = this.getUniqueName(name);\n\t\t\tvar targetPath = this.getCurrentDirectory() + '/' + name;\n\n\t\t\tthis.filesClient.createDirectory(targetPath)\n\t\t\t\t.done(function(createStatus) {\n\t\t\t\t\tself.filesClient.getFileInfo(\n\t\t\t\t\t\t\ttargetPath, {\n\t\t\t\t\t\t\t\tproperties: self._getWebdavProperties()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.done(function(status, data) {\n\t\t\t\t\t\t\tself.add(data, {animate: true, scrollTo: true});\n\t\t\t\t\t\t\tdeferred.resolve(status, data);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.fail(function() {\n\t\t\t\t\t\t\tOC.Notification.showTemporary(t('files', 'Could not create folder \"{dir}\"', {dir: name}));\n\t\t\t\t\t\t\tdeferred.reject(createStatus);\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.fail(function(createStatus) {\n\t\t\t\t\t// method not allowed, folder might exist already\n\t\t\t\t\tif (createStatus === 405) {\n\t\t\t\t\t\tself.filesClient.getFileInfo(\n\t\t\t\t\t\t\t\ttargetPath, {\n\t\t\t\t\t\t\t\t\tproperties: self._getWebdavProperties()\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.done(function(status, data) {\n\t\t\t\t\t\t\t\t// add it to the list, for completeness\n\t\t\t\t\t\t\t\tself.add(data, {animate: true, scrollTo: true});\n\t\t\t\t\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\t\t\t\t\tt('files', 'Could not create folder \"{dir}\" because it already exists', {dir: name})\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t// still consider a failure\n\t\t\t\t\t\t\t\tdeferred.reject(createStatus, data);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.fail(function() {\n\t\t\t\t\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\t\t\t\t\tt('files', 'Could not create folder \"{dir}\"', {dir: name})\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdeferred.reject(status);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tOC.Notification.showTemporary(t('files', 'Could not create folder \"{dir}\"', {dir: name}));\n\t\t\t\t\t\tdeferred.reject(createStatus);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\treturn promise;\n\t\t},\n\n\t\t/**\n\t\t * Returns whether the given file name exists in the list\n\t\t *\n\t\t * @param {string} file file name\n\t\t *\n\t\t * @return {bool} true if the file exists in the list, false otherwise\n\t\t */\n\t\tinList:function(file) {\n\t\t\treturn this.findFile(file);\n\t\t},\n\n\t\t/**\n\t\t * Shows busy state on a given file row or multiple\n\t\t *\n\t\t * @param {string|Array.<string>} files file name or array of file names\n\t\t * @param {bool} [busy=true] busy state, true for busy, false to remove busy state\n\t\t *\n\t\t * @since 8.2\n\t\t */\n\t\tshowFileBusyState: function(files, state) {\n\t\t\tvar self = this;\n\t\t\tif (!_.isArray(files) && !files.is) {\n\t\t\t\tfiles = [files];\n\t\t\t}\n\n\t\t\tif (_.isUndefined(state)) {\n\t\t\t\tstate = true;\n\t\t\t}\n\n\t\t\t_.each(files, function(fileName) {\n\t\t\t\t// jquery element already ?\n\t\t\t\tvar $tr;\n\t\t\t\tif (_.isString(fileName)) {\n\t\t\t\t\t$tr = self.findFileEl(fileName);\n\t\t\t\t} else {\n\t\t\t\t\t$tr = $(fileName);\n\t\t\t\t}\n\n\t\t\t\tvar $thumbEl = $tr.find('.thumbnail');\n\t\t\t\t$tr.toggleClass('busy', state);\n\n\t\t\t\tif (state) {\n\t\t\t\t\t$thumbEl.attr('data-oldimage', $thumbEl.css('background-image'));\n\t\t\t\t\t$thumbEl.css('background-image', 'url('+ OC.imagePath('core', 'loading.gif') + ')');\n\t\t\t\t} else {\n\t\t\t\t\t$thumbEl.css('background-image', $thumbEl.attr('data-oldimage'));\n\t\t\t\t\t$thumbEl.removeAttr('data-oldimage');\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Delete the given files from the given dir\n\t\t * @param files file names list (without path)\n\t\t * @param dir directory in which to delete the files, defaults to the current\n\t\t * directory\n\t\t */\n\t\tdo_delete:function(files, dir) {\n\t\t\tvar self = this;\n\t\t\tif (files && files.substr) {\n\t\t\t\tfiles=[files];\n\t\t\t}\n\t\t\tif (!files) {\n\t\t\t\t// delete all files in directory\n\t\t\t\tfiles = _.pluck(this.files, 'name');\n\t\t\t}\n\t\t\tif (files) {\n\t\t\t\tthis.showFileBusyState(files, true);\n\t\t\t}\n\t\t\t// Finish any existing actions\n\t\t\tif (this.lastAction) {\n\t\t\t\tthis.lastAction();\n\t\t\t}\n\n\t\t\tdir = dir || this.getCurrentDirectory();\n\n\t\t\tfunction removeFromList(file) {\n\t\t\t\tvar fileEl = self.remove(file, {updateSummary: false});\n\t\t\t\t// FIXME: not sure why we need this after the\n\t\t\t\t// element isn't even in the DOM any more\n\t\t\t\tfileEl.find('.selectCheckBox').prop('checked', false);\n\t\t\t\tfileEl.removeClass('selected');\n\t\t\t\tself.fileSummary.remove({type: fileEl.attr('data-type'), size: fileEl.attr('data-size')});\n\t\t\t\t// TODO: this info should be returned by the ajax call!\n\t\t\t\tself.updateEmptyContent();\n\t\t\t\tself.fileSummary.update();\n\t\t\t\tself.updateSelectionSummary();\n\t\t\t\t// FIXME: don't repeat this, do it once all files are done\n\t\t\t\tself.updateStorageStatistics();\n\t\t\t}\n\n\t\t\t_.each(files, function(file) {\n\t\t\t\tself.filesClient.remove(dir + '/' + file)\n\t\t\t\t\t.done(function() {\n\t\t\t\t\t\tremoveFromList(file);\n\t\t\t\t\t})\n\t\t\t\t\t.fail(function(status) {\n\t\t\t\t\t\tif (status === 404) {\n\t\t\t\t\t\t\t// the file already did not exist, remove it from the list\n\t\t\t\t\t\t\tremoveFromList(file);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// only reset the spinner for that one file\n\t\t\t\t\t\t\tOC.Notification.showTemporary(\n\t\t\t\t\t\t\t\t\tt('files', 'Error deleting file \"{fileName}\".', {fileName: file}),\n\t\t\t\t\t\t\t\t\t{timeout: 10}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tvar deleteAction = self.findFileEl(file).find('.action.delete');\n\t\t\t\t\t\t\tdeleteAction.removeClass('icon-loading-small').addClass('icon-delete');\n\t\t\t\t\t\t\tself.showFileBusyState(files, false);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t/**\n\t\t * Creates the file summary section\n\t\t */\n\t\t_createSummary: function() {\n\t\t\tvar $tr = $('<tr class=\"summary\"></tr>');\n\t\t\tthis.$el.find('tfoot').append($tr);\n\n\t\t\treturn new OCA.Files.FileSummary($tr);\n\t\t},\n\t\tupdateEmptyContent: function() {\n\t\t\tvar permissions = this.getDirectoryPermissions();\n\t\t\tvar isCreatable = (permissions & OC.PERMISSION_CREATE) !== 0;\n\t\t\tthis.$el.find('#emptycontent').toggleClass('hidden', !this.isEmpty);\n\t\t\tthis.$el.find('#emptycontent .uploadmessage').toggleClass('hidden', !isCreatable || !this.isEmpty);\n\t\t\tthis.$el.find('#filestable thead th').toggleClass('hidden', this.isEmpty);\n\t\t},\n\t\t/**\n\t\t * Shows the loading mask.\n\t\t *\n\t\t * @see OCA.Files.FileList#hideMask\n\t\t */\n\t\tshowMask: function() {\n\t\t\t// in case one was shown before\n\t\t\tvar $mask = this.$el.find('.mask');\n\t\t\tif ($mask.exists()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.$table.addClass('hidden');\n\t\t\tthis.$el.find('#emptycontent').addClass('hidden');\n\n\t\t\t$mask = $('<div class=\"mask transparent\"></div>');\n\n\t\t\t$mask.css('background-image', 'url('+ OC.imagePath('core', 'loading.gif') + ')');\n\t\t\t$mask.css('background-repeat', 'no-repeat');\n\t\t\tthis.$el.append($mask);\n\n\t\t\t$mask.removeClass('transparent');\n\t\t},\n\t\t/**\n\t\t * Hide the loading mask.\n\t\t * @see OCA.Files.FileList#showMask\n\t\t */\n\t\thideMask: function() {\n\t\t\tthis.$el.find('.mask').remove();\n\t\t\tthis.$table.removeClass('hidden');\n\t\t},\n\t\tscrollTo:function(file) {\n\t\t\tif (!_.isArray(file)) {\n\t\t\t\tfile = [file];\n\t\t\t}\n\t\t\tthis.highlightFiles(file, function($tr) {\n\t\t\t\t$tr.addClass('searchresult');\n\t\t\t\t$tr.one('hover', function() {\n\t\t\t\t\t$tr.removeClass('searchresult');\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t/**\n\t\t * @deprecated use setFilter(filter)\n\t\t */\n\t\tfilter:function(query) {\n\t\t\tthis.setFilter('');\n\t\t},\n\t\t/**\n\t\t * @deprecated use setFilter('')\n\t\t */\n\t\tunfilter:function() {\n\t\t\tthis.setFilter('');\n\t\t},\n\t\t/**\n\t\t * hide files matching the given filter\n\t\t * @param filter\n\t\t */\n\t\tsetFilter:function(filter) {\n\t\t\tthis._filter = filter;\n\t\t\tthis.fileSummary.setFilter(filter, this.files);\n\t\t\tif (!this.$el.find('.mask').exists()) {\n\t\t\t\tthis.hideIrrelevantUIWhenNoFilesMatch();\n\t\t\t}\n\t\t\tvar that = this;\n\t\t\tfilter = filter.toLowerCase();\n\t\t\tthis.$fileList.find('tr').each(function(i,e) {\n\t\t\t\tvar $e = $(e);\n\t\t\t\tif ($e.data('file').toString().toLowerCase().indexOf(filter) === -1) {\n\t\t\t\t\t$e.addClass('hidden');\n\t\t\t\t} else {\n\t\t\t\t\t$e.removeClass('hidden');\n\t\t\t\t}\n\t\t\t});\n\t\t\tthat.$container.trigger('scroll');\n\t\t},\n\t\thideIrrelevantUIWhenNoFilesMatch:function() {\n\t\t\tif (this._filter && this.fileSummary.summary.totalDirs + this.fileSummary.summary.totalFiles === 0) {\n\t\t\t\tthis.$el.find('#filestable thead th').addClass('hidden');\n\t\t\t\tthis.$el.find('#emptycontent').addClass('hidden');\n\t\t\t\t$('#searchresults').addClass('filter-empty');\n\t\t\t\tif ( $('#searchresults').length === 0 || $('#searchresults').hasClass('hidden') ) {\n\t\t\t\t\tthis.$el.find('.nofilterresults').removeClass('hidden').\n\t\t\t\t\t\tfind('p').text(t('files', \"No entries in this folder match '{filter}'\", {filter:this._filter},  null, {'escape': false}));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$('#searchresults').removeClass('filter-empty');\n\t\t\t\tthis.$el.find('#filestable thead th').toggleClass('hidden', this.isEmpty);\n\t\t\t\tif (!this.$el.find('.mask').exists()) {\n\t\t\t\t\tthis.$el.find('#emptycontent').toggleClass('hidden', !this.isEmpty);\n\t\t\t\t}\n\t\t\t\tthis.$el.find('.nofilterresults').addClass('hidden');\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * get the current filter\n\t\t * @param filter\n\t\t */\n\t\tgetFilter:function(filter) {\n\t\t\treturn this._filter;\n\t\t},\n\t\t/**\n\t\t * update the search object to use this filelist when filtering\n\t\t */\n\t\tupdateSearch:function() {\n\t\t\tif (OCA.Search.files) {\n\t\t\t\tOCA.Search.files.setFileList(this);\n\t\t\t}\n\t\t\tif (OC.Search) {\n\t\t\t\tOC.Search.clear();\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Update UI based on the current selection\n\t\t */\n\t\tupdateSelectionSummary: function() {\n\t\t\tvar summary = this._selectionSummary.summary;\n\t\t\tvar selection;\n\n\t\t\tif (summary.totalFiles === 0 && summary.totalDirs === 0) {\n\t\t\t\tthis.$el.find('#headerName a.name>span:first').text(t('files','Name'));\n\t\t\t\tthis.$el.find('#headerSize a>span:first').text(t('files','Size'));\n\t\t\t\tthis.$el.find('#modified a>span:first').text(t('files','Modified'));\n\t\t\t\tthis.$el.find('table').removeClass('multiselect');\n\t\t\t\tthis.$el.find('.selectedActions').addClass('hidden');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.$el.find('.selectedActions').removeClass('hidden');\n\t\t\t\tthis.$el.find('#headerSize a>span:first').text(OC.Util.humanFileSize(summary.totalSize));\n\n\t\t\t\tvar directoryInfo = n('files', '%n folder', '%n folders', summary.totalDirs);\n\t\t\t\tvar fileInfo = n('files', '%n file', '%n files', summary.totalFiles);\n\n\t\t\t\tif (summary.totalDirs > 0 && summary.totalFiles > 0) {\n\t\t\t\t\tvar selectionVars = {\n\t\t\t\t\t\tdirs: directoryInfo,\n\t\t\t\t\t\tfiles: fileInfo\n\t\t\t\t\t};\n\t\t\t\t\tselection = t('files', '{dirs} and {files}', selectionVars);\n\t\t\t\t} else if (summary.totalDirs > 0) {\n\t\t\t\t\tselection = directoryInfo;\n\t\t\t\t} else {\n\t\t\t\t\tselection = fileInfo;\n\t\t\t\t}\n\n\t\t\t\tthis.$el.find('#headerName a.name>span:first').text(selection);\n\t\t\t\tthis.$el.find('#modified a>span:first').text('');\n\t\t\t\tthis.$el.find('table').addClass('multiselect');\n\t\t\t\tthis.$el.find('.delete-selected').toggleClass('hidden', !this.isSelectedDeletable());\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Check whether all selected files are deletable\n\t\t */\n\t\tisSelectedDeletable: function() {\n\t\t\treturn _.reduce(this.getSelectedFiles(), function(deletable, file) {\n\t\t\t\treturn deletable && (file.permissions & OC.PERMISSION_DELETE);\n\t\t\t}, true);\n\t\t},\n\n\t\t/**\n\t\t * Returns whether all files are selected\n\t\t * @return true if all files are selected, false otherwise\n\t\t */\n\t\tisAllSelected: function() {\n\t\t\treturn this.$el.find('.select-all').prop('checked');\n\t\t},\n\n\t\t/**\n\t\t * Returns the file info of the selected files\n\t\t *\n\t\t * @return array of file names\n\t\t */\n\t\tgetSelectedFiles: function() {\n\t\t\treturn _.values(this._selectedFiles);\n\t\t},\n\n\t\tgetUniqueName: function(name) {\n\t\t\tif (this.findFileEl(name).exists()) {\n\t\t\t\tvar numMatch;\n\t\t\t\tvar parts=name.split('.');\n\t\t\t\tvar extension = \"\";\n\t\t\t\tif (parts.length > 1) {\n\t\t\t\t\textension=parts.pop();\n\t\t\t\t}\n\t\t\t\tvar base=parts.join('.');\n\t\t\t\tnumMatch=base.match(/\\((\\d+)\\)/);\n\t\t\t\tvar num=2;\n\t\t\t\tif (numMatch && numMatch.length>0) {\n\t\t\t\t\tnum=parseInt(numMatch[numMatch.length-1], 10)+1;\n\t\t\t\t\tbase=base.split('(');\n\t\t\t\t\tbase.pop();\n\t\t\t\t\tbase=$.trim(base.join('('));\n\t\t\t\t}\n\t\t\t\tname=base+' ('+num+')';\n\t\t\t\tif (extension) {\n\t\t\t\t\tname = name+'.'+extension;\n\t\t\t\t}\n\t\t\t\t// FIXME: ugly recursion\n\t\t\t\treturn this.getUniqueName(name);\n\t\t\t}\n\t\t\treturn name;\n\t\t},\n\n\t\t/**\n\t\t * Shows a \"permission denied\" notification\n\t\t */\n\t\t_showPermissionDeniedNotification: function() {\n\t\t\tvar message = t('core', 'You don\u2019t have permission to upload or create files here');\n\t\t\tOC.Notification.showTemporary(message);\n\t\t},\n\n\t\t/**\n\t\t * Setup file upload events related to the file-upload plugin\n\t\t */\n\t\tsetupUploadEvents: function() {\n\t\t\tvar self = this;\n\n\t\t\t// handle upload events\n\t\t\tvar fileUploadStart = this.$el.find('#file_upload_start');\n\n\t\t\t// detect the progress bar resize\n\t\t\tfileUploadStart.on('resized', this._onResize);\n\n\t\t\tfileUploadStart.on('fileuploaddrop', function(e, data) {\n\t\t\t\tOC.Upload.log('filelist handle fileuploaddrop', e, data);\n\n\t\t\t\tif (self.$el.hasClass('hidden')) {\n\t\t\t\t\t// do not upload to invisible lists\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tvar dropTarget = $(e.originalEvent.target);\n\t\t\t\t// check if dropped inside this container and not another one\n\t\t\t\tif (dropTarget.length\n\t\t\t\t\t&& !self.$el.is(dropTarget) // dropped on list directly\n\t\t\t\t\t&& !self.$el.has(dropTarget).length // dropped inside list\n\t\t\t\t\t&& !dropTarget.is(self.$container) // dropped on main container\n\t\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// find the closest tr or crumb to use as target\n\t\t\t\tdropTarget = dropTarget.closest('tr, .crumb');\n\n\t\t\t\t// if dropping on tr or crumb, drag&drop upload to folder\n\t\t\t\tif (dropTarget && (dropTarget.data('type') === 'dir' ||\n\t\t\t\t\tdropTarget.hasClass('crumb'))) {\n\n\t\t\t\t\t// remember as context\n\t\t\t\t\tdata.context = dropTarget;\n\n\t\t\t\t\t// if permissions are specified, only allow if create permission is there\n\t\t\t\t\tvar permissions = dropTarget.data('permissions');\n\t\t\t\t\tif (!_.isUndefined(permissions) && (permissions & OC.PERMISSION_CREATE) === 0) {\n\t\t\t\t\t\tself._showPermissionDeniedNotification();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tvar dir = dropTarget.data('file');\n\t\t\t\t\t// if from file list, need to prepend parent dir\n\t\t\t\t\tif (dir) {\n\t\t\t\t\t\tvar parentDir = self.getCurrentDirectory();\n\t\t\t\t\t\tif (parentDir[parentDir.length - 1] !== '/') {\n\t\t\t\t\t\t\tparentDir += '/';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdir = parentDir + dir;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t// read full path from crumb\n\t\t\t\t\t\tdir = dropTarget.data('dir') || '/';\n\t\t\t\t\t}\n\n\t\t\t\t\t// add target dir\n\t\t\t\t\tdata.targetDir = dir;\n\t\t\t\t} else {\n\t\t\t\t\t// we are dropping somewhere inside the file list, which will\n\t\t\t\t\t// upload the file to the current directory\n\t\t\t\t\tdata.targetDir = self.getCurrentDirectory();\n\n\t\t\t\t\t// cancel uploads to current dir if no permission\n\t\t\t\t\tvar isCreatable = (self.getDirectoryPermissions() & OC.PERMISSION_CREATE) !== 0;\n\t\t\t\t\tif (!isCreatable) {\n\t\t\t\t\t\tself._showPermissionDeniedNotification();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tfileUploadStart.on('fileuploadadd', function(e, data) {\n\t\t\t\tconsole.log('XXXXXXX');\n\t\t\t\tOC.Upload.log('filelist handle fileuploadadd', e, data);\n\n\t\t\t\t//finish delete if we are uploading a deleted file\n\t\t\t\tif (self.deleteFiles && self.deleteFiles.indexOf(data.files[0].name)!==-1) {\n\t\t\t\t\tself.finishDelete(null, true); //delete file before continuing\n\t\t\t\t}\n\n\t\t\t\t// add ui visualization to existing folder\n\t\t\t\tif (data.context && data.context.data('type') === 'dir') {\n\t\t\t\t\t// add to existing folder\n\n\t\t\t\t\t// update upload counter ui\n\t\t\t\t\tvar uploadText = data.context.find('.uploadtext');\n\t\t\t\t\tvar currentUploads = parseInt(uploadText.attr('currentUploads'), 10);\n\t\t\t\t\tcurrentUploads += 1;\n\t\t\t\t\tuploadText.attr('currentUploads', currentUploads);\n\n\t\t\t\t\tvar translatedText = n('files', 'Uploading %n file', 'Uploading %n files', currentUploads);\n\t\t\t\t\tif (currentUploads === 1) {\n\t\t\t\t\t\tself.showFileBusyState(uploadText.closest('tr'), true);\n\t\t\t\t\t\tuploadText.text(translatedText);\n\t\t\t\t\t\tuploadText.show();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tuploadText.text(translatedText);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t});\n\t\t\t/*\n\t\t\t * when file upload done successfully add row to filelist\n\t\t\t * update counter when uploading to sub folder\n\t\t\t */\n\t\t\tfileUploadStart.on('fileuploaddone', function(e, data) {\n\t\t\t\tOC.Upload.log('filelist handle fileuploaddone', e, data);\n\n\t\t\t\tvar response;\n\t\t\t\tif (typeof data.result === 'string') {\n\t\t\t\t\tresponse = data.result;\n\t\t\t\t} else {\n\t\t\t\t\t// fetch response from iframe\n\t\t\t\t\tresponse = data.result[0].body.innerText;\n\t\t\t\t}\n\t\t\t\tvar result=$.parseJSON(response);\n\n\t\t\t\tif (typeof result[0] !== 'undefined' && result[0].status === 'success') {\n\t\t\t\t\tvar file = result[0];\n\t\t\t\t\tvar size = 0;\n\n\t\t\t\t\tif (data.context && data.context.data('type') === 'dir') {\n\n\t\t\t\t\t\t// update upload counter ui\n\t\t\t\t\t\tvar uploadText = data.context.find('.uploadtext');\n\t\t\t\t\t\tvar currentUploads = parseInt(uploadText.attr('currentUploads'), 10);\n\t\t\t\t\t\tcurrentUploads -= 1;\n\t\t\t\t\t\tuploadText.attr('currentUploads', currentUploads);\n\t\t\t\t\t\tvar translatedText = n('files', 'Uploading %n file', 'Uploading %n files', currentUploads);\n\t\t\t\t\t\tif (currentUploads === 0) {\n\t\t\t\t\t\t\tself.showFileBusyState(uploadText.closest('tr'), false);\n\t\t\t\t\t\t\tuploadText.text(translatedText);\n\t\t\t\t\t\t\tuploadText.hide();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuploadText.text(translatedText);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// update folder size\n\t\t\t\t\t\tsize = parseInt(data.context.data('size'), 10);\n\t\t\t\t\t\tsize += parseInt(file.size, 10);\n\t\t\t\t\t\tdata.context.attr('data-size', size);\n\t\t\t\t\t\tdata.context.find('td.filesize').text(humanFileSize(size));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// only append new file if uploaded into the current folder\n\t\t\t\t\t\tif (file.directory !== self.getCurrentDirectory()) {\n\t\t\t\t\t\t\t// Uploading folders actually uploads a list of files\n\t\t\t\t\t\t\t// for which the target directory (file.directory) might lie deeper\n\t\t\t\t\t\t\t// than the current directory\n\n\t\t\t\t\t\t\tvar fileDirectory = file.directory.replace('/','').replace(/\\/$/, \"\");\n\t\t\t\t\t\t\tvar currentDirectory = self.getCurrentDirectory().replace('/','').replace(/\\/$/, \"\") + '/';\n\n\t\t\t\t\t\t\tif (currentDirectory !== '/') {\n\t\t\t\t\t\t\t\t// abort if fileDirectory does not start with current one\n\t\t\t\t\t\t\t\tif (fileDirectory.indexOf(currentDirectory) !== 0) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// remove the current directory part\n\t\t\t\t\t\t\t\tfileDirectory = fileDirectory.substr(currentDirectory.length);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// only take the first section of the path\n\t\t\t\t\t\t\tfileDirectory = fileDirectory.split('/');\n\n\t\t\t\t\t\t\tvar fd;\n\t\t\t\t\t\t\t// if the first section exists / is a subdir\n\t\t\t\t\t\t\tif (fileDirectory.length) {\n\t\t\t\t\t\t\t\tfileDirectory = fileDirectory[0];\n\n\t\t\t\t\t\t\t\t// See whether it is already in the list\n\t\t\t\t\t\t\t\tfd = self.findFileEl(fileDirectory);\n\t\t\t\t\t\t\t\tif (fd.length === 0) {\n\t\t\t\t\t\t\t\t\tvar dir = {\n\t\t\t\t\t\t\t\t\t\tname: fileDirectory,\n\t\t\t\t\t\t\t\t\t\ttype: 'dir',\n\t\t\t\t\t\t\t\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\t\t\t\t\t\t\t\tpermissions: file.permissions,\n\t\t\t\t\t\t\t\t\t\tsize: 0,\n\t\t\t\t\t\t\t\t\t\tid: file.parentId\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tfd = self.add(dir, {insert: true});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// update folder size\n\t\t\t\t\t\t\t\tsize = parseInt(fd.attr('data-size'), 10);\n\t\t\t\t\t\t\t\tsize += parseInt(file.size, 10);\n\t\t\t\t\t\t\t\tfd.attr('data-size', size);\n\t\t\t\t\t\t\t\tfd.find('td.filesize').text(OC.Util.humanFileSize(size));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// add as stand-alone row to filelist\n\t\t\t\t\t\tsize = t('files', 'Pending');\n\t\t\t\t\t\tif (data.files[0].size>=0) {\n\t\t\t\t\t\t\tsize=data.files[0].size;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//should the file exist in the list remove it\n\t\t\t\t\t\tself.remove(file.name);\n\n\t\t\t\t\t\t// create new file context\n\t\t\t\t\t\tdata.context = self.add(file, {animate: true});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tfileUploadStart.on('fileuploadstop', function() {\n\t\t\t\tOC.Upload.log('filelist handle fileuploadstop');\n\n\t\t\t\t//cleanup uploading to a dir\n\t\t\t\tvar uploadText = self.$fileList.find('tr .uploadtext');\n\t\t\t\tself.showFileBusyState(uploadText.closest('tr'), false);\n\t\t\t\tuploadText.fadeOut();\n\t\t\t\tuploadText.attr('currentUploads', 0);\n\n\t\t\t\tself.updateStorageStatistics();\n\t\t\t});\n\t\t\tfileUploadStart.on('fileuploadfail', function(e, data) {\n\t\t\t\tOC.Upload.log('filelist handle fileuploadfail', e, data);\n\n\t\t\t\t//if user pressed cancel hide upload chrome\n\t\t\t\tif (data.errorThrown === 'abort') {\n\t\t\t\t\t//cleanup uploading to a dir\n\t\t\t\t\tvar uploadText = self.$fileList.find('tr .uploadtext');\n\t\t\t\t\tself.showFileBusyState(uploadText.closest('tr'), false);\n\t\t\t\t\tuploadText.fadeOut();\n\t\t\t\t\tuploadText.attr('currentUploads', 0);\n\t\t\t\t}\n\t\t\t\tself.updateStorageStatistics();\n\t\t\t});\n\n\t\t},\n\n\t\t/**\n\t\t * Scroll to the last file of the given list\n\t\t * Highlight the list of files\n\t\t * @param files array of filenames,\n\t\t * @param {Function} [highlightFunction] optional function\n\t\t * to be called after the scrolling is finished\n\t\t */\n\t\thighlightFiles: function(files, highlightFunction) {\n\t\t\t// Detection of the uploaded element\n\t\t\tvar filename = files[files.length - 1];\n\t\t\tvar $fileRow = this.findFileEl(filename);\n\n\t\t\twhile(!$fileRow.exists() && this._nextPage(false) !== false) { // Checking element existence\n\t\t\t\t$fileRow = this.findFileEl(filename);\n\t\t\t}\n\n\t\t\tif (!$fileRow.exists()) { // Element not present in the file list\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar currentOffset = this.$container.scrollTop();\n\t\t\tvar additionalOffset = this.$el.find(\"#controls\").height()+this.$el.find(\"#controls\").offset().top;\n\n\t\t\t// Animation\n\t\t\tvar _this = this;\n\t\t\tvar $scrollContainer = this.$container;\n\t\t\tif ($scrollContainer[0] === window) {\n\t\t\t\t// need to use \"body\" to animate scrolling\n\t\t\t\t// when the scroll container is the window\n\t\t\t\t$scrollContainer = $('body');\n\t\t\t}\n\t\t\t$scrollContainer.animate({\n\t\t\t\t// Scrolling to the top of the new element\n\t\t\t\tscrollTop: currentOffset + $fileRow.offset().top - $fileRow.height() * 2 - additionalOffset\n\t\t\t}, {\n\t\t\t\tduration: 500,\n\t\t\t\tcomplete: function() {\n\t\t\t\t\t// Highlighting function\n\t\t\t\t\tvar highlightRow = highlightFunction;\n\n\t\t\t\t\tif (!highlightRow) {\n\t\t\t\t\t\thighlightRow = function($fileRow) {\n\t\t\t\t\t\t\t$fileRow.addClass(\"highlightUploaded\");\n\t\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\t\t$fileRow.removeClass(\"highlightUploaded\");\n\t\t\t\t\t\t\t}, 2500);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Loop over uploaded files\n\t\t\t\t\tfor(var i=0; i<files.length; i++) {\n\t\t\t\t\t\tvar $fileRow = _this.findFileEl(files[i]);\n\n\t\t\t\t\t\tif($fileRow.length !== 0) { // Checking element existence\n\t\t\t\t\t\t\thighlightRow($fileRow);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t_renderNewButton: function() {\n\t\t\t// if an upload button (legacy) already exists or no actions container exist, skip\n\t\t\tvar $actionsContainer = this.$el.find('#controls .actions');\n\t\t\tif (!$actionsContainer.length || this.$el.find('.button.upload').length) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!this._addButtonTemplate) {\n\t\t\t\tthis._addButtonTemplate = Handlebars.compile(TEMPLATE_ADDBUTTON);\n\t\t\t}\n\t\t\tvar $newButton = $(this._addButtonTemplate({\n\t\t\t\taddText: t('files', 'New'),\n\t\t\t\ticonClass: 'icon-add'\n\t\t\t}));\n\n\t\t\t$actionsContainer.prepend($newButton);\n\t\t\t$newButton.tooltip({'placement': 'bottom'});\n\n\t\t\t$newButton.click(_.bind(this._onClickNewButton, this));\n\t\t\tthis._newButton = $newButton;\n\t\t},\n\n\t\t_onClickNewButton: function(event) {\n\t\t\tvar $target = $(event.target);\n\t\t\tif (!$target.hasClass('.button')) {\n\t\t\t\t$target = $target.closest('.button');\n\t\t\t}\n\t\t\tthis._newButton.tooltip('hide');\n\t\t\tevent.preventDefault();\n\t\t\tif ($target.hasClass('disabled')) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!this._newFileMenu) {\n\t\t\t\tthis._newFileMenu = new OCA.Files.NewFileMenu({\n\t\t\t\t\tfileList: this\n\t\t\t\t});\n\t\t\t\t$('body').append(this._newFileMenu.$el);\n\t\t\t}\n\t\t\tthis._newFileMenu.showAt($target);\n\n\t\t\treturn false;\n\t\t},\n\n\t\t/**\n\t\t * Register a tab view to be added to all views\n\t\t */\n\t\tregisterTabView: function(tabView) {\n\t\t\tif (this._detailsView) {\n\t\t\t\tthis._detailsView.addTabView(tabView);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Register a detail view to be added to all views\n\t\t */\n\t\tregisterDetailView: function(detailView) {\n\t\t\tif (this._detailsView) {\n\t\t\t\tthis._detailsView.addDetailView(detailView);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Sort comparators.\n\t * @namespace OCA.Files.FileList.Comparators\n\t * @private\n\t */\n\tFileList.Comparators = {\n\t\t/**\n\t\t * Compares two file infos by name, making directories appear\n\t\t * first.\n\t\t *\n\t\t * @param {OC.Files.FileInfo} fileInfo1 file info\n\t\t * @param {OC.Files.FileInfo} fileInfo2 file info\n\t\t * @return {int} -1 if the first file must appear before the second one,\n\t\t * 0 if they are identify, 1 otherwise.\n\t\t */\n\t\tname: function(fileInfo1, fileInfo2) {\n\t\t\tif (fileInfo1.type === 'dir' && fileInfo2.type !== 'dir') {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (fileInfo1.type !== 'dir' && fileInfo2.type === 'dir') {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn OC.Util.naturalSortCompare(fileInfo1.name, fileInfo2.name);\n\t\t},\n\t\t/**\n\t\t * Compares two file infos by size.\n\t\t *\n\t\t * @param {OC.Files.FileInfo} fileInfo1 file info\n\t\t * @param {OC.Files.FileInfo} fileInfo2 file info\n\t\t * @return {int} -1 if the first file must appear before the second one,\n\t\t * 0 if they are identify, 1 otherwise.\n\t\t */\n\t\tsize: function(fileInfo1, fileInfo2) {\n\t\t\treturn fileInfo1.size - fileInfo2.size;\n\t\t},\n\t\t/**\n\t\t * Compares two file infos by timestamp.\n\t\t *\n\t\t * @param {OC.Files.FileInfo} fileInfo1 file info\n\t\t * @param {OC.Files.FileInfo} fileInfo2 file info\n\t\t * @return {int} -1 if the first file must appear before the second one,\n\t\t * 0 if they are identify, 1 otherwise.\n\t\t */\n\t\tmtime: function(fileInfo1, fileInfo2) {\n\t\t\treturn fileInfo1.mtime - fileInfo2.mtime;\n\t\t}\n\t};\n\n\t/**\n\t * File info attributes.\n\t *\n\t * @typedef {Object} OC.Files.FileInfo\n\t *\n\t * @lends OC.Files.FileInfo\n\t *\n\t * @deprecated use OC.Files.FileInfo instead\n\t *\n\t */\n\tOCA.Files.FileInfo = OC.Files.FileInfo;\n\n\tOCA.Files.FileList = FileList;\n})();\n\n$(document).ready(function() {\n\t// FIXME: unused ?\n\tOCA.Files.FileList.useUndo = (window.onbeforeunload)?true:false;\n\t$(window).bind('beforeunload', function () {\n\t\tif (OCA.Files.FileList.lastAction) {\n\t\t\tOCA.Files.FileList.lastAction();\n\t\t}\n\t});\n\t$(window).unload(function () {\n\t\t$(window).trigger('beforeunload');\n\t});\n\n});\n", "/**\n* ownCloud\n*\n* @author Vincent Petry\n* @copyright 2014 Vincent Petry <pvince81@owncloud.com>\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n* License as published by the Free Software Foundation; either\n* version 3 of the License, or any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n*\n* You should have received a copy of the GNU Affero General Public\n* License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*\n*/\n\ndescribe('OCA.Files.FileList tests', function() {\n\tvar FileInfo = OC.Files.FileInfo;\n\tvar testFiles, testRoot, notificationStub, fileList, pageSizeStub;\n\tvar bcResizeStub;\n\tvar filesClient;\n\tvar redirectStub;\n\n\t/**\n\t * Generate test file data\n\t */\n\tfunction generateFiles(startIndex, endIndex) {\n\t\tvar files = [];\n\t\tvar name;\n\t\tfor (var i = startIndex; i <= endIndex; i++) {\n\t\t\tname = 'File with index ';\n\t\t\tif (i < 10) {\n\t\t\t\t// do not rely on localeCompare here\n\t\t\t\t// and make the sorting predictable\n\t\t\t\t// cross-browser\n\t\t\t\tname += '0';\n\t\t\t}\n\t\t\tname += i + '.txt';\n\t\t\tfiles.push(new FileInfo({\n\t\t\t\tid: i,\n\t\t\t\ttype: 'file',\n\t\t\t\tname: name,\n\t\t\t\tmimetype: 'text/plain',\n\t\t\t\tsize: i * 2,\n\t\t\t\tetag: 'abc'\n\t\t\t}));\n\t\t}\n\t\treturn files;\n\t}\n\n\tbeforeEach(function() {\n\t\tfilesClient = new OC.Files.Client({\n\t\t\thost: 'localhost',\n\t\t\tport: 80,\n\t\t\t// FIXME: uncomment after fixing the test OC.webroot\n\t\t\t//root: OC.webroot + '/remote.php/webdav',\n\t\t\troot: '/remote.php/webdav',\n\t\t\tuseHTTPS: false\n\t\t});\n\t\tredirectStub = sinon.stub(OC, 'redirect');\n\t\tnotificationStub = sinon.stub(OC.Notification, 'showTemporary');\n\t\t// prevent resize algo to mess up breadcrumb order while\n\t\t// testing\n\t\tbcResizeStub = sinon.stub(OCA.Files.BreadCrumb.prototype, '_resize');\n\n\t\t// init parameters and test table elements\n\t\t$('#testArea').append(\n\t\t\t'<div id=\"app-content-files\">' +\n\t\t\t// init horrible parameters\n\t\t\t'<input type=\"hidden\" id=\"dir\" value=\"/subdir\"/>' +\n\t\t\t'<input type=\"hidden\" id=\"permissions\" value=\"31\"/>' +\n\t\t\t// dummy controls\n\t\t\t'<div id=\"controls\">' +\n\t\t\t'   <div class=\"actions creatable\"></div>' +\n\t\t\t'   <div class=\"notCreatable\"></div>' +\n\t\t\t'</div>' +\n\t\t\t// uploader\n\t\t\t'<input type=\"file\" id=\"file_upload_start\" name=\"files[]\" multiple=\"multiple\">' +\n\t\t\t// dummy table\n\t\t\t// TODO: at some point this will be rendered by the fileList class itself!\n\t\t\t'<table id=\"filestable\">' +\n\t\t\t'<thead><tr>' +\n\t\t\t'<th id=\"headerName\" class=\"hidden column-name\">' +\n\t\t\t'<input type=\"checkbox\" id=\"select_all_files\" class=\"select-all checkbox\">' +\n\t\t\t'<a class=\"name columntitle\" data-sort=\"name\"><span>Name</span><span class=\"sort-indicator\"></span></a>' +\n\t\t\t'<span id=\"selectedActionsList\" class=\"selectedActions hidden\">' +\n\t\t\t'<a href class=\"download\"><img src=\"actions/download.svg\">Download</a>' +\n\t\t\t'<a href class=\"delete-selected\">Delete</a></span>' +\n\t\t\t'</th>' +\n\t\t\t'<th class=\"hidden column-size\"><a class=\"columntitle\" data-sort=\"size\"><span class=\"sort-indicator\"></span></a></th>' +\n\t\t\t'<th class=\"hidden column-mtime\"><a class=\"columntitle\" data-sort=\"mtime\"><span class=\"sort-indicator\"></span></a></th>' +\n\t\t\t'</tr></thead>' +\n\t\t\t'<tbody id=\"fileList\"></tbody>' +\n\t\t\t'<tfoot></tfoot>' +\n\t\t\t'</table>' +\n\t\t\t// TODO: move to handlebars template\n\t\t\t'<div id=\"emptycontent\"><h2>Empty content message</h2><p class=\"uploadmessage\">Upload message</p></div>' +\n\t\t\t'<div class=\"nofilterresults hidden\"></div>' +\n\t\t\t'</div>'\n\t\t);\n\n\t\ttestRoot = new FileInfo({\n\t\t\t// root entry\n\t\t\tid: 99,\n\t\t\ttype: 'dir',\n\t\t\tname: '/subdir',\n\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\tsize: 1200000,\n\t\t\tetag: 'a0b0c0d0',\n\t\t\tpermissions: OC.PERMISSION_ALL\n\t\t});\n\t\ttestFiles = [new FileInfo({\n\t\t\tid: 1,\n\t\t\ttype: 'file',\n\t\t\tname: 'One.txt',\n\t\t\tmimetype: 'text/plain',\n\t\t\tmtime: 123456789,\n\t\t\tsize: 12,\n\t\t\tetag: 'abc',\n\t\t\tpermissions: OC.PERMISSION_ALL\n\t\t}), new FileInfo({\n\t\t\tid: 2,\n\t\t\ttype: 'file',\n\t\t\tname: 'Two.jpg',\n\t\t\tmimetype: 'image/jpeg',\n\t\t\tmtime: 234567890,\n\t\t\tsize: 12049,\n\t\t\tetag: 'def',\n\t\t\tpermissions: OC.PERMISSION_ALL\n\t\t}), new FileInfo({\n\t\t\tid: 3,\n\t\t\ttype: 'file',\n\t\t\tname: 'Three.pdf',\n\t\t\tmimetype: 'application/pdf',\n\t\t\tmtime: 234560000,\n\t\t\tsize: 58009,\n\t\t\tetag: '123',\n\t\t\tpermissions: OC.PERMISSION_ALL\n\t\t}), new FileInfo({\n\t\t\tid: 4,\n\t\t\ttype: 'dir',\n\t\t\tname: 'somedir',\n\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\tmtime: 134560000,\n\t\t\tsize: 250,\n\t\t\tetag: '456',\n\t\t\tpermissions: OC.PERMISSION_ALL\n\t\t})];\n\t\tpageSizeStub = sinon.stub(OCA.Files.FileList.prototype, 'pageSize').returns(20);\n\t\tfileList = new OCA.Files.FileList($('#app-content-files'), {\n\t\t\tfilesClient: filesClient\n\t\t});\n\t});\n\tafterEach(function() {\n\t\ttestFiles = undefined;\n\t\tif (fileList) {\n\t\t\tfileList.destroy();\n\t\t}\n\t\tfileList = undefined;\n\n\t\tnotificationStub.restore();\n\t\tbcResizeStub.restore();\n\t\tpageSizeStub.restore();\n\t\tredirectStub.restore();\n\t});\n\tdescribe('Getters', function() {\n\t\tit('Returns the current directory', function() {\n\t\t\t$('#dir').val('/one/two/three');\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/one/two/three');\n\t\t});\n\t\tit('Returns the directory permissions as int', function() {\n\t\t\t$('#permissions').val('23');\n\t\t\texpect(fileList.getDirectoryPermissions()).toEqual(23);\n\t\t});\n\t});\n\tdescribe('Adding files', function() {\n\t\tvar clock, now;\n\t\tbeforeEach(function() {\n\t\t\t// to prevent date comparison issues\n\t\t\tclock = sinon.useFakeTimers();\n\t\t\tnow = new Date();\n\t\t});\n\t\tafterEach(function() {\n\t\t\tclock.restore();\n\t\t});\n\t\tit('generates file element with correct attributes when calling add() with file data', function() {\n\t\t\tvar fileData = new FileInfo({\n\t\t\t\tid: 18,\n\t\t\t\tname: 'testName.txt',\n\t\t\t\tmimetype: 'text/plain',\n\t\t\t\tsize: 1234,\n\t\t\t\tetag: 'a01234c',\n\t\t\t\tmtime: 123456\n\t\t\t});\n\t\t\tvar $tr = fileList.add(fileData);\n\n\t\t\texpect($tr).toBeDefined();\n\t\t\texpect($tr[0].tagName.toLowerCase()).toEqual('tr');\n\t\t\texpect($tr.attr('data-id')).toEqual('18');\n\t\t\texpect($tr.attr('data-type')).toEqual('file');\n\t\t\texpect($tr.attr('data-file')).toEqual('testName.txt');\n\t\t\texpect($tr.attr('data-size')).toEqual('1234');\n\t\t\texpect($tr.attr('data-etag')).toEqual('a01234c');\n\t\t\texpect($tr.attr('data-permissions')).toEqual('31');\n\t\t\texpect($tr.attr('data-mime')).toEqual('text/plain');\n\t\t\texpect($tr.attr('data-mtime')).toEqual('123456');\n\t\t\texpect($tr.find('a.name').attr('href'))\n\t\t\t\t.toEqual(OC.webroot + '/remote.php/webdav/subdir/testName.txt');\n\t\t\texpect($tr.find('.nametext').text().trim()).toEqual('testName.txt');\n\n\t\t\texpect($tr.find('.filesize').text()).toEqual('1 KB');\n\t\t\texpect($tr.find('.date').text()).not.toEqual('?');\n\t\t\texpect(fileList.findFileEl('testName.txt')[0]).toEqual($tr[0]);\n\t\t});\n\t\tit('generates dir element with correct attributes when calling add() with dir data', function() {\n\t\t\tvar fileData = new FileInfo({\n\t\t\t\tid: 19,\n\t\t\t\tname: 'testFolder',\n\t\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\t\tsize: 1234,\n\t\t\t\tetag: 'a01234c',\n\t\t\t\tmtime: 123456\n\t\t\t});\n\t\t\tvar $tr = fileList.add(fileData);\n\n\t\t\texpect($tr).toBeDefined();\n\t\t\texpect($tr[0].tagName.toLowerCase()).toEqual('tr');\n\t\t\texpect($tr.attr('data-id')).toEqual('19');\n\t\t\texpect($tr.attr('data-type')).toEqual('dir');\n\t\t\texpect($tr.attr('data-file')).toEqual('testFolder');\n\t\t\texpect($tr.attr('data-size')).toEqual('1234');\n\t\t\texpect($tr.attr('data-etag')).toEqual('a01234c');\n\t\t\texpect($tr.attr('data-permissions')).toEqual('31');\n\t\t\texpect($tr.attr('data-mime')).toEqual('httpd/unix-directory');\n\t\t\texpect($tr.attr('data-mtime')).toEqual('123456');\n\n\t\t\texpect($tr.find('.filesize').text()).toEqual('1 KB');\n\t\t\texpect($tr.find('.date').text()).not.toEqual('?');\n\n\t\t\texpect(fileList.findFileEl('testFolder')[0]).toEqual($tr[0]);\n\t\t});\n\t\tit('generates file element with default attributes when calling add() with minimal data', function() {\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'testFile.txt'\n\t\t\t};\n\n\t\t\tclock.tick(123456);\n\t\t\tvar $tr = fileList.add(fileData);\n\n\t\t\texpect($tr).toBeDefined();\n\t\t\texpect($tr[0].tagName.toLowerCase()).toEqual('tr');\n\t\t\texpect($tr.attr('data-id')).toBeUndefined();\n\t\t\texpect($tr.attr('data-type')).toEqual('file');\n\t\t\texpect($tr.attr('data-file')).toEqual('testFile.txt');\n\t\t\texpect($tr.attr('data-size')).toBeUndefined();\n\t\t\texpect($tr.attr('data-etag')).toBeUndefined();\n\t\t\texpect($tr.attr('data-permissions')).toEqual('31');\n\t\t\texpect($tr.attr('data-mime')).toBeUndefined();\n\t\t\texpect($tr.attr('data-mtime')).toEqual('123456');\n\n\t\t\texpect($tr.find('.filesize').text()).toEqual('Pending');\n\t\t\texpect($tr.find('.date').text()).not.toEqual('?');\n\t\t});\n\t\tit('generates dir element with default attributes when calling add() with minimal data', function() {\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'dir',\n\t\t\t\tname: 'testFolder'\n\t\t\t};\n\t\t\tclock.tick(123456);\n\t\t\tvar $tr = fileList.add(fileData);\n\n\t\t\texpect($tr).toBeDefined();\n\t\t\texpect($tr[0].tagName.toLowerCase()).toEqual('tr');\n\t\t\texpect($tr.attr('data-id')).toBeUndefined();\n\t\t\texpect($tr.attr('data-type')).toEqual('dir');\n\t\t\texpect($tr.attr('data-file')).toEqual('testFolder');\n\t\t\texpect($tr.attr('data-size')).toBeUndefined();\n\t\t\texpect($tr.attr('data-etag')).toBeUndefined();\n\t\t\texpect($tr.attr('data-permissions')).toEqual('31');\n\t\t\texpect($tr.attr('data-mime')).toEqual('httpd/unix-directory');\n\t\t\texpect($tr.attr('data-mtime')).toEqual('123456');\n\n\t\t\texpect($tr.find('.filesize').text()).toEqual('Pending');\n\t\t\texpect($tr.find('.date').text()).not.toEqual('?');\n\t\t});\n\t\tit('generates file element with zero size when size is explicitly zero', function() {\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'dir',\n\t\t\t\tname: 'testFolder',\n\t\t\t\tsize: '0'\n\t\t\t};\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\texpect($tr.find('.filesize').text()).toEqual('0 KB');\n\t\t});\n\t\tit('generates file element with unknown date when mtime invalid', function() {\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'dir',\n\t\t\t\tname: 'testFolder',\n\t\t\t\tmtime: -1\n\t\t\t};\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\texpect($tr.find('.date .modified').text()).toEqual('?');\n\t\t});\n\t\tit('adds new file to the end of the list', function() {\n\t\t\tvar $tr;\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'ZZZ.txt'\n\t\t\t};\n\t\t\tfileList.setFiles(testFiles);\n\t\t\t$tr = fileList.add(fileData);\n\t\t\texpect($tr.index()).toEqual(4);\n\t\t});\n\t\tit('inserts files in a sorted manner when insert option is enabled', function() {\n\t\t\tfor (var i = 0; i < testFiles.length; i++) {\n\t\t\t\tfileList.add(testFiles[i]);\n\t\t\t}\n\t\t\texpect(fileList.files[0].name).toEqual('somedir');\n\t\t\texpect(fileList.files[1].name).toEqual('One.txt');\n\t\t\texpect(fileList.files[2].name).toEqual('Three.pdf');\n\t\t\texpect(fileList.files[3].name).toEqual('Two.jpg');\n\t\t});\n\t\tit('inserts new file at correct position', function() {\n\t\t\tvar $tr;\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'P comes after O.txt'\n\t\t\t};\n\t\t\tfor (var i = 0; i < testFiles.length; i++) {\n\t\t\t\tfileList.add(testFiles[i]);\n\t\t\t}\n\t\t\t$tr = fileList.add(fileData);\n\t\t\t// after \"One.txt\"\n\t\t\texpect($tr.index()).toEqual(2);\n\t\t\texpect(fileList.files[2]).toEqual(fileData);\n\t\t});\n\t\tit('inserts new folder at correct position in insert mode', function() {\n\t\t\tvar $tr;\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'dir',\n\t\t\t\tname: 'somedir2 comes after somedir'\n\t\t\t};\n\t\t\tfor (var i = 0; i < testFiles.length; i++) {\n\t\t\t\tfileList.add(testFiles[i]);\n\t\t\t}\n\t\t\t$tr = fileList.add(fileData);\n\t\t\texpect($tr.index()).toEqual(1);\n\t\t\texpect(fileList.files[1]).toEqual(fileData);\n\t\t});\n\t\tit('inserts new file at the end correctly', function() {\n\t\t\tvar $tr;\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'zzz.txt'\n\t\t\t};\n\t\t\tfor (var i = 0; i < testFiles.length; i++) {\n\t\t\t\tfileList.add(testFiles[i]);\n\t\t\t}\n\t\t\t$tr = fileList.add(fileData);\n\t\t\texpect($tr.index()).toEqual(4);\n\t\t\texpect(fileList.files[4]).toEqual(fileData);\n\t\t});\n\t\tit('removes empty content message and shows summary when adding first file', function() {\n\t\t\tvar $summary;\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'first file.txt',\n\t\t\t\tsize: 12\n\t\t\t};\n\t\t\tfileList.setFiles([]);\n\t\t\texpect(fileList.isEmpty).toEqual(true);\n\t\t\tfileList.add(fileData);\n\t\t\t$summary = $('#filestable .summary');\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\t// yes, ugly...\n\t\t\texpect($summary.find('.info').text()).toEqual('0 folders and 1 file');\n\t\t\texpect($summary.find('.dirinfo').hasClass('hidden')).toEqual(true);\n\t\t\texpect($summary.find('.fileinfo').hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.filesize').text()).toEqual('12 B');\n\t\t\texpect($('#filestable thead th').hasClass('hidden')).toEqual(false);\n\t\t\texpect($('#emptycontent').hasClass('hidden')).toEqual(true);\n\t\t\texpect(fileList.isEmpty).toEqual(false);\n\t\t});\n\t\tit('correctly adds the extension markup and show hidden files completely in gray', function() {\n\t\t\tvar $tr;\n\t\t\tvar testDataAndExpectedResult = [\n\t\t\t\t{file: {type: 'file', name: 'ZZZ.txt'}, extension: '.txt'},\n\t\t\t\t{file: {type: 'file', name: 'ZZZ.tar.gz'}, extension: '.gz'},\n\t\t\t\t{file: {type: 'file', name: 'test.with.some.dots.in.it.txt'}, extension: '.txt'},\n\t\t\t\t// we render hidden files completely in gray\n\t\t\t\t{file: {type: 'file', name: '.test.with.some.dots.in.it.txt'}, extension: '.test.with.some.dots.in.it.txt'},\n\t\t\t\t{file: {type: 'file', name: '.hidden'}, extension: '.hidden'},\n\t\t\t];\n\t\t\tfileList.setFiles(testFiles);\n\n\t\t\tfor(var i = 0; i < testDataAndExpectedResult.length; i++) {\n\t\t\t\tvar testSet = testDataAndExpectedResult[i];\n\t\t\t\tvar fileData = testSet['file'];\n\t\t\t\t$tr = fileList.add(fileData);\n\t\t\t\texpect($tr.find('.nametext .extension').text()).toEqual(testSet['extension']);\n\t\t\t}\n\t\t});\n\t});\n\tdescribe('Removing files from the list', function() {\n\t\tit('Removes file from list when calling remove() and updates summary', function() {\n\t\t\tvar $summary;\n\t\t\tvar $removedEl;\n\t\t\tfileList.setFiles(testFiles);\n\t\t\t$removedEl = fileList.remove('One.txt');\n\t\t\texpect($removedEl).toBeDefined();\n\t\t\texpect($removedEl.attr('data-file')).toEqual('One.txt');\n\t\t\texpect($('#fileList tr').length).toEqual(3);\n\t\t\texpect(fileList.files.length).toEqual(3);\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(0);\n\n\t\t\t$summary = $('#filestable .summary');\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.info').text()).toEqual('1 folder and 2 files');\n\t\t\texpect($summary.find('.dirinfo').hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.fileinfo').hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.filesize').text()).toEqual('69 KB');\n\t\t\texpect(fileList.isEmpty).toEqual(false);\n\t\t});\n\t\tit('Shows empty content when removing last file', function() {\n\t\t\tvar $summary;\n\t\t\tfileList.setFiles([testFiles[0]]);\n\t\t\tfileList.remove('One.txt');\n\t\t\texpect($('#fileList tr').length).toEqual(0);\n\t\t\texpect(fileList.files.length).toEqual(0);\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(0);\n\n\t\t\t$summary = $('#filestable .summary');\n\t\t\texpect($summary.hasClass('hidden')).toEqual(true);\n\t\t\texpect($('#filestable thead th').hasClass('hidden')).toEqual(true);\n\t\t\texpect($('#emptycontent').hasClass('hidden')).toEqual(false);\n\t\t\texpect(fileList.isEmpty).toEqual(true);\n\t\t});\n\t});\n\tdescribe('Deleting files', function() {\n\t\tvar deferredDelete;\n\t\tvar deleteStub;\n\n\t\tbeforeEach(function() {\n\t\t\tdeferredDelete = $.Deferred();\n\t\t\tdeleteStub = sinon.stub(filesClient, 'remove').returns(deferredDelete.promise());\n\t\t});\n\t\tafterEach(function() {\n\t\t\tdeleteStub.restore();\n\t\t});\n\n\t\tfunction doDelete() {\n\t\t\t// note: normally called from FileActions\n\t\t\tfileList.do_delete(['One.txt', 'Two.jpg']);\n\n\t\t\texpect(deleteStub.calledTwice).toEqual(true);\n\t\t\texpect(deleteStub.getCall(0).args[0]).toEqual('/subdir/One.txt');\n\t\t\texpect(deleteStub.getCall(1).args[0]).toEqual('/subdir/Two.jpg');\n\t\t}\n\t\tit('calls delete.php, removes the deleted entries and updates summary', function() {\n\t\t\tvar $summary;\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tdoDelete();\n\n\t\t\tdeferredDelete.resolve(200);\n\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(0);\n\t\t\texpect(fileList.findFileEl('Two.jpg').length).toEqual(0);\n\t\t\texpect(fileList.findFileEl('Three.pdf').length).toEqual(1);\n\t\t\texpect(fileList.$fileList.find('tr').length).toEqual(2);\n\n\t\t\t$summary = $('#filestable .summary');\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.info').text()).toEqual('1 folder and 1 file');\n\t\t\texpect($summary.find('.dirinfo').hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.fileinfo').hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.filesize').text()).toEqual('57 KB');\n\t\t\texpect(fileList.isEmpty).toEqual(false);\n\t\t\texpect($('#filestable thead th').hasClass('hidden')).toEqual(false);\n\t\t\texpect($('#emptycontent').hasClass('hidden')).toEqual(true);\n\n\t\t\texpect(notificationStub.notCalled).toEqual(true);\n\t\t});\n\t\tit('shows busy state on files to be deleted', function() {\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tdoDelete();\n\n\t\t\texpect(fileList.findFileEl('One.txt').hasClass('busy')).toEqual(true);\n\t\t\texpect(fileList.findFileEl('Three.pdf').hasClass('busy')).toEqual(false);\n\t\t});\n\t\tit('shows busy state on all files when deleting all', function() {\n\t\t\tfileList.setFiles(testFiles);\n\n\t\t\tfileList.do_delete();\n\n\t\t\texpect(fileList.$fileList.find('tr.busy').length).toEqual(4);\n\t\t});\n\t\tit('updates summary when deleting last file', function() {\n\t\t\tvar $summary;\n\t\t\tfileList.setFiles([testFiles[0], testFiles[1]]);\n\t\t\tdoDelete();\n\n\t\t\tdeferredDelete.resolve(200);\n\n\t\t\texpect(fileList.$fileList.find('tr').length).toEqual(0);\n\n\t\t\t$summary = $('#filestable .summary');\n\t\t\texpect($summary.hasClass('hidden')).toEqual(true);\n\t\t\texpect(fileList.isEmpty).toEqual(true);\n\t\t\texpect(fileList.files.length).toEqual(0);\n\t\t\texpect($('#filestable thead th').hasClass('hidden')).toEqual(true);\n\t\t\texpect($('#emptycontent').hasClass('hidden')).toEqual(false);\n\t\t});\n\t\tit('bring back deleted item when delete call failed', function() {\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tdoDelete();\n\n\t\t\tdeferredDelete.reject(403);\n\n\t\t\t// files are still in the list\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(1);\n\t\t\texpect(fileList.findFileEl('Two.jpg').length).toEqual(1);\n\t\t\texpect(fileList.$fileList.find('tr').length).toEqual(4);\n\n\t\t\texpect(notificationStub.calledTwice).toEqual(true);\n\t\t});\n\t\tit('remove file from list if delete call returned 404 not found', function() {\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tdoDelete();\n\n\t\t\tdeferredDelete.reject(404);\n\n\t\t\t// files are still in the list\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(0);\n\t\t\texpect(fileList.findFileEl('Two.jpg').length).toEqual(0);\n\t\t\texpect(fileList.$fileList.find('tr').length).toEqual(2);\n\n\t\t\texpect(notificationStub.notCalled).toEqual(true);\n\t\t});\n\t});\n\tdescribe('Renaming files', function() {\n\t\tvar deferredRename;\n\t\tvar renameStub;\n\n\t\tbeforeEach(function() {\n\t\t\tdeferredRename = $.Deferred();\n\t\t\trenameStub = sinon.stub(filesClient, 'move').returns(deferredRename.promise());\n\t\t});\n\t\tafterEach(function() {\n\t\t\trenameStub.restore();\n\t\t});\n\n\t\tfunction doCancelRename() {\n\t\t\tvar $input;\n\t\t\tfor (var i = 0; i < testFiles.length; i++) {\n\t\t\t\tfileList.add(testFiles[i]);\n\t\t\t}\n\n\t\t\t// trigger rename prompt\n\t\t\tfileList.rename('One.txt');\n\t\t\t$input = fileList.$fileList.find('input.filename');\n\t\t\t// keep same name\n\t\t\t$input.val('One.txt');\n\t\t\t// trigger submit because triggering blur doesn't work in all browsers\n\t\t\t$input.closest('form').trigger('submit');\n\n\t\t\texpect(renameStub.notCalled).toEqual(true);\n\t\t}\n\t\tfunction doRename() {\n\t\t\tvar $input;\n\n\t\t\tfor (var i = 0; i < testFiles.length; i++) {\n\t\t\t\tvar file = testFiles[i];\n\t\t\t\tfile.path = '/some/subdir';\n\t\t\t\tfileList.add(file, {silent: true});\n\t\t\t}\n\n\t\t\t// trigger rename prompt\n\t\t\tfileList.rename('One.txt');\n\t\t\t$input = fileList.$fileList.find('input.filename');\n\t\t\t$input.val('Tu_after_three.txt');\n\t\t\t// trigger submit because triggering blur doesn't work in all browsers\n\t\t\t$input.closest('form').trigger('submit');\n\n\t\t\texpect(renameStub.calledOnce).toEqual(true);\n\t\t\texpect(renameStub.getCall(0).args[0]).toEqual('/some/subdir/One.txt');\n\t\t\texpect(renameStub.getCall(0).args[1]).toEqual('/some/subdir/Tu_after_three.txt');\n\t\t}\n\t\tit('Inserts renamed file entry at correct position if rename ajax call suceeded', function() {\n\t\t\tdoRename();\n\n\t\t\tdeferredRename.resolve(201);\n\n\t\t\t// element stays renamed\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(0);\n\t\t\texpect(fileList.findFileEl('Tu_after_three.txt').length).toEqual(1);\n\t\t\texpect(fileList.findFileEl('Tu_after_three.txt').index()).toEqual(2); // after Two.jpg\n\n\t\t\texpect(notificationStub.notCalled).toEqual(true);\n\t\t});\n\t\tit('Reverts file entry if rename ajax call failed', function() {\n\t\t\tdoRename();\n\n\t\t\tdeferredRename.reject(403);\n\n\t\t\t// element was reverted\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(1);\n\t\t\texpect(fileList.findFileEl('One.txt').index()).toEqual(1); // after somedir\n\t\t\texpect(fileList.findFileEl('Tu_after_three.txt').length).toEqual(0);\n\n\t\t\texpect(notificationStub.calledOnce).toEqual(true);\n\t\t});\n\t\tit('Correctly updates file link after rename', function() {\n\t\t\tvar $tr;\n\t\t\tdoRename();\n\n\t\t\tdeferredRename.resolve(201);\n\n\t\t\t$tr = fileList.findFileEl('Tu_after_three.txt');\n\t\t\texpect($tr.find('a.name').attr('href'))\n\t\t\t\t.toEqual(OC.webroot + '/remote.php/webdav/some/subdir/Tu_after_three.txt');\n\t\t});\n\t\tit('Triggers \"fileActionsReady\" event after rename', function() {\n\t\t\tvar handler = sinon.stub();\n\t\t\tfileList.$fileList.on('fileActionsReady', handler);\n\t\t\tdoRename();\n\t\t\texpect(handler.notCalled).toEqual(true);\n\n\t\t\tdeferredRename.resolve(201);\n\n\t\t\texpect(handler.calledOnce).toEqual(true);\n\t\t\texpect(fileList.$fileList.find('.test').length).toEqual(0);\n\t\t});\n\t\tit('Leaves the summary alone when reinserting renamed element', function() {\n\t\t\tvar $summary = $('#filestable .summary');\n\t\t\tdoRename();\n\n\t\t\tdeferredRename.resolve(201);\n\n\t\t\texpect($summary.find('.info').text()).toEqual('1 folder and 3 files');\n\t\t});\n\t\tit('Leaves the summary alone when cancel renaming', function() {\n\t\t\tvar $summary = $('#filestable .summary');\n\t\t\tdoCancelRename();\n\t\t\texpect($summary.find('.info').text()).toEqual('1 folder and 3 files');\n\t\t});\n\t\tit('Shows busy state while rename in progress', function() {\n\t\t\tvar $tr;\n\t\t\tdoRename();\n\n\t\t\t// element is renamed before the request finishes\n\t\t\t$tr = fileList.findFileEl('Tu_after_three.txt');\n\t\t\texpect($tr.length).toEqual(1);\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(0);\n\t\t\t// file actions are hidden\n\t\t\texpect($tr.hasClass('busy')).toEqual(true);\n\n\t\t\t// input and form are gone\n\t\t\texpect(fileList.$fileList.find('input.filename').length).toEqual(0);\n\t\t\texpect(fileList.$fileList.find('form').length).toEqual(0);\n\t\t});\n\t\tit('Validates the file name', function() {\n\t\t\tvar $input, $tr;\n\n\t\t\tfor (var i = 0; i < testFiles.length; i++) {\n\t\t\t\tfileList.add(testFiles[i], {silent: true});\n\t\t\t}\n\n\t\t\t// trigger rename prompt\n\t\t\tfileList.rename('One.txt');\n\t\t\t$input = fileList.$fileList.find('input.filename');\n\t\t\t$input.val('Two.jpg');\n\n\t\t\t// simulate key to trigger validation\n\t\t\t$input.trigger(new $.Event('keyup', {keyCode: 97}));\n\n\t\t\t// input is still there with error\n\t\t\texpect(fileList.$fileList.find('input.filename').length).toEqual(1);\n\t\t\texpect(fileList.$fileList.find('input.filename').hasClass('error')).toEqual(true);\n\n\t\t\t// trigger submit does not send server request\n\t\t\t$input.closest('form').trigger('submit');\n\t\t\texpect(renameStub.notCalled).toEqual(true);\n\n\t\t\t// simulate escape key\n\t\t\t$input.trigger(new $.Event('keyup', {keyCode: 27}));\n\n\t\t\t// element is added back with the correct name\n\t\t\t$tr = fileList.findFileEl('One.txt');\n\t\t\texpect($tr.length).toEqual(1);\n\t\t\texpect($tr.find('a .nametext').text().trim()).toEqual('One.txt');\n\t\t\texpect($tr.find('a.name').is(':visible')).toEqual(true);\n\n\t\t\t$tr = fileList.findFileEl('Two.jpg');\n\t\t\texpect($tr.length).toEqual(1);\n\t\t\texpect($tr.find('a .nametext').text().trim()).toEqual('Two.jpg');\n\t\t\texpect($tr.find('a.name').is(':visible')).toEqual(true);\n\n\t\t\t// input and form are gone\n\t\t\texpect(fileList.$fileList.find('input.filename').length).toEqual(0);\n\t\t\texpect(fileList.$fileList.find('form').length).toEqual(0);\n\t\t});\n\t\tit('Restores thumbnail when rename was cancelled', function() {\n\t\t\tdoRename();\n\n\t\t\texpect(OC.TestUtil.getImageUrl(fileList.findFileEl('Tu_after_three.txt').find('.thumbnail')))\n\t\t\t\t.toEqual(OC.imagePath('core', 'loading.gif'));\n\n\t\t\tdeferredRename.reject(409);\n\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(1);\n\t\t\texpect(OC.TestUtil.getImageUrl(fileList.findFileEl('One.txt').find('.thumbnail')))\n\t\t\t\t.toEqual(OC.imagePath('core', 'filetypes/text.svg'));\n\t\t});\n\t});\n\tdescribe('Moving files', function() {\n\t\tvar deferredMove;\n\t\tvar moveStub;\n\n\t\tbeforeEach(function() {\n\t\t\tdeferredMove = $.Deferred();\n\t\t\tmoveStub = sinon.stub(filesClient, 'move').returns(deferredMove.promise());\n\n\t\t\tfileList.setFiles(testFiles);\n\t\t});\n\t\tafterEach(function() {\n\t\t\tmoveStub.restore();\n\t\t});\n\n\t\tit('Moves single file to target folder', function() {\n\t\t\tfileList.move('One.txt', '/somedir');\n\n\t\t\texpect(moveStub.calledOnce).toEqual(true);\n\t\t\texpect(moveStub.getCall(0).args[0]).toEqual('/subdir/One.txt');\n\t\t\texpect(moveStub.getCall(0).args[1]).toEqual('/somedir/One.txt');\n\n\t\t\tdeferredMove.resolve(201);\n\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(0);\n\n\t\t\t// folder size has increased\n\t\t\texpect(fileList.findFileEl('somedir').data('size')).toEqual(262);\n\t\t\texpect(fileList.findFileEl('somedir').find('.filesize').text()).toEqual('262 B');\n\n\t\t\texpect(notificationStub.notCalled).toEqual(true);\n\t\t});\n\t\tit('Moves list of files to target folder', function() {\n\t\t\tvar deferredMove1 = $.Deferred();\n\t\t\tvar deferredMove2 = $.Deferred();\n\t\t\tmoveStub.onCall(0).returns(deferredMove1.promise());\n\t\t\tmoveStub.onCall(1).returns(deferredMove2.promise());\n\n\t\t\tfileList.move(['One.txt', 'Two.jpg'], '/somedir');\n\n\t\t\texpect(moveStub.calledTwice).toEqual(true);\n\t\t\texpect(moveStub.getCall(0).args[0]).toEqual('/subdir/One.txt');\n\t\t\texpect(moveStub.getCall(0).args[1]).toEqual('/somedir/One.txt');\n\t\t\texpect(moveStub.getCall(1).args[0]).toEqual('/subdir/Two.jpg');\n\t\t\texpect(moveStub.getCall(1).args[1]).toEqual('/somedir/Two.jpg');\n\n\t\t\tdeferredMove1.resolve(201);\n\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(0);\n\n\t\t\t// folder size has increased during move\n\t\t\texpect(fileList.findFileEl('somedir').data('size')).toEqual(262);\n\t\t\texpect(fileList.findFileEl('somedir').find('.filesize').text()).toEqual('262 B');\n\n\t\t\tdeferredMove2.resolve(201);\n\n\t\t\texpect(fileList.findFileEl('Two.jpg').length).toEqual(0);\n\n\t\t\t// folder size has increased\n\t\t\texpect(fileList.findFileEl('somedir').data('size')).toEqual(12311);\n\t\t\texpect(fileList.findFileEl('somedir').find('.filesize').text()).toEqual('12 KB');\n\n\t\t\texpect(notificationStub.notCalled).toEqual(true);\n\t\t});\n\t\tit('Shows notification if a file could not be moved', function() {\n\t\t\tfileList.move('One.txt', '/somedir');\n\n\t\t\texpect(moveStub.calledOnce).toEqual(true);\n\n\t\t\tdeferredMove.reject(409);\n\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(1);\n\n\t\t\texpect(notificationStub.calledOnce).toEqual(true);\n\t\t\texpect(notificationStub.getCall(0).args[0]).toEqual('Could not move \"One.txt\"');\n\t\t});\n\t\tit('Restores thumbnail if a file could not be moved', function() {\n\t\t\tfileList.move('One.txt', '/somedir');\n\n\t\t\texpect(OC.TestUtil.getImageUrl(fileList.findFileEl('One.txt').find('.thumbnail')))\n\t\t\t\t.toEqual(OC.imagePath('core', 'loading.gif'));\n\n\t\t\texpect(moveStub.calledOnce).toEqual(true);\n\n\t\t\tdeferredMove.reject(409);\n\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(1);\n\n\t\t\texpect(notificationStub.calledOnce).toEqual(true);\n\t\t\texpect(notificationStub.getCall(0).args[0]).toEqual('Could not move \"One.txt\"');\n\n\t\t\texpect(OC.TestUtil.getImageUrl(fileList.findFileEl('One.txt').find('.thumbnail')))\n\t\t\t\t.toEqual(OC.imagePath('core', 'filetypes/text.svg'));\n\t\t});\n\t});\n\tdescribe('Update file', function() {\n\t\tit('does not change summary', function() {\n\t\t\tvar $summary = $('#filestable .summary');\n\t\t\tvar fileData = new FileInfo({\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'test file',\n\t\t\t});\n\t\t\tvar $tr = fileList.add(fileData);\n\n\t\t\texpect($summary.find('.info').text()).toEqual('0 folders and 1 file');\n\n\t\t\tvar model = fileList.getModelForFile('test file');\n\t\t\tmodel.set({size: '100'});\n\t\t\texpect($summary.find('.info').text()).toEqual('0 folders and 1 file');\n\t\t});\n\t})\n\tdescribe('List rendering', function() {\n\t\tit('renders a list of files using add()', function() {\n\t\t\texpect(fileList.files.length).toEqual(0);\n\t\t\texpect(fileList.files).toEqual([]);\n\t\t\tfileList.setFiles(testFiles);\n\t\t\texpect($('#fileList tr').length).toEqual(4);\n\t\t\texpect(fileList.files.length).toEqual(4);\n\t\t\texpect(fileList.files).toEqual(testFiles);\n\t\t});\n\t\tit('updates summary using the file sizes', function() {\n\t\t\tvar $summary;\n\t\t\tfileList.setFiles(testFiles);\n\t\t\t$summary = $('#filestable .summary');\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.info').text()).toEqual('1 folder and 3 files');\n\t\t\texpect($summary.find('.filesize').text()).toEqual('69 KB');\n\t\t});\n\t\tit('shows headers, summary and hide empty content message after setting files', function(){\n\t\t\tfileList.setFiles(testFiles);\n\t\t\texpect($('#filestable thead th').hasClass('hidden')).toEqual(false);\n\t\t\texpect($('#emptycontent').hasClass('hidden')).toEqual(true);\n\t\t\texpect(fileList.$el.find('.summary').hasClass('hidden')).toEqual(false);\n\t\t});\n\t\tit('hides headers, summary and show empty content message after setting empty file list', function(){\n\t\t\tfileList.setFiles([]);\n\t\t\texpect($('#filestable thead th').hasClass('hidden')).toEqual(true);\n\t\t\texpect($('#emptycontent').hasClass('hidden')).toEqual(false);\n\t\t\texpect($('#emptycontent .uploadmessage').hasClass('hidden')).toEqual(false);\n\t\t\texpect(fileList.$el.find('.summary').hasClass('hidden')).toEqual(true);\n\t\t});\n\t\tit('hides headers, upload message, and summary when list is empty and user has no creation permission', function(){\n\t\t\t$('#permissions').val(0);\n\t\t\tfileList.setFiles([]);\n\t\t\texpect($('#filestable thead th').hasClass('hidden')).toEqual(true);\n\t\t\texpect($('#emptycontent').hasClass('hidden')).toEqual(false);\n\t\t\texpect($('#emptycontent .uploadmessage').hasClass('hidden')).toEqual(true);\n\t\t\texpect(fileList.$el.find('.summary').hasClass('hidden')).toEqual(true);\n\t\t});\n\t\tit('calling findFileEl() can find existing file element', function() {\n\t\t\tfileList.setFiles(testFiles);\n\t\t\texpect(fileList.findFileEl('Two.jpg').length).toEqual(1);\n\t\t});\n\t\tit('calling findFileEl() returns empty when file not found in file', function() {\n\t\t\tfileList.setFiles(testFiles);\n\t\t\texpect(fileList.findFileEl('unexist.dat').length).toEqual(0);\n\t\t});\n\t\tit('only add file if in same current directory', function() {\n\t\t\t$('#dir').val('/current dir');\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'testFile.txt',\n\t\t\t\tdirectory: '/current dir'\n\t\t\t};\n\t\t\tfileList.add(fileData);\n\t\t\texpect(fileList.findFileEl('testFile.txt').length).toEqual(1);\n\t\t});\n\t\tit('triggers \"fileActionsReady\" event after update', function() {\n\t\t\tvar handler = sinon.stub();\n\t\t\tfileList.$fileList.on('fileActionsReady', handler);\n\t\t\tfileList.setFiles(testFiles);\n\t\t\texpect(handler.calledOnce).toEqual(true);\n\t\t\texpect(handler.getCall(0).args[0].$files.length).toEqual(testFiles.length);\n\t\t});\n\t\tit('triggers \"fileActionsReady\" event after single add', function() {\n\t\t\tvar handler = sinon.stub();\n\t\t\tvar $tr;\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tfileList.$fileList.on('fileActionsReady', handler);\n\t\t\t$tr = fileList.add({name: 'test.txt'});\n\t\t\texpect(handler.calledOnce).toEqual(true);\n\t\t\texpect(handler.getCall(0).args[0].$files.is($tr)).toEqual(true);\n\t\t});\n\t\tit('triggers \"fileActionsReady\" event after next page load with the newly appended files', function() {\n\t\t\tvar handler = sinon.stub();\n\t\t\tfileList.setFiles(generateFiles(0, 64));\n\t\t\tfileList.$fileList.on('fileActionsReady', handler);\n\t\t\tfileList._nextPage();\n\t\t\texpect(handler.calledOnce).toEqual(true);\n\t\t\texpect(handler.getCall(0).args[0].$files.length).toEqual(fileList.pageSize());\n\t\t});\n\t\tit('does not trigger \"fileActionsReady\" event after single add with silent argument', function() {\n\t\t\tvar handler = sinon.stub();\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tfileList.$fileList.on('fileActionsReady', handler);\n\t\t\tfileList.add({name: 'test.txt'}, {silent: true});\n\t\t\texpect(handler.notCalled).toEqual(true);\n\t\t});\n\t\tit('triggers \"updated\" event after update', function() {\n\t\t\tvar handler = sinon.stub();\n\t\t\tfileList.$fileList.on('updated', handler);\n\t\t\tfileList.setFiles(testFiles);\n\t\t\texpect(handler.calledOnce).toEqual(true);\n\t\t});\n\t\tit('does not update summary when removing non-existing files', function() {\n\t\t\tvar $summary;\n\t\t\t// single file\n\t\t\tfileList.setFiles([testFiles[0]]);\n\t\t\t$summary = $('#filestable .summary');\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.info').text()).toEqual('0 folders and 1 file');\n\t\t\tfileList.remove('unexist.txt');\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.info').text()).toEqual('0 folders and 1 file');\n\t\t});\n\t});\n\tdescribe('Filtered list rendering', function() {\n\t\tit('filters the list of files using filter()', function() {\n\t\t\texpect(fileList.files.length).toEqual(0);\n\t\t\texpect(fileList.files).toEqual([]);\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tvar $summary = $('#filestable .summary');\n\t\t\tvar $nofilterresults = fileList.$el.find(\".nofilterresults\");\n\t\t\texpect($nofilterresults.length).toEqual(1);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\n\t\t\texpect($('#fileList tr:not(.hidden)').length).toEqual(4);\n\t\t\texpect(fileList.files.length).toEqual(4);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(true);\n\n\t\t\tfileList.setFilter('e');\n\t\t\texpect($('#fileList tr:not(.hidden)').length).toEqual(3);\n\t\t\texpect(fileList.files.length).toEqual(4);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.info').text()).toEqual(\"1 folder and 2 files match 'e'\");\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(true);\n\n\t\t\tfileList.setFilter('ee');\n\t\t\texpect($('#fileList tr:not(.hidden)').length).toEqual(1);\n\t\t\texpect(fileList.files.length).toEqual(4);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.info').text()).toEqual(\"0 folders and 1 file matches 'ee'\");\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(true);\n\n\t\t\tfileList.setFilter('eee');\n\t\t\texpect($('#fileList tr:not(.hidden)').length).toEqual(0);\n\t\t\texpect(fileList.files.length).toEqual(4);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(true);\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(false);\n\n\t\t\tfileList.setFilter('ee');\n\t\t\texpect($('#fileList tr:not(.hidden)').length).toEqual(1);\n\t\t\texpect(fileList.files.length).toEqual(4);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.info').text()).toEqual(\"0 folders and 1 file matches 'ee'\");\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(true);\n\n\t\t\tfileList.setFilter('e');\n\t\t\texpect($('#fileList tr:not(.hidden)').length).toEqual(3);\n\t\t\texpect(fileList.files.length).toEqual(4);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.info').text()).toEqual(\"1 folder and 2 files match 'e'\");\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(true);\n\n\t\t\tfileList.setFilter('');\n\t\t\texpect($('#fileList tr:not(.hidden)').length).toEqual(4);\n\t\t\texpect(fileList.files.length).toEqual(4);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(false);\n\t\t\texpect($summary.find('.info').text()).toEqual(\"1 folder and 3 files\");\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(true);\n\t\t});\n\t\tit('hides the emptyfiles notice when using filter()', function() {\n\t\t\texpect(fileList.files.length).toEqual(0);\n\t\t\texpect(fileList.files).toEqual([]);\n\t\t\tfileList.setFiles([]);\n\t\t\tvar $summary = $('#filestable .summary');\n\t\t\tvar $emptycontent = fileList.$el.find(\"#emptycontent\");\n\t\t\tvar $nofilterresults = fileList.$el.find(\".nofilterresults\");\n\t\t\texpect($emptycontent.length).toEqual(1);\n\t\t\texpect($nofilterresults.length).toEqual(1);\n\n\t\t\texpect($('#fileList tr:not(.hidden)').length).toEqual(0);\n\t\t\texpect(fileList.files.length).toEqual(0);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(true);\n\t\t\texpect($emptycontent.hasClass('hidden')).toEqual(false);\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(true);\n\n\t\t\tfileList.setFilter('e');\n\t\t\texpect($('#fileList tr:not(.hidden)').length).toEqual(0);\n\t\t\texpect(fileList.files.length).toEqual(0);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(true);\n\t\t\texpect($emptycontent.hasClass('hidden')).toEqual(true);\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(false);\n\n\t\t\tfileList.setFilter('');\n\t\t\texpect($('#fileList tr:not(.hidden)').length).toEqual(0);\n\t\t\texpect(fileList.files.length).toEqual(0);\n\t\t\texpect($summary.hasClass('hidden')).toEqual(true);\n\t\t\texpect($emptycontent.hasClass('hidden')).toEqual(false);\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(true);\n\t\t});\n\t\tit('does not show the emptyfiles or nofilterresults notice when the mask is active', function() {\n\t\t\texpect(fileList.files.length).toEqual(0);\n\t\t\texpect(fileList.files).toEqual([]);\n\t\t\tfileList.showMask();\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tvar $emptycontent = fileList.$el.find(\"#emptycontent\");\n\t\t\tvar $nofilterresults = fileList.$el.find(\".nofilterresults\");\n\t\t\texpect($emptycontent.length).toEqual(1);\n\t\t\texpect($nofilterresults.length).toEqual(1);\n\n\t\t\texpect($emptycontent.hasClass('hidden')).toEqual(true);\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(true);\n\n\t\t\t/*\n\t\t\tfileList.setFilter('e');\n\t\t\texpect($emptycontent.hasClass('hidden')).toEqual(true);\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(false);\n\t\t\t*/\n\n\t\t\tfileList.setFilter('');\n\t\t\texpect($emptycontent.hasClass('hidden')).toEqual(true);\n\t\t\texpect($nofilterresults.hasClass('hidden')).toEqual(true);\n\t\t});\n\t});\n\tdescribe('Rendering next page on scroll', function() {\n\t\tbeforeEach(function() {\n\t\t\tfileList.setFiles(generateFiles(0, 64));\n\t\t});\n\t\tit('renders only the first page', function() {\n\t\t\texpect(fileList.files.length).toEqual(65);\n\t\t\texpect($('#fileList tr').length).toEqual(20);\n\t\t});\n\t\tit('renders the second page when scrolling down (trigger nextPage)', function() {\n\t\t\t// TODO: can't simulate scrolling here, so calling nextPage directly\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(40);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(60);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(65);\n\t\t\tfileList._nextPage(true);\n\t\t\t// stays at 65\n\t\t\texpect($('#fileList tr').length).toEqual(65);\n\t\t});\n\t\tit('inserts into the DOM if insertion point is in the visible page ', function() {\n\t\t\tfileList.add({\n\t\t\t\tid: 2000,\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'File with index 15b.txt'\n\t\t\t});\n\t\t\texpect($('#fileList tr').length).toEqual(21);\n\t\t\texpect(fileList.findFileEl('File with index 15b.txt').index()).toEqual(16);\n\t\t});\n\t\tit('does not inserts into the DOM if insertion point is not the visible page ', function() {\n\t\t\tfileList.add({\n\t\t\t\tid: 2000,\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'File with index 28b.txt'\n\t\t\t});\n\t\t\texpect($('#fileList tr').length).toEqual(20);\n\t\t\texpect(fileList.findFileEl('File with index 28b.txt').length).toEqual(0);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(40);\n\t\t\texpect(fileList.findFileEl('File with index 28b.txt').index()).toEqual(29);\n\t\t});\n\t\tit('appends into the DOM when inserting a file after the last visible element', function() {\n\t\t\tfileList.add({\n\t\t\t\tid: 2000,\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'File with index 19b.txt'\n\t\t\t});\n\t\t\texpect($('#fileList tr').length).toEqual(21);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(41);\n\t\t});\n\t\tit('appends into the DOM when inserting a file on the last page when visible', function() {\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(40);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(60);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(65);\n\t\t\tfileList._nextPage(true);\n\t\t\tfileList.add({\n\t\t\t\tid: 2000,\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'File with index 88.txt'\n\t\t\t});\n\t\t\texpect($('#fileList tr').length).toEqual(66);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(66);\n\t\t});\n\t\tit('shows additional page when appending a page of files and scrolling down', function() {\n\t\t\tvar newFiles = generateFiles(66, 81);\n\t\t\tfor (var i = 0; i < newFiles.length; i++) {\n\t\t\t\tfileList.add(newFiles[i]);\n\t\t\t}\n\t\t\texpect($('#fileList tr').length).toEqual(20);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(40);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(60);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(80);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(81);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect($('#fileList tr').length).toEqual(81);\n\t\t});\n\t\tit('automatically renders next page when there are not enough elements visible', function() {\n\t\t\t// delete the 15 first elements\n\t\t\tfor (var i = 0; i < 15; i++) {\n\t\t\t\tfileList.remove(fileList.files[0].name);\n\t\t\t}\n\t\t\t// still makes sure that there are 20 elements visible, if any\n\t\t\texpect($('#fileList tr').length).toEqual(25);\n\t\t});\n\t});\n\tdescribe('file previews', function() {\n\t\tvar previewLoadStub;\n\n\t\tbeforeEach(function() {\n\t\t\tpreviewLoadStub = sinon.stub(OCA.Files.FileList.prototype, 'lazyLoadPreview');\n\t\t});\n\t\tafterEach(function() {\n\t\t\tpreviewLoadStub.restore();\n\t\t});\n\t\tit('renders default file icon when none provided and no mime type is set', function() {\n\t\t\tvar fileData = {\n\t\t\t\tname: 'testFile.txt'\n\t\t\t};\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\tvar $imgDiv = $tr.find('td.filename .thumbnail');\n\t\t\texpect(OC.TestUtil.getImageUrl($imgDiv)).toEqual(OC.webroot + '/core/img/filetypes/file.svg');\n\t\t\t// tries to load preview\n\t\t\texpect(previewLoadStub.calledOnce).toEqual(true);\n\t\t});\n\t\tit('renders default icon for folder when none provided', function() {\n\t\t\tvar fileData = {\n\t\t\t\tname: 'test dir',\n\t\t\t\tmimetype: 'httpd/unix-directory'\n\t\t\t};\n\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\tvar $imgDiv = $tr.find('td.filename .thumbnail');\n\t\t\texpect(OC.TestUtil.getImageUrl($imgDiv)).toEqual(OC.webroot + '/core/img/filetypes/folder.svg');\n\t\t\t// no preview since it's a directory\n\t\t\texpect(previewLoadStub.notCalled).toEqual(true);\n\t\t});\n\t\tit('renders provided icon for file when provided', function() {\n\t\t\tvar fileData = new FileInfo({\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'test file',\n\t\t\t\ticon: OC.webroot + '/core/img/filetypes/application-pdf.svg',\n\t\t\t\tmimetype: 'application/pdf'\n\t\t\t});\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\tvar $imgDiv = $tr.find('td.filename .thumbnail');\n\t\t\texpect(OC.TestUtil.getImageUrl($imgDiv)).toEqual(OC.webroot + '/core/img/filetypes/application-pdf.svg');\n\t\t\t// try loading preview\n\t\t\texpect(previewLoadStub.calledOnce).toEqual(true);\n\t\t});\n\t\tit('renders provided icon for file when provided', function() {\n\t\t\tvar fileData = new FileInfo({\n\t\t\t\tname: 'somefile.pdf',\n\t\t\t\ticon: OC.webroot + '/core/img/filetypes/application-pdf.svg'\n\t\t\t});\n\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\tvar $imgDiv = $tr.find('td.filename .thumbnail');\n\t\t\texpect(OC.TestUtil.getImageUrl($imgDiv)).toEqual(OC.webroot + '/core/img/filetypes/application-pdf.svg');\n\t\t\t// try loading preview\n\t\t\texpect(previewLoadStub.calledOnce).toEqual(true);\n\t\t});\n\t\tit('renders provided icon for folder when provided', function() {\n\t\t\tvar fileData = new FileInfo({\n\t\t\t\tname: 'some folder',\n\t\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\t\ticon: OC.webroot + '/core/img/filetypes/folder-alt.svg'\n\t\t\t});\n\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\tvar $imgDiv = $tr.find('td.filename .thumbnail');\n\t\t\texpect(OC.TestUtil.getImageUrl($imgDiv)).toEqual(OC.webroot + '/core/img/filetypes/folder-alt.svg');\n\t\t\t// do not load preview for folders\n\t\t\texpect(previewLoadStub.notCalled).toEqual(true);\n\t\t});\n\t\tit('renders preview when no icon was provided', function() {\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'file',\n\t\t\t\tname: 'test file'\n\t\t\t};\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\tvar $td = $tr.find('td.filename');\n\t\t\texpect(OC.TestUtil.getImageUrl($td.find('.thumbnail')))\n\t\t\t\t.toEqual(OC.webroot + '/core/img/filetypes/file.svg');\n\t\t\texpect(previewLoadStub.calledOnce).toEqual(true);\n\t\t\t// third argument is callback\n\t\t\tpreviewLoadStub.getCall(0).args[0].callback(OC.webroot + '/somepath.png');\n\t\t\texpect(OC.TestUtil.getImageUrl($td.find('.thumbnail'))).toEqual(OC.webroot + '/somepath.png');\n\t\t});\n\t\tit('does not render preview for directories', function() {\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'dir',\n\t\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\t\tname: 'test dir'\n\t\t\t};\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\tvar $td = $tr.find('td.filename');\n\t\t\texpect(OC.TestUtil.getImageUrl($td.find('.thumbnail'))).toEqual(OC.webroot + '/core/img/filetypes/folder.svg');\n\t\t\texpect(previewLoadStub.notCalled).toEqual(true);\n\t\t});\n\t\tit('render external storage icon for external storage root', function() {\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'dir',\n\t\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\t\tname: 'test dir',\n\t\t\t\tmountType: 'external-root'\n\t\t\t};\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\tvar $td = $tr.find('td.filename');\n\t\t\texpect(OC.TestUtil.getImageUrl($td.find('.thumbnail'))).toEqual(OC.webroot + '/core/img/filetypes/folder-external.svg');\n\t\t\texpect(previewLoadStub.notCalled).toEqual(true);\n\t\t});\n\t\tit('render external storage icon for external storage subdir', function() {\n\t\t\tvar fileData = {\n\t\t\t\ttype: 'dir',\n\t\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\t\tname: 'test dir',\n\t\t\t\tmountType: 'external'\n\t\t\t};\n\t\t\tvar $tr = fileList.add(fileData);\n\t\t\tvar $td = $tr.find('td.filename');\n\t\t\texpect(OC.TestUtil.getImageUrl($td.find('.thumbnail'))).toEqual(OC.webroot + '/core/img/filetypes/folder-external.svg');\n\t\t\texpect(previewLoadStub.notCalled).toEqual(true);\n\t\t\t// default icon override\n\t\t\texpect($tr.attr('data-icon')).toEqual(OC.webroot + '/core/img/filetypes/folder-external.svg');\n\t\t});\n\n\t});\n\tdescribe('viewer mode', function() {\n\t\tit('enabling viewer mode hides files table and action buttons', function() {\n\t\t\tfileList.setViewerMode(true);\n\t\t\texpect($('#filestable').hasClass('hidden')).toEqual(true);\n\t\t\texpect($('.actions').hasClass('hidden')).toEqual(true);\n\t\t\texpect($('.notCreatable').hasClass('hidden')).toEqual(true);\n\t\t});\n\t\tit('disabling viewer mode restores files table and action buttons', function() {\n\t\t\tfileList.setViewerMode(true);\n\t\t\tfileList.setViewerMode(false);\n\t\t\texpect($('#filestable').hasClass('hidden')).toEqual(false);\n\t\t\texpect($('.actions').hasClass('hidden')).toEqual(false);\n\t\t\texpect($('.notCreatable').hasClass('hidden')).toEqual(true);\n\t\t});\n\t\tit('disabling viewer mode restores files table and action buttons with correct permissions', function() {\n\t\t\t$('#permissions').val(0);\n\t\t\tfileList.setViewerMode(true);\n\t\t\tfileList.setViewerMode(false);\n\t\t\texpect($('#filestable').hasClass('hidden')).toEqual(false);\n\t\t\texpect($('.actions').hasClass('hidden')).toEqual(true);\n\t\t\texpect($('.notCreatable').hasClass('hidden')).toEqual(false);\n\t\t});\n\t\tit('toggling viewer mode triggers event', function() {\n\t\t\tvar handler = sinon.stub();\n\t\t\tfileList.$el.on('changeViewerMode', handler);\n\t\t\tfileList.setViewerMode(true);\n\t\t\texpect(handler.calledOnce).toEqual(true);\n\t\t\texpect(handler.getCall(0).args[0].viewerModeEnabled).toEqual(true);\n\n\t\t\thandler.reset();\n\t\t\tfileList.setViewerMode(false);\n\t\t\texpect(handler.calledOnce).toEqual(true);\n\t\t\texpect(handler.getCall(0).args[0].viewerModeEnabled).toEqual(false);\n\t\t});\n\t});\n\tdescribe('loading file list', function() {\n\t\tvar deferredList;\n\t\tvar getFolderContentsStub;\n\n\t\tbeforeEach(function() {\n\t\t\tdeferredList = $.Deferred();\n\t\t\tgetFolderContentsStub = sinon.stub(filesClient, 'getFolderContents').returns(deferredList.promise());\n\t\t});\n\t\tafterEach(function() {\n\t\t\tgetFolderContentsStub.restore();\n\t\t});\n\t\tit('fetches file list from server and renders it when reload() is called', function() {\n\t\t\tfileList.reload();\n\t\t\texpect(getFolderContentsStub.calledOnce).toEqual(true);\n\t\t\texpect(getFolderContentsStub.calledWith('/subdir')).toEqual(true);\n\t\t\tdeferredList.resolve(200, [testRoot].concat(testFiles));\n\t\t\texpect($('#fileList tr').length).toEqual(4);\n\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(1);\n\t\t});\n\t\tit('switches dir and fetches file list when calling changeDirectory()', function() {\n\t\t\tfileList.changeDirectory('/anothersubdir');\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/anothersubdir');\n\t\t\texpect(getFolderContentsStub.calledOnce).toEqual(true);\n\t\t\texpect(getFolderContentsStub.calledWith('/anothersubdir')).toEqual(true);\n\t\t});\n\t\tit('converts backslashes to slashes when calling changeDirectory()', function() {\n\t\t\tfileList.changeDirectory('/another\\\\subdir');\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/another/subdir');\n\t\t});\n\t\tit('converts backslashes to slashes and removes traversals when calling changeDirectory()', function() {\n\t\t\tfileList.changeDirectory('/another\\\\subdir/../foo\\\\../bar\\\\..\\\\file/..\\\\folder/../');\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/another/subdir/foo/bar/file/folder/');\n\t\t});\n\t\tit('switches to root dir when current directory does not exist', function() {\n\t\t\tfileList.changeDirectory('/unexist');\n\t\t\tdeferredList.reject(404);\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/');\n\t\t});\n\t\tit('switches to root dir when current directory is forbidden', function() {\n\t\t\tfileList.changeDirectory('/unexist');\n\t\t\tdeferredList.reject(403);\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/');\n\t\t});\n\t\tit('switches to root dir when current directory is unavailable', function() {\n\t\t\tfileList.changeDirectory('/unexist');\n\t\t\tdeferredList.reject(500);\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/');\n\t\t});\n\t\tit('shows mask before loading file list then hides it at the end', function() {\n\t\t\tvar showMaskStub = sinon.stub(fileList, 'showMask');\n\t\t\tvar hideMaskStub = sinon.stub(fileList, 'hideMask');\n\t\t\tfileList.changeDirectory('/anothersubdir');\n\t\t\texpect(showMaskStub.calledOnce).toEqual(true);\n\t\t\texpect(hideMaskStub.calledOnce).toEqual(false);\n\t\t\tdeferredList.resolve(200, [testRoot].concat(testFiles));\n\t\t\texpect(showMaskStub.calledOnce).toEqual(true);\n\t\t\texpect(hideMaskStub.calledOnce).toEqual(true);\n\t\t\tshowMaskStub.restore();\n\t\t\thideMaskStub.restore();\n\t\t});\n\t\tit('triggers \"changeDirectory\" event when changing directory', function() {\n\t\t\tvar handler = sinon.stub();\n\t\t\t$('#app-content-files').on('changeDirectory', handler);\n\t\t\tfileList.changeDirectory('/somedir');\n\t\t\tdeferredList.resolve(200, [testRoot].concat(testFiles));\n\t\t\texpect(handler.calledOnce).toEqual(true);\n\t\t\texpect(handler.getCall(0).args[0].dir).toEqual('/somedir');\n\t\t});\n\t\tit('changes the directory when receiving \"urlChanged\" event', function() {\n\t\t\t$('#app-content-files').trigger(new $.Event('urlChanged', {view: 'files', dir: '/somedir'}));\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/somedir');\n\t\t});\n\t\tit('refreshes breadcrumb after update', function() {\n\t\t\tvar setDirSpy = sinon.spy(fileList.breadcrumb, 'setDirectory');\n\t\t\tfileList.changeDirectory('/anothersubdir');\n\t\t\tdeferredList.resolve(200, [testRoot].concat(testFiles));\n\t\t\texpect(fileList.breadcrumb.setDirectory.calledOnce).toEqual(true);\n\t\t\texpect(fileList.breadcrumb.setDirectory.calledWith('/anothersubdir')).toEqual(true);\n\t\t\tsetDirSpy.restore();\n\t\t\tgetFolderContentsStub.restore();\n\t\t});\n\t});\n\tdescribe('breadcrumb events', function() {\n\t\tvar deferredList;\n\t\tvar getFolderContentsStub;\n\n\t\tbeforeEach(function() {\n\t\t\tdeferredList = $.Deferred();\n\t\t\tgetFolderContentsStub = sinon.stub(filesClient, 'getFolderContents').returns(deferredList.promise());\n\t\t});\n\t\tafterEach(function() {\n\t\t\tgetFolderContentsStub.restore();\n\t\t});\n\t\tit('clicking on root breadcrumb changes directory to root', function() {\n\t\t\tfileList.changeDirectory('/subdir/two/three with space/four/five');\n\t\t\tdeferredList.resolve(200, [testRoot].concat(testFiles));\n\t\t\tvar changeDirStub = sinon.stub(fileList, 'changeDirectory');\n\t\t\tfileList.breadcrumb.$el.find('.crumb:eq(0)').trigger({type: 'click', which: 1});\n\n\t\t\texpect(changeDirStub.calledOnce).toEqual(true);\n\t\t\texpect(changeDirStub.getCall(0).args[0]).toEqual('/');\n\t\t\tchangeDirStub.restore();\n\t\t});\n\t\tit('clicking on breadcrumb changes directory', function() {\n\t\t\tfileList.changeDirectory('/subdir/two/three with space/four/five');\n\t\t\tdeferredList.resolve(200, [testRoot].concat(testFiles));\n\t\t\tvar changeDirStub = sinon.stub(fileList, 'changeDirectory');\n\t\t\tfileList.breadcrumb.$el.find('.crumb:eq(3)').trigger({type: 'click', which: 1});\n\n\t\t\texpect(changeDirStub.calledOnce).toEqual(true);\n\t\t\texpect(changeDirStub.getCall(0).args[0]).toEqual('/subdir/two/three with space');\n\t\t\tchangeDirStub.restore();\n\t\t});\n\t\tit('dropping files on breadcrumb calls move operation', function() {\n\t\t\tvar testDir = '/subdir/two/three with space/four/five';\n\t\t\tvar moveStub = sinon.stub(filesClient, 'move').returns($.Deferred().promise());\n\t\t\tfileList.changeDirectory(testDir);\n\t\t\tdeferredList.resolve(200, [testRoot].concat(testFiles));\n\t\t\tvar $crumb = fileList.breadcrumb.$el.find('.crumb:eq(3)');\n\t\t\t// no idea what this is but is required by the handler\n\t\t\tvar ui = {\n\t\t\t\thelper: {\n\t\t\t\t\tfind: sinon.stub()\n\t\t\t\t}\n\t\t\t};\n\t\t\t// returns a list of tr that were dragged\n\t\t\tui.helper.find.returns([\n\t\t\t\t$('<tr data-file=\"One.txt\" data-dir=\"' + testDir + '\"></tr>'),\n\t\t\t\t$('<tr data-file=\"Two.jpg\" data-dir=\"' + testDir + '\"></tr>')\n\t\t\t]);\n\t\t\t// simulate drop event\n\t\t\tfileList._onDropOnBreadCrumb(new $.Event('drop', {target: $crumb}), ui);\n\n\t\t\texpect(moveStub.callCount).toEqual(2);\n\t\t\texpect(moveStub.getCall(0).args[0]).toEqual(testDir + '/One.txt');\n\t\t\texpect(moveStub.getCall(0).args[1]).toEqual('/subdir/two/three with space/One.txt');\n\t\t\texpect(moveStub.getCall(1).args[0]).toEqual(testDir + '/Two.jpg');\n\t\t\texpect(moveStub.getCall(1).args[1]).toEqual('/subdir/two/three with space/Two.jpg');\n\t\t\tmoveStub.restore();\n\t\t});\n\t\tit('dropping files on same dir breadcrumb does nothing', function() {\n\t\t\tvar testDir = '/subdir/two/three with space/four/five';\n\t\t\tvar moveStub = sinon.stub(filesClient, 'move').returns($.Deferred().promise());\n\t\t\tfileList.changeDirectory(testDir);\n\t\t\tdeferredList.resolve(200, [testRoot].concat(testFiles));\n\t\t\tvar $crumb = fileList.breadcrumb.$el.find('.crumb:last');\n\t\t\t// no idea what this is but is required by the handler\n\t\t\tvar ui = {\n\t\t\t\thelper: {\n\t\t\t\t\tfind: sinon.stub()\n\t\t\t\t}\n\t\t\t};\n\t\t\t// returns a list of tr that were dragged\n\t\t\tui.helper.find.returns([\n\t\t\t\t$('<tr data-file=\"One.txt\" data-dir=\"' + testDir + '\"></tr>'),\n\t\t\t\t$('<tr data-file=\"Two.jpg\" data-dir=\"' + testDir + '\"></tr>')\n\t\t\t]);\n\t\t\t// simulate drop event\n\t\t\tfileList._onDropOnBreadCrumb(new $.Event('drop', {target: $crumb}), ui);\n\n\t\t\t// no extra server request\n\t\t\texpect(moveStub.notCalled).toEqual(true);\n\t\t});\n\t});\n\tdescribe('Download Url', function() {\n\t\tit('returns correct download URL for single files', function() {\n\t\t\texpect(fileList.getDownloadUrl('some file.txt'))\n\t\t\t\t.toEqual(OC.webroot + '/remote.php/webdav/subdir/some%20file.txt');\n\t\t\texpect(fileList.getDownloadUrl('some file.txt', '/anotherpath/abc'))\n\t\t\t\t.toEqual(OC.webroot + '/remote.php/webdav/anotherpath/abc/some%20file.txt');\n\t\t\t$('#dir').val('/');\n\t\t\texpect(fileList.getDownloadUrl('some file.txt'))\n\t\t\t\t.toEqual(OC.webroot + '/remote.php/webdav/some%20file.txt');\n\t\t});\n\t\tit('returns correct download URL for multiple files', function() {\n\t\t\texpect(fileList.getDownloadUrl(['a b c.txt', 'd e f.txt']))\n\t\t\t\t.toEqual(OC.webroot + '/index.php/apps/files/ajax/download.php?dir=%2Fsubdir&files=%5B%22a%20b%20c.txt%22%2C%22d%20e%20f.txt%22%5D');\n\t\t});\n\t\tit('returns the correct ajax URL', function() {\n\t\t\texpect(fileList.getAjaxUrl('test', {a:1, b:'x y'}))\n\t\t\t\t.toEqual(OC.webroot + '/index.php/apps/files/ajax/test.php?a=1&b=x%20y');\n\t\t});\n\t});\n\tdescribe('File selection', function() {\n\t\tbeforeEach(function() {\n\t\t\tfileList.setFiles(testFiles);\n\t\t});\n\t\tit('Selects a file when clicking its checkbox', function() {\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\texpect($tr.find('input:checkbox').prop('checked')).toEqual(false);\n\t\t\t$tr.find('td.filename input:checkbox').click();\n\n\t\t\texpect($tr.find('input:checkbox').prop('checked')).toEqual(true);\n\t\t});\n\t\tit('Selects/deselect a file when clicking on the name while holding Ctrl', function() {\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\tvar $tr2 = fileList.findFileEl('Three.pdf');\n\t\t\tvar e;\n\t\t\texpect($tr.find('input:checkbox').prop('checked')).toEqual(false);\n\t\t\texpect($tr2.find('input:checkbox').prop('checked')).toEqual(false);\n\t\t\te = new $.Event('click');\n\t\t\te.ctrlKey = true;\n\t\t\t$tr.find('td.filename .name').trigger(e);\n\n\t\t\texpect($tr.find('input:checkbox').prop('checked')).toEqual(true);\n\t\t\texpect($tr2.find('input:checkbox').prop('checked')).toEqual(false);\n\n\t\t\t// click on second entry, does not clear the selection\n\t\t\te = new $.Event('click');\n\t\t\te.ctrlKey = true;\n\t\t\t$tr2.find('td.filename .name').trigger(e);\n\t\t\texpect($tr.find('input:checkbox').prop('checked')).toEqual(true);\n\t\t\texpect($tr2.find('input:checkbox').prop('checked')).toEqual(true);\n\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name')).toEqual(['One.txt', 'Three.pdf']);\n\n\t\t\t// deselect now\n\t\t\te = new $.Event('click');\n\t\t\te.ctrlKey = true;\n\t\t\t$tr2.find('td.filename .name').trigger(e);\n\t\t\texpect($tr.find('input:checkbox').prop('checked')).toEqual(true);\n\t\t\texpect($tr2.find('input:checkbox').prop('checked')).toEqual(false);\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name')).toEqual(['One.txt']);\n\t\t});\n\t\tit('Selects a range when clicking on one file then Shift clicking on another one', function() {\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\tvar $tr2 = fileList.findFileEl('Three.pdf');\n\t\t\tvar e;\n\t\t\t$tr.find('td.filename input:checkbox').click();\n\t\t\te = new $.Event('click');\n\t\t\te.shiftKey = true;\n\t\t\t$tr2.find('td.filename .name').trigger(e);\n\n\t\t\texpect($tr.find('input:checkbox').prop('checked')).toEqual(true);\n\t\t\texpect($tr2.find('input:checkbox').prop('checked')).toEqual(true);\n\t\t\texpect(fileList.findFileEl('Two.jpg').find('input:checkbox').prop('checked')).toEqual(true);\n\t\t\tvar selection = _.pluck(fileList.getSelectedFiles(), 'name');\n\t\t\texpect(selection.length).toEqual(3);\n\t\t\texpect(selection).toContain('One.txt');\n\t\t\texpect(selection).toContain('Two.jpg');\n\t\t\texpect(selection).toContain('Three.pdf');\n\t\t});\n\t\tit('Selects a range when clicking on one file then Shift clicking on another one that is above the first one', function() {\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\tvar $tr2 = fileList.findFileEl('Three.pdf');\n\t\t\tvar e;\n\t\t\t$tr2.find('td.filename input:checkbox').click();\n\t\t\te = new $.Event('click');\n\t\t\te.shiftKey = true;\n\t\t\t$tr.find('td.filename .name').trigger(e);\n\n\t\t\texpect($tr.find('input:checkbox').prop('checked')).toEqual(true);\n\t\t\texpect($tr2.find('input:checkbox').prop('checked')).toEqual(true);\n\t\t\texpect(fileList.findFileEl('Two.jpg').find('input:checkbox').prop('checked')).toEqual(true);\n\t\t\tvar selection = _.pluck(fileList.getSelectedFiles(), 'name');\n\t\t\texpect(selection.length).toEqual(3);\n\t\t\texpect(selection).toContain('One.txt');\n\t\t\texpect(selection).toContain('Two.jpg');\n\t\t\texpect(selection).toContain('Three.pdf');\n\t\t});\n\t\tit('Selecting all files will automatically check \"select all\" checkbox', function() {\n\t\t\texpect($('.select-all').prop('checked')).toEqual(false);\n\t\t\t$('#fileList tr td.filename input:checkbox').click();\n\t\t\texpect($('.select-all').prop('checked')).toEqual(true);\n\t\t});\n\t\tit('Selecting all files on the first visible page will not automatically check \"select all\" checkbox', function() {\n\t\t\tfileList.setFiles(generateFiles(0, 41));\n\t\t\texpect($('.select-all').prop('checked')).toEqual(false);\n\t\t\t$('#fileList tr td.filename input:checkbox').click();\n\t\t\texpect($('.select-all').prop('checked')).toEqual(false);\n\t\t});\n\t\tit('Clicking \"select all\" will select/deselect all files', function() {\n\t\t\tfileList.setFiles(generateFiles(0, 41));\n\t\t\t$('.select-all').click();\n\t\t\texpect($('.select-all').prop('checked')).toEqual(true);\n\t\t\t$('#fileList tr input:checkbox').each(function() {\n\t\t\t\texpect($(this).prop('checked')).toEqual(true);\n\t\t\t});\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name').length).toEqual(42);\n\n\t\t\t$('.select-all').click();\n\t\t\texpect($('.select-all').prop('checked')).toEqual(false);\n\n\t\t\t$('#fileList tr input:checkbox').each(function() {\n\t\t\t\texpect($(this).prop('checked')).toEqual(false);\n\t\t\t});\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name').length).toEqual(0);\n\t\t});\n\t\tit('Clicking \"select all\" then deselecting a file will uncheck \"select all\"', function() {\n\t\t\t$('.select-all').click();\n\t\t\texpect($('.select-all').prop('checked')).toEqual(true);\n\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\t$tr.find('input:checkbox').click();\n\n\t\t\texpect($('.select-all').prop('checked')).toEqual(false);\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name').length).toEqual(3);\n\t\t});\n\t\tit('Updates the selection summary when doing a few manipulations with \"Select all\"', function() {\n\t\t\t$('.select-all').click();\n\t\t\texpect($('.select-all').prop('checked')).toEqual(true);\n\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\t// unselect one\n\t\t\t$tr.find('input:checkbox').click();\n\n\t\t\texpect($('.select-all').prop('checked')).toEqual(false);\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name').length).toEqual(3);\n\n\t\t\t// select all\n\t\t\t$('.select-all').click();\n\t\t\texpect($('.select-all').prop('checked')).toEqual(true);\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name').length).toEqual(4);\n\n\t\t\t// unselect one\n\t\t\t$tr.find('input:checkbox').click();\n\t\t\texpect($('.select-all').prop('checked')).toEqual(false);\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name').length).toEqual(3);\n\n\t\t\t// re-select it\n\t\t\t$tr.find('input:checkbox').click();\n\t\t\texpect($('.select-all').prop('checked')).toEqual(true);\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name').length).toEqual(4);\n\t\t});\n\t\tit('Auto-selects files on next page when \"select all\" is checked', function() {\n\t\t\tfileList.setFiles(generateFiles(0, 41));\n\t\t\t$('.select-all').click();\n\n\t\t\texpect(fileList.$fileList.find('tr input:checkbox:checked').length).toEqual(20);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect(fileList.$fileList.find('tr input:checkbox:checked').length).toEqual(40);\n\t\t\tfileList._nextPage(true);\n\t\t\texpect(fileList.$fileList.find('tr input:checkbox:checked').length).toEqual(42);\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name').length).toEqual(42);\n\t\t});\n\t\tit('Selecting files updates selection summary', function() {\n\t\t\tvar $summary = $('#headerName a.name>span:first');\n\t\t\texpect($summary.text()).toEqual('Name');\n\t\t\tfileList.findFileEl('One.txt').find('input:checkbox').click();\n\t\t\tfileList.findFileEl('Three.pdf').find('input:checkbox').click();\n\t\t\tfileList.findFileEl('somedir').find('input:checkbox').click();\n\t\t\texpect($summary.text()).toEqual('1 folder and 2 files');\n\t\t});\n\t\tit('Unselecting files hides selection summary', function() {\n\t\t\tvar $summary = $('#headerName a.name>span:first');\n\t\t\tfileList.findFileEl('One.txt').find('input:checkbox').click().click();\n\t\t\texpect($summary.text()).toEqual('Name');\n\t\t});\n\t\tit('Select/deselect files shows/hides file actions', function() {\n\t\t\tvar $actions = $('#headerName .selectedActions');\n\t\t\tvar $checkbox = fileList.findFileEl('One.txt').find('input:checkbox');\n\t\t\texpect($actions.hasClass('hidden')).toEqual(true);\n\t\t\t$checkbox.click();\n\t\t\texpect($actions.hasClass('hidden')).toEqual(false);\n\t\t\t$checkbox.click();\n\t\t\texpect($actions.hasClass('hidden')).toEqual(true);\n\t\t});\n\t\tit('Selection is cleared when switching dirs', function() {\n\t\t\t$('.select-all').click();\n\t\t\tvar deferredList = $.Deferred();\n\t\t\tvar getFolderContentsStub = sinon.stub(filesClient, 'getFolderContents').returns(deferredList.promise());\n\n\t\t\tfileList.changeDirectory('/');\n\n\t\t\tdeferredList.resolve(200, [testRoot].concat(testFiles));\n\n\t\t\texpect($('.select-all').prop('checked')).toEqual(false);\n\t\t\texpect(_.pluck(fileList.getSelectedFiles(), 'name')).toEqual([]);\n\n\t\t\tgetFolderContentsStub.restore();\n\t\t});\n\t\tit('getSelectedFiles returns the selected files even when they are on the next page', function() {\n\t\t\tvar selectedFiles;\n\t\t\tfileList.setFiles(generateFiles(0, 41));\n\t\t\t$('.select-all').click();\n\t\t\t// unselect one to not have the \"allFiles\" case\n\t\t\tfileList.$fileList.find('tr input:checkbox:first').click();\n\n\t\t\t// only 20 files visible, must still return all the selected ones\n\t\t\tselectedFiles = _.pluck(fileList.getSelectedFiles(), 'name');\n\n\t\t\texpect(selectedFiles.length).toEqual(41);\n\t\t});\n\t\tdescribe('clearing the selection', function() {\n\t\t\tit('clears selected files selected individually calling setFiles()', function() {\n\t\t\t\tvar selectedFiles;\n\n\t\t\t\tfileList.setFiles(generateFiles(0, 41));\n\t\t\t\tfileList.$fileList.find('tr:eq(5) input:checkbox:first').click();\n\t\t\t\tfileList.$fileList.find('tr:eq(7) input:checkbox:first').click();\n\n\t\t\t\tselectedFiles = _.pluck(fileList.getSelectedFiles(), 'name');\n\t\t\t\texpect(selectedFiles.length).toEqual(2);\n\n\t\t\t\tfileList.setFiles(generateFiles(0, 2));\n\n\t\t\t\tselectedFiles = _.pluck(fileList.getSelectedFiles(), 'name');\n\t\t\t\texpect(selectedFiles.length).toEqual(0);\n\t\t\t});\n\t\t\tit('clears selected files selected with select all when calling setFiles()', function() {\n\t\t\t\tvar selectedFiles;\n\n\t\t\t\tfileList.setFiles(generateFiles(0, 41));\n\t\t\t\t$('.select-all').click();\n\n\t\t\t\tselectedFiles = _.pluck(fileList.getSelectedFiles(), 'name');\n\t\t\t\texpect(selectedFiles.length).toEqual(42);\n\n\t\t\t\tfileList.setFiles(generateFiles(0, 2));\n\n\t\t\t\tselectedFiles = _.pluck(fileList.getSelectedFiles(), 'name');\n\t\t\t\texpect(selectedFiles.length).toEqual(0);\n\t\t\t});\n\t\t});\n\t\tdescribe('Selection overlay', function() {\n\t\t\tit('show doesnt show the delete action if one or more files are not deletable', function () {\n\t\t\t\tfileList.setFiles(testFiles);\n\t\t\t\t$('#permissions').val(OC.PERMISSION_READ | OC.PERMISSION_DELETE);\n\t\t\t\t$('.select-all').click();\n\t\t\t\texpect(fileList.$el.find('.delete-selected').hasClass('hidden')).toEqual(false);\n\t\t\t\ttestFiles[0].permissions = OC.PERMISSION_READ;\n\t\t\t\t$('.select-all').click();\n\t\t\t\tfileList.setFiles(testFiles);\n\t\t\t\t$('.select-all').click();\n\t\t\t\texpect(fileList.$el.find('.delete-selected').hasClass('hidden')).toEqual(true);\n\t\t\t});\n\t\t});\n\t\tdescribe('Actions', function() {\n\t\t\tbeforeEach(function() {\n\t\t\t\tfileList.findFileEl('One.txt').find('input:checkbox').click();\n\t\t\t\tfileList.findFileEl('Three.pdf').find('input:checkbox').click();\n\t\t\t\tfileList.findFileEl('somedir').find('input:checkbox').click();\n\t\t\t});\n\t\t\tit('getSelectedFiles returns the selected file data', function() {\n\t\t\t\tvar files = fileList.getSelectedFiles();\n\t\t\t\texpect(files.length).toEqual(3);\n\t\t\t\texpect(files[0]).toEqual({\n\t\t\t\t\tid: 1,\n\t\t\t\t\tname: 'One.txt',\n\t\t\t\t\tmimetype: 'text/plain',\n\t\t\t\t\tmtime: 123456789,\n\t\t\t\t\ttype: 'file',\n\t\t\t\t\tsize: 12,\n\t\t\t\t\tetag: 'abc',\n\t\t\t\t\tpermissions: OC.PERMISSION_ALL\n\t\t\t\t});\n\t\t\t\texpect(files[1]).toEqual({\n\t\t\t\t\tid: 3,\n\t\t\t\t\ttype: 'file',\n\t\t\t\t\tname: 'Three.pdf',\n\t\t\t\t\tmimetype: 'application/pdf',\n\t\t\t\t\tmtime: 234560000,\n\t\t\t\t\tsize: 58009,\n\t\t\t\t\tetag: '123',\n\t\t\t\t\tpermissions: OC.PERMISSION_ALL\n\t\t\t\t});\n\t\t\t\texpect(files[2]).toEqual({\n\t\t\t\t\tid: 4,\n\t\t\t\t\ttype: 'dir',\n\t\t\t\t\tname: 'somedir',\n\t\t\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\t\t\tmtime: 134560000,\n\t\t\t\t\tsize: 250,\n\t\t\t\t\tetag: '456',\n\t\t\t\t\tpermissions: OC.PERMISSION_ALL\n\t\t\t\t});\n\t\t\t\texpect(files[0].id).toEqual(1);\n\t\t\t\texpect(files[0].name).toEqual('One.txt');\n\t\t\t\texpect(files[1].id).toEqual(3);\n\t\t\t\texpect(files[1].name).toEqual('Three.pdf');\n\t\t\t\texpect(files[2].id).toEqual(4);\n\t\t\t\texpect(files[2].name).toEqual('somedir');\n\t\t\t});\n\t\t\tit('Removing a file removes it from the selection', function() {\n\t\t\t\tfileList.remove('Three.pdf');\n\t\t\t\tvar files = fileList.getSelectedFiles();\n\t\t\t\texpect(files.length).toEqual(2);\n\t\t\t\texpect(files[0]).toEqual({\n\t\t\t\t\tid: 1,\n\t\t\t\t\tname: 'One.txt',\n\t\t\t\t\tmimetype: 'text/plain',\n\t\t\t\t\tmtime: 123456789,\n\t\t\t\t\ttype: 'file',\n\t\t\t\t\tsize: 12,\n\t\t\t\t\tetag: 'abc',\n\t\t\t\t\tpermissions: OC.PERMISSION_ALL\n\t\t\t\t});\n\t\t\t\texpect(files[1]).toEqual({\n\t\t\t\t\tid: 4,\n\t\t\t\t\ttype: 'dir',\n\t\t\t\t\tname: 'somedir',\n\t\t\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\t\t\tmtime: 134560000,\n\t\t\t\t\tsize: 250,\n\t\t\t\t\tetag: '456',\n\t\t\t\t\tpermissions: OC.PERMISSION_ALL\n\t\t\t\t});\n\t\t\t});\n\t\t\tdescribe('Download', function() {\n\t\t\t\tit('Opens download URL when clicking \"Download\"', function() {\n\t\t\t\t\t$('.selectedActions .download').click();\n\t\t\t\t\texpect(redirectStub.calledOnce).toEqual(true);\n\t\t\t\t\texpect(redirectStub.getCall(0).args[0]).toContain(OC.webroot + '/index.php/apps/files/ajax/download.php?dir=%2Fsubdir&files=%5B%22One.txt%22%2C%22Three.pdf%22%2C%22somedir%22%5D');\n\t\t\t\t\tredirectStub.restore();\n\t\t\t\t});\n\t\t\t\tit('Downloads root folder when all selected in root folder', function() {\n\t\t\t\t\t$('#dir').val('/');\n\t\t\t\t\t$('.select-all').click();\n\t\t\t\t\t$('.selectedActions .download').click();\n\t\t\t\t\texpect(redirectStub.calledOnce).toEqual(true);\n\t\t\t\t\texpect(redirectStub.getCall(0).args[0]).toContain(OC.webroot + '/index.php/apps/files/ajax/download.php?dir=%2F&files=');\n\t\t\t\t});\n\t\t\t\tit('Downloads parent folder when all selected in subfolder', function() {\n\t\t\t\t\t$('.select-all').click();\n\t\t\t\t\t$('.selectedActions .download').click();\n\t\t\t\t\texpect(redirectStub.calledOnce).toEqual(true);\n\t\t\t\t\texpect(redirectStub.getCall(0).args[0]).toContain(OC.webroot + '/index.php/apps/files/ajax/download.php?dir=%2F&files=subdir');\n\t\t\t\t});\n\t\t\t});\n\t\t\tdescribe('Delete', function() {\n\t\t\t\tvar deleteStub, deferredDelete;\n\t\t\t\tbeforeEach(function() {\n\t\t\t\t\tdeferredDelete = $.Deferred();\n\t\t\t\t\tdeleteStub = sinon.stub(filesClient, 'remove').returns(deferredDelete.promise());\n\t\t\t\t});\n\t\t\t\tafterEach(function() {\n\t\t\t\t\tdeleteStub.restore();\n\t\t\t\t});\n\t\t\t\tit('Deletes selected files when \"Delete\" clicked', function() {\n\t\t\t\t\t$('.selectedActions .delete-selected').click();\n\n\t\t\t\t\texpect(deleteStub.callCount).toEqual(3);\n\t\t\t\t\texpect(deleteStub.getCall(0).args[0]).toEqual('/subdir/One.txt');\n\t\t\t\t\texpect(deleteStub.getCall(1).args[0]).toEqual('/subdir/Three.pdf');\n\t\t\t\t\texpect(deleteStub.getCall(2).args[0]).toEqual('/subdir/somedir');\n\n\t\t\t\t\tdeferredDelete.resolve(204);\n\n\t\t\t\t\texpect(fileList.findFileEl('One.txt').length).toEqual(0);\n\t\t\t\t\texpect(fileList.findFileEl('Three.pdf').length).toEqual(0);\n\t\t\t\t\texpect(fileList.findFileEl('somedir').length).toEqual(0);\n\t\t\t\t\texpect(fileList.findFileEl('Two.jpg').length).toEqual(1);\n\t\t\t\t});\n\t\t\t\tit('Deletes all files when all selected when \"Delete\" clicked', function() {\n\t\t\t\t\t$('.select-all').click();\n\t\t\t\t\t$('.selectedActions .delete-selected').click();\n\n\t\t\t\t\texpect(deleteStub.callCount).toEqual(4);\n\t\t\t\t\texpect(deleteStub.getCall(0).args[0]).toEqual('/subdir/One.txt');\n\t\t\t\t\texpect(deleteStub.getCall(1).args[0]).toEqual('/subdir/Two.jpg');\n\t\t\t\t\texpect(deleteStub.getCall(2).args[0]).toEqual('/subdir/Three.pdf');\n\t\t\t\t\texpect(deleteStub.getCall(3).args[0]).toEqual('/subdir/somedir');\n\n\t\t\t\t\tdeferredDelete.resolve(204);\n\n\t\t\t\t\texpect(fileList.isEmpty).toEqual(true);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\tit('resets the file selection on reload', function() {\n\t\t\tfileList.$el.find('.select-all').click();\n\t\t\tfileList.reload();\n\t\t\texpect(fileList.$el.find('.select-all').prop('checked')).toEqual(false);\n\t\t\texpect(fileList.getSelectedFiles()).toEqual([]);\n\t\t});\n\t\tdescribe('Disabled selection', function() {\n\t\t\tbeforeEach(function() {\n\t\t\t\tfileList._allowSelection = false;\n\t\t\t\tfileList.setFiles(testFiles);\n\t\t\t});\n\t\t\tit('Does not render checkboxes', function() {\n\t\t\t\texpect(fileList.$fileList.find('.selectCheckBox').length).toEqual(0);\n\t\t\t});\n\t\t\tit('Does not select a file with Ctrl or Shift if selection is not allowed', function() {\n\t\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\t\tvar $tr2 = fileList.findFileEl('Three.pdf');\n\t\t\t\tvar e;\n\t\t\t\te = new $.Event('click');\n\t\t\t\te.ctrlKey = true;\n\t\t\t\t$tr.find('td.filename .name').trigger(e);\n\n\t\t\t\t// click on second entry, does not clear the selection\n\t\t\t\te = new $.Event('click');\n\t\t\t\te.ctrlKey = true;\n\t\t\t\t$tr2.find('td.filename .name').trigger(e);\n\n\t\t\t\texpect(fileList.getSelectedFiles().length).toEqual(0);\n\n\t\t\t\t// deselect now\n\t\t\t\te = new $.Event('click');\n\t\t\t\te.shiftKey = true;\n\t\t\t\t$tr2.find('td.filename .name').trigger(e);\n\t\t\t\texpect(fileList.getSelectedFiles().length).toEqual(0);\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('Details sidebar', function() {\n\t\tbeforeEach(function() {\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tfileList.showDetailsView('Two.jpg');\n\t\t});\n\t\tdescribe('registering', function() {\n\t\t\tvar addTabStub;\n\t\t\tvar addDetailStub;\n\n\t\t\tbeforeEach(function() {\n\t\t\t\taddTabStub = sinon.stub(OCA.Files.DetailsView.prototype, 'addTabView');\n\t\t\t\taddDetailStub = sinon.stub(OCA.Files.DetailsView.prototype, 'addDetailView');\n\t\t\t});\n\t\t\tafterEach(function() {\n\t\t\t\taddTabStub.restore();\n\t\t\t\taddDetailStub.restore();\n\t\t\t});\n\t\t\tit('forward the registered views to the underlying DetailsView', function() {\n\t\t\t\tfileList.destroy();\n\t\t\t\tfileList = new OCA.Files.FileList($('#app-content-files'), {\n\t\t\t\t\tdetailsViewEnabled: true\n\t\t\t\t});\n\t\t\t\tfileList.registerTabView(new OCA.Files.DetailTabView());\n\t\t\t\tfileList.registerDetailView(new OCA.Files.DetailFileInfoView());\n\n\t\t\t\texpect(addTabStub.calledOnce).toEqual(true);\n\t\t\t\t// twice because the filelist already registers one by default\n\t\t\t\texpect(addDetailStub.calledTwice).toEqual(true);\n\t\t\t});\n\t\t\tit('does not error when registering panels when not details view configured', function() {\n\t\t\t\tfileList.destroy();\n\t\t\t\tfileList = new OCA.Files.FileList($('#app-content-files'), {\n\t\t\t\t\tdetailsViewEnabled: false\n\t\t\t\t});\n\t\t\t\tfileList.registerTabView(new OCA.Files.DetailTabView());\n\t\t\t\tfileList.registerDetailView(new OCA.Files.DetailFileInfoView());\n\n\t\t\t\texpect(addTabStub.notCalled).toEqual(true);\n\t\t\t\texpect(addDetailStub.notCalled).toEqual(true);\n\t\t\t});\n\t\t});\n\t\tit('triggers file action when clicking on row if no details view configured', function() {\n\t\t\tfileList.destroy();\n\t\t\tfileList = new OCA.Files.FileList($('#app-content-files'), {\n\t\t\t\tdetailsViewEnabled: false\n\t\t\t});\n\t\t\tvar updateDetailsViewStub = sinon.stub(fileList, '_updateDetailsView');\n\t\t\tvar actionStub = sinon.stub();\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tfileList.fileActions.register(\n\t\t\t\t'text/plain',\n\t\t\t\t'Test',\n\t\t\t\tOC.PERMISSION_ALL,\n\t\t\t\tfunction() {\n\t\t\t\t\t// Specify icon for hitory button\n\t\t\t\t\treturn OC.imagePath('core','actions/history');\n\t\t\t\t},\n\t\t\t\tactionStub\n\t\t\t);\n\t\t\tfileList.fileActions.setDefault('text/plain', 'Test');\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\t$tr.find('td.filename>a.name').click();\n\t\t\texpect(actionStub.calledOnce).toEqual(true);\n\t\t\texpect(updateDetailsViewStub.notCalled).toEqual(true);\n\t\t\tupdateDetailsViewStub.restore();\n\t\t});\n\t\tit('highlights current file when clicked and updates sidebar', function() {\n\t\t\tfileList.fileActions.setDefault('text/plain', 'Test');\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\t$tr.find('td.filename>a.name').click();\n\t\t\texpect($tr.hasClass('highlighted')).toEqual(true);\n\n\t\t\texpect(fileList._detailsView.getFileInfo().id).toEqual(1);\n\t\t});\n\t\tit('keeps the last highlighted file when clicking outside', function() {\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\t$tr.find('td.filename>a.name').click();\n\n\t\t\tfileList.$el.find('tfoot').click();\n\n\t\t\texpect($tr.hasClass('highlighted')).toEqual(true);\n\t\t\texpect(fileList._detailsView.getFileInfo().id).toEqual(1);\n\t\t});\n\t\tit('removes last highlighted file when selecting via checkbox', function() {\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\n\t\t\t// select\n\t\t\t$tr.find('td.filename>a.name').click();\n\t\t\t$tr.find('input:checkbox').click();\n\t\t\texpect($tr.hasClass('highlighted')).toEqual(false);\n\n\t\t\t// deselect\n\t\t\t$tr.find('td.filename>a.name').click();\n\t\t\t$tr.find('input:checkbox').click();\n\t\t\texpect($tr.hasClass('highlighted')).toEqual(false);\n\n\t\t\texpect(fileList._detailsView.getFileInfo()).toEqual(null);\n\t\t});\n\t\tit('removes last highlighted file when selecting all files via checkbox', function() {\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\n\t\t\t// select\n\t\t\t$tr.find('td.filename>a.name').click();\n\t\t\tfileList.$el.find('.select-all.checkbox').click();\n\t\t\texpect($tr.hasClass('highlighted')).toEqual(false);\n\n\t\t\t// deselect\n\t\t\t$tr.find('td.filename>a.name').click();\n\t\t\tfileList.$el.find('.select-all.checkbox').click();\n\t\t\texpect($tr.hasClass('highlighted')).toEqual(false);\n\n\t\t\texpect(fileList._detailsView.getFileInfo()).toEqual(null);\n\t\t});\n\t\tit('closes sidebar whenever the currently highlighted file was removed from the list', function() {\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\t$tr.find('td.filename>a.name').click();\n\t\t\texpect($tr.hasClass('highlighted')).toEqual(true);\n\n\t\t\texpect(fileList._detailsView.getFileInfo().id).toEqual(1);\n\n\t\t\texpect($('#app-sidebar').hasClass('disappear')).toEqual(false);\n\t\t\tfileList.remove('One.txt');\n\t\t\texpect($('#app-sidebar').hasClass('disappear')).toEqual(true);\n\t\t});\n\t\tit('returns the currently selected model instance when calling getModelForFile', function() {\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\t$tr.find('td.filename>a.name').click();\n\n\t\t\tvar model1 = fileList.getModelForFile('One.txt');\n\t\t\tvar model2 = fileList.getModelForFile('One.txt');\n\t\t\tmodel1.set('test', true);\n\n\t\t\t// it's the same model\n\t\t\texpect(model2).toEqual(model1);\n\n\t\t\tvar model3 = fileList.getModelForFile($tr);\n\t\t\texpect(model3).toEqual(model1);\n\t\t});\n\t\tit('closes the sidebar when switching folders', function() {\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\t$tr.find('td.filename>a.name').click();\n\n\t\t\texpect($('#app-sidebar').hasClass('disappear')).toEqual(false);\n\t\t\tfileList.changeDirectory('/another');\n\t\t\texpect($('#app-sidebar').hasClass('disappear')).toEqual(true);\n\t\t});\n\t});\n\tdescribe('File actions', function() {\n\t\tit('Clicking on a file name will trigger default action', function() {\n\t\t\tvar actionStub = sinon.stub();\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tfileList.fileActions.registerAction({\n\t\t\t\tmime: 'text/plain',\n\t\t\t\tname: 'Test',\n\t\t\t\ttype: OCA.Files.FileActions.TYPE_INLINE,\n\t\t\t\tpermissions: OC.PERMISSION_ALL,\n\t\t\t\ticon: function() {\n\t\t\t\t\t// Specify icon for hitory button\n\t\t\t\t\treturn OC.imagePath('core','actions/history');\n\t\t\t\t},\n\t\t\t\tactionHandler: actionStub\n\t\t\t});\n\t\t\tfileList.fileActions.setDefault('text/plain', 'Test');\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\t$tr.find('td.filename .nametext').click();\n\t\t\texpect(actionStub.calledOnce).toEqual(true);\n\t\t\texpect(actionStub.getCall(0).args[0]).toEqual('One.txt');\n\t\t\tvar context = actionStub.getCall(0).args[1];\n\t\t\texpect(context.$file.is($tr)).toEqual(true);\n\t\t\texpect(context.fileList).toBeDefined();\n\t\t\texpect(context.fileActions).toBeDefined();\n\t\t\texpect(context.dir).toEqual('/subdir');\n\t\t});\n\t\tit('redisplays actions when new actions have been registered', function() {\n\t\t\tvar actionStub = sinon.stub();\n\t\t\tvar readyHandler = sinon.stub();\n\t\t\tvar clock = sinon.useFakeTimers();\n\t\t\tvar debounceStub = sinon.stub(_, 'debounce', function(callback) {\n\t\t\t\treturn function() {\n\t\t\t\t\t// defer instead of debounce, to make it work with clock\n\t\t\t\t\t_.defer(callback);\n\t\t\t\t};\n\t\t\t});\n\n\t\t\t// need to reinit the list to make the debounce call\n\t\t\tfileList.destroy();\n\t\t\tfileList = new OCA.Files.FileList($('#app-content-files'));\n\n\t\t\tfileList.setFiles(testFiles);\n\n\t\t\tfileList.$fileList.on('fileActionsReady', readyHandler);\n\n\t\t\tfileList.fileActions.registerAction({\n\t\t\t\tmime: 'text/plain',\n\t\t\t\tname: 'Test',\n\t\t\t\ttype: OCA.Files.FileActions.TYPE_INLINE,\n\t\t\t\tpermissions: OC.PERMISSION_ALL,\n\t\t\t\ticon: function() {\n\t\t\t\t\t// Specify icon for hitory button\n\t\t\t\t\treturn OC.imagePath('core','actions/history');\n\t\t\t\t},\n\t\t\t\tactionHandler: actionStub\n\t\t\t});\n\t\t\tvar $tr = fileList.findFileEl('One.txt');\n\t\t\texpect($tr.find('.action-test').length).toEqual(0);\n\t\t\texpect(readyHandler.notCalled).toEqual(true);\n\n\t\t\t// update is delayed\n\t\t\tclock.tick(100);\n\t\t\texpect($tr.find('.action-test').length).toEqual(1);\n\t\t\texpect(readyHandler.calledOnce).toEqual(true);\n\n\t\t\tclock.restore();\n\t\t\tdebounceStub.restore();\n\t\t});\n\t});\n\tdescribe('Sorting files', function() {\n\t\tit('Toggles the sort indicator when clicking on a column header', function() {\n\t\t\tvar ASC_CLASS = fileList.SORT_INDICATOR_ASC_CLASS;\n\t\t\tvar DESC_CLASS = fileList.SORT_INDICATOR_DESC_CLASS;\n\t\t\tfileList.$el.find('.column-size .columntitle').click();\n\t\t\t// moves triangle to size column, check indicator on name is hidden\n\t\t\texpect(\n\t\t\t\tfileList.$el.find('.column-name .sort-indicator').hasClass('hidden')\n\t\t\t).toEqual(true);\n\t\t\t// check indicator on size is visible and defaults to descending\n\t\t\texpect(\n\t\t\t\tfileList.$el.find('.column-size .sort-indicator').hasClass('hidden')\n\t\t\t).toEqual(false);\n\t\t\texpect(\n\t\t\t\tfileList.$el.find('.column-size .sort-indicator').hasClass(DESC_CLASS)\n\t\t\t).toEqual(true);\n\n\t\t\t// click again on size column, reverses direction\n\t\t\tfileList.$el.find('.column-size .columntitle').click();\n\t\t\texpect(\n\t\t\t\tfileList.$el.find('.column-size .sort-indicator').hasClass('hidden')\n\t\t\t).toEqual(false);\n\t\t\texpect(\n\t\t\t\tfileList.$el.find('.column-size .sort-indicator').hasClass(ASC_CLASS)\n\t\t\t).toEqual(true);\n\n\t\t\t// click again on size column, reverses direction\n\t\t\tfileList.$el.find('.column-size .columntitle').click();\n\t\t\texpect(\n\t\t\t\tfileList.$el.find('.column-size .sort-indicator').hasClass('hidden')\n\t\t\t).toEqual(false);\n\t\t\texpect(\n\t\t\t\tfileList.$el.find('.column-size .sort-indicator').hasClass(DESC_CLASS)\n\t\t\t).toEqual(true);\n\n\t\t\t// click on mtime column, moves indicator there\n\t\t\tfileList.$el.find('.column-mtime .columntitle').click();\n\t\t\texpect(\n\t\t\t\tfileList.$el.find('.column-size .sort-indicator').hasClass('hidden')\n\t\t\t).toEqual(true);\n\t\t\texpect(\n\t\t\t\tfileList.$el.find('.column-mtime .sort-indicator').hasClass('hidden')\n\t\t\t).toEqual(false);\n\t\t\texpect(\n\t\t\t\tfileList.$el.find('.column-mtime .sort-indicator').hasClass(DESC_CLASS)\n\t\t\t).toEqual(true);\n\t\t});\n\t\tit('Uses correct sort comparator when inserting files', function() {\n\t\t\ttestFiles.sort(OCA.Files.FileList.Comparators.size);\n\t\t\ttestFiles.reverse();\t//default is descending\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tfileList.$el.find('.column-size .columntitle').click();\n\t\t\tvar newFileData = new FileInfo({\n\t\t\t\tid: 999,\n\t\t\t\tname: 'new file.txt',\n\t\t\t\tmimetype: 'text/plain',\n\t\t\t\tsize: 40001,\n\t\t\t\tetag: '999'\n\t\t\t});\n\t\t\tfileList.add(newFileData);\n\t\t\texpect(fileList.findFileEl('Three.pdf').index()).toEqual(0);\n\t\t\texpect(fileList.findFileEl('new file.txt').index()).toEqual(1);\n\t\t\texpect(fileList.findFileEl('Two.jpg').index()).toEqual(2);\n\t\t\texpect(fileList.findFileEl('somedir').index()).toEqual(3);\n\t\t\texpect(fileList.findFileEl('One.txt').index()).toEqual(4);\n\t\t\texpect(fileList.files.length).toEqual(5);\n\t\t\texpect(fileList.$fileList.find('tr').length).toEqual(5);\n\t\t});\n\t\tit('Uses correct reversed sort comparator when inserting files', function() {\n\t\t\ttestFiles.sort(OCA.Files.FileList.Comparators.size);\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tfileList.$el.find('.column-size .columntitle').click();\n\n\t\t\t// reverse sort\n\t\t\tfileList.$el.find('.column-size .columntitle').click();\n\t\t\tvar newFileData = new FileInfo({\n\t\t\t\tid: 999,\n\t\t\t\tname: 'new file.txt',\n\t\t\t\tmimetype: 'text/plain',\n\t\t\t\tsize: 40001,\n\t\t\t\tetag: '999'\n\t\t\t});\n\t\t\tfileList.add(newFileData);\n\t\t\texpect(fileList.findFileEl('One.txt').index()).toEqual(0);\n\t\t\texpect(fileList.findFileEl('somedir').index()).toEqual(1);\n\t\t\texpect(fileList.findFileEl('Two.jpg').index()).toEqual(2);\n\t\t\texpect(fileList.findFileEl('new file.txt').index()).toEqual(3);\n\t\t\texpect(fileList.findFileEl('Three.pdf').index()).toEqual(4);\n\t\t\texpect(fileList.files.length).toEqual(5);\n\t\t\texpect(fileList.$fileList.find('tr').length).toEqual(5);\n\t\t});\n\t\tit('does not sort when clicking on header whenever multiselect is enabled', function() {\n\t\t\tvar sortStub = sinon.stub(OCA.Files.FileList.prototype, 'setSort');\n\n\t\t\tfileList.setFiles(testFiles);\n\t\t\tfileList.findFileEl('One.txt').find('input:checkbox:first').click();\n\n\t\t\tfileList.$el.find('.column-size .columntitle').click();\n\n\t\t\texpect(sortStub.notCalled).toEqual(true);\n\n\t\t\t// can sort again after deselecting\n\t\t\tfileList.findFileEl('One.txt').find('input:checkbox:first').click();\n\n\t\t\tfileList.$el.find('.column-size .columntitle').click();\n\n\t\t\texpect(sortStub.calledOnce).toEqual(true);\n\n\t\t\tsortStub.restore();\n\t\t});\n\t});\n\tdescribe('create file', function() {\n\t\tvar deferredCreate;\n\t\tvar deferredInfo;\n\t\tvar createStub;\n\t\tvar getFileInfoStub;\n\n\t\tbeforeEach(function() {\n\t\t\tdeferredCreate = $.Deferred();\n\t\t\tdeferredInfo = $.Deferred();\n\t\t\tcreateStub = sinon.stub(filesClient, 'putFileContents')\n\t\t\t\t.returns(deferredCreate.promise());\n\t\t\tgetFileInfoStub = sinon.stub(filesClient, 'getFileInfo')\n\t\t\t\t.returns(deferredInfo.promise());\n\t\t});\n\t\tafterEach(function() {\n\t\t\tcreateStub.restore();\n\t\t\tgetFileInfoStub.restore();\n\t\t});\n\n\t\tit('creates file with given name and adds it to the list', function() {\n\t\t\tfileList.createFile('test.txt');\n\n\t\t\texpect(createStub.calledOnce).toEqual(true);\n\t\t\texpect(createStub.getCall(0).args[0]).toEqual('/subdir/test.txt');\n\t\t\texpect(createStub.getCall(0).args[2]).toEqual({\n\t\t\t\tcontentType: 'text/plain',\n\t\t\t\toverwrite: true\n\t\t\t});\n\n\t\t\tdeferredCreate.resolve(200);\n\n\t\t\texpect(getFileInfoStub.calledOnce).toEqual(true);\n\t\t\texpect(getFileInfoStub.getCall(0).args[0]).toEqual('/subdir/test.txt');\n\n\t\t\tdeferredInfo.resolve(\n\t\t\t\t200,\n\t\t\t   \tnew FileInfo({\n\t\t\t\t\tpath: '/subdir',\n\t\t\t\t\tname: 'test.txt',\n\t\t\t\t\tmimetype: 'text/plain'\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tvar $tr = fileList.findFileEl('test.txt');\n\t\t\texpect($tr.length).toEqual(1);\n\t\t\texpect($tr.attr('data-mime')).toEqual('text/plain');\n\t\t});\n\t\t// TODO: error cases\n\t\t// TODO: unique name cases\n\t});\n\tdescribe('create folder', function() {\n\t\tvar deferredCreate;\n\t\tvar deferredInfo;\n\t\tvar createStub;\n\t\tvar getFileInfoStub;\n\n\t\tbeforeEach(function() {\n\t\t\tdeferredCreate = $.Deferred();\n\t\t\tdeferredInfo = $.Deferred();\n\t\t\tcreateStub = sinon.stub(filesClient, 'createDirectory')\n\t\t\t\t.returns(deferredCreate.promise());\n\t\t\tgetFileInfoStub = sinon.stub(filesClient, 'getFileInfo')\n\t\t\t\t.returns(deferredInfo.promise());\n\t\t});\n\t\tafterEach(function() {\n\t\t\tcreateStub.restore();\n\t\t\tgetFileInfoStub.restore();\n\t\t});\n\n\t\tit('creates folder with given name and adds it to the list', function() {\n\t\t\tfileList.createDirectory('sub dir');\n\n\t\t\texpect(createStub.calledOnce).toEqual(true);\n\t\t\texpect(createStub.getCall(0).args[0]).toEqual('/subdir/sub dir');\n\n\t\t\tdeferredCreate.resolve(200);\n\n\t\t\texpect(getFileInfoStub.calledOnce).toEqual(true);\n\t\t\texpect(getFileInfoStub.getCall(0).args[0]).toEqual('/subdir/sub dir');\n\n\t\t\tdeferredInfo.resolve(\n\t\t\t\t200,\n\t\t\t   \tnew FileInfo({\n\t\t\t\t\tpath: '/subdir',\n\t\t\t\t\tname: 'sub dir',\n\t\t\t\t\tmimetype: 'httpd/unix-directory'\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tvar $tr = fileList.findFileEl('sub dir');\n\t\t\texpect($tr.length).toEqual(1);\n\t\t\texpect($tr.attr('data-mime')).toEqual('httpd/unix-directory');\n\t\t});\n\t\t// TODO: error cases\n\t\t// TODO: unique name cases\n\t});\n\t/**\n\t * Test upload mostly by testing the code inside the event handlers\n\t * that were registered on the magic upload object\n\t */\n\tdescribe('file upload', function() {\n\t\tvar $uploader;\n\n\t\tbeforeEach(function() {\n\t\t\t// note: this isn't the real blueimp file uploader from jquery.fileupload\n\t\t\t// but it makes it possible to simulate the event triggering to\n\t\t\t// test the response of the handlers\n\t\t\t$uploader = $('#file_upload_start');\n\t\t\tfileList.setFiles(testFiles);\n\t\t});\n\n\t\tafterEach(function() {\n\t\t\t$uploader = null;\n\t\t});\n\n\t\tdescribe('dropping external files', function() {\n\t\t\tvar uploadData;\n\n\t\t\t/**\n\t\t\t * Simulate drop event on the given target\n\t\t\t *\n\t\t\t * @param $target target element to drop on\n\t\t\t * @return event object including the result\n\t\t\t */\n\t\t\tfunction dropOn($target, data) {\n\t\t\t\tvar eventData = {\n\t\t\t\t\toriginalEvent: {\n\t\t\t\t\t\ttarget: $target\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tvar ev = new $.Event('fileuploaddrop', eventData);\n\t\t\t\t// using triggerHandler instead of trigger so we can pass\n\t\t\t\t// extra data\n\t\t\t\t$uploader.triggerHandler(ev, data || {});\n\t\t\t\treturn ev;\n\t\t\t}\n\n\t\t\tbeforeEach(function() {\n\t\t\t\t// simulate data structure from jquery.upload\n\t\t\t\tuploadData = {\n\t\t\t\t\tfiles: [{\n\t\t\t\t\t\trelativePath: 'fileToUpload.txt'\n\t\t\t\t\t}]\n\t\t\t\t};\n\t\t\t});\n\t\t\tafterEach(function() {\n\t\t\t\tuploadData = null;\n\t\t\t});\n\t\t\tit('drop on a tr or crumb outside file list does not trigger upload', function() {\n\t\t\t\tvar $anotherTable = $('<table><tbody><tr><td>outside<div class=\"crumb\">crumb</div></td></tr></table>');\n\t\t\t\tvar ev;\n\t\t\t\t$('#testArea').append($anotherTable);\n\t\t\t\tev = dropOn($anotherTable.find('tr'), uploadData);\n\t\t\t\texpect(ev.result).toEqual(false);\n\n\t\t\t\tev = dropOn($anotherTable.find('.crumb'));\n\t\t\t\texpect(ev.result).toEqual(false);\n\t\t\t});\n\t\t\tit('drop on an element outside file list container does not trigger upload', function() {\n\t\t\t\tvar $anotherEl = $('<div>outside</div>');\n\t\t\t\tvar ev;\n\t\t\t\t$('#testArea').append($anotherEl);\n\t\t\t\tev = dropOn($anotherEl);\n\n\t\t\t\texpect(ev.result).toEqual(false);\n\t\t\t});\n\t\t\tit('drop on an element inside the table triggers upload', function() {\n\t\t\t\tvar ev;\n\t\t\t\tev = dropOn(fileList.$fileList.find('th:first'), uploadData);\n\n\t\t\t\texpect(ev.result).not.toEqual(false);\n\t\t\t});\n\t\t\tit('drop on an element on the table container triggers upload', function() {\n\t\t\t\tvar ev;\n\t\t\t\tev = dropOn($('#app-content-files'), uploadData);\n\n\t\t\t\texpect(ev.result).not.toEqual(false);\n\t\t\t});\n\t\t\tit('drop on an element inside the table does not trigger upload if no upload permission', function() {\n\t\t\t\t$('#permissions').val(0);\n\t\t\t\tvar ev;\n\t\t\t\tev = dropOn(fileList.$fileList.find('th:first'));\n\n\t\t\t\texpect(ev.result).toEqual(false);\n\t\t\t\texpect(notificationStub.calledOnce).toEqual(true);\n\t\t\t});\n\t\t\tit('drop on an folder does not trigger upload if no upload permission on that folder', function() {\n\t\t\t\tvar $tr = fileList.findFileEl('somedir');\n\t\t\t\tvar ev;\n\t\t\t\t$tr.data('permissions', OC.PERMISSION_READ);\n\t\t\t\tev = dropOn($tr);\n\n\t\t\t\texpect(ev.result).toEqual(false);\n\t\t\t\texpect(notificationStub.calledOnce).toEqual(true);\n\t\t\t});\n\t\t\tit('drop on a file row inside the table triggers upload to current folder', function() {\n\t\t\t\tvar ev;\n\t\t\t\tev = dropOn(fileList.findFileEl('One.txt').find('td:first'), uploadData);\n\n\t\t\t\texpect(ev.result).not.toEqual(false);\n\t\t\t});\n\t\t\tit('drop on a folder row inside the table triggers upload to target folder', function() {\n\t\t\t\tvar ev;\n\t\t\t\tev = dropOn(fileList.findFileEl('somedir').find('td:eq(2)'), uploadData);\n\n\t\t\t\texpect(ev.result).not.toEqual(false);\n\t\t\t\texpect(uploadData.targetDir).toEqual('/subdir/somedir');\n\t\t\t});\n\t\t\tit('drop on a breadcrumb inside the table triggers upload to target folder', function() {\n\t\t\t\tvar ev;\n\t\t\t\tfileList.changeDirectory('a/b/c/d');\n\t\t\t\tev = dropOn(fileList.$el.find('.crumb:eq(2)'), uploadData);\n\n\t\t\t\texpect(ev.result).not.toEqual(false);\n\t\t\t\texpect(uploadData.targetDir).toEqual('/a/b');\n\t\t\t});\n\t\t\tit('renders upload indicator element for folders only', function() {\n\t\t\t\tfileList.add({\n\t\t\t\t\tname: 'afolder',\n\t\t\t\t\ttype: 'dir',\n\t\t\t\t\tmime: 'httpd/unix-directory'\n\t\t\t\t});\n\t\t\t\tfileList.add({\n\t\t\t\t\tname: 'afile.txt',\n\t\t\t\t\ttype: 'file',\n\t\t\t\t\tmime: 'text/plain'\n\t\t\t\t});\n\n\t\t\t\texpect(fileList.findFileEl('afolder').find('.uploadtext').length).toEqual(1);\n\t\t\t\texpect(fileList.findFileEl('afile.txt').find('.uploadtext').length).toEqual(0);\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('Handling errors', function () {\n\t\tvar deferredList;\n\t\tvar getFolderContentsStub;\n\n\t\tbeforeEach(function() {\n\t\t\tdeferredList = $.Deferred();\n\t\t\tgetFolderContentsStub =\n\t\t\t\tsinon.stub(filesClient, 'getFolderContents');\n\t\t\tgetFolderContentsStub.onCall(0).returns(deferredList.promise());\n\t\t\tgetFolderContentsStub.onCall(1).returns($.Deferred().promise());\n\t\t\tfileList.reload();\n\t\t});\n\t\tafterEach(function() {\n\t\t\tgetFolderContentsStub.restore();\n\t\t\tfileList = undefined;\n\t\t});\n\t\tit('redirects to root folder in case of forbidden access', function () {\n\t\t\tdeferredList.reject(403);\n\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/');\n\t\t\texpect(getFolderContentsStub.calledTwice).toEqual(true);\n\t\t});\n\t\tit('redirects to root folder and shows notification in case of internal server error', function () {\n\t\t\texpect(notificationStub.notCalled).toEqual(true);\n\t\t\tdeferredList.reject(500);\n\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/');\n\t\t\texpect(getFolderContentsStub.calledTwice).toEqual(true);\n\t\t\texpect(notificationStub.calledOnce).toEqual(true);\n\t\t});\n\t\tit('redirects to root folder and shows notification in case of storage not available', function () {\n\t\t\texpect(notificationStub.notCalled).toEqual(true);\n\t\t\tdeferredList.reject(503, 'Storage not available');\n\n\t\t\texpect(fileList.getCurrentDirectory()).toEqual('/');\n\t\t\texpect(getFolderContentsStub.calledTwice).toEqual(true);\n\t\t\texpect(notificationStub.calledOnce).toEqual(true);\n\t\t});\n\t});\n\tdescribe('showFileBusyState', function() {\n\t\tvar $tr;\n\n\t\tbeforeEach(function() {\n\t\t\tfileList.setFiles(testFiles);\n\t\t\t$tr = fileList.findFileEl('Two.jpg');\n\t\t});\n\t\tit('shows spinner on busy rows', function() {\n\t\t\tfileList.showFileBusyState('Two.jpg', true);\n\t\t\texpect($tr.hasClass('busy')).toEqual(true);\n\t\t\texpect(OC.TestUtil.getImageUrl($tr.find('.thumbnail')))\n\t\t\t\t.toEqual(OC.imagePath('core', 'loading.gif'));\n\n\t\t\tfileList.showFileBusyState('Two.jpg', false);\n\t\t\texpect($tr.hasClass('busy')).toEqual(false);\n\t\t\texpect(OC.TestUtil.getImageUrl($tr.find('.thumbnail')))\n\t\t\t\t.toEqual(OC.imagePath('core', 'filetypes/image.svg'));\n\t\t});\n\t\tit('accepts multiple input formats', function() {\n\t\t\t_.each([\n\t\t\t\t'Two.jpg',\n\t\t\t\t['Two.jpg'],\n\t\t\t\t$tr,\n\t\t\t\t[$tr]\n\t\t\t], function(testCase) {\n\t\t\t\tfileList.showFileBusyState(testCase, true);\n\t\t\t\texpect($tr.hasClass('busy')).toEqual(true);\n\t\t\t\tfileList.showFileBusyState(testCase, false);\n\t\t\t\texpect($tr.hasClass('busy')).toEqual(false);\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('elementToFile', function() {\n\t\tvar $tr;\n\n\t\tbeforeEach(function() {\n\t\t\tfileList.setFiles(testFiles);\n\t\t\t$tr = fileList.findFileEl('One.txt');\n\t\t});\n\n\t\tit('converts data attributes to file info structure', function() {\n\t\t\tvar fileInfo = fileList.elementToFile($tr);\n\t\t\texpect(fileInfo.id).toEqual(1);\n\t\t\texpect(fileInfo.name).toEqual('One.txt');\n\t\t\texpect(fileInfo.mtime).toEqual(123456789);\n\t\t\texpect(fileInfo.etag).toEqual('abc');\n\t\t\texpect(fileInfo.permissions).toEqual(OC.PERMISSION_ALL);\n\t\t\texpect(fileInfo.size).toEqual(12);\n\t\t\texpect(fileInfo.mimetype).toEqual('text/plain');\n\t\t\texpect(fileInfo.type).toEqual('file');\n\t\t\texpect(fileInfo.path).not.toBeDefined();\n\t\t});\n\t\tit('adds path attribute if available', function() {\n\t\t\t$tr.attr('data-path', '/subdir');\n\t\t\tvar fileInfo = fileList.elementToFile($tr);\n\t\t\texpect(fileInfo.path).toEqual('/subdir');\n\t\t});\n\t});\n\tdescribe('new file menu', function() {\n\t\tvar newFileMenuStub;\n\n\t\tbeforeEach(function() {\n\t\t\tnewFileMenuStub = sinon.stub(OCA.Files.NewFileMenu.prototype, 'showAt');\n\t\t});\n\t\tafterEach(function() {\n\t\t\tnewFileMenuStub.restore();\n\t\t})\n\t\tit('renders new button when no legacy upload button exists', function() {\n\t\t\texpect(fileList.$el.find('.button.upload').length).toEqual(0);\n\t\t\texpect(fileList.$el.find('.button.new').length).toEqual(1);\n\t\t});\n\t\tit('does not render new button when no legacy upload button exists (public page)', function() {\n\t\t\tfileList.destroy();\n\t\t\t$('#controls').append('<input type=\"button\" class=\"button upload\" />');\n\t\t\tfileList = new OCA.Files.FileList($('#app-content-files'));\n\t\t\texpect(fileList.$el.find('.button.upload').length).toEqual(1);\n\t\t\texpect(fileList.$el.find('.button.new').length).toEqual(0);\n\t\t});\n\t\tit('opens the new file menu when clicking on the \"New\" button', function() {\n\t\t\tvar $button = fileList.$el.find('.button.new');\n\t\t\t$button.click();\n\t\t\texpect(newFileMenuStub.calledOnce).toEqual(true);\n\t\t});\n\t\tit('does not open the new file menu when button is disabled', function() {\n\t\t\tvar $button = fileList.$el.find('.button.new');\n\t\t\t$button.addClass('disabled');\n\t\t\t$button.click();\n\t\t\texpect(newFileMenuStub.notCalled).toEqual(true);\n\t\t});\n\t});\n\tdescribe('mount type detection', function() {\n\t\tfunction testMountType(dirInfoId, dirInfoMountType, inputMountType, expectedMountType) {\n\t\t\tvar $tr;\n\t\t\tfileList.dirInfo.id = dirInfoId;\n\t\t\tfileList.dirInfo.mountType = dirInfoMountType;\n\t\t\t$tr = fileList.add({\n\t\t\t\ttype: 'dir',\n\t\t\t\tmimetype: 'httpd/unix-directory',\n\t\t\t\tname: 'test dir',\n\t\t\t\tmountType: inputMountType\n\t\t\t});\n\n\t\t\texpect($tr.attr('data-mounttype')).toEqual(expectedMountType);\n\t\t}\n\n\t\tit('leaves mount type as is if no parent exists', function() {\n\t\t\ttestMountType(null, null, 'external', 'external');\n\t\t\ttestMountType(null, null, 'shared', 'shared');\n\t\t});\n\t\tit('detects share root if parent exists', function() {\n\t\t\ttestMountType(123, null, 'shared', 'shared-root');\n\t\t\ttestMountType(123, 'shared', 'shared', 'shared');\n\t\t\ttestMountType(123, 'shared-root', 'shared', 'shared');\n\t\t});\n\t\tit('detects external storage root if parent exists', function() {\n\t\t\ttestMountType(123, null, 'external', 'external-root');\n\t\t\ttestMountType(123, 'external', 'external', 'external');\n\t\t\ttestMountType(123, 'external-root', 'external', 'external');\n\t\t});\n\t});\n});\n"], "filenames": ["apps/files/js/filelist.js", "apps/files/tests/js/filelistSpec.js"], "buggy_code_start_loc": [1336, 1325], "buggy_code_end_loc": [1337, 1325], "fixing_code_start_loc": [1336, 1326], "fixing_code_end_loc": [1337, 1330], "type": "CWE-284", "message": "Nextcloud Server before 9.0.52 & ownCloud Server before 9.0.4 are vulnerable to a content-spoofing attack in the files app. The location bar in the files app was not verifying the passed parameters. An attacker could craft an invalid link to a fake directory structure and use this to display an attacker-controlled error message to the user.", "other": {"cve": {"id": "CVE-2016-9460", "sourceIdentifier": "support@hackerone.com", "published": "2017-03-28T02:59:00.793", "lastModified": "2017-04-04T01:59:02.057", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Nextcloud Server before 9.0.52 & ownCloud Server before 9.0.4 are vulnerable to a content-spoofing attack in the files app. The location bar in the files app was not verifying the passed parameters. An attacker could craft an invalid link to a fake directory structure and use this to display an attacker-controlled error message to the user."}, {"lang": "es", "value": "Nextcloud Server en versiones anteriores a 9.0.52 & ownCloud Server en versiones anteriores a 9.0.4 son vulnerables a un ataque de contenido falsificado en la aplicaci\u00f3n de archivos. La barra de ubicaci\u00f3n en la aplicaci\u00f3n de archivos no estaba verificando los par\u00e1metros pasados. Un atacante podr\u00eda manipular un enlace no v\u00e1lido a una estructura de directorio falsa y usar esto para mostrar un mensaje de error controlado por el atacante al usuario."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-284"}]}, {"source": "support@hackerone.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-451"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:nextcloud:*:*:*:*:*:*:*:*", "versionEndIncluding": "9.0.51", "matchCriteriaId": "438EB19E-E28C-47E6-B980-58E3EEA379EF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:*:*:*:*:*:*:*:*", "versionEndIncluding": "9.0.3", "matchCriteriaId": "AC698542-23B9-4101-BD01-10D2FB0870E9"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/97282", "source": "support@hackerone.com"}, {"url": "https://github.com/nextcloud/server/commit/2da43e3751576bbc838f238a09955c4dcdebee8e", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/nextcloud/server/commit/8aa0832bd449c44ec300da4189bd8ed4e036140c", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/nextcloud/server/commit/dea8e29289a1b99d5e889627c2e377887f4f2983", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/owncloud/core/commit/c92c234059f8b1dc7d53122985ec0d398895a2cf", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://hackerone.com/reports/145463", "source": "support@hackerone.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://nextcloud.com/security/advisory/?id=nc-sa-2016-003", "source": "support@hackerone.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://owncloud.org/security/advisory/?id=oc-sa-2016-013", "source": "support@hackerone.com", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/nextcloud/server/commit/2da43e3751576bbc838f238a09955c4dcdebee8e"}}