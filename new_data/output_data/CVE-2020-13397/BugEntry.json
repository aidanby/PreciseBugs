{"buggy_code": ["/**\n * FreeRDP: A Remote Desktop Protocol Implementation\n * RDP Security\n *\n * Copyright 2011 Marc-Andre Moreau <marcandre.moreau@gmail.com>\n * Copyright 2014 Norbert Federa <norbert.federa@thincast.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#include \"security.h\"\n\n#include <freerdp/log.h>\n#include <winpr/crypto.h>\n\n#define TAG FREERDP_TAG(\"core\")\n\n/* 0x36 repeated 40 times */\nstatic const BYTE pad1[40] = { \"\\x36\\x36\\x36\\x36\\x36\\x36\\x36\\x36\"\n\t                           \"\\x36\\x36\\x36\\x36\\x36\\x36\\x36\\x36\"\n\t                           \"\\x36\\x36\\x36\\x36\\x36\\x36\\x36\\x36\"\n\t                           \"\\x36\\x36\\x36\\x36\\x36\\x36\\x36\\x36\"\n\t                           \"\\x36\\x36\\x36\\x36\\x36\\x36\\x36\\x36\" };\n\n/* 0x5C repeated 48 times */\nstatic const BYTE pad2[48] = { \"\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\"\n\t                           \"\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\"\n\t                           \"\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\"\n\t                           \"\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\"\n\t                           \"\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\"\n\t                           \"\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\" };\n\nstatic const BYTE fips_reverse_table[256] = {\n\t0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,\n\t0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8, 0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8,\n\t0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,\n\t0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc,\n\t0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2, 0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2,\n\t0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,\n\t0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6,\n\t0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee, 0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe,\n\t0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1, 0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,\n\t0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9, 0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9,\n\t0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5, 0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5,\n\t0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed, 0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,\n\t0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3, 0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,\n\t0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb, 0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,\n\t0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7, 0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,\n\t0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef, 0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff\n};\n\nstatic const BYTE fips_oddparity_table[256] = {\n\t0x01, 0x01, 0x02, 0x02, 0x04, 0x04, 0x07, 0x07, 0x08, 0x08, 0x0b, 0x0b, 0x0d, 0x0d, 0x0e, 0x0e,\n\t0x10, 0x10, 0x13, 0x13, 0x15, 0x15, 0x16, 0x16, 0x19, 0x19, 0x1a, 0x1a, 0x1c, 0x1c, 0x1f, 0x1f,\n\t0x20, 0x20, 0x23, 0x23, 0x25, 0x25, 0x26, 0x26, 0x29, 0x29, 0x2a, 0x2a, 0x2c, 0x2c, 0x2f, 0x2f,\n\t0x31, 0x31, 0x32, 0x32, 0x34, 0x34, 0x37, 0x37, 0x38, 0x38, 0x3b, 0x3b, 0x3d, 0x3d, 0x3e, 0x3e,\n\t0x40, 0x40, 0x43, 0x43, 0x45, 0x45, 0x46, 0x46, 0x49, 0x49, 0x4a, 0x4a, 0x4c, 0x4c, 0x4f, 0x4f,\n\t0x51, 0x51, 0x52, 0x52, 0x54, 0x54, 0x57, 0x57, 0x58, 0x58, 0x5b, 0x5b, 0x5d, 0x5d, 0x5e, 0x5e,\n\t0x61, 0x61, 0x62, 0x62, 0x64, 0x64, 0x67, 0x67, 0x68, 0x68, 0x6b, 0x6b, 0x6d, 0x6d, 0x6e, 0x6e,\n\t0x70, 0x70, 0x73, 0x73, 0x75, 0x75, 0x76, 0x76, 0x79, 0x79, 0x7a, 0x7a, 0x7c, 0x7c, 0x7f, 0x7f,\n\t0x80, 0x80, 0x83, 0x83, 0x85, 0x85, 0x86, 0x86, 0x89, 0x89, 0x8a, 0x8a, 0x8c, 0x8c, 0x8f, 0x8f,\n\t0x91, 0x91, 0x92, 0x92, 0x94, 0x94, 0x97, 0x97, 0x98, 0x98, 0x9b, 0x9b, 0x9d, 0x9d, 0x9e, 0x9e,\n\t0xa1, 0xa1, 0xa2, 0xa2, 0xa4, 0xa4, 0xa7, 0xa7, 0xa8, 0xa8, 0xab, 0xab, 0xad, 0xad, 0xae, 0xae,\n\t0xb0, 0xb0, 0xb3, 0xb3, 0xb5, 0xb5, 0xb6, 0xb6, 0xb9, 0xb9, 0xba, 0xba, 0xbc, 0xbc, 0xbf, 0xbf,\n\t0xc1, 0xc1, 0xc2, 0xc2, 0xc4, 0xc4, 0xc7, 0xc7, 0xc8, 0xc8, 0xcb, 0xcb, 0xcd, 0xcd, 0xce, 0xce,\n\t0xd0, 0xd0, 0xd3, 0xd3, 0xd5, 0xd5, 0xd6, 0xd6, 0xd9, 0xd9, 0xda, 0xda, 0xdc, 0xdc, 0xdf, 0xdf,\n\t0xe0, 0xe0, 0xe3, 0xe3, 0xe5, 0xe5, 0xe6, 0xe6, 0xe9, 0xe9, 0xea, 0xea, 0xec, 0xec, 0xef, 0xef,\n\t0xf1, 0xf1, 0xf2, 0xf2, 0xf4, 0xf4, 0xf7, 0xf7, 0xf8, 0xf8, 0xfb, 0xfb, 0xfd, 0xfd, 0xfe, 0xfe\n};\n\nstatic BOOL security_salted_hash(const BYTE* salt, const BYTE* input, int length, const BYTE* salt1,\n                                 const BYTE* salt2, BYTE* output)\n{\n\tWINPR_DIGEST_CTX* sha1 = NULL;\n\tWINPR_DIGEST_CTX* md5 = NULL;\n\tBYTE sha1_digest[WINPR_SHA1_DIGEST_LENGTH];\n\tBOOL result = FALSE;\n\n\t/* SaltedHash(Salt, Input, Salt1, Salt2) = MD5(S + SHA1(Input + Salt + Salt1 + Salt2)) */\n\n\t/* SHA1_Digest = SHA1(Input + Salt + Salt1 + Salt2) */\n\tif (!(sha1 = winpr_Digest_New()))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Init(sha1, WINPR_MD_SHA1))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, input, length)) /* Input */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, salt, 48)) /* Salt (48 bytes) */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, salt1, 32)) /* Salt1 (32 bytes) */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, salt2, 32)) /* Salt2 (32 bytes) */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(sha1, sha1_digest, sizeof(sha1_digest)))\n\t\tgoto out;\n\n\t/* SaltedHash(Salt, Input, Salt1, Salt2) = MD5(S + SHA1_Digest) */\n\tif (!(md5 = winpr_Digest_New()))\n\t\tgoto out;\n\n\t/* Allow FIPS override for use of MD5 here, this is used for creating hashes of the\n\t * premaster_secret and master_secret */\n\t/* used for RDP licensing as described in MS-RDPELE. This is for RDP licensing packets */\n\t/* which will already be encrypted under FIPS, so the use of MD5 here is not for sensitive data\n\t * protection. */\n\tif (!winpr_Digest_Init_Allow_FIPS(md5, WINPR_MD_MD5))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, salt, 48)) /* Salt (48 bytes) */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, sha1_digest, sizeof(sha1_digest))) /* SHA1_Digest */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(md5, output, WINPR_MD5_DIGEST_LENGTH))\n\t\tgoto out;\n\n\tresult = TRUE;\nout:\n\twinpr_Digest_Free(sha1);\n\twinpr_Digest_Free(md5);\n\treturn result;\n}\n\nstatic BOOL security_premaster_hash(const char* input, int length, const BYTE* premaster_secret,\n                                    const BYTE* client_random, const BYTE* server_random,\n                                    BYTE* output)\n{\n\t/* PremasterHash(Input) = SaltedHash(PremasterSecret, Input, ClientRandom, ServerRandom) */\n\treturn security_salted_hash(premaster_secret, (BYTE*)input, length, client_random,\n\t                            server_random, output);\n}\n\nBOOL security_master_secret(const BYTE* premaster_secret, const BYTE* client_random,\n                            const BYTE* server_random, BYTE* output)\n{\n\t/* MasterSecret = PremasterHash('A') + PremasterHash('BB') + PremasterHash('CCC') */\n\treturn security_premaster_hash(\"A\", 1, premaster_secret, client_random, server_random,\n\t                               &output[0]) &&\n\t       security_premaster_hash(\"BB\", 2, premaster_secret, client_random, server_random,\n\t                               &output[16]) &&\n\t       security_premaster_hash(\"CCC\", 3, premaster_secret, client_random, server_random,\n\t                               &output[32]);\n}\n\nstatic BOOL security_master_hash(const char* input, int length, const BYTE* master_secret,\n                                 const BYTE* client_random, const BYTE* server_random, BYTE* output)\n{\n\t/* MasterHash(Input) = SaltedHash(MasterSecret, Input, ServerRandom, ClientRandom) */\n\treturn security_salted_hash(master_secret, (const BYTE*)input, length, server_random,\n\t                            client_random, output);\n}\n\nBOOL security_session_key_blob(const BYTE* master_secret, const BYTE* client_random,\n                               const BYTE* server_random, BYTE* output)\n{\n\t/* MasterHash = MasterHash('A') + MasterHash('BB') + MasterHash('CCC') */\n\treturn security_master_hash(\"A\", 1, master_secret, client_random, server_random, &output[0]) &&\n\t       security_master_hash(\"BB\", 2, master_secret, client_random, server_random,\n\t                            &output[16]) &&\n\t       security_master_hash(\"CCC\", 3, master_secret, client_random, server_random, &output[32]);\n}\n\nvoid security_mac_salt_key(const BYTE* session_key_blob, const BYTE* client_random,\n                           const BYTE* server_random, BYTE* output)\n{\n\t/* MacSaltKey = First128Bits(SessionKeyBlob) */\n\tmemcpy(output, session_key_blob, 16);\n}\n\nstatic BOOL security_md5_16_32_32(const BYTE* in0, const BYTE* in1, const BYTE* in2, BYTE* output)\n{\n\tWINPR_DIGEST_CTX* md5 = NULL;\n\tBOOL result = FALSE;\n\n\tif (!(md5 = winpr_Digest_New()))\n\t\treturn FALSE;\n\n\tif (!winpr_Digest_Init(md5, WINPR_MD_MD5))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, in0, 16))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, in1, 32))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, in2, 32))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(md5, output, WINPR_MD5_DIGEST_LENGTH))\n\t\tgoto out;\n\n\tresult = TRUE;\nout:\n\twinpr_Digest_Free(md5);\n\treturn result;\n}\n\nstatic BOOL security_md5_16_32_32_Allow_FIPS(const BYTE* in0, const BYTE* in1, const BYTE* in2,\n                                             BYTE* output)\n{\n\tWINPR_DIGEST_CTX* md5 = NULL;\n\tBOOL result = FALSE;\n\n\tif (!(md5 = winpr_Digest_New()))\n\t\treturn FALSE;\n\tif (!winpr_Digest_Init_Allow_FIPS(md5, WINPR_MD_MD5))\n\t\tgoto out;\n\tif (!winpr_Digest_Update(md5, in0, 16))\n\t\tgoto out;\n\tif (!winpr_Digest_Update(md5, in1, 32))\n\t\tgoto out;\n\tif (!winpr_Digest_Update(md5, in2, 32))\n\t\tgoto out;\n\tif (!winpr_Digest_Final(md5, output, WINPR_MD5_DIGEST_LENGTH))\n\t\tgoto out;\n\n\tresult = TRUE;\nout:\n\twinpr_Digest_Free(md5);\n\treturn result;\n}\n\nBOOL security_licensing_encryption_key(const BYTE* session_key_blob, const BYTE* client_random,\n                                       const BYTE* server_random, BYTE* output)\n{\n\t/* LicensingEncryptionKey = MD5(Second128Bits(SessionKeyBlob) + ClientRandom + ServerRandom))\n\t * Allow FIPS use of MD5 here, this is just used for creating the licensing encryption key as\n\t * described in MS-RDPELE. This is for RDP licensing packets which will already be encrypted\n\t * under FIPS, so the use of MD5 here is not for sensitive data protection. */\n\treturn security_md5_16_32_32_Allow_FIPS(&session_key_blob[16], client_random, server_random,\n\t                                        output);\n}\n\nstatic void security_UINT32_le(BYTE* output, UINT32 value)\n{\n\toutput[0] = (value)&0xFF;\n\toutput[1] = (value >> 8) & 0xFF;\n\toutput[2] = (value >> 16) & 0xFF;\n\toutput[3] = (value >> 24) & 0xFF;\n}\n\nBOOL security_mac_data(const BYTE* mac_salt_key, const BYTE* data, UINT32 length, BYTE* output)\n{\n\tWINPR_DIGEST_CTX* sha1 = NULL;\n\tWINPR_DIGEST_CTX* md5 = NULL;\n\tBYTE length_le[4];\n\tBYTE sha1_digest[WINPR_SHA1_DIGEST_LENGTH];\n\tBOOL result = FALSE;\n\t/* MacData = MD5(MacSaltKey + pad2 + SHA1(MacSaltKey + pad1 + length + data)) */\n\tsecurity_UINT32_le(length_le, length); /* length must be little-endian */\n\n\t/* SHA1_Digest = SHA1(MacSaltKey + pad1 + length + data) */\n\tif (!(sha1 = winpr_Digest_New()))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Init(sha1, WINPR_MD_SHA1))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, mac_salt_key, 16)) /* MacSaltKey */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, pad1, sizeof(pad1))) /* pad1 */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, length_le, sizeof(length_le))) /* length */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, data, length)) /* data */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(sha1, sha1_digest, sizeof(sha1_digest)))\n\t\tgoto out;\n\n\t/* MacData = MD5(MacSaltKey + pad2 + SHA1_Digest) */\n\tif (!(md5 = winpr_Digest_New()))\n\t\tgoto out;\n\n\t/* Allow FIPS override for use of MD5 here, this is only used for creating the MACData field of\n\t * the */\n\t/* Client Platform Challenge Response packet (from MS-RDPELE section 2.2.2.5). This is for RDP\n\t * licensing packets */\n\t/* which will already be encrypted under FIPS, so the use of MD5 here is not for sensitive data\n\t * protection. */\n\tif (!winpr_Digest_Init_Allow_FIPS(md5, WINPR_MD_MD5))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, mac_salt_key, 16)) /* MacSaltKey */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, pad2, sizeof(pad2))) /* pad2 */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, sha1_digest, sizeof(sha1_digest))) /* SHA1_Digest */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(md5, output, WINPR_MD5_DIGEST_LENGTH))\n\t\tgoto out;\n\n\tresult = TRUE;\nout:\n\twinpr_Digest_Free(sha1);\n\twinpr_Digest_Free(md5);\n\treturn result;\n}\n\nBOOL security_mac_signature(rdpRdp* rdp, const BYTE* data, UINT32 length, BYTE* output)\n{\n\tWINPR_DIGEST_CTX* sha1 = NULL;\n\tWINPR_DIGEST_CTX* md5 = NULL;\n\tBYTE length_le[4];\n\tBYTE md5_digest[WINPR_MD5_DIGEST_LENGTH];\n\tBYTE sha1_digest[WINPR_SHA1_DIGEST_LENGTH];\n\tBOOL result = FALSE;\n\tsecurity_UINT32_le(length_le, length); /* length must be little-endian */\n\n\t/* SHA1_Digest = SHA1(MACKeyN + pad1 + length + data) */\n\tif (!(sha1 = winpr_Digest_New()))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Init(sha1, WINPR_MD_SHA1))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, rdp->sign_key, rdp->rc4_key_len)) /* MacKeyN */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, pad1, sizeof(pad1))) /* pad1 */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, length_le, sizeof(length_le))) /* length */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, data, length)) /* data */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(sha1, sha1_digest, sizeof(sha1_digest)))\n\t\tgoto out;\n\n\t/* MACSignature = First64Bits(MD5(MACKeyN + pad2 + SHA1_Digest)) */\n\tif (!(md5 = winpr_Digest_New()))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Init(md5, WINPR_MD_MD5))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, rdp->sign_key, rdp->rc4_key_len)) /* MacKeyN */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, pad2, sizeof(pad2))) /* pad2 */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, sha1_digest, sizeof(sha1_digest))) /* SHA1_Digest */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(md5, md5_digest, sizeof(md5_digest)))\n\t\tgoto out;\n\n\tmemcpy(output, md5_digest, 8);\n\tresult = TRUE;\nout:\n\twinpr_Digest_Free(sha1);\n\twinpr_Digest_Free(md5);\n\treturn result;\n}\n\nBOOL security_salted_mac_signature(rdpRdp* rdp, const BYTE* data, UINT32 length, BOOL encryption,\n                                   BYTE* output)\n{\n\tWINPR_DIGEST_CTX* sha1 = NULL;\n\tWINPR_DIGEST_CTX* md5 = NULL;\n\tBYTE length_le[4];\n\tBYTE use_count_le[4];\n\tBYTE md5_digest[WINPR_MD5_DIGEST_LENGTH];\n\tBYTE sha1_digest[WINPR_SHA1_DIGEST_LENGTH];\n\tBOOL result = FALSE;\n\tsecurity_UINT32_le(length_le, length); /* length must be little-endian */\n\n\tif (encryption)\n\t{\n\t\tsecurity_UINT32_le(use_count_le, rdp->encrypt_checksum_use_count);\n\t}\n\telse\n\t{\n\t\t/*\n\t\t * We calculate checksum on plain text, so we must have already\n\t\t * decrypt it, which means decrypt_checksum_use_count is off by one.\n\t\t */\n\t\tsecurity_UINT32_le(use_count_le, rdp->decrypt_checksum_use_count - 1);\n\t}\n\n\t/* SHA1_Digest = SHA1(MACKeyN + pad1 + length + data) */\n\tif (!(sha1 = winpr_Digest_New()))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Init(sha1, WINPR_MD_SHA1))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, rdp->sign_key, rdp->rc4_key_len)) /* MacKeyN */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, pad1, sizeof(pad1))) /* pad1 */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, length_le, sizeof(length_le))) /* length */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, data, length)) /* data */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, use_count_le, sizeof(use_count_le))) /* encryptionCount */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(sha1, sha1_digest, sizeof(sha1_digest)))\n\t\tgoto out;\n\n\t/* MACSignature = First64Bits(MD5(MACKeyN + pad2 + SHA1_Digest)) */\n\tif (!(md5 = winpr_Digest_New()))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Init(md5, WINPR_MD_MD5))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, rdp->sign_key, rdp->rc4_key_len)) /* MacKeyN */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, pad2, sizeof(pad2))) /* pad2 */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, sha1_digest, sizeof(sha1_digest))) /* SHA1_Digest */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(md5, md5_digest, sizeof(md5_digest)))\n\t\tgoto out;\n\n\tmemcpy(output, md5_digest, 8);\n\tresult = TRUE;\nout:\n\twinpr_Digest_Free(sha1);\n\twinpr_Digest_Free(md5);\n\treturn result;\n}\n\nstatic BOOL security_A(BYTE* master_secret, const BYTE* client_random, BYTE* server_random,\n                       BYTE* output)\n{\n\treturn security_premaster_hash(\"A\", 1, master_secret, client_random, server_random,\n\t                               &output[0]) &&\n\t       security_premaster_hash(\"BB\", 2, master_secret, client_random, server_random,\n\t                               &output[16]) &&\n\t       security_premaster_hash(\"CCC\", 3, master_secret, client_random, server_random,\n\t                               &output[32]);\n}\n\nstatic BOOL security_X(BYTE* master_secret, const BYTE* client_random, BYTE* server_random,\n                       BYTE* output)\n{\n\treturn security_premaster_hash(\"X\", 1, master_secret, client_random, server_random,\n\t                               &output[0]) &&\n\t       security_premaster_hash(\"YY\", 2, master_secret, client_random, server_random,\n\t                               &output[16]) &&\n\t       security_premaster_hash(\"ZZZ\", 3, master_secret, client_random, server_random,\n\t                               &output[32]);\n}\n\nstatic void fips_expand_key_bits(BYTE* in, BYTE* out)\n{\n\tBYTE buf[21], c;\n\tint i, b, p, r;\n\n\t/* reverse every byte in the key */\n\tfor (i = 0; i < 21; i++)\n\t\tbuf[i] = fips_reverse_table[in[i]];\n\n\t/* insert a zero-bit after every 7th bit */\n\tfor (i = 0, b = 0; i < 24; i++, b += 7)\n\t{\n\t\tp = b / 8;\n\t\tr = b % 8;\n\n\t\tif (r <= 1)\n\t\t{\n\t\t\tout[i] = (buf[p] << r) & 0xfe;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/* c is accumulator */\n\t\t\tc = buf[p] << r;\n\t\t\tc |= buf[p + 1] >> (8 - r);\n\t\t\tout[i] = c & 0xfe;\n\t\t}\n\t}\n\n\t/* reverse every byte */\n\t/* alter lsb so the byte has odd parity */\n\tfor (i = 0; i < 24; i++)\n\t\tout[i] = fips_oddparity_table[fips_reverse_table[out[i]]];\n}\n\nBOOL security_establish_keys(const BYTE* client_random, rdpRdp* rdp)\n{\n\tBYTE pre_master_secret[48];\n\tBYTE master_secret[48];\n\tBYTE session_key_blob[48];\n\tBYTE* server_random;\n\tBYTE salt[] = { 0xD1, 0x26, 0x9E }; /* 40 bits: 3 bytes, 56 bits: 1 byte */\n\trdpSettings* settings;\n\tBOOL status;\n\tsettings = rdp->settings;\n\tserver_random = settings->ServerRandom;\n\n\tif (settings->EncryptionMethods == ENCRYPTION_METHOD_FIPS)\n\t{\n\t\tWINPR_DIGEST_CTX* sha1;\n\t\tBYTE client_encrypt_key_t[WINPR_SHA1_DIGEST_LENGTH + 1];\n\t\tBYTE client_decrypt_key_t[WINPR_SHA1_DIGEST_LENGTH + 1];\n\n\t\tif (!(sha1 = winpr_Digest_New()))\n\t\t\treturn FALSE;\n\n\t\tif (!winpr_Digest_Init(sha1, WINPR_MD_SHA1) ||\n\t\t    !winpr_Digest_Update(sha1, client_random + 16, 16) ||\n\t\t    !winpr_Digest_Update(sha1, server_random + 16, 16) ||\n\t\t    !winpr_Digest_Final(sha1, client_encrypt_key_t, sizeof(client_encrypt_key_t)))\n\t\t{\n\t\t\twinpr_Digest_Free(sha1);\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tclient_encrypt_key_t[20] = client_encrypt_key_t[0];\n\n\t\tif (!winpr_Digest_Init(sha1, WINPR_MD_SHA1) ||\n\t\t    !winpr_Digest_Update(sha1, client_random, 16) ||\n\t\t    !winpr_Digest_Update(sha1, server_random, 16) ||\n\t\t    !winpr_Digest_Final(sha1, client_decrypt_key_t, sizeof(client_decrypt_key_t)))\n\t\t{\n\t\t\twinpr_Digest_Free(sha1);\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tclient_decrypt_key_t[20] = client_decrypt_key_t[0];\n\n\t\tif (!winpr_Digest_Init(sha1, WINPR_MD_SHA1) ||\n\t\t    !winpr_Digest_Update(sha1, client_decrypt_key_t, WINPR_SHA1_DIGEST_LENGTH) ||\n\t\t    !winpr_Digest_Update(sha1, client_encrypt_key_t, WINPR_SHA1_DIGEST_LENGTH) ||\n\t\t    !winpr_Digest_Final(sha1, rdp->fips_sign_key, WINPR_SHA1_DIGEST_LENGTH))\n\t\t{\n\t\t\twinpr_Digest_Free(sha1);\n\t\t\treturn FALSE;\n\t\t}\n\n\t\twinpr_Digest_Free(sha1);\n\n\t\tif (rdp->settings->ServerMode)\n\t\t{\n\t\t\tfips_expand_key_bits(client_encrypt_key_t, rdp->fips_decrypt_key);\n\t\t\tfips_expand_key_bits(client_decrypt_key_t, rdp->fips_encrypt_key);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfips_expand_key_bits(client_encrypt_key_t, rdp->fips_encrypt_key);\n\t\t\tfips_expand_key_bits(client_decrypt_key_t, rdp->fips_decrypt_key);\n\t\t}\n\t}\n\n\tmemcpy(pre_master_secret, client_random, 24);\n\tmemcpy(pre_master_secret + 24, server_random, 24);\n\n\tif (!security_A(pre_master_secret, client_random, server_random, master_secret) ||\n\t    !security_X(master_secret, client_random, server_random, session_key_blob))\n\t{\n\t\treturn FALSE;\n\t}\n\n\tmemcpy(rdp->sign_key, session_key_blob, 16);\n\n\tif (rdp->settings->ServerMode)\n\t{\n\t\tstatus = security_md5_16_32_32(&session_key_blob[16], client_random, server_random,\n\t\t                               rdp->encrypt_key);\n\t\tstatus &= security_md5_16_32_32(&session_key_blob[32], client_random, server_random,\n\t\t                                rdp->decrypt_key);\n\t}\n\telse\n\t{\n\t\t/* Allow FIPS use of MD5 here, this is just used for generation of the SessionKeyBlob as\n\t\t * described in MS-RDPELE. */\n\t\t/* This is for RDP licensing packets which will already be encrypted under FIPS, so the use\n\t\t * of MD5 here is not */\n\t\t/* for sensitive data protection. */\n\t\tstatus = security_md5_16_32_32_Allow_FIPS(&session_key_blob[16], client_random,\n\t\t                                          server_random, rdp->decrypt_key);\n\t\tstatus &= security_md5_16_32_32_Allow_FIPS(&session_key_blob[32], client_random,\n\t\t                                           server_random, rdp->encrypt_key);\n\t}\n\n\tif (!status)\n\t\treturn FALSE;\n\n\tif (settings->EncryptionMethods == ENCRYPTION_METHOD_40BIT)\n\t{\n\t\tmemcpy(rdp->sign_key, salt, 3);\n\t\tmemcpy(rdp->decrypt_key, salt, 3);\n\t\tmemcpy(rdp->encrypt_key, salt, 3);\n\t\trdp->rc4_key_len = 8;\n\t}\n\telse if (settings->EncryptionMethods == ENCRYPTION_METHOD_56BIT)\n\t{\n\t\tmemcpy(rdp->sign_key, salt, 1);\n\t\tmemcpy(rdp->decrypt_key, salt, 1);\n\t\tmemcpy(rdp->encrypt_key, salt, 1);\n\t\trdp->rc4_key_len = 8;\n\t}\n\telse if (settings->EncryptionMethods == ENCRYPTION_METHOD_128BIT)\n\t{\n\t\trdp->rc4_key_len = 16;\n\t}\n\n\tmemcpy(rdp->decrypt_update_key, rdp->decrypt_key, 16);\n\tmemcpy(rdp->encrypt_update_key, rdp->encrypt_key, 16);\n\trdp->decrypt_use_count = 0;\n\trdp->decrypt_checksum_use_count = 0;\n\trdp->encrypt_use_count = 0;\n\trdp->encrypt_checksum_use_count = 0;\n\treturn TRUE;\n}\n\nstatic BOOL security_key_update(BYTE* key, BYTE* update_key, int key_len, rdpRdp* rdp)\n{\n\tBYTE sha1h[WINPR_SHA1_DIGEST_LENGTH];\n\tWINPR_DIGEST_CTX* sha1 = NULL;\n\tWINPR_DIGEST_CTX* md5 = NULL;\n\tWINPR_RC4_CTX* rc4 = NULL;\n\tBYTE salt[] = { 0xD1, 0x26, 0x9E }; /* 40 bits: 3 bytes, 56 bits: 1 byte */\n\tBOOL result = FALSE;\n\tWLog_DBG(TAG, \"updating RDP key\");\n\n\tif (!(sha1 = winpr_Digest_New()))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Init(sha1, WINPR_MD_SHA1))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, update_key, key_len))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, pad1, sizeof(pad1)))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, key, key_len))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(sha1, sha1h, sizeof(sha1h)))\n\t\tgoto out;\n\n\tif (!(md5 = winpr_Digest_New()))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Init(md5, WINPR_MD_MD5))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, update_key, key_len))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, pad2, sizeof(pad2)))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, sha1h, sizeof(sha1h)))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(md5, key, WINPR_MD5_DIGEST_LENGTH))\n\t\tgoto out;\n\n\tif (!(rc4 = winpr_RC4_New(key, key_len)))\n\t\tgoto out;\n\n\tif (!winpr_RC4_Update(rc4, key_len, key, key))\n\t\tgoto out;\n\n\tif (rdp->settings->EncryptionMethods == ENCRYPTION_METHOD_40BIT)\n\t\tmemcpy(key, salt, 3);\n\telse if (rdp->settings->EncryptionMethods == ENCRYPTION_METHOD_56BIT)\n\t\tmemcpy(key, salt, 1);\n\n\tresult = TRUE;\nout:\n\twinpr_Digest_Free(sha1);\n\twinpr_Digest_Free(md5);\n\twinpr_RC4_Free(rc4);\n\treturn result;\n}\n\nBOOL security_encrypt(BYTE* data, size_t length, rdpRdp* rdp)\n{\n\tBOOL rc = FALSE;\n\tEnterCriticalSection(&rdp->critical);\n\tif (rdp->encrypt_use_count >= 4096)\n\t{\n\t\tif (!security_key_update(rdp->encrypt_key, rdp->encrypt_update_key, rdp->rc4_key_len, rdp))\n\t\t\tgoto fail;\n\n\t\twinpr_RC4_Free(rdp->rc4_encrypt_key);\n\t\trdp->rc4_encrypt_key = winpr_RC4_New(rdp->encrypt_key, rdp->rc4_key_len);\n\n\t\tif (!rdp->rc4_encrypt_key)\n\t\t\tgoto fail;\n\n\t\trdp->encrypt_use_count = 0;\n\t}\n\n\tif (!winpr_RC4_Update(rdp->rc4_encrypt_key, length, data, data))\n\t\tgoto fail;\n\n\trdp->encrypt_use_count++;\n\trdp->encrypt_checksum_use_count++;\n\trc = TRUE;\nfail:\n\tLeaveCriticalSection(&rdp->critical);\n\treturn rc;\n}\n\nBOOL security_decrypt(BYTE* data, size_t length, rdpRdp* rdp)\n{\n\tif (rdp->rc4_decrypt_key == NULL)\n\t\treturn FALSE;\n\n\tif (rdp->decrypt_use_count >= 4096)\n\t{\n\t\tif (!security_key_update(rdp->decrypt_key, rdp->decrypt_update_key, rdp->rc4_key_len, rdp))\n\t\t\treturn FALSE;\n\n\t\twinpr_RC4_Free(rdp->rc4_decrypt_key);\n\t\trdp->rc4_decrypt_key = winpr_RC4_New(rdp->decrypt_key, rdp->rc4_key_len);\n\n\t\tif (!rdp->rc4_decrypt_key)\n\t\t\treturn FALSE;\n\n\t\trdp->decrypt_use_count = 0;\n\t}\n\n\tif (!winpr_RC4_Update(rdp->rc4_decrypt_key, length, data, data))\n\t\treturn FALSE;\n\n\trdp->decrypt_use_count += 1;\n\trdp->decrypt_checksum_use_count++;\n\treturn TRUE;\n}\n\nBOOL security_hmac_signature(const BYTE* data, size_t length, BYTE* output, rdpRdp* rdp)\n{\n\tBYTE buf[WINPR_SHA1_DIGEST_LENGTH];\n\tBYTE use_count_le[4];\n\tWINPR_HMAC_CTX* hmac;\n\tBOOL result = FALSE;\n\tsecurity_UINT32_le(use_count_le, rdp->encrypt_use_count);\n\n\tif (!(hmac = winpr_HMAC_New()))\n\t\treturn FALSE;\n\n\tif (!winpr_HMAC_Init(hmac, WINPR_MD_SHA1, rdp->fips_sign_key, WINPR_SHA1_DIGEST_LENGTH))\n\t\tgoto out;\n\n\tif (!winpr_HMAC_Update(hmac, data, length))\n\t\tgoto out;\n\n\tif (!winpr_HMAC_Update(hmac, use_count_le, 4))\n\t\tgoto out;\n\n\tif (!winpr_HMAC_Final(hmac, buf, WINPR_SHA1_DIGEST_LENGTH))\n\t\tgoto out;\n\n\tmemmove(output, buf, 8);\n\tresult = TRUE;\nout:\n\twinpr_HMAC_Free(hmac);\n\treturn result;\n}\n\nBOOL security_fips_encrypt(BYTE* data, size_t length, rdpRdp* rdp)\n{\n\tBOOL rc = FALSE;\n\tsize_t olen;\n\n\tEnterCriticalSection(&rdp->critical);\n\tif (!winpr_Cipher_Update(rdp->fips_encrypt, data, length, data, &olen))\n\t\tgoto fail;\n\n\trdp->encrypt_use_count++;\n\trc = TRUE;\nfail:\n\tLeaveCriticalSection(&rdp->critical);\n\treturn rc;\n}\n\nBOOL security_fips_decrypt(BYTE* data, size_t length, rdpRdp* rdp)\n{\n\tsize_t olen;\n\n\tif (!winpr_Cipher_Update(rdp->fips_decrypt, data, length, data, &olen))\n\t\treturn FALSE;\n\n\treturn TRUE;\n}\n\nBOOL security_fips_check_signature(const BYTE* data, size_t length, const BYTE* sig, rdpRdp* rdp)\n{\n\tBYTE buf[WINPR_SHA1_DIGEST_LENGTH];\n\tBYTE use_count_le[4];\n\tWINPR_HMAC_CTX* hmac;\n\tBOOL result = FALSE;\n\tsecurity_UINT32_le(use_count_le, rdp->decrypt_use_count);\n\n\tif (!(hmac = winpr_HMAC_New()))\n\t\treturn FALSE;\n\n\tif (!winpr_HMAC_Init(hmac, WINPR_MD_SHA1, rdp->fips_sign_key, WINPR_SHA1_DIGEST_LENGTH))\n\t\tgoto out;\n\n\tif (!winpr_HMAC_Update(hmac, data, length))\n\t\tgoto out;\n\n\tif (!winpr_HMAC_Update(hmac, use_count_le, 4))\n\t\tgoto out;\n\n\tif (!winpr_HMAC_Final(hmac, buf, WINPR_SHA1_DIGEST_LENGTH))\n\t\tgoto out;\n\n\trdp->decrypt_use_count++;\n\n\tif (!memcmp(sig, buf, 8))\n\t\tresult = TRUE;\n\nout:\n\twinpr_HMAC_Free(hmac);\n\treturn result;\n}\n"], "fixing_code": ["/**\n * FreeRDP: A Remote Desktop Protocol Implementation\n * RDP Security\n *\n * Copyright 2011 Marc-Andre Moreau <marcandre.moreau@gmail.com>\n * Copyright 2014 Norbert Federa <norbert.federa@thincast.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#include \"security.h\"\n\n#include <freerdp/log.h>\n#include <winpr/crypto.h>\n\n#define TAG FREERDP_TAG(\"core\")\n\n/* 0x36 repeated 40 times */\nstatic const BYTE pad1[40] = { \"\\x36\\x36\\x36\\x36\\x36\\x36\\x36\\x36\"\n\t                           \"\\x36\\x36\\x36\\x36\\x36\\x36\\x36\\x36\"\n\t                           \"\\x36\\x36\\x36\\x36\\x36\\x36\\x36\\x36\"\n\t                           \"\\x36\\x36\\x36\\x36\\x36\\x36\\x36\\x36\"\n\t                           \"\\x36\\x36\\x36\\x36\\x36\\x36\\x36\\x36\" };\n\n/* 0x5C repeated 48 times */\nstatic const BYTE pad2[48] = { \"\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\"\n\t                           \"\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\"\n\t                           \"\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\"\n\t                           \"\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\"\n\t                           \"\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\"\n\t                           \"\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\\x5C\" };\n\nstatic const BYTE fips_reverse_table[256] = {\n\t0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,\n\t0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8, 0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8,\n\t0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,\n\t0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc,\n\t0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2, 0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2,\n\t0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,\n\t0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6,\n\t0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee, 0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe,\n\t0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1, 0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,\n\t0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9, 0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9,\n\t0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5, 0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5,\n\t0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed, 0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,\n\t0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3, 0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,\n\t0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb, 0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,\n\t0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7, 0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,\n\t0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef, 0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff\n};\n\nstatic const BYTE fips_oddparity_table[256] = {\n\t0x01, 0x01, 0x02, 0x02, 0x04, 0x04, 0x07, 0x07, 0x08, 0x08, 0x0b, 0x0b, 0x0d, 0x0d, 0x0e, 0x0e,\n\t0x10, 0x10, 0x13, 0x13, 0x15, 0x15, 0x16, 0x16, 0x19, 0x19, 0x1a, 0x1a, 0x1c, 0x1c, 0x1f, 0x1f,\n\t0x20, 0x20, 0x23, 0x23, 0x25, 0x25, 0x26, 0x26, 0x29, 0x29, 0x2a, 0x2a, 0x2c, 0x2c, 0x2f, 0x2f,\n\t0x31, 0x31, 0x32, 0x32, 0x34, 0x34, 0x37, 0x37, 0x38, 0x38, 0x3b, 0x3b, 0x3d, 0x3d, 0x3e, 0x3e,\n\t0x40, 0x40, 0x43, 0x43, 0x45, 0x45, 0x46, 0x46, 0x49, 0x49, 0x4a, 0x4a, 0x4c, 0x4c, 0x4f, 0x4f,\n\t0x51, 0x51, 0x52, 0x52, 0x54, 0x54, 0x57, 0x57, 0x58, 0x58, 0x5b, 0x5b, 0x5d, 0x5d, 0x5e, 0x5e,\n\t0x61, 0x61, 0x62, 0x62, 0x64, 0x64, 0x67, 0x67, 0x68, 0x68, 0x6b, 0x6b, 0x6d, 0x6d, 0x6e, 0x6e,\n\t0x70, 0x70, 0x73, 0x73, 0x75, 0x75, 0x76, 0x76, 0x79, 0x79, 0x7a, 0x7a, 0x7c, 0x7c, 0x7f, 0x7f,\n\t0x80, 0x80, 0x83, 0x83, 0x85, 0x85, 0x86, 0x86, 0x89, 0x89, 0x8a, 0x8a, 0x8c, 0x8c, 0x8f, 0x8f,\n\t0x91, 0x91, 0x92, 0x92, 0x94, 0x94, 0x97, 0x97, 0x98, 0x98, 0x9b, 0x9b, 0x9d, 0x9d, 0x9e, 0x9e,\n\t0xa1, 0xa1, 0xa2, 0xa2, 0xa4, 0xa4, 0xa7, 0xa7, 0xa8, 0xa8, 0xab, 0xab, 0xad, 0xad, 0xae, 0xae,\n\t0xb0, 0xb0, 0xb3, 0xb3, 0xb5, 0xb5, 0xb6, 0xb6, 0xb9, 0xb9, 0xba, 0xba, 0xbc, 0xbc, 0xbf, 0xbf,\n\t0xc1, 0xc1, 0xc2, 0xc2, 0xc4, 0xc4, 0xc7, 0xc7, 0xc8, 0xc8, 0xcb, 0xcb, 0xcd, 0xcd, 0xce, 0xce,\n\t0xd0, 0xd0, 0xd3, 0xd3, 0xd5, 0xd5, 0xd6, 0xd6, 0xd9, 0xd9, 0xda, 0xda, 0xdc, 0xdc, 0xdf, 0xdf,\n\t0xe0, 0xe0, 0xe3, 0xe3, 0xe5, 0xe5, 0xe6, 0xe6, 0xe9, 0xe9, 0xea, 0xea, 0xec, 0xec, 0xef, 0xef,\n\t0xf1, 0xf1, 0xf2, 0xf2, 0xf4, 0xf4, 0xf7, 0xf7, 0xf8, 0xf8, 0xfb, 0xfb, 0xfd, 0xfd, 0xfe, 0xfe\n};\n\nstatic BOOL security_salted_hash(const BYTE* salt, const BYTE* input, int length, const BYTE* salt1,\n                                 const BYTE* salt2, BYTE* output)\n{\n\tWINPR_DIGEST_CTX* sha1 = NULL;\n\tWINPR_DIGEST_CTX* md5 = NULL;\n\tBYTE sha1_digest[WINPR_SHA1_DIGEST_LENGTH];\n\tBOOL result = FALSE;\n\n\t/* SaltedHash(Salt, Input, Salt1, Salt2) = MD5(S + SHA1(Input + Salt + Salt1 + Salt2)) */\n\n\t/* SHA1_Digest = SHA1(Input + Salt + Salt1 + Salt2) */\n\tif (!(sha1 = winpr_Digest_New()))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Init(sha1, WINPR_MD_SHA1))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, input, length)) /* Input */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, salt, 48)) /* Salt (48 bytes) */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, salt1, 32)) /* Salt1 (32 bytes) */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, salt2, 32)) /* Salt2 (32 bytes) */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(sha1, sha1_digest, sizeof(sha1_digest)))\n\t\tgoto out;\n\n\t/* SaltedHash(Salt, Input, Salt1, Salt2) = MD5(S + SHA1_Digest) */\n\tif (!(md5 = winpr_Digest_New()))\n\t\tgoto out;\n\n\t/* Allow FIPS override for use of MD5 here, this is used for creating hashes of the\n\t * premaster_secret and master_secret */\n\t/* used for RDP licensing as described in MS-RDPELE. This is for RDP licensing packets */\n\t/* which will already be encrypted under FIPS, so the use of MD5 here is not for sensitive data\n\t * protection. */\n\tif (!winpr_Digest_Init_Allow_FIPS(md5, WINPR_MD_MD5))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, salt, 48)) /* Salt (48 bytes) */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, sha1_digest, sizeof(sha1_digest))) /* SHA1_Digest */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(md5, output, WINPR_MD5_DIGEST_LENGTH))\n\t\tgoto out;\n\n\tresult = TRUE;\nout:\n\twinpr_Digest_Free(sha1);\n\twinpr_Digest_Free(md5);\n\treturn result;\n}\n\nstatic BOOL security_premaster_hash(const char* input, int length, const BYTE* premaster_secret,\n                                    const BYTE* client_random, const BYTE* server_random,\n                                    BYTE* output)\n{\n\t/* PremasterHash(Input) = SaltedHash(PremasterSecret, Input, ClientRandom, ServerRandom) */\n\treturn security_salted_hash(premaster_secret, (BYTE*)input, length, client_random,\n\t                            server_random, output);\n}\n\nBOOL security_master_secret(const BYTE* premaster_secret, const BYTE* client_random,\n                            const BYTE* server_random, BYTE* output)\n{\n\t/* MasterSecret = PremasterHash('A') + PremasterHash('BB') + PremasterHash('CCC') */\n\treturn security_premaster_hash(\"A\", 1, premaster_secret, client_random, server_random,\n\t                               &output[0]) &&\n\t       security_premaster_hash(\"BB\", 2, premaster_secret, client_random, server_random,\n\t                               &output[16]) &&\n\t       security_premaster_hash(\"CCC\", 3, premaster_secret, client_random, server_random,\n\t                               &output[32]);\n}\n\nstatic BOOL security_master_hash(const char* input, int length, const BYTE* master_secret,\n                                 const BYTE* client_random, const BYTE* server_random, BYTE* output)\n{\n\t/* MasterHash(Input) = SaltedHash(MasterSecret, Input, ServerRandom, ClientRandom) */\n\treturn security_salted_hash(master_secret, (const BYTE*)input, length, server_random,\n\t                            client_random, output);\n}\n\nBOOL security_session_key_blob(const BYTE* master_secret, const BYTE* client_random,\n                               const BYTE* server_random, BYTE* output)\n{\n\t/* MasterHash = MasterHash('A') + MasterHash('BB') + MasterHash('CCC') */\n\treturn security_master_hash(\"A\", 1, master_secret, client_random, server_random, &output[0]) &&\n\t       security_master_hash(\"BB\", 2, master_secret, client_random, server_random,\n\t                            &output[16]) &&\n\t       security_master_hash(\"CCC\", 3, master_secret, client_random, server_random, &output[32]);\n}\n\nvoid security_mac_salt_key(const BYTE* session_key_blob, const BYTE* client_random,\n                           const BYTE* server_random, BYTE* output)\n{\n\t/* MacSaltKey = First128Bits(SessionKeyBlob) */\n\tmemcpy(output, session_key_blob, 16);\n}\n\nstatic BOOL security_md5_16_32_32(const BYTE* in0, const BYTE* in1, const BYTE* in2, BYTE* output)\n{\n\tWINPR_DIGEST_CTX* md5 = NULL;\n\tBOOL result = FALSE;\n\n\tif (!(md5 = winpr_Digest_New()))\n\t\treturn FALSE;\n\n\tif (!winpr_Digest_Init(md5, WINPR_MD_MD5))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, in0, 16))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, in1, 32))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, in2, 32))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(md5, output, WINPR_MD5_DIGEST_LENGTH))\n\t\tgoto out;\n\n\tresult = TRUE;\nout:\n\twinpr_Digest_Free(md5);\n\treturn result;\n}\n\nstatic BOOL security_md5_16_32_32_Allow_FIPS(const BYTE* in0, const BYTE* in1, const BYTE* in2,\n                                             BYTE* output)\n{\n\tWINPR_DIGEST_CTX* md5 = NULL;\n\tBOOL result = FALSE;\n\n\tif (!(md5 = winpr_Digest_New()))\n\t\treturn FALSE;\n\tif (!winpr_Digest_Init_Allow_FIPS(md5, WINPR_MD_MD5))\n\t\tgoto out;\n\tif (!winpr_Digest_Update(md5, in0, 16))\n\t\tgoto out;\n\tif (!winpr_Digest_Update(md5, in1, 32))\n\t\tgoto out;\n\tif (!winpr_Digest_Update(md5, in2, 32))\n\t\tgoto out;\n\tif (!winpr_Digest_Final(md5, output, WINPR_MD5_DIGEST_LENGTH))\n\t\tgoto out;\n\n\tresult = TRUE;\nout:\n\twinpr_Digest_Free(md5);\n\treturn result;\n}\n\nBOOL security_licensing_encryption_key(const BYTE* session_key_blob, const BYTE* client_random,\n                                       const BYTE* server_random, BYTE* output)\n{\n\t/* LicensingEncryptionKey = MD5(Second128Bits(SessionKeyBlob) + ClientRandom + ServerRandom))\n\t * Allow FIPS use of MD5 here, this is just used for creating the licensing encryption key as\n\t * described in MS-RDPELE. This is for RDP licensing packets which will already be encrypted\n\t * under FIPS, so the use of MD5 here is not for sensitive data protection. */\n\treturn security_md5_16_32_32_Allow_FIPS(&session_key_blob[16], client_random, server_random,\n\t                                        output);\n}\n\nstatic void security_UINT32_le(BYTE* output, UINT32 value)\n{\n\toutput[0] = (value)&0xFF;\n\toutput[1] = (value >> 8) & 0xFF;\n\toutput[2] = (value >> 16) & 0xFF;\n\toutput[3] = (value >> 24) & 0xFF;\n}\n\nBOOL security_mac_data(const BYTE* mac_salt_key, const BYTE* data, UINT32 length, BYTE* output)\n{\n\tWINPR_DIGEST_CTX* sha1 = NULL;\n\tWINPR_DIGEST_CTX* md5 = NULL;\n\tBYTE length_le[4];\n\tBYTE sha1_digest[WINPR_SHA1_DIGEST_LENGTH];\n\tBOOL result = FALSE;\n\t/* MacData = MD5(MacSaltKey + pad2 + SHA1(MacSaltKey + pad1 + length + data)) */\n\tsecurity_UINT32_le(length_le, length); /* length must be little-endian */\n\n\t/* SHA1_Digest = SHA1(MacSaltKey + pad1 + length + data) */\n\tif (!(sha1 = winpr_Digest_New()))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Init(sha1, WINPR_MD_SHA1))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, mac_salt_key, 16)) /* MacSaltKey */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, pad1, sizeof(pad1))) /* pad1 */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, length_le, sizeof(length_le))) /* length */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, data, length)) /* data */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(sha1, sha1_digest, sizeof(sha1_digest)))\n\t\tgoto out;\n\n\t/* MacData = MD5(MacSaltKey + pad2 + SHA1_Digest) */\n\tif (!(md5 = winpr_Digest_New()))\n\t\tgoto out;\n\n\t/* Allow FIPS override for use of MD5 here, this is only used for creating the MACData field of\n\t * the */\n\t/* Client Platform Challenge Response packet (from MS-RDPELE section 2.2.2.5). This is for RDP\n\t * licensing packets */\n\t/* which will already be encrypted under FIPS, so the use of MD5 here is not for sensitive data\n\t * protection. */\n\tif (!winpr_Digest_Init_Allow_FIPS(md5, WINPR_MD_MD5))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, mac_salt_key, 16)) /* MacSaltKey */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, pad2, sizeof(pad2))) /* pad2 */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, sha1_digest, sizeof(sha1_digest))) /* SHA1_Digest */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(md5, output, WINPR_MD5_DIGEST_LENGTH))\n\t\tgoto out;\n\n\tresult = TRUE;\nout:\n\twinpr_Digest_Free(sha1);\n\twinpr_Digest_Free(md5);\n\treturn result;\n}\n\nBOOL security_mac_signature(rdpRdp* rdp, const BYTE* data, UINT32 length, BYTE* output)\n{\n\tWINPR_DIGEST_CTX* sha1 = NULL;\n\tWINPR_DIGEST_CTX* md5 = NULL;\n\tBYTE length_le[4];\n\tBYTE md5_digest[WINPR_MD5_DIGEST_LENGTH];\n\tBYTE sha1_digest[WINPR_SHA1_DIGEST_LENGTH];\n\tBOOL result = FALSE;\n\tsecurity_UINT32_le(length_le, length); /* length must be little-endian */\n\n\t/* SHA1_Digest = SHA1(MACKeyN + pad1 + length + data) */\n\tif (!(sha1 = winpr_Digest_New()))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Init(sha1, WINPR_MD_SHA1))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, rdp->sign_key, rdp->rc4_key_len)) /* MacKeyN */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, pad1, sizeof(pad1))) /* pad1 */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, length_le, sizeof(length_le))) /* length */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, data, length)) /* data */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(sha1, sha1_digest, sizeof(sha1_digest)))\n\t\tgoto out;\n\n\t/* MACSignature = First64Bits(MD5(MACKeyN + pad2 + SHA1_Digest)) */\n\tif (!(md5 = winpr_Digest_New()))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Init(md5, WINPR_MD_MD5))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, rdp->sign_key, rdp->rc4_key_len)) /* MacKeyN */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, pad2, sizeof(pad2))) /* pad2 */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, sha1_digest, sizeof(sha1_digest))) /* SHA1_Digest */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(md5, md5_digest, sizeof(md5_digest)))\n\t\tgoto out;\n\n\tmemcpy(output, md5_digest, 8);\n\tresult = TRUE;\nout:\n\twinpr_Digest_Free(sha1);\n\twinpr_Digest_Free(md5);\n\treturn result;\n}\n\nBOOL security_salted_mac_signature(rdpRdp* rdp, const BYTE* data, UINT32 length, BOOL encryption,\n                                   BYTE* output)\n{\n\tWINPR_DIGEST_CTX* sha1 = NULL;\n\tWINPR_DIGEST_CTX* md5 = NULL;\n\tBYTE length_le[4];\n\tBYTE use_count_le[4];\n\tBYTE md5_digest[WINPR_MD5_DIGEST_LENGTH];\n\tBYTE sha1_digest[WINPR_SHA1_DIGEST_LENGTH];\n\tBOOL result = FALSE;\n\tsecurity_UINT32_le(length_le, length); /* length must be little-endian */\n\n\tif (encryption)\n\t{\n\t\tsecurity_UINT32_le(use_count_le, rdp->encrypt_checksum_use_count);\n\t}\n\telse\n\t{\n\t\t/*\n\t\t * We calculate checksum on plain text, so we must have already\n\t\t * decrypt it, which means decrypt_checksum_use_count is off by one.\n\t\t */\n\t\tsecurity_UINT32_le(use_count_le, rdp->decrypt_checksum_use_count - 1);\n\t}\n\n\t/* SHA1_Digest = SHA1(MACKeyN + pad1 + length + data) */\n\tif (!(sha1 = winpr_Digest_New()))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Init(sha1, WINPR_MD_SHA1))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, rdp->sign_key, rdp->rc4_key_len)) /* MacKeyN */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, pad1, sizeof(pad1))) /* pad1 */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, length_le, sizeof(length_le))) /* length */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, data, length)) /* data */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, use_count_le, sizeof(use_count_le))) /* encryptionCount */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(sha1, sha1_digest, sizeof(sha1_digest)))\n\t\tgoto out;\n\n\t/* MACSignature = First64Bits(MD5(MACKeyN + pad2 + SHA1_Digest)) */\n\tif (!(md5 = winpr_Digest_New()))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Init(md5, WINPR_MD_MD5))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, rdp->sign_key, rdp->rc4_key_len)) /* MacKeyN */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, pad2, sizeof(pad2))) /* pad2 */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, sha1_digest, sizeof(sha1_digest))) /* SHA1_Digest */\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(md5, md5_digest, sizeof(md5_digest)))\n\t\tgoto out;\n\n\tmemcpy(output, md5_digest, 8);\n\tresult = TRUE;\nout:\n\twinpr_Digest_Free(sha1);\n\twinpr_Digest_Free(md5);\n\treturn result;\n}\n\nstatic BOOL security_A(BYTE* master_secret, const BYTE* client_random, BYTE* server_random,\n                       BYTE* output)\n{\n\treturn security_premaster_hash(\"A\", 1, master_secret, client_random, server_random,\n\t                               &output[0]) &&\n\t       security_premaster_hash(\"BB\", 2, master_secret, client_random, server_random,\n\t                               &output[16]) &&\n\t       security_premaster_hash(\"CCC\", 3, master_secret, client_random, server_random,\n\t                               &output[32]);\n}\n\nstatic BOOL security_X(BYTE* master_secret, const BYTE* client_random, BYTE* server_random,\n                       BYTE* output)\n{\n\treturn security_premaster_hash(\"X\", 1, master_secret, client_random, server_random,\n\t                               &output[0]) &&\n\t       security_premaster_hash(\"YY\", 2, master_secret, client_random, server_random,\n\t                               &output[16]) &&\n\t       security_premaster_hash(\"ZZZ\", 3, master_secret, client_random, server_random,\n\t                               &output[32]);\n}\n\nstatic void fips_expand_key_bits(BYTE* in, BYTE* out)\n{\n\tBYTE buf[21], c;\n\tint i, b, p, r;\n\n\t/* reverse every byte in the key */\n\tfor (i = 0; i < 21; i++)\n\t\tbuf[i] = fips_reverse_table[in[i]];\n\n\t/* insert a zero-bit after every 7th bit */\n\tfor (i = 0, b = 0; i < 24; i++, b += 7)\n\t{\n\t\tp = b / 8;\n\t\tr = b % 8;\n\n\t\tif (r <= 1)\n\t\t{\n\t\t\tout[i] = (buf[p] << r) & 0xfe;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/* c is accumulator */\n\t\t\tc = buf[p] << r;\n\t\t\tc |= buf[p + 1] >> (8 - r);\n\t\t\tout[i] = c & 0xfe;\n\t\t}\n\t}\n\n\t/* reverse every byte */\n\t/* alter lsb so the byte has odd parity */\n\tfor (i = 0; i < 24; i++)\n\t\tout[i] = fips_oddparity_table[fips_reverse_table[out[i]]];\n}\n\nBOOL security_establish_keys(const BYTE* client_random, rdpRdp* rdp)\n{\n\tBYTE pre_master_secret[48];\n\tBYTE master_secret[48];\n\tBYTE session_key_blob[48];\n\tBYTE* server_random;\n\tBYTE salt[] = { 0xD1, 0x26, 0x9E }; /* 40 bits: 3 bytes, 56 bits: 1 byte */\n\trdpSettings* settings;\n\tBOOL status;\n\tsettings = rdp->settings;\n\tserver_random = settings->ServerRandom;\n\n\tif (settings->EncryptionMethods == ENCRYPTION_METHOD_FIPS)\n\t{\n\t\tWINPR_DIGEST_CTX* sha1;\n\t\tBYTE client_encrypt_key_t[WINPR_SHA1_DIGEST_LENGTH + 1];\n\t\tBYTE client_decrypt_key_t[WINPR_SHA1_DIGEST_LENGTH + 1];\n\n\t\tif (!(sha1 = winpr_Digest_New()))\n\t\t\treturn FALSE;\n\n\t\tif (!winpr_Digest_Init(sha1, WINPR_MD_SHA1) ||\n\t\t    !winpr_Digest_Update(sha1, client_random + 16, 16) ||\n\t\t    !winpr_Digest_Update(sha1, server_random + 16, 16) ||\n\t\t    !winpr_Digest_Final(sha1, client_encrypt_key_t, sizeof(client_encrypt_key_t)))\n\t\t{\n\t\t\twinpr_Digest_Free(sha1);\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tclient_encrypt_key_t[20] = client_encrypt_key_t[0];\n\n\t\tif (!winpr_Digest_Init(sha1, WINPR_MD_SHA1) ||\n\t\t    !winpr_Digest_Update(sha1, client_random, 16) ||\n\t\t    !winpr_Digest_Update(sha1, server_random, 16) ||\n\t\t    !winpr_Digest_Final(sha1, client_decrypt_key_t, sizeof(client_decrypt_key_t)))\n\t\t{\n\t\t\twinpr_Digest_Free(sha1);\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tclient_decrypt_key_t[20] = client_decrypt_key_t[0];\n\n\t\tif (!winpr_Digest_Init(sha1, WINPR_MD_SHA1) ||\n\t\t    !winpr_Digest_Update(sha1, client_decrypt_key_t, WINPR_SHA1_DIGEST_LENGTH) ||\n\t\t    !winpr_Digest_Update(sha1, client_encrypt_key_t, WINPR_SHA1_DIGEST_LENGTH) ||\n\t\t    !winpr_Digest_Final(sha1, rdp->fips_sign_key, WINPR_SHA1_DIGEST_LENGTH))\n\t\t{\n\t\t\twinpr_Digest_Free(sha1);\n\t\t\treturn FALSE;\n\t\t}\n\n\t\twinpr_Digest_Free(sha1);\n\n\t\tif (rdp->settings->ServerMode)\n\t\t{\n\t\t\tfips_expand_key_bits(client_encrypt_key_t, rdp->fips_decrypt_key);\n\t\t\tfips_expand_key_bits(client_decrypt_key_t, rdp->fips_encrypt_key);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfips_expand_key_bits(client_encrypt_key_t, rdp->fips_encrypt_key);\n\t\t\tfips_expand_key_bits(client_decrypt_key_t, rdp->fips_decrypt_key);\n\t\t}\n\t}\n\n\tmemcpy(pre_master_secret, client_random, 24);\n\tmemcpy(pre_master_secret + 24, server_random, 24);\n\n\tif (!security_A(pre_master_secret, client_random, server_random, master_secret) ||\n\t    !security_X(master_secret, client_random, server_random, session_key_blob))\n\t{\n\t\treturn FALSE;\n\t}\n\n\tmemcpy(rdp->sign_key, session_key_blob, 16);\n\n\tif (rdp->settings->ServerMode)\n\t{\n\t\tstatus = security_md5_16_32_32(&session_key_blob[16], client_random, server_random,\n\t\t                               rdp->encrypt_key);\n\t\tstatus &= security_md5_16_32_32(&session_key_blob[32], client_random, server_random,\n\t\t                                rdp->decrypt_key);\n\t}\n\telse\n\t{\n\t\t/* Allow FIPS use of MD5 here, this is just used for generation of the SessionKeyBlob as\n\t\t * described in MS-RDPELE. */\n\t\t/* This is for RDP licensing packets which will already be encrypted under FIPS, so the use\n\t\t * of MD5 here is not */\n\t\t/* for sensitive data protection. */\n\t\tstatus = security_md5_16_32_32_Allow_FIPS(&session_key_blob[16], client_random,\n\t\t                                          server_random, rdp->decrypt_key);\n\t\tstatus &= security_md5_16_32_32_Allow_FIPS(&session_key_blob[32], client_random,\n\t\t                                           server_random, rdp->encrypt_key);\n\t}\n\n\tif (!status)\n\t\treturn FALSE;\n\n\tif (settings->EncryptionMethods == ENCRYPTION_METHOD_40BIT)\n\t{\n\t\tmemcpy(rdp->sign_key, salt, 3);\n\t\tmemcpy(rdp->decrypt_key, salt, 3);\n\t\tmemcpy(rdp->encrypt_key, salt, 3);\n\t\trdp->rc4_key_len = 8;\n\t}\n\telse if (settings->EncryptionMethods == ENCRYPTION_METHOD_56BIT)\n\t{\n\t\tmemcpy(rdp->sign_key, salt, 1);\n\t\tmemcpy(rdp->decrypt_key, salt, 1);\n\t\tmemcpy(rdp->encrypt_key, salt, 1);\n\t\trdp->rc4_key_len = 8;\n\t}\n\telse if (settings->EncryptionMethods == ENCRYPTION_METHOD_128BIT)\n\t{\n\t\trdp->rc4_key_len = 16;\n\t}\n\n\tmemcpy(rdp->decrypt_update_key, rdp->decrypt_key, 16);\n\tmemcpy(rdp->encrypt_update_key, rdp->encrypt_key, 16);\n\trdp->decrypt_use_count = 0;\n\trdp->decrypt_checksum_use_count = 0;\n\trdp->encrypt_use_count = 0;\n\trdp->encrypt_checksum_use_count = 0;\n\treturn TRUE;\n}\n\nstatic BOOL security_key_update(BYTE* key, BYTE* update_key, int key_len, rdpRdp* rdp)\n{\n\tBYTE sha1h[WINPR_SHA1_DIGEST_LENGTH];\n\tWINPR_DIGEST_CTX* sha1 = NULL;\n\tWINPR_DIGEST_CTX* md5 = NULL;\n\tWINPR_RC4_CTX* rc4 = NULL;\n\tBYTE salt[] = { 0xD1, 0x26, 0x9E }; /* 40 bits: 3 bytes, 56 bits: 1 byte */\n\tBOOL result = FALSE;\n\tWLog_DBG(TAG, \"updating RDP key\");\n\n\tif (!(sha1 = winpr_Digest_New()))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Init(sha1, WINPR_MD_SHA1))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, update_key, key_len))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, pad1, sizeof(pad1)))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(sha1, key, key_len))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(sha1, sha1h, sizeof(sha1h)))\n\t\tgoto out;\n\n\tif (!(md5 = winpr_Digest_New()))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Init(md5, WINPR_MD_MD5))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, update_key, key_len))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, pad2, sizeof(pad2)))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Update(md5, sha1h, sizeof(sha1h)))\n\t\tgoto out;\n\n\tif (!winpr_Digest_Final(md5, key, WINPR_MD5_DIGEST_LENGTH))\n\t\tgoto out;\n\n\tif (!(rc4 = winpr_RC4_New(key, key_len)))\n\t\tgoto out;\n\n\tif (!winpr_RC4_Update(rc4, key_len, key, key))\n\t\tgoto out;\n\n\tif (rdp->settings->EncryptionMethods == ENCRYPTION_METHOD_40BIT)\n\t\tmemcpy(key, salt, 3);\n\telse if (rdp->settings->EncryptionMethods == ENCRYPTION_METHOD_56BIT)\n\t\tmemcpy(key, salt, 1);\n\n\tresult = TRUE;\nout:\n\twinpr_Digest_Free(sha1);\n\twinpr_Digest_Free(md5);\n\twinpr_RC4_Free(rc4);\n\treturn result;\n}\n\nBOOL security_encrypt(BYTE* data, size_t length, rdpRdp* rdp)\n{\n\tBOOL rc = FALSE;\n\tEnterCriticalSection(&rdp->critical);\n\tif (rdp->encrypt_use_count >= 4096)\n\t{\n\t\tif (!security_key_update(rdp->encrypt_key, rdp->encrypt_update_key, rdp->rc4_key_len, rdp))\n\t\t\tgoto fail;\n\n\t\twinpr_RC4_Free(rdp->rc4_encrypt_key);\n\t\trdp->rc4_encrypt_key = winpr_RC4_New(rdp->encrypt_key, rdp->rc4_key_len);\n\n\t\tif (!rdp->rc4_encrypt_key)\n\t\t\tgoto fail;\n\n\t\trdp->encrypt_use_count = 0;\n\t}\n\n\tif (!winpr_RC4_Update(rdp->rc4_encrypt_key, length, data, data))\n\t\tgoto fail;\n\n\trdp->encrypt_use_count++;\n\trdp->encrypt_checksum_use_count++;\n\trc = TRUE;\nfail:\n\tLeaveCriticalSection(&rdp->critical);\n\treturn rc;\n}\n\nBOOL security_decrypt(BYTE* data, size_t length, rdpRdp* rdp)\n{\n\tif (rdp->rc4_decrypt_key == NULL)\n\t\treturn FALSE;\n\n\tif (rdp->decrypt_use_count >= 4096)\n\t{\n\t\tif (!security_key_update(rdp->decrypt_key, rdp->decrypt_update_key, rdp->rc4_key_len, rdp))\n\t\t\treturn FALSE;\n\n\t\twinpr_RC4_Free(rdp->rc4_decrypt_key);\n\t\trdp->rc4_decrypt_key = winpr_RC4_New(rdp->decrypt_key, rdp->rc4_key_len);\n\n\t\tif (!rdp->rc4_decrypt_key)\n\t\t\treturn FALSE;\n\n\t\trdp->decrypt_use_count = 0;\n\t}\n\n\tif (!winpr_RC4_Update(rdp->rc4_decrypt_key, length, data, data))\n\t\treturn FALSE;\n\n\trdp->decrypt_use_count += 1;\n\trdp->decrypt_checksum_use_count++;\n\treturn TRUE;\n}\n\nBOOL security_hmac_signature(const BYTE* data, size_t length, BYTE* output, rdpRdp* rdp)\n{\n\tBYTE buf[WINPR_SHA1_DIGEST_LENGTH];\n\tBYTE use_count_le[4];\n\tWINPR_HMAC_CTX* hmac;\n\tBOOL result = FALSE;\n\tsecurity_UINT32_le(use_count_le, rdp->encrypt_use_count);\n\n\tif (!(hmac = winpr_HMAC_New()))\n\t\treturn FALSE;\n\n\tif (!winpr_HMAC_Init(hmac, WINPR_MD_SHA1, rdp->fips_sign_key, WINPR_SHA1_DIGEST_LENGTH))\n\t\tgoto out;\n\n\tif (!winpr_HMAC_Update(hmac, data, length))\n\t\tgoto out;\n\n\tif (!winpr_HMAC_Update(hmac, use_count_le, 4))\n\t\tgoto out;\n\n\tif (!winpr_HMAC_Final(hmac, buf, WINPR_SHA1_DIGEST_LENGTH))\n\t\tgoto out;\n\n\tmemmove(output, buf, 8);\n\tresult = TRUE;\nout:\n\twinpr_HMAC_Free(hmac);\n\treturn result;\n}\n\nBOOL security_fips_encrypt(BYTE* data, size_t length, rdpRdp* rdp)\n{\n\tBOOL rc = FALSE;\n\tsize_t olen;\n\n\tEnterCriticalSection(&rdp->critical);\n\tif (!winpr_Cipher_Update(rdp->fips_encrypt, data, length, data, &olen))\n\t\tgoto fail;\n\n\trdp->encrypt_use_count++;\n\trc = TRUE;\nfail:\n\tLeaveCriticalSection(&rdp->critical);\n\treturn rc;\n}\n\nBOOL security_fips_decrypt(BYTE* data, size_t length, rdpRdp* rdp)\n{\n\tsize_t olen;\n\n\tif (!rdp || !rdp->fips_decrypt)\n\t\treturn FALSE;\n\n\tif (!winpr_Cipher_Update(rdp->fips_decrypt, data, length, data, &olen))\n\t\treturn FALSE;\n\n\treturn TRUE;\n}\n\nBOOL security_fips_check_signature(const BYTE* data, size_t length, const BYTE* sig, rdpRdp* rdp)\n{\n\tBYTE buf[WINPR_SHA1_DIGEST_LENGTH];\n\tBYTE use_count_le[4];\n\tWINPR_HMAC_CTX* hmac;\n\tBOOL result = FALSE;\n\tsecurity_UINT32_le(use_count_le, rdp->decrypt_use_count);\n\n\tif (!(hmac = winpr_HMAC_New()))\n\t\treturn FALSE;\n\n\tif (!winpr_HMAC_Init(hmac, WINPR_MD_SHA1, rdp->fips_sign_key, WINPR_SHA1_DIGEST_LENGTH))\n\t\tgoto out;\n\n\tif (!winpr_HMAC_Update(hmac, data, length))\n\t\tgoto out;\n\n\tif (!winpr_HMAC_Update(hmac, use_count_le, 4))\n\t\tgoto out;\n\n\tif (!winpr_HMAC_Final(hmac, buf, WINPR_SHA1_DIGEST_LENGTH))\n\t\tgoto out;\n\n\trdp->decrypt_use_count++;\n\n\tif (!memcmp(sig, buf, 8))\n\t\tresult = TRUE;\n\nout:\n\twinpr_HMAC_Free(hmac);\n\treturn result;\n}\n"], "filenames": ["libfreerdp/core/security.c"], "buggy_code_start_loc": [818], "buggy_code_end_loc": [818], "fixing_code_start_loc": [819], "fixing_code_end_loc": [822], "type": "CWE-125", "message": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) read vulnerability has been detected in security_fips_decrypt in libfreerdp/core/security.c due to an uninitialized value.", "other": {"cve": {"id": "CVE-2020-13397", "sourceIdentifier": "cve@mitre.org", "published": "2020-05-22T18:15:11.737", "lastModified": "2020-11-09T21:46:12.207", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) read vulnerability has been detected in security_fips_decrypt in libfreerdp/core/security.c due to an uninitialized value."}, {"lang": "es", "value": "Se detect\u00f3 un problema en FreeRDP versiones anteriores a 2.1.1. Ha sido detectada una vulnerabilidad de lectura fuera de l\u00edmites (OOB) en la funci\u00f3n security_fips_decrypt en el archivo libfreerdp/core/security.c debido a un valor no inicializado."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 2.1}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-125"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:freerdp:freerdp:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.1", "matchCriteriaId": "123B2084-A9AE-4FD2-A64B-F78F1D7BC337"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:16.04:*:*:*:lts:*:*:*", "matchCriteriaId": "F7016A2A-8365-4F1A-89A2-7A19F2BCAE5B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:18.04:*:*:*:lts:*:*:*", "matchCriteriaId": "23A7C53F-B80F-4E6A-AFA9-58EEA84BE11D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:19.10:*:*:*:*:*:*:*", "matchCriteriaId": "A31C8344-3E02-4EB8-8BD8-4C84B7959624"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:20.04:*:*:*:lts:*:*:*", "matchCriteriaId": "902B8056-9E37-443B-8905-8AA93E2447FB"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:15.1:*:*:*:*:*:*:*", "matchCriteriaId": "B620311B-34A3-48A6-82DF-6F078D7A4493"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00080.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/FreeRDP/FreeRDP/commit/8fb6336a4072abcee8ce5bd6ae91104628c7bb69", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/FreeRDP/FreeRDP/commit/d6cd14059b257318f176c0ba3ee0a348826a9ef8", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/FreeRDP/FreeRDP/compare/2.1.0...2.1.1", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2020/08/msg00054.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/4379-1/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/4382-1/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/FreeRDP/FreeRDP/commit/d6cd14059b257318f176c0ba3ee0a348826a9ef8"}}