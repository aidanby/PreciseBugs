{"buggy_code": ["phpMyAdmin - ChangeLog\n======================\n\n4.0.4.0 (2013-06-17)\n- bug #3959 Using DefaultTabDatabase in NavigationTree for Database Click\n- bug #3961 Avoid Suhosin warning when in simulation mode\n- bug #3897 Row Statistics and Space usage bugs\n- bug #3966 Only display \"table has no unique column\" message when applicable\n- bug #3960 NavigationBarIconic config not honored\n- bug #3965 Default language wrong with zh-TW\n- bug #3921 Call to undefined function PMA_isSuperuser() if default server is\nnot set \n- bug #3971 Ctrl/shift + click opens links in same window\n- bug #3964 Import using https does not work\n- bug Missing removeCRLF option in ExportCsv and ExportExcel plugins\n- bug #3631 Drop not working Visio schema export.\n- bug #3645 Better handling of invalid ODS documents\n- bug #3976 Number of pages\n- bug #3922 User privileges, database name unescaped\n\n4.0.3.0 (2013-06-05)\n- bug #3941 Recent tables list always empty\n- bug #3933 Do not translate \"Open Document\" in export settings\n- bug #3927 List of tables is missing after expanding in the navigation frame\n- bug #3942 Warnings about reserved word for many non reserved words\n- bug #3912 Exporting row selection, resulted by ORDER BY query\n- bug #3957 Cookies must be enabled past this point\n- bug #3956 \"Browse foreign values\" search filter / page selector not working\n- bug #3579 NOW() function incorrectly selected (partial regression)\n- [security] Javascript execution vulnerability in Create view,\n  reported by Maxim Rupp (see PMASA-2013-6)\n\n4.0.2.0 (2013-05-24)\n- bug #3902 Cannot browse when table name contains keyword \"call\"\n+ center loading indicator for navigation refresh, related to bug #3920\n- bug #3925 Table sorting in navigation panel is case-sensitive\n- bug #3915 Import of CSV file (Replace table data with file) with duplicate values\n- bug #3907 undefined variables, function parameter problems\n- bug #3898 Structure not refreshed after column drop \n- bug #3926 View is not updatable\n- bug #3919 PropertiesIconic not honored\n- bug #3930 Databases to choose for specific privileges show up escaped\n- bug #3910 Export database with empty table as a php array, does not produce valid PHP\n- bug #3936 Query profiler chart not loading from SQL Query page\n- bug #3946 Missing CSV import option \"Do not abort on INSERT error\"\n- bug #3943 Missing Operations>Table options>AUTO_INCREMENT\n- bug Missing CREATE DATABASE statement when exporting at database level\n- bug #3924 Show warning when CSV file does not contain data for all columns\n- bug #3947 Missing Sql Query after modify structure\n- bug #3948 Server export problems\n- bug #3917 CountTables directive is deprecated\n\n4.0.1.0 (2013-05-14)\n- bug #3879 Import broken for CSV using LOAD DATA\n- bug #3889 When login fails and error display is active, login data is displayed\n- bug #3890 [import] Web server upload directory import fails\n- bug #3891 [import] Server upload folder import file name missing in success message \n+ rfe #1421 [auth] Add retry button on connection failure with config auth\n- bug #3894 [interface] Provide feedback if no columns selected for multi-submit\n- bug #3799 [interface] Incorrect select field change on ctrl key navigation in Firefox\n- bug #3885 [browse] display_binary_as_hex option causes unexpected behavior\n- bug #3899 Git commit links to Github missing\n- bug #3900 CSP WARN in Firefox console\n- bug #3901 Setup script warning for config auth (stored login data) shows link BBcode\n- bug #3895 [browse] Fixed getting BLOB data\n- bug #3905 [export] Custom Exporting exports all databases\n- bug #3909 [import] Import of CSV FIle to selected table doesn't work\n- bug #3904 Browsing an empty table should not display its Structure\n- bug #3908 Calendar widget improperly redirects to home \n- bug #3918 Greyed out tabs when there are no rows fixed \n- bug #3916 [interface] Missing scrollbar (original theme)\n+ [vendor] add tcpdf path to vendor_config.php\n- bug fix compat with tcpdf >= 6.0 (tested with 6.0.012)\n\n4.0.0.0 (2013-05-03)\n+ Patch #3481047 for rfe #3480477 Insert as new row enhancement\n+ Patch #3480999 Activate codemirror in the query window\n- Patch #3495284 XML Import - fix message and redirect\n+ rfe #3484063 Null checkbox behavior\n+ Patch #3497179 Contest-5: Add user: Allow create DB w/same name + grant u_%\n+ Patch #3498201 Contest-6: Export all privileges\n+ Patch #3502814 for rfe #3187077 Change password buttons should match\n+ rfe #3488640 Expand table-group in non-light navigation frame if only one\n+ Patch #3509360 Contest-3: Option \"Truncate table\" before \"insert\"\n+ Patch #3506552 Contest-2: Show index information in the data dictionary\n+ Patch #3510656 Contest-1: Ignoring foreign keys while dropping tables\n- Bug #3509686 Reverting sort on joined column does not work\n+ New transformation: append string\n+ rfe #3507804 Session upload progress (PHP 5.4)\n+ rfe #3488185 draggable columns vs copy column name\n+ Patch #3507001 Contest-4: Textarea for large character columns\n+ Removed the PHP version of the ENUM editor\n+ Patch #3507111 Display distinct results, linked to corresponding data rows\n- bug #3507917 [export] JSON has unescaped values for allegedly numeric columns\n+ rfe #3516187 show tables creation, last update, last check timestamps in db_structure\n- bug #3059806 Supporting running from CIFS/Samba shares\n- bug #3516341 [export] Open Document Text, Word and Texy! Text show table structure twice\n- bug [export] Texy! Text: Columns containing Pipe Character don't export properly\n+ [export] Show triggers in Open Document Text, Word and Texy! Text\n- Patch #3415061 [auth] Login screen appears under the page\n+ rfe #3517354 [interface] Allow disabling CodeMirror with $cfg['CodemirrorEnable'] = false\n+ rfe #3475567 [interface] New directive $cfg['HideStructureActions']\n- bug #3468272 [import] Fixed import of ODS with more paragraphs in a cell\n- bug #3510196 [core] Improved redirecting with ForceSSL option\n+ rfe #3518852 [edit] edit blob but not other binary, new option $cfg['ProtectBinary'] = 'noblob'\n+ Hide language select box if there are no locales installed\n+ Removed some directives: verbose_check, SuggestDBName, LightTabs,\nVerboseMultiSubmit, ReplaceHelpImg\n- Patch #3500882 Fixing checkbox behaviour while editing identical rows\n+ rfe #3441722 [interface] Display description of datatypes\n+ rfe #3517835 [structure] Move columns easily\n+ Ajaxified \"Create View\" functionality\n+ [import] New plugin: import mediawiki\n+ New navigation system\n+ Discontinued the use of a frame-based layout\n+ rfe #3528994 [interface] Allow wrapping possibly long values in replication-status table\n+ [interface] Autoselect username input on cookie login page\n- bug #3563799 [interface] Grid editing destroying huge amount of data\n+ [import] Remove support for the unactive docSQL import format\n- bug #3577443 [edit] \"Browse foreign values\" does not show on ajax edit\n+ rfe #3522109 [browse] Grid editing: action to trigger it (or disable)\n- bug #3526598 [interface] SQL query not shown when creating table\n+ Dropped configuration directive: AllowThirdPartyFraming\n+ Dropped configuration directive: LeftFrameLight\n+ Dropped configuration directive: DisplayDatabasesList\n+ Dropped configuration directives: ShowTooltipAliasDB and ShowTooltipAliasTB\n+ Dropped configuration directive: NaviDatabaseNameColor\n+ Added configuration directive: MaxNavigationItems\n+ Renamed configuration directive: LeftFrameDBTree => NavigationTreeEnableGrouping\n+ Renamed configuration directive: LeftFrameDBSeparator => NavigationTreeDbSeparator\n+ Renamed configuration directive: LeftFrameTableSeparator => NavigationTreeTableSeparator\n+ Renamed configuration directive: LeftFrameTableLevel => NavigationTreeTableLevel\n+ Renamed configuration directive: LeftPointerEnable => NavigationTreePointerEnable\n+ Renamed configuration directive: LeftDefaultTabTable => NavigationTreeDefaultTabTable\n+ Renamed configuration directive: LeftDisplayTableFilterMinimum => NavigationTreeDisplayTableFilterMinimum\n+ Renamed configuration directive: LeftDisplayLogo => NavigationDisplayLogo\n+ Renamed configuration directive: LeftLogoLink => NavigationLogoLink\n+ Renamed configuration directive: LeftLogoLinkWindow => NavigationLogoLinkWindow\n+ Renamed configuration directive: LeftDisplayServers => NavigationDisplayServers\n+ Renamed configuration directive: LeftRecentTable => NumRecentTables\n+ Renamed configuration directive: LeftDisplayDatabaseFilterMinimum => NavigationTreeDisplayDbFilterMinimum\n+ Removed the \"Mark row on click\" feature; must now click the checkbox to mark\n+ Removed the \"Synchronize\" feature\n+ Improved layout of server variables page\n+ rfe #1052091 [config] Double-underscores in PMA table names\n+ Improved the \"More\" dropdown on the table structure page\n+ [interface] Added \"scroll to top\" link in menubar\n+ [designer] Fullscreen mode for the designer\n+ Upgraded jquery to v1.8.3 and jquery-ui to v1.9.2\n+ Patch #3597529 [status] Add raw value as title on server status page\n+ Support MySQL 5.6 partitioning\n+ Removed the AjaxEnable directive\n+ rfe #3542567 Accept IPv6 ranges and IPv6 CIDR notations in $cfg['Servers'][$i]['AllowDeny']['rules']\n- Bug #3576788 Grid editing shows the value before silent truncation\n- Upgraded jqPlot to 1.0.4 r1121\n- Upgraded to jquery-ui-timepicker-addon 1.1.1\n+ rfe #3599046 [interface] Added comments for indexes\n- Replaced qtip with jQuery UI tooltip\n- Upgraded CodeMirror to 2.37\n- bug #2951 [export] Correctly export decimal fields.\n- bug #3762 [core] Make Advisor work on Windows withou COM extension.\n- bug #3519 [export] Prevent infinite recursion in PDF export.\n- bug #3827 Table specific privileges not displayed for db name containing\nunderscore \n- rfe #1386 Add IF NOT EXISTS clause when copying database\n- No longer package .travis.yml configuration file when creating a release.\n- bug #3830 Can't export custom query because it lowercases table names\n- bug #3829 Enabling query profiling crashes javascript based navigation\n+ rfe #879 Reserved word warning\n+ Remove the database ordering sub-feature of the only_db directive\n- bug #3840 When exporting to gzip format, the data is compressed 2 times\n+ rfe #1319 Permit to create index when creating foreign key\n- bug #3703 Incorrect updating of the list of users\n- bug #3853 Blowfish implementation might be broken (replace with phpseclib)\n- bug #3865 Using like operator on each backslash needs 4 backslash protection\n- bug #3860 Displayed git revision info is not set\n- bug #3871 Check referential integrity broken across databases\n- bug #3874 [export] No preselected option when exporting table\n- bug #3873 Can't copy table to target database if table exists there\n- bug #3683 Incorrect listing of records from to count\n- bug #3876 [import] PHP 5.2 - unexpected T_PAAMAYIM_NEKUDOTAYIM\n- [security] Local file inclusion vulnerability, reported by Janek Vind\n  (see PMASA-2013-4)\n- [security] Global variables overwrite in export.php, reported by Janek Vind\n  (see PMASA-2013-5)\n- bug #3892 [export] SQL Export files are empty\n\n3.5.8.1 (2013-04-24)\n- [security] Remote code execution (preg_replace), reported by Janek Vind\n  (see PMASA-2013-2)\n- [security] Locally Saved SQL Dump File Multiple File Extension Remote Code\n  Execution, reported by Janek Vind (see PMASA-2013-3)\n\n3.5.8.0 (2013-04-08)\n- bug #3828 MariaDB reported as MySQL\n- bug #3854 Incorrect header for Safari 6.0\n- bug #3705 Attempt to open trigger for edit gives NULL\n- Use HTML5 DOCTYPE \n- [security] Self-XSS on GIS visualisation page, reported by Janek Vind\n- bug #3800 Incorrect keyhandler behaviour #2\n\n3.5.7.0 (2013-02-15)\n- bug #3779 [core] Problem with backslash in enum fields\n- bug #3816 Missing server_processlist.php\n- bug #3821 Safari: white page\n- Correct detection of the Chrome browser\n\n3.5.6.0 (2013-01-28)\n- bug #3593604 [status] Erroneous advisor rule\n- bug #3596070 [status] localStorage broken in server status monitor\n- bug #3598736 [routines] Editing a procedure with special characters\n- bug #3600322 [core] Visualize GIS data throws Fatal Error\n- bug #3599362 [core] Double-escaped error message\n- bug #3776 [cookies] Login without auth on second server\n\n         --- Older ChangeLogs can be found on our project website ---\n                     http://www.phpmyadmin.net/old-stuff/ChangeLogs/\n\n# vim: et ts=4 sw=4 sts=4\n# vim: ft=changelog fenc=utf-8\n# vim: fde=getline(v\\:lnum-1)=~'^\\\\s*$'&&getline(v\\:lnum)=~'\\\\S'?'>1'\\:1&&v\\:lnum>4&&getline(v\\:lnum)!~'^#'\n# vim: fdn=1 fdm=expr\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Core script for import, this is just the glue around all other stuff\n *\n * @package PhpMyAdmin\n */\n\n/**\n * Get the variables sent or posted to this script and a core script\n */\nrequire_once 'libraries/common.inc.php';\n//require_once 'libraries/display_import_functions.lib.php';\n\nif (isset($_REQUEST['show_as_php'])) {\n    $GLOBALS['show_as_php'] = $_REQUEST['show_as_php'];\n}\n\n/**\n * Sets globals from $_POST\n */\n$post_params = array(\n    'action_bookmark',\n    'allow_interrupt',\n    'bkm_label',\n    'bookmark_variable',\n    'charset_of_file',\n    'format',\n    'id_bookmark',\n    'import_type',\n    'is_js_confirmed',\n    'MAX_FILE_SIZE',\n    'message_to_show',\n    'noplugin',\n    'skip_queries',\n    'local_import_file'\n);\n\n// TODO: adapt full list of allowed parameters, as in export.php\nforeach ($post_params as $one_post_param) {\n    if (isset($_POST[$one_post_param])) {\n        $GLOBALS[$one_post_param] = $_POST[$one_post_param];\n    }\n}\n\n// reset import messages for ajax request\n$_SESSION['Import_message']['message'] = null;\n$_SESSION['Import_message']['go_back_url'] = null;\n// default values\n$GLOBALS['reload'] = false;\n\n// Use to identify curren cycle is executing\n// a multiquery statement or stored routine\nif (!isset($_SESSION['is_multi_query'])) {\n    $_SESSION['is_multi_query'] = false;\n}\n\n// Are we just executing plain query or sql file?\n// (eg. non import, but query box/window run)\nif (! empty($sql_query)) {\n    // run SQL query\n    $import_text = $sql_query;\n    $import_type = 'query';\n    $format = 'sql';\n\n    // refresh navigation and main panels\n    if (preg_match('/^(DROP)\\s+(VIEW|TABLE|DATABASE|SCHEMA)\\s+/i', $sql_query)) {\n        $GLOBALS['reload'] = true;\n    }\n\n    // refresh navigation panel only\n    if (preg_match('/^(CREATE|ALTER)\\s+(VIEW|TABLE|DATABASE|SCHEMA)\\s+/i', $sql_query)) {\n        $ajax_reload['reload'] = true;\n    }\n\n    // do a dynamic reload if table is RENAMED\n    // (by sending the instruction to the AJAX response handler)\n    if (preg_match('/^RENAME\\s+TABLE\\s+(.*?)\\s+TO\\s+(.*?)($|;|\\s)/i', $sql_query, $rename_table_names)) {\n        $ajax_reload['table_name'] = PMA_Util::unQuote($rename_table_names[2]);\n        $ajax_reload['reload'] = true;\n    }\n\n    $sql_query = '';\n} elseif (! empty($sql_localfile)) {\n    // run SQL file on server\n    $local_import_file = $sql_localfile;\n    $import_type = 'queryfile';\n    $format = 'sql';\n    unset($sql_localfile);\n} elseif (! empty($sql_file)) {\n    // run uploaded SQL file\n    $import_file = $sql_file;\n    $import_type = 'queryfile';\n    $format = 'sql';\n    unset($sql_file);\n} elseif (! empty($id_bookmark)) {\n    // run bookmark\n    $import_type = 'query';\n    $format = 'sql';\n}\n\n// If we didn't get any parameters, either user called this directly, or\n// upload limit has been reached, let's assume the second possibility.\n;\nif ($_POST == array() && $_GET == array()) {\n    $message = PMA_Message::error(\n        __('You probably tried to upload a file that is too large. Please refer to %sdocumentation%s for a workaround for this limit.')\n    );\n    $message->addParam('[doc@faq1-16]');\n    $message->addParam('[/doc]');\n\n    // so we can obtain the message\n    $_SESSION['Import_message']['message'] = $message->getDisplay();\n    $_SESSION['Import_message']['go_back_url'] = $goto;\n\n    $message->display();\n    exit; // the footer is displayed automatically\n}\n\n/**\n * Sets globals from $_POST patterns, for import plugins\n * We only need to load the selected plugin\n */\n\n$post_patterns = array(\n    '/^force_file_/',\n    '/^'. $format . '_/'\n);\nforeach (array_keys($_POST) as $post_key) {\n    foreach ($post_patterns as $one_post_pattern) {\n        if (preg_match($one_post_pattern, $post_key)) {\n            $GLOBALS[$post_key] = $_POST[$post_key];\n        }\n    }\n}\n\n// Check needed parameters\nPMA_Util::checkParameters(array('import_type', 'format'));\n\n// We don't want anything special in format\n$format = PMA_securePath($format);\n\n// Import functions\nrequire_once 'libraries/import.lib.php';\n\n// Create error and goto url\nif ($import_type == 'table') {\n    $err_url = 'tbl_import.php?' . PMA_generate_common_url($db, $table);\n    $_SESSION['Import_message']['go_back_url'] = $err_url;\n    $goto = 'tbl_import.php';\n} elseif ($import_type == 'database') {\n    $err_url = 'db_import.php?' . PMA_generate_common_url($db);\n    $_SESSION['Import_message']['go_back_url'] = $err_url;\n    $goto = 'db_import.php';\n} elseif ($import_type == 'server') {\n    $err_url = 'server_import.php?' . PMA_generate_common_url();\n    $_SESSION['Import_message']['go_back_url'] = $err_url;\n    $goto = 'server_import.php';\n} else {\n    if (empty($goto) || !preg_match('@^(server|db|tbl)(_[a-z]*)*\\.php$@i', $goto)) {\n        if (strlen($table) && strlen($db)) {\n            $goto = 'tbl_structure.php';\n        } elseif (strlen($db)) {\n            $goto = 'db_structure.php';\n        } else {\n            $goto = 'server_sql.php';\n        }\n    }\n    if (strlen($table) && strlen($db)) {\n        $common = PMA_generate_common_url($db, $table);\n    } elseif (strlen($db)) {\n        $common = PMA_generate_common_url($db);\n    } else {\n        $common = PMA_generate_common_url();\n    }\n    $err_url  = $goto . '?' . $common\n        . (preg_match('@^tbl_[a-z]*\\.php$@', $goto)\n            ? '&amp;table=' . htmlspecialchars($table)\n            : '');\n    $_SESSION['Import_message']['go_back_url'] = $err_url;\n}\n\n\nif (strlen($db)) {\n    PMA_DBI_select_db($db);\n}\n\n@set_time_limit($cfg['ExecTimeLimit']);\nif (! empty($cfg['MemoryLimit'])) {\n    @ini_set('memory_limit', $cfg['MemoryLimit']);\n}\n\n$timestamp = time();\nif (isset($allow_interrupt)) {\n    $maximum_time = ini_get('max_execution_time');\n} else {\n    $maximum_time = 0;\n}\n\n// set default values\n$timeout_passed = false;\n$error = false;\n$read_multiply = 1;\n$finished = false;\n$offset = 0;\n$max_sql_len = 0;\n$file_to_unlink = '';\n$sql_query = '';\n$sql_query_disabled = false;\n$go_sql = false;\n$executed_queries = 0;\n$run_query = true;\n$charset_conversion = false;\n$reset_charset = false;\n$bookmark_created = false;\n\n// Bookmark Support: get a query back from bookmark if required\nif (! empty($id_bookmark)) {\n    $id_bookmark = (int)$id_bookmark;\n    include_once 'libraries/bookmark.lib.php';\n    switch ($action_bookmark) {\n    case 0: // bookmarked query that have to be run\n        $import_text = PMA_Bookmark_get(\n            $db,\n            $id_bookmark,\n            'id',\n            isset($action_bookmark_all)\n        );\n        if (isset($bookmark_variable) && ! empty($bookmark_variable)) {\n            $import_text = preg_replace(\n                '|/\\*(.*)\\[VARIABLE\\](.*)\\*/|imsU',\n                '${1}' . PMA_Util::sqlAddSlashes($bookmark_variable) . '${2}',\n                $import_text\n            );\n        }\n\n        // refresh navigation and main panels\n        if (preg_match('/^(DROP)\\s+(VIEW|TABLE|DATABASE|SCHEMA)\\s+/i', $import_text)) {\n            $GLOBALS['reload'] = true;\n        }\n\n        // refresh navigation panel only\n        if (preg_match('/^(CREATE|ALTER)\\s+(VIEW|TABLE|DATABASE|SCHEMA)\\s+/i', $import_text)) {\n            $ajax_reload['reload'] = true;\n        }\n        break;\n    case 1: // bookmarked query that have to be displayed\n        $import_text = PMA_Bookmark_get($db, $id_bookmark);\n        if ($GLOBALS['is_ajax_request'] == true) {\n            $message = PMA_Message::success(__('Showing bookmark'));\n            $response = PMA_Response::getInstance();\n            $response->isSuccess($message->isSuccess());\n            $response->addJSON('message', $message);\n            $response->addJSON('sql_query', $import_text);\n            $response->addJSON('action_bookmark', $action_bookmark);\n            exit;\n        } else {\n            $run_query = false;\n        }\n        break;\n    case 2: // bookmarked query that have to be deleted\n        $import_text = PMA_Bookmark_get($db, $id_bookmark);\n        PMA_Bookmark_delete($db, $id_bookmark);\n        if ($GLOBALS['is_ajax_request'] == true) {\n            $message = PMA_Message::success(__('The bookmark has been deleted.'));\n            $response = PMA_Response::getInstance();\n            $response->isSuccess($message->isSuccess());\n            $response->addJSON('message', $message);\n            $response->addJSON('action_bookmark', $action_bookmark);\n            $response->addJSON('id_bookmark', $id_bookmark);\n            exit;\n        } else {\n            $run_query = false;\n            $error = true; // this is kind of hack to skip processing the query\n        }\n        break;\n    }\n} // end bookmarks reading\n\n// Do no run query if we show PHP code\nif (isset($GLOBALS['show_as_php'])) {\n    $run_query = false;\n    $go_sql = true;\n}\n\n// We can not read all at once, otherwise we can run out of memory\n$memory_limit = trim(@ini_get('memory_limit'));\n// 2 MB as default\nif (empty($memory_limit)) {\n    $memory_limit = 2 * 1024 * 1024;\n}\n// In case no memory limit we work on 10MB chunks\nif ($memory_limit == -1) {\n    $memory_limit = 10 * 1024 * 1024;\n}\n\n// Calculate value of the limit\nif (strtolower(substr($memory_limit, -1)) == 'm') {\n    $memory_limit = (int)substr($memory_limit, 0, -1) * 1024 * 1024;\n} elseif (strtolower(substr($memory_limit, -1)) == 'k') {\n    $memory_limit = (int)substr($memory_limit, 0, -1) * 1024;\n} elseif (strtolower(substr($memory_limit, -1)) == 'g') {\n    $memory_limit = (int)substr($memory_limit, 0, -1) * 1024 * 1024 * 1024;\n} else {\n    $memory_limit = (int)$memory_limit;\n}\n\n// Just to be sure, there might be lot of memory needed for uncompression\n$read_limit = $memory_limit / 8;\n\n// handle filenames\nif (isset($_FILES['import_file'])) {\n    $import_file = $_FILES['import_file']['tmp_name'];\n}\nif (! empty($local_import_file) && ! empty($cfg['UploadDir'])) {\n\n    // sanitize $local_import_file as it comes from a POST\n    $local_import_file = PMA_securePath($local_import_file);\n\n    $import_file = PMA_Util::userDir($cfg['UploadDir'])\n        . $local_import_file;\n\n} elseif (empty($import_file) || ! is_uploaded_file($import_file)) {\n    $import_file  = 'none';\n}\n\n// Do we have file to import?\n\nif ($import_file != 'none' && ! $error) {\n    // work around open_basedir and other limitations\n    $open_basedir = @ini_get('open_basedir');\n\n    // If we are on a server with open_basedir, we must move the file\n    // before opening it. The doc explains how to create the \"./tmp\"\n    // directory\n\n    if (! empty($open_basedir)) {\n\n        $tmp_subdir = (PMA_IS_WINDOWS ? '.\\\\tmp\\\\' : 'tmp/');\n\n        if (is_writable($tmp_subdir)) {\n\n\n            $import_file_new = $tmp_subdir . basename($import_file) . uniqid();\n            if (move_uploaded_file($import_file, $import_file_new)) {\n                $import_file = $import_file_new;\n                $file_to_unlink = $import_file_new;\n            }\n\n            $size = filesize($import_file);\n        }\n    }\n\n    /**\n     *  Handle file compression\n     * @todo duplicate code exists in File.class.php\n     */\n    $compression = PMA_detectCompression($import_file);\n    if ($compression === false) {\n        $message = PMA_Message::error(__('File could not be read'));\n        $error = true;\n    } else {\n        switch ($compression) {\n        case 'application/bzip2':\n            if ($cfg['BZipDump'] && @function_exists('bzopen')) {\n                $import_handle = @bzopen($import_file, 'r');\n            } else {\n                $message = PMA_Message::error(\n                    __('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.')\n                );\n                $message->addParam($compression);\n                $error = true;\n            }\n            break;\n        case 'application/gzip':\n            if ($cfg['GZipDump'] && @function_exists('gzopen')) {\n                $import_handle = @gzopen($import_file, 'r');\n            } else {\n                $message = PMA_Message::error(\n                    __('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.')\n                );\n                $message->addParam($compression);\n                $error = true;\n            }\n            break;\n        case 'application/zip':\n            if ($cfg['ZipDump'] && @function_exists('zip_open')) {\n                /**\n                 * Load interface for zip extension.\n                 */\n                include_once 'libraries/zip_extension.lib.php';\n                $result = PMA_getZipContents($import_file);\n                if (! empty($result['error'])) {\n                    $message = PMA_Message::rawError($result['error']);\n                    $error = true;\n                } else {\n                    $import_text = $result['data'];\n                }\n            } else {\n                $message = PMA_Message::error(\n                    __('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.')\n                );\n                $message->addParam($compression);\n                $error = true;\n            }\n            break;\n        case 'none':\n            $import_handle = @fopen($import_file, 'r');\n            break;\n        default:\n            $message = PMA_Message::error(\n                __('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.')\n            );\n            $message->addParam($compression);\n            $error = true;\n            break;\n        }\n    }\n    // use isset() because zip compression type does not use a handle\n    if (! $error && isset($import_handle) && $import_handle === false) {\n        $message = PMA_Message::error(__('File could not be read'));\n        $error = true;\n    }\n} elseif (! $error) {\n    if (! isset($import_text) || empty($import_text)) {\n        $message = PMA_Message::error(\n            __('No data was received to import. Either no file name was submitted, or the file size exceeded the maximum size permitted by your PHP configuration. See [doc@faq1-16]FAQ 1.16[/doc].')\n        );\n        $error = true;\n    }\n}\n\n// so we can obtain the message\n//$_SESSION['Import_message'] = $message->getDisplay();\n\n// Convert the file's charset if necessary\nif ($GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE && isset($charset_of_file)) {\n    if ($charset_of_file != 'utf-8') {\n        $charset_conversion = true;\n    }\n} elseif (isset($charset_of_file) && $charset_of_file != 'utf8') {\n    if (PMA_DRIZZLE) {\n        // Drizzle doesn't support other character sets,\n        // so we can't fallback to SET NAMES - throw an error\n        $error = true;\n        $message = PMA_Message::error(\n            __('Cannot convert file\\'s character set without character set conversion library')\n        );\n    } else {\n        PMA_DBI_query('SET NAMES \\'' . $charset_of_file . '\\'');\n        // We can not show query in this case, it is in different charset\n        $sql_query_disabled = true;\n        $reset_charset = true;\n    }\n}\n\n// Something to skip?\nif (! $error && isset($skip)) {\n    $original_skip = $skip;\n    while ($skip > 0) {\n        PMA_importGetNextChunk($skip < $read_limit ? $skip : $read_limit);\n        // Disable read progresivity, otherwise we eat all memory!\n        $read_multiply = 1;\n        $skip -= $read_limit;\n    }\n    unset($skip);\n}\n\n// This array contain the data like numberof valid sql queries in the statement\n// and complete valid sql statement (which affected for rows)\n$sql_data = array('valid_sql' => array(), 'valid_queries' => 0);\n\nif (! $error) {\n    // Check for file existance\n    include_once \"libraries/plugin_interface.lib.php\";\n    $import_plugin = PMA_getPlugin(\n        \"import\",\n        $format,\n        'libraries/plugins/import/',\n        $import_type\n    );\n    if ($import_plugin == null) {\n        $error = true;\n        $message = PMA_Message::error(\n            __('Could not load import plugins, please check your installation!')\n        );\n    } else {\n        // Do the real import\n        $import_plugin->doImport($sql_data);\n    }\n}\n\nif (! $error && false !== $import_handle && null !== $import_handle) {\n    fclose($import_handle);\n}\n\n// Cleanup temporary file\nif ($file_to_unlink != '') {\n    unlink($file_to_unlink);\n}\n\n// Reset charset back, if we did some changes\nif ($reset_charset) {\n    PMA_DBI_query('SET CHARACTER SET utf8');\n    PMA_DBI_query(\n        'SET SESSION collation_connection =\\'' . $collation_connection . '\\''\n    );\n}\n\n// Show correct message\nif (! empty($id_bookmark) && $action_bookmark == 2) {\n    $message = PMA_Message::success(__('The bookmark has been deleted.'));\n    $display_query = $import_text;\n    $error = false; // unset error marker, it was used just to skip processing\n} elseif (! empty($id_bookmark) && $action_bookmark == 1) {\n    $message = PMA_Message::notice(__('Showing bookmark'));\n} elseif ($bookmark_created) {\n    $special_message = '[br]'  . sprintf(\n        __('Bookmark %s created'),\n        htmlspecialchars($bkm_label)\n    );\n} elseif ($finished && ! $error) {\n    if ($import_type == 'query') {\n        $message = PMA_Message::success();\n    } else {\n        if ($import_notice) {\n            $message = PMA_Message::success(\n                '<em>' . __('Import has been successfully finished, %d queries executed.') . '</em>'\n            );\n            $message->addParam($executed_queries);\n\n            $message->addString($import_notice);\n            if (isset($local_import_file)) {\n                $message->addString('(' . $local_import_file . ')');\n            } else {\n                $message->addString('(' . $_FILES['import_file']['name'] . ')');\n            }\n        } else {\n            $message = PMA_Message::success(\n                __('Import has been successfully finished, %d queries executed.')\n            );\n            $message->addParam($executed_queries);\n            if (isset($local_import_file)) {\n                $message->addString('(' . $local_import_file . ')');\n            } else {\n                $message->addString('(' . $_FILES['import_file']['name'] . ')');\n            }\n        }\n    }\n}\n\n// Did we hit timeout? Tell it user.\nif ($timeout_passed) {\n    $message = PMA_Message::error(\n        __('Script timeout passed, if you want to finish import, please resubmit same file and import will resume.')\n    );\n    if ($offset == 0 || (isset($original_skip) && $original_skip == $offset)) {\n        $message->addString(\n            __('However on last run no data has been parsed, this usually means phpMyAdmin won\\'t be able to finish this import unless you increase php time limits.')\n        );\n    }\n}\n\n// if there is any message, copy it into $_SESSION as well,\n// so we can obtain it by AJAX call\nif (isset($message)) {\n    $_SESSION['Import_message']['message'] = $message->getDisplay();\n}\n// Parse and analyze the query, for correct db and table name\n// in case of a query typed in the query window\n// (but if the query is too large, in case of an imported file, the parser\n//  can choke on it so avoid parsing)\nif (strlen($sql_query) <= $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {\n    include_once 'libraries/parse_analyze.lib.php';\n}\n\n// There was an error?\nif (isset($my_die)) {\n    foreach ($my_die AS $key => $die) {\n        PMA_Util::mysqlDie(\n            $die['error'], $die['sql'], '', $err_url, $error\n        );\n    }\n}\n\n// we want to see the results of the last query that returned at least a row\nif (! empty($last_query_with_results)) {\n    // but we want to show intermediate results too\n    $disp_query = $sql_query;\n    $disp_message = __('Your SQL query has been executed successfully');\n    $sql_query = $last_query_with_results;\n    $go_sql = true;\n}\n\nif ($go_sql) {\n    include 'sql.php';\n} else {\n    $active_page = $goto;\n    include '' . $goto;\n}\n?>\n"], "fixing_code": ["phpMyAdmin - ChangeLog\n======================\n\n4.0.4.1 ()\n- [security] Global variables scope injection vulnerability (see PMASA-2013-7)\n\n4.0.4.0 (2013-06-17)\n- bug #3959 Using DefaultTabDatabase in NavigationTree for Database Click\n- bug #3961 Avoid Suhosin warning when in simulation mode\n- bug #3897 Row Statistics and Space usage bugs\n- bug #3966 Only display \"table has no unique column\" message when applicable\n- bug #3960 NavigationBarIconic config not honored\n- bug #3965 Default language wrong with zh-TW\n- bug #3921 Call to undefined function PMA_isSuperuser() if default server is\nnot set \n- bug #3971 Ctrl/shift + click opens links in same window\n- bug #3964 Import using https does not work\n- bug Missing removeCRLF option in ExportCsv and ExportExcel plugins\n- bug #3631 Drop not working Visio schema export.\n- bug #3645 Better handling of invalid ODS documents\n- bug #3976 Number of pages\n- bug #3922 User privileges, database name unescaped\n\n4.0.3.0 (2013-06-05)\n- bug #3941 Recent tables list always empty\n- bug #3933 Do not translate \"Open Document\" in export settings\n- bug #3927 List of tables is missing after expanding in the navigation frame\n- bug #3942 Warnings about reserved word for many non reserved words\n- bug #3912 Exporting row selection, resulted by ORDER BY query\n- bug #3957 Cookies must be enabled past this point\n- bug #3956 \"Browse foreign values\" search filter / page selector not working\n- bug #3579 NOW() function incorrectly selected (partial regression)\n- [security] Javascript execution vulnerability in Create view,\n  reported by Maxim Rupp (see PMASA-2013-6)\n\n4.0.2.0 (2013-05-24)\n- bug #3902 Cannot browse when table name contains keyword \"call\"\n+ center loading indicator for navigation refresh, related to bug #3920\n- bug #3925 Table sorting in navigation panel is case-sensitive\n- bug #3915 Import of CSV file (Replace table data with file) with duplicate values\n- bug #3907 undefined variables, function parameter problems\n- bug #3898 Structure not refreshed after column drop \n- bug #3926 View is not updatable\n- bug #3919 PropertiesIconic not honored\n- bug #3930 Databases to choose for specific privileges show up escaped\n- bug #3910 Export database with empty table as a php array, does not produce valid PHP\n- bug #3936 Query profiler chart not loading from SQL Query page\n- bug #3946 Missing CSV import option \"Do not abort on INSERT error\"\n- bug #3943 Missing Operations>Table options>AUTO_INCREMENT\n- bug Missing CREATE DATABASE statement when exporting at database level\n- bug #3924 Show warning when CSV file does not contain data for all columns\n- bug #3947 Missing Sql Query after modify structure\n- bug #3948 Server export problems\n- bug #3917 CountTables directive is deprecated\n\n4.0.1.0 (2013-05-14)\n- bug #3879 Import broken for CSV using LOAD DATA\n- bug #3889 When login fails and error display is active, login data is displayed\n- bug #3890 [import] Web server upload directory import fails\n- bug #3891 [import] Server upload folder import file name missing in success message \n+ rfe #1421 [auth] Add retry button on connection failure with config auth\n- bug #3894 [interface] Provide feedback if no columns selected for multi-submit\n- bug #3799 [interface] Incorrect select field change on ctrl key navigation in Firefox\n- bug #3885 [browse] display_binary_as_hex option causes unexpected behavior\n- bug #3899 Git commit links to Github missing\n- bug #3900 CSP WARN in Firefox console\n- bug #3901 Setup script warning for config auth (stored login data) shows link BBcode\n- bug #3895 [browse] Fixed getting BLOB data\n- bug #3905 [export] Custom Exporting exports all databases\n- bug #3909 [import] Import of CSV FIle to selected table doesn't work\n- bug #3904 Browsing an empty table should not display its Structure\n- bug #3908 Calendar widget improperly redirects to home \n- bug #3918 Greyed out tabs when there are no rows fixed \n- bug #3916 [interface] Missing scrollbar (original theme)\n+ [vendor] add tcpdf path to vendor_config.php\n- bug fix compat with tcpdf >= 6.0 (tested with 6.0.012)\n\n4.0.0.0 (2013-05-03)\n+ Patch #3481047 for rfe #3480477 Insert as new row enhancement\n+ Patch #3480999 Activate codemirror in the query window\n- Patch #3495284 XML Import - fix message and redirect\n+ rfe #3484063 Null checkbox behavior\n+ Patch #3497179 Contest-5: Add user: Allow create DB w/same name + grant u_%\n+ Patch #3498201 Contest-6: Export all privileges\n+ Patch #3502814 for rfe #3187077 Change password buttons should match\n+ rfe #3488640 Expand table-group in non-light navigation frame if only one\n+ Patch #3509360 Contest-3: Option \"Truncate table\" before \"insert\"\n+ Patch #3506552 Contest-2: Show index information in the data dictionary\n+ Patch #3510656 Contest-1: Ignoring foreign keys while dropping tables\n- Bug #3509686 Reverting sort on joined column does not work\n+ New transformation: append string\n+ rfe #3507804 Session upload progress (PHP 5.4)\n+ rfe #3488185 draggable columns vs copy column name\n+ Patch #3507001 Contest-4: Textarea for large character columns\n+ Removed the PHP version of the ENUM editor\n+ Patch #3507111 Display distinct results, linked to corresponding data rows\n- bug #3507917 [export] JSON has unescaped values for allegedly numeric columns\n+ rfe #3516187 show tables creation, last update, last check timestamps in db_structure\n- bug #3059806 Supporting running from CIFS/Samba shares\n- bug #3516341 [export] Open Document Text, Word and Texy! Text show table structure twice\n- bug [export] Texy! Text: Columns containing Pipe Character don't export properly\n+ [export] Show triggers in Open Document Text, Word and Texy! Text\n- Patch #3415061 [auth] Login screen appears under the page\n+ rfe #3517354 [interface] Allow disabling CodeMirror with $cfg['CodemirrorEnable'] = false\n+ rfe #3475567 [interface] New directive $cfg['HideStructureActions']\n- bug #3468272 [import] Fixed import of ODS with more paragraphs in a cell\n- bug #3510196 [core] Improved redirecting with ForceSSL option\n+ rfe #3518852 [edit] edit blob but not other binary, new option $cfg['ProtectBinary'] = 'noblob'\n+ Hide language select box if there are no locales installed\n+ Removed some directives: verbose_check, SuggestDBName, LightTabs,\nVerboseMultiSubmit, ReplaceHelpImg\n- Patch #3500882 Fixing checkbox behaviour while editing identical rows\n+ rfe #3441722 [interface] Display description of datatypes\n+ rfe #3517835 [structure] Move columns easily\n+ Ajaxified \"Create View\" functionality\n+ [import] New plugin: import mediawiki\n+ New navigation system\n+ Discontinued the use of a frame-based layout\n+ rfe #3528994 [interface] Allow wrapping possibly long values in replication-status table\n+ [interface] Autoselect username input on cookie login page\n- bug #3563799 [interface] Grid editing destroying huge amount of data\n+ [import] Remove support for the unactive docSQL import format\n- bug #3577443 [edit] \"Browse foreign values\" does not show on ajax edit\n+ rfe #3522109 [browse] Grid editing: action to trigger it (or disable)\n- bug #3526598 [interface] SQL query not shown when creating table\n+ Dropped configuration directive: AllowThirdPartyFraming\n+ Dropped configuration directive: LeftFrameLight\n+ Dropped configuration directive: DisplayDatabasesList\n+ Dropped configuration directives: ShowTooltipAliasDB and ShowTooltipAliasTB\n+ Dropped configuration directive: NaviDatabaseNameColor\n+ Added configuration directive: MaxNavigationItems\n+ Renamed configuration directive: LeftFrameDBTree => NavigationTreeEnableGrouping\n+ Renamed configuration directive: LeftFrameDBSeparator => NavigationTreeDbSeparator\n+ Renamed configuration directive: LeftFrameTableSeparator => NavigationTreeTableSeparator\n+ Renamed configuration directive: LeftFrameTableLevel => NavigationTreeTableLevel\n+ Renamed configuration directive: LeftPointerEnable => NavigationTreePointerEnable\n+ Renamed configuration directive: LeftDefaultTabTable => NavigationTreeDefaultTabTable\n+ Renamed configuration directive: LeftDisplayTableFilterMinimum => NavigationTreeDisplayTableFilterMinimum\n+ Renamed configuration directive: LeftDisplayLogo => NavigationDisplayLogo\n+ Renamed configuration directive: LeftLogoLink => NavigationLogoLink\n+ Renamed configuration directive: LeftLogoLinkWindow => NavigationLogoLinkWindow\n+ Renamed configuration directive: LeftDisplayServers => NavigationDisplayServers\n+ Renamed configuration directive: LeftRecentTable => NumRecentTables\n+ Renamed configuration directive: LeftDisplayDatabaseFilterMinimum => NavigationTreeDisplayDbFilterMinimum\n+ Removed the \"Mark row on click\" feature; must now click the checkbox to mark\n+ Removed the \"Synchronize\" feature\n+ Improved layout of server variables page\n+ rfe #1052091 [config] Double-underscores in PMA table names\n+ Improved the \"More\" dropdown on the table structure page\n+ [interface] Added \"scroll to top\" link in menubar\n+ [designer] Fullscreen mode for the designer\n+ Upgraded jquery to v1.8.3 and jquery-ui to v1.9.2\n+ Patch #3597529 [status] Add raw value as title on server status page\n+ Support MySQL 5.6 partitioning\n+ Removed the AjaxEnable directive\n+ rfe #3542567 Accept IPv6 ranges and IPv6 CIDR notations in $cfg['Servers'][$i]['AllowDeny']['rules']\n- Bug #3576788 Grid editing shows the value before silent truncation\n- Upgraded jqPlot to 1.0.4 r1121\n- Upgraded to jquery-ui-timepicker-addon 1.1.1\n+ rfe #3599046 [interface] Added comments for indexes\n- Replaced qtip with jQuery UI tooltip\n- Upgraded CodeMirror to 2.37\n- bug #2951 [export] Correctly export decimal fields.\n- bug #3762 [core] Make Advisor work on Windows withou COM extension.\n- bug #3519 [export] Prevent infinite recursion in PDF export.\n- bug #3827 Table specific privileges not displayed for db name containing\nunderscore \n- rfe #1386 Add IF NOT EXISTS clause when copying database\n- No longer package .travis.yml configuration file when creating a release.\n- bug #3830 Can't export custom query because it lowercases table names\n- bug #3829 Enabling query profiling crashes javascript based navigation\n+ rfe #879 Reserved word warning\n+ Remove the database ordering sub-feature of the only_db directive\n- bug #3840 When exporting to gzip format, the data is compressed 2 times\n+ rfe #1319 Permit to create index when creating foreign key\n- bug #3703 Incorrect updating of the list of users\n- bug #3853 Blowfish implementation might be broken (replace with phpseclib)\n- bug #3865 Using like operator on each backslash needs 4 backslash protection\n- bug #3860 Displayed git revision info is not set\n- bug #3871 Check referential integrity broken across databases\n- bug #3874 [export] No preselected option when exporting table\n- bug #3873 Can't copy table to target database if table exists there\n- bug #3683 Incorrect listing of records from to count\n- bug #3876 [import] PHP 5.2 - unexpected T_PAAMAYIM_NEKUDOTAYIM\n- [security] Local file inclusion vulnerability, reported by Janek Vind\n  (see PMASA-2013-4)\n- [security] Global variables overwrite in export.php, reported by Janek Vind\n  (see PMASA-2013-5)\n- bug #3892 [export] SQL Export files are empty\n\n3.5.8.1 (2013-04-24)\n- [security] Remote code execution (preg_replace), reported by Janek Vind\n  (see PMASA-2013-2)\n- [security] Locally Saved SQL Dump File Multiple File Extension Remote Code\n  Execution, reported by Janek Vind (see PMASA-2013-3)\n\n3.5.8.0 (2013-04-08)\n- bug #3828 MariaDB reported as MySQL\n- bug #3854 Incorrect header for Safari 6.0\n- bug #3705 Attempt to open trigger for edit gives NULL\n- Use HTML5 DOCTYPE \n- [security] Self-XSS on GIS visualisation page, reported by Janek Vind\n- bug #3800 Incorrect keyhandler behaviour #2\n\n3.5.7.0 (2013-02-15)\n- bug #3779 [core] Problem with backslash in enum fields\n- bug #3816 Missing server_processlist.php\n- bug #3821 Safari: white page\n- Correct detection of the Chrome browser\n\n3.5.6.0 (2013-01-28)\n- bug #3593604 [status] Erroneous advisor rule\n- bug #3596070 [status] localStorage broken in server status monitor\n- bug #3598736 [routines] Editing a procedure with special characters\n- bug #3600322 [core] Visualize GIS data throws Fatal Error\n- bug #3599362 [core] Double-escaped error message\n- bug #3776 [cookies] Login without auth on second server\n\n         --- Older ChangeLogs can be found on our project website ---\n                     http://www.phpmyadmin.net/old-stuff/ChangeLogs/\n\n# vim: et ts=4 sw=4 sts=4\n# vim: ft=changelog fenc=utf-8\n# vim: fde=getline(v\\:lnum-1)=~'^\\\\s*$'&&getline(v\\:lnum)=~'\\\\S'?'>1'\\:1&&v\\:lnum>4&&getline(v\\:lnum)!~'^#'\n# vim: fdn=1 fdm=expr\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Core script for import, this is just the glue around all other stuff\n *\n * @package PhpMyAdmin\n */\n\n/**\n * Get the variables sent or posted to this script and a core script\n */\nrequire_once 'libraries/common.inc.php';\n//require_once 'libraries/display_import_functions.lib.php';\n\nif (isset($_REQUEST['show_as_php'])) {\n    $GLOBALS['show_as_php'] = $_REQUEST['show_as_php'];\n}\n\n/**\n * Sets globals from $_POST\n */\n$post_params = array(\n    'action_bookmark',\n    'allow_interrupt',\n    'bkm_label',\n    'bookmark_variable',\n    'charset_of_file',\n    'format',\n    'id_bookmark',\n    'import_type',\n    'is_js_confirmed',\n    'MAX_FILE_SIZE',\n    'message_to_show',\n    'noplugin',\n    'skip_queries',\n    'local_import_file'\n);\n\n// TODO: adapt full list of allowed parameters, as in export.php\nforeach ($post_params as $one_post_param) {\n    if (isset($_POST[$one_post_param])) {\n        $GLOBALS[$one_post_param] = $_POST[$one_post_param];\n    }\n}\n\n// reset import messages for ajax request\n$_SESSION['Import_message']['message'] = null;\n$_SESSION['Import_message']['go_back_url'] = null;\n// default values\n$GLOBALS['reload'] = false;\n\n// Use to identify curren cycle is executing\n// a multiquery statement or stored routine\nif (!isset($_SESSION['is_multi_query'])) {\n    $_SESSION['is_multi_query'] = false;\n}\n\n// Are we just executing plain query or sql file?\n// (eg. non import, but query box/window run)\nif (! empty($sql_query)) {\n    // run SQL query\n    $import_text = $sql_query;\n    $import_type = 'query';\n    $format = 'sql';\n\n    // refresh navigation and main panels\n    if (preg_match('/^(DROP)\\s+(VIEW|TABLE|DATABASE|SCHEMA)\\s+/i', $sql_query)) {\n        $GLOBALS['reload'] = true;\n    }\n\n    // refresh navigation panel only\n    if (preg_match('/^(CREATE|ALTER)\\s+(VIEW|TABLE|DATABASE|SCHEMA)\\s+/i', $sql_query)) {\n        $ajax_reload['reload'] = true;\n    }\n\n    // do a dynamic reload if table is RENAMED\n    // (by sending the instruction to the AJAX response handler)\n    if (preg_match('/^RENAME\\s+TABLE\\s+(.*?)\\s+TO\\s+(.*?)($|;|\\s)/i', $sql_query, $rename_table_names)) {\n        $ajax_reload['table_name'] = PMA_Util::unQuote($rename_table_names[2]);\n        $ajax_reload['reload'] = true;\n    }\n\n    $sql_query = '';\n} elseif (! empty($sql_localfile)) {\n    // run SQL file on server\n    $local_import_file = $sql_localfile;\n    $import_type = 'queryfile';\n    $format = 'sql';\n    unset($sql_localfile);\n} elseif (! empty($sql_file)) {\n    // run uploaded SQL file\n    $import_file = $sql_file;\n    $import_type = 'queryfile';\n    $format = 'sql';\n    unset($sql_file);\n} elseif (! empty($id_bookmark)) {\n    // run bookmark\n    $import_type = 'query';\n    $format = 'sql';\n}\n\n// If we didn't get any parameters, either user called this directly, or\n// upload limit has been reached, let's assume the second possibility.\n;\nif ($_POST == array() && $_GET == array()) {\n    $message = PMA_Message::error(\n        __('You probably tried to upload a file that is too large. Please refer to %sdocumentation%s for a workaround for this limit.')\n    );\n    $message->addParam('[doc@faq1-16]');\n    $message->addParam('[/doc]');\n\n    // so we can obtain the message\n    $_SESSION['Import_message']['message'] = $message->getDisplay();\n    $_SESSION['Import_message']['go_back_url'] = $goto;\n\n    $message->display();\n    exit; // the footer is displayed automatically\n}\n\n/**\n * Sets globals from $_POST patterns, for import plugins\n * We only need to load the selected plugin\n */\n\nif (! in_array(\n    $format, \n    array(\n        'csv',\n        'ldi',\n        'mediawiki',\n        'ods',\n        'shp',\n        'sql',\n        'xml'\n    )\n)\n) {\n    // this should not happen for a normal user\n    // but only during an attack\n    PMA_fatalError('Incorrect format parameter');\n}\n\n$post_patterns = array(\n    '/^force_file_/',\n    '/^'. $format . '_/'\n);\nforeach (array_keys($_POST) as $post_key) {\n    foreach ($post_patterns as $one_post_pattern) {\n        if (preg_match($one_post_pattern, $post_key)) {\n            $GLOBALS[$post_key] = $_POST[$post_key];\n        }\n    }\n}\n\n// Check needed parameters\nPMA_Util::checkParameters(array('import_type', 'format'));\n\n// We don't want anything special in format\n$format = PMA_securePath($format);\n\n// Import functions\nrequire_once 'libraries/import.lib.php';\n\n// Create error and goto url\nif ($import_type == 'table') {\n    $err_url = 'tbl_import.php?' . PMA_generate_common_url($db, $table);\n    $_SESSION['Import_message']['go_back_url'] = $err_url;\n    $goto = 'tbl_import.php';\n} elseif ($import_type == 'database') {\n    $err_url = 'db_import.php?' . PMA_generate_common_url($db);\n    $_SESSION['Import_message']['go_back_url'] = $err_url;\n    $goto = 'db_import.php';\n} elseif ($import_type == 'server') {\n    $err_url = 'server_import.php?' . PMA_generate_common_url();\n    $_SESSION['Import_message']['go_back_url'] = $err_url;\n    $goto = 'server_import.php';\n} else {\n    if (empty($goto) || !preg_match('@^(server|db|tbl)(_[a-z]*)*\\.php$@i', $goto)) {\n        if (strlen($table) && strlen($db)) {\n            $goto = 'tbl_structure.php';\n        } elseif (strlen($db)) {\n            $goto = 'db_structure.php';\n        } else {\n            $goto = 'server_sql.php';\n        }\n    }\n    if (strlen($table) && strlen($db)) {\n        $common = PMA_generate_common_url($db, $table);\n    } elseif (strlen($db)) {\n        $common = PMA_generate_common_url($db);\n    } else {\n        $common = PMA_generate_common_url();\n    }\n    $err_url  = $goto . '?' . $common\n        . (preg_match('@^tbl_[a-z]*\\.php$@', $goto)\n            ? '&amp;table=' . htmlspecialchars($table)\n            : '');\n    $_SESSION['Import_message']['go_back_url'] = $err_url;\n}\n\n\nif (strlen($db)) {\n    PMA_DBI_select_db($db);\n}\n\n@set_time_limit($cfg['ExecTimeLimit']);\nif (! empty($cfg['MemoryLimit'])) {\n    @ini_set('memory_limit', $cfg['MemoryLimit']);\n}\n\n$timestamp = time();\nif (isset($allow_interrupt)) {\n    $maximum_time = ini_get('max_execution_time');\n} else {\n    $maximum_time = 0;\n}\n\n// set default values\n$timeout_passed = false;\n$error = false;\n$read_multiply = 1;\n$finished = false;\n$offset = 0;\n$max_sql_len = 0;\n$file_to_unlink = '';\n$sql_query = '';\n$sql_query_disabled = false;\n$go_sql = false;\n$executed_queries = 0;\n$run_query = true;\n$charset_conversion = false;\n$reset_charset = false;\n$bookmark_created = false;\n\n// Bookmark Support: get a query back from bookmark if required\nif (! empty($id_bookmark)) {\n    $id_bookmark = (int)$id_bookmark;\n    include_once 'libraries/bookmark.lib.php';\n    switch ($action_bookmark) {\n    case 0: // bookmarked query that have to be run\n        $import_text = PMA_Bookmark_get(\n            $db,\n            $id_bookmark,\n            'id',\n            isset($action_bookmark_all)\n        );\n        if (isset($bookmark_variable) && ! empty($bookmark_variable)) {\n            $import_text = preg_replace(\n                '|/\\*(.*)\\[VARIABLE\\](.*)\\*/|imsU',\n                '${1}' . PMA_Util::sqlAddSlashes($bookmark_variable) . '${2}',\n                $import_text\n            );\n        }\n\n        // refresh navigation and main panels\n        if (preg_match('/^(DROP)\\s+(VIEW|TABLE|DATABASE|SCHEMA)\\s+/i', $import_text)) {\n            $GLOBALS['reload'] = true;\n        }\n\n        // refresh navigation panel only\n        if (preg_match('/^(CREATE|ALTER)\\s+(VIEW|TABLE|DATABASE|SCHEMA)\\s+/i', $import_text)) {\n            $ajax_reload['reload'] = true;\n        }\n        break;\n    case 1: // bookmarked query that have to be displayed\n        $import_text = PMA_Bookmark_get($db, $id_bookmark);\n        if ($GLOBALS['is_ajax_request'] == true) {\n            $message = PMA_Message::success(__('Showing bookmark'));\n            $response = PMA_Response::getInstance();\n            $response->isSuccess($message->isSuccess());\n            $response->addJSON('message', $message);\n            $response->addJSON('sql_query', $import_text);\n            $response->addJSON('action_bookmark', $action_bookmark);\n            exit;\n        } else {\n            $run_query = false;\n        }\n        break;\n    case 2: // bookmarked query that have to be deleted\n        $import_text = PMA_Bookmark_get($db, $id_bookmark);\n        PMA_Bookmark_delete($db, $id_bookmark);\n        if ($GLOBALS['is_ajax_request'] == true) {\n            $message = PMA_Message::success(__('The bookmark has been deleted.'));\n            $response = PMA_Response::getInstance();\n            $response->isSuccess($message->isSuccess());\n            $response->addJSON('message', $message);\n            $response->addJSON('action_bookmark', $action_bookmark);\n            $response->addJSON('id_bookmark', $id_bookmark);\n            exit;\n        } else {\n            $run_query = false;\n            $error = true; // this is kind of hack to skip processing the query\n        }\n        break;\n    }\n} // end bookmarks reading\n\n// Do no run query if we show PHP code\nif (isset($GLOBALS['show_as_php'])) {\n    $run_query = false;\n    $go_sql = true;\n}\n\n// We can not read all at once, otherwise we can run out of memory\n$memory_limit = trim(@ini_get('memory_limit'));\n// 2 MB as default\nif (empty($memory_limit)) {\n    $memory_limit = 2 * 1024 * 1024;\n}\n// In case no memory limit we work on 10MB chunks\nif ($memory_limit == -1) {\n    $memory_limit = 10 * 1024 * 1024;\n}\n\n// Calculate value of the limit\nif (strtolower(substr($memory_limit, -1)) == 'm') {\n    $memory_limit = (int)substr($memory_limit, 0, -1) * 1024 * 1024;\n} elseif (strtolower(substr($memory_limit, -1)) == 'k') {\n    $memory_limit = (int)substr($memory_limit, 0, -1) * 1024;\n} elseif (strtolower(substr($memory_limit, -1)) == 'g') {\n    $memory_limit = (int)substr($memory_limit, 0, -1) * 1024 * 1024 * 1024;\n} else {\n    $memory_limit = (int)$memory_limit;\n}\n\n// Just to be sure, there might be lot of memory needed for uncompression\n$read_limit = $memory_limit / 8;\n\n// handle filenames\nif (isset($_FILES['import_file'])) {\n    $import_file = $_FILES['import_file']['tmp_name'];\n}\nif (! empty($local_import_file) && ! empty($cfg['UploadDir'])) {\n\n    // sanitize $local_import_file as it comes from a POST\n    $local_import_file = PMA_securePath($local_import_file);\n\n    $import_file = PMA_Util::userDir($cfg['UploadDir'])\n        . $local_import_file;\n\n} elseif (empty($import_file) || ! is_uploaded_file($import_file)) {\n    $import_file  = 'none';\n}\n\n// Do we have file to import?\n\nif ($import_file != 'none' && ! $error) {\n    // work around open_basedir and other limitations\n    $open_basedir = @ini_get('open_basedir');\n\n    // If we are on a server with open_basedir, we must move the file\n    // before opening it. The doc explains how to create the \"./tmp\"\n    // directory\n\n    if (! empty($open_basedir)) {\n\n        $tmp_subdir = (PMA_IS_WINDOWS ? '.\\\\tmp\\\\' : 'tmp/');\n\n        if (is_writable($tmp_subdir)) {\n\n\n            $import_file_new = $tmp_subdir . basename($import_file) . uniqid();\n            if (move_uploaded_file($import_file, $import_file_new)) {\n                $import_file = $import_file_new;\n                $file_to_unlink = $import_file_new;\n            }\n\n            $size = filesize($import_file);\n        }\n    }\n\n    /**\n     *  Handle file compression\n     * @todo duplicate code exists in File.class.php\n     */\n    $compression = PMA_detectCompression($import_file);\n    if ($compression === false) {\n        $message = PMA_Message::error(__('File could not be read'));\n        $error = true;\n    } else {\n        switch ($compression) {\n        case 'application/bzip2':\n            if ($cfg['BZipDump'] && @function_exists('bzopen')) {\n                $import_handle = @bzopen($import_file, 'r');\n            } else {\n                $message = PMA_Message::error(\n                    __('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.')\n                );\n                $message->addParam($compression);\n                $error = true;\n            }\n            break;\n        case 'application/gzip':\n            if ($cfg['GZipDump'] && @function_exists('gzopen')) {\n                $import_handle = @gzopen($import_file, 'r');\n            } else {\n                $message = PMA_Message::error(\n                    __('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.')\n                );\n                $message->addParam($compression);\n                $error = true;\n            }\n            break;\n        case 'application/zip':\n            if ($cfg['ZipDump'] && @function_exists('zip_open')) {\n                /**\n                 * Load interface for zip extension.\n                 */\n                include_once 'libraries/zip_extension.lib.php';\n                $result = PMA_getZipContents($import_file);\n                if (! empty($result['error'])) {\n                    $message = PMA_Message::rawError($result['error']);\n                    $error = true;\n                } else {\n                    $import_text = $result['data'];\n                }\n            } else {\n                $message = PMA_Message::error(\n                    __('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.')\n                );\n                $message->addParam($compression);\n                $error = true;\n            }\n            break;\n        case 'none':\n            $import_handle = @fopen($import_file, 'r');\n            break;\n        default:\n            $message = PMA_Message::error(\n                __('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.')\n            );\n            $message->addParam($compression);\n            $error = true;\n            break;\n        }\n    }\n    // use isset() because zip compression type does not use a handle\n    if (! $error && isset($import_handle) && $import_handle === false) {\n        $message = PMA_Message::error(__('File could not be read'));\n        $error = true;\n    }\n} elseif (! $error) {\n    if (! isset($import_text) || empty($import_text)) {\n        $message = PMA_Message::error(\n            __('No data was received to import. Either no file name was submitted, or the file size exceeded the maximum size permitted by your PHP configuration. See [doc@faq1-16]FAQ 1.16[/doc].')\n        );\n        $error = true;\n    }\n}\n\n// so we can obtain the message\n//$_SESSION['Import_message'] = $message->getDisplay();\n\n// Convert the file's charset if necessary\nif ($GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE && isset($charset_of_file)) {\n    if ($charset_of_file != 'utf-8') {\n        $charset_conversion = true;\n    }\n} elseif (isset($charset_of_file) && $charset_of_file != 'utf8') {\n    if (PMA_DRIZZLE) {\n        // Drizzle doesn't support other character sets,\n        // so we can't fallback to SET NAMES - throw an error\n        $error = true;\n        $message = PMA_Message::error(\n            __('Cannot convert file\\'s character set without character set conversion library')\n        );\n    } else {\n        PMA_DBI_query('SET NAMES \\'' . $charset_of_file . '\\'');\n        // We can not show query in this case, it is in different charset\n        $sql_query_disabled = true;\n        $reset_charset = true;\n    }\n}\n\n// Something to skip?\nif (! $error && isset($skip)) {\n    $original_skip = $skip;\n    while ($skip > 0) {\n        PMA_importGetNextChunk($skip < $read_limit ? $skip : $read_limit);\n        // Disable read progresivity, otherwise we eat all memory!\n        $read_multiply = 1;\n        $skip -= $read_limit;\n    }\n    unset($skip);\n}\n\n// This array contain the data like numberof valid sql queries in the statement\n// and complete valid sql statement (which affected for rows)\n$sql_data = array('valid_sql' => array(), 'valid_queries' => 0);\n\nif (! $error) {\n    // Check for file existance\n    include_once \"libraries/plugin_interface.lib.php\";\n    $import_plugin = PMA_getPlugin(\n        \"import\",\n        $format,\n        'libraries/plugins/import/',\n        $import_type\n    );\n    if ($import_plugin == null) {\n        $error = true;\n        $message = PMA_Message::error(\n            __('Could not load import plugins, please check your installation!')\n        );\n    } else {\n        // Do the real import\n        $import_plugin->doImport($sql_data);\n    }\n}\n\nif (! $error && false !== $import_handle && null !== $import_handle) {\n    fclose($import_handle);\n}\n\n// Cleanup temporary file\nif ($file_to_unlink != '') {\n    unlink($file_to_unlink);\n}\n\n// Reset charset back, if we did some changes\nif ($reset_charset) {\n    PMA_DBI_query('SET CHARACTER SET utf8');\n    PMA_DBI_query(\n        'SET SESSION collation_connection =\\'' . $collation_connection . '\\''\n    );\n}\n\n// Show correct message\nif (! empty($id_bookmark) && $action_bookmark == 2) {\n    $message = PMA_Message::success(__('The bookmark has been deleted.'));\n    $display_query = $import_text;\n    $error = false; // unset error marker, it was used just to skip processing\n} elseif (! empty($id_bookmark) && $action_bookmark == 1) {\n    $message = PMA_Message::notice(__('Showing bookmark'));\n} elseif ($bookmark_created) {\n    $special_message = '[br]'  . sprintf(\n        __('Bookmark %s created'),\n        htmlspecialchars($bkm_label)\n    );\n} elseif ($finished && ! $error) {\n    if ($import_type == 'query') {\n        $message = PMA_Message::success();\n    } else {\n        if ($import_notice) {\n            $message = PMA_Message::success(\n                '<em>' . __('Import has been successfully finished, %d queries executed.') . '</em>'\n            );\n            $message->addParam($executed_queries);\n\n            $message->addString($import_notice);\n            if (isset($local_import_file)) {\n                $message->addString('(' . $local_import_file . ')');\n            } else {\n                $message->addString('(' . $_FILES['import_file']['name'] . ')');\n            }\n        } else {\n            $message = PMA_Message::success(\n                __('Import has been successfully finished, %d queries executed.')\n            );\n            $message->addParam($executed_queries);\n            if (isset($local_import_file)) {\n                $message->addString('(' . $local_import_file . ')');\n            } else {\n                $message->addString('(' . $_FILES['import_file']['name'] . ')');\n            }\n        }\n    }\n}\n\n// Did we hit timeout? Tell it user.\nif ($timeout_passed) {\n    $message = PMA_Message::error(\n        __('Script timeout passed, if you want to finish import, please resubmit same file and import will resume.')\n    );\n    if ($offset == 0 || (isset($original_skip) && $original_skip == $offset)) {\n        $message->addString(\n            __('However on last run no data has been parsed, this usually means phpMyAdmin won\\'t be able to finish this import unless you increase php time limits.')\n        );\n    }\n}\n\n// if there is any message, copy it into $_SESSION as well,\n// so we can obtain it by AJAX call\nif (isset($message)) {\n    $_SESSION['Import_message']['message'] = $message->getDisplay();\n}\n// Parse and analyze the query, for correct db and table name\n// in case of a query typed in the query window\n// (but if the query is too large, in case of an imported file, the parser\n//  can choke on it so avoid parsing)\nif (strlen($sql_query) <= $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {\n    include_once 'libraries/parse_analyze.lib.php';\n}\n\n// There was an error?\nif (isset($my_die)) {\n    foreach ($my_die AS $key => $die) {\n        PMA_Util::mysqlDie(\n            $die['error'], $die['sql'], '', $err_url, $error\n        );\n    }\n}\n\n// we want to see the results of the last query that returned at least a row\nif (! empty($last_query_with_results)) {\n    // but we want to show intermediate results too\n    $disp_query = $sql_query;\n    $disp_message = __('Your SQL query has been executed successfully');\n    $sql_query = $last_query_with_results;\n    $go_sql = true;\n}\n\nif ($go_sql) {\n    include 'sql.php';\n} else {\n    $active_page = $goto;\n    include '' . $goto;\n}\n?>\n"], "filenames": ["ChangeLog", "import.php"], "buggy_code_start_loc": [2, 123], "buggy_code_end_loc": [2, 123], "fixing_code_start_loc": [3, 124], "fixing_code_end_loc": [6, 142], "type": "CWE-264", "message": "import.php in phpMyAdmin 4.x before 4.0.4.1 does not properly restrict the ability of input data to specify a file format, which allows remote authenticated users to modify the GLOBALS superglobal array, and consequently change the configuration, via a crafted request.", "other": {"cve": {"id": "CVE-2013-4729", "sourceIdentifier": "cve@mitre.org", "published": "2013-07-04T14:33:41.687", "lastModified": "2013-07-05T04:00:00.000", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "import.php in phpMyAdmin 4.x before 4.0.4.1 does not properly restrict the ability of input data to specify a file format, which allows remote authenticated users to modify the GLOBALS superglobal array, and consequently change the configuration, via a crafted request."}, {"lang": "es", "value": "import.php en phpMyAdmin v4.x anterior a v4.0.4.1 no restringe correctamente la capacidad de la entrada de datos a un formato de fichero espec\u00edfico, lo que permite a usuarios remotamente autenticados modificar el array global GLOBALS, y consecuentemente a trav\u00e9s de peticiones malformadas."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-264"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "2F06DC95-76B1-4E24-A55F-1358A25ED0E5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "B406A721-0075-46C8-A920-3C9602AD667B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.0:rc3:*:*:*:*:*:*", "matchCriteriaId": "C8AE4653-1911-4A58-85DD-51E0578E788E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "2CA76CB4-6167-446A-8D4F-6D5B38046334"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "B8D28655-7F37-474D-A4E2-772AF24B94E7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "1FA1951E-BD85-42BF-BF7F-79A14D165914"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.4:*:*:*:*:*:*:*", "matchCriteriaId": "0D08BEE8-5ACF-438D-9F06-86C6227C9A5F"}]}]}], "references": [{"url": "http://www.phpmyadmin.net/home_page/security/PMASA-2013-7.php", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/012464268420e53a9cd81cbb4a43988d70393c36", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/012464268420e53a9cd81cbb4a43988d70393c36"}}