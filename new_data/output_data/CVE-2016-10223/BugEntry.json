{"buggy_code": ["<?\t\n\t$integrity_errors = array();\n\t$external = $_GET[\"external\"] ? true : false;\n\n\t// Get the form so we can walk through its fields\n\t$form = BigTreeAutoModule::getForm($_GET[\"form\"]);\t\n\n\t// Create a generic module class to get the decoded item data\n\t$m = new BigTreeModule;\n\t$m->Table = $form[\"table\"];\n\t$item = $m->get($_GET[\"id\"]);\n\t\n\t// Loop through all the fields\n\tforeach ($form[\"fields\"] as $field => $resource) {\n\t\tif ($resource[\"type\"] == \"html\") {\n\t\t\t$integrity_errors[$field] = $admin->checkHTML(\"\",$item[$field],$external);\n\t\t} elseif ($resource[\"type\"] == \"text\" && is_string($item[$field])) {\n\t\t\t$href = $item[$field];\n\t\t\t// External link\n\t\t\tif (substr($href,0,4) == \"http\" && strpos($href,WWW_ROOT) === false) {\n\t\t\t\t// Only check external links if we've requested them\n\t\t\t\tif ($external) {\n\t\t\t\t\tif (strpos($href,\"#\") !== false) {\n\t\t\t\t\t\t$href = substr($href,0,strpos($href,\"#\")-1);\n\t\t\t\t\t}\n\t\t\t\t\tif (!$admin->urlExists($href)) {\n\t\t\t\t\t\t$integrity_errors[$field] = array(\"a\" => array($href));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t// Internal link\n\t\t\t} elseif (substr($href,0,4) == \"http\") {\n\t\t\t\tif (!$admin->urlExists($href)) {\n\t\t\t\t\t$integrity_errors[$field] = array(\"a\" => array($href));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Only retrieve these if we have errors as we only need them for URL generation\n\tif (count($integrity_errors)) {\n\t\t$action = $admin->getModuleActionForForm($form);\n\t\t$module = $admin->getModule($action[\"module\"]);\n\t}\n\t\n\tforeach ($integrity_errors as $field => $error_types) {\n\t\tforeach ($error_types as $type => $errors) {\n\t\t\tforeach ($errors as $error) {\n?>\n<li>\n\t<section class=\"integrity_errors\">\n\t\t<a href=\"<?=ADMIN_ROOT.$module[\"route\"].\"/\".$action[\"route\"].\"/\".$_GET[\"id\"]?>/\" target=\"_blank\">Edit</a>\n\t\t<span class=\"icon_small icon_small_warning\"></span>\n\t\t<p>Broken <?=(($type == \"img\") ? \"Image\" : \"Link\")?>: <?=$error?> in field &ldquo;<?=$form[\"fields\"][$field][\"title\"]?>&rdquo;</p>\n\t</section>\n</li>\n<?\n\t\t\t}\n\t\t}\n\t}\n?>"], "fixing_code": ["<?\t\n\t$integrity_errors = array();\n\t$external = $_GET[\"external\"] ? true : false;\n\n\t// Get the form so we can walk through its fields\n\t$form = BigTreeAutoModule::getForm($_GET[\"form\"]);\t\n\n\t// Create a generic module class to get the decoded item data\n\t$m = new BigTreeModule;\n\t$m->Table = $form[\"table\"];\n\t$item = $m->get($_GET[\"id\"]);\n\t\n\t// Loop through all the fields\n\tforeach ($form[\"fields\"] as $field => $resource) {\n\t\tif ($resource[\"type\"] == \"html\") {\n\t\t\t$integrity_errors[$field] = $admin->checkHTML(\"\",$item[$field],$external);\n\t\t} elseif ($resource[\"type\"] == \"text\" && is_string($item[$field])) {\n\t\t\t$href = $item[$field];\n\t\t\t// External link\n\t\t\tif (substr($href,0,4) == \"http\" && strpos($href,WWW_ROOT) === false) {\n\t\t\t\t// Only check external links if we've requested them\n\t\t\t\tif ($external) {\n\t\t\t\t\tif (strpos($href,\"#\") !== false) {\n\t\t\t\t\t\t$href = substr($href,0,strpos($href,\"#\")-1);\n\t\t\t\t\t}\n\t\t\t\t\tif (!$admin->urlExists($href)) {\n\t\t\t\t\t\t$integrity_errors[$field] = array(\"a\" => array($href));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t// Internal link\n\t\t\t} elseif (substr($href,0,4) == \"http\") {\n\t\t\t\tif (!$admin->urlExists($href)) {\n\t\t\t\t\t$integrity_errors[$field] = array(\"a\" => array($href));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Only retrieve these if we have errors as we only need them for URL generation\n\tif (count($integrity_errors)) {\n\t\t$action = $admin->getModuleActionForForm($form);\n\t\t$module = $admin->getModule($action[\"module\"]);\n\t}\n\t\n\tforeach ($integrity_errors as $field => $error_types) {\n\t\tforeach ($error_types as $type => $errors) {\n\t\t\tforeach ($errors as $error) {\n?>\n<li>\n\t<section class=\"integrity_errors\">\n\t\t<a href=\"<?=ADMIN_ROOT.$module[\"route\"].\"/\".$action[\"route\"].\"/\".htmlspecialchars($_GET[\"id\"])?>/\" target=\"_blank\">Edit</a>\n\t\t<span class=\"icon_small icon_small_warning\"></span>\n\t\t<p>Broken <?=(($type == \"img\") ? \"Image\" : \"Link\")?>: <?=$error?> in field &ldquo;<?=$form[\"fields\"][$field][\"title\"]?>&rdquo;</p>\n\t</section>\n</li>\n<?\n\t\t\t}\n\t\t}\n\t}\n?>"], "filenames": ["core/admin/ajax/dashboard/check-module-integrity.php"], "buggy_code_start_loc": [51], "buggy_code_end_loc": [52], "fixing_code_start_loc": [51], "fixing_code_end_loc": [52], "type": "CWE-284", "message": "An issue was discovered in BigTree CMS before 4.2.15. The vulnerability exists due to insufficient filtration of user-supplied data in the \"id\" HTTP GET parameter passed to the \"core/admin/adjax/dashboard/check-module-integrity.php\" URL. An attacker could execute arbitrary HTML and script code in a browser in the context of the vulnerable website.", "other": {"cve": {"id": "CVE-2016-10223", "sourceIdentifier": "cve@mitre.org", "published": "2017-02-14T06:59:00.150", "lastModified": "2017-02-16T13:34:03.120", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in BigTree CMS before 4.2.15. The vulnerability exists due to insufficient filtration of user-supplied data in the \"id\" HTTP GET parameter passed to the \"core/admin/adjax/dashboard/check-module-integrity.php\" URL. An attacker could execute arbitrary HTML and script code in a browser in the context of the vulnerable website."}, {"lang": "es", "value": "Ha sido descubierto un problema en BigTree CMS en versiones anteriores a 4.2.15. La vulnerabilidad existe debido a la filtraci\u00f3n insuficiente de datos suministrados por el usuario en el par\u00e1metro \"id\" HTTP GET pasado a la URL \"core/admin/adjax/dashboard/check-module-integrity.php\". Un atacante podr\u00eda ejecutar HTML y c\u00f3digo script arbitrario en un navegador en el contexto de un sitio web vulnerable."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-284"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bigtreecms:bigtree_cms:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.2.14", "matchCriteriaId": "549BFFEC-38DD-496E-8FE0-0B04B45DFF1D"}]}]}], "references": [{"url": "https://github.com/bigtreecms/BigTree-CMS/blob/master/README.md", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/bigtreecms/BigTree-CMS/commit/59ebef5978f80e2fdc7b4db4a28b668c5a39fbc3", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/bigtreecms/BigTree-CMS/commit/59ebef5978f80e2fdc7b4db4a28b668c5a39fbc3"}}