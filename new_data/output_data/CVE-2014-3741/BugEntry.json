{"buggy_code": ["var printer_helper = {}\n    , fs = require(\"fs\")\n    , child_process = require(\"child_process\")\n    , os = require(\"os\")\n    , path = require(\"path\");\n\nif(process.platform==\"win32\"){\n    printer_helper = require('../build/Release/node_printer.node');\n}\n\nmodule.exports.printDirect = printDirect\n\n/*\nprint raw data. This function is intend to be asynchronous\n\nparameters:\n\tparameters - Object, parameters objects with the following structure:\n\t\tdata - String, mandatory, data to printer\n\t\tprinter - String, mandatory, mane of the printer\n\t\tdocname - String, optional, name of document showed in printer status\n\t\ttype - String, optional, only for wind32, data type, one of the RAW, TEXT\n\t\tsuccess - Function, optional, callback function\n\t\terror - Function, optional, callback function if exists any error\n\t\n\tor\n\t\n\tdata - String, mandatory, data to printer\n\tprinter - String, mandatory, mane of the printer\n\tdocname - String, optional, name of document showed in printer status\n\ttype - String, optional, data type, one of the RAW, TEXT\n\tsuccess - Function, optional, callback function\n\terror - Function, optional, callback function if exists any error\n*/\nfunction printDirect(parameters){\n\tvar data = parameters\n\t\t, printer\n\t\t, docname\n\t\t, type\n\t\t, success\n\t\t, error;\n\t\n\tif(arguments.length==1){\n\t\t//TODO: check parameters type\n\t\t//if (typeof parameters )\n\t\tdata = parameters.data;\n\t\tprinter = parameters.printer;\n\t\tdocname = parameters.docname;\n\t\ttype = parameters.type;\n\t\tsuccess = parameters.success;\n\t\terror = parameters.error;\n\t}else{\n\t\tprinter = arguments[1];\n\t\ttype = arguments[2];\n\t\tdocname = arguments[3];\n\t\tsuccess = arguments[4];\n\t\terror = arguments[5];\n\t}\n\t\n\tif(!success){\n\t\tsuccess = function(){};\n\t}\n\t\n\tif(!error){\n\t\terror = function(err){\n\t\t\tthrow err;\n\t\t};\n\t}\n\t\n\tif(!type){\n\t\ttype = \"RAW\";\n\t}\n\t\n\tif(!docname){\n\t\tdocname = \"node print job\";\n\t}\n\t\n\t//TODO: check parameters type\n\tif(process.platform==\"win32\"){// call C++ binding\n\t\tif(!printer_helper.printDirect){\n\t\t\terror(\"Not supported, try to compile this package with MSC\");\n\t\t\treturn;\n\t\t}\n\t\ttry{\n\t\t\tvar res = printer_helper.printDirect(data, printer, docname, type, success, error);\n\t\t\tif(res===true){\n\t\t\t\tsuccess();\n\t\t\t}else{\n\t\t\t\terror(Error(\"Something wrong\"));\n\t\t\t}\n\t\t}catch (e){\n\t\t\terror(e);\n\t\t}\n    }else if (!printer_helper.printDirect){// should be POSIX\n        var temp_file_name = path.join(os.tmpDir(),\"printing\");\n        fs.writeFileSync(temp_file_name, data);\n        child_process.exec('lpr -P'+printer+' -oraw -r'+' '+temp_file_name, function(err, stdout, stderr){\n            if (err !== null) {\n                error('ERROR: ' + err);\n                return;\n            }\n            if (stderr) {\n                error('STD ERROR: ' + stderr);\n                return;\n            }\n            success();\n        });\n    }else{\n\t\terror(\"Not supported\");\n\t}\n}\n"], "fixing_code": ["var printer_helper = {}\n    , fs = require(\"fs\")\n    , child_process = require(\"child_process\")\n    , os = require(\"os\")\n    , path = require(\"path\");\n\nif(process.platform==\"win32\"){\n    printer_helper = require('../build/Release/node_printer.node');\n}\n\nmodule.exports.printDirect = printDirect\n\n/*\nprint raw data. This function is intend to be asynchronous\n\nparameters:\n\tparameters - Object, parameters objects with the following structure:\n\t\tdata - String, mandatory, data to printer\n\t\tprinter - String, mandatory, mane of the printer\n\t\tdocname - String, optional, name of document showed in printer status\n\t\ttype - String, optional, only for wind32, data type, one of the RAW, TEXT\n\t\tsuccess - Function, optional, callback function\n\t\terror - Function, optional, callback function if exists any error\n\t\n\tor\n\t\n\tdata - String, mandatory, data to printer\n\tprinter - String, mandatory, mane of the printer\n\tdocname - String, optional, name of document showed in printer status\n\ttype - String, optional, data type, one of the RAW, TEXT\n\tsuccess - Function, optional, callback function\n\terror - Function, optional, callback function if exists any error\n*/\nfunction printDirect(parameters){\n\tvar data = parameters\n\t\t, printer\n\t\t, docname\n\t\t, type\n\t\t, success\n\t\t, error;\n\t\n\tif(arguments.length==1){\n\t\t//TODO: check parameters type\n\t\t//if (typeof parameters )\n\t\tdata = parameters.data;\n\t\tprinter = parameters.printer;\n\t\tdocname = parameters.docname;\n\t\ttype = parameters.type;\n\t\tsuccess = parameters.success;\n\t\terror = parameters.error;\n\t}else{\n\t\tprinter = arguments[1];\n\t\ttype = arguments[2];\n\t\tdocname = arguments[3];\n\t\tsuccess = arguments[4];\n\t\terror = arguments[5];\n\t}\n\t\n\tif(!success){\n\t\tsuccess = function(){};\n\t}\n\t\n\tif(!error){\n\t\terror = function(err){\n\t\t\tthrow err;\n\t\t};\n\t}\n\t\n\tif(!type){\n\t\ttype = \"RAW\";\n\t}\n\t\n\tif(!docname){\n\t\tdocname = \"node print job\";\n\t}\n\t\n\t//TODO: check parameters type\n\tif(process.platform==\"win32\"){// call C++ binding\n\t\tif(!printer_helper.printDirect){\n\t\t\terror(\"Not supported, try to compile this package with MSC\");\n\t\t\treturn;\n\t\t}\n\t\ttry{\n\t\t\tvar res = printer_helper.printDirect(data, printer, docname, type, success, error);\n\t\t\tif(res===true){\n\t\t\t\tsuccess();\n\t\t\t}else{\n\t\t\t\terror(Error(\"Something wrong\"));\n\t\t\t}\n\t\t}catch (e){\n\t\t\terror(e);\n\t\t}\n    }else if (!printer_helper.printDirect){// should be POSIX\n        var temp_file_name = path.join(os.tmpDir(),\"printing\");\n        fs.writeFileSync(temp_file_name, data);\n        child_process.execFile('lpr', ['-P' + printer, '-oraw', '-r', temp_file_name], function(err, stdout, stderr){\n            if (err !== null) {\n                error('ERROR: ' + err);\n                return;\n            }\n            if (stderr) {\n                error('STD ERROR: ' + stderr);\n                return;\n            }\n            success();\n        });\n    }else{\n\t\terror(\"Not supported\");\n\t}\n}\n"], "filenames": ["lib/printer.js"], "buggy_code_start_loc": [96], "buggy_code_end_loc": [97], "fixing_code_start_loc": [96], "fixing_code_end_loc": [97], "type": "CWE-77", "message": "The printDirect function in lib/printer.js in the node-printer module 0.0.1 and earlier for Node.js allows remote attackers to execute arbitrary commands via unspecified characters in the lpr command.", "other": {"cve": {"id": "CVE-2014-3741", "sourceIdentifier": "cve@mitre.org", "published": "2017-10-23T18:29:00.570", "lastModified": "2017-11-21T18:21:10.437", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The printDirect function in lib/printer.js in the node-printer module 0.0.1 and earlier for Node.js allows remote attackers to execute arbitrary commands via unspecified characters in the lpr command."}, {"lang": "es", "value": "La funci\u00c3\u00b3n printDirect en lib/printer.js en el m\u00c3\u00b3dulo node-printer en versiones 0.0.1 y anteriores para Node.js permite que atacantes remotos ejecuten comandos mediante caracteres no especificados en el comando lpr."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:node-printer_project:node-printer:*:*:*:*:*:node.js:*:*", "versionEndIncluding": "0.0.1", "matchCriteriaId": "E7507479-2664-40F4-AE6B-5494F7402C45"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2014/05/13/1", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2014/05/15/2", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/tojocky/node-printer/commit/e001e38738c17219a1d9dd8c31f7d82b9c0013c7", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch"]}, {"url": "https://nodesecurity.io/advisories/printer_potential_command_injection", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tojocky/node-printer/commit/e001e38738c17219a1d9dd8c31f7d82b9c0013c7"}}