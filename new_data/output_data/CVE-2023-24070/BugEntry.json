{"buggy_code": ["<?php\nclass CRUDComponent extends Component\n{\n    /** @var AppController */\n    public $Controller;\n\n    public function initialize(Controller $controller, $settings=array())\n    {\n        $this->Controller = $controller;\n    }\n\n    private function prepareResponse()\n    {\n        if ($this->Controller->request->is('ajax')) {\n            $this->Controller->set('ajax', true);\n        }\n    }\n\n    public function index(array $options)\n    {\n        $this->prepareResponse();\n        if (!empty($options['quickFilters'])) {\n            if (empty($options['filters'])) {\n                $options['filters'] = [];\n            }\n            $options['filters'][] = 'quickFilter';\n        }\n        $params = $this->Controller->IndexFilter->harvestParameters(empty($options['filters']) ? [] : $options['filters']);\n        $query = [];\n        $query = $this->setFilters($params, $query);\n        $query = $this->setQuickFilters($params, $query, empty($options['quickFilters']) ? [] : $options['quickFilters']);\n        if (!empty($options['contain'])) {\n            $query['contain'] = $options['contain'];\n        }\n        if (!empty($options['conditions'])) {\n            $query['conditions']['AND'][] = $options['conditions'];\n        }\n        if ($this->Controller->IndexFilter->isRest()) {\n            if (!empty($this->Controller->paginate['fields'])) {\n                $query['fields'] = $this->Controller->paginate['fields'];\n            }\n            $data = $this->Controller->{$this->Controller->modelClass}->find('all', $query);\n            if (isset($options['afterFind'])) {\n                if (is_callable($options['afterFind'])) {\n                    $data = $options['afterFind']($data);\n                } else {\n                    $data = $this->Controller->{$this->Controller->modelClass}->{$options['afterFind']}($data);\n                }\n            }\n            $this->Controller->restResponsePayload = $this->Controller->RestResponse->viewData($data, 'json');\n        } else {\n            $this->Controller->paginate = $query;\n            $data = $this->Controller->paginate();\n            if (isset($options['afterFind'])) {\n                if (is_callable($options['afterFind'])) {\n                    $data = $options['afterFind']($data);\n                } else {\n                    $data = $this->Controller->{$this->Controller->defaultModel}->{$options['afterFind']}($data);\n                }\n            }\n            $this->Controller->set('data', $data);\n        }\n    }\n\n    public function add(array $params = [])\n    {\n        $modelName = $this->Controller->modelClass;\n        $data = [];\n        if ($this->Controller->request->is('post')) {\n            $input = $this->Controller->request->data;\n            if (empty($input[$modelName])) {\n                $input = [$modelName => $input];\n            }\n            if (!empty($params['override'])) {\n                foreach ($params['override'] as $field => $value) {\n                    $input[$modelName][$field] = $value;\n                }\n            }\n            unset($input[$modelName]['id']);\n            if (!empty($params['fields'])) {\n                $data = [];\n                foreach ($params['fields'] as $field) {\n                    $data[$field] = $input[$modelName][$field];\n                }\n            } else {\n                $data = $input;\n            }\n            if (isset($params['beforeSave'])) {\n                $data = $params['beforeSave']($data);\n            }\n            /** @var Model $model */\n            $model = $this->Controller->{$modelName};\n            $savedData = $model->save($data);\n            if ($savedData) {\n                if (isset($params['afterSave'])) {\n                    $params['afterSave']($data);\n                }\n                $data = $model->find('first', [\n                    'recursive' => -1,\n                    'conditions' => [\n                        'id' => $model->id\n                    ]\n                ]);\n                if (empty($data)) {\n                    throw new Exception(\"Something went wrong, saved data not found in database.\");\n                }\n                if (isset($params['afterFind'])) {\n                    $data = $params['afterFind']($data, $savedData);\n                }\n                $message = __('%s added.', $modelName);\n                if ($this->Controller->IndexFilter->isRest()) {\n                    $this->Controller->restResponsePayload = $this->Controller->RestResponse->viewData($data, 'json');\n                } else {\n                    $this->Controller->Flash->success($message);\n                    if (!empty($params['displayOnSuccess'])) {\n                        $this->Controller->set('entity', $data);\n                        $this->Controller->set('referer', $this->Controller->referer());\n                        $this->Controller->render($params['displayOnSuccess']);\n                        return;\n                    }\n\n                    $redirect = isset($params['redirect']) ? $params['redirect'] : ['action' => 'index'];\n                    if (!empty($params['redirect_controller'])) {\n                        if (is_array($redirect)) {\n                            $redirect['controller'] = $params['redirect_controller'];\n                        } else {\n                            $redirect = '/' . $params['redirect_controller'] . '/' . $redirect;\n                        }\n                    }\n                    // For AJAX requests doesn't make sense to redirect, redirect must be done on javascript side in `submitGenericFormInPlace`\n                    if ($this->Controller->request->is('ajax')) {\n                        $redirect = Router::url($redirect);\n                        $this->Controller->restResponsePayload = $this->Controller->RestResponse->viewData(['redirect' => $redirect], 'json');\n                    } else {\n                        $this->Controller->redirect($redirect);\n                    }\n                }\n            } else {\n                $message = __('%s could not be added.', $modelName);\n                if ($this->Controller->IndexFilter->isRest()) {\n                    $controllerName = $this->Controller->params['controller'];\n                    $actionName = $this->Controller->params['action'];\n                    $this->Controller->restResponsePayload = $this->Controller->RestResponse->saveFailResponse($controllerName, $actionName, false, $model->validationErrors, 'json');\n                } else {\n                    $this->Controller->Flash->error($message);\n                }\n            }\n        }\n        $this->Controller->set('entity', $data);\n    }\n\n    public function edit(int $id, array $params = [])\n    {\n        $modelName = $this->Controller->modelClass;\n        if (empty($id)) {\n            throw new NotFoundException(__('Invalid %s.', $modelName));\n        }\n        $query = isset($params['get']) ? $params['get'] : [\n            'recursive' => -1,\n            'conditions' => [\n                $modelName . '.id' => $id\n            ],\n        ];\n        if (!empty($params['conditions'])) {\n            $query['conditions']['AND'][] = $params['conditions'];\n        }\n        if (!empty($params['contain'])) {\n            $query['contain'] = $params['contain'];\n        }\n        /** @var Model $model */\n        $model = $this->Controller->{$modelName};\n        $data = $model->find('first', $query);\n        if (empty($data)) {\n            throw new NotFoundException(__('Invalid %s.', $modelName));\n        }\n        if (isset($params['afterFind'])) {\n            $data = $params['afterFind']($data);\n        }\n        if ($this->Controller->request->is('post') || $this->Controller->request->is('put')) {\n            $input = $this->Controller->request->data;\n            if (empty($input[$modelName])) {\n                $input = [$modelName => $input];\n            }\n            if (!empty($params['override'])) {\n                foreach ($params['override'] as $field => $value) {\n                    $input[$field] = $value;\n                }\n            }\n            if (!empty($params['fields'])) {\n                foreach ($params['fields'] as $field) {\n                    if(isset($input[$modelName][$field])){\n                        $data[$modelName][$field] = $input[$modelName][$field];\n                    }\n                }\n            } else {\n                foreach ($input[$modelName] as $field => $fieldData) {\n                    $data[$modelName][$field] = $fieldData;\n                }\n            }\n            if (isset($params['beforeSave'])) {\n                $data = $params['beforeSave']($data);\n            }\n            if ($model->save($data)) {\n                if (isset($params['afterSave'])) {\n                    $params['afterSave']($data);\n                }\n                $message = __('%s updated.', $modelName);\n                if ($this->Controller->IndexFilter->isRest()) {\n                    $this->Controller->restResponsePayload = $this->Controller->RestResponse->viewData($data, 'json');\n                    return;\n                } else {\n                    $this->Controller->Flash->success($message);\n                    $this->Controller->redirect(isset($params['redirect']) ? $params['redirect'] : ['action' => 'index']);\n                }\n            } else {\n                if ($this->Controller->IndexFilter->isRest()) {\n                    $controllerName = $this->Controller->params['controller'];\n                    $actionName = $this->Controller->params['action'];\n                    $this->Controller->restResponsePayload = $this->Controller->RestResponse->saveFailResponse($controllerName, $actionName, false, $model->validationErrors, 'json');\n                }\n            }\n        } else {\n            $this->Controller->request->data = $data;\n        }\n        $this->Controller->set('entity', $data);\n    }\n\n    public function view(int $id, array $params = [])\n    {\n        $modelName = $this->Controller->modelClass;\n        if (empty($id)) {\n            throw new NotFoundException(__('Invalid %s.', $modelName));\n        }\n        $query = [\n            'recursive' => -1,\n            'conditions' => [$modelName . '.id' => $id],\n            'contain' => empty($params['contain']) ? [] : $params['contain']\n        ];\n        if (!empty($params['conditions'])) {\n            $query['conditions']['AND'][] = $params['conditions'];\n        }\n        $data = $this->Controller->{$modelName}->find('first', $query);\n        if (empty($data)) {\n            throw new NotFoundException(__('Invalid %s.', $modelName));\n        }\n        if (isset($params['afterFind'])) {\n            $data = $params['afterFind']($data);\n        }\n        if ($this->Controller->IndexFilter->isRest()) {\n            $this->Controller->restResponsePayload = $this->Controller->RestResponse->viewData($data, 'json');\n        } else {\n            $this->Controller->set('data', $data);\n        }\n    }\n\n    public function delete(int $id, array $params = [])\n    {\n        $this->prepareResponse();\n        $modelName = $this->Controller->modelClass;\n        if (empty($id)) {\n            throw new NotFoundException(__('Invalid %s.', $modelName));\n        }\n        $conditions = [];\n        $conditions['AND'][] = [$modelName . '.id' => $id];\n        if (!empty($params['conditions'])) {\n            $conditions['AND'][] = $params['conditions'];\n        }\n        $data = $this->Controller->{$modelName}->find('first', [\n            'recursive' => -1,\n            'conditions' => $conditions,\n            'contain' => empty($params['contain']) ? [] : $params['contain'],\n        ]);\n        if (empty($data)) {\n            throw new NotFoundException(__('Invalid %s.', $modelName));\n        }\n        $validationError = null;\n        if (isset($params['validate'])) {\n            try {\n                $params['validate']($data);\n            } catch (Exception $e) {\n                $validationError = $e->getMessage();\n                if ($this->Controller->IndexFilter->isRest()) {\n                    $this->Controller->restResponsePayload = $this->Controller->RestResponse->saveFailResponse($modelName, 'delete', $id, $validationError);\n                }\n            }\n        }\n        if (isset($params['beforeDelete'])) {\n            $data = $params['beforeDelete']($data);\n            if (empty($data)) {\n                throw new MethodNotAllowedException('Something went wrong, delete action failed.');\n            }\n        }\n        if ($validationError === null && $this->Controller->request->is('post') || $this->Controller->request->is('delete')) {\n            if (!empty($params['modelFunction'])) {\n                $result = $this->Controller->$modelName->{$params['modelFunction']}($id);\n            } else {\n                $result = $this->Controller->{$modelName}->delete($id);\n            }\n            if ($result) {\n                $message = __('%s deleted.', $modelName);\n                if ($this->Controller->IndexFilter->isRest()) {\n                    $this->Controller->restResponsePayload = $this->Controller->RestResponse->saveSuccessResponse($modelName, 'delete', $id, 'json', $message);\n                    return;\n                } else {\n                    $this->Controller->Flash->success($message);\n                    $this->Controller->redirect($this->Controller->referer());\n                }\n            }\n        }\n        $this->Controller->set('validationError', $validationError);\n        $this->Controller->set('id', $data[$modelName]['id']);\n        $this->Controller->set('data', $data);\n        $this->Controller->layout = 'ajax';\n        $this->Controller->render('/genericTemplates/delete');\n    }\n\n    public function setQuickFilters($params, array $query, $quickFilterFields)\n    {\n        if (!empty($params['quickFilter']) && !empty($quickFilterFields)) {\n            $queryConditions = [];\n            $filter = '%' . strtolower($params['quickFilter']) . '%';\n            foreach ($quickFilterFields as $filterField) {\n                $queryConditions[\"LOWER($filterField) LIKE\"] = $filter;\n            }\n            $query['conditions']['OR'] = $queryConditions;\n        }\n        return $query;\n    }\n\n    public function setFilters(array $params, array $query)\n    {\n        // For CakePHP 2, we don't need to distinguish between simpleFilters and relatedFilters\n        //$params = $this->massageFilters($params);\n        if (!empty($params)) {\n            foreach ($params as $filter => $filterValue) {\n                if ($filter === 'quickFilter') {\n                    continue;\n                }\n                if (strlen(trim($filterValue, '%')) === strlen($filterValue)) {\n                    $query['conditions']['AND'][] = [$filter => $filterValue];\n                } else {\n                    $query['conditions']['AND'][] = [$filter . ' LIKE' => $filterValue];\n                }\n            }\n        }\n        /* Currently not implemented\n        if (!empty($params['relatedFilters'])) {\n            foreach ($params['relatedFilters'] as $filter => $filterValue) {\n                $filterParts = explode('.', $filter);\n                $query->matching($filterParts[0], function(\\Cake\\ORM\\Query $q) use ($filterValue, $filter) {\n                    if (strlen(trim($filterValue, '%')) === strlen($filterValue)) {\n                        return $q->where([$filter => $filterValue]);\n                    } else {\n                        return $q->like([$filter => $filterValue]);\n                    }\n                });\n            }\n        }\n        */\n        return $query;\n    }\n\n    protected function massageFilters(array $params)\n    {\n        $massagedFilters = [\n            'simpleFilters' => [],\n            'relatedFilters' => []\n        ];\n        if (!empty($params)) {\n            foreach ($params as $param => $paramValue) {\n                if (strpos($param, '.') !== false) {\n                    $param = explode('.', $param);\n                    if ($param[0] === $this->Controller->{$this->Controller->modelClass}) {\n                        $massagedFilters['simpleFilters'][implode('.', $param)] = $paramValue;\n                    } else {\n                        $massagedFilters['relatedFilters'][implode('.', $param)] = $paramValue;\n                    }\n                } else {\n                    $massagedFilters['simpleFilters'][$param] = $paramValue;\n                }\n            }\n        }\n        return $massagedFilters;\n    }\n}\n", "<?php\n    if ($ajax) {\n?>\n        <div id=\"genericModal\" class=\"modal hide fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"genericModalLabel\" aria-hidden=\"true\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">\u00d7</button>\n                <h3 id=\"genericModalLabel\"><?= __('Auth key created'); ?></h3>\n            </div>\n            <div class=\"modal-body modal-body-long\">\n                <p><?= __('Please make sure that you note down the auth key below, this is the only time the auth key is shown in plain text, so make sure you save it. If you lose the key, simply remove the entry and generate a new one.'); ?></p>\n                <p><?=__('MISP will use the first and the last 4 characters for identification purposes.')?></p>\n                <pre class=\"quickSelect\"><?= h($entity['AuthKey']['authkey_raw']) ?></pre>\n            </div>\n            <div class=\"modal-footer\">\n                <a href=\"<?= $referer ?>\" class=\"btn btn-primary\"><?= __('I have noted down my key, take me back now') ?></a>\n            </div>\n        </div>\n<?php\n    } else {\n?>\n        <h4><?= __('Auth key created'); ?></h4>\n        <p><?= __('Please make sure that you note down the auth key below, this is the only time the auth key is shown in plain text, so make sure you save it. If you lose the key, simply remove the entry and generate a new one.'); ?></p>\n        <p><?=__('MISP will use the first and the last 4 characters for identification purposes.')?></p>\n        <pre class=\"quickSelect\"><?= h($entity['AuthKey']['authkey_raw']) ?></pre>\n        <a href=\"<?= $referer ?>\" class=\"btn btn-primary\"><?= __('I have noted down my key, take me back now') ?></a>\n<?php\n    }\n?>\n"], "fixing_code": ["<?php\nclass CRUDComponent extends Component\n{\n    /** @var AppController */\n    public $Controller;\n\n    public function initialize(Controller $controller, $settings=array())\n    {\n        $this->Controller = $controller;\n    }\n\n    private function prepareResponse()\n    {\n        if ($this->Controller->request->is('ajax')) {\n            $this->Controller->set('ajax', true);\n        }\n    }\n\n    public function index(array $options)\n    {\n        $this->prepareResponse();\n        if (!empty($options['quickFilters'])) {\n            if (empty($options['filters'])) {\n                $options['filters'] = [];\n            }\n            $options['filters'][] = 'quickFilter';\n        }\n        $params = $this->Controller->IndexFilter->harvestParameters(empty($options['filters']) ? [] : $options['filters']);\n        $query = [];\n        $query = $this->setFilters($params, $query);\n        $query = $this->setQuickFilters($params, $query, empty($options['quickFilters']) ? [] : $options['quickFilters']);\n        if (!empty($options['contain'])) {\n            $query['contain'] = $options['contain'];\n        }\n        if (!empty($options['conditions'])) {\n            $query['conditions']['AND'][] = $options['conditions'];\n        }\n        if ($this->Controller->IndexFilter->isRest()) {\n            if (!empty($this->Controller->paginate['fields'])) {\n                $query['fields'] = $this->Controller->paginate['fields'];\n            }\n            $data = $this->Controller->{$this->Controller->modelClass}->find('all', $query);\n            if (isset($options['afterFind'])) {\n                if (is_callable($options['afterFind'])) {\n                    $data = $options['afterFind']($data);\n                } else {\n                    $data = $this->Controller->{$this->Controller->modelClass}->{$options['afterFind']}($data);\n                }\n            }\n            $this->Controller->restResponsePayload = $this->Controller->RestResponse->viewData($data, 'json');\n        } else {\n            $this->Controller->paginate = $query;\n            $data = $this->Controller->paginate();\n            if (isset($options['afterFind'])) {\n                if (is_callable($options['afterFind'])) {\n                    $data = $options['afterFind']($data);\n                } else {\n                    $data = $this->Controller->{$this->Controller->defaultModel}->{$options['afterFind']}($data);\n                }\n            }\n            $this->Controller->set('data', $data);\n        }\n    }\n\n    public function add(array $params = [])\n    {\n        $modelName = $this->Controller->modelClass;\n        $data = [];\n        if ($this->Controller->request->is('post')) {\n            $input = $this->Controller->request->data;\n            if (empty($input[$modelName])) {\n                $input = [$modelName => $input];\n            }\n            if (!empty($params['override'])) {\n                foreach ($params['override'] as $field => $value) {\n                    $input[$modelName][$field] = $value;\n                }\n            }\n            unset($input[$modelName]['id']);\n            if (!empty($params['fields'])) {\n                $data = [];\n                foreach ($params['fields'] as $field) {\n                    $data[$field] = $input[$modelName][$field];\n                }\n            } else {\n                $data = $input;\n            }\n            if (isset($params['beforeSave'])) {\n                $data = $params['beforeSave']($data);\n            }\n            /** @var Model $model */\n            $model = $this->Controller->{$modelName};\n            $savedData = $model->save($data);\n            if ($savedData) {\n                if (isset($params['afterSave'])) {\n                    $params['afterSave']($data);\n                }\n                $data = $model->find('first', [\n                    'recursive' => -1,\n                    'conditions' => [\n                        'id' => $model->id\n                    ]\n                ]);\n                if (empty($data)) {\n                    throw new Exception(\"Something went wrong, saved data not found in database.\");\n                }\n                if (isset($params['afterFind'])) {\n                    $data = $params['afterFind']($data, $savedData);\n                }\n                $message = __('%s added.', $modelName);\n                if ($this->Controller->IndexFilter->isRest()) {\n                    $this->Controller->restResponsePayload = $this->Controller->RestResponse->viewData($data, 'json');\n                } else {\n                    $this->Controller->Flash->success($message);\n                    if (!empty($params['displayOnSuccess'])) {\n                        $this->Controller->set('entity', $data);\n                        $this->Controller->set('referer', $this->Controller->referer(['action' => 'view', $model->id], true));\n                        $this->Controller->render($params['displayOnSuccess']);\n                        return;\n                    }\n\n                    $redirect = isset($params['redirect']) ? $params['redirect'] : ['action' => 'index'];\n                    if (!empty($params['redirect_controller'])) {\n                        if (is_array($redirect)) {\n                            $redirect['controller'] = $params['redirect_controller'];\n                        } else {\n                            $redirect = '/' . $params['redirect_controller'] . '/' . $redirect;\n                        }\n                    }\n                    // For AJAX requests doesn't make sense to redirect, redirect must be done on javascript side in `submitGenericFormInPlace`\n                    if ($this->Controller->request->is('ajax')) {\n                        $redirect = Router::url($redirect);\n                        $this->Controller->restResponsePayload = $this->Controller->RestResponse->viewData(['redirect' => $redirect], 'json');\n                    } else {\n                        $this->Controller->redirect($redirect);\n                    }\n                }\n            } else {\n                $message = __('%s could not be added.', $modelName);\n                if ($this->Controller->IndexFilter->isRest()) {\n                    $controllerName = $this->Controller->params['controller'];\n                    $actionName = $this->Controller->params['action'];\n                    $this->Controller->restResponsePayload = $this->Controller->RestResponse->saveFailResponse($controllerName, $actionName, false, $model->validationErrors, 'json');\n                } else {\n                    $this->Controller->Flash->error($message);\n                }\n            }\n        }\n        $this->Controller->set('entity', $data);\n    }\n\n    public function edit(int $id, array $params = [])\n    {\n        $modelName = $this->Controller->modelClass;\n        if (empty($id)) {\n            throw new NotFoundException(__('Invalid %s.', $modelName));\n        }\n        $query = isset($params['get']) ? $params['get'] : [\n            'recursive' => -1,\n            'conditions' => [\n                $modelName . '.id' => $id\n            ],\n        ];\n        if (!empty($params['conditions'])) {\n            $query['conditions']['AND'][] = $params['conditions'];\n        }\n        if (!empty($params['contain'])) {\n            $query['contain'] = $params['contain'];\n        }\n        /** @var Model $model */\n        $model = $this->Controller->{$modelName};\n        $data = $model->find('first', $query);\n        if (empty($data)) {\n            throw new NotFoundException(__('Invalid %s.', $modelName));\n        }\n        if (isset($params['afterFind'])) {\n            $data = $params['afterFind']($data);\n        }\n        if ($this->Controller->request->is('post') || $this->Controller->request->is('put')) {\n            $input = $this->Controller->request->data;\n            if (empty($input[$modelName])) {\n                $input = [$modelName => $input];\n            }\n            if (!empty($params['override'])) {\n                foreach ($params['override'] as $field => $value) {\n                    $input[$field] = $value;\n                }\n            }\n            if (!empty($params['fields'])) {\n                foreach ($params['fields'] as $field) {\n                    if(isset($input[$modelName][$field])){\n                        $data[$modelName][$field] = $input[$modelName][$field];\n                    }\n                }\n            } else {\n                foreach ($input[$modelName] as $field => $fieldData) {\n                    $data[$modelName][$field] = $fieldData;\n                }\n            }\n            if (isset($params['beforeSave'])) {\n                $data = $params['beforeSave']($data);\n            }\n            if ($model->save($data)) {\n                if (isset($params['afterSave'])) {\n                    $params['afterSave']($data);\n                }\n                $message = __('%s updated.', $modelName);\n                if ($this->Controller->IndexFilter->isRest()) {\n                    $this->Controller->restResponsePayload = $this->Controller->RestResponse->viewData($data, 'json');\n                    return;\n                } else {\n                    $this->Controller->Flash->success($message);\n                    $this->Controller->redirect(isset($params['redirect']) ? $params['redirect'] : ['action' => 'index']);\n                }\n            } else {\n                if ($this->Controller->IndexFilter->isRest()) {\n                    $controllerName = $this->Controller->params['controller'];\n                    $actionName = $this->Controller->params['action'];\n                    $this->Controller->restResponsePayload = $this->Controller->RestResponse->saveFailResponse($controllerName, $actionName, false, $model->validationErrors, 'json');\n                }\n            }\n        } else {\n            $this->Controller->request->data = $data;\n        }\n        $this->Controller->set('entity', $data);\n    }\n\n    public function view(int $id, array $params = [])\n    {\n        $modelName = $this->Controller->modelClass;\n        if (empty($id)) {\n            throw new NotFoundException(__('Invalid %s.', $modelName));\n        }\n        $query = [\n            'recursive' => -1,\n            'conditions' => [$modelName . '.id' => $id],\n            'contain' => empty($params['contain']) ? [] : $params['contain']\n        ];\n        if (!empty($params['conditions'])) {\n            $query['conditions']['AND'][] = $params['conditions'];\n        }\n        $data = $this->Controller->{$modelName}->find('first', $query);\n        if (empty($data)) {\n            throw new NotFoundException(__('Invalid %s.', $modelName));\n        }\n        if (isset($params['afterFind'])) {\n            $data = $params['afterFind']($data);\n        }\n        if ($this->Controller->IndexFilter->isRest()) {\n            $this->Controller->restResponsePayload = $this->Controller->RestResponse->viewData($data, 'json');\n        } else {\n            $this->Controller->set('data', $data);\n        }\n    }\n\n    public function delete(int $id, array $params = [])\n    {\n        $this->prepareResponse();\n        $modelName = $this->Controller->modelClass;\n        if (empty($id)) {\n            throw new NotFoundException(__('Invalid %s.', $modelName));\n        }\n        $conditions = [];\n        $conditions['AND'][] = [$modelName . '.id' => $id];\n        if (!empty($params['conditions'])) {\n            $conditions['AND'][] = $params['conditions'];\n        }\n        $data = $this->Controller->{$modelName}->find('first', [\n            'recursive' => -1,\n            'conditions' => $conditions,\n            'contain' => empty($params['contain']) ? [] : $params['contain'],\n        ]);\n        if (empty($data)) {\n            throw new NotFoundException(__('Invalid %s.', $modelName));\n        }\n        $validationError = null;\n        if (isset($params['validate'])) {\n            try {\n                $params['validate']($data);\n            } catch (Exception $e) {\n                $validationError = $e->getMessage();\n                if ($this->Controller->IndexFilter->isRest()) {\n                    $this->Controller->restResponsePayload = $this->Controller->RestResponse->saveFailResponse($modelName, 'delete', $id, $validationError);\n                }\n            }\n        }\n        if (isset($params['beforeDelete'])) {\n            $data = $params['beforeDelete']($data);\n            if (empty($data)) {\n                throw new MethodNotAllowedException('Something went wrong, delete action failed.');\n            }\n        }\n        if ($validationError === null && $this->Controller->request->is('post') || $this->Controller->request->is('delete')) {\n            if (!empty($params['modelFunction'])) {\n                $result = $this->Controller->$modelName->{$params['modelFunction']}($id);\n            } else {\n                $result = $this->Controller->{$modelName}->delete($id);\n            }\n            if ($result) {\n                $message = __('%s deleted.', $modelName);\n                if ($this->Controller->IndexFilter->isRest()) {\n                    $this->Controller->restResponsePayload = $this->Controller->RestResponse->saveSuccessResponse($modelName, 'delete', $id, 'json', $message);\n                    return;\n                } else {\n                    $this->Controller->Flash->success($message);\n                    $this->Controller->redirect($this->Controller->referer());\n                }\n            }\n        }\n        $this->Controller->set('validationError', $validationError);\n        $this->Controller->set('id', $data[$modelName]['id']);\n        $this->Controller->set('data', $data);\n        $this->Controller->layout = 'ajax';\n        $this->Controller->render('/genericTemplates/delete');\n    }\n\n    public function setQuickFilters($params, array $query, $quickFilterFields)\n    {\n        if (!empty($params['quickFilter']) && !empty($quickFilterFields)) {\n            $queryConditions = [];\n            $filter = '%' . strtolower($params['quickFilter']) . '%';\n            foreach ($quickFilterFields as $filterField) {\n                $queryConditions[\"LOWER($filterField) LIKE\"] = $filter;\n            }\n            $query['conditions']['OR'] = $queryConditions;\n        }\n        return $query;\n    }\n\n    public function setFilters(array $params, array $query)\n    {\n        // For CakePHP 2, we don't need to distinguish between simpleFilters and relatedFilters\n        //$params = $this->massageFilters($params);\n        if (!empty($params)) {\n            foreach ($params as $filter => $filterValue) {\n                if ($filter === 'quickFilter') {\n                    continue;\n                }\n                if (strlen(trim($filterValue, '%')) === strlen($filterValue)) {\n                    $query['conditions']['AND'][] = [$filter => $filterValue];\n                } else {\n                    $query['conditions']['AND'][] = [$filter . ' LIKE' => $filterValue];\n                }\n            }\n        }\n        /* Currently not implemented\n        if (!empty($params['relatedFilters'])) {\n            foreach ($params['relatedFilters'] as $filter => $filterValue) {\n                $filterParts = explode('.', $filter);\n                $query->matching($filterParts[0], function(\\Cake\\ORM\\Query $q) use ($filterValue, $filter) {\n                    if (strlen(trim($filterValue, '%')) === strlen($filterValue)) {\n                        return $q->where([$filter => $filterValue]);\n                    } else {\n                        return $q->like([$filter => $filterValue]);\n                    }\n                });\n            }\n        }\n        */\n        return $query;\n    }\n\n    protected function massageFilters(array $params)\n    {\n        $massagedFilters = [\n            'simpleFilters' => [],\n            'relatedFilters' => []\n        ];\n        if (!empty($params)) {\n            foreach ($params as $param => $paramValue) {\n                if (strpos($param, '.') !== false) {\n                    $param = explode('.', $param);\n                    if ($param[0] === $this->Controller->{$this->Controller->modelClass}) {\n                        $massagedFilters['simpleFilters'][implode('.', $param)] = $paramValue;\n                    } else {\n                        $massagedFilters['relatedFilters'][implode('.', $param)] = $paramValue;\n                    }\n                } else {\n                    $massagedFilters['simpleFilters'][$param] = $paramValue;\n                }\n            }\n        }\n        return $massagedFilters;\n    }\n}\n", "<?php\n    if ($ajax) {\n?>\n        <div id=\"genericModal\" class=\"modal hide fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"genericModalLabel\" aria-hidden=\"true\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">\u00d7</button>\n                <h3 id=\"genericModalLabel\"><?= __('Auth key created'); ?></h3>\n            </div>\n            <div class=\"modal-body modal-body-long\">\n                <p><?= __('Please make sure that you note down the auth key below, this is the only time the auth key is shown in plain text, so make sure you save it. If you lose the key, simply remove the entry and generate a new one.'); ?></p>\n                <p><?=__('MISP will use the first and the last 4 characters for identification purposes.')?></p>\n                <pre class=\"quickSelect\"><?= h($entity['AuthKey']['authkey_raw']) ?></pre>\n            </div>\n            <div class=\"modal-footer\">\n                <a href=\"<?= h($referer) ?>\" class=\"btn btn-primary\"><?= __('I have noted down my key, take me back now') ?></a>\n            </div>\n        </div>\n<?php\n    } else {\n?>\n        <h4><?= __('Auth key created'); ?></h4>\n        <p><?= __('Please make sure that you note down the auth key below, this is the only time the auth key is shown in plain text, so make sure you save it. If you lose the key, simply remove the entry and generate a new one.'); ?></p>\n        <p><?=__('MISP will use the first and the last 4 characters for identification purposes.')?></p>\n        <pre class=\"quickSelect\"><?= h($entity['AuthKey']['authkey_raw']) ?></pre>\n        <a href=\"<?= h($referer) ?>\" class=\"btn btn-primary\"><?= __('I have noted down my key, take me back now') ?></a>\n<?php\n    }\n?>\n"], "filenames": ["app/Controller/Component/CRUDComponent.php", "app/View/AuthKeys/authkey_display.ctp"], "buggy_code_start_loc": [117, 15], "buggy_code_end_loc": [118, 26], "fixing_code_start_loc": [117, 15], "fixing_code_end_loc": [118, 26], "type": "CWE-79", "message": "app/View/AuthKeys/authkey_display.ctp in MISP through 2.4.167 has an XSS in authkey add via a Referer field.", "other": {"cve": {"id": "CVE-2023-24070", "sourceIdentifier": "cve@mitre.org", "published": "2023-01-23T05:15:18.997", "lastModified": "2023-01-30T15:18:10.067", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "app/View/AuthKeys/authkey_display.ctp in MISP through 2.4.167 has an XSS in authkey add via a Referer field."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp-project:malware_information_sharing_platform:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.4.167", "matchCriteriaId": "D575BDC7-FF19-4808-910F-FAD15CDD75B8"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/f7238fe5e71ac065daa43c8607d02f8ac682f18f", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/f7238fe5e71ac065daa43c8607d02f8ac682f18f"}}