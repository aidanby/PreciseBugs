{"buggy_code": ["/* OpenClinica is distributed under the\n * GNU Lesser General Public License (GNU LGPL).\n\n * For details see: http://www.openclinica.org/license\n * copyright 2003-2005 Akaza Research\n */\npackage org.akaza.openclinica.control.admin;\n\nimport org.akaza.openclinica.bean.core.Role;\nimport org.akaza.openclinica.bean.submit.CRFVersionBean;\nimport org.akaza.openclinica.control.SpringServletAccess;\nimport org.akaza.openclinica.control.core.SecureController;\nimport org.akaza.openclinica.control.form.FormProcessor;\nimport org.akaza.openclinica.dao.core.CoreResources;\nimport org.akaza.openclinica.dao.submit.CRFVersionDAO;\nimport org.akaza.openclinica.view.Page;\nimport org.akaza.openclinica.web.InsufficientPermissionException;\nimport org.akaza.openclinica.web.SQLInitServlet;\nimport org.apache.commons.io.FilenameUtils;\n\nimport java.io.DataInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\n\nimport javax.servlet.ServletOutputStream;\n\n/**\n * @author jxu\n *         <p/>\n *         TODO To change the template for this generated type comment go to Window - Preferences - Java - Code Style -\n *         Code Templates\n */\npublic class DownloadVersionSpreadSheetServlet extends SecureController {\n    public static String CRF_ID = \"crfId\";\n\n    public static String CRF_VERSION_NAME = \"crfVersionName\";\n\n    public static String CRF_VERSION_ID = \"crfVersionId\";\n\n    public static String CRF_VERSION_TEMPLATE = \"CRF_Design_Template_v3.10.xls\";\n\n    /**\n     *\n     */\n    @Override\n    public void mayProceed() throws InsufficientPermissionException {\n        if (ub.isSysAdmin()) {\n            return;\n        }\n\n        if (currentRole.getRole().equals(Role.STUDYDIRECTOR) || currentRole.getRole().equals(Role.COORDINATOR)) {\n            return;\n        }\n\n        addPageMessage(respage.getString(\"no_have_correct_privilege_current_study\") + respage.getString(\"change_study_contact_sysadmin\"));\n        throw new InsufficientPermissionException(Page.MANAGE_STUDY_SERVLET, resexception.getString(\"not_study_director\"), \"1\");\n\n    }\n\n    private CoreResources getCoreResources() {\n        return (CoreResources) SpringServletAccess.getApplicationContext(context).getBean(\"coreResources\");\n    }\n\n    @Override\n    public void processRequest() throws Exception {\n        String dir = SQLInitServlet.getField(\"filePath\") + \"crf\" + File.separator + \"new\" + File.separator;\n        // YW 09-10-2007 << Now CRF_Design_Template_v2.xls is located at\n        // $CATALINA_HOME/webapps/OpenClinica-instanceName/properties\n        FormProcessor fp = new FormProcessor(request);\n\n        String crfIdString = fp.getString(CRF_ID);\n        int crfVersionId = fp.getInt(CRF_VERSION_ID);\n\n        CRFVersionDAO cvdao = new CRFVersionDAO(sm.getDataSource());\n\n        CRFVersionBean version = (CRFVersionBean) cvdao.findByPK(crfVersionId);\n\n        boolean isTemplate = fp.getBoolean(\"template\");\n\n        String excelFileName = FilenameUtils.getName(crfIdString + version.getOid() + \".xls\");\n\n        // aha, what if it's the old style? next line is for backwards compat,\n        // tbh 07/2008\n        File excelFile = null;\n        String oldExcelFileName = FilenameUtils.getName(crfIdString + version.getName() + \".xls\");\n        if (isTemplate) {\n            // excelFile = new File(dir + CRF_VERSION_TEMPLATE);\n            excelFile = getCoreResources().getFile(CRF_VERSION_TEMPLATE, \"crf\" + File.separator + \"original\" + File.separator);\n            excelFileName = CRF_VERSION_TEMPLATE;\n            // FileOutputStream fos = new FileOutputStream(excelFile);\n            // IOUtils.copy(getCoreResources().getInputStream(CRF_VERSION_TEMPLATE), fos);\n            // IOUtils.closeQuietly(fos);\n        } else {\n        \t// fix path traversal issue\n            excelFile = new File(dir,excelFileName);\n            // backwards compat\n            File oldExcelFile = new File(dir, oldExcelFileName);            \n       \n        \tif (oldExcelFile.exists() && oldExcelFile.length() > 0) {\n                 if (!excelFile.exists() || excelFile.length() <= 0) {\n                     // if the old name exists and the new name does not...\n                     excelFile = oldExcelFile;\n                     excelFileName = oldExcelFileName;\n                 }\n             }                  \n\n        }\n        logger.info(\"looking for : \" + excelFile.getName());\n        if (!excelFile.exists() || excelFile.length() <= 0) {\n            addPageMessage(respage.getString(\"the_excel_is_not_available_on_server_contact\"));\n            forwardPage(Page.CRF_LIST_SERVLET);\n        } else {\n            response.setHeader(\"Content-disposition\", \"attachment; filename=\\\"\" + excelFileName + \"\\\";\");\n            response.setContentType(\"application/vnd.ms-excel\");\n            response.setHeader(\"Pragma\", \"public\");\n\n            ServletOutputStream op = response.getOutputStream();\n            DataInputStream in = null;\n            try {\n                response.setContentType(\"application/vnd.ms-excel\");\n                response.setHeader(\"Pragma\", \"public\");\n                response.setContentLength((int) excelFile.length());\n\n                byte[] bbuf = new byte[(int) excelFile.length()];\n                in = new DataInputStream(new FileInputStream(excelFile));\n                int length;\n                while ((in != null) && ((length = in.read(bbuf)) != -1)) {\n                    op.write(bbuf, 0, length);\n                }\n\n                in.close();\n                op.flush();\n                op.close();\n            } catch (Exception ee) {\n                ee.printStackTrace();\n            } finally {\n                if (in != null) {\n                    in.close();\n                }\n                if (op != null) {\n                    op.close();\n                }\n            }\n        }\n\n    }\n}\n", "/*\r\n * OpenClinica is distributed under the\r\n * GNU Lesser General Public License (GNU LGPL).\r\n\r\n * For details see: http://www.openclinica.org/license\r\n * copyright 2003-2005 Akaza Research\r\n */\r\npackage org.akaza.openclinica.control.submit;\r\n\r\nimport org.akaza.openclinica.bean.core.Utils;\r\nimport org.akaza.openclinica.bean.managestudy.StudyBean;\r\nimport org.akaza.openclinica.control.core.SecureController;\r\nimport org.akaza.openclinica.control.form.FormProcessor;\r\nimport org.akaza.openclinica.dao.managestudy.StudyDAO;\r\nimport org.akaza.openclinica.dao.submit.EventCRFDAO;\r\nimport org.akaza.openclinica.i18n.core.LocaleResolver;\r\nimport org.akaza.openclinica.view.Page;\r\nimport org.akaza.openclinica.web.InsufficientPermissionException;\r\n\r\nimport java.io.DataInputStream;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.Locale;\r\n\r\nimport javax.servlet.ServletOutputStream;\r\n\r\n/**\r\n * @author ywang (Dec., 2008)\r\n */\r\npublic class DownloadAttachedFileServlet extends SecureController {\r\n\r\n    /**\r\n     * Checks whether the user has the correct privilege\r\n     */\r\n    @Override\r\n    public void mayProceed() throws InsufficientPermissionException {\r\n        Locale locale = LocaleResolver.getLocale(request);\r\n        FormProcessor fp = new FormProcessor(request);\r\n/*        int eventCRFId = fp.getInt(\"eventCRFId\");\r\n        EventCRFDAO edao = new EventCRFDAO(sm.getDataSource());\r\n\r\n        if (eventCRFId > 0) {\r\n            if (!entityIncluded(eventCRFId, ub.getName(), edao, sm.getDataSource())) {\r\n                request.setAttribute(\"downloadStatus\", \"false\");\r\n                addPageMessage(respage.getString(\"you_not_have_permission_download_attached_file\"));\r\n                throw new InsufficientPermissionException(Page.DOWNLOAD_ATTACHED_FILE, resexception.getString(\"no_permission\"), \"1\");\r\n            }\r\n        } else {\r\n            request.setAttribute(\"downloadStatus\", \"false\");\r\n            addPageMessage(respage.getString(\"you_not_have_permission_download_attached_file\"));\r\n            throw new InsufficientPermissionException(Page.DOWNLOAD_ATTACHED_FILE, resexception.getString(\"no_permission\"), \"1\");\r\n        }*/\r\n\r\n        if (ub.isSysAdmin()) {\r\n            return;\r\n        }\r\n        if (SubmitDataServlet.mayViewData(ub, currentRole)) {\r\n            return;\r\n        }\r\n\r\n        request.setAttribute(\"downloadStatus\", \"false\");\r\n        addPageMessage(respage.getString(\"you_not_have_permission_download_attached_file\"));\r\n        throw new InsufficientPermissionException(Page.DOWNLOAD_ATTACHED_FILE, resexception.getString(\"no_permission\"), \"1\");\r\n    }\r\n\r\n    @Override\r\n    public void processRequest() throws Exception {\r\n        FormProcessor fp = new FormProcessor(request);\r\n        String filePathName = \"\";\r\n        String fileName = fp.getString(\"fileName\");\r\n        File f = new File(fileName);\r\n        \r\n        if(fileName != null && fileName.indexOf(\"..\") > -1) {\r\n        \tthrow new RuntimeException(\"Traversal attempt - absolute path not allowed \" + fileName);\r\n        }\r\n        \r\n        if (fileName != null && fileName.length() > 0) {\r\n            int parentStudyId = currentStudy.getParentStudyId();\r\n            String testPath = Utils.getAttachedFileRootPath();\r\n            String tail = File.separator + f.getName();\r\n            String testName = testPath + currentStudy.getOid() + tail;\r\n            File temp = new File(testName);\r\n            if (temp.exists()) {\r\n                filePathName = testName;\r\n                logger.info(currentStudy.getName() + \" existing filePathName=\" + filePathName);\r\n            } else {\r\n                if (currentStudy.isSite(parentStudyId)) {\r\n                    testName = testPath + ((StudyBean) new StudyDAO(sm.getDataSource()).findByPK(parentStudyId)).getOid() + tail;\r\n                    temp = new File(testName);\r\n                    if (temp.exists()) {\r\n                        filePathName = testName;\r\n                        logger.info(\"parent existing filePathName=\" + filePathName);\r\n                    }\r\n                } else {\r\n                    ArrayList<StudyBean> sites = (ArrayList<StudyBean>) new StudyDAO(sm.getDataSource()).findAllByParent(currentStudy.getId());\r\n                    for (StudyBean s : sites) {\r\n                        testPath = Utils.getAttachedFilePath(s);\r\n                        testName = testPath + tail;//+ s.getIdentifier() + tail;\r\n                        File test = new File(testName);\r\n                        if (test.exists()) {\r\n                            filePathName = testName;\r\n                            logger.info(\"site of currentStudy existing filePathName=\" + filePathName);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        logger.info(\"filePathName=\" + filePathName + \" fileName=\" + fileName);\r\n        File file = new File(filePathName);\r\n        if (!file.exists() || file.length() <= 0) {\r\n            addPageMessage(\"File \" + filePathName + \" \" + respage.getString(\"not_exist\"));\r\n            \r\n            // try to use the passed in the existing file\r\n        \tfile = new File(fileName);\r\n        }\r\n        \r\n        if (!file.exists() || file.length() <= 0) {\r\n            addPageMessage(\"File \" + filePathName + \" \" + respage.getString(\"not_exist\"));\r\n        } else {\r\n//            response.setContentType(\"application/octet-stream\");\r\n            response.setHeader(\"Content-disposition\", \"attachment; filename=\\\"\" + fileName + \"\\\";\");\r\n            response.setHeader(\"Pragma\", \"public\");\r\n\r\n            ServletOutputStream outStream = response.getOutputStream();\r\n            DataInputStream inStream = null;\r\n            try {\r\n                response.setContentType(\"application/download\");\r\n                response.setHeader(\"Cache-Control\", \"max-age=0\");\r\n                response.setContentLength((int) file.length());\r\n\r\n                byte[] bbuf = new byte[(int) file.length()];\r\n                inStream = new DataInputStream(new FileInputStream(file));\r\n                int length;\r\n                while (inStream != null && (length = inStream.read(bbuf)) != -1) {\r\n                    outStream.write(bbuf, 0, length);\r\n                }\r\n\r\n                inStream.close();\r\n                outStream.flush();\r\n                outStream.close();\r\n            } catch (Exception ee) {\r\n                ee.printStackTrace();\r\n            } finally {\r\n                if (inStream != null) {\r\n                    inStream.close();\r\n                }\r\n                if (outStream != null) {\r\n                    outStream.close();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}", "package org.akaza.openclinica.controller;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.ResourceBundle;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.sql.DataSource;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\nimport org.akaza.openclinica.bean.admin.CRFBean;\nimport org.akaza.openclinica.bean.core.Role;\nimport org.akaza.openclinica.bean.core.SubjectEventStatus;\nimport org.akaza.openclinica.bean.login.StudyUserRoleBean;\nimport org.akaza.openclinica.bean.login.UserAccountBean;\nimport org.akaza.openclinica.bean.managestudy.EventDefinitionCRFBean;\nimport org.akaza.openclinica.bean.managestudy.StudyBean;\nimport org.akaza.openclinica.bean.managestudy.StudyEventBean;\nimport org.akaza.openclinica.bean.managestudy.StudyEventDefinitionBean;\nimport org.akaza.openclinica.bean.managestudy.StudySubjectBean;\nimport org.akaza.openclinica.bean.submit.CRFVersionBean;\nimport org.akaza.openclinica.bean.submit.EventCRFBean;\nimport org.akaza.openclinica.controller.helper.HelperObject;\nimport org.akaza.openclinica.controller.helper.ReportLog;\nimport org.akaza.openclinica.controller.helper.TransferObject;\nimport org.akaza.openclinica.core.EmailEngine;\nimport org.akaza.openclinica.core.OpenClinicaMailSender;\nimport org.akaza.openclinica.dao.admin.AuditDAO;\nimport org.akaza.openclinica.dao.admin.CRFDAO;\nimport org.akaza.openclinica.dao.core.CoreResources;\nimport org.akaza.openclinica.dao.hibernate.CrfVersionDao;\nimport org.akaza.openclinica.dao.hibernate.EventCrfDao;\nimport org.akaza.openclinica.dao.hibernate.StudyEventDao;\nimport org.akaza.openclinica.dao.hibernate.StudySubjectDao;\nimport org.akaza.openclinica.dao.login.UserAccountDAO;\nimport org.akaza.openclinica.dao.managestudy.EventDefinitionCRFDAO;\nimport org.akaza.openclinica.dao.managestudy.StudyDAO;\nimport org.akaza.openclinica.dao.managestudy.StudyEventDAO;\nimport org.akaza.openclinica.dao.managestudy.StudyEventDefinitionDAO;\nimport org.akaza.openclinica.dao.managestudy.StudySubjectDAO;\nimport org.akaza.openclinica.dao.submit.CRFVersionDAO;\nimport org.akaza.openclinica.dao.submit.EventCRFDAO;\nimport org.akaza.openclinica.domain.Status;\nimport org.akaza.openclinica.domain.datamap.CrfVersion;\nimport org.akaza.openclinica.domain.datamap.EventCrf;\nimport org.akaza.openclinica.domain.datamap.StudyEvent;\nimport org.akaza.openclinica.domain.datamap.StudySubject;\nimport org.akaza.openclinica.i18n.util.ResourceBundleProvider;\nimport org.apache.commons.io.FilenameUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.Transaction;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\npublic class BatchCRFMigrationController implements Runnable {\n\n    @Autowired\n    private DataSource dataSource;\n\n    @Autowired\n    OpenClinicaMailSender openClinicaMailSender;\n\n    @Autowired\n    private EventCrfDao eventCrfDao;\n\n    @Autowired\n    private StudySubjectDao studySubjectDao;\n\n    @Autowired\n    private StudyEventDao studyEventDao;\n\n    @Autowired\n    private CrfVersionDao crfVersionDao;\n\n    @Autowired\n    private SessionFactory sessionFactory;\n\n    private HelperObject helperObject;\n\n    protected final Logger logger = LoggerFactory.getLogger(getClass().getName());\n\n    ResourceBundle resterms;\n    List<EventCRFBean> eventCrfListToMigrate;\n    CRFVersionBean sourceCrfVersionBean;\n    CRFVersionBean targetCrfVersionBean;\n    ReportLog reportLog;\n    StudyBean stBean;\n    CRFBean cBean;\n    UserAccountBean userAccountBean;\n    HttpServletRequest request;\n    String urlBase;\n\n    public BatchCRFMigrationController() {\n        super();\n    }\n\n    public BatchCRFMigrationController(HelperObject helperObject) {\n        this.helperObject = helperObject;\n    }\n\n    @RequestMapping(value = \"/forms/migrate/{filename}/downloadLogFile\")\n    public void getLogFile(@PathVariable(\"filename\") String fileName, HttpServletResponse response) throws Exception {\n        InputStream inputStream = null;\n        try {\n        \t//Validate/Sanitize user input filename using a standard library, prevent from path traversal \n            String logFileName = getFilePath() + File.separator + FilenameUtils.getName(fileName);\n            File fileToDownload = new File(logFileName);\n            inputStream = new FileInputStream(fileToDownload);\n            response.setContentType(\"application/force-download\");\n            response.setHeader(\"Content-Disposition\", \"attachment; filename=\" + fileName);\n            IOUtils.copy(inputStream, response.getOutputStream());\n            response.flushBuffer();\n        } catch (Exception e) {\n            logger.debug(\"Request could not be completed at this moment. Please try again.\");\n            logger.debug(e.getStackTrace().toString());\n            throw e;\n        } finally {\n            if (inputStream != null) {\n                try {\n                    inputStream.close();\n                } catch (IOException e) {\n                    logger.debug(e.getStackTrace().toString());\n                    throw e;\n                }\n            }\n        }\n\n    }\n\n    /**\n     * @api {post} /pages/auth/api/v1/forms/migrate/run/ Batch CRF Version Migration Run\n     * @apiName runAuthMigration\n     * @apiPermission Authenticate using api-key. admin\n     * @apiVersion 3.8.0\n     * @apiParam {String} studyOID is the Target Study OID.\n     * @apiParam {String} sourceFormVersion Form Version OID From.\n     * @apiParam {String} targetFormVersion Form Version OID To.\n     * @apiParam {String} studyEventDefs List Of Event Definitions , when left blank, implies all events within\n     *           target study.\n     * @apiParam {String} sites List Of Sites , when left blank, implies all sites including target study\n     * @apiGroup Form\n     * @apiDescription This api will execute crf version migration and return an email with link of a file that include\n     *                 details of the transaction.\n     * @apiParamExample {json} Request-Example:\n     *                  {\n     *                  \"studyOID\" : \"S_BL101\" ,\n     *                  \"sourceFormVersion\" : \"F_GROUPS_ADVER_V221\" ,\n     *                  \"targetFormVersion\" : \"F_GROUPS_ADVER_V22\" ,\n     *                  \"studyEventDefs\" : [] ,\n     *                  \"sites\" : []\n     *                  }\n     * \n     * @apiErrorExample {json} Error-Response:\n     *                  HTTP/1.1 406 NOT ACCEPTABLE\n     *                  {\n     *                  \"errors\": [\"Current CRF version and New CRF version can not be same.\"],\n     *                  \"reportPreview\": null,\n     *                  \"subjectCount\": 0,\n     *                  \"eventCrfCount\": 0,\n     *                  \"canNotMigrate\": [],\n     *                  \"logs\": []\n     *                  }\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *                    HTTP/1.1 200 OK\n     *                    {\n     *                    \"errors\": [],\n     *                    \"reportPreview\":\n     *                    \"Batch CRF version migration is running. You will receive an email once the process is complete\"\n     *                    ,\n     *                    \"subjectCount\": 8,\n     *                    \"eventCrfCount\": 12,\n     *                    \"canNotMigrate\": [],\n     *                    \"logs\": []\n     *                    }\n     */\n\n    @Produces(MediaType.APPLICATION_JSON)\n    @RequestMapping(value = \"/auth/api/v1/forms/migrate/run\", method = RequestMethod.POST)\n    public ResponseEntity<ReportLog> runAuthMigration(@RequestBody TransferObject transferObject, HttpServletRequest request) throws Exception {\n\n        ResponseEntity<HelperObject> res = runPreviewTest(transferObject, request);\n        HelperObject helperObject = res.getBody();\n        helperObject.setRequest(request);\n        fillHelperObject(helperObject);\n        ReportLog reportLog = helperObject.getReportLog();\n\n        String str = \"\";\n        if (reportLog.getSubjectCount() != 0 && reportLog.getEventCrfCount() != 0 && reportLog.getErrors().size() == 0) {\n            BatchCRFMigrationController bcmController = new BatchCRFMigrationController(helperObject);\n            Thread thread = new Thread(bcmController);\n            thread.start();\n            str = resterms.getString(\"Batch_CRF_version_migration_is_running_You_will_receive_an_email_once_the_process_is_complete\");\n            reportLog.setReportPreview(str);\n            return new ResponseEntity<ReportLog>(reportLog, org.springframework.http.HttpStatus.OK);\n        } else if (reportLog.getErrors().size() > 0) {\n            return new ResponseEntity<ReportLog>(reportLog, org.springframework.http.HttpStatus.NOT_ACCEPTABLE);\n        } else {\n            str = resterms.getString(\"Migration_did_not_run_due_to_no_affected_subject\");\n            reportLog.setReportPreview(str);\n            return new ResponseEntity<ReportLog>(reportLog, org.springframework.http.HttpStatus.OK);\n        }\n    }\n\n    @Produces(MediaType.APPLICATION_JSON)\n    @RequestMapping(value = \"/api/v1/forms/migrate/run\", method = RequestMethod.POST)\n    public @ResponseBody String runMigration(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        TransferObject transferObject = getUIComponents(request);\n        String crfId = request.getParameter(\"crfId\");\n\n        ResponseEntity<HelperObject> res = runPreviewTest(transferObject, request);\n        HelperObject helperObject = res.getBody();\n        fillHelperObject(helperObject);\n        helperObject.setRequest(request);\n        ReportLog reportLog = helperObject.getReportLog();\n\n        String pageMessages = null;\n        if (reportLog.getSubjectCount() != 0 && reportLog.getEventCrfCount() != 0 && reportLog.getErrors().size() == 0) {\n            BatchCRFMigrationController bcmController = new BatchCRFMigrationController(helperObject);\n            Thread thread = new Thread(bcmController);\n            thread.start();\n\n            pageMessages = resterms.getString(\"Batch_CRF_version_migration_is_running_You_will_receive_an_email_once_the_process_is_complete\");\n            return (String) redirect(request, response, \"/ListCRF?module=manage\" + \"&isFromCRFVersionBatchChange=\" + pageMessages);\n        } else {\n            pageMessages = resterms.getString(\"Error_in_Running_Migration_Please_try_again\");\n            return (String) redirect(request, response, \"/BatchCRFMigration?module=manage&crfId=\" + crfId + \"&isFromCRFVersionBatchChange=\" + pageMessages);\n        }\n    }\n\n    /**\n     * @api {post} /pages/auth/api/v1/forms/migrate/preview Batch CRF Version Migration Preview\n     * @apiName runAuthPreview\n     * @apiPermission Authenticate using api-key. admin\n     * @apiVersion 3.8.0\n     * @apiParam {String} studyOID is the Target Study OID.\n     * @apiParam {String} sourceFormVersion Form Version OID From.\n     * @apiParam {String} targetFormVersion Form Version OID To.\n     * @apiParam {String} studyEventDefs List Of Event Definitions , when left blank, implies all events within\n     *           target study.\n     * @apiParam {String} sites List Of Sites , when left blank, implies all sites including target study\n     * @apiGroup Form\n     * @apiDescription This api is a summary report for crf version migration and returns json object of report log.\n     * @apiParamExample {json} Request-Example:\n     *                  {\n     *                  \"studyOID\" : \"S_BL101\" ,\n     *                  \"sourceFormVersion\" : \"F_GROUPS_ADVER_V221\" ,\n     *                  \"targetFormVersion\" : \"F_GROUPS_ADVER_V22\" ,\n     *                  \"studyEventDefs\" : [] ,\n     *                  \"sites\" : []\n     *                  }\n     * \n     * @apiErrorExample {json} Error-Response:\n     *                  HTTP/1.1 406 NOT ACCEPTABLE\n     *                  {\n     *                  \"errors\": [\"The OID of the Target Study that you provided is invalid.\"],\n     *                  \"reportPreview\": null,\n     *                  \"subjectCount\": 0,\n     *                  \"eventCrfCount\": 0,\n     *                  \"canNotMigrate\": [],\n     *                  \"logs\": []\n     *                  }\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *                    HTTP/1.1 200 OK\n     *                    {\n     *                    \"errors\": [],\n     *                    \"reportPreview\": null,\n     *                    \"subjectCount\": 8,\n     *                    \"eventCrfCount\": 12,\n     *                    \"canNotMigrate\": [],\n     *                    \"logs\": []\n     *                    }\n     */\n    @Produces(MediaType.APPLICATION_JSON)\n    @RequestMapping(value = \"/auth/api/v1/forms/migrate/preview\", method = RequestMethod.POST)\n    public ResponseEntity<ReportLog> runAuthPreview(@RequestBody TransferObject transferObject, HttpServletRequest request) throws Exception {\n\n        ResponseEntity<HelperObject> res = runPreviewTest(transferObject, request);\n        HelperObject helperObject = res.getBody();\n\n        return new ResponseEntity<ReportLog>(helperObject.getReportLog(), org.springframework.http.HttpStatus.OK);\n    }\n\n    @Produces(MediaType.APPLICATION_JSON)\n    @RequestMapping(value = \"/api/v1/forms/migrate/preview\", method = RequestMethod.POST)\n    public @ResponseBody ReportLog runPreview(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        TransferObject transferObject = getUIComponents(request);\n\n        ResponseEntity<HelperObject> res = runPreviewTest(transferObject, request);\n        HelperObject helperObject = res.getBody();\n        helperObject.getReportLog().setReportPreview(toStringHtmlFormat(helperObject.getReportLog(), resterms));\n        return helperObject.getReportLog();\n    }\n\n\n    public void executeMigrationAction(HelperObject helperObject, EventCRFBean eventCRFBean) {\n        Session session = helperObject.getSession();\n\n        EventCrf eventCrf = helperObject.getEventCrfDao().findById(eventCRFBean.getId());\n        StudyEvent studyEvent = helperObject.getStudyEventDao().findById(eventCRFBean.getStudyEventId());\n        CrfVersion crfVersion = helperObject.getCrfVersionDao().findById(helperObject.getTargetCrfVersionBean().getId());\n        StudySubject studySubject = helperObject.getStudySubjectDao().findById(eventCRFBean.getStudySubjectId());\n\n        eventCrf.setSdvStatus(false);\n        eventCrf.setDateUpdated(new Date());\n        eventCrf.setSdvUpdateId(helperObject.getUserAccountBean().getId());\n        eventCrf.setUpdateId(helperObject.getUserAccountBean().getId());\n        eventCrf.setCrfVersion(crfVersion);\n        session.saveOrUpdate(eventCrf);\n\n        String status_before_update = null;\n        SubjectEventStatus eventStatus = null;\n\n        // event signed, check if subject is signed as well\n\n        if (studySubject.getStatus() == Status.SIGNED) {\n            status_before_update = auditDao().findLastStatus(\"study_subject\", studySubject.getStudySubjectId(), \"8\");\n            if (status_before_update != null && status_before_update.length() == 1) {\n                int subject_status = Integer.parseInt(status_before_update);\n                Status status = Status.getByCode(subject_status);\n                studySubject.setStatus(status);\n            }\n            studySubject.setUpdateId(helperObject.getUserAccountBean().getId());\n            session.saveOrUpdate(studySubject);\n\n        }\n\n        studyEvent.setUpdateId(helperObject.getUserAccountBean().getId());\n        studyEvent.setDateUpdated(new Date());\n\n        status_before_update = auditDao().findLastStatus(\"study_event\", studyEvent.getStudyEventId(), \"8\");\n        if (status_before_update != null && status_before_update.length() == 1) {\n            int status = Integer.parseInt(status_before_update);\n            eventStatus = SubjectEventStatus.get(status);\n            studyEvent.setSubjectEventStatusId(eventStatus.getId());\n        }\n\n        session.saveOrUpdate(studyEvent);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ResponseEntity<HelperObject> runPreviewTest(TransferObject transferObject, HttpServletRequest request) throws Exception {\n        HelperObject helperObject = new HelperObject();\n\n        Locale locale = request.getLocale();\n        resterms = ResourceBundleProvider.getTermsBundle(locale);\n        UserAccountBean userAccountBean = getCurrentUser(request);\n        ReportLog reportLog = new ReportLog();\n\n        String studyOid = transferObject.getStudyOID();\n        String sourceCrfVersion = transferObject.getSourceFormVersion();\n        String targetCrfVersion = transferObject.getTargetFormVersion();\n        ArrayList<String> studyEventDefnlist = transferObject.getStudyEventDefs();\n        ArrayList<String> studyEventDefnlistFiltered = new ArrayList<String>();\n        ArrayList<String> sitelist = transferObject.getSites();\n        ArrayList<String> sitelistFiltered = new ArrayList<String>();\n\n        CRFVersionBean sourceCrfVersionBean = cvdao().findByOid(sourceCrfVersion);\n        CRFVersionBean targetCrfVersionBean = cvdao().findByOid(targetCrfVersion);\n\n        StudyBean stBean = sdao().findByOid(studyOid);\n\t\tif (stBean == null || !stBean.getStatus().isAvailable() || stBean.getParentStudyId() != 0) {\n            reportLog.getErrors().add(resterms.getString(\"The_OID_of_the_Target_Study_that_you_provided_is_invalid\"));\n            helperObject.setReportLog(reportLog);\n            return new ResponseEntity<HelperObject>(helperObject, org.springframework.http.HttpStatus.NOT_ACCEPTABLE);\n        }\n        StudyUserRoleBean suRole = uadao().findRoleByUserNameAndStudyId(userAccountBean.getName(), stBean.getId());\n        Role r = suRole.getRole();\n        if (suRole == null || !(r.equals(Role.STUDYDIRECTOR) || r.equals(Role.COORDINATOR))) {\n            reportLog.getErrors().add(resterms.getString(\"You_do_not_have_permission_to_perform_CRF_version_migration_in_this_study\"));\n            helperObject.setReportLog(reportLog);\n            return new ResponseEntity<HelperObject>(helperObject, org.springframework.http.HttpStatus.NOT_ACCEPTABLE);\n        }\n        if (sourceCrfVersionBean == null || targetCrfVersionBean == null) {\n            if (sourceCrfVersion.equals(\"-1\") || targetCrfVersion.equals(\"-1\")) {\n                reportLog.getErrors().add(resterms.getString(\"Current_CRF_version_and_New_CRF_version_should_be_selected\"));\n            } else {\n                reportLog.getErrors().add(resterms.getString(\"The_OID_of_the_CRF_Version_that_you_provided_is_invalid\"));\n            }\n            helperObject.setReportLog(reportLog);\n            return new ResponseEntity<HelperObject>(helperObject, org.springframework.http.HttpStatus.NOT_ACCEPTABLE);\n        }\n        if (sourceCrfVersionBean.getId() == targetCrfVersionBean.getId()) {\n            reportLog.getErrors().add(resterms.getString(\"Current_CRF_version_and_New_CRF_version_can_not_be_same\"));\n            helperObject.setReportLog(reportLog);\n            return new ResponseEntity<HelperObject>(helperObject, org.springframework.http.HttpStatus.NOT_ACCEPTABLE);\n        }\n\t\tif (sourceCrfVersionBean.getCrfId() != targetCrfVersionBean.getCrfId() || !sourceCrfVersionBean.getStatus().isAvailable() || !targetCrfVersionBean.getStatus().isAvailable()) {\n            reportLog.getErrors().add(resterms.getString(\"The_OID_of_the_CRF_Version_that_you_provided_is_invalid\"));\n            helperObject.setReportLog(reportLog);\n            return new ResponseEntity<HelperObject>(helperObject, org.springframework.http.HttpStatus.NOT_ACCEPTABLE);\n        }\n\n        CRFBean cBean = (CRFBean) cdao().findByPK(sourceCrfVersionBean.getCrfId());\n\n        if (sitelist.size() == 0) {\n            ArrayList<StudyBean> listOfSites = (ArrayList<StudyBean>) sdao().findAllByParent(stBean.getId());\n            sitelist.add(stBean.getOid());\n            for (StudyBean s : listOfSites) {\n                if (s.getStatus().isAvailable()) {\n                    sitelist.add(s.getOid());\n                }\n            }\n        } else {\n            for (String site : sitelist) {\n                StudyBean siteBean = sdao().findByOid(site.trim());\n                if (siteBean == null || getParentStudy(siteBean).getId() != stBean.getId()) {\n                    reportLog.getErrors().add(resterms.getString(\"The_OID_of_the_Site_that_you_provided_is_invalid\"));\n                    helperObject.setReportLog(reportLog);\n                    return new ResponseEntity<HelperObject>(helperObject, org.springframework.http.HttpStatus.NOT_ACCEPTABLE);\n                } else if (siteBean.getStatus().isAvailable()) {\n                    sitelistFiltered.add(site);\n                }\n            }\n            sitelist = sitelistFiltered;\n        }\n\n        if (studyEventDefnlist.size() == 0) {\n            ArrayList<StudyEventDefinitionBean> listOfDefn = seddao().findAllByStudy(stBean);\n            for (StudyEventDefinitionBean d : listOfDefn) {\n                if (d.getStatus().isAvailable()) {\n                    studyEventDefnlist.add(d.getOid());\n                }\n            }\n        } else {\n            for (String studyEventDefn : studyEventDefnlist) {\n                StudyEventDefinitionBean sedefnBean = seddao().findByOid(studyEventDefn);\n                if (sedefnBean == null || sedefnBean.getStudyId() != stBean.getId()) {\n                    reportLog.getErrors().add(resterms.getString(\"The_OID_of_the_Event_that_you_provided_is_invalid\"));\n                    helperObject.setReportLog(reportLog);\n                    return new ResponseEntity<HelperObject>(helperObject, org.springframework.http.HttpStatus.NOT_ACCEPTABLE);\n                } else if (sedefnBean.getStatus().isAvailable()) {\n                    studyEventDefnlistFiltered.add(studyEventDefn);\n                }\n            }\n            studyEventDefnlist = studyEventDefnlistFiltered;\n\n        }\n\n        int eventCrfCount = ssdao().getTotalEventCrfCountForCrfMigration(sourceCrfVersionBean, targetCrfVersionBean, studyEventDefnlist, sitelist);\n        reportLog.setEventCrfCount(eventCrfCount);\n\n        int subjectCount = ssdao().getTotalCountStudySubjectForCrfMigration(sourceCrfVersionBean, targetCrfVersionBean, studyEventDefnlist, sitelist);\n        reportLog.setSubjectCount(subjectCount);\n\n        List<EventDefinitionCRFBean> crfMigrationDoesNotPerformList = edcdao().findAllCrfMigrationDoesNotPerform(sourceCrfVersionBean, targetCrfVersionBean,\n                studyEventDefnlist, sitelist);\n        for (EventDefinitionCRFBean crfMigrationDoesNotPerform : crfMigrationDoesNotPerformList) {\n            StudyEventDefinitionBean seddBean = (StudyEventDefinitionBean) seddao().findByPK(crfMigrationDoesNotPerform.getStudyEventDefinitionId());\n            StudyBean sssBean = (StudyBean) sdao().findByPK(crfMigrationDoesNotPerform.getStudyId());\n            reportLog.getCanNotMigrate().add(\n                    resterms.getString(\"CRF_Version_Migration_cannot_be_performed_for\") + \" \" + sssBean.getName() + \" \" + seddBean.getName() + \". \"\n                            + resterms.getString(\"Both_CRF_versions_are_not_available_at_the_Site\"));\n        }\n\n        List<EventCRFBean> eventCrfListToMigrate = ecdao().findAllCRFMigrationReportList(sourceCrfVersionBean, targetCrfVersionBean, studyEventDefnlist,\n                sitelist);\n\n        helperObject.setReportLog(reportLog);\n        helperObject.setStBean(stBean);\n        helperObject.setcBean(cBean);\n        helperObject.setEventCrfListToMigrate(eventCrfListToMigrate);\n        helperObject.setSourceCrfVersionBean(sourceCrfVersionBean);\n        helperObject.setTargetCrfVersionBean(targetCrfVersionBean);\n        helperObject.setUserAccountBean(userAccountBean);\n\n        return new ResponseEntity<HelperObject>(helperObject, org.springframework.http.HttpStatus.OK);\n\n    }\n\n    private StudyBean getParentStudy(StudyBean study) {\n        if (study.getParentStudyId() == 0) {\n            return study;\n        } else {\n            StudyBean parentStudy = (StudyBean) sdao().findByPK(study.getParentStudyId());\n            return parentStudy;\n        }\n    }\n\n    @SuppressWarnings(\"rawtypes\")\n    private StudyDAO sdao() {\n        return new StudyDAO(dataSource);\n    }\n\n    @SuppressWarnings(\"rawtypes\")\n    private EventCRFDAO ecdao() {\n        return new EventCRFDAO(dataSource);\n    }\n\n    private StudyEventDAO sedao() {\n        return new StudyEventDAO(dataSource);\n    }\n\n    @SuppressWarnings(\"rawtypes\")\n    private StudyEventDefinitionDAO seddao() {\n        return new StudyEventDefinitionDAO(dataSource);\n    }\n\n    @SuppressWarnings(\"rawtypes\")\n    private StudySubjectDAO ssdao() {\n        return new StudySubjectDAO(dataSource);\n    }\n\n    private EventDefinitionCRFDAO edcdao() {\n        return new EventDefinitionCRFDAO(dataSource);\n    }\n\n    private UserAccountDAO uadao() {\n        return new UserAccountDAO(dataSource);\n    }\n\n    @SuppressWarnings(\"rawtypes\")\n    private CRFDAO cdao() {\n        return new CRFDAO(dataSource);\n    }\n\n    @SuppressWarnings(\"rawtypes\")\n    private CRFVersionDAO cvdao() {\n        return new CRFVersionDAO(dataSource);\n    }\n\n    private AuditDAO auditDao() {\n        return new AuditDAO(dataSource);\n    }\n\n    private UserAccountBean getCurrentUser(HttpServletRequest request) {\n        UserAccountBean ub = (UserAccountBean) request.getSession().getAttribute(\"userBean\");\n        return ub;\n    }\n\n    private File createLogFile(String fileName) {\n        new File(getFilePath()).mkdir();\n        String logFileName = getFilePath() + File.separator + fileName;\n        File logFile = new File(logFileName);\n        return logFile;\n    }\n\n    private String getFilePath() {\n        String versionMigrationFilePath = CoreResources.getField(\"filePath\") + \"crf_version_migration_batch_log_file\";\n        return versionMigrationFilePath;\n    }\n\n    private PrintWriter openFile(File file) throws FileNotFoundException, UnsupportedEncodingException {\n        PrintWriter writer = new PrintWriter(file.getPath(), \"UTF-8\");\n        return writer;\n    }\n\n    private void closeFile(PrintWriter writer) {\n        writer.close();\n    }\n\n    private String getReportUrl(String filename, String urlBase) {\n        String reportUrl = urlBase + \"/pages/forms/migrate/\" + filename + \"/downloadLogFile\";\n        return reportUrl;\n    }\n\n    public TransferObject getUIComponents(HttpServletRequest request) {\n\n        String selectedSites = request.getParameter(\"selectedSites\");\n        String selectedEvents = request.getParameter(\"selectedEvents\");\n\n        List<String> selectedSiteList = Arrays.asList(selectedSites.split(\",\"));\n        List<String> selectedEventList = Arrays.asList(selectedEvents.split(\",\"));\n        ArrayList<String> selectedSiteArrayList = new ArrayList<String>(selectedSiteList);\n        ArrayList<String> selectedEventArrayList = new ArrayList<String>(selectedEventList);\n\n        if (selectedSiteArrayList.contains(\"-1\"))\n            selectedSiteArrayList.clear();\n        if (selectedEventArrayList.contains(\"-1\"))\n            selectedEventArrayList.clear();\n\n        TransferObject transferObject = new TransferObject();\n        transferObject.setSites(selectedSiteArrayList);\n        transferObject.setStudyEventDefs(selectedEventArrayList);\n        transferObject.setSourceFormVersion(request.getParameter(\"selectedSourceVersion\"));\n        transferObject.setTargetFormVersion(request.getParameter(\"selectedTargetVersion\"));\n        transferObject.setStudyOID(request.getParameter(\"studyOid\"));\n\n        return transferObject;\n    }\n\n    public String toStringTextFormat(ReportLog reportLog, ResourceBundle resterms, StudyBean stBean, CRFBean cBean) {\n\n        StringBuffer text1 = new StringBuffer();\n        for (String migrationPerform : reportLog.getCanNotMigrate()) {\n            text1.append(migrationPerform.toString()).append('\\n');\n        }\n        StringBuffer text2 = new StringBuffer();\n        for (String error : reportLog.getErrors()) {\n            text2.append(error.toString()).append('\\n');\n        }\n\n        StringBuffer text3 = new StringBuffer();\n        for (String log : reportLog.getLogs()) {\n            text3.append(log.toString()).append('\\n');\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(resterms.getString(\"Study\") + \": \" + stBean.getName() + \"\\n\");\n        sb.append(resterms.getString(\"CRF\") + \": \" + cBean.getName() + \"\\n\\n\");\n        sb.append(resterms.getString(\"Migration_Summary\") + \":\\n\" + resterms.getString(\"Number_of_Subjects_affected_by_migration\") + \": \"\n                + reportLog.getSubjectCount() + \"\\n\");\n        sb.append(resterms.getString(\"Number_of_Event_CRF_affected_by_migration\") + \": \" + reportLog.getEventCrfCount() + \"\\n\");\n        sb.append(text1.toString() + \"\\n\");\n\n\n        if (reportLog.getErrors().size() != 0) {\n            sb.append(resterms.getString(\"Errors\") + \":\\n\" + text2.toString() + \"\\n\");\n        }\n        sb.append(resterms.getString(\"Report_Log\") + \":\\n\"\n                + resterms.getString(\"CRF_Name__Origin_Version__Target_Version__Subject_ID__Site__Event__Event_Ordinal\") + \"\\n\" + text3.toString());\n        return sb.toString();\n    }\n\n    public String toStringHtmlFormat(ReportLog reportLog, ResourceBundle resterms) {\n\n        StringBuffer text1 = new StringBuffer();\n        for (String migrationPerform : reportLog.getCanNotMigrate()) {\n            text1.append(migrationPerform.toString()).append(\"<br>\");\n        }\n        StringBuffer text2 = new StringBuffer();\n        for (String error : reportLog.getErrors()) {\n            text2.append(error.toString()).append(\"<br>\");\n        }\n\n        StringBuffer text3 = new StringBuffer();\n        for (String log : reportLog.getLogs()) {\n            text3.append(log.toString()).append(\"<br>\");\n        }\n        StringBuilder sb = new StringBuilder();\n\n        sb.append(\"<br>\");\n        if (reportLog.getErrors().size() == 0) {\n            sb.append(\"<font size=\\\"3\\\" color=\\\"#D4A718\\\"><b>\");\n            sb.append(resterms.getString(\"Migration_Summary\") + \":\");\n            sb.append(\"</b></font>\");\n            sb.append(\"<br>\");\n            sb.append(\"<br>\");\n\n            sb.append(resterms.getString(\"Number_of_Subjects_to_be_affected_by_migration\") + \": \" + reportLog.getSubjectCount() + \"<br>\");\n            sb.append(resterms.getString(\"Number_of_Event_CRF_to_be_affected_by_migration\") + \": \" + reportLog.getEventCrfCount() + \"<br>\");\n            sb.append(\"<br>\");\n            sb.append(text1.toString() + \"<br>\");\n        }\n\n        if (reportLog.getErrors().size() != 0) {\n            sb.append(\"<font size=\\\"3\\\" color=\\\"#D4A718\\\" ><b>\");\n            sb.append(resterms.getString(\"Errors\") + \":\");\n            sb.append(\"</b></font>\");\n            sb.append(\"<br>\");\n\n            sb.append(\"<font color=\\\"red\\\"><b>\");\n            sb.append(text2.toString());\n            sb.append(\"</b></font>\");\n            sb.append(\"<br>\");\n        }\n\n        return sb.toString();\n    }\n\n    private Object redirect(HttpServletRequest request, HttpServletResponse response, String location) {\n        try {\n            response.sendRedirect(request.getContextPath() + location);\n        } catch (Exception e) {\n            logger.debug(e.getStackTrace().toString());\n        } finally {\n\n        }\n\n        return null;\n\n    }\n\n    @Override\n    public void run() {\n        dataSource = helperObject.getDataSource();\n        cBean = helperObject.getcBean();\n        reportLog = helperObject.getReportLog();\n        stBean = helperObject.getStBean();\n        resterms = helperObject.getResterms();\n        userAccountBean = helperObject.getUserAccountBean();\n        openClinicaMailSender = helperObject.getOpenClinicaMailSender();\n        sessionFactory = helperObject.getSessionFactory();\n\n        Session session = sessionFactory.openSession();\n        Transaction tx = session.beginTransaction();\n        helperObject.setSession(session);\n        int i = 0;\n        for (EventCRFBean eventCrfToMigrate : helperObject.getEventCrfListToMigrate()) {\n            i++;\n            executeMigrationAction(helperObject, eventCrfToMigrate);\n\n            if (i % 50 == 0) {\n                session.flush();\n                session.clear();\n            }\n\n            StudySubjectBean ssBean = (StudySubjectBean) ssdao().findByPK(eventCrfToMigrate.getStudySubjectId());\n            StudyBean sBean = (StudyBean) sdao().findByPK(ssBean.getStudyId());\n            StudyEventBean seBean = (StudyEventBean) sedao().findByPK(eventCrfToMigrate.getStudyEventId());\n            StudyEventDefinitionBean sedBean = (StudyEventDefinitionBean) seddao().findByPK(seBean.getStudyEventDefinitionId());\n            reportLog.getLogs().add(\n                    cBean.getName() + \",\" + helperObject.getSourceCrfVersionBean().getName() + \",\" + helperObject.getTargetCrfVersionBean().getName() + \",\"\n                            + ssBean.getLabel() + \",\"\n                            + sBean.getName() + \",\" + sedBean.getName() + \",\" + seBean.getSampleOrdinal());\n        }\n        tx.commit();\n        session.close();\n\n        String fileName = new SimpleDateFormat(\"_yyyy-MM-dd-hhmmssSaa'.txt'\").format(new Date());\n        fileName = \"logFile\" + fileName;\n        File file = createLogFile(fileName);\n        PrintWriter writer = null;\n        try {\n            writer = openFile(file);\n        } catch (FileNotFoundException | UnsupportedEncodingException e) {\n            e.printStackTrace();\n        } finally {\n            writer.print(toStringTextFormat(reportLog, resterms, stBean, cBean));\n            closeFile(writer);\n        }\n        String reportUrl = getReportUrl(fileName, helperObject.getUrlBase());\n        String fullName = userAccountBean.getFirstName() + \" \" + userAccountBean.getLastName();\n        StringBuilder body = new StringBuilder();\n        body.append(resterms.getString(\"Dear\") + \" \" + fullName + \",<br><br>\" + resterms.getString(\"Batch_CRF_version_migration_has_finished_running\") + \"<br>\"\n                + resterms.getString(\"Study\") + \": \" + stBean.getName() + \"<br>\" + resterms.getString(\"CRF\") + \": \" + cBean.getName() + \"<br><br>\"\n                + resterms.getString(\"A_summary_report_of_the_migration_is_available_here\") + \":<br>\" + reportUrl + \"<br><br>\"\n                + resterms.getString(\"Thank_you_Your_OpenClinica_System\"));\n\n        logger.info(body.toString());\n        openClinicaMailSender.sendEmail(userAccountBean.getEmail(), EmailEngine.getAdminEmail(), resterms.getString(\"Batch_Migration_Complete_For\") + \" \"\n                + stBean.getName(), body.toString(), true);\n    }\n\n    public void fillHelperObject(HelperObject helperObject) {\n       helperObject.setUrlBase(CoreResources.getField(\"sysURL\").split(\"/MainMenu\")[0]);\n       helperObject.setOpenClinicaMailSender(openClinicaMailSender);\n       helperObject.setDataSource(dataSource);\n       helperObject.setResterms(resterms);\n       helperObject.setEventCrfDao(eventCrfDao);\n       helperObject.setStudyEventDao(studyEventDao);\n       helperObject.setStudySubjectDao(studySubjectDao);\n       helperObject.setCrfVersionDao(crfVersionDao);\n       helperObject.setSessionFactory(sessionFactory);\n   }\n}\n", "package org.akaza.openclinica.controller.openrosa;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.akaza.openclinica.bean.core.Status;\nimport org.akaza.openclinica.bean.managestudy.StudySubjectBean;\nimport org.akaza.openclinica.bean.rule.FileProperties;\nimport org.akaza.openclinica.control.submit.UploadFileServlet;\nimport org.akaza.openclinica.dao.core.CoreResources;\nimport org.akaza.openclinica.dao.hibernate.StudyDao;\nimport org.akaza.openclinica.dao.hibernate.StudyParameterValueDao;\nimport org.akaza.openclinica.domain.datamap.Study;\nimport org.akaza.openclinica.domain.datamap.StudyParameterValue;\nimport org.akaza.openclinica.exception.OpenClinicaSystemException;\nimport org.akaza.openclinica.i18n.core.LocaleResolver;\nimport org.akaza.openclinica.service.pmanage.ParticipantPortalRegistrar;\nimport org.akaza.openclinica.web.pform.PFormCache;\nimport org.apache.commons.fileupload.FileItem;\nimport org.apache.commons.fileupload.disk.DiskFileItemFactory;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.apache.commons.io.FilenameUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang.exception.ExceptionUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.validation.DataBinder;\nimport org.springframework.validation.Errors;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n@Controller\n@RequestMapping(value = \"/openrosa\")\npublic class OpenRosaSubmissionController {\n\n    @Autowired\n    ServletContext context;\n\n    @Autowired\n    private OpenRosaSubmissionService openRosaSubmissionService;\n\n    @Autowired\n    private StudyDao studyDao;\n\n    @Autowired\n    private StudyParameterValueDao studyParameterValueDao;\n\n    @Autowired\n    PformSubmissionNotificationService notifier;\n\n    protected final Logger logger = LoggerFactory.getLogger(getClass().getName());\n    public static final String FORM_CONTEXT = \"ecid\";\n\n    /**\n     * @api {post} /pages/api/v1/editform/:studyOid/submission Submit form data\n     * @apiName doSubmission\n     * @apiPermission admin\n     * @apiVersion 3.8.0\n     * @apiParam {String} studyOid Study Oid.\n     * @apiParam {String} ecid Key that will be used to look up subject context information while processing submission.\n     * @apiGroup Form\n     * @apiDescription Submits the data from a completed form.\n     */\n\n    @RequestMapping(value = \"/{studyOID}/submission\", method = RequestMethod.POST)\n    public ResponseEntity<String> doSubmission(HttpServletRequest request, HttpServletResponse response,\n            @PathVariable(\"studyOID\") String studyOID, @RequestParam(FORM_CONTEXT) String ecid) {\n\n        logger.info(\"Processing xform submission.\");\n        HashMap<String, String> subjectContext = null;\n        Locale locale = LocaleResolver.getLocale(request);\n\n        DataBinder dataBinder = new DataBinder(null);\n        Errors errors = dataBinder.getBindingResult();\n        Study study = studyDao.findByOcOID(studyOID);\n        String requestBody=null;\n\n        HashMap<String,String> map = new HashMap();\n        ArrayList <HashMap> listOfUploadFilePaths = new ArrayList();\n\n        try {\n            // Verify Study is allowed to submit\n            if (!mayProceed(studyOID)) {\n                logger.info(\"Submissions to the study not allowed.  Aborting submission.\");\n                return new ResponseEntity<String>(org.springframework.http.HttpStatus.NOT_ACCEPTABLE);\n            }\n            if (ServletFileUpload.isMultipartContent(request)) {\n                String dir = getAttachedFilePath(studyOID);\n                FileProperties fileProperties= new FileProperties();\n                DiskFileItemFactory factory = new DiskFileItemFactory();\n                ServletFileUpload upload = new ServletFileUpload(factory);\n                upload.setFileSizeMax(fileProperties.getFileSizeMax());\n                List<FileItem> items = upload.parseRequest(request);              \n                for (FileItem item : items) {\n                    if (item.getContentType() != null && !item.getFieldName().equals(\"xml_submission_file\") ) {\n                        if (!new File(dir).exists()) new File(dir).mkdirs();\n\n                        File file = processUploadedFile(item, dir);\n                        map.put(item.getFieldName(), file.getPath());\n\n                    } else if (item.getFieldName().equals(\"xml_submission_file\")) {\n                        requestBody = item.getString(\"UTF-8\");\n                    }\n                }\n                listOfUploadFilePaths.add(map);\n            } else  {                \n                requestBody = IOUtils.toString(request.getInputStream(), \"UTF-8\");\n            }\n\n            // Load user context from ecid\n            PFormCache cache = PFormCache.getInstance(context);\n            subjectContext = cache.getSubjectContext(ecid);\n\n            // Execute save as Hibernate transaction to avoid partial imports\n            openRosaSubmissionService.processRequest(study, subjectContext, requestBody, errors, locale , listOfUploadFilePaths);\n\n        } catch (Exception e) {\n            logger.error(\"Exception while processing xform submission.\");\n            logger.error(e.getMessage());\n            logger.error(ExceptionUtils.getStackTrace(e));\n\n            if (!errors.hasErrors()) {\n                // Send a failure response\n                logger.info(\"Submission caused internal error.  Sending error response.\");\n                return new ResponseEntity<String>(org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR);\n            }\n        }\n\n        if (!errors.hasErrors()) {\n            // Log submission with Participate\n            notifier.notify(studyOID, subjectContext);\n            logger.info(\"Completed xform submission. Sending successful response\");\n            String responseMessage = \"<OpenRosaResponse xmlns=\\\"http://openrosa.org/http/response\\\">\" + \"<message>success</message>\" + \"</OpenRosaResponse>\";\n            return new ResponseEntity<String>(responseMessage, org.springframework.http.HttpStatus.CREATED);\n        } else {\n            logger.info(\"Submission contained errors. Sending error response\");\n            return new ResponseEntity<String>(org.springframework.http.HttpStatus.NOT_ACCEPTABLE);\n        }\n    }\n\n    private Study getParentStudy(String studyOid) {\n        Study study = studyDao.findByOcOID(studyOid);\n        Study parentStudy = study.getStudy();\n        if (parentStudy != null && parentStudy.getStudyId() > 0)\n            return parentStudy;\n        else\n            return study;\n    }\n\n\n    private boolean mayProceed(String studyOid) throws Exception {\n        return mayProceed(studyOid, null);\n    }\n\n    private boolean mayProceed(String studyOid, StudySubjectBean ssBean) throws Exception {\n        boolean accessPermission = false;\n        ParticipantPortalRegistrar participantPortalRegistrar= new ParticipantPortalRegistrar();\n        Study study = getParentStudy(studyOid);\n        StudyParameterValue pStatus = studyParameterValueDao.findByStudyIdParameter(study.getStudyId(), \"participantPortal\");\n\n        // ACTIVE, PENDING, or INACTIVE\n        String pManageStatus = participantPortalRegistrar.getRegistrationStatus(studyOid).toString();\n\n        // enabled or disabled\n        String participateStatus = pStatus.getValue().toString();\n\n        // available, pending, frozen, or locked\n        String studyStatus = study.getStatus().getName().toString();\n\n        if (ssBean == null) {\n            logger.info(\"pManageStatus: \" + pManageStatus + \"  participantStatus: \" + participateStatus + \"   studyStatus: \" + studyStatus);\n            if (participateStatus.equalsIgnoreCase(\"enabled\") && studyStatus.equalsIgnoreCase(\"available\") && pManageStatus.equalsIgnoreCase(\"ACTIVE\"))\n                accessPermission = true;\n        } else {\n            logger.info(\"pManageStatus: \" + pManageStatus + \"  participantStatus: \" + participateStatus + \"   studyStatus: \" + studyStatus\n                    + \"  studySubjectStatus: \" + ssBean.getStatus().getName());\n            if (participateStatus.equalsIgnoreCase(\"enabled\") && studyStatus.equalsIgnoreCase(\"available\") && pManageStatus.equalsIgnoreCase(\"ACTIVE\")\n                    && ssBean.getStatus() == Status.AVAILABLE)\n                accessPermission = true;\n        }\n        return accessPermission;\n    }\n\n    public static String getAttachedFilePath(String inputStudyOid) {\n    \t// Using a standard library to validate/Sanitize user inputs which will be used in path expression to prevent from path traversal\n    \tString studyOid =  FilenameUtils.getName(inputStudyOid);\n        String attachedFilePath = CoreResources.getField(\"attached_file_location\");\n        if (attachedFilePath == null || attachedFilePath.length() <= 0) {\n            attachedFilePath = CoreResources.getField(\"filePath\") + \"attached_files\" + File.separator + studyOid + File.separator;\n        } else {\n            attachedFilePath += studyOid + File.separator;\n        }\n        return attachedFilePath;\n    }\n\n    private File processUploadedFile(FileItem item, String dirToSaveUploadedFileIn) {\n        dirToSaveUploadedFileIn = dirToSaveUploadedFileIn == null ? System.getProperty(\"java.io.tmpdir\") : dirToSaveUploadedFileIn;\n        String fileName = item.getName();\n        // Some browsers IE 6,7 getName returns the whole path\n        int startIndex = fileName.lastIndexOf('\\\\');\n        if (startIndex != -1) {\n            fileName = fileName.substring(startIndex + 1, fileName.length());\n        }\n\n        File uploadedFile = new File(dirToSaveUploadedFileIn + File.separator + fileName);\n        try {\n            uploadedFile = new UploadFileServlet().new OCFileRename().rename(uploadedFile, item.getInputStream());\n        } catch (IOException e) {\n            throw new OpenClinicaSystemException(e.getMessage());\n        }\n\n        try {\n            item.write(uploadedFile);\n        } catch (Exception e) {\n            throw new OpenClinicaSystemException(e.getMessage());\n        }\n        return uploadedFile;\n    }\n}\n"], "fixing_code": ["/* OpenClinica is distributed under the\n * GNU Lesser General Public License (GNU LGPL).\n\n * For details see: http://www.openclinica.org/license\n * copyright 2003-2005 Akaza Research\n */\npackage org.akaza.openclinica.control.admin;\n\nimport org.akaza.openclinica.bean.core.Role;\nimport org.akaza.openclinica.bean.submit.CRFVersionBean;\nimport org.akaza.openclinica.control.SpringServletAccess;\nimport org.akaza.openclinica.control.core.SecureController;\nimport org.akaza.openclinica.control.form.FormProcessor;\nimport org.akaza.openclinica.dao.core.CoreResources;\nimport org.akaza.openclinica.dao.submit.CRFVersionDAO;\nimport org.akaza.openclinica.view.Page;\nimport org.akaza.openclinica.web.InsufficientPermissionException;\nimport org.akaza.openclinica.web.SQLInitServlet;\nimport org.apache.commons.io.FilenameUtils;\n\nimport java.io.DataInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\n\nimport javax.servlet.ServletOutputStream;\n\n/**\n * @author jxu\n *         <p/>\n *         TODO To change the template for this generated type comment go to Window - Preferences - Java - Code Style -\n *         Code Templates\n */\npublic class DownloadVersionSpreadSheetServlet extends SecureController {\n    public static String CRF_ID = \"crfId\";\n\n    public static String CRF_VERSION_NAME = \"crfVersionName\";\n\n    public static String CRF_VERSION_ID = \"crfVersionId\";\n\n    public static String CRF_VERSION_TEMPLATE = \"CRF_Design_Template_v3.10.xls\";\n\n    /**\n     *\n     */\n    @Override\n    public void mayProceed() throws InsufficientPermissionException {\n        if (ub.isSysAdmin()) {\n            return;\n        }\n\n        if (currentRole.getRole().equals(Role.STUDYDIRECTOR) || currentRole.getRole().equals(Role.COORDINATOR)) {\n            return;\n        }\n\n        addPageMessage(respage.getString(\"no_have_correct_privilege_current_study\") + respage.getString(\"change_study_contact_sysadmin\"));\n        throw new InsufficientPermissionException(Page.MANAGE_STUDY_SERVLET, resexception.getString(\"not_study_director\"), \"1\");\n\n    }\n\n    private CoreResources getCoreResources() {\n        return (CoreResources) SpringServletAccess.getApplicationContext(context).getBean(\"coreResources\");\n    }\n\n    @Override\n    public void processRequest() throws Exception {\n        String dir = SQLInitServlet.getField(\"filePath\") + \"crf\" + File.separator + \"new\" + File.separator;\n        // YW 09-10-2007 << Now CRF_Design_Template_v2.xls is located at\n        // $CATALINA_HOME/webapps/OpenClinica-instanceName/properties\n        FormProcessor fp = new FormProcessor(request);\n\n        String crfIdString = fp.getString(CRF_ID);\n        int crfVersionId = fp.getInt(CRF_VERSION_ID);\n\n        CRFVersionDAO cvdao = new CRFVersionDAO(sm.getDataSource());\n\n        CRFVersionBean version = (CRFVersionBean) cvdao.findByPK(crfVersionId);\n\n        boolean isTemplate = fp.getBoolean(\"template\");\n\n        String excelFileName = FilenameUtils.getName(crfIdString + version.getOid() + \".xls\");\n\n        // aha, what if it's the old style? next line is for backwards compat,\n        // tbh 07/2008\n        File excelFile = null;\n        String oldExcelFileName = FilenameUtils.getName(crfIdString + version.getName() + \".xls\");\n        if (isTemplate) {\n            // excelFile = new File(dir + CRF_VERSION_TEMPLATE);\n            excelFile = getCoreResources().getFile(CRF_VERSION_TEMPLATE, \"crf\" + File.separator + \"original\" + File.separator);\n            excelFileName = CRF_VERSION_TEMPLATE;\n            // FileOutputStream fos = new FileOutputStream(excelFile);\n            // IOUtils.copy(getCoreResources().getInputStream(CRF_VERSION_TEMPLATE), fos);\n            // IOUtils.closeQuietly(fos);\n        } else {\n        \t// fix path traversal issue\n            excelFile = new File(dir,excelFileName);\n            // backwards compat\n            File oldExcelFile = new File(dir, oldExcelFileName);            \n            \n            String canonicalPath1= excelFile.getCanonicalPath();\n            String canonicalPath2= oldExcelFile.getCanonicalPath();\n            if (canonicalPath1.startsWith(dir) && canonicalPath2.startsWith(dir)) {\n            \tif (oldExcelFile.exists() && oldExcelFile.length() > 0) {\n                    if (!excelFile.exists() || excelFile.length() <= 0) {\n                        // if the old name exists and the new name does not...\n                        excelFile = oldExcelFile;\n                        excelFileName = oldExcelFileName;\n                    }\n                }     \n            }else {\n            \t addPageMessage(respage.getString(\"the_excel_is_not_available_on_server_contact\"));\n                 forwardPage(Page.CRF_LIST_SERVLET);\n            }\n        \t             \n\n        }\n        logger.info(\"looking for : \" + excelFile.getName());\n        if (!excelFile.exists() || excelFile.length() <= 0) {\n            addPageMessage(respage.getString(\"the_excel_is_not_available_on_server_contact\"));\n            forwardPage(Page.CRF_LIST_SERVLET);\n        } else {\n            response.setHeader(\"Content-disposition\", \"attachment; filename=\\\"\" + excelFileName + \"\\\";\");\n            response.setContentType(\"application/vnd.ms-excel\");\n            response.setHeader(\"Pragma\", \"public\");\n\n            ServletOutputStream op = response.getOutputStream();\n            DataInputStream in = null;\n            try {\n                response.setContentType(\"application/vnd.ms-excel\");\n                response.setHeader(\"Pragma\", \"public\");\n                response.setContentLength((int) excelFile.length());\n\n                byte[] bbuf = new byte[(int) excelFile.length()];\n                in = new DataInputStream(new FileInputStream(excelFile));\n                int length;\n                while ((in != null) && ((length = in.read(bbuf)) != -1)) {\n                    op.write(bbuf, 0, length);\n                }\n\n                in.close();\n                op.flush();\n                op.close();\n            } catch (Exception ee) {\n                ee.printStackTrace();\n            } finally {\n                if (in != null) {\n                    in.close();\n                }\n                if (op != null) {\n                    op.close();\n                }\n            }\n        }\n\n    }\n}\n", "/*\r\n * OpenClinica is distributed under the\r\n * GNU Lesser General Public License (GNU LGPL).\r\n\r\n * For details see: http://www.openclinica.org/license\r\n * copyright 2003-2005 Akaza Research\r\n */\r\npackage org.akaza.openclinica.control.submit;\r\n\r\nimport org.akaza.openclinica.bean.core.Utils;\r\nimport org.akaza.openclinica.bean.managestudy.StudyBean;\r\nimport org.akaza.openclinica.control.core.SecureController;\r\nimport org.akaza.openclinica.control.form.FormProcessor;\r\nimport org.akaza.openclinica.dao.managestudy.StudyDAO;\r\nimport org.akaza.openclinica.dao.submit.EventCRFDAO;\r\nimport org.akaza.openclinica.i18n.core.LocaleResolver;\r\nimport org.akaza.openclinica.view.Page;\r\nimport org.akaza.openclinica.web.InsufficientPermissionException;\r\n\r\nimport java.io.DataInputStream;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.Locale;\r\n\r\nimport javax.servlet.ServletOutputStream;\r\n\r\n/**\r\n * @author ywang (Dec., 2008)\r\n */\r\npublic class DownloadAttachedFileServlet extends SecureController {\r\n\r\n    /**\r\n     * Checks whether the user has the correct privilege\r\n     */\r\n    @Override\r\n    public void mayProceed() throws InsufficientPermissionException {\r\n        Locale locale = LocaleResolver.getLocale(request);\r\n        FormProcessor fp = new FormProcessor(request);\r\n/*        int eventCRFId = fp.getInt(\"eventCRFId\");\r\n        EventCRFDAO edao = new EventCRFDAO(sm.getDataSource());\r\n\r\n        if (eventCRFId > 0) {\r\n            if (!entityIncluded(eventCRFId, ub.getName(), edao, sm.getDataSource())) {\r\n                request.setAttribute(\"downloadStatus\", \"false\");\r\n                addPageMessage(respage.getString(\"you_not_have_permission_download_attached_file\"));\r\n                throw new InsufficientPermissionException(Page.DOWNLOAD_ATTACHED_FILE, resexception.getString(\"no_permission\"), \"1\");\r\n            }\r\n        } else {\r\n            request.setAttribute(\"downloadStatus\", \"false\");\r\n            addPageMessage(respage.getString(\"you_not_have_permission_download_attached_file\"));\r\n            throw new InsufficientPermissionException(Page.DOWNLOAD_ATTACHED_FILE, resexception.getString(\"no_permission\"), \"1\");\r\n        }*/\r\n\r\n        if (ub.isSysAdmin()) {\r\n            return;\r\n        }\r\n        if (SubmitDataServlet.mayViewData(ub, currentRole)) {\r\n            return;\r\n        }\r\n\r\n        request.setAttribute(\"downloadStatus\", \"false\");\r\n        addPageMessage(respage.getString(\"you_not_have_permission_download_attached_file\"));\r\n        throw new InsufficientPermissionException(Page.DOWNLOAD_ATTACHED_FILE, resexception.getString(\"no_permission\"), \"1\");\r\n    }\r\n\r\n    @Override\r\n    public void processRequest() throws Exception {\r\n        FormProcessor fp = new FormProcessor(request);\r\n        String filePathName = \"\";\r\n        String fileName = fp.getString(\"fileName\");\r\n        File f = new File(fileName);\r\n              \r\n        if (fileName != null && fileName.length() > 0) {\r\n            int parentStudyId = currentStudy.getParentStudyId();           \r\n            String testPath = Utils.getAttachedFileRootPath();\r\n            String tail = File.separator + f.getName();\r\n            String testName = testPath + currentStudy.getOid() + tail;\r\n            \r\n            String filePath = testPath + currentStudy.getOid() +File.separator;            \r\n            File temp = new File(filePath,f.getName());            \r\n            String canonicalPath= temp.getCanonicalPath();\r\n            \r\n            if (canonicalPath.startsWith(filePath)) {\r\n            \t;\r\n            }else {\r\n            \tthrow new RuntimeException(\"Traversal attempt - file path not allowed \" + fileName);\r\n            }\r\n            \r\n            if (temp.exists()) {\r\n                filePathName = testName;\r\n                logger.info(currentStudy.getName() + \" existing filePathName=\" + filePathName);\r\n            } else {\r\n                if (currentStudy.isSite(parentStudyId)) {\r\n                    testName = testPath + ((StudyBean) new StudyDAO(sm.getDataSource()).findByPK(parentStudyId)).getOid() + tail;\r\n                    temp = new File(testName);\r\n                    if (temp.exists()) {\r\n                        filePathName = testName;\r\n                        logger.info(\"parent existing filePathName=\" + filePathName);\r\n                    }\r\n                } else {\r\n                    ArrayList<StudyBean> sites = (ArrayList<StudyBean>) new StudyDAO(sm.getDataSource()).findAllByParent(currentStudy.getId());\r\n                    for (StudyBean s : sites) {\r\n                        testPath = Utils.getAttachedFilePath(s);\r\n                        testName = testPath + tail;//+ s.getIdentifier() + tail;\r\n                        File test = new File(testName);\r\n                        if (test.exists()) {\r\n                            filePathName = testName;\r\n                            logger.info(\"site of currentStudy existing filePathName=\" + filePathName);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        logger.info(\"filePathName=\" + filePathName + \" fileName=\" + fileName);\r\n        File file = new File(filePathName);\r\n        if (!file.exists() || file.length() <= 0) {\r\n            addPageMessage(\"File \" + filePathName + \" \" + respage.getString(\"not_exist\"));\r\n            \r\n            // try to use the passed in the existing file\r\n        \tfile = new File(fileName);\r\n        }\r\n        \r\n        if (!file.exists() || file.length() <= 0) {\r\n            addPageMessage(\"File \" + filePathName + \" \" + respage.getString(\"not_exist\"));\r\n        } else {\r\n//            response.setContentType(\"application/octet-stream\");\r\n            response.setHeader(\"Content-disposition\", \"attachment; filename=\\\"\" + fileName + \"\\\";\");\r\n            response.setHeader(\"Pragma\", \"public\");\r\n\r\n            ServletOutputStream outStream = response.getOutputStream();\r\n            DataInputStream inStream = null;\r\n            try {\r\n                response.setContentType(\"application/download\");\r\n                response.setHeader(\"Cache-Control\", \"max-age=0\");\r\n                response.setContentLength((int) file.length());\r\n\r\n                byte[] bbuf = new byte[(int) file.length()];\r\n                inStream = new DataInputStream(new FileInputStream(file));\r\n                int length;\r\n                while (inStream != null && (length = inStream.read(bbuf)) != -1) {\r\n                    outStream.write(bbuf, 0, length);\r\n                }\r\n\r\n                inStream.close();\r\n                outStream.flush();\r\n                outStream.close();\r\n            } catch (Exception ee) {\r\n                ee.printStackTrace();\r\n            } finally {\r\n                if (inStream != null) {\r\n                    inStream.close();\r\n                }\r\n                if (outStream != null) {\r\n                    outStream.close();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}", "package org.akaza.openclinica.controller;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.ResourceBundle;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.sql.DataSource;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\nimport org.akaza.openclinica.bean.admin.CRFBean;\nimport org.akaza.openclinica.bean.core.Role;\nimport org.akaza.openclinica.bean.core.SubjectEventStatus;\nimport org.akaza.openclinica.bean.login.StudyUserRoleBean;\nimport org.akaza.openclinica.bean.login.UserAccountBean;\nimport org.akaza.openclinica.bean.managestudy.EventDefinitionCRFBean;\nimport org.akaza.openclinica.bean.managestudy.StudyBean;\nimport org.akaza.openclinica.bean.managestudy.StudyEventBean;\nimport org.akaza.openclinica.bean.managestudy.StudyEventDefinitionBean;\nimport org.akaza.openclinica.bean.managestudy.StudySubjectBean;\nimport org.akaza.openclinica.bean.submit.CRFVersionBean;\nimport org.akaza.openclinica.bean.submit.EventCRFBean;\nimport org.akaza.openclinica.controller.helper.HelperObject;\nimport org.akaza.openclinica.controller.helper.ReportLog;\nimport org.akaza.openclinica.controller.helper.TransferObject;\nimport org.akaza.openclinica.core.EmailEngine;\nimport org.akaza.openclinica.core.OpenClinicaMailSender;\nimport org.akaza.openclinica.dao.admin.AuditDAO;\nimport org.akaza.openclinica.dao.admin.CRFDAO;\nimport org.akaza.openclinica.dao.core.CoreResources;\nimport org.akaza.openclinica.dao.hibernate.CrfVersionDao;\nimport org.akaza.openclinica.dao.hibernate.EventCrfDao;\nimport org.akaza.openclinica.dao.hibernate.StudyEventDao;\nimport org.akaza.openclinica.dao.hibernate.StudySubjectDao;\nimport org.akaza.openclinica.dao.login.UserAccountDAO;\nimport org.akaza.openclinica.dao.managestudy.EventDefinitionCRFDAO;\nimport org.akaza.openclinica.dao.managestudy.StudyDAO;\nimport org.akaza.openclinica.dao.managestudy.StudyEventDAO;\nimport org.akaza.openclinica.dao.managestudy.StudyEventDefinitionDAO;\nimport org.akaza.openclinica.dao.managestudy.StudySubjectDAO;\nimport org.akaza.openclinica.dao.submit.CRFVersionDAO;\nimport org.akaza.openclinica.dao.submit.EventCRFDAO;\nimport org.akaza.openclinica.domain.Status;\nimport org.akaza.openclinica.domain.datamap.CrfVersion;\nimport org.akaza.openclinica.domain.datamap.EventCrf;\nimport org.akaza.openclinica.domain.datamap.StudyEvent;\nimport org.akaza.openclinica.domain.datamap.StudySubject;\nimport org.akaza.openclinica.i18n.util.ResourceBundleProvider;\nimport org.apache.commons.io.FilenameUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.Transaction;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\npublic class BatchCRFMigrationController implements Runnable {\n\n    @Autowired\n    private DataSource dataSource;\n\n    @Autowired\n    OpenClinicaMailSender openClinicaMailSender;\n\n    @Autowired\n    private EventCrfDao eventCrfDao;\n\n    @Autowired\n    private StudySubjectDao studySubjectDao;\n\n    @Autowired\n    private StudyEventDao studyEventDao;\n\n    @Autowired\n    private CrfVersionDao crfVersionDao;\n\n    @Autowired\n    private SessionFactory sessionFactory;\n\n    private HelperObject helperObject;\n\n    protected final Logger logger = LoggerFactory.getLogger(getClass().getName());\n\n    ResourceBundle resterms;\n    List<EventCRFBean> eventCrfListToMigrate;\n    CRFVersionBean sourceCrfVersionBean;\n    CRFVersionBean targetCrfVersionBean;\n    ReportLog reportLog;\n    StudyBean stBean;\n    CRFBean cBean;\n    UserAccountBean userAccountBean;\n    HttpServletRequest request;\n    String urlBase;\n\n    public BatchCRFMigrationController() {\n        super();\n    }\n\n    public BatchCRFMigrationController(HelperObject helperObject) {\n        this.helperObject = helperObject;\n    }\n\n    @RequestMapping(value = \"/forms/migrate/{filename}/downloadLogFile\")\n    public void getLogFile(@PathVariable(\"filename\") String fileName, HttpServletResponse response) throws Exception {\n        InputStream inputStream = null;\n        try {\n        \t//Validate/Sanitize user input filename using a standard library, prevent from path traversal \n            String logFilePath = getFilePath() + File.separator;\n            File fileToDownload = new File(logFilePath, fileName);                    \n            String canonicalPath= fileToDownload.getCanonicalPath();\n            \n            if (canonicalPath.startsWith(logFilePath)) {\n            \tinputStream = new FileInputStream(fileToDownload);\n                response.setContentType(\"application/force-download\");\n                response.setHeader(\"Content-Disposition\", \"attachment; filename=\" + fileName);\n                IOUtils.copy(inputStream, response.getOutputStream());\n                response.flushBuffer();\n            }else {\n            \tthrow new RuntimeException(\"Traversal attempt - file path not allowed \" + fileName);\n            }\n            \n        } catch (Exception e) {\n            logger.debug(\"Request could not be completed at this moment. Please try again.\");\n            logger.debug(e.getStackTrace().toString());\n            throw e;\n        } finally {\n            if (inputStream != null) {\n                try {\n                    inputStream.close();\n                } catch (IOException e) {\n                    logger.debug(e.getStackTrace().toString());\n                    throw e;\n                }\n            }\n        }\n\n    }\n\n    /**\n     * @api {post} /pages/auth/api/v1/forms/migrate/run/ Batch CRF Version Migration Run\n     * @apiName runAuthMigration\n     * @apiPermission Authenticate using api-key. admin\n     * @apiVersion 3.8.0\n     * @apiParam {String} studyOID is the Target Study OID.\n     * @apiParam {String} sourceFormVersion Form Version OID From.\n     * @apiParam {String} targetFormVersion Form Version OID To.\n     * @apiParam {String} studyEventDefs List Of Event Definitions , when left blank, implies all events within\n     *           target study.\n     * @apiParam {String} sites List Of Sites , when left blank, implies all sites including target study\n     * @apiGroup Form\n     * @apiDescription This api will execute crf version migration and return an email with link of a file that include\n     *                 details of the transaction.\n     * @apiParamExample {json} Request-Example:\n     *                  {\n     *                  \"studyOID\" : \"S_BL101\" ,\n     *                  \"sourceFormVersion\" : \"F_GROUPS_ADVER_V221\" ,\n     *                  \"targetFormVersion\" : \"F_GROUPS_ADVER_V22\" ,\n     *                  \"studyEventDefs\" : [] ,\n     *                  \"sites\" : []\n     *                  }\n     * \n     * @apiErrorExample {json} Error-Response:\n     *                  HTTP/1.1 406 NOT ACCEPTABLE\n     *                  {\n     *                  \"errors\": [\"Current CRF version and New CRF version can not be same.\"],\n     *                  \"reportPreview\": null,\n     *                  \"subjectCount\": 0,\n     *                  \"eventCrfCount\": 0,\n     *                  \"canNotMigrate\": [],\n     *                  \"logs\": []\n     *                  }\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *                    HTTP/1.1 200 OK\n     *                    {\n     *                    \"errors\": [],\n     *                    \"reportPreview\":\n     *                    \"Batch CRF version migration is running. You will receive an email once the process is complete\"\n     *                    ,\n     *                    \"subjectCount\": 8,\n     *                    \"eventCrfCount\": 12,\n     *                    \"canNotMigrate\": [],\n     *                    \"logs\": []\n     *                    }\n     */\n\n    @Produces(MediaType.APPLICATION_JSON)\n    @RequestMapping(value = \"/auth/api/v1/forms/migrate/run\", method = RequestMethod.POST)\n    public ResponseEntity<ReportLog> runAuthMigration(@RequestBody TransferObject transferObject, HttpServletRequest request) throws Exception {\n\n        ResponseEntity<HelperObject> res = runPreviewTest(transferObject, request);\n        HelperObject helperObject = res.getBody();\n        helperObject.setRequest(request);\n        fillHelperObject(helperObject);\n        ReportLog reportLog = helperObject.getReportLog();\n\n        String str = \"\";\n        if (reportLog.getSubjectCount() != 0 && reportLog.getEventCrfCount() != 0 && reportLog.getErrors().size() == 0) {\n            BatchCRFMigrationController bcmController = new BatchCRFMigrationController(helperObject);\n            Thread thread = new Thread(bcmController);\n            thread.start();\n            str = resterms.getString(\"Batch_CRF_version_migration_is_running_You_will_receive_an_email_once_the_process_is_complete\");\n            reportLog.setReportPreview(str);\n            return new ResponseEntity<ReportLog>(reportLog, org.springframework.http.HttpStatus.OK);\n        } else if (reportLog.getErrors().size() > 0) {\n            return new ResponseEntity<ReportLog>(reportLog, org.springframework.http.HttpStatus.NOT_ACCEPTABLE);\n        } else {\n            str = resterms.getString(\"Migration_did_not_run_due_to_no_affected_subject\");\n            reportLog.setReportPreview(str);\n            return new ResponseEntity<ReportLog>(reportLog, org.springframework.http.HttpStatus.OK);\n        }\n    }\n\n    @Produces(MediaType.APPLICATION_JSON)\n    @RequestMapping(value = \"/api/v1/forms/migrate/run\", method = RequestMethod.POST)\n    public @ResponseBody String runMigration(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        TransferObject transferObject = getUIComponents(request);\n        String crfId = request.getParameter(\"crfId\");\n\n        ResponseEntity<HelperObject> res = runPreviewTest(transferObject, request);\n        HelperObject helperObject = res.getBody();\n        fillHelperObject(helperObject);\n        helperObject.setRequest(request);\n        ReportLog reportLog = helperObject.getReportLog();\n\n        String pageMessages = null;\n        if (reportLog.getSubjectCount() != 0 && reportLog.getEventCrfCount() != 0 && reportLog.getErrors().size() == 0) {\n            BatchCRFMigrationController bcmController = new BatchCRFMigrationController(helperObject);\n            Thread thread = new Thread(bcmController);\n            thread.start();\n\n            pageMessages = resterms.getString(\"Batch_CRF_version_migration_is_running_You_will_receive_an_email_once_the_process_is_complete\");\n            return (String) redirect(request, response, \"/ListCRF?module=manage\" + \"&isFromCRFVersionBatchChange=\" + pageMessages);\n        } else {\n            pageMessages = resterms.getString(\"Error_in_Running_Migration_Please_try_again\");\n            return (String) redirect(request, response, \"/BatchCRFMigration?module=manage&crfId=\" + crfId + \"&isFromCRFVersionBatchChange=\" + pageMessages);\n        }\n    }\n\n    /**\n     * @api {post} /pages/auth/api/v1/forms/migrate/preview Batch CRF Version Migration Preview\n     * @apiName runAuthPreview\n     * @apiPermission Authenticate using api-key. admin\n     * @apiVersion 3.8.0\n     * @apiParam {String} studyOID is the Target Study OID.\n     * @apiParam {String} sourceFormVersion Form Version OID From.\n     * @apiParam {String} targetFormVersion Form Version OID To.\n     * @apiParam {String} studyEventDefs List Of Event Definitions , when left blank, implies all events within\n     *           target study.\n     * @apiParam {String} sites List Of Sites , when left blank, implies all sites including target study\n     * @apiGroup Form\n     * @apiDescription This api is a summary report for crf version migration and returns json object of report log.\n     * @apiParamExample {json} Request-Example:\n     *                  {\n     *                  \"studyOID\" : \"S_BL101\" ,\n     *                  \"sourceFormVersion\" : \"F_GROUPS_ADVER_V221\" ,\n     *                  \"targetFormVersion\" : \"F_GROUPS_ADVER_V22\" ,\n     *                  \"studyEventDefs\" : [] ,\n     *                  \"sites\" : []\n     *                  }\n     * \n     * @apiErrorExample {json} Error-Response:\n     *                  HTTP/1.1 406 NOT ACCEPTABLE\n     *                  {\n     *                  \"errors\": [\"The OID of the Target Study that you provided is invalid.\"],\n     *                  \"reportPreview\": null,\n     *                  \"subjectCount\": 0,\n     *                  \"eventCrfCount\": 0,\n     *                  \"canNotMigrate\": [],\n     *                  \"logs\": []\n     *                  }\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *                    HTTP/1.1 200 OK\n     *                    {\n     *                    \"errors\": [],\n     *                    \"reportPreview\": null,\n     *                    \"subjectCount\": 8,\n     *                    \"eventCrfCount\": 12,\n     *                    \"canNotMigrate\": [],\n     *                    \"logs\": []\n     *                    }\n     */\n    @Produces(MediaType.APPLICATION_JSON)\n    @RequestMapping(value = \"/auth/api/v1/forms/migrate/preview\", method = RequestMethod.POST)\n    public ResponseEntity<ReportLog> runAuthPreview(@RequestBody TransferObject transferObject, HttpServletRequest request) throws Exception {\n\n        ResponseEntity<HelperObject> res = runPreviewTest(transferObject, request);\n        HelperObject helperObject = res.getBody();\n\n        return new ResponseEntity<ReportLog>(helperObject.getReportLog(), org.springframework.http.HttpStatus.OK);\n    }\n\n    @Produces(MediaType.APPLICATION_JSON)\n    @RequestMapping(value = \"/api/v1/forms/migrate/preview\", method = RequestMethod.POST)\n    public @ResponseBody ReportLog runPreview(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        TransferObject transferObject = getUIComponents(request);\n\n        ResponseEntity<HelperObject> res = runPreviewTest(transferObject, request);\n        HelperObject helperObject = res.getBody();\n        helperObject.getReportLog().setReportPreview(toStringHtmlFormat(helperObject.getReportLog(), resterms));\n        return helperObject.getReportLog();\n    }\n\n\n    public void executeMigrationAction(HelperObject helperObject, EventCRFBean eventCRFBean) {\n        Session session = helperObject.getSession();\n\n        EventCrf eventCrf = helperObject.getEventCrfDao().findById(eventCRFBean.getId());\n        StudyEvent studyEvent = helperObject.getStudyEventDao().findById(eventCRFBean.getStudyEventId());\n        CrfVersion crfVersion = helperObject.getCrfVersionDao().findById(helperObject.getTargetCrfVersionBean().getId());\n        StudySubject studySubject = helperObject.getStudySubjectDao().findById(eventCRFBean.getStudySubjectId());\n\n        eventCrf.setSdvStatus(false);\n        eventCrf.setDateUpdated(new Date());\n        eventCrf.setSdvUpdateId(helperObject.getUserAccountBean().getId());\n        eventCrf.setUpdateId(helperObject.getUserAccountBean().getId());\n        eventCrf.setCrfVersion(crfVersion);\n        session.saveOrUpdate(eventCrf);\n\n        String status_before_update = null;\n        SubjectEventStatus eventStatus = null;\n\n        // event signed, check if subject is signed as well\n\n        if (studySubject.getStatus() == Status.SIGNED) {\n            status_before_update = auditDao().findLastStatus(\"study_subject\", studySubject.getStudySubjectId(), \"8\");\n            if (status_before_update != null && status_before_update.length() == 1) {\n                int subject_status = Integer.parseInt(status_before_update);\n                Status status = Status.getByCode(subject_status);\n                studySubject.setStatus(status);\n            }\n            studySubject.setUpdateId(helperObject.getUserAccountBean().getId());\n            session.saveOrUpdate(studySubject);\n\n        }\n\n        studyEvent.setUpdateId(helperObject.getUserAccountBean().getId());\n        studyEvent.setDateUpdated(new Date());\n\n        status_before_update = auditDao().findLastStatus(\"study_event\", studyEvent.getStudyEventId(), \"8\");\n        if (status_before_update != null && status_before_update.length() == 1) {\n            int status = Integer.parseInt(status_before_update);\n            eventStatus = SubjectEventStatus.get(status);\n            studyEvent.setSubjectEventStatusId(eventStatus.getId());\n        }\n\n        session.saveOrUpdate(studyEvent);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ResponseEntity<HelperObject> runPreviewTest(TransferObject transferObject, HttpServletRequest request) throws Exception {\n        HelperObject helperObject = new HelperObject();\n\n        Locale locale = request.getLocale();\n        resterms = ResourceBundleProvider.getTermsBundle(locale);\n        UserAccountBean userAccountBean = getCurrentUser(request);\n        ReportLog reportLog = new ReportLog();\n\n        String studyOid = transferObject.getStudyOID();\n        String sourceCrfVersion = transferObject.getSourceFormVersion();\n        String targetCrfVersion = transferObject.getTargetFormVersion();\n        ArrayList<String> studyEventDefnlist = transferObject.getStudyEventDefs();\n        ArrayList<String> studyEventDefnlistFiltered = new ArrayList<String>();\n        ArrayList<String> sitelist = transferObject.getSites();\n        ArrayList<String> sitelistFiltered = new ArrayList<String>();\n\n        CRFVersionBean sourceCrfVersionBean = cvdao().findByOid(sourceCrfVersion);\n        CRFVersionBean targetCrfVersionBean = cvdao().findByOid(targetCrfVersion);\n\n        StudyBean stBean = sdao().findByOid(studyOid);\n\t\tif (stBean == null || !stBean.getStatus().isAvailable() || stBean.getParentStudyId() != 0) {\n            reportLog.getErrors().add(resterms.getString(\"The_OID_of_the_Target_Study_that_you_provided_is_invalid\"));\n            helperObject.setReportLog(reportLog);\n            return new ResponseEntity<HelperObject>(helperObject, org.springframework.http.HttpStatus.NOT_ACCEPTABLE);\n        }\n        StudyUserRoleBean suRole = uadao().findRoleByUserNameAndStudyId(userAccountBean.getName(), stBean.getId());\n        Role r = suRole.getRole();\n        if (suRole == null || !(r.equals(Role.STUDYDIRECTOR) || r.equals(Role.COORDINATOR))) {\n            reportLog.getErrors().add(resterms.getString(\"You_do_not_have_permission_to_perform_CRF_version_migration_in_this_study\"));\n            helperObject.setReportLog(reportLog);\n            return new ResponseEntity<HelperObject>(helperObject, org.springframework.http.HttpStatus.NOT_ACCEPTABLE);\n        }\n        if (sourceCrfVersionBean == null || targetCrfVersionBean == null) {\n            if (sourceCrfVersion.equals(\"-1\") || targetCrfVersion.equals(\"-1\")) {\n                reportLog.getErrors().add(resterms.getString(\"Current_CRF_version_and_New_CRF_version_should_be_selected\"));\n            } else {\n                reportLog.getErrors().add(resterms.getString(\"The_OID_of_the_CRF_Version_that_you_provided_is_invalid\"));\n            }\n            helperObject.setReportLog(reportLog);\n            return new ResponseEntity<HelperObject>(helperObject, org.springframework.http.HttpStatus.NOT_ACCEPTABLE);\n        }\n        if (sourceCrfVersionBean.getId() == targetCrfVersionBean.getId()) {\n            reportLog.getErrors().add(resterms.getString(\"Current_CRF_version_and_New_CRF_version_can_not_be_same\"));\n            helperObject.setReportLog(reportLog);\n            return new ResponseEntity<HelperObject>(helperObject, org.springframework.http.HttpStatus.NOT_ACCEPTABLE);\n        }\n\t\tif (sourceCrfVersionBean.getCrfId() != targetCrfVersionBean.getCrfId() || !sourceCrfVersionBean.getStatus().isAvailable() || !targetCrfVersionBean.getStatus().isAvailable()) {\n            reportLog.getErrors().add(resterms.getString(\"The_OID_of_the_CRF_Version_that_you_provided_is_invalid\"));\n            helperObject.setReportLog(reportLog);\n            return new ResponseEntity<HelperObject>(helperObject, org.springframework.http.HttpStatus.NOT_ACCEPTABLE);\n        }\n\n        CRFBean cBean = (CRFBean) cdao().findByPK(sourceCrfVersionBean.getCrfId());\n\n        if (sitelist.size() == 0) {\n            ArrayList<StudyBean> listOfSites = (ArrayList<StudyBean>) sdao().findAllByParent(stBean.getId());\n            sitelist.add(stBean.getOid());\n            for (StudyBean s : listOfSites) {\n                if (s.getStatus().isAvailable()) {\n                    sitelist.add(s.getOid());\n                }\n            }\n        } else {\n            for (String site : sitelist) {\n                StudyBean siteBean = sdao().findByOid(site.trim());\n                if (siteBean == null || getParentStudy(siteBean).getId() != stBean.getId()) {\n                    reportLog.getErrors().add(resterms.getString(\"The_OID_of_the_Site_that_you_provided_is_invalid\"));\n                    helperObject.setReportLog(reportLog);\n                    return new ResponseEntity<HelperObject>(helperObject, org.springframework.http.HttpStatus.NOT_ACCEPTABLE);\n                } else if (siteBean.getStatus().isAvailable()) {\n                    sitelistFiltered.add(site);\n                }\n            }\n            sitelist = sitelistFiltered;\n        }\n\n        if (studyEventDefnlist.size() == 0) {\n            ArrayList<StudyEventDefinitionBean> listOfDefn = seddao().findAllByStudy(stBean);\n            for (StudyEventDefinitionBean d : listOfDefn) {\n                if (d.getStatus().isAvailable()) {\n                    studyEventDefnlist.add(d.getOid());\n                }\n            }\n        } else {\n            for (String studyEventDefn : studyEventDefnlist) {\n                StudyEventDefinitionBean sedefnBean = seddao().findByOid(studyEventDefn);\n                if (sedefnBean == null || sedefnBean.getStudyId() != stBean.getId()) {\n                    reportLog.getErrors().add(resterms.getString(\"The_OID_of_the_Event_that_you_provided_is_invalid\"));\n                    helperObject.setReportLog(reportLog);\n                    return new ResponseEntity<HelperObject>(helperObject, org.springframework.http.HttpStatus.NOT_ACCEPTABLE);\n                } else if (sedefnBean.getStatus().isAvailable()) {\n                    studyEventDefnlistFiltered.add(studyEventDefn);\n                }\n            }\n            studyEventDefnlist = studyEventDefnlistFiltered;\n\n        }\n\n        int eventCrfCount = ssdao().getTotalEventCrfCountForCrfMigration(sourceCrfVersionBean, targetCrfVersionBean, studyEventDefnlist, sitelist);\n        reportLog.setEventCrfCount(eventCrfCount);\n\n        int subjectCount = ssdao().getTotalCountStudySubjectForCrfMigration(sourceCrfVersionBean, targetCrfVersionBean, studyEventDefnlist, sitelist);\n        reportLog.setSubjectCount(subjectCount);\n\n        List<EventDefinitionCRFBean> crfMigrationDoesNotPerformList = edcdao().findAllCrfMigrationDoesNotPerform(sourceCrfVersionBean, targetCrfVersionBean,\n                studyEventDefnlist, sitelist);\n        for (EventDefinitionCRFBean crfMigrationDoesNotPerform : crfMigrationDoesNotPerformList) {\n            StudyEventDefinitionBean seddBean = (StudyEventDefinitionBean) seddao().findByPK(crfMigrationDoesNotPerform.getStudyEventDefinitionId());\n            StudyBean sssBean = (StudyBean) sdao().findByPK(crfMigrationDoesNotPerform.getStudyId());\n            reportLog.getCanNotMigrate().add(\n                    resterms.getString(\"CRF_Version_Migration_cannot_be_performed_for\") + \" \" + sssBean.getName() + \" \" + seddBean.getName() + \". \"\n                            + resterms.getString(\"Both_CRF_versions_are_not_available_at_the_Site\"));\n        }\n\n        List<EventCRFBean> eventCrfListToMigrate = ecdao().findAllCRFMigrationReportList(sourceCrfVersionBean, targetCrfVersionBean, studyEventDefnlist,\n                sitelist);\n\n        helperObject.setReportLog(reportLog);\n        helperObject.setStBean(stBean);\n        helperObject.setcBean(cBean);\n        helperObject.setEventCrfListToMigrate(eventCrfListToMigrate);\n        helperObject.setSourceCrfVersionBean(sourceCrfVersionBean);\n        helperObject.setTargetCrfVersionBean(targetCrfVersionBean);\n        helperObject.setUserAccountBean(userAccountBean);\n\n        return new ResponseEntity<HelperObject>(helperObject, org.springframework.http.HttpStatus.OK);\n\n    }\n\n    private StudyBean getParentStudy(StudyBean study) {\n        if (study.getParentStudyId() == 0) {\n            return study;\n        } else {\n            StudyBean parentStudy = (StudyBean) sdao().findByPK(study.getParentStudyId());\n            return parentStudy;\n        }\n    }\n\n    @SuppressWarnings(\"rawtypes\")\n    private StudyDAO sdao() {\n        return new StudyDAO(dataSource);\n    }\n\n    @SuppressWarnings(\"rawtypes\")\n    private EventCRFDAO ecdao() {\n        return new EventCRFDAO(dataSource);\n    }\n\n    private StudyEventDAO sedao() {\n        return new StudyEventDAO(dataSource);\n    }\n\n    @SuppressWarnings(\"rawtypes\")\n    private StudyEventDefinitionDAO seddao() {\n        return new StudyEventDefinitionDAO(dataSource);\n    }\n\n    @SuppressWarnings(\"rawtypes\")\n    private StudySubjectDAO ssdao() {\n        return new StudySubjectDAO(dataSource);\n    }\n\n    private EventDefinitionCRFDAO edcdao() {\n        return new EventDefinitionCRFDAO(dataSource);\n    }\n\n    private UserAccountDAO uadao() {\n        return new UserAccountDAO(dataSource);\n    }\n\n    @SuppressWarnings(\"rawtypes\")\n    private CRFDAO cdao() {\n        return new CRFDAO(dataSource);\n    }\n\n    @SuppressWarnings(\"rawtypes\")\n    private CRFVersionDAO cvdao() {\n        return new CRFVersionDAO(dataSource);\n    }\n\n    private AuditDAO auditDao() {\n        return new AuditDAO(dataSource);\n    }\n\n    private UserAccountBean getCurrentUser(HttpServletRequest request) {\n        UserAccountBean ub = (UserAccountBean) request.getSession().getAttribute(\"userBean\");\n        return ub;\n    }\n\n    private File createLogFile(String fileName) {\n        new File(getFilePath()).mkdir();\n        String logFileName = getFilePath() + File.separator + fileName;\n        File logFile = new File(logFileName);\n        return logFile;\n    }\n\n    private String getFilePath() {\n        String versionMigrationFilePath = CoreResources.getField(\"filePath\") + \"crf_version_migration_batch_log_file\";\n        return versionMigrationFilePath;\n    }\n\n    private PrintWriter openFile(File file) throws FileNotFoundException, UnsupportedEncodingException {\n        PrintWriter writer = new PrintWriter(file.getPath(), \"UTF-8\");\n        return writer;\n    }\n\n    private void closeFile(PrintWriter writer) {\n        writer.close();\n    }\n\n    private String getReportUrl(String filename, String urlBase) {\n        String reportUrl = urlBase + \"/pages/forms/migrate/\" + filename + \"/downloadLogFile\";\n        return reportUrl;\n    }\n\n    public TransferObject getUIComponents(HttpServletRequest request) {\n\n        String selectedSites = request.getParameter(\"selectedSites\");\n        String selectedEvents = request.getParameter(\"selectedEvents\");\n\n        List<String> selectedSiteList = Arrays.asList(selectedSites.split(\",\"));\n        List<String> selectedEventList = Arrays.asList(selectedEvents.split(\",\"));\n        ArrayList<String> selectedSiteArrayList = new ArrayList<String>(selectedSiteList);\n        ArrayList<String> selectedEventArrayList = new ArrayList<String>(selectedEventList);\n\n        if (selectedSiteArrayList.contains(\"-1\"))\n            selectedSiteArrayList.clear();\n        if (selectedEventArrayList.contains(\"-1\"))\n            selectedEventArrayList.clear();\n\n        TransferObject transferObject = new TransferObject();\n        transferObject.setSites(selectedSiteArrayList);\n        transferObject.setStudyEventDefs(selectedEventArrayList);\n        transferObject.setSourceFormVersion(request.getParameter(\"selectedSourceVersion\"));\n        transferObject.setTargetFormVersion(request.getParameter(\"selectedTargetVersion\"));\n        transferObject.setStudyOID(request.getParameter(\"studyOid\"));\n\n        return transferObject;\n    }\n\n    public String toStringTextFormat(ReportLog reportLog, ResourceBundle resterms, StudyBean stBean, CRFBean cBean) {\n\n        StringBuffer text1 = new StringBuffer();\n        for (String migrationPerform : reportLog.getCanNotMigrate()) {\n            text1.append(migrationPerform.toString()).append('\\n');\n        }\n        StringBuffer text2 = new StringBuffer();\n        for (String error : reportLog.getErrors()) {\n            text2.append(error.toString()).append('\\n');\n        }\n\n        StringBuffer text3 = new StringBuffer();\n        for (String log : reportLog.getLogs()) {\n            text3.append(log.toString()).append('\\n');\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(resterms.getString(\"Study\") + \": \" + stBean.getName() + \"\\n\");\n        sb.append(resterms.getString(\"CRF\") + \": \" + cBean.getName() + \"\\n\\n\");\n        sb.append(resterms.getString(\"Migration_Summary\") + \":\\n\" + resterms.getString(\"Number_of_Subjects_affected_by_migration\") + \": \"\n                + reportLog.getSubjectCount() + \"\\n\");\n        sb.append(resterms.getString(\"Number_of_Event_CRF_affected_by_migration\") + \": \" + reportLog.getEventCrfCount() + \"\\n\");\n        sb.append(text1.toString() + \"\\n\");\n\n\n        if (reportLog.getErrors().size() != 0) {\n            sb.append(resterms.getString(\"Errors\") + \":\\n\" + text2.toString() + \"\\n\");\n        }\n        sb.append(resterms.getString(\"Report_Log\") + \":\\n\"\n                + resterms.getString(\"CRF_Name__Origin_Version__Target_Version__Subject_ID__Site__Event__Event_Ordinal\") + \"\\n\" + text3.toString());\n        return sb.toString();\n    }\n\n    public String toStringHtmlFormat(ReportLog reportLog, ResourceBundle resterms) {\n\n        StringBuffer text1 = new StringBuffer();\n        for (String migrationPerform : reportLog.getCanNotMigrate()) {\n            text1.append(migrationPerform.toString()).append(\"<br>\");\n        }\n        StringBuffer text2 = new StringBuffer();\n        for (String error : reportLog.getErrors()) {\n            text2.append(error.toString()).append(\"<br>\");\n        }\n\n        StringBuffer text3 = new StringBuffer();\n        for (String log : reportLog.getLogs()) {\n            text3.append(log.toString()).append(\"<br>\");\n        }\n        StringBuilder sb = new StringBuilder();\n\n        sb.append(\"<br>\");\n        if (reportLog.getErrors().size() == 0) {\n            sb.append(\"<font size=\\\"3\\\" color=\\\"#D4A718\\\"><b>\");\n            sb.append(resterms.getString(\"Migration_Summary\") + \":\");\n            sb.append(\"</b></font>\");\n            sb.append(\"<br>\");\n            sb.append(\"<br>\");\n\n            sb.append(resterms.getString(\"Number_of_Subjects_to_be_affected_by_migration\") + \": \" + reportLog.getSubjectCount() + \"<br>\");\n            sb.append(resterms.getString(\"Number_of_Event_CRF_to_be_affected_by_migration\") + \": \" + reportLog.getEventCrfCount() + \"<br>\");\n            sb.append(\"<br>\");\n            sb.append(text1.toString() + \"<br>\");\n        }\n\n        if (reportLog.getErrors().size() != 0) {\n            sb.append(\"<font size=\\\"3\\\" color=\\\"#D4A718\\\" ><b>\");\n            sb.append(resterms.getString(\"Errors\") + \":\");\n            sb.append(\"</b></font>\");\n            sb.append(\"<br>\");\n\n            sb.append(\"<font color=\\\"red\\\"><b>\");\n            sb.append(text2.toString());\n            sb.append(\"</b></font>\");\n            sb.append(\"<br>\");\n        }\n\n        return sb.toString();\n    }\n\n    private Object redirect(HttpServletRequest request, HttpServletResponse response, String location) {\n        try {\n            response.sendRedirect(request.getContextPath() + location);\n        } catch (Exception e) {\n            logger.debug(e.getStackTrace().toString());\n        } finally {\n\n        }\n\n        return null;\n\n    }\n\n    @Override\n    public void run() {\n        dataSource = helperObject.getDataSource();\n        cBean = helperObject.getcBean();\n        reportLog = helperObject.getReportLog();\n        stBean = helperObject.getStBean();\n        resterms = helperObject.getResterms();\n        userAccountBean = helperObject.getUserAccountBean();\n        openClinicaMailSender = helperObject.getOpenClinicaMailSender();\n        sessionFactory = helperObject.getSessionFactory();\n\n        Session session = sessionFactory.openSession();\n        Transaction tx = session.beginTransaction();\n        helperObject.setSession(session);\n        int i = 0;\n        for (EventCRFBean eventCrfToMigrate : helperObject.getEventCrfListToMigrate()) {\n            i++;\n            executeMigrationAction(helperObject, eventCrfToMigrate);\n\n            if (i % 50 == 0) {\n                session.flush();\n                session.clear();\n            }\n\n            StudySubjectBean ssBean = (StudySubjectBean) ssdao().findByPK(eventCrfToMigrate.getStudySubjectId());\n            StudyBean sBean = (StudyBean) sdao().findByPK(ssBean.getStudyId());\n            StudyEventBean seBean = (StudyEventBean) sedao().findByPK(eventCrfToMigrate.getStudyEventId());\n            StudyEventDefinitionBean sedBean = (StudyEventDefinitionBean) seddao().findByPK(seBean.getStudyEventDefinitionId());\n            reportLog.getLogs().add(\n                    cBean.getName() + \",\" + helperObject.getSourceCrfVersionBean().getName() + \",\" + helperObject.getTargetCrfVersionBean().getName() + \",\"\n                            + ssBean.getLabel() + \",\"\n                            + sBean.getName() + \",\" + sedBean.getName() + \",\" + seBean.getSampleOrdinal());\n        }\n        tx.commit();\n        session.close();\n\n        String fileName = new SimpleDateFormat(\"_yyyy-MM-dd-hhmmssSaa'.txt'\").format(new Date());\n        fileName = \"logFile\" + fileName;\n        File file = createLogFile(fileName);\n        PrintWriter writer = null;\n        try {\n            writer = openFile(file);\n        } catch (FileNotFoundException | UnsupportedEncodingException e) {\n            e.printStackTrace();\n        } finally {\n            writer.print(toStringTextFormat(reportLog, resterms, stBean, cBean));\n            closeFile(writer);\n        }\n        String reportUrl = getReportUrl(fileName, helperObject.getUrlBase());\n        String fullName = userAccountBean.getFirstName() + \" \" + userAccountBean.getLastName();\n        StringBuilder body = new StringBuilder();\n        body.append(resterms.getString(\"Dear\") + \" \" + fullName + \",<br><br>\" + resterms.getString(\"Batch_CRF_version_migration_has_finished_running\") + \"<br>\"\n                + resterms.getString(\"Study\") + \": \" + stBean.getName() + \"<br>\" + resterms.getString(\"CRF\") + \": \" + cBean.getName() + \"<br><br>\"\n                + resterms.getString(\"A_summary_report_of_the_migration_is_available_here\") + \":<br>\" + reportUrl + \"<br><br>\"\n                + resterms.getString(\"Thank_you_Your_OpenClinica_System\"));\n\n        logger.info(body.toString());\n        openClinicaMailSender.sendEmail(userAccountBean.getEmail(), EmailEngine.getAdminEmail(), resterms.getString(\"Batch_Migration_Complete_For\") + \" \"\n                + stBean.getName(), body.toString(), true);\n    }\n\n    public void fillHelperObject(HelperObject helperObject) {\n       helperObject.setUrlBase(CoreResources.getField(\"sysURL\").split(\"/MainMenu\")[0]);\n       helperObject.setOpenClinicaMailSender(openClinicaMailSender);\n       helperObject.setDataSource(dataSource);\n       helperObject.setResterms(resterms);\n       helperObject.setEventCrfDao(eventCrfDao);\n       helperObject.setStudyEventDao(studyEventDao);\n       helperObject.setStudySubjectDao(studySubjectDao);\n       helperObject.setCrfVersionDao(crfVersionDao);\n       helperObject.setSessionFactory(sessionFactory);\n   }\n}\n", "package org.akaza.openclinica.controller.openrosa;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.akaza.openclinica.bean.core.Status;\nimport org.akaza.openclinica.bean.managestudy.StudySubjectBean;\nimport org.akaza.openclinica.bean.rule.FileProperties;\nimport org.akaza.openclinica.control.submit.UploadFileServlet;\nimport org.akaza.openclinica.dao.core.CoreResources;\nimport org.akaza.openclinica.dao.hibernate.StudyDao;\nimport org.akaza.openclinica.dao.hibernate.StudyParameterValueDao;\nimport org.akaza.openclinica.domain.datamap.Study;\nimport org.akaza.openclinica.domain.datamap.StudyParameterValue;\nimport org.akaza.openclinica.exception.OpenClinicaSystemException;\nimport org.akaza.openclinica.i18n.core.LocaleResolver;\nimport org.akaza.openclinica.service.pmanage.ParticipantPortalRegistrar;\nimport org.akaza.openclinica.web.pform.PFormCache;\nimport org.apache.commons.fileupload.FileItem;\nimport org.apache.commons.fileupload.disk.DiskFileItemFactory;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang.exception.ExceptionUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.validation.DataBinder;\nimport org.springframework.validation.Errors;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n@Controller\n@RequestMapping(value = \"/openrosa\")\npublic class OpenRosaSubmissionController {\n\n    @Autowired\n    ServletContext context;\n\n    @Autowired\n    private OpenRosaSubmissionService openRosaSubmissionService;\n\n    @Autowired\n    private StudyDao studyDao;\n\n    @Autowired\n    private StudyParameterValueDao studyParameterValueDao;\n\n    @Autowired\n    PformSubmissionNotificationService notifier;\n\n    protected final Logger logger = LoggerFactory.getLogger(getClass().getName());\n    public static final String FORM_CONTEXT = \"ecid\";\n\n    /**\n     * @api {post} /pages/api/v1/editform/:studyOid/submission Submit form data\n     * @apiName doSubmission\n     * @apiPermission admin\n     * @apiVersion 3.8.0\n     * @apiParam {String} studyOid Study Oid.\n     * @apiParam {String} ecid Key that will be used to look up subject context information while processing submission.\n     * @apiGroup Form\n     * @apiDescription Submits the data from a completed form.\n     */\n\n    @RequestMapping(value = \"/{studyOID}/submission\", method = RequestMethod.POST)\n    public ResponseEntity<String> doSubmission(HttpServletRequest request, HttpServletResponse response,\n            @PathVariable(\"studyOID\") String studyOID, @RequestParam(FORM_CONTEXT) String ecid) {\n\n        logger.info(\"Processing xform submission.\");\n        HashMap<String, String> subjectContext = null;\n        Locale locale = LocaleResolver.getLocale(request);\n\n        DataBinder dataBinder = new DataBinder(null);\n        Errors errors = dataBinder.getBindingResult();\n        Study study = studyDao.findByOcOID(studyOID);\n        String requestBody=null;\n\n        HashMap<String,String> map = new HashMap();\n        ArrayList <HashMap> listOfUploadFilePaths = new ArrayList();\n\n        try {\n            // Verify Study is allowed to submit\n            if (!mayProceed(studyOID)) {\n                logger.info(\"Submissions to the study not allowed.  Aborting submission.\");\n                return new ResponseEntity<String>(org.springframework.http.HttpStatus.NOT_ACCEPTABLE);\n            }\n            if (ServletFileUpload.isMultipartContent(request)) {\n                String dir = getAttachedFilePath(studyOID);\n                FileProperties fileProperties= new FileProperties();\n                DiskFileItemFactory factory = new DiskFileItemFactory();\n                ServletFileUpload upload = new ServletFileUpload(factory);\n                upload.setFileSizeMax(fileProperties.getFileSizeMax());\n                List<FileItem> items = upload.parseRequest(request);              \n                for (FileItem item : items) {\n                    if (item.getContentType() != null && !item.getFieldName().equals(\"xml_submission_file\") ) {\n                        if (!new File(dir).exists()) new File(dir).mkdirs();\n\n                        File file = processUploadedFile(item, dir);\n                        map.put(item.getFieldName(), file.getPath());\n\n                    } else if (item.getFieldName().equals(\"xml_submission_file\")) {\n                        requestBody = item.getString(\"UTF-8\");\n                    }\n                }\n                listOfUploadFilePaths.add(map);\n            } else  {                \n                requestBody = IOUtils.toString(request.getInputStream(), \"UTF-8\");\n            }\n\n            // Load user context from ecid\n            PFormCache cache = PFormCache.getInstance(context);\n            subjectContext = cache.getSubjectContext(ecid);\n\n            // Execute save as Hibernate transaction to avoid partial imports\n            openRosaSubmissionService.processRequest(study, subjectContext, requestBody, errors, locale , listOfUploadFilePaths);\n\n        } catch (Exception e) {\n            logger.error(\"Exception while processing xform submission.\");\n            logger.error(e.getMessage());\n            logger.error(ExceptionUtils.getStackTrace(e));\n\n            if (!errors.hasErrors()) {\n                // Send a failure response\n                logger.info(\"Submission caused internal error.  Sending error response.\");\n                return new ResponseEntity<String>(org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR);\n            }\n        }\n\n        if (!errors.hasErrors()) {\n            // Log submission with Participate\n            notifier.notify(studyOID, subjectContext);\n            logger.info(\"Completed xform submission. Sending successful response\");\n            String responseMessage = \"<OpenRosaResponse xmlns=\\\"http://openrosa.org/http/response\\\">\" + \"<message>success</message>\" + \"</OpenRosaResponse>\";\n            return new ResponseEntity<String>(responseMessage, org.springframework.http.HttpStatus.CREATED);\n        } else {\n            logger.info(\"Submission contained errors. Sending error response\");\n            return new ResponseEntity<String>(org.springframework.http.HttpStatus.NOT_ACCEPTABLE);\n        }\n    }\n\n    private Study getParentStudy(String studyOid) {\n        Study study = studyDao.findByOcOID(studyOid);\n        Study parentStudy = study.getStudy();\n        if (parentStudy != null && parentStudy.getStudyId() > 0)\n            return parentStudy;\n        else\n            return study;\n    }\n\n\n    private boolean mayProceed(String studyOid) throws Exception {\n        return mayProceed(studyOid, null);\n    }\n\n    private boolean mayProceed(String studyOid, StudySubjectBean ssBean) throws Exception {\n        boolean accessPermission = false;\n        ParticipantPortalRegistrar participantPortalRegistrar= new ParticipantPortalRegistrar();\n        Study study = getParentStudy(studyOid);\n        StudyParameterValue pStatus = studyParameterValueDao.findByStudyIdParameter(study.getStudyId(), \"participantPortal\");\n\n        // ACTIVE, PENDING, or INACTIVE\n        String pManageStatus = participantPortalRegistrar.getRegistrationStatus(studyOid).toString();\n\n        // enabled or disabled\n        String participateStatus = pStatus.getValue().toString();\n\n        // available, pending, frozen, or locked\n        String studyStatus = study.getStatus().getName().toString();\n\n        if (ssBean == null) {\n            logger.info(\"pManageStatus: \" + pManageStatus + \"  participantStatus: \" + participateStatus + \"   studyStatus: \" + studyStatus);\n            if (participateStatus.equalsIgnoreCase(\"enabled\") && studyStatus.equalsIgnoreCase(\"available\") && pManageStatus.equalsIgnoreCase(\"ACTIVE\"))\n                accessPermission = true;\n        } else {\n            logger.info(\"pManageStatus: \" + pManageStatus + \"  participantStatus: \" + participateStatus + \"   studyStatus: \" + studyStatus\n                    + \"  studySubjectStatus: \" + ssBean.getStatus().getName());\n            if (participateStatus.equalsIgnoreCase(\"enabled\") && studyStatus.equalsIgnoreCase(\"available\") && pManageStatus.equalsIgnoreCase(\"ACTIVE\")\n                    && ssBean.getStatus() == Status.AVAILABLE)\n                accessPermission = true;\n        }\n        return accessPermission;\n    }\n\n    public static String getAttachedFilePath(String studyOid) throws Exception {    \t\n        String attachedFilePath = CoreResources.getField(\"attached_file_location\");\n        if (attachedFilePath == null || attachedFilePath.length() <= 0) {\n            attachedFilePath = CoreResources.getField(\"filePath\") + \"attached_files\" + File.separator;\n        }\n        File tempFile =  new File(attachedFilePath,studyOid);\n        String canonicalPath= tempFile.getCanonicalPath();\n        \n        if (canonicalPath.startsWith(attachedFilePath)) {\n        \tif (attachedFilePath == null || attachedFilePath.length() <= 0) {\n                attachedFilePath = CoreResources.getField(\"filePath\") + \"attached_files\" + File.separator + studyOid + File.separator;\n            } else {\n                attachedFilePath += studyOid + File.separator;\n            }\n            return attachedFilePath;\n        }else {\n        \tthrow new RuntimeException(\"Traversal attempt - file path not allowed \" + studyOid);\n        }\n        \n    }\n\n    private File processUploadedFile(FileItem item, String dirToSaveUploadedFileIn) {\n        dirToSaveUploadedFileIn = dirToSaveUploadedFileIn == null ? System.getProperty(\"java.io.tmpdir\") : dirToSaveUploadedFileIn;\n        String fileName = item.getName();\n        // Some browsers IE 6,7 getName returns the whole path\n        int startIndex = fileName.lastIndexOf('\\\\');\n        if (startIndex != -1) {\n            fileName = fileName.substring(startIndex + 1, fileName.length());\n        }\n\n        File uploadedFile = new File(dirToSaveUploadedFileIn + File.separator + fileName);\n        try {\n            uploadedFile = new UploadFileServlet().new OCFileRename().rename(uploadedFile, item.getInputStream());\n        } catch (IOException e) {\n            throw new OpenClinicaSystemException(e.getMessage());\n        }\n\n        try {\n            item.write(uploadedFile);\n        } catch (Exception e) {\n            throw new OpenClinicaSystemException(e.getMessage());\n        }\n        return uploadedFile;\n    }\n}\n"], "filenames": ["web/src/main/java/org/akaza/openclinica/control/admin/DownloadVersionSpreadSheetServlet.java", "web/src/main/java/org/akaza/openclinica/control/submit/DownloadAttachedFileServlet.java", "web/src/main/java/org/akaza/openclinica/controller/BatchCRFMigrationController.java", "web/src/main/java/org/akaza/openclinica/controller/openrosa/OpenRosaSubmissionController.java"], "buggy_code_start_loc": [98, 73, 130, 30], "buggy_code_end_loc": [106, 84, 137, 207], "fixing_code_start_loc": [98, 73, 130, 29], "fixing_code_end_loc": [114, 90, 144, 215], "type": "CWE-22", "message": "OpenClinica is an open source software for Electronic Data Capture (EDC) and Clinical Data Management (CDM). OpenClinica prior to version 3.16 is vulnerable to path traversal in multiple endpoints, leading to arbitrary file read/write, and potential remote code execution. There are no known workarounds. This issue has been patched and users are recommended to upgrade.", "other": {"cve": {"id": "CVE-2022-24830", "sourceIdentifier": "security-advisories@github.com", "published": "2022-05-14T00:15:07.940", "lastModified": "2022-05-24T16:46:38.327", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OpenClinica is an open source software for Electronic Data Capture (EDC) and Clinical Data Management (CDM). OpenClinica prior to version 3.16 is vulnerable to path traversal in multiple endpoints, leading to arbitrary file read/write, and potential remote code execution. There are no known workarounds. This issue has been patched and users are recommended to upgrade."}, {"lang": "es", "value": "OpenClinica es un software de c\u00f3digo abierto para la captura de datos electr\u00f3nicos (EDC) y la administraci\u00f3n de datos cl\u00ednicos (CDM). OpenClinica versiones anteriores a 3.16, es vulnerable a una exploraci\u00f3n de rutas en varios endpoints, conllevando a una lectura/escritura arbitraria de archivos y una posible ejecuci\u00f3n de c\u00f3digo remota. No se presentan medidas de mitigaci\u00f3n conocidas. Este problema ha sido parcheado y es recomendado a usuarios actualizar"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openclinica:openclinica:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.13.1", "matchCriteriaId": "87276F61-A83D-46B4-9733-75F8FA71D3BB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openclinica:openclinica:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.15", "versionEndExcluding": "3.16.2", "matchCriteriaId": "0364324D-DBFF-4CC5-9902-F62A46D41BB8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openclinica:openclinica:3.14:*:*:*:*:*:*:*", "matchCriteriaId": "A433705E-18AD-4645-921D-0479715075E0"}]}]}], "references": [{"url": "https://github.com/OpenClinica/OpenClinica/commit/6f864e86543f903bd20d6f9fc7056115106441f3", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/OpenClinica/OpenClinica/security/advisories/GHSA-9rrv-prff-qph7", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/OpenClinica/OpenClinica/commit/6f864e86543f903bd20d6f9fc7056115106441f3"}}