{"buggy_code": ["<?php\n/* Copyright (C) 2002-2006 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2002-2003 Jean-Louis Bergamo   <jlb@j1b.org>\n * Copyright (C) 2004-2015 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2004      Eric Seigne          <eric.seigne@ryxeo.com>\n * Copyright (C) 2005-2018 Regis Houssin        <regis.houssin@capnetworks.com>\n * Copyright (C) 2005      Lionel Cousteix      <etm_ltd@tiscali.co.uk>\n * Copyright (C) 2011      Herve Prot           <herve.prot@symeos.com>\n * Copyright (C) 2012-2018 Juanjo Menent        <jmenent@2byte.es>\n * Copyright (C) 2013      Florian Henry        <florian.henry@open-concept.pro>\n * Copyright (C) 2013-2016 Alexandre Spangaro   <aspangaro.dolibarr@gmail.com>\n * Copyright (C) 2015-2017 Jean-Fran\u00e7ois Ferry  <jfefe@aternatik.fr>\n * Copyright (C) 2015      Ari Elbaz (elarifr)  <github@accedinfo.com>\n * Copyright (C) 2015      Charlie Benke        <charlie@patas-monkey.com>\n * Copyright (C) 2016      Rapha\u00ebl Doursenaud   <rdoursenaud@gpcsolutions.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *       \\file       htdocs/user/card.php\n *       \\brief      Tab of user card\n */\n\nrequire '../main.inc.php';\nrequire_once DOL_DOCUMENT_ROOT.'/user/class/user.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/user/class/usergroup.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/contact/class/contact.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formfile.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/images.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/usergroups.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/extrafields.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formcompany.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formother.class.php';\nif (! empty($conf->ldap->enabled)) require_once DOL_DOCUMENT_ROOT.'/core/class/ldap.class.php';\nif (! empty($conf->adherent->enabled)) require_once DOL_DOCUMENT_ROOT.'/adherents/class/adherent.class.php';\nif (! empty($conf->categorie->enabled)) require_once DOL_DOCUMENT_ROOT.'/categories/class/categorie.class.php';\n\n$id\t\t\t= GETPOST('id','int');\n$action\t\t= GETPOST('action','aZ09');\n$mode\t\t= GETPOST('mode','alpha');\n$confirm\t= GETPOST('confirm','alpha');\n$subaction\t= GETPOST('subaction','alpha');\n$group\t\t= GETPOST(\"group\",\"int\",3);\n$cancel\t\t= GETPOST('cancel','alpha');\n$contextpage= GETPOST('contextpage','aZ')?GETPOST('contextpage','aZ'):'useracard';   // To manage different context of search\n\n// Define value to know what current user can do on users\n$canadduser=(! empty($user->admin) || $user->rights->user->user->creer);\n$canreaduser=(! empty($user->admin) || $user->rights->user->user->lire);\n$canedituser=(! empty($user->admin) || $user->rights->user->user->creer);\n$candisableuser=(! empty($user->admin) || $user->rights->user->user->supprimer);\n$canreadgroup=$canreaduser;\n$caneditgroup=$canedituser;\nif (! empty($conf->global->MAIN_USE_ADVANCED_PERMS))\n{\n\t$canreadgroup=(! empty($user->admin) || $user->rights->user->group_advance->read);\n\t$caneditgroup=(! empty($user->admin) || $user->rights->user->group_advance->write);\n}\n\n// Define value to know what current user can do on properties of edited user\nif ($id)\n{\n\t// $user est le user qui edite, $id est l'id de l'utilisateur edite\n\t$caneditfield=((($user->id == $id) && $user->rights->user->self->creer)\n\t|| (($user->id != $id) && $user->rights->user->user->creer));\n\t$caneditpassword=((($user->id == $id) && $user->rights->user->self->password)\n\t|| (($user->id != $id) && $user->rights->user->user->password));\n}\n\n// Security check\n$socid=0;\nif ($user->societe_id > 0) $socid = $user->societe_id;\n$feature2='user';\nif ($user->id == $id) { $feature2=''; $canreaduser=1; } // A user can always read its own card\nif (!$canreaduser) {\n\t$result = restrictedArea($user, 'user', $id, 'user&user', $feature2);\n}\nif ($user->id <> $id && ! $canreaduser) accessforbidden();\n\n// Load translation files required by page\n$langs->loadLangs(array('users', 'companies', 'ldap', 'admin', 'hrm'));\n\n$object = new User($db);\n$extrafields = new ExtraFields($db);\n\n// fetch optionals attributes and labels\n$extralabels=$extrafields->fetch_name_optionals_label($object->table_element);\n\n// Initialize technical object to manage hooks. Note that conf->hooks_modules contains array\n$hookmanager->initHooks(array('usercard','globalcard'));\n\n\n\n/**\n * Actions\n */\n\n$parameters=array('id' => $id, 'socid' => $socid, 'group' => $group, 'caneditgroup' => $caneditgroup);\n$reshook=$hookmanager->executeHooks('doActions',$parameters,$object,$action);    // Note that $action and $object may have been modified by some hooks\nif ($reshook < 0) setEventMessages($hookmanager->error, $hookmanager->errors, 'errors');\n\nif (empty($reshook)) {\n\n\tif ($action == 'confirm_disable' && $confirm == \"yes\" && $candisableuser) {\n\t\tif ($id <> $user->id) {\n\t\t\t$object->fetch($id);\n\t\t\t$object->setstatus(0);\n\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].'?id='.$id);\n\t\t\texit;\n\t\t}\n\t}\n\tif ($action == 'confirm_enable' && $confirm == \"yes\" && $candisableuser) {\n\t\t$error = 0;\n\n\t\tif ($id <> $user->id) {\n\t\t\t$object->fetch($id);\n\n\t\t\tif (!empty($conf->file->main_limit_users)) {\n\t\t\t\t$nb = $object->getNbOfUsers(\"active\");\n\t\t\t\tif ($nb >= $conf->file->main_limit_users) {\n\t\t\t\t\t$error ++;\n\t\t\t\t\tsetEventMessages($langs->trans(\"YourQuotaOfUsersIsReached\"), null, 'errors');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$object->setstatus(1);\n\t\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].'?id='.$id);\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($action == 'confirm_delete' && $confirm == \"yes\" && $candisableuser) {\n\t\tif ($id <> $user->id) {\n\t\t\t$object = new User($db);\n\t\t\t$object->fetch($id);\n\t\t\t$result = $object->delete();\n\t\t\tif ($result < 0) {\n\t\t\t\t$langs->load(\"errors\");\n\t\t\t\tsetEventMessages($langs->trans(\"ErrorUserCannotBeDelete\"), null, 'errors');\n\t\t\t} else {\n\t\t\t\theader(\"Location: \".DOL_URL_ROOT.\"/user/list.php?restore_lastsearch_values=1\");\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Action Add user\n\tif ($action == 'add' && $canadduser) {\n\t\t$error = 0;\n\n\t\tif (!$_POST[\"lastname\"]) {\n\t\t\t$error ++;\n\t\t\tsetEventMessages($langs->trans(\"NameNotDefined\"), null, 'errors');\n\t\t\t$action = \"create\";       // Go back to create page\n\t\t}\n\t\tif (!$_POST[\"login\"]) {\n\t\t\t$error ++;\n\t\t\tsetEventMessages($langs->trans(\"LoginNotDefined\"), null, 'errors');\n\t\t\t$action = \"create\";       // Go back to create page\n\t\t}\n\n\t\tif (!empty($conf->file->main_limit_users)) { // If option to limit users is set\n\t\t\t$nb = $object->getNbOfUsers(\"active\");\n\t\t\tif ($nb >= $conf->file->main_limit_users) {\n\t\t\t\t$error ++;\n\t\t\t\tsetEventMessages($langs->trans(\"YourQuotaOfUsersIsReached\"), null, 'errors');\n\t\t\t\t$action = \"create\";       // Go back to create page\n\t\t\t}\n\t\t}\n\n\t\tif (!$error) {\n\t\t\t$object->lastname = GETPOST(\"lastname\", 'alpha');\n\t\t\t$object->firstname = GETPOST(\"firstname\", 'alpha');\n\t\t\t$object->login = GETPOST(\"login\", 'alpha');\n\t\t\t$object->api_key = GETPOST(\"api_key\", 'alpha');\n\t\t\t$object->gender = GETPOST(\"gender\", 'alpha');\n\t\t\t$birth = dol_mktime(0, 0, 0, GETPOST('birthmonth'), GETPOST('birthday'), GETPOST('birthyear'));\n\t\t\t$object->birth = $birth;\n\t\t\t$object->admin = GETPOST(\"admin\", 'alpha');\n\t\t\t$object->address = GETPOST('address', 'alphanohtml');\n\t\t\t$object->zip = GETPOST('zipcode', 'alphanohtml');\n\t\t\t$object->town = GETPOST('town', 'alphanohtml');\n\t\t\t$object->country_id = GETPOST('country_id', 'int');\n\t\t\t$object->state_id = GETPOST('state_id', 'int');\n\t\t\t$object->office_phone = GETPOST(\"office_phone\", 'alphanohtml');\n\t\t\t$object->office_fax = GETPOST(\"office_fax\", 'alphanohtml');\n\t\t\t$object->user_mobile = GETPOST(\"user_mobile\", 'alphanohtml');\n\t\t\t$object->skype = GETPOST(\"skype\", 'alphanohtml');\n\t\t\t$object->email = preg_replace('/\\s+/', '', GETPOST(\"email\", 'alpha'));\n\t\t\t$object->job = GETPOST(\"job\", 'alpha');\n\t\t\t$object->signature = GETPOST(\"signature\", 'none');\n\t\t\t$object->accountancy_code = GETPOST(\"accountancy_code\", 'alphanohtml');\n\t\t\t$object->note = GETPOST(\"note\", 'none');\n\t\t\t$object->ldap_sid = GETPOST(\"ldap_sid\", 'alphanohtml');\n\t\t\t$object->fk_user = GETPOST(\"fk_user\", 'int') > 0 ? GETPOST(\"fk_user\", 'int') : 0;\n\t\t\t$object->employee = GETPOST('employee', 'alphanohtml');\n\n\t\t\t$object->thm = GETPOST(\"thm\", 'alphanohtml') != '' ? GETPOST(\"thm\", 'alphanohtml') : '';\n\t\t\t$object->tjm = GETPOST(\"tjm\", 'alphanohtml') != '' ? GETPOST(\"tjm\", 'alphanohtml') : '';\n\t\t\t$object->salary = GETPOST(\"salary\", 'alphanohtml') != '' ? GETPOST(\"salary\", 'alphanohtml') : '';\n\t\t\t$object->salaryextra = GETPOST(\"salaryextra\", 'alphanohtml') != '' ? GETPOST(\"salaryextra\", 'alphanohtml') : '';\n\t\t\t$object->weeklyhours = GETPOST(\"weeklyhours\", 'alphanohtml') != '' ? GETPOST(\"weeklyhours\", 'alphanohtml') : '';\n\n\t\t\t$object->color = GETPOST(\"color\", 'alphanohtml') != '' ? GETPOST(\"color\", 'alphanohtml') : '';\n\t\t\t$dateemployment = dol_mktime(0, 0, 0, GETPOST('dateemploymentmonth'), GETPOST('dateemploymentday'), GETPOST('dateemploymentyear'));\n\t\t\t$object->dateemployment = $dateemployment;\n\n\t\t\t// Fill array 'array_options' with data from add form\n\t\t\t$ret = $extrafields->setOptionalsFromPost($extralabels, $object);\n\t\t\tif ($ret < 0) {\n\t\t\t\t$error ++;\n\t\t\t}\n\n\t\t\t// Set entity property\n\t\t\t$entity = GETPOST('entity', 'int');\n\t\t\tif (! empty($conf->multicompany->enabled)) {\n\t\t\t\tif (GETPOST('superadmin', 'int')) {\n\t\t\t\t\t$object->entity = 0;\n\t\t\t\t} else {\n\t\t\t\t\tif (! empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)) {\n\t\t\t\t\t\t$object->entity = 1; // all users are forced into master entity\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$object->entity = ($entity == '' ? 1 : $entity);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$object->entity = ($entity == '' ? 1 : $entity);\n\t\t\t\t/*if ($user->admin && $user->entity == 0 && GETPOST(\"admin\",'alpha'))\n\t\t\t\t{\n\t\t\t\t}*/\n\t\t\t}\n\n\t\t\t$db->begin();\n\n\t\t\t$id = $object->create($user);\n\t\t\tif ($id > 0) {\n\t\t\t\tif (GETPOST('password')) {\n\t\t\t\t\t$object->setPassword($user, GETPOST('password'));\n\t\t\t\t}\n\t\t\t\t\t\tif (! empty($conf->categorie->enabled)) {\n\t\t\t\t\t// Categories association\n\t\t\t\t\t$usercats = GETPOST('usercats', 'array');\n\t\t\t\t\t$object->setCategories($usercats);\n\t\t\t\t}\n\t\t\t\t$db->commit();\n\n\t\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].'?id='.$id);\n\t\t\t\texit;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t$db->rollback();\n\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t$action = \"create\";       // Go back to create page\n\t\t\t}\n\t\t}\n\t}\n\n\t// Action add usergroup\n\tif (($action == 'addgroup' || $action == 'removegroup') && $caneditgroup)\n\t{\n\t\tif ($group)\n\t\t{\n\t\t\t$editgroup = new UserGroup($db);\n\t\t\t$editgroup->fetch($group);\n\t\t\t$editgroup->oldcopy=clone $editgroup;\n\n\t\t\t$object->fetch($id);\n\t\t\tif ($action == 'addgroup') {\n\t\t\t\t$result = $object->SetInGroup($group, $editgroup->entity);\n\t\t\t}\n\t\t\tif ($action == 'removegroup') {\n\t\t\t\t$result = $object->RemoveFromGroup($group, $editgroup->entity);\n\t\t\t}\n\n\t\t\tif ($result > 0) {\n\t\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].'?id='.$id);\n\t\t\t\texit;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($action == 'update' && ! $cancel)\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t\tif ($caneditfield)    // Case we can edit all field\n\t\t{\n\t\t\t$error = 0;\n\n\t\t\tif (!$_POST[\"lastname\"]) {\n\t\t\t\tsetEventMessages($langs->trans(\"NameNotDefined\"), null, 'errors');\n\t\t\t\t$action = \"edit\";       // Go back to create page\n\t\t\t\t$error ++;\n\t\t\t}\n\t\t\tif (!$_POST[\"login\"]) {\n\t\t\t\tsetEventMessages($langs->trans(\"LoginNotDefined\"), null, 'errors');\n\t\t\t\t$action = \"edit\";       // Go back to create page\n\t\t\t\t$error ++;\n\t\t\t}\n\n\t\t\tif (!$error)\n\t\t\t{\n\t\t\t\t$object->fetch($id);\n\n\t\t\t\t$object->oldcopy = clone $object;\n\n\t\t\t\t$db->begin();\n\n\t\t\t\t$object->lastname = GETPOST(\"lastname\", 'alpha');\n\t\t\t\t$object->firstname = GETPOST(\"firstname\", 'alpha');\n\t\t\t\t$object->login = GETPOST(\"login\", 'alpha');\n\t\t\t\t$object->gender = GETPOST(\"gender\", 'alpha');\n\t\t\t\t$birth = dol_mktime(0, 0, 0, GETPOST('birthmonth'), GETPOST('birthday'), GETPOST('birthyear'));\n\t\t\t\t$object->birth = $birth;\n\t\t\t\t$object->pass = GETPOST(\"password\",'none');\n\t\t\t\t$object->api_key = (GETPOST(\"api_key\", 'alpha')) ? GETPOST(\"api_key\", 'alpha') : $object->api_key;\n\t\t\t\tif (! empty($user->admin)) $object->admin = GETPOST(\"admin\"); \t// admin flag can only be set/unset by an admin user. A test is also done later when forging sql request\n\t\t\t\t$object->address = GETPOST('address', 'alphanohtml');\n\t\t\t\t$object->zip = GETPOST('zipcode', 'alphanohtml');\n\t\t\t\t$object->town = GETPOST('town', 'alphanohtml');\n\t\t\t\t$object->country_id = GETPOST('country_id', 'int');\n\t\t\t\t$object->state_id = GETPOST('state_id', 'int');\n\t\t\t\t$object->office_phone = GETPOST(\"office_phone\", 'alphanohtml');\n\t\t\t\t$object->office_fax = GETPOST(\"office_fax\", 'alphanohtml');\n\t\t\t\t$object->user_mobile = GETPOST(\"user_mobile\", 'alphanohtml');\n\t\t\t\t$object->skype = GETPOST(\"skype\", 'alpha');\n\t\t\t\t$object->email = preg_replace('/\\s+/', '', GETPOST(\"email\", 'alpha'));\n\t\t\t\t$object->job = GETPOST(\"job\", 'alpha');\n\t\t\t\t$object->signature = GETPOST(\"signature\",'none');\n\t\t\t\t$object->accountancy_code = GETPOST(\"accountancy_code\",'alpha');\n\t\t\t\t$object->openid = GETPOST(\"openid\",'alpha');\n\t\t\t\t$object->fk_user = GETPOST(\"fk_user\",'int') > 0 ? GETPOST(\"fk_user\",'int') : 0;\n\t\t\t\t$object->employee = GETPOST('employee','alphanothtml');\n\n\t\t\t\t$object->thm = GETPOST(\"thm\",'alphanohtml') != '' ? GETPOST(\"thm\",'alphanohtml') : '';\n\t\t\t\t$object->tjm = GETPOST(\"tjm\",'alphanohtml') != '' ? GETPOST(\"tjm\",'alphanohtml') : '';\n\t\t\t\t$object->salary = GETPOST(\"salary\",'alphanohtml') != '' ? GETPOST(\"salary\",'alphanohtml') : '';\n\t\t\t\t$object->salaryextra = GETPOST(\"salaryextra\",'alphanohtml') != '' ? GETPOST(\"salaryextra\",'alphanohtml') : '';\n\t\t\t\t$object->weeklyhours = GETPOST(\"weeklyhours\",'alphanohtml') != '' ? GETPOST(\"weeklyhours\",'alphanohtml') : '';\n\n\t\t\t\t$object->color = GETPOST(\"color\",'alpha') != '' ? GETPOST(\"color\",'alpha') : '';\n\t\t\t\t$dateemployment = dol_mktime(0, 0, 0, GETPOST('dateemploymentmonth','int'), GETPOST('dateemploymentday','int'), GETPOST('dateemploymentyear','int'));\n\t\t\t\t$object->dateemployment = $dateemployment;\n\n\t\t\t\tif (! empty($conf->multicompany->enabled))\n\t\t\t\t{\n\t\t\t\t\tif (! empty($_POST[\"superadmin\"]))\n\t\t\t\t\t{\n\t\t\t\t\t\t$object->entity = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse if (! empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE))\n\t\t\t\t\t{\n\t\t\t\t\t\t$object->entity = 1; // all users in master entity\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$object->entity = (! GETPOST('entity', 'int') ? 0 : GETPOST('entity', 'int'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$object->entity = (! GETPOST('entity', 'int') ? 0 : GETPOST('entity', 'int'));\n\t\t\t\t}\n\n\t\t\t\t// Fill array 'array_options' with data from add form\n\t\t\t\t$ret = $extrafields->setOptionalsFromPost($extralabels, $object);\n\t\t\t\tif ($ret < 0) {\n\t\t\t\t\t$error ++;\n\t\t\t\t}\n\n\t\t\t\tif (GETPOST('deletephoto')) {\n\t\t\t\t\t$object->photo = '';\n\t\t\t\t}\n\t\t\t\tif (!empty($_FILES['photo']['name'])) {\n\t\t\t\t\t$object->photo = dol_sanitizeFileName($_FILES['photo']['name']);\n\t\t\t\t}\n\n\t\t\t\tif (!$error) {\n\t\t\t\t\t$ret = $object->update($user);\n\t\t\t\t\tif ($ret < 0) {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t\tif ($db->errno() == 'DB_ERROR_RECORD_ALREADY_EXISTS') {\n\t\t\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t\t\tsetEventMessages($langs->trans(\"ErrorLoginAlreadyExists\", $object->login), null, 'errors');\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!$error && GETPOSTISSET('contactid')) {\n\t\t\t\t\t$contactid = GETPOST('contactid', 'int');\n\n\t\t\t\t\tif ($contactid > 0) {\n\t\t\t\t\t\t$contact = new Contact($db);\n\t\t\t\t\t\t$contact->fetch($contactid);\n\n\t\t\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t\t\t\t$sql .= \" SET fk_socpeople=\".$db->escape($contactid);\n\t\t\t\t\t\tif (!empty($contact->socid)) {\n\t\t\t\t\t\t\t$sql .= \", fk_soc=\".$db->escape($contact->socid);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$sql .= \" WHERE rowid=\".$object->id;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t\t\t\t$sql .= \" SET fk_socpeople=NULL, fk_soc=NULL\";\n\t\t\t\t\t\t$sql .= \" WHERE rowid=\".$object->id;\n\t\t\t\t\t}\n\t\t\t\t\tdol_syslog(\"usercard::update\", LOG_DEBUG);\n\t\t\t\t\t$resql = $db->query($sql);\n\t\t\t\t\tif (!$resql) {\n\t\t\t\t\t\t$error ++;\n\t\t\t\t\t\tsetEventMessages($db->lasterror(), null, 'errors');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!$error && !count($object->errors)) {\n\t\t\t\t\tif (GETPOST('deletephoto') && $object->photo) {\n\t\t\t\t\t\t$fileimg = $conf->user->dir_output.'/'.get_exdir($object->id, 2, 0, 1, $object, 'user').'/logos/'.$object->photo;\n\t\t\t\t\t\t$dirthumbs = $conf->user->dir_output.'/'.get_exdir($object->id, 2, 0, 1, $object, 'user').'/logos/thumbs';\n\t\t\t\t\t\tdol_delete_file($fileimg);\n\t\t\t\t\t\tdol_delete_dir_recursive($dirthumbs);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isset($_FILES['photo']['tmp_name']) && trim($_FILES['photo']['tmp_name'])) {\n\t\t\t\t\t\t$dir = $conf->user->dir_output.'/'.get_exdir($object->id, 2, 0, 1, $object, 'user');\n\n\t\t\t\t\t\tdol_mkdir($dir);\n\n\t\t\t\t\t\tif (@is_dir($dir)) {\n\t\t\t\t\t\t\t$newfile = $dir.'/'.dol_sanitizeFileName($_FILES['photo']['name']);\n\t\t\t\t\t\t\t$result = dol_move_uploaded_file($_FILES['photo']['tmp_name'], $newfile, 1, 0, $_FILES['photo']['error']);\n\n\t\t\t\t\t\t\tif (!$result > 0) {\n\t\t\t\t\t\t\t\tsetEventMessages($langs->trans(\"ErrorFailedToSaveFile\"), null, 'errors');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Create thumbs\n\t\t\t\t\t\t\t\t$object->addThumbs($newfile);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$error ++;\n\t\t\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t\t\tsetEventMessages($langs->trans(\"ErrorFailedToCreateDir\", $dir), $mesgs, 'errors');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (! $error && ! count($object->errors))\n\t\t\t\t{\n\t\t\t\t\t// Then we add the associated categories\n\t\t\t\t\t$categories = GETPOST('usercats', 'array');\n\t\t\t\t\t$object->setCategories($categories);\n\t\t\t\t}\n\n\t\t\t\tif (!$error && !count($object->errors)) {\n\t\t\t\t\tsetEventMessages($langs->trans(\"UserModified\"), null, 'mesgs');\n\t\t\t\t\t$db->commit();\n\n\t\t\t\t\t$login = $_SESSION[\"dol_login\"];\n\t\t\t\t\tif ($login && $login == $object->oldcopy->login && $object->oldcopy->login != $object->login)    // Current user has changed its login\n\t\t\t\t\t{\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t\tsetEventMessages($langs->transnoentitiesnoconv(\"WarningYourLoginWasModifiedPleaseLogin\"), null, 'warnings');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$db->rollback();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif ($caneditpassword)    // Case we can edit only password\n\t\t\t{\n\t\t\t\tdol_syslog(\"Not allowed to change fields, only password\");\n\n\t\t\t\t$object->fetch($id);\n\n\t\t\t\t$object->oldcopy = clone $object;\n\n\t\t\t\t$ret = $object->setPassword($user, GETPOST(\"password\"));\n\t\t\t\tif ($ret < 0)\n\t\t\t\t{\n\t\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Change password with a new generated one\n\tif ((($action == 'confirm_password' && $confirm == 'yes')\n\t\t\t|| ($action == 'confirm_passwordsend' && $confirm == 'yes')) && $caneditpassword\n\t) {\n\t\t$object->fetch($id);\n\n\t\t$newpassword = $object->setPassword($user, '');\n\t\tif ($newpassword < 0) {\n\t\t\t// Echec\n\t\t\tsetEventMessages($langs->trans(\"ErrorFailedToSetNewPassword\"), null, 'errors');\n\t\t} else {\n\t\t\t// Succes\n\t\t\tif ($action == 'confirm_passwordsend' && $confirm == 'yes') {\n\t\t\t\tif ($object->send_password($user, $newpassword) > 0)\n\t\t\t\t{\n\t\t\t\t\tsetEventMessages($langs->trans(\"PasswordChangedAndSentTo\", $object->email), null, 'mesgs');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsetEventMessages($langs->trans(\"PasswordChangedTo\", $newpassword), null, 'warnings');\n\t\t\t}\n\t\t}\n\t}\n\n\t// Action initialisation donnees depuis record LDAP\n\tif ($action == 'adduserldap') {\n\t\t$selecteduser = $_POST['users'];\n\n\t\t$required_fields = array(\n\t\t\t$conf->global->LDAP_KEY_USERS,\n\t\t\t$conf->global->LDAP_FIELD_NAME,\n\t\t\t$conf->global->LDAP_FIELD_FIRSTNAME,\n\t\t\t$conf->global->LDAP_FIELD_LOGIN,\n\t\t\t$conf->global->LDAP_FIELD_LOGIN_SAMBA,\n\t\t\t$conf->global->LDAP_FIELD_PASSWORD,\n\t\t\t$conf->global->LDAP_FIELD_PASSWORD_CRYPTED,\n\t\t\t$conf->global->LDAP_FIELD_PHONE,\n\t\t\t$conf->global->LDAP_FIELD_FAX,\n\t\t\t$conf->global->LDAP_FIELD_MOBILE,\n\t\t\t$conf->global->LDAP_FIELD_SKYPE,\n\t\t\t$conf->global->LDAP_FIELD_MAIL,\n\t\t\t$conf->global->LDAP_FIELD_TITLE,\n\t\t\t$conf->global->LDAP_FIELD_DESCRIPTION,\n\t\t\t$conf->global->LDAP_FIELD_SID\n\t\t);\n\n\t\t$ldap = new Ldap();\n\t\t$result = $ldap->connect_bind();\n\t\tif ($result >= 0) {\n\t\t\t// Remove from required_fields all entries not configured in LDAP (empty) and duplicated\n\t\t\t$required_fields = array_unique(array_values(array_filter($required_fields, \"dol_validElement\")));\n\n\t\t\t$ldapusers = $ldap->getRecords($selecteduser, $conf->global->LDAP_USER_DN, $conf->global->LDAP_KEY_USERS, $required_fields);\n\t\t\t//print_r($ldapusers);\n\n\t\t\tif (is_array($ldapusers)) {\n\t\t\t\tforeach ($ldapusers as $key => $attribute) {\n\t\t\t\t\t$ldap_lastname = $attribute[$conf->global->LDAP_FIELD_NAME];\n\t\t\t\t\t$ldap_firstname = $attribute[$conf->global->LDAP_FIELD_FIRSTNAME];\n\t\t\t\t\t$ldap_login = $attribute[$conf->global->LDAP_FIELD_LOGIN];\n\t\t\t\t\t$ldap_loginsmb = $attribute[$conf->global->LDAP_FIELD_LOGIN_SAMBA];\n\t\t\t\t\t$ldap_pass = $attribute[$conf->global->LDAP_FIELD_PASSWORD];\n\t\t\t\t\t$ldap_pass_crypted = $attribute[$conf->global->LDAP_FIELD_PASSWORD_CRYPTED];\n\t\t\t\t\t$ldap_phone = $attribute[$conf->global->LDAP_FIELD_PHONE];\n\t\t\t\t\t$ldap_fax = $attribute[$conf->global->LDAP_FIELD_FAX];\n\t\t\t\t\t$ldap_mobile = $attribute[$conf->global->LDAP_FIELD_MOBILE];\n\t\t\t\t\t$ldap_skype = $attribute[$conf->global->LDAP_FIELD_SKYPE];\n\t\t\t\t\t$ldap_mail = $attribute[$conf->global->LDAP_FIELD_MAIL];\n\t\t\t\t\t$ldap_sid = $attribute[$conf->global->LDAP_FIELD_SID];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetEventMessages($ldap->error, $ldap->errors, 'errors');\n\t\t}\n\t}\n\n\t// Actions to send emails\n\t$trigger_name='USER_SENTBYMAIL';\n\t$paramname='id';    // Name of param key to open the card\n\t$mode='emailfromuser';\n\t$trackid='use'.$id;\n\tinclude DOL_DOCUMENT_ROOT.'/core/actions_sendmails.inc.php';\n\n\t// Actions to build doc\n\t$upload_dir = $conf->user->dir_output;\n\t$permissioncreate=$user->rights->user->user->creer;\n\tinclude DOL_DOCUMENT_ROOT.'/core/actions_builddoc.inc.php';\n}\n\n\n/*\n * View\n */\n\n$form = new Form($db);\n$formother=new FormOther($db);\n$formcompany = new FormCompany($db);\n$formfile = new FormFile($db);\n\nllxHeader('',$langs->trans(\"UserCard\"));\n\nif ($action == 'create' || $action == 'adduserldap')\n{\n\t/* ************************************************************************** */\n\t/*                                                                            */\n\t/* Affichage fiche en mode creation                                           */\n\t/*                                                                            */\n\t/* ************************************************************************** */\n\n\tprint load_fiche_titre($langs->trans(\"NewUser\"));\n\n\tprint $langs->trans(\"CreateInternalUserDesc\").\"<br>\\n\";\n\tprint \"<br>\";\n\n\n\tif (! empty($conf->ldap->enabled) && (isset($conf->global->LDAP_SYNCHRO_ACTIVE) && $conf->global->LDAP_SYNCHRO_ACTIVE == 'ldap2dolibarr'))\n\t{\n\t\t/*\n         * Affiche formulaire d'ajout d'un compte depuis LDAP\n         * si on est en synchro LDAP vers Dolibarr\n         */\n\n\t\t$ldap = new Ldap();\n\t\t$result = $ldap->connect_bind();\n\t\tif ($result >= 0)\n\t\t{\n\t\t\t$required_fields=array(\n\t\t\t\t$conf->global->LDAP_KEY_USERS,\n\t\t\t\t$conf->global->LDAP_FIELD_FULLNAME,\n\t\t\t\t$conf->global->LDAP_FIELD_NAME,\n\t\t\t\t$conf->global->LDAP_FIELD_FIRSTNAME,\n\t\t\t\t$conf->global->LDAP_FIELD_LOGIN,\n\t\t\t\t$conf->global->LDAP_FIELD_LOGIN_SAMBA,\n\t\t\t\t$conf->global->LDAP_FIELD_PASSWORD,\n\t\t\t\t$conf->global->LDAP_FIELD_PASSWORD_CRYPTED,\n\t\t\t\t$conf->global->LDAP_FIELD_PHONE,\n\t\t\t\t$conf->global->LDAP_FIELD_FAX,\n\t\t\t\t$conf->global->LDAP_FIELD_MOBILE,\n\t\t\t\t$conf->global->LDAP_FIELD_SKYPE,\n\t\t\t\t$conf->global->LDAP_FIELD_MAIL,\n\t\t\t\t$conf->global->LDAP_FIELD_TITLE,\n\t\t\t\t$conf->global->LDAP_FIELD_DESCRIPTION,\n\t\t\t\t$conf->global->LDAP_FIELD_SID\n\t\t\t);\n\n\t\t\t// Remove from required_fields all entries not configured in LDAP (empty) and duplicated\n\t\t\t$required_fields=array_unique(array_values(array_filter($required_fields, \"dol_validElement\")));\n\n\t\t\t// Get from LDAP database an array of results\n\t\t\t$ldapusers = $ldap->getRecords('*', $conf->global->LDAP_USER_DN, $conf->global->LDAP_KEY_USERS, $required_fields, 1);\n\n\t\t\tif (is_array($ldapusers))\n\t\t\t{\n\t\t\t\t$liste=array();\n\t\t\t\tforeach ($ldapusers as $key => $ldapuser)\n\t\t\t\t{\n\t\t\t\t\t// Define the label string for this user\n\t\t\t\t\t$label='';\n\t\t\t\t\tforeach ($required_fields as $value)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($value)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$label.=$value.\"=\".$ldapuser[$value].\" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$liste[$key] = $label;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsetEventMessages($ldap->error, $ldap->errors, 'errors');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetEventMessages($ldap->error, $ldap->errors, 'errors');\n\t\t}\n\n\t\t// If user list is full, we show drop-down list\n\t   \tprint \"\\n\\n<!-- Form liste LDAP debut -->\\n\";\n\n\t   \tprint '<form name=\"add_user_ldap\" action=\"'.$_SERVER[\"PHP_SELF\"].'\" method=\"post\">';\n\t   \tprint '<input type=\"hidden\" name=\"token\" value=\"'.$_SESSION['newtoken'].'\">';\n\t   \tprint '<table width=\"100%\" class=\"border\"><tr>';\n\t   \tprint '<td width=\"160\">';\n\t   \tprint $langs->trans(\"LDAPUsers\");\n\t   \tprint '</td>';\n\t   \tprint '<td>';\n\t   \tprint '<input type=\"hidden\" name=\"action\" value=\"adduserldap\">';\n\t\tif (is_array($liste) && count($liste))\n\t\t{\n\t\t\tprint $form->selectarray('users', $liste, '', 1);\n\t\t\tprint ajax_combobox('users');\n\t\t}\n\t   \tprint '</td><td align=\"center\">';\n\t   \tprint '<input type=\"submit\" class=\"button\" value=\"'.dol_escape_htmltag($langs->trans('Get')).'\"'.(count($liste)?'':' disabled').'>';\n\t   \tprint '</td></tr></table>';\n\t   \tprint '</form>';\n\n\t   \tprint \"\\n<!-- Form liste LDAP fin -->\\n\\n\";\n\t   \tprint '<br>';\n\t}\n\n\n\tprint '<form action=\"'.$_SERVER['PHP_SELF'].'\" method=\"POST\" name=\"createuser\">';\n\tprint '<input type=\"hidden\" name=\"token\" value=\"'.$_SESSION['newtoken'].'\">';\n\tprint '<input type=\"hidden\" name=\"action\" value=\"add\">';\n\tif (! empty($ldap_sid)) print '<input type=\"hidden\" name=\"ldap_sid\" value=\"'.dol_escape_htmltag($ldap_sid).'\">';\n\tprint '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\">';\n\n\tdol_fiche_head('', '', '', 0, '');\n\n\tprint dol_set_focus('#lastname');\n\n\tprint '<table class=\"border centpercent\">';\n\n\t// Lastname\n\tprint '<tr>';\n\tprint '<td class=\"titlefieldcreate\"><span class=\"fieldrequired\">'.$langs->trans(\"Lastname\").'</span></td>';\n\tprint '<td>';\n\tif (! empty($ldap_lastname))\n\t{\n\t\tprint '<input type=\"hidden\" id=\"lastname\" name=\"lastname\" value=\"'.$ldap_lastname.'\">';\n\t\tprint $ldap_lastname;\n\t}\n\telse\n\t{\n\t\tprint '<input class=\"minwidth100\" type=\"text\" id=\"lastname\" name=\"lastname\" value=\"'.GETPOST('lastname').'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// Firstname\n\tprint '<tr><td>'.$langs->trans(\"Firstname\").'</td>';\n\tprint '<td>';\n\tif (! empty($ldap_firstname))\n\t{\n\t\tprint '<input type=\"hidden\" name=\"firstname\" value=\"'.$ldap_firstname.'\">';\n\t\tprint $ldap_firstname;\n\t}\n\telse\n\t{\n\t\tprint '<input class=\"minwidth100\" type=\"text\" name=\"firstname\" value=\"'.GETPOST('firstname').'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// Login\n\tprint '<tr><td><span class=\"fieldrequired\">'.$langs->trans(\"Login\").'</span></td>';\n\tprint '<td>';\n\tif (! empty($ldap_login))\n\t{\n\t\tprint '<input type=\"hidden\" name=\"login\" value=\"'.$ldap_login.'\">';\n\t\tprint $ldap_login;\n\t}\n\telseif (! empty($ldap_loginsmb))\n\t{\n\t\tprint '<input type=\"hidden\" name=\"login\" value=\"'.$ldap_loginsmb.'\">';\n\t\tprint $ldap_loginsmb;\n\t}\n\telse\n\t{\n\t\tprint '<input class=\"maxwidth200\" maxsize=\"24\" type=\"text\" name=\"login\" value=\"'.dol_escape_htmltag(GETPOST('login','alpha')).'\">';\n\t}\n\tprint '</td></tr>';\n\n\t$generated_password='';\n\tif (empty($ldap_sid))    // ldap_sid is for activedirectory\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/security2.lib.php';\n\t\t$generated_password=getRandomPassword(false);\n\t}\n\t$password=$generated_password;\n\n\t// Password\n\tprint '<tr><td class=\"fieldrequired\">'.$langs->trans(\"Password\").'</td>';\n\tprint '<td>';\n\t$valuetoshow='';\n\tif (preg_match('/ldap/',$dolibarr_main_authentication))\n\t{\n\t\t$valuetoshow.=($valuetoshow?', ':'').$langs->trans(\"PasswordOfUserInLDAP\");\n\t}\n\tif (preg_match('/http/',$dolibarr_main_authentication))\n\t{\n\t\t$valuetoshow.=($valuetoshow?', ':'').$langs->trans(\"HTTPBasicPassword\");\n\t}\n\tif (preg_match('/dolibarr/',$dolibarr_main_authentication))\n\t{\n\t\tif (! empty($ldap_pass))\t// For very old system comaptibilty. Now clear password can't be viewed from LDAP read\n\t\t{\n\t\t\t$valuetoshow.= ($valuetoshow?', ':'').'<input type=\"hidden\" name=\"password\" value=\"'.$ldap_pass.'\">';\t// Dolibarr password is preffiled with LDAP known password\n\t\t\t$valuetoshow.= preg_replace('/./i','*',$ldap_pass);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// We do not use a field password but a field text to show new password to use.\n\t\t\t$valuetoshow.= ($valuetoshow?', ':'').'<input size=\"30\" maxsize=\"32\" type=\"text\" name=\"password\" value=\"'.$password.'\" autocomplete=\"new-password\">';\n\t\t}\n\t}\n\n\t// Other form for user password\n\t$parameters=array('valuetoshow' => $valuetoshow, 'password' => $password);\n\t$reshook=$hookmanager->executeHooks('printUserPasswordField',$parameters,$object,$action);    // Note that $action and $object may have been modified by hook\n\tif ($reshook > 0) $valuetoshow=$hookmanager->resPrint;\t// to replace\n\telse $valuetoshow.=$hookmanager->resPrint;\t\t\t\t// to add\n\n\tprint $valuetoshow;\n\tprint '</td></tr>';\n\n\tif (! empty($conf->api->enabled))\n\t{\n\t\t// API key\n\t\t$generated_api_key = '';\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/security2.lib.php';\n\t\t\t$generated_password=getRandomPassword(false);\n\t\tprint '<tr><td>'.$langs->trans(\"ApiKey\").'</td>';\n\t\tprint '<td>';\n\t\tprint '<input size=\"30\" maxsize=\"32\" type=\"text\" id=\"api_key\" name=\"api_key\" value=\"'.$api_key.'\" autocomplete=\"off\">';\n\t\tif (! empty($conf->use_javascript_ajax))\n\t\t\tprint '&nbsp;'.img_picto($langs->trans('Generate'), 'refresh', 'id=\"generate_api_key\" class=\"linkobject\"');\n\t\tprint '</td></tr>';\n\t}\n\telse\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/security2.lib.php';\n\t\t// PARTIAL WORKAROUND\n\t\t$generated_fake_api_key=getRandomPassword(false);\n\t\tprint '<input type=\"hidden\" name=\"api_key\" value=\"'.$generated_fake_api_key.'\">';\n\t}\n\n\t// Administrator\n\tif (! empty($user->admin))\n\t{\n\t\tprint '<tr><td>'.$langs->trans(\"Administrator\").'</td>';\n\t\tprint '<td>';\n\t\tprint $form->selectyesno('admin',GETPOST('admin'),1);\n\n\t\tif (! empty($conf->multicompany->enabled) && ! $user->entity && empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE))\n\t\t{\n\t\t\tif (! empty($conf->use_javascript_ajax))\n\t\t\t{\n\t\t\t\tprint '<script type=\"text/javascript\">\n                            $(function() {\n                                $(\"select[name=admin]\").change(function() {\n                                     if ( $(this).val() == 0 ) {\n                                        $(\"input[name=superadmin]\")\n                                            .prop(\"disabled\", true)\n                                            .prop(\"checked\", false);\n                                        $(\"select[name=entity]\")\n                                            .prop(\"disabled\", false);\n                                     } else {\n                                        $(\"input[name=superadmin]\")\n                                            .prop(\"disabled\", false);\n                                     }\n                                });\n                                $(\"input[name=superadmin]\").change(function() {\n                                    if ( $(this).is(\":checked\") ) {\n                                        $(\"select[name=entity]\")\n                                            .prop(\"disabled\", true);\n                                    } else {\n                                        $(\"select[name=entity]\")\n                                            .prop(\"disabled\", false);\n                                    }\n                                });\n                            });\n                    </script>';\n\t\t\t}\n\t\t\t$checked=(GETPOST('superadmin', 'int')?' checked':'');\n\t\t\t$disabled=(GETPOST('superadmin', 'int')?'':' disabled');\n\t\t\tprint '<input type=\"checkbox\" name=\"superadmin\" value=\"1\"'.$checked.$disabled.' /> '.$langs->trans(\"SuperAdministrator\");\n\t\t}\n\t\tprint \"</td></tr>\\n\";\n\t}\n\n\t// Type\n\tprint '<tr><td>'.$langs->trans(\"Type\").'</td>';\n\tprint '<td>';\n\tprint $form->textwithpicto($langs->trans(\"Internal\"),$langs->trans(\"InternalExternalDesc\"), 1, 'help', '', 0, 2);\n\tprint '</td></tr>';\n\n\t// Gender\n\tprint '<tr><td>'.$langs->trans(\"Gender\").'</td>';\n\tprint '<td>';\n\t$arraygender=array('man'=>$langs->trans(\"Genderman\"),'woman'=>$langs->trans(\"Genderwoman\"));\n\tprint $form->selectarray('gender', $arraygender, GETPOST('gender'), 1);\n\tprint '</td></tr>';\n\n\t// Employee\n\t$defaultemployee=1;\n\tprint '<tr>';\n\tprint '<td>'.$langs->trans('Employee').'</td><td>';\n\tprint $form->selectyesno(\"employee\",(GETPOST('employee')!=''?GETPOST('employee'):$defaultemployee),1);\n\tprint '</td></tr>';\n\n\t// Hierarchy\n\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"HierarchicalResponsible\").'</td>';\n\tprint '<td>';\n\tprint $form->select_dolusers($object->fk_user, 'fk_user', 1, array($object->id), 0, '', 0, $conf->entity, 0, 0, '', 0, '', 'maxwidth300');\n\tprint '</td>';\n\tprint \"</tr>\\n\";\n\n\n\tprint '</table><hr><table class=\"border centpercent\">';\n\n\n\t// Address\n\tprint '<tr><td class=\"tdtop titlefieldcreate\">'.fieldLabel('Address','address').'</td>';\n\tprint '<td><textarea name=\"address\" id=\"address\" class=\"quatrevingtpercent\" rows=\"3\" wrap=\"soft\">';\n\tprint $object->address;\n\tprint '</textarea></td></tr>';\n\n\t// Zip\n\tprint '<tr><td>'.fieldLabel('Zip','zipcode').'</td><td>';\n\tprint $formcompany->select_ziptown($object->zip,'zipcode',array('town','selectcountry_id','state_id'),6);\n\tprint '</td></tr>';\n\n\t// Town\n\tprint '<tr><td>'.fieldLabel('Town','town').'</td><td>';\n\tprint $formcompany->select_ziptown($object->town,'town',array('zipcode','selectcountry_id','state_id'));\n\tprint '</td></tr>';\n\n\t// Country\n\tprint '<tr><td>'.fieldLabel('Country','selectcountry_id').'</td><td class=\"maxwidthonsmartphone\">';\n\tprint $form->select_country((GETPOST('country_id')!=''?GETPOST('country_id'):$object->country_id));\n\tif ($user->admin) print info_admin($langs->trans(\"YouCanChangeValuesForThisListFromDictionarySetup\"),1);\n\tprint '</td></tr>';\n\n\t// State\n\tif (empty($conf->global->USER_DISABLE_STATE))\n\t{\n\t\tprint '<tr><td>'.fieldLabel('State','state_id').'</td><td class=\"maxwidthonsmartphone\">';\n\t\tprint $formcompany->select_state($object->state_id,$object->country_code, 'state_id');\n\t\tprint '</td></tr>';\n\t}\n\n\t// Tel\n\tprint '<tr><td>'.$langs->trans(\"PhonePro\").'</td>';\n\tprint '<td>';\n\tif (! empty($ldap_phone))\n\t{\n\t\tprint '<input type=\"hidden\" name=\"office_phone\" value=\"'.$ldap_phone.'\">';\n\t\tprint $ldap_phone;\n\t}\n\telse\n\t{\n\t\tprint '<input size=\"20\" type=\"text\" name=\"office_phone\" value=\"'.GETPOST('office_phone').'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// Tel portable\n\tprint '<tr><td>'.$langs->trans(\"PhoneMobile\").'</td>';\n\tprint '<td>';\n\tif (! empty($ldap_mobile))\n\t{\n\t\tprint '<input type=\"hidden\" name=\"user_mobile\" value=\"'.$ldap_mobile.'\">';\n\t\tprint $ldap_mobile;\n\t}\n\telse\n\t{\n\t\tprint '<input size=\"20\" type=\"text\" name=\"user_mobile\" value=\"'.GETPOST('user_mobile').'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// Fax\n\tprint '<tr><td>'.$langs->trans(\"Fax\").'</td>';\n\tprint '<td>';\n\tif (! empty($ldap_fax))\n\t{\n\t\tprint '<input type=\"hidden\" name=\"office_fax\" value=\"'.$ldap_fax.'\">';\n\t\tprint $ldap_fax;\n\t}\n\telse\n\t{\n\t\tprint '<input size=\"20\" type=\"text\" name=\"office_fax\" value=\"'.GETPOST('office_fax').'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// Skype\n\tif (! empty($conf->skype->enabled))\n\t{\n\t\tprint '<tr><td>'.$langs->trans(\"Skype\").'</td>';\n\t\tprint '<td>';\n\t\tif (! empty($ldap_skype))\n\t\t{\n\t\t\tprint '<input type=\"hidden\" name=\"skype\" value=\"'.$ldap_skype.'\">';\n\t\t\tprint $ldap_skype;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprint '<input class=\"maxwidth200\" type=\"text\" name=\"skype\" value=\"'.GETPOST('skype').'\">';\n\t\t}\n\t\tprint '</td></tr>';\n\t}\n\n\t// EMail\n\tprint '<tr><td'.(! empty($conf->global->USER_MAIL_REQUIRED)?' class=\"fieldrequired\"':'').'>'.$langs->trans(\"EMail\").'</td>';\n\tprint '<td>';\n\tif (! empty($ldap_mail))\n\t{\n\t\tprint '<input type=\"hidden\" name=\"email\" value=\"'.$ldap_mail.'\">';\n\t\tprint $ldap_mail;\n\t}\n\telse\n\t{\n\t\tprint '<input size=\"40\" type=\"text\" name=\"email\" value=\"'.GETPOST('email').'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// Accountancy code\n\tif ($conf->accounting->enabled)\n\t{\n\t\tprint '<tr><td>'.$langs->trans(\"AccountancyCode\").'</td>';\n\t\tprint '<td>';\n\t\tprint '<input size=\"30\" type=\"text\" name=\"accountancy_code\" value=\"'.GETPOST('accountancy_code').'\">';\n\t\tprint '</td></tr>';\n\t}\n\n\t// User color\n\tif (! empty($conf->agenda->enabled))\n\t{\n\t\tprint '<tr><td>'.$langs->trans(\"ColorUser\").'</td>';\n\t\tprint '<td>';\n\t\tprint $formother->selectColor(GETPOST('color')?GETPOST('color'):$object->color, 'color', null, 1, '', 'hideifnotset');\n\t\tprint '</td></tr>';\n\t}\n\n\t// Categories\n\tif (! empty($conf->categorie->enabled)  && ! empty($user->rights->categorie->lire))\n\t{\n\t\tprint '<tr><td>' . fieldLabel('Categories', 'usercats') . '</td><td colspan=\"3\">';\n\t\t$cate_arbo = $form->select_all_categories('user', null, 'parent', null, null, 1);\n\t\tprint $form->multiselectarray('usercats', $cate_arbo, GETPOST('usercats', 'array'), null, null, null,\n\t\t\tnull, '90%' );\n\t\tprint \"</td></tr>\";\n\t}\n\n\t// Multicompany\n\tif (! empty($conf->multicompany->enabled) && is_object($mc))\n\t{\n\t\t// This is now done with hook formObjectOptions. Keep this code for backward compatibility with old multicompany module\n\t\tif (! method_exists($mc, 'formObjectOptions'))\n\t\t{\n\t\t\tif (empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE) && $conf->entity == 1 && $user->admin && ! $user->entity)\t// condition must be same for create and edit mode\n\t\t\t{\n\t\t\t\t print \"<tr>\".'<td>'.$langs->trans(\"Entity\").'</td>';\n\t\t\t\t print \"<td>\".$mc->select_entities($conf->entity);\n\t\t\t\t print \"</td></tr>\\n\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t print '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\" />';\n\t\t\t}\n\t\t }\n\t}\n\n\t// Other attributes\n\t$parameters=array('objectsrc' => $objectsrc, 'colspan' => ' colspan=\"3\"');\n\t$reshook=$hookmanager->executeHooks('formObjectOptions',$parameters,$object,$action);    // Note that $action and $object may have been modified by hook\n\tprint $hookmanager->resPrint;\n\tif (empty($reshook))\n\t{\n\t\tprint $object->showOptionals($extrafields,'edit');\n\t}\n\n\t// Note\n\tprint '<tr><td class=\"tdtop\">';\n\tprint $langs->trans(\"Note\");\n\tprint '</td><td>';\n\trequire_once DOL_DOCUMENT_ROOT.'/core/class/doleditor.class.php';\n\t$doleditor=new DolEditor('note','','',120,'dolibarr_notes','',false,true,$conf->global->FCKEDITOR_ENABLE_SOCIETE,ROWS_3,'90%');\n\t$doleditor->Create();\n\tprint \"</td></tr>\\n\";\n\n\t// Signature\n\tprint '<tr><td class=\"tdtop\">'.$langs->trans(\"Signature\").'</td>';\n\tprint '<td>';\n\trequire_once DOL_DOCUMENT_ROOT.'/core/class/doleditor.class.php';\n\t$doleditor=new DolEditor('signature',GETPOST('signature'),'',138,'dolibarr_notes','In',true,true,empty($conf->global->FCKEDITOR_ENABLE_USERSIGN)?0:1,ROWS_4,'90%');\n\tprint $doleditor->Create(1);\n\tprint '</td></tr>';\n\n\n\tprint '</table><hr><table class=\"border centpercent\">';\n\n\n\t// TODO Move this into tab RH (HierarchicalResponsible must be on both tab)\n\n\t// Position/Job\n\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"PostOrFunction\").'</td>';\n\tprint '<td>';\n\tprint '<input class=\"maxwidth200\" type=\"text\" name=\"job\" value=\"'.GETPOST('job').'\">';\n\tprint '</td></tr>';\n\n\n\tif ((! empty($conf->salaries->enabled) && ! empty($user->rights->salaries->read))\n\t\t|| (! empty($conf->hrm->enabled) && ! empty($user->rights->hrm->employee->read)))\n\t{\n\t\t$langs->load(\"salaries\");\n\n\t\t// THM\n\t\tprint '<tr><td>';\n\t\t$text=$langs->trans(\"THM\");\n\t\tprint $form->textwithpicto($text, $langs->trans(\"THMDescription\"), 1, 'help', 'classthm');\n\t\tprint '</td>';\n\t\tprint '<td>';\n\t\tprint '<input size=\"8\" type=\"text\" name=\"thm\" value=\"'.GETPOST('thm').'\">';\n\t\tprint '</td>';\n\t\tprint \"</tr>\\n\";\n\n\t\t// TJM\n\t\tprint '<tr><td>';\n\t\t$text=$langs->trans(\"TJM\");\n\t\tprint $form->textwithpicto($text, $langs->trans(\"TJMDescription\"), 1, 'help', 'classtjm');\n\t\tprint '</td>';\n\t\tprint '<td>';\n\t\tprint '<input size=\"8\" type=\"text\" name=\"tjm\" value=\"'.GETPOST('tjm').'\">';\n\t\tprint '</td>';\n\t\tprint \"</tr>\\n\";\n\n\t\t// Salary\n\t\tprint '<tr><td>'.$langs->trans(\"Salary\").'</td>';\n\t\tprint '<td>';\n\t\tprint '<input size=\"8\" type=\"text\" name=\"salary\" value=\"'.GETPOST('salary').'\">';\n\t\tprint '</td>';\n\t\tprint \"</tr>\\n\";\n\t}\n\n\t// Weeklyhours\n\tprint '<tr><td>'.$langs->trans(\"WeeklyHours\").'</td>';\n\tprint '<td>';\n\tprint '<input size=\"8\" type=\"text\" name=\"weeklyhours\" value=\"'.GETPOST('weeklyhours').'\">';\n\tprint '</td>';\n\tprint \"</tr>\\n\";\n\n\t// Date employment\n\tprint '<tr><td>'.$langs->trans(\"DateEmployment\").'</td>';\n\tprint '<td>';\n\techo $form->select_date(GETPOST('dateemployment'),'dateemployment',0,0,1,'form'.'dateemployment',1,0,1);\n\tprint '</td>';\n\tprint \"</tr>\\n\";\n\n\t// Date birth\n\tprint '<tr><td>'.$langs->trans(\"DateToBirth\").'</td>';\n\tprint '<td>';\n\techo $form->select_date(GETPOST('birth'),'birth',0,0,1,'createuser',1,0,1);\n\tprint '</td>';\n\tprint \"</tr>\\n\";\n\n\tprint \"</table>\\n\";\n\n \tdol_fiche_end();\n\n\tprint '<div align=\"center\">';\n\tprint '<input class=\"button\" value=\"'.$langs->trans(\"CreateUser\").'\" name=\"create\" type=\"submit\">';\n\t//print '&nbsp; &nbsp; &nbsp;';\n\t//print '<input value=\"'.$langs->trans(\"Cancel\").'\" class=\"button\" type=\"submit\" name=\"cancel\">';\n\tprint '</div>';\n\n\tprint \"</form>\";\n}\nelse\n{\n\t/* ************************************************************************** */\n\t/*                                                                            */\n\t/* View and edition                                                            */\n\t/*                                                                            */\n\t/* ************************************************************************** */\n\n\tif ($id > 0)\n\t{\n\t\t$object->fetch($id, '', '', 1);\n\t\tif ($res < 0) { dol_print_error($db,$object->error); exit; }\n\t\t$res=$object->fetch_optionals();\n\n\t\t// Check if user has rights\n\t\t$object->getrights();\n\t\tif (empty($object->nb_rights) && $object->statut != 0 && empty($object->admin)) setEventMessages($langs->trans('UserHasNoPermissions'), null, 'warnings');\n\n\t\t// Connexion ldap\n\t\t// pour recuperer passDoNotExpire et userChangePassNextLogon\n\t\tif (! empty($conf->ldap->enabled) && ! empty($object->ldap_sid))\n\t\t{\n\t\t\t$ldap = new Ldap();\n\t\t\t$result=$ldap->connect_bind();\n\t\t\tif ($result > 0)\n\t\t\t{\n\t\t\t\t$userSearchFilter = '('.$conf->global->LDAP_FILTER_CONNECTION.'('.$ldap->getUserIdentifier().'='.$object->login.'))';\n\t\t\t\t$entries = $ldap->fetch($object->login,$userSearchFilter);\n\t\t\t\tif (! $entries)\n\t\t\t\t{\n\t\t\t\t\tsetEventMessages($ldap->error, $ldap->errors, 'errors');\n\t\t\t\t}\n\n\t\t\t\t$passDoNotExpire = 0;\n\t\t\t\t$userChangePassNextLogon = 0;\n\t\t\t\t$userDisabled = 0;\n\t\t\t\t$statutUACF = '';\n\n\t\t\t\t// Check options of user account\n\t\t\t\tif (count($ldap->uacf) > 0)\n\t\t\t\t{\n\t\t\t\t\tforeach ($ldap->uacf as $key => $statut)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($key == 65536)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$passDoNotExpire = 1;\n\t\t\t\t\t\t\t$statutUACF = $statut;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$userDisabled = 1;\n\t\t\t\t\t$statutUACF = \"ACCOUNTDISABLE\";\n\t\t\t\t}\n\n\t\t\t\tif ($ldap->pwdlastset == 0)\n\t\t\t\t{\n\t\t\t\t\t$userChangePassNextLogon = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Show tabs\n\t\tif ($mode == 'employee') // For HRM module development\n\t\t{\n\t\t\t$title = $langs->trans(\"Employee\");\n\t\t\t$linkback = '<a href=\"'.DOL_URL_ROOT.'/hrm/employee/list.php?restore_lastsearch_values=1\">'.$langs->trans(\"BackToList\").'</a>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$title = $langs->trans(\"User\");\n\t\t\t$linkback = '';\n\n\t\t\tif ($user->rights->user->user->lire || $user->admin) {\n\t\t\t\t$linkback = '<a href=\"'.DOL_URL_ROOT.'/user/list.php?restore_lastsearch_values=1\">'.$langs->trans(\"BackToList\").'</a>';\n\t\t\t}\n\t\t}\n\n\t\t$head = user_prepare_head($object);\n\n\t\t/*\n         * Confirmation reinitialisation mot de passe\n         */\n\t\tif ($action == 'password')\n\t\t{\n\t\t\tprint $form->formconfirm($_SERVER['PHP_SELF'].\"?id=$object->id\",$langs->trans(\"ReinitPassword\"),$langs->trans(\"ConfirmReinitPassword\",$object->login),\"confirm_password\", '', 0, 1);\n\t\t}\n\n\t\t/*\n         * Confirmation envoi mot de passe\n         */\n\t\tif ($action == 'passwordsend')\n\t\t{\n\t\t\tprint $form->formconfirm($_SERVER['PHP_SELF'].\"?id=$object->id\",$langs->trans(\"SendNewPassword\"),$langs->trans(\"ConfirmSendNewPassword\",$object->login),\"confirm_passwordsend\", '', 0, 1);\n\t\t}\n\n\t\t/*\n         * Confirm deactivation\n         */\n\t\tif ($action == 'disable')\n\t\t{\n\t\t\tprint $form->formconfirm($_SERVER['PHP_SELF'].\"?id=$object->id\",$langs->trans(\"DisableAUser\"),$langs->trans(\"ConfirmDisableUser\",$object->login),\"confirm_disable\", '', 0, 1);\n\t\t}\n\n\t\t/*\n         * Confirm activation\n         */\n\t\tif ($action == 'enable')\n\t\t{\n\t\t\tprint $form->formconfirm($_SERVER['PHP_SELF'].\"?id=$object->id\",$langs->trans(\"EnableAUser\"),$langs->trans(\"ConfirmEnableUser\",$object->login),\"confirm_enable\", '', 0, 1);\n\t\t}\n\n\t\t/*\n         * Confirmation suppression\n         */\n\t\tif ($action == 'delete')\n\t\t{\n\t\t\tprint $form->formconfirm($_SERVER['PHP_SELF'].\"?id=$object->id\",$langs->trans(\"DeleteAUser\"),$langs->trans(\"ConfirmDeleteUser\",$object->login),\"confirm_delete\", '', 0, 1);\n\t\t}\n\n\t\t/*\n         * Fiche en mode visu\n         */\n\t\tif ($action != 'edit')\n\t\t{\n\t\t\tdol_fiche_head($head, 'user', $title, -1, 'user');\n\n\t\t\tdol_banner_tab($object,'id',$linkback,$user->rights->user->user->lire || $user->admin);\n\n\t\t\tprint '<div class=\"fichecenter\">';\n\t\t\tprint '<div class=\"fichehalfleft\">';\n\n\t\t\tprint '<div class=\"underbanner clearboth\"></div>';\n\t\t\tprint '<table class=\"border tableforfield\" width=\"100%\">';\n\n\t\t\t// Login\n\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"Login\").'</td>';\n\t\t\tif (! empty($object->ldap_sid) && $object->statut==0)\n\t\t\t{\n\t\t\t\tprint '<td class=\"error\">'.$langs->trans(\"LoginAccountDisableInDolibarr\").'</td>';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<td>'.$object->login.'</td>';\n\t\t\t}\n\t\t\tprint '</tr>'.\"\\n\";\n\n\t\t\t// Password\n\t\t\tprint '<tr><td>'.$langs->trans(\"Password\").'</td>';\n\n\t\t\tprint '<td>';\n\t\t\t$valuetoshow='';\n\t\t\tif (preg_match('/ldap/',$dolibarr_main_authentication))\n\t\t\t{\n\t\t\t\tif (! empty($object->ldap_sid))\n\t\t\t\t{\n\t\t\t\t\tif ($passDoNotExpire)\n\t\t\t\t\t{\n\t\t\t\t\t\t$valuetoshow.=($valuetoshow?(' '.$langs->trans(\"or\").' '):'').$langs->trans(\"LdapUacf_\".$statutUACF);\n\t\t\t\t\t}\n\t\t\t\t\telse if($userChangePassNextLogon)\n\t\t\t\t\t{\n\t\t\t\t\t\t$valuetoshow.=($valuetoshow?(' '.$langs->trans(\"or\").' '):'').'<span class=\"warning\">'.$langs->trans(\"UserMustChangePassNextLogon\",$ldap->domainFQDN).'</span>';\n\t\t\t\t\t}\n\t\t\t\t\telse if($userDisabled)\n\t\t\t\t\t{\n\t\t\t\t\t\t$valuetoshow.=($valuetoshow?(' '.$langs->trans(\"or\").' '):'').'<span class=\"warning\">'.$langs->trans(\"LdapUacf_\".$statutUACF,$ldap->domainFQDN).'</span>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$valuetoshow.=($valuetoshow?(' '.$langs->trans(\"or\").' '):'').$langs->trans(\"PasswordOfUserInLDAP\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$valuetoshow.=($valuetoshow?(' '.$langs->trans(\"or\").' '):'').$langs->trans(\"PasswordOfUserInLDAP\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (preg_match('/http/',$dolibarr_main_authentication))\n\t\t\t{\n\t\t\t\t$valuetoshow.=($valuetoshow?(' '.$langs->trans(\"or\").' '):'').$langs->trans(\"HTTPBasicPassword\");\n\t\t\t}\n\t\t\tif (preg_match('/dolibarr/',$dolibarr_main_authentication))\n\t\t\t{\n\t\t\t\tif ($object->pass) $valuetoshow.= preg_replace('/./i','*',$object->pass);\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif ($user->admin) $valuetoshow.= ($valuetoshow?(' '.$langs->trans(\"or\").' '):'').$langs->trans(\"Crypted\").': '.$object->pass_indatabase_crypted;\n\t\t\t\t\telse $valuetoshow.= ($valuetoshow?(' '.$langs->trans(\"or\").' '):'').$langs->trans(\"Hidden\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Other form for user password\n\t\t\t$parameters=array('valuetoshow' => $valuetoshow);\n\t\t\t$reshook=$hookmanager->executeHooks('printUserPasswordField',$parameters,$object,$action);    // Note that $action and $object may have been modified by hook\n\t\t\tif ($reshook > 0) $valuetoshow=$hookmanager->resPrint;\t// to replace\n\t\t\telse $valuetoshow.=$hookmanager->resPrint;\t\t\t\t// to add\n\n\t\t\tprint $valuetoshow;\n\t\t\tprint \"</td>\";\n\t\t\tprint '</tr>'.\"\\n\";\n\n\t\t\t// API key\n\t\t\tif (! empty($conf->api->enabled) && $user->admin) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"ApiKey\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif (! empty($object->api_key)) print preg_replace('/./','*',$object->api_key);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Administrator\n\t\t\tprint '<tr><td>'.$langs->trans(\"Administrator\").'</td><td>';\n\t\t\tif (! empty($conf->multicompany->enabled) && $object->admin && ! $object->entity)\n\t\t\t{\n\t\t\t\tprint $form->textwithpicto(yn($object->admin),$langs->trans(\"SuperAdministratorDesc\"),1,\"superadmin\");\n\t\t\t}\n\t\t\telse if ($object->admin)\n\t\t\t{\n\t\t\t\tprint $form->textwithpicto(yn($object->admin),$langs->trans(\"AdministratorDesc\"),1,\"admin\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint yn($object->admin);\n\t\t\t}\n\t\t\tprint '</td></tr>'.\"\\n\";\n\n\t\t\t// Type\n\t\t\tprint '<tr><td>';\n\t\t\t$text=$langs->trans(\"Type\");\n\t\t\tprint $form->textwithpicto($text, $langs->trans(\"InternalExternalDesc\"));\n\t\t\tprint '</td><td>';\n\t\t\t$type=$langs->trans(\"Internal\");\n\t\t\tif ($object->societe_id > 0) $type=$langs->trans(\"External\");\n\t\t\tprint $type;\n\t\t\tif ($object->ldap_sid) print ' ('.$langs->trans(\"DomainUser\").')';\n\t\t\tprint '</td></tr>'.\"\\n\";\n\n\t\t\t// Ldap sid\n\t\t\tif ($object->ldap_sid)\n\t\t\t{\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Type\").'</td><td>';\n\t\t\t\tprint $langs->trans(\"DomainUser\",$ldap->domainFQDN);\n\t\t\t\tprint '</td></tr>'.\"\\n\";\n\t\t\t}\n\n\t\t\t// Gender\n\t\t\tprint '<tr><td>'.$langs->trans(\"Gender\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($object->gender) print $langs->trans(\"Gender\".$object->gender);\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Employee\n\t\t\tprint '<tr><td>'.$langs->trans(\"Employee\").'</td><td colspan=\"2\">';\n\t\t\tprint yn($object->employee);\n\t\t\tprint '</td></tr>'.\"\\n\";\n\n\t\t\t// TODO Move this into tab RH, visible when salarie or RH is visible (HierarchicalResponsible must be on both tab)\n\n\t\t\t// Hierarchy\n\t\t\tprint '<tr><td>'.$langs->trans(\"HierarchicalResponsible\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif (empty($object->fk_user)) print $langs->trans(\"None\");\n\t\t\telse {\n\t\t\t\t$huser=new User($db);\n\t\t\t\t$huser->fetch($object->fk_user);\n\t\t\t\tprint $huser->getNomUrl(1);\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Position/Job\n\t\t\tprint '<tr><td>'.$langs->trans(\"PostOrFunction\").'</td>';\n\t\t\tprint '<td>'.$object->job.'</td>';\n\t\t\tprint '</tr>'.\"\\n\";\n\n\t\t\t//$childids = $user->getAllChildIds(1);\n\n\t\t\tif ((! empty($conf->salaries->enabled) && ! empty($user->rights->salaries->read))\n\t\t\t\t|| (! empty($conf->hrm->enabled) && ! empty($user->rights->hrm->employee->read)))\n\t\t\t{\n            \t// Even a superior can't see this info of its subordinates wihtout $user->rights->salaries->read and $user->rights->hrm->employee->read (setting/viewing is reserverd to HR people).\n            \t// However, he can see the valuation of timesheet of its subordinates even without these permissions.\n\t\t\t\t$langs->load(\"salaries\");\n\n\t\t\t\t// THM\n\t\t\t\tprint '<tr><td>';\n\t\t\t\t$text=$langs->trans(\"THM\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"THMDescription\"), 1, 'help', 'classthm');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint ($object->thm!=''?price($object->thm,'',$langs,1,-1,-1,$conf->currency):'');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\n\t\t\t\t// TJM\n\t\t\t\tprint '<tr><td>';\n\t\t\t\t$text=$langs->trans(\"TJM\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"TJMDescription\"), 1, 'help', 'classtjm');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint ($object->tjm!=''?price($object->tjm,'',$langs,1,-1,-1,$conf->currency):'');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\n\t\t\t\t// Salary\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Salary\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint ($object->salary!=''?price($object->salary,'',$langs,1,-1,-1,$conf->currency):'');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Weeklyhours\n\t\t\tprint '<tr><td>'.$langs->trans(\"WeeklyHours\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint price2num($object->weeklyhours);\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Date employment\n\t\t\tprint '<tr><td>'.$langs->trans(\"DateEmployment\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint dol_print_date($object->dateemployment, 'day');\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Date of birth\n\t\t\tprint '<tr><td>'.$langs->trans(\"DateToBirth\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint dol_print_date($object->birth, 'day');\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Accountancy code\n\t\t\tif ($conf->accounting->enabled)\n\t\t\t{\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"AccountancyCode\").'</td>';\n\t\t\t\tprint '<td>'.$object->accountancy_code.'</td></tr>';\n\t\t\t}\n\n\t\t\tprint '</table>';\n\n\t\t\tprint '</div>';\n\t\t\tprint '<div class=\"fichehalfright\"><div class=\"ficheaddleft\">';\n\n\t\t\tprint '<div class=\"underbanner clearboth\"></div>';\n\t\t\tprint '<table class=\"border tableforfield\" width=\"100%\">';\n\n\t\t\t// Color user\n\t\t\tif (! empty($conf->agenda->enabled))\n\t\t\t{\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"ColorUser\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint $formother->showColor($object->color, '');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Categories\n\t\t\tif (! empty($conf->categorie->enabled)  && ! empty($user->rights->categorie->lire))\n\t\t\t{\n\t\t\t\tprint '<tr><td>' . $langs->trans( \"Categories\" ) . '</td>';\n\t\t\t\tprint '<td colspan=\"3\">';\n\t\t\t\tprint $form->showCategories( $object->id, 'user', 1 );\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\tif (isset($conf->file->main_authentication) && preg_match('/openid/',$conf->file->main_authentication) && ! empty($conf->global->MAIN_OPENIDURL_PERUSER))\n\t\t\t{\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"OpenIDURL\").'</td>';\n\t\t\t\tprint '<td>'.$object->openid.'</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"LastConnexion\").'</td>';\n\t\t\tprint '<td>'.dol_print_date($object->datelastlogin,\"dayhour\").'</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\tprint '<tr><td>'.$langs->trans(\"PreviousConnexion\").'</td>';\n\t\t\tprint '<td>'.dol_print_date($object->datepreviouslogin,\"dayhour\").'</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t    // Multicompany\n\t\t\tif (! empty($conf->multicompany->enabled) && is_object($mc))\n\t\t\t{\n\t\t\t\t// This is now done with hook formObjectOptions. Keep this code for backward compatibility with old multicompany module\n\t\t\t\tif (! method_exists($mc, 'formObjectOptions'))\n\t\t\t\t{\n\t\t\t\t     if (! empty($conf->multicompany->enabled) && empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE) && $conf->entity == 1 && $user->admin && ! $user->entity)\n\t\t\t\t     {\n\t\t\t\t     \tprint '<tr><td>' . $langs->trans(\"Entity\") . '</td><td>';\n\t\t\t\t     \tif (empty($object->entity)) {\n\t\t\t\t     \t\tprint $langs->trans(\"AllEntities\");\n\t\t\t\t     \t} else {\n\t\t\t\t     \t\t$mc->getInfo($object->entity);\n\t\t\t\t     \t\tprint $mc->label;\n\t\t\t\t     \t}\n\t\t\t\t     \tprint \"</td></tr>\\n\";\n\t\t\t\t     }\n\t\t\t     }\n\t\t\t}\n\n\t\t\t// Other attributes\n\t\t\tinclude DOL_DOCUMENT_ROOT . '/core/tpl/extrafields_view.tpl.php';\n\n\t\t\t// Company / Contact\n\t\t\tif (! empty($conf->societe->enabled))\n\t\t\t{\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"LinkToCompanyContact\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif (isset($object->socid) && $object->socid > 0)\n\t\t\t\t{\n\t\t\t\t\t$societe = new Societe($db);\n\t\t\t\t\t$societe->fetch($object->socid);\n\t\t\t\t\tprint $societe->getNomUrl(1,'');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprint $langs->trans(\"ThisUserIsNot\");\n\t\t\t\t}\n\t\t\t\tif (! empty($object->contactid))\n\t\t\t\t{\n\t\t\t\t\t$contact = new Contact($db);\n\t\t\t\t\t$contact->fetch($object->contactid);\n\t\t\t\t\tif ($object->socid > 0) print ' / ';\n\t\t\t\t\telse print '<br>';\n\t\t\t\t\tprint '<a href=\"'.DOL_URL_ROOT.'/contact/card.php?id='.$object->contactid.'\">'.img_object($langs->trans(\"ShowContact\"),'contact').' '.dol_trunc($contact->getFullName($langs),32).'</a>';\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '</tr>'.\"\\n\";\n\t\t\t}\n\n\t\t\t// Module Adherent\n\t\t\tif (! empty($conf->adherent->enabled))\n\t\t\t{\n\t\t\t\t$langs->load(\"members\");\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"LinkedToDolibarrMember\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($object->fk_member)\n\t\t\t\t{\n\t\t\t\t\t$adh=new Adherent($db);\n\t\t\t\t\t$adh->fetch($object->fk_member);\n\t\t\t\t\t$adh->ref=$adh->getFullname($langs);\t// Force to show login instead of id\n\t\t\t\t\tprint $adh->getNomUrl(1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprint $langs->trans(\"UserNotLinkedToMember\");\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '</tr>'.\"\\n\";\n\t\t\t}\n\n\t\t\t// Signature\n\t\t\tprint '<tr><td class=\"tdtop\">'.$langs->trans('Signature').'</td><td>';\n\t\t\tprint dol_htmlentitiesbr($object->signature);\n\t\t\tprint \"</td></tr>\\n\";\n\n\t\t\tprint \"</table>\\n\";\n\t\t\tprint '</div>';\n\n\t\t\tprint '</div></div>';\n\t\t\tprint '<div style=\"clear:both\"></div>';\n\n\n\t\t\tdol_fiche_end();\n\n\n\t\t\t/*\n             * Buttons actions\n             */\n\n\t\t\tprint '<div class=\"tabsAction\">';\n\n\t\t\t$parameters=array();\n\t\t\t$reshook=$hookmanager->executeHooks('addMoreActionsButtons',$parameters,$object,$action);    // Note that $action and $object may have been modified by hook\n\t\t\tif (empty($reshook))\n\t\t\t{\n\t\t\t\tif (! empty($object->email))\n\t\t\t\t{\n\t\t\t\t\t$langs->load(\"mails\");\n\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=presend&amp;mode=init#presend\">'.$langs->trans('SendMail').'</a></div>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$langs->load(\"mails\");\n\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"NoEMail\")).'\">'.$langs->trans('SendMail').'</a></div>';\n\t\t\t\t}\n\n\t\t\t\tif ($caneditfield && (empty($conf->multicompany->enabled) || ! $user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1)))\n\t\t\t\t{\n\t\t\t\t\tif (! empty($conf->global->MAIN_ONLY_LOGIN_ALLOWED))\n\t\t\t\t\t{\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"DisabledInMonoUserMode\")).'\">'.$langs->trans(\"Modify\").'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=edit\">'.$langs->trans(\"Modify\").'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telseif ($caneditpassword && ! $object->ldap_sid &&\n\t\t\t\t(empty($conf->multicompany->enabled) || ! $user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1)))\n\t\t\t\t{\n\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=edit\">'.$langs->trans(\"EditPassword\").'</a></div>';\n\t\t\t\t}\n\n\t\t\t\t// Si on a un gestionnaire de generation de mot de passe actif\n\t\t\t\tif ($conf->global->USER_PASSWORD_GENERATED != 'none')\n\t\t\t\t{\n\t\t\t\t\tif ($object->statut == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"UserDisabled\")).'\">'.$langs->trans(\"ReinitPassword\").'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t\telseif (($user->id != $id && $caneditpassword) && $object->login && !$object->ldap_sid &&\n\t\t\t\t\t((empty($conf->multicompany->enabled) && $object->entity == $user->entity) || ! $user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1)))\n\t\t\t\t\t{\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=password\">'.$langs->trans(\"ReinitPassword\").'</a></div>';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($object->statut == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"UserDisabled\")).'\">'.$langs->trans(\"SendNewPassword\").'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t\telse if (($user->id != $id && $caneditpassword) && $object->login && !$object->ldap_sid &&\n\t\t\t\t\t((empty($conf->multicompany->enabled) && $object->entity == $user->entity) || ! $user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1)))\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($object->email) print '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=passwordsend\">'.$langs->trans(\"SendNewPassword\").'</a></div>';\n\t\t\t\t\t\telse print '<div class=\"inline-block divButAction\"><a class=\"butActionRefused\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"NoEMail\")).'\">'.$langs->trans(\"SendNewPassword\").'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Activer\n\t\t\t\tif ($user->id <> $id && $candisableuser && $object->statut == 0 &&\n\t\t\t\t((empty($conf->multicompany->enabled) && $object->entity == $user->entity) || ! $user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1)))\n\t\t\t\t{\n\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=enable\">'.$langs->trans(\"Reactivate\").'</a></div>';\n\t\t\t\t}\n\t\t\t\t// Desactiver\n\t\t\t\tif ($user->id <> $id && $candisableuser && $object->statut == 1 &&\n\t\t\t\t((empty($conf->multicompany->enabled) && $object->entity == $user->entity) || ! $user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1)))\n\t\t\t\t{\n\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionDelete\" href=\"'.$_SERVER['PHP_SELF'].'?action=disable&amp;id='.$object->id.'\">'.$langs->trans(\"DisableUser\").'</a></div>';\n\t\t\t\t}\n\t\t\t\t// Delete\n\t\t\t\tif ($user->id <> $id && $candisableuser &&\n\t\t\t\t((empty($conf->multicompany->enabled) && $object->entity == $user->entity) || ! $user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1)))\n\t\t\t\t{\n\t\t\t\t\tif ($user->admin || ! $object->admin) // If user edited is admin, delete is possible on for an admin\n\t\t\t\t\t{\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionDelete\" href=\"'.$_SERVER['PHP_SELF'].'?action=delete&amp;id='.$object->id.'\">'.$langs->trans(\"DeleteUser\").'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"MustBeAdminToDeleteOtherAdmin\")).'\">'.$langs->trans(\"DeleteUser\").'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprint \"</div>\\n\";\n\n\n\n\t\t\t//Select mail models is same action as presend\n\t\t\tif (GETPOST('modelselected')) $action = 'presend';\n\n\t\t\t// Presend form\n\t\t\t$modelmail='user';\n\t\t\t$defaulttopic='Information';\n\t\t\t$diroutput = $conf->user->dir_output;\n\t\t\t$trackid = 'use'.$object->id;\n\n\t\t\tinclude DOL_DOCUMENT_ROOT.'/core/tpl/card_presend.tpl.php';\n\n\t\t\tif ($action != 'presend' && $action != 'send')\n\t\t\t{\n\t\t\t\t/*\n                 * List of groups of user\n                 */\n\n\t\t\t\tif ($canreadgroup)\n\t\t\t\t{\n\t\t\t\t\tprint load_fiche_titre($langs->trans(\"ListOfGroupsForUser\"),'','');\n\n\t\t\t\t\t// On selectionne les groupes auquel fait parti le user\n\t\t\t\t\t$exclude = array();\n\n\t\t\t\t\t$usergroup=new UserGroup($db);\n\t\t\t\t\t$groupslist = $usergroup->listGroupsForUser($object->id);\n\n\t\t\t\t\tif (! empty($groupslist))\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach($groupslist as $groupforuser)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$exclude[]=$groupforuser->id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($caneditgroup)\n\t\t\t\t\t{\n\t\t\t\t\t\tprint '<form action=\"'.$_SERVER['PHP_SELF'].'?id='.$id.'\" method=\"POST\">'.\"\\n\";\n\t\t\t\t\t\tprint '<input type=\"hidden\" name=\"token\" value=\"'.$_SESSION['newtoken'].'\" />';\n\t\t\t\t\t\tprint '<input type=\"hidden\" name=\"action\" value=\"addgroup\" />';\n\t\t\t\t\t}\n\n\t\t\t\t\tprint '<table class=\"noborder\" width=\"100%\">'.\"\\n\";\n\n\t\t\t\t\t// Other form for add user to group\n\t\t\t\t\t$parameters=array('caneditgroup' => $caneditgroup, 'groupslist' => $groupslist, 'exclude' => $exclude);\n\t\t\t\t\t$reshook=$hookmanager->executeHooks('formAddUserToGroup',$parameters,$object,$action);    // Note that $action and $object may have been modified by hook\n\t\t\t\t\tprint $hookmanager->resPrint;\n\n\t\t\t\t\tif (empty($reshook))\n\t\t\t\t\t{\n\t\t\t\t\t\tprint '<tr class=\"liste_titre\"><th class=\"liste_titre\">'.$langs->trans(\"Groups\").'</th>'.\"\\n\";\n\t\t\t\t\t\tprint '<th class=\"liste_titre\" align=\"right\">';\n\t\t\t\t\t\tif ($caneditgroup)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprint $form->select_dolgroups('', 'group', 1, $exclude, 0, '', '', $object->entity);\n\t\t\t\t\t\t\tprint ' &nbsp; ';\n\t\t\t\t\t\t\tprint '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\" />';\n\t\t\t\t\t\t\tprint '<input type=\"submit\" class=\"button\" value=\"'.$langs->trans(\"Add\").'\" />';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint '</th></tr>'.\"\\n\";\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Groups assigned to user\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif (! empty($groupslist))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach($groupslist as $group)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tprint '<tr class=\"oddeven\">';\n\t\t\t\t\t\t\t\tprint '<td>';\n\t\t\t\t\t\t\t\tif ($caneditgroup)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tprint '<a href=\"'.DOL_URL_ROOT.'/user/group/card.php?id='.$group->id.'\">'.img_object($langs->trans(\"ShowGroup\"),\"group\").' '.$group->name.'</a>';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tprint img_object($langs->trans(\"ShowGroup\"),\"group\").' '.$group->name;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tprint '</td>';\n\t\t\t\t\t\t\t\tprint '<td align=\"right\">';\n\t\t\t\t\t\t\t\tif ($caneditgroup)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tprint '<a href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=removegroup&amp;group='.$group->id.'\">';\n\t\t\t\t\t\t\t\t\tprint img_picto($langs->trans(\"RemoveFromGroup\"), 'unlink');\n\t\t\t\t\t\t\t\t\tprint '</a>';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tprint \"&nbsp;\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tprint \"</td></tr>\\n\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprint '<tr class=\"oddeven\"><td colspan=\"3\" class=\"opacitymedium\">'.$langs->trans(\"None\").'</td></tr>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tprint \"</table>\";\n\n\t\t\t\t\tif ($caneditgroup)\n\t\t\t\t\t{\n\t\t\t\t\t\tprint '</form>';\n\t\t\t\t\t}\n\t\t\t\t\tprint \"<br>\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/*\n         * Fiche en mode edition\n         */\n\t\tif ($action == 'edit' && ($canedituser || $caneditfield || $caneditpassword || ($user->id == $object->id)))\n\t\t{\n\t\t\tprint '<form action=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'\" method=\"POST\" name=\"updateuser\" enctype=\"multipart/form-data\">';\n\t\t\tprint '<input type=\"hidden\" name=\"token\" value=\"'.$_SESSION['newtoken'].'\">';\n\t\t\tprint '<input type=\"hidden\" name=\"action\" value=\"update\">';\n\t\t\tprint '<input type=\"hidden\" name=\"entity\" value=\"'.$object->entity.'\">';\n\n\t\t\tdol_fiche_head($head, 'user', $title, 0, 'user');\n\n\t\t\tprint '<table width=\"100%\" class=\"border\">';\n\n\t\t\t// Ref/ID\n\t\t\tif (! empty($conf->global->MAIN_SHOW_TECHNICAL_ID))\n\t\t\t{\n\t\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"Ref\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint $object->id;\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '</tr>';\n\t\t\t}\n\n\t\t\t// Lastname\n\t\t\tprint \"<tr>\";\n\t\t\tprint '<td class=\"titlefield fieldrequired\">'.$langs->trans(\"Lastname\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield && !$object->ldap_sid)\n\t\t\t{\n\t\t\t\tprint '<input class=\"minwidth100\" type=\"text\" class=\"flat\" name=\"lastname\" value=\"'.$object->lastname.'\">';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<input type=\"hidden\" name=\"lastname\" value=\"'.$object->lastname.'\">';\n\t\t\t\tprint $object->lastname;\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint '</tr>';\n\n\t\t\t// Firstname\n\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"Firstname\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield && !$object->ldap_sid)\n\t\t\t{\n\t\t\t\tprint '<input class=\"minwidth100\" type=\"text\" class=\"flat\" name=\"firstname\" value=\"'.$object->firstname.'\">';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<input type=\"hidden\" name=\"firstname\" value=\"'.$object->firstname.'\">';\n\t\t\t\tprint $object->firstname;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Login\n\t\t\tprint \"<tr>\".'<td><span class=\"fieldrequired\">'.$langs->trans(\"Login\").'</span></td>';\n\t\t\tprint '<td>';\n\t\t\tif ($user->admin  && !$object->ldap_sid)\n\t\t\t{\n\t\t\t\tprint '<input size=\"12\" maxlength=\"24\" type=\"text\" class=\"flat\" name=\"login\" value=\"'.$object->login.'\">';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<input type=\"hidden\" name=\"login\" value=\"'.$object->login.'\">';\n\t\t\t\tprint $object->login;\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint '</tr>';\n\n\t\t\t// Pass\n\t\t\tprint '<tr><td>'.$langs->trans(\"Password\").'</td>';\n\t\t\tprint '<td>';\n\t\t\t$valuetoshow='';\n\t\t\tif (preg_match('/ldap/',$dolibarr_main_authentication))\n\t\t\t{\n\t\t\t\t$valuetoshow.=($valuetoshow?(' '.$langs->trans(\"or\").' '):'').$langs->trans(\"PasswordOfUserInLDAP\");\n\t\t\t}\n\t\t\tif (preg_match('/http/',$dolibarr_main_authentication))\n\t\t\t{\n\t\t\t\t$valuetoshow.=($valuetoshow?(' '.$langs->trans(\"or\").' '):'').$form->textwithpicto($text,$langs->trans(\"DolibarrInHttpAuthenticationSoPasswordUseless\",$dolibarr_main_authentication),1,'warning');\n\t\t\t}\n\t\t\tif (preg_match('/dolibarr/',$dolibarr_main_authentication))\n\t\t\t{\n\t\t\t\tif ($caneditpassword)\n\t\t\t\t{\n\t\t\t\t\t$valuetoshow.=($valuetoshow?(' '.$langs->trans(\"or\").' '):'').'<input size=\"12\" maxlength=\"32\" type=\"password\" class=\"flat\" name=\"password\" value=\"'.$object->pass.'\" autocomplete=\"new-password\">';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$valuetoshow.=($valuetoshow?(' '.$langs->trans(\"or\").' '):'').preg_replace('/./i','*',$object->pass);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Other form for user password\n\t\t\t$parameters=array('valuetoshow' => $valuetoshow, 'caneditpassword' => $caneditpassword);\n\t\t\t$reshook=$hookmanager->executeHooks('printUserPasswordField',$parameters,$object,$action);    // Note that $action and $object may have been modified by hook\n\t\t\tif ($reshook > 0) $valuetoshow=$hookmanager->resPrint;\t// to replace\n\t\t\telse $valuetoshow.=$hookmanager->resPrint;\t\t\t\t// to add\n\n\t\t\tprint $valuetoshow;\n\t\t\tprint \"</td></tr>\\n\";\n\n\t\t\t// API key\n\t\t\tif(! empty($conf->api->enabled) && $user->admin)\n\t\t\t{\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"ApiKey\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint '<input class=\"minwidth300\" maxsize=\"32\" type=\"text\" id=\"api_key\" name=\"api_key\" value=\"'.$object->api_key.'\" autocomplete=\"off\">';\n\t\t\t\tif (! empty($conf->use_javascript_ajax))\n\t\t\t\t\tprint '&nbsp;'.img_picto($langs->trans('Generate'), 'refresh', 'id=\"generate_api_key\" class=\"linkobject\"');\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Administrator\n\t\t\tprint '<tr><td>'.$langs->trans(\"Administrator\").'</td>';\n\t\t\tif ($object->socid > 0)\n\t\t\t{\n\t\t\t\t$langs->load(\"admin\");\n\t\t\t\tprint '<td>';\n\t\t\t\tprint '<input type=\"hidden\" name=\"admin\" value=\"'.$object->admin.'\">'.yn($object->admin);\n\t\t\t\tprint ' ('.$langs->trans(\"ExternalUser\").')';\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<td>';\n\t\t\t\t$nbAdmin = $user->getNbOfUsers('active','',1);\n\t\t\t\t$nbSuperAdmin = $user->getNbOfUsers('active','superadmin',1);\n\t\t\t\t//var_dump($nbAdmin);\n\t\t\t\t//var_dump($nbSuperAdmin);\n\t\t\t\tif ($user->admin\t\t\t\t\t\t\t\t// Need to be admin to allow downgrade of an admin\n\t\t\t\t&& ($user->id != $object->id)                   // Don't downgrade ourself\n\t\t\t\t&& (\n\t\t\t\t\t(empty($conf->multicompany->enabled) && $nbAdmin >= 1)\n\t\t\t\t\t|| (! empty($conf->multicompany->enabled) && ($object->entity > 0 || $nbSuperAdmin > 1))    // Don't downgrade a superadmin if alone\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tprint $form->selectyesno('admin',$object->admin,1);\n\n\t\t\t\t\tif (! empty($conf->multicompany->enabled) && ! $user->entity && empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE))\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($conf->use_javascript_ajax)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprint '<script type=\"text/javascript\">\n\t\t\t\t\t\t\t\t\t$(function() {\n\t\t\t\t\t\t\t\t\t\tvar admin = $(\"select[name=admin]\").val();\n\t\t\t\t\t\t\t\t\t\tif (admin == 0) {\n\t\t\t\t\t\t\t\t\t\t\t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", true)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"checked\", false);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif ($(\"input[name=superadmin]\").is(\":checked\")) {\n\t\t\t\t\t\t\t\t\t\t\t$(\"select[name=entity]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", true);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$(\"select[name=admin]\").change(function() {\n\t\t\t\t\t\t\t\t\t\t\t if ( $(this).val() == 0 ) {\n\t\t\t\t\t\t\t\t\t\t\t \t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", true)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"checked\", false);\n\t\t\t\t\t\t\t\t\t\t\t \t$(\"select[name=entity]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", false);\n\t\t\t\t\t\t\t\t\t\t\t } else {\n\t\t\t\t\t\t\t\t\t\t\t \t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", false);\n\t\t\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t$(\"input[name=superadmin]\").change(function() {\n\t\t\t\t\t\t\t\t\t\t\tif ( $(this).is(\":checked\")) {\n\t\t\t\t\t\t\t\t\t\t\t\t$(\"select[name=entity]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", true);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t$(\"select[name=entity]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", false);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t</script>';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$checked=(($object->admin && ! $object->entity) ? ' checked' : '');\n\t\t\t\t\t\tprint '<input type=\"checkbox\" name=\"superadmin\" value=\"1\"'.$checked.' /> '.$langs->trans(\"SuperAdministrator\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$yn = yn($object->admin);\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"admin\" value=\"'.$object->admin.'\">';\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"superadmin\" value=\"'.(empty($object->entity) ? 1 : 0).'\">';\n\t\t\t\t\tif (! empty($conf->multicompany->enabled) && empty($object->entity)) print $form->textwithpicto($yn,$langs->trans(\"DontDowngradeSuperAdmin\"),1,'warning');\n\t\t\t\t\telse print $yn;\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t   \t// Type\n\t\t   \tprint '<tr><td>'.$langs->trans(\"Type\").'</td>';\n\t\t   \tprint '<td>';\n\t\t   \tif ($user->id == $object->id || ! $user->admin)\n\t\t   \t{\n\t\t\t   \t$type=$langs->trans(\"Internal\");\n\t\t\t   \tif ($object->socid) $type=$langs->trans(\"External\");\n\t\t\t   \tprint $form->textwithpicto($type,$langs->trans(\"InternalExternalDesc\"));\n\t\t\t   \tif ($object->ldap_sid) print ' ('.$langs->trans(\"DomainUser\").')';\n\t\t   \t}\n\t\t   \telse\n\t\t\t{\n\t\t\t\t$type=0;\n\t\t\t\tif ($object->contactid) $type=$object->contactid;\n\t\t\t\tprint $form->selectcontacts(0,$type,'contactid',2,'','',1,'',false,1);\n\t\t\t   \tif ($object->ldap_sid) print ' ('.$langs->trans(\"DomainUser\").')';\n\t\t\t}\n\t\t   \tprint '</td></tr>';\n\n\t\t   \t// Gender\n\t\t   \tprint '<tr><td>'.$langs->trans(\"Gender\").'</td>';\n\t\t   \tprint '<td>';\n\t\t   \t$arraygender=array('man'=>$langs->trans(\"Genderman\"),'woman'=>$langs->trans(\"Genderwoman\"));\n\t\t   \tprint $form->selectarray('gender', $arraygender, GETPOST('gender')?GETPOST('gender'):$object->gender, 1);\n\t\t   \tprint '</td></tr>';\n\n\t\t   \t// Employee\n\t\t   \tprint '<tr>';\n\t\t   \tprint '<td>'.fieldLabel('Employee','employee',0).'</td><td>';\n\t\t   \tprint $form->selectyesno(\"employee\",$object->employee,1);\n\t\t   \tprint '</td></tr>';\n\n\t\t   \t// Hierarchy\n\t\t   \tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"HierarchicalResponsible\").'</td>';\n\t\t   \tprint '<td>';\n\t\t   \tif ($caneditfield)\n\t\t   \t{\n\t\t   \t\tprint $form->select_dolusers($object->fk_user, 'fk_user', 1, array($object->id), 0, '', 0, $object->entity, 0, 0, '', 0, '', 'maxwidth300');\n\t\t   \t}\n\t\t   \telse\n\t\t   \t{\n\t\t   \t\tprint '<input type=\"hidden\" name=\"fk_user\" value=\"'.$object->fk_user.'\">';\n\t\t   \t\t$huser=new User($db);\n\t\t   \t\t$huser->fetch($object->fk_user);\n\t\t   \t\tprint $huser->getNomUrl(1);\n\t\t   \t}\n\t\t   \tprint '</td>';\n\t\t   \tprint \"</tr>\\n\";\n\n\n\t\t   \tprint '</table><hr><table class=\"border centpercent\">';\n\n\n\t\t\t// Address\n\t\t\tprint '<tr><td class=\"tdtop titlefield\">'.fieldLabel('Address','address').'</td>';\n\t\t\tprint '<td><textarea name=\"address\" id=\"address\" class=\"quatrevingtpercent\" rows=\"3\" wrap=\"soft\">';\n\t\t\tprint $object->address;\n\t\t\tprint '</textarea></td></tr>';\n\n\t\t\t// Zip\n\t\t\tprint '<tr><td>'.fieldLabel('Zip','zipcode').'</td><td>';\n\t\t\tprint $formcompany->select_ziptown($object->zip, 'zipcode', array('town', 'selectcountry_id', 'state_id'), 6);\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Town\n\t\t\tprint '<tr><td>'.fieldLabel('Town','town').'</td><td>';\n\t\t\tprint $formcompany->select_ziptown($object->town, 'town', array('zipcode', 'selectcountry_id', 'state_id'));\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Country\n\t\t\tprint '<tr><td>'.fieldLabel('Country','selectcounty_id').'</td><td>';\n\t\t\tprint $form->select_country((GETPOST('country_id')!=''?GETPOST('country_id'):$object->country_id),'country_id');\n\t\t\tif ($user->admin) print info_admin($langs->trans(\"YouCanChangeValuesForThisListFromDictionarySetup\"),1);\n\t\t\tprint '</td></tr>';\n\n\t\t\t// State\n\t\t\tif (empty($conf->global->USER_DISABLE_STATE))\n\t\t\t{\n\t\t\t\tprint '<tr><td class=\"tdoverflow\">'.fieldLabel('State','state_id').'</td><td>';\n\t\t\t\tprint $formcompany->select_state($object->state_id,$object->country_code, 'state_id');\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Tel pro\n\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"PhonePro\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield  && empty($object->ldap_sid))\n\t\t\t{\n\t\t\t\tprint '<input size=\"20\" type=\"text\" name=\"office_phone\" class=\"flat\" value=\"'.$object->office_phone.'\">';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<input type=\"hidden\" name=\"office_phone\" value=\"'.$object->office_phone.'\">';\n\t\t\t\tprint $object->office_phone;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Tel mobile\n\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"PhoneMobile\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield && empty($object->ldap_sid))\n\t\t\t{\n\t\t\t\tprint '<input size=\"20\" type=\"text\" name=\"user_mobile\" class=\"flat\" value=\"'.$object->user_mobile.'\">';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<input type=\"hidden\" name=\"user_mobile\" value=\"'.$object->user_mobile.'\">';\n\t\t\t\tprint $object->user_mobile;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Fax\n\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"Fax\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield  && empty($object->ldap_sid))\n\t\t\t{\n\t\t\t\tprint '<input size=\"20\" type=\"text\" name=\"office_fax\" class=\"flat\" value=\"'.$object->office_fax.'\">';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<input type=\"hidden\" name=\"office_fax\" value=\"'.$object->office_fax.'\">';\n\t\t\t\tprint $object->office_fax;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Skype\n\t\t\tif (! empty($conf->skype->enabled))\n\t\t\t{\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Skype\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($caneditfield  && empty($object->ldap_sid))\n\t\t\t\t{\n\t\t\t\t\tprint '<input size=\"40\" type=\"text\" name=\"skype\" class=\"flat\" value=\"'.$object->skype.'\">';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"skype\" value=\"'.$object->skype.'\">';\n\t\t\t\t\tprint $object->skype;\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// EMail\n\t\t\tprint \"<tr>\".'<td'.(! empty($conf->global->USER_MAIL_REQUIRED)?' class=\"fieldrequired\"':'').'>'.$langs->trans(\"EMail\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield  && empty($object->ldap_sid))\n\t\t\t{\n\t\t\t\tprint '<input class=\"minwidth100\" type=\"text\" name=\"email\" class=\"flat\" value=\"'.$object->email.'\">';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<input type=\"hidden\" name=\"email\" value=\"'.$object->email.'\">';\n\t\t\t\tprint $object->email;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// OpenID url\n\t\t\tif (isset($conf->file->main_authentication) && preg_match('/openid/',$conf->file->main_authentication) && ! empty($conf->global->MAIN_OPENIDURL_PERUSER))\n\t\t\t{\n\t\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"OpenIDURL\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($caneditfield)\n\t\t\t\t{\n\t\t\t\t\tprint '<input class=\"minwidth100\" type=\"url\" name=\"openid\" class=\"flat\" value=\"'.$object->openid.'\">';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"openid\" value=\"'.$object->openid.'\">';\n\t\t\t\t\tprint $object->openid;\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\tprint '</table><hr><table class=\"border centpercent\">';\n\n\t\t\t// Accountancy code\n\t\t\tif ($conf->accounting->enabled)\n\t\t\t{\n\t\t\t\tprint \"<tr>\";\n\t\t\t\tprint '<td>'.$langs->trans(\"AccountancyCode\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($caneditfield)\n\t\t\t\t{\n\t\t\t\t\tprint '<input size=\"30\" type=\"text\" class=\"flat\" name=\"accountancy_code\" value=\"'.$object->accountancy_code.'\">';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"accountancy_code\" value=\"'.$object->accountancy_code.'\">';\n\t\t\t\t\tprint $object->accountancy_code;\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\";\n\t\t\t}\n\n\t\t\t// User color\n\t\t\tif (! empty($conf->agenda->enabled))\n\t\t\t{\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"ColorUser\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint $formother->selectColor(GETPOST('color')?GETPOST('color'):$object->color, 'color', null, 1, '', 'hideifnotset');\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Photo\n\t\t\tprint '<tr>';\n\t\t\tprint '<td>'.$langs->trans(\"Photo\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint $form->showphoto('userphoto',$object,60,0,$caneditfield,'photowithmargin','small');\n\t\t\tprint '</td>';\n\t\t\tprint '</tr>';\n\n\t\t\t// Categories\n\t\t\tif (!empty( $conf->categorie->enabled ) && !empty( $user->rights->categorie->lire ))\n\t\t\t{\n\t\t\t\tprint '<tr><td>' . fieldLabel( 'Categories', 'usercats' ) . '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\t$cate_arbo = $form->select_all_categories( Categorie::TYPE_USER, null, null, null, null, 1 );\n\t\t\t\t$c = new Categorie( $db );\n\t\t\t\t$cats = $c->containing($object->id, Categorie::TYPE_USER);\n\t\t\t\tforeach ($cats as $cat) {\n\t\t\t\t\t$arrayselected[] = $cat->id;\n\t\t\t\t}\n\t\t\t\tprint $form->multiselectarray( 'usercats', $cate_arbo, $arrayselected, '', 0, '', 0, '90%' );\n\t\t\t\tprint \"</td></tr>\";\n\t\t\t}\n\n\t\t\t// Status\n\t\t\tprint '<tr><td>'.$langs->trans(\"Status\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint $object->getLibStatut(4);\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Company / Contact\n\t\t\tif (! empty($conf->societe->enabled))\n\t\t\t{\n\t\t\t\tprint '<tr><td width=\"25%\">'.$langs->trans(\"LinkToCompanyContact\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($object->socid > 0)\n\t\t\t\t{\n\t\t\t\t\t$societe = new Societe($db);\n\t\t\t\t\t$societe->fetch($object->socid);\n\t\t\t\t\tprint $societe->getNomUrl(1,'');\n\t\t\t\t\tif ($object->contactid)\n\t\t\t\t\t{\n\t\t\t\t\t\t$contact = new Contact($db);\n\t\t\t\t\t\t$contact->fetch($object->contactid);\n\t\t\t\t\t\tprint ' / <a href=\"'.DOL_URL_ROOT.'/contact/card.php?id='.$object->contactid.'\">'.img_object($langs->trans(\"ShowContact\"),'contact').' '.dol_trunc($contact->getFullName($langs),32).'</a>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprint $langs->trans(\"ThisUserIsNot\");\n\t\t\t\t}\n\t\t\t\tprint ' ('.$langs->trans(\"UseTypeFieldToChange\").')';\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Module Adherent\n\t\t\tif (! empty($conf->adherent->enabled))\n\t\t\t{\n\t\t\t\t$langs->load(\"members\");\n\t\t\t\tprint '<tr><td width=\"25%\">'.$langs->trans(\"LinkedToDolibarrMember\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($object->fk_member)\n\t\t\t\t{\n\t\t\t\t\t$adh=new Adherent($db);\n\t\t\t\t\t$adh->fetch($object->fk_member);\n\t\t\t\t\t$adh->ref=$adh->login;\t// Force to show login instead of id\n\t\t\t\t\tprint $adh->getNomUrl(1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprint $langs->trans(\"UserNotLinkedToMember\");\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n            // Multicompany\n            // TODO check if user not linked with the current entity before change entity (thirdparty, invoice, etc.) !!\n            if (! empty($conf->multicompany->enabled) && is_object($mc))\n            {\n            \t// This is now done with hook formObjectOptions. Keep this code for backward compatibility with old multicompany module\n            \tif (! method_exists($mc, 'formObjectOptions'))\n            \t{\n            \t\tif (empty($conf->multicompany->transverse_mode) && $conf->entity == 1 && $user->admin && ! $user->entity)\n\t            \t{\n\t            \t\tprint \"<tr>\".'<td>'.$langs->trans(\"Entity\").'</td>';\n\t            \t\tprint \"<td>\".$mc->select_entities($object->entity, 'entity', '', 0, 1);\t\t// last parameter 1 means, show also a choice 0=>'all entities'\n\t            \t\tprint \"</td></tr>\\n\";\n\t            \t}\n\t            \telse\n\t            \t{\n\t            \t\tprint '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\" />';\n\t            \t}\n\t            }\n\t\t\t}\n\n\t\t\t// Other attributes\n\t\t\t$parameters=array('colspan' => ' colspan=\"2\"');\n\t\t\t$reshook=$hookmanager->executeHooks('formObjectOptions',$parameters,$object,$action);    // Note that $action and $object may have been modified by hook\n\t\t\tprint $hookmanager->resPrint;\n\t\t\tif (empty($reshook))\n\t\t\t{\n\t\t\t\tprint $object->showOptionals($extrafields,'edit');\n\t\t\t}\n\n\t\t\t// Signature\n\t\t\tprint \"<tr>\".'<td class=\"tdtop\">'.$langs->trans(\"Signature\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield)\n\t\t\t{\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/doleditor.class.php';\n\t\t\t\t$doleditor=new DolEditor('signature',$object->signature,'',138,'dolibarr_notes','In',false,true,empty($conf->global->FCKEDITOR_ENABLE_USERSIGN)?0:1,ROWS_4,'90%');\n\t\t\t\tprint $doleditor->Create(1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint dol_htmlentitiesbr($object->signature);\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\n\t\t\tprint '</table><hr><table class=\"border centpercent\">';\n\n\n\t\t\t// TODO Move this into tab RH (HierarchicalResponsible must be on both tab)\n\n\t\t\t// Position/Job\n\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"PostOrFunction\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield)\n\t\t\t{\n\t\t\t\tprint '<input size=\"30\" type=\"text\" name=\"job\" value=\"'.$object->job.'\">';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<input type=\"hidden\" name=\"job\" value=\"'.$object->job.'\">';\n\t\t\t\tprint $object->job;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\tif ((! empty($conf->salaries->enabled) && ! empty($user->rights->salaries->read))\n\t\t\t\t|| (! empty($conf->hrm->enabled) && ! empty($user->rights->hrm->employee->read)))\n\t\t\t{\n\t\t\t\t$langs->load(\"salaries\");\n\n\t\t\t\t// THM\n\t\t\t\tprint '<tr><td>';\n\t\t\t\t$text=$langs->trans(\"THM\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"THMDescription\"), 1, 'help', 'classthm');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint '<input size=\"8\" type=\"text\" name=\"thm\" value=\"'.price2num(GETPOST('thm')?GETPOST('thm'):$object->thm).'\">';\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\n\t\t\t\t// TJM\n\t\t\t\tprint '<tr><td>';\n\t\t\t\t$text=$langs->trans(\"TJM\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"TJMDescription\"), 1, 'help', 'classthm');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint '<input size=\"8\" type=\"text\" name=\"tjm\" value=\"'.price2num(GETPOST('tjm')?GETPOST('tjm'):$object->tjm).'\">';\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\n\t\t\t\t// Salary\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Salary\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint '<input size=\"8\" type=\"text\" name=\"salary\" value=\"'.price2num(GETPOST('salary')?GETPOST('salary'):$object->salary).'\">';\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Weeklyhours\n\t\t\tprint '<tr><td>'.$langs->trans(\"WeeklyHours\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint '<input size=\"8\" type=\"text\" name=\"weeklyhours\" value=\"'.price2num(GETPOST('weeklyhours')?GETPOST('weeklyhours'):$object->weeklyhours).'\">';\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Date employment\n\t\t\tprint '<tr><td>'.$langs->trans(\"DateEmployment\").'</td>';\n\t\t\tprint '<td>';\n\t\t\techo $form->select_date(GETPOST('dateemployment')?GETPOST('dateemployment'):$object->dateemployment,'dateemployment',0,0,1,'form'.'dateemployment',1,0,1);\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Date birth\n\t\t\tprint '<tr><td>'.$langs->trans(\"DateToBirth\").'</td>';\n\t\t\tprint '<td>';\n\t\t\techo $form->select_date(GETPOST('birth')?GETPOST('birth'):$object->birth,'birth',0,0,1,'updateuser',1,0,1);\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\tprint '</table>';\n\n\t\t\tdol_fiche_end();\n\n\t\t\tprint '<div align=\"center\">';\n\t\t\tprint '<input value=\"'.$langs->trans(\"Save\").'\" class=\"button\" type=\"submit\" name=\"save\">';\n\t\t\tprint '&nbsp; &nbsp; &nbsp;';\n\t\t\tprint '<input value=\"'.$langs->trans(\"Cancel\").'\" class=\"button\" type=\"submit\" name=\"cancel\">';\n\t\t\tprint '</div>';\n\n\t\t\tprint '</form>';\n\t\t}\n\n\t\tif ($action != 'edit' && $action != 'presend')\n\t\t{\n\t\t\tprint '<div class=\"fichecenter\"><div class=\"fichehalfleft\">';\n\t\t\t/*\n             * Documents generes\n             */\n\t\t\t$filename = dol_sanitizeFileName($object->ref);\n\t\t\t$filedir = $conf->user->dir_output . \"/\" . dol_sanitizeFileName($object->ref);\n\t\t\t$urlsource = $_SERVER[\"PHP_SELF\"] . \"?id=\" . $object->id;\n\t\t\t$genallowed = $user->rights->user->user->lire;\n\t\t\t$delallowed = $user->rights->user->user->creer;\n\n\t\t\tprint $formfile->showdocuments('user', $filename, $filedir, $urlsource, $genallowed, $delallowed, $object->modelpdf, 1, 0, 0, 28, 0, '', 0, '', $soc->default_lang);\n\t\t\t$somethingshown = $formfile->numoffiles;\n\n\t\t\t// Show links to link elements\n\t\t\t$linktoelem = $form->showLinkToObjectBlock($object, null, null);\n\t\t\t$somethingshown = $form->showLinkedObjectBlock($object, $linktoelem);\n\n\t\t\tprint '</div><div class=\"fichehalfright\"><div class=\"ficheaddleft\">';\n\n\t\t\t// List of actions on element\n\t\t\tinclude_once DOL_DOCUMENT_ROOT . '/core/class/html.formactions.class.php';\n\t\t\t$formactions = new FormActions($db);\n\t\t\t$somethingshown = $formactions->showactions($object, 'user', $socid, 1);\n\n\n\t\t\tprint '</div></div></div>';\n\t\t}\n\n\t\tif (! empty($conf->ldap->enabled) && ! empty($object->ldap_sid)) $ldap->close();\n\t}\n\n}\n\nif (! empty($conf->api->enabled) && ! empty($conf->use_javascript_ajax))\n{\n\tprint \"\\n\".'<script type=\"text/javascript\">';\n\tprint '$(document).ready(function () {\n            $(\"#generate_api_key\").click(function() {\n                $.get( \"'.DOL_URL_ROOT.'/core/ajax/security.php\", {\n                    action: \\'getrandompassword\\',\n                    generic: true\n                },\n                function(token) {\n                    $(\"#api_key\").val(token);\n                });\n            });\n    });';\n\tprint '</script>';\n}\n\nllxFooter();\n$db->close();\n", "<?php\n/* Copyright (c) 2002-2007 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (c) 2002-2003 Jean-Louis Bergamo   <jlb@j1b.org>\n * Copyright (c) 2004-2012 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2004      Sebastien Di Cintio  <sdicintio@ressource-toi.org>\n * Copyright (C) 2004      Benoit Mortier       <benoit.mortier@opensides.be>\n * Copyright (C) 2005-2017 Regis Houssin        <regis.houssin@capnetworks.com>\n * Copyright (C) 2005      Lionel Cousteix      <etm_ltd@tiscali.co.uk>\n * Copyright (C) 2011      Herve Prot           <herve.prot@symeos.com>\n * Copyright (C) 2013-2014 Philippe Grand       <philippe.grand@atoo-net.com>\n * Copyright (C) 2013-2015 Alexandre Spangaro   <aspangaro.dolibarr@gmail.com>\n * Copyright (C) 2015      Marcos Garc\u00eda        <marcosgdf@gmail.com>\n * Copyright (C) 2018      Nicolas ZABOURI\t<info@inovea-conseil.com>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *  \\file       htdocs/user/class/user.class.php\n *\t\\brief      File of class to manage users\n *  \\ingroup\tcore\n */\n\nrequire_once DOL_DOCUMENT_ROOT .'/core/class/commonobject.class.php';\n\n/**\n *\tClass to manage Dolibarr users\n */\nclass User extends CommonObject\n{\n\tpublic $element='user';\n\tpublic $table_element='user';\n\tpublic $fk_element='fk_user';\n\tpublic $ismultientitymanaged = 1;\t// 0=No test on entity, 1=Test with field entity, 2=Test with link by societe\n\n\tpublic $id=0;\n\tpublic $statut;\n\tpublic $ldap_sid;\n\tpublic $search_sid;\n\tpublic $employee;\n\tpublic $gender;\n\tpublic $birth;\n\tpublic $email;\n\tpublic $skype;\n\tpublic $job;\n\tpublic $signature;\n\tpublic $address;\n\tpublic $zip;\n\tpublic $town;\n\tpublic $state_id;\t\t// The state/department\n\tpublic $state_code;\n\tpublic $state;\n\tpublic $office_phone;\n\tpublic $office_fax;\n\tpublic $user_mobile;\n\tpublic $admin;\n\tpublic $login;\n\tpublic $api_key;\n\tpublic $entity;\n\n\t//! Clear password in memory\n\tpublic $pass;\n\t//! Clear password in database (defined if DATABASE_PWD_ENCRYPTED=0)\n\tpublic $pass_indatabase;\n\t//! Encrypted password in database (always defined)\n\tpublic $pass_indatabase_crypted;\n\n\tpublic $datec;\n\tpublic $datem;\n\n\t//! If this is defined, it is an external user\n\t/**\n\t * @deprecated\n\t * @see socid\n\t */\n\tpublic $societe_id;\n\t/**\n\t * @deprecated\n\t * @see contactid\n\t */\n\tpublic $contact_id;\n\tpublic $socid;\n\tpublic $contactid;\n\n\tpublic $fk_member;\n\tpublic $fk_user;\n\n\tpublic $clicktodial_url;\n\tpublic $clicktodial_login;\n\tpublic $clicktodial_password;\n\tpublic $clicktodial_poste;\n\n\tpublic $datelastlogin;\n\tpublic $datepreviouslogin;\n\tpublic $photo;\n\tpublic $lang;\n\n\tpublic $rights;                        // Array of permissions user->rights->permx\n\tpublic $all_permissions_are_loaded;\t   // All permission are loaded\n\tpublic $nb_rights;\t\t\t           // Number of rights granted to the user\n\tprivate $_tab_loaded=array();\t\t   // Cache array of already loaded permissions\n\n\tpublic $conf;           \t\t// To store personal config\n\tpublic $default_values;         // To store default values for user\n\tpublic $lastsearch_values_tmp;  // To store current search criterias for user\n\tpublic $lastsearch_values;      // To store last saved search criterias for user\n\n\tpublic $users = array();\t\t// To store all tree of users hierarchy\n\tpublic $parentof;\t\t\t\t// To store an array of all parents for all ids.\n\tprivate $cache_childids;\n\n\tpublic $accountancy_code;\t\t\t// Accountancy code in prevision of the complete accountancy module\n\n\tpublic $thm;\t\t\t\t\t// Average cost of employee - Used for valuation of time spent\n\tpublic $tjm;\t\t\t\t\t// Average cost of employee\n\n\tpublic $salary;\t\t\t\t\t// Monthly salary       - Denormalized value from llx_user_employment\n\tpublic $salaryextra;\t\t\t\t// Monthly salary extra - Denormalized value from llx_user_employment\n\tpublic $weeklyhours;\t\t\t\t// Weekly hours         - Denormalized value from llx_user_employment\n\n\tpublic $color;\t\t\t\t\t\t// Define background color for user in agenda\n\n\tpublic $dateemployment;\t\t\t// Define date of employment by company\n\n\tpublic $default_c_exp_tax_cat;\n\tpublic $default_range;\n\n\tpublic $fields=array(\n        \t'rowid'=>array('type'=>'integer', 'label'=>'TechnicalID', 'enabled'=>1, 'visible'=>-2, 'notnull'=>1,  'index'=>1, 'position'=>1, 'comment'=>'Id'),\n        \t'lastname'=>array('type'=>'varchar(50)', 'label'=>'Name', 'enabled'=>1, 'visible'=>1,  'notnull'=>1,  'showoncombobox'=>1, 'index'=>1, 'position'=>20, 'searchall'=>1, 'comment'=>'Reference of object'),\n        \t'firstname'=>array('type'=>'varchar(50)', 'label'=>'Name','enabled'=>1, 'visible'=>1,  'notnull'=>1,  'showoncombobox'=>1, 'index'=>1, 'position'=>10, 'searchall'=>1, 'comment'=>'Reference of object'),\n    \t);\n\n\t/**\n\t *    Constructor de la classe\n\t *\n\t *    @param   DoliDb  $db     Database handler\n\t */\n\tfunction __construct($db)\n\t{\n\t\t$this->db = $db;\n\n\t\t// User preference\n\t\t$this->liste_limit = 0;\n\t\t$this->clicktodial_loaded = 0;\n\n\t\t// For cache usage\n\t\t$this->all_permissions_are_loaded = 0;\n\t\t$this->nb_rights = 0;\n\n\t\t// Force some default values\n\t\t$this->admin = 0;\n\t\t$this->employee = 1;\n\n\t\t$this->conf\t\t\t\t    = new stdClass();\n\t\t$this->rights\t\t\t\t= new stdClass();\n\t\t$this->rights->user\t\t\t= new stdClass();\n\t\t$this->rights->user->user\t= new stdClass();\n\t\t$this->rights->user->self\t= new stdClass();\n\t}\n\n\t/**\n\t *\tLoad a user from database with its id or ref (login).\n\t *  This function does not load permissions, only user properties. Use getrights() for this just after the fetch.\n\t *\n\t *\t@param\tint\t\t$id\t\t       \t\tIf defined, id to used for search\n\t * \t@param  string\t$login       \t\tIf defined, login to used for search\n\t *\t@param  string\t$sid\t\t\t\tIf defined, sid to used for search\n\t * \t@param\tint\t\t$loadpersonalconf\t1=also load personal conf of user (in $user->conf->xxx), 0=do not load personal conf.\n\t *  @param  int     $entity             If a value is >= 0, we force the search on a specific entity. If -1, means search depens on default setup.\n\t * \t@return\tint\t\t\t\t\t\t\t<0 if KO, 0 not found, >0 if OK\n\t */\n\tfunction fetch($id='', $login='', $sid='', $loadpersonalconf=0, $entity=-1)\n\t{\n\t\tglobal $conf, $user;\n\n\t\t// Clean parameters\n\t\t$login=trim($login);\n\n\t\t// Get user\n\t\t$sql = \"SELECT u.rowid, u.lastname, u.firstname, u.employee, u.gender, u.birth, u.email, u.job, u.skype, u.signature, u.office_phone, u.office_fax, u.user_mobile,\";\n\t\t$sql.= \" u.address, u.zip, u.town, u.fk_state as state_id, u.fk_country as country_id,\";\n\t\t$sql.= \" u.admin, u.login, u.note,\";\n\t\t$sql.= \" u.pass, u.pass_crypted, u.pass_temp, u.api_key,\";\n\t\t$sql.= \" u.fk_soc, u.fk_socpeople, u.fk_member, u.fk_user, u.ldap_sid,\";\n\t\t$sql.= \" u.statut, u.lang, u.entity,\";\n\t\t$sql.= \" u.datec as datec,\";\n\t\t$sql.= \" u.tms as datem,\";\n\t\t$sql.= \" u.datelastlogin as datel,\";\n\t\t$sql.= \" u.datepreviouslogin as datep,\";\n\t\t$sql.= \" u.photo as photo,\";\n\t\t$sql.= \" u.openid as openid,\";\n\t\t$sql.= \" u.accountancy_code,\";\n\t\t$sql.= \" u.thm,\";\n\t\t$sql.= \" u.tjm,\";\n\t\t$sql.= \" u.salary,\";\n\t\t$sql.= \" u.salaryextra,\";\n\t\t$sql.= \" u.weeklyhours,\";\n\t\t$sql.= \" u.color,\";\n\t\t$sql.= \" u.dateemployment,\";\n\t\t$sql.= \" u.ref_int, u.ref_ext,\";\n\t\t$sql.= \" u.default_range, u.default_c_exp_tax_cat,\";\t\t\t// Expense report default mode\n\t\t$sql.= \" c.code as country_code, c.label as country,\";\n\t\t$sql.= \" d.code_departement as state_code, d.nom as state\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"user as u\";\n\t\t$sql.= \" LEFT JOIN \".MAIN_DB_PREFIX.\"c_country as c ON u.fk_country = c.rowid\";\n\t\t$sql.= \" LEFT JOIN \".MAIN_DB_PREFIX.\"c_departements as d ON u.fk_state = d.rowid\";\n\n\t\tif ($entity < 0)\n\t\t{\n\t\t\tif ((empty($conf->multicompany->enabled) || empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)) && (! empty($user->entity)))\n\t\t\t{\n\t\t\t\t$sql.= \" WHERE u.entity IN (0,\".$conf->entity.\")\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$sql.= \" WHERE u.entity IS NOT NULL\";    // multicompany is on in transverse mode or user making fetch is on entity 0, so user is allowed to fetch anywhere into database\n\t\t\t}\n\t\t}\n\t\telse  // The fetch was forced on an entity\n\t\t{\n\t\t\tif (!empty($conf->multicompany->enabled) && !empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE))\n\t\t\t\t$sql.= \" WHERE u.entity IS NOT NULL\";    // multicompany is on in transverse mode or user making fetch is on entity 0, so user is allowed to fetch anywhere into database\n\t\t\telse\n\t\t\t\t$sql.= \" WHERE u.entity IN (0, \".(($entity!='' && $entity >= 0)?$entity:$conf->entity).\")\";   // search in entity provided in parameter\n\t\t}\n\n\t\tif ($sid)    // permet une recherche du user par son SID ActiveDirectory ou Samba\n\t\t{\n\t\t\t$sql.= \" AND (u.ldap_sid = '\".$this->db->escape($sid).\"' OR u.login = '\".$this->db->escape($login).\"') LIMIT 1\";\n\t\t}\n\t\telse if ($login)\n\t\t{\n\t\t\t$sql.= \" AND u.login = '\".$this->db->escape($login).\"'\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sql.= \" AND u.rowid = \".$id;\n\t\t}\n\t\t$sql.= \" ORDER BY u.entity ASC\";    // Avoid random result when there is 2 login in 2 different entities\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result)\n\t\t{\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\tif ($obj)\n\t\t\t{\n\t\t\t\t$this->id \t\t\t= $obj->rowid;\n\t\t\t\t$this->ref \t\t\t= $obj->rowid;\n\n\t\t\t\t$this->ref_int \t\t= $obj->ref_int;\n\t\t\t\t$this->ref_ext \t\t= $obj->ref_ext;\n\n\t\t\t\t$this->ldap_sid \t= $obj->ldap_sid;\n\t\t\t\t$this->lastname\t\t= $obj->lastname;\n\t\t\t\t$this->firstname \t= $obj->firstname;\n\n\t\t\t\t$this->employee\t\t= $obj->employee;\n\n\t\t\t\t$this->login\t\t= $obj->login;\n\t\t\t\t$this->gender       = $obj->gender;\n\t\t\t\t$this->birth        = $this->db->jdate($obj->birth);\n\t\t\t\t$this->pass_indatabase = $obj->pass;\n\t\t\t\t$this->pass_indatabase_crypted = $obj->pass_crypted;\n\t\t\t\t$this->pass\t\t\t= $obj->pass;\n\t\t\t\t$this->pass_temp\t= $obj->pass_temp;\n\t\t\t\t$this->api_key\t\t= $obj->api_key;\n\n\t\t\t\t$this->address \t\t= $obj->address;\n\t\t\t\t$this->zip \t\t\t= $obj->zip;\n\t\t\t\t$this->town \t\t= $obj->town;\n\n\t\t\t\t$this->country_id   = $obj->country_id;\n\t\t\t\t$this->country_code = $obj->country_id?$obj->country_code:'';\n\t\t\t\t//$this->country \t\t= $obj->country_id?($langs->trans('Country'.$obj->country_code)!='Country'.$obj->country_code?$langs->transnoentities('Country'.$obj->country_code):$obj->country):'';\n\n\t\t\t\t$this->state_id     = $obj->state_id;\n\t\t\t\t$this->state_code   = $obj->state_code;\n\t\t\t\t$this->state        = ($obj->state!='-'?$obj->state:'');\n\n\t\t\t\t$this->office_phone\t= $obj->office_phone;\n\t\t\t\t$this->office_fax   = $obj->office_fax;\n\t\t\t\t$this->user_mobile  = $obj->user_mobile;\n\t\t\t\t$this->email\t\t= $obj->email;\n\t\t\t\t$this->skype\t\t= $obj->skype;\n\t\t\t\t$this->job\t\t\t= $obj->job;\n\t\t\t\t$this->signature\t= $obj->signature;\n\t\t\t\t$this->admin\t\t= $obj->admin;\n\t\t\t\t$this->note\t\t\t= $obj->note;\n\t\t\t\t$this->statut\t\t= $obj->statut;\n\t\t\t\t$this->photo\t\t= $obj->photo;\n\t\t\t\t$this->openid\t\t= $obj->openid;\n\t\t\t\t$this->lang\t\t\t= $obj->lang;\n\t\t\t\t$this->entity\t\t= $obj->entity;\n\t\t\t\t$this->accountancy_code\t\t= $obj->accountancy_code;\n\t\t\t\t$this->thm\t\t\t= $obj->thm;\n\t\t\t\t$this->tjm\t\t\t= $obj->tjm;\n\t\t\t\t$this->salary\t\t= $obj->salary;\n\t\t\t\t$this->salaryextra\t= $obj->salaryextra;\n\t\t\t\t$this->weeklyhours\t= $obj->weeklyhours;\n\t\t\t\t$this->color\t\t= $obj->color;\n\t\t\t\t$this->dateemployment\t= $this->db->jdate($obj->dateemployment);\n\n\t\t\t\t$this->datec\t\t\t\t= $this->db->jdate($obj->datec);\n\t\t\t\t$this->datem\t\t\t\t= $this->db->jdate($obj->datem);\n\t\t\t\t$this->datelastlogin\t\t= $this->db->jdate($obj->datel);\n\t\t\t\t$this->datepreviouslogin\t= $this->db->jdate($obj->datep);\n\n\t\t\t\t$this->societe_id           = $obj->fk_soc;\t\t// deprecated\n\t\t\t\t$this->contact_id           = $obj->fk_socpeople;\t// deprecated\n\t\t\t\t$this->socid                = $obj->fk_soc;\n\t\t\t\t$this->contactid            = $obj->fk_socpeople;\n\t\t\t\t$this->fk_member            = $obj->fk_member;\n\t\t\t\t$this->fk_user        \t\t= $obj->fk_user;\n\n\t\t\t\t$this->default_range\t\t= $obj->default_range;\n\t\t\t\t$this->default_c_exp_tax_cat\t= $obj->default_c_exp_tax_cat;\n\n\t\t\t\t// Protection when module multicompany was set, admin was set to first entity and then, the module was disabled,\n\t\t\t\t// in such case, this admin user must be admin for ALL entities.\n\t\t\t\tif (empty($conf->multicompany->enabled) && $this->admin && $this->entity == 1) $this->entity = 0;\n\n\t\t\t\t// Retreive all extrafield\n\t\t\t\t// fetch optionals attributes and labels\n\t\t\t\t$this->fetch_optionals();\n\n\t\t\t\t$this->db->free($result);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->error=\"USERNOTFOUND\";\n\t\t\t\tdol_syslog(get_class($this).\"::fetch user not found\", LOG_DEBUG);\n\n\t\t\t\t$this->db->free($result);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\n\t\t// To get back the global configuration unique to the user\n\t\tif ($loadpersonalconf)\n\t\t{\n\t\t\t// Load user->conf for user\n\t\t\t$sql = \"SELECT param, value FROM \".MAIN_DB_PREFIX.\"user_param\";\n\t\t\t$sql.= \" WHERE fk_user = \".$this->id;\n\t\t\t$sql.= \" AND entity = \".$conf->entity;\n\t\t\t//dol_syslog(get_class($this).'::fetch load personalized conf', LOG_DEBUG);\n\t\t\t$resql=$this->db->query($sql);\n\t\t\tif ($resql)\n\t\t\t{\n\t\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t\t$i = 0;\n\t\t\t\twhile ($i < $num)\n\t\t\t\t{\n\t\t\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t\t\t$p=(! empty($obj->param)?$obj->param:'');\n\t\t\t\t\tif (! empty($p)) $this->conf->$p = $obj->value;\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t\t$this->db->free($resql);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->error=$this->db->lasterror();\n\t\t\t\treturn -2;\n\t\t\t}\n\n\t\t\t// Load user->default_values for user. TODO Save this in memcached ?\n\t\t\t$sql = \"SELECT rowid, entity, type, page, param, value\";\n\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"default_values\";\n\t\t\t$sql.= \" WHERE entity IN (\".$this->entity.\",\".$conf->entity.\")\";\n\t\t\t$sql.= \" AND user_id IN (0, \".$this->id.\")\";\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif ($resql)\n\t\t\t{\n\t\t\t\twhile ($obj = $this->db->fetch_object($resql))\n\t\t\t\t{\n\t\t\t\t\tif (! empty($obj->page) && ! empty($obj->type) && ! empty($obj->param))\n\t\t\t\t\t{\n\t\t\t\t\t\t// $obj->page is relative URL with or without params\n\t\t\t\t\t\t// $obj->type can be 'filters', 'sortorder', 'createform', ...\n\t\t\t\t\t\t// $obj->param is key or param\n\t\t\t\t\t\t$pagewithoutquerystring=$obj->page;\n\t\t\t\t\t\t$pagequeries='';\n\t\t\t\t\t\tif (preg_match('/^([^\\?]+)\\?(.*)$/', $pagewithoutquerystring, $reg))\t// There is query param\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$pagewithoutquerystring=$reg[1];\n\t\t\t\t\t\t\t$pagequeries=$reg[2];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$this->default_values[$pagewithoutquerystring][$obj->type][$pagequeries?$pagequeries:'_noquery_'][$obj->param]=$obj->value;\n\t\t\t\t\t\t//if ($pagequeries) $this->default_values[$pagewithoutquerystring][$obj->type.'_queries']=$pagequeries;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Sort by key, so _noquery_ is last\n\t\t\t\tif(!empty($this->default_values)) {\n\t\t\t\t\tforeach($this->default_values as $a => $b)\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach($b as $c => $d)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkrsort($this->default_values[$a][$c]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->db->free($resql);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->error=$this->db->lasterror();\n\t\t\t\treturn -3;\n\t\t\t}\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t *  Add a right to the user\n\t *\n\t * \t@param\tint\t\t$rid\t\t\tid of permission to add\n\t *  @param  string\t$allmodule\t\tAdd all permissions of module $allmodule\n\t *  @param  string\t$allperms\t\tAdd all permissions of module $allmodule, subperms $allperms only\n\t *  @param\tint\t\t$entity\t\t\tEntity to use\n\t *  @param  int\t    $notrigger\t\t1=Does not execute triggers, 0=Execute triggers\n\t *  @return int\t\t\t\t\t\t> 0 if OK, < 0 if KO\n\t *  @see\tclearrights, delrights, getrights\n\t */\n\tfunction addrights($rid, $allmodule='', $allperms='', $entity=0, $notrigger=0)\n\t{\n\t\tglobal $conf, $user, $langs;\n\n\t\t$entity = (! empty($entity)?$entity:$conf->entity);\n\n\t\tdol_syslog(get_class($this).\"::addrights $rid, $allmodule, $allperms, $entity\");\n\t\t$error=0;\n\t\t$whereforadd='';\n\n\t\t$this->db->begin();\n\n\t\tif (! empty($rid))\n\t\t{\n\t\t\t// Si on a demande ajout d'un droit en particulier, on recupere\n\t\t\t// les caracteristiques (module, perms et subperms) de ce droit.\n\t\t\t$sql = \"SELECT module, perms, subperms\";\n\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"rights_def\";\n\t\t\t$sql.= \" WHERE id = '\".$this->db->escape($rid).\"'\";\n\t\t\t$sql.= \" AND entity = \".$entity;\n\n\t\t\t$result=$this->db->query($sql);\n\t\t\tif ($result) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t$module=$obj->module;\n\t\t\t\t$perms=$obj->perms;\n\t\t\t\t$subperms=$obj->subperms;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$error++;\n\t\t\t\tdol_print_error($this->db);\n\t\t\t}\n\n\t\t\t// Where pour la liste des droits a ajouter\n\t\t\t$whereforadd=\"id=\".$this->db->escape($rid);\n\t\t\t// Ajout des droits induits\n\t\t\tif (! empty($subperms))   $whereforadd.=\" OR (module='$module' AND perms='$perms' AND (subperms='lire' OR subperms='read'))\";\n\t\t\telse if (! empty($perms)) $whereforadd.=\" OR (module='$module' AND (perms='lire' OR perms='read') AND subperms IS NULL)\";\n\t\t}\n\t\telse {\n\t\t\t// On a pas demande un droit en particulier mais une liste de droits\n\t\t\t// sur la base d'un nom de module de de perms\n\t\t\t// Where pour la liste des droits a ajouter\n\t\t\tif (! empty($allmodule))\n\t\t\t{\n\t\t\t\t$whereforadd=\"module='\".$this->db->escape($allmodule).\"'\";\n\t\t\t\tif (! empty($allperms)) $whereforadd.=\" AND perms='\".$this->db->escape($allperms).\"'\";\n\t\t\t}\n\t\t}\n\n\t\t// Ajout des droits trouves grace au critere whereforadd\n\t\tif (! empty($whereforadd))\n\t\t{\n\t\t\t//print \"$module-$perms-$subperms\";\n\t\t\t$sql = \"SELECT id\";\n\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"rights_def\";\n\t\t\t$sql.= \" WHERE \".$whereforadd;\n\t\t\t$sql.= \" AND entity = \".$entity;\n\n\t\t\t$result=$this->db->query($sql);\n\t\t\tif ($result)\n\t\t\t{\n\t\t\t\t$num = $this->db->num_rows($result);\n\t\t\t\t$i = 0;\n\t\t\t\twhile ($i < $num)\n\t\t\t\t{\n\t\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t\t$nid = $obj->id;\n\n\t\t\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_rights WHERE fk_user = \".$this->id.\" AND fk_id=\".$nid.\" AND entity = \".$entity;\n\t\t\t\t\tif (! $this->db->query($sql)) $error++;\n\t\t\t\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"user_rights (entity, fk_user, fk_id) VALUES (\".$entity.\", \".$this->id.\", \".$nid.\")\";\n\t\t\t\t\tif (! $this->db->query($sql)) $error++;\n\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$error++;\n\t\t\t\tdol_print_error($this->db);\n\t\t\t}\n\t\t}\n\n\t\tif (! $error && ! $notrigger)\n\t\t{\n\t\t\t$langs->load(\"other\");\n\t\t\t$this->context = array('audit'=>$langs->trans(\"PermissionsAdd\").($rid?' (id='.$rid.')':''));\n\n\t\t\t// Call trigger\n\t\t\t$result=$this->call_trigger('USER_MODIFY',$user);\n\t\t\tif ($result < 0) { $error++; }\n\t\t\t// End call triggers\n\t\t}\n\n\t\tif ($error) {\n\t\t\t$this->db->rollback();\n\t\t\treturn -$error;\n\t\t}\n\t\telse {\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t}\n\n\t}\n\n\n\t/**\n\t *  Remove a right to the user\n\t *\n\t *  @param\tint\t\t$rid        Id du droit a retirer\n\t *  @param  string\t$allmodule  Retirer tous les droits du module allmodule\n\t *  @param  string\t$allperms   Retirer tous les droits du module allmodule, perms allperms\n\t *  @param\tint\t\t$entity\t\tEntity to use\n\t *  @param  int\t    $notrigger\t1=Does not execute triggers, 0=Execute triggers\n\t *  @return int         \t\t> 0 if OK, < 0 if OK\n\t *  @see\tclearrights, addrights, getrights\n\t */\n\tfunction delrights($rid, $allmodule='', $allperms='', $entity=0, $notrigger=0)\n\t{\n\t\tglobal $conf, $user, $langs;\n\n\t\t$error=0;\n\t\t$wherefordel='';\n\t\t$entity = (! empty($entity)?$entity:$conf->entity);\n\n\t\t$this->db->begin();\n\n\t\tif (! empty($rid))\n\t\t{\n\t\t\t// Si on a demande supression d'un droit en particulier, on recupere\n\t\t\t// les caracteristiques module, perms et subperms de ce droit.\n\t\t\t$sql = \"SELECT module, perms, subperms\";\n\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"rights_def\";\n\t\t\t$sql.= \" WHERE id = '\".$this->db->escape($rid).\"'\";\n\t\t\t$sql.= \" AND entity = \".$entity;\n\n\t\t\t$result=$this->db->query($sql);\n\t\t\tif ($result) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t$module=$obj->module;\n\t\t\t\t$perms=$obj->perms;\n\t\t\t\t$subperms=$obj->subperms;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$error++;\n\t\t\t\tdol_print_error($this->db);\n\t\t\t}\n\n\t\t\t// Where pour la liste des droits a supprimer\n\t\t\t$wherefordel=\"id=\".$this->db->escape($rid);\n\t\t\t// Suppression des droits induits\n\t\t\tif ($subperms=='lire' || $subperms=='read') $wherefordel.=\" OR (module='$module' AND perms='$perms' AND subperms IS NOT NULL)\";\n\t\t\tif ($perms=='lire' || $perms=='read')       $wherefordel.=\" OR (module='$module')\";\n\t\t}\n\t\telse {\n\t\t\t// On a demande suppression d'un droit sur la base d'un nom de module ou perms\n\t\t\t// Where pour la liste des droits a supprimer\n\t\t\tif (! empty($allmodule)) $wherefordel=\"module='\".$this->db->escape($allmodule).\"'\";\n\t\t\tif (! empty($allperms))  $wherefordel=\" AND perms='\".$this->db->escape($allperms).\"'\";\n\t\t}\n\n\t\t// Suppression des droits selon critere defini dans wherefordel\n\t\tif (! empty($wherefordel))\n\t\t{\n\t\t\t//print \"$module-$perms-$subperms\";\n\t\t\t$sql = \"SELECT id\";\n\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"rights_def\";\n\t\t\t$sql.= \" WHERE $wherefordel\";\n\t\t\t$sql.= \" AND entity = \".$entity;\n\n\t\t\t$result=$this->db->query($sql);\n\t\t\tif ($result)\n\t\t\t{\n\t\t\t\t$num = $this->db->num_rows($result);\n\t\t\t\t$i = 0;\n\t\t\t\twhile ($i < $num)\n\t\t\t\t{\n\t\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t\t$nid = $obj->id;\n\n\t\t\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_rights\";\n\t\t\t\t\t$sql.= \" WHERE fk_user = \".$this->id.\" AND fk_id=\".$nid;\n\t\t\t\t\t$sql.= \" AND entity = \".$entity;\n\t\t\t\t\tif (! $this->db->query($sql)) $error++;\n\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$error++;\n\t\t\t\tdol_print_error($this->db);\n\t\t\t}\n\t\t}\n\n\t\tif (! $error && ! $notrigger)\n\t\t{\n\t\t\t$langs->load(\"other\");\n\t\t\t$this->context = array('audit'=>$langs->trans(\"PermissionsDelete\").($rid?' (id='.$rid.')':''));\n\n\t\t\t// Call trigger\n\t\t\t$result=$this->call_trigger('USER_MODIFY',$user);\n\t\t\tif ($result < 0) { $error++; }\n\t\t\t// End call triggers\n\t\t}\n\n\t\tif ($error) {\n\t\t\t$this->db->rollback();\n\t\t\treturn -$error;\n\t\t}\n\t\telse {\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t}\n\n\t}\n\n\n\t/**\n\t *  Clear all permissions array of user\n\t *\n\t *  @return\tvoid\n\t *  @see\tgetrights\n\t */\n\tfunction clearrights()\n\t{\n\t\tdol_syslog(get_class($this).\"::clearrights reset user->rights\");\n\t\t$this->rights='';\n\t\t$this->all_permissions_are_loaded=false;\n\t\t$this->_tab_loaded=array();\n\t}\n\n\n\t/**\n\t *\tLoad permissions granted to user into object user\n\t *\n\t *\t@param  string\t$moduletag    Limit permission for a particular module ('' by default means load all permissions)\n\t *\t@return\tvoid\n\t *  @see\tclearrights, delrights, addrights\n\t */\n\tfunction getrights($moduletag='')\n\t{\n\t\tglobal $conf;\n\n\t\tif ($moduletag && isset($this->_tab_loaded[$moduletag]) && $this->_tab_loaded[$moduletag])\n\t\t{\n\t\t\t// Le fichier de ce module est deja charge\n\t\t\treturn;\n\t\t}\n\n\t\tif ($this->all_permissions_are_loaded)\n\t\t{\n\t\t\t// Si les permissions ont deja ete charge pour ce user, on quitte\n\t\t\treturn;\n\t\t}\n\n\t\t// Recuperation des droits utilisateurs + recuperation des droits groupes\n\n\t\t// D'abord les droits utilisateurs\n\t\t$sql = \"SELECT r.module, r.perms, r.subperms\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"user_rights as ur\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"rights_def as r\";\n\t\t$sql.= \" WHERE r.id = ur.fk_id\";\n\t\tif (! empty($conf->global->MULTICOMPANY_BACKWARD_COMPATIBILITY))\n\t\t{\n\t\t\t$sql.= \" AND r.entity IN (0,\".(! empty($conf->multicompany->enabled) && ! empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)?\"1,\":\"\").$conf->entity.\")\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sql.= \" AND ur.entity = \".$conf->entity;\n\t\t}\n\t\t$sql.= \" AND ur.fk_user= \".$this->id;\n\t\t$sql.= \" AND r.perms IS NOT NULL\";\n\t\tif ($moduletag) $sql.= \" AND r.module = '\".$this->db->escape($moduletag).\"'\";\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t$i = 0;\n\t\t\twhile ($i < $num)\n\t\t\t{\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\t$module=$obj->module;\n\t\t\t\t$perms=$obj->perms;\n\t\t\t\t$subperms=$obj->subperms;\n\n\t\t\t\tif ($perms)\n\t\t\t\t{\n\t\t\t\t\tif (! isset($this->rights) || ! is_object($this->rights)) $this->rights = new stdClass(); // For avoid error\n\t\t\t\t\tif ($module)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! isset($this->rights->$module) || ! is_object($this->rights->$module)) $this->rights->$module = new stdClass();\n\t\t\t\t\t\tif ($subperms)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (! isset($this->rights->$module->$perms) || ! is_object($this->rights->$module->$perms)) $this->rights->$module->$perms = new stdClass();\n\t\t\t\t\t\t\tif(empty($this->rights->$module->$perms->$subperms)) $this->nb_rights++;\n\t\t\t\t\t\t\t$this->rights->$module->$perms->$subperms = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(empty($this->rights->$module->$perms)) $this->nb_rights++;\n\t\t\t\t\t\t\t$this->rights->$module->$perms = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->db->free($resql);\n\t\t}\n\n\t\t// Maintenant les droits groupes\n\t\t$sql = \"SELECT r.module, r.perms, r.subperms\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"usergroup_rights as gr,\";\n\t\t$sql.= \" \".MAIN_DB_PREFIX.\"usergroup_user as gu,\";\n\t\t$sql.= \" \".MAIN_DB_PREFIX.\"rights_def as r\";\n\t\t$sql.= \" WHERE r.id = gr.fk_id\";\n\t\tif (! empty($conf->global->MULTICOMPANY_BACKWARD_COMPATIBILITY))\n\t\t{\n\t\t\tif (! empty($conf->multicompany->enabled) && ! empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)) {\n\t\t\t\t$sql.= \" AND gu.entity IN (0,\".$conf->entity.\")\";\n\t\t\t} else {\n\t\t\t\t$sql.= \" AND r.entity = \".$conf->entity;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sql.= \" AND gr.entity = \".$conf->entity;\n\t\t\t$sql.= \" AND r.entity = \".$conf->entity;\n\t\t}\n\t\t$sql.= \" AND gr.fk_usergroup = gu.fk_usergroup\";\n\t\t$sql.= \" AND gu.fk_user = \".$this->id;\n\t\t$sql.= \" AND r.perms IS NOT NULL\";\n\t\tif ($moduletag) $sql.= \" AND r.module = '\".$this->db->escape($moduletag).\"'\";\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t$i = 0;\n\t\t\twhile ($i < $num)\n\t\t\t{\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\t$module=$obj->module;\n\t\t\t\t$perms=$obj->perms;\n\t\t\t\t$subperms=$obj->subperms;\n\n\t\t\t\tif ($perms)\n\t\t\t\t{\n\t\t\t\t\tif (! isset($this->rights) || ! is_object($this->rights)) $this->rights = new stdClass(); // For avoid error\n\t\t\t\t\tif (! isset($this->rights->$module) || ! is_object($this->rights->$module)) $this->rights->$module = new stdClass();\n\t\t\t\t\tif ($subperms)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! isset($this->rights->$module->$perms) || ! is_object($this->rights->$module->$perms)) $this->rights->$module->$perms = new stdClass();\n\t\t\t\t\t\tif(empty($this->rights->$module->$perms->$subperms)) $this->nb_rights++;\n\t\t\t\t\t\t$this->rights->$module->$perms->$subperms = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(empty($this->rights->$module->$perms)) $this->nb_rights++;\n\t\t\t\t\t\t// if we have already define a subperm like this $this->rights->$module->level1->level2 with llx_user_rights, we don't want override level1 because the level2 can be not define on user group\n\t\t\t\t\t\tif (!is_object($this->rights->$module->$perms)) $this->rights->$module->$perms = 1;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->db->free($resql);\n\t\t}\n\n\t\t// For backward compatibility\n\t\tif (isset($this->rights->propale) && ! isset($this->rights->propal)) $this->rights->propal = $this->rights->propale;\n\t\tif (isset($this->rights->propal) && ! isset($this->rights->propale)) $this->rights->propale = $this->rights->propal;\n\n\t\tif (! $moduletag)\n\t\t{\n\t\t\t// Si module etait non defini, alors on a tout charge, on peut donc considerer\n\t\t\t// que les droits sont en cache (car tous charges) pour cet instance de user\n\t\t\t$this->all_permissions_are_loaded=1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Si module defini, on le marque comme charge en cache\n\t\t\t$this->_tab_loaded[$moduletag]=1;\n\t\t}\n\t}\n\n\t/**\n\t *  Change status of a user\n\t *\n\t *\t@param\tint\t\t$statut\t\tStatus to set\n\t *  @return int     \t\t\t<0 if KO, 0 if nothing is done, >0 if OK\n\t */\n\tfunction setstatus($statut)\n\t{\n\t\tglobal $conf,$langs,$user;\n\n\t\t$error=0;\n\n\t\t// Check parameters\n\t\tif ($this->statut == $statut) return 0;\n\t\telse $this->statut = $statut;\n\n\t\t$this->db->begin();\n\n\t\t// Deactivate user\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t$sql.= \" SET statut = \".$this->statut;\n\t\t$sql.= \" WHERE rowid = \".$this->id;\n\t\t$result = $this->db->query($sql);\n\n\t\tdol_syslog(get_class($this).\"::setstatus\", LOG_DEBUG);\n\t\tif ($result)\n\t\t{\n\t\t\t// Call trigger\n\t\t\t$result=$this->call_trigger('USER_ENABLEDISABLE',$user);\n\t\t\tif ($result < 0) { $error++; }\n\t\t\t// End call triggers\n\t\t}\n\n\t\tif ($error)\n\t\t{\n\t\t\t$this->db->rollback();\n\t\t\treturn -$error;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t * Sets object to supplied categories.\n\t *\n\t * Deletes object from existing categories not supplied.\n\t * Adds it to non existing supplied categories.\n\t * Existing categories are left untouch.\n\t *\n\t * @param int[]|int $categories Category or categories IDs\n\t */\n\tpublic function setCategories($categories)\n\t{\n\t\t// Handle single category\n\t\tif (!is_array($categories)) {\n\t\t\t$categories = array($categories);\n\t\t}\n\n\t\t// Get current categories\n\t\trequire_once DOL_DOCUMENT_ROOT . '/categories/class/categorie.class.php';\n\t\t$c = new Categorie($this->db);\n\t\t$existing = $c->containing($this->id, Categorie::TYPE_USER, 'id');\n\n\t\t// Diff\n\t\tif (is_array($existing)) {\n\t\t\t$to_del = array_diff($existing, $categories);\n\t\t\t$to_add = array_diff($categories, $existing);\n\t\t} else {\n\t\t\t$to_del = array(); // Nothing to delete\n\t\t\t$to_add = $categories;\n\t\t}\n\n\t\t// Process\n\t\tforeach ($to_del as $del) {\n\t\t\tif ($c->fetch($del) > 0) {\n\t\t\t\t$c->del_type($this, 'user');\n\t\t\t}\n\t\t}\n\t\tforeach ($to_add as $add) {\n\t\t\tif ($c->fetch($add) > 0) {\n\t\t\t\t$c->add_type($this, 'user');\n\t\t\t}\n\t\t}\n\n\t\treturn;\n\t}\n\n\t/**\n\t *    \tDelete the user\n\t *\n\t * \t\t@return\t\tint\t\t<0 if KO, >0 if OK\n\t */\n\tfunction delete()\n\t{\n\t\tglobal $user,$conf,$langs;\n\n\t\t$error=0;\n\n\t\t$this->db->begin();\n\n\t\t$this->fetch($this->id);\n\n\t\tdol_syslog(get_class($this).\"::delete\", LOG_DEBUG);\n\n\t\t// Remove rights\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_rights WHERE fk_user = \".$this->id;\n\n\t\tif (! $error && ! $this->db->query($sql))\n\t\t{\n\t\t\t$error++;\n\t\t\t$this->error = $this->db->lasterror();\n\t\t}\n\n\t\t// Remove group\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"usergroup_user WHERE fk_user  = \".$this->id;\n\t\tif (! $error && ! $this->db->query($sql))\n\t\t{\n\t\t\t$error++;\n\t\t\t$this->error = $this->db->lasterror();\n\t\t}\n\n\t\t// If contact, remove link\n\t\tif ($this->contact_id)\n\t\t{\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"socpeople SET fk_user_creat = null WHERE rowid = \".$this->contact_id;\n\t\t\tif (! $error && ! $this->db->query($sql))\n\t\t\t{\n\t\t\t\t$error++;\n\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t}\n\t\t}\n\n\t\t// Remove extrafields\n\t\tif ((! $error) && (empty($conf->global->MAIN_EXTRAFIELDS_DISABLED))) // For avoid conflicts if trigger used\n\t\t{\n\t\t\t$result=$this->deleteExtraFields();\n\t\t\tif ($result < 0)\n\t\t\t{\n\t\t   \t\t$error++;\n\t\t   \t\tdol_syslog(get_class($this).\"::delete error -4 \".$this->error, LOG_ERR);\n\t\t   \t}\n\t\t}\n\n\t\t// Remove user\n\t\tif (! $error)\n\t\t{\n\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user WHERE rowid = \".$this->id;\n\t\t   \tdol_syslog(get_class($this).\"::delete\", LOG_DEBUG);\n\t\t   \tif (! $this->db->query($sql))\n\t\t   \t{\n\t\t   \t\t$error++;\n\t\t   \t\t$this->error = $this->db->lasterror();\n\t\t   \t}\n\t\t}\n\n\t\tif (! $error)\n\t\t{\n\t\t\t// Call trigger\n\t\t\t$result=$this->call_trigger('USER_DELETE',$user);\n\t\t\tif ($result < 0)\n\t\t\t{\n\t\t\t\t$error++;\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t// End call triggers\n\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Create a user into database\n\t *\n\t *  @param\tUser\t$user        \tObjet user doing creation\n\t *  @param  int\t\t$notrigger\t\t1=do not execute triggers, 0 otherwise\n\t *  @return int\t\t\t         \t<0 if KO, id of created user if OK\n\t */\n\tfunction create($user, $notrigger=0)\n\t{\n\t\tglobal $conf,$langs;\n\t\tglobal $mysoc;\n\n\t\t// Clean parameters\n\t\t$this->login = trim($this->login);\n\t\tif (! isset($this->entity)) $this->entity=$conf->entity;\t// If not defined, we use default value\n\n\t\tdol_syslog(get_class($this).\"::create login=\".$this->login.\", user=\".(is_object($user)?$user->id:''), LOG_DEBUG);\n\n\t\t// Check parameters\n\t\tif (! empty($conf->global->USER_MAIL_REQUIRED) && ! isValidEMail($this->email))\n\t\t{\n\t\t\t$langs->load(\"errors\");\n\t\t\t$this->error = $langs->trans(\"ErrorBadEMail\",$this->email);\n\t\t\treturn -1;\n\t\t}\n\t\tif (empty($this->login))\n\t\t{\n\t\t\t$langs->load(\"errors\");\n\t\t\t$this->error = $langs->trans(\"ErrorFieldRequired\",$langs->transnoentitiesnoconv(\"Login\"));\n\t\t\treturn -1;\n\t\t}\n\n\t\t$this->datec = dol_now();\n\n\t\t$error=0;\n\t\t$this->db->begin();\n\n\t\t$sql = \"SELECT login FROM \".MAIN_DB_PREFIX.\"user\";\n\t\t$sql.= \" WHERE login ='\".$this->db->escape($this->login).\"'\";\n\t\t$sql.= \" AND entity IN (0,\".$this->db->escape($conf->entity).\")\";\n\n\t\tdol_syslog(get_class($this).\"::create\", LOG_DEBUG);\n\t\t$resql=$this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t$this->db->free($resql);\n\n\t\t\tif ($num)\n\t\t\t{\n\t\t\t\t$this->error = 'ErrorLoginAlreadyExists';\n\t\t\t\tdol_syslog(get_class($this).\"::create \".$this->error, LOG_WARNING);\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -6;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"user (datec,login,ldap_sid,entity)\";\n\t\t\t\t$sql.= \" VALUES('\".$this->db->idate($this->datec).\"','\".$this->db->escape($this->login).\"','\".$this->db->escape($this->ldap_sid).\"',\".$this->db->escape($this->entity).\")\";\n\t\t\t\t$result=$this->db->query($sql);\n\n\t\t\t\tdol_syslog(get_class($this).\"::create\", LOG_DEBUG);\n\t\t\t\tif ($result)\n\t\t\t\t{\n\t\t\t\t\t$this->id = $this->db->last_insert_id(MAIN_DB_PREFIX.\"user\");\n\n\t\t\t\t\t// Set default rights\n\t\t\t\t\tif ($this->set_default_rights() < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->error='ErrorFailedToSetDefaultRightOfUser';\n\t\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\t\treturn -5;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update minor fields\n\t\t\t\t\t$result = $this->update($user,1,1);\n\t\t\t\t\tif ($result < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\t\treturn -4;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (! empty($conf->global->STOCK_USERSTOCK_AUTOCREATE))\n\t\t\t\t\t{\n\t\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/product/stock/class/entrepot.class.php';\n\t\t\t\t\t\t$langs->load(\"stocks\");\n\t\t\t\t\t\t$entrepot = new Entrepot($this->db);\n\t\t\t\t\t\t$entrepot->libelle = $langs->trans(\"PersonalStock\",$this->getFullName($langs));\n\t\t\t\t\t\t$entrepot->description = $langs->trans(\"ThisWarehouseIsPersonalStock\",$this->getFullName($langs));\n\t\t\t\t\t\t$entrepot->statut = 1;\n\t\t\t\t\t\t$entrepot->country_id = $mysoc->country_id;\n\t\t\t\t\t\t$entrepot->create($user);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (! $notrigger)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Call trigger\n\t\t\t\t\t\t$result=$this->call_trigger('USER_CREATE',$user);\n\t\t\t\t\t\tif ($result < 0) { $error++; }\n\t\t\t\t\t\t// End call triggers\n\t\t\t\t\t}\n\n\t\t\t\t\tif (! $error)\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->db->commit();\n\t\t\t\t\t\treturn $this->id;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t//$this->error=$interface->error;\n\t\t\t\t\t\tdol_syslog(get_class($this).\"::create \".$this->error, LOG_ERR);\n\t\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\t\treturn -3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->error=$this->db->lasterror();\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Create a user from a contact object. User will be internal but if contact is linked to a third party, user will be external\n\t *\n\t *  @param\tContact\t$contact    Object for source contact\n\t * \t@param  string\t$login      Login to force\n\t *  @param  string\t$password   Password to force\n\t *  @return int \t\t\t\t<0 if error, if OK returns id of created user\n\t */\n\tfunction create_from_contact($contact,$login='',$password='')\n\t{\n\t\tglobal $conf,$user,$langs;\n\n\t\t$error=0;\n\n\t\t// Define parameters\n\t\t$this->admin\t\t= 0;\n\t\t$this->lastname\t\t= $contact->lastname;\n\t\t$this->firstname\t= $contact->firstname;\n\t\t$this->gender\t\t= $contact->gender;\n\t\t$this->email\t\t= $contact->email;\n\t\t$this->skype \t\t= $contact->skype;\n\t\t$this->office_phone\t= $contact->phone_pro;\n\t\t$this->office_fax\t= $contact->fax;\n\t\t$this->user_mobile\t= $contact->phone_mobile;\n\t\t$this->address      = $contact->address;\n\t\t$this->zip          = $contact->zip;\n\t\t$this->town         = $contact->town;\n\t\t$this->state_id     = $contact->state_id;\n\t\t$this->country_id   = $contact->country_id;\n\t\t$this->employee     = 0;\n\n\t\tif (empty($login)) $login=strtolower(substr($contact->firstname, 0, 4)) . strtolower(substr($contact->lastname, 0, 4));\n\t\t$this->login = $login;\n\n\t\t$this->db->begin();\n\n\t\t// Cree et positionne $this->id\n\t\t$result=$this->create($user);\n\t\tif ($result > 0)\n\t\t{\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t$sql.= \" SET fk_socpeople=\".$contact->id;\n\t\t\tif ($contact->socid) $sql.=\", fk_soc=\".$contact->socid;\n\t\t\t$sql.= \" WHERE rowid=\".$this->id;\n\t\t\t$resql=$this->db->query($sql);\n\n\t\t\tdol_syslog(get_class($this).\"::create_from_contact\", LOG_DEBUG);\n\t\t\tif ($resql)\n\t\t\t{\n\t\t\t\t$this->context['createfromcontact']='createfromcontact';\n\n\t\t\t\t// Call trigger\n\t\t\t\t$result=$this->call_trigger('USER_CREATE',$user);\n\t\t\t\tif ($result < 0) { $error++; $this->db->rollback(); return -1; }\n\t\t\t\t// End call triggers\n\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn $this->id;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->error=$this->db->error();\n\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// $this->error deja positionne\n\t\t\tdol_syslog(get_class($this).\"::create_from_contact - 0\");\n\n\t\t\t$this->db->rollback();\n\t\t\treturn $result;\n\t\t}\n\n\t}\n\n\t/**\n\t *  Create a user into database from a member object\n\t *\n\t *  @param\tAdherent\t$member\t\tObject member source\n\t * \t@param\tstring\t\t$login\t\tLogin to force\n\t *  @return int\t\t\t\t\t\t<0 if KO, if OK, return id of created account\n\t */\n\tfunction create_from_member($member,$login='')\n\t{\n\t\tglobal $conf,$user,$langs;\n\n\t\t// Positionne parametres\n\t\t$this->admin = 0;\n\t\t$this->lastname     = $member->lastname;\n\t\t$this->firstname    = $member->firstname;\n\t\t$this->gender\t\t= $member->gender;\n\t\t$this->email        = $member->email;\n\t\t$this->fk_member    = $member->id;\n\t\t$this->pass         = $member->pass;\n\t\t$this->address      = $member->address;\n\t\t$this->zip          = $member->zip;\n\t\t$this->town         = $member->town;\n\t\t$this->state_id     = $member->state_id;\n\t\t$this->country_id   = $member->country_id;\n\n\t\tif (empty($login)) $login=strtolower(substr($member->firstname, 0, 4)) . strtolower(substr($member->lastname, 0, 4));\n\t\t$this->login = $login;\n\n\t\t$this->db->begin();\n\n\t\t// Create and set $this->id\n\t\t$result=$this->create($user);\n\t\tif ($result > 0)\n\t\t{\n\t\t\t$newpass=$this->setPassword($user,$this->pass);\n\t\t\tif (is_numeric($newpass) && $newpass < 0) $result=-2;\n\n\t\t\tif ($result > 0 && $member->fk_soc)\t// If member is linked to a thirdparty\n\t\t\t{\n\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t\t$sql.= \" SET fk_soc=\".$member->fk_soc;\n\t\t\t\t$sql.= \" WHERE rowid=\".$this->id;\n\n\t\t\t\tdol_syslog(get_class($this).\"::create_from_member\", LOG_DEBUG);\n\t\t\t\t$resql=$this->db->query($sql);\n\t\t\t\tif ($resql)\n\t\t\t\t{\n\t\t\t\t\t$this->db->commit();\n\t\t\t\t\treturn $this->id;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->error=$this->db->lasterror();\n\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($result > 0)\n\t\t{\n\t\t\t$this->db->commit();\n\t\t\treturn $this->id;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// $this->error deja positionne\n\t\t\t$this->db->rollback();\n\t\t\treturn -2;\n\t\t}\n\t}\n\n\t/**\n\t *    Assign rights by default\n\t *\n\t *    @return     integer erreur <0, si ok renvoi le nbre de droits par defaut positionnes\n\t */\n\tfunction set_default_rights()\n\t{\n\t\tglobal $conf;\n\n\t\t$sql = \"SELECT id FROM \".MAIN_DB_PREFIX.\"rights_def\";\n\t\t$sql.= \" WHERE bydefault = 1\";\n\t\t$sql.= \" AND entity = \".$conf->entity;\n\n\t\t$resql=$this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t$i = 0;\n\t\t\t$rd = array();\n\t\t\twhile ($i < $num)\n\t\t\t{\n\t\t\t\t$row = $this->db->fetch_row($resql);\n\t\t\t\t$rd[$i] = $row[0];\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->db->free($resql);\n\t\t}\n\t\t$i = 0;\n\t\twhile ($i < $num)\n\t\t{\n\n\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_rights WHERE fk_user = $this->id AND fk_id=$rd[$i]\";\n\t\t\t$result=$this->db->query($sql);\n\n\t\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"user_rights (fk_user, fk_id) VALUES ($this->id, $rd[$i])\";\n\t\t\t$result=$this->db->query($sql);\n\t\t\tif (! $result) return -1;\n\t\t\t$i++;\n\t\t}\n\n\t\treturn $i;\n\t}\n\n\t/**\n\t *  \tUpdate a user into database (and also password if this->pass is defined)\n\t *\n\t *\t\t@param\tUser\t$user\t\t\t\tUser qui fait la mise a jour\n\t *    \t@param  int\t\t$notrigger\t\t\t1 ne declenche pas les triggers, 0 sinon\n\t *\t\t@param\tint\t\t$nosyncmember\t\t0=Synchronize linked member (standard info), 1=Do not synchronize linked member\n\t *\t\t@param\tint\t\t$nosyncmemberpass\t0=Synchronize linked member (password), 1=Do not synchronize linked member\n\t *\t\t@param\tint\t\t$nosynccontact\t\t0=Synchronize linked contact, 1=Do not synchronize linked contact\n\t *    \t@return int \t\t        \t\t<0 si KO, >=0 si OK\n\t */\n\tfunction update($user, $notrigger=0, $nosyncmember=0, $nosyncmemberpass=0, $nosynccontact=0)\n\t{\n\t\tglobal $conf, $langs;\n\n\t\t$nbrowsaffected=0;\n\t\t$error=0;\n\n\t\tdol_syslog(get_class($this).\"::update notrigger=\".$notrigger.\", nosyncmember=\".$nosyncmember.\", nosyncmemberpass=\".$nosyncmemberpass);\n\n\t\t// Clean parameters\n\t\t$this->lastname     = trim($this->lastname);\n\t\t$this->firstname    = trim($this->firstname);\n\t\t$this->employee    \t= $this->employee?$this->employee:0;\n\t\t$this->login        = trim($this->login);\n\t\t$this->gender       = trim($this->gender);\n\t\t$this->birth        = trim($this->birth);\n\t\t$this->pass         = trim($this->pass);\n\t\t$this->api_key      = trim($this->api_key);\n\t\t$this->address\t\t= $this->address?trim($this->address):trim($this->address);\n\t\t$this->zip\t\t\t= $this->zip?trim($this->zip):trim($this->zip);\n\t\t$this->town\t\t\t= $this->town?trim($this->town):trim($this->town);\n\t\t$this->state_id\t\t= trim($this->state_id);\n\t\t$this->country_id\t= ($this->country_id > 0)?$this->country_id:0;\n\t\t$this->office_phone = trim($this->office_phone);\n\t\t$this->office_fax   = trim($this->office_fax);\n\t\t$this->user_mobile  = trim($this->user_mobile);\n\t\t$this->email        = trim($this->email);\n\t\t$this->skype        = trim($this->skype);\n\t\t$this->job    \t\t= trim($this->job);\n\t\t$this->signature    = trim($this->signature);\n\t\t$this->note         = trim($this->note);\n\t\t$this->openid       = trim(empty($this->openid)?'':$this->openid);    // Avoid warning\n\t\t$this->admin        = $this->admin?$this->admin:0;\n\t\t$this->address\t\t= empty($this->address)?'':$this->address;\n\t\t$this->zip\t\t\t= empty($this->zip)?'':$this->zip;\n\t\t$this->town\t\t\t= empty($this->town)?'':$this->town;\n\t\t$this->accountancy_code = trim($this->accountancy_code);\n\t\t$this->color \t\t= empty($this->color)?'':$this->color;\n\t\t$this->dateemployment \t= empty($this->dateemployment)?'':$this->dateemployment;\n\n\t\t// Check parameters\n\t\tif (! empty($conf->global->USER_MAIL_REQUIRED) && ! isValidEMail($this->email))\n\t\t{\n\t\t\t$langs->load(\"errors\");\n\t\t\t$this->error = $langs->trans(\"ErrorBadEMail\",$this->email);\n\t\t\treturn -1;\n\t\t}\n\t\tif (empty($this->login))\n\t\t{\n\t\t\t$langs->load(\"errors\");\n\t\t\t$this->error = $langs->trans(\"ErrorFieldRequired\",$this->login);\n\t\t\treturn -1;\n\t\t}\n\n\t\t$this->db->begin();\n\n\t\t// Update datas\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user SET\";\n\t\t$sql.= \" lastname = '\".$this->db->escape($this->lastname).\"'\";\n\t\t$sql.= \", firstname = '\".$this->db->escape($this->firstname).\"'\";\n\t\t$sql.= \", employee = \".$this->employee;\n\t\t$sql.= \", login = '\".$this->db->escape($this->login).\"'\";\n\t\t$sql.= \", api_key = \".($this->api_key ? \"'\".$this->db->escape($this->api_key).\"'\" : \"null\");\n\t\t$sql.= \", gender = \".($this->gender != -1 ? \"'\".$this->db->escape($this->gender).\"'\" : \"null\");\t// 'man' or 'woman'\n\t\t$sql.= \", birth=\".(strval($this->birth)!='' ? \"'\".$this->db->idate($this->birth).\"'\" : 'null');\n\t\tif (! empty($user->admin)) $sql.= \", admin = \".$this->admin;\t// admin flag can be set/unset only by an admin user\n\t\t$sql.= \", address = '\".$this->db->escape($this->address).\"'\";\n\t\t$sql.= \", zip = '\".$this->db->escape($this->zip).\"'\";\n\t\t$sql.= \", town = '\".$this->db->escape($this->town).\"'\";\n\t\t$sql.= \", fk_state = \".((! empty($this->state_id) && $this->state_id > 0)?\"'\".$this->db->escape($this->state_id).\"'\":\"null\");\n\t\t$sql.= \", fk_country = \".((! empty($this->country_id) && $this->country_id > 0)?\"'\".$this->db->escape($this->country_id).\"'\":\"null\");\n\t\t$sql.= \", office_phone = '\".$this->db->escape($this->office_phone).\"'\";\n\t\t$sql.= \", office_fax = '\".$this->db->escape($this->office_fax).\"'\";\n\t\t$sql.= \", user_mobile = '\".$this->db->escape($this->user_mobile).\"'\";\n\t\t$sql.= \", email = '\".$this->db->escape($this->email).\"'\";\n\t\t$sql.= \", skype = '\".$this->db->escape($this->skype).\"'\";\n\t\t$sql.= \", job = '\".$this->db->escape($this->job).\"'\";\n\t\t$sql.= \", signature = '\".$this->db->escape($this->signature).\"'\";\n\t\t$sql.= \", accountancy_code = '\".$this->db->escape($this->accountancy_code).\"'\";\n\t\t$sql.= \", color = '\".$this->db->escape($this->color).\"'\";\n\t\t$sql.= \", dateemployment=\".(strval($this->dateemployment)!='' ? \"'\".$this->db->idate($this->dateemployment).\"'\" : 'null');\n\t\t$sql.= \", note = '\".$this->db->escape($this->note).\"'\";\n\t\t$sql.= \", photo = \".($this->photo?\"'\".$this->db->escape($this->photo).\"'\":\"null\");\n\t\t$sql.= \", openid = \".($this->openid?\"'\".$this->db->escape($this->openid).\"'\":\"null\");\n\t\t$sql.= \", fk_user = \".($this->fk_user > 0?\"'\".$this->db->escape($this->fk_user).\"'\":\"null\");\n\t\tif (isset($this->thm) || $this->thm != '')                 $sql.= \", thm= \".($this->thm != ''?\"'\".$this->db->escape($this->thm).\"'\":\"null\");\n\t\tif (isset($this->tjm) || $this->tjm != '')                 $sql.= \", tjm= \".($this->tjm != ''?\"'\".$this->db->escape($this->tjm).\"'\":\"null\");\n\t\tif (isset($this->salary) || $this->salary != '')           $sql.= \", salary= \".($this->salary != ''?\"'\".$this->db->escape($this->salary).\"'\":\"null\");\n\t\tif (isset($this->salaryextra) || $this->salaryextra != '') $sql.= \", salaryextra= \".($this->salaryextra != ''?\"'\".$this->db->escape($this->salaryextra).\"'\":\"null\");\n\t\t$sql.= \", weeklyhours= \".($this->weeklyhours != ''?\"'\".$this->db->escape($this->weeklyhours).\"'\":\"null\");\n\t\t$sql.= \", entity = '\".$this->db->escape($this->entity).\"'\";\n\t\t$sql.= \", default_range = \".($this->default_range > 0 ? $this->default_range : 'null');\n\t\t$sql.= \", default_c_exp_tax_cat = \".($this->default_c_exp_tax_cat > 0 ? $this->default_c_exp_tax_cat : 'null');\n\n\t\t$sql.= \" WHERE rowid = \".$this->id;\n\n\t\tdol_syslog(get_class($this).\"::update\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$nbrowsaffected+=$this->db->affected_rows($resql);\n\n\t\t\t// Update password\n\t\t\tif (!empty($this->pass))\n\t\t\t{\n\t\t\t\tif ($this->pass != $this->pass_indatabase && $this->pass != $this->pass_indatabase_crypted)\n\t\t\t\t{\n\t\t\t\t\t// Si mot de passe saisi et different de celui en base\n\t\t\t\t\t$result=$this->setPassword($user,$this->pass,0,$notrigger,$nosyncmemberpass);\n\t\t\t\t\tif (! $nbrowsaffected) $nbrowsaffected++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If user is linked to a member, remove old link to this member\n\t\t\tif ($this->fk_member > 0)\n\t\t\t{\n\t\t\t\tdol_syslog(get_class($this).\"::update remove link with member. We will recreate it later\", LOG_DEBUG);\n\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user SET fk_member = NULL where fk_member = \".$this->fk_member;\n\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\tif (! $resql) { $this->error=$this->db->error(); $this->db->rollback(); return -5; }\n\t\t\t}\n\t\t\t// Set link to user\n\t\t\tdol_syslog(get_class($this).\"::update set link with member\", LOG_DEBUG);\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user SET fk_member =\".($this->fk_member>0?$this->fk_member:'null').\" where rowid = \".$this->id;\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif (! $resql) { $this->error=$this->db->error(); $this->db->rollback(); return -5; }\n\n\t\t\tif ($nbrowsaffected)\t// If something has changed in data\n\t\t\t{\n\t\t\t\tif ($this->fk_member > 0 && ! $nosyncmember)\n\t\t\t\t{\n\t\t\t\t\tdol_syslog(get_class($this).\"::update user is linked with a member. We try to update member too.\", LOG_DEBUG);\n\n\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/adherents/class/adherent.class.php';\n\n\t\t\t\t\t// This user is linked with a member, so we also update member information\n\t\t\t\t\t// if this is an update.\n\t\t\t\t\t$adh=new Adherent($this->db);\n\t\t\t\t\t$result=$adh->fetch($this->fk_member);\n\n\t\t\t\t\tif ($result >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$adh->firstname=$this->firstname;\n\t\t\t\t\t\t$adh->lastname=$this->lastname;\n\t\t\t\t\t\t$adh->login=$this->login;\n\t\t\t\t\t\t$adh->gender=$this->gender;\n\t\t\t\t\t\t$adh->birth=$this->birth;\n\n\t\t\t\t\t\t$adh->pass=$this->pass;\n\n\t\t\t\t\t\t$adh->societe=(empty($adh->societe) && $this->societe_id ? $this->societe_id : $adh->societe);\n\n\t\t\t\t\t\t$adh->address=$this->address;\n\t\t\t\t\t\t$adh->town=$this->town;\n\t\t\t\t\t\t$adh->zip=$this->zip;\n\t\t\t\t\t\t$adh->state_id=$this->state_id;\n\t\t\t\t\t\t$adh->country_id=$this->country_id;\n\t\t\t\t\t\t\n\t\t\t\t\t\t$adh->email=$this->email;\n\t\t\t\t\t\t$adh->skype=$this->skype;\n\t\t\t\t\t\t$adh->phone=$this->office_phone;\n\t\t\t\t\t\t$adh->phone_mobile=$this->user_mobile;\n\n\t\t\t\t\t\t$adh->user_id=$this->id;\n\t\t\t\t\t\t$adh->user_login=$this->login;\n\n\t\t\t\t\t\t$result=$adh->update($user,0,1,0);\n\t\t\t\t\t\tif ($result < 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->error=$adh->error;\n\t\t\t\t\t\t\t$this->errors=$adh->errors;\n\t\t\t\t\t\t\tdol_syslog(get_class($this).\"::update error after calling adh->update to sync it with user: \".$this->error, LOG_ERR);\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->error=$adh->error;\n\t\t\t\t\t\t$this->errors=$adh->errors;\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ($this->contact_id > 0 && ! $nosynccontact)\n\t\t\t\t{\n\t\t\t\t\tdol_syslog(get_class($this).\"::update user is linked with a contact. We try to update contact too.\", LOG_DEBUG);\n\n\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/contact/class/contact.class.php';\n\n\t\t\t\t\t// This user is linked with a contact, so we also update contact information\n\t\t\t\t\t// if this is an update.\n\t\t\t\t\t$tmpobj=new Contact($this->db);\n\t\t\t\t\t$result=$tmpobj->fetch($this->contact_id);\n\n\t\t\t\t\tif ($result >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$tmpobj->firstname=$this->firstname;\n\t\t\t\t\t\t$tmpobj->lastname=$this->lastname;\n\t\t\t\t\t\t$tmpobj->login=$this->login;\n\t\t\t\t\t\t$tmpobj->gender=$this->gender;\n\t\t\t\t\t\t$tmpobj->birth=$this->birth;\n\n\t\t\t\t\t\t//$tmpobj->pass=$this->pass;\n\n\t\t\t\t\t\t//$tmpobj->societe=(empty($tmpobj->societe) && $this->societe_id ? $this->societe_id : $tmpobj->societe);\n\n\t\t\t\t\t\t$tmpobj->email=$this->email;\n\t\t\t\t\t\t$tmpobj->skype=$this->skype;\n\t\t\t\t\t\t$tmpobj->phone_pro=$this->office_phone;\n\t\t\t\t\t\t$tmpobj->phone_mobile=$this->user_mobile;\n\t\t\t\t\t\t$tmpobj->fax=$this->office_fax;\n\n\t\t\t\t\t\t$tmpobj->address=$this->address;\n\t\t\t\t\t\t$tmpobj->town=$this->town;\n\t\t\t\t\t\t$tmpobj->zip=$this->zip;\n\t\t\t\t\t\t$tmpobj->state_id=$this->state_id;\n\t\t\t\t\t\t$tmpobj->country_id=$this->country_id;\n\n\t\t\t\t\t\t$tmpobj->user_id=$this->id;\n\t\t\t\t\t\t$tmpobj->user_login=$this->login;\n\n\t\t\t\t\t\t$result=$tmpobj->update($tmpobj->id, $user, 0, 'update', 1);\n\t\t\t\t\t\tif ($result < 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->error=$tmpobj->error;\n\t\t\t\t\t\t\t$this->errors=$tmpobj->errors;\n\t\t\t\t\t\t\tdol_syslog(get_class($this).\"::update error after calling adh->update to sync it with user: \".$this->error, LOG_ERR);\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->error=$tmpobj->error;\n\t\t\t\t\t\t$this->errors=$tmpobj->errors;\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$action='update';\n\n\t\t\t// Actions on extra fields\n\t\t\tif (! $error && empty($conf->global->MAIN_EXTRAFIELDS_DISABLED))\n\t\t\t{\n\t\t\t\t$result=$this->insertExtraFields();\n\t\t\t\tif ($result < 0)\n\t\t\t\t{\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (! $error && ! $notrigger)\n\t\t\t{\n\t\t\t\t// Call trigger\n\t\t\t\t$result=$this->call_trigger('USER_MODIFY',$user);\n\t\t\t\tif ($result < 0) { $error++; }\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\tif (! $error)\n\t\t\t{\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn $nbrowsaffected;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdol_syslog(get_class($this).\"::update error=\".$this->error,LOG_ERR);\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\t$this->db->rollback();\n\t\t\treturn -2;\n\t\t}\n\n\t}\n\n\t/**\n\t *    Mise a jour en base de la date de derniere connexion d'un utilisateur\n\t *\t  Fonction appelee lors d'une nouvelle connexion\n\t *\n\t *    @return     <0 si echec, >=0 si ok\n\t */\n\tfunction update_last_login_date()\n\t{\n\t\t$now=dol_now();\n\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user SET\";\n\t\t$sql.= \" datepreviouslogin = datelastlogin,\";\n\t\t$sql.= \" datelastlogin = '\".$this->db->idate($now).\"',\";\n\t\t$sql.= \" tms = tms\";    // La date de derniere modif doit changer sauf pour la mise a jour de date de derniere connexion\n\t\t$sql.= \" WHERE rowid = \".$this->id;\n\n\t\tdol_syslog(get_class($this).\"::update_last_login_date user->id=\".$this->id.\" \".$sql, LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$this->datepreviouslogin=$this->datelastlogin;\n\t\t\t$this->datelastlogin=$now;\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror().' sql='.$sql;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Change password of a user\n\t *\n\t *  @param\tUser\t$user             \t\tObject user of user making change\n\t *  @param  string\t$password         \t\tNew password in clear text (to generate if not provided)\n\t *\t@param\tint\t\t$changelater\t\t\t1=Change password only after clicking on confirm email\n\t *\t@param\tint\t\t$notrigger\t\t\t\t1=Does not launch triggers\n\t *\t@param\tint\t\t$nosyncmember\t        Do not synchronize linked member\n\t *  @return string \t\t\t          \t\tIf OK return clear password, 0 if no change, < 0 if error\n\t */\n\tfunction setPassword($user, $password='', $changelater=0, $notrigger=0, $nosyncmember=0)\n\t{\n\t\tglobal $conf, $langs;\n\t\trequire_once DOL_DOCUMENT_ROOT .'/core/lib/security2.lib.php';\n\n\t\t$error=0;\n\n\t\tdol_syslog(get_class($this).\"::setPassword user=\".$user->id.\" password=\".preg_replace('/./i','*',$password).\" changelater=\".$changelater.\" notrigger=\".$notrigger.\" nosyncmember=\".$nosyncmember, LOG_DEBUG);\n\n\t\t// If new password not provided, we generate one\n\t\tif (! $password)\n\t\t{\n\t\t\t$password=getRandomPassword(false);\n\t\t}\n\n\t\t// Crypt password\n\t\t$password_crypted = dol_hash($password);\n\n\t\t// Mise a jour\n\t\tif (! $changelater)\n\t\t{\n\t\t\tif (! is_object($this->oldcopy)) $this->oldcopy = clone $this;\n\n\t\t\t$this->db->begin();\n\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t$sql.= \" SET pass_crypted = '\".$this->db->escape($password_crypted).\"',\";\n\t\t\t$sql.= \" pass_temp = null\";\n\t\t\tif (! empty($conf->global->DATABASE_PWD_ENCRYPTED))\n\t\t\t{\n\t\t\t\t$sql.= \", pass = null\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$sql.= \", pass = '\".$this->db->escape($password).\"'\";\n\t\t\t}\n\t\t\t$sql.= \" WHERE rowid = \".$this->id;\n\n\t\t\tdol_syslog(get_class($this).\"::setPassword\", LOG_DEBUG);\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result)\n\t\t\t{\n\t\t\t\tif ($this->db->affected_rows($result))\n\t\t\t\t{\n\t\t\t\t\t$this->pass=$password;\n\t\t\t\t\t$this->pass_indatabase=$password;\n\t\t\t\t\t$this->pass_indatabase_crypted=$password_crypted;\n\n\t\t\t\t\tif ($this->fk_member && ! $nosyncmember)\n\t\t\t\t\t{\n\t\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/adherents/class/adherent.class.php';\n\n\t\t\t\t\t\t// This user is linked with a member, so we also update members informations\n\t\t\t\t\t\t// if this is an update.\n\t\t\t\t\t\t$adh=new Adherent($this->db);\n\t\t\t\t\t\t$result=$adh->fetch($this->fk_member);\n\n\t\t\t\t\t\tif ($result >= 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$result=$adh->setPassword($user,$this->pass,(empty($conf->global->DATABASE_PWD_ENCRYPTED)?0:1),1);\t// Cryptage non gere dans module adherent\n\t\t\t\t\t\t\tif ($result < 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->error=$adh->error;\n\t\t\t\t\t\t\t\tdol_syslog(get_class($this).\"::setPassword \".$this->error,LOG_ERR);\n\t\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->error=$adh->error;\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tdol_syslog(get_class($this).\"::setPassword notrigger=\".$notrigger.\" error=\".$error,LOG_DEBUG);\n\n\t\t\t\t\tif (! $error && ! $notrigger)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Call trigger\n\t\t\t\t\t\t$result=$this->call_trigger('USER_NEW_PASSWORD',$user);\n\t\t\t\t\t\tif ($result < 0) { $error++; $this->db->rollback(); return -1; }\n\t\t\t\t\t\t// End call triggers\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->db->commit();\n\t\t\t\t\treturn $this->pass;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->db->rollback();\n\t\t\t\tdol_print_error($this->db);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// We store clear password in password temporary field.\n\t\t\t// After receiving confirmation link, we will crypt it and store it in pass_crypted\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t$sql.= \" SET pass_temp = '\".$this->db->escape($password).\"'\";\n\t\t\t$sql.= \" WHERE rowid = \".$this->id;\n\n\t\t\tdol_syslog(get_class($this).\"::setPassword\", LOG_DEBUG);\t// No log\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result)\n\t\t\t{\n\t\t\t\treturn $password;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdol_print_error($this->db);\n\t\t\t\treturn -3;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t *  Send new password by email\n\t *\n\t *  @param\tUser\t$user           Object user that send email\n\t *  @param\tstring\t$password       New password\n\t *\t@param\tint\t\t$changelater\t0=Send clear passwod into email, 1=Change password only after clicking on confirm email. @TODO Add method 2 = Send link to reset password\n\t *  @return int \t\t            < 0 si erreur, > 0 si ok\n\t */\n\tfunction send_password($user, $password='', $changelater=0)\n\t{\n\t\tglobal $conf,$langs;\n\t\tglobal $dolibarr_main_url_root;\n\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/CMailFile.class.php';\n\n\t\t$msgishtml=0;\n\n\t\t// Define $msg\n\t\t$mesg = '';\n\n\t\t$outputlangs=new Translate(\"\",$conf);\n\t\tif (isset($this->conf->MAIN_LANG_DEFAULT)\n\t\t&& $this->conf->MAIN_LANG_DEFAULT != 'auto')\n\t\t{\t// If user has defined its own language (rare because in most cases, auto is used)\n\t\t\t$outputlangs->getDefaultLang($this->conf->MAIN_LANG_DEFAULT);\n\t\t}\n\t\telse\n\t\t{\t// If user has not defined its own language, we used current language\n\t\t\t$outputlangs=$langs;\n\t\t}\n\n\t\t$outputlangs->load(\"main\");\n\t\t$outputlangs->load(\"errors\");\n\t\t$outputlangs->load(\"users\");\n\t\t$outputlangs->load(\"other\");\n\n\t\t$appli=constant('DOL_APPLICATION_TITLE');\n\t\tif (!empty($conf->global->MAIN_APPLICATION_TITLE)) $appli=$conf->global->MAIN_APPLICATION_TITLE;\n\n\t\t$subject = $outputlangs->transnoentitiesnoconv(\"SubjectNewPassword\", $appli);\n\n\t\t// Define $urlwithroot\n\t\t$urlwithouturlroot=preg_replace('/'.preg_quote(DOL_URL_ROOT,'/').'$/i','',trim($dolibarr_main_url_root));\n\t\t$urlwithroot=$urlwithouturlroot.DOL_URL_ROOT;\t\t// This is to use external domain name found into config file\n\n\t\tif (! $changelater)\n\t\t{\n\t\t\t$url = $urlwithroot.'/';\n\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"RequestToResetPasswordReceived\").\".\\n\";\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"NewKeyIs\").\" :\\n\\n\";\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"Login\").\" = \".$this->login.\"\\n\";\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"Password\").\" = \".$password.\"\\n\\n\";\n\t\t\t$mesg.= \"\\n\";\n\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"ClickHereToGoTo\", $appli).': '.$url.\"\\n\\n\";\n\t\t\t$mesg.= \"--\\n\";\n\t\t\t$mesg.= $user->getFullName($outputlangs);\t// Username that make then sending\n\n\t\t\tdol_syslog(get_class($this).\"::send_password changelater is off, url=\".$url);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$url = $urlwithroot.'/user/passwordforgotten.php?action=validatenewpassword&username='.$this->login.\"&passwordhash=\".dol_hash($password);\n\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"RequestToResetPasswordReceived\").\"\\n\";\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"NewKeyWillBe\").\" :\\n\\n\";\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"Login\").\" = \".$this->login.\"\\n\";\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"Password\").\" = \".$password.\"\\n\\n\";\n\t\t\t$mesg.= \"\\n\";\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"YouMustClickToChange\").\" :\\n\";\n\t\t\t$mesg.= $url.\"\\n\\n\";\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"ForgetIfNothing\").\"\\n\\n\";\n\n\t\t\tdol_syslog(get_class($this).\"::send_password changelater is on, url=\".$url);\n\t\t}\n\n\t\t$mailfile = new CMailFile(\n\t\t\t$subject,\n\t\t\t$this->email,\n\t\t\t$conf->global->MAIN_MAIL_EMAIL_FROM,\n\t\t\t$mesg,\n\t\t\tarray(),\n\t\t\tarray(),\n\t\t\tarray(),\n\t\t\t'',\n\t\t\t'',\n\t\t\t0,\n\t\t\t$msgishtml\n\t\t);\n\n\t\tif ($mailfile->sendfile())\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$langs->trans(\"errors\");\n\t\t\t$this->error=$langs->trans(\"ErrorFailedToSendPassword\").' '.$mailfile->error;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * \t\tRenvoie la derniere erreur fonctionnelle de manipulation de l'objet\n\t *\n\t * \t\t@return    string      chaine erreur\n\t */\n\tfunction error()\n\t{\n\t\treturn $this->error;\n\t}\n\n\n\t/**\n\t *    \tRead clicktodial information for user\n\t *\n\t * \t\t@return\t\t<0 if KO, >0 if OK\n\t */\n\tfunction fetch_clicktodial()\n\t{\n\t\t$sql = \"SELECT url, login, pass, poste \";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"user_clicktodial as u\";\n\t\t$sql.= \" WHERE u.fk_user = \".$this->id;\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\tif ($this->db->num_rows($resql))\n\t\t\t{\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\t$this->clicktodial_url = $obj->url;\n\t\t\t\t$this->clicktodial_login = $obj->login;\n\t\t\t\t$this->clicktodial_password = $obj->pass;\n\t\t\t\t$this->clicktodial_poste = $obj->poste;\n\t\t\t}\n\n\t\t\t$this->clicktodial_loaded = 1;\t// Data loaded (found or not)\n\n\t\t\t$this->db->free($resql);\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Update clicktodial info\n\t *\n\t *  @return\tinteger\n\t */\n\tfunction update_clicktodial()\n\t{\n\t\t$this->db->begin();\n\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_clicktodial\";\n\t\t$sql .= \" WHERE fk_user = \".$this->id;\n\n\t\tdol_syslog(get_class($this).'::update_clicktodial', LOG_DEBUG);\n\t\t$result = $this->db->query($sql);\n\n\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"user_clicktodial\";\n\t\t$sql .= \" (fk_user,url,login,pass,poste)\";\n\t\t$sql .= \" VALUES (\".$this->id;\n\t\t$sql .= \", '\". $this->db->escape($this->clicktodial_url) .\"'\";\n\t\t$sql .= \", '\". $this->db->escape($this->clicktodial_login) .\"'\";\n\t\t$sql .= \", '\". $this->db->escape($this->clicktodial_password) .\"'\";\n\t\t$sql .= \", '\". $this->db->escape($this->clicktodial_poste) .\"')\";\n\n\t\tdol_syslog(get_class($this).'::update_clicktodial', LOG_DEBUG);\n\t\t$result = $this->db->query($sql);\n\t\tif ($result)\n\t\t{\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->db->rollback();\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Add user into a group\n\t *\n\t *  @param\tint\t$group      Id of group\n\t *  @param  int\t\t$entity     Entity\n\t *  @param  int\t\t$notrigger  Disable triggers\n\t *  @return int  \t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction SetInGroup($group, $entity, $notrigger=0)\n\t{\n\t\tglobal $conf, $langs, $user;\n\n\t\t$error=0;\n\n\t\t$this->db->begin();\n\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"usergroup_user\";\n\t\t$sql.= \" WHERE fk_user  = \".$this->id;\n\t\t$sql.= \" AND fk_usergroup = \".$group;\n\t\t$sql.= \" AND entity = \".$entity;\n\n\t\t$result = $this->db->query($sql);\n\n\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"usergroup_user (entity, fk_user, fk_usergroup)\";\n\t\t$sql.= \" VALUES (\".$entity.\",\".$this->id.\",\".$group.\")\";\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result)\n\t\t{\n\t\t\tif (! $error && ! $notrigger)\n\t\t\t{\n\t\t\t\t$this->newgroupid=$group;    // deprecated. Remove this.\n\t\t\t\t$this->context = array('audit'=>$langs->trans(\"UserSetInGroup\"), 'newgroupid'=>$group);\n\n\t\t\t\t// Call trigger\n\t\t\t\t$result=$this->call_trigger('USER_MODIFY',$user);\n\t\t\t\tif ($result < 0) { $error++; }\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\tif (! $error)\n\t\t\t{\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdol_syslog(get_class($this).\"::SetInGroup \".$this->error, LOG_ERR);\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Remove a user from a group\n\t *\n\t *  @param\tint   $group       Id of group\n\t *  @param  int\t\t$entity      Entity\n\t *  @param  int\t\t$notrigger   Disable triggers\n\t *  @return int  \t\t\t     <0 if KO, >0 if OK\n\t */\n\tfunction RemoveFromGroup($group, $entity, $notrigger=0)\n\t{\n\t\tglobal $conf,$langs,$user;\n\n\t\t$error=0;\n\n\t\t$this->db->begin();\n\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"usergroup_user\";\n\t\t$sql.= \" WHERE fk_user  = \".$this->id;\n\t\t$sql.= \" AND fk_usergroup = \".$group;\n\t\t$sql.= \" AND entity = \".$entity;\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result)\n\t\t{\n\t\t\tif (! $error && ! $notrigger)\n\t\t\t{\n\t\t\t\t$this->oldgroupid=$group;    // deprecated. Remove this.\n\t\t\t\t$this->context = array('audit'=>$langs->trans(\"UserRemovedFromGroup\"), 'oldgroupid'=>$group);\n\n\t\t\t\t// Call trigger\n\t\t\t\t$result=$this->call_trigger('USER_MODIFY',$user);\n\t\t\t\tif ($result < 0) { $error++; }\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\tif (! $error)\n\t\t\t{\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->error=$interface->error;\n\t\t\t\tdol_syslog(get_class($this).\"::RemoveFromGroup \".$this->error, LOG_ERR);\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Return a link with photo\n\t * \tUse this->id,this->photo\n\t *\n\t *\t@param\tint\t\t$width\t\t\tWidth of image\n\t *\t@param\tint\t\t$height\t\t\tHeight of image\n\t *  @param\tstring\t$cssclass\t\tForce a css class\n\t * \t@param\tstring\t$imagesize\t\t'mini', 'small' or '' (original)\n\t *\t@return\tstring\t\t\t\t\tString with URL link\n\t */\n\tfunction getPhotoUrl($width, $height, $cssclass='', $imagesize='')\n\t{\n\t\t$result='';\n\n\t\t$result.='<a href=\"'.DOL_URL_ROOT.'/user/card.php?id='.$this->id.'\">';\n\t\t$result.=Form::showphoto('userphoto', $this, $width, $height, 0, $cssclass, $imagesize);\n\t\t$result.='</a>';\n\n\t\treturn $result;\n\t}\n\n\t/**\n\t *  Return a link to the user card (with optionaly the picto)\n\t * \tUse this->id,this->lastname, this->firstname\n\t *\n\t *\t@param\tint\t\t$withpictoimg\t\t\t\tInclude picto in link (0=No picto, 1=Include picto into link, 2=Only picto, -1=Include photo into link, -2=Only picto photo, -3=Only photo very small)\n\t *\t@param\tstring\t$option\t\t\t\t\t\tOn what the link point to ('leave', 'nolink', )\n\t *  @param  integer $infologin      \t\t\t0=Add default info tooltip, 1=Add complete info tooltip, -1=No info tooltip\n\t *  @param\tinteger\t$notooltip\t\t\t\t\t1=Disable tooltip on picto and name\n\t *  @param\tint\t\t$maxlen\t\t\t\t\t\tMax length of visible user name\n\t *  @param\tint\t\t$hidethirdpartylogo\t\t\tHide logo of thirdparty if user is external user\n\t *  @param  string  $mode               \t\t''=Show firstname and lastname, 'firstname'=Show only firstname, 'login'=Show login\n\t *  @param  string  $morecss            \t\tAdd more css on link\n\t *  @param  int     $save_lastsearch_value    \t-1=Auto, 0=No save of lastsearch_values when clicking, 1=Save lastsearch_values whenclicking\n\t *\t@return\tstring\t\t\t\t\t\t\t\tString with URL\n\t */\n\tfunction getNomUrl($withpictoimg=0, $option='', $infologin=0, $notooltip=0, $maxlen=24, $hidethirdpartylogo=0, $mode='',$morecss='', $save_lastsearch_value=-1)\n\t{\n\t\tglobal $langs, $conf, $db, $hookmanager;\n\t\tglobal $dolibarr_main_authentication, $dolibarr_main_demo;\n\t\tglobal $menumanager;\n\n\t\tif (! empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER) && $withpictoimg) $withpictoimg=0;\n\n\t\t$result=''; $label='';\n\t\t$link=''; $linkstart=''; $linkend='';\n\n\t\tif (! empty($this->photo))\n\t\t{\n\t\t\t$label.= '<div class=\"photointooltip\">';\n\t\t\t$label.= Form::showphoto('userphoto', $this, 0, 60, 0, 'photowithmargin photologintooltip', 'small', 0, 1);\t// Force height to 60 so we total height of tooltip can be calculated and collision can be managed\n\t\t\t$label.= '</div><div style=\"clear: both;\"></div>';\n\t\t}\n\n\t\t// Info Login\n\t\t$label.= '<div class=\"centpercent\">';\n\t\t$label.= '<u>' . $langs->trans(\"User\") . '</u><br>';\n\t\t$label.= '<b>' . $langs->trans('Name') . ':</b> ' . $this->getFullName($langs,'');\n\t\tif (! empty($this->login))\n\t\t\t$label.= '<br><b>' . $langs->trans('Login') . ':</b> ' . $this->login;\n\t\t$label.= '<br><b>' . $langs->trans(\"EMail\").':</b> '.$this->email;\n\t\tif (! empty($this->admin))\n\t\t\t$label.= '<br><b>' . $langs->trans(\"Administrator\").'</b>: '.yn($this->admin);\n\t\tif (! empty($this->socid) )\t// Add thirdparty for external users\n\t\t{\n\t\t\t$thirdpartystatic = new Societe($db);\n\t\t\t$thirdpartystatic->fetch($this->socid);\n\t\t\tif (empty($hidethirdpartylogo)) $companylink = ' '.$thirdpartystatic->getNomUrl(2, (($option == 'nolink')?'nolink':''));\t// picto only of company\n\t\t\t$company=' ('.$langs->trans(\"Company\").': '.$thirdpartystatic->name.')';\n\t\t}\n\t\t$type=($this->socid?$langs->trans(\"External\").$company:$langs->trans(\"Internal\"));\n\t\t$label.= '<br><b>' . $langs->trans(\"Type\") . ':</b> ' . $type;\n\t\t$label.= '<br><b>' . $langs->trans(\"Status\").'</b>: '.$this->getLibStatut(0);\n\t\t$label.='</div>';\n\t\tif ($infologin > 0)\n\t\t{\n\t\t\t$label.= '<br>';\n\t\t\t$label.= '<br><u>'.$langs->trans(\"Connection\").'</u>';\n\t\t\t$label.= '<br><b>'.$langs->trans(\"IPAddress\").'</b>: '.$_SERVER[\"REMOTE_ADDR\"];\n\t\t\tif (! empty($conf->global->MAIN_MODULE_MULTICOMPANY)) $label.= '<br><b>'.$langs->trans(\"ConnectedOnMultiCompany\").':</b> '.$conf->entity.' (user entity '.$this->entity.')';\n\t\t\t$label.= '<br><b>'.$langs->trans(\"AuthenticationMode\").':</b> '.$_SESSION[\"dol_authmode\"].(empty($dolibarr_main_demo)?'':' (demo)');\n\t\t\t$label.= '<br><b>'.$langs->trans(\"ConnectedSince\").':</b> '.dol_print_date($this->datelastlogin,\"dayhour\",'tzuser');\n\t\t\t$label.= '<br><b>'.$langs->trans(\"PreviousConnexion\").':</b> '.dol_print_date($this->datepreviouslogin,\"dayhour\",'tzuser');\n\t\t\t$label.= '<br><b>'.$langs->trans(\"CurrentTheme\").':</b> '.$conf->theme;\n\t\t\t$label.= '<br><b>'.$langs->trans(\"CurrentMenuManager\").':</b> '.$menumanager->name;\n\t\t\t$s=picto_from_langcode($langs->getDefaultLang());\n\t\t\t$label.= '<br><b>'.$langs->trans(\"CurrentUserLanguage\").':</b> '.($s?$s.' ':'').$langs->getDefaultLang();\n\t\t\t$label.= '<br><b>'.$langs->trans(\"Browser\").':</b> '.$conf->browser->name.($conf->browser->version?' '.$conf->browser->version:'').' ('.$_SERVER['HTTP_USER_AGENT'].')';\n\t\t\t$label.= '<br><b>'.$langs->trans(\"Layout\").':</b> '.$conf->browser->layout;\n\t\t\t$label.= '<br><b>'.$langs->trans(\"Screen\").':</b> '.$_SESSION['dol_screenwidth'].' x '.$_SESSION['dol_screenheight'];\n\t\t\tif (! empty($conf->browser->phone)) $label.= '<br><b>'.$langs->trans(\"Phone\").':</b> '.$conf->browser->phone;\n\t\t\tif (! empty($_SESSION[\"disablemodules\"])) $label.= '<br><b>'.$langs->trans(\"DisabledModules\").':</b> <br>'.join(', ',explode(',',$_SESSION[\"disablemodules\"]));\n\t\t}\n\t\tif ($infologin < 0) $label='';\n\n\t\t$url = DOL_URL_ROOT.'/user/card.php?id='.$this->id;\n\t\tif ($option == 'leave') $url = DOL_URL_ROOT.'/holiday/list.php?id='.$this->id;\n\n\t\tif ($option != 'nolink')\n\t\t{\n\t\t\t// Add param to save lastsearch_values or not\n\t\t\t$add_save_lastsearch_values=($save_lastsearch_value == 1 ? 1 : 0);\n\t\t\tif ($save_lastsearch_value == -1 && preg_match('/list\\.php/',$_SERVER[\"PHP_SELF\"])) $add_save_lastsearch_values=1;\n\t\t\tif ($add_save_lastsearch_values) $url.='&save_lastsearch_values=1';\n\t\t}\n\n\t\t$linkstart='<a href=\"'.$url.'\"';\n\t\t$linkclose=\"\";\n\t\tif (empty($notooltip))\n\t\t{\n\t\t\tif (! empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER))\n\t\t\t{\n\t\t\t\t$langs->load(\"users\");\n\t\t\t\t$label=$langs->trans(\"ShowUser\");\n\t\t\t\t$linkclose.=' alt=\"'.dol_escape_htmltag($label, 1).'\"';\n\t\t\t}\n\t\t\t$linkclose.= ' title=\"'.dol_escape_htmltag($label, 1).'\"';\n\t\t\t$linkclose.= ' class=\"classfortooltip'.($morecss?' '.$morecss:'').'\"';\n\n\t\t\t/*\n\t\t\t $hookmanager->initHooks(array('userdao'));\n\t\t\t $parameters=array('id'=>$this->id);\n\t\t\t $reshook=$hookmanager->executeHooks('getnomurltooltip',$parameters,$this,$action);    // Note that $action and $object may have been modified by some hooks\n\t\t\t if ($reshook > 0) $linkclose = $hookmanager->resPrint;\n\t\t\t */\n\t\t}\n\n\t\t$linkstart.=$linkclose.'>';\n\t\t$linkend='</a>';\n\n\t\t//if ($withpictoimg == -1) $result.='<div class=\"nowrap\">';\n\t\t$result.=(($option == 'nolink')?'':$linkstart);\n\t\tif ($withpictoimg)\n\t\t{\n\t\t  \t$paddafterimage='';\n\t\t\tif (abs($withpictoimg) == 1) $paddafterimage='style=\"margin-right: 3px;\"';\n\t\t\t// Only picto\n\t\t\tif ($withpictoimg > 0) $picto='<!-- picto user --><div class=\"inline-block nopadding userimg'.($morecss?' '.$morecss:'').'\">'.img_object('', 'user', $paddafterimage.' '.($notooltip?'':'class=\"classfortooltip\"'), 0, 0, $notooltip?0:1).'</div>';\n\t\t\t// Picto must be a photo\n\t\t\telse $picto='<!-- picto photo user --><div class=\"inline-block nopadding userimg'.($morecss?' '.$morecss:'').'\"'.($paddafterimage?' '.$paddafterimage:'').'>'.Form::showphoto('userphoto', $this, 0, 0, 0, 'userphoto'.($withpictoimg==-3?'small':''), 'mini', 0, 1).'</div>';\n\t\t\t$result.=$picto;\n\t\t}\n\t\tif ($withpictoimg > -2 && $withpictoimg != 2)\n\t\t{\n\t\t\tif (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) $result.='<div class=\"inline-block nopadding valignmiddle usertext'.((! isset($this->statut) || $this->statut)?'':' strikefordisabled').($morecss?' '.$morecss:'').'\">';\n\t\t\tif ($mode == 'login') $result.=dol_trunc($this->login, $maxlen);\n\t\t\telse $result.=$this->getFullName($langs,'',($mode == 'firstname' ? 2 : -1),$maxlen);\n\t\t\tif (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) $result.='</div>';\n\t\t}\n\t\t$result.=(($option == 'nolink')?'':$linkend);\n\t\t//if ($withpictoimg == -1) $result.='</div>';\n\n\t\t$result.=$companylink;\n\n\t\tglobal $action;\n\t\t$hookmanager->initHooks(array('userdao'));\n\t\t$parameters=array('id'=>$this->id, 'getnomurl'=>$result);\n\t\t$reshook=$hookmanager->executeHooks('getNomUrl',$parameters,$this,$action);    // Note that $action and $object may have been modified by some hooks\n\t\tif ($reshook > 0) $result = $hookmanager->resPrint;\n\t\telse $result .= $hookmanager->resPrint;\n\n\t\treturn $result;\n\t}\n\n\t/**\n\t *  Return clickable link of login (eventualy with picto)\n\t *\n\t *\t@param\tint\t\t$withpicto\t\tInclude picto into link\n\t *\t@param\tstring\t$option\t\t\tSur quoi pointe le lien\n\t *\t@return\tstring\t\t\t\t\tChaine avec URL\n\t */\n\tfunction getLoginUrl($withpicto=0,$option='')\n\t{\n\t\tglobal $langs;\n\n\t\t$result='';\n\n\t\t$linkstart = '<a href=\"'.DOL_URL_ROOT.'/user/card.php?id='.$this->id.'\">';\n\t\t$linkend='</a>';\n\n\t\tif ($option == 'xxx')\n\t\t{\n\t\t\t$linkstart = '<a href=\"'.DOL_URL_ROOT.'/user/card.php?id='.$this->id.'\">';\n\t\t\t$linkend='</a>';\n\t\t}\n\n\t\t$result.=$linkstart;\n\t\tif ($withpicto) $result.=img_object($langs->trans(\"ShowUser\"), 'user', 'class=\"paddingright\"');\n\t\t$result.=$this->login;\n\t\t$result.=$linkend;\n\t\treturn $result;\n\t}\n\n\t/**\n\t *  Return label of status of user (active, inactive)\n\t *\n\t *  @param\tint\t\t$mode          0=libelle long, 1=libelle court, 2=Picto + Libelle court, 3=Picto, 4=Picto + Libelle long, 5=Libelle court + Picto\n\t *  @return\tstring \t\t\t       Label of status\n\t */\n\tfunction getLibStatut($mode=0)\n\t{\n\t\treturn $this->LibStatut($this->statut,$mode);\n\t}\n\n\t/**\n\t *  Renvoi le libelle d'un statut donne\n\t *\n\t *  @param\tint\t\t$statut        \tId statut\n\t *  @param  int\t\t$mode          \t0=libelle long, 1=libelle court, 2=Picto + Libelle court, 3=Picto, 4=Picto + Libelle long, 5=Libelle court + Picto\n\t *  @return string \t\t\t       \tLabel of status\n\t */\n\tfunction LibStatut($statut,$mode=0)\n\t{\n\t\tglobal $langs;\n\t\t$langs->load('users');\n\n\t\tif ($mode == 0)\n\t\t{\n\t\t\t$prefix='';\n\t\t\tif ($statut == 1) return $langs->trans('Enabled');\n\t\t\tif ($statut == 0) return $langs->trans('Disabled');\n\t\t}\n\t\tif ($mode == 1)\n\t\t{\n\t\t\tif ($statut == 1) return $langs->trans('Enabled');\n\t\t\tif ($statut == 0) return $langs->trans('Disabled');\n\t\t}\n\t\tif ($mode == 2)\n\t\t{\n\t\t\tif ($statut == 1) return img_picto($langs->trans('Enabled'),'statut4','class=\"pictostatus\"').' '.$langs->trans('Enabled');\n\t\t\tif ($statut == 0) return img_picto($langs->trans('Disabled'),'statut5','class=\"pictostatus\"').' '.$langs->trans('Disabled');\n\t\t}\n\t\tif ($mode == 3)\n\t\t{\n\t\t\tif ($statut == 1) return img_picto($langs->trans('Enabled'),'statut4','class=\"pictostatus\"');\n\t\t\tif ($statut == 0) return img_picto($langs->trans('Disabled'),'statut5','class=\"pictostatus\"');\n\t\t}\n\t\tif ($mode == 4)\n\t\t{\n\t\t\tif ($statut == 1) return img_picto($langs->trans('Enabled'),'statut4','class=\"pictostatus\"').' '.$langs->trans('Enabled');\n\t\t\tif ($statut == 0) return img_picto($langs->trans('Disabled'),'statut5','class=\"pictostatus\"').' '.$langs->trans('Disabled');\n\t\t}\n\t\tif ($mode == 5)\n\t\t{\n\t\t\tif ($statut == 1) return $langs->trans('Enabled').' '.img_picto($langs->trans('Enabled'),'statut4','class=\"pictostatus\"');\n\t\t\tif ($statut == 0) return $langs->trans('Disabled').' '.img_picto($langs->trans('Disabled'),'statut5','class=\"pictostatus\"');\n\t\t}\n\t}\n\n\n\t/**\n\t *\tRetourne chaine DN complete dans l'annuaire LDAP pour l'objet\n\t *\n\t *\t@param\tarray\t$info\t\tInfo array loaded by _load_ldap_info\n\t *\t@param\tint\t\t$mode\t\t0=Return full DN (uid=qqq,ou=xxx,dc=aaa,dc=bbb)\n\t *\t\t\t\t\t\t\t\t1=Return parent (ou=xxx,dc=aaa,dc=bbb)\n\t *\t\t\t\t\t\t\t\t2=Return key only (RDN) (uid=qqq)\n\t *\t@return\tstring\t\t\t\tDN\n\t */\n\tfunction _load_ldap_dn($info,$mode=0)\n\t{\n\t\tglobal $conf;\n\t\t$dn='';\n\t\tif ($mode==0) $dn=$conf->global->LDAP_KEY_USERS.\"=\".$info[$conf->global->LDAP_KEY_USERS].\",\".$conf->global->LDAP_USER_DN;\n\t\tif ($mode==1) $dn=$conf->global->LDAP_USER_DN;\n\t\tif ($mode==2) $dn=$conf->global->LDAP_KEY_USERS.\"=\".$info[$conf->global->LDAP_KEY_USERS];\n\t\treturn $dn;\n\t}\n\n\t/**\n\t *\tInitialize the info array (array of LDAP values) that will be used to call LDAP functions\n\t *\n\t *\t@return\t\tarray\t\tTableau info des attributs\n\t */\n\tfunction _load_ldap_info()\n\t{\n\t\tglobal $conf,$langs;\n\n\t\t$info=array();\n\t\t$keymodified=false;\n\n\t\t// Object classes\n\t\t$info[\"objectclass\"]=explode(',',$conf->global->LDAP_USER_OBJECT_CLASS);\n\n\t\t$this->fullname=$this->getFullName($langs);\n\n\t\t// Possible LDAP KEY (constname => varname)\n\t\t$ldapkey = array(\n\t\t\t'LDAP_FIELD_FULLNAME'\t=> 'fullname',\n\t\t\t'LDAP_FIELD_NAME'\t\t=> 'lastname',\n\t\t\t'LDAP_FIELD_FIRSTNAME'\t=> 'firstname',\n\t\t\t'LDAP_FIELD_LOGIN'\t\t=> 'login',\n\t\t\t'LDAP_FIELD_LOGIN_SAMBA'\t=> 'login',\n\t\t\t'LDAP_FIELD_PHONE'\t\t=> 'office_phone',\n\t\t\t'LDAP_FIELD_MOBILE'\t\t=> 'user_mobile',\n\t\t\t'LDAP_FIELD_FAX'\t\t\t=> 'office_fax',\n\t\t\t'LDAP_FIELD_MAIL'\t\t=> 'email',\n\t\t\t'LDAP_FIELD_SID'\t\t\t=> 'ldap_sid',\n\t\t\t'LDAP_FIELD_SKYPE'\t\t=> 'skype'\n\t\t);\n\n\t\t// Champs\n\t\tforeach ($ldapkey as $constname => $varname)\n\t\t{\n\t\t\tif (! empty($this->$varname) && ! empty($conf->global->$constname))\n\t\t\t{\n\t\t\t\t$info[$conf->global->$constname] = $this->$varname;\n\n\t\t\t\t// Check if it is the LDAP key and if its value has been changed\n\t\t\t\tif (! empty($conf->global->LDAP_KEY_USERS) && $conf->global->LDAP_KEY_USERS == $conf->global->$constname)\n\t\t\t\t{\n\t\t\t\t\tif (! empty($this->oldcopy) && $this->$varname != $this->oldcopy->$varname) $keymodified=true; // For check if LDAP key has been modified\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($this->address && ! empty($conf->global->LDAP_FIELD_ADDRESS))\t\t\t$info[$conf->global->LDAP_FIELD_ADDRESS] = $this->address;\n\t\tif ($this->zip && ! empty($conf->global->LDAP_FIELD_ZIP))\t\t\t\t\t$info[$conf->global->LDAP_FIELD_ZIP] = $this->zip;\n\t\tif ($this->town && ! empty($conf->global->LDAP_FIELD_TOWN))\t\t\t\t\t$info[$conf->global->LDAP_FIELD_TOWN] = $this->town;\n\t\tif ($this->note_public && ! empty($conf->global->LDAP_FIELD_DESCRIPTION))\t$info[$conf->global->LDAP_FIELD_DESCRIPTION] = dol_string_nohtmltag($this->note_public, 2);\n\t\tif ($this->socid > 0)\n\t\t{\n\t\t\t$soc = new Societe($this->db);\n\t\t\t$soc->fetch($this->socid);\n\n\t\t\t$info[$conf->global->LDAP_FIELD_COMPANY] = $soc->name;\n\t\t\tif ($soc->client == 1)      $info[\"businessCategory\"] = \"Customers\";\n\t\t\tif ($soc->client == 2)      $info[\"businessCategory\"] = \"Prospects\";\n\t\t\tif ($soc->fournisseur == 1) $info[\"businessCategory\"] = \"Suppliers\";\n\t\t}\n\n\t\t// When password is modified\n\t\tif (! empty($this->pass))\n\t\t{\n\t\t\tif (! empty($conf->global->LDAP_FIELD_PASSWORD))\t\t\t\t$info[$conf->global->LDAP_FIELD_PASSWORD] = $this->pass;\t// this->pass = mot de passe non crypte\n\t\t\tif (! empty($conf->global->LDAP_FIELD_PASSWORD_CRYPTED))\t\t$info[$conf->global->LDAP_FIELD_PASSWORD_CRYPTED] = dol_hash($this->pass, 4); // Create OpenLDAP MD5 password (TODO add type of encryption)\n\t\t}\n\t\t// Set LDAP password if possible\n\t\telse if ($conf->global->LDAP_SERVER_PROTOCOLVERSION !== '3') // If ldap key is modified and LDAPv3 we use ldap_rename function for avoid lose encrypt password\n\t\t{\n\t\t\tif (! empty($conf->global->DATABASE_PWD_ENCRYPTED))\n\t\t\t{\n\t\t\t\t// Just for the default MD5 !\n\t\t\t\tif (empty($conf->global->MAIN_SECURITY_HASH_ALGO))\n\t\t\t\t{\n\t\t\t\t\tif ($this->pass_indatabase_crypted && ! empty($conf->global->LDAP_FIELD_PASSWORD_CRYPTED))\t{\n\t\t\t\t\t\t$info[$conf->global->LDAP_FIELD_PASSWORD_CRYPTED] = dol_hash($this->pass_indatabase_crypted, 5); // Create OpenLDAP MD5 password from Dolibarr MD5 password\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Use $this->pass_indatabase value if exists\n\t\t\telse if (! empty($this->pass_indatabase))\n\t\t\t{\n\t\t\t\tif (! empty($conf->global->LDAP_FIELD_PASSWORD))\t\t\t\t$info[$conf->global->LDAP_FIELD_PASSWORD] = $this->pass_indatabase;\t// $this->pass_indatabase = mot de passe non crypte\n\t\t\t\tif (! empty($conf->global->LDAP_FIELD_PASSWORD_CRYPTED))\t\t$info[$conf->global->LDAP_FIELD_PASSWORD_CRYPTED] = dol_hash($this->pass_indatabase, 4); // md5 for OpenLdap TODO add type of encryption\n\t\t\t}\n\t\t}\n\n\t\tif ($conf->global->LDAP_SERVER_TYPE == 'egroupware')\n\t\t{\n\t\t\t$info[\"objectclass\"][4] = \"phpgwContact\"; // compatibilite egroupware\n\n\t\t\t$info['uidnumber'] = $this->id;\n\n\t\t\t$info['phpgwTz']      = 0;\n\t\t\t$info['phpgwMailType'] = 'INTERNET';\n\t\t\t$info['phpgwMailHomeType'] = 'INTERNET';\n\n\t\t\t$info[\"phpgwContactTypeId\"] = 'n';\n\t\t\t$info[\"phpgwContactCatId\"] = 0;\n\t\t\t$info[\"phpgwContactAccess\"] = \"public\";\n\n\t\t\tif (dol_strlen($this->egroupware_id) == 0)\n\t\t\t{\n\t\t\t\t$this->egroupware_id = 1;\n\t\t\t}\n\n\t\t\t$info[\"phpgwContactOwner\"] = $this->egroupware_id;\n\n\t\t\tif ($this->email) $info[\"rfc822Mailbox\"] = $this->email;\n\t\t\tif ($this->phone_mobile) $info[\"phpgwCellTelephoneNumber\"] = $this->phone_mobile;\n\t\t}\n\n\t\treturn $info;\n\t}\n\n\n\t/**\n\t *  Initialise an instance with random values.\n\t *  Used to build previews or test instances.\n\t *\tid must be 0 if object instance is a specimen.\n\t *\n\t *  @return\tvoid\n\t */\n\tfunction initAsSpecimen()\n\t{\n\t\tglobal $user,$langs;\n\n\t\t$now=dol_now();\n\n\t\t// Initialise parametres\n\t\t$this->id=0;\n\t\t$this->ref = 'SPECIMEN';\n\t\t$this->specimen=1;\n\n\t\t$this->lastname='DOLIBARR';\n\t\t$this->firstname='SPECIMEN';\n\t\t$this->gender='man';\n\t\t$this->note='This is a note';\n\t\t$this->email='email@specimen.com';\n\t\t$this->skype='tom.hanson';\n\t\t$this->office_phone='0999999999';\n\t\t$this->office_fax='0999999998';\n\t\t$this->user_mobile='0999999997';\n\t\t$this->admin=0;\n\t\t$this->login='dolibspec';\n\t\t$this->pass='dolibspec';\n\t\t//$this->pass_indatabase='dolibspec';\t\t\t\t\t\t\t\t\tSet after a fetch\n\t\t//$this->pass_indatabase_crypted='e80ca5a88c892b0aaaf7e154853bccab';\tSet after a fetch\n\t\t$this->datec=$now;\n\t\t$this->datem=$now;\n\n\t\t$this->datelastlogin=$now;\n\t\t$this->datepreviouslogin=$now;\n\t\t$this->statut=1;\n\n\t\t//$this->societe_id = 1;\tFor external users\n\t\t//$this->contact_id = 1;\tFor external users\n\t\t$this->entity = 1;\n\t}\n\n\t/**\n\t *  Load info of user object\n\t *\n\t *  @param  int\t\t$id     Id of user to load\n\t *  @return\tvoid\n\t */\n\tfunction info($id)\n\t{\n\t\t$sql = \"SELECT u.rowid, u.login as ref, u.datec,\";\n\t\t$sql.= \" u.tms as date_modification, u.entity\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"user as u\";\n\t\t$sql.= \" WHERE u.rowid = \".$id;\n\n\t\t$result=$this->db->query($sql);\n\t\tif ($result)\n\t\t{\n\t\t\tif ($this->db->num_rows($result))\n\t\t\t{\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\n\t\t\t\t$this->id = $obj->rowid;\n\n\t\t\t\t$this->ref\t\t\t     = (! $obj->ref) ? $obj->rowid : $obj->ref;\n\t\t\t\t$this->date_creation     = $this->db->jdate($obj->datec);\n\t\t\t\t$this->date_modification = $this->db->jdate($obj->date_modification);\n\t\t\t\t$this->entity            = $obj->entity;\n\t\t\t}\n\n\t\t\t$this->db->free($result);\n\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t}\n\t}\n\n\n\t/**\n\t *    Return number of mass Emailing received by this contacts with its email\n\t *\n\t *    @return       int     Number of EMailings\n\t */\n\tfunction getNbOfEMailings()\n\t{\n\t\t$sql = \"SELECT count(mc.email) as nb\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"mailing_cibles as mc\";\n\t\t$sql.= \" WHERE mc.email = '\".$this->db->escape($this->email).\"'\";\n\t\t$sql.= \" AND mc.statut NOT IN (-1,0)\";      // -1 erreur, 0 non envoye, 1 envoye avec succes\n\n\t\t$resql=$this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t$nb=$obj->nb;\n\n\t\t\t$this->db->free($resql);\n\t\t\treturn $nb;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Return number of existing users\n\t *\n\t *  @param\tstring\t$limitTo\tLimit to '' or 'active'\n\t *  @param\tstring\t$option\t\t'superadmin' = return for entity 0 only\n\t *  @param\tint\t\t$admin\t\tFilter on admin tag\n\t *  @return int  \t\t\t\tNumber of users\n\t */\n\tfunction getNbOfUsers($limitTo, $option='', $admin=-1)\n\t{\n\t\tglobal $conf;\n\n\t\t$sql = \"SELECT count(rowid) as nb\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"user\";\n\t\tif ($option == 'superadmin')\n\t\t{\n\t\t\t$sql.= \" WHERE entity = 0\";\n\t\t\tif ($admin >= 0) $sql.= \" AND admin = \".$admin;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sql.=\" WHERE entity IN (\".getEntity('user',0).\")\";\n\t\t\tif ($limitTo == 'active') $sql.= \" AND statut = 1\";\n\t\t\tif ($admin >= 0) $sql.= \" AND admin = \".$admin;\n\t\t}\n\n\t\t$resql=$this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t$nb=$obj->nb;\n\n\t\t\t$this->db->free($resql);\n\t\t\treturn $nb;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Update user using data from the LDAP\n\t *\n\t *  @param\tldapuser\t$ldapuser\tLadp User\n\t *\n\t *  @return int  \t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction update_ldap2dolibarr(&$ldapuser)\n\t{\n\t\t// TODO: Voir pourquoi le update met \u00e0 jour avec toutes les valeurs vide (global $user \u00e9crase ?)\n\t\tglobal $user, $conf;\n\n\t\t$this->firstname=$ldapuser->{$conf->global->LDAP_FIELD_FIRSTNAME};\n\t\t$this->lastname=$ldapuser->{$conf->global->LDAP_FIELD_NAME};\n\t\t$this->login=$ldapuser->{$conf->global->LDAP_FIELD_LOGIN};\n\t\t$this->pass=$ldapuser->{$conf->global->LDAP_FIELD_PASSWORD};\n\t\t$this->pass_indatabase_crypted=$ldapuser->{$conf->global->LDAP_FIELD_PASSWORD_CRYPTED};\n\n\t\t$this->office_phone=$ldapuser->{$conf->global->LDAP_FIELD_PHONE};\n\t\t$this->user_mobile=$ldapuser->{$conf->global->LDAP_FIELD_MOBILE};\n\t\t$this->office_fax=$ldapuser->{$conf->global->LDAP_FIELD_FAX};\n\t\t$this->email=$ldapuser->{$conf->global->LDAP_FIELD_MAIL};\n\t\t$this->skype=$ldapuser->{$conf->global->LDAP_FIELD_SKYPE};\n\t\t$this->ldap_sid=$ldapuser->{$conf->global->LDAP_FIELD_SID};\n\n\t\t$this->job=$ldapuser->{$conf->global->LDAP_FIELD_TITLE};\n\t\t$this->note=$ldapuser->{$conf->global->LDAP_FIELD_DESCRIPTION};\n\n\t\t$result = $this->update($user);\n\n\t\tdol_syslog(get_class($this).\"::update_ldap2dolibarr result=\".$result, LOG_DEBUG);\n\n\t\treturn $result;\n\t}\n\n\n\t/**\n\t * Return and array with all instanciated first level children users of current user\n\t *\n\t * @return\tvoid\n\t * @see getAllChildIds\n\t */\n\tfunction get_children()\n\t{\n\t\t$sql = \"SELECT rowid FROM \".MAIN_DB_PREFIX.\"user\";\n\t\t$sql.= \" WHERE fk_user = \".$this->id;\n\n\t\tdol_syslog(get_class($this).\"::get_children result=\".$result, LOG_DEBUG);\n\t\t$res  = $this->db->query($sql);\n\t\tif ($res)\n\t\t{\n\t\t\t$users = array ();\n\t\t\twhile ($rec = $this->db->fetch_array($res))\n\t\t\t{\n\t\t\t\t$user = new User($this->db);\n\t\t\t\t$user->fetch($rec['rowid']);\n\t\t\t\t$users[] = $user;\n\t\t\t}\n\t\t\treturn $users;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t * \tLoad this->parentof that is array(id_son=>id_parent, ...)\n\t *\n\t *\t@return\t\tint\t\t<0 if KO, >0 if OK\n\t */\n\tprivate function load_parentof()\n\t{\n\t\tglobal $conf;\n\n\t\t$this->parentof=array();\n\n\t\t// Load array[child]=parent\n\t\t$sql = \"SELECT fk_user as id_parent, rowid as id_son\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"user\";\n\t\t$sql.= \" WHERE fk_user <> 0\";\n\t\t$sql.= \" AND entity IN (\".getEntity('user').\")\";\n\n\t\tdol_syslog(get_class($this).\"::load_parentof\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\twhile ($obj= $this->db->fetch_object($resql))\n\t\t\t{\n\t\t\t\t$this->parentof[$obj->id_son]=$obj->id_parent;\n\t\t\t}\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * \tReconstruit l'arborescence hierarchique des users sous la forme d'un tableau\n\t *\tSet and return this->users that is an array sorted according to tree with arrays of:\n\t *\t\t\t\tid = id user\n\t *\t\t\t\tlastname\n\t *\t\t\t\tfirstname\n\t *\t\t\t\tfullname = nom avec chemin complet du user\n\t *\t\t\t\tfullpath = chemin complet compose des id: \"_grandparentid_parentid_id\"\n\t *\n\t *  @param      int\t\t$deleteafterid      Removed all users including the leaf $deleteafterid (and all its child) in user tree.\n\t *  @param\t\tstring\t$filter\t\t\t\tSQL filter on users\n\t *\t@return\t\tarray\t\t      \t\t  \tArray of users $this->users. Note: $this->parentof is also set.\n\t */\n\tfunction get_full_tree($deleteafterid=0, $filter='')\n\t{\n\t\tglobal $conf, $user;\n\t\tglobal $hookmanager;\n\n\t\t// Actions hooked (by external module)\n\t\t$hookmanager->initHooks(array('userdao'));\n\n\t\t$this->users = array();\n\n\t\t// Init this->parentof that is array(id_son=>id_parent, ...)\n\t\t$this->load_parentof();\n\n\t\t// Init $this->users array\n\t\t$sql = \"SELECT DISTINCT u.rowid, u.firstname, u.lastname, u.fk_user, u.fk_soc, u.login, u.email, u.gender, u.admin, u.statut, u.photo, u.entity\";\t// Distinct reduce pb with old tables with duplicates\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"user as u\";\n\t\t// Add fields from hooks\n\t\t$parameters=array();\n\t\t$reshook=$hookmanager->executeHooks('printUserListWhere',$parameters);    // Note that $action and $object may have been modified by hook\n\t\tif ($reshook > 0) {\n\t\t\t$sql.=$hookmanager->resPrint;\n\t\t} else {\n\t\t\t$sql.= \" WHERE u.entity IN (\".getEntity('user').\")\";\n\t\t}\n\t\tif ($filter) $sql.=\" AND \".$filter;\n\n\t\tdol_syslog(get_class($this).\"::get_full_tree get user list\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$i=0;\n\t\t\twhile ($obj = $this->db->fetch_object($resql))\n\t\t\t{\n\t\t\t\t$this->users[$obj->rowid]['rowid'] = $obj->rowid;\n\t\t\t\t$this->users[$obj->rowid]['id'] = $obj->rowid;\n\t\t\t\t$this->users[$obj->rowid]['fk_user'] = $obj->fk_user;\n\t\t\t\t$this->users[$obj->rowid]['fk_soc'] = $obj->fk_soc;\n\t\t\t\t$this->users[$obj->rowid]['firstname'] = $obj->firstname;\n\t\t\t\t$this->users[$obj->rowid]['lastname'] = $obj->lastname;\n\t\t\t\t$this->users[$obj->rowid]['login'] = $obj->login;\n\t\t\t\t$this->users[$obj->rowid]['statut'] = $obj->statut;\n\t\t\t\t$this->users[$obj->rowid]['entity'] = $obj->entity;\n\t\t\t\t$this->users[$obj->rowid]['email'] = $obj->email;\n\t\t\t\t$this->users[$obj->rowid]['gender'] = $obj->gender;\n\t\t\t\t$this->users[$obj->rowid]['admin'] = $obj->admin;\n\t\t\t\t$this->users[$obj->rowid]['photo'] = $obj->photo;\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\n\t\t// We add the fullpath property to each elements of first level (no parent exists)\n\t\tdol_syslog(get_class($this).\"::get_full_tree call to build_path_from_id_user\", LOG_DEBUG);\n\t\tforeach($this->users as $key => $val)\n\t\t{\n\t\t\t$result = $this->build_path_from_id_user($key,0);\t// Process a branch from the root user key (this user has no parent)\n\t\t\tif ($result < 0)\n\t\t\t{\n\t\t\t\t$this->error='ErrorLoopInHierarchy';\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\n\t\t// Exclude leaf including $deleteafterid from tree\n\t\tif ($deleteafterid)\n\t\t{\n\t\t\t//print \"Look to discard user \".$deleteafterid.\"\\n\";\n\t\t\t$keyfilter1='^'.$deleteafterid.'$';\n\t\t\t$keyfilter2='_'.$deleteafterid.'$';\n\t\t\t$keyfilter3='^'.$deleteafterid.'_';\n\t\t\t$keyfilter4='_'.$deleteafterid.'_';\n\t\t\tforeach($this->users as $key => $val)\n\t\t\t{\n\t\t\t\tif (preg_match('/'.$keyfilter1.'/',$val['fullpath']) || preg_match('/'.$keyfilter2.'/',$val['fullpath'])\n\t\t\t\t\t|| preg_match('/'.$keyfilter3.'/',$val['fullpath']) || preg_match('/'.$keyfilter4.'/',$val['fullpath']))\n\t\t\t\t{\n\t\t\t\t\tunset($this->users[$key]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdol_syslog(get_class($this).\"::get_full_tree dol_sort_array\", LOG_DEBUG);\n\t\t$this->users=dol_sort_array($this->users, 'fullname', 'asc', true, false);\n\n\t\t//var_dump($this->users);\n\n\t\treturn $this->users;\n\t}\n\n\t/**\n\t * \tReturn list of all child users id in herarchy (all sublevels).\n\t *  Note: Calling this function also reset full list of users into $this->users.\n\t *\n\t *  @param      int      $addcurrentuser    1=Add also current user id to the list.\n\t *\t@return\t\tarray\t\t      \t\t  \tArray of user id lower than user (all levels under user). This overwrite this->users.\n\t *  @see get_children\n\t */\n\tfunction getAllChildIds($addcurrentuser=0)\n\t{\n\t\t$childids=array();\n\n\t\tif (isset($this->cache_childids[$this->id]))\n\t\t{\n\t\t\t$childids = $this->cache_childids[$this->id];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Init this->users\n\t\t\t$this->get_full_tree();\n\n\t\t\t$idtoscan=$this->id;\n\n\t\t\tdol_syslog(\"Build childid for id = \".$idtoscan);\n\t\t\tforeach($this->users as $id => $val)\n\t\t\t{\n\t\t\t\t//var_dump($val['fullpath']);\n\t\t\t\tif (preg_match('/_'.$idtoscan.'_/', $val['fullpath'])) $childids[$val['id']]=$val['id'];\n\t\t\t}\n\t\t}\n\t\t$this->cache_childids[$this->id] = $childids;\n\n\t\tif ($addcurrentuser) $childids[$this->id]=$this->id;\n\n\t\treturn $childids;\n\t}\n\n\t/**\n\t *\tFor user id_user and its childs available in this->users, define property fullpath and fullname.\n\t *  Function called by get_full_tree().\n\t *\n\t * \t@param\t\tint\t\t$id_user\t\tid_user entry to update\n\t * \t@param\t\tint\t\t$protection\t\tDeep counter to avoid infinite loop (no more required, a protection is added with array useridfound)\n\t *\t@return\t\tint                     < 0 if KO (infinit loop), >= 0 if OK\n\t */\n\tfunction build_path_from_id_user($id_user,$protection=0)\n\t{\n\t\tdol_syslog(get_class($this).\"::build_path_from_id_user id_user=\".$id_user.\" protection=\".$protection, LOG_DEBUG);\n\n\t\tif (! empty($this->users[$id_user]['fullpath']))\n\t\t{\n\t\t\t// Already defined\n\t\t\tdol_syslog(get_class($this).\"::build_path_from_id_user fullpath and fullname already defined\", LOG_WARNING);\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Define fullpath and fullname\n\t\t$this->users[$id_user]['fullpath'] = '_'.$id_user;\n\t\t$this->users[$id_user]['fullname'] = $this->users[$id_user]['lastname'];\n\t\t$i=0; $cursor_user=$id_user;\n\n\t\t$useridfound=array($id_user);\n\t\twhile (! empty($this->parentof[$cursor_user]))\n\t\t{\n\t\t\tif (in_array($this->parentof[$cursor_user], $useridfound))\n\t\t\t{\n\t\t\t\tdol_syslog(\"The hierarchy of user has a recursive loop\", LOG_WARNING);\n\t\t\t\treturn -1;     // Should not happen. Protection against looping hierarchy\n\t\t\t}\n\t\t\t$useridfound[]=$this->parentof[$cursor_user];\n\t\t\t$this->users[$id_user]['fullpath'] = '_'.$this->parentof[$cursor_user].$this->users[$id_user]['fullpath'];\n\t\t\t$this->users[$id_user]['fullname'] = $this->users[$this->parentof[$cursor_user]]['lastname'].' >> '.$this->users[$id_user]['fullname'];\n\t\t\t$i++; $cursor_user=$this->parentof[$cursor_user];\n\t\t}\n\n\t\t// We count number of _ to have level\n\t\t$this->users[$id_user]['level']=dol_strlen(preg_replace('/[^_]/i','',$this->users[$id_user]['fullpath']));\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t * Function used to replace a thirdparty id with another one.\n\t *\n\t * @param DoliDB $db Database handler\n\t * @param int $origin_id Old thirdparty id\n\t * @param int $dest_id New thirdparty id\n\t * @return bool\n\t */\n\tpublic static function replaceThirdparty(DoliDB $db, $origin_id, $dest_id)\n\t{\n\t\t$tables = array(\n\t\t\t'user'\n\t\t);\n\n\t\treturn CommonObject::commonReplaceThirdparty($db, $origin_id, $dest_id, $tables);\n\t}\n\n\n\t/**\n\t *      Charge indicateurs this->nb pour le tableau de bord\n\t *\n\t *      @return     int         <0 if KO, >0 if OK\n\t */\n\tfunction load_state_board()\n\t{\n\t\tglobal $conf;\n\n\t\t$this->nb=array();\n\n\t\t$sql = \"SELECT count(u.rowid) as nb\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"user as u\";\n\t\t$sql.= \" WHERE u.statut > 0\";\n\t\t//$sql.= \" AND employee != 0\";\n\t\t$sql.= \" AND u.entity IN (\".getEntity('user').\")\";\n\n\t\t$resql=$this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\twhile ($obj=$this->db->fetch_object($resql))\n\t\t\t{\n\t\t\t\t$this->nb[\"users\"]=$obj->nb;\n\t\t\t}\n\t\t\t$this->db->free($resql);\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Create a document onto disk according to template module.\n\t *\n\t * \t@param\t    string\t\t$modele\t\t\tForce model to use ('' to not force)\n\t * \t@param\t\tTranslate\t$outputlangs\tObject langs to use for output\n\t *  @param      int\t\t\t$hidedetails    Hide details of lines\n\t *  @param      int\t\t\t$hidedesc       Hide description\n\t *  @param      int\t\t\t$hideref        Hide ref\n         *  @param   null|array  $moreparams     Array to provide more information\n\t * \t@return     int         \t\t\t\t0 if KO, 1 if OK\n\t */\n\tpublic function generateDocument($modele, $outputlangs, $hidedetails=0, $hidedesc=0, $hideref=0, $moreparams=null)\n\t{\n\t\tglobal $conf,$user,$langs;\n\n\t\t$langs->load(\"user\");\n\n\t\t// Positionne le modele sur le nom du modele a utiliser\n\t\tif (! dol_strlen($modele))\n\t\t{\n\t\t\tif (! empty($conf->global->USER_ADDON_PDF))\n\t\t\t{\n\t\t\t\t$modele = $conf->global->USER_ADDON_PDF;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$modele = 'bluesky';\n\t\t\t}\n\t\t}\n\n\t\t$modelpath = \"core/modules/user/doc/\";\n\n\t\treturn $this->commonGenerateDocument($modelpath, $modele, $outputlangs, $hidedetails, $hidedesc, $hideref, $moreparams);\n\t}\n\n\t/**\n\t *  Return property of user from its id\n\t *\n\t *  @param\tint\t\t$rowid      id of contact\n\t *  @param  string\t$mode       'email' or 'mobile'\n\t *  @return string  \t\t\tEmail of user with format: \"Full name <email>\"\n\t */\n\tfunction user_get_property($rowid,$mode)\n\t{\n\t\t$user_property='';\n\n\t\tif (empty($rowid)) return '';\n\n\t\t$sql = \"SELECT rowid, email, user_mobile, civility, lastname, firstname\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"user\";\n\t\t$sql.= \" WHERE rowid = '\".$rowid.\"'\";\n\n\t\t$resql=$this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$nump = $this->db->num_rows($resql);\n\n\t\t\tif ($nump)\n\t\t\t{\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\tif ($mode == 'email') $user_property = dolGetFirstLastname($obj->firstname, $obj->lastname).\" <\".$obj->email.\">\";\n\t\t\t\telse if ($mode == 'mobile') $user_property = $obj->user_mobile;\n\t\t\t}\n\t\t\treturn $user_property;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t}\n\t}\n\n\t/**\n\t *\tLoad all objects into $this->users\n\t *\n\t *  @param\tstring\t\t$sortorder    sort order\n\t *  @param\tstring\t\t$sortfield    sort field\n\t *  @param\tint\t\t\t$limit\t\t  limit page\n\t *  @param\tint\t\t\t$offset    \t  page\n\t *  @param\tarray\t\t$filter    \t  filter output\n\t *  @return int          \t<0 if KO, >0 if OK\n\t */\n\tfunction fetchAll($sortorder='', $sortfield='', $limit=0, $offset=0, $filter=array())\n\t{\n\t\tglobal $conf;\n\n\t\t$sql=\"SELECT t.rowid\";\n\t\t$sql.= ' FROM '.MAIN_DB_PREFIX .$this->table_element.' as t ';\n\t\t$sql.= \" WHERE 1\";\n\n\t\t//Manage filter\n\t\tif (!empty($filter)){\n\t\t\tforeach($filter as $key => $value) {\n\t\t\t\tif (strpos($key,'date')) {\n\t\t\t\t\t$sql.= ' AND '.$key.' = \\''.$this->db->idate($value).'\\'';\n\t\t\t\t}\n\t\t\t\telseif ($key=='customsql') {\n\t\t\t\t\t$sql.= ' AND '.$value;\n\t\t\t\t} else {\n\t\t\t\t\t$sql.= ' AND '.$key.' LIKE \\'%'.$value.'%\\'';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$sql.= $this->db->order($sortfield,$sortorder);\n\t\tif ($limit) $sql.= $this->db->plimit($limit+1,$offset);\n\n\t\tdol_syslog(get_class($this).\"::\".__METHOD__, LOG_DEBUG);\n\n\t\t$resql=$this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$this->users=array();\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\tif ($num)\n\t\t\t{\n\t\t\t\twhile ($obj = $this->db->fetch_object($resql))\n\t\t\t\t{\n\t\t\t\t\t$line = new self($this->db);\n\t\t\t\t\t$result = $line->fetch($obj->rowid);\n\t\t\t\t\tif ($result>0 && !empty($line->id)) {\n\t\t\t\t\t\t$this->users[$obj->rowid] = clone $line;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->db->free($resql);\n\t\t\t}\n\t\t\treturn $num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\n\t}\n\n}\n\n"], "fixing_code": ["<?php\n/* Copyright (C) 2002-2006 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2002-2003 Jean-Louis Bergamo   <jlb@j1b.org>\n * Copyright (C) 2004-2015 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2004      Eric Seigne          <eric.seigne@ryxeo.com>\n * Copyright (C) 2005-2018 Regis Houssin        <regis.houssin@capnetworks.com>\n * Copyright (C) 2005      Lionel Cousteix      <etm_ltd@tiscali.co.uk>\n * Copyright (C) 2011      Herve Prot           <herve.prot@symeos.com>\n * Copyright (C) 2012-2018 Juanjo Menent        <jmenent@2byte.es>\n * Copyright (C) 2013      Florian Henry        <florian.henry@open-concept.pro>\n * Copyright (C) 2013-2016 Alexandre Spangaro   <aspangaro.dolibarr@gmail.com>\n * Copyright (C) 2015-2017 Jean-Fran\u00e7ois Ferry  <jfefe@aternatik.fr>\n * Copyright (C) 2015      Ari Elbaz (elarifr)  <github@accedinfo.com>\n * Copyright (C) 2015      Charlie Benke        <charlie@patas-monkey.com>\n * Copyright (C) 2016      Rapha\u00ebl Doursenaud   <rdoursenaud@gpcsolutions.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *       \\file       htdocs/user/card.php\n *       \\brief      Tab of user card\n */\n\nrequire '../main.inc.php';\nrequire_once DOL_DOCUMENT_ROOT.'/user/class/user.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/user/class/usergroup.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/contact/class/contact.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formfile.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/images.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/usergroups.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/extrafields.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formcompany.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formother.class.php';\nif (! empty($conf->ldap->enabled)) require_once DOL_DOCUMENT_ROOT.'/core/class/ldap.class.php';\nif (! empty($conf->adherent->enabled)) require_once DOL_DOCUMENT_ROOT.'/adherents/class/adherent.class.php';\nif (! empty($conf->categorie->enabled)) require_once DOL_DOCUMENT_ROOT.'/categories/class/categorie.class.php';\n\n$id\t\t\t= GETPOST('id','int');\n$action\t\t= GETPOST('action','aZ09');\n$mode\t\t= GETPOST('mode','alpha');\n$confirm\t= GETPOST('confirm','alpha');\n$subaction\t= GETPOST('subaction','alpha');\n$group\t\t= GETPOST(\"group\",\"int\",3);\n$cancel\t\t= GETPOST('cancel','alpha');\n$contextpage= GETPOST('contextpage','aZ')?GETPOST('contextpage','aZ'):'useracard';   // To manage different context of search\n\n// Define value to know what current user can do on users\n$canadduser=(! empty($user->admin) || $user->rights->user->user->creer);\n$canreaduser=(! empty($user->admin) || $user->rights->user->user->lire);\n$canedituser=(! empty($user->admin) || $user->rights->user->user->creer);\n$candisableuser=(! empty($user->admin) || $user->rights->user->user->supprimer);\n$canreadgroup=$canreaduser;\n$caneditgroup=$canedituser;\nif (! empty($conf->global->MAIN_USE_ADVANCED_PERMS))\n{\n\t$canreadgroup=(! empty($user->admin) || $user->rights->user->group_advance->read);\n\t$caneditgroup=(! empty($user->admin) || $user->rights->user->group_advance->write);\n}\n\n// Define value to know what current user can do on properties of edited user\nif ($id)\n{\n\t// $user est le user qui edite, $id est l'id de l'utilisateur edite\n\t$caneditfield=((($user->id == $id) && $user->rights->user->self->creer)\n\t|| (($user->id != $id) && $user->rights->user->user->creer));\n\t$caneditpassword=((($user->id == $id) && $user->rights->user->self->password)\n\t|| (($user->id != $id) && $user->rights->user->user->password));\n}\n\n// Security check\n$socid=0;\nif ($user->societe_id > 0) $socid = $user->societe_id;\n$feature2='user';\nif ($user->id == $id) { $feature2=''; $canreaduser=1; } // A user can always read its own card\nif (!$canreaduser) {\n\t$result = restrictedArea($user, 'user', $id, 'user&user', $feature2);\n}\nif ($user->id <> $id && ! $canreaduser) accessforbidden();\n\n// Load translation files required by page\n$langs->loadLangs(array('users', 'companies', 'ldap', 'admin', 'hrm'));\n\n$object = new User($db);\n$extrafields = new ExtraFields($db);\n\n// fetch optionals attributes and labels\n$extralabels=$extrafields->fetch_name_optionals_label($object->table_element);\n\n// Initialize technical object to manage hooks. Note that conf->hooks_modules contains array\n$hookmanager->initHooks(array('usercard','globalcard'));\n\n\n\n/**\n * Actions\n */\n\n$parameters=array('id' => $id, 'socid' => $socid, 'group' => $group, 'caneditgroup' => $caneditgroup);\n$reshook=$hookmanager->executeHooks('doActions',$parameters,$object,$action);    // Note that $action and $object may have been modified by some hooks\nif ($reshook < 0) setEventMessages($hookmanager->error, $hookmanager->errors, 'errors');\n\nif (empty($reshook)) {\n\n\tif ($action == 'confirm_disable' && $confirm == \"yes\" && $candisableuser) {\n\t\tif ($id <> $user->id) {\n\t\t\t$object->fetch($id);\n\t\t\t$object->setstatus(0);\n\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].'?id='.$id);\n\t\t\texit;\n\t\t}\n\t}\n\tif ($action == 'confirm_enable' && $confirm == \"yes\" && $candisableuser) {\n\t\t$error = 0;\n\n\t\tif ($id <> $user->id) {\n\t\t\t$object->fetch($id);\n\n\t\t\tif (!empty($conf->file->main_limit_users)) {\n\t\t\t\t$nb = $object->getNbOfUsers(\"active\");\n\t\t\t\tif ($nb >= $conf->file->main_limit_users) {\n\t\t\t\t\t$error ++;\n\t\t\t\t\tsetEventMessages($langs->trans(\"YourQuotaOfUsersIsReached\"), null, 'errors');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$object->setstatus(1);\n\t\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].'?id='.$id);\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($action == 'confirm_delete' && $confirm == \"yes\" && $candisableuser) {\n\t\tif ($id <> $user->id) {\n\t\t\t$object = new User($db);\n\t\t\t$object->fetch($id);\n\t\t\t$result = $object->delete();\n\t\t\tif ($result < 0) {\n\t\t\t\t$langs->load(\"errors\");\n\t\t\t\tsetEventMessages($langs->trans(\"ErrorUserCannotBeDelete\"), null, 'errors');\n\t\t\t} else {\n\t\t\t\theader(\"Location: \".DOL_URL_ROOT.\"/user/list.php?restore_lastsearch_values=1\");\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Action Add user\n\tif ($action == 'add' && $canadduser) {\n\t\t$error = 0;\n\n\t\tif (!$_POST[\"lastname\"]) {\n\t\t\t$error ++;\n\t\t\tsetEventMessages($langs->trans(\"NameNotDefined\"), null, 'errors');\n\t\t\t$action = \"create\";       // Go back to create page\n\t\t}\n\t\tif (!$_POST[\"login\"]) {\n\t\t\t$error ++;\n\t\t\tsetEventMessages($langs->trans(\"LoginNotDefined\"), null, 'errors');\n\t\t\t$action = \"create\";       // Go back to create page\n\t\t}\n\n\t\tif (!empty($conf->file->main_limit_users)) { // If option to limit users is set\n\t\t\t$nb = $object->getNbOfUsers(\"active\");\n\t\t\tif ($nb >= $conf->file->main_limit_users) {\n\t\t\t\t$error ++;\n\t\t\t\tsetEventMessages($langs->trans(\"YourQuotaOfUsersIsReached\"), null, 'errors');\n\t\t\t\t$action = \"create\";       // Go back to create page\n\t\t\t}\n\t\t}\n\n\t\tif (!$error) {\n\t\t\t$object->lastname = GETPOST(\"lastname\", 'alpha');\n\t\t\t$object->firstname = GETPOST(\"firstname\", 'alpha');\n\t\t\t$object->login = GETPOST(\"login\", 'alpha');\n\t\t\t$object->api_key = GETPOST(\"api_key\", 'alpha');\n\t\t\t$object->gender = GETPOST(\"gender\", 'alpha');\n\t\t\t$birth = dol_mktime(0, 0, 0, GETPOST('birthmonth'), GETPOST('birthday'), GETPOST('birthyear'));\n\t\t\t$object->birth = $birth;\n\t\t\t$object->admin = GETPOST(\"admin\", 'alpha');\n\t\t\t$object->address = GETPOST('address', 'alphanohtml');\n\t\t\t$object->zip = GETPOST('zipcode', 'alphanohtml');\n\t\t\t$object->town = GETPOST('town', 'alphanohtml');\n\t\t\t$object->country_id = GETPOST('country_id', 'int');\n\t\t\t$object->state_id = GETPOST('state_id', 'int');\n\t\t\t$object->office_phone = GETPOST(\"office_phone\", 'alphanohtml');\n\t\t\t$object->office_fax = GETPOST(\"office_fax\", 'alphanohtml');\n\t\t\t$object->user_mobile = GETPOST(\"user_mobile\", 'alphanohtml');\n\t\t\t$object->skype = GETPOST(\"skype\", 'alphanohtml');\n\t\t\t$object->email = preg_replace('/\\s+/', '', GETPOST(\"email\", 'alpha'));\n\t\t\t$object->job = GETPOST(\"job\", 'alpha');\n\t\t\t$object->signature = GETPOST(\"signature\", 'none');\n\t\t\t$object->accountancy_code = GETPOST(\"accountancy_code\", 'alphanohtml');\n\t\t\t$object->note = GETPOST(\"note\", 'none');\n\t\t\t$object->ldap_sid = GETPOST(\"ldap_sid\", 'alphanohtml');\n\t\t\t$object->fk_user = GETPOST(\"fk_user\", 'int') > 0 ? GETPOST(\"fk_user\", 'int') : 0;\n\t\t\t$object->employee = GETPOST('employee', 'alphanohtml');\n\n\t\t\t$object->thm = GETPOST(\"thm\", 'alphanohtml') != '' ? GETPOST(\"thm\", 'alphanohtml') : '';\n\t\t\t$object->tjm = GETPOST(\"tjm\", 'alphanohtml') != '' ? GETPOST(\"tjm\", 'alphanohtml') : '';\n\t\t\t$object->salary = GETPOST(\"salary\", 'alphanohtml') != '' ? GETPOST(\"salary\", 'alphanohtml') : '';\n\t\t\t$object->salaryextra = GETPOST(\"salaryextra\", 'alphanohtml') != '' ? GETPOST(\"salaryextra\", 'alphanohtml') : '';\n\t\t\t$object->weeklyhours = GETPOST(\"weeklyhours\", 'alphanohtml') != '' ? GETPOST(\"weeklyhours\", 'alphanohtml') : '';\n\n\t\t\t$object->color = GETPOST(\"color\", 'alphanohtml') != '' ? GETPOST(\"color\", 'alphanohtml') : '';\n\t\t\t$dateemployment = dol_mktime(0, 0, 0, GETPOST('dateemploymentmonth'), GETPOST('dateemploymentday'), GETPOST('dateemploymentyear'));\n\t\t\t$object->dateemployment = $dateemployment;\n\n\t\t\t// Fill array 'array_options' with data from add form\n\t\t\t$ret = $extrafields->setOptionalsFromPost($extralabels, $object);\n\t\t\tif ($ret < 0) {\n\t\t\t\t$error ++;\n\t\t\t}\n\n\t\t\t// Set entity property\n\t\t\t$entity = GETPOST('entity', 'int');\n\t\t\tif (! empty($conf->multicompany->enabled)) {\n\t\t\t\tif (GETPOST('superadmin', 'int')) {\n\t\t\t\t\t$object->entity = 0;\n\t\t\t\t} else {\n\t\t\t\t\tif (! empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)) {\n\t\t\t\t\t\t$object->entity = 1; // all users are forced into master entity\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$object->entity = ($entity == '' ? 1 : $entity);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$object->entity = ($entity == '' ? 1 : $entity);\n\t\t\t\t/*if ($user->admin && $user->entity == 0 && GETPOST(\"admin\",'alpha'))\n\t\t\t\t{\n\t\t\t\t}*/\n\t\t\t}\n\n\t\t\t$db->begin();\n\n\t\t\t$id = $object->create($user);\n\t\t\tif ($id > 0) {\n\t\t\t\tif (GETPOST('password')) {\n\t\t\t\t\t$object->setPassword($user, GETPOST('password'));\n\t\t\t\t}\n\t\t\t\t\t\tif (! empty($conf->categorie->enabled)) {\n\t\t\t\t\t// Categories association\n\t\t\t\t\t$usercats = GETPOST('usercats', 'array');\n\t\t\t\t\t$object->setCategories($usercats);\n\t\t\t\t}\n\t\t\t\t$db->commit();\n\n\t\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].'?id='.$id);\n\t\t\t\texit;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t$db->rollback();\n\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t$action = \"create\";       // Go back to create page\n\t\t\t}\n\t\t}\n\t}\n\n\t// Action add usergroup\n\tif (($action == 'addgroup' || $action == 'removegroup') && $caneditgroup)\n\t{\n\t\tif ($group)\n\t\t{\n\t\t\t$editgroup = new UserGroup($db);\n\t\t\t$editgroup->fetch($group);\n\t\t\t$editgroup->oldcopy=clone $editgroup;\n\n\t\t\t$object->fetch($id);\n\t\t\tif ($action == 'addgroup') {\n\t\t\t\t$result = $object->SetInGroup($group, $editgroup->entity);\n\t\t\t}\n\t\t\tif ($action == 'removegroup') {\n\t\t\t\t$result = $object->RemoveFromGroup($group, $editgroup->entity);\n\t\t\t}\n\n\t\t\tif ($result > 0) {\n\t\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].'?id='.$id);\n\t\t\t\texit;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($action == 'update' && ! $cancel)\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t\tif ($caneditfield)    // Case we can edit all field\n\t\t{\n\t\t\t$error = 0;\n\n\t\t\tif (!$_POST[\"lastname\"]) {\n\t\t\t\tsetEventMessages($langs->trans(\"NameNotDefined\"), null, 'errors');\n\t\t\t\t$action = \"edit\";       // Go back to create page\n\t\t\t\t$error ++;\n\t\t\t}\n\t\t\tif (!$_POST[\"login\"]) {\n\t\t\t\tsetEventMessages($langs->trans(\"LoginNotDefined\"), null, 'errors');\n\t\t\t\t$action = \"edit\";       // Go back to create page\n\t\t\t\t$error ++;\n\t\t\t}\n\n\t\t\tif (!$error)\n\t\t\t{\n\t\t\t\t$object->fetch($id);\n\n\t\t\t\t$object->oldcopy = clone $object;\n\n\t\t\t\t$db->begin();\n\n\t\t\t\t$object->lastname = GETPOST(\"lastname\", 'alpha');\n\t\t\t\t$object->firstname = GETPOST(\"firstname\", 'alpha');\n\t\t\t\t$object->login = GETPOST(\"login\", 'alpha');\n\t\t\t\t$object->gender = GETPOST(\"gender\", 'alpha');\n\t\t\t\t$birth = dol_mktime(0, 0, 0, GETPOST('birthmonth'), GETPOST('birthday'), GETPOST('birthyear'));\n\t\t\t\t$object->birth = $birth;\n\t\t\t\t$object->pass = GETPOST(\"password\",'none');\n\t\t\t\t$object->api_key = (GETPOST(\"api_key\", 'alpha')) ? GETPOST(\"api_key\", 'alpha') : $object->api_key;\n\t\t\t\tif (! empty($user->admin)) $object->admin = GETPOST(\"admin\"); \t// admin flag can only be set/unset by an admin user. A test is also done later when forging sql request\n\t\t\t\t$object->address = GETPOST('address', 'alphanohtml');\n\t\t\t\t$object->zip = GETPOST('zipcode', 'alphanohtml');\n\t\t\t\t$object->town = GETPOST('town', 'alphanohtml');\n\t\t\t\t$object->country_id = GETPOST('country_id', 'int');\n\t\t\t\t$object->state_id = GETPOST('state_id', 'int');\n\t\t\t\t$object->office_phone = GETPOST(\"office_phone\", 'alphanohtml');\n\t\t\t\t$object->office_fax = GETPOST(\"office_fax\", 'alphanohtml');\n\t\t\t\t$object->user_mobile = GETPOST(\"user_mobile\", 'alphanohtml');\n\t\t\t\t$object->skype = GETPOST(\"skype\", 'alpha');\n\t\t\t\t$object->email = preg_replace('/\\s+/', '', GETPOST(\"email\", 'alpha'));\n\t\t\t\t$object->job = GETPOST(\"job\", 'alpha');\n\t\t\t\t$object->signature = GETPOST(\"signature\",'none');\n\t\t\t\t$object->accountancy_code = GETPOST(\"accountancy_code\",'alpha');\n\t\t\t\t$object->openid = GETPOST(\"openid\",'alpha');\n\t\t\t\t$object->fk_user = GETPOST(\"fk_user\",'int') > 0 ? GETPOST(\"fk_user\",'int') : 0;\n\t\t\t\t$object->employee = GETPOST('employee','int');\n\n\t\t\t\t$object->thm = GETPOST(\"thm\",'alphanohtml') != '' ? GETPOST(\"thm\",'alphanohtml') : '';\n\t\t\t\t$object->tjm = GETPOST(\"tjm\",'alphanohtml') != '' ? GETPOST(\"tjm\",'alphanohtml') : '';\n\t\t\t\t$object->salary = GETPOST(\"salary\",'alphanohtml') != '' ? GETPOST(\"salary\",'alphanohtml') : '';\n\t\t\t\t$object->salaryextra = GETPOST(\"salaryextra\",'alphanohtml') != '' ? GETPOST(\"salaryextra\",'alphanohtml') : '';\n\t\t\t\t$object->weeklyhours = GETPOST(\"weeklyhours\",'alphanohtml') != '' ? GETPOST(\"weeklyhours\",'alphanohtml') : '';\n\n\t\t\t\t$object->color = GETPOST(\"color\",'alpha') != '' ? GETPOST(\"color\",'alpha') : '';\n\t\t\t\t$dateemployment = dol_mktime(0, 0, 0, GETPOST('dateemploymentmonth','int'), GETPOST('dateemploymentday','int'), GETPOST('dateemploymentyear','int'));\n\t\t\t\t$object->dateemployment = $dateemployment;\n\n\t\t\t\tif (! empty($conf->multicompany->enabled))\n\t\t\t\t{\n\t\t\t\t\tif (! empty($_POST[\"superadmin\"]))\n\t\t\t\t\t{\n\t\t\t\t\t\t$object->entity = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse if (! empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE))\n\t\t\t\t\t{\n\t\t\t\t\t\t$object->entity = 1; // all users in master entity\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$object->entity = (! GETPOST('entity', 'int') ? 0 : GETPOST('entity', 'int'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$object->entity = (! GETPOST('entity', 'int') ? 0 : GETPOST('entity', 'int'));\n\t\t\t\t}\n\n\t\t\t\t// Fill array 'array_options' with data from add form\n\t\t\t\t$ret = $extrafields->setOptionalsFromPost($extralabels, $object);\n\t\t\t\tif ($ret < 0) {\n\t\t\t\t\t$error ++;\n\t\t\t\t}\n\n\t\t\t\tif (GETPOST('deletephoto')) {\n\t\t\t\t\t$object->photo = '';\n\t\t\t\t}\n\t\t\t\tif (!empty($_FILES['photo']['name'])) {\n\t\t\t\t\t$object->photo = dol_sanitizeFileName($_FILES['photo']['name']);\n\t\t\t\t}\n\n\t\t\t\tif (!$error) {\n\t\t\t\t\t$ret = $object->update($user);\n\t\t\t\t\tif ($ret < 0) {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t\tif ($db->errno() == 'DB_ERROR_RECORD_ALREADY_EXISTS') {\n\t\t\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t\t\tsetEventMessages($langs->trans(\"ErrorLoginAlreadyExists\", $object->login), null, 'errors');\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!$error && GETPOSTISSET('contactid')) {\n\t\t\t\t\t$contactid = GETPOST('contactid', 'int');\n\n\t\t\t\t\tif ($contactid > 0) {\n\t\t\t\t\t\t$contact = new Contact($db);\n\t\t\t\t\t\t$contact->fetch($contactid);\n\n\t\t\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t\t\t\t$sql .= \" SET fk_socpeople=\".$db->escape($contactid);\n\t\t\t\t\t\tif (!empty($contact->socid)) {\n\t\t\t\t\t\t\t$sql .= \", fk_soc=\".$db->escape($contact->socid);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$sql .= \" WHERE rowid=\".$object->id;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t\t\t\t$sql .= \" SET fk_socpeople=NULL, fk_soc=NULL\";\n\t\t\t\t\t\t$sql .= \" WHERE rowid=\".$object->id;\n\t\t\t\t\t}\n\t\t\t\t\tdol_syslog(\"usercard::update\", LOG_DEBUG);\n\t\t\t\t\t$resql = $db->query($sql);\n\t\t\t\t\tif (!$resql) {\n\t\t\t\t\t\t$error ++;\n\t\t\t\t\t\tsetEventMessages($db->lasterror(), null, 'errors');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!$error && !count($object->errors)) {\n\t\t\t\t\tif (GETPOST('deletephoto') && $object->photo) {\n\t\t\t\t\t\t$fileimg = $conf->user->dir_output.'/'.get_exdir($object->id, 2, 0, 1, $object, 'user').'/logos/'.$object->photo;\n\t\t\t\t\t\t$dirthumbs = $conf->user->dir_output.'/'.get_exdir($object->id, 2, 0, 1, $object, 'user').'/logos/thumbs';\n\t\t\t\t\t\tdol_delete_file($fileimg);\n\t\t\t\t\t\tdol_delete_dir_recursive($dirthumbs);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isset($_FILES['photo']['tmp_name']) && trim($_FILES['photo']['tmp_name'])) {\n\t\t\t\t\t\t$dir = $conf->user->dir_output.'/'.get_exdir($object->id, 2, 0, 1, $object, 'user');\n\n\t\t\t\t\t\tdol_mkdir($dir);\n\n\t\t\t\t\t\tif (@is_dir($dir)) {\n\t\t\t\t\t\t\t$newfile = $dir.'/'.dol_sanitizeFileName($_FILES['photo']['name']);\n\t\t\t\t\t\t\t$result = dol_move_uploaded_file($_FILES['photo']['tmp_name'], $newfile, 1, 0, $_FILES['photo']['error']);\n\n\t\t\t\t\t\t\tif (!$result > 0) {\n\t\t\t\t\t\t\t\tsetEventMessages($langs->trans(\"ErrorFailedToSaveFile\"), null, 'errors');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Create thumbs\n\t\t\t\t\t\t\t\t$object->addThumbs($newfile);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$error ++;\n\t\t\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t\t\tsetEventMessages($langs->trans(\"ErrorFailedToCreateDir\", $dir), $mesgs, 'errors');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (! $error && ! count($object->errors))\n\t\t\t\t{\n\t\t\t\t\t// Then we add the associated categories\n\t\t\t\t\t$categories = GETPOST('usercats', 'array');\n\t\t\t\t\t$object->setCategories($categories);\n\t\t\t\t}\n\n\t\t\t\tif (!$error && !count($object->errors)) {\n\t\t\t\t\tsetEventMessages($langs->trans(\"UserModified\"), null, 'mesgs');\n\t\t\t\t\t$db->commit();\n\n\t\t\t\t\t$login = $_SESSION[\"dol_login\"];\n\t\t\t\t\tif ($login && $login == $object->oldcopy->login && $object->oldcopy->login != $object->login)    // Current user has changed its login\n\t\t\t\t\t{\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t\tsetEventMessages($langs->transnoentitiesnoconv(\"WarningYourLoginWasModifiedPleaseLogin\"), null, 'warnings');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$db->rollback();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif ($caneditpassword)    // Case we can edit only password\n\t\t\t{\n\t\t\t\tdol_syslog(\"Not allowed to change fields, only password\");\n\n\t\t\t\t$object->fetch($id);\n\n\t\t\t\t$object->oldcopy = clone $object;\n\n\t\t\t\t$ret = $object->setPassword($user, GETPOST(\"password\"));\n\t\t\t\tif ($ret < 0)\n\t\t\t\t{\n\t\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Change password with a new generated one\n\tif ((($action == 'confirm_password' && $confirm == 'yes')\n\t\t\t|| ($action == 'confirm_passwordsend' && $confirm == 'yes')) && $caneditpassword\n\t) {\n\t\t$object->fetch($id);\n\n\t\t$newpassword = $object->setPassword($user, '');\n\t\tif ($newpassword < 0) {\n\t\t\t// Echec\n\t\t\tsetEventMessages($langs->trans(\"ErrorFailedToSetNewPassword\"), null, 'errors');\n\t\t} else {\n\t\t\t// Succes\n\t\t\tif ($action == 'confirm_passwordsend' && $confirm == 'yes') {\n\t\t\t\tif ($object->send_password($user, $newpassword) > 0)\n\t\t\t\t{\n\t\t\t\t\tsetEventMessages($langs->trans(\"PasswordChangedAndSentTo\", $object->email), null, 'mesgs');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsetEventMessages($langs->trans(\"PasswordChangedTo\", $newpassword), null, 'warnings');\n\t\t\t}\n\t\t}\n\t}\n\n\t// Action initialisation donnees depuis record LDAP\n\tif ($action == 'adduserldap') {\n\t\t$selecteduser = $_POST['users'];\n\n\t\t$required_fields = array(\n\t\t\t$conf->global->LDAP_KEY_USERS,\n\t\t\t$conf->global->LDAP_FIELD_NAME,\n\t\t\t$conf->global->LDAP_FIELD_FIRSTNAME,\n\t\t\t$conf->global->LDAP_FIELD_LOGIN,\n\t\t\t$conf->global->LDAP_FIELD_LOGIN_SAMBA,\n\t\t\t$conf->global->LDAP_FIELD_PASSWORD,\n\t\t\t$conf->global->LDAP_FIELD_PASSWORD_CRYPTED,\n\t\t\t$conf->global->LDAP_FIELD_PHONE,\n\t\t\t$conf->global->LDAP_FIELD_FAX,\n\t\t\t$conf->global->LDAP_FIELD_MOBILE,\n\t\t\t$conf->global->LDAP_FIELD_SKYPE,\n\t\t\t$conf->global->LDAP_FIELD_MAIL,\n\t\t\t$conf->global->LDAP_FIELD_TITLE,\n\t\t\t$conf->global->LDAP_FIELD_DESCRIPTION,\n\t\t\t$conf->global->LDAP_FIELD_SID\n\t\t);\n\n\t\t$ldap = new Ldap();\n\t\t$result = $ldap->connect_bind();\n\t\tif ($result >= 0) {\n\t\t\t// Remove from required_fields all entries not configured in LDAP (empty) and duplicated\n\t\t\t$required_fields = array_unique(array_values(array_filter($required_fields, \"dol_validElement\")));\n\n\t\t\t$ldapusers = $ldap->getRecords($selecteduser, $conf->global->LDAP_USER_DN, $conf->global->LDAP_KEY_USERS, $required_fields);\n\t\t\t//print_r($ldapusers);\n\n\t\t\tif (is_array($ldapusers)) {\n\t\t\t\tforeach ($ldapusers as $key => $attribute) {\n\t\t\t\t\t$ldap_lastname = $attribute[$conf->global->LDAP_FIELD_NAME];\n\t\t\t\t\t$ldap_firstname = $attribute[$conf->global->LDAP_FIELD_FIRSTNAME];\n\t\t\t\t\t$ldap_login = $attribute[$conf->global->LDAP_FIELD_LOGIN];\n\t\t\t\t\t$ldap_loginsmb = $attribute[$conf->global->LDAP_FIELD_LOGIN_SAMBA];\n\t\t\t\t\t$ldap_pass = $attribute[$conf->global->LDAP_FIELD_PASSWORD];\n\t\t\t\t\t$ldap_pass_crypted = $attribute[$conf->global->LDAP_FIELD_PASSWORD_CRYPTED];\n\t\t\t\t\t$ldap_phone = $attribute[$conf->global->LDAP_FIELD_PHONE];\n\t\t\t\t\t$ldap_fax = $attribute[$conf->global->LDAP_FIELD_FAX];\n\t\t\t\t\t$ldap_mobile = $attribute[$conf->global->LDAP_FIELD_MOBILE];\n\t\t\t\t\t$ldap_skype = $attribute[$conf->global->LDAP_FIELD_SKYPE];\n\t\t\t\t\t$ldap_mail = $attribute[$conf->global->LDAP_FIELD_MAIL];\n\t\t\t\t\t$ldap_sid = $attribute[$conf->global->LDAP_FIELD_SID];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetEventMessages($ldap->error, $ldap->errors, 'errors');\n\t\t}\n\t}\n\n\t// Actions to send emails\n\t$trigger_name='USER_SENTBYMAIL';\n\t$paramname='id';    // Name of param key to open the card\n\t$mode='emailfromuser';\n\t$trackid='use'.$id;\n\tinclude DOL_DOCUMENT_ROOT.'/core/actions_sendmails.inc.php';\n\n\t// Actions to build doc\n\t$upload_dir = $conf->user->dir_output;\n\t$permissioncreate=$user->rights->user->user->creer;\n\tinclude DOL_DOCUMENT_ROOT.'/core/actions_builddoc.inc.php';\n}\n\n\n/*\n * View\n */\n\n$form = new Form($db);\n$formother=new FormOther($db);\n$formcompany = new FormCompany($db);\n$formfile = new FormFile($db);\n\nllxHeader('',$langs->trans(\"UserCard\"));\n\nif ($action == 'create' || $action == 'adduserldap')\n{\n\t/* ************************************************************************** */\n\t/*                                                                            */\n\t/* Affichage fiche en mode creation                                           */\n\t/*                                                                            */\n\t/* ************************************************************************** */\n\n\tprint load_fiche_titre($langs->trans(\"NewUser\"));\n\n\tprint $langs->trans(\"CreateInternalUserDesc\").\"<br>\\n\";\n\tprint \"<br>\";\n\n\n\tif (! empty($conf->ldap->enabled) && (isset($conf->global->LDAP_SYNCHRO_ACTIVE) && $conf->global->LDAP_SYNCHRO_ACTIVE == 'ldap2dolibarr'))\n\t{\n\t\t/*\n         * Affiche formulaire d'ajout d'un compte depuis LDAP\n         * si on est en synchro LDAP vers Dolibarr\n         */\n\n\t\t$ldap = new Ldap();\n\t\t$result = $ldap->connect_bind();\n\t\tif ($result >= 0)\n\t\t{\n\t\t\t$required_fields=array(\n\t\t\t\t$conf->global->LDAP_KEY_USERS,\n\t\t\t\t$conf->global->LDAP_FIELD_FULLNAME,\n\t\t\t\t$conf->global->LDAP_FIELD_NAME,\n\t\t\t\t$conf->global->LDAP_FIELD_FIRSTNAME,\n\t\t\t\t$conf->global->LDAP_FIELD_LOGIN,\n\t\t\t\t$conf->global->LDAP_FIELD_LOGIN_SAMBA,\n\t\t\t\t$conf->global->LDAP_FIELD_PASSWORD,\n\t\t\t\t$conf->global->LDAP_FIELD_PASSWORD_CRYPTED,\n\t\t\t\t$conf->global->LDAP_FIELD_PHONE,\n\t\t\t\t$conf->global->LDAP_FIELD_FAX,\n\t\t\t\t$conf->global->LDAP_FIELD_MOBILE,\n\t\t\t\t$conf->global->LDAP_FIELD_SKYPE,\n\t\t\t\t$conf->global->LDAP_FIELD_MAIL,\n\t\t\t\t$conf->global->LDAP_FIELD_TITLE,\n\t\t\t\t$conf->global->LDAP_FIELD_DESCRIPTION,\n\t\t\t\t$conf->global->LDAP_FIELD_SID\n\t\t\t);\n\n\t\t\t// Remove from required_fields all entries not configured in LDAP (empty) and duplicated\n\t\t\t$required_fields=array_unique(array_values(array_filter($required_fields, \"dol_validElement\")));\n\n\t\t\t// Get from LDAP database an array of results\n\t\t\t$ldapusers = $ldap->getRecords('*', $conf->global->LDAP_USER_DN, $conf->global->LDAP_KEY_USERS, $required_fields, 1);\n\n\t\t\tif (is_array($ldapusers))\n\t\t\t{\n\t\t\t\t$liste=array();\n\t\t\t\tforeach ($ldapusers as $key => $ldapuser)\n\t\t\t\t{\n\t\t\t\t\t// Define the label string for this user\n\t\t\t\t\t$label='';\n\t\t\t\t\tforeach ($required_fields as $value)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($value)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$label.=$value.\"=\".$ldapuser[$value].\" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$liste[$key] = $label;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsetEventMessages($ldap->error, $ldap->errors, 'errors');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetEventMessages($ldap->error, $ldap->errors, 'errors');\n\t\t}\n\n\t\t// If user list is full, we show drop-down list\n\t   \tprint \"\\n\\n<!-- Form liste LDAP debut -->\\n\";\n\n\t   \tprint '<form name=\"add_user_ldap\" action=\"'.$_SERVER[\"PHP_SELF\"].'\" method=\"post\">';\n\t   \tprint '<input type=\"hidden\" name=\"token\" value=\"'.$_SESSION['newtoken'].'\">';\n\t   \tprint '<table width=\"100%\" class=\"border\"><tr>';\n\t   \tprint '<td width=\"160\">';\n\t   \tprint $langs->trans(\"LDAPUsers\");\n\t   \tprint '</td>';\n\t   \tprint '<td>';\n\t   \tprint '<input type=\"hidden\" name=\"action\" value=\"adduserldap\">';\n\t\tif (is_array($liste) && count($liste))\n\t\t{\n\t\t\tprint $form->selectarray('users', $liste, '', 1);\n\t\t\tprint ajax_combobox('users');\n\t\t}\n\t   \tprint '</td><td align=\"center\">';\n\t   \tprint '<input type=\"submit\" class=\"button\" value=\"'.dol_escape_htmltag($langs->trans('Get')).'\"'.(count($liste)?'':' disabled').'>';\n\t   \tprint '</td></tr></table>';\n\t   \tprint '</form>';\n\n\t   \tprint \"\\n<!-- Form liste LDAP fin -->\\n\\n\";\n\t   \tprint '<br>';\n\t}\n\n\n\tprint '<form action=\"'.$_SERVER['PHP_SELF'].'\" method=\"POST\" name=\"createuser\">';\n\tprint '<input type=\"hidden\" name=\"token\" value=\"'.$_SESSION['newtoken'].'\">';\n\tprint '<input type=\"hidden\" name=\"action\" value=\"add\">';\n\tif (! empty($ldap_sid)) print '<input type=\"hidden\" name=\"ldap_sid\" value=\"'.dol_escape_htmltag($ldap_sid).'\">';\n\tprint '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\">';\n\n\tdol_fiche_head('', '', '', 0, '');\n\n\tprint dol_set_focus('#lastname');\n\n\tprint '<table class=\"border centpercent\">';\n\n\t// Lastname\n\tprint '<tr>';\n\tprint '<td class=\"titlefieldcreate\"><span class=\"fieldrequired\">'.$langs->trans(\"Lastname\").'</span></td>';\n\tprint '<td>';\n\tif (! empty($ldap_lastname))\n\t{\n\t\tprint '<input type=\"hidden\" id=\"lastname\" name=\"lastname\" value=\"'.$ldap_lastname.'\">';\n\t\tprint $ldap_lastname;\n\t}\n\telse\n\t{\n\t\tprint '<input class=\"minwidth100\" type=\"text\" id=\"lastname\" name=\"lastname\" value=\"'.GETPOST('lastname').'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// Firstname\n\tprint '<tr><td>'.$langs->trans(\"Firstname\").'</td>';\n\tprint '<td>';\n\tif (! empty($ldap_firstname))\n\t{\n\t\tprint '<input type=\"hidden\" name=\"firstname\" value=\"'.$ldap_firstname.'\">';\n\t\tprint $ldap_firstname;\n\t}\n\telse\n\t{\n\t\tprint '<input class=\"minwidth100\" type=\"text\" name=\"firstname\" value=\"'.GETPOST('firstname').'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// Login\n\tprint '<tr><td><span class=\"fieldrequired\">'.$langs->trans(\"Login\").'</span></td>';\n\tprint '<td>';\n\tif (! empty($ldap_login))\n\t{\n\t\tprint '<input type=\"hidden\" name=\"login\" value=\"'.$ldap_login.'\">';\n\t\tprint $ldap_login;\n\t}\n\telseif (! empty($ldap_loginsmb))\n\t{\n\t\tprint '<input type=\"hidden\" name=\"login\" value=\"'.$ldap_loginsmb.'\">';\n\t\tprint $ldap_loginsmb;\n\t}\n\telse\n\t{\n\t\tprint '<input class=\"maxwidth200\" maxsize=\"24\" type=\"text\" name=\"login\" value=\"'.dol_escape_htmltag(GETPOST('login','alpha')).'\">';\n\t}\n\tprint '</td></tr>';\n\n\t$generated_password='';\n\tif (empty($ldap_sid))    // ldap_sid is for activedirectory\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/security2.lib.php';\n\t\t$generated_password=getRandomPassword(false);\n\t}\n\t$password=$generated_password;\n\n\t// Password\n\tprint '<tr><td class=\"fieldrequired\">'.$langs->trans(\"Password\").'</td>';\n\tprint '<td>';\n\t$valuetoshow='';\n\tif (preg_match('/ldap/',$dolibarr_main_authentication))\n\t{\n\t\t$valuetoshow.=($valuetoshow?', ':'').$langs->trans(\"PasswordOfUserInLDAP\");\n\t}\n\tif (preg_match('/http/',$dolibarr_main_authentication))\n\t{\n\t\t$valuetoshow.=($valuetoshow?', ':'').$langs->trans(\"HTTPBasicPassword\");\n\t}\n\tif (preg_match('/dolibarr/',$dolibarr_main_authentication))\n\t{\n\t\tif (! empty($ldap_pass))\t// For very old system comaptibilty. Now clear password can't be viewed from LDAP read\n\t\t{\n\t\t\t$valuetoshow.= ($valuetoshow?', ':'').'<input type=\"hidden\" name=\"password\" value=\"'.$ldap_pass.'\">';\t// Dolibarr password is preffiled with LDAP known password\n\t\t\t$valuetoshow.= preg_replace('/./i','*',$ldap_pass);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// We do not use a field password but a field text to show new password to use.\n\t\t\t$valuetoshow.= ($valuetoshow?', ':'').'<input size=\"30\" maxsize=\"32\" type=\"text\" name=\"password\" value=\"'.$password.'\" autocomplete=\"new-password\">';\n\t\t}\n\t}\n\n\t// Other form for user password\n\t$parameters=array('valuetoshow' => $valuetoshow, 'password' => $password);\n\t$reshook=$hookmanager->executeHooks('printUserPasswordField',$parameters,$object,$action);    // Note that $action and $object may have been modified by hook\n\tif ($reshook > 0) $valuetoshow=$hookmanager->resPrint;\t// to replace\n\telse $valuetoshow.=$hookmanager->resPrint;\t\t\t\t// to add\n\n\tprint $valuetoshow;\n\tprint '</td></tr>';\n\n\tif (! empty($conf->api->enabled))\n\t{\n\t\t// API key\n\t\t$generated_api_key = '';\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/security2.lib.php';\n\t\t\t$generated_password=getRandomPassword(false);\n\t\tprint '<tr><td>'.$langs->trans(\"ApiKey\").'</td>';\n\t\tprint '<td>';\n\t\tprint '<input size=\"30\" maxsize=\"32\" type=\"text\" id=\"api_key\" name=\"api_key\" value=\"'.$api_key.'\" autocomplete=\"off\">';\n\t\tif (! empty($conf->use_javascript_ajax))\n\t\t\tprint '&nbsp;'.img_picto($langs->trans('Generate'), 'refresh', 'id=\"generate_api_key\" class=\"linkobject\"');\n\t\tprint '</td></tr>';\n\t}\n\telse\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/security2.lib.php';\n\t\t// PARTIAL WORKAROUND\n\t\t$generated_fake_api_key=getRandomPassword(false);\n\t\tprint '<input type=\"hidden\" name=\"api_key\" value=\"'.$generated_fake_api_key.'\">';\n\t}\n\n\t// Administrator\n\tif (! empty($user->admin))\n\t{\n\t\tprint '<tr><td>'.$langs->trans(\"Administrator\").'</td>';\n\t\tprint '<td>';\n\t\tprint $form->selectyesno('admin',GETPOST('admin'),1);\n\n\t\tif (! empty($conf->multicompany->enabled) && ! $user->entity && empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE))\n\t\t{\n\t\t\tif (! empty($conf->use_javascript_ajax))\n\t\t\t{\n\t\t\t\tprint '<script type=\"text/javascript\">\n                            $(function() {\n                                $(\"select[name=admin]\").change(function() {\n                                     if ( $(this).val() == 0 ) {\n                                        $(\"input[name=superadmin]\")\n                                            .prop(\"disabled\", true)\n                                            .prop(\"checked\", false);\n                                        $(\"select[name=entity]\")\n                                            .prop(\"disabled\", false);\n                                     } else {\n                                        $(\"input[name=superadmin]\")\n                                            .prop(\"disabled\", false);\n                                     }\n                                });\n                                $(\"input[name=superadmin]\").change(function() {\n                                    if ( $(this).is(\":checked\") ) {\n                                        $(\"select[name=entity]\")\n                                            .prop(\"disabled\", true);\n                                    } else {\n                                        $(\"select[name=entity]\")\n                                            .prop(\"disabled\", false);\n                                    }\n                                });\n                            });\n                    </script>';\n\t\t\t}\n\t\t\t$checked=(GETPOST('superadmin', 'int')?' checked':'');\n\t\t\t$disabled=(GETPOST('superadmin', 'int')?'':' disabled');\n\t\t\tprint '<input type=\"checkbox\" name=\"superadmin\" value=\"1\"'.$checked.$disabled.' /> '.$langs->trans(\"SuperAdministrator\");\n\t\t}\n\t\tprint \"</td></tr>\\n\";\n\t}\n\n\t// Type\n\tprint '<tr><td>'.$langs->trans(\"Type\").'</td>';\n\tprint '<td>';\n\tprint $form->textwithpicto($langs->trans(\"Internal\"),$langs->trans(\"InternalExternalDesc\"), 1, 'help', '', 0, 2);\n\tprint '</td></tr>';\n\n\t// Gender\n\tprint '<tr><td>'.$langs->trans(\"Gender\").'</td>';\n\tprint '<td>';\n\t$arraygender=array('man'=>$langs->trans(\"Genderman\"),'woman'=>$langs->trans(\"Genderwoman\"));\n\tprint $form->selectarray('gender', $arraygender, GETPOST('gender'), 1);\n\tprint '</td></tr>';\n\n\t// Employee\n\t$defaultemployee=1;\n\tprint '<tr>';\n\tprint '<td>'.$langs->trans('Employee').'</td><td>';\n\tprint $form->selectyesno(\"employee\",(GETPOST('employee')!=''?GETPOST('employee'):$defaultemployee),1);\n\tprint '</td></tr>';\n\n\t// Hierarchy\n\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"HierarchicalResponsible\").'</td>';\n\tprint '<td>';\n\tprint $form->select_dolusers($object->fk_user, 'fk_user', 1, array($object->id), 0, '', 0, $conf->entity, 0, 0, '', 0, '', 'maxwidth300');\n\tprint '</td>';\n\tprint \"</tr>\\n\";\n\n\n\tprint '</table><hr><table class=\"border centpercent\">';\n\n\n\t// Address\n\tprint '<tr><td class=\"tdtop titlefieldcreate\">'.fieldLabel('Address','address').'</td>';\n\tprint '<td><textarea name=\"address\" id=\"address\" class=\"quatrevingtpercent\" rows=\"3\" wrap=\"soft\">';\n\tprint $object->address;\n\tprint '</textarea></td></tr>';\n\n\t// Zip\n\tprint '<tr><td>'.fieldLabel('Zip','zipcode').'</td><td>';\n\tprint $formcompany->select_ziptown($object->zip,'zipcode',array('town','selectcountry_id','state_id'),6);\n\tprint '</td></tr>';\n\n\t// Town\n\tprint '<tr><td>'.fieldLabel('Town','town').'</td><td>';\n\tprint $formcompany->select_ziptown($object->town,'town',array('zipcode','selectcountry_id','state_id'));\n\tprint '</td></tr>';\n\n\t// Country\n\tprint '<tr><td>'.fieldLabel('Country','selectcountry_id').'</td><td class=\"maxwidthonsmartphone\">';\n\tprint $form->select_country((GETPOST('country_id')!=''?GETPOST('country_id'):$object->country_id));\n\tif ($user->admin) print info_admin($langs->trans(\"YouCanChangeValuesForThisListFromDictionarySetup\"),1);\n\tprint '</td></tr>';\n\n\t// State\n\tif (empty($conf->global->USER_DISABLE_STATE))\n\t{\n\t\tprint '<tr><td>'.fieldLabel('State','state_id').'</td><td class=\"maxwidthonsmartphone\">';\n\t\tprint $formcompany->select_state($object->state_id,$object->country_code, 'state_id');\n\t\tprint '</td></tr>';\n\t}\n\n\t// Tel\n\tprint '<tr><td>'.$langs->trans(\"PhonePro\").'</td>';\n\tprint '<td>';\n\tif (! empty($ldap_phone))\n\t{\n\t\tprint '<input type=\"hidden\" name=\"office_phone\" value=\"'.$ldap_phone.'\">';\n\t\tprint $ldap_phone;\n\t}\n\telse\n\t{\n\t\tprint '<input size=\"20\" type=\"text\" name=\"office_phone\" value=\"'.GETPOST('office_phone').'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// Tel portable\n\tprint '<tr><td>'.$langs->trans(\"PhoneMobile\").'</td>';\n\tprint '<td>';\n\tif (! empty($ldap_mobile))\n\t{\n\t\tprint '<input type=\"hidden\" name=\"user_mobile\" value=\"'.$ldap_mobile.'\">';\n\t\tprint $ldap_mobile;\n\t}\n\telse\n\t{\n\t\tprint '<input size=\"20\" type=\"text\" name=\"user_mobile\" value=\"'.GETPOST('user_mobile').'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// Fax\n\tprint '<tr><td>'.$langs->trans(\"Fax\").'</td>';\n\tprint '<td>';\n\tif (! empty($ldap_fax))\n\t{\n\t\tprint '<input type=\"hidden\" name=\"office_fax\" value=\"'.$ldap_fax.'\">';\n\t\tprint $ldap_fax;\n\t}\n\telse\n\t{\n\t\tprint '<input size=\"20\" type=\"text\" name=\"office_fax\" value=\"'.GETPOST('office_fax').'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// Skype\n\tif (! empty($conf->skype->enabled))\n\t{\n\t\tprint '<tr><td>'.$langs->trans(\"Skype\").'</td>';\n\t\tprint '<td>';\n\t\tif (! empty($ldap_skype))\n\t\t{\n\t\t\tprint '<input type=\"hidden\" name=\"skype\" value=\"'.$ldap_skype.'\">';\n\t\t\tprint $ldap_skype;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprint '<input class=\"maxwidth200\" type=\"text\" name=\"skype\" value=\"'.GETPOST('skype').'\">';\n\t\t}\n\t\tprint '</td></tr>';\n\t}\n\n\t// EMail\n\tprint '<tr><td'.(! empty($conf->global->USER_MAIL_REQUIRED)?' class=\"fieldrequired\"':'').'>'.$langs->trans(\"EMail\").'</td>';\n\tprint '<td>';\n\tif (! empty($ldap_mail))\n\t{\n\t\tprint '<input type=\"hidden\" name=\"email\" value=\"'.$ldap_mail.'\">';\n\t\tprint $ldap_mail;\n\t}\n\telse\n\t{\n\t\tprint '<input size=\"40\" type=\"text\" name=\"email\" value=\"'.GETPOST('email').'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// Accountancy code\n\tif ($conf->accounting->enabled)\n\t{\n\t\tprint '<tr><td>'.$langs->trans(\"AccountancyCode\").'</td>';\n\t\tprint '<td>';\n\t\tprint '<input size=\"30\" type=\"text\" name=\"accountancy_code\" value=\"'.GETPOST('accountancy_code').'\">';\n\t\tprint '</td></tr>';\n\t}\n\n\t// User color\n\tif (! empty($conf->agenda->enabled))\n\t{\n\t\tprint '<tr><td>'.$langs->trans(\"ColorUser\").'</td>';\n\t\tprint '<td>';\n\t\tprint $formother->selectColor(GETPOST('color')?GETPOST('color'):$object->color, 'color', null, 1, '', 'hideifnotset');\n\t\tprint '</td></tr>';\n\t}\n\n\t// Categories\n\tif (! empty($conf->categorie->enabled)  && ! empty($user->rights->categorie->lire))\n\t{\n\t\tprint '<tr><td>' . fieldLabel('Categories', 'usercats') . '</td><td colspan=\"3\">';\n\t\t$cate_arbo = $form->select_all_categories('user', null, 'parent', null, null, 1);\n\t\tprint $form->multiselectarray('usercats', $cate_arbo, GETPOST('usercats', 'array'), null, null, null,\n\t\t\tnull, '90%' );\n\t\tprint \"</td></tr>\";\n\t}\n\n\t// Multicompany\n\tif (! empty($conf->multicompany->enabled) && is_object($mc))\n\t{\n\t\t// This is now done with hook formObjectOptions. Keep this code for backward compatibility with old multicompany module\n\t\tif (! method_exists($mc, 'formObjectOptions'))\n\t\t{\n\t\t\tif (empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE) && $conf->entity == 1 && $user->admin && ! $user->entity)\t// condition must be same for create and edit mode\n\t\t\t{\n\t\t\t\t print \"<tr>\".'<td>'.$langs->trans(\"Entity\").'</td>';\n\t\t\t\t print \"<td>\".$mc->select_entities($conf->entity);\n\t\t\t\t print \"</td></tr>\\n\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t print '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\" />';\n\t\t\t}\n\t\t }\n\t}\n\n\t// Other attributes\n\t$parameters=array('objectsrc' => $objectsrc, 'colspan' => ' colspan=\"3\"');\n\t$reshook=$hookmanager->executeHooks('formObjectOptions',$parameters,$object,$action);    // Note that $action and $object may have been modified by hook\n\tprint $hookmanager->resPrint;\n\tif (empty($reshook))\n\t{\n\t\tprint $object->showOptionals($extrafields,'edit');\n\t}\n\n\t// Note\n\tprint '<tr><td class=\"tdtop\">';\n\tprint $langs->trans(\"Note\");\n\tprint '</td><td>';\n\trequire_once DOL_DOCUMENT_ROOT.'/core/class/doleditor.class.php';\n\t$doleditor=new DolEditor('note','','',120,'dolibarr_notes','',false,true,$conf->global->FCKEDITOR_ENABLE_SOCIETE,ROWS_3,'90%');\n\t$doleditor->Create();\n\tprint \"</td></tr>\\n\";\n\n\t// Signature\n\tprint '<tr><td class=\"tdtop\">'.$langs->trans(\"Signature\").'</td>';\n\tprint '<td>';\n\trequire_once DOL_DOCUMENT_ROOT.'/core/class/doleditor.class.php';\n\t$doleditor=new DolEditor('signature',GETPOST('signature'),'',138,'dolibarr_notes','In',true,true,empty($conf->global->FCKEDITOR_ENABLE_USERSIGN)?0:1,ROWS_4,'90%');\n\tprint $doleditor->Create(1);\n\tprint '</td></tr>';\n\n\n\tprint '</table><hr><table class=\"border centpercent\">';\n\n\n\t// TODO Move this into tab RH (HierarchicalResponsible must be on both tab)\n\n\t// Position/Job\n\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"PostOrFunction\").'</td>';\n\tprint '<td>';\n\tprint '<input class=\"maxwidth200\" type=\"text\" name=\"job\" value=\"'.GETPOST('job').'\">';\n\tprint '</td></tr>';\n\n\n\tif ((! empty($conf->salaries->enabled) && ! empty($user->rights->salaries->read))\n\t\t|| (! empty($conf->hrm->enabled) && ! empty($user->rights->hrm->employee->read)))\n\t{\n\t\t$langs->load(\"salaries\");\n\n\t\t// THM\n\t\tprint '<tr><td>';\n\t\t$text=$langs->trans(\"THM\");\n\t\tprint $form->textwithpicto($text, $langs->trans(\"THMDescription\"), 1, 'help', 'classthm');\n\t\tprint '</td>';\n\t\tprint '<td>';\n\t\tprint '<input size=\"8\" type=\"text\" name=\"thm\" value=\"'.GETPOST('thm').'\">';\n\t\tprint '</td>';\n\t\tprint \"</tr>\\n\";\n\n\t\t// TJM\n\t\tprint '<tr><td>';\n\t\t$text=$langs->trans(\"TJM\");\n\t\tprint $form->textwithpicto($text, $langs->trans(\"TJMDescription\"), 1, 'help', 'classtjm');\n\t\tprint '</td>';\n\t\tprint '<td>';\n\t\tprint '<input size=\"8\" type=\"text\" name=\"tjm\" value=\"'.GETPOST('tjm').'\">';\n\t\tprint '</td>';\n\t\tprint \"</tr>\\n\";\n\n\t\t// Salary\n\t\tprint '<tr><td>'.$langs->trans(\"Salary\").'</td>';\n\t\tprint '<td>';\n\t\tprint '<input size=\"8\" type=\"text\" name=\"salary\" value=\"'.GETPOST('salary').'\">';\n\t\tprint '</td>';\n\t\tprint \"</tr>\\n\";\n\t}\n\n\t// Weeklyhours\n\tprint '<tr><td>'.$langs->trans(\"WeeklyHours\").'</td>';\n\tprint '<td>';\n\tprint '<input size=\"8\" type=\"text\" name=\"weeklyhours\" value=\"'.GETPOST('weeklyhours').'\">';\n\tprint '</td>';\n\tprint \"</tr>\\n\";\n\n\t// Date employment\n\tprint '<tr><td>'.$langs->trans(\"DateEmployment\").'</td>';\n\tprint '<td>';\n\techo $form->select_date(GETPOST('dateemployment'),'dateemployment',0,0,1,'form'.'dateemployment',1,0,1);\n\tprint '</td>';\n\tprint \"</tr>\\n\";\n\n\t// Date birth\n\tprint '<tr><td>'.$langs->trans(\"DateToBirth\").'</td>';\n\tprint '<td>';\n\techo $form->select_date(GETPOST('birth'),'birth',0,0,1,'createuser',1,0,1);\n\tprint '</td>';\n\tprint \"</tr>\\n\";\n\n\tprint \"</table>\\n\";\n\n \tdol_fiche_end();\n\n\tprint '<div align=\"center\">';\n\tprint '<input class=\"button\" value=\"'.$langs->trans(\"CreateUser\").'\" name=\"create\" type=\"submit\">';\n\t//print '&nbsp; &nbsp; &nbsp;';\n\t//print '<input value=\"'.$langs->trans(\"Cancel\").'\" class=\"button\" type=\"submit\" name=\"cancel\">';\n\tprint '</div>';\n\n\tprint \"</form>\";\n}\nelse\n{\n\t/* ************************************************************************** */\n\t/*                                                                            */\n\t/* View and edition                                                            */\n\t/*                                                                            */\n\t/* ************************************************************************** */\n\n\tif ($id > 0)\n\t{\n\t\t$object->fetch($id, '', '', 1);\n\t\tif ($res < 0) { dol_print_error($db,$object->error); exit; }\n\t\t$res=$object->fetch_optionals();\n\n\t\t// Check if user has rights\n\t\t$object->getrights();\n\t\tif (empty($object->nb_rights) && $object->statut != 0 && empty($object->admin)) setEventMessages($langs->trans('UserHasNoPermissions'), null, 'warnings');\n\n\t\t// Connexion ldap\n\t\t// pour recuperer passDoNotExpire et userChangePassNextLogon\n\t\tif (! empty($conf->ldap->enabled) && ! empty($object->ldap_sid))\n\t\t{\n\t\t\t$ldap = new Ldap();\n\t\t\t$result=$ldap->connect_bind();\n\t\t\tif ($result > 0)\n\t\t\t{\n\t\t\t\t$userSearchFilter = '('.$conf->global->LDAP_FILTER_CONNECTION.'('.$ldap->getUserIdentifier().'='.$object->login.'))';\n\t\t\t\t$entries = $ldap->fetch($object->login,$userSearchFilter);\n\t\t\t\tif (! $entries)\n\t\t\t\t{\n\t\t\t\t\tsetEventMessages($ldap->error, $ldap->errors, 'errors');\n\t\t\t\t}\n\n\t\t\t\t$passDoNotExpire = 0;\n\t\t\t\t$userChangePassNextLogon = 0;\n\t\t\t\t$userDisabled = 0;\n\t\t\t\t$statutUACF = '';\n\n\t\t\t\t// Check options of user account\n\t\t\t\tif (count($ldap->uacf) > 0)\n\t\t\t\t{\n\t\t\t\t\tforeach ($ldap->uacf as $key => $statut)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($key == 65536)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$passDoNotExpire = 1;\n\t\t\t\t\t\t\t$statutUACF = $statut;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$userDisabled = 1;\n\t\t\t\t\t$statutUACF = \"ACCOUNTDISABLE\";\n\t\t\t\t}\n\n\t\t\t\tif ($ldap->pwdlastset == 0)\n\t\t\t\t{\n\t\t\t\t\t$userChangePassNextLogon = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Show tabs\n\t\tif ($mode == 'employee') // For HRM module development\n\t\t{\n\t\t\t$title = $langs->trans(\"Employee\");\n\t\t\t$linkback = '<a href=\"'.DOL_URL_ROOT.'/hrm/employee/list.php?restore_lastsearch_values=1\">'.$langs->trans(\"BackToList\").'</a>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$title = $langs->trans(\"User\");\n\t\t\t$linkback = '';\n\n\t\t\tif ($user->rights->user->user->lire || $user->admin) {\n\t\t\t\t$linkback = '<a href=\"'.DOL_URL_ROOT.'/user/list.php?restore_lastsearch_values=1\">'.$langs->trans(\"BackToList\").'</a>';\n\t\t\t}\n\t\t}\n\n\t\t$head = user_prepare_head($object);\n\n\t\t/*\n         * Confirmation reinitialisation mot de passe\n         */\n\t\tif ($action == 'password')\n\t\t{\n\t\t\tprint $form->formconfirm($_SERVER['PHP_SELF'].\"?id=$object->id\",$langs->trans(\"ReinitPassword\"),$langs->trans(\"ConfirmReinitPassword\",$object->login),\"confirm_password\", '', 0, 1);\n\t\t}\n\n\t\t/*\n         * Confirmation envoi mot de passe\n         */\n\t\tif ($action == 'passwordsend')\n\t\t{\n\t\t\tprint $form->formconfirm($_SERVER['PHP_SELF'].\"?id=$object->id\",$langs->trans(\"SendNewPassword\"),$langs->trans(\"ConfirmSendNewPassword\",$object->login),\"confirm_passwordsend\", '', 0, 1);\n\t\t}\n\n\t\t/*\n         * Confirm deactivation\n         */\n\t\tif ($action == 'disable')\n\t\t{\n\t\t\tprint $form->formconfirm($_SERVER['PHP_SELF'].\"?id=$object->id\",$langs->trans(\"DisableAUser\"),$langs->trans(\"ConfirmDisableUser\",$object->login),\"confirm_disable\", '', 0, 1);\n\t\t}\n\n\t\t/*\n         * Confirm activation\n         */\n\t\tif ($action == 'enable')\n\t\t{\n\t\t\tprint $form->formconfirm($_SERVER['PHP_SELF'].\"?id=$object->id\",$langs->trans(\"EnableAUser\"),$langs->trans(\"ConfirmEnableUser\",$object->login),\"confirm_enable\", '', 0, 1);\n\t\t}\n\n\t\t/*\n         * Confirmation suppression\n         */\n\t\tif ($action == 'delete')\n\t\t{\n\t\t\tprint $form->formconfirm($_SERVER['PHP_SELF'].\"?id=$object->id\",$langs->trans(\"DeleteAUser\"),$langs->trans(\"ConfirmDeleteUser\",$object->login),\"confirm_delete\", '', 0, 1);\n\t\t}\n\n\t\t/*\n         * Fiche en mode visu\n         */\n\t\tif ($action != 'edit')\n\t\t{\n\t\t\tdol_fiche_head($head, 'user', $title, -1, 'user');\n\n\t\t\tdol_banner_tab($object,'id',$linkback,$user->rights->user->user->lire || $user->admin);\n\n\t\t\tprint '<div class=\"fichecenter\">';\n\t\t\tprint '<div class=\"fichehalfleft\">';\n\n\t\t\tprint '<div class=\"underbanner clearboth\"></div>';\n\t\t\tprint '<table class=\"border tableforfield\" width=\"100%\">';\n\n\t\t\t// Login\n\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"Login\").'</td>';\n\t\t\tif (! empty($object->ldap_sid) && $object->statut==0)\n\t\t\t{\n\t\t\t\tprint '<td class=\"error\">'.$langs->trans(\"LoginAccountDisableInDolibarr\").'</td>';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<td>'.$object->login.'</td>';\n\t\t\t}\n\t\t\tprint '</tr>'.\"\\n\";\n\n\t\t\t// Password\n\t\t\tprint '<tr><td>'.$langs->trans(\"Password\").'</td>';\n\n\t\t\tprint '<td>';\n\t\t\t$valuetoshow='';\n\t\t\tif (preg_match('/ldap/',$dolibarr_main_authentication))\n\t\t\t{\n\t\t\t\tif (! empty($object->ldap_sid))\n\t\t\t\t{\n\t\t\t\t\tif ($passDoNotExpire)\n\t\t\t\t\t{\n\t\t\t\t\t\t$valuetoshow.=($valuetoshow?(' '.$langs->trans(\"or\").' '):'').$langs->trans(\"LdapUacf_\".$statutUACF);\n\t\t\t\t\t}\n\t\t\t\t\telse if($userChangePassNextLogon)\n\t\t\t\t\t{\n\t\t\t\t\t\t$valuetoshow.=($valuetoshow?(' '.$langs->trans(\"or\").' '):'').'<span class=\"warning\">'.$langs->trans(\"UserMustChangePassNextLogon\",$ldap->domainFQDN).'</span>';\n\t\t\t\t\t}\n\t\t\t\t\telse if($userDisabled)\n\t\t\t\t\t{\n\t\t\t\t\t\t$valuetoshow.=($valuetoshow?(' '.$langs->trans(\"or\").' '):'').'<span class=\"warning\">'.$langs->trans(\"LdapUacf_\".$statutUACF,$ldap->domainFQDN).'</span>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$valuetoshow.=($valuetoshow?(' '.$langs->trans(\"or\").' '):'').$langs->trans(\"PasswordOfUserInLDAP\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$valuetoshow.=($valuetoshow?(' '.$langs->trans(\"or\").' '):'').$langs->trans(\"PasswordOfUserInLDAP\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (preg_match('/http/',$dolibarr_main_authentication))\n\t\t\t{\n\t\t\t\t$valuetoshow.=($valuetoshow?(' '.$langs->trans(\"or\").' '):'').$langs->trans(\"HTTPBasicPassword\");\n\t\t\t}\n\t\t\tif (preg_match('/dolibarr/',$dolibarr_main_authentication))\n\t\t\t{\n\t\t\t\tif ($object->pass) $valuetoshow.= preg_replace('/./i','*',$object->pass);\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif ($user->admin) $valuetoshow.= ($valuetoshow?(' '.$langs->trans(\"or\").' '):'').$langs->trans(\"Crypted\").': '.$object->pass_indatabase_crypted;\n\t\t\t\t\telse $valuetoshow.= ($valuetoshow?(' '.$langs->trans(\"or\").' '):'').$langs->trans(\"Hidden\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Other form for user password\n\t\t\t$parameters=array('valuetoshow' => $valuetoshow);\n\t\t\t$reshook=$hookmanager->executeHooks('printUserPasswordField',$parameters,$object,$action);    // Note that $action and $object may have been modified by hook\n\t\t\tif ($reshook > 0) $valuetoshow=$hookmanager->resPrint;\t// to replace\n\t\t\telse $valuetoshow.=$hookmanager->resPrint;\t\t\t\t// to add\n\n\t\t\tprint $valuetoshow;\n\t\t\tprint \"</td>\";\n\t\t\tprint '</tr>'.\"\\n\";\n\n\t\t\t// API key\n\t\t\tif (! empty($conf->api->enabled) && $user->admin) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"ApiKey\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif (! empty($object->api_key)) print preg_replace('/./','*',$object->api_key);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Administrator\n\t\t\tprint '<tr><td>'.$langs->trans(\"Administrator\").'</td><td>';\n\t\t\tif (! empty($conf->multicompany->enabled) && $object->admin && ! $object->entity)\n\t\t\t{\n\t\t\t\tprint $form->textwithpicto(yn($object->admin),$langs->trans(\"SuperAdministratorDesc\"),1,\"superadmin\");\n\t\t\t}\n\t\t\telse if ($object->admin)\n\t\t\t{\n\t\t\t\tprint $form->textwithpicto(yn($object->admin),$langs->trans(\"AdministratorDesc\"),1,\"admin\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint yn($object->admin);\n\t\t\t}\n\t\t\tprint '</td></tr>'.\"\\n\";\n\n\t\t\t// Type\n\t\t\tprint '<tr><td>';\n\t\t\t$text=$langs->trans(\"Type\");\n\t\t\tprint $form->textwithpicto($text, $langs->trans(\"InternalExternalDesc\"));\n\t\t\tprint '</td><td>';\n\t\t\t$type=$langs->trans(\"Internal\");\n\t\t\tif ($object->societe_id > 0) $type=$langs->trans(\"External\");\n\t\t\tprint $type;\n\t\t\tif ($object->ldap_sid) print ' ('.$langs->trans(\"DomainUser\").')';\n\t\t\tprint '</td></tr>'.\"\\n\";\n\n\t\t\t// Ldap sid\n\t\t\tif ($object->ldap_sid)\n\t\t\t{\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Type\").'</td><td>';\n\t\t\t\tprint $langs->trans(\"DomainUser\",$ldap->domainFQDN);\n\t\t\t\tprint '</td></tr>'.\"\\n\";\n\t\t\t}\n\n\t\t\t// Gender\n\t\t\tprint '<tr><td>'.$langs->trans(\"Gender\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($object->gender) print $langs->trans(\"Gender\".$object->gender);\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Employee\n\t\t\tprint '<tr><td>'.$langs->trans(\"Employee\").'</td><td colspan=\"2\">';\n\t\t\tprint yn($object->employee);\n\t\t\tprint '</td></tr>'.\"\\n\";\n\n\t\t\t// TODO Move this into tab RH, visible when salarie or RH is visible (HierarchicalResponsible must be on both tab)\n\n\t\t\t// Hierarchy\n\t\t\tprint '<tr><td>'.$langs->trans(\"HierarchicalResponsible\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif (empty($object->fk_user)) print $langs->trans(\"None\");\n\t\t\telse {\n\t\t\t\t$huser=new User($db);\n\t\t\t\t$huser->fetch($object->fk_user);\n\t\t\t\tprint $huser->getNomUrl(1);\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Position/Job\n\t\t\tprint '<tr><td>'.$langs->trans(\"PostOrFunction\").'</td>';\n\t\t\tprint '<td>'.$object->job.'</td>';\n\t\t\tprint '</tr>'.\"\\n\";\n\n\t\t\t//$childids = $user->getAllChildIds(1);\n\n\t\t\tif ((! empty($conf->salaries->enabled) && ! empty($user->rights->salaries->read))\n\t\t\t\t|| (! empty($conf->hrm->enabled) && ! empty($user->rights->hrm->employee->read)))\n\t\t\t{\n            \t// Even a superior can't see this info of its subordinates wihtout $user->rights->salaries->read and $user->rights->hrm->employee->read (setting/viewing is reserverd to HR people).\n            \t// However, he can see the valuation of timesheet of its subordinates even without these permissions.\n\t\t\t\t$langs->load(\"salaries\");\n\n\t\t\t\t// THM\n\t\t\t\tprint '<tr><td>';\n\t\t\t\t$text=$langs->trans(\"THM\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"THMDescription\"), 1, 'help', 'classthm');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint ($object->thm!=''?price($object->thm,'',$langs,1,-1,-1,$conf->currency):'');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\n\t\t\t\t// TJM\n\t\t\t\tprint '<tr><td>';\n\t\t\t\t$text=$langs->trans(\"TJM\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"TJMDescription\"), 1, 'help', 'classtjm');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint ($object->tjm!=''?price($object->tjm,'',$langs,1,-1,-1,$conf->currency):'');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\n\t\t\t\t// Salary\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Salary\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint ($object->salary!=''?price($object->salary,'',$langs,1,-1,-1,$conf->currency):'');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Weeklyhours\n\t\t\tprint '<tr><td>'.$langs->trans(\"WeeklyHours\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint price2num($object->weeklyhours);\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Date employment\n\t\t\tprint '<tr><td>'.$langs->trans(\"DateEmployment\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint dol_print_date($object->dateemployment, 'day');\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Date of birth\n\t\t\tprint '<tr><td>'.$langs->trans(\"DateToBirth\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint dol_print_date($object->birth, 'day');\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Accountancy code\n\t\t\tif ($conf->accounting->enabled)\n\t\t\t{\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"AccountancyCode\").'</td>';\n\t\t\t\tprint '<td>'.$object->accountancy_code.'</td></tr>';\n\t\t\t}\n\n\t\t\tprint '</table>';\n\n\t\t\tprint '</div>';\n\t\t\tprint '<div class=\"fichehalfright\"><div class=\"ficheaddleft\">';\n\n\t\t\tprint '<div class=\"underbanner clearboth\"></div>';\n\t\t\tprint '<table class=\"border tableforfield\" width=\"100%\">';\n\n\t\t\t// Color user\n\t\t\tif (! empty($conf->agenda->enabled))\n\t\t\t{\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"ColorUser\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint $formother->showColor($object->color, '');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Categories\n\t\t\tif (! empty($conf->categorie->enabled)  && ! empty($user->rights->categorie->lire))\n\t\t\t{\n\t\t\t\tprint '<tr><td>' . $langs->trans( \"Categories\" ) . '</td>';\n\t\t\t\tprint '<td colspan=\"3\">';\n\t\t\t\tprint $form->showCategories( $object->id, 'user', 1 );\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\tif (isset($conf->file->main_authentication) && preg_match('/openid/',$conf->file->main_authentication) && ! empty($conf->global->MAIN_OPENIDURL_PERUSER))\n\t\t\t{\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"OpenIDURL\").'</td>';\n\t\t\t\tprint '<td>'.$object->openid.'</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"LastConnexion\").'</td>';\n\t\t\tprint '<td>'.dol_print_date($object->datelastlogin,\"dayhour\").'</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\tprint '<tr><td>'.$langs->trans(\"PreviousConnexion\").'</td>';\n\t\t\tprint '<td>'.dol_print_date($object->datepreviouslogin,\"dayhour\").'</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t    // Multicompany\n\t\t\tif (! empty($conf->multicompany->enabled) && is_object($mc))\n\t\t\t{\n\t\t\t\t// This is now done with hook formObjectOptions. Keep this code for backward compatibility with old multicompany module\n\t\t\t\tif (! method_exists($mc, 'formObjectOptions'))\n\t\t\t\t{\n\t\t\t\t     if (! empty($conf->multicompany->enabled) && empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE) && $conf->entity == 1 && $user->admin && ! $user->entity)\n\t\t\t\t     {\n\t\t\t\t     \tprint '<tr><td>' . $langs->trans(\"Entity\") . '</td><td>';\n\t\t\t\t     \tif (empty($object->entity)) {\n\t\t\t\t     \t\tprint $langs->trans(\"AllEntities\");\n\t\t\t\t     \t} else {\n\t\t\t\t     \t\t$mc->getInfo($object->entity);\n\t\t\t\t     \t\tprint $mc->label;\n\t\t\t\t     \t}\n\t\t\t\t     \tprint \"</td></tr>\\n\";\n\t\t\t\t     }\n\t\t\t     }\n\t\t\t}\n\n\t\t\t// Other attributes\n\t\t\tinclude DOL_DOCUMENT_ROOT . '/core/tpl/extrafields_view.tpl.php';\n\n\t\t\t// Company / Contact\n\t\t\tif (! empty($conf->societe->enabled))\n\t\t\t{\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"LinkToCompanyContact\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif (isset($object->socid) && $object->socid > 0)\n\t\t\t\t{\n\t\t\t\t\t$societe = new Societe($db);\n\t\t\t\t\t$societe->fetch($object->socid);\n\t\t\t\t\tprint $societe->getNomUrl(1,'');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprint $langs->trans(\"ThisUserIsNot\");\n\t\t\t\t}\n\t\t\t\tif (! empty($object->contactid))\n\t\t\t\t{\n\t\t\t\t\t$contact = new Contact($db);\n\t\t\t\t\t$contact->fetch($object->contactid);\n\t\t\t\t\tif ($object->socid > 0) print ' / ';\n\t\t\t\t\telse print '<br>';\n\t\t\t\t\tprint '<a href=\"'.DOL_URL_ROOT.'/contact/card.php?id='.$object->contactid.'\">'.img_object($langs->trans(\"ShowContact\"),'contact').' '.dol_trunc($contact->getFullName($langs),32).'</a>';\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '</tr>'.\"\\n\";\n\t\t\t}\n\n\t\t\t// Module Adherent\n\t\t\tif (! empty($conf->adherent->enabled))\n\t\t\t{\n\t\t\t\t$langs->load(\"members\");\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"LinkedToDolibarrMember\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($object->fk_member)\n\t\t\t\t{\n\t\t\t\t\t$adh=new Adherent($db);\n\t\t\t\t\t$adh->fetch($object->fk_member);\n\t\t\t\t\t$adh->ref=$adh->getFullname($langs);\t// Force to show login instead of id\n\t\t\t\t\tprint $adh->getNomUrl(1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprint $langs->trans(\"UserNotLinkedToMember\");\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '</tr>'.\"\\n\";\n\t\t\t}\n\n\t\t\t// Signature\n\t\t\tprint '<tr><td class=\"tdtop\">'.$langs->trans('Signature').'</td><td>';\n\t\t\tprint dol_htmlentitiesbr($object->signature);\n\t\t\tprint \"</td></tr>\\n\";\n\n\t\t\tprint \"</table>\\n\";\n\t\t\tprint '</div>';\n\n\t\t\tprint '</div></div>';\n\t\t\tprint '<div style=\"clear:both\"></div>';\n\n\n\t\t\tdol_fiche_end();\n\n\n\t\t\t/*\n             * Buttons actions\n             */\n\n\t\t\tprint '<div class=\"tabsAction\">';\n\n\t\t\t$parameters=array();\n\t\t\t$reshook=$hookmanager->executeHooks('addMoreActionsButtons',$parameters,$object,$action);    // Note that $action and $object may have been modified by hook\n\t\t\tif (empty($reshook))\n\t\t\t{\n\t\t\t\tif (! empty($object->email))\n\t\t\t\t{\n\t\t\t\t\t$langs->load(\"mails\");\n\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=presend&amp;mode=init#presend\">'.$langs->trans('SendMail').'</a></div>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$langs->load(\"mails\");\n\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"NoEMail\")).'\">'.$langs->trans('SendMail').'</a></div>';\n\t\t\t\t}\n\n\t\t\t\tif ($caneditfield && (empty($conf->multicompany->enabled) || ! $user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1)))\n\t\t\t\t{\n\t\t\t\t\tif (! empty($conf->global->MAIN_ONLY_LOGIN_ALLOWED))\n\t\t\t\t\t{\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"DisabledInMonoUserMode\")).'\">'.$langs->trans(\"Modify\").'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=edit\">'.$langs->trans(\"Modify\").'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telseif ($caneditpassword && ! $object->ldap_sid &&\n\t\t\t\t(empty($conf->multicompany->enabled) || ! $user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1)))\n\t\t\t\t{\n\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=edit\">'.$langs->trans(\"EditPassword\").'</a></div>';\n\t\t\t\t}\n\n\t\t\t\t// Si on a un gestionnaire de generation de mot de passe actif\n\t\t\t\tif ($conf->global->USER_PASSWORD_GENERATED != 'none')\n\t\t\t\t{\n\t\t\t\t\tif ($object->statut == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"UserDisabled\")).'\">'.$langs->trans(\"ReinitPassword\").'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t\telseif (($user->id != $id && $caneditpassword) && $object->login && !$object->ldap_sid &&\n\t\t\t\t\t((empty($conf->multicompany->enabled) && $object->entity == $user->entity) || ! $user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1)))\n\t\t\t\t\t{\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=password\">'.$langs->trans(\"ReinitPassword\").'</a></div>';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($object->statut == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"UserDisabled\")).'\">'.$langs->trans(\"SendNewPassword\").'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t\telse if (($user->id != $id && $caneditpassword) && $object->login && !$object->ldap_sid &&\n\t\t\t\t\t((empty($conf->multicompany->enabled) && $object->entity == $user->entity) || ! $user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1)))\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($object->email) print '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=passwordsend\">'.$langs->trans(\"SendNewPassword\").'</a></div>';\n\t\t\t\t\t\telse print '<div class=\"inline-block divButAction\"><a class=\"butActionRefused\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"NoEMail\")).'\">'.$langs->trans(\"SendNewPassword\").'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Activer\n\t\t\t\tif ($user->id <> $id && $candisableuser && $object->statut == 0 &&\n\t\t\t\t((empty($conf->multicompany->enabled) && $object->entity == $user->entity) || ! $user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1)))\n\t\t\t\t{\n\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=enable\">'.$langs->trans(\"Reactivate\").'</a></div>';\n\t\t\t\t}\n\t\t\t\t// Desactiver\n\t\t\t\tif ($user->id <> $id && $candisableuser && $object->statut == 1 &&\n\t\t\t\t((empty($conf->multicompany->enabled) && $object->entity == $user->entity) || ! $user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1)))\n\t\t\t\t{\n\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionDelete\" href=\"'.$_SERVER['PHP_SELF'].'?action=disable&amp;id='.$object->id.'\">'.$langs->trans(\"DisableUser\").'</a></div>';\n\t\t\t\t}\n\t\t\t\t// Delete\n\t\t\t\tif ($user->id <> $id && $candisableuser &&\n\t\t\t\t((empty($conf->multicompany->enabled) && $object->entity == $user->entity) || ! $user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1)))\n\t\t\t\t{\n\t\t\t\t\tif ($user->admin || ! $object->admin) // If user edited is admin, delete is possible on for an admin\n\t\t\t\t\t{\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionDelete\" href=\"'.$_SERVER['PHP_SELF'].'?action=delete&amp;id='.$object->id.'\">'.$langs->trans(\"DeleteUser\").'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"MustBeAdminToDeleteOtherAdmin\")).'\">'.$langs->trans(\"DeleteUser\").'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprint \"</div>\\n\";\n\n\n\n\t\t\t//Select mail models is same action as presend\n\t\t\tif (GETPOST('modelselected')) $action = 'presend';\n\n\t\t\t// Presend form\n\t\t\t$modelmail='user';\n\t\t\t$defaulttopic='Information';\n\t\t\t$diroutput = $conf->user->dir_output;\n\t\t\t$trackid = 'use'.$object->id;\n\n\t\t\tinclude DOL_DOCUMENT_ROOT.'/core/tpl/card_presend.tpl.php';\n\n\t\t\tif ($action != 'presend' && $action != 'send')\n\t\t\t{\n\t\t\t\t/*\n                 * List of groups of user\n                 */\n\n\t\t\t\tif ($canreadgroup)\n\t\t\t\t{\n\t\t\t\t\tprint load_fiche_titre($langs->trans(\"ListOfGroupsForUser\"),'','');\n\n\t\t\t\t\t// On selectionne les groupes auquel fait parti le user\n\t\t\t\t\t$exclude = array();\n\n\t\t\t\t\t$usergroup=new UserGroup($db);\n\t\t\t\t\t$groupslist = $usergroup->listGroupsForUser($object->id);\n\n\t\t\t\t\tif (! empty($groupslist))\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach($groupslist as $groupforuser)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$exclude[]=$groupforuser->id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($caneditgroup)\n\t\t\t\t\t{\n\t\t\t\t\t\tprint '<form action=\"'.$_SERVER['PHP_SELF'].'?id='.$id.'\" method=\"POST\">'.\"\\n\";\n\t\t\t\t\t\tprint '<input type=\"hidden\" name=\"token\" value=\"'.$_SESSION['newtoken'].'\" />';\n\t\t\t\t\t\tprint '<input type=\"hidden\" name=\"action\" value=\"addgroup\" />';\n\t\t\t\t\t}\n\n\t\t\t\t\tprint '<table class=\"noborder\" width=\"100%\">'.\"\\n\";\n\n\t\t\t\t\t// Other form for add user to group\n\t\t\t\t\t$parameters=array('caneditgroup' => $caneditgroup, 'groupslist' => $groupslist, 'exclude' => $exclude);\n\t\t\t\t\t$reshook=$hookmanager->executeHooks('formAddUserToGroup',$parameters,$object,$action);    // Note that $action and $object may have been modified by hook\n\t\t\t\t\tprint $hookmanager->resPrint;\n\n\t\t\t\t\tif (empty($reshook))\n\t\t\t\t\t{\n\t\t\t\t\t\tprint '<tr class=\"liste_titre\"><th class=\"liste_titre\">'.$langs->trans(\"Groups\").'</th>'.\"\\n\";\n\t\t\t\t\t\tprint '<th class=\"liste_titre\" align=\"right\">';\n\t\t\t\t\t\tif ($caneditgroup)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprint $form->select_dolgroups('', 'group', 1, $exclude, 0, '', '', $object->entity);\n\t\t\t\t\t\t\tprint ' &nbsp; ';\n\t\t\t\t\t\t\tprint '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\" />';\n\t\t\t\t\t\t\tprint '<input type=\"submit\" class=\"button\" value=\"'.$langs->trans(\"Add\").'\" />';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint '</th></tr>'.\"\\n\";\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Groups assigned to user\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif (! empty($groupslist))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach($groupslist as $group)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tprint '<tr class=\"oddeven\">';\n\t\t\t\t\t\t\t\tprint '<td>';\n\t\t\t\t\t\t\t\tif ($caneditgroup)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tprint '<a href=\"'.DOL_URL_ROOT.'/user/group/card.php?id='.$group->id.'\">'.img_object($langs->trans(\"ShowGroup\"),\"group\").' '.$group->name.'</a>';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tprint img_object($langs->trans(\"ShowGroup\"),\"group\").' '.$group->name;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tprint '</td>';\n\t\t\t\t\t\t\t\tprint '<td align=\"right\">';\n\t\t\t\t\t\t\t\tif ($caneditgroup)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tprint '<a href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=removegroup&amp;group='.$group->id.'\">';\n\t\t\t\t\t\t\t\t\tprint img_picto($langs->trans(\"RemoveFromGroup\"), 'unlink');\n\t\t\t\t\t\t\t\t\tprint '</a>';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tprint \"&nbsp;\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tprint \"</td></tr>\\n\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprint '<tr class=\"oddeven\"><td colspan=\"3\" class=\"opacitymedium\">'.$langs->trans(\"None\").'</td></tr>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tprint \"</table>\";\n\n\t\t\t\t\tif ($caneditgroup)\n\t\t\t\t\t{\n\t\t\t\t\t\tprint '</form>';\n\t\t\t\t\t}\n\t\t\t\t\tprint \"<br>\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/*\n         * Fiche en mode edition\n         */\n\t\tif ($action == 'edit' && ($canedituser || $caneditfield || $caneditpassword || ($user->id == $object->id)))\n\t\t{\n\t\t\tprint '<form action=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'\" method=\"POST\" name=\"updateuser\" enctype=\"multipart/form-data\">';\n\t\t\tprint '<input type=\"hidden\" name=\"token\" value=\"'.$_SESSION['newtoken'].'\">';\n\t\t\tprint '<input type=\"hidden\" name=\"action\" value=\"update\">';\n\t\t\tprint '<input type=\"hidden\" name=\"entity\" value=\"'.$object->entity.'\">';\n\n\t\t\tdol_fiche_head($head, 'user', $title, 0, 'user');\n\n\t\t\tprint '<table width=\"100%\" class=\"border\">';\n\n\t\t\t// Ref/ID\n\t\t\tif (! empty($conf->global->MAIN_SHOW_TECHNICAL_ID))\n\t\t\t{\n\t\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"Ref\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint $object->id;\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '</tr>';\n\t\t\t}\n\n\t\t\t// Lastname\n\t\t\tprint \"<tr>\";\n\t\t\tprint '<td class=\"titlefield fieldrequired\">'.$langs->trans(\"Lastname\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield && !$object->ldap_sid)\n\t\t\t{\n\t\t\t\tprint '<input class=\"minwidth100\" type=\"text\" class=\"flat\" name=\"lastname\" value=\"'.$object->lastname.'\">';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<input type=\"hidden\" name=\"lastname\" value=\"'.$object->lastname.'\">';\n\t\t\t\tprint $object->lastname;\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint '</tr>';\n\n\t\t\t// Firstname\n\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"Firstname\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield && !$object->ldap_sid)\n\t\t\t{\n\t\t\t\tprint '<input class=\"minwidth100\" type=\"text\" class=\"flat\" name=\"firstname\" value=\"'.$object->firstname.'\">';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<input type=\"hidden\" name=\"firstname\" value=\"'.$object->firstname.'\">';\n\t\t\t\tprint $object->firstname;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Login\n\t\t\tprint \"<tr>\".'<td><span class=\"fieldrequired\">'.$langs->trans(\"Login\").'</span></td>';\n\t\t\tprint '<td>';\n\t\t\tif ($user->admin  && !$object->ldap_sid)\n\t\t\t{\n\t\t\t\tprint '<input size=\"12\" maxlength=\"24\" type=\"text\" class=\"flat\" name=\"login\" value=\"'.$object->login.'\">';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<input type=\"hidden\" name=\"login\" value=\"'.$object->login.'\">';\n\t\t\t\tprint $object->login;\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint '</tr>';\n\n\t\t\t// Pass\n\t\t\tprint '<tr><td>'.$langs->trans(\"Password\").'</td>';\n\t\t\tprint '<td>';\n\t\t\t$valuetoshow='';\n\t\t\tif (preg_match('/ldap/',$dolibarr_main_authentication))\n\t\t\t{\n\t\t\t\t$valuetoshow.=($valuetoshow?(' '.$langs->trans(\"or\").' '):'').$langs->trans(\"PasswordOfUserInLDAP\");\n\t\t\t}\n\t\t\tif (preg_match('/http/',$dolibarr_main_authentication))\n\t\t\t{\n\t\t\t\t$valuetoshow.=($valuetoshow?(' '.$langs->trans(\"or\").' '):'').$form->textwithpicto($text,$langs->trans(\"DolibarrInHttpAuthenticationSoPasswordUseless\",$dolibarr_main_authentication),1,'warning');\n\t\t\t}\n\t\t\tif (preg_match('/dolibarr/',$dolibarr_main_authentication))\n\t\t\t{\n\t\t\t\tif ($caneditpassword)\n\t\t\t\t{\n\t\t\t\t\t$valuetoshow.=($valuetoshow?(' '.$langs->trans(\"or\").' '):'').'<input size=\"12\" maxlength=\"32\" type=\"password\" class=\"flat\" name=\"password\" value=\"'.$object->pass.'\" autocomplete=\"new-password\">';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$valuetoshow.=($valuetoshow?(' '.$langs->trans(\"or\").' '):'').preg_replace('/./i','*',$object->pass);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Other form for user password\n\t\t\t$parameters=array('valuetoshow' => $valuetoshow, 'caneditpassword' => $caneditpassword);\n\t\t\t$reshook=$hookmanager->executeHooks('printUserPasswordField',$parameters,$object,$action);    // Note that $action and $object may have been modified by hook\n\t\t\tif ($reshook > 0) $valuetoshow=$hookmanager->resPrint;\t// to replace\n\t\t\telse $valuetoshow.=$hookmanager->resPrint;\t\t\t\t// to add\n\n\t\t\tprint $valuetoshow;\n\t\t\tprint \"</td></tr>\\n\";\n\n\t\t\t// API key\n\t\t\tif(! empty($conf->api->enabled) && $user->admin)\n\t\t\t{\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"ApiKey\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint '<input class=\"minwidth300\" maxsize=\"32\" type=\"text\" id=\"api_key\" name=\"api_key\" value=\"'.$object->api_key.'\" autocomplete=\"off\">';\n\t\t\t\tif (! empty($conf->use_javascript_ajax))\n\t\t\t\t\tprint '&nbsp;'.img_picto($langs->trans('Generate'), 'refresh', 'id=\"generate_api_key\" class=\"linkobject\"');\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Administrator\n\t\t\tprint '<tr><td>'.$langs->trans(\"Administrator\").'</td>';\n\t\t\tif ($object->socid > 0)\n\t\t\t{\n\t\t\t\t$langs->load(\"admin\");\n\t\t\t\tprint '<td>';\n\t\t\t\tprint '<input type=\"hidden\" name=\"admin\" value=\"'.$object->admin.'\">'.yn($object->admin);\n\t\t\t\tprint ' ('.$langs->trans(\"ExternalUser\").')';\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<td>';\n\t\t\t\t$nbAdmin = $user->getNbOfUsers('active','',1);\n\t\t\t\t$nbSuperAdmin = $user->getNbOfUsers('active','superadmin',1);\n\t\t\t\t//var_dump($nbAdmin);\n\t\t\t\t//var_dump($nbSuperAdmin);\n\t\t\t\tif ($user->admin\t\t\t\t\t\t\t\t// Need to be admin to allow downgrade of an admin\n\t\t\t\t&& ($user->id != $object->id)                   // Don't downgrade ourself\n\t\t\t\t&& (\n\t\t\t\t\t(empty($conf->multicompany->enabled) && $nbAdmin >= 1)\n\t\t\t\t\t|| (! empty($conf->multicompany->enabled) && ($object->entity > 0 || $nbSuperAdmin > 1))    // Don't downgrade a superadmin if alone\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tprint $form->selectyesno('admin',$object->admin,1);\n\n\t\t\t\t\tif (! empty($conf->multicompany->enabled) && ! $user->entity && empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE))\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($conf->use_javascript_ajax)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprint '<script type=\"text/javascript\">\n\t\t\t\t\t\t\t\t\t$(function() {\n\t\t\t\t\t\t\t\t\t\tvar admin = $(\"select[name=admin]\").val();\n\t\t\t\t\t\t\t\t\t\tif (admin == 0) {\n\t\t\t\t\t\t\t\t\t\t\t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", true)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"checked\", false);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif ($(\"input[name=superadmin]\").is(\":checked\")) {\n\t\t\t\t\t\t\t\t\t\t\t$(\"select[name=entity]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", true);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$(\"select[name=admin]\").change(function() {\n\t\t\t\t\t\t\t\t\t\t\t if ( $(this).val() == 0 ) {\n\t\t\t\t\t\t\t\t\t\t\t \t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", true)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"checked\", false);\n\t\t\t\t\t\t\t\t\t\t\t \t$(\"select[name=entity]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", false);\n\t\t\t\t\t\t\t\t\t\t\t } else {\n\t\t\t\t\t\t\t\t\t\t\t \t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", false);\n\t\t\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t$(\"input[name=superadmin]\").change(function() {\n\t\t\t\t\t\t\t\t\t\t\tif ( $(this).is(\":checked\")) {\n\t\t\t\t\t\t\t\t\t\t\t\t$(\"select[name=entity]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", true);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t$(\"select[name=entity]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", false);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t</script>';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$checked=(($object->admin && ! $object->entity) ? ' checked' : '');\n\t\t\t\t\t\tprint '<input type=\"checkbox\" name=\"superadmin\" value=\"1\"'.$checked.' /> '.$langs->trans(\"SuperAdministrator\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$yn = yn($object->admin);\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"admin\" value=\"'.$object->admin.'\">';\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"superadmin\" value=\"'.(empty($object->entity) ? 1 : 0).'\">';\n\t\t\t\t\tif (! empty($conf->multicompany->enabled) && empty($object->entity)) print $form->textwithpicto($yn,$langs->trans(\"DontDowngradeSuperAdmin\"),1,'warning');\n\t\t\t\t\telse print $yn;\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t   \t// Type\n\t\t   \tprint '<tr><td>'.$langs->trans(\"Type\").'</td>';\n\t\t   \tprint '<td>';\n\t\t   \tif ($user->id == $object->id || ! $user->admin)\n\t\t   \t{\n\t\t\t   \t$type=$langs->trans(\"Internal\");\n\t\t\t   \tif ($object->socid) $type=$langs->trans(\"External\");\n\t\t\t   \tprint $form->textwithpicto($type,$langs->trans(\"InternalExternalDesc\"));\n\t\t\t   \tif ($object->ldap_sid) print ' ('.$langs->trans(\"DomainUser\").')';\n\t\t   \t}\n\t\t   \telse\n\t\t\t{\n\t\t\t\t$type=0;\n\t\t\t\tif ($object->contactid) $type=$object->contactid;\n\t\t\t\tprint $form->selectcontacts(0,$type,'contactid',2,'','',1,'',false,1);\n\t\t\t   \tif ($object->ldap_sid) print ' ('.$langs->trans(\"DomainUser\").')';\n\t\t\t}\n\t\t   \tprint '</td></tr>';\n\n\t\t   \t// Gender\n\t\t   \tprint '<tr><td>'.$langs->trans(\"Gender\").'</td>';\n\t\t   \tprint '<td>';\n\t\t   \t$arraygender=array('man'=>$langs->trans(\"Genderman\"),'woman'=>$langs->trans(\"Genderwoman\"));\n\t\t   \tprint $form->selectarray('gender', $arraygender, GETPOST('gender')?GETPOST('gender'):$object->gender, 1);\n\t\t   \tprint '</td></tr>';\n\n\t\t   \t// Employee\n\t\t   \tprint '<tr>';\n\t\t   \tprint '<td>'.fieldLabel('Employee','employee',0).'</td><td>';\n\t\t   \tprint $form->selectyesno(\"employee\",$object->employee,1);\n\t\t   \tprint '</td></tr>';\n\n\t\t   \t// Hierarchy\n\t\t   \tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"HierarchicalResponsible\").'</td>';\n\t\t   \tprint '<td>';\n\t\t   \tif ($caneditfield)\n\t\t   \t{\n\t\t   \t\tprint $form->select_dolusers($object->fk_user, 'fk_user', 1, array($object->id), 0, '', 0, $object->entity, 0, 0, '', 0, '', 'maxwidth300');\n\t\t   \t}\n\t\t   \telse\n\t\t   \t{\n\t\t   \t\tprint '<input type=\"hidden\" name=\"fk_user\" value=\"'.$object->fk_user.'\">';\n\t\t   \t\t$huser=new User($db);\n\t\t   \t\t$huser->fetch($object->fk_user);\n\t\t   \t\tprint $huser->getNomUrl(1);\n\t\t   \t}\n\t\t   \tprint '</td>';\n\t\t   \tprint \"</tr>\\n\";\n\n\n\t\t   \tprint '</table><hr><table class=\"border centpercent\">';\n\n\n\t\t\t// Address\n\t\t\tprint '<tr><td class=\"tdtop titlefield\">'.fieldLabel('Address','address').'</td>';\n\t\t\tprint '<td><textarea name=\"address\" id=\"address\" class=\"quatrevingtpercent\" rows=\"3\" wrap=\"soft\">';\n\t\t\tprint $object->address;\n\t\t\tprint '</textarea></td></tr>';\n\n\t\t\t// Zip\n\t\t\tprint '<tr><td>'.fieldLabel('Zip','zipcode').'</td><td>';\n\t\t\tprint $formcompany->select_ziptown($object->zip, 'zipcode', array('town', 'selectcountry_id', 'state_id'), 6);\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Town\n\t\t\tprint '<tr><td>'.fieldLabel('Town','town').'</td><td>';\n\t\t\tprint $formcompany->select_ziptown($object->town, 'town', array('zipcode', 'selectcountry_id', 'state_id'));\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Country\n\t\t\tprint '<tr><td>'.fieldLabel('Country','selectcounty_id').'</td><td>';\n\t\t\tprint $form->select_country((GETPOST('country_id')!=''?GETPOST('country_id'):$object->country_id),'country_id');\n\t\t\tif ($user->admin) print info_admin($langs->trans(\"YouCanChangeValuesForThisListFromDictionarySetup\"),1);\n\t\t\tprint '</td></tr>';\n\n\t\t\t// State\n\t\t\tif (empty($conf->global->USER_DISABLE_STATE))\n\t\t\t{\n\t\t\t\tprint '<tr><td class=\"tdoverflow\">'.fieldLabel('State','state_id').'</td><td>';\n\t\t\t\tprint $formcompany->select_state($object->state_id,$object->country_code, 'state_id');\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Tel pro\n\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"PhonePro\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield  && empty($object->ldap_sid))\n\t\t\t{\n\t\t\t\tprint '<input size=\"20\" type=\"text\" name=\"office_phone\" class=\"flat\" value=\"'.$object->office_phone.'\">';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<input type=\"hidden\" name=\"office_phone\" value=\"'.$object->office_phone.'\">';\n\t\t\t\tprint $object->office_phone;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Tel mobile\n\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"PhoneMobile\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield && empty($object->ldap_sid))\n\t\t\t{\n\t\t\t\tprint '<input size=\"20\" type=\"text\" name=\"user_mobile\" class=\"flat\" value=\"'.$object->user_mobile.'\">';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<input type=\"hidden\" name=\"user_mobile\" value=\"'.$object->user_mobile.'\">';\n\t\t\t\tprint $object->user_mobile;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Fax\n\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"Fax\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield  && empty($object->ldap_sid))\n\t\t\t{\n\t\t\t\tprint '<input size=\"20\" type=\"text\" name=\"office_fax\" class=\"flat\" value=\"'.$object->office_fax.'\">';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<input type=\"hidden\" name=\"office_fax\" value=\"'.$object->office_fax.'\">';\n\t\t\t\tprint $object->office_fax;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Skype\n\t\t\tif (! empty($conf->skype->enabled))\n\t\t\t{\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Skype\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($caneditfield  && empty($object->ldap_sid))\n\t\t\t\t{\n\t\t\t\t\tprint '<input size=\"40\" type=\"text\" name=\"skype\" class=\"flat\" value=\"'.$object->skype.'\">';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"skype\" value=\"'.$object->skype.'\">';\n\t\t\t\t\tprint $object->skype;\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// EMail\n\t\t\tprint \"<tr>\".'<td'.(! empty($conf->global->USER_MAIL_REQUIRED)?' class=\"fieldrequired\"':'').'>'.$langs->trans(\"EMail\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield  && empty($object->ldap_sid))\n\t\t\t{\n\t\t\t\tprint '<input class=\"minwidth100\" type=\"text\" name=\"email\" class=\"flat\" value=\"'.$object->email.'\">';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<input type=\"hidden\" name=\"email\" value=\"'.$object->email.'\">';\n\t\t\t\tprint $object->email;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// OpenID url\n\t\t\tif (isset($conf->file->main_authentication) && preg_match('/openid/',$conf->file->main_authentication) && ! empty($conf->global->MAIN_OPENIDURL_PERUSER))\n\t\t\t{\n\t\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"OpenIDURL\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($caneditfield)\n\t\t\t\t{\n\t\t\t\t\tprint '<input class=\"minwidth100\" type=\"url\" name=\"openid\" class=\"flat\" value=\"'.$object->openid.'\">';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"openid\" value=\"'.$object->openid.'\">';\n\t\t\t\t\tprint $object->openid;\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\tprint '</table><hr><table class=\"border centpercent\">';\n\n\t\t\t// Accountancy code\n\t\t\tif ($conf->accounting->enabled)\n\t\t\t{\n\t\t\t\tprint \"<tr>\";\n\t\t\t\tprint '<td>'.$langs->trans(\"AccountancyCode\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($caneditfield)\n\t\t\t\t{\n\t\t\t\t\tprint '<input size=\"30\" type=\"text\" class=\"flat\" name=\"accountancy_code\" value=\"'.$object->accountancy_code.'\">';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"accountancy_code\" value=\"'.$object->accountancy_code.'\">';\n\t\t\t\t\tprint $object->accountancy_code;\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\";\n\t\t\t}\n\n\t\t\t// User color\n\t\t\tif (! empty($conf->agenda->enabled))\n\t\t\t{\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"ColorUser\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint $formother->selectColor(GETPOST('color')?GETPOST('color'):$object->color, 'color', null, 1, '', 'hideifnotset');\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Photo\n\t\t\tprint '<tr>';\n\t\t\tprint '<td>'.$langs->trans(\"Photo\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint $form->showphoto('userphoto',$object,60,0,$caneditfield,'photowithmargin','small');\n\t\t\tprint '</td>';\n\t\t\tprint '</tr>';\n\n\t\t\t// Categories\n\t\t\tif (!empty( $conf->categorie->enabled ) && !empty( $user->rights->categorie->lire ))\n\t\t\t{\n\t\t\t\tprint '<tr><td>' . fieldLabel( 'Categories', 'usercats' ) . '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\t$cate_arbo = $form->select_all_categories( Categorie::TYPE_USER, null, null, null, null, 1 );\n\t\t\t\t$c = new Categorie( $db );\n\t\t\t\t$cats = $c->containing($object->id, Categorie::TYPE_USER);\n\t\t\t\tforeach ($cats as $cat) {\n\t\t\t\t\t$arrayselected[] = $cat->id;\n\t\t\t\t}\n\t\t\t\tprint $form->multiselectarray( 'usercats', $cate_arbo, $arrayselected, '', 0, '', 0, '90%' );\n\t\t\t\tprint \"</td></tr>\";\n\t\t\t}\n\n\t\t\t// Status\n\t\t\tprint '<tr><td>'.$langs->trans(\"Status\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint $object->getLibStatut(4);\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Company / Contact\n\t\t\tif (! empty($conf->societe->enabled))\n\t\t\t{\n\t\t\t\tprint '<tr><td width=\"25%\">'.$langs->trans(\"LinkToCompanyContact\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($object->socid > 0)\n\t\t\t\t{\n\t\t\t\t\t$societe = new Societe($db);\n\t\t\t\t\t$societe->fetch($object->socid);\n\t\t\t\t\tprint $societe->getNomUrl(1,'');\n\t\t\t\t\tif ($object->contactid)\n\t\t\t\t\t{\n\t\t\t\t\t\t$contact = new Contact($db);\n\t\t\t\t\t\t$contact->fetch($object->contactid);\n\t\t\t\t\t\tprint ' / <a href=\"'.DOL_URL_ROOT.'/contact/card.php?id='.$object->contactid.'\">'.img_object($langs->trans(\"ShowContact\"),'contact').' '.dol_trunc($contact->getFullName($langs),32).'</a>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprint $langs->trans(\"ThisUserIsNot\");\n\t\t\t\t}\n\t\t\t\tprint ' ('.$langs->trans(\"UseTypeFieldToChange\").')';\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Module Adherent\n\t\t\tif (! empty($conf->adherent->enabled))\n\t\t\t{\n\t\t\t\t$langs->load(\"members\");\n\t\t\t\tprint '<tr><td width=\"25%\">'.$langs->trans(\"LinkedToDolibarrMember\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($object->fk_member)\n\t\t\t\t{\n\t\t\t\t\t$adh=new Adherent($db);\n\t\t\t\t\t$adh->fetch($object->fk_member);\n\t\t\t\t\t$adh->ref=$adh->login;\t// Force to show login instead of id\n\t\t\t\t\tprint $adh->getNomUrl(1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprint $langs->trans(\"UserNotLinkedToMember\");\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n            // Multicompany\n            // TODO check if user not linked with the current entity before change entity (thirdparty, invoice, etc.) !!\n            if (! empty($conf->multicompany->enabled) && is_object($mc))\n            {\n            \t// This is now done with hook formObjectOptions. Keep this code for backward compatibility with old multicompany module\n            \tif (! method_exists($mc, 'formObjectOptions'))\n            \t{\n            \t\tif (empty($conf->multicompany->transverse_mode) && $conf->entity == 1 && $user->admin && ! $user->entity)\n\t            \t{\n\t            \t\tprint \"<tr>\".'<td>'.$langs->trans(\"Entity\").'</td>';\n\t            \t\tprint \"<td>\".$mc->select_entities($object->entity, 'entity', '', 0, 1);\t\t// last parameter 1 means, show also a choice 0=>'all entities'\n\t            \t\tprint \"</td></tr>\\n\";\n\t            \t}\n\t            \telse\n\t            \t{\n\t            \t\tprint '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\" />';\n\t            \t}\n\t            }\n\t\t\t}\n\n\t\t\t// Other attributes\n\t\t\t$parameters=array('colspan' => ' colspan=\"2\"');\n\t\t\t$reshook=$hookmanager->executeHooks('formObjectOptions',$parameters,$object,$action);    // Note that $action and $object may have been modified by hook\n\t\t\tprint $hookmanager->resPrint;\n\t\t\tif (empty($reshook))\n\t\t\t{\n\t\t\t\tprint $object->showOptionals($extrafields,'edit');\n\t\t\t}\n\n\t\t\t// Signature\n\t\t\tprint \"<tr>\".'<td class=\"tdtop\">'.$langs->trans(\"Signature\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield)\n\t\t\t{\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/doleditor.class.php';\n\t\t\t\t$doleditor=new DolEditor('signature',$object->signature,'',138,'dolibarr_notes','In',false,true,empty($conf->global->FCKEDITOR_ENABLE_USERSIGN)?0:1,ROWS_4,'90%');\n\t\t\t\tprint $doleditor->Create(1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint dol_htmlentitiesbr($object->signature);\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\n\t\t\tprint '</table><hr><table class=\"border centpercent\">';\n\n\n\t\t\t// TODO Move this into tab RH (HierarchicalResponsible must be on both tab)\n\n\t\t\t// Position/Job\n\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"PostOrFunction\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield)\n\t\t\t{\n\t\t\t\tprint '<input size=\"30\" type=\"text\" name=\"job\" value=\"'.$object->job.'\">';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<input type=\"hidden\" name=\"job\" value=\"'.$object->job.'\">';\n\t\t\t\tprint $object->job;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\tif ((! empty($conf->salaries->enabled) && ! empty($user->rights->salaries->read))\n\t\t\t\t|| (! empty($conf->hrm->enabled) && ! empty($user->rights->hrm->employee->read)))\n\t\t\t{\n\t\t\t\t$langs->load(\"salaries\");\n\n\t\t\t\t// THM\n\t\t\t\tprint '<tr><td>';\n\t\t\t\t$text=$langs->trans(\"THM\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"THMDescription\"), 1, 'help', 'classthm');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint '<input size=\"8\" type=\"text\" name=\"thm\" value=\"'.price2num(GETPOST('thm')?GETPOST('thm'):$object->thm).'\">';\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\n\t\t\t\t// TJM\n\t\t\t\tprint '<tr><td>';\n\t\t\t\t$text=$langs->trans(\"TJM\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"TJMDescription\"), 1, 'help', 'classthm');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint '<input size=\"8\" type=\"text\" name=\"tjm\" value=\"'.price2num(GETPOST('tjm')?GETPOST('tjm'):$object->tjm).'\">';\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\n\t\t\t\t// Salary\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Salary\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint '<input size=\"8\" type=\"text\" name=\"salary\" value=\"'.price2num(GETPOST('salary')?GETPOST('salary'):$object->salary).'\">';\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Weeklyhours\n\t\t\tprint '<tr><td>'.$langs->trans(\"WeeklyHours\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint '<input size=\"8\" type=\"text\" name=\"weeklyhours\" value=\"'.price2num(GETPOST('weeklyhours')?GETPOST('weeklyhours'):$object->weeklyhours).'\">';\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Date employment\n\t\t\tprint '<tr><td>'.$langs->trans(\"DateEmployment\").'</td>';\n\t\t\tprint '<td>';\n\t\t\techo $form->select_date(GETPOST('dateemployment')?GETPOST('dateemployment'):$object->dateemployment,'dateemployment',0,0,1,'form'.'dateemployment',1,0,1);\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Date birth\n\t\t\tprint '<tr><td>'.$langs->trans(\"DateToBirth\").'</td>';\n\t\t\tprint '<td>';\n\t\t\techo $form->select_date(GETPOST('birth')?GETPOST('birth'):$object->birth,'birth',0,0,1,'updateuser',1,0,1);\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\tprint '</table>';\n\n\t\t\tdol_fiche_end();\n\n\t\t\tprint '<div align=\"center\">';\n\t\t\tprint '<input value=\"'.$langs->trans(\"Save\").'\" class=\"button\" type=\"submit\" name=\"save\">';\n\t\t\tprint '&nbsp; &nbsp; &nbsp;';\n\t\t\tprint '<input value=\"'.$langs->trans(\"Cancel\").'\" class=\"button\" type=\"submit\" name=\"cancel\">';\n\t\t\tprint '</div>';\n\n\t\t\tprint '</form>';\n\t\t}\n\n\t\tif ($action != 'edit' && $action != 'presend')\n\t\t{\n\t\t\tprint '<div class=\"fichecenter\"><div class=\"fichehalfleft\">';\n\t\t\t/*\n             * Documents generes\n             */\n\t\t\t$filename = dol_sanitizeFileName($object->ref);\n\t\t\t$filedir = $conf->user->dir_output . \"/\" . dol_sanitizeFileName($object->ref);\n\t\t\t$urlsource = $_SERVER[\"PHP_SELF\"] . \"?id=\" . $object->id;\n\t\t\t$genallowed = $user->rights->user->user->lire;\n\t\t\t$delallowed = $user->rights->user->user->creer;\n\n\t\t\tprint $formfile->showdocuments('user', $filename, $filedir, $urlsource, $genallowed, $delallowed, $object->modelpdf, 1, 0, 0, 28, 0, '', 0, '', $soc->default_lang);\n\t\t\t$somethingshown = $formfile->numoffiles;\n\n\t\t\t// Show links to link elements\n\t\t\t$linktoelem = $form->showLinkToObjectBlock($object, null, null);\n\t\t\t$somethingshown = $form->showLinkedObjectBlock($object, $linktoelem);\n\n\t\t\tprint '</div><div class=\"fichehalfright\"><div class=\"ficheaddleft\">';\n\n\t\t\t// List of actions on element\n\t\t\tinclude_once DOL_DOCUMENT_ROOT . '/core/class/html.formactions.class.php';\n\t\t\t$formactions = new FormActions($db);\n\t\t\t$somethingshown = $formactions->showactions($object, 'user', $socid, 1);\n\n\n\t\t\tprint '</div></div></div>';\n\t\t}\n\n\t\tif (! empty($conf->ldap->enabled) && ! empty($object->ldap_sid)) $ldap->close();\n\t}\n\n}\n\nif (! empty($conf->api->enabled) && ! empty($conf->use_javascript_ajax))\n{\n\tprint \"\\n\".'<script type=\"text/javascript\">';\n\tprint '$(document).ready(function () {\n            $(\"#generate_api_key\").click(function() {\n                $.get( \"'.DOL_URL_ROOT.'/core/ajax/security.php\", {\n                    action: \\'getrandompassword\\',\n                    generic: true\n                },\n                function(token) {\n                    $(\"#api_key\").val(token);\n                });\n            });\n    });';\n\tprint '</script>';\n}\n\nllxFooter();\n$db->close();\n", "<?php\n/* Copyright (c) 2002-2007 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (c) 2002-2003 Jean-Louis Bergamo   <jlb@j1b.org>\n * Copyright (c) 2004-2012 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2004      Sebastien Di Cintio  <sdicintio@ressource-toi.org>\n * Copyright (C) 2004      Benoit Mortier       <benoit.mortier@opensides.be>\n * Copyright (C) 2005-2017 Regis Houssin        <regis.houssin@capnetworks.com>\n * Copyright (C) 2005      Lionel Cousteix      <etm_ltd@tiscali.co.uk>\n * Copyright (C) 2011      Herve Prot           <herve.prot@symeos.com>\n * Copyright (C) 2013-2014 Philippe Grand       <philippe.grand@atoo-net.com>\n * Copyright (C) 2013-2015 Alexandre Spangaro   <aspangaro.dolibarr@gmail.com>\n * Copyright (C) 2015      Marcos Garc\u00eda        <marcosgdf@gmail.com>\n * Copyright (C) 2018      Nicolas ZABOURI\t<info@inovea-conseil.com>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n *  \\file       htdocs/user/class/user.class.php\n *\t\\brief      File of class to manage users\n *  \\ingroup\tcore\n */\n\nrequire_once DOL_DOCUMENT_ROOT .'/core/class/commonobject.class.php';\n\n/**\n *\tClass to manage Dolibarr users\n */\nclass User extends CommonObject\n{\n\tpublic $element='user';\n\tpublic $table_element='user';\n\tpublic $fk_element='fk_user';\n\tpublic $ismultientitymanaged = 1;\t// 0=No test on entity, 1=Test with field entity, 2=Test with link by societe\n\n\tpublic $id=0;\n\tpublic $statut;\n\tpublic $ldap_sid;\n\tpublic $search_sid;\n\tpublic $employee;\n\tpublic $gender;\n\tpublic $birth;\n\tpublic $email;\n\tpublic $skype;\n\tpublic $job;\n\tpublic $signature;\n\tpublic $address;\n\tpublic $zip;\n\tpublic $town;\n\tpublic $state_id;\t\t// The state/department\n\tpublic $state_code;\n\tpublic $state;\n\tpublic $office_phone;\n\tpublic $office_fax;\n\tpublic $user_mobile;\n\tpublic $admin;\n\tpublic $login;\n\tpublic $api_key;\n\tpublic $entity;\n\n\t//! Clear password in memory\n\tpublic $pass;\n\t//! Clear password in database (defined if DATABASE_PWD_ENCRYPTED=0)\n\tpublic $pass_indatabase;\n\t//! Encrypted password in database (always defined)\n\tpublic $pass_indatabase_crypted;\n\n\tpublic $datec;\n\tpublic $datem;\n\n\t//! If this is defined, it is an external user\n\t/**\n\t * @deprecated\n\t * @see socid\n\t */\n\tpublic $societe_id;\n\t/**\n\t * @deprecated\n\t * @see contactid\n\t */\n\tpublic $contact_id;\n\tpublic $socid;\n\tpublic $contactid;\n\n\tpublic $fk_member;\n\tpublic $fk_user;\n\n\tpublic $clicktodial_url;\n\tpublic $clicktodial_login;\n\tpublic $clicktodial_password;\n\tpublic $clicktodial_poste;\n\n\tpublic $datelastlogin;\n\tpublic $datepreviouslogin;\n\tpublic $photo;\n\tpublic $lang;\n\n\tpublic $rights;                        // Array of permissions user->rights->permx\n\tpublic $all_permissions_are_loaded;\t   // All permission are loaded\n\tpublic $nb_rights;\t\t\t           // Number of rights granted to the user\n\tprivate $_tab_loaded=array();\t\t   // Cache array of already loaded permissions\n\n\tpublic $conf;           \t\t// To store personal config\n\tpublic $default_values;         // To store default values for user\n\tpublic $lastsearch_values_tmp;  // To store current search criterias for user\n\tpublic $lastsearch_values;      // To store last saved search criterias for user\n\n\tpublic $users = array();\t\t// To store all tree of users hierarchy\n\tpublic $parentof;\t\t\t\t// To store an array of all parents for all ids.\n\tprivate $cache_childids;\n\n\tpublic $accountancy_code;\t\t\t// Accountancy code in prevision of the complete accountancy module\n\n\tpublic $thm;\t\t\t\t\t// Average cost of employee - Used for valuation of time spent\n\tpublic $tjm;\t\t\t\t\t// Average cost of employee\n\n\tpublic $salary;\t\t\t\t\t// Monthly salary       - Denormalized value from llx_user_employment\n\tpublic $salaryextra;\t\t\t\t// Monthly salary extra - Denormalized value from llx_user_employment\n\tpublic $weeklyhours;\t\t\t\t// Weekly hours         - Denormalized value from llx_user_employment\n\n\tpublic $color;\t\t\t\t\t\t// Define background color for user in agenda\n\n\tpublic $dateemployment;\t\t\t// Define date of employment by company\n\n\tpublic $default_c_exp_tax_cat;\n\tpublic $default_range;\n\n\tpublic $fields=array(\n        \t'rowid'=>array('type'=>'integer', 'label'=>'TechnicalID', 'enabled'=>1, 'visible'=>-2, 'notnull'=>1,  'index'=>1, 'position'=>1, 'comment'=>'Id'),\n        \t'lastname'=>array('type'=>'varchar(50)', 'label'=>'Name', 'enabled'=>1, 'visible'=>1,  'notnull'=>1,  'showoncombobox'=>1, 'index'=>1, 'position'=>20, 'searchall'=>1, 'comment'=>'Reference of object'),\n        \t'firstname'=>array('type'=>'varchar(50)', 'label'=>'Name','enabled'=>1, 'visible'=>1,  'notnull'=>1,  'showoncombobox'=>1, 'index'=>1, 'position'=>10, 'searchall'=>1, 'comment'=>'Reference of object'),\n    \t);\n\n\t/**\n\t *    Constructor de la classe\n\t *\n\t *    @param   DoliDb  $db     Database handler\n\t */\n\tfunction __construct($db)\n\t{\n\t\t$this->db = $db;\n\n\t\t// User preference\n\t\t$this->liste_limit = 0;\n\t\t$this->clicktodial_loaded = 0;\n\n\t\t// For cache usage\n\t\t$this->all_permissions_are_loaded = 0;\n\t\t$this->nb_rights = 0;\n\n\t\t// Force some default values\n\t\t$this->admin = 0;\n\t\t$this->employee = 1;\n\n\t\t$this->conf\t\t\t\t    = new stdClass();\n\t\t$this->rights\t\t\t\t= new stdClass();\n\t\t$this->rights->user\t\t\t= new stdClass();\n\t\t$this->rights->user->user\t= new stdClass();\n\t\t$this->rights->user->self\t= new stdClass();\n\t}\n\n\t/**\n\t *\tLoad a user from database with its id or ref (login).\n\t *  This function does not load permissions, only user properties. Use getrights() for this just after the fetch.\n\t *\n\t *\t@param\tint\t\t$id\t\t       \t\tIf defined, id to used for search\n\t * \t@param  string\t$login       \t\tIf defined, login to used for search\n\t *\t@param  string\t$sid\t\t\t\tIf defined, sid to used for search\n\t * \t@param\tint\t\t$loadpersonalconf\t1=also load personal conf of user (in $user->conf->xxx), 0=do not load personal conf.\n\t *  @param  int     $entity             If a value is >= 0, we force the search on a specific entity. If -1, means search depens on default setup.\n\t * \t@return\tint\t\t\t\t\t\t\t<0 if KO, 0 not found, >0 if OK\n\t */\n\tfunction fetch($id='', $login='', $sid='', $loadpersonalconf=0, $entity=-1)\n\t{\n\t\tglobal $conf, $user;\n\n\t\t// Clean parameters\n\t\t$login=trim($login);\n\n\t\t// Get user\n\t\t$sql = \"SELECT u.rowid, u.lastname, u.firstname, u.employee, u.gender, u.birth, u.email, u.job, u.skype, u.signature, u.office_phone, u.office_fax, u.user_mobile,\";\n\t\t$sql.= \" u.address, u.zip, u.town, u.fk_state as state_id, u.fk_country as country_id,\";\n\t\t$sql.= \" u.admin, u.login, u.note,\";\n\t\t$sql.= \" u.pass, u.pass_crypted, u.pass_temp, u.api_key,\";\n\t\t$sql.= \" u.fk_soc, u.fk_socpeople, u.fk_member, u.fk_user, u.ldap_sid,\";\n\t\t$sql.= \" u.statut, u.lang, u.entity,\";\n\t\t$sql.= \" u.datec as datec,\";\n\t\t$sql.= \" u.tms as datem,\";\n\t\t$sql.= \" u.datelastlogin as datel,\";\n\t\t$sql.= \" u.datepreviouslogin as datep,\";\n\t\t$sql.= \" u.photo as photo,\";\n\t\t$sql.= \" u.openid as openid,\";\n\t\t$sql.= \" u.accountancy_code,\";\n\t\t$sql.= \" u.thm,\";\n\t\t$sql.= \" u.tjm,\";\n\t\t$sql.= \" u.salary,\";\n\t\t$sql.= \" u.salaryextra,\";\n\t\t$sql.= \" u.weeklyhours,\";\n\t\t$sql.= \" u.color,\";\n\t\t$sql.= \" u.dateemployment,\";\n\t\t$sql.= \" u.ref_int, u.ref_ext,\";\n\t\t$sql.= \" u.default_range, u.default_c_exp_tax_cat,\";\t\t\t// Expense report default mode\n\t\t$sql.= \" c.code as country_code, c.label as country,\";\n\t\t$sql.= \" d.code_departement as state_code, d.nom as state\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"user as u\";\n\t\t$sql.= \" LEFT JOIN \".MAIN_DB_PREFIX.\"c_country as c ON u.fk_country = c.rowid\";\n\t\t$sql.= \" LEFT JOIN \".MAIN_DB_PREFIX.\"c_departements as d ON u.fk_state = d.rowid\";\n\n\t\tif ($entity < 0)\n\t\t{\n\t\t\tif ((empty($conf->multicompany->enabled) || empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)) && (! empty($user->entity)))\n\t\t\t{\n\t\t\t\t$sql.= \" WHERE u.entity IN (0,\".$conf->entity.\")\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$sql.= \" WHERE u.entity IS NOT NULL\";    // multicompany is on in transverse mode or user making fetch is on entity 0, so user is allowed to fetch anywhere into database\n\t\t\t}\n\t\t}\n\t\telse  // The fetch was forced on an entity\n\t\t{\n\t\t\tif (!empty($conf->multicompany->enabled) && !empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE))\n\t\t\t\t$sql.= \" WHERE u.entity IS NOT NULL\";    // multicompany is on in transverse mode or user making fetch is on entity 0, so user is allowed to fetch anywhere into database\n\t\t\telse\n\t\t\t\t$sql.= \" WHERE u.entity IN (0, \".(($entity!='' && $entity >= 0)?$entity:$conf->entity).\")\";   // search in entity provided in parameter\n\t\t}\n\n\t\tif ($sid)    // permet une recherche du user par son SID ActiveDirectory ou Samba\n\t\t{\n\t\t\t$sql.= \" AND (u.ldap_sid = '\".$this->db->escape($sid).\"' OR u.login = '\".$this->db->escape($login).\"') LIMIT 1\";\n\t\t}\n\t\telse if ($login)\n\t\t{\n\t\t\t$sql.= \" AND u.login = '\".$this->db->escape($login).\"'\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sql.= \" AND u.rowid = \".$id;\n\t\t}\n\t\t$sql.= \" ORDER BY u.entity ASC\";    // Avoid random result when there is 2 login in 2 different entities\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result)\n\t\t{\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\tif ($obj)\n\t\t\t{\n\t\t\t\t$this->id \t\t\t= $obj->rowid;\n\t\t\t\t$this->ref \t\t\t= $obj->rowid;\n\n\t\t\t\t$this->ref_int \t\t= $obj->ref_int;\n\t\t\t\t$this->ref_ext \t\t= $obj->ref_ext;\n\n\t\t\t\t$this->ldap_sid \t= $obj->ldap_sid;\n\t\t\t\t$this->lastname\t\t= $obj->lastname;\n\t\t\t\t$this->firstname \t= $obj->firstname;\n\n\t\t\t\t$this->employee\t\t= $obj->employee;\n\n\t\t\t\t$this->login\t\t= $obj->login;\n\t\t\t\t$this->gender       = $obj->gender;\n\t\t\t\t$this->birth        = $this->db->jdate($obj->birth);\n\t\t\t\t$this->pass_indatabase = $obj->pass;\n\t\t\t\t$this->pass_indatabase_crypted = $obj->pass_crypted;\n\t\t\t\t$this->pass\t\t\t= $obj->pass;\n\t\t\t\t$this->pass_temp\t= $obj->pass_temp;\n\t\t\t\t$this->api_key\t\t= $obj->api_key;\n\n\t\t\t\t$this->address \t\t= $obj->address;\n\t\t\t\t$this->zip \t\t\t= $obj->zip;\n\t\t\t\t$this->town \t\t= $obj->town;\n\n\t\t\t\t$this->country_id   = $obj->country_id;\n\t\t\t\t$this->country_code = $obj->country_id?$obj->country_code:'';\n\t\t\t\t//$this->country \t\t= $obj->country_id?($langs->trans('Country'.$obj->country_code)!='Country'.$obj->country_code?$langs->transnoentities('Country'.$obj->country_code):$obj->country):'';\n\n\t\t\t\t$this->state_id     = $obj->state_id;\n\t\t\t\t$this->state_code   = $obj->state_code;\n\t\t\t\t$this->state        = ($obj->state!='-'?$obj->state:'');\n\n\t\t\t\t$this->office_phone\t= $obj->office_phone;\n\t\t\t\t$this->office_fax   = $obj->office_fax;\n\t\t\t\t$this->user_mobile  = $obj->user_mobile;\n\t\t\t\t$this->email\t\t= $obj->email;\n\t\t\t\t$this->skype\t\t= $obj->skype;\n\t\t\t\t$this->job\t\t\t= $obj->job;\n\t\t\t\t$this->signature\t= $obj->signature;\n\t\t\t\t$this->admin\t\t= $obj->admin;\n\t\t\t\t$this->note\t\t\t= $obj->note;\n\t\t\t\t$this->statut\t\t= $obj->statut;\n\t\t\t\t$this->photo\t\t= $obj->photo;\n\t\t\t\t$this->openid\t\t= $obj->openid;\n\t\t\t\t$this->lang\t\t\t= $obj->lang;\n\t\t\t\t$this->entity\t\t= $obj->entity;\n\t\t\t\t$this->accountancy_code\t\t= $obj->accountancy_code;\n\t\t\t\t$this->thm\t\t\t= $obj->thm;\n\t\t\t\t$this->tjm\t\t\t= $obj->tjm;\n\t\t\t\t$this->salary\t\t= $obj->salary;\n\t\t\t\t$this->salaryextra\t= $obj->salaryextra;\n\t\t\t\t$this->weeklyhours\t= $obj->weeklyhours;\n\t\t\t\t$this->color\t\t= $obj->color;\n\t\t\t\t$this->dateemployment\t= $this->db->jdate($obj->dateemployment);\n\n\t\t\t\t$this->datec\t\t\t\t= $this->db->jdate($obj->datec);\n\t\t\t\t$this->datem\t\t\t\t= $this->db->jdate($obj->datem);\n\t\t\t\t$this->datelastlogin\t\t= $this->db->jdate($obj->datel);\n\t\t\t\t$this->datepreviouslogin\t= $this->db->jdate($obj->datep);\n\n\t\t\t\t$this->societe_id           = $obj->fk_soc;\t\t// deprecated\n\t\t\t\t$this->contact_id           = $obj->fk_socpeople;\t// deprecated\n\t\t\t\t$this->socid                = $obj->fk_soc;\n\t\t\t\t$this->contactid            = $obj->fk_socpeople;\n\t\t\t\t$this->fk_member            = $obj->fk_member;\n\t\t\t\t$this->fk_user        \t\t= $obj->fk_user;\n\n\t\t\t\t$this->default_range\t\t= $obj->default_range;\n\t\t\t\t$this->default_c_exp_tax_cat\t= $obj->default_c_exp_tax_cat;\n\n\t\t\t\t// Protection when module multicompany was set, admin was set to first entity and then, the module was disabled,\n\t\t\t\t// in such case, this admin user must be admin for ALL entities.\n\t\t\t\tif (empty($conf->multicompany->enabled) && $this->admin && $this->entity == 1) $this->entity = 0;\n\n\t\t\t\t// Retreive all extrafield\n\t\t\t\t// fetch optionals attributes and labels\n\t\t\t\t$this->fetch_optionals();\n\n\t\t\t\t$this->db->free($result);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->error=\"USERNOTFOUND\";\n\t\t\t\tdol_syslog(get_class($this).\"::fetch user not found\", LOG_DEBUG);\n\n\t\t\t\t$this->db->free($result);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\n\t\t// To get back the global configuration unique to the user\n\t\tif ($loadpersonalconf)\n\t\t{\n\t\t\t// Load user->conf for user\n\t\t\t$sql = \"SELECT param, value FROM \".MAIN_DB_PREFIX.\"user_param\";\n\t\t\t$sql.= \" WHERE fk_user = \".$this->id;\n\t\t\t$sql.= \" AND entity = \".$conf->entity;\n\t\t\t//dol_syslog(get_class($this).'::fetch load personalized conf', LOG_DEBUG);\n\t\t\t$resql=$this->db->query($sql);\n\t\t\tif ($resql)\n\t\t\t{\n\t\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t\t$i = 0;\n\t\t\t\twhile ($i < $num)\n\t\t\t\t{\n\t\t\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t\t\t$p=(! empty($obj->param)?$obj->param:'');\n\t\t\t\t\tif (! empty($p)) $this->conf->$p = $obj->value;\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t\t$this->db->free($resql);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->error=$this->db->lasterror();\n\t\t\t\treturn -2;\n\t\t\t}\n\n\t\t\t// Load user->default_values for user. TODO Save this in memcached ?\n\t\t\t$sql = \"SELECT rowid, entity, type, page, param, value\";\n\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"default_values\";\n\t\t\t$sql.= \" WHERE entity IN (\".$this->entity.\",\".$conf->entity.\")\";\n\t\t\t$sql.= \" AND user_id IN (0, \".$this->id.\")\";\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif ($resql)\n\t\t\t{\n\t\t\t\twhile ($obj = $this->db->fetch_object($resql))\n\t\t\t\t{\n\t\t\t\t\tif (! empty($obj->page) && ! empty($obj->type) && ! empty($obj->param))\n\t\t\t\t\t{\n\t\t\t\t\t\t// $obj->page is relative URL with or without params\n\t\t\t\t\t\t// $obj->type can be 'filters', 'sortorder', 'createform', ...\n\t\t\t\t\t\t// $obj->param is key or param\n\t\t\t\t\t\t$pagewithoutquerystring=$obj->page;\n\t\t\t\t\t\t$pagequeries='';\n\t\t\t\t\t\tif (preg_match('/^([^\\?]+)\\?(.*)$/', $pagewithoutquerystring, $reg))\t// There is query param\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$pagewithoutquerystring=$reg[1];\n\t\t\t\t\t\t\t$pagequeries=$reg[2];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$this->default_values[$pagewithoutquerystring][$obj->type][$pagequeries?$pagequeries:'_noquery_'][$obj->param]=$obj->value;\n\t\t\t\t\t\t//if ($pagequeries) $this->default_values[$pagewithoutquerystring][$obj->type.'_queries']=$pagequeries;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Sort by key, so _noquery_ is last\n\t\t\t\tif(!empty($this->default_values)) {\n\t\t\t\t\tforeach($this->default_values as $a => $b)\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach($b as $c => $d)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkrsort($this->default_values[$a][$c]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->db->free($resql);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->error=$this->db->lasterror();\n\t\t\t\treturn -3;\n\t\t\t}\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t *  Add a right to the user\n\t *\n\t * \t@param\tint\t\t$rid\t\t\tid of permission to add\n\t *  @param  string\t$allmodule\t\tAdd all permissions of module $allmodule\n\t *  @param  string\t$allperms\t\tAdd all permissions of module $allmodule, subperms $allperms only\n\t *  @param\tint\t\t$entity\t\t\tEntity to use\n\t *  @param  int\t    $notrigger\t\t1=Does not execute triggers, 0=Execute triggers\n\t *  @return int\t\t\t\t\t\t> 0 if OK, < 0 if KO\n\t *  @see\tclearrights, delrights, getrights\n\t */\n\tfunction addrights($rid, $allmodule='', $allperms='', $entity=0, $notrigger=0)\n\t{\n\t\tglobal $conf, $user, $langs;\n\n\t\t$entity = (! empty($entity)?$entity:$conf->entity);\n\n\t\tdol_syslog(get_class($this).\"::addrights $rid, $allmodule, $allperms, $entity\");\n\t\t$error=0;\n\t\t$whereforadd='';\n\n\t\t$this->db->begin();\n\n\t\tif (! empty($rid))\n\t\t{\n\t\t\t// Si on a demande ajout d'un droit en particulier, on recupere\n\t\t\t// les caracteristiques (module, perms et subperms) de ce droit.\n\t\t\t$sql = \"SELECT module, perms, subperms\";\n\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"rights_def\";\n\t\t\t$sql.= \" WHERE id = '\".$this->db->escape($rid).\"'\";\n\t\t\t$sql.= \" AND entity = \".$entity;\n\n\t\t\t$result=$this->db->query($sql);\n\t\t\tif ($result) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t$module=$obj->module;\n\t\t\t\t$perms=$obj->perms;\n\t\t\t\t$subperms=$obj->subperms;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$error++;\n\t\t\t\tdol_print_error($this->db);\n\t\t\t}\n\n\t\t\t// Where pour la liste des droits a ajouter\n\t\t\t$whereforadd=\"id=\".$this->db->escape($rid);\n\t\t\t// Ajout des droits induits\n\t\t\tif (! empty($subperms))   $whereforadd.=\" OR (module='$module' AND perms='$perms' AND (subperms='lire' OR subperms='read'))\";\n\t\t\telse if (! empty($perms)) $whereforadd.=\" OR (module='$module' AND (perms='lire' OR perms='read') AND subperms IS NULL)\";\n\t\t}\n\t\telse {\n\t\t\t// On a pas demande un droit en particulier mais une liste de droits\n\t\t\t// sur la base d'un nom de module de de perms\n\t\t\t// Where pour la liste des droits a ajouter\n\t\t\tif (! empty($allmodule))\n\t\t\t{\n\t\t\t\t$whereforadd=\"module='\".$this->db->escape($allmodule).\"'\";\n\t\t\t\tif (! empty($allperms)) $whereforadd.=\" AND perms='\".$this->db->escape($allperms).\"'\";\n\t\t\t}\n\t\t}\n\n\t\t// Ajout des droits trouves grace au critere whereforadd\n\t\tif (! empty($whereforadd))\n\t\t{\n\t\t\t//print \"$module-$perms-$subperms\";\n\t\t\t$sql = \"SELECT id\";\n\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"rights_def\";\n\t\t\t$sql.= \" WHERE \".$whereforadd;\n\t\t\t$sql.= \" AND entity = \".$entity;\n\n\t\t\t$result=$this->db->query($sql);\n\t\t\tif ($result)\n\t\t\t{\n\t\t\t\t$num = $this->db->num_rows($result);\n\t\t\t\t$i = 0;\n\t\t\t\twhile ($i < $num)\n\t\t\t\t{\n\t\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t\t$nid = $obj->id;\n\n\t\t\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_rights WHERE fk_user = \".$this->id.\" AND fk_id=\".$nid.\" AND entity = \".$entity;\n\t\t\t\t\tif (! $this->db->query($sql)) $error++;\n\t\t\t\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"user_rights (entity, fk_user, fk_id) VALUES (\".$entity.\", \".$this->id.\", \".$nid.\")\";\n\t\t\t\t\tif (! $this->db->query($sql)) $error++;\n\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$error++;\n\t\t\t\tdol_print_error($this->db);\n\t\t\t}\n\t\t}\n\n\t\tif (! $error && ! $notrigger)\n\t\t{\n\t\t\t$langs->load(\"other\");\n\t\t\t$this->context = array('audit'=>$langs->trans(\"PermissionsAdd\").($rid?' (id='.$rid.')':''));\n\n\t\t\t// Call trigger\n\t\t\t$result=$this->call_trigger('USER_MODIFY',$user);\n\t\t\tif ($result < 0) { $error++; }\n\t\t\t// End call triggers\n\t\t}\n\n\t\tif ($error) {\n\t\t\t$this->db->rollback();\n\t\t\treturn -$error;\n\t\t}\n\t\telse {\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t}\n\n\t}\n\n\n\t/**\n\t *  Remove a right to the user\n\t *\n\t *  @param\tint\t\t$rid        Id du droit a retirer\n\t *  @param  string\t$allmodule  Retirer tous les droits du module allmodule\n\t *  @param  string\t$allperms   Retirer tous les droits du module allmodule, perms allperms\n\t *  @param\tint\t\t$entity\t\tEntity to use\n\t *  @param  int\t    $notrigger\t1=Does not execute triggers, 0=Execute triggers\n\t *  @return int         \t\t> 0 if OK, < 0 if OK\n\t *  @see\tclearrights, addrights, getrights\n\t */\n\tfunction delrights($rid, $allmodule='', $allperms='', $entity=0, $notrigger=0)\n\t{\n\t\tglobal $conf, $user, $langs;\n\n\t\t$error=0;\n\t\t$wherefordel='';\n\t\t$entity = (! empty($entity)?$entity:$conf->entity);\n\n\t\t$this->db->begin();\n\n\t\tif (! empty($rid))\n\t\t{\n\t\t\t// Si on a demande supression d'un droit en particulier, on recupere\n\t\t\t// les caracteristiques module, perms et subperms de ce droit.\n\t\t\t$sql = \"SELECT module, perms, subperms\";\n\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"rights_def\";\n\t\t\t$sql.= \" WHERE id = '\".$this->db->escape($rid).\"'\";\n\t\t\t$sql.= \" AND entity = \".$entity;\n\n\t\t\t$result=$this->db->query($sql);\n\t\t\tif ($result) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t$module=$obj->module;\n\t\t\t\t$perms=$obj->perms;\n\t\t\t\t$subperms=$obj->subperms;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$error++;\n\t\t\t\tdol_print_error($this->db);\n\t\t\t}\n\n\t\t\t// Where pour la liste des droits a supprimer\n\t\t\t$wherefordel=\"id=\".$this->db->escape($rid);\n\t\t\t// Suppression des droits induits\n\t\t\tif ($subperms=='lire' || $subperms=='read') $wherefordel.=\" OR (module='$module' AND perms='$perms' AND subperms IS NOT NULL)\";\n\t\t\tif ($perms=='lire' || $perms=='read')       $wherefordel.=\" OR (module='$module')\";\n\t\t}\n\t\telse {\n\t\t\t// On a demande suppression d'un droit sur la base d'un nom de module ou perms\n\t\t\t// Where pour la liste des droits a supprimer\n\t\t\tif (! empty($allmodule)) $wherefordel=\"module='\".$this->db->escape($allmodule).\"'\";\n\t\t\tif (! empty($allperms))  $wherefordel=\" AND perms='\".$this->db->escape($allperms).\"'\";\n\t\t}\n\n\t\t// Suppression des droits selon critere defini dans wherefordel\n\t\tif (! empty($wherefordel))\n\t\t{\n\t\t\t//print \"$module-$perms-$subperms\";\n\t\t\t$sql = \"SELECT id\";\n\t\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"rights_def\";\n\t\t\t$sql.= \" WHERE $wherefordel\";\n\t\t\t$sql.= \" AND entity = \".$entity;\n\n\t\t\t$result=$this->db->query($sql);\n\t\t\tif ($result)\n\t\t\t{\n\t\t\t\t$num = $this->db->num_rows($result);\n\t\t\t\t$i = 0;\n\t\t\t\twhile ($i < $num)\n\t\t\t\t{\n\t\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t\t$nid = $obj->id;\n\n\t\t\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_rights\";\n\t\t\t\t\t$sql.= \" WHERE fk_user = \".$this->id.\" AND fk_id=\".$nid;\n\t\t\t\t\t$sql.= \" AND entity = \".$entity;\n\t\t\t\t\tif (! $this->db->query($sql)) $error++;\n\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$error++;\n\t\t\t\tdol_print_error($this->db);\n\t\t\t}\n\t\t}\n\n\t\tif (! $error && ! $notrigger)\n\t\t{\n\t\t\t$langs->load(\"other\");\n\t\t\t$this->context = array('audit'=>$langs->trans(\"PermissionsDelete\").($rid?' (id='.$rid.')':''));\n\n\t\t\t// Call trigger\n\t\t\t$result=$this->call_trigger('USER_MODIFY',$user);\n\t\t\tif ($result < 0) { $error++; }\n\t\t\t// End call triggers\n\t\t}\n\n\t\tif ($error) {\n\t\t\t$this->db->rollback();\n\t\t\treturn -$error;\n\t\t}\n\t\telse {\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t}\n\n\t}\n\n\n\t/**\n\t *  Clear all permissions array of user\n\t *\n\t *  @return\tvoid\n\t *  @see\tgetrights\n\t */\n\tfunction clearrights()\n\t{\n\t\tdol_syslog(get_class($this).\"::clearrights reset user->rights\");\n\t\t$this->rights='';\n\t\t$this->all_permissions_are_loaded=false;\n\t\t$this->_tab_loaded=array();\n\t}\n\n\n\t/**\n\t *\tLoad permissions granted to user into object user\n\t *\n\t *\t@param  string\t$moduletag    Limit permission for a particular module ('' by default means load all permissions)\n\t *\t@return\tvoid\n\t *  @see\tclearrights, delrights, addrights\n\t */\n\tfunction getrights($moduletag='')\n\t{\n\t\tglobal $conf;\n\n\t\tif ($moduletag && isset($this->_tab_loaded[$moduletag]) && $this->_tab_loaded[$moduletag])\n\t\t{\n\t\t\t// Le fichier de ce module est deja charge\n\t\t\treturn;\n\t\t}\n\n\t\tif ($this->all_permissions_are_loaded)\n\t\t{\n\t\t\t// Si les permissions ont deja ete charge pour ce user, on quitte\n\t\t\treturn;\n\t\t}\n\n\t\t// Recuperation des droits utilisateurs + recuperation des droits groupes\n\n\t\t// D'abord les droits utilisateurs\n\t\t$sql = \"SELECT r.module, r.perms, r.subperms\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"user_rights as ur\";\n\t\t$sql.= \", \".MAIN_DB_PREFIX.\"rights_def as r\";\n\t\t$sql.= \" WHERE r.id = ur.fk_id\";\n\t\tif (! empty($conf->global->MULTICOMPANY_BACKWARD_COMPATIBILITY))\n\t\t{\n\t\t\t$sql.= \" AND r.entity IN (0,\".(! empty($conf->multicompany->enabled) && ! empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)?\"1,\":\"\").$conf->entity.\")\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sql.= \" AND ur.entity = \".$conf->entity;\n\t\t}\n\t\t$sql.= \" AND ur.fk_user= \".$this->id;\n\t\t$sql.= \" AND r.perms IS NOT NULL\";\n\t\tif ($moduletag) $sql.= \" AND r.module = '\".$this->db->escape($moduletag).\"'\";\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t$i = 0;\n\t\t\twhile ($i < $num)\n\t\t\t{\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\t$module=$obj->module;\n\t\t\t\t$perms=$obj->perms;\n\t\t\t\t$subperms=$obj->subperms;\n\n\t\t\t\tif ($perms)\n\t\t\t\t{\n\t\t\t\t\tif (! isset($this->rights) || ! is_object($this->rights)) $this->rights = new stdClass(); // For avoid error\n\t\t\t\t\tif ($module)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! isset($this->rights->$module) || ! is_object($this->rights->$module)) $this->rights->$module = new stdClass();\n\t\t\t\t\t\tif ($subperms)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (! isset($this->rights->$module->$perms) || ! is_object($this->rights->$module->$perms)) $this->rights->$module->$perms = new stdClass();\n\t\t\t\t\t\t\tif(empty($this->rights->$module->$perms->$subperms)) $this->nb_rights++;\n\t\t\t\t\t\t\t$this->rights->$module->$perms->$subperms = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(empty($this->rights->$module->$perms)) $this->nb_rights++;\n\t\t\t\t\t\t\t$this->rights->$module->$perms = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->db->free($resql);\n\t\t}\n\n\t\t// Maintenant les droits groupes\n\t\t$sql = \"SELECT r.module, r.perms, r.subperms\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"usergroup_rights as gr,\";\n\t\t$sql.= \" \".MAIN_DB_PREFIX.\"usergroup_user as gu,\";\n\t\t$sql.= \" \".MAIN_DB_PREFIX.\"rights_def as r\";\n\t\t$sql.= \" WHERE r.id = gr.fk_id\";\n\t\tif (! empty($conf->global->MULTICOMPANY_BACKWARD_COMPATIBILITY))\n\t\t{\n\t\t\tif (! empty($conf->multicompany->enabled) && ! empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)) {\n\t\t\t\t$sql.= \" AND gu.entity IN (0,\".$conf->entity.\")\";\n\t\t\t} else {\n\t\t\t\t$sql.= \" AND r.entity = \".$conf->entity;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sql.= \" AND gr.entity = \".$conf->entity;\n\t\t\t$sql.= \" AND r.entity = \".$conf->entity;\n\t\t}\n\t\t$sql.= \" AND gr.fk_usergroup = gu.fk_usergroup\";\n\t\t$sql.= \" AND gu.fk_user = \".$this->id;\n\t\t$sql.= \" AND r.perms IS NOT NULL\";\n\t\tif ($moduletag) $sql.= \" AND r.module = '\".$this->db->escape($moduletag).\"'\";\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t$i = 0;\n\t\t\twhile ($i < $num)\n\t\t\t{\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\t$module=$obj->module;\n\t\t\t\t$perms=$obj->perms;\n\t\t\t\t$subperms=$obj->subperms;\n\n\t\t\t\tif ($perms)\n\t\t\t\t{\n\t\t\t\t\tif (! isset($this->rights) || ! is_object($this->rights)) $this->rights = new stdClass(); // For avoid error\n\t\t\t\t\tif (! isset($this->rights->$module) || ! is_object($this->rights->$module)) $this->rights->$module = new stdClass();\n\t\t\t\t\tif ($subperms)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! isset($this->rights->$module->$perms) || ! is_object($this->rights->$module->$perms)) $this->rights->$module->$perms = new stdClass();\n\t\t\t\t\t\tif(empty($this->rights->$module->$perms->$subperms)) $this->nb_rights++;\n\t\t\t\t\t\t$this->rights->$module->$perms->$subperms = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(empty($this->rights->$module->$perms)) $this->nb_rights++;\n\t\t\t\t\t\t// if we have already define a subperm like this $this->rights->$module->level1->level2 with llx_user_rights, we don't want override level1 because the level2 can be not define on user group\n\t\t\t\t\t\tif (!is_object($this->rights->$module->$perms)) $this->rights->$module->$perms = 1;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->db->free($resql);\n\t\t}\n\n\t\t// For backward compatibility\n\t\tif (isset($this->rights->propale) && ! isset($this->rights->propal)) $this->rights->propal = $this->rights->propale;\n\t\tif (isset($this->rights->propal) && ! isset($this->rights->propale)) $this->rights->propale = $this->rights->propal;\n\n\t\tif (! $moduletag)\n\t\t{\n\t\t\t// Si module etait non defini, alors on a tout charge, on peut donc considerer\n\t\t\t// que les droits sont en cache (car tous charges) pour cet instance de user\n\t\t\t$this->all_permissions_are_loaded=1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Si module defini, on le marque comme charge en cache\n\t\t\t$this->_tab_loaded[$moduletag]=1;\n\t\t}\n\t}\n\n\t/**\n\t *  Change status of a user\n\t *\n\t *\t@param\tint\t\t$statut\t\tStatus to set\n\t *  @return int     \t\t\t<0 if KO, 0 if nothing is done, >0 if OK\n\t */\n\tfunction setstatus($statut)\n\t{\n\t\tglobal $conf,$langs,$user;\n\n\t\t$error=0;\n\n\t\t// Check parameters\n\t\tif ($this->statut == $statut) return 0;\n\t\telse $this->statut = $statut;\n\n\t\t$this->db->begin();\n\n\t\t// Deactivate user\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t$sql.= \" SET statut = \".$this->statut;\n\t\t$sql.= \" WHERE rowid = \".$this->id;\n\t\t$result = $this->db->query($sql);\n\n\t\tdol_syslog(get_class($this).\"::setstatus\", LOG_DEBUG);\n\t\tif ($result)\n\t\t{\n\t\t\t// Call trigger\n\t\t\t$result=$this->call_trigger('USER_ENABLEDISABLE',$user);\n\t\t\tif ($result < 0) { $error++; }\n\t\t\t// End call triggers\n\t\t}\n\n\t\tif ($error)\n\t\t{\n\t\t\t$this->db->rollback();\n\t\t\treturn -$error;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t * Sets object to supplied categories.\n\t *\n\t * Deletes object from existing categories not supplied.\n\t * Adds it to non existing supplied categories.\n\t * Existing categories are left untouch.\n\t *\n\t * @param int[]|int $categories Category or categories IDs\n\t */\n\tpublic function setCategories($categories)\n\t{\n\t\t// Handle single category\n\t\tif (!is_array($categories)) {\n\t\t\t$categories = array($categories);\n\t\t}\n\n\t\t// Get current categories\n\t\trequire_once DOL_DOCUMENT_ROOT . '/categories/class/categorie.class.php';\n\t\t$c = new Categorie($this->db);\n\t\t$existing = $c->containing($this->id, Categorie::TYPE_USER, 'id');\n\n\t\t// Diff\n\t\tif (is_array($existing)) {\n\t\t\t$to_del = array_diff($existing, $categories);\n\t\t\t$to_add = array_diff($categories, $existing);\n\t\t} else {\n\t\t\t$to_del = array(); // Nothing to delete\n\t\t\t$to_add = $categories;\n\t\t}\n\n\t\t// Process\n\t\tforeach ($to_del as $del) {\n\t\t\tif ($c->fetch($del) > 0) {\n\t\t\t\t$c->del_type($this, 'user');\n\t\t\t}\n\t\t}\n\t\tforeach ($to_add as $add) {\n\t\t\tif ($c->fetch($add) > 0) {\n\t\t\t\t$c->add_type($this, 'user');\n\t\t\t}\n\t\t}\n\n\t\treturn;\n\t}\n\n\t/**\n\t *    \tDelete the user\n\t *\n\t * \t\t@return\t\tint\t\t<0 if KO, >0 if OK\n\t */\n\tfunction delete()\n\t{\n\t\tglobal $user,$conf,$langs;\n\n\t\t$error=0;\n\n\t\t$this->db->begin();\n\n\t\t$this->fetch($this->id);\n\n\t\tdol_syslog(get_class($this).\"::delete\", LOG_DEBUG);\n\n\t\t// Remove rights\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_rights WHERE fk_user = \".$this->id;\n\n\t\tif (! $error && ! $this->db->query($sql))\n\t\t{\n\t\t\t$error++;\n\t\t\t$this->error = $this->db->lasterror();\n\t\t}\n\n\t\t// Remove group\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"usergroup_user WHERE fk_user  = \".$this->id;\n\t\tif (! $error && ! $this->db->query($sql))\n\t\t{\n\t\t\t$error++;\n\t\t\t$this->error = $this->db->lasterror();\n\t\t}\n\n\t\t// If contact, remove link\n\t\tif ($this->contact_id)\n\t\t{\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"socpeople SET fk_user_creat = null WHERE rowid = \".$this->contact_id;\n\t\t\tif (! $error && ! $this->db->query($sql))\n\t\t\t{\n\t\t\t\t$error++;\n\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t}\n\t\t}\n\n\t\t// Remove extrafields\n\t\tif ((! $error) && (empty($conf->global->MAIN_EXTRAFIELDS_DISABLED))) // For avoid conflicts if trigger used\n\t\t{\n\t\t\t$result=$this->deleteExtraFields();\n\t\t\tif ($result < 0)\n\t\t\t{\n\t\t   \t\t$error++;\n\t\t   \t\tdol_syslog(get_class($this).\"::delete error -4 \".$this->error, LOG_ERR);\n\t\t   \t}\n\t\t}\n\n\t\t// Remove user\n\t\tif (! $error)\n\t\t{\n\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user WHERE rowid = \".$this->id;\n\t\t   \tdol_syslog(get_class($this).\"::delete\", LOG_DEBUG);\n\t\t   \tif (! $this->db->query($sql))\n\t\t   \t{\n\t\t   \t\t$error++;\n\t\t   \t\t$this->error = $this->db->lasterror();\n\t\t   \t}\n\t\t}\n\n\t\tif (! $error)\n\t\t{\n\t\t\t// Call trigger\n\t\t\t$result=$this->call_trigger('USER_DELETE',$user);\n\t\t\tif ($result < 0)\n\t\t\t{\n\t\t\t\t$error++;\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t// End call triggers\n\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Create a user into database\n\t *\n\t *  @param\tUser\t$user        \tObjet user doing creation\n\t *  @param  int\t\t$notrigger\t\t1=do not execute triggers, 0 otherwise\n\t *  @return int\t\t\t         \t<0 if KO, id of created user if OK\n\t */\n\tfunction create($user, $notrigger=0)\n\t{\n\t\tglobal $conf,$langs;\n\t\tglobal $mysoc;\n\n\t\t// Clean parameters\n\t\t$this->login = trim($this->login);\n\t\tif (! isset($this->entity)) $this->entity=$conf->entity;\t// If not defined, we use default value\n\n\t\tdol_syslog(get_class($this).\"::create login=\".$this->login.\", user=\".(is_object($user)?$user->id:''), LOG_DEBUG);\n\n\t\t// Check parameters\n\t\tif (! empty($conf->global->USER_MAIL_REQUIRED) && ! isValidEMail($this->email))\n\t\t{\n\t\t\t$langs->load(\"errors\");\n\t\t\t$this->error = $langs->trans(\"ErrorBadEMail\",$this->email);\n\t\t\treturn -1;\n\t\t}\n\t\tif (empty($this->login))\n\t\t{\n\t\t\t$langs->load(\"errors\");\n\t\t\t$this->error = $langs->trans(\"ErrorFieldRequired\",$langs->transnoentitiesnoconv(\"Login\"));\n\t\t\treturn -1;\n\t\t}\n\n\t\t$this->datec = dol_now();\n\n\t\t$error=0;\n\t\t$this->db->begin();\n\n\t\t$sql = \"SELECT login FROM \".MAIN_DB_PREFIX.\"user\";\n\t\t$sql.= \" WHERE login ='\".$this->db->escape($this->login).\"'\";\n\t\t$sql.= \" AND entity IN (0,\".$this->db->escape($conf->entity).\")\";\n\n\t\tdol_syslog(get_class($this).\"::create\", LOG_DEBUG);\n\t\t$resql=$this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t$this->db->free($resql);\n\n\t\t\tif ($num)\n\t\t\t{\n\t\t\t\t$this->error = 'ErrorLoginAlreadyExists';\n\t\t\t\tdol_syslog(get_class($this).\"::create \".$this->error, LOG_WARNING);\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -6;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"user (datec,login,ldap_sid,entity)\";\n\t\t\t\t$sql.= \" VALUES('\".$this->db->idate($this->datec).\"','\".$this->db->escape($this->login).\"','\".$this->db->escape($this->ldap_sid).\"',\".$this->db->escape($this->entity).\")\";\n\t\t\t\t$result=$this->db->query($sql);\n\n\t\t\t\tdol_syslog(get_class($this).\"::create\", LOG_DEBUG);\n\t\t\t\tif ($result)\n\t\t\t\t{\n\t\t\t\t\t$this->id = $this->db->last_insert_id(MAIN_DB_PREFIX.\"user\");\n\n\t\t\t\t\t// Set default rights\n\t\t\t\t\tif ($this->set_default_rights() < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->error='ErrorFailedToSetDefaultRightOfUser';\n\t\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\t\treturn -5;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update minor fields\n\t\t\t\t\t$result = $this->update($user,1,1);\n\t\t\t\t\tif ($result < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\t\treturn -4;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (! empty($conf->global->STOCK_USERSTOCK_AUTOCREATE))\n\t\t\t\t\t{\n\t\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/product/stock/class/entrepot.class.php';\n\t\t\t\t\t\t$langs->load(\"stocks\");\n\t\t\t\t\t\t$entrepot = new Entrepot($this->db);\n\t\t\t\t\t\t$entrepot->libelle = $langs->trans(\"PersonalStock\",$this->getFullName($langs));\n\t\t\t\t\t\t$entrepot->description = $langs->trans(\"ThisWarehouseIsPersonalStock\",$this->getFullName($langs));\n\t\t\t\t\t\t$entrepot->statut = 1;\n\t\t\t\t\t\t$entrepot->country_id = $mysoc->country_id;\n\t\t\t\t\t\t$entrepot->create($user);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (! $notrigger)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Call trigger\n\t\t\t\t\t\t$result=$this->call_trigger('USER_CREATE',$user);\n\t\t\t\t\t\tif ($result < 0) { $error++; }\n\t\t\t\t\t\t// End call triggers\n\t\t\t\t\t}\n\n\t\t\t\t\tif (! $error)\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->db->commit();\n\t\t\t\t\t\treturn $this->id;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t//$this->error=$interface->error;\n\t\t\t\t\t\tdol_syslog(get_class($this).\"::create \".$this->error, LOG_ERR);\n\t\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\t\treturn -3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->error=$this->db->lasterror();\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Create a user from a contact object. User will be internal but if contact is linked to a third party, user will be external\n\t *\n\t *  @param\tContact\t$contact    Object for source contact\n\t * \t@param  string\t$login      Login to force\n\t *  @param  string\t$password   Password to force\n\t *  @return int \t\t\t\t<0 if error, if OK returns id of created user\n\t */\n\tfunction create_from_contact($contact,$login='',$password='')\n\t{\n\t\tglobal $conf,$user,$langs;\n\n\t\t$error=0;\n\n\t\t// Define parameters\n\t\t$this->admin\t\t= 0;\n\t\t$this->lastname\t\t= $contact->lastname;\n\t\t$this->firstname\t= $contact->firstname;\n\t\t$this->gender\t\t= $contact->gender;\n\t\t$this->email\t\t= $contact->email;\n\t\t$this->skype \t\t= $contact->skype;\n\t\t$this->office_phone\t= $contact->phone_pro;\n\t\t$this->office_fax\t= $contact->fax;\n\t\t$this->user_mobile\t= $contact->phone_mobile;\n\t\t$this->address      = $contact->address;\n\t\t$this->zip          = $contact->zip;\n\t\t$this->town         = $contact->town;\n\t\t$this->state_id     = $contact->state_id;\n\t\t$this->country_id   = $contact->country_id;\n\t\t$this->employee     = 0;\n\n\t\tif (empty($login)) $login=strtolower(substr($contact->firstname, 0, 4)) . strtolower(substr($contact->lastname, 0, 4));\n\t\t$this->login = $login;\n\n\t\t$this->db->begin();\n\n\t\t// Cree et positionne $this->id\n\t\t$result=$this->create($user);\n\t\tif ($result > 0)\n\t\t{\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t$sql.= \" SET fk_socpeople=\".$contact->id;\n\t\t\tif ($contact->socid) $sql.=\", fk_soc=\".$contact->socid;\n\t\t\t$sql.= \" WHERE rowid=\".$this->id;\n\t\t\t$resql=$this->db->query($sql);\n\n\t\t\tdol_syslog(get_class($this).\"::create_from_contact\", LOG_DEBUG);\n\t\t\tif ($resql)\n\t\t\t{\n\t\t\t\t$this->context['createfromcontact']='createfromcontact';\n\n\t\t\t\t// Call trigger\n\t\t\t\t$result=$this->call_trigger('USER_CREATE',$user);\n\t\t\t\tif ($result < 0) { $error++; $this->db->rollback(); return -1; }\n\t\t\t\t// End call triggers\n\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn $this->id;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->error=$this->db->error();\n\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// $this->error deja positionne\n\t\t\tdol_syslog(get_class($this).\"::create_from_contact - 0\");\n\n\t\t\t$this->db->rollback();\n\t\t\treturn $result;\n\t\t}\n\n\t}\n\n\t/**\n\t *  Create a user into database from a member object\n\t *\n\t *  @param\tAdherent\t$member\t\tObject member source\n\t * \t@param\tstring\t\t$login\t\tLogin to force\n\t *  @return int\t\t\t\t\t\t<0 if KO, if OK, return id of created account\n\t */\n\tfunction create_from_member($member,$login='')\n\t{\n\t\tglobal $conf,$user,$langs;\n\n\t\t// Positionne parametres\n\t\t$this->admin = 0;\n\t\t$this->lastname     = $member->lastname;\n\t\t$this->firstname    = $member->firstname;\n\t\t$this->gender\t\t= $member->gender;\n\t\t$this->email        = $member->email;\n\t\t$this->fk_member    = $member->id;\n\t\t$this->pass         = $member->pass;\n\t\t$this->address      = $member->address;\n\t\t$this->zip          = $member->zip;\n\t\t$this->town         = $member->town;\n\t\t$this->state_id     = $member->state_id;\n\t\t$this->country_id   = $member->country_id;\n\n\t\tif (empty($login)) $login=strtolower(substr($member->firstname, 0, 4)) . strtolower(substr($member->lastname, 0, 4));\n\t\t$this->login = $login;\n\n\t\t$this->db->begin();\n\n\t\t// Create and set $this->id\n\t\t$result=$this->create($user);\n\t\tif ($result > 0)\n\t\t{\n\t\t\t$newpass=$this->setPassword($user,$this->pass);\n\t\t\tif (is_numeric($newpass) && $newpass < 0) $result=-2;\n\n\t\t\tif ($result > 0 && $member->fk_soc)\t// If member is linked to a thirdparty\n\t\t\t{\n\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t\t$sql.= \" SET fk_soc=\".$member->fk_soc;\n\t\t\t\t$sql.= \" WHERE rowid=\".$this->id;\n\n\t\t\t\tdol_syslog(get_class($this).\"::create_from_member\", LOG_DEBUG);\n\t\t\t\t$resql=$this->db->query($sql);\n\t\t\t\tif ($resql)\n\t\t\t\t{\n\t\t\t\t\t$this->db->commit();\n\t\t\t\t\treturn $this->id;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->error=$this->db->lasterror();\n\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($result > 0)\n\t\t{\n\t\t\t$this->db->commit();\n\t\t\treturn $this->id;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// $this->error deja positionne\n\t\t\t$this->db->rollback();\n\t\t\treturn -2;\n\t\t}\n\t}\n\n\t/**\n\t *    Assign rights by default\n\t *\n\t *    @return     integer erreur <0, si ok renvoi le nbre de droits par defaut positionnes\n\t */\n\tfunction set_default_rights()\n\t{\n\t\tglobal $conf;\n\n\t\t$sql = \"SELECT id FROM \".MAIN_DB_PREFIX.\"rights_def\";\n\t\t$sql.= \" WHERE bydefault = 1\";\n\t\t$sql.= \" AND entity = \".$conf->entity;\n\n\t\t$resql=$this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t$i = 0;\n\t\t\t$rd = array();\n\t\t\twhile ($i < $num)\n\t\t\t{\n\t\t\t\t$row = $this->db->fetch_row($resql);\n\t\t\t\t$rd[$i] = $row[0];\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->db->free($resql);\n\t\t}\n\t\t$i = 0;\n\t\twhile ($i < $num)\n\t\t{\n\n\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_rights WHERE fk_user = $this->id AND fk_id=$rd[$i]\";\n\t\t\t$result=$this->db->query($sql);\n\n\t\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"user_rights (fk_user, fk_id) VALUES ($this->id, $rd[$i])\";\n\t\t\t$result=$this->db->query($sql);\n\t\t\tif (! $result) return -1;\n\t\t\t$i++;\n\t\t}\n\n\t\treturn $i;\n\t}\n\n\t/**\n\t *  \tUpdate a user into database (and also password if this->pass is defined)\n\t *\n\t *\t\t@param\tUser\t$user\t\t\t\tUser qui fait la mise a jour\n\t *    \t@param  int\t\t$notrigger\t\t\t1 ne declenche pas les triggers, 0 sinon\n\t *\t\t@param\tint\t\t$nosyncmember\t\t0=Synchronize linked member (standard info), 1=Do not synchronize linked member\n\t *\t\t@param\tint\t\t$nosyncmemberpass\t0=Synchronize linked member (password), 1=Do not synchronize linked member\n\t *\t\t@param\tint\t\t$nosynccontact\t\t0=Synchronize linked contact, 1=Do not synchronize linked contact\n\t *    \t@return int \t\t        \t\t<0 si KO, >=0 si OK\n\t */\n\tfunction update($user, $notrigger=0, $nosyncmember=0, $nosyncmemberpass=0, $nosynccontact=0)\n\t{\n\t\tglobal $conf, $langs;\n\n\t\t$nbrowsaffected=0;\n\t\t$error=0;\n\n\t\tdol_syslog(get_class($this).\"::update notrigger=\".$notrigger.\", nosyncmember=\".$nosyncmember.\", nosyncmemberpass=\".$nosyncmemberpass);\n\n\t\t// Clean parameters\n\t\t$this->lastname     = trim($this->lastname);\n\t\t$this->firstname    = trim($this->firstname);\n\t\t$this->employee    \t= $this->employee?$this->employee:0;\n\t\t$this->login        = trim($this->login);\n\t\t$this->gender       = trim($this->gender);\n\t\t$this->birth        = trim($this->birth);\n\t\t$this->pass         = trim($this->pass);\n\t\t$this->api_key      = trim($this->api_key);\n\t\t$this->address\t\t= $this->address?trim($this->address):trim($this->address);\n\t\t$this->zip\t\t\t= $this->zip?trim($this->zip):trim($this->zip);\n\t\t$this->town\t\t\t= $this->town?trim($this->town):trim($this->town);\n\t\t$this->state_id\t\t= trim($this->state_id);\n\t\t$this->country_id\t= ($this->country_id > 0)?$this->country_id:0;\n\t\t$this->office_phone = trim($this->office_phone);\n\t\t$this->office_fax   = trim($this->office_fax);\n\t\t$this->user_mobile  = trim($this->user_mobile);\n\t\t$this->email        = trim($this->email);\n\t\t$this->skype        = trim($this->skype);\n\t\t$this->job    \t\t= trim($this->job);\n\t\t$this->signature    = trim($this->signature);\n\t\t$this->note         = trim($this->note);\n\t\t$this->openid       = trim(empty($this->openid)?'':$this->openid);    // Avoid warning\n\t\t$this->admin        = $this->admin?$this->admin:0;\n\t\t$this->address\t\t= empty($this->address)?'':$this->address;\n\t\t$this->zip\t\t\t= empty($this->zip)?'':$this->zip;\n\t\t$this->town\t\t\t= empty($this->town)?'':$this->town;\n\t\t$this->accountancy_code = trim($this->accountancy_code);\n\t\t$this->color \t\t= empty($this->color)?'':$this->color;\n\t\t$this->dateemployment \t= empty($this->dateemployment)?'':$this->dateemployment;\n\n\t\t// Check parameters\n\t\tif (! empty($conf->global->USER_MAIL_REQUIRED) && ! isValidEMail($this->email))\n\t\t{\n\t\t\t$langs->load(\"errors\");\n\t\t\t$this->error = $langs->trans(\"ErrorBadEMail\",$this->email);\n\t\t\treturn -1;\n\t\t}\n\t\tif (empty($this->login))\n\t\t{\n\t\t\t$langs->load(\"errors\");\n\t\t\t$this->error = $langs->trans(\"ErrorFieldRequired\",$this->login);\n\t\t\treturn -1;\n\t\t}\n\n\t\t$this->db->begin();\n\n\t\t// Update datas\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user SET\";\n\t\t$sql.= \" lastname = '\".$this->db->escape($this->lastname).\"'\";\n\t\t$sql.= \", firstname = '\".$this->db->escape($this->firstname).\"'\";\n\t\t$sql.= \", employee = \".(int) $this->employee;\n\t\t$sql.= \", login = '\".$this->db->escape($this->login).\"'\";\n\t\t$sql.= \", api_key = \".($this->api_key ? \"'\".$this->db->escape($this->api_key).\"'\" : \"null\");\n\t\t$sql.= \", gender = \".($this->gender != -1 ? \"'\".$this->db->escape($this->gender).\"'\" : \"null\");\t// 'man' or 'woman'\n\t\t$sql.= \", birth=\".(strval($this->birth)!='' ? \"'\".$this->db->idate($this->birth).\"'\" : 'null');\n\t\tif (! empty($user->admin)) $sql.= \", admin = \".(int) $this->admin;\t// admin flag can be set/unset only by an admin user\n\t\t$sql.= \", address = '\".$this->db->escape($this->address).\"'\";\n\t\t$sql.= \", zip = '\".$this->db->escape($this->zip).\"'\";\n\t\t$sql.= \", town = '\".$this->db->escape($this->town).\"'\";\n\t\t$sql.= \", fk_state = \".((! empty($this->state_id) && $this->state_id > 0)?\"'\".$this->db->escape($this->state_id).\"'\":\"null\");\n\t\t$sql.= \", fk_country = \".((! empty($this->country_id) && $this->country_id > 0)?\"'\".$this->db->escape($this->country_id).\"'\":\"null\");\n\t\t$sql.= \", office_phone = '\".$this->db->escape($this->office_phone).\"'\";\n\t\t$sql.= \", office_fax = '\".$this->db->escape($this->office_fax).\"'\";\n\t\t$sql.= \", user_mobile = '\".$this->db->escape($this->user_mobile).\"'\";\n\t\t$sql.= \", email = '\".$this->db->escape($this->email).\"'\";\n\t\t$sql.= \", skype = '\".$this->db->escape($this->skype).\"'\";\n\t\t$sql.= \", job = '\".$this->db->escape($this->job).\"'\";\n\t\t$sql.= \", signature = '\".$this->db->escape($this->signature).\"'\";\n\t\t$sql.= \", accountancy_code = '\".$this->db->escape($this->accountancy_code).\"'\";\n\t\t$sql.= \", color = '\".$this->db->escape($this->color).\"'\";\n\t\t$sql.= \", dateemployment=\".(strval($this->dateemployment)!='' ? \"'\".$this->db->idate($this->dateemployment).\"'\" : 'null');\n\t\t$sql.= \", note = '\".$this->db->escape($this->note).\"'\";\n\t\t$sql.= \", photo = \".($this->photo?\"'\".$this->db->escape($this->photo).\"'\":\"null\");\n\t\t$sql.= \", openid = \".($this->openid?\"'\".$this->db->escape($this->openid).\"'\":\"null\");\n\t\t$sql.= \", fk_user = \".($this->fk_user > 0?\"'\".$this->db->escape($this->fk_user).\"'\":\"null\");\n\t\tif (isset($this->thm) || $this->thm != '')                 $sql.= \", thm= \".($this->thm != ''?\"'\".$this->db->escape($this->thm).\"'\":\"null\");\n\t\tif (isset($this->tjm) || $this->tjm != '')                 $sql.= \", tjm= \".($this->tjm != ''?\"'\".$this->db->escape($this->tjm).\"'\":\"null\");\n\t\tif (isset($this->salary) || $this->salary != '')           $sql.= \", salary= \".($this->salary != ''?\"'\".$this->db->escape($this->salary).\"'\":\"null\");\n\t\tif (isset($this->salaryextra) || $this->salaryextra != '') $sql.= \", salaryextra= \".($this->salaryextra != ''?\"'\".$this->db->escape($this->salaryextra).\"'\":\"null\");\n\t\t$sql.= \", weeklyhours= \".($this->weeklyhours != ''?\"'\".$this->db->escape($this->weeklyhours).\"'\":\"null\");\n\t\t$sql.= \", entity = '\".$this->db->escape($this->entity).\"'\";\n\t\t$sql.= \", default_range = \".($this->default_range > 0 ? $this->default_range : 'null');\n\t\t$sql.= \", default_c_exp_tax_cat = \".($this->default_c_exp_tax_cat > 0 ? $this->default_c_exp_tax_cat : 'null');\n\n\t\t$sql.= \" WHERE rowid = \".$this->id;\n\n\t\tdol_syslog(get_class($this).\"::update\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$nbrowsaffected+=$this->db->affected_rows($resql);\n\n\t\t\t// Update password\n\t\t\tif (!empty($this->pass))\n\t\t\t{\n\t\t\t\tif ($this->pass != $this->pass_indatabase && $this->pass != $this->pass_indatabase_crypted)\n\t\t\t\t{\n\t\t\t\t\t// Si mot de passe saisi et different de celui en base\n\t\t\t\t\t$result=$this->setPassword($user,$this->pass,0,$notrigger,$nosyncmemberpass);\n\t\t\t\t\tif (! $nbrowsaffected) $nbrowsaffected++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If user is linked to a member, remove old link to this member\n\t\t\tif ($this->fk_member > 0)\n\t\t\t{\n\t\t\t\tdol_syslog(get_class($this).\"::update remove link with member. We will recreate it later\", LOG_DEBUG);\n\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user SET fk_member = NULL where fk_member = \".$this->fk_member;\n\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\tif (! $resql) { $this->error=$this->db->error(); $this->db->rollback(); return -5; }\n\t\t\t}\n\t\t\t// Set link to user\n\t\t\tdol_syslog(get_class($this).\"::update set link with member\", LOG_DEBUG);\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user SET fk_member =\".($this->fk_member>0?$this->fk_member:'null').\" where rowid = \".$this->id;\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif (! $resql) { $this->error=$this->db->error(); $this->db->rollback(); return -5; }\n\n\t\t\tif ($nbrowsaffected)\t// If something has changed in data\n\t\t\t{\n\t\t\t\tif ($this->fk_member > 0 && ! $nosyncmember)\n\t\t\t\t{\n\t\t\t\t\tdol_syslog(get_class($this).\"::update user is linked with a member. We try to update member too.\", LOG_DEBUG);\n\n\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/adherents/class/adherent.class.php';\n\n\t\t\t\t\t// This user is linked with a member, so we also update member information\n\t\t\t\t\t// if this is an update.\n\t\t\t\t\t$adh=new Adherent($this->db);\n\t\t\t\t\t$result=$adh->fetch($this->fk_member);\n\n\t\t\t\t\tif ($result >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$adh->firstname=$this->firstname;\n\t\t\t\t\t\t$adh->lastname=$this->lastname;\n\t\t\t\t\t\t$adh->login=$this->login;\n\t\t\t\t\t\t$adh->gender=$this->gender;\n\t\t\t\t\t\t$adh->birth=$this->birth;\n\n\t\t\t\t\t\t$adh->pass=$this->pass;\n\n\t\t\t\t\t\t$adh->societe=(empty($adh->societe) && $this->societe_id ? $this->societe_id : $adh->societe);\n\n\t\t\t\t\t\t$adh->address=$this->address;\n\t\t\t\t\t\t$adh->town=$this->town;\n\t\t\t\t\t\t$adh->zip=$this->zip;\n\t\t\t\t\t\t$adh->state_id=$this->state_id;\n\t\t\t\t\t\t$adh->country_id=$this->country_id;\n\n\t\t\t\t\t\t$adh->email=$this->email;\n\t\t\t\t\t\t$adh->skype=$this->skype;\n\t\t\t\t\t\t$adh->phone=$this->office_phone;\n\t\t\t\t\t\t$adh->phone_mobile=$this->user_mobile;\n\n\t\t\t\t\t\t$adh->user_id=$this->id;\n\t\t\t\t\t\t$adh->user_login=$this->login;\n\n\t\t\t\t\t\t$result=$adh->update($user,0,1,0);\n\t\t\t\t\t\tif ($result < 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->error=$adh->error;\n\t\t\t\t\t\t\t$this->errors=$adh->errors;\n\t\t\t\t\t\t\tdol_syslog(get_class($this).\"::update error after calling adh->update to sync it with user: \".$this->error, LOG_ERR);\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->error=$adh->error;\n\t\t\t\t\t\t$this->errors=$adh->errors;\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ($this->contact_id > 0 && ! $nosynccontact)\n\t\t\t\t{\n\t\t\t\t\tdol_syslog(get_class($this).\"::update user is linked with a contact. We try to update contact too.\", LOG_DEBUG);\n\n\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/contact/class/contact.class.php';\n\n\t\t\t\t\t// This user is linked with a contact, so we also update contact information\n\t\t\t\t\t// if this is an update.\n\t\t\t\t\t$tmpobj=new Contact($this->db);\n\t\t\t\t\t$result=$tmpobj->fetch($this->contact_id);\n\n\t\t\t\t\tif ($result >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$tmpobj->firstname=$this->firstname;\n\t\t\t\t\t\t$tmpobj->lastname=$this->lastname;\n\t\t\t\t\t\t$tmpobj->login=$this->login;\n\t\t\t\t\t\t$tmpobj->gender=$this->gender;\n\t\t\t\t\t\t$tmpobj->birth=$this->birth;\n\n\t\t\t\t\t\t//$tmpobj->pass=$this->pass;\n\n\t\t\t\t\t\t//$tmpobj->societe=(empty($tmpobj->societe) && $this->societe_id ? $this->societe_id : $tmpobj->societe);\n\n\t\t\t\t\t\t$tmpobj->email=$this->email;\n\t\t\t\t\t\t$tmpobj->skype=$this->skype;\n\t\t\t\t\t\t$tmpobj->phone_pro=$this->office_phone;\n\t\t\t\t\t\t$tmpobj->phone_mobile=$this->user_mobile;\n\t\t\t\t\t\t$tmpobj->fax=$this->office_fax;\n\n\t\t\t\t\t\t$tmpobj->address=$this->address;\n\t\t\t\t\t\t$tmpobj->town=$this->town;\n\t\t\t\t\t\t$tmpobj->zip=$this->zip;\n\t\t\t\t\t\t$tmpobj->state_id=$this->state_id;\n\t\t\t\t\t\t$tmpobj->country_id=$this->country_id;\n\n\t\t\t\t\t\t$tmpobj->user_id=$this->id;\n\t\t\t\t\t\t$tmpobj->user_login=$this->login;\n\n\t\t\t\t\t\t$result=$tmpobj->update($tmpobj->id, $user, 0, 'update', 1);\n\t\t\t\t\t\tif ($result < 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->error=$tmpobj->error;\n\t\t\t\t\t\t\t$this->errors=$tmpobj->errors;\n\t\t\t\t\t\t\tdol_syslog(get_class($this).\"::update error after calling adh->update to sync it with user: \".$this->error, LOG_ERR);\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->error=$tmpobj->error;\n\t\t\t\t\t\t$this->errors=$tmpobj->errors;\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$action='update';\n\n\t\t\t// Actions on extra fields\n\t\t\tif (! $error && empty($conf->global->MAIN_EXTRAFIELDS_DISABLED))\n\t\t\t{\n\t\t\t\t$result=$this->insertExtraFields();\n\t\t\t\tif ($result < 0)\n\t\t\t\t{\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (! $error && ! $notrigger)\n\t\t\t{\n\t\t\t\t// Call trigger\n\t\t\t\t$result=$this->call_trigger('USER_MODIFY',$user);\n\t\t\t\tif ($result < 0) { $error++; }\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\tif (! $error)\n\t\t\t{\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn $nbrowsaffected;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdol_syslog(get_class($this).\"::update error=\".$this->error,LOG_ERR);\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\t$this->db->rollback();\n\t\t\treturn -2;\n\t\t}\n\n\t}\n\n\t/**\n\t *    Mise a jour en base de la date de derniere connexion d'un utilisateur\n\t *\t  Fonction appelee lors d'une nouvelle connexion\n\t *\n\t *    @return     <0 si echec, >=0 si ok\n\t */\n\tfunction update_last_login_date()\n\t{\n\t\t$now=dol_now();\n\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user SET\";\n\t\t$sql.= \" datepreviouslogin = datelastlogin,\";\n\t\t$sql.= \" datelastlogin = '\".$this->db->idate($now).\"',\";\n\t\t$sql.= \" tms = tms\";    // La date de derniere modif doit changer sauf pour la mise a jour de date de derniere connexion\n\t\t$sql.= \" WHERE rowid = \".$this->id;\n\n\t\tdol_syslog(get_class($this).\"::update_last_login_date user->id=\".$this->id.\" \".$sql, LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$this->datepreviouslogin=$this->datelastlogin;\n\t\t\t$this->datelastlogin=$now;\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror().' sql='.$sql;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Change password of a user\n\t *\n\t *  @param\tUser\t$user             \t\tObject user of user making change\n\t *  @param  string\t$password         \t\tNew password in clear text (to generate if not provided)\n\t *\t@param\tint\t\t$changelater\t\t\t1=Change password only after clicking on confirm email\n\t *\t@param\tint\t\t$notrigger\t\t\t\t1=Does not launch triggers\n\t *\t@param\tint\t\t$nosyncmember\t        Do not synchronize linked member\n\t *  @return string \t\t\t          \t\tIf OK return clear password, 0 if no change, < 0 if error\n\t */\n\tfunction setPassword($user, $password='', $changelater=0, $notrigger=0, $nosyncmember=0)\n\t{\n\t\tglobal $conf, $langs;\n\t\trequire_once DOL_DOCUMENT_ROOT .'/core/lib/security2.lib.php';\n\n\t\t$error=0;\n\n\t\tdol_syslog(get_class($this).\"::setPassword user=\".$user->id.\" password=\".preg_replace('/./i','*',$password).\" changelater=\".$changelater.\" notrigger=\".$notrigger.\" nosyncmember=\".$nosyncmember, LOG_DEBUG);\n\n\t\t// If new password not provided, we generate one\n\t\tif (! $password)\n\t\t{\n\t\t\t$password=getRandomPassword(false);\n\t\t}\n\n\t\t// Crypt password\n\t\t$password_crypted = dol_hash($password);\n\n\t\t// Mise a jour\n\t\tif (! $changelater)\n\t\t{\n\t\t\tif (! is_object($this->oldcopy)) $this->oldcopy = clone $this;\n\n\t\t\t$this->db->begin();\n\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t$sql.= \" SET pass_crypted = '\".$this->db->escape($password_crypted).\"',\";\n\t\t\t$sql.= \" pass_temp = null\";\n\t\t\tif (! empty($conf->global->DATABASE_PWD_ENCRYPTED))\n\t\t\t{\n\t\t\t\t$sql.= \", pass = null\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$sql.= \", pass = '\".$this->db->escape($password).\"'\";\n\t\t\t}\n\t\t\t$sql.= \" WHERE rowid = \".$this->id;\n\n\t\t\tdol_syslog(get_class($this).\"::setPassword\", LOG_DEBUG);\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result)\n\t\t\t{\n\t\t\t\tif ($this->db->affected_rows($result))\n\t\t\t\t{\n\t\t\t\t\t$this->pass=$password;\n\t\t\t\t\t$this->pass_indatabase=$password;\n\t\t\t\t\t$this->pass_indatabase_crypted=$password_crypted;\n\n\t\t\t\t\tif ($this->fk_member && ! $nosyncmember)\n\t\t\t\t\t{\n\t\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/adherents/class/adherent.class.php';\n\n\t\t\t\t\t\t// This user is linked with a member, so we also update members informations\n\t\t\t\t\t\t// if this is an update.\n\t\t\t\t\t\t$adh=new Adherent($this->db);\n\t\t\t\t\t\t$result=$adh->fetch($this->fk_member);\n\n\t\t\t\t\t\tif ($result >= 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$result=$adh->setPassword($user,$this->pass,(empty($conf->global->DATABASE_PWD_ENCRYPTED)?0:1),1);\t// Cryptage non gere dans module adherent\n\t\t\t\t\t\t\tif ($result < 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->error=$adh->error;\n\t\t\t\t\t\t\t\tdol_syslog(get_class($this).\"::setPassword \".$this->error,LOG_ERR);\n\t\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->error=$adh->error;\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tdol_syslog(get_class($this).\"::setPassword notrigger=\".$notrigger.\" error=\".$error,LOG_DEBUG);\n\n\t\t\t\t\tif (! $error && ! $notrigger)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Call trigger\n\t\t\t\t\t\t$result=$this->call_trigger('USER_NEW_PASSWORD',$user);\n\t\t\t\t\t\tif ($result < 0) { $error++; $this->db->rollback(); return -1; }\n\t\t\t\t\t\t// End call triggers\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->db->commit();\n\t\t\t\t\treturn $this->pass;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->db->rollback();\n\t\t\t\tdol_print_error($this->db);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// We store clear password in password temporary field.\n\t\t\t// After receiving confirmation link, we will crypt it and store it in pass_crypted\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t$sql.= \" SET pass_temp = '\".$this->db->escape($password).\"'\";\n\t\t\t$sql.= \" WHERE rowid = \".$this->id;\n\n\t\t\tdol_syslog(get_class($this).\"::setPassword\", LOG_DEBUG);\t// No log\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result)\n\t\t\t{\n\t\t\t\treturn $password;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdol_print_error($this->db);\n\t\t\t\treturn -3;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t *  Send new password by email\n\t *\n\t *  @param\tUser\t$user           Object user that send email\n\t *  @param\tstring\t$password       New password\n\t *\t@param\tint\t\t$changelater\t0=Send clear passwod into email, 1=Change password only after clicking on confirm email. @TODO Add method 2 = Send link to reset password\n\t *  @return int \t\t            < 0 si erreur, > 0 si ok\n\t */\n\tfunction send_password($user, $password='', $changelater=0)\n\t{\n\t\tglobal $conf,$langs;\n\t\tglobal $dolibarr_main_url_root;\n\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/CMailFile.class.php';\n\n\t\t$msgishtml=0;\n\n\t\t// Define $msg\n\t\t$mesg = '';\n\n\t\t$outputlangs=new Translate(\"\",$conf);\n\t\tif (isset($this->conf->MAIN_LANG_DEFAULT)\n\t\t&& $this->conf->MAIN_LANG_DEFAULT != 'auto')\n\t\t{\t// If user has defined its own language (rare because in most cases, auto is used)\n\t\t\t$outputlangs->getDefaultLang($this->conf->MAIN_LANG_DEFAULT);\n\t\t}\n\t\telse\n\t\t{\t// If user has not defined its own language, we used current language\n\t\t\t$outputlangs=$langs;\n\t\t}\n\n\t\t$outputlangs->load(\"main\");\n\t\t$outputlangs->load(\"errors\");\n\t\t$outputlangs->load(\"users\");\n\t\t$outputlangs->load(\"other\");\n\n\t\t$appli=constant('DOL_APPLICATION_TITLE');\n\t\tif (!empty($conf->global->MAIN_APPLICATION_TITLE)) $appli=$conf->global->MAIN_APPLICATION_TITLE;\n\n\t\t$subject = $outputlangs->transnoentitiesnoconv(\"SubjectNewPassword\", $appli);\n\n\t\t// Define $urlwithroot\n\t\t$urlwithouturlroot=preg_replace('/'.preg_quote(DOL_URL_ROOT,'/').'$/i','',trim($dolibarr_main_url_root));\n\t\t$urlwithroot=$urlwithouturlroot.DOL_URL_ROOT;\t\t// This is to use external domain name found into config file\n\n\t\tif (! $changelater)\n\t\t{\n\t\t\t$url = $urlwithroot.'/';\n\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"RequestToResetPasswordReceived\").\".\\n\";\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"NewKeyIs\").\" :\\n\\n\";\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"Login\").\" = \".$this->login.\"\\n\";\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"Password\").\" = \".$password.\"\\n\\n\";\n\t\t\t$mesg.= \"\\n\";\n\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"ClickHereToGoTo\", $appli).': '.$url.\"\\n\\n\";\n\t\t\t$mesg.= \"--\\n\";\n\t\t\t$mesg.= $user->getFullName($outputlangs);\t// Username that make then sending\n\n\t\t\tdol_syslog(get_class($this).\"::send_password changelater is off, url=\".$url);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$url = $urlwithroot.'/user/passwordforgotten.php?action=validatenewpassword&username='.$this->login.\"&passwordhash=\".dol_hash($password);\n\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"RequestToResetPasswordReceived\").\"\\n\";\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"NewKeyWillBe\").\" :\\n\\n\";\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"Login\").\" = \".$this->login.\"\\n\";\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"Password\").\" = \".$password.\"\\n\\n\";\n\t\t\t$mesg.= \"\\n\";\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"YouMustClickToChange\").\" :\\n\";\n\t\t\t$mesg.= $url.\"\\n\\n\";\n\t\t\t$mesg.= $outputlangs->transnoentitiesnoconv(\"ForgetIfNothing\").\"\\n\\n\";\n\n\t\t\tdol_syslog(get_class($this).\"::send_password changelater is on, url=\".$url);\n\t\t}\n\n\t\t$mailfile = new CMailFile(\n\t\t\t$subject,\n\t\t\t$this->email,\n\t\t\t$conf->global->MAIN_MAIL_EMAIL_FROM,\n\t\t\t$mesg,\n\t\t\tarray(),\n\t\t\tarray(),\n\t\t\tarray(),\n\t\t\t'',\n\t\t\t'',\n\t\t\t0,\n\t\t\t$msgishtml\n\t\t);\n\n\t\tif ($mailfile->sendfile())\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$langs->trans(\"errors\");\n\t\t\t$this->error=$langs->trans(\"ErrorFailedToSendPassword\").' '.$mailfile->error;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * \t\tRenvoie la derniere erreur fonctionnelle de manipulation de l'objet\n\t *\n\t * \t\t@return    string      chaine erreur\n\t */\n\tfunction error()\n\t{\n\t\treturn $this->error;\n\t}\n\n\n\t/**\n\t *    \tRead clicktodial information for user\n\t *\n\t * \t\t@return\t\t<0 if KO, >0 if OK\n\t */\n\tfunction fetch_clicktodial()\n\t{\n\t\t$sql = \"SELECT url, login, pass, poste \";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"user_clicktodial as u\";\n\t\t$sql.= \" WHERE u.fk_user = \".$this->id;\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\tif ($this->db->num_rows($resql))\n\t\t\t{\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\t$this->clicktodial_url = $obj->url;\n\t\t\t\t$this->clicktodial_login = $obj->login;\n\t\t\t\t$this->clicktodial_password = $obj->pass;\n\t\t\t\t$this->clicktodial_poste = $obj->poste;\n\t\t\t}\n\n\t\t\t$this->clicktodial_loaded = 1;\t// Data loaded (found or not)\n\n\t\t\t$this->db->free($resql);\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Update clicktodial info\n\t *\n\t *  @return\tinteger\n\t */\n\tfunction update_clicktodial()\n\t{\n\t\t$this->db->begin();\n\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_clicktodial\";\n\t\t$sql .= \" WHERE fk_user = \".$this->id;\n\n\t\tdol_syslog(get_class($this).'::update_clicktodial', LOG_DEBUG);\n\t\t$result = $this->db->query($sql);\n\n\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"user_clicktodial\";\n\t\t$sql .= \" (fk_user,url,login,pass,poste)\";\n\t\t$sql .= \" VALUES (\".$this->id;\n\t\t$sql .= \", '\". $this->db->escape($this->clicktodial_url) .\"'\";\n\t\t$sql .= \", '\". $this->db->escape($this->clicktodial_login) .\"'\";\n\t\t$sql .= \", '\". $this->db->escape($this->clicktodial_password) .\"'\";\n\t\t$sql .= \", '\". $this->db->escape($this->clicktodial_poste) .\"')\";\n\n\t\tdol_syslog(get_class($this).'::update_clicktodial', LOG_DEBUG);\n\t\t$result = $this->db->query($sql);\n\t\tif ($result)\n\t\t{\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->db->rollback();\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Add user into a group\n\t *\n\t *  @param\tint\t$group      Id of group\n\t *  @param  int\t\t$entity     Entity\n\t *  @param  int\t\t$notrigger  Disable triggers\n\t *  @return int  \t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction SetInGroup($group, $entity, $notrigger=0)\n\t{\n\t\tglobal $conf, $langs, $user;\n\n\t\t$error=0;\n\n\t\t$this->db->begin();\n\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"usergroup_user\";\n\t\t$sql.= \" WHERE fk_user  = \".$this->id;\n\t\t$sql.= \" AND fk_usergroup = \".$group;\n\t\t$sql.= \" AND entity = \".$entity;\n\n\t\t$result = $this->db->query($sql);\n\n\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"usergroup_user (entity, fk_user, fk_usergroup)\";\n\t\t$sql.= \" VALUES (\".$entity.\",\".$this->id.\",\".$group.\")\";\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result)\n\t\t{\n\t\t\tif (! $error && ! $notrigger)\n\t\t\t{\n\t\t\t\t$this->newgroupid=$group;    // deprecated. Remove this.\n\t\t\t\t$this->context = array('audit'=>$langs->trans(\"UserSetInGroup\"), 'newgroupid'=>$group);\n\n\t\t\t\t// Call trigger\n\t\t\t\t$result=$this->call_trigger('USER_MODIFY',$user);\n\t\t\t\tif ($result < 0) { $error++; }\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\tif (! $error)\n\t\t\t{\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdol_syslog(get_class($this).\"::SetInGroup \".$this->error, LOG_ERR);\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Remove a user from a group\n\t *\n\t *  @param\tint   $group       Id of group\n\t *  @param  int\t\t$entity      Entity\n\t *  @param  int\t\t$notrigger   Disable triggers\n\t *  @return int  \t\t\t     <0 if KO, >0 if OK\n\t */\n\tfunction RemoveFromGroup($group, $entity, $notrigger=0)\n\t{\n\t\tglobal $conf,$langs,$user;\n\n\t\t$error=0;\n\n\t\t$this->db->begin();\n\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"usergroup_user\";\n\t\t$sql.= \" WHERE fk_user  = \".$this->id;\n\t\t$sql.= \" AND fk_usergroup = \".$group;\n\t\t$sql.= \" AND entity = \".$entity;\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result)\n\t\t{\n\t\t\tif (! $error && ! $notrigger)\n\t\t\t{\n\t\t\t\t$this->oldgroupid=$group;    // deprecated. Remove this.\n\t\t\t\t$this->context = array('audit'=>$langs->trans(\"UserRemovedFromGroup\"), 'oldgroupid'=>$group);\n\n\t\t\t\t// Call trigger\n\t\t\t\t$result=$this->call_trigger('USER_MODIFY',$user);\n\t\t\t\tif ($result < 0) { $error++; }\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\tif (! $error)\n\t\t\t{\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->error=$interface->error;\n\t\t\t\tdol_syslog(get_class($this).\"::RemoveFromGroup \".$this->error, LOG_ERR);\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Return a link with photo\n\t * \tUse this->id,this->photo\n\t *\n\t *\t@param\tint\t\t$width\t\t\tWidth of image\n\t *\t@param\tint\t\t$height\t\t\tHeight of image\n\t *  @param\tstring\t$cssclass\t\tForce a css class\n\t * \t@param\tstring\t$imagesize\t\t'mini', 'small' or '' (original)\n\t *\t@return\tstring\t\t\t\t\tString with URL link\n\t */\n\tfunction getPhotoUrl($width, $height, $cssclass='', $imagesize='')\n\t{\n\t\t$result='';\n\n\t\t$result.='<a href=\"'.DOL_URL_ROOT.'/user/card.php?id='.$this->id.'\">';\n\t\t$result.=Form::showphoto('userphoto', $this, $width, $height, 0, $cssclass, $imagesize);\n\t\t$result.='</a>';\n\n\t\treturn $result;\n\t}\n\n\t/**\n\t *  Return a link to the user card (with optionaly the picto)\n\t * \tUse this->id,this->lastname, this->firstname\n\t *\n\t *\t@param\tint\t\t$withpictoimg\t\t\t\tInclude picto in link (0=No picto, 1=Include picto into link, 2=Only picto, -1=Include photo into link, -2=Only picto photo, -3=Only photo very small)\n\t *\t@param\tstring\t$option\t\t\t\t\t\tOn what the link point to ('leave', 'nolink', )\n\t *  @param  integer $infologin      \t\t\t0=Add default info tooltip, 1=Add complete info tooltip, -1=No info tooltip\n\t *  @param\tinteger\t$notooltip\t\t\t\t\t1=Disable tooltip on picto and name\n\t *  @param\tint\t\t$maxlen\t\t\t\t\t\tMax length of visible user name\n\t *  @param\tint\t\t$hidethirdpartylogo\t\t\tHide logo of thirdparty if user is external user\n\t *  @param  string  $mode               \t\t''=Show firstname and lastname, 'firstname'=Show only firstname, 'login'=Show login\n\t *  @param  string  $morecss            \t\tAdd more css on link\n\t *  @param  int     $save_lastsearch_value    \t-1=Auto, 0=No save of lastsearch_values when clicking, 1=Save lastsearch_values whenclicking\n\t *\t@return\tstring\t\t\t\t\t\t\t\tString with URL\n\t */\n\tfunction getNomUrl($withpictoimg=0, $option='', $infologin=0, $notooltip=0, $maxlen=24, $hidethirdpartylogo=0, $mode='',$morecss='', $save_lastsearch_value=-1)\n\t{\n\t\tglobal $langs, $conf, $db, $hookmanager;\n\t\tglobal $dolibarr_main_authentication, $dolibarr_main_demo;\n\t\tglobal $menumanager;\n\n\t\tif (! empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER) && $withpictoimg) $withpictoimg=0;\n\n\t\t$result=''; $label='';\n\t\t$link=''; $linkstart=''; $linkend='';\n\n\t\tif (! empty($this->photo))\n\t\t{\n\t\t\t$label.= '<div class=\"photointooltip\">';\n\t\t\t$label.= Form::showphoto('userphoto', $this, 0, 60, 0, 'photowithmargin photologintooltip', 'small', 0, 1);\t// Force height to 60 so we total height of tooltip can be calculated and collision can be managed\n\t\t\t$label.= '</div><div style=\"clear: both;\"></div>';\n\t\t}\n\n\t\t// Info Login\n\t\t$label.= '<div class=\"centpercent\">';\n\t\t$label.= '<u>' . $langs->trans(\"User\") . '</u><br>';\n\t\t$label.= '<b>' . $langs->trans('Name') . ':</b> ' . $this->getFullName($langs,'');\n\t\tif (! empty($this->login))\n\t\t\t$label.= '<br><b>' . $langs->trans('Login') . ':</b> ' . $this->login;\n\t\t$label.= '<br><b>' . $langs->trans(\"EMail\").':</b> '.$this->email;\n\t\tif (! empty($this->admin))\n\t\t\t$label.= '<br><b>' . $langs->trans(\"Administrator\").'</b>: '.yn($this->admin);\n\t\tif (! empty($this->socid) )\t// Add thirdparty for external users\n\t\t{\n\t\t\t$thirdpartystatic = new Societe($db);\n\t\t\t$thirdpartystatic->fetch($this->socid);\n\t\t\tif (empty($hidethirdpartylogo)) $companylink = ' '.$thirdpartystatic->getNomUrl(2, (($option == 'nolink')?'nolink':''));\t// picto only of company\n\t\t\t$company=' ('.$langs->trans(\"Company\").': '.$thirdpartystatic->name.')';\n\t\t}\n\t\t$type=($this->socid?$langs->trans(\"External\").$company:$langs->trans(\"Internal\"));\n\t\t$label.= '<br><b>' . $langs->trans(\"Type\") . ':</b> ' . $type;\n\t\t$label.= '<br><b>' . $langs->trans(\"Status\").'</b>: '.$this->getLibStatut(0);\n\t\t$label.='</div>';\n\t\tif ($infologin > 0)\n\t\t{\n\t\t\t$label.= '<br>';\n\t\t\t$label.= '<br><u>'.$langs->trans(\"Connection\").'</u>';\n\t\t\t$label.= '<br><b>'.$langs->trans(\"IPAddress\").'</b>: '.$_SERVER[\"REMOTE_ADDR\"];\n\t\t\tif (! empty($conf->global->MAIN_MODULE_MULTICOMPANY)) $label.= '<br><b>'.$langs->trans(\"ConnectedOnMultiCompany\").':</b> '.$conf->entity.' (user entity '.$this->entity.')';\n\t\t\t$label.= '<br><b>'.$langs->trans(\"AuthenticationMode\").':</b> '.$_SESSION[\"dol_authmode\"].(empty($dolibarr_main_demo)?'':' (demo)');\n\t\t\t$label.= '<br><b>'.$langs->trans(\"ConnectedSince\").':</b> '.dol_print_date($this->datelastlogin,\"dayhour\",'tzuser');\n\t\t\t$label.= '<br><b>'.$langs->trans(\"PreviousConnexion\").':</b> '.dol_print_date($this->datepreviouslogin,\"dayhour\",'tzuser');\n\t\t\t$label.= '<br><b>'.$langs->trans(\"CurrentTheme\").':</b> '.$conf->theme;\n\t\t\t$label.= '<br><b>'.$langs->trans(\"CurrentMenuManager\").':</b> '.$menumanager->name;\n\t\t\t$s=picto_from_langcode($langs->getDefaultLang());\n\t\t\t$label.= '<br><b>'.$langs->trans(\"CurrentUserLanguage\").':</b> '.($s?$s.' ':'').$langs->getDefaultLang();\n\t\t\t$label.= '<br><b>'.$langs->trans(\"Browser\").':</b> '.$conf->browser->name.($conf->browser->version?' '.$conf->browser->version:'').' ('.$_SERVER['HTTP_USER_AGENT'].')';\n\t\t\t$label.= '<br><b>'.$langs->trans(\"Layout\").':</b> '.$conf->browser->layout;\n\t\t\t$label.= '<br><b>'.$langs->trans(\"Screen\").':</b> '.$_SESSION['dol_screenwidth'].' x '.$_SESSION['dol_screenheight'];\n\t\t\tif (! empty($conf->browser->phone)) $label.= '<br><b>'.$langs->trans(\"Phone\").':</b> '.$conf->browser->phone;\n\t\t\tif (! empty($_SESSION[\"disablemodules\"])) $label.= '<br><b>'.$langs->trans(\"DisabledModules\").':</b> <br>'.join(', ',explode(',',$_SESSION[\"disablemodules\"]));\n\t\t}\n\t\tif ($infologin < 0) $label='';\n\n\t\t$url = DOL_URL_ROOT.'/user/card.php?id='.$this->id;\n\t\tif ($option == 'leave') $url = DOL_URL_ROOT.'/holiday/list.php?id='.$this->id;\n\n\t\tif ($option != 'nolink')\n\t\t{\n\t\t\t// Add param to save lastsearch_values or not\n\t\t\t$add_save_lastsearch_values=($save_lastsearch_value == 1 ? 1 : 0);\n\t\t\tif ($save_lastsearch_value == -1 && preg_match('/list\\.php/',$_SERVER[\"PHP_SELF\"])) $add_save_lastsearch_values=1;\n\t\t\tif ($add_save_lastsearch_values) $url.='&save_lastsearch_values=1';\n\t\t}\n\n\t\t$linkstart='<a href=\"'.$url.'\"';\n\t\t$linkclose=\"\";\n\t\tif (empty($notooltip))\n\t\t{\n\t\t\tif (! empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER))\n\t\t\t{\n\t\t\t\t$langs->load(\"users\");\n\t\t\t\t$label=$langs->trans(\"ShowUser\");\n\t\t\t\t$linkclose.=' alt=\"'.dol_escape_htmltag($label, 1).'\"';\n\t\t\t}\n\t\t\t$linkclose.= ' title=\"'.dol_escape_htmltag($label, 1).'\"';\n\t\t\t$linkclose.= ' class=\"classfortooltip'.($morecss?' '.$morecss:'').'\"';\n\n\t\t\t/*\n\t\t\t $hookmanager->initHooks(array('userdao'));\n\t\t\t $parameters=array('id'=>$this->id);\n\t\t\t $reshook=$hookmanager->executeHooks('getnomurltooltip',$parameters,$this,$action);    // Note that $action and $object may have been modified by some hooks\n\t\t\t if ($reshook > 0) $linkclose = $hookmanager->resPrint;\n\t\t\t */\n\t\t}\n\n\t\t$linkstart.=$linkclose.'>';\n\t\t$linkend='</a>';\n\n\t\t//if ($withpictoimg == -1) $result.='<div class=\"nowrap\">';\n\t\t$result.=(($option == 'nolink')?'':$linkstart);\n\t\tif ($withpictoimg)\n\t\t{\n\t\t  \t$paddafterimage='';\n\t\t\tif (abs($withpictoimg) == 1) $paddafterimage='style=\"margin-right: 3px;\"';\n\t\t\t// Only picto\n\t\t\tif ($withpictoimg > 0) $picto='<!-- picto user --><div class=\"inline-block nopadding userimg'.($morecss?' '.$morecss:'').'\">'.img_object('', 'user', $paddafterimage.' '.($notooltip?'':'class=\"classfortooltip\"'), 0, 0, $notooltip?0:1).'</div>';\n\t\t\t// Picto must be a photo\n\t\t\telse $picto='<!-- picto photo user --><div class=\"inline-block nopadding userimg'.($morecss?' '.$morecss:'').'\"'.($paddafterimage?' '.$paddafterimage:'').'>'.Form::showphoto('userphoto', $this, 0, 0, 0, 'userphoto'.($withpictoimg==-3?'small':''), 'mini', 0, 1).'</div>';\n\t\t\t$result.=$picto;\n\t\t}\n\t\tif ($withpictoimg > -2 && $withpictoimg != 2)\n\t\t{\n\t\t\tif (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) $result.='<div class=\"inline-block nopadding valignmiddle usertext'.((! isset($this->statut) || $this->statut)?'':' strikefordisabled').($morecss?' '.$morecss:'').'\">';\n\t\t\tif ($mode == 'login') $result.=dol_trunc($this->login, $maxlen);\n\t\t\telse $result.=$this->getFullName($langs,'',($mode == 'firstname' ? 2 : -1),$maxlen);\n\t\t\tif (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) $result.='</div>';\n\t\t}\n\t\t$result.=(($option == 'nolink')?'':$linkend);\n\t\t//if ($withpictoimg == -1) $result.='</div>';\n\n\t\t$result.=$companylink;\n\n\t\tglobal $action;\n\t\t$hookmanager->initHooks(array('userdao'));\n\t\t$parameters=array('id'=>$this->id, 'getnomurl'=>$result);\n\t\t$reshook=$hookmanager->executeHooks('getNomUrl',$parameters,$this,$action);    // Note that $action and $object may have been modified by some hooks\n\t\tif ($reshook > 0) $result = $hookmanager->resPrint;\n\t\telse $result .= $hookmanager->resPrint;\n\n\t\treturn $result;\n\t}\n\n\t/**\n\t *  Return clickable link of login (eventualy with picto)\n\t *\n\t *\t@param\tint\t\t$withpicto\t\tInclude picto into link\n\t *\t@param\tstring\t$option\t\t\tSur quoi pointe le lien\n\t *\t@return\tstring\t\t\t\t\tChaine avec URL\n\t */\n\tfunction getLoginUrl($withpicto=0,$option='')\n\t{\n\t\tglobal $langs;\n\n\t\t$result='';\n\n\t\t$linkstart = '<a href=\"'.DOL_URL_ROOT.'/user/card.php?id='.$this->id.'\">';\n\t\t$linkend='</a>';\n\n\t\tif ($option == 'xxx')\n\t\t{\n\t\t\t$linkstart = '<a href=\"'.DOL_URL_ROOT.'/user/card.php?id='.$this->id.'\">';\n\t\t\t$linkend='</a>';\n\t\t}\n\n\t\t$result.=$linkstart;\n\t\tif ($withpicto) $result.=img_object($langs->trans(\"ShowUser\"), 'user', 'class=\"paddingright\"');\n\t\t$result.=$this->login;\n\t\t$result.=$linkend;\n\t\treturn $result;\n\t}\n\n\t/**\n\t *  Return label of status of user (active, inactive)\n\t *\n\t *  @param\tint\t\t$mode          0=libelle long, 1=libelle court, 2=Picto + Libelle court, 3=Picto, 4=Picto + Libelle long, 5=Libelle court + Picto\n\t *  @return\tstring \t\t\t       Label of status\n\t */\n\tfunction getLibStatut($mode=0)\n\t{\n\t\treturn $this->LibStatut($this->statut,$mode);\n\t}\n\n\t/**\n\t *  Renvoi le libelle d'un statut donne\n\t *\n\t *  @param\tint\t\t$statut        \tId statut\n\t *  @param  int\t\t$mode          \t0=libelle long, 1=libelle court, 2=Picto + Libelle court, 3=Picto, 4=Picto + Libelle long, 5=Libelle court + Picto\n\t *  @return string \t\t\t       \tLabel of status\n\t */\n\tfunction LibStatut($statut,$mode=0)\n\t{\n\t\tglobal $langs;\n\t\t$langs->load('users');\n\n\t\tif ($mode == 0)\n\t\t{\n\t\t\t$prefix='';\n\t\t\tif ($statut == 1) return $langs->trans('Enabled');\n\t\t\tif ($statut == 0) return $langs->trans('Disabled');\n\t\t}\n\t\tif ($mode == 1)\n\t\t{\n\t\t\tif ($statut == 1) return $langs->trans('Enabled');\n\t\t\tif ($statut == 0) return $langs->trans('Disabled');\n\t\t}\n\t\tif ($mode == 2)\n\t\t{\n\t\t\tif ($statut == 1) return img_picto($langs->trans('Enabled'),'statut4','class=\"pictostatus\"').' '.$langs->trans('Enabled');\n\t\t\tif ($statut == 0) return img_picto($langs->trans('Disabled'),'statut5','class=\"pictostatus\"').' '.$langs->trans('Disabled');\n\t\t}\n\t\tif ($mode == 3)\n\t\t{\n\t\t\tif ($statut == 1) return img_picto($langs->trans('Enabled'),'statut4','class=\"pictostatus\"');\n\t\t\tif ($statut == 0) return img_picto($langs->trans('Disabled'),'statut5','class=\"pictostatus\"');\n\t\t}\n\t\tif ($mode == 4)\n\t\t{\n\t\t\tif ($statut == 1) return img_picto($langs->trans('Enabled'),'statut4','class=\"pictostatus\"').' '.$langs->trans('Enabled');\n\t\t\tif ($statut == 0) return img_picto($langs->trans('Disabled'),'statut5','class=\"pictostatus\"').' '.$langs->trans('Disabled');\n\t\t}\n\t\tif ($mode == 5)\n\t\t{\n\t\t\tif ($statut == 1) return $langs->trans('Enabled').' '.img_picto($langs->trans('Enabled'),'statut4','class=\"pictostatus\"');\n\t\t\tif ($statut == 0) return $langs->trans('Disabled').' '.img_picto($langs->trans('Disabled'),'statut5','class=\"pictostatus\"');\n\t\t}\n\t}\n\n\n\t/**\n\t *\tRetourne chaine DN complete dans l'annuaire LDAP pour l'objet\n\t *\n\t *\t@param\tarray\t$info\t\tInfo array loaded by _load_ldap_info\n\t *\t@param\tint\t\t$mode\t\t0=Return full DN (uid=qqq,ou=xxx,dc=aaa,dc=bbb)\n\t *\t\t\t\t\t\t\t\t1=Return parent (ou=xxx,dc=aaa,dc=bbb)\n\t *\t\t\t\t\t\t\t\t2=Return key only (RDN) (uid=qqq)\n\t *\t@return\tstring\t\t\t\tDN\n\t */\n\tfunction _load_ldap_dn($info,$mode=0)\n\t{\n\t\tglobal $conf;\n\t\t$dn='';\n\t\tif ($mode==0) $dn=$conf->global->LDAP_KEY_USERS.\"=\".$info[$conf->global->LDAP_KEY_USERS].\",\".$conf->global->LDAP_USER_DN;\n\t\tif ($mode==1) $dn=$conf->global->LDAP_USER_DN;\n\t\tif ($mode==2) $dn=$conf->global->LDAP_KEY_USERS.\"=\".$info[$conf->global->LDAP_KEY_USERS];\n\t\treturn $dn;\n\t}\n\n\t/**\n\t *\tInitialize the info array (array of LDAP values) that will be used to call LDAP functions\n\t *\n\t *\t@return\t\tarray\t\tTableau info des attributs\n\t */\n\tfunction _load_ldap_info()\n\t{\n\t\tglobal $conf,$langs;\n\n\t\t$info=array();\n\t\t$keymodified=false;\n\n\t\t// Object classes\n\t\t$info[\"objectclass\"]=explode(',',$conf->global->LDAP_USER_OBJECT_CLASS);\n\n\t\t$this->fullname=$this->getFullName($langs);\n\n\t\t// Possible LDAP KEY (constname => varname)\n\t\t$ldapkey = array(\n\t\t\t'LDAP_FIELD_FULLNAME'\t=> 'fullname',\n\t\t\t'LDAP_FIELD_NAME'\t\t=> 'lastname',\n\t\t\t'LDAP_FIELD_FIRSTNAME'\t=> 'firstname',\n\t\t\t'LDAP_FIELD_LOGIN'\t\t=> 'login',\n\t\t\t'LDAP_FIELD_LOGIN_SAMBA'\t=> 'login',\n\t\t\t'LDAP_FIELD_PHONE'\t\t=> 'office_phone',\n\t\t\t'LDAP_FIELD_MOBILE'\t\t=> 'user_mobile',\n\t\t\t'LDAP_FIELD_FAX'\t\t\t=> 'office_fax',\n\t\t\t'LDAP_FIELD_MAIL'\t\t=> 'email',\n\t\t\t'LDAP_FIELD_SID'\t\t\t=> 'ldap_sid',\n\t\t\t'LDAP_FIELD_SKYPE'\t\t=> 'skype'\n\t\t);\n\n\t\t// Champs\n\t\tforeach ($ldapkey as $constname => $varname)\n\t\t{\n\t\t\tif (! empty($this->$varname) && ! empty($conf->global->$constname))\n\t\t\t{\n\t\t\t\t$info[$conf->global->$constname] = $this->$varname;\n\n\t\t\t\t// Check if it is the LDAP key and if its value has been changed\n\t\t\t\tif (! empty($conf->global->LDAP_KEY_USERS) && $conf->global->LDAP_KEY_USERS == $conf->global->$constname)\n\t\t\t\t{\n\t\t\t\t\tif (! empty($this->oldcopy) && $this->$varname != $this->oldcopy->$varname) $keymodified=true; // For check if LDAP key has been modified\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($this->address && ! empty($conf->global->LDAP_FIELD_ADDRESS))\t\t\t$info[$conf->global->LDAP_FIELD_ADDRESS] = $this->address;\n\t\tif ($this->zip && ! empty($conf->global->LDAP_FIELD_ZIP))\t\t\t\t\t$info[$conf->global->LDAP_FIELD_ZIP] = $this->zip;\n\t\tif ($this->town && ! empty($conf->global->LDAP_FIELD_TOWN))\t\t\t\t\t$info[$conf->global->LDAP_FIELD_TOWN] = $this->town;\n\t\tif ($this->note_public && ! empty($conf->global->LDAP_FIELD_DESCRIPTION))\t$info[$conf->global->LDAP_FIELD_DESCRIPTION] = dol_string_nohtmltag($this->note_public, 2);\n\t\tif ($this->socid > 0)\n\t\t{\n\t\t\t$soc = new Societe($this->db);\n\t\t\t$soc->fetch($this->socid);\n\n\t\t\t$info[$conf->global->LDAP_FIELD_COMPANY] = $soc->name;\n\t\t\tif ($soc->client == 1)      $info[\"businessCategory\"] = \"Customers\";\n\t\t\tif ($soc->client == 2)      $info[\"businessCategory\"] = \"Prospects\";\n\t\t\tif ($soc->fournisseur == 1) $info[\"businessCategory\"] = \"Suppliers\";\n\t\t}\n\n\t\t// When password is modified\n\t\tif (! empty($this->pass))\n\t\t{\n\t\t\tif (! empty($conf->global->LDAP_FIELD_PASSWORD))\t\t\t\t$info[$conf->global->LDAP_FIELD_PASSWORD] = $this->pass;\t// this->pass = mot de passe non crypte\n\t\t\tif (! empty($conf->global->LDAP_FIELD_PASSWORD_CRYPTED))\t\t$info[$conf->global->LDAP_FIELD_PASSWORD_CRYPTED] = dol_hash($this->pass, 4); // Create OpenLDAP MD5 password (TODO add type of encryption)\n\t\t}\n\t\t// Set LDAP password if possible\n\t\telse if ($conf->global->LDAP_SERVER_PROTOCOLVERSION !== '3') // If ldap key is modified and LDAPv3 we use ldap_rename function for avoid lose encrypt password\n\t\t{\n\t\t\tif (! empty($conf->global->DATABASE_PWD_ENCRYPTED))\n\t\t\t{\n\t\t\t\t// Just for the default MD5 !\n\t\t\t\tif (empty($conf->global->MAIN_SECURITY_HASH_ALGO))\n\t\t\t\t{\n\t\t\t\t\tif ($this->pass_indatabase_crypted && ! empty($conf->global->LDAP_FIELD_PASSWORD_CRYPTED))\t{\n\t\t\t\t\t\t$info[$conf->global->LDAP_FIELD_PASSWORD_CRYPTED] = dol_hash($this->pass_indatabase_crypted, 5); // Create OpenLDAP MD5 password from Dolibarr MD5 password\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Use $this->pass_indatabase value if exists\n\t\t\telse if (! empty($this->pass_indatabase))\n\t\t\t{\n\t\t\t\tif (! empty($conf->global->LDAP_FIELD_PASSWORD))\t\t\t\t$info[$conf->global->LDAP_FIELD_PASSWORD] = $this->pass_indatabase;\t// $this->pass_indatabase = mot de passe non crypte\n\t\t\t\tif (! empty($conf->global->LDAP_FIELD_PASSWORD_CRYPTED))\t\t$info[$conf->global->LDAP_FIELD_PASSWORD_CRYPTED] = dol_hash($this->pass_indatabase, 4); // md5 for OpenLdap TODO add type of encryption\n\t\t\t}\n\t\t}\n\n\t\tif ($conf->global->LDAP_SERVER_TYPE == 'egroupware')\n\t\t{\n\t\t\t$info[\"objectclass\"][4] = \"phpgwContact\"; // compatibilite egroupware\n\n\t\t\t$info['uidnumber'] = $this->id;\n\n\t\t\t$info['phpgwTz']      = 0;\n\t\t\t$info['phpgwMailType'] = 'INTERNET';\n\t\t\t$info['phpgwMailHomeType'] = 'INTERNET';\n\n\t\t\t$info[\"phpgwContactTypeId\"] = 'n';\n\t\t\t$info[\"phpgwContactCatId\"] = 0;\n\t\t\t$info[\"phpgwContactAccess\"] = \"public\";\n\n\t\t\tif (dol_strlen($this->egroupware_id) == 0)\n\t\t\t{\n\t\t\t\t$this->egroupware_id = 1;\n\t\t\t}\n\n\t\t\t$info[\"phpgwContactOwner\"] = $this->egroupware_id;\n\n\t\t\tif ($this->email) $info[\"rfc822Mailbox\"] = $this->email;\n\t\t\tif ($this->phone_mobile) $info[\"phpgwCellTelephoneNumber\"] = $this->phone_mobile;\n\t\t}\n\n\t\treturn $info;\n\t}\n\n\n\t/**\n\t *  Initialise an instance with random values.\n\t *  Used to build previews or test instances.\n\t *\tid must be 0 if object instance is a specimen.\n\t *\n\t *  @return\tvoid\n\t */\n\tfunction initAsSpecimen()\n\t{\n\t\tglobal $user,$langs;\n\n\t\t$now=dol_now();\n\n\t\t// Initialise parametres\n\t\t$this->id=0;\n\t\t$this->ref = 'SPECIMEN';\n\t\t$this->specimen=1;\n\n\t\t$this->lastname='DOLIBARR';\n\t\t$this->firstname='SPECIMEN';\n\t\t$this->gender='man';\n\t\t$this->note='This is a note';\n\t\t$this->email='email@specimen.com';\n\t\t$this->skype='tom.hanson';\n\t\t$this->office_phone='0999999999';\n\t\t$this->office_fax='0999999998';\n\t\t$this->user_mobile='0999999997';\n\t\t$this->admin=0;\n\t\t$this->login='dolibspec';\n\t\t$this->pass='dolibspec';\n\t\t//$this->pass_indatabase='dolibspec';\t\t\t\t\t\t\t\t\tSet after a fetch\n\t\t//$this->pass_indatabase_crypted='e80ca5a88c892b0aaaf7e154853bccab';\tSet after a fetch\n\t\t$this->datec=$now;\n\t\t$this->datem=$now;\n\n\t\t$this->datelastlogin=$now;\n\t\t$this->datepreviouslogin=$now;\n\t\t$this->statut=1;\n\n\t\t//$this->societe_id = 1;\tFor external users\n\t\t//$this->contact_id = 1;\tFor external users\n\t\t$this->entity = 1;\n\t}\n\n\t/**\n\t *  Load info of user object\n\t *\n\t *  @param  int\t\t$id     Id of user to load\n\t *  @return\tvoid\n\t */\n\tfunction info($id)\n\t{\n\t\t$sql = \"SELECT u.rowid, u.login as ref, u.datec,\";\n\t\t$sql.= \" u.tms as date_modification, u.entity\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"user as u\";\n\t\t$sql.= \" WHERE u.rowid = \".$id;\n\n\t\t$result=$this->db->query($sql);\n\t\tif ($result)\n\t\t{\n\t\t\tif ($this->db->num_rows($result))\n\t\t\t{\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\n\t\t\t\t$this->id = $obj->rowid;\n\n\t\t\t\t$this->ref\t\t\t     = (! $obj->ref) ? $obj->rowid : $obj->ref;\n\t\t\t\t$this->date_creation     = $this->db->jdate($obj->datec);\n\t\t\t\t$this->date_modification = $this->db->jdate($obj->date_modification);\n\t\t\t\t$this->entity            = $obj->entity;\n\t\t\t}\n\n\t\t\t$this->db->free($result);\n\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t}\n\t}\n\n\n\t/**\n\t *    Return number of mass Emailing received by this contacts with its email\n\t *\n\t *    @return       int     Number of EMailings\n\t */\n\tfunction getNbOfEMailings()\n\t{\n\t\t$sql = \"SELECT count(mc.email) as nb\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"mailing_cibles as mc\";\n\t\t$sql.= \" WHERE mc.email = '\".$this->db->escape($this->email).\"'\";\n\t\t$sql.= \" AND mc.statut NOT IN (-1,0)\";      // -1 erreur, 0 non envoye, 1 envoye avec succes\n\n\t\t$resql=$this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t$nb=$obj->nb;\n\n\t\t\t$this->db->free($resql);\n\t\t\treturn $nb;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Return number of existing users\n\t *\n\t *  @param\tstring\t$limitTo\tLimit to '' or 'active'\n\t *  @param\tstring\t$option\t\t'superadmin' = return for entity 0 only\n\t *  @param\tint\t\t$admin\t\tFilter on admin tag\n\t *  @return int  \t\t\t\tNumber of users\n\t */\n\tfunction getNbOfUsers($limitTo, $option='', $admin=-1)\n\t{\n\t\tglobal $conf;\n\n\t\t$sql = \"SELECT count(rowid) as nb\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"user\";\n\t\tif ($option == 'superadmin')\n\t\t{\n\t\t\t$sql.= \" WHERE entity = 0\";\n\t\t\tif ($admin >= 0) $sql.= \" AND admin = \".$admin;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sql.=\" WHERE entity IN (\".getEntity('user',0).\")\";\n\t\t\tif ($limitTo == 'active') $sql.= \" AND statut = 1\";\n\t\t\tif ($admin >= 0) $sql.= \" AND admin = \".$admin;\n\t\t}\n\n\t\t$resql=$this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t$nb=$obj->nb;\n\n\t\t\t$this->db->free($resql);\n\t\t\treturn $nb;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->error=$this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Update user using data from the LDAP\n\t *\n\t *  @param\tldapuser\t$ldapuser\tLadp User\n\t *\n\t *  @return int  \t\t\t\t<0 if KO, >0 if OK\n\t */\n\tfunction update_ldap2dolibarr(&$ldapuser)\n\t{\n\t\t// TODO: Voir pourquoi le update met \u00e0 jour avec toutes les valeurs vide (global $user \u00e9crase ?)\n\t\tglobal $user, $conf;\n\n\t\t$this->firstname=$ldapuser->{$conf->global->LDAP_FIELD_FIRSTNAME};\n\t\t$this->lastname=$ldapuser->{$conf->global->LDAP_FIELD_NAME};\n\t\t$this->login=$ldapuser->{$conf->global->LDAP_FIELD_LOGIN};\n\t\t$this->pass=$ldapuser->{$conf->global->LDAP_FIELD_PASSWORD};\n\t\t$this->pass_indatabase_crypted=$ldapuser->{$conf->global->LDAP_FIELD_PASSWORD_CRYPTED};\n\n\t\t$this->office_phone=$ldapuser->{$conf->global->LDAP_FIELD_PHONE};\n\t\t$this->user_mobile=$ldapuser->{$conf->global->LDAP_FIELD_MOBILE};\n\t\t$this->office_fax=$ldapuser->{$conf->global->LDAP_FIELD_FAX};\n\t\t$this->email=$ldapuser->{$conf->global->LDAP_FIELD_MAIL};\n\t\t$this->skype=$ldapuser->{$conf->global->LDAP_FIELD_SKYPE};\n\t\t$this->ldap_sid=$ldapuser->{$conf->global->LDAP_FIELD_SID};\n\n\t\t$this->job=$ldapuser->{$conf->global->LDAP_FIELD_TITLE};\n\t\t$this->note=$ldapuser->{$conf->global->LDAP_FIELD_DESCRIPTION};\n\n\t\t$result = $this->update($user);\n\n\t\tdol_syslog(get_class($this).\"::update_ldap2dolibarr result=\".$result, LOG_DEBUG);\n\n\t\treturn $result;\n\t}\n\n\n\t/**\n\t * Return and array with all instanciated first level children users of current user\n\t *\n\t * @return\tvoid\n\t * @see getAllChildIds\n\t */\n\tfunction get_children()\n\t{\n\t\t$sql = \"SELECT rowid FROM \".MAIN_DB_PREFIX.\"user\";\n\t\t$sql.= \" WHERE fk_user = \".$this->id;\n\n\t\tdol_syslog(get_class($this).\"::get_children result=\".$result, LOG_DEBUG);\n\t\t$res  = $this->db->query($sql);\n\t\tif ($res)\n\t\t{\n\t\t\t$users = array ();\n\t\t\twhile ($rec = $this->db->fetch_array($res))\n\t\t\t{\n\t\t\t\t$user = new User($this->db);\n\t\t\t\t$user->fetch($rec['rowid']);\n\t\t\t\t$users[] = $user;\n\t\t\t}\n\t\t\treturn $users;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t * \tLoad this->parentof that is array(id_son=>id_parent, ...)\n\t *\n\t *\t@return\t\tint\t\t<0 if KO, >0 if OK\n\t */\n\tprivate function load_parentof()\n\t{\n\t\tglobal $conf;\n\n\t\t$this->parentof=array();\n\n\t\t// Load array[child]=parent\n\t\t$sql = \"SELECT fk_user as id_parent, rowid as id_son\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"user\";\n\t\t$sql.= \" WHERE fk_user <> 0\";\n\t\t$sql.= \" AND entity IN (\".getEntity('user').\")\";\n\n\t\tdol_syslog(get_class($this).\"::load_parentof\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\twhile ($obj= $this->db->fetch_object($resql))\n\t\t\t{\n\t\t\t\t$this->parentof[$obj->id_son]=$obj->id_parent;\n\t\t\t}\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * \tReconstruit l'arborescence hierarchique des users sous la forme d'un tableau\n\t *\tSet and return this->users that is an array sorted according to tree with arrays of:\n\t *\t\t\t\tid = id user\n\t *\t\t\t\tlastname\n\t *\t\t\t\tfirstname\n\t *\t\t\t\tfullname = nom avec chemin complet du user\n\t *\t\t\t\tfullpath = chemin complet compose des id: \"_grandparentid_parentid_id\"\n\t *\n\t *  @param      int\t\t$deleteafterid      Removed all users including the leaf $deleteafterid (and all its child) in user tree.\n\t *  @param\t\tstring\t$filter\t\t\t\tSQL filter on users\n\t *\t@return\t\tarray\t\t      \t\t  \tArray of users $this->users. Note: $this->parentof is also set.\n\t */\n\tfunction get_full_tree($deleteafterid=0, $filter='')\n\t{\n\t\tglobal $conf, $user;\n\t\tglobal $hookmanager;\n\n\t\t// Actions hooked (by external module)\n\t\t$hookmanager->initHooks(array('userdao'));\n\n\t\t$this->users = array();\n\n\t\t// Init this->parentof that is array(id_son=>id_parent, ...)\n\t\t$this->load_parentof();\n\n\t\t// Init $this->users array\n\t\t$sql = \"SELECT DISTINCT u.rowid, u.firstname, u.lastname, u.fk_user, u.fk_soc, u.login, u.email, u.gender, u.admin, u.statut, u.photo, u.entity\";\t// Distinct reduce pb with old tables with duplicates\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"user as u\";\n\t\t// Add fields from hooks\n\t\t$parameters=array();\n\t\t$reshook=$hookmanager->executeHooks('printUserListWhere',$parameters);    // Note that $action and $object may have been modified by hook\n\t\tif ($reshook > 0) {\n\t\t\t$sql.=$hookmanager->resPrint;\n\t\t} else {\n\t\t\t$sql.= \" WHERE u.entity IN (\".getEntity('user').\")\";\n\t\t}\n\t\tif ($filter) $sql.=\" AND \".$filter;\n\n\t\tdol_syslog(get_class($this).\"::get_full_tree get user list\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$i=0;\n\t\t\twhile ($obj = $this->db->fetch_object($resql))\n\t\t\t{\n\t\t\t\t$this->users[$obj->rowid]['rowid'] = $obj->rowid;\n\t\t\t\t$this->users[$obj->rowid]['id'] = $obj->rowid;\n\t\t\t\t$this->users[$obj->rowid]['fk_user'] = $obj->fk_user;\n\t\t\t\t$this->users[$obj->rowid]['fk_soc'] = $obj->fk_soc;\n\t\t\t\t$this->users[$obj->rowid]['firstname'] = $obj->firstname;\n\t\t\t\t$this->users[$obj->rowid]['lastname'] = $obj->lastname;\n\t\t\t\t$this->users[$obj->rowid]['login'] = $obj->login;\n\t\t\t\t$this->users[$obj->rowid]['statut'] = $obj->statut;\n\t\t\t\t$this->users[$obj->rowid]['entity'] = $obj->entity;\n\t\t\t\t$this->users[$obj->rowid]['email'] = $obj->email;\n\t\t\t\t$this->users[$obj->rowid]['gender'] = $obj->gender;\n\t\t\t\t$this->users[$obj->rowid]['admin'] = $obj->admin;\n\t\t\t\t$this->users[$obj->rowid]['photo'] = $obj->photo;\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\n\t\t// We add the fullpath property to each elements of first level (no parent exists)\n\t\tdol_syslog(get_class($this).\"::get_full_tree call to build_path_from_id_user\", LOG_DEBUG);\n\t\tforeach($this->users as $key => $val)\n\t\t{\n\t\t\t$result = $this->build_path_from_id_user($key,0);\t// Process a branch from the root user key (this user has no parent)\n\t\t\tif ($result < 0)\n\t\t\t{\n\t\t\t\t$this->error='ErrorLoopInHierarchy';\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\n\t\t// Exclude leaf including $deleteafterid from tree\n\t\tif ($deleteafterid)\n\t\t{\n\t\t\t//print \"Look to discard user \".$deleteafterid.\"\\n\";\n\t\t\t$keyfilter1='^'.$deleteafterid.'$';\n\t\t\t$keyfilter2='_'.$deleteafterid.'$';\n\t\t\t$keyfilter3='^'.$deleteafterid.'_';\n\t\t\t$keyfilter4='_'.$deleteafterid.'_';\n\t\t\tforeach($this->users as $key => $val)\n\t\t\t{\n\t\t\t\tif (preg_match('/'.$keyfilter1.'/',$val['fullpath']) || preg_match('/'.$keyfilter2.'/',$val['fullpath'])\n\t\t\t\t\t|| preg_match('/'.$keyfilter3.'/',$val['fullpath']) || preg_match('/'.$keyfilter4.'/',$val['fullpath']))\n\t\t\t\t{\n\t\t\t\t\tunset($this->users[$key]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdol_syslog(get_class($this).\"::get_full_tree dol_sort_array\", LOG_DEBUG);\n\t\t$this->users=dol_sort_array($this->users, 'fullname', 'asc', true, false);\n\n\t\t//var_dump($this->users);\n\n\t\treturn $this->users;\n\t}\n\n\t/**\n\t * \tReturn list of all child users id in herarchy (all sublevels).\n\t *  Note: Calling this function also reset full list of users into $this->users.\n\t *\n\t *  @param      int      $addcurrentuser    1=Add also current user id to the list.\n\t *\t@return\t\tarray\t\t      \t\t  \tArray of user id lower than user (all levels under user). This overwrite this->users.\n\t *  @see get_children\n\t */\n\tfunction getAllChildIds($addcurrentuser=0)\n\t{\n\t\t$childids=array();\n\n\t\tif (isset($this->cache_childids[$this->id]))\n\t\t{\n\t\t\t$childids = $this->cache_childids[$this->id];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Init this->users\n\t\t\t$this->get_full_tree();\n\n\t\t\t$idtoscan=$this->id;\n\n\t\t\tdol_syslog(\"Build childid for id = \".$idtoscan);\n\t\t\tforeach($this->users as $id => $val)\n\t\t\t{\n\t\t\t\t//var_dump($val['fullpath']);\n\t\t\t\tif (preg_match('/_'.$idtoscan.'_/', $val['fullpath'])) $childids[$val['id']]=$val['id'];\n\t\t\t}\n\t\t}\n\t\t$this->cache_childids[$this->id] = $childids;\n\n\t\tif ($addcurrentuser) $childids[$this->id]=$this->id;\n\n\t\treturn $childids;\n\t}\n\n\t/**\n\t *\tFor user id_user and its childs available in this->users, define property fullpath and fullname.\n\t *  Function called by get_full_tree().\n\t *\n\t * \t@param\t\tint\t\t$id_user\t\tid_user entry to update\n\t * \t@param\t\tint\t\t$protection\t\tDeep counter to avoid infinite loop (no more required, a protection is added with array useridfound)\n\t *\t@return\t\tint                     < 0 if KO (infinit loop), >= 0 if OK\n\t */\n\tfunction build_path_from_id_user($id_user,$protection=0)\n\t{\n\t\tdol_syslog(get_class($this).\"::build_path_from_id_user id_user=\".$id_user.\" protection=\".$protection, LOG_DEBUG);\n\n\t\tif (! empty($this->users[$id_user]['fullpath']))\n\t\t{\n\t\t\t// Already defined\n\t\t\tdol_syslog(get_class($this).\"::build_path_from_id_user fullpath and fullname already defined\", LOG_WARNING);\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Define fullpath and fullname\n\t\t$this->users[$id_user]['fullpath'] = '_'.$id_user;\n\t\t$this->users[$id_user]['fullname'] = $this->users[$id_user]['lastname'];\n\t\t$i=0; $cursor_user=$id_user;\n\n\t\t$useridfound=array($id_user);\n\t\twhile (! empty($this->parentof[$cursor_user]))\n\t\t{\n\t\t\tif (in_array($this->parentof[$cursor_user], $useridfound))\n\t\t\t{\n\t\t\t\tdol_syslog(\"The hierarchy of user has a recursive loop\", LOG_WARNING);\n\t\t\t\treturn -1;     // Should not happen. Protection against looping hierarchy\n\t\t\t}\n\t\t\t$useridfound[]=$this->parentof[$cursor_user];\n\t\t\t$this->users[$id_user]['fullpath'] = '_'.$this->parentof[$cursor_user].$this->users[$id_user]['fullpath'];\n\t\t\t$this->users[$id_user]['fullname'] = $this->users[$this->parentof[$cursor_user]]['lastname'].' >> '.$this->users[$id_user]['fullname'];\n\t\t\t$i++; $cursor_user=$this->parentof[$cursor_user];\n\t\t}\n\n\t\t// We count number of _ to have level\n\t\t$this->users[$id_user]['level']=dol_strlen(preg_replace('/[^_]/i','',$this->users[$id_user]['fullpath']));\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t * Function used to replace a thirdparty id with another one.\n\t *\n\t * @param DoliDB $db Database handler\n\t * @param int $origin_id Old thirdparty id\n\t * @param int $dest_id New thirdparty id\n\t * @return bool\n\t */\n\tpublic static function replaceThirdparty(DoliDB $db, $origin_id, $dest_id)\n\t{\n\t\t$tables = array(\n\t\t\t'user'\n\t\t);\n\n\t\treturn CommonObject::commonReplaceThirdparty($db, $origin_id, $dest_id, $tables);\n\t}\n\n\n\t/**\n\t *      Charge indicateurs this->nb pour le tableau de bord\n\t *\n\t *      @return     int         <0 if KO, >0 if OK\n\t */\n\tfunction load_state_board()\n\t{\n\t\tglobal $conf;\n\n\t\t$this->nb=array();\n\n\t\t$sql = \"SELECT count(u.rowid) as nb\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"user as u\";\n\t\t$sql.= \" WHERE u.statut > 0\";\n\t\t//$sql.= \" AND employee != 0\";\n\t\t$sql.= \" AND u.entity IN (\".getEntity('user').\")\";\n\n\t\t$resql=$this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\twhile ($obj=$this->db->fetch_object($resql))\n\t\t\t{\n\t\t\t\t$this->nb[\"users\"]=$obj->nb;\n\t\t\t}\n\t\t\t$this->db->free($resql);\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t\t$this->error=$this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Create a document onto disk according to template module.\n\t *\n\t * \t@param\t    string\t\t$modele\t\t\tForce model to use ('' to not force)\n\t * \t@param\t\tTranslate\t$outputlangs\tObject langs to use for output\n\t *  @param      int\t\t\t$hidedetails    Hide details of lines\n\t *  @param      int\t\t\t$hidedesc       Hide description\n\t *  @param      int\t\t\t$hideref        Hide ref\n         *  @param   null|array  $moreparams     Array to provide more information\n\t * \t@return     int         \t\t\t\t0 if KO, 1 if OK\n\t */\n\tpublic function generateDocument($modele, $outputlangs, $hidedetails=0, $hidedesc=0, $hideref=0, $moreparams=null)\n\t{\n\t\tglobal $conf,$user,$langs;\n\n\t\t$langs->load(\"user\");\n\n\t\t// Positionne le modele sur le nom du modele a utiliser\n\t\tif (! dol_strlen($modele))\n\t\t{\n\t\t\tif (! empty($conf->global->USER_ADDON_PDF))\n\t\t\t{\n\t\t\t\t$modele = $conf->global->USER_ADDON_PDF;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$modele = 'bluesky';\n\t\t\t}\n\t\t}\n\n\t\t$modelpath = \"core/modules/user/doc/\";\n\n\t\treturn $this->commonGenerateDocument($modelpath, $modele, $outputlangs, $hidedetails, $hidedesc, $hideref, $moreparams);\n\t}\n\n\t/**\n\t *  Return property of user from its id\n\t *\n\t *  @param\tint\t\t$rowid      id of contact\n\t *  @param  string\t$mode       'email' or 'mobile'\n\t *  @return string  \t\t\tEmail of user with format: \"Full name <email>\"\n\t */\n\tfunction user_get_property($rowid,$mode)\n\t{\n\t\t$user_property='';\n\n\t\tif (empty($rowid)) return '';\n\n\t\t$sql = \"SELECT rowid, email, user_mobile, civility, lastname, firstname\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"user\";\n\t\t$sql.= \" WHERE rowid = '\".$rowid.\"'\";\n\n\t\t$resql=$this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$nump = $this->db->num_rows($resql);\n\n\t\t\tif ($nump)\n\t\t\t{\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\tif ($mode == 'email') $user_property = dolGetFirstLastname($obj->firstname, $obj->lastname).\" <\".$obj->email.\">\";\n\t\t\t\telse if ($mode == 'mobile') $user_property = $obj->user_mobile;\n\t\t\t}\n\t\t\treturn $user_property;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdol_print_error($this->db);\n\t\t}\n\t}\n\n\t/**\n\t *\tLoad all objects into $this->users\n\t *\n\t *  @param\tstring\t\t$sortorder    sort order\n\t *  @param\tstring\t\t$sortfield    sort field\n\t *  @param\tint\t\t\t$limit\t\t  limit page\n\t *  @param\tint\t\t\t$offset    \t  page\n\t *  @param\tarray\t\t$filter    \t  filter output\n\t *  @return int          \t<0 if KO, >0 if OK\n\t */\n\tfunction fetchAll($sortorder='', $sortfield='', $limit=0, $offset=0, $filter=array())\n\t{\n\t\tglobal $conf;\n\n\t\t$sql=\"SELECT t.rowid\";\n\t\t$sql.= ' FROM '.MAIN_DB_PREFIX .$this->table_element.' as t ';\n\t\t$sql.= \" WHERE 1\";\n\n\t\t//Manage filter\n\t\tif (!empty($filter)){\n\t\t\tforeach($filter as $key => $value) {\n\t\t\t\tif (strpos($key,'date')) {\n\t\t\t\t\t$sql.= ' AND '.$key.' = \\''.$this->db->idate($value).'\\'';\n\t\t\t\t}\n\t\t\t\telseif ($key=='customsql') {\n\t\t\t\t\t$sql.= ' AND '.$value;\n\t\t\t\t} else {\n\t\t\t\t\t$sql.= ' AND '.$key.' LIKE \\'%'.$value.'%\\'';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$sql.= $this->db->order($sortfield,$sortorder);\n\t\tif ($limit) $sql.= $this->db->plimit($limit+1,$offset);\n\n\t\tdol_syslog(get_class($this).\"::\".__METHOD__, LOG_DEBUG);\n\n\t\t$resql=$this->db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$this->users=array();\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\tif ($num)\n\t\t\t{\n\t\t\t\twhile ($obj = $this->db->fetch_object($resql))\n\t\t\t\t{\n\t\t\t\t\t$line = new self($this->db);\n\t\t\t\t\t$result = $line->fetch($obj->rowid);\n\t\t\t\t\tif ($result>0 && !empty($line->id)) {\n\t\t\t\t\t\t$this->users[$obj->rowid] = clone $line;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->db->free($resql);\n\t\t\t}\n\t\t\treturn $num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\n\t}\n\n}\n\n"], "filenames": ["htdocs/user/card.php", "htdocs/user/class/user.class.php"], "buggy_code_start_loc": [353, 1408], "buggy_code_end_loc": [354, 1506], "fixing_code_start_loc": [353, 1408], "fixing_code_end_loc": [354, 1506], "type": "CWE-89", "message": "SQL injection vulnerability in user/card.php in Dolibarr version 8.0.2 allows remote authenticated users to execute arbitrary SQL commands via the employee parameter.", "other": {"cve": {"id": "CVE-2018-19998", "sourceIdentifier": "cve@mitre.org", "published": "2019-01-03T19:29:01.350", "lastModified": "2022-11-17T17:21:59.260", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "SQL injection vulnerability in user/card.php in Dolibarr version 8.0.2 allows remote authenticated users to execute arbitrary SQL commands via the employee parameter."}, {"lang": "es", "value": "Una vulnerabilidad de inyecci\u00f3n SQL basada en errores en la versi\u00f3n 8.0.2 de Dolibarr permite a los atacantes remotos autenticados ejecutar comandos SQL arbitrarios mediante el par\u00e1metro \"employee\"."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:8.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "30608213-F99C-4D9E-B848-794532E85267"}]}]}], "references": [{"url": "https://github.com/Dolibarr/dolibarr/commit/2b088a73c121a52e006c0d76ea4da7ffeb7b4f4a", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Dolibarr/dolibarr/commit/bacd5110fbdc81a35030fdc322775fa15ea85924", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Dolibarr/dolibarr/commit/2b088a73c121a52e006c0d76ea4da7ffeb7b4f4a"}}