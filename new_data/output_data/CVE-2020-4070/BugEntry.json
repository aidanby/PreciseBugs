{"buggy_code": ["//\n// $Id$\n// From Philippe Le Hegaret (Philippe.Le_Hegaret@sophia.inria.fr)\n//\n// (c) COPYRIGHT MIT and INRIA, 1997.\n// Please first read the full copyright statement in file COPYRIGHT.html\n\npackage org.w3c.css.css;\n\nimport org.w3c.css.atrules.css.AtRuleMedia;\nimport org.w3c.css.atrules.css.AtRulePage;\nimport org.w3c.css.parser.AtRule;\nimport org.w3c.css.parser.CssError;\nimport org.w3c.css.parser.CssFouffa;\nimport org.w3c.css.parser.CssParseException;\nimport org.w3c.css.parser.CssSelectors;\nimport org.w3c.css.parser.CssValidatorListener;\nimport org.w3c.css.parser.Errors;\nimport org.w3c.css.parser.analyzer.ParseException;\nimport org.w3c.css.parser.analyzer.TokenMgrError;\nimport org.w3c.css.properties.css.CssProperty;\nimport org.w3c.css.selectors.IdSelector;\nimport org.w3c.css.util.ApplContext;\nimport org.w3c.css.util.CssVersion;\nimport org.w3c.css.util.InvalidParamException;\nimport org.w3c.css.util.Messages;\nimport org.w3c.css.util.Util;\nimport org.w3c.css.util.Warning;\nimport org.w3c.css.util.Warnings;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.UnsupportedEncodingException;\nimport java.lang.reflect.Constructor;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\n\n/**\n * @version $Revision$\n */\npublic final class StyleSheetParser\n        implements CssValidatorListener, CssParser {\n\n    private static Constructor co = null;\n\n    static {\n        try {\n            Class c = java.lang.Exception.class;\n            Class cp[] = {java.lang.Exception.class};\n            co = c.getDeclaredConstructor(cp);\n        } catch (NoSuchMethodException ex) {\n            co = null;\n        }\n    }\n\n    CssFouffa cssFouffa;\n    StyleSheet style = new StyleSheet();\n\n    public void reInit() {\n        style = new StyleSheet();\n    }\n\n    public StyleSheet getStyleSheet() {\n        return style;\n    }\n\n    public void setWarningLevel(int warningLevel) {\n        style.setWarningLevel(warningLevel);\n    }\n\n    public void notifyErrors(Errors errors) {\n        style.addErrors(errors);\n    }\n\n    public void notifyWarnings(Warnings warnings) {\n        style.addWarnings(warnings);\n    }\n\n    /**\n     * Adds a vector of properties to a selector.\n     *\n     * @param selector   the selector\n     * @param properties Properties to associate with contexts\n     */\n    public void handleRule(ApplContext ac, CssSelectors selector,\n                           ArrayList<CssProperty> properties) {\n        if (selector.getAtRule() instanceof AtRulePage) {\n            style.remove(selector);\n        }\n        for (CssProperty property : properties) {\n            property.setSelectors(selector);\n            style.addProperty(selector, property);\n        }\n    }\n\n    // part added by Sijtsche de Jong\n\n    public void addCharSet(String charset) {\n        style.addCharSet(charset);\n    }\n\n    public void newAtRule(AtRule atRule) {\n        style.newAtRule(atRule);\n    }\n\n    public void endOfAtRule() {\n        style.endOfAtRule();\n    }\n\n    public void setImportant(boolean important) {\n        style.setImportant(important);\n    }\n\n    public void setSelectorList(ArrayList<CssSelectors> selectors) {\n        style.setSelectorList(selectors);\n    }\n\n    public void setProperty(ArrayList<CssProperty> properties) {\n        style.setProperty(properties);\n    }\n\n    public void endOfRule() {\n        style.endOfRule();\n    }\n\n    public void removeThisRule() {\n        style.removeThisRule();\n    }\n\n    public void removeThisAtRule() {\n        style.removeThisAtRule();\n    }\n\n    //end of part added by Sijtsche de Jong\n\n    /**\n     * Handles an at-rule.\n     * <p/>\n     * <p>The parameter <code>value</code> can be :\n     * <DL>\n     * <DT>CssString\n     * <DD>The value coming from a string.\n     * <DT>CssURL\n     * <DD>The value coming from an URL.\n     * <DT>Vector\n     * <DD>The value is a vector of declarations (it contains properties).\n     * This feature is not legal, so be careful.\n     * </DL>\n     *\n     * @param ident  The ident for this at-rule (for example: 'font-face')\n     * @param string The string representation if this at-rule\n     */\n    public void handleAtRule(ApplContext ac, String ident, String string) {\n        style.getWarnings().addWarning(new Warning(cssFouffa.getSourceFile(),\n                cssFouffa.getLine(),\n                \"at-rule\",\n                2,\n                new String[]{ident, string},\n                ac));\n        //stylesheet.addAtRule(atRule);\n    }\n\n    /**\n     * @param url    the URL containing the style sheet\n     * @param title  the title of the stylesheet\n     * @param kind   may be a stylesheet or an alternate stylesheet\n     * @param media  the media to apply this\n     * @param origin the origin of the style sheet\n     * @throws IOException an IO error\n     */\n    public void parseURL(ApplContext ac, URL url, String title,\n                         String kind, String media,\n                         int origin) {\n        boolean doneref = false;\n        URL ref = ac.getReferrer();\n        setWarningLevel(ac.getWarningLevel());\n        if (Util.onDebug) {\n            System.err.println(\"StyleSheet.parseURL(\" + url + \", \"\n                    + title + \", \"\n                    + kind + \", \" + media + \", \"\n                    + origin + \")\");\n        }\n        if (kind != null) {\n            kind = kind.trim().toLowerCase();\n            if (!kind.equals(\"stylesheet\") && !kind.equals(\"alternate stylesheet\")) {\n                return;\n            }\n        }\n        try {\n            ac.setOrigin(origin);\n//\t    if (cssFouffa == null) {\n            cssFouffa = new CssFouffa(ac, url);\n            cssFouffa.addListener(this);\n//\t    } else {\n//\t\tcssFouffa.ReInit(ac, url);\n//\t    }\n\n            //\t    cssFouffa.setResponse(res);\n\n            // removed plh 2001-03-08\n            // cssFouffa.setOrigin(origin);\n            //\t    cssFouffa.setDefaultMedium(defaultmedium);\n            //\t    cssFouffa.doConfig();\n            if (media == null) {\n                if (ac.getCssVersion() != CssVersion.CSS1) {\n                    if (ac.getMedium() == null) {\n                        media = \"all\";\n                    } else {\n                        media = ac.getMedium();\n                    }\n                }\n            }\n            AtRuleMedia m = AtRuleMedia.getInstance(ac.getCssVersion());\n            try {\n                if (media != null) {\n                    addMedias(m, media, ac);\n                }\n                cssFouffa.setAtRule(m);\n            } catch (org.w3c.css.util.InvalidParamException e) {\n                Errors er = new Errors();\n                er.addError(new org.w3c.css.parser.CssError(url.toString(),\n                        -1, e));\n                notifyErrors(er);\n                return;\n            }\n            ac.setReferrer(url);\n            doneref = true;\n            cssFouffa.parseStyle();\n        } catch (Exception e) {\n            Errors er = new Errors();\n            er.addError(new org.w3c.css.parser.CssError(Messages.escapeString(url.toString()),\n                    -1, e));\n            notifyErrors(er);\n        } finally {\n            if (doneref) {\n                ac.setReferrer(ref);\n            }\n        }\n    }\n\n    // add media, easy version for CSS version < 3, otherwise, reuse the parser\n    private void addMedias(AtRuleMedia m, String medias, ApplContext ac) throws InvalidParamException {\n        // before CSS3, let's parse it the easy way...\n        if (ac.getCssVersion().compareTo(CssVersion.CSS3) < 0) {\n            StringTokenizer tokens = new StringTokenizer(medias, \",\");\n            while (tokens.hasMoreTokens()) {\n                m.addMedia(null, tokens.nextToken().trim(), ac);\n            }\n        } else {\n            CssFouffa muP = new CssFouffa(ac, new StringReader(medias));\n            try {\n                AtRuleMedia arm = muP.parseMediaDeclaration();\n                if (arm != null) {\n                    m.allMedia = arm.allMedia;\n                }\n            } catch (ParseException pex) {\n                // error already added, so nothing else to do\n            }\n        }\n    }\n\n    /**\n     * Parse a style element. The Style element always comes from the user\n     *\n     * @param reader the reader containing the style data\n     * @param url    the name of the file the style element was read in.\n     * @throws IOException an IO error\n     */\n    public void parseStyleElement(ApplContext ac, Reader reader,\n                                  String title, String media,\n                                  URL url, int lineno) {\n        boolean doneref = false;\n        style.setWarningLevel(ac.getWarningLevel());\n        if (Util.onDebug) {\n            System.err.println(\"StyleSheet.parseStyleElement(\" + title + \", \"\n                    + media + \", \" + url\n                    + \",\" + lineno + \")\");\n        }\n        URL ref = ac.getReferrer();\n        try {\n\n//\t    if (cssFouffa == null) {\n            String charset = ac.getCharsetForURL(url);\n            cssFouffa = new CssFouffa(ac, reader, url, lineno);\n            cssFouffa.addListener(this);\n//\t    } else {\n//\t\tcssFouffa.ReInit(ac, input, url, lineno);\n//\t    }\n\n            //\t    cssFouffa.setResponse(res);\n            //\t    cssFouffa.setDefaultMedium(defaultmedium);\n            //\t    cssFouffa.doConfig();\n            if (media == null && ac.getCssVersion() != CssVersion.CSS1) {\n                media = \"all\";\n            }\n\n            AtRuleMedia m = AtRuleMedia.getInstance(ac.getCssVersion());\n            try {\n                if (media != null) {\n                    addMedias(m, media, ac);\n                }\n                cssFouffa.setAtRule(m);\n            } catch (org.w3c.css.util.InvalidParamException e) {\n                Errors er = new Errors();\n                er.addError(new org.w3c.css.parser.CssError(url.toString(),\n                        -1, e));\n                notifyErrors(er);\n                return;\n            }\n            ac.setReferrer(url);\n            doneref = true;\n            cssFouffa.parseStyle();\n        } catch (IOException e) {\n            Errors er = new Errors();\n            er.addError(new org.w3c.css.parser.CssError(url.toString(),\n                    -1, e));\n            notifyErrors(er);\n        } catch (TokenMgrError e) {\n            Errors er = new Errors();\n            CssParseException cpe = null;\n            if (co != null) {\n                try {\n                    Object o[] = new Object[1];\n                    o[0] = e;\n                    Exception new_e = (Exception) co.newInstance(o);\n                    cpe = new CssParseException(new_e);\n                } catch (Exception ex) {\n                    cpe = null;\n                }\n            }\n            if (cpe == null) {\n                cpe = new CssParseException(new Exception(e.getMessage()));\n            }\n            er.addError(new org.w3c.css.parser.CssError(url.toString(),\n                    -1,\n                    //e.getErrorLine(),\n                    cpe));\n            notifyErrors(er);\n        } catch (RuntimeException e) {\n            Errors er = new Errors();\n            er.addError(new org.w3c.css.parser.CssError(url.toString(),\n                    cssFouffa.getLine(),\n                    new CssParseException(e)));\n            notifyErrors(er);\n        } finally {\n            if (doneref) {\n                ac.setReferrer(ref);\n            }\n        }\n    }\n\n    /**\n     * @param input the inputStream containing the style data\n     * @param url   the name of the file the style element was read in.\n     * @throws IOException an IO error\n     * @see #parseStyleElement(ApplContext, InputStream, String, String, URL, int)\n     * @deprecated Replaced by parseStyleElement\n     */\n    public void parseStyleElement(ApplContext ac, String input, URL url, int lineno) {\n        parseStyleElement(ac, new StringReader(input), null, null, url, lineno);\n    }\n\n    /**\n     * Parse a style element. The Style element always comes from the user\n     *\n     * @param input the input stream containing the style data\n     * @param url   the name of the file the style element was read in.\n     * @throws IOException an IO error\n     */\n    public void parseStyleElement(ApplContext ac, InputStream input,\n                                  String title, String media,\n                                  URL url, int lineno) {\n        InputStreamReader reader = null;\n        String charset = ac.getCharsetForURL(url);\n        try {\n            reader = new InputStreamReader(input, (charset == null) ?\n                    \"iso-8859-1\" : charset);\n        } catch (UnsupportedEncodingException uex) {\n            Errors er = new Errors();\n            er.addError(new org.w3c.css.parser.CssError(url.toString(),\n                    -1, uex));\n            notifyErrors(er);\n        } catch (Exception ex) {\n            // in case of error, ignore it.\n            reader = null;\n            if (Util.onDebug) {\n                System.err.println(\"Error in StyleSheet.parseStyleElement(\" + title + \",\"\n                        + url + \",\" + lineno + \")\");\n            }\n        }\n        if (reader != null) {\n            parseStyleElement(ac, reader, title, media, url, lineno);\n        }\n    }\n\n    /**\n     * Unify call to the parser for css doc as a reader.\n     *\n     * @param ac\n     * @param reader\n     * @param docref\n     */\n    public void parseStyleSheet(ApplContext ac, Reader reader, URL docref) {\n        parseStyleElement(ac, reader, null, null, (docref == null) ? ac.getFakeURL() : docref, 0);\n    }\n\n    /**\n     * Parse some declarations. All declarations always comes from the user\n     *\n     * @param input the inputStream containing the style data\n     * @param id    the uniq id\n     * @param url   the URL the style element was read in.\n     * @throws IOException an IO error\n     */\n    public void parseStyleAttribute(ApplContext ac, InputStream input, String id,\n                                    URL url, int lineno) {\n        style.setWarningLevel(ac.getWarningLevel());\n        lineno--; // why ?!?!\n        if (Util.onDebug) {\n            System.err.println(\"StyleSheet.parseStyleAttribute(\" + id + \",\"\n                    + url + \",\" + lineno + \")\");\n        }\n\n        try {\n            //\t    if (cssFouffa == null) {\n            String charset = ac.getCharsetForURL(url);\n            cssFouffa = new CssFouffa(ac, input, charset, url, lineno);\n            cssFouffa.addListener(this);\n            //\t    } else\n//\t\tcssFouffa.ReInit(ac, input, url, lineno);\n            CssSelectors selector = new CssSelectors(ac);\n\n            try {\n                AtRuleMedia media = AtRuleMedia.getInstance(ac.getCssVersion());\n                if (ac.getCssVersion() != CssVersion.CSS1) {\n                    media.addMedia(null, \"all\", ac);\n                }\n                cssFouffa.setAtRule(media);\n            } catch (InvalidParamException e) {\n            } //ignore\n\n            try {\n                if (id == null || id.length() == 0) {\n                    id = \"nullId-\" + Long.toHexString(System.currentTimeMillis());\n                    // TODO add an error/warning ?\n                }\n                selector.addId(new IdSelector(id.substring(1)));\n            } catch (InvalidParamException e) {\n                style.removeThisRule();\n                ac.getFrame().addError(new CssError(e));\n            }\n            cssFouffa.parseDeclarations(selector);\n        } catch (IOException e) {\n            Errors er = new Errors();\n            er.addError(new org.w3c.css.parser.CssError(url.toString(),\n                    -1, e));\n            notifyErrors(er);\n        }\n    }\n\n    /**\n     * @param input the inputStream containing the style data\n     * @param id    the uniq id\n     * @param url   the name of the file the style element was read in.\n     * @throws IOException an IO error\n     * @see #parseStyleAttribute(ApplContext, InputStream, String, URL, int)\n     * @deprecated Replaced by parseStyleAttribute\n     */\n    public void parseStyleAttribute(ApplContext ac, String input, String id,\n                                    URL url, int lineno) {\n        parseStyleAttribute(ac, new ByteArrayInputStream(input.getBytes()),\n                id, url, lineno);\n    }\n\n    public void setStyle(Class style) {\n        cssFouffa.setStyle(style);\n    }\n\n}\n"], "fixing_code": ["//\n// $Id$\n// From Philippe Le Hegaret (Philippe.Le_Hegaret@sophia.inria.fr)\n//\n// (c) COPYRIGHT MIT and INRIA, 1997.\n// Please first read the full copyright statement in file COPYRIGHT.html\n\npackage org.w3c.css.css;\n\nimport org.w3c.css.atrules.css.AtRuleMedia;\nimport org.w3c.css.atrules.css.AtRulePage;\nimport org.w3c.css.parser.AtRule;\nimport org.w3c.css.parser.CssError;\nimport org.w3c.css.parser.CssFouffa;\nimport org.w3c.css.parser.CssParseException;\nimport org.w3c.css.parser.CssSelectors;\nimport org.w3c.css.parser.CssValidatorListener;\nimport org.w3c.css.parser.Errors;\nimport org.w3c.css.parser.analyzer.ParseException;\nimport org.w3c.css.parser.analyzer.TokenMgrError;\nimport org.w3c.css.properties.css.CssProperty;\nimport org.w3c.css.selectors.IdSelector;\nimport org.w3c.css.util.ApplContext;\nimport org.w3c.css.util.CssVersion;\nimport org.w3c.css.util.InvalidParamException;\nimport org.w3c.css.util.Messages;\nimport org.w3c.css.util.Util;\nimport org.w3c.css.util.Warning;\nimport org.w3c.css.util.Warnings;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.UnsupportedEncodingException;\nimport java.lang.reflect.Constructor;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\n\n/**\n * @version $Revision$\n */\npublic final class StyleSheetParser\n        implements CssValidatorListener, CssParser {\n\n    private static Constructor co = null;\n\n    static {\n        try {\n            Class c = java.lang.Exception.class;\n            Class cp[] = {java.lang.Exception.class};\n            co = c.getDeclaredConstructor(cp);\n        } catch (NoSuchMethodException ex) {\n            co = null;\n        }\n    }\n\n    CssFouffa cssFouffa;\n    StyleSheet style = new StyleSheet();\n\n    public void reInit() {\n        style = new StyleSheet();\n    }\n\n    public StyleSheet getStyleSheet() {\n        return style;\n    }\n\n    public void setWarningLevel(int warningLevel) {\n        style.setWarningLevel(warningLevel);\n    }\n\n    public void notifyErrors(Errors errors) {\n        style.addErrors(errors);\n    }\n\n    public void notifyWarnings(Warnings warnings) {\n        style.addWarnings(warnings);\n    }\n\n    /**\n     * Adds a vector of properties to a selector.\n     *\n     * @param selector   the selector\n     * @param properties Properties to associate with contexts\n     */\n    public void handleRule(ApplContext ac, CssSelectors selector,\n                           ArrayList<CssProperty> properties) {\n        if (selector.getAtRule() instanceof AtRulePage) {\n            style.remove(selector);\n        }\n        for (CssProperty property : properties) {\n            property.setSelectors(selector);\n            style.addProperty(selector, property);\n        }\n    }\n\n    // part added by Sijtsche de Jong\n\n    public void addCharSet(String charset) {\n        style.addCharSet(charset);\n    }\n\n    public void newAtRule(AtRule atRule) {\n        style.newAtRule(atRule);\n    }\n\n    public void endOfAtRule() {\n        style.endOfAtRule();\n    }\n\n    public void setImportant(boolean important) {\n        style.setImportant(important);\n    }\n\n    public void setSelectorList(ArrayList<CssSelectors> selectors) {\n        style.setSelectorList(selectors);\n    }\n\n    public void setProperty(ArrayList<CssProperty> properties) {\n        style.setProperty(properties);\n    }\n\n    public void endOfRule() {\n        style.endOfRule();\n    }\n\n    public void removeThisRule() {\n        style.removeThisRule();\n    }\n\n    public void removeThisAtRule() {\n        style.removeThisAtRule();\n    }\n\n    //end of part added by Sijtsche de Jong\n\n    /**\n     * Handles an at-rule.\n     * <p/>\n     * <p>The parameter <code>value</code> can be :\n     * <DL>\n     * <DT>CssString\n     * <DD>The value coming from a string.\n     * <DT>CssURL\n     * <DD>The value coming from an URL.\n     * <DT>Vector\n     * <DD>The value is a vector of declarations (it contains properties).\n     * This feature is not legal, so be careful.\n     * </DL>\n     *\n     * @param ident  The ident for this at-rule (for example: 'font-face')\n     * @param string The string representation if this at-rule\n     */\n    public void handleAtRule(ApplContext ac, String ident, String string) {\n        style.getWarnings().addWarning(new Warning(cssFouffa.getSourceFile(),\n                cssFouffa.getLine(),\n                \"at-rule\",\n                2,\n                new String[]{ident, string},\n                ac));\n        //stylesheet.addAtRule(atRule);\n    }\n\n    /**\n     * @param url    the URL containing the style sheet\n     * @param title  the title of the stylesheet\n     * @param kind   may be a stylesheet or an alternate stylesheet\n     * @param media  the media to apply this\n     * @param origin the origin of the style sheet\n     * @throws IOException an IO error\n     */\n    public void parseURL(ApplContext ac, URL url, String title,\n                         String kind, String media,\n                         int origin) {\n        boolean doneref = false;\n        URL ref = ac.getReferrer();\n        setWarningLevel(ac.getWarningLevel());\n        if (Util.onDebug) {\n            System.err.println(\"StyleSheet.parseURL(\" + url + \", \"\n                    + title + \", \"\n                    + kind + \", \" + media + \", \"\n                    + origin + \")\");\n        }\n        if (kind != null) {\n            kind = kind.trim().toLowerCase();\n            if (!kind.equals(\"stylesheet\") && !kind.equals(\"alternate stylesheet\")) {\n                return;\n            }\n        }\n        try {\n            ac.setOrigin(origin);\n//\t    if (cssFouffa == null) {\n            cssFouffa = new CssFouffa(ac, url);\n            cssFouffa.addListener(this);\n//\t    } else {\n//\t\tcssFouffa.ReInit(ac, url);\n//\t    }\n\n            //\t    cssFouffa.setResponse(res);\n\n            // removed plh 2001-03-08\n            // cssFouffa.setOrigin(origin);\n            //\t    cssFouffa.setDefaultMedium(defaultmedium);\n            //\t    cssFouffa.doConfig();\n            if (media == null) {\n                if (ac.getCssVersion() != CssVersion.CSS1) {\n                    if (ac.getMedium() == null) {\n                        media = \"all\";\n                    } else {\n                        media = ac.getMedium();\n                    }\n                }\n            }\n            AtRuleMedia m = AtRuleMedia.getInstance(ac.getCssVersion());\n            try {\n                if (media != null) {\n                    addMedias(m, media, ac);\n                }\n                cssFouffa.setAtRule(m);\n            } catch (org.w3c.css.util.InvalidParamException e) {\n                Errors er = new Errors();\n                er.addError(new org.w3c.css.parser.CssError(url.toString(),\n                        -1, e));\n                notifyErrors(er);\n                return;\n            }\n            ac.setReferrer(url);\n            doneref = true;\n            cssFouffa.parseStyle();\n        } catch (Exception e) {\n            Errors er = new Errors();\n            er.addError(new org.w3c.css.parser.CssError(Messages.escapeString(url.toString()),\n                    -1, new Exception(Messages.escapeString(e.getMessage()))));\n            notifyErrors(er);\n        } finally {\n            if (doneref) {\n                ac.setReferrer(ref);\n            }\n        }\n    }\n\n    // add media, easy version for CSS version < 3, otherwise, reuse the parser\n    private void addMedias(AtRuleMedia m, String medias, ApplContext ac) throws InvalidParamException {\n        // before CSS3, let's parse it the easy way...\n        if (ac.getCssVersion().compareTo(CssVersion.CSS3) < 0) {\n            StringTokenizer tokens = new StringTokenizer(medias, \",\");\n            while (tokens.hasMoreTokens()) {\n                m.addMedia(null, tokens.nextToken().trim(), ac);\n            }\n        } else {\n            CssFouffa muP = new CssFouffa(ac, new StringReader(medias));\n            try {\n                AtRuleMedia arm = muP.parseMediaDeclaration();\n                if (arm != null) {\n                    m.allMedia = arm.allMedia;\n                }\n            } catch (ParseException pex) {\n                // error already added, so nothing else to do\n            }\n        }\n    }\n\n    /**\n     * Parse a style element. The Style element always comes from the user\n     *\n     * @param reader the reader containing the style data\n     * @param url    the name of the file the style element was read in.\n     * @throws IOException an IO error\n     */\n    public void parseStyleElement(ApplContext ac, Reader reader,\n                                  String title, String media,\n                                  URL url, int lineno) {\n        boolean doneref = false;\n        style.setWarningLevel(ac.getWarningLevel());\n        if (Util.onDebug) {\n            System.err.println(\"StyleSheet.parseStyleElement(\" + title + \", \"\n                    + media + \", \" + url\n                    + \",\" + lineno + \")\");\n        }\n        URL ref = ac.getReferrer();\n        try {\n\n//\t    if (cssFouffa == null) {\n            String charset = ac.getCharsetForURL(url);\n            cssFouffa = new CssFouffa(ac, reader, url, lineno);\n            cssFouffa.addListener(this);\n//\t    } else {\n//\t\tcssFouffa.ReInit(ac, input, url, lineno);\n//\t    }\n\n            //\t    cssFouffa.setResponse(res);\n            //\t    cssFouffa.setDefaultMedium(defaultmedium);\n            //\t    cssFouffa.doConfig();\n            if (media == null && ac.getCssVersion() != CssVersion.CSS1) {\n                media = \"all\";\n            }\n\n            AtRuleMedia m = AtRuleMedia.getInstance(ac.getCssVersion());\n            try {\n                if (media != null) {\n                    addMedias(m, media, ac);\n                }\n                cssFouffa.setAtRule(m);\n            } catch (org.w3c.css.util.InvalidParamException e) {\n                Errors er = new Errors();\n                er.addError(new org.w3c.css.parser.CssError(url.toString(),\n                        -1, e));\n                notifyErrors(er);\n                return;\n            }\n            ac.setReferrer(url);\n            doneref = true;\n            cssFouffa.parseStyle();\n        } catch (IOException e) {\n            Errors er = new Errors();\n            er.addError(new org.w3c.css.parser.CssError(url.toString(),\n                    -1, e));\n            notifyErrors(er);\n        } catch (TokenMgrError e) {\n            Errors er = new Errors();\n            CssParseException cpe = null;\n            if (co != null) {\n                try {\n                    Object o[] = new Object[1];\n                    o[0] = e;\n                    Exception new_e = (Exception) co.newInstance(o);\n                    cpe = new CssParseException(new_e);\n                } catch (Exception ex) {\n                    cpe = null;\n                }\n            }\n            if (cpe == null) {\n                cpe = new CssParseException(new Exception(e.getMessage()));\n            }\n            er.addError(new org.w3c.css.parser.CssError(url.toString(),\n                    -1,\n                    //e.getErrorLine(),\n                    cpe));\n            notifyErrors(er);\n        } catch (RuntimeException e) {\n            Errors er = new Errors();\n            er.addError(new org.w3c.css.parser.CssError(url.toString(),\n                    cssFouffa.getLine(),\n                    new CssParseException(e)));\n            notifyErrors(er);\n        } finally {\n            if (doneref) {\n                ac.setReferrer(ref);\n            }\n        }\n    }\n\n    /**\n     * @param input the inputStream containing the style data\n     * @param url   the name of the file the style element was read in.\n     * @throws IOException an IO error\n     * @see #parseStyleElement(ApplContext, InputStream, String, String, URL, int)\n     * @deprecated Replaced by parseStyleElement\n     */\n    public void parseStyleElement(ApplContext ac, String input, URL url, int lineno) {\n        parseStyleElement(ac, new StringReader(input), null, null, url, lineno);\n    }\n\n    /**\n     * Parse a style element. The Style element always comes from the user\n     *\n     * @param input the input stream containing the style data\n     * @param url   the name of the file the style element was read in.\n     * @throws IOException an IO error\n     */\n    public void parseStyleElement(ApplContext ac, InputStream input,\n                                  String title, String media,\n                                  URL url, int lineno) {\n        InputStreamReader reader = null;\n        String charset = ac.getCharsetForURL(url);\n        try {\n            reader = new InputStreamReader(input, (charset == null) ?\n                    \"iso-8859-1\" : charset);\n        } catch (UnsupportedEncodingException uex) {\n            Errors er = new Errors();\n            er.addError(new org.w3c.css.parser.CssError(url.toString(),\n                    -1, uex));\n            notifyErrors(er);\n        } catch (Exception ex) {\n            // in case of error, ignore it.\n            reader = null;\n            if (Util.onDebug) {\n                System.err.println(\"Error in StyleSheet.parseStyleElement(\" + title + \",\"\n                        + url + \",\" + lineno + \")\");\n            }\n        }\n        if (reader != null) {\n            parseStyleElement(ac, reader, title, media, url, lineno);\n        }\n    }\n\n    /**\n     * Unify call to the parser for css doc as a reader.\n     *\n     * @param ac\n     * @param reader\n     * @param docref\n     */\n    public void parseStyleSheet(ApplContext ac, Reader reader, URL docref) {\n        parseStyleElement(ac, reader, null, null, (docref == null) ? ac.getFakeURL() : docref, 0);\n    }\n\n    /**\n     * Parse some declarations. All declarations always comes from the user\n     *\n     * @param input the inputStream containing the style data\n     * @param id    the uniq id\n     * @param url   the URL the style element was read in.\n     * @throws IOException an IO error\n     */\n    public void parseStyleAttribute(ApplContext ac, InputStream input, String id,\n                                    URL url, int lineno) {\n        style.setWarningLevel(ac.getWarningLevel());\n        lineno--; // why ?!?!\n        if (Util.onDebug) {\n            System.err.println(\"StyleSheet.parseStyleAttribute(\" + id + \",\"\n                    + url + \",\" + lineno + \")\");\n        }\n\n        try {\n            //\t    if (cssFouffa == null) {\n            String charset = ac.getCharsetForURL(url);\n            cssFouffa = new CssFouffa(ac, input, charset, url, lineno);\n            cssFouffa.addListener(this);\n            //\t    } else\n//\t\tcssFouffa.ReInit(ac, input, url, lineno);\n            CssSelectors selector = new CssSelectors(ac);\n\n            try {\n                AtRuleMedia media = AtRuleMedia.getInstance(ac.getCssVersion());\n                if (ac.getCssVersion() != CssVersion.CSS1) {\n                    media.addMedia(null, \"all\", ac);\n                }\n                cssFouffa.setAtRule(media);\n            } catch (InvalidParamException e) {\n            } //ignore\n\n            try {\n                if (id == null || id.length() == 0) {\n                    id = \"nullId-\" + Long.toHexString(System.currentTimeMillis());\n                    // TODO add an error/warning ?\n                }\n                selector.addId(new IdSelector(id.substring(1)));\n            } catch (InvalidParamException e) {\n                style.removeThisRule();\n                ac.getFrame().addError(new CssError(e));\n            }\n            cssFouffa.parseDeclarations(selector);\n        } catch (IOException e) {\n            Errors er = new Errors();\n            er.addError(new org.w3c.css.parser.CssError(url.toString(),\n                    -1, e));\n            notifyErrors(er);\n        }\n    }\n\n    /**\n     * @param input the inputStream containing the style data\n     * @param id    the uniq id\n     * @param url   the name of the file the style element was read in.\n     * @throws IOException an IO error\n     * @see #parseStyleAttribute(ApplContext, InputStream, String, URL, int)\n     * @deprecated Replaced by parseStyleAttribute\n     */\n    public void parseStyleAttribute(ApplContext ac, String input, String id,\n                                    URL url, int lineno) {\n        parseStyleAttribute(ac, new ByteArrayInputStream(input.getBytes()),\n                id, url, lineno);\n    }\n\n    public void setStyle(Class style) {\n        cssFouffa.setStyle(style);\n    }\n\n}\n"], "filenames": ["org/w3c/css/css/StyleSheetParser.java"], "buggy_code_start_loc": [237], "buggy_code_end_loc": [238], "fixing_code_start_loc": [237], "fixing_code_end_loc": [238], "type": "CWE-79", "message": "In CSS Validator less than or equal to commit 54d68a1, there is a cross-site scripting vulnerability in handling URIs. A user would have to click on a specifically crafted validator link to trigger it. This has been patched in commit e5c09a9.", "other": {"cve": {"id": "CVE-2020-4070", "sourceIdentifier": "security-advisories@github.com", "published": "2020-06-22T16:15:11.963", "lastModified": "2020-06-30T13:39:13.707", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In CSS Validator less than or equal to commit 54d68a1, there is a cross-site scripting vulnerability in handling URIs. A user would have to click on a specifically crafted validator link to trigger it. This has been patched in commit e5c09a9."}, {"lang": "es", "value": "En CSS Validator, menor o igual al commit 54d68a1, se presenta una vulnerabilidad de tipo cross-site scripting al manejar los URI. Un usuario tendr\u00eda que hacer clic en un enlace validador espec\u00edficamente dise\u00f1ado para activarlo. Esto ha sido parcheado en el commit e5c09a9"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 2.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:w3c:css_validator:*:*:*:*:*:*:*:*", "versionEndIncluding": "2020-01-19", "matchCriteriaId": "5B629E2A-714E-4901-8AFB-09B637FC058D"}]}]}], "references": [{"url": "https://github.com/w3c/css-validator/commit/e5c09a9119167d3064db786d5f00d730b584a53b", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/w3c/css-validator/security/advisories/GHSA-wf36-7w73-rh8c", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/w3c/css-validator/commit/e5c09a9119167d3064db786d5f00d730b584a53b"}}