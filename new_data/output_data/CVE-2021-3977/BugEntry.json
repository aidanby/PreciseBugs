{"buggy_code": ["<?php\n/**\n * Invoice Ninja (https://invoiceninja.com).\n *\n * @link https://github.com/invoiceninja/invoiceninja source repository\n *\n * @copyright Copyright (c) 2021. Invoice Ninja LLC (https://invoiceninja.com)\n *\n * @license https://www.elastic.co/licensing/elastic-license\n */\n\nnamespace App\\Http\\Controllers\\Auth;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Requests\\ClientPortal\\Contact\\ContactPasswordResetRequest;\nuse App\\Libraries\\MultiDB;\nuse App\\Models\\Account;\nuse App\\Models\\ClientContact;\nuse App\\Models\\Company;\nuse App\\Utils\\Ninja;\nuse Illuminate\\Contracts\\View\\Factory;\nuse Illuminate\\Foundation\\Auth\\SendsPasswordResetEmails;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Password;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\View\\View;\n\nclass ContactForgotPasswordController extends Controller\n{\n    /*\n    |--------------------------------------------------------------------------\n    | Password Reset Controller\n    |--------------------------------------------------------------------------\n    |\n    | This controller is responsible for handling password reset emails and\n    | includes a trait which assists in sending these notifications from\n    | your application to your users. Feel free to explore this trait.\n    |\n    */\n\n    use SendsPasswordResetEmails;\n\n    /**\n     * Create a new controller instance.\n     *\n     * @return void\n     */\n    public function __construct()\n    {\n        $this->middleware('guest:contact');\n    }\n\n    /**\n     * Show the reset email form.\n     *\n     * @return Factory|View\n     */\n    public function showLinkRequestForm(Request $request)\n    {\n\n        $account = false;\n        \n        if(Ninja::isHosted() && $request->session()->has('company_key'))\n        {\n            MultiDB::findAndSetDbByCompanyKey($request->session()->get('company_key'));\n            $company = Company::where('company_key', $request->session()->get('company_key'))->first();\n            $account = $company->account;\n        }\n\n        if(!$account){\n            $account = Account::first();\n            $company = $account->companies->first();\n        }\n        \n        return $this->render('auth.passwords.request', [\n            'title' => 'Client Password Reset',\n            'passwordEmailRoute' => 'client.password.email',\n            'account' => $account,\n            'company' => $company\n        ]);\n    }\n\n    protected function guard()\n    {\n        return Auth::guard('contact');\n    }\n\n    public function broker()\n    {\n        return Password::broker('contacts');\n    }\n\n    public function sendResetLinkEmail(ContactPasswordResetRequest $request)\n    {\n\n        if(Ninja::isHosted() && $request->session()->has('company_key'))\n            MultiDB::findAndSetDbByCompanyKey($request->session()->get('company_key'));\n        \n        $this->validateEmail($request);\n\n        $company = Company::where('company_key', $request->session()->get('company_key'))->first();\n        $contact = ClientContact::where(['company_id' => $company->id, 'email' => $request->input('email')])->first();\n\n        $response = false;\n\n        if($contact){\n\n            /* Update all instances of the client */\n            $token = Str::random(60);\n            ClientContact::where('email', $contact->email)->update(['token' => $token]);\n            \n            $contact->sendPasswordResetNotification($token);\n            $response = Password::RESET_LINK_SENT;\n        }\n        else\n            return $this->sendResetLinkFailedResponse($request, Password::INVALID_USER);\n\n        // We will send the password reset link to this user. Once we have attempted\n        // to send the link, we will examine the response then see the message we\n        // need to show to the user. Finally, we'll send out a proper response.\n        // $response = $this->broker()->sendResetLink(\n        //     $this->credentials($request)\n        // );\n\n        if ($request->ajax()) {\n\n            if($response == Password::RESET_THROTTLED)\n                return response()->json(['message' => ctrans('passwords.throttled'), 'status' => false], 429);\n\n            return $response == Password::RESET_LINK_SENT\n                ? response()->json(['message' => 'Reset link sent to your email.', 'status' => true], 201)\n                : response()->json(['message' => 'Email not found', 'status' => false], 401);\n        }\n\n        return $response == Password::RESET_LINK_SENT\n            ? $this->sendResetLinkResponse($request, $response)\n            : $this->sendResetLinkFailedResponse($request, $response);\n    }\n\n}\n"], "fixing_code": ["<?php\n/**\n * Invoice Ninja (https://invoiceninja.com).\n *\n * @link https://github.com/invoiceninja/invoiceninja source repository\n *\n * @copyright Copyright (c) 2021. Invoice Ninja LLC (https://invoiceninja.com)\n *\n * @license https://www.elastic.co/licensing/elastic-license\n */\n\nnamespace App\\Http\\Controllers\\Auth;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Requests\\ClientPortal\\Contact\\ContactPasswordResetRequest;\nuse App\\Libraries\\MultiDB;\nuse App\\Models\\Account;\nuse App\\Models\\ClientContact;\nuse App\\Models\\Company;\nuse App\\Utils\\Ninja;\nuse Illuminate\\Contracts\\View\\Factory;\nuse Illuminate\\Foundation\\Auth\\SendsPasswordResetEmails;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Password;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\View\\View;\n\nclass ContactForgotPasswordController extends Controller\n{\n    /*\n    |--------------------------------------------------------------------------\n    | Password Reset Controller\n    |--------------------------------------------------------------------------\n    |\n    | This controller is responsible for handling password reset emails and\n    | includes a trait which assists in sending these notifications from\n    | your application to your users. Feel free to explore this trait.\n    |\n    */\n\n    use SendsPasswordResetEmails;\n\n    /**\n     * Create a new controller instance.\n     *\n     * @return void\n     */\n    public function __construct()\n    {\n        $this->middleware('guest:contact');\n    }\n\n    /**\n     * Show the reset email form.\n     *\n     * @return Factory|View\n     */\n    public function showLinkRequestForm(Request $request)\n    {\n\n        $account = false;\n        \n        if(Ninja::isHosted() && $request->session()->has('company_key'))\n        {\n            MultiDB::findAndSetDbByCompanyKey($request->session()->get('company_key'));\n            $company = Company::where('company_key', $request->session()->get('company_key'))->first();\n            $account = $company->account;\n        }\n\n        if(!$account){\n            $account = Account::first();\n            $company = $account->companies->first();\n        }\n        \n        return $this->render('auth.passwords.request', [\n            'title' => 'Client Password Reset',\n            'passwordEmailRoute' => 'client.password.email',\n            'account' => $account,\n            'company' => $company\n        ]);\n    }\n\n    protected function guard()\n    {\n        return Auth::guard('contact');\n    }\n\n    public function broker()\n    {\n        return Password::broker('contacts');\n    }\n\n    public function sendResetLinkEmail(ContactPasswordResetRequest $request)\n    {\n        if(Ninja::isHosted() && $request->has('company_key'))\n            MultiDB::findAndSetDbByCompanyKey($request->input('company_key'));\n        \n        $this->validateEmail($request);\n\n        // $company = Company::where('company_key', $request->input('company_key'))->first();\n        // $contact = ClientContact::where(['company_id' => $company->id, 'email' => $request->input('email')])->first();\n\n        $contact = ClientContact::where(['email' => $request->input('email')])->first();\n\n        $response = false;\n\n        if($contact){\n\n            /* Update all instances of the client */\n            $token = Str::random(60);\n            ClientContact::where('email', $contact->email)->update(['token' => $token]);\n            \n            $contact->sendPasswordResetNotification($token);\n            $response = Password::RESET_LINK_SENT;\n        }\n        else\n            return $this->sendResetLinkFailedResponse($request, Password::INVALID_USER);\n\n        // We will send the password reset link to this user. Once we have attempted\n        // to send the link, we will examine thuser@example.ce response then see the message we\n        // need to show to the user. Finally, we'll send out a proper response.\n        // $response = $this->broker()->sendResetLink(\n        //     $this->credentials($request)\n        // );\n\n        if ($request->ajax()) {\n\n            if($response == Password::RESET_THROTTLED)\n                return response()->json(['message' => ctrans('passwords.throttled'), 'status' => false], 429);\n\n            return $response == Password::RESET_LINK_SENT\n                ? response()->json(['message' => 'Reset link sent to your email.', 'status' => true], 201)\n                : response()->json(['message' => 'Email not found', 'status' => false], 401);\n        }\n\n        return $response == Password::RESET_LINK_SENT\n            ? $this->sendResetLinkResponse($request, $response)\n            : $this->sendResetLinkFailedResponse($request, $response);\n    }\n\n}\n"], "filenames": ["app/Http/Controllers/Auth/ContactForgotPasswordController.php"], "buggy_code_start_loc": [96], "buggy_code_end_loc": [121], "fixing_code_start_loc": [96], "fixing_code_end_loc": [122], "type": "CWE-79", "message": "invoiceninja is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "other": {"cve": {"id": "CVE-2021-3977", "sourceIdentifier": "security@huntr.dev", "published": "2021-12-24T20:15:08.137", "lastModified": "2021-12-30T19:14:04.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "invoiceninja is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"}, {"lang": "es", "value": "invoiceninja es vulnerable a una Neutralizaci\u00f3n Inapropiada de Entradas Durante la Generaci\u00f3n de P\u00e1ginas Web (\"Cross-site Scripting\")"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:invoiceninja:invoice_ninja:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.5.47", "matchCriteriaId": "39AAF484-8923-4804-9A82-99F75753FE97"}, {"vulnerable": true, "criteria": "cpe:2.3:a:invoiceninja:invoice_ninja:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0", "versionEndExcluding": "5.3.33", "matchCriteriaId": "C387CCC5-A8A9-47BC-9192-3F6C132FEF97"}]}]}], "references": [{"url": "https://github.com/invoiceninja/invoiceninja/commit/1186eaa82375692d01d5ef3369c5b7bc7315b55f", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/99c4ed09-b66f-474a-bd74-eeccf9339fde", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/invoiceninja/invoiceninja/commit/1186eaa82375692d01d5ef3369c5b7bc7315b55f"}}