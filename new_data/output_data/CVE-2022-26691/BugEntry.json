{"buggy_code": ["CHANGES - OpenPrinting CUPS 2.4.1 - 2022-01-27\n==============================================\n\nChanges in CUPS v2.4.2 (TBA)\n----------------------------\n\n- The `cupsFileOpen` function no longer opens files for append in read-write\n  mode (Issue #291)\n- The cupsd daemon removed processing temporary queue (Issue #364)\n- Fixed delay in IPP backend if GNUTLS is used and endpoint doesn't confirm\n  closing the connection (Issue #365)\n- Fixed conditional jump based on uninitialized value in cups/ppd.c (Issue #329)\n- Fixed CSS related issues in CUPS Web UI (Issue #344)\n- Fixed copyright in CUPS Web UI trailer template (Issue #346)\n- mDNS hostname in device uri is not resolved when installaling a permanent\n  IPP Everywhere queue (Issues #340, #343)\n- The `lpstat` command now reports when the scheduler is not running\n  (Issue #352)\n- Updated the man pages concerning the `-h` option (Issue #357)\n- Re-added LibreSSL/OpenSSL support (Issue #362)\n- Updated the Solaris smf service file (Issue #368)\n- Fixed a regression in lpoptions option support (Issue #370)\n- The scheduler now regenerates the PPD cache information after changing the\n  \"cupsd.conf\" file (Issue #371)\n- Updated the scheduler to set \"auth-info-required\" to \"username,password\" if a\n  backend reports it needs authentication info but doesn't set a method for\n  authentication (Issue #373)\n- Updated the configure script to look for the OpenSSL library the old way if\n  pkg-config is not available (Issue #375)\n- Fixed the prototype for the `httpWriteResponse` function (Issue #380)\n- Brought back minimal AIX support (Issue #389)\n- `cupsGetResponse` did not always set the last error.\n- Fixed a number of old references to the Apple CUPS web page.\n- Restored the default/generic printer icon file for the web interface.\n- Removed old stylesheet classes that are no longer used by the web\n  interface.\n\n\nChanges in CUPS v2.4.1 (27th January 2020)\n------------------------------------------\n\n- The default color mode now is now configurable and defaults to the printer's\n  reported default mode (Issue #277)\n- Configuration script now checks linking for -Wl,-pie flags (Issue #303)\n- Fixed memory leaks - in testi18n (Issue #313), in `cups_enum_dests()`\n  (Issue #317), in `_cupsEncodeOption()` and `http_tls_upgrade()` (Issue #322)\n- Fixed missing bracket in de/index.html (Issue #299)\n- Fixed typos in configuration scripts (Issues #304, #316)\n- Removed remaining legacy code for `RIP_MAX_CACHE` environment variable\n  (Issue #323)\n- Removed deprecated directives from cupsctl and cups-files.conf (Issue #300)\n- Removed `purge-jobs` legacy code from CGI scripts and templates (Issue #325)\n\n\nChanges in CUPS v2.4.0 (29th November 2021)\n-------------------------------------------\n\n- Added configure option --with-idle-exit-timeout (Issue #294)\n- Added --with-systemd-timeoutstartsec configure option (Issue #298)\n- DigestOptions now are applied for MD5 Digest authentication defined\n  by RFC 2069 as well (Issue #287)\n- Fixed compilation on Solaris (Issue #293)\n- Fixed and improved German translations (Issue #296, Issue #297)\n\n\nChanges in CUPS v2.4rc1 (12th November 2021)\n--------------------------------------------\n\n- Added warning and debug messages when loading printers\n if the queue is raw or with driver (Issue #286)\n- Compilation now uses -fstack-protector-strong if available (Issue #285)\n\n\nChanges in CUPS v2.4b1 (27th October 2021)\n------------------------------------------\n\n- Added support for CUPS running in a Snapcraft snap.\n- Added basic OAuth 2.0 client support (Issue #100)\n- Added support for AirPrint and Mopria clients (Issue #105)\n- Added configure support for specifying systemd dependencies in the CUPS\n  service file (Issue #144)\n- Added several features and improvements to `ipptool` (Issue #153)\n- Added a JSON output mode for `ipptool`.\n- The `ipptool` command now correctly reports an error when a test file cannot\n  be found.\n- CUPS library now uses thread safe `getpwnam_r` and `getpwuid_r` functions\n  (Issue #274)\n- Fixed Kerberos authentication for the web interface (Issue #19)\n- The ZPL sample driver now supports more \"standard\" label sizes (Issue #70)\n- Fixed reporting of printer instances when enumerating and when no options are\n  set for the main instance (Issue #71)\n- Reverted USB read limit enforcement change from CUPS 2.2.12 (Issue #72)\n- The IPP backend did not return the correct status code when a job was canceled\n  at the printer/server (Issue #74)\n- The `testlang` unit test program now loops over all of the available locales\n  by default (Issue #85)\n- The `cupsfilter` command now shows error messages when options are used\n  incorrectly (Issue #88)\n- The PPD functions now treat boolean values as case-insensitive (Issue #106)\n- Temporary queue names no longer end with an underscore (Issue #110)\n- The USB backend now runs as root (Issue #121)\n- Added pkg-config file for libcups (Issue #122)\n- Fixed a PPD memory leak caused by emulator definitions (Issue #124)\n- Fixed a `DISPLAY` bug in `ipptool` (Issue #139)\n- The scheduler now includes the `[Job N]` prefix for job log messages, even\n  when using syslog logging (Issue #154)\n- Added support for locales using the GB18030 character set (Issue #159)\n- `httpReconnect2` did not reset the socket file descriptor when the TLS\n  negotiation failed (Apple #5907)\n- `httpUpdate` did not reset the socket file descriptor when the TLS\n  negotiation failed (Apple #5915)\n- The IPP backend now retries Validate-Job requests (Issue #132)\n- Now show better error messages when a driver interface program fails to\n  provide a PPD file (Issue #148)\n- Added dark mode support to the CUPS web interface (Issue #152)\n- Added a workaround for Solaris in `httpAddrConnect2` (Issue #156)\n- Fixed an interaction between `--remote-admin` and `--remote-any` for the\n  `cupsctl` command (Issue #158)\n- Now use a 60 second timeout for reading USB backchannel data (Issue #160)\n- The USB backend now tries harder to find a serial number (Issue #170)\n- Fixed `@IF(name)` handling in `cupsd.conf` (Apple #5918)\n- Fixed documentation and added examples for CUPS' limited CGI support\n  (Apple #5940)\n- Fixed the `lpc` command prompt (Apple #5946)\n- Now always pass \"localhost\" in the `Host:` header when talking over a domain\n  socket or the loopback interface (Issue #185)\n- Fixed a job history update issue in the scheduler (Issue #187)\n- Fixed `job-pages-per-set` value for duplex print jobs.\n- Fixed an edge case in `ippReadIO` to make sure that only complete attributes\n  and values are retained on an error (Issue #195)\n- Hardened `ippReadIO` to prevent invalid IPP messages from being propagated\n  (Issue #195, Issue #196)\n- The scheduler now supports the \"everywhere\" model directly (Issue #201)\n- Fixed some IPP Everywhere option mapping problems (Issue #238)\n- Fixed support for \"job-hold-until\" with the Restart-Job operation (Issue #250)\n- Fixed the default color/grayscale presets for IPP Everywhere PPDs (Issue #262)\n- Fixed support for the 'offline-report' state for all USB backends (Issue #264)\n- Documentation fixes (Issue #92, Issue #163, Issue #177, Issue #184)\n- Localization updates (Issue #123, Issue #129, Issue #134, Issue #146,\n  Issue #164)\n- USB quirk updates (Issue #192, Issue #270, Apple #5766, Apple #5838,\n  Apple #5843, Apple #5867)\n- Web interface updates (Issue #142, Issue #218)\n- The `ippeveprinter` tool now automatically uses an available port.\n- Fixed several Windows TLS and hashing issues.\n- Deprecated cups-config (Issue #97)\n- Deprecated Kerberos (`AuthType Negotiate`) authentication (Issue #98)\n- Removed support for the (long deprecated and unused) `FontPath`,\n  `ListenBackLog`, `LPDConfigFile`, `KeepAliveTimeout`, `RIPCache`, and\n  `SMBConfigFile` directives in `cupsd.conf` and `cups-files.conf`.\n- Stubbed out deprecated `httpMD5` functions.\n- Add test for undefined page ranges during printing.\n\n\nCUPS v2.3.3op2 (February 1, 2021)\n---------------------------------\n\n- Security: Fixed a buffer (read) overflow in the `ippReadIO` function\n  (CVE-2020-10001)\n- Clarified the documentation for the \"Listen\" directive (Issue #53)\n- Fixed duplicate ColorModel entries for AirPrint printers (Issue 59)\n- Fixed directory/permission defaults for Debian kfreebsd-based systems\n  (Issue #60, Issue #61)\n- Fixed crash bug in `ppdOpen` (Issue #64, Issue #78)\n- Fixed regression in `snprintf` emulation function (Issue #67)\n- The scheduler's systemd service file now waits for the nslcd service to start\n  (Issue #69)\n- The libusb-based USB backend now uses a simpler read timer implementation to\n  avoid a regression in a previous change (Issue #72)\n- The PPD caching code now only tracks the `APPrinterIconPath` value on macOS\n  (Issue #73)\n- Fixed segfault in help.cgi when searching in man pages (Issue #81)\n- Root certificates were incorrectly stored in \"~/.cups/ssl\".\n\n\nCUPS v2.3.3op1 (November 27, 2020)\n----------------------------------\n\n- The automated test suite can now be activated using `make test` for\n  consistency with other projects and CI environments - the old `make check`\n  continues to work as well, and the previous test server behavior can be\n  accessed by running `make testserver`.\n- ippeveprinter now supports multiple icons and strings files.\n- ippeveprinter now uses the system's FQDN with Avahi.\n- ippeveprinter now supports Get-Printer-Attributes on \"/\".\n- ippeveprinter now uses a deterministic \"printer-uuid\" value.\n- ippeveprinter now uses system sounds on macOS for Identify-Printer.\n- Updated ippfind to look for files in \"~/Desktop\" on Windows.\n- Updated ippfind to honor `SKIP-XXX` directives with `PAUSE`.\n- Updated IPP Everywhere support to work around printers that only advertise\n  color raster support but really also support grayscale (Issue #1)\n- ipptool now supports DNS-SD URIs like `ipps://My%20Printer._ipps._tcp.local`\n  (Issue #5)\n- The scheduler now allows root backends to have world read permissions but not\n  world execute permissions (Issue #21)\n- Failures to bind IPv6 listener sockets no longer cause errors if IPv6 is\n  disabled on the host (Issue #25)\n- The SNMP backend now supports the HP and Ricoh vendor MIBs (Issue #28)\n- The scheduler no longer includes a timestamp in files it writes (Issue #29)\n- The systemd service names are now \"cups.service\" and \"cups-lpd.service\"\n  (Issue #30, Issue #31)\n- The scheduler no longer adds the local hostname to the ServerAlias list\n  (Issue #32)\n- Added `LogFileGroup` directive in \"cups-files.conf\" to control the group\n  owner of log files (Issue #34)\n- Added `--with-max-log-size` configure option (Issue #35)\n- Added `--enable-sync-on-close` configure option (Issue #37)\n- Added `--with-error-policy` configure option (Issue #38)\n- IPP Everywhere PPDs could have an \"unknown\" default InputSlot (Issue #44)\n- The `httpAddrListen` function now uses a listen backlog of 128.\n- Added USB quirks (Apple issue #5789, #5823, #5831)\n- Fixed IPP Everywhere v1.1 conformance issues in ippeveprinter.\n- Fixed DNS-SD name collision support in ippeveprinter.\n- Fixed compiler and code analyzer warnings.\n- Fixed TLS support on Windows.\n- Fixed ippfind sub-type searches with Avahi.\n- Fixed the default hostname used by ippeveprinter on macOS.\n- Fixed resolution of local IPP-USB printers with Avahi.\n- Fixed coverity issues (Issue #2)\n- Fixed `httpAddrConnect` issues (Issue #3)\n- Fixed web interface device URI issue (Issue #4)\n- Fixed lp/lpr \"printer/class not found\" error reporting (Issue #6)\n- Fixed xinetd support for LPD clients (Issue #7)\n- Fixed libtool build issue (Issue #11)\n- Fixed a memory leak in the scheduler (Issue #12)\n- Fixed a potential integer overflow in the PPD hashing code (Issue #13)\n- Fixed output-bin and print-quality handling issues (Issue #18)\n- Fixed PPD options getting mapped to odd IPP values like \"tray---4\" (Issue #23)\n- Fixed remote access to the cupsd.conf and log files (Issue #24)\n- Fixed the automated test suite when running in certain build/CI environments\n  (Issue #25)\n- Fixed a logging regression caused by a previous change for Apple issue #5604\n  (Issue #25)\n- Fixed fax phone number handling with GNOME (Issue #40)\n- Fixed potential rounding error in rastertopwg filter (Issue #41)\n- Fixed the \"uri-security-supported\" value from the scheduler (Issue #42)\n- Fixed IPP backend crash bug with \"printer-alert\" values (Issue #43)\n- Removed old Solaris inetconv(1m) reference in cups-lpd man page (Issue #46)\n- Fixed default options that incorrectly use the \"custom\" prefix (Issue #48)\n- Fixed a memory leak when resolving DNS-SD URIs (Issue #49)\n- Fixed systemd status reporting by adopting the notify interface (Issue #51)\n- Fixed crash in rastertopwg (Apple issue #5773)\n- Fixed cupsManualCopies values in IPP Everywhere PPDs (Apple issue #5807)\n", "/*\n * Authentication certificate routines for the CUPS scheduler.\n *\n * Copyright \u00a9 2021-2022 by OpenPrinting.\n * Copyright \u00a9 2007-2016 by Apple Inc.\n * Copyright \u00a9\u00a01997-2006 by Easy Software Products.\n *\n * Licensed under Apache License v2.0.  See the file \"LICENSE\" for more\n * information.\n */\n\n/*\n * Include necessary headers...\n */\n\n#include \"cupsd.h\"\n#ifdef HAVE_ACL_INIT\n#  include <sys/acl.h>\n#  ifdef HAVE_MEMBERSHIP_H\n#    include <membership.h>\n#  endif /* HAVE_MEMBERSHIP_H */\n#endif /* HAVE_ACL_INIT */\n\n\n/*\n * Local functions...\n */\n\nstatic int\tctcompare(const char *a, const char *b);\n\n\n/*\n * 'cupsdAddCert()' - Add a certificate.\n */\n\nvoid\ncupsdAddCert(int        pid,\t\t/* I - Process ID */\n             const char *username,\t/* I - Username */\n             int        type)\t\t/* I - AuthType for username */\n{\n  int\t\ti;\t\t\t/* Looping var */\n  cupsd_cert_t\t*cert;\t\t\t/* Current certificate */\n  int\t\tfd;\t\t\t/* Certificate file */\n  char\t\tfilename[1024];\t\t/* Certificate filename */\n  static const char hex[] = \"0123456789ABCDEF\";\n\t\t\t\t\t/* Hex constants... */\n\n\n  cupsdLogMessage(CUPSD_LOG_DEBUG, \"cupsdAddCert: Adding certificate for PID %d\", pid);\n\n /*\n  * Allocate memory for the certificate...\n  */\n\n  if ((cert = calloc(sizeof(cupsd_cert_t), 1)) == NULL)\n    return;\n\n /*\n  * Fill in the certificate information...\n  */\n\n  cert->pid  = pid;\n  cert->type = type;\n  strlcpy(cert->username, username, sizeof(cert->username));\n\n  for (i = 0; i < 32; i ++)\n    cert->certificate[i] = hex[CUPS_RAND() & 15];\n\n /*\n  * Save the certificate to a file readable only by the User and Group\n  * (or root and SystemGroup for PID == 0)...\n  */\n\n  snprintf(filename, sizeof(filename), \"%s/certs/%d\", StateDir, pid);\n  unlink(filename);\n\n  if ((fd = open(filename, O_WRONLY | O_CREAT | O_EXCL, 0400)) < 0)\n  {\n    cupsdLogMessage(CUPSD_LOG_ERROR,\n                    \"Unable to create certificate file %s - %s\",\n                    filename, strerror(errno));\n    free(cert);\n    return;\n  }\n\n  if (pid == 0)\n  {\n#if defined(HAVE_ACL_INIT) && !CUPS_SNAP\n    acl_t\t\tacl;\t\t/* ACL information */\n    acl_entry_t\t\tentry;\t\t/* ACL entry */\n    acl_permset_t\tpermset;\t/* Permissions */\n#  ifdef HAVE_MBR_UID_TO_UUID\n    uuid_t\t\tgroup;\t\t/* Group ID */\n#  endif /* HAVE_MBR_UID_TO_UUID */\n    static int\t\tacls_not_supported = 0;\n\t\t\t\t\t/* Only warn once */\n#endif /* HAVE_ACL_INIT && !CUPS_SNAP */\n\n\n   /*\n    * Root certificate...\n    */\n\n    fchmod(fd, 0440);\n\n    /* ACLs do not work when cupsd is running in a Snap, and certificates\n       need root as group owner to be only accessible for CUPS and not the\n       unprivileged sub-processes */\n#if CUPS_SNAP\n    fchown(fd, RunUser, 0);\n#else\n    fchown(fd, RunUser, SystemGroupIDs[0]);\n\n    cupsdLogMessage(CUPSD_LOG_DEBUG2, \"cupsdAddCert: NumSystemGroups=%d\", NumSystemGroups);\n\n#  ifdef HAVE_ACL_INIT\n    if (NumSystemGroups > 1)\n    {\n     /*\n      * Set POSIX ACLs for the root certificate so that all system\n      * groups can access it...\n      */\n\n      int\tj;\t\t\t/* Looping var */\n\n#    ifdef HAVE_MBR_UID_TO_UUID\n     /*\n      * On macOS, ACLs use UUIDs instead of GIDs...\n      */\n\n      acl = acl_init(NumSystemGroups - 1);\n\n      for (i = 1; i < NumSystemGroups; i ++)\n      {\n       /*\n        * Add each group ID to the ACL...\n\t*/\n\n        for (j = 0; j < i; j ++)\n\t  if (SystemGroupIDs[j] == SystemGroupIDs[i])\n            break;\n\n        if (j < i)\n          continue;\t\t\t/* Skip duplicate groups */\n\n        acl_create_entry(&acl, &entry);\n\tacl_get_permset(entry, &permset);\n\tacl_add_perm(permset, ACL_READ_DATA);\n\tacl_set_tag_type(entry, ACL_EXTENDED_ALLOW);\n\tmbr_gid_to_uuid((gid_t)SystemGroupIDs[i], group);\n\tacl_set_qualifier(entry, &group);\n\tacl_set_permset(entry, permset);\n      }\n\n#    else\n     /*\n      * POSIX ACLs need permissions for owner, group, other, and mask\n      * in addition to the rest of the system groups...\n      */\n\n      acl = acl_init(NumSystemGroups + 3);\n\n      /* Owner */\n      acl_create_entry(&acl, &entry);\n      acl_get_permset(entry, &permset);\n      acl_add_perm(permset, ACL_READ);\n      acl_set_tag_type(entry, ACL_USER_OBJ);\n      acl_set_permset(entry, permset);\n\n      /* Group */\n      acl_create_entry(&acl, &entry);\n      acl_get_permset(entry, &permset);\n      acl_add_perm(permset, ACL_READ);\n      acl_set_tag_type(entry, ACL_GROUP_OBJ);\n      acl_set_permset(entry, permset);\n\n      /* Others */\n      acl_create_entry(&acl, &entry);\n      acl_get_permset(entry, &permset);\n      acl_add_perm(permset, 0);\n      acl_set_tag_type(entry, ACL_OTHER);\n      acl_set_permset(entry, permset);\n\n      /* Mask */\n      acl_create_entry(&acl, &entry);\n      acl_get_permset(entry, &permset);\n      acl_add_perm(permset, ACL_READ);\n      acl_set_tag_type(entry, ACL_MASK);\n      acl_set_permset(entry, permset);\n\n      for (i = 1; i < NumSystemGroups; i ++)\n      {\n       /*\n        * Add each group ID to the ACL...\n\t*/\n\n        for (j = 0; j < i; j ++)\n\t  if (SystemGroupIDs[j] == SystemGroupIDs[i])\n            break;\n\n        if (j < i)\n          continue;\t\t\t/* Skip duplicate groups */\n\n        acl_create_entry(&acl, &entry);\n\tacl_get_permset(entry, &permset);\n\tacl_add_perm(permset, ACL_READ);\n\tacl_set_tag_type(entry, ACL_GROUP);\n\tacl_set_qualifier(entry, SystemGroupIDs + i);\n\tacl_set_permset(entry, permset);\n      }\n\n      if (acl_valid(acl))\n      {\n        char *text, *textptr;\t\t/* Temporary string */\n\n        cupsdLogMessage(CUPSD_LOG_ERROR, \"ACL did not validate: %s\",\n\t                strerror(errno));\n        text = acl_to_text(acl, NULL);\n\tfor (textptr = strchr(text, '\\n');\n\t     textptr;\n\t     textptr = strchr(textptr + 1, '\\n'))\n\t  *textptr = ',';\n\n\tcupsdLogMessage(CUPSD_LOG_ERROR, \"ACL: %s\", text);\n\tacl_free(text);\n      }\n#    endif /* HAVE_MBR_UID_TO_UUID */\n\n      if (acl_set_fd(fd, acl))\n      {\n\tif (errno != EOPNOTSUPP || !acls_not_supported)\n\t  cupsdLogMessage(CUPSD_LOG_ERROR,\n\t\t\t  \"Unable to set ACLs on root certificate \\\"%s\\\" - %s\",\n\t\t\t  filename, strerror(errno));\n\n\tif (errno == EOPNOTSUPP)\n\t  acls_not_supported = 1;\n      }\n\n      acl_free(acl);\n    }\n#  endif /* HAVE_ACL_INIT */\n#endif /* CUPS_SNAP */\n\n    RootCertTime = time(NULL);\n  }\n  else\n  {\n   /*\n    * CGI certificate...\n    */\n\n    fchmod(fd, 0400);\n    fchown(fd, User, Group);\n  }\n\n  write(fd, cert->certificate, strlen(cert->certificate));\n  close(fd);\n\n /*\n  * Insert the certificate at the front of the list...\n  */\n\n  cert->next = Certs;\n  Certs      = cert;\n}\n\n\n/*\n * 'cupsdDeleteCert()' - Delete a single certificate.\n */\n\nvoid\ncupsdDeleteCert(int pid)\t\t/* I - Process ID */\n{\n  cupsd_cert_t\t*cert,\t\t\t/* Current certificate */\n\t\t*prev;\t\t\t/* Previous certificate */\n  char\t\tfilename[1024];\t\t/* Certificate file */\n\n\n  for (prev = NULL, cert = Certs; cert != NULL; prev = cert, cert = cert->next)\n    if (cert->pid == pid)\n    {\n     /*\n      * Remove this certificate from the list...\n      */\n\n      cupsdLogMessage(CUPSD_LOG_DEBUG2, \"cupsdDeleteCert: Removing certificate for PID %d.\", pid);\n\n      if (prev == NULL)\n        Certs = cert->next;\n      else\n        prev->next = cert->next;\n\n      free(cert);\n\n     /*\n      * Delete the file and return...\n      */\n\n      snprintf(filename, sizeof(filename), \"%s/certs/%d\", StateDir, pid);\n      if (unlink(filename))\n\tcupsdLogMessage(CUPSD_LOG_ERROR, \"Unable to remove %s!\", filename);\n\n      return;\n    }\n}\n\n\n/*\n * 'cupsdDeleteAllCerts()' - Delete all certificates...\n */\n\nvoid\ncupsdDeleteAllCerts(void)\n{\n  cupsd_cert_t\t*cert,\t\t\t/* Current certificate */\n\t\t*next;\t\t\t/* Next certificate */\n  char\t\tfilename[1024];\t\t/* Certificate file */\n\n\n /*\n  * Loop through each certificate, deleting them...\n  */\n\n  for (cert = Certs; cert != NULL; cert = next)\n  {\n   /*\n    * Delete the file...\n    */\n\n    snprintf(filename, sizeof(filename), \"%s/certs/%d\", StateDir, cert->pid);\n    if (unlink(filename))\n      cupsdLogMessage(CUPSD_LOG_ERROR, \"Unable to remove %s!\", filename);\n\n   /*\n    * Free memory...\n    */\n\n    next = cert->next;\n    free(cert);\n  }\n\n  Certs        = NULL;\n  RootCertTime = 0;\n}\n\n\n/*\n * 'cupsdFindCert()' - Find a certificate.\n */\n\ncupsd_cert_t *\t\t\t\t/* O - Matching certificate or NULL */\ncupsdFindCert(const char *certificate)\t/* I - Certificate */\n{\n  cupsd_cert_t\t*cert;\t\t\t/* Current certificate */\n\n\n  cupsdLogMessage(CUPSD_LOG_DEBUG2, \"cupsdFindCert(certificate=%s)\", certificate);\n  for (cert = Certs; cert != NULL; cert = cert->next)\n    if (!ctcompare(certificate, cert->certificate))\n    {\n      cupsdLogMessage(CUPSD_LOG_DEBUG2, \"cupsdFindCert: Returning \\\"%s\\\".\", cert->username);\n      return (cert);\n    }\n\n  cupsdLogMessage(CUPSD_LOG_DEBUG2, \"cupsdFindCert: Certificate not found.\");\n\n  return (NULL);\n}\n\n\n/*\n * 'cupsdInitCerts()' - Initialize the certificate \"system\" and root\n *                      certificate.\n */\n\nvoid\ncupsdInitCerts(void)\n{\n#ifndef HAVE_ARC4RANDOM\n  cups_file_t\t*fp;\t\t\t/* /dev/random file */\n\n\n /*\n  * Initialize the random number generator using the random device or\n  * the current time, as available...\n  */\n\n  if ((fp = cupsFileOpen(\"/dev/urandom\", \"rb\")) == NULL)\n  {\n    struct timeval tod;\t\t\t/* Time of day */\n\n   /*\n    * Get the time in usecs and use it as the initial seed...\n    */\n\n    gettimeofday(&tod, NULL);\n\n    CUPS_SRAND((unsigned)(tod.tv_sec + tod.tv_usec));\n  }\n  else\n  {\n    unsigned\tseed;\t\t\t/* Seed for random number generator */\n\n   /*\n    * Read 4 random characters from the random device and use\n    * them as the seed...\n    */\n\n    seed = (unsigned)cupsFileGetChar(fp);\n    seed = (seed << 8) | (unsigned)cupsFileGetChar(fp);\n    seed = (seed << 8) | (unsigned)cupsFileGetChar(fp);\n    CUPS_SRAND((seed << 8) | (unsigned)cupsFileGetChar(fp));\n\n    cupsFileClose(fp);\n  }\n#endif /* !HAVE_ARC4RANDOM */\n\n /*\n  * Create a root certificate and return...\n  */\n\n  if (!RunUser)\n    cupsdAddCert(0, \"root\", cupsdDefaultAuthType());\n}\n\n\n/*\n * 'ctcompare()' - Compare two strings in constant time.\n */\n\nstatic int\t\t\t\t/* O - 0 on match, non-zero on non-match */\nctcompare(const char *a,\t\t/* I - First string */\n          const char *b)\t\t/* I - Second string */\n{\n  int\tresult = 0;\t\t\t/* Result */\n\n\n  while (*a && *b)\n  {\n    result |= *a ^ *b;\n    a ++;\n    b ++;\n  }\n\n  return (result);\n}\n"], "fixing_code": ["CHANGES - OpenPrinting CUPS 2.4.1 - 2022-01-27\n==============================================\n\nChanges in CUPS v2.4.2 (TBA)\n----------------------------\n\n- Fixed certificate strings comparison for Local authorization (CVE-2022-26691)\n- The `cupsFileOpen` function no longer opens files for append in read-write\n  mode (Issue #291)\n- The cupsd daemon removed processing temporary queue (Issue #364)\n- Fixed delay in IPP backend if GNUTLS is used and endpoint doesn't confirm\n  closing the connection (Issue #365)\n- Fixed conditional jump based on uninitialized value in cups/ppd.c (Issue #329)\n- Fixed CSS related issues in CUPS Web UI (Issue #344)\n- Fixed copyright in CUPS Web UI trailer template (Issue #346)\n- mDNS hostname in device uri is not resolved when installaling a permanent\n  IPP Everywhere queue (Issues #340, #343)\n- The `lpstat` command now reports when the scheduler is not running\n  (Issue #352)\n- Updated the man pages concerning the `-h` option (Issue #357)\n- Re-added LibreSSL/OpenSSL support (Issue #362)\n- Updated the Solaris smf service file (Issue #368)\n- Fixed a regression in lpoptions option support (Issue #370)\n- The scheduler now regenerates the PPD cache information after changing the\n  \"cupsd.conf\" file (Issue #371)\n- Updated the scheduler to set \"auth-info-required\" to \"username,password\" if a\n  backend reports it needs authentication info but doesn't set a method for\n  authentication (Issue #373)\n- Updated the configure script to look for the OpenSSL library the old way if\n  pkg-config is not available (Issue #375)\n- Fixed the prototype for the `httpWriteResponse` function (Issue #380)\n- Brought back minimal AIX support (Issue #389)\n- `cupsGetResponse` did not always set the last error.\n- Fixed a number of old references to the Apple CUPS web page.\n- Restored the default/generic printer icon file for the web interface.\n- Removed old stylesheet classes that are no longer used by the web\n  interface.\n\n\nChanges in CUPS v2.4.1 (27th January 2020)\n------------------------------------------\n\n- The default color mode now is now configurable and defaults to the printer's\n  reported default mode (Issue #277)\n- Configuration script now checks linking for -Wl,-pie flags (Issue #303)\n- Fixed memory leaks - in testi18n (Issue #313), in `cups_enum_dests()`\n  (Issue #317), in `_cupsEncodeOption()` and `http_tls_upgrade()` (Issue #322)\n- Fixed missing bracket in de/index.html (Issue #299)\n- Fixed typos in configuration scripts (Issues #304, #316)\n- Removed remaining legacy code for `RIP_MAX_CACHE` environment variable\n  (Issue #323)\n- Removed deprecated directives from cupsctl and cups-files.conf (Issue #300)\n- Removed `purge-jobs` legacy code from CGI scripts and templates (Issue #325)\n\n\nChanges in CUPS v2.4.0 (29th November 2021)\n-------------------------------------------\n\n- Added configure option --with-idle-exit-timeout (Issue #294)\n- Added --with-systemd-timeoutstartsec configure option (Issue #298)\n- DigestOptions now are applied for MD5 Digest authentication defined\n  by RFC 2069 as well (Issue #287)\n- Fixed compilation on Solaris (Issue #293)\n- Fixed and improved German translations (Issue #296, Issue #297)\n\n\nChanges in CUPS v2.4rc1 (12th November 2021)\n--------------------------------------------\n\n- Added warning and debug messages when loading printers\n if the queue is raw or with driver (Issue #286)\n- Compilation now uses -fstack-protector-strong if available (Issue #285)\n\n\nChanges in CUPS v2.4b1 (27th October 2021)\n------------------------------------------\n\n- Added support for CUPS running in a Snapcraft snap.\n- Added basic OAuth 2.0 client support (Issue #100)\n- Added support for AirPrint and Mopria clients (Issue #105)\n- Added configure support for specifying systemd dependencies in the CUPS\n  service file (Issue #144)\n- Added several features and improvements to `ipptool` (Issue #153)\n- Added a JSON output mode for `ipptool`.\n- The `ipptool` command now correctly reports an error when a test file cannot\n  be found.\n- CUPS library now uses thread safe `getpwnam_r` and `getpwuid_r` functions\n  (Issue #274)\n- Fixed Kerberos authentication for the web interface (Issue #19)\n- The ZPL sample driver now supports more \"standard\" label sizes (Issue #70)\n- Fixed reporting of printer instances when enumerating and when no options are\n  set for the main instance (Issue #71)\n- Reverted USB read limit enforcement change from CUPS 2.2.12 (Issue #72)\n- The IPP backend did not return the correct status code when a job was canceled\n  at the printer/server (Issue #74)\n- The `testlang` unit test program now loops over all of the available locales\n  by default (Issue #85)\n- The `cupsfilter` command now shows error messages when options are used\n  incorrectly (Issue #88)\n- The PPD functions now treat boolean values as case-insensitive (Issue #106)\n- Temporary queue names no longer end with an underscore (Issue #110)\n- The USB backend now runs as root (Issue #121)\n- Added pkg-config file for libcups (Issue #122)\n- Fixed a PPD memory leak caused by emulator definitions (Issue #124)\n- Fixed a `DISPLAY` bug in `ipptool` (Issue #139)\n- The scheduler now includes the `[Job N]` prefix for job log messages, even\n  when using syslog logging (Issue #154)\n- Added support for locales using the GB18030 character set (Issue #159)\n- `httpReconnect2` did not reset the socket file descriptor when the TLS\n  negotiation failed (Apple #5907)\n- `httpUpdate` did not reset the socket file descriptor when the TLS\n  negotiation failed (Apple #5915)\n- The IPP backend now retries Validate-Job requests (Issue #132)\n- Now show better error messages when a driver interface program fails to\n  provide a PPD file (Issue #148)\n- Added dark mode support to the CUPS web interface (Issue #152)\n- Added a workaround for Solaris in `httpAddrConnect2` (Issue #156)\n- Fixed an interaction between `--remote-admin` and `--remote-any` for the\n  `cupsctl` command (Issue #158)\n- Now use a 60 second timeout for reading USB backchannel data (Issue #160)\n- The USB backend now tries harder to find a serial number (Issue #170)\n- Fixed `@IF(name)` handling in `cupsd.conf` (Apple #5918)\n- Fixed documentation and added examples for CUPS' limited CGI support\n  (Apple #5940)\n- Fixed the `lpc` command prompt (Apple #5946)\n- Now always pass \"localhost\" in the `Host:` header when talking over a domain\n  socket or the loopback interface (Issue #185)\n- Fixed a job history update issue in the scheduler (Issue #187)\n- Fixed `job-pages-per-set` value for duplex print jobs.\n- Fixed an edge case in `ippReadIO` to make sure that only complete attributes\n  and values are retained on an error (Issue #195)\n- Hardened `ippReadIO` to prevent invalid IPP messages from being propagated\n  (Issue #195, Issue #196)\n- The scheduler now supports the \"everywhere\" model directly (Issue #201)\n- Fixed some IPP Everywhere option mapping problems (Issue #238)\n- Fixed support for \"job-hold-until\" with the Restart-Job operation (Issue #250)\n- Fixed the default color/grayscale presets for IPP Everywhere PPDs (Issue #262)\n- Fixed support for the 'offline-report' state for all USB backends (Issue #264)\n- Documentation fixes (Issue #92, Issue #163, Issue #177, Issue #184)\n- Localization updates (Issue #123, Issue #129, Issue #134, Issue #146,\n  Issue #164)\n- USB quirk updates (Issue #192, Issue #270, Apple #5766, Apple #5838,\n  Apple #5843, Apple #5867)\n- Web interface updates (Issue #142, Issue #218)\n- The `ippeveprinter` tool now automatically uses an available port.\n- Fixed several Windows TLS and hashing issues.\n- Deprecated cups-config (Issue #97)\n- Deprecated Kerberos (`AuthType Negotiate`) authentication (Issue #98)\n- Removed support for the (long deprecated and unused) `FontPath`,\n  `ListenBackLog`, `LPDConfigFile`, `KeepAliveTimeout`, `RIPCache`, and\n  `SMBConfigFile` directives in `cupsd.conf` and `cups-files.conf`.\n- Stubbed out deprecated `httpMD5` functions.\n- Add test for undefined page ranges during printing.\n\n\nCUPS v2.3.3op2 (February 1, 2021)\n---------------------------------\n\n- Security: Fixed a buffer (read) overflow in the `ippReadIO` function\n  (CVE-2020-10001)\n- Clarified the documentation for the \"Listen\" directive (Issue #53)\n- Fixed duplicate ColorModel entries for AirPrint printers (Issue 59)\n- Fixed directory/permission defaults for Debian kfreebsd-based systems\n  (Issue #60, Issue #61)\n- Fixed crash bug in `ppdOpen` (Issue #64, Issue #78)\n- Fixed regression in `snprintf` emulation function (Issue #67)\n- The scheduler's systemd service file now waits for the nslcd service to start\n  (Issue #69)\n- The libusb-based USB backend now uses a simpler read timer implementation to\n  avoid a regression in a previous change (Issue #72)\n- The PPD caching code now only tracks the `APPrinterIconPath` value on macOS\n  (Issue #73)\n- Fixed segfault in help.cgi when searching in man pages (Issue #81)\n- Root certificates were incorrectly stored in \"~/.cups/ssl\".\n\n\nCUPS v2.3.3op1 (November 27, 2020)\n----------------------------------\n\n- The automated test suite can now be activated using `make test` for\n  consistency with other projects and CI environments - the old `make check`\n  continues to work as well, and the previous test server behavior can be\n  accessed by running `make testserver`.\n- ippeveprinter now supports multiple icons and strings files.\n- ippeveprinter now uses the system's FQDN with Avahi.\n- ippeveprinter now supports Get-Printer-Attributes on \"/\".\n- ippeveprinter now uses a deterministic \"printer-uuid\" value.\n- ippeveprinter now uses system sounds on macOS for Identify-Printer.\n- Updated ippfind to look for files in \"~/Desktop\" on Windows.\n- Updated ippfind to honor `SKIP-XXX` directives with `PAUSE`.\n- Updated IPP Everywhere support to work around printers that only advertise\n  color raster support but really also support grayscale (Issue #1)\n- ipptool now supports DNS-SD URIs like `ipps://My%20Printer._ipps._tcp.local`\n  (Issue #5)\n- The scheduler now allows root backends to have world read permissions but not\n  world execute permissions (Issue #21)\n- Failures to bind IPv6 listener sockets no longer cause errors if IPv6 is\n  disabled on the host (Issue #25)\n- The SNMP backend now supports the HP and Ricoh vendor MIBs (Issue #28)\n- The scheduler no longer includes a timestamp in files it writes (Issue #29)\n- The systemd service names are now \"cups.service\" and \"cups-lpd.service\"\n  (Issue #30, Issue #31)\n- The scheduler no longer adds the local hostname to the ServerAlias list\n  (Issue #32)\n- Added `LogFileGroup` directive in \"cups-files.conf\" to control the group\n  owner of log files (Issue #34)\n- Added `--with-max-log-size` configure option (Issue #35)\n- Added `--enable-sync-on-close` configure option (Issue #37)\n- Added `--with-error-policy` configure option (Issue #38)\n- IPP Everywhere PPDs could have an \"unknown\" default InputSlot (Issue #44)\n- The `httpAddrListen` function now uses a listen backlog of 128.\n- Added USB quirks (Apple issue #5789, #5823, #5831)\n- Fixed IPP Everywhere v1.1 conformance issues in ippeveprinter.\n- Fixed DNS-SD name collision support in ippeveprinter.\n- Fixed compiler and code analyzer warnings.\n- Fixed TLS support on Windows.\n- Fixed ippfind sub-type searches with Avahi.\n- Fixed the default hostname used by ippeveprinter on macOS.\n- Fixed resolution of local IPP-USB printers with Avahi.\n- Fixed coverity issues (Issue #2)\n- Fixed `httpAddrConnect` issues (Issue #3)\n- Fixed web interface device URI issue (Issue #4)\n- Fixed lp/lpr \"printer/class not found\" error reporting (Issue #6)\n- Fixed xinetd support for LPD clients (Issue #7)\n- Fixed libtool build issue (Issue #11)\n- Fixed a memory leak in the scheduler (Issue #12)\n- Fixed a potential integer overflow in the PPD hashing code (Issue #13)\n- Fixed output-bin and print-quality handling issues (Issue #18)\n- Fixed PPD options getting mapped to odd IPP values like \"tray---4\" (Issue #23)\n- Fixed remote access to the cupsd.conf and log files (Issue #24)\n- Fixed the automated test suite when running in certain build/CI environments\n  (Issue #25)\n- Fixed a logging regression caused by a previous change for Apple issue #5604\n  (Issue #25)\n- Fixed fax phone number handling with GNOME (Issue #40)\n- Fixed potential rounding error in rastertopwg filter (Issue #41)\n- Fixed the \"uri-security-supported\" value from the scheduler (Issue #42)\n- Fixed IPP backend crash bug with \"printer-alert\" values (Issue #43)\n- Removed old Solaris inetconv(1m) reference in cups-lpd man page (Issue #46)\n- Fixed default options that incorrectly use the \"custom\" prefix (Issue #48)\n- Fixed a memory leak when resolving DNS-SD URIs (Issue #49)\n- Fixed systemd status reporting by adopting the notify interface (Issue #51)\n- Fixed crash in rastertopwg (Apple issue #5773)\n- Fixed cupsManualCopies values in IPP Everywhere PPDs (Apple issue #5807)\n", "/*\n * Authentication certificate routines for the CUPS scheduler.\n *\n * Copyright \u00a9 2021-2022 by OpenPrinting.\n * Copyright \u00a9 2007-2016 by Apple Inc.\n * Copyright \u00a9\u00a01997-2006 by Easy Software Products.\n *\n * Licensed under Apache License v2.0.  See the file \"LICENSE\" for more\n * information.\n */\n\n/*\n * Include necessary headers...\n */\n\n#include \"cupsd.h\"\n#ifdef HAVE_ACL_INIT\n#  include <sys/acl.h>\n#  ifdef HAVE_MEMBERSHIP_H\n#    include <membership.h>\n#  endif /* HAVE_MEMBERSHIP_H */\n#endif /* HAVE_ACL_INIT */\n\n\n/*\n * Local functions...\n */\n\nstatic int\tctcompare(const char *a, const char *b);\n\n\n/*\n * 'cupsdAddCert()' - Add a certificate.\n */\n\nvoid\ncupsdAddCert(int        pid,\t\t/* I - Process ID */\n             const char *username,\t/* I - Username */\n             int        type)\t\t/* I - AuthType for username */\n{\n  int\t\ti;\t\t\t/* Looping var */\n  cupsd_cert_t\t*cert;\t\t\t/* Current certificate */\n  int\t\tfd;\t\t\t/* Certificate file */\n  char\t\tfilename[1024];\t\t/* Certificate filename */\n  static const char hex[] = \"0123456789ABCDEF\";\n\t\t\t\t\t/* Hex constants... */\n\n\n  cupsdLogMessage(CUPSD_LOG_DEBUG, \"cupsdAddCert: Adding certificate for PID %d\", pid);\n\n /*\n  * Allocate memory for the certificate...\n  */\n\n  if ((cert = calloc(sizeof(cupsd_cert_t), 1)) == NULL)\n    return;\n\n /*\n  * Fill in the certificate information...\n  */\n\n  cert->pid  = pid;\n  cert->type = type;\n  strlcpy(cert->username, username, sizeof(cert->username));\n\n  for (i = 0; i < 32; i ++)\n    cert->certificate[i] = hex[CUPS_RAND() & 15];\n\n /*\n  * Save the certificate to a file readable only by the User and Group\n  * (or root and SystemGroup for PID == 0)...\n  */\n\n  snprintf(filename, sizeof(filename), \"%s/certs/%d\", StateDir, pid);\n  unlink(filename);\n\n  if ((fd = open(filename, O_WRONLY | O_CREAT | O_EXCL, 0400)) < 0)\n  {\n    cupsdLogMessage(CUPSD_LOG_ERROR,\n                    \"Unable to create certificate file %s - %s\",\n                    filename, strerror(errno));\n    free(cert);\n    return;\n  }\n\n  if (pid == 0)\n  {\n#if defined(HAVE_ACL_INIT) && !CUPS_SNAP\n    acl_t\t\tacl;\t\t/* ACL information */\n    acl_entry_t\t\tentry;\t\t/* ACL entry */\n    acl_permset_t\tpermset;\t/* Permissions */\n#  ifdef HAVE_MBR_UID_TO_UUID\n    uuid_t\t\tgroup;\t\t/* Group ID */\n#  endif /* HAVE_MBR_UID_TO_UUID */\n    static int\t\tacls_not_supported = 0;\n\t\t\t\t\t/* Only warn once */\n#endif /* HAVE_ACL_INIT && !CUPS_SNAP */\n\n\n   /*\n    * Root certificate...\n    */\n\n    fchmod(fd, 0440);\n\n    /* ACLs do not work when cupsd is running in a Snap, and certificates\n       need root as group owner to be only accessible for CUPS and not the\n       unprivileged sub-processes */\n#if CUPS_SNAP\n    fchown(fd, RunUser, 0);\n#else\n    fchown(fd, RunUser, SystemGroupIDs[0]);\n\n    cupsdLogMessage(CUPSD_LOG_DEBUG2, \"cupsdAddCert: NumSystemGroups=%d\", NumSystemGroups);\n\n#  ifdef HAVE_ACL_INIT\n    if (NumSystemGroups > 1)\n    {\n     /*\n      * Set POSIX ACLs for the root certificate so that all system\n      * groups can access it...\n      */\n\n      int\tj;\t\t\t/* Looping var */\n\n#    ifdef HAVE_MBR_UID_TO_UUID\n     /*\n      * On macOS, ACLs use UUIDs instead of GIDs...\n      */\n\n      acl = acl_init(NumSystemGroups - 1);\n\n      for (i = 1; i < NumSystemGroups; i ++)\n      {\n       /*\n        * Add each group ID to the ACL...\n\t*/\n\n        for (j = 0; j < i; j ++)\n\t  if (SystemGroupIDs[j] == SystemGroupIDs[i])\n            break;\n\n        if (j < i)\n          continue;\t\t\t/* Skip duplicate groups */\n\n        acl_create_entry(&acl, &entry);\n\tacl_get_permset(entry, &permset);\n\tacl_add_perm(permset, ACL_READ_DATA);\n\tacl_set_tag_type(entry, ACL_EXTENDED_ALLOW);\n\tmbr_gid_to_uuid((gid_t)SystemGroupIDs[i], group);\n\tacl_set_qualifier(entry, &group);\n\tacl_set_permset(entry, permset);\n      }\n\n#    else\n     /*\n      * POSIX ACLs need permissions for owner, group, other, and mask\n      * in addition to the rest of the system groups...\n      */\n\n      acl = acl_init(NumSystemGroups + 3);\n\n      /* Owner */\n      acl_create_entry(&acl, &entry);\n      acl_get_permset(entry, &permset);\n      acl_add_perm(permset, ACL_READ);\n      acl_set_tag_type(entry, ACL_USER_OBJ);\n      acl_set_permset(entry, permset);\n\n      /* Group */\n      acl_create_entry(&acl, &entry);\n      acl_get_permset(entry, &permset);\n      acl_add_perm(permset, ACL_READ);\n      acl_set_tag_type(entry, ACL_GROUP_OBJ);\n      acl_set_permset(entry, permset);\n\n      /* Others */\n      acl_create_entry(&acl, &entry);\n      acl_get_permset(entry, &permset);\n      acl_add_perm(permset, 0);\n      acl_set_tag_type(entry, ACL_OTHER);\n      acl_set_permset(entry, permset);\n\n      /* Mask */\n      acl_create_entry(&acl, &entry);\n      acl_get_permset(entry, &permset);\n      acl_add_perm(permset, ACL_READ);\n      acl_set_tag_type(entry, ACL_MASK);\n      acl_set_permset(entry, permset);\n\n      for (i = 1; i < NumSystemGroups; i ++)\n      {\n       /*\n        * Add each group ID to the ACL...\n\t*/\n\n        for (j = 0; j < i; j ++)\n\t  if (SystemGroupIDs[j] == SystemGroupIDs[i])\n            break;\n\n        if (j < i)\n          continue;\t\t\t/* Skip duplicate groups */\n\n        acl_create_entry(&acl, &entry);\n\tacl_get_permset(entry, &permset);\n\tacl_add_perm(permset, ACL_READ);\n\tacl_set_tag_type(entry, ACL_GROUP);\n\tacl_set_qualifier(entry, SystemGroupIDs + i);\n\tacl_set_permset(entry, permset);\n      }\n\n      if (acl_valid(acl))\n      {\n        char *text, *textptr;\t\t/* Temporary string */\n\n        cupsdLogMessage(CUPSD_LOG_ERROR, \"ACL did not validate: %s\",\n\t                strerror(errno));\n        text = acl_to_text(acl, NULL);\n\tfor (textptr = strchr(text, '\\n');\n\t     textptr;\n\t     textptr = strchr(textptr + 1, '\\n'))\n\t  *textptr = ',';\n\n\tcupsdLogMessage(CUPSD_LOG_ERROR, \"ACL: %s\", text);\n\tacl_free(text);\n      }\n#    endif /* HAVE_MBR_UID_TO_UUID */\n\n      if (acl_set_fd(fd, acl))\n      {\n\tif (errno != EOPNOTSUPP || !acls_not_supported)\n\t  cupsdLogMessage(CUPSD_LOG_ERROR,\n\t\t\t  \"Unable to set ACLs on root certificate \\\"%s\\\" - %s\",\n\t\t\t  filename, strerror(errno));\n\n\tif (errno == EOPNOTSUPP)\n\t  acls_not_supported = 1;\n      }\n\n      acl_free(acl);\n    }\n#  endif /* HAVE_ACL_INIT */\n#endif /* CUPS_SNAP */\n\n    RootCertTime = time(NULL);\n  }\n  else\n  {\n   /*\n    * CGI certificate...\n    */\n\n    fchmod(fd, 0400);\n    fchown(fd, User, Group);\n  }\n\n  write(fd, cert->certificate, strlen(cert->certificate));\n  close(fd);\n\n /*\n  * Insert the certificate at the front of the list...\n  */\n\n  cert->next = Certs;\n  Certs      = cert;\n}\n\n\n/*\n * 'cupsdDeleteCert()' - Delete a single certificate.\n */\n\nvoid\ncupsdDeleteCert(int pid)\t\t/* I - Process ID */\n{\n  cupsd_cert_t\t*cert,\t\t\t/* Current certificate */\n\t\t*prev;\t\t\t/* Previous certificate */\n  char\t\tfilename[1024];\t\t/* Certificate file */\n\n\n  for (prev = NULL, cert = Certs; cert != NULL; prev = cert, cert = cert->next)\n    if (cert->pid == pid)\n    {\n     /*\n      * Remove this certificate from the list...\n      */\n\n      cupsdLogMessage(CUPSD_LOG_DEBUG2, \"cupsdDeleteCert: Removing certificate for PID %d.\", pid);\n\n      if (prev == NULL)\n        Certs = cert->next;\n      else\n        prev->next = cert->next;\n\n      free(cert);\n\n     /*\n      * Delete the file and return...\n      */\n\n      snprintf(filename, sizeof(filename), \"%s/certs/%d\", StateDir, pid);\n      if (unlink(filename))\n\tcupsdLogMessage(CUPSD_LOG_ERROR, \"Unable to remove %s!\", filename);\n\n      return;\n    }\n}\n\n\n/*\n * 'cupsdDeleteAllCerts()' - Delete all certificates...\n */\n\nvoid\ncupsdDeleteAllCerts(void)\n{\n  cupsd_cert_t\t*cert,\t\t\t/* Current certificate */\n\t\t*next;\t\t\t/* Next certificate */\n  char\t\tfilename[1024];\t\t/* Certificate file */\n\n\n /*\n  * Loop through each certificate, deleting them...\n  */\n\n  for (cert = Certs; cert != NULL; cert = next)\n  {\n   /*\n    * Delete the file...\n    */\n\n    snprintf(filename, sizeof(filename), \"%s/certs/%d\", StateDir, cert->pid);\n    if (unlink(filename))\n      cupsdLogMessage(CUPSD_LOG_ERROR, \"Unable to remove %s!\", filename);\n\n   /*\n    * Free memory...\n    */\n\n    next = cert->next;\n    free(cert);\n  }\n\n  Certs        = NULL;\n  RootCertTime = 0;\n}\n\n\n/*\n * 'cupsdFindCert()' - Find a certificate.\n */\n\ncupsd_cert_t *\t\t\t\t/* O - Matching certificate or NULL */\ncupsdFindCert(const char *certificate)\t/* I - Certificate */\n{\n  cupsd_cert_t\t*cert;\t\t\t/* Current certificate */\n\n\n  cupsdLogMessage(CUPSD_LOG_DEBUG2, \"cupsdFindCert(certificate=%s)\", certificate);\n  for (cert = Certs; cert != NULL; cert = cert->next)\n    if (!ctcompare(certificate, cert->certificate))\n    {\n      cupsdLogMessage(CUPSD_LOG_DEBUG2, \"cupsdFindCert: Returning \\\"%s\\\".\", cert->username);\n      return (cert);\n    }\n\n  cupsdLogMessage(CUPSD_LOG_DEBUG2, \"cupsdFindCert: Certificate not found.\");\n\n  return (NULL);\n}\n\n\n/*\n * 'cupsdInitCerts()' - Initialize the certificate \"system\" and root\n *                      certificate.\n */\n\nvoid\ncupsdInitCerts(void)\n{\n#ifndef HAVE_ARC4RANDOM\n  cups_file_t\t*fp;\t\t\t/* /dev/random file */\n\n\n /*\n  * Initialize the random number generator using the random device or\n  * the current time, as available...\n  */\n\n  if ((fp = cupsFileOpen(\"/dev/urandom\", \"rb\")) == NULL)\n  {\n    struct timeval tod;\t\t\t/* Time of day */\n\n   /*\n    * Get the time in usecs and use it as the initial seed...\n    */\n\n    gettimeofday(&tod, NULL);\n\n    CUPS_SRAND((unsigned)(tod.tv_sec + tod.tv_usec));\n  }\n  else\n  {\n    unsigned\tseed;\t\t\t/* Seed for random number generator */\n\n   /*\n    * Read 4 random characters from the random device and use\n    * them as the seed...\n    */\n\n    seed = (unsigned)cupsFileGetChar(fp);\n    seed = (seed << 8) | (unsigned)cupsFileGetChar(fp);\n    seed = (seed << 8) | (unsigned)cupsFileGetChar(fp);\n    CUPS_SRAND((seed << 8) | (unsigned)cupsFileGetChar(fp));\n\n    cupsFileClose(fp);\n  }\n#endif /* !HAVE_ARC4RANDOM */\n\n /*\n  * Create a root certificate and return...\n  */\n\n  if (!RunUser)\n    cupsdAddCert(0, \"root\", cupsdDefaultAuthType());\n}\n\n\n/*\n * 'ctcompare()' - Compare two strings in constant time.\n */\n\nstatic int\t\t\t\t/* O - 0 on match, non-zero on non-match */\nctcompare(const char *a,\t\t/* I - First string */\n          const char *b)\t\t/* I - Second string */\n{\n  int\tresult = 0;\t\t\t/* Result */\n\n\n  while (*a && *b)\n  {\n    result |= *a ^ *b;\n    a ++;\n    b ++;\n  }\n\n /*\n  * The while loop finishes when *a == '\\0' or *b == '\\0'\n  * so after the while loop either both *a and *b == '\\0',\n  * or one points inside a string, so when we apply logical OR on *a,\n  * *b and result, we get a non-zero return value if the compared strings don't match.\n  */\n\n  return (result | *a | *b);\n}\n"], "filenames": ["CHANGES.md", "scheduler/cert.c"], "buggy_code_start_loc": [6, 447], "buggy_code_end_loc": [6, 449], "fixing_code_start_loc": [7, 447], "fixing_code_end_loc": [8, 456], "type": "CWE-269", "message": "A logic issue was addressed with improved state management. This issue is fixed in Security Update 2022-003 Catalina, macOS Monterey 12.3, macOS Big Sur 11.6.5. An application may be able to gain elevated privileges.", "other": {"cve": {"id": "CVE-2022-26691", "sourceIdentifier": "product-security@apple.com", "published": "2022-05-26T18:15:09.340", "lastModified": "2022-10-19T12:37:18.413", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A logic issue was addressed with improved state management. This issue is fixed in Security Update 2022-003 Catalina, macOS Monterey 12.3, macOS Big Sur 11.6.5. An application may be able to gain elevated privileges."}, {"lang": "es", "value": "Se abord\u00f3 un problema de l\u00f3gica con una administraci\u00f3n de estados mejorada. Este problema es corregido en Security Update 2022-003 Catalina, macOS Monterey versi\u00f3n 12.3, macOS Big Sur versi\u00f3n 11.6.5. Una aplicaci\u00f3n puede ser capaz de alcanzar altos privilegios"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 6.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:C/I:C/A:C", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 7.2}, "baseSeverity": "HIGH", "exploitabilityScore": 3.9, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-269"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:apple:cups:*:*:*:*:*:*:*:*", "versionEndExcluding": "499.4", "matchCriteriaId": "D804588E-266F-4F74-8D1B-C9E7EB5369DC"}, {"vulnerable": true, "criteria": "cpe:2.3:o:apple:mac_os_x:*:*:*:*:*:*:*:*", "versionStartIncluding": "10.15", "versionEndExcluding": "10.15.7", "matchCriteriaId": "DB8A73F8-3074-4B32-B9F6-343B6B1988C5"}, {"vulnerable": true, "criteria": "cpe:2.3:o:apple:mac_os_x:10.15.7:-:*:*:*:*:*:*", "matchCriteriaId": "A654B8A2-FC30-4171-B0BB-366CD7ED4B6A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:apple:mac_os_x:10.15.7:security_update_2020:*:*:*:*:*:*", "matchCriteriaId": "F12CC8B5-C1EB-419E-8496-B9A3864656AD"}, {"vulnerable": true, "criteria": "cpe:2.3:o:apple:mac_os_x:10.15.7:security_update_2020-001:*:*:*:*:*:*", "matchCriteriaId": "F1F4BF7F-90D4-4668-B4E6-B06F4070F448"}, {"vulnerable": true, "criteria": "cpe:2.3:o:apple:mac_os_x:10.15.7:security_update_2020-005:*:*:*:*:*:*", "matchCriteriaId": "7FD7176C-F4D1-43A7-9E49-BA92CA0D9980"}, {"vulnerable": true, "criteria": "cpe:2.3:o:apple:mac_os_x:10.15.7:security_update_2020-007:*:*:*:*:*:*", "matchCriteriaId": "2703DE0B-8A9E-4A9D-9AE8-028E22BF47CA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:apple:mac_os_x:10.15.7:security_update_2021-001:*:*:*:*:*:*", "matchCriteriaId": "0F441A43-1669-478D-9EC8-E96882DE4F9F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:apple:mac_os_x:10.15.7:security_update_2021-002:*:*:*:*:*:*", "matchCriteriaId": "D425C653-37A2-448C-BF2F-B684ADB08A26"}, {"vulnerable": true, "criteria": "cpe:2.3:o:apple:mac_os_x:10.15.7:security_update_2021-003:*:*:*:*:*:*", "matchCriteriaId": "A54D63B7-B92B-47C3-B1C5-9892E5873A98"}, {"vulnerable": true, "criteria": "cpe:2.3:o:apple:mac_os_x:10.15.7:security_update_2021-006:*:*:*:*:*:*", "matchCriteriaId": "012052B5-9AA7-4FD3-9C80-5F615330039D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:apple:mac_os_x:10.15.7:security_update_2021-007:*:*:*:*:*:*", "matchCriteriaId": "50F21A3C-0AC3-48C5-A4F8-5A7B478875B4"}, {"vulnerable": true, "criteria": "cpe:2.3:o:apple:mac_os_x:10.15.7:security_update_2021-008:*:*:*:*:*:*", "matchCriteriaId": "8E974DC6-F7D9-4389-9AF9-863F6E419CE6"}, {"vulnerable": true, "criteria": "cpe:2.3:o:apple:mac_os_x:10.15.7:security_update_2022-001:*:*:*:*:*:*", "matchCriteriaId": "156A6382-2BD3-4882-90B2-8E7CF6659E17"}, {"vulnerable": true, "criteria": "cpe:2.3:o:apple:mac_os_x:10.15.7:security_update_2022-002:*:*:*:*:*:*", "matchCriteriaId": "20A2FDB2-6712-406A-9896-C0B44508B07D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:apple:mac_os_x:10.15.7:supplemental_update:*:*:*:*:*:*", "matchCriteriaId": "C1C795B9-E58D-467C-83A8-2D45C792292F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:apple:macos:*:*:*:*:*:*:*:*", "versionStartIncluding": "11.0", "versionEndExcluding": "11.6.5", "matchCriteriaId": "BFCD1738-94C6-42DF-8699-BC96589F7221"}, {"vulnerable": true, "criteria": "cpe:2.3:o:apple:macos:*:*:*:*:*:*:*:*", "versionStartExcluding": "12.0.0", "versionEndExcluding": "12.3", "matchCriteriaId": "6A086223-FCC8-48F6-9B75-D8A533BF93D2"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:11.0:*:*:*:*:*:*:*", "matchCriteriaId": "FA6FEEC2-9F11-4643-8827-749718254FED"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:35:*:*:*:*:*:*:*", "matchCriteriaId": "80E516C0-98A4-4ADE-B69F-66A772E2BAAA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:36:*:*:*:*:*:*:*", "matchCriteriaId": "5C675112-476C-4D7C-BCB9-A2FB2D0BC9FD"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openprinting:cups:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.4.2", "matchCriteriaId": "ACDE6989-2E7A-4564-A310-960CF13CF925"}]}]}], "references": [{"url": "https://github.com/OpenPrinting/cups/commit/de4f8c196106033e4c372dce3e91b9d42b0b9444", "source": "product-security@apple.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/mandiant/Vulnerability-Disclosures/blob/master/2022/MNDT-2022-0026/MNDT-2022-0026.md", "source": "product-security@apple.com", "tags": ["Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2022/05/msg00039.html", "source": "product-security@apple.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KQ6TD7F3VRITPEHFDHZHK7MU6FEBMZ5U/", "source": "product-security@apple.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/YQRIT4H75XV6M42K7ZTARWZ7YLLYQHPO/", "source": "product-security@apple.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://support.apple.com/en-us/HT213183", "source": "product-security@apple.com", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://support.apple.com/en-us/HT213184", "source": "product-security@apple.com", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://support.apple.com/en-us/HT213185", "source": "product-security@apple.com", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://www.debian.org/security/2022/dsa-5149", "source": "product-security@apple.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/OpenPrinting/cups/commit/de4f8c196106033e4c372dce3e91b9d42b0b9444"}}