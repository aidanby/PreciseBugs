{"buggy_code": ["\"use strict\";\n\nvar os    = require('os'),\n    exec  = require('child_process').exec,\n    async = require('async');\n\nfunction trim_exec(cmd, cb) {\n  exec(cmd, function(err, out) {\n    if (out && out.toString() != '')\n      cb(null, out.toString().trim())\n    else\n      cb(err)\n  })\n}\n\n// If no wifi, then there is no error but cbed get's a null in second param.\nexports.get_active_network_interface_name = function(cb) {\n  var cmd = \"netstat -rn | grep UG | awk '{print $NF}'\";\n  exec(cmd, function(err, stdout) {\n    if (err) return cb(err);\n\n    var raw = stdout.toString().trim().split('\\n');\n    if (raw.length === 0 || raw === [''])\n      return cb(new Error('No active network interface found.'));\n\n    cb(null, raw[0]);\n  });\n};\n\nexports.interface_type_for = function(nic_name, cb) {\n  exec('cat /proc/net/wireless | grep ' + nic_name, function(err, out) {\n    return cb(null, err ? 'Wired' : 'Wireless')\n  })\n};\n\nexports.mac_address_for = function(nic_name, cb) {\n  var cmd = 'cat /sys/class/net/' + nic_name + '/address';\n  trim_exec(cmd, cb);\n};\n\nexports.gateway_ip_for = function(nic_name, cb) {\n  trim_exec(\"ip r | grep \" + nic_name + \" | grep default | cut -d ' ' -f 3 | head -n1\", cb);\n};\n\nexports.netmask_for = function(nic_name, cb) {\n  var cmd = \"ifconfig \" + nic_name + \" 2> /dev/null | egrep 'netmask|Mask:' | awk '{print $4}' | sed 's/Mask://'\";\n  trim_exec(cmd, cb);\n};\n\nexports.get_network_interfaces_list = function(cb) {\n\n  var count = 0,\n      list = [],\n      nics = os.networkInterfaces();\n\n  function append_data(obj) {\n    async.parallel([\n      function(cb) {\n        exports.mac_address_for(obj.name, cb)\n      },\n      function(cb) {\n        exports.gateway_ip_for(obj.name, cb)\n      },\n      function(cb) {\n        exports.netmask_for(obj.name, cb)\n      },\n      function(cb) {\n        exports.interface_type_for(obj.name, cb)\n      }\n    ], function(err, results) {\n      if (results[0]) obj.mac_address = results[0];\n      if (results[1]) obj.gateway_ip  = results[1];\n      if (results[2]) obj.netmask     = results[2];\n      if (results[3]) obj.type        = results[3];\n      \n      list.push(obj);\n      --count || cb(null, list);\n    })\n  }\n\n  for (var key in nics) {\n    if (key != 'lo0' && key != 'lo' && !key.match(/^tun/)) {\n\n      count++;\n      var obj = { name: key };\n\n      nics[key].forEach(function(type) {\n        if (type.family == 'IPv4') {\n          obj.ip_address = type.address;\n        }\n      });\n\n      append_data(obj);\n    }\n  }\n\n  if (count == 0)\n    cb(new Error('No interfaces found.'))\n}\n\n"], "fixing_code": ["\"use strict\";\n\nvar os    = require('os'),\n    exec  = require('child_process').exec,\n    async = require('async');\n\nfunction trim_exec(cmd, cb) {\n  exec(cmd, function(err, out) {\n    if (out && out.toString() != '')\n      cb(null, out.toString().trim())\n    else\n      cb(err)\n  })\n}\n\nfunction ensure_valid_nic(str) {\n  if (str.match(/[^\\w]/))\n    throw new Error(\"Invalid nic name given: \" + str);\n}\n\n// If no wifi, then there is no error but cbed get's a null in second param.\nexports.get_active_network_interface_name = function(cb) {\n  var cmd = \"netstat -rn | grep UG | awk '{print $NF}'\";\n  exec(cmd, function(err, stdout, stderr) {\n    if (err) return cb(err);\n\n    if (stderr.toString().match('not found')) {\n      return cb(new Error('Command failed: ' + stderr.toString().trim()))\n    }\n\n    var raw = stdout.toString().trim().split('\\n');\n    if (raw.length === 0 || raw === [''])\n      return cb(new Error('No active network interface found.'));\n\n    cb(null, raw[0]);\n  });\n};\n\nexports.interface_type_for = function(nic_name, cb) {\n  ensure_valid_nic(nic_name);\n  exec('cat /proc/net/wireless | grep ' + nic_name, function(err, out) {\n    return cb(null, err ? 'Wired' : 'Wireless')\n  })\n};\n\nexports.mac_address_for = function(nic_name, cb) {\n  ensure_valid_nic(nic_name);\n  var cmd = 'cat /sys/class/net/' + nic_name + '/address';\n  trim_exec(cmd, cb);\n};\n\nexports.gateway_ip_for = function(nic_name, cb) {\n  ensure_valid_nic(nic_name);\n  trim_exec(\"ip r | grep \" + nic_name + \" | grep default | cut -d ' ' -f 3 | head -n1\", cb);\n};\n\nexports.netmask_for = function(nic_name, cb) {\n  ensure_valid_nic(nic_name);\n  var cmd = \"ifconfig \" + nic_name + \" 2> /dev/null | egrep 'netmask|Mask:' | awk '{print $4}' | sed 's/Mask://'\";\n  trim_exec(cmd, cb);\n};\n\nexports.get_network_interfaces_list = function(cb) {\n\n  var count = 0,\n      list = [],\n      nics = os.networkInterfaces();\n\n  function append_data(obj) {\n    async.parallel([\n      function(cb) {\n        exports.mac_address_for(obj.name, cb)\n      },\n      function(cb) {\n        exports.gateway_ip_for(obj.name, cb)\n      },\n      function(cb) {\n        exports.netmask_for(obj.name, cb)\n      },\n      function(cb) {\n        exports.interface_type_for(obj.name, cb)\n      }\n    ], function(err, results) {\n      if (results[0]) obj.mac_address = results[0];\n      if (results[1]) obj.gateway_ip  = results[1];\n      if (results[2]) obj.netmask     = results[2];\n      if (results[3]) obj.type        = results[3];\n      \n      list.push(obj);\n      --count || cb(null, list);\n    })\n  }\n\n  for (var key in nics) {\n    if (key != 'lo0' && key != 'lo' && !key.match(/^tun/)) {\n\n      count++;\n      var obj = { name: key };\n\n      nics[key].forEach(function(type) {\n        if (type.family == 'IPv4') {\n          obj.ip_address = type.address;\n        }\n      });\n\n      append_data(obj);\n    }\n  }\n\n  if (count == 0)\n    cb(new Error('No interfaces found.'))\n}\n\n"], "filenames": ["lib/linux.js"], "buggy_code_start_loc": [15], "buggy_code_end_loc": [45], "fixing_code_start_loc": [16], "fixing_code_end_loc": [59], "type": "CWE-77", "message": "Versions of the package network before 0.7.0 are vulnerable to Arbitrary Command Injection due to use of the child_process exec function without input sanitization. If (attacker-controlled) user input is given to the mac_address_for function of the package, it is possible for the attacker to execute arbitrary commands on the operating system that this package is being run on.", "other": {"cve": {"id": "CVE-2024-21488", "sourceIdentifier": "report@snyk.io", "published": "2024-01-30T05:15:09.277", "lastModified": "2024-02-08T13:15:09.700", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Versions of the package network before 0.7.0 are vulnerable to Arbitrary Command Injection due to use of the child_process exec function without input sanitization. If (attacker-controlled) user input is given to the mac_address_for function of the package, it is possible for the attacker to execute arbitrary commands on the operating system that this package is being run on."}, {"lang": "es", "value": "Las versiones de la red de paquetes anteriores a la 0.7.0 son vulnerables a la inyecci\u00f3n de comandos arbitrarios debido al uso de la funci\u00f3n ejecutiva child_process sin sanitizaci\u00f3n de entrada. Si se proporciona entrada de usuario (controlada por el atacante) a la funci\u00f3n mac_address_for del paquete, es posible que un atacante ejecute comandos arbitrarios en el sistema operativo en el que se ejecuta este paquete."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}, {"source": "report@snyk.io", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-77"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:forkhq:network:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "0.7.0", "matchCriteriaId": "D7E1F6C0-7EF1-4EE0-9BEE-BD4B94EA0B33"}]}]}], "references": [{"url": "https://gist.github.com/icemonster/282ab98fb68fc22aac7c576538f6369c", "source": "report@snyk.io", "tags": ["Exploit", "Mitigation", "Third Party Advisory"]}, {"url": "https://github.com/tomas/network/commit/5599ed6d6ff1571a5ccadea775430c131f381de7", "source": "report@snyk.io", "tags": ["Patch"]}, {"url": "https://github.com/tomas/network/commit/6ec8713580938ab4666df2f2d0f3399891ed2ad7", "source": "report@snyk.io", "tags": ["Patch"]}, {"url": "https://github.com/tomas/network/commit/72c523265940fe279eb0050d441522628f8988e5", "source": "report@snyk.io", "tags": ["Patch"]}, {"url": "https://security.snyk.io/vuln/SNYK-JS-NETWORK-6184371", "source": "report@snyk.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tomas/network/commit/5599ed6d6ff1571a5ccadea775430c131f381de7"}}