{"buggy_code": ["# WebAuthn4J Spring Security\n\n[![Actions Status](https://github.com/webauthn4j/webauthn4j-spring-security/workflows/CI/badge.svg)](https://github.com/webauthn4j/webauthn4j-spring-security/actions)\n[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=webauthn4j-spring-security&metric=coverage)](https://sonarcloud.io/dashboard?id=webauthn4j-spring-security)\n[![Maven Central](https://img.shields.io/maven-central/v/com.webauthn4j/webauthn4j-spring-security-core.svg)](https://search.maven.org/search?q=webauthn4j-spring-security)\n[![license](https://img.shields.io/github/license/webauthn4j/webauthn4j-spring-security.svg)](https://github.com/webauthn4j/webauthn4j-spring-security/blob/master/LICENSE.txt)\n\nWebAuthn4J Spring Security provides [Web Authentication specification](https://www.w3.org/TR/2019/REC-webauthn-1-20190304/) support for your Spring application by using [WebAuthn4J library](https://github.com/webauthn4j/webauthn4j).\nUsers can login with WebAuthn compliant authenticator.\n\n## Project status\n\nThis project is under active development. API signature may change.\n\n## Documentation\n\nYou can find out more details from the [reference](https://webauthn4j.github.io/webauthn4j-spring-security/en/).\n\n## Getting from Maven Central\n\nIf you are using Maven, just add the webauthn4j-spring-security as a dependency:\n\n```xml\n<properties>\n  ...\n  <!-- Use the latest version whenever possible. -->\n  <webauthn4j-spring-security.version>0.9.0.RELEASE</webauthn4j-spring-security.version>\n  ...\n</properties>\n\n<dependency>\n\t<groupId>com.webauthn4j</groupId>\n\t<artifactId>webauthn4j-spring-security-core</artifactId>\n\t<version>${webauthn4j-spring-security.version}</version>\n</dependency>\n```\n\n## Build\n\nWebAuthn4J Spring Security uses a Gradle based build system.\nIn the instructions below, `gradlew` is invoked from the root of the source tree and serves as a cross-platform,\nself-contained bootstrap mechanism for the build.\n\n### Prerequisites\n\n- Java8 or later\n- Spring Framework 5.0 or later\n\n### Checkout sources\n\n```bash\ngit clone https://github.com/webauthn4j/webauthn4j-spring-security\n```\n\n### Build all jars\n\n```bash\n./gradlew build\n```\n\n### Execute sample application\n\n```bash\n./gradlew samples:spa:bootRun\n```\n\n![Login view](./docs/src/reference/asciidoc/en/images/login.png \"Login view\")\n\n## Configuration\n\nWebAuthn4J Spring Security can be configured through Spring Security Java Config.\n\n```java\n@Configuration\n@EnableWebSecurity\npublic class WebSecurityConfig {\n\n    @Bean\n    public WebAuthnAuthenticationProvider webAuthnAuthenticationProvider(WebAuthnAuthenticatorService authenticatorService, WebAuthnManager webAuthnManager){\n        return new WebAuthnAuthenticationProvider(authenticatorService, webAuthnManager);\n    }\n\n    @Bean\n    public DaoAuthenticationProvider daoAuthenticationProvider(UserDetailsService userDetailsService){\n        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();\n        daoAuthenticationProvider.setUserDetailsService(userDetailsService);\n        daoAuthenticationProvider.setPasswordEncoder(new BCryptPasswordEncoder());\n        return daoAuthenticationProvider;\n    }\n\n    @Bean\n    public AuthenticationManager authenticationManager(List<AuthenticationProvider> providers){\n        return new ProviderManager(providers);\n    }\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http, AuthenticationManager authenticationManager) throws Exception {\n        // WebAuthn Login\n        http.apply(WebAuthnLoginConfigurer.webAuthnLogin())\n                .loginPage(\"/login\")\n                .usernameParameter(\"username\")\n                .passwordParameter(\"rawPassword\")\n                .credentialIdParameter(\"credentialId\")\n                .clientDataJSONParameter(\"clientDataJSON\")\n                .authenticatorDataParameter(\"authenticatorData\")\n                .signatureParameter(\"signature\")\n                .clientExtensionsJSONParameter(\"clientExtensionsJSON\")\n                .loginProcessingUrl(\"/login\")\n                .rpId(\"example.com\")\n                .attestationOptionsEndpoint()\n                .attestationOptionsProvider(attestationOptionsProvider)\n                .processingUrl(\"/webauthn/attestation/options\")\n                .rp()\n                .name(\"example\")\n                .and()\n                .pubKeyCredParams(\n                        new PublicKeyCredentialParameters(PublicKeyCredentialType.PUBLIC_KEY, COSEAlgorithmIdentifier.ES256),\n                        new PublicKeyCredentialParameters(PublicKeyCredentialType.PUBLIC_KEY, COSEAlgorithmIdentifier.RS1)\n                )\n                .authenticatorSelection()\n                .authenticatorAttachment(AuthenticatorAttachment.CROSS_PLATFORM)\n                .residentKey(ResidentKeyRequirement.PREFERRED)\n                .userVerification(UserVerificationRequirement.PREFERRED)\n                .and()\n                .attestation(AttestationConveyancePreference.DIRECT)\n                .extensions()\n                .credProps(true)\n                .uvm(true)\n                .and()\n                .assertionOptionsEndpoint()\n                .assertionOptionsProvider(assertionOptionsProvider)\n                .processingUrl(\"/webauthn/assertion/options\")\n                .rpId(\"example.com\")\n                .userVerification(UserVerificationRequirement.PREFERRED)\n                .and()\n                .authenticationManager(authenticationManager);\n    }\n}\n```\n\n\n## License\n\nWebAuthn4J Spring Security is Open Source software released under the\n[Apache 2.0 license](http://www.apache.org/licenses/LICENSE-2.0.html).\n", "#\n# Copyright 2002-2019 the original author or authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nwebAuthn4JSpringSecurityVersion=0.9.1-SNAPSHOT\nlatestReleasedWebAuthn4JSpringSecurityVersion=0.9.0.RELEASE\n", "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage e2e;\n\nimport com.webauthn4j.springframework.security.webauthn.sample.SampleSPA;\nimport e2e.page.AuthenticatorLoginComponent;\nimport e2e.page.PasswordLoginComponent;\nimport e2e.page.ProfileComponent;\nimport e2e.page.SignupComponent;\nimport io.github.bonigarcia.wdm.WebDriverManager;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.virtualauthenticator.HasVirtualAuthenticator;\nimport org.openqa.selenium.virtualauthenticator.VirtualAuthenticatorOptions;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport java.time.Duration;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = SampleSPA.class, webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)\npublic class RegistrationAndAuthenticationE2ETest {\n\n    private WebDriver driver;\n    private WebDriverWait wait;\n\n    @BeforeClass\n    public static void setupClassTest() {\n        WebDriverManager.chromedriver().setup();\n    }\n\n    @Before\n    public void setupTest() {\n        ChromeOptions chromeOptions = new ChromeOptions();\n        chromeOptions.addArguments(\"--headless=new\");\n        chromeOptions.addArguments(\"--remote-allow-origins=*\");\n        driver = new ChromeDriver(chromeOptions);\n        wait = new WebDriverWait(driver, Duration.ofSeconds(5));\n        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));\n    }\n\n    @After\n    public void teardown() {\n        if (driver != null) {\n            driver.quit();\n        }\n    }\n\n    @Test\n    public void test() {\n\n        VirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions();\n        ((HasVirtualAuthenticator) driver).addVirtualAuthenticator(options);\n\n        // Registration\n        SignupComponent signupComponent = new SignupComponent(driver);\n        signupComponent.navigate();\n        signupComponent.setFirstname(\"John\");\n        signupComponent.setLastname(\"Doe\");\n        signupComponent.setUsername(\"john.doe@example.com\");\n        signupComponent.setPassword(\"password\");\n        signupComponent.clickAddAuthenticator();\n        signupComponent.getResidentKeyRequirementDialog().clickNo();\n        signupComponent.waitRegisterClickable();\n        signupComponent.clickRegister();\n\n        // Password authentication\n        wait.until(ExpectedConditions.urlToBe(\"http://localhost:8080/angular/login\"));\n        PasswordLoginComponent passwordLoginComponent = new PasswordLoginComponent(driver);\n        passwordLoginComponent.setUsername(\"john.doe@example.com\");\n        passwordLoginComponent.setPassword(\"password\");\n        passwordLoginComponent.clickLogin();\n\n        // 2nd-factor authentication\n        AuthenticatorLoginComponent authenticatorLoginComponent = new AuthenticatorLoginComponent(driver);\n        // nop\n\n        wait.until(ExpectedConditions.urlToBe(\"http://localhost:8080/angular/profile\"));\n        ProfileComponent profileComponent = new ProfileComponent(driver);\n\n    }\n\n}\n", "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.webauthn4j.springframework.security;\n\nimport com.webauthn4j.WebAuthnManager;\nimport com.webauthn4j.authenticator.AuthenticatorImpl;\nimport com.webauthn4j.data.AuthenticationParameters;\nimport com.webauthn4j.data.AuthenticationRequest;\nimport com.webauthn4j.springframework.security.authenticator.WebAuthnAuthenticator;\nimport com.webauthn4j.springframework.security.authenticator.WebAuthnAuthenticatorService;\nimport com.webauthn4j.springframework.security.exception.CredentialIdNotFoundException;\nimport com.webauthn4j.springframework.security.util.internal.ExceptionUtil;\nimport com.webauthn4j.util.exception.WebAuthnException;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.context.support.MessageSourceAccessor;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.BadCredentialsException;\nimport org.springframework.security.authentication.InternalAuthenticationServiceException;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.util.Assert;\n\nimport java.util.Collection;\n\n/**\n * An {@link AuthenticationProvider} implementation for processing {@link WebAuthnAssertionAuthenticationToken}\n */\npublic class WebAuthnAuthenticationProvider implements AuthenticationProvider {\n\n    //~ Instance fields\n    // ================================================================================================\n\n    protected final Log logger = LogFactory.getLog(getClass());\n\n    protected final MessageSourceAccessor messages = SpringSecurityWebAuthnMessageSource.getAccessor();\n    private final WebAuthnAuthenticatorService authenticatorService;\n    private final WebAuthnManager webAuthnManager;\n    private boolean hideCredentialIdNotFoundExceptions = true;\n\n    // ~ Constructor\n    // ========================================================================================================\n\n    public WebAuthnAuthenticationProvider(\n            WebAuthnAuthenticatorService authenticatorService,\n            WebAuthnManager webAuthnManager) {\n\n        Assert.notNull(authenticatorService, \"authenticatorService must not be null\");\n        Assert.notNull(webAuthnManager, \"webAuthnManager must not be null\");\n\n        this.authenticatorService = authenticatorService;\n        this.webAuthnManager = webAuthnManager;\n    }\n\n    // ~ Methods\n    // ========================================================================================================\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public Authentication authenticate(Authentication authentication) {\n        if (!supports(authentication.getClass())) {\n            throw new IllegalArgumentException(\"Only WebAuthnAssertionAuthenticationToken is supported, \" + authentication.getClass() + \" was attempted\");\n        }\n\n        WebAuthnAssertionAuthenticationToken authenticationToken = (WebAuthnAssertionAuthenticationToken) authentication;\n\n        WebAuthnAuthenticationRequest credentials = authenticationToken.getCredentials();\n        if (credentials == null) {\n            logger.debug(\"Authentication failed: no credentials provided\");\n\n            throw new BadCredentialsException(messages.getMessage(\n                    \"WebAuthnAuthenticationProvider.badCredentials\",\n                    \"Bad credentials\"));\n        }\n\n        byte[] credentialId = credentials.getCredentialId();\n        WebAuthnAuthenticator webAuthnAuthenticator = retrieveAuthenticator(credentialId);\n\n        doAuthenticate(authenticationToken, webAuthnAuthenticator);\n        authenticatorService.updateCounter(credentialId, webAuthnAuthenticator.getCounter());\n\n        return createSuccessAuthentication(authenticationToken, webAuthnAuthenticator);\n    }\n\n    protected Authentication createSuccessAuthentication(WebAuthnAssertionAuthenticationToken authenticationToken, WebAuthnAuthenticator webAuthnAuthenticator) {\n        Object principal = webAuthnAuthenticator.getUserPrincipal();\n        Collection<? extends GrantedAuthority> authorities = null;\n        if(principal instanceof UserDetails){\n            authorities = ((UserDetails)principal).getAuthorities();\n        }\n\n        WebAuthnAuthenticationToken webAuthnAuthenticationToken = new WebAuthnAuthenticationToken(\n                principal,\n                authenticationToken.getCredentials(),\n                authorities);\n        webAuthnAuthenticationToken.setDetails(authenticationToken.getDetails());\n        return webAuthnAuthenticationToken;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean supports(Class<?> authentication) {\n        return WebAuthnAssertionAuthenticationToken.class.isAssignableFrom(authentication);\n    }\n\n    void doAuthenticate(WebAuthnAssertionAuthenticationToken authenticationToken, WebAuthnAuthenticator webAuthnAuthenticator) {\n\n        WebAuthnAuthenticationRequest request = authenticationToken.getCredentials();\n        WebAuthnAuthenticationParameters parameters = authenticationToken.getParameters();\n\n        AuthenticationRequest authenticationRequest = new AuthenticationRequest(\n                request.getCredentialId(),\n                request.getAuthenticatorData(),\n                request.getClientDataJSON(),\n                request.getClientExtensionsJSON(),\n                request.getSignature()\n        );\n        AuthenticationParameters authenticationParameters = new AuthenticationParameters(\n                parameters.getServerProperty(),\n                new AuthenticatorImpl(\n                        webAuthnAuthenticator.getAttestedCredentialData(),\n                        webAuthnAuthenticator.getAttestationStatement(),\n                        webAuthnAuthenticator.getCounter(),\n                        webAuthnAuthenticator.getTransports(),\n                        webAuthnAuthenticator.getClientExtensions(),\n                        webAuthnAuthenticator.getAuthenticatorExtensions()),\n                null,\n                parameters.isUserVerificationRequired(),\n                parameters.isUserPresenceRequired()\n        );\n\n        try {\n            webAuthnManager.validate(authenticationRequest, authenticationParameters);\n        } catch (WebAuthnException e) {\n            throw ExceptionUtil.wrapWithAuthenticationException(e);\n        }\n\n    }\n\n    public boolean isHideCredentialIdNotFoundExceptions() {\n        return hideCredentialIdNotFoundExceptions;\n    }\n\n    /**\n     * By default the <code>WebAuthnAuthenticationProvider</code> throws a\n     * <code>BadCredentialsException</code> if a credentialId is not found or the credential is\n     * incorrect. Setting this property to <code>false</code> will cause\n     * <code>CredentialIdNotFoundException</code>s to be thrown instead for the former. Note\n     * this is considered less secure than throwing <code>BadCredentialsException</code>\n     * for both exceptions.\n     *\n     * @param hideCredentialIdNotFoundExceptions set to <code>false</code> if you wish\n     *                                           <code>CredentialIdNotFoundException</code>s to be thrown instead of the non-specific\n     *                                           <code>BadCredentialsException</code> (defaults to <code>true</code>)\n     */\n    public void setHideCredentialIdNotFoundExceptions(boolean hideCredentialIdNotFoundExceptions) {\n        this.hideCredentialIdNotFoundExceptions = hideCredentialIdNotFoundExceptions;\n    }\n\n    WebAuthnAuthenticator retrieveAuthenticator(byte[] credentialId) {\n        WebAuthnAuthenticator webAuthnAuthenticator;\n        try {\n            webAuthnAuthenticator = authenticatorService.loadAuthenticatorByCredentialId(credentialId);\n        } catch (CredentialIdNotFoundException notFound) {\n            if (hideCredentialIdNotFoundExceptions) {\n                throw new BadCredentialsException(messages.getMessage(\n                        \"WebAuthnAuthenticationProvider.badCredentials\",\n                        \"Bad credentials\"));\n            } else {\n                throw notFound;\n            }\n        } catch (Exception repositoryProblem) {\n            throw new InternalAuthenticationServiceException(repositoryProblem.getMessage(), repositoryProblem);\n        }\n\n        if (webAuthnAuthenticator == null) {\n            throw new InternalAuthenticationServiceException(\n                    \"WebAuthnAuthenticatorService returned null, which is an interface contract violation\");\n        }\n        return webAuthnAuthenticator;\n    }\n\n}\n"], "fixing_code": ["# WebAuthn4J Spring Security\n\n[![Actions Status](https://github.com/webauthn4j/webauthn4j-spring-security/workflows/CI/badge.svg)](https://github.com/webauthn4j/webauthn4j-spring-security/actions)\n[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=webauthn4j-spring-security&metric=coverage)](https://sonarcloud.io/dashboard?id=webauthn4j-spring-security)\n[![Maven Central](https://img.shields.io/maven-central/v/com.webauthn4j/webauthn4j-spring-security-core.svg)](https://search.maven.org/search?q=webauthn4j-spring-security)\n[![license](https://img.shields.io/github/license/webauthn4j/webauthn4j-spring-security.svg)](https://github.com/webauthn4j/webauthn4j-spring-security/blob/master/LICENSE.txt)\n\nWebAuthn4J Spring Security provides [Web Authentication specification](https://www.w3.org/TR/2019/REC-webauthn-1-20190304/) support for your Spring application by using [WebAuthn4J library](https://github.com/webauthn4j/webauthn4j).\nUsers can login with WebAuthn compliant authenticator.\n\n## Project status\n\nThis project is under active development. API signature may change.\n\n## Documentation\n\nYou can find out more details from the [reference](https://webauthn4j.github.io/webauthn4j-spring-security/en/).\n\n## Getting from Maven Central\n\nIf you are using Maven, just add the webauthn4j-spring-security as a dependency:\n\n```xml\n<properties>\n  ...\n  <!-- Use the latest version whenever possible. -->\n  <webauthn4j-spring-security.version>0.9.1.RELEASE</webauthn4j-spring-security.version>\n  ...\n</properties>\n\n<dependency>\n\t<groupId>com.webauthn4j</groupId>\n\t<artifactId>webauthn4j-spring-security-core</artifactId>\n\t<version>${webauthn4j-spring-security.version}</version>\n</dependency>\n```\n\n## Build\n\nWebAuthn4J Spring Security uses a Gradle based build system.\nIn the instructions below, `gradlew` is invoked from the root of the source tree and serves as a cross-platform,\nself-contained bootstrap mechanism for the build.\n\n### Prerequisites\n\n- Java8 or later\n- Spring Framework 5.0 or later\n\n### Checkout sources\n\n```bash\ngit clone https://github.com/webauthn4j/webauthn4j-spring-security\n```\n\n### Build all jars\n\n```bash\n./gradlew build\n```\n\n### Execute sample application\n\n```bash\n./gradlew samples:spa:bootRun\n```\n\n![Login view](./docs/src/reference/asciidoc/en/images/login.png \"Login view\")\n\n## Configuration\n\nWebAuthn4J Spring Security can be configured through Spring Security Java Config.\n\n```java\n@Configuration\n@EnableWebSecurity\npublic class WebSecurityConfig {\n\n    @Bean\n    public WebAuthnAuthenticationProvider webAuthnAuthenticationProvider(WebAuthnAuthenticatorService authenticatorService, WebAuthnManager webAuthnManager){\n        return new WebAuthnAuthenticationProvider(authenticatorService, webAuthnManager);\n    }\n\n    @Bean\n    public DaoAuthenticationProvider daoAuthenticationProvider(UserDetailsService userDetailsService){\n        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();\n        daoAuthenticationProvider.setUserDetailsService(userDetailsService);\n        daoAuthenticationProvider.setPasswordEncoder(new BCryptPasswordEncoder());\n        return daoAuthenticationProvider;\n    }\n\n    @Bean\n    public AuthenticationManager authenticationManager(List<AuthenticationProvider> providers){\n        return new ProviderManager(providers);\n    }\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http, AuthenticationManager authenticationManager) throws Exception {\n        // WebAuthn Login\n        http.apply(WebAuthnLoginConfigurer.webAuthnLogin())\n                .loginPage(\"/login\")\n                .usernameParameter(\"username\")\n                .passwordParameter(\"rawPassword\")\n                .credentialIdParameter(\"credentialId\")\n                .clientDataJSONParameter(\"clientDataJSON\")\n                .authenticatorDataParameter(\"authenticatorData\")\n                .signatureParameter(\"signature\")\n                .clientExtensionsJSONParameter(\"clientExtensionsJSON\")\n                .loginProcessingUrl(\"/login\")\n                .rpId(\"example.com\")\n                .attestationOptionsEndpoint()\n                .attestationOptionsProvider(attestationOptionsProvider)\n                .processingUrl(\"/webauthn/attestation/options\")\n                .rp()\n                .name(\"example\")\n                .and()\n                .pubKeyCredParams(\n                        new PublicKeyCredentialParameters(PublicKeyCredentialType.PUBLIC_KEY, COSEAlgorithmIdentifier.ES256),\n                        new PublicKeyCredentialParameters(PublicKeyCredentialType.PUBLIC_KEY, COSEAlgorithmIdentifier.RS1)\n                )\n                .authenticatorSelection()\n                .authenticatorAttachment(AuthenticatorAttachment.CROSS_PLATFORM)\n                .residentKey(ResidentKeyRequirement.PREFERRED)\n                .userVerification(UserVerificationRequirement.PREFERRED)\n                .and()\n                .attestation(AttestationConveyancePreference.DIRECT)\n                .extensions()\n                .credProps(true)\n                .uvm(true)\n                .and()\n                .assertionOptionsEndpoint()\n                .assertionOptionsProvider(assertionOptionsProvider)\n                .processingUrl(\"/webauthn/assertion/options\")\n                .rpId(\"example.com\")\n                .userVerification(UserVerificationRequirement.PREFERRED)\n                .and()\n                .authenticationManager(authenticationManager);\n    }\n}\n```\n\n\n## License\n\nWebAuthn4J Spring Security is Open Source software released under the\n[Apache 2.0 license](http://www.apache.org/licenses/LICENSE-2.0.html).\n", "#\n# Copyright 2002-2019 the original author or authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nwebAuthn4JSpringSecurityVersion=0.9.1.RELEASE\nlatestReleasedWebAuthn4JSpringSecurityVersion=0.9.1.RELEASE\n", "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage e2e;\n\nimport com.webauthn4j.springframework.security.authenticator.WebAuthnAuthenticatorService;\nimport com.webauthn4j.springframework.security.webauthn.sample.SampleSPA;\nimport e2e.page.AuthenticatorLoginComponent;\nimport e2e.page.PasswordLoginComponent;\nimport e2e.page.ProfileComponent;\nimport e2e.page.SignupComponent;\nimport io.github.bonigarcia.wdm.WebDriverManager;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.openqa.selenium.virtualauthenticator.HasVirtualAuthenticator;\nimport org.openqa.selenium.virtualauthenticator.VirtualAuthenticatorOptions;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport java.time.Duration;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = SampleSPA.class, webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)\npublic class RegistrationAndAuthenticationE2ETest {\n\n    private WebDriver driver;\n    private WebDriverWait wait;\n\n    @Autowired\n    private WebAuthnAuthenticatorService webAuthnAuthenticatorService;\n\n    @BeforeClass\n    public static void setupClassTest() {\n        WebDriverManager.chromedriver().setup();\n    }\n\n    @Before\n    public void setupTest() {\n        ChromeOptions chromeOptions = new ChromeOptions();\n        chromeOptions.addArguments(\"--headless=new\");\n        chromeOptions.addArguments(\"--remote-allow-origins=*\");\n        driver = new ChromeDriver(chromeOptions);\n        wait = new WebDriverWait(driver, Duration.ofSeconds(5));\n        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));\n    }\n\n    @After\n    public void teardown() {\n        if (driver != null) {\n            driver.quit();\n        }\n    }\n\n    @Test\n    public void test() {\n\n        VirtualAuthenticatorOptions options = new VirtualAuthenticatorOptions();\n        ((HasVirtualAuthenticator) driver).addVirtualAuthenticator(options);\n\n        // Registration\n        SignupComponent signupComponent = new SignupComponent(driver);\n        signupComponent.navigate();\n        signupComponent.setFirstname(\"John\");\n        signupComponent.setLastname(\"Doe\");\n        signupComponent.setUsername(\"john.doe@example.com\");\n        signupComponent.setPassword(\"password\");\n        signupComponent.clickAddAuthenticator();\n        signupComponent.getResidentKeyRequirementDialog().clickNo();\n        signupComponent.waitRegisterClickable();\n        signupComponent.clickRegister();\n\n        wait.until(ExpectedConditions.urlToBe(\"http://localhost:8080/angular/login\"));\n        long counterValueAtRegistrationPhase = webAuthnAuthenticatorService.loadAuthenticatorsByUserPrincipal(\"john.doe@example.com\").get(0).getCounter();\n\n        // Password authentication\n        PasswordLoginComponent passwordLoginComponent = new PasswordLoginComponent(driver);\n        passwordLoginComponent.setUsername(\"john.doe@example.com\");\n        passwordLoginComponent.setPassword(\"password\");\n        passwordLoginComponent.clickLogin();\n\n        // 2nd-factor authentication\n        AuthenticatorLoginComponent authenticatorLoginComponent = new AuthenticatorLoginComponent(driver);\n        // nop\n\n        wait.until(ExpectedConditions.urlToBe(\"http://localhost:8080/angular/profile\"));\n        long counterValueAtAuthenticationPhase = webAuthnAuthenticatorService.loadAuthenticatorsByUserPrincipal(\"john.doe@example.com\").get(0).getCounter();\n\n        assertThat(counterValueAtAuthenticationPhase).isGreaterThan(counterValueAtRegistrationPhase);\n\n        ProfileComponent profileComponent = new ProfileComponent(driver);\n\n    }\n\n}\n", "/*\n * Copyright 2002-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.webauthn4j.springframework.security;\n\nimport com.webauthn4j.WebAuthnManager;\nimport com.webauthn4j.authenticator.AuthenticatorImpl;\nimport com.webauthn4j.data.AuthenticationParameters;\nimport com.webauthn4j.data.AuthenticationRequest;\nimport com.webauthn4j.springframework.security.authenticator.WebAuthnAuthenticator;\nimport com.webauthn4j.springframework.security.authenticator.WebAuthnAuthenticatorService;\nimport com.webauthn4j.springframework.security.exception.CredentialIdNotFoundException;\nimport com.webauthn4j.springframework.security.util.internal.ExceptionUtil;\nimport com.webauthn4j.util.exception.WebAuthnException;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.context.support.MessageSourceAccessor;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.BadCredentialsException;\nimport org.springframework.security.authentication.InternalAuthenticationServiceException;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.util.Assert;\n\nimport java.util.Collection;\n\n/**\n * An {@link AuthenticationProvider} implementation for processing {@link WebAuthnAssertionAuthenticationToken}\n */\npublic class WebAuthnAuthenticationProvider implements AuthenticationProvider {\n\n    //~ Instance fields\n    // ================================================================================================\n\n    protected final Log logger = LogFactory.getLog(getClass());\n\n    protected final MessageSourceAccessor messages = SpringSecurityWebAuthnMessageSource.getAccessor();\n    private final WebAuthnAuthenticatorService authenticatorService;\n    private final WebAuthnManager webAuthnManager;\n    private boolean hideCredentialIdNotFoundExceptions = true;\n\n    // ~ Constructor\n    // ========================================================================================================\n\n    public WebAuthnAuthenticationProvider(\n            WebAuthnAuthenticatorService authenticatorService,\n            WebAuthnManager webAuthnManager) {\n\n        Assert.notNull(authenticatorService, \"authenticatorService must not be null\");\n        Assert.notNull(webAuthnManager, \"webAuthnManager must not be null\");\n\n        this.authenticatorService = authenticatorService;\n        this.webAuthnManager = webAuthnManager;\n    }\n\n    // ~ Methods\n    // ========================================================================================================\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public Authentication authenticate(Authentication authentication) {\n        if (!supports(authentication.getClass())) {\n            throw new IllegalArgumentException(\"Only WebAuthnAssertionAuthenticationToken is supported, \" + authentication.getClass() + \" was attempted\");\n        }\n\n        WebAuthnAssertionAuthenticationToken authenticationToken = (WebAuthnAssertionAuthenticationToken) authentication;\n\n        WebAuthnAuthenticationRequest credentials = authenticationToken.getCredentials();\n        if (credentials == null) {\n            logger.debug(\"Authentication failed: no credentials provided\");\n\n            throw new BadCredentialsException(messages.getMessage(\n                    \"WebAuthnAuthenticationProvider.badCredentials\",\n                    \"Bad credentials\"));\n        }\n\n        byte[] credentialId = credentials.getCredentialId();\n        WebAuthnAuthenticator webAuthnAuthenticator = retrieveAuthenticator(credentialId);\n\n        doAuthenticate(authenticationToken, webAuthnAuthenticator);\n        authenticatorService.updateCounter(credentialId, webAuthnAuthenticator.getCounter());\n\n        return createSuccessAuthentication(authenticationToken, webAuthnAuthenticator);\n    }\n\n    protected Authentication createSuccessAuthentication(WebAuthnAssertionAuthenticationToken authenticationToken, WebAuthnAuthenticator webAuthnAuthenticator) {\n        Object principal = webAuthnAuthenticator.getUserPrincipal();\n        Collection<? extends GrantedAuthority> authorities = null;\n        if(principal instanceof UserDetails){\n            authorities = ((UserDetails)principal).getAuthorities();\n        }\n\n        WebAuthnAuthenticationToken webAuthnAuthenticationToken = new WebAuthnAuthenticationToken(\n                principal,\n                authenticationToken.getCredentials(),\n                authorities);\n        webAuthnAuthenticationToken.setDetails(authenticationToken.getDetails());\n        return webAuthnAuthenticationToken;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean supports(Class<?> authentication) {\n        return WebAuthnAssertionAuthenticationToken.class.isAssignableFrom(authentication);\n    }\n\n    void doAuthenticate(WebAuthnAssertionAuthenticationToken authenticationToken, WebAuthnAuthenticator webAuthnAuthenticator) {\n\n        WebAuthnAuthenticationRequest request = authenticationToken.getCredentials();\n        WebAuthnAuthenticationParameters parameters = authenticationToken.getParameters();\n\n        AuthenticationRequest authenticationRequest = new AuthenticationRequest(\n                request.getCredentialId(),\n                request.getAuthenticatorData(),\n                request.getClientDataJSON(),\n                request.getClientExtensionsJSON(),\n                request.getSignature()\n        );\n        AuthenticationParameters authenticationParameters = new AuthenticationParameters(\n                parameters.getServerProperty(),\n                webAuthnAuthenticator,\n                null,\n                parameters.isUserVerificationRequired(),\n                parameters.isUserPresenceRequired()\n        );\n\n        try {\n            webAuthnManager.validate(authenticationRequest, authenticationParameters);\n        } catch (WebAuthnException e) {\n            throw ExceptionUtil.wrapWithAuthenticationException(e);\n        }\n\n    }\n\n    public boolean isHideCredentialIdNotFoundExceptions() {\n        return hideCredentialIdNotFoundExceptions;\n    }\n\n    /**\n     * By default the <code>WebAuthnAuthenticationProvider</code> throws a\n     * <code>BadCredentialsException</code> if a credentialId is not found or the credential is\n     * incorrect. Setting this property to <code>false</code> will cause\n     * <code>CredentialIdNotFoundException</code>s to be thrown instead for the former. Note\n     * this is considered less secure than throwing <code>BadCredentialsException</code>\n     * for both exceptions.\n     *\n     * @param hideCredentialIdNotFoundExceptions set to <code>false</code> if you wish\n     *                                           <code>CredentialIdNotFoundException</code>s to be thrown instead of the non-specific\n     *                                           <code>BadCredentialsException</code> (defaults to <code>true</code>)\n     */\n    public void setHideCredentialIdNotFoundExceptions(boolean hideCredentialIdNotFoundExceptions) {\n        this.hideCredentialIdNotFoundExceptions = hideCredentialIdNotFoundExceptions;\n    }\n\n    WebAuthnAuthenticator retrieveAuthenticator(byte[] credentialId) {\n        WebAuthnAuthenticator webAuthnAuthenticator;\n        try {\n            webAuthnAuthenticator = authenticatorService.loadAuthenticatorByCredentialId(credentialId);\n        } catch (CredentialIdNotFoundException notFound) {\n            if (hideCredentialIdNotFoundExceptions) {\n                throw new BadCredentialsException(messages.getMessage(\n                        \"WebAuthnAuthenticationProvider.badCredentials\",\n                        \"Bad credentials\"));\n            } else {\n                throw notFound;\n            }\n        } catch (Exception repositoryProblem) {\n            throw new InternalAuthenticationServiceException(repositoryProblem.getMessage(), repositoryProblem);\n        }\n\n        if (webAuthnAuthenticator == null) {\n            throw new InternalAuthenticationServiceException(\n                    \"WebAuthnAuthenticatorService returned null, which is an interface contract violation\");\n        }\n        return webAuthnAuthenticator;\n    }\n\n}\n"], "filenames": ["README.md", "gradle.properties", "samples/spa/src/test/java/e2e/RegistrationAndAuthenticationE2ETest.java", "webauthn4j-spring-security-core/src/main/java/com/webauthn4j/springframework/security/WebAuthnAuthenticationProvider.java"], "buggy_code_start_loc": [27, 16, 18, 139], "buggy_code_end_loc": [28, 18, 100, 146], "fixing_code_start_loc": [27, 16, 19, 139], "fixing_code_end_loc": [28, 18, 114, 140], "type": "CWE-287", "message": "WebAuthn4J Spring Security provides Web Authentication specification support for Spring applications. Affected versions are subject to improper signature counter value handling. A flaw was found in webauthn4j-spring-security-core. When an authneticator returns an incremented signature counter value during authentication, webauthn4j-spring-security-core does not properly persist the value, which means cloned authenticator detection does not work. An attacker who cloned valid authenticator in some way can use the cloned authenticator without being detected. This issue has been addressed in version `0.9.1.RELEASE`. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n", "other": {"cve": {"id": "CVE-2023-45669", "sourceIdentifier": "security-advisories@github.com", "published": "2023-10-16T19:15:11.167", "lastModified": "2023-10-20T12:17:31.490", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "WebAuthn4J Spring Security provides Web Authentication specification support for Spring applications. Affected versions are subject to improper signature counter value handling. A flaw was found in webauthn4j-spring-security-core. When an authneticator returns an incremented signature counter value during authentication, webauthn4j-spring-security-core does not properly persist the value, which means cloned authenticator detection does not work. An attacker who cloned valid authenticator in some way can use the cloned authenticator without being detected. This issue has been addressed in version `0.9.1.RELEASE`. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n"}, {"lang": "es", "value": "WebAuthn4J Spring Security proporciona soporte de especificaci\u00f3n de autenticaci\u00f3n web para aplicaciones Spring. Las versiones afectadas est\u00e1n sujetas a un manejo inadecuado del valor del contador de firmas. Se encontr\u00f3 una falla en webautn4j-spring-security-core. Cuando un autenticador devuelve un valor de contador de firma incrementado durante la autenticaci\u00f3n, webauthn4j-spring-security-core no conserva correctamente el valor, lo que significa que la detecci\u00f3n del autenticador clonado no funciona. Un atacante que clon\u00f3 un autenticador v\u00e1lido de alguna manera puede utilizar el autenticador clonado sin ser detectado. Este problema se solucion\u00f3 en la versi\u00f3n `0.9.1.RELEASE`. Se recomienda a los usuarios que actualicen. No se conocen workarounds para esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 2.5}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-287"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:webauthn4j:spring_security:*:*:*:*:*:spring:*:*", "versionEndExcluding": "0.9.1", "matchCriteriaId": "C036992E-5946-498B-A788-E72C49955376"}]}]}], "references": [{"url": "https://github.com/webauthn4j/webauthn4j-spring-security/commit/129700d74d83f9b9a82bf88ebc63707e3cb0a725", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/webauthn4j/webauthn4j-spring-security/security/advisories/GHSA-v9hx-v6vf-g36j", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://www.w3.org/TR/2021/REC-webauthn-2-20210408/#sctn-sign-counter", "source": "security-advisories@github.com", "tags": ["Technical Description"]}]}, "github_commit_url": "https://github.com/webauthn4j/webauthn4j-spring-security/commit/129700d74d83f9b9a82bf88ebc63707e3cb0a725"}}