{"buggy_code": ["/*\n * INET\t\tAn implementation of the TCP/IP protocol suite for the LINUX\n *\t\toperating system.  INET is implemented using the  BSD Socket\n *\t\tinterface as the means of communication with the user level.\n *\n *\t\tImplementation of the Transmission Control Protocol(TCP).\n *\n * Authors:\tRoss Biro\n *\t\tFred N. van Kempen, <waltje@uWalt.NL.Mugnet.ORG>\n *\t\tMark Evans, <evansmp@uhura.aston.ac.uk>\n *\t\tCorey Minyard <wf-rch!minyard@relay.EU.net>\n *\t\tFlorian La Roche, <flla@stud.uni-sb.de>\n *\t\tCharles Hedrick, <hedrick@klinzhai.rutgers.edu>\n *\t\tLinus Torvalds, <torvalds@cs.helsinki.fi>\n *\t\tAlan Cox, <gw4pts@gw4pts.ampr.org>\n *\t\tMatthew Dillon, <dillon@apollo.west.oic.com>\n *\t\tArnt Gulbrandsen, <agulbra@nvg.unit.no>\n *\t\tJorge Cwik, <jorge@laser.satlink.net>\n */\n\n/*\n * Changes:\n *\t\tPedro Roque\t:\tFast Retransmit/Recovery.\n *\t\t\t\t\tTwo receive queues.\n *\t\t\t\t\tRetransmit queue handled by TCP.\n *\t\t\t\t\tBetter retransmit timer handling.\n *\t\t\t\t\tNew congestion avoidance.\n *\t\t\t\t\tHeader prediction.\n *\t\t\t\t\tVariable renaming.\n *\n *\t\tEric\t\t:\tFast Retransmit.\n *\t\tRandy Scott\t:\tMSS option defines.\n *\t\tEric Schenk\t:\tFixes to slow start algorithm.\n *\t\tEric Schenk\t:\tYet another double ACK bug.\n *\t\tEric Schenk\t:\tDelayed ACK bug fixes.\n *\t\tEric Schenk\t:\tFloyd style fast retrans war avoidance.\n *\t\tDavid S. Miller\t:\tDon't allow zero congestion window.\n *\t\tEric Schenk\t:\tFix retransmitter so that it sends\n *\t\t\t\t\tnext packet on ack of previous packet.\n *\t\tAndi Kleen\t:\tMoved open_request checking here\n *\t\t\t\t\tand process RSTs for open_requests.\n *\t\tAndi Kleen\t:\tBetter prune_queue, and other fixes.\n *\t\tAndrey Savochkin:\tFix RTT measurements in the presence of\n *\t\t\t\t\ttimestamps.\n *\t\tAndrey Savochkin:\tCheck sequence numbers correctly when\n *\t\t\t\t\tremoving SACKs due to in sequence incoming\n *\t\t\t\t\tdata segments.\n *\t\tAndi Kleen:\t\tMake sure we never ack data there is not\n *\t\t\t\t\tenough room for. Also make this condition\n *\t\t\t\t\ta fatal error if it might still happen.\n *\t\tAndi Kleen:\t\tAdd tcp_measure_rcv_mss to make\n *\t\t\t\t\tconnections with MSS<min(MTU,ann. MSS)\n *\t\t\t\t\twork without delayed acks.\n *\t\tAndi Kleen:\t\tProcess packets with PSH set in the\n *\t\t\t\t\tfast path.\n *\t\tJ Hadi Salim:\t\tECN support\n *\t \tAndrei Gurtov,\n *\t\tPasi Sarolahti,\n *\t\tPanu Kuhlberg:\t\tExperimental audit of TCP (re)transmission\n *\t\t\t\t\tengine. Lots of bugs are found.\n *\t\tPasi Sarolahti:\t\tF-RTO for dealing with spurious RTOs\n */\n\n#include <linux/mm.h>\n#include <linux/slab.h>\n#include <linux/module.h>\n#include <linux/sysctl.h>\n#include <linux/kernel.h>\n#include <net/dst.h>\n#include <net/tcp.h>\n#include <net/inet_common.h>\n#include <linux/ipsec.h>\n#include <asm/unaligned.h>\n#include <net/netdma.h>\n\nint sysctl_tcp_timestamps __read_mostly = 1;\nint sysctl_tcp_window_scaling __read_mostly = 1;\nint sysctl_tcp_sack __read_mostly = 1;\nint sysctl_tcp_fack __read_mostly = 1;\nint sysctl_tcp_reordering __read_mostly = TCP_FASTRETRANS_THRESH;\nEXPORT_SYMBOL(sysctl_tcp_reordering);\nint sysctl_tcp_ecn __read_mostly = 2;\nEXPORT_SYMBOL(sysctl_tcp_ecn);\nint sysctl_tcp_dsack __read_mostly = 1;\nint sysctl_tcp_app_win __read_mostly = 31;\nint sysctl_tcp_adv_win_scale __read_mostly = 2;\nEXPORT_SYMBOL(sysctl_tcp_adv_win_scale);\n\nint sysctl_tcp_stdurg __read_mostly;\nint sysctl_tcp_rfc1337 __read_mostly;\nint sysctl_tcp_max_orphans __read_mostly = NR_FILE;\nint sysctl_tcp_frto __read_mostly = 2;\nint sysctl_tcp_frto_response __read_mostly;\nint sysctl_tcp_nometrics_save __read_mostly;\n\nint sysctl_tcp_thin_dupack __read_mostly;\n\nint sysctl_tcp_moderate_rcvbuf __read_mostly = 1;\nint sysctl_tcp_abc __read_mostly;\n\n#define FLAG_DATA\t\t0x01 /* Incoming frame contained data.\t\t*/\n#define FLAG_WIN_UPDATE\t\t0x02 /* Incoming ACK was a window update.\t*/\n#define FLAG_DATA_ACKED\t\t0x04 /* This ACK acknowledged new data.\t\t*/\n#define FLAG_RETRANS_DATA_ACKED\t0x08 /* \"\" \"\" some of which was retransmitted.\t*/\n#define FLAG_SYN_ACKED\t\t0x10 /* This ACK acknowledged SYN.\t\t*/\n#define FLAG_DATA_SACKED\t0x20 /* New SACK.\t\t\t\t*/\n#define FLAG_ECE\t\t0x40 /* ECE in this ACK\t\t\t\t*/\n#define FLAG_DATA_LOST\t\t0x80 /* SACK detected data lossage.\t\t*/\n#define FLAG_SLOWPATH\t\t0x100 /* Do not skip RFC checks for window update.*/\n#define FLAG_ONLY_ORIG_SACKED\t0x200 /* SACKs only non-rexmit sent before RTO */\n#define FLAG_SND_UNA_ADVANCED\t0x400 /* Snd_una was changed (!= FLAG_DATA_ACKED) */\n#define FLAG_DSACKING_ACK\t0x800 /* SACK blocks contained D-SACK info */\n#define FLAG_NONHEAD_RETRANS_ACKED\t0x1000 /* Non-head rexmitted data was ACKed */\n#define FLAG_SACK_RENEGING\t0x2000 /* snd_una advanced to a sacked seq */\n\n#define FLAG_ACKED\t\t(FLAG_DATA_ACKED|FLAG_SYN_ACKED)\n#define FLAG_NOT_DUP\t\t(FLAG_DATA|FLAG_WIN_UPDATE|FLAG_ACKED)\n#define FLAG_CA_ALERT\t\t(FLAG_DATA_SACKED|FLAG_ECE)\n#define FLAG_FORWARD_PROGRESS\t(FLAG_ACKED|FLAG_DATA_SACKED)\n#define FLAG_ANY_PROGRESS\t(FLAG_FORWARD_PROGRESS|FLAG_SND_UNA_ADVANCED)\n\n#define TCP_REMNANT (TCP_FLAG_FIN|TCP_FLAG_URG|TCP_FLAG_SYN|TCP_FLAG_PSH)\n#define TCP_HP_BITS (~(TCP_RESERVED_BITS|TCP_FLAG_PSH))\n\n/* Adapt the MSS value used to make delayed ack decision to the\n * real world.\n */\nstatic void tcp_measure_rcv_mss(struct sock *sk, const struct sk_buff *skb)\n{\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\tconst unsigned int lss = icsk->icsk_ack.last_seg_size;\n\tunsigned int len;\n\n\ticsk->icsk_ack.last_seg_size = 0;\n\n\t/* skb->len may jitter because of SACKs, even if peer\n\t * sends good full-sized frames.\n\t */\n\tlen = skb_shinfo(skb)->gso_size ? : skb->len;\n\tif (len >= icsk->icsk_ack.rcv_mss) {\n\t\ticsk->icsk_ack.rcv_mss = len;\n\t} else {\n\t\t/* Otherwise, we make more careful check taking into account,\n\t\t * that SACKs block is variable.\n\t\t *\n\t\t * \"len\" is invariant segment length, including TCP header.\n\t\t */\n\t\tlen += skb->data - skb_transport_header(skb);\n\t\tif (len >= TCP_MSS_DEFAULT + sizeof(struct tcphdr) ||\n\t\t    /* If PSH is not set, packet should be\n\t\t     * full sized, provided peer TCP is not badly broken.\n\t\t     * This observation (if it is correct 8)) allows\n\t\t     * to handle super-low mtu links fairly.\n\t\t     */\n\t\t    (len >= TCP_MIN_MSS + sizeof(struct tcphdr) &&\n\t\t     !(tcp_flag_word(tcp_hdr(skb)) & TCP_REMNANT))) {\n\t\t\t/* Subtract also invariant (if peer is RFC compliant),\n\t\t\t * tcp header plus fixed timestamp option length.\n\t\t\t * Resulting \"len\" is MSS free of SACK jitter.\n\t\t\t */\n\t\t\tlen -= tcp_sk(sk)->tcp_header_len;\n\t\t\ticsk->icsk_ack.last_seg_size = len;\n\t\t\tif (len == lss) {\n\t\t\t\ticsk->icsk_ack.rcv_mss = len;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (icsk->icsk_ack.pending & ICSK_ACK_PUSHED)\n\t\t\ticsk->icsk_ack.pending |= ICSK_ACK_PUSHED2;\n\t\ticsk->icsk_ack.pending |= ICSK_ACK_PUSHED;\n\t}\n}\n\nstatic void tcp_incr_quickack(struct sock *sk)\n{\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\tunsigned quickacks = tcp_sk(sk)->rcv_wnd / (2 * icsk->icsk_ack.rcv_mss);\n\n\tif (quickacks == 0)\n\t\tquickacks = 2;\n\tif (quickacks > icsk->icsk_ack.quick)\n\t\ticsk->icsk_ack.quick = min(quickacks, TCP_MAX_QUICKACKS);\n}\n\nstatic void tcp_enter_quickack_mode(struct sock *sk)\n{\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\ttcp_incr_quickack(sk);\n\ticsk->icsk_ack.pingpong = 0;\n\ticsk->icsk_ack.ato = TCP_ATO_MIN;\n}\n\n/* Send ACKs quickly, if \"quick\" count is not exhausted\n * and the session is not interactive.\n */\n\nstatic inline int tcp_in_quickack_mode(const struct sock *sk)\n{\n\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\treturn icsk->icsk_ack.quick && !icsk->icsk_ack.pingpong;\n}\n\nstatic inline void TCP_ECN_queue_cwr(struct tcp_sock *tp)\n{\n\tif (tp->ecn_flags & TCP_ECN_OK)\n\t\ttp->ecn_flags |= TCP_ECN_QUEUE_CWR;\n}\n\nstatic inline void TCP_ECN_accept_cwr(struct tcp_sock *tp, const struct sk_buff *skb)\n{\n\tif (tcp_hdr(skb)->cwr)\n\t\ttp->ecn_flags &= ~TCP_ECN_DEMAND_CWR;\n}\n\nstatic inline void TCP_ECN_withdraw_cwr(struct tcp_sock *tp)\n{\n\ttp->ecn_flags &= ~TCP_ECN_DEMAND_CWR;\n}\n\nstatic inline void TCP_ECN_check_ce(struct tcp_sock *tp, const struct sk_buff *skb)\n{\n\tif (!(tp->ecn_flags & TCP_ECN_OK))\n\t\treturn;\n\n\tswitch (TCP_SKB_CB(skb)->ip_dsfield & INET_ECN_MASK) {\n\tcase INET_ECN_NOT_ECT:\n\t\t/* Funny extension: if ECT is not set on a segment,\n\t\t * and we already seen ECT on a previous segment,\n\t\t * it is probably a retransmit.\n\t\t */\n\t\tif (tp->ecn_flags & TCP_ECN_SEEN)\n\t\t\ttcp_enter_quickack_mode((struct sock *)tp);\n\t\tbreak;\n\tcase INET_ECN_CE:\n\t\ttp->ecn_flags |= TCP_ECN_DEMAND_CWR;\n\t\t/* fallinto */\n\tdefault:\n\t\ttp->ecn_flags |= TCP_ECN_SEEN;\n\t}\n}\n\nstatic inline void TCP_ECN_rcv_synack(struct tcp_sock *tp, const struct tcphdr *th)\n{\n\tif ((tp->ecn_flags & TCP_ECN_OK) && (!th->ece || th->cwr))\n\t\ttp->ecn_flags &= ~TCP_ECN_OK;\n}\n\nstatic inline void TCP_ECN_rcv_syn(struct tcp_sock *tp, const struct tcphdr *th)\n{\n\tif ((tp->ecn_flags & TCP_ECN_OK) && (!th->ece || !th->cwr))\n\t\ttp->ecn_flags &= ~TCP_ECN_OK;\n}\n\nstatic inline int TCP_ECN_rcv_ecn_echo(const struct tcp_sock *tp, const struct tcphdr *th)\n{\n\tif (th->ece && !th->syn && (tp->ecn_flags & TCP_ECN_OK))\n\t\treturn 1;\n\treturn 0;\n}\n\n/* Buffer size and advertised window tuning.\n *\n * 1. Tuning sk->sk_sndbuf, when connection enters established state.\n */\n\nstatic void tcp_fixup_sndbuf(struct sock *sk)\n{\n\tint sndmem = SKB_TRUESIZE(tcp_sk(sk)->rx_opt.mss_clamp + MAX_TCP_HEADER);\n\n\tsndmem *= TCP_INIT_CWND;\n\tif (sk->sk_sndbuf < sndmem)\n\t\tsk->sk_sndbuf = min(sndmem, sysctl_tcp_wmem[2]);\n}\n\n/* 2. Tuning advertised window (window_clamp, rcv_ssthresh)\n *\n * All tcp_full_space() is split to two parts: \"network\" buffer, allocated\n * forward and advertised in receiver window (tp->rcv_wnd) and\n * \"application buffer\", required to isolate scheduling/application\n * latencies from network.\n * window_clamp is maximal advertised window. It can be less than\n * tcp_full_space(), in this case tcp_full_space() - window_clamp\n * is reserved for \"application\" buffer. The less window_clamp is\n * the smoother our behaviour from viewpoint of network, but the lower\n * throughput and the higher sensitivity of the connection to losses. 8)\n *\n * rcv_ssthresh is more strict window_clamp used at \"slow start\"\n * phase to predict further behaviour of this connection.\n * It is used for two goals:\n * - to enforce header prediction at sender, even when application\n *   requires some significant \"application buffer\". It is check #1.\n * - to prevent pruning of receive queue because of misprediction\n *   of receiver window. Check #2.\n *\n * The scheme does not work when sender sends good segments opening\n * window and then starts to feed us spaghetti. But it should work\n * in common situations. Otherwise, we have to rely on queue collapsing.\n */\n\n/* Slow part of check#2. */\nstatic int __tcp_grow_window(const struct sock *sk, const struct sk_buff *skb)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\t/* Optimize this! */\n\tint truesize = tcp_win_from_space(skb->truesize) >> 1;\n\tint window = tcp_win_from_space(sysctl_tcp_rmem[2]) >> 1;\n\n\twhile (tp->rcv_ssthresh <= window) {\n\t\tif (truesize <= skb->len)\n\t\t\treturn 2 * inet_csk(sk)->icsk_ack.rcv_mss;\n\n\t\ttruesize >>= 1;\n\t\twindow >>= 1;\n\t}\n\treturn 0;\n}\n\nstatic void tcp_grow_window(struct sock *sk, const struct sk_buff *skb)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\t/* Check #1 */\n\tif (tp->rcv_ssthresh < tp->window_clamp &&\n\t    (int)tp->rcv_ssthresh < tcp_space(sk) &&\n\t    !tcp_memory_pressure) {\n\t\tint incr;\n\n\t\t/* Check #2. Increase window, if skb with such overhead\n\t\t * will fit to rcvbuf in future.\n\t\t */\n\t\tif (tcp_win_from_space(skb->truesize) <= skb->len)\n\t\t\tincr = 2 * tp->advmss;\n\t\telse\n\t\t\tincr = __tcp_grow_window(sk, skb);\n\n\t\tif (incr) {\n\t\t\ttp->rcv_ssthresh = min(tp->rcv_ssthresh + incr,\n\t\t\t\t\t       tp->window_clamp);\n\t\t\tinet_csk(sk)->icsk_ack.quick |= 1;\n\t\t}\n\t}\n}\n\n/* 3. Tuning rcvbuf, when connection enters established state. */\n\nstatic void tcp_fixup_rcvbuf(struct sock *sk)\n{\n\tu32 mss = tcp_sk(sk)->advmss;\n\tu32 icwnd = TCP_DEFAULT_INIT_RCVWND;\n\tint rcvmem;\n\n\t/* Limit to 10 segments if mss <= 1460,\n\t * or 14600/mss segments, with a minimum of two segments.\n\t */\n\tif (mss > 1460)\n\t\ticwnd = max_t(u32, (1460 * TCP_DEFAULT_INIT_RCVWND) / mss, 2);\n\n\trcvmem = SKB_TRUESIZE(mss + MAX_TCP_HEADER);\n\twhile (tcp_win_from_space(rcvmem) < mss)\n\t\trcvmem += 128;\n\n\trcvmem *= icwnd;\n\n\tif (sk->sk_rcvbuf < rcvmem)\n\t\tsk->sk_rcvbuf = min(rcvmem, sysctl_tcp_rmem[2]);\n}\n\n/* 4. Try to fixup all. It is made immediately after connection enters\n *    established state.\n */\nstatic void tcp_init_buffer_space(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint maxwin;\n\n\tif (!(sk->sk_userlocks & SOCK_RCVBUF_LOCK))\n\t\ttcp_fixup_rcvbuf(sk);\n\tif (!(sk->sk_userlocks & SOCK_SNDBUF_LOCK))\n\t\ttcp_fixup_sndbuf(sk);\n\n\ttp->rcvq_space.space = tp->rcv_wnd;\n\n\tmaxwin = tcp_full_space(sk);\n\n\tif (tp->window_clamp >= maxwin) {\n\t\ttp->window_clamp = maxwin;\n\n\t\tif (sysctl_tcp_app_win && maxwin > 4 * tp->advmss)\n\t\t\ttp->window_clamp = max(maxwin -\n\t\t\t\t\t       (maxwin >> sysctl_tcp_app_win),\n\t\t\t\t\t       4 * tp->advmss);\n\t}\n\n\t/* Force reservation of one segment. */\n\tif (sysctl_tcp_app_win &&\n\t    tp->window_clamp > 2 * tp->advmss &&\n\t    tp->window_clamp + tp->advmss > maxwin)\n\t\ttp->window_clamp = max(2 * tp->advmss, maxwin - tp->advmss);\n\n\ttp->rcv_ssthresh = min(tp->rcv_ssthresh, tp->window_clamp);\n\ttp->snd_cwnd_stamp = tcp_time_stamp;\n}\n\n/* 5. Recalculate window clamp after socket hit its memory bounds. */\nstatic void tcp_clamp_window(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\n\ticsk->icsk_ack.quick = 0;\n\n\tif (sk->sk_rcvbuf < sysctl_tcp_rmem[2] &&\n\t    !(sk->sk_userlocks & SOCK_RCVBUF_LOCK) &&\n\t    !tcp_memory_pressure &&\n\t    atomic_long_read(&tcp_memory_allocated) < sysctl_tcp_mem[0]) {\n\t\tsk->sk_rcvbuf = min(atomic_read(&sk->sk_rmem_alloc),\n\t\t\t\t    sysctl_tcp_rmem[2]);\n\t}\n\tif (atomic_read(&sk->sk_rmem_alloc) > sk->sk_rcvbuf)\n\t\ttp->rcv_ssthresh = min(tp->window_clamp, 2U * tp->advmss);\n}\n\n/* Initialize RCV_MSS value.\n * RCV_MSS is an our guess about MSS used by the peer.\n * We haven't any direct information about the MSS.\n * It's better to underestimate the RCV_MSS rather than overestimate.\n * Overestimations make us ACKing less frequently than needed.\n * Underestimations are more easy to detect and fix by tcp_measure_rcv_mss().\n */\nvoid tcp_initialize_rcv_mss(struct sock *sk)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\tunsigned int hint = min_t(unsigned int, tp->advmss, tp->mss_cache);\n\n\thint = min(hint, tp->rcv_wnd / 2);\n\thint = min(hint, TCP_MSS_DEFAULT);\n\thint = max(hint, TCP_MIN_MSS);\n\n\tinet_csk(sk)->icsk_ack.rcv_mss = hint;\n}\nEXPORT_SYMBOL(tcp_initialize_rcv_mss);\n\n/* Receiver \"autotuning\" code.\n *\n * The algorithm for RTT estimation w/o timestamps is based on\n * Dynamic Right-Sizing (DRS) by Wu Feng and Mike Fisk of LANL.\n * <http://public.lanl.gov/radiant/pubs.html#DRS>\n *\n * More detail on this code can be found at\n * <http://staff.psc.edu/jheffner/>,\n * though this reference is out of date.  A new paper\n * is pending.\n */\nstatic void tcp_rcv_rtt_update(struct tcp_sock *tp, u32 sample, int win_dep)\n{\n\tu32 new_sample = tp->rcv_rtt_est.rtt;\n\tlong m = sample;\n\n\tif (m == 0)\n\t\tm = 1;\n\n\tif (new_sample != 0) {\n\t\t/* If we sample in larger samples in the non-timestamp\n\t\t * case, we could grossly overestimate the RTT especially\n\t\t * with chatty applications or bulk transfer apps which\n\t\t * are stalled on filesystem I/O.\n\t\t *\n\t\t * Also, since we are only going for a minimum in the\n\t\t * non-timestamp case, we do not smooth things out\n\t\t * else with timestamps disabled convergence takes too\n\t\t * long.\n\t\t */\n\t\tif (!win_dep) {\n\t\t\tm -= (new_sample >> 3);\n\t\t\tnew_sample += m;\n\t\t} else if (m < new_sample)\n\t\t\tnew_sample = m << 3;\n\t} else {\n\t\t/* No previous measure. */\n\t\tnew_sample = m << 3;\n\t}\n\n\tif (tp->rcv_rtt_est.rtt != new_sample)\n\t\ttp->rcv_rtt_est.rtt = new_sample;\n}\n\nstatic inline void tcp_rcv_rtt_measure(struct tcp_sock *tp)\n{\n\tif (tp->rcv_rtt_est.time == 0)\n\t\tgoto new_measure;\n\tif (before(tp->rcv_nxt, tp->rcv_rtt_est.seq))\n\t\treturn;\n\ttcp_rcv_rtt_update(tp, jiffies - tp->rcv_rtt_est.time, 1);\n\nnew_measure:\n\ttp->rcv_rtt_est.seq = tp->rcv_nxt + tp->rcv_wnd;\n\ttp->rcv_rtt_est.time = tcp_time_stamp;\n}\n\nstatic inline void tcp_rcv_rtt_measure_ts(struct sock *sk,\n\t\t\t\t\t  const struct sk_buff *skb)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tif (tp->rx_opt.rcv_tsecr &&\n\t    (TCP_SKB_CB(skb)->end_seq -\n\t     TCP_SKB_CB(skb)->seq >= inet_csk(sk)->icsk_ack.rcv_mss))\n\t\ttcp_rcv_rtt_update(tp, tcp_time_stamp - tp->rx_opt.rcv_tsecr, 0);\n}\n\n/*\n * This function should be called every time data is copied to user space.\n * It calculates the appropriate TCP receive buffer space.\n */\nvoid tcp_rcv_space_adjust(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint time;\n\tint space;\n\n\tif (tp->rcvq_space.time == 0)\n\t\tgoto new_measure;\n\n\ttime = tcp_time_stamp - tp->rcvq_space.time;\n\tif (time < (tp->rcv_rtt_est.rtt >> 3) || tp->rcv_rtt_est.rtt == 0)\n\t\treturn;\n\n\tspace = 2 * (tp->copied_seq - tp->rcvq_space.seq);\n\n\tspace = max(tp->rcvq_space.space, space);\n\n\tif (tp->rcvq_space.space != space) {\n\t\tint rcvmem;\n\n\t\ttp->rcvq_space.space = space;\n\n\t\tif (sysctl_tcp_moderate_rcvbuf &&\n\t\t    !(sk->sk_userlocks & SOCK_RCVBUF_LOCK)) {\n\t\t\tint new_clamp = space;\n\n\t\t\t/* Receive space grows, normalize in order to\n\t\t\t * take into account packet headers and sk_buff\n\t\t\t * structure overhead.\n\t\t\t */\n\t\t\tspace /= tp->advmss;\n\t\t\tif (!space)\n\t\t\t\tspace = 1;\n\t\t\trcvmem = SKB_TRUESIZE(tp->advmss + MAX_TCP_HEADER);\n\t\t\twhile (tcp_win_from_space(rcvmem) < tp->advmss)\n\t\t\t\trcvmem += 128;\n\t\t\tspace *= rcvmem;\n\t\t\tspace = min(space, sysctl_tcp_rmem[2]);\n\t\t\tif (space > sk->sk_rcvbuf) {\n\t\t\t\tsk->sk_rcvbuf = space;\n\n\t\t\t\t/* Make the window clamp follow along.  */\n\t\t\t\ttp->window_clamp = new_clamp;\n\t\t\t}\n\t\t}\n\t}\n\nnew_measure:\n\ttp->rcvq_space.seq = tp->copied_seq;\n\ttp->rcvq_space.time = tcp_time_stamp;\n}\n\n/* There is something which you must keep in mind when you analyze the\n * behavior of the tp->ato delayed ack timeout interval.  When a\n * connection starts up, we want to ack as quickly as possible.  The\n * problem is that \"good\" TCP's do slow start at the beginning of data\n * transmission.  The means that until we send the first few ACK's the\n * sender will sit on his end and only queue most of his data, because\n * he can only send snd_cwnd unacked packets at any given time.  For\n * each ACK we send, he increments snd_cwnd and transmits more of his\n * queue.  -DaveM\n */\nstatic void tcp_event_data_recv(struct sock *sk, struct sk_buff *skb)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\tu32 now;\n\n\tinet_csk_schedule_ack(sk);\n\n\ttcp_measure_rcv_mss(sk, skb);\n\n\ttcp_rcv_rtt_measure(tp);\n\n\tnow = tcp_time_stamp;\n\n\tif (!icsk->icsk_ack.ato) {\n\t\t/* The _first_ data packet received, initialize\n\t\t * delayed ACK engine.\n\t\t */\n\t\ttcp_incr_quickack(sk);\n\t\ticsk->icsk_ack.ato = TCP_ATO_MIN;\n\t} else {\n\t\tint m = now - icsk->icsk_ack.lrcvtime;\n\n\t\tif (m <= TCP_ATO_MIN / 2) {\n\t\t\t/* The fastest case is the first. */\n\t\t\ticsk->icsk_ack.ato = (icsk->icsk_ack.ato >> 1) + TCP_ATO_MIN / 2;\n\t\t} else if (m < icsk->icsk_ack.ato) {\n\t\t\ticsk->icsk_ack.ato = (icsk->icsk_ack.ato >> 1) + m;\n\t\t\tif (icsk->icsk_ack.ato > icsk->icsk_rto)\n\t\t\t\ticsk->icsk_ack.ato = icsk->icsk_rto;\n\t\t} else if (m > icsk->icsk_rto) {\n\t\t\t/* Too long gap. Apparently sender failed to\n\t\t\t * restart window, so that we send ACKs quickly.\n\t\t\t */\n\t\t\ttcp_incr_quickack(sk);\n\t\t\tsk_mem_reclaim(sk);\n\t\t}\n\t}\n\ticsk->icsk_ack.lrcvtime = now;\n\n\tTCP_ECN_check_ce(tp, skb);\n\n\tif (skb->len >= 128)\n\t\ttcp_grow_window(sk, skb);\n}\n\n/* Called to compute a smoothed rtt estimate. The data fed to this\n * routine either comes from timestamps, or from segments that were\n * known _not_ to have been retransmitted [see Karn/Partridge\n * Proceedings SIGCOMM 87]. The algorithm is from the SIGCOMM 88\n * piece by Van Jacobson.\n * NOTE: the next three routines used to be one big routine.\n * To save cycles in the RFC 1323 implementation it was better to break\n * it up into three procedures. -- erics\n */\nstatic void tcp_rtt_estimator(struct sock *sk, const __u32 mrtt)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tlong m = mrtt; /* RTT */\n\n\t/*\tThe following amusing code comes from Jacobson's\n\t *\tarticle in SIGCOMM '88.  Note that rtt and mdev\n\t *\tare scaled versions of rtt and mean deviation.\n\t *\tThis is designed to be as fast as possible\n\t *\tm stands for \"measurement\".\n\t *\n\t *\tOn a 1990 paper the rto value is changed to:\n\t *\tRTO = rtt + 4 * mdev\n\t *\n\t * Funny. This algorithm seems to be very broken.\n\t * These formulae increase RTO, when it should be decreased, increase\n\t * too slowly, when it should be increased quickly, decrease too quickly\n\t * etc. I guess in BSD RTO takes ONE value, so that it is absolutely\n\t * does not matter how to _calculate_ it. Seems, it was trap\n\t * that VJ failed to avoid. 8)\n\t */\n\tif (m == 0)\n\t\tm = 1;\n\tif (tp->srtt != 0) {\n\t\tm -= (tp->srtt >> 3);\t/* m is now error in rtt est */\n\t\ttp->srtt += m;\t\t/* rtt = 7/8 rtt + 1/8 new */\n\t\tif (m < 0) {\n\t\t\tm = -m;\t\t/* m is now abs(error) */\n\t\t\tm -= (tp->mdev >> 2);   /* similar update on mdev */\n\t\t\t/* This is similar to one of Eifel findings.\n\t\t\t * Eifel blocks mdev updates when rtt decreases.\n\t\t\t * This solution is a bit different: we use finer gain\n\t\t\t * for mdev in this case (alpha*beta).\n\t\t\t * Like Eifel it also prevents growth of rto,\n\t\t\t * but also it limits too fast rto decreases,\n\t\t\t * happening in pure Eifel.\n\t\t\t */\n\t\t\tif (m > 0)\n\t\t\t\tm >>= 3;\n\t\t} else {\n\t\t\tm -= (tp->mdev >> 2);   /* similar update on mdev */\n\t\t}\n\t\ttp->mdev += m;\t    \t/* mdev = 3/4 mdev + 1/4 new */\n\t\tif (tp->mdev > tp->mdev_max) {\n\t\t\ttp->mdev_max = tp->mdev;\n\t\t\tif (tp->mdev_max > tp->rttvar)\n\t\t\t\ttp->rttvar = tp->mdev_max;\n\t\t}\n\t\tif (after(tp->snd_una, tp->rtt_seq)) {\n\t\t\tif (tp->mdev_max < tp->rttvar)\n\t\t\t\ttp->rttvar -= (tp->rttvar - tp->mdev_max) >> 2;\n\t\t\ttp->rtt_seq = tp->snd_nxt;\n\t\t\ttp->mdev_max = tcp_rto_min(sk);\n\t\t}\n\t} else {\n\t\t/* no previous measure. */\n\t\ttp->srtt = m << 3;\t/* take the measured time to be rtt */\n\t\ttp->mdev = m << 1;\t/* make sure rto = 3*rtt */\n\t\ttp->mdev_max = tp->rttvar = max(tp->mdev, tcp_rto_min(sk));\n\t\ttp->rtt_seq = tp->snd_nxt;\n\t}\n}\n\n/* Calculate rto without backoff.  This is the second half of Van Jacobson's\n * routine referred to above.\n */\nstatic inline void tcp_set_rto(struct sock *sk)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\t/* Old crap is replaced with new one. 8)\n\t *\n\t * More seriously:\n\t * 1. If rtt variance happened to be less 50msec, it is hallucination.\n\t *    It cannot be less due to utterly erratic ACK generation made\n\t *    at least by solaris and freebsd. \"Erratic ACKs\" has _nothing_\n\t *    to do with delayed acks, because at cwnd>2 true delack timeout\n\t *    is invisible. Actually, Linux-2.4 also generates erratic\n\t *    ACKs in some circumstances.\n\t */\n\tinet_csk(sk)->icsk_rto = __tcp_set_rto(tp);\n\n\t/* 2. Fixups made earlier cannot be right.\n\t *    If we do not estimate RTO correctly without them,\n\t *    all the algo is pure shit and should be replaced\n\t *    with correct one. It is exactly, which we pretend to do.\n\t */\n\n\t/* NOTE: clamping at TCP_RTO_MIN is not required, current algo\n\t * guarantees that rto is higher.\n\t */\n\ttcp_bound_rto(sk);\n}\n\n/* Save metrics learned by this TCP session.\n   This function is called only, when TCP finishes successfully\n   i.e. when it enters TIME-WAIT or goes from LAST-ACK to CLOSE.\n */\nvoid tcp_update_metrics(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct dst_entry *dst = __sk_dst_get(sk);\n\n\tif (sysctl_tcp_nometrics_save)\n\t\treturn;\n\n\tdst_confirm(dst);\n\n\tif (dst && (dst->flags & DST_HOST)) {\n\t\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\t\tint m;\n\t\tunsigned long rtt;\n\n\t\tif (icsk->icsk_backoff || !tp->srtt) {\n\t\t\t/* This session failed to estimate rtt. Why?\n\t\t\t * Probably, no packets returned in time.\n\t\t\t * Reset our results.\n\t\t\t */\n\t\t\tif (!(dst_metric_locked(dst, RTAX_RTT)))\n\t\t\t\tdst_metric_set(dst, RTAX_RTT, 0);\n\t\t\treturn;\n\t\t}\n\n\t\trtt = dst_metric_rtt(dst, RTAX_RTT);\n\t\tm = rtt - tp->srtt;\n\n\t\t/* If newly calculated rtt larger than stored one,\n\t\t * store new one. Otherwise, use EWMA. Remember,\n\t\t * rtt overestimation is always better than underestimation.\n\t\t */\n\t\tif (!(dst_metric_locked(dst, RTAX_RTT))) {\n\t\t\tif (m <= 0)\n\t\t\t\tset_dst_metric_rtt(dst, RTAX_RTT, tp->srtt);\n\t\t\telse\n\t\t\t\tset_dst_metric_rtt(dst, RTAX_RTT, rtt - (m >> 3));\n\t\t}\n\n\t\tif (!(dst_metric_locked(dst, RTAX_RTTVAR))) {\n\t\t\tunsigned long var;\n\t\t\tif (m < 0)\n\t\t\t\tm = -m;\n\n\t\t\t/* Scale deviation to rttvar fixed point */\n\t\t\tm >>= 1;\n\t\t\tif (m < tp->mdev)\n\t\t\t\tm = tp->mdev;\n\n\t\t\tvar = dst_metric_rtt(dst, RTAX_RTTVAR);\n\t\t\tif (m >= var)\n\t\t\t\tvar = m;\n\t\t\telse\n\t\t\t\tvar -= (var - m) >> 2;\n\n\t\t\tset_dst_metric_rtt(dst, RTAX_RTTVAR, var);\n\t\t}\n\n\t\tif (tcp_in_initial_slowstart(tp)) {\n\t\t\t/* Slow start still did not finish. */\n\t\t\tif (dst_metric(dst, RTAX_SSTHRESH) &&\n\t\t\t    !dst_metric_locked(dst, RTAX_SSTHRESH) &&\n\t\t\t    (tp->snd_cwnd >> 1) > dst_metric(dst, RTAX_SSTHRESH))\n\t\t\t\tdst_metric_set(dst, RTAX_SSTHRESH, tp->snd_cwnd >> 1);\n\t\t\tif (!dst_metric_locked(dst, RTAX_CWND) &&\n\t\t\t    tp->snd_cwnd > dst_metric(dst, RTAX_CWND))\n\t\t\t\tdst_metric_set(dst, RTAX_CWND, tp->snd_cwnd);\n\t\t} else if (tp->snd_cwnd > tp->snd_ssthresh &&\n\t\t\t   icsk->icsk_ca_state == TCP_CA_Open) {\n\t\t\t/* Cong. avoidance phase, cwnd is reliable. */\n\t\t\tif (!dst_metric_locked(dst, RTAX_SSTHRESH))\n\t\t\t\tdst_metric_set(dst, RTAX_SSTHRESH,\n\t\t\t\t\t       max(tp->snd_cwnd >> 1, tp->snd_ssthresh));\n\t\t\tif (!dst_metric_locked(dst, RTAX_CWND))\n\t\t\t\tdst_metric_set(dst, RTAX_CWND,\n\t\t\t\t\t       (dst_metric(dst, RTAX_CWND) +\n\t\t\t\t\t\ttp->snd_cwnd) >> 1);\n\t\t} else {\n\t\t\t/* Else slow start did not finish, cwnd is non-sense,\n\t\t\t   ssthresh may be also invalid.\n\t\t\t */\n\t\t\tif (!dst_metric_locked(dst, RTAX_CWND))\n\t\t\t\tdst_metric_set(dst, RTAX_CWND,\n\t\t\t\t\t       (dst_metric(dst, RTAX_CWND) +\n\t\t\t\t\t\ttp->snd_ssthresh) >> 1);\n\t\t\tif (dst_metric(dst, RTAX_SSTHRESH) &&\n\t\t\t    !dst_metric_locked(dst, RTAX_SSTHRESH) &&\n\t\t\t    tp->snd_ssthresh > dst_metric(dst, RTAX_SSTHRESH))\n\t\t\t\tdst_metric_set(dst, RTAX_SSTHRESH, tp->snd_ssthresh);\n\t\t}\n\n\t\tif (!dst_metric_locked(dst, RTAX_REORDERING)) {\n\t\t\tif (dst_metric(dst, RTAX_REORDERING) < tp->reordering &&\n\t\t\t    tp->reordering != sysctl_tcp_reordering)\n\t\t\t\tdst_metric_set(dst, RTAX_REORDERING, tp->reordering);\n\t\t}\n\t}\n}\n\n__u32 tcp_init_cwnd(const struct tcp_sock *tp, const struct dst_entry *dst)\n{\n\t__u32 cwnd = (dst ? dst_metric(dst, RTAX_INITCWND) : 0);\n\n\tif (!cwnd)\n\t\tcwnd = TCP_INIT_CWND;\n\treturn min_t(__u32, cwnd, tp->snd_cwnd_clamp);\n}\n\n/* Set slow start threshold and cwnd not falling to slow start */\nvoid tcp_enter_cwr(struct sock *sk, const int set_ssthresh)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\n\ttp->prior_ssthresh = 0;\n\ttp->bytes_acked = 0;\n\tif (icsk->icsk_ca_state < TCP_CA_CWR) {\n\t\ttp->undo_marker = 0;\n\t\tif (set_ssthresh)\n\t\t\ttp->snd_ssthresh = icsk->icsk_ca_ops->ssthresh(sk);\n\t\ttp->snd_cwnd = min(tp->snd_cwnd,\n\t\t\t\t   tcp_packets_in_flight(tp) + 1U);\n\t\ttp->snd_cwnd_cnt = 0;\n\t\ttp->high_seq = tp->snd_nxt;\n\t\ttp->snd_cwnd_stamp = tcp_time_stamp;\n\t\tTCP_ECN_queue_cwr(tp);\n\n\t\ttcp_set_ca_state(sk, TCP_CA_CWR);\n\t}\n}\n\n/*\n * Packet counting of FACK is based on in-order assumptions, therefore TCP\n * disables it when reordering is detected\n */\nstatic void tcp_disable_fack(struct tcp_sock *tp)\n{\n\t/* RFC3517 uses different metric in lost marker => reset on change */\n\tif (tcp_is_fack(tp))\n\t\ttp->lost_skb_hint = NULL;\n\ttp->rx_opt.sack_ok &= ~2;\n}\n\n/* Take a notice that peer is sending D-SACKs */\nstatic void tcp_dsack_seen(struct tcp_sock *tp)\n{\n\ttp->rx_opt.sack_ok |= 4;\n}\n\n/* Initialize metrics on socket. */\n\nstatic void tcp_init_metrics(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct dst_entry *dst = __sk_dst_get(sk);\n\n\tif (dst == NULL)\n\t\tgoto reset;\n\n\tdst_confirm(dst);\n\n\tif (dst_metric_locked(dst, RTAX_CWND))\n\t\ttp->snd_cwnd_clamp = dst_metric(dst, RTAX_CWND);\n\tif (dst_metric(dst, RTAX_SSTHRESH)) {\n\t\ttp->snd_ssthresh = dst_metric(dst, RTAX_SSTHRESH);\n\t\tif (tp->snd_ssthresh > tp->snd_cwnd_clamp)\n\t\t\ttp->snd_ssthresh = tp->snd_cwnd_clamp;\n\t} else {\n\t\t/* ssthresh may have been reduced unnecessarily during.\n\t\t * 3WHS. Restore it back to its initial default.\n\t\t */\n\t\ttp->snd_ssthresh = TCP_INFINITE_SSTHRESH;\n\t}\n\tif (dst_metric(dst, RTAX_REORDERING) &&\n\t    tp->reordering != dst_metric(dst, RTAX_REORDERING)) {\n\t\ttcp_disable_fack(tp);\n\t\ttp->reordering = dst_metric(dst, RTAX_REORDERING);\n\t}\n\n\tif (dst_metric(dst, RTAX_RTT) == 0 || tp->srtt == 0)\n\t\tgoto reset;\n\n\t/* Initial rtt is determined from SYN,SYN-ACK.\n\t * The segment is small and rtt may appear much\n\t * less than real one. Use per-dst memory\n\t * to make it more realistic.\n\t *\n\t * A bit of theory. RTT is time passed after \"normal\" sized packet\n\t * is sent until it is ACKed. In normal circumstances sending small\n\t * packets force peer to delay ACKs and calculation is correct too.\n\t * The algorithm is adaptive and, provided we follow specs, it\n\t * NEVER underestimate RTT. BUT! If peer tries to make some clever\n\t * tricks sort of \"quick acks\" for time long enough to decrease RTT\n\t * to low value, and then abruptly stops to do it and starts to delay\n\t * ACKs, wait for troubles.\n\t */\n\tif (dst_metric_rtt(dst, RTAX_RTT) > tp->srtt) {\n\t\ttp->srtt = dst_metric_rtt(dst, RTAX_RTT);\n\t\ttp->rtt_seq = tp->snd_nxt;\n\t}\n\tif (dst_metric_rtt(dst, RTAX_RTTVAR) > tp->mdev) {\n\t\ttp->mdev = dst_metric_rtt(dst, RTAX_RTTVAR);\n\t\ttp->mdev_max = tp->rttvar = max(tp->mdev, tcp_rto_min(sk));\n\t}\n\ttcp_set_rto(sk);\nreset:\n\tif (tp->srtt == 0) {\n\t\t/* RFC2988bis: We've failed to get a valid RTT sample from\n\t\t * 3WHS. This is most likely due to retransmission,\n\t\t * including spurious one. Reset the RTO back to 3secs\n\t\t * from the more aggressive 1sec to avoid more spurious\n\t\t * retransmission.\n\t\t */\n\t\ttp->mdev = tp->mdev_max = tp->rttvar = TCP_TIMEOUT_FALLBACK;\n\t\tinet_csk(sk)->icsk_rto = TCP_TIMEOUT_FALLBACK;\n\t}\n\t/* Cut cwnd down to 1 per RFC5681 if SYN or SYN-ACK has been\n\t * retransmitted. In light of RFC2988bis' more aggressive 1sec\n\t * initRTO, we only reset cwnd when more than 1 SYN/SYN-ACK\n\t * retransmission has occurred.\n\t */\n\tif (tp->total_retrans > 1)\n\t\ttp->snd_cwnd = 1;\n\telse\n\t\ttp->snd_cwnd = tcp_init_cwnd(tp, dst);\n\ttp->snd_cwnd_stamp = tcp_time_stamp;\n}\n\nstatic void tcp_update_reordering(struct sock *sk, const int metric,\n\t\t\t\t  const int ts)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tif (metric > tp->reordering) {\n\t\tint mib_idx;\n\n\t\ttp->reordering = min(TCP_MAX_REORDERING, metric);\n\n\t\t/* This exciting event is worth to be remembered. 8) */\n\t\tif (ts)\n\t\t\tmib_idx = LINUX_MIB_TCPTSREORDER;\n\t\telse if (tcp_is_reno(tp))\n\t\t\tmib_idx = LINUX_MIB_TCPRENOREORDER;\n\t\telse if (tcp_is_fack(tp))\n\t\t\tmib_idx = LINUX_MIB_TCPFACKREORDER;\n\t\telse\n\t\t\tmib_idx = LINUX_MIB_TCPSACKREORDER;\n\n\t\tNET_INC_STATS_BH(sock_net(sk), mib_idx);\n#if FASTRETRANS_DEBUG > 1\n\t\tprintk(KERN_DEBUG \"Disorder%d %d %u f%u s%u rr%d\\n\",\n\t\t       tp->rx_opt.sack_ok, inet_csk(sk)->icsk_ca_state,\n\t\t       tp->reordering,\n\t\t       tp->fackets_out,\n\t\t       tp->sacked_out,\n\t\t       tp->undo_marker ? tp->undo_retrans : 0);\n#endif\n\t\ttcp_disable_fack(tp);\n\t}\n}\n\n/* This must be called before lost_out is incremented */\nstatic void tcp_verify_retransmit_hint(struct tcp_sock *tp, struct sk_buff *skb)\n{\n\tif ((tp->retransmit_skb_hint == NULL) ||\n\t    before(TCP_SKB_CB(skb)->seq,\n\t\t   TCP_SKB_CB(tp->retransmit_skb_hint)->seq))\n\t\ttp->retransmit_skb_hint = skb;\n\n\tif (!tp->lost_out ||\n\t    after(TCP_SKB_CB(skb)->end_seq, tp->retransmit_high))\n\t\ttp->retransmit_high = TCP_SKB_CB(skb)->end_seq;\n}\n\nstatic void tcp_skb_mark_lost(struct tcp_sock *tp, struct sk_buff *skb)\n{\n\tif (!(TCP_SKB_CB(skb)->sacked & (TCPCB_LOST|TCPCB_SACKED_ACKED))) {\n\t\ttcp_verify_retransmit_hint(tp, skb);\n\n\t\ttp->lost_out += tcp_skb_pcount(skb);\n\t\tTCP_SKB_CB(skb)->sacked |= TCPCB_LOST;\n\t}\n}\n\nstatic void tcp_skb_mark_lost_uncond_verify(struct tcp_sock *tp,\n\t\t\t\t\t    struct sk_buff *skb)\n{\n\ttcp_verify_retransmit_hint(tp, skb);\n\n\tif (!(TCP_SKB_CB(skb)->sacked & (TCPCB_LOST|TCPCB_SACKED_ACKED))) {\n\t\ttp->lost_out += tcp_skb_pcount(skb);\n\t\tTCP_SKB_CB(skb)->sacked |= TCPCB_LOST;\n\t}\n}\n\n/* This procedure tags the retransmission queue when SACKs arrive.\n *\n * We have three tag bits: SACKED(S), RETRANS(R) and LOST(L).\n * Packets in queue with these bits set are counted in variables\n * sacked_out, retrans_out and lost_out, correspondingly.\n *\n * Valid combinations are:\n * Tag  InFlight\tDescription\n * 0\t1\t\t- orig segment is in flight.\n * S\t0\t\t- nothing flies, orig reached receiver.\n * L\t0\t\t- nothing flies, orig lost by net.\n * R\t2\t\t- both orig and retransmit are in flight.\n * L|R\t1\t\t- orig is lost, retransmit is in flight.\n * S|R  1\t\t- orig reached receiver, retrans is still in flight.\n * (L|S|R is logically valid, it could occur when L|R is sacked,\n *  but it is equivalent to plain S and code short-curcuits it to S.\n *  L|S is logically invalid, it would mean -1 packet in flight 8))\n *\n * These 6 states form finite state machine, controlled by the following events:\n * 1. New ACK (+SACK) arrives. (tcp_sacktag_write_queue())\n * 2. Retransmission. (tcp_retransmit_skb(), tcp_xmit_retransmit_queue())\n * 3. Loss detection event of one of three flavors:\n *\tA. Scoreboard estimator decided the packet is lost.\n *\t   A'. Reno \"three dupacks\" marks head of queue lost.\n *\t   A''. Its FACK modfication, head until snd.fack is lost.\n *\tB. SACK arrives sacking data transmitted after never retransmitted\n *\t   hole was sent out.\n *\tC. SACK arrives sacking SND.NXT at the moment, when the\n *\t   segment was retransmitted.\n * 4. D-SACK added new rule: D-SACK changes any tag to S.\n *\n * It is pleasant to note, that state diagram turns out to be commutative,\n * so that we are allowed not to be bothered by order of our actions,\n * when multiple events arrive simultaneously. (see the function below).\n *\n * Reordering detection.\n * --------------------\n * Reordering metric is maximal distance, which a packet can be displaced\n * in packet stream. With SACKs we can estimate it:\n *\n * 1. SACK fills old hole and the corresponding segment was not\n *    ever retransmitted -> reordering. Alas, we cannot use it\n *    when segment was retransmitted.\n * 2. The last flaw is solved with D-SACK. D-SACK arrives\n *    for retransmitted and already SACKed segment -> reordering..\n * Both of these heuristics are not used in Loss state, when we cannot\n * account for retransmits accurately.\n *\n * SACK block validation.\n * ----------------------\n *\n * SACK block range validation checks that the received SACK block fits to\n * the expected sequence limits, i.e., it is between SND.UNA and SND.NXT.\n * Note that SND.UNA is not included to the range though being valid because\n * it means that the receiver is rather inconsistent with itself reporting\n * SACK reneging when it should advance SND.UNA. Such SACK block this is\n * perfectly valid, however, in light of RFC2018 which explicitly states\n * that \"SACK block MUST reflect the newest segment.  Even if the newest\n * segment is going to be discarded ...\", not that it looks very clever\n * in case of head skb. Due to potentional receiver driven attacks, we\n * choose to avoid immediate execution of a walk in write queue due to\n * reneging and defer head skb's loss recovery to standard loss recovery\n * procedure that will eventually trigger (nothing forbids us doing this).\n *\n * Implements also blockage to start_seq wrap-around. Problem lies in the\n * fact that though start_seq (s) is before end_seq (i.e., not reversed),\n * there's no guarantee that it will be before snd_nxt (n). The problem\n * happens when start_seq resides between end_seq wrap (e_w) and snd_nxt\n * wrap (s_w):\n *\n *         <- outs wnd ->                          <- wrapzone ->\n *         u     e      n                         u_w   e_w  s n_w\n *         |     |      |                          |     |   |  |\n * |<------------+------+----- TCP seqno space --------------+---------->|\n * ...-- <2^31 ->|                                           |<--------...\n * ...---- >2^31 ------>|                                    |<--------...\n *\n * Current code wouldn't be vulnerable but it's better still to discard such\n * crazy SACK blocks. Doing this check for start_seq alone closes somewhat\n * similar case (end_seq after snd_nxt wrap) as earlier reversed check in\n * snd_nxt wrap -> snd_una region will then become \"well defined\", i.e.,\n * equal to the ideal case (infinite seqno space without wrap caused issues).\n *\n * With D-SACK the lower bound is extended to cover sequence space below\n * SND.UNA down to undo_marker, which is the last point of interest. Yet\n * again, D-SACK block must not to go across snd_una (for the same reason as\n * for the normal SACK blocks, explained above). But there all simplicity\n * ends, TCP might receive valid D-SACKs below that. As long as they reside\n * fully below undo_marker they do not affect behavior in anyway and can\n * therefore be safely ignored. In rare cases (which are more or less\n * theoretical ones), the D-SACK will nicely cross that boundary due to skb\n * fragmentation and packet reordering past skb's retransmission. To consider\n * them correctly, the acceptable range must be extended even more though\n * the exact amount is rather hard to quantify. However, tp->max_window can\n * be used as an exaggerated estimate.\n */\nstatic int tcp_is_sackblock_valid(struct tcp_sock *tp, int is_dsack,\n\t\t\t\t  u32 start_seq, u32 end_seq)\n{\n\t/* Too far in future, or reversed (interpretation is ambiguous) */\n\tif (after(end_seq, tp->snd_nxt) || !before(start_seq, end_seq))\n\t\treturn 0;\n\n\t/* Nasty start_seq wrap-around check (see comments above) */\n\tif (!before(start_seq, tp->snd_nxt))\n\t\treturn 0;\n\n\t/* In outstanding window? ...This is valid exit for D-SACKs too.\n\t * start_seq == snd_una is non-sensical (see comments above)\n\t */\n\tif (after(start_seq, tp->snd_una))\n\t\treturn 1;\n\n\tif (!is_dsack || !tp->undo_marker)\n\t\treturn 0;\n\n\t/* ...Then it's D-SACK, and must reside below snd_una completely */\n\tif (after(end_seq, tp->snd_una))\n\t\treturn 0;\n\n\tif (!before(start_seq, tp->undo_marker))\n\t\treturn 1;\n\n\t/* Too old */\n\tif (!after(end_seq, tp->undo_marker))\n\t\treturn 0;\n\n\t/* Undo_marker boundary crossing (overestimates a lot). Known already:\n\t *   start_seq < undo_marker and end_seq >= undo_marker.\n\t */\n\treturn !before(start_seq, end_seq - tp->max_window);\n}\n\n/* Check for lost retransmit. This superb idea is borrowed from \"ratehalving\".\n * Event \"C\". Later note: FACK people cheated me again 8), we have to account\n * for reordering! Ugly, but should help.\n *\n * Search retransmitted skbs from write_queue that were sent when snd_nxt was\n * less than what is now known to be received by the other end (derived from\n * highest SACK block). Also calculate the lowest snd_nxt among the remaining\n * retransmitted skbs to avoid some costly processing per ACKs.\n */\nstatic void tcp_mark_lost_retrans(struct sock *sk)\n{\n\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *skb;\n\tint cnt = 0;\n\tu32 new_low_seq = tp->snd_nxt;\n\tu32 received_upto = tcp_highest_sack_seq(tp);\n\n\tif (!tcp_is_fack(tp) || !tp->retrans_out ||\n\t    !after(received_upto, tp->lost_retrans_low) ||\n\t    icsk->icsk_ca_state != TCP_CA_Recovery)\n\t\treturn;\n\n\ttcp_for_write_queue(skb, sk) {\n\t\tu32 ack_seq = TCP_SKB_CB(skb)->ack_seq;\n\n\t\tif (skb == tcp_send_head(sk))\n\t\t\tbreak;\n\t\tif (cnt == tp->retrans_out)\n\t\t\tbreak;\n\t\tif (!after(TCP_SKB_CB(skb)->end_seq, tp->snd_una))\n\t\t\tcontinue;\n\n\t\tif (!(TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_RETRANS))\n\t\t\tcontinue;\n\n\t\t/* TODO: We would like to get rid of tcp_is_fack(tp) only\n\t\t * constraint here (see above) but figuring out that at\n\t\t * least tp->reordering SACK blocks reside between ack_seq\n\t\t * and received_upto is not easy task to do cheaply with\n\t\t * the available datastructures.\n\t\t *\n\t\t * Whether FACK should check here for tp->reordering segs\n\t\t * in-between one could argue for either way (it would be\n\t\t * rather simple to implement as we could count fack_count\n\t\t * during the walk and do tp->fackets_out - fack_count).\n\t\t */\n\t\tif (after(received_upto, ack_seq)) {\n\t\t\tTCP_SKB_CB(skb)->sacked &= ~TCPCB_SACKED_RETRANS;\n\t\t\ttp->retrans_out -= tcp_skb_pcount(skb);\n\n\t\t\ttcp_skb_mark_lost_uncond_verify(tp, skb);\n\t\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPLOSTRETRANSMIT);\n\t\t} else {\n\t\t\tif (before(ack_seq, new_low_seq))\n\t\t\t\tnew_low_seq = ack_seq;\n\t\t\tcnt += tcp_skb_pcount(skb);\n\t\t}\n\t}\n\n\tif (tp->retrans_out)\n\t\ttp->lost_retrans_low = new_low_seq;\n}\n\nstatic int tcp_check_dsack(struct sock *sk, const struct sk_buff *ack_skb,\n\t\t\t   struct tcp_sack_block_wire *sp, int num_sacks,\n\t\t\t   u32 prior_snd_una)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tu32 start_seq_0 = get_unaligned_be32(&sp[0].start_seq);\n\tu32 end_seq_0 = get_unaligned_be32(&sp[0].end_seq);\n\tint dup_sack = 0;\n\n\tif (before(start_seq_0, TCP_SKB_CB(ack_skb)->ack_seq)) {\n\t\tdup_sack = 1;\n\t\ttcp_dsack_seen(tp);\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPDSACKRECV);\n\t} else if (num_sacks > 1) {\n\t\tu32 end_seq_1 = get_unaligned_be32(&sp[1].end_seq);\n\t\tu32 start_seq_1 = get_unaligned_be32(&sp[1].start_seq);\n\n\t\tif (!after(end_seq_0, end_seq_1) &&\n\t\t    !before(start_seq_0, start_seq_1)) {\n\t\t\tdup_sack = 1;\n\t\t\ttcp_dsack_seen(tp);\n\t\t\tNET_INC_STATS_BH(sock_net(sk),\n\t\t\t\t\tLINUX_MIB_TCPDSACKOFORECV);\n\t\t}\n\t}\n\n\t/* D-SACK for already forgotten data... Do dumb counting. */\n\tif (dup_sack && tp->undo_marker && tp->undo_retrans &&\n\t    !after(end_seq_0, prior_snd_una) &&\n\t    after(end_seq_0, tp->undo_marker))\n\t\ttp->undo_retrans--;\n\n\treturn dup_sack;\n}\n\nstruct tcp_sacktag_state {\n\tint reord;\n\tint fack_count;\n\tint flag;\n};\n\n/* Check if skb is fully within the SACK block. In presence of GSO skbs,\n * the incoming SACK may not exactly match but we can find smaller MSS\n * aligned portion of it that matches. Therefore we might need to fragment\n * which may fail and creates some hassle (caller must handle error case\n * returns).\n *\n * FIXME: this could be merged to shift decision code\n */\nstatic int tcp_match_skb_to_sack(struct sock *sk, struct sk_buff *skb,\n\t\t\t\t u32 start_seq, u32 end_seq)\n{\n\tint in_sack, err;\n\tunsigned int pkt_len;\n\tunsigned int mss;\n\n\tin_sack = !after(start_seq, TCP_SKB_CB(skb)->seq) &&\n\t\t  !before(end_seq, TCP_SKB_CB(skb)->end_seq);\n\n\tif (tcp_skb_pcount(skb) > 1 && !in_sack &&\n\t    after(TCP_SKB_CB(skb)->end_seq, start_seq)) {\n\t\tmss = tcp_skb_mss(skb);\n\t\tin_sack = !after(start_seq, TCP_SKB_CB(skb)->seq);\n\n\t\tif (!in_sack) {\n\t\t\tpkt_len = start_seq - TCP_SKB_CB(skb)->seq;\n\t\t\tif (pkt_len < mss)\n\t\t\t\tpkt_len = mss;\n\t\t} else {\n\t\t\tpkt_len = end_seq - TCP_SKB_CB(skb)->seq;\n\t\t\tif (pkt_len < mss)\n\t\t\t\treturn -EINVAL;\n\t\t}\n\n\t\t/* Round if necessary so that SACKs cover only full MSSes\n\t\t * and/or the remaining small portion (if present)\n\t\t */\n\t\tif (pkt_len > mss) {\n\t\t\tunsigned int new_len = (pkt_len / mss) * mss;\n\t\t\tif (!in_sack && new_len < pkt_len) {\n\t\t\t\tnew_len += mss;\n\t\t\t\tif (new_len > skb->len)\n\t\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tpkt_len = new_len;\n\t\t}\n\t\terr = tcp_fragment(sk, skb, pkt_len, mss);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t}\n\n\treturn in_sack;\n}\n\nstatic u8 tcp_sacktag_one(const struct sk_buff *skb, struct sock *sk,\n\t\t\t  struct tcp_sacktag_state *state,\n\t\t\t  int dup_sack, int pcount)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tu8 sacked = TCP_SKB_CB(skb)->sacked;\n\tint fack_count = state->fack_count;\n\n\t/* Account D-SACK for retransmitted packet. */\n\tif (dup_sack && (sacked & TCPCB_RETRANS)) {\n\t\tif (tp->undo_marker && tp->undo_retrans &&\n\t\t    after(TCP_SKB_CB(skb)->end_seq, tp->undo_marker))\n\t\t\ttp->undo_retrans--;\n\t\tif (sacked & TCPCB_SACKED_ACKED)\n\t\t\tstate->reord = min(fack_count, state->reord);\n\t}\n\n\t/* Nothing to do; acked frame is about to be dropped (was ACKed). */\n\tif (!after(TCP_SKB_CB(skb)->end_seq, tp->snd_una))\n\t\treturn sacked;\n\n\tif (!(sacked & TCPCB_SACKED_ACKED)) {\n\t\tif (sacked & TCPCB_SACKED_RETRANS) {\n\t\t\t/* If the segment is not tagged as lost,\n\t\t\t * we do not clear RETRANS, believing\n\t\t\t * that retransmission is still in flight.\n\t\t\t */\n\t\t\tif (sacked & TCPCB_LOST) {\n\t\t\t\tsacked &= ~(TCPCB_LOST|TCPCB_SACKED_RETRANS);\n\t\t\t\ttp->lost_out -= pcount;\n\t\t\t\ttp->retrans_out -= pcount;\n\t\t\t}\n\t\t} else {\n\t\t\tif (!(sacked & TCPCB_RETRANS)) {\n\t\t\t\t/* New sack for not retransmitted frame,\n\t\t\t\t * which was in hole. It is reordering.\n\t\t\t\t */\n\t\t\t\tif (before(TCP_SKB_CB(skb)->seq,\n\t\t\t\t\t   tcp_highest_sack_seq(tp)))\n\t\t\t\t\tstate->reord = min(fack_count,\n\t\t\t\t\t\t\t   state->reord);\n\n\t\t\t\t/* SACK enhanced F-RTO (RFC4138; Appendix B) */\n\t\t\t\tif (!after(TCP_SKB_CB(skb)->end_seq, tp->frto_highmark))\n\t\t\t\t\tstate->flag |= FLAG_ONLY_ORIG_SACKED;\n\t\t\t}\n\n\t\t\tif (sacked & TCPCB_LOST) {\n\t\t\t\tsacked &= ~TCPCB_LOST;\n\t\t\t\ttp->lost_out -= pcount;\n\t\t\t}\n\t\t}\n\n\t\tsacked |= TCPCB_SACKED_ACKED;\n\t\tstate->flag |= FLAG_DATA_SACKED;\n\t\ttp->sacked_out += pcount;\n\n\t\tfack_count += pcount;\n\n\t\t/* Lost marker hint past SACKed? Tweak RFC3517 cnt */\n\t\tif (!tcp_is_fack(tp) && (tp->lost_skb_hint != NULL) &&\n\t\t    before(TCP_SKB_CB(skb)->seq,\n\t\t\t   TCP_SKB_CB(tp->lost_skb_hint)->seq))\n\t\t\ttp->lost_cnt_hint += pcount;\n\n\t\tif (fack_count > tp->fackets_out)\n\t\t\ttp->fackets_out = fack_count;\n\t}\n\n\t/* D-SACK. We can detect redundant retransmission in S|R and plain R\n\t * frames and clear it. undo_retrans is decreased above, L|R frames\n\t * are accounted above as well.\n\t */\n\tif (dup_sack && (sacked & TCPCB_SACKED_RETRANS)) {\n\t\tsacked &= ~TCPCB_SACKED_RETRANS;\n\t\ttp->retrans_out -= pcount;\n\t}\n\n\treturn sacked;\n}\n\nstatic int tcp_shifted_skb(struct sock *sk, struct sk_buff *skb,\n\t\t\t   struct tcp_sacktag_state *state,\n\t\t\t   unsigned int pcount, int shifted, int mss,\n\t\t\t   int dup_sack)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *prev = tcp_write_queue_prev(sk, skb);\n\n\tBUG_ON(!pcount);\n\n\tif (skb == tp->lost_skb_hint)\n\t\ttp->lost_cnt_hint += pcount;\n\n\tTCP_SKB_CB(prev)->end_seq += shifted;\n\tTCP_SKB_CB(skb)->seq += shifted;\n\n\tskb_shinfo(prev)->gso_segs += pcount;\n\tBUG_ON(skb_shinfo(skb)->gso_segs < pcount);\n\tskb_shinfo(skb)->gso_segs -= pcount;\n\n\t/* When we're adding to gso_segs == 1, gso_size will be zero,\n\t * in theory this shouldn't be necessary but as long as DSACK\n\t * code can come after this skb later on it's better to keep\n\t * setting gso_size to something.\n\t */\n\tif (!skb_shinfo(prev)->gso_size) {\n\t\tskb_shinfo(prev)->gso_size = mss;\n\t\tskb_shinfo(prev)->gso_type = sk->sk_gso_type;\n\t}\n\n\t/* CHECKME: To clear or not to clear? Mimics normal skb currently */\n\tif (skb_shinfo(skb)->gso_segs <= 1) {\n\t\tskb_shinfo(skb)->gso_size = 0;\n\t\tskb_shinfo(skb)->gso_type = 0;\n\t}\n\n\t/* We discard results */\n\ttcp_sacktag_one(skb, sk, state, dup_sack, pcount);\n\n\t/* Difference in this won't matter, both ACKed by the same cumul. ACK */\n\tTCP_SKB_CB(prev)->sacked |= (TCP_SKB_CB(skb)->sacked & TCPCB_EVER_RETRANS);\n\n\tif (skb->len > 0) {\n\t\tBUG_ON(!tcp_skb_pcount(skb));\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_SACKSHIFTED);\n\t\treturn 0;\n\t}\n\n\t/* Whole SKB was eaten :-) */\n\n\tif (skb == tp->retransmit_skb_hint)\n\t\ttp->retransmit_skb_hint = prev;\n\tif (skb == tp->scoreboard_skb_hint)\n\t\ttp->scoreboard_skb_hint = prev;\n\tif (skb == tp->lost_skb_hint) {\n\t\ttp->lost_skb_hint = prev;\n\t\ttp->lost_cnt_hint -= tcp_skb_pcount(prev);\n\t}\n\n\tTCP_SKB_CB(skb)->tcp_flags |= TCP_SKB_CB(prev)->tcp_flags;\n\tif (skb == tcp_highest_sack(sk))\n\t\ttcp_advance_highest_sack(sk, skb);\n\n\ttcp_unlink_write_queue(skb, sk);\n\tsk_wmem_free_skb(sk, skb);\n\n\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_SACKMERGED);\n\n\treturn 1;\n}\n\n/* I wish gso_size would have a bit more sane initialization than\n * something-or-zero which complicates things\n */\nstatic int tcp_skb_seglen(const struct sk_buff *skb)\n{\n\treturn tcp_skb_pcount(skb) == 1 ? skb->len : tcp_skb_mss(skb);\n}\n\n/* Shifting pages past head area doesn't work */\nstatic int skb_can_shift(const struct sk_buff *skb)\n{\n\treturn !skb_headlen(skb) && skb_is_nonlinear(skb);\n}\n\n/* Try collapsing SACK blocks spanning across multiple skbs to a single\n * skb.\n */\nstatic struct sk_buff *tcp_shift_skb_data(struct sock *sk, struct sk_buff *skb,\n\t\t\t\t\t  struct tcp_sacktag_state *state,\n\t\t\t\t\t  u32 start_seq, u32 end_seq,\n\t\t\t\t\t  int dup_sack)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *prev;\n\tint mss;\n\tint pcount = 0;\n\tint len;\n\tint in_sack;\n\n\tif (!sk_can_gso(sk))\n\t\tgoto fallback;\n\n\t/* Normally R but no L won't result in plain S */\n\tif (!dup_sack &&\n\t    (TCP_SKB_CB(skb)->sacked & (TCPCB_LOST|TCPCB_SACKED_RETRANS)) == TCPCB_SACKED_RETRANS)\n\t\tgoto fallback;\n\tif (!skb_can_shift(skb))\n\t\tgoto fallback;\n\t/* This frame is about to be dropped (was ACKed). */\n\tif (!after(TCP_SKB_CB(skb)->end_seq, tp->snd_una))\n\t\tgoto fallback;\n\n\t/* Can only happen with delayed DSACK + discard craziness */\n\tif (unlikely(skb == tcp_write_queue_head(sk)))\n\t\tgoto fallback;\n\tprev = tcp_write_queue_prev(sk, skb);\n\n\tif ((TCP_SKB_CB(prev)->sacked & TCPCB_TAGBITS) != TCPCB_SACKED_ACKED)\n\t\tgoto fallback;\n\n\tin_sack = !after(start_seq, TCP_SKB_CB(skb)->seq) &&\n\t\t  !before(end_seq, TCP_SKB_CB(skb)->end_seq);\n\n\tif (in_sack) {\n\t\tlen = skb->len;\n\t\tpcount = tcp_skb_pcount(skb);\n\t\tmss = tcp_skb_seglen(skb);\n\n\t\t/* TODO: Fix DSACKs to not fragment already SACKed and we can\n\t\t * drop this restriction as unnecessary\n\t\t */\n\t\tif (mss != tcp_skb_seglen(prev))\n\t\t\tgoto fallback;\n\t} else {\n\t\tif (!after(TCP_SKB_CB(skb)->end_seq, start_seq))\n\t\t\tgoto noop;\n\t\t/* CHECKME: This is non-MSS split case only?, this will\n\t\t * cause skipped skbs due to advancing loop btw, original\n\t\t * has that feature too\n\t\t */\n\t\tif (tcp_skb_pcount(skb) <= 1)\n\t\t\tgoto noop;\n\n\t\tin_sack = !after(start_seq, TCP_SKB_CB(skb)->seq);\n\t\tif (!in_sack) {\n\t\t\t/* TODO: head merge to next could be attempted here\n\t\t\t * if (!after(TCP_SKB_CB(skb)->end_seq, end_seq)),\n\t\t\t * though it might not be worth of the additional hassle\n\t\t\t *\n\t\t\t * ...we can probably just fallback to what was done\n\t\t\t * previously. We could try merging non-SACKed ones\n\t\t\t * as well but it probably isn't going to buy off\n\t\t\t * because later SACKs might again split them, and\n\t\t\t * it would make skb timestamp tracking considerably\n\t\t\t * harder problem.\n\t\t\t */\n\t\t\tgoto fallback;\n\t\t}\n\n\t\tlen = end_seq - TCP_SKB_CB(skb)->seq;\n\t\tBUG_ON(len < 0);\n\t\tBUG_ON(len > skb->len);\n\n\t\t/* MSS boundaries should be honoured or else pcount will\n\t\t * severely break even though it makes things bit trickier.\n\t\t * Optimize common case to avoid most of the divides\n\t\t */\n\t\tmss = tcp_skb_mss(skb);\n\n\t\t/* TODO: Fix DSACKs to not fragment already SACKed and we can\n\t\t * drop this restriction as unnecessary\n\t\t */\n\t\tif (mss != tcp_skb_seglen(prev))\n\t\t\tgoto fallback;\n\n\t\tif (len == mss) {\n\t\t\tpcount = 1;\n\t\t} else if (len < mss) {\n\t\t\tgoto noop;\n\t\t} else {\n\t\t\tpcount = len / mss;\n\t\t\tlen = pcount * mss;\n\t\t}\n\t}\n\n\tif (!skb_shift(prev, skb, len))\n\t\tgoto fallback;\n\tif (!tcp_shifted_skb(sk, skb, state, pcount, len, mss, dup_sack))\n\t\tgoto out;\n\n\t/* Hole filled allows collapsing with the next as well, this is very\n\t * useful when hole on every nth skb pattern happens\n\t */\n\tif (prev == tcp_write_queue_tail(sk))\n\t\tgoto out;\n\tskb = tcp_write_queue_next(sk, prev);\n\n\tif (!skb_can_shift(skb) ||\n\t    (skb == tcp_send_head(sk)) ||\n\t    ((TCP_SKB_CB(skb)->sacked & TCPCB_TAGBITS) != TCPCB_SACKED_ACKED) ||\n\t    (mss != tcp_skb_seglen(skb)))\n\t\tgoto out;\n\n\tlen = skb->len;\n\tif (skb_shift(prev, skb, len)) {\n\t\tpcount += tcp_skb_pcount(skb);\n\t\ttcp_shifted_skb(sk, skb, state, tcp_skb_pcount(skb), len, mss, 0);\n\t}\n\nout:\n\tstate->fack_count += pcount;\n\treturn prev;\n\nnoop:\n\treturn skb;\n\nfallback:\n\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_SACKSHIFTFALLBACK);\n\treturn NULL;\n}\n\nstatic struct sk_buff *tcp_sacktag_walk(struct sk_buff *skb, struct sock *sk,\n\t\t\t\t\tstruct tcp_sack_block *next_dup,\n\t\t\t\t\tstruct tcp_sacktag_state *state,\n\t\t\t\t\tu32 start_seq, u32 end_seq,\n\t\t\t\t\tint dup_sack_in)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *tmp;\n\n\ttcp_for_write_queue_from(skb, sk) {\n\t\tint in_sack = 0;\n\t\tint dup_sack = dup_sack_in;\n\n\t\tif (skb == tcp_send_head(sk))\n\t\t\tbreak;\n\n\t\t/* queue is in-order => we can short-circuit the walk early */\n\t\tif (!before(TCP_SKB_CB(skb)->seq, end_seq))\n\t\t\tbreak;\n\n\t\tif ((next_dup != NULL) &&\n\t\t    before(TCP_SKB_CB(skb)->seq, next_dup->end_seq)) {\n\t\t\tin_sack = tcp_match_skb_to_sack(sk, skb,\n\t\t\t\t\t\t\tnext_dup->start_seq,\n\t\t\t\t\t\t\tnext_dup->end_seq);\n\t\t\tif (in_sack > 0)\n\t\t\t\tdup_sack = 1;\n\t\t}\n\n\t\t/* skb reference here is a bit tricky to get right, since\n\t\t * shifting can eat and free both this skb and the next,\n\t\t * so not even _safe variant of the loop is enough.\n\t\t */\n\t\tif (in_sack <= 0) {\n\t\t\ttmp = tcp_shift_skb_data(sk, skb, state,\n\t\t\t\t\t\t start_seq, end_seq, dup_sack);\n\t\t\tif (tmp != NULL) {\n\t\t\t\tif (tmp != skb) {\n\t\t\t\t\tskb = tmp;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tin_sack = 0;\n\t\t\t} else {\n\t\t\t\tin_sack = tcp_match_skb_to_sack(sk, skb,\n\t\t\t\t\t\t\t\tstart_seq,\n\t\t\t\t\t\t\t\tend_seq);\n\t\t\t}\n\t\t}\n\n\t\tif (unlikely(in_sack < 0))\n\t\t\tbreak;\n\n\t\tif (in_sack) {\n\t\t\tTCP_SKB_CB(skb)->sacked = tcp_sacktag_one(skb, sk,\n\t\t\t\t\t\t\t\t  state,\n\t\t\t\t\t\t\t\t  dup_sack,\n\t\t\t\t\t\t\t\t  tcp_skb_pcount(skb));\n\n\t\t\tif (!before(TCP_SKB_CB(skb)->seq,\n\t\t\t\t    tcp_highest_sack_seq(tp)))\n\t\t\t\ttcp_advance_highest_sack(sk, skb);\n\t\t}\n\n\t\tstate->fack_count += tcp_skb_pcount(skb);\n\t}\n\treturn skb;\n}\n\n/* Avoid all extra work that is being done by sacktag while walking in\n * a normal way\n */\nstatic struct sk_buff *tcp_sacktag_skip(struct sk_buff *skb, struct sock *sk,\n\t\t\t\t\tstruct tcp_sacktag_state *state,\n\t\t\t\t\tu32 skip_to_seq)\n{\n\ttcp_for_write_queue_from(skb, sk) {\n\t\tif (skb == tcp_send_head(sk))\n\t\t\tbreak;\n\n\t\tif (after(TCP_SKB_CB(skb)->end_seq, skip_to_seq))\n\t\t\tbreak;\n\n\t\tstate->fack_count += tcp_skb_pcount(skb);\n\t}\n\treturn skb;\n}\n\nstatic struct sk_buff *tcp_maybe_skipping_dsack(struct sk_buff *skb,\n\t\t\t\t\t\tstruct sock *sk,\n\t\t\t\t\t\tstruct tcp_sack_block *next_dup,\n\t\t\t\t\t\tstruct tcp_sacktag_state *state,\n\t\t\t\t\t\tu32 skip_to_seq)\n{\n\tif (next_dup == NULL)\n\t\treturn skb;\n\n\tif (before(next_dup->start_seq, skip_to_seq)) {\n\t\tskb = tcp_sacktag_skip(skb, sk, state, next_dup->start_seq);\n\t\tskb = tcp_sacktag_walk(skb, sk, NULL, state,\n\t\t\t\t       next_dup->start_seq, next_dup->end_seq,\n\t\t\t\t       1);\n\t}\n\n\treturn skb;\n}\n\nstatic int tcp_sack_cache_ok(const struct tcp_sock *tp, const struct tcp_sack_block *cache)\n{\n\treturn cache < tp->recv_sack_cache + ARRAY_SIZE(tp->recv_sack_cache);\n}\n\nstatic int\ntcp_sacktag_write_queue(struct sock *sk, const struct sk_buff *ack_skb,\n\t\t\tu32 prior_snd_una)\n{\n\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tconst unsigned char *ptr = (skb_transport_header(ack_skb) +\n\t\t\t\t    TCP_SKB_CB(ack_skb)->sacked);\n\tstruct tcp_sack_block_wire *sp_wire = (struct tcp_sack_block_wire *)(ptr+2);\n\tstruct tcp_sack_block sp[TCP_NUM_SACKS];\n\tstruct tcp_sack_block *cache;\n\tstruct tcp_sacktag_state state;\n\tstruct sk_buff *skb;\n\tint num_sacks = min(TCP_NUM_SACKS, (ptr[1] - TCPOLEN_SACK_BASE) >> 3);\n\tint used_sacks;\n\tint found_dup_sack = 0;\n\tint i, j;\n\tint first_sack_index;\n\n\tstate.flag = 0;\n\tstate.reord = tp->packets_out;\n\n\tif (!tp->sacked_out) {\n\t\tif (WARN_ON(tp->fackets_out))\n\t\t\ttp->fackets_out = 0;\n\t\ttcp_highest_sack_reset(sk);\n\t}\n\n\tfound_dup_sack = tcp_check_dsack(sk, ack_skb, sp_wire,\n\t\t\t\t\t num_sacks, prior_snd_una);\n\tif (found_dup_sack)\n\t\tstate.flag |= FLAG_DSACKING_ACK;\n\n\t/* Eliminate too old ACKs, but take into\n\t * account more or less fresh ones, they can\n\t * contain valid SACK info.\n\t */\n\tif (before(TCP_SKB_CB(ack_skb)->ack_seq, prior_snd_una - tp->max_window))\n\t\treturn 0;\n\n\tif (!tp->packets_out)\n\t\tgoto out;\n\n\tused_sacks = 0;\n\tfirst_sack_index = 0;\n\tfor (i = 0; i < num_sacks; i++) {\n\t\tint dup_sack = !i && found_dup_sack;\n\n\t\tsp[used_sacks].start_seq = get_unaligned_be32(&sp_wire[i].start_seq);\n\t\tsp[used_sacks].end_seq = get_unaligned_be32(&sp_wire[i].end_seq);\n\n\t\tif (!tcp_is_sackblock_valid(tp, dup_sack,\n\t\t\t\t\t    sp[used_sacks].start_seq,\n\t\t\t\t\t    sp[used_sacks].end_seq)) {\n\t\t\tint mib_idx;\n\n\t\t\tif (dup_sack) {\n\t\t\t\tif (!tp->undo_marker)\n\t\t\t\t\tmib_idx = LINUX_MIB_TCPDSACKIGNOREDNOUNDO;\n\t\t\t\telse\n\t\t\t\t\tmib_idx = LINUX_MIB_TCPDSACKIGNOREDOLD;\n\t\t\t} else {\n\t\t\t\t/* Don't count olds caused by ACK reordering */\n\t\t\t\tif ((TCP_SKB_CB(ack_skb)->ack_seq != tp->snd_una) &&\n\t\t\t\t    !after(sp[used_sacks].end_seq, tp->snd_una))\n\t\t\t\t\tcontinue;\n\t\t\t\tmib_idx = LINUX_MIB_TCPSACKDISCARD;\n\t\t\t}\n\n\t\t\tNET_INC_STATS_BH(sock_net(sk), mib_idx);\n\t\t\tif (i == 0)\n\t\t\t\tfirst_sack_index = -1;\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* Ignore very old stuff early */\n\t\tif (!after(sp[used_sacks].end_seq, prior_snd_una))\n\t\t\tcontinue;\n\n\t\tused_sacks++;\n\t}\n\n\t/* order SACK blocks to allow in order walk of the retrans queue */\n\tfor (i = used_sacks - 1; i > 0; i--) {\n\t\tfor (j = 0; j < i; j++) {\n\t\t\tif (after(sp[j].start_seq, sp[j + 1].start_seq)) {\n\t\t\t\tswap(sp[j], sp[j + 1]);\n\n\t\t\t\t/* Track where the first SACK block goes to */\n\t\t\t\tif (j == first_sack_index)\n\t\t\t\t\tfirst_sack_index = j + 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tskb = tcp_write_queue_head(sk);\n\tstate.fack_count = 0;\n\ti = 0;\n\n\tif (!tp->sacked_out) {\n\t\t/* It's already past, so skip checking against it */\n\t\tcache = tp->recv_sack_cache + ARRAY_SIZE(tp->recv_sack_cache);\n\t} else {\n\t\tcache = tp->recv_sack_cache;\n\t\t/* Skip empty blocks in at head of the cache */\n\t\twhile (tcp_sack_cache_ok(tp, cache) && !cache->start_seq &&\n\t\t       !cache->end_seq)\n\t\t\tcache++;\n\t}\n\n\twhile (i < used_sacks) {\n\t\tu32 start_seq = sp[i].start_seq;\n\t\tu32 end_seq = sp[i].end_seq;\n\t\tint dup_sack = (found_dup_sack && (i == first_sack_index));\n\t\tstruct tcp_sack_block *next_dup = NULL;\n\n\t\tif (found_dup_sack && ((i + 1) == first_sack_index))\n\t\t\tnext_dup = &sp[i + 1];\n\n\t\t/* Event \"B\" in the comment above. */\n\t\tif (after(end_seq, tp->high_seq))\n\t\t\tstate.flag |= FLAG_DATA_LOST;\n\n\t\t/* Skip too early cached blocks */\n\t\twhile (tcp_sack_cache_ok(tp, cache) &&\n\t\t       !before(start_seq, cache->end_seq))\n\t\t\tcache++;\n\n\t\t/* Can skip some work by looking recv_sack_cache? */\n\t\tif (tcp_sack_cache_ok(tp, cache) && !dup_sack &&\n\t\t    after(end_seq, cache->start_seq)) {\n\n\t\t\t/* Head todo? */\n\t\t\tif (before(start_seq, cache->start_seq)) {\n\t\t\t\tskb = tcp_sacktag_skip(skb, sk, &state,\n\t\t\t\t\t\t       start_seq);\n\t\t\t\tskb = tcp_sacktag_walk(skb, sk, next_dup,\n\t\t\t\t\t\t       &state,\n\t\t\t\t\t\t       start_seq,\n\t\t\t\t\t\t       cache->start_seq,\n\t\t\t\t\t\t       dup_sack);\n\t\t\t}\n\n\t\t\t/* Rest of the block already fully processed? */\n\t\t\tif (!after(end_seq, cache->end_seq))\n\t\t\t\tgoto advance_sp;\n\n\t\t\tskb = tcp_maybe_skipping_dsack(skb, sk, next_dup,\n\t\t\t\t\t\t       &state,\n\t\t\t\t\t\t       cache->end_seq);\n\n\t\t\t/* ...tail remains todo... */\n\t\t\tif (tcp_highest_sack_seq(tp) == cache->end_seq) {\n\t\t\t\t/* ...but better entrypoint exists! */\n\t\t\t\tskb = tcp_highest_sack(sk);\n\t\t\t\tif (skb == NULL)\n\t\t\t\t\tbreak;\n\t\t\t\tstate.fack_count = tp->fackets_out;\n\t\t\t\tcache++;\n\t\t\t\tgoto walk;\n\t\t\t}\n\n\t\t\tskb = tcp_sacktag_skip(skb, sk, &state, cache->end_seq);\n\t\t\t/* Check overlap against next cached too (past this one already) */\n\t\t\tcache++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!before(start_seq, tcp_highest_sack_seq(tp))) {\n\t\t\tskb = tcp_highest_sack(sk);\n\t\t\tif (skb == NULL)\n\t\t\t\tbreak;\n\t\t\tstate.fack_count = tp->fackets_out;\n\t\t}\n\t\tskb = tcp_sacktag_skip(skb, sk, &state, start_seq);\n\nwalk:\n\t\tskb = tcp_sacktag_walk(skb, sk, next_dup, &state,\n\t\t\t\t       start_seq, end_seq, dup_sack);\n\nadvance_sp:\n\t\t/* SACK enhanced FRTO (RFC4138, Appendix B): Clearing correct\n\t\t * due to in-order walk\n\t\t */\n\t\tif (after(end_seq, tp->frto_highmark))\n\t\t\tstate.flag &= ~FLAG_ONLY_ORIG_SACKED;\n\n\t\ti++;\n\t}\n\n\t/* Clear the head of the cache sack blocks so we can skip it next time */\n\tfor (i = 0; i < ARRAY_SIZE(tp->recv_sack_cache) - used_sacks; i++) {\n\t\ttp->recv_sack_cache[i].start_seq = 0;\n\t\ttp->recv_sack_cache[i].end_seq = 0;\n\t}\n\tfor (j = 0; j < used_sacks; j++)\n\t\ttp->recv_sack_cache[i++] = sp[j];\n\n\ttcp_mark_lost_retrans(sk);\n\n\ttcp_verify_left_out(tp);\n\n\tif ((state.reord < tp->fackets_out) &&\n\t    ((icsk->icsk_ca_state != TCP_CA_Loss) || tp->undo_marker) &&\n\t    (!tp->frto_highmark || after(tp->snd_una, tp->frto_highmark)))\n\t\ttcp_update_reordering(sk, tp->fackets_out - state.reord, 0);\n\nout:\n\n#if FASTRETRANS_DEBUG > 0\n\tWARN_ON((int)tp->sacked_out < 0);\n\tWARN_ON((int)tp->lost_out < 0);\n\tWARN_ON((int)tp->retrans_out < 0);\n\tWARN_ON((int)tcp_packets_in_flight(tp) < 0);\n#endif\n\treturn state.flag;\n}\n\n/* Limits sacked_out so that sum with lost_out isn't ever larger than\n * packets_out. Returns zero if sacked_out adjustement wasn't necessary.\n */\nstatic int tcp_limit_reno_sacked(struct tcp_sock *tp)\n{\n\tu32 holes;\n\n\tholes = max(tp->lost_out, 1U);\n\tholes = min(holes, tp->packets_out);\n\n\tif ((tp->sacked_out + holes) > tp->packets_out) {\n\t\ttp->sacked_out = tp->packets_out - holes;\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n/* If we receive more dupacks than we expected counting segments\n * in assumption of absent reordering, interpret this as reordering.\n * The only another reason could be bug in receiver TCP.\n */\nstatic void tcp_check_reno_reordering(struct sock *sk, const int addend)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tif (tcp_limit_reno_sacked(tp))\n\t\ttcp_update_reordering(sk, tp->packets_out + addend, 0);\n}\n\n/* Emulate SACKs for SACKless connection: account for a new dupack. */\n\nstatic void tcp_add_reno_sack(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\ttp->sacked_out++;\n\ttcp_check_reno_reordering(sk, 0);\n\ttcp_verify_left_out(tp);\n}\n\n/* Account for ACK, ACKing some data in Reno Recovery phase. */\n\nstatic void tcp_remove_reno_sacks(struct sock *sk, int acked)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (acked > 0) {\n\t\t/* One ACK acked hole. The rest eat duplicate ACKs. */\n\t\tif (acked - 1 >= tp->sacked_out)\n\t\t\ttp->sacked_out = 0;\n\t\telse\n\t\t\ttp->sacked_out -= acked - 1;\n\t}\n\ttcp_check_reno_reordering(sk, acked);\n\ttcp_verify_left_out(tp);\n}\n\nstatic inline void tcp_reset_reno_sack(struct tcp_sock *tp)\n{\n\ttp->sacked_out = 0;\n}\n\nstatic int tcp_is_sackfrto(const struct tcp_sock *tp)\n{\n\treturn (sysctl_tcp_frto == 0x2) && !tcp_is_reno(tp);\n}\n\n/* F-RTO can only be used if TCP has never retransmitted anything other than\n * head (SACK enhanced variant from Appendix B of RFC4138 is more robust here)\n */\nint tcp_use_frto(struct sock *sk)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\tstruct sk_buff *skb;\n\n\tif (!sysctl_tcp_frto)\n\t\treturn 0;\n\n\t/* MTU probe and F-RTO won't really play nicely along currently */\n\tif (icsk->icsk_mtup.probe_size)\n\t\treturn 0;\n\n\tif (tcp_is_sackfrto(tp))\n\t\treturn 1;\n\n\t/* Avoid expensive walking of rexmit queue if possible */\n\tif (tp->retrans_out > 1)\n\t\treturn 0;\n\n\tskb = tcp_write_queue_head(sk);\n\tif (tcp_skb_is_last(sk, skb))\n\t\treturn 1;\n\tskb = tcp_write_queue_next(sk, skb);\t/* Skips head */\n\ttcp_for_write_queue_from(skb, sk) {\n\t\tif (skb == tcp_send_head(sk))\n\t\t\tbreak;\n\t\tif (TCP_SKB_CB(skb)->sacked & TCPCB_RETRANS)\n\t\t\treturn 0;\n\t\t/* Short-circuit when first non-SACKed skb has been checked */\n\t\tif (!(TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_ACKED))\n\t\t\tbreak;\n\t}\n\treturn 1;\n}\n\n/* RTO occurred, but do not yet enter Loss state. Instead, defer RTO\n * recovery a bit and use heuristics in tcp_process_frto() to detect if\n * the RTO was spurious. Only clear SACKED_RETRANS of the head here to\n * keep retrans_out counting accurate (with SACK F-RTO, other than head\n * may still have that bit set); TCPCB_LOST and remaining SACKED_RETRANS\n * bits are handled if the Loss state is really to be entered (in\n * tcp_enter_frto_loss).\n *\n * Do like tcp_enter_loss() would; when RTO expires the second time it\n * does:\n *  \"Reduce ssthresh if it has not yet been made inside this window.\"\n */\nvoid tcp_enter_frto(struct sock *sk)\n{\n\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *skb;\n\n\tif ((!tp->frto_counter && icsk->icsk_ca_state <= TCP_CA_Disorder) ||\n\t    tp->snd_una == tp->high_seq ||\n\t    ((icsk->icsk_ca_state == TCP_CA_Loss || tp->frto_counter) &&\n\t     !icsk->icsk_retransmits)) {\n\t\ttp->prior_ssthresh = tcp_current_ssthresh(sk);\n\t\t/* Our state is too optimistic in ssthresh() call because cwnd\n\t\t * is not reduced until tcp_enter_frto_loss() when previous F-RTO\n\t\t * recovery has not yet completed. Pattern would be this: RTO,\n\t\t * Cumulative ACK, RTO (2xRTO for the same segment does not end\n\t\t * up here twice).\n\t\t * RFC4138 should be more specific on what to do, even though\n\t\t * RTO is quite unlikely to occur after the first Cumulative ACK\n\t\t * due to back-off and complexity of triggering events ...\n\t\t */\n\t\tif (tp->frto_counter) {\n\t\t\tu32 stored_cwnd;\n\t\t\tstored_cwnd = tp->snd_cwnd;\n\t\t\ttp->snd_cwnd = 2;\n\t\t\ttp->snd_ssthresh = icsk->icsk_ca_ops->ssthresh(sk);\n\t\t\ttp->snd_cwnd = stored_cwnd;\n\t\t} else {\n\t\t\ttp->snd_ssthresh = icsk->icsk_ca_ops->ssthresh(sk);\n\t\t}\n\t\t/* ... in theory, cong.control module could do \"any tricks\" in\n\t\t * ssthresh(), which means that ca_state, lost bits and lost_out\n\t\t * counter would have to be faked before the call occurs. We\n\t\t * consider that too expensive, unlikely and hacky, so modules\n\t\t * using these in ssthresh() must deal these incompatibility\n\t\t * issues if they receives CA_EVENT_FRTO and frto_counter != 0\n\t\t */\n\t\ttcp_ca_event(sk, CA_EVENT_FRTO);\n\t}\n\n\ttp->undo_marker = tp->snd_una;\n\ttp->undo_retrans = 0;\n\n\tskb = tcp_write_queue_head(sk);\n\tif (TCP_SKB_CB(skb)->sacked & TCPCB_RETRANS)\n\t\ttp->undo_marker = 0;\n\tif (TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_RETRANS) {\n\t\tTCP_SKB_CB(skb)->sacked &= ~TCPCB_SACKED_RETRANS;\n\t\ttp->retrans_out -= tcp_skb_pcount(skb);\n\t}\n\ttcp_verify_left_out(tp);\n\n\t/* Too bad if TCP was application limited */\n\ttp->snd_cwnd = min(tp->snd_cwnd, tcp_packets_in_flight(tp) + 1);\n\n\t/* Earlier loss recovery underway (see RFC4138; Appendix B).\n\t * The last condition is necessary at least in tp->frto_counter case.\n\t */\n\tif (tcp_is_sackfrto(tp) && (tp->frto_counter ||\n\t    ((1 << icsk->icsk_ca_state) & (TCPF_CA_Recovery|TCPF_CA_Loss))) &&\n\t    after(tp->high_seq, tp->snd_una)) {\n\t\ttp->frto_highmark = tp->high_seq;\n\t} else {\n\t\ttp->frto_highmark = tp->snd_nxt;\n\t}\n\ttcp_set_ca_state(sk, TCP_CA_Disorder);\n\ttp->high_seq = tp->snd_nxt;\n\ttp->frto_counter = 1;\n}\n\n/* Enter Loss state after F-RTO was applied. Dupack arrived after RTO,\n * which indicates that we should follow the traditional RTO recovery,\n * i.e. mark everything lost and do go-back-N retransmission.\n */\nstatic void tcp_enter_frto_loss(struct sock *sk, int allowed_segments, int flag)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *skb;\n\n\ttp->lost_out = 0;\n\ttp->retrans_out = 0;\n\tif (tcp_is_reno(tp))\n\t\ttcp_reset_reno_sack(tp);\n\n\ttcp_for_write_queue(skb, sk) {\n\t\tif (skb == tcp_send_head(sk))\n\t\t\tbreak;\n\n\t\tTCP_SKB_CB(skb)->sacked &= ~TCPCB_LOST;\n\t\t/*\n\t\t * Count the retransmission made on RTO correctly (only when\n\t\t * waiting for the first ACK and did not get it)...\n\t\t */\n\t\tif ((tp->frto_counter == 1) && !(flag & FLAG_DATA_ACKED)) {\n\t\t\t/* For some reason this R-bit might get cleared? */\n\t\t\tif (TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_RETRANS)\n\t\t\t\ttp->retrans_out += tcp_skb_pcount(skb);\n\t\t\t/* ...enter this if branch just for the first segment */\n\t\t\tflag |= FLAG_DATA_ACKED;\n\t\t} else {\n\t\t\tif (TCP_SKB_CB(skb)->sacked & TCPCB_RETRANS)\n\t\t\t\ttp->undo_marker = 0;\n\t\t\tTCP_SKB_CB(skb)->sacked &= ~TCPCB_SACKED_RETRANS;\n\t\t}\n\n\t\t/* Marking forward transmissions that were made after RTO lost\n\t\t * can cause unnecessary retransmissions in some scenarios,\n\t\t * SACK blocks will mitigate that in some but not in all cases.\n\t\t * We used to not mark them but it was causing break-ups with\n\t\t * receivers that do only in-order receival.\n\t\t *\n\t\t * TODO: we could detect presence of such receiver and select\n\t\t * different behavior per flow.\n\t\t */\n\t\tif (!(TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_ACKED)) {\n\t\t\tTCP_SKB_CB(skb)->sacked |= TCPCB_LOST;\n\t\t\ttp->lost_out += tcp_skb_pcount(skb);\n\t\t\ttp->retransmit_high = TCP_SKB_CB(skb)->end_seq;\n\t\t}\n\t}\n\ttcp_verify_left_out(tp);\n\n\ttp->snd_cwnd = tcp_packets_in_flight(tp) + allowed_segments;\n\ttp->snd_cwnd_cnt = 0;\n\ttp->snd_cwnd_stamp = tcp_time_stamp;\n\ttp->frto_counter = 0;\n\ttp->bytes_acked = 0;\n\n\ttp->reordering = min_t(unsigned int, tp->reordering,\n\t\t\t       sysctl_tcp_reordering);\n\ttcp_set_ca_state(sk, TCP_CA_Loss);\n\ttp->high_seq = tp->snd_nxt;\n\tTCP_ECN_queue_cwr(tp);\n\n\ttcp_clear_all_retrans_hints(tp);\n}\n\nstatic void tcp_clear_retrans_partial(struct tcp_sock *tp)\n{\n\ttp->retrans_out = 0;\n\ttp->lost_out = 0;\n\n\ttp->undo_marker = 0;\n\ttp->undo_retrans = 0;\n}\n\nvoid tcp_clear_retrans(struct tcp_sock *tp)\n{\n\ttcp_clear_retrans_partial(tp);\n\n\ttp->fackets_out = 0;\n\ttp->sacked_out = 0;\n}\n\n/* Enter Loss state. If \"how\" is not zero, forget all SACK information\n * and reset tags completely, otherwise preserve SACKs. If receiver\n * dropped its ofo queue, we will know this due to reneging detection.\n */\nvoid tcp_enter_loss(struct sock *sk, int how)\n{\n\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *skb;\n\n\t/* Reduce ssthresh if it has not yet been made inside this window. */\n\tif (icsk->icsk_ca_state <= TCP_CA_Disorder || tp->snd_una == tp->high_seq ||\n\t    (icsk->icsk_ca_state == TCP_CA_Loss && !icsk->icsk_retransmits)) {\n\t\ttp->prior_ssthresh = tcp_current_ssthresh(sk);\n\t\ttp->snd_ssthresh = icsk->icsk_ca_ops->ssthresh(sk);\n\t\ttcp_ca_event(sk, CA_EVENT_LOSS);\n\t}\n\ttp->snd_cwnd\t   = 1;\n\ttp->snd_cwnd_cnt   = 0;\n\ttp->snd_cwnd_stamp = tcp_time_stamp;\n\n\ttp->bytes_acked = 0;\n\ttcp_clear_retrans_partial(tp);\n\n\tif (tcp_is_reno(tp))\n\t\ttcp_reset_reno_sack(tp);\n\n\tif (!how) {\n\t\t/* Push undo marker, if it was plain RTO and nothing\n\t\t * was retransmitted. */\n\t\ttp->undo_marker = tp->snd_una;\n\t} else {\n\t\ttp->sacked_out = 0;\n\t\ttp->fackets_out = 0;\n\t}\n\ttcp_clear_all_retrans_hints(tp);\n\n\ttcp_for_write_queue(skb, sk) {\n\t\tif (skb == tcp_send_head(sk))\n\t\t\tbreak;\n\n\t\tif (TCP_SKB_CB(skb)->sacked & TCPCB_RETRANS)\n\t\t\ttp->undo_marker = 0;\n\t\tTCP_SKB_CB(skb)->sacked &= (~TCPCB_TAGBITS)|TCPCB_SACKED_ACKED;\n\t\tif (!(TCP_SKB_CB(skb)->sacked&TCPCB_SACKED_ACKED) || how) {\n\t\t\tTCP_SKB_CB(skb)->sacked &= ~TCPCB_SACKED_ACKED;\n\t\t\tTCP_SKB_CB(skb)->sacked |= TCPCB_LOST;\n\t\t\ttp->lost_out += tcp_skb_pcount(skb);\n\t\t\ttp->retransmit_high = TCP_SKB_CB(skb)->end_seq;\n\t\t}\n\t}\n\ttcp_verify_left_out(tp);\n\n\ttp->reordering = min_t(unsigned int, tp->reordering,\n\t\t\t       sysctl_tcp_reordering);\n\ttcp_set_ca_state(sk, TCP_CA_Loss);\n\ttp->high_seq = tp->snd_nxt;\n\tTCP_ECN_queue_cwr(tp);\n\t/* Abort F-RTO algorithm if one is in progress */\n\ttp->frto_counter = 0;\n}\n\n/* If ACK arrived pointing to a remembered SACK, it means that our\n * remembered SACKs do not reflect real state of receiver i.e.\n * receiver _host_ is heavily congested (or buggy).\n *\n * Do processing similar to RTO timeout.\n */\nstatic int tcp_check_sack_reneging(struct sock *sk, int flag)\n{\n\tif (flag & FLAG_SACK_RENEGING) {\n\t\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPSACKRENEGING);\n\n\t\ttcp_enter_loss(sk, 1);\n\t\ticsk->icsk_retransmits++;\n\t\ttcp_retransmit_skb(sk, tcp_write_queue_head(sk));\n\t\tinet_csk_reset_xmit_timer(sk, ICSK_TIME_RETRANS,\n\t\t\t\t\t  icsk->icsk_rto, TCP_RTO_MAX);\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nstatic inline int tcp_fackets_out(const struct tcp_sock *tp)\n{\n\treturn tcp_is_reno(tp) ? tp->sacked_out + 1 : tp->fackets_out;\n}\n\n/* Heurestics to calculate number of duplicate ACKs. There's no dupACKs\n * counter when SACK is enabled (without SACK, sacked_out is used for\n * that purpose).\n *\n * Instead, with FACK TCP uses fackets_out that includes both SACKed\n * segments up to the highest received SACK block so far and holes in\n * between them.\n *\n * With reordering, holes may still be in flight, so RFC3517 recovery\n * uses pure sacked_out (total number of SACKed segments) even though\n * it violates the RFC that uses duplicate ACKs, often these are equal\n * but when e.g. out-of-window ACKs or packet duplication occurs,\n * they differ. Since neither occurs due to loss, TCP should really\n * ignore them.\n */\nstatic inline int tcp_dupack_heuristics(const struct tcp_sock *tp)\n{\n\treturn tcp_is_fack(tp) ? tp->fackets_out : tp->sacked_out + 1;\n}\n\nstatic inline int tcp_skb_timedout(const struct sock *sk,\n\t\t\t\t   const struct sk_buff *skb)\n{\n\treturn tcp_time_stamp - TCP_SKB_CB(skb)->when > inet_csk(sk)->icsk_rto;\n}\n\nstatic inline int tcp_head_timedout(const struct sock *sk)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\n\treturn tp->packets_out &&\n\t       tcp_skb_timedout(sk, tcp_write_queue_head(sk));\n}\n\n/* Linux NewReno/SACK/FACK/ECN state machine.\n * --------------------------------------\n *\n * \"Open\"\tNormal state, no dubious events, fast path.\n * \"Disorder\"   In all the respects it is \"Open\",\n *\t\tbut requires a bit more attention. It is entered when\n *\t\twe see some SACKs or dupacks. It is split of \"Open\"\n *\t\tmainly to move some processing from fast path to slow one.\n * \"CWR\"\tCWND was reduced due to some Congestion Notification event.\n *\t\tIt can be ECN, ICMP source quench, local device congestion.\n * \"Recovery\"\tCWND was reduced, we are fast-retransmitting.\n * \"Loss\"\tCWND was reduced due to RTO timeout or SACK reneging.\n *\n * tcp_fastretrans_alert() is entered:\n * - each incoming ACK, if state is not \"Open\"\n * - when arrived ACK is unusual, namely:\n *\t* SACK\n *\t* Duplicate ACK.\n *\t* ECN ECE.\n *\n * Counting packets in flight is pretty simple.\n *\n *\tin_flight = packets_out - left_out + retrans_out\n *\n *\tpackets_out is SND.NXT-SND.UNA counted in packets.\n *\n *\tretrans_out is number of retransmitted segments.\n *\n *\tleft_out is number of segments left network, but not ACKed yet.\n *\n *\t\tleft_out = sacked_out + lost_out\n *\n *     sacked_out: Packets, which arrived to receiver out of order\n *\t\t   and hence not ACKed. With SACKs this number is simply\n *\t\t   amount of SACKed data. Even without SACKs\n *\t\t   it is easy to give pretty reliable estimate of this number,\n *\t\t   counting duplicate ACKs.\n *\n *       lost_out: Packets lost by network. TCP has no explicit\n *\t\t   \"loss notification\" feedback from network (for now).\n *\t\t   It means that this number can be only _guessed_.\n *\t\t   Actually, it is the heuristics to predict lossage that\n *\t\t   distinguishes different algorithms.\n *\n *\tF.e. after RTO, when all the queue is considered as lost,\n *\tlost_out = packets_out and in_flight = retrans_out.\n *\n *\t\tEssentially, we have now two algorithms counting\n *\t\tlost packets.\n *\n *\t\tFACK: It is the simplest heuristics. As soon as we decided\n *\t\tthat something is lost, we decide that _all_ not SACKed\n *\t\tpackets until the most forward SACK are lost. I.e.\n *\t\tlost_out = fackets_out - sacked_out and left_out = fackets_out.\n *\t\tIt is absolutely correct estimate, if network does not reorder\n *\t\tpackets. And it loses any connection to reality when reordering\n *\t\ttakes place. We use FACK by default until reordering\n *\t\tis suspected on the path to this destination.\n *\n *\t\tNewReno: when Recovery is entered, we assume that one segment\n *\t\tis lost (classic Reno). While we are in Recovery and\n *\t\ta partial ACK arrives, we assume that one more packet\n *\t\tis lost (NewReno). This heuristics are the same in NewReno\n *\t\tand SACK.\n *\n *  Imagine, that's all! Forget about all this shamanism about CWND inflation\n *  deflation etc. CWND is real congestion window, never inflated, changes\n *  only according to classic VJ rules.\n *\n * Really tricky (and requiring careful tuning) part of algorithm\n * is hidden in functions tcp_time_to_recover() and tcp_xmit_retransmit_queue().\n * The first determines the moment _when_ we should reduce CWND and,\n * hence, slow down forward transmission. In fact, it determines the moment\n * when we decide that hole is caused by loss, rather than by a reorder.\n *\n * tcp_xmit_retransmit_queue() decides, _what_ we should retransmit to fill\n * holes, caused by lost packets.\n *\n * And the most logically complicated part of algorithm is undo\n * heuristics. We detect false retransmits due to both too early\n * fast retransmit (reordering) and underestimated RTO, analyzing\n * timestamps and D-SACKs. When we detect that some segments were\n * retransmitted by mistake and CWND reduction was wrong, we undo\n * window reduction and abort recovery phase. This logic is hidden\n * inside several functions named tcp_try_undo_<something>.\n */\n\n/* This function decides, when we should leave Disordered state\n * and enter Recovery phase, reducing congestion window.\n *\n * Main question: may we further continue forward transmission\n * with the same cwnd?\n */\nstatic int tcp_time_to_recover(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\t__u32 packets_out;\n\n\t/* Do not perform any recovery during F-RTO algorithm */\n\tif (tp->frto_counter)\n\t\treturn 0;\n\n\t/* Trick#1: The loss is proven. */\n\tif (tp->lost_out)\n\t\treturn 1;\n\n\t/* Not-A-Trick#2 : Classic rule... */\n\tif (tcp_dupack_heuristics(tp) > tp->reordering)\n\t\treturn 1;\n\n\t/* Trick#3 : when we use RFC2988 timer restart, fast\n\t * retransmit can be triggered by timeout of queue head.\n\t */\n\tif (tcp_is_fack(tp) && tcp_head_timedout(sk))\n\t\treturn 1;\n\n\t/* Trick#4: It is still not OK... But will it be useful to delay\n\t * recovery more?\n\t */\n\tpackets_out = tp->packets_out;\n\tif (packets_out <= tp->reordering &&\n\t    tp->sacked_out >= max_t(__u32, packets_out/2, sysctl_tcp_reordering) &&\n\t    !tcp_may_send_now(sk)) {\n\t\t/* We have nothing to send. This connection is limited\n\t\t * either by receiver window or by application.\n\t\t */\n\t\treturn 1;\n\t}\n\n\t/* If a thin stream is detected, retransmit after first\n\t * received dupack. Employ only if SACK is supported in order\n\t * to avoid possible corner-case series of spurious retransmissions\n\t * Use only if there are no unsent data.\n\t */\n\tif ((tp->thin_dupack || sysctl_tcp_thin_dupack) &&\n\t    tcp_stream_is_thin(tp) && tcp_dupack_heuristics(tp) > 1 &&\n\t    tcp_is_sack(tp) && !tcp_send_head(sk))\n\t\treturn 1;\n\n\treturn 0;\n}\n\n/* New heuristics: it is possible only after we switched to restart timer\n * each time when something is ACKed. Hence, we can detect timed out packets\n * during fast retransmit without falling to slow start.\n *\n * Usefulness of this as is very questionable, since we should know which of\n * the segments is the next to timeout which is relatively expensive to find\n * in general case unless we add some data structure just for that. The\n * current approach certainly won't find the right one too often and when it\n * finally does find _something_ it usually marks large part of the window\n * right away (because a retransmission with a larger timestamp blocks the\n * loop from advancing). -ij\n */\nstatic void tcp_timeout_skbs(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *skb;\n\n\tif (!tcp_is_fack(tp) || !tcp_head_timedout(sk))\n\t\treturn;\n\n\tskb = tp->scoreboard_skb_hint;\n\tif (tp->scoreboard_skb_hint == NULL)\n\t\tskb = tcp_write_queue_head(sk);\n\n\ttcp_for_write_queue_from(skb, sk) {\n\t\tif (skb == tcp_send_head(sk))\n\t\t\tbreak;\n\t\tif (!tcp_skb_timedout(sk, skb))\n\t\t\tbreak;\n\n\t\ttcp_skb_mark_lost(tp, skb);\n\t}\n\n\ttp->scoreboard_skb_hint = skb;\n\n\ttcp_verify_left_out(tp);\n}\n\n/* Mark head of queue up as lost. With RFC3517 SACK, the packets is\n * is against sacked \"cnt\", otherwise it's against facked \"cnt\"\n */\nstatic void tcp_mark_head_lost(struct sock *sk, int packets, int mark_head)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *skb;\n\tint cnt, oldcnt;\n\tint err;\n\tunsigned int mss;\n\n\tWARN_ON(packets > tp->packets_out);\n\tif (tp->lost_skb_hint) {\n\t\tskb = tp->lost_skb_hint;\n\t\tcnt = tp->lost_cnt_hint;\n\t\t/* Head already handled? */\n\t\tif (mark_head && skb != tcp_write_queue_head(sk))\n\t\t\treturn;\n\t} else {\n\t\tskb = tcp_write_queue_head(sk);\n\t\tcnt = 0;\n\t}\n\n\ttcp_for_write_queue_from(skb, sk) {\n\t\tif (skb == tcp_send_head(sk))\n\t\t\tbreak;\n\t\t/* TODO: do this better */\n\t\t/* this is not the most efficient way to do this... */\n\t\ttp->lost_skb_hint = skb;\n\t\ttp->lost_cnt_hint = cnt;\n\n\t\tif (after(TCP_SKB_CB(skb)->end_seq, tp->high_seq))\n\t\t\tbreak;\n\n\t\toldcnt = cnt;\n\t\tif (tcp_is_fack(tp) || tcp_is_reno(tp) ||\n\t\t    (TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_ACKED))\n\t\t\tcnt += tcp_skb_pcount(skb);\n\n\t\tif (cnt > packets) {\n\t\t\tif ((tcp_is_sack(tp) && !tcp_is_fack(tp)) ||\n\t\t\t    (oldcnt >= packets))\n\t\t\t\tbreak;\n\n\t\t\tmss = skb_shinfo(skb)->gso_size;\n\t\t\terr = tcp_fragment(sk, skb, (packets - oldcnt) * mss, mss);\n\t\t\tif (err < 0)\n\t\t\t\tbreak;\n\t\t\tcnt = packets;\n\t\t}\n\n\t\ttcp_skb_mark_lost(tp, skb);\n\n\t\tif (mark_head)\n\t\t\tbreak;\n\t}\n\ttcp_verify_left_out(tp);\n}\n\n/* Account newly detected lost packet(s) */\n\nstatic void tcp_update_scoreboard(struct sock *sk, int fast_rexmit)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (tcp_is_reno(tp)) {\n\t\ttcp_mark_head_lost(sk, 1, 1);\n\t} else if (tcp_is_fack(tp)) {\n\t\tint lost = tp->fackets_out - tp->reordering;\n\t\tif (lost <= 0)\n\t\t\tlost = 1;\n\t\ttcp_mark_head_lost(sk, lost, 0);\n\t} else {\n\t\tint sacked_upto = tp->sacked_out - tp->reordering;\n\t\tif (sacked_upto >= 0)\n\t\t\ttcp_mark_head_lost(sk, sacked_upto, 0);\n\t\telse if (fast_rexmit)\n\t\t\ttcp_mark_head_lost(sk, 1, 1);\n\t}\n\n\ttcp_timeout_skbs(sk);\n}\n\n/* CWND moderation, preventing bursts due to too big ACKs\n * in dubious situations.\n */\nstatic inline void tcp_moderate_cwnd(struct tcp_sock *tp)\n{\n\ttp->snd_cwnd = min(tp->snd_cwnd,\n\t\t\t   tcp_packets_in_flight(tp) + tcp_max_burst(tp));\n\ttp->snd_cwnd_stamp = tcp_time_stamp;\n}\n\n/* Lower bound on congestion window is slow start threshold\n * unless congestion avoidance choice decides to overide it.\n */\nstatic inline u32 tcp_cwnd_min(const struct sock *sk)\n{\n\tconst struct tcp_congestion_ops *ca_ops = inet_csk(sk)->icsk_ca_ops;\n\n\treturn ca_ops->min_cwnd ? ca_ops->min_cwnd(sk) : tcp_sk(sk)->snd_ssthresh;\n}\n\n/* Decrease cwnd each second ack. */\nstatic void tcp_cwnd_down(struct sock *sk, int flag)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint decr = tp->snd_cwnd_cnt + 1;\n\n\tif ((flag & (FLAG_ANY_PROGRESS | FLAG_DSACKING_ACK)) ||\n\t    (tcp_is_reno(tp) && !(flag & FLAG_NOT_DUP))) {\n\t\ttp->snd_cwnd_cnt = decr & 1;\n\t\tdecr >>= 1;\n\n\t\tif (decr && tp->snd_cwnd > tcp_cwnd_min(sk))\n\t\t\ttp->snd_cwnd -= decr;\n\n\t\ttp->snd_cwnd = min(tp->snd_cwnd, tcp_packets_in_flight(tp) + 1);\n\t\ttp->snd_cwnd_stamp = tcp_time_stamp;\n\t}\n}\n\n/* Nothing was retransmitted or returned timestamp is less\n * than timestamp of the first retransmission.\n */\nstatic inline int tcp_packet_delayed(const struct tcp_sock *tp)\n{\n\treturn !tp->retrans_stamp ||\n\t\t(tp->rx_opt.saw_tstamp && tp->rx_opt.rcv_tsecr &&\n\t\t before(tp->rx_opt.rcv_tsecr, tp->retrans_stamp));\n}\n\n/* Undo procedures. */\n\n#if FASTRETRANS_DEBUG > 1\nstatic void DBGUNDO(struct sock *sk, const char *msg)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct inet_sock *inet = inet_sk(sk);\n\n\tif (sk->sk_family == AF_INET) {\n\t\tprintk(KERN_DEBUG \"Undo %s %pI4/%u c%u l%u ss%u/%u p%u\\n\",\n\t\t       msg,\n\t\t       &inet->inet_daddr, ntohs(inet->inet_dport),\n\t\t       tp->snd_cwnd, tcp_left_out(tp),\n\t\t       tp->snd_ssthresh, tp->prior_ssthresh,\n\t\t       tp->packets_out);\n\t}\n#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)\n\telse if (sk->sk_family == AF_INET6) {\n\t\tstruct ipv6_pinfo *np = inet6_sk(sk);\n\t\tprintk(KERN_DEBUG \"Undo %s %pI6/%u c%u l%u ss%u/%u p%u\\n\",\n\t\t       msg,\n\t\t       &np->daddr, ntohs(inet->inet_dport),\n\t\t       tp->snd_cwnd, tcp_left_out(tp),\n\t\t       tp->snd_ssthresh, tp->prior_ssthresh,\n\t\t       tp->packets_out);\n\t}\n#endif\n}\n#else\n#define DBGUNDO(x...) do { } while (0)\n#endif\n\nstatic void tcp_undo_cwr(struct sock *sk, const bool undo_ssthresh)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (tp->prior_ssthresh) {\n\t\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\n\t\tif (icsk->icsk_ca_ops->undo_cwnd)\n\t\t\ttp->snd_cwnd = icsk->icsk_ca_ops->undo_cwnd(sk);\n\t\telse\n\t\t\ttp->snd_cwnd = max(tp->snd_cwnd, tp->snd_ssthresh << 1);\n\n\t\tif (undo_ssthresh && tp->prior_ssthresh > tp->snd_ssthresh) {\n\t\t\ttp->snd_ssthresh = tp->prior_ssthresh;\n\t\t\tTCP_ECN_withdraw_cwr(tp);\n\t\t}\n\t} else {\n\t\ttp->snd_cwnd = max(tp->snd_cwnd, tp->snd_ssthresh);\n\t}\n\ttp->snd_cwnd_stamp = tcp_time_stamp;\n}\n\nstatic inline int tcp_may_undo(const struct tcp_sock *tp)\n{\n\treturn tp->undo_marker && (!tp->undo_retrans || tcp_packet_delayed(tp));\n}\n\n/* People celebrate: \"We love our President!\" */\nstatic int tcp_try_undo_recovery(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (tcp_may_undo(tp)) {\n\t\tint mib_idx;\n\n\t\t/* Happy end! We did not retransmit anything\n\t\t * or our original transmission succeeded.\n\t\t */\n\t\tDBGUNDO(sk, inet_csk(sk)->icsk_ca_state == TCP_CA_Loss ? \"loss\" : \"retrans\");\n\t\ttcp_undo_cwr(sk, true);\n\t\tif (inet_csk(sk)->icsk_ca_state == TCP_CA_Loss)\n\t\t\tmib_idx = LINUX_MIB_TCPLOSSUNDO;\n\t\telse\n\t\t\tmib_idx = LINUX_MIB_TCPFULLUNDO;\n\n\t\tNET_INC_STATS_BH(sock_net(sk), mib_idx);\n\t\ttp->undo_marker = 0;\n\t}\n\tif (tp->snd_una == tp->high_seq && tcp_is_reno(tp)) {\n\t\t/* Hold old state until something *above* high_seq\n\t\t * is ACKed. For Reno it is MUST to prevent false\n\t\t * fast retransmits (RFC2582). SACK TCP is safe. */\n\t\ttcp_moderate_cwnd(tp);\n\t\treturn 1;\n\t}\n\ttcp_set_ca_state(sk, TCP_CA_Open);\n\treturn 0;\n}\n\n/* Try to undo cwnd reduction, because D-SACKs acked all retransmitted data */\nstatic void tcp_try_undo_dsack(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (tp->undo_marker && !tp->undo_retrans) {\n\t\tDBGUNDO(sk, \"D-SACK\");\n\t\ttcp_undo_cwr(sk, true);\n\t\ttp->undo_marker = 0;\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPDSACKUNDO);\n\t}\n}\n\n/* We can clear retrans_stamp when there are no retransmissions in the\n * window. It would seem that it is trivially available for us in\n * tp->retrans_out, however, that kind of assumptions doesn't consider\n * what will happen if errors occur when sending retransmission for the\n * second time. ...It could the that such segment has only\n * TCPCB_EVER_RETRANS set at the present time. It seems that checking\n * the head skb is enough except for some reneging corner cases that\n * are not worth the effort.\n *\n * Main reason for all this complexity is the fact that connection dying\n * time now depends on the validity of the retrans_stamp, in particular,\n * that successive retransmissions of a segment must not advance\n * retrans_stamp under any conditions.\n */\nstatic int tcp_any_retrans_done(const struct sock *sk)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *skb;\n\n\tif (tp->retrans_out)\n\t\treturn 1;\n\n\tskb = tcp_write_queue_head(sk);\n\tif (unlikely(skb && TCP_SKB_CB(skb)->sacked & TCPCB_EVER_RETRANS))\n\t\treturn 1;\n\n\treturn 0;\n}\n\n/* Undo during fast recovery after partial ACK. */\n\nstatic int tcp_try_undo_partial(struct sock *sk, int acked)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\t/* Partial ACK arrived. Force Hoe's retransmit. */\n\tint failed = tcp_is_reno(tp) || (tcp_fackets_out(tp) > tp->reordering);\n\n\tif (tcp_may_undo(tp)) {\n\t\t/* Plain luck! Hole if filled with delayed\n\t\t * packet, rather than with a retransmit.\n\t\t */\n\t\tif (!tcp_any_retrans_done(sk))\n\t\t\ttp->retrans_stamp = 0;\n\n\t\ttcp_update_reordering(sk, tcp_fackets_out(tp) + acked, 1);\n\n\t\tDBGUNDO(sk, \"Hoe\");\n\t\ttcp_undo_cwr(sk, false);\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPPARTIALUNDO);\n\n\t\t/* So... Do not make Hoe's retransmit yet.\n\t\t * If the first packet was delayed, the rest\n\t\t * ones are most probably delayed as well.\n\t\t */\n\t\tfailed = 0;\n\t}\n\treturn failed;\n}\n\n/* Undo during loss recovery after partial ACK. */\nstatic int tcp_try_undo_loss(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (tcp_may_undo(tp)) {\n\t\tstruct sk_buff *skb;\n\t\ttcp_for_write_queue(skb, sk) {\n\t\t\tif (skb == tcp_send_head(sk))\n\t\t\t\tbreak;\n\t\t\tTCP_SKB_CB(skb)->sacked &= ~TCPCB_LOST;\n\t\t}\n\n\t\ttcp_clear_all_retrans_hints(tp);\n\n\t\tDBGUNDO(sk, \"partial loss\");\n\t\ttp->lost_out = 0;\n\t\ttcp_undo_cwr(sk, true);\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPLOSSUNDO);\n\t\tinet_csk(sk)->icsk_retransmits = 0;\n\t\ttp->undo_marker = 0;\n\t\tif (tcp_is_sack(tp))\n\t\t\ttcp_set_ca_state(sk, TCP_CA_Open);\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nstatic inline void tcp_complete_cwr(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\t/* Do not moderate cwnd if it's already undone in cwr or recovery. */\n\tif (tp->undo_marker) {\n\t\tif (inet_csk(sk)->icsk_ca_state == TCP_CA_CWR)\n\t\t\ttp->snd_cwnd = min(tp->snd_cwnd, tp->snd_ssthresh);\n\t\telse /* PRR */\n\t\t\ttp->snd_cwnd = tp->snd_ssthresh;\n\t\ttp->snd_cwnd_stamp = tcp_time_stamp;\n\t}\n\ttcp_ca_event(sk, CA_EVENT_COMPLETE_CWR);\n}\n\nstatic void tcp_try_keep_open(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint state = TCP_CA_Open;\n\n\tif (tcp_left_out(tp) || tcp_any_retrans_done(sk))\n\t\tstate = TCP_CA_Disorder;\n\n\tif (inet_csk(sk)->icsk_ca_state != state) {\n\t\ttcp_set_ca_state(sk, state);\n\t\ttp->high_seq = tp->snd_nxt;\n\t}\n}\n\nstatic void tcp_try_to_open(struct sock *sk, int flag)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\ttcp_verify_left_out(tp);\n\n\tif (!tp->frto_counter && !tcp_any_retrans_done(sk))\n\t\ttp->retrans_stamp = 0;\n\n\tif (flag & FLAG_ECE)\n\t\ttcp_enter_cwr(sk, 1);\n\n\tif (inet_csk(sk)->icsk_ca_state != TCP_CA_CWR) {\n\t\ttcp_try_keep_open(sk);\n\t\tif (inet_csk(sk)->icsk_ca_state != TCP_CA_Open)\n\t\t\ttcp_moderate_cwnd(tp);\n\t} else {\n\t\ttcp_cwnd_down(sk, flag);\n\t}\n}\n\nstatic void tcp_mtup_probe_failed(struct sock *sk)\n{\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\n\ticsk->icsk_mtup.search_high = icsk->icsk_mtup.probe_size - 1;\n\ticsk->icsk_mtup.probe_size = 0;\n}\n\nstatic void tcp_mtup_probe_success(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\n\t/* FIXME: breaks with very large cwnd */\n\ttp->prior_ssthresh = tcp_current_ssthresh(sk);\n\ttp->snd_cwnd = tp->snd_cwnd *\n\t\t       tcp_mss_to_mtu(sk, tp->mss_cache) /\n\t\t       icsk->icsk_mtup.probe_size;\n\ttp->snd_cwnd_cnt = 0;\n\ttp->snd_cwnd_stamp = tcp_time_stamp;\n\ttp->snd_ssthresh = tcp_current_ssthresh(sk);\n\n\ticsk->icsk_mtup.search_low = icsk->icsk_mtup.probe_size;\n\ticsk->icsk_mtup.probe_size = 0;\n\ttcp_sync_mss(sk, icsk->icsk_pmtu_cookie);\n}\n\n/* Do a simple retransmit without using the backoff mechanisms in\n * tcp_timer. This is used for path mtu discovery.\n * The socket is already locked here.\n */\nvoid tcp_simple_retransmit(struct sock *sk)\n{\n\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *skb;\n\tunsigned int mss = tcp_current_mss(sk);\n\tu32 prior_lost = tp->lost_out;\n\n\ttcp_for_write_queue(skb, sk) {\n\t\tif (skb == tcp_send_head(sk))\n\t\t\tbreak;\n\t\tif (tcp_skb_seglen(skb) > mss &&\n\t\t    !(TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_ACKED)) {\n\t\t\tif (TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_RETRANS) {\n\t\t\t\tTCP_SKB_CB(skb)->sacked &= ~TCPCB_SACKED_RETRANS;\n\t\t\t\ttp->retrans_out -= tcp_skb_pcount(skb);\n\t\t\t}\n\t\t\ttcp_skb_mark_lost_uncond_verify(tp, skb);\n\t\t}\n\t}\n\n\ttcp_clear_retrans_hints_partial(tp);\n\n\tif (prior_lost == tp->lost_out)\n\t\treturn;\n\n\tif (tcp_is_reno(tp))\n\t\ttcp_limit_reno_sacked(tp);\n\n\ttcp_verify_left_out(tp);\n\n\t/* Don't muck with the congestion window here.\n\t * Reason is that we do not increase amount of _data_\n\t * in network, but units changed and effective\n\t * cwnd/ssthresh really reduced now.\n\t */\n\tif (icsk->icsk_ca_state != TCP_CA_Loss) {\n\t\ttp->high_seq = tp->snd_nxt;\n\t\ttp->snd_ssthresh = tcp_current_ssthresh(sk);\n\t\ttp->prior_ssthresh = 0;\n\t\ttp->undo_marker = 0;\n\t\ttcp_set_ca_state(sk, TCP_CA_Loss);\n\t}\n\ttcp_xmit_retransmit_queue(sk);\n}\nEXPORT_SYMBOL(tcp_simple_retransmit);\n\n/* This function implements the PRR algorithm, specifcally the PRR-SSRB\n * (proportional rate reduction with slow start reduction bound) as described in\n * http://www.ietf.org/id/draft-mathis-tcpm-proportional-rate-reduction-01.txt.\n * It computes the number of packets to send (sndcnt) based on packets newly\n * delivered:\n *   1) If the packets in flight is larger than ssthresh, PRR spreads the\n *\tcwnd reductions across a full RTT.\n *   2) If packets in flight is lower than ssthresh (such as due to excess\n *\tlosses and/or application stalls), do not perform any further cwnd\n *\treductions, but instead slow start up to ssthresh.\n */\nstatic void tcp_update_cwnd_in_recovery(struct sock *sk, int newly_acked_sacked,\n\t\t\t\t\tint fast_rexmit, int flag)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint sndcnt = 0;\n\tint delta = tp->snd_ssthresh - tcp_packets_in_flight(tp);\n\n\tif (tcp_packets_in_flight(tp) > tp->snd_ssthresh) {\n\t\tu64 dividend = (u64)tp->snd_ssthresh * tp->prr_delivered +\n\t\t\t       tp->prior_cwnd - 1;\n\t\tsndcnt = div_u64(dividend, tp->prior_cwnd) - tp->prr_out;\n\t} else {\n\t\tsndcnt = min_t(int, delta,\n\t\t\t       max_t(int, tp->prr_delivered - tp->prr_out,\n\t\t\t\t     newly_acked_sacked) + 1);\n\t}\n\n\tsndcnt = max(sndcnt, (fast_rexmit ? 1 : 0));\n\ttp->snd_cwnd = tcp_packets_in_flight(tp) + sndcnt;\n}\n\n/* Process an event, which can update packets-in-flight not trivially.\n * Main goal of this function is to calculate new estimate for left_out,\n * taking into account both packets sitting in receiver's buffer and\n * packets lost by network.\n *\n * Besides that it does CWND reduction, when packet loss is detected\n * and changes state of machine.\n *\n * It does _not_ decide what to send, it is made in function\n * tcp_xmit_retransmit_queue().\n */\nstatic void tcp_fastretrans_alert(struct sock *sk, int pkts_acked,\n\t\t\t\t  int newly_acked_sacked, bool is_dupack,\n\t\t\t\t  int flag)\n{\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint do_lost = is_dupack || ((flag & FLAG_DATA_SACKED) &&\n\t\t\t\t    (tcp_fackets_out(tp) > tp->reordering));\n\tint fast_rexmit = 0, mib_idx;\n\n\tif (WARN_ON(!tp->packets_out && tp->sacked_out))\n\t\ttp->sacked_out = 0;\n\tif (WARN_ON(!tp->sacked_out && tp->fackets_out))\n\t\ttp->fackets_out = 0;\n\n\t/* Now state machine starts.\n\t * A. ECE, hence prohibit cwnd undoing, the reduction is required. */\n\tif (flag & FLAG_ECE)\n\t\ttp->prior_ssthresh = 0;\n\n\t/* B. In all the states check for reneging SACKs. */\n\tif (tcp_check_sack_reneging(sk, flag))\n\t\treturn;\n\n\t/* C. Process data loss notification, provided it is valid. */\n\tif (tcp_is_fack(tp) && (flag & FLAG_DATA_LOST) &&\n\t    before(tp->snd_una, tp->high_seq) &&\n\t    icsk->icsk_ca_state != TCP_CA_Open &&\n\t    tp->fackets_out > tp->reordering) {\n\t\ttcp_mark_head_lost(sk, tp->fackets_out - tp->reordering, 0);\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPLOSS);\n\t}\n\n\t/* D. Check consistency of the current state. */\n\ttcp_verify_left_out(tp);\n\n\t/* E. Check state exit conditions. State can be terminated\n\t *    when high_seq is ACKed. */\n\tif (icsk->icsk_ca_state == TCP_CA_Open) {\n\t\tWARN_ON(tp->retrans_out != 0);\n\t\ttp->retrans_stamp = 0;\n\t} else if (!before(tp->snd_una, tp->high_seq)) {\n\t\tswitch (icsk->icsk_ca_state) {\n\t\tcase TCP_CA_Loss:\n\t\t\ticsk->icsk_retransmits = 0;\n\t\t\tif (tcp_try_undo_recovery(sk))\n\t\t\t\treturn;\n\t\t\tbreak;\n\n\t\tcase TCP_CA_CWR:\n\t\t\t/* CWR is to be held something *above* high_seq\n\t\t\t * is ACKed for CWR bit to reach receiver. */\n\t\t\tif (tp->snd_una != tp->high_seq) {\n\t\t\t\ttcp_complete_cwr(sk);\n\t\t\t\ttcp_set_ca_state(sk, TCP_CA_Open);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase TCP_CA_Recovery:\n\t\t\tif (tcp_is_reno(tp))\n\t\t\t\ttcp_reset_reno_sack(tp);\n\t\t\tif (tcp_try_undo_recovery(sk))\n\t\t\t\treturn;\n\t\t\ttcp_complete_cwr(sk);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/* F. Process state. */\n\tswitch (icsk->icsk_ca_state) {\n\tcase TCP_CA_Recovery:\n\t\tif (!(flag & FLAG_SND_UNA_ADVANCED)) {\n\t\t\tif (tcp_is_reno(tp) && is_dupack)\n\t\t\t\ttcp_add_reno_sack(sk);\n\t\t} else\n\t\t\tdo_lost = tcp_try_undo_partial(sk, pkts_acked);\n\t\tbreak;\n\tcase TCP_CA_Loss:\n\t\tif (flag & FLAG_DATA_ACKED)\n\t\t\ticsk->icsk_retransmits = 0;\n\t\tif (tcp_is_reno(tp) && flag & FLAG_SND_UNA_ADVANCED)\n\t\t\ttcp_reset_reno_sack(tp);\n\t\tif (!tcp_try_undo_loss(sk)) {\n\t\t\ttcp_moderate_cwnd(tp);\n\t\t\ttcp_xmit_retransmit_queue(sk);\n\t\t\treturn;\n\t\t}\n\t\tif (icsk->icsk_ca_state != TCP_CA_Open)\n\t\t\treturn;\n\t\t/* Loss is undone; fall through to processing in Open state. */\n\tdefault:\n\t\tif (tcp_is_reno(tp)) {\n\t\t\tif (flag & FLAG_SND_UNA_ADVANCED)\n\t\t\t\ttcp_reset_reno_sack(tp);\n\t\t\tif (is_dupack)\n\t\t\t\ttcp_add_reno_sack(sk);\n\t\t}\n\n\t\tif (icsk->icsk_ca_state <= TCP_CA_Disorder)\n\t\t\ttcp_try_undo_dsack(sk);\n\n\t\tif (!tcp_time_to_recover(sk)) {\n\t\t\ttcp_try_to_open(sk, flag);\n\t\t\treturn;\n\t\t}\n\n\t\t/* MTU probe failure: don't reduce cwnd */\n\t\tif (icsk->icsk_ca_state < TCP_CA_CWR &&\n\t\t    icsk->icsk_mtup.probe_size &&\n\t\t    tp->snd_una == tp->mtu_probe.probe_seq_start) {\n\t\t\ttcp_mtup_probe_failed(sk);\n\t\t\t/* Restores the reduction we did in tcp_mtup_probe() */\n\t\t\ttp->snd_cwnd++;\n\t\t\ttcp_simple_retransmit(sk);\n\t\t\treturn;\n\t\t}\n\n\t\t/* Otherwise enter Recovery state */\n\n\t\tif (tcp_is_reno(tp))\n\t\t\tmib_idx = LINUX_MIB_TCPRENORECOVERY;\n\t\telse\n\t\t\tmib_idx = LINUX_MIB_TCPSACKRECOVERY;\n\n\t\tNET_INC_STATS_BH(sock_net(sk), mib_idx);\n\n\t\ttp->high_seq = tp->snd_nxt;\n\t\ttp->prior_ssthresh = 0;\n\t\ttp->undo_marker = tp->snd_una;\n\t\ttp->undo_retrans = tp->retrans_out;\n\n\t\tif (icsk->icsk_ca_state < TCP_CA_CWR) {\n\t\t\tif (!(flag & FLAG_ECE))\n\t\t\t\ttp->prior_ssthresh = tcp_current_ssthresh(sk);\n\t\t\ttp->snd_ssthresh = icsk->icsk_ca_ops->ssthresh(sk);\n\t\t\tTCP_ECN_queue_cwr(tp);\n\t\t}\n\n\t\ttp->bytes_acked = 0;\n\t\ttp->snd_cwnd_cnt = 0;\n\t\ttp->prior_cwnd = tp->snd_cwnd;\n\t\ttp->prr_delivered = 0;\n\t\ttp->prr_out = 0;\n\t\ttcp_set_ca_state(sk, TCP_CA_Recovery);\n\t\tfast_rexmit = 1;\n\t}\n\n\tif (do_lost || (tcp_is_fack(tp) && tcp_head_timedout(sk)))\n\t\ttcp_update_scoreboard(sk, fast_rexmit);\n\ttp->prr_delivered += newly_acked_sacked;\n\ttcp_update_cwnd_in_recovery(sk, newly_acked_sacked, fast_rexmit, flag);\n\ttcp_xmit_retransmit_queue(sk);\n}\n\nvoid tcp_valid_rtt_meas(struct sock *sk, u32 seq_rtt)\n{\n\ttcp_rtt_estimator(sk, seq_rtt);\n\ttcp_set_rto(sk);\n\tinet_csk(sk)->icsk_backoff = 0;\n}\nEXPORT_SYMBOL(tcp_valid_rtt_meas);\n\n/* Read draft-ietf-tcplw-high-performance before mucking\n * with this code. (Supersedes RFC1323)\n */\nstatic void tcp_ack_saw_tstamp(struct sock *sk, int flag)\n{\n\t/* RTTM Rule: A TSecr value received in a segment is used to\n\t * update the averaged RTT measurement only if the segment\n\t * acknowledges some new data, i.e., only if it advances the\n\t * left edge of the send window.\n\t *\n\t * See draft-ietf-tcplw-high-performance-00, section 3.3.\n\t * 1998/04/10 Andrey V. Savochkin <saw@msu.ru>\n\t *\n\t * Changed: reset backoff as soon as we see the first valid sample.\n\t * If we do not, we get strongly overestimated rto. With timestamps\n\t * samples are accepted even from very old segments: f.e., when rtt=1\n\t * increases to 8, we retransmit 5 times and after 8 seconds delayed\n\t * answer arrives rto becomes 120 seconds! If at least one of segments\n\t * in window is lost... Voila.\t \t\t\t--ANK (010210)\n\t */\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\ttcp_valid_rtt_meas(sk, tcp_time_stamp - tp->rx_opt.rcv_tsecr);\n}\n\nstatic void tcp_ack_no_tstamp(struct sock *sk, u32 seq_rtt, int flag)\n{\n\t/* We don't have a timestamp. Can only use\n\t * packets that are not retransmitted to determine\n\t * rtt estimates. Also, we must not reset the\n\t * backoff for rto until we get a non-retransmitted\n\t * packet. This allows us to deal with a situation\n\t * where the network delay has increased suddenly.\n\t * I.e. Karn's algorithm. (SIGCOMM '87, p5.)\n\t */\n\n\tif (flag & FLAG_RETRANS_DATA_ACKED)\n\t\treturn;\n\n\ttcp_valid_rtt_meas(sk, seq_rtt);\n}\n\nstatic inline void tcp_ack_update_rtt(struct sock *sk, const int flag,\n\t\t\t\t      const s32 seq_rtt)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\t/* Note that peer MAY send zero echo. In this case it is ignored. (rfc1323) */\n\tif (tp->rx_opt.saw_tstamp && tp->rx_opt.rcv_tsecr)\n\t\ttcp_ack_saw_tstamp(sk, flag);\n\telse if (seq_rtt >= 0)\n\t\ttcp_ack_no_tstamp(sk, seq_rtt, flag);\n}\n\nstatic void tcp_cong_avoid(struct sock *sk, u32 ack, u32 in_flight)\n{\n\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\ticsk->icsk_ca_ops->cong_avoid(sk, ack, in_flight);\n\ttcp_sk(sk)->snd_cwnd_stamp = tcp_time_stamp;\n}\n\n/* Restart timer after forward progress on connection.\n * RFC2988 recommends to restart timer to now+rto.\n */\nstatic void tcp_rearm_rto(struct sock *sk)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\n\tif (!tp->packets_out) {\n\t\tinet_csk_clear_xmit_timer(sk, ICSK_TIME_RETRANS);\n\t} else {\n\t\tinet_csk_reset_xmit_timer(sk, ICSK_TIME_RETRANS,\n\t\t\t\t\t  inet_csk(sk)->icsk_rto, TCP_RTO_MAX);\n\t}\n}\n\n/* If we get here, the whole TSO packet has not been acked. */\nstatic u32 tcp_tso_acked(struct sock *sk, struct sk_buff *skb)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tu32 packets_acked;\n\n\tBUG_ON(!after(TCP_SKB_CB(skb)->end_seq, tp->snd_una));\n\n\tpackets_acked = tcp_skb_pcount(skb);\n\tif (tcp_trim_head(sk, skb, tp->snd_una - TCP_SKB_CB(skb)->seq))\n\t\treturn 0;\n\tpackets_acked -= tcp_skb_pcount(skb);\n\n\tif (packets_acked) {\n\t\tBUG_ON(tcp_skb_pcount(skb) == 0);\n\t\tBUG_ON(!before(TCP_SKB_CB(skb)->seq, TCP_SKB_CB(skb)->end_seq));\n\t}\n\n\treturn packets_acked;\n}\n\n/* Remove acknowledged frames from the retransmission queue. If our packet\n * is before the ack sequence we can discard it as it's confirmed to have\n * arrived at the other end.\n */\nstatic int tcp_clean_rtx_queue(struct sock *sk, int prior_fackets,\n\t\t\t       u32 prior_snd_una)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\tstruct sk_buff *skb;\n\tu32 now = tcp_time_stamp;\n\tint fully_acked = 1;\n\tint flag = 0;\n\tu32 pkts_acked = 0;\n\tu32 reord = tp->packets_out;\n\tu32 prior_sacked = tp->sacked_out;\n\ts32 seq_rtt = -1;\n\ts32 ca_seq_rtt = -1;\n\tktime_t last_ackt = net_invalid_timestamp();\n\n\twhile ((skb = tcp_write_queue_head(sk)) && skb != tcp_send_head(sk)) {\n\t\tstruct tcp_skb_cb *scb = TCP_SKB_CB(skb);\n\t\tu32 acked_pcount;\n\t\tu8 sacked = scb->sacked;\n\n\t\t/* Determine how many packets and what bytes were acked, tso and else */\n\t\tif (after(scb->end_seq, tp->snd_una)) {\n\t\t\tif (tcp_skb_pcount(skb) == 1 ||\n\t\t\t    !after(tp->snd_una, scb->seq))\n\t\t\t\tbreak;\n\n\t\t\tacked_pcount = tcp_tso_acked(sk, skb);\n\t\t\tif (!acked_pcount)\n\t\t\t\tbreak;\n\n\t\t\tfully_acked = 0;\n\t\t} else {\n\t\t\tacked_pcount = tcp_skb_pcount(skb);\n\t\t}\n\n\t\tif (sacked & TCPCB_RETRANS) {\n\t\t\tif (sacked & TCPCB_SACKED_RETRANS)\n\t\t\t\ttp->retrans_out -= acked_pcount;\n\t\t\tflag |= FLAG_RETRANS_DATA_ACKED;\n\t\t\tca_seq_rtt = -1;\n\t\t\tseq_rtt = -1;\n\t\t\tif ((flag & FLAG_DATA_ACKED) || (acked_pcount > 1))\n\t\t\t\tflag |= FLAG_NONHEAD_RETRANS_ACKED;\n\t\t} else {\n\t\t\tca_seq_rtt = now - scb->when;\n\t\t\tlast_ackt = skb->tstamp;\n\t\t\tif (seq_rtt < 0) {\n\t\t\t\tseq_rtt = ca_seq_rtt;\n\t\t\t}\n\t\t\tif (!(sacked & TCPCB_SACKED_ACKED))\n\t\t\t\treord = min(pkts_acked, reord);\n\t\t}\n\n\t\tif (sacked & TCPCB_SACKED_ACKED)\n\t\t\ttp->sacked_out -= acked_pcount;\n\t\tif (sacked & TCPCB_LOST)\n\t\t\ttp->lost_out -= acked_pcount;\n\n\t\ttp->packets_out -= acked_pcount;\n\t\tpkts_acked += acked_pcount;\n\n\t\t/* Initial outgoing SYN's get put onto the write_queue\n\t\t * just like anything else we transmit.  It is not\n\t\t * true data, and if we misinform our callers that\n\t\t * this ACK acks real data, we will erroneously exit\n\t\t * connection startup slow start one packet too\n\t\t * quickly.  This is severely frowned upon behavior.\n\t\t */\n\t\tif (!(scb->tcp_flags & TCPHDR_SYN)) {\n\t\t\tflag |= FLAG_DATA_ACKED;\n\t\t} else {\n\t\t\tflag |= FLAG_SYN_ACKED;\n\t\t\ttp->retrans_stamp = 0;\n\t\t}\n\n\t\tif (!fully_acked)\n\t\t\tbreak;\n\n\t\ttcp_unlink_write_queue(skb, sk);\n\t\tsk_wmem_free_skb(sk, skb);\n\t\ttp->scoreboard_skb_hint = NULL;\n\t\tif (skb == tp->retransmit_skb_hint)\n\t\t\ttp->retransmit_skb_hint = NULL;\n\t\tif (skb == tp->lost_skb_hint)\n\t\t\ttp->lost_skb_hint = NULL;\n\t}\n\n\tif (likely(between(tp->snd_up, prior_snd_una, tp->snd_una)))\n\t\ttp->snd_up = tp->snd_una;\n\n\tif (skb && (TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_ACKED))\n\t\tflag |= FLAG_SACK_RENEGING;\n\n\tif (flag & FLAG_ACKED) {\n\t\tconst struct tcp_congestion_ops *ca_ops\n\t\t\t= inet_csk(sk)->icsk_ca_ops;\n\n\t\tif (unlikely(icsk->icsk_mtup.probe_size &&\n\t\t\t     !after(tp->mtu_probe.probe_seq_end, tp->snd_una))) {\n\t\t\ttcp_mtup_probe_success(sk);\n\t\t}\n\n\t\ttcp_ack_update_rtt(sk, flag, seq_rtt);\n\t\ttcp_rearm_rto(sk);\n\n\t\tif (tcp_is_reno(tp)) {\n\t\t\ttcp_remove_reno_sacks(sk, pkts_acked);\n\t\t} else {\n\t\t\tint delta;\n\n\t\t\t/* Non-retransmitted hole got filled? That's reordering */\n\t\t\tif (reord < prior_fackets)\n\t\t\t\ttcp_update_reordering(sk, tp->fackets_out - reord, 0);\n\n\t\t\tdelta = tcp_is_fack(tp) ? pkts_acked :\n\t\t\t\t\t\t  prior_sacked - tp->sacked_out;\n\t\t\ttp->lost_cnt_hint -= min(tp->lost_cnt_hint, delta);\n\t\t}\n\n\t\ttp->fackets_out -= min(pkts_acked, tp->fackets_out);\n\n\t\tif (ca_ops->pkts_acked) {\n\t\t\ts32 rtt_us = -1;\n\n\t\t\t/* Is the ACK triggering packet unambiguous? */\n\t\t\tif (!(flag & FLAG_RETRANS_DATA_ACKED)) {\n\t\t\t\t/* High resolution needed and available? */\n\t\t\t\tif (ca_ops->flags & TCP_CONG_RTT_STAMP &&\n\t\t\t\t    !ktime_equal(last_ackt,\n\t\t\t\t\t\t net_invalid_timestamp()))\n\t\t\t\t\trtt_us = ktime_us_delta(ktime_get_real(),\n\t\t\t\t\t\t\t\tlast_ackt);\n\t\t\t\telse if (ca_seq_rtt >= 0)\n\t\t\t\t\trtt_us = jiffies_to_usecs(ca_seq_rtt);\n\t\t\t}\n\n\t\t\tca_ops->pkts_acked(sk, pkts_acked, rtt_us);\n\t\t}\n\t}\n\n#if FASTRETRANS_DEBUG > 0\n\tWARN_ON((int)tp->sacked_out < 0);\n\tWARN_ON((int)tp->lost_out < 0);\n\tWARN_ON((int)tp->retrans_out < 0);\n\tif (!tp->packets_out && tcp_is_sack(tp)) {\n\t\ticsk = inet_csk(sk);\n\t\tif (tp->lost_out) {\n\t\t\tprintk(KERN_DEBUG \"Leak l=%u %d\\n\",\n\t\t\t       tp->lost_out, icsk->icsk_ca_state);\n\t\t\ttp->lost_out = 0;\n\t\t}\n\t\tif (tp->sacked_out) {\n\t\t\tprintk(KERN_DEBUG \"Leak s=%u %d\\n\",\n\t\t\t       tp->sacked_out, icsk->icsk_ca_state);\n\t\t\ttp->sacked_out = 0;\n\t\t}\n\t\tif (tp->retrans_out) {\n\t\t\tprintk(KERN_DEBUG \"Leak r=%u %d\\n\",\n\t\t\t       tp->retrans_out, icsk->icsk_ca_state);\n\t\t\ttp->retrans_out = 0;\n\t\t}\n\t}\n#endif\n\treturn flag;\n}\n\nstatic void tcp_ack_probe(struct sock *sk)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\n\t/* Was it a usable window open? */\n\n\tif (!after(TCP_SKB_CB(tcp_send_head(sk))->end_seq, tcp_wnd_end(tp))) {\n\t\ticsk->icsk_backoff = 0;\n\t\tinet_csk_clear_xmit_timer(sk, ICSK_TIME_PROBE0);\n\t\t/* Socket must be waked up by subsequent tcp_data_snd_check().\n\t\t * This function is not for random using!\n\t\t */\n\t} else {\n\t\tinet_csk_reset_xmit_timer(sk, ICSK_TIME_PROBE0,\n\t\t\t\t\t  min(icsk->icsk_rto << icsk->icsk_backoff, TCP_RTO_MAX),\n\t\t\t\t\t  TCP_RTO_MAX);\n\t}\n}\n\nstatic inline int tcp_ack_is_dubious(const struct sock *sk, const int flag)\n{\n\treturn !(flag & FLAG_NOT_DUP) || (flag & FLAG_CA_ALERT) ||\n\t\tinet_csk(sk)->icsk_ca_state != TCP_CA_Open;\n}\n\nstatic inline int tcp_may_raise_cwnd(const struct sock *sk, const int flag)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\treturn (!(flag & FLAG_ECE) || tp->snd_cwnd < tp->snd_ssthresh) &&\n\t\t!((1 << inet_csk(sk)->icsk_ca_state) & (TCPF_CA_Recovery | TCPF_CA_CWR));\n}\n\n/* Check that window update is acceptable.\n * The function assumes that snd_una<=ack<=snd_next.\n */\nstatic inline int tcp_may_update_window(const struct tcp_sock *tp,\n\t\t\t\t\tconst u32 ack, const u32 ack_seq,\n\t\t\t\t\tconst u32 nwin)\n{\n\treturn\tafter(ack, tp->snd_una) ||\n\t\tafter(ack_seq, tp->snd_wl1) ||\n\t\t(ack_seq == tp->snd_wl1 && nwin > tp->snd_wnd);\n}\n\n/* Update our send window.\n *\n * Window update algorithm, described in RFC793/RFC1122 (used in linux-2.2\n * and in FreeBSD. NetBSD's one is even worse.) is wrong.\n */\nstatic int tcp_ack_update_window(struct sock *sk, const struct sk_buff *skb, u32 ack,\n\t\t\t\t u32 ack_seq)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint flag = 0;\n\tu32 nwin = ntohs(tcp_hdr(skb)->window);\n\n\tif (likely(!tcp_hdr(skb)->syn))\n\t\tnwin <<= tp->rx_opt.snd_wscale;\n\n\tif (tcp_may_update_window(tp, ack, ack_seq, nwin)) {\n\t\tflag |= FLAG_WIN_UPDATE;\n\t\ttcp_update_wl(tp, ack_seq);\n\n\t\tif (tp->snd_wnd != nwin) {\n\t\t\ttp->snd_wnd = nwin;\n\n\t\t\t/* Note, it is the only place, where\n\t\t\t * fast path is recovered for sending TCP.\n\t\t\t */\n\t\t\ttp->pred_flags = 0;\n\t\t\ttcp_fast_path_check(sk);\n\n\t\t\tif (nwin > tp->max_window) {\n\t\t\t\ttp->max_window = nwin;\n\t\t\t\ttcp_sync_mss(sk, inet_csk(sk)->icsk_pmtu_cookie);\n\t\t\t}\n\t\t}\n\t}\n\n\ttp->snd_una = ack;\n\n\treturn flag;\n}\n\n/* A very conservative spurious RTO response algorithm: reduce cwnd and\n * continue in congestion avoidance.\n */\nstatic void tcp_conservative_spur_to_response(struct tcp_sock *tp)\n{\n\ttp->snd_cwnd = min(tp->snd_cwnd, tp->snd_ssthresh);\n\ttp->snd_cwnd_cnt = 0;\n\ttp->bytes_acked = 0;\n\tTCP_ECN_queue_cwr(tp);\n\ttcp_moderate_cwnd(tp);\n}\n\n/* A conservative spurious RTO response algorithm: reduce cwnd using\n * rate halving and continue in congestion avoidance.\n */\nstatic void tcp_ratehalving_spur_to_response(struct sock *sk)\n{\n\ttcp_enter_cwr(sk, 0);\n}\n\nstatic void tcp_undo_spur_to_response(struct sock *sk, int flag)\n{\n\tif (flag & FLAG_ECE)\n\t\ttcp_ratehalving_spur_to_response(sk);\n\telse\n\t\ttcp_undo_cwr(sk, true);\n}\n\n/* F-RTO spurious RTO detection algorithm (RFC4138)\n *\n * F-RTO affects during two new ACKs following RTO (well, almost, see inline\n * comments). State (ACK number) is kept in frto_counter. When ACK advances\n * window (but not to or beyond highest sequence sent before RTO):\n *   On First ACK,  send two new segments out.\n *   On Second ACK, RTO was likely spurious. Do spurious response (response\n *                  algorithm is not part of the F-RTO detection algorithm\n *                  given in RFC4138 but can be selected separately).\n * Otherwise (basically on duplicate ACK), RTO was (likely) caused by a loss\n * and TCP falls back to conventional RTO recovery. F-RTO allows overriding\n * of Nagle, this is done using frto_counter states 2 and 3, when a new data\n * segment of any size sent during F-RTO, state 2 is upgraded to 3.\n *\n * Rationale: if the RTO was spurious, new ACKs should arrive from the\n * original window even after we transmit two new data segments.\n *\n * SACK version:\n *   on first step, wait until first cumulative ACK arrives, then move to\n *   the second step. In second step, the next ACK decides.\n *\n * F-RTO is implemented (mainly) in four functions:\n *   - tcp_use_frto() is used to determine if TCP is can use F-RTO\n *   - tcp_enter_frto() prepares TCP state on RTO if F-RTO is used, it is\n *     called when tcp_use_frto() showed green light\n *   - tcp_process_frto() handles incoming ACKs during F-RTO algorithm\n *   - tcp_enter_frto_loss() is called if there is not enough evidence\n *     to prove that the RTO is indeed spurious. It transfers the control\n *     from F-RTO to the conventional RTO recovery\n */\nstatic int tcp_process_frto(struct sock *sk, int flag)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\ttcp_verify_left_out(tp);\n\n\t/* Duplicate the behavior from Loss state (fastretrans_alert) */\n\tif (flag & FLAG_DATA_ACKED)\n\t\tinet_csk(sk)->icsk_retransmits = 0;\n\n\tif ((flag & FLAG_NONHEAD_RETRANS_ACKED) ||\n\t    ((tp->frto_counter >= 2) && (flag & FLAG_RETRANS_DATA_ACKED)))\n\t\ttp->undo_marker = 0;\n\n\tif (!before(tp->snd_una, tp->frto_highmark)) {\n\t\ttcp_enter_frto_loss(sk, (tp->frto_counter == 1 ? 2 : 3), flag);\n\t\treturn 1;\n\t}\n\n\tif (!tcp_is_sackfrto(tp)) {\n\t\t/* RFC4138 shortcoming in step 2; should also have case c):\n\t\t * ACK isn't duplicate nor advances window, e.g., opposite dir\n\t\t * data, winupdate\n\t\t */\n\t\tif (!(flag & FLAG_ANY_PROGRESS) && (flag & FLAG_NOT_DUP))\n\t\t\treturn 1;\n\n\t\tif (!(flag & FLAG_DATA_ACKED)) {\n\t\t\ttcp_enter_frto_loss(sk, (tp->frto_counter == 1 ? 0 : 3),\n\t\t\t\t\t    flag);\n\t\t\treturn 1;\n\t\t}\n\t} else {\n\t\tif (!(flag & FLAG_DATA_ACKED) && (tp->frto_counter == 1)) {\n\t\t\t/* Prevent sending of new data. */\n\t\t\ttp->snd_cwnd = min(tp->snd_cwnd,\n\t\t\t\t\t   tcp_packets_in_flight(tp));\n\t\t\treturn 1;\n\t\t}\n\n\t\tif ((tp->frto_counter >= 2) &&\n\t\t    (!(flag & FLAG_FORWARD_PROGRESS) ||\n\t\t     ((flag & FLAG_DATA_SACKED) &&\n\t\t      !(flag & FLAG_ONLY_ORIG_SACKED)))) {\n\t\t\t/* RFC4138 shortcoming (see comment above) */\n\t\t\tif (!(flag & FLAG_FORWARD_PROGRESS) &&\n\t\t\t    (flag & FLAG_NOT_DUP))\n\t\t\t\treturn 1;\n\n\t\t\ttcp_enter_frto_loss(sk, 3, flag);\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\tif (tp->frto_counter == 1) {\n\t\t/* tcp_may_send_now needs to see updated state */\n\t\ttp->snd_cwnd = tcp_packets_in_flight(tp) + 2;\n\t\ttp->frto_counter = 2;\n\n\t\tif (!tcp_may_send_now(sk))\n\t\t\ttcp_enter_frto_loss(sk, 2, flag);\n\n\t\treturn 1;\n\t} else {\n\t\tswitch (sysctl_tcp_frto_response) {\n\t\tcase 2:\n\t\t\ttcp_undo_spur_to_response(sk, flag);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\ttcp_conservative_spur_to_response(tp);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ttcp_ratehalving_spur_to_response(sk);\n\t\t\tbreak;\n\t\t}\n\t\ttp->frto_counter = 0;\n\t\ttp->undo_marker = 0;\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPSPURIOUSRTOS);\n\t}\n\treturn 0;\n}\n\n/* This routine deals with incoming acks, but not outgoing ones. */\nstatic int tcp_ack(struct sock *sk, const struct sk_buff *skb, int flag)\n{\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tu32 prior_snd_una = tp->snd_una;\n\tu32 ack_seq = TCP_SKB_CB(skb)->seq;\n\tu32 ack = TCP_SKB_CB(skb)->ack_seq;\n\tbool is_dupack = false;\n\tu32 prior_in_flight;\n\tu32 prior_fackets;\n\tint prior_packets;\n\tint prior_sacked = tp->sacked_out;\n\tint pkts_acked = 0;\n\tint newly_acked_sacked = 0;\n\tint frto_cwnd = 0;\n\n\t/* If the ack is older than previous acks\n\t * then we can probably ignore it.\n\t */\n\tif (before(ack, prior_snd_una))\n\t\tgoto old_ack;\n\n\t/* If the ack includes data we haven't sent yet, discard\n\t * this segment (RFC793 Section 3.9).\n\t */\n\tif (after(ack, tp->snd_nxt))\n\t\tgoto invalid_ack;\n\n\tif (after(ack, prior_snd_una))\n\t\tflag |= FLAG_SND_UNA_ADVANCED;\n\n\tif (sysctl_tcp_abc) {\n\t\tif (icsk->icsk_ca_state < TCP_CA_CWR)\n\t\t\ttp->bytes_acked += ack - prior_snd_una;\n\t\telse if (icsk->icsk_ca_state == TCP_CA_Loss)\n\t\t\t/* we assume just one segment left network */\n\t\t\ttp->bytes_acked += min(ack - prior_snd_una,\n\t\t\t\t\t       tp->mss_cache);\n\t}\n\n\tprior_fackets = tp->fackets_out;\n\tprior_in_flight = tcp_packets_in_flight(tp);\n\n\tif (!(flag & FLAG_SLOWPATH) && after(ack, prior_snd_una)) {\n\t\t/* Window is constant, pure forward advance.\n\t\t * No more checks are required.\n\t\t * Note, we use the fact that SND.UNA>=SND.WL2.\n\t\t */\n\t\ttcp_update_wl(tp, ack_seq);\n\t\ttp->snd_una = ack;\n\t\tflag |= FLAG_WIN_UPDATE;\n\n\t\ttcp_ca_event(sk, CA_EVENT_FAST_ACK);\n\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPHPACKS);\n\t} else {\n\t\tif (ack_seq != TCP_SKB_CB(skb)->end_seq)\n\t\t\tflag |= FLAG_DATA;\n\t\telse\n\t\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPPUREACKS);\n\n\t\tflag |= tcp_ack_update_window(sk, skb, ack, ack_seq);\n\n\t\tif (TCP_SKB_CB(skb)->sacked)\n\t\t\tflag |= tcp_sacktag_write_queue(sk, skb, prior_snd_una);\n\n\t\tif (TCP_ECN_rcv_ecn_echo(tp, tcp_hdr(skb)))\n\t\t\tflag |= FLAG_ECE;\n\n\t\ttcp_ca_event(sk, CA_EVENT_SLOW_ACK);\n\t}\n\n\t/* We passed data and got it acked, remove any soft error\n\t * log. Something worked...\n\t */\n\tsk->sk_err_soft = 0;\n\ticsk->icsk_probes_out = 0;\n\ttp->rcv_tstamp = tcp_time_stamp;\n\tprior_packets = tp->packets_out;\n\tif (!prior_packets)\n\t\tgoto no_queue;\n\n\t/* See if we can take anything off of the retransmit queue. */\n\tflag |= tcp_clean_rtx_queue(sk, prior_fackets, prior_snd_una);\n\n\tpkts_acked = prior_packets - tp->packets_out;\n\tnewly_acked_sacked = (prior_packets - prior_sacked) -\n\t\t\t     (tp->packets_out - tp->sacked_out);\n\n\tif (tp->frto_counter)\n\t\tfrto_cwnd = tcp_process_frto(sk, flag);\n\t/* Guarantee sacktag reordering detection against wrap-arounds */\n\tif (before(tp->frto_highmark, tp->snd_una))\n\t\ttp->frto_highmark = 0;\n\n\tif (tcp_ack_is_dubious(sk, flag)) {\n\t\t/* Advance CWND, if state allows this. */\n\t\tif ((flag & FLAG_DATA_ACKED) && !frto_cwnd &&\n\t\t    tcp_may_raise_cwnd(sk, flag))\n\t\t\ttcp_cong_avoid(sk, ack, prior_in_flight);\n\t\tis_dupack = !(flag & (FLAG_SND_UNA_ADVANCED | FLAG_NOT_DUP));\n\t\ttcp_fastretrans_alert(sk, pkts_acked, newly_acked_sacked,\n\t\t\t\t      is_dupack, flag);\n\t} else {\n\t\tif ((flag & FLAG_DATA_ACKED) && !frto_cwnd)\n\t\t\ttcp_cong_avoid(sk, ack, prior_in_flight);\n\t}\n\n\tif ((flag & FLAG_FORWARD_PROGRESS) || !(flag & FLAG_NOT_DUP))\n\t\tdst_confirm(__sk_dst_get(sk));\n\n\treturn 1;\n\nno_queue:\n\t/* If data was DSACKed, see if we can undo a cwnd reduction. */\n\tif (flag & FLAG_DSACKING_ACK)\n\t\ttcp_fastretrans_alert(sk, pkts_acked, newly_acked_sacked,\n\t\t\t\t      is_dupack, flag);\n\t/* If this ack opens up a zero window, clear backoff.  It was\n\t * being used to time the probes, and is probably far higher than\n\t * it needs to be for normal retransmission.\n\t */\n\tif (tcp_send_head(sk))\n\t\ttcp_ack_probe(sk);\n\treturn 1;\n\ninvalid_ack:\n\tSOCK_DEBUG(sk, \"Ack %u after %u:%u\\n\", ack, tp->snd_una, tp->snd_nxt);\n\treturn -1;\n\nold_ack:\n\t/* If data was SACKed, tag it and see if we should send more data.\n\t * If data was DSACKed, see if we can undo a cwnd reduction.\n\t */\n\tif (TCP_SKB_CB(skb)->sacked) {\n\t\tflag |= tcp_sacktag_write_queue(sk, skb, prior_snd_una);\n\t\tnewly_acked_sacked = tp->sacked_out - prior_sacked;\n\t\ttcp_fastretrans_alert(sk, pkts_acked, newly_acked_sacked,\n\t\t\t\t      is_dupack, flag);\n\t}\n\n\tSOCK_DEBUG(sk, \"Ack %u before %u:%u\\n\", ack, tp->snd_una, tp->snd_nxt);\n\treturn 0;\n}\n\n/* Look for tcp options. Normally only called on SYN and SYNACK packets.\n * But, this can also be called on packets in the established flow when\n * the fast version below fails.\n */\nvoid tcp_parse_options(const struct sk_buff *skb, struct tcp_options_received *opt_rx,\n\t\t       const u8 **hvpp, int estab)\n{\n\tconst unsigned char *ptr;\n\tconst struct tcphdr *th = tcp_hdr(skb);\n\tint length = (th->doff * 4) - sizeof(struct tcphdr);\n\n\tptr = (const unsigned char *)(th + 1);\n\topt_rx->saw_tstamp = 0;\n\n\twhile (length > 0) {\n\t\tint opcode = *ptr++;\n\t\tint opsize;\n\n\t\tswitch (opcode) {\n\t\tcase TCPOPT_EOL:\n\t\t\treturn;\n\t\tcase TCPOPT_NOP:\t/* Ref: RFC 793 section 3.1 */\n\t\t\tlength--;\n\t\t\tcontinue;\n\t\tdefault:\n\t\t\topsize = *ptr++;\n\t\t\tif (opsize < 2) /* \"silly options\" */\n\t\t\t\treturn;\n\t\t\tif (opsize > length)\n\t\t\t\treturn;\t/* don't parse partial options */\n\t\t\tswitch (opcode) {\n\t\t\tcase TCPOPT_MSS:\n\t\t\t\tif (opsize == TCPOLEN_MSS && th->syn && !estab) {\n\t\t\t\t\tu16 in_mss = get_unaligned_be16(ptr);\n\t\t\t\t\tif (in_mss) {\n\t\t\t\t\t\tif (opt_rx->user_mss &&\n\t\t\t\t\t\t    opt_rx->user_mss < in_mss)\n\t\t\t\t\t\t\tin_mss = opt_rx->user_mss;\n\t\t\t\t\t\topt_rx->mss_clamp = in_mss;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase TCPOPT_WINDOW:\n\t\t\t\tif (opsize == TCPOLEN_WINDOW && th->syn &&\n\t\t\t\t    !estab && sysctl_tcp_window_scaling) {\n\t\t\t\t\t__u8 snd_wscale = *(__u8 *)ptr;\n\t\t\t\t\topt_rx->wscale_ok = 1;\n\t\t\t\t\tif (snd_wscale > 14) {\n\t\t\t\t\t\tif (net_ratelimit())\n\t\t\t\t\t\t\tprintk(KERN_INFO \"tcp_parse_options: Illegal window \"\n\t\t\t\t\t\t\t       \"scaling value %d >14 received.\\n\",\n\t\t\t\t\t\t\t       snd_wscale);\n\t\t\t\t\t\tsnd_wscale = 14;\n\t\t\t\t\t}\n\t\t\t\t\topt_rx->snd_wscale = snd_wscale;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase TCPOPT_TIMESTAMP:\n\t\t\t\tif ((opsize == TCPOLEN_TIMESTAMP) &&\n\t\t\t\t    ((estab && opt_rx->tstamp_ok) ||\n\t\t\t\t     (!estab && sysctl_tcp_timestamps))) {\n\t\t\t\t\topt_rx->saw_tstamp = 1;\n\t\t\t\t\topt_rx->rcv_tsval = get_unaligned_be32(ptr);\n\t\t\t\t\topt_rx->rcv_tsecr = get_unaligned_be32(ptr + 4);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase TCPOPT_SACK_PERM:\n\t\t\t\tif (opsize == TCPOLEN_SACK_PERM && th->syn &&\n\t\t\t\t    !estab && sysctl_tcp_sack) {\n\t\t\t\t\topt_rx->sack_ok = 1;\n\t\t\t\t\ttcp_sack_reset(opt_rx);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase TCPOPT_SACK:\n\t\t\t\tif ((opsize >= (TCPOLEN_SACK_BASE + TCPOLEN_SACK_PERBLOCK)) &&\n\t\t\t\t   !((opsize - TCPOLEN_SACK_BASE) % TCPOLEN_SACK_PERBLOCK) &&\n\t\t\t\t   opt_rx->sack_ok) {\n\t\t\t\t\tTCP_SKB_CB(skb)->sacked = (ptr - 2) - (unsigned char *)th;\n\t\t\t\t}\n\t\t\t\tbreak;\n#ifdef CONFIG_TCP_MD5SIG\n\t\t\tcase TCPOPT_MD5SIG:\n\t\t\t\t/*\n\t\t\t\t * The MD5 Hash has already been\n\t\t\t\t * checked (see tcp_v{4,6}_do_rcv()).\n\t\t\t\t */\n\t\t\t\tbreak;\n#endif\n\t\t\tcase TCPOPT_COOKIE:\n\t\t\t\t/* This option is variable length.\n\t\t\t\t */\n\t\t\t\tswitch (opsize) {\n\t\t\t\tcase TCPOLEN_COOKIE_BASE:\n\t\t\t\t\t/* not yet implemented */\n\t\t\t\t\tbreak;\n\t\t\t\tcase TCPOLEN_COOKIE_PAIR:\n\t\t\t\t\t/* not yet implemented */\n\t\t\t\t\tbreak;\n\t\t\t\tcase TCPOLEN_COOKIE_MIN+0:\n\t\t\t\tcase TCPOLEN_COOKIE_MIN+2:\n\t\t\t\tcase TCPOLEN_COOKIE_MIN+4:\n\t\t\t\tcase TCPOLEN_COOKIE_MIN+6:\n\t\t\t\tcase TCPOLEN_COOKIE_MAX:\n\t\t\t\t\t/* 16-bit multiple */\n\t\t\t\t\topt_rx->cookie_plus = opsize;\n\t\t\t\t\t*hvpp = ptr;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t/* ignore option */\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tptr += opsize-2;\n\t\t\tlength -= opsize;\n\t\t}\n\t}\n}\nEXPORT_SYMBOL(tcp_parse_options);\n\nstatic int tcp_parse_aligned_timestamp(struct tcp_sock *tp, const struct tcphdr *th)\n{\n\tconst __be32 *ptr = (const __be32 *)(th + 1);\n\n\tif (*ptr == htonl((TCPOPT_NOP << 24) | (TCPOPT_NOP << 16)\n\t\t\t  | (TCPOPT_TIMESTAMP << 8) | TCPOLEN_TIMESTAMP)) {\n\t\ttp->rx_opt.saw_tstamp = 1;\n\t\t++ptr;\n\t\ttp->rx_opt.rcv_tsval = ntohl(*ptr);\n\t\t++ptr;\n\t\ttp->rx_opt.rcv_tsecr = ntohl(*ptr);\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n/* Fast parse options. This hopes to only see timestamps.\n * If it is wrong it falls back on tcp_parse_options().\n */\nstatic int tcp_fast_parse_options(const struct sk_buff *skb,\n\t\t\t\t  const struct tcphdr *th,\n\t\t\t\t  struct tcp_sock *tp, const u8 **hvpp)\n{\n\t/* In the spirit of fast parsing, compare doff directly to constant\n\t * values.  Because equality is used, short doff can be ignored here.\n\t */\n\tif (th->doff == (sizeof(*th) / 4)) {\n\t\ttp->rx_opt.saw_tstamp = 0;\n\t\treturn 0;\n\t} else if (tp->rx_opt.tstamp_ok &&\n\t\t   th->doff == ((sizeof(*th) + TCPOLEN_TSTAMP_ALIGNED) / 4)) {\n\t\tif (tcp_parse_aligned_timestamp(tp, th))\n\t\t\treturn 1;\n\t}\n\ttcp_parse_options(skb, &tp->rx_opt, hvpp, 1);\n\treturn 1;\n}\n\n#ifdef CONFIG_TCP_MD5SIG\n/*\n * Parse MD5 Signature option\n */\nconst u8 *tcp_parse_md5sig_option(const struct tcphdr *th)\n{\n\tint length = (th->doff << 2) - sizeof(*th);\n\tconst u8 *ptr = (const u8 *)(th + 1);\n\n\t/* If the TCP option is too short, we can short cut */\n\tif (length < TCPOLEN_MD5SIG)\n\t\treturn NULL;\n\n\twhile (length > 0) {\n\t\tint opcode = *ptr++;\n\t\tint opsize;\n\n\t\tswitch(opcode) {\n\t\tcase TCPOPT_EOL:\n\t\t\treturn NULL;\n\t\tcase TCPOPT_NOP:\n\t\t\tlength--;\n\t\t\tcontinue;\n\t\tdefault:\n\t\t\topsize = *ptr++;\n\t\t\tif (opsize < 2 || opsize > length)\n\t\t\t\treturn NULL;\n\t\t\tif (opcode == TCPOPT_MD5SIG)\n\t\t\t\treturn opsize == TCPOLEN_MD5SIG ? ptr : NULL;\n\t\t}\n\t\tptr += opsize - 2;\n\t\tlength -= opsize;\n\t}\n\treturn NULL;\n}\nEXPORT_SYMBOL(tcp_parse_md5sig_option);\n#endif\n\nstatic inline void tcp_store_ts_recent(struct tcp_sock *tp)\n{\n\ttp->rx_opt.ts_recent = tp->rx_opt.rcv_tsval;\n\ttp->rx_opt.ts_recent_stamp = get_seconds();\n}\n\nstatic inline void tcp_replace_ts_recent(struct tcp_sock *tp, u32 seq)\n{\n\tif (tp->rx_opt.saw_tstamp && !after(seq, tp->rcv_wup)) {\n\t\t/* PAWS bug workaround wrt. ACK frames, the PAWS discard\n\t\t * extra check below makes sure this can only happen\n\t\t * for pure ACK frames.  -DaveM\n\t\t *\n\t\t * Not only, also it occurs for expired timestamps.\n\t\t */\n\n\t\tif (tcp_paws_check(&tp->rx_opt, 0))\n\t\t\ttcp_store_ts_recent(tp);\n\t}\n}\n\n/* Sorry, PAWS as specified is broken wrt. pure-ACKs -DaveM\n *\n * It is not fatal. If this ACK does _not_ change critical state (seqs, window)\n * it can pass through stack. So, the following predicate verifies that\n * this segment is not used for anything but congestion avoidance or\n * fast retransmit. Moreover, we even are able to eliminate most of such\n * second order effects, if we apply some small \"replay\" window (~RTO)\n * to timestamp space.\n *\n * All these measures still do not guarantee that we reject wrapped ACKs\n * on networks with high bandwidth, when sequence space is recycled fastly,\n * but it guarantees that such events will be very rare and do not affect\n * connection seriously. This doesn't look nice, but alas, PAWS is really\n * buggy extension.\n *\n * [ Later note. Even worse! It is buggy for segments _with_ data. RFC\n * states that events when retransmit arrives after original data are rare.\n * It is a blatant lie. VJ forgot about fast retransmit! 8)8) It is\n * the biggest problem on large power networks even with minor reordering.\n * OK, let's give it small replay window. If peer clock is even 1hz, it is safe\n * up to bandwidth of 18Gigabit/sec. 8) ]\n */\n\nstatic int tcp_disordered_ack(const struct sock *sk, const struct sk_buff *skb)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\tconst struct tcphdr *th = tcp_hdr(skb);\n\tu32 seq = TCP_SKB_CB(skb)->seq;\n\tu32 ack = TCP_SKB_CB(skb)->ack_seq;\n\n\treturn (/* 1. Pure ACK with correct sequence number. */\n\t\t(th->ack && seq == TCP_SKB_CB(skb)->end_seq && seq == tp->rcv_nxt) &&\n\n\t\t/* 2. ... and duplicate ACK. */\n\t\tack == tp->snd_una &&\n\n\t\t/* 3. ... and does not update window. */\n\t\t!tcp_may_update_window(tp, ack, seq, ntohs(th->window) << tp->rx_opt.snd_wscale) &&\n\n\t\t/* 4. ... and sits in replay window. */\n\t\t(s32)(tp->rx_opt.ts_recent - tp->rx_opt.rcv_tsval) <= (inet_csk(sk)->icsk_rto * 1024) / HZ);\n}\n\nstatic inline int tcp_paws_discard(const struct sock *sk,\n\t\t\t\t   const struct sk_buff *skb)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\n\treturn !tcp_paws_check(&tp->rx_opt, TCP_PAWS_WINDOW) &&\n\t       !tcp_disordered_ack(sk, skb);\n}\n\n/* Check segment sequence number for validity.\n *\n * Segment controls are considered valid, if the segment\n * fits to the window after truncation to the window. Acceptability\n * of data (and SYN, FIN, of course) is checked separately.\n * See tcp_data_queue(), for example.\n *\n * Also, controls (RST is main one) are accepted using RCV.WUP instead\n * of RCV.NXT. Peer still did not advance his SND.UNA when we\n * delayed ACK, so that hisSND.UNA<=ourRCV.WUP.\n * (borrowed from freebsd)\n */\n\nstatic inline int tcp_sequence(const struct tcp_sock *tp, u32 seq, u32 end_seq)\n{\n\treturn\t!before(end_seq, tp->rcv_wup) &&\n\t\t!after(seq, tp->rcv_nxt + tcp_receive_window(tp));\n}\n\n/* When we get a reset we do this. */\nstatic void tcp_reset(struct sock *sk)\n{\n\t/* We want the right error as BSD sees it (and indeed as we do). */\n\tswitch (sk->sk_state) {\n\tcase TCP_SYN_SENT:\n\t\tsk->sk_err = ECONNREFUSED;\n\t\tbreak;\n\tcase TCP_CLOSE_WAIT:\n\t\tsk->sk_err = EPIPE;\n\t\tbreak;\n\tcase TCP_CLOSE:\n\t\treturn;\n\tdefault:\n\t\tsk->sk_err = ECONNRESET;\n\t}\n\t/* This barrier is coupled with smp_rmb() in tcp_poll() */\n\tsmp_wmb();\n\n\tif (!sock_flag(sk, SOCK_DEAD))\n\t\tsk->sk_error_report(sk);\n\n\ttcp_done(sk);\n}\n\n/*\n * \tProcess the FIN bit. This now behaves as it is supposed to work\n *\tand the FIN takes effect when it is validly part of sequence\n *\tspace. Not before when we get holes.\n *\n *\tIf we are ESTABLISHED, a received fin moves us to CLOSE-WAIT\n *\t(and thence onto LAST-ACK and finally, CLOSE, we never enter\n *\tTIME-WAIT)\n *\n *\tIf we are in FINWAIT-1, a received FIN indicates simultaneous\n *\tclose and we go into CLOSING (and later onto TIME-WAIT)\n *\n *\tIf we are in FINWAIT-2, a received FIN moves us to TIME-WAIT.\n */\nstatic void tcp_fin(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tinet_csk_schedule_ack(sk);\n\n\tsk->sk_shutdown |= RCV_SHUTDOWN;\n\tsock_set_flag(sk, SOCK_DONE);\n\n\tswitch (sk->sk_state) {\n\tcase TCP_SYN_RECV:\n\tcase TCP_ESTABLISHED:\n\t\t/* Move to CLOSE_WAIT */\n\t\ttcp_set_state(sk, TCP_CLOSE_WAIT);\n\t\tinet_csk(sk)->icsk_ack.pingpong = 1;\n\t\tbreak;\n\n\tcase TCP_CLOSE_WAIT:\n\tcase TCP_CLOSING:\n\t\t/* Received a retransmission of the FIN, do\n\t\t * nothing.\n\t\t */\n\t\tbreak;\n\tcase TCP_LAST_ACK:\n\t\t/* RFC793: Remain in the LAST-ACK state. */\n\t\tbreak;\n\n\tcase TCP_FIN_WAIT1:\n\t\t/* This case occurs when a simultaneous close\n\t\t * happens, we must ack the received FIN and\n\t\t * enter the CLOSING state.\n\t\t */\n\t\ttcp_send_ack(sk);\n\t\ttcp_set_state(sk, TCP_CLOSING);\n\t\tbreak;\n\tcase TCP_FIN_WAIT2:\n\t\t/* Received a FIN -- send ACK and enter TIME_WAIT. */\n\t\ttcp_send_ack(sk);\n\t\ttcp_time_wait(sk, TCP_TIME_WAIT, 0);\n\t\tbreak;\n\tdefault:\n\t\t/* Only TCP_LISTEN and TCP_CLOSE are left, in these\n\t\t * cases we should never reach this piece of code.\n\t\t */\n\t\tprintk(KERN_ERR \"%s: Impossible, sk->sk_state=%d\\n\",\n\t\t       __func__, sk->sk_state);\n\t\tbreak;\n\t}\n\n\t/* It _is_ possible, that we have something out-of-order _after_ FIN.\n\t * Probably, we should reset in this case. For now drop them.\n\t */\n\t__skb_queue_purge(&tp->out_of_order_queue);\n\tif (tcp_is_sack(tp))\n\t\ttcp_sack_reset(&tp->rx_opt);\n\tsk_mem_reclaim(sk);\n\n\tif (!sock_flag(sk, SOCK_DEAD)) {\n\t\tsk->sk_state_change(sk);\n\n\t\t/* Do not send POLL_HUP for half duplex close. */\n\t\tif (sk->sk_shutdown == SHUTDOWN_MASK ||\n\t\t    sk->sk_state == TCP_CLOSE)\n\t\t\tsk_wake_async(sk, SOCK_WAKE_WAITD, POLL_HUP);\n\t\telse\n\t\t\tsk_wake_async(sk, SOCK_WAKE_WAITD, POLL_IN);\n\t}\n}\n\nstatic inline int tcp_sack_extend(struct tcp_sack_block *sp, u32 seq,\n\t\t\t\t  u32 end_seq)\n{\n\tif (!after(seq, sp->end_seq) && !after(sp->start_seq, end_seq)) {\n\t\tif (before(seq, sp->start_seq))\n\t\t\tsp->start_seq = seq;\n\t\tif (after(end_seq, sp->end_seq))\n\t\t\tsp->end_seq = end_seq;\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nstatic void tcp_dsack_set(struct sock *sk, u32 seq, u32 end_seq)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (tcp_is_sack(tp) && sysctl_tcp_dsack) {\n\t\tint mib_idx;\n\n\t\tif (before(seq, tp->rcv_nxt))\n\t\t\tmib_idx = LINUX_MIB_TCPDSACKOLDSENT;\n\t\telse\n\t\t\tmib_idx = LINUX_MIB_TCPDSACKOFOSENT;\n\n\t\tNET_INC_STATS_BH(sock_net(sk), mib_idx);\n\n\t\ttp->rx_opt.dsack = 1;\n\t\ttp->duplicate_sack[0].start_seq = seq;\n\t\ttp->duplicate_sack[0].end_seq = end_seq;\n\t}\n}\n\nstatic void tcp_dsack_extend(struct sock *sk, u32 seq, u32 end_seq)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (!tp->rx_opt.dsack)\n\t\ttcp_dsack_set(sk, seq, end_seq);\n\telse\n\t\ttcp_sack_extend(tp->duplicate_sack, seq, end_seq);\n}\n\nstatic void tcp_send_dupack(struct sock *sk, const struct sk_buff *skb)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (TCP_SKB_CB(skb)->end_seq != TCP_SKB_CB(skb)->seq &&\n\t    before(TCP_SKB_CB(skb)->seq, tp->rcv_nxt)) {\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_DELAYEDACKLOST);\n\t\ttcp_enter_quickack_mode(sk);\n\n\t\tif (tcp_is_sack(tp) && sysctl_tcp_dsack) {\n\t\t\tu32 end_seq = TCP_SKB_CB(skb)->end_seq;\n\n\t\t\tif (after(TCP_SKB_CB(skb)->end_seq, tp->rcv_nxt))\n\t\t\t\tend_seq = tp->rcv_nxt;\n\t\t\ttcp_dsack_set(sk, TCP_SKB_CB(skb)->seq, end_seq);\n\t\t}\n\t}\n\n\ttcp_send_ack(sk);\n}\n\n/* These routines update the SACK block as out-of-order packets arrive or\n * in-order packets close up the sequence space.\n */\nstatic void tcp_sack_maybe_coalesce(struct tcp_sock *tp)\n{\n\tint this_sack;\n\tstruct tcp_sack_block *sp = &tp->selective_acks[0];\n\tstruct tcp_sack_block *swalk = sp + 1;\n\n\t/* See if the recent change to the first SACK eats into\n\t * or hits the sequence space of other SACK blocks, if so coalesce.\n\t */\n\tfor (this_sack = 1; this_sack < tp->rx_opt.num_sacks;) {\n\t\tif (tcp_sack_extend(sp, swalk->start_seq, swalk->end_seq)) {\n\t\t\tint i;\n\n\t\t\t/* Zap SWALK, by moving every further SACK up by one slot.\n\t\t\t * Decrease num_sacks.\n\t\t\t */\n\t\t\ttp->rx_opt.num_sacks--;\n\t\t\tfor (i = this_sack; i < tp->rx_opt.num_sacks; i++)\n\t\t\t\tsp[i] = sp[i + 1];\n\t\t\tcontinue;\n\t\t}\n\t\tthis_sack++, swalk++;\n\t}\n}\n\nstatic void tcp_sack_new_ofo_skb(struct sock *sk, u32 seq, u32 end_seq)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct tcp_sack_block *sp = &tp->selective_acks[0];\n\tint cur_sacks = tp->rx_opt.num_sacks;\n\tint this_sack;\n\n\tif (!cur_sacks)\n\t\tgoto new_sack;\n\n\tfor (this_sack = 0; this_sack < cur_sacks; this_sack++, sp++) {\n\t\tif (tcp_sack_extend(sp, seq, end_seq)) {\n\t\t\t/* Rotate this_sack to the first one. */\n\t\t\tfor (; this_sack > 0; this_sack--, sp--)\n\t\t\t\tswap(*sp, *(sp - 1));\n\t\t\tif (cur_sacks > 1)\n\t\t\t\ttcp_sack_maybe_coalesce(tp);\n\t\t\treturn;\n\t\t}\n\t}\n\n\t/* Could not find an adjacent existing SACK, build a new one,\n\t * put it at the front, and shift everyone else down.  We\n\t * always know there is at least one SACK present already here.\n\t *\n\t * If the sack array is full, forget about the last one.\n\t */\n\tif (this_sack >= TCP_NUM_SACKS) {\n\t\tthis_sack--;\n\t\ttp->rx_opt.num_sacks--;\n\t\tsp--;\n\t}\n\tfor (; this_sack > 0; this_sack--, sp--)\n\t\t*sp = *(sp - 1);\n\nnew_sack:\n\t/* Build the new head SACK, and we're done. */\n\tsp->start_seq = seq;\n\tsp->end_seq = end_seq;\n\ttp->rx_opt.num_sacks++;\n}\n\n/* RCV.NXT advances, some SACKs should be eaten. */\n\nstatic void tcp_sack_remove(struct tcp_sock *tp)\n{\n\tstruct tcp_sack_block *sp = &tp->selective_acks[0];\n\tint num_sacks = tp->rx_opt.num_sacks;\n\tint this_sack;\n\n\t/* Empty ofo queue, hence, all the SACKs are eaten. Clear. */\n\tif (skb_queue_empty(&tp->out_of_order_queue)) {\n\t\ttp->rx_opt.num_sacks = 0;\n\t\treturn;\n\t}\n\n\tfor (this_sack = 0; this_sack < num_sacks;) {\n\t\t/* Check if the start of the sack is covered by RCV.NXT. */\n\t\tif (!before(tp->rcv_nxt, sp->start_seq)) {\n\t\t\tint i;\n\n\t\t\t/* RCV.NXT must cover all the block! */\n\t\t\tWARN_ON(before(tp->rcv_nxt, sp->end_seq));\n\n\t\t\t/* Zap this SACK, by moving forward any other SACKS. */\n\t\t\tfor (i=this_sack+1; i < num_sacks; i++)\n\t\t\t\ttp->selective_acks[i-1] = tp->selective_acks[i];\n\t\t\tnum_sacks--;\n\t\t\tcontinue;\n\t\t}\n\t\tthis_sack++;\n\t\tsp++;\n\t}\n\ttp->rx_opt.num_sacks = num_sacks;\n}\n\n/* This one checks to see if we can put data from the\n * out_of_order queue into the receive_queue.\n */\nstatic void tcp_ofo_queue(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\t__u32 dsack_high = tp->rcv_nxt;\n\tstruct sk_buff *skb;\n\n\twhile ((skb = skb_peek(&tp->out_of_order_queue)) != NULL) {\n\t\tif (after(TCP_SKB_CB(skb)->seq, tp->rcv_nxt))\n\t\t\tbreak;\n\n\t\tif (before(TCP_SKB_CB(skb)->seq, dsack_high)) {\n\t\t\t__u32 dsack = dsack_high;\n\t\t\tif (before(TCP_SKB_CB(skb)->end_seq, dsack_high))\n\t\t\t\tdsack_high = TCP_SKB_CB(skb)->end_seq;\n\t\t\ttcp_dsack_extend(sk, TCP_SKB_CB(skb)->seq, dsack);\n\t\t}\n\n\t\tif (!after(TCP_SKB_CB(skb)->end_seq, tp->rcv_nxt)) {\n\t\t\tSOCK_DEBUG(sk, \"ofo packet was already received\\n\");\n\t\t\t__skb_unlink(skb, &tp->out_of_order_queue);\n\t\t\t__kfree_skb(skb);\n\t\t\tcontinue;\n\t\t}\n\t\tSOCK_DEBUG(sk, \"ofo requeuing : rcv_next %X seq %X - %X\\n\",\n\t\t\t   tp->rcv_nxt, TCP_SKB_CB(skb)->seq,\n\t\t\t   TCP_SKB_CB(skb)->end_seq);\n\n\t\t__skb_unlink(skb, &tp->out_of_order_queue);\n\t\t__skb_queue_tail(&sk->sk_receive_queue, skb);\n\t\ttp->rcv_nxt = TCP_SKB_CB(skb)->end_seq;\n\t\tif (tcp_hdr(skb)->fin)\n\t\t\ttcp_fin(sk);\n\t}\n}\n\nstatic int tcp_prune_ofo_queue(struct sock *sk);\nstatic int tcp_prune_queue(struct sock *sk);\n\nstatic inline int tcp_try_rmem_schedule(struct sock *sk, unsigned int size)\n{\n\tif (atomic_read(&sk->sk_rmem_alloc) > sk->sk_rcvbuf ||\n\t    !sk_rmem_schedule(sk, size)) {\n\n\t\tif (tcp_prune_queue(sk) < 0)\n\t\t\treturn -1;\n\n\t\tif (!sk_rmem_schedule(sk, size)) {\n\t\t\tif (!tcp_prune_ofo_queue(sk))\n\t\t\t\treturn -1;\n\n\t\t\tif (!sk_rmem_schedule(sk, size))\n\t\t\t\treturn -1;\n\t\t}\n\t}\n\treturn 0;\n}\n\nstatic void tcp_data_queue(struct sock *sk, struct sk_buff *skb)\n{\n\tconst struct tcphdr *th = tcp_hdr(skb);\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint eaten = -1;\n\n\tif (TCP_SKB_CB(skb)->seq == TCP_SKB_CB(skb)->end_seq)\n\t\tgoto drop;\n\n\tskb_dst_drop(skb);\n\t__skb_pull(skb, th->doff * 4);\n\n\tTCP_ECN_accept_cwr(tp, skb);\n\n\ttp->rx_opt.dsack = 0;\n\n\t/*  Queue data for delivery to the user.\n\t *  Packets in sequence go to the receive queue.\n\t *  Out of sequence packets to the out_of_order_queue.\n\t */\n\tif (TCP_SKB_CB(skb)->seq == tp->rcv_nxt) {\n\t\tif (tcp_receive_window(tp) == 0)\n\t\t\tgoto out_of_window;\n\n\t\t/* Ok. In sequence. In window. */\n\t\tif (tp->ucopy.task == current &&\n\t\t    tp->copied_seq == tp->rcv_nxt && tp->ucopy.len &&\n\t\t    sock_owned_by_user(sk) && !tp->urg_data) {\n\t\t\tint chunk = min_t(unsigned int, skb->len,\n\t\t\t\t\t  tp->ucopy.len);\n\n\t\t\t__set_current_state(TASK_RUNNING);\n\n\t\t\tlocal_bh_enable();\n\t\t\tif (!skb_copy_datagram_iovec(skb, 0, tp->ucopy.iov, chunk)) {\n\t\t\t\ttp->ucopy.len -= chunk;\n\t\t\t\ttp->copied_seq += chunk;\n\t\t\t\teaten = (chunk == skb->len);\n\t\t\t\ttcp_rcv_space_adjust(sk);\n\t\t\t}\n\t\t\tlocal_bh_disable();\n\t\t}\n\n\t\tif (eaten <= 0) {\nqueue_and_out:\n\t\t\tif (eaten < 0 &&\n\t\t\t    tcp_try_rmem_schedule(sk, skb->truesize))\n\t\t\t\tgoto drop;\n\n\t\t\tskb_set_owner_r(skb, sk);\n\t\t\t__skb_queue_tail(&sk->sk_receive_queue, skb);\n\t\t}\n\t\ttp->rcv_nxt = TCP_SKB_CB(skb)->end_seq;\n\t\tif (skb->len)\n\t\t\ttcp_event_data_recv(sk, skb);\n\t\tif (th->fin)\n\t\t\ttcp_fin(sk);\n\n\t\tif (!skb_queue_empty(&tp->out_of_order_queue)) {\n\t\t\ttcp_ofo_queue(sk);\n\n\t\t\t/* RFC2581. 4.2. SHOULD send immediate ACK, when\n\t\t\t * gap in queue is filled.\n\t\t\t */\n\t\t\tif (skb_queue_empty(&tp->out_of_order_queue))\n\t\t\t\tinet_csk(sk)->icsk_ack.pingpong = 0;\n\t\t}\n\n\t\tif (tp->rx_opt.num_sacks)\n\t\t\ttcp_sack_remove(tp);\n\n\t\ttcp_fast_path_check(sk);\n\n\t\tif (eaten > 0)\n\t\t\t__kfree_skb(skb);\n\t\telse if (!sock_flag(sk, SOCK_DEAD))\n\t\t\tsk->sk_data_ready(sk, 0);\n\t\treturn;\n\t}\n\n\tif (!after(TCP_SKB_CB(skb)->end_seq, tp->rcv_nxt)) {\n\t\t/* A retransmit, 2nd most common case.  Force an immediate ack. */\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_DELAYEDACKLOST);\n\t\ttcp_dsack_set(sk, TCP_SKB_CB(skb)->seq, TCP_SKB_CB(skb)->end_seq);\n\nout_of_window:\n\t\ttcp_enter_quickack_mode(sk);\n\t\tinet_csk_schedule_ack(sk);\ndrop:\n\t\t__kfree_skb(skb);\n\t\treturn;\n\t}\n\n\t/* Out of window. F.e. zero window probe. */\n\tif (!before(TCP_SKB_CB(skb)->seq, tp->rcv_nxt + tcp_receive_window(tp)))\n\t\tgoto out_of_window;\n\n\ttcp_enter_quickack_mode(sk);\n\n\tif (before(TCP_SKB_CB(skb)->seq, tp->rcv_nxt)) {\n\t\t/* Partial packet, seq < rcv_next < end_seq */\n\t\tSOCK_DEBUG(sk, \"partial packet: rcv_next %X seq %X - %X\\n\",\n\t\t\t   tp->rcv_nxt, TCP_SKB_CB(skb)->seq,\n\t\t\t   TCP_SKB_CB(skb)->end_seq);\n\n\t\ttcp_dsack_set(sk, TCP_SKB_CB(skb)->seq, tp->rcv_nxt);\n\n\t\t/* If window is closed, drop tail of packet. But after\n\t\t * remembering D-SACK for its head made in previous line.\n\t\t */\n\t\tif (!tcp_receive_window(tp))\n\t\t\tgoto out_of_window;\n\t\tgoto queue_and_out;\n\t}\n\n\tTCP_ECN_check_ce(tp, skb);\n\n\tif (tcp_try_rmem_schedule(sk, skb->truesize))\n\t\tgoto drop;\n\n\t/* Disable header prediction. */\n\ttp->pred_flags = 0;\n\tinet_csk_schedule_ack(sk);\n\n\tSOCK_DEBUG(sk, \"out of order segment: rcv_next %X seq %X - %X\\n\",\n\t\t   tp->rcv_nxt, TCP_SKB_CB(skb)->seq, TCP_SKB_CB(skb)->end_seq);\n\n\tskb_set_owner_r(skb, sk);\n\n\tif (!skb_peek(&tp->out_of_order_queue)) {\n\t\t/* Initial out of order segment, build 1 SACK. */\n\t\tif (tcp_is_sack(tp)) {\n\t\t\ttp->rx_opt.num_sacks = 1;\n\t\t\ttp->selective_acks[0].start_seq = TCP_SKB_CB(skb)->seq;\n\t\t\ttp->selective_acks[0].end_seq =\n\t\t\t\t\t\tTCP_SKB_CB(skb)->end_seq;\n\t\t}\n\t\t__skb_queue_head(&tp->out_of_order_queue, skb);\n\t} else {\n\t\tstruct sk_buff *skb1 = skb_peek_tail(&tp->out_of_order_queue);\n\t\tu32 seq = TCP_SKB_CB(skb)->seq;\n\t\tu32 end_seq = TCP_SKB_CB(skb)->end_seq;\n\n\t\tif (seq == TCP_SKB_CB(skb1)->end_seq) {\n\t\t\t__skb_queue_after(&tp->out_of_order_queue, skb1, skb);\n\n\t\t\tif (!tp->rx_opt.num_sacks ||\n\t\t\t    tp->selective_acks[0].end_seq != seq)\n\t\t\t\tgoto add_sack;\n\n\t\t\t/* Common case: data arrive in order after hole. */\n\t\t\ttp->selective_acks[0].end_seq = end_seq;\n\t\t\treturn;\n\t\t}\n\n\t\t/* Find place to insert this segment. */\n\t\twhile (1) {\n\t\t\tif (!after(TCP_SKB_CB(skb1)->seq, seq))\n\t\t\t\tbreak;\n\t\t\tif (skb_queue_is_first(&tp->out_of_order_queue, skb1)) {\n\t\t\t\tskb1 = NULL;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tskb1 = skb_queue_prev(&tp->out_of_order_queue, skb1);\n\t\t}\n\n\t\t/* Do skb overlap to previous one? */\n\t\tif (skb1 && before(seq, TCP_SKB_CB(skb1)->end_seq)) {\n\t\t\tif (!after(end_seq, TCP_SKB_CB(skb1)->end_seq)) {\n\t\t\t\t/* All the bits are present. Drop. */\n\t\t\t\t__kfree_skb(skb);\n\t\t\t\ttcp_dsack_set(sk, seq, end_seq);\n\t\t\t\tgoto add_sack;\n\t\t\t}\n\t\t\tif (after(seq, TCP_SKB_CB(skb1)->seq)) {\n\t\t\t\t/* Partial overlap. */\n\t\t\t\ttcp_dsack_set(sk, seq,\n\t\t\t\t\t      TCP_SKB_CB(skb1)->end_seq);\n\t\t\t} else {\n\t\t\t\tif (skb_queue_is_first(&tp->out_of_order_queue,\n\t\t\t\t\t\t       skb1))\n\t\t\t\t\tskb1 = NULL;\n\t\t\t\telse\n\t\t\t\t\tskb1 = skb_queue_prev(\n\t\t\t\t\t\t&tp->out_of_order_queue,\n\t\t\t\t\t\tskb1);\n\t\t\t}\n\t\t}\n\t\tif (!skb1)\n\t\t\t__skb_queue_head(&tp->out_of_order_queue, skb);\n\t\telse\n\t\t\t__skb_queue_after(&tp->out_of_order_queue, skb1, skb);\n\n\t\t/* And clean segments covered by new one as whole. */\n\t\twhile (!skb_queue_is_last(&tp->out_of_order_queue, skb)) {\n\t\t\tskb1 = skb_queue_next(&tp->out_of_order_queue, skb);\n\n\t\t\tif (!after(end_seq, TCP_SKB_CB(skb1)->seq))\n\t\t\t\tbreak;\n\t\t\tif (before(end_seq, TCP_SKB_CB(skb1)->end_seq)) {\n\t\t\t\ttcp_dsack_extend(sk, TCP_SKB_CB(skb1)->seq,\n\t\t\t\t\t\t end_seq);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t__skb_unlink(skb1, &tp->out_of_order_queue);\n\t\t\ttcp_dsack_extend(sk, TCP_SKB_CB(skb1)->seq,\n\t\t\t\t\t TCP_SKB_CB(skb1)->end_seq);\n\t\t\t__kfree_skb(skb1);\n\t\t}\n\nadd_sack:\n\t\tif (tcp_is_sack(tp))\n\t\t\ttcp_sack_new_ofo_skb(sk, seq, end_seq);\n\t}\n}\n\nstatic struct sk_buff *tcp_collapse_one(struct sock *sk, struct sk_buff *skb,\n\t\t\t\t\tstruct sk_buff_head *list)\n{\n\tstruct sk_buff *next = NULL;\n\n\tif (!skb_queue_is_last(list, skb))\n\t\tnext = skb_queue_next(list, skb);\n\n\t__skb_unlink(skb, list);\n\t__kfree_skb(skb);\n\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPRCVCOLLAPSED);\n\n\treturn next;\n}\n\n/* Collapse contiguous sequence of skbs head..tail with\n * sequence numbers start..end.\n *\n * If tail is NULL, this means until the end of the list.\n *\n * Segments with FIN/SYN are not collapsed (only because this\n * simplifies code)\n */\nstatic void\ntcp_collapse(struct sock *sk, struct sk_buff_head *list,\n\t     struct sk_buff *head, struct sk_buff *tail,\n\t     u32 start, u32 end)\n{\n\tstruct sk_buff *skb, *n;\n\tbool end_of_skbs;\n\n\t/* First, check that queue is collapsible and find\n\t * the point where collapsing can be useful. */\n\tskb = head;\nrestart:\n\tend_of_skbs = true;\n\tskb_queue_walk_from_safe(list, skb, n) {\n\t\tif (skb == tail)\n\t\t\tbreak;\n\t\t/* No new bits? It is possible on ofo queue. */\n\t\tif (!before(start, TCP_SKB_CB(skb)->end_seq)) {\n\t\t\tskb = tcp_collapse_one(sk, skb, list);\n\t\t\tif (!skb)\n\t\t\t\tbreak;\n\t\t\tgoto restart;\n\t\t}\n\n\t\t/* The first skb to collapse is:\n\t\t * - not SYN/FIN and\n\t\t * - bloated or contains data before \"start\" or\n\t\t *   overlaps to the next one.\n\t\t */\n\t\tif (!tcp_hdr(skb)->syn && !tcp_hdr(skb)->fin &&\n\t\t    (tcp_win_from_space(skb->truesize) > skb->len ||\n\t\t     before(TCP_SKB_CB(skb)->seq, start))) {\n\t\t\tend_of_skbs = false;\n\t\t\tbreak;\n\t\t}\n\n\t\tif (!skb_queue_is_last(list, skb)) {\n\t\t\tstruct sk_buff *next = skb_queue_next(list, skb);\n\t\t\tif (next != tail &&\n\t\t\t    TCP_SKB_CB(skb)->end_seq != TCP_SKB_CB(next)->seq) {\n\t\t\t\tend_of_skbs = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t/* Decided to skip this, advance start seq. */\n\t\tstart = TCP_SKB_CB(skb)->end_seq;\n\t}\n\tif (end_of_skbs || tcp_hdr(skb)->syn || tcp_hdr(skb)->fin)\n\t\treturn;\n\n\twhile (before(start, end)) {\n\t\tstruct sk_buff *nskb;\n\t\tunsigned int header = skb_headroom(skb);\n\t\tint copy = SKB_MAX_ORDER(header, 0);\n\n\t\t/* Too big header? This can happen with IPv6. */\n\t\tif (copy < 0)\n\t\t\treturn;\n\t\tif (end - start < copy)\n\t\t\tcopy = end - start;\n\t\tnskb = alloc_skb(copy + header, GFP_ATOMIC);\n\t\tif (!nskb)\n\t\t\treturn;\n\n\t\tskb_set_mac_header(nskb, skb_mac_header(skb) - skb->head);\n\t\tskb_set_network_header(nskb, (skb_network_header(skb) -\n\t\t\t\t\t      skb->head));\n\t\tskb_set_transport_header(nskb, (skb_transport_header(skb) -\n\t\t\t\t\t\tskb->head));\n\t\tskb_reserve(nskb, header);\n\t\tmemcpy(nskb->head, skb->head, header);\n\t\tmemcpy(nskb->cb, skb->cb, sizeof(skb->cb));\n\t\tTCP_SKB_CB(nskb)->seq = TCP_SKB_CB(nskb)->end_seq = start;\n\t\t__skb_queue_before(list, skb, nskb);\n\t\tskb_set_owner_r(nskb, sk);\n\n\t\t/* Copy data, releasing collapsed skbs. */\n\t\twhile (copy > 0) {\n\t\t\tint offset = start - TCP_SKB_CB(skb)->seq;\n\t\t\tint size = TCP_SKB_CB(skb)->end_seq - start;\n\n\t\t\tBUG_ON(offset < 0);\n\t\t\tif (size > 0) {\n\t\t\t\tsize = min(copy, size);\n\t\t\t\tif (skb_copy_bits(skb, offset, skb_put(nskb, size), size))\n\t\t\t\t\tBUG();\n\t\t\t\tTCP_SKB_CB(nskb)->end_seq += size;\n\t\t\t\tcopy -= size;\n\t\t\t\tstart += size;\n\t\t\t}\n\t\t\tif (!before(start, TCP_SKB_CB(skb)->end_seq)) {\n\t\t\t\tskb = tcp_collapse_one(sk, skb, list);\n\t\t\t\tif (!skb ||\n\t\t\t\t    skb == tail ||\n\t\t\t\t    tcp_hdr(skb)->syn ||\n\t\t\t\t    tcp_hdr(skb)->fin)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/* Collapse ofo queue. Algorithm: select contiguous sequence of skbs\n * and tcp_collapse() them until all the queue is collapsed.\n */\nstatic void tcp_collapse_ofo_queue(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *skb = skb_peek(&tp->out_of_order_queue);\n\tstruct sk_buff *head;\n\tu32 start, end;\n\n\tif (skb == NULL)\n\t\treturn;\n\n\tstart = TCP_SKB_CB(skb)->seq;\n\tend = TCP_SKB_CB(skb)->end_seq;\n\thead = skb;\n\n\tfor (;;) {\n\t\tstruct sk_buff *next = NULL;\n\n\t\tif (!skb_queue_is_last(&tp->out_of_order_queue, skb))\n\t\t\tnext = skb_queue_next(&tp->out_of_order_queue, skb);\n\t\tskb = next;\n\n\t\t/* Segment is terminated when we see gap or when\n\t\t * we are at the end of all the queue. */\n\t\tif (!skb ||\n\t\t    after(TCP_SKB_CB(skb)->seq, end) ||\n\t\t    before(TCP_SKB_CB(skb)->end_seq, start)) {\n\t\t\ttcp_collapse(sk, &tp->out_of_order_queue,\n\t\t\t\t     head, skb, start, end);\n\t\t\thead = skb;\n\t\t\tif (!skb)\n\t\t\t\tbreak;\n\t\t\t/* Start new segment */\n\t\t\tstart = TCP_SKB_CB(skb)->seq;\n\t\t\tend = TCP_SKB_CB(skb)->end_seq;\n\t\t} else {\n\t\t\tif (before(TCP_SKB_CB(skb)->seq, start))\n\t\t\t\tstart = TCP_SKB_CB(skb)->seq;\n\t\t\tif (after(TCP_SKB_CB(skb)->end_seq, end))\n\t\t\t\tend = TCP_SKB_CB(skb)->end_seq;\n\t\t}\n\t}\n}\n\n/*\n * Purge the out-of-order queue.\n * Return true if queue was pruned.\n */\nstatic int tcp_prune_ofo_queue(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint res = 0;\n\n\tif (!skb_queue_empty(&tp->out_of_order_queue)) {\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_OFOPRUNED);\n\t\t__skb_queue_purge(&tp->out_of_order_queue);\n\n\t\t/* Reset SACK state.  A conforming SACK implementation will\n\t\t * do the same at a timeout based retransmit.  When a connection\n\t\t * is in a sad state like this, we care only about integrity\n\t\t * of the connection not performance.\n\t\t */\n\t\tif (tp->rx_opt.sack_ok)\n\t\t\ttcp_sack_reset(&tp->rx_opt);\n\t\tsk_mem_reclaim(sk);\n\t\tres = 1;\n\t}\n\treturn res;\n}\n\n/* Reduce allocated memory if we can, trying to get\n * the socket within its memory limits again.\n *\n * Return less than zero if we should start dropping frames\n * until the socket owning process reads some of the data\n * to stabilize the situation.\n */\nstatic int tcp_prune_queue(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tSOCK_DEBUG(sk, \"prune_queue: c=%x\\n\", tp->copied_seq);\n\n\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_PRUNECALLED);\n\n\tif (atomic_read(&sk->sk_rmem_alloc) >= sk->sk_rcvbuf)\n\t\ttcp_clamp_window(sk);\n\telse if (tcp_memory_pressure)\n\t\ttp->rcv_ssthresh = min(tp->rcv_ssthresh, 4U * tp->advmss);\n\n\ttcp_collapse_ofo_queue(sk);\n\tif (!skb_queue_empty(&sk->sk_receive_queue))\n\t\ttcp_collapse(sk, &sk->sk_receive_queue,\n\t\t\t     skb_peek(&sk->sk_receive_queue),\n\t\t\t     NULL,\n\t\t\t     tp->copied_seq, tp->rcv_nxt);\n\tsk_mem_reclaim(sk);\n\n\tif (atomic_read(&sk->sk_rmem_alloc) <= sk->sk_rcvbuf)\n\t\treturn 0;\n\n\t/* Collapsing did not help, destructive actions follow.\n\t * This must not ever occur. */\n\n\ttcp_prune_ofo_queue(sk);\n\n\tif (atomic_read(&sk->sk_rmem_alloc) <= sk->sk_rcvbuf)\n\t\treturn 0;\n\n\t/* If we are really being abused, tell the caller to silently\n\t * drop receive data on the floor.  It will get retransmitted\n\t * and hopefully then we'll have sufficient space.\n\t */\n\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_RCVPRUNED);\n\n\t/* Massive buffer overcommit. */\n\ttp->pred_flags = 0;\n\treturn -1;\n}\n\n/* RFC2861, slow part. Adjust cwnd, after it was not full during one rto.\n * As additional protections, we do not touch cwnd in retransmission phases,\n * and if application hit its sndbuf limit recently.\n */\nvoid tcp_cwnd_application_limited(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (inet_csk(sk)->icsk_ca_state == TCP_CA_Open &&\n\t    sk->sk_socket && !test_bit(SOCK_NOSPACE, &sk->sk_socket->flags)) {\n\t\t/* Limited by application or receiver window. */\n\t\tu32 init_win = tcp_init_cwnd(tp, __sk_dst_get(sk));\n\t\tu32 win_used = max(tp->snd_cwnd_used, init_win);\n\t\tif (win_used < tp->snd_cwnd) {\n\t\t\ttp->snd_ssthresh = tcp_current_ssthresh(sk);\n\t\t\ttp->snd_cwnd = (tp->snd_cwnd + win_used) >> 1;\n\t\t}\n\t\ttp->snd_cwnd_used = 0;\n\t}\n\ttp->snd_cwnd_stamp = tcp_time_stamp;\n}\n\nstatic int tcp_should_expand_sndbuf(const struct sock *sk)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\n\t/* If the user specified a specific send buffer setting, do\n\t * not modify it.\n\t */\n\tif (sk->sk_userlocks & SOCK_SNDBUF_LOCK)\n\t\treturn 0;\n\n\t/* If we are under global TCP memory pressure, do not expand.  */\n\tif (tcp_memory_pressure)\n\t\treturn 0;\n\n\t/* If we are under soft global TCP memory pressure, do not expand.  */\n\tif (atomic_long_read(&tcp_memory_allocated) >= sysctl_tcp_mem[0])\n\t\treturn 0;\n\n\t/* If we filled the congestion window, do not expand.  */\n\tif (tp->packets_out >= tp->snd_cwnd)\n\t\treturn 0;\n\n\treturn 1;\n}\n\n/* When incoming ACK allowed to free some skb from write_queue,\n * we remember this event in flag SOCK_QUEUE_SHRUNK and wake up socket\n * on the exit from tcp input handler.\n *\n * PROBLEM: sndbuf expansion does not work well with largesend.\n */\nstatic void tcp_new_space(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (tcp_should_expand_sndbuf(sk)) {\n\t\tint sndmem = SKB_TRUESIZE(max_t(u32,\n\t\t\t\t\t\ttp->rx_opt.mss_clamp,\n\t\t\t\t\t\ttp->mss_cache) +\n\t\t\t\t\t  MAX_TCP_HEADER);\n\t\tint demanded = max_t(unsigned int, tp->snd_cwnd,\n\t\t\t\t     tp->reordering + 1);\n\t\tsndmem *= 2 * demanded;\n\t\tif (sndmem > sk->sk_sndbuf)\n\t\t\tsk->sk_sndbuf = min(sndmem, sysctl_tcp_wmem[2]);\n\t\ttp->snd_cwnd_stamp = tcp_time_stamp;\n\t}\n\n\tsk->sk_write_space(sk);\n}\n\nstatic void tcp_check_space(struct sock *sk)\n{\n\tif (sock_flag(sk, SOCK_QUEUE_SHRUNK)) {\n\t\tsock_reset_flag(sk, SOCK_QUEUE_SHRUNK);\n\t\tif (sk->sk_socket &&\n\t\t    test_bit(SOCK_NOSPACE, &sk->sk_socket->flags))\n\t\t\ttcp_new_space(sk);\n\t}\n}\n\nstatic inline void tcp_data_snd_check(struct sock *sk)\n{\n\ttcp_push_pending_frames(sk);\n\ttcp_check_space(sk);\n}\n\n/*\n * Check if sending an ack is needed.\n */\nstatic void __tcp_ack_snd_check(struct sock *sk, int ofo_possible)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\t    /* More than one full frame received... */\n\tif (((tp->rcv_nxt - tp->rcv_wup) > inet_csk(sk)->icsk_ack.rcv_mss &&\n\t     /* ... and right edge of window advances far enough.\n\t      * (tcp_recvmsg() will send ACK otherwise). Or...\n\t      */\n\t     __tcp_select_window(sk) >= tp->rcv_wnd) ||\n\t    /* We ACK each frame or... */\n\t    tcp_in_quickack_mode(sk) ||\n\t    /* We have out of order data. */\n\t    (ofo_possible && skb_peek(&tp->out_of_order_queue))) {\n\t\t/* Then ack it now */\n\t\ttcp_send_ack(sk);\n\t} else {\n\t\t/* Else, send delayed ack. */\n\t\ttcp_send_delayed_ack(sk);\n\t}\n}\n\nstatic inline void tcp_ack_snd_check(struct sock *sk)\n{\n\tif (!inet_csk_ack_scheduled(sk)) {\n\t\t/* We sent a data segment already. */\n\t\treturn;\n\t}\n\t__tcp_ack_snd_check(sk, 1);\n}\n\n/*\n *\tThis routine is only called when we have urgent data\n *\tsignaled. Its the 'slow' part of tcp_urg. It could be\n *\tmoved inline now as tcp_urg is only called from one\n *\tplace. We handle URGent data wrong. We have to - as\n *\tBSD still doesn't use the correction from RFC961.\n *\tFor 1003.1g we should support a new option TCP_STDURG to permit\n *\teither form (or just set the sysctl tcp_stdurg).\n */\n\nstatic void tcp_check_urg(struct sock *sk, const struct tcphdr *th)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tu32 ptr = ntohs(th->urg_ptr);\n\n\tif (ptr && !sysctl_tcp_stdurg)\n\t\tptr--;\n\tptr += ntohl(th->seq);\n\n\t/* Ignore urgent data that we've already seen and read. */\n\tif (after(tp->copied_seq, ptr))\n\t\treturn;\n\n\t/* Do not replay urg ptr.\n\t *\n\t * NOTE: interesting situation not covered by specs.\n\t * Misbehaving sender may send urg ptr, pointing to segment,\n\t * which we already have in ofo queue. We are not able to fetch\n\t * such data and will stay in TCP_URG_NOTYET until will be eaten\n\t * by recvmsg(). Seems, we are not obliged to handle such wicked\n\t * situations. But it is worth to think about possibility of some\n\t * DoSes using some hypothetical application level deadlock.\n\t */\n\tif (before(ptr, tp->rcv_nxt))\n\t\treturn;\n\n\t/* Do we already have a newer (or duplicate) urgent pointer? */\n\tif (tp->urg_data && !after(ptr, tp->urg_seq))\n\t\treturn;\n\n\t/* Tell the world about our new urgent pointer. */\n\tsk_send_sigurg(sk);\n\n\t/* We may be adding urgent data when the last byte read was\n\t * urgent. To do this requires some care. We cannot just ignore\n\t * tp->copied_seq since we would read the last urgent byte again\n\t * as data, nor can we alter copied_seq until this data arrives\n\t * or we break the semantics of SIOCATMARK (and thus sockatmark())\n\t *\n\t * NOTE. Double Dutch. Rendering to plain English: author of comment\n\t * above did something sort of \tsend(\"A\", MSG_OOB); send(\"B\", MSG_OOB);\n\t * and expect that both A and B disappear from stream. This is _wrong_.\n\t * Though this happens in BSD with high probability, this is occasional.\n\t * Any application relying on this is buggy. Note also, that fix \"works\"\n\t * only in this artificial test. Insert some normal data between A and B and we will\n\t * decline of BSD again. Verdict: it is better to remove to trap\n\t * buggy users.\n\t */\n\tif (tp->urg_seq == tp->copied_seq && tp->urg_data &&\n\t    !sock_flag(sk, SOCK_URGINLINE) && tp->copied_seq != tp->rcv_nxt) {\n\t\tstruct sk_buff *skb = skb_peek(&sk->sk_receive_queue);\n\t\ttp->copied_seq++;\n\t\tif (skb && !before(tp->copied_seq, TCP_SKB_CB(skb)->end_seq)) {\n\t\t\t__skb_unlink(skb, &sk->sk_receive_queue);\n\t\t\t__kfree_skb(skb);\n\t\t}\n\t}\n\n\ttp->urg_data = TCP_URG_NOTYET;\n\ttp->urg_seq = ptr;\n\n\t/* Disable header prediction. */\n\ttp->pred_flags = 0;\n}\n\n/* This is the 'fast' part of urgent handling. */\nstatic void tcp_urg(struct sock *sk, struct sk_buff *skb, const struct tcphdr *th)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\t/* Check if we get a new urgent pointer - normally not. */\n\tif (th->urg)\n\t\ttcp_check_urg(sk, th);\n\n\t/* Do we wait for any urgent data? - normally not... */\n\tif (tp->urg_data == TCP_URG_NOTYET) {\n\t\tu32 ptr = tp->urg_seq - ntohl(th->seq) + (th->doff * 4) -\n\t\t\t  th->syn;\n\n\t\t/* Is the urgent pointer pointing into this packet? */\n\t\tif (ptr < skb->len) {\n\t\t\tu8 tmp;\n\t\t\tif (skb_copy_bits(skb, ptr, &tmp, 1))\n\t\t\t\tBUG();\n\t\t\ttp->urg_data = TCP_URG_VALID | tmp;\n\t\t\tif (!sock_flag(sk, SOCK_DEAD))\n\t\t\t\tsk->sk_data_ready(sk, 0);\n\t\t}\n\t}\n}\n\nstatic int tcp_copy_to_iovec(struct sock *sk, struct sk_buff *skb, int hlen)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint chunk = skb->len - hlen;\n\tint err;\n\n\tlocal_bh_enable();\n\tif (skb_csum_unnecessary(skb))\n\t\terr = skb_copy_datagram_iovec(skb, hlen, tp->ucopy.iov, chunk);\n\telse\n\t\terr = skb_copy_and_csum_datagram_iovec(skb, hlen,\n\t\t\t\t\t\t       tp->ucopy.iov);\n\n\tif (!err) {\n\t\ttp->ucopy.len -= chunk;\n\t\ttp->copied_seq += chunk;\n\t\ttcp_rcv_space_adjust(sk);\n\t}\n\n\tlocal_bh_disable();\n\treturn err;\n}\n\nstatic __sum16 __tcp_checksum_complete_user(struct sock *sk,\n\t\t\t\t\t    struct sk_buff *skb)\n{\n\t__sum16 result;\n\n\tif (sock_owned_by_user(sk)) {\n\t\tlocal_bh_enable();\n\t\tresult = __tcp_checksum_complete(skb);\n\t\tlocal_bh_disable();\n\t} else {\n\t\tresult = __tcp_checksum_complete(skb);\n\t}\n\treturn result;\n}\n\nstatic inline int tcp_checksum_complete_user(struct sock *sk,\n\t\t\t\t\t     struct sk_buff *skb)\n{\n\treturn !skb_csum_unnecessary(skb) &&\n\t       __tcp_checksum_complete_user(sk, skb);\n}\n\n#ifdef CONFIG_NET_DMA\nstatic int tcp_dma_try_early_copy(struct sock *sk, struct sk_buff *skb,\n\t\t\t\t  int hlen)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint chunk = skb->len - hlen;\n\tint dma_cookie;\n\tint copied_early = 0;\n\n\tif (tp->ucopy.wakeup)\n\t\treturn 0;\n\n\tif (!tp->ucopy.dma_chan && tp->ucopy.pinned_list)\n\t\ttp->ucopy.dma_chan = dma_find_channel(DMA_MEMCPY);\n\n\tif (tp->ucopy.dma_chan && skb_csum_unnecessary(skb)) {\n\n\t\tdma_cookie = dma_skb_copy_datagram_iovec(tp->ucopy.dma_chan,\n\t\t\t\t\t\t\t skb, hlen,\n\t\t\t\t\t\t\t tp->ucopy.iov, chunk,\n\t\t\t\t\t\t\t tp->ucopy.pinned_list);\n\n\t\tif (dma_cookie < 0)\n\t\t\tgoto out;\n\n\t\ttp->ucopy.dma_cookie = dma_cookie;\n\t\tcopied_early = 1;\n\n\t\ttp->ucopy.len -= chunk;\n\t\ttp->copied_seq += chunk;\n\t\ttcp_rcv_space_adjust(sk);\n\n\t\tif ((tp->ucopy.len == 0) ||\n\t\t    (tcp_flag_word(tcp_hdr(skb)) & TCP_FLAG_PSH) ||\n\t\t    (atomic_read(&sk->sk_rmem_alloc) > (sk->sk_rcvbuf >> 1))) {\n\t\t\ttp->ucopy.wakeup = 1;\n\t\t\tsk->sk_data_ready(sk, 0);\n\t\t}\n\t} else if (chunk > 0) {\n\t\ttp->ucopy.wakeup = 1;\n\t\tsk->sk_data_ready(sk, 0);\n\t}\nout:\n\treturn copied_early;\n}\n#endif /* CONFIG_NET_DMA */\n\n/* Does PAWS and seqno based validation of an incoming segment, flags will\n * play significant role here.\n */\nstatic int tcp_validate_incoming(struct sock *sk, struct sk_buff *skb,\n\t\t\t      const struct tcphdr *th, int syn_inerr)\n{\n\tconst u8 *hash_location;\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\t/* RFC1323: H1. Apply PAWS check first. */\n\tif (tcp_fast_parse_options(skb, th, tp, &hash_location) &&\n\t    tp->rx_opt.saw_tstamp &&\n\t    tcp_paws_discard(sk, skb)) {\n\t\tif (!th->rst) {\n\t\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_PAWSESTABREJECTED);\n\t\t\ttcp_send_dupack(sk, skb);\n\t\t\tgoto discard;\n\t\t}\n\t\t/* Reset is accepted even if it did not pass PAWS. */\n\t}\n\n\t/* Step 1: check sequence number */\n\tif (!tcp_sequence(tp, TCP_SKB_CB(skb)->seq, TCP_SKB_CB(skb)->end_seq)) {\n\t\t/* RFC793, page 37: \"In all states except SYN-SENT, all reset\n\t\t * (RST) segments are validated by checking their SEQ-fields.\"\n\t\t * And page 69: \"If an incoming segment is not acceptable,\n\t\t * an acknowledgment should be sent in reply (unless the RST\n\t\t * bit is set, if so drop the segment and return)\".\n\t\t */\n\t\tif (!th->rst)\n\t\t\ttcp_send_dupack(sk, skb);\n\t\tgoto discard;\n\t}\n\n\t/* Step 2: check RST bit */\n\tif (th->rst) {\n\t\ttcp_reset(sk);\n\t\tgoto discard;\n\t}\n\n\t/* ts_recent update must be made after we are sure that the packet\n\t * is in window.\n\t */\n\ttcp_replace_ts_recent(tp, TCP_SKB_CB(skb)->seq);\n\n\t/* step 3: check security and precedence [ignored] */\n\n\t/* step 4: Check for a SYN in window. */\n\tif (th->syn && !before(TCP_SKB_CB(skb)->seq, tp->rcv_nxt)) {\n\t\tif (syn_inerr)\n\t\t\tTCP_INC_STATS_BH(sock_net(sk), TCP_MIB_INERRS);\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPABORTONSYN);\n\t\ttcp_reset(sk);\n\t\treturn -1;\n\t}\n\n\treturn 1;\n\ndiscard:\n\t__kfree_skb(skb);\n\treturn 0;\n}\n\n/*\n *\tTCP receive function for the ESTABLISHED state.\n *\n *\tIt is split into a fast path and a slow path. The fast path is\n * \tdisabled when:\n *\t- A zero window was announced from us - zero window probing\n *        is only handled properly in the slow path.\n *\t- Out of order segments arrived.\n *\t- Urgent data is expected.\n *\t- There is no buffer space left\n *\t- Unexpected TCP flags/window values/header lengths are received\n *\t  (detected by checking the TCP header against pred_flags)\n *\t- Data is sent in both directions. Fast path only supports pure senders\n *\t  or pure receivers (this means either the sequence number or the ack\n *\t  value must stay constant)\n *\t- Unexpected TCP option.\n *\n *\tWhen these conditions are not satisfied it drops into a standard\n *\treceive procedure patterned after RFC793 to handle all cases.\n *\tThe first three cases are guaranteed by proper pred_flags setting,\n *\tthe rest is checked inline. Fast processing is turned on in\n *\ttcp_data_queue when everything is OK.\n */\nint tcp_rcv_established(struct sock *sk, struct sk_buff *skb,\n\t\t\tconst struct tcphdr *th, unsigned int len)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint res;\n\n\t/*\n\t *\tHeader prediction.\n\t *\tThe code loosely follows the one in the famous\n\t *\t\"30 instruction TCP receive\" Van Jacobson mail.\n\t *\n\t *\tVan's trick is to deposit buffers into socket queue\n\t *\ton a device interrupt, to call tcp_recv function\n\t *\ton the receive process context and checksum and copy\n\t *\tthe buffer to user space. smart...\n\t *\n\t *\tOur current scheme is not silly either but we take the\n\t *\textra cost of the net_bh soft interrupt processing...\n\t *\tWe do checksum and copy also but from device to kernel.\n\t */\n\n\ttp->rx_opt.saw_tstamp = 0;\n\n\t/*\tpred_flags is 0xS?10 << 16 + snd_wnd\n\t *\tif header_prediction is to be made\n\t *\t'S' will always be tp->tcp_header_len >> 2\n\t *\t'?' will be 0 for the fast path, otherwise pred_flags is 0 to\n\t *  turn it off\t(when there are holes in the receive\n\t *\t space for instance)\n\t *\tPSH flag is ignored.\n\t */\n\n\tif ((tcp_flag_word(th) & TCP_HP_BITS) == tp->pred_flags &&\n\t    TCP_SKB_CB(skb)->seq == tp->rcv_nxt &&\n\t    !after(TCP_SKB_CB(skb)->ack_seq, tp->snd_nxt)) {\n\t\tint tcp_header_len = tp->tcp_header_len;\n\n\t\t/* Timestamp header prediction: tcp_header_len\n\t\t * is automatically equal to th->doff*4 due to pred_flags\n\t\t * match.\n\t\t */\n\n\t\t/* Check timestamp */\n\t\tif (tcp_header_len == sizeof(struct tcphdr) + TCPOLEN_TSTAMP_ALIGNED) {\n\t\t\t/* No? Slow path! */\n\t\t\tif (!tcp_parse_aligned_timestamp(tp, th))\n\t\t\t\tgoto slow_path;\n\n\t\t\t/* If PAWS failed, check it more carefully in slow path */\n\t\t\tif ((s32)(tp->rx_opt.rcv_tsval - tp->rx_opt.ts_recent) < 0)\n\t\t\t\tgoto slow_path;\n\n\t\t\t/* DO NOT update ts_recent here, if checksum fails\n\t\t\t * and timestamp was corrupted part, it will result\n\t\t\t * in a hung connection since we will drop all\n\t\t\t * future packets due to the PAWS test.\n\t\t\t */\n\t\t}\n\n\t\tif (len <= tcp_header_len) {\n\t\t\t/* Bulk data transfer: sender */\n\t\t\tif (len == tcp_header_len) {\n\t\t\t\t/* Predicted packet is in window by definition.\n\t\t\t\t * seq == rcv_nxt and rcv_wup <= rcv_nxt.\n\t\t\t\t * Hence, check seq<=rcv_wup reduces to:\n\t\t\t\t */\n\t\t\t\tif (tcp_header_len ==\n\t\t\t\t    (sizeof(struct tcphdr) + TCPOLEN_TSTAMP_ALIGNED) &&\n\t\t\t\t    tp->rcv_nxt == tp->rcv_wup)\n\t\t\t\t\ttcp_store_ts_recent(tp);\n\n\t\t\t\t/* We know that such packets are checksummed\n\t\t\t\t * on entry.\n\t\t\t\t */\n\t\t\t\ttcp_ack(sk, skb, 0);\n\t\t\t\t__kfree_skb(skb);\n\t\t\t\ttcp_data_snd_check(sk);\n\t\t\t\treturn 0;\n\t\t\t} else { /* Header too small */\n\t\t\t\tTCP_INC_STATS_BH(sock_net(sk), TCP_MIB_INERRS);\n\t\t\t\tgoto discard;\n\t\t\t}\n\t\t} else {\n\t\t\tint eaten = 0;\n\t\t\tint copied_early = 0;\n\n\t\t\tif (tp->copied_seq == tp->rcv_nxt &&\n\t\t\t    len - tcp_header_len <= tp->ucopy.len) {\n#ifdef CONFIG_NET_DMA\n\t\t\t\tif (tcp_dma_try_early_copy(sk, skb, tcp_header_len)) {\n\t\t\t\t\tcopied_early = 1;\n\t\t\t\t\teaten = 1;\n\t\t\t\t}\n#endif\n\t\t\t\tif (tp->ucopy.task == current &&\n\t\t\t\t    sock_owned_by_user(sk) && !copied_early) {\n\t\t\t\t\t__set_current_state(TASK_RUNNING);\n\n\t\t\t\t\tif (!tcp_copy_to_iovec(sk, skb, tcp_header_len))\n\t\t\t\t\t\teaten = 1;\n\t\t\t\t}\n\t\t\t\tif (eaten) {\n\t\t\t\t\t/* Predicted packet is in window by definition.\n\t\t\t\t\t * seq == rcv_nxt and rcv_wup <= rcv_nxt.\n\t\t\t\t\t * Hence, check seq<=rcv_wup reduces to:\n\t\t\t\t\t */\n\t\t\t\t\tif (tcp_header_len ==\n\t\t\t\t\t    (sizeof(struct tcphdr) +\n\t\t\t\t\t     TCPOLEN_TSTAMP_ALIGNED) &&\n\t\t\t\t\t    tp->rcv_nxt == tp->rcv_wup)\n\t\t\t\t\t\ttcp_store_ts_recent(tp);\n\n\t\t\t\t\ttcp_rcv_rtt_measure_ts(sk, skb);\n\n\t\t\t\t\t__skb_pull(skb, tcp_header_len);\n\t\t\t\t\ttp->rcv_nxt = TCP_SKB_CB(skb)->end_seq;\n\t\t\t\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPHPHITSTOUSER);\n\t\t\t\t}\n\t\t\t\tif (copied_early)\n\t\t\t\t\ttcp_cleanup_rbuf(sk, skb->len);\n\t\t\t}\n\t\t\tif (!eaten) {\n\t\t\t\tif (tcp_checksum_complete_user(sk, skb))\n\t\t\t\t\tgoto csum_error;\n\n\t\t\t\t/* Predicted packet is in window by definition.\n\t\t\t\t * seq == rcv_nxt and rcv_wup <= rcv_nxt.\n\t\t\t\t * Hence, check seq<=rcv_wup reduces to:\n\t\t\t\t */\n\t\t\t\tif (tcp_header_len ==\n\t\t\t\t    (sizeof(struct tcphdr) + TCPOLEN_TSTAMP_ALIGNED) &&\n\t\t\t\t    tp->rcv_nxt == tp->rcv_wup)\n\t\t\t\t\ttcp_store_ts_recent(tp);\n\n\t\t\t\ttcp_rcv_rtt_measure_ts(sk, skb);\n\n\t\t\t\tif ((int)skb->truesize > sk->sk_forward_alloc)\n\t\t\t\t\tgoto step5;\n\n\t\t\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPHPHITS);\n\n\t\t\t\t/* Bulk data transfer: receiver */\n\t\t\t\t__skb_pull(skb, tcp_header_len);\n\t\t\t\t__skb_queue_tail(&sk->sk_receive_queue, skb);\n\t\t\t\tskb_set_owner_r(skb, sk);\n\t\t\t\ttp->rcv_nxt = TCP_SKB_CB(skb)->end_seq;\n\t\t\t}\n\n\t\t\ttcp_event_data_recv(sk, skb);\n\n\t\t\tif (TCP_SKB_CB(skb)->ack_seq != tp->snd_una) {\n\t\t\t\t/* Well, only one small jumplet in fast path... */\n\t\t\t\ttcp_ack(sk, skb, FLAG_DATA);\n\t\t\t\ttcp_data_snd_check(sk);\n\t\t\t\tif (!inet_csk_ack_scheduled(sk))\n\t\t\t\t\tgoto no_ack;\n\t\t\t}\n\n\t\t\tif (!copied_early || tp->rcv_nxt != tp->rcv_wup)\n\t\t\t\t__tcp_ack_snd_check(sk, 0);\nno_ack:\n#ifdef CONFIG_NET_DMA\n\t\t\tif (copied_early)\n\t\t\t\t__skb_queue_tail(&sk->sk_async_wait_queue, skb);\n\t\t\telse\n#endif\n\t\t\tif (eaten)\n\t\t\t\t__kfree_skb(skb);\n\t\t\telse\n\t\t\t\tsk->sk_data_ready(sk, 0);\n\t\t\treturn 0;\n\t\t}\n\t}\n\nslow_path:\n\tif (len < (th->doff << 2) || tcp_checksum_complete_user(sk, skb))\n\t\tgoto csum_error;\n\n\t/*\n\t *\tStandard slow path.\n\t */\n\n\tres = tcp_validate_incoming(sk, skb, th, 1);\n\tif (res <= 0)\n\t\treturn -res;\n\nstep5:\n\tif (th->ack && tcp_ack(sk, skb, FLAG_SLOWPATH) < 0)\n\t\tgoto discard;\n\n\ttcp_rcv_rtt_measure_ts(sk, skb);\n\n\t/* Process urgent data. */\n\ttcp_urg(sk, skb, th);\n\n\t/* step 7: process the segment text */\n\ttcp_data_queue(sk, skb);\n\n\ttcp_data_snd_check(sk);\n\ttcp_ack_snd_check(sk);\n\treturn 0;\n\ncsum_error:\n\tTCP_INC_STATS_BH(sock_net(sk), TCP_MIB_INERRS);\n\ndiscard:\n\t__kfree_skb(skb);\n\treturn 0;\n}\nEXPORT_SYMBOL(tcp_rcv_established);\n\nstatic int tcp_rcv_synsent_state_process(struct sock *sk, struct sk_buff *skb,\n\t\t\t\t\t const struct tcphdr *th, unsigned int len)\n{\n\tconst u8 *hash_location;\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct tcp_cookie_values *cvp = tp->cookie_values;\n\tint saved_clamp = tp->rx_opt.mss_clamp;\n\n\ttcp_parse_options(skb, &tp->rx_opt, &hash_location, 0);\n\n\tif (th->ack) {\n\t\t/* rfc793:\n\t\t * \"If the state is SYN-SENT then\n\t\t *    first check the ACK bit\n\t\t *      If the ACK bit is set\n\t\t *\t  If SEG.ACK =< ISS, or SEG.ACK > SND.NXT, send\n\t\t *        a reset (unless the RST bit is set, if so drop\n\t\t *        the segment and return)\"\n\t\t *\n\t\t *  We do not send data with SYN, so that RFC-correct\n\t\t *  test reduces to:\n\t\t */\n\t\tif (TCP_SKB_CB(skb)->ack_seq != tp->snd_nxt)\n\t\t\tgoto reset_and_undo;\n\n\t\tif (tp->rx_opt.saw_tstamp && tp->rx_opt.rcv_tsecr &&\n\t\t    !between(tp->rx_opt.rcv_tsecr, tp->retrans_stamp,\n\t\t\t     tcp_time_stamp)) {\n\t\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_PAWSACTIVEREJECTED);\n\t\t\tgoto reset_and_undo;\n\t\t}\n\n\t\t/* Now ACK is acceptable.\n\t\t *\n\t\t * \"If the RST bit is set\n\t\t *    If the ACK was acceptable then signal the user \"error:\n\t\t *    connection reset\", drop the segment, enter CLOSED state,\n\t\t *    delete TCB, and return.\"\n\t\t */\n\n\t\tif (th->rst) {\n\t\t\ttcp_reset(sk);\n\t\t\tgoto discard;\n\t\t}\n\n\t\t/* rfc793:\n\t\t *   \"fifth, if neither of the SYN or RST bits is set then\n\t\t *    drop the segment and return.\"\n\t\t *\n\t\t *    See note below!\n\t\t *                                        --ANK(990513)\n\t\t */\n\t\tif (!th->syn)\n\t\t\tgoto discard_and_undo;\n\n\t\t/* rfc793:\n\t\t *   \"If the SYN bit is on ...\n\t\t *    are acceptable then ...\n\t\t *    (our SYN has been ACKed), change the connection\n\t\t *    state to ESTABLISHED...\"\n\t\t */\n\n\t\tTCP_ECN_rcv_synack(tp, th);\n\n\t\ttp->snd_wl1 = TCP_SKB_CB(skb)->seq;\n\t\ttcp_ack(sk, skb, FLAG_SLOWPATH);\n\n\t\t/* Ok.. it's good. Set up sequence numbers and\n\t\t * move to established.\n\t\t */\n\t\ttp->rcv_nxt = TCP_SKB_CB(skb)->seq + 1;\n\t\ttp->rcv_wup = TCP_SKB_CB(skb)->seq + 1;\n\n\t\t/* RFC1323: The window in SYN & SYN/ACK segments is\n\t\t * never scaled.\n\t\t */\n\t\ttp->snd_wnd = ntohs(th->window);\n\t\ttcp_init_wl(tp, TCP_SKB_CB(skb)->seq);\n\n\t\tif (!tp->rx_opt.wscale_ok) {\n\t\t\ttp->rx_opt.snd_wscale = tp->rx_opt.rcv_wscale = 0;\n\t\t\ttp->window_clamp = min(tp->window_clamp, 65535U);\n\t\t}\n\n\t\tif (tp->rx_opt.saw_tstamp) {\n\t\t\ttp->rx_opt.tstamp_ok\t   = 1;\n\t\t\ttp->tcp_header_len =\n\t\t\t\tsizeof(struct tcphdr) + TCPOLEN_TSTAMP_ALIGNED;\n\t\t\ttp->advmss\t    -= TCPOLEN_TSTAMP_ALIGNED;\n\t\t\ttcp_store_ts_recent(tp);\n\t\t} else {\n\t\t\ttp->tcp_header_len = sizeof(struct tcphdr);\n\t\t}\n\n\t\tif (tcp_is_sack(tp) && sysctl_tcp_fack)\n\t\t\ttcp_enable_fack(tp);\n\n\t\ttcp_mtup_init(sk);\n\t\ttcp_sync_mss(sk, icsk->icsk_pmtu_cookie);\n\t\ttcp_initialize_rcv_mss(sk);\n\n\t\t/* Remember, tcp_poll() does not lock socket!\n\t\t * Change state from SYN-SENT only after copied_seq\n\t\t * is initialized. */\n\t\ttp->copied_seq = tp->rcv_nxt;\n\n\t\tif (cvp != NULL &&\n\t\t    cvp->cookie_pair_size > 0 &&\n\t\t    tp->rx_opt.cookie_plus > 0) {\n\t\t\tint cookie_size = tp->rx_opt.cookie_plus\n\t\t\t\t\t- TCPOLEN_COOKIE_BASE;\n\t\t\tint cookie_pair_size = cookie_size\n\t\t\t\t\t     + cvp->cookie_desired;\n\n\t\t\t/* A cookie extension option was sent and returned.\n\t\t\t * Note that each incoming SYNACK replaces the\n\t\t\t * Responder cookie.  The initial exchange is most\n\t\t\t * fragile, as protection against spoofing relies\n\t\t\t * entirely upon the sequence and timestamp (above).\n\t\t\t * This replacement strategy allows the correct pair to\n\t\t\t * pass through, while any others will be filtered via\n\t\t\t * Responder verification later.\n\t\t\t */\n\t\t\tif (sizeof(cvp->cookie_pair) >= cookie_pair_size) {\n\t\t\t\tmemcpy(&cvp->cookie_pair[cvp->cookie_desired],\n\t\t\t\t       hash_location, cookie_size);\n\t\t\t\tcvp->cookie_pair_size = cookie_pair_size;\n\t\t\t}\n\t\t}\n\n\t\tsmp_mb();\n\t\ttcp_set_state(sk, TCP_ESTABLISHED);\n\n\t\tsecurity_inet_conn_established(sk, skb);\n\n\t\t/* Make sure socket is routed, for correct metrics.  */\n\t\ticsk->icsk_af_ops->rebuild_header(sk);\n\n\t\ttcp_init_metrics(sk);\n\n\t\ttcp_init_congestion_control(sk);\n\n\t\t/* Prevent spurious tcp_cwnd_restart() on first data\n\t\t * packet.\n\t\t */\n\t\ttp->lsndtime = tcp_time_stamp;\n\n\t\ttcp_init_buffer_space(sk);\n\n\t\tif (sock_flag(sk, SOCK_KEEPOPEN))\n\t\t\tinet_csk_reset_keepalive_timer(sk, keepalive_time_when(tp));\n\n\t\tif (!tp->rx_opt.snd_wscale)\n\t\t\t__tcp_fast_path_on(tp, tp->snd_wnd);\n\t\telse\n\t\t\ttp->pred_flags = 0;\n\n\t\tif (!sock_flag(sk, SOCK_DEAD)) {\n\t\t\tsk->sk_state_change(sk);\n\t\t\tsk_wake_async(sk, SOCK_WAKE_IO, POLL_OUT);\n\t\t}\n\n\t\tif (sk->sk_write_pending ||\n\t\t    icsk->icsk_accept_queue.rskq_defer_accept ||\n\t\t    icsk->icsk_ack.pingpong) {\n\t\t\t/* Save one ACK. Data will be ready after\n\t\t\t * several ticks, if write_pending is set.\n\t\t\t *\n\t\t\t * It may be deleted, but with this feature tcpdumps\n\t\t\t * look so _wonderfully_ clever, that I was not able\n\t\t\t * to stand against the temptation 8)     --ANK\n\t\t\t */\n\t\t\tinet_csk_schedule_ack(sk);\n\t\t\ticsk->icsk_ack.lrcvtime = tcp_time_stamp;\n\t\t\ticsk->icsk_ack.ato\t = TCP_ATO_MIN;\n\t\t\ttcp_incr_quickack(sk);\n\t\t\ttcp_enter_quickack_mode(sk);\n\t\t\tinet_csk_reset_xmit_timer(sk, ICSK_TIME_DACK,\n\t\t\t\t\t\t  TCP_DELACK_MAX, TCP_RTO_MAX);\n\ndiscard:\n\t\t\t__kfree_skb(skb);\n\t\t\treturn 0;\n\t\t} else {\n\t\t\ttcp_send_ack(sk);\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/* No ACK in the segment */\n\n\tif (th->rst) {\n\t\t/* rfc793:\n\t\t * \"If the RST bit is set\n\t\t *\n\t\t *      Otherwise (no ACK) drop the segment and return.\"\n\t\t */\n\n\t\tgoto discard_and_undo;\n\t}\n\n\t/* PAWS check. */\n\tif (tp->rx_opt.ts_recent_stamp && tp->rx_opt.saw_tstamp &&\n\t    tcp_paws_reject(&tp->rx_opt, 0))\n\t\tgoto discard_and_undo;\n\n\tif (th->syn) {\n\t\t/* We see SYN without ACK. It is attempt of\n\t\t * simultaneous connect with crossed SYNs.\n\t\t * Particularly, it can be connect to self.\n\t\t */\n\t\ttcp_set_state(sk, TCP_SYN_RECV);\n\n\t\tif (tp->rx_opt.saw_tstamp) {\n\t\t\ttp->rx_opt.tstamp_ok = 1;\n\t\t\ttcp_store_ts_recent(tp);\n\t\t\ttp->tcp_header_len =\n\t\t\t\tsizeof(struct tcphdr) + TCPOLEN_TSTAMP_ALIGNED;\n\t\t} else {\n\t\t\ttp->tcp_header_len = sizeof(struct tcphdr);\n\t\t}\n\n\t\ttp->rcv_nxt = TCP_SKB_CB(skb)->seq + 1;\n\t\ttp->rcv_wup = TCP_SKB_CB(skb)->seq + 1;\n\n\t\t/* RFC1323: The window in SYN & SYN/ACK segments is\n\t\t * never scaled.\n\t\t */\n\t\ttp->snd_wnd    = ntohs(th->window);\n\t\ttp->snd_wl1    = TCP_SKB_CB(skb)->seq;\n\t\ttp->max_window = tp->snd_wnd;\n\n\t\tTCP_ECN_rcv_syn(tp, th);\n\n\t\ttcp_mtup_init(sk);\n\t\ttcp_sync_mss(sk, icsk->icsk_pmtu_cookie);\n\t\ttcp_initialize_rcv_mss(sk);\n\n\t\ttcp_send_synack(sk);\n#if 0\n\t\t/* Note, we could accept data and URG from this segment.\n\t\t * There are no obstacles to make this.\n\t\t *\n\t\t * However, if we ignore data in ACKless segments sometimes,\n\t\t * we have no reasons to accept it sometimes.\n\t\t * Also, seems the code doing it in step6 of tcp_rcv_state_process\n\t\t * is not flawless. So, discard packet for sanity.\n\t\t * Uncomment this return to process the data.\n\t\t */\n\t\treturn -1;\n#else\n\t\tgoto discard;\n#endif\n\t}\n\t/* \"fifth, if neither of the SYN or RST bits is set then\n\t * drop the segment and return.\"\n\t */\n\ndiscard_and_undo:\n\ttcp_clear_options(&tp->rx_opt);\n\ttp->rx_opt.mss_clamp = saved_clamp;\n\tgoto discard;\n\nreset_and_undo:\n\ttcp_clear_options(&tp->rx_opt);\n\ttp->rx_opt.mss_clamp = saved_clamp;\n\treturn 1;\n}\n\n/*\n *\tThis function implements the receiving procedure of RFC 793 for\n *\tall states except ESTABLISHED and TIME_WAIT.\n *\tIt's called from both tcp_v4_rcv and tcp_v6_rcv and should be\n *\taddress independent.\n */\n\nint tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb,\n\t\t\t  const struct tcphdr *th, unsigned int len)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\tint queued = 0;\n\tint res;\n\n\ttp->rx_opt.saw_tstamp = 0;\n\n\tswitch (sk->sk_state) {\n\tcase TCP_CLOSE:\n\t\tgoto discard;\n\n\tcase TCP_LISTEN:\n\t\tif (th->ack)\n\t\t\treturn 1;\n\n\t\tif (th->rst)\n\t\t\tgoto discard;\n\n\t\tif (th->syn) {\n\t\t\tif (icsk->icsk_af_ops->conn_request(sk, skb) < 0)\n\t\t\t\treturn 1;\n\n\t\t\t/* Now we have several options: In theory there is\n\t\t\t * nothing else in the frame. KA9Q has an option to\n\t\t\t * send data with the syn, BSD accepts data with the\n\t\t\t * syn up to the [to be] advertised window and\n\t\t\t * Solaris 2.1 gives you a protocol error. For now\n\t\t\t * we just ignore it, that fits the spec precisely\n\t\t\t * and avoids incompatibilities. It would be nice in\n\t\t\t * future to drop through and process the data.\n\t\t\t *\n\t\t\t * Now that TTCP is starting to be used we ought to\n\t\t\t * queue this data.\n\t\t\t * But, this leaves one open to an easy denial of\n\t\t\t * service attack, and SYN cookies can't defend\n\t\t\t * against this problem. So, we drop the data\n\t\t\t * in the interest of security over speed unless\n\t\t\t * it's still in use.\n\t\t\t */\n\t\t\tkfree_skb(skb);\n\t\t\treturn 0;\n\t\t}\n\t\tgoto discard;\n\n\tcase TCP_SYN_SENT:\n\t\tqueued = tcp_rcv_synsent_state_process(sk, skb, th, len);\n\t\tif (queued >= 0)\n\t\t\treturn queued;\n\n\t\t/* Do step6 onward by hand. */\n\t\ttcp_urg(sk, skb, th);\n\t\t__kfree_skb(skb);\n\t\ttcp_data_snd_check(sk);\n\t\treturn 0;\n\t}\n\n\tres = tcp_validate_incoming(sk, skb, th, 0);\n\tif (res <= 0)\n\t\treturn -res;\n\n\t/* step 5: check the ACK field */\n\tif (th->ack) {\n\t\tint acceptable = tcp_ack(sk, skb, FLAG_SLOWPATH) > 0;\n\n\t\tswitch (sk->sk_state) {\n\t\tcase TCP_SYN_RECV:\n\t\t\tif (acceptable) {\n\t\t\t\ttp->copied_seq = tp->rcv_nxt;\n\t\t\t\tsmp_mb();\n\t\t\t\ttcp_set_state(sk, TCP_ESTABLISHED);\n\t\t\t\tsk->sk_state_change(sk);\n\n\t\t\t\t/* Note, that this wakeup is only for marginal\n\t\t\t\t * crossed SYN case. Passively open sockets\n\t\t\t\t * are not waked up, because sk->sk_sleep ==\n\t\t\t\t * NULL and sk->sk_socket == NULL.\n\t\t\t\t */\n\t\t\t\tif (sk->sk_socket)\n\t\t\t\t\tsk_wake_async(sk,\n\t\t\t\t\t\t      SOCK_WAKE_IO, POLL_OUT);\n\n\t\t\t\ttp->snd_una = TCP_SKB_CB(skb)->ack_seq;\n\t\t\t\ttp->snd_wnd = ntohs(th->window) <<\n\t\t\t\t\t      tp->rx_opt.snd_wscale;\n\t\t\t\ttcp_init_wl(tp, TCP_SKB_CB(skb)->seq);\n\n\t\t\t\tif (tp->rx_opt.tstamp_ok)\n\t\t\t\t\ttp->advmss -= TCPOLEN_TSTAMP_ALIGNED;\n\n\t\t\t\t/* Make sure socket is routed, for\n\t\t\t\t * correct metrics.\n\t\t\t\t */\n\t\t\t\ticsk->icsk_af_ops->rebuild_header(sk);\n\n\t\t\t\ttcp_init_metrics(sk);\n\n\t\t\t\ttcp_init_congestion_control(sk);\n\n\t\t\t\t/* Prevent spurious tcp_cwnd_restart() on\n\t\t\t\t * first data packet.\n\t\t\t\t */\n\t\t\t\ttp->lsndtime = tcp_time_stamp;\n\n\t\t\t\ttcp_mtup_init(sk);\n\t\t\t\ttcp_initialize_rcv_mss(sk);\n\t\t\t\ttcp_init_buffer_space(sk);\n\t\t\t\ttcp_fast_path_on(tp);\n\t\t\t} else {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase TCP_FIN_WAIT1:\n\t\t\tif (tp->snd_una == tp->write_seq) {\n\t\t\t\ttcp_set_state(sk, TCP_FIN_WAIT2);\n\t\t\t\tsk->sk_shutdown |= SEND_SHUTDOWN;\n\t\t\t\tdst_confirm(__sk_dst_get(sk));\n\n\t\t\t\tif (!sock_flag(sk, SOCK_DEAD))\n\t\t\t\t\t/* Wake up lingering close() */\n\t\t\t\t\tsk->sk_state_change(sk);\n\t\t\t\telse {\n\t\t\t\t\tint tmo;\n\n\t\t\t\t\tif (tp->linger2 < 0 ||\n\t\t\t\t\t    (TCP_SKB_CB(skb)->end_seq != TCP_SKB_CB(skb)->seq &&\n\t\t\t\t\t     after(TCP_SKB_CB(skb)->end_seq - th->fin, tp->rcv_nxt))) {\n\t\t\t\t\t\ttcp_done(sk);\n\t\t\t\t\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPABORTONDATA);\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\n\t\t\t\t\ttmo = tcp_fin_time(sk);\n\t\t\t\t\tif (tmo > TCP_TIMEWAIT_LEN) {\n\t\t\t\t\t\tinet_csk_reset_keepalive_timer(sk, tmo - TCP_TIMEWAIT_LEN);\n\t\t\t\t\t} else if (th->fin || sock_owned_by_user(sk)) {\n\t\t\t\t\t\t/* Bad case. We could lose such FIN otherwise.\n\t\t\t\t\t\t * It is not a big problem, but it looks confusing\n\t\t\t\t\t\t * and not so rare event. We still can lose it now,\n\t\t\t\t\t\t * if it spins in bh_lock_sock(), but it is really\n\t\t\t\t\t\t * marginal case.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tinet_csk_reset_keepalive_timer(sk, tmo);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttcp_time_wait(sk, TCP_FIN_WAIT2, tmo);\n\t\t\t\t\t\tgoto discard;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase TCP_CLOSING:\n\t\t\tif (tp->snd_una == tp->write_seq) {\n\t\t\t\ttcp_time_wait(sk, TCP_TIME_WAIT, 0);\n\t\t\t\tgoto discard;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase TCP_LAST_ACK:\n\t\t\tif (tp->snd_una == tp->write_seq) {\n\t\t\t\ttcp_update_metrics(sk);\n\t\t\t\ttcp_done(sk);\n\t\t\t\tgoto discard;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t} else\n\t\tgoto discard;\n\n\t/* step 6: check the URG bit */\n\ttcp_urg(sk, skb, th);\n\n\t/* step 7: process the segment text */\n\tswitch (sk->sk_state) {\n\tcase TCP_CLOSE_WAIT:\n\tcase TCP_CLOSING:\n\tcase TCP_LAST_ACK:\n\t\tif (!before(TCP_SKB_CB(skb)->seq, tp->rcv_nxt))\n\t\t\tbreak;\n\tcase TCP_FIN_WAIT1:\n\tcase TCP_FIN_WAIT2:\n\t\t/* RFC 793 says to queue data in these states,\n\t\t * RFC 1122 says we MUST send a reset.\n\t\t * BSD 4.4 also does reset.\n\t\t */\n\t\tif (sk->sk_shutdown & RCV_SHUTDOWN) {\n\t\t\tif (TCP_SKB_CB(skb)->end_seq != TCP_SKB_CB(skb)->seq &&\n\t\t\t    after(TCP_SKB_CB(skb)->end_seq - th->fin, tp->rcv_nxt)) {\n\t\t\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPABORTONDATA);\n\t\t\t\ttcp_reset(sk);\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\t/* Fall through */\n\tcase TCP_ESTABLISHED:\n\t\ttcp_data_queue(sk, skb);\n\t\tqueued = 1;\n\t\tbreak;\n\t}\n\n\t/* tcp_data could move socket to TIME-WAIT */\n\tif (sk->sk_state != TCP_CLOSE) {\n\t\ttcp_data_snd_check(sk);\n\t\ttcp_ack_snd_check(sk);\n\t}\n\n\tif (!queued) {\ndiscard:\n\t\t__kfree_skb(skb);\n\t}\n\treturn 0;\n}\nEXPORT_SYMBOL(tcp_rcv_state_process);\n"], "fixing_code": ["/*\n * INET\t\tAn implementation of the TCP/IP protocol suite for the LINUX\n *\t\toperating system.  INET is implemented using the  BSD Socket\n *\t\tinterface as the means of communication with the user level.\n *\n *\t\tImplementation of the Transmission Control Protocol(TCP).\n *\n * Authors:\tRoss Biro\n *\t\tFred N. van Kempen, <waltje@uWalt.NL.Mugnet.ORG>\n *\t\tMark Evans, <evansmp@uhura.aston.ac.uk>\n *\t\tCorey Minyard <wf-rch!minyard@relay.EU.net>\n *\t\tFlorian La Roche, <flla@stud.uni-sb.de>\n *\t\tCharles Hedrick, <hedrick@klinzhai.rutgers.edu>\n *\t\tLinus Torvalds, <torvalds@cs.helsinki.fi>\n *\t\tAlan Cox, <gw4pts@gw4pts.ampr.org>\n *\t\tMatthew Dillon, <dillon@apollo.west.oic.com>\n *\t\tArnt Gulbrandsen, <agulbra@nvg.unit.no>\n *\t\tJorge Cwik, <jorge@laser.satlink.net>\n */\n\n/*\n * Changes:\n *\t\tPedro Roque\t:\tFast Retransmit/Recovery.\n *\t\t\t\t\tTwo receive queues.\n *\t\t\t\t\tRetransmit queue handled by TCP.\n *\t\t\t\t\tBetter retransmit timer handling.\n *\t\t\t\t\tNew congestion avoidance.\n *\t\t\t\t\tHeader prediction.\n *\t\t\t\t\tVariable renaming.\n *\n *\t\tEric\t\t:\tFast Retransmit.\n *\t\tRandy Scott\t:\tMSS option defines.\n *\t\tEric Schenk\t:\tFixes to slow start algorithm.\n *\t\tEric Schenk\t:\tYet another double ACK bug.\n *\t\tEric Schenk\t:\tDelayed ACK bug fixes.\n *\t\tEric Schenk\t:\tFloyd style fast retrans war avoidance.\n *\t\tDavid S. Miller\t:\tDon't allow zero congestion window.\n *\t\tEric Schenk\t:\tFix retransmitter so that it sends\n *\t\t\t\t\tnext packet on ack of previous packet.\n *\t\tAndi Kleen\t:\tMoved open_request checking here\n *\t\t\t\t\tand process RSTs for open_requests.\n *\t\tAndi Kleen\t:\tBetter prune_queue, and other fixes.\n *\t\tAndrey Savochkin:\tFix RTT measurements in the presence of\n *\t\t\t\t\ttimestamps.\n *\t\tAndrey Savochkin:\tCheck sequence numbers correctly when\n *\t\t\t\t\tremoving SACKs due to in sequence incoming\n *\t\t\t\t\tdata segments.\n *\t\tAndi Kleen:\t\tMake sure we never ack data there is not\n *\t\t\t\t\tenough room for. Also make this condition\n *\t\t\t\t\ta fatal error if it might still happen.\n *\t\tAndi Kleen:\t\tAdd tcp_measure_rcv_mss to make\n *\t\t\t\t\tconnections with MSS<min(MTU,ann. MSS)\n *\t\t\t\t\twork without delayed acks.\n *\t\tAndi Kleen:\t\tProcess packets with PSH set in the\n *\t\t\t\t\tfast path.\n *\t\tJ Hadi Salim:\t\tECN support\n *\t \tAndrei Gurtov,\n *\t\tPasi Sarolahti,\n *\t\tPanu Kuhlberg:\t\tExperimental audit of TCP (re)transmission\n *\t\t\t\t\tengine. Lots of bugs are found.\n *\t\tPasi Sarolahti:\t\tF-RTO for dealing with spurious RTOs\n */\n\n#include <linux/mm.h>\n#include <linux/slab.h>\n#include <linux/module.h>\n#include <linux/sysctl.h>\n#include <linux/kernel.h>\n#include <net/dst.h>\n#include <net/tcp.h>\n#include <net/inet_common.h>\n#include <linux/ipsec.h>\n#include <asm/unaligned.h>\n#include <net/netdma.h>\n\nint sysctl_tcp_timestamps __read_mostly = 1;\nint sysctl_tcp_window_scaling __read_mostly = 1;\nint sysctl_tcp_sack __read_mostly = 1;\nint sysctl_tcp_fack __read_mostly = 1;\nint sysctl_tcp_reordering __read_mostly = TCP_FASTRETRANS_THRESH;\nEXPORT_SYMBOL(sysctl_tcp_reordering);\nint sysctl_tcp_ecn __read_mostly = 2;\nEXPORT_SYMBOL(sysctl_tcp_ecn);\nint sysctl_tcp_dsack __read_mostly = 1;\nint sysctl_tcp_app_win __read_mostly = 31;\nint sysctl_tcp_adv_win_scale __read_mostly = 2;\nEXPORT_SYMBOL(sysctl_tcp_adv_win_scale);\n\nint sysctl_tcp_stdurg __read_mostly;\nint sysctl_tcp_rfc1337 __read_mostly;\nint sysctl_tcp_max_orphans __read_mostly = NR_FILE;\nint sysctl_tcp_frto __read_mostly = 2;\nint sysctl_tcp_frto_response __read_mostly;\nint sysctl_tcp_nometrics_save __read_mostly;\n\nint sysctl_tcp_thin_dupack __read_mostly;\n\nint sysctl_tcp_moderate_rcvbuf __read_mostly = 1;\nint sysctl_tcp_abc __read_mostly;\n\n#define FLAG_DATA\t\t0x01 /* Incoming frame contained data.\t\t*/\n#define FLAG_WIN_UPDATE\t\t0x02 /* Incoming ACK was a window update.\t*/\n#define FLAG_DATA_ACKED\t\t0x04 /* This ACK acknowledged new data.\t\t*/\n#define FLAG_RETRANS_DATA_ACKED\t0x08 /* \"\" \"\" some of which was retransmitted.\t*/\n#define FLAG_SYN_ACKED\t\t0x10 /* This ACK acknowledged SYN.\t\t*/\n#define FLAG_DATA_SACKED\t0x20 /* New SACK.\t\t\t\t*/\n#define FLAG_ECE\t\t0x40 /* ECE in this ACK\t\t\t\t*/\n#define FLAG_DATA_LOST\t\t0x80 /* SACK detected data lossage.\t\t*/\n#define FLAG_SLOWPATH\t\t0x100 /* Do not skip RFC checks for window update.*/\n#define FLAG_ONLY_ORIG_SACKED\t0x200 /* SACKs only non-rexmit sent before RTO */\n#define FLAG_SND_UNA_ADVANCED\t0x400 /* Snd_una was changed (!= FLAG_DATA_ACKED) */\n#define FLAG_DSACKING_ACK\t0x800 /* SACK blocks contained D-SACK info */\n#define FLAG_NONHEAD_RETRANS_ACKED\t0x1000 /* Non-head rexmitted data was ACKed */\n#define FLAG_SACK_RENEGING\t0x2000 /* snd_una advanced to a sacked seq */\n\n#define FLAG_ACKED\t\t(FLAG_DATA_ACKED|FLAG_SYN_ACKED)\n#define FLAG_NOT_DUP\t\t(FLAG_DATA|FLAG_WIN_UPDATE|FLAG_ACKED)\n#define FLAG_CA_ALERT\t\t(FLAG_DATA_SACKED|FLAG_ECE)\n#define FLAG_FORWARD_PROGRESS\t(FLAG_ACKED|FLAG_DATA_SACKED)\n#define FLAG_ANY_PROGRESS\t(FLAG_FORWARD_PROGRESS|FLAG_SND_UNA_ADVANCED)\n\n#define TCP_REMNANT (TCP_FLAG_FIN|TCP_FLAG_URG|TCP_FLAG_SYN|TCP_FLAG_PSH)\n#define TCP_HP_BITS (~(TCP_RESERVED_BITS|TCP_FLAG_PSH))\n\n/* Adapt the MSS value used to make delayed ack decision to the\n * real world.\n */\nstatic void tcp_measure_rcv_mss(struct sock *sk, const struct sk_buff *skb)\n{\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\tconst unsigned int lss = icsk->icsk_ack.last_seg_size;\n\tunsigned int len;\n\n\ticsk->icsk_ack.last_seg_size = 0;\n\n\t/* skb->len may jitter because of SACKs, even if peer\n\t * sends good full-sized frames.\n\t */\n\tlen = skb_shinfo(skb)->gso_size ? : skb->len;\n\tif (len >= icsk->icsk_ack.rcv_mss) {\n\t\ticsk->icsk_ack.rcv_mss = len;\n\t} else {\n\t\t/* Otherwise, we make more careful check taking into account,\n\t\t * that SACKs block is variable.\n\t\t *\n\t\t * \"len\" is invariant segment length, including TCP header.\n\t\t */\n\t\tlen += skb->data - skb_transport_header(skb);\n\t\tif (len >= TCP_MSS_DEFAULT + sizeof(struct tcphdr) ||\n\t\t    /* If PSH is not set, packet should be\n\t\t     * full sized, provided peer TCP is not badly broken.\n\t\t     * This observation (if it is correct 8)) allows\n\t\t     * to handle super-low mtu links fairly.\n\t\t     */\n\t\t    (len >= TCP_MIN_MSS + sizeof(struct tcphdr) &&\n\t\t     !(tcp_flag_word(tcp_hdr(skb)) & TCP_REMNANT))) {\n\t\t\t/* Subtract also invariant (if peer is RFC compliant),\n\t\t\t * tcp header plus fixed timestamp option length.\n\t\t\t * Resulting \"len\" is MSS free of SACK jitter.\n\t\t\t */\n\t\t\tlen -= tcp_sk(sk)->tcp_header_len;\n\t\t\ticsk->icsk_ack.last_seg_size = len;\n\t\t\tif (len == lss) {\n\t\t\t\ticsk->icsk_ack.rcv_mss = len;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (icsk->icsk_ack.pending & ICSK_ACK_PUSHED)\n\t\t\ticsk->icsk_ack.pending |= ICSK_ACK_PUSHED2;\n\t\ticsk->icsk_ack.pending |= ICSK_ACK_PUSHED;\n\t}\n}\n\nstatic void tcp_incr_quickack(struct sock *sk)\n{\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\tunsigned quickacks = tcp_sk(sk)->rcv_wnd / (2 * icsk->icsk_ack.rcv_mss);\n\n\tif (quickacks == 0)\n\t\tquickacks = 2;\n\tif (quickacks > icsk->icsk_ack.quick)\n\t\ticsk->icsk_ack.quick = min(quickacks, TCP_MAX_QUICKACKS);\n}\n\nstatic void tcp_enter_quickack_mode(struct sock *sk)\n{\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\ttcp_incr_quickack(sk);\n\ticsk->icsk_ack.pingpong = 0;\n\ticsk->icsk_ack.ato = TCP_ATO_MIN;\n}\n\n/* Send ACKs quickly, if \"quick\" count is not exhausted\n * and the session is not interactive.\n */\n\nstatic inline int tcp_in_quickack_mode(const struct sock *sk)\n{\n\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\treturn icsk->icsk_ack.quick && !icsk->icsk_ack.pingpong;\n}\n\nstatic inline void TCP_ECN_queue_cwr(struct tcp_sock *tp)\n{\n\tif (tp->ecn_flags & TCP_ECN_OK)\n\t\ttp->ecn_flags |= TCP_ECN_QUEUE_CWR;\n}\n\nstatic inline void TCP_ECN_accept_cwr(struct tcp_sock *tp, const struct sk_buff *skb)\n{\n\tif (tcp_hdr(skb)->cwr)\n\t\ttp->ecn_flags &= ~TCP_ECN_DEMAND_CWR;\n}\n\nstatic inline void TCP_ECN_withdraw_cwr(struct tcp_sock *tp)\n{\n\ttp->ecn_flags &= ~TCP_ECN_DEMAND_CWR;\n}\n\nstatic inline void TCP_ECN_check_ce(struct tcp_sock *tp, const struct sk_buff *skb)\n{\n\tif (!(tp->ecn_flags & TCP_ECN_OK))\n\t\treturn;\n\n\tswitch (TCP_SKB_CB(skb)->ip_dsfield & INET_ECN_MASK) {\n\tcase INET_ECN_NOT_ECT:\n\t\t/* Funny extension: if ECT is not set on a segment,\n\t\t * and we already seen ECT on a previous segment,\n\t\t * it is probably a retransmit.\n\t\t */\n\t\tif (tp->ecn_flags & TCP_ECN_SEEN)\n\t\t\ttcp_enter_quickack_mode((struct sock *)tp);\n\t\tbreak;\n\tcase INET_ECN_CE:\n\t\ttp->ecn_flags |= TCP_ECN_DEMAND_CWR;\n\t\t/* fallinto */\n\tdefault:\n\t\ttp->ecn_flags |= TCP_ECN_SEEN;\n\t}\n}\n\nstatic inline void TCP_ECN_rcv_synack(struct tcp_sock *tp, const struct tcphdr *th)\n{\n\tif ((tp->ecn_flags & TCP_ECN_OK) && (!th->ece || th->cwr))\n\t\ttp->ecn_flags &= ~TCP_ECN_OK;\n}\n\nstatic inline void TCP_ECN_rcv_syn(struct tcp_sock *tp, const struct tcphdr *th)\n{\n\tif ((tp->ecn_flags & TCP_ECN_OK) && (!th->ece || !th->cwr))\n\t\ttp->ecn_flags &= ~TCP_ECN_OK;\n}\n\nstatic inline int TCP_ECN_rcv_ecn_echo(const struct tcp_sock *tp, const struct tcphdr *th)\n{\n\tif (th->ece && !th->syn && (tp->ecn_flags & TCP_ECN_OK))\n\t\treturn 1;\n\treturn 0;\n}\n\n/* Buffer size and advertised window tuning.\n *\n * 1. Tuning sk->sk_sndbuf, when connection enters established state.\n */\n\nstatic void tcp_fixup_sndbuf(struct sock *sk)\n{\n\tint sndmem = SKB_TRUESIZE(tcp_sk(sk)->rx_opt.mss_clamp + MAX_TCP_HEADER);\n\n\tsndmem *= TCP_INIT_CWND;\n\tif (sk->sk_sndbuf < sndmem)\n\t\tsk->sk_sndbuf = min(sndmem, sysctl_tcp_wmem[2]);\n}\n\n/* 2. Tuning advertised window (window_clamp, rcv_ssthresh)\n *\n * All tcp_full_space() is split to two parts: \"network\" buffer, allocated\n * forward and advertised in receiver window (tp->rcv_wnd) and\n * \"application buffer\", required to isolate scheduling/application\n * latencies from network.\n * window_clamp is maximal advertised window. It can be less than\n * tcp_full_space(), in this case tcp_full_space() - window_clamp\n * is reserved for \"application\" buffer. The less window_clamp is\n * the smoother our behaviour from viewpoint of network, but the lower\n * throughput and the higher sensitivity of the connection to losses. 8)\n *\n * rcv_ssthresh is more strict window_clamp used at \"slow start\"\n * phase to predict further behaviour of this connection.\n * It is used for two goals:\n * - to enforce header prediction at sender, even when application\n *   requires some significant \"application buffer\". It is check #1.\n * - to prevent pruning of receive queue because of misprediction\n *   of receiver window. Check #2.\n *\n * The scheme does not work when sender sends good segments opening\n * window and then starts to feed us spaghetti. But it should work\n * in common situations. Otherwise, we have to rely on queue collapsing.\n */\n\n/* Slow part of check#2. */\nstatic int __tcp_grow_window(const struct sock *sk, const struct sk_buff *skb)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\t/* Optimize this! */\n\tint truesize = tcp_win_from_space(skb->truesize) >> 1;\n\tint window = tcp_win_from_space(sysctl_tcp_rmem[2]) >> 1;\n\n\twhile (tp->rcv_ssthresh <= window) {\n\t\tif (truesize <= skb->len)\n\t\t\treturn 2 * inet_csk(sk)->icsk_ack.rcv_mss;\n\n\t\ttruesize >>= 1;\n\t\twindow >>= 1;\n\t}\n\treturn 0;\n}\n\nstatic void tcp_grow_window(struct sock *sk, const struct sk_buff *skb)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\t/* Check #1 */\n\tif (tp->rcv_ssthresh < tp->window_clamp &&\n\t    (int)tp->rcv_ssthresh < tcp_space(sk) &&\n\t    !tcp_memory_pressure) {\n\t\tint incr;\n\n\t\t/* Check #2. Increase window, if skb with such overhead\n\t\t * will fit to rcvbuf in future.\n\t\t */\n\t\tif (tcp_win_from_space(skb->truesize) <= skb->len)\n\t\t\tincr = 2 * tp->advmss;\n\t\telse\n\t\t\tincr = __tcp_grow_window(sk, skb);\n\n\t\tif (incr) {\n\t\t\ttp->rcv_ssthresh = min(tp->rcv_ssthresh + incr,\n\t\t\t\t\t       tp->window_clamp);\n\t\t\tinet_csk(sk)->icsk_ack.quick |= 1;\n\t\t}\n\t}\n}\n\n/* 3. Tuning rcvbuf, when connection enters established state. */\n\nstatic void tcp_fixup_rcvbuf(struct sock *sk)\n{\n\tu32 mss = tcp_sk(sk)->advmss;\n\tu32 icwnd = TCP_DEFAULT_INIT_RCVWND;\n\tint rcvmem;\n\n\t/* Limit to 10 segments if mss <= 1460,\n\t * or 14600/mss segments, with a minimum of two segments.\n\t */\n\tif (mss > 1460)\n\t\ticwnd = max_t(u32, (1460 * TCP_DEFAULT_INIT_RCVWND) / mss, 2);\n\n\trcvmem = SKB_TRUESIZE(mss + MAX_TCP_HEADER);\n\twhile (tcp_win_from_space(rcvmem) < mss)\n\t\trcvmem += 128;\n\n\trcvmem *= icwnd;\n\n\tif (sk->sk_rcvbuf < rcvmem)\n\t\tsk->sk_rcvbuf = min(rcvmem, sysctl_tcp_rmem[2]);\n}\n\n/* 4. Try to fixup all. It is made immediately after connection enters\n *    established state.\n */\nstatic void tcp_init_buffer_space(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint maxwin;\n\n\tif (!(sk->sk_userlocks & SOCK_RCVBUF_LOCK))\n\t\ttcp_fixup_rcvbuf(sk);\n\tif (!(sk->sk_userlocks & SOCK_SNDBUF_LOCK))\n\t\ttcp_fixup_sndbuf(sk);\n\n\ttp->rcvq_space.space = tp->rcv_wnd;\n\n\tmaxwin = tcp_full_space(sk);\n\n\tif (tp->window_clamp >= maxwin) {\n\t\ttp->window_clamp = maxwin;\n\n\t\tif (sysctl_tcp_app_win && maxwin > 4 * tp->advmss)\n\t\t\ttp->window_clamp = max(maxwin -\n\t\t\t\t\t       (maxwin >> sysctl_tcp_app_win),\n\t\t\t\t\t       4 * tp->advmss);\n\t}\n\n\t/* Force reservation of one segment. */\n\tif (sysctl_tcp_app_win &&\n\t    tp->window_clamp > 2 * tp->advmss &&\n\t    tp->window_clamp + tp->advmss > maxwin)\n\t\ttp->window_clamp = max(2 * tp->advmss, maxwin - tp->advmss);\n\n\ttp->rcv_ssthresh = min(tp->rcv_ssthresh, tp->window_clamp);\n\ttp->snd_cwnd_stamp = tcp_time_stamp;\n}\n\n/* 5. Recalculate window clamp after socket hit its memory bounds. */\nstatic void tcp_clamp_window(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\n\ticsk->icsk_ack.quick = 0;\n\n\tif (sk->sk_rcvbuf < sysctl_tcp_rmem[2] &&\n\t    !(sk->sk_userlocks & SOCK_RCVBUF_LOCK) &&\n\t    !tcp_memory_pressure &&\n\t    atomic_long_read(&tcp_memory_allocated) < sysctl_tcp_mem[0]) {\n\t\tsk->sk_rcvbuf = min(atomic_read(&sk->sk_rmem_alloc),\n\t\t\t\t    sysctl_tcp_rmem[2]);\n\t}\n\tif (atomic_read(&sk->sk_rmem_alloc) > sk->sk_rcvbuf)\n\t\ttp->rcv_ssthresh = min(tp->window_clamp, 2U * tp->advmss);\n}\n\n/* Initialize RCV_MSS value.\n * RCV_MSS is an our guess about MSS used by the peer.\n * We haven't any direct information about the MSS.\n * It's better to underestimate the RCV_MSS rather than overestimate.\n * Overestimations make us ACKing less frequently than needed.\n * Underestimations are more easy to detect and fix by tcp_measure_rcv_mss().\n */\nvoid tcp_initialize_rcv_mss(struct sock *sk)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\tunsigned int hint = min_t(unsigned int, tp->advmss, tp->mss_cache);\n\n\thint = min(hint, tp->rcv_wnd / 2);\n\thint = min(hint, TCP_MSS_DEFAULT);\n\thint = max(hint, TCP_MIN_MSS);\n\n\tinet_csk(sk)->icsk_ack.rcv_mss = hint;\n}\nEXPORT_SYMBOL(tcp_initialize_rcv_mss);\n\n/* Receiver \"autotuning\" code.\n *\n * The algorithm for RTT estimation w/o timestamps is based on\n * Dynamic Right-Sizing (DRS) by Wu Feng and Mike Fisk of LANL.\n * <http://public.lanl.gov/radiant/pubs.html#DRS>\n *\n * More detail on this code can be found at\n * <http://staff.psc.edu/jheffner/>,\n * though this reference is out of date.  A new paper\n * is pending.\n */\nstatic void tcp_rcv_rtt_update(struct tcp_sock *tp, u32 sample, int win_dep)\n{\n\tu32 new_sample = tp->rcv_rtt_est.rtt;\n\tlong m = sample;\n\n\tif (m == 0)\n\t\tm = 1;\n\n\tif (new_sample != 0) {\n\t\t/* If we sample in larger samples in the non-timestamp\n\t\t * case, we could grossly overestimate the RTT especially\n\t\t * with chatty applications or bulk transfer apps which\n\t\t * are stalled on filesystem I/O.\n\t\t *\n\t\t * Also, since we are only going for a minimum in the\n\t\t * non-timestamp case, we do not smooth things out\n\t\t * else with timestamps disabled convergence takes too\n\t\t * long.\n\t\t */\n\t\tif (!win_dep) {\n\t\t\tm -= (new_sample >> 3);\n\t\t\tnew_sample += m;\n\t\t} else if (m < new_sample)\n\t\t\tnew_sample = m << 3;\n\t} else {\n\t\t/* No previous measure. */\n\t\tnew_sample = m << 3;\n\t}\n\n\tif (tp->rcv_rtt_est.rtt != new_sample)\n\t\ttp->rcv_rtt_est.rtt = new_sample;\n}\n\nstatic inline void tcp_rcv_rtt_measure(struct tcp_sock *tp)\n{\n\tif (tp->rcv_rtt_est.time == 0)\n\t\tgoto new_measure;\n\tif (before(tp->rcv_nxt, tp->rcv_rtt_est.seq))\n\t\treturn;\n\ttcp_rcv_rtt_update(tp, jiffies - tp->rcv_rtt_est.time, 1);\n\nnew_measure:\n\ttp->rcv_rtt_est.seq = tp->rcv_nxt + tp->rcv_wnd;\n\ttp->rcv_rtt_est.time = tcp_time_stamp;\n}\n\nstatic inline void tcp_rcv_rtt_measure_ts(struct sock *sk,\n\t\t\t\t\t  const struct sk_buff *skb)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tif (tp->rx_opt.rcv_tsecr &&\n\t    (TCP_SKB_CB(skb)->end_seq -\n\t     TCP_SKB_CB(skb)->seq >= inet_csk(sk)->icsk_ack.rcv_mss))\n\t\ttcp_rcv_rtt_update(tp, tcp_time_stamp - tp->rx_opt.rcv_tsecr, 0);\n}\n\n/*\n * This function should be called every time data is copied to user space.\n * It calculates the appropriate TCP receive buffer space.\n */\nvoid tcp_rcv_space_adjust(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint time;\n\tint space;\n\n\tif (tp->rcvq_space.time == 0)\n\t\tgoto new_measure;\n\n\ttime = tcp_time_stamp - tp->rcvq_space.time;\n\tif (time < (tp->rcv_rtt_est.rtt >> 3) || tp->rcv_rtt_est.rtt == 0)\n\t\treturn;\n\n\tspace = 2 * (tp->copied_seq - tp->rcvq_space.seq);\n\n\tspace = max(tp->rcvq_space.space, space);\n\n\tif (tp->rcvq_space.space != space) {\n\t\tint rcvmem;\n\n\t\ttp->rcvq_space.space = space;\n\n\t\tif (sysctl_tcp_moderate_rcvbuf &&\n\t\t    !(sk->sk_userlocks & SOCK_RCVBUF_LOCK)) {\n\t\t\tint new_clamp = space;\n\n\t\t\t/* Receive space grows, normalize in order to\n\t\t\t * take into account packet headers and sk_buff\n\t\t\t * structure overhead.\n\t\t\t */\n\t\t\tspace /= tp->advmss;\n\t\t\tif (!space)\n\t\t\t\tspace = 1;\n\t\t\trcvmem = SKB_TRUESIZE(tp->advmss + MAX_TCP_HEADER);\n\t\t\twhile (tcp_win_from_space(rcvmem) < tp->advmss)\n\t\t\t\trcvmem += 128;\n\t\t\tspace *= rcvmem;\n\t\t\tspace = min(space, sysctl_tcp_rmem[2]);\n\t\t\tif (space > sk->sk_rcvbuf) {\n\t\t\t\tsk->sk_rcvbuf = space;\n\n\t\t\t\t/* Make the window clamp follow along.  */\n\t\t\t\ttp->window_clamp = new_clamp;\n\t\t\t}\n\t\t}\n\t}\n\nnew_measure:\n\ttp->rcvq_space.seq = tp->copied_seq;\n\ttp->rcvq_space.time = tcp_time_stamp;\n}\n\n/* There is something which you must keep in mind when you analyze the\n * behavior of the tp->ato delayed ack timeout interval.  When a\n * connection starts up, we want to ack as quickly as possible.  The\n * problem is that \"good\" TCP's do slow start at the beginning of data\n * transmission.  The means that until we send the first few ACK's the\n * sender will sit on his end and only queue most of his data, because\n * he can only send snd_cwnd unacked packets at any given time.  For\n * each ACK we send, he increments snd_cwnd and transmits more of his\n * queue.  -DaveM\n */\nstatic void tcp_event_data_recv(struct sock *sk, struct sk_buff *skb)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\tu32 now;\n\n\tinet_csk_schedule_ack(sk);\n\n\ttcp_measure_rcv_mss(sk, skb);\n\n\ttcp_rcv_rtt_measure(tp);\n\n\tnow = tcp_time_stamp;\n\n\tif (!icsk->icsk_ack.ato) {\n\t\t/* The _first_ data packet received, initialize\n\t\t * delayed ACK engine.\n\t\t */\n\t\ttcp_incr_quickack(sk);\n\t\ticsk->icsk_ack.ato = TCP_ATO_MIN;\n\t} else {\n\t\tint m = now - icsk->icsk_ack.lrcvtime;\n\n\t\tif (m <= TCP_ATO_MIN / 2) {\n\t\t\t/* The fastest case is the first. */\n\t\t\ticsk->icsk_ack.ato = (icsk->icsk_ack.ato >> 1) + TCP_ATO_MIN / 2;\n\t\t} else if (m < icsk->icsk_ack.ato) {\n\t\t\ticsk->icsk_ack.ato = (icsk->icsk_ack.ato >> 1) + m;\n\t\t\tif (icsk->icsk_ack.ato > icsk->icsk_rto)\n\t\t\t\ticsk->icsk_ack.ato = icsk->icsk_rto;\n\t\t} else if (m > icsk->icsk_rto) {\n\t\t\t/* Too long gap. Apparently sender failed to\n\t\t\t * restart window, so that we send ACKs quickly.\n\t\t\t */\n\t\t\ttcp_incr_quickack(sk);\n\t\t\tsk_mem_reclaim(sk);\n\t\t}\n\t}\n\ticsk->icsk_ack.lrcvtime = now;\n\n\tTCP_ECN_check_ce(tp, skb);\n\n\tif (skb->len >= 128)\n\t\ttcp_grow_window(sk, skb);\n}\n\n/* Called to compute a smoothed rtt estimate. The data fed to this\n * routine either comes from timestamps, or from segments that were\n * known _not_ to have been retransmitted [see Karn/Partridge\n * Proceedings SIGCOMM 87]. The algorithm is from the SIGCOMM 88\n * piece by Van Jacobson.\n * NOTE: the next three routines used to be one big routine.\n * To save cycles in the RFC 1323 implementation it was better to break\n * it up into three procedures. -- erics\n */\nstatic void tcp_rtt_estimator(struct sock *sk, const __u32 mrtt)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tlong m = mrtt; /* RTT */\n\n\t/*\tThe following amusing code comes from Jacobson's\n\t *\tarticle in SIGCOMM '88.  Note that rtt and mdev\n\t *\tare scaled versions of rtt and mean deviation.\n\t *\tThis is designed to be as fast as possible\n\t *\tm stands for \"measurement\".\n\t *\n\t *\tOn a 1990 paper the rto value is changed to:\n\t *\tRTO = rtt + 4 * mdev\n\t *\n\t * Funny. This algorithm seems to be very broken.\n\t * These formulae increase RTO, when it should be decreased, increase\n\t * too slowly, when it should be increased quickly, decrease too quickly\n\t * etc. I guess in BSD RTO takes ONE value, so that it is absolutely\n\t * does not matter how to _calculate_ it. Seems, it was trap\n\t * that VJ failed to avoid. 8)\n\t */\n\tif (m == 0)\n\t\tm = 1;\n\tif (tp->srtt != 0) {\n\t\tm -= (tp->srtt >> 3);\t/* m is now error in rtt est */\n\t\ttp->srtt += m;\t\t/* rtt = 7/8 rtt + 1/8 new */\n\t\tif (m < 0) {\n\t\t\tm = -m;\t\t/* m is now abs(error) */\n\t\t\tm -= (tp->mdev >> 2);   /* similar update on mdev */\n\t\t\t/* This is similar to one of Eifel findings.\n\t\t\t * Eifel blocks mdev updates when rtt decreases.\n\t\t\t * This solution is a bit different: we use finer gain\n\t\t\t * for mdev in this case (alpha*beta).\n\t\t\t * Like Eifel it also prevents growth of rto,\n\t\t\t * but also it limits too fast rto decreases,\n\t\t\t * happening in pure Eifel.\n\t\t\t */\n\t\t\tif (m > 0)\n\t\t\t\tm >>= 3;\n\t\t} else {\n\t\t\tm -= (tp->mdev >> 2);   /* similar update on mdev */\n\t\t}\n\t\ttp->mdev += m;\t    \t/* mdev = 3/4 mdev + 1/4 new */\n\t\tif (tp->mdev > tp->mdev_max) {\n\t\t\ttp->mdev_max = tp->mdev;\n\t\t\tif (tp->mdev_max > tp->rttvar)\n\t\t\t\ttp->rttvar = tp->mdev_max;\n\t\t}\n\t\tif (after(tp->snd_una, tp->rtt_seq)) {\n\t\t\tif (tp->mdev_max < tp->rttvar)\n\t\t\t\ttp->rttvar -= (tp->rttvar - tp->mdev_max) >> 2;\n\t\t\ttp->rtt_seq = tp->snd_nxt;\n\t\t\ttp->mdev_max = tcp_rto_min(sk);\n\t\t}\n\t} else {\n\t\t/* no previous measure. */\n\t\ttp->srtt = m << 3;\t/* take the measured time to be rtt */\n\t\ttp->mdev = m << 1;\t/* make sure rto = 3*rtt */\n\t\ttp->mdev_max = tp->rttvar = max(tp->mdev, tcp_rto_min(sk));\n\t\ttp->rtt_seq = tp->snd_nxt;\n\t}\n}\n\n/* Calculate rto without backoff.  This is the second half of Van Jacobson's\n * routine referred to above.\n */\nstatic inline void tcp_set_rto(struct sock *sk)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\t/* Old crap is replaced with new one. 8)\n\t *\n\t * More seriously:\n\t * 1. If rtt variance happened to be less 50msec, it is hallucination.\n\t *    It cannot be less due to utterly erratic ACK generation made\n\t *    at least by solaris and freebsd. \"Erratic ACKs\" has _nothing_\n\t *    to do with delayed acks, because at cwnd>2 true delack timeout\n\t *    is invisible. Actually, Linux-2.4 also generates erratic\n\t *    ACKs in some circumstances.\n\t */\n\tinet_csk(sk)->icsk_rto = __tcp_set_rto(tp);\n\n\t/* 2. Fixups made earlier cannot be right.\n\t *    If we do not estimate RTO correctly without them,\n\t *    all the algo is pure shit and should be replaced\n\t *    with correct one. It is exactly, which we pretend to do.\n\t */\n\n\t/* NOTE: clamping at TCP_RTO_MIN is not required, current algo\n\t * guarantees that rto is higher.\n\t */\n\ttcp_bound_rto(sk);\n}\n\n/* Save metrics learned by this TCP session.\n   This function is called only, when TCP finishes successfully\n   i.e. when it enters TIME-WAIT or goes from LAST-ACK to CLOSE.\n */\nvoid tcp_update_metrics(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct dst_entry *dst = __sk_dst_get(sk);\n\n\tif (sysctl_tcp_nometrics_save)\n\t\treturn;\n\n\tdst_confirm(dst);\n\n\tif (dst && (dst->flags & DST_HOST)) {\n\t\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\t\tint m;\n\t\tunsigned long rtt;\n\n\t\tif (icsk->icsk_backoff || !tp->srtt) {\n\t\t\t/* This session failed to estimate rtt. Why?\n\t\t\t * Probably, no packets returned in time.\n\t\t\t * Reset our results.\n\t\t\t */\n\t\t\tif (!(dst_metric_locked(dst, RTAX_RTT)))\n\t\t\t\tdst_metric_set(dst, RTAX_RTT, 0);\n\t\t\treturn;\n\t\t}\n\n\t\trtt = dst_metric_rtt(dst, RTAX_RTT);\n\t\tm = rtt - tp->srtt;\n\n\t\t/* If newly calculated rtt larger than stored one,\n\t\t * store new one. Otherwise, use EWMA. Remember,\n\t\t * rtt overestimation is always better than underestimation.\n\t\t */\n\t\tif (!(dst_metric_locked(dst, RTAX_RTT))) {\n\t\t\tif (m <= 0)\n\t\t\t\tset_dst_metric_rtt(dst, RTAX_RTT, tp->srtt);\n\t\t\telse\n\t\t\t\tset_dst_metric_rtt(dst, RTAX_RTT, rtt - (m >> 3));\n\t\t}\n\n\t\tif (!(dst_metric_locked(dst, RTAX_RTTVAR))) {\n\t\t\tunsigned long var;\n\t\t\tif (m < 0)\n\t\t\t\tm = -m;\n\n\t\t\t/* Scale deviation to rttvar fixed point */\n\t\t\tm >>= 1;\n\t\t\tif (m < tp->mdev)\n\t\t\t\tm = tp->mdev;\n\n\t\t\tvar = dst_metric_rtt(dst, RTAX_RTTVAR);\n\t\t\tif (m >= var)\n\t\t\t\tvar = m;\n\t\t\telse\n\t\t\t\tvar -= (var - m) >> 2;\n\n\t\t\tset_dst_metric_rtt(dst, RTAX_RTTVAR, var);\n\t\t}\n\n\t\tif (tcp_in_initial_slowstart(tp)) {\n\t\t\t/* Slow start still did not finish. */\n\t\t\tif (dst_metric(dst, RTAX_SSTHRESH) &&\n\t\t\t    !dst_metric_locked(dst, RTAX_SSTHRESH) &&\n\t\t\t    (tp->snd_cwnd >> 1) > dst_metric(dst, RTAX_SSTHRESH))\n\t\t\t\tdst_metric_set(dst, RTAX_SSTHRESH, tp->snd_cwnd >> 1);\n\t\t\tif (!dst_metric_locked(dst, RTAX_CWND) &&\n\t\t\t    tp->snd_cwnd > dst_metric(dst, RTAX_CWND))\n\t\t\t\tdst_metric_set(dst, RTAX_CWND, tp->snd_cwnd);\n\t\t} else if (tp->snd_cwnd > tp->snd_ssthresh &&\n\t\t\t   icsk->icsk_ca_state == TCP_CA_Open) {\n\t\t\t/* Cong. avoidance phase, cwnd is reliable. */\n\t\t\tif (!dst_metric_locked(dst, RTAX_SSTHRESH))\n\t\t\t\tdst_metric_set(dst, RTAX_SSTHRESH,\n\t\t\t\t\t       max(tp->snd_cwnd >> 1, tp->snd_ssthresh));\n\t\t\tif (!dst_metric_locked(dst, RTAX_CWND))\n\t\t\t\tdst_metric_set(dst, RTAX_CWND,\n\t\t\t\t\t       (dst_metric(dst, RTAX_CWND) +\n\t\t\t\t\t\ttp->snd_cwnd) >> 1);\n\t\t} else {\n\t\t\t/* Else slow start did not finish, cwnd is non-sense,\n\t\t\t   ssthresh may be also invalid.\n\t\t\t */\n\t\t\tif (!dst_metric_locked(dst, RTAX_CWND))\n\t\t\t\tdst_metric_set(dst, RTAX_CWND,\n\t\t\t\t\t       (dst_metric(dst, RTAX_CWND) +\n\t\t\t\t\t\ttp->snd_ssthresh) >> 1);\n\t\t\tif (dst_metric(dst, RTAX_SSTHRESH) &&\n\t\t\t    !dst_metric_locked(dst, RTAX_SSTHRESH) &&\n\t\t\t    tp->snd_ssthresh > dst_metric(dst, RTAX_SSTHRESH))\n\t\t\t\tdst_metric_set(dst, RTAX_SSTHRESH, tp->snd_ssthresh);\n\t\t}\n\n\t\tif (!dst_metric_locked(dst, RTAX_REORDERING)) {\n\t\t\tif (dst_metric(dst, RTAX_REORDERING) < tp->reordering &&\n\t\t\t    tp->reordering != sysctl_tcp_reordering)\n\t\t\t\tdst_metric_set(dst, RTAX_REORDERING, tp->reordering);\n\t\t}\n\t}\n}\n\n__u32 tcp_init_cwnd(const struct tcp_sock *tp, const struct dst_entry *dst)\n{\n\t__u32 cwnd = (dst ? dst_metric(dst, RTAX_INITCWND) : 0);\n\n\tif (!cwnd)\n\t\tcwnd = TCP_INIT_CWND;\n\treturn min_t(__u32, cwnd, tp->snd_cwnd_clamp);\n}\n\n/* Set slow start threshold and cwnd not falling to slow start */\nvoid tcp_enter_cwr(struct sock *sk, const int set_ssthresh)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\n\ttp->prior_ssthresh = 0;\n\ttp->bytes_acked = 0;\n\tif (icsk->icsk_ca_state < TCP_CA_CWR) {\n\t\ttp->undo_marker = 0;\n\t\tif (set_ssthresh)\n\t\t\ttp->snd_ssthresh = icsk->icsk_ca_ops->ssthresh(sk);\n\t\ttp->snd_cwnd = min(tp->snd_cwnd,\n\t\t\t\t   tcp_packets_in_flight(tp) + 1U);\n\t\ttp->snd_cwnd_cnt = 0;\n\t\ttp->high_seq = tp->snd_nxt;\n\t\ttp->snd_cwnd_stamp = tcp_time_stamp;\n\t\tTCP_ECN_queue_cwr(tp);\n\n\t\ttcp_set_ca_state(sk, TCP_CA_CWR);\n\t}\n}\n\n/*\n * Packet counting of FACK is based on in-order assumptions, therefore TCP\n * disables it when reordering is detected\n */\nstatic void tcp_disable_fack(struct tcp_sock *tp)\n{\n\t/* RFC3517 uses different metric in lost marker => reset on change */\n\tif (tcp_is_fack(tp))\n\t\ttp->lost_skb_hint = NULL;\n\ttp->rx_opt.sack_ok &= ~2;\n}\n\n/* Take a notice that peer is sending D-SACKs */\nstatic void tcp_dsack_seen(struct tcp_sock *tp)\n{\n\ttp->rx_opt.sack_ok |= 4;\n}\n\n/* Initialize metrics on socket. */\n\nstatic void tcp_init_metrics(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct dst_entry *dst = __sk_dst_get(sk);\n\n\tif (dst == NULL)\n\t\tgoto reset;\n\n\tdst_confirm(dst);\n\n\tif (dst_metric_locked(dst, RTAX_CWND))\n\t\ttp->snd_cwnd_clamp = dst_metric(dst, RTAX_CWND);\n\tif (dst_metric(dst, RTAX_SSTHRESH)) {\n\t\ttp->snd_ssthresh = dst_metric(dst, RTAX_SSTHRESH);\n\t\tif (tp->snd_ssthresh > tp->snd_cwnd_clamp)\n\t\t\ttp->snd_ssthresh = tp->snd_cwnd_clamp;\n\t} else {\n\t\t/* ssthresh may have been reduced unnecessarily during.\n\t\t * 3WHS. Restore it back to its initial default.\n\t\t */\n\t\ttp->snd_ssthresh = TCP_INFINITE_SSTHRESH;\n\t}\n\tif (dst_metric(dst, RTAX_REORDERING) &&\n\t    tp->reordering != dst_metric(dst, RTAX_REORDERING)) {\n\t\ttcp_disable_fack(tp);\n\t\ttp->reordering = dst_metric(dst, RTAX_REORDERING);\n\t}\n\n\tif (dst_metric(dst, RTAX_RTT) == 0 || tp->srtt == 0)\n\t\tgoto reset;\n\n\t/* Initial rtt is determined from SYN,SYN-ACK.\n\t * The segment is small and rtt may appear much\n\t * less than real one. Use per-dst memory\n\t * to make it more realistic.\n\t *\n\t * A bit of theory. RTT is time passed after \"normal\" sized packet\n\t * is sent until it is ACKed. In normal circumstances sending small\n\t * packets force peer to delay ACKs and calculation is correct too.\n\t * The algorithm is adaptive and, provided we follow specs, it\n\t * NEVER underestimate RTT. BUT! If peer tries to make some clever\n\t * tricks sort of \"quick acks\" for time long enough to decrease RTT\n\t * to low value, and then abruptly stops to do it and starts to delay\n\t * ACKs, wait for troubles.\n\t */\n\tif (dst_metric_rtt(dst, RTAX_RTT) > tp->srtt) {\n\t\ttp->srtt = dst_metric_rtt(dst, RTAX_RTT);\n\t\ttp->rtt_seq = tp->snd_nxt;\n\t}\n\tif (dst_metric_rtt(dst, RTAX_RTTVAR) > tp->mdev) {\n\t\ttp->mdev = dst_metric_rtt(dst, RTAX_RTTVAR);\n\t\ttp->mdev_max = tp->rttvar = max(tp->mdev, tcp_rto_min(sk));\n\t}\n\ttcp_set_rto(sk);\nreset:\n\tif (tp->srtt == 0) {\n\t\t/* RFC2988bis: We've failed to get a valid RTT sample from\n\t\t * 3WHS. This is most likely due to retransmission,\n\t\t * including spurious one. Reset the RTO back to 3secs\n\t\t * from the more aggressive 1sec to avoid more spurious\n\t\t * retransmission.\n\t\t */\n\t\ttp->mdev = tp->mdev_max = tp->rttvar = TCP_TIMEOUT_FALLBACK;\n\t\tinet_csk(sk)->icsk_rto = TCP_TIMEOUT_FALLBACK;\n\t}\n\t/* Cut cwnd down to 1 per RFC5681 if SYN or SYN-ACK has been\n\t * retransmitted. In light of RFC2988bis' more aggressive 1sec\n\t * initRTO, we only reset cwnd when more than 1 SYN/SYN-ACK\n\t * retransmission has occurred.\n\t */\n\tif (tp->total_retrans > 1)\n\t\ttp->snd_cwnd = 1;\n\telse\n\t\ttp->snd_cwnd = tcp_init_cwnd(tp, dst);\n\ttp->snd_cwnd_stamp = tcp_time_stamp;\n}\n\nstatic void tcp_update_reordering(struct sock *sk, const int metric,\n\t\t\t\t  const int ts)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tif (metric > tp->reordering) {\n\t\tint mib_idx;\n\n\t\ttp->reordering = min(TCP_MAX_REORDERING, metric);\n\n\t\t/* This exciting event is worth to be remembered. 8) */\n\t\tif (ts)\n\t\t\tmib_idx = LINUX_MIB_TCPTSREORDER;\n\t\telse if (tcp_is_reno(tp))\n\t\t\tmib_idx = LINUX_MIB_TCPRENOREORDER;\n\t\telse if (tcp_is_fack(tp))\n\t\t\tmib_idx = LINUX_MIB_TCPFACKREORDER;\n\t\telse\n\t\t\tmib_idx = LINUX_MIB_TCPSACKREORDER;\n\n\t\tNET_INC_STATS_BH(sock_net(sk), mib_idx);\n#if FASTRETRANS_DEBUG > 1\n\t\tprintk(KERN_DEBUG \"Disorder%d %d %u f%u s%u rr%d\\n\",\n\t\t       tp->rx_opt.sack_ok, inet_csk(sk)->icsk_ca_state,\n\t\t       tp->reordering,\n\t\t       tp->fackets_out,\n\t\t       tp->sacked_out,\n\t\t       tp->undo_marker ? tp->undo_retrans : 0);\n#endif\n\t\ttcp_disable_fack(tp);\n\t}\n}\n\n/* This must be called before lost_out is incremented */\nstatic void tcp_verify_retransmit_hint(struct tcp_sock *tp, struct sk_buff *skb)\n{\n\tif ((tp->retransmit_skb_hint == NULL) ||\n\t    before(TCP_SKB_CB(skb)->seq,\n\t\t   TCP_SKB_CB(tp->retransmit_skb_hint)->seq))\n\t\ttp->retransmit_skb_hint = skb;\n\n\tif (!tp->lost_out ||\n\t    after(TCP_SKB_CB(skb)->end_seq, tp->retransmit_high))\n\t\ttp->retransmit_high = TCP_SKB_CB(skb)->end_seq;\n}\n\nstatic void tcp_skb_mark_lost(struct tcp_sock *tp, struct sk_buff *skb)\n{\n\tif (!(TCP_SKB_CB(skb)->sacked & (TCPCB_LOST|TCPCB_SACKED_ACKED))) {\n\t\ttcp_verify_retransmit_hint(tp, skb);\n\n\t\ttp->lost_out += tcp_skb_pcount(skb);\n\t\tTCP_SKB_CB(skb)->sacked |= TCPCB_LOST;\n\t}\n}\n\nstatic void tcp_skb_mark_lost_uncond_verify(struct tcp_sock *tp,\n\t\t\t\t\t    struct sk_buff *skb)\n{\n\ttcp_verify_retransmit_hint(tp, skb);\n\n\tif (!(TCP_SKB_CB(skb)->sacked & (TCPCB_LOST|TCPCB_SACKED_ACKED))) {\n\t\ttp->lost_out += tcp_skb_pcount(skb);\n\t\tTCP_SKB_CB(skb)->sacked |= TCPCB_LOST;\n\t}\n}\n\n/* This procedure tags the retransmission queue when SACKs arrive.\n *\n * We have three tag bits: SACKED(S), RETRANS(R) and LOST(L).\n * Packets in queue with these bits set are counted in variables\n * sacked_out, retrans_out and lost_out, correspondingly.\n *\n * Valid combinations are:\n * Tag  InFlight\tDescription\n * 0\t1\t\t- orig segment is in flight.\n * S\t0\t\t- nothing flies, orig reached receiver.\n * L\t0\t\t- nothing flies, orig lost by net.\n * R\t2\t\t- both orig and retransmit are in flight.\n * L|R\t1\t\t- orig is lost, retransmit is in flight.\n * S|R  1\t\t- orig reached receiver, retrans is still in flight.\n * (L|S|R is logically valid, it could occur when L|R is sacked,\n *  but it is equivalent to plain S and code short-curcuits it to S.\n *  L|S is logically invalid, it would mean -1 packet in flight 8))\n *\n * These 6 states form finite state machine, controlled by the following events:\n * 1. New ACK (+SACK) arrives. (tcp_sacktag_write_queue())\n * 2. Retransmission. (tcp_retransmit_skb(), tcp_xmit_retransmit_queue())\n * 3. Loss detection event of one of three flavors:\n *\tA. Scoreboard estimator decided the packet is lost.\n *\t   A'. Reno \"three dupacks\" marks head of queue lost.\n *\t   A''. Its FACK modfication, head until snd.fack is lost.\n *\tB. SACK arrives sacking data transmitted after never retransmitted\n *\t   hole was sent out.\n *\tC. SACK arrives sacking SND.NXT at the moment, when the\n *\t   segment was retransmitted.\n * 4. D-SACK added new rule: D-SACK changes any tag to S.\n *\n * It is pleasant to note, that state diagram turns out to be commutative,\n * so that we are allowed not to be bothered by order of our actions,\n * when multiple events arrive simultaneously. (see the function below).\n *\n * Reordering detection.\n * --------------------\n * Reordering metric is maximal distance, which a packet can be displaced\n * in packet stream. With SACKs we can estimate it:\n *\n * 1. SACK fills old hole and the corresponding segment was not\n *    ever retransmitted -> reordering. Alas, we cannot use it\n *    when segment was retransmitted.\n * 2. The last flaw is solved with D-SACK. D-SACK arrives\n *    for retransmitted and already SACKed segment -> reordering..\n * Both of these heuristics are not used in Loss state, when we cannot\n * account for retransmits accurately.\n *\n * SACK block validation.\n * ----------------------\n *\n * SACK block range validation checks that the received SACK block fits to\n * the expected sequence limits, i.e., it is between SND.UNA and SND.NXT.\n * Note that SND.UNA is not included to the range though being valid because\n * it means that the receiver is rather inconsistent with itself reporting\n * SACK reneging when it should advance SND.UNA. Such SACK block this is\n * perfectly valid, however, in light of RFC2018 which explicitly states\n * that \"SACK block MUST reflect the newest segment.  Even if the newest\n * segment is going to be discarded ...\", not that it looks very clever\n * in case of head skb. Due to potentional receiver driven attacks, we\n * choose to avoid immediate execution of a walk in write queue due to\n * reneging and defer head skb's loss recovery to standard loss recovery\n * procedure that will eventually trigger (nothing forbids us doing this).\n *\n * Implements also blockage to start_seq wrap-around. Problem lies in the\n * fact that though start_seq (s) is before end_seq (i.e., not reversed),\n * there's no guarantee that it will be before snd_nxt (n). The problem\n * happens when start_seq resides between end_seq wrap (e_w) and snd_nxt\n * wrap (s_w):\n *\n *         <- outs wnd ->                          <- wrapzone ->\n *         u     e      n                         u_w   e_w  s n_w\n *         |     |      |                          |     |   |  |\n * |<------------+------+----- TCP seqno space --------------+---------->|\n * ...-- <2^31 ->|                                           |<--------...\n * ...---- >2^31 ------>|                                    |<--------...\n *\n * Current code wouldn't be vulnerable but it's better still to discard such\n * crazy SACK blocks. Doing this check for start_seq alone closes somewhat\n * similar case (end_seq after snd_nxt wrap) as earlier reversed check in\n * snd_nxt wrap -> snd_una region will then become \"well defined\", i.e.,\n * equal to the ideal case (infinite seqno space without wrap caused issues).\n *\n * With D-SACK the lower bound is extended to cover sequence space below\n * SND.UNA down to undo_marker, which is the last point of interest. Yet\n * again, D-SACK block must not to go across snd_una (for the same reason as\n * for the normal SACK blocks, explained above). But there all simplicity\n * ends, TCP might receive valid D-SACKs below that. As long as they reside\n * fully below undo_marker they do not affect behavior in anyway and can\n * therefore be safely ignored. In rare cases (which are more or less\n * theoretical ones), the D-SACK will nicely cross that boundary due to skb\n * fragmentation and packet reordering past skb's retransmission. To consider\n * them correctly, the acceptable range must be extended even more though\n * the exact amount is rather hard to quantify. However, tp->max_window can\n * be used as an exaggerated estimate.\n */\nstatic int tcp_is_sackblock_valid(struct tcp_sock *tp, int is_dsack,\n\t\t\t\t  u32 start_seq, u32 end_seq)\n{\n\t/* Too far in future, or reversed (interpretation is ambiguous) */\n\tif (after(end_seq, tp->snd_nxt) || !before(start_seq, end_seq))\n\t\treturn 0;\n\n\t/* Nasty start_seq wrap-around check (see comments above) */\n\tif (!before(start_seq, tp->snd_nxt))\n\t\treturn 0;\n\n\t/* In outstanding window? ...This is valid exit for D-SACKs too.\n\t * start_seq == snd_una is non-sensical (see comments above)\n\t */\n\tif (after(start_seq, tp->snd_una))\n\t\treturn 1;\n\n\tif (!is_dsack || !tp->undo_marker)\n\t\treturn 0;\n\n\t/* ...Then it's D-SACK, and must reside below snd_una completely */\n\tif (after(end_seq, tp->snd_una))\n\t\treturn 0;\n\n\tif (!before(start_seq, tp->undo_marker))\n\t\treturn 1;\n\n\t/* Too old */\n\tif (!after(end_seq, tp->undo_marker))\n\t\treturn 0;\n\n\t/* Undo_marker boundary crossing (overestimates a lot). Known already:\n\t *   start_seq < undo_marker and end_seq >= undo_marker.\n\t */\n\treturn !before(start_seq, end_seq - tp->max_window);\n}\n\n/* Check for lost retransmit. This superb idea is borrowed from \"ratehalving\".\n * Event \"C\". Later note: FACK people cheated me again 8), we have to account\n * for reordering! Ugly, but should help.\n *\n * Search retransmitted skbs from write_queue that were sent when snd_nxt was\n * less than what is now known to be received by the other end (derived from\n * highest SACK block). Also calculate the lowest snd_nxt among the remaining\n * retransmitted skbs to avoid some costly processing per ACKs.\n */\nstatic void tcp_mark_lost_retrans(struct sock *sk)\n{\n\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *skb;\n\tint cnt = 0;\n\tu32 new_low_seq = tp->snd_nxt;\n\tu32 received_upto = tcp_highest_sack_seq(tp);\n\n\tif (!tcp_is_fack(tp) || !tp->retrans_out ||\n\t    !after(received_upto, tp->lost_retrans_low) ||\n\t    icsk->icsk_ca_state != TCP_CA_Recovery)\n\t\treturn;\n\n\ttcp_for_write_queue(skb, sk) {\n\t\tu32 ack_seq = TCP_SKB_CB(skb)->ack_seq;\n\n\t\tif (skb == tcp_send_head(sk))\n\t\t\tbreak;\n\t\tif (cnt == tp->retrans_out)\n\t\t\tbreak;\n\t\tif (!after(TCP_SKB_CB(skb)->end_seq, tp->snd_una))\n\t\t\tcontinue;\n\n\t\tif (!(TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_RETRANS))\n\t\t\tcontinue;\n\n\t\t/* TODO: We would like to get rid of tcp_is_fack(tp) only\n\t\t * constraint here (see above) but figuring out that at\n\t\t * least tp->reordering SACK blocks reside between ack_seq\n\t\t * and received_upto is not easy task to do cheaply with\n\t\t * the available datastructures.\n\t\t *\n\t\t * Whether FACK should check here for tp->reordering segs\n\t\t * in-between one could argue for either way (it would be\n\t\t * rather simple to implement as we could count fack_count\n\t\t * during the walk and do tp->fackets_out - fack_count).\n\t\t */\n\t\tif (after(received_upto, ack_seq)) {\n\t\t\tTCP_SKB_CB(skb)->sacked &= ~TCPCB_SACKED_RETRANS;\n\t\t\ttp->retrans_out -= tcp_skb_pcount(skb);\n\n\t\t\ttcp_skb_mark_lost_uncond_verify(tp, skb);\n\t\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPLOSTRETRANSMIT);\n\t\t} else {\n\t\t\tif (before(ack_seq, new_low_seq))\n\t\t\t\tnew_low_seq = ack_seq;\n\t\t\tcnt += tcp_skb_pcount(skb);\n\t\t}\n\t}\n\n\tif (tp->retrans_out)\n\t\ttp->lost_retrans_low = new_low_seq;\n}\n\nstatic int tcp_check_dsack(struct sock *sk, const struct sk_buff *ack_skb,\n\t\t\t   struct tcp_sack_block_wire *sp, int num_sacks,\n\t\t\t   u32 prior_snd_una)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tu32 start_seq_0 = get_unaligned_be32(&sp[0].start_seq);\n\tu32 end_seq_0 = get_unaligned_be32(&sp[0].end_seq);\n\tint dup_sack = 0;\n\n\tif (before(start_seq_0, TCP_SKB_CB(ack_skb)->ack_seq)) {\n\t\tdup_sack = 1;\n\t\ttcp_dsack_seen(tp);\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPDSACKRECV);\n\t} else if (num_sacks > 1) {\n\t\tu32 end_seq_1 = get_unaligned_be32(&sp[1].end_seq);\n\t\tu32 start_seq_1 = get_unaligned_be32(&sp[1].start_seq);\n\n\t\tif (!after(end_seq_0, end_seq_1) &&\n\t\t    !before(start_seq_0, start_seq_1)) {\n\t\t\tdup_sack = 1;\n\t\t\ttcp_dsack_seen(tp);\n\t\t\tNET_INC_STATS_BH(sock_net(sk),\n\t\t\t\t\tLINUX_MIB_TCPDSACKOFORECV);\n\t\t}\n\t}\n\n\t/* D-SACK for already forgotten data... Do dumb counting. */\n\tif (dup_sack && tp->undo_marker && tp->undo_retrans &&\n\t    !after(end_seq_0, prior_snd_una) &&\n\t    after(end_seq_0, tp->undo_marker))\n\t\ttp->undo_retrans--;\n\n\treturn dup_sack;\n}\n\nstruct tcp_sacktag_state {\n\tint reord;\n\tint fack_count;\n\tint flag;\n};\n\n/* Check if skb is fully within the SACK block. In presence of GSO skbs,\n * the incoming SACK may not exactly match but we can find smaller MSS\n * aligned portion of it that matches. Therefore we might need to fragment\n * which may fail and creates some hassle (caller must handle error case\n * returns).\n *\n * FIXME: this could be merged to shift decision code\n */\nstatic int tcp_match_skb_to_sack(struct sock *sk, struct sk_buff *skb,\n\t\t\t\t u32 start_seq, u32 end_seq)\n{\n\tint in_sack, err;\n\tunsigned int pkt_len;\n\tunsigned int mss;\n\n\tin_sack = !after(start_seq, TCP_SKB_CB(skb)->seq) &&\n\t\t  !before(end_seq, TCP_SKB_CB(skb)->end_seq);\n\n\tif (tcp_skb_pcount(skb) > 1 && !in_sack &&\n\t    after(TCP_SKB_CB(skb)->end_seq, start_seq)) {\n\t\tmss = tcp_skb_mss(skb);\n\t\tin_sack = !after(start_seq, TCP_SKB_CB(skb)->seq);\n\n\t\tif (!in_sack) {\n\t\t\tpkt_len = start_seq - TCP_SKB_CB(skb)->seq;\n\t\t\tif (pkt_len < mss)\n\t\t\t\tpkt_len = mss;\n\t\t} else {\n\t\t\tpkt_len = end_seq - TCP_SKB_CB(skb)->seq;\n\t\t\tif (pkt_len < mss)\n\t\t\t\treturn -EINVAL;\n\t\t}\n\n\t\t/* Round if necessary so that SACKs cover only full MSSes\n\t\t * and/or the remaining small portion (if present)\n\t\t */\n\t\tif (pkt_len > mss) {\n\t\t\tunsigned int new_len = (pkt_len / mss) * mss;\n\t\t\tif (!in_sack && new_len < pkt_len) {\n\t\t\t\tnew_len += mss;\n\t\t\t\tif (new_len > skb->len)\n\t\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tpkt_len = new_len;\n\t\t}\n\t\terr = tcp_fragment(sk, skb, pkt_len, mss);\n\t\tif (err < 0)\n\t\t\treturn err;\n\t}\n\n\treturn in_sack;\n}\n\nstatic u8 tcp_sacktag_one(const struct sk_buff *skb, struct sock *sk,\n\t\t\t  struct tcp_sacktag_state *state,\n\t\t\t  int dup_sack, int pcount)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tu8 sacked = TCP_SKB_CB(skb)->sacked;\n\tint fack_count = state->fack_count;\n\n\t/* Account D-SACK for retransmitted packet. */\n\tif (dup_sack && (sacked & TCPCB_RETRANS)) {\n\t\tif (tp->undo_marker && tp->undo_retrans &&\n\t\t    after(TCP_SKB_CB(skb)->end_seq, tp->undo_marker))\n\t\t\ttp->undo_retrans--;\n\t\tif (sacked & TCPCB_SACKED_ACKED)\n\t\t\tstate->reord = min(fack_count, state->reord);\n\t}\n\n\t/* Nothing to do; acked frame is about to be dropped (was ACKed). */\n\tif (!after(TCP_SKB_CB(skb)->end_seq, tp->snd_una))\n\t\treturn sacked;\n\n\tif (!(sacked & TCPCB_SACKED_ACKED)) {\n\t\tif (sacked & TCPCB_SACKED_RETRANS) {\n\t\t\t/* If the segment is not tagged as lost,\n\t\t\t * we do not clear RETRANS, believing\n\t\t\t * that retransmission is still in flight.\n\t\t\t */\n\t\t\tif (sacked & TCPCB_LOST) {\n\t\t\t\tsacked &= ~(TCPCB_LOST|TCPCB_SACKED_RETRANS);\n\t\t\t\ttp->lost_out -= pcount;\n\t\t\t\ttp->retrans_out -= pcount;\n\t\t\t}\n\t\t} else {\n\t\t\tif (!(sacked & TCPCB_RETRANS)) {\n\t\t\t\t/* New sack for not retransmitted frame,\n\t\t\t\t * which was in hole. It is reordering.\n\t\t\t\t */\n\t\t\t\tif (before(TCP_SKB_CB(skb)->seq,\n\t\t\t\t\t   tcp_highest_sack_seq(tp)))\n\t\t\t\t\tstate->reord = min(fack_count,\n\t\t\t\t\t\t\t   state->reord);\n\n\t\t\t\t/* SACK enhanced F-RTO (RFC4138; Appendix B) */\n\t\t\t\tif (!after(TCP_SKB_CB(skb)->end_seq, tp->frto_highmark))\n\t\t\t\t\tstate->flag |= FLAG_ONLY_ORIG_SACKED;\n\t\t\t}\n\n\t\t\tif (sacked & TCPCB_LOST) {\n\t\t\t\tsacked &= ~TCPCB_LOST;\n\t\t\t\ttp->lost_out -= pcount;\n\t\t\t}\n\t\t}\n\n\t\tsacked |= TCPCB_SACKED_ACKED;\n\t\tstate->flag |= FLAG_DATA_SACKED;\n\t\ttp->sacked_out += pcount;\n\n\t\tfack_count += pcount;\n\n\t\t/* Lost marker hint past SACKed? Tweak RFC3517 cnt */\n\t\tif (!tcp_is_fack(tp) && (tp->lost_skb_hint != NULL) &&\n\t\t    before(TCP_SKB_CB(skb)->seq,\n\t\t\t   TCP_SKB_CB(tp->lost_skb_hint)->seq))\n\t\t\ttp->lost_cnt_hint += pcount;\n\n\t\tif (fack_count > tp->fackets_out)\n\t\t\ttp->fackets_out = fack_count;\n\t}\n\n\t/* D-SACK. We can detect redundant retransmission in S|R and plain R\n\t * frames and clear it. undo_retrans is decreased above, L|R frames\n\t * are accounted above as well.\n\t */\n\tif (dup_sack && (sacked & TCPCB_SACKED_RETRANS)) {\n\t\tsacked &= ~TCPCB_SACKED_RETRANS;\n\t\ttp->retrans_out -= pcount;\n\t}\n\n\treturn sacked;\n}\n\nstatic int tcp_shifted_skb(struct sock *sk, struct sk_buff *skb,\n\t\t\t   struct tcp_sacktag_state *state,\n\t\t\t   unsigned int pcount, int shifted, int mss,\n\t\t\t   int dup_sack)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *prev = tcp_write_queue_prev(sk, skb);\n\n\tBUG_ON(!pcount);\n\n\tif (skb == tp->lost_skb_hint)\n\t\ttp->lost_cnt_hint += pcount;\n\n\tTCP_SKB_CB(prev)->end_seq += shifted;\n\tTCP_SKB_CB(skb)->seq += shifted;\n\n\tskb_shinfo(prev)->gso_segs += pcount;\n\tBUG_ON(skb_shinfo(skb)->gso_segs < pcount);\n\tskb_shinfo(skb)->gso_segs -= pcount;\n\n\t/* When we're adding to gso_segs == 1, gso_size will be zero,\n\t * in theory this shouldn't be necessary but as long as DSACK\n\t * code can come after this skb later on it's better to keep\n\t * setting gso_size to something.\n\t */\n\tif (!skb_shinfo(prev)->gso_size) {\n\t\tskb_shinfo(prev)->gso_size = mss;\n\t\tskb_shinfo(prev)->gso_type = sk->sk_gso_type;\n\t}\n\n\t/* CHECKME: To clear or not to clear? Mimics normal skb currently */\n\tif (skb_shinfo(skb)->gso_segs <= 1) {\n\t\tskb_shinfo(skb)->gso_size = 0;\n\t\tskb_shinfo(skb)->gso_type = 0;\n\t}\n\n\t/* We discard results */\n\ttcp_sacktag_one(skb, sk, state, dup_sack, pcount);\n\n\t/* Difference in this won't matter, both ACKed by the same cumul. ACK */\n\tTCP_SKB_CB(prev)->sacked |= (TCP_SKB_CB(skb)->sacked & TCPCB_EVER_RETRANS);\n\n\tif (skb->len > 0) {\n\t\tBUG_ON(!tcp_skb_pcount(skb));\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_SACKSHIFTED);\n\t\treturn 0;\n\t}\n\n\t/* Whole SKB was eaten :-) */\n\n\tif (skb == tp->retransmit_skb_hint)\n\t\ttp->retransmit_skb_hint = prev;\n\tif (skb == tp->scoreboard_skb_hint)\n\t\ttp->scoreboard_skb_hint = prev;\n\tif (skb == tp->lost_skb_hint) {\n\t\ttp->lost_skb_hint = prev;\n\t\ttp->lost_cnt_hint -= tcp_skb_pcount(prev);\n\t}\n\n\tTCP_SKB_CB(skb)->tcp_flags |= TCP_SKB_CB(prev)->tcp_flags;\n\tif (skb == tcp_highest_sack(sk))\n\t\ttcp_advance_highest_sack(sk, skb);\n\n\ttcp_unlink_write_queue(skb, sk);\n\tsk_wmem_free_skb(sk, skb);\n\n\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_SACKMERGED);\n\n\treturn 1;\n}\n\n/* I wish gso_size would have a bit more sane initialization than\n * something-or-zero which complicates things\n */\nstatic int tcp_skb_seglen(const struct sk_buff *skb)\n{\n\treturn tcp_skb_pcount(skb) == 1 ? skb->len : tcp_skb_mss(skb);\n}\n\n/* Shifting pages past head area doesn't work */\nstatic int skb_can_shift(const struct sk_buff *skb)\n{\n\treturn !skb_headlen(skb) && skb_is_nonlinear(skb);\n}\n\n/* Try collapsing SACK blocks spanning across multiple skbs to a single\n * skb.\n */\nstatic struct sk_buff *tcp_shift_skb_data(struct sock *sk, struct sk_buff *skb,\n\t\t\t\t\t  struct tcp_sacktag_state *state,\n\t\t\t\t\t  u32 start_seq, u32 end_seq,\n\t\t\t\t\t  int dup_sack)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *prev;\n\tint mss;\n\tint pcount = 0;\n\tint len;\n\tint in_sack;\n\n\tif (!sk_can_gso(sk))\n\t\tgoto fallback;\n\n\t/* Normally R but no L won't result in plain S */\n\tif (!dup_sack &&\n\t    (TCP_SKB_CB(skb)->sacked & (TCPCB_LOST|TCPCB_SACKED_RETRANS)) == TCPCB_SACKED_RETRANS)\n\t\tgoto fallback;\n\tif (!skb_can_shift(skb))\n\t\tgoto fallback;\n\t/* This frame is about to be dropped (was ACKed). */\n\tif (!after(TCP_SKB_CB(skb)->end_seq, tp->snd_una))\n\t\tgoto fallback;\n\n\t/* Can only happen with delayed DSACK + discard craziness */\n\tif (unlikely(skb == tcp_write_queue_head(sk)))\n\t\tgoto fallback;\n\tprev = tcp_write_queue_prev(sk, skb);\n\n\tif ((TCP_SKB_CB(prev)->sacked & TCPCB_TAGBITS) != TCPCB_SACKED_ACKED)\n\t\tgoto fallback;\n\n\tin_sack = !after(start_seq, TCP_SKB_CB(skb)->seq) &&\n\t\t  !before(end_seq, TCP_SKB_CB(skb)->end_seq);\n\n\tif (in_sack) {\n\t\tlen = skb->len;\n\t\tpcount = tcp_skb_pcount(skb);\n\t\tmss = tcp_skb_seglen(skb);\n\n\t\t/* TODO: Fix DSACKs to not fragment already SACKed and we can\n\t\t * drop this restriction as unnecessary\n\t\t */\n\t\tif (mss != tcp_skb_seglen(prev))\n\t\t\tgoto fallback;\n\t} else {\n\t\tif (!after(TCP_SKB_CB(skb)->end_seq, start_seq))\n\t\t\tgoto noop;\n\t\t/* CHECKME: This is non-MSS split case only?, this will\n\t\t * cause skipped skbs due to advancing loop btw, original\n\t\t * has that feature too\n\t\t */\n\t\tif (tcp_skb_pcount(skb) <= 1)\n\t\t\tgoto noop;\n\n\t\tin_sack = !after(start_seq, TCP_SKB_CB(skb)->seq);\n\t\tif (!in_sack) {\n\t\t\t/* TODO: head merge to next could be attempted here\n\t\t\t * if (!after(TCP_SKB_CB(skb)->end_seq, end_seq)),\n\t\t\t * though it might not be worth of the additional hassle\n\t\t\t *\n\t\t\t * ...we can probably just fallback to what was done\n\t\t\t * previously. We could try merging non-SACKed ones\n\t\t\t * as well but it probably isn't going to buy off\n\t\t\t * because later SACKs might again split them, and\n\t\t\t * it would make skb timestamp tracking considerably\n\t\t\t * harder problem.\n\t\t\t */\n\t\t\tgoto fallback;\n\t\t}\n\n\t\tlen = end_seq - TCP_SKB_CB(skb)->seq;\n\t\tBUG_ON(len < 0);\n\t\tBUG_ON(len > skb->len);\n\n\t\t/* MSS boundaries should be honoured or else pcount will\n\t\t * severely break even though it makes things bit trickier.\n\t\t * Optimize common case to avoid most of the divides\n\t\t */\n\t\tmss = tcp_skb_mss(skb);\n\n\t\t/* TODO: Fix DSACKs to not fragment already SACKed and we can\n\t\t * drop this restriction as unnecessary\n\t\t */\n\t\tif (mss != tcp_skb_seglen(prev))\n\t\t\tgoto fallback;\n\n\t\tif (len == mss) {\n\t\t\tpcount = 1;\n\t\t} else if (len < mss) {\n\t\t\tgoto noop;\n\t\t} else {\n\t\t\tpcount = len / mss;\n\t\t\tlen = pcount * mss;\n\t\t}\n\t}\n\n\tif (!skb_shift(prev, skb, len))\n\t\tgoto fallback;\n\tif (!tcp_shifted_skb(sk, skb, state, pcount, len, mss, dup_sack))\n\t\tgoto out;\n\n\t/* Hole filled allows collapsing with the next as well, this is very\n\t * useful when hole on every nth skb pattern happens\n\t */\n\tif (prev == tcp_write_queue_tail(sk))\n\t\tgoto out;\n\tskb = tcp_write_queue_next(sk, prev);\n\n\tif (!skb_can_shift(skb) ||\n\t    (skb == tcp_send_head(sk)) ||\n\t    ((TCP_SKB_CB(skb)->sacked & TCPCB_TAGBITS) != TCPCB_SACKED_ACKED) ||\n\t    (mss != tcp_skb_seglen(skb)))\n\t\tgoto out;\n\n\tlen = skb->len;\n\tif (skb_shift(prev, skb, len)) {\n\t\tpcount += tcp_skb_pcount(skb);\n\t\ttcp_shifted_skb(sk, skb, state, tcp_skb_pcount(skb), len, mss, 0);\n\t}\n\nout:\n\tstate->fack_count += pcount;\n\treturn prev;\n\nnoop:\n\treturn skb;\n\nfallback:\n\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_SACKSHIFTFALLBACK);\n\treturn NULL;\n}\n\nstatic struct sk_buff *tcp_sacktag_walk(struct sk_buff *skb, struct sock *sk,\n\t\t\t\t\tstruct tcp_sack_block *next_dup,\n\t\t\t\t\tstruct tcp_sacktag_state *state,\n\t\t\t\t\tu32 start_seq, u32 end_seq,\n\t\t\t\t\tint dup_sack_in)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *tmp;\n\n\ttcp_for_write_queue_from(skb, sk) {\n\t\tint in_sack = 0;\n\t\tint dup_sack = dup_sack_in;\n\n\t\tif (skb == tcp_send_head(sk))\n\t\t\tbreak;\n\n\t\t/* queue is in-order => we can short-circuit the walk early */\n\t\tif (!before(TCP_SKB_CB(skb)->seq, end_seq))\n\t\t\tbreak;\n\n\t\tif ((next_dup != NULL) &&\n\t\t    before(TCP_SKB_CB(skb)->seq, next_dup->end_seq)) {\n\t\t\tin_sack = tcp_match_skb_to_sack(sk, skb,\n\t\t\t\t\t\t\tnext_dup->start_seq,\n\t\t\t\t\t\t\tnext_dup->end_seq);\n\t\t\tif (in_sack > 0)\n\t\t\t\tdup_sack = 1;\n\t\t}\n\n\t\t/* skb reference here is a bit tricky to get right, since\n\t\t * shifting can eat and free both this skb and the next,\n\t\t * so not even _safe variant of the loop is enough.\n\t\t */\n\t\tif (in_sack <= 0) {\n\t\t\ttmp = tcp_shift_skb_data(sk, skb, state,\n\t\t\t\t\t\t start_seq, end_seq, dup_sack);\n\t\t\tif (tmp != NULL) {\n\t\t\t\tif (tmp != skb) {\n\t\t\t\t\tskb = tmp;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tin_sack = 0;\n\t\t\t} else {\n\t\t\t\tin_sack = tcp_match_skb_to_sack(sk, skb,\n\t\t\t\t\t\t\t\tstart_seq,\n\t\t\t\t\t\t\t\tend_seq);\n\t\t\t}\n\t\t}\n\n\t\tif (unlikely(in_sack < 0))\n\t\t\tbreak;\n\n\t\tif (in_sack) {\n\t\t\tTCP_SKB_CB(skb)->sacked = tcp_sacktag_one(skb, sk,\n\t\t\t\t\t\t\t\t  state,\n\t\t\t\t\t\t\t\t  dup_sack,\n\t\t\t\t\t\t\t\t  tcp_skb_pcount(skb));\n\n\t\t\tif (!before(TCP_SKB_CB(skb)->seq,\n\t\t\t\t    tcp_highest_sack_seq(tp)))\n\t\t\t\ttcp_advance_highest_sack(sk, skb);\n\t\t}\n\n\t\tstate->fack_count += tcp_skb_pcount(skb);\n\t}\n\treturn skb;\n}\n\n/* Avoid all extra work that is being done by sacktag while walking in\n * a normal way\n */\nstatic struct sk_buff *tcp_sacktag_skip(struct sk_buff *skb, struct sock *sk,\n\t\t\t\t\tstruct tcp_sacktag_state *state,\n\t\t\t\t\tu32 skip_to_seq)\n{\n\ttcp_for_write_queue_from(skb, sk) {\n\t\tif (skb == tcp_send_head(sk))\n\t\t\tbreak;\n\n\t\tif (after(TCP_SKB_CB(skb)->end_seq, skip_to_seq))\n\t\t\tbreak;\n\n\t\tstate->fack_count += tcp_skb_pcount(skb);\n\t}\n\treturn skb;\n}\n\nstatic struct sk_buff *tcp_maybe_skipping_dsack(struct sk_buff *skb,\n\t\t\t\t\t\tstruct sock *sk,\n\t\t\t\t\t\tstruct tcp_sack_block *next_dup,\n\t\t\t\t\t\tstruct tcp_sacktag_state *state,\n\t\t\t\t\t\tu32 skip_to_seq)\n{\n\tif (next_dup == NULL)\n\t\treturn skb;\n\n\tif (before(next_dup->start_seq, skip_to_seq)) {\n\t\tskb = tcp_sacktag_skip(skb, sk, state, next_dup->start_seq);\n\t\tskb = tcp_sacktag_walk(skb, sk, NULL, state,\n\t\t\t\t       next_dup->start_seq, next_dup->end_seq,\n\t\t\t\t       1);\n\t}\n\n\treturn skb;\n}\n\nstatic int tcp_sack_cache_ok(const struct tcp_sock *tp, const struct tcp_sack_block *cache)\n{\n\treturn cache < tp->recv_sack_cache + ARRAY_SIZE(tp->recv_sack_cache);\n}\n\nstatic int\ntcp_sacktag_write_queue(struct sock *sk, const struct sk_buff *ack_skb,\n\t\t\tu32 prior_snd_una)\n{\n\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tconst unsigned char *ptr = (skb_transport_header(ack_skb) +\n\t\t\t\t    TCP_SKB_CB(ack_skb)->sacked);\n\tstruct tcp_sack_block_wire *sp_wire = (struct tcp_sack_block_wire *)(ptr+2);\n\tstruct tcp_sack_block sp[TCP_NUM_SACKS];\n\tstruct tcp_sack_block *cache;\n\tstruct tcp_sacktag_state state;\n\tstruct sk_buff *skb;\n\tint num_sacks = min(TCP_NUM_SACKS, (ptr[1] - TCPOLEN_SACK_BASE) >> 3);\n\tint used_sacks;\n\tint found_dup_sack = 0;\n\tint i, j;\n\tint first_sack_index;\n\n\tstate.flag = 0;\n\tstate.reord = tp->packets_out;\n\n\tif (!tp->sacked_out) {\n\t\tif (WARN_ON(tp->fackets_out))\n\t\t\ttp->fackets_out = 0;\n\t\ttcp_highest_sack_reset(sk);\n\t}\n\n\tfound_dup_sack = tcp_check_dsack(sk, ack_skb, sp_wire,\n\t\t\t\t\t num_sacks, prior_snd_una);\n\tif (found_dup_sack)\n\t\tstate.flag |= FLAG_DSACKING_ACK;\n\n\t/* Eliminate too old ACKs, but take into\n\t * account more or less fresh ones, they can\n\t * contain valid SACK info.\n\t */\n\tif (before(TCP_SKB_CB(ack_skb)->ack_seq, prior_snd_una - tp->max_window))\n\t\treturn 0;\n\n\tif (!tp->packets_out)\n\t\tgoto out;\n\n\tused_sacks = 0;\n\tfirst_sack_index = 0;\n\tfor (i = 0; i < num_sacks; i++) {\n\t\tint dup_sack = !i && found_dup_sack;\n\n\t\tsp[used_sacks].start_seq = get_unaligned_be32(&sp_wire[i].start_seq);\n\t\tsp[used_sacks].end_seq = get_unaligned_be32(&sp_wire[i].end_seq);\n\n\t\tif (!tcp_is_sackblock_valid(tp, dup_sack,\n\t\t\t\t\t    sp[used_sacks].start_seq,\n\t\t\t\t\t    sp[used_sacks].end_seq)) {\n\t\t\tint mib_idx;\n\n\t\t\tif (dup_sack) {\n\t\t\t\tif (!tp->undo_marker)\n\t\t\t\t\tmib_idx = LINUX_MIB_TCPDSACKIGNOREDNOUNDO;\n\t\t\t\telse\n\t\t\t\t\tmib_idx = LINUX_MIB_TCPDSACKIGNOREDOLD;\n\t\t\t} else {\n\t\t\t\t/* Don't count olds caused by ACK reordering */\n\t\t\t\tif ((TCP_SKB_CB(ack_skb)->ack_seq != tp->snd_una) &&\n\t\t\t\t    !after(sp[used_sacks].end_seq, tp->snd_una))\n\t\t\t\t\tcontinue;\n\t\t\t\tmib_idx = LINUX_MIB_TCPSACKDISCARD;\n\t\t\t}\n\n\t\t\tNET_INC_STATS_BH(sock_net(sk), mib_idx);\n\t\t\tif (i == 0)\n\t\t\t\tfirst_sack_index = -1;\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* Ignore very old stuff early */\n\t\tif (!after(sp[used_sacks].end_seq, prior_snd_una))\n\t\t\tcontinue;\n\n\t\tused_sacks++;\n\t}\n\n\t/* order SACK blocks to allow in order walk of the retrans queue */\n\tfor (i = used_sacks - 1; i > 0; i--) {\n\t\tfor (j = 0; j < i; j++) {\n\t\t\tif (after(sp[j].start_seq, sp[j + 1].start_seq)) {\n\t\t\t\tswap(sp[j], sp[j + 1]);\n\n\t\t\t\t/* Track where the first SACK block goes to */\n\t\t\t\tif (j == first_sack_index)\n\t\t\t\t\tfirst_sack_index = j + 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tskb = tcp_write_queue_head(sk);\n\tstate.fack_count = 0;\n\ti = 0;\n\n\tif (!tp->sacked_out) {\n\t\t/* It's already past, so skip checking against it */\n\t\tcache = tp->recv_sack_cache + ARRAY_SIZE(tp->recv_sack_cache);\n\t} else {\n\t\tcache = tp->recv_sack_cache;\n\t\t/* Skip empty blocks in at head of the cache */\n\t\twhile (tcp_sack_cache_ok(tp, cache) && !cache->start_seq &&\n\t\t       !cache->end_seq)\n\t\t\tcache++;\n\t}\n\n\twhile (i < used_sacks) {\n\t\tu32 start_seq = sp[i].start_seq;\n\t\tu32 end_seq = sp[i].end_seq;\n\t\tint dup_sack = (found_dup_sack && (i == first_sack_index));\n\t\tstruct tcp_sack_block *next_dup = NULL;\n\n\t\tif (found_dup_sack && ((i + 1) == first_sack_index))\n\t\t\tnext_dup = &sp[i + 1];\n\n\t\t/* Event \"B\" in the comment above. */\n\t\tif (after(end_seq, tp->high_seq))\n\t\t\tstate.flag |= FLAG_DATA_LOST;\n\n\t\t/* Skip too early cached blocks */\n\t\twhile (tcp_sack_cache_ok(tp, cache) &&\n\t\t       !before(start_seq, cache->end_seq))\n\t\t\tcache++;\n\n\t\t/* Can skip some work by looking recv_sack_cache? */\n\t\tif (tcp_sack_cache_ok(tp, cache) && !dup_sack &&\n\t\t    after(end_seq, cache->start_seq)) {\n\n\t\t\t/* Head todo? */\n\t\t\tif (before(start_seq, cache->start_seq)) {\n\t\t\t\tskb = tcp_sacktag_skip(skb, sk, &state,\n\t\t\t\t\t\t       start_seq);\n\t\t\t\tskb = tcp_sacktag_walk(skb, sk, next_dup,\n\t\t\t\t\t\t       &state,\n\t\t\t\t\t\t       start_seq,\n\t\t\t\t\t\t       cache->start_seq,\n\t\t\t\t\t\t       dup_sack);\n\t\t\t}\n\n\t\t\t/* Rest of the block already fully processed? */\n\t\t\tif (!after(end_seq, cache->end_seq))\n\t\t\t\tgoto advance_sp;\n\n\t\t\tskb = tcp_maybe_skipping_dsack(skb, sk, next_dup,\n\t\t\t\t\t\t       &state,\n\t\t\t\t\t\t       cache->end_seq);\n\n\t\t\t/* ...tail remains todo... */\n\t\t\tif (tcp_highest_sack_seq(tp) == cache->end_seq) {\n\t\t\t\t/* ...but better entrypoint exists! */\n\t\t\t\tskb = tcp_highest_sack(sk);\n\t\t\t\tif (skb == NULL)\n\t\t\t\t\tbreak;\n\t\t\t\tstate.fack_count = tp->fackets_out;\n\t\t\t\tcache++;\n\t\t\t\tgoto walk;\n\t\t\t}\n\n\t\t\tskb = tcp_sacktag_skip(skb, sk, &state, cache->end_seq);\n\t\t\t/* Check overlap against next cached too (past this one already) */\n\t\t\tcache++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!before(start_seq, tcp_highest_sack_seq(tp))) {\n\t\t\tskb = tcp_highest_sack(sk);\n\t\t\tif (skb == NULL)\n\t\t\t\tbreak;\n\t\t\tstate.fack_count = tp->fackets_out;\n\t\t}\n\t\tskb = tcp_sacktag_skip(skb, sk, &state, start_seq);\n\nwalk:\n\t\tskb = tcp_sacktag_walk(skb, sk, next_dup, &state,\n\t\t\t\t       start_seq, end_seq, dup_sack);\n\nadvance_sp:\n\t\t/* SACK enhanced FRTO (RFC4138, Appendix B): Clearing correct\n\t\t * due to in-order walk\n\t\t */\n\t\tif (after(end_seq, tp->frto_highmark))\n\t\t\tstate.flag &= ~FLAG_ONLY_ORIG_SACKED;\n\n\t\ti++;\n\t}\n\n\t/* Clear the head of the cache sack blocks so we can skip it next time */\n\tfor (i = 0; i < ARRAY_SIZE(tp->recv_sack_cache) - used_sacks; i++) {\n\t\ttp->recv_sack_cache[i].start_seq = 0;\n\t\ttp->recv_sack_cache[i].end_seq = 0;\n\t}\n\tfor (j = 0; j < used_sacks; j++)\n\t\ttp->recv_sack_cache[i++] = sp[j];\n\n\ttcp_mark_lost_retrans(sk);\n\n\ttcp_verify_left_out(tp);\n\n\tif ((state.reord < tp->fackets_out) &&\n\t    ((icsk->icsk_ca_state != TCP_CA_Loss) || tp->undo_marker) &&\n\t    (!tp->frto_highmark || after(tp->snd_una, tp->frto_highmark)))\n\t\ttcp_update_reordering(sk, tp->fackets_out - state.reord, 0);\n\nout:\n\n#if FASTRETRANS_DEBUG > 0\n\tWARN_ON((int)tp->sacked_out < 0);\n\tWARN_ON((int)tp->lost_out < 0);\n\tWARN_ON((int)tp->retrans_out < 0);\n\tWARN_ON((int)tcp_packets_in_flight(tp) < 0);\n#endif\n\treturn state.flag;\n}\n\n/* Limits sacked_out so that sum with lost_out isn't ever larger than\n * packets_out. Returns zero if sacked_out adjustement wasn't necessary.\n */\nstatic int tcp_limit_reno_sacked(struct tcp_sock *tp)\n{\n\tu32 holes;\n\n\tholes = max(tp->lost_out, 1U);\n\tholes = min(holes, tp->packets_out);\n\n\tif ((tp->sacked_out + holes) > tp->packets_out) {\n\t\ttp->sacked_out = tp->packets_out - holes;\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n/* If we receive more dupacks than we expected counting segments\n * in assumption of absent reordering, interpret this as reordering.\n * The only another reason could be bug in receiver TCP.\n */\nstatic void tcp_check_reno_reordering(struct sock *sk, const int addend)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tif (tcp_limit_reno_sacked(tp))\n\t\ttcp_update_reordering(sk, tp->packets_out + addend, 0);\n}\n\n/* Emulate SACKs for SACKless connection: account for a new dupack. */\n\nstatic void tcp_add_reno_sack(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\ttp->sacked_out++;\n\ttcp_check_reno_reordering(sk, 0);\n\ttcp_verify_left_out(tp);\n}\n\n/* Account for ACK, ACKing some data in Reno Recovery phase. */\n\nstatic void tcp_remove_reno_sacks(struct sock *sk, int acked)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (acked > 0) {\n\t\t/* One ACK acked hole. The rest eat duplicate ACKs. */\n\t\tif (acked - 1 >= tp->sacked_out)\n\t\t\ttp->sacked_out = 0;\n\t\telse\n\t\t\ttp->sacked_out -= acked - 1;\n\t}\n\ttcp_check_reno_reordering(sk, acked);\n\ttcp_verify_left_out(tp);\n}\n\nstatic inline void tcp_reset_reno_sack(struct tcp_sock *tp)\n{\n\ttp->sacked_out = 0;\n}\n\nstatic int tcp_is_sackfrto(const struct tcp_sock *tp)\n{\n\treturn (sysctl_tcp_frto == 0x2) && !tcp_is_reno(tp);\n}\n\n/* F-RTO can only be used if TCP has never retransmitted anything other than\n * head (SACK enhanced variant from Appendix B of RFC4138 is more robust here)\n */\nint tcp_use_frto(struct sock *sk)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\tstruct sk_buff *skb;\n\n\tif (!sysctl_tcp_frto)\n\t\treturn 0;\n\n\t/* MTU probe and F-RTO won't really play nicely along currently */\n\tif (icsk->icsk_mtup.probe_size)\n\t\treturn 0;\n\n\tif (tcp_is_sackfrto(tp))\n\t\treturn 1;\n\n\t/* Avoid expensive walking of rexmit queue if possible */\n\tif (tp->retrans_out > 1)\n\t\treturn 0;\n\n\tskb = tcp_write_queue_head(sk);\n\tif (tcp_skb_is_last(sk, skb))\n\t\treturn 1;\n\tskb = tcp_write_queue_next(sk, skb);\t/* Skips head */\n\ttcp_for_write_queue_from(skb, sk) {\n\t\tif (skb == tcp_send_head(sk))\n\t\t\tbreak;\n\t\tif (TCP_SKB_CB(skb)->sacked & TCPCB_RETRANS)\n\t\t\treturn 0;\n\t\t/* Short-circuit when first non-SACKed skb has been checked */\n\t\tif (!(TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_ACKED))\n\t\t\tbreak;\n\t}\n\treturn 1;\n}\n\n/* RTO occurred, but do not yet enter Loss state. Instead, defer RTO\n * recovery a bit and use heuristics in tcp_process_frto() to detect if\n * the RTO was spurious. Only clear SACKED_RETRANS of the head here to\n * keep retrans_out counting accurate (with SACK F-RTO, other than head\n * may still have that bit set); TCPCB_LOST and remaining SACKED_RETRANS\n * bits are handled if the Loss state is really to be entered (in\n * tcp_enter_frto_loss).\n *\n * Do like tcp_enter_loss() would; when RTO expires the second time it\n * does:\n *  \"Reduce ssthresh if it has not yet been made inside this window.\"\n */\nvoid tcp_enter_frto(struct sock *sk)\n{\n\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *skb;\n\n\tif ((!tp->frto_counter && icsk->icsk_ca_state <= TCP_CA_Disorder) ||\n\t    tp->snd_una == tp->high_seq ||\n\t    ((icsk->icsk_ca_state == TCP_CA_Loss || tp->frto_counter) &&\n\t     !icsk->icsk_retransmits)) {\n\t\ttp->prior_ssthresh = tcp_current_ssthresh(sk);\n\t\t/* Our state is too optimistic in ssthresh() call because cwnd\n\t\t * is not reduced until tcp_enter_frto_loss() when previous F-RTO\n\t\t * recovery has not yet completed. Pattern would be this: RTO,\n\t\t * Cumulative ACK, RTO (2xRTO for the same segment does not end\n\t\t * up here twice).\n\t\t * RFC4138 should be more specific on what to do, even though\n\t\t * RTO is quite unlikely to occur after the first Cumulative ACK\n\t\t * due to back-off and complexity of triggering events ...\n\t\t */\n\t\tif (tp->frto_counter) {\n\t\t\tu32 stored_cwnd;\n\t\t\tstored_cwnd = tp->snd_cwnd;\n\t\t\ttp->snd_cwnd = 2;\n\t\t\ttp->snd_ssthresh = icsk->icsk_ca_ops->ssthresh(sk);\n\t\t\ttp->snd_cwnd = stored_cwnd;\n\t\t} else {\n\t\t\ttp->snd_ssthresh = icsk->icsk_ca_ops->ssthresh(sk);\n\t\t}\n\t\t/* ... in theory, cong.control module could do \"any tricks\" in\n\t\t * ssthresh(), which means that ca_state, lost bits and lost_out\n\t\t * counter would have to be faked before the call occurs. We\n\t\t * consider that too expensive, unlikely and hacky, so modules\n\t\t * using these in ssthresh() must deal these incompatibility\n\t\t * issues if they receives CA_EVENT_FRTO and frto_counter != 0\n\t\t */\n\t\ttcp_ca_event(sk, CA_EVENT_FRTO);\n\t}\n\n\ttp->undo_marker = tp->snd_una;\n\ttp->undo_retrans = 0;\n\n\tskb = tcp_write_queue_head(sk);\n\tif (TCP_SKB_CB(skb)->sacked & TCPCB_RETRANS)\n\t\ttp->undo_marker = 0;\n\tif (TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_RETRANS) {\n\t\tTCP_SKB_CB(skb)->sacked &= ~TCPCB_SACKED_RETRANS;\n\t\ttp->retrans_out -= tcp_skb_pcount(skb);\n\t}\n\ttcp_verify_left_out(tp);\n\n\t/* Too bad if TCP was application limited */\n\ttp->snd_cwnd = min(tp->snd_cwnd, tcp_packets_in_flight(tp) + 1);\n\n\t/* Earlier loss recovery underway (see RFC4138; Appendix B).\n\t * The last condition is necessary at least in tp->frto_counter case.\n\t */\n\tif (tcp_is_sackfrto(tp) && (tp->frto_counter ||\n\t    ((1 << icsk->icsk_ca_state) & (TCPF_CA_Recovery|TCPF_CA_Loss))) &&\n\t    after(tp->high_seq, tp->snd_una)) {\n\t\ttp->frto_highmark = tp->high_seq;\n\t} else {\n\t\ttp->frto_highmark = tp->snd_nxt;\n\t}\n\ttcp_set_ca_state(sk, TCP_CA_Disorder);\n\ttp->high_seq = tp->snd_nxt;\n\ttp->frto_counter = 1;\n}\n\n/* Enter Loss state after F-RTO was applied. Dupack arrived after RTO,\n * which indicates that we should follow the traditional RTO recovery,\n * i.e. mark everything lost and do go-back-N retransmission.\n */\nstatic void tcp_enter_frto_loss(struct sock *sk, int allowed_segments, int flag)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *skb;\n\n\ttp->lost_out = 0;\n\ttp->retrans_out = 0;\n\tif (tcp_is_reno(tp))\n\t\ttcp_reset_reno_sack(tp);\n\n\ttcp_for_write_queue(skb, sk) {\n\t\tif (skb == tcp_send_head(sk))\n\t\t\tbreak;\n\n\t\tTCP_SKB_CB(skb)->sacked &= ~TCPCB_LOST;\n\t\t/*\n\t\t * Count the retransmission made on RTO correctly (only when\n\t\t * waiting for the first ACK and did not get it)...\n\t\t */\n\t\tif ((tp->frto_counter == 1) && !(flag & FLAG_DATA_ACKED)) {\n\t\t\t/* For some reason this R-bit might get cleared? */\n\t\t\tif (TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_RETRANS)\n\t\t\t\ttp->retrans_out += tcp_skb_pcount(skb);\n\t\t\t/* ...enter this if branch just for the first segment */\n\t\t\tflag |= FLAG_DATA_ACKED;\n\t\t} else {\n\t\t\tif (TCP_SKB_CB(skb)->sacked & TCPCB_RETRANS)\n\t\t\t\ttp->undo_marker = 0;\n\t\t\tTCP_SKB_CB(skb)->sacked &= ~TCPCB_SACKED_RETRANS;\n\t\t}\n\n\t\t/* Marking forward transmissions that were made after RTO lost\n\t\t * can cause unnecessary retransmissions in some scenarios,\n\t\t * SACK blocks will mitigate that in some but not in all cases.\n\t\t * We used to not mark them but it was causing break-ups with\n\t\t * receivers that do only in-order receival.\n\t\t *\n\t\t * TODO: we could detect presence of such receiver and select\n\t\t * different behavior per flow.\n\t\t */\n\t\tif (!(TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_ACKED)) {\n\t\t\tTCP_SKB_CB(skb)->sacked |= TCPCB_LOST;\n\t\t\ttp->lost_out += tcp_skb_pcount(skb);\n\t\t\ttp->retransmit_high = TCP_SKB_CB(skb)->end_seq;\n\t\t}\n\t}\n\ttcp_verify_left_out(tp);\n\n\ttp->snd_cwnd = tcp_packets_in_flight(tp) + allowed_segments;\n\ttp->snd_cwnd_cnt = 0;\n\ttp->snd_cwnd_stamp = tcp_time_stamp;\n\ttp->frto_counter = 0;\n\ttp->bytes_acked = 0;\n\n\ttp->reordering = min_t(unsigned int, tp->reordering,\n\t\t\t       sysctl_tcp_reordering);\n\ttcp_set_ca_state(sk, TCP_CA_Loss);\n\ttp->high_seq = tp->snd_nxt;\n\tTCP_ECN_queue_cwr(tp);\n\n\ttcp_clear_all_retrans_hints(tp);\n}\n\nstatic void tcp_clear_retrans_partial(struct tcp_sock *tp)\n{\n\ttp->retrans_out = 0;\n\ttp->lost_out = 0;\n\n\ttp->undo_marker = 0;\n\ttp->undo_retrans = 0;\n}\n\nvoid tcp_clear_retrans(struct tcp_sock *tp)\n{\n\ttcp_clear_retrans_partial(tp);\n\n\ttp->fackets_out = 0;\n\ttp->sacked_out = 0;\n}\n\n/* Enter Loss state. If \"how\" is not zero, forget all SACK information\n * and reset tags completely, otherwise preserve SACKs. If receiver\n * dropped its ofo queue, we will know this due to reneging detection.\n */\nvoid tcp_enter_loss(struct sock *sk, int how)\n{\n\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *skb;\n\n\t/* Reduce ssthresh if it has not yet been made inside this window. */\n\tif (icsk->icsk_ca_state <= TCP_CA_Disorder || tp->snd_una == tp->high_seq ||\n\t    (icsk->icsk_ca_state == TCP_CA_Loss && !icsk->icsk_retransmits)) {\n\t\ttp->prior_ssthresh = tcp_current_ssthresh(sk);\n\t\ttp->snd_ssthresh = icsk->icsk_ca_ops->ssthresh(sk);\n\t\ttcp_ca_event(sk, CA_EVENT_LOSS);\n\t}\n\ttp->snd_cwnd\t   = 1;\n\ttp->snd_cwnd_cnt   = 0;\n\ttp->snd_cwnd_stamp = tcp_time_stamp;\n\n\ttp->bytes_acked = 0;\n\ttcp_clear_retrans_partial(tp);\n\n\tif (tcp_is_reno(tp))\n\t\ttcp_reset_reno_sack(tp);\n\n\tif (!how) {\n\t\t/* Push undo marker, if it was plain RTO and nothing\n\t\t * was retransmitted. */\n\t\ttp->undo_marker = tp->snd_una;\n\t} else {\n\t\ttp->sacked_out = 0;\n\t\ttp->fackets_out = 0;\n\t}\n\ttcp_clear_all_retrans_hints(tp);\n\n\ttcp_for_write_queue(skb, sk) {\n\t\tif (skb == tcp_send_head(sk))\n\t\t\tbreak;\n\n\t\tif (TCP_SKB_CB(skb)->sacked & TCPCB_RETRANS)\n\t\t\ttp->undo_marker = 0;\n\t\tTCP_SKB_CB(skb)->sacked &= (~TCPCB_TAGBITS)|TCPCB_SACKED_ACKED;\n\t\tif (!(TCP_SKB_CB(skb)->sacked&TCPCB_SACKED_ACKED) || how) {\n\t\t\tTCP_SKB_CB(skb)->sacked &= ~TCPCB_SACKED_ACKED;\n\t\t\tTCP_SKB_CB(skb)->sacked |= TCPCB_LOST;\n\t\t\ttp->lost_out += tcp_skb_pcount(skb);\n\t\t\ttp->retransmit_high = TCP_SKB_CB(skb)->end_seq;\n\t\t}\n\t}\n\ttcp_verify_left_out(tp);\n\n\ttp->reordering = min_t(unsigned int, tp->reordering,\n\t\t\t       sysctl_tcp_reordering);\n\ttcp_set_ca_state(sk, TCP_CA_Loss);\n\ttp->high_seq = tp->snd_nxt;\n\tTCP_ECN_queue_cwr(tp);\n\t/* Abort F-RTO algorithm if one is in progress */\n\ttp->frto_counter = 0;\n}\n\n/* If ACK arrived pointing to a remembered SACK, it means that our\n * remembered SACKs do not reflect real state of receiver i.e.\n * receiver _host_ is heavily congested (or buggy).\n *\n * Do processing similar to RTO timeout.\n */\nstatic int tcp_check_sack_reneging(struct sock *sk, int flag)\n{\n\tif (flag & FLAG_SACK_RENEGING) {\n\t\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPSACKRENEGING);\n\n\t\ttcp_enter_loss(sk, 1);\n\t\ticsk->icsk_retransmits++;\n\t\ttcp_retransmit_skb(sk, tcp_write_queue_head(sk));\n\t\tinet_csk_reset_xmit_timer(sk, ICSK_TIME_RETRANS,\n\t\t\t\t\t  icsk->icsk_rto, TCP_RTO_MAX);\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nstatic inline int tcp_fackets_out(const struct tcp_sock *tp)\n{\n\treturn tcp_is_reno(tp) ? tp->sacked_out + 1 : tp->fackets_out;\n}\n\n/* Heurestics to calculate number of duplicate ACKs. There's no dupACKs\n * counter when SACK is enabled (without SACK, sacked_out is used for\n * that purpose).\n *\n * Instead, with FACK TCP uses fackets_out that includes both SACKed\n * segments up to the highest received SACK block so far and holes in\n * between them.\n *\n * With reordering, holes may still be in flight, so RFC3517 recovery\n * uses pure sacked_out (total number of SACKed segments) even though\n * it violates the RFC that uses duplicate ACKs, often these are equal\n * but when e.g. out-of-window ACKs or packet duplication occurs,\n * they differ. Since neither occurs due to loss, TCP should really\n * ignore them.\n */\nstatic inline int tcp_dupack_heuristics(const struct tcp_sock *tp)\n{\n\treturn tcp_is_fack(tp) ? tp->fackets_out : tp->sacked_out + 1;\n}\n\nstatic inline int tcp_skb_timedout(const struct sock *sk,\n\t\t\t\t   const struct sk_buff *skb)\n{\n\treturn tcp_time_stamp - TCP_SKB_CB(skb)->when > inet_csk(sk)->icsk_rto;\n}\n\nstatic inline int tcp_head_timedout(const struct sock *sk)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\n\treturn tp->packets_out &&\n\t       tcp_skb_timedout(sk, tcp_write_queue_head(sk));\n}\n\n/* Linux NewReno/SACK/FACK/ECN state machine.\n * --------------------------------------\n *\n * \"Open\"\tNormal state, no dubious events, fast path.\n * \"Disorder\"   In all the respects it is \"Open\",\n *\t\tbut requires a bit more attention. It is entered when\n *\t\twe see some SACKs or dupacks. It is split of \"Open\"\n *\t\tmainly to move some processing from fast path to slow one.\n * \"CWR\"\tCWND was reduced due to some Congestion Notification event.\n *\t\tIt can be ECN, ICMP source quench, local device congestion.\n * \"Recovery\"\tCWND was reduced, we are fast-retransmitting.\n * \"Loss\"\tCWND was reduced due to RTO timeout or SACK reneging.\n *\n * tcp_fastretrans_alert() is entered:\n * - each incoming ACK, if state is not \"Open\"\n * - when arrived ACK is unusual, namely:\n *\t* SACK\n *\t* Duplicate ACK.\n *\t* ECN ECE.\n *\n * Counting packets in flight is pretty simple.\n *\n *\tin_flight = packets_out - left_out + retrans_out\n *\n *\tpackets_out is SND.NXT-SND.UNA counted in packets.\n *\n *\tretrans_out is number of retransmitted segments.\n *\n *\tleft_out is number of segments left network, but not ACKed yet.\n *\n *\t\tleft_out = sacked_out + lost_out\n *\n *     sacked_out: Packets, which arrived to receiver out of order\n *\t\t   and hence not ACKed. With SACKs this number is simply\n *\t\t   amount of SACKed data. Even without SACKs\n *\t\t   it is easy to give pretty reliable estimate of this number,\n *\t\t   counting duplicate ACKs.\n *\n *       lost_out: Packets lost by network. TCP has no explicit\n *\t\t   \"loss notification\" feedback from network (for now).\n *\t\t   It means that this number can be only _guessed_.\n *\t\t   Actually, it is the heuristics to predict lossage that\n *\t\t   distinguishes different algorithms.\n *\n *\tF.e. after RTO, when all the queue is considered as lost,\n *\tlost_out = packets_out and in_flight = retrans_out.\n *\n *\t\tEssentially, we have now two algorithms counting\n *\t\tlost packets.\n *\n *\t\tFACK: It is the simplest heuristics. As soon as we decided\n *\t\tthat something is lost, we decide that _all_ not SACKed\n *\t\tpackets until the most forward SACK are lost. I.e.\n *\t\tlost_out = fackets_out - sacked_out and left_out = fackets_out.\n *\t\tIt is absolutely correct estimate, if network does not reorder\n *\t\tpackets. And it loses any connection to reality when reordering\n *\t\ttakes place. We use FACK by default until reordering\n *\t\tis suspected on the path to this destination.\n *\n *\t\tNewReno: when Recovery is entered, we assume that one segment\n *\t\tis lost (classic Reno). While we are in Recovery and\n *\t\ta partial ACK arrives, we assume that one more packet\n *\t\tis lost (NewReno). This heuristics are the same in NewReno\n *\t\tand SACK.\n *\n *  Imagine, that's all! Forget about all this shamanism about CWND inflation\n *  deflation etc. CWND is real congestion window, never inflated, changes\n *  only according to classic VJ rules.\n *\n * Really tricky (and requiring careful tuning) part of algorithm\n * is hidden in functions tcp_time_to_recover() and tcp_xmit_retransmit_queue().\n * The first determines the moment _when_ we should reduce CWND and,\n * hence, slow down forward transmission. In fact, it determines the moment\n * when we decide that hole is caused by loss, rather than by a reorder.\n *\n * tcp_xmit_retransmit_queue() decides, _what_ we should retransmit to fill\n * holes, caused by lost packets.\n *\n * And the most logically complicated part of algorithm is undo\n * heuristics. We detect false retransmits due to both too early\n * fast retransmit (reordering) and underestimated RTO, analyzing\n * timestamps and D-SACKs. When we detect that some segments were\n * retransmitted by mistake and CWND reduction was wrong, we undo\n * window reduction and abort recovery phase. This logic is hidden\n * inside several functions named tcp_try_undo_<something>.\n */\n\n/* This function decides, when we should leave Disordered state\n * and enter Recovery phase, reducing congestion window.\n *\n * Main question: may we further continue forward transmission\n * with the same cwnd?\n */\nstatic int tcp_time_to_recover(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\t__u32 packets_out;\n\n\t/* Do not perform any recovery during F-RTO algorithm */\n\tif (tp->frto_counter)\n\t\treturn 0;\n\n\t/* Trick#1: The loss is proven. */\n\tif (tp->lost_out)\n\t\treturn 1;\n\n\t/* Not-A-Trick#2 : Classic rule... */\n\tif (tcp_dupack_heuristics(tp) > tp->reordering)\n\t\treturn 1;\n\n\t/* Trick#3 : when we use RFC2988 timer restart, fast\n\t * retransmit can be triggered by timeout of queue head.\n\t */\n\tif (tcp_is_fack(tp) && tcp_head_timedout(sk))\n\t\treturn 1;\n\n\t/* Trick#4: It is still not OK... But will it be useful to delay\n\t * recovery more?\n\t */\n\tpackets_out = tp->packets_out;\n\tif (packets_out <= tp->reordering &&\n\t    tp->sacked_out >= max_t(__u32, packets_out/2, sysctl_tcp_reordering) &&\n\t    !tcp_may_send_now(sk)) {\n\t\t/* We have nothing to send. This connection is limited\n\t\t * either by receiver window or by application.\n\t\t */\n\t\treturn 1;\n\t}\n\n\t/* If a thin stream is detected, retransmit after first\n\t * received dupack. Employ only if SACK is supported in order\n\t * to avoid possible corner-case series of spurious retransmissions\n\t * Use only if there are no unsent data.\n\t */\n\tif ((tp->thin_dupack || sysctl_tcp_thin_dupack) &&\n\t    tcp_stream_is_thin(tp) && tcp_dupack_heuristics(tp) > 1 &&\n\t    tcp_is_sack(tp) && !tcp_send_head(sk))\n\t\treturn 1;\n\n\treturn 0;\n}\n\n/* New heuristics: it is possible only after we switched to restart timer\n * each time when something is ACKed. Hence, we can detect timed out packets\n * during fast retransmit without falling to slow start.\n *\n * Usefulness of this as is very questionable, since we should know which of\n * the segments is the next to timeout which is relatively expensive to find\n * in general case unless we add some data structure just for that. The\n * current approach certainly won't find the right one too often and when it\n * finally does find _something_ it usually marks large part of the window\n * right away (because a retransmission with a larger timestamp blocks the\n * loop from advancing). -ij\n */\nstatic void tcp_timeout_skbs(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *skb;\n\n\tif (!tcp_is_fack(tp) || !tcp_head_timedout(sk))\n\t\treturn;\n\n\tskb = tp->scoreboard_skb_hint;\n\tif (tp->scoreboard_skb_hint == NULL)\n\t\tskb = tcp_write_queue_head(sk);\n\n\ttcp_for_write_queue_from(skb, sk) {\n\t\tif (skb == tcp_send_head(sk))\n\t\t\tbreak;\n\t\tif (!tcp_skb_timedout(sk, skb))\n\t\t\tbreak;\n\n\t\ttcp_skb_mark_lost(tp, skb);\n\t}\n\n\ttp->scoreboard_skb_hint = skb;\n\n\ttcp_verify_left_out(tp);\n}\n\n/* Mark head of queue up as lost. With RFC3517 SACK, the packets is\n * is against sacked \"cnt\", otherwise it's against facked \"cnt\"\n */\nstatic void tcp_mark_head_lost(struct sock *sk, int packets, int mark_head)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *skb;\n\tint cnt, oldcnt;\n\tint err;\n\tunsigned int mss;\n\n\tWARN_ON(packets > tp->packets_out);\n\tif (tp->lost_skb_hint) {\n\t\tskb = tp->lost_skb_hint;\n\t\tcnt = tp->lost_cnt_hint;\n\t\t/* Head already handled? */\n\t\tif (mark_head && skb != tcp_write_queue_head(sk))\n\t\t\treturn;\n\t} else {\n\t\tskb = tcp_write_queue_head(sk);\n\t\tcnt = 0;\n\t}\n\n\ttcp_for_write_queue_from(skb, sk) {\n\t\tif (skb == tcp_send_head(sk))\n\t\t\tbreak;\n\t\t/* TODO: do this better */\n\t\t/* this is not the most efficient way to do this... */\n\t\ttp->lost_skb_hint = skb;\n\t\ttp->lost_cnt_hint = cnt;\n\n\t\tif (after(TCP_SKB_CB(skb)->end_seq, tp->high_seq))\n\t\t\tbreak;\n\n\t\toldcnt = cnt;\n\t\tif (tcp_is_fack(tp) || tcp_is_reno(tp) ||\n\t\t    (TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_ACKED))\n\t\t\tcnt += tcp_skb_pcount(skb);\n\n\t\tif (cnt > packets) {\n\t\t\tif ((tcp_is_sack(tp) && !tcp_is_fack(tp)) ||\n\t\t\t    (oldcnt >= packets))\n\t\t\t\tbreak;\n\n\t\t\tmss = skb_shinfo(skb)->gso_size;\n\t\t\terr = tcp_fragment(sk, skb, (packets - oldcnt) * mss, mss);\n\t\t\tif (err < 0)\n\t\t\t\tbreak;\n\t\t\tcnt = packets;\n\t\t}\n\n\t\ttcp_skb_mark_lost(tp, skb);\n\n\t\tif (mark_head)\n\t\t\tbreak;\n\t}\n\ttcp_verify_left_out(tp);\n}\n\n/* Account newly detected lost packet(s) */\n\nstatic void tcp_update_scoreboard(struct sock *sk, int fast_rexmit)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (tcp_is_reno(tp)) {\n\t\ttcp_mark_head_lost(sk, 1, 1);\n\t} else if (tcp_is_fack(tp)) {\n\t\tint lost = tp->fackets_out - tp->reordering;\n\t\tif (lost <= 0)\n\t\t\tlost = 1;\n\t\ttcp_mark_head_lost(sk, lost, 0);\n\t} else {\n\t\tint sacked_upto = tp->sacked_out - tp->reordering;\n\t\tif (sacked_upto >= 0)\n\t\t\ttcp_mark_head_lost(sk, sacked_upto, 0);\n\t\telse if (fast_rexmit)\n\t\t\ttcp_mark_head_lost(sk, 1, 1);\n\t}\n\n\ttcp_timeout_skbs(sk);\n}\n\n/* CWND moderation, preventing bursts due to too big ACKs\n * in dubious situations.\n */\nstatic inline void tcp_moderate_cwnd(struct tcp_sock *tp)\n{\n\ttp->snd_cwnd = min(tp->snd_cwnd,\n\t\t\t   tcp_packets_in_flight(tp) + tcp_max_burst(tp));\n\ttp->snd_cwnd_stamp = tcp_time_stamp;\n}\n\n/* Lower bound on congestion window is slow start threshold\n * unless congestion avoidance choice decides to overide it.\n */\nstatic inline u32 tcp_cwnd_min(const struct sock *sk)\n{\n\tconst struct tcp_congestion_ops *ca_ops = inet_csk(sk)->icsk_ca_ops;\n\n\treturn ca_ops->min_cwnd ? ca_ops->min_cwnd(sk) : tcp_sk(sk)->snd_ssthresh;\n}\n\n/* Decrease cwnd each second ack. */\nstatic void tcp_cwnd_down(struct sock *sk, int flag)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint decr = tp->snd_cwnd_cnt + 1;\n\n\tif ((flag & (FLAG_ANY_PROGRESS | FLAG_DSACKING_ACK)) ||\n\t    (tcp_is_reno(tp) && !(flag & FLAG_NOT_DUP))) {\n\t\ttp->snd_cwnd_cnt = decr & 1;\n\t\tdecr >>= 1;\n\n\t\tif (decr && tp->snd_cwnd > tcp_cwnd_min(sk))\n\t\t\ttp->snd_cwnd -= decr;\n\n\t\ttp->snd_cwnd = min(tp->snd_cwnd, tcp_packets_in_flight(tp) + 1);\n\t\ttp->snd_cwnd_stamp = tcp_time_stamp;\n\t}\n}\n\n/* Nothing was retransmitted or returned timestamp is less\n * than timestamp of the first retransmission.\n */\nstatic inline int tcp_packet_delayed(const struct tcp_sock *tp)\n{\n\treturn !tp->retrans_stamp ||\n\t\t(tp->rx_opt.saw_tstamp && tp->rx_opt.rcv_tsecr &&\n\t\t before(tp->rx_opt.rcv_tsecr, tp->retrans_stamp));\n}\n\n/* Undo procedures. */\n\n#if FASTRETRANS_DEBUG > 1\nstatic void DBGUNDO(struct sock *sk, const char *msg)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct inet_sock *inet = inet_sk(sk);\n\n\tif (sk->sk_family == AF_INET) {\n\t\tprintk(KERN_DEBUG \"Undo %s %pI4/%u c%u l%u ss%u/%u p%u\\n\",\n\t\t       msg,\n\t\t       &inet->inet_daddr, ntohs(inet->inet_dport),\n\t\t       tp->snd_cwnd, tcp_left_out(tp),\n\t\t       tp->snd_ssthresh, tp->prior_ssthresh,\n\t\t       tp->packets_out);\n\t}\n#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)\n\telse if (sk->sk_family == AF_INET6) {\n\t\tstruct ipv6_pinfo *np = inet6_sk(sk);\n\t\tprintk(KERN_DEBUG \"Undo %s %pI6/%u c%u l%u ss%u/%u p%u\\n\",\n\t\t       msg,\n\t\t       &np->daddr, ntohs(inet->inet_dport),\n\t\t       tp->snd_cwnd, tcp_left_out(tp),\n\t\t       tp->snd_ssthresh, tp->prior_ssthresh,\n\t\t       tp->packets_out);\n\t}\n#endif\n}\n#else\n#define DBGUNDO(x...) do { } while (0)\n#endif\n\nstatic void tcp_undo_cwr(struct sock *sk, const bool undo_ssthresh)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (tp->prior_ssthresh) {\n\t\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\n\t\tif (icsk->icsk_ca_ops->undo_cwnd)\n\t\t\ttp->snd_cwnd = icsk->icsk_ca_ops->undo_cwnd(sk);\n\t\telse\n\t\t\ttp->snd_cwnd = max(tp->snd_cwnd, tp->snd_ssthresh << 1);\n\n\t\tif (undo_ssthresh && tp->prior_ssthresh > tp->snd_ssthresh) {\n\t\t\ttp->snd_ssthresh = tp->prior_ssthresh;\n\t\t\tTCP_ECN_withdraw_cwr(tp);\n\t\t}\n\t} else {\n\t\ttp->snd_cwnd = max(tp->snd_cwnd, tp->snd_ssthresh);\n\t}\n\ttp->snd_cwnd_stamp = tcp_time_stamp;\n}\n\nstatic inline int tcp_may_undo(const struct tcp_sock *tp)\n{\n\treturn tp->undo_marker && (!tp->undo_retrans || tcp_packet_delayed(tp));\n}\n\n/* People celebrate: \"We love our President!\" */\nstatic int tcp_try_undo_recovery(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (tcp_may_undo(tp)) {\n\t\tint mib_idx;\n\n\t\t/* Happy end! We did not retransmit anything\n\t\t * or our original transmission succeeded.\n\t\t */\n\t\tDBGUNDO(sk, inet_csk(sk)->icsk_ca_state == TCP_CA_Loss ? \"loss\" : \"retrans\");\n\t\ttcp_undo_cwr(sk, true);\n\t\tif (inet_csk(sk)->icsk_ca_state == TCP_CA_Loss)\n\t\t\tmib_idx = LINUX_MIB_TCPLOSSUNDO;\n\t\telse\n\t\t\tmib_idx = LINUX_MIB_TCPFULLUNDO;\n\n\t\tNET_INC_STATS_BH(sock_net(sk), mib_idx);\n\t\ttp->undo_marker = 0;\n\t}\n\tif (tp->snd_una == tp->high_seq && tcp_is_reno(tp)) {\n\t\t/* Hold old state until something *above* high_seq\n\t\t * is ACKed. For Reno it is MUST to prevent false\n\t\t * fast retransmits (RFC2582). SACK TCP is safe. */\n\t\ttcp_moderate_cwnd(tp);\n\t\treturn 1;\n\t}\n\ttcp_set_ca_state(sk, TCP_CA_Open);\n\treturn 0;\n}\n\n/* Try to undo cwnd reduction, because D-SACKs acked all retransmitted data */\nstatic void tcp_try_undo_dsack(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (tp->undo_marker && !tp->undo_retrans) {\n\t\tDBGUNDO(sk, \"D-SACK\");\n\t\ttcp_undo_cwr(sk, true);\n\t\ttp->undo_marker = 0;\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPDSACKUNDO);\n\t}\n}\n\n/* We can clear retrans_stamp when there are no retransmissions in the\n * window. It would seem that it is trivially available for us in\n * tp->retrans_out, however, that kind of assumptions doesn't consider\n * what will happen if errors occur when sending retransmission for the\n * second time. ...It could the that such segment has only\n * TCPCB_EVER_RETRANS set at the present time. It seems that checking\n * the head skb is enough except for some reneging corner cases that\n * are not worth the effort.\n *\n * Main reason for all this complexity is the fact that connection dying\n * time now depends on the validity of the retrans_stamp, in particular,\n * that successive retransmissions of a segment must not advance\n * retrans_stamp under any conditions.\n */\nstatic int tcp_any_retrans_done(const struct sock *sk)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *skb;\n\n\tif (tp->retrans_out)\n\t\treturn 1;\n\n\tskb = tcp_write_queue_head(sk);\n\tif (unlikely(skb && TCP_SKB_CB(skb)->sacked & TCPCB_EVER_RETRANS))\n\t\treturn 1;\n\n\treturn 0;\n}\n\n/* Undo during fast recovery after partial ACK. */\n\nstatic int tcp_try_undo_partial(struct sock *sk, int acked)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\t/* Partial ACK arrived. Force Hoe's retransmit. */\n\tint failed = tcp_is_reno(tp) || (tcp_fackets_out(tp) > tp->reordering);\n\n\tif (tcp_may_undo(tp)) {\n\t\t/* Plain luck! Hole if filled with delayed\n\t\t * packet, rather than with a retransmit.\n\t\t */\n\t\tif (!tcp_any_retrans_done(sk))\n\t\t\ttp->retrans_stamp = 0;\n\n\t\ttcp_update_reordering(sk, tcp_fackets_out(tp) + acked, 1);\n\n\t\tDBGUNDO(sk, \"Hoe\");\n\t\ttcp_undo_cwr(sk, false);\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPPARTIALUNDO);\n\n\t\t/* So... Do not make Hoe's retransmit yet.\n\t\t * If the first packet was delayed, the rest\n\t\t * ones are most probably delayed as well.\n\t\t */\n\t\tfailed = 0;\n\t}\n\treturn failed;\n}\n\n/* Undo during loss recovery after partial ACK. */\nstatic int tcp_try_undo_loss(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (tcp_may_undo(tp)) {\n\t\tstruct sk_buff *skb;\n\t\ttcp_for_write_queue(skb, sk) {\n\t\t\tif (skb == tcp_send_head(sk))\n\t\t\t\tbreak;\n\t\t\tTCP_SKB_CB(skb)->sacked &= ~TCPCB_LOST;\n\t\t}\n\n\t\ttcp_clear_all_retrans_hints(tp);\n\n\t\tDBGUNDO(sk, \"partial loss\");\n\t\ttp->lost_out = 0;\n\t\ttcp_undo_cwr(sk, true);\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPLOSSUNDO);\n\t\tinet_csk(sk)->icsk_retransmits = 0;\n\t\ttp->undo_marker = 0;\n\t\tif (tcp_is_sack(tp))\n\t\t\ttcp_set_ca_state(sk, TCP_CA_Open);\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nstatic inline void tcp_complete_cwr(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\t/* Do not moderate cwnd if it's already undone in cwr or recovery. */\n\tif (tp->undo_marker) {\n\t\tif (inet_csk(sk)->icsk_ca_state == TCP_CA_CWR)\n\t\t\ttp->snd_cwnd = min(tp->snd_cwnd, tp->snd_ssthresh);\n\t\telse /* PRR */\n\t\t\ttp->snd_cwnd = tp->snd_ssthresh;\n\t\ttp->snd_cwnd_stamp = tcp_time_stamp;\n\t}\n\ttcp_ca_event(sk, CA_EVENT_COMPLETE_CWR);\n}\n\nstatic void tcp_try_keep_open(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint state = TCP_CA_Open;\n\n\tif (tcp_left_out(tp) || tcp_any_retrans_done(sk))\n\t\tstate = TCP_CA_Disorder;\n\n\tif (inet_csk(sk)->icsk_ca_state != state) {\n\t\ttcp_set_ca_state(sk, state);\n\t\ttp->high_seq = tp->snd_nxt;\n\t}\n}\n\nstatic void tcp_try_to_open(struct sock *sk, int flag)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\ttcp_verify_left_out(tp);\n\n\tif (!tp->frto_counter && !tcp_any_retrans_done(sk))\n\t\ttp->retrans_stamp = 0;\n\n\tif (flag & FLAG_ECE)\n\t\ttcp_enter_cwr(sk, 1);\n\n\tif (inet_csk(sk)->icsk_ca_state != TCP_CA_CWR) {\n\t\ttcp_try_keep_open(sk);\n\t\tif (inet_csk(sk)->icsk_ca_state != TCP_CA_Open)\n\t\t\ttcp_moderate_cwnd(tp);\n\t} else {\n\t\ttcp_cwnd_down(sk, flag);\n\t}\n}\n\nstatic void tcp_mtup_probe_failed(struct sock *sk)\n{\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\n\ticsk->icsk_mtup.search_high = icsk->icsk_mtup.probe_size - 1;\n\ticsk->icsk_mtup.probe_size = 0;\n}\n\nstatic void tcp_mtup_probe_success(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\n\t/* FIXME: breaks with very large cwnd */\n\ttp->prior_ssthresh = tcp_current_ssthresh(sk);\n\ttp->snd_cwnd = tp->snd_cwnd *\n\t\t       tcp_mss_to_mtu(sk, tp->mss_cache) /\n\t\t       icsk->icsk_mtup.probe_size;\n\ttp->snd_cwnd_cnt = 0;\n\ttp->snd_cwnd_stamp = tcp_time_stamp;\n\ttp->snd_ssthresh = tcp_current_ssthresh(sk);\n\n\ticsk->icsk_mtup.search_low = icsk->icsk_mtup.probe_size;\n\ticsk->icsk_mtup.probe_size = 0;\n\ttcp_sync_mss(sk, icsk->icsk_pmtu_cookie);\n}\n\n/* Do a simple retransmit without using the backoff mechanisms in\n * tcp_timer. This is used for path mtu discovery.\n * The socket is already locked here.\n */\nvoid tcp_simple_retransmit(struct sock *sk)\n{\n\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *skb;\n\tunsigned int mss = tcp_current_mss(sk);\n\tu32 prior_lost = tp->lost_out;\n\n\ttcp_for_write_queue(skb, sk) {\n\t\tif (skb == tcp_send_head(sk))\n\t\t\tbreak;\n\t\tif (tcp_skb_seglen(skb) > mss &&\n\t\t    !(TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_ACKED)) {\n\t\t\tif (TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_RETRANS) {\n\t\t\t\tTCP_SKB_CB(skb)->sacked &= ~TCPCB_SACKED_RETRANS;\n\t\t\t\ttp->retrans_out -= tcp_skb_pcount(skb);\n\t\t\t}\n\t\t\ttcp_skb_mark_lost_uncond_verify(tp, skb);\n\t\t}\n\t}\n\n\ttcp_clear_retrans_hints_partial(tp);\n\n\tif (prior_lost == tp->lost_out)\n\t\treturn;\n\n\tif (tcp_is_reno(tp))\n\t\ttcp_limit_reno_sacked(tp);\n\n\ttcp_verify_left_out(tp);\n\n\t/* Don't muck with the congestion window here.\n\t * Reason is that we do not increase amount of _data_\n\t * in network, but units changed and effective\n\t * cwnd/ssthresh really reduced now.\n\t */\n\tif (icsk->icsk_ca_state != TCP_CA_Loss) {\n\t\ttp->high_seq = tp->snd_nxt;\n\t\ttp->snd_ssthresh = tcp_current_ssthresh(sk);\n\t\ttp->prior_ssthresh = 0;\n\t\ttp->undo_marker = 0;\n\t\ttcp_set_ca_state(sk, TCP_CA_Loss);\n\t}\n\ttcp_xmit_retransmit_queue(sk);\n}\nEXPORT_SYMBOL(tcp_simple_retransmit);\n\n/* This function implements the PRR algorithm, specifcally the PRR-SSRB\n * (proportional rate reduction with slow start reduction bound) as described in\n * http://www.ietf.org/id/draft-mathis-tcpm-proportional-rate-reduction-01.txt.\n * It computes the number of packets to send (sndcnt) based on packets newly\n * delivered:\n *   1) If the packets in flight is larger than ssthresh, PRR spreads the\n *\tcwnd reductions across a full RTT.\n *   2) If packets in flight is lower than ssthresh (such as due to excess\n *\tlosses and/or application stalls), do not perform any further cwnd\n *\treductions, but instead slow start up to ssthresh.\n */\nstatic void tcp_update_cwnd_in_recovery(struct sock *sk, int newly_acked_sacked,\n\t\t\t\t\tint fast_rexmit, int flag)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint sndcnt = 0;\n\tint delta = tp->snd_ssthresh - tcp_packets_in_flight(tp);\n\n\tif (tcp_packets_in_flight(tp) > tp->snd_ssthresh) {\n\t\tu64 dividend = (u64)tp->snd_ssthresh * tp->prr_delivered +\n\t\t\t       tp->prior_cwnd - 1;\n\t\tsndcnt = div_u64(dividend, tp->prior_cwnd) - tp->prr_out;\n\t} else {\n\t\tsndcnt = min_t(int, delta,\n\t\t\t       max_t(int, tp->prr_delivered - tp->prr_out,\n\t\t\t\t     newly_acked_sacked) + 1);\n\t}\n\n\tsndcnt = max(sndcnt, (fast_rexmit ? 1 : 0));\n\ttp->snd_cwnd = tcp_packets_in_flight(tp) + sndcnt;\n}\n\n/* Process an event, which can update packets-in-flight not trivially.\n * Main goal of this function is to calculate new estimate for left_out,\n * taking into account both packets sitting in receiver's buffer and\n * packets lost by network.\n *\n * Besides that it does CWND reduction, when packet loss is detected\n * and changes state of machine.\n *\n * It does _not_ decide what to send, it is made in function\n * tcp_xmit_retransmit_queue().\n */\nstatic void tcp_fastretrans_alert(struct sock *sk, int pkts_acked,\n\t\t\t\t  int newly_acked_sacked, bool is_dupack,\n\t\t\t\t  int flag)\n{\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint do_lost = is_dupack || ((flag & FLAG_DATA_SACKED) &&\n\t\t\t\t    (tcp_fackets_out(tp) > tp->reordering));\n\tint fast_rexmit = 0, mib_idx;\n\n\tif (WARN_ON(!tp->packets_out && tp->sacked_out))\n\t\ttp->sacked_out = 0;\n\tif (WARN_ON(!tp->sacked_out && tp->fackets_out))\n\t\ttp->fackets_out = 0;\n\n\t/* Now state machine starts.\n\t * A. ECE, hence prohibit cwnd undoing, the reduction is required. */\n\tif (flag & FLAG_ECE)\n\t\ttp->prior_ssthresh = 0;\n\n\t/* B. In all the states check for reneging SACKs. */\n\tif (tcp_check_sack_reneging(sk, flag))\n\t\treturn;\n\n\t/* C. Process data loss notification, provided it is valid. */\n\tif (tcp_is_fack(tp) && (flag & FLAG_DATA_LOST) &&\n\t    before(tp->snd_una, tp->high_seq) &&\n\t    icsk->icsk_ca_state != TCP_CA_Open &&\n\t    tp->fackets_out > tp->reordering) {\n\t\ttcp_mark_head_lost(sk, tp->fackets_out - tp->reordering, 0);\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPLOSS);\n\t}\n\n\t/* D. Check consistency of the current state. */\n\ttcp_verify_left_out(tp);\n\n\t/* E. Check state exit conditions. State can be terminated\n\t *    when high_seq is ACKed. */\n\tif (icsk->icsk_ca_state == TCP_CA_Open) {\n\t\tWARN_ON(tp->retrans_out != 0);\n\t\ttp->retrans_stamp = 0;\n\t} else if (!before(tp->snd_una, tp->high_seq)) {\n\t\tswitch (icsk->icsk_ca_state) {\n\t\tcase TCP_CA_Loss:\n\t\t\ticsk->icsk_retransmits = 0;\n\t\t\tif (tcp_try_undo_recovery(sk))\n\t\t\t\treturn;\n\t\t\tbreak;\n\n\t\tcase TCP_CA_CWR:\n\t\t\t/* CWR is to be held something *above* high_seq\n\t\t\t * is ACKed for CWR bit to reach receiver. */\n\t\t\tif (tp->snd_una != tp->high_seq) {\n\t\t\t\ttcp_complete_cwr(sk);\n\t\t\t\ttcp_set_ca_state(sk, TCP_CA_Open);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase TCP_CA_Recovery:\n\t\t\tif (tcp_is_reno(tp))\n\t\t\t\ttcp_reset_reno_sack(tp);\n\t\t\tif (tcp_try_undo_recovery(sk))\n\t\t\t\treturn;\n\t\t\ttcp_complete_cwr(sk);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/* F. Process state. */\n\tswitch (icsk->icsk_ca_state) {\n\tcase TCP_CA_Recovery:\n\t\tif (!(flag & FLAG_SND_UNA_ADVANCED)) {\n\t\t\tif (tcp_is_reno(tp) && is_dupack)\n\t\t\t\ttcp_add_reno_sack(sk);\n\t\t} else\n\t\t\tdo_lost = tcp_try_undo_partial(sk, pkts_acked);\n\t\tbreak;\n\tcase TCP_CA_Loss:\n\t\tif (flag & FLAG_DATA_ACKED)\n\t\t\ticsk->icsk_retransmits = 0;\n\t\tif (tcp_is_reno(tp) && flag & FLAG_SND_UNA_ADVANCED)\n\t\t\ttcp_reset_reno_sack(tp);\n\t\tif (!tcp_try_undo_loss(sk)) {\n\t\t\ttcp_moderate_cwnd(tp);\n\t\t\ttcp_xmit_retransmit_queue(sk);\n\t\t\treturn;\n\t\t}\n\t\tif (icsk->icsk_ca_state != TCP_CA_Open)\n\t\t\treturn;\n\t\t/* Loss is undone; fall through to processing in Open state. */\n\tdefault:\n\t\tif (tcp_is_reno(tp)) {\n\t\t\tif (flag & FLAG_SND_UNA_ADVANCED)\n\t\t\t\ttcp_reset_reno_sack(tp);\n\t\t\tif (is_dupack)\n\t\t\t\ttcp_add_reno_sack(sk);\n\t\t}\n\n\t\tif (icsk->icsk_ca_state <= TCP_CA_Disorder)\n\t\t\ttcp_try_undo_dsack(sk);\n\n\t\tif (!tcp_time_to_recover(sk)) {\n\t\t\ttcp_try_to_open(sk, flag);\n\t\t\treturn;\n\t\t}\n\n\t\t/* MTU probe failure: don't reduce cwnd */\n\t\tif (icsk->icsk_ca_state < TCP_CA_CWR &&\n\t\t    icsk->icsk_mtup.probe_size &&\n\t\t    tp->snd_una == tp->mtu_probe.probe_seq_start) {\n\t\t\ttcp_mtup_probe_failed(sk);\n\t\t\t/* Restores the reduction we did in tcp_mtup_probe() */\n\t\t\ttp->snd_cwnd++;\n\t\t\ttcp_simple_retransmit(sk);\n\t\t\treturn;\n\t\t}\n\n\t\t/* Otherwise enter Recovery state */\n\n\t\tif (tcp_is_reno(tp))\n\t\t\tmib_idx = LINUX_MIB_TCPRENORECOVERY;\n\t\telse\n\t\t\tmib_idx = LINUX_MIB_TCPSACKRECOVERY;\n\n\t\tNET_INC_STATS_BH(sock_net(sk), mib_idx);\n\n\t\ttp->high_seq = tp->snd_nxt;\n\t\ttp->prior_ssthresh = 0;\n\t\ttp->undo_marker = tp->snd_una;\n\t\ttp->undo_retrans = tp->retrans_out;\n\n\t\tif (icsk->icsk_ca_state < TCP_CA_CWR) {\n\t\t\tif (!(flag & FLAG_ECE))\n\t\t\t\ttp->prior_ssthresh = tcp_current_ssthresh(sk);\n\t\t\ttp->snd_ssthresh = icsk->icsk_ca_ops->ssthresh(sk);\n\t\t\tTCP_ECN_queue_cwr(tp);\n\t\t}\n\n\t\ttp->bytes_acked = 0;\n\t\ttp->snd_cwnd_cnt = 0;\n\t\ttp->prior_cwnd = tp->snd_cwnd;\n\t\ttp->prr_delivered = 0;\n\t\ttp->prr_out = 0;\n\t\ttcp_set_ca_state(sk, TCP_CA_Recovery);\n\t\tfast_rexmit = 1;\n\t}\n\n\tif (do_lost || (tcp_is_fack(tp) && tcp_head_timedout(sk)))\n\t\ttcp_update_scoreboard(sk, fast_rexmit);\n\ttp->prr_delivered += newly_acked_sacked;\n\ttcp_update_cwnd_in_recovery(sk, newly_acked_sacked, fast_rexmit, flag);\n\ttcp_xmit_retransmit_queue(sk);\n}\n\nvoid tcp_valid_rtt_meas(struct sock *sk, u32 seq_rtt)\n{\n\ttcp_rtt_estimator(sk, seq_rtt);\n\ttcp_set_rto(sk);\n\tinet_csk(sk)->icsk_backoff = 0;\n}\nEXPORT_SYMBOL(tcp_valid_rtt_meas);\n\n/* Read draft-ietf-tcplw-high-performance before mucking\n * with this code. (Supersedes RFC1323)\n */\nstatic void tcp_ack_saw_tstamp(struct sock *sk, int flag)\n{\n\t/* RTTM Rule: A TSecr value received in a segment is used to\n\t * update the averaged RTT measurement only if the segment\n\t * acknowledges some new data, i.e., only if it advances the\n\t * left edge of the send window.\n\t *\n\t * See draft-ietf-tcplw-high-performance-00, section 3.3.\n\t * 1998/04/10 Andrey V. Savochkin <saw@msu.ru>\n\t *\n\t * Changed: reset backoff as soon as we see the first valid sample.\n\t * If we do not, we get strongly overestimated rto. With timestamps\n\t * samples are accepted even from very old segments: f.e., when rtt=1\n\t * increases to 8, we retransmit 5 times and after 8 seconds delayed\n\t * answer arrives rto becomes 120 seconds! If at least one of segments\n\t * in window is lost... Voila.\t \t\t\t--ANK (010210)\n\t */\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\ttcp_valid_rtt_meas(sk, tcp_time_stamp - tp->rx_opt.rcv_tsecr);\n}\n\nstatic void tcp_ack_no_tstamp(struct sock *sk, u32 seq_rtt, int flag)\n{\n\t/* We don't have a timestamp. Can only use\n\t * packets that are not retransmitted to determine\n\t * rtt estimates. Also, we must not reset the\n\t * backoff for rto until we get a non-retransmitted\n\t * packet. This allows us to deal with a situation\n\t * where the network delay has increased suddenly.\n\t * I.e. Karn's algorithm. (SIGCOMM '87, p5.)\n\t */\n\n\tif (flag & FLAG_RETRANS_DATA_ACKED)\n\t\treturn;\n\n\ttcp_valid_rtt_meas(sk, seq_rtt);\n}\n\nstatic inline void tcp_ack_update_rtt(struct sock *sk, const int flag,\n\t\t\t\t      const s32 seq_rtt)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\t/* Note that peer MAY send zero echo. In this case it is ignored. (rfc1323) */\n\tif (tp->rx_opt.saw_tstamp && tp->rx_opt.rcv_tsecr)\n\t\ttcp_ack_saw_tstamp(sk, flag);\n\telse if (seq_rtt >= 0)\n\t\ttcp_ack_no_tstamp(sk, seq_rtt, flag);\n}\n\nstatic void tcp_cong_avoid(struct sock *sk, u32 ack, u32 in_flight)\n{\n\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\ticsk->icsk_ca_ops->cong_avoid(sk, ack, in_flight);\n\ttcp_sk(sk)->snd_cwnd_stamp = tcp_time_stamp;\n}\n\n/* Restart timer after forward progress on connection.\n * RFC2988 recommends to restart timer to now+rto.\n */\nstatic void tcp_rearm_rto(struct sock *sk)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\n\tif (!tp->packets_out) {\n\t\tinet_csk_clear_xmit_timer(sk, ICSK_TIME_RETRANS);\n\t} else {\n\t\tinet_csk_reset_xmit_timer(sk, ICSK_TIME_RETRANS,\n\t\t\t\t\t  inet_csk(sk)->icsk_rto, TCP_RTO_MAX);\n\t}\n}\n\n/* If we get here, the whole TSO packet has not been acked. */\nstatic u32 tcp_tso_acked(struct sock *sk, struct sk_buff *skb)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tu32 packets_acked;\n\n\tBUG_ON(!after(TCP_SKB_CB(skb)->end_seq, tp->snd_una));\n\n\tpackets_acked = tcp_skb_pcount(skb);\n\tif (tcp_trim_head(sk, skb, tp->snd_una - TCP_SKB_CB(skb)->seq))\n\t\treturn 0;\n\tpackets_acked -= tcp_skb_pcount(skb);\n\n\tif (packets_acked) {\n\t\tBUG_ON(tcp_skb_pcount(skb) == 0);\n\t\tBUG_ON(!before(TCP_SKB_CB(skb)->seq, TCP_SKB_CB(skb)->end_seq));\n\t}\n\n\treturn packets_acked;\n}\n\n/* Remove acknowledged frames from the retransmission queue. If our packet\n * is before the ack sequence we can discard it as it's confirmed to have\n * arrived at the other end.\n */\nstatic int tcp_clean_rtx_queue(struct sock *sk, int prior_fackets,\n\t\t\t       u32 prior_snd_una)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tconst struct inet_connection_sock *icsk = inet_csk(sk);\n\tstruct sk_buff *skb;\n\tu32 now = tcp_time_stamp;\n\tint fully_acked = 1;\n\tint flag = 0;\n\tu32 pkts_acked = 0;\n\tu32 reord = tp->packets_out;\n\tu32 prior_sacked = tp->sacked_out;\n\ts32 seq_rtt = -1;\n\ts32 ca_seq_rtt = -1;\n\tktime_t last_ackt = net_invalid_timestamp();\n\n\twhile ((skb = tcp_write_queue_head(sk)) && skb != tcp_send_head(sk)) {\n\t\tstruct tcp_skb_cb *scb = TCP_SKB_CB(skb);\n\t\tu32 acked_pcount;\n\t\tu8 sacked = scb->sacked;\n\n\t\t/* Determine how many packets and what bytes were acked, tso and else */\n\t\tif (after(scb->end_seq, tp->snd_una)) {\n\t\t\tif (tcp_skb_pcount(skb) == 1 ||\n\t\t\t    !after(tp->snd_una, scb->seq))\n\t\t\t\tbreak;\n\n\t\t\tacked_pcount = tcp_tso_acked(sk, skb);\n\t\t\tif (!acked_pcount)\n\t\t\t\tbreak;\n\n\t\t\tfully_acked = 0;\n\t\t} else {\n\t\t\tacked_pcount = tcp_skb_pcount(skb);\n\t\t}\n\n\t\tif (sacked & TCPCB_RETRANS) {\n\t\t\tif (sacked & TCPCB_SACKED_RETRANS)\n\t\t\t\ttp->retrans_out -= acked_pcount;\n\t\t\tflag |= FLAG_RETRANS_DATA_ACKED;\n\t\t\tca_seq_rtt = -1;\n\t\t\tseq_rtt = -1;\n\t\t\tif ((flag & FLAG_DATA_ACKED) || (acked_pcount > 1))\n\t\t\t\tflag |= FLAG_NONHEAD_RETRANS_ACKED;\n\t\t} else {\n\t\t\tca_seq_rtt = now - scb->when;\n\t\t\tlast_ackt = skb->tstamp;\n\t\t\tif (seq_rtt < 0) {\n\t\t\t\tseq_rtt = ca_seq_rtt;\n\t\t\t}\n\t\t\tif (!(sacked & TCPCB_SACKED_ACKED))\n\t\t\t\treord = min(pkts_acked, reord);\n\t\t}\n\n\t\tif (sacked & TCPCB_SACKED_ACKED)\n\t\t\ttp->sacked_out -= acked_pcount;\n\t\tif (sacked & TCPCB_LOST)\n\t\t\ttp->lost_out -= acked_pcount;\n\n\t\ttp->packets_out -= acked_pcount;\n\t\tpkts_acked += acked_pcount;\n\n\t\t/* Initial outgoing SYN's get put onto the write_queue\n\t\t * just like anything else we transmit.  It is not\n\t\t * true data, and if we misinform our callers that\n\t\t * this ACK acks real data, we will erroneously exit\n\t\t * connection startup slow start one packet too\n\t\t * quickly.  This is severely frowned upon behavior.\n\t\t */\n\t\tif (!(scb->tcp_flags & TCPHDR_SYN)) {\n\t\t\tflag |= FLAG_DATA_ACKED;\n\t\t} else {\n\t\t\tflag |= FLAG_SYN_ACKED;\n\t\t\ttp->retrans_stamp = 0;\n\t\t}\n\n\t\tif (!fully_acked)\n\t\t\tbreak;\n\n\t\ttcp_unlink_write_queue(skb, sk);\n\t\tsk_wmem_free_skb(sk, skb);\n\t\ttp->scoreboard_skb_hint = NULL;\n\t\tif (skb == tp->retransmit_skb_hint)\n\t\t\ttp->retransmit_skb_hint = NULL;\n\t\tif (skb == tp->lost_skb_hint)\n\t\t\ttp->lost_skb_hint = NULL;\n\t}\n\n\tif (likely(between(tp->snd_up, prior_snd_una, tp->snd_una)))\n\t\ttp->snd_up = tp->snd_una;\n\n\tif (skb && (TCP_SKB_CB(skb)->sacked & TCPCB_SACKED_ACKED))\n\t\tflag |= FLAG_SACK_RENEGING;\n\n\tif (flag & FLAG_ACKED) {\n\t\tconst struct tcp_congestion_ops *ca_ops\n\t\t\t= inet_csk(sk)->icsk_ca_ops;\n\n\t\tif (unlikely(icsk->icsk_mtup.probe_size &&\n\t\t\t     !after(tp->mtu_probe.probe_seq_end, tp->snd_una))) {\n\t\t\ttcp_mtup_probe_success(sk);\n\t\t}\n\n\t\ttcp_ack_update_rtt(sk, flag, seq_rtt);\n\t\ttcp_rearm_rto(sk);\n\n\t\tif (tcp_is_reno(tp)) {\n\t\t\ttcp_remove_reno_sacks(sk, pkts_acked);\n\t\t} else {\n\t\t\tint delta;\n\n\t\t\t/* Non-retransmitted hole got filled? That's reordering */\n\t\t\tif (reord < prior_fackets)\n\t\t\t\ttcp_update_reordering(sk, tp->fackets_out - reord, 0);\n\n\t\t\tdelta = tcp_is_fack(tp) ? pkts_acked :\n\t\t\t\t\t\t  prior_sacked - tp->sacked_out;\n\t\t\ttp->lost_cnt_hint -= min(tp->lost_cnt_hint, delta);\n\t\t}\n\n\t\ttp->fackets_out -= min(pkts_acked, tp->fackets_out);\n\n\t\tif (ca_ops->pkts_acked) {\n\t\t\ts32 rtt_us = -1;\n\n\t\t\t/* Is the ACK triggering packet unambiguous? */\n\t\t\tif (!(flag & FLAG_RETRANS_DATA_ACKED)) {\n\t\t\t\t/* High resolution needed and available? */\n\t\t\t\tif (ca_ops->flags & TCP_CONG_RTT_STAMP &&\n\t\t\t\t    !ktime_equal(last_ackt,\n\t\t\t\t\t\t net_invalid_timestamp()))\n\t\t\t\t\trtt_us = ktime_us_delta(ktime_get_real(),\n\t\t\t\t\t\t\t\tlast_ackt);\n\t\t\t\telse if (ca_seq_rtt >= 0)\n\t\t\t\t\trtt_us = jiffies_to_usecs(ca_seq_rtt);\n\t\t\t}\n\n\t\t\tca_ops->pkts_acked(sk, pkts_acked, rtt_us);\n\t\t}\n\t}\n\n#if FASTRETRANS_DEBUG > 0\n\tWARN_ON((int)tp->sacked_out < 0);\n\tWARN_ON((int)tp->lost_out < 0);\n\tWARN_ON((int)tp->retrans_out < 0);\n\tif (!tp->packets_out && tcp_is_sack(tp)) {\n\t\ticsk = inet_csk(sk);\n\t\tif (tp->lost_out) {\n\t\t\tprintk(KERN_DEBUG \"Leak l=%u %d\\n\",\n\t\t\t       tp->lost_out, icsk->icsk_ca_state);\n\t\t\ttp->lost_out = 0;\n\t\t}\n\t\tif (tp->sacked_out) {\n\t\t\tprintk(KERN_DEBUG \"Leak s=%u %d\\n\",\n\t\t\t       tp->sacked_out, icsk->icsk_ca_state);\n\t\t\ttp->sacked_out = 0;\n\t\t}\n\t\tif (tp->retrans_out) {\n\t\t\tprintk(KERN_DEBUG \"Leak r=%u %d\\n\",\n\t\t\t       tp->retrans_out, icsk->icsk_ca_state);\n\t\t\ttp->retrans_out = 0;\n\t\t}\n\t}\n#endif\n\treturn flag;\n}\n\nstatic void tcp_ack_probe(struct sock *sk)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\n\t/* Was it a usable window open? */\n\n\tif (!after(TCP_SKB_CB(tcp_send_head(sk))->end_seq, tcp_wnd_end(tp))) {\n\t\ticsk->icsk_backoff = 0;\n\t\tinet_csk_clear_xmit_timer(sk, ICSK_TIME_PROBE0);\n\t\t/* Socket must be waked up by subsequent tcp_data_snd_check().\n\t\t * This function is not for random using!\n\t\t */\n\t} else {\n\t\tinet_csk_reset_xmit_timer(sk, ICSK_TIME_PROBE0,\n\t\t\t\t\t  min(icsk->icsk_rto << icsk->icsk_backoff, TCP_RTO_MAX),\n\t\t\t\t\t  TCP_RTO_MAX);\n\t}\n}\n\nstatic inline int tcp_ack_is_dubious(const struct sock *sk, const int flag)\n{\n\treturn !(flag & FLAG_NOT_DUP) || (flag & FLAG_CA_ALERT) ||\n\t\tinet_csk(sk)->icsk_ca_state != TCP_CA_Open;\n}\n\nstatic inline int tcp_may_raise_cwnd(const struct sock *sk, const int flag)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\treturn (!(flag & FLAG_ECE) || tp->snd_cwnd < tp->snd_ssthresh) &&\n\t\t!((1 << inet_csk(sk)->icsk_ca_state) & (TCPF_CA_Recovery | TCPF_CA_CWR));\n}\n\n/* Check that window update is acceptable.\n * The function assumes that snd_una<=ack<=snd_next.\n */\nstatic inline int tcp_may_update_window(const struct tcp_sock *tp,\n\t\t\t\t\tconst u32 ack, const u32 ack_seq,\n\t\t\t\t\tconst u32 nwin)\n{\n\treturn\tafter(ack, tp->snd_una) ||\n\t\tafter(ack_seq, tp->snd_wl1) ||\n\t\t(ack_seq == tp->snd_wl1 && nwin > tp->snd_wnd);\n}\n\n/* Update our send window.\n *\n * Window update algorithm, described in RFC793/RFC1122 (used in linux-2.2\n * and in FreeBSD. NetBSD's one is even worse.) is wrong.\n */\nstatic int tcp_ack_update_window(struct sock *sk, const struct sk_buff *skb, u32 ack,\n\t\t\t\t u32 ack_seq)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint flag = 0;\n\tu32 nwin = ntohs(tcp_hdr(skb)->window);\n\n\tif (likely(!tcp_hdr(skb)->syn))\n\t\tnwin <<= tp->rx_opt.snd_wscale;\n\n\tif (tcp_may_update_window(tp, ack, ack_seq, nwin)) {\n\t\tflag |= FLAG_WIN_UPDATE;\n\t\ttcp_update_wl(tp, ack_seq);\n\n\t\tif (tp->snd_wnd != nwin) {\n\t\t\ttp->snd_wnd = nwin;\n\n\t\t\t/* Note, it is the only place, where\n\t\t\t * fast path is recovered for sending TCP.\n\t\t\t */\n\t\t\ttp->pred_flags = 0;\n\t\t\ttcp_fast_path_check(sk);\n\n\t\t\tif (nwin > tp->max_window) {\n\t\t\t\ttp->max_window = nwin;\n\t\t\t\ttcp_sync_mss(sk, inet_csk(sk)->icsk_pmtu_cookie);\n\t\t\t}\n\t\t}\n\t}\n\n\ttp->snd_una = ack;\n\n\treturn flag;\n}\n\n/* A very conservative spurious RTO response algorithm: reduce cwnd and\n * continue in congestion avoidance.\n */\nstatic void tcp_conservative_spur_to_response(struct tcp_sock *tp)\n{\n\ttp->snd_cwnd = min(tp->snd_cwnd, tp->snd_ssthresh);\n\ttp->snd_cwnd_cnt = 0;\n\ttp->bytes_acked = 0;\n\tTCP_ECN_queue_cwr(tp);\n\ttcp_moderate_cwnd(tp);\n}\n\n/* A conservative spurious RTO response algorithm: reduce cwnd using\n * rate halving and continue in congestion avoidance.\n */\nstatic void tcp_ratehalving_spur_to_response(struct sock *sk)\n{\n\ttcp_enter_cwr(sk, 0);\n}\n\nstatic void tcp_undo_spur_to_response(struct sock *sk, int flag)\n{\n\tif (flag & FLAG_ECE)\n\t\ttcp_ratehalving_spur_to_response(sk);\n\telse\n\t\ttcp_undo_cwr(sk, true);\n}\n\n/* F-RTO spurious RTO detection algorithm (RFC4138)\n *\n * F-RTO affects during two new ACKs following RTO (well, almost, see inline\n * comments). State (ACK number) is kept in frto_counter. When ACK advances\n * window (but not to or beyond highest sequence sent before RTO):\n *   On First ACK,  send two new segments out.\n *   On Second ACK, RTO was likely spurious. Do spurious response (response\n *                  algorithm is not part of the F-RTO detection algorithm\n *                  given in RFC4138 but can be selected separately).\n * Otherwise (basically on duplicate ACK), RTO was (likely) caused by a loss\n * and TCP falls back to conventional RTO recovery. F-RTO allows overriding\n * of Nagle, this is done using frto_counter states 2 and 3, when a new data\n * segment of any size sent during F-RTO, state 2 is upgraded to 3.\n *\n * Rationale: if the RTO was spurious, new ACKs should arrive from the\n * original window even after we transmit two new data segments.\n *\n * SACK version:\n *   on first step, wait until first cumulative ACK arrives, then move to\n *   the second step. In second step, the next ACK decides.\n *\n * F-RTO is implemented (mainly) in four functions:\n *   - tcp_use_frto() is used to determine if TCP is can use F-RTO\n *   - tcp_enter_frto() prepares TCP state on RTO if F-RTO is used, it is\n *     called when tcp_use_frto() showed green light\n *   - tcp_process_frto() handles incoming ACKs during F-RTO algorithm\n *   - tcp_enter_frto_loss() is called if there is not enough evidence\n *     to prove that the RTO is indeed spurious. It transfers the control\n *     from F-RTO to the conventional RTO recovery\n */\nstatic int tcp_process_frto(struct sock *sk, int flag)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\ttcp_verify_left_out(tp);\n\n\t/* Duplicate the behavior from Loss state (fastretrans_alert) */\n\tif (flag & FLAG_DATA_ACKED)\n\t\tinet_csk(sk)->icsk_retransmits = 0;\n\n\tif ((flag & FLAG_NONHEAD_RETRANS_ACKED) ||\n\t    ((tp->frto_counter >= 2) && (flag & FLAG_RETRANS_DATA_ACKED)))\n\t\ttp->undo_marker = 0;\n\n\tif (!before(tp->snd_una, tp->frto_highmark)) {\n\t\ttcp_enter_frto_loss(sk, (tp->frto_counter == 1 ? 2 : 3), flag);\n\t\treturn 1;\n\t}\n\n\tif (!tcp_is_sackfrto(tp)) {\n\t\t/* RFC4138 shortcoming in step 2; should also have case c):\n\t\t * ACK isn't duplicate nor advances window, e.g., opposite dir\n\t\t * data, winupdate\n\t\t */\n\t\tif (!(flag & FLAG_ANY_PROGRESS) && (flag & FLAG_NOT_DUP))\n\t\t\treturn 1;\n\n\t\tif (!(flag & FLAG_DATA_ACKED)) {\n\t\t\ttcp_enter_frto_loss(sk, (tp->frto_counter == 1 ? 0 : 3),\n\t\t\t\t\t    flag);\n\t\t\treturn 1;\n\t\t}\n\t} else {\n\t\tif (!(flag & FLAG_DATA_ACKED) && (tp->frto_counter == 1)) {\n\t\t\t/* Prevent sending of new data. */\n\t\t\ttp->snd_cwnd = min(tp->snd_cwnd,\n\t\t\t\t\t   tcp_packets_in_flight(tp));\n\t\t\treturn 1;\n\t\t}\n\n\t\tif ((tp->frto_counter >= 2) &&\n\t\t    (!(flag & FLAG_FORWARD_PROGRESS) ||\n\t\t     ((flag & FLAG_DATA_SACKED) &&\n\t\t      !(flag & FLAG_ONLY_ORIG_SACKED)))) {\n\t\t\t/* RFC4138 shortcoming (see comment above) */\n\t\t\tif (!(flag & FLAG_FORWARD_PROGRESS) &&\n\t\t\t    (flag & FLAG_NOT_DUP))\n\t\t\t\treturn 1;\n\n\t\t\ttcp_enter_frto_loss(sk, 3, flag);\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\tif (tp->frto_counter == 1) {\n\t\t/* tcp_may_send_now needs to see updated state */\n\t\ttp->snd_cwnd = tcp_packets_in_flight(tp) + 2;\n\t\ttp->frto_counter = 2;\n\n\t\tif (!tcp_may_send_now(sk))\n\t\t\ttcp_enter_frto_loss(sk, 2, flag);\n\n\t\treturn 1;\n\t} else {\n\t\tswitch (sysctl_tcp_frto_response) {\n\t\tcase 2:\n\t\t\ttcp_undo_spur_to_response(sk, flag);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\ttcp_conservative_spur_to_response(tp);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ttcp_ratehalving_spur_to_response(sk);\n\t\t\tbreak;\n\t\t}\n\t\ttp->frto_counter = 0;\n\t\ttp->undo_marker = 0;\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPSPURIOUSRTOS);\n\t}\n\treturn 0;\n}\n\n/* This routine deals with incoming acks, but not outgoing ones. */\nstatic int tcp_ack(struct sock *sk, const struct sk_buff *skb, int flag)\n{\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tu32 prior_snd_una = tp->snd_una;\n\tu32 ack_seq = TCP_SKB_CB(skb)->seq;\n\tu32 ack = TCP_SKB_CB(skb)->ack_seq;\n\tbool is_dupack = false;\n\tu32 prior_in_flight;\n\tu32 prior_fackets;\n\tint prior_packets;\n\tint prior_sacked = tp->sacked_out;\n\tint pkts_acked = 0;\n\tint newly_acked_sacked = 0;\n\tint frto_cwnd = 0;\n\n\t/* If the ack is older than previous acks\n\t * then we can probably ignore it.\n\t */\n\tif (before(ack, prior_snd_una))\n\t\tgoto old_ack;\n\n\t/* If the ack includes data we haven't sent yet, discard\n\t * this segment (RFC793 Section 3.9).\n\t */\n\tif (after(ack, tp->snd_nxt))\n\t\tgoto invalid_ack;\n\n\tif (after(ack, prior_snd_una))\n\t\tflag |= FLAG_SND_UNA_ADVANCED;\n\n\tif (sysctl_tcp_abc) {\n\t\tif (icsk->icsk_ca_state < TCP_CA_CWR)\n\t\t\ttp->bytes_acked += ack - prior_snd_una;\n\t\telse if (icsk->icsk_ca_state == TCP_CA_Loss)\n\t\t\t/* we assume just one segment left network */\n\t\t\ttp->bytes_acked += min(ack - prior_snd_una,\n\t\t\t\t\t       tp->mss_cache);\n\t}\n\n\tprior_fackets = tp->fackets_out;\n\tprior_in_flight = tcp_packets_in_flight(tp);\n\n\tif (!(flag & FLAG_SLOWPATH) && after(ack, prior_snd_una)) {\n\t\t/* Window is constant, pure forward advance.\n\t\t * No more checks are required.\n\t\t * Note, we use the fact that SND.UNA>=SND.WL2.\n\t\t */\n\t\ttcp_update_wl(tp, ack_seq);\n\t\ttp->snd_una = ack;\n\t\tflag |= FLAG_WIN_UPDATE;\n\n\t\ttcp_ca_event(sk, CA_EVENT_FAST_ACK);\n\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPHPACKS);\n\t} else {\n\t\tif (ack_seq != TCP_SKB_CB(skb)->end_seq)\n\t\t\tflag |= FLAG_DATA;\n\t\telse\n\t\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPPUREACKS);\n\n\t\tflag |= tcp_ack_update_window(sk, skb, ack, ack_seq);\n\n\t\tif (TCP_SKB_CB(skb)->sacked)\n\t\t\tflag |= tcp_sacktag_write_queue(sk, skb, prior_snd_una);\n\n\t\tif (TCP_ECN_rcv_ecn_echo(tp, tcp_hdr(skb)))\n\t\t\tflag |= FLAG_ECE;\n\n\t\ttcp_ca_event(sk, CA_EVENT_SLOW_ACK);\n\t}\n\n\t/* We passed data and got it acked, remove any soft error\n\t * log. Something worked...\n\t */\n\tsk->sk_err_soft = 0;\n\ticsk->icsk_probes_out = 0;\n\ttp->rcv_tstamp = tcp_time_stamp;\n\tprior_packets = tp->packets_out;\n\tif (!prior_packets)\n\t\tgoto no_queue;\n\n\t/* See if we can take anything off of the retransmit queue. */\n\tflag |= tcp_clean_rtx_queue(sk, prior_fackets, prior_snd_una);\n\n\tpkts_acked = prior_packets - tp->packets_out;\n\tnewly_acked_sacked = (prior_packets - prior_sacked) -\n\t\t\t     (tp->packets_out - tp->sacked_out);\n\n\tif (tp->frto_counter)\n\t\tfrto_cwnd = tcp_process_frto(sk, flag);\n\t/* Guarantee sacktag reordering detection against wrap-arounds */\n\tif (before(tp->frto_highmark, tp->snd_una))\n\t\ttp->frto_highmark = 0;\n\n\tif (tcp_ack_is_dubious(sk, flag)) {\n\t\t/* Advance CWND, if state allows this. */\n\t\tif ((flag & FLAG_DATA_ACKED) && !frto_cwnd &&\n\t\t    tcp_may_raise_cwnd(sk, flag))\n\t\t\ttcp_cong_avoid(sk, ack, prior_in_flight);\n\t\tis_dupack = !(flag & (FLAG_SND_UNA_ADVANCED | FLAG_NOT_DUP));\n\t\ttcp_fastretrans_alert(sk, pkts_acked, newly_acked_sacked,\n\t\t\t\t      is_dupack, flag);\n\t} else {\n\t\tif ((flag & FLAG_DATA_ACKED) && !frto_cwnd)\n\t\t\ttcp_cong_avoid(sk, ack, prior_in_flight);\n\t}\n\n\tif ((flag & FLAG_FORWARD_PROGRESS) || !(flag & FLAG_NOT_DUP))\n\t\tdst_confirm(__sk_dst_get(sk));\n\n\treturn 1;\n\nno_queue:\n\t/* If data was DSACKed, see if we can undo a cwnd reduction. */\n\tif (flag & FLAG_DSACKING_ACK)\n\t\ttcp_fastretrans_alert(sk, pkts_acked, newly_acked_sacked,\n\t\t\t\t      is_dupack, flag);\n\t/* If this ack opens up a zero window, clear backoff.  It was\n\t * being used to time the probes, and is probably far higher than\n\t * it needs to be for normal retransmission.\n\t */\n\tif (tcp_send_head(sk))\n\t\ttcp_ack_probe(sk);\n\treturn 1;\n\ninvalid_ack:\n\tSOCK_DEBUG(sk, \"Ack %u after %u:%u\\n\", ack, tp->snd_una, tp->snd_nxt);\n\treturn -1;\n\nold_ack:\n\t/* If data was SACKed, tag it and see if we should send more data.\n\t * If data was DSACKed, see if we can undo a cwnd reduction.\n\t */\n\tif (TCP_SKB_CB(skb)->sacked) {\n\t\tflag |= tcp_sacktag_write_queue(sk, skb, prior_snd_una);\n\t\tnewly_acked_sacked = tp->sacked_out - prior_sacked;\n\t\ttcp_fastretrans_alert(sk, pkts_acked, newly_acked_sacked,\n\t\t\t\t      is_dupack, flag);\n\t}\n\n\tSOCK_DEBUG(sk, \"Ack %u before %u:%u\\n\", ack, tp->snd_una, tp->snd_nxt);\n\treturn 0;\n}\n\n/* Look for tcp options. Normally only called on SYN and SYNACK packets.\n * But, this can also be called on packets in the established flow when\n * the fast version below fails.\n */\nvoid tcp_parse_options(const struct sk_buff *skb, struct tcp_options_received *opt_rx,\n\t\t       const u8 **hvpp, int estab)\n{\n\tconst unsigned char *ptr;\n\tconst struct tcphdr *th = tcp_hdr(skb);\n\tint length = (th->doff * 4) - sizeof(struct tcphdr);\n\n\tptr = (const unsigned char *)(th + 1);\n\topt_rx->saw_tstamp = 0;\n\n\twhile (length > 0) {\n\t\tint opcode = *ptr++;\n\t\tint opsize;\n\n\t\tswitch (opcode) {\n\t\tcase TCPOPT_EOL:\n\t\t\treturn;\n\t\tcase TCPOPT_NOP:\t/* Ref: RFC 793 section 3.1 */\n\t\t\tlength--;\n\t\t\tcontinue;\n\t\tdefault:\n\t\t\topsize = *ptr++;\n\t\t\tif (opsize < 2) /* \"silly options\" */\n\t\t\t\treturn;\n\t\t\tif (opsize > length)\n\t\t\t\treturn;\t/* don't parse partial options */\n\t\t\tswitch (opcode) {\n\t\t\tcase TCPOPT_MSS:\n\t\t\t\tif (opsize == TCPOLEN_MSS && th->syn && !estab) {\n\t\t\t\t\tu16 in_mss = get_unaligned_be16(ptr);\n\t\t\t\t\tif (in_mss) {\n\t\t\t\t\t\tif (opt_rx->user_mss &&\n\t\t\t\t\t\t    opt_rx->user_mss < in_mss)\n\t\t\t\t\t\t\tin_mss = opt_rx->user_mss;\n\t\t\t\t\t\topt_rx->mss_clamp = in_mss;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase TCPOPT_WINDOW:\n\t\t\t\tif (opsize == TCPOLEN_WINDOW && th->syn &&\n\t\t\t\t    !estab && sysctl_tcp_window_scaling) {\n\t\t\t\t\t__u8 snd_wscale = *(__u8 *)ptr;\n\t\t\t\t\topt_rx->wscale_ok = 1;\n\t\t\t\t\tif (snd_wscale > 14) {\n\t\t\t\t\t\tif (net_ratelimit())\n\t\t\t\t\t\t\tprintk(KERN_INFO \"tcp_parse_options: Illegal window \"\n\t\t\t\t\t\t\t       \"scaling value %d >14 received.\\n\",\n\t\t\t\t\t\t\t       snd_wscale);\n\t\t\t\t\t\tsnd_wscale = 14;\n\t\t\t\t\t}\n\t\t\t\t\topt_rx->snd_wscale = snd_wscale;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase TCPOPT_TIMESTAMP:\n\t\t\t\tif ((opsize == TCPOLEN_TIMESTAMP) &&\n\t\t\t\t    ((estab && opt_rx->tstamp_ok) ||\n\t\t\t\t     (!estab && sysctl_tcp_timestamps))) {\n\t\t\t\t\topt_rx->saw_tstamp = 1;\n\t\t\t\t\topt_rx->rcv_tsval = get_unaligned_be32(ptr);\n\t\t\t\t\topt_rx->rcv_tsecr = get_unaligned_be32(ptr + 4);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase TCPOPT_SACK_PERM:\n\t\t\t\tif (opsize == TCPOLEN_SACK_PERM && th->syn &&\n\t\t\t\t    !estab && sysctl_tcp_sack) {\n\t\t\t\t\topt_rx->sack_ok = 1;\n\t\t\t\t\ttcp_sack_reset(opt_rx);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase TCPOPT_SACK:\n\t\t\t\tif ((opsize >= (TCPOLEN_SACK_BASE + TCPOLEN_SACK_PERBLOCK)) &&\n\t\t\t\t   !((opsize - TCPOLEN_SACK_BASE) % TCPOLEN_SACK_PERBLOCK) &&\n\t\t\t\t   opt_rx->sack_ok) {\n\t\t\t\t\tTCP_SKB_CB(skb)->sacked = (ptr - 2) - (unsigned char *)th;\n\t\t\t\t}\n\t\t\t\tbreak;\n#ifdef CONFIG_TCP_MD5SIG\n\t\t\tcase TCPOPT_MD5SIG:\n\t\t\t\t/*\n\t\t\t\t * The MD5 Hash has already been\n\t\t\t\t * checked (see tcp_v{4,6}_do_rcv()).\n\t\t\t\t */\n\t\t\t\tbreak;\n#endif\n\t\t\tcase TCPOPT_COOKIE:\n\t\t\t\t/* This option is variable length.\n\t\t\t\t */\n\t\t\t\tswitch (opsize) {\n\t\t\t\tcase TCPOLEN_COOKIE_BASE:\n\t\t\t\t\t/* not yet implemented */\n\t\t\t\t\tbreak;\n\t\t\t\tcase TCPOLEN_COOKIE_PAIR:\n\t\t\t\t\t/* not yet implemented */\n\t\t\t\t\tbreak;\n\t\t\t\tcase TCPOLEN_COOKIE_MIN+0:\n\t\t\t\tcase TCPOLEN_COOKIE_MIN+2:\n\t\t\t\tcase TCPOLEN_COOKIE_MIN+4:\n\t\t\t\tcase TCPOLEN_COOKIE_MIN+6:\n\t\t\t\tcase TCPOLEN_COOKIE_MAX:\n\t\t\t\t\t/* 16-bit multiple */\n\t\t\t\t\topt_rx->cookie_plus = opsize;\n\t\t\t\t\t*hvpp = ptr;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t/* ignore option */\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tptr += opsize-2;\n\t\t\tlength -= opsize;\n\t\t}\n\t}\n}\nEXPORT_SYMBOL(tcp_parse_options);\n\nstatic int tcp_parse_aligned_timestamp(struct tcp_sock *tp, const struct tcphdr *th)\n{\n\tconst __be32 *ptr = (const __be32 *)(th + 1);\n\n\tif (*ptr == htonl((TCPOPT_NOP << 24) | (TCPOPT_NOP << 16)\n\t\t\t  | (TCPOPT_TIMESTAMP << 8) | TCPOLEN_TIMESTAMP)) {\n\t\ttp->rx_opt.saw_tstamp = 1;\n\t\t++ptr;\n\t\ttp->rx_opt.rcv_tsval = ntohl(*ptr);\n\t\t++ptr;\n\t\ttp->rx_opt.rcv_tsecr = ntohl(*ptr);\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n/* Fast parse options. This hopes to only see timestamps.\n * If it is wrong it falls back on tcp_parse_options().\n */\nstatic int tcp_fast_parse_options(const struct sk_buff *skb,\n\t\t\t\t  const struct tcphdr *th,\n\t\t\t\t  struct tcp_sock *tp, const u8 **hvpp)\n{\n\t/* In the spirit of fast parsing, compare doff directly to constant\n\t * values.  Because equality is used, short doff can be ignored here.\n\t */\n\tif (th->doff == (sizeof(*th) / 4)) {\n\t\ttp->rx_opt.saw_tstamp = 0;\n\t\treturn 0;\n\t} else if (tp->rx_opt.tstamp_ok &&\n\t\t   th->doff == ((sizeof(*th) + TCPOLEN_TSTAMP_ALIGNED) / 4)) {\n\t\tif (tcp_parse_aligned_timestamp(tp, th))\n\t\t\treturn 1;\n\t}\n\ttcp_parse_options(skb, &tp->rx_opt, hvpp, 1);\n\treturn 1;\n}\n\n#ifdef CONFIG_TCP_MD5SIG\n/*\n * Parse MD5 Signature option\n */\nconst u8 *tcp_parse_md5sig_option(const struct tcphdr *th)\n{\n\tint length = (th->doff << 2) - sizeof(*th);\n\tconst u8 *ptr = (const u8 *)(th + 1);\n\n\t/* If the TCP option is too short, we can short cut */\n\tif (length < TCPOLEN_MD5SIG)\n\t\treturn NULL;\n\n\twhile (length > 0) {\n\t\tint opcode = *ptr++;\n\t\tint opsize;\n\n\t\tswitch(opcode) {\n\t\tcase TCPOPT_EOL:\n\t\t\treturn NULL;\n\t\tcase TCPOPT_NOP:\n\t\t\tlength--;\n\t\t\tcontinue;\n\t\tdefault:\n\t\t\topsize = *ptr++;\n\t\t\tif (opsize < 2 || opsize > length)\n\t\t\t\treturn NULL;\n\t\t\tif (opcode == TCPOPT_MD5SIG)\n\t\t\t\treturn opsize == TCPOLEN_MD5SIG ? ptr : NULL;\n\t\t}\n\t\tptr += opsize - 2;\n\t\tlength -= opsize;\n\t}\n\treturn NULL;\n}\nEXPORT_SYMBOL(tcp_parse_md5sig_option);\n#endif\n\nstatic inline void tcp_store_ts_recent(struct tcp_sock *tp)\n{\n\ttp->rx_opt.ts_recent = tp->rx_opt.rcv_tsval;\n\ttp->rx_opt.ts_recent_stamp = get_seconds();\n}\n\nstatic inline void tcp_replace_ts_recent(struct tcp_sock *tp, u32 seq)\n{\n\tif (tp->rx_opt.saw_tstamp && !after(seq, tp->rcv_wup)) {\n\t\t/* PAWS bug workaround wrt. ACK frames, the PAWS discard\n\t\t * extra check below makes sure this can only happen\n\t\t * for pure ACK frames.  -DaveM\n\t\t *\n\t\t * Not only, also it occurs for expired timestamps.\n\t\t */\n\n\t\tif (tcp_paws_check(&tp->rx_opt, 0))\n\t\t\ttcp_store_ts_recent(tp);\n\t}\n}\n\n/* Sorry, PAWS as specified is broken wrt. pure-ACKs -DaveM\n *\n * It is not fatal. If this ACK does _not_ change critical state (seqs, window)\n * it can pass through stack. So, the following predicate verifies that\n * this segment is not used for anything but congestion avoidance or\n * fast retransmit. Moreover, we even are able to eliminate most of such\n * second order effects, if we apply some small \"replay\" window (~RTO)\n * to timestamp space.\n *\n * All these measures still do not guarantee that we reject wrapped ACKs\n * on networks with high bandwidth, when sequence space is recycled fastly,\n * but it guarantees that such events will be very rare and do not affect\n * connection seriously. This doesn't look nice, but alas, PAWS is really\n * buggy extension.\n *\n * [ Later note. Even worse! It is buggy for segments _with_ data. RFC\n * states that events when retransmit arrives after original data are rare.\n * It is a blatant lie. VJ forgot about fast retransmit! 8)8) It is\n * the biggest problem on large power networks even with minor reordering.\n * OK, let's give it small replay window. If peer clock is even 1hz, it is safe\n * up to bandwidth of 18Gigabit/sec. 8) ]\n */\n\nstatic int tcp_disordered_ack(const struct sock *sk, const struct sk_buff *skb)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\tconst struct tcphdr *th = tcp_hdr(skb);\n\tu32 seq = TCP_SKB_CB(skb)->seq;\n\tu32 ack = TCP_SKB_CB(skb)->ack_seq;\n\n\treturn (/* 1. Pure ACK with correct sequence number. */\n\t\t(th->ack && seq == TCP_SKB_CB(skb)->end_seq && seq == tp->rcv_nxt) &&\n\n\t\t/* 2. ... and duplicate ACK. */\n\t\tack == tp->snd_una &&\n\n\t\t/* 3. ... and does not update window. */\n\t\t!tcp_may_update_window(tp, ack, seq, ntohs(th->window) << tp->rx_opt.snd_wscale) &&\n\n\t\t/* 4. ... and sits in replay window. */\n\t\t(s32)(tp->rx_opt.ts_recent - tp->rx_opt.rcv_tsval) <= (inet_csk(sk)->icsk_rto * 1024) / HZ);\n}\n\nstatic inline int tcp_paws_discard(const struct sock *sk,\n\t\t\t\t   const struct sk_buff *skb)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\n\treturn !tcp_paws_check(&tp->rx_opt, TCP_PAWS_WINDOW) &&\n\t       !tcp_disordered_ack(sk, skb);\n}\n\n/* Check segment sequence number for validity.\n *\n * Segment controls are considered valid, if the segment\n * fits to the window after truncation to the window. Acceptability\n * of data (and SYN, FIN, of course) is checked separately.\n * See tcp_data_queue(), for example.\n *\n * Also, controls (RST is main one) are accepted using RCV.WUP instead\n * of RCV.NXT. Peer still did not advance his SND.UNA when we\n * delayed ACK, so that hisSND.UNA<=ourRCV.WUP.\n * (borrowed from freebsd)\n */\n\nstatic inline int tcp_sequence(const struct tcp_sock *tp, u32 seq, u32 end_seq)\n{\n\treturn\t!before(end_seq, tp->rcv_wup) &&\n\t\t!after(seq, tp->rcv_nxt + tcp_receive_window(tp));\n}\n\n/* When we get a reset we do this. */\nstatic void tcp_reset(struct sock *sk)\n{\n\t/* We want the right error as BSD sees it (and indeed as we do). */\n\tswitch (sk->sk_state) {\n\tcase TCP_SYN_SENT:\n\t\tsk->sk_err = ECONNREFUSED;\n\t\tbreak;\n\tcase TCP_CLOSE_WAIT:\n\t\tsk->sk_err = EPIPE;\n\t\tbreak;\n\tcase TCP_CLOSE:\n\t\treturn;\n\tdefault:\n\t\tsk->sk_err = ECONNRESET;\n\t}\n\t/* This barrier is coupled with smp_rmb() in tcp_poll() */\n\tsmp_wmb();\n\n\tif (!sock_flag(sk, SOCK_DEAD))\n\t\tsk->sk_error_report(sk);\n\n\ttcp_done(sk);\n}\n\n/*\n * \tProcess the FIN bit. This now behaves as it is supposed to work\n *\tand the FIN takes effect when it is validly part of sequence\n *\tspace. Not before when we get holes.\n *\n *\tIf we are ESTABLISHED, a received fin moves us to CLOSE-WAIT\n *\t(and thence onto LAST-ACK and finally, CLOSE, we never enter\n *\tTIME-WAIT)\n *\n *\tIf we are in FINWAIT-1, a received FIN indicates simultaneous\n *\tclose and we go into CLOSING (and later onto TIME-WAIT)\n *\n *\tIf we are in FINWAIT-2, a received FIN moves us to TIME-WAIT.\n */\nstatic void tcp_fin(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tinet_csk_schedule_ack(sk);\n\n\tsk->sk_shutdown |= RCV_SHUTDOWN;\n\tsock_set_flag(sk, SOCK_DONE);\n\n\tswitch (sk->sk_state) {\n\tcase TCP_SYN_RECV:\n\tcase TCP_ESTABLISHED:\n\t\t/* Move to CLOSE_WAIT */\n\t\ttcp_set_state(sk, TCP_CLOSE_WAIT);\n\t\tinet_csk(sk)->icsk_ack.pingpong = 1;\n\t\tbreak;\n\n\tcase TCP_CLOSE_WAIT:\n\tcase TCP_CLOSING:\n\t\t/* Received a retransmission of the FIN, do\n\t\t * nothing.\n\t\t */\n\t\tbreak;\n\tcase TCP_LAST_ACK:\n\t\t/* RFC793: Remain in the LAST-ACK state. */\n\t\tbreak;\n\n\tcase TCP_FIN_WAIT1:\n\t\t/* This case occurs when a simultaneous close\n\t\t * happens, we must ack the received FIN and\n\t\t * enter the CLOSING state.\n\t\t */\n\t\ttcp_send_ack(sk);\n\t\ttcp_set_state(sk, TCP_CLOSING);\n\t\tbreak;\n\tcase TCP_FIN_WAIT2:\n\t\t/* Received a FIN -- send ACK and enter TIME_WAIT. */\n\t\ttcp_send_ack(sk);\n\t\ttcp_time_wait(sk, TCP_TIME_WAIT, 0);\n\t\tbreak;\n\tdefault:\n\t\t/* Only TCP_LISTEN and TCP_CLOSE are left, in these\n\t\t * cases we should never reach this piece of code.\n\t\t */\n\t\tprintk(KERN_ERR \"%s: Impossible, sk->sk_state=%d\\n\",\n\t\t       __func__, sk->sk_state);\n\t\tbreak;\n\t}\n\n\t/* It _is_ possible, that we have something out-of-order _after_ FIN.\n\t * Probably, we should reset in this case. For now drop them.\n\t */\n\t__skb_queue_purge(&tp->out_of_order_queue);\n\tif (tcp_is_sack(tp))\n\t\ttcp_sack_reset(&tp->rx_opt);\n\tsk_mem_reclaim(sk);\n\n\tif (!sock_flag(sk, SOCK_DEAD)) {\n\t\tsk->sk_state_change(sk);\n\n\t\t/* Do not send POLL_HUP for half duplex close. */\n\t\tif (sk->sk_shutdown == SHUTDOWN_MASK ||\n\t\t    sk->sk_state == TCP_CLOSE)\n\t\t\tsk_wake_async(sk, SOCK_WAKE_WAITD, POLL_HUP);\n\t\telse\n\t\t\tsk_wake_async(sk, SOCK_WAKE_WAITD, POLL_IN);\n\t}\n}\n\nstatic inline int tcp_sack_extend(struct tcp_sack_block *sp, u32 seq,\n\t\t\t\t  u32 end_seq)\n{\n\tif (!after(seq, sp->end_seq) && !after(sp->start_seq, end_seq)) {\n\t\tif (before(seq, sp->start_seq))\n\t\t\tsp->start_seq = seq;\n\t\tif (after(end_seq, sp->end_seq))\n\t\t\tsp->end_seq = end_seq;\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nstatic void tcp_dsack_set(struct sock *sk, u32 seq, u32 end_seq)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (tcp_is_sack(tp) && sysctl_tcp_dsack) {\n\t\tint mib_idx;\n\n\t\tif (before(seq, tp->rcv_nxt))\n\t\t\tmib_idx = LINUX_MIB_TCPDSACKOLDSENT;\n\t\telse\n\t\t\tmib_idx = LINUX_MIB_TCPDSACKOFOSENT;\n\n\t\tNET_INC_STATS_BH(sock_net(sk), mib_idx);\n\n\t\ttp->rx_opt.dsack = 1;\n\t\ttp->duplicate_sack[0].start_seq = seq;\n\t\ttp->duplicate_sack[0].end_seq = end_seq;\n\t}\n}\n\nstatic void tcp_dsack_extend(struct sock *sk, u32 seq, u32 end_seq)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (!tp->rx_opt.dsack)\n\t\ttcp_dsack_set(sk, seq, end_seq);\n\telse\n\t\ttcp_sack_extend(tp->duplicate_sack, seq, end_seq);\n}\n\nstatic void tcp_send_dupack(struct sock *sk, const struct sk_buff *skb)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (TCP_SKB_CB(skb)->end_seq != TCP_SKB_CB(skb)->seq &&\n\t    before(TCP_SKB_CB(skb)->seq, tp->rcv_nxt)) {\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_DELAYEDACKLOST);\n\t\ttcp_enter_quickack_mode(sk);\n\n\t\tif (tcp_is_sack(tp) && sysctl_tcp_dsack) {\n\t\t\tu32 end_seq = TCP_SKB_CB(skb)->end_seq;\n\n\t\t\tif (after(TCP_SKB_CB(skb)->end_seq, tp->rcv_nxt))\n\t\t\t\tend_seq = tp->rcv_nxt;\n\t\t\ttcp_dsack_set(sk, TCP_SKB_CB(skb)->seq, end_seq);\n\t\t}\n\t}\n\n\ttcp_send_ack(sk);\n}\n\n/* These routines update the SACK block as out-of-order packets arrive or\n * in-order packets close up the sequence space.\n */\nstatic void tcp_sack_maybe_coalesce(struct tcp_sock *tp)\n{\n\tint this_sack;\n\tstruct tcp_sack_block *sp = &tp->selective_acks[0];\n\tstruct tcp_sack_block *swalk = sp + 1;\n\n\t/* See if the recent change to the first SACK eats into\n\t * or hits the sequence space of other SACK blocks, if so coalesce.\n\t */\n\tfor (this_sack = 1; this_sack < tp->rx_opt.num_sacks;) {\n\t\tif (tcp_sack_extend(sp, swalk->start_seq, swalk->end_seq)) {\n\t\t\tint i;\n\n\t\t\t/* Zap SWALK, by moving every further SACK up by one slot.\n\t\t\t * Decrease num_sacks.\n\t\t\t */\n\t\t\ttp->rx_opt.num_sacks--;\n\t\t\tfor (i = this_sack; i < tp->rx_opt.num_sacks; i++)\n\t\t\t\tsp[i] = sp[i + 1];\n\t\t\tcontinue;\n\t\t}\n\t\tthis_sack++, swalk++;\n\t}\n}\n\nstatic void tcp_sack_new_ofo_skb(struct sock *sk, u32 seq, u32 end_seq)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct tcp_sack_block *sp = &tp->selective_acks[0];\n\tint cur_sacks = tp->rx_opt.num_sacks;\n\tint this_sack;\n\n\tif (!cur_sacks)\n\t\tgoto new_sack;\n\n\tfor (this_sack = 0; this_sack < cur_sacks; this_sack++, sp++) {\n\t\tif (tcp_sack_extend(sp, seq, end_seq)) {\n\t\t\t/* Rotate this_sack to the first one. */\n\t\t\tfor (; this_sack > 0; this_sack--, sp--)\n\t\t\t\tswap(*sp, *(sp - 1));\n\t\t\tif (cur_sacks > 1)\n\t\t\t\ttcp_sack_maybe_coalesce(tp);\n\t\t\treturn;\n\t\t}\n\t}\n\n\t/* Could not find an adjacent existing SACK, build a new one,\n\t * put it at the front, and shift everyone else down.  We\n\t * always know there is at least one SACK present already here.\n\t *\n\t * If the sack array is full, forget about the last one.\n\t */\n\tif (this_sack >= TCP_NUM_SACKS) {\n\t\tthis_sack--;\n\t\ttp->rx_opt.num_sacks--;\n\t\tsp--;\n\t}\n\tfor (; this_sack > 0; this_sack--, sp--)\n\t\t*sp = *(sp - 1);\n\nnew_sack:\n\t/* Build the new head SACK, and we're done. */\n\tsp->start_seq = seq;\n\tsp->end_seq = end_seq;\n\ttp->rx_opt.num_sacks++;\n}\n\n/* RCV.NXT advances, some SACKs should be eaten. */\n\nstatic void tcp_sack_remove(struct tcp_sock *tp)\n{\n\tstruct tcp_sack_block *sp = &tp->selective_acks[0];\n\tint num_sacks = tp->rx_opt.num_sacks;\n\tint this_sack;\n\n\t/* Empty ofo queue, hence, all the SACKs are eaten. Clear. */\n\tif (skb_queue_empty(&tp->out_of_order_queue)) {\n\t\ttp->rx_opt.num_sacks = 0;\n\t\treturn;\n\t}\n\n\tfor (this_sack = 0; this_sack < num_sacks;) {\n\t\t/* Check if the start of the sack is covered by RCV.NXT. */\n\t\tif (!before(tp->rcv_nxt, sp->start_seq)) {\n\t\t\tint i;\n\n\t\t\t/* RCV.NXT must cover all the block! */\n\t\t\tWARN_ON(before(tp->rcv_nxt, sp->end_seq));\n\n\t\t\t/* Zap this SACK, by moving forward any other SACKS. */\n\t\t\tfor (i=this_sack+1; i < num_sacks; i++)\n\t\t\t\ttp->selective_acks[i-1] = tp->selective_acks[i];\n\t\t\tnum_sacks--;\n\t\t\tcontinue;\n\t\t}\n\t\tthis_sack++;\n\t\tsp++;\n\t}\n\ttp->rx_opt.num_sacks = num_sacks;\n}\n\n/* This one checks to see if we can put data from the\n * out_of_order queue into the receive_queue.\n */\nstatic void tcp_ofo_queue(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\t__u32 dsack_high = tp->rcv_nxt;\n\tstruct sk_buff *skb;\n\n\twhile ((skb = skb_peek(&tp->out_of_order_queue)) != NULL) {\n\t\tif (after(TCP_SKB_CB(skb)->seq, tp->rcv_nxt))\n\t\t\tbreak;\n\n\t\tif (before(TCP_SKB_CB(skb)->seq, dsack_high)) {\n\t\t\t__u32 dsack = dsack_high;\n\t\t\tif (before(TCP_SKB_CB(skb)->end_seq, dsack_high))\n\t\t\t\tdsack_high = TCP_SKB_CB(skb)->end_seq;\n\t\t\ttcp_dsack_extend(sk, TCP_SKB_CB(skb)->seq, dsack);\n\t\t}\n\n\t\tif (!after(TCP_SKB_CB(skb)->end_seq, tp->rcv_nxt)) {\n\t\t\tSOCK_DEBUG(sk, \"ofo packet was already received\\n\");\n\t\t\t__skb_unlink(skb, &tp->out_of_order_queue);\n\t\t\t__kfree_skb(skb);\n\t\t\tcontinue;\n\t\t}\n\t\tSOCK_DEBUG(sk, \"ofo requeuing : rcv_next %X seq %X - %X\\n\",\n\t\t\t   tp->rcv_nxt, TCP_SKB_CB(skb)->seq,\n\t\t\t   TCP_SKB_CB(skb)->end_seq);\n\n\t\t__skb_unlink(skb, &tp->out_of_order_queue);\n\t\t__skb_queue_tail(&sk->sk_receive_queue, skb);\n\t\ttp->rcv_nxt = TCP_SKB_CB(skb)->end_seq;\n\t\tif (tcp_hdr(skb)->fin)\n\t\t\ttcp_fin(sk);\n\t}\n}\n\nstatic int tcp_prune_ofo_queue(struct sock *sk);\nstatic int tcp_prune_queue(struct sock *sk);\n\nstatic inline int tcp_try_rmem_schedule(struct sock *sk, unsigned int size)\n{\n\tif (atomic_read(&sk->sk_rmem_alloc) > sk->sk_rcvbuf ||\n\t    !sk_rmem_schedule(sk, size)) {\n\n\t\tif (tcp_prune_queue(sk) < 0)\n\t\t\treturn -1;\n\n\t\tif (!sk_rmem_schedule(sk, size)) {\n\t\t\tif (!tcp_prune_ofo_queue(sk))\n\t\t\t\treturn -1;\n\n\t\t\tif (!sk_rmem_schedule(sk, size))\n\t\t\t\treturn -1;\n\t\t}\n\t}\n\treturn 0;\n}\n\nstatic void tcp_data_queue(struct sock *sk, struct sk_buff *skb)\n{\n\tconst struct tcphdr *th = tcp_hdr(skb);\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint eaten = -1;\n\n\tif (TCP_SKB_CB(skb)->seq == TCP_SKB_CB(skb)->end_seq)\n\t\tgoto drop;\n\n\tskb_dst_drop(skb);\n\t__skb_pull(skb, th->doff * 4);\n\n\tTCP_ECN_accept_cwr(tp, skb);\n\n\ttp->rx_opt.dsack = 0;\n\n\t/*  Queue data for delivery to the user.\n\t *  Packets in sequence go to the receive queue.\n\t *  Out of sequence packets to the out_of_order_queue.\n\t */\n\tif (TCP_SKB_CB(skb)->seq == tp->rcv_nxt) {\n\t\tif (tcp_receive_window(tp) == 0)\n\t\t\tgoto out_of_window;\n\n\t\t/* Ok. In sequence. In window. */\n\t\tif (tp->ucopy.task == current &&\n\t\t    tp->copied_seq == tp->rcv_nxt && tp->ucopy.len &&\n\t\t    sock_owned_by_user(sk) && !tp->urg_data) {\n\t\t\tint chunk = min_t(unsigned int, skb->len,\n\t\t\t\t\t  tp->ucopy.len);\n\n\t\t\t__set_current_state(TASK_RUNNING);\n\n\t\t\tlocal_bh_enable();\n\t\t\tif (!skb_copy_datagram_iovec(skb, 0, tp->ucopy.iov, chunk)) {\n\t\t\t\ttp->ucopy.len -= chunk;\n\t\t\t\ttp->copied_seq += chunk;\n\t\t\t\teaten = (chunk == skb->len);\n\t\t\t\ttcp_rcv_space_adjust(sk);\n\t\t\t}\n\t\t\tlocal_bh_disable();\n\t\t}\n\n\t\tif (eaten <= 0) {\nqueue_and_out:\n\t\t\tif (eaten < 0 &&\n\t\t\t    tcp_try_rmem_schedule(sk, skb->truesize))\n\t\t\t\tgoto drop;\n\n\t\t\tskb_set_owner_r(skb, sk);\n\t\t\t__skb_queue_tail(&sk->sk_receive_queue, skb);\n\t\t}\n\t\ttp->rcv_nxt = TCP_SKB_CB(skb)->end_seq;\n\t\tif (skb->len)\n\t\t\ttcp_event_data_recv(sk, skb);\n\t\tif (th->fin)\n\t\t\ttcp_fin(sk);\n\n\t\tif (!skb_queue_empty(&tp->out_of_order_queue)) {\n\t\t\ttcp_ofo_queue(sk);\n\n\t\t\t/* RFC2581. 4.2. SHOULD send immediate ACK, when\n\t\t\t * gap in queue is filled.\n\t\t\t */\n\t\t\tif (skb_queue_empty(&tp->out_of_order_queue))\n\t\t\t\tinet_csk(sk)->icsk_ack.pingpong = 0;\n\t\t}\n\n\t\tif (tp->rx_opt.num_sacks)\n\t\t\ttcp_sack_remove(tp);\n\n\t\ttcp_fast_path_check(sk);\n\n\t\tif (eaten > 0)\n\t\t\t__kfree_skb(skb);\n\t\telse if (!sock_flag(sk, SOCK_DEAD))\n\t\t\tsk->sk_data_ready(sk, 0);\n\t\treturn;\n\t}\n\n\tif (!after(TCP_SKB_CB(skb)->end_seq, tp->rcv_nxt)) {\n\t\t/* A retransmit, 2nd most common case.  Force an immediate ack. */\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_DELAYEDACKLOST);\n\t\ttcp_dsack_set(sk, TCP_SKB_CB(skb)->seq, TCP_SKB_CB(skb)->end_seq);\n\nout_of_window:\n\t\ttcp_enter_quickack_mode(sk);\n\t\tinet_csk_schedule_ack(sk);\ndrop:\n\t\t__kfree_skb(skb);\n\t\treturn;\n\t}\n\n\t/* Out of window. F.e. zero window probe. */\n\tif (!before(TCP_SKB_CB(skb)->seq, tp->rcv_nxt + tcp_receive_window(tp)))\n\t\tgoto out_of_window;\n\n\ttcp_enter_quickack_mode(sk);\n\n\tif (before(TCP_SKB_CB(skb)->seq, tp->rcv_nxt)) {\n\t\t/* Partial packet, seq < rcv_next < end_seq */\n\t\tSOCK_DEBUG(sk, \"partial packet: rcv_next %X seq %X - %X\\n\",\n\t\t\t   tp->rcv_nxt, TCP_SKB_CB(skb)->seq,\n\t\t\t   TCP_SKB_CB(skb)->end_seq);\n\n\t\ttcp_dsack_set(sk, TCP_SKB_CB(skb)->seq, tp->rcv_nxt);\n\n\t\t/* If window is closed, drop tail of packet. But after\n\t\t * remembering D-SACK for its head made in previous line.\n\t\t */\n\t\tif (!tcp_receive_window(tp))\n\t\t\tgoto out_of_window;\n\t\tgoto queue_and_out;\n\t}\n\n\tTCP_ECN_check_ce(tp, skb);\n\n\tif (tcp_try_rmem_schedule(sk, skb->truesize))\n\t\tgoto drop;\n\n\t/* Disable header prediction. */\n\ttp->pred_flags = 0;\n\tinet_csk_schedule_ack(sk);\n\n\tSOCK_DEBUG(sk, \"out of order segment: rcv_next %X seq %X - %X\\n\",\n\t\t   tp->rcv_nxt, TCP_SKB_CB(skb)->seq, TCP_SKB_CB(skb)->end_seq);\n\n\tskb_set_owner_r(skb, sk);\n\n\tif (!skb_peek(&tp->out_of_order_queue)) {\n\t\t/* Initial out of order segment, build 1 SACK. */\n\t\tif (tcp_is_sack(tp)) {\n\t\t\ttp->rx_opt.num_sacks = 1;\n\t\t\ttp->selective_acks[0].start_seq = TCP_SKB_CB(skb)->seq;\n\t\t\ttp->selective_acks[0].end_seq =\n\t\t\t\t\t\tTCP_SKB_CB(skb)->end_seq;\n\t\t}\n\t\t__skb_queue_head(&tp->out_of_order_queue, skb);\n\t} else {\n\t\tstruct sk_buff *skb1 = skb_peek_tail(&tp->out_of_order_queue);\n\t\tu32 seq = TCP_SKB_CB(skb)->seq;\n\t\tu32 end_seq = TCP_SKB_CB(skb)->end_seq;\n\n\t\tif (seq == TCP_SKB_CB(skb1)->end_seq) {\n\t\t\t__skb_queue_after(&tp->out_of_order_queue, skb1, skb);\n\n\t\t\tif (!tp->rx_opt.num_sacks ||\n\t\t\t    tp->selective_acks[0].end_seq != seq)\n\t\t\t\tgoto add_sack;\n\n\t\t\t/* Common case: data arrive in order after hole. */\n\t\t\ttp->selective_acks[0].end_seq = end_seq;\n\t\t\treturn;\n\t\t}\n\n\t\t/* Find place to insert this segment. */\n\t\twhile (1) {\n\t\t\tif (!after(TCP_SKB_CB(skb1)->seq, seq))\n\t\t\t\tbreak;\n\t\t\tif (skb_queue_is_first(&tp->out_of_order_queue, skb1)) {\n\t\t\t\tskb1 = NULL;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tskb1 = skb_queue_prev(&tp->out_of_order_queue, skb1);\n\t\t}\n\n\t\t/* Do skb overlap to previous one? */\n\t\tif (skb1 && before(seq, TCP_SKB_CB(skb1)->end_seq)) {\n\t\t\tif (!after(end_seq, TCP_SKB_CB(skb1)->end_seq)) {\n\t\t\t\t/* All the bits are present. Drop. */\n\t\t\t\t__kfree_skb(skb);\n\t\t\t\ttcp_dsack_set(sk, seq, end_seq);\n\t\t\t\tgoto add_sack;\n\t\t\t}\n\t\t\tif (after(seq, TCP_SKB_CB(skb1)->seq)) {\n\t\t\t\t/* Partial overlap. */\n\t\t\t\ttcp_dsack_set(sk, seq,\n\t\t\t\t\t      TCP_SKB_CB(skb1)->end_seq);\n\t\t\t} else {\n\t\t\t\tif (skb_queue_is_first(&tp->out_of_order_queue,\n\t\t\t\t\t\t       skb1))\n\t\t\t\t\tskb1 = NULL;\n\t\t\t\telse\n\t\t\t\t\tskb1 = skb_queue_prev(\n\t\t\t\t\t\t&tp->out_of_order_queue,\n\t\t\t\t\t\tskb1);\n\t\t\t}\n\t\t}\n\t\tif (!skb1)\n\t\t\t__skb_queue_head(&tp->out_of_order_queue, skb);\n\t\telse\n\t\t\t__skb_queue_after(&tp->out_of_order_queue, skb1, skb);\n\n\t\t/* And clean segments covered by new one as whole. */\n\t\twhile (!skb_queue_is_last(&tp->out_of_order_queue, skb)) {\n\t\t\tskb1 = skb_queue_next(&tp->out_of_order_queue, skb);\n\n\t\t\tif (!after(end_seq, TCP_SKB_CB(skb1)->seq))\n\t\t\t\tbreak;\n\t\t\tif (before(end_seq, TCP_SKB_CB(skb1)->end_seq)) {\n\t\t\t\ttcp_dsack_extend(sk, TCP_SKB_CB(skb1)->seq,\n\t\t\t\t\t\t end_seq);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t__skb_unlink(skb1, &tp->out_of_order_queue);\n\t\t\ttcp_dsack_extend(sk, TCP_SKB_CB(skb1)->seq,\n\t\t\t\t\t TCP_SKB_CB(skb1)->end_seq);\n\t\t\t__kfree_skb(skb1);\n\t\t}\n\nadd_sack:\n\t\tif (tcp_is_sack(tp))\n\t\t\ttcp_sack_new_ofo_skb(sk, seq, end_seq);\n\t}\n}\n\nstatic struct sk_buff *tcp_collapse_one(struct sock *sk, struct sk_buff *skb,\n\t\t\t\t\tstruct sk_buff_head *list)\n{\n\tstruct sk_buff *next = NULL;\n\n\tif (!skb_queue_is_last(list, skb))\n\t\tnext = skb_queue_next(list, skb);\n\n\t__skb_unlink(skb, list);\n\t__kfree_skb(skb);\n\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPRCVCOLLAPSED);\n\n\treturn next;\n}\n\n/* Collapse contiguous sequence of skbs head..tail with\n * sequence numbers start..end.\n *\n * If tail is NULL, this means until the end of the list.\n *\n * Segments with FIN/SYN are not collapsed (only because this\n * simplifies code)\n */\nstatic void\ntcp_collapse(struct sock *sk, struct sk_buff_head *list,\n\t     struct sk_buff *head, struct sk_buff *tail,\n\t     u32 start, u32 end)\n{\n\tstruct sk_buff *skb, *n;\n\tbool end_of_skbs;\n\n\t/* First, check that queue is collapsible and find\n\t * the point where collapsing can be useful. */\n\tskb = head;\nrestart:\n\tend_of_skbs = true;\n\tskb_queue_walk_from_safe(list, skb, n) {\n\t\tif (skb == tail)\n\t\t\tbreak;\n\t\t/* No new bits? It is possible on ofo queue. */\n\t\tif (!before(start, TCP_SKB_CB(skb)->end_seq)) {\n\t\t\tskb = tcp_collapse_one(sk, skb, list);\n\t\t\tif (!skb)\n\t\t\t\tbreak;\n\t\t\tgoto restart;\n\t\t}\n\n\t\t/* The first skb to collapse is:\n\t\t * - not SYN/FIN and\n\t\t * - bloated or contains data before \"start\" or\n\t\t *   overlaps to the next one.\n\t\t */\n\t\tif (!tcp_hdr(skb)->syn && !tcp_hdr(skb)->fin &&\n\t\t    (tcp_win_from_space(skb->truesize) > skb->len ||\n\t\t     before(TCP_SKB_CB(skb)->seq, start))) {\n\t\t\tend_of_skbs = false;\n\t\t\tbreak;\n\t\t}\n\n\t\tif (!skb_queue_is_last(list, skb)) {\n\t\t\tstruct sk_buff *next = skb_queue_next(list, skb);\n\t\t\tif (next != tail &&\n\t\t\t    TCP_SKB_CB(skb)->end_seq != TCP_SKB_CB(next)->seq) {\n\t\t\t\tend_of_skbs = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t/* Decided to skip this, advance start seq. */\n\t\tstart = TCP_SKB_CB(skb)->end_seq;\n\t}\n\tif (end_of_skbs || tcp_hdr(skb)->syn || tcp_hdr(skb)->fin)\n\t\treturn;\n\n\twhile (before(start, end)) {\n\t\tstruct sk_buff *nskb;\n\t\tunsigned int header = skb_headroom(skb);\n\t\tint copy = SKB_MAX_ORDER(header, 0);\n\n\t\t/* Too big header? This can happen with IPv6. */\n\t\tif (copy < 0)\n\t\t\treturn;\n\t\tif (end - start < copy)\n\t\t\tcopy = end - start;\n\t\tnskb = alloc_skb(copy + header, GFP_ATOMIC);\n\t\tif (!nskb)\n\t\t\treturn;\n\n\t\tskb_set_mac_header(nskb, skb_mac_header(skb) - skb->head);\n\t\tskb_set_network_header(nskb, (skb_network_header(skb) -\n\t\t\t\t\t      skb->head));\n\t\tskb_set_transport_header(nskb, (skb_transport_header(skb) -\n\t\t\t\t\t\tskb->head));\n\t\tskb_reserve(nskb, header);\n\t\tmemcpy(nskb->head, skb->head, header);\n\t\tmemcpy(nskb->cb, skb->cb, sizeof(skb->cb));\n\t\tTCP_SKB_CB(nskb)->seq = TCP_SKB_CB(nskb)->end_seq = start;\n\t\t__skb_queue_before(list, skb, nskb);\n\t\tskb_set_owner_r(nskb, sk);\n\n\t\t/* Copy data, releasing collapsed skbs. */\n\t\twhile (copy > 0) {\n\t\t\tint offset = start - TCP_SKB_CB(skb)->seq;\n\t\t\tint size = TCP_SKB_CB(skb)->end_seq - start;\n\n\t\t\tBUG_ON(offset < 0);\n\t\t\tif (size > 0) {\n\t\t\t\tsize = min(copy, size);\n\t\t\t\tif (skb_copy_bits(skb, offset, skb_put(nskb, size), size))\n\t\t\t\t\tBUG();\n\t\t\t\tTCP_SKB_CB(nskb)->end_seq += size;\n\t\t\t\tcopy -= size;\n\t\t\t\tstart += size;\n\t\t\t}\n\t\t\tif (!before(start, TCP_SKB_CB(skb)->end_seq)) {\n\t\t\t\tskb = tcp_collapse_one(sk, skb, list);\n\t\t\t\tif (!skb ||\n\t\t\t\t    skb == tail ||\n\t\t\t\t    tcp_hdr(skb)->syn ||\n\t\t\t\t    tcp_hdr(skb)->fin)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/* Collapse ofo queue. Algorithm: select contiguous sequence of skbs\n * and tcp_collapse() them until all the queue is collapsed.\n */\nstatic void tcp_collapse_ofo_queue(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *skb = skb_peek(&tp->out_of_order_queue);\n\tstruct sk_buff *head;\n\tu32 start, end;\n\n\tif (skb == NULL)\n\t\treturn;\n\n\tstart = TCP_SKB_CB(skb)->seq;\n\tend = TCP_SKB_CB(skb)->end_seq;\n\thead = skb;\n\n\tfor (;;) {\n\t\tstruct sk_buff *next = NULL;\n\n\t\tif (!skb_queue_is_last(&tp->out_of_order_queue, skb))\n\t\t\tnext = skb_queue_next(&tp->out_of_order_queue, skb);\n\t\tskb = next;\n\n\t\t/* Segment is terminated when we see gap or when\n\t\t * we are at the end of all the queue. */\n\t\tif (!skb ||\n\t\t    after(TCP_SKB_CB(skb)->seq, end) ||\n\t\t    before(TCP_SKB_CB(skb)->end_seq, start)) {\n\t\t\ttcp_collapse(sk, &tp->out_of_order_queue,\n\t\t\t\t     head, skb, start, end);\n\t\t\thead = skb;\n\t\t\tif (!skb)\n\t\t\t\tbreak;\n\t\t\t/* Start new segment */\n\t\t\tstart = TCP_SKB_CB(skb)->seq;\n\t\t\tend = TCP_SKB_CB(skb)->end_seq;\n\t\t} else {\n\t\t\tif (before(TCP_SKB_CB(skb)->seq, start))\n\t\t\t\tstart = TCP_SKB_CB(skb)->seq;\n\t\t\tif (after(TCP_SKB_CB(skb)->end_seq, end))\n\t\t\t\tend = TCP_SKB_CB(skb)->end_seq;\n\t\t}\n\t}\n}\n\n/*\n * Purge the out-of-order queue.\n * Return true if queue was pruned.\n */\nstatic int tcp_prune_ofo_queue(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint res = 0;\n\n\tif (!skb_queue_empty(&tp->out_of_order_queue)) {\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_OFOPRUNED);\n\t\t__skb_queue_purge(&tp->out_of_order_queue);\n\n\t\t/* Reset SACK state.  A conforming SACK implementation will\n\t\t * do the same at a timeout based retransmit.  When a connection\n\t\t * is in a sad state like this, we care only about integrity\n\t\t * of the connection not performance.\n\t\t */\n\t\tif (tp->rx_opt.sack_ok)\n\t\t\ttcp_sack_reset(&tp->rx_opt);\n\t\tsk_mem_reclaim(sk);\n\t\tres = 1;\n\t}\n\treturn res;\n}\n\n/* Reduce allocated memory if we can, trying to get\n * the socket within its memory limits again.\n *\n * Return less than zero if we should start dropping frames\n * until the socket owning process reads some of the data\n * to stabilize the situation.\n */\nstatic int tcp_prune_queue(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tSOCK_DEBUG(sk, \"prune_queue: c=%x\\n\", tp->copied_seq);\n\n\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_PRUNECALLED);\n\n\tif (atomic_read(&sk->sk_rmem_alloc) >= sk->sk_rcvbuf)\n\t\ttcp_clamp_window(sk);\n\telse if (tcp_memory_pressure)\n\t\ttp->rcv_ssthresh = min(tp->rcv_ssthresh, 4U * tp->advmss);\n\n\ttcp_collapse_ofo_queue(sk);\n\tif (!skb_queue_empty(&sk->sk_receive_queue))\n\t\ttcp_collapse(sk, &sk->sk_receive_queue,\n\t\t\t     skb_peek(&sk->sk_receive_queue),\n\t\t\t     NULL,\n\t\t\t     tp->copied_seq, tp->rcv_nxt);\n\tsk_mem_reclaim(sk);\n\n\tif (atomic_read(&sk->sk_rmem_alloc) <= sk->sk_rcvbuf)\n\t\treturn 0;\n\n\t/* Collapsing did not help, destructive actions follow.\n\t * This must not ever occur. */\n\n\ttcp_prune_ofo_queue(sk);\n\n\tif (atomic_read(&sk->sk_rmem_alloc) <= sk->sk_rcvbuf)\n\t\treturn 0;\n\n\t/* If we are really being abused, tell the caller to silently\n\t * drop receive data on the floor.  It will get retransmitted\n\t * and hopefully then we'll have sufficient space.\n\t */\n\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_RCVPRUNED);\n\n\t/* Massive buffer overcommit. */\n\ttp->pred_flags = 0;\n\treturn -1;\n}\n\n/* RFC2861, slow part. Adjust cwnd, after it was not full during one rto.\n * As additional protections, we do not touch cwnd in retransmission phases,\n * and if application hit its sndbuf limit recently.\n */\nvoid tcp_cwnd_application_limited(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (inet_csk(sk)->icsk_ca_state == TCP_CA_Open &&\n\t    sk->sk_socket && !test_bit(SOCK_NOSPACE, &sk->sk_socket->flags)) {\n\t\t/* Limited by application or receiver window. */\n\t\tu32 init_win = tcp_init_cwnd(tp, __sk_dst_get(sk));\n\t\tu32 win_used = max(tp->snd_cwnd_used, init_win);\n\t\tif (win_used < tp->snd_cwnd) {\n\t\t\ttp->snd_ssthresh = tcp_current_ssthresh(sk);\n\t\t\ttp->snd_cwnd = (tp->snd_cwnd + win_used) >> 1;\n\t\t}\n\t\ttp->snd_cwnd_used = 0;\n\t}\n\ttp->snd_cwnd_stamp = tcp_time_stamp;\n}\n\nstatic int tcp_should_expand_sndbuf(const struct sock *sk)\n{\n\tconst struct tcp_sock *tp = tcp_sk(sk);\n\n\t/* If the user specified a specific send buffer setting, do\n\t * not modify it.\n\t */\n\tif (sk->sk_userlocks & SOCK_SNDBUF_LOCK)\n\t\treturn 0;\n\n\t/* If we are under global TCP memory pressure, do not expand.  */\n\tif (tcp_memory_pressure)\n\t\treturn 0;\n\n\t/* If we are under soft global TCP memory pressure, do not expand.  */\n\tif (atomic_long_read(&tcp_memory_allocated) >= sysctl_tcp_mem[0])\n\t\treturn 0;\n\n\t/* If we filled the congestion window, do not expand.  */\n\tif (tp->packets_out >= tp->snd_cwnd)\n\t\treturn 0;\n\n\treturn 1;\n}\n\n/* When incoming ACK allowed to free some skb from write_queue,\n * we remember this event in flag SOCK_QUEUE_SHRUNK and wake up socket\n * on the exit from tcp input handler.\n *\n * PROBLEM: sndbuf expansion does not work well with largesend.\n */\nstatic void tcp_new_space(struct sock *sk)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\tif (tcp_should_expand_sndbuf(sk)) {\n\t\tint sndmem = SKB_TRUESIZE(max_t(u32,\n\t\t\t\t\t\ttp->rx_opt.mss_clamp,\n\t\t\t\t\t\ttp->mss_cache) +\n\t\t\t\t\t  MAX_TCP_HEADER);\n\t\tint demanded = max_t(unsigned int, tp->snd_cwnd,\n\t\t\t\t     tp->reordering + 1);\n\t\tsndmem *= 2 * demanded;\n\t\tif (sndmem > sk->sk_sndbuf)\n\t\t\tsk->sk_sndbuf = min(sndmem, sysctl_tcp_wmem[2]);\n\t\ttp->snd_cwnd_stamp = tcp_time_stamp;\n\t}\n\n\tsk->sk_write_space(sk);\n}\n\nstatic void tcp_check_space(struct sock *sk)\n{\n\tif (sock_flag(sk, SOCK_QUEUE_SHRUNK)) {\n\t\tsock_reset_flag(sk, SOCK_QUEUE_SHRUNK);\n\t\tif (sk->sk_socket &&\n\t\t    test_bit(SOCK_NOSPACE, &sk->sk_socket->flags))\n\t\t\ttcp_new_space(sk);\n\t}\n}\n\nstatic inline void tcp_data_snd_check(struct sock *sk)\n{\n\ttcp_push_pending_frames(sk);\n\ttcp_check_space(sk);\n}\n\n/*\n * Check if sending an ack is needed.\n */\nstatic void __tcp_ack_snd_check(struct sock *sk, int ofo_possible)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\t    /* More than one full frame received... */\n\tif (((tp->rcv_nxt - tp->rcv_wup) > inet_csk(sk)->icsk_ack.rcv_mss &&\n\t     /* ... and right edge of window advances far enough.\n\t      * (tcp_recvmsg() will send ACK otherwise). Or...\n\t      */\n\t     __tcp_select_window(sk) >= tp->rcv_wnd) ||\n\t    /* We ACK each frame or... */\n\t    tcp_in_quickack_mode(sk) ||\n\t    /* We have out of order data. */\n\t    (ofo_possible && skb_peek(&tp->out_of_order_queue))) {\n\t\t/* Then ack it now */\n\t\ttcp_send_ack(sk);\n\t} else {\n\t\t/* Else, send delayed ack. */\n\t\ttcp_send_delayed_ack(sk);\n\t}\n}\n\nstatic inline void tcp_ack_snd_check(struct sock *sk)\n{\n\tif (!inet_csk_ack_scheduled(sk)) {\n\t\t/* We sent a data segment already. */\n\t\treturn;\n\t}\n\t__tcp_ack_snd_check(sk, 1);\n}\n\n/*\n *\tThis routine is only called when we have urgent data\n *\tsignaled. Its the 'slow' part of tcp_urg. It could be\n *\tmoved inline now as tcp_urg is only called from one\n *\tplace. We handle URGent data wrong. We have to - as\n *\tBSD still doesn't use the correction from RFC961.\n *\tFor 1003.1g we should support a new option TCP_STDURG to permit\n *\teither form (or just set the sysctl tcp_stdurg).\n */\n\nstatic void tcp_check_urg(struct sock *sk, const struct tcphdr *th)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tu32 ptr = ntohs(th->urg_ptr);\n\n\tif (ptr && !sysctl_tcp_stdurg)\n\t\tptr--;\n\tptr += ntohl(th->seq);\n\n\t/* Ignore urgent data that we've already seen and read. */\n\tif (after(tp->copied_seq, ptr))\n\t\treturn;\n\n\t/* Do not replay urg ptr.\n\t *\n\t * NOTE: interesting situation not covered by specs.\n\t * Misbehaving sender may send urg ptr, pointing to segment,\n\t * which we already have in ofo queue. We are not able to fetch\n\t * such data and will stay in TCP_URG_NOTYET until will be eaten\n\t * by recvmsg(). Seems, we are not obliged to handle such wicked\n\t * situations. But it is worth to think about possibility of some\n\t * DoSes using some hypothetical application level deadlock.\n\t */\n\tif (before(ptr, tp->rcv_nxt))\n\t\treturn;\n\n\t/* Do we already have a newer (or duplicate) urgent pointer? */\n\tif (tp->urg_data && !after(ptr, tp->urg_seq))\n\t\treturn;\n\n\t/* Tell the world about our new urgent pointer. */\n\tsk_send_sigurg(sk);\n\n\t/* We may be adding urgent data when the last byte read was\n\t * urgent. To do this requires some care. We cannot just ignore\n\t * tp->copied_seq since we would read the last urgent byte again\n\t * as data, nor can we alter copied_seq until this data arrives\n\t * or we break the semantics of SIOCATMARK (and thus sockatmark())\n\t *\n\t * NOTE. Double Dutch. Rendering to plain English: author of comment\n\t * above did something sort of \tsend(\"A\", MSG_OOB); send(\"B\", MSG_OOB);\n\t * and expect that both A and B disappear from stream. This is _wrong_.\n\t * Though this happens in BSD with high probability, this is occasional.\n\t * Any application relying on this is buggy. Note also, that fix \"works\"\n\t * only in this artificial test. Insert some normal data between A and B and we will\n\t * decline of BSD again. Verdict: it is better to remove to trap\n\t * buggy users.\n\t */\n\tif (tp->urg_seq == tp->copied_seq && tp->urg_data &&\n\t    !sock_flag(sk, SOCK_URGINLINE) && tp->copied_seq != tp->rcv_nxt) {\n\t\tstruct sk_buff *skb = skb_peek(&sk->sk_receive_queue);\n\t\ttp->copied_seq++;\n\t\tif (skb && !before(tp->copied_seq, TCP_SKB_CB(skb)->end_seq)) {\n\t\t\t__skb_unlink(skb, &sk->sk_receive_queue);\n\t\t\t__kfree_skb(skb);\n\t\t}\n\t}\n\n\ttp->urg_data = TCP_URG_NOTYET;\n\ttp->urg_seq = ptr;\n\n\t/* Disable header prediction. */\n\ttp->pred_flags = 0;\n}\n\n/* This is the 'fast' part of urgent handling. */\nstatic void tcp_urg(struct sock *sk, struct sk_buff *skb, const struct tcphdr *th)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\t/* Check if we get a new urgent pointer - normally not. */\n\tif (th->urg)\n\t\ttcp_check_urg(sk, th);\n\n\t/* Do we wait for any urgent data? - normally not... */\n\tif (tp->urg_data == TCP_URG_NOTYET) {\n\t\tu32 ptr = tp->urg_seq - ntohl(th->seq) + (th->doff * 4) -\n\t\t\t  th->syn;\n\n\t\t/* Is the urgent pointer pointing into this packet? */\n\t\tif (ptr < skb->len) {\n\t\t\tu8 tmp;\n\t\t\tif (skb_copy_bits(skb, ptr, &tmp, 1))\n\t\t\t\tBUG();\n\t\t\ttp->urg_data = TCP_URG_VALID | tmp;\n\t\t\tif (!sock_flag(sk, SOCK_DEAD))\n\t\t\t\tsk->sk_data_ready(sk, 0);\n\t\t}\n\t}\n}\n\nstatic int tcp_copy_to_iovec(struct sock *sk, struct sk_buff *skb, int hlen)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint chunk = skb->len - hlen;\n\tint err;\n\n\tlocal_bh_enable();\n\tif (skb_csum_unnecessary(skb))\n\t\terr = skb_copy_datagram_iovec(skb, hlen, tp->ucopy.iov, chunk);\n\telse\n\t\terr = skb_copy_and_csum_datagram_iovec(skb, hlen,\n\t\t\t\t\t\t       tp->ucopy.iov);\n\n\tif (!err) {\n\t\ttp->ucopy.len -= chunk;\n\t\ttp->copied_seq += chunk;\n\t\ttcp_rcv_space_adjust(sk);\n\t}\n\n\tlocal_bh_disable();\n\treturn err;\n}\n\nstatic __sum16 __tcp_checksum_complete_user(struct sock *sk,\n\t\t\t\t\t    struct sk_buff *skb)\n{\n\t__sum16 result;\n\n\tif (sock_owned_by_user(sk)) {\n\t\tlocal_bh_enable();\n\t\tresult = __tcp_checksum_complete(skb);\n\t\tlocal_bh_disable();\n\t} else {\n\t\tresult = __tcp_checksum_complete(skb);\n\t}\n\treturn result;\n}\n\nstatic inline int tcp_checksum_complete_user(struct sock *sk,\n\t\t\t\t\t     struct sk_buff *skb)\n{\n\treturn !skb_csum_unnecessary(skb) &&\n\t       __tcp_checksum_complete_user(sk, skb);\n}\n\n#ifdef CONFIG_NET_DMA\nstatic int tcp_dma_try_early_copy(struct sock *sk, struct sk_buff *skb,\n\t\t\t\t  int hlen)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint chunk = skb->len - hlen;\n\tint dma_cookie;\n\tint copied_early = 0;\n\n\tif (tp->ucopy.wakeup)\n\t\treturn 0;\n\n\tif (!tp->ucopy.dma_chan && tp->ucopy.pinned_list)\n\t\ttp->ucopy.dma_chan = dma_find_channel(DMA_MEMCPY);\n\n\tif (tp->ucopy.dma_chan && skb_csum_unnecessary(skb)) {\n\n\t\tdma_cookie = dma_skb_copy_datagram_iovec(tp->ucopy.dma_chan,\n\t\t\t\t\t\t\t skb, hlen,\n\t\t\t\t\t\t\t tp->ucopy.iov, chunk,\n\t\t\t\t\t\t\t tp->ucopy.pinned_list);\n\n\t\tif (dma_cookie < 0)\n\t\t\tgoto out;\n\n\t\ttp->ucopy.dma_cookie = dma_cookie;\n\t\tcopied_early = 1;\n\n\t\ttp->ucopy.len -= chunk;\n\t\ttp->copied_seq += chunk;\n\t\ttcp_rcv_space_adjust(sk);\n\n\t\tif ((tp->ucopy.len == 0) ||\n\t\t    (tcp_flag_word(tcp_hdr(skb)) & TCP_FLAG_PSH) ||\n\t\t    (atomic_read(&sk->sk_rmem_alloc) > (sk->sk_rcvbuf >> 1))) {\n\t\t\ttp->ucopy.wakeup = 1;\n\t\t\tsk->sk_data_ready(sk, 0);\n\t\t}\n\t} else if (chunk > 0) {\n\t\ttp->ucopy.wakeup = 1;\n\t\tsk->sk_data_ready(sk, 0);\n\t}\nout:\n\treturn copied_early;\n}\n#endif /* CONFIG_NET_DMA */\n\n/* Does PAWS and seqno based validation of an incoming segment, flags will\n * play significant role here.\n */\nstatic int tcp_validate_incoming(struct sock *sk, struct sk_buff *skb,\n\t\t\t      const struct tcphdr *th, int syn_inerr)\n{\n\tconst u8 *hash_location;\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\n\t/* RFC1323: H1. Apply PAWS check first. */\n\tif (tcp_fast_parse_options(skb, th, tp, &hash_location) &&\n\t    tp->rx_opt.saw_tstamp &&\n\t    tcp_paws_discard(sk, skb)) {\n\t\tif (!th->rst) {\n\t\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_PAWSESTABREJECTED);\n\t\t\ttcp_send_dupack(sk, skb);\n\t\t\tgoto discard;\n\t\t}\n\t\t/* Reset is accepted even if it did not pass PAWS. */\n\t}\n\n\t/* Step 1: check sequence number */\n\tif (!tcp_sequence(tp, TCP_SKB_CB(skb)->seq, TCP_SKB_CB(skb)->end_seq)) {\n\t\t/* RFC793, page 37: \"In all states except SYN-SENT, all reset\n\t\t * (RST) segments are validated by checking their SEQ-fields.\"\n\t\t * And page 69: \"If an incoming segment is not acceptable,\n\t\t * an acknowledgment should be sent in reply (unless the RST\n\t\t * bit is set, if so drop the segment and return)\".\n\t\t */\n\t\tif (!th->rst)\n\t\t\ttcp_send_dupack(sk, skb);\n\t\tgoto discard;\n\t}\n\n\t/* Step 2: check RST bit */\n\tif (th->rst) {\n\t\ttcp_reset(sk);\n\t\tgoto discard;\n\t}\n\n\t/* ts_recent update must be made after we are sure that the packet\n\t * is in window.\n\t */\n\ttcp_replace_ts_recent(tp, TCP_SKB_CB(skb)->seq);\n\n\t/* step 3: check security and precedence [ignored] */\n\n\t/* step 4: Check for a SYN in window. */\n\tif (th->syn && !before(TCP_SKB_CB(skb)->seq, tp->rcv_nxt)) {\n\t\tif (syn_inerr)\n\t\t\tTCP_INC_STATS_BH(sock_net(sk), TCP_MIB_INERRS);\n\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPABORTONSYN);\n\t\ttcp_reset(sk);\n\t\treturn -1;\n\t}\n\n\treturn 1;\n\ndiscard:\n\t__kfree_skb(skb);\n\treturn 0;\n}\n\n/*\n *\tTCP receive function for the ESTABLISHED state.\n *\n *\tIt is split into a fast path and a slow path. The fast path is\n * \tdisabled when:\n *\t- A zero window was announced from us - zero window probing\n *        is only handled properly in the slow path.\n *\t- Out of order segments arrived.\n *\t- Urgent data is expected.\n *\t- There is no buffer space left\n *\t- Unexpected TCP flags/window values/header lengths are received\n *\t  (detected by checking the TCP header against pred_flags)\n *\t- Data is sent in both directions. Fast path only supports pure senders\n *\t  or pure receivers (this means either the sequence number or the ack\n *\t  value must stay constant)\n *\t- Unexpected TCP option.\n *\n *\tWhen these conditions are not satisfied it drops into a standard\n *\treceive procedure patterned after RFC793 to handle all cases.\n *\tThe first three cases are guaranteed by proper pred_flags setting,\n *\tthe rest is checked inline. Fast processing is turned on in\n *\ttcp_data_queue when everything is OK.\n */\nint tcp_rcv_established(struct sock *sk, struct sk_buff *skb,\n\t\t\tconst struct tcphdr *th, unsigned int len)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint res;\n\n\t/*\n\t *\tHeader prediction.\n\t *\tThe code loosely follows the one in the famous\n\t *\t\"30 instruction TCP receive\" Van Jacobson mail.\n\t *\n\t *\tVan's trick is to deposit buffers into socket queue\n\t *\ton a device interrupt, to call tcp_recv function\n\t *\ton the receive process context and checksum and copy\n\t *\tthe buffer to user space. smart...\n\t *\n\t *\tOur current scheme is not silly either but we take the\n\t *\textra cost of the net_bh soft interrupt processing...\n\t *\tWe do checksum and copy also but from device to kernel.\n\t */\n\n\ttp->rx_opt.saw_tstamp = 0;\n\n\t/*\tpred_flags is 0xS?10 << 16 + snd_wnd\n\t *\tif header_prediction is to be made\n\t *\t'S' will always be tp->tcp_header_len >> 2\n\t *\t'?' will be 0 for the fast path, otherwise pred_flags is 0 to\n\t *  turn it off\t(when there are holes in the receive\n\t *\t space for instance)\n\t *\tPSH flag is ignored.\n\t */\n\n\tif ((tcp_flag_word(th) & TCP_HP_BITS) == tp->pred_flags &&\n\t    TCP_SKB_CB(skb)->seq == tp->rcv_nxt &&\n\t    !after(TCP_SKB_CB(skb)->ack_seq, tp->snd_nxt)) {\n\t\tint tcp_header_len = tp->tcp_header_len;\n\n\t\t/* Timestamp header prediction: tcp_header_len\n\t\t * is automatically equal to th->doff*4 due to pred_flags\n\t\t * match.\n\t\t */\n\n\t\t/* Check timestamp */\n\t\tif (tcp_header_len == sizeof(struct tcphdr) + TCPOLEN_TSTAMP_ALIGNED) {\n\t\t\t/* No? Slow path! */\n\t\t\tif (!tcp_parse_aligned_timestamp(tp, th))\n\t\t\t\tgoto slow_path;\n\n\t\t\t/* If PAWS failed, check it more carefully in slow path */\n\t\t\tif ((s32)(tp->rx_opt.rcv_tsval - tp->rx_opt.ts_recent) < 0)\n\t\t\t\tgoto slow_path;\n\n\t\t\t/* DO NOT update ts_recent here, if checksum fails\n\t\t\t * and timestamp was corrupted part, it will result\n\t\t\t * in a hung connection since we will drop all\n\t\t\t * future packets due to the PAWS test.\n\t\t\t */\n\t\t}\n\n\t\tif (len <= tcp_header_len) {\n\t\t\t/* Bulk data transfer: sender */\n\t\t\tif (len == tcp_header_len) {\n\t\t\t\t/* Predicted packet is in window by definition.\n\t\t\t\t * seq == rcv_nxt and rcv_wup <= rcv_nxt.\n\t\t\t\t * Hence, check seq<=rcv_wup reduces to:\n\t\t\t\t */\n\t\t\t\tif (tcp_header_len ==\n\t\t\t\t    (sizeof(struct tcphdr) + TCPOLEN_TSTAMP_ALIGNED) &&\n\t\t\t\t    tp->rcv_nxt == tp->rcv_wup)\n\t\t\t\t\ttcp_store_ts_recent(tp);\n\n\t\t\t\t/* We know that such packets are checksummed\n\t\t\t\t * on entry.\n\t\t\t\t */\n\t\t\t\ttcp_ack(sk, skb, 0);\n\t\t\t\t__kfree_skb(skb);\n\t\t\t\ttcp_data_snd_check(sk);\n\t\t\t\treturn 0;\n\t\t\t} else { /* Header too small */\n\t\t\t\tTCP_INC_STATS_BH(sock_net(sk), TCP_MIB_INERRS);\n\t\t\t\tgoto discard;\n\t\t\t}\n\t\t} else {\n\t\t\tint eaten = 0;\n\t\t\tint copied_early = 0;\n\n\t\t\tif (tp->copied_seq == tp->rcv_nxt &&\n\t\t\t    len - tcp_header_len <= tp->ucopy.len) {\n#ifdef CONFIG_NET_DMA\n\t\t\t\tif (tcp_dma_try_early_copy(sk, skb, tcp_header_len)) {\n\t\t\t\t\tcopied_early = 1;\n\t\t\t\t\teaten = 1;\n\t\t\t\t}\n#endif\n\t\t\t\tif (tp->ucopy.task == current &&\n\t\t\t\t    sock_owned_by_user(sk) && !copied_early) {\n\t\t\t\t\t__set_current_state(TASK_RUNNING);\n\n\t\t\t\t\tif (!tcp_copy_to_iovec(sk, skb, tcp_header_len))\n\t\t\t\t\t\teaten = 1;\n\t\t\t\t}\n\t\t\t\tif (eaten) {\n\t\t\t\t\t/* Predicted packet is in window by definition.\n\t\t\t\t\t * seq == rcv_nxt and rcv_wup <= rcv_nxt.\n\t\t\t\t\t * Hence, check seq<=rcv_wup reduces to:\n\t\t\t\t\t */\n\t\t\t\t\tif (tcp_header_len ==\n\t\t\t\t\t    (sizeof(struct tcphdr) +\n\t\t\t\t\t     TCPOLEN_TSTAMP_ALIGNED) &&\n\t\t\t\t\t    tp->rcv_nxt == tp->rcv_wup)\n\t\t\t\t\t\ttcp_store_ts_recent(tp);\n\n\t\t\t\t\ttcp_rcv_rtt_measure_ts(sk, skb);\n\n\t\t\t\t\t__skb_pull(skb, tcp_header_len);\n\t\t\t\t\ttp->rcv_nxt = TCP_SKB_CB(skb)->end_seq;\n\t\t\t\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPHPHITSTOUSER);\n\t\t\t\t}\n\t\t\t\tif (copied_early)\n\t\t\t\t\ttcp_cleanup_rbuf(sk, skb->len);\n\t\t\t}\n\t\t\tif (!eaten) {\n\t\t\t\tif (tcp_checksum_complete_user(sk, skb))\n\t\t\t\t\tgoto csum_error;\n\n\t\t\t\t/* Predicted packet is in window by definition.\n\t\t\t\t * seq == rcv_nxt and rcv_wup <= rcv_nxt.\n\t\t\t\t * Hence, check seq<=rcv_wup reduces to:\n\t\t\t\t */\n\t\t\t\tif (tcp_header_len ==\n\t\t\t\t    (sizeof(struct tcphdr) + TCPOLEN_TSTAMP_ALIGNED) &&\n\t\t\t\t    tp->rcv_nxt == tp->rcv_wup)\n\t\t\t\t\ttcp_store_ts_recent(tp);\n\n\t\t\t\ttcp_rcv_rtt_measure_ts(sk, skb);\n\n\t\t\t\tif ((int)skb->truesize > sk->sk_forward_alloc)\n\t\t\t\t\tgoto step5;\n\n\t\t\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPHPHITS);\n\n\t\t\t\t/* Bulk data transfer: receiver */\n\t\t\t\t__skb_pull(skb, tcp_header_len);\n\t\t\t\t__skb_queue_tail(&sk->sk_receive_queue, skb);\n\t\t\t\tskb_set_owner_r(skb, sk);\n\t\t\t\ttp->rcv_nxt = TCP_SKB_CB(skb)->end_seq;\n\t\t\t}\n\n\t\t\ttcp_event_data_recv(sk, skb);\n\n\t\t\tif (TCP_SKB_CB(skb)->ack_seq != tp->snd_una) {\n\t\t\t\t/* Well, only one small jumplet in fast path... */\n\t\t\t\ttcp_ack(sk, skb, FLAG_DATA);\n\t\t\t\ttcp_data_snd_check(sk);\n\t\t\t\tif (!inet_csk_ack_scheduled(sk))\n\t\t\t\t\tgoto no_ack;\n\t\t\t}\n\n\t\t\tif (!copied_early || tp->rcv_nxt != tp->rcv_wup)\n\t\t\t\t__tcp_ack_snd_check(sk, 0);\nno_ack:\n#ifdef CONFIG_NET_DMA\n\t\t\tif (copied_early)\n\t\t\t\t__skb_queue_tail(&sk->sk_async_wait_queue, skb);\n\t\t\telse\n#endif\n\t\t\tif (eaten)\n\t\t\t\t__kfree_skb(skb);\n\t\t\telse\n\t\t\t\tsk->sk_data_ready(sk, 0);\n\t\t\treturn 0;\n\t\t}\n\t}\n\nslow_path:\n\tif (len < (th->doff << 2) || tcp_checksum_complete_user(sk, skb))\n\t\tgoto csum_error;\n\n\t/*\n\t *\tStandard slow path.\n\t */\n\n\tres = tcp_validate_incoming(sk, skb, th, 1);\n\tif (res <= 0)\n\t\treturn -res;\n\nstep5:\n\tif (th->ack && tcp_ack(sk, skb, FLAG_SLOWPATH) < 0)\n\t\tgoto discard;\n\n\ttcp_rcv_rtt_measure_ts(sk, skb);\n\n\t/* Process urgent data. */\n\ttcp_urg(sk, skb, th);\n\n\t/* step 7: process the segment text */\n\ttcp_data_queue(sk, skb);\n\n\ttcp_data_snd_check(sk);\n\ttcp_ack_snd_check(sk);\n\treturn 0;\n\ncsum_error:\n\tTCP_INC_STATS_BH(sock_net(sk), TCP_MIB_INERRS);\n\ndiscard:\n\t__kfree_skb(skb);\n\treturn 0;\n}\nEXPORT_SYMBOL(tcp_rcv_established);\n\nstatic int tcp_rcv_synsent_state_process(struct sock *sk, struct sk_buff *skb,\n\t\t\t\t\t const struct tcphdr *th, unsigned int len)\n{\n\tconst u8 *hash_location;\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct tcp_cookie_values *cvp = tp->cookie_values;\n\tint saved_clamp = tp->rx_opt.mss_clamp;\n\n\ttcp_parse_options(skb, &tp->rx_opt, &hash_location, 0);\n\n\tif (th->ack) {\n\t\t/* rfc793:\n\t\t * \"If the state is SYN-SENT then\n\t\t *    first check the ACK bit\n\t\t *      If the ACK bit is set\n\t\t *\t  If SEG.ACK =< ISS, or SEG.ACK > SND.NXT, send\n\t\t *        a reset (unless the RST bit is set, if so drop\n\t\t *        the segment and return)\"\n\t\t *\n\t\t *  We do not send data with SYN, so that RFC-correct\n\t\t *  test reduces to:\n\t\t */\n\t\tif (TCP_SKB_CB(skb)->ack_seq != tp->snd_nxt)\n\t\t\tgoto reset_and_undo;\n\n\t\tif (tp->rx_opt.saw_tstamp && tp->rx_opt.rcv_tsecr &&\n\t\t    !between(tp->rx_opt.rcv_tsecr, tp->retrans_stamp,\n\t\t\t     tcp_time_stamp)) {\n\t\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_PAWSACTIVEREJECTED);\n\t\t\tgoto reset_and_undo;\n\t\t}\n\n\t\t/* Now ACK is acceptable.\n\t\t *\n\t\t * \"If the RST bit is set\n\t\t *    If the ACK was acceptable then signal the user \"error:\n\t\t *    connection reset\", drop the segment, enter CLOSED state,\n\t\t *    delete TCB, and return.\"\n\t\t */\n\n\t\tif (th->rst) {\n\t\t\ttcp_reset(sk);\n\t\t\tgoto discard;\n\t\t}\n\n\t\t/* rfc793:\n\t\t *   \"fifth, if neither of the SYN or RST bits is set then\n\t\t *    drop the segment and return.\"\n\t\t *\n\t\t *    See note below!\n\t\t *                                        --ANK(990513)\n\t\t */\n\t\tif (!th->syn)\n\t\t\tgoto discard_and_undo;\n\n\t\t/* rfc793:\n\t\t *   \"If the SYN bit is on ...\n\t\t *    are acceptable then ...\n\t\t *    (our SYN has been ACKed), change the connection\n\t\t *    state to ESTABLISHED...\"\n\t\t */\n\n\t\tTCP_ECN_rcv_synack(tp, th);\n\n\t\ttp->snd_wl1 = TCP_SKB_CB(skb)->seq;\n\t\ttcp_ack(sk, skb, FLAG_SLOWPATH);\n\n\t\t/* Ok.. it's good. Set up sequence numbers and\n\t\t * move to established.\n\t\t */\n\t\ttp->rcv_nxt = TCP_SKB_CB(skb)->seq + 1;\n\t\ttp->rcv_wup = TCP_SKB_CB(skb)->seq + 1;\n\n\t\t/* RFC1323: The window in SYN & SYN/ACK segments is\n\t\t * never scaled.\n\t\t */\n\t\ttp->snd_wnd = ntohs(th->window);\n\t\ttcp_init_wl(tp, TCP_SKB_CB(skb)->seq);\n\n\t\tif (!tp->rx_opt.wscale_ok) {\n\t\t\ttp->rx_opt.snd_wscale = tp->rx_opt.rcv_wscale = 0;\n\t\t\ttp->window_clamp = min(tp->window_clamp, 65535U);\n\t\t}\n\n\t\tif (tp->rx_opt.saw_tstamp) {\n\t\t\ttp->rx_opt.tstamp_ok\t   = 1;\n\t\t\ttp->tcp_header_len =\n\t\t\t\tsizeof(struct tcphdr) + TCPOLEN_TSTAMP_ALIGNED;\n\t\t\ttp->advmss\t    -= TCPOLEN_TSTAMP_ALIGNED;\n\t\t\ttcp_store_ts_recent(tp);\n\t\t} else {\n\t\t\ttp->tcp_header_len = sizeof(struct tcphdr);\n\t\t}\n\n\t\tif (tcp_is_sack(tp) && sysctl_tcp_fack)\n\t\t\ttcp_enable_fack(tp);\n\n\t\ttcp_mtup_init(sk);\n\t\ttcp_sync_mss(sk, icsk->icsk_pmtu_cookie);\n\t\ttcp_initialize_rcv_mss(sk);\n\n\t\t/* Remember, tcp_poll() does not lock socket!\n\t\t * Change state from SYN-SENT only after copied_seq\n\t\t * is initialized. */\n\t\ttp->copied_seq = tp->rcv_nxt;\n\n\t\tif (cvp != NULL &&\n\t\t    cvp->cookie_pair_size > 0 &&\n\t\t    tp->rx_opt.cookie_plus > 0) {\n\t\t\tint cookie_size = tp->rx_opt.cookie_plus\n\t\t\t\t\t- TCPOLEN_COOKIE_BASE;\n\t\t\tint cookie_pair_size = cookie_size\n\t\t\t\t\t     + cvp->cookie_desired;\n\n\t\t\t/* A cookie extension option was sent and returned.\n\t\t\t * Note that each incoming SYNACK replaces the\n\t\t\t * Responder cookie.  The initial exchange is most\n\t\t\t * fragile, as protection against spoofing relies\n\t\t\t * entirely upon the sequence and timestamp (above).\n\t\t\t * This replacement strategy allows the correct pair to\n\t\t\t * pass through, while any others will be filtered via\n\t\t\t * Responder verification later.\n\t\t\t */\n\t\t\tif (sizeof(cvp->cookie_pair) >= cookie_pair_size) {\n\t\t\t\tmemcpy(&cvp->cookie_pair[cvp->cookie_desired],\n\t\t\t\t       hash_location, cookie_size);\n\t\t\t\tcvp->cookie_pair_size = cookie_pair_size;\n\t\t\t}\n\t\t}\n\n\t\tsmp_mb();\n\t\ttcp_set_state(sk, TCP_ESTABLISHED);\n\n\t\tsecurity_inet_conn_established(sk, skb);\n\n\t\t/* Make sure socket is routed, for correct metrics.  */\n\t\ticsk->icsk_af_ops->rebuild_header(sk);\n\n\t\ttcp_init_metrics(sk);\n\n\t\ttcp_init_congestion_control(sk);\n\n\t\t/* Prevent spurious tcp_cwnd_restart() on first data\n\t\t * packet.\n\t\t */\n\t\ttp->lsndtime = tcp_time_stamp;\n\n\t\ttcp_init_buffer_space(sk);\n\n\t\tif (sock_flag(sk, SOCK_KEEPOPEN))\n\t\t\tinet_csk_reset_keepalive_timer(sk, keepalive_time_when(tp));\n\n\t\tif (!tp->rx_opt.snd_wscale)\n\t\t\t__tcp_fast_path_on(tp, tp->snd_wnd);\n\t\telse\n\t\t\ttp->pred_flags = 0;\n\n\t\tif (!sock_flag(sk, SOCK_DEAD)) {\n\t\t\tsk->sk_state_change(sk);\n\t\t\tsk_wake_async(sk, SOCK_WAKE_IO, POLL_OUT);\n\t\t}\n\n\t\tif (sk->sk_write_pending ||\n\t\t    icsk->icsk_accept_queue.rskq_defer_accept ||\n\t\t    icsk->icsk_ack.pingpong) {\n\t\t\t/* Save one ACK. Data will be ready after\n\t\t\t * several ticks, if write_pending is set.\n\t\t\t *\n\t\t\t * It may be deleted, but with this feature tcpdumps\n\t\t\t * look so _wonderfully_ clever, that I was not able\n\t\t\t * to stand against the temptation 8)     --ANK\n\t\t\t */\n\t\t\tinet_csk_schedule_ack(sk);\n\t\t\ticsk->icsk_ack.lrcvtime = tcp_time_stamp;\n\t\t\ticsk->icsk_ack.ato\t = TCP_ATO_MIN;\n\t\t\ttcp_incr_quickack(sk);\n\t\t\ttcp_enter_quickack_mode(sk);\n\t\t\tinet_csk_reset_xmit_timer(sk, ICSK_TIME_DACK,\n\t\t\t\t\t\t  TCP_DELACK_MAX, TCP_RTO_MAX);\n\ndiscard:\n\t\t\t__kfree_skb(skb);\n\t\t\treturn 0;\n\t\t} else {\n\t\t\ttcp_send_ack(sk);\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/* No ACK in the segment */\n\n\tif (th->rst) {\n\t\t/* rfc793:\n\t\t * \"If the RST bit is set\n\t\t *\n\t\t *      Otherwise (no ACK) drop the segment and return.\"\n\t\t */\n\n\t\tgoto discard_and_undo;\n\t}\n\n\t/* PAWS check. */\n\tif (tp->rx_opt.ts_recent_stamp && tp->rx_opt.saw_tstamp &&\n\t    tcp_paws_reject(&tp->rx_opt, 0))\n\t\tgoto discard_and_undo;\n\n\tif (th->syn) {\n\t\t/* We see SYN without ACK. It is attempt of\n\t\t * simultaneous connect with crossed SYNs.\n\t\t * Particularly, it can be connect to self.\n\t\t */\n\t\ttcp_set_state(sk, TCP_SYN_RECV);\n\n\t\tif (tp->rx_opt.saw_tstamp) {\n\t\t\ttp->rx_opt.tstamp_ok = 1;\n\t\t\ttcp_store_ts_recent(tp);\n\t\t\ttp->tcp_header_len =\n\t\t\t\tsizeof(struct tcphdr) + TCPOLEN_TSTAMP_ALIGNED;\n\t\t} else {\n\t\t\ttp->tcp_header_len = sizeof(struct tcphdr);\n\t\t}\n\n\t\ttp->rcv_nxt = TCP_SKB_CB(skb)->seq + 1;\n\t\ttp->rcv_wup = TCP_SKB_CB(skb)->seq + 1;\n\n\t\t/* RFC1323: The window in SYN & SYN/ACK segments is\n\t\t * never scaled.\n\t\t */\n\t\ttp->snd_wnd    = ntohs(th->window);\n\t\ttp->snd_wl1    = TCP_SKB_CB(skb)->seq;\n\t\ttp->max_window = tp->snd_wnd;\n\n\t\tTCP_ECN_rcv_syn(tp, th);\n\n\t\ttcp_mtup_init(sk);\n\t\ttcp_sync_mss(sk, icsk->icsk_pmtu_cookie);\n\t\ttcp_initialize_rcv_mss(sk);\n\n\t\ttcp_send_synack(sk);\n#if 0\n\t\t/* Note, we could accept data and URG from this segment.\n\t\t * There are no obstacles to make this.\n\t\t *\n\t\t * However, if we ignore data in ACKless segments sometimes,\n\t\t * we have no reasons to accept it sometimes.\n\t\t * Also, seems the code doing it in step6 of tcp_rcv_state_process\n\t\t * is not flawless. So, discard packet for sanity.\n\t\t * Uncomment this return to process the data.\n\t\t */\n\t\treturn -1;\n#else\n\t\tgoto discard;\n#endif\n\t}\n\t/* \"fifth, if neither of the SYN or RST bits is set then\n\t * drop the segment and return.\"\n\t */\n\ndiscard_and_undo:\n\ttcp_clear_options(&tp->rx_opt);\n\ttp->rx_opt.mss_clamp = saved_clamp;\n\tgoto discard;\n\nreset_and_undo:\n\ttcp_clear_options(&tp->rx_opt);\n\ttp->rx_opt.mss_clamp = saved_clamp;\n\treturn 1;\n}\n\n/*\n *\tThis function implements the receiving procedure of RFC 793 for\n *\tall states except ESTABLISHED and TIME_WAIT.\n *\tIt's called from both tcp_v4_rcv and tcp_v6_rcv and should be\n *\taddress independent.\n */\n\nint tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb,\n\t\t\t  const struct tcphdr *th, unsigned int len)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct inet_connection_sock *icsk = inet_csk(sk);\n\tint queued = 0;\n\tint res;\n\n\ttp->rx_opt.saw_tstamp = 0;\n\n\tswitch (sk->sk_state) {\n\tcase TCP_CLOSE:\n\t\tgoto discard;\n\n\tcase TCP_LISTEN:\n\t\tif (th->ack)\n\t\t\treturn 1;\n\n\t\tif (th->rst)\n\t\t\tgoto discard;\n\n\t\tif (th->syn) {\n\t\t\tif (th->fin)\n\t\t\t\tgoto discard;\n\t\t\tif (icsk->icsk_af_ops->conn_request(sk, skb) < 0)\n\t\t\t\treturn 1;\n\n\t\t\t/* Now we have several options: In theory there is\n\t\t\t * nothing else in the frame. KA9Q has an option to\n\t\t\t * send data with the syn, BSD accepts data with the\n\t\t\t * syn up to the [to be] advertised window and\n\t\t\t * Solaris 2.1 gives you a protocol error. For now\n\t\t\t * we just ignore it, that fits the spec precisely\n\t\t\t * and avoids incompatibilities. It would be nice in\n\t\t\t * future to drop through and process the data.\n\t\t\t *\n\t\t\t * Now that TTCP is starting to be used we ought to\n\t\t\t * queue this data.\n\t\t\t * But, this leaves one open to an easy denial of\n\t\t\t * service attack, and SYN cookies can't defend\n\t\t\t * against this problem. So, we drop the data\n\t\t\t * in the interest of security over speed unless\n\t\t\t * it's still in use.\n\t\t\t */\n\t\t\tkfree_skb(skb);\n\t\t\treturn 0;\n\t\t}\n\t\tgoto discard;\n\n\tcase TCP_SYN_SENT:\n\t\tqueued = tcp_rcv_synsent_state_process(sk, skb, th, len);\n\t\tif (queued >= 0)\n\t\t\treturn queued;\n\n\t\t/* Do step6 onward by hand. */\n\t\ttcp_urg(sk, skb, th);\n\t\t__kfree_skb(skb);\n\t\ttcp_data_snd_check(sk);\n\t\treturn 0;\n\t}\n\n\tres = tcp_validate_incoming(sk, skb, th, 0);\n\tif (res <= 0)\n\t\treturn -res;\n\n\t/* step 5: check the ACK field */\n\tif (th->ack) {\n\t\tint acceptable = tcp_ack(sk, skb, FLAG_SLOWPATH) > 0;\n\n\t\tswitch (sk->sk_state) {\n\t\tcase TCP_SYN_RECV:\n\t\t\tif (acceptable) {\n\t\t\t\ttp->copied_seq = tp->rcv_nxt;\n\t\t\t\tsmp_mb();\n\t\t\t\ttcp_set_state(sk, TCP_ESTABLISHED);\n\t\t\t\tsk->sk_state_change(sk);\n\n\t\t\t\t/* Note, that this wakeup is only for marginal\n\t\t\t\t * crossed SYN case. Passively open sockets\n\t\t\t\t * are not waked up, because sk->sk_sleep ==\n\t\t\t\t * NULL and sk->sk_socket == NULL.\n\t\t\t\t */\n\t\t\t\tif (sk->sk_socket)\n\t\t\t\t\tsk_wake_async(sk,\n\t\t\t\t\t\t      SOCK_WAKE_IO, POLL_OUT);\n\n\t\t\t\ttp->snd_una = TCP_SKB_CB(skb)->ack_seq;\n\t\t\t\ttp->snd_wnd = ntohs(th->window) <<\n\t\t\t\t\t      tp->rx_opt.snd_wscale;\n\t\t\t\ttcp_init_wl(tp, TCP_SKB_CB(skb)->seq);\n\n\t\t\t\tif (tp->rx_opt.tstamp_ok)\n\t\t\t\t\ttp->advmss -= TCPOLEN_TSTAMP_ALIGNED;\n\n\t\t\t\t/* Make sure socket is routed, for\n\t\t\t\t * correct metrics.\n\t\t\t\t */\n\t\t\t\ticsk->icsk_af_ops->rebuild_header(sk);\n\n\t\t\t\ttcp_init_metrics(sk);\n\n\t\t\t\ttcp_init_congestion_control(sk);\n\n\t\t\t\t/* Prevent spurious tcp_cwnd_restart() on\n\t\t\t\t * first data packet.\n\t\t\t\t */\n\t\t\t\ttp->lsndtime = tcp_time_stamp;\n\n\t\t\t\ttcp_mtup_init(sk);\n\t\t\t\ttcp_initialize_rcv_mss(sk);\n\t\t\t\ttcp_init_buffer_space(sk);\n\t\t\t\ttcp_fast_path_on(tp);\n\t\t\t} else {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase TCP_FIN_WAIT1:\n\t\t\tif (tp->snd_una == tp->write_seq) {\n\t\t\t\ttcp_set_state(sk, TCP_FIN_WAIT2);\n\t\t\t\tsk->sk_shutdown |= SEND_SHUTDOWN;\n\t\t\t\tdst_confirm(__sk_dst_get(sk));\n\n\t\t\t\tif (!sock_flag(sk, SOCK_DEAD))\n\t\t\t\t\t/* Wake up lingering close() */\n\t\t\t\t\tsk->sk_state_change(sk);\n\t\t\t\telse {\n\t\t\t\t\tint tmo;\n\n\t\t\t\t\tif (tp->linger2 < 0 ||\n\t\t\t\t\t    (TCP_SKB_CB(skb)->end_seq != TCP_SKB_CB(skb)->seq &&\n\t\t\t\t\t     after(TCP_SKB_CB(skb)->end_seq - th->fin, tp->rcv_nxt))) {\n\t\t\t\t\t\ttcp_done(sk);\n\t\t\t\t\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPABORTONDATA);\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\n\t\t\t\t\ttmo = tcp_fin_time(sk);\n\t\t\t\t\tif (tmo > TCP_TIMEWAIT_LEN) {\n\t\t\t\t\t\tinet_csk_reset_keepalive_timer(sk, tmo - TCP_TIMEWAIT_LEN);\n\t\t\t\t\t} else if (th->fin || sock_owned_by_user(sk)) {\n\t\t\t\t\t\t/* Bad case. We could lose such FIN otherwise.\n\t\t\t\t\t\t * It is not a big problem, but it looks confusing\n\t\t\t\t\t\t * and not so rare event. We still can lose it now,\n\t\t\t\t\t\t * if it spins in bh_lock_sock(), but it is really\n\t\t\t\t\t\t * marginal case.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tinet_csk_reset_keepalive_timer(sk, tmo);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttcp_time_wait(sk, TCP_FIN_WAIT2, tmo);\n\t\t\t\t\t\tgoto discard;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase TCP_CLOSING:\n\t\t\tif (tp->snd_una == tp->write_seq) {\n\t\t\t\ttcp_time_wait(sk, TCP_TIME_WAIT, 0);\n\t\t\t\tgoto discard;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase TCP_LAST_ACK:\n\t\t\tif (tp->snd_una == tp->write_seq) {\n\t\t\t\ttcp_update_metrics(sk);\n\t\t\t\ttcp_done(sk);\n\t\t\t\tgoto discard;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t} else\n\t\tgoto discard;\n\n\t/* step 6: check the URG bit */\n\ttcp_urg(sk, skb, th);\n\n\t/* step 7: process the segment text */\n\tswitch (sk->sk_state) {\n\tcase TCP_CLOSE_WAIT:\n\tcase TCP_CLOSING:\n\tcase TCP_LAST_ACK:\n\t\tif (!before(TCP_SKB_CB(skb)->seq, tp->rcv_nxt))\n\t\t\tbreak;\n\tcase TCP_FIN_WAIT1:\n\tcase TCP_FIN_WAIT2:\n\t\t/* RFC 793 says to queue data in these states,\n\t\t * RFC 1122 says we MUST send a reset.\n\t\t * BSD 4.4 also does reset.\n\t\t */\n\t\tif (sk->sk_shutdown & RCV_SHUTDOWN) {\n\t\t\tif (TCP_SKB_CB(skb)->end_seq != TCP_SKB_CB(skb)->seq &&\n\t\t\t    after(TCP_SKB_CB(skb)->end_seq - th->fin, tp->rcv_nxt)) {\n\t\t\t\tNET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPABORTONDATA);\n\t\t\t\ttcp_reset(sk);\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\t/* Fall through */\n\tcase TCP_ESTABLISHED:\n\t\ttcp_data_queue(sk, skb);\n\t\tqueued = 1;\n\t\tbreak;\n\t}\n\n\t/* tcp_data could move socket to TIME-WAIT */\n\tif (sk->sk_state != TCP_CLOSE) {\n\t\ttcp_data_snd_check(sk);\n\t\ttcp_ack_snd_check(sk);\n\t}\n\n\tif (!queued) {\ndiscard:\n\t\t__kfree_skb(skb);\n\t}\n\treturn 0;\n}\nEXPORT_SYMBOL(tcp_rcv_state_process);\n"], "filenames": ["net/ipv4/tcp_input.c"], "buggy_code_start_loc": [5813], "buggy_code_end_loc": [5813], "fixing_code_start_loc": [5814], "fixing_code_end_loc": [5816], "type": "CWE-400", "message": "The tcp_rcv_state_process function in net/ipv4/tcp_input.c in the Linux kernel before 3.2.24 allows remote attackers to cause a denial of service (kernel resource consumption) via a flood of SYN+FIN TCP packets, a different vulnerability than CVE-2012-2663.", "other": {"cve": {"id": "CVE-2012-6638", "sourceIdentifier": "cve@mitre.org", "published": "2014-02-15T14:57:07.580", "lastModified": "2023-02-14T19:51:03.250", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The tcp_rcv_state_process function in net/ipv4/tcp_input.c in the Linux kernel before 3.2.24 allows remote attackers to cause a denial of service (kernel resource consumption) via a flood of SYN+FIN TCP packets, a different vulnerability than CVE-2012-2663."}, {"lang": "es", "value": "La funci\u00f3n tcp_rcv_state_process en net/ipv4/tcp_input.c en el kernel de Linux anterior a 3.2.24 permite a atacantes remotos causar una denegaci\u00f3n de servicio (consumo de recursos del kernel) a trav\u00e9s de una inundaci\u00f3n de paquetes TCP SYN+FIN, una vulnerabilidad diferente a CVE-2012-2663."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:C", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "COMPLETE", "baseScore": 7.8}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-400"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.0.38", "matchCriteriaId": "3A0C4F60-8956-4D25-A5A8-821BE5CAD988"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.1", "versionEndExcluding": "3.2.24", "matchCriteriaId": "E89A0DD6-9A17-4403-96A2-29BC27294B36"}]}]}], "references": [{"url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commit;h=fdf5af0daf8019cec2396cdef8fb042d80fe71fa", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "http://www.kernel.org/pub/linux/kernel/v3.x/ChangeLog-3.2.24", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=826702", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/torvalds/linux/commit/fdf5af0daf8019cec2396cdef8fb042d80fe71fa", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/torvalds/linux/commit/fdf5af0daf8019cec2396cdef8fb042d80fe71fa"}}