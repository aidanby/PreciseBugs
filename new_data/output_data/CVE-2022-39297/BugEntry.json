{"buggy_code": ["<?php\n\n/**\n * Melis Technology (http://www.melistechnology.com)\n *\n * @copyright Copyright (c) 2017 Melis Technology (http://www.melistechnology.com)\n *\n */\n\nnamespace MelisCms\\Controller;\n\nuse MelisAssetManager\\Service\\MelisModulesService;\nuse Laminas\\View\\Model\\ViewModel;\nuse Laminas\\View\\Model\\JsonModel;\nuse Laminas\\Session\\Container;\nuse MelisCms\\Service\\MelisCmsRightsService;\nuse MelisCore\\Controller\\MelisAbstractActionController;\n\n/**\n * This class renders Melis CMS Plugin Menu\n */\nclass FrontPluginsController extends MelisAbstractActionController\n{\n    private $sectionHasNewPlugins = [];\n    private $modulesHasNewPlugins = [];\n    private $subsectionHasNewPlugins = [];\n\n    public function renderPluginsMenuAction()\n    {\n        $config = $this->getServiceManager()->get('config');\n        $pluginsConfig = array();\n        $siteModule = $this->params()->fromRoute('siteModule');\n        $pageId = $this->params()->fromRoute('pageId');\n        // melis plugin service\n        $pluginSvc = $this->getServiceManager()->get('MelisCorePluginsService');\n        // check for new plugins or manually installed and insert in db or fresh plugins\n        $pluginSvc->checkTemplatingPlugins();\n        $pluginList_ = $this->putSectionOnPlugins($config['plugins'], $siteModule);\n        $newPluginList = $this->organizedPluginsBySection($pluginList_);\n        // remove section that has no child under on it\n        $newPluginList = array_filter($newPluginList);\n        // add categories for the mini-templates\n        $newPluginList = $this->categorizeMiniTemplates($newPluginList, $pageId);\n        // get the latest plugin installed\n        $latesPlugin = $pluginSvc->getLatestPlugin($pluginSvc::TEMPLATING_PLUGIN_TYPE);\n        // for new plugin notifications\n        $pluginMenuHandler = $pluginSvc->getNewPluginMenuHandlerNotifDuration();\n\n        $view = new ViewModel();\n       // $view->pluginsConfig = $finalPluginList;\n        $view->siteModule              = $siteModule;\n        $view->newPluginList           = $newPluginList;\n        $view->latestPlugin            = $latesPlugin;\n        $view->sectionNewPlugins       = array_unique($this->sectionHasNewPlugins);\n        $view->modulesHasNewPlugins    = array_unique($this->modulesHasNewPlugins);\n        $view->subsectionHasNewPlugins = $this->subsectionHasNewPlugins;\n        $view->newPluginNotification   = $pluginMenuHandler;\n\n        return $view;\n    }\n\n    /**\n     * This method will get the session\n     * data of the current page\n     */\n    public function getSessionDataAction()\n    {\n        $success = 1;\n        $data    = array();\n\n        $translator = $this->getServiceManager()->get('translator');\n        $data       = \"\";\n\n        return $data;\n    }\n\n    public function renderPluginModalAction()\n    {\n        $translator = $this->getServiceManager()->get('translator');\n\n        $parameters = $this->getRequest()->getQuery('parameters', array());\n\n        $module = (!empty($parameters['module'])) ? $parameters['module'] : '';\n        $pluginName = (!empty($parameters['pluginName'])) ? $parameters['pluginName'] : '';\n        $pluginId = (!empty($parameters['pluginId'])) ? $parameters['pluginId'] : 1;\n        $pageId = (!empty($parameters['melisActivePageId'])) ? $parameters['melisActivePageId'] : 1;\n        $siteModule = (!empty($parameters['siteModule'])) ? $parameters['siteModule'] : '';\n        $pluginHardcodedConfig = (!empty($parameters['pluginFrontConfig'])) ? $parameters['pluginFrontConfig'] : '';\n\n        $pluginHardcodedConfig = html_entity_decode($pluginHardcodedConfig, ENT_QUOTES);\n        $pluginHardcodedConfig = html_entity_decode($pluginHardcodedConfig, ENT_QUOTES);\n        $pluginHardcodedConfig = unserialize($pluginHardcodedConfig);\n\n        $errors = '';\n        $tag = '';\n        $tabs = array();\n        $config = $this->getServiceManager()->get('config');\n        if (empty($module) || empty($pluginName) || empty($pageId) || empty($pluginId))\n        {\n            $errors = $translator->translate('tr_melisfront_generate_error_No module or plugin or idpage parameters');\n        }\n        else\n        {\n            if (empty($config['plugins'][$module]['plugins'][$pluginName]))\n            {\n                $errors = $translator->translate('tr_melisfront_generate_error_Plugin config not found');\n            }\n            else\n            {\n                $pluginConf = $config['plugins'][$module]['plugins'][$pluginName];\n\n                try\n                {\n                    $pluginHardcodedConfig['id'] = $pluginId;\n                    $pluginHardcodedConfig['pageId'] = $pageId;\n                    $melisPlugin = $this->getServiceManager()->get('ControllerPluginManager')->get($pluginName);\n                    $melisPlugin->setUpdatesPluginConfig($pluginHardcodedConfig);\n                    $melisPlugin->getPluginConfigs();\n                    $tabs = $melisPlugin->createOptionsForms();\n                    $tag = $melisPlugin->getPluginXmlDbKey();\n                }\n                catch (Exception $e)\n                {\n                    $errors = $translator->translate('tr_melisfront_generate_error_Plugin cant be created');\n                }\n            }\n        }\n\n        if ($errors != '' || count($tabs) == 0)\n            $tabs[] = array('tabName' => 'Error', 'html' => $errors);\n\n        $view = new ViewModel();\n        $view->setTerminal(true);\n        $view->tabs = $tabs;\n        $view->idPage = $pageId;\n        $view->module = $module;\n        $view->pluginName = $pluginName;\n        $view->pluginId = $pluginId;\n        $view->tag = $tag;\n        $view->pluginHardcodedConfig = $pluginHardcodedConfig;\n        $view->siteModule = $siteModule;\n        return $view;\n    }\n\n\n    public function validatePluginModalAction()\n    {\n        $translator = $this->getServiceManager()->get('translator');\n\n        $parameters = $this->getRequest()->getPost()->toArray();\n\n        $module = (!empty($parameters['melisModule'])) ? $parameters['melisModule'] : '';\n        $pluginName = (!empty($parameters['melisPluginName'])) ? $parameters['melisPluginName'] : '';\n        $pluginId = (!empty($parameters['melisPluginId'])) ? $parameters['melisPluginId'] : 1;\n        $pageId = (!empty($parameters['melisIdPage'])) ? $parameters['melisIdPage'] : 1;\n\n        $errors = '';\n        $tag = '';\n        $tabs = array();\n        $config = $this->getServiceManager()->get('config');\n        if (empty($module) || empty($pluginName) || empty($pageId) || empty($pluginId))\n        {\n            $errors = $translator->translate('tr_melisfront_generate_error_No module or plugin or idpage parameters');\n        }\n        else\n        {\n            if (empty($config['plugins'][$module]['plugins'][$pluginName]))\n            {\n                $errors = $translator->translate('tr_melisfront_generate_error_Plugin config not found');\n            }\n            else\n            {\n                $pluginConf = $config['plugins'][$module]['plugins'][$pluginName];\n\n                try\n                {\n                    $pluginHardcodedConfig['id'] = $pluginId;\n                    $pluginHardcodedConfig['pageId'] = $pageId;\n                    $melisPlugin = $this->getServiceManager()->get('ControllerPluginManager')->get($pluginName);\n                    $melisPlugin->setUpdatesPluginConfig($pluginHardcodedConfig);\n                    $melisPlugin->getPluginConfigs();\n                    $errorsTabs = $melisPlugin->createOptionsForms();\n                }\n                catch (Exception $e)\n                {\n                    $errors = $translator->translate('tr_melisfront_generate_error_Plugin cant be created');\n                }\n            }\n        }\n\n        $success = 1;\n        $finalErrors = array();\n\n        if ($errors != '')\n        {\n            $success = 0;\n            $finalErrors = array('general' => $errors);\n        }\n\n        foreach($errorsTabs as $response) {\n            if(!$response['success']) {\n                $success = 0;\n            }\n\n\n\n        }\n        $finalErrors = $errorsTabs;\n\n\n        $result = array(\n            'success' => $success,\n            'errors' => $finalErrors,\n        );\n\n        return new JsonModel($result);\n    }\n\n    public function checkSessionPageAction()\n    {\n        $container = new Container('meliscms');\n        $pages = $container->getArrayCopy();//$container['content-pages'];\n\n//        \\Zend\\Debug\\Debug::dump($pages);\n        print_r($pages);\n\n        die;\n    }\n\n    public function testingAreaAction()\n    {\n        $plugin = 'melisCmsSlider';\n        $pluginId = 'showslider_1507005296';\n\n        $text = '<melisCmsSlider id=\"showslider_1507009618\" plugin_container_id=\"plugin_container_id_1507009628\" plugin_container_id=\"plugin_container_id_1507009628\" plugin_container_id=\"plugin_container_id_1507009628\" plugin_container_id=\"plugin_container_id_1507009628\" plugin_container_id=\"plugin_container_id_1507009628\">\t';\n        $pattern = '/\\splugin_container_id\\=\\\"(.*?)\\\"/';\n\n        $replace = $plugin . ' id=\"'.$pluginId.'\" plugin_container_id=\"this_is_the_id_1823121\"';\n\n        $newValue = $text;\n        if(preg_match($pattern, $text)) {\n            $newValue = preg_replace($pattern, '', $text);\n        }\n\n\n        echo trim($newValue);\n\n\n        die;\n    }\n\n    private function putSectionOnPlugins($configurations, $siteModule)\n    {\n        $pluginList = [];\n\n        // get active modules in the platform\n        $activeModules = include $_SERVER['DOCUMENT_ROOT'] . '/../config/melis.module.load.php';\n        $activeModules = array_map('strtolower', $activeModules);\n        // melis plugins configurations\n        foreach ($configurations as $moduleName => $melisPluginsConfig) {\n            // melis plugins configrations\n            // this means the module has a templating plugins or plugins\n            if (isset($melisPluginsConfig['plugins']) && ! empty($melisPluginsConfig['plugins'])) {\n                if (in_array((strtolower($moduleName)),$activeModules) || $moduleName == \"MelisMiniTemplate\" ) {\n                    foreach ($melisPluginsConfig['plugins'] as $pluginName =>  $pluginConfig) {\n                        // list of excluded plugins\n                        $excludedPlugins = [\n                            'MelisFrontDragDropZonePlugin'\n                        ];\n                        if (!in_array($pluginName,$excludedPlugins)) {\n                            // put site_module key under ['melis'] key\n                            $pluginConfig['melis']['site_module'] = $siteModule;\n                            // put section key  under['melis'] key\n                            if ((! isset($pluginConfig['melis']['section']) || isset($pluginConfig['melis']['section'])) && empty($pluginConfig['melis']['section'])) {\n                                // if there is no section key on [melis] config\n                                // or there is a section key but empty\n                                // we put it in the OTHER section directly\n                                $pluginConfig['melis']['section'] = \"Others\";\n                            }\n                            // put a moduleName for easy sectioning of plugins\n                            if (! isset($pluginConfig['melis']['moduleName']) && empty($pluginConfig['melis']['moduleName'])) {\n                                $pluginConfig['melis']['moduleName'] = $moduleName;\n                            }\n                            $pluginList[$moduleName][$pluginName] = $pluginConfig;\n                        }\n                    }\n                }\n            }\n        }\n\n        return $pluginList;\n    }\n\n    private function organizedPluginsBySection($pluginList)\n    {\n        // get module categories\n        /** @var MelisModulesService $moduleSvc */\n        $moduleSvc = $this->getServiceManager()->get('ModulesService');\n        $configSvc = $this->getServiceManager()->get('MelisCoreConfig');\n        $engineComposer  = $this->getServiceManager()->get('MelisEngineComposer');\n        $melisPuginsSvc = $this->getServiceManager()->get('MelisCorePluginsService');\n        //$marketPlaceModuleSection = $melisPuginsSvc->getPackagistCategories();\n        $marketPlaceModuleSection = [];\n        /*\n         * In case there is no internet or cant connect to the markeplace domain\n         * we put a predefined section just not destroy the plugins menu\n         */\n        if (empty($marketPlaceModuleSection)) {\n            $fallbackSection = $configSvc->getItem('/meliscore/datas/fallBacksection');\n            $marketPlaceModuleSection= $fallbackSection;\n        }\n        //custom sections\n        $customSection = [\n            'MelisCommerce', // special section\n            'Others',\n            'CustomProjects'\n        ];\n        // merge all sections\n        $melisSection = array_merge($marketPlaceModuleSection, $customSection);\n        // remove MelisCore section because there is no melis-core in front or templating plugins\n        if (($key = array_search('MelisCore',$melisSection)) !== false) {\n            unset($melisSection[$key]);\n        }\n        $newPluginList = [];\n        // put the section in order\n        if (! empty($melisSection)) {\n            foreach ($melisSection as $idx => $val) {\n                $newPluginList[$val] = [];\n            }\n        }\n        if (! empty($pluginList)) {\n            // get vendorModules\n            $vendorModules = $engineComposer->getVendorModules();\n            $vendorModules = array_unique(array_merge($moduleSvc->getActiveModules(),$vendorModules));\n\n            // convert string to lower\n            foreach ($vendorModules as $idx => $moduleName) {\n                $vendorModules[$idx] = strtolower($moduleName);\n            }\n\n            /*\n             * organized plugins with no subcategory\n             */\n            $publicModules = array_change_key_case($melisPuginsSvc->getMelisPublicModules(true), CASE_LOWER); \n\n            foreach ($pluginList as $moduleName => $plugins) {\n                // double check moduleName if it exisit on composer to avoid showing plugins that doesnt exists\n                if (in_array(strtolower($moduleName),$vendorModules) || ($moduleName == \"MelisMiniTemplate\")) {                   \n                   /*\n                    * check first if the module is public or not\n                    *  if public we will based the section on what is set from marketplace\n                    */\n                    $moduleSection = \"\";\n                    if (array_key_exists($moduleName,$publicModules)) {\n                        $moduleSection = $publicModules[$moduleName]['section'];\n                    }\n\n                    if (! empty($plugins)) {\n                        foreach ($plugins as $pluginName => $pluginConfig) {\n                            // put section for public module\n                            if (! empty($moduleSection)) {\n                                $pluginSection = $moduleSection;\n                            } else {\n                                // if it goes here means module is either private or there is no internet connection\n                                $pluginSection = $pluginConfig['melis']['section'];\n\n                            }\n                            $module =  $moduleName ;\n                            if (in_array($pluginSection,$melisSection)) {\n                                // melis conifguration\n                                $melisConfig = $pluginConfig['melis'];\n                                if (isset($melisConfig['subcategory']) && ! empty($melisConfig['subcategory'])) {\n                                    // this is for subsection\n                                    $subsectionId = $melisConfig['subcategory']['id'] ?? null;\n                                    $subsectionText = $melisConfig['subcategory']['title'] ?? null;\n                                    $newPluginList[$pluginSection][$module]['hasSubsection'] = true;\n                                    $newPluginList[$pluginSection][$module][$subsectionId][$pluginName] = $pluginConfig;\n                                    // label of sub category\n                                    $newPluginList[$pluginSection][$module][$subsectionId]['title'] = $subsectionText;\n                                    // indication that the plugin is newly installed\n                                    $isNew = $melisPuginsSvc->pluginIsNew($pluginName);\n                                    $newPluginList[$pluginSection][$module][$subsectionId][$pluginName]['isNew'] = $isNew;\n                                    if ($isNew) {\n                                        $this->sectionHasNewPlugins[] = $pluginSection;\n                                        $this->modulesHasNewPlugins[] = $module;\n                                        $this->subsectionHasNewPlugins[] = $subsectionText;\n                                    }\n                                } else {\n                                    // no subsection\n                                    $newPluginList[$pluginSection][$module][$pluginName] = $pluginConfig;\n                                    // indication that the plugin is newly installed\n                                    $isNew = $melisPuginsSvc->pluginIsNew($pluginName);\n                                    $newPluginList[$pluginSection][$module][$pluginName]['isNew'] = $isNew;\n                                    if ($isNew) {\n                                        $this->sectionHasNewPlugins[] = $pluginSection;\n                                        $this->modulesHasNewPlugins[] = $module;\n                                    }\n                                }\n                            } else {\n                                /*\n                                * if the section does not belong to the group it will go to the\n                                * Others section direclty\n                                */\n                                $melisConfig = $pluginConfig['melis'];\n                                if (isset($melisConfig['subcategory']) && ! empty($melisConfig['subcategory'])) {\n                                    // this is for subsection\n                                    $subsectionId = $melisConfig['subcategory']['id'] ?? null;\n                                    $subsectionText = $melisConfig['subcategory']['title'] ?? null;\n                                    $newPluginList['Others'][$module]['hasSubsection'] = true;\n                                    $newPluginList['Others'][$module][$subsectionId][$pluginName] = $pluginConfig;\n                                    // label of sub category\n                                    $newPluginList['Others'][$module][$subsectionId]['title'] = $subsectionText;\n                                    // indication that the plugin is newly installed\n                                    $isNew = $melisPuginsSvc->pluginIsNew($pluginName);\n                                    $newPluginList['Others'][$module][$subsectionId][$pluginName]['isNew'] = $isNew;\n                                    if ($isNew) {\n                                        $this->sectionHasNewPlugins[] = 'Others';\n                                        $this->modulesHasNewPlugins[] = $module;\n                                        $this->subsectionHasNewPlugins[] = $subsectionText;\n                                    }\n                                } else {\n                                    $newPluginList['Others'][$module][$pluginName] = $pluginConfig;\n                                    // indication that the plugin is newly installed\n                                    $isNew = $melisPuginsSvc->pluginIsNew($pluginName);\n                                    $newPluginList['Others'][$module][$pluginName]['isNew'] = $isNew;\n                                    if ($isNew) {\n                                        $this->sectionHasNewPlugins[] = 'Others';\n                                        $this->modulesHasNewPlugins[] = $module;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return $newPluginList;\n\n    }\n\n    /**\n     * Categorizes the mini templates for the page's current site\n     * @param $site_module\n     * @param $plugin_list\n     * @return mixed\n     */\n    private function categorizeMiniTemplates($plugin_list, $pageId)\n    {\n        if ( empty($plugin_list['MelisCms']['MelisMiniTemplate']))\n            return $plugin_list;\n\n        $mini_template_sites = $plugin_list['MelisCms']['MelisMiniTemplate'];\n        $sites = $this->getServiceManager()->get('MelisEngineTableSite')->fetchAll()->toArray();\n        $pageTreeService = $this->getServiceManager()->get('MelisEngineTree');\n        $site = $pageTreeService->getSiteByPageId($pageId);\n        if (empty($site))\n            $site = $pageTreeService->getSiteByPageId($pageId, 'saved');\n\n        $site_modules = [];\n        $container = new Container('meliscore');\n        // get site modules\n        foreach ($mini_template_sites as $mini_template_site_key => $mini_template_site_val) {\n            $exploded_mini_template_site_key = explode('_', $mini_template_site_key);\n            if (count($exploded_mini_template_site_key) != 1)\n                $site_modules[] = $exploded_mini_template_site_key[1];\n        }\n\n        // insert sites\n        foreach ($sites as $site_data) {\n            if ($site_data['site_id'] == $site->site_id) {\n                if (!empty($plugin_list['MelisCms']['MelisMiniTemplate']['miniTemplatePlugins_' . $site_data['site_name']])) {\n                    $service = $this->getServiceManager()->get('MelisCmsMiniTemplateService');\n                    $tree = $service->getTree($site_data['site_id'], $container['melis-lang-locale']);\n\n                    $mini_templates = $plugin_list['MelisCms']['MelisMiniTemplate']['miniTemplatePlugins_' . $site_data['site_name']];\n                    $plugin_list['MelisCms']['MelisMiniTemplate']['miniTemplatePlugins_' . $site_data['site_label']] = [];\n                    $new_plugin_list = [];\n                    $new_plugin_list['title'] = $site_data['site_label'];\n                    $in_active_categories = [];\n\n                    foreach ($tree as $key => $val) {\n                        $type = $val['type'];\n                        if ($type == 'category') {\n                            if ($val['status']) {\n                                $new_plugin_list[html_entity_decode($val['text'])] = [\n                                    'text' => html_entity_decode($val['text']),\n                                    'isCategory' => true\n                                ];\n                            } else {\n                                $in_active_categories[] = $val['text'];\n                            }\n                        } else {\n                            $exploded = explode('-', $val['parent'], 2);\n                            $parent = '';\n                            if (count($exploded) > 2) {\n                                unset($exploded[0]);\n                                $parent = implode('-', $exploded);\n                            } else if (count($exploded) == 2) {\n                                unset($exploded[0]);\n                                $parent = $exploded[1];\n                            } else {\n                                $parent = $val['parent'];\n                            }\n\n                            $title = 'MiniTemplatePlugin_' . strtolower(html_entity_decode($val['text'])) . '_' . strtolower($site_data['site_name']);\n                            if ($val['parent'] != '#') {\n                                if (!in_array($parent, $in_active_categories))\n                                    $new_plugin_list[$parent][$title] = $mini_templates[$title];\n                            } else {\n                                $new_plugin_list[$title] = $mini_templates[$title];\n                            }\n                        }\n                    }\n\n                    // remove site modules\n                    foreach ($site_modules as $site_module) {\n                        unset($plugin_list['MelisCms']['MelisMiniTemplate']['miniTemplatePlugins_' . $site_module]);\n                    }\n\n                    $plugin_list['MelisCms']['MelisMiniTemplate']['miniTemplatePlugins_' . $site_data['site_label']] = $new_plugin_list;\n                }\n            }\n        }\n\n        return $plugin_list;\n    }\n}\n", "<?php\n\n/**\n * Melis Technology (http://www.melistechnology.com)\n *\n * @copyright Copyright (c) 2016 Melis Technology (http://www.melistechnology.com)\n *\n */\n\nnamespace MelisCms\\Controller;\n\nuse Laminas\\View\\Model\\ViewModel;\nuse MelisCore\\Controller\\MelisAbstractActionController;\n\nclass SitesConfigController extends MelisAbstractActionController\n{\n    /**\n     * Renders Site Config Tab Container\n     * @return ViewModel\n     */\n    public function renderToolSitesSiteConfigAction()\n    {\n        $siteId = (int) $this->params()->fromQuery('siteId', '');\n        $melisKey = $this->getMelisKey();\n\n        $rightService = $this->getServiceManager()->get('MelisCoreRights');\n        $canAccess = $rightService->canAccess('meliscms_tool_sites_site_config_content');\n\n        $view = new ViewModel();\n\n        $view->melisKey = $melisKey;\n        $view->siteId = $siteId;\n        $view->canAccess = $canAccess;\n\n        return $view;\n    }\n\n    /**\n     * Renders Site Config Tab Content\n     * @return ViewModel\n     */\n    public function renderToolSitesSiteConfigContentAction()\n    {\n        $siteId = (int) $this->params()->fromQuery('siteId', '');\n        /**\n         * Make sure site id is not empty\n         */\n        if(empty($siteId))\n            return;\n\n        $melisKey = $this->getMelisKey();\n        $melisTool = $this->getTool();\n\n        $configForm = $melisTool->getForm('meliscms_tool_sites_siteconfig_form');\n        $activeSiteLangs = $this->getSiteActiveLanguages($siteId);\n\n        $site = $this->getSiteDataById($siteId);\n        $siteName = $site['site_name'];\n\n        $config = $this->getSiteConfig($siteId);\n        $dbConfigs = $this->getSiteConfigFromDb($siteId);\n        $dbConfIds = $this->getDbConfigIds($dbConfigs);\n        $this->kSortSiteConfig($config, $siteName, $siteId);\n        $this->prepareDbConfigs($siteId, $siteName, $dbConfigs);\n        $valuesFromDb = $this->getDbConfigKeys($siteId, $siteName, $dbConfigs, $config);\n\n        $view = new ViewModel();\n\n        $view->melisKey = $melisKey;\n        $view->siteId = $siteId;\n        $view->activeSiteLangs = $activeSiteLangs;\n        $view->configForm = $configForm;\n        $view->config = $config;\n        $view->siteName = $siteName;\n        $view->dbConfIds = $dbConfIds;\n        $view->valuesFromDb = $valuesFromDb;\n\n        return $view;\n    }\n\n    public function getModuleSitesListAction()\n    {\n\n    }\n\n    private function getDbConfigIds($dbConfig)\n    {\n        $dbConfIds = [];\n\n        foreach ($dbConfig as $conf) {\n            $dbConfIds[$conf['sconf_lang_id']] = $conf['sconf_id'];\n        }\n\n        return $dbConfIds;\n    }\n\n    private function getDbConfigKeys($siteId, $siteName, $dbConfigs, $config)\n    {\n        $valuesFromDb = [];\n\n        foreach ($dbConfigs as $dbConfig) {\n            if ($dbConfig['sconf_lang_id'] == '-1') {\n                if (array_key_exists('allSites', $dbConfig['sconf_datas']['site'][$siteName])) {\n                    foreach ($dbConfig['sconf_datas']['site'][$siteName]['allSites'] as $key => $value) {\n                        if (is_array($value) && !empty($value)) {\n                            foreach ($value as $aKey => $aVal) {\n                                $valuesFromDb['allSites'][$key][$aKey] = $aKey;\n                            }\n                        } else {\n                            $valuesFromDb['allSites'][$key] = $key;\n                        }\n                    }\n                }\n            } else {\n                foreach ($dbConfig['sconf_datas']['site'][$siteName][$siteId] as $langKey => $langValue) {\n                    foreach ($langValue as $confKey => $confVal) {\n                        if (is_array($confVal) && !empty($confVal)) {\n                            foreach ($confVal as $aKey => $aVal) {\n                                $valuesFromDb[$langKey][$confKey][$aKey] = $aKey;\n                            }\n                        } else {\n                            $valuesFromDb[$langKey][$confKey] = $confKey;\n                        }\n                    }\n                }\n            }\n        }\n\n        return $valuesFromDb;\n    }\n\n    /**\n     * Prepares the db config. unserialize array & form the complete config\n     * @param $siteId\n     * @param $siteName\n     * @param $dbConfigs\n     */\n    private function prepareDbConfigs($siteId, $siteName, &$dbConfigs)\n    {\n        foreach ($dbConfigs as &$dbConfig) {\n            if ($dbConfig['sconf_lang_id'] == '-1') {\n                $dbConfig['sconf_datas'] = [\n                    'site' => [\n                        $siteName => unserialize($dbConfig['sconf_datas'])\n                    ],\n                ];\n            } else {\n                $dbConfig['sconf_datas'] = [\n                    'site' => [\n                        $siteName => [\n                            $siteId => unserialize($dbConfig['sconf_datas'])\n                        ],\n                    ],\n                ];\n            }\n        }\n    }\n\n    /**\n     * Sorts site config key in ascending order\n     * @param $config\n     * @param $siteName\n     * @param $siteId\n     */\n    private function kSortSiteConfig(&$config, $siteName, $siteId)\n    {\n        if(!empty($config)) {\n            foreach ($config['site'][$siteName][$siteId] as $langKey => $langConfig) {\n                ksort($config['site'][$siteName][$siteId][$langKey]);\n            }\n        }\n    }\n\n    /**\n     * Returns site config from db\n     * @param $siteId\n     * @return mixed\n     */\n    private function getSiteConfigFromDb($siteId)\n    {\n        $siteConfigTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteConfig');\n\n        return $siteConfigTable->getEntryByField('sconf_site_id', $siteId)->toArray();\n    }\n\n    /**\n     * Returns Site Config (merged | final)\n     * @param $siteId\n     * @return mixed\n     */\n    private function getSiteConfig($siteId)\n    {\n        $siteConfigSrv = $this->getServiceManager()->get('MelisSiteConfigService');\n\n        return $siteConfigSrv->getSiteConfig($siteId, true);\n    }\n\n    /**\n     * Returns Site Data\n     * @param $siteId\n     * @return mixed\n     */\n    private function getSiteDataById($siteId)\n    {\n        $siteTable = $this->getServiceManager()->get('MelisEngineTableSite');\n\n        return $siteTable->getEntryById($siteId)->toArray()[0];\n    }\n\n    /**\n     * Returns Site Active Languages\n     * @param $siteId\n     * @return mixed\n     */\n    private function getSiteActiveLanguages($siteId)\n    {\n        $siteLangsTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteLangs');\n\n        return $siteLangsTable->getSiteLangs(null, $siteId, null, true)->toArray();\n    }\n\n    /**\n     * Returns Meliskey From Route | Query\n     * @return mixed\n     */\n    private function getMelisKey()\n    {\n        return $this->params()->fromRoute('melisKey', $this->params()->fromQuery('melisKey'), null);\n    }\n\n    /**\n     * Returns Tool Service\n     * @return array|object\n     */\n    private function getTool()\n    {\n        $toolSvc = $this->getServiceManager()->get('MelisCoreTool');\n        $toolSvc->setMelisToolKey('meliscms', 'meliscms_tool_sites');\n\n        return $toolSvc;\n    }\n}\n", "<?php\n\n/**\n * Melis Technology (http://www.melistechnology.com)\n *\n * @copyright Copyright (c) 2016 Melis Technology (http://www.melistechnology.com)\n *\n */\n\nnamespace MelisCms\\Controller;\n\nuse MelisCore\\Controller\\MelisAbstractActionController;\nuse MelisFront\\Service\\MelisSiteConfigService;\nuse Laminas\\View\\Model\\ViewModel;\nuse Laminas\\View\\Model\\JsonModel;\nuse MelisCore\\Service\\MelisCoreRightsService;\nuse Laminas\\Config\\Reader\\Json;\nuse phpDocumentor\\Reflection\\Types\\Boolean;\n\n/**\n * Site Tool Plugin\n */\nclass SitesController extends MelisAbstractActionController\n{\n    const TOOL_INDEX = 'meliscms';\n    const TOOL_KEY = 'meliscms_tool_sites';\n\n    const SITE_TABLE_PREFIX = 'site_';\n    const DOMAIN_TABLE_PREFIX = 'sdom_';\n    const SITE404_TABLE_PREFIX = 's404_';\n\n    /**\n     * Main container of the tool, this holds all the components of the tools\n     * @return ViewModel();\n     */\n    public function renderToolSitesAction() {\n        \n        $melisKey = $this->getMelisKey();\n        $view = new ViewModel();\n        $view->melisKey = $melisKey;\n        return $view;\n    }\n\n    /**\n     * @return ViewModel();\n     */\n    public function renderToolSitesEditAction() {\n        $siteId = (int) $this->params()->fromQuery('siteId', '');\n        $melisKey = $this->getMelisKey();\n        $view = new ViewModel();\n        $view->melisKey = $melisKey;\n        $view->siteId = $siteId;\n\n        return $view;\n    }\n\n    /**\n     * @return ViewModel();\n     */\n    public function renderToolSitesEditHeaderAction() {\n        $siteId = (int) $this->params()->fromQuery('siteId', '');\n        $melisKey = $this->getMelisKey();\n\n        $view = new ViewModel();\n        $view->melisKey = $melisKey;\n        $view->siteId = $siteId;\n        $view->siteLabel = $this->getSiteDataById($siteId)['site_label'] ?? '';\n\n        return $view;\n    }\n\n    /**\n     * @return ViewModel();\n     */\n    public function renderToolSitesEditSiteHeaderSaveAction() {\n        $siteId = (int) $this->params()->fromQuery('siteId', '');\n        $melisKey = $this->getMelisKey();\n        $view = new ViewModel();\n        $view->melisKey = $melisKey;\n        $view->siteId = $siteId;\n        return $view;\n    }\n\n    public function renderToolSitesTabsAction() {\n\n        $siteId = (int) $this->params()->fromQuery('siteId', '');\n        $melisKey = $this->getMelisKey();\n        $view = new ViewModel();\n        $view->melisKey = $melisKey;\n        $view->siteId = $siteId;\n        return $view;\n    }\n\n    public function renderToolSitesSiteConfigAction() {\n\n        $siteId = (int) $this->params()->fromQuery('siteId', '');\n        $melisKey = $this->getMelisKey();\n        $view = new ViewModel();\n        $view->melisKey = $melisKey;\n        $view->siteId = $siteId;\n        return $view;\n    }\n\n    /**\n     * Renders to the header section of the tool\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesHeaderAction() {\n\n        $melisKey = $this->getMelisKey();\n\n        $view              = new ViewModel();\n        $view->melisKey    = $melisKey;\n        $view->headerTitle = $this->getTool()->getTranslation('tr_meliscms_tool_sites_header_title');\n        $view->subTitle    = $this->getTool()->getTranslation('tr_meliscms_tool_sites_header_sub_title');\n        return $view;\n    }\n\n    public function renderToolSitesHeaderAddAction()\n    {\n        $view = new ViewModel();\n        return $view;\n    }\n\n    /**\n     * Renders to the refresh button in the table filter bar\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesContentFilterRefreshAction()\n    {\n        return new ViewModel();\n    }\n\n    /**\n     * Renders to the Search input in the table filter bar\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesContentFilterSearchAction()\n    {\n        return new ViewModel();\n    }\n\n    /**\n     * Renders to the limit selection in the table filter bar\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesContentFilterLimitAction()\n    {\n        return new ViewModel();\n    }\n    \n    /**\n     * Renders to the center content of the tool\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesContentAction()\n    {\n        $translator = $this->getServiceManager()->get('translator');\n        $melisKey = $this->getMelisKey();\n        $melisTool = $this->getServiceManager()->get('MelisCoreTool');\n        $melisTool->setMelisToolKey(self::TOOL_INDEX, self::TOOL_KEY);\n\n        $columns = $melisTool->getColumns();\n        // pre-add Action Columns\n        $columns['actions'] = array('text' => $translator->translate('tr_meliscms_action'));\n\n        $view = new ViewModel();\n        $view->melisKey = $melisKey;\n        $view->tableColumns = $columns;\n        $view->getToolDataTableConfig = $melisTool->getDataTableConfiguration('#tableToolSites',false,false,array('order' => '[[ 0, \"desc\" ]]'));\n        return $view;\n    }\n\n    /**\n     * Renders to the edit button in the table\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesContentActionMinifyAssetsAction()\n    {\n        return new ViewModel();\n    }\n\n    /**\n     * This is the container of the modal\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesModalContainerAction()\n    {\n        $melisKey = $this->getMelisKey();\n\n        $id = $this->params()->fromRoute('id', $this->params()->fromQuery('id', ''));\n\n        $view = new ViewModel();\n        $view->setTerminal(false);\n        $view->melisKey = $melisKey;\n        $view->id = $id;\n\n        return $view;\n    }\n    \n    /**\n     * Renders to the empty modal display, this will be displayed if the user doesn't have access to the modal tabs\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesModalEmptyAction()\n    {\n        $config = $this->getServiceManager()->get('MelisCoreConfig');\n        $tool = $config->getItem('/meliscms/interface/meliscms_toolstree/interface/meliscms_tool_sites/interface/meliscms_tool_sites_modals');\n        return new ViewModel();\n    }\n    \n\n    /**\n     * Displays the add form in the modal\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesModalAddAction()\n    {\n        // declare the Tool service that we will be using to completely create our tool.\n        $melisKey = $this->getMelisKey();\n        $view = new ViewModel();\n        $view->setTerminal(false);\n        $view->melisKey  = $melisKey;\n        return $view;\n    }\n\n    public function renderToolSitesModalAddStep1Action()\n    {\n        $melisKey = $this->getMelisKey();\n\n        // declare the Tool service that we will be using to completely create our tool.\n        $melisTool = $this->getServiceManager()->get('MelisCoreTool');\n\n        // tell the Tool what configuration in the app.tools.php that will be used.\n        $melisTool->setMelisToolKey(self::TOOL_INDEX, self::TOOL_KEY);\n        //prepare the user profile form\n        $form = $melisTool->getForm('meliscms_tool_sites_modal_add_step1_form');\n\n        $view = new ViewModel();\n        $view->setVariable('step1_form', $form);\n        $view->melisKey = $melisKey;\n\n        return $view;\n    }\n    public function renderToolSitesModalAddStep2Action()\n    {\n        $melisKey = $this->getMelisKey();\n\n        //get the lang list\n        $langService = $this->getServiceManager()->get('MelisEngineLang');\n        $langList = $langService->getAvailableLanguages();\n\n        // declare the Tool service that we will be using to completely create our tool.\n        $melisTool = $this->getServiceManager()->get('MelisCoreTool');\n\n        // tell the Tool what configuration in the app.tools.php that will be used.\n        $melisTool->setMelisToolKey(self::TOOL_INDEX, self::TOOL_KEY);\n        //prepare the step2 forms\n        $formMultiLingual = $melisTool->getForm('meliscms_tool_sites_modal_add_step2_form_multi_language');\n        $formSingleLanguage = $melisTool->getForm('meliscms_tool_sites_modal_add_step2_form_single_language');\n\n        $view = new ViewModel();\n        $view->setVariable('step2_form_multi_language', $formMultiLingual);\n        $view->setVariable('step2_form_single_language', $formSingleLanguage);\n        $view->melisKey = $melisKey;\n        $view->langList = $langList;\n\n        return $view;\n    }\n    public function renderToolSitesModalAddStep3Action()\n    {\n        $melisKey = $this->getMelisKey();\n\n        // declare the Tool service that we will be using to completely create our tool.\n        $melisTool = $this->getServiceManager()->get('MelisCoreTool');\n\n        // tell the Tool what configuration in the app.tools.php that will be used.\n        $melisTool->setMelisToolKey(self::TOOL_INDEX, self::TOOL_KEY);\n        //prepare the step2 forms\n        $formMultiDomain = $melisTool->getForm('meliscms_tool_sites_modal_add_step3_form_multi_domain');\n        $formSingleDomain = $melisTool->getForm('meliscms_tool_sites_modal_add_step3_form_single_domain');\n\n        $view = new ViewModel();\n        $view->setVariable('step3_form_multi_domain', $formMultiDomain);\n        $view->setVariable('step3_form_single_domain', $formSingleDomain);\n        $view->melisKey  = $melisKey;\n        return $view;\n    }\n    public function renderToolSitesModalAddStep4Action()\n    {\n        $melisKey = $this->getMelisKey();\n\n        // declare the Tool service that we will be using to completely create our tool.\n        $melisTool = $this->getServiceManager()->get('MelisCoreTool');\n\n        // tell the Tool what configuration in the app.tools.php that will be used.\n        $melisTool->setMelisToolKey(self::TOOL_INDEX, self::TOOL_KEY);\n        //prepare the step4 forms\n        $moduleForm = $melisTool->getForm('meliscms_tool_sites_modal_add_step4_form_module');\n\n        $view = new ViewModel();\n        $view->setVariable('step4_form_module', $moduleForm);\n        $view->melisKey = $melisKey;\n        return $view;\n    }\n    public function renderToolSitesModalAddStep5Action()\n    {\n        $melisKey = $this->getMelisKey();\n        $view = new ViewModel();\n        $view->setTerminal(false);\n        $view->melisKey = $melisKey;\n        return $view;\n    }\n    \n\n    public function renderToolSitesModalEditAction()\n    {\n        // declare the Tool service that we will be using to completely create our tool.\n        $melisTool = $this->getServiceManager()->get('MelisCoreTool');\n    \n        // tell the Tool what configuration in the app.tool.php that will be used.\n        $melisTool->setMelisToolKey(self::TOOL_INDEX, self::TOOL_KEY);\n    \n        $view = new ViewModel();\n    \n        $view->setVariable('meliscms_site_tool_edition_form', $melisTool->getForm('meliscms_site_tool_edition_form'));\n    \n        return $view;\n    }\n    \n    /**\n     * Renders to the edit button in the table\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesContentActionEditAction()\n    {\n        return new ViewModel();\n    }\n    \n    /**\n     * Renders to the delete button in the table\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesContentActionDeleteAction()\n    {\n        return new ViewModel();\n    }\n    \n    public function renderToolSitesNewSiteConfirmationModalAction()\n    {\n        $melisKey = $this->params()->fromRoute('melisKey', '');\n\n        $view = new ViewModel();\n        $view->melisKey = $melisKey;\n\n        return $view;\n    }\n    \n    /**\n     * Returns all the data from the site table, site domain and site 404\n     */\n    public function getSiteDataAction()\n    {\n        $cmsSiteSrv = $this->getServiceManager()->get('MelisCmsSiteService');\n        $siteTable = $this->getServiceManager()->get('MelisEngineTableSite');\n        $translator = $this->getServiceManager()->get('translator');\n\n        $melisTool = $this->getServiceManager()->get('MelisCoreTool');\n        $melisTool->setMelisToolKey(self::TOOL_INDEX, self::TOOL_KEY);\n\n        $colId = array();\n        $dataCount = 0;\n        $draw = 0;\n        $tableData = array();\n\n        if($this->getRequest()->isPost())\n        {\n            $colId = array_keys($melisTool->getColumns());\n\n            $sortOrder = $this->getRequest()->getPost('order');\n            $sortOrder = $sortOrder[0]['dir'];\n\n            $selCol = $this->getRequest()->getPost('order');\n            $selCol = $colId[$selCol[0]['column']];\n\n            $draw = $this->getRequest()->getPost('draw');\n\n            $start = (int)$this->getRequest()->getPost('start');\n            $length = (int)$this->getRequest()->getPost('length');\n\n            $search = $this->getRequest()->getPost('search');\n            $search = $search['value'];\n\n            $dataCount = $siteTable->getTotalData();\n\n            $getData = $siteTable->getSitesData($search, $melisTool->getSearchableColumns(), $selCol, $sortOrder, $start, $length);\n            $dataFilter = $siteTable->getSitesData($search, $melisTool->getSearchableColumns(), $selCol, $sortOrder, null, null);\n\n            $tableData = $getData->toArray();\n            for ($ctr = 0; $ctr < count($tableData); $ctr++) {\n                // apply text limits\n                foreach ($tableData[$ctr] as $vKey => $vValue) {\n                    $tableData[$ctr][$vKey] = $melisTool->limitedText($melisTool->escapeHtml($vValue));\n                }\n\n                // manually modify value of the desired row\n                // no specific row to be modified\n\n                // add DataTable RowID, this will be added in the <tr> tags in each rows\n                $tableData[$ctr]['DT_RowId'] = $tableData[$ctr]['site_id'];\n\n                /**\n                 * Check if module exist to disable the\n                 * minify button\n                 */\n                $modulePath = $cmsSiteSrv->getModulePath($tableData[$ctr]['site_name']);\n                if(file_exists($modulePath)){\n                    $attrArray = array('data-mod-found'   => true);\n                }else{\n                    $attrArray = array('data-mod-found'   => false);\n                }\n\n                //assign attribute data to table row\n                $tableData[$ctr]['DT_RowAttr'] = $attrArray;\n            }\n        }\n\n        return new JsonModel(array(\n            'draw' => (int) $draw,\n            'recordsTotal' => $dataCount,\n            'recordsFiltered' =>  $dataFilter->count(),\n            'data' => $tableData,\n        ));\n    }\n\n    /**\n     * @return JsonModel\n     */\n    public function createNewSiteAction()\n    {\n        $sId = null;\n        $errors = array();\n        $status = false;\n        $siteIds = array();\n        $siteName = '';\n        $siteLabel = '';\n        $textMessage = '';\n        $siteTablePrefix = self::SITE_TABLE_PREFIX;\n        $domainTablePrefix = self::DOMAIN_TABLE_PREFIX;\n\n        $translator = $this->getServiceManager()->get('translator');\n        $cmsSiteSrv = $this->getServiceManager()->get('MelisCmsSiteService');\n\n        if ($this->getRequest()->isPost()) {\n            $sitesData = $this->getRequest()->getPost('data');\n            if(!empty($sitesData)) {\n                $createNewFile = false;\n                $isNewSIte = false;\n                $siteData = array();\n                $siteLanguages = array();\n                $site404Data = array();\n                $domainData = array();\n                $domainDataTemp = array();\n\n                /**\n                 * This will look for every specific data for each table(site, domains, etc..)\n                 *\n                 * The Domain is specific case cause there's a chance that the user will\n                 * select multi domain for every site(depend on language) and even though\n                 * the user select single domain, we will still need to prepare the data as\n                 * equal to multi domain\n                 */\n                foreach ($sitesData as $key => $value) {\n                    if (!empty($value['data']) && is_array($value['data'])) {\n                        foreach ($value['data'] as $k => $val) {\n                            if (!empty($val) && is_array($val)) {\n                                if (!empty($val['name'])) {\n                                    /**\n                                     * add site data\n                                     */\n                                    if (strpos($val['name'], $siteTablePrefix) !== false) {\n                                        $siteData[$val['name']] = $val['value'];\n                                    }\n\n                                    /**\n                                     * add the domain data\n                                     */\n                                    if ($key == 'domains') {\n                                        /**\n                                         * if it is came from the domain form, we will put\n                                         * it inside the main domain data container\n                                         */\n                                        if (strpos($val['name'], $domainTablePrefix) !== false) {\n                                            $domainData[$k][$val['name']] = $val['value'];\n                                        }\n                                    } else {\n                                        /**\n                                         * we will put the domain data to temporary\n                                         * container to add to main container later\n                                         */\n                                        if (strpos($val['name'], $domainTablePrefix) !== false) {\n                                            $domainDataTemp[$val['name']] = $val['value'];\n                                        }\n                                    }\n                                } else {\n                                    /**\n                                     * This will add the data that the key\n                                     * is equal to the field name\n                                     */\n                                    foreach ($val as $field => $fieldValue) {\n                                        /**\n                                         * add site data\n                                         */\n                                        if (strpos($field, $siteTablePrefix) !== false) {\n                                            $siteData[$field] = $fieldValue;\n                                        }\n\n                                        /**\n                                         * add domain data\n                                         */\n                                        if (strpos($field, $domainTablePrefix) !== false) {\n                                            $domainData[$k][$field] = $fieldValue;\n                                        }\n                                    }\n                                }\n                            } else {\n                                /**\n                                 * add the site data\n                                 */\n                                if (strpos($k, $siteTablePrefix) !== false) {\n                                    $siteData[$k] = $val;\n                                }\n\n                                /**\n                                 * Add the other domain data to temporary container\n                                 * since it came from other form, were just gonna\n                                 * add this to main domain container later\n                                 */\n                                if (strpos($k, $domainTablePrefix) !== false) {\n                                    $domainDataTemp[$k] = $val;\n                                }\n                            }\n                        }\n                    } else {\n                        foreach ($value as $fieldKey => $fieldValue) {\n                            /**\n                             * add the site data\n                             */\n                            if (strpos($fieldKey, $siteTablePrefix) !== false) {\n                                $siteData[$fieldKey] = $fieldValue;\n                            }\n\n                            /**\n                             * Add the other domain data to temporary container\n                             * since it came from other form, were just gonna\n                             * add this to main domain container later\n                             */\n                            if (strpos($fieldKey, $domainTablePrefix) !== false) {\n                                $domainDataTemp[$fieldKey] = $fieldValue;\n                            }\n                        }\n                    }\n\n                    /**\n                     * Check if it is a new site and if were are\n                     * gonna create a file for this site\n                     */\n                    if ($key == 'module') {\n                        $createNewFile = ($value['createFile'] === 'true');\n                        $isNewSIte = ($value['newSite'] === 'true');\n                    }\n\n                    /**\n                     * get the site languages\n                     */\n                    if ($key == 'languages') {\n                        $siteLanguages = $value;\n                    }\n                }\n\n                /**\n                 * Fill the other fields with the default one\n                 * if the fields are still empty\n                 */\n                //check if $domainData is empty\n                if (empty($domainData) && !empty($domainDataTemp)) {\n                    foreach ($siteLanguages as $locale => $langId) {\n                        if($locale != 'sites_url_setting') {\n                            foreach ($domainDataTemp as $dom => $val) {\n                                $domainData[$locale] = array($dom => $val);\n                            }\n                        }\n                    }\n                }\n                //we need to loop the domain to fill all fields\n                foreach ($domainData as $domKey => $domVal) {\n                    //add the temporary domain data to the main container\n                    foreach ($domainDataTemp as $tempKey => $tempVal) {\n                        if (empty($domainData[$domKey][$tempKey])) {\n                            $domainData[$domKey][$tempKey] = $tempVal;\n                        }\n                    }\n                    /**\n                     * add some default data to domain\n                     * if the fields does not exist\n                     * or empty\n                     */\n                    $domainData[$domKey]['sdom_env'] = (!empty($domainData[$domKey]['sdom_env'])) ? $domainData[$domKey]['sdom_env'] : getenv('MELIS_PLATFORM');\n                    $domainData[$domKey]['sdom_scheme'] = (!empty($domainData[$domKey]['sdom_scheme'])) ? $domainData[$domKey]['sdom_scheme'] : 'http';\n                }\n                //field the site data\n                if (!empty($siteData)) {\n                    $siteName = (!empty($siteData['site_name'])) ? $cmsSiteSrv->generateModuleNameCase($siteData['site_name']) : '';\n                    $siteLabel = (!empty($siteData['site_label'])) ? $siteData['site_label'] : $siteName;\n                    $siteData['site_label'] = $siteLabel;\n                    $siteData['site_name'] = $siteName;\n                }\n\n                /**\n                 * Before proceeding to save the site\n                 * check if it is a new site and\n                 * the site is not yet created\n                 */\n                $isValidName = true;\n                if ($isNewSIte) {\n                    $siteTable = $this->getServiceManager()->get('MelisEngineTableSite');\n                    $siteDBData = $siteTable->getEntryByField('site_name', $siteName)->current();\n                    if (!empty($siteDBData)) {\n                        $isValidName = false;\n                    }\n                }\n\n                if ($isValidName) {\n                    $saveSiteResult = $cmsSiteSrv->saveSite($siteData, $domainData, $siteLanguages, $site404Data, $siteName, $createNewFile, $isNewSIte);\n\n                    if ($saveSiteResult['success'])\n                    {\n                        $siteIds = $saveSiteResult['site_ids'];\n                        $textMessage = 'tr_melis_cms_sites_tool_add_create_site_success';\n                        $status = true;\n                        //regenerate modules path\n                        $this->regenerateModulesPath();\n                    }\n                    else\n                    {\n                        $textMessage = 'tr_melis_cms_sites_tool_add_unable_to_create_site';\n                        $errors = array(\n                            $translator->translate('tr_melis_cms_sites_tool_add_site_error') => array(\n                                'error' => $translator->translate($saveSiteResult['message'])\n                            ),\n                        );\n                        $status = false;\n                    }\n                }else{\n                    $textMessage = 'tr_melis_cms_sites_tool_add_unable_to_create_site';\n                    $errors = array(\n                        $translator->translate('tr_meliscms_tool_sites_module_name') => array(\n                            'moduleAlreadyExists' => $translator->translate('tr_melis_cms_sites_tool_add_site_module_already_exist')\n                        ),\n                    );\n                    $status = false;\n                }\n            }\n        }\n\n        $response = array(\n            'success' => $status,\n            'textTitle' => 'tr_meliscms_tool_site',\n            'textMessage' => $textMessage,\n            'siteIds' => $siteIds,\n            'siteName' => $siteLabel,\n            'siteModuleName' => $siteName,\n            'errors' => $errors\n        );\n\n        /**\n         * add logs\n         */\n        if(empty($siteIds)) {\n            $this->getEventManager()->trigger('meliscms_site_save_end', $this, array_merge($response, array('typeCode' => 'CMS_SITE_ADD', 'itemId' => $sId)));\n        }else{\n            foreach ($siteIds as $key => $id) {\n                $this->getEventManager()->trigger('meliscms_site_save_end', $this, array_merge($response, array('typeCode' => 'CMS_SITE_ADD', 'itemId' => $id)));\n            }\n        }\n\n       return new JsonModel($response);\n    }\n\n    /**\n     * Add New Site\n     * @return \\Laminas\\View\\Model\\JsonModel\n     */\n    public function saveSiteAction()\n    {\n        $eventDatas = array();\n        $this->getEventManager()->trigger('meliscms_sites_save_start', $this, $eventDatas);\n\n        $status  = 1;\n        $errors  = array();\n        $textMessage = 'tr_melis_cms_site_save_ko';\n        $logTypeCode = 'CMS_SITE_UPDATE';\n        $translator = $this->getServiceManager()->get('translator');\n        $siteId = (int) $this->params()->fromQuery('siteId', '');\n        $request = $this->getRequest();\n        $data = $request->getPost()->toArray();\n        $melisCoreAuth = $this->getServiceManager()->get('MelisCoreAuth');\n        $userAuthDatas = $melisCoreAuth->getStorage()->read();\n        $isAdmin = isset($userAuthDatas->usr_admin) || $userAuthDatas->usr_admin != \"\" ? $userAuthDatas->usr_admin : 0;\n\n        $success = 0;\n        $ctr = 0;\n        $ctr1 = 0;\n\n        $moduleList = [];\n        $domainData = [];\n        $sitePropData = [];\n        $siteHomeData = [];\n        $siteConfigTabData = [];\n\n        foreach ($data as $datum => $val) {\n            //collecting data for site module load\n            if ($isAdmin) {\n                if (strstr($datum,'moduleLoad')) {\n                    $datum = str_replace(\"moduleLoad\", '', $datum);\n                    array_push($moduleList, $datum);\n                }\n            }\n\n            //collecting data for site domains\n            if (strstr($datum,'sdom_')) {\n                $key = substr($datum, (strpos($datum, '_') ?: -1) + 1);\n                if(!empty($domainData[$ctr]))\n                    if(array_key_exists($key, $domainData[$ctr]))\n                        $ctr++;\n                $domainData[$ctr][$key] = $val;\n            }\n\n            //collecting data for site properties\n            if (strstr($datum,'siteprop_')) {\n                $datum = str_replace(\"siteprop_\", '', $datum);\n                $sitePropData[$datum] = $val;\n            }\n\n            //collecting data for site language homepages\n            if (strstr($datum,'shome_')) {\n                $key = substr($datum, (strpos($datum, '_') ?: -1) + 1);\n                if(!empty($siteHomeData[$ctr1]))\n                    if(array_key_exists($key, $siteHomeData[$ctr1]))\n                        $ctr1++;\n                $siteHomeData[$ctr1][$key] = $val;\n            }\n\n            //data for site config\n            if (strstr($datum,'sconf_')) {\n                $lang = explode('_', $datum)[0];\n                $key = substr($datum, strpos($datum, '_') + 1);\n                $tableColumns = [\n                    'sconf_id',\n                    'sconf_site_id',\n                    'sconf_lang_id'\n                ];\n\n                if (in_array($key, $tableColumns)) {\n                    $siteConfigTabData[$lang][$key] = $val;\n                } else {\n                    $key = substr($datum, strpos($datum, '_', strpos($datum, '_') + 1) + 1);\n\n                    if (is_array($val)) {\n                        $siteConfigTabData[$lang]['configArray'][$key] = $val;\n                    } else {\n                        $siteConfigTabData[$lang]['config'][$key] = $val;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Prepare the transaction so that\n         * we can rollback the db process if\n         * there are some error occurred\n         */\n        $db = $this->getServiceManager()->get('Laminas\\Db\\Adapter\\Adapter');//get db adapter\n        $con = $db->getDriver()->getConnection();//get db driver connection\n        $con->beginTransaction();//begin transaction\n        try {\n            /**\n             * Try to save the site data's\n             */\n            $this->saveSiteDomains($domainData, $errors, $status);\n            $this->saveSiteHomePages($siteHomeData, $data, $errors, $status);\n            $this->saveSiteConfig($siteId,$siteConfigTabData);\n            $this->saveSiteProperties($siteId, $sitePropData, $errors, $status);\n            $this->saveSiteLanguagesTab($siteId, $data);\n            /**\n             * If there is no error\n             * execute the saving\n             */\n            if(empty($errors)){\n                $textMessage = 'tr_melis_cms_site_save_ok';\n                /**\n                 * If there are no errors\n                 * on db saving, we can now process\n                 * the module saving\n                 */\n                $this->saveSiteModules($isAdmin, $siteId, $moduleList,$status, $path);\n                if($status) {\n                    /**\n                     * remove languages from other tabs\n                     */\n                    if (isset($data['to_delete_languages_data'])) {\n                        $LangIds = [];\n\n                        foreach ($data['to_delete_languages_data'] as $langKey => $langVal) {\n                            if ($langVal === 'true') {\n                                array_push($LangIds, $langKey);\n                            }\n                        }\n\n                        if (!empty($data['to_delete_languages_data'])) {\n                            $this->deleteOtherTabsData($siteId, $LangIds);\n                        }\n                    }\n                    //clear cache\n                    $this->clearSiteConfigCache($siteId);\n                    /**\n                     * if no error, execute the saving\n                     */\n                    $con->commit();\n                }else{\n                    $status = false;\n                    $textMessage = sprintf($translator->translate(\"tr_meliscms_tool_site_module_load_no_rights\"), $path);\n                    $tmpModuleErrorMsg = $translator->translate('tr_melis_cms_site_save_ko');\n                    $con->rollback();\n                }\n            }else{\n                $status = false;\n                /**\n                 * rollback everything\n                 */\n                $con->rollback();\n            }\n        }catch (\\Exception $ex){\n            $status = false;\n            $textMessage = 'tr_melis_cms_site_save_ko';\n            /**\n             * If error occurred\n             * rollback the process\n             */\n            $con->rollback();\n        }\n\n        $response = array(\n            'success' => $status,\n            'textTitle' => $translator->translate('tr_meliscms_tool_site'),\n            'textMessage' => $translator->translate($textMessage),\n            'errors' => $errors,\n        );\n\n        if ($siteId)\n        {\n            $response['siteId'] = $siteId;\n        }\n\n        if (isset($tmpModuleErrorMsg)) {\n            $response['tmpModuleErrorMsg'] = $tmpModuleErrorMsg;\n        }\n\n        $this->getEventManager()->trigger('meliscms_site_save_end', $this, array_merge($response, array('typeCode' => $logTypeCode, 'itemId' => $siteId)));\n\n        return new JsonModel($response);\n    }\n\n    /**\n     * Function to delete site\n     *\n     * @return JsonModel\n     */\n    public function deleteSiteAction()\n    {\n        $request = $this->getRequest();\n        $status  = false;\n        $textMessage = 'tr_meliscms_tool_site_delete_failed';\n        $eventDatas = array();\n        $siteId = null;\n\n        $this->getEventManager()->trigger('meliscms_site_delete_start', $this, $eventDatas);\n        if($request->isPost()) {\n            /**\n             * get site id\n             */\n            $siteId = (int) $request->getPost('siteId');\n            /**\n             * Get services/tables\n             */\n            $siteTable = $this->getServiceManager()->get('MelisEngineTableSite');\n            $domainTable = $this->getServiceManager()->get('MelisEngineTableSiteDomain');\n            $site404Table = $this->getServiceManager()->get('MelisEngineTableSite404');\n            $siteHomeTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteHome');\n            $sitelangsTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteLangs');\n\n            // make sure our ID is not empty\n            if(!empty($siteId))\n            {\n                /**\n                 * Prepare the transaction so that\n                 * we can rollback the db deletion if\n                 * there are some error occurred\n                 */\n                $db = $this->getServiceManager()->get('Laminas\\Db\\Adapter\\Adapter');//get db adapter\n                $con = $db->getDriver()->getConnection();//get db driver connection\n                $con->beginTransaction();//begin transaction\n                try {\n                    /**\n                     * Prepare to delete site datas\n                     */\n                    $siteTable->deleteByField('site_id', $siteId);\n                    $domainTable->deleteByField('sdom_site_id', $siteId);\n                    $site404Table->deleteByField('s404_site_id', $siteId);\n                    $siteHomeTable->deleteByField('shome_site_id', $siteId);\n                    $sitelangsTable->deleteByField('slang_site_id', $siteId);\n\n                    $status = true;\n                    $textMessage = 'tr_meliscms_tool_site_delete_success';\n\n                    /**\n                     * If there is no error\n                     * execute the deletion\n                     */\n                    $con->commit();\n                }catch (\\Exception $ex){\n                    /**\n                     * If error occurred\n                     * rollback the process\n                     */\n                    $con->rollback();\n                }\n            }\n        }\n\n        $response = array(\n            'success' => $status ,\n            'textTitle' => 'tr_meliscms_tool_site',\n            'textMessage' => $textMessage\n        );\n        $this->getEventManager()->trigger('meliscms_site_delete_end', $this, array_merge($response, array('typeCode' => 'CMS_SITE_DELETE', 'itemId' => $siteId)));\n\n        return new JsonModel($response);\n    }\n\n    /**\n     * Save site properties\n     *\n     * @param $siteId\n     * @param $sitePropData\n     * @param $errors\n     * @param $status\n     */\n    private function saveSiteProperties($siteId, $sitePropData, &$errors, &$status)\n    {\n        /**\n         * Check if there is data to be process\n         */\n        if(!empty($sitePropData)) {\n            $form = $this->getTool()->getForm('meliscms_tool_sites_properties_form');\n            $form->setData($sitePropData);\n\n            if ($form->isValid()) {\n                $siteTbl = $this->getServiceManager()->get('MelisEngineTableSite');\n                $siteData = $siteTbl->getEntryById($siteId)->toArray()[0];\n                $dataToUpdate = [];\n\n                foreach ($siteData as $siteDatumKey => $siteDatum) {\n                    if (array_key_exists($siteDatumKey, $sitePropData)) {\n                        if ($sitePropData[$siteDatumKey] != $siteDatum) {\n                            $dataToUpdate[$siteDatumKey] = $sitePropData[$siteDatumKey];\n                        }\n                    }\n                }\n\n                if (!empty($dataToUpdate)) {\n                    $siteTbl->update($dataToUpdate, 'site_id', $siteId);\n                }\n\n                $site404Tbl = $this->getServiceManager()->get('MelisEngineTableSite404');\n                $site404 = $site404Tbl->getEntryByField('s404_site_id', $siteId)->current();\n                if (!empty($site404)) {\n                    if ($site404->s404_page_id != $sitePropData['s404_page_id']) {\n                        $site404Tbl->update(\n                            [\n                                's404_page_id' => $sitePropData['s404_page_id']\n                            ],\n                            's404_site_id',\n                            $siteId\n                        );\n                    }\n                } else {\n                    //save the 404 id\n                    $site404Tbl->save([\n                        's404_site_id' => $siteId,\n                        's404_page_id' => $sitePropData['s404_page_id']\n                    ]);\n                }\n            } else {\n                $err = [];\n\n                foreach ($form->getMessages() as $key => $val) {\n                    $err['siteprop_' . $key] = $val;\n                }\n\n                $errors = array_merge($errors, $err);\n                $status = 0;\n            }\n        }\n    }\n\n    /**\n     * Save site modules\n     *\n     * @param $isAdmin\n     * @param $siteId\n     * @param $moduleList\n     * @param $status\n     * @param $path\n     */\n    private function saveSiteModules($isAdmin, $siteId, $moduleList, &$status, &$path)\n    {\n        $siteModuleLoadSvc = $this->getServiceManager()->get(\"MelisCmsSiteModuleLoadService\");\n\n        if ($isAdmin) {\n            if(!empty($moduleList)) {\n                $data = $siteModuleLoadSvc->saveModuleLoad($siteId, $moduleList);\n                $status = $data['status'];\n                $path = $data['folder_path'];\n            }else{\n                $status = 1;\n                $path = '';\n            }\n        }\n    }\n\n    /**\n     * Save site domains\n     *\n     * @param $siteDomainData\n     * @param $errors\n     * @param $status\n     */\n    private function saveSiteDomains($siteDomainData, &$errors, &$status)\n    {\n        /**\n         * Check if there is data to be process\n         */\n        if(!empty($siteDomainData)) {\n            $siteDomainsSvc = $this->getServiceManager()->get(\"MelisCmsSitesDomainsService\");\n            $err = false;\n            $domains = [];\n            $translator = $this->getServiceManager()->get('translator');\n\n            // First check if forms are valid for every environment\n            foreach ($siteDomainData as $domainDatum) {\n                $form = $this->getTool()->getForm('meliscms_tool_sites_domain_form');\n                $form->setData($domainDatum);\n\n                if ($domainDatum['sdom_env'] == getenv('MELIS_PLATFORM')) {\n                    if (!$form->isValid()) {\n                        $err = true;\n                        $currErr = array();\n\n                        foreach ($form->getMessages() as $key => $err) {\n                            $currErr[$domainDatum[\"sdom_env\"] . \"_\" . $key] = $err;\n                        }\n\n                        $errors = array_merge($errors, $currErr);\n                        $status = 0;\n                    }\n                }\n            }\n\n            // Second check if there are duplicates\n            if (!$err) {\n                foreach ($siteDomainData as $domainDatum) {\n                    if (in_array($domainDatum['sdom_domain'], $domains)) {\n                        $err = true;\n                        $currErr = array();\n                        $currErr[$domainDatum[\"sdom_env\"] . \"_\" . 'sdom_domain'] = $translator->translate('tr_melis_cms_sites_tool_add_step3_domain_unique_error');\n                        $errors = array_merge($errors, $currErr);\n                        $status = 0;\n                    } else {\n                        $domains[$domainDatum['sdom_env']] = $domainDatum['sdom_domain'];\n                    }\n                }\n            }\n\n            // Third check if domain is already used by another site & save\n            if (!$err) {\n                foreach ($siteDomainData as $domainDatum) {\n                    $form = $this->getTool()->getForm('meliscms_tool_sites_domain_form');\n                    $form->setData($domainDatum);\n\n                    if ($domainDatum['sdom_env'] == getenv('MELIS_PLATFORM')) {\n                        $siteData = [];\n                        $isDomainAvailable = $this->checkDomain($domainDatum, $siteData);\n\n                        if ($isDomainAvailable) {\n                            $siteDomainsSvc->saveSiteDomain($domainDatum);\n                        } else {\n                            $currErr = array();\n                            $currErr[$domainDatum[\"sdom_env\"] . '_' . 'sdom_domain'] = $translator->translate('tr_melis_cms_sites_tool_add_step3_domain_error1') . $siteData['site_label'] . $translator->translate('tr_melis_cms_sites_tool_add_step3_domain_error2');\n                            $errors = array_merge($errors, $currErr);\n                            $status = 0;\n                        }\n                    } else {\n                        if (!empty($domainDatum['sdom_scheme']) && !empty($domainDatum['sdom_domain'])) {\n                            $siteData = [];\n                            $isDomainAvailable = $this->checkDomain($domainDatum, $siteData);\n\n                            if ($isDomainAvailable) {\n                                $siteDomainsSvc->saveSiteDomain($domainDatum);\n                            } else {\n                                $currErr = array();\n                                $currErr[$domainDatum[\"sdom_env\"] . '_' . 'sdom_domain'] = $translator->translate('tr_melis_cms_sites_tool_add_step3_domain_error1') . $siteData['site_label'] . $translator->translate('tr_melis_cms_sites_tool_add_step3_domain_error2');\n                                $errors = array_merge($errors, $currErr);\n                                $status = 0;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Checks if the domain is available or not\n     * @param $domainDatum\n     * @param $siteData\n     * @return bool\n     */\n    public function checkDomain($domainDatum, &$siteData) {\n        $domainTable = $this->getServiceManager()->get('MelisEngineTableSiteDomain');\n        $siteTable = $this->getServiceManager()->get('MelisEngineTableSite');\n\n        $dom = $domainTable->getEntryByField('sdom_domain', $domainDatum['sdom_domain'])->toArray();\n\n        if (!empty($dom)) {\n            $site = $siteTable->getEntryById($dom[0]['sdom_site_id'])->toArray()[0];\n\n            if ($site['site_id'] == $domainDatum['sdom_site_id']) {\n                return true;\n            } else {\n                $siteData = $site;\n                return false;\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * Save site home page ids\n     *\n     * @param $siteHomeData\n     * @param $data\n     * @param $errors\n     * @param $status\n     */\n    private function saveSiteHomePages($siteHomeData, $data, &$errors, &$status)\n    {\n        /**\n         * Check if there is data to be process\n         */\n        if(!empty($siteHomeData)) {\n            $sitePropSvc = $this->getServiceManager()->get(\"MelisCmsSitesPropertiesService\");\n\n            foreach ($siteHomeData as $siteHomeDatum) {\n                $form = $this->getTool()->getForm('meliscms_tool_sites_properties_homepage_form');\n                $form->setData($siteHomeDatum);\n                if(!empty($data['slang_lang_id'])) {\n                    if (in_array($siteHomeDatum['shome_lang_id'], $data['slang_lang_id'])) {\n                        if ($form->isValid()) {\n                            $sitePropSvc->saveSiteLangHome($siteHomeDatum);\n                        } else {\n                            $currErr = [];\n\n                            foreach ($form->getMessages() as $key => $err) {\n                                $currErr[$siteHomeDatum[\"shome_lang_id\"] . \"_\" . $key] = $err;\n                            }\n\n                            $errors = array_merge($errors, $currErr);\n                            $status = 0;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Save site languages\n     *\n     * @param $siteId\n     * @param $data\n     */\n    private function saveSiteLanguagesTab($siteId, $data)\n    {\n        if(isset($data['site_opt_lang_url'])) {\n            $siteLangsTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteLangs');\n            $siteTable = $this->getServiceManager()->get('MelisEngineTableSite');\n\n            // Saving languages\n            $siteLangs = $siteLangsTable->getSiteLangs(null, $siteId, null, null)->toArray();\n            $activeSiteLangs = $siteLangsTable->getSiteLangs(null, $siteId, null, true)->toArray();\n            $selectedSiteLangs = $data['slang_lang_id'] ?? [];\n            $noChangesOnSiteLangs = false;\n\n            // Check if active languages and selected languages are the same\n            if (count($activeSiteLangs) === count($selectedSiteLangs)) {\n                foreach ($activeSiteLangs as $activeSiteLang) {\n                    if (in_array($activeSiteLang['slang_lang_id'], $selectedSiteLangs)) {\n                        $noChangesOnSiteLangs = true;\n                    }\n                }\n            }\n\n            // Catch if there are changes on the selected languages over the active languages\n            if (!$noChangesOnSiteLangs) {\n                // Disable all active languages of site\n                $siteLangsTable->update(['slang_status' => 0], 'slang_site_id', $siteId);\n\n                // Because all of the active languages are disabled. All we have to do\n                // is to save if it's a new language or to active(update) the language back\n                foreach ($selectedSiteLangs as $selectedSiteLang) {\n                    $slangId = 0;\n\n                    foreach ($siteLangs as $siteLang) {\n                        if ($selectedSiteLang == $siteLang['slang_lang_id']) {\n                            $slangId = $siteLang['slang_id'];\n                            break;\n                        }\n                    }\n\n                    $siteLangsTable->save(\n                        [\n                            'slang_site_id' => $siteId,\n                            'slang_lang_id' => $selectedSiteLang,\n                            'slang_status' => 1\n                        ],\n                        $slangId\n                    );\n                }\n            }\n\n            // Update site to add site option language url\n            /**\n             * Update only if there are not the same data\n             */\n            $siteDatas = $siteTable->getEntryById($siteId)->current();\n            if(!empty($siteDatas)){\n                if($siteDatas->site_opt_lang_url != $data['site_opt_lang_url']){\n                    $updatedSiteId = $siteTable->save(['site_opt_lang_url' => $data['site_opt_lang_url']], $siteId);\n                    if($updatedSiteId){\n                        $this->deleteDefaultUrls($siteId, $siteDatas->site_main_page_id);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Delete the default page url\n     * when change the site option language\n     * so that it will re generate the correct url\n     *\n     * @param $siteId\n     * @param $siteMainHomePageId\n     */\n    private function deleteDefaultUrls($siteId, $siteMainHomePageId)\n    {\n        $siteLangHomeTbl = $this->getServiceManager()->get('MelisEngineTableCmsSiteHome');\n        $pageIds = array();\n\n        $siteHomeDatas = $siteLangHomeTbl->getHomePageBySiteId($siteId)->toArray();\n        if(!empty($siteHomeDatas)){\n            foreach($siteHomeDatas as $key => $val) {\n                array_push($pageIds, $val['shome_page_id']);\n                $this->getAllPagesId($val['shome_page_id'], $pageIds);\n            }\n        }else{\n            array_push($pageIds, $siteMainHomePageId);\n            $this->getAllPagesId($siteMainHomePageId, $pageIds);\n        }\n\n        $tablePageDefaultUrls = $this->getServiceManager()->get('MelisEngineTablePageDefaultUrls');\n        foreach($pageIds as $key => $id){\n            $tablePageDefaultUrls->deleteById($id);\n        }\n    }\n\n    /**\n     * Get all page ids\n     *\n     * @param $pageId\n     * @param $pageIds\n     */\n    private function getAllPagesId($pageId, &$pageIds) {\n        $pageTreeService = $this->getServiceManager()->get('MelisEngineTree');\n        $data = $pageTreeService->getAllPages($pageId);\n        foreach($data as $key => $val){\n            foreach($val as $k => $v){\n                //add only the page if seo url is empty\n                if(empty($v['pseo_url'])) {\n                    array_push($pageIds, $v['tree_page_id']);\n                }\n\n                if(!empty($v['children'])){\n                    $this->getAllPagesId($v['tree_page_id'], $pageIds);\n                }\n            }\n        }\n    }\n\n    /**\n     * Save site config\n     *\n     * @param $siteId\n     * @param $siteConfigTabData\n     */\n    private function saveSiteConfig($siteId, $siteConfigTabData) {\n        $siteConfigTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteConfig');\n        $siteName = $this->getSiteDataField($siteId, 'site_name');\n        $config = $this->getSiteConfig($siteId);\n        $configFromDb = $this->getSiteConfigFromDbById($siteId);\n        $this->prepareDbConfigs($siteId, $siteName, $configFromDb);\n        $configFromFile = $this->getSiteConfigFromFile($siteName);\n\n        /**\n         * Make sure that config is not empty\n         */\n        if(!empty($configFromFile)) {\n            /**\n             * make sure the site config exist\n             */\n            if(isset($configFromFile['site'][$siteName][$siteId])) {\n                foreach ($configFromFile['site'][$siteName]['allSites'] as $key => $val) {\n                    if (is_array($val)) {\n                        foreach ($val as $vKey => $vVal) {\n                            if (!is_array($vVal)) {\n                                $configFromFile['site'][$siteName]['allSitesArray'][$key][$vKey] = $vVal;\n                            }\n                        }\n                        unset($configFromFile['site'][$siteName]['allSites'][$key]);\n                    }\n                }\n\n                foreach ($configFromFile['site'][$siteName][$siteId] as $locale => $lVal) {\n                    foreach ($lVal as $key => $val) {\n                        if (is_array($val)) {\n                            foreach ($val as $vKey => $vVal) {\n                                if (!is_array($vVal)) {\n                                    $configFromFile['site'][$siteName][$siteId][$locale . 'Array'][$key][$vKey] = $vVal;\n                                }\n                            }\n\n                            unset($configFromFile['site'][$siteName][$siteId][$locale][$key]);\n                        }\n                    }\n                }\n\n                foreach ($siteConfigTabData as $langKey => $langValue) {\n                    $sconf_id = !empty($langValue['sconf_id']) ? $langValue['sconf_id'] : 0;\n                    $result = [];\n\n                    if (empty($langValue['config'])) {\n                        $langValue['config'] = [];\n                    }\n\n                    if (empty($langValue['configArray'])) {\n                        $langValue['configArray'] = [];\n                    }\n\n                    if ($langKey == 'gen') {\n                        $diff = array_diff_assoc($langValue['config'], $configFromFile['site'][$siteName]['allSites']);\n\n                        if (!empty($diff)) {\n                            foreach ($diff as $key => $val) {\n                                if ($val != '') {\n                                    $result['allSites'][$key] = $val;\n                                }\n                            }\n                        }\n\n                        if (!empty($langValue['configArray'])) {\n                            foreach ($langValue['configArray'] as $cKey => $cVal) {\n                                $diff = array_diff_assoc($langValue['configArray'][$cKey], $configFromFile['site'][$siteName]['allSitesArray'][$cKey]);\n\n                                foreach ($diff as $key => $val) {\n                                    if ($val != '') {\n                                        $result['allSites'][$cKey][$key] = $val;\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        $locale = $this->getLangField(null, $siteId, $langKey, 1, 'lang_cms_locale');\n                        if (array_key_exists($locale, $configFromFile['site'][$siteName][$siteId])) {\n                            $diff = array_diff_assoc($langValue['config'], $configFromFile['site'][$siteName][$siteId][$locale]);\n                        } else {\n                            $diff = array_diff_assoc($langValue['config'], []);\n                        }\n\n                        if (!empty($diff)) {\n                            foreach ($diff as $key => $val) {\n                                if ($val != '') {\n                                    $result[$locale][$key] = $val;\n                                }\n                            }\n                        }\n\n                        if (!empty($langValue['configArray'])) {\n                            foreach ($langValue['configArray'] as $cKey => $cVal) {\n                                if (array_key_exists($locale . 'Array', $configFromFile['site'][$siteName][$siteId])) {\n                                    $diff = array_diff_assoc($langValue['configArray'][$cKey], $configFromFile['site'][$siteName][$siteId][$locale . 'Array'][$cKey]);\n                                } else {\n                                    $diff = array_diff_assoc($langValue['configArray'][$cKey], []);\n                                }\n\n                                foreach ($diff as $key => $val) {\n                                    if ($val != '') {\n                                        $result[$locale][$cKey][$key] = $val;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    $siteConfigTable->save(\n                        [\n                            'sconf_site_id' => $siteId,\n                            'sconf_lang_id' => $langKey === 'gen' ? -1 : $langKey,\n                            'sconf_datas' => serialize($result)\n                        ],\n                        $sconf_id\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Deletes data\n     * @param $siteId\n     */\n    private function deleteOtherTabsData($siteId, $langIds)\n    {\n        $siteConfigTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteConfig');\n        $siteHomePageTbl = $this->getServiceManager()->get('MelisEngineTableCmsSiteHome');\n        $transTextTbl = $this->getServiceManager()->get('MelisSiteTranslationTextTable');\n        $transSvc = $this->getServiceManager()->get('MelisSiteTranslationService');\n\n        foreach ($langIds as $langId) {\n            $siteConfigTable->deleteConfig(null, $siteId, $langId);\n            $siteHomePageTbl->deleteHomePageId(null, $siteId, $langId, null);\n            $trans = $transSvc->getSiteTranslationFromDb(null, $langId, $siteId);\n\n            foreach ($trans as $tran) {\n                $transTextTbl->deleteById($tran['mstt_id']);\n            }\n        }\n    }\n\n    /**\n     * Returns specific site field\n     * @param $siteId\n     * @param $field\n     * @return mixed|string\n     */\n    private function getSiteDataField($siteId, $field)\n    {\n        $site = $this->getSiteDataById($siteId);\n        $siteField = '';\n\n        if (array_key_exists($field, $site)) {\n            $siteField = $site[$field];\n        }\n\n        return $siteField;\n    }\n\n    private function getLangField($id, $siteId, $langId, $isActive, $field)\n    {\n        $lang = $this->getLang($id, $siteId, $langId, $isActive);\n        $fieldData = '';\n\n        if (!empty($lang)) {\n            if (array_key_exists($field, $lang)) {\n                $fieldData = $lang[$field];\n            }\n        }\n\n        return $fieldData;\n    }\n\n    /**\n     * Returns Language\n     * @param $id\n     * @param $siteId\n     * @param $langId\n     * @param int $isActive\n     * @return mixed\n     */\n    private function getLang($id, $siteId, $langId, $isActive = 1)\n    {\n        $siteLangsTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteLangs');\n\n        if ($langId == 'gen') {\n            $langId = -1;\n        }\n\n        $lang = $siteLangsTable->getSiteLangs($id, $siteId, $langId, $isActive)->toArray();\n\n        if (!empty($lang)) {\n            $lang = $lang[0];\n        }\n\n        return $lang;\n    }\n\n    /**\n     * Prepares the db config. unserialize array & form the complete config\n     * @param $siteId\n     * @param $siteName\n     * @param $dbConfigs\n     */\n    private function prepareDbConfigs($siteId, $siteName, &$dbConfigs)\n    {\n        foreach ($dbConfigs as &$dbConfig) {\n            if ($dbConfig['sconf_lang_id'] == '-1') {\n                $dbConfig['sconf_datas'] = [\n                    'site' => [\n                        $siteName => unserialize($dbConfig['sconf_datas']),\n                    ],\n                ];\n            } else {\n                $dbConfig['sconf_datas'] = [\n                    'site' => [\n                        $siteName => [\n                            $siteId => unserialize($dbConfig['sconf_datas'])\n                        ],\n                    ],\n                ];\n            }\n        }\n    }\n\n    private function getSiteConfigFromFile($siteName)\n    {\n        /** @var MelisSiteConfigService $siteConfigSrv */\n        $siteConfigSrv = $this->getServiceManager()->get('MelisSiteConfigService');\n        return $siteConfigSrv->getConfig($siteName);\n    }\n\n    /**\n     * return site config (from db only)\n     * @param $siteId\n     * @return mixed\n     */\n    private function getSiteConfigFromDbById($siteId)\n    {\n        $siteConfigTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteConfig');\n        return $siteConfigTable->getEntryByField('sconf_site_id', $siteId)->toArray();\n    }\n\n    /**\n     * returns site config (merged)\n     * @param $siteId\n     * @return mixed\n     */\n    private function getSiteConfig($siteId)\n    {\n        /** @var MelisSiteConfigService $siteConfigSrv */\n        $siteConfigSrv = $this->getServiceManager()->get('MelisSiteConfigService');\n        return $siteConfigSrv->getSiteConfig($siteId, true);\n    }\n\n    /**\n     * returns site data\n     * @param $siteId\n     * @return array\n     */\n    private function getSiteDataById($siteId)\n    {\n        $siteTable = $this->getServiceManager()->get('MelisEngineTableSite');\n        $site = $siteTable->getEntryById($siteId)->toArray();\n\n        return !empty($site) ? $site[0] : [];\n    }\n\n    /**\n     * returns meliskey from route or from query\n     * @return mixed\n     */\n    private function getMelisKey()\n    {\n        $melisKey = $this->params()->fromRoute('melisKey', $this->params()->fromQuery('melisKey'), null);\n\n        return $melisKey;\n    }\n\n    /**\n     * returns tools service\n     * @return array|object\n     */\n    private function getTool()\n    {\n        $toolSvc = $this->getServiceManager()->get('MelisCoreTool');\n        $toolSvc->setMelisToolKey('meliscms', 'meliscms_tool_sites');\n\n        return $toolSvc;\n    }\n\n    /**\n     * delete site domain platform\n     */\n    public function deleteSiteDomainPlatformAction()\n    {\n        $platform   = $this->params()->fromRoute('platform', $this->params()->fromQuery('platform', ''));\n        $id         = $this->params()->fromRoute('id', $this->params()->fromQuery('id', ''));\n        $success    = (int) $this->params()->fromRoute('success', $this->params()->fromQuery('success', ''));\n\n        if($success == 1) {\n            $domainTable = $this->getServiceManager()->get('MelisEngineTableSiteDomain');\n            $platformIdTable = $this->getServiceManager()->get('MelisEngineTablePlatformIds');\n\n            $platformIdTable->deleteByField('pids_id', $id);\n            $domainTable->deleteByField('sdom_env', $platform);\n        }\n    }\n\n    /**\n     * Regenerate modules path\n     *\n     * @return bool\n     */\n    private function regenerateModulesPath()\n    {\n       $file = $_SERVER['DOCUMENT_ROOT'] . \"/../config/melis.modules.path.php\";\n       if (file_exists($file)) {\n           unlink($file);\n           return true;\n       }\n    }\n\n    /**\n     * Clear Config Cache\n     */\n    private function clearSiteConfigCache($siteId)\n    {\n        //keys need to remove\n        $cacheKeys = [\n            'getSiteConfig_'.$siteId,\n            'getSiteConfigByPageId',\n            //module cache\n            'getVendorModulesEngine',\n            'getComposerModulePathEngine_'\n        ];\n\n        $cacheConfig = 'meliscms_page';\n        $melisEngineCacheSystem = $this->getServiceManager()->get('MelisEngineCacheSystem');\n        foreach($cacheKeys as $preFix)\n            $melisEngineCacheSystem->deleteCacheByPrefix($preFix, $cacheConfig);\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Melis Technology (http://www.melistechnology.com)\n *\n * @copyright Copyright (c) 2017 Melis Technology (http://www.melistechnology.com)\n *\n */\n\nnamespace MelisCms\\Controller;\n\nuse MelisAssetManager\\Service\\MelisModulesService;\nuse Laminas\\View\\Model\\ViewModel;\nuse Laminas\\View\\Model\\JsonModel;\nuse Laminas\\Session\\Container;\nuse MelisCms\\Service\\MelisCmsRightsService;\nuse MelisCore\\Controller\\MelisAbstractActionController;\n\n/**\n * This class renders Melis CMS Plugin Menu\n */\nclass FrontPluginsController extends MelisAbstractActionController\n{\n    private $sectionHasNewPlugins = [];\n    private $modulesHasNewPlugins = [];\n    private $subsectionHasNewPlugins = [];\n\n    public function renderPluginsMenuAction()\n    {\n        $config = $this->getServiceManager()->get('config');\n        $pluginsConfig = array();\n        $siteModule = $this->params()->fromRoute('siteModule');\n        $pageId = $this->params()->fromRoute('pageId');\n        // melis plugin service\n        $pluginSvc = $this->getServiceManager()->get('MelisCorePluginsService');\n        // check for new plugins or manually installed and insert in db or fresh plugins\n        $pluginSvc->checkTemplatingPlugins();\n        $pluginList_ = $this->putSectionOnPlugins($config['plugins'], $siteModule);\n        $newPluginList = $this->organizedPluginsBySection($pluginList_);\n        // remove section that has no child under on it\n        $newPluginList = array_filter($newPluginList);\n        // add categories for the mini-templates\n        $newPluginList = $this->categorizeMiniTemplates($newPluginList, $pageId);\n        // get the latest plugin installed\n        $latesPlugin = $pluginSvc->getLatestPlugin($pluginSvc::TEMPLATING_PLUGIN_TYPE);\n        // for new plugin notifications\n        $pluginMenuHandler = $pluginSvc->getNewPluginMenuHandlerNotifDuration();\n\n        $view = new ViewModel();\n       // $view->pluginsConfig = $finalPluginList;\n        $view->siteModule              = $siteModule;\n        $view->newPluginList           = $newPluginList;\n        $view->latestPlugin            = $latesPlugin;\n        $view->sectionNewPlugins       = array_unique($this->sectionHasNewPlugins);\n        $view->modulesHasNewPlugins    = array_unique($this->modulesHasNewPlugins);\n        $view->subsectionHasNewPlugins = $this->subsectionHasNewPlugins;\n        $view->newPluginNotification   = $pluginMenuHandler;\n\n        return $view;\n    }\n\n    /**\n     * This method will get the session\n     * data of the current page\n     */\n    public function getSessionDataAction()\n    {\n        $success = 1;\n        $data    = array();\n\n        $translator = $this->getServiceManager()->get('translator');\n        $data       = \"\";\n\n        return $data;\n    }\n\n    public function renderPluginModalAction()\n    {\n        $translator = $this->getServiceManager()->get('translator');\n\n        $parameters = $this->getRequest()->getQuery('parameters', array());\n\n        $module = (!empty($parameters['module'])) ? $parameters['module'] : '';\n        $pluginName = (!empty($parameters['pluginName'])) ? $parameters['pluginName'] : '';\n        $pluginId = (!empty($parameters['pluginId'])) ? $parameters['pluginId'] : 1;\n        $pageId = (!empty($parameters['melisActivePageId'])) ? $parameters['melisActivePageId'] : 1;\n        $siteModule = (!empty($parameters['siteModule'])) ? $parameters['siteModule'] : '';\n        $pluginHardcodedConfig = (!empty($parameters['pluginFrontConfig'])) ? $parameters['pluginFrontConfig'] : '';\n\n        $pluginHardcodedConfig = html_entity_decode($pluginHardcodedConfig, ENT_QUOTES);\n        $pluginHardcodedConfig = html_entity_decode($pluginHardcodedConfig, ENT_QUOTES);\n        $pluginHardcodedConfig = unserialize($pluginHardcodedConfig, ['allowed_classes' => false]);  \n\n        $errors = '';\n        $tag = '';\n        $tabs = array();\n        $config = $this->getServiceManager()->get('config');\n        if (empty($module) || empty($pluginName) || empty($pageId) || empty($pluginId))\n        {\n            $errors = $translator->translate('tr_melisfront_generate_error_No module or plugin or idpage parameters');\n        }\n        else\n        {\n            if (empty($config['plugins'][$module]['plugins'][$pluginName]))\n            {\n                $errors = $translator->translate('tr_melisfront_generate_error_Plugin config not found');\n            }\n            else\n            {\n                $pluginConf = $config['plugins'][$module]['plugins'][$pluginName];\n\n                try\n                {\n                    $pluginHardcodedConfig['id'] = $pluginId;\n                    $pluginHardcodedConfig['pageId'] = $pageId;\n                    $melisPlugin = $this->getServiceManager()->get('ControllerPluginManager')->get($pluginName);\n                    $melisPlugin->setUpdatesPluginConfig($pluginHardcodedConfig);\n                    $melisPlugin->getPluginConfigs();\n                    $tabs = $melisPlugin->createOptionsForms();\n                    $tag = $melisPlugin->getPluginXmlDbKey();\n                }\n                catch (Exception $e)\n                {\n                    $errors = $translator->translate('tr_melisfront_generate_error_Plugin cant be created');\n                }\n            }\n        }\n\n        if ($errors != '' || count($tabs) == 0)\n            $tabs[] = array('tabName' => 'Error', 'html' => $errors);\n\n        $view = new ViewModel();\n        $view->setTerminal(true);\n        $view->tabs = $tabs;\n        $view->idPage = $pageId;\n        $view->module = $module;\n        $view->pluginName = $pluginName;\n        $view->pluginId = $pluginId;\n        $view->tag = $tag;\n        $view->pluginHardcodedConfig = $pluginHardcodedConfig;\n        $view->siteModule = $siteModule;\n        return $view;\n    }\n\n\n    public function validatePluginModalAction()\n    {\n        $translator = $this->getServiceManager()->get('translator');\n\n        $parameters = $this->getRequest()->getPost()->toArray();\n\n        $module = (!empty($parameters['melisModule'])) ? $parameters['melisModule'] : '';\n        $pluginName = (!empty($parameters['melisPluginName'])) ? $parameters['melisPluginName'] : '';\n        $pluginId = (!empty($parameters['melisPluginId'])) ? $parameters['melisPluginId'] : 1;\n        $pageId = (!empty($parameters['melisIdPage'])) ? $parameters['melisIdPage'] : 1;\n\n        $errors = '';\n        $tag = '';\n        $tabs = array();\n        $config = $this->getServiceManager()->get('config');\n        if (empty($module) || empty($pluginName) || empty($pageId) || empty($pluginId))\n        {\n            $errors = $translator->translate('tr_melisfront_generate_error_No module or plugin or idpage parameters');\n        }\n        else\n        {\n            if (empty($config['plugins'][$module]['plugins'][$pluginName]))\n            {\n                $errors = $translator->translate('tr_melisfront_generate_error_Plugin config not found');\n            }\n            else\n            {\n                $pluginConf = $config['plugins'][$module]['plugins'][$pluginName];\n\n                try\n                {\n                    $pluginHardcodedConfig['id'] = $pluginId;\n                    $pluginHardcodedConfig['pageId'] = $pageId;\n                    $melisPlugin = $this->getServiceManager()->get('ControllerPluginManager')->get($pluginName);\n                    $melisPlugin->setUpdatesPluginConfig($pluginHardcodedConfig);\n                    $melisPlugin->getPluginConfigs();\n                    $errorsTabs = $melisPlugin->createOptionsForms();\n                }\n                catch (Exception $e)\n                {\n                    $errors = $translator->translate('tr_melisfront_generate_error_Plugin cant be created');\n                }\n            }\n        }\n\n        $success = 1;\n        $finalErrors = array();\n\n        if ($errors != '')\n        {\n            $success = 0;\n            $finalErrors = array('general' => $errors);\n        }\n\n        foreach($errorsTabs as $response) {\n            if(!$response['success']) {\n                $success = 0;\n            }\n\n\n\n        }\n        $finalErrors = $errorsTabs;\n\n\n        $result = array(\n            'success' => $success,\n            'errors' => $finalErrors,\n        );\n\n        return new JsonModel($result);\n    }\n\n    public function checkSessionPageAction()\n    {\n        $container = new Container('meliscms');\n        $pages = $container->getArrayCopy();//$container['content-pages'];\n\n//        \\Zend\\Debug\\Debug::dump($pages);\n        print_r($pages);\n\n        die;\n    }\n\n    public function testingAreaAction()\n    {\n        $plugin = 'melisCmsSlider';\n        $pluginId = 'showslider_1507005296';\n\n        $text = '<melisCmsSlider id=\"showslider_1507009618\" plugin_container_id=\"plugin_container_id_1507009628\" plugin_container_id=\"plugin_container_id_1507009628\" plugin_container_id=\"plugin_container_id_1507009628\" plugin_container_id=\"plugin_container_id_1507009628\" plugin_container_id=\"plugin_container_id_1507009628\">\t';\n        $pattern = '/\\splugin_container_id\\=\\\"(.*?)\\\"/';\n\n        $replace = $plugin . ' id=\"'.$pluginId.'\" plugin_container_id=\"this_is_the_id_1823121\"';\n\n        $newValue = $text;\n        if(preg_match($pattern, $text)) {\n            $newValue = preg_replace($pattern, '', $text);\n        }\n\n\n        echo trim($newValue);\n\n\n        die;\n    }\n\n    private function putSectionOnPlugins($configurations, $siteModule)\n    {\n        $pluginList = [];\n\n        // get active modules in the platform\n        $activeModules = include $_SERVER['DOCUMENT_ROOT'] . '/../config/melis.module.load.php';\n        $activeModules = array_map('strtolower', $activeModules);\n        // melis plugins configurations\n        foreach ($configurations as $moduleName => $melisPluginsConfig) {\n            // melis plugins configrations\n            // this means the module has a templating plugins or plugins\n            if (isset($melisPluginsConfig['plugins']) && ! empty($melisPluginsConfig['plugins'])) {\n                if (in_array((strtolower($moduleName)),$activeModules) || $moduleName == \"MelisMiniTemplate\" ) {\n                    foreach ($melisPluginsConfig['plugins'] as $pluginName =>  $pluginConfig) {\n                        // list of excluded plugins\n                        $excludedPlugins = [\n                            'MelisFrontDragDropZonePlugin'\n                        ];\n                        if (!in_array($pluginName,$excludedPlugins)) {\n                            // put site_module key under ['melis'] key\n                            $pluginConfig['melis']['site_module'] = $siteModule;\n                            // put section key  under['melis'] key\n                            if ((! isset($pluginConfig['melis']['section']) || isset($pluginConfig['melis']['section'])) && empty($pluginConfig['melis']['section'])) {\n                                // if there is no section key on [melis] config\n                                // or there is a section key but empty\n                                // we put it in the OTHER section directly\n                                $pluginConfig['melis']['section'] = \"Others\";\n                            }\n                            // put a moduleName for easy sectioning of plugins\n                            if (! isset($pluginConfig['melis']['moduleName']) && empty($pluginConfig['melis']['moduleName'])) {\n                                $pluginConfig['melis']['moduleName'] = $moduleName;\n                            }\n                            $pluginList[$moduleName][$pluginName] = $pluginConfig;\n                        }\n                    }\n                }\n            }\n        }\n\n        return $pluginList;\n    }\n\n    private function organizedPluginsBySection($pluginList)\n    {\n        // get module categories\n        /** @var MelisModulesService $moduleSvc */\n        $moduleSvc = $this->getServiceManager()->get('ModulesService');\n        $configSvc = $this->getServiceManager()->get('MelisCoreConfig');\n        $engineComposer  = $this->getServiceManager()->get('MelisEngineComposer');\n        $melisPuginsSvc = $this->getServiceManager()->get('MelisCorePluginsService');\n        //$marketPlaceModuleSection = $melisPuginsSvc->getPackagistCategories();\n        $marketPlaceModuleSection = [];\n        /*\n         * In case there is no internet or cant connect to the markeplace domain\n         * we put a predefined section just not destroy the plugins menu\n         */\n        if (empty($marketPlaceModuleSection)) {\n            $fallbackSection = $configSvc->getItem('/meliscore/datas/fallBacksection');\n            $marketPlaceModuleSection= $fallbackSection;\n        }\n        //custom sections\n        $customSection = [\n            'MelisCommerce', // special section\n            'Others',\n            'CustomProjects'\n        ];\n        // merge all sections\n        $melisSection = array_merge($marketPlaceModuleSection, $customSection);\n        // remove MelisCore section because there is no melis-core in front or templating plugins\n        if (($key = array_search('MelisCore',$melisSection)) !== false) {\n            unset($melisSection[$key]);\n        }\n        $newPluginList = [];\n        // put the section in order\n        if (! empty($melisSection)) {\n            foreach ($melisSection as $idx => $val) {\n                $newPluginList[$val] = [];\n            }\n        }\n        if (! empty($pluginList)) {\n            // get vendorModules\n            $vendorModules = $engineComposer->getVendorModules();\n            $vendorModules = array_unique(array_merge($moduleSvc->getActiveModules(),$vendorModules));\n\n            // convert string to lower\n            foreach ($vendorModules as $idx => $moduleName) {\n                $vendorModules[$idx] = strtolower($moduleName);\n            }\n\n            /*\n             * organized plugins with no subcategory\n             */\n            $publicModules = array_change_key_case($melisPuginsSvc->getMelisPublicModules(true), CASE_LOWER); \n\n            foreach ($pluginList as $moduleName => $plugins) {\n                // double check moduleName if it exisit on composer to avoid showing plugins that doesnt exists\n                if (in_array(strtolower($moduleName),$vendorModules) || ($moduleName == \"MelisMiniTemplate\")) {                   \n                   /*\n                    * check first if the module is public or not\n                    *  if public we will based the section on what is set from marketplace\n                    */\n                    $moduleSection = \"\";\n                    if (array_key_exists($moduleName,$publicModules)) {\n                        $moduleSection = $publicModules[$moduleName]['section'];\n                    }\n\n                    if (! empty($plugins)) {\n                        foreach ($plugins as $pluginName => $pluginConfig) {\n                            // put section for public module\n                            if (! empty($moduleSection)) {\n                                $pluginSection = $moduleSection;\n                            } else {\n                                // if it goes here means module is either private or there is no internet connection\n                                $pluginSection = $pluginConfig['melis']['section'];\n\n                            }\n                            $module =  $moduleName ;\n                            if (in_array($pluginSection,$melisSection)) {\n                                // melis conifguration\n                                $melisConfig = $pluginConfig['melis'];\n                                if (isset($melisConfig['subcategory']) && ! empty($melisConfig['subcategory'])) {\n                                    // this is for subsection\n                                    $subsectionId = $melisConfig['subcategory']['id'] ?? null;\n                                    $subsectionText = $melisConfig['subcategory']['title'] ?? null;\n                                    $newPluginList[$pluginSection][$module]['hasSubsection'] = true;\n                                    $newPluginList[$pluginSection][$module][$subsectionId][$pluginName] = $pluginConfig;\n                                    // label of sub category\n                                    $newPluginList[$pluginSection][$module][$subsectionId]['title'] = $subsectionText;\n                                    // indication that the plugin is newly installed\n                                    $isNew = $melisPuginsSvc->pluginIsNew($pluginName);\n                                    $newPluginList[$pluginSection][$module][$subsectionId][$pluginName]['isNew'] = $isNew;\n                                    if ($isNew) {\n                                        $this->sectionHasNewPlugins[] = $pluginSection;\n                                        $this->modulesHasNewPlugins[] = $module;\n                                        $this->subsectionHasNewPlugins[] = $subsectionText;\n                                    }\n                                } else {\n                                    // no subsection\n                                    $newPluginList[$pluginSection][$module][$pluginName] = $pluginConfig;\n                                    // indication that the plugin is newly installed\n                                    $isNew = $melisPuginsSvc->pluginIsNew($pluginName);\n                                    $newPluginList[$pluginSection][$module][$pluginName]['isNew'] = $isNew;\n                                    if ($isNew) {\n                                        $this->sectionHasNewPlugins[] = $pluginSection;\n                                        $this->modulesHasNewPlugins[] = $module;\n                                    }\n                                }\n                            } else {\n                                /*\n                                * if the section does not belong to the group it will go to the\n                                * Others section direclty\n                                */\n                                $melisConfig = $pluginConfig['melis'];\n                                if (isset($melisConfig['subcategory']) && ! empty($melisConfig['subcategory'])) {\n                                    // this is for subsection\n                                    $subsectionId = $melisConfig['subcategory']['id'] ?? null;\n                                    $subsectionText = $melisConfig['subcategory']['title'] ?? null;\n                                    $newPluginList['Others'][$module]['hasSubsection'] = true;\n                                    $newPluginList['Others'][$module][$subsectionId][$pluginName] = $pluginConfig;\n                                    // label of sub category\n                                    $newPluginList['Others'][$module][$subsectionId]['title'] = $subsectionText;\n                                    // indication that the plugin is newly installed\n                                    $isNew = $melisPuginsSvc->pluginIsNew($pluginName);\n                                    $newPluginList['Others'][$module][$subsectionId][$pluginName]['isNew'] = $isNew;\n                                    if ($isNew) {\n                                        $this->sectionHasNewPlugins[] = 'Others';\n                                        $this->modulesHasNewPlugins[] = $module;\n                                        $this->subsectionHasNewPlugins[] = $subsectionText;\n                                    }\n                                } else {\n                                    $newPluginList['Others'][$module][$pluginName] = $pluginConfig;\n                                    // indication that the plugin is newly installed\n                                    $isNew = $melisPuginsSvc->pluginIsNew($pluginName);\n                                    $newPluginList['Others'][$module][$pluginName]['isNew'] = $isNew;\n                                    if ($isNew) {\n                                        $this->sectionHasNewPlugins[] = 'Others';\n                                        $this->modulesHasNewPlugins[] = $module;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return $newPluginList;\n\n    }\n\n    /**\n     * Categorizes the mini templates for the page's current site\n     * @param $site_module\n     * @param $plugin_list\n     * @return mixed\n     */\n    private function categorizeMiniTemplates($plugin_list, $pageId)\n    {\n        if ( empty($plugin_list['MelisCms']['MelisMiniTemplate']))\n            return $plugin_list;\n\n        $mini_template_sites = $plugin_list['MelisCms']['MelisMiniTemplate'];\n        $sites = $this->getServiceManager()->get('MelisEngineTableSite')->fetchAll()->toArray();\n        $pageTreeService = $this->getServiceManager()->get('MelisEngineTree');\n        $site = $pageTreeService->getSiteByPageId($pageId);\n        if (empty($site))\n            $site = $pageTreeService->getSiteByPageId($pageId, 'saved');\n\n        $site_modules = [];\n        $container = new Container('meliscore');\n        // get site modules\n        foreach ($mini_template_sites as $mini_template_site_key => $mini_template_site_val) {\n            $exploded_mini_template_site_key = explode('_', $mini_template_site_key);\n            if (count($exploded_mini_template_site_key) != 1)\n                $site_modules[] = $exploded_mini_template_site_key[1];\n        }\n\n        // insert sites\n        foreach ($sites as $site_data) {\n            if ($site_data['site_id'] == $site->site_id) {\n                if (!empty($plugin_list['MelisCms']['MelisMiniTemplate']['miniTemplatePlugins_' . $site_data['site_name']])) {\n                    $service = $this->getServiceManager()->get('MelisCmsMiniTemplateService');\n                    $tree = $service->getTree($site_data['site_id'], $container['melis-lang-locale']);\n\n                    $mini_templates = $plugin_list['MelisCms']['MelisMiniTemplate']['miniTemplatePlugins_' . $site_data['site_name']];\n                    $plugin_list['MelisCms']['MelisMiniTemplate']['miniTemplatePlugins_' . $site_data['site_label']] = [];\n                    $new_plugin_list = [];\n                    $new_plugin_list['title'] = $site_data['site_label'];\n                    $in_active_categories = [];\n\n                    foreach ($tree as $key => $val) {\n                        $type = $val['type'];\n                        if ($type == 'category') {\n                            if ($val['status']) {\n                                $new_plugin_list[html_entity_decode($val['text'])] = [\n                                    'text' => html_entity_decode($val['text']),\n                                    'isCategory' => true\n                                ];\n                            } else {\n                                $in_active_categories[] = $val['text'];\n                            }\n                        } else {\n                            $exploded = explode('-', $val['parent'], 2);\n                            $parent = '';\n                            if (count($exploded) > 2) {\n                                unset($exploded[0]);\n                                $parent = implode('-', $exploded);\n                            } else if (count($exploded) == 2) {\n                                unset($exploded[0]);\n                                $parent = $exploded[1];\n                            } else {\n                                $parent = $val['parent'];\n                            }\n\n                            $title = 'MiniTemplatePlugin_' . strtolower(html_entity_decode($val['text'])) . '_' . strtolower($site_data['site_name']);\n                            if ($val['parent'] != '#') {\n                                if (!in_array($parent, $in_active_categories))\n                                    $new_plugin_list[$parent][$title] = $mini_templates[$title];\n                            } else {\n                                $new_plugin_list[$title] = $mini_templates[$title];\n                            }\n                        }\n                    }\n\n                    // remove site modules\n                    foreach ($site_modules as $site_module) {\n                        unset($plugin_list['MelisCms']['MelisMiniTemplate']['miniTemplatePlugins_' . $site_module]);\n                    }\n\n                    $plugin_list['MelisCms']['MelisMiniTemplate']['miniTemplatePlugins_' . $site_data['site_label']] = $new_plugin_list;\n                }\n            }\n        }\n\n        return $plugin_list;\n    }\n}\n", "<?php\n\n/**\n * Melis Technology (http://www.melistechnology.com)\n *\n * @copyright Copyright (c) 2016 Melis Technology (http://www.melistechnology.com)\n *\n */\n\nnamespace MelisCms\\Controller;\n\nuse Laminas\\View\\Model\\ViewModel;\nuse MelisCore\\Controller\\MelisAbstractActionController;\n\nclass SitesConfigController extends MelisAbstractActionController\n{\n    /**\n     * Renders Site Config Tab Container\n     * @return ViewModel\n     */\n    public function renderToolSitesSiteConfigAction()\n    {\n        $siteId = (int) $this->params()->fromQuery('siteId', '');\n        $melisKey = $this->getMelisKey();\n\n        $rightService = $this->getServiceManager()->get('MelisCoreRights');\n        $canAccess = $rightService->canAccess('meliscms_tool_sites_site_config_content');\n\n        $view = new ViewModel();\n\n        $view->melisKey = $melisKey;\n        $view->siteId = $siteId;\n        $view->canAccess = $canAccess;\n\n        return $view;\n    }\n\n    /**\n     * Renders Site Config Tab Content\n     * @return ViewModel\n     */\n    public function renderToolSitesSiteConfigContentAction()\n    {\n        $siteId = (int) $this->params()->fromQuery('siteId', '');\n        /**\n         * Make sure site id is not empty\n         */\n        if(empty($siteId))\n            return;\n\n        $melisKey = $this->getMelisKey();\n        $melisTool = $this->getTool();\n\n        $configForm = $melisTool->getForm('meliscms_tool_sites_siteconfig_form');\n        $activeSiteLangs = $this->getSiteActiveLanguages($siteId);\n\n        $site = $this->getSiteDataById($siteId);\n        $siteName = $site['site_name'];\n\n        $config = $this->getSiteConfig($siteId);\n        $dbConfigs = $this->getSiteConfigFromDb($siteId);\n        $dbConfIds = $this->getDbConfigIds($dbConfigs);\n        $this->kSortSiteConfig($config, $siteName, $siteId);\n        $this->prepareDbConfigs($siteId, $siteName, $dbConfigs);\n        $valuesFromDb = $this->getDbConfigKeys($siteId, $siteName, $dbConfigs, $config);\n\n        $view = new ViewModel();\n\n        $view->melisKey = $melisKey;\n        $view->siteId = $siteId;\n        $view->activeSiteLangs = $activeSiteLangs;\n        $view->configForm = $configForm;\n        $view->config = $config;\n        $view->siteName = $siteName;\n        $view->dbConfIds = $dbConfIds;\n        $view->valuesFromDb = $valuesFromDb;\n\n        return $view;\n    }\n\n    public function getModuleSitesListAction()\n    {\n\n    }\n\n    private function getDbConfigIds($dbConfig)\n    {\n        $dbConfIds = [];\n\n        foreach ($dbConfig as $conf) {\n            $dbConfIds[$conf['sconf_lang_id']] = $conf['sconf_id'];\n        }\n\n        return $dbConfIds;\n    }\n\n    private function getDbConfigKeys($siteId, $siteName, $dbConfigs, $config)\n    {\n        $valuesFromDb = [];\n\n        foreach ($dbConfigs as $dbConfig) {\n            if ($dbConfig['sconf_lang_id'] == '-1') {\n                if (array_key_exists('allSites', $dbConfig['sconf_datas']['site'][$siteName])) {\n                    foreach ($dbConfig['sconf_datas']['site'][$siteName]['allSites'] as $key => $value) {\n                        if (is_array($value) && !empty($value)) {\n                            foreach ($value as $aKey => $aVal) {\n                                $valuesFromDb['allSites'][$key][$aKey] = $aKey;\n                            }\n                        } else {\n                            $valuesFromDb['allSites'][$key] = $key;\n                        }\n                    }\n                }\n            } else {\n                foreach ($dbConfig['sconf_datas']['site'][$siteName][$siteId] as $langKey => $langValue) {\n                    foreach ($langValue as $confKey => $confVal) {\n                        if (is_array($confVal) && !empty($confVal)) {\n                            foreach ($confVal as $aKey => $aVal) {\n                                $valuesFromDb[$langKey][$confKey][$aKey] = $aKey;\n                            }\n                        } else {\n                            $valuesFromDb[$langKey][$confKey] = $confKey;\n                        }\n                    }\n                }\n            }\n        }\n\n        return $valuesFromDb;\n    }\n\n    /**\n     * Prepares the db config. unserialize array & form the complete config\n     * @param $siteId\n     * @param $siteName\n     * @param $dbConfigs\n     */\n    private function prepareDbConfigs($siteId, $siteName, &$dbConfigs)\n    {\n        foreach ($dbConfigs as &$dbConfig) {\n            if ($dbConfig['sconf_lang_id'] == '-1') {\n                $dbConfig['sconf_datas'] = [\n                    'site' => [\n                        $siteName => unserialize($dbConfig['sconf_datas'], ['allowed_classes' => false])\n                    ],\n                ];\n            } else {\n                $dbConfig['sconf_datas'] = [\n                    'site' => [\n                        $siteName => [\n                            $siteId => unserialize($dbConfig['sconf_datas'], ['allowed_classes' => false])\n                        ],\n                    ],\n                ];\n            }\n        }\n    }\n\n    /**\n     * Sorts site config key in ascending order\n     * @param $config\n     * @param $siteName\n     * @param $siteId\n     */\n    private function kSortSiteConfig(&$config, $siteName, $siteId)\n    {\n        if(!empty($config)) {\n            foreach ($config['site'][$siteName][$siteId] as $langKey => $langConfig) {\n                ksort($config['site'][$siteName][$siteId][$langKey]);\n            }\n        }\n    }\n\n    /**\n     * Returns site config from db\n     * @param $siteId\n     * @return mixed\n     */\n    private function getSiteConfigFromDb($siteId)\n    {\n        $siteConfigTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteConfig');\n\n        return $siteConfigTable->getEntryByField('sconf_site_id', $siteId)->toArray();\n    }\n\n    /**\n     * Returns Site Config (merged | final)\n     * @param $siteId\n     * @return mixed\n     */\n    private function getSiteConfig($siteId)\n    {\n        $siteConfigSrv = $this->getServiceManager()->get('MelisSiteConfigService');\n\n        return $siteConfigSrv->getSiteConfig($siteId, true);\n    }\n\n    /**\n     * Returns Site Data\n     * @param $siteId\n     * @return mixed\n     */\n    private function getSiteDataById($siteId)\n    {\n        $siteTable = $this->getServiceManager()->get('MelisEngineTableSite');\n\n        return $siteTable->getEntryById($siteId)->toArray()[0];\n    }\n\n    /**\n     * Returns Site Active Languages\n     * @param $siteId\n     * @return mixed\n     */\n    private function getSiteActiveLanguages($siteId)\n    {\n        $siteLangsTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteLangs');\n\n        return $siteLangsTable->getSiteLangs(null, $siteId, null, true)->toArray();\n    }\n\n    /**\n     * Returns Meliskey From Route | Query\n     * @return mixed\n     */\n    private function getMelisKey()\n    {\n        return $this->params()->fromRoute('melisKey', $this->params()->fromQuery('melisKey'), null);\n    }\n\n    /**\n     * Returns Tool Service\n     * @return array|object\n     */\n    private function getTool()\n    {\n        $toolSvc = $this->getServiceManager()->get('MelisCoreTool');\n        $toolSvc->setMelisToolKey('meliscms', 'meliscms_tool_sites');\n\n        return $toolSvc;\n    }\n}\n", "<?php\n\n/**\n * Melis Technology (http://www.melistechnology.com)\n *\n * @copyright Copyright (c) 2016 Melis Technology (http://www.melistechnology.com)\n *\n */\n\nnamespace MelisCms\\Controller;\n\nuse MelisCore\\Controller\\MelisAbstractActionController;\nuse MelisFront\\Service\\MelisSiteConfigService;\nuse Laminas\\View\\Model\\ViewModel;\nuse Laminas\\View\\Model\\JsonModel;\nuse MelisCore\\Service\\MelisCoreRightsService;\nuse Laminas\\Config\\Reader\\Json;\nuse phpDocumentor\\Reflection\\Types\\Boolean;\n\n/**\n * Site Tool Plugin\n */\nclass SitesController extends MelisAbstractActionController\n{\n    const TOOL_INDEX = 'meliscms';\n    const TOOL_KEY = 'meliscms_tool_sites';\n\n    const SITE_TABLE_PREFIX = 'site_';\n    const DOMAIN_TABLE_PREFIX = 'sdom_';\n    const SITE404_TABLE_PREFIX = 's404_';\n\n    /**\n     * Main container of the tool, this holds all the components of the tools\n     * @return ViewModel();\n     */\n    public function renderToolSitesAction() {\n        \n        $melisKey = $this->getMelisKey();\n        $view = new ViewModel();\n        $view->melisKey = $melisKey;\n        return $view;\n    }\n\n    /**\n     * @return ViewModel();\n     */\n    public function renderToolSitesEditAction() {\n        $siteId = (int) $this->params()->fromQuery('siteId', '');\n        $melisKey = $this->getMelisKey();\n        $view = new ViewModel();\n        $view->melisKey = $melisKey;\n        $view->siteId = $siteId;\n\n        return $view;\n    }\n\n    /**\n     * @return ViewModel();\n     */\n    public function renderToolSitesEditHeaderAction() {\n        $siteId = (int) $this->params()->fromQuery('siteId', '');\n        $melisKey = $this->getMelisKey();\n\n        $view = new ViewModel();\n        $view->melisKey = $melisKey;\n        $view->siteId = $siteId;\n        $view->siteLabel = $this->getSiteDataById($siteId)['site_label'] ?? '';\n\n        return $view;\n    }\n\n    /**\n     * @return ViewModel();\n     */\n    public function renderToolSitesEditSiteHeaderSaveAction() {\n        $siteId = (int) $this->params()->fromQuery('siteId', '');\n        $melisKey = $this->getMelisKey();\n        $view = new ViewModel();\n        $view->melisKey = $melisKey;\n        $view->siteId = $siteId;\n        return $view;\n    }\n\n    public function renderToolSitesTabsAction() {\n\n        $siteId = (int) $this->params()->fromQuery('siteId', '');\n        $melisKey = $this->getMelisKey();\n        $view = new ViewModel();\n        $view->melisKey = $melisKey;\n        $view->siteId = $siteId;\n        return $view;\n    }\n\n    public function renderToolSitesSiteConfigAction() {\n\n        $siteId = (int) $this->params()->fromQuery('siteId', '');\n        $melisKey = $this->getMelisKey();\n        $view = new ViewModel();\n        $view->melisKey = $melisKey;\n        $view->siteId = $siteId;\n        return $view;\n    }\n\n    /**\n     * Renders to the header section of the tool\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesHeaderAction() {\n\n        $melisKey = $this->getMelisKey();\n\n        $view              = new ViewModel();\n        $view->melisKey    = $melisKey;\n        $view->headerTitle = $this->getTool()->getTranslation('tr_meliscms_tool_sites_header_title');\n        $view->subTitle    = $this->getTool()->getTranslation('tr_meliscms_tool_sites_header_sub_title');\n        return $view;\n    }\n\n    public function renderToolSitesHeaderAddAction()\n    {\n        $view = new ViewModel();\n        return $view;\n    }\n\n    /**\n     * Renders to the refresh button in the table filter bar\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesContentFilterRefreshAction()\n    {\n        return new ViewModel();\n    }\n\n    /**\n     * Renders to the Search input in the table filter bar\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesContentFilterSearchAction()\n    {\n        return new ViewModel();\n    }\n\n    /**\n     * Renders to the limit selection in the table filter bar\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesContentFilterLimitAction()\n    {\n        return new ViewModel();\n    }\n    \n    /**\n     * Renders to the center content of the tool\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesContentAction()\n    {\n        $translator = $this->getServiceManager()->get('translator');\n        $melisKey = $this->getMelisKey();\n        $melisTool = $this->getServiceManager()->get('MelisCoreTool');\n        $melisTool->setMelisToolKey(self::TOOL_INDEX, self::TOOL_KEY);\n\n        $columns = $melisTool->getColumns();\n        // pre-add Action Columns\n        $columns['actions'] = array('text' => $translator->translate('tr_meliscms_action'));\n\n        $view = new ViewModel();\n        $view->melisKey = $melisKey;\n        $view->tableColumns = $columns;\n        $view->getToolDataTableConfig = $melisTool->getDataTableConfiguration('#tableToolSites',false,false,array('order' => '[[ 0, \"desc\" ]]'));\n        return $view;\n    }\n\n    /**\n     * Renders to the edit button in the table\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesContentActionMinifyAssetsAction()\n    {\n        return new ViewModel();\n    }\n\n    /**\n     * This is the container of the modal\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesModalContainerAction()\n    {\n        $melisKey = $this->getMelisKey();\n\n        $id = $this->params()->fromRoute('id', $this->params()->fromQuery('id', ''));\n\n        $view = new ViewModel();\n        $view->setTerminal(false);\n        $view->melisKey = $melisKey;\n        $view->id = $id;\n\n        return $view;\n    }\n    \n    /**\n     * Renders to the empty modal display, this will be displayed if the user doesn't have access to the modal tabs\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesModalEmptyAction()\n    {\n        $config = $this->getServiceManager()->get('MelisCoreConfig');\n        $tool = $config->getItem('/meliscms/interface/meliscms_toolstree/interface/meliscms_tool_sites/interface/meliscms_tool_sites_modals');\n        return new ViewModel();\n    }\n    \n\n    /**\n     * Displays the add form in the modal\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesModalAddAction()\n    {\n        // declare the Tool service that we will be using to completely create our tool.\n        $melisKey = $this->getMelisKey();\n        $view = new ViewModel();\n        $view->setTerminal(false);\n        $view->melisKey  = $melisKey;\n        return $view;\n    }\n\n    public function renderToolSitesModalAddStep1Action()\n    {\n        $melisKey = $this->getMelisKey();\n\n        // declare the Tool service that we will be using to completely create our tool.\n        $melisTool = $this->getServiceManager()->get('MelisCoreTool');\n\n        // tell the Tool what configuration in the app.tools.php that will be used.\n        $melisTool->setMelisToolKey(self::TOOL_INDEX, self::TOOL_KEY);\n        //prepare the user profile form\n        $form = $melisTool->getForm('meliscms_tool_sites_modal_add_step1_form');\n\n        $view = new ViewModel();\n        $view->setVariable('step1_form', $form);\n        $view->melisKey = $melisKey;\n\n        return $view;\n    }\n    public function renderToolSitesModalAddStep2Action()\n    {\n        $melisKey = $this->getMelisKey();\n\n        //get the lang list\n        $langService = $this->getServiceManager()->get('MelisEngineLang');\n        $langList = $langService->getAvailableLanguages();\n\n        // declare the Tool service that we will be using to completely create our tool.\n        $melisTool = $this->getServiceManager()->get('MelisCoreTool');\n\n        // tell the Tool what configuration in the app.tools.php that will be used.\n        $melisTool->setMelisToolKey(self::TOOL_INDEX, self::TOOL_KEY);\n        //prepare the step2 forms\n        $formMultiLingual = $melisTool->getForm('meliscms_tool_sites_modal_add_step2_form_multi_language');\n        $formSingleLanguage = $melisTool->getForm('meliscms_tool_sites_modal_add_step2_form_single_language');\n\n        $view = new ViewModel();\n        $view->setVariable('step2_form_multi_language', $formMultiLingual);\n        $view->setVariable('step2_form_single_language', $formSingleLanguage);\n        $view->melisKey = $melisKey;\n        $view->langList = $langList;\n\n        return $view;\n    }\n    public function renderToolSitesModalAddStep3Action()\n    {\n        $melisKey = $this->getMelisKey();\n\n        // declare the Tool service that we will be using to completely create our tool.\n        $melisTool = $this->getServiceManager()->get('MelisCoreTool');\n\n        // tell the Tool what configuration in the app.tools.php that will be used.\n        $melisTool->setMelisToolKey(self::TOOL_INDEX, self::TOOL_KEY);\n        //prepare the step2 forms\n        $formMultiDomain = $melisTool->getForm('meliscms_tool_sites_modal_add_step3_form_multi_domain');\n        $formSingleDomain = $melisTool->getForm('meliscms_tool_sites_modal_add_step3_form_single_domain');\n\n        $view = new ViewModel();\n        $view->setVariable('step3_form_multi_domain', $formMultiDomain);\n        $view->setVariable('step3_form_single_domain', $formSingleDomain);\n        $view->melisKey  = $melisKey;\n        return $view;\n    }\n    public function renderToolSitesModalAddStep4Action()\n    {\n        $melisKey = $this->getMelisKey();\n\n        // declare the Tool service that we will be using to completely create our tool.\n        $melisTool = $this->getServiceManager()->get('MelisCoreTool');\n\n        // tell the Tool what configuration in the app.tools.php that will be used.\n        $melisTool->setMelisToolKey(self::TOOL_INDEX, self::TOOL_KEY);\n        //prepare the step4 forms\n        $moduleForm = $melisTool->getForm('meliscms_tool_sites_modal_add_step4_form_module');\n\n        $view = new ViewModel();\n        $view->setVariable('step4_form_module', $moduleForm);\n        $view->melisKey = $melisKey;\n        return $view;\n    }\n    public function renderToolSitesModalAddStep5Action()\n    {\n        $melisKey = $this->getMelisKey();\n        $view = new ViewModel();\n        $view->setTerminal(false);\n        $view->melisKey = $melisKey;\n        return $view;\n    }\n    \n\n    public function renderToolSitesModalEditAction()\n    {\n        // declare the Tool service that we will be using to completely create our tool.\n        $melisTool = $this->getServiceManager()->get('MelisCoreTool');\n    \n        // tell the Tool what configuration in the app.tool.php that will be used.\n        $melisTool->setMelisToolKey(self::TOOL_INDEX, self::TOOL_KEY);\n    \n        $view = new ViewModel();\n    \n        $view->setVariable('meliscms_site_tool_edition_form', $melisTool->getForm('meliscms_site_tool_edition_form'));\n    \n        return $view;\n    }\n    \n    /**\n     * Renders to the edit button in the table\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesContentActionEditAction()\n    {\n        return new ViewModel();\n    }\n    \n    /**\n     * Renders to the delete button in the table\n     * @return \\Laminas\\View\\Model\\ViewModel\n     */\n    public function renderToolSitesContentActionDeleteAction()\n    {\n        return new ViewModel();\n    }\n    \n    public function renderToolSitesNewSiteConfirmationModalAction()\n    {\n        $melisKey = $this->params()->fromRoute('melisKey', '');\n\n        $view = new ViewModel();\n        $view->melisKey = $melisKey;\n\n        return $view;\n    }\n    \n    /**\n     * Returns all the data from the site table, site domain and site 404\n     */\n    public function getSiteDataAction()\n    {\n        $cmsSiteSrv = $this->getServiceManager()->get('MelisCmsSiteService');\n        $siteTable = $this->getServiceManager()->get('MelisEngineTableSite');\n        $translator = $this->getServiceManager()->get('translator');\n\n        $melisTool = $this->getServiceManager()->get('MelisCoreTool');\n        $melisTool->setMelisToolKey(self::TOOL_INDEX, self::TOOL_KEY);\n\n        $colId = array();\n        $dataCount = 0;\n        $draw = 0;\n        $tableData = array();\n\n        if($this->getRequest()->isPost())\n        {\n            $colId = array_keys($melisTool->getColumns());\n\n            $sortOrder = $this->getRequest()->getPost('order');\n            $sortOrder = $sortOrder[0]['dir'];\n\n            $selCol = $this->getRequest()->getPost('order');\n            $selCol = $colId[$selCol[0]['column']];\n\n            $draw = $this->getRequest()->getPost('draw');\n\n            $start = (int)$this->getRequest()->getPost('start');\n            $length = (int)$this->getRequest()->getPost('length');\n\n            $search = $this->getRequest()->getPost('search');\n            $search = $search['value'];\n\n            $dataCount = $siteTable->getTotalData();\n\n            $getData = $siteTable->getSitesData($search, $melisTool->getSearchableColumns(), $selCol, $sortOrder, $start, $length);\n            $dataFilter = $siteTable->getSitesData($search, $melisTool->getSearchableColumns(), $selCol, $sortOrder, null, null);\n\n            $tableData = $getData->toArray();\n            for ($ctr = 0; $ctr < count($tableData); $ctr++) {\n                // apply text limits\n                foreach ($tableData[$ctr] as $vKey => $vValue) {\n                    $tableData[$ctr][$vKey] = $melisTool->limitedText($melisTool->escapeHtml($vValue));\n                }\n\n                // manually modify value of the desired row\n                // no specific row to be modified\n\n                // add DataTable RowID, this will be added in the <tr> tags in each rows\n                $tableData[$ctr]['DT_RowId'] = $tableData[$ctr]['site_id'];\n\n                /**\n                 * Check if module exist to disable the\n                 * minify button\n                 */\n                $modulePath = $cmsSiteSrv->getModulePath($tableData[$ctr]['site_name']);\n                if(file_exists($modulePath)){\n                    $attrArray = array('data-mod-found'   => true);\n                }else{\n                    $attrArray = array('data-mod-found'   => false);\n                }\n\n                //assign attribute data to table row\n                $tableData[$ctr]['DT_RowAttr'] = $attrArray;\n            }\n        }\n\n        return new JsonModel(array(\n            'draw' => (int) $draw,\n            'recordsTotal' => $dataCount,\n            'recordsFiltered' =>  $dataFilter->count(),\n            'data' => $tableData,\n        ));\n    }\n\n    /**\n     * @return JsonModel\n     */\n    public function createNewSiteAction()\n    {\n        $sId = null;\n        $errors = array();\n        $status = false;\n        $siteIds = array();\n        $siteName = '';\n        $siteLabel = '';\n        $textMessage = '';\n        $siteTablePrefix = self::SITE_TABLE_PREFIX;\n        $domainTablePrefix = self::DOMAIN_TABLE_PREFIX;\n\n        $translator = $this->getServiceManager()->get('translator');\n        $cmsSiteSrv = $this->getServiceManager()->get('MelisCmsSiteService');\n\n        if ($this->getRequest()->isPost()) {\n            $sitesData = $this->getRequest()->getPost('data');\n            if(!empty($sitesData)) {\n                $createNewFile = false;\n                $isNewSIte = false;\n                $siteData = array();\n                $siteLanguages = array();\n                $site404Data = array();\n                $domainData = array();\n                $domainDataTemp = array();\n\n                /**\n                 * This will look for every specific data for each table(site, domains, etc..)\n                 *\n                 * The Domain is specific case cause there's a chance that the user will\n                 * select multi domain for every site(depend on language) and even though\n                 * the user select single domain, we will still need to prepare the data as\n                 * equal to multi domain\n                 */\n                foreach ($sitesData as $key => $value) {\n                    if (!empty($value['data']) && is_array($value['data'])) {\n                        foreach ($value['data'] as $k => $val) {\n                            if (!empty($val) && is_array($val)) {\n                                if (!empty($val['name'])) {\n                                    /**\n                                     * add site data\n                                     */\n                                    if (strpos($val['name'], $siteTablePrefix) !== false) {\n                                        $siteData[$val['name']] = $val['value'];\n                                    }\n\n                                    /**\n                                     * add the domain data\n                                     */\n                                    if ($key == 'domains') {\n                                        /**\n                                         * if it is came from the domain form, we will put\n                                         * it inside the main domain data container\n                                         */\n                                        if (strpos($val['name'], $domainTablePrefix) !== false) {\n                                            $domainData[$k][$val['name']] = $val['value'];\n                                        }\n                                    } else {\n                                        /**\n                                         * we will put the domain data to temporary\n                                         * container to add to main container later\n                                         */\n                                        if (strpos($val['name'], $domainTablePrefix) !== false) {\n                                            $domainDataTemp[$val['name']] = $val['value'];\n                                        }\n                                    }\n                                } else {\n                                    /**\n                                     * This will add the data that the key\n                                     * is equal to the field name\n                                     */\n                                    foreach ($val as $field => $fieldValue) {\n                                        /**\n                                         * add site data\n                                         */\n                                        if (strpos($field, $siteTablePrefix) !== false) {\n                                            $siteData[$field] = $fieldValue;\n                                        }\n\n                                        /**\n                                         * add domain data\n                                         */\n                                        if (strpos($field, $domainTablePrefix) !== false) {\n                                            $domainData[$k][$field] = $fieldValue;\n                                        }\n                                    }\n                                }\n                            } else {\n                                /**\n                                 * add the site data\n                                 */\n                                if (strpos($k, $siteTablePrefix) !== false) {\n                                    $siteData[$k] = $val;\n                                }\n\n                                /**\n                                 * Add the other domain data to temporary container\n                                 * since it came from other form, were just gonna\n                                 * add this to main domain container later\n                                 */\n                                if (strpos($k, $domainTablePrefix) !== false) {\n                                    $domainDataTemp[$k] = $val;\n                                }\n                            }\n                        }\n                    } else {\n                        foreach ($value as $fieldKey => $fieldValue) {\n                            /**\n                             * add the site data\n                             */\n                            if (strpos($fieldKey, $siteTablePrefix) !== false) {\n                                $siteData[$fieldKey] = $fieldValue;\n                            }\n\n                            /**\n                             * Add the other domain data to temporary container\n                             * since it came from other form, were just gonna\n                             * add this to main domain container later\n                             */\n                            if (strpos($fieldKey, $domainTablePrefix) !== false) {\n                                $domainDataTemp[$fieldKey] = $fieldValue;\n                            }\n                        }\n                    }\n\n                    /**\n                     * Check if it is a new site and if were are\n                     * gonna create a file for this site\n                     */\n                    if ($key == 'module') {\n                        $createNewFile = ($value['createFile'] === 'true');\n                        $isNewSIte = ($value['newSite'] === 'true');\n                    }\n\n                    /**\n                     * get the site languages\n                     */\n                    if ($key == 'languages') {\n                        $siteLanguages = $value;\n                    }\n                }\n\n                /**\n                 * Fill the other fields with the default one\n                 * if the fields are still empty\n                 */\n                //check if $domainData is empty\n                if (empty($domainData) && !empty($domainDataTemp)) {\n                    foreach ($siteLanguages as $locale => $langId) {\n                        if($locale != 'sites_url_setting') {\n                            foreach ($domainDataTemp as $dom => $val) {\n                                $domainData[$locale] = array($dom => $val);\n                            }\n                        }\n                    }\n                }\n                //we need to loop the domain to fill all fields\n                foreach ($domainData as $domKey => $domVal) {\n                    //add the temporary domain data to the main container\n                    foreach ($domainDataTemp as $tempKey => $tempVal) {\n                        if (empty($domainData[$domKey][$tempKey])) {\n                            $domainData[$domKey][$tempKey] = $tempVal;\n                        }\n                    }\n                    /**\n                     * add some default data to domain\n                     * if the fields does not exist\n                     * or empty\n                     */\n                    $domainData[$domKey]['sdom_env'] = (!empty($domainData[$domKey]['sdom_env'])) ? $domainData[$domKey]['sdom_env'] : getenv('MELIS_PLATFORM');\n                    $domainData[$domKey]['sdom_scheme'] = (!empty($domainData[$domKey]['sdom_scheme'])) ? $domainData[$domKey]['sdom_scheme'] : 'http';\n                }\n                //field the site data\n                if (!empty($siteData)) {\n                    $siteName = (!empty($siteData['site_name'])) ? $cmsSiteSrv->generateModuleNameCase($siteData['site_name']) : '';\n                    $siteLabel = (!empty($siteData['site_label'])) ? $siteData['site_label'] : $siteName;\n                    $siteData['site_label'] = $siteLabel;\n                    $siteData['site_name'] = $siteName;\n                }\n\n                /**\n                 * Before proceeding to save the site\n                 * check if it is a new site and\n                 * the site is not yet created\n                 */\n                $isValidName = true;\n                if ($isNewSIte) {\n                    $siteTable = $this->getServiceManager()->get('MelisEngineTableSite');\n                    $siteDBData = $siteTable->getEntryByField('site_name', $siteName)->current();\n                    if (!empty($siteDBData)) {\n                        $isValidName = false;\n                    }\n                }\n\n                if ($isValidName) {\n                    $saveSiteResult = $cmsSiteSrv->saveSite($siteData, $domainData, $siteLanguages, $site404Data, $siteName, $createNewFile, $isNewSIte);\n\n                    if ($saveSiteResult['success'])\n                    {\n                        $siteIds = $saveSiteResult['site_ids'];\n                        $textMessage = 'tr_melis_cms_sites_tool_add_create_site_success';\n                        $status = true;\n                        //regenerate modules path\n                        $this->regenerateModulesPath();\n                    }\n                    else\n                    {\n                        $textMessage = 'tr_melis_cms_sites_tool_add_unable_to_create_site';\n                        $errors = array(\n                            $translator->translate('tr_melis_cms_sites_tool_add_site_error') => array(\n                                'error' => $translator->translate($saveSiteResult['message'])\n                            ),\n                        );\n                        $status = false;\n                    }\n                }else{\n                    $textMessage = 'tr_melis_cms_sites_tool_add_unable_to_create_site';\n                    $errors = array(\n                        $translator->translate('tr_meliscms_tool_sites_module_name') => array(\n                            'moduleAlreadyExists' => $translator->translate('tr_melis_cms_sites_tool_add_site_module_already_exist')\n                        ),\n                    );\n                    $status = false;\n                }\n            }\n        }\n\n        $response = array(\n            'success' => $status,\n            'textTitle' => 'tr_meliscms_tool_site',\n            'textMessage' => $textMessage,\n            'siteIds' => $siteIds,\n            'siteName' => $siteLabel,\n            'siteModuleName' => $siteName,\n            'errors' => $errors\n        );\n\n        /**\n         * add logs\n         */\n        if(empty($siteIds)) {\n            $this->getEventManager()->trigger('meliscms_site_save_end', $this, array_merge($response, array('typeCode' => 'CMS_SITE_ADD', 'itemId' => $sId)));\n        }else{\n            foreach ($siteIds as $key => $id) {\n                $this->getEventManager()->trigger('meliscms_site_save_end', $this, array_merge($response, array('typeCode' => 'CMS_SITE_ADD', 'itemId' => $id)));\n            }\n        }\n\n       return new JsonModel($response);\n    }\n\n    /**\n     * Add New Site\n     * @return \\Laminas\\View\\Model\\JsonModel\n     */\n    public function saveSiteAction()\n    {\n        $eventDatas = array();\n        $this->getEventManager()->trigger('meliscms_sites_save_start', $this, $eventDatas);\n\n        $status  = 1;\n        $errors  = array();\n        $textMessage = 'tr_melis_cms_site_save_ko';\n        $logTypeCode = 'CMS_SITE_UPDATE';\n        $translator = $this->getServiceManager()->get('translator');\n        $siteId = (int) $this->params()->fromQuery('siteId', '');\n        $request = $this->getRequest();\n        $data = $request->getPost()->toArray();\n        $melisCoreAuth = $this->getServiceManager()->get('MelisCoreAuth');\n        $userAuthDatas = $melisCoreAuth->getStorage()->read();\n        $isAdmin = isset($userAuthDatas->usr_admin) || $userAuthDatas->usr_admin != \"\" ? $userAuthDatas->usr_admin : 0;\n\n        $success = 0;\n        $ctr = 0;\n        $ctr1 = 0;\n\n        $moduleList = [];\n        $domainData = [];\n        $sitePropData = [];\n        $siteHomeData = [];\n        $siteConfigTabData = [];\n\n        foreach ($data as $datum => $val) {\n            //collecting data for site module load\n            if ($isAdmin) {\n                if (strstr($datum,'moduleLoad')) {\n                    $datum = str_replace(\"moduleLoad\", '', $datum);\n                    array_push($moduleList, $datum);\n                }\n            }\n\n            //collecting data for site domains\n            if (strstr($datum,'sdom_')) {\n                $key = substr($datum, (strpos($datum, '_') ?: -1) + 1);\n                if(!empty($domainData[$ctr]))\n                    if(array_key_exists($key, $domainData[$ctr]))\n                        $ctr++;\n                $domainData[$ctr][$key] = $val;\n            }\n\n            //collecting data for site properties\n            if (strstr($datum,'siteprop_')) {\n                $datum = str_replace(\"siteprop_\", '', $datum);\n                $sitePropData[$datum] = $val;\n            }\n\n            //collecting data for site language homepages\n            if (strstr($datum,'shome_')) {\n                $key = substr($datum, (strpos($datum, '_') ?: -1) + 1);\n                if(!empty($siteHomeData[$ctr1]))\n                    if(array_key_exists($key, $siteHomeData[$ctr1]))\n                        $ctr1++;\n                $siteHomeData[$ctr1][$key] = $val;\n            }\n\n            //data for site config\n            if (strstr($datum,'sconf_')) {\n                $lang = explode('_', $datum)[0];\n                $key = substr($datum, strpos($datum, '_') + 1);\n                $tableColumns = [\n                    'sconf_id',\n                    'sconf_site_id',\n                    'sconf_lang_id'\n                ];\n\n                if (in_array($key, $tableColumns)) {\n                    $siteConfigTabData[$lang][$key] = $val;\n                } else {\n                    $key = substr($datum, strpos($datum, '_', strpos($datum, '_') + 1) + 1);\n\n                    if (is_array($val)) {\n                        $siteConfigTabData[$lang]['configArray'][$key] = $val;\n                    } else {\n                        $siteConfigTabData[$lang]['config'][$key] = $val;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Prepare the transaction so that\n         * we can rollback the db process if\n         * there are some error occurred\n         */\n        $db = $this->getServiceManager()->get('Laminas\\Db\\Adapter\\Adapter');//get db adapter\n        $con = $db->getDriver()->getConnection();//get db driver connection\n        $con->beginTransaction();//begin transaction\n        try {\n            /**\n             * Try to save the site data's\n             */\n            $this->saveSiteDomains($domainData, $errors, $status);\n            $this->saveSiteHomePages($siteHomeData, $data, $errors, $status);\n            $this->saveSiteConfig($siteId,$siteConfigTabData);\n            $this->saveSiteProperties($siteId, $sitePropData, $errors, $status);\n            $this->saveSiteLanguagesTab($siteId, $data);\n            /**\n             * If there is no error\n             * execute the saving\n             */\n            if(empty($errors)){\n                $textMessage = 'tr_melis_cms_site_save_ok';\n                /**\n                 * If there are no errors\n                 * on db saving, we can now process\n                 * the module saving\n                 */\n                $this->saveSiteModules($isAdmin, $siteId, $moduleList,$status, $path);\n                if($status) {\n                    /**\n                     * remove languages from other tabs\n                     */\n                    if (isset($data['to_delete_languages_data'])) {\n                        $LangIds = [];\n\n                        foreach ($data['to_delete_languages_data'] as $langKey => $langVal) {\n                            if ($langVal === 'true') {\n                                array_push($LangIds, $langKey);\n                            }\n                        }\n\n                        if (!empty($data['to_delete_languages_data'])) {\n                            $this->deleteOtherTabsData($siteId, $LangIds);\n                        }\n                    }\n                    //clear cache\n                    $this->clearSiteConfigCache($siteId);\n                    /**\n                     * if no error, execute the saving\n                     */\n                    $con->commit();\n                }else{\n                    $status = false;\n                    $textMessage = sprintf($translator->translate(\"tr_meliscms_tool_site_module_load_no_rights\"), $path);\n                    $tmpModuleErrorMsg = $translator->translate('tr_melis_cms_site_save_ko');\n                    $con->rollback();\n                }\n            }else{\n                $status = false;\n                /**\n                 * rollback everything\n                 */\n                $con->rollback();\n            }\n        }catch (\\Exception $ex){\n            $status = false;\n            $textMessage = 'tr_melis_cms_site_save_ko';\n            /**\n             * If error occurred\n             * rollback the process\n             */\n            $con->rollback();\n        }\n\n        $response = array(\n            'success' => $status,\n            'textTitle' => $translator->translate('tr_meliscms_tool_site'),\n            'textMessage' => $translator->translate($textMessage),\n            'errors' => $errors,\n        );\n\n        if ($siteId)\n        {\n            $response['siteId'] = $siteId;\n        }\n\n        if (isset($tmpModuleErrorMsg)) {\n            $response['tmpModuleErrorMsg'] = $tmpModuleErrorMsg;\n        }\n\n        $this->getEventManager()->trigger('meliscms_site_save_end', $this, array_merge($response, array('typeCode' => $logTypeCode, 'itemId' => $siteId)));\n\n        return new JsonModel($response);\n    }\n\n    /**\n     * Function to delete site\n     *\n     * @return JsonModel\n     */\n    public function deleteSiteAction()\n    {\n        $request = $this->getRequest();\n        $status  = false;\n        $textMessage = 'tr_meliscms_tool_site_delete_failed';\n        $eventDatas = array();\n        $siteId = null;\n\n        $this->getEventManager()->trigger('meliscms_site_delete_start', $this, $eventDatas);\n        if($request->isPost()) {\n            /**\n             * get site id\n             */\n            $siteId = (int) $request->getPost('siteId');\n            /**\n             * Get services/tables\n             */\n            $siteTable = $this->getServiceManager()->get('MelisEngineTableSite');\n            $domainTable = $this->getServiceManager()->get('MelisEngineTableSiteDomain');\n            $site404Table = $this->getServiceManager()->get('MelisEngineTableSite404');\n            $siteHomeTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteHome');\n            $sitelangsTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteLangs');\n\n            // make sure our ID is not empty\n            if(!empty($siteId))\n            {\n                /**\n                 * Prepare the transaction so that\n                 * we can rollback the db deletion if\n                 * there are some error occurred\n                 */\n                $db = $this->getServiceManager()->get('Laminas\\Db\\Adapter\\Adapter');//get db adapter\n                $con = $db->getDriver()->getConnection();//get db driver connection\n                $con->beginTransaction();//begin transaction\n                try {\n                    /**\n                     * Prepare to delete site datas\n                     */\n                    $siteTable->deleteByField('site_id', $siteId);\n                    $domainTable->deleteByField('sdom_site_id', $siteId);\n                    $site404Table->deleteByField('s404_site_id', $siteId);\n                    $siteHomeTable->deleteByField('shome_site_id', $siteId);\n                    $sitelangsTable->deleteByField('slang_site_id', $siteId);\n\n                    $status = true;\n                    $textMessage = 'tr_meliscms_tool_site_delete_success';\n\n                    /**\n                     * If there is no error\n                     * execute the deletion\n                     */\n                    $con->commit();\n                }catch (\\Exception $ex){\n                    /**\n                     * If error occurred\n                     * rollback the process\n                     */\n                    $con->rollback();\n                }\n            }\n        }\n\n        $response = array(\n            'success' => $status ,\n            'textTitle' => 'tr_meliscms_tool_site',\n            'textMessage' => $textMessage\n        );\n        $this->getEventManager()->trigger('meliscms_site_delete_end', $this, array_merge($response, array('typeCode' => 'CMS_SITE_DELETE', 'itemId' => $siteId)));\n\n        return new JsonModel($response);\n    }\n\n    /**\n     * Save site properties\n     *\n     * @param $siteId\n     * @param $sitePropData\n     * @param $errors\n     * @param $status\n     */\n    private function saveSiteProperties($siteId, $sitePropData, &$errors, &$status)\n    {\n        /**\n         * Check if there is data to be process\n         */\n        if(!empty($sitePropData)) {\n            $form = $this->getTool()->getForm('meliscms_tool_sites_properties_form');\n            $form->setData($sitePropData);\n\n            if ($form->isValid()) {\n                $siteTbl = $this->getServiceManager()->get('MelisEngineTableSite');\n                $siteData = $siteTbl->getEntryById($siteId)->toArray()[0];\n                $dataToUpdate = [];\n\n                foreach ($siteData as $siteDatumKey => $siteDatum) {\n                    if (array_key_exists($siteDatumKey, $sitePropData)) {\n                        if ($sitePropData[$siteDatumKey] != $siteDatum) {\n                            $dataToUpdate[$siteDatumKey] = $sitePropData[$siteDatumKey];\n                        }\n                    }\n                }\n\n                if (!empty($dataToUpdate)) {\n                    $siteTbl->update($dataToUpdate, 'site_id', $siteId);\n                }\n\n                $site404Tbl = $this->getServiceManager()->get('MelisEngineTableSite404');\n                $site404 = $site404Tbl->getEntryByField('s404_site_id', $siteId)->current();\n                if (!empty($site404)) {\n                    if ($site404->s404_page_id != $sitePropData['s404_page_id']) {\n                        $site404Tbl->update(\n                            [\n                                's404_page_id' => $sitePropData['s404_page_id']\n                            ],\n                            's404_site_id',\n                            $siteId\n                        );\n                    }\n                } else {\n                    //save the 404 id\n                    $site404Tbl->save([\n                        's404_site_id' => $siteId,\n                        's404_page_id' => $sitePropData['s404_page_id']\n                    ]);\n                }\n            } else {\n                $err = [];\n\n                foreach ($form->getMessages() as $key => $val) {\n                    $err['siteprop_' . $key] = $val;\n                }\n\n                $errors = array_merge($errors, $err);\n                $status = 0;\n            }\n        }\n    }\n\n    /**\n     * Save site modules\n     *\n     * @param $isAdmin\n     * @param $siteId\n     * @param $moduleList\n     * @param $status\n     * @param $path\n     */\n    private function saveSiteModules($isAdmin, $siteId, $moduleList, &$status, &$path)\n    {\n        $siteModuleLoadSvc = $this->getServiceManager()->get(\"MelisCmsSiteModuleLoadService\");\n\n        if ($isAdmin) {\n            if(!empty($moduleList)) {\n                $data = $siteModuleLoadSvc->saveModuleLoad($siteId, $moduleList);\n                $status = $data['status'];\n                $path = $data['folder_path'];\n            }else{\n                $status = 1;\n                $path = '';\n            }\n        }\n    }\n\n    /**\n     * Save site domains\n     *\n     * @param $siteDomainData\n     * @param $errors\n     * @param $status\n     */\n    private function saveSiteDomains($siteDomainData, &$errors, &$status)\n    {\n        /**\n         * Check if there is data to be process\n         */\n        if(!empty($siteDomainData)) {\n            $siteDomainsSvc = $this->getServiceManager()->get(\"MelisCmsSitesDomainsService\");\n            $err = false;\n            $domains = [];\n            $translator = $this->getServiceManager()->get('translator');\n\n            // First check if forms are valid for every environment\n            foreach ($siteDomainData as $domainDatum) {\n                $form = $this->getTool()->getForm('meliscms_tool_sites_domain_form');\n                $form->setData($domainDatum);\n\n                if ($domainDatum['sdom_env'] == getenv('MELIS_PLATFORM')) {\n                    if (!$form->isValid()) {\n                        $err = true;\n                        $currErr = array();\n\n                        foreach ($form->getMessages() as $key => $err) {\n                            $currErr[$domainDatum[\"sdom_env\"] . \"_\" . $key] = $err;\n                        }\n\n                        $errors = array_merge($errors, $currErr);\n                        $status = 0;\n                    }\n                }\n            }\n\n            // Second check if there are duplicates\n            if (!$err) {\n                foreach ($siteDomainData as $domainDatum) {\n                    if (in_array($domainDatum['sdom_domain'], $domains)) {\n                        $err = true;\n                        $currErr = array();\n                        $currErr[$domainDatum[\"sdom_env\"] . \"_\" . 'sdom_domain'] = $translator->translate('tr_melis_cms_sites_tool_add_step3_domain_unique_error');\n                        $errors = array_merge($errors, $currErr);\n                        $status = 0;\n                    } else {\n                        $domains[$domainDatum['sdom_env']] = $domainDatum['sdom_domain'];\n                    }\n                }\n            }\n\n            // Third check if domain is already used by another site & save\n            if (!$err) {\n                foreach ($siteDomainData as $domainDatum) {\n                    $form = $this->getTool()->getForm('meliscms_tool_sites_domain_form');\n                    $form->setData($domainDatum);\n\n                    if ($domainDatum['sdom_env'] == getenv('MELIS_PLATFORM')) {\n                        $siteData = [];\n                        $isDomainAvailable = $this->checkDomain($domainDatum, $siteData);\n\n                        if ($isDomainAvailable) {\n                            $siteDomainsSvc->saveSiteDomain($domainDatum);\n                        } else {\n                            $currErr = array();\n                            $currErr[$domainDatum[\"sdom_env\"] . '_' . 'sdom_domain'] = $translator->translate('tr_melis_cms_sites_tool_add_step3_domain_error1') . $siteData['site_label'] . $translator->translate('tr_melis_cms_sites_tool_add_step3_domain_error2');\n                            $errors = array_merge($errors, $currErr);\n                            $status = 0;\n                        }\n                    } else {\n                        if (!empty($domainDatum['sdom_scheme']) && !empty($domainDatum['sdom_domain'])) {\n                            $siteData = [];\n                            $isDomainAvailable = $this->checkDomain($domainDatum, $siteData);\n\n                            if ($isDomainAvailable) {\n                                $siteDomainsSvc->saveSiteDomain($domainDatum);\n                            } else {\n                                $currErr = array();\n                                $currErr[$domainDatum[\"sdom_env\"] . '_' . 'sdom_domain'] = $translator->translate('tr_melis_cms_sites_tool_add_step3_domain_error1') . $siteData['site_label'] . $translator->translate('tr_melis_cms_sites_tool_add_step3_domain_error2');\n                                $errors = array_merge($errors, $currErr);\n                                $status = 0;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Checks if the domain is available or not\n     * @param $domainDatum\n     * @param $siteData\n     * @return bool\n     */\n    public function checkDomain($domainDatum, &$siteData) {\n        $domainTable = $this->getServiceManager()->get('MelisEngineTableSiteDomain');\n        $siteTable = $this->getServiceManager()->get('MelisEngineTableSite');\n\n        $dom = $domainTable->getEntryByField('sdom_domain', $domainDatum['sdom_domain'])->toArray();\n\n        if (!empty($dom)) {\n            $site = $siteTable->getEntryById($dom[0]['sdom_site_id'])->toArray()[0];\n\n            if ($site['site_id'] == $domainDatum['sdom_site_id']) {\n                return true;\n            } else {\n                $siteData = $site;\n                return false;\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * Save site home page ids\n     *\n     * @param $siteHomeData\n     * @param $data\n     * @param $errors\n     * @param $status\n     */\n    private function saveSiteHomePages($siteHomeData, $data, &$errors, &$status)\n    {\n        /**\n         * Check if there is data to be process\n         */\n        if(!empty($siteHomeData)) {\n            $sitePropSvc = $this->getServiceManager()->get(\"MelisCmsSitesPropertiesService\");\n\n            foreach ($siteHomeData as $siteHomeDatum) {\n                $form = $this->getTool()->getForm('meliscms_tool_sites_properties_homepage_form');\n                $form->setData($siteHomeDatum);\n                if(!empty($data['slang_lang_id'])) {\n                    if (in_array($siteHomeDatum['shome_lang_id'], $data['slang_lang_id'])) {\n                        if ($form->isValid()) {\n                            $sitePropSvc->saveSiteLangHome($siteHomeDatum);\n                        } else {\n                            $currErr = [];\n\n                            foreach ($form->getMessages() as $key => $err) {\n                                $currErr[$siteHomeDatum[\"shome_lang_id\"] . \"_\" . $key] = $err;\n                            }\n\n                            $errors = array_merge($errors, $currErr);\n                            $status = 0;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Save site languages\n     *\n     * @param $siteId\n     * @param $data\n     */\n    private function saveSiteLanguagesTab($siteId, $data)\n    {\n        if(isset($data['site_opt_lang_url'])) {\n            $siteLangsTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteLangs');\n            $siteTable = $this->getServiceManager()->get('MelisEngineTableSite');\n\n            // Saving languages\n            $siteLangs = $siteLangsTable->getSiteLangs(null, $siteId, null, null)->toArray();\n            $activeSiteLangs = $siteLangsTable->getSiteLangs(null, $siteId, null, true)->toArray();\n            $selectedSiteLangs = $data['slang_lang_id'] ?? [];\n            $noChangesOnSiteLangs = false;\n\n            // Check if active languages and selected languages are the same\n            if (count($activeSiteLangs) === count($selectedSiteLangs)) {\n                foreach ($activeSiteLangs as $activeSiteLang) {\n                    if (in_array($activeSiteLang['slang_lang_id'], $selectedSiteLangs)) {\n                        $noChangesOnSiteLangs = true;\n                    }\n                }\n            }\n\n            // Catch if there are changes on the selected languages over the active languages\n            if (!$noChangesOnSiteLangs) {\n                // Disable all active languages of site\n                $siteLangsTable->update(['slang_status' => 0], 'slang_site_id', $siteId);\n\n                // Because all of the active languages are disabled. All we have to do\n                // is to save if it's a new language or to active(update) the language back\n                foreach ($selectedSiteLangs as $selectedSiteLang) {\n                    $slangId = 0;\n\n                    foreach ($siteLangs as $siteLang) {\n                        if ($selectedSiteLang == $siteLang['slang_lang_id']) {\n                            $slangId = $siteLang['slang_id'];\n                            break;\n                        }\n                    }\n\n                    $siteLangsTable->save(\n                        [\n                            'slang_site_id' => $siteId,\n                            'slang_lang_id' => $selectedSiteLang,\n                            'slang_status' => 1\n                        ],\n                        $slangId\n                    );\n                }\n            }\n\n            // Update site to add site option language url\n            /**\n             * Update only if there are not the same data\n             */\n            $siteDatas = $siteTable->getEntryById($siteId)->current();\n            if(!empty($siteDatas)){\n                if($siteDatas->site_opt_lang_url != $data['site_opt_lang_url']){\n                    $updatedSiteId = $siteTable->save(['site_opt_lang_url' => $data['site_opt_lang_url']], $siteId);\n                    if($updatedSiteId){\n                        $this->deleteDefaultUrls($siteId, $siteDatas->site_main_page_id);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Delete the default page url\n     * when change the site option language\n     * so that it will re generate the correct url\n     *\n     * @param $siteId\n     * @param $siteMainHomePageId\n     */\n    private function deleteDefaultUrls($siteId, $siteMainHomePageId)\n    {\n        $siteLangHomeTbl = $this->getServiceManager()->get('MelisEngineTableCmsSiteHome');\n        $pageIds = array();\n\n        $siteHomeDatas = $siteLangHomeTbl->getHomePageBySiteId($siteId)->toArray();\n        if(!empty($siteHomeDatas)){\n            foreach($siteHomeDatas as $key => $val) {\n                array_push($pageIds, $val['shome_page_id']);\n                $this->getAllPagesId($val['shome_page_id'], $pageIds);\n            }\n        }else{\n            array_push($pageIds, $siteMainHomePageId);\n            $this->getAllPagesId($siteMainHomePageId, $pageIds);\n        }\n\n        $tablePageDefaultUrls = $this->getServiceManager()->get('MelisEngineTablePageDefaultUrls');\n        foreach($pageIds as $key => $id){\n            $tablePageDefaultUrls->deleteById($id);\n        }\n    }\n\n    /**\n     * Get all page ids\n     *\n     * @param $pageId\n     * @param $pageIds\n     */\n    private function getAllPagesId($pageId, &$pageIds) {\n        $pageTreeService = $this->getServiceManager()->get('MelisEngineTree');\n        $data = $pageTreeService->getAllPages($pageId);\n        foreach($data as $key => $val){\n            foreach($val as $k => $v){\n                //add only the page if seo url is empty\n                if(empty($v['pseo_url'])) {\n                    array_push($pageIds, $v['tree_page_id']);\n                }\n\n                if(!empty($v['children'])){\n                    $this->getAllPagesId($v['tree_page_id'], $pageIds);\n                }\n            }\n        }\n    }\n\n    /**\n     * Save site config\n     *\n     * @param $siteId\n     * @param $siteConfigTabData\n     */\n    private function saveSiteConfig($siteId, $siteConfigTabData) {\n        $siteConfigTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteConfig');\n        $siteName = $this->getSiteDataField($siteId, 'site_name');\n        $config = $this->getSiteConfig($siteId);\n        $configFromDb = $this->getSiteConfigFromDbById($siteId);\n        $this->prepareDbConfigs($siteId, $siteName, $configFromDb);\n        $configFromFile = $this->getSiteConfigFromFile($siteName);\n\n        /**\n         * Make sure that config is not empty\n         */\n        if(!empty($configFromFile)) {\n            /**\n             * make sure the site config exist\n             */\n            if(isset($configFromFile['site'][$siteName][$siteId])) {\n                foreach ($configFromFile['site'][$siteName]['allSites'] as $key => $val) {\n                    if (is_array($val)) {\n                        foreach ($val as $vKey => $vVal) {\n                            if (!is_array($vVal)) {\n                                $configFromFile['site'][$siteName]['allSitesArray'][$key][$vKey] = $vVal;\n                            }\n                        }\n                        unset($configFromFile['site'][$siteName]['allSites'][$key]);\n                    }\n                }\n\n                foreach ($configFromFile['site'][$siteName][$siteId] as $locale => $lVal) {\n                    foreach ($lVal as $key => $val) {\n                        if (is_array($val)) {\n                            foreach ($val as $vKey => $vVal) {\n                                if (!is_array($vVal)) {\n                                    $configFromFile['site'][$siteName][$siteId][$locale . 'Array'][$key][$vKey] = $vVal;\n                                }\n                            }\n\n                            unset($configFromFile['site'][$siteName][$siteId][$locale][$key]);\n                        }\n                    }\n                }\n\n                foreach ($siteConfigTabData as $langKey => $langValue) {\n                    $sconf_id = !empty($langValue['sconf_id']) ? $langValue['sconf_id'] : 0;\n                    $result = [];\n\n                    if (empty($langValue['config'])) {\n                        $langValue['config'] = [];\n                    }\n\n                    if (empty($langValue['configArray'])) {\n                        $langValue['configArray'] = [];\n                    }\n\n                    if ($langKey == 'gen') {\n                        $diff = array_diff_assoc($langValue['config'], $configFromFile['site'][$siteName]['allSites']);\n\n                        if (!empty($diff)) {\n                            foreach ($diff as $key => $val) {\n                                if ($val != '') {\n                                    $result['allSites'][$key] = $val;\n                                }\n                            }\n                        }\n\n                        if (!empty($langValue['configArray'])) {\n                            foreach ($langValue['configArray'] as $cKey => $cVal) {\n                                $diff = array_diff_assoc($langValue['configArray'][$cKey], $configFromFile['site'][$siteName]['allSitesArray'][$cKey]);\n\n                                foreach ($diff as $key => $val) {\n                                    if ($val != '') {\n                                        $result['allSites'][$cKey][$key] = $val;\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        $locale = $this->getLangField(null, $siteId, $langKey, 1, 'lang_cms_locale');\n                        if (array_key_exists($locale, $configFromFile['site'][$siteName][$siteId])) {\n                            $diff = array_diff_assoc($langValue['config'], $configFromFile['site'][$siteName][$siteId][$locale]);\n                        } else {\n                            $diff = array_diff_assoc($langValue['config'], []);\n                        }\n\n                        if (!empty($diff)) {\n                            foreach ($diff as $key => $val) {\n                                if ($val != '') {\n                                    $result[$locale][$key] = $val;\n                                }\n                            }\n                        }\n\n                        if (!empty($langValue['configArray'])) {\n                            foreach ($langValue['configArray'] as $cKey => $cVal) {\n                                if (array_key_exists($locale . 'Array', $configFromFile['site'][$siteName][$siteId])) {\n                                    $diff = array_diff_assoc($langValue['configArray'][$cKey], $configFromFile['site'][$siteName][$siteId][$locale . 'Array'][$cKey]);\n                                } else {\n                                    $diff = array_diff_assoc($langValue['configArray'][$cKey], []);\n                                }\n\n                                foreach ($diff as $key => $val) {\n                                    if ($val != '') {\n                                        $result[$locale][$cKey][$key] = $val;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    $siteConfigTable->save(\n                        [\n                            'sconf_site_id' => $siteId,\n                            'sconf_lang_id' => $langKey === 'gen' ? -1 : $langKey,\n                            'sconf_datas' => serialize($result)\n                        ],\n                        $sconf_id\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Deletes data\n     * @param $siteId\n     */\n    private function deleteOtherTabsData($siteId, $langIds)\n    {\n        $siteConfigTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteConfig');\n        $siteHomePageTbl = $this->getServiceManager()->get('MelisEngineTableCmsSiteHome');\n        $transTextTbl = $this->getServiceManager()->get('MelisSiteTranslationTextTable');\n        $transSvc = $this->getServiceManager()->get('MelisSiteTranslationService');\n\n        foreach ($langIds as $langId) {\n            $siteConfigTable->deleteConfig(null, $siteId, $langId);\n            $siteHomePageTbl->deleteHomePageId(null, $siteId, $langId, null);\n            $trans = $transSvc->getSiteTranslationFromDb(null, $langId, $siteId);\n\n            foreach ($trans as $tran) {\n                $transTextTbl->deleteById($tran['mstt_id']);\n            }\n        }\n    }\n\n    /**\n     * Returns specific site field\n     * @param $siteId\n     * @param $field\n     * @return mixed|string\n     */\n    private function getSiteDataField($siteId, $field)\n    {\n        $site = $this->getSiteDataById($siteId);\n        $siteField = '';\n\n        if (array_key_exists($field, $site)) {\n            $siteField = $site[$field];\n        }\n\n        return $siteField;\n    }\n\n    private function getLangField($id, $siteId, $langId, $isActive, $field)\n    {\n        $lang = $this->getLang($id, $siteId, $langId, $isActive);\n        $fieldData = '';\n\n        if (!empty($lang)) {\n            if (array_key_exists($field, $lang)) {\n                $fieldData = $lang[$field];\n            }\n        }\n\n        return $fieldData;\n    }\n\n    /**\n     * Returns Language\n     * @param $id\n     * @param $siteId\n     * @param $langId\n     * @param int $isActive\n     * @return mixed\n     */\n    private function getLang($id, $siteId, $langId, $isActive = 1)\n    {\n        $siteLangsTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteLangs');\n\n        if ($langId == 'gen') {\n            $langId = -1;\n        }\n\n        $lang = $siteLangsTable->getSiteLangs($id, $siteId, $langId, $isActive)->toArray();\n\n        if (!empty($lang)) {\n            $lang = $lang[0];\n        }\n\n        return $lang;\n    }\n\n    /**\n     * Prepares the db config. unserialize array & form the complete config\n     * @param $siteId\n     * @param $siteName\n     * @param $dbConfigs\n     */\n    private function prepareDbConfigs($siteId, $siteName, &$dbConfigs)\n    {\n        foreach ($dbConfigs as &$dbConfig) {\n            if ($dbConfig['sconf_lang_id'] == '-1') {\n                $dbConfig['sconf_datas'] = [\n                    'site' => [\n                        $siteName => unserialize($dbConfig['sconf_datas'], ['allowed_classes' => false]),\n                    ],\n                ];\n            } else {\n                $dbConfig['sconf_datas'] = [\n                    'site' => [\n                        $siteName => [\n                            $siteId => unserialize($dbConfig['sconf_datas'], ['allowed_classes' => false])\n                        ],\n                    ],\n                ];\n            }\n        }\n    }\n\n    private function getSiteConfigFromFile($siteName)\n    {\n        /** @var MelisSiteConfigService $siteConfigSrv */\n        $siteConfigSrv = $this->getServiceManager()->get('MelisSiteConfigService');\n        return $siteConfigSrv->getConfig($siteName);\n    }\n\n    /**\n     * return site config (from db only)\n     * @param $siteId\n     * @return mixed\n     */\n    private function getSiteConfigFromDbById($siteId)\n    {\n        $siteConfigTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteConfig');\n        return $siteConfigTable->getEntryByField('sconf_site_id', $siteId)->toArray();\n    }\n\n    /**\n     * returns site config (merged)\n     * @param $siteId\n     * @return mixed\n     */\n    private function getSiteConfig($siteId)\n    {\n        /** @var MelisSiteConfigService $siteConfigSrv */\n        $siteConfigSrv = $this->getServiceManager()->get('MelisSiteConfigService');\n        return $siteConfigSrv->getSiteConfig($siteId, true);\n    }\n\n    /**\n     * returns site data\n     * @param $siteId\n     * @return array\n     */\n    private function getSiteDataById($siteId)\n    {\n        $siteTable = $this->getServiceManager()->get('MelisEngineTableSite');\n        $site = $siteTable->getEntryById($siteId)->toArray();\n\n        return !empty($site) ? $site[0] : [];\n    }\n\n    /**\n     * returns meliskey from route or from query\n     * @return mixed\n     */\n    private function getMelisKey()\n    {\n        $melisKey = $this->params()->fromRoute('melisKey', $this->params()->fromQuery('melisKey'), null);\n\n        return $melisKey;\n    }\n\n    /**\n     * returns tools service\n     * @return array|object\n     */\n    private function getTool()\n    {\n        $toolSvc = $this->getServiceManager()->get('MelisCoreTool');\n        $toolSvc->setMelisToolKey('meliscms', 'meliscms_tool_sites');\n\n        return $toolSvc;\n    }\n\n    /**\n     * delete site domain platform\n     */\n    public function deleteSiteDomainPlatformAction()\n    {\n        $platform   = $this->params()->fromRoute('platform', $this->params()->fromQuery('platform', ''));\n        $id         = $this->params()->fromRoute('id', $this->params()->fromQuery('id', ''));\n        $success    = (int) $this->params()->fromRoute('success', $this->params()->fromQuery('success', ''));\n\n        if($success == 1) {\n            $domainTable = $this->getServiceManager()->get('MelisEngineTableSiteDomain');\n            $platformIdTable = $this->getServiceManager()->get('MelisEngineTablePlatformIds');\n\n            $platformIdTable->deleteByField('pids_id', $id);\n            $domainTable->deleteByField('sdom_env', $platform);\n        }\n    }\n\n    /**\n     * Regenerate modules path\n     *\n     * @return bool\n     */\n    private function regenerateModulesPath()\n    {\n       $file = $_SERVER['DOCUMENT_ROOT'] . \"/../config/melis.modules.path.php\";\n       if (file_exists($file)) {\n           unlink($file);\n           return true;\n       }\n    }\n\n    /**\n     * Clear Config Cache\n     */\n    private function clearSiteConfigCache($siteId)\n    {\n        //keys need to remove\n        $cacheKeys = [\n            'getSiteConfig_'.$siteId,\n            'getSiteConfigByPageId',\n            //module cache\n            'getVendorModulesEngine',\n            'getComposerModulePathEngine_'\n        ];\n\n        $cacheConfig = 'meliscms_page';\n        $melisEngineCacheSystem = $this->getServiceManager()->get('MelisEngineCacheSystem');\n        foreach($cacheKeys as $preFix)\n            $melisEngineCacheSystem->deleteCacheByPrefix($preFix, $cacheConfig);\n    }\n}\n"], "filenames": ["src/Controller/FrontPluginsController.php", "src/Controller/SitesConfigController.php", "src/Controller/SitesController.php"], "buggy_code_start_loc": [92, 144, 1540], "buggy_code_end_loc": [93, 152, 1548], "fixing_code_start_loc": [92, 144, 1540], "fixing_code_end_loc": [93, 152, 1548], "type": "CWE-502", "message": "MelisCms provides a full CMS for Melis Platform, including templating system, drag'n'drop of plugins, SEO and many administration tools. Attackers can deserialize arbitrary data on affected versions of `melisplatform/melis-cms`, and ultimately leads to the execution of arbitrary PHP code on the system. Conducting this attack does not require authentication. Users should immediately upgrade to `melisplatform/melis-cms` >= 5.0.1. This issue was addressed by restricting allowed classes when deserializing user-controlled data.", "other": {"cve": {"id": "CVE-2022-39297", "sourceIdentifier": "security-advisories@github.com", "published": "2022-10-12T23:15:09.623", "lastModified": "2022-10-13T17:35:43.297", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "MelisCms provides a full CMS for Melis Platform, including templating system, drag'n'drop of plugins, SEO and many administration tools. Attackers can deserialize arbitrary data on affected versions of `melisplatform/melis-cms`, and ultimately leads to the execution of arbitrary PHP code on the system. Conducting this attack does not require authentication. Users should immediately upgrade to `melisplatform/melis-cms` >= 5.0.1. This issue was addressed by restricting allowed classes when deserializing user-controlled data."}, {"lang": "es", "value": "MelisCms proporciona un CMS completo para la Plataforma Melis, incluyendo el sistema de plantillas, drag'n'drop de plugins, SEO y muchas herramientas de administraci\u00f3n. Los atacantes pueden deserializar datos arbitrarios en las versiones afectadas de \"melisplatform/melis-cms\", y en \u00faltima instancia conlleva a una ejecuci\u00f3n de c\u00f3digo PHP arbitrario en el sistema. La realizaci\u00f3n de este ataque no requiere autenticaci\u00f3n. Los usuarios deben actualizar inmediatamente a \"melisplatform/melis-cms\" versiones posteriores a 5.0.1 incluy\u00e9ndola. Este problema ha sido abordado al restringir las clases permitidas cuando son deserializados los datos controlados por el usuario"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 7.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.5}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-502"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-502"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:melistechnology:meliscms:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.0.1", "matchCriteriaId": "2A0F2482-77FC-4B8D-A360-E340941ACA59"}]}]}], "references": [{"url": "https://github.com/melisplatform/melis-cms/commit/d124b2474699a679a24ec52620cadceb3d4cec11", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/melisplatform/melis-cms/security/advisories/GHSA-m3m3-6gww-7gj9", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/melisplatform/melis-cms/commit/d124b2474699a679a24ec52620cadceb3d4cec11"}}