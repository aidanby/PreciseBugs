{"buggy_code": ["<?php\n/**\n * Created by PhpStorm.\n * User: Bojidar\n * Date: 11/10/2020\n * Time: 4:49 PM\n */\n\nnamespace MicroweberPackages\\Comment\\Http\\Controllers\\Admin;\n\nuse GrahamCampbell\\Markdown\\Facades\\Markdown;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\nuse Illuminate\\Support\\Facades\\Auth;\n\nuse Illuminate\\Support\\Facades\\Notification;\nuse MicroweberPackages\\App\\Http\\Controllers\\AdminController;\nuse MicroweberPackages\\Comment\\Models\\Comment;\nuse MicroweberPackages\\Comment\\Events\\NewComment;\nuse MicroweberPackages\\Comment\\Notifications\\NewCommentNotification;\nuse MicroweberPackages\\User\\Models\\User;\nuse MicroweberPackages\\Utils\\Mail\\MailSender;\n\n\nclass AdminCommentController extends AdminController\n{\n    public function index(Request $request)\n    {\n\n        $contents = $this->getComments($request);\n\n\n        return $this->view('comment::admin.comments.index', ['contents' => $contents]);\n    }\n\n    public function getComments(Request $request)\n    {\n        $contents = Comment::groupBy(['rel_id', 'rel_type']);\n        $filter = $request->all();\n\n        if (!empty($filter)) {\n            $contents = $contents->filter($filter);\n        }\n\n\n        $contents = $contents->paginate($request->get('limit', 30))\n            ->appends($request->except('page'));\n\n        foreach ($contents as $content) {\n            $content->allComments = Comment::where('rel_type', $content['rel_type'])\n                ->where('rel_id', $content['rel_id'])\n                ->get();\n        }\n\n        return $contents;\n    }\n\n    public function saveCommentEdit(Request $request)\n    {\n\n        $is_del = false;\n        $table = 'comments';\n        mw_var('FORCE_SAVE', $table);\n\n        $data = $request->all();\n        if (!isset($data['rel_type']) and isset($data['rel'])) {\n            $data['rel_type'] = $data['rel'];\n        }\n\n        if (isset($data['reply_to_comment_id'])) {\n            $old_comment = $this->get_by_id($data['reply_to_comment_id']);\n            $data['id'] = 0;\n            if (!$old_comment) {\n                return array('error' => 'Error: invalid data');\n            }\n            if (isset($old_comment['rel_type'])) {\n                $data['rel_type'] = $old_comment['rel_type'];\n            }\n            if (isset($old_comment['rel_id'])) {\n                $data['rel_id'] = $old_comment['rel_id'];\n            }\n\n\n        }\n        if (!isset($data['id']) and !isset($data['is_moderated'])) {\n            $data['is_moderated'] = 1;\n        } else {\n            $require_moderation = get_option('require_moderation', 'comments');\n            if ($require_moderation != 'y') {\n                $data['is_moderated'] = 1;\n            }\n        }\n        if (isset($data['action']) and isset($data['id'])) {\n            $action = strtolower($data['action']);\n\n            switch ($action) {\n                case 'publish' :\n                    $data['is_moderated'] = 1;\n                    $data['is_spam'] = 0;\n\n\n                    break;\n                case 'unpublish' :\n                    $data['is_moderated'] = 0;\n\n                    break;\n                case 'spam' :\n                    $data['is_moderated'] = 0;\n                    $data['is_spam'] = 1;\n\n                    $this->__report_for_spam($data['id']);\n\n                    break;\n\n                case 'delete' :\n                    $is_del = true;\n                    $del = mw()->database_manager->delete_by_id($table, $id = intval($data['id']), $field_name = 'id');\n\n                    break;\n\n                default :\n                    break;\n            }\n\n\n        } else {\n            if (!isset($data['id'])) {\n                if (!isset($data['rel_type'])) {\n                    return array('error' => 'Error: invalid data rel_type');\n                }\n                if (!isset($data['rel_id'])) {\n                    return array('error' => 'Error: invalid data rel_id');\n                } else {\n                    if (trim($data['rel_id']) == '') {\n                        return array('error' => 'Error: invalid data rel_id');\n                    }\n                }\n            }\n        }\n\n        if ($is_del) {\n            return (new JsonResource($data))->response();\n        }\n\n        if (!isset($data['comment_body'])) {\n            $data['comment_body'] = '';\n        }\n\n        $comment_body = $data['comment_body'];\n\n        // Claer HTML\n        $comment_body = $this->app->format->clean_html($comment_body);\n\n        // Clear XSS\n        $evil = ['(?<!\\w)on\\w*', 'xmlns', 'formaction', 'xlink:href', 'FSCommand', 'seekSegmentTime'];\n        $comment_body = $this->app->format->clean_xss($comment_body, true, $evil, 'removeEvilAttributes');\n\n        if (!empty($comment_body) and !empty($data['format']) and $data['format'] == 'markdown') {\n            $comment_body = Markdown::convertToHtml($comment_body);\n        }\n\n        $data['comment_body'] = $comment_body;\n        $data['allow_html'] = '1';\n\n        $saved_data_id = mw()->database_manager->save($table, $data);\n\n        $get_comment = get_comments(\"single=1&id=\" . $saved_data_id);\n\n        return (new JsonResource($get_comment))->response();\n\n    }\n\n\n    private function __report_for_spam($comment_id)\n    {\n        if (defined(\"MW_UNIT_TEST\")) {\n            return true;\n        }\n\n        $comment = $this->get_by_id($comment_id);\n        $report_url = 'https://spamchecker.microweberapi.com/';\n\n        if ($comment) {\n            $report = array();\n            $report['site_url'] = site_url();\n            $report['from_url'] = $comment['from_url'];\n            $report['is_spam'] = 1;\n            if (isset($comment['user_ip']) and $comment['user_ip']) {\n                $report['ip'] = trim($comment['user_ip']);\n            }\n            if (isset($comment['comment_email']) and $comment['comment_email']) {\n                $report['email'] = trim($comment['comment_email']);\n            }\n            if (isset($comment['created_by']) and $comment['created_by']) {\n                $report['is_logged'] = true;\n                $report['user_id'] = $comment['created_by'];\n            }\n            if (isset($comment['comment_name']) and $comment['comment_name']) {\n                $report['comment_name'] = $comment['comment_name'];\n            }\n            if (isset($comment['comment_body']) and $comment['comment_body']) {\n                $report['comment_body'] = $comment['comment_body'];\n            }\n            if (isset($comment['comment_website']) and $comment['comment_website']) {\n                $report['comment_website'] = $comment['comment_website'];\n            }\n            if (isset($comment['comment_subject']) and $comment['comment_subject']) {\n                $report['comment_subject'] = $comment['comment_subject'];\n            }\n\n            if (isset($comment['rel_type']) and $comment['rel_type']) {\n                $report['rel_type'] = $comment['rel_type'];\n            }\n            if (isset($comment['rel_id']) and $comment['rel_id']) {\n                $report['rel_id'] = $comment['rel_id'];\n            }\n            $http = new \\MicroweberPackages\\Utils\\Http\\Http();\n            $http->url($report_url);\n            $http->set_timeout(10);\n            return $http->post($report);\n\n        }\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Created by PhpStorm.\n * User: Bojidar\n * Date: 11/10/2020\n * Time: 4:49 PM\n */\n\nnamespace MicroweberPackages\\Comment\\Http\\Controllers\\Admin;\n\nuse GrahamCampbell\\Markdown\\Facades\\Markdown;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\nuse Illuminate\\Support\\Facades\\Auth;\n\nuse Illuminate\\Support\\Facades\\Notification;\nuse MicroweberPackages\\App\\Http\\Controllers\\AdminController;\nuse MicroweberPackages\\Comment\\Models\\Comment;\nuse MicroweberPackages\\Comment\\Events\\NewComment;\nuse MicroweberPackages\\Comment\\Notifications\\NewCommentNotification;\nuse MicroweberPackages\\Helper\\HTMLClean;\nuse MicroweberPackages\\User\\Models\\User;\nuse MicroweberPackages\\Utils\\Mail\\MailSender;\n\nclass AdminCommentController extends AdminController\n{\n    public function index(Request $request)\n    {\n        $contents = $this->getComments($request);\n\n        return $this->view('comment::admin.comments.index', ['contents' => $contents]);\n    }\n\n    public function getComments(Request $request)\n    {\n        $contents = Comment::groupBy(['rel_id', 'rel_type']);\n        $filter = $request->all();\n\n        if (!empty($filter)) {\n            $contents = $contents->filter($filter);\n        }\n\n        $contents = $contents->paginate($request->get('limit', 30))\n            ->appends($request->except('page'));\n\n        foreach ($contents as $content) {\n            $content->allComments = Comment::where('rel_type', $content['rel_type'])\n                ->where('rel_id', $content['rel_id'])\n                ->get();\n        }\n\n        return $contents;\n    }\n\n    public function saveCommentEdit(Request $request)\n    {\n\n        $is_del = false;\n        $table = 'comments';\n        mw_var('FORCE_SAVE', $table);\n\n        $data = $request->all();\n        if (!isset($data['rel_type']) and isset($data['rel'])) {\n            $data['rel_type'] = $data['rel'];\n        }\n\n        if (isset($data['reply_to_comment_id'])) {\n            $old_comment = $this->get_by_id($data['reply_to_comment_id']);\n            $data['id'] = 0;\n            if (!$old_comment) {\n                return array('error' => 'Error: invalid data');\n            }\n            if (isset($old_comment['rel_type'])) {\n                $data['rel_type'] = $old_comment['rel_type'];\n            }\n            if (isset($old_comment['rel_id'])) {\n                $data['rel_id'] = $old_comment['rel_id'];\n            }\n\n\n        }\n        if (!isset($data['id']) and !isset($data['is_moderated'])) {\n            $data['is_moderated'] = 1;\n        } else {\n            $require_moderation = get_option('require_moderation', 'comments');\n            if ($require_moderation != 'y') {\n                $data['is_moderated'] = 1;\n            }\n        }\n        if (isset($data['action']) and isset($data['id'])) {\n            $action = strtolower($data['action']);\n\n            switch ($action) {\n                case 'publish' :\n                    $data['is_moderated'] = 1;\n                    $data['is_spam'] = 0;\n\n\n                    break;\n                case 'unpublish' :\n                    $data['is_moderated'] = 0;\n\n                    break;\n                case 'spam' :\n                    $data['is_moderated'] = 0;\n                    $data['is_spam'] = 1;\n\n                    $this->__report_for_spam($data['id']);\n\n                    break;\n\n                case 'delete' :\n                    $is_del = true;\n                    $del = mw()->database_manager->delete_by_id($table, $id = intval($data['id']), $field_name = 'id');\n\n                    break;\n\n                default :\n                    break;\n            }\n\n\n        } else {\n            if (!isset($data['id'])) {\n                if (!isset($data['rel_type'])) {\n                    return array('error' => 'Error: invalid data rel_type');\n                }\n                if (!isset($data['rel_id'])) {\n                    return array('error' => 'Error: invalid data rel_id');\n                } else {\n                    if (trim($data['rel_id']) == '') {\n                        return array('error' => 'Error: invalid data rel_id');\n                    }\n                }\n            }\n        }\n\n        if ($is_del) {\n            return (new JsonResource($data))->response();\n        }\n\n        if (!isset($data['comment_body'])) {\n            $data['comment_body'] = '';\n        }\n\n        $comment_body = $data['comment_body'];\n\n        $cleanHtml = new HTMLClean();\n        $comment_body = $cleanHtml->onlyTags($comment_body);\n\n        if (!empty($comment_body) and !empty($data['format']) and $data['format'] == 'markdown') {\n            $comment_body = Markdown::convertToHtml($comment_body);\n        }\n\n        $data['comment_body'] = $comment_body;\n        $data['allow_html'] = '1';\n\n        $saved_data_id = mw()->database_manager->save($table, $data);\n\n        $get_comment = get_comments(\"single=1&id=\" . $saved_data_id);\n\n        return (new JsonResource($get_comment))->response();\n\n    }\n\n\n    private function __report_for_spam($comment_id)\n    {\n        if (defined(\"MW_UNIT_TEST\")) {\n            return true;\n        }\n\n        $comment = $this->get_by_id($comment_id);\n        $report_url = 'https://spamchecker.microweberapi.com/';\n\n        if ($comment) {\n            $report = array();\n            $report['site_url'] = site_url();\n            $report['from_url'] = $comment['from_url'];\n            $report['is_spam'] = 1;\n            if (isset($comment['user_ip']) and $comment['user_ip']) {\n                $report['ip'] = trim($comment['user_ip']);\n            }\n            if (isset($comment['comment_email']) and $comment['comment_email']) {\n                $report['email'] = trim($comment['comment_email']);\n            }\n            if (isset($comment['created_by']) and $comment['created_by']) {\n                $report['is_logged'] = true;\n                $report['user_id'] = $comment['created_by'];\n            }\n            if (isset($comment['comment_name']) and $comment['comment_name']) {\n                $report['comment_name'] = $comment['comment_name'];\n            }\n            if (isset($comment['comment_body']) and $comment['comment_body']) {\n                $report['comment_body'] = $comment['comment_body'];\n            }\n            if (isset($comment['comment_website']) and $comment['comment_website']) {\n                $report['comment_website'] = $comment['comment_website'];\n            }\n            if (isset($comment['comment_subject']) and $comment['comment_subject']) {\n                $report['comment_subject'] = $comment['comment_subject'];\n            }\n\n            if (isset($comment['rel_type']) and $comment['rel_type']) {\n                $report['rel_type'] = $comment['rel_type'];\n            }\n            if (isset($comment['rel_id']) and $comment['rel_id']) {\n                $report['rel_id'] = $comment['rel_id'];\n            }\n            $http = new \\MicroweberPackages\\Utils\\Http\\Http();\n            $http->url($report_url);\n            $http->set_timeout(10);\n            return $http->post($report);\n\n        }\n    }\n}\n"], "filenames": ["src/MicroweberPackages/Comment/Http/Controllers/Admin/AdminCommentController.php"], "buggy_code_start_loc": [20], "buggy_code_end_loc": [157], "fixing_code_start_loc": [21], "fixing_code_end_loc": [150], "type": "CWE-94", "message": "Improper Neutralization of Special Elements Used in a Template Engine in GitHub repository microweber/microweber prior to 1.3.", "other": {"cve": {"id": "CVE-2022-0896", "sourceIdentifier": "security@huntr.dev", "published": "2022-03-09T12:15:07.883", "lastModified": "2022-03-11T21:13:37.923", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Neutralization of Special Elements Used in a Template Engine in GitHub repository microweber/microweber prior to 1.3."}, {"lang": "es", "value": "Una Neutralizaci\u00f3n Inapropiada de Elementos Especiales Usados en un Motor de Plantillas en el repositorio de GitHub microweber/microweber versiones anteriores a 1.3"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:P/AC:L/PR:L/UI:R/S:C/C:H/I:L/A:H", "attackVector": "PHYSICAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 0.5, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-1336"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.3", "matchCriteriaId": "CEE7F7A1-F20B-4F8B-A3DE-989A059B7E0E"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/e0224462b3dd6b1f7c6ec1197413afc6019bc3b5", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/113056f1-7a78-4205-9f42-940ad41d8df0", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/e0224462b3dd6b1f7c6ec1197413afc6019bc3b5"}}