{"buggy_code": ["# Security Policy\n\nThe development team and community take all security issues seriously. **Please do not make public any uncovered flaws.**\n\n## Reporting a Vulnerability\n\nThank you for improving the security of our code! Any assistance in removing security flaws will be acknowledged.\n\n**Please report security flaws by emailing the development team directly: security@codeigniter.com**.\n\nThe lead maintainer will acknowledge your email within 48 hours, and will send a more detailed response within 48 hours indicating\nthe next steps in handling your report. After the initial reply to your report, the security team will endeavor to keep you informed of the\nprogress towards a fix and full announcement, and may ask for additional information or guidance.\n\n## Disclosure Policy\n\nWhen the security team receives a security bug report, they will assign it to a primary handler.\nThis person will coordinate the fix and release process, involving the following steps:\n\n- Confirm the problem and determine the affected versions.\n- Audit code to find any potential similar problems.\n- Prepare fixes for all releases still under maintenance. These fixes will be released as fast as possible.\n\n## Comments on this Policy\n\nIf you have suggestions on how this process could be improved please submit a Pull Request.\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nuse CodeIgniter\\Cache\\CacheInterface;\nuse CodeIgniter\\Config\\Factories;\nuse CodeIgniter\\Cookie\\Cookie;\nuse CodeIgniter\\Cookie\\CookieStore;\nuse CodeIgniter\\Cookie\\Exceptions\\CookieException;\nuse CodeIgniter\\Database\\BaseConnection;\nuse CodeIgniter\\Database\\ConnectionInterface;\nuse CodeIgniter\\Debug\\Timer;\nuse CodeIgniter\\Files\\Exceptions\\FileNotFoundException;\nuse CodeIgniter\\HTTP\\Exceptions\\HTTPException;\nuse CodeIgniter\\HTTP\\RedirectResponse;\nuse CodeIgniter\\HTTP\\RequestInterface;\nuse CodeIgniter\\HTTP\\ResponseInterface;\nuse CodeIgniter\\HTTP\\URI;\nuse CodeIgniter\\Model;\nuse CodeIgniter\\Session\\Session;\nuse CodeIgniter\\Test\\TestLogger;\nuse Config\\App;\nuse Config\\Database;\nuse Config\\Logger;\nuse Config\\Services;\nuse Config\\View;\nuse Laminas\\Escaper\\Escaper;\n\n// Services Convenience Functions\n\nif (! function_exists('app_timezone')) {\n    /**\n     * Returns the timezone the application has been set to display\n     * dates in. This might be different than the timezone set\n     * at the server level, as you often want to stores dates in UTC\n     * and convert them on the fly for the user.\n     */\n    function app_timezone(): string\n    {\n        $config = config(App::class);\n\n        return $config->appTimezone;\n    }\n}\n\nif (! function_exists('cache')) {\n    /**\n     * A convenience method that provides access to the Cache\n     * object. If no parameter is provided, will return the object,\n     * otherwise, will attempt to return the cached value.\n     *\n     * Examples:\n     *    cache()->save('foo', 'bar');\n     *    $foo = cache('bar');\n     *\n     * @return CacheInterface|mixed\n     */\n    function cache(?string $key = null)\n    {\n        $cache = Services::cache();\n\n        // No params - return cache object\n        if ($key === null) {\n            return $cache;\n        }\n\n        // Still here? Retrieve the value.\n        return $cache->get($key);\n    }\n}\n\nif (! function_exists('clean_path')) {\n    /**\n     * A convenience method to clean paths for\n     * a nicer looking output. Useful for exception\n     * handling, error logging, etc.\n     */\n    function clean_path(string $path): string\n    {\n        // Resolve relative paths\n        $path = realpath($path) ?: $path;\n\n        switch (true) {\n            case strpos($path, APPPATH) === 0:\n                return 'APPPATH' . DIRECTORY_SEPARATOR . substr($path, strlen(APPPATH));\n\n            case strpos($path, SYSTEMPATH) === 0:\n                return 'SYSTEMPATH' . DIRECTORY_SEPARATOR . substr($path, strlen(SYSTEMPATH));\n\n            case strpos($path, FCPATH) === 0:\n                return 'FCPATH' . DIRECTORY_SEPARATOR . substr($path, strlen(FCPATH));\n\n            case defined('VENDORPATH') && strpos($path, VENDORPATH) === 0:\n                return 'VENDORPATH' . DIRECTORY_SEPARATOR . substr($path, strlen(VENDORPATH));\n\n            case strpos($path, ROOTPATH) === 0:\n                return 'ROOTPATH' . DIRECTORY_SEPARATOR . substr($path, strlen(ROOTPATH));\n\n            default:\n                return $path;\n        }\n    }\n}\n\nif (! function_exists('command')) {\n    /**\n     * Runs a single command.\n     * Input expected in a single string as would\n     * be used on the command line itself:\n     *\n     *  > command('migrate:create SomeMigration');\n     *\n     * @return false|string\n     */\n    function command(string $command)\n    {\n        $runner      = service('commands');\n        $regexString = '([^\\s]+?)(?:\\s|(?<!\\\\\\\\)\"|(?<!\\\\\\\\)\\'|$)';\n        $regexQuoted = '(?:\"([^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*)\"|\\'([^\\'\\\\\\\\]*(?:\\\\\\\\.[^\\'\\\\\\\\]*)*)\\')';\n\n        $args   = [];\n        $length = strlen($command);\n        $cursor = 0;\n\n        /**\n         * Adopted from Symfony's `StringInput::tokenize()` with few changes.\n         *\n         * @see https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Input/StringInput.php\n         */\n        while ($cursor < $length) {\n            if (preg_match('/\\s+/A', $command, $match, 0, $cursor)) {\n                // nothing to do\n            } elseif (preg_match('/' . $regexQuoted . '/A', $command, $match, 0, $cursor)) {\n                $args[] = stripcslashes(substr($match[0], 1, strlen($match[0]) - 2));\n            } elseif (preg_match('/' . $regexString . '/A', $command, $match, 0, $cursor)) {\n                $args[] = stripcslashes($match[1]);\n            } else {\n                // @codeCoverageIgnoreStart\n                throw new InvalidArgumentException(sprintf('Unable to parse input near \"... %s ...\".', substr($command, $cursor, 10)));\n                // @codeCoverageIgnoreEnd\n            }\n\n            $cursor += strlen($match[0]);\n        }\n\n        $command     = array_shift($args);\n        $params      = [];\n        $optionValue = false;\n\n        foreach ($args as $i => $arg) {\n            if (mb_strpos($arg, '-') !== 0) {\n                if ($optionValue) {\n                    // if this was an option value, it was already\n                    // included in the previous iteration\n                    $optionValue = false;\n                } else {\n                    // add to segments if not starting with '-'\n                    // and not an option value\n                    $params[] = $arg;\n                }\n\n                continue;\n            }\n\n            $arg   = ltrim($arg, '-');\n            $value = null;\n\n            if (isset($args[$i + 1]) && mb_strpos($args[$i + 1], '-') !== 0) {\n                $value       = $args[$i + 1];\n                $optionValue = true;\n            }\n\n            $params[$arg] = $value;\n        }\n\n        ob_start();\n        $runner->run($command, $params);\n\n        return ob_get_clean();\n    }\n}\n\nif (! function_exists('config')) {\n    /**\n     * More simple way of getting config instances from Factories\n     *\n     * @return mixed\n     */\n    function config(string $name, bool $getShared = true)\n    {\n        return Factories::config($name, ['getShared' => $getShared]);\n    }\n}\n\nif (! function_exists('cookie')) {\n    /**\n     * Simpler way to create a new Cookie instance.\n     *\n     * @param string $name    Name of the cookie\n     * @param string $value   Value of the cookie\n     * @param array  $options Array of options to be passed to the cookie\n     *\n     * @throws CookieException\n     */\n    function cookie(string $name, string $value = '', array $options = []): Cookie\n    {\n        return new Cookie($name, $value, $options);\n    }\n}\n\nif (! function_exists('cookies')) {\n    /**\n     * Fetches the global `CookieStore` instance held by `Response`.\n     *\n     * @param Cookie[] $cookies   If `getGlobal` is false, this is passed to CookieStore's constructor\n     * @param bool     $getGlobal If false, creates a new instance of CookieStore\n     */\n    function cookies(array $cookies = [], bool $getGlobal = true): CookieStore\n    {\n        if ($getGlobal) {\n            return Services::response()->getCookieStore();\n        }\n\n        return new CookieStore($cookies);\n    }\n}\n\nif (! function_exists('csrf_token')) {\n    /**\n     * Returns the CSRF token name.\n     * Can be used in Views when building hidden inputs manually,\n     * or used in javascript vars when using APIs.\n     */\n    function csrf_token(): string\n    {\n        return Services::security()->getTokenName();\n    }\n}\n\nif (! function_exists('csrf_header')) {\n    /**\n     * Returns the CSRF header name.\n     * Can be used in Views by adding it to the meta tag\n     * or used in javascript to define a header name when using APIs.\n     */\n    function csrf_header(): string\n    {\n        return Services::security()->getHeaderName();\n    }\n}\n\nif (! function_exists('csrf_hash')) {\n    /**\n     * Returns the current hash value for the CSRF protection.\n     * Can be used in Views when building hidden inputs manually,\n     * or used in javascript vars for API usage.\n     */\n    function csrf_hash(): string\n    {\n        return Services::security()->getHash();\n    }\n}\n\nif (! function_exists('csrf_field')) {\n    /**\n     * Generates a hidden input field for use within manually generated forms.\n     */\n    function csrf_field(?string $id = null): string\n    {\n        return '<input type=\"hidden\"' . (! empty($id) ? ' id=\"' . esc($id, 'attr') . '\"' : '') . ' name=\"' . csrf_token() . '\" value=\"' . csrf_hash() . '\" />';\n    }\n}\n\nif (! function_exists('csrf_meta')) {\n    /**\n     * Generates a meta tag for use within javascript calls.\n     */\n    function csrf_meta(?string $id = null): string\n    {\n        return '<meta' . (! empty($id) ? ' id=\"' . esc($id, 'attr') . '\"' : '') . ' name=\"' . csrf_header() . '\" content=\"' . csrf_hash() . '\" />';\n    }\n}\n\nif (! function_exists('db_connect')) {\n    /**\n     * Grabs a database connection and returns it to the user.\n     *\n     * This is a convenience wrapper for \\Config\\Database::connect()\n     * and supports the same parameters. Namely:\n     *\n     * When passing in $db, you may pass any of the following to connect:\n     * - group name\n     * - existing connection instance\n     * - array of database configuration values\n     *\n     * If $getShared === false then a new connection instance will be provided,\n     * otherwise it will all calls will return the same instance.\n     *\n     * @param array|ConnectionInterface|string|null $db\n     *\n     * @return BaseConnection\n     */\n    function db_connect($db = null, bool $getShared = true)\n    {\n        return Database::connect($db, $getShared);\n    }\n}\n\nif (! function_exists('dd')) {\n    /**\n     * Prints a Kint debug report and exits.\n     *\n     * @param array ...$vars\n     *\n     * @codeCoverageIgnore Can't be tested ... exits\n     */\n    function dd(...$vars)\n    {\n        // @codeCoverageIgnoreStart\n        Kint::$aliases[] = 'dd';\n        Kint::dump(...$vars);\n\n        exit;\n        // @codeCoverageIgnoreEnd\n    }\n}\n\nif (! function_exists('env')) {\n    /**\n     * Allows user to retrieve values from the environment\n     * variables that have been set. Especially useful for\n     * retrieving values set from the .env file for\n     * use in config files.\n     *\n     * @param string|null $default\n     *\n     * @return mixed\n     */\n    function env(string $key, $default = null)\n    {\n        $value = $_ENV[$key] ?? $_SERVER[$key] ?? getenv($key);\n\n        // Not found? Return the default value\n        if ($value === false) {\n            return $default;\n        }\n\n        // Handle any boolean values\n        switch (strtolower($value)) {\n            case 'true':\n                return true;\n\n            case 'false':\n                return false;\n\n            case 'empty':\n                return '';\n\n            case 'null':\n                return null;\n        }\n\n        return $value;\n    }\n}\n\nif (! function_exists('esc')) {\n    /**\n     * Performs simple auto-escaping of data for security reasons.\n     * Might consider making this more complex at a later date.\n     *\n     * If $data is a string, then it simply escapes and returns it.\n     * If $data is an array, then it loops over it, escaping each\n     * 'value' of the key/value pairs.\n     *\n     * Valid context values: html, js, css, url, attr, raw\n     *\n     * @param array|string $data\n     * @param string       $encoding\n     *\n     * @throws InvalidArgumentException\n     *\n     * @return array|string\n     */\n    function esc($data, string $context = 'html', ?string $encoding = null)\n    {\n        if (is_array($data)) {\n            foreach ($data as &$value) {\n                $value = esc($value, $context);\n            }\n        }\n\n        if (is_string($data)) {\n            $context = strtolower($context);\n\n            // Provide a way to NOT escape data since\n            // this could be called automatically by\n            // the View library.\n            if (empty($context) || $context === 'raw') {\n                return $data;\n            }\n\n            if (! in_array($context, ['html', 'js', 'css', 'url', 'attr'], true)) {\n                throw new InvalidArgumentException('Invalid escape context provided.');\n            }\n\n            $method = $context === 'attr' ? 'escapeHtmlAttr' : 'escape' . ucfirst($context);\n\n            static $escaper;\n            if (! $escaper) {\n                $escaper = new Escaper($encoding);\n            }\n\n            if ($encoding && $escaper->getEncoding() !== $encoding) {\n                $escaper = new Escaper($encoding);\n            }\n\n            $data = $escaper->{$method}($data);\n        }\n\n        return $data;\n    }\n}\n\nif (! function_exists('force_https')) {\n    /**\n     * Used to force a page to be accessed in via HTTPS.\n     * Uses a standard redirect, plus will set the HSTS header\n     * for modern browsers that support, which gives best\n     * protection against man-in-the-middle attacks.\n     *\n     * @see https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\n     *\n     * @param int               $duration How long should the SSL header be set for? (in seconds)\n     *                                    Defaults to 1 year.\n     * @param RequestInterface  $request\n     * @param ResponseInterface $response\n     *\n     * @throws HTTPException\n     */\n    function force_https(int $duration = 31536000, ?RequestInterface $request = null, ?ResponseInterface $response = null)\n    {\n        if ($request === null) {\n            $request = Services::request(null, true);\n        }\n        if ($response === null) {\n            $response = Services::response(null, true);\n        }\n\n        if ((ENVIRONMENT !== 'testing' && (is_cli() || $request->isSecure())) || (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'test')) {\n            // @codeCoverageIgnoreStart\n            return;\n            // @codeCoverageIgnoreEnd\n        }\n\n        // If the session status is active, we should regenerate\n        // the session ID for safety sake.\n        if (ENVIRONMENT !== 'testing' && session_status() === PHP_SESSION_ACTIVE) {\n            // @codeCoverageIgnoreStart\n            Services::session(null, true)\n                ->regenerate();\n            // @codeCoverageIgnoreEnd\n        }\n\n        $baseURL = config(App::class)->baseURL;\n\n        if (strpos($baseURL, 'https://') === 0) {\n            $baseURL = substr($baseURL, strlen('https://'));\n        } elseif (strpos($baseURL, 'http://') === 0) {\n            $baseURL = substr($baseURL, strlen('http://'));\n        }\n\n        $uri = URI::createURIString(\n            'https',\n            $baseURL,\n            $request->getUri()->getPath(), // Absolute URIs should use a \"/\" for an empty path\n            $request->getUri()->getQuery(),\n            $request->getUri()->getFragment()\n        );\n\n        // Set an HSTS header\n        $response->setHeader('Strict-Transport-Security', 'max-age=' . $duration);\n        $response->redirect($uri);\n        $response->sendHeaders();\n\n        if (ENVIRONMENT !== 'testing') {\n            // @codeCoverageIgnoreStart\n            exit();\n            // @codeCoverageIgnoreEnd\n        }\n    }\n}\n\nif (! function_exists('function_usable')) {\n    /**\n     * Function usable\n     *\n     * Executes a function_exists() check, and if the Suhosin PHP\n     * extension is loaded - checks whether the function that is\n     * checked might be disabled in there as well.\n     *\n     * This is useful as function_exists() will return FALSE for\n     * functions disabled via the *disable_functions* php.ini\n     * setting, but not for *suhosin.executor.func.blacklist* and\n     * *suhosin.executor.disable_eval*. These settings will just\n     * terminate script execution if a disabled function is executed.\n     *\n     * The above described behavior turned out to be a bug in Suhosin,\n     * but even though a fix was committed for 0.9.34 on 2012-02-12,\n     * that version is yet to be released. This function will therefore\n     * be just temporary, but would probably be kept for a few years.\n     *\n     * @see   http://www.hardened-php.net/suhosin/\n     *\n     * @param string $functionName Function to check for\n     *\n     * @return bool TRUE if the function exists and is safe to call,\n     *              FALSE otherwise.\n     *\n     * @codeCoverageIgnore This is too exotic\n     */\n    function function_usable(string $functionName): bool\n    {\n        static $_suhosin_func_blacklist;\n\n        if (function_exists($functionName)) {\n            if (! isset($_suhosin_func_blacklist)) {\n                $_suhosin_func_blacklist = extension_loaded('suhosin') ? explode(',', trim(ini_get('suhosin.executor.func.blacklist'))) : [];\n            }\n\n            return ! in_array($functionName, $_suhosin_func_blacklist, true);\n        }\n\n        return false;\n    }\n}\n\nif (! function_exists('helper')) {\n    /**\n     * Loads a helper file into memory. Supports namespaced helpers,\n     * both in and out of the 'helpers' directory of a namespaced directory.\n     *\n     * Will load ALL helpers of the matching name, in the following order:\n     *   1. app/Helpers\n     *   2. {namespace}/Helpers\n     *   3. system/Helpers\n     *\n     * @param array|string $filenames\n     *\n     * @throws FileNotFoundException\n     */\n    function helper($filenames)\n    {\n        static $loaded = [];\n\n        $loader = Services::locator();\n\n        if (! is_array($filenames)) {\n            $filenames = [$filenames];\n        }\n\n        // Store a list of all files to include...\n        $includes = [];\n\n        foreach ($filenames as $filename) {\n            // Store our system and application helper\n            // versions so that we can control the load ordering.\n            $systemHelper  = null;\n            $appHelper     = null;\n            $localIncludes = [];\n\n            if (strpos($filename, '_helper') === false) {\n                $filename .= '_helper';\n            }\n\n            // Check if this helper has already been loaded\n            if (in_array($filename, $loaded, true)) {\n                continue;\n            }\n\n            // If the file is namespaced, we'll just grab that\n            // file and not search for any others\n            if (strpos($filename, '\\\\') !== false) {\n                $path = $loader->locateFile($filename, 'Helpers');\n\n                if (empty($path)) {\n                    throw FileNotFoundException::forFileNotFound($filename);\n                }\n\n                $includes[] = $path;\n                $loaded[]   = $filename;\n            } else {\n                // No namespaces, so search in all available locations\n                $paths = $loader->search('Helpers/' . $filename);\n\n                foreach ($paths as $path) {\n                    if (strpos($path, APPPATH . 'Helpers' . DIRECTORY_SEPARATOR) === 0) {\n                        $appHelper = $path;\n                    } elseif (strpos($path, SYSTEMPATH . 'Helpers' . DIRECTORY_SEPARATOR) === 0) {\n                        $systemHelper = $path;\n                    } else {\n                        $localIncludes[] = $path;\n                        $loaded[]        = $filename;\n                    }\n                }\n\n                // App-level helpers should override all others\n                if (! empty($appHelper)) {\n                    $includes[] = $appHelper;\n                    $loaded[]   = $filename;\n                }\n\n                // All namespaced files get added in next\n                $includes = array_merge($includes, $localIncludes);\n\n                // And the system default one should be added in last.\n                if (! empty($systemHelper)) {\n                    $includes[] = $systemHelper;\n                    $loaded[]   = $filename;\n                }\n            }\n        }\n\n        // Now actually include all of the files\n        foreach ($includes as $path) {\n            include_once $path;\n        }\n    }\n}\n\nif (! function_exists('is_cli')) {\n    /**\n     * Check if PHP was invoked from the command line.\n     *\n     * @codeCoverageIgnore Cannot be tested fully as PHPUnit always run in php-cli\n     */\n    function is_cli(): bool\n    {\n        if (in_array(PHP_SAPI, ['cli', 'phpdbg'], true)) {\n            return true;\n        }\n\n        // PHP_SAPI could be 'cgi-fcgi', 'fpm-fcgi'.\n        // See https://github.com/codeigniter4/CodeIgniter4/pull/5393\n        return ! isset($_SERVER['REMOTE_ADDR']) && ! isset($_SERVER['REQUEST_METHOD']);\n    }\n}\n\nif (! function_exists('is_really_writable')) {\n    /**\n     * Tests for file writability\n     *\n     * is_writable() returns TRUE on Windows servers when you really can't write to\n     * the file, based on the read-only attribute. is_writable() is also unreliable\n     * on Unix servers if safe_mode is on.\n     *\n     * @see https://bugs.php.net/bug.php?id=54709\n     *\n     * @throws Exception\n     *\n     * @codeCoverageIgnore Not practical to test, as travis runs on linux\n     */\n    function is_really_writable(string $file): bool\n    {\n        // If we're on a Unix server we call is_writable\n        if (DIRECTORY_SEPARATOR === '/') {\n            return is_writable($file);\n        }\n\n        /* For Windows servers and safe_mode \"on\" installations we'll actually\n         * write a file then read it. Bah...\n         */\n        if (is_dir($file)) {\n            $file = rtrim($file, '/') . '/' . bin2hex(random_bytes(16));\n            if (($fp = @fopen($file, 'ab')) === false) {\n                return false;\n            }\n\n            fclose($fp);\n            @chmod($file, 0777);\n            @unlink($file);\n\n            return true;\n        }\n\n        if (! is_file($file) || ($fp = @fopen($file, 'ab')) === false) {\n            return false;\n        }\n\n        fclose($fp);\n\n        return true;\n    }\n}\n\nif (! function_exists('lang')) {\n    /**\n     * A convenience method to translate a string or array of them and format\n     * the result with the intl extension's MessageFormatter.\n     *\n     * @return string\n     */\n    function lang(string $line, array $args = [], ?string $locale = null)\n    {\n        $language = Services::language();\n\n        // Get active locale\n        $activeLocale = $language->getLocale();\n\n        if ($locale && $locale !== $activeLocale) {\n            $language->setLocale($locale);\n        }\n\n        $line = $language->getLine($line, $args);\n\n        if ($locale && $locale !== $activeLocale) {\n            // Reset to active locale\n            $language->setLocale($activeLocale);\n        }\n\n        return $line;\n    }\n}\n\nif (! function_exists('log_message')) {\n    /**\n     * A convenience/compatibility method for logging events through\n     * the Log system.\n     *\n     * Allowed log levels are:\n     *  - emergency\n     *  - alert\n     *  - critical\n     *  - error\n     *  - warning\n     *  - notice\n     *  - info\n     *  - debug\n     *\n     * @return mixed\n     */\n    function log_message(string $level, string $message, array $context = [])\n    {\n        // When running tests, we want to always ensure that the\n        // TestLogger is running, which provides utilities for\n        // for asserting that logs were called in the test code.\n        if (ENVIRONMENT === 'testing') {\n            $logger = new TestLogger(new Logger());\n\n            return $logger->log($level, $message, $context);\n        }\n\n        // @codeCoverageIgnoreStart\n        return Services::logger(true)\n            ->log($level, $message, $context);\n        // @codeCoverageIgnoreEnd\n    }\n}\n\nif (! function_exists('model')) {\n    /**\n     * More simple way of getting model instances from Factories\n     *\n     * @template T of Model\n     *\n     * @param class-string<T> $name\n     *\n     * @return T\n     * @phpstan-return Model\n     */\n    function model(string $name, bool $getShared = true, ?ConnectionInterface &$conn = null)\n    {\n        return Factories::models($name, ['getShared' => $getShared], $conn);\n    }\n}\n\nif (! function_exists('old')) {\n    /**\n     * Provides access to \"old input\" that was set in the session\n     * during a redirect()->withInput().\n     *\n     * @param null        $default\n     * @param bool|string $escape\n     *\n     * @return mixed|null\n     */\n    function old(string $key, $default = null, $escape = 'html')\n    {\n        // Ensure the session is loaded\n        if (session_status() === PHP_SESSION_NONE && ENVIRONMENT !== 'testing') {\n            // @codeCoverageIgnoreStart\n            session();\n            // @codeCoverageIgnoreEnd\n        }\n\n        $request = Services::request();\n\n        $value = $request->getOldInput($key);\n\n        // Return the default value if nothing\n        // found in the old input.\n        if ($value === null) {\n            return $default;\n        }\n\n        // If the result was serialized array or string, then unserialize it for use...\n        if (is_string($value) && (strpos($value, 'a:') === 0 || strpos($value, 's:') === 0)) {\n            $value = unserialize($value);\n        }\n\n        return $escape === false ? $value : esc($value, $escape);\n    }\n}\n\nif (! function_exists('redirect')) {\n    /**\n     * Convenience method that works with the current global $request and\n     * $router instances to redirect using named/reverse-routed routes\n     * to determine the URL to go to.\n     *\n     * If more control is needed, you must use $response->redirect explicitly.\n     *\n     * @param string $route\n     */\n    function redirect(?string $route = null): RedirectResponse\n    {\n        $response = Services::redirectresponse(null, true);\n\n        if (! empty($route)) {\n            return $response->route($route);\n        }\n\n        return $response;\n    }\n}\n\nif (! function_exists('remove_invisible_characters')) {\n    /**\n     * Remove Invisible Characters\n     *\n     * This prevents sandwiching null characters\n     * between ascii characters, like Java\\0script.\n     */\n    function remove_invisible_characters(string $str, bool $urlEncoded = true): string\n    {\n        $nonDisplayables = [];\n\n        // every control character except newline (dec 10),\n        // carriage return (dec 13) and horizontal tab (dec 09)\n        if ($urlEncoded) {\n            $nonDisplayables[] = '/%0[0-8bcef]/';  // url encoded 00-08, 11, 12, 14, 15\n            $nonDisplayables[] = '/%1[0-9a-f]/';   // url encoded 16-31\n        }\n\n        $nonDisplayables[] = '/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]+/S';   // 00-08, 11, 12, 14-31, 127\n\n        do {\n            $str = preg_replace($nonDisplayables, '', $str, -1, $count);\n        } while ($count);\n\n        return $str;\n    }\n}\n\nif (! function_exists('route_to')) {\n    /**\n     * Given a controller/method string and any params,\n     * will attempt to build the relative URL to the\n     * matching route.\n     *\n     * NOTE: This requires the controller/method to\n     * have a route defined in the routes Config file.\n     *\n     * @param mixed ...$params\n     *\n     * @return false|string\n     */\n    function route_to(string $method, ...$params)\n    {\n        return Services::routes()->reverseRoute($method, ...$params);\n    }\n}\n\nif (! function_exists('session')) {\n    /**\n     * A convenience method for accessing the session instance,\n     * or an item that has been set in the session.\n     *\n     * Examples:\n     *    session()->set('foo', 'bar');\n     *    $foo = session('bar');\n     *\n     * @param string $val\n     *\n     * @return mixed|Session|null\n     */\n    function session(?string $val = null)\n    {\n        $session = Services::session();\n\n        // Returning a single item?\n        if (is_string($val)) {\n            return $session->get($val);\n        }\n\n        return $session;\n    }\n}\n\nif (! function_exists('service')) {\n    /**\n     * Allows cleaner access to the Services Config file.\n     * Always returns a SHARED instance of the class, so\n     * calling the function multiple times should always\n     * return the same instance.\n     *\n     * These are equal:\n     *  - $timer = service('timer')\n     *  - $timer = \\CodeIgniter\\Config\\Services::timer();\n     *\n     * @param mixed ...$params\n     *\n     * @return mixed\n     */\n    function service(string $name, ...$params)\n    {\n        return Services::$name(...$params);\n    }\n}\n\nif (! function_exists('single_service')) {\n    /**\n     * Always returns a new instance of the class.\n     *\n     * @param mixed ...$params\n     *\n     * @return mixed\n     */\n    function single_service(string $name, ...$params)\n    {\n        $service = Services::serviceExists($name);\n\n        if ($service === null) {\n            // The service is not defined anywhere so just return.\n            return null;\n        }\n\n        $method = new ReflectionMethod($service, $name);\n        $count  = $method->getNumberOfParameters();\n        $mParam = $method->getParameters();\n        $params = $params ?? [];\n\n        if ($count === 1) {\n            // This service needs only one argument, which is the shared\n            // instance flag, so let's wrap up and pass false here.\n            return $service::$name(false);\n        }\n\n        // Fill in the params with the defaults, but stop before the last\n        for ($startIndex = count($params); $startIndex <= $count - 2; $startIndex++) {\n            $params[$startIndex] = $mParam[$startIndex]->getDefaultValue();\n        }\n\n        // Ensure the last argument will not create a shared instance\n        $params[$count - 1] = false;\n\n        return $service::$name(...$params);\n    }\n}\n\nif (! function_exists('slash_item')) {\n    // Unlike CI3, this function is placed here because\n    // it's not a config, or part of a config.\n    /**\n     * Fetch a config file item with slash appended (if not empty)\n     *\n     * @param string $item Config item name\n     *\n     * @return string|null The configuration item or NULL if\n     *                     the item doesn't exist\n     */\n    function slash_item(string $item): ?string\n    {\n        $config     = config(App::class);\n        $configItem = $config->{$item};\n\n        if (! isset($configItem) || empty(trim($configItem))) {\n            return $configItem;\n        }\n\n        return rtrim($configItem, '/') . '/';\n    }\n}\n\nif (! function_exists('stringify_attributes')) {\n    /**\n     * Stringify attributes for use in HTML tags.\n     *\n     * Helper function used to convert a string, array, or object\n     * of attributes to a string.\n     *\n     * @param mixed $attributes string, array, object\n     */\n    function stringify_attributes($attributes, bool $js = false): string\n    {\n        $atts = '';\n\n        if (empty($attributes)) {\n            return $atts;\n        }\n\n        if (is_string($attributes)) {\n            return ' ' . $attributes;\n        }\n\n        $attributes = (array) $attributes;\n\n        foreach ($attributes as $key => $val) {\n            $atts .= ($js) ? $key . '=' . esc($val, 'js') . ',' : ' ' . $key . '=\"' . esc($val) . '\"';\n        }\n\n        return rtrim($atts, ',');\n    }\n}\n\nif (! function_exists('timer')) {\n    /**\n     * A convenience method for working with the timer.\n     * If no parameter is passed, it will return the timer instance,\n     * otherwise will start or stop the timer intelligently.\n     *\n     * @return mixed|Timer\n     */\n    function timer(?string $name = null)\n    {\n        $timer = Services::timer();\n\n        if (empty($name)) {\n            return $timer;\n        }\n\n        if ($timer->has($name)) {\n            return $timer->stop($name);\n        }\n\n        return $timer->start($name);\n    }\n}\n\nif (! function_exists('trace')) {\n    /**\n     * Provides a backtrace to the current execution point, from Kint.\n     */\n    function trace()\n    {\n        Kint::$aliases[] = 'trace';\n        Kint::trace();\n    }\n}\n\nif (! function_exists('view')) {\n    /**\n     * Grabs the current RendererInterface-compatible class\n     * and tells it to render the specified view. Simply provides\n     * a convenience method that can be used in Controllers,\n     * libraries, and routed closures.\n     *\n     * NOTE: Does not provide any escaping of the data, so that must\n     * all be handled manually by the developer.\n     *\n     * @param array $options Unused - reserved for third-party extensions.\n     */\n    function view(string $name, array $data = [], array $options = []): string\n    {\n        /**\n         * @var CodeIgniter\\View\\View $renderer\n         */\n        $renderer = Services::renderer();\n\n        $saveData = config(View::class)->saveData;\n\n        if (array_key_exists('saveData', $options)) {\n            $saveData = (bool) $options['saveData'];\n            unset($options['saveData']);\n        }\n\n        return $renderer->setData($data, 'raw')->render($name, $options, $saveData);\n    }\n}\n\nif (! function_exists('view_cell')) {\n    /**\n     * View cells are used within views to insert HTML chunks that are managed\n     * by other classes.\n     *\n     * @param null $params\n     *\n     * @throws ReflectionException\n     */\n    function view_cell(string $library, $params = null, int $ttl = 0, ?string $cacheName = null): string\n    {\n        return Services::viewcell()\n            ->render($library, $params, $ttl, $cacheName);\n    }\n}\n\n/**\n * These helpers come from Laravel so will not be\n * re-tested and can be ignored safely.\n *\n * @see https://github.com/laravel/framework/blob/8.x/src/Illuminate/Support/helpers.php\n */\nif (! function_exists('class_basename')) {\n    /**\n     * Get the class \"basename\" of the given object / class.\n     *\n     * @param object|string $class\n     *\n     * @return string\n     *\n     * @codeCoverageIgnore\n     */\n    function class_basename($class)\n    {\n        $class = is_object($class) ? get_class($class) : $class;\n\n        return basename(str_replace('\\\\', '/', $class));\n    }\n}\n\nif (! function_exists('class_uses_recursive')) {\n    /**\n     * Returns all traits used by a class, its parent classes and trait of their traits.\n     *\n     * @param object|string $class\n     *\n     * @return array\n     *\n     * @codeCoverageIgnore\n     */\n    function class_uses_recursive($class)\n    {\n        if (is_object($class)) {\n            $class = get_class($class);\n        }\n\n        $results = [];\n\n        foreach (array_reverse(class_parents($class)) + [$class => $class] as $class) {\n            $results += trait_uses_recursive($class);\n        }\n\n        return array_unique($results);\n    }\n}\n\nif (! function_exists('trait_uses_recursive')) {\n    /**\n     * Returns all traits used by a trait and its traits.\n     *\n     * @param string $trait\n     *\n     * @return array\n     *\n     * @codeCoverageIgnore\n     */\n    function trait_uses_recursive($trait)\n    {\n        $traits = class_uses($trait) ?: [];\n\n        foreach ($traits as $trait) {\n            $traits += trait_uses_recursive($trait);\n        }\n\n        return $traits;\n    }\n}\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter;\n\nuse CodeIgniter\\Config\\BaseService;\nuse CodeIgniter\\Config\\Services;\nuse CodeIgniter\\HTTP\\RedirectResponse;\nuse CodeIgniter\\HTTP\\Response;\nuse CodeIgniter\\HTTP\\URI;\nuse CodeIgniter\\HTTP\\UserAgent;\nuse CodeIgniter\\Router\\RouteCollection;\nuse CodeIgniter\\Session\\Handlers\\FileHandler;\nuse CodeIgniter\\Session\\Session;\nuse CodeIgniter\\Test\\CIUnitTestCase;\nuse CodeIgniter\\Test\\Mock\\MockIncomingRequest;\nuse CodeIgniter\\Test\\Mock\\MockSecurity;\nuse CodeIgniter\\Test\\Mock\\MockSession;\nuse CodeIgniter\\Test\\TestLogger;\nuse Config\\App;\nuse Config\\Logger;\nuse Config\\Modules;\nuse InvalidArgumentException;\nuse Kint;\nuse stdClass;\nuse Tests\\Support\\Models\\JobModel;\n\n/**\n * @backupGlobals enabled\n *\n * @internal\n */\nfinal class CommonFunctionsTest extends CIUnitTestCase\n{\n    protected function setUp(): void\n    {\n        unset($_ENV['foo'], $_SERVER['foo']);\n        Services::reset();\n\n        parent::setUp();\n    }\n\n    public function testStringifyAttributes()\n    {\n        $this->assertSame(' class=\"foo\" id=\"bar\"', stringify_attributes(['class' => 'foo', 'id' => 'bar']));\n\n        $atts        = new stdClass();\n        $atts->class = 'foo';\n        $atts->id    = 'bar';\n        $this->assertSame(' class=\"foo\" id=\"bar\"', stringify_attributes($atts));\n\n        $atts = new stdClass();\n        $this->assertSame('', stringify_attributes($atts));\n\n        $this->assertSame(' class=\"foo\" id=\"bar\"', stringify_attributes('class=\"foo\" id=\"bar\"'));\n\n        $this->assertSame('', stringify_attributes([]));\n    }\n\n    public function testStringifyJsAttributes()\n    {\n        $this->assertSame('width=800,height=600', stringify_attributes(['width' => '800', 'height' => '600'], true));\n\n        $atts         = new stdClass();\n        $atts->width  = 800;\n        $atts->height = 600;\n        $this->assertSame('width=800,height=600', stringify_attributes($atts, true));\n    }\n\n    public function testEnvReturnsDefault()\n    {\n        $this->assertSame('baz', env('foo', 'baz'));\n    }\n\n    public function testEnvGetsFromSERVER()\n    {\n        $_SERVER['foo'] = 'bar';\n\n        $this->assertSame('bar', env('foo', 'baz'));\n    }\n\n    public function testEnvGetsFromENV()\n    {\n        $_ENV['foo'] = 'bar';\n\n        $this->assertSame('bar', env('foo', 'baz'));\n    }\n\n    public function testEnvBooleans()\n    {\n        $_ENV['p1'] = 'true';\n        $_ENV['p2'] = 'false';\n        $_ENV['p3'] = 'empty';\n        $_ENV['p4'] = 'null';\n\n        $this->assertTrue(env('p1'));\n        $this->assertFalse(env('p2'));\n        $this->assertEmpty(env('p3'));\n        $this->assertNull(env('p4'));\n    }\n\n    public function testRedirectReturnsRedirectResponse()\n    {\n        $_SERVER['REQUEST_METHOD'] = 'GET';\n\n        $response = $this->createMock(Response::class);\n        $routes   = new RouteCollection(\n            Services::locator(),\n            new Modules()\n        );\n        \\CodeIgniter\\Services::injectMock('response', $response);\n        \\CodeIgniter\\Services::injectMock('routes', $routes);\n\n        $routes->add('home/base', 'Controller::index', ['as' => 'base']);\n        $response->method('redirect')->willReturnArgument(0);\n\n        $this->assertInstanceOf(RedirectResponse::class, redirect('base'));\n    }\n\n    public function testRedirectDefault()\n    {\n        $this->assertInstanceOf(RedirectResponse::class, redirect());\n    }\n\n    public function testView()\n    {\n        $data = [\n            'testString' => 'bar',\n            'bar'        => 'baz',\n        ];\n        $expected = '<h1>bar</h1>';\n        $this->assertStringContainsString($expected, view('\\Tests\\Support\\View\\Views\\simple', $data));\n    }\n\n    public function testViewSavedData()\n    {\n        $data = [\n            'testString' => 'bar',\n            'bar'        => 'baz',\n        ];\n        $expected = '<h1>bar</h1>';\n        $this->assertStringContainsString($expected, view('\\Tests\\Support\\View\\Views\\simple', $data, ['saveData' => true]));\n        $this->assertStringContainsString($expected, view('\\Tests\\Support\\View\\Views\\simple'));\n    }\n\n    public function testViewCell()\n    {\n        $expected = 'Hello';\n        $this->assertSame($expected, view_cell('\\Tests\\Support\\View\\SampleClass::hello'));\n    }\n\n    public function testEscapeWithDifferentEncodings()\n    {\n        $this->assertSame('&lt;x', esc('<x', 'html', 'utf-8'));\n        $this->assertSame('&lt;x', esc('<x', 'html', 'iso-8859-1'));\n        $this->assertSame('&lt;x', esc('<x', 'html', 'windows-1251'));\n    }\n\n    public function testEscapeBadContext()\n    {\n        $this->expectException(InvalidArgumentException::class);\n        esc(['width' => '800', 'height' => '600'], 'bogus');\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState  disabled\n     */\n    public function testSessionInstance()\n    {\n        $this->injectSessionMock();\n\n        $this->assertInstanceOf(Session::class, session());\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState  disabled\n     */\n    public function testSessionVariable()\n    {\n        $this->injectSessionMock();\n\n        $_SESSION['notbogus'] = 'Hi there';\n\n        $this->assertSame('Hi there', session('notbogus'));\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState  disabled\n     */\n    public function testSessionVariableNotThere()\n    {\n        $this->injectSessionMock();\n\n        $_SESSION['bogus'] = 'Hi there';\n        $this->assertNull(session('notbogus'));\n    }\n\n    public function testRouteTo()\n    {\n        // prime the pump\n        $routes = service('routes');\n        $routes->add('path/(:any)/to/(:num)', 'myController::goto/$1/$2');\n\n        $this->assertSame('/path/string/to/13', route_to('myController::goto', 'string', 13));\n    }\n\n    public function testInvisible()\n    {\n        $this->assertSame('Javascript', remove_invisible_characters(\"Java\\0script\"));\n    }\n\n    public function testInvisibleEncoded()\n    {\n        $this->assertSame('Javascript', remove_invisible_characters('Java%0cscript'));\n    }\n\n    public function testAppTimezone()\n    {\n        $this->assertSame('America/Chicago', app_timezone());\n    }\n\n    public function testCSRFToken()\n    {\n        Services::injectMock('security', new MockSecurity(new App()));\n\n        $this->assertSame('csrf_test_name', csrf_token());\n    }\n\n    public function testCSRFHeader()\n    {\n        $this->assertSame('X-CSRF-TOKEN', csrf_header());\n    }\n\n    public function testHash()\n    {\n        $this->assertSame(32, strlen(csrf_hash()));\n    }\n\n    public function testCSRFField()\n    {\n        $this->assertStringContainsString('<input type=\"hidden\" ', csrf_field());\n    }\n\n    public function testCSRFMeta()\n    {\n        $this->assertStringContainsString('<meta name=\"X-CSRF-TOKEN\" ', csrf_meta());\n    }\n\n    public function testModelNotExists()\n    {\n        $this->assertNull(model(UnexsistenceClass::class));\n    }\n\n    public function testModelExistsBasename()\n    {\n        $this->assertInstanceOf(JobModel::class, model('JobModel'));\n    }\n\n    public function testModelExistsClassname()\n    {\n        $this->assertInstanceOf(JobModel::class, model(JobModel::class));\n    }\n\n    public function testModelExistsAbsoluteClassname()\n    {\n        $this->assertInstanceOf(JobModel::class, model('\\Tests\\Support\\Models\\JobModel'));\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState  disabled\n     */\n    public function testOldInput()\n    {\n        $this->injectSessionMock();\n        // setup from RedirectResponseTest...\n        $_SERVER['REQUEST_METHOD'] = 'GET';\n\n        $this->config          = new App();\n        $this->config->baseURL = 'http://example.com/';\n\n        $this->routes = new RouteCollection(Services::locator(), new Modules());\n        Services::injectMock('routes', $this->routes);\n\n        $this->request = new MockIncomingRequest($this->config, new URI('http://example.com'), null, new UserAgent());\n        Services::injectMock('request', $this->request);\n\n        // setup & ask for a redirect...\n        $_SESSION = [];\n        $_GET     = ['foo' => 'bar'];\n        $_POST    = [\n            'bar'    => 'baz',\n            'zibble' => serialize('fritz'),\n        ];\n\n        $response = new RedirectResponse(new App());\n        $response->withInput();\n\n        $this->assertSame('bar', old('foo')); // regular parameter\n        $this->assertSame('doo', old('yabba dabba', 'doo')); // non-existing parameter\n        $this->assertSame('fritz', old('zibble')); // serialized parameter\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/1492\n     * @runInSeparateProcess\n     * @preserveGlobalState  disabled\n     */\n    public function testOldInputArray()\n    {\n        $this->injectSessionMock();\n        // setup from RedirectResponseTest...\n        $_SERVER['REQUEST_METHOD'] = 'GET';\n\n        $this->config          = new App();\n        $this->config->baseURL = 'http://example.com/';\n\n        $this->routes = new RouteCollection(Services::locator(), new Modules());\n        Services::injectMock('routes', $this->routes);\n\n        $this->request = new MockIncomingRequest($this->config, new URI('http://example.com'), null, new UserAgent());\n        Services::injectMock('request', $this->request);\n\n        $locations = [\n            'AB' => 'Alberta',\n            'BC' => 'British Columbia',\n            'SK' => 'Saskatchewan',\n        ];\n\n        // setup & ask for a redirect...\n        $_SESSION = [];\n        $_GET     = [];\n        $_POST    = ['location' => $locations];\n\n        $response = new RedirectResponse(new App());\n        $response->withInput();\n\n        $this->assertSame($locations, old('location'));\n    }\n\n    public function testReallyWritable()\n    {\n        // cannot test fully on *nix\n        $this->assertTrue(is_really_writable(WRITEPATH));\n    }\n\n    public function testSlashItem()\n    {\n        $this->assertSame('/', slash_item('cookiePath')); // slash already there\n        $this->assertSame('', slash_item('cookieDomain')); // empty, so untouched\n        $this->assertSame('en/', slash_item('defaultLocale')); // slash appended\n    }\n\n    protected function injectSessionMock()\n    {\n        $defaults = [\n            'sessionDriver'            => 'CodeIgniter\\Session\\Handlers\\FileHandler',\n            'sessionCookieName'        => 'ci_session',\n            'sessionExpiration'        => 7200,\n            'sessionSavePath'          => null,\n            'sessionMatchIP'           => false,\n            'sessionTimeToUpdate'      => 300,\n            'sessionRegenerateDestroy' => false,\n            'cookieDomain'             => '',\n            'cookiePrefix'             => '',\n            'cookiePath'               => '/',\n            'cookieSecure'             => false,\n            'cookieSameSite'           => 'Lax',\n        ];\n\n        $appConfig = new App();\n\n        foreach ($defaults as $key => $config) {\n            $appConfig->{$key} = $config;\n        }\n\n        $session = new MockSession(new FileHandler($appConfig, '127.0.0.1'), $appConfig);\n        $session->setLogger(new TestLogger(new Logger()));\n        BaseService::injectMock('session', $session);\n    }\n\n    // Make sure cookies are set by RedirectResponse this way\n    // See https://github.com/codeigniter4/CodeIgniter4/issues/1393\n    public function testRedirectResponseCookies1()\n    {\n        $loginTime = time();\n\n        $routes = service('routes');\n        $routes->add('user/login', 'Auth::verify', ['as' => 'login']);\n\n        $answer1 = redirect()->route('login')\n            ->setCookie('foo', 'onething', YEAR)\n            ->setCookie('login_time', $loginTime, YEAR);\n\n        $this->assertTrue($answer1->hasCookie('foo', 'onething'));\n        $this->assertTrue($answer1->hasCookie('login_time'));\n    }\n\n    public function testTrace()\n    {\n        ob_start();\n        trace();\n        $content = ob_get_clean();\n\n        $this->assertStringContainsString('Debug Backtrace', $content);\n    }\n\n    public function testViewNotSaveData()\n    {\n        $data = [\n            'testString' => 'bar',\n            'bar'        => 'baz',\n        ];\n        $this->assertStringContainsString('<h1>bar</h1>', view('\\Tests\\Support\\View\\Views\\simples', $data, ['saveData' => false]));\n        $this->assertStringContainsString('<h1>is_not</h1>', view('\\Tests\\Support\\View\\Views\\simples'));\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState  disabled\n     */\n    public function testForceHttpsNullRequestAndResponse()\n    {\n        $this->assertNull(Services::response()->header('Location'));\n\n        force_https();\n\n        $this->assertSame('https://example.com/', Services::response()->header('Location')->getValue());\n    }\n\n    /**\n     * @dataProvider dirtyPathsProvider\n     *\n     * @param mixed $input\n     * @param mixed $expected\n     */\n    public function testCleanPathActuallyCleaningThePaths($input, $expected)\n    {\n        $this->assertSame($expected, clean_path($input));\n    }\n\n    public function dirtyPathsProvider()\n    {\n        $ds = DIRECTORY_SEPARATOR;\n\n        return [\n            [\n                ROOTPATH . 'spark',\n                'ROOTPATH' . $ds . 'spark',\n            ],\n            [\n                APPPATH . 'Config' . $ds . 'App.php',\n                'APPPATH' . $ds . 'Config' . $ds . 'App.php',\n            ],\n            [\n                SYSTEMPATH . 'CodeIgniter.php',\n                'SYSTEMPATH' . $ds . 'CodeIgniter.php',\n            ],\n            [\n                VENDORPATH . 'autoload.php',\n                'VENDORPATH' . $ds . 'autoload.php',\n            ],\n            [\n                FCPATH . 'index.php',\n                'FCPATH' . $ds . 'index.php',\n            ],\n        ];\n    }\n\n    public function testIsCli()\n    {\n        $this->assertIsBool(is_cli());\n        $this->assertTrue(is_cli());\n    }\n\n    public function testDWithCSP()\n    {\n        /** @var App $config */\n        $config       = config(App::class);\n        $CSPEnabled   = $config->CSPEnabled;\n        $cliDetection = Kint::$cli_detection;\n\n        $config->CSPEnabled  = true;\n        Kint::$cli_detection = false;\n\n        $this->expectOutputRegex('/<script {csp-script-nonce} class=\"kint-rich-script\">/u');\n        d('string');\n\n        // Restore settings\n        $config->CSPEnabled  = $CSPEnabled;\n        Kint::$cli_detection = $cliDetection;\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState  disabled\n     */\n    public function testTraceWithCSP()\n    {\n        /** @var App $config */\n        $config              = config(App::class);\n        $config->CSPEnabled  = true;\n        Kint::$cli_detection = false;\n\n        $this->expectOutputRegex('/<style {csp-style-nonce} class=\"kint-rich-style\">/u');\n        trace();\n    }\n}\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter\\HTTP;\n\nuse CodeIgniter\\HTTP\\Exceptions\\HTTPException;\nuse CodeIgniter\\HTTP\\Files\\UploadedFile;\nuse CodeIgniter\\Test\\CIUnitTestCase;\nuse Config\\App;\n\n/**\n * @backupGlobals enabled\n *\n * @internal\n */\nfinal class IncomingRequestTest extends CIUnitTestCase\n{\n    /**\n     * @var IncomingRequest\n     */\n    protected $request;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $_POST = $_GET = $_SERVER = $_REQUEST = $_ENV = $_COOKIE = $_SESSION = [];\n    }\n\n    public function testCanGrabRequestVars()\n    {\n        $_REQUEST['TEST'] = 5;\n\n        $this->assertSame('5', $this->request->getVar('TEST'));\n        $this->assertNull($this->request->getVar('TESTY'));\n    }\n\n    public function testCanGrabGetVars()\n    {\n        $_GET['TEST'] = 5;\n\n        $this->assertSame('5', $this->request->getGet('TEST'));\n        $this->assertNull($this->request->getGet('TESTY'));\n    }\n\n    public function testCanGrabPostVars()\n    {\n        $_POST['TEST'] = 5;\n\n        $this->assertSame('5', $this->request->getPost('TEST'));\n        $this->assertNull($this->request->getPost('TESTY'));\n    }\n\n    public function testCanGrabPostBeforeGet()\n    {\n        $_POST['TEST'] = 5;\n        $_GET['TEST']  = 3;\n\n        $this->assertSame('5', $this->request->getPostGet('TEST'));\n        $this->assertSame('3', $this->request->getGetPost('TEST'));\n    }\n\n    public function testNoOldInput()\n    {\n        $this->assertNull($this->request->getOldInput('name'));\n    }\n\n    public function testCanGetOldInput()\n    {\n        $_SESSION['_ci_old_input'] = [\n            'get'  => ['one' => 'two'],\n            'post' => ['name' => 'foo'],\n        ];\n\n        $this->assertSame('foo', $this->request->getOldInput('name'));\n        $this->assertSame('two', $this->request->getOldInput('one'));\n    }\n\n    public function testCanGetOldInputDotted()\n    {\n        $_SESSION['_ci_old_input'] = [\n            'get'  => ['apple' => ['name' => 'two']],\n            'post' => ['banana' => ['name' => 'foo']],\n        ];\n\n        $this->assertSame('foo', $this->request->getOldInput('banana.name'));\n        $this->assertSame('two', $this->request->getOldInput('apple.name'));\n    }\n\n    public function testMissingOldInput()\n    {\n        $_SESSION['_ci_old_input'] = [\n            'get'  => ['apple' => ['name' => 'two']],\n            'post' => ['banana' => ['name' => 'foo']],\n        ];\n\n        $this->assertNull($this->request->getOldInput('pineapple.name'));\n    }\n\n    // Reference: https://github.com/codeigniter4/CodeIgniter4/issues/1492\n    public function testCanGetOldInputArray()\n    {\n        $_SESSION['_ci_old_input'] = [\n            'get'  => ['apple' => ['name' => 'two']],\n            'post' => ['banana' => ['name' => 'foo']],\n        ];\n\n        $this->assertSame(['name' => 'two'], $this->request->getOldInput('apple'));\n        $this->assertSame(['name' => 'foo'], $this->request->getOldInput('banana'));\n    }\n\n    // Reference: https://github.com/codeigniter4/CodeIgniter4/issues/1492\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState  disabled\n     */\n    public function testCanSerializeOldArray()\n    {\n        $locations = [\n            'AB' => 'Alberta',\n            'BC' => 'British Columbia',\n            'SK' => 'Saskatchewan',\n        ];\n        $session = service('session');\n        $session->set(['_ci_old_input' => ['post' => ['location' => $locations]]]);\n\n        $this->assertSame($locations, $this->request->getOldInput('location'));\n    }\n\n    public function testCanGrabServerVars()\n    {\n        $server                   = $this->getPrivateProperty($this->request, 'globals');\n        $server['server']['TEST'] = 5;\n        $this->setPrivateProperty($this->request, 'globals', $server);\n\n        $this->assertSame('5', $this->request->getServer('TEST'));\n        $this->assertNull($this->request->getServer('TESTY'));\n    }\n\n    public function testCanGrabEnvVars()\n    {\n        $server                = $this->getPrivateProperty($this->request, 'globals');\n        $server['env']['TEST'] = 5;\n        $this->setPrivateProperty($this->request, 'globals', $server);\n\n        $this->assertSame('5', $this->request->getEnv('TEST'));\n        $this->assertNull($this->request->getEnv('TESTY'));\n    }\n\n    public function testCanGrabCookieVars()\n    {\n        $_COOKIE['TEST'] = 5;\n\n        $this->assertSame('5', $this->request->getCookie('TEST'));\n        $this->assertNull($this->request->getCookie('TESTY'));\n    }\n\n    public function testStoresDefaultLocale()\n    {\n        $config = new App();\n\n        $this->assertSame($config->defaultLocale, $this->request->getDefaultLocale());\n        $this->assertSame($config->defaultLocale, $this->request->getLocale());\n    }\n\n    public function testSetLocaleSaves()\n    {\n        $config                   = new App();\n        $config->supportedLocales = ['en', 'es'];\n        $config->defaultLocale    = 'es';\n        $config->baseURL          = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), null, new UserAgent());\n\n        $request->setLocale('en');\n        $this->assertSame('en', $request->getLocale());\n    }\n\n    public function testSetBadLocale()\n    {\n        $config                   = new App();\n        $config->supportedLocales = ['en', 'es'];\n        $config->defaultLocale    = 'es';\n        $config->baseURL          = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), null, new UserAgent());\n\n        $request->setLocale('xx');\n        $this->assertSame('es', $request->getLocale());\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/2774\n     */\n    public function testNegotiatesLocale()\n    {\n        $_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'fr-FR; q=1.0, en; q=0.5';\n\n        $config                   = new App();\n        $config->negotiateLocale  = true;\n        $config->supportedLocales = ['fr', 'en'];\n        $config->baseURL          = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), null, new UserAgent());\n\n        $this->assertSame($config->defaultLocale, $request->getDefaultLocale());\n        $this->assertSame('fr', $request->getLocale());\n    }\n\n    public function testNegotiatesLocaleOnlyBroad()\n    {\n        $_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'fr; q=1.0, en; q=0.5';\n\n        $config                   = new App();\n        $config->negotiateLocale  = true;\n        $config->supportedLocales = ['fr', 'en'];\n        $config->baseURL          = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), null, new UserAgent());\n\n        $this->assertSame($config->defaultLocale, $request->getDefaultLocale());\n        $this->assertSame('fr', $request->getLocale());\n    }\n\n    // The negotiation tests below are not intended to exercise the HTTP\\Negotiate class -\n    // that is up to the NegotiateTest. These are only to make sure that the requests\n    // flow through to the negotiator\n\n    public function testNegotiatesNot()\n    {\n        $this->request->setHeader('Accept-Charset', 'iso-8859-5, unicode-1-1;q=0.8');\n\n        $this->expectException(HTTPException::class);\n        $this->request->negotiate('something bogus', ['iso-8859-5', 'unicode-1-1']);\n    }\n\n    public function testNegotiatesCharset()\n    {\n        // $_SERVER['HTTP_ACCEPT_CHARSET'] = 'iso-8859-5, unicode-1-1;q=0.8';\n        $this->request->setHeader('Accept-Charset', 'iso-8859-5, unicode-1-1;q=0.8');\n\n        $this->assertSame(strtolower($this->request->config->charset), $this->request->negotiate('charset', ['iso-8859', 'unicode-1-2']));\n    }\n\n    public function testNegotiatesMedia()\n    {\n        $this->request->setHeader('Accept', 'text/plain; q=0.5, text/html, text/x-dvi; q=0.8, text/x-c');\n        $this->assertSame('text/html', $this->request->negotiate('media', ['text/html', 'text/x-c', 'text/x-dvi', 'text/plain']));\n    }\n\n    public function testNegotiatesEncoding()\n    {\n        $this->request->setHeader('Accept-Encoding', 'gzip;q=1.0, identity; q=0.4, compress;q=0.5');\n        $this->assertSame('gzip', $this->request->negotiate('encoding', ['gzip', 'compress']));\n    }\n\n    public function testNegotiatesLanguage()\n    {\n        $this->request->setHeader('Accept-Language', 'da, en-gb;q=0.8, en;q=0.7');\n        $this->assertSame('en', $this->request->negotiate('language', ['en', 'da']));\n    }\n\n    public function testCanGrabGetRawJSON()\n    {\n        $json = '{\"code\":1, \"message\":\"ok\"}';\n\n        $expected = ['code' => 1, 'message' => 'ok'];\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $this->assertSame($expected, $request->getJSON(true));\n    }\n\n    public function testCanGetAVariableFromJson()\n    {\n        $jsonObj = [\n            'foo' => 'bar',\n            'baz' => ['fizz' => 'buzz'],\n        ];\n        $json = json_encode($jsonObj);\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $this->assertSame('bar', $request->getJsonVar('foo'));\n        $this->assertNull($request->getJsonVar('notExists'));\n\n        $jsonVar = $request->getJsonVar('baz');\n        $this->assertIsObject($jsonVar);\n        $this->assertSame('buzz', $jsonVar->fizz);\n        $this->assertSame('buzz', $request->getJsonVar('baz.fizz'));\n    }\n\n    public function testGetJsonVarAsArray()\n    {\n        $jsonObj = [\n            'baz' => [\n                'fizz' => 'buzz',\n                'foo'  => 'bar',\n            ],\n        ];\n        $json = json_encode($jsonObj);\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $jsonVar = $request->getJsonVar('baz', true);\n        $this->assertIsArray($jsonVar);\n        $this->assertSame('buzz', $jsonVar['fizz']);\n        $this->assertSame('bar', $jsonVar['foo']);\n    }\n\n    public function testGetJsonVarCanFilter()\n    {\n        $json = json_encode(['foo' => 'bar']);\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $this->assertFalse($request->getJsonVar('foo', false, FILTER_VALIDATE_INT));\n    }\n\n    public function testGetVarWorksWithJson()\n    {\n        $json = json_encode(['foo' => 'bar', 'fizz' => 'buzz']);\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $json, new UserAgent());\n        $request->setHeader('Content-Type', 'application/json');\n\n        $this->assertSame('bar', $request->getVar('foo'));\n        $this->assertSame('buzz', $request->getVar('fizz'));\n        $this->assertNull($request->getVar('notExists'));\n\n        $multiple = $request->getVar(['foo', 'fizz']);\n        $this->assertIsArray($multiple);\n        $this->assertSame('bar', $multiple['foo']);\n        $this->assertSame('buzz', $multiple['fizz']);\n\n        $all = $request->getVar();\n        $this->assertIsObject($all);\n        $this->assertSame('bar', $all->foo);\n        $this->assertSame('buzz', $all->fizz);\n    }\n\n    public function testGetVarWorksWithJsonAndGetParams()\n    {\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        // GET method\n        $_REQUEST['foo']  = 'bar';\n        $_REQUEST['fizz'] = 'buzz';\n\n        $request = new IncomingRequest($config, new URI('http://example.com/path?foo=bar&fizz=buzz'), 'php://input', new UserAgent());\n        $request = $request->withMethod('GET');\n\n        // JSON type\n        $request->setHeader('Content-Type', 'application/json');\n\n        $this->assertSame('bar', $request->getVar('foo'));\n        $this->assertSame('buzz', $request->getVar('fizz'));\n\n        $multiple = $request->getVar(['foo', 'fizz']);\n        $this->assertIsArray($multiple);\n        $this->assertSame('bar', $multiple['foo']);\n        $this->assertSame('buzz', $multiple['fizz']);\n\n        $all = $request->getVar();\n        $this->assertIsArray($all);\n        $this->assertSame('bar', $all['foo']);\n        $this->assertSame('buzz', $all['fizz']);\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/5391\n     */\n    public function testGetJsonVarReturnsNullFromNullBody()\n    {\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n        $json            = null;\n        $request         = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $this->assertNull($request->getJsonVar('myKey'));\n    }\n\n    public function testgetJSONReturnsNullFromNullBody()\n    {\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n        $json            = null;\n        $request         = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $this->assertNull($request->getJSON());\n    }\n\n    public function testCanGrabGetRawInput()\n    {\n        $rawstring = 'username=admin001&role=administrator&usepass=0';\n\n        $expected = [\n            'username' => 'admin001',\n            'role'     => 'administrator',\n            'usepass'  => '0',\n        ];\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $rawstring, new UserAgent());\n\n        $this->assertSame($expected, $request->getRawInput());\n    }\n\n    public function testIsCLI()\n    {\n        // this should be the case in unit testing\n        $this->assertTrue($this->request->isCLI());\n    }\n\n    public function testIsAJAX()\n    {\n        $this->request->appendHeader('X-Requested-With', 'XMLHttpRequest');\n        $this->assertTrue($this->request->isAJAX());\n    }\n\n    public function testIsSecure()\n    {\n        $_SERVER['HTTPS'] = 'on';\n        $this->assertTrue($this->request->isSecure());\n    }\n\n    public function testIsSecureFrontEnd()\n    {\n        $this->request->appendHeader('Front-End-Https', 'on');\n        $this->assertTrue($this->request->isSecure());\n    }\n\n    public function testIsSecureForwarded()\n    {\n        $this->request->appendHeader('X-Forwarded-Proto', 'https');\n        $this->assertTrue($this->request->isSecure());\n    }\n\n    public function testUserAgent()\n    {\n        $_SERVER['HTTP_USER_AGENT'] = 'Mozilla';\n\n        $config  = new App();\n        $request = new IncomingRequest($config, new URI(), null, new UserAgent());\n\n        $this->assertSame('Mozilla', $request->getUserAgent()->__toString());\n    }\n\n    public function testFileCollectionFactory()\n    {\n        $_FILES = [\n            'userfile' => [\n                'name'     => 'someFile.txt',\n                'type'     => 'text/plain',\n                'size'     => '124',\n                'tmp_name' => '/tmp/myTempFile.txt',\n                'error'    => 0,\n            ],\n        ];\n\n        $files = $this->request->getFiles();\n        $this->assertCount(1, $files);\n\n        $file = array_shift($files);\n        $this->assertInstanceOf(UploadedFile::class, $file);\n\n        $this->assertSame('someFile.txt', $file->getName());\n        $this->assertSame(124, $file->getSize());\n    }\n\n    public function testGetFileMultiple()\n    {\n        $_FILES = [\n            'userfile' => [\n                'name' => [\n                    'someFile.txt',\n                    'someFile2.txt',\n                ],\n                'type' => [\n                    'text/plain',\n                    'text/plain',\n                ],\n                'size' => [\n                    '124',\n                    '125',\n                ],\n                'tmp_name' => [\n                    '/tmp/myTempFile.txt',\n                    '/tmp/myTempFile2.txt',\n                ],\n                'error' => [\n                    0,\n                    0,\n                ],\n            ],\n        ];\n\n        $gotit = $this->request->getFileMultiple('userfile');\n        $this->assertSame(124, $gotit[0]->getSize());\n        $this->assertSame(125, $gotit[1]->getSize());\n    }\n\n    public function testGetFile()\n    {\n        $_FILES = [\n            'userfile' => [\n                'name'     => 'someFile.txt',\n                'type'     => 'text/plain',\n                'size'     => '124',\n                'tmp_name' => '/tmp/myTempFile.txt',\n                'error'    => 0,\n            ],\n        ];\n\n        $gotit = $this->request->getFile('userfile');\n        $this->assertSame(124, $gotit->getSize());\n    }\n\n    public function testSpoofing()\n    {\n        $this->request->setMethod('WINK');\n        $this->assertSame('wink', $this->request->getMethod());\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/2839\n     */\n    public function testGetPostEmpty()\n    {\n        $_POST['TEST'] = '5';\n        $_GET['TEST']  = '3';\n        $this->assertSame($_POST, $this->request->getPostGet());\n        $this->assertSame($_GET, $this->request->getGetPost());\n    }\n\n    public function testWithFalseBody()\n    {\n        // Use `false` here to simulate file_get_contents returning a false value\n        $request = new IncomingRequest(new App(), new URI(), false, new UserAgent());\n\n        $this->assertNotFalse($request->getBody());\n        $this->assertNull($request->getBody());\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/3020\n     */\n    public function testGetPostIndexNotExists()\n    {\n        $_POST['TEST'] = 5;\n        $_GET['TEST']  = 3;\n        $this->assertNull($this->request->getPostGet('gc'));\n        $this->assertNull($this->request->getGetPost('gc'));\n    }\n\n    public function providePathChecks()\n    {\n        return [\n            'not /index.php' => [\n                '/test.php',\n                '/',\n            ],\n            '/index.php' => [\n                '/index.php',\n                '/',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider providePathChecks\n     *\n     * @param mixed $path\n     * @param mixed $detectPath\n     */\n    public function testExtensionPHP($path, $detectPath)\n    {\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $_SERVER['REQUEST_URI'] = $path;\n        $_SERVER['SCRIPT_NAME'] = $path;\n        $request                = new IncomingRequest($config, new URI($path), null, new UserAgent());\n        $this->assertSame($detectPath, $request->detectPath());\n    }\n\n    public function testGetPath()\n    {\n        $_SERVER['REQUEST_URI'] = '/index.php/fruits/banana';\n        $_SERVER['SCRIPT_NAME'] = '/index.php';\n\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $this->assertSame('fruits/banana', $request->getPath());\n    }\n\n    public function testGetPathIsRelative()\n    {\n        $_SERVER['REQUEST_URI'] = '/sub/folder/index.php/fruits/banana';\n        $_SERVER['SCRIPT_NAME'] = '/sub/folder/index.php';\n\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $this->assertSame('fruits/banana', $request->getPath());\n    }\n\n    public function testGetPathStoresDetectedValue()\n    {\n        $_SERVER['REQUEST_URI'] = '/fruits/banana';\n        $_SERVER['SCRIPT_NAME'] = '/index.php';\n\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $_SERVER['REQUEST_URI'] = '/candy/snickers';\n\n        $this->assertSame('fruits/banana', $request->getPath());\n    }\n\n    public function testGetPathIsRediscovered()\n    {\n        $_SERVER['REQUEST_URI'] = '/fruits/banana';\n        $_SERVER['SCRIPT_NAME'] = '/index.php';\n\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $_SERVER['REQUEST_URI'] = '/candy/snickers';\n        $request->detectPath();\n\n        $this->assertSame('candy/snickers', $request->getPath());\n    }\n\n    public function testSetPath()\n    {\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n        $this->assertSame('', $request->getPath());\n\n        $request->setPath('foobar');\n        $this->assertSame('foobar', $request->getPath());\n    }\n\n    public function testSetPathUpdatesURI()\n    {\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $request->setPath('apples');\n\n        $this->assertSame('apples', $request->getUri()->getPath());\n    }\n}\n", "Version 4.1.6\n#############\n\nRelease Date: Not released\n\n**4.1.6 release of CodeIgniter4**\n\n.. contents::\n    :local:\n    :depth: 2\n\nBREAKING\n********\n\n- Multiple table names will no longer be stored in ``BaseBuilder::$tableName`` - an empty string will be used instead.\n\n.. _changelog-v416-validation-changes:\n\nValidation changes\n==================\n\n- The previous version of the Validation can't handle an array item.\n  Because of the bug fix, the validation results may be different,\n  or raise a ``TypeError``.\n  But the previous version's results are probably incorrect.\n- The Validation separated the validation process of multiple field\n  like ``contacts.*.name`` and single field.\n  When a single field has an array data, the previous version validates each element of the array.\n  The validation rule gets an element of the array as the parameter.\n  On the other hand, the current version passes the array to the validation rule as a whole.\n\nEnhancements\n************\n\n- Database pane on debug toolbar now displays location where Query was called from. Also displays full backtrace.\n- :ref:`Subqueries <query-builder-where-subquery>` in QueryBuilder can now be an instance of the BaseBuilder class.\n\nChanges\n*******\n\n- The process of sending cookies has been moved to the ``Response`` class. Now the ``Security`` and ``CookieStore`` class don't send cookies, set them to the Response.\n\nDeprecations\n************\n\n- ``Seeder::faker()`` and ``Seeder::$faker`` are deprecated.\n- ``BaseBuilder::cleanClone()`` is deprecated.\n\nSending Cookies\n===============\n\nThe process of sending cookies has been moved to the ``Response`` class.\nAnd the following methods are deprecated:\n\n- ``CookieStore::dispatch()``\n- ``CookieStore::setRawCookie()``\n- ``CookieStore::setCookie()``\n- ``Security::sendCookie()``\n- ``Security::doSendCookie()``\n\nBugs Fixed\n**********\n"], "fixing_code": ["# Security Policy\n\nThe development team and community take all security issues seriously. **Please do not make public any uncovered flaws.**\n\n## Reporting a Vulnerability\n\nThank you for improving the security of our code! Any assistance in removing security flaws will be acknowledged.\n\n**Please report security flaws by emailing the development team directly: security@codeigniter.com**.\n\nThe lead maintainer will acknowledge your email within 48 hours, and will send a more detailed response within 48 hours indicating\nthe next steps in handling your report. After the initial reply to your report, the security team will endeavor to keep you informed of the\nprogress towards a fix and full announcement, and may ask for additional information or guidance.\n\n## Disclosure Policy\n\nWhen the security team receives a security bug report, they will assign it to a primary handler.\nThis person will coordinate the fix and release process, involving the following steps:\n\n- Confirm the problem and determine the affected versions.\n- Audit code to find any potential similar problems.\n- Prepare fixes for all releases still under maintenance. These fixes will be released as fast as possible.\n- Publish security advisories at https://github.com/codeigniter4/CodeIgniter4/security/advisories\n\n## Comments on this Policy\n\nIf you have suggestions on how this process could be improved please submit a Pull Request.\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nuse CodeIgniter\\Cache\\CacheInterface;\nuse CodeIgniter\\Config\\Factories;\nuse CodeIgniter\\Cookie\\Cookie;\nuse CodeIgniter\\Cookie\\CookieStore;\nuse CodeIgniter\\Cookie\\Exceptions\\CookieException;\nuse CodeIgniter\\Database\\BaseConnection;\nuse CodeIgniter\\Database\\ConnectionInterface;\nuse CodeIgniter\\Debug\\Timer;\nuse CodeIgniter\\Files\\Exceptions\\FileNotFoundException;\nuse CodeIgniter\\HTTP\\Exceptions\\HTTPException;\nuse CodeIgniter\\HTTP\\RedirectResponse;\nuse CodeIgniter\\HTTP\\RequestInterface;\nuse CodeIgniter\\HTTP\\ResponseInterface;\nuse CodeIgniter\\HTTP\\URI;\nuse CodeIgniter\\Model;\nuse CodeIgniter\\Session\\Session;\nuse CodeIgniter\\Test\\TestLogger;\nuse Config\\App;\nuse Config\\Database;\nuse Config\\Logger;\nuse Config\\Services;\nuse Config\\View;\nuse Laminas\\Escaper\\Escaper;\n\n// Services Convenience Functions\n\nif (! function_exists('app_timezone')) {\n    /**\n     * Returns the timezone the application has been set to display\n     * dates in. This might be different than the timezone set\n     * at the server level, as you often want to stores dates in UTC\n     * and convert them on the fly for the user.\n     */\n    function app_timezone(): string\n    {\n        $config = config(App::class);\n\n        return $config->appTimezone;\n    }\n}\n\nif (! function_exists('cache')) {\n    /**\n     * A convenience method that provides access to the Cache\n     * object. If no parameter is provided, will return the object,\n     * otherwise, will attempt to return the cached value.\n     *\n     * Examples:\n     *    cache()->save('foo', 'bar');\n     *    $foo = cache('bar');\n     *\n     * @return CacheInterface|mixed\n     */\n    function cache(?string $key = null)\n    {\n        $cache = Services::cache();\n\n        // No params - return cache object\n        if ($key === null) {\n            return $cache;\n        }\n\n        // Still here? Retrieve the value.\n        return $cache->get($key);\n    }\n}\n\nif (! function_exists('clean_path')) {\n    /**\n     * A convenience method to clean paths for\n     * a nicer looking output. Useful for exception\n     * handling, error logging, etc.\n     */\n    function clean_path(string $path): string\n    {\n        // Resolve relative paths\n        $path = realpath($path) ?: $path;\n\n        switch (true) {\n            case strpos($path, APPPATH) === 0:\n                return 'APPPATH' . DIRECTORY_SEPARATOR . substr($path, strlen(APPPATH));\n\n            case strpos($path, SYSTEMPATH) === 0:\n                return 'SYSTEMPATH' . DIRECTORY_SEPARATOR . substr($path, strlen(SYSTEMPATH));\n\n            case strpos($path, FCPATH) === 0:\n                return 'FCPATH' . DIRECTORY_SEPARATOR . substr($path, strlen(FCPATH));\n\n            case defined('VENDORPATH') && strpos($path, VENDORPATH) === 0:\n                return 'VENDORPATH' . DIRECTORY_SEPARATOR . substr($path, strlen(VENDORPATH));\n\n            case strpos($path, ROOTPATH) === 0:\n                return 'ROOTPATH' . DIRECTORY_SEPARATOR . substr($path, strlen(ROOTPATH));\n\n            default:\n                return $path;\n        }\n    }\n}\n\nif (! function_exists('command')) {\n    /**\n     * Runs a single command.\n     * Input expected in a single string as would\n     * be used on the command line itself:\n     *\n     *  > command('migrate:create SomeMigration');\n     *\n     * @return false|string\n     */\n    function command(string $command)\n    {\n        $runner      = service('commands');\n        $regexString = '([^\\s]+?)(?:\\s|(?<!\\\\\\\\)\"|(?<!\\\\\\\\)\\'|$)';\n        $regexQuoted = '(?:\"([^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*)\"|\\'([^\\'\\\\\\\\]*(?:\\\\\\\\.[^\\'\\\\\\\\]*)*)\\')';\n\n        $args   = [];\n        $length = strlen($command);\n        $cursor = 0;\n\n        /**\n         * Adopted from Symfony's `StringInput::tokenize()` with few changes.\n         *\n         * @see https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Input/StringInput.php\n         */\n        while ($cursor < $length) {\n            if (preg_match('/\\s+/A', $command, $match, 0, $cursor)) {\n                // nothing to do\n            } elseif (preg_match('/' . $regexQuoted . '/A', $command, $match, 0, $cursor)) {\n                $args[] = stripcslashes(substr($match[0], 1, strlen($match[0]) - 2));\n            } elseif (preg_match('/' . $regexString . '/A', $command, $match, 0, $cursor)) {\n                $args[] = stripcslashes($match[1]);\n            } else {\n                // @codeCoverageIgnoreStart\n                throw new InvalidArgumentException(sprintf('Unable to parse input near \"... %s ...\".', substr($command, $cursor, 10)));\n                // @codeCoverageIgnoreEnd\n            }\n\n            $cursor += strlen($match[0]);\n        }\n\n        $command     = array_shift($args);\n        $params      = [];\n        $optionValue = false;\n\n        foreach ($args as $i => $arg) {\n            if (mb_strpos($arg, '-') !== 0) {\n                if ($optionValue) {\n                    // if this was an option value, it was already\n                    // included in the previous iteration\n                    $optionValue = false;\n                } else {\n                    // add to segments if not starting with '-'\n                    // and not an option value\n                    $params[] = $arg;\n                }\n\n                continue;\n            }\n\n            $arg   = ltrim($arg, '-');\n            $value = null;\n\n            if (isset($args[$i + 1]) && mb_strpos($args[$i + 1], '-') !== 0) {\n                $value       = $args[$i + 1];\n                $optionValue = true;\n            }\n\n            $params[$arg] = $value;\n        }\n\n        ob_start();\n        $runner->run($command, $params);\n\n        return ob_get_clean();\n    }\n}\n\nif (! function_exists('config')) {\n    /**\n     * More simple way of getting config instances from Factories\n     *\n     * @return mixed\n     */\n    function config(string $name, bool $getShared = true)\n    {\n        return Factories::config($name, ['getShared' => $getShared]);\n    }\n}\n\nif (! function_exists('cookie')) {\n    /**\n     * Simpler way to create a new Cookie instance.\n     *\n     * @param string $name    Name of the cookie\n     * @param string $value   Value of the cookie\n     * @param array  $options Array of options to be passed to the cookie\n     *\n     * @throws CookieException\n     */\n    function cookie(string $name, string $value = '', array $options = []): Cookie\n    {\n        return new Cookie($name, $value, $options);\n    }\n}\n\nif (! function_exists('cookies')) {\n    /**\n     * Fetches the global `CookieStore` instance held by `Response`.\n     *\n     * @param Cookie[] $cookies   If `getGlobal` is false, this is passed to CookieStore's constructor\n     * @param bool     $getGlobal If false, creates a new instance of CookieStore\n     */\n    function cookies(array $cookies = [], bool $getGlobal = true): CookieStore\n    {\n        if ($getGlobal) {\n            return Services::response()->getCookieStore();\n        }\n\n        return new CookieStore($cookies);\n    }\n}\n\nif (! function_exists('csrf_token')) {\n    /**\n     * Returns the CSRF token name.\n     * Can be used in Views when building hidden inputs manually,\n     * or used in javascript vars when using APIs.\n     */\n    function csrf_token(): string\n    {\n        return Services::security()->getTokenName();\n    }\n}\n\nif (! function_exists('csrf_header')) {\n    /**\n     * Returns the CSRF header name.\n     * Can be used in Views by adding it to the meta tag\n     * or used in javascript to define a header name when using APIs.\n     */\n    function csrf_header(): string\n    {\n        return Services::security()->getHeaderName();\n    }\n}\n\nif (! function_exists('csrf_hash')) {\n    /**\n     * Returns the current hash value for the CSRF protection.\n     * Can be used in Views when building hidden inputs manually,\n     * or used in javascript vars for API usage.\n     */\n    function csrf_hash(): string\n    {\n        return Services::security()->getHash();\n    }\n}\n\nif (! function_exists('csrf_field')) {\n    /**\n     * Generates a hidden input field for use within manually generated forms.\n     */\n    function csrf_field(?string $id = null): string\n    {\n        return '<input type=\"hidden\"' . (! empty($id) ? ' id=\"' . esc($id, 'attr') . '\"' : '') . ' name=\"' . csrf_token() . '\" value=\"' . csrf_hash() . '\" />';\n    }\n}\n\nif (! function_exists('csrf_meta')) {\n    /**\n     * Generates a meta tag for use within javascript calls.\n     */\n    function csrf_meta(?string $id = null): string\n    {\n        return '<meta' . (! empty($id) ? ' id=\"' . esc($id, 'attr') . '\"' : '') . ' name=\"' . csrf_header() . '\" content=\"' . csrf_hash() . '\" />';\n    }\n}\n\nif (! function_exists('db_connect')) {\n    /**\n     * Grabs a database connection and returns it to the user.\n     *\n     * This is a convenience wrapper for \\Config\\Database::connect()\n     * and supports the same parameters. Namely:\n     *\n     * When passing in $db, you may pass any of the following to connect:\n     * - group name\n     * - existing connection instance\n     * - array of database configuration values\n     *\n     * If $getShared === false then a new connection instance will be provided,\n     * otherwise it will all calls will return the same instance.\n     *\n     * @param array|ConnectionInterface|string|null $db\n     *\n     * @return BaseConnection\n     */\n    function db_connect($db = null, bool $getShared = true)\n    {\n        return Database::connect($db, $getShared);\n    }\n}\n\nif (! function_exists('dd')) {\n    /**\n     * Prints a Kint debug report and exits.\n     *\n     * @param array ...$vars\n     *\n     * @codeCoverageIgnore Can't be tested ... exits\n     */\n    function dd(...$vars)\n    {\n        // @codeCoverageIgnoreStart\n        Kint::$aliases[] = 'dd';\n        Kint::dump(...$vars);\n\n        exit;\n        // @codeCoverageIgnoreEnd\n    }\n}\n\nif (! function_exists('env')) {\n    /**\n     * Allows user to retrieve values from the environment\n     * variables that have been set. Especially useful for\n     * retrieving values set from the .env file for\n     * use in config files.\n     *\n     * @param string|null $default\n     *\n     * @return mixed\n     */\n    function env(string $key, $default = null)\n    {\n        $value = $_ENV[$key] ?? $_SERVER[$key] ?? getenv($key);\n\n        // Not found? Return the default value\n        if ($value === false) {\n            return $default;\n        }\n\n        // Handle any boolean values\n        switch (strtolower($value)) {\n            case 'true':\n                return true;\n\n            case 'false':\n                return false;\n\n            case 'empty':\n                return '';\n\n            case 'null':\n                return null;\n        }\n\n        return $value;\n    }\n}\n\nif (! function_exists('esc')) {\n    /**\n     * Performs simple auto-escaping of data for security reasons.\n     * Might consider making this more complex at a later date.\n     *\n     * If $data is a string, then it simply escapes and returns it.\n     * If $data is an array, then it loops over it, escaping each\n     * 'value' of the key/value pairs.\n     *\n     * Valid context values: html, js, css, url, attr, raw\n     *\n     * @param array|string $data\n     * @param string       $encoding\n     *\n     * @throws InvalidArgumentException\n     *\n     * @return array|string\n     */\n    function esc($data, string $context = 'html', ?string $encoding = null)\n    {\n        if (is_array($data)) {\n            foreach ($data as &$value) {\n                $value = esc($value, $context);\n            }\n        }\n\n        if (is_string($data)) {\n            $context = strtolower($context);\n\n            // Provide a way to NOT escape data since\n            // this could be called automatically by\n            // the View library.\n            if (empty($context) || $context === 'raw') {\n                return $data;\n            }\n\n            if (! in_array($context, ['html', 'js', 'css', 'url', 'attr'], true)) {\n                throw new InvalidArgumentException('Invalid escape context provided.');\n            }\n\n            $method = $context === 'attr' ? 'escapeHtmlAttr' : 'escape' . ucfirst($context);\n\n            static $escaper;\n            if (! $escaper) {\n                $escaper = new Escaper($encoding);\n            }\n\n            if ($encoding && $escaper->getEncoding() !== $encoding) {\n                $escaper = new Escaper($encoding);\n            }\n\n            $data = $escaper->{$method}($data);\n        }\n\n        return $data;\n    }\n}\n\nif (! function_exists('force_https')) {\n    /**\n     * Used to force a page to be accessed in via HTTPS.\n     * Uses a standard redirect, plus will set the HSTS header\n     * for modern browsers that support, which gives best\n     * protection against man-in-the-middle attacks.\n     *\n     * @see https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\n     *\n     * @param int               $duration How long should the SSL header be set for? (in seconds)\n     *                                    Defaults to 1 year.\n     * @param RequestInterface  $request\n     * @param ResponseInterface $response\n     *\n     * @throws HTTPException\n     */\n    function force_https(int $duration = 31536000, ?RequestInterface $request = null, ?ResponseInterface $response = null)\n    {\n        if ($request === null) {\n            $request = Services::request(null, true);\n        }\n        if ($response === null) {\n            $response = Services::response(null, true);\n        }\n\n        if ((ENVIRONMENT !== 'testing' && (is_cli() || $request->isSecure())) || (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'test')) {\n            // @codeCoverageIgnoreStart\n            return;\n            // @codeCoverageIgnoreEnd\n        }\n\n        // If the session status is active, we should regenerate\n        // the session ID for safety sake.\n        if (ENVIRONMENT !== 'testing' && session_status() === PHP_SESSION_ACTIVE) {\n            // @codeCoverageIgnoreStart\n            Services::session(null, true)\n                ->regenerate();\n            // @codeCoverageIgnoreEnd\n        }\n\n        $baseURL = config(App::class)->baseURL;\n\n        if (strpos($baseURL, 'https://') === 0) {\n            $baseURL = substr($baseURL, strlen('https://'));\n        } elseif (strpos($baseURL, 'http://') === 0) {\n            $baseURL = substr($baseURL, strlen('http://'));\n        }\n\n        $uri = URI::createURIString(\n            'https',\n            $baseURL,\n            $request->getUri()->getPath(), // Absolute URIs should use a \"/\" for an empty path\n            $request->getUri()->getQuery(),\n            $request->getUri()->getFragment()\n        );\n\n        // Set an HSTS header\n        $response->setHeader('Strict-Transport-Security', 'max-age=' . $duration);\n        $response->redirect($uri);\n        $response->sendHeaders();\n\n        if (ENVIRONMENT !== 'testing') {\n            // @codeCoverageIgnoreStart\n            exit();\n            // @codeCoverageIgnoreEnd\n        }\n    }\n}\n\nif (! function_exists('function_usable')) {\n    /**\n     * Function usable\n     *\n     * Executes a function_exists() check, and if the Suhosin PHP\n     * extension is loaded - checks whether the function that is\n     * checked might be disabled in there as well.\n     *\n     * This is useful as function_exists() will return FALSE for\n     * functions disabled via the *disable_functions* php.ini\n     * setting, but not for *suhosin.executor.func.blacklist* and\n     * *suhosin.executor.disable_eval*. These settings will just\n     * terminate script execution if a disabled function is executed.\n     *\n     * The above described behavior turned out to be a bug in Suhosin,\n     * but even though a fix was committed for 0.9.34 on 2012-02-12,\n     * that version is yet to be released. This function will therefore\n     * be just temporary, but would probably be kept for a few years.\n     *\n     * @see   http://www.hardened-php.net/suhosin/\n     *\n     * @param string $functionName Function to check for\n     *\n     * @return bool TRUE if the function exists and is safe to call,\n     *              FALSE otherwise.\n     *\n     * @codeCoverageIgnore This is too exotic\n     */\n    function function_usable(string $functionName): bool\n    {\n        static $_suhosin_func_blacklist;\n\n        if (function_exists($functionName)) {\n            if (! isset($_suhosin_func_blacklist)) {\n                $_suhosin_func_blacklist = extension_loaded('suhosin') ? explode(',', trim(ini_get('suhosin.executor.func.blacklist'))) : [];\n            }\n\n            return ! in_array($functionName, $_suhosin_func_blacklist, true);\n        }\n\n        return false;\n    }\n}\n\nif (! function_exists('helper')) {\n    /**\n     * Loads a helper file into memory. Supports namespaced helpers,\n     * both in and out of the 'helpers' directory of a namespaced directory.\n     *\n     * Will load ALL helpers of the matching name, in the following order:\n     *   1. app/Helpers\n     *   2. {namespace}/Helpers\n     *   3. system/Helpers\n     *\n     * @param array|string $filenames\n     *\n     * @throws FileNotFoundException\n     */\n    function helper($filenames)\n    {\n        static $loaded = [];\n\n        $loader = Services::locator();\n\n        if (! is_array($filenames)) {\n            $filenames = [$filenames];\n        }\n\n        // Store a list of all files to include...\n        $includes = [];\n\n        foreach ($filenames as $filename) {\n            // Store our system and application helper\n            // versions so that we can control the load ordering.\n            $systemHelper  = null;\n            $appHelper     = null;\n            $localIncludes = [];\n\n            if (strpos($filename, '_helper') === false) {\n                $filename .= '_helper';\n            }\n\n            // Check if this helper has already been loaded\n            if (in_array($filename, $loaded, true)) {\n                continue;\n            }\n\n            // If the file is namespaced, we'll just grab that\n            // file and not search for any others\n            if (strpos($filename, '\\\\') !== false) {\n                $path = $loader->locateFile($filename, 'Helpers');\n\n                if (empty($path)) {\n                    throw FileNotFoundException::forFileNotFound($filename);\n                }\n\n                $includes[] = $path;\n                $loaded[]   = $filename;\n            } else {\n                // No namespaces, so search in all available locations\n                $paths = $loader->search('Helpers/' . $filename);\n\n                foreach ($paths as $path) {\n                    if (strpos($path, APPPATH . 'Helpers' . DIRECTORY_SEPARATOR) === 0) {\n                        $appHelper = $path;\n                    } elseif (strpos($path, SYSTEMPATH . 'Helpers' . DIRECTORY_SEPARATOR) === 0) {\n                        $systemHelper = $path;\n                    } else {\n                        $localIncludes[] = $path;\n                        $loaded[]        = $filename;\n                    }\n                }\n\n                // App-level helpers should override all others\n                if (! empty($appHelper)) {\n                    $includes[] = $appHelper;\n                    $loaded[]   = $filename;\n                }\n\n                // All namespaced files get added in next\n                $includes = array_merge($includes, $localIncludes);\n\n                // And the system default one should be added in last.\n                if (! empty($systemHelper)) {\n                    $includes[] = $systemHelper;\n                    $loaded[]   = $filename;\n                }\n            }\n        }\n\n        // Now actually include all of the files\n        foreach ($includes as $path) {\n            include_once $path;\n        }\n    }\n}\n\nif (! function_exists('is_cli')) {\n    /**\n     * Check if PHP was invoked from the command line.\n     *\n     * @codeCoverageIgnore Cannot be tested fully as PHPUnit always run in php-cli\n     */\n    function is_cli(): bool\n    {\n        if (in_array(PHP_SAPI, ['cli', 'phpdbg'], true)) {\n            return true;\n        }\n\n        // PHP_SAPI could be 'cgi-fcgi', 'fpm-fcgi'.\n        // See https://github.com/codeigniter4/CodeIgniter4/pull/5393\n        return ! isset($_SERVER['REMOTE_ADDR']) && ! isset($_SERVER['REQUEST_METHOD']);\n    }\n}\n\nif (! function_exists('is_really_writable')) {\n    /**\n     * Tests for file writability\n     *\n     * is_writable() returns TRUE on Windows servers when you really can't write to\n     * the file, based on the read-only attribute. is_writable() is also unreliable\n     * on Unix servers if safe_mode is on.\n     *\n     * @see https://bugs.php.net/bug.php?id=54709\n     *\n     * @throws Exception\n     *\n     * @codeCoverageIgnore Not practical to test, as travis runs on linux\n     */\n    function is_really_writable(string $file): bool\n    {\n        // If we're on a Unix server we call is_writable\n        if (DIRECTORY_SEPARATOR === '/') {\n            return is_writable($file);\n        }\n\n        /* For Windows servers and safe_mode \"on\" installations we'll actually\n         * write a file then read it. Bah...\n         */\n        if (is_dir($file)) {\n            $file = rtrim($file, '/') . '/' . bin2hex(random_bytes(16));\n            if (($fp = @fopen($file, 'ab')) === false) {\n                return false;\n            }\n\n            fclose($fp);\n            @chmod($file, 0777);\n            @unlink($file);\n\n            return true;\n        }\n\n        if (! is_file($file) || ($fp = @fopen($file, 'ab')) === false) {\n            return false;\n        }\n\n        fclose($fp);\n\n        return true;\n    }\n}\n\nif (! function_exists('lang')) {\n    /**\n     * A convenience method to translate a string or array of them and format\n     * the result with the intl extension's MessageFormatter.\n     *\n     * @return string\n     */\n    function lang(string $line, array $args = [], ?string $locale = null)\n    {\n        $language = Services::language();\n\n        // Get active locale\n        $activeLocale = $language->getLocale();\n\n        if ($locale && $locale !== $activeLocale) {\n            $language->setLocale($locale);\n        }\n\n        $line = $language->getLine($line, $args);\n\n        if ($locale && $locale !== $activeLocale) {\n            // Reset to active locale\n            $language->setLocale($activeLocale);\n        }\n\n        return $line;\n    }\n}\n\nif (! function_exists('log_message')) {\n    /**\n     * A convenience/compatibility method for logging events through\n     * the Log system.\n     *\n     * Allowed log levels are:\n     *  - emergency\n     *  - alert\n     *  - critical\n     *  - error\n     *  - warning\n     *  - notice\n     *  - info\n     *  - debug\n     *\n     * @return mixed\n     */\n    function log_message(string $level, string $message, array $context = [])\n    {\n        // When running tests, we want to always ensure that the\n        // TestLogger is running, which provides utilities for\n        // for asserting that logs were called in the test code.\n        if (ENVIRONMENT === 'testing') {\n            $logger = new TestLogger(new Logger());\n\n            return $logger->log($level, $message, $context);\n        }\n\n        // @codeCoverageIgnoreStart\n        return Services::logger(true)\n            ->log($level, $message, $context);\n        // @codeCoverageIgnoreEnd\n    }\n}\n\nif (! function_exists('model')) {\n    /**\n     * More simple way of getting model instances from Factories\n     *\n     * @template T of Model\n     *\n     * @param class-string<T> $name\n     *\n     * @return T\n     * @phpstan-return Model\n     */\n    function model(string $name, bool $getShared = true, ?ConnectionInterface &$conn = null)\n    {\n        return Factories::models($name, ['getShared' => $getShared], $conn);\n    }\n}\n\nif (! function_exists('old')) {\n    /**\n     * Provides access to \"old input\" that was set in the session\n     * during a redirect()->withInput().\n     *\n     * @param null        $default\n     * @param bool|string $escape\n     *\n     * @return mixed|null\n     */\n    function old(string $key, $default = null, $escape = 'html')\n    {\n        // Ensure the session is loaded\n        if (session_status() === PHP_SESSION_NONE && ENVIRONMENT !== 'testing') {\n            // @codeCoverageIgnoreStart\n            session();\n            // @codeCoverageIgnoreEnd\n        }\n\n        $request = Services::request();\n\n        $value = $request->getOldInput($key);\n\n        // Return the default value if nothing\n        // found in the old input.\n        if ($value === null) {\n            return $default;\n        }\n\n        return $escape === false ? $value : esc($value, $escape);\n    }\n}\n\nif (! function_exists('redirect')) {\n    /**\n     * Convenience method that works with the current global $request and\n     * $router instances to redirect using named/reverse-routed routes\n     * to determine the URL to go to.\n     *\n     * If more control is needed, you must use $response->redirect explicitly.\n     *\n     * @param string $route\n     */\n    function redirect(?string $route = null): RedirectResponse\n    {\n        $response = Services::redirectresponse(null, true);\n\n        if (! empty($route)) {\n            return $response->route($route);\n        }\n\n        return $response;\n    }\n}\n\nif (! function_exists('remove_invisible_characters')) {\n    /**\n     * Remove Invisible Characters\n     *\n     * This prevents sandwiching null characters\n     * between ascii characters, like Java\\0script.\n     */\n    function remove_invisible_characters(string $str, bool $urlEncoded = true): string\n    {\n        $nonDisplayables = [];\n\n        // every control character except newline (dec 10),\n        // carriage return (dec 13) and horizontal tab (dec 09)\n        if ($urlEncoded) {\n            $nonDisplayables[] = '/%0[0-8bcef]/';  // url encoded 00-08, 11, 12, 14, 15\n            $nonDisplayables[] = '/%1[0-9a-f]/';   // url encoded 16-31\n        }\n\n        $nonDisplayables[] = '/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]+/S';   // 00-08, 11, 12, 14-31, 127\n\n        do {\n            $str = preg_replace($nonDisplayables, '', $str, -1, $count);\n        } while ($count);\n\n        return $str;\n    }\n}\n\nif (! function_exists('route_to')) {\n    /**\n     * Given a controller/method string and any params,\n     * will attempt to build the relative URL to the\n     * matching route.\n     *\n     * NOTE: This requires the controller/method to\n     * have a route defined in the routes Config file.\n     *\n     * @param mixed ...$params\n     *\n     * @return false|string\n     */\n    function route_to(string $method, ...$params)\n    {\n        return Services::routes()->reverseRoute($method, ...$params);\n    }\n}\n\nif (! function_exists('session')) {\n    /**\n     * A convenience method for accessing the session instance,\n     * or an item that has been set in the session.\n     *\n     * Examples:\n     *    session()->set('foo', 'bar');\n     *    $foo = session('bar');\n     *\n     * @param string $val\n     *\n     * @return mixed|Session|null\n     */\n    function session(?string $val = null)\n    {\n        $session = Services::session();\n\n        // Returning a single item?\n        if (is_string($val)) {\n            return $session->get($val);\n        }\n\n        return $session;\n    }\n}\n\nif (! function_exists('service')) {\n    /**\n     * Allows cleaner access to the Services Config file.\n     * Always returns a SHARED instance of the class, so\n     * calling the function multiple times should always\n     * return the same instance.\n     *\n     * These are equal:\n     *  - $timer = service('timer')\n     *  - $timer = \\CodeIgniter\\Config\\Services::timer();\n     *\n     * @param mixed ...$params\n     *\n     * @return mixed\n     */\n    function service(string $name, ...$params)\n    {\n        return Services::$name(...$params);\n    }\n}\n\nif (! function_exists('single_service')) {\n    /**\n     * Always returns a new instance of the class.\n     *\n     * @param mixed ...$params\n     *\n     * @return mixed\n     */\n    function single_service(string $name, ...$params)\n    {\n        $service = Services::serviceExists($name);\n\n        if ($service === null) {\n            // The service is not defined anywhere so just return.\n            return null;\n        }\n\n        $method = new ReflectionMethod($service, $name);\n        $count  = $method->getNumberOfParameters();\n        $mParam = $method->getParameters();\n        $params = $params ?? [];\n\n        if ($count === 1) {\n            // This service needs only one argument, which is the shared\n            // instance flag, so let's wrap up and pass false here.\n            return $service::$name(false);\n        }\n\n        // Fill in the params with the defaults, but stop before the last\n        for ($startIndex = count($params); $startIndex <= $count - 2; $startIndex++) {\n            $params[$startIndex] = $mParam[$startIndex]->getDefaultValue();\n        }\n\n        // Ensure the last argument will not create a shared instance\n        $params[$count - 1] = false;\n\n        return $service::$name(...$params);\n    }\n}\n\nif (! function_exists('slash_item')) {\n    // Unlike CI3, this function is placed here because\n    // it's not a config, or part of a config.\n    /**\n     * Fetch a config file item with slash appended (if not empty)\n     *\n     * @param string $item Config item name\n     *\n     * @return string|null The configuration item or NULL if\n     *                     the item doesn't exist\n     */\n    function slash_item(string $item): ?string\n    {\n        $config     = config(App::class);\n        $configItem = $config->{$item};\n\n        if (! isset($configItem) || empty(trim($configItem))) {\n            return $configItem;\n        }\n\n        return rtrim($configItem, '/') . '/';\n    }\n}\n\nif (! function_exists('stringify_attributes')) {\n    /**\n     * Stringify attributes for use in HTML tags.\n     *\n     * Helper function used to convert a string, array, or object\n     * of attributes to a string.\n     *\n     * @param mixed $attributes string, array, object\n     */\n    function stringify_attributes($attributes, bool $js = false): string\n    {\n        $atts = '';\n\n        if (empty($attributes)) {\n            return $atts;\n        }\n\n        if (is_string($attributes)) {\n            return ' ' . $attributes;\n        }\n\n        $attributes = (array) $attributes;\n\n        foreach ($attributes as $key => $val) {\n            $atts .= ($js) ? $key . '=' . esc($val, 'js') . ',' : ' ' . $key . '=\"' . esc($val) . '\"';\n        }\n\n        return rtrim($atts, ',');\n    }\n}\n\nif (! function_exists('timer')) {\n    /**\n     * A convenience method for working with the timer.\n     * If no parameter is passed, it will return the timer instance,\n     * otherwise will start or stop the timer intelligently.\n     *\n     * @return mixed|Timer\n     */\n    function timer(?string $name = null)\n    {\n        $timer = Services::timer();\n\n        if (empty($name)) {\n            return $timer;\n        }\n\n        if ($timer->has($name)) {\n            return $timer->stop($name);\n        }\n\n        return $timer->start($name);\n    }\n}\n\nif (! function_exists('trace')) {\n    /**\n     * Provides a backtrace to the current execution point, from Kint.\n     */\n    function trace()\n    {\n        Kint::$aliases[] = 'trace';\n        Kint::trace();\n    }\n}\n\nif (! function_exists('view')) {\n    /**\n     * Grabs the current RendererInterface-compatible class\n     * and tells it to render the specified view. Simply provides\n     * a convenience method that can be used in Controllers,\n     * libraries, and routed closures.\n     *\n     * NOTE: Does not provide any escaping of the data, so that must\n     * all be handled manually by the developer.\n     *\n     * @param array $options Unused - reserved for third-party extensions.\n     */\n    function view(string $name, array $data = [], array $options = []): string\n    {\n        /**\n         * @var CodeIgniter\\View\\View $renderer\n         */\n        $renderer = Services::renderer();\n\n        $saveData = config(View::class)->saveData;\n\n        if (array_key_exists('saveData', $options)) {\n            $saveData = (bool) $options['saveData'];\n            unset($options['saveData']);\n        }\n\n        return $renderer->setData($data, 'raw')->render($name, $options, $saveData);\n    }\n}\n\nif (! function_exists('view_cell')) {\n    /**\n     * View cells are used within views to insert HTML chunks that are managed\n     * by other classes.\n     *\n     * @param null $params\n     *\n     * @throws ReflectionException\n     */\n    function view_cell(string $library, $params = null, int $ttl = 0, ?string $cacheName = null): string\n    {\n        return Services::viewcell()\n            ->render($library, $params, $ttl, $cacheName);\n    }\n}\n\n/**\n * These helpers come from Laravel so will not be\n * re-tested and can be ignored safely.\n *\n * @see https://github.com/laravel/framework/blob/8.x/src/Illuminate/Support/helpers.php\n */\nif (! function_exists('class_basename')) {\n    /**\n     * Get the class \"basename\" of the given object / class.\n     *\n     * @param object|string $class\n     *\n     * @return string\n     *\n     * @codeCoverageIgnore\n     */\n    function class_basename($class)\n    {\n        $class = is_object($class) ? get_class($class) : $class;\n\n        return basename(str_replace('\\\\', '/', $class));\n    }\n}\n\nif (! function_exists('class_uses_recursive')) {\n    /**\n     * Returns all traits used by a class, its parent classes and trait of their traits.\n     *\n     * @param object|string $class\n     *\n     * @return array\n     *\n     * @codeCoverageIgnore\n     */\n    function class_uses_recursive($class)\n    {\n        if (is_object($class)) {\n            $class = get_class($class);\n        }\n\n        $results = [];\n\n        foreach (array_reverse(class_parents($class)) + [$class => $class] as $class) {\n            $results += trait_uses_recursive($class);\n        }\n\n        return array_unique($results);\n    }\n}\n\nif (! function_exists('trait_uses_recursive')) {\n    /**\n     * Returns all traits used by a trait and its traits.\n     *\n     * @param string $trait\n     *\n     * @return array\n     *\n     * @codeCoverageIgnore\n     */\n    function trait_uses_recursive($trait)\n    {\n        $traits = class_uses($trait) ?: [];\n\n        foreach ($traits as $trait) {\n            $traits += trait_uses_recursive($trait);\n        }\n\n        return $traits;\n    }\n}\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter;\n\nuse CodeIgniter\\Config\\BaseService;\nuse CodeIgniter\\Config\\Services;\nuse CodeIgniter\\HTTP\\RedirectResponse;\nuse CodeIgniter\\HTTP\\Response;\nuse CodeIgniter\\HTTP\\URI;\nuse CodeIgniter\\HTTP\\UserAgent;\nuse CodeIgniter\\Router\\RouteCollection;\nuse CodeIgniter\\Session\\Handlers\\FileHandler;\nuse CodeIgniter\\Session\\Session;\nuse CodeIgniter\\Test\\CIUnitTestCase;\nuse CodeIgniter\\Test\\Mock\\MockIncomingRequest;\nuse CodeIgniter\\Test\\Mock\\MockSecurity;\nuse CodeIgniter\\Test\\Mock\\MockSession;\nuse CodeIgniter\\Test\\TestLogger;\nuse Config\\App;\nuse Config\\Logger;\nuse Config\\Modules;\nuse InvalidArgumentException;\nuse Kint;\nuse stdClass;\nuse Tests\\Support\\Models\\JobModel;\n\n/**\n * @backupGlobals enabled\n *\n * @internal\n */\nfinal class CommonFunctionsTest extends CIUnitTestCase\n{\n    protected function setUp(): void\n    {\n        unset($_ENV['foo'], $_SERVER['foo']);\n        Services::reset();\n\n        parent::setUp();\n    }\n\n    public function testStringifyAttributes()\n    {\n        $this->assertSame(' class=\"foo\" id=\"bar\"', stringify_attributes(['class' => 'foo', 'id' => 'bar']));\n\n        $atts        = new stdClass();\n        $atts->class = 'foo';\n        $atts->id    = 'bar';\n        $this->assertSame(' class=\"foo\" id=\"bar\"', stringify_attributes($atts));\n\n        $atts = new stdClass();\n        $this->assertSame('', stringify_attributes($atts));\n\n        $this->assertSame(' class=\"foo\" id=\"bar\"', stringify_attributes('class=\"foo\" id=\"bar\"'));\n\n        $this->assertSame('', stringify_attributes([]));\n    }\n\n    public function testStringifyJsAttributes()\n    {\n        $this->assertSame('width=800,height=600', stringify_attributes(['width' => '800', 'height' => '600'], true));\n\n        $atts         = new stdClass();\n        $atts->width  = 800;\n        $atts->height = 600;\n        $this->assertSame('width=800,height=600', stringify_attributes($atts, true));\n    }\n\n    public function testEnvReturnsDefault()\n    {\n        $this->assertSame('baz', env('foo', 'baz'));\n    }\n\n    public function testEnvGetsFromSERVER()\n    {\n        $_SERVER['foo'] = 'bar';\n\n        $this->assertSame('bar', env('foo', 'baz'));\n    }\n\n    public function testEnvGetsFromENV()\n    {\n        $_ENV['foo'] = 'bar';\n\n        $this->assertSame('bar', env('foo', 'baz'));\n    }\n\n    public function testEnvBooleans()\n    {\n        $_ENV['p1'] = 'true';\n        $_ENV['p2'] = 'false';\n        $_ENV['p3'] = 'empty';\n        $_ENV['p4'] = 'null';\n\n        $this->assertTrue(env('p1'));\n        $this->assertFalse(env('p2'));\n        $this->assertEmpty(env('p3'));\n        $this->assertNull(env('p4'));\n    }\n\n    public function testRedirectReturnsRedirectResponse()\n    {\n        $_SERVER['REQUEST_METHOD'] = 'GET';\n\n        $response = $this->createMock(Response::class);\n        $routes   = new RouteCollection(\n            Services::locator(),\n            new Modules()\n        );\n        \\CodeIgniter\\Services::injectMock('response', $response);\n        \\CodeIgniter\\Services::injectMock('routes', $routes);\n\n        $routes->add('home/base', 'Controller::index', ['as' => 'base']);\n        $response->method('redirect')->willReturnArgument(0);\n\n        $this->assertInstanceOf(RedirectResponse::class, redirect('base'));\n    }\n\n    public function testRedirectDefault()\n    {\n        $this->assertInstanceOf(RedirectResponse::class, redirect());\n    }\n\n    public function testView()\n    {\n        $data = [\n            'testString' => 'bar',\n            'bar'        => 'baz',\n        ];\n        $expected = '<h1>bar</h1>';\n        $this->assertStringContainsString($expected, view('\\Tests\\Support\\View\\Views\\simple', $data));\n    }\n\n    public function testViewSavedData()\n    {\n        $data = [\n            'testString' => 'bar',\n            'bar'        => 'baz',\n        ];\n        $expected = '<h1>bar</h1>';\n        $this->assertStringContainsString($expected, view('\\Tests\\Support\\View\\Views\\simple', $data, ['saveData' => true]));\n        $this->assertStringContainsString($expected, view('\\Tests\\Support\\View\\Views\\simple'));\n    }\n\n    public function testViewCell()\n    {\n        $expected = 'Hello';\n        $this->assertSame($expected, view_cell('\\Tests\\Support\\View\\SampleClass::hello'));\n    }\n\n    public function testEscapeWithDifferentEncodings()\n    {\n        $this->assertSame('&lt;x', esc('<x', 'html', 'utf-8'));\n        $this->assertSame('&lt;x', esc('<x', 'html', 'iso-8859-1'));\n        $this->assertSame('&lt;x', esc('<x', 'html', 'windows-1251'));\n    }\n\n    public function testEscapeBadContext()\n    {\n        $this->expectException(InvalidArgumentException::class);\n        esc(['width' => '800', 'height' => '600'], 'bogus');\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState  disabled\n     */\n    public function testSessionInstance()\n    {\n        $this->injectSessionMock();\n\n        $this->assertInstanceOf(Session::class, session());\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState  disabled\n     */\n    public function testSessionVariable()\n    {\n        $this->injectSessionMock();\n\n        $_SESSION['notbogus'] = 'Hi there';\n\n        $this->assertSame('Hi there', session('notbogus'));\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState  disabled\n     */\n    public function testSessionVariableNotThere()\n    {\n        $this->injectSessionMock();\n\n        $_SESSION['bogus'] = 'Hi there';\n        $this->assertNull(session('notbogus'));\n    }\n\n    public function testRouteTo()\n    {\n        // prime the pump\n        $routes = service('routes');\n        $routes->add('path/(:any)/to/(:num)', 'myController::goto/$1/$2');\n\n        $this->assertSame('/path/string/to/13', route_to('myController::goto', 'string', 13));\n    }\n\n    public function testInvisible()\n    {\n        $this->assertSame('Javascript', remove_invisible_characters(\"Java\\0script\"));\n    }\n\n    public function testInvisibleEncoded()\n    {\n        $this->assertSame('Javascript', remove_invisible_characters('Java%0cscript'));\n    }\n\n    public function testAppTimezone()\n    {\n        $this->assertSame('America/Chicago', app_timezone());\n    }\n\n    public function testCSRFToken()\n    {\n        Services::injectMock('security', new MockSecurity(new App()));\n\n        $this->assertSame('csrf_test_name', csrf_token());\n    }\n\n    public function testCSRFHeader()\n    {\n        $this->assertSame('X-CSRF-TOKEN', csrf_header());\n    }\n\n    public function testHash()\n    {\n        $this->assertSame(32, strlen(csrf_hash()));\n    }\n\n    public function testCSRFField()\n    {\n        $this->assertStringContainsString('<input type=\"hidden\" ', csrf_field());\n    }\n\n    public function testCSRFMeta()\n    {\n        $this->assertStringContainsString('<meta name=\"X-CSRF-TOKEN\" ', csrf_meta());\n    }\n\n    public function testModelNotExists()\n    {\n        $this->assertNull(model(UnexsistenceClass::class));\n    }\n\n    public function testModelExistsBasename()\n    {\n        $this->assertInstanceOf(JobModel::class, model('JobModel'));\n    }\n\n    public function testModelExistsClassname()\n    {\n        $this->assertInstanceOf(JobModel::class, model(JobModel::class));\n    }\n\n    public function testModelExistsAbsoluteClassname()\n    {\n        $this->assertInstanceOf(JobModel::class, model('\\Tests\\Support\\Models\\JobModel'));\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState  disabled\n     */\n    public function testOldInput()\n    {\n        $this->injectSessionMock();\n        // setup from RedirectResponseTest...\n        $_SERVER['REQUEST_METHOD'] = 'GET';\n\n        $this->config          = new App();\n        $this->config->baseURL = 'http://example.com/';\n\n        $this->routes = new RouteCollection(Services::locator(), new Modules());\n        Services::injectMock('routes', $this->routes);\n\n        $this->request = new MockIncomingRequest($this->config, new URI('http://example.com'), null, new UserAgent());\n        Services::injectMock('request', $this->request);\n\n        // setup & ask for a redirect...\n        $_SESSION = [];\n        $_GET     = ['foo' => 'bar'];\n        $_POST    = [\n            'bar'    => 'baz',\n            'zibble' => 'fritz',\n        ];\n\n        $response = new RedirectResponse(new App());\n        $response->withInput();\n\n        $this->assertSame('bar', old('foo')); // regular parameter\n        $this->assertSame('doo', old('yabba dabba', 'doo')); // non-existing parameter\n        $this->assertSame('fritz', old('zibble'));\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState  disabled\n     */\n    public function testOldInputSerializeData()\n    {\n        $this->injectSessionMock();\n        // setup from RedirectResponseTest...\n        $_SERVER['REQUEST_METHOD'] = 'GET';\n\n        $this->config          = new App();\n        $this->config->baseURL = 'http://example.com/';\n\n        $this->routes = new RouteCollection(Services::locator(), new Modules());\n        Services::injectMock('routes', $this->routes);\n\n        $this->request = new MockIncomingRequest($this->config, new URI('http://example.com'), null, new UserAgent());\n        Services::injectMock('request', $this->request);\n\n        // setup & ask for a redirect...\n        $_SESSION = [];\n        $_GET     = [];\n        $_POST    = [\n            'zibble' => serialize('fritz'),\n        ];\n\n        $response = new RedirectResponse(new App());\n        $response->withInput();\n\n        // serialized parameters are only HTML-escaped.\n        $this->assertSame('s:5:&quot;fritz&quot;;', old('zibble'));\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/1492\n     * @runInSeparateProcess\n     * @preserveGlobalState  disabled\n     */\n    public function testOldInputArray()\n    {\n        $this->injectSessionMock();\n        // setup from RedirectResponseTest...\n        $_SERVER['REQUEST_METHOD'] = 'GET';\n\n        $this->config          = new App();\n        $this->config->baseURL = 'http://example.com/';\n\n        $this->routes = new RouteCollection(Services::locator(), new Modules());\n        Services::injectMock('routes', $this->routes);\n\n        $this->request = new MockIncomingRequest($this->config, new URI('http://example.com'), null, new UserAgent());\n        Services::injectMock('request', $this->request);\n\n        $locations = [\n            'AB' => 'Alberta',\n            'BC' => 'British Columbia',\n            'SK' => 'Saskatchewan',\n        ];\n\n        // setup & ask for a redirect...\n        $_SESSION = [];\n        $_GET     = [];\n        $_POST    = ['location' => $locations];\n\n        $response = new RedirectResponse(new App());\n        $response->withInput();\n\n        $this->assertSame($locations, old('location'));\n    }\n\n    public function testReallyWritable()\n    {\n        // cannot test fully on *nix\n        $this->assertTrue(is_really_writable(WRITEPATH));\n    }\n\n    public function testSlashItem()\n    {\n        $this->assertSame('/', slash_item('cookiePath')); // slash already there\n        $this->assertSame('', slash_item('cookieDomain')); // empty, so untouched\n        $this->assertSame('en/', slash_item('defaultLocale')); // slash appended\n    }\n\n    protected function injectSessionMock()\n    {\n        $defaults = [\n            'sessionDriver'            => 'CodeIgniter\\Session\\Handlers\\FileHandler',\n            'sessionCookieName'        => 'ci_session',\n            'sessionExpiration'        => 7200,\n            'sessionSavePath'          => null,\n            'sessionMatchIP'           => false,\n            'sessionTimeToUpdate'      => 300,\n            'sessionRegenerateDestroy' => false,\n            'cookieDomain'             => '',\n            'cookiePrefix'             => '',\n            'cookiePath'               => '/',\n            'cookieSecure'             => false,\n            'cookieSameSite'           => 'Lax',\n        ];\n\n        $appConfig = new App();\n\n        foreach ($defaults as $key => $config) {\n            $appConfig->{$key} = $config;\n        }\n\n        $session = new MockSession(new FileHandler($appConfig, '127.0.0.1'), $appConfig);\n        $session->setLogger(new TestLogger(new Logger()));\n        BaseService::injectMock('session', $session);\n    }\n\n    // Make sure cookies are set by RedirectResponse this way\n    // See https://github.com/codeigniter4/CodeIgniter4/issues/1393\n    public function testRedirectResponseCookies1()\n    {\n        $loginTime = time();\n\n        $routes = service('routes');\n        $routes->add('user/login', 'Auth::verify', ['as' => 'login']);\n\n        $answer1 = redirect()->route('login')\n            ->setCookie('foo', 'onething', YEAR)\n            ->setCookie('login_time', $loginTime, YEAR);\n\n        $this->assertTrue($answer1->hasCookie('foo', 'onething'));\n        $this->assertTrue($answer1->hasCookie('login_time'));\n    }\n\n    public function testTrace()\n    {\n        ob_start();\n        trace();\n        $content = ob_get_clean();\n\n        $this->assertStringContainsString('Debug Backtrace', $content);\n    }\n\n    public function testViewNotSaveData()\n    {\n        $data = [\n            'testString' => 'bar',\n            'bar'        => 'baz',\n        ];\n        $this->assertStringContainsString('<h1>bar</h1>', view('\\Tests\\Support\\View\\Views\\simples', $data, ['saveData' => false]));\n        $this->assertStringContainsString('<h1>is_not</h1>', view('\\Tests\\Support\\View\\Views\\simples'));\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState  disabled\n     */\n    public function testForceHttpsNullRequestAndResponse()\n    {\n        $this->assertNull(Services::response()->header('Location'));\n\n        force_https();\n\n        $this->assertSame('https://example.com/', Services::response()->header('Location')->getValue());\n    }\n\n    /**\n     * @dataProvider dirtyPathsProvider\n     *\n     * @param mixed $input\n     * @param mixed $expected\n     */\n    public function testCleanPathActuallyCleaningThePaths($input, $expected)\n    {\n        $this->assertSame($expected, clean_path($input));\n    }\n\n    public function dirtyPathsProvider()\n    {\n        $ds = DIRECTORY_SEPARATOR;\n\n        return [\n            [\n                ROOTPATH . 'spark',\n                'ROOTPATH' . $ds . 'spark',\n            ],\n            [\n                APPPATH . 'Config' . $ds . 'App.php',\n                'APPPATH' . $ds . 'Config' . $ds . 'App.php',\n            ],\n            [\n                SYSTEMPATH . 'CodeIgniter.php',\n                'SYSTEMPATH' . $ds . 'CodeIgniter.php',\n            ],\n            [\n                VENDORPATH . 'autoload.php',\n                'VENDORPATH' . $ds . 'autoload.php',\n            ],\n            [\n                FCPATH . 'index.php',\n                'FCPATH' . $ds . 'index.php',\n            ],\n        ];\n    }\n\n    public function testIsCli()\n    {\n        $this->assertIsBool(is_cli());\n        $this->assertTrue(is_cli());\n    }\n\n    public function testDWithCSP()\n    {\n        /** @var App $config */\n        $config       = config(App::class);\n        $CSPEnabled   = $config->CSPEnabled;\n        $cliDetection = Kint::$cli_detection;\n\n        $config->CSPEnabled  = true;\n        Kint::$cli_detection = false;\n\n        $this->expectOutputRegex('/<script {csp-script-nonce} class=\"kint-rich-script\">/u');\n        d('string');\n\n        // Restore settings\n        $config->CSPEnabled  = $CSPEnabled;\n        Kint::$cli_detection = $cliDetection;\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState  disabled\n     */\n    public function testTraceWithCSP()\n    {\n        /** @var App $config */\n        $config              = config(App::class);\n        $config->CSPEnabled  = true;\n        Kint::$cli_detection = false;\n\n        $this->expectOutputRegex('/<style {csp-style-nonce} class=\"kint-rich-style\">/u');\n        trace();\n    }\n}\n", "<?php\n\n/**\n * This file is part of CodeIgniter 4 framework.\n *\n * (c) CodeIgniter Foundation <admin@codeigniter.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\nnamespace CodeIgniter\\HTTP;\n\nuse CodeIgniter\\HTTP\\Exceptions\\HTTPException;\nuse CodeIgniter\\HTTP\\Files\\UploadedFile;\nuse CodeIgniter\\Test\\CIUnitTestCase;\nuse Config\\App;\n\n/**\n * @backupGlobals enabled\n *\n * @internal\n */\nfinal class IncomingRequestTest extends CIUnitTestCase\n{\n    /**\n     * @var IncomingRequest\n     */\n    protected $request;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $_POST = $_GET = $_SERVER = $_REQUEST = $_ENV = $_COOKIE = $_SESSION = [];\n    }\n\n    public function testCanGrabRequestVars()\n    {\n        $_REQUEST['TEST'] = 5;\n\n        $this->assertSame('5', $this->request->getVar('TEST'));\n        $this->assertNull($this->request->getVar('TESTY'));\n    }\n\n    public function testCanGrabGetVars()\n    {\n        $_GET['TEST'] = 5;\n\n        $this->assertSame('5', $this->request->getGet('TEST'));\n        $this->assertNull($this->request->getGet('TESTY'));\n    }\n\n    public function testCanGrabPostVars()\n    {\n        $_POST['TEST'] = 5;\n\n        $this->assertSame('5', $this->request->getPost('TEST'));\n        $this->assertNull($this->request->getPost('TESTY'));\n    }\n\n    public function testCanGrabPostBeforeGet()\n    {\n        $_POST['TEST'] = 5;\n        $_GET['TEST']  = 3;\n\n        $this->assertSame('5', $this->request->getPostGet('TEST'));\n        $this->assertSame('3', $this->request->getGetPost('TEST'));\n    }\n\n    public function testNoOldInput()\n    {\n        $this->assertNull($this->request->getOldInput('name'));\n    }\n\n    public function testCanGetOldInput()\n    {\n        $_SESSION['_ci_old_input'] = [\n            'get'  => ['one' => 'two'],\n            'post' => ['name' => 'foo'],\n        ];\n\n        $this->assertSame('foo', $this->request->getOldInput('name'));\n        $this->assertSame('two', $this->request->getOldInput('one'));\n    }\n\n    public function testCanGetOldInputDotted()\n    {\n        $_SESSION['_ci_old_input'] = [\n            'get'  => ['apple' => ['name' => 'two']],\n            'post' => ['banana' => ['name' => 'foo']],\n        ];\n\n        $this->assertSame('foo', $this->request->getOldInput('banana.name'));\n        $this->assertSame('two', $this->request->getOldInput('apple.name'));\n    }\n\n    public function testMissingOldInput()\n    {\n        $_SESSION['_ci_old_input'] = [\n            'get'  => ['apple' => ['name' => 'two']],\n            'post' => ['banana' => ['name' => 'foo']],\n        ];\n\n        $this->assertNull($this->request->getOldInput('pineapple.name'));\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/1492\n     */\n    public function testCanGetOldInputArrayWithSESSION()\n    {\n        $_SESSION['_ci_old_input'] = [\n            'get'  => ['apple' => ['name' => 'two']],\n            'post' => ['banana' => ['name' => 'foo']],\n        ];\n\n        $this->assertSame(['name' => 'two'], $this->request->getOldInput('apple'));\n        $this->assertSame(['name' => 'foo'], $this->request->getOldInput('banana'));\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/1492\n     *\n     * @runInSeparateProcess\n     * @preserveGlobalState  disabled\n     */\n    public function testCanGetOldInputArrayWithSessionService()\n    {\n        $locations = [\n            'AB' => 'Alberta',\n            'BC' => 'British Columbia',\n            'SK' => 'Saskatchewan',\n        ];\n        $session = service('session');\n        $session->set(['_ci_old_input' => ['post' => ['location' => $locations]]]);\n\n        $this->assertSame($locations, $this->request->getOldInput('location'));\n    }\n\n    public function testCanGrabServerVars()\n    {\n        $server                   = $this->getPrivateProperty($this->request, 'globals');\n        $server['server']['TEST'] = 5;\n        $this->setPrivateProperty($this->request, 'globals', $server);\n\n        $this->assertSame('5', $this->request->getServer('TEST'));\n        $this->assertNull($this->request->getServer('TESTY'));\n    }\n\n    public function testCanGrabEnvVars()\n    {\n        $server                = $this->getPrivateProperty($this->request, 'globals');\n        $server['env']['TEST'] = 5;\n        $this->setPrivateProperty($this->request, 'globals', $server);\n\n        $this->assertSame('5', $this->request->getEnv('TEST'));\n        $this->assertNull($this->request->getEnv('TESTY'));\n    }\n\n    public function testCanGrabCookieVars()\n    {\n        $_COOKIE['TEST'] = 5;\n\n        $this->assertSame('5', $this->request->getCookie('TEST'));\n        $this->assertNull($this->request->getCookie('TESTY'));\n    }\n\n    public function testStoresDefaultLocale()\n    {\n        $config = new App();\n\n        $this->assertSame($config->defaultLocale, $this->request->getDefaultLocale());\n        $this->assertSame($config->defaultLocale, $this->request->getLocale());\n    }\n\n    public function testSetLocaleSaves()\n    {\n        $config                   = new App();\n        $config->supportedLocales = ['en', 'es'];\n        $config->defaultLocale    = 'es';\n        $config->baseURL          = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), null, new UserAgent());\n\n        $request->setLocale('en');\n        $this->assertSame('en', $request->getLocale());\n    }\n\n    public function testSetBadLocale()\n    {\n        $config                   = new App();\n        $config->supportedLocales = ['en', 'es'];\n        $config->defaultLocale    = 'es';\n        $config->baseURL          = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), null, new UserAgent());\n\n        $request->setLocale('xx');\n        $this->assertSame('es', $request->getLocale());\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/2774\n     */\n    public function testNegotiatesLocale()\n    {\n        $_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'fr-FR; q=1.0, en; q=0.5';\n\n        $config                   = new App();\n        $config->negotiateLocale  = true;\n        $config->supportedLocales = ['fr', 'en'];\n        $config->baseURL          = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), null, new UserAgent());\n\n        $this->assertSame($config->defaultLocale, $request->getDefaultLocale());\n        $this->assertSame('fr', $request->getLocale());\n    }\n\n    public function testNegotiatesLocaleOnlyBroad()\n    {\n        $_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'fr; q=1.0, en; q=0.5';\n\n        $config                   = new App();\n        $config->negotiateLocale  = true;\n        $config->supportedLocales = ['fr', 'en'];\n        $config->baseURL          = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), null, new UserAgent());\n\n        $this->assertSame($config->defaultLocale, $request->getDefaultLocale());\n        $this->assertSame('fr', $request->getLocale());\n    }\n\n    // The negotiation tests below are not intended to exercise the HTTP\\Negotiate class -\n    // that is up to the NegotiateTest. These are only to make sure that the requests\n    // flow through to the negotiator\n\n    public function testNegotiatesNot()\n    {\n        $this->request->setHeader('Accept-Charset', 'iso-8859-5, unicode-1-1;q=0.8');\n\n        $this->expectException(HTTPException::class);\n        $this->request->negotiate('something bogus', ['iso-8859-5', 'unicode-1-1']);\n    }\n\n    public function testNegotiatesCharset()\n    {\n        // $_SERVER['HTTP_ACCEPT_CHARSET'] = 'iso-8859-5, unicode-1-1;q=0.8';\n        $this->request->setHeader('Accept-Charset', 'iso-8859-5, unicode-1-1;q=0.8');\n\n        $this->assertSame(strtolower($this->request->config->charset), $this->request->negotiate('charset', ['iso-8859', 'unicode-1-2']));\n    }\n\n    public function testNegotiatesMedia()\n    {\n        $this->request->setHeader('Accept', 'text/plain; q=0.5, text/html, text/x-dvi; q=0.8, text/x-c');\n        $this->assertSame('text/html', $this->request->negotiate('media', ['text/html', 'text/x-c', 'text/x-dvi', 'text/plain']));\n    }\n\n    public function testNegotiatesEncoding()\n    {\n        $this->request->setHeader('Accept-Encoding', 'gzip;q=1.0, identity; q=0.4, compress;q=0.5');\n        $this->assertSame('gzip', $this->request->negotiate('encoding', ['gzip', 'compress']));\n    }\n\n    public function testNegotiatesLanguage()\n    {\n        $this->request->setHeader('Accept-Language', 'da, en-gb;q=0.8, en;q=0.7');\n        $this->assertSame('en', $this->request->negotiate('language', ['en', 'da']));\n    }\n\n    public function testCanGrabGetRawJSON()\n    {\n        $json = '{\"code\":1, \"message\":\"ok\"}';\n\n        $expected = ['code' => 1, 'message' => 'ok'];\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $this->assertSame($expected, $request->getJSON(true));\n    }\n\n    public function testCanGetAVariableFromJson()\n    {\n        $jsonObj = [\n            'foo' => 'bar',\n            'baz' => ['fizz' => 'buzz'],\n        ];\n        $json = json_encode($jsonObj);\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $this->assertSame('bar', $request->getJsonVar('foo'));\n        $this->assertNull($request->getJsonVar('notExists'));\n\n        $jsonVar = $request->getJsonVar('baz');\n        $this->assertIsObject($jsonVar);\n        $this->assertSame('buzz', $jsonVar->fizz);\n        $this->assertSame('buzz', $request->getJsonVar('baz.fizz'));\n    }\n\n    public function testGetJsonVarAsArray()\n    {\n        $jsonObj = [\n            'baz' => [\n                'fizz' => 'buzz',\n                'foo'  => 'bar',\n            ],\n        ];\n        $json = json_encode($jsonObj);\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $jsonVar = $request->getJsonVar('baz', true);\n        $this->assertIsArray($jsonVar);\n        $this->assertSame('buzz', $jsonVar['fizz']);\n        $this->assertSame('bar', $jsonVar['foo']);\n    }\n\n    public function testGetJsonVarCanFilter()\n    {\n        $json = json_encode(['foo' => 'bar']);\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $this->assertFalse($request->getJsonVar('foo', false, FILTER_VALIDATE_INT));\n    }\n\n    public function testGetVarWorksWithJson()\n    {\n        $json = json_encode(['foo' => 'bar', 'fizz' => 'buzz']);\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $json, new UserAgent());\n        $request->setHeader('Content-Type', 'application/json');\n\n        $this->assertSame('bar', $request->getVar('foo'));\n        $this->assertSame('buzz', $request->getVar('fizz'));\n        $this->assertNull($request->getVar('notExists'));\n\n        $multiple = $request->getVar(['foo', 'fizz']);\n        $this->assertIsArray($multiple);\n        $this->assertSame('bar', $multiple['foo']);\n        $this->assertSame('buzz', $multiple['fizz']);\n\n        $all = $request->getVar();\n        $this->assertIsObject($all);\n        $this->assertSame('bar', $all->foo);\n        $this->assertSame('buzz', $all->fizz);\n    }\n\n    public function testGetVarWorksWithJsonAndGetParams()\n    {\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        // GET method\n        $_REQUEST['foo']  = 'bar';\n        $_REQUEST['fizz'] = 'buzz';\n\n        $request = new IncomingRequest($config, new URI('http://example.com/path?foo=bar&fizz=buzz'), 'php://input', new UserAgent());\n        $request = $request->withMethod('GET');\n\n        // JSON type\n        $request->setHeader('Content-Type', 'application/json');\n\n        $this->assertSame('bar', $request->getVar('foo'));\n        $this->assertSame('buzz', $request->getVar('fizz'));\n\n        $multiple = $request->getVar(['foo', 'fizz']);\n        $this->assertIsArray($multiple);\n        $this->assertSame('bar', $multiple['foo']);\n        $this->assertSame('buzz', $multiple['fizz']);\n\n        $all = $request->getVar();\n        $this->assertIsArray($all);\n        $this->assertSame('bar', $all['foo']);\n        $this->assertSame('buzz', $all['fizz']);\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/5391\n     */\n    public function testGetJsonVarReturnsNullFromNullBody()\n    {\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n        $json            = null;\n        $request         = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $this->assertNull($request->getJsonVar('myKey'));\n    }\n\n    public function testgetJSONReturnsNullFromNullBody()\n    {\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n        $json            = null;\n        $request         = new IncomingRequest($config, new URI(), $json, new UserAgent());\n\n        $this->assertNull($request->getJSON());\n    }\n\n    public function testCanGrabGetRawInput()\n    {\n        $rawstring = 'username=admin001&role=administrator&usepass=0';\n\n        $expected = [\n            'username' => 'admin001',\n            'role'     => 'administrator',\n            'usepass'  => '0',\n        ];\n\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $request = new IncomingRequest($config, new URI(), $rawstring, new UserAgent());\n\n        $this->assertSame($expected, $request->getRawInput());\n    }\n\n    public function testIsCLI()\n    {\n        // this should be the case in unit testing\n        $this->assertTrue($this->request->isCLI());\n    }\n\n    public function testIsAJAX()\n    {\n        $this->request->appendHeader('X-Requested-With', 'XMLHttpRequest');\n        $this->assertTrue($this->request->isAJAX());\n    }\n\n    public function testIsSecure()\n    {\n        $_SERVER['HTTPS'] = 'on';\n        $this->assertTrue($this->request->isSecure());\n    }\n\n    public function testIsSecureFrontEnd()\n    {\n        $this->request->appendHeader('Front-End-Https', 'on');\n        $this->assertTrue($this->request->isSecure());\n    }\n\n    public function testIsSecureForwarded()\n    {\n        $this->request->appendHeader('X-Forwarded-Proto', 'https');\n        $this->assertTrue($this->request->isSecure());\n    }\n\n    public function testUserAgent()\n    {\n        $_SERVER['HTTP_USER_AGENT'] = 'Mozilla';\n\n        $config  = new App();\n        $request = new IncomingRequest($config, new URI(), null, new UserAgent());\n\n        $this->assertSame('Mozilla', $request->getUserAgent()->__toString());\n    }\n\n    public function testFileCollectionFactory()\n    {\n        $_FILES = [\n            'userfile' => [\n                'name'     => 'someFile.txt',\n                'type'     => 'text/plain',\n                'size'     => '124',\n                'tmp_name' => '/tmp/myTempFile.txt',\n                'error'    => 0,\n            ],\n        ];\n\n        $files = $this->request->getFiles();\n        $this->assertCount(1, $files);\n\n        $file = array_shift($files);\n        $this->assertInstanceOf(UploadedFile::class, $file);\n\n        $this->assertSame('someFile.txt', $file->getName());\n        $this->assertSame(124, $file->getSize());\n    }\n\n    public function testGetFileMultiple()\n    {\n        $_FILES = [\n            'userfile' => [\n                'name' => [\n                    'someFile.txt',\n                    'someFile2.txt',\n                ],\n                'type' => [\n                    'text/plain',\n                    'text/plain',\n                ],\n                'size' => [\n                    '124',\n                    '125',\n                ],\n                'tmp_name' => [\n                    '/tmp/myTempFile.txt',\n                    '/tmp/myTempFile2.txt',\n                ],\n                'error' => [\n                    0,\n                    0,\n                ],\n            ],\n        ];\n\n        $gotit = $this->request->getFileMultiple('userfile');\n        $this->assertSame(124, $gotit[0]->getSize());\n        $this->assertSame(125, $gotit[1]->getSize());\n    }\n\n    public function testGetFile()\n    {\n        $_FILES = [\n            'userfile' => [\n                'name'     => 'someFile.txt',\n                'type'     => 'text/plain',\n                'size'     => '124',\n                'tmp_name' => '/tmp/myTempFile.txt',\n                'error'    => 0,\n            ],\n        ];\n\n        $gotit = $this->request->getFile('userfile');\n        $this->assertSame(124, $gotit->getSize());\n    }\n\n    public function testSpoofing()\n    {\n        $this->request->setMethod('WINK');\n        $this->assertSame('wink', $this->request->getMethod());\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/2839\n     */\n    public function testGetPostEmpty()\n    {\n        $_POST['TEST'] = '5';\n        $_GET['TEST']  = '3';\n        $this->assertSame($_POST, $this->request->getPostGet());\n        $this->assertSame($_GET, $this->request->getGetPost());\n    }\n\n    public function testWithFalseBody()\n    {\n        // Use `false` here to simulate file_get_contents returning a false value\n        $request = new IncomingRequest(new App(), new URI(), false, new UserAgent());\n\n        $this->assertNotFalse($request->getBody());\n        $this->assertNull($request->getBody());\n    }\n\n    /**\n     * @see https://github.com/codeigniter4/CodeIgniter4/issues/3020\n     */\n    public function testGetPostIndexNotExists()\n    {\n        $_POST['TEST'] = 5;\n        $_GET['TEST']  = 3;\n        $this->assertNull($this->request->getPostGet('gc'));\n        $this->assertNull($this->request->getGetPost('gc'));\n    }\n\n    public function providePathChecks()\n    {\n        return [\n            'not /index.php' => [\n                '/test.php',\n                '/',\n            ],\n            '/index.php' => [\n                '/index.php',\n                '/',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider providePathChecks\n     *\n     * @param mixed $path\n     * @param mixed $detectPath\n     */\n    public function testExtensionPHP($path, $detectPath)\n    {\n        $config          = new App();\n        $config->baseURL = 'http://example.com/';\n\n        $_SERVER['REQUEST_URI'] = $path;\n        $_SERVER['SCRIPT_NAME'] = $path;\n        $request                = new IncomingRequest($config, new URI($path), null, new UserAgent());\n        $this->assertSame($detectPath, $request->detectPath());\n    }\n\n    public function testGetPath()\n    {\n        $_SERVER['REQUEST_URI'] = '/index.php/fruits/banana';\n        $_SERVER['SCRIPT_NAME'] = '/index.php';\n\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $this->assertSame('fruits/banana', $request->getPath());\n    }\n\n    public function testGetPathIsRelative()\n    {\n        $_SERVER['REQUEST_URI'] = '/sub/folder/index.php/fruits/banana';\n        $_SERVER['SCRIPT_NAME'] = '/sub/folder/index.php';\n\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $this->assertSame('fruits/banana', $request->getPath());\n    }\n\n    public function testGetPathStoresDetectedValue()\n    {\n        $_SERVER['REQUEST_URI'] = '/fruits/banana';\n        $_SERVER['SCRIPT_NAME'] = '/index.php';\n\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $_SERVER['REQUEST_URI'] = '/candy/snickers';\n\n        $this->assertSame('fruits/banana', $request->getPath());\n    }\n\n    public function testGetPathIsRediscovered()\n    {\n        $_SERVER['REQUEST_URI'] = '/fruits/banana';\n        $_SERVER['SCRIPT_NAME'] = '/index.php';\n\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $_SERVER['REQUEST_URI'] = '/candy/snickers';\n        $request->detectPath();\n\n        $this->assertSame('candy/snickers', $request->getPath());\n    }\n\n    public function testSetPath()\n    {\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n        $this->assertSame('', $request->getPath());\n\n        $request->setPath('foobar');\n        $this->assertSame('foobar', $request->getPath());\n    }\n\n    public function testSetPathUpdatesURI()\n    {\n        $request = new IncomingRequest(new App(), new URI(), null, new UserAgent());\n\n        $request->setPath('apples');\n\n        $this->assertSame('apples', $request->getUri()->getPath());\n    }\n}\n", "Version 4.1.6\n#############\n\nRelease Date: Not released\n\n**4.1.6 release of CodeIgniter4**\n\n.. contents::\n    :local:\n    :depth: 2\n\nSECURITY\n********\n\n- *Deserialization of Untrusted Data* found in the ``old()`` function was fixed. See the `Security advisory <https://github.com/codeigniter4/CodeIgniter4/security/advisories/GHSA-w6jr-wj64-mc9x>`_ for more information.\n\nBREAKING\n********\n\n- Multiple table names will no longer be stored in ``BaseBuilder::$tableName`` - an empty string will be used instead.\n\n.. _changelog-v416-validation-changes:\n\nValidation changes\n==================\n\n- The previous version of the Validation can't handle an array item.\n  Because of the bug fix, the validation results may be different,\n  or raise a ``TypeError``.\n  But the previous version's results are probably incorrect.\n- The Validation separated the validation process of multiple field\n  like ``contacts.*.name`` and single field.\n  When a single field has an array data, the previous version validates each element of the array.\n  The validation rule gets an element of the array as the parameter.\n  On the other hand, the current version passes the array to the validation rule as a whole.\n\nEnhancements\n************\n\n- Database pane on debug toolbar now displays location where Query was called from. Also displays full backtrace.\n- :ref:`Subqueries <query-builder-where-subquery>` in QueryBuilder can now be an instance of the BaseBuilder class.\n\nChanges\n*******\n\n- The process of sending cookies has been moved to the ``Response`` class. Now the ``Security`` and ``CookieStore`` class don't send cookies, set them to the Response.\n\nDeprecations\n************\n\n- ``Seeder::faker()`` and ``Seeder::$faker`` are deprecated.\n- ``BaseBuilder::cleanClone()`` is deprecated.\n\nSending Cookies\n===============\n\nThe process of sending cookies has been moved to the ``Response`` class.\nAnd the following methods are deprecated:\n\n- ``CookieStore::dispatch()``\n- ``CookieStore::setRawCookie()``\n- ``CookieStore::setCookie()``\n- ``Security::sendCookie()``\n- ``Security::doSendCookie()``\n\nBugs Fixed\n**********\n"], "filenames": ["SECURITY.md", "system/Common.php", "tests/system/CommonFunctionsTest.php", "tests/system/HTTP/IncomingRequestTest.php", "user_guide_src/source/changelogs/v4.1.6.rst"], "buggy_code_start_loc": [22, 813, 304, 110, 10], "buggy_code_end_loc": [22, 818, 313, 129, 10], "fixing_code_start_loc": [23, 812, 304, 110, 11], "fixing_code_end_loc": [24, 812, 346, 131, 16], "type": "CWE-502", "message": "CodeIgniter is an open source PHP full-stack web framework. Deserialization of Untrusted Data was found in the `old()` function in CodeIgniter4. Remote attackers may inject auto-loadable arbitrary objects with this vulnerability, and possibly execute existing PHP code on the server. We are aware of a working exploit, which can lead to SQL injection. Users are advised to upgrade to v4.1.6 or later. Users unable to upgrade as advised to not use the `old()` function and form_helper nor `RedirectResponse::withInput()` and `redirect()->withInput()`.", "other": {"cve": {"id": "CVE-2022-21647", "sourceIdentifier": "security-advisories@github.com", "published": "2022-01-04T20:15:07.930", "lastModified": "2022-01-20T15:04:23.823", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "CodeIgniter is an open source PHP full-stack web framework. Deserialization of Untrusted Data was found in the `old()` function in CodeIgniter4. Remote attackers may inject auto-loadable arbitrary objects with this vulnerability, and possibly execute existing PHP code on the server. We are aware of a working exploit, which can lead to SQL injection. Users are advised to upgrade to v4.1.6 or later. Users unable to upgrade as advised to not use the `old()` function and form_helper nor `RedirectResponse::withInput()` and `redirect()->withInput()`."}, {"lang": "es", "value": "CodeIgniter es un framework web full-stack de PHP de c\u00f3digo abierto. Se encontr\u00f3 una deserializaci\u00f3n de datos no confiables en la funci\u00f3n \"old()\" en CodeIgniter4. Los atacantes remotos pueden inyectar objetos arbitrarios autocargables con esta vulnerabilidad, y posiblemente ejecutar c\u00f3digo PHP existente en el servidor. Tenemos conocimiento de una explotaci\u00f3n que funciona, que puede conllevar a una inyecci\u00f3n SQL. Se aconseja a usuarios que actualicen a la versi\u00f3n 4.1.6 o posterior. A los usuarios que no puedan actualizarse se les aconseja no usar la funci\u00f3n \"old()\" y form_helper ni \"RedirectResponse::withInput()\" y \"redirect()-&gt;withInput()\""}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-502"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-502"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:codeigniter:codeigniter:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.0.0", "versionEndExcluding": "4.1.6", "matchCriteriaId": "5E18B755-8CBA-45C9-8759-5039BBAD4FC6"}]}]}], "references": [{"url": "https://github.com/codeigniter4/CodeIgniter4/commit/ce95ed5765256e2f09f3513e7d42790e0d6948f5", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/codeigniter4/CodeIgniter4/security/advisories/GHSA-w6jr-wj64-mc9x", "source": "security-advisories@github.com", "tags": ["Mitigation", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/codeigniter4/CodeIgniter4/commit/ce95ed5765256e2f09f3513e7d42790e0d6948f5"}}