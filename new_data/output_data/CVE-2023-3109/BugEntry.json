{"buggy_code": ["<?php\n/**\n ***********************************************************************************************\n * Create and edit announcements\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * ann_uuid  : UUID of the announcement that should be edited\n * headline  : Title of the announcement module. This will be shown in the whole module.\n *             (Default) SYS_ANNOUNCEMENTS\n * copy = true : The announcement of the ann_id will be copied and the base for this new announcement\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// check if the module is enabled and disallow access if it's disabled\nif ((int) $gSettingsManager->get('enable_announcements_module') === 0) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n// Initialize and check the parameters\n$getAnnUuid  = admFuncVariableIsValid($_GET, 'ann_uuid', 'string');\n$getHeadline = admFuncVariableIsValid($_GET, 'headline', 'string', array('defaultValue' => $gL10n->get('SYS_ANNOUNCEMENTS')));\n$getCopy     = admFuncVariableIsValid($_GET, 'copy', 'bool');\n\n// set headline of the script\nif ($getCopy) {\n    $headline = $gL10n->get('SYS_COPY_ENTRY');\n} elseif ($getAnnUuid !== '') {\n    $headline = $gL10n->get('SYS_EDIT_ENTRY');\n} else {\n    $headline = $gL10n->get('SYS_CREATE_ENTRY');\n}\n\ntry {\n    // add current url to navigation stack\n    $gNavigation->addUrl(CURRENT_URL, $headline);\n} catch (AdmException $e) {\n    $e->showHtml();\n}\n\n// Create announcements object\n$announcement = new TableAnnouncement($gDb);\n\nif ($getAnnUuid !== '') {\n    $announcement->readDataByUuid($getAnnUuid);\n\n    if ($getCopy === true) {\n        $getAnnUuid = '';\n    }\n\n    // check if the current user could edit this announcement\n    if (!$announcement->isEditable()) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n} else {\n    // check if the user has the right to edit at least one category\n    if (count($gCurrentUser->getAllEditableCategories('ANN')) === 0) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n}\n\nif (isset($_SESSION['announcements_request'])) {\n    // due to incorrect input the user has returned to this form\n    // now write the previously entered contents into the object\n    $announcement->setArray($_SESSION['announcements_request']);\n    unset($_SESSION['announcements_request']);\n}\n\n// create html page object\n$page = new HtmlPage('admidio-announcements-edit', $getHeadline . ' - ' . $headline);\n\n// show form\n$form = new HtmlForm('announcements_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/announcements/announcements_function.php', array('ann_uuid' => $getAnnUuid, 'headline' => $getHeadline, 'mode' => '1')), $page);\n$form->addInput(\n    'ann_headline',\n    $gL10n->get('SYS_TITLE'),\n    $announcement->getValue('ann_headline', 'database'),\n    array('maxLength' => 100, 'property' => HtmlForm::FIELD_REQUIRED)\n);\n$form->addSelectBoxForCategories(\n    'ann_cat_id',\n    $gL10n->get('SYS_CATEGORY'),\n    $gDb,\n    'ANN',\n    HtmlForm::SELECT_BOX_MODUS_EDIT,\n    array('property' => HtmlForm::FIELD_REQUIRED, 'defaultValue' => $announcement->getValue('cat_uuid'))\n);\n$form->addEditor(\n    'ann_description',\n    $gL10n->get('SYS_TEXT'),\n    $announcement->getValue('ann_description'),\n    array('property' => HtmlForm::FIELD_REQUIRED, 'height' => '400')\n);\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check'));\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $announcement->getValue('ann_usr_id_create'),\n    $announcement->getValue('ann_timestamp_create'),\n    (int) $announcement->getValue('ann_usr_id_change'),\n    $announcement->getValue('ann_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit categories\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n ******************************************************************************\n * Parameters:\n *\n * cat_uuid : Uuid of the category, that should be edited\n * type     : Type of categories that could be maintained\n *            ROL = Categories for roles\n *            LNK = Categories for weblinks\n *            ANN = Categories for announcements\n *            USF = Categories for profile fields\n *            DAT = Calendars for events\n ****************************************************************************/\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getCatUuid = admFuncVariableIsValid($_GET, 'cat_uuid', 'string');\n$getType  = admFuncVariableIsValid($_GET, 'type', 'string', array('requireValue' => true, 'validValues' => array('ROL', 'LNK', 'ANN', 'USF', 'DAT', 'AWA')));\n\n$roleViewSet = array(0);\n$roleEditSet = array(0);\n$addButtonText = $gL10n->get('SYS_CATEGORY');\n\n// set headline of the script\nif ($getCatUuid !== '') {\n    if ($getType === 'DAT') {\n        $headlineSuffix = $gL10n->get('SYS_EDIT_CALENDAR');\n    } else {\n        $headlineSuffix = $gL10n->get('SYS_EDIT_CATEGORY');\n    }\n} else {\n    if ($getType === 'DAT') {\n        $headlineSuffix = $gL10n->get('SYS_CREATE_CALENDAR');\n    } else {\n        $headlineSuffix = $gL10n->get('SYS_CREATE_CATEGORY');\n    }\n}\n\n// set text strings for the different modules\nswitch ($getType) {\n    case 'ANN':\n        $component = 'ANNOUNCEMENTS';\n        $headline = $gL10n->get('SYS_ANNOUNCEMENTS') . ' - ' . $headlineSuffix;\n        $rolesRightEditName = 'SYS_EDIT_ANNOUNCEMENTS';\n        $rolesRightsColumn  = 'rol_announcements';\n        $rolesRightsName    = 'SYS_RIGHT_ANNOUNCEMENTS';\n        break;\n\n    case 'DAT':\n        $component = 'DATES';\n        $headline = $gL10n->get('DAT_DATES') . ' - ' . $headlineSuffix;\n        $rolesRightEditName = 'DAT_EDIT_EVENTS';\n        $rolesRightsColumn  = 'rol_dates';\n        $rolesRightsName    = 'SYS_RIGHT_DATES';\n        $addButtonText      = $gL10n->get('DAT_CALENDAR');\n        break;\n\n    case 'LNK':\n        $component = 'LINKS';\n        $headline = $gL10n->get('SYS_WEBLINKS') . ' - ' . $headlineSuffix;\n        $rolesRightEditName = 'SYS_EDIT_WEBLINKS';\n        $rolesRightsColumn  = 'rol_weblinks';\n        $rolesRightsName    = 'SYS_RIGHT_WEBLINKS';\n        break;\n\n    case 'ROL':\n        $component = 'GROUPS-ROLES';\n        $headline = $gL10n->get('SYS_ROLES') . ' - ' . $headlineSuffix;\n        break;\n\n    case 'USF':\n        $component = 'CORE';\n        $headline = $gL10n->get('ORG_PROFILE_FIELDS') . ' - ' . $headlineSuffix;\n        $rolesRightEditName = 'PRO_EDIT_PROFILE_FIELDS';\n        $rolesRightsColumn  = 'rol_edit_user';\n        $rolesRightsName    = 'SYS_RIGHT_EDIT_USER';\n        break;\n\n    case 'AWA':\n        $component = 'CORE';\n        $headline = $gL10n->get('Awards') . ' - ' . $headlineSuffix;\n        $rolesRightEditName = 'Not used, leave empty';\n        $rolesRightsColumn  = 'rol_edit_user';\n        $rolesRightsName    = 'SYS_RIGHT_EDIT_USER';\n        break;\n\n    default:\n        $headline = $headlineSuffix;\n}\n\n// check if the current user has the right to\nif (!Component::isAdministrable($component)) {\n    $gMessage->show($gL10n->get('SYS_INVALID_PAGE_VIEW'));\n    // => EXIT\n}\n\n$gNavigation->addUrl(CURRENT_URL, $headlineSuffix);\n\n// create category object\n$category = new TableCategory($gDb);\n\nif (isset($_SESSION['categories_request'])) {\n    // By wrong input, the user returned to this form now write the previously entered contents into the object\n\n    $category->setArray($_SESSION['categories_request']);\n\n    // get the selected roles for visibility\n    if (isset($_SESSION['categories_request']['adm_categories_view_right'])) {\n        $roleViewSet = $_SESSION['categories_request']['adm_categories_view_right'];\n    }\n\n    if (isset($_SESSION['categories_request']['show_in_several_organizations'])) {\n        $category->setValue('cat_org_id', $gCurrentOrgId);\n    }\n    unset($_SESSION['categories_request']);\n} else {\n    if ($getCatUuid !== '') {\n        $category->readDataByUuid($getCatUuid);\n        $catId = (int) $category->getValue('cat_id');\n\n        // get assigned roles of this category\n        $categoryViewRolesObject = new RolesRights($gDb, 'category_view', $catId);\n        $roleViewSet = $categoryViewRolesObject->getRolesIds();\n        $categoryEditRolesObject = new RolesRights($gDb, 'category_edit', $catId);\n        $roleEditSet = $categoryEditRolesObject->getRolesIds();\n    } else {\n        // profile fields should be organization independent all other categories should be organization dependent as default\n        if ($getType !== 'USF') {\n            $category->setValue('cat_org_id', $gCurrentOrgId);\n        }\n    }\n}\n\n// check if this category is editable by the current user and current organization\nif (!$category->isEditable()) {\n    $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n    // => EXIT\n}\n\n// create html page object\n$page = new HtmlPage('admidio-categories-edit', $headline);\n\n$roleViewDescription = '';\nif ($getType === 'USF') {\n    $roleViewDescription = 'SYS_CATEGORY_PROFILE_FIELDS_VISIBILITY';\n}\n\nif ($getType !== 'ROL' && $gCurrentOrganization->countAllRecords() > 1) {\n    $page->addJavascript(\n        '\n        function showHideViewRightControl() {\n            if ($(\"#show_in_several_organizations\").is(\":checked\")) {\n                $(\"#adm_categories_view_right_group\").hide();\n            } else {\n                $(\"#adm_categories_view_right_group\").show(\"slow\");\n            }\n        }\n\n        $(\"#show_in_several_organizations\").click(function() {\n            showHideViewRightControl();\n        });\n\n        showHideViewRightControl();',\n        true\n    );\n}\n\n// show form\n$form = new HtmlForm('categories_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/categories/categories_function.php', array('cat_uuid' => $getCatUuid, 'type' => $getType, 'mode' => '1')), $page);\n\n// systemcategories should not be renamed\n$fieldPropertyCatName = HtmlForm::FIELD_REQUIRED;\nif ($category->getValue('cat_system') == 1) {\n    $fieldPropertyCatName = HtmlForm::FIELD_DISABLED;\n}\n\n$form->addInput(\n    'cat_name',\n    $gL10n->get('SYS_NAME'),\n    $category->getValue('cat_name', 'database'),\n    array('maxLength' => 100, 'property' => $fieldPropertyCatName)\n);\n\n// Roles have their own preferences for visibility, so only allow this for other types.\n// Until now we do not support visibility for categories that belong to several organizations,\n// roles could be assigned if only 1 organization exists.\nif ($getType !== 'ROL' && ((bool) $category->getValue('cat_system') === false || $gCurrentOrganization->countAllRecords() === 1)) {\n    // read all roles of the current organization\n    $sqlViewRoles = 'SELECT rol_id, rol_name, cat_name\n                       FROM '.TBL_ROLES.'\n                 INNER JOIN '.TBL_CATEGORIES.'\n                         ON cat_id = rol_cat_id\n                      WHERE rol_valid  = true\n                        AND rol_system = false\n                        AND cat_name_intern <> \\'EVENTS\\'\n                        AND cat_org_id = ? -- $gCurrentOrgId\n                   ORDER BY cat_sequence, rol_name';\n    $sqlDataView = array(\n        'query'  => $sqlViewRoles,\n        'params' => array($gCurrentOrgId)\n    );\n\n    // if no roles are assigned then set \"all users\" as default\n    if (count($roleViewSet) === 0) {\n        $roleViewSet[] = 0;\n    }\n\n    // if no roles are assigned then set nothing as default\n    if (count($roleEditSet) === 0) {\n        $roleEditSet[] = '';\n    }\n\n    // show selectbox with all assigned roles\n    $form->addSelectBoxFromSql(\n        'adm_categories_view_right',\n        $gL10n->get('SYS_VISIBLE_FOR'),\n        $gDb,\n        $sqlDataView,\n        array(\n            'property'     => HtmlForm::FIELD_REQUIRED,\n            'defaultValue' => $roleViewSet,\n            'multiselect'  => true,\n            'firstEntry'   => array('0', $gL10n->get('SYS_ALL').' ('.$gL10n->get('SYS_ALSO_VISITORS').')', null),\n            'helpTextIdInline' => $roleViewDescription\n        )\n    );\n\n    // until now we don't use edit rights for profile fields\n    if ($getType !== 'USF') {\n        $form->addSelectBoxFromSql(\n            'adm_categories_edit_right',\n            $gL10n->get($rolesRightEditName),\n            $gDb,\n            $sqlDataView,\n            array(\n                'defaultValue' => $roleEditSet,\n                'multiselect'  => true,\n                'placeholder'  => $gL10n->get('SYS_NO_ADDITIONAL_PERMISSIONS_SET')\n            )\n        );\n    }\n}\n\n// if current organization has a parent organization or is child organizations then show option to set this category to global\nif ($getType !== 'ROL' && $category->getValue('cat_system') == 0 && $gCurrentOrganization->countAllRecords() > 1) {\n    if ($gCurrentOrganization->isChildOrganization()) {\n        $fieldProperty   = HtmlForm::FIELD_DISABLED;\n        $helpTextIdLabel = 'SYS_ONLY_SET_BY_MOTHER_ORGANIZATION';\n    } else {\n        // show all organizations where this organization is mother or child organization\n        $organizations = implode(', ', $gCurrentOrganization->getOrganizationsInRelationship(true, true, true));\n\n        $fieldProperty = HtmlForm::FIELD_DEFAULT;\n        if ($getType === 'USF') {\n            $helpTextIdLabel = $gL10n->get('SYS_CATEGORY_VISIBLE_ALL_ORGA', array($organizations));\n        } else {\n            $helpTextIdLabel = $gL10n->get('SYS_DATA_CATEGORY_GLOBAL', array($organizations));\n        }\n    }\n\n    // read all administrator roles\n\n    $sqlAdminRoles = 'SELECT rol_name\n                        FROM '.TBL_ROLES.'\n                  INNER JOIN '.TBL_CATEGORIES.'\n                          ON cat_id = rol_cat_id\n                       WHERE rol_valid    = true\n                         AND '. $rolesRightsColumn .' = true\n                         AND cat_org_id   = ? -- $gCurrentOrgId\n                    ORDER BY cat_sequence, rol_name';\n    $statementAdminRoles = $gDb->queryPrepared($sqlAdminRoles, array($gCurrentOrgId));\n\n    $adminRoles = array();\n    while ($roleName = $statementAdminRoles->fetchColumn()) {\n        $adminRoles[] = $roleName;\n    }\n\n    $form->addStaticControl(\n        'adm_administrators',\n        $gL10n->get('SYS_ADMINISTRATORS'),\n        implode(', ', $adminRoles),\n        array('helpTextIdLabel' => $gL10n->get('SYS_CATEGORIES_ADMINISTRATORS_DESC', array($rolesRightsName)))\n    );\n\n    $checked = false;\n    if ((int) $category->getValue('cat_org_id') === 0) {\n        $checked = true;\n    }\n\n    $form->addCheckbox(\n        'show_in_several_organizations',\n        $gL10n->get('SYS_DATA_MULTI_ORGA'),\n        $checked,\n        array('property' => $fieldProperty, 'helpTextIdLabel' => $helpTextIdLabel)\n    );\n}\n\n$form->addCheckbox(\n    'cat_default',\n    $gL10n->get('SYS_DEFAULT_VAR', array($addButtonText)),\n    (bool) $category->getValue('cat_default'),\n    array('icon' => 'fa-star')\n);\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check', 'class' => ' offset-sm-3'));\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $category->getValue('cat_usr_id_create'),\n    $category->getValue('cat_timestamp_create'),\n    (int) $category->getValue('cat_usr_id_change'),\n    $category->getValue('cat_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit dates\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * dat_uuid - UUID of the event that should be edited\n * headline - Headline for the event\n *            (Default) Events\n * copy : true - The event of the dat_id will be copied and the base for this new event\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getDateUuid = admFuncVariableIsValid($_GET, 'dat_uuid', 'string');\n$getHeadline = admFuncVariableIsValid($_GET, 'headline', 'string', array('defaultValue' => $gL10n->get('DAT_DATES')));\n$getCopy     = admFuncVariableIsValid($_GET, 'copy', 'bool');\n\n// check if module is active\nif ((int) $gSettingsManager->get('enable_dates_module') === 0) {\n    // Module is not active\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n// Initialize local parameters\n$dateParticipationPossible = false;\n$dateCurrentUserAssigned   = false;\n$roleViewSet               = array();\n$flagDateRightListView     = false;\n$flagDateRightSendMail     = false;\n\n// set headline of the script\nif ($getCopy) {\n    $headline = $gL10n->get('SYS_COPY_VAR', array($getHeadline));\n} elseif ($getDateUuid !== '') {\n    $headline = $gL10n->get('SYS_EDIT_VAR', array($getHeadline));\n} else {\n    $headline = $gL10n->get('SYS_CREATE_VAR', array($getHeadline));\n}\n\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\n// create date object\n$date = new TableDate($gDb);\n\nif (isset($_SESSION['dates_request'])) {\n    // By wrong input, the user returned to this form now write the previously entered contents into the object\n\n    // first set date and time field to a datetime within system format and add this to date class\n    $_SESSION['dates_request']['dat_begin']    = $_SESSION['dates_request']['date_from'].' '.$_SESSION['dates_request']['date_from_time'];\n    $_SESSION['dates_request']['dat_end']      = $_SESSION['dates_request']['date_to'].' '.$_SESSION['dates_request']['date_to_time'];\n    if ((string) $_SESSION['dates_request']['date_deadline'] !== '') {\n        $_SESSION['dates_request']['dat_deadline'] = $_SESSION['dates_request']['date_deadline'] . ' ' . $_SESSION['dates_request']['date_deadline_time'];\n    }\n    $date->setArray($_SESSION['dates_request']);\n\n    // get the selected roles for visibility\n    if (isset($_SESSION['dates_request']['adm_event_participation_right']) && $_SESSION['dates_request']['adm_event_participation_right'] !== '') {\n        $roleViewSet = $_SESSION['dates_request']['adm_event_participation_right'];\n    }\n\n    if (array_key_exists('date_participation_possible', $_SESSION['dates_request'])) {\n        $dateParticipationPossible = (bool) $_SESSION['dates_request']['date_participation_possible'];\n    }\n    if (array_key_exists('date_current_user_assigned', $_SESSION['dates_request'])) {\n        $dateCurrentUserAssigned = (bool) $_SESSION['dates_request']['date_current_user_assigned'];\n    }\n    if (array_key_exists('date_right_list_view', $_SESSION['dates_request'])) {\n        $flagDateRightListView = (bool) $_SESSION['dates_request']['date_right_list_view'];\n    }\n    if (array_key_exists('date_right_send_mail', $_SESSION['dates_request'])) {\n        $flagDateRightSendMail = (bool) $_SESSION['dates_request']['date_right_send_mail'];\n    }\n\n    unset($_SESSION['dates_request']);\n} else {\n    if ($getDateUuid !== '') {\n        // read data from database\n        $date->readDataByUuid($getDateUuid);\n\n        // get assigned roles of this event\n        $eventParticipationRolesObject = new RolesRights($gDb, 'event_participation', (int) $date->getValue('dat_id'));\n        $roleViewSet = $eventParticipationRolesObject->getRolesIds();\n\n        // check if the current user could edit this event\n        if (!$date->isEditable()) {\n            $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n            // => EXIT\n        }\n\n        // check if a participation to this event is possible\n        if ((int) $date->getValue('dat_rol_id') > 0) {\n            $dateParticipationPossible = true;\n            $role = new TableRoles($gDb, (int) $date->getValue('dat_rol_id'));\n            $flagDateRightListView = (bool) $role->getValue('rol_view_memberships');\n            $flagDateRightSendMail = (bool) $role->getValue('rol_mail_this_role');\n        }\n\n        // check if current user is assigned to this date\n        $dateCurrentUserAssigned = $gCurrentUser->isLeaderOfRole((int) $date->getValue('dat_rol_id'));\n    } else {\n        // check if the user has the right to edit at least one category\n        if (count($gCurrentUser->getAllEditableCategories('DAT')) === 0) {\n            $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n            // => EXIT\n        }\n\n        // For new events preset date with current date\n        $now = new DateTime();\n        $oneHourOffset = new DateInterval('PT1H');\n        $twoHourOffset = new DateInterval('PT2H');\n        $beginDate = $now->add($oneHourOffset)->format('Y-m-d H:00:00');\n        $endDate   = $now->add($twoHourOffset)->format('Y-m-d H:00:00');\n        $date->setValue('dat_begin', $beginDate);\n        $date->setValue('dat_end', $endDate);\n    }\n}\n\n// create html page object\n$page = new HtmlPage('admidio-events-edit', $headline);\n\n$page->addJavascriptFile(ADMIDIO_URL . '/adm_program/system/js/date-functions.js');\n$page->addJavascript('\n    /**\n     * Function hides/show date and time fields\n     */\n    function setAllDay() {\n        if ($(\"#dat_all_day:checked\").val() !== undefined) {\n            $(\"#date_from_time\").hide();\n            $(\"#date_to_time\").hide();\n        } else {\n            $(\"#date_from_time\").show(\"slow\");\n            $(\"#date_to_time\").show(\"slow\");\n        }\n    }\n\n    function setDateParticipation() {\n        if ($(\"#date_participation_possible:checked\").val() !== undefined) {\n            $(\"#adm_event_participation_right_group\").addClass(\"admidio-form-group-required\");\n            $(\"#adm_event_participation_right_group\").show(\"slow\");\n            $(\"#date_current_user_assigned_group\").show(\"slow\");\n            $(\"#dat_max_members_group\").show(\"slow\");\n            $(\"#date_right_list_view_group\").show(\"slow\");\n            $(\"#date_right_send_mail_group\").show(\"slow\");\n            $(\"#dat_allow_comments_group\").show(\"slow\");\n            $(\"#dat_additional_guests_group\").show(\"slow\");\n            $(\"#date_deadline_group\").show(\"slow\");\n        } else {\n            $(\"#adm_event_participation_right_group\").hide();\n            $(\"#date_current_user_assigned_group\").hide();\n            $(\"#dat_max_members_group\").hide();\n            $(\"#date_right_list_view_group\").hide();\n            $(\"#date_right_send_mail_group\").hide();\n            $(\"#dat_allow_comments_group\").hide();\n            $(\"#dat_additional_guests_group\").hide();\n            $(\"#date_deadline_group\").hide(\"slow\");\n        }\n    }\n\n    function setLocationCountry() {\n        if ($(\"#dat_location\").val().length > 0) {\n            $(\"#dat_country_group\").show();\n            $(\"#dat_country\").focus();\n        } else {\n            $(\"#dat_country_group\").hide();\n        }\n    }\n');\n\n$page->addJavascript(\n    '\n    var dateParticipationPossible = ' . ($dateParticipationPossible ? 1 : 0) .';\n\n    setAllDay();\n    setDateParticipation();\n    setLocationCountry();\n\n    $(\"#date_participation_possible\").click(function() {\n        setDateParticipation();\n    });\n    $(\"#dat_all_day\").click(function() {\n        setAllDay();\n    });\n    $(\"#dat_location\").change(function() {\n        setLocationCountry();\n    });\n    $(\"#date_from\").change(function() {\n        if ($(\"#date_from\").val() > $(\"#date_to\").val()) {\n            $(\"#date_to\").val($(\"#date_from\").val());\n        }\n    });\n\n    // if date participation should be removed than ask user\n    $(\"#btn_save\").click(function(event) {\n        event.preventDefault();\n\n        if (dateParticipationPossible == 1 && $(\"#date_participation_possible\").is(\":checked\") === false) {\n            var msg_result = confirm(\"'.$gL10n->get('DAT_REMOVE_APPLICATION').'\");\n            if (msg_result) {\n                $(\"#dates_edit_form\").submit();\n            }\n        } else {\n            $(\"#dates_edit_form\").submit();\n        }\n    });',\n    true\n);\n\n// show form\n$form = new HtmlForm('dates_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/dates/dates_function.php', array('dat_uuid' => $getDateUuid, 'mode' => 1, 'copy' => $getCopy)), $page);\n\n$form->openGroupBox('gb_title_location', $gL10n->get('SYS_TITLE').' & '.$gL10n->get('DAT_LOCATION'));\n$form->addInput(\n    'dat_headline',\n    $gL10n->get('SYS_TITLE'),\n    $date->getValue('dat_headline', 'database'),\n    array('maxLength' => 100, 'property' => HtmlForm::FIELD_REQUIRED)\n);\n\n// if a map link should be shown in the event then show help text and a field where the user could choose the country\nif ($gSettingsManager->getBool('dates_show_map_link')) {\n    $form->addInput(\n        'dat_location',\n        $gL10n->get('DAT_LOCATION'),\n        $date->getValue('dat_location', 'database'),\n        array('maxLength' => 100, 'helpTextIdLabel' => 'DAT_LOCATION_LINK')\n    );\n\n    if (!$date->getValue('dat_country') && $getDateUuid === '') {\n        $date->setValue('dat_country', $gSettingsManager->getString('default_country'));\n    }\n    $form->addSelectBox(\n        'dat_country',\n        $gL10n->get('SYS_COUNTRY'),\n        $gL10n->getCountries(),\n        array('defaultValue' => $date->getValue('dat_country', 'database'))\n    );\n} else {\n    $form->addInput(\n        'dat_location',\n        $gL10n->get('DAT_LOCATION'),\n        $date->getValue('dat_location', 'database'),\n        array('maxLength' => 100)\n    );\n}\n\n// if room selection is activated then show a select box with all rooms\nif ($gSettingsManager->getBool('dates_show_rooms')) {\n    if (DB_ENGINE === Database::PDO_ENGINE_MYSQL) {\n        $sql = 'SELECT room_id, CONCAT(room_name, \\' (\\', room_capacity, \\'+\\', IFNULL(room_overhang, \\'0\\'), \\')\\')\n                  FROM '.TBL_ROOMS.'\n              ORDER BY room_name';\n    } else {\n        $sql = 'SELECT room_id, room_name || \\' (\\' || room_capacity || \\'+\\' || COALESCE(room_overhang, \\'0\\') || \\')\\'\n                  FROM '.TBL_ROOMS.'\n              ORDER BY room_name';\n    }\n    $form->addSelectBoxFromSql(\n        'dat_room_id',\n        $gL10n->get('SYS_ROOM'),\n        $gDb,\n        $sql,\n        array('defaultValue' => (int) $date->getValue('dat_room_id'))\n    );\n}\n$form->closeGroupBox();\n\n$form->openGroupBox('gb_period_calendar', $gL10n->get('SYS_PERIOD').' & '.$gL10n->get('DAT_CALENDAR'));\n$form->addCheckbox('dat_all_day', $gL10n->get('DAT_ALL_DAY'), (bool) $date->getValue('dat_all_day'));\n$form->addInput(\n    'date_from',\n    $gL10n->get('SYS_START'),\n    $date->getValue('dat_begin', $gSettingsManager->getString('system_date').' '.$gSettingsManager->getString('system_time')),\n    array('type' => 'datetime', 'property' => HtmlForm::FIELD_REQUIRED)\n);\n$form->addInput(\n    'date_to',\n    $gL10n->get('SYS_END'),\n    $date->getValue('dat_end', $gSettingsManager->getString('system_date').' '.$gSettingsManager->getString('system_time')),\n    array('type' => 'datetime', 'property' => HtmlForm::FIELD_REQUIRED)\n);\n$form->addSelectBoxForCategories(\n    'dat_cat_id',\n    $gL10n->get('DAT_CALENDAR'),\n    $gDb,\n    'DAT',\n    HtmlForm::SELECT_BOX_MODUS_EDIT,\n    array('property' => HtmlForm::FIELD_REQUIRED, 'defaultValue' => $date->getValue('cat_uuid'))\n);\n$form->closeGroupBox();\n\n$form->openGroupBox('gb_visibility_registration', $gL10n->get('DAT_VISIBILITY').' & '.$gL10n->get('SYS_REGISTRATION'));\n$form->addCheckbox('dat_highlight', $gL10n->get('DAT_HIGHLIGHT_DATE'), (bool) $date->getValue('dat_highlight'));\n$form->addCheckbox(\n    'date_participation_possible',\n    $gL10n->get('DAT_REGISTRATION_POSSIBLE'),\n    $dateParticipationPossible,\n    array('helpTextIdLabel' => 'DAT_LOGIN_POSSIBLE')\n);\n\n// add a multi select box to the form where the user can choose all roles whose members could participate in this event\n// read all roles of the current organization\n$sqlViewRoles = 'SELECT rol_id, rol_name, cat_name\n                   FROM '.TBL_ROLES.'\n             INNER JOIN '.TBL_CATEGORIES.'\n                     ON cat_id = rol_cat_id\n                  WHERE rol_valid  = true\n                    AND rol_system = false\n                    AND cat_name_intern <> \\'EVENTS\\'\n                    AND cat_org_id = ? -- $gCurrentOrgId\n               ORDER BY cat_sequence, rol_name';\n$sqlDataView = array(\n    'query'  => $sqlViewRoles,\n    'params' => array($gCurrentOrgId)\n);\n\n// show select box with all assigned roles\n$form->addSelectBoxFromSql(\n    'adm_event_participation_right',\n    $gL10n->get('DAT_REGISTRATION_POSSIBLE_FOR'),\n    $gDb,\n    $sqlDataView,\n    array(\n        'defaultValue' => $roleViewSet,\n        'multiselect'  => true\n    )\n);\n$form->addCheckbox(\n    'date_current_user_assigned',\n    $gL10n->get('DAT_PARTICIPATE_AT_DATE'),\n    $dateCurrentUserAssigned,\n    array('helpTextIdLabel' => 'DAT_PARTICIPATE_AT_DATE_DESC')\n);\n$form->addCheckbox(\n    'dat_allow_comments',\n    $gL10n->get('DAT_ALLOW_USER_COMMENTS'),\n    (bool) $date->getValue('dat_allow_comments'),\n    array('helpTextIdLabel' => 'DAT_ALLOW_USER_COMMENTS_DESC')\n);\n$form->addCheckbox(\n    'dat_additional_guests',\n    $gL10n->get('DAT_ALLOW_ADDITIONAL_GUESTS'),\n    (bool) $date->getValue('dat_additional_guests'),\n    array('helpTextIdLabel' => 'DAT_ALLOW_ADDITIONAL_GUESTS_DESC')\n);\n$form->addInput(\n    'dat_max_members',\n    $gL10n->get('DAT_PARTICIPANTS_LIMIT'),\n    (int) $date->getValue('dat_max_members'),\n    array('type' => 'number', 'minNumber' => 0, 'maxNumber' => 99999, 'step' => 1, 'helpTextIdLabel' => 'DAT_MAX_MEMBERS')\n);\n$form->addInput(\n    'date_deadline',\n    $gL10n->get('DAT_DEADLINE'),\n    $date->getValue('dat_deadline', $gSettingsManager->getString('system_date').' '.$gSettingsManager->getString('system_time')),\n    array('type' => 'datetime', 'helpTextIdLabel' => 'SYS_EVENT_DEADLINE_DESC')\n);\n$form->addCheckbox('date_right_list_view', $gL10n->get('DAT_RIGHT_VIEW_PARTICIPANTS'), $flagDateRightListView);\n$form->addCheckbox('date_right_send_mail', $gL10n->get('DAT_RIGHT_MAIL_PARTICIPANTS'), $flagDateRightSendMail);\n$form->closeGroupBox();\n\n$form->openGroupBox('gb_description', $gL10n->get('SYS_DESCRIPTION'), 'admidio-panel-editor');\n$form->addEditor('dat_description', '', $date->getValue('dat_description'));\n$form->closeGroupBox();\n\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check'));\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $date->getValue('dat_usr_id_create'),\n    $date->getValue('dat_timestamp_create'),\n    (int) $date->getValue('dat_usr_id_change'),\n    $date->getValue('dat_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Rename a file or a folder of download module\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * folder_uuid :  UUID of the folder that should be renamed\n * file_uuid   :  UUID of the file that should be renamed\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getFolderUuid = admFuncVariableIsValid($_GET, 'folder_uuid', 'string');\n$getFileUuid   = admFuncVariableIsValid($_GET, 'file_uuid', 'string');\n\n// set headline of the script\nif ($getFileUuid !== '') {\n    $headline = $gL10n->get('SYS_EDIT_FILE');\n} else {\n    $headline = $gL10n->get('SYS_EDIT_FOLDER');\n}\n\n// check if the module is enabled and disallow access if it's disabled\nif (!$gSettingsManager->getBool('documents_files_enable_module')) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\nif (isset($_SESSION['documents_files_request'])) {\n    $formValues = $_SESSION['documents_files_request'];\n    unset($_SESSION['documents_files_request']);\n} else {\n    $formValues['new_name'] = null;\n    $formValues['new_description'] = null;\n}\n\ntry {\n    // check the rights of the current folder\n    // user must be administrator or must have the right to upload files\n    $targetFolder = new TableFolder($gDb);\n    $targetFolder->getFolderForDownload($getFolderUuid);\n} catch (AdmException $e) {\n    $e->showHtml();\n    // => EXIT\n}\n\nif (!$targetFolder->hasUploadRight()) {\n    $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n    // => EXIT\n}\n\n$originalName    = '';\n$fileType        = '';\n$createUserId    = 0;\n$createTimestamp = '';\n\ntry {\n    if ($getFileUuid !== '') {\n        // get recordset of current file from database\n        $file = new TableFile($gDb);\n        $file->getFileForDownload($getFileUuid);\n\n        $originalName    = pathinfo($file->getValue('fil_name'), PATHINFO_FILENAME);\n        $fileType        = pathinfo($file->getValue('fil_name'), PATHINFO_EXTENSION);\n        $createUserId    = (int) $file->getValue('fil_usr_id');\n        $createTimestamp = $file->getValue('fil_timestamp');\n\n        if ($formValues['new_name'] === null) {\n            $formValues['new_name'] = $originalName;\n        }\n\n        if ($formValues['new_description'] === null) {\n            $formValues['new_description'] = $file->getValue('fil_description');\n        }\n    } else {\n        // main folder should not be renamed\n        if ($targetFolder->getValue('fol_fol_id_parent') === '') {\n            $gMessage->show($gL10n->get('SYS_INVALID_PAGE_VIEW'));\n            // => EXIT\n        }\n\n        // read folder data to rename the folder\n        $originalName    = $targetFolder->getValue('fol_name', 'database');\n        $createUserId    = (int) $targetFolder->getValue('fol_usr_id');\n        $createTimestamp = $targetFolder->getValue('fol_timestamp');\n\n        if ($formValues['new_name'] == null) {\n            $formValues['new_name'] = $originalName;\n        }\n\n        if ($formValues['new_description'] == null) {\n            $formValues['new_description'] = $targetFolder->getValue('fol_description', 'database');\n        }\n    }\n} catch (AdmException $e) {\n    $e->showHtml();\n    // => EXIT\n}\n\n// create html page object\n$page = new HtmlPage('admidio-documents-files-rename', $headline);\n\n// create html form\n$form = new HtmlForm('edit_download_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/documents-files/documents_files_function.php', array('mode' => '4', 'folder_uuid' => $getFolderUuid, 'file_uuid' => $getFileUuid)), $page);\nif ($getFileUuid !== '') {\n    $form->addInput(\n        'file_type',\n        $gL10n->get('SYS_FILE_TYPE'),\n        $fileType,\n        array('property' => HtmlForm::FIELD_DISABLED, 'class' => 'form-control-small')\n    );\n}\n$form->addInput(\n    'previous_name',\n    $gL10n->get('SYS_PREVIOUS_NAME'),\n    $originalName,\n    array('property' => HtmlForm::FIELD_DISABLED)\n);\n$form->addInput(\n    'new_name',\n    $gL10n->get('SYS_NEW_NAME'),\n    $formValues['new_name'],\n    array('maxLength' => 255, 'property' => HtmlForm::FIELD_REQUIRED, 'helpTextIdLabel' => 'SYS_FILE_NAME_RULES')\n);\n$form->addMultilineTextInput(\n    'new_description',\n    $gL10n->get('SYS_DESCRIPTION'),\n    $formValues['new_description'],\n    4,\n    array('maxLength' => 255)\n);\n$form->addSubmitButton(\n    'btn_rename',\n    $gL10n->get('SYS_SAVE'),\n    array('icon' => 'fa-check', 'class' => ' offset-sm-3')\n);\n$form->addHtml(admFuncShowCreateChangeInfoById($createUserId, $createTimestamp));\n\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit roles\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * role_uuid: UUID of role, that should be edited\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getRoleUuid = admFuncVariableIsValid($_GET, 'role_uuid', 'string');\n\n// Initialize local parameters\n$showSystemCategory = false;\n$eventRole = false;\n\n// only users with the special right are allowed to manage roles\nif (!$gCurrentUser->manageRoles()) {\n    $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n    // => EXIT\n}\n\nif ($getRoleUuid !== '') {\n    $headline = $gL10n->get('SYS_EDIT_ROLE');\n} else {\n    $headline = $gL10n->get('SYS_CREATE_ROLE');\n}\n\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\n// create role object\n$role = new TableRoles($gDb);\n\nif ($getRoleUuid !== '') {\n    $role->readDataByUuid($getRoleUuid);\n    $eventRole = $role->getValue('cat_name_intern') === 'EVENTS';\n\n    // check if the role belongs to the current organization\n    if ((int) $role->getValue('cat_org_id') !== $gCurrentOrgId && $role->getValue('cat_org_id') > 0) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n\n    // administrator role could only be created or edited by administrators\n    if ($role->getValue('rol_administrator') == 1 && !$gCurrentUser->isAdministrator()) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n\n    // hidden roles can also see hidden categories\n    if ($role->getValue('cat_system') == 1) {\n        $showSystemCategory = true;\n    }\n}\n\nif (isset($_SESSION['roles_request'])) {\n    // due to incorrect input the user has returned to this form\n    // now write the previously entered contents into the object\n    $role->setArray($_SESSION['roles_request']);\n    unset($_SESSION['roles_request']);\n}\n\n// get all dependent roles of this role\n$childRoles = RoleDependency::getChildRoles($gDb, $role->getValue('rol_id'));\n\n$childRoleObjects = array();\n\n// create html page object\n$page = new HtmlPage('admidio-groups-roles-edit', $headline);\n\n$page->addJavascript(\n    '\n    checkMaxMemberCount();\n    $(\"#rol_assign_roles\").change(function() {\n        markRoleRight(\"rol_assign_roles\", \"rol_all_lists_view\", true);\n    });\n    $(\"#rol_all_lists_view\").change(function() {\n        markRoleRight(\"rol_all_lists_view\", \"rol_assign_roles\", false);\n    });\n    $(\"#rol_max_members\").change(function() {\n        checkMaxMemberCount();\n    });',\n    true\n);\n\n$page->addJavascript('\n    /**\n     * show/hide role dependencies if max count members will be changed\n     */\n    function checkMaxMemberCount() {\n        // Wenn eine Maximale Mitgliederzahl angeben wurde, duerfen keine Rollenabhaengigkeiten bestehen\n        if ($(\"#rol_max_members\").val() > 0) {\n            // Die Box zum konfigurieren der Rollenabh\u00e4ngig wird ausgeblendet\n            $(\"#gb_dependencies\").hide();\n\n            // Alle Abh\u00e4ngigen Rollen werden markiert und auf unabh\u00e4ngig gesetzt\n            $(\"#dependent_roles\").val(\"\");\n        } else {\n            // Die Box zum konfigurieren der Rollenabh\u00e4ngigkeit wird wieder eingeblendet\n            $(\"#gb_dependencies\").show();\n        }\n    }\n\n    /**\n     * Set dependent role right if another role right changed\n     * @param {string} srcRight  ID des Rechts, welches das Ereignis ausloest\n     * @param {string} destRight ID des Rechts, welches angepasst werden soll\n     * @param {bool}   checked   true destRight wird auf checked gesetzt\n     *                           false destRight wird auf unchecked gesetzt\n     */\n    function markRoleRight(srcRight, destRight, checked) {\n        if (document.getElementById(srcRight).checked && checked) {\n            document.getElementById(destRight).checked = true;\n        }\n        if (!document.getElementById(srcRight).checked && !checked) {\n            document.getElementById(destRight).checked = false;\n        }\n    }\n');\n\n$form = new HtmlForm('roles_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/groups-roles/groups_roles_function.php', array('role_uuid' => $getRoleUuid, 'mode' => '2')), $page);\n$form->openGroupBox('gb_name_category', $gL10n->get('SYS_NAME').' & '.$gL10n->get('SYS_CATEGORY'));\n\nif ($role->getValue('rol_administrator') === 1 || $eventRole) {\n    $fieldProperty = HtmlForm::FIELD_READONLY;\n} else {\n    $fieldProperty = HtmlForm::FIELD_REQUIRED;\n}\n$form->addInput(\n    'rol_name',\n    $gL10n->get('SYS_NAME'),\n    $role->getValue('rol_name', 'database'),\n    array('maxLength' => 100, 'property' => $fieldProperty)\n);\n$form->addMultilineTextInput(\n    'rol_description',\n    $gL10n->get('SYS_DESCRIPTION'),\n    $role->getValue('rol_description', 'database'),\n    3,\n    array('property' => ($eventRole ? HtmlForm::FIELD_READONLY : HtmlForm::FIELD_DEFAULT), 'maxLength' => 4000)\n);\n$form->addSelectBoxForCategories(\n    'rol_cat_id',\n    $gL10n->get('SYS_CATEGORY'),\n    $gDb,\n    ($eventRole ? 'ROL_EVENT' : 'ROL'),\n    HtmlForm::SELECT_BOX_MODUS_EDIT,\n    array('property' => ($eventRole ? HtmlForm::FIELD_READONLY : HtmlForm::FIELD_REQUIRED), 'defaultValue' => $role->getValue('cat_uuid'))\n);\n$form->closeGroupBox();\n$form->openGroupBox('gb_properties', $gL10n->get('SYS_PROPERTIES'));\nif ($gSettingsManager->getBool('enable_mail_module')) {\n    $selectBoxEntries = array(0 => $gL10n->get('SYS_NOBODY'), 1 => $gL10n->get('SYS_ROLE_MEMBERS'), 2 => $gL10n->get('ORG_REGISTERED_USERS'), 3 => $gL10n->get('SYS_ALSO_VISITORS'));\n    $form->addSelectBox(\n        'rol_mail_this_role',\n        $gL10n->get('SYS_SEND_MAILS'),\n        $selectBoxEntries,\n        array(\n            'defaultValue'                   => $role->getValue('rol_mail_this_role'),\n            'showContextDependentFirstEntry' => false,\n            'helpTextIdLabel'                => $gL10n->get('SYS_RIGHT_MAIL_THIS_ROLE_DESC', array('SYS_RIGHT_MAIL_TO_ALL'))\n        )\n    );\n}\n$selectBoxEntries = array(0 => $gL10n->get('SYS_NOBODY'), 3 => $gL10n->get('SYS_LEADERS'), 1 => $gL10n->get('SYS_ROLE_MEMBERS'), 2 => $gL10n->get('ORG_REGISTERED_USERS'));\n$form->addSelectBox(\n    'rol_view_memberships',\n    $gL10n->get('SYS_VIEW_ROLE_MEMBERSHIPS'),\n    $selectBoxEntries,\n    array(\n        'defaultValue'                   => $role->getValue('rol_view_memberships'),\n        'showContextDependentFirstEntry' => false,\n        'helpTextIdLabel'                => $gL10n->get('SYS_VIEW_ROLE_MEMBERSHIPS_DESC', array('SYS_RIGHT_ALL_LISTS_VIEW'))\n    )\n);\n$form->addSelectBox(\n    'rol_view_members_profiles',\n    $gL10n->get('SYS_VIEW_PROFILES_OF_ROLE_MEMBERS'),\n    $selectBoxEntries,\n    array(\n        'defaultValue'                   => $role->getValue('rol_view_members_profiles'),\n        'showContextDependentFirstEntry' => false,\n        'helpTextIdLabel'                => $gL10n->get('SYS_VIEW_PROFILES_OF_ROLE_MEMBERS_DESC', array('SYS_RIGHT_ALL_LISTS_VIEW'))\n    )\n);\n$selectBoxEntries = array(0 => $gL10n->get('SYS_NO_ADDITIONAL_RIGHTS'), 1 => $gL10n->get('SYS_ASSIGN_MEMBERS'), 2 => $gL10n->get('SYS_EDIT_MEMBERS'), 3 => $gL10n->get('SYS_ASSIGN_EDIT_MEMBERS'));\n$form->addSelectBox(\n    'rol_leader_rights',\n    $gL10n->get('SYS_LEADER'),\n    $selectBoxEntries,\n    array(\n        'defaultValue'                   => $role->getValue('rol_leader_rights'),\n        'showContextDependentFirstEntry' => false,\n        'helpTextIdLabel'                => 'SYS_LEADER_RIGHTS_DESC'\n    )\n);\n\n$selectBoxEntries = array(0 => $gL10n->get('SYS_SYSTEM_DEFAULT_LIST'));\n// SQL-Statement fuer alle Listenkonfigurationen vorbereiten, die angezeigt werdne sollen\n$sql = 'SELECT lst_id, lst_name\n          FROM '.TBL_LISTS.'\n         WHERE lst_org_id = ? -- $gCurrentOrgId\n           AND lst_global = true\n           AND lst_name IS NOT NULL\n      ORDER BY lst_global ASC, lst_name ASC';\n$pdoStatement = $gDb->queryPrepared($sql, array($gCurrentOrgId));\n\nwhile ($row = $pdoStatement->fetch()) {\n    $selectBoxEntries[$row['lst_id']] = $row['lst_name'];\n}\n$form->addSelectBox(\n    'rol_lst_id',\n    $gL10n->get('SYS_DEFAULT_LIST'),\n    $selectBoxEntries,\n    array('defaultValue' => (int) $role->getValue('rol_lst_id'), 'showContextDependentFirstEntry' => false, 'helpTextIdLabel' => 'SYS_DEFAULT_LIST_DESC')\n);\n\nif (!$eventRole) {\n    $form->addCheckbox(\n        'rol_default_registration',\n        $gL10n->get('SYS_DEFAULT_ASSIGNMENT_REGISTRATION'),\n        (bool) $role->getValue('rol_default_registration'),\n        array('helpTextIdLabel' => 'SYS_DEFAULT_ASSIGNMENT_REGISTRATION_DESC')\n    );\n    $form->addInput(\n        'rol_max_members',\n        $gL10n->get('SYS_MAX_PARTICIPANTS').'<br />('.$gL10n->get('SYS_NO_LEADER').')',\n        (int) $role->getValue('rol_max_members'),\n        array('type' => 'number', 'minNumber' => 0, 'maxNumber' => 99999, 'step' => 1)\n    );\n    $form->addInput(\n        'rol_cost',\n        $gL10n->get('SYS_CONTRIBUTION').' '.$gSettingsManager->getString('system_currency'),\n        $role->getValue('rol_cost'),\n        array('type' => 'number', 'minNumber' => 0, 'maxNumber' => 99999, 'step' => '0.01')\n    );\n    $form->addSelectBox(\n        'rol_cost_period',\n        $gL10n->get('SYS_CONTRIBUTION_PERIOD'),\n        TableRoles::getCostPeriods(),\n        array('defaultValue' => $role->getValue('rol_cost_period'))\n    );\n}\n$form->closeGroupBox();\n\n// event roles should not set rights, dates meetings and dependencies\nif (!$eventRole) {\n    $form->openGroupBox('gb_authorization', $gL10n->get('SYS_PERMISSIONS'));\n    $form->addCheckbox(\n        'rol_assign_roles',\n        $gL10n->get('SYS_RIGHT_ASSIGN_ROLES'),\n        (bool) $role->getValue('rol_assign_roles'),\n        array('helpTextIdLabel' => 'SYS_RIGHT_ASSIGN_ROLES_DESC', 'icon' => 'fa-users')\n    );\n    $form->addCheckbox(\n        'rol_all_lists_view',\n        $gL10n->get('SYS_RIGHT_ALL_LISTS_VIEW'),\n        (bool) $role->getValue('rol_all_lists_view'),\n        array('icon' => 'fa-list')\n    );\n    $form->addCheckbox(\n        'rol_approve_users',\n        $gL10n->get('SYS_RIGHT_APPROVE_USERS'),\n        (bool) $role->getValue('rol_approve_users'),\n        array('icon' => 'fa-address-card')\n    );\n    if ($gSettingsManager->getBool('enable_mail_module')) {\n        $form->addCheckbox(\n            'rol_mail_to_all',\n            $gL10n->get('SYS_RIGHT_MAIL_TO_ALL'),\n            (bool) $role->getValue('rol_mail_to_all'),\n            array('icon' => 'fa-envelope')\n        );\n    }\n    $form->addCheckbox(\n        'rol_edit_user',\n        $gL10n->get('SYS_RIGHT_EDIT_USER'),\n        (bool) $role->getValue('rol_edit_user'),\n        array('helpTextIdLabel' => 'SYS_RIGHT_EDIT_USER_DESC', 'icon' => 'fa-users-cog')\n    );\n    $form->addCheckbox(\n        'rol_profile',\n        $gL10n->get('SYS_RIGHT_PROFILE'),\n        (bool) $role->getValue('rol_profile'),\n        array('icon' => 'fa-user')\n    );\n    if ((int) $gSettingsManager->get('enable_announcements_module') > 0) {\n        $form->addCheckbox(\n            'rol_announcements',\n            $gL10n->get('SYS_RIGHT_ANNOUNCEMENTS'),\n            (bool) $role->getValue('rol_announcements'),\n            array('helpTextIdLabel' => 'SYS_ROLES_MODULE_ADMINISTRATORS_DESC', 'icon' => 'fa-newspaper')\n        );\n    }\n    if ((int) $gSettingsManager->get('enable_dates_module') > 0) {\n        $form->addCheckbox(\n            'rol_dates',\n            $gL10n->get('SYS_RIGHT_DATES'),\n            (bool) $role->getValue('rol_dates'),\n            array('helpTextIdLabel' => 'SYS_ROLES_MODULE_ADMINISTRATORS_DESC', 'icon' => 'fa-calendar-alt')\n        );\n    }\n    if ((int) $gSettingsManager->get('enable_photo_module') > 0) {\n        $form->addCheckbox(\n            'rol_photo',\n            $gL10n->get('SYS_RIGHT_PHOTOS'),\n            (bool) $role->getValue('rol_photo'),\n            array('icon' => 'fa-image')\n        );\n    }\n    if ($gSettingsManager->getBool('documents_files_enable_module')) {\n        $form->addCheckbox(\n            'rol_documents_files',\n            $gL10n->get('SYS_RIGHT_DOCUMENTS_FILES'),\n            (bool) $role->getValue('rol_documents_files'),\n            array('helpTextIdLabel' => 'SYS_RIGHT_DOCUMENTS_FILES_DESC', 'icon' => 'fa-download')\n        );\n    }\n    if ((int) $gSettingsManager->get('enable_guestbook_module') > 0) {\n        $form->addCheckbox(\n            'rol_guestbook',\n            $gL10n->get('SYS_RIGHT_GUESTBOOK'),\n            (bool) $role->getValue('rol_guestbook'),\n            array('icon' => 'fa-book')\n        );\n        // if not registered users can set comments than there is no need to set a role dependent right\n        if (!$gSettingsManager->getBool('enable_gbook_comments4all')) {\n            $form->addCheckbox(\n                'rol_guestbook_comments',\n                $gL10n->get('SYS_RIGHT_GUESTBOOK_COMMENTS'),\n                (bool) $role->getValue('rol_guestbook_comments'),\n                array('icon' => 'fa-comment')\n            );\n        }\n    }\n    if ((int) $gSettingsManager->get('enable_weblinks_module') > 0) {\n        $form->addCheckbox(\n            'rol_weblinks',\n            $gL10n->get('SYS_RIGHT_WEBLINKS'),\n            (bool) $role->getValue('rol_weblinks'),\n            array('helpTextIdLabel' => 'SYS_ROLES_MODULE_ADMINISTRATORS_DESC', 'icon' => 'fa-link')\n        );\n    }\n    $form->closeGroupBox();\n    $form->openGroupBox('gb_dates_meetings', $gL10n->get('DAT_DATES').' / '.$gL10n->get('SYS_MEETINGS').'&nbsp;&nbsp;('.$gL10n->get('SYS_OPTIONAL').')');\n    $form->addInput('rol_start_date', $gL10n->get('SYS_VALID_FROM'), $role->getValue('rol_start_date'), array('type' => 'date'));\n    $form->addInput('rol_end_date', $gL10n->get('SYS_VALID_TO'), $role->getValue('rol_end_date'), array('type' => 'date'));\n    $form->addInput('rol_start_time', $gL10n->get('SYS_TIME_FROM'), $role->getValue('rol_start_time'), array('type' => 'time'));\n    $form->addInput('rol_end_time', $gL10n->get('SYS_TIME_TO'), $role->getValue('rol_end_time'), array('type' => 'time'));\n    $form->addSelectBox('rol_weekday', $gL10n->get('SYS_WEEKDAY'), DateTimeExtended::getWeekdays(), array('defaultValue' => $role->getValue('rol_weekday')));\n    $form->addInput('rol_location', $gL10n->get('SYS_LOCATION'), $role->getValue('rol_location', 'database'), array('maxLength' => 100));\n    $form->closeGroupBox();\n\n    $form->openGroupBox('gb_dependencies', $gL10n->get('SYS_DEPENDENCIES').'&nbsp;&nbsp;('.$gL10n->get('SYS_OPTIONAL').')');\n    $roleName = $gL10n->get('SYS_NEW_ROLE');\n    if ($role->getValue('rol_name') !== '') {\n        $roleName = $gL10n->get('SYS_ROLE').' <strong>'.$role->getValue('rol_name').'</strong>';\n    }\n    $form->addHtml('<p>'.$gL10n->get('SYS_ROLE_DEPENDENCIES_DESC', array($roleName)).'</p>');\n\n    //  list all roles that the user is allowed to see\n    $sqlData['query'] = 'SELECT rol_id, rol_name, cat_name\n                           FROM '.TBL_ROLES.'\n                     INNER JOIN '.TBL_CATEGORIES.'\n                             ON cat_id = rol_cat_id\n                          WHERE rol_valid   = true\n                            AND cat_name_intern <> \\'EVENTS\\'\n                            AND (  cat_org_id  = ? -- $gCurrentOrgId\n                                OR cat_org_id IS NULL )\n                       ORDER BY cat_sequence, rol_name';\n    $sqlData['params'] = array($gCurrentOrgId);\n\n    $form->addSelectBoxFromSql(\n        'dependent_roles',\n        $gL10n->get('SYS_DEPENDENT'),\n        $gDb,\n        $sqlData,\n        array('defaultValue' => $childRoles, 'multiselect' => true)\n    );\n    $form->closeGroupBox();\n}\n\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check'));\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $role->getValue('rol_usr_id_create'),\n    $role->getValue('rol_timestamp_create'),\n    (int) $role->getValue('rol_usr_id_change'),\n    $role->getValue('rol_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit guestbook comments\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * gbo_uuid      - UUID of the guestbook entry that should get a new comment\n * gbc_uuid      - UUID of the comment that should be edited\n * headline      - Title of the announcement module. This will be shown in the whole module.\n *                 (Default) GBO_GUESTBOOK\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\n\n// Initialize and check the parameters\n$getGboUuid  = admFuncVariableIsValid($_GET, 'gbo_uuid', 'string');\n$getGbcUuid  = admFuncVariableIsValid($_GET, 'gbc_uuid', 'string');\n$getHeadline = admFuncVariableIsValid($_GET, 'headline', 'string', array('defaultValue' => $gL10n->get('GBO_GUESTBOOK')));\n\n// check if the module is enabled and disallow access if it's disabled\nif ((int) $gSettingsManager->get('enable_guestbook_module') === 0) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n// One (not two) parameter must be passed: Either gbo_uuid or gbc_uuid...\nif ($getGboUuid !== '' && $getGbcUuid !== '') {\n    $gMessage->show($gL10n->get('SYS_INVALID_PAGE_VIEW'));\n    // => EXIT\n}\n\n// set create or edit mode\nif ($getGboUuid !== '') {\n    $mode     = '4';\n    $headline = $gL10n->get('GBO_CREATE_COMMENT');\n} else {\n    $mode     = '8';\n    $headline = $gL10n->get('GBO_EDIT_COMMENT');\n}\n\n// Erst einmal die Rechte abklopfen...\nif (((int) $gSettingsManager->get('enable_guestbook_module') === 2 || !$gSettingsManager->getBool('enable_gbook_comments4all')) && $getGboUuid !== '') {\n    // Falls anonymes kommentieren nicht erlaubt ist, muss der User eingeloggt sein zum kommentieren\n    require(__DIR__ . '/../../system/login_valid.php');\n\n    if (!$gCurrentUser->commentGuestbookRight()) {\n        // der User hat kein Recht zu kommentieren\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n}\n\nif ($getGbcUuid !== '') {\n    // Zum editieren von Kommentaren muss der User auch eingeloggt sein\n    require(__DIR__ . '/../../system/login_valid.php');\n\n    if (!$gCurrentUser->editGuestbookRight()) {\n        // der User hat kein Recht Kommentare zu editieren\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n}\n\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\n// Gaestebuchkommentarobjekt anlegen\n$gbComment = new TableGuestbookComment($gDb);\n\nif ($getGbcUuid !== '') {\n    $gbComment->readDataByUuid($getGbcUuid);\n\n    // Pruefung, ob der Eintrag zur aktuellen Organisation gehoert\n    if ((int) $gbComment->getValue('gbo_org_id') !== $gCurrentOrgId) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n}\n\nif (isset($_SESSION['guestbook_comment_request'])) {\n    // durch fehlerhafte Eingabe ist der User zu diesem Formular zurueckgekehrt\n    // nun die vorher eingegebenen Inhalte ins Objekt schreiben\n    $gbComment->setArray($_SESSION['guestbook_comment_request']);\n    unset($_SESSION['guestbook_comment_request']);\n}\n\n// Wenn der User eingeloggt ist und keine cid uebergeben wurde\n// koennen zumindest Name und Emailadresse vorbelegt werden...\nif ($getGbcUuid === '' && $gValidLogin) {\n    $gbComment->setValue('gbc_name', $gCurrentUser->getValue('FIRST_NAME') . ' ' . $gCurrentUser->getValue('LAST_NAME'));\n    $gbComment->setValue('gbc_email', $gCurrentUser->getValue('EMAIL'));\n}\n\nif (!$gValidLogin && $gSettingsManager->getInt('flooding_protection_time') > 0) {\n    // Falls er nicht eingeloggt ist, wird vor dem Ausfuellen des Formulars noch geprueft ob der\n    // User innerhalb einer festgelegten Zeitspanne unter seiner IP-Adresse schon einmal\n    // einen GB-Eintrag erzeugt hat...\n    $ipAddress = $_SERVER['REMOTE_ADDR'];\n\n    $sql = 'SELECT COUNT(*) AS count\n              FROM '.TBL_GUESTBOOK_COMMENTS.'\n             WHERE unix_timestamp(gbc_timestamp_create) > unix_timestamp() - ? -- $gSettingsManager->getInt(\\'flooding_protection_time\\')\n               AND gbc_ip_address = ? -- $gbComment->getValue(\\'gbc_ip_address\\')';\n    $pdoStatement = $gDb->queryPrepared($sql, array($gSettingsManager->getInt('flooding_protection_time'), $gbComment->getValue('gbc_ip_address')));\n\n    if ($pdoStatement->fetchColumn() > 0) {\n        // Wenn dies der Fall ist, gibt es natuerlich keinen Gaestebucheintrag...\n        $gMessage->show($gL10n->get('GBO_FLOODING_PROTECTION', array($gSettingsManager->getInt('flooding_protection_time'))));\n        // => EXIT\n    }\n}\n\n// create html page object\n$page = new HtmlPage('admidio-guestbook-comment-new', $headline);\n\n// show form\n$form = new HtmlForm('guestbook_comment_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/guestbook/guestbook_function.php', array('gbo_uuid' => $getGboUuid, 'gbc_uuid' => $getGbcUuid, 'headline' => $getHeadline, 'mode' => $mode)), $page);\nif ($gCurrentUserId > 0) {\n    // registered users should not change their name\n    $form->addInput(\n        'gbc_name',\n        $gL10n->get('SYS_NAME'),\n        $gbComment->getValue('gbc_name', 'database'),\n        array('maxLength' => 60, 'property' => HtmlForm::FIELD_DISABLED)\n    );\n} else {\n    $form->addInput(\n        'gbc_name',\n        $gL10n->get('SYS_NAME'),\n        $gbComment->getValue('gbc_name', 'database'),\n        array('maxLength' => 60, 'property' => HtmlForm::FIELD_REQUIRED)\n    );\n}\n$form->addInput(\n    'gbc_email',\n    $gL10n->get('SYS_EMAIL'),\n    $gbComment->getValue('gbc_email'),\n    array('type' => 'email', 'maxLength' => 254)\n);\n$form->addEditor(\n    'gbc_text',\n    $gL10n->get('SYS_COMMENT'),\n    $gbComment->getValue('gbc_text'),\n    array('property' => HtmlForm::FIELD_REQUIRED, 'toolbar' => 'AdmidioGuestbook')\n);\n\n// if captchas are enabled then visitors of the website must resolve this\nif (!$gValidLogin && $gSettingsManager->getBool('enable_mail_captcha')) {\n    $form->openGroupBox('gb_confirmation_of_entry', $gL10n->get('SYS_CONFIRMATION_OF_INPUT'));\n    $form->addCaptcha('captcha_code');\n    $form->closeGroupBox();\n}\n\n// show information about user who creates the recordset and changed it\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check'));\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $gbComment->getValue('gbc_usr_id_create'),\n    $gbComment->getValue('gbc_timestamp_create'),\n    (int) $gbComment->getValue('gbc_usr_id_change'),\n    $gbComment->getValue('gbc_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit guestbook entries\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * gbo_uuid   - UUID of one guestbook entry that should be shown\n * headline   - Title of the guestbook module. This will be shown in the whole module.\n *              (Default) GBO_GUESTBOOK\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\n\n// Initialize and check the parameters\n$getGboUuid  = admFuncVariableIsValid($_GET, 'gbo_uuid', 'string');\n$getHeadline = admFuncVariableIsValid($_GET, 'headline', 'string', array('defaultValue' => $gL10n->get('GBO_GUESTBOOK')));\n\n// check if the module is enabled and disallow access if it's disabled\nif ((int) $gSettingsManager->get('enable_guestbook_module') === 0) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n// => EXIT\n} elseif ((int) $gSettingsManager->get('enable_guestbook_module') === 2) {\n    // only logged in users can access the module\n    require(__DIR__ . '/../../system/login_valid.php');\n}\n\n// set headline of the script\nif ($getGboUuid !== '') {\n    $headline = $gL10n->get('SYS_EDIT_ENTRY');\n} else {\n    $headline = $gL10n->get('SYS_WRITE_ENTRY');\n}\n\n// add current url to navigation stack\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\n// Gaestebuchobjekt anlegen\n$guestbook = new TableGuestbook($gDb);\n\nif ($getGboUuid !== '') {\n    // Falls ein Eintrag bearbeitet werden soll muss geprueft weden ob die Rechte gesetzt sind...\n    require(__DIR__ . '/../../system/login_valid.php');\n\n    if (!$gCurrentUser->editGuestbookRight()) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n\n    $guestbook->readDataByUuid($getGboUuid);\n\n    // Check if the entry belongs to the current organization\n    if ((int) $guestbook->getValue('gbo_org_id') !== $gCurrentOrgId) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n}\n\n// If no ID was passed, but the user is logged in, at least the following can be done\n// name, email address and homepage can be preset...\nif ($getGboUuid === '' && $gValidLogin) {\n    $guestbook->setValue('gbo_name', $gCurrentUser->getValue('FIRST_NAME') . ' ' . $gCurrentUser->getValue('LAST_NAME'));\n    $guestbook->setValue('gbo_email', $gCurrentUser->getValue('EMAIL'));\n    $guestbook->setValue('gbo_homepage', $gCurrentUser->getValue('WEBSITE'));\n}\n\nif (isset($_SESSION['guestbook_entry_request'])) {\n    // due to a wrong input the user has returned to this form, now write the previously entered content into the object\n    $guestbook->setArray($_SESSION['guestbook_entry_request']);\n    unset($_SESSION['guestbook_entry_request']);\n}\n\nif (!$gValidLogin && $gSettingsManager->getInt('flooding_protection_time') > 0) {\n    // Falls er nicht eingeloggt ist, wird vor dem Ausfuellen des Formulars noch geprueft ob der\n    // User innerhalb einer festgelegten Zeitspanne unter seiner IP-Adresse schon einmal\n    // einen GB-Eintrag erzeugt hat...\n    $ipAddress = $_SERVER['REMOTE_ADDR'];\n\n    $sql = 'SELECT COUNT(*) AS count\n              FROM '.TBL_GUESTBOOK.'\n             WHERE unix_timestamp(gbo_timestamp_create) > unix_timestamp() - ? -- $gSettingsManager->getInt(\\'flooding_protection_time\\')\n               AND gbo_org_id     = ? -- $gCurrentOrgId\n               AND gbo_ip_address = ? -- $guestbook->getValue(\\'gbo_ip_address\\')';\n    $queryParams = array($gSettingsManager->getInt('flooding_protection_time'), $gCurrentOrgId, $guestbook->getValue('gbo_ip_address'));\n    $pdoStatement = $gDb->queryPrepared($sql, $queryParams);\n\n    if ($pdoStatement->fetchColumn() > 0) {\n        // Wenn dies der Fall ist, gibt es natuerlich keinen Gaestebucheintrag...\n        $gMessage->show($gL10n->get('GBO_FLOODING_PROTECTION', array($gSettingsManager->getInt('flooding_protection_time'))));\n        // => EXIT\n    }\n}\n\n// create html page object\n$page = new HtmlPage('admidio-guestbook-new', $getHeadline . ' - ' . $headline);\n\n// Html des Modules ausgeben\nif ($getGboUuid !== '') {\n    $mode = '3';\n} else {\n    $mode = '1';\n}\n\n// show form\n$form = new HtmlForm('guestbook_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/guestbook/guestbook_function.php', array('gbo_uuid' => $getGboUuid, 'headline' => $getHeadline, 'mode' => $mode)), $page);\nif ($gCurrentUserId > 0) {\n    // registered users should not change their name\n    $form->addInput(\n        'gbo_name',\n        $gL10n->get('SYS_NAME'),\n        $guestbook->getValue('gbo_name', 'database'),\n        array('maxLength' => 60, 'property' => HtmlForm::FIELD_DISABLED)\n    );\n} else {\n    $form->addInput(\n        'gbo_name',\n        $gL10n->get('SYS_NAME'),\n        $guestbook->getValue('gbo_name', 'database'),\n        array('maxLength' => 60, 'property' => HtmlForm::FIELD_REQUIRED)\n    );\n}\n$form->addInput(\n    'gbo_email',\n    $gL10n->get('SYS_EMAIL'),\n    $guestbook->getValue('gbo_email'),\n    array('type' => 'email', 'maxLength' => 254)\n);\n$form->addInput(\n    'gbo_homepage',\n    $gL10n->get('SYS_WEBSITE'),\n    $guestbook->getValue('gbo_homepage'),\n    array('maxLength' => 50)\n);\n$form->addEditor(\n    'gbo_text',\n    $gL10n->get('SYS_MESSAGE'),\n    $guestbook->getValue('gbo_text'),\n    array('property' => HtmlForm::FIELD_REQUIRED, 'toolbar' => 'AdmidioGuestbook')\n);\n\n// if captchas are enabled then visitors of the website must resolve this\nif (!$gValidLogin && $gSettingsManager->getBool('enable_mail_captcha')) {\n    $form->openGroupBox('gb_confirmation_of_entry', $gL10n->get('SYS_CONFIRMATION_OF_INPUT'));\n    $form->addCaptcha('captcha_code');\n    $form->closeGroupBox();\n}\n\n// show information about user who creates the recordset and changed it\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check'));\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $guestbook->getValue('gbo_usr_id_create'),\n    $guestbook->getValue('gbo_timestamp_create'),\n    (int) $guestbook->getValue('gbo_usr_id_change'),\n    $guestbook->getValue('gbo_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit weblinks\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * link_uuid - UUID of the weblink that should be edited\n * headline  - Title of the weblink module. This will be shown in the whole module.\n *             (Default) SYS_WEBLINKS\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getLinkUuid = admFuncVariableIsValid($_GET, 'link_uuid', 'string');\n$getHeadline = admFuncVariableIsValid($_GET, 'headline', 'string', array('defaultValue' => $gL10n->get('SYS_WEBLINKS')));\n\n// check if the module is enabled for use\nif ((int) $gSettingsManager->get('enable_weblinks_module') === 0) {\n    // module is disabled\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n// create weblink object\n$link = new TableWeblink($gDb);\n\nif ($getLinkUuid !== '') {\n    $link->readDataByUuid($getLinkUuid);\n\n    // check if the current user could edit this weblink\n    if (!$link->isEditable()) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n} else {\n    // check if the user has the right to edit at least one category\n    if (count($gCurrentUser->getAllEditableCategories('LNK')) === 0) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n}\n\nif (isset($_SESSION['links_request'])) {\n    // due to incorrect input the user has returned to this form\n    // now write the previously entered contents into the object\n    $link->setArray($_SESSION['links_request']);\n    unset($_SESSION['links_request']);\n}\n\nif ($getLinkUuid !== '') {\n    $headline = $gL10n->get('SYS_EDIT_VAR', array($getHeadline));\n} else {\n    $headline = $gL10n->get('SYS_CREATE_VAR', array($getHeadline));\n}\n\n// add current url to navigation stack\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\n// create html page object\n$page = new HtmlPage('admidio-weblinks-edit', $headline);\n\n// show form\n$form = new HtmlForm('weblinks_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/links/links_function.php', array('link_uuid' => $getLinkUuid, 'headline' => $getHeadline, 'mode' => 1)), $page);\n$form->addInput(\n    'lnk_name',\n    $gL10n->get('SYS_LINK_NAME'),\n    $link->getValue('lnk_name', 'database'),\n    array('maxLength' => 250, 'property' => HtmlForm::FIELD_REQUIRED)\n);\n$form->addInput(\n    'lnk_url',\n    $gL10n->get('SYS_LINK_ADDRESS'),\n    $link->getValue('lnk_url'),\n    array('maxLength' => 2000, 'property' => HtmlForm::FIELD_REQUIRED)\n);\n$form->addSelectBoxForCategories(\n    'lnk_cat_id',\n    $gL10n->get('SYS_CATEGORY'),\n    $gDb,\n    'LNK',\n    HtmlForm::SELECT_BOX_MODUS_EDIT,\n    array('property' => HtmlForm::FIELD_REQUIRED, 'defaultValue' => $link->getValue('cat_uuid'))\n);\n$form->addEditor(\n    'lnk_description',\n    $gL10n->get('SYS_DESCRIPTION'),\n    $link->getValue('lnk_description'),\n    array('height' => '150px')\n);\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check'));\n\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $link->getValue('lnk_usr_id_create'),\n    $link->getValue('lnk_timestamp_create'),\n    (int) $link->getValue('lnk_usr_id_change'),\n    $link->getValue('lnk_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit categories\n *\n * @copyright 2004-2023 The Admidio Team\n * @see http://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * menu_uuid: UUID of the menu entry that should be edited\n *\n ****************************************************************************/\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getMenuUuid = admFuncVariableIsValid($_GET, 'menu_uuid', 'string');\n\n// Rechte pruefen\nif (!$gCurrentUser->isAdministrator()) {\n    $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n}\n\n/**\n * @param array<int,string> $menuList\n * @param int               $level\n * @param int               $menId\n * @param int               $parentId\n */\nfunction subMenu(&$menuList, $level, $menId, $parentId = null)\n{\n    global $gDb;\n\n    $sqlConditionParentId = '';\n    $queryParams = array($menId);\n\n    // Erfassen des auszugebenden Menu\n    if ($parentId > 0) {\n        $sqlConditionParentId .= ' AND men_men_id_parent = ? -- $parentId';\n        $queryParams[] = $parentId;\n    } else {\n        $sqlConditionParentId .= ' AND men_men_id_parent IS NULL';\n    }\n\n    $sql = 'SELECT *\n              FROM '.TBL_MENU.'\n             WHERE men_node = true\n               AND men_id  <> ? -- $menu->getValue(\\'men_id\\')\n                   '.$sqlConditionParentId;\n    $childStatement = $gDb->queryPrepared($sql, $queryParams);\n\n    $parentMenu = new TableMenu($gDb);\n    $einschub = str_repeat('&nbsp;', $level * 3) . '&#151;&nbsp;';\n\n    while ($menuEntry = $childStatement->fetch()) {\n        $parentMenu->clear();\n        $parentMenu->setArray($menuEntry);\n\n        // add entry to array of all menus\n        $menuList[(int) $parentMenu->getValue('men_id')] = $einschub . $parentMenu->getValue('men_name');\n\n        subMenu($menuList, ++$level, $menId, (int) $parentMenu->getValue('men_id'));\n    }\n}\n\n// create menu object\n$menu = new TableMenu($gDb);\n\n// systemcategories should not be renamed\n$roleViewSet[] = 0;\n\nif ($getMenuUuid !== '') {\n    $headline = $gL10n->get('SYS_EDIT_VAR', array($gL10n->get('SYS_MENU')));\n\n    $menu->readDataByUuid($getMenuUuid);\n\n    // Read current roles rights of the menu\n    $display = new RolesRights($gDb, 'menu_view', $menu->getValue('men_id'));\n    $roleViewSet = $display->getRolesIds();\n} else {\n    $headline = $gL10n->get('SYS_CREATE_VAR', array($gL10n->get('SYS_MENU')));\n}\n\nif (isset($_SESSION['menu_request'])) {\n    // due to incorrect input, the user has returned to this form\n    // Now write the previously entered content into the object\n    $menu->setArray($_SESSION['menu_request']);\n    unset($_SESSION['menu_request']);\n}\n\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\n// create html page object\n$page = new HtmlPage('admidio-menu-edit', $headline);\n\n// alle aus der DB aus lesen\n$sqlRoles = 'SELECT rol_id, rol_name, org_shortname, cat_name\n               FROM '.TBL_ROLES.'\n         INNER JOIN '.TBL_CATEGORIES.'\n                 ON cat_id = rol_cat_id\n         INNER JOIN '.TBL_ORGANIZATIONS.'\n                 ON org_id = cat_org_id\n              WHERE rol_valid  = true\n                AND rol_system = false\n                AND cat_name_intern <> \\'EVENTS\\'\n           ORDER BY cat_name, rol_name';\n$rolesViewStatement = $gDb->queryPrepared($sqlRoles);\n\n$parentRoleViewSet = array();\nwhile ($rowViewRoles = $rolesViewStatement->fetch()) {\n    // Jede Rolle wird nun dem Array hinzugefuegt\n    $parentRoleViewSet[] = array(\n        $rowViewRoles['rol_id'],\n        $rowViewRoles['rol_name'] . ' (' . $rowViewRoles['org_shortname'] . ')',\n        $rowViewRoles['cat_name']\n    );\n}\n\n// show form\n$form = new HtmlForm('menu_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL . FOLDER_MODULES . '/menu/menu_function.php', array('menu_uuid' => $getMenuUuid, 'mode' => 1)), $page);\n\n$fieldRequired = HtmlForm::FIELD_REQUIRED;\n$fieldDefault  = HtmlForm::FIELD_DEFAULT;\n\nif ((bool) $menu->getValue('men_standard')) {\n    $fieldRequired = HtmlForm::FIELD_DISABLED;\n    $fieldDefault  = HtmlForm::FIELD_DISABLED;\n}\n\n$menuList = array();\nsubMenu($menuList, 1, (int) $menu->getValue('men_id'));\n\n$form->addInput(\n    'men_name',\n    $gL10n->get('SYS_NAME'),\n    $menu->getValue('men_name', 'database'),\n    array('maxLength' => 100, 'property'=> HtmlForm::FIELD_REQUIRED, 'helpTextIdLabel' => 'SYS_MENU_NAME_DESC')\n);\n\nif ($getMenuUuid !== '') {\n    $form->addInput(\n        'men_name_intern',\n        $gL10n->get('SYS_INTERNAL_NAME'),\n        $menu->getValue('men_name_intern', 'database'),\n        array('maxLength' => 100, 'property' => HtmlForm::FIELD_DISABLED, 'helpTextIdLabel' => 'SYS_INTERNAL_NAME_DESC')\n    );\n}\n\n$form->addMultilineTextInput(\n    'men_description',\n    $gL10n->get('SYS_DESCRIPTION'),\n    $menu->getValue('men_description', 'database'),\n    2,\n    array('maxLength' => 4000)\n);\n\n$form->addSelectBox(\n    'men_men_id_parent',\n    $gL10n->get('SYS_MENU_LEVEL'),\n    $menuList,\n    array(\n        'property'        => HtmlForm::FIELD_REQUIRED,\n        'defaultValue'    => (int) $menu->getValue('men_men_id_parent'),\n        'helpTextIdLabel' => 'SYS_MENU_LEVEL_DESC'\n    )\n);\n\n$sql = 'SELECT com_id, com_name\n          FROM '.TBL_COMPONENTS.'\n      ORDER BY com_name';\n$form->addSelectBoxFromSql(\n    'men_com_id',\n    $gL10n->get('SYS_MODULE_RIGHTS'),\n    $gDb,\n    $sql,\n    array(\n        'property'        => $fieldDefault,\n        'defaultValue'    => (int) $menu->getValue('men_com_id'),\n        'helpTextIdLabel' => 'SYS_MENU_MODULE_RIGHTS_DESC'\n    )\n);\n\n$form->addSelectBox(\n    'menu_view',\n    $gL10n->get('SYS_VISIBLE_FOR'),\n    $parentRoleViewSet,\n    array('defaultValue' => $roleViewSet, 'multiselect' => true)\n);\n\nif ((bool) $menu->getValue('men_node') === false) {\n    $form->addInput(\n        'men_url',\n        $gL10n->get('SYS_URL'),\n        $menu->getValue('men_url', 'database'),\n        array('maxLength' => 2000, 'property' => $fieldRequired)\n    );\n}\n\n$form->addInput(\n    'men_icon',\n    $gL10n->get('SYS_ICON'),\n    $menu->getValue('men_icon', 'database'),\n    array(\n        'maxLength' => 100,\n        'helpTextIdLabel' => $gL10n->get('SYS_FONT_AWESOME_DESC', array('<a href=\"https://fontawesome.com/icons?d=gallery&s=brands,solid&m=free\" target=\"_blank\">', '</a>')),\n        'class' => 'form-control-small'\n    )\n);\n\n$form->addSubmitButton(\n    'btn_save',\n    $gL10n->get('SYS_SAVE'),\n    array('icon' => 'fa-check', 'class' => ' offset-sm-3')\n);\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * messages form page\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n ***********************************************************************************************\n */\n\n/******************************************************************************\n * Parameters:\n *\n * msg_type  - This could be EMAIL if you want to write an email or PM if you want to write a private Message\n * user_uuid - send message to the given user UUID\n * subject   - subject of the message\n * msg_uuid  - UUID of the message -> just for answers\n * role_uuid - UUID of a role to which an email should be sent\n * carbon_copy - false - (Default) \"Send copy to me\" checkbox is NOT set\n *             - true  - \"Send copy to me\" checkbox is set\n * forward : true - The message of the msg_id will be copied and the base for this new message\n *\n *****************************************************************************/\n\nrequire_once(__DIR__ . '/../../system/common.php');\n\n// Initialize and check the parameters\n$getMsgType    = admFuncVariableIsValid($_GET, 'msg_type', 'string', array('defaultValue' => TableMessage::MESSAGE_TYPE_EMAIL));\n$getUserUuid   = admFuncVariableIsValid($_GET, 'user_uuid', 'string');\n$getSubject    = admFuncVariableIsValid($_GET, 'subject', 'string');\n$getMsgUuid    = admFuncVariableIsValid($_GET, 'msg_uuid', 'string');\n$getRoleUuid   = admFuncVariableIsValid($_GET, 'role_uuid', 'string');\n$getCarbonCopy = admFuncVariableIsValid($_GET, 'carbon_copy', 'bool', array('defaultValue' => false));\n$getDeliveryConfirmation = admFuncVariableIsValid($_GET, 'delivery_confirmation', 'bool');\n$getForward    = admFuncVariableIsValid($_GET, 'forward', 'bool');\n$postUserUuidList = '';\n$postListUuid = '';\n\n// Check form values\nif ($gValidLogin) {\n    $postUserUuidList = admFuncVariableIsValid($_POST, 'userUuidList', 'string');\n    $postListUuid = admFuncVariableIsValid($_POST, 'list_uuid', 'string');\n}\n\n$message = new TableMessage($gDb);\n$message->readDataByUuid($getMsgUuid);\n\nif ($getMsgUuid !== '') {\n    $getMsgType = $message->getValue('msg_type');\n}\n\n// check if the call of the page was allowed by settings\nif ((!$gSettingsManager->getBool('enable_mail_module') && $getMsgType !== TableMessage::MESSAGE_TYPE_PM)\n   || (!$gSettingsManager->getBool('enable_pm_module') && $getMsgType === TableMessage::MESSAGE_TYPE_PM)) {\n    // message if the sending of PM is not allowed\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n// check for valid login\nif (!$gValidLogin && $getMsgType === TableMessage::MESSAGE_TYPE_PM) {\n    $gMessage->show($gL10n->get('SYS_INVALID_PAGE_VIEW'));\n    // => EXIT\n}\n\n// check if the current user has email address for sending an email\nif ($gValidLogin && $getMsgType !== TableMessage::MESSAGE_TYPE_PM && !$gCurrentUser->hasEmail()) {\n    $gMessage->show($gL10n->get('SYS_CURRENT_USER_NO_EMAIL', array('<a href=\"'.ADMIDIO_URL.FOLDER_MODULES.'/profile/profile.php\">', '</a>')));\n    // => EXIT\n}\n\n// Update the read status of the message\nif ($getMsgUuid !== '') {\n    // check if user is allowed to view message\n    if(!in_array($gCurrentUserId, array($message->getValue('msg_usr_id_sender'), $message->getConversationPartner()))) {\n        $gMessage->show($gL10n->get('SYS_INVALID_PAGE_VIEW'));\n        // => EXIT\n    }\n\n    // update the read-status\n    $message->setReadValue();\n\n    if ($getForward === true) {\n        $getMsgUuid = '';\n    } else {\n        $messageStatement = $message->getConversation($message->getValue('msg_id'));\n    }\n\n    $getSubject = $message->getValue('msg_subject', 'database');\n    if($gCurrentUserId !== $message->getValue('msg_usr_id_sender')) {\n        $user = new User($gDb, $gProfileFields, $message->getValue('msg_usr_id_sender'));\n    } else {\n        $user = new User($gDb, $gProfileFields, $message->getConversationPartner());\n    }\n    $getUserUuid = $user->getValue('usr_uuid');\n} elseif ($getUserUuid !== '') {\n    $user = new User($gDb, $gProfileFields);\n    $user->readDataByUuid($getUserUuid);\n}\n\n$maxNumberRecipients = 1;\nif ($getMsgType !== TableMessage::MESSAGE_TYPE_PM && $gSettingsManager->getInt('mail_max_receiver') > 0) {\n    $maxNumberRecipients = $gSettingsManager->getInt('mail_max_receiver');\n}\n\n$list = array();\n$arrAllMailRoles = $gCurrentUser->getRolesWriteMails();\n\nif ($gValidLogin && $getMsgType === TableMessage::MESSAGE_TYPE_PM && count($arrAllMailRoles) > 0) {\n    $sql = 'SELECT usr_id, first_name.usd_value AS first_name, last_name.usd_value AS last_name, usr_login_name\n              FROM '.TBL_MEMBERS.'\n        INNER JOIN '.TBL_ROLES.'\n                ON rol_id = mem_rol_id\n        INNER JOIN '.TBL_CATEGORIES.'\n                ON cat_id = rol_cat_id\n        INNER JOIN '.TBL_USERS.'\n                ON usr_id = mem_usr_id\n         LEFT JOIN '.TBL_USER_DATA.' AS last_name\n                ON last_name.usd_usr_id = usr_id\n               AND last_name.usd_usf_id = ? -- $gProfileFields->getProperty(\\'LAST_NAME\\', \\'usf_id\\')\n         LEFT JOIN '.TBL_USER_DATA.' AS first_name\n                ON first_name.usd_usr_id = usr_id\n               AND first_name.usd_usf_id = ? -- $gProfileFields->getProperty(\\'FIRST_NAME\\', \\'usf_id\\')\n             WHERE rol_id IN ('.Database::getQmForValues($arrAllMailRoles).')\n               AND cat_name_intern <> \\'EVENTS\\'\n               AND (  cat_org_id = ? -- $gCurrentOrgId\n                   OR cat_org_id IS NULL )\n               AND mem_begin <= ? -- DATE_NOW\n               AND mem_end   >= ? -- DATE_NOW\n               AND usr_id <> ? -- $gCurrentUserId\n               AND usr_valid  = true\n               AND usr_login_name IS NOT NULL\n          GROUP BY usr_id, last_name.usd_value, first_name.usd_value, usr_login_name\n          ORDER BY last_name.usd_value, first_name.usd_value';\n    $queryParamsArr = array(\n        array(\n            $gProfileFields->getProperty('LAST_NAME', 'usf_id'),\n            $gProfileFields->getProperty('FIRST_NAME', 'usf_id')\n        ),\n        $arrAllMailRoles,\n        array(\n            $gCurrentOrgId,\n            DATE_NOW,\n            DATE_NOW,\n            $gCurrentUserId\n        )\n    );\n    $dropStatement = $gDb->queryPrepared($sql, array_merge($queryParamsArr[0], $queryParamsArr[1], $queryParamsArr[2]));\n\n    while ($row = $dropStatement->fetch()) {\n        $list[] = array($row['usr_id'], $row['last_name'].' '.$row['first_name'].' (' .$row['usr_login_name'].')', '');\n    }\n\n    // no roles or users found then show message\n    if (count($list) === 0) {\n        $gMessage->show($gL10n->get('SYS_NO_ROLES_AND_USERS'));\n        // => EXIT\n    }\n}\n\nif ($getUserUuid !== '') {\n    // if a user ID is given, we need to check if the actual user is allowed to contact this user\n    if ((!$gCurrentUser->editUsers() && !isMember((int) $user->getValue('usr_id'))) || $user->getValue('usr_id') === '') {\n        $gMessage->show($gL10n->get('SYS_USER_ID_NOT_FOUND'));\n        // => EXIT\n    }\n}\n\nif ($getSubject !== '') {\n    $headline = $gL10n->get('SYS_SUBJECT').': '.SecurityUtils::encodeHTML($getSubject);\n} else {\n    $headline = $gL10n->get('SYS_SEND_EMAIL');\n    if ($getMsgType === TableMessage::MESSAGE_TYPE_PM) {\n        $headline = $gL10n->get('SYS_SEND_PRIVATE_MESSAGE');\n    }\n}\n\n// After back navigation the form should be filled with the values from the session\n// otherwise initialize the form values\nif (isset($_SESSION['message_request'])) {\n    $message->setArray($_SESSION['message_request']);\n    $message->addContent($_SESSION['message_request']['msg_body']);\n    $formValues = $_SESSION['message_request'];\n    unset($_SESSION['message_request']);\n\n    if (!isset($formValues['carbon_copy'])) {\n        $formValues['carbon_copy'] = false;\n    }\n    if (!isset($formValues['delivery_confirmation'])) {\n        $formValues['delivery_confirmation'] = false;\n    }\n} else {\n    $message->setValue('msg_subject', $getSubject);\n    $formValues['namefrom']    = '';\n    $formValues['mailfrom']    = '';\n    $formValues['msg_to']      = '';\n    $formValues['carbon_copy'] = $getCarbonCopy;\n    $formValues['delivery_confirmation'] = $getDeliveryConfirmation;\n\n    if ($getForward === false) {\n        $message->addContent('');\n    }\n}\n\nif(!$gValidLogin && $getUserUuid === '' && $getRoleUuid === '') {\n    // visitors have no message modul and start the navigation here\n    $gNavigation->addStartUrl(CURRENT_URL, $headline);\n} else {\n    $gNavigation->addUrl(CURRENT_URL, $headline);\n}\n\n// create html page object\n$page = new HtmlPage('admidio-messages-write', $headline);\n\nif ($getMsgType === TableMessage::MESSAGE_TYPE_PM) {\n    // show form\n    $form = new HtmlForm('pm_send_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/messages/messages_send.php', array('msg_type' => 'PM', 'msg_uuid' => $getMsgUuid)), $page, array('enableFileUpload' => true));\n\n    if ($getUserUuid === '') {\n        $form->openGroupBox('gb_pm_contact_details', $gL10n->get('SYS_CONTACT_DETAILS'));\n        $form->addSelectBox(\n            'msg_to',\n            $gL10n->get('SYS_TO'),\n            $list,\n            array(\n                'property'               => HtmlForm::FIELD_REQUIRED,\n                'multiselect'            => true,\n                'maximumSelectionNumber' => $maxNumberRecipients,\n                'helpTextIdLabel'        => 'SYS_SEND_PRIVATE_MESSAGE_DESC'\n            )\n        );\n        $form->closeGroupBox();\n        $sendto = '';\n    } else {\n        $form->addInput('msg_to', '', $user->getValue('usr_id'), array('property' => HtmlForm::FIELD_HIDDEN));\n        $sendto = ' ' . $gL10n->get('SYS_TO') . ' ' .$user->getValue('FIRST_NAME').' '.$user->getValue('LAST_NAME').' ('.$user->getValue('usr_login_name').')';\n    }\n\n    $form->openGroupBox('gb_pm_message', $gL10n->get('SYS_MESSAGE') . $sendto);\n\n    if ($getSubject === '') {\n        $form->addInput(\n            'msg_subject',\n            $gL10n->get('SYS_SUBJECT'),\n            $message->getValue('msg_subject', 'database'),\n            array('maxLength' => 77, 'property' => HtmlForm::FIELD_REQUIRED)\n        );\n    } else {\n        $form->addInput('msg_subject', '', $message->getValue('msg_subject'), array('property' => HtmlForm::FIELD_HIDDEN));\n    }\n\n    $form->addMultilineTextInput(\n        'msg_body',\n        $gL10n->get('SYS_MESSAGE'),\n        $message->getContent(),\n        10,\n        array('maxLength' => 254, 'property' => HtmlForm::FIELD_REQUIRED)\n    );\n\n    $form->closeGroupBox();\n\n    $form->addSubmitButton('btn_send', $gL10n->get('SYS_SEND'), array('icon' => 'fa-envelope'));\n\n    // add form to html page\n    $page->addHtml($form->show());\n} elseif ($getMsgType === TableMessage::MESSAGE_TYPE_EMAIL && $getMsgUuid === '') {\n    if ($getUserUuid !== '') {\n        // check if the user has email address for receiving an email\n        if (!$user->hasEmail()) {\n            $gMessage->show($gL10n->get('SYS_USER_NO_EMAIL', array($user->getValue('FIRST_NAME').' '.$user->getValue('LAST_NAME'))));\n            // => EXIT\n        }\n    } elseif ($getRoleUuid !== '') {\n        // if a certain role is called, then check if the rights for it are available\n        $role = new TableRoles($gDb);\n        $role->readDataByUuid($getRoleUuid);\n\n        // Logged out users are only allowed to write mails to roles with the flag \"all visitors of the site\"\n        // Logged in users are only allowed to write mails to roles they are authorized for\n        // all roles must belong to the current organization\n        if ((!$gValidLogin && $role->getValue('rol_mail_this_role') != 3)\n        || ($gValidLogin  && !$gCurrentUser->hasRightSendMailToRole($role->getValue('rol_id')))\n        || $role->getValue('rol_id') == null) {\n            $gMessage->show($gL10n->get('SYS_INVALID_PAGE_VIEW'));\n            // => EXIT\n        }\n\n        $rollenName = $role->getValue('rol_name');\n    }\n\n    // show form\n    $form = new HtmlForm('mail_send_form', ADMIDIO_URL.FOLDER_MODULES.'/messages/messages_send.php', $page, array('enableFileUpload' => true));\n    $form->openGroupBox('gb_mail_contact_details', $gL10n->get('SYS_CONTACT_DETAILS'));\n\n    $sqlRoleIds = array();\n    $sqlUserIds = '';\n    $sqlParticipationRoles = '';\n\n    if ($getUserUuid !== '') {\n        // usr_id was committed then write email to this user\n        $preloadData = $getUserUuid;\n        $sqlUserIds  = ' AND usr_id = ? -- $user->getValue(\\'usr_id\\')';\n    } elseif ($getRoleUuid !== '') {\n        // role id was committed then write email to this role\n        $preloadData = 'groupID: '.$getRoleUuid;\n        $sqlRoleIds  = array($role->getValue('rol_id'));\n    } else {\n        // no user or role was committed then show list with all roles and users\n        // where the current user has the right to send email\n        $preloadData = isset($formValues['msg_to']) ? $formValues['msg_to'] : '';\n        $sqlRoleIds = $gCurrentUser->getRolesWriteMails();\n        $sqlParticipationRoles = ' AND cat_name_intern <> \\'EVENTS\\' ';\n    }\n\n    // no role id set, then list all roles according to login/logout\n    if ($gValidLogin) {\n        $list = array();\n        $listFormer = array();\n        $listActiveAndFormer = array();\n        $listRoleIdsArray = array();\n\n        if (count($sqlRoleIds) === 0) {\n            // if only send mail to one user than this user must be in a role the current user is allowed to see\n            $listVisibleRoleArray = $gCurrentUser->getRolesViewMemberships();\n        } else {\n            // list array with all roles where user is allowed to send mail to\n            $sql = 'SELECT rol_id, rol_uuid, rol_name\n                      FROM '.TBL_ROLES.'\n                INNER JOIN '.TBL_CATEGORIES.'\n                        ON cat_id = rol_cat_id\n                       AND (  cat_org_id = ? -- $gCurrentOrgId\n                           OR cat_org_id IS NULL)\n                     WHERE rol_id IN ('.Database::getQmForValues($sqlRoleIds).')\n                       AND rol_valid = true\n                           '.$sqlParticipationRoles.'\n                  ORDER BY rol_name ASC';\n            $rolesStatement = $gDb->queryPrepared($sql, array_merge(array($gCurrentOrgId), $sqlRoleIds));\n            $rolesArray = $rolesStatement->fetchAll();\n\n            foreach ($rolesArray as $roleArray) {\n                $role = new TableRoles($gDb);\n                $role->setArray($roleArray);\n                $list[] = array('groupID: '.$roleArray['rol_uuid'], $roleArray['rol_name'], $gL10n->get('SYS_ROLES'). ' (' .$gL10n->get('SYS_ACTIVE_MEMBERS') . ')');\n                $listRoleIdsArray[] = $roleArray['rol_id'];\n                if ($role->hasFormerMembers() > 0 && $gSettingsManager->getBool('mail_show_former')) {\n                    // list role with former members\n                    $listFormer[] = array('groupID: '.$roleArray['rol_uuid'].'+1', $roleArray['rol_name'].' '.'('.$gL10n->get('SYS_FORMER_PL').')', $gL10n->get('SYS_ROLES'). ' (' .$gL10n->get('SYS_FORMER_MEMBERS') . ')');\n                    // list role with active and former members\n                    $listActiveAndFormer[] = array('groupID: '.$roleArray['rol_uuid'].'+2', $roleArray['rol_name'].' '.'('.$gL10n->get('SYS_ACTIVE_FORMER_MEMBERS_SHORT').')', $gL10n->get('SYS_ROLES'). ' (' .$gL10n->get('SYS_ACTIVE_FORMER_MEMBERS') . ')');\n                }\n            }\n\n            $list = array_merge($list, $listFormer, $listActiveAndFormer);\n            $listVisibleRoleArray = array_intersect($listRoleIdsArray, $gCurrentUser->getRolesViewMemberships());\n        }\n\n        if ($getRoleUuid === '' && count($listVisibleRoleArray) > 0) {\n            // if no special role was preselected then list users\n            $sql = 'SELECT usr_uuid, first_name.usd_value AS first_name, last_name.usd_value AS last_name, rol_id, mem_begin, mem_end\n                      FROM '.TBL_MEMBERS.'\n                INNER JOIN '.TBL_ROLES.'\n                        ON rol_id = mem_rol_id\n                INNER JOIN '.TBL_USERS.'\n                        ON usr_id = mem_usr_id\n                INNER JOIN '.TBL_USER_DATA.' AS email\n                        ON email.usd_usr_id = usr_id\n                       AND LENGTH(email.usd_value) > 0\n                INNER JOIN '.TBL_USER_FIELDS.' AS field\n                        ON field.usf_id = email.usd_usf_id\n                       AND field.usf_type = \\'EMAIL\\'\n                 LEFT JOIN '.TBL_USER_DATA.' AS last_name\n                        ON last_name.usd_usr_id = usr_id\n                       AND last_name.usd_usf_id = ? -- $gProfileFields->getProperty(\\'LAST_NAME\\', \\'usf_id\\')\n                 LEFT JOIN '.TBL_USER_DATA.' AS first_name\n                        ON first_name.usd_usr_id = usr_id\n                       AND first_name.usd_usf_id = ? -- $gProfileFields->getProperty(\\'FIRST_NAME\\', \\'usf_id\\')\n                     WHERE usr_id    <> ? -- $gCurrentUserId\n                       AND mem_begin <= ? -- DATE_NOW\n                       AND rol_id IN ('.Database::getQmForValues($listVisibleRoleArray).')\n                           '.$sqlUserIds.'\n                       AND usr_valid = true\n                  ORDER BY last_name, first_name, mem_end DESC';\n            $queryParams = array_merge(\n                array(\n                    (int) $gProfileFields->getProperty('LAST_NAME', 'usf_id'),\n                    (int) $gProfileFields->getProperty('FIRST_NAME', 'usf_id'),\n                    $gCurrentUserId,\n                    DATE_NOW\n                ),\n                $listVisibleRoleArray\n            );\n            if ($sqlUserIds !== '') {\n                $queryParams[] = $user->getValue('usr_id');\n            }\n            $statement = $gDb->queryPrepared($sql, $queryParams);\n\n            $passiveList   = array();\n            $activeList    = array();\n            $currentUserId = '';\n\n            while ($row = $statement->fetch()) {\n                // every user should only be once in the list\n                if ($currentUserId !== $row['usr_uuid']) {\n                    // if membership is active then show them as active members\n                    if ($row['mem_begin'] <= DATE_NOW && $row['mem_end'] >= DATE_NOW) {\n                        $activeList[]  = array($row['usr_uuid'], $row['last_name'].' '.$row['first_name'], $gL10n->get('SYS_ACTIVE_MEMBERS'));\n                        $currentUserId = $row['usr_uuid'];\n                    } elseif ($gSettingsManager->getBool('mail_show_former')) {\n                        $passiveList[] = array($row['usr_uuid'], $row['last_name'].' '.$row['first_name'], $gL10n->get('SYS_FORMER_MEMBERS'));\n                        $currentUserId = $row['usr_uuid'];\n                    }\n                }\n            }\n\n            $list = array_merge($list, $activeList, $passiveList);\n        }\n    } else {\n        $maxNumberRecipients = 1;\n        // list all roles where guests could send mails to\n        $sql = 'SELECT rol_uuid, rol_name\n                  FROM '.TBL_ROLES.'\n            INNER JOIN '.TBL_CATEGORIES.'\n                    ON cat_id = rol_cat_id\n                   AND (  cat_org_id = ? -- $gCurrentOrgId\n                       OR cat_org_id IS NULL)\n                 WHERE rol_mail_this_role = 3\n                   AND rol_valid = true\n              ORDER BY cat_sequence, rol_name';\n\n        $statement = $gDb->queryPrepared($sql, array($gCurrentOrgId));\n        while ($row = $statement->fetch()) {\n            $list[] = array('groupID: '.$row['rol_uuid'], $row['rol_name'], '');\n        }\n    }\n\n    if ($postListUuid !== '') {\n        $preloadData = 'dummy';\n        $showlist = new ListConfiguration($gDb);\n        $showlist->readDataByUuid($postListUuid);\n        $list = array('dummy' => $gL10n->get('SYS_LIST'). (strlen($showlist->getValue('lst_name')) > 0 ? ' - '.$showlist->getValue('lst_name') : ''));\n        $form->addInput('userUuidList', '', $postUserUuidList, array('property' => HtmlForm::FIELD_HIDDEN));\n        $form->addInput('list_uuid', '', $postListUuid, array('property' => HtmlForm::FIELD_HIDDEN));\n    }\n\n    // no roles or users found then show message\n    if (count($list) === 0) {\n        $gMessage->show($gL10n->get('SYS_NO_ROLES_AND_USERS'));\n        // => EXIT\n    }\n\n    $form->addSelectBox(\n        'msg_to',\n        $gL10n->get('SYS_TO'),\n        $list,\n        array(\n            'property'               => HtmlForm::FIELD_REQUIRED,\n            'multiselect'            => true,\n            'maximumSelectionNumber' => $maxNumberRecipients,\n            'helpTextIdLabel'        => 'SYS_SEND_MAIL_TO_ROLE',\n            'defaultValue'           => $preloadData\n        )\n    );\n\n    $form->addLine();\n\n    if ($gCurrentUserId > 0) {\n        $sql = 'SELECT COUNT(*) AS count\n                  FROM '.TBL_USER_FIELDS.'\n            INNER JOIN '. TBL_USER_DATA .'\n                    ON usd_usf_id = usf_id\n                 WHERE usf_type = \\'EMAIL\\'\n                   AND usd_usr_id = ? -- $gCurrentUserId\n                   AND usd_value IS NOT NULL';\n\n        $pdoStatement = $gDb->queryPrepared($sql, array($gCurrentUserId));\n        $possibleEmails = $pdoStatement->fetchColumn();\n\n        $form->addInput(\n            'name',\n            $gL10n->get('SYS_YOUR_NAME'),\n            $gCurrentUser->getValue('FIRST_NAME'). ' '. $gCurrentUser->getValue('LAST_NAME'),\n            array('maxLength' => 50, 'property' => HtmlForm::FIELD_DISABLED)\n        );\n\n        if ($possibleEmails > 1) {\n            $sqlData = array();\n            $sqlData['query'] = 'SELECT email.usd_value AS ID, email.usd_value AS email\n                                   FROM '.TBL_USERS.'\n                             INNER JOIN '.TBL_USER_DATA.' AS email\n                                     ON email.usd_usr_id = usr_id\n                                    AND LENGTH(email.usd_value) > 0\n                             INNER JOIN '.TBL_USER_FIELDS.' AS field\n                                     ON field.usf_id = email.usd_usf_id\n                                    AND field.usf_type = \\'EMAIL\\'\n                                  WHERE usr_id = ? -- $gCurrentUserId\n                                    AND usr_valid = true\n                               GROUP BY email.usd_value, email.usd_value';\n            $sqlData['params'] = array($gCurrentUserId);\n\n            $form->addSelectBoxFromSql(\n                'mailfrom',\n                $gL10n->get('SYS_YOUR_EMAIL'),\n                $gDb,\n                $sqlData,\n                array('maxLength' => 50, 'defaultValue' => $gCurrentUser->getValue('EMAIL'), 'showContextDependentFirstEntry' => false)\n            );\n        } else {\n            $form->addInput(\n                'mailfrom',\n                $gL10n->get('SYS_YOUR_EMAIL'),\n                $gCurrentUser->getValue('EMAIL'),\n                array('maxLength' => 50, 'property' => HtmlForm::FIELD_DISABLED)\n            );\n        }\n    } else {\n        $form->addInput(\n            'namefrom',\n            $gL10n->get('SYS_YOUR_NAME'),\n            $formValues['namefrom'],\n            array('maxLength' => 50, 'property' => HtmlForm::FIELD_REQUIRED)\n        );\n        $form->addInput(\n            'mailfrom',\n            $gL10n->get('SYS_YOUR_EMAIL'),\n            $formValues['mailfrom'],\n            array('type' => 'email', 'maxLength' => 50, 'property' => HtmlForm::FIELD_REQUIRED)\n        );\n    }\n\n    // show option to send a copy to your email address only for registered users because of spam abuse\n    if ($gValidLogin) {\n        $form->addCheckbox('carbon_copy', $gL10n->get('SYS_SEND_COPY'), $formValues['carbon_copy']);\n    }\n\n    // if preference is set then show a checkbox where the user can request a delivery confirmation for the email\n    if (($gCurrentUserId > 0 && (int) $gSettingsManager->get('mail_delivery_confirmation') === 2) || (int) $gSettingsManager->get('mail_delivery_confirmation') === 1) {\n        $form->addCheckbox('delivery_confirmation', $gL10n->get('SYS_DELIVERY_CONFIRMATION'), $formValues['delivery_confirmation']);\n    }\n\n    $form->closeGroupBox();\n\n    $form->openGroupBox('gb_mail_message', $gL10n->get('SYS_MESSAGE'));\n    $form->addInput(\n        'msg_subject',\n        $gL10n->get('SYS_SUBJECT'),\n        $message->getValue('msg_subject', 'database'),\n        array('maxLength' => 77, 'property' => HtmlForm::FIELD_REQUIRED)\n    );\n\n    // Only logged in users are allowed to attach files\n    if ($gValidLogin && ($gSettingsManager->getInt('max_email_attachment_size') > 0) && PhpIniUtils::isFileUploadEnabled()) {\n        $form->addFileUpload(\n            'btn_add_attachment',\n            $gL10n->get('SYS_ATTACHMENT'),\n            array(\n                'enableMultiUploads' => true,\n                'maxUploadSize'      => Email::getMaxAttachmentSize(),\n                'multiUploadLabel'   => $gL10n->get('SYS_ADD_ATTACHMENT'),\n                'hideUploadField'    => true,\n                'helpTextIdLabel'    => $gL10n->get('SYS_MAX_ATTACHMENT_SIZE', array(Email::getMaxAttachmentSize(Email::SIZE_UNIT_MEBIBYTE))),\n                'icon'               => 'fa-paperclip'\n            )\n        );\n    }\n\n    // add multiline text element or ckeditor to form\n    if ($gValidLogin && $gSettingsManager->getBool('mail_html_registered_users')) {\n        $form->addEditor('msg_body', '', $message->getContent(), array('property' => HtmlForm::FIELD_REQUIRED, 'helpTextIdInline' => ($gValidLogin && $gSettingsManager->getInt('mail_sending_mode') === Email::SENDINGMODE_SINGLE) ? array('SYS_EMAIL_PARAMETERS_DESC', array('#recipient_firstname#', '#recipient_lastname#', '#recipient_name#', '#recipient_email#')) : null));\n    } else {\n        $form->addMultilineTextInput(\n            'msg_body',\n            $gL10n->get('SYS_TEXT'),\n            $message->getContent(),\n            10,\n            array('property' => HtmlForm::FIELD_REQUIRED)\n        );\n    }\n\n    $form->closeGroupBox();\n\n    // if captchas are enabled then visitors of the website must resolve this\n    if (!$gValidLogin && $gSettingsManager->getBool('enable_mail_captcha')) {\n        $form->openGroupBox('gb_confirmation_of_input', $gL10n->get('SYS_CONFIRMATION_OF_INPUT'));\n        $form->addCaptcha('captcha_code');\n        $form->closeGroupBox();\n    }\n\n    $form->addSubmitButton('btn_send', $gL10n->get('SYS_SEND'), array('icon' => 'fa-envelope'));\n\n    // add form to html page and show page\n    $page->addHtml($form->show());\n}\n\nif (isset($messageStatement)) {\n    $messageContent = new TableMessageContent($gDb);\n\n    while ($row = $messageStatement->fetch()) {\n        $messageContent->setArray($row);\n        $messageFooter = '';\n\n        if ($getMsgType === TableMessage::MESSAGE_TYPE_PM) {\n            if ($messageContent->getValue('msc_usr_id') === $gCurrentUserId) {\n                $sentUser = $gCurrentUser->getValue('FIRST_NAME'). ' '. $gCurrentUser->getValue('LAST_NAME');\n            } else {\n                $sentUser = $user->getValue('FIRST_NAME').' '.$user->getValue('LAST_NAME');\n            }\n\n            $messageHeader = $gL10n->get('SYS_USERNAME_WITH_TIMESTAMP', array($sentUser,\n                $messageContent->getValue('msc_timestamp', $gSettingsManager->getString('system_date')),\n                $messageContent->getValue('msc_timestamp', $gSettingsManager->getString('system_time'))\n            ));\n            $messageIcon   = 'fa-comment-alt';\n        } else {\n            $messageHeader = $messageContent->getValue('msc_timestamp', $gSettingsManager->getString('system_date') . ' ' . $gSettingsManager->getString('system_time')) .'<br />' . $gL10n->get('SYS_TO') . ': ' . $message->getRecipientsNamesString();\n            $messageIcon   = 'fa-envelope';\n            $attachments   = $message->getAttachmentsInformations();\n\n            if (count($attachments) > 0) {\n                $messageFooter .= '<div class=\"card-footer\"><span class=\"mr-3\"><i class=\"fas fa-paperclip\"></i> ' . $gL10n->get('SYS_ATTACHMENT') . '</span>';\n            }\n\n            foreach ($attachments as $attachment) {\n                // get complete path with filename of the attachment\n                $attachmentPath = ADMIDIO_PATH . FOLDER_DATA . '/messages_attachments/' . $attachment['admidio_file_name'];\n\n                if (file_exists($attachmentPath)) {\n                    $messageFooter .= '<span class=\"admidio-attachment mr-3\"><a href=\"' . SecurityUtils::encodeUrl(ADMIDIO_URL . FOLDER_MODULES . '/messages/get_attachment.php', array('msa_id' => $attachment['msa_id'])) . '\">' . $attachment['file_name'] . '</a></span>';\n                } else {\n                    $messageFooter .= '<span class=\"admidio-attachment mr-3\">' . $attachment['file_name'] . '</span>';\n                }\n            }\n\n            if (count($attachments) > 0) {\n                $messageFooter .= '</div>';\n            }\n        }\n\n        $page->addHtml('\n        <div class=\"card admidio-blog\">\n            <div class=\"card-header\">\n                <i class=\"fas ' . $messageIcon . '\"></i>' . $messageHeader . '\n            </div>\n            <div class=\"card-body\">' . $messageContent->getValue('msc_message') . '</div>\n            ' . $messageFooter . '\n        </div>');\n    }\n}\n\n// show page\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit photo alben\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n * photo_uuid : UUID of the album that should be edited\n * mode       : - new (new album)\n *              - change (edit album)\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getPhotoUuid = admFuncVariableIsValid($_GET, 'photo_uuid', 'string');\n$getMode      = admFuncVariableIsValid($_GET, 'mode', 'string', array('requireValue' => true, 'validValues' => array('new', 'change')));\n\n$photoAlbumsArray = array('ALL' => $gL10n->get('PHO_PHOTO_ALBUMS'));\n\n// check if the module is enabled and disallow access if it's disabled\nif ((int) $gSettingsManager->get('enable_photo_module') === 0) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n$headline = '';\nif ($getMode === 'new') {\n    $headline = $gL10n->get('PHO_CREATE_ALBUM');\n} elseif ($getMode === 'change') {\n    $headline = $gL10n->get('PHO_EDIT_ALBUM');\n}\n\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\n// create photo album object\n$photoAlbum = new TablePhotos($gDb);\n\nif ($getMode === 'new') {\n    $parentAlbumUuid = $getPhotoUuid;\n    $getPhotoUuid = null;\n} elseif ($getMode === 'change') {\n    $photoAlbum->readDataByUuid($getPhotoUuid);\n    $parentAlbum = new TablePhotos($gDb, $photoAlbum->getValue('pho_pho_id_parent'));\n    $parentAlbumUuid = $parentAlbum->getValue('pho_uuid');\n}\n\n// check if the user is allowed to edit this photo album\nif (!$photoAlbum->isEditable()) {\n    $gMessage->show($gL10n->get('PHO_NO_RIGHTS'));\n    // => EXIT\n}\n\nif (isset($_SESSION['photo_album_request'])) {\n    // durch fehlerhafte Eingabe ist der User zu diesem Formular zurueckgekehrt\n    // nun die vorher eingegebenen Inhalte ins Objekt schreiben\n    $photoAlbum->setArray($_SESSION['photo_album_request']);\n    unset($_SESSION['photo_album_request']);\n}\n\n/**\n * Read the album structure to an array that could be used for a select box.\n * @param int         $parentId\n * @param string      $vorschub\n * @param int         $currentAlbumPhoId\n */\nfunction subfolder(int $parentId, string $vorschub, int $currentAlbumPhoId)\n{\n    global $gDb, $gCurrentOrgId, $photoAlbumsArray;\n\n    $vorschub .= '&nbsp;&nbsp;&nbsp;';\n    $sqlConditionParentId = '';\n    $parentPhotoAlbum = new TablePhotos($gDb);\n\n    $queryParams = array($currentAlbumPhoId, $gCurrentOrgId);\n\n    // read all sub albums of the parent album\n    if ($parentId > 0) {\n        $sqlConditionParentId .= ' AND pho_pho_id_parent = ? -- $parentId';\n        $queryParams[] = $parentId;\n    } else {\n        $sqlConditionParentId .= ' AND pho_pho_id_parent IS NULL';\n    }\n\n    $sql = 'SELECT *\n              FROM '.TBL_PHOTOS.'\n             WHERE pho_id    <> ? -- $photoAlbum->getValue(\\'pho_id\\')\n               AND pho_org_id = ? -- $gCurrentOrgId\n                   '.$sqlConditionParentId;\n    $childStatement = $gDb->queryPrepared($sql, $queryParams);\n\n    while ($admPhotoChild = $childStatement->fetch()) {\n        $parentPhotoAlbum->clear();\n        $parentPhotoAlbum->setArray($admPhotoChild);\n\n        // add entry to array of all photo albums\n        $photoAlbumsArray[$parentPhotoAlbum->getValue('pho_uuid')] =\n            $vorschub.'&#151; '.$parentPhotoAlbum->getValue('pho_name').'&nbsp('.$parentPhotoAlbum->getValue('pho_begin', 'Y').')';\n\n        subfolder((int) $parentPhotoAlbum->getValue('pho_id'), $vorschub, $currentAlbumPhoId);\n    }//while\n}//function\n\n// create html page object\n$page = new HtmlPage('admidio-photo-album-edit', $headline);\n\n// show form\n$form = new HtmlForm('photo_album_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_album_function.php', array('photo_uuid' => $getPhotoUuid, 'mode' => $getMode)), $page);\n$form->addInput(\n    'pho_name',\n    $gL10n->get('PHO_ALBUM'),\n    $photoAlbum->getValue('pho_name', 'database'),\n    array('property' => HtmlForm::FIELD_REQUIRED, 'maxLength' => 50)\n);\nsubfolder(0, '', $photoAlbum->getValue('pho_id'));\n$form->addSelectBox(\n    'parent_album_uuid',\n    $gL10n->get('PHO_PARENT_ALBUM'),\n    $photoAlbumsArray,\n    array(\n        'property'                       => HtmlForm::FIELD_REQUIRED,\n        'defaultValue'                   => $parentAlbumUuid,\n        'showContextDependentFirstEntry' => false,\n        'helpTextIdLabel'                => $gL10n->get('PHO_PARENT_ALBUM_DESC', array('PHO_PHOTO_ALBUMS'))\n    )\n);\n$form->addInput(\n    'pho_begin',\n    $gL10n->get('SYS_START'),\n    $photoAlbum->getValue('pho_begin'),\n    array('property' => HtmlForm::FIELD_REQUIRED, 'type' => 'date', 'maxLength' => 10)\n);\n$form->addInput(\n    'pho_end',\n    $gL10n->get('SYS_END'),\n    $photoAlbum->getValue('pho_end'),\n    array('type' => 'date', 'maxLength' => 10)\n);\n$form->addInput(\n    'pho_photographers',\n    $gL10n->get('PHO_PHOTOGRAPHER'),\n    $photoAlbum->getValue('pho_photographers', 'database'),\n    array('maxLength' => 100)\n);\n$form->addMultilineTextInput(\n    'pho_description',\n    $gL10n->get('SYS_DESCRIPTION'),\n    $photoAlbum->getValue('pho_description', 'database'),\n    6,\n    array('maxLength' => 4000)\n);\n$form->addCheckbox(\n    'pho_locked',\n    $gL10n->get('PHO_ALBUM_LOCK'),\n    (bool) $photoAlbum->getValue('pho_locked'),\n    array('helpTextIdLabel' => 'PHO_ALBUM_LOCK_DESC')\n);\n\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check', 'class' => ' offset-sm-3'));\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $photoAlbum->getValue('pho_usr_id_create'),\n    $photoAlbum->getValue('pho_timestamp_create'),\n    (int) $photoAlbum->getValue('pho_usr_id_change'),\n    $photoAlbum->getValue('pho_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit profile fields\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * usf_uuid : UUID of the profile field that should be edited\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getUsfUuid = admFuncVariableIsValid($_GET, 'usf_uuid', 'string');\n\n// only authorized users can edit the profile fields\nif (!$gCurrentUser->isAdministrator()) {\n    $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n    // => EXIT\n}\n\n// benutzerdefiniertes Feldobjekt anlegen\n$userField = new TableUserField($gDb);\n\nif ($getUsfUuid !== '') {\n    $userField->readDataByUuid($getUsfUuid);\n\n    $headline = $gL10n->get('ORG_EDIT_PROFILE_FIELD');\n\n    // hidden must be 0, if the flag should be set\n    if ($userField->getValue('usf_hidden') == 1) {\n        $userField->setValue('usf_hidden', 0);\n    } else {\n        $userField->setValue('usf_hidden', 1);\n    }\n\n    // Pruefung, ob das Feld zur aktuellen Organisation gehoert\n    if ($userField->getValue('cat_org_id') > 0\n    && (int) $userField->getValue('cat_org_id') !== $gCurrentOrgId) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n} else {\n    $headline = $gL10n->get('ORG_CREATE_PROFILE_FIELD');\n\n    // default values for a new field\n    $userField->setValue('usf_hidden', 1);\n    $userField->setValue('usf_registration', 1);\n}\n\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\nif (isset($_SESSION['fields_request'])) {\n    // hidden must be 0, if the flag should be set\n    if ($_SESSION['fields_request']['usf_hidden'] == 1) {\n        $_SESSION['fields_request']['usf_hidden'] = 0;\n    } else {\n        $_SESSION['fields_request']['usf_hidden'] = 1;\n    }\n\n    // due to incorrect input, the user has returned to this form\n    // Now write the previously entered content into the object\n    $userField->setArray($_SESSION['fields_request']);\n    unset($_SESSION['fields_request']);\n}\n\n// create html page object\n$page = new HtmlPage('admidio-profile-fields-edit', $headline);\n\n$page->addJavascript(\n    '\n    $(\"#usf_type\").change(function() {\n        if ($(\"#usf_type\").val() === \"DROPDOWN\" || $(\"#usf_type\").val() === \"RADIO_BUTTON\") {\n            $(\"#usf_value_list_group\").show(\"slow\");\n            $(\"#usf_value_list\").attr(\"required\", \"required\");\n        } else {\n            $(\"#usf_value_list\").removeAttr(\"required\");\n            $(\"#usf_value_list_group\").hide();\n        }\n    });\n    $(\"#usf_type\").trigger(\"change\");',\n    true\n);\n\n// show form\n$form = new HtmlForm('profile_fields_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/profile-fields/profile_fields_function.php', array('usf_uuid' => $getUsfUuid, 'mode' => '1')), $page);\n$form->openGroupBox('gb_designation', $gL10n->get('SYS_DESIGNATION'));\nif ($userField->getValue('usf_system') == 1) {\n    $form->addInput(\n        'usf_name',\n        $gL10n->get('SYS_NAME'),\n        $userField->getValue('usf_name', 'database'),\n        array('maxLength' => 100, 'property' => HtmlForm::FIELD_DISABLED)\n    );\n} else {\n    $form->addInput(\n        'usf_name',\n        $gL10n->get('SYS_NAME'),\n        $userField->getValue('usf_name', 'database'),\n        array('maxLength' => 100, 'property' => HtmlForm::FIELD_REQUIRED)\n    );\n}\n\n$usfNameIntern = $userField->getValue('usf_name_intern');\n// show internal field name for information\nif ($getUsfUuid !== '') {\n    $form->addInput(\n        'usf_name_intern',\n        $gL10n->get('SYS_INTERNAL_NAME'),\n        $usfNameIntern,\n        array('maxLength' => 100, 'property' => HtmlForm::FIELD_DISABLED, 'helpTextIdLabel' => 'SYS_INTERNAL_NAME_DESC')\n    );\n}\n\nif ($userField->getValue('usf_system') == 1) {\n    $form->addInput(\n        'usf_cat_id',\n        $gL10n->get('SYS_CATEGORY'),\n        $userField->getValue('cat_name'),\n        array('maxLength' => 100, 'property' => HtmlForm::FIELD_DISABLED)\n    );\n} else {\n    $form->addSelectBoxForCategories(\n        'usf_cat_id',\n        $gL10n->get('SYS_CATEGORY'),\n        $gDb,\n        'USF',\n        HtmlForm::SELECT_BOX_MODUS_EDIT,\n        array('property' => HtmlForm::FIELD_REQUIRED, 'defaultValue' => $userField->getValue('cat_uuid'))\n    );\n}\n$form->closeGroupBox();\n$form->openGroupBox('gb_properties', $gL10n->get('SYS_PROPERTIES'));\n$userFieldText = array(\n    'CHECKBOX'     => $gL10n->get('SYS_CHECKBOX'),\n    'DATE'         => $gL10n->get('SYS_DATE'),\n    'DECIMAL'      => $gL10n->get('SYS_DECIMAL_NUMBER'),\n    'DROPDOWN'     => $gL10n->get('SYS_DROPDOWN_LISTBOX'),\n    'EMAIL'        => $gL10n->get('SYS_EMAIL'),\n    'NUMBER'       => $gL10n->get('SYS_NUMBER'),\n    'PHONE'        => $gL10n->get('SYS_PHONE'),\n    'RADIO_BUTTON' => $gL10n->get('SYS_RADIO_BUTTON'),\n    'TEXT'         => $gL10n->get('SYS_TEXT').' (100 '.$gL10n->get('SYS_CHARACTERS').')',\n    'TEXT_BIG'     => $gL10n->get('SYS_TEXT').' (4000 '.$gL10n->get('SYS_CHARACTERS').')',\n    'URL'          => $gL10n->get('SYS_URL')\n);\nasort($userFieldText);\n\nif ($userField->getValue('usf_system') == 1) {\n    // for system fields, the data type may no longer be changed\n    $form->addInput(\n        'usf_type',\n        $gL10n->get('ORG_DATATYPE'),\n        $userFieldText[$userField->getValue('usf_type')],\n        array('maxLength' => 30, 'property' => HtmlForm::FIELD_DISABLED)\n    );\n} else {\n    // if it's not a system field the user must select the data type\n    $form->addSelectBox(\n        'usf_type',\n        $gL10n->get('ORG_DATATYPE'),\n        $userFieldText,\n        array('property' => HtmlForm::FIELD_REQUIRED, 'defaultValue' => $userField->getValue('usf_type'))\n    );\n}\n$form->addMultilineTextInput(\n    'usf_value_list',\n    $gL10n->get('ORG_VALUE_LIST'),\n    $userField->getValue('usf_value_list', 'database'),\n    6,\n    array('property' => HtmlForm::FIELD_REQUIRED, 'helpTextIdLabel' => 'ORG_VALUE_LIST_DESC')\n);\n$mandatoryFieldValues = array(0 => 'SYS_NO', 1 => 'SYS_YES', 2 => 'SYS_ONLY_AT_REGISTRATION_AND_OWN_PROFILE', 3 => 'SYS_NOT_AT_REGISTRATION');\nif ($usfNameIntern === 'LAST_NAME' || $usfNameIntern === 'FIRST_NAME') {\n    $form->addInput(\n        'usf_required_input',\n        $gL10n->get('SYS_REQUIRED_INPUT'),\n        $gL10n->get($mandatoryFieldValues[$userField->getValue('usf_required_input')]),\n        array('maxLength' => 50, 'property' => HtmlForm::FIELD_DISABLED)\n    );\n} else {\n    $form->addSelectBox(\n        'usf_required_input',\n        $gL10n->get('SYS_REQUIRED_INPUT'),\n        $mandatoryFieldValues,\n        array('property' => HtmlForm::FIELD_REQUIRED, 'defaultValue' => $userField->getValue('usf_required_input'))\n    );\n}\n$form->addCheckbox(\n    'usf_hidden',\n    $gL10n->get('ORG_FIELD_NOT_HIDDEN'),\n    (bool) $userField->getValue('usf_hidden'),\n    array('helpTextIdLabel' => 'ORG_FIELD_HIDDEN_DESC', 'icon' => 'fa-eye')\n);\n$form->addCheckbox(\n    'usf_disabled',\n    $gL10n->get('ORG_FIELD_DISABLED', array($gL10n->get('SYS_RIGHT_EDIT_USER'))),\n    (bool) $userField->getValue('usf_disabled'),\n    array('helpTextIdLabel' => 'ORG_FIELD_DISABLED_DESC', 'icon' => 'fa-key')\n);\n\nif ($usfNameIntern === 'LAST_NAME' || $usfNameIntern === 'FIRST_NAME' || $usfNameIntern === 'EMAIL') {\n    $form->addCheckbox(\n        'usf_registration',\n        $gL10n->get('ORG_FIELD_REGISTRATION'),\n        (bool) $userField->getValue('usf_registration'),\n        array('property' => HtmlForm::FIELD_DISABLED, 'icon' => 'fa-address-card')\n    );\n} else {\n    $form->addCheckbox(\n        'usf_registration',\n        $gL10n->get('ORG_FIELD_REGISTRATION'),\n        (bool) $userField->getValue('usf_registration'),\n        array('icon' => 'fa-address-card')\n    );\n}\n$form->addInput(\n    'usf_default_value',\n    $gL10n->get('SYS_DEFAULT_VALUE'),\n    $userField->getValue('usf_default_value'),\n    array('helpTextIdLabel' => 'SYS_DEFAULT_VALUE_DESC')\n);\n$form->addInput(\n    'usf_regex',\n    $gL10n->get('SYS_REGULAR_EXPRESSION'),\n    $userField->getValue('usf_regex'),\n    array('helpTextIdLabel' => 'SYS_REGULAR_EXPRESSION_DESC')\n);\n$form->addInput(\n    'usf_icon',\n    $gL10n->get('SYS_ICON'),\n    $userField->getValue('usf_icon', 'database'),\n    array(\n        'maxLength' => 100,\n        'helpTextIdLabel' => $gL10n->get('SYS_FONT_AWESOME_DESC', array('<a href=\"https://fontawesome.com/icons?d=gallery&s=brands,solid&m=free\" target=\"_blank\">', '</a>'))\n    )\n);\n$form->addInput(\n    'usf_url',\n    $gL10n->get('SYS_URL'),\n    $userField->getValue('usf_url'),\n    array('maxLength' => 2000, 'helpTextIdLabel' => 'ORG_FIELD_URL_DESC')\n);\n$form->closeGroupBox();\n$form->openGroupBox('gb_description', $gL10n->get('SYS_DESCRIPTION'), 'admidio-panel-editor');\n$form->addEditor('usf_description', '', $userField->getValue('usf_description'), array('height' => '200px'));\n$form->addDescription($gL10n->get('SYS_DESCRIPTION_POPOVER_DESC'));\n$form->addCheckbox(\n    'usf_description_inline',\n    $gL10n->get('SYS_DESCRIPTION_INLINE_DESC'),\n    (bool) $userField->getValue('usf_description_inline')\n);\n$form->closeGroupBox();\n\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check'));\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $userField->getValue('usf_usr_id_create'),\n    $userField->getValue('usf_timestamp_create'),\n    (int) $userField->getValue('usf_usr_id_change'),\n    $userField->getValue('usf_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit rooms\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * room_uuid : UUID of room, that should be shown\n * headline  : headline for room module\n *             (Default) SYS_ROOM\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getRoomUuid = admFuncVariableIsValid($_GET, 'room_uuid', 'string');\n$getHeadline = admFuncVariableIsValid($_GET, 'headline', 'string', array('defaultValue' => $gL10n->get('SYS_ROOM')));\n\n// only authorized users are allowed to edit the rooms\nif (!$gCurrentUser->isAdministrator()) {\n    $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n    // => EXIT\n}\n\n// Create room object\n$room = new TableRooms($gDb);\n\nif ($getRoomUuid !== '') {\n    $headline = $gL10n->get('SYS_EDIT_VAR', array($getHeadline));\n\n    $room->readDataByUuid($getRoomUuid);\n} else {\n    $headline = $gL10n->get('SYS_CREATE_VAR', array($getHeadline));\n}\n\n// add current url to navigation stack\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\nif (isset($_SESSION['rooms_request'])) {\n    // due to incorrect input the user has returned to this form\n    // now write the previously entered contents into the object\n    $room->setArray($_SESSION['rooms_request']);\n    unset($_SESSION['rooms_request']);\n}\n\n// create html page object\n$page = new HtmlPage('admidio-rooms-edit', $headline);\n\n// show form\n$form = new HtmlForm('rooms_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/rooms/rooms_function.php', array('room_uuid' => $getRoomUuid, 'mode' => '1')), $page);\n$form->openGroupBox('gb_name_properties', $gL10n->get('SYS_NAME').' &amp; '.$gL10n->get('SYS_PROPERTIES'));\n$form->addInput(\n    'room_name',\n    $gL10n->get('SYS_ROOM'),\n    $room->getValue('room_name', 'database'),\n    array('maxLength' => 100, 'property' => HtmlForm::FIELD_REQUIRED)\n);\n$form->addInput(\n    'room_capacity',\n    $gL10n->get('SYS_CAPACITY').' ('.$gL10n->get('SYS_SEATING').')',\n    (int) $room->getValue('room_capacity'),\n    array('type' => 'number', 'minNumber' => 0, 'maxNumber' => 99999, 'step' => 1, 'property' => HtmlForm::FIELD_REQUIRED)\n);\n$form->addInput(\n    'room_overhang',\n    $gL10n->get('SYS_OVERHANG'),\n    (int) $room->getValue('room_overhang'),\n    array('type' => 'number', 'minNumber' => 0, 'maxNumber' => 99999, 'step' => 1, 'helpTextIdLabel' => 'DAT_ROOM_OVERHANG')\n);\n$form->closeGroupBox();\n$form->openGroupBox('gb_description', $gL10n->get('SYS_DESCRIPTION'), 'admidio-panel-editor');\n$form->addEditor('room_description', '', $room->getValue('room_description'), array('height' => '150px'));\n$form->closeGroupBox();\n\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check'));\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $room->getValue('room_usr_id_create'),\n    $room->getValue('room_timestamp_create'),\n    (int) $room->getValue('dat_usr_id_change'),\n    $room->getValue('room_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit relation types\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * urt_uuid : UUID of the relation type that should be edited\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getUrtUuid = admFuncVariableIsValid($_GET, 'urt_uuid', 'string');\n\nif (!$gSettingsManager->getBool('members_enable_user_relations')) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\nif (!$gCurrentUser->isAdministrator()) {\n    $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n    // => EXIT\n}\n\n$headline = $gL10n->get('SYS_RELATIONSHIP_CONFIGURATION');\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\n$relationType1 = new TableUserRelationType($gDb);\n$relationType2 = new TableUserRelationType($gDb);\n\nif ($getUrtUuid !== '') {\n    $relationType1->readDataByUuid($getUrtUuid);\n    $relationType2->readDataById((int) $relationType1->getValue('urt_id_inverse'));\n}\n\n// create html page object\n$page = new HtmlPage('admidio-relationtypes-edit', $headline);\n\n// show form\n$form = new HtmlForm('relationtype_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/userrelations/relationtypes_function.php', array('urt_uuid' => $getUrtUuid, 'mode' => '1')), $page);\n\n$form->openGroupBox('gb_user_relationship', $gL10n->get('SYS_USER_RELATION'));\n$form->addInput(\n    'urt_name',\n    $gL10n->get('SYS_NAME'),\n    $relationType1->getValue('urt_name', 'database'),\n    array('maxLength' => 100, 'property' => HtmlForm::FIELD_REQUIRED)\n);\n$form->addInput(\n    'urt_name_male',\n    $gL10n->get('SYS_MALE'),\n    ($relationType1->getValue('urt_name_male') !== $relationType1->getValue('urt_name')) ? $relationType1->getValue('urt_name_male', 'database') : '',\n    array('maxLength' => 100)\n);\n$form->addInput(\n    'urt_name_female',\n    $gL10n->get('SYS_FEMALE'),\n    ($relationType1->getValue('urt_name_female') !== $relationType1->getValue('urt_name')) ? $relationType1->getValue('urt_name_female', 'database') : '',\n    array('maxLength' => 100)\n);\n$form->addCheckbox(\n    'urt_edit_user',\n    $gL10n->get('SYS_EDIT_USER_IN_RELATION'),\n    (bool) $relationType1->getValue('urt_edit_user'),\n    array('helpTextIdLabel' => 'SYS_RELATIONSHIP_TYPE_EDIT_USER_DESC')\n);\n\n$options = array('defaultValue' => $relationType1->getRelationTypeString(), 'helpTextIdLabel' => 'SYS_RELATIONSHIP_TYPE_DESC');\nif (!$relationType1->isNewRecord()) {\n    $options['property'] = HtmlForm::FIELD_DISABLED;\n}\n\n$form->addRadioButton(\n    'relation_type',\n    $gL10n->get('SYS_USER_RELATION_TYPE'),\n    array(\n        'asymmetrical'   => $gL10n->get('SYS_ASYMMETRICAL'),\n        'symmetrical'    => $gL10n->get('SYS_SYMMETRICAL'),\n        'unidirectional' => $gL10n->get('SYS_UNIDIRECTIONAL')\n    ),\n    $options\n);\n$form->closeGroupBox();\n\n$form->openGroupBox('gb_opposite_relationship', $gL10n->get('SYS_OPPOSITE_RELATIONSHIP'));\n$page->addJavascript(\n    '\n    function checkRelationTypeNames() {\n        $(\"#btn_save\").prop(\"disabled\", $(\"#urt_name\").val() === $(\"#urt_name_inverse\").val());\n    }\n    $(\"#urt_name\").on(\"input\", checkRelationTypeNames);\n    $(\"#urt_name_inverse\").on(\"input\", checkRelationTypeNames);\n\n    /**\n     * @param {object} element\n     * @param {int}    duration\n     */\n    function updateRelationType(element, duration) {\n        if ($(element).val() === \"unidirectional\" || $(element).val() === \"symmetrical\") {\n            $(\"#urt_name_inverse\").prop(\"required\", false);\n            $(\"#gb_opposite_relationship\").hide(duration);\n            $(\"#urt_name_inverse_group\").hide(duration);\n            $(\"#urt_name_male_inverse_group\").hide(duration);\n            $(\"#urt_name_female_inverse_group\").hide(duration);\n            $(\"#urt_edit_user_inverse_group\").hide(duration);\n        }\n        else if ($(element).val() === \"asymmetrical\") {\n            $(\"#urt_name_inverse\").prop(\"required\", true);\n            $(\"#gb_opposite_relationship\").show(duration);\n            $(\"#urt_name_inverse_group\").show(duration);\n            $(\"#urt_name_male_inverse_group\").show(duration);\n            $(\"#urt_name_female_inverse_group\").show(duration);\n            $(\"#urt_edit_user_inverse_group\").show(duration);\n        }\n    }\n    $(\"input[type=radio][name=relation_type]\").change(function() {\n        updateRelationType(this, \"slow\");\n    });\n    updateRelationType($(\"input[type=radio][name=relation_type]:checked\"));\n    ',\n    true\n);\n\n$form->addInput(\n    'urt_name_inverse',\n    $gL10n->get('SYS_NAME'),\n    $relationType2->getValue('urt_name', 'database'),\n    array('maxLength' => 100, 'property' => HtmlForm::FIELD_REQUIRED)\n);\n$form->addInput(\n    'urt_name_male_inverse',\n    $gL10n->get('SYS_MALE'),\n    ($relationType2->getValue('urt_name_male') !== $relationType2->getValue('urt_name')) ? $relationType2->getValue('urt_name_male', 'database') : '',\n    array('maxLength' => 100)\n);\n$form->addInput(\n    'urt_name_female_inverse',\n    $gL10n->get('SYS_FEMALE'),\n    ($relationType2->getValue('urt_name_female') !== $relationType2->getValue('urt_name')) ? $relationType2->getValue('urt_name_female', 'database') : '',\n    array('maxLength' => 100)\n);\n$form->addCheckbox(\n    'urt_edit_user_inverse',\n    $gL10n->get('SYS_EDIT_USER_IN_RELATION'),\n    (bool) $relationType2->getValue('urt_edit_user'),\n    array('helpTextIdLabel' => 'SYS_RELATIONSHIP_TYPE_EDIT_USER_DESC')\n);\n$form->closeGroupBox();\n\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check'));\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $relationType1->getValue('urt_usr_id_create'),\n    $relationType1->getValue('urt_timestamp_create'),\n    (int) $relationType1->getValue('urt_usr_id_change'),\n    $relationType1->getValue('urt_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n ***********************************************************************************************\n */\n\n/**\n * Creates an Admidio specific form with special elements\n *\n * This class inherits the common HtmlFormBasic class and extends their elements\n * with custom Admidio form elements. The class should be used to create the\n * html part of all Admidio forms. The Admidio elements will contain\n * the label of fields and some other specific features like an identification\n * of mandatory fields, help buttons and special css classes for every\n * element.\n *\n * **Code examples**\n * ```\n * // create a simple form with one input field and a button\n * $form = new HtmlForm('simple-form', 'next_page.php');\n * $form->openGroupBox('gbSimpleForm', $gL10n->get('SYS_SIMPLE_FORM'));\n * $form->addInput('name', $gL10n->get('SYS_NAME'), $formName);\n * $form->addSelectBox('type', $gL10n->get('SYS_TYPE'), array('simple' => 'SYS_SIMPLE', 'very-simple' => 'SYS_VERY_SIMPLE'),\n *                     array('defaultValue' => 'simple', 'showContextDependentFirstEntry' => true));\n * $form->closeGroupBox();\n * $form->addSubmitButton('next-page', $gL10n->get('SYS_NEXT'), array('icon' => 'fa-arrow-circle-right'));\n * $form->show();\n * ```\n */\nclass HtmlForm extends HtmlFormBasic\n{\n    public const FIELD_DEFAULT  = 0;\n    public const FIELD_REQUIRED = 1;\n    public const FIELD_DISABLED = 2;\n    public const FIELD_READONLY = 3;\n    public const FIELD_HIDDEN   = 4;\n\n    public const SELECT_BOX_MODUS_EDIT = 'EDIT_CATEGORIES';\n    public const SELECT_BOX_MODUS_FILTER = 'FILTER_CATEGORIES';\n\n    /**\n     * @var bool Flag if this form has required fields. Then a notice must be written at the end of the form\n     */\n    protected $flagRequiredFields = false;\n    /**\n     * @var bool Flag if required fields should get a special css class to make them more visible to the user.\n     */\n    protected $showRequiredFields;\n    /**\n     * @var HtmlPage A HtmlPage object that will be used to add javascript code or files to the html output page.\n     */\n    protected $htmlPage;\n    /**\n     * @var int Number of visible elements in this form. Hidden elements are not count because no interaction is possible.\n     */\n    protected $countElements = 0;\n    /**\n     * @var string Form type. Possible values are **default**, **vertical** or **navbar**.\n     */\n    protected $type;\n    /**\n     * @var string ID of the form\n     */\n    protected $id;\n    /**\n     * @var bool Flag that indicates if a bootstrap button-group is open and should be closed later\n     */\n    protected $buttonGroupOpen = false;\n\n    /**\n     * Constructor creates the form element\n     * @param string   $id       ID of the form\n     * @param string   $action   Action attribute of the form\n     * @param HtmlPage|null $htmlPage (optional) A HtmlPage object that will be used to add javascript code or files to the html output page.\n     * @param array    $options  (optional) An array with the following possible entries:\n     *                           - **type** : Set the form type. Every type has some special features:\n     *                             + **default**  : A form that can be used to edit and save data of a database table. The label\n     *                               and the element have a horizontal orientation.\n     *                             + **vertical** : A form that can be used to edit and save data but has a vertical orientation.\n     *                               The label is positioned above the form element.\n     *                             + **navbar**   : A form that should be used in a navbar. The form content will\n     *                               be sent with the 'GET' method and this form should not get a default focus.\n     *                           - **method** : Method how the values of the form are submitted.\n     *                             Possible values are **get** and **post** (default).\n     *                           - **enableFileUpload** : Set specific parameters that are necessary for file upload with a form\n     *                           - **showRequiredFields** : If this is set to **true** (default) then every required field got a special\n     *                             css class and also the form got a **div** that explains the required layout.\n     *                             If this is set to **false** then only the html flag **required** will be set.\n     *                           - **setFocus** : Default is set to **true**. Set the focus on page load to the first field\n     *                             of this form.\n     *                           - **class** : An additional css classname. The class **form-horizontal**\n     *                             is set as default and need not set with this parameter.\n     */\n    public function __construct($id, $action = null, HtmlPage $htmlPage = null, array $options = array())\n    {\n        // create array with all options\n        $optionsDefault = array(\n            'type'               => 'default',\n            'enableFileUpload'   => false,\n            'showRequiredFields' => true,\n            'setFocus'           => true,\n            'class'              => '',\n            'method'             => 'post'\n        );\n\n        // navbar forms should send the data as GET if it's not explicit set\n        if (isset($options['type']) && $options['type'] === 'navbar' && !isset($options['method'])) {\n            $options['method'] = 'get';\n        }\n\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        parent::__construct($action, $id, $optionsAll['method']);\n\n        $this->showRequiredFields = $optionsAll['showRequiredFields'];\n        $this->type = $optionsAll['type'];\n        $this->id   = $id;\n\n        // set specific Admidio css form class\n        $this->addAttribute('role', 'form');\n\n        if ($this->type === 'default') {\n            $optionsAll['class'] .= ' form-horizontal form-dialog';\n        } elseif ($this->type === 'vertical') {\n            $optionsAll['class'] .= ' admidio-form-vertical form-dialog';\n        } elseif ($this->type === 'navbar') {\n            $optionsAll['class'] .= ' form-inline ';\n        }\n\n        if ($optionsAll['class'] !== '') {\n            $this->addAttribute('class', $optionsAll['class']);\n        }\n\n        // Set specific parameters that are necessary for file upload with a form\n        if ($optionsAll['enableFileUpload']) {\n            $this->addAttribute('enctype', 'multipart/form-data');\n        }\n\n        if ($optionsAll['method'] === 'post' && isset($GLOBALS['gCurrentSession'])) {\n            // add a hidden field with the csrf token to each form\n            $this->addInput(\n                'admidio-csrf-token',\n                'csrf-token',\n                $GLOBALS['gCurrentSession']->getCsrfToken(),\n                array('property' => self::FIELD_HIDDEN)\n            );\n        }\n\n        if ($htmlPage instanceof HtmlPage) {\n            $this->htmlPage =& $htmlPage;\n        }\n\n        // if it's not a navbar form and not a static form then first field of form should get focus\n        if ($optionsAll['setFocus']) {\n            $this->addJavascriptCode('$(\".form-dialog:first *:input:enabled:visible:not([readonly]):first\").focus();', true);\n        }\n    }\n\n    /**\n     * Add a new button with a custom text to the form. This button could have\n     * an icon in front of the text.\n     * @param string $id      ID of the button. This will also be the name of the button.\n     * @param string $text    Text of the button\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **icon** : Optional parameter. Path and filename of an icon.\n     *                          If set an icon will be shown in front of the text.\n     *                        - **link** : If set a javascript click event with a page load to this link\n     *                          will be attached to the button.\n     *                        - **class** : Optional an additional css classname. The class **admButton**\n     *                          is set as default and need not set with this parameter.\n     *                        - **type** : Optional a button type could be set. The default is **button**.\n     */\n    public function addButton($id, $text, array $options = array())\n    {\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,\n            'icon' => '',\n            'link' => '',\n            'class' => '',\n            'type' => 'button',\n            'data-admidio' => '',\n            'id' => $id,\n            'value' => $text,\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n        $attributes = array();\n        $attributes['class'] = $optionsAll['class'];\n        $attributes['type'] = $optionsAll['type'];\n        $attributes['data-admidio'] = $optionsAll['data-admidio'];\n        ++$this->countElements;\n\n        if(strstr($attributes['class'], ' btn ') === false) {\n            $attributes['class'] = \"btn btn-secondary \" . $optionsAll['class'];\n\n            if ($this->type !== 'navbar') {\n                $attributes['class'] .= '  admidio-margin-bottom';\n            }\n        }\n\n        $optionsAll['attributes'] = $attributes;\n        $this->addHtml($this->render('form.button', $optionsAll));\n    }\n\n    /**\n     * Add a captcha with an input field to the form. The captcha could be a picture with a character code\n     * or a simple mathematical calculation that must be solved.\n     * @param string $id    ID of the captcha field. This will also be the name of the captcha field.\n     * @param string $class (optional) An additional css classname. The class **admTextInput**\n     *                      is set as default and need not set with this parameter.\n     */\n    public function addCaptcha($id, $class = '')\n    {\n        global $gL10n;\n\n        $attributes = array('class' => 'captcha');\n        ++$this->countElements;\n\n        // set specific css class for this field\n        if ($class !== '') {\n            $attributes['class'] .= ' ' . $class;\n        }\n\n        $this->addHtml($this->render('form.captcha', ['attributes' => $attributes]));\n        // now add a row with a text field where the user can write the solution for the puzzle\n        $this->addInput(\n            $id,\n            $gL10n->get('SYS_CAPTCHA_CONFIRMATION_CODE'),\n            '',\n            array('property' => self::FIELD_REQUIRED, 'helpTextIdLabel' => 'SYS_CAPTCHA_DESCRIPTION', 'class' => 'form-control-small')\n        );\n\n    }\n\n    /**\n     * Add a new checkbox with a label to the form.\n     * @param string $id      ID of the checkbox. This will also be the name of the checkbox.\n     * @param string $label   The label of the checkbox.\n     * @param bool   $checked A value for the checkbox. The value could only be **0** or **1**. If the value is **1** then\n     *                        the checkbox will be checked when displayed.\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **property** : With this param you can set the following properties:\n     *                          + **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                          + **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                          + **self::FIELD_DISABLED** : The field will be disabled and could not accept an input.\n     *                        - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                          the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                          for the text you can add an array. The first entry must be the unique text id and the second\n     *                          entry will be a parameter of the text id.\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **alertWarning** : Add a bootstrap info alert box after the select box. The value of this option\n     *                          will be the text of the alertbox\n     *                        - **icon** : An icon can be set. This will be placed in front of the label.\n     *                        - **class** : An additional css classname. The class **admSelectbox**\n     *                          is set as default and need not set with this parameter.\n     */\n    public function addCheckbox($id, $label, $checked = false, array $options = array())\n    {\n        $attributes   = array('class' => '');\n        ++$this->countElements;\n\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,\n            'property'         => self::FIELD_DEFAULT,\n            'helpTextIdLabel'  => '',\n            'helpTextIdInline' => '',\n            'icon'             => '',\n            'class'            => '',\n            'alertWarning'     => '',\n            'id'               => $id,\n            'label'            => $label\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        // disable field\n        if ($optionsAll['property'] === self::FIELD_DISABLED) {\n            $attributes['disabled'] = 'disabled';\n        } elseif ($optionsAll['property'] === self::FIELD_REQUIRED) {\n            $attributes['required'] = 'required';\n            $this->flagRequiredFields = true;\n        }\n\n        // if checked = true then set checkbox checked\n        if ($checked) {\n            $attributes['checked'] = 'checked';\n        }\n\n        // set specific css class for this field\n        if ($optionsAll['class'] !== '') {\n            $attributes['class'] .= ' ' . $optionsAll['class'];\n        }\n\n        $optionsAll[\"attributes\"] = $attributes;\n\n        // required field should not be highlighted so set it to a default field\n        if (!$this->showRequiredFields && $optionsAll['property'] === self::FIELD_REQUIRED) {\n            $optionsAll['property'] = self::FIELD_DEFAULT;\n        }\n\n        $this->addHtml($this->render('form.checkbox', $optionsAll));\n    }\n\n    /**\n     * Add custom html content to the form within the default field structure.\n     * The Label will be set but instead of a form control you can define any html.\n     * If you don't need the field structure and want to add html then use the method addHtml()\n     * @param string $label   The label of the custom content.\n     * @param string $content A simple Text or html that would be placed instead of a form element.\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **referenceId** : Optional the id of a form control if this is defined within the custom content\n     *                        - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                          the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                          for the text you can add an array. The first entry must be the unique text id and the second\n     *                          entry will be a parameter of the text id.\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **alertWarning** : Add a bootstrap info alert box after the select box. The value of this option\n     *                          will be the text of the alertbox\n     *                        - **icon** : An icon can be set. This will be placed in front of the label.\n     *                        - **class** : An additional css classname. The class **admSelectbox**\n     *                          is set as default and need not set with this parameter.\n     */\n    public function addCustomContent($label, $content, array $options = array())\n    {\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,\n            'property'         => '',\n            'referenceId'      => '',\n            'helpTextIdLabel'  => '',\n            'helpTextIdInline' => '',\n            'icon'             => '',\n            'class'            => '',\n            'label'            => $label,\n            'content'          => $content,\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        $this->addHtml($this->render('form.customcontent', $optionsAll));\n\n\n    }\n\n    /**\n     * Add a line with a custom description to the form. No form elements will be displayed in this line.\n     * @param string $text The (html) text that should be displayed.\n     */\n    public function addDescription($text)\n    {\n        $this->addHtml('<p>' . $text . '</p>');\n    }\n\n    /**\n     * Add a new CKEditor element to the form.\n     * @param string $id      ID of the password field. This will also be the name of the password field.\n     * @param string $label   The label of the password field.\n     * @param string $value   A value for the editor field. The editor will contain this value when created.\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **property** : With this param you can set the following properties:\n     *                          + **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                          + **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                        - **toolbar** : Optional set a predefined toolbar for the editor. Possible values are\n     *                          **AdmidioDefault**, **AdmidioGuestbook** and **AdmidioPlugin_WC**\n     *                        - **height** : Optional set the height in pixel of the editor. The default will be 300.\n     *                        - **labelVertical** : If set to **true** (default) then the label will be display above the control and the control get a width of 100%.\n     *                          Otherwise, the label will be displayed in front of the control.\n     *                        - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                          the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                          for the text you can add an array. The first entry must be the unique text id and the second\n     *                          entry will be a parameter of the text id.\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **icon** : An icon can be set. This will be placed in front of the label.\n     *                        - **class** : An additional css classname. The class **admSelectbox**\n     *                          is set as default and need not set with this parameter.\n     */\n    public function addEditor($id, $label, $value, array $options = array())\n    {\n        global $gSettingsManager, $gL10n;\n\n        $attributes = array('class' => 'editor');\n        $flagLabelVertical = $this->type;\n        ++$this->countElements;\n\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,\n            'property'         => self::FIELD_DEFAULT,\n            'toolbar'          => 'AdmidioDefault',\n            'height'           => '300',\n            'helpTextIdLabel'  => '',\n            'helpTextIdInline' => '',\n            'labelVertical'    => true,\n            'icon'             => '',\n            'class'            => '',\n            'id'               => $id,\n            'label'            => $label,\n            'value'            => $value,\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        if ($optionsAll['labelVertical']) {\n            $this->type = 'vertical';\n        }\n\n        if ($optionsAll['property'] === self::FIELD_REQUIRED) {\n            $attributes['required'] = 'required';\n            $this->flagRequiredFields = true;\n        }\n\n        // set specific css class for this field\n        if ($optionsAll['class'] !== '') {\n            $attributes['class'] .= ' ' . $optionsAll['class'];\n        }\n        $javascriptCode = '\n            CKEDITOR.replace(\"' . $id . '\", {\n                toolbar: \"' . $optionsAll['toolbar'] . '\",\n                language: \"' . $gL10n->getLanguageLibs() . '\",\n                uiColor: \"' . $gSettingsManager->getString('system_js_editor_color') . '\",\n                filebrowserUploadMethod: \"form\",\n                filebrowserImageUploadUrl: \"' . ADMIDIO_URL . '/adm_program/system/ckeditor_upload_handler.php\"\n            });\n            CKEDITOR.config.height = \"' . $optionsAll['height'] . '\";';\n\n        if ($gSettingsManager->getBool('system_js_editor_enabled')) {\n            // if a htmlPage object was set then add code to the page, otherwise to the current string\n            if ($this->htmlPage instanceof HtmlPage) {\n                $this->htmlPage->addJavascriptFile(ADMIDIO_URL . FOLDER_LIBS_CLIENT . '/ckeditor/ckeditor.js');\n            }\n            $this->addJavascriptCode($javascriptCode, true);\n        }\n\n        $this->type = $flagLabelVertical;\n        $optionsAll[\"attributes\"] = $attributes;\n\n        // required field should not be highlighted so set it to a default field\n        if (!$this->showRequiredFields && $optionsAll['property'] === self::FIELD_REQUIRED) {\n            $optionsAll['property'] = self::FIELD_DEFAULT;\n        }\n\n        $this->addHtml($this->render('form.editor', $optionsAll));\n    }\n\n    /**\n     * Add a field for file upload. If necessary multiple files could be uploaded.\n     * The fields for multiple upload could be added dynamically to the form by the user.\n     * @param string $id      ID of the input field. This will also be the name of the input field.\n     * @param string $label   The label of the input field.\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **property** : With this param you can set the following properties:\n     *                          + **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                          + **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                          + **self::FIELD_DISABLED** : The field will be disabled and could not accept an input.\n     *                        - **allowedMimeTypes** : An array with the allowed MIME types (https://wiki.selfhtml.org/wiki/MIME-Type/%C3%9Cbersicht).\n     *                          If this is set then the user can only choose the specified files with the browser file dialog.\n     *                          You should check the uploaded file against the MIME type because the file could be manipulated.\n     *                        - **maxUploadSize** : The size in byte that could be maximum uploaded.\n     *                          The default will be $gSettingsManager->getInt('max_file_upload_size') * 1024 * 1024.\n     *                        - **enableMultiUploads** : If set to true a button will be added where the user can\n     *                          add new upload fields to upload more than one file.\n     *                        - **multiUploadLabel** : The label for the button who will add new upload fields to the form.\n     *                        - **hideUploadField** : Hide the upload field if multi uploads are enabled. Then the first\n     *                          upload field will be shown if the user will click the multi upload button.\n     *                        - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                          the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                          for the text you can add an array. The first entry must be the unique text id and the second\n     *                          entry will be a parameter of the text id.\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **icon** : An icon can be set. This will be placed in front of the label.\n     *                        - **class** : An additional css classname. The class **admSelectbox**\n     *                          is set as default and need not set with this parameter.\n     */\n    public function addFileUpload($id, $label, array $options = array())\n    {\n        global $gSettingsManager;\n\n        $attributes = array('class' => 'form-control');\n        ++$this->countElements;\n\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,\n            'property'           => self::FIELD_DEFAULT,\n            'maxUploadSize'      => $gSettingsManager->getInt('max_file_upload_size') * 1024 * 1024, // MiB\n            'allowedMimeTypes'   => array(),\n            'enableMultiUploads' => false,\n            'hideUploadField'    => false,\n            'multiUploadLabel'   => '',\n            'helpTextIdLabel'    => '',\n            'helpTextIdInline'   => '',\n            'icon'               => '',\n            'class'              => '',\n            'id'                 => $id,\n            'label'              => $label,\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        // disable field\n        if ($optionsAll['property'] === self::FIELD_DISABLED) {\n            $attributes['disabled'] = 'disabled';\n        } elseif ($optionsAll['property'] === self::FIELD_REQUIRED) {\n            $attributes['required'] = 'required';\n            $this->flagRequiredFields = true;\n        }\n\n        if (count($optionsAll['allowedMimeTypes']) > 0) {\n            $attributes['accept'] = implode(',', $optionsAll['allowedMimeTypes']);\n        }\n\n        if ($optionsAll['icon'] === '') {\n            $optionsAll['icon'] = 'fa-upload';\n        }\n\n        // set specific css class for this field\n        if ($optionsAll['class'] !== '') {\n            $attributes['class'] .= ' ' . $optionsAll['class'];\n        }\n\n        // if multiple uploads are enabled then add javascript that will\n        // dynamically add new upload fields to the form\n        if ($optionsAll['enableMultiUploads']) {\n            $javascriptCode = '\n                // add new line to add new attachment to this mail\n                $(\"#btn_add_attachment_' . $id . '\").click(function() {\n                    newAttachment = document.createElement(\"input\");\n                    $(newAttachment).attr(\"type\", \"file\");\n                    $(newAttachment).attr(\"name\", \"userfile[]\");\n                    $(newAttachment).attr(\"class\", \"' . $attributes['class'] . '\");\n                    $(newAttachment).hide();\n                    $(\"#btn_add_attachment_' . $id . '\").before(newAttachment);\n                    $(newAttachment).show(\"slow\");\n                });';\n\n            // if a htmlPage object was set then add code to the page, otherwise to the current string\n            $this->addJavascriptCode($javascriptCode, true);\n        }\n\n        $optionsAll[\"attributes\"] = $attributes;\n\n        // required field should not be highlighted so set it to a default field\n        if (!$this->showRequiredFields && $optionsAll['property'] === self::FIELD_REQUIRED) {\n            $optionsAll['property'] = self::FIELD_DEFAULT;\n        }\n\n        $this->addHtml($this->render('form.file', $optionsAll));\n    }\n\n    /**\n     * Add a new input field with a label to the form.\n     * @param string $id      ID of the input field. This will also be the name of the input field.\n     * @param string $label   The label of the input field.\n     * @param string $value   A value for the text field. The field will be created with this value.\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **type** : Set the type if the field. Default will be **text**. Possible values are **text**,\n     *                          **number**, **date**, **datetime** or **birthday**. If **date**, **datetime** or **birthday** are set\n     *                          than a small calendar will be shown if the date field will be selected.\n     *                        - **maxLength** : The maximum number of characters that are allowed in a text field.\n     *                        - **minNumber** : The minimum number that is allowed in a number field.\n     *                        - **maxNumber** : The maximum number that is allowed in a number field.\n     *                        - **step** : The steps between two numbers that are allowed.\n     *                          E.g. if steps is set to 5 then only values 5, 10, 15 ... are allowed\n     *                        - **property** : With this param you can set the following properties:\n     *                          + **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                          + **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                          + **self::FIELD_DISABLED** : The field will be disabled and could not accept an input.\n     *                          + **self::FIELD_HIDDEN**   : The field will not be shown. Useful to transport additional informations.\n     *                        - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                          the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                          for the text you can add an array. The first entry must be the unique text id and the second\n     *                          entry will be a parameter of the text id.\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **alertWarning** : Add a bootstrap info alert box after the select box. The value of this option\n     *                          will be the text of the alertbox\n     *                        - **icon** : An icon can be set. This will be placed in front of the label.\n     *                        - **class** : An additional css classname. The class **admSelectbox**\n     *                          is set as default and need not set with this parameter.\n     *                        - **htmlAfter** : Add html code after the input field.\n     */\n    public function addInput($id, $label, $value, array $options = array())\n    {\n        global $gSettingsManager, $gLogger;\n\n        $attributes = array('class' => 'form-control');\n        ++$this->countElements;\n\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,\n            'id'               => $id,\n            'label'            => $label,\n            'value'            => $value,\n            'type'             => 'text',\n            'placeholder'      => '',\n            'pattern'          => '',\n            'minLength'        => null,\n            'maxLength'        => null,\n            'minNumber'        => null,\n            'maxNumber'        => null,\n            'step'             => null,\n            'property'         => self::FIELD_DEFAULT,\n            'passwordStrength' => false,\n            'passwordUserData' => array(),\n            'helpTextIdLabel'  => '',\n            'helpTextIdInline' => '',\n            'icon'             => '',\n            'class'            => '',\n            'htmlAfter'        => '',\n            'alertWarning'     => ''\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        $optionsAll['helpTextIdInline'] = self::getHelpText($optionsAll['helpTextIdInline']);\n\n        $attributes['placeholder'] = $optionsAll['placeholder'];\n\n        // set min/max input length\n        switch ($optionsAll['type']) {\n            case 'text': // fallthrough\n            case 'search': // fallthrough\n            case 'email': // fallthrough\n            case 'url': // fallthrough\n            case 'tel': // fallthrough\n            case 'password':\n                $attributes['pattern'] = $optionsAll['pattern'];\n\n                $attributes['minlength'] = $optionsAll['minLength'];\n\n                if ($optionsAll['maxLength'] > 0) {\n                    $attributes['maxlength'] = $optionsAll['maxLength'];\n\n                    if ($attributes['minlength'] > $attributes['maxlength']) {\n                        $gLogger->warning(\n                            'Attribute \"minlength\" is greater than \"maxlength\"!',\n                            array('minlength' => $attributes['maxlength'], 'maxlength' => $attributes['maxlength'])\n                        );\n                    }\n                }\n                break;\n            case 'number':\n                $attributes['min'] = $optionsAll['minNumber'];\n                $attributes['max'] = $optionsAll['maxNumber'];\n                $attributes['step'] = $optionsAll['step'];\n\n                if ($attributes['min'] > $attributes['max']) {\n                    $gLogger->warning(\n                        'Attribute \"min\" is greater than \"max\"!',\n                        array('min' => $attributes['min'], 'max' => $attributes['max'])\n                    );\n                }\n                break;\n        }\n\n        // set field properties\n        switch ($optionsAll['property']) {\n            case self::FIELD_DISABLED:\n                $attributes['disabled'] = 'disabled';\n                break;\n\n            case self::FIELD_READONLY:\n                $attributes['readonly'] = 'readonly';\n                break;\n\n            case self::FIELD_REQUIRED:\n                $attributes['required'] = 'required';\n                $this->flagRequiredFields = true;\n                break;\n\n            case self::FIELD_HIDDEN:\n                $attributes['hidden'] = 'hidden';\n                $attributes['class'] .= ' invisible';\n                break;\n        }\n\n        // set specific css class for this field\n        if ($optionsAll['class'] !== '') {\n            $attributes['class'] .= ' '.$optionsAll['class'];\n        }\n\n        // Remove attributes that are not set\n        $attributes = array_filter($attributes, function ($attribute) {\n            return $attribute !== '' && $attribute !== null;\n        });\n\n        // if datetime then add a time field behind the date field\n        if ($optionsAll['type'] === 'datetime') {\n            $datetime = DateTime::createFromFormat($gSettingsManager->getString('system_date') . ' ' . $gSettingsManager->getString('system_time'), $value);\n\n            // now add a date and a time field to the form\n            $attributes['dateValue'] = null;\n            $attributes['timeValue'] = null;\n\n            if ($datetime) {\n                $attributes['dateValue'] = $datetime->format('Y-m-d');\n                $attributes['timeValue'] = $datetime->format('H:i');\n            }\n\n            // now add a date and a time field to the form\n            $attributes['dateValueAttributes'] = array();\n            $attributes['dateValueAttributes']['class'] = 'form-control datetime-date-control';\n            $attributes['dateValueAttributes']['pattern'] = '\\d{4}-\\d{2}-\\d{2}';\n\n            $attributes['timeValueAttributes'] = array();\n            $attributes['timeValueAttributes']['class'] = 'form-control datetime-time-control';\n        } elseif ($optionsAll['type'] === 'date') {\n            $datetime = DateTime::createFromFormat($gSettingsManager->getString('system_date'), $value);\n            if (!empty($value) && is_object($datetime))\n                $value = $datetime->format('Y-m-d');\n            $attributes['pattern'] = '\\d{4}-\\d{2}-\\d{2}';\n        } elseif ($optionsAll['type'] === 'time') {\n            $datetime = DateTime::createFromFormat('Y-m-d' . $gSettingsManager->getString('system_time'), DATE_NOW . $value);\n            if (!empty($value) && is_object($datetime))\n                $value = $datetime->format('H:i');\n        }\n\n        if ($optionsAll['passwordStrength']) {\n            $passwordStrengthLevel = 1;\n            if ($gSettingsManager instanceof SettingsManager && $gSettingsManager->getInt('password_min_strength')) {\n                $passwordStrengthLevel = $gSettingsManager->getInt('password_min_strength');\n            }\n\n            if ($this->htmlPage instanceof HtmlPage) {\n                $zxcvbnUserInputs = json_encode($optionsAll['passwordUserData'], JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);\n                $javascriptCode = '\n                    $(\"#admidio-password-strength-minimum\").css(\"margin-left\", \"calc(\" + $(\"#admidio-password-strength\").css(\"width\") + \" / 4 * '.$passwordStrengthLevel.')\");\n\n                    $(\"#' . $id . '\").keyup(function(e) {\n                        var result = zxcvbn(e.target.value, ' . $zxcvbnUserInputs . ');\n                        var cssClasses = [\"bg-danger\", \"bg-danger\", \"bg-warning\", \"bg-info\", \"bg-success\"];\n\n                        var progressBar = $(\"#admidio-password-strength .progress-bar\");\n                        progressBar.attr(\"aria-valuenow\", result.score * 25);\n                        progressBar.css(\"width\", result.score * 25 + \"%\");\n                        progressBar.removeClass(cssClasses.join(\" \"));\n                        progressBar.addClass(cssClasses[result.score]);\n                    });\n                ';\n                $this->htmlPage->addJavascriptFile(ADMIDIO_URL . FOLDER_LIBS_CLIENT . '/zxcvbn/dist/zxcvbn.js');\n                $this->htmlPage->addJavascript($javascriptCode, true);\n            }\n        }\n\n        $optionsAll[\"attributes\"] = $attributes;\n        // replace quotes with html entities to prevent xss attacks\n        $optionsAll['value'] = htmlentities($value, ENT_QUOTES);\n\n        // required field should not be highlighted so set it to a default field\n        if (!$this->showRequiredFields && $optionsAll['property'] === self::FIELD_REQUIRED) {\n            $optionsAll['property'] = self::FIELD_DEFAULT;\n        }\n\n        $this->addHtml($this->render(\"form.input\", $optionsAll));\n    }\n\n    /**\n     * Adds any javascript content to the page. The javascript will be added to the page header or as inline script.\n     * @param string $javascriptCode       A valid javascript code that will be added to the header of the page or as inline script.\n     * @param bool   $executeAfterPageLoad (optional) If set to **true** the javascript code will be executed after\n     *                                     the page is fully loaded.\n     */\n    protected function addJavascriptCode($javascriptCode, $executeAfterPageLoad = false)\n    {\n        if ($this->htmlPage instanceof HtmlPage) {\n            $this->htmlPage->addJavascript($javascriptCode, $executeAfterPageLoad);\n            return;\n        }\n\n        if ($executeAfterPageLoad) {\n            $javascriptCode = '$(function() { ' . $javascriptCode . ' });';\n        }\n        $this->addHtml('<script type=\"text/javascript\">' . $javascriptCode . '</script>');\n    }\n\n    /**\n     * Add a simple line to the form. This could be used to structure a form. The line has only a visual effect.\n     */\n    public function addLine()\n    {\n        $this->addHtml('<hr />');\n    }\n\n    /**\n     * Add a new textarea field with a label to the form.\n     * @param string $id      ID of the input field. This will also be the name of the input field.\n     * @param string $label   The label of the input field.\n     * @param string $value   A value for the text field. The field will be created with this value.\n     * @param int    $rows    The number of rows that the textarea field should have.\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **maxLength** : The maximum number of characters that are allowed in this field. If set\n     *                          then show a counter how many characters still available\n     *                        - **property** : With this param you can set the following properties:\n     *                          + **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                          + **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                          + **self::FIELD_DISABLED** : The field will be disabled and could not accept an input.\n     *                        - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                          the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                          for the text you can add an array. The first entry must be the unique text id and the second\n     *                          entry will be a parameter of the text id.\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **icon** : An icon can be set. This will be placed in front of the label.\n     *                        - **class** : An additional css classname. The class **admSelectbox**\n     *                          is set as default and need not set with this parameter.\n     */\n    public function addMultilineTextInput($id, $label, $value, $rows, array $options = array())\n    {\n        ++$this->countElements;\n        $attributes = array('class' => 'form-control');\n\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,\n            'property'         => self::FIELD_DEFAULT,\n            'maxLength'        => 0,\n            'helpTextIdLabel'  => '',\n            'helpTextIdInline' => '',\n            'icon'             => '',\n            'class'            => '',\n            'id'               => $id,\n            'label'            => $label,\n            'value'            => $value\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        // set field properties\n        switch ($optionsAll['property']) {\n            case self::FIELD_DISABLED:\n                $attributes['disabled'] = 'disabled';\n                break;\n\n            case self::FIELD_READONLY:\n                $attributes['readonly'] = 'readonly';\n                break;\n\n            case self::FIELD_REQUIRED:\n                $attributes['required'] = 'required';\n                $this->flagRequiredFields = true;\n                break;\n\n            case self::FIELD_HIDDEN:\n                $attributes['hidden'] = 'hidden';\n                $attributes['class'] .= ' invisible';\n                break;\n        }\n\n        // set specific css class for this field\n        if ($optionsAll['class'] !== '') {\n            $attributes['class'] .= ' ' . $optionsAll['class'];\n        }\n\n        if ($optionsAll['maxLength'] > 0) {\n            $attributes['maxlength'] = $optionsAll['maxLength'];\n\n            // if max field length is set then show a counter how many characters still available\n            $javascriptCode = '\n                $(\"#' . $id . '\").NobleCount(\"#' . $id . '_counter\", {\n                    max_chars: ' . $optionsAll['maxLength'] . ',\n                    on_negative: \"systeminfoBad\",\n                    block_negative: true\n                });';\n\n            // if a htmlPage object was set then add code to the page, otherwise to the current string\n            if ($this->htmlPage instanceof HtmlPage) {\n                $this->htmlPage->addJavascriptFile(ADMIDIO_URL . FOLDER_LIBS_CLIENT . '/noblecount/jquery.noblecount.js');\n            }\n            $this->addJavascriptCode($javascriptCode, true);\n        }\n\n        $attributes[\"rows\"] = $rows;\n        $attributes[\"cols\"] = 80;\n        $optionsAll[\"attributes\"] = $attributes;\n\n        // required field should not be highlighted so set it to a default field\n        if (!$this->showRequiredFields && $optionsAll['property'] === self::FIELD_REQUIRED) {\n            $optionsAll['property'] = self::FIELD_DEFAULT;\n        }\n\n        $this->addHtml($this->render('form.multiline', $optionsAll));\n    }\n\n    /**\n     * Add a new radio button with a label to the form. The radio button could have different status\n     * which could be defined with an array.\n     * @param string $id      ID of the radio button. This will also be the name of the radio button.\n     * @param string $label   The label of the radio button.\n     * @param array  $values  Array with all entries of the radio button;\n     *                        Array key will be the internal value of the entry\n     *                        Array value will be the visual value of the entry\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **property** : With this param you can set the following properties:\n     *                          + **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                          + **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                          + **self::FIELD_DISABLED** : The field will be disabled and could not accept an input.\n     *                        - **defaultValue** : This is the value of that radio button that is preselected.\n     *                        - **showNoValueButton** : If set to true than one radio with no value will be set in front of the other array.\n     *                          This could be used if the user should also be able to set no radio to value.\n     *                        - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                          the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                          for the text you can add an array. The first entry must be the unique text id and the second\n     *                          entry will be a parameter of the text id.\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **alertWarning** : Add a bootstrap info alert box after the select box. The value of this option\n     *                          will be the text of the alertbox\n     *                        - **icon** : An icon can be set. This will be placed in front of the label.\n     *                        - **class** : An additional css classname. The class **admSelectbox**\n     *                          is set as default and need not set with this parameter.\n     */\n    public function addRadioButton($id, $label, array $values, array $options = array())\n    {\n        ++$this->countElements;\n        $attributes = array('class' => '');\n\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,\n            'property'          => self::FIELD_DEFAULT,\n            'defaultValue'      => '',\n            'showNoValueButton' => false,\n            'helpTextIdLabel'   => '',\n            'helpTextIdInline'  => '',\n            'icon'              => '',\n            'class'             => '',\n            'id'                => $id,\n            'label'             => $label,\n            'values'             => $values\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        // disable field\n        if ($optionsAll['property'] === self::FIELD_DISABLED) {\n            $attributes['disabled'] = 'disabled';\n        } elseif ($optionsAll['property'] === self::FIELD_REQUIRED) {\n            $attributes['required'] = 'required';\n            $this->flagRequiredFields = true;\n        }\n\n        // set specific css class for this field\n        if ($optionsAll['class'] !== '') {\n            $attributes['class'] .= ' ' . $optionsAll['class'];\n        }\n\n        $optionsAll[\"attributes\"] = $attributes;\n\n        // required field should not be highlighted so set it to a default field\n        if (!$this->showRequiredFields && $optionsAll['property'] === self::FIELD_REQUIRED) {\n            $optionsAll['property'] = self::FIELD_DEFAULT;\n        }\n\n        $this->addHtml($this->render('form.radio', $optionsAll));\n    }\n\n    /**\n     * Add a new selectbox with a label to the form. The selectbox\n     * could have different values and a default value could be set.\n     * @param string $id      ID of the selectbox. This will also be the name of the selectbox.\n     * @param string $label   The label of the selectbox.\n     * @param array  $values  Array with all entries of the select box;\n     *                        Array key will be the internal value of the entry\n     *                        Array value will be the visual value of the entry\n     *                        If you need an option group within the selectbox than you must add an array as value.\n     *                        This array exists of 3 entries: array(0 => id, 1 => value name, 2 => option group name)\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **property** : With this param you can set the following properties:\n     *                          + **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                          + **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                          + **self::FIELD_DISABLED** : The field will be disabled and could not accept an input.\n     *                        - **defaultValue** : This is the value the selectbox shows when loaded. If **multiselect** is activated than\n     *                          an array with all default values could be set.\n     *                        - **showContextDependentFirstEntry** : If set to **true** the select box will get an additional first entry.\n     *                          If self::FIELD_REQUIRED is set than \"Please choose\" will be the first entry otherwise\n     *                          an empty entry will be added, so you must not select something.\n     *                        - **firstEntry** : Here you can define a string that should be shown as firstEntry and will be the\n     *                          default value if no other value is set. This entry will only be added if **showContextDependentFirstEntry**\n     *                          is set to false!\n     *                        - **arrayKeyIsNotValue** : If set to **true** than the entry of the values-array will be used as\n     *                          option value and not the key of the array\n     *                        - **multiselect** : If set to **true** than the jQuery plugin Select2 will be used to create a selectbox\n     *                          where the user could select multiple values from the selectbox. Then an array will be\n     *                          created within the $_POST array.\n     *                        - **search** : If set to **true** the jQuery plugin Select2 will be used to create a selectbox\n     *                          with a search field.\n     *                        - **placeholder** : When using the jQuery plugin Select2 you can set a placeholder that will be shown\n     *                          if no entry is selected\n     *                        - **maximumSelectionNumber** : If **multiselect** is enabled then you can configure the maximum number\n     *                          of selections that could be done. If this limit is reached the user can't add another entry to the selectbox.\n     *                        - **valueAttributes**: An array which contain the same ids as the value array. The value of this array will be\n     *                          onother array with the combination of attributes name and attributes value.\n     *                        - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                          the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                          for the text you can add an array. The first entry must be the unique text id and the second\n     *                          entry will be a parameter of the text id.\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **alertWarning** : Add a bootstrap info alert box after the select box. The value of this option\n     *                          will be the text of the alertbox\n     *                        - **icon** : An icon can be set. This will be placed in front of the label.\n     *                        - **class** : An additional css classname. The class **admSelectbox**\n     *                          is set as default and need not set with this parameter.\n     */\n    public function addSelectBox($id, $label, array $values, array $options = array())\n    {\n        global $gL10n;\n\n        ++$this->countElements;\n        $attributes = array('class' => 'form-control');\n        $name = $id;\n\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,\n            'property'                       => self::FIELD_DEFAULT,\n            'defaultValue'                   => '',\n            'showContextDependentFirstEntry' => true,\n            'firstEntry'                     => '',\n            'arrayKeyIsNotValue'             => false,\n            'multiselect'                    => false,\n            'search'                         => false,\n            'placeholder'                    => '',\n            'maximumSelectionNumber'         => 0,\n            'valueAttributes'                => '',\n            'alertWarning'                   => '',\n            'helpTextIdLabel'                => '',\n            'helpTextIdInline'               => '',\n            'icon'                           => '',\n            'class'                          => ''\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        // set field properties\n        switch ($optionsAll['property']) {\n            case self::FIELD_DISABLED:\n                $attributes['disabled'] = 'disabled';\n                break;\n\n            case self::FIELD_READONLY:\n                $attributes['readonly'] = 'readonly';\n                break;\n\n            case self::FIELD_REQUIRED:\n                $attributes['required'] = 'required';\n                $this->flagRequiredFields = true;\n                break;\n\n            case self::FIELD_HIDDEN:\n                $attributes['hidden'] = 'hidden';\n                $attributes['class'] .= ' invisible';\n                break;\n        }\n\n        if ($optionsAll['multiselect']) {\n            $attributes['multiple'] = 'multiple';\n            $name = $id . '[]';\n\n            if ($optionsAll['defaultValue'] !== '' && !is_array($optionsAll['defaultValue'])) {\n                $optionsAll['defaultValue'] = array($optionsAll['defaultValue']);\n            }\n\n            if ($optionsAll['showContextDependentFirstEntry'] && $optionsAll['property'] === self::FIELD_REQUIRED) {\n                if ($optionsAll['placeholder'] === '') {\n                    $optionsAll['placeholder'] = $gL10n->get('SYS_SELECT_FROM_LIST');\n                }\n\n                // reset the preferences so the logic for not multiselect will not be performed\n                $optionsAll['showContextDependentFirstEntry'] = false;\n            }\n        }\n\n        // set specific css class for this field\n        if ($optionsAll['class'] !== '') {\n            $attributes['class'] .= ' ' . $optionsAll['class'];\n        }\n\n        // now create html for the field\n        $this->openControlStructure($id, $label, $optionsAll['property'], $optionsAll['helpTextIdLabel'], $optionsAll['icon']);\n\n        $this->addSelect($name, $id, $attributes);\n\n        // add an additional first entry to the select box and set this as preselected if necessary\n        $defaultEntry = false;\n        if ($optionsAll['firstEntry'] !== '' || $optionsAll['showContextDependentFirstEntry']) {\n            if ($optionsAll['defaultValue'] === '') {\n                $defaultEntry = true;\n            }\n        }\n\n        if ($optionsAll['firstEntry'] !== '') {\n            if (is_array($optionsAll['firstEntry'])) {\n                $this->addOption($optionsAll['firstEntry'][0], $optionsAll['firstEntry'][1], null, $defaultEntry);\n            } else {\n                $this->addOption('', '- ' . $optionsAll['firstEntry'] . ' -', null, $defaultEntry);\n            }\n        } elseif ($optionsAll['showContextDependentFirstEntry']) {\n            if ($optionsAll['property'] === self::FIELD_REQUIRED) {\n                $this->addOption('', '- ' . $gL10n->get('SYS_PLEASE_CHOOSE') . ' -', null, $defaultEntry);\n            } else {\n                $this->addOption('', ' ', null, $defaultEntry);\n            }\n        } elseif (count($values) === 0) {\n            $this->addOption('', '');\n        }\n\n        $optionGroup = null;\n\n        foreach ($values as $key => $value) {\n            // create entry in html\n            $defaultEntry = false;\n\n            // if each array element is an array then create option groups\n            if (is_array($value)) {\n                // add optiongroup if necessary\n                if ($optionGroup !== $value[2]) {\n                    if ($optionGroup !== null) {\n                        $this->closeOptionGroup();\n                    }\n\n                    $this->addOptionGroup(Language::translateIfTranslationStrId($value[2]));\n                    $optionGroup = $value[2];\n                }\n\n                // if value is a translation string we must translate it\n                $value[1] = Language::translateIfTranslationStrId($value[1]);\n\n                // add option\n                if (!$optionsAll['multiselect'] && $optionsAll['defaultValue'] == $value[0]) {\n                    $defaultEntry = true;\n                }\n\n                if (is_array($optionsAll['valueAttributes'])) {\n                    $this->addOption((string) $value[0], $value[1], null, $defaultEntry, false, $optionsAll['valueAttributes'][$value[0]]);\n                } else {\n                    $this->addOption((string) $value[0], $value[1], null, $defaultEntry);\n                }\n            } else {\n                // if value is a translation string we must translate it\n                $value = Language::translateIfTranslationStrId($value);\n\n                // set the value attribute of the option tag\n                $optionValue = $key;\n\n                if ($optionsAll['arrayKeyIsNotValue']) {\n                    $optionValue = $value;\n                }\n\n                // array has only key and value then create a normal selectbox without optiongroups\n                if (!$optionsAll['multiselect'] && $optionsAll['defaultValue'] == $optionValue) {\n                    $defaultEntry = true;\n                }\n\n                if (is_array($optionsAll['valueAttributes'])) {\n                    $this->addOption((string) $optionValue, $value, null, $defaultEntry, false, $optionsAll['valueAttributes'][$key]);\n                } else {\n                    $this->addOption((string) $optionValue, $value, null, $defaultEntry);\n                }\n            }\n        }\n\n        if ($optionGroup !== null) {\n            $this->closeOptionGroup();\n        }\n\n        if ($optionsAll['multiselect'] || $optionsAll['search']) {\n            $maximumSelectionNumber = '';\n            $allowClear = 'false';\n\n            if ($optionsAll['maximumSelectionNumber'] > 0) {\n                $maximumSelectionNumber = ' maximumSelectionLength: ' . $optionsAll['maximumSelectionNumber'] . ', ';\n                $allowClear = 'true';\n            }\n\n            $javascriptCode = '\n                $(\"#' . $id . '\").select2({\n                    theme: \"bootstrap4\",\n                    allowClear: ' . $allowClear . ',\n                    ' . $maximumSelectionNumber . '\n                    placeholder: \"' . $optionsAll['placeholder'] . '\",\n                    language: \"' . $gL10n->getLanguageLibs() . '\"\n                });';\n\n            if (is_array($optionsAll['defaultValue']) && count($optionsAll['defaultValue']) > 0) {\n                // add default values to multi select\n                $htmlDefaultValues = '\"' . implode('\", \"', $optionsAll['defaultValue']) . '\"';\n\n                $javascriptCode .= ' $(\"#' . $id . '\").val([' . $htmlDefaultValues . ']).trigger(\"change.select2\");';\n            } elseif (count($values) === 1 && $optionsAll['property'] === self::FIELD_REQUIRED) {\n                // if there is only one entry and a required field than select this entry\n                $javascriptCode .= ' $(\"#' . $id . '\").val(\"'.$values[0][0].'\").trigger(\"change.select2\");';\n            }\n\n            // if a htmlPage object was set then add code to the page, otherwise to the current string\n            if ($this->htmlPage instanceof HtmlPage) {\n                $this->htmlPage->addCssFile(ADMIDIO_URL . FOLDER_LIBS_CLIENT . '/select2/css/select2.css');\n                $this->htmlPage->addCssFile(ADMIDIO_URL . FOLDER_LIBS_CLIENT . '/select2-bootstrap-theme/select2-bootstrap4.css');\n                $this->htmlPage->addJavascriptFile(ADMIDIO_URL . FOLDER_LIBS_CLIENT . '/select2/js/select2.js');\n                $this->htmlPage->addJavascriptFile(ADMIDIO_URL . FOLDER_LIBS_CLIENT . '/select2/js/i18n/' . $gL10n->getLanguageLibs() . '.js');\n            }\n            $this->addJavascriptCode($javascriptCode, true);\n        }\n\n        $this->closeSelect();\n\n        $this->closeControlStructure($optionsAll);\n    }\n\n    /**\n     * Add a new selectbox with a label to the form. The selectbox get their data from a sql statement.\n     * You can create any sql statement and this method should create a selectbox with the found data.\n     * The sql must contain at least two columns. The first column represents the value and the second\n     * column represents the label of each option of the selectbox. Optional you can add a third column\n     * to the sql statement. This column will be used as label for an optiongroup. Each time the value\n     * of the third column changed a new optiongroup will be created.\n     * @param string       $id       ID of the selectbox. This will also be the name of the selectbox.\n     * @param string       $label    The label of the selectbox.\n     * @param Database     $database Object of the class Database. This should be the default global object **$gDb**.\n     * @param array|string $sql      Any SQL statement that return 2 columns. The first column will be the internal value of the\n     *                               selectbox item and will be submitted with the form. The second column represents the\n     *                               displayed value of the item. Each row of the result will be a new selectbox entry.\n     * @param array        $options  (optional) An array with the following possible entries:\n     *                               - **property** : With this param you can set the following properties:\n     *                                 + **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                                 + **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                                 + **self::FIELD_DISABLED** : The field will be disabled and could not accept an input.\n     *                               - **defaultValue** : This is the value the selectbox shows when loaded. If **multiselect** is activated than\n     *                                 an array with all default values could be set.\n     *                               - **arrayKeyIsNotValue** : If set to **true** than the entry of the values-array will be used as\n     *                                 option value and not the key of the array\n     *                               - **showContextDependentFirstEntry** : If set to **true** the select box will get an additional first entry.\n     *                                 If self::FIELD_REQUIRED is set than \"Please choose\" will be the first entry otherwise\n     *                                 an empty entry will be added, so you must not select something.\n     *                               - **firstEntry** : Here you can define a string that should be shown as firstEntry and will be the\n     *                                 default value if no other value is set. This entry will only be added if **showContextDependentFirstEntry**\n     *                                 is set to false!\n     *                               - **multiselect** : If set to **true** than the jQuery plugin Select2 will be used to create a selectbox\n     *                                 where the user could select multiple values from the selectbox. Then an array will be\n     *                                 created within the $_POST array.\n     *                               - **maximumSelectionNumber** : If **multiselect** is enabled then you can configure the maximum number\n     *                                 of selections that could be done. If this limit is reached the user can't add another entry to the selectbox.\n     *                               - **valueAttributes**: An array which contain the same ids as the value array. The value of this array will be\n     *                                 onother array with the combination of attributes name and attributes value.\n     *                               - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                                 e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                                 the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                                 for the text you can add an array. The first entry must be the unique text id and the second\n     *                                 entry will be a parameter of the text id.\n     *                               - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                                 e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                                 If you need an additional parameter for the text you can add an array. The first entry must\n     *                                 be the unique text id and the second entry will be a parameter of the text id.\n     *                               - **alertWarning** : Add a bootstrap info alert box after the select box. The value of this option\n     *                                 will be the text of the alertbox\n     *                               - **icon** : An icon can be set. This will be placed in front of the label.\n     *                               - **class** : An additional css classname. The class **admSelectbox**\n     *                                 is set as default and need not set with this parameter.\n     * **Code examples**\n     * ```\n     * // create a selectbox with all profile fields of a specific category\n     * $sql = 'SELECT usf_id, usf_name FROM '.TBL_USER_FIELDS.' WHERE usf_cat_id = 4711'\n     * $form = new HtmlForm('simple-form', 'next_page.php');\n     * $form->addSelectBoxFromSql('admProfileFieldsBox', $gL10n->get('SYS_FIELDS'), $gDb, $sql, array('defaultValue' => $gL10n->get('SYS_SURNAME'), 'showContextDependentFirstEntry' => true));\n     * $form->show();\n     * ```\n     */\n    public function addSelectBoxFromSql($id, $label, Database $database, $sql, array $options = array())\n    {\n        $selectBoxEntries = array();\n\n        // execute the sql statement\n        if (is_array($sql)) {\n            $pdoStatement = $database->queryPrepared($sql['query'], $sql['params']);\n        } else {\n            // TODO deprecated: remove in Admidio 4.0\n            $pdoStatement = $database->query($sql);\n        }\n\n        // create array from sql result\n        while ($row = $pdoStatement->fetch(PDO::FETCH_NUM)) {\n            // if result has 3 columns then create an array in array\n            if (array_key_exists(2, $row)) {\n                // translate category name\n                $row[2] = Language::translateIfTranslationStrId($row[2]);\n\n                $selectBoxEntries[] = array($row[0], $row[1], $row[2]);\n            } else {\n                $selectBoxEntries[$row[0]] = $row[1];\n            }\n        }\n\n        // now call default method to create a selectbox\n        $this->addSelectBox($id, $label, $selectBoxEntries, $options);\n    }\n\n    /**\n     * Add a new selectbox with a label to the form. The selectbox could have\n     * different values and a default value could be set.\n     * @param string $id          ID of the selectbox. This will also be the name of the selectbox.\n     * @param string $label       The label of the selectbox.\n     * @param string $xmlFile     Serverpath to the xml file\n     * @param string $xmlValueTag Name of the xml tag that should contain the internal value of a selectbox entry\n     * @param string $xmlViewTag  Name of the xml tag that should contain the visual value of a selectbox entry\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **property** : With this param you can set the following properties:\n     *                          + **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                          + **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                          + **self::FIELD_DISABLED** : The field will be disabled and could not accept an input.\n     *                        - **defaultValue** : This is the value the selectbox shows when loaded. If **multiselect** is activated than\n     *                          an array with all default values could be set.\n     *                        - **arrayKeyIsNotValue** : If set to **true** than the entry of the values-array will be used as\n     *                          option value and not the key of the array\n     *                        - **showContextDependentFirstEntry** : If set to **true** the select box will get an additional first entry.\n     *                          If self::FIELD_REQUIRED is set than \"Please choose\" will be the first entry otherwise\n     *                          an empty entry will be added, so you must not select something.\n     *                        - **firstEntry** : Here you can define a string that should be shown as firstEntry and will be the\n     *                          default value if no other value is set. This entry will only be added if **showContextDependentFirstEntry**\n     *                          is set to false!\n     *                        - **multiselect** : If set to **true** than the jQuery plugin Select2 will be used to create a selectbox\n     *                          where the user could select multiple values from the selectbox. Then an array will be\n     *                          created within the $_POST array.\n     *                        - **maximumSelectionNumber** : If **multiselect** is enabled then you can configure the maximum number\n     *                          of selections that could be done. If this limit is reached the user can't add another entry to the selectbox.\n     *                        - **valueAttributes**: An array which contain the same ids as the value array. The value of this array will be\n     *                          onother array with the combination of attributes name and attributes value.\n     *                        - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                          the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                          for the text you can add an array. The first entry must be the unique text id and the second\n     *                          entry will be a parameter of the text id.\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **alertWarning** : Add a bootstrap info alert box after the select box. The value of this option\n     *                          will be the text of the alertbox\n     *                        - **icon** : An icon can be set. This will be placed in front of the label.\n     *                        - **class** : An additional css classname. The class **admSelectbox**\n     *                          is set as default and need not set with this parameter.\n     */\n    public function addSelectBoxFromXml($id, $label, $xmlFile, $xmlValueTag, $xmlViewTag, array $options = array())\n    {\n        $selectBoxEntries = array();\n\n        $xmlRootNode = new SimpleXMLElement($xmlFile, 0, true);\n\n        /**\n         * @var SimpleXMLElement $xmlChildNode\n         */\n        foreach ($xmlRootNode->children() as $xmlChildNode) {\n            $key   = '';\n            $value = '';\n\n            /**\n             * @var SimpleXMLElement $xmlChildChildNode\n             */\n            foreach ($xmlChildNode->children() as $xmlChildChildNode) {\n                if ($xmlChildChildNode->getName() === $xmlValueTag) {\n                    $key = (string) $xmlChildChildNode;\n                }\n                if ($xmlChildChildNode->getName() === $xmlViewTag) {\n                    $value = (string) $xmlChildChildNode;\n                }\n            }\n\n            $selectBoxEntries[$key] = $value;\n        }\n\n        // now call default method to create a selectbox\n        $this->addSelectBox($id, $label, $selectBoxEntries, $options);\n    }\n\n    /**\n     * Add a new selectbox with a label to the form. The selectbox get their data from table adm_categories.\n     * You must define the category type (roles, dates, links ...). All categories of this type will be shown.\n     * @param string   $id             ID of the selectbox. This will also be the name of the selectbox.\n     * @param string   $label          The label of the selectbox.\n     * @param Database $database       A Admidio database object that contains a valid connection to a database\n     * @param string   $categoryType   Type of category ('DAT', 'LNK', 'ROL', 'USF') that should be shown.\n     *                                 The type 'ROL' will ot list event role categories. Therefore, you need to set\n     *                                 the type 'ROL_EVENT'. It's not possible to show role categories together with\n     *                                 event categories.\n     * @param string   $selectBoxModus The selectbox could be shown in 2 different modus.\n     *                                 - **EDIT_CATEGORIES** : First entry will be \"Please choose\" and default category will be preselected.\n     *                                 - **FILTER_CATEGORIES** : First entry will be \"All\" and only categories with childs will be shown.\n     * @param array    $options        (optional) An array with the following possible entries:\n     *                                 - **property** : With this param you can set the following properties:\n     *                                   + **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                                   + **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                                   + **self::FIELD_DISABLED** : The field will be disabled and could not accept an input.\n     *                                 - **defaultValue** : ID of category that should be selected per default.\n     *.                                - **arrayKeyIsNotValue** : If set to **true** than the entry of the values-array will be used as\n     *                                   option value and not the key of the array\n     *                                 - **showSystemCategory** : Show user defined and system categories\n     *                                 - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                                   e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                                   the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                                   for the text you can add an array. The first entry must be the unique text id and the second\n     *                                   entry will be a parameter of the text id.\n     *                                 - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                                   e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                                   If you need an additional parameter for the text you can add an array. The first entry must\n     *                                   be the unique text id and the second entry will be a parameter of the text id.\n     *                                 - **alertWarning** : Add a bootstrap info alert box after the select box. The value of this option\n     *                                   will be the text of the alertbox\n     *                                 - **icon** : An icon can be set. This will be placed in front of the label.\n     *                                 - **class** : An additional css classname. The class **admSelectbox**\n     *                                   is set as default and need not set with this parameter.\n     */\n    public function addSelectBoxForCategories($id, $label, Database $database, $categoryType, $selectBoxModus, array $options = array())\n    {\n        global $gCurrentOrganization, $gCurrentUser, $gL10n;\n\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,\n            'property'                       => self::FIELD_DEFAULT,\n            'defaultValue'                   => '',\n            'arrayKeyIsNotValue'             => false,\n            'showContextDependentFirstEntry' => true,\n            'multiselect'                    => false,\n            'showSystemCategory'             => true,\n            'alertWarning'                   => '',\n            'helpTextIdLabel'                => '',\n            'helpTextIdInline'               => '',\n            'icon'                           => '',\n            'class'                          => ''\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        if ($selectBoxModus === self::SELECT_BOX_MODUS_EDIT && $gCurrentOrganization->countAllRecords() > 1) {\n            $optionsAll['alertWarning'] = $gL10n->get('SYS_ALL_ORGANIZATIONS_DESC', array(implode(', ', $gCurrentOrganization->getOrganizationsInRelationship(true, true, true))));\n\n            $this->addJavascriptCode(\n                '\n                $(\"#'.$id.'\").change(function() {\n                    if($(\"option:selected\", this).attr(\"data-global\") == 1) {\n                        $(\"#'.$id.'_alert\").show(\"slow\");\n                    } else {\n                        $(\"#'.$id.'_alert\").hide();\n                    }\n                });\n                $(\"#'.$id.'\").trigger(\"change\");',\n                true\n            );\n        }\n\n        $sqlTables     = '';\n        $sqlConditions = '';\n\n        // create sql conditions if category must have child elements\n        if ($selectBoxModus === self::SELECT_BOX_MODUS_FILTER) {\n            $catIdParams = array_merge(array(0), $gCurrentUser->getAllVisibleCategories($categoryType));\n            $optionsAll['showContextDependentFirstEntry'] = false;\n\n            switch ($categoryType) {\n                case 'DAT':\n                    $sqlTables = ' INNER JOIN ' . TBL_DATES . ' ON cat_id = dat_cat_id ';\n                    break;\n                case 'LNK':\n                    $sqlTables = ' INNER JOIN ' . TBL_LINKS . ' ON cat_id = lnk_cat_id ';\n                    break;\n                case 'ROL':\n                case 'ROL_EVENT':\n                    $sqlTables = ' INNER JOIN ' . TBL_ROLES . ' ON cat_id = rol_cat_id';\n                    break;\n            }\n        } else {\n            $catIdParams = array_merge(array(0), $gCurrentUser->getAllEditableCategories(($categoryType === 'ROL_EVENT' ? 'ROL' : $categoryType)));\n        }\n\n        switch ($categoryType) {\n            case 'ROL':\n                // don't show event categories\n                $sqlConditions .= ' AND cat_name_intern <> \\'EVENTS\\' ';\n                break;\n            case 'ROL_EVENT':\n                // only show event categories\n                $sqlConditions .= ' AND cat_name_intern = \\'EVENTS\\' ';\n                break;\n        }\n\n        if (!$optionsAll['showSystemCategory']) {\n            $sqlConditions .= ' AND cat_system = false ';\n        }\n\n        // within edit dialogs child organizations are not allowed to assign categories of all organizations\n        if ($selectBoxModus === self::SELECT_BOX_MODUS_EDIT && $gCurrentOrganization->isChildOrganization()) {\n            $sqlConditions .= ' AND cat_org_id = ? -- $gCurrentOrgId ';\n        } else {\n            $sqlConditions .= ' AND (  cat_org_id = ? -- $gCurrentOrgId\n                                    OR cat_org_id IS NULL ) ';\n        }\n\n        // the sql statement which returns all found categories\n        $sql = 'SELECT DISTINCT cat_id, cat_org_id, cat_uuid, cat_name, cat_default, cat_sequence\n                  FROM ' . TBL_CATEGORIES . '\n                       ' . $sqlTables . '\n                 WHERE cat_id IN (' . Database::getQmForValues($catIdParams) . ')\n                   AND cat_type = ? -- $categoryType\n                       ' . $sqlConditions . '\n              ORDER BY cat_sequence ASC';\n        $queryParams = array_merge(\n            $catIdParams,\n            array(\n                ($categoryType === 'ROL_EVENT' ? 'ROL' : $categoryType),\n                $GLOBALS['gCurrentOrgId']\n            )\n        );\n        $pdoStatement = $database->queryPrepared($sql, $queryParams);\n        $countCategories = $pdoStatement->rowCount();\n\n        // if no or only one category exist and in filter modus, than don't show category\n        if ($selectBoxModus === self::SELECT_BOX_MODUS_FILTER && ($countCategories === 0 || $countCategories === 1)) {\n            return;\n        }\n\n        $categoriesArray = array();\n        $optionsAll['valueAttributes'] = array();\n\n        if ($selectBoxModus === self::SELECT_BOX_MODUS_FILTER && $countCategories > 1) {\n            $categoriesArray[0] = $gL10n->get('SYS_ALL');\n            $optionsAll['valueAttributes'][0] = array('data-global' => 0);\n        }\n\n        while ($row = $pdoStatement->fetch()) {\n            // if several categories exist than select default category\n            if ($selectBoxModus === self::SELECT_BOX_MODUS_EDIT && $optionsAll['defaultValue'] === ''\n            && ($countCategories === 1 || $row['cat_default'] === 1)) {\n                $optionsAll['defaultValue'] = $row['cat_uuid'];\n            }\n\n            // if text is a translation-id then translate it\n            $categoriesArray[$row['cat_uuid']] = Language::translateIfTranslationStrId($row['cat_name']);\n\n            // add label that this category is visible to all organizations\n            if ($row['cat_org_id'] === null) {\n                if ($categoriesArray[$row['cat_uuid']] !== $gL10n->get('SYS_ALL_ORGANIZATIONS')) {\n                    $categoriesArray[$row['cat_uuid']] = $categoriesArray[$row['cat_uuid']] . ' (' . $gL10n->get('SYS_ALL_ORGANIZATIONS') . ')';\n                }\n                $optionsAll['valueAttributes'][$row['cat_uuid']] = array('data-global' => 1);\n            } else {\n                $optionsAll['valueAttributes'][$row['cat_uuid']] = array('data-global' => 0);\n            }\n        }\n\n        // now call method to create select box from array\n        $this->addSelectBox($id, $label, $categoriesArray, $optionsAll);\n    }\n\n    /**\n     * Add a new static control to the form. A static control is only a simple text instead of an input field.\n     * This could be used if the value should not be changed by the user.\n     * @param string $id      ID of the static control. This will also be the name of the static control.\n     * @param string $label   The label of the static control.\n     * @param string $value   A value of the static control. The control will be created with this value.\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                          the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                          for the text you can add an array. The first entry must be the unique text id and the second\n     *                          entry will be a parameter of the text id.\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **alertWarning** : Add a bootstrap info alert box after the select box. The value of this option\n     *                          will be the text of the alertbox\n     *                        - **icon** : An icon can be set. This will be placed in front of the label.\n     *                        - **class** : An additional css classname. The class **admSelectbox**\n     *                          is set as default and need not set with this parameter.\n     */\n    public function addStaticControl($id, $label, $value, array $options = array())\n    {\n        $attributes = array('class' => 'form-control-static');\n        ++$this->countElements;\n\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,'property' => '', 'helpTextIdLabel' => '', 'helpTextIdInline' => '', 'icon' => '', 'class' => '');\n        $optionsAll     = array_replace($optionsDefault, $options);\n\n        // set specific css class for this field\n        if ($optionsAll['class'] !== '') {\n            $attributes['class'] .= ' ' . $optionsAll['class'];\n        }\n\n        // now create html for the field\n        $this->openControlStructure('', $label, self::FIELD_DEFAULT, $optionsAll['helpTextIdLabel'], $optionsAll['icon']);\n        $this->addHtml('<p class=\"' . $attributes['class'] . '\">' . $value . '</p>');\n        $this->closeControlStructure($optionsAll);\n    }\n\n    /**\n     * Add a new button with a custom text to the form. This button could have\n     * an icon in front of the text. Different to addButton this method adds an\n     * additional **div** around the button and the type of the button is **submit**.\n     * @param string $id      ID of the button. This will also be the name of the button.\n     * @param string $text    Text of the button\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **icon** : Optional parameter. Path and filename of an icon.\n     *                          If set a icon will be shown in front of the text.\n     *                        - **link** : If set a javascript click event with a page load to this link\n     *                          will be attached to the button.\n     *                        - **class** : Optional an additional css classname. The class **admButton**\n     *                          is set as default and need not set with this parameter.\n     *                        - **type** : If set to true this button get the type **submit**. This will\n     *                          be the default.\n     */\n    public function addSubmitButton($id, $text, array $options = array())\n    {\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,'icon' => '', 'link' => '', 'class' => '', 'type' => 'submit');\n        $optionsAll     = array_replace($optionsDefault, $options);\n\n        // add default css classes\n        $optionsAll['class'] .= ' btn btn-primary';\n        if ($this->type !== 'navbar') {\n            $optionsAll['class'] .= '  admidio-margin-bottom';\n        }\n\n        // now add button to form\n        $this->addButton($id, $text, $optionsAll);\n\n        if (!$this->buttonGroupOpen) {\n            $this->addHtml('<div class=\"form-alert\" style=\"display: none;\">&nbsp;</div>');\n        }\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n    /**\n     * Close an open bootstrap btn-group\n     */\n    public function closeButtonGroup()\n    {\n        $this->buttonGroupOpen = false;\n        $this->addHtml('</div><div class=\"form-alert\" style=\"display: none;\">&nbsp;</div>');\n    }\n\n    /**\n     * Closes a field structure that was added with the method openControlStructure.\n     * @param array $options (optional) An array with the following possible entries:\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **alertWarning** : Add a bootstrap warning alert box after the select box. The value of this option\n     *                          will be the text of the alertbox\n     */\n\n    protected function closeControlStructure(array $options = array())\n    {\n        if ($options['property'] !== self::FIELD_HIDDEN) {\n            $parameters = array();\n            $helpTextId = $options['helpTextIdInline'];\n\n            if (is_array($options['helpTextIdInline'])) {\n                $parameters = $options['helpTextIdInline'][1];\n                $helpTextId = $options['helpTextIdInline'][0];\n            }\n\n            if ($helpTextId !== '') {\n                // if text is a translation-id then translate it\n                if (Language::isTranslationStringId($helpTextId)) {\n                    foreach ($parameters as &$parameter) {\n                        // parameters should be strings\n                        $parameter = (string)$parameter;\n\n                        // if parameter is a translation-id then translate it\n                        $parameter = Language::translateIfTranslationStrId($parameter);\n                    }\n                    unset($parameter);\n\n                    $helpText = $GLOBALS['gL10n']->get($helpTextId, $parameters);\n                } else {\n                    $helpText = $helpTextId;\n                }\n\n                $this->addHtml('<div class=\"help-block\">' . $helpText . '</div>');\n            }\n\n            // add block with warning alert\n            if (isset($options['alertWarning']) && $options['alertWarning'] !== '') {\n                $this->addHtml('<div class=\"alert alert-warning mt-3\" role=\"alert\">\n                <i class=\"fas fa-exclamation-triangle\"></i>' . $options['alertWarning'] . '\n            </div>');\n            }\n\n            if ($this->type === 'vertical' || $this->type === 'navbar') {\n                $this->addHtml('</div>');\n            } else {\n                $this->addHtml('</div></div>');\n            }\n        }\n    }\n\n    /**\n     * Close all html elements of a groupbox that was created before.\n     */\n\n    public function closeGroupBox()\n    {\n        $this->addHtml('</div></div>');\n    }\n\n    /**\n     * Add a small help icon to the form at the current element which shows the translated text of the\n     * text-id or an individual text on mouseover. The title will be note if it's a text-id or\n     * description if it's an individual text.\n     * @param string $string    A text that should be shown or a unique text id from the translation xml files\n     *                          that should be shown e.g. SYS_DATA_CATEGORY_GLOBAL.\n     * @param string $title     A text-id that represents the title of the help text. Default will be SYS_NOTE.\n     * @param array $parameter If you need an additional parameters for the text you can set this parameter values within an array.\n     * @return string Return a html snippet that contains a help icon with a link to a popup box that shows the message.\n     */\n    public static function getHelpTextIcon(string $string, string $title = 'SYS_NOTE', array $parameter = array())\n    {\n        global $gL10n;\n\n        $html = '';\n\n        if(strlen($string) > 0) {\n            if (Language::isTranslationStringId($string)) {\n                $text  = $gL10n->get($string, $parameter);\n            } else {\n                $text  = $string;\n            }\n\n            $html = '<i class=\"fas fa-info-circle admidio-info-icon\" data-toggle=\"popover\"\n            data-html=\"true\" data-trigger=\"hover click\" data-placement=\"auto\"\n            title=\"' . $gL10n->get($title) . '\" data-content=\"' . SecurityUtils::encodeHTML($text) . '\"></i>';\n        }\n        return $html;\n    }\n\n    public static function getHelpText($text)\n    {\n        $parameters = array();\n\n        if (is_array($text)) {\n            $parameters = $text[1];\n            $text = $text[0];\n        }\n\n        if ($text !== '') {\n            // if text is a translation-id then translate it\n            if (Language::isTranslationStringId($text)) {\n                foreach ($parameters as &$parameter) {\n                    // parameters should be strings\n                    $parameter = (string)$parameter;\n\n                    // if parameter is a translation-id then translate it\n                    $parameter = Language::translateIfTranslationStrId($parameter);\n                }\n                unset($parameter);\n\n                $text = $GLOBALS['gL10n']->get($text, $parameters);\n            }\n        }\n        return $text;\n    }\n\n    /**\n     * Open a bootstrap btn-group if the form need more than one button.\n     */\n\n\n    public function openButtonGroup()\n    {\n        $this->buttonGroupOpen = true;\n        $this->addHtml('<div class=\"btn-group\" role=\"group\">');\n    }\n\n    /**\n     * Creates a html structure for a form field. This structure contains the label and the div for the form element.\n     * After the form element is added the method closeControlStructure must be called.\n     * @param string $id         The id of this field structure.\n     * @param string $label      The label of the field. This string should already be translated.\n     * @param int    $property   (optional) With this param you can set the following properties:\n     *                           - **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                           - **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                           - **self::FIELD_DISABLED** : The field will be disabled and could not accept an input.\n     * @param string $helpTextId (optional) A unique text id from the translation xml files that should be shown e.g. SYS_DATA_CATEGORY_GLOBAL.\n     *                           If set a help icon will be shown where the user can see the text if he hovers over the icon.\n     *                           If you need an additional parameter for the text you can add an array. The first entry\n     *                           must be the unique text id and the second entry will be a parameter of the text id.\n     * @param string $icon       (optional) An icon can be set. This will be placed in front of the label.\n     * @param string $class      (optional) An additional css classname for the row. The class **admFieldRow**\n     *                           is set as default and need not set with this parameter.\n     */\n\n    protected function openControlStructure($id, $label, $property = self::FIELD_DEFAULT, $helpTextId = '', $icon = '', $class = '')\n    {\n        if ($property !== self::FIELD_HIDDEN) {\n            $cssClassRow = 'form-group';\n            $htmlIcon = '';\n            $htmlHelpIcon = '';\n            $htmlIdFor = '';\n\n            // set specific css class for this row\n            if ($class !== '') {\n                $cssClassRow .= ' ' . $class;\n            }\n\n            if ($this->type === 'default') {\n                $cssClassRow .= ' row';\n            }\n\n            // if necessary set css class for a mandatory element\n            if ($property === self::FIELD_REQUIRED && $this->showRequiredFields) {\n                $cssClassRow .= ' admidio-form-group-required';\n            }\n\n            if ($id !== '') {\n                $htmlIdFor = ' for=\"' . $id . '\"';\n                $this->addHtml('<div id=\"' . $id . '_group\" class=\"' . $cssClassRow . '\">');\n            } else {\n                $this->addHtml('<div class=\"' . $cssClassRow . '\">');\n            }\n\n            if ($icon !== '') {\n                // create html for icon\n                $htmlIcon = Image::getIconHtml($icon, $label);\n            }\n\n            if ($helpTextId !== '') {\n                $htmlHelpIcon = self::getHelpTextIcon($helpTextId);\n            }\n\n            // add label element\n            if ($this->type === 'vertical' || $this->type === 'navbar') {\n                if ($label !== '') {\n                    $this->addHtml('<label' . $htmlIdFor . '>' . $htmlIcon . $label . $htmlHelpIcon . '</label>');\n                }\n            } else {\n                if ($label !== '') {\n                    $this->addHtml(\n                        '<label' . $htmlIdFor . ' class=\"col-sm-3 control-label\">' . $htmlIcon . $label . $htmlHelpIcon . '</label>\n                    <div class=\"col-sm-9\">'\n                    );\n                } else {\n                    $this->addHtml('<div class=\"offset-sm-3 col-sm-9\">');\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a new groupbox to the form. This could be used to group some elements\n     * together. There is also the option to set a headline to this group box.\n     * @param string $id       Id the the groupbox.\n     * @param string $headline (optional) A headline that will be shown to the user.\n     * @param string $class    (optional) An additional css classname for the row. The class **admFieldRow**\n     *                         is set as default and need not set with this parameter.\n     */\n\n    public function openGroupBox($id, $headline = null, $class = '')\n    {\n        $this->addHtml('<div id=\"' . $id . '\" class=\"card admidio-field-group ' . $class . '\">');\n        // add headline to groupbox\n        if ($headline !== null) {\n            $this->addHtml('<div class=\"card-header\">' . $headline . '</div>');\n        }\n        $this->addHtml('<div class=\"card-body\">');\n    }\n\n\n    /**\n     * This method create the whole html code of the form. Call this method\n     * if you have finished your form layout. If mandatory fields were set than a notice\n     * which marker represents the mandatory will be shown before the form.\n     * @return string Return the html code of the form.\n     */\n    public function show()\n    {\n        global $gL10n;\n\n        // if there are no elements in the form then return nothing\n        if ($this->countElements === 0) {\n            return '';\n        }\n\n        $html = '';\n\n        // If required fields were set than a notice which marker represents the required fields will be shown.\n        if ($this->flagRequiredFields && $this->showRequiredFields) {\n            $html .= '<div class=\"admidio-form-required-notice\"><span>' . $gL10n->get('SYS_REQUIRED_INPUT') . '</span></div>';\n        }\n\n        // now get whole form html code\n        $html .= $this->getHtmlForm();\n\n        return $html;\n    }\n}\n", "<?php\n/**\n ***********************************************************************************************\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n ***********************************************************************************************\n */\n\n/**\n * Create html form elements\n *\n * This class creates html form elements.\n * Create an instance of an form element and set the input elements inline .\n * The class supports setting all form elements and allows you to configure all attributes programatically.\n * The parsed form object  is returned as string.\n *\n * **Code examples**\n * ```\n * // Example of an array with further attributes\n * $attrArray = array('class' => 'Classname');\n * ```\n *\n * **Code examples**\n * ```\n * // Example: Creating a form element\n *\n * // Get the Instance for a new form element and set an action attribute\n * $form = new HtmlFormBasic('test.php');\n * // XHTML determines that the input elements are inline elements of a block element\n * // so we need somthing like a div Block. In this example we use a fieldset\n * $form->addFieldSet();\n * // we can define a label for the input element with reference ID\n * $form->addLabel('Field_1', 'ID_1');\n * // set an input element like a text field. All valid types are supported\n * // you can define further attributes as associative array and set as parameter in correct position\n * $form->addSimpleInput('text', 'Input_1', 'ID_1', 'Value_1', $attrArray);\n * // add a linebreak\n * $form->linebreak();\n * // next label\n * $form->addLabel('Radio_1', 'ID_2');\n * // next element is a radio button\n * $form->addSimpleInput('radio', 'Radio_1', 'ID_2', 'Value_Radio');\n * // add a linebreak\n * $form->linebreak();\n * // Define a select box\n * $form->addSelect('Select_Name', 'ID_3', $attrArray);\n * // now we can also specify an optiongroup\n * $form->addOptionGroup('Group_1', 'ID_4', $attrArray);\n * // define options\n * $form->addOption('Option_Value_1', 'Option_Label_1');\n * $form->addOption('Option_Value_2', 'Option_Label_2');\n * $form->addOption('Option_Value_3', 'Option_Label_3');\n * // end of option group\n * $form->closeOptionGroup();\n * // end of select box\n * $form->closeSelect();\n * // add a linebreak\n * $form->linebreak();\n * // example of a text area\n * $form->addTextArea('Textarea', '4', '4', 'Input please ...', 'ID_5', $attrArray);\n * // close open fieldset block\n * $form->closeFieldSet();\n * // print the form\n * echo $form->getHtmlForm();\n * ```\n */\nclass HtmlFormBasic extends HtmlElement\n{\n    /**\n     * Constructor creates the element\n     *\n     * @param string $action Optional action attribute of the form\n     * @param string $id     Id of the form\n     * @param string $method Get/Post (Default \"get\" if not defined)\n     * @param string $event  Optional event handler\n     * @param string $script Optional script or function called from event handler\n     */\n    public function __construct($action = null, $id = null, $method = 'get', $event = null, $script = null)\n    {\n        parent::__construct('form');\n\n        // set action attribute\n        if ($action !== null) {\n            $this->addAttribute('action', $action);\n        }\n\n        if ($id !== null) {\n            $this->addAttribute('id', $id);\n        }\n\n        if ($method !== null) {\n            $this->addAttribute('method', $method);\n        }\n\n        if ($event !== null && $script !== null) {\n            $this->addAttribute($event, $script);\n        }\n    }\n\n    /**\n     * Add a fieldset.\n     * @param string $legend Description for optional legend element as string\n     * @param string $id     Optional ID\n     */\n    public function addFieldSet($legend = null, $id = null)\n    {\n        if ($id !== null) {\n            $this->addParentElement('fieldset');\n        } else {\n            $this->addParentElement('fieldset', 'id', $id);\n        }\n\n        if ($legend !== null) {\n            $this->addLegend($legend);\n        }\n    }\n\n    /**\n     * Add an input field with attribute properties.\n     * @param string               $type          Type of input field e.g. 'text'\n     * @param string               $name          Name of the input field\n     * @param string               $id            Optional ID for the input\n     * @param string               $value         Value of the field (Default: empty)\n     * @param array<string,string> $arrAttributes Further attributes as array with key/value pairs\n     */\n    public function addSimpleInput($type, $name, $id = null, $value = '', array $arrAttributes = [])\n    {\n        $data = [\n            'type' => $type,\n            'name' => $name,\n            'id' => $id ,\n            'value' => $value\n        ];\n        $data = array_merge($data, $arrAttributes);\n\n        $data = array_filter($data);\n\n        $this->addHtml($this->render('form.input.simple', [\"attributes\" => $data]));\n    }\n\n    /**\n     * Add a label to the input field.\n     * @param string $string Value of the label as string\n     * @param string $refId\n     * @param string $attribute\n     */\n    public function addLabel($string = '', $refId = null, $attribute = 'for')\n    {\n        $this->addElement('label');\n\n        if ($refId !== null) {\n            $this->addAttribute($attribute, $refId);\n        }\n        $this->addData($string);\n    }\n\n    /**\n     * Add a legend element in current fieldset.\n     * @param string $legend Data for the element as string\n     */\n    public function addLegend($legend)\n    {\n        $this->addElement('legend', '', '', $legend);\n    }\n\n    /**\n     * Add inline element into current division.\n     * @param string               $value         Option value\n     * @param string               $label         Label of the option\n     * @param string               $id            Optional Id of the option\n     * @param bool                 $selected      Mark as selected (Default: false)\n     * @param bool                 $disable       Disable option (optional)\n     * @param array<string,string> $arrAttributes Further attributes as array with key/value pairs\n     */\n    public function addOption($value, $label, $id = null, $selected = false, $disable = false, array $arrAttributes = null)\n    {\n        $this->addElement('option');\n        // replace quotes with html entities to prevent xss attacks\n        $this->addAttribute('value', htmlentities($value, ENT_QUOTES));\n\n        if ($id !== null) {\n            $this->addAttribute('id', $id);\n        }\n\n        if ($selected) {\n            $this->addAttribute('selected', 'selected');\n        }\n\n        if ($disable) {\n            $this->addAttribute('disabled', 'disabled');\n        }\n\n        // Check optional attributes in associative array and set all attributes\n        if ($arrAttributes !== null) {\n            $this->setAttributesFromArray($arrAttributes);\n        }\n\n        // add label\n        $this->addData($label);\n    }\n\n    /**\n     * Add an option group.\n     * @param string               $label         Label of the option group\n     * @param string               $id            Optional Id of the group\n     * @param bool                 $disable       Disable option group (Default: false)\n     * @param array<string,string> $arrAttributes Further attributes as array with key/value pairs\n     */\n    public function addOptionGroup($label, $id = null, $disable = false, array $arrAttributes = null)\n    {\n        $this->addParentElement('optgroup');\n\n        // set attributes\n        $this->addAttribute('label', $label);\n\n        if ($id !== null) {\n            $this->addAttribute('id', $id);\n        }\n\n        // Check optional attributes in associative array and set all attributes\n        if ($arrAttributes !== null) {\n            $this->setAttributesFromArray($arrAttributes);\n        }\n\n        if ($disable) {\n            $this->addAttribute('disabled', 'disabled');\n        }\n    }\n\n    /**\n     * Add an option group.\n     * @param string               $name          Name of the select\n     * @param string               $id            Optional Id of the select\n     * @param array<string,string> $arrAttributes Further attributes as array with key/value pairs\n     * @param bool                 $disable       Disable select (Default: false)\n     */\n    public function addSelect($name, $id = null, array $arrAttributes = null, $disable = false)\n    {\n        $this->addParentElement('select', 'name', $name);\n\n        // set attributes\n        if ($id !== null) {\n            $this->addAttribute('id', $id);\n        }\n\n        // Check optional attributes in associative array and set all attributes\n        if ($arrAttributes !== null) {\n            $this->setAttributesFromArray($arrAttributes);\n        }\n\n        if ($disable) {\n            $this->addAttribute('disabled', 'disabled');\n        }\n    }\n\n    /**\n     * Adds a button to the form.\n     * @param string $name  Name of the button\n     * @param string $type  Type attribute (Allowed: submit, reset, button (Default: button))\n     * @param string $value Value of the button\n     * @param string $id    Optional ID for the button\n     * @param string $link  If set a javascript click event with a page load to this link\n     *                      will be attached to the button.\n     */\n    public function addSimpleButton($name, $type, $value, $id = null, $link = null)\n    {\n        $this->addElement('button');\n\n        if ($id !== null) {\n            $this->addAttribute('id', $id);\n        }\n\n        // if link is set then add a onclick event\n        if ($link !== null) {\n            $this->addAttribute('onclick', 'self.location.href=\\'' . $link . '\\'');\n        }\n\n        $this->addAttribute('name', $name);\n        $this->addAttribute('type', $type);\n        $this->addData($value);\n    }\n\n    /**\n     * Add a text area.\n     * @param string               $name          Name of the text area\n     * @param int                  $rows          Number of rows\n     * @param int                  $cols          Number of cols\n     * @param string               $text          Text as content\n     * @param string               $id            Optional Id\n     * @param array<string,string> $arrAttributes Further attributes as array with key/value pairs\n     * @param bool                 $disable       Disable text area (Default: false)\n     */\n    public function addTextArea($name, $rows, $cols, $text = '', $id = null, array $arrAttributes = null, $disable = false)\n    {\n        $this->addElement('textarea');\n\n        // set attributes\n        $this->addAttribute('name', $name);\n        $this->addAttribute('rows', (string) $rows);\n        $this->addAttribute('cols', (string) $cols);\n\n        if ($id !== null) {\n            $this->addAttribute('id', $id);\n        }\n\n        // Check optional attributes in associative array and set all attributes\n        if ($arrAttributes !== null) {\n            $this->setAttributesFromArray($arrAttributes);\n        }\n\n        if ($disable) {\n            $this->addAttribute('disabled', 'disabled');\n        }\n\n        $this->addData($text);\n    }\n\n    /**\n     * @par Close current fieldset.\n     */\n    public function closeFieldSet()\n    {\n        $this->closeParentElement('fieldset');\n    }\n\n    /**\n     * @par Close current option group.\n     */\n    public function closeOptionGroup()\n    {\n        $this->closeParentElement('optgroup');\n    }\n\n    /**\n     * @par Close current select.\n     */\n    public function closeSelect()\n    {\n        $this->closeParentElement('select');\n    }\n\n    /**\n     * Get the full parsed html form\n     * @return string Returns the validated html form as string\n     */\n    public function getHtmlForm()\n    {\n        return $this->getHtmlElement();\n    }\n}\n"], "fixing_code": ["<?php\n/**\n ***********************************************************************************************\n * Create and edit announcements\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * ann_uuid  : UUID of the announcement that should be edited\n * headline  : Title of the announcement module. This will be shown in the whole module.\n *             (Default) SYS_ANNOUNCEMENTS\n * copy = true : The announcement of the ann_id will be copied and the base for this new announcement\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// check if the module is enabled and disallow access if it's disabled\nif ((int) $gSettingsManager->get('enable_announcements_module') === 0) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n// Initialize and check the parameters\n$getAnnUuid  = admFuncVariableIsValid($_GET, 'ann_uuid', 'string');\n$getHeadline = admFuncVariableIsValid($_GET, 'headline', 'string', array('defaultValue' => $gL10n->get('SYS_ANNOUNCEMENTS')));\n$getCopy     = admFuncVariableIsValid($_GET, 'copy', 'bool');\n\n// set headline of the script\nif ($getCopy) {\n    $headline = $gL10n->get('SYS_COPY_ENTRY');\n} elseif ($getAnnUuid !== '') {\n    $headline = $gL10n->get('SYS_EDIT_ENTRY');\n} else {\n    $headline = $gL10n->get('SYS_CREATE_ENTRY');\n}\n\ntry {\n    // add current url to navigation stack\n    $gNavigation->addUrl(CURRENT_URL, $headline);\n} catch (AdmException $e) {\n    $e->showHtml();\n}\n\n// Create announcements object\n$announcement = new TableAnnouncement($gDb);\n\nif ($getAnnUuid !== '') {\n    $announcement->readDataByUuid($getAnnUuid);\n\n    if ($getCopy === true) {\n        $getAnnUuid = '';\n    }\n\n    // check if the current user could edit this announcement\n    if (!$announcement->isEditable()) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n} else {\n    // check if the user has the right to edit at least one category\n    if (count($gCurrentUser->getAllEditableCategories('ANN')) === 0) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n}\n\nif (isset($_SESSION['announcements_request'])) {\n    // due to incorrect input the user has returned to this form\n    // now write the previously entered contents into the object\n    $announcement->setArray($_SESSION['announcements_request']);\n    unset($_SESSION['announcements_request']);\n}\n\n// create html page object\n$page = new HtmlPage('admidio-announcements-edit', $getHeadline . ' - ' . $headline);\n\n// show form\n$form = new HtmlForm('announcements_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/announcements/announcements_function.php', array('ann_uuid' => $getAnnUuid, 'headline' => $getHeadline, 'mode' => '1')), $page);\n$form->addInput(\n    'ann_headline',\n    $gL10n->get('SYS_TITLE'),\n    $announcement->getValue('ann_headline'),\n    array('maxLength' => 100, 'property' => HtmlForm::FIELD_REQUIRED)\n);\n$form->addSelectBoxForCategories(\n    'ann_cat_id',\n    $gL10n->get('SYS_CATEGORY'),\n    $gDb,\n    'ANN',\n    HtmlForm::SELECT_BOX_MODUS_EDIT,\n    array('property' => HtmlForm::FIELD_REQUIRED, 'defaultValue' => $announcement->getValue('cat_uuid'))\n);\n$form->addEditor(\n    'ann_description',\n    $gL10n->get('SYS_TEXT'),\n    $announcement->getValue('ann_description'),\n    array('property' => HtmlForm::FIELD_REQUIRED, 'height' => '400')\n);\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check'));\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $announcement->getValue('ann_usr_id_create'),\n    $announcement->getValue('ann_timestamp_create'),\n    (int) $announcement->getValue('ann_usr_id_change'),\n    $announcement->getValue('ann_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit categories\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n ******************************************************************************\n * Parameters:\n *\n * cat_uuid : Uuid of the category, that should be edited\n * type     : Type of categories that could be maintained\n *            ROL = Categories for roles\n *            LNK = Categories for weblinks\n *            ANN = Categories for announcements\n *            USF = Categories for profile fields\n *            DAT = Calendars for events\n ****************************************************************************/\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getCatUuid = admFuncVariableIsValid($_GET, 'cat_uuid', 'string');\n$getType  = admFuncVariableIsValid($_GET, 'type', 'string', array('requireValue' => true, 'validValues' => array('ROL', 'LNK', 'ANN', 'USF', 'DAT', 'AWA')));\n\n$roleViewSet = array(0);\n$roleEditSet = array(0);\n$addButtonText = $gL10n->get('SYS_CATEGORY');\n\n// set headline of the script\nif ($getCatUuid !== '') {\n    if ($getType === 'DAT') {\n        $headlineSuffix = $gL10n->get('SYS_EDIT_CALENDAR');\n    } else {\n        $headlineSuffix = $gL10n->get('SYS_EDIT_CATEGORY');\n    }\n} else {\n    if ($getType === 'DAT') {\n        $headlineSuffix = $gL10n->get('SYS_CREATE_CALENDAR');\n    } else {\n        $headlineSuffix = $gL10n->get('SYS_CREATE_CATEGORY');\n    }\n}\n\n// set text strings for the different modules\nswitch ($getType) {\n    case 'ANN':\n        $component = 'ANNOUNCEMENTS';\n        $headline = $gL10n->get('SYS_ANNOUNCEMENTS') . ' - ' . $headlineSuffix;\n        $rolesRightEditName = 'SYS_EDIT_ANNOUNCEMENTS';\n        $rolesRightsColumn  = 'rol_announcements';\n        $rolesRightsName    = 'SYS_RIGHT_ANNOUNCEMENTS';\n        break;\n\n    case 'DAT':\n        $component = 'DATES';\n        $headline = $gL10n->get('DAT_DATES') . ' - ' . $headlineSuffix;\n        $rolesRightEditName = 'DAT_EDIT_EVENTS';\n        $rolesRightsColumn  = 'rol_dates';\n        $rolesRightsName    = 'SYS_RIGHT_DATES';\n        $addButtonText      = $gL10n->get('DAT_CALENDAR');\n        break;\n\n    case 'LNK':\n        $component = 'LINKS';\n        $headline = $gL10n->get('SYS_WEBLINKS') . ' - ' . $headlineSuffix;\n        $rolesRightEditName = 'SYS_EDIT_WEBLINKS';\n        $rolesRightsColumn  = 'rol_weblinks';\n        $rolesRightsName    = 'SYS_RIGHT_WEBLINKS';\n        break;\n\n    case 'ROL':\n        $component = 'GROUPS-ROLES';\n        $headline = $gL10n->get('SYS_ROLES') . ' - ' . $headlineSuffix;\n        break;\n\n    case 'USF':\n        $component = 'CORE';\n        $headline = $gL10n->get('ORG_PROFILE_FIELDS') . ' - ' . $headlineSuffix;\n        $rolesRightEditName = 'PRO_EDIT_PROFILE_FIELDS';\n        $rolesRightsColumn  = 'rol_edit_user';\n        $rolesRightsName    = 'SYS_RIGHT_EDIT_USER';\n        break;\n\n    case 'AWA':\n        $component = 'CORE';\n        $headline = $gL10n->get('Awards') . ' - ' . $headlineSuffix;\n        $rolesRightEditName = 'Not used, leave empty';\n        $rolesRightsColumn  = 'rol_edit_user';\n        $rolesRightsName    = 'SYS_RIGHT_EDIT_USER';\n        break;\n\n    default:\n        $headline = $headlineSuffix;\n}\n\n// check if the current user has the right to\nif (!Component::isAdministrable($component)) {\n    $gMessage->show($gL10n->get('SYS_INVALID_PAGE_VIEW'));\n    // => EXIT\n}\n\n$gNavigation->addUrl(CURRENT_URL, $headlineSuffix);\n\n// create category object\n$category = new TableCategory($gDb);\n\nif (isset($_SESSION['categories_request'])) {\n    // By wrong input, the user returned to this form now write the previously entered contents into the object\n\n    $category->setArray($_SESSION['categories_request']);\n\n    // get the selected roles for visibility\n    if (isset($_SESSION['categories_request']['adm_categories_view_right'])) {\n        $roleViewSet = $_SESSION['categories_request']['adm_categories_view_right'];\n    }\n\n    if (isset($_SESSION['categories_request']['show_in_several_organizations'])) {\n        $category->setValue('cat_org_id', $gCurrentOrgId);\n    }\n    unset($_SESSION['categories_request']);\n} else {\n    if ($getCatUuid !== '') {\n        $category->readDataByUuid($getCatUuid);\n        $catId = (int) $category->getValue('cat_id');\n\n        // get assigned roles of this category\n        $categoryViewRolesObject = new RolesRights($gDb, 'category_view', $catId);\n        $roleViewSet = $categoryViewRolesObject->getRolesIds();\n        $categoryEditRolesObject = new RolesRights($gDb, 'category_edit', $catId);\n        $roleEditSet = $categoryEditRolesObject->getRolesIds();\n    } else {\n        // profile fields should be organization independent all other categories should be organization dependent as default\n        if ($getType !== 'USF') {\n            $category->setValue('cat_org_id', $gCurrentOrgId);\n        }\n    }\n}\n\n// check if this category is editable by the current user and current organization\nif (!$category->isEditable()) {\n    $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n    // => EXIT\n}\n\n// create html page object\n$page = new HtmlPage('admidio-categories-edit', $headline);\n\n$roleViewDescription = '';\nif ($getType === 'USF') {\n    $roleViewDescription = 'SYS_CATEGORY_PROFILE_FIELDS_VISIBILITY';\n}\n\nif ($getType !== 'ROL' && $gCurrentOrganization->countAllRecords() > 1) {\n    $page->addJavascript(\n        '\n        function showHideViewRightControl() {\n            if ($(\"#show_in_several_organizations\").is(\":checked\")) {\n                $(\"#adm_categories_view_right_group\").hide();\n            } else {\n                $(\"#adm_categories_view_right_group\").show(\"slow\");\n            }\n        }\n\n        $(\"#show_in_several_organizations\").click(function() {\n            showHideViewRightControl();\n        });\n\n        showHideViewRightControl();',\n        true\n    );\n}\n\n// show form\n$form = new HtmlForm('categories_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/categories/categories_function.php', array('cat_uuid' => $getCatUuid, 'type' => $getType, 'mode' => '1')), $page);\n\n// systemcategories should not be renamed\n$fieldPropertyCatName = HtmlForm::FIELD_REQUIRED;\nif ($category->getValue('cat_system') == 1) {\n    $fieldPropertyCatName = HtmlForm::FIELD_DISABLED;\n}\n\n$form->addInput(\n    'cat_name',\n    $gL10n->get('SYS_NAME'),\n    $category->getValue('cat_name'),\n    array('maxLength' => 100, 'property' => $fieldPropertyCatName)\n);\n\n// Roles have their own preferences for visibility, so only allow this for other types.\n// Until now we do not support visibility for categories that belong to several organizations,\n// roles could be assigned if only 1 organization exists.\nif ($getType !== 'ROL' && ((bool) $category->getValue('cat_system') === false || $gCurrentOrganization->countAllRecords() === 1)) {\n    // read all roles of the current organization\n    $sqlViewRoles = 'SELECT rol_id, rol_name, cat_name\n                       FROM '.TBL_ROLES.'\n                 INNER JOIN '.TBL_CATEGORIES.'\n                         ON cat_id = rol_cat_id\n                      WHERE rol_valid  = true\n                        AND rol_system = false\n                        AND cat_name_intern <> \\'EVENTS\\'\n                        AND cat_org_id = ? -- $gCurrentOrgId\n                   ORDER BY cat_sequence, rol_name';\n    $sqlDataView = array(\n        'query'  => $sqlViewRoles,\n        'params' => array($gCurrentOrgId)\n    );\n\n    // if no roles are assigned then set \"all users\" as default\n    if (count($roleViewSet) === 0) {\n        $roleViewSet[] = 0;\n    }\n\n    // if no roles are assigned then set nothing as default\n    if (count($roleEditSet) === 0) {\n        $roleEditSet[] = '';\n    }\n\n    // show selectbox with all assigned roles\n    $form->addSelectBoxFromSql(\n        'adm_categories_view_right',\n        $gL10n->get('SYS_VISIBLE_FOR'),\n        $gDb,\n        $sqlDataView,\n        array(\n            'property'     => HtmlForm::FIELD_REQUIRED,\n            'defaultValue' => $roleViewSet,\n            'multiselect'  => true,\n            'firstEntry'   => array('0', $gL10n->get('SYS_ALL').' ('.$gL10n->get('SYS_ALSO_VISITORS').')', null),\n            'helpTextIdInline' => $roleViewDescription\n        )\n    );\n\n    // until now we don't use edit rights for profile fields\n    if ($getType !== 'USF') {\n        $form->addSelectBoxFromSql(\n            'adm_categories_edit_right',\n            $gL10n->get($rolesRightEditName),\n            $gDb,\n            $sqlDataView,\n            array(\n                'defaultValue' => $roleEditSet,\n                'multiselect'  => true,\n                'placeholder'  => $gL10n->get('SYS_NO_ADDITIONAL_PERMISSIONS_SET')\n            )\n        );\n    }\n}\n\n// if current organization has a parent organization or is child organizations then show option to set this category to global\nif ($getType !== 'ROL' && $category->getValue('cat_system') == 0 && $gCurrentOrganization->countAllRecords() > 1) {\n    if ($gCurrentOrganization->isChildOrganization()) {\n        $fieldProperty   = HtmlForm::FIELD_DISABLED;\n        $helpTextIdLabel = 'SYS_ONLY_SET_BY_MOTHER_ORGANIZATION';\n    } else {\n        // show all organizations where this organization is mother or child organization\n        $organizations = implode(', ', $gCurrentOrganization->getOrganizationsInRelationship(true, true, true));\n\n        $fieldProperty = HtmlForm::FIELD_DEFAULT;\n        if ($getType === 'USF') {\n            $helpTextIdLabel = $gL10n->get('SYS_CATEGORY_VISIBLE_ALL_ORGA', array($organizations));\n        } else {\n            $helpTextIdLabel = $gL10n->get('SYS_DATA_CATEGORY_GLOBAL', array($organizations));\n        }\n    }\n\n    // read all administrator roles\n\n    $sqlAdminRoles = 'SELECT rol_name\n                        FROM '.TBL_ROLES.'\n                  INNER JOIN '.TBL_CATEGORIES.'\n                          ON cat_id = rol_cat_id\n                       WHERE rol_valid    = true\n                         AND '. $rolesRightsColumn .' = true\n                         AND cat_org_id   = ? -- $gCurrentOrgId\n                    ORDER BY cat_sequence, rol_name';\n    $statementAdminRoles = $gDb->queryPrepared($sqlAdminRoles, array($gCurrentOrgId));\n\n    $adminRoles = array();\n    while ($roleName = $statementAdminRoles->fetchColumn()) {\n        $adminRoles[] = $roleName;\n    }\n\n    $form->addStaticControl(\n        'adm_administrators',\n        $gL10n->get('SYS_ADMINISTRATORS'),\n        implode(', ', $adminRoles),\n        array('helpTextIdLabel' => $gL10n->get('SYS_CATEGORIES_ADMINISTRATORS_DESC', array($rolesRightsName)))\n    );\n\n    $checked = false;\n    if ((int) $category->getValue('cat_org_id') === 0) {\n        $checked = true;\n    }\n\n    $form->addCheckbox(\n        'show_in_several_organizations',\n        $gL10n->get('SYS_DATA_MULTI_ORGA'),\n        $checked,\n        array('property' => $fieldProperty, 'helpTextIdLabel' => $helpTextIdLabel)\n    );\n}\n\n$form->addCheckbox(\n    'cat_default',\n    $gL10n->get('SYS_DEFAULT_VAR', array($addButtonText)),\n    (bool) $category->getValue('cat_default'),\n    array('icon' => 'fa-star')\n);\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check', 'class' => ' offset-sm-3'));\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $category->getValue('cat_usr_id_create'),\n    $category->getValue('cat_timestamp_create'),\n    (int) $category->getValue('cat_usr_id_change'),\n    $category->getValue('cat_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit dates\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * dat_uuid - UUID of the event that should be edited\n * headline - Headline for the event\n *            (Default) Events\n * copy : true - The event of the dat_id will be copied and the base for this new event\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getDateUuid = admFuncVariableIsValid($_GET, 'dat_uuid', 'string');\n$getHeadline = admFuncVariableIsValid($_GET, 'headline', 'string', array('defaultValue' => $gL10n->get('DAT_DATES')));\n$getCopy     = admFuncVariableIsValid($_GET, 'copy', 'bool');\n\n// check if module is active\nif ((int) $gSettingsManager->get('enable_dates_module') === 0) {\n    // Module is not active\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n// Initialize local parameters\n$dateParticipationPossible = false;\n$dateCurrentUserAssigned   = false;\n$roleViewSet               = array();\n$flagDateRightListView     = false;\n$flagDateRightSendMail     = false;\n\n// set headline of the script\nif ($getCopy) {\n    $headline = $gL10n->get('SYS_COPY_VAR', array($getHeadline));\n} elseif ($getDateUuid !== '') {\n    $headline = $gL10n->get('SYS_EDIT_VAR', array($getHeadline));\n} else {\n    $headline = $gL10n->get('SYS_CREATE_VAR', array($getHeadline));\n}\n\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\n// create date object\n$date = new TableDate($gDb);\n\nif (isset($_SESSION['dates_request'])) {\n    // By wrong input, the user returned to this form now write the previously entered contents into the object\n\n    // first set date and time field to a datetime within system format and add this to date class\n    $_SESSION['dates_request']['dat_begin']    = $_SESSION['dates_request']['date_from'].' '.$_SESSION['dates_request']['date_from_time'];\n    $_SESSION['dates_request']['dat_end']      = $_SESSION['dates_request']['date_to'].' '.$_SESSION['dates_request']['date_to_time'];\n    if ((string) $_SESSION['dates_request']['date_deadline'] !== '') {\n        $_SESSION['dates_request']['dat_deadline'] = $_SESSION['dates_request']['date_deadline'] . ' ' . $_SESSION['dates_request']['date_deadline_time'];\n    }\n    $date->setArray($_SESSION['dates_request']);\n\n    // get the selected roles for visibility\n    if (isset($_SESSION['dates_request']['adm_event_participation_right']) && $_SESSION['dates_request']['adm_event_participation_right'] !== '') {\n        $roleViewSet = $_SESSION['dates_request']['adm_event_participation_right'];\n    }\n\n    if (array_key_exists('date_participation_possible', $_SESSION['dates_request'])) {\n        $dateParticipationPossible = (bool) $_SESSION['dates_request']['date_participation_possible'];\n    }\n    if (array_key_exists('date_current_user_assigned', $_SESSION['dates_request'])) {\n        $dateCurrentUserAssigned = (bool) $_SESSION['dates_request']['date_current_user_assigned'];\n    }\n    if (array_key_exists('date_right_list_view', $_SESSION['dates_request'])) {\n        $flagDateRightListView = (bool) $_SESSION['dates_request']['date_right_list_view'];\n    }\n    if (array_key_exists('date_right_send_mail', $_SESSION['dates_request'])) {\n        $flagDateRightSendMail = (bool) $_SESSION['dates_request']['date_right_send_mail'];\n    }\n\n    unset($_SESSION['dates_request']);\n} else {\n    if ($getDateUuid !== '') {\n        // read data from database\n        $date->readDataByUuid($getDateUuid);\n\n        // get assigned roles of this event\n        $eventParticipationRolesObject = new RolesRights($gDb, 'event_participation', (int) $date->getValue('dat_id'));\n        $roleViewSet = $eventParticipationRolesObject->getRolesIds();\n\n        // check if the current user could edit this event\n        if (!$date->isEditable()) {\n            $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n            // => EXIT\n        }\n\n        // check if a participation to this event is possible\n        if ((int) $date->getValue('dat_rol_id') > 0) {\n            $dateParticipationPossible = true;\n            $role = new TableRoles($gDb, (int) $date->getValue('dat_rol_id'));\n            $flagDateRightListView = (bool) $role->getValue('rol_view_memberships');\n            $flagDateRightSendMail = (bool) $role->getValue('rol_mail_this_role');\n        }\n\n        // check if current user is assigned to this date\n        $dateCurrentUserAssigned = $gCurrentUser->isLeaderOfRole((int) $date->getValue('dat_rol_id'));\n    } else {\n        // check if the user has the right to edit at least one category\n        if (count($gCurrentUser->getAllEditableCategories('DAT')) === 0) {\n            $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n            // => EXIT\n        }\n\n        // For new events preset date with current date\n        $now = new DateTime();\n        $oneHourOffset = new DateInterval('PT1H');\n        $twoHourOffset = new DateInterval('PT2H');\n        $beginDate = $now->add($oneHourOffset)->format('Y-m-d H:00:00');\n        $endDate   = $now->add($twoHourOffset)->format('Y-m-d H:00:00');\n        $date->setValue('dat_begin', $beginDate);\n        $date->setValue('dat_end', $endDate);\n    }\n}\n\n// create html page object\n$page = new HtmlPage('admidio-events-edit', $headline);\n\n$page->addJavascriptFile(ADMIDIO_URL . '/adm_program/system/js/date-functions.js');\n$page->addJavascript('\n    /**\n     * Function hides/show date and time fields\n     */\n    function setAllDay() {\n        if ($(\"#dat_all_day:checked\").val() !== undefined) {\n            $(\"#date_from_time\").hide();\n            $(\"#date_to_time\").hide();\n        } else {\n            $(\"#date_from_time\").show(\"slow\");\n            $(\"#date_to_time\").show(\"slow\");\n        }\n    }\n\n    function setDateParticipation() {\n        if ($(\"#date_participation_possible:checked\").val() !== undefined) {\n            $(\"#adm_event_participation_right_group\").addClass(\"admidio-form-group-required\");\n            $(\"#adm_event_participation_right_group\").show(\"slow\");\n            $(\"#date_current_user_assigned_group\").show(\"slow\");\n            $(\"#dat_max_members_group\").show(\"slow\");\n            $(\"#date_right_list_view_group\").show(\"slow\");\n            $(\"#date_right_send_mail_group\").show(\"slow\");\n            $(\"#dat_allow_comments_group\").show(\"slow\");\n            $(\"#dat_additional_guests_group\").show(\"slow\");\n            $(\"#date_deadline_group\").show(\"slow\");\n        } else {\n            $(\"#adm_event_participation_right_group\").hide();\n            $(\"#date_current_user_assigned_group\").hide();\n            $(\"#dat_max_members_group\").hide();\n            $(\"#date_right_list_view_group\").hide();\n            $(\"#date_right_send_mail_group\").hide();\n            $(\"#dat_allow_comments_group\").hide();\n            $(\"#dat_additional_guests_group\").hide();\n            $(\"#date_deadline_group\").hide(\"slow\");\n        }\n    }\n\n    function setLocationCountry() {\n        if ($(\"#dat_location\").val().length > 0) {\n            $(\"#dat_country_group\").show();\n            $(\"#dat_country\").focus();\n        } else {\n            $(\"#dat_country_group\").hide();\n        }\n    }\n');\n\n$page->addJavascript(\n    '\n    var dateParticipationPossible = ' . ($dateParticipationPossible ? 1 : 0) .';\n\n    setAllDay();\n    setDateParticipation();\n    setLocationCountry();\n\n    $(\"#date_participation_possible\").click(function() {\n        setDateParticipation();\n    });\n    $(\"#dat_all_day\").click(function() {\n        setAllDay();\n    });\n    $(\"#dat_location\").change(function() {\n        setLocationCountry();\n    });\n    $(\"#date_from\").change(function() {\n        if ($(\"#date_from\").val() > $(\"#date_to\").val()) {\n            $(\"#date_to\").val($(\"#date_from\").val());\n        }\n    });\n\n    // if date participation should be removed than ask user\n    $(\"#btn_save\").click(function(event) {\n        event.preventDefault();\n\n        if (dateParticipationPossible == 1 && $(\"#date_participation_possible\").is(\":checked\") === false) {\n            var msg_result = confirm(\"'.$gL10n->get('DAT_REMOVE_APPLICATION').'\");\n            if (msg_result) {\n                $(\"#dates_edit_form\").submit();\n            }\n        } else {\n            $(\"#dates_edit_form\").submit();\n        }\n    });',\n    true\n);\n\n// show form\n$form = new HtmlForm('dates_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/dates/dates_function.php', array('dat_uuid' => $getDateUuid, 'mode' => 1, 'copy' => $getCopy)), $page);\n\n$form->openGroupBox('gb_title_location', $gL10n->get('SYS_TITLE').' & '.$gL10n->get('DAT_LOCATION'));\n$form->addInput(\n    'dat_headline',\n    $gL10n->get('SYS_TITLE'),\n    $date->getValue('dat_headline'),\n    array('maxLength' => 100, 'property' => HtmlForm::FIELD_REQUIRED)\n);\n\n// if a map link should be shown in the event then show help text and a field where the user could choose the country\nif ($gSettingsManager->getBool('dates_show_map_link')) {\n    $form->addInput(\n        'dat_location',\n        $gL10n->get('DAT_LOCATION'),\n        $date->getValue('dat_location'),\n        array('maxLength' => 100, 'helpTextIdLabel' => 'DAT_LOCATION_LINK')\n    );\n\n    if (!$date->getValue('dat_country') && $getDateUuid === '') {\n        $date->setValue('dat_country', $gSettingsManager->getString('default_country'));\n    }\n    $form->addSelectBox(\n        'dat_country',\n        $gL10n->get('SYS_COUNTRY'),\n        $gL10n->getCountries(),\n        array('defaultValue' => $date->getValue('dat_country', 'database'))\n    );\n} else {\n    $form->addInput(\n        'dat_location',\n        $gL10n->get('DAT_LOCATION'),\n        $date->getValue('dat_location'),\n        array('maxLength' => 100)\n    );\n}\n\n// if room selection is activated then show a select box with all rooms\nif ($gSettingsManager->getBool('dates_show_rooms')) {\n    if (DB_ENGINE === Database::PDO_ENGINE_MYSQL) {\n        $sql = 'SELECT room_id, CONCAT(room_name, \\' (\\', room_capacity, \\'+\\', IFNULL(room_overhang, \\'0\\'), \\')\\')\n                  FROM '.TBL_ROOMS.'\n              ORDER BY room_name';\n    } else {\n        $sql = 'SELECT room_id, room_name || \\' (\\' || room_capacity || \\'+\\' || COALESCE(room_overhang, \\'0\\') || \\')\\'\n                  FROM '.TBL_ROOMS.'\n              ORDER BY room_name';\n    }\n    $form->addSelectBoxFromSql(\n        'dat_room_id',\n        $gL10n->get('SYS_ROOM'),\n        $gDb,\n        $sql,\n        array('defaultValue' => (int) $date->getValue('dat_room_id'))\n    );\n}\n$form->closeGroupBox();\n\n$form->openGroupBox('gb_period_calendar', $gL10n->get('SYS_PERIOD').' & '.$gL10n->get('DAT_CALENDAR'));\n$form->addCheckbox('dat_all_day', $gL10n->get('DAT_ALL_DAY'), (bool) $date->getValue('dat_all_day'));\n$form->addInput(\n    'date_from',\n    $gL10n->get('SYS_START'),\n    $date->getValue('dat_begin', $gSettingsManager->getString('system_date').' '.$gSettingsManager->getString('system_time')),\n    array('type' => 'datetime', 'property' => HtmlForm::FIELD_REQUIRED)\n);\n$form->addInput(\n    'date_to',\n    $gL10n->get('SYS_END'),\n    $date->getValue('dat_end', $gSettingsManager->getString('system_date').' '.$gSettingsManager->getString('system_time')),\n    array('type' => 'datetime', 'property' => HtmlForm::FIELD_REQUIRED)\n);\n$form->addSelectBoxForCategories(\n    'dat_cat_id',\n    $gL10n->get('DAT_CALENDAR'),\n    $gDb,\n    'DAT',\n    HtmlForm::SELECT_BOX_MODUS_EDIT,\n    array('property' => HtmlForm::FIELD_REQUIRED, 'defaultValue' => $date->getValue('cat_uuid'))\n);\n$form->closeGroupBox();\n\n$form->openGroupBox('gb_visibility_registration', $gL10n->get('DAT_VISIBILITY').' & '.$gL10n->get('SYS_REGISTRATION'));\n$form->addCheckbox('dat_highlight', $gL10n->get('DAT_HIGHLIGHT_DATE'), (bool) $date->getValue('dat_highlight'));\n$form->addCheckbox(\n    'date_participation_possible',\n    $gL10n->get('DAT_REGISTRATION_POSSIBLE'),\n    $dateParticipationPossible,\n    array('helpTextIdLabel' => 'DAT_LOGIN_POSSIBLE')\n);\n\n// add a multi select box to the form where the user can choose all roles whose members could participate in this event\n// read all roles of the current organization\n$sqlViewRoles = 'SELECT rol_id, rol_name, cat_name\n                   FROM '.TBL_ROLES.'\n             INNER JOIN '.TBL_CATEGORIES.'\n                     ON cat_id = rol_cat_id\n                  WHERE rol_valid  = true\n                    AND rol_system = false\n                    AND cat_name_intern <> \\'EVENTS\\'\n                    AND cat_org_id = ? -- $gCurrentOrgId\n               ORDER BY cat_sequence, rol_name';\n$sqlDataView = array(\n    'query'  => $sqlViewRoles,\n    'params' => array($gCurrentOrgId)\n);\n\n// show select box with all assigned roles\n$form->addSelectBoxFromSql(\n    'adm_event_participation_right',\n    $gL10n->get('DAT_REGISTRATION_POSSIBLE_FOR'),\n    $gDb,\n    $sqlDataView,\n    array(\n        'defaultValue' => $roleViewSet,\n        'multiselect'  => true\n    )\n);\n$form->addCheckbox(\n    'date_current_user_assigned',\n    $gL10n->get('DAT_PARTICIPATE_AT_DATE'),\n    $dateCurrentUserAssigned,\n    array('helpTextIdLabel' => 'DAT_PARTICIPATE_AT_DATE_DESC')\n);\n$form->addCheckbox(\n    'dat_allow_comments',\n    $gL10n->get('DAT_ALLOW_USER_COMMENTS'),\n    (bool) $date->getValue('dat_allow_comments'),\n    array('helpTextIdLabel' => 'DAT_ALLOW_USER_COMMENTS_DESC')\n);\n$form->addCheckbox(\n    'dat_additional_guests',\n    $gL10n->get('DAT_ALLOW_ADDITIONAL_GUESTS'),\n    (bool) $date->getValue('dat_additional_guests'),\n    array('helpTextIdLabel' => 'DAT_ALLOW_ADDITIONAL_GUESTS_DESC')\n);\n$form->addInput(\n    'dat_max_members',\n    $gL10n->get('DAT_PARTICIPANTS_LIMIT'),\n    (int) $date->getValue('dat_max_members'),\n    array('type' => 'number', 'minNumber' => 0, 'maxNumber' => 99999, 'step' => 1, 'helpTextIdLabel' => 'DAT_MAX_MEMBERS')\n);\n$form->addInput(\n    'date_deadline',\n    $gL10n->get('DAT_DEADLINE'),\n    $date->getValue('dat_deadline', $gSettingsManager->getString('system_date').' '.$gSettingsManager->getString('system_time')),\n    array('type' => 'datetime', 'helpTextIdLabel' => 'SYS_EVENT_DEADLINE_DESC')\n);\n$form->addCheckbox('date_right_list_view', $gL10n->get('DAT_RIGHT_VIEW_PARTICIPANTS'), $flagDateRightListView);\n$form->addCheckbox('date_right_send_mail', $gL10n->get('DAT_RIGHT_MAIL_PARTICIPANTS'), $flagDateRightSendMail);\n$form->closeGroupBox();\n\n$form->openGroupBox('gb_description', $gL10n->get('SYS_DESCRIPTION'), 'admidio-panel-editor');\n$form->addEditor('dat_description', '', $date->getValue('dat_description'));\n$form->closeGroupBox();\n\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check'));\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $date->getValue('dat_usr_id_create'),\n    $date->getValue('dat_timestamp_create'),\n    (int) $date->getValue('dat_usr_id_change'),\n    $date->getValue('dat_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Rename a file or a folder of download module\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * folder_uuid :  UUID of the folder that should be renamed\n * file_uuid   :  UUID of the file that should be renamed\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getFolderUuid = admFuncVariableIsValid($_GET, 'folder_uuid', 'string');\n$getFileUuid   = admFuncVariableIsValid($_GET, 'file_uuid', 'string');\n\n// set headline of the script\nif ($getFileUuid !== '') {\n    $headline = $gL10n->get('SYS_EDIT_FILE');\n} else {\n    $headline = $gL10n->get('SYS_EDIT_FOLDER');\n}\n\n// check if the module is enabled and disallow access if it's disabled\nif (!$gSettingsManager->getBool('documents_files_enable_module')) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\nif (isset($_SESSION['documents_files_request'])) {\n    $formValues = $_SESSION['documents_files_request'];\n    unset($_SESSION['documents_files_request']);\n} else {\n    $formValues['new_name'] = null;\n    $formValues['new_description'] = null;\n}\n\ntry {\n    // check the rights of the current folder\n    // user must be administrator or must have the right to upload files\n    $targetFolder = new TableFolder($gDb);\n    $targetFolder->getFolderForDownload($getFolderUuid);\n} catch (AdmException $e) {\n    $e->showHtml();\n    // => EXIT\n}\n\nif (!$targetFolder->hasUploadRight()) {\n    $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n    // => EXIT\n}\n\n$originalName    = '';\n$fileType        = '';\n$createUserId    = 0;\n$createTimestamp = '';\n\ntry {\n    if ($getFileUuid !== '') {\n        // get recordset of current file from database\n        $file = new TableFile($gDb);\n        $file->getFileForDownload($getFileUuid);\n\n        $originalName    = pathinfo($file->getValue('fil_name'), PATHINFO_FILENAME);\n        $fileType        = pathinfo($file->getValue('fil_name'), PATHINFO_EXTENSION);\n        $createUserId    = (int) $file->getValue('fil_usr_id');\n        $createTimestamp = $file->getValue('fil_timestamp');\n\n        if ($formValues['new_name'] === null) {\n            $formValues['new_name'] = $originalName;\n        }\n\n        if ($formValues['new_description'] === null) {\n            $formValues['new_description'] = $file->getValue('fil_description');\n        }\n    } else {\n        // main folder should not be renamed\n        if ($targetFolder->getValue('fol_fol_id_parent') === '') {\n            $gMessage->show($gL10n->get('SYS_INVALID_PAGE_VIEW'));\n            // => EXIT\n        }\n\n        // read folder data to rename the folder\n        $originalName    = $targetFolder->getValue('fol_name');\n        $createUserId    = (int) $targetFolder->getValue('fol_usr_id');\n        $createTimestamp = $targetFolder->getValue('fol_timestamp');\n\n        if ($formValues['new_name'] == null) {\n            $formValues['new_name'] = $originalName;\n        }\n\n        if ($formValues['new_description'] == null) {\n            $formValues['new_description'] = $targetFolder->getValue('fol_description');\n        }\n    }\n} catch (AdmException $e) {\n    $e->showHtml();\n    // => EXIT\n}\n\n// create html page object\n$page = new HtmlPage('admidio-documents-files-rename', $headline);\n\n// create html form\n$form = new HtmlForm('edit_download_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/documents-files/documents_files_function.php', array('mode' => '4', 'folder_uuid' => $getFolderUuid, 'file_uuid' => $getFileUuid)), $page);\nif ($getFileUuid !== '') {\n    $form->addInput(\n        'file_type',\n        $gL10n->get('SYS_FILE_TYPE'),\n        $fileType,\n        array('property' => HtmlForm::FIELD_DISABLED, 'class' => 'form-control-small')\n    );\n}\n$form->addInput(\n    'previous_name',\n    $gL10n->get('SYS_PREVIOUS_NAME'),\n    $originalName,\n    array('property' => HtmlForm::FIELD_DISABLED)\n);\n$form->addInput(\n    'new_name',\n    $gL10n->get('SYS_NEW_NAME'),\n    $formValues['new_name'],\n    array('maxLength' => 255, 'property' => HtmlForm::FIELD_REQUIRED, 'helpTextIdLabel' => 'SYS_FILE_NAME_RULES')\n);\n$form->addMultilineTextInput(\n    'new_description',\n    $gL10n->get('SYS_DESCRIPTION'),\n    $formValues['new_description'],\n    4,\n    array('maxLength' => 255)\n);\n$form->addSubmitButton(\n    'btn_rename',\n    $gL10n->get('SYS_SAVE'),\n    array('icon' => 'fa-check', 'class' => ' offset-sm-3')\n);\n$form->addHtml(admFuncShowCreateChangeInfoById($createUserId, $createTimestamp));\n\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit roles\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * role_uuid: UUID of role, that should be edited\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getRoleUuid = admFuncVariableIsValid($_GET, 'role_uuid', 'string');\n\n// Initialize local parameters\n$showSystemCategory = false;\n$eventRole = false;\n\n// only users with the special right are allowed to manage roles\nif (!$gCurrentUser->manageRoles()) {\n    $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n    // => EXIT\n}\n\nif ($getRoleUuid !== '') {\n    $headline = $gL10n->get('SYS_EDIT_ROLE');\n} else {\n    $headline = $gL10n->get('SYS_CREATE_ROLE');\n}\n\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\n// create role object\n$role = new TableRoles($gDb);\n\nif ($getRoleUuid !== '') {\n    $role->readDataByUuid($getRoleUuid);\n    $eventRole = $role->getValue('cat_name_intern') === 'EVENTS';\n\n    // check if the role belongs to the current organization\n    if ((int) $role->getValue('cat_org_id') !== $gCurrentOrgId && $role->getValue('cat_org_id') > 0) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n\n    // administrator role could only be created or edited by administrators\n    if ($role->getValue('rol_administrator') == 1 && !$gCurrentUser->isAdministrator()) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n\n    // hidden roles can also see hidden categories\n    if ($role->getValue('cat_system') == 1) {\n        $showSystemCategory = true;\n    }\n}\n\nif (isset($_SESSION['roles_request'])) {\n    // due to incorrect input the user has returned to this form\n    // now write the previously entered contents into the object\n    $role->setArray($_SESSION['roles_request']);\n    unset($_SESSION['roles_request']);\n}\n\n// get all dependent roles of this role\n$childRoles = RoleDependency::getChildRoles($gDb, $role->getValue('rol_id'));\n\n$childRoleObjects = array();\n\n// create html page object\n$page = new HtmlPage('admidio-groups-roles-edit', $headline);\n\n$page->addJavascript(\n    '\n    checkMaxMemberCount();\n    $(\"#rol_assign_roles\").change(function() {\n        markRoleRight(\"rol_assign_roles\", \"rol_all_lists_view\", true);\n    });\n    $(\"#rol_all_lists_view\").change(function() {\n        markRoleRight(\"rol_all_lists_view\", \"rol_assign_roles\", false);\n    });\n    $(\"#rol_max_members\").change(function() {\n        checkMaxMemberCount();\n    });',\n    true\n);\n\n$page->addJavascript('\n    /**\n     * show/hide role dependencies if max count members will be changed\n     */\n    function checkMaxMemberCount() {\n        // Wenn eine Maximale Mitgliederzahl angeben wurde, duerfen keine Rollenabhaengigkeiten bestehen\n        if ($(\"#rol_max_members\").val() > 0) {\n            // Die Box zum konfigurieren der Rollenabh\u00e4ngig wird ausgeblendet\n            $(\"#gb_dependencies\").hide();\n\n            // Alle Abh\u00e4ngigen Rollen werden markiert und auf unabh\u00e4ngig gesetzt\n            $(\"#dependent_roles\").val(\"\");\n        } else {\n            // Die Box zum konfigurieren der Rollenabh\u00e4ngigkeit wird wieder eingeblendet\n            $(\"#gb_dependencies\").show();\n        }\n    }\n\n    /**\n     * Set dependent role right if another role right changed\n     * @param {string} srcRight  ID des Rechts, welches das Ereignis ausloest\n     * @param {string} destRight ID des Rechts, welches angepasst werden soll\n     * @param {bool}   checked   true destRight wird auf checked gesetzt\n     *                           false destRight wird auf unchecked gesetzt\n     */\n    function markRoleRight(srcRight, destRight, checked) {\n        if (document.getElementById(srcRight).checked && checked) {\n            document.getElementById(destRight).checked = true;\n        }\n        if (!document.getElementById(srcRight).checked && !checked) {\n            document.getElementById(destRight).checked = false;\n        }\n    }\n');\n\n$form = new HtmlForm('roles_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/groups-roles/groups_roles_function.php', array('role_uuid' => $getRoleUuid, 'mode' => '2')), $page);\n$form->openGroupBox('gb_name_category', $gL10n->get('SYS_NAME').' & '.$gL10n->get('SYS_CATEGORY'));\n\nif ($role->getValue('rol_administrator') === 1 || $eventRole) {\n    $fieldProperty = HtmlForm::FIELD_READONLY;\n} else {\n    $fieldProperty = HtmlForm::FIELD_REQUIRED;\n}\n$form->addInput(\n    'rol_name',\n    $gL10n->get('SYS_NAME'),\n    $role->getValue('rol_name'),\n    array('maxLength' => 100, 'property' => $fieldProperty)\n);\n$form->addMultilineTextInput(\n    'rol_description',\n    $gL10n->get('SYS_DESCRIPTION'),\n    $role->getValue('rol_description'),\n    3,\n    array('property' => ($eventRole ? HtmlForm::FIELD_READONLY : HtmlForm::FIELD_DEFAULT), 'maxLength' => 4000)\n);\n$form->addSelectBoxForCategories(\n    'rol_cat_id',\n    $gL10n->get('SYS_CATEGORY'),\n    $gDb,\n    ($eventRole ? 'ROL_EVENT' : 'ROL'),\n    HtmlForm::SELECT_BOX_MODUS_EDIT,\n    array('property' => ($eventRole ? HtmlForm::FIELD_READONLY : HtmlForm::FIELD_REQUIRED), 'defaultValue' => $role->getValue('cat_uuid'))\n);\n$form->closeGroupBox();\n$form->openGroupBox('gb_properties', $gL10n->get('SYS_PROPERTIES'));\nif ($gSettingsManager->getBool('enable_mail_module')) {\n    $selectBoxEntries = array(0 => $gL10n->get('SYS_NOBODY'), 1 => $gL10n->get('SYS_ROLE_MEMBERS'), 2 => $gL10n->get('ORG_REGISTERED_USERS'), 3 => $gL10n->get('SYS_ALSO_VISITORS'));\n    $form->addSelectBox(\n        'rol_mail_this_role',\n        $gL10n->get('SYS_SEND_MAILS'),\n        $selectBoxEntries,\n        array(\n            'defaultValue'                   => $role->getValue('rol_mail_this_role'),\n            'showContextDependentFirstEntry' => false,\n            'helpTextIdLabel'                => $gL10n->get('SYS_RIGHT_MAIL_THIS_ROLE_DESC', array('SYS_RIGHT_MAIL_TO_ALL'))\n        )\n    );\n}\n$selectBoxEntries = array(0 => $gL10n->get('SYS_NOBODY'), 3 => $gL10n->get('SYS_LEADERS'), 1 => $gL10n->get('SYS_ROLE_MEMBERS'), 2 => $gL10n->get('ORG_REGISTERED_USERS'));\n$form->addSelectBox(\n    'rol_view_memberships',\n    $gL10n->get('SYS_VIEW_ROLE_MEMBERSHIPS'),\n    $selectBoxEntries,\n    array(\n        'defaultValue'                   => $role->getValue('rol_view_memberships'),\n        'showContextDependentFirstEntry' => false,\n        'helpTextIdLabel'                => $gL10n->get('SYS_VIEW_ROLE_MEMBERSHIPS_DESC', array('SYS_RIGHT_ALL_LISTS_VIEW'))\n    )\n);\n$form->addSelectBox(\n    'rol_view_members_profiles',\n    $gL10n->get('SYS_VIEW_PROFILES_OF_ROLE_MEMBERS'),\n    $selectBoxEntries,\n    array(\n        'defaultValue'                   => $role->getValue('rol_view_members_profiles'),\n        'showContextDependentFirstEntry' => false,\n        'helpTextIdLabel'                => $gL10n->get('SYS_VIEW_PROFILES_OF_ROLE_MEMBERS_DESC', array('SYS_RIGHT_ALL_LISTS_VIEW'))\n    )\n);\n$selectBoxEntries = array(0 => $gL10n->get('SYS_NO_ADDITIONAL_RIGHTS'), 1 => $gL10n->get('SYS_ASSIGN_MEMBERS'), 2 => $gL10n->get('SYS_EDIT_MEMBERS'), 3 => $gL10n->get('SYS_ASSIGN_EDIT_MEMBERS'));\n$form->addSelectBox(\n    'rol_leader_rights',\n    $gL10n->get('SYS_LEADER'),\n    $selectBoxEntries,\n    array(\n        'defaultValue'                   => $role->getValue('rol_leader_rights'),\n        'showContextDependentFirstEntry' => false,\n        'helpTextIdLabel'                => 'SYS_LEADER_RIGHTS_DESC'\n    )\n);\n\n$selectBoxEntries = array(0 => $gL10n->get('SYS_SYSTEM_DEFAULT_LIST'));\n// SQL-Statement fuer alle Listenkonfigurationen vorbereiten, die angezeigt werdne sollen\n$sql = 'SELECT lst_id, lst_name\n          FROM '.TBL_LISTS.'\n         WHERE lst_org_id = ? -- $gCurrentOrgId\n           AND lst_global = true\n           AND lst_name IS NOT NULL\n      ORDER BY lst_global ASC, lst_name ASC';\n$pdoStatement = $gDb->queryPrepared($sql, array($gCurrentOrgId));\n\nwhile ($row = $pdoStatement->fetch()) {\n    $selectBoxEntries[$row['lst_id']] = $row['lst_name'];\n}\n$form->addSelectBox(\n    'rol_lst_id',\n    $gL10n->get('SYS_DEFAULT_LIST'),\n    $selectBoxEntries,\n    array('defaultValue' => (int) $role->getValue('rol_lst_id'), 'showContextDependentFirstEntry' => false, 'helpTextIdLabel' => 'SYS_DEFAULT_LIST_DESC')\n);\n\nif (!$eventRole) {\n    $form->addCheckbox(\n        'rol_default_registration',\n        $gL10n->get('SYS_DEFAULT_ASSIGNMENT_REGISTRATION'),\n        (bool) $role->getValue('rol_default_registration'),\n        array('helpTextIdLabel' => 'SYS_DEFAULT_ASSIGNMENT_REGISTRATION_DESC')\n    );\n    $form->addInput(\n        'rol_max_members',\n        $gL10n->get('SYS_MAX_PARTICIPANTS').'<br />('.$gL10n->get('SYS_NO_LEADER').')',\n        (int) $role->getValue('rol_max_members'),\n        array('type' => 'number', 'minNumber' => 0, 'maxNumber' => 99999, 'step' => 1)\n    );\n    $form->addInput(\n        'rol_cost',\n        $gL10n->get('SYS_CONTRIBUTION').' '.$gSettingsManager->getString('system_currency'),\n        $role->getValue('rol_cost'),\n        array('type' => 'number', 'minNumber' => 0, 'maxNumber' => 99999, 'step' => '0.01')\n    );\n    $form->addSelectBox(\n        'rol_cost_period',\n        $gL10n->get('SYS_CONTRIBUTION_PERIOD'),\n        TableRoles::getCostPeriods(),\n        array('defaultValue' => $role->getValue('rol_cost_period'))\n    );\n}\n$form->closeGroupBox();\n\n// event roles should not set rights, dates meetings and dependencies\nif (!$eventRole) {\n    $form->openGroupBox('gb_authorization', $gL10n->get('SYS_PERMISSIONS'));\n    $form->addCheckbox(\n        'rol_assign_roles',\n        $gL10n->get('SYS_RIGHT_ASSIGN_ROLES'),\n        (bool) $role->getValue('rol_assign_roles'),\n        array('helpTextIdLabel' => 'SYS_RIGHT_ASSIGN_ROLES_DESC', 'icon' => 'fa-users')\n    );\n    $form->addCheckbox(\n        'rol_all_lists_view',\n        $gL10n->get('SYS_RIGHT_ALL_LISTS_VIEW'),\n        (bool) $role->getValue('rol_all_lists_view'),\n        array('icon' => 'fa-list')\n    );\n    $form->addCheckbox(\n        'rol_approve_users',\n        $gL10n->get('SYS_RIGHT_APPROVE_USERS'),\n        (bool) $role->getValue('rol_approve_users'),\n        array('icon' => 'fa-address-card')\n    );\n    if ($gSettingsManager->getBool('enable_mail_module')) {\n        $form->addCheckbox(\n            'rol_mail_to_all',\n            $gL10n->get('SYS_RIGHT_MAIL_TO_ALL'),\n            (bool) $role->getValue('rol_mail_to_all'),\n            array('icon' => 'fa-envelope')\n        );\n    }\n    $form->addCheckbox(\n        'rol_edit_user',\n        $gL10n->get('SYS_RIGHT_EDIT_USER'),\n        (bool) $role->getValue('rol_edit_user'),\n        array('helpTextIdLabel' => 'SYS_RIGHT_EDIT_USER_DESC', 'icon' => 'fa-users-cog')\n    );\n    $form->addCheckbox(\n        'rol_profile',\n        $gL10n->get('SYS_RIGHT_PROFILE'),\n        (bool) $role->getValue('rol_profile'),\n        array('icon' => 'fa-user')\n    );\n    if ((int) $gSettingsManager->get('enable_announcements_module') > 0) {\n        $form->addCheckbox(\n            'rol_announcements',\n            $gL10n->get('SYS_RIGHT_ANNOUNCEMENTS'),\n            (bool) $role->getValue('rol_announcements'),\n            array('helpTextIdLabel' => 'SYS_ROLES_MODULE_ADMINISTRATORS_DESC', 'icon' => 'fa-newspaper')\n        );\n    }\n    if ((int) $gSettingsManager->get('enable_dates_module') > 0) {\n        $form->addCheckbox(\n            'rol_dates',\n            $gL10n->get('SYS_RIGHT_DATES'),\n            (bool) $role->getValue('rol_dates'),\n            array('helpTextIdLabel' => 'SYS_ROLES_MODULE_ADMINISTRATORS_DESC', 'icon' => 'fa-calendar-alt')\n        );\n    }\n    if ((int) $gSettingsManager->get('enable_photo_module') > 0) {\n        $form->addCheckbox(\n            'rol_photo',\n            $gL10n->get('SYS_RIGHT_PHOTOS'),\n            (bool) $role->getValue('rol_photo'),\n            array('icon' => 'fa-image')\n        );\n    }\n    if ($gSettingsManager->getBool('documents_files_enable_module')) {\n        $form->addCheckbox(\n            'rol_documents_files',\n            $gL10n->get('SYS_RIGHT_DOCUMENTS_FILES'),\n            (bool) $role->getValue('rol_documents_files'),\n            array('helpTextIdLabel' => 'SYS_RIGHT_DOCUMENTS_FILES_DESC', 'icon' => 'fa-download')\n        );\n    }\n    if ((int) $gSettingsManager->get('enable_guestbook_module') > 0) {\n        $form->addCheckbox(\n            'rol_guestbook',\n            $gL10n->get('SYS_RIGHT_GUESTBOOK'),\n            (bool) $role->getValue('rol_guestbook'),\n            array('icon' => 'fa-book')\n        );\n        // if not registered users can set comments than there is no need to set a role dependent right\n        if (!$gSettingsManager->getBool('enable_gbook_comments4all')) {\n            $form->addCheckbox(\n                'rol_guestbook_comments',\n                $gL10n->get('SYS_RIGHT_GUESTBOOK_COMMENTS'),\n                (bool) $role->getValue('rol_guestbook_comments'),\n                array('icon' => 'fa-comment')\n            );\n        }\n    }\n    if ((int) $gSettingsManager->get('enable_weblinks_module') > 0) {\n        $form->addCheckbox(\n            'rol_weblinks',\n            $gL10n->get('SYS_RIGHT_WEBLINKS'),\n            (bool) $role->getValue('rol_weblinks'),\n            array('helpTextIdLabel' => 'SYS_ROLES_MODULE_ADMINISTRATORS_DESC', 'icon' => 'fa-link')\n        );\n    }\n    $form->closeGroupBox();\n    $form->openGroupBox('gb_dates_meetings', $gL10n->get('DAT_DATES').' / '.$gL10n->get('SYS_MEETINGS').'&nbsp;&nbsp;('.$gL10n->get('SYS_OPTIONAL').')');\n    $form->addInput('rol_start_date', $gL10n->get('SYS_VALID_FROM'), $role->getValue('rol_start_date'), array('type' => 'date'));\n    $form->addInput('rol_end_date', $gL10n->get('SYS_VALID_TO'), $role->getValue('rol_end_date'), array('type' => 'date'));\n    $form->addInput('rol_start_time', $gL10n->get('SYS_TIME_FROM'), $role->getValue('rol_start_time'), array('type' => 'time'));\n    $form->addInput('rol_end_time', $gL10n->get('SYS_TIME_TO'), $role->getValue('rol_end_time'), array('type' => 'time'));\n    $form->addSelectBox('rol_weekday', $gL10n->get('SYS_WEEKDAY'), DateTimeExtended::getWeekdays(), array('defaultValue' => $role->getValue('rol_weekday')));\n    $form->addInput('rol_location', $gL10n->get('SYS_LOCATION'), $role->getValue('rol_location'), array('maxLength' => 100));\n    $form->closeGroupBox();\n\n    $form->openGroupBox('gb_dependencies', $gL10n->get('SYS_DEPENDENCIES').'&nbsp;&nbsp;('.$gL10n->get('SYS_OPTIONAL').')');\n    $roleName = $gL10n->get('SYS_NEW_ROLE');\n    if ($role->getValue('rol_name') !== '') {\n        $roleName = $gL10n->get('SYS_ROLE').' <strong>'.$role->getValue('rol_name').'</strong>';\n    }\n    $form->addHtml('<p>'.$gL10n->get('SYS_ROLE_DEPENDENCIES_DESC', array($roleName)).'</p>');\n\n    //  list all roles that the user is allowed to see\n    $sqlData['query'] = 'SELECT rol_id, rol_name, cat_name\n                           FROM '.TBL_ROLES.'\n                     INNER JOIN '.TBL_CATEGORIES.'\n                             ON cat_id = rol_cat_id\n                          WHERE rol_valid   = true\n                            AND cat_name_intern <> \\'EVENTS\\'\n                            AND (  cat_org_id  = ? -- $gCurrentOrgId\n                                OR cat_org_id IS NULL )\n                       ORDER BY cat_sequence, rol_name';\n    $sqlData['params'] = array($gCurrentOrgId);\n\n    $form->addSelectBoxFromSql(\n        'dependent_roles',\n        $gL10n->get('SYS_DEPENDENT'),\n        $gDb,\n        $sqlData,\n        array('defaultValue' => $childRoles, 'multiselect' => true)\n    );\n    $form->closeGroupBox();\n}\n\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check'));\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $role->getValue('rol_usr_id_create'),\n    $role->getValue('rol_timestamp_create'),\n    (int) $role->getValue('rol_usr_id_change'),\n    $role->getValue('rol_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit guestbook comments\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * gbo_uuid      - UUID of the guestbook entry that should get a new comment\n * gbc_uuid      - UUID of the comment that should be edited\n * headline      - Title of the announcement module. This will be shown in the whole module.\n *                 (Default) GBO_GUESTBOOK\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\n\n// Initialize and check the parameters\n$getGboUuid  = admFuncVariableIsValid($_GET, 'gbo_uuid', 'string');\n$getGbcUuid  = admFuncVariableIsValid($_GET, 'gbc_uuid', 'string');\n$getHeadline = admFuncVariableIsValid($_GET, 'headline', 'string', array('defaultValue' => $gL10n->get('GBO_GUESTBOOK')));\n\n// check if the module is enabled and disallow access if it's disabled\nif ((int) $gSettingsManager->get('enable_guestbook_module') === 0) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n// One (not two) parameter must be passed: Either gbo_uuid or gbc_uuid...\nif ($getGboUuid !== '' && $getGbcUuid !== '') {\n    $gMessage->show($gL10n->get('SYS_INVALID_PAGE_VIEW'));\n    // => EXIT\n}\n\n// set create or edit mode\nif ($getGboUuid !== '') {\n    $mode     = '4';\n    $headline = $gL10n->get('GBO_CREATE_COMMENT');\n} else {\n    $mode     = '8';\n    $headline = $gL10n->get('GBO_EDIT_COMMENT');\n}\n\n// Erst einmal die Rechte abklopfen...\nif (((int) $gSettingsManager->get('enable_guestbook_module') === 2 || !$gSettingsManager->getBool('enable_gbook_comments4all')) && $getGboUuid !== '') {\n    // Falls anonymes kommentieren nicht erlaubt ist, muss der User eingeloggt sein zum kommentieren\n    require(__DIR__ . '/../../system/login_valid.php');\n\n    if (!$gCurrentUser->commentGuestbookRight()) {\n        // der User hat kein Recht zu kommentieren\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n}\n\nif ($getGbcUuid !== '') {\n    // Zum editieren von Kommentaren muss der User auch eingeloggt sein\n    require(__DIR__ . '/../../system/login_valid.php');\n\n    if (!$gCurrentUser->editGuestbookRight()) {\n        // der User hat kein Recht Kommentare zu editieren\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n}\n\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\n// Gaestebuchkommentarobjekt anlegen\n$gbComment = new TableGuestbookComment($gDb);\n\nif ($getGbcUuid !== '') {\n    $gbComment->readDataByUuid($getGbcUuid);\n\n    // Pruefung, ob der Eintrag zur aktuellen Organisation gehoert\n    if ((int) $gbComment->getValue('gbo_org_id') !== $gCurrentOrgId) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n}\n\nif (isset($_SESSION['guestbook_comment_request'])) {\n    // durch fehlerhafte Eingabe ist der User zu diesem Formular zurueckgekehrt\n    // nun die vorher eingegebenen Inhalte ins Objekt schreiben\n    $gbComment->setArray($_SESSION['guestbook_comment_request']);\n    unset($_SESSION['guestbook_comment_request']);\n}\n\n// Wenn der User eingeloggt ist und keine cid uebergeben wurde\n// koennen zumindest Name und Emailadresse vorbelegt werden...\nif ($getGbcUuid === '' && $gValidLogin) {\n    $gbComment->setValue('gbc_name', $gCurrentUser->getValue('FIRST_NAME') . ' ' . $gCurrentUser->getValue('LAST_NAME'));\n    $gbComment->setValue('gbc_email', $gCurrentUser->getValue('EMAIL'));\n}\n\nif (!$gValidLogin && $gSettingsManager->getInt('flooding_protection_time') > 0) {\n    // Falls er nicht eingeloggt ist, wird vor dem Ausfuellen des Formulars noch geprueft ob der\n    // User innerhalb einer festgelegten Zeitspanne unter seiner IP-Adresse schon einmal\n    // einen GB-Eintrag erzeugt hat...\n    $ipAddress = $_SERVER['REMOTE_ADDR'];\n\n    $sql = 'SELECT COUNT(*) AS count\n              FROM '.TBL_GUESTBOOK_COMMENTS.'\n             WHERE unix_timestamp(gbc_timestamp_create) > unix_timestamp() - ? -- $gSettingsManager->getInt(\\'flooding_protection_time\\')\n               AND gbc_ip_address = ? -- $gbComment->getValue(\\'gbc_ip_address\\')';\n    $pdoStatement = $gDb->queryPrepared($sql, array($gSettingsManager->getInt('flooding_protection_time'), $gbComment->getValue('gbc_ip_address')));\n\n    if ($pdoStatement->fetchColumn() > 0) {\n        // Wenn dies der Fall ist, gibt es natuerlich keinen Gaestebucheintrag...\n        $gMessage->show($gL10n->get('GBO_FLOODING_PROTECTION', array($gSettingsManager->getInt('flooding_protection_time'))));\n        // => EXIT\n    }\n}\n\n// create html page object\n$page = new HtmlPage('admidio-guestbook-comment-new', $headline);\n\n// show form\n$form = new HtmlForm('guestbook_comment_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/guestbook/guestbook_function.php', array('gbo_uuid' => $getGboUuid, 'gbc_uuid' => $getGbcUuid, 'headline' => $getHeadline, 'mode' => $mode)), $page);\nif ($gCurrentUserId > 0) {\n    // registered users should not change their name\n    $form->addInput(\n        'gbc_name',\n        $gL10n->get('SYS_NAME'),\n        $gbComment->getValue('gbc_name'),\n        array('maxLength' => 60, 'property' => HtmlForm::FIELD_DISABLED)\n    );\n} else {\n    $form->addInput(\n        'gbc_name',\n        $gL10n->get('SYS_NAME'),\n        $gbComment->getValue('gbc_name'),\n        array('maxLength' => 60, 'property' => HtmlForm::FIELD_REQUIRED)\n    );\n}\n$form->addInput(\n    'gbc_email',\n    $gL10n->get('SYS_EMAIL'),\n    $gbComment->getValue('gbc_email'),\n    array('type' => 'email', 'maxLength' => 254)\n);\n$form->addEditor(\n    'gbc_text',\n    $gL10n->get('SYS_COMMENT'),\n    $gbComment->getValue('gbc_text'),\n    array('property' => HtmlForm::FIELD_REQUIRED, 'toolbar' => 'AdmidioGuestbook')\n);\n\n// if captchas are enabled then visitors of the website must resolve this\nif (!$gValidLogin && $gSettingsManager->getBool('enable_mail_captcha')) {\n    $form->openGroupBox('gb_confirmation_of_entry', $gL10n->get('SYS_CONFIRMATION_OF_INPUT'));\n    $form->addCaptcha('captcha_code');\n    $form->closeGroupBox();\n}\n\n// show information about user who creates the recordset and changed it\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check'));\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $gbComment->getValue('gbc_usr_id_create'),\n    $gbComment->getValue('gbc_timestamp_create'),\n    (int) $gbComment->getValue('gbc_usr_id_change'),\n    $gbComment->getValue('gbc_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit guestbook entries\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * gbo_uuid   - UUID of one guestbook entry that should be shown\n * headline   - Title of the guestbook module. This will be shown in the whole module.\n *              (Default) GBO_GUESTBOOK\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\n\n// Initialize and check the parameters\n$getGboUuid  = admFuncVariableIsValid($_GET, 'gbo_uuid', 'string');\n$getHeadline = admFuncVariableIsValid($_GET, 'headline', 'string', array('defaultValue' => $gL10n->get('GBO_GUESTBOOK')));\n\n// check if the module is enabled and disallow access if it's disabled\nif ((int) $gSettingsManager->get('enable_guestbook_module') === 0) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n// => EXIT\n} elseif ((int) $gSettingsManager->get('enable_guestbook_module') === 2) {\n    // only logged in users can access the module\n    require(__DIR__ . '/../../system/login_valid.php');\n}\n\n// set headline of the script\nif ($getGboUuid !== '') {\n    $headline = $gL10n->get('SYS_EDIT_ENTRY');\n} else {\n    $headline = $gL10n->get('SYS_WRITE_ENTRY');\n}\n\n// add current url to navigation stack\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\n// Gaestebuchobjekt anlegen\n$guestbook = new TableGuestbook($gDb);\n\nif ($getGboUuid !== '') {\n    // Falls ein Eintrag bearbeitet werden soll muss geprueft weden ob die Rechte gesetzt sind...\n    require(__DIR__ . '/../../system/login_valid.php');\n\n    if (!$gCurrentUser->editGuestbookRight()) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n\n    $guestbook->readDataByUuid($getGboUuid);\n\n    // Check if the entry belongs to the current organization\n    if ((int) $guestbook->getValue('gbo_org_id') !== $gCurrentOrgId) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n}\n\n// If no ID was passed, but the user is logged in, at least the following can be done\n// name, email address and homepage can be preset...\nif ($getGboUuid === '' && $gValidLogin) {\n    $guestbook->setValue('gbo_name', $gCurrentUser->getValue('FIRST_NAME') . ' ' . $gCurrentUser->getValue('LAST_NAME'));\n    $guestbook->setValue('gbo_email', $gCurrentUser->getValue('EMAIL'));\n    $guestbook->setValue('gbo_homepage', $gCurrentUser->getValue('WEBSITE'));\n}\n\nif (isset($_SESSION['guestbook_entry_request'])) {\n    // due to a wrong input the user has returned to this form, now write the previously entered content into the object\n    $guestbook->setArray($_SESSION['guestbook_entry_request']);\n    unset($_SESSION['guestbook_entry_request']);\n}\n\nif (!$gValidLogin && $gSettingsManager->getInt('flooding_protection_time') > 0) {\n    // Falls er nicht eingeloggt ist, wird vor dem Ausfuellen des Formulars noch geprueft ob der\n    // User innerhalb einer festgelegten Zeitspanne unter seiner IP-Adresse schon einmal\n    // einen GB-Eintrag erzeugt hat...\n    $ipAddress = $_SERVER['REMOTE_ADDR'];\n\n    $sql = 'SELECT COUNT(*) AS count\n              FROM '.TBL_GUESTBOOK.'\n             WHERE unix_timestamp(gbo_timestamp_create) > unix_timestamp() - ? -- $gSettingsManager->getInt(\\'flooding_protection_time\\')\n               AND gbo_org_id     = ? -- $gCurrentOrgId\n               AND gbo_ip_address = ? -- $guestbook->getValue(\\'gbo_ip_address\\')';\n    $queryParams = array($gSettingsManager->getInt('flooding_protection_time'), $gCurrentOrgId, $guestbook->getValue('gbo_ip_address'));\n    $pdoStatement = $gDb->queryPrepared($sql, $queryParams);\n\n    if ($pdoStatement->fetchColumn() > 0) {\n        // Wenn dies der Fall ist, gibt es natuerlich keinen Gaestebucheintrag...\n        $gMessage->show($gL10n->get('GBO_FLOODING_PROTECTION', array($gSettingsManager->getInt('flooding_protection_time'))));\n        // => EXIT\n    }\n}\n\n// create html page object\n$page = new HtmlPage('admidio-guestbook-new', $getHeadline . ' - ' . $headline);\n\n// Html des Modules ausgeben\nif ($getGboUuid !== '') {\n    $mode = '3';\n} else {\n    $mode = '1';\n}\n\n// show form\n$form = new HtmlForm('guestbook_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/guestbook/guestbook_function.php', array('gbo_uuid' => $getGboUuid, 'headline' => $getHeadline, 'mode' => $mode)), $page);\nif ($gCurrentUserId > 0) {\n    // registered users should not change their name\n    $form->addInput(\n        'gbo_name',\n        $gL10n->get('SYS_NAME'),\n        $guestbook->getValue('gbo_name'),\n        array('maxLength' => 60, 'property' => HtmlForm::FIELD_DISABLED)\n    );\n} else {\n    $form->addInput(\n        'gbo_name',\n        $gL10n->get('SYS_NAME'),\n        $guestbook->getValue('gbo_name'),\n        array('maxLength' => 60, 'property' => HtmlForm::FIELD_REQUIRED)\n    );\n}\n$form->addInput(\n    'gbo_email',\n    $gL10n->get('SYS_EMAIL'),\n    $guestbook->getValue('gbo_email'),\n    array('type' => 'email', 'maxLength' => 254)\n);\n$form->addInput(\n    'gbo_homepage',\n    $gL10n->get('SYS_WEBSITE'),\n    $guestbook->getValue('gbo_homepage'),\n    array('maxLength' => 50)\n);\n$form->addEditor(\n    'gbo_text',\n    $gL10n->get('SYS_MESSAGE'),\n    $guestbook->getValue('gbo_text'),\n    array('property' => HtmlForm::FIELD_REQUIRED, 'toolbar' => 'AdmidioGuestbook')\n);\n\n// if captchas are enabled then visitors of the website must resolve this\nif (!$gValidLogin && $gSettingsManager->getBool('enable_mail_captcha')) {\n    $form->openGroupBox('gb_confirmation_of_entry', $gL10n->get('SYS_CONFIRMATION_OF_INPUT'));\n    $form->addCaptcha('captcha_code');\n    $form->closeGroupBox();\n}\n\n// show information about user who creates the recordset and changed it\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check'));\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $guestbook->getValue('gbo_usr_id_create'),\n    $guestbook->getValue('gbo_timestamp_create'),\n    (int) $guestbook->getValue('gbo_usr_id_change'),\n    $guestbook->getValue('gbo_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit weblinks\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * link_uuid - UUID of the weblink that should be edited\n * headline  - Title of the weblink module. This will be shown in the whole module.\n *             (Default) SYS_WEBLINKS\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getLinkUuid = admFuncVariableIsValid($_GET, 'link_uuid', 'string');\n$getHeadline = admFuncVariableIsValid($_GET, 'headline', 'string', array('defaultValue' => $gL10n->get('SYS_WEBLINKS')));\n\n// check if the module is enabled for use\nif ((int) $gSettingsManager->get('enable_weblinks_module') === 0) {\n    // module is disabled\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n// create weblink object\n$link = new TableWeblink($gDb);\n\nif ($getLinkUuid !== '') {\n    $link->readDataByUuid($getLinkUuid);\n\n    // check if the current user could edit this weblink\n    if (!$link->isEditable()) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n} else {\n    // check if the user has the right to edit at least one category\n    if (count($gCurrentUser->getAllEditableCategories('LNK')) === 0) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n}\n\nif (isset($_SESSION['links_request'])) {\n    // due to incorrect input the user has returned to this form\n    // now write the previously entered contents into the object\n    $link->setArray($_SESSION['links_request']);\n    unset($_SESSION['links_request']);\n}\n\nif ($getLinkUuid !== '') {\n    $headline = $gL10n->get('SYS_EDIT_VAR', array($getHeadline));\n} else {\n    $headline = $gL10n->get('SYS_CREATE_VAR', array($getHeadline));\n}\n\n// add current url to navigation stack\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\n// create html page object\n$page = new HtmlPage('admidio-weblinks-edit', $headline);\n\n// show form\n$form = new HtmlForm('weblinks_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/links/links_function.php', array('link_uuid' => $getLinkUuid, 'headline' => $getHeadline, 'mode' => 1)), $page);\n$form->addInput(\n    'lnk_name',\n    $gL10n->get('SYS_LINK_NAME'),\n    $link->getValue('lnk_name'),\n    array('maxLength' => 250, 'property' => HtmlForm::FIELD_REQUIRED)\n);\n$form->addInput(\n    'lnk_url',\n    $gL10n->get('SYS_LINK_ADDRESS'),\n    $link->getValue('lnk_url'),\n    array('maxLength' => 2000, 'property' => HtmlForm::FIELD_REQUIRED)\n);\n$form->addSelectBoxForCategories(\n    'lnk_cat_id',\n    $gL10n->get('SYS_CATEGORY'),\n    $gDb,\n    'LNK',\n    HtmlForm::SELECT_BOX_MODUS_EDIT,\n    array('property' => HtmlForm::FIELD_REQUIRED, 'defaultValue' => $link->getValue('cat_uuid'))\n);\n$form->addEditor(\n    'lnk_description',\n    $gL10n->get('SYS_DESCRIPTION'),\n    $link->getValue('lnk_description'),\n    array('height' => '150px')\n);\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check'));\n\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $link->getValue('lnk_usr_id_create'),\n    $link->getValue('lnk_timestamp_create'),\n    (int) $link->getValue('lnk_usr_id_change'),\n    $link->getValue('lnk_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit categories\n *\n * @copyright 2004-2023 The Admidio Team\n * @see http://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * menu_uuid: UUID of the menu entry that should be edited\n *\n ****************************************************************************/\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getMenuUuid = admFuncVariableIsValid($_GET, 'menu_uuid', 'string');\n\n// Rechte pruefen\nif (!$gCurrentUser->isAdministrator()) {\n    $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n}\n\n/**\n * @param array<int,string> $menuList\n * @param int               $level\n * @param int               $menId\n * @param int               $parentId\n */\nfunction subMenu(&$menuList, $level, $menId, $parentId = null)\n{\n    global $gDb;\n\n    $sqlConditionParentId = '';\n    $queryParams = array($menId);\n\n    // Erfassen des auszugebenden Menu\n    if ($parentId > 0) {\n        $sqlConditionParentId .= ' AND men_men_id_parent = ? -- $parentId';\n        $queryParams[] = $parentId;\n    } else {\n        $sqlConditionParentId .= ' AND men_men_id_parent IS NULL';\n    }\n\n    $sql = 'SELECT *\n              FROM '.TBL_MENU.'\n             WHERE men_node = true\n               AND men_id  <> ? -- $menu->getValue(\\'men_id\\')\n                   '.$sqlConditionParentId;\n    $childStatement = $gDb->queryPrepared($sql, $queryParams);\n\n    $parentMenu = new TableMenu($gDb);\n    $einschub = str_repeat('&nbsp;', $level * 3) . '&#151;&nbsp;';\n\n    while ($menuEntry = $childStatement->fetch()) {\n        $parentMenu->clear();\n        $parentMenu->setArray($menuEntry);\n\n        // add entry to array of all menus\n        $menuList[(int) $parentMenu->getValue('men_id')] = $einschub . $parentMenu->getValue('men_name');\n\n        subMenu($menuList, ++$level, $menId, (int) $parentMenu->getValue('men_id'));\n    }\n}\n\n// create menu object\n$menu = new TableMenu($gDb);\n\n// systemcategories should not be renamed\n$roleViewSet[] = 0;\n\nif ($getMenuUuid !== '') {\n    $headline = $gL10n->get('SYS_EDIT_VAR', array($gL10n->get('SYS_MENU')));\n\n    $menu->readDataByUuid($getMenuUuid);\n\n    // Read current roles rights of the menu\n    $display = new RolesRights($gDb, 'menu_view', $menu->getValue('men_id'));\n    $roleViewSet = $display->getRolesIds();\n} else {\n    $headline = $gL10n->get('SYS_CREATE_VAR', array($gL10n->get('SYS_MENU')));\n}\n\nif (isset($_SESSION['menu_request'])) {\n    // due to incorrect input, the user has returned to this form\n    // Now write the previously entered content into the object\n    $menu->setArray($_SESSION['menu_request']);\n    unset($_SESSION['menu_request']);\n}\n\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\n// create html page object\n$page = new HtmlPage('admidio-menu-edit', $headline);\n\n// alle aus der DB aus lesen\n$sqlRoles = 'SELECT rol_id, rol_name, org_shortname, cat_name\n               FROM '.TBL_ROLES.'\n         INNER JOIN '.TBL_CATEGORIES.'\n                 ON cat_id = rol_cat_id\n         INNER JOIN '.TBL_ORGANIZATIONS.'\n                 ON org_id = cat_org_id\n              WHERE rol_valid  = true\n                AND rol_system = false\n                AND cat_name_intern <> \\'EVENTS\\'\n           ORDER BY cat_name, rol_name';\n$rolesViewStatement = $gDb->queryPrepared($sqlRoles);\n\n$parentRoleViewSet = array();\nwhile ($rowViewRoles = $rolesViewStatement->fetch()) {\n    // Jede Rolle wird nun dem Array hinzugefuegt\n    $parentRoleViewSet[] = array(\n        $rowViewRoles['rol_id'],\n        $rowViewRoles['rol_name'] . ' (' . $rowViewRoles['org_shortname'] . ')',\n        $rowViewRoles['cat_name']\n    );\n}\n\n// show form\n$form = new HtmlForm('menu_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL . FOLDER_MODULES . '/menu/menu_function.php', array('menu_uuid' => $getMenuUuid, 'mode' => 1)), $page);\n\n$fieldRequired = HtmlForm::FIELD_REQUIRED;\n$fieldDefault  = HtmlForm::FIELD_DEFAULT;\n\nif ((bool) $menu->getValue('men_standard')) {\n    $fieldRequired = HtmlForm::FIELD_DISABLED;\n    $fieldDefault  = HtmlForm::FIELD_DISABLED;\n}\n\n$menuList = array();\nsubMenu($menuList, 1, (int) $menu->getValue('men_id'));\n\n$form->addInput(\n    'men_name',\n    $gL10n->get('SYS_NAME'),\n    $menu->getValue('men_name'),\n    array('maxLength' => 100, 'property'=> HtmlForm::FIELD_REQUIRED, 'helpTextIdLabel' => 'SYS_MENU_NAME_DESC')\n);\n\nif ($getMenuUuid !== '') {\n    $form->addInput(\n        'men_name_intern',\n        $gL10n->get('SYS_INTERNAL_NAME'),\n        $menu->getValue('men_name_intern'),\n        array('maxLength' => 100, 'property' => HtmlForm::FIELD_DISABLED, 'helpTextIdLabel' => 'SYS_INTERNAL_NAME_DESC')\n    );\n}\n\n$form->addMultilineTextInput(\n    'men_description',\n    $gL10n->get('SYS_DESCRIPTION'),\n    $menu->getValue('men_description'),\n    2,\n    array('maxLength' => 4000)\n);\n\n$form->addSelectBox(\n    'men_men_id_parent',\n    $gL10n->get('SYS_MENU_LEVEL'),\n    $menuList,\n    array(\n        'property'        => HtmlForm::FIELD_REQUIRED,\n        'defaultValue'    => (int) $menu->getValue('men_men_id_parent'),\n        'helpTextIdLabel' => 'SYS_MENU_LEVEL_DESC'\n    )\n);\n\n$sql = 'SELECT com_id, com_name\n          FROM '.TBL_COMPONENTS.'\n      ORDER BY com_name';\n$form->addSelectBoxFromSql(\n    'men_com_id',\n    $gL10n->get('SYS_MODULE_RIGHTS'),\n    $gDb,\n    $sql,\n    array(\n        'property'        => $fieldDefault,\n        'defaultValue'    => (int) $menu->getValue('men_com_id'),\n        'helpTextIdLabel' => 'SYS_MENU_MODULE_RIGHTS_DESC'\n    )\n);\n\n$form->addSelectBox(\n    'menu_view',\n    $gL10n->get('SYS_VISIBLE_FOR'),\n    $parentRoleViewSet,\n    array('defaultValue' => $roleViewSet, 'multiselect' => true)\n);\n\nif ((bool) $menu->getValue('men_node') === false) {\n    $form->addInput(\n        'men_url',\n        $gL10n->get('SYS_URL'),\n        $menu->getValue('men_url'),\n        array('maxLength' => 2000, 'property' => $fieldRequired)\n    );\n}\n\n$form->addInput(\n    'men_icon',\n    $gL10n->get('SYS_ICON'),\n    $menu->getValue('men_icon'),\n    array(\n        'maxLength' => 100,\n        'helpTextIdLabel' => $gL10n->get('SYS_FONT_AWESOME_DESC', array('<a href=\"https://fontawesome.com/icons?d=gallery&s=brands,solid&m=free\" target=\"_blank\">', '</a>')),\n        'class' => 'form-control-small'\n    )\n);\n\n$form->addSubmitButton(\n    'btn_save',\n    $gL10n->get('SYS_SAVE'),\n    array('icon' => 'fa-check', 'class' => ' offset-sm-3')\n);\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * messages form page\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n ***********************************************************************************************\n */\n\n/******************************************************************************\n * Parameters:\n *\n * msg_type  - This could be EMAIL if you want to write an email or PM if you want to write a private Message\n * user_uuid - send message to the given user UUID\n * subject   - subject of the message\n * msg_uuid  - UUID of the message -> just for answers\n * role_uuid - UUID of a role to which an email should be sent\n * carbon_copy - false - (Default) \"Send copy to me\" checkbox is NOT set\n *             - true  - \"Send copy to me\" checkbox is set\n * forward : true - The message of the msg_id will be copied and the base for this new message\n *\n *****************************************************************************/\n\nrequire_once(__DIR__ . '/../../system/common.php');\n\n// Initialize and check the parameters\n$getMsgType    = admFuncVariableIsValid($_GET, 'msg_type', 'string', array('defaultValue' => TableMessage::MESSAGE_TYPE_EMAIL));\n$getUserUuid   = admFuncVariableIsValid($_GET, 'user_uuid', 'string');\n$getSubject    = admFuncVariableIsValid($_GET, 'subject', 'string');\n$getMsgUuid    = admFuncVariableIsValid($_GET, 'msg_uuid', 'string');\n$getRoleUuid   = admFuncVariableIsValid($_GET, 'role_uuid', 'string');\n$getCarbonCopy = admFuncVariableIsValid($_GET, 'carbon_copy', 'bool', array('defaultValue' => false));\n$getDeliveryConfirmation = admFuncVariableIsValid($_GET, 'delivery_confirmation', 'bool');\n$getForward    = admFuncVariableIsValid($_GET, 'forward', 'bool');\n$postUserUuidList = '';\n$postListUuid = '';\n\n// Check form values\nif ($gValidLogin) {\n    $postUserUuidList = admFuncVariableIsValid($_POST, 'userUuidList', 'string');\n    $postListUuid = admFuncVariableIsValid($_POST, 'list_uuid', 'string');\n}\n\n$message = new TableMessage($gDb);\n$message->readDataByUuid($getMsgUuid);\n\nif ($getMsgUuid !== '') {\n    $getMsgType = $message->getValue('msg_type');\n}\n\n// check if the call of the page was allowed by settings\nif ((!$gSettingsManager->getBool('enable_mail_module') && $getMsgType !== TableMessage::MESSAGE_TYPE_PM)\n   || (!$gSettingsManager->getBool('enable_pm_module') && $getMsgType === TableMessage::MESSAGE_TYPE_PM)) {\n    // message if the sending of PM is not allowed\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n// check for valid login\nif (!$gValidLogin && $getMsgType === TableMessage::MESSAGE_TYPE_PM) {\n    $gMessage->show($gL10n->get('SYS_INVALID_PAGE_VIEW'));\n    // => EXIT\n}\n\n// check if the current user has email address for sending an email\nif ($gValidLogin && $getMsgType !== TableMessage::MESSAGE_TYPE_PM && !$gCurrentUser->hasEmail()) {\n    $gMessage->show($gL10n->get('SYS_CURRENT_USER_NO_EMAIL', array('<a href=\"'.ADMIDIO_URL.FOLDER_MODULES.'/profile/profile.php\">', '</a>')));\n    // => EXIT\n}\n\n// Update the read status of the message\nif ($getMsgUuid !== '') {\n    // check if user is allowed to view message\n    if(!in_array($gCurrentUserId, array($message->getValue('msg_usr_id_sender'), $message->getConversationPartner()))) {\n        $gMessage->show($gL10n->get('SYS_INVALID_PAGE_VIEW'));\n        // => EXIT\n    }\n\n    // update the read-status\n    $message->setReadValue();\n\n    if ($getForward === true) {\n        $getMsgUuid = '';\n    } else {\n        $messageStatement = $message->getConversation($message->getValue('msg_id'));\n    }\n\n    $getSubject = $message->getValue('msg_subject');\n    if($gCurrentUserId !== $message->getValue('msg_usr_id_sender')) {\n        $user = new User($gDb, $gProfileFields, $message->getValue('msg_usr_id_sender'));\n    } else {\n        $user = new User($gDb, $gProfileFields, $message->getConversationPartner());\n    }\n    $getUserUuid = $user->getValue('usr_uuid');\n} elseif ($getUserUuid !== '') {\n    $user = new User($gDb, $gProfileFields);\n    $user->readDataByUuid($getUserUuid);\n}\n\n$maxNumberRecipients = 1;\nif ($getMsgType !== TableMessage::MESSAGE_TYPE_PM && $gSettingsManager->getInt('mail_max_receiver') > 0) {\n    $maxNumberRecipients = $gSettingsManager->getInt('mail_max_receiver');\n}\n\n$list = array();\n$arrAllMailRoles = $gCurrentUser->getRolesWriteMails();\n\nif ($gValidLogin && $getMsgType === TableMessage::MESSAGE_TYPE_PM && count($arrAllMailRoles) > 0) {\n    $sql = 'SELECT usr_id, first_name.usd_value AS first_name, last_name.usd_value AS last_name, usr_login_name\n              FROM '.TBL_MEMBERS.'\n        INNER JOIN '.TBL_ROLES.'\n                ON rol_id = mem_rol_id\n        INNER JOIN '.TBL_CATEGORIES.'\n                ON cat_id = rol_cat_id\n        INNER JOIN '.TBL_USERS.'\n                ON usr_id = mem_usr_id\n         LEFT JOIN '.TBL_USER_DATA.' AS last_name\n                ON last_name.usd_usr_id = usr_id\n               AND last_name.usd_usf_id = ? -- $gProfileFields->getProperty(\\'LAST_NAME\\', \\'usf_id\\')\n         LEFT JOIN '.TBL_USER_DATA.' AS first_name\n                ON first_name.usd_usr_id = usr_id\n               AND first_name.usd_usf_id = ? -- $gProfileFields->getProperty(\\'FIRST_NAME\\', \\'usf_id\\')\n             WHERE rol_id IN ('.Database::getQmForValues($arrAllMailRoles).')\n               AND cat_name_intern <> \\'EVENTS\\'\n               AND (  cat_org_id = ? -- $gCurrentOrgId\n                   OR cat_org_id IS NULL )\n               AND mem_begin <= ? -- DATE_NOW\n               AND mem_end   >= ? -- DATE_NOW\n               AND usr_id <> ? -- $gCurrentUserId\n               AND usr_valid  = true\n               AND usr_login_name IS NOT NULL\n          GROUP BY usr_id, last_name.usd_value, first_name.usd_value, usr_login_name\n          ORDER BY last_name.usd_value, first_name.usd_value';\n    $queryParamsArr = array(\n        array(\n            $gProfileFields->getProperty('LAST_NAME', 'usf_id'),\n            $gProfileFields->getProperty('FIRST_NAME', 'usf_id')\n        ),\n        $arrAllMailRoles,\n        array(\n            $gCurrentOrgId,\n            DATE_NOW,\n            DATE_NOW,\n            $gCurrentUserId\n        )\n    );\n    $dropStatement = $gDb->queryPrepared($sql, array_merge($queryParamsArr[0], $queryParamsArr[1], $queryParamsArr[2]));\n\n    while ($row = $dropStatement->fetch()) {\n        $list[] = array($row['usr_id'], $row['last_name'].' '.$row['first_name'].' (' .$row['usr_login_name'].')', '');\n    }\n\n    // no roles or users found then show message\n    if (count($list) === 0) {\n        $gMessage->show($gL10n->get('SYS_NO_ROLES_AND_USERS'));\n        // => EXIT\n    }\n}\n\nif ($getUserUuid !== '') {\n    // if a user ID is given, we need to check if the actual user is allowed to contact this user\n    if ((!$gCurrentUser->editUsers() && !isMember((int) $user->getValue('usr_id'))) || $user->getValue('usr_id') === '') {\n        $gMessage->show($gL10n->get('SYS_USER_ID_NOT_FOUND'));\n        // => EXIT\n    }\n}\n\nif ($getSubject !== '') {\n    $headline = $gL10n->get('SYS_SUBJECT').': '.SecurityUtils::encodeHTML($getSubject);\n} else {\n    $headline = $gL10n->get('SYS_SEND_EMAIL');\n    if ($getMsgType === TableMessage::MESSAGE_TYPE_PM) {\n        $headline = $gL10n->get('SYS_SEND_PRIVATE_MESSAGE');\n    }\n}\n\n// After back navigation the form should be filled with the values from the session\n// otherwise initialize the form values\nif (isset($_SESSION['message_request'])) {\n    $message->setArray($_SESSION['message_request']);\n    $message->addContent($_SESSION['message_request']['msg_body']);\n    $formValues = $_SESSION['message_request'];\n    unset($_SESSION['message_request']);\n\n    if (!isset($formValues['carbon_copy'])) {\n        $formValues['carbon_copy'] = false;\n    }\n    if (!isset($formValues['delivery_confirmation'])) {\n        $formValues['delivery_confirmation'] = false;\n    }\n} else {\n    $message->setValue('msg_subject', $getSubject);\n    $formValues['namefrom']    = '';\n    $formValues['mailfrom']    = '';\n    $formValues['msg_to']      = '';\n    $formValues['carbon_copy'] = $getCarbonCopy;\n    $formValues['delivery_confirmation'] = $getDeliveryConfirmation;\n\n    if ($getForward === false) {\n        $message->addContent('');\n    }\n}\n\nif(!$gValidLogin && $getUserUuid === '' && $getRoleUuid === '') {\n    // visitors have no message modul and start the navigation here\n    $gNavigation->addStartUrl(CURRENT_URL, $headline);\n} else {\n    $gNavigation->addUrl(CURRENT_URL, $headline);\n}\n\n// create html page object\n$page = new HtmlPage('admidio-messages-write', $headline);\n\nif ($getMsgType === TableMessage::MESSAGE_TYPE_PM) {\n    // show form\n    $form = new HtmlForm('pm_send_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/messages/messages_send.php', array('msg_type' => 'PM', 'msg_uuid' => $getMsgUuid)), $page, array('enableFileUpload' => true));\n\n    if ($getUserUuid === '') {\n        $form->openGroupBox('gb_pm_contact_details', $gL10n->get('SYS_CONTACT_DETAILS'));\n        $form->addSelectBox(\n            'msg_to',\n            $gL10n->get('SYS_TO'),\n            $list,\n            array(\n                'property'               => HtmlForm::FIELD_REQUIRED,\n                'multiselect'            => true,\n                'maximumSelectionNumber' => $maxNumberRecipients,\n                'helpTextIdLabel'        => 'SYS_SEND_PRIVATE_MESSAGE_DESC'\n            )\n        );\n        $form->closeGroupBox();\n        $sendto = '';\n    } else {\n        $form->addInput('msg_to', '', $user->getValue('usr_id'), array('property' => HtmlForm::FIELD_HIDDEN));\n        $sendto = ' ' . $gL10n->get('SYS_TO') . ' ' .$user->getValue('FIRST_NAME').' '.$user->getValue('LAST_NAME').' ('.$user->getValue('usr_login_name').')';\n    }\n\n    $form->openGroupBox('gb_pm_message', $gL10n->get('SYS_MESSAGE') . $sendto);\n\n    if ($getSubject === '') {\n        $form->addInput(\n            'msg_subject',\n            $gL10n->get('SYS_SUBJECT'),\n            $message->getValue('msg_subject'),\n            array('maxLength' => 77, 'property' => HtmlForm::FIELD_REQUIRED)\n        );\n    } else {\n        $form->addInput('msg_subject', '', $message->getValue('msg_subject'), array('property' => HtmlForm::FIELD_HIDDEN));\n    }\n\n    $form->addMultilineTextInput(\n        'msg_body',\n        $gL10n->get('SYS_MESSAGE'),\n        $message->getContent(),\n        10,\n        array('maxLength' => 254, 'property' => HtmlForm::FIELD_REQUIRED)\n    );\n\n    $form->closeGroupBox();\n\n    $form->addSubmitButton('btn_send', $gL10n->get('SYS_SEND'), array('icon' => 'fa-envelope'));\n\n    // add form to html page\n    $page->addHtml($form->show());\n} elseif ($getMsgType === TableMessage::MESSAGE_TYPE_EMAIL && $getMsgUuid === '') {\n    if ($getUserUuid !== '') {\n        // check if the user has email address for receiving an email\n        if (!$user->hasEmail()) {\n            $gMessage->show($gL10n->get('SYS_USER_NO_EMAIL', array($user->getValue('FIRST_NAME').' '.$user->getValue('LAST_NAME'))));\n            // => EXIT\n        }\n    } elseif ($getRoleUuid !== '') {\n        // if a certain role is called, then check if the rights for it are available\n        $role = new TableRoles($gDb);\n        $role->readDataByUuid($getRoleUuid);\n\n        // Logged out users are only allowed to write mails to roles with the flag \"all visitors of the site\"\n        // Logged in users are only allowed to write mails to roles they are authorized for\n        // all roles must belong to the current organization\n        if ((!$gValidLogin && $role->getValue('rol_mail_this_role') != 3)\n        || ($gValidLogin  && !$gCurrentUser->hasRightSendMailToRole($role->getValue('rol_id')))\n        || $role->getValue('rol_id') == null) {\n            $gMessage->show($gL10n->get('SYS_INVALID_PAGE_VIEW'));\n            // => EXIT\n        }\n\n        $rollenName = $role->getValue('rol_name');\n    }\n\n    // show form\n    $form = new HtmlForm('mail_send_form', ADMIDIO_URL.FOLDER_MODULES.'/messages/messages_send.php', $page, array('enableFileUpload' => true));\n    $form->openGroupBox('gb_mail_contact_details', $gL10n->get('SYS_CONTACT_DETAILS'));\n\n    $sqlRoleIds = array();\n    $sqlUserIds = '';\n    $sqlParticipationRoles = '';\n\n    if ($getUserUuid !== '') {\n        // usr_id was committed then write email to this user\n        $preloadData = $getUserUuid;\n        $sqlUserIds  = ' AND usr_id = ? -- $user->getValue(\\'usr_id\\')';\n    } elseif ($getRoleUuid !== '') {\n        // role id was committed then write email to this role\n        $preloadData = 'groupID: '.$getRoleUuid;\n        $sqlRoleIds  = array($role->getValue('rol_id'));\n    } else {\n        // no user or role was committed then show list with all roles and users\n        // where the current user has the right to send email\n        $preloadData = isset($formValues['msg_to']) ? $formValues['msg_to'] : '';\n        $sqlRoleIds = $gCurrentUser->getRolesWriteMails();\n        $sqlParticipationRoles = ' AND cat_name_intern <> \\'EVENTS\\' ';\n    }\n\n    // no role id set, then list all roles according to login/logout\n    if ($gValidLogin) {\n        $list = array();\n        $listFormer = array();\n        $listActiveAndFormer = array();\n        $listRoleIdsArray = array();\n\n        if (count($sqlRoleIds) === 0) {\n            // if only send mail to one user than this user must be in a role the current user is allowed to see\n            $listVisibleRoleArray = $gCurrentUser->getRolesViewMemberships();\n        } else {\n            // list array with all roles where user is allowed to send mail to\n            $sql = 'SELECT rol_id, rol_uuid, rol_name\n                      FROM '.TBL_ROLES.'\n                INNER JOIN '.TBL_CATEGORIES.'\n                        ON cat_id = rol_cat_id\n                       AND (  cat_org_id = ? -- $gCurrentOrgId\n                           OR cat_org_id IS NULL)\n                     WHERE rol_id IN ('.Database::getQmForValues($sqlRoleIds).')\n                       AND rol_valid = true\n                           '.$sqlParticipationRoles.'\n                  ORDER BY rol_name ASC';\n            $rolesStatement = $gDb->queryPrepared($sql, array_merge(array($gCurrentOrgId), $sqlRoleIds));\n            $rolesArray = $rolesStatement->fetchAll();\n\n            foreach ($rolesArray as $roleArray) {\n                $role = new TableRoles($gDb);\n                $role->setArray($roleArray);\n                $list[] = array('groupID: '.$roleArray['rol_uuid'], $roleArray['rol_name'], $gL10n->get('SYS_ROLES'). ' (' .$gL10n->get('SYS_ACTIVE_MEMBERS') . ')');\n                $listRoleIdsArray[] = $roleArray['rol_id'];\n                if ($role->hasFormerMembers() > 0 && $gSettingsManager->getBool('mail_show_former')) {\n                    // list role with former members\n                    $listFormer[] = array('groupID: '.$roleArray['rol_uuid'].'+1', $roleArray['rol_name'].' '.'('.$gL10n->get('SYS_FORMER_PL').')', $gL10n->get('SYS_ROLES'). ' (' .$gL10n->get('SYS_FORMER_MEMBERS') . ')');\n                    // list role with active and former members\n                    $listActiveAndFormer[] = array('groupID: '.$roleArray['rol_uuid'].'+2', $roleArray['rol_name'].' '.'('.$gL10n->get('SYS_ACTIVE_FORMER_MEMBERS_SHORT').')', $gL10n->get('SYS_ROLES'). ' (' .$gL10n->get('SYS_ACTIVE_FORMER_MEMBERS') . ')');\n                }\n            }\n\n            $list = array_merge($list, $listFormer, $listActiveAndFormer);\n            $listVisibleRoleArray = array_intersect($listRoleIdsArray, $gCurrentUser->getRolesViewMemberships());\n        }\n\n        if ($getRoleUuid === '' && count($listVisibleRoleArray) > 0) {\n            // if no special role was preselected then list users\n            $sql = 'SELECT usr_uuid, first_name.usd_value AS first_name, last_name.usd_value AS last_name, rol_id, mem_begin, mem_end\n                      FROM '.TBL_MEMBERS.'\n                INNER JOIN '.TBL_ROLES.'\n                        ON rol_id = mem_rol_id\n                INNER JOIN '.TBL_USERS.'\n                        ON usr_id = mem_usr_id\n                INNER JOIN '.TBL_USER_DATA.' AS email\n                        ON email.usd_usr_id = usr_id\n                       AND LENGTH(email.usd_value) > 0\n                INNER JOIN '.TBL_USER_FIELDS.' AS field\n                        ON field.usf_id = email.usd_usf_id\n                       AND field.usf_type = \\'EMAIL\\'\n                 LEFT JOIN '.TBL_USER_DATA.' AS last_name\n                        ON last_name.usd_usr_id = usr_id\n                       AND last_name.usd_usf_id = ? -- $gProfileFields->getProperty(\\'LAST_NAME\\', \\'usf_id\\')\n                 LEFT JOIN '.TBL_USER_DATA.' AS first_name\n                        ON first_name.usd_usr_id = usr_id\n                       AND first_name.usd_usf_id = ? -- $gProfileFields->getProperty(\\'FIRST_NAME\\', \\'usf_id\\')\n                     WHERE usr_id    <> ? -- $gCurrentUserId\n                       AND mem_begin <= ? -- DATE_NOW\n                       AND rol_id IN ('.Database::getQmForValues($listVisibleRoleArray).')\n                           '.$sqlUserIds.'\n                       AND usr_valid = true\n                  ORDER BY last_name, first_name, mem_end DESC';\n            $queryParams = array_merge(\n                array(\n                    (int) $gProfileFields->getProperty('LAST_NAME', 'usf_id'),\n                    (int) $gProfileFields->getProperty('FIRST_NAME', 'usf_id'),\n                    $gCurrentUserId,\n                    DATE_NOW\n                ),\n                $listVisibleRoleArray\n            );\n            if ($sqlUserIds !== '') {\n                $queryParams[] = $user->getValue('usr_id');\n            }\n            $statement = $gDb->queryPrepared($sql, $queryParams);\n\n            $passiveList   = array();\n            $activeList    = array();\n            $currentUserId = '';\n\n            while ($row = $statement->fetch()) {\n                // every user should only be once in the list\n                if ($currentUserId !== $row['usr_uuid']) {\n                    // if membership is active then show them as active members\n                    if ($row['mem_begin'] <= DATE_NOW && $row['mem_end'] >= DATE_NOW) {\n                        $activeList[]  = array($row['usr_uuid'], $row['last_name'].' '.$row['first_name'], $gL10n->get('SYS_ACTIVE_MEMBERS'));\n                        $currentUserId = $row['usr_uuid'];\n                    } elseif ($gSettingsManager->getBool('mail_show_former')) {\n                        $passiveList[] = array($row['usr_uuid'], $row['last_name'].' '.$row['first_name'], $gL10n->get('SYS_FORMER_MEMBERS'));\n                        $currentUserId = $row['usr_uuid'];\n                    }\n                }\n            }\n\n            $list = array_merge($list, $activeList, $passiveList);\n        }\n    } else {\n        $maxNumberRecipients = 1;\n        // list all roles where guests could send mails to\n        $sql = 'SELECT rol_uuid, rol_name\n                  FROM '.TBL_ROLES.'\n            INNER JOIN '.TBL_CATEGORIES.'\n                    ON cat_id = rol_cat_id\n                   AND (  cat_org_id = ? -- $gCurrentOrgId\n                       OR cat_org_id IS NULL)\n                 WHERE rol_mail_this_role = 3\n                   AND rol_valid = true\n              ORDER BY cat_sequence, rol_name';\n\n        $statement = $gDb->queryPrepared($sql, array($gCurrentOrgId));\n        while ($row = $statement->fetch()) {\n            $list[] = array('groupID: '.$row['rol_uuid'], $row['rol_name'], '');\n        }\n    }\n\n    if ($postListUuid !== '') {\n        $preloadData = 'dummy';\n        $showlist = new ListConfiguration($gDb);\n        $showlist->readDataByUuid($postListUuid);\n        $list = array('dummy' => $gL10n->get('SYS_LIST'). (strlen($showlist->getValue('lst_name')) > 0 ? ' - '.$showlist->getValue('lst_name') : ''));\n        $form->addInput('userUuidList', '', $postUserUuidList, array('property' => HtmlForm::FIELD_HIDDEN));\n        $form->addInput('list_uuid', '', $postListUuid, array('property' => HtmlForm::FIELD_HIDDEN));\n    }\n\n    // no roles or users found then show message\n    if (count($list) === 0) {\n        $gMessage->show($gL10n->get('SYS_NO_ROLES_AND_USERS'));\n        // => EXIT\n    }\n\n    $form->addSelectBox(\n        'msg_to',\n        $gL10n->get('SYS_TO'),\n        $list,\n        array(\n            'property'               => HtmlForm::FIELD_REQUIRED,\n            'multiselect'            => true,\n            'maximumSelectionNumber' => $maxNumberRecipients,\n            'helpTextIdLabel'        => 'SYS_SEND_MAIL_TO_ROLE',\n            'defaultValue'           => $preloadData\n        )\n    );\n\n    $form->addLine();\n\n    if ($gCurrentUserId > 0) {\n        $sql = 'SELECT COUNT(*) AS count\n                  FROM '.TBL_USER_FIELDS.'\n            INNER JOIN '. TBL_USER_DATA .'\n                    ON usd_usf_id = usf_id\n                 WHERE usf_type = \\'EMAIL\\'\n                   AND usd_usr_id = ? -- $gCurrentUserId\n                   AND usd_value IS NOT NULL';\n\n        $pdoStatement = $gDb->queryPrepared($sql, array($gCurrentUserId));\n        $possibleEmails = $pdoStatement->fetchColumn();\n\n        $form->addInput(\n            'name',\n            $gL10n->get('SYS_YOUR_NAME'),\n            $gCurrentUser->getValue('FIRST_NAME'). ' '. $gCurrentUser->getValue('LAST_NAME'),\n            array('maxLength' => 50, 'property' => HtmlForm::FIELD_DISABLED)\n        );\n\n        if ($possibleEmails > 1) {\n            $sqlData = array();\n            $sqlData['query'] = 'SELECT email.usd_value AS ID, email.usd_value AS email\n                                   FROM '.TBL_USERS.'\n                             INNER JOIN '.TBL_USER_DATA.' AS email\n                                     ON email.usd_usr_id = usr_id\n                                    AND LENGTH(email.usd_value) > 0\n                             INNER JOIN '.TBL_USER_FIELDS.' AS field\n                                     ON field.usf_id = email.usd_usf_id\n                                    AND field.usf_type = \\'EMAIL\\'\n                                  WHERE usr_id = ? -- $gCurrentUserId\n                                    AND usr_valid = true\n                               GROUP BY email.usd_value, email.usd_value';\n            $sqlData['params'] = array($gCurrentUserId);\n\n            $form->addSelectBoxFromSql(\n                'mailfrom',\n                $gL10n->get('SYS_YOUR_EMAIL'),\n                $gDb,\n                $sqlData,\n                array('maxLength' => 50, 'defaultValue' => $gCurrentUser->getValue('EMAIL'), 'showContextDependentFirstEntry' => false)\n            );\n        } else {\n            $form->addInput(\n                'mailfrom',\n                $gL10n->get('SYS_YOUR_EMAIL'),\n                $gCurrentUser->getValue('EMAIL'),\n                array('maxLength' => 50, 'property' => HtmlForm::FIELD_DISABLED)\n            );\n        }\n    } else {\n        $form->addInput(\n            'namefrom',\n            $gL10n->get('SYS_YOUR_NAME'),\n            $formValues['namefrom'],\n            array('maxLength' => 50, 'property' => HtmlForm::FIELD_REQUIRED)\n        );\n        $form->addInput(\n            'mailfrom',\n            $gL10n->get('SYS_YOUR_EMAIL'),\n            $formValues['mailfrom'],\n            array('type' => 'email', 'maxLength' => 50, 'property' => HtmlForm::FIELD_REQUIRED)\n        );\n    }\n\n    // show option to send a copy to your email address only for registered users because of spam abuse\n    if ($gValidLogin) {\n        $form->addCheckbox('carbon_copy', $gL10n->get('SYS_SEND_COPY'), $formValues['carbon_copy']);\n    }\n\n    // if preference is set then show a checkbox where the user can request a delivery confirmation for the email\n    if (($gCurrentUserId > 0 && (int) $gSettingsManager->get('mail_delivery_confirmation') === 2) || (int) $gSettingsManager->get('mail_delivery_confirmation') === 1) {\n        $form->addCheckbox('delivery_confirmation', $gL10n->get('SYS_DELIVERY_CONFIRMATION'), $formValues['delivery_confirmation']);\n    }\n\n    $form->closeGroupBox();\n\n    $form->openGroupBox('gb_mail_message', $gL10n->get('SYS_MESSAGE'));\n    $form->addInput(\n        'msg_subject',\n        $gL10n->get('SYS_SUBJECT'),\n        $message->getValue('msg_subject'),\n        array('maxLength' => 77, 'property' => HtmlForm::FIELD_REQUIRED)\n    );\n\n    // Only logged in users are allowed to attach files\n    if ($gValidLogin && ($gSettingsManager->getInt('max_email_attachment_size') > 0) && PhpIniUtils::isFileUploadEnabled()) {\n        $form->addFileUpload(\n            'btn_add_attachment',\n            $gL10n->get('SYS_ATTACHMENT'),\n            array(\n                'enableMultiUploads' => true,\n                'maxUploadSize'      => Email::getMaxAttachmentSize(),\n                'multiUploadLabel'   => $gL10n->get('SYS_ADD_ATTACHMENT'),\n                'hideUploadField'    => true,\n                'helpTextIdLabel'    => $gL10n->get('SYS_MAX_ATTACHMENT_SIZE', array(Email::getMaxAttachmentSize(Email::SIZE_UNIT_MEBIBYTE))),\n                'icon'               => 'fa-paperclip'\n            )\n        );\n    }\n\n    // add multiline text element or ckeditor to form\n    if ($gValidLogin && $gSettingsManager->getBool('mail_html_registered_users')) {\n        $form->addEditor('msg_body', '', $message->getContent(), array('property' => HtmlForm::FIELD_REQUIRED, 'helpTextIdInline' => ($gValidLogin && $gSettingsManager->getInt('mail_sending_mode') === Email::SENDINGMODE_SINGLE) ? array('SYS_EMAIL_PARAMETERS_DESC', array('#recipient_firstname#', '#recipient_lastname#', '#recipient_name#', '#recipient_email#')) : null));\n    } else {\n        $form->addMultilineTextInput(\n            'msg_body',\n            $gL10n->get('SYS_TEXT'),\n            $message->getContent(),\n            10,\n            array('property' => HtmlForm::FIELD_REQUIRED)\n        );\n    }\n\n    $form->closeGroupBox();\n\n    // if captchas are enabled then visitors of the website must resolve this\n    if (!$gValidLogin && $gSettingsManager->getBool('enable_mail_captcha')) {\n        $form->openGroupBox('gb_confirmation_of_input', $gL10n->get('SYS_CONFIRMATION_OF_INPUT'));\n        $form->addCaptcha('captcha_code');\n        $form->closeGroupBox();\n    }\n\n    $form->addSubmitButton('btn_send', $gL10n->get('SYS_SEND'), array('icon' => 'fa-envelope'));\n\n    // add form to html page and show page\n    $page->addHtml($form->show());\n}\n\nif (isset($messageStatement)) {\n    $messageContent = new TableMessageContent($gDb);\n\n    while ($row = $messageStatement->fetch()) {\n        $messageContent->setArray($row);\n        $messageFooter = '';\n\n        if ($getMsgType === TableMessage::MESSAGE_TYPE_PM) {\n            if ($messageContent->getValue('msc_usr_id') === $gCurrentUserId) {\n                $sentUser = $gCurrentUser->getValue('FIRST_NAME'). ' '. $gCurrentUser->getValue('LAST_NAME');\n            } else {\n                $sentUser = $user->getValue('FIRST_NAME').' '.$user->getValue('LAST_NAME');\n            }\n\n            $messageHeader = $gL10n->get('SYS_USERNAME_WITH_TIMESTAMP', array($sentUser,\n                $messageContent->getValue('msc_timestamp', $gSettingsManager->getString('system_date')),\n                $messageContent->getValue('msc_timestamp', $gSettingsManager->getString('system_time'))\n            ));\n            $messageIcon   = 'fa-comment-alt';\n        } else {\n            $messageHeader = $messageContent->getValue('msc_timestamp', $gSettingsManager->getString('system_date') . ' ' . $gSettingsManager->getString('system_time')) .'<br />' . $gL10n->get('SYS_TO') . ': ' . $message->getRecipientsNamesString();\n            $messageIcon   = 'fa-envelope';\n            $attachments   = $message->getAttachmentsInformations();\n\n            if (count($attachments) > 0) {\n                $messageFooter .= '<div class=\"card-footer\"><span class=\"mr-3\"><i class=\"fas fa-paperclip\"></i> ' . $gL10n->get('SYS_ATTACHMENT') . '</span>';\n            }\n\n            foreach ($attachments as $attachment) {\n                // get complete path with filename of the attachment\n                $attachmentPath = ADMIDIO_PATH . FOLDER_DATA . '/messages_attachments/' . $attachment['admidio_file_name'];\n\n                if (file_exists($attachmentPath)) {\n                    $messageFooter .= '<span class=\"admidio-attachment mr-3\"><a href=\"' . SecurityUtils::encodeUrl(ADMIDIO_URL . FOLDER_MODULES . '/messages/get_attachment.php', array('msa_id' => $attachment['msa_id'])) . '\">' . $attachment['file_name'] . '</a></span>';\n                } else {\n                    $messageFooter .= '<span class=\"admidio-attachment mr-3\">' . $attachment['file_name'] . '</span>';\n                }\n            }\n\n            if (count($attachments) > 0) {\n                $messageFooter .= '</div>';\n            }\n        }\n\n        $page->addHtml('\n        <div class=\"card admidio-blog\">\n            <div class=\"card-header\">\n                <i class=\"fas ' . $messageIcon . '\"></i>' . $messageHeader . '\n            </div>\n            <div class=\"card-body\">' . $messageContent->getValue('msc_message') . '</div>\n            ' . $messageFooter . '\n        </div>');\n    }\n}\n\n// show page\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit photo alben\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n * photo_uuid : UUID of the album that should be edited\n * mode       : - new (new album)\n *              - change (edit album)\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getPhotoUuid = admFuncVariableIsValid($_GET, 'photo_uuid', 'string');\n$getMode      = admFuncVariableIsValid($_GET, 'mode', 'string', array('requireValue' => true, 'validValues' => array('new', 'change')));\n\n$photoAlbumsArray = array('ALL' => $gL10n->get('PHO_PHOTO_ALBUMS'));\n\n// check if the module is enabled and disallow access if it's disabled\nif ((int) $gSettingsManager->get('enable_photo_module') === 0) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n$headline = '';\nif ($getMode === 'new') {\n    $headline = $gL10n->get('PHO_CREATE_ALBUM');\n} elseif ($getMode === 'change') {\n    $headline = $gL10n->get('PHO_EDIT_ALBUM');\n}\n\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\n// create photo album object\n$photoAlbum = new TablePhotos($gDb);\n\nif ($getMode === 'new') {\n    $parentAlbumUuid = $getPhotoUuid;\n    $getPhotoUuid = null;\n} elseif ($getMode === 'change') {\n    $photoAlbum->readDataByUuid($getPhotoUuid);\n    $parentAlbum = new TablePhotos($gDb, $photoAlbum->getValue('pho_pho_id_parent'));\n    $parentAlbumUuid = $parentAlbum->getValue('pho_uuid');\n}\n\n// check if the user is allowed to edit this photo album\nif (!$photoAlbum->isEditable()) {\n    $gMessage->show($gL10n->get('PHO_NO_RIGHTS'));\n    // => EXIT\n}\n\nif (isset($_SESSION['photo_album_request'])) {\n    // durch fehlerhafte Eingabe ist der User zu diesem Formular zurueckgekehrt\n    // nun die vorher eingegebenen Inhalte ins Objekt schreiben\n    $photoAlbum->setArray($_SESSION['photo_album_request']);\n    unset($_SESSION['photo_album_request']);\n}\n\n/**\n * Read the album structure to an array that could be used for a select box.\n * @param int         $parentId\n * @param string      $vorschub\n * @param int         $currentAlbumPhoId\n */\nfunction subfolder(int $parentId, string $vorschub, int $currentAlbumPhoId)\n{\n    global $gDb, $gCurrentOrgId, $photoAlbumsArray;\n\n    $vorschub .= '&nbsp;&nbsp;&nbsp;';\n    $sqlConditionParentId = '';\n    $parentPhotoAlbum = new TablePhotos($gDb);\n\n    $queryParams = array($currentAlbumPhoId, $gCurrentOrgId);\n\n    // read all sub albums of the parent album\n    if ($parentId > 0) {\n        $sqlConditionParentId .= ' AND pho_pho_id_parent = ? -- $parentId';\n        $queryParams[] = $parentId;\n    } else {\n        $sqlConditionParentId .= ' AND pho_pho_id_parent IS NULL';\n    }\n\n    $sql = 'SELECT *\n              FROM '.TBL_PHOTOS.'\n             WHERE pho_id    <> ? -- $photoAlbum->getValue(\\'pho_id\\')\n               AND pho_org_id = ? -- $gCurrentOrgId\n                   '.$sqlConditionParentId;\n    $childStatement = $gDb->queryPrepared($sql, $queryParams);\n\n    while ($admPhotoChild = $childStatement->fetch()) {\n        $parentPhotoAlbum->clear();\n        $parentPhotoAlbum->setArray($admPhotoChild);\n\n        // add entry to array of all photo albums\n        $photoAlbumsArray[$parentPhotoAlbum->getValue('pho_uuid')] =\n            $vorschub.'&#151; '.$parentPhotoAlbum->getValue('pho_name').'&nbsp('.$parentPhotoAlbum->getValue('pho_begin', 'Y').')';\n\n        subfolder((int) $parentPhotoAlbum->getValue('pho_id'), $vorschub, $currentAlbumPhoId);\n    }//while\n}//function\n\n// create html page object\n$page = new HtmlPage('admidio-photo-album-edit', $headline);\n\n// show form\n$form = new HtmlForm('photo_album_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_album_function.php', array('photo_uuid' => $getPhotoUuid, 'mode' => $getMode)), $page);\n$form->addInput(\n    'pho_name',\n    $gL10n->get('PHO_ALBUM'),\n    $photoAlbum->getValue('pho_name'),\n    array('property' => HtmlForm::FIELD_REQUIRED, 'maxLength' => 50)\n);\nsubfolder(0, '', $photoAlbum->getValue('pho_id'));\n$form->addSelectBox(\n    'parent_album_uuid',\n    $gL10n->get('PHO_PARENT_ALBUM'),\n    $photoAlbumsArray,\n    array(\n        'property'                       => HtmlForm::FIELD_REQUIRED,\n        'defaultValue'                   => $parentAlbumUuid,\n        'showContextDependentFirstEntry' => false,\n        'helpTextIdLabel'                => $gL10n->get('PHO_PARENT_ALBUM_DESC', array('PHO_PHOTO_ALBUMS'))\n    )\n);\n$form->addInput(\n    'pho_begin',\n    $gL10n->get('SYS_START'),\n    $photoAlbum->getValue('pho_begin'),\n    array('property' => HtmlForm::FIELD_REQUIRED, 'type' => 'date', 'maxLength' => 10)\n);\n$form->addInput(\n    'pho_end',\n    $gL10n->get('SYS_END'),\n    $photoAlbum->getValue('pho_end'),\n    array('type' => 'date', 'maxLength' => 10)\n);\n$form->addInput(\n    'pho_photographers',\n    $gL10n->get('PHO_PHOTOGRAPHER'),\n    $photoAlbum->getValue('pho_photographers'),\n    array('maxLength' => 100)\n);\n$form->addMultilineTextInput(\n    'pho_description',\n    $gL10n->get('SYS_DESCRIPTION'),\n    $photoAlbum->getValue('pho_description'),\n    6,\n    array('maxLength' => 4000)\n);\n$form->addCheckbox(\n    'pho_locked',\n    $gL10n->get('PHO_ALBUM_LOCK'),\n    (bool) $photoAlbum->getValue('pho_locked'),\n    array('helpTextIdLabel' => 'PHO_ALBUM_LOCK_DESC')\n);\n\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check', 'class' => ' offset-sm-3'));\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $photoAlbum->getValue('pho_usr_id_create'),\n    $photoAlbum->getValue('pho_timestamp_create'),\n    (int) $photoAlbum->getValue('pho_usr_id_change'),\n    $photoAlbum->getValue('pho_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit profile fields\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * usf_uuid : UUID of the profile field that should be edited\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getUsfUuid = admFuncVariableIsValid($_GET, 'usf_uuid', 'string');\n\n// only authorized users can edit the profile fields\nif (!$gCurrentUser->isAdministrator()) {\n    $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n    // => EXIT\n}\n\n// benutzerdefiniertes Feldobjekt anlegen\n$userField = new TableUserField($gDb);\n\nif ($getUsfUuid !== '') {\n    $userField->readDataByUuid($getUsfUuid);\n\n    $headline = $gL10n->get('ORG_EDIT_PROFILE_FIELD');\n\n    // hidden must be 0, if the flag should be set\n    if ($userField->getValue('usf_hidden') == 1) {\n        $userField->setValue('usf_hidden', 0);\n    } else {\n        $userField->setValue('usf_hidden', 1);\n    }\n\n    // Pruefung, ob das Feld zur aktuellen Organisation gehoert\n    if ($userField->getValue('cat_org_id') > 0\n    && (int) $userField->getValue('cat_org_id') !== $gCurrentOrgId) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n} else {\n    $headline = $gL10n->get('ORG_CREATE_PROFILE_FIELD');\n\n    // default values for a new field\n    $userField->setValue('usf_hidden', 1);\n    $userField->setValue('usf_registration', 1);\n}\n\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\nif (isset($_SESSION['fields_request'])) {\n    // hidden must be 0, if the flag should be set\n    if ($_SESSION['fields_request']['usf_hidden'] == 1) {\n        $_SESSION['fields_request']['usf_hidden'] = 0;\n    } else {\n        $_SESSION['fields_request']['usf_hidden'] = 1;\n    }\n\n    // due to incorrect input, the user has returned to this form\n    // Now write the previously entered content into the object\n    $userField->setArray($_SESSION['fields_request']);\n    unset($_SESSION['fields_request']);\n}\n\n// create html page object\n$page = new HtmlPage('admidio-profile-fields-edit', $headline);\n\n$page->addJavascript(\n    '\n    $(\"#usf_type\").change(function() {\n        if ($(\"#usf_type\").val() === \"DROPDOWN\" || $(\"#usf_type\").val() === \"RADIO_BUTTON\") {\n            $(\"#usf_value_list_group\").show(\"slow\");\n            $(\"#usf_value_list\").attr(\"required\", \"required\");\n        } else {\n            $(\"#usf_value_list\").removeAttr(\"required\");\n            $(\"#usf_value_list_group\").hide();\n        }\n    });\n    $(\"#usf_type\").trigger(\"change\");',\n    true\n);\n\n// show form\n$form = new HtmlForm('profile_fields_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/profile-fields/profile_fields_function.php', array('usf_uuid' => $getUsfUuid, 'mode' => '1')), $page);\n$form->openGroupBox('gb_designation', $gL10n->get('SYS_DESIGNATION'));\nif ($userField->getValue('usf_system') == 1) {\n    $form->addInput(\n        'usf_name',\n        $gL10n->get('SYS_NAME'),\n        $userField->getValue('usf_name'),\n        array('maxLength' => 100, 'property' => HtmlForm::FIELD_DISABLED)\n    );\n} else {\n    $form->addInput(\n        'usf_name',\n        $gL10n->get('SYS_NAME'),\n        $userField->getValue('usf_name'),\n        array('maxLength' => 100, 'property' => HtmlForm::FIELD_REQUIRED)\n    );\n}\n\n$usfNameIntern = $userField->getValue('usf_name_intern');\n// show internal field name for information\nif ($getUsfUuid !== '') {\n    $form->addInput(\n        'usf_name_intern',\n        $gL10n->get('SYS_INTERNAL_NAME'),\n        $usfNameIntern,\n        array('maxLength' => 100, 'property' => HtmlForm::FIELD_DISABLED, 'helpTextIdLabel' => 'SYS_INTERNAL_NAME_DESC')\n    );\n}\n\nif ($userField->getValue('usf_system') == 1) {\n    $form->addInput(\n        'usf_cat_id',\n        $gL10n->get('SYS_CATEGORY'),\n        $userField->getValue('cat_name'),\n        array('maxLength' => 100, 'property' => HtmlForm::FIELD_DISABLED)\n    );\n} else {\n    $form->addSelectBoxForCategories(\n        'usf_cat_id',\n        $gL10n->get('SYS_CATEGORY'),\n        $gDb,\n        'USF',\n        HtmlForm::SELECT_BOX_MODUS_EDIT,\n        array('property' => HtmlForm::FIELD_REQUIRED, 'defaultValue' => $userField->getValue('cat_uuid'))\n    );\n}\n$form->closeGroupBox();\n$form->openGroupBox('gb_properties', $gL10n->get('SYS_PROPERTIES'));\n$userFieldText = array(\n    'CHECKBOX'     => $gL10n->get('SYS_CHECKBOX'),\n    'DATE'         => $gL10n->get('SYS_DATE'),\n    'DECIMAL'      => $gL10n->get('SYS_DECIMAL_NUMBER'),\n    'DROPDOWN'     => $gL10n->get('SYS_DROPDOWN_LISTBOX'),\n    'EMAIL'        => $gL10n->get('SYS_EMAIL'),\n    'NUMBER'       => $gL10n->get('SYS_NUMBER'),\n    'PHONE'        => $gL10n->get('SYS_PHONE'),\n    'RADIO_BUTTON' => $gL10n->get('SYS_RADIO_BUTTON'),\n    'TEXT'         => $gL10n->get('SYS_TEXT').' (100 '.$gL10n->get('SYS_CHARACTERS').')',\n    'TEXT_BIG'     => $gL10n->get('SYS_TEXT').' (4000 '.$gL10n->get('SYS_CHARACTERS').')',\n    'URL'          => $gL10n->get('SYS_URL')\n);\nasort($userFieldText);\n\nif ($userField->getValue('usf_system') == 1) {\n    // for system fields, the data type may no longer be changed\n    $form->addInput(\n        'usf_type',\n        $gL10n->get('ORG_DATATYPE'),\n        $userFieldText[$userField->getValue('usf_type')],\n        array('maxLength' => 30, 'property' => HtmlForm::FIELD_DISABLED)\n    );\n} else {\n    // if it's not a system field the user must select the data type\n    $form->addSelectBox(\n        'usf_type',\n        $gL10n->get('ORG_DATATYPE'),\n        $userFieldText,\n        array('property' => HtmlForm::FIELD_REQUIRED, 'defaultValue' => $userField->getValue('usf_type'))\n    );\n}\n$form->addMultilineTextInput(\n    'usf_value_list',\n    $gL10n->get('ORG_VALUE_LIST'),\n    $userField->getValue('usf_value_list'),\n    6,\n    array('property' => HtmlForm::FIELD_REQUIRED, 'helpTextIdLabel' => 'ORG_VALUE_LIST_DESC')\n);\n$mandatoryFieldValues = array(0 => 'SYS_NO', 1 => 'SYS_YES', 2 => 'SYS_ONLY_AT_REGISTRATION_AND_OWN_PROFILE', 3 => 'SYS_NOT_AT_REGISTRATION');\nif ($usfNameIntern === 'LAST_NAME' || $usfNameIntern === 'FIRST_NAME') {\n    $form->addInput(\n        'usf_required_input',\n        $gL10n->get('SYS_REQUIRED_INPUT'),\n        $gL10n->get($mandatoryFieldValues[$userField->getValue('usf_required_input')]),\n        array('maxLength' => 50, 'property' => HtmlForm::FIELD_DISABLED)\n    );\n} else {\n    $form->addSelectBox(\n        'usf_required_input',\n        $gL10n->get('SYS_REQUIRED_INPUT'),\n        $mandatoryFieldValues,\n        array('property' => HtmlForm::FIELD_REQUIRED, 'defaultValue' => $userField->getValue('usf_required_input'))\n    );\n}\n$form->addCheckbox(\n    'usf_hidden',\n    $gL10n->get('ORG_FIELD_NOT_HIDDEN'),\n    (bool) $userField->getValue('usf_hidden'),\n    array('helpTextIdLabel' => 'ORG_FIELD_HIDDEN_DESC', 'icon' => 'fa-eye')\n);\n$form->addCheckbox(\n    'usf_disabled',\n    $gL10n->get('ORG_FIELD_DISABLED', array($gL10n->get('SYS_RIGHT_EDIT_USER'))),\n    (bool) $userField->getValue('usf_disabled'),\n    array('helpTextIdLabel' => 'ORG_FIELD_DISABLED_DESC', 'icon' => 'fa-key')\n);\n\nif ($usfNameIntern === 'LAST_NAME' || $usfNameIntern === 'FIRST_NAME' || $usfNameIntern === 'EMAIL') {\n    $form->addCheckbox(\n        'usf_registration',\n        $gL10n->get('ORG_FIELD_REGISTRATION'),\n        (bool) $userField->getValue('usf_registration'),\n        array('property' => HtmlForm::FIELD_DISABLED, 'icon' => 'fa-address-card')\n    );\n} else {\n    $form->addCheckbox(\n        'usf_registration',\n        $gL10n->get('ORG_FIELD_REGISTRATION'),\n        (bool) $userField->getValue('usf_registration'),\n        array('icon' => 'fa-address-card')\n    );\n}\n$form->addInput(\n    'usf_default_value',\n    $gL10n->get('SYS_DEFAULT_VALUE'),\n    $userField->getValue('usf_default_value'),\n    array('helpTextIdLabel' => 'SYS_DEFAULT_VALUE_DESC')\n);\n$form->addInput(\n    'usf_regex',\n    $gL10n->get('SYS_REGULAR_EXPRESSION'),\n    $userField->getValue('usf_regex'),\n    array('helpTextIdLabel' => 'SYS_REGULAR_EXPRESSION_DESC')\n);\n$form->addInput(\n    'usf_icon',\n    $gL10n->get('SYS_ICON'),\n    $userField->getValue('usf_icon'),\n    array(\n        'maxLength' => 100,\n        'helpTextIdLabel' => $gL10n->get('SYS_FONT_AWESOME_DESC', array('<a href=\"https://fontawesome.com/icons?d=gallery&s=brands,solid&m=free\" target=\"_blank\">', '</a>'))\n    )\n);\n$form->addInput(\n    'usf_url',\n    $gL10n->get('SYS_URL'),\n    $userField->getValue('usf_url'),\n    array('maxLength' => 2000, 'helpTextIdLabel' => 'ORG_FIELD_URL_DESC')\n);\n$form->closeGroupBox();\n$form->openGroupBox('gb_description', $gL10n->get('SYS_DESCRIPTION'), 'admidio-panel-editor');\n$form->addEditor('usf_description', '', $userField->getValue('usf_description'), array('height' => '200px'));\n$form->addDescription($gL10n->get('SYS_DESCRIPTION_POPOVER_DESC'));\n$form->addCheckbox(\n    'usf_description_inline',\n    $gL10n->get('SYS_DESCRIPTION_INLINE_DESC'),\n    (bool) $userField->getValue('usf_description_inline')\n);\n$form->closeGroupBox();\n\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check'));\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $userField->getValue('usf_usr_id_create'),\n    $userField->getValue('usf_timestamp_create'),\n    (int) $userField->getValue('usf_usr_id_change'),\n    $userField->getValue('usf_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit rooms\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * room_uuid : UUID of room, that should be shown\n * headline  : headline for room module\n *             (Default) SYS_ROOM\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getRoomUuid = admFuncVariableIsValid($_GET, 'room_uuid', 'string');\n$getHeadline = admFuncVariableIsValid($_GET, 'headline', 'string', array('defaultValue' => $gL10n->get('SYS_ROOM')));\n\n// only authorized users are allowed to edit the rooms\nif (!$gCurrentUser->isAdministrator()) {\n    $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n    // => EXIT\n}\n\n// Create room object\n$room = new TableRooms($gDb);\n\nif ($getRoomUuid !== '') {\n    $headline = $gL10n->get('SYS_EDIT_VAR', array($getHeadline));\n\n    $room->readDataByUuid($getRoomUuid);\n} else {\n    $headline = $gL10n->get('SYS_CREATE_VAR', array($getHeadline));\n}\n\n// add current url to navigation stack\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\nif (isset($_SESSION['rooms_request'])) {\n    // due to incorrect input the user has returned to this form\n    // now write the previously entered contents into the object\n    $room->setArray($_SESSION['rooms_request']);\n    unset($_SESSION['rooms_request']);\n}\n\n// create html page object\n$page = new HtmlPage('admidio-rooms-edit', $headline);\n\n// show form\n$form = new HtmlForm('rooms_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/rooms/rooms_function.php', array('room_uuid' => $getRoomUuid, 'mode' => '1')), $page);\n$form->openGroupBox('gb_name_properties', $gL10n->get('SYS_NAME').' &amp; '.$gL10n->get('SYS_PROPERTIES'));\n$form->addInput(\n    'room_name',\n    $gL10n->get('SYS_ROOM'),\n    $room->getValue('room_name'),\n    array('maxLength' => 100, 'property' => HtmlForm::FIELD_REQUIRED)\n);\n$form->addInput(\n    'room_capacity',\n    $gL10n->get('SYS_CAPACITY').' ('.$gL10n->get('SYS_SEATING').')',\n    (int) $room->getValue('room_capacity'),\n    array('type' => 'number', 'minNumber' => 0, 'maxNumber' => 99999, 'step' => 1, 'property' => HtmlForm::FIELD_REQUIRED)\n);\n$form->addInput(\n    'room_overhang',\n    $gL10n->get('SYS_OVERHANG'),\n    (int) $room->getValue('room_overhang'),\n    array('type' => 'number', 'minNumber' => 0, 'maxNumber' => 99999, 'step' => 1, 'helpTextIdLabel' => 'DAT_ROOM_OVERHANG')\n);\n$form->closeGroupBox();\n$form->openGroupBox('gb_description', $gL10n->get('SYS_DESCRIPTION'), 'admidio-panel-editor');\n$form->addEditor('room_description', '', $room->getValue('room_description'), array('height' => '150px'));\n$form->closeGroupBox();\n\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check'));\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $room->getValue('room_usr_id_create'),\n    $room->getValue('room_timestamp_create'),\n    (int) $room->getValue('dat_usr_id_change'),\n    $room->getValue('room_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Create and edit relation types\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * urt_uuid : UUID of the relation type that should be edited\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getUrtUuid = admFuncVariableIsValid($_GET, 'urt_uuid', 'string');\n\nif (!$gSettingsManager->getBool('members_enable_user_relations')) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\nif (!$gCurrentUser->isAdministrator()) {\n    $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n    // => EXIT\n}\n\n$headline = $gL10n->get('SYS_RELATIONSHIP_CONFIGURATION');\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\n$relationType1 = new TableUserRelationType($gDb);\n$relationType2 = new TableUserRelationType($gDb);\n\nif ($getUrtUuid !== '') {\n    $relationType1->readDataByUuid($getUrtUuid);\n    $relationType2->readDataById((int) $relationType1->getValue('urt_id_inverse'));\n}\n\n// create html page object\n$page = new HtmlPage('admidio-relationtypes-edit', $headline);\n\n// show form\n$form = new HtmlForm('relationtype_edit_form', SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/userrelations/relationtypes_function.php', array('urt_uuid' => $getUrtUuid, 'mode' => '1')), $page);\n\n$form->openGroupBox('gb_user_relationship', $gL10n->get('SYS_USER_RELATION'));\n$form->addInput(\n    'urt_name',\n    $gL10n->get('SYS_NAME'),\n    $relationType1->getValue('urt_name'),\n    array('maxLength' => 100, 'property' => HtmlForm::FIELD_REQUIRED)\n);\n$form->addInput(\n    'urt_name_male',\n    $gL10n->get('SYS_MALE'),\n    ($relationType1->getValue('urt_name_male') !== $relationType1->getValue('urt_name')) ? $relationType1->getValue('urt_name_male') : '',\n    array('maxLength' => 100)\n);\n$form->addInput(\n    'urt_name_female',\n    $gL10n->get('SYS_FEMALE'),\n    ($relationType1->getValue('urt_name_female') !== $relationType1->getValue('urt_name')) ? $relationType1->getValue('urt_name_female') : '',\n    array('maxLength' => 100)\n);\n$form->addCheckbox(\n    'urt_edit_user',\n    $gL10n->get('SYS_EDIT_USER_IN_RELATION'),\n    (bool) $relationType1->getValue('urt_edit_user'),\n    array('helpTextIdLabel' => 'SYS_RELATIONSHIP_TYPE_EDIT_USER_DESC')\n);\n\n$options = array('defaultValue' => $relationType1->getRelationTypeString(), 'helpTextIdLabel' => 'SYS_RELATIONSHIP_TYPE_DESC');\nif (!$relationType1->isNewRecord()) {\n    $options['property'] = HtmlForm::FIELD_DISABLED;\n}\n\n$form->addRadioButton(\n    'relation_type',\n    $gL10n->get('SYS_USER_RELATION_TYPE'),\n    array(\n        'asymmetrical'   => $gL10n->get('SYS_ASYMMETRICAL'),\n        'symmetrical'    => $gL10n->get('SYS_SYMMETRICAL'),\n        'unidirectional' => $gL10n->get('SYS_UNIDIRECTIONAL')\n    ),\n    $options\n);\n$form->closeGroupBox();\n\n$form->openGroupBox('gb_opposite_relationship', $gL10n->get('SYS_OPPOSITE_RELATIONSHIP'));\n$page->addJavascript(\n    '\n    function checkRelationTypeNames() {\n        $(\"#btn_save\").prop(\"disabled\", $(\"#urt_name\").val() === $(\"#urt_name_inverse\").val());\n    }\n    $(\"#urt_name\").on(\"input\", checkRelationTypeNames);\n    $(\"#urt_name_inverse\").on(\"input\", checkRelationTypeNames);\n\n    /**\n     * @param {object} element\n     * @param {int}    duration\n     */\n    function updateRelationType(element, duration) {\n        if ($(element).val() === \"unidirectional\" || $(element).val() === \"symmetrical\") {\n            $(\"#urt_name_inverse\").prop(\"required\", false);\n            $(\"#gb_opposite_relationship\").hide(duration);\n            $(\"#urt_name_inverse_group\").hide(duration);\n            $(\"#urt_name_male_inverse_group\").hide(duration);\n            $(\"#urt_name_female_inverse_group\").hide(duration);\n            $(\"#urt_edit_user_inverse_group\").hide(duration);\n        }\n        else if ($(element).val() === \"asymmetrical\") {\n            $(\"#urt_name_inverse\").prop(\"required\", true);\n            $(\"#gb_opposite_relationship\").show(duration);\n            $(\"#urt_name_inverse_group\").show(duration);\n            $(\"#urt_name_male_inverse_group\").show(duration);\n            $(\"#urt_name_female_inverse_group\").show(duration);\n            $(\"#urt_edit_user_inverse_group\").show(duration);\n        }\n    }\n    $(\"input[type=radio][name=relation_type]\").change(function() {\n        updateRelationType(this, \"slow\");\n    });\n    updateRelationType($(\"input[type=radio][name=relation_type]:checked\"));\n    ',\n    true\n);\n\n$form->addInput(\n    'urt_name_inverse',\n    $gL10n->get('SYS_NAME'),\n    $relationType2->getValue('urt_name'),\n    array('maxLength' => 100, 'property' => HtmlForm::FIELD_REQUIRED)\n);\n$form->addInput(\n    'urt_name_male_inverse',\n    $gL10n->get('SYS_MALE'),\n    ($relationType2->getValue('urt_name_male') !== $relationType2->getValue('urt_name')) ? $relationType2->getValue('urt_name_male') : '',\n    array('maxLength' => 100)\n);\n$form->addInput(\n    'urt_name_female_inverse',\n    $gL10n->get('SYS_FEMALE'),\n    ($relationType2->getValue('urt_name_female') !== $relationType2->getValue('urt_name')) ? $relationType2->getValue('urt_name_female') : '',\n    array('maxLength' => 100)\n);\n$form->addCheckbox(\n    'urt_edit_user_inverse',\n    $gL10n->get('SYS_EDIT_USER_IN_RELATION'),\n    (bool) $relationType2->getValue('urt_edit_user'),\n    array('helpTextIdLabel' => 'SYS_RELATIONSHIP_TYPE_EDIT_USER_DESC')\n);\n$form->closeGroupBox();\n\n$form->addSubmitButton('btn_save', $gL10n->get('SYS_SAVE'), array('icon' => 'fa-check'));\n$form->addHtml(admFuncShowCreateChangeInfoById(\n    (int) $relationType1->getValue('urt_usr_id_create'),\n    $relationType1->getValue('urt_timestamp_create'),\n    (int) $relationType1->getValue('urt_usr_id_change'),\n    $relationType1->getValue('urt_timestamp_change')\n));\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n ***********************************************************************************************\n */\n\n/**\n * Creates an Admidio specific form with special elements\n *\n * This class inherits the common HtmlFormBasic class and extends their elements\n * with custom Admidio form elements. The class should be used to create the\n * html part of all Admidio forms. The Admidio elements will contain\n * the label of fields and some other specific features like an identification\n * of mandatory fields, help buttons and special css classes for every\n * element.\n *\n * **Code examples**\n * ```\n * // create a simple form with one input field and a button\n * $form = new HtmlForm('simple-form', 'next_page.php');\n * $form->openGroupBox('gbSimpleForm', $gL10n->get('SYS_SIMPLE_FORM'));\n * $form->addInput('name', $gL10n->get('SYS_NAME'), $formName);\n * $form->addSelectBox('type', $gL10n->get('SYS_TYPE'), array('simple' => 'SYS_SIMPLE', 'very-simple' => 'SYS_VERY_SIMPLE'),\n *                     array('defaultValue' => 'simple', 'showContextDependentFirstEntry' => true));\n * $form->closeGroupBox();\n * $form->addSubmitButton('next-page', $gL10n->get('SYS_NEXT'), array('icon' => 'fa-arrow-circle-right'));\n * $form->show();\n * ```\n */\nclass HtmlForm extends HtmlFormBasic\n{\n    public const FIELD_DEFAULT  = 0;\n    public const FIELD_REQUIRED = 1;\n    public const FIELD_DISABLED = 2;\n    public const FIELD_READONLY = 3;\n    public const FIELD_HIDDEN   = 4;\n\n    public const SELECT_BOX_MODUS_EDIT = 'EDIT_CATEGORIES';\n    public const SELECT_BOX_MODUS_FILTER = 'FILTER_CATEGORIES';\n\n    /**\n     * @var bool Flag if this form has required fields. Then a notice must be written at the end of the form\n     */\n    protected $flagRequiredFields = false;\n    /**\n     * @var bool Flag if required fields should get a special css class to make them more visible to the user.\n     */\n    protected $showRequiredFields;\n    /**\n     * @var HtmlPage A HtmlPage object that will be used to add javascript code or files to the html output page.\n     */\n    protected $htmlPage;\n    /**\n     * @var int Number of visible elements in this form. Hidden elements are not count because no interaction is possible.\n     */\n    protected $countElements = 0;\n    /**\n     * @var string Form type. Possible values are **default**, **vertical** or **navbar**.\n     */\n    protected $type;\n    /**\n     * @var string ID of the form\n     */\n    protected $id;\n    /**\n     * @var bool Flag that indicates if a bootstrap button-group is open and should be closed later\n     */\n    protected $buttonGroupOpen = false;\n\n    /**\n     * Constructor creates the form element\n     * @param string   $id       ID of the form\n     * @param string   $action   Action attribute of the form\n     * @param HtmlPage|null $htmlPage (optional) A HtmlPage object that will be used to add javascript code or files to the html output page.\n     * @param array    $options  (optional) An array with the following possible entries:\n     *                           - **type** : Set the form type. Every type has some special features:\n     *                             + **default**  : A form that can be used to edit and save data of a database table. The label\n     *                               and the element have a horizontal orientation.\n     *                             + **vertical** : A form that can be used to edit and save data but has a vertical orientation.\n     *                               The label is positioned above the form element.\n     *                             + **navbar**   : A form that should be used in a navbar. The form content will\n     *                               be sent with the 'GET' method and this form should not get a default focus.\n     *                           - **method** : Method how the values of the form are submitted.\n     *                             Possible values are **get** and **post** (default).\n     *                           - **enableFileUpload** : Set specific parameters that are necessary for file upload with a form\n     *                           - **showRequiredFields** : If this is set to **true** (default) then every required field got a special\n     *                             css class and also the form got a **div** that explains the required layout.\n     *                             If this is set to **false** then only the html flag **required** will be set.\n     *                           - **setFocus** : Default is set to **true**. Set the focus on page load to the first field\n     *                             of this form.\n     *                           - **class** : An additional css classname. The class **form-horizontal**\n     *                             is set as default and need not set with this parameter.\n     */\n    public function __construct($id, $action = null, HtmlPage $htmlPage = null, array $options = array())\n    {\n        // create array with all options\n        $optionsDefault = array(\n            'type'               => 'default',\n            'enableFileUpload'   => false,\n            'showRequiredFields' => true,\n            'setFocus'           => true,\n            'class'              => '',\n            'method'             => 'post'\n        );\n\n        // navbar forms should send the data as GET if it's not explicit set\n        if (isset($options['type']) && $options['type'] === 'navbar' && !isset($options['method'])) {\n            $options['method'] = 'get';\n        }\n\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        parent::__construct($action, $id, $optionsAll['method']);\n\n        $this->showRequiredFields = $optionsAll['showRequiredFields'];\n        $this->type = $optionsAll['type'];\n        $this->id   = $id;\n\n        // set specific Admidio css form class\n        $this->addAttribute('role', 'form');\n\n        if ($this->type === 'default') {\n            $optionsAll['class'] .= ' form-horizontal form-dialog';\n        } elseif ($this->type === 'vertical') {\n            $optionsAll['class'] .= ' admidio-form-vertical form-dialog';\n        } elseif ($this->type === 'navbar') {\n            $optionsAll['class'] .= ' form-inline ';\n        }\n\n        if ($optionsAll['class'] !== '') {\n            $this->addAttribute('class', $optionsAll['class']);\n        }\n\n        // Set specific parameters that are necessary for file upload with a form\n        if ($optionsAll['enableFileUpload']) {\n            $this->addAttribute('enctype', 'multipart/form-data');\n        }\n\n        if ($optionsAll['method'] === 'post' && isset($GLOBALS['gCurrentSession'])) {\n            // add a hidden field with the csrf token to each form\n            $this->addInput(\n                'admidio-csrf-token',\n                'csrf-token',\n                $GLOBALS['gCurrentSession']->getCsrfToken(),\n                array('property' => self::FIELD_HIDDEN)\n            );\n        }\n\n        if ($htmlPage instanceof HtmlPage) {\n            $this->htmlPage =& $htmlPage;\n        }\n\n        // if it's not a navbar form and not a static form then first field of form should get focus\n        if ($optionsAll['setFocus']) {\n            $this->addJavascriptCode('$(\".form-dialog:first *:input:enabled:visible:not([readonly]):first\").focus();', true);\n        }\n    }\n\n    /**\n     * Add a new button with a custom text to the form. This button could have\n     * an icon in front of the text.\n     * @param string $id      ID of the button. This will also be the name of the button.\n     * @param string $text    Text of the button\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **icon** : Optional parameter. Path and filename of an icon.\n     *                          If set an icon will be shown in front of the text.\n     *                        - **link** : If set a javascript click event with a page load to this link\n     *                          will be attached to the button.\n     *                        - **class** : Optional an additional css classname. The class **admButton**\n     *                          is set as default and need not set with this parameter.\n     *                        - **type** : Optional a button type could be set. The default is **button**.\n     */\n    public function addButton($id, $text, array $options = array())\n    {\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,\n            'icon' => '',\n            'link' => '',\n            'class' => '',\n            'type' => 'button',\n            'data-admidio' => '',\n            'id' => $id,\n            'value' => $text,\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n        $attributes = array();\n        $attributes['class'] = $optionsAll['class'];\n        $attributes['type'] = $optionsAll['type'];\n        $attributes['data-admidio'] = $optionsAll['data-admidio'];\n        ++$this->countElements;\n\n        if(strstr($attributes['class'], ' btn ') === false) {\n            $attributes['class'] = \"btn btn-secondary \" . $optionsAll['class'];\n\n            if ($this->type !== 'navbar') {\n                $attributes['class'] .= '  admidio-margin-bottom';\n            }\n        }\n\n        $optionsAll['attributes'] = $attributes;\n        $this->addHtml($this->render('form.button', $optionsAll));\n    }\n\n    /**\n     * Add a captcha with an input field to the form. The captcha could be a picture with a character code\n     * or a simple mathematical calculation that must be solved.\n     * @param string $id    ID of the captcha field. This will also be the name of the captcha field.\n     * @param string $class (optional) An additional css classname. The class **admTextInput**\n     *                      is set as default and need not set with this parameter.\n     */\n    public function addCaptcha($id, $class = '')\n    {\n        global $gL10n;\n\n        $attributes = array('class' => 'captcha');\n        ++$this->countElements;\n\n        // set specific css class for this field\n        if ($class !== '') {\n            $attributes['class'] .= ' ' . $class;\n        }\n\n        $this->addHtml($this->render('form.captcha', ['attributes' => $attributes]));\n        // now add a row with a text field where the user can write the solution for the puzzle\n        $this->addInput(\n            $id,\n            $gL10n->get('SYS_CAPTCHA_CONFIRMATION_CODE'),\n            '',\n            array('property' => self::FIELD_REQUIRED, 'helpTextIdLabel' => 'SYS_CAPTCHA_DESCRIPTION', 'class' => 'form-control-small')\n        );\n\n    }\n\n    /**\n     * Add a new checkbox with a label to the form.\n     * @param string $id      ID of the checkbox. This will also be the name of the checkbox.\n     * @param string $label   The label of the checkbox.\n     * @param bool   $checked A value for the checkbox. The value could only be **0** or **1**. If the value is **1** then\n     *                        the checkbox will be checked when displayed.\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **property** : With this param you can set the following properties:\n     *                          + **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                          + **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                          + **self::FIELD_DISABLED** : The field will be disabled and could not accept an input.\n     *                        - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                          the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                          for the text you can add an array. The first entry must be the unique text id and the second\n     *                          entry will be a parameter of the text id.\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **alertWarning** : Add a bootstrap info alert box after the select box. The value of this option\n     *                          will be the text of the alertbox\n     *                        - **icon** : An icon can be set. This will be placed in front of the label.\n     *                        - **class** : An additional css classname. The class **admSelectbox**\n     *                          is set as default and need not set with this parameter.\n     */\n    public function addCheckbox($id, $label, $checked = false, array $options = array())\n    {\n        $attributes   = array('class' => '');\n        ++$this->countElements;\n\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,\n            'property'         => self::FIELD_DEFAULT,\n            'helpTextIdLabel'  => '',\n            'helpTextIdInline' => '',\n            'icon'             => '',\n            'class'            => '',\n            'alertWarning'     => '',\n            'id'               => $id,\n            'label'            => $label\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        // disable field\n        if ($optionsAll['property'] === self::FIELD_DISABLED) {\n            $attributes['disabled'] = 'disabled';\n        } elseif ($optionsAll['property'] === self::FIELD_REQUIRED) {\n            $attributes['required'] = 'required';\n            $this->flagRequiredFields = true;\n        }\n\n        // if checked = true then set checkbox checked\n        if ($checked) {\n            $attributes['checked'] = 'checked';\n        }\n\n        // set specific css class for this field\n        if ($optionsAll['class'] !== '') {\n            $attributes['class'] .= ' ' . $optionsAll['class'];\n        }\n\n        $optionsAll[\"attributes\"] = $attributes;\n\n        // required field should not be highlighted so set it to a default field\n        if (!$this->showRequiredFields && $optionsAll['property'] === self::FIELD_REQUIRED) {\n            $optionsAll['property'] = self::FIELD_DEFAULT;\n        }\n\n        $this->addHtml($this->render('form.checkbox', $optionsAll));\n    }\n\n    /**\n     * Add custom html content to the form within the default field structure.\n     * The Label will be set but instead of a form control you can define any html.\n     * If you don't need the field structure and want to add html then use the method addHtml()\n     * @param string $label   The label of the custom content.\n     * @param string $content A simple Text or html that would be placed instead of a form element.\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **referenceId** : Optional the id of a form control if this is defined within the custom content\n     *                        - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                          the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                          for the text you can add an array. The first entry must be the unique text id and the second\n     *                          entry will be a parameter of the text id.\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **alertWarning** : Add a bootstrap info alert box after the select box. The value of this option\n     *                          will be the text of the alertbox\n     *                        - **icon** : An icon can be set. This will be placed in front of the label.\n     *                        - **class** : An additional css classname. The class **admSelectbox**\n     *                          is set as default and need not set with this parameter.\n     */\n    public function addCustomContent($label, $content, array $options = array())\n    {\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,\n            'property'         => '',\n            'referenceId'      => '',\n            'helpTextIdLabel'  => '',\n            'helpTextIdInline' => '',\n            'icon'             => '',\n            'class'            => '',\n            'label'            => $label,\n            'content'          => $content,\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        $this->addHtml($this->render('form.customcontent', $optionsAll));\n\n\n    }\n\n    /**\n     * Add a line with a custom description to the form. No form elements will be displayed in this line.\n     * @param string $text The (html) text that should be displayed.\n     */\n    public function addDescription($text)\n    {\n        $this->addHtml('<p>' . $text . '</p>');\n    }\n\n    /**\n     * Add a new CKEditor element to the form.\n     * @param string $id      ID of the password field. This will also be the name of the password field.\n     * @param string $label   The label of the password field.\n     * @param string $value   A value for the editor field. The editor will contain this value when created.\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **property** : With this param you can set the following properties:\n     *                          + **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                          + **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                        - **toolbar** : Optional set a predefined toolbar for the editor. Possible values are\n     *                          **AdmidioDefault**, **AdmidioGuestbook** and **AdmidioPlugin_WC**\n     *                        - **height** : Optional set the height in pixel of the editor. The default will be 300.\n     *                        - **labelVertical** : If set to **true** (default) then the label will be display above the control and the control get a width of 100%.\n     *                          Otherwise, the label will be displayed in front of the control.\n     *                        - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                          the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                          for the text you can add an array. The first entry must be the unique text id and the second\n     *                          entry will be a parameter of the text id.\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **icon** : An icon can be set. This will be placed in front of the label.\n     *                        - **class** : An additional css classname. The class **admSelectbox**\n     *                          is set as default and need not set with this parameter.\n     */\n    public function addEditor($id, $label, $value, array $options = array())\n    {\n        global $gSettingsManager, $gL10n;\n\n        $attributes = array('class' => 'editor');\n        $flagLabelVertical = $this->type;\n        ++$this->countElements;\n\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,\n            'property'         => self::FIELD_DEFAULT,\n            'toolbar'          => 'AdmidioDefault',\n            'height'           => '300',\n            'helpTextIdLabel'  => '',\n            'helpTextIdInline' => '',\n            'labelVertical'    => true,\n            'icon'             => '',\n            'class'            => '',\n            'id'               => $id,\n            'label'            => $label,\n            'value'            => $value,\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        if ($optionsAll['labelVertical']) {\n            $this->type = 'vertical';\n        }\n\n        if ($optionsAll['property'] === self::FIELD_REQUIRED) {\n            $attributes['required'] = 'required';\n            $this->flagRequiredFields = true;\n        }\n\n        // set specific css class for this field\n        if ($optionsAll['class'] !== '') {\n            $attributes['class'] .= ' ' . $optionsAll['class'];\n        }\n        $javascriptCode = '\n            CKEDITOR.replace(\"' . $id . '\", {\n                toolbar: \"' . $optionsAll['toolbar'] . '\",\n                language: \"' . $gL10n->getLanguageLibs() . '\",\n                uiColor: \"' . $gSettingsManager->getString('system_js_editor_color') . '\",\n                filebrowserUploadMethod: \"form\",\n                filebrowserImageUploadUrl: \"' . ADMIDIO_URL . '/adm_program/system/ckeditor_upload_handler.php\"\n            });\n            CKEDITOR.config.height = \"' . $optionsAll['height'] . '\";';\n\n        if ($gSettingsManager->getBool('system_js_editor_enabled')) {\n            // if a htmlPage object was set then add code to the page, otherwise to the current string\n            if ($this->htmlPage instanceof HtmlPage) {\n                $this->htmlPage->addJavascriptFile(ADMIDIO_URL . FOLDER_LIBS_CLIENT . '/ckeditor/ckeditor.js');\n            }\n            $this->addJavascriptCode($javascriptCode, true);\n        }\n\n        $this->type = $flagLabelVertical;\n        $optionsAll[\"attributes\"] = $attributes;\n\n        // required field should not be highlighted so set it to a default field\n        if (!$this->showRequiredFields && $optionsAll['property'] === self::FIELD_REQUIRED) {\n            $optionsAll['property'] = self::FIELD_DEFAULT;\n        }\n\n        $this->addHtml($this->render('form.editor', $optionsAll));\n    }\n\n    /**\n     * Add a field for file upload. If necessary multiple files could be uploaded.\n     * The fields for multiple upload could be added dynamically to the form by the user.\n     * @param string $id      ID of the input field. This will also be the name of the input field.\n     * @param string $label   The label of the input field.\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **property** : With this param you can set the following properties:\n     *                          + **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                          + **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                          + **self::FIELD_DISABLED** : The field will be disabled and could not accept an input.\n     *                        - **allowedMimeTypes** : An array with the allowed MIME types (https://wiki.selfhtml.org/wiki/MIME-Type/%C3%9Cbersicht).\n     *                          If this is set then the user can only choose the specified files with the browser file dialog.\n     *                          You should check the uploaded file against the MIME type because the file could be manipulated.\n     *                        - **maxUploadSize** : The size in byte that could be maximum uploaded.\n     *                          The default will be $gSettingsManager->getInt('max_file_upload_size') * 1024 * 1024.\n     *                        - **enableMultiUploads** : If set to true a button will be added where the user can\n     *                          add new upload fields to upload more than one file.\n     *                        - **multiUploadLabel** : The label for the button who will add new upload fields to the form.\n     *                        - **hideUploadField** : Hide the upload field if multi uploads are enabled. Then the first\n     *                          upload field will be shown if the user will click the multi upload button.\n     *                        - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                          the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                          for the text you can add an array. The first entry must be the unique text id and the second\n     *                          entry will be a parameter of the text id.\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **icon** : An icon can be set. This will be placed in front of the label.\n     *                        - **class** : An additional css classname. The class **admSelectbox**\n     *                          is set as default and need not set with this parameter.\n     */\n    public function addFileUpload($id, $label, array $options = array())\n    {\n        global $gSettingsManager;\n\n        $attributes = array('class' => 'form-control');\n        ++$this->countElements;\n\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,\n            'property'           => self::FIELD_DEFAULT,\n            'maxUploadSize'      => $gSettingsManager->getInt('max_file_upload_size') * 1024 * 1024, // MiB\n            'allowedMimeTypes'   => array(),\n            'enableMultiUploads' => false,\n            'hideUploadField'    => false,\n            'multiUploadLabel'   => '',\n            'helpTextIdLabel'    => '',\n            'helpTextIdInline'   => '',\n            'icon'               => '',\n            'class'              => '',\n            'id'                 => $id,\n            'label'              => $label,\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        // disable field\n        if ($optionsAll['property'] === self::FIELD_DISABLED) {\n            $attributes['disabled'] = 'disabled';\n        } elseif ($optionsAll['property'] === self::FIELD_REQUIRED) {\n            $attributes['required'] = 'required';\n            $this->flagRequiredFields = true;\n        }\n\n        if (count($optionsAll['allowedMimeTypes']) > 0) {\n            $attributes['accept'] = implode(',', $optionsAll['allowedMimeTypes']);\n        }\n\n        if ($optionsAll['icon'] === '') {\n            $optionsAll['icon'] = 'fa-upload';\n        }\n\n        // set specific css class for this field\n        if ($optionsAll['class'] !== '') {\n            $attributes['class'] .= ' ' . $optionsAll['class'];\n        }\n\n        // if multiple uploads are enabled then add javascript that will\n        // dynamically add new upload fields to the form\n        if ($optionsAll['enableMultiUploads']) {\n            $javascriptCode = '\n                // add new line to add new attachment to this mail\n                $(\"#btn_add_attachment_' . $id . '\").click(function() {\n                    newAttachment = document.createElement(\"input\");\n                    $(newAttachment).attr(\"type\", \"file\");\n                    $(newAttachment).attr(\"name\", \"userfile[]\");\n                    $(newAttachment).attr(\"class\", \"' . $attributes['class'] . '\");\n                    $(newAttachment).hide();\n                    $(\"#btn_add_attachment_' . $id . '\").before(newAttachment);\n                    $(newAttachment).show(\"slow\");\n                });';\n\n            // if a htmlPage object was set then add code to the page, otherwise to the current string\n            $this->addJavascriptCode($javascriptCode, true);\n        }\n\n        $optionsAll[\"attributes\"] = $attributes;\n\n        // required field should not be highlighted so set it to a default field\n        if (!$this->showRequiredFields && $optionsAll['property'] === self::FIELD_REQUIRED) {\n            $optionsAll['property'] = self::FIELD_DEFAULT;\n        }\n\n        $this->addHtml($this->render('form.file', $optionsAll));\n    }\n\n    /**\n     * Add a new input field with a label to the form.\n     * @param string $id      ID of the input field. This will also be the name of the input field.\n     * @param string $label   The label of the input field.\n     * @param string $value   A value for the text field. The field will be created with this value.\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **type** : Set the type if the field. Default will be **text**. Possible values are **text**,\n     *                          **number**, **date**, **datetime** or **birthday**. If **date**, **datetime** or **birthday** are set\n     *                          than a small calendar will be shown if the date field will be selected.\n     *                        - **maxLength** : The maximum number of characters that are allowed in a text field.\n     *                        - **minNumber** : The minimum number that is allowed in a number field.\n     *                        - **maxNumber** : The maximum number that is allowed in a number field.\n     *                        - **step** : The steps between two numbers that are allowed.\n     *                          E.g. if steps is set to 5 then only values 5, 10, 15 ... are allowed\n     *                        - **property** : With this param you can set the following properties:\n     *                          + **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                          + **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                          + **self::FIELD_DISABLED** : The field will be disabled and could not accept an input.\n     *                          + **self::FIELD_HIDDEN**   : The field will not be shown. Useful to transport additional informations.\n     *                        - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                          the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                          for the text you can add an array. The first entry must be the unique text id and the second\n     *                          entry will be a parameter of the text id.\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **alertWarning** : Add a bootstrap info alert box after the select box. The value of this option\n     *                          will be the text of the alertbox\n     *                        - **icon** : An icon can be set. This will be placed in front of the label.\n     *                        - **class** : An additional css classname. The class **admSelectbox**\n     *                          is set as default and need not set with this parameter.\n     *                        - **htmlAfter** : Add html code after the input field.\n     */\n    public function addInput($id, $label, $value, array $options = array())\n    {\n        global $gSettingsManager, $gLogger;\n\n        $attributes = array('class' => 'form-control');\n        ++$this->countElements;\n\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,\n            'id'               => $id,\n            'label'            => $label,\n            'value'            => $value,\n            'type'             => 'text',\n            'placeholder'      => '',\n            'pattern'          => '',\n            'minLength'        => null,\n            'maxLength'        => null,\n            'minNumber'        => null,\n            'maxNumber'        => null,\n            'step'             => null,\n            'property'         => self::FIELD_DEFAULT,\n            'passwordStrength' => false,\n            'passwordUserData' => array(),\n            'helpTextIdLabel'  => '',\n            'helpTextIdInline' => '',\n            'icon'             => '',\n            'class'            => '',\n            'htmlAfter'        => '',\n            'alertWarning'     => ''\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        $optionsAll['helpTextIdInline'] = self::getHelpText($optionsAll['helpTextIdInline']);\n\n        $attributes['placeholder'] = $optionsAll['placeholder'];\n\n        // set min/max input length\n        switch ($optionsAll['type']) {\n            case 'text': // fallthrough\n            case 'search': // fallthrough\n            case 'email': // fallthrough\n            case 'url': // fallthrough\n            case 'tel': // fallthrough\n            case 'password':\n                $attributes['pattern'] = $optionsAll['pattern'];\n\n                $attributes['minlength'] = $optionsAll['minLength'];\n\n                if ($optionsAll['maxLength'] > 0) {\n                    $attributes['maxlength'] = $optionsAll['maxLength'];\n\n                    if ($attributes['minlength'] > $attributes['maxlength']) {\n                        $gLogger->warning(\n                            'Attribute \"minlength\" is greater than \"maxlength\"!',\n                            array('minlength' => $attributes['maxlength'], 'maxlength' => $attributes['maxlength'])\n                        );\n                    }\n                }\n                break;\n            case 'number':\n                $attributes['min'] = $optionsAll['minNumber'];\n                $attributes['max'] = $optionsAll['maxNumber'];\n                $attributes['step'] = $optionsAll['step'];\n\n                if ($attributes['min'] > $attributes['max']) {\n                    $gLogger->warning(\n                        'Attribute \"min\" is greater than \"max\"!',\n                        array('min' => $attributes['min'], 'max' => $attributes['max'])\n                    );\n                }\n                break;\n        }\n\n        // set field properties\n        switch ($optionsAll['property']) {\n            case self::FIELD_DISABLED:\n                $attributes['disabled'] = 'disabled';\n                break;\n\n            case self::FIELD_READONLY:\n                $attributes['readonly'] = 'readonly';\n                break;\n\n            case self::FIELD_REQUIRED:\n                $attributes['required'] = 'required';\n                $this->flagRequiredFields = true;\n                break;\n\n            case self::FIELD_HIDDEN:\n                $attributes['hidden'] = 'hidden';\n                $attributes['class'] .= ' invisible';\n                break;\n        }\n\n        // set specific css class for this field\n        if ($optionsAll['class'] !== '') {\n            $attributes['class'] .= ' '.$optionsAll['class'];\n        }\n\n        // Remove attributes that are not set\n        $attributes = array_filter($attributes, function ($attribute) {\n            return $attribute !== '' && $attribute !== null;\n        });\n\n        // if datetime then add a time field behind the date field\n        if ($optionsAll['type'] === 'datetime') {\n            $datetime = DateTime::createFromFormat($gSettingsManager->getString('system_date') . ' ' . $gSettingsManager->getString('system_time'), $value);\n\n            // now add a date and a time field to the form\n            $attributes['dateValue'] = null;\n            $attributes['timeValue'] = null;\n\n            if ($datetime) {\n                $attributes['dateValue'] = $datetime->format('Y-m-d');\n                $attributes['timeValue'] = $datetime->format('H:i');\n            }\n\n            // now add a date and a time field to the form\n            $attributes['dateValueAttributes'] = array();\n            $attributes['dateValueAttributes']['class'] = 'form-control datetime-date-control';\n            $attributes['dateValueAttributes']['pattern'] = '\\d{4}-\\d{2}-\\d{2}';\n\n            $attributes['timeValueAttributes'] = array();\n            $attributes['timeValueAttributes']['class'] = 'form-control datetime-time-control';\n        } elseif ($optionsAll['type'] === 'date') {\n            $datetime = DateTime::createFromFormat($gSettingsManager->getString('system_date'), $value);\n            if (!empty($value) && is_object($datetime))\n                $value = $datetime->format('Y-m-d');\n            $attributes['pattern'] = '\\d{4}-\\d{2}-\\d{2}';\n        } elseif ($optionsAll['type'] === 'time') {\n            $datetime = DateTime::createFromFormat('Y-m-d' . $gSettingsManager->getString('system_time'), DATE_NOW . $value);\n            if (!empty($value) && is_object($datetime))\n                $value = $datetime->format('H:i');\n        }\n\n        if ($optionsAll['passwordStrength']) {\n            $passwordStrengthLevel = 1;\n            if ($gSettingsManager instanceof SettingsManager && $gSettingsManager->getInt('password_min_strength')) {\n                $passwordStrengthLevel = $gSettingsManager->getInt('password_min_strength');\n            }\n\n            if ($this->htmlPage instanceof HtmlPage) {\n                $zxcvbnUserInputs = json_encode($optionsAll['passwordUserData'], JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);\n                $javascriptCode = '\n                    $(\"#admidio-password-strength-minimum\").css(\"margin-left\", \"calc(\" + $(\"#admidio-password-strength\").css(\"width\") + \" / 4 * '.$passwordStrengthLevel.')\");\n\n                    $(\"#' . $id . '\").keyup(function(e) {\n                        var result = zxcvbn(e.target.value, ' . $zxcvbnUserInputs . ');\n                        var cssClasses = [\"bg-danger\", \"bg-danger\", \"bg-warning\", \"bg-info\", \"bg-success\"];\n\n                        var progressBar = $(\"#admidio-password-strength .progress-bar\");\n                        progressBar.attr(\"aria-valuenow\", result.score * 25);\n                        progressBar.css(\"width\", result.score * 25 + \"%\");\n                        progressBar.removeClass(cssClasses.join(\" \"));\n                        progressBar.addClass(cssClasses[result.score]);\n                    });\n                ';\n                $this->htmlPage->addJavascriptFile(ADMIDIO_URL . FOLDER_LIBS_CLIENT . '/zxcvbn/dist/zxcvbn.js');\n                $this->htmlPage->addJavascript($javascriptCode, true);\n            }\n        }\n\n        $optionsAll[\"attributes\"] = $attributes;\n        // replace quotes with html entities to prevent xss attacks\n        $optionsAll['value'] = $value;\n\n        // required field should not be highlighted so set it to a default field\n        if (!$this->showRequiredFields && $optionsAll['property'] === self::FIELD_REQUIRED) {\n            $optionsAll['property'] = self::FIELD_DEFAULT;\n        }\n\n        $this->addHtml($this->render(\"form.input\", $optionsAll));\n    }\n\n    /**\n     * Adds any javascript content to the page. The javascript will be added to the page header or as inline script.\n     * @param string $javascriptCode       A valid javascript code that will be added to the header of the page or as inline script.\n     * @param bool   $executeAfterPageLoad (optional) If set to **true** the javascript code will be executed after\n     *                                     the page is fully loaded.\n     */\n    protected function addJavascriptCode($javascriptCode, $executeAfterPageLoad = false)\n    {\n        if ($this->htmlPage instanceof HtmlPage) {\n            $this->htmlPage->addJavascript($javascriptCode, $executeAfterPageLoad);\n            return;\n        }\n\n        if ($executeAfterPageLoad) {\n            $javascriptCode = '$(function() { ' . $javascriptCode . ' });';\n        }\n        $this->addHtml('<script type=\"text/javascript\">' . $javascriptCode . '</script>');\n    }\n\n    /**\n     * Add a simple line to the form. This could be used to structure a form. The line has only a visual effect.\n     */\n    public function addLine()\n    {\n        $this->addHtml('<hr />');\n    }\n\n    /**\n     * Add a new textarea field with a label to the form.\n     * @param string $id      ID of the input field. This will also be the name of the input field.\n     * @param string $label   The label of the input field.\n     * @param string $value   A value for the text field. The field will be created with this value.\n     * @param int    $rows    The number of rows that the textarea field should have.\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **maxLength** : The maximum number of characters that are allowed in this field. If set\n     *                          then show a counter how many characters still available\n     *                        - **property** : With this param you can set the following properties:\n     *                          + **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                          + **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                          + **self::FIELD_DISABLED** : The field will be disabled and could not accept an input.\n     *                        - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                          the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                          for the text you can add an array. The first entry must be the unique text id and the second\n     *                          entry will be a parameter of the text id.\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **icon** : An icon can be set. This will be placed in front of the label.\n     *                        - **class** : An additional css classname. The class **admSelectbox**\n     *                          is set as default and need not set with this parameter.\n     */\n    public function addMultilineTextInput($id, $label, $value, $rows, array $options = array())\n    {\n        ++$this->countElements;\n        $attributes = array('class' => 'form-control');\n\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,\n            'property'         => self::FIELD_DEFAULT,\n            'maxLength'        => 0,\n            'helpTextIdLabel'  => '',\n            'helpTextIdInline' => '',\n            'icon'             => '',\n            'class'            => '',\n            'id'               => $id,\n            'label'            => $label,\n            'value'            => $value\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        // set field properties\n        switch ($optionsAll['property']) {\n            case self::FIELD_DISABLED:\n                $attributes['disabled'] = 'disabled';\n                break;\n\n            case self::FIELD_READONLY:\n                $attributes['readonly'] = 'readonly';\n                break;\n\n            case self::FIELD_REQUIRED:\n                $attributes['required'] = 'required';\n                $this->flagRequiredFields = true;\n                break;\n\n            case self::FIELD_HIDDEN:\n                $attributes['hidden'] = 'hidden';\n                $attributes['class'] .= ' invisible';\n                break;\n        }\n\n        // set specific css class for this field\n        if ($optionsAll['class'] !== '') {\n            $attributes['class'] .= ' ' . $optionsAll['class'];\n        }\n\n        if ($optionsAll['maxLength'] > 0) {\n            $attributes['maxlength'] = $optionsAll['maxLength'];\n\n            // if max field length is set then show a counter how many characters still available\n            $javascriptCode = '\n                $(\"#' . $id . '\").NobleCount(\"#' . $id . '_counter\", {\n                    max_chars: ' . $optionsAll['maxLength'] . ',\n                    on_negative: \"systeminfoBad\",\n                    block_negative: true\n                });';\n\n            // if a htmlPage object was set then add code to the page, otherwise to the current string\n            if ($this->htmlPage instanceof HtmlPage) {\n                $this->htmlPage->addJavascriptFile(ADMIDIO_URL . FOLDER_LIBS_CLIENT . '/noblecount/jquery.noblecount.js');\n            }\n            $this->addJavascriptCode($javascriptCode, true);\n        }\n\n        $attributes[\"rows\"] = $rows;\n        $attributes[\"cols\"] = 80;\n        $optionsAll[\"attributes\"] = $attributes;\n\n        // required field should not be highlighted so set it to a default field\n        if (!$this->showRequiredFields && $optionsAll['property'] === self::FIELD_REQUIRED) {\n            $optionsAll['property'] = self::FIELD_DEFAULT;\n        }\n\n        $this->addHtml($this->render('form.multiline', $optionsAll));\n    }\n\n    /**\n     * Add a new radio button with a label to the form. The radio button could have different status\n     * which could be defined with an array.\n     * @param string $id      ID of the radio button. This will also be the name of the radio button.\n     * @param string $label   The label of the radio button.\n     * @param array  $values  Array with all entries of the radio button;\n     *                        Array key will be the internal value of the entry\n     *                        Array value will be the visual value of the entry\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **property** : With this param you can set the following properties:\n     *                          + **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                          + **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                          + **self::FIELD_DISABLED** : The field will be disabled and could not accept an input.\n     *                        - **defaultValue** : This is the value of that radio button that is preselected.\n     *                        - **showNoValueButton** : If set to true than one radio with no value will be set in front of the other array.\n     *                          This could be used if the user should also be able to set no radio to value.\n     *                        - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                          the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                          for the text you can add an array. The first entry must be the unique text id and the second\n     *                          entry will be a parameter of the text id.\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **alertWarning** : Add a bootstrap info alert box after the select box. The value of this option\n     *                          will be the text of the alertbox\n     *                        - **icon** : An icon can be set. This will be placed in front of the label.\n     *                        - **class** : An additional css classname. The class **admSelectbox**\n     *                          is set as default and need not set with this parameter.\n     */\n    public function addRadioButton($id, $label, array $values, array $options = array())\n    {\n        ++$this->countElements;\n        $attributes = array('class' => '');\n\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,\n            'property'          => self::FIELD_DEFAULT,\n            'defaultValue'      => '',\n            'showNoValueButton' => false,\n            'helpTextIdLabel'   => '',\n            'helpTextIdInline'  => '',\n            'icon'              => '',\n            'class'             => '',\n            'id'                => $id,\n            'label'             => $label,\n            'values'             => $values\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        // disable field\n        if ($optionsAll['property'] === self::FIELD_DISABLED) {\n            $attributes['disabled'] = 'disabled';\n        } elseif ($optionsAll['property'] === self::FIELD_REQUIRED) {\n            $attributes['required'] = 'required';\n            $this->flagRequiredFields = true;\n        }\n\n        // set specific css class for this field\n        if ($optionsAll['class'] !== '') {\n            $attributes['class'] .= ' ' . $optionsAll['class'];\n        }\n\n        $optionsAll[\"attributes\"] = $attributes;\n\n        // required field should not be highlighted so set it to a default field\n        if (!$this->showRequiredFields && $optionsAll['property'] === self::FIELD_REQUIRED) {\n            $optionsAll['property'] = self::FIELD_DEFAULT;\n        }\n\n        $this->addHtml($this->render('form.radio', $optionsAll));\n    }\n\n    /**\n     * Add a new selectbox with a label to the form. The selectbox\n     * could have different values and a default value could be set.\n     * @param string $id      ID of the selectbox. This will also be the name of the selectbox.\n     * @param string $label   The label of the selectbox.\n     * @param array  $values  Array with all entries of the select box;\n     *                        Array key will be the internal value of the entry\n     *                        Array value will be the visual value of the entry\n     *                        If you need an option group within the selectbox than you must add an array as value.\n     *                        This array exists of 3 entries: array(0 => id, 1 => value name, 2 => option group name)\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **property** : With this param you can set the following properties:\n     *                          + **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                          + **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                          + **self::FIELD_DISABLED** : The field will be disabled and could not accept an input.\n     *                        - **defaultValue** : This is the value the selectbox shows when loaded. If **multiselect** is activated than\n     *                          an array with all default values could be set.\n     *                        - **showContextDependentFirstEntry** : If set to **true** the select box will get an additional first entry.\n     *                          If self::FIELD_REQUIRED is set than \"Please choose\" will be the first entry otherwise\n     *                          an empty entry will be added, so you must not select something.\n     *                        - **firstEntry** : Here you can define a string that should be shown as firstEntry and will be the\n     *                          default value if no other value is set. This entry will only be added if **showContextDependentFirstEntry**\n     *                          is set to false!\n     *                        - **arrayKeyIsNotValue** : If set to **true** than the entry of the values-array will be used as\n     *                          option value and not the key of the array\n     *                        - **multiselect** : If set to **true** than the jQuery plugin Select2 will be used to create a selectbox\n     *                          where the user could select multiple values from the selectbox. Then an array will be\n     *                          created within the $_POST array.\n     *                        - **search** : If set to **true** the jQuery plugin Select2 will be used to create a selectbox\n     *                          with a search field.\n     *                        - **placeholder** : When using the jQuery plugin Select2 you can set a placeholder that will be shown\n     *                          if no entry is selected\n     *                        - **maximumSelectionNumber** : If **multiselect** is enabled then you can configure the maximum number\n     *                          of selections that could be done. If this limit is reached the user can't add another entry to the selectbox.\n     *                        - **valueAttributes**: An array which contain the same ids as the value array. The value of this array will be\n     *                          onother array with the combination of attributes name and attributes value.\n     *                        - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                          the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                          for the text you can add an array. The first entry must be the unique text id and the second\n     *                          entry will be a parameter of the text id.\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **alertWarning** : Add a bootstrap info alert box after the select box. The value of this option\n     *                          will be the text of the alertbox\n     *                        - **icon** : An icon can be set. This will be placed in front of the label.\n     *                        - **class** : An additional css classname. The class **admSelectbox**\n     *                          is set as default and need not set with this parameter.\n     */\n    public function addSelectBox($id, $label, array $values, array $options = array())\n    {\n        global $gL10n;\n\n        ++$this->countElements;\n        $attributes = array('class' => 'form-control');\n        $name = $id;\n\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,\n            'property'                       => self::FIELD_DEFAULT,\n            'defaultValue'                   => '',\n            'showContextDependentFirstEntry' => true,\n            'firstEntry'                     => '',\n            'arrayKeyIsNotValue'             => false,\n            'multiselect'                    => false,\n            'search'                         => false,\n            'placeholder'                    => '',\n            'maximumSelectionNumber'         => 0,\n            'valueAttributes'                => '',\n            'alertWarning'                   => '',\n            'helpTextIdLabel'                => '',\n            'helpTextIdInline'               => '',\n            'icon'                           => '',\n            'class'                          => ''\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        // set field properties\n        switch ($optionsAll['property']) {\n            case self::FIELD_DISABLED:\n                $attributes['disabled'] = 'disabled';\n                break;\n\n            case self::FIELD_READONLY:\n                $attributes['readonly'] = 'readonly';\n                break;\n\n            case self::FIELD_REQUIRED:\n                $attributes['required'] = 'required';\n                $this->flagRequiredFields = true;\n                break;\n\n            case self::FIELD_HIDDEN:\n                $attributes['hidden'] = 'hidden';\n                $attributes['class'] .= ' invisible';\n                break;\n        }\n\n        if ($optionsAll['multiselect']) {\n            $attributes['multiple'] = 'multiple';\n            $name = $id . '[]';\n\n            if ($optionsAll['defaultValue'] !== '' && !is_array($optionsAll['defaultValue'])) {\n                $optionsAll['defaultValue'] = array($optionsAll['defaultValue']);\n            }\n\n            if ($optionsAll['showContextDependentFirstEntry'] && $optionsAll['property'] === self::FIELD_REQUIRED) {\n                if ($optionsAll['placeholder'] === '') {\n                    $optionsAll['placeholder'] = $gL10n->get('SYS_SELECT_FROM_LIST');\n                }\n\n                // reset the preferences so the logic for not multiselect will not be performed\n                $optionsAll['showContextDependentFirstEntry'] = false;\n            }\n        }\n\n        // set specific css class for this field\n        if ($optionsAll['class'] !== '') {\n            $attributes['class'] .= ' ' . $optionsAll['class'];\n        }\n\n        // now create html for the field\n        $this->openControlStructure($id, $label, $optionsAll['property'], $optionsAll['helpTextIdLabel'], $optionsAll['icon']);\n\n        $this->addSelect($name, $id, $attributes);\n\n        // add an additional first entry to the select box and set this as preselected if necessary\n        $defaultEntry = false;\n        if ($optionsAll['firstEntry'] !== '' || $optionsAll['showContextDependentFirstEntry']) {\n            if ($optionsAll['defaultValue'] === '') {\n                $defaultEntry = true;\n            }\n        }\n\n        if ($optionsAll['firstEntry'] !== '') {\n            if (is_array($optionsAll['firstEntry'])) {\n                $this->addOption($optionsAll['firstEntry'][0], $optionsAll['firstEntry'][1], null, $defaultEntry);\n            } else {\n                $this->addOption('', '- ' . $optionsAll['firstEntry'] . ' -', null, $defaultEntry);\n            }\n        } elseif ($optionsAll['showContextDependentFirstEntry']) {\n            if ($optionsAll['property'] === self::FIELD_REQUIRED) {\n                $this->addOption('', '- ' . $gL10n->get('SYS_PLEASE_CHOOSE') . ' -', null, $defaultEntry);\n            } else {\n                $this->addOption('', ' ', null, $defaultEntry);\n            }\n        } elseif (count($values) === 0) {\n            $this->addOption('', '');\n        }\n\n        $optionGroup = null;\n\n        foreach ($values as $key => $value) {\n            // create entry in html\n            $defaultEntry = false;\n\n            // if each array element is an array then create option groups\n            if (is_array($value)) {\n                // add optiongroup if necessary\n                if ($optionGroup !== $value[2]) {\n                    if ($optionGroup !== null) {\n                        $this->closeOptionGroup();\n                    }\n\n                    $this->addOptionGroup(Language::translateIfTranslationStrId($value[2]));\n                    $optionGroup = $value[2];\n                }\n\n                // if value is a translation string we must translate it\n                $value[1] = Language::translateIfTranslationStrId($value[1]);\n\n                // add option\n                if (!$optionsAll['multiselect'] && $optionsAll['defaultValue'] == $value[0]) {\n                    $defaultEntry = true;\n                }\n\n                if (is_array($optionsAll['valueAttributes'])) {\n                    $this->addOption((string) $value[0], $value[1], null, $defaultEntry, false, $optionsAll['valueAttributes'][$value[0]]);\n                } else {\n                    $this->addOption((string) $value[0], $value[1], null, $defaultEntry);\n                }\n            } else {\n                // if value is a translation string we must translate it\n                $value = Language::translateIfTranslationStrId($value);\n\n                // set the value attribute of the option tag\n                $optionValue = $key;\n\n                if ($optionsAll['arrayKeyIsNotValue']) {\n                    $optionValue = $value;\n                }\n\n                // array has only key and value then create a normal selectbox without optiongroups\n                if (!$optionsAll['multiselect'] && $optionsAll['defaultValue'] == $optionValue) {\n                    $defaultEntry = true;\n                }\n\n                if (is_array($optionsAll['valueAttributes'])) {\n                    $this->addOption((string) $optionValue, $value, null, $defaultEntry, false, $optionsAll['valueAttributes'][$key]);\n                } else {\n                    $this->addOption((string) $optionValue, $value, null, $defaultEntry);\n                }\n            }\n        }\n\n        if ($optionGroup !== null) {\n            $this->closeOptionGroup();\n        }\n\n        if ($optionsAll['multiselect'] || $optionsAll['search']) {\n            $maximumSelectionNumber = '';\n            $allowClear = 'false';\n\n            if ($optionsAll['maximumSelectionNumber'] > 0) {\n                $maximumSelectionNumber = ' maximumSelectionLength: ' . $optionsAll['maximumSelectionNumber'] . ', ';\n                $allowClear = 'true';\n            }\n\n            $javascriptCode = '\n                $(\"#' . $id . '\").select2({\n                    theme: \"bootstrap4\",\n                    allowClear: ' . $allowClear . ',\n                    ' . $maximumSelectionNumber . '\n                    placeholder: \"' . $optionsAll['placeholder'] . '\",\n                    language: \"' . $gL10n->getLanguageLibs() . '\"\n                });';\n\n            if (is_array($optionsAll['defaultValue']) && count($optionsAll['defaultValue']) > 0) {\n                // add default values to multi select\n                $htmlDefaultValues = '\"' . implode('\", \"', $optionsAll['defaultValue']) . '\"';\n\n                $javascriptCode .= ' $(\"#' . $id . '\").val([' . $htmlDefaultValues . ']).trigger(\"change.select2\");';\n            } elseif (count($values) === 1 && $optionsAll['property'] === self::FIELD_REQUIRED) {\n                // if there is only one entry and a required field than select this entry\n                $javascriptCode .= ' $(\"#' . $id . '\").val(\"'.$values[0][0].'\").trigger(\"change.select2\");';\n            }\n\n            // if a htmlPage object was set then add code to the page, otherwise to the current string\n            if ($this->htmlPage instanceof HtmlPage) {\n                $this->htmlPage->addCssFile(ADMIDIO_URL . FOLDER_LIBS_CLIENT . '/select2/css/select2.css');\n                $this->htmlPage->addCssFile(ADMIDIO_URL . FOLDER_LIBS_CLIENT . '/select2-bootstrap-theme/select2-bootstrap4.css');\n                $this->htmlPage->addJavascriptFile(ADMIDIO_URL . FOLDER_LIBS_CLIENT . '/select2/js/select2.js');\n                $this->htmlPage->addJavascriptFile(ADMIDIO_URL . FOLDER_LIBS_CLIENT . '/select2/js/i18n/' . $gL10n->getLanguageLibs() . '.js');\n            }\n            $this->addJavascriptCode($javascriptCode, true);\n        }\n\n        $this->closeSelect();\n\n        $this->closeControlStructure($optionsAll);\n    }\n\n    /**\n     * Add a new selectbox with a label to the form. The selectbox get their data from a sql statement.\n     * You can create any sql statement and this method should create a selectbox with the found data.\n     * The sql must contain at least two columns. The first column represents the value and the second\n     * column represents the label of each option of the selectbox. Optional you can add a third column\n     * to the sql statement. This column will be used as label for an optiongroup. Each time the value\n     * of the third column changed a new optiongroup will be created.\n     * @param string       $id       ID of the selectbox. This will also be the name of the selectbox.\n     * @param string       $label    The label of the selectbox.\n     * @param Database     $database Object of the class Database. This should be the default global object **$gDb**.\n     * @param array|string $sql      Any SQL statement that return 2 columns. The first column will be the internal value of the\n     *                               selectbox item and will be submitted with the form. The second column represents the\n     *                               displayed value of the item. Each row of the result will be a new selectbox entry.\n     * @param array        $options  (optional) An array with the following possible entries:\n     *                               - **property** : With this param you can set the following properties:\n     *                                 + **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                                 + **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                                 + **self::FIELD_DISABLED** : The field will be disabled and could not accept an input.\n     *                               - **defaultValue** : This is the value the selectbox shows when loaded. If **multiselect** is activated than\n     *                                 an array with all default values could be set.\n     *                               - **arrayKeyIsNotValue** : If set to **true** than the entry of the values-array will be used as\n     *                                 option value and not the key of the array\n     *                               - **showContextDependentFirstEntry** : If set to **true** the select box will get an additional first entry.\n     *                                 If self::FIELD_REQUIRED is set than \"Please choose\" will be the first entry otherwise\n     *                                 an empty entry will be added, so you must not select something.\n     *                               - **firstEntry** : Here you can define a string that should be shown as firstEntry and will be the\n     *                                 default value if no other value is set. This entry will only be added if **showContextDependentFirstEntry**\n     *                                 is set to false!\n     *                               - **multiselect** : If set to **true** than the jQuery plugin Select2 will be used to create a selectbox\n     *                                 where the user could select multiple values from the selectbox. Then an array will be\n     *                                 created within the $_POST array.\n     *                               - **maximumSelectionNumber** : If **multiselect** is enabled then you can configure the maximum number\n     *                                 of selections that could be done. If this limit is reached the user can't add another entry to the selectbox.\n     *                               - **valueAttributes**: An array which contain the same ids as the value array. The value of this array will be\n     *                                 onother array with the combination of attributes name and attributes value.\n     *                               - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                                 e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                                 the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                                 for the text you can add an array. The first entry must be the unique text id and the second\n     *                                 entry will be a parameter of the text id.\n     *                               - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                                 e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                                 If you need an additional parameter for the text you can add an array. The first entry must\n     *                                 be the unique text id and the second entry will be a parameter of the text id.\n     *                               - **alertWarning** : Add a bootstrap info alert box after the select box. The value of this option\n     *                                 will be the text of the alertbox\n     *                               - **icon** : An icon can be set. This will be placed in front of the label.\n     *                               - **class** : An additional css classname. The class **admSelectbox**\n     *                                 is set as default and need not set with this parameter.\n     * **Code examples**\n     * ```\n     * // create a selectbox with all profile fields of a specific category\n     * $sql = 'SELECT usf_id, usf_name FROM '.TBL_USER_FIELDS.' WHERE usf_cat_id = 4711'\n     * $form = new HtmlForm('simple-form', 'next_page.php');\n     * $form->addSelectBoxFromSql('admProfileFieldsBox', $gL10n->get('SYS_FIELDS'), $gDb, $sql, array('defaultValue' => $gL10n->get('SYS_SURNAME'), 'showContextDependentFirstEntry' => true));\n     * $form->show();\n     * ```\n     */\n    public function addSelectBoxFromSql($id, $label, Database $database, $sql, array $options = array())\n    {\n        $selectBoxEntries = array();\n\n        // execute the sql statement\n        if (is_array($sql)) {\n            $pdoStatement = $database->queryPrepared($sql['query'], $sql['params']);\n        } else {\n            // TODO deprecated: remove in Admidio 4.0\n            $pdoStatement = $database->query($sql);\n        }\n\n        // create array from sql result\n        while ($row = $pdoStatement->fetch(PDO::FETCH_NUM)) {\n            // if result has 3 columns then create an array in array\n            if (array_key_exists(2, $row)) {\n                // translate category name\n                $row[2] = Language::translateIfTranslationStrId($row[2]);\n\n                $selectBoxEntries[] = array($row[0], $row[1], $row[2]);\n            } else {\n                $selectBoxEntries[$row[0]] = $row[1];\n            }\n        }\n\n        // now call default method to create a selectbox\n        $this->addSelectBox($id, $label, $selectBoxEntries, $options);\n    }\n\n    /**\n     * Add a new selectbox with a label to the form. The selectbox could have\n     * different values and a default value could be set.\n     * @param string $id          ID of the selectbox. This will also be the name of the selectbox.\n     * @param string $label       The label of the selectbox.\n     * @param string $xmlFile     Serverpath to the xml file\n     * @param string $xmlValueTag Name of the xml tag that should contain the internal value of a selectbox entry\n     * @param string $xmlViewTag  Name of the xml tag that should contain the visual value of a selectbox entry\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **property** : With this param you can set the following properties:\n     *                          + **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                          + **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                          + **self::FIELD_DISABLED** : The field will be disabled and could not accept an input.\n     *                        - **defaultValue** : This is the value the selectbox shows when loaded. If **multiselect** is activated than\n     *                          an array with all default values could be set.\n     *                        - **arrayKeyIsNotValue** : If set to **true** than the entry of the values-array will be used as\n     *                          option value and not the key of the array\n     *                        - **showContextDependentFirstEntry** : If set to **true** the select box will get an additional first entry.\n     *                          If self::FIELD_REQUIRED is set than \"Please choose\" will be the first entry otherwise\n     *                          an empty entry will be added, so you must not select something.\n     *                        - **firstEntry** : Here you can define a string that should be shown as firstEntry and will be the\n     *                          default value if no other value is set. This entry will only be added if **showContextDependentFirstEntry**\n     *                          is set to false!\n     *                        - **multiselect** : If set to **true** than the jQuery plugin Select2 will be used to create a selectbox\n     *                          where the user could select multiple values from the selectbox. Then an array will be\n     *                          created within the $_POST array.\n     *                        - **maximumSelectionNumber** : If **multiselect** is enabled then you can configure the maximum number\n     *                          of selections that could be done. If this limit is reached the user can't add another entry to the selectbox.\n     *                        - **valueAttributes**: An array which contain the same ids as the value array. The value of this array will be\n     *                          onother array with the combination of attributes name and attributes value.\n     *                        - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                          the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                          for the text you can add an array. The first entry must be the unique text id and the second\n     *                          entry will be a parameter of the text id.\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **alertWarning** : Add a bootstrap info alert box after the select box. The value of this option\n     *                          will be the text of the alertbox\n     *                        - **icon** : An icon can be set. This will be placed in front of the label.\n     *                        - **class** : An additional css classname. The class **admSelectbox**\n     *                          is set as default and need not set with this parameter.\n     */\n    public function addSelectBoxFromXml($id, $label, $xmlFile, $xmlValueTag, $xmlViewTag, array $options = array())\n    {\n        $selectBoxEntries = array();\n\n        $xmlRootNode = new SimpleXMLElement($xmlFile, 0, true);\n\n        /**\n         * @var SimpleXMLElement $xmlChildNode\n         */\n        foreach ($xmlRootNode->children() as $xmlChildNode) {\n            $key   = '';\n            $value = '';\n\n            /**\n             * @var SimpleXMLElement $xmlChildChildNode\n             */\n            foreach ($xmlChildNode->children() as $xmlChildChildNode) {\n                if ($xmlChildChildNode->getName() === $xmlValueTag) {\n                    $key = (string) $xmlChildChildNode;\n                }\n                if ($xmlChildChildNode->getName() === $xmlViewTag) {\n                    $value = (string) $xmlChildChildNode;\n                }\n            }\n\n            $selectBoxEntries[$key] = $value;\n        }\n\n        // now call default method to create a selectbox\n        $this->addSelectBox($id, $label, $selectBoxEntries, $options);\n    }\n\n    /**\n     * Add a new selectbox with a label to the form. The selectbox get their data from table adm_categories.\n     * You must define the category type (roles, dates, links ...). All categories of this type will be shown.\n     * @param string   $id             ID of the selectbox. This will also be the name of the selectbox.\n     * @param string   $label          The label of the selectbox.\n     * @param Database $database       A Admidio database object that contains a valid connection to a database\n     * @param string   $categoryType   Type of category ('DAT', 'LNK', 'ROL', 'USF') that should be shown.\n     *                                 The type 'ROL' will ot list event role categories. Therefore, you need to set\n     *                                 the type 'ROL_EVENT'. It's not possible to show role categories together with\n     *                                 event categories.\n     * @param string   $selectBoxModus The selectbox could be shown in 2 different modus.\n     *                                 - **EDIT_CATEGORIES** : First entry will be \"Please choose\" and default category will be preselected.\n     *                                 - **FILTER_CATEGORIES** : First entry will be \"All\" and only categories with childs will be shown.\n     * @param array    $options        (optional) An array with the following possible entries:\n     *                                 - **property** : With this param you can set the following properties:\n     *                                   + **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                                   + **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                                   + **self::FIELD_DISABLED** : The field will be disabled and could not accept an input.\n     *                                 - **defaultValue** : ID of category that should be selected per default.\n     *.                                - **arrayKeyIsNotValue** : If set to **true** than the entry of the values-array will be used as\n     *                                   option value and not the key of the array\n     *                                 - **showSystemCategory** : Show user defined and system categories\n     *                                 - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                                   e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                                   the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                                   for the text you can add an array. The first entry must be the unique text id and the second\n     *                                   entry will be a parameter of the text id.\n     *                                 - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                                   e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                                   If you need an additional parameter for the text you can add an array. The first entry must\n     *                                   be the unique text id and the second entry will be a parameter of the text id.\n     *                                 - **alertWarning** : Add a bootstrap info alert box after the select box. The value of this option\n     *                                   will be the text of the alertbox\n     *                                 - **icon** : An icon can be set. This will be placed in front of the label.\n     *                                 - **class** : An additional css classname. The class **admSelectbox**\n     *                                   is set as default and need not set with this parameter.\n     */\n    public function addSelectBoxForCategories($id, $label, Database $database, $categoryType, $selectBoxModus, array $options = array())\n    {\n        global $gCurrentOrganization, $gCurrentUser, $gL10n;\n\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,\n            'property'                       => self::FIELD_DEFAULT,\n            'defaultValue'                   => '',\n            'arrayKeyIsNotValue'             => false,\n            'showContextDependentFirstEntry' => true,\n            'multiselect'                    => false,\n            'showSystemCategory'             => true,\n            'alertWarning'                   => '',\n            'helpTextIdLabel'                => '',\n            'helpTextIdInline'               => '',\n            'icon'                           => '',\n            'class'                          => ''\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        if ($selectBoxModus === self::SELECT_BOX_MODUS_EDIT && $gCurrentOrganization->countAllRecords() > 1) {\n            $optionsAll['alertWarning'] = $gL10n->get('SYS_ALL_ORGANIZATIONS_DESC', array(implode(', ', $gCurrentOrganization->getOrganizationsInRelationship(true, true, true))));\n\n            $this->addJavascriptCode(\n                '\n                $(\"#'.$id.'\").change(function() {\n                    if($(\"option:selected\", this).attr(\"data-global\") == 1) {\n                        $(\"#'.$id.'_alert\").show(\"slow\");\n                    } else {\n                        $(\"#'.$id.'_alert\").hide();\n                    }\n                });\n                $(\"#'.$id.'\").trigger(\"change\");',\n                true\n            );\n        }\n\n        $sqlTables     = '';\n        $sqlConditions = '';\n\n        // create sql conditions if category must have child elements\n        if ($selectBoxModus === self::SELECT_BOX_MODUS_FILTER) {\n            $catIdParams = array_merge(array(0), $gCurrentUser->getAllVisibleCategories($categoryType));\n            $optionsAll['showContextDependentFirstEntry'] = false;\n\n            switch ($categoryType) {\n                case 'DAT':\n                    $sqlTables = ' INNER JOIN ' . TBL_DATES . ' ON cat_id = dat_cat_id ';\n                    break;\n                case 'LNK':\n                    $sqlTables = ' INNER JOIN ' . TBL_LINKS . ' ON cat_id = lnk_cat_id ';\n                    break;\n                case 'ROL':\n                case 'ROL_EVENT':\n                    $sqlTables = ' INNER JOIN ' . TBL_ROLES . ' ON cat_id = rol_cat_id';\n                    break;\n            }\n        } else {\n            $catIdParams = array_merge(array(0), $gCurrentUser->getAllEditableCategories(($categoryType === 'ROL_EVENT' ? 'ROL' : $categoryType)));\n        }\n\n        switch ($categoryType) {\n            case 'ROL':\n                // don't show event categories\n                $sqlConditions .= ' AND cat_name_intern <> \\'EVENTS\\' ';\n                break;\n            case 'ROL_EVENT':\n                // only show event categories\n                $sqlConditions .= ' AND cat_name_intern = \\'EVENTS\\' ';\n                break;\n        }\n\n        if (!$optionsAll['showSystemCategory']) {\n            $sqlConditions .= ' AND cat_system = false ';\n        }\n\n        // within edit dialogs child organizations are not allowed to assign categories of all organizations\n        if ($selectBoxModus === self::SELECT_BOX_MODUS_EDIT && $gCurrentOrganization->isChildOrganization()) {\n            $sqlConditions .= ' AND cat_org_id = ? -- $gCurrentOrgId ';\n        } else {\n            $sqlConditions .= ' AND (  cat_org_id = ? -- $gCurrentOrgId\n                                    OR cat_org_id IS NULL ) ';\n        }\n\n        // the sql statement which returns all found categories\n        $sql = 'SELECT DISTINCT cat_id, cat_org_id, cat_uuid, cat_name, cat_default, cat_sequence\n                  FROM ' . TBL_CATEGORIES . '\n                       ' . $sqlTables . '\n                 WHERE cat_id IN (' . Database::getQmForValues($catIdParams) . ')\n                   AND cat_type = ? -- $categoryType\n                       ' . $sqlConditions . '\n              ORDER BY cat_sequence ASC';\n        $queryParams = array_merge(\n            $catIdParams,\n            array(\n                ($categoryType === 'ROL_EVENT' ? 'ROL' : $categoryType),\n                $GLOBALS['gCurrentOrgId']\n            )\n        );\n        $pdoStatement = $database->queryPrepared($sql, $queryParams);\n        $countCategories = $pdoStatement->rowCount();\n\n        // if no or only one category exist and in filter modus, than don't show category\n        if ($selectBoxModus === self::SELECT_BOX_MODUS_FILTER && ($countCategories === 0 || $countCategories === 1)) {\n            return;\n        }\n\n        $categoriesArray = array();\n        $optionsAll['valueAttributes'] = array();\n\n        if ($selectBoxModus === self::SELECT_BOX_MODUS_FILTER && $countCategories > 1) {\n            $categoriesArray[0] = $gL10n->get('SYS_ALL');\n            $optionsAll['valueAttributes'][0] = array('data-global' => 0);\n        }\n\n        while ($row = $pdoStatement->fetch()) {\n            // if several categories exist than select default category\n            if ($selectBoxModus === self::SELECT_BOX_MODUS_EDIT && $optionsAll['defaultValue'] === ''\n            && ($countCategories === 1 || $row['cat_default'] === 1)) {\n                $optionsAll['defaultValue'] = $row['cat_uuid'];\n            }\n\n            // if text is a translation-id then translate it\n            $categoriesArray[$row['cat_uuid']] = Language::translateIfTranslationStrId($row['cat_name']);\n\n            // add label that this category is visible to all organizations\n            if ($row['cat_org_id'] === null) {\n                if ($categoriesArray[$row['cat_uuid']] !== $gL10n->get('SYS_ALL_ORGANIZATIONS')) {\n                    $categoriesArray[$row['cat_uuid']] = $categoriesArray[$row['cat_uuid']] . ' (' . $gL10n->get('SYS_ALL_ORGANIZATIONS') . ')';\n                }\n                $optionsAll['valueAttributes'][$row['cat_uuid']] = array('data-global' => 1);\n            } else {\n                $optionsAll['valueAttributes'][$row['cat_uuid']] = array('data-global' => 0);\n            }\n        }\n\n        // now call method to create select box from array\n        $this->addSelectBox($id, $label, $categoriesArray, $optionsAll);\n    }\n\n    /**\n     * Add a new static control to the form. A static control is only a simple text instead of an input field.\n     * This could be used if the value should not be changed by the user.\n     * @param string $id      ID of the static control. This will also be the name of the static control.\n     * @param string $label   The label of the static control.\n     * @param string $value   A value of the static control. The control will be created with this value.\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **helpTextIdLabel** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set a help icon will be shown after the control label where\n     *                          the user can see the text if he hovers over the icon. If you need an additional parameter\n     *                          for the text you can add an array. The first entry must be the unique text id and the second\n     *                          entry will be a parameter of the text id.\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **alertWarning** : Add a bootstrap info alert box after the select box. The value of this option\n     *                          will be the text of the alertbox\n     *                        - **icon** : An icon can be set. This will be placed in front of the label.\n     *                        - **class** : An additional css classname. The class **admSelectbox**\n     *                          is set as default and need not set with this parameter.\n     */\n    public function addStaticControl($id, $label, $value, array $options = array())\n    {\n        $attributes = array('class' => 'form-control-static');\n        ++$this->countElements;\n\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,'property' => '', 'helpTextIdLabel' => '', 'helpTextIdInline' => '', 'icon' => '', 'class' => '');\n        $optionsAll     = array_replace($optionsDefault, $options);\n\n        // set specific css class for this field\n        if ($optionsAll['class'] !== '') {\n            $attributes['class'] .= ' ' . $optionsAll['class'];\n        }\n\n        // now create html for the field\n        $this->openControlStructure('', $label, self::FIELD_DEFAULT, $optionsAll['helpTextIdLabel'], $optionsAll['icon']);\n        $this->addHtml('<p class=\"' . $attributes['class'] . '\">' . $value . '</p>');\n        $this->closeControlStructure($optionsAll);\n    }\n\n    /**\n     * Add a new button with a custom text to the form. This button could have\n     * an icon in front of the text. Different to addButton this method adds an\n     * additional **div** around the button and the type of the button is **submit**.\n     * @param string $id      ID of the button. This will also be the name of the button.\n     * @param string $text    Text of the button\n     * @param array  $options (optional) An array with the following possible entries:\n     *                        - **icon** : Optional parameter. Path and filename of an icon.\n     *                          If set a icon will be shown in front of the text.\n     *                        - **link** : If set a javascript click event with a page load to this link\n     *                          will be attached to the button.\n     *                        - **class** : Optional an additional css classname. The class **admButton**\n     *                          is set as default and need not set with this parameter.\n     *                        - **type** : If set to true this button get the type **submit**. This will\n     *                          be the default.\n     */\n    public function addSubmitButton($id, $text, array $options = array())\n    {\n        // create array with all options\n        $optionsDefault = array('formtype' => $this->type,'icon' => '', 'link' => '', 'class' => '', 'type' => 'submit');\n        $optionsAll     = array_replace($optionsDefault, $options);\n\n        // add default css classes\n        $optionsAll['class'] .= ' btn btn-primary';\n        if ($this->type !== 'navbar') {\n            $optionsAll['class'] .= '  admidio-margin-bottom';\n        }\n\n        // now add button to form\n        $this->addButton($id, $text, $optionsAll);\n\n        if (!$this->buttonGroupOpen) {\n            $this->addHtml('<div class=\"form-alert\" style=\"display: none;\">&nbsp;</div>');\n        }\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n    /**\n     * Close an open bootstrap btn-group\n     */\n    public function closeButtonGroup()\n    {\n        $this->buttonGroupOpen = false;\n        $this->addHtml('</div><div class=\"form-alert\" style=\"display: none;\">&nbsp;</div>');\n    }\n\n    /**\n     * Closes a field structure that was added with the method openControlStructure.\n     * @param array $options (optional) An array with the following possible entries:\n     *                        - **helpTextIdInline** : A unique text id from the translation xml files that should be shown\n     *                          e.g. SYS_DATA_CATEGORY_GLOBAL. If set the complete text will be shown after the form element.\n     *                          If you need an additional parameter for the text you can add an array. The first entry must\n     *                          be the unique text id and the second entry will be a parameter of the text id.\n     *                        - **alertWarning** : Add a bootstrap warning alert box after the select box. The value of this option\n     *                          will be the text of the alertbox\n     */\n\n    protected function closeControlStructure(array $options = array())\n    {\n        if ($options['property'] !== self::FIELD_HIDDEN) {\n            $parameters = array();\n            $helpTextId = $options['helpTextIdInline'];\n\n            if (is_array($options['helpTextIdInline'])) {\n                $parameters = $options['helpTextIdInline'][1];\n                $helpTextId = $options['helpTextIdInline'][0];\n            }\n\n            if ($helpTextId !== '') {\n                // if text is a translation-id then translate it\n                if (Language::isTranslationStringId($helpTextId)) {\n                    foreach ($parameters as &$parameter) {\n                        // parameters should be strings\n                        $parameter = (string)$parameter;\n\n                        // if parameter is a translation-id then translate it\n                        $parameter = Language::translateIfTranslationStrId($parameter);\n                    }\n                    unset($parameter);\n\n                    $helpText = $GLOBALS['gL10n']->get($helpTextId, $parameters);\n                } else {\n                    $helpText = $helpTextId;\n                }\n\n                $this->addHtml('<div class=\"help-block\">' . $helpText . '</div>');\n            }\n\n            // add block with warning alert\n            if (isset($options['alertWarning']) && $options['alertWarning'] !== '') {\n                $this->addHtml('<div class=\"alert alert-warning mt-3\" role=\"alert\">\n                <i class=\"fas fa-exclamation-triangle\"></i>' . $options['alertWarning'] . '\n            </div>');\n            }\n\n            if ($this->type === 'vertical' || $this->type === 'navbar') {\n                $this->addHtml('</div>');\n            } else {\n                $this->addHtml('</div></div>');\n            }\n        }\n    }\n\n    /**\n     * Close all html elements of a groupbox that was created before.\n     */\n\n    public function closeGroupBox()\n    {\n        $this->addHtml('</div></div>');\n    }\n\n    /**\n     * Add a small help icon to the form at the current element which shows the translated text of the\n     * text-id or an individual text on mouseover. The title will be note if it's a text-id or\n     * description if it's an individual text.\n     * @param string $string    A text that should be shown or a unique text id from the translation xml files\n     *                          that should be shown e.g. SYS_DATA_CATEGORY_GLOBAL.\n     * @param string $title     A text-id that represents the title of the help text. Default will be SYS_NOTE.\n     * @param array $parameter If you need an additional parameters for the text you can set this parameter values within an array.\n     * @return string Return a html snippet that contains a help icon with a link to a popup box that shows the message.\n     */\n    public static function getHelpTextIcon(string $string, string $title = 'SYS_NOTE', array $parameter = array())\n    {\n        global $gL10n;\n\n        $html = '';\n\n        if(strlen($string) > 0) {\n            if (Language::isTranslationStringId($string)) {\n                $text  = $gL10n->get($string, $parameter);\n            } else {\n                $text  = $string;\n            }\n\n            $html = '<i class=\"fas fa-info-circle admidio-info-icon\" data-toggle=\"popover\"\n            data-html=\"true\" data-trigger=\"hover click\" data-placement=\"auto\"\n            title=\"' . $gL10n->get($title) . '\" data-content=\"' . SecurityUtils::encodeHTML($text) . '\"></i>';\n        }\n        return $html;\n    }\n\n    public static function getHelpText($text)\n    {\n        $parameters = array();\n\n        if (is_array($text)) {\n            $parameters = $text[1];\n            $text = $text[0];\n        }\n\n        if ($text !== '') {\n            // if text is a translation-id then translate it\n            if (Language::isTranslationStringId($text)) {\n                foreach ($parameters as &$parameter) {\n                    // parameters should be strings\n                    $parameter = (string)$parameter;\n\n                    // if parameter is a translation-id then translate it\n                    $parameter = Language::translateIfTranslationStrId($parameter);\n                }\n                unset($parameter);\n\n                $text = $GLOBALS['gL10n']->get($text, $parameters);\n            }\n        }\n        return $text;\n    }\n\n    /**\n     * Open a bootstrap btn-group if the form need more than one button.\n     */\n\n\n    public function openButtonGroup()\n    {\n        $this->buttonGroupOpen = true;\n        $this->addHtml('<div class=\"btn-group\" role=\"group\">');\n    }\n\n    /**\n     * Creates a html structure for a form field. This structure contains the label and the div for the form element.\n     * After the form element is added the method closeControlStructure must be called.\n     * @param string $id         The id of this field structure.\n     * @param string $label      The label of the field. This string should already be translated.\n     * @param int    $property   (optional) With this param you can set the following properties:\n     *                           - **self::FIELD_DEFAULT**  : The field can accept an input.\n     *                           - **self::FIELD_REQUIRED** : The field will be marked as a mandatory field where the user must insert a value.\n     *                           - **self::FIELD_DISABLED** : The field will be disabled and could not accept an input.\n     * @param string $helpTextId (optional) A unique text id from the translation xml files that should be shown e.g. SYS_DATA_CATEGORY_GLOBAL.\n     *                           If set a help icon will be shown where the user can see the text if he hovers over the icon.\n     *                           If you need an additional parameter for the text you can add an array. The first entry\n     *                           must be the unique text id and the second entry will be a parameter of the text id.\n     * @param string $icon       (optional) An icon can be set. This will be placed in front of the label.\n     * @param string $class      (optional) An additional css classname for the row. The class **admFieldRow**\n     *                           is set as default and need not set with this parameter.\n     */\n\n    protected function openControlStructure($id, $label, $property = self::FIELD_DEFAULT, $helpTextId = '', $icon = '', $class = '')\n    {\n        if ($property !== self::FIELD_HIDDEN) {\n            $cssClassRow = 'form-group';\n            $htmlIcon = '';\n            $htmlHelpIcon = '';\n            $htmlIdFor = '';\n\n            // set specific css class for this row\n            if ($class !== '') {\n                $cssClassRow .= ' ' . $class;\n            }\n\n            if ($this->type === 'default') {\n                $cssClassRow .= ' row';\n            }\n\n            // if necessary set css class for a mandatory element\n            if ($property === self::FIELD_REQUIRED && $this->showRequiredFields) {\n                $cssClassRow .= ' admidio-form-group-required';\n            }\n\n            if ($id !== '') {\n                $htmlIdFor = ' for=\"' . $id . '\"';\n                $this->addHtml('<div id=\"' . $id . '_group\" class=\"' . $cssClassRow . '\">');\n            } else {\n                $this->addHtml('<div class=\"' . $cssClassRow . '\">');\n            }\n\n            if ($icon !== '') {\n                // create html for icon\n                $htmlIcon = Image::getIconHtml($icon, $label);\n            }\n\n            if ($helpTextId !== '') {\n                $htmlHelpIcon = self::getHelpTextIcon($helpTextId);\n            }\n\n            // add label element\n            if ($this->type === 'vertical' || $this->type === 'navbar') {\n                if ($label !== '') {\n                    $this->addHtml('<label' . $htmlIdFor . '>' . $htmlIcon . $label . $htmlHelpIcon . '</label>');\n                }\n            } else {\n                if ($label !== '') {\n                    $this->addHtml(\n                        '<label' . $htmlIdFor . ' class=\"col-sm-3 control-label\">' . $htmlIcon . $label . $htmlHelpIcon . '</label>\n                    <div class=\"col-sm-9\">'\n                    );\n                } else {\n                    $this->addHtml('<div class=\"offset-sm-3 col-sm-9\">');\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a new groupbox to the form. This could be used to group some elements\n     * together. There is also the option to set a headline to this group box.\n     * @param string $id       Id the the groupbox.\n     * @param string $headline (optional) A headline that will be shown to the user.\n     * @param string $class    (optional) An additional css classname for the row. The class **admFieldRow**\n     *                         is set as default and need not set with this parameter.\n     */\n\n    public function openGroupBox($id, $headline = null, $class = '')\n    {\n        $this->addHtml('<div id=\"' . $id . '\" class=\"card admidio-field-group ' . $class . '\">');\n        // add headline to groupbox\n        if ($headline !== null) {\n            $this->addHtml('<div class=\"card-header\">' . $headline . '</div>');\n        }\n        $this->addHtml('<div class=\"card-body\">');\n    }\n\n\n    /**\n     * This method create the whole html code of the form. Call this method\n     * if you have finished your form layout. If mandatory fields were set than a notice\n     * which marker represents the mandatory will be shown before the form.\n     * @return string Return the html code of the form.\n     */\n    public function show()\n    {\n        global $gL10n;\n\n        // if there are no elements in the form then return nothing\n        if ($this->countElements === 0) {\n            return '';\n        }\n\n        $html = '';\n\n        // If required fields were set than a notice which marker represents the required fields will be shown.\n        if ($this->flagRequiredFields && $this->showRequiredFields) {\n            $html .= '<div class=\"admidio-form-required-notice\"><span>' . $gL10n->get('SYS_REQUIRED_INPUT') . '</span></div>';\n        }\n\n        // now get whole form html code\n        $html .= $this->getHtmlForm();\n\n        return $html;\n    }\n}\n", "<?php\n/**\n ***********************************************************************************************\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n ***********************************************************************************************\n */\n\n/**\n * Create html form elements\n *\n * This class creates html form elements.\n * Create an instance of an form element and set the input elements inline .\n * The class supports setting all form elements and allows you to configure all attributes programatically.\n * The parsed form object  is returned as string.\n *\n * **Code examples**\n * ```\n * // Example of an array with further attributes\n * $attrArray = array('class' => 'Classname');\n * ```\n *\n * **Code examples**\n * ```\n * // Example: Creating a form element\n *\n * // Get the Instance for a new form element and set an action attribute\n * $form = new HtmlFormBasic('test.php');\n * // XHTML determines that the input elements are inline elements of a block element\n * // so we need somthing like a div Block. In this example we use a fieldset\n * $form->addFieldSet();\n * // we can define a label for the input element with reference ID\n * $form->addLabel('Field_1', 'ID_1');\n * // set an input element like a text field. All valid types are supported\n * // you can define further attributes as associative array and set as parameter in correct position\n * $form->addSimpleInput('text', 'Input_1', 'ID_1', 'Value_1', $attrArray);\n * // add a linebreak\n * $form->linebreak();\n * // next label\n * $form->addLabel('Radio_1', 'ID_2');\n * // next element is a radio button\n * $form->addSimpleInput('radio', 'Radio_1', 'ID_2', 'Value_Radio');\n * // add a linebreak\n * $form->linebreak();\n * // Define a select box\n * $form->addSelect('Select_Name', 'ID_3', $attrArray);\n * // now we can also specify an optiongroup\n * $form->addOptionGroup('Group_1', 'ID_4', $attrArray);\n * // define options\n * $form->addOption('Option_Value_1', 'Option_Label_1');\n * $form->addOption('Option_Value_2', 'Option_Label_2');\n * $form->addOption('Option_Value_3', 'Option_Label_3');\n * // end of option group\n * $form->closeOptionGroup();\n * // end of select box\n * $form->closeSelect();\n * // add a linebreak\n * $form->linebreak();\n * // example of a text area\n * $form->addTextArea('Textarea', '4', '4', 'Input please ...', 'ID_5', $attrArray);\n * // close open fieldset block\n * $form->closeFieldSet();\n * // print the form\n * echo $form->getHtmlForm();\n * ```\n */\nclass HtmlFormBasic extends HtmlElement\n{\n    /**\n     * Constructor creates the element\n     *\n     * @param string $action Optional action attribute of the form\n     * @param string $id     Id of the form\n     * @param string $method Get/Post (Default \"get\" if not defined)\n     * @param string $event  Optional event handler\n     * @param string $script Optional script or function called from event handler\n     */\n    public function __construct($action = null, $id = null, $method = 'get', $event = null, $script = null)\n    {\n        parent::__construct('form');\n\n        // set action attribute\n        if ($action !== null) {\n            $this->addAttribute('action', $action);\n        }\n\n        if ($id !== null) {\n            $this->addAttribute('id', $id);\n        }\n\n        if ($method !== null) {\n            $this->addAttribute('method', $method);\n        }\n\n        if ($event !== null && $script !== null) {\n            $this->addAttribute($event, $script);\n        }\n    }\n\n    /**\n     * Add a fieldset.\n     * @param string $legend Description for optional legend element as string\n     * @param string $id     Optional ID\n     */\n    public function addFieldSet($legend = null, $id = null)\n    {\n        if ($id !== null) {\n            $this->addParentElement('fieldset');\n        } else {\n            $this->addParentElement('fieldset', 'id', $id);\n        }\n\n        if ($legend !== null) {\n            $this->addLegend($legend);\n        }\n    }\n\n    /**\n     * Add an input field with attribute properties.\n     * @param string               $type          Type of input field e.g. 'text'\n     * @param string               $name          Name of the input field\n     * @param string               $id            Optional ID for the input\n     * @param string               $value         Value of the field (Default: empty)\n     * @param array<string,string> $arrAttributes Further attributes as array with key/value pairs\n     */\n    public function addSimpleInput($type, $name, $id = null, $value = '', array $arrAttributes = [])\n    {\n        $data = [\n            'type' => $type,\n            'name' => $name,\n            'id' => $id ,\n            'value' => $value\n        ];\n        $data = array_merge($data, $arrAttributes);\n\n        $data = array_filter($data);\n\n        $this->addHtml($this->render('form.input.simple', [\"attributes\" => $data]));\n    }\n\n    /**\n     * Add a label to the input field.\n     * @param string $string Value of the label as string\n     * @param string $refId\n     * @param string $attribute\n     */\n    public function addLabel($string = '', $refId = null, $attribute = 'for')\n    {\n        $this->addElement('label');\n\n        if ($refId !== null) {\n            $this->addAttribute($attribute, $refId);\n        }\n        $this->addData($string);\n    }\n\n    /**\n     * Add a legend element in current fieldset.\n     * @param string $legend Data for the element as string\n     */\n    public function addLegend($legend)\n    {\n        $this->addElement('legend', '', '', $legend);\n    }\n\n    /**\n     * Add inline element into current division.\n     * @param string               $value         Option value\n     * @param string               $label         Label of the option\n     * @param string               $id            Optional Id of the option\n     * @param bool                 $selected      Mark as selected (Default: false)\n     * @param bool                 $disable       Disable option (optional)\n     * @param array<string,string> $arrAttributes Further attributes as array with key/value pairs\n     */\n    public function addOption($value, $label, $id = null, $selected = false, $disable = false, array $arrAttributes = null)\n    {\n        $this->addElement('option');\n        // replace quotes with html entities to prevent xss attacks\n        $this->addAttribute('value', $value);\n\n        if ($id !== null) {\n            $this->addAttribute('id', $id);\n        }\n\n        if ($selected) {\n            $this->addAttribute('selected', 'selected');\n        }\n\n        if ($disable) {\n            $this->addAttribute('disabled', 'disabled');\n        }\n\n        // Check optional attributes in associative array and set all attributes\n        if ($arrAttributes !== null) {\n            $this->setAttributesFromArray($arrAttributes);\n        }\n\n        // add label\n        $this->addData($label);\n    }\n\n    /**\n     * Add an option group.\n     * @param string               $label         Label of the option group\n     * @param string               $id            Optional Id of the group\n     * @param bool                 $disable       Disable option group (Default: false)\n     * @param array<string,string> $arrAttributes Further attributes as array with key/value pairs\n     */\n    public function addOptionGroup($label, $id = null, $disable = false, array $arrAttributes = null)\n    {\n        $this->addParentElement('optgroup');\n\n        // set attributes\n        $this->addAttribute('label', $label);\n\n        if ($id !== null) {\n            $this->addAttribute('id', $id);\n        }\n\n        // Check optional attributes in associative array and set all attributes\n        if ($arrAttributes !== null) {\n            $this->setAttributesFromArray($arrAttributes);\n        }\n\n        if ($disable) {\n            $this->addAttribute('disabled', 'disabled');\n        }\n    }\n\n    /**\n     * Add an option group.\n     * @param string               $name          Name of the select\n     * @param string               $id            Optional Id of the select\n     * @param array<string,string> $arrAttributes Further attributes as array with key/value pairs\n     * @param bool                 $disable       Disable select (Default: false)\n     */\n    public function addSelect($name, $id = null, array $arrAttributes = null, $disable = false)\n    {\n        $this->addParentElement('select', 'name', $name);\n\n        // set attributes\n        if ($id !== null) {\n            $this->addAttribute('id', $id);\n        }\n\n        // Check optional attributes in associative array and set all attributes\n        if ($arrAttributes !== null) {\n            $this->setAttributesFromArray($arrAttributes);\n        }\n\n        if ($disable) {\n            $this->addAttribute('disabled', 'disabled');\n        }\n    }\n\n    /**\n     * Adds a button to the form.\n     * @param string $name  Name of the button\n     * @param string $type  Type attribute (Allowed: submit, reset, button (Default: button))\n     * @param string $value Value of the button\n     * @param string $id    Optional ID for the button\n     * @param string $link  If set a javascript click event with a page load to this link\n     *                      will be attached to the button.\n     */\n    public function addSimpleButton($name, $type, $value, $id = null, $link = null)\n    {\n        $this->addElement('button');\n\n        if ($id !== null) {\n            $this->addAttribute('id', $id);\n        }\n\n        // if link is set then add a onclick event\n        if ($link !== null) {\n            $this->addAttribute('onclick', 'self.location.href=\\'' . $link . '\\'');\n        }\n\n        $this->addAttribute('name', $name);\n        $this->addAttribute('type', $type);\n        $this->addData($value);\n    }\n\n    /**\n     * Add a text area.\n     * @param string               $name          Name of the text area\n     * @param int                  $rows          Number of rows\n     * @param int                  $cols          Number of cols\n     * @param string               $text          Text as content\n     * @param string               $id            Optional Id\n     * @param array<string,string> $arrAttributes Further attributes as array with key/value pairs\n     * @param bool                 $disable       Disable text area (Default: false)\n     */\n    public function addTextArea($name, $rows, $cols, $text = '', $id = null, array $arrAttributes = null, $disable = false)\n    {\n        $this->addElement('textarea');\n\n        // set attributes\n        $this->addAttribute('name', $name);\n        $this->addAttribute('rows', (string) $rows);\n        $this->addAttribute('cols', (string) $cols);\n\n        if ($id !== null) {\n            $this->addAttribute('id', $id);\n        }\n\n        // Check optional attributes in associative array and set all attributes\n        if ($arrAttributes !== null) {\n            $this->setAttributesFromArray($arrAttributes);\n        }\n\n        if ($disable) {\n            $this->addAttribute('disabled', 'disabled');\n        }\n\n        $this->addData($text);\n    }\n\n    /**\n     * @par Close current fieldset.\n     */\n    public function closeFieldSet()\n    {\n        $this->closeParentElement('fieldset');\n    }\n\n    /**\n     * @par Close current option group.\n     */\n    public function closeOptionGroup()\n    {\n        $this->closeParentElement('optgroup');\n    }\n\n    /**\n     * @par Close current select.\n     */\n    public function closeSelect()\n    {\n        $this->closeParentElement('select');\n    }\n\n    /**\n     * Get the full parsed html form\n     * @return string Returns the validated html form as string\n     */\n    public function getHtmlForm()\n    {\n        return $this->getHtmlElement();\n    }\n}\n"], "filenames": ["adm_program/modules/announcements/announcements_new.php", "adm_program/modules/categories/categories_new.php", "adm_program/modules/dates/dates_new.php", "adm_program/modules/documents-files/rename.php", "adm_program/modules/groups-roles/groups_roles_new.php", "adm_program/modules/guestbook/guestbook_comment_new.php", "adm_program/modules/guestbook/guestbook_new.php", "adm_program/modules/links/links_new.php", "adm_program/modules/menu/menu_new.php", "adm_program/modules/messages/messages_write.php", "adm_program/modules/photos/photo_album_new.php", "adm_program/modules/profile-fields/profile_fields_new.php", "adm_program/modules/rooms/rooms_new.php", "adm_program/modules/userrelations/relationtypes_new.php", "adm_program/system/classes/HtmlForm.php", "adm_program/system/classes/HtmlFormBasic.php"], "buggy_code_start_loc": [86, 187, 224, 92, 140, 127, 115, 74, 138, 90, 116, 97, 60, 52, 760, 180], "buggy_code_end_loc": [87, 188, 251, 102, 360, 135, 123, 75, 205, 548, 153, 238, 61, 146, 761, 181], "fixing_code_start_loc": [86, 187, 224, 92, 140, 127, 115, 74, 138, 90, 116, 97, 60, 52, 760, 180], "fixing_code_end_loc": [87, 188, 251, 102, 360, 135, 123, 75, 205, 548, 153, 238, 61, 146, 761, 181], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository admidio/admidio prior to 4.2.8.", "other": {"cve": {"id": "CVE-2023-3109", "sourceIdentifier": "security@huntr.dev", "published": "2023-06-05T16:15:09.600", "lastModified": "2023-06-09T22:56:20.547", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository admidio/admidio prior to 4.2.8."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:admidio:admidio:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.2.8", "matchCriteriaId": "8371F622-F25A-40EA-91E5-0791A9F4EA89"}]}]}], "references": [{"url": "https://github.com/admidio/admidio/commit/a7c211b835cafe1158932fbfcff9e5552e57510a", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/6fa6070e-8f7f-43ae-8a84-e36b28256123", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/admidio/admidio/commit/a7c211b835cafe1158932fbfcff9e5552e57510a"}}