{"buggy_code": ["<?php\n\ninclude_once(\"./eval_conf.php\");\ninclude_once(\"./functions.php\");\n\nif ( isset($_GET['action']) && $_GET['action'] == \"show_views\" ) {\n  //////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Show available views\n  //////////////////////////////////////////////////////////////////////////////////////////////////////\n  $available_views = get_available_views();\n  ?>\n\n  <table>\n  <?php\n  if ( isset($_GET['aggregate']) ) {\n  ?>\n     <tr><th>Host regular expression</th><td><?php print join (\",\", $_GET['hreg']); ?></td></tr>\n     <tr><th>Metric regular expression</th><td><?php print join (\",\", $_GET['mreg']); ?></td></tr>\n  <?php\n    } else {\n  ?>\n     <tr><th>Hostname</th><td><?php print $_GET['host_name']; ?></td></tr>\n     <tr><th>Metric/Report</th><td><?php print $_GET['metric_name']; ?></td></tr>\n  <?php\n  }\n  ?>\n\n  </table>\n  <p>\n  <form id=\"add_metric_to_view_form\">\n    Add graph to view: <br />\n    <?php \n    // Get all the aggregate form variables and put them in the hidden fields\n    if ( isset($_GET['aggregate']) ) {\n\tforeach ( $_GET as $key => $value ) {\n\t  if ( is_array($value) ) {\n\t    foreach ( $value as $index => $value2 ) {\n\t      print '<input type=\"hidden\" name=\"' . $key .'[]\" value=\"' . $value2 . '\" />';\n\t    }\n\t  } else {\n\t    print '<input type=\"hidden\" name=\"' . $key .'\" value=\"' . $value . '\" />';\n\t  }\n\t}\n    } else {\n      // If hostname is not set we assume we are dealing with aggregate graphs\n      print \"<input type=\\\"hidden\\\" name=\\\"host_name\\\" value=\\\"{$_GET['host_name']}\\\" />\";\n      $metric_name=$_GET['metric_name'];\n      print \"<input type=\\\"hidden\\\" name=\\\"metric_name\\\" value=\\\"{$_GET['metric_name']}\\\" />\";\n      print \"<input type=\\\"hidden\\\" name=\\\"type\\\" value=\\\"{$_GET['type']}\\\">\";\n      if (isset($_GET['vl']) && ($_GET['vl'] !== ''))\n\t  print \"<input type=\\\"hidden\\\" name=\\\"vertical_label\\\" value=\\\"\" . htmlentities(stripslashes($_GET['vl'])) . \"\\\" />\";\n      if (isset($_GET['ti']) && ($_GET['ti'] !== ''))\n\t  print \"<input type=\\\"hidden\\\" name=\\\"title\\\" value=\\\"\" . htmlentities(stripslashes($_GET['ti'])) . \"\\\" />\";\n      \n      print \"<table><tr><th rowspan=2>Optional thresholds to display</th><td>Warning</td><td><input size=6 name=\\\"warning\\\"></td>\n\t</tr><td>Critical</td><td><input size=6 name=\\\"critical\\\"></td></tr></table>\";\n    }\n    ?>\n    <br />\n    <center>\n    <select onChange=\"addItemToView()\" name=\"view_name\">\n    <option value=\"none\">Please choose a view to add to</option>\n    <?php\n    foreach ( $available_views as $view_id => $view ) {\n      print \"<option value=\\\"\" . $view['view_name'] . \"\\\">\" . $view['view_name'] . \"</option>\";\n    } \n\n  ?>\n    </select>\n    </center>\n  </form>\n<?php\n\n} // end of if ( isset($_GET['show_views']) {\n?>\n", "<?php\n\ninclude_once(\"./eval_conf.php\");\ninclude_once(\"./functions.php\");\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// Print out \n//////////////////////////////////////////////////////////////////////////////////////////\nif ( ! isset($_REQUEST['view_name']) ) {\n\n  $available_views = get_available_views();\n\n  print \"<form action=autorotation.php><select onchange='this.form.submit();' name=view_name><option value=none>Please choose...</option>\";\n  foreach ( $available_views as $id => $view ) {\n    print \"<option value='\" . $view['view_name'] . \"'>\" . $view['view_name'] . \"</option>\";\n  }\n  print \"</form>\";\n\n} else {\n\n  header(\"Cache-Control: no-cache, must-revalidate\");\n  header(\"Expires: Sat, 26 Jul 1997 05:00:00 GMT\");\n\n  // We need metrics cache in order to derive cluster name particular host\n  // belongs to\n  retrieve_metrics_cache();\n\n  $available_views = get_available_views();\n\n  $view_found = 0;\n  \n  $user['view_name'] = $_REQUEST['view_name'];\n  \n  // I am not quite sure at this point whether I should cache view info so\n  // for now I will have to do this\n  foreach ( $available_views as $id => $view ) {\n    # Find view settings\n    if ( $user['view_name'] == $view['view_name'] ) {\n      $view_found = 1;\n      break;\n    }\n  }\n  unset($available_views);\n\n  if ( $view_found == 0 || sizeof($view['items']) == 0 ) {\n      die (\"<font color=red size=4>There are no graphs in view you supplied or view does not exist.</font>\");\n  }\n\n  # If timeout is specified use it. Otherwise default to 30 seconds.\n  if ( isset($_REQUEST['timeout']) and is_numeric($_REQUEST['timeout']) )\n    $timeout = $_REQUEST['timeout'];\n  else\n    $timeout = 30;\n\n  # This defines times when updates are happening. For instance if you want\n  # to turn off updating during non-business hours you would set \n  # office_hour_min = 8 and office_hour_max = 17. If you want them 24/7\n  # set min to 0 and max to 24.\n  $office_hour_min = 0;\n  $office_hour_max = 24;\n\n  # Graph sizes to use. Those have to be specified in /ganglia/conf.php\n  $small_size = \"medium\";\n  $large_size = \"xlarge\";\n\n  # Path to ganglia. It can be a real URL\n  $gangliapath = \"graph.php?hc=4&st=\";\n\n  # Get the requested graphid and store it in a somewhat more beautiful variable name\n  isset($_GET['id']) and is_numeric($_GET['id']) ? $id = $_GET['id'] : $id = 0;\n\n  // Let's get all View graph elements\n  $view_elements = get_view_graph_elements($view);\n  \n  # The title of the next graph, with some logic to set the next to the first if we run out of graphs\n  if ($id < (count($view_elements) -1)) {\n\t  $nextid = $id+1;\n  } else {\n\t  $nextid = 0;\n  }\n\n  // The title of the graph\n  $title = $view_elements[$id]['name'];\n  # If it's not an aggregate graph put hostname in the title\n  $suffix = isset($view_elements[$nextid]['hostname']) ? \" for \" . $view_elements[$nextid]['hostname'] : \"\";\n  $nexttitle = $view_elements[$nextid]['name'] . $suffix;\n\n  ?>\n  <html>\n  <head>\n  <title>Ganglia - Graph View</title>\n  <meta http-equiv=\"refresh\" content=\"<?php print \"$timeout;url=\" . $_SERVER[\"SCRIPT_NAME\"] . \"?view_name=\" . $user['view_name'] .\"&id=\" . $nextid; ?>&timeout=<?php print $timeout ?>\">\n  <style>\n  body { \n\t  margin: 0px;\n\t  font-family: Tahoma, Helvetica, Verdana, Arial, sans-serif;\n  }\n  </style>\n  </head>\n\n\n  <body>\n\n  <?php\n\n  $current_hour = date('G');\n\n  #####################################################################################\n  # Check whether these are office hours. Display graphs only during office hours\n  # so that we can give Ganglia server a little breather from generating all those\n  # images\n  #####################################################################################\n  if ( $current_hour >= $office_hour_min && $current_hour <= $office_hour_max ) {\n\n  ?>\n\n  <div style=\"position: fixed; left: 20; width: 800; top: 2; font-size: 30px;\"><?php echo $title;  ?></div>\n  <div style=\"position: fixed; left: 20; width: 600; top: 55; font-size: 20px;\">Next: <?php echo $nexttitle  ?></div><br />\n\n  <table>\n  <tr>\n    <td><img src=\"<?php echo $gangliapath . \"&r=hour&z=${large_size}&\" . $view_elements[$id]['graph_args']; ?>\"><br />\n\t<img src=\"<?php echo $gangliapath . \"&r=day&z=${large_size}&\" . $view_elements[$id]['graph_args']; ?>\"></td>\n    <td valign=\"top\">\n      <img src=\"<?php echo $gangliapath . \"&r=week&z=${small_size}&\" . $view_elements[$id]['graph_args']; ?>\">\n      <img src=\"<?php echo $gangliapath . \"&r=month&z=${small_size}&\" . $view_elements[$id]['graph_args']; ?>\">\n    <div style=\"margin-top: 10px; font-size: 48px; text-align: center;\"><?php echo date(DATE_RFC850); ?></div>\n    <p>\n    <center><form>\n    <input type=\"hidden\" name=\"view_name\" value=\"<?php print $_GET['view_name'] ?>\">\n    <input type=\"hidden\" name=\"id\" value=\"<?php print $nextid ?>\">\n    Rotate graphs every <select onChange=\"form.submit();\" name=\"timeout\">\n    <?php\n      for ( $i = 10 ; $i <= 90 ; $i += 5 ) {\n\tif ( $timeout == $i )\n\t  $selected = \"selected\";\n\telse\n\t  $selected = \"\";\n\tprint \"<option value='\" . $i . \"' $selected>$i</option>\";\n      }\n    ?>\n    </select> seconds.</form></center>\n    </p>\n    <center><a href=\"/ganglia/\">Go back to Ganglia</a></center></div>\n\t  </td>\n  </tr>\n  </table>\n  <div>\n\n  <?php\n\n  } else {\n\n  ?>\n  <div style=\"color: red; font-size: 72px;\">\n  We are sleeping since it's off hours.<p>\n  Adjust $office_hour_min and $office_hour_max if this makes you unhappy</h3>\n  </div>\n  <div style=\"margin-top: 10px; font-size: 48px; text-align: center;\"><?php echo date(DATE_RFC850); ?></div>\n  <?php\n\n  }\n\n  print \"  </body>\n  </html>\";\n\n} // end of if (!isset($_GET['view_name']\n?>\n", "<?php\ninclude_once(\"./global.php\");\n\n$tpl = new Dwoo_Template_File( template(\"compare_hosts.tpl\") );\n$data = new Dwoo_Data();\n$data->assign(\"range\",$range);\n\n$size = isset($clustergraphsize) ? $clustergraphsize : 'default';\n//set to 'default' to preserve old behavior\n$size = $size == 'medium' ? 'default' : $size; \n\nretrieve_metrics_cache();\n\n$matches = array();\nif (array_key_exists('hreg', $_GET)) {\n  foreach ( $_GET['hreg'] as $key => $query ) {\n    if ($query != '') {\n      foreach ( $index_array['hosts'] as $key => $host_name ) {\n        if ( preg_match(\"/$query/i\", $host_name ) ) {\n          // We can have same hostname in multiple clusters\n          foreach ($index_array['cluster'][$host_name] AS $clustername) {\n            $matches[] = array (\"hostname\" => $host_name, \"clustername\" => $clustername);\n          }\n        }\n      }\n    }\n  }\n}\n\n#print \"<PRE>\";print_r($index_array['metrics']);\n\n$host_metrics = array();\n$host_cluster = array();\nforeach ( $matches as $index => $match ) {\n  $hostname = $match['hostname'];\n  $host_cluster[] = $match['hostname'] . \"|\" . $match['clustername'];\n  foreach ( $index_array['metrics'] as $metric_name => $hosts ) {\n    if ( array_search( $hostname , $hosts ) !== FALSE && \n         ! isset($host_metrics[$metric_name]) ) {\n      $host_metrics[$metric_name] = 1; \n    }\n  }\n}\n\n# Join the hosts in a list into a string which we pass to graphs\n$host_list = join(\",\", $host_cluster);\n\nksort($host_metrics);\n#print \"<PRE>\";print_r($host_metrics);\n\n$hmetrics = array();\nforeach ( $host_metrics as $name => $value )\n  $hmetrics[] = $name;\n\n\n$hreg = \"\";\nif (array_key_exists('hreg', $_GET)) {\n  foreach ( $_GET['hreg'] as $index => $arg ) {\n    $hreg .= \"&hreg[]=\" . $arg;\n  }\n}\n\nif ( isset($_GET['hreg']) ) {\n  $data->assign(\"hreg_arg\", $_GET['hreg'][0]);\n} else {\n  $data->assign(\"hreg_arg\", \"\");\n}\n\n$size = isset($clustergraphsize) ? $clustergraphsize : 'default';\n//set to 'default' to preserve old behavior\n$size = $size == 'medium' ? 'default' : $size; \n\n$additional_host_img_css_classes = \"\";\nif ( isset($conf['zoom_support']) && $conf['zoom_support'] === true )\n    $additional_host_img_css_classes = \"host_${size}_zoomable\";\n\n$data->assign(\"additional_host_img_css_classes\", $additional_host_img_css_classes);\n\n$graphargs = \"&r=\" . $range;\nif ($cs)\n   $graphargs .= \"&amp;cs=\" . rawurlencode($cs);\nif ($ce)\n   $graphargs .= \"&amp;ce=\" . rawurlencode($ce);\n\n$data->assign(\"hreg\", $hreg);\n$data->assign(\"graphargs\", $graphargs);\n$data->assign(\"host_list\", $host_list);\n$data->assign(\"host_metrics\", $hmetrics);\n$data->assign(\"number_of_metrics\", sizeof($hmetrics));\n\n$data->assign('GRAPH_BASE_ID', $GRAPH_BASE_ID);\n$data->assign('SHOW_EVENTS_BASE_ID', $SHOW_EVENTS_BASE_ID);\n\n$dwoo->output($tpl, $data);\n\n?>\n", "<?php\n\n$tpl = new Dwoo_Template_File( template(\"decompose_graph.tpl\") );\n$data = new Dwoo_Data();\n$data->assign(\"range\",$range);\n\n\nif ( !isset($_GET['hreg']) or !isset($_GET['mreg']) ) {\n    print '\n\t<div class=\"ui-widget\">\n\t\t\t  <div class=\"ui-state-error ui-corner-all\" style=\"padding: 0 .7em;\"> \n\t\t\t\t  <p><span class=\"ui-icon ui-icon-alert\" style=\"float: left; margin-right: .3em;\"></span> \n\t\t\t\t  <strong>Alert:</strong> Host Regex and Metric Regex arguments are missing.</p>\n\t\t\t  </div>\n\t</div>\n    ';\n\n    exit(1);\n}\n\n$graph_type = \"line\";\n$line_width = \"2\";\n$graph_config = build_aggregate_graph_config ($graph_type, $line_width, $_GET['hreg'], $_GET['mreg']);\n\nforeach ( $_GET['hreg'] as $index => $arg ) {\n  print \"<input type=hidden name=hreg[] value='\" . $arg . \"'>\";\n}\nforeach ( $_GET['mreg'] as $index => $arg ) {\n  print \"<input type=hidden name=mreg[] value='\" . $arg . \"'>\";\n}\n\n$size = isset($clustergraphsize) ? $clustergraphsize : 'default';\n$size = $size == 'medium' ? 'default' : $size; //set to 'default' to preserve old behavior\n\n$additional_host_img_css_classes = \"\";\nif ( isset($conf['zoom_support']) && $conf['zoom_support'] === true )\n    $additional_host_img_css_classes = \"host_${size}_zoomable\";\n\n$data->assign(\"additional_host_img_css_classes\", $additional_host_img_css_classes);\n\n$items = array();\n\n$graphargs = \"\";\nif ($cs)\n   $graphargs .= \"&amp;cs=\" . rawurlencode($cs);\nif ($ce)\n   $graphargs .= \"&amp;ce=\" . rawurlencode($ce);\n\nforeach ( $graph_config['series'] as $index => $item ) {\n   $args = \"h=\" . $item['hostname'] . \"&c=\" . $item['clustername'] . \"&m=\" . $item['metric'];\n   $items[] = array ( \"title\" => \"\",\n          \"url_args\" => $args . $graphargs . \"&r=\" . $range\n   );\n\n}\n\n#print \"<PRE>\"; print_r($items);\n\n$data->assign(\"items\", $items);\n$data->assign(\"number_of_items\", sizeof($items));\n$dwoo->output($tpl, $data);\n\n?>\n", "<html>\n<head>\n<title>Ganglia: Graph all periods</title>\n<link rel=\"stylesheet\" href=\"./styles.css\" type=\"text/css\" />\n<style type=\"text/css\">\n.img_view {\n  float: left;\n  margin: 0 0 10px 10px;\n}\n</style>\n<?php\nif ( ! isset($_REQUEST['embed'] ) && ! isset($_REQUEST['mobile']) ) {\n?>\n<script TYPE=\"text/javascript\" SRC=\"js/jquery-1.8.2.min.js\"></script>\n<script type=\"text/javascript\" src=\"js/jquery-ui-1.9.1.custom.min.js\"></script>\n<script type=\"text/javascript\" src=\"js/jquery.livesearch.min.js\"></script>\n<script type=\"text/javascript\" src=\"js/ganglia.js\"></script>\n<script type=\"text/javascript\" src=\"js/jquery.gangZoom.js\"></script>\n<script type=\"text/javascript\" src=\"js/jquery.cookie.js\"></script>\n<script type=\"text/javascript\" src=\"js/jquery-ui-timepicker-addon.js\"></script>\n<script type=\"text/javascript\" src=\"js/jquery.ba-bbq.min.js\"></script>\n<link type=\"text/css\" href=\"css/smoothness/jquery-ui-1.9.1.custom.min.css\" rel=\"stylesheet\" />\n<link rel=\"stylesheet\" href=\"css/jquery.multiselect.css\" type=\"text/css\" />\n<?php\n}\n?>\n\n<script type=\"text/javascript\">\n  function openDecompose($url) {\n    $.cookie(\"ganglia-selected-tab-\" + window.name, 0);\n    location.href=\"./index.php\" + $url + \"&amp;tab=m\";\n  }\n\n  $(function() {\n    initShowEvent();\n    initTimeShift();\n<?php if ( isset($_GET['embed'] ) ) { ?>\n    initMetricActionsDialog();\n<?php } ?>\n<?php if ( ! isset($_REQUEST['mobile'])) { ?>\n    $( \"#popup-dialog\" ).dialog({ autoOpen: false, minWidth: 850 });\n<?php } ?>\n  });\n</script>\n\n<?php\ninclude_once \"./eval_conf.php\";\ninclude_once \"./global.php\";\n\n// build a query string but drop r and z since those designate time window and size. Also if the \n// get arguments are an array rebuild them. For example with hreg (host regex)\n$ignore_keys_list = array(\"r\", \"z\", \"st\", \"cs\", \"ce\", \"hc\");\n\nforeach ($_GET as $key => $value) {\n  if ( ! in_array($key, $ignore_keys_list) && ! is_array($value))\n    $query_string_array[] = \"$key=\" . urlencode($value);\n\n  // $_GET argument is an array. Rebuild it to pass it on\n  if ( is_array($value) ) {\n    foreach ( $value as $index => $value2 )\n      $query_string_array[] = $key . \"[]=\" . urlencode($value2);\n\n  }\n}\n\n// If we are in the mobile mode set the proper graph sizes\nif ( isset($_GET['mobile'])) {\n  $largesize = \"mobile\";\n  $xlargesize = \"mobile\";\n} else {\n  $largesize = \"large\";\n  $xlargesize = \"xlarge\";  \n}\n\n// Join all the query_string arguments\n$query_string = \"&amp;\" . join(\"&amp;\", $query_string_array);\n\n// Descriptive host/aggregate graph\nif (isset($_GET['h']) && ($_GET['h'] != ''))\n  $description = $_GET['h'];\nelse if (isset($_GET['c']) && ($_GET['c'] != ''))\n  $description = $_GET['c'];\nelse if (is_array($_GET['hreg']))\n  $description = join(\",\", $_GET['hreg']);\nelse\n  $description = \"Unknown\";\n\nif (isset($_GET['g'])) \n  $metric_description = $_GET['g'];\nelse if ( isset($_GET['m'] ))\n  $metric_description = $_GET['m'];\nelse if (is_array($_GET['mreg']) )\n  $metric_description = join(\",\", $_GET['mreg']);\nelse\n  $metric_description = \"Unknown\";\n\n# Determine if it's aggregate graph\nif ( preg_match(\"/aggregate=1/\", $query_string) )\n  $is_aggregate = true;\nelse\n  $is_aggregate = false;\n\n\nif ( $conf['graph_engine'] == \"flot\" ) {\n?>\n<style type=\"text/css\">\n.flotgraph {\n  height: <?php print $conf['graph_sizes'][$largesize][\"height\"] ?>px;\n  width:  <?php print $conf['graph_sizes'][$largesize][\"width\"] ?>px;\n}\n</style>\n<?php\n// Add JQuery and flot loading only if this is not embedded in the Aggregate Graphs Tab\nif ( ! isset($_GET['embed'] ) ) {\n?>\n<!--[if lte IE 8]><script language=\"javascript\" type=\"text/javascript\" src=\"js/excanvas.min.js\"></script><![endif]-->\n<script language=\"javascript\" type=\"text/javascript\" src=\"js/jquery.flot.min.js\"></script>\n<?php\n} // end of if ( ! isset($_GET['embed'] )\n?>\n<script type=\"text/javascript\">\n  var default_time = 'hour';\n  var metric = \"<?php if (isset($_GET['g'])) echo $_GET['g']; else echo $_GET['m']; ?>\";\n  var base_url = \"<?php print 'graph.php?flot=1&amp;' . $_GET['m'] . $query_string ?>\" + \"&amp;r=\" + default_time;\n</script>\n<script type=\"text/javascript\" src=\"js/create-flot-graphs.js\"></script>\n<?php\n} // end of if ( $conf['graph_engine'] == \"flot\" ) {\n?>\n</head>\n\n<body onSubmit=\"return false;\">\n<?php\nif ( ! isset($_REQUEST['mobile']) ) {\n?>\n<div id=\"popup-dialog\" style=\"display: none\" title=\"Inspect Graph\">\n  <div id=\"popup-dialog-content\">\n  </div>\n</div>\n<?php\n}\n?>\n<div id=\"metric-actions-dialog\" style=\"display: none\" title=\"Metric Actions\">\n<div id=\"metric-actions-dialog-content\">\n\tAvailable Metric actions.\n</div>\n</div>\n<form>\n<?php\nif ( isset($_REQUEST['mobile'])) {\n?>\n    <div data-role=\"page\" class=\"ganglia-mobile\" id=\"view-home\">\n    <div data-role=\"header\">\n      <a href=\"#\" class=\"ui-btn-left\" data-icon=\"arrow-l\" onclick=\"history.back(); return false\">Back</a>\n      <h3><?php if (isset($_GET['g'])) echo $_GET['g']; else echo $_GET['m']; ?></h3>\n      <a href=\"#mobile-home\">Home</a>\n    </div>\n    <div data-role=\"content\">\n<?php\n}\n\n// Skip printing if this is an embedded graph e.g. from Aggregate graph screen\nif ( ! isset($_REQUEST['embed'] )  ) {\n?>\n  <div><b>Host/Cluster/Host Regex: </b><?php print $description ?>&nbsp;<b>Metric/Graph/Metric Regex: </b><?php print $metric_description;?>&nbsp;&nbsp;\n<?php\n}\n\nif ( ! isset($_REQUEST['mobile'] )  ) {\n   print '<input title=\"Hide/Show Events\" type=\"checkbox\" id=\"show_all_events\" onclick=\"showAllEvents(this.checked)\"/><label class=\"show_event_text\" for=\"show_all_events\">Hide/Show Events All Graphs</label>';\n   # Make sure it's not aggregate or composite graph\n  if ( ! $is_aggregate && ! isset($_GET['g']) )\n     print '<input title=\"Timeshift Overlay\" type=\"checkbox\" id=\"timeshift_overlay\" onclick=\"showTimeshiftOverlay(this.checked)\"/><label class=\"show_timeshift_text\" for=\"timeshift_overlay\">Timeshift Overlay</label><br />';\n  print \"</div>\";\n} // end of if ( ! isset($_REQUEST['mobile'] )  ) {\n\nif (isset($_GET['embed'])) {\n  print \"<div style='height:10px;'/>\";\n}\n\n\nforeach ( $conf['time_ranges'] as $key => $value ) {\n\n  # Skip job \n  if ( $value == \"job\" )\n    continue;\n\n  print '<div class=\"img_view\">';\n  \n  if ( ! isset($_REQUEST['mobile']) ) {\n\n  print '<span style=\"padding-left: 4em; padding-right: 4em; text-weight: bold;\">' . $key . '</span>';\n\n  // If this is for mobile hide some of the options\n  \n    // Check if it's an aggregate graph\n    if ( $is_aggregate  ) {\n      print '<button class=\"cupid-green\" title=\"Metric Actions - Add to View, etc\" onclick=\"metricActionsAggregateGraph(\\'' . $query_string . '\\'); return false;\">+</button>';\n    }\n  \n    print ' <button title=\"Export to CSV\" class=\"cupid-green\" onclick=\"window.location=\\'./graph.php?r=' . $key . $query_string . '&amp;csv=1\\';return false\">CSV</button> ';\n  \n    print ' <button title=\"Export to JSON\" class=\"cupid-green\" onclick=\"window.location=\\'./graph.php?r=' . $key . $query_string . '&amp;json=1\\';return false;\">JSON</button> ';\n  \n     // Check if it's an aggregate graph\n    if ( $is_aggregate  ) {\n\tprint ' <button title=\"Decompose aggregate graph\" class=\"shiny-blue\" onClick=\"openDecompose(\\'?r=' . $key . $query_string  . '&amp;dg=1\\');return false;\">Decompose</button>';\n    }\n   \n    print ' <button title=\"Inspect Graph\" onClick=\"inspectGraph(\\'r=' . $key . $query_string  . '\\'); return false;\" class=\"shiny-blue\">Inspect</button>';\n\n    $graphId = $GRAPH_BASE_ID . $key;\n\n    print ' <input title=\"Hide/Show Events\" type=\"checkbox\" id=\"' . $SHOW_EVENTS_BASE_ID . $key . '\" onclick=\"showEvents(\\'' . $graphId . '\\', this.checked)\"/><label class=\"show_event_text\" for=\"' . $SHOW_EVENTS_BASE_ID . $key . '\">Hide/Show Events</label>';\n    if ( ! $is_aggregate && ! isset($_GET['g']) )\n      print ' <input title=\"Timeshift Overlay\" type=\"checkbox\" id=\"' . $TIME_SHIFT_BASE_ID . $key . '\" onclick=\"showTimeShift(\\'' . $graphId . '\\', this.checked)\"/><label class=\"show_timeshift_text\" for=\"' . $TIME_SHIFT_BASE_ID . $key . '\">Timeshift</label>';\n\n  } \n\n  print  '<br />';\n\n  // If we are using flot we need to use a div instead of an image reference\n  if ( $conf['graph_engine'] == \"flot\" ) {\n\n    print '<div id=\"placeholder_' . $key . '\" class=\"flotgraph img_view\"></div>';\n    print '<div id=\"placeholder_' . $key . '_legend\" class=\"flotlegend\"></div>';\n\n  } else {\n\n    print '<a href=\"./graph.php?r=' . $key . '&amp;z=' . $xlargesize . $query_string . '\"><img class=\"noborder\" id=\"' . $graphId . '\" style=\"margin-top:5px;\" title=\"Last ' . $key . '\" src=\"graph.php?r=' . $key . '&amp;z=' . $largesize . $query_string . '\"></a>';\n\n  }\n\n  print \"</div>\";\n\n}\n// The div below needs to be added to clear float left since in aggregate view things\n// will start looking goofy\n?>\n<div style=\"clear: left\"></div>\n</form>\n</body>\n</html>\n", "<?php\nsession_start();\n\nif (isset($_GET['date_only'])) {\n  $d = date(\"r\");\n  echo $d;\n  exit(0);\n}\n\nfunction make_size_menu($clustergraphsize, $context) {\n  global $conf;\n\n  $size_menu = '<SELECT NAME=\"z\" OnChange=\"ganglia_form.submit();\">';\n      \n  $size_arr = $conf['graph_sizes_keys'];\n  foreach ($size_arr as $size) {\n    if ($size == \"default\")\n      continue;\n    $size_menu .= \"<OPTION VALUE=\\\"$size\\\"\";\n    if ((isset($clustergraphsize) && ($size === $clustergraphsize)) || \n\t(!isset($clustergraphsize) && ($size === 'small')) || \n\t(!isset($_GET['z']) && ($context == 'host') && ($size == \"medium\"))) {\n      $size_menu .= \" SELECTED\";\n    }\n    $size_menu .= \">$size</OPTION>\\n\";\n  }\n  $size_menu .= \"</SELECT>\\n\";\n  return $size_menu;\n}\n\nfunction make_cols_menu() {\n  global $conf;\n\n  $cols_menu = \"<SELECT NAME=\\\"hc\\\" OnChange=\\\"ganglia_form.submit();\\\">\\n\";\n\n  foreach(range(0,25) as $cols) {\n    $cols_menu .= \"<OPTION VALUE=$cols \";\n    if ($cols == $conf['hostcols'])\n      $cols_menu .= \"SELECTED\";\n    $cols_menu .= \">$cols\\n\";\n  }\n  $cols_menu .= \"</SELECT>\\n\";\n  return $cols_menu;\n}\n\nfunction make_metric_cols_menu() {\n  global $conf;\n\n  $metric_cols_menu = \"<select name=\\\"mc\\\" OnChange=\\\"ganglia_form.submit();\\\">\\n\";\n\n  foreach(range(1,25) as $metric_cols) {\n    $metric_cols_menu .= \"<option value=$metric_cols \";\n    if ($metric_cols == $conf['metriccols'])\n      $metric_cols_menu .= \"selected\";\n    $metric_cols_menu .= \">$metric_cols\\n\";\n  }\n  $metric_cols_menu .= \"</select>\\n\";\n  return $metric_cols_menu;\n}\n\nfunction make_sort_menu($context, $sort) {\n  $sort_menu = \"\";\n  if ($context == \"meta\" or $context == \"cluster\") {\n    $context_sorts[] = \"ascending\";\n    $context_sorts[] = \"descending\";\n    $context_sorts[] = \"by name\";\n\n    // Show sort order options for meta context only:\n\n    if ($context == \"meta\" ) {\n      $context_sorts[] = \"by hosts up\";\n      $context_sorts[] = \"by hosts down\";\n    }\n\n    $sort_menu = \"Sorted&nbsp;&nbsp;\";\n    foreach ($context_sorts as $v) {\n      $url = rawurlencode($v);\n      if ($v == $sort)\n\t$checked = \"checked=\\\"checked\\\"\";\n      else\n\t$checked = \"\";\n      $sort_menu .= \"<input OnChange=\\\"ganglia_submit();\\\" type=\\\"radio\\\" id=\\\"radio-\" .str_replace(\" \", \"_\", $v) . \"\\\" name=\\\"s\\\" value=\\\"$v\\\" $checked/><label for=\\\"radio-\" . str_replace(\" \", \"_\", $v) . \"\\\">$v</label>\";\n    }\n  }\n  return $sort_menu;\n}\n\nfunction make_range_menu($physical, $jobrange, $cs, $ce, $range) {\n  global $conf;\n\n  $range_menu = \"\";\n  if (!$physical) {\n    $context_ranges = array_keys($conf['time_ranges']);\n    if ($jobrange)\n      $context_ranges[] = \"job\";\n    if ($cs or $ce)\n      $context_ranges[] = \"custom\";\n\n    $range_menu = \"Last&nbsp;&nbsp;\";\n    foreach ($context_ranges as $v) {\n      $url = rawurlencode($v);\n      if ($v == $range)\n\t$checked = \"checked=\\\"checked\\\"\";\n      else\n\t$checked = \"\";\n      $range_menu .= \"<input OnChange=\\\"ganglia_form.submit();\\\" type=\\\"radio\\\" id=\\\"range-$v\\\" name=\\\"r\\\" value=\\\"$v\\\" $checked/><label for=\\\"range-$v\\\">$v</label>\";\n    }\n  }\n  return $range_menu;\n}\n\nfunction make_alt_view($context, $clustername, $hostname, $get_metric_string) {\n  global $conf;\n\n  $cluster_url = rawurlencode($clustername);\n  $node_url = rawurlencode($hostname);\n\n  $alt_view = \"\";\n\n  if ($context == \"cluster\") {\n    $alt_view = \"<button class=\\\"header_btn\\\" onclick=\\\"window.location='./?p=2&amp;c=$cluster_url';return false;\\\">Physical View</button>\";\n  } elseif ($context == \"physical\") {\n    $alt_view = \"<button class=\\\"header_btn\\\" onclick=\\\"window.location='./?c=$cluster_url';return false;\\\">Full View</button>\";\n  } elseif ($context==\"node\") {\n    $alt_view = \"<button class=\\\"header_btn\\\" onclick=\\\"window.location='./?c=$cluster_url&amp;h=$node_url&amp;$get_metric_string';return false;\\\">Host View</button>\";\n  } elseif ($context==\"host\") {\n    $alt_view = \"<button class=\\\"header_btn\\\" onclick=\\\"window.location='./?p=2&amp;c=$cluster_url&amp;h=$node_url';return false;\\\">Node View</button>\";\n  } elseif ($context == \"views\") {\n    if (checkAccess(GangliaAcl::ALL_VIEWS, GangliaAcl::EDIT, $conf)) {\n      $alt_view = '<button onclick=\"return false\" id=\"create_view_button\">Create View</button>';\n      $alt_view .= '&nbsp;&nbsp;<button onclick=\"return false\" id=\"delete_view_button\">Delete View</button>';\n    }\n  }\n  return $alt_view;\n}\n\nfunction make_node_menu($self,\n\t\t\t$context,\n\t\t\t$grid,\n\t\t\t$parentgrid,\n\t\t\t$parentlink,\n\t\t\t$gridstack_url,\n\t\t\t$clustername,\n\t\t\t$hostname,\n\t\t\t$get_metric_string,\n\t\t\t$showhosts,\n\t\t\t$hosts_up,\n\t\t\t$hosts_down) {\n  global $conf;\n\n  $node_menu = \"\";\n\n  if ($parentgrid) {\n    $node_menu .= \"<b><a href=\\\"$parentlink?gw=back&amp;gs=$gridstack_url&amp;$get_metric_string\\\">\" . \"$parentgrid ${conf['meta_designator']}</a></b> \";\n    $node_menu .= \"<b>&gt;</b>\\n\";\n  }\n\n  # Show grid.\n  if ((($self != \"unspecified\") && !$parentgrid) ||\n      $conf['always_display_grid_view']) {\n    $mygrid = ($self == \"unspecified\") ? \"\" : $self;\n    $node_menu .= \"<b><a href=\\\"./?$get_metric_string\\\">$mygrid ${conf['meta_designator']}</a></b> \";\n    $node_menu .= \"<b>&gt;</b>\\n\";\n  }\n\n  /////////////////////////////////////////////////////////////////////////////\n  // Cluster name has been specified. It comes right after\n  // Grid >\n  /////////////////////////////////////////////////////////////////////////////\n  if ($clustername) {\n    $url = rawurlencode($clustername);\n    $node_menu .= \"<b><a href=\\\"./?c=$url&amp;$get_metric_string\\\">$clustername</a></b> \";\n    $node_menu .= \"<b>&gt;</b>\\n\";\n    $node_menu .= hiddenvar(\"c\", $clustername);\n  } else if ($context == \"decompose_graph\") {\n    $node_menu .= '<input type=\"hidden\" name=\"dg\" value=\"1\">';\n    $node_menu .= \"Decompose Graph\";\n  } else {\n    # No cluster has been specified, so drop in a list\n    $node_menu .= \"<select name=\\\"c\\\" OnChange=\\\"ganglia_form.submit();\\\">\\n\";\n    $node_menu .= \"<option value=\\\"\\\">--Choose a Source\\n\";\n    ksort($grid);\n    foreach ($grid as $k => $v) {\n      if ($k == $self) continue;\n      if (isset($v['GRID']) and $v['GRID']) {\n        $url = $v['AUTHORITY'];\n        $node_menu .=\"<option value=\\\"$url\\\">$k ${conf['meta_designator']}\\n\";\n      } else {\n        $url = rawurlencode($k);\n        $node_menu .=\"<option value=\\\"$url\\\">$k\\n\";\n      }\n    }\n    $node_menu .= \"</select>\\n\";\n  }\n\n  /////////////////////////////////////////////////////////////////////////////\n  // We are in the cluster view pop up a list box of nodes\n  /////////////////////////////////////////////////////////////////////////////\n  if ($clustername && !$hostname) {\n    # Drop in a host list if we have hosts\n    if (!$showhosts) {\n      $node_menu .= \"[Summary Only]\";\n    } elseif (is_array($hosts_up) || is_array($hosts_down)) {\n      $node_menu .= \"<select name=\\\"h\\\" OnChange=\\\"ganglia_form.submit();\\\">\";\n      $node_menu .= \"<option value=\\\"\\\">--Choose a Node</option>\";\n\n      if (is_array($hosts_up)) {\n        uksort($hosts_up, \"strnatcmp\");\n        foreach ($hosts_up as $k=> $v) {\n          $url = rawurlencode($k);\n          $node_menu .= \"<option value=\\\"$url\\\">$k\\n\";\n        }\n      }\n\n      if (is_array($hosts_down)) {\n        uksort($hosts_down, \"strnatcmp\");\n        foreach ($hosts_down as $k=> $v) {\n          $url = rawurlencode($k);\n          $node_menu .= \"<option value=\\\"$url\\\">$k\\n\";\n        }\n      }\n      $node_menu .= \"</select>\\n\";\n    } else {\n      $node_menu .= \"<b>No Hosts</b>\\n\";\n    }\n  } else {\n    $node_menu .= \"<b>$hostname</b>\\n\";\n    $node_menu .= hiddenvar(\"h\", $hostname);\n  }\n  return $node_menu;\n}\n\n# RFM - These definitions are here to eliminate \"undefined variable\"\n# error messages in ssl_error_log.\n!isset($initgrid) and $initgrid = 0;\n!isset($metricname) and $metricname = \"\";\n!isset($context_metrics) and $context_metrics = \"\";\n\nif ($context == \"control\" && $controlroom < 0)\n  $header = \"header-nobanner\";\nelse\n  $header = \"header\";\n\n#\n# sacerdoti: beginning of Grid tree state handling\n#\n$me = $self . \"@\";\narray_key_exists($self, $grid) and $me = $me . $grid[$self]['AUTHORITY'];\nif ($initgrid)\n   {\n      $gridstack = array();\n      $gridstack[] = $me;\n   }\nelse if ($gridwalk==\"fwd\")\n   {\n      # push our info on gridstack, format is \"name@url>name2@url\".\n      if (end($gridstack) != $me)\n         {\n            $gridstack[] = $me;\n         }\n   }\nelse if ($gridwalk==\"back\")\n   {\n      # pop a single grid off stack.\n      if (end($gridstack) != $me)\n         {\n            array_pop($gridstack);\n         }\n   }\n$gridstack_str = join(\">\", $gridstack);\n$gridstack_url = rawurlencode($gridstack_str);\n\nif (strstr($clustername, \"http://\")) {\n   header(\"Location: $clustername?gw=fwd&amp;gs=$gridstack_url\");\n}\n\nif ($initgrid or $gridwalk)\n   {\n      # Use cookie so we dont have to pass gridstack around within this site.\n      # Cookie values are automatically urlencoded. Expires in a day.\n      if ( !isset($_COOKIE[\"gs\"]) or $_COOKIE[\"gs\"] != $gridstack_str )\n            setcookie(\"gs\", $gridstack_str, time() + 86400);\n   }\n\n# Invariant: back pointer is second-to-last element of gridstack. Grid stack\n# never has duplicate entries.\n# RFM - The original line caused an error when count($gridstack) = 1. This\n# should fix that.\n$parentgrid = $parentlink = NULL;\nif(count($gridstack) > 1) {\n  list($parentgrid, $parentlink) = explode(\"@\", $gridstack[count($gridstack)-2]);\n}\n\n$tpl = new Dwoo_Template_File( template(\"$header.tpl\") );\n$data = new Dwoo_Data();\n\n// Server offset used in generating pretty dates and times when zooming\n$data->assign(\"server_utc_offset\", date('Z'));\n//\n$data->assign(\"page_title\", $title);\n$data->assign(\"refresh\", $conf['default_refresh']);\n\n# Templated Logo image\n$data->assign(\"images\",\"./templates/${conf['template_name']}/images\");\n\n$data->assign( \"date\", date(\"r\"));\n\n# The page to go to when \"Get Fresh Data\" is pressed.\nif (isset($page))\n  $data->assign(\"page\", $page);\nelse\n  $data->assign(\"page\",\"./\");\n\n#\n# Used when making graphs via graph.php. Included in most URLs\n#\n$sort_url = rawurlencode($sort);\n\n$get_metric_string = \"m=$metricname&amp;r=$range&amp;s=$sort_url&amp;hc=${conf['hostcols']}&amp;mc=${conf['metriccols']}\";\nif ($jobrange and $jobstart)\n    $get_metric_string .= \"&amp;jr=$jobrange&amp;js=$jobstart\";\nif ($cs)\n    $get_metric_string .= \"&amp;cs=\" . rawurlencode($cs);\nif ($ce)\n    $get_metric_string .= \"&amp;ce=\" . rawurlencode($ce);\n\n$start_timestamp = null;\n$end_timestamp = null;\nif ($cs) {\n    if (! is_numeric($cs)) {\n        $start_timestamp = strtotime($cs);\n    } else {\n        $start_timestamp = $cs;\n    }\n\n    if ($ce) {\n        if (! is_numeric($ce)) {\n            $end_timestamp = strtotime($ce);\n        } else {\n            $end_timestamp = $ce;\n        }\n    } else {\n        $end_timestamp = $start_timestamp - $conf['time_ranges'][$range];\n    }\n} else {\n    $end_timestamp = time();\n    $start_timestamp = $end_timestamp - $conf['time_ranges'][$range];\n}\n\n$data->assign(\"start_timestamp\", $start_timestamp);\n$data->assign(\"end_timestamp\", $end_timestamp);\n\n# Make some information available to templates.\n$data->assign(\"cluster_url\", $cluster_url);\n\n$alt_view = make_alt_view($context, \n\t\t\t  $clustername, \n\t\t\t  $hostname, \n\t\t\t  $get_metric_string);\n$data->assign(\"alt_view\", $alt_view);\n\n# Build the node_menu\n$node_menu = \"\";\nif (($context != 'views') && ($context != 'compare_hosts')) {\n  $node_menu = make_node_menu($self,\n\t\t\t      $context,\n\t\t\t      $grid,\n\t\t\t      $parentgrid,\n\t\t\t      $parentlink,\n\t\t\t      $gridstack_url,\n\t\t\t      $clustername,\n\t\t\t      $hostname,\n\t\t\t      $get_metric_string,\n\t\t\t      $showhosts,\n\t\t\t      $hosts_up,\n\t\t\t      $hosts_down);\n  # Save other CGI variables\n  if ($physical)\n    $node_menu .= hiddenvar(\"p\", $physical);\n  $node_menu .= hiddenvar(\"cr\", $controlroom);\n  $node_menu .= hiddenvar(\"js\", $jobstart);\n  $node_menu .= hiddenvar(\"jr\", $jobrange);\n}\n$data->assign(\"node_menu\", $node_menu);\n\n//////////////////// Build the metric menu ////////////////////////////////////\n\nif (count($metrics)) {\n  foreach ($metrics as $firsthost => $bar) {\n      foreach ($metrics[$firsthost] as $m => $foo)\n        $context_metrics[$m] = $m;\n  }\n  foreach ($reports as $r => $foo)\n    $context_metrics[] = $r;\n}\n\n#\n# If there are graphs present, show ranges.\n#\n$range_menu = make_range_menu($physical, $jobrange, $cs, $ce, $range);\n$data->assign(\"range_menu\", $range_menu);\n\n#\n# Only compute metric-picker options if we have some, and are in cluster context.\n#\nif (is_array($context_metrics) and $context == \"cluster\") {\n  $picker_metrics = array();\n\n  # Find all the optional reports\n  if ($handle = opendir($conf['gweb_root'] . '/graph.d')) {\n\n    // If we are using RRDtool reports can be json or PHP suffixes\n    if ( $conf['graph_engine'] == \"rrdtool\" )\n      $report_suffix = \"php|json\";\n    else\n      $report_suffix = \"json\";\n\n    while (false !== ($file = readdir($handle))) {\n      if ( preg_match(\"/(.*)(_report)\\.(\" . $report_suffix .\")/\", $file, $out) ) {\n        if ( ! in_array($out[1] . \"_report\", $context_metrics) )\n          $context_metrics[] = $out[1] . \"_report\";\n      }\n    }\n\n    closedir($handle);\n  }\n\n  sort($context_metrics);\n\n  foreach ($context_metrics as $key) {\n    $url = rawurlencode($key);\n    $picker_metrics[] = \"<option value=\\\"$url\\\">$key</option>\";\n  }\n\n  $data->assign(\"picker_metrics\", join(\"\", $picker_metrics));\n  $data->assign(\"is_metrics_picker_disabled\", \"\");  \n} else {\n  // We have to disable the sort_menu if we are not in the cluster context\n  $data->assign(\"is_metrics_picker_disabled\", '$(\"#sort_menu\").toggle(); ');\n  $data->assign(\"picker_metrics\", \"\" );\n}\n\n#\n# Show sort order if there is more than one physical machine present.\n#\n$sort_menu = make_sort_menu($context, $sort);\n$data->assign(\"sort_menu\", $sort_menu );\n   \nif ($context == \"physical\" or $context == \"cluster\" or $context == 'host') {\n  $cols_menu = make_cols_menu();\n  $size_menu = make_size_menu($clustergraphsize, $context);\n}\n\nif ($context == \"host\") {\n  $metric_cols_menu = make_metric_cols_menu();\n}\n\n$custom_time = \"\";\n\nif ( in_array($context , array (\"meta\", \"cluster\", \"host\", \"views\", \"decompose_graph\", \"compare_hosts\") ) ) {\n   $examples = \"Feb 27 2007 00:00, 2/27/2007, 27.2.2007, now -1 week,\"\n      . \" -2 days, start + 1 hour, etc.\";\n   $custom_time = \"or <span class=\\\"nobr\\\">from <input type=\\\"TEXT\\\" title=\\\"$examples\\\" NAME=\\\"cs\\\" ID=\\\"datepicker-cs\\\" SIZE=\\\"17\\\"\";\n   if ($cs)\n      $custom_time .= \" value=\\\"$cs\\\"\";\n   $custom_time .= \"> to <input type=\\\"TEXT\\\" title=\\\"$examples\\\" name=\\\"ce\\\" ID=\\\"datepicker-ce\\\" SIZE=\\\"17\\\"\";\n   if ($ce)\n      $custom_time .= \" value=\\\"$ce\\\"\";\n   $custom_time .= \"> <input type=\\\"submit\\\" value=\\\"Go\\\">\\n\";\n   $custom_time .= \"<input type=\\\"button\\\" value=\\\"Clear\\\" onclick=\\\"ganglia_submit(1)\\\"></span>\\n\";\n#      $custom_time .= $calendar;\n   $data->assign(\"custom_time\", $custom_time);\n\n#      $tpl->assign(\"custom_time_head\", $calendar_head);\n   $data->assign(\"custom_time_head\", \"\");\n} else {\n   $data->assign(\"custom_time_head\", \"\");\n}\n \n$data->assign(\"custom_time\", $custom_time);\n\n/////////////////////////////////////////////////////////////////////////\n// Additional filter to add after the list of nodes. Only useful in\n// cluster_view\n/////////////////////////////////////////////////////////////////////////\nif ( $context == \"cluster\" ) {\n  if ( isset($user['host_regex']) && $user['host_regex'] != \"\" )\n    $set_host_regex_value=\"value='\" . $user['host_regex'] . \"'\";\n  else\n    $set_host_regex_value=\"\";\n\n  // In some clusters you may have thousands of hosts which may load\n  // for a long time. For those cases we have the ability to display\n  // only the max amount of graphs and put place holders for the rest ie.\n  // it will say only print host name without an image\n  $max_graphs_options = array(1000,500,200,100,50,25,20,15,10);\n\n  if ( isset($user['max_graphs']) && is_numeric($user['max_graphs']) )\n    $max_graphs = $user['max_graphs'];\n  else\n    $max_graphs = $conf['max_graphs'];\n  \n  $max_graphs_values = \"<option value=0>all</option>\";\n  foreach ( $max_graphs_options as $key => $value ) {\n      if ( $max_graphs == $value )\n$max_graphs_values .= \"<option selected>\" . $value . \"</option>\";\n      else\n$max_graphs_values .= \"<option>\" . $value . \"</option>\";\n\n  }\n\n  $data->assign(\"additional_filter_options\", 'Show only nodes matching <input name=host_regex ' .$set_host_regex_value . '>'\n   . '<input class=\"header_btn\" type=\"SUBMIT\" VALUE=\"Filter\">'\n   . '&nbsp;<span class=\"nobr\">Max graphs to show <select onChange=\"ganglia_submit();\" name=\"max_graphs\">' . $max_graphs_values . '</select></span>'\n    );\n} else\n  $data->assign(\"additional_filter_options\", '');\n\nif($conf['auth_system'] == 'enabled') {\n  $data->assign('auth_system_enabled', true);\n  $username = sanitize( GangliaAuth::getInstance()->getUser() );\n  $data->assign('username', $username);\n} else {\n  $data->assign('auth_system_enabled', false);\n  $data->assign('username', null);\n}\n\n\nif ( $conf['overlay_events'] == true )\n  $data->assign('overlay_events', true);\n\n$data->assign('selected_tab', $user['selected_tab']);\n$data->assign('view_name', $user['viewname']);\n\n$additional_buttons = \"\";\nif ($context == 'views' || $context == 'decompose_graph' || $context == 'host') {\n  $additional_buttons = '<input title=\"Hide/Show Events\" type=\"checkbox\" id=\"show_all_events\" onclick=\"showAllEvents(this.checked)\"/><label for=\"show_all_events\">Hide/Show Events</label>';\n}\n$data->assign('additional_buttons', $additional_buttons);\n\n# Make sure that no data is cached..\nheader (\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\"); # Date in the past\nheader (\"Last-Modified: \" . gmdate(\"D, d M Y H:i:s\") . \" GMT\"); # always modified\nheader (\"Cache-Control: no-cache, must-revalidate\"); # HTTP/1.1\nheader (\"Pragma: no-cache\"); # HTTP/1.0\n\nif (file_exists(\"./templates/${conf['template_name']}/user_header.tpl\"))\n  $data->assign('user_header', \"1\");\n\n$dwoo->output($tpl, $data);\n\n?>\n", "<?php\ninclude_once \"./eval_conf.php\";\ninclude_once(\"./functions.php\");\ninclude_once \"./get_context.php\";\ninclude_once \"./ganglia.php\";\ninclude_once \"./get_ganglia.php\";\n?>\n<?php\n///////////////////////////////////////////////////////////////////////////////\n// Generating mobile view\n///////////////////////////////////////////////////////////////////////////////\nif ( isset($_GET['view_name'])) {\n?>  \n  <div data-role=\"page\" class=\"ganglia-mobile\" id=\"view-home\">\n    <div data-role=\"header\">\n      <a href=\"#\" class=\"ui-btn-left\" data-icon=\"arrow-l\" onclick=\"history.back(); return false\">Back</a>\n      <h1>View <?php print $_GET['view_name']; ?></h1>\n      <a href=\"#mobile-home\">Home</a>\n      <div data-role=\"navbar\">\n\t<ul>\n  <?php\n\n  $view_name = $_GET['view_name'];\n  $available_views = get_available_views();\n  \n  // Header bar support up to 5 items. 5+ items will be shown in multiple\n  // rows. Thus we'll limit to first 5 time ranges\n  $my_ranges = array_keys( $conf['time_ranges'] );     \n  for ( $i = 0 ; $i < 5 ; $i++ ) {\n     $context_ranges[] = $my_ranges[$i]; \n  }\n\n  $range_menu = \"\";\n  $range = $_GET['r'];\n\n  foreach ($context_ranges as $v) {\n     $url=rawurlencode($v);\n     if ($v == $range) {\n      $checked = \"class=\\\"ui-btn-active\\\"\";\n      $range_menu .= \"<li><a $checked href='#' onclick='return false;'>$v</a></li>\";\n    } else {\n      $range_menu .= \"<li><a href='mobile_helper.php?view_name=\" . $_GET['view_name'] . \"&r=\" . $v . \"&cs=&ce='>$v</a></li>\";\n    }\n\n  }\n    print $range_menu;\n  ?>\n\t  </ul>\n      </div><!-- /navbar -->\n    </div><!-- /header -->\n  \n    <div data-role=\"content\">\t\n  <?php\n\n    // Let's find the view definition\n    foreach ( $available_views as $view_id => $view ) {\n  \n     if ( $view['view_name'] == $view_name ) {\n  \n      $view_elements = get_view_graph_elements($view);\n\n      $range_args = \"\";\n      if ( isset($_GET['r']) && $_GET['r'] != \"\" ) \n\t    $range_args .= \"&r=\" . $_GET['r'];\n      if ( isset($_GET['cs']) && isset($_GET['ce']) ) \n\t    $range_args .= \"&cs=\" . $_GET['cs'] . \"&ce=\" . $_GET['ce'];\n\n      if ( count($view_elements) != 0 ) {\n\tforeach ( $view_elements as $id => $element ) {\n\t  print \"\n\t  <A HREF=\\\"./graph_all_periods.php?mobile=1&\" . $element['graph_args'] .\"&z=mobile\\\">\n\t  <IMG ALT=\\\"\" . $element['hostname'] . \" - \" . $element['name'] . \"\\\" BORDER=0 SRC=\\\"./graph.php?\" . $element['graph_args'] . \"&z=mobile\" . $range_args .  \"\\\"></A>\";\n\t}\n      } else {\n\tprint \"No graphs defined for this view. Please add some\";\n      }\n\t\n\t\n  \n     }  // end of if ( $view['view_name'] == $view_name\n    } // end of foreach ( $views as $view_id \n\n  \n    print \"</div><!-- /content -->\n    </div> <!-- /page -->\";\n} // end of if ( isset($_GET['view_name']))\n///////////////////////////////////////////////////////////////////////////////\n// Generate cluster summary view\n///////////////////////////////////////////////////////////////////////////////\nif ( isset($_GET['show_cluster_metrics'])) {\n  $clustername = $_GET['c'];\n?>  \n  <div data-role=\"page\" class=\"ganglia-mobile\" id=\"viewhost-<?php print $hostname; ?>\">\n    <div data-role=\"header\" data-position=\"fixed\">\n      <a href=\"#\" class=\"ui-btn-left\" data-icon=\"arrow-l\" onclick=\"history.back(); return false\">Back</a>\n      <h3>Cluster <?php print $clustername; ?></h3>\n      <a href=\"#mobile-home\">Home</a>\n        <div data-role=\"navbar\">\n\t<ul>\n  <?php\n\t// Header bar support up to 5 items. 5+ items will be shown in multiple\n\t// rows. Thus we'll limit to first 5 time ranges\n\t$my_ranges = array_keys( $conf['time_ranges'] );     \n\tfor ( $i = 0 ; $i < 5 ; $i++ ) {\n\t   $context_ranges[] = $my_ranges[$i]; \n\t}\n      \n\t$range_menu = \"\";\n\t$range = $_GET['r'];\n      \n\tforeach ($context_ranges as $v) {\n\t   $url=rawurlencode($v);\n\t   if ($v == $range) {\n\t     $checked = \"class=\\\"ui-btn-active\\\"\";\n      \t     $range_menu .= \"<li><a $checked href='#'>$v</a></li>\";\n\t  } else {\n      \t     $range_menu .= \"<li><a href='mobile_helper.php?show_cluster_metrics=1&c=\" . $clustername . \"&r=\" . $v . \"&cs=&ce='>$v</a></li>\";\n\t  }\n\t}\n\t  print $range_menu;\n    ?>\n\t</ul>\n      </div><!-- /navbar -->\n    </div><!-- /header -->\n  \n    <div data-role=\"content\">\n<?php\n    $graph_args = \"c=$clustername&r=$range\";\n    \n    ///////////////////////////////////////////////////////////////////////////\n    // Let's find out what optional reports are included\n    // First we find out what the default (site-wide) reports are then look\n    // for host specific included or excluded reports\n    ///////////////////////////////////////////////////////////////////////////\n    $default_reports = array(\"included_reports\" => array(), \"excluded_reports\" => array());\n    if ( is_file($conf['conf_dir'] . \"/default.json\") ) {\n      $default_reports = array_merge($default_reports,json_decode(file_get_contents($conf['conf_dir'] . \"/default.json\"), TRUE));\n    }\n    \n    $cluster_file = $conf['conf_dir'] . \"/cluster_\" . $clustername . \".json\";\n    $override_reports = array(\"included_reports\" => array(), \"excluded_reports\" => array());\n    if ( is_file($cluster_file) ) {\n      $override_reports = array_merge($override_reports, json_decode(file_get_contents($cluster_file), TRUE));\n    }\n    \n    # Merge arrays\n    $reports[\"included_reports\"] = array_merge( $default_reports[\"included_reports\"] , $override_reports[\"included_reports\"]);\n    $reports[\"excluded_reports\"] = array_merge($default_reports[\"excluded_reports\"] , $override_reports[\"excluded_reports\"]);\n    \n    # Remove duplicates\n    $reports[\"included_reports\"] = array_unique($reports[\"included_reports\"]);\n    $reports[\"excluded_reports\"] = array_unique($reports[\"excluded_reports\"]);\n    \n    foreach ( $reports[\"included_reports\"] as $index => $report_name ) {\n      if ( ! in_array( $report_name, $reports[\"excluded_reports\"] ) ) {\n\tprint \"<a name=metric_\" . $report_name . \">\n\t<A HREF=\\\"./graph_all_periods.php?mobile=1&$graph_args&amp;g=\" . $report_name . \"&amp;z=mobile&amp;c=$clustername\\\">\n\t<IMG BORDER=0 ALT=\\\"$clustername\\\" SRC=\\\"./graph.php?$graph_args&amp;g=\" . $report_name .\"&amp;z=mobile&amp;c=$clustername\\\"></A>\n\t\";\n      }\n\n    }\n\n?>\n      </div><!-- /content -->\n    </div> <!-- /page -->\";\n<?php\n}\n///////////////////////////////////////////////////////////////////////////////\n// Generate host view\n///////////////////////////////////////////////////////////////////////////////\nif ( isset($_GET['show_host_metrics'])) {\n  $hostname = $_GET['h'];\n  $clustername = $_GET['c'];\n?>\n  <div data-role=\"page\" class=\"ganglia-mobile\" id=\"viewhost-<?php print $hostname; ?>\">\n    <div data-role=\"header\" data-position=\"fixed\">\n      <a href=\"#\" class=\"ui-btn-left\" data-icon=\"arrow-l\" onclick=\"history.back(); return false\">Back</a>\n      <h3>Host <?php print $hostname; ?></h3>\n      <a href=\"#mobile-home\">Home</a>\n        <div data-role=\"navbar\">\n\t<ul>\n  <?php\n\t// Header bar support up to 5 items. 5+ items will be shown in multiple\n\t// rows. Thus we'll limit to first 5 time ranges\n\t$my_ranges = array_keys( $conf['time_ranges'] );     \n\tfor ( $i = 0 ; $i < 5 ; $i++ ) {\n\t   $context_ranges[] = $my_ranges[$i]; \n\t}\n      \n\t$range_menu = \"\";\n\t$range = $_GET['r'];\n      \n\tforeach ($context_ranges as $v) {\n\t   $url=rawurlencode($v);\n\t   if ($v == $range) {\n\t     $checked = \"class=\\\"ui-btn-active\\\"\";\n      \t     $range_menu .= \"<li><a $checked href='#'>$v</a></li>\";\n\t  } else {\n      \t     $range_menu .= \"<li><a href='mobile_helper.php?show_host_metrics=1&h=\" . $hostname . \"&c=\" . $clustername . \"&r=\" . $v . \"&cs=&ce='>$v</a></li>\";\n\t  }\n\t}\n\t  print $range_menu;\n    ?>\n\t</ul>\n      </div><!-- /navbar -->\n    </div><!-- /header -->\n  \n    <div data-role=\"content\">\n<?php\n    $graph_args = \"h=$hostname&c=$clustername&r=$range\";\n    \n    ///////////////////////////////////////////////////////////////////////////\n    // Let's find out what optional reports are included\n    // First we find out what the default (site-wide) reports are then look\n    // for host specific included or excluded reports\n    ///////////////////////////////////////////////////////////////////////////\n    $default_reports = array(\"included_reports\" => array(), \"excluded_reports\" => array());\n    if ( is_file($conf['conf_dir'] . \"/default.json\") ) {\n      $default_reports = array_merge($default_reports,json_decode(file_get_contents($conf['conf_dir'] . \"/default.json\"), TRUE));\n    }\n    \n    $host_file = $conf['conf_dir'] . \"/host_\" . $hostname . \".json\";\n    $override_reports = array(\"included_reports\" => array(), \"excluded_reports\" => array());\n    if ( is_file($host_file) ) {\n      $override_reports = array_merge($override_reports, json_decode(file_get_contents($host_file), TRUE));\n    }\n    \n    # Merge arrays\n    $reports[\"included_reports\"] = array_merge( $default_reports[\"included_reports\"] , $override_reports[\"included_reports\"]);\n    $reports[\"excluded_reports\"] = array_merge($default_reports[\"excluded_reports\"] , $override_reports[\"excluded_reports\"]);\n    \n    # Remove duplicates\n    $reports[\"included_reports\"] = array_unique($reports[\"included_reports\"]);\n    $reports[\"excluded_reports\"] = array_unique($reports[\"excluded_reports\"]);\n    \n    foreach ( $reports[\"included_reports\"] as $index => $report_name ) {\n    \n      if ( ! in_array( $report_name, $reports[\"excluded_reports\"] ) ) {\n\tprint \"\n\t<A HREF=\\\"./graph_all_periods.php?mobile=1&$graph_args&amp;g=\" . $report_name . \"&amp;z=large\\\">\n\t<IMG BORDER=0 ALT=\\\"$clustername\\\" SRC=\\\"./graph.php?$graph_args&amp;g=\" . $report_name .\"&amp;z=mobile\\\"></A>\";\n      }\n    }\n    ?>  \n<?php\n\n$g_metrics_group = array();\n$groups = array();\n\n$size = \"mobile\";\n\nforeach ($metrics as $metric_name => $metric_attributes) {\n\n  if ($metric_attributes['TYPE'] == \"string\" or $metric_attributes['TYPE']==\"timestamp\" or\n      (isset($always_timestamp[$metric_name]) and $always_timestamp[$metric_name])) {\n\t$s_metrics[$metric_name] = $v;\n  } elseif ($metric_attributes['SLOPE'] == \"zero\" or (isset($always_constant[$metric_name]) and $always_constant[$metric_name])) {\n\t$c_metrics[$metric_name] = $v;\n  } else if (isset($reports[$metric_name]) and $reports[$metric])\n    continue;\n  else {\n    $metric_graphargs = \"c=$clustername&amp;h=$hostname&amp;v=$metric_attributes[VAL]\"\n      .\"&amp;m=$metric_name&amp;r=$range&amp;z=$size&amp;jr=$jobrange\"\n      .\"&amp;js=$jobstart&amp;st=$cluster[LOCALTIME]\";\n    if ($cs)\n       $metric_graphargs .= \"&amp;cs=\" . rawurlencode($cs);\n    if ($ce)\n       $metric_graphargs .= \"&amp;ce=\" . rawurlencode($ce);\n    # Adding units to graph 2003 by Jason Smith <smithj4@bnl.gov>.\n    if ($metric_attributes['UNITS']) {\n       $encodeUnits = rawurlencode($metric_attributes['UNITS']);\n       $metric_graphargs .= \"&amp;vl=$encodeUnits\";\n    }\n    if (isset($metric_attributes['TITLE'])) {\n       $title = $metric_attributes['TITLE'];\n       $metric_graphargs .= \"&amp;ti=$title\";\n    }\n    $g_metrics[$metric_name]['graph'] = $graph_args . \"&\" . $metric_graphargs;\n    $g_metrics[$metric_name]['description'] = isset($metric_attributes['DESC']) ? $metric_attributes['DESC'] : '';\n\n    if ( !isset($metrics[$metric_name]['GROUP']) )\n      $group_name = \"no group\";\n    else\n      $group_name = $metrics[$metric_name]['GROUP'][0];\n\n    // Make an array of groups\n    if ( ! in_array($group_name, $groups) ) {\n      $groups[] = $group_name;\n    }\n    \n    $g_metrics_group[$group_name][] = $metric_name;\n }\n}\n\nksort($g_metrics_group);\nforeach ( $g_metrics_group as $metric_group_name => $metric_group_members ) {\n?>\n      <div data-role=\"collapsible\" data-collapsed=\"true\">\n\t<h3><?php print $metric_group_name . \" (\" . sizeof($metric_group_members) . \")\"; ?></h3>\n<?php\n      foreach ( $metric_group_members as $index => $metric_name ) {\n\tprint \"\n\t<A HREF=\\\"./graph_all_periods.php?mobile=1&\" . $g_metrics[$metric_name]['graph'] .  \"\\\">\n\t<IMG BORDER=0 ALT=\\\"$clustername\\\" SRC=\\\"./graph.php?\" . $g_metrics[$metric_name]['graph'] . \"\\\"></A>\";\n      }\n?>\n      </div> <!-- /collapsible -->\n<?php\n} // end of foreach ( $g_metrics_group\n?>\n    </div><!-- /content -->\n  </div><!-- /page -->\n<?php\n}\n?>  \n", "<?php\n$months_ahead = array(0,1,2,3,6,9,12,18,24);\n$months_back = array(12,9,6,3,2,1);\nif ( !isset($_REQUEST['trendrange']) )\n  $_REQUEST['trendrange'] = 6;\nif ( !isset($_REQUEST['trendhistory']) )\n  $_REQUEST['trendhistory'] = 6;\n\n$drop_args = array(\"trendrange\", \"trendhistory\");\n\nforeach ( $_REQUEST as $key => $value ) {\n  if ( ! in_array($key, $drop_args) )\n    $graph_args[] = $key . \"=\" . str_replace(\"_/graph_php?\", \"\", $value);\n}\n\n$query_string = preg_replace(\"/(&trendrange=)(\\d+)/\", \"\", $_SERVER['QUERY_STRING'] );\n$query_string = preg_replace(\"/(&trendhistory=)(\\d+)/\", \"\", $query_string);\n\n\n?>\n<center>\n<div id=\"trend_range_menu\">\n<form id=\"trend_range_form\">\nUse data from last \n<?php\nforeach ( $months_back as $index => $month ) {\n  if (  $_REQUEST['trendhistory'] == $month )\n    $checked = 'checked=\"checked\"';\n  else\n    $checked = \"\";\n?>\n   <input OnChange='drawTrendGraph(\"<?php print $query_string ?>\" + \"&\" + $(\"#trend_range_form\").serialize()); return false;' type=\"radio\" id=\"trendhistory-<?php print $month; ?>\" name=\"trendhistory\" value=\"<?php print $month; ?>\" <?php print $checked; ?>/>\n   <label for=\"trendhistory-<?php print $month; ?>\"><?php print $month; ?></label>\n<?php\n}\n?>\nmonths&nbsp;|&nbsp;Extend trend line \n<?php\n\nif ( !isset($_REQUEST['trendrange']) )\n  $_REQUEST['trendrange'] = 6;\n\nforeach ( $months_ahead as $index => $month ) {\n\n  if (  $_REQUEST['trendrange'] == $month )\n    $checked = 'checked=\"checked\"';\n  else\n    $checked = \"\";\n\n?>\n   <input OnChange='drawTrendGraph(\"<?php print $query_string ?>\" + \"&\" + $(\"#trend_range_form\").serialize()); return false;' type=\"radio\" id=\"range-<?php print $month; ?>\" name=\"trendrange\" value=\"<?php print $month; ?>\" <?php print $checked; ?>/>\n   <label for=\"range-<?php print $month; ?>\"><?php print $month; ?></label>\n<?php\n}\n?>\n months ahead</form></div>\n</center>\n<script type=\"text/javascript\">\n  $(function () {\n    $(\"#trend_range_menu\").buttonset();\n  });\n</script>", "<?php\n\ninclude_once(\"./eval_conf.php\");\ninclude_once(\"./functions.php\");\n\nif( ! checkAccess(GangliaAcl::ALL_VIEWS, GangliaAcl::VIEW, $conf) ) {\n  die(\"You do not have access to view views.\");\n}\n\n// Load the metric caching code we use if we need to display graphs\nretrieve_metrics_cache();\n\n$base = isset($_GET['base']) ? $_GET['base'] . \"/\" : \"\";\n?>\n\n<html>\n<head>\n<script type=\"text/javascript\" src=\"<?php print $base; ?>js/jquery-1.8.2.min.js\"></script>\n<script type=\"text/javascript\" src=\"<?php print $base; ?>js/jquery-ui-1.9.1.custom.min.js\"></script>\n<link type=\"text/css\" href=\"css/smoothness/jquery-ui-1.9.1.custom.min.css\" rel=\"stylesheet\"/>\n<link rel=\"stylesheet\" href=\"./styles.css\" type=\"text/css\">\n</head>\n<body>\n  <div>\n\n<?php\n  $available_views = get_available_views();\n  $view_name = $_GET['vn'];\n\n  // Let's find the view definition\n  foreach ($available_views as $view_id => $view) {\n    if ($view['view_name'] == $view_name) {\n      $view_elements = get_view_graph_elements($view);\n      $range_args = \"\";\n      if (isset($_GET['r']) && $_GET['r'] != \"\") \n\t$range_args .= \"&amp;r=\" . $_GET['r'];\n      if (isset($_GET['cs']) && isset($_GET['ce'])) \n\t$range_args .= \"&amp;cs=\" . $_GET['cs'] . \"&amp;ce=\" . $_GET['ce'];\n\n      if (count($view_elements) != 0) {\n\tforeach ($view_elements as $id => $element) {\n\t  $legend = isset($element['hostname']) ? $element['hostname'] : \"Aggregate graph\";\n          $base = isset($_GET['base']) ? $_GET['base'] : '.';\n\t  print \"<a href=\\\"\" . $base . \"/graph_all_periods.php?\" . htmlentities($element['graph_args']) .\"&amp;z=large\\\"><img title=\\\"\" . $legend . \" - \" . $element['name'] . \"\\\" border=0 src=\\\"\" . $base . \"/graph.php?\" . htmlentities($element['graph_args']) . \"&amp;z=small\" . $range_args .  \"\\\" style=\\\"padding:2px;\\\"></a>\";\n\t}\n      } else {\n\tprint \"No graphs defined for this view. Please add some\";\n      }\n    }\n  } \n?>\n  </div>\n</body>\n</html>\n\n", "<?php\ninclude_once(\"./eval_conf.php\");\ninclude_once(\"./functions.php\");\ninclude_once(\"./global.php\");\n\nif (! checkAccess(GangliaAcl::ALL_VIEWS, GangliaAcl::VIEW, $conf))\n  die(\"You do not have access to view views.\");\n\n///////////////////////////////////////////////////////////////////////////////\n// Create new view\n///////////////////////////////////////////////////////////////////////////////\nif (isset($_GET['create_view'])) {\n  if(! checkAccess(GangliaAcl::ALL_VIEWS, GangliaAcl::EDIT, $conf)) {\n    $output = \"You do not have access to edit views.\";\n  } else {\n    // Check whether the view name already exists\n    $view_exists = 0;\n\n    $available_views = get_available_views();\n\n    foreach ($available_views as $view_id => $view) {\n      if ($view['view_name'] == $_GET['view_name']) {\n        $view_exists = 1;\n      }\n    }\n\n    if ($view_exists == 1) {\n      $output = \"<strong>Alert:</strong> View with the name \" .\n                $_GET['view_name'] . \n                \" already exists.\";\n    } else {\n      $empty_view = array (\"view_name\" => $_GET['view_name'],\n                           \"items\" => array());\n      $view_suffix = str_replace(\" \", \"_\", $_GET['view_name']);\n      $view_filename = $conf['views_dir'] . \"/view_\" . $view_suffix . \".json\";\n      $json = json_encode($empty_view);\n      if (file_put_contents($view_filename, \n                            json_prettyprint($json)) === FALSE) {\n        $output = \"<strong>Alert:</strong>\" .\n                  \" Can't write to file $view_filename.\" .\n                  \" Perhaps permissions are wrong.\";\n      } else {\n        $output = \"View has been created successfully.\";\n      }\n    }\n  }\n?>\n<div class=\"ui-widget\">\n  <div class=\"ui-state-default ui-corner-all\" style=\"padding: 0 .7em;\"> \n    <p><span class=\"ui-icon ui-icon-alert\" style=\"float: left; margin-right: .3em;\"></span> \n    <?php echo $output ?></p>\n  </div>\n</div>\n<?php\n  exit(0);\n} \n\n///////////////////////////////////////////////////////////////////////////////\n// Delete view\n///////////////////////////////////////////////////////////////////////////////\nif (isset($_GET['delete_view'])) {\n  if (! checkAccess(GangliaAcl::ALL_VIEWS, GangliaAcl::EDIT, $conf)) {\n    $output = \"You do not have access to edit views.\";\n  } else {\n    // Check whether the view name already exists\n    $view_exists = 0;\n\n    $available_views = get_available_views();\n\n    foreach ($available_views as $view_id => $view) {\n      if ($view['view_name'] == $_GET['view_name']) {\n        $view_exists = 1;\n      }\n    }\n\n    if ($view_exists != 1) {\n      $output = \"<strong>Alert:</strong> View with the name \" .\n      $_GET['view_name'] . \n      \" does not exist.\";\n    } else {\n      $view_suffix = str_replace(\" \", \"_\", $_GET['view_name']);\n      $view_filename = $conf['views_dir'] . \"/view_\" . $view_suffix . \".json\";\n      if (unlink($view_filename) === FALSE) {\n        $output = \"<strong>Alert:</strong>\" .\n                  \" Can't remove file $view_filename.\" .\n                  \" Perhaps permissions are wrong.\";\n      } else {\n        $output = \"View has been successfully removed.\";\n      }\n    }\n  }\n} // delete_view\n\n///////////////////////////////////////////////////////////////////////////////\n// Add to view\n///////////////////////////////////////////////////////////////////////////////\nif (isset($_GET['add_to_view'])) {\n  if (! checkAccess(GangliaAcl::ALL_VIEWS, GangliaAcl::EDIT, $conf)) {\n    $output = \"You do not have access to edit views.\";\n  } else {\n    $view_exists = 0;\n    // Check whether the view name already exists\n    $available_views = get_available_views();\n\n    foreach ($available_views as $view_id => $view) {\n      if ($view['view_name'] == $_GET['view_name']) {\n        $view_exists = 1;\n        break;\n      }\n    }\n\n    if ($view_exists == 0) {\n      $output = \"<strong>Alert:</strong> View \" .\n      $_GET['view_name'] . \n      \" does not exist. This should not happen.\";\n    } else {\n      // Read in contents of an existing view\n      $view_filename = $view['file_name'];\n      // Delete the file_name index\n      unset($view['file_name']);\n\n      # Check if we are adding an aggregate graph\n      if (isset($_GET['aggregate'])) {\n\tforeach ( $_GET['mreg'] as $key => $value ) \n\t  $metric_regex_array[] = array(\"regex\" => $value);\n\n\t  foreach ($_GET['hreg'] as $key => $value) \n\t    $host_regex_array[] = array(\"regex\" => $value);\n\n\t  $item_array = array(\"aggregate_graph\" => \"true\", \n                              \"metric_regex\" => $metric_regex_array, \n\t                      \"host_regex\" => $host_regex_array, \n                              \"graph_type\" => stripslashes($_GET['gtype']),\n\t                      \"vertical_label\" => stripslashes($_GET['vl']),\n                              \"title\" => $_GET['title'],\n                        \"glegend\" => $_GET['glegend']);\n\n          if (isset($_GET['x']) && is_numeric($_GET['x'])) {\n            $item_array[\"upper_limit\"] = $_GET['x'];\n          }\n          if ( isset($_GET['n']) && is_numeric($_GET['n'])) {\n            $item_array[\"lower_limit\"] = $_GET['n'];\n          }\n          if ( isset($_GET['c']) ) {\n            $item_array[\"cluster\"] = $_GET['c'];\n          }\n\n          if ( isset($_GET['h']) ) { $item_array['host'] = $_GET['h']; unset($item_array['host_regex']); }\n          if ( isset($_GET['m']) ) { $item_array['metric'] = $_GET['m']; unset($item_array['metric_regex']); }\n          if ( isset($_GET['g']) ) { $item_array['graph'] = $_GET['g']; }\n          if ($item_array['host_regex'] == null) $item_array['host_regex'] = '.*';\n\n          $view['items'][] = $item_array;\n          unset($item_array);\n\n      } else {\n\tif ($_GET['type'] == \"metric\") {\n          $items = array(\"hostname\" => $_GET['host_name'], \n                         \"metric\" => $_GET['metric_name']);\n\t  if (isset($_GET['vertical_label']))\n            $items[\"vertical_label\"] = stripslashes($_GET['vertical_label']);\n\t  if (isset($_GET['title']))\n            $items[\"title\"] = stripslashes($_GET['title']);\n\t  if (isset($_GET['c']))\n            $items[\"cluster\"] = $_GET['c'];\n          if (isset($_GET['warning']) && is_numeric($_GET['warning']))\n            $items[\"warning\"] = $_GET['warning'];\n          if (isset($_GET['critical']) && is_numeric($_GET['critical']))\n            $items[\"critical\"] = $_GET['critical'];\n          \n\t  $view['items'][] = $items;\n\t} else\n\t  $view['items'][] = array(\"hostname\" => $_GET['host_name'], \n                                   \"graph\" => $_GET['metric_name']);\n      }\n\n      $json = json_encode($view);\n\n      if (file_put_contents($view_filename, \n                            json_prettyprint($json)) === FALSE ) {\n        $output = \"<strong>Alert:</strong>\" .\n                  \" Can't write to file $view_filename.\" .\n                  \" Perhaps permissions are wrong.\";\n      } else {\n        $output = \"View has been updated successfully.\";\n      } \n    }  \n  }\n?>\n<div class=\"ui-widget\">\n  <div class=\"ui-state-default ui-corner-all\" style=\"padding: 0 .7em;\"> \n    <p><span class=\"ui-icon ui-icon-alert\" style=\"float: left; margin-right: .3em;\"></span> \n    <?php echo $output ?></p>\n  </div>\n</div>\n<?php\n  exit(0);\n} \n\n$available_views = get_available_views();\n$existing_views = '';\nforeach ($available_views as $view) {\n $v = $view['view_name'];\n $vid = viewId($v);\n $checked = ($_GET['vn'] == $v);\n $existing_views .= '<input type=\"radio\" id=\"' . $vid . '\" onClick=\"selectView(\\'' . $v . '\\'); return false;\"' . ($checked ? \" checked\" : \"\") . '><label style=\"text-align:left;\" class=\"nobr\" for=\"' . $vid . '\">' . $v . '</label>'; \n}\n\nif (isset($_GET['views_menu'])) {\n?>\n<div id=\"views_menu\">\n  <?php echo $existing_views ?>\n</div>\n<script type=\"text/javascript\">$(function(){$(\"#views_menu\").buttonsetv();});</script>\n<?php\n  exit(0);\n}\n\n$tpl = new Dwoo_Template_File( template(\"views_view.tpl\") );\n$data = new Dwoo_Data();\n$data->assign(\"range\",$range);\n\n// Pop up a warning message if there are no available views\n// (Disable temporarily, otherwise we can't create views)\nif (sizeof($available_views) == -1) {\n  $error_msg = '\n    <div class=\"ui-widget\">\n      <div class=\"ui-state-error ui-corner-all\" style=\"padding: 0 .7em;\"> \n        <p><span class=\"ui-icon ui-icon-alert\" \n                 style=\"float: left; margin-right: .3em;\"></span> \n\t   <strong>Alert:</strong> There are no views defined.</p>\n      </div>\n    </div>';\n}\n\n$size = isset($clustergraphsize) ? $clustergraphsize : 'default';\n//set to 'default' to preserve old behavior\n$size = $size == 'medium' ? 'default' : $size; \n\n$additional_host_img_css_classes = \"\";\nif ( isset($conf['zoom_support']) && $conf['zoom_support'] === true )\n    $additional_host_img_css_classes = \"host_${size}_zoomable\";\n\n$data->assign(\"additional_host_img_css_classes\", \n              $additional_host_img_css_classes);\n\n$data->assign(\"existing_views\", $existing_views);\n$data->assign(\"view_name\", $user[\"viewname\"]);\n\n$view_items = NULL;\nforeach ($available_views as $view_id => $view) {\n if ($view['view_name'] == $user[\"viewname\"]) {\n   $view_elements = get_view_graph_elements($view);\n   $view_items = array();\n   if ( count($view_elements) != 0) {\n     $graphargs = \"\";\n     if ($cs)\n       $graphargs .= \"&amp;cs=\" . rawurlencode($cs);\n     if ($ce)\n       $graphargs .= \"&amp;ce=\" . rawurlencode($ce);\n        \n     foreach ($view_elements as $id => $element) {\n       $view_items[] = array (\"legend\" => isset($element['hostname']) ? $element['hostname'] : \"Aggregate graph\",\n                               \"url_args\" => htmlentities($element['graph_args']) . \"&amp;r=\" . $range . $graphargs,\n\n                               \"aggregate_graph\" => isset($element['aggregate_graph']) ? 1 : 0\n        );\n      }\n    }\n    \n    $data->assign(\"number_of_view_items\", sizeof($view_items));\n    break;    \n }  // end of if ( $view['view_name'] == $view_name\n} // end of foreach ( $views as $view_id \n\nif (isset($view_items))\n  $data->assign(\"view_items\", $view_items);\n\n$data->assign('GRAPH_BASE_ID', $GRAPH_BASE_ID);\n$data->assign('SHOW_EVENTS_BASE_ID', $SHOW_EVENTS_BASE_ID);\n \n$dwoo->output($tpl, $data);\n\n?>\n"], "fixing_code": ["<?php\n\ninclude_once(\"./eval_conf.php\");\ninclude_once(\"./functions.php\");\n\nif ( isset($_GET['action']) && $_GET['action'] == \"show_views\" ) {\n  //////////////////////////////////////////////////////////////////////////////////////////////////////\n  // Show available views\n  //////////////////////////////////////////////////////////////////////////////////////////////////////\n  $available_views = get_available_views();\n  ?>\n\n  <table>\n  <?php\n  if ( isset($_GET['aggregate']) ) {\n  ?>\n     <tr><th>Host regular expression</th><td><?php print htmlspecialchars( join (\",\", $_GET['hreg']) ); ?></td></tr>\n     <tr><th>Metric regular expression</th><td><?php print htmlspecialchars( join (\",\", $_GET['mreg']) ); ?></td></tr>\n  <?php\n    } else {\n  ?>\n     <tr><th>Hostname</th><td><?php print htmlspecialchars($_GET['host_name']); ?></td></tr>\n     <tr><th>Metric/Report</th><td><?php print htmlspecialchars($_GET['metric_name']); ?></td></tr>\n  <?php\n  }\n  ?>\n\n  </table>\n  <p>\n  <form id=\"add_metric_to_view_form\">\n    Add graph to view: <br />\n    <?php \n    // Get all the aggregate form variables and put them in the hidden fields\n    if ( isset($_GET['aggregate']) ) {\n\tforeach ( $_GET as $key => $value ) {\n\t  if ( is_array($value) ) {\n\t    foreach ( $value as $index => $value2 ) {\n\t      print '<input type=\"hidden\" name=\"' . htmlspecialchars($key) .'[]\" value=\"' . htmlspecialchars($value2) . '\" />';\n\t    }\n\t  } else {\n\t    print '<input type=\"hidden\" name=\"' . htmlspecialchars($key) .'\" value=\"' . htmlspecialchars($value) . '\" />';\n\t  }\n\t}\n    } else {\n      // If hostname is not set we assume we are dealing with aggregate graphs\n      print \"<input type=\\\"hidden\\\" name=\\\"host_name\\\" value=\\\"\".htmlspecialchars($_GET['host_name']).\"\\\" />\";\n      $metric_name=$_GET['metric_name'];\n      print \"<input type=\\\"hidden\\\" name=\\\"metric_name\\\" value=\\\"\".htmlspecialchars($_GET['metric_name']).\"\\\" />\";\n      print \"<input type=\\\"hidden\\\" name=\\\"type\\\" value=\\\"{$_GET['type']}\\\">\";\n      if (isset($_GET['vl']) && ($_GET['vl'] !== ''))\n\t  print \"<input type=\\\"hidden\\\" name=\\\"vertical_label\\\" value=\\\"\" . htmlentities(stripslashes($_GET['vl'])) . \"\\\" />\";\n      if (isset($_GET['ti']) && ($_GET['ti'] !== ''))\n\t  print \"<input type=\\\"hidden\\\" name=\\\"title\\\" value=\\\"\" . htmlentities(stripslashes($_GET['ti'])) . \"\\\" />\";\n      \n      print \"<table><tr><th rowspan=2>Optional thresholds to display</th><td>Warning</td><td><input size=6 name=\\\"warning\\\"></td>\n\t</tr><td>Critical</td><td><input size=6 name=\\\"critical\\\"></td></tr></table>\";\n    }\n    ?>\n    <br />\n    <center>\n    <select onChange=\"addItemToView()\" name=\"view_name\">\n    <option value=\"none\">Please choose a view to add to</option>\n    <?php\n    foreach ( $available_views as $view_id => $view ) {\n      print \"<option value=\\\"\" . $view['view_name'] . \"\\\">\" . $view['view_name'] . \"</option>\";\n    } \n\n  ?>\n    </select>\n    </center>\n  </form>\n<?php\n\n} // end of if ( isset($_GET['show_views']) {\n?>\n", "<?php\n\ninclude_once(\"./eval_conf.php\");\ninclude_once(\"./functions.php\");\n\n//////////////////////////////////////////////////////////////////////////////////////////\n// Print out \n//////////////////////////////////////////////////////////////////////////////////////////\nif ( ! isset($_REQUEST['view_name']) ) {\n\n  $available_views = get_available_views();\n\n  print \"<form action=autorotation.php><select onchange='this.form.submit();' name=view_name><option value=none>Please choose...</option>\";\n  foreach ( $available_views as $id => $view ) {\n    print \"<option value='\" . $view['view_name'] . \"'>\" . $view['view_name'] . \"</option>\";\n  }\n  print \"</form>\";\n\n} else {\n\n  header(\"Cache-Control: no-cache, must-revalidate\");\n  header(\"Expires: Sat, 26 Jul 1997 05:00:00 GMT\");\n\n  // We need metrics cache in order to derive cluster name particular host\n  // belongs to\n  retrieve_metrics_cache();\n\n  $available_views = get_available_views();\n\n  $view_found = 0;\n  \n  $user['view_name'] = $_REQUEST['view_name'];\n  \n  // I am not quite sure at this point whether I should cache view info so\n  // for now I will have to do this\n  foreach ( $available_views as $id => $view ) {\n    # Find view settings\n    if ( $user['view_name'] == $view['view_name'] ) {\n      $view_found = 1;\n      break;\n    }\n  }\n  unset($available_views);\n\n  if ( $view_found == 0 || sizeof($view['items']) == 0 ) {\n      die (\"<font color=red size=4>There are no graphs in view you supplied or view does not exist.</font>\");\n  }\n\n  # If timeout is specified use it. Otherwise default to 30 seconds.\n  if ( isset($_REQUEST['timeout']) and is_numeric($_REQUEST['timeout']) )\n    $timeout = $_REQUEST['timeout'];\n  else\n    $timeout = 30;\n\n  # This defines times when updates are happening. For instance if you want\n  # to turn off updating during non-business hours you would set \n  # office_hour_min = 8 and office_hour_max = 17. If you want them 24/7\n  # set min to 0 and max to 24.\n  $office_hour_min = 0;\n  $office_hour_max = 24;\n\n  # Graph sizes to use. Those have to be specified in /ganglia/conf.php\n  $small_size = \"medium\";\n  $large_size = \"xlarge\";\n\n  # Path to ganglia. It can be a real URL\n  $gangliapath = \"graph.php?hc=4&st=\";\n\n  # Get the requested graphid and store it in a somewhat more beautiful variable name\n  isset($_GET['id']) and is_numeric($_GET['id']) ? $id = $_GET['id'] : $id = 0;\n\n  // Let's get all View graph elements\n  $view_elements = get_view_graph_elements($view);\n  \n  # The title of the next graph, with some logic to set the next to the first if we run out of graphs\n  if ($id < (count($view_elements) -1)) {\n\t  $nextid = $id+1;\n  } else {\n\t  $nextid = 0;\n  }\n\n  // The title of the graph\n  $title = $view_elements[$id]['name'];\n  # If it's not an aggregate graph put hostname in the title\n  $suffix = isset($view_elements[$nextid]['hostname']) ? \" for \" . $view_elements[$nextid]['hostname'] : \"\";\n  $nexttitle = $view_elements[$nextid]['name'] . $suffix;\n\n  ?>\n  <html>\n  <head>\n  <title>Ganglia - Graph View</title>\n  <meta http-equiv=\"refresh\" content=\"<?php print \"$timeout;url=\" . $_SERVER[\"SCRIPT_NAME\"] . \"?view_name=\" . $user['view_name'] .\"&id=\" . $nextid; ?>&timeout=<?php print $timeout ?>\">\n  <style>\n  body { \n\t  margin: 0px;\n\t  font-family: Tahoma, Helvetica, Verdana, Arial, sans-serif;\n  }\n  </style>\n  </head>\n\n\n  <body>\n\n  <?php\n\n  $current_hour = date('G');\n\n  #####################################################################################\n  # Check whether these are office hours. Display graphs only during office hours\n  # so that we can give Ganglia server a little breather from generating all those\n  # images\n  #####################################################################################\n  if ( $current_hour >= $office_hour_min && $current_hour <= $office_hour_max ) {\n\n  ?>\n\n  <div style=\"position: fixed; left: 20; width: 800; top: 2; font-size: 30px;\"><?php echo $title;  ?></div>\n  <div style=\"position: fixed; left: 20; width: 600; top: 55; font-size: 20px;\">Next: <?php echo $nexttitle  ?></div><br />\n\n  <table>\n  <tr>\n    <td><img src=\"<?php echo $gangliapath . \"&r=hour&z=${large_size}&\" . $view_elements[$id]['graph_args']; ?>\"><br />\n\t<img src=\"<?php echo $gangliapath . \"&r=day&z=${large_size}&\" . $view_elements[$id]['graph_args']; ?>\"></td>\n    <td valign=\"top\">\n      <img src=\"<?php echo $gangliapath . \"&r=week&z=${small_size}&\" . $view_elements[$id]['graph_args']; ?>\">\n      <img src=\"<?php echo $gangliapath . \"&r=month&z=${small_size}&\" . $view_elements[$id]['graph_args']; ?>\">\n    <div style=\"margin-top: 10px; font-size: 48px; text-align: center;\"><?php echo date(DATE_RFC850); ?></div>\n    <p>\n    <center><form>\n    <input type=\"hidden\" name=\"view_name\" value=\"<?php print htmlspecialchars($_GET['view_name']) ?>\">\n    <input type=\"hidden\" name=\"id\" value=\"<?php print $nextid ?>\">\n    Rotate graphs every <select onChange=\"form.submit();\" name=\"timeout\">\n    <?php\n      for ( $i = 10 ; $i <= 90 ; $i += 5 ) {\n\tif ( $timeout == $i )\n\t  $selected = \"selected\";\n\telse\n\t  $selected = \"\";\n\tprint \"<option value='\" . $i . \"' $selected>$i</option>\";\n      }\n    ?>\n    </select> seconds.</form></center>\n    </p>\n    <center><a href=\"/ganglia/\">Go back to Ganglia</a></center></div>\n\t  </td>\n  </tr>\n  </table>\n  <div>\n\n  <?php\n\n  } else {\n\n  ?>\n  <div style=\"color: red; font-size: 72px;\">\n  We are sleeping since it's off hours.<p>\n  Adjust $office_hour_min and $office_hour_max if this makes you unhappy</h3>\n  </div>\n  <div style=\"margin-top: 10px; font-size: 48px; text-align: center;\"><?php echo date(DATE_RFC850); ?></div>\n  <?php\n\n  }\n\n  print \"  </body>\n  </html>\";\n\n} // end of if (!isset($_GET['view_name']\n?>\n", "<?php\ninclude_once(\"./global.php\");\n\n$tpl = new Dwoo_Template_File( template(\"compare_hosts.tpl\") );\n$data = new Dwoo_Data();\n$data->assign(\"range\",$range);\n\n$size = isset($clustergraphsize) ? $clustergraphsize : 'default';\n//set to 'default' to preserve old behavior\n$size = $size == 'medium' ? 'default' : $size; \n\nretrieve_metrics_cache();\n\n$matches = array();\nif (array_key_exists('hreg', $_GET)) {\n  foreach ( $_GET['hreg'] as $key => $query ) {\n    if ($query != '') {\n      foreach ( $index_array['hosts'] as $key => $host_name ) {\n        if ( preg_match(\"/$query/i\", $host_name ) ) {\n          // We can have same hostname in multiple clusters\n          foreach ($index_array['cluster'][$host_name] AS $clustername) {\n            $matches[] = array (\"hostname\" => $host_name, \"clustername\" => $clustername);\n          }\n        }\n      }\n    }\n  }\n}\n\n#print \"<PRE>\";print_r($index_array['metrics']);\n\n$host_metrics = array();\n$host_cluster = array();\nforeach ( $matches as $index => $match ) {\n  $hostname = $match['hostname'];\n  $host_cluster[] = $match['hostname'] . \"|\" . $match['clustername'];\n  foreach ( $index_array['metrics'] as $metric_name => $hosts ) {\n    if ( array_search( $hostname , $hosts ) !== FALSE && \n         ! isset($host_metrics[$metric_name]) ) {\n      $host_metrics[$metric_name] = 1; \n    }\n  }\n}\n\n# Join the hosts in a list into a string which we pass to graphs\n$host_list = join(\",\", $host_cluster);\n\nksort($host_metrics);\n#print \"<PRE>\";print_r($host_metrics);\n\n$hmetrics = array();\nforeach ( $host_metrics as $name => $value )\n  $hmetrics[] = $name;\n\n\n$hreg = \"\";\nif (array_key_exists('hreg', $_GET)) {\n  foreach ( $_GET['hreg'] as $index => $arg ) {\n    $hreg .= \"&hreg[]=\" . rawurlencode($arg);\n  }\n}\n\nif ( isset($_GET['hreg']) ) {\n  $data->assign(\"hreg_arg\", htmlspecialchars($_GET['hreg'][0]) );\n} else {\n  $data->assign(\"hreg_arg\", \"\");\n}\n\n$size = isset($clustergraphsize) ? $clustergraphsize : 'default';\n//set to 'default' to preserve old behavior\n$size = $size == 'medium' ? 'default' : $size; \n\n$additional_host_img_css_classes = \"\";\nif ( isset($conf['zoom_support']) && $conf['zoom_support'] === true )\n    $additional_host_img_css_classes = \"host_${size}_zoomable\";\n\n$data->assign(\"additional_host_img_css_classes\", $additional_host_img_css_classes);\n\n$graphargs = \"&r=\" . $range;\nif ($cs)\n   $graphargs .= \"&amp;cs=\" . rawurlencode($cs);\nif ($ce)\n   $graphargs .= \"&amp;ce=\" . rawurlencode($ce);\n\n$data->assign(\"hreg\", $hreg);\n$data->assign(\"graphargs\", $graphargs);\n$data->assign(\"host_list\", $host_list);\n$data->assign(\"host_metrics\", $hmetrics);\n$data->assign(\"number_of_metrics\", sizeof($hmetrics));\n\n$data->assign('GRAPH_BASE_ID', $GRAPH_BASE_ID);\n$data->assign('SHOW_EVENTS_BASE_ID', $SHOW_EVENTS_BASE_ID);\n\n$dwoo->output($tpl, $data);\n\n?>\n", "<?php\n\n$tpl = new Dwoo_Template_File( template(\"decompose_graph.tpl\") );\n$data = new Dwoo_Data();\n$data->assign(\"range\",$range);\n\n\nif ( !isset($_GET['hreg']) or !isset($_GET['mreg']) ) {\n    print '\n\t<div class=\"ui-widget\">\n\t\t\t  <div class=\"ui-state-error ui-corner-all\" style=\"padding: 0 .7em;\"> \n\t\t\t\t  <p><span class=\"ui-icon ui-icon-alert\" style=\"float: left; margin-right: .3em;\"></span> \n\t\t\t\t  <strong>Alert:</strong> Host Regex and Metric Regex arguments are missing.</p>\n\t\t\t  </div>\n\t</div>\n    ';\n\n    exit(1);\n}\n\n$graph_type = \"line\";\n$line_width = \"2\";\n$graph_config = build_aggregate_graph_config ($graph_type, $line_width, $_GET['hreg'], $_GET['mreg']);\n\nforeach ( $_GET['hreg'] as $index => $arg ) {\n  print \"<input type=hidden name=hreg[] value='\" . htmlspecialchars($arg) . \"'>\";\n}\nforeach ( $_GET['mreg'] as $index => $arg ) {\n  print \"<input type=hidden name=mreg[] value='\" . htmlspecialchars($arg) . \"'>\";\n}\n\n$size = isset($clustergraphsize) ? $clustergraphsize : 'default';\n$size = $size == 'medium' ? 'default' : $size; //set to 'default' to preserve old behavior\n\n$additional_host_img_css_classes = \"\";\nif ( isset($conf['zoom_support']) && $conf['zoom_support'] === true )\n    $additional_host_img_css_classes = \"host_${size}_zoomable\";\n\n$data->assign(\"additional_host_img_css_classes\", $additional_host_img_css_classes);\n\n$items = array();\n\n$graphargs = \"\";\nif ($cs)\n   $graphargs .= \"&amp;cs=\" . rawurlencode($cs);\nif ($ce)\n   $graphargs .= \"&amp;ce=\" . rawurlencode($ce);\n\nforeach ( $graph_config['series'] as $index => $item ) {\n   $args = \"h=\" . $item['hostname'] . \"&c=\" . $item['clustername'] . \"&m=\" . $item['metric'];\n   $items[] = array ( \"title\" => \"\",\n          \"url_args\" => $args . $graphargs . \"&r=\" . $range\n   );\n\n}\n\n#print \"<PRE>\"; print_r($items);\n\n$data->assign(\"items\", $items);\n$data->assign(\"number_of_items\", sizeof($items));\n$dwoo->output($tpl, $data);\n\n?>\n", "<html>\n<head>\n<title>Ganglia: Graph all periods</title>\n<link rel=\"stylesheet\" href=\"./styles.css\" type=\"text/css\" />\n<style type=\"text/css\">\n.img_view {\n  float: left;\n  margin: 0 0 10px 10px;\n}\n</style>\n<?php\nif ( ! isset($_REQUEST['embed'] ) && ! isset($_REQUEST['mobile']) ) {\n?>\n<script TYPE=\"text/javascript\" SRC=\"js/jquery-1.8.2.min.js\"></script>\n<script type=\"text/javascript\" src=\"js/jquery-ui-1.9.1.custom.min.js\"></script>\n<script type=\"text/javascript\" src=\"js/jquery.livesearch.min.js\"></script>\n<script type=\"text/javascript\" src=\"js/ganglia.js\"></script>\n<script type=\"text/javascript\" src=\"js/jquery.gangZoom.js\"></script>\n<script type=\"text/javascript\" src=\"js/jquery.cookie.js\"></script>\n<script type=\"text/javascript\" src=\"js/jquery-ui-timepicker-addon.js\"></script>\n<script type=\"text/javascript\" src=\"js/jquery.ba-bbq.min.js\"></script>\n<link type=\"text/css\" href=\"css/smoothness/jquery-ui-1.9.1.custom.min.css\" rel=\"stylesheet\" />\n<link rel=\"stylesheet\" href=\"css/jquery.multiselect.css\" type=\"text/css\" />\n<?php\n}\n?>\n\n<script type=\"text/javascript\">\n  function openDecompose($url) {\n    $.cookie(\"ganglia-selected-tab-\" + window.name, 0);\n    location.href=\"./index.php\" + $url + \"&amp;tab=m\";\n  }\n\n  $(function() {\n    initShowEvent();\n    initTimeShift();\n<?php if ( isset($_GET['embed'] ) ) { ?>\n    initMetricActionsDialog();\n<?php } ?>\n<?php if ( ! isset($_REQUEST['mobile'])) { ?>\n    $( \"#popup-dialog\" ).dialog({ autoOpen: false, minWidth: 850 });\n<?php } ?>\n  });\n</script>\n\n<?php\ninclude_once \"./eval_conf.php\";\ninclude_once \"./global.php\";\n\n// build a query string but drop r and z since those designate time window and size. Also if the \n// get arguments are an array rebuild them. For example with hreg (host regex)\n$ignore_keys_list = array(\"r\", \"z\", \"st\", \"cs\", \"ce\", \"hc\");\n\nforeach ($_GET as $key => $value) {\n  if ( ! in_array($key, $ignore_keys_list) && ! is_array($value))\n    $query_string_array[] = rawurlencode($key) . \"=\" . urlencode($value);\n\n  // $_GET argument is an array. Rebuild it to pass it on\n  if ( is_array($value) ) {\n    foreach ( $value as $index => $value2 )\n      $query_string_array[] = rawurlencode($key) . \"[]=\" . urlencode($value2);\n\n  }\n}\n\n// If we are in the mobile mode set the proper graph sizes\nif ( isset($_GET['mobile'])) {\n  $largesize = \"mobile\";\n  $xlargesize = \"mobile\";\n} else {\n  $largesize = \"large\";\n  $xlargesize = \"xlarge\";  \n}\n\n// Join all the query_string arguments\n$query_string = \"&amp;\" . join(\"&amp;\", $query_string_array);\n\n// Descriptive host/aggregate graph\nif (isset($_GET['h']) && ($_GET['h'] != ''))\n  $description = htmlspecialchars($_GET['h']);\nelse if (isset($_GET['c']) && ($_GET['c'] != ''))\n  $description = htmlspecialchars($_GET['c']);\nelse if (is_array($_GET['hreg']))\n  $description = htmlspecialchars( join(\",\", $_GET['hreg']) );\nelse\n  $description = \"Unknown\";\n\nif (isset($_GET['g'])) \n  $metric_description = htmlspecialchars($_GET['g']);\nelse if ( isset($_GET['m'] ))\n  $metric_description = htmlspecialchars($_GET['m']);\nelse if (is_array($_GET['mreg']) )\n  $metric_description = htmlspecialchars( join(\",\", $_GET['mreg']) );\nelse\n  $metric_description = \"Unknown\";\n\n# Determine if it's aggregate graph\nif ( preg_match(\"/aggregate=1/\", $query_string) )\n  $is_aggregate = true;\nelse\n  $is_aggregate = false;\n\n\nif ( $conf['graph_engine'] == \"flot\" ) {\n?>\n<style type=\"text/css\">\n.flotgraph {\n  height: <?php print $conf['graph_sizes'][$largesize][\"height\"] ?>px;\n  width:  <?php print $conf['graph_sizes'][$largesize][\"width\"] ?>px;\n}\n</style>\n<?php\n// Add JQuery and flot loading only if this is not embedded in the Aggregate Graphs Tab\nif ( ! isset($_GET['embed'] ) ) {\n?>\n<!--[if lte IE 8]><script language=\"javascript\" type=\"text/javascript\" src=\"js/excanvas.min.js\"></script><![endif]-->\n<script language=\"javascript\" type=\"text/javascript\" src=\"js/jquery.flot.min.js\"></script>\n<?php\n} // end of if ( ! isset($_GET['embed'] )\n?>\n<script type=\"text/javascript\">\n  var default_time = 'hour';\n  var metric = \"<?php if (isset($_GET['g'])) echo $_GET['g']; else echo $_GET['m']; ?>\";\n  var base_url = \"<?php print 'graph.php?flot=1&amp;' . $_GET['m'] . $query_string ?>\" + \"&amp;r=\" + default_time;\n</script>\n<script type=\"text/javascript\" src=\"js/create-flot-graphs.js\"></script>\n<?php\n} // end of if ( $conf['graph_engine'] == \"flot\" ) {\n?>\n</head>\n\n<body onSubmit=\"return false;\">\n<?php\nif ( ! isset($_REQUEST['mobile']) ) {\n?>\n<div id=\"popup-dialog\" style=\"display: none\" title=\"Inspect Graph\">\n  <div id=\"popup-dialog-content\">\n  </div>\n</div>\n<?php\n}\n?>\n<div id=\"metric-actions-dialog\" style=\"display: none\" title=\"Metric Actions\">\n<div id=\"metric-actions-dialog-content\">\n\tAvailable Metric actions.\n</div>\n</div>\n<form>\n<?php\nif ( isset($_REQUEST['mobile'])) {\n?>\n    <div data-role=\"page\" class=\"ganglia-mobile\" id=\"view-home\">\n    <div data-role=\"header\">\n      <a href=\"#\" class=\"ui-btn-left\" data-icon=\"arrow-l\" onclick=\"history.back(); return false\">Back</a>\n      <h3><?php if (isset($_GET['g'])) echo htmlspecialchars($_GET['g']); else echo htmlspecialchars($_GET['m']); ?></h3>\n      <a href=\"#mobile-home\">Home</a>\n    </div>\n    <div data-role=\"content\">\n<?php\n}\n\n// Skip printing if this is an embedded graph e.g. from Aggregate graph screen\nif ( ! isset($_REQUEST['embed'] )  ) {\n?>\n  <div><b>Host/Cluster/Host Regex: </b><?php print $description ?>&nbsp;<b>Metric/Graph/Metric Regex: </b><?php print $metric_description;?>&nbsp;&nbsp;\n<?php\n}\n\nif ( ! isset($_REQUEST['mobile'] )  ) {\n   print '<input title=\"Hide/Show Events\" type=\"checkbox\" id=\"show_all_events\" onclick=\"showAllEvents(this.checked)\"/><label class=\"show_event_text\" for=\"show_all_events\">Hide/Show Events All Graphs</label>';\n   # Make sure it's not aggregate or composite graph\n  if ( ! $is_aggregate && ! isset($_GET['g']) )\n     print '<input title=\"Timeshift Overlay\" type=\"checkbox\" id=\"timeshift_overlay\" onclick=\"showTimeshiftOverlay(this.checked)\"/><label class=\"show_timeshift_text\" for=\"timeshift_overlay\">Timeshift Overlay</label><br />';\n  print \"</div>\";\n} // end of if ( ! isset($_REQUEST['mobile'] )  ) {\n\nif (isset($_GET['embed'])) {\n  print \"<div style='height:10px;'/>\";\n}\n\n\nforeach ( $conf['time_ranges'] as $key => $value ) {\n\n  # Skip job \n  if ( $value == \"job\" )\n    continue;\n\n  print '<div class=\"img_view\">';\n  \n  if ( ! isset($_REQUEST['mobile']) ) {\n\n  print '<span style=\"padding-left: 4em; padding-right: 4em; text-weight: bold;\">' . $key . '</span>';\n\n  // If this is for mobile hide some of the options\n  \n    // Check if it's an aggregate graph\n    if ( $is_aggregate  ) {\n      print '<button class=\"cupid-green\" title=\"Metric Actions - Add to View, etc\" onclick=\"metricActionsAggregateGraph(\\'' . $query_string . '\\'); return false;\">+</button>';\n    }\n  \n    print ' <button title=\"Export to CSV\" class=\"cupid-green\" onclick=\"window.location=\\'./graph.php?r=' . $key . $query_string . '&amp;csv=1\\';return false\">CSV</button> ';\n  \n    print ' <button title=\"Export to JSON\" class=\"cupid-green\" onclick=\"window.location=\\'./graph.php?r=' . $key . $query_string . '&amp;json=1\\';return false;\">JSON</button> ';\n  \n     // Check if it's an aggregate graph\n    if ( $is_aggregate  ) {\n\tprint ' <button title=\"Decompose aggregate graph\" class=\"shiny-blue\" onClick=\"openDecompose(\\'?r=' . $key . $query_string  . '&amp;dg=1\\');return false;\">Decompose</button>';\n    }\n   \n    print ' <button title=\"Inspect Graph\" onClick=\"inspectGraph(\\'r=' . $key . $query_string  . '\\'); return false;\" class=\"shiny-blue\">Inspect</button>';\n\n    $graphId = $GRAPH_BASE_ID . $key;\n\n    print ' <input title=\"Hide/Show Events\" type=\"checkbox\" id=\"' . $SHOW_EVENTS_BASE_ID . $key . '\" onclick=\"showEvents(\\'' . $graphId . '\\', this.checked)\"/><label class=\"show_event_text\" for=\"' . $SHOW_EVENTS_BASE_ID . $key . '\">Hide/Show Events</label>';\n    if ( ! $is_aggregate && ! isset($_GET['g']) )\n      print ' <input title=\"Timeshift Overlay\" type=\"checkbox\" id=\"' . $TIME_SHIFT_BASE_ID . $key . '\" onclick=\"showTimeShift(\\'' . $graphId . '\\', this.checked)\"/><label class=\"show_timeshift_text\" for=\"' . $TIME_SHIFT_BASE_ID . $key . '\">Timeshift</label>';\n\n  } \n\n  print  '<br />';\n\n  // If we are using flot we need to use a div instead of an image reference\n  if ( $conf['graph_engine'] == \"flot\" ) {\n\n    print '<div id=\"placeholder_' . $key . '\" class=\"flotgraph img_view\"></div>';\n    print '<div id=\"placeholder_' . $key . '_legend\" class=\"flotlegend\"></div>';\n\n  } else {\n\n    print '<a href=\"./graph.php?r=' . $key . '&amp;z=' . $xlargesize . $query_string . '\"><img class=\"noborder\" id=\"' . $graphId . '\" style=\"margin-top:5px;\" title=\"Last ' . $key . '\" src=\"graph.php?r=' . $key . '&amp;z=' . $largesize . $query_string . '\"></a>';\n\n  }\n\n  print \"</div>\";\n\n}\n// The div below needs to be added to clear float left since in aggregate view things\n// will start looking goofy\n?>\n<div style=\"clear: left\"></div>\n</form>\n</body>\n</html>\n", "<?php\nsession_start();\n\nif (isset($_GET['date_only'])) {\n  $d = date(\"r\");\n  echo $d;\n  exit(0);\n}\n\nfunction make_size_menu($clustergraphsize, $context) {\n  global $conf;\n\n  $size_menu = '<SELECT NAME=\"z\" OnChange=\"ganglia_form.submit();\">';\n      \n  $size_arr = $conf['graph_sizes_keys'];\n  foreach ($size_arr as $size) {\n    if ($size == \"default\")\n      continue;\n    $size_menu .= \"<OPTION VALUE=\\\"$size\\\"\";\n    if ((isset($clustergraphsize) && ($size === $clustergraphsize)) || \n\t(!isset($clustergraphsize) && ($size === 'small')) || \n\t(!isset($_GET['z']) && ($context == 'host') && ($size == \"medium\"))) {\n      $size_menu .= \" SELECTED\";\n    }\n    $size_menu .= \">$size</OPTION>\\n\";\n  }\n  $size_menu .= \"</SELECT>\\n\";\n  return $size_menu;\n}\n\nfunction make_cols_menu() {\n  global $conf;\n\n  $cols_menu = \"<SELECT NAME=\\\"hc\\\" OnChange=\\\"ganglia_form.submit();\\\">\\n\";\n\n  foreach(range(0,25) as $cols) {\n    $cols_menu .= \"<OPTION VALUE=$cols \";\n    if ($cols == $conf['hostcols'])\n      $cols_menu .= \"SELECTED\";\n    $cols_menu .= \">$cols\\n\";\n  }\n  $cols_menu .= \"</SELECT>\\n\";\n  return $cols_menu;\n}\n\nfunction make_metric_cols_menu() {\n  global $conf;\n\n  $metric_cols_menu = \"<select name=\\\"mc\\\" OnChange=\\\"ganglia_form.submit();\\\">\\n\";\n\n  foreach(range(1,25) as $metric_cols) {\n    $metric_cols_menu .= \"<option value=$metric_cols \";\n    if ($metric_cols == $conf['metriccols'])\n      $metric_cols_menu .= \"selected\";\n    $metric_cols_menu .= \">$metric_cols\\n\";\n  }\n  $metric_cols_menu .= \"</select>\\n\";\n  return $metric_cols_menu;\n}\n\nfunction make_sort_menu($context, $sort) {\n  $sort_menu = \"\";\n  if ($context == \"meta\" or $context == \"cluster\") {\n    $context_sorts[] = \"ascending\";\n    $context_sorts[] = \"descending\";\n    $context_sorts[] = \"by name\";\n\n    // Show sort order options for meta context only:\n\n    if ($context == \"meta\" ) {\n      $context_sorts[] = \"by hosts up\";\n      $context_sorts[] = \"by hosts down\";\n    }\n\n    $sort_menu = \"Sorted&nbsp;&nbsp;\";\n    foreach ($context_sorts as $v) {\n      $url = rawurlencode($v);\n      if ($v == $sort)\n\t$checked = \"checked=\\\"checked\\\"\";\n      else\n\t$checked = \"\";\n      $sort_menu .= \"<input OnChange=\\\"ganglia_submit();\\\" type=\\\"radio\\\" id=\\\"radio-\" .str_replace(\" \", \"_\", $v) . \"\\\" name=\\\"s\\\" value=\\\"$v\\\" $checked/><label for=\\\"radio-\" . str_replace(\" \", \"_\", $v) . \"\\\">$v</label>\";\n    }\n  }\n  return $sort_menu;\n}\n\nfunction make_range_menu($physical, $jobrange, $cs, $ce, $range) {\n  global $conf;\n\n  $range_menu = \"\";\n  if (!$physical) {\n    $context_ranges = array_keys($conf['time_ranges']);\n    if ($jobrange)\n      $context_ranges[] = \"job\";\n    if ($cs or $ce)\n      $context_ranges[] = \"custom\";\n\n    $range_menu = \"Last&nbsp;&nbsp;\";\n    foreach ($context_ranges as $v) {\n      $url = rawurlencode($v);\n      if ($v == $range)\n\t$checked = \"checked=\\\"checked\\\"\";\n      else\n\t$checked = \"\";\n      $range_menu .= \"<input OnChange=\\\"ganglia_form.submit();\\\" type=\\\"radio\\\" id=\\\"range-$v\\\" name=\\\"r\\\" value=\\\"$v\\\" $checked/><label for=\\\"range-$v\\\">$v</label>\";\n    }\n  }\n  return $range_menu;\n}\n\nfunction make_alt_view($context, $clustername, $hostname, $get_metric_string) {\n  global $conf;\n\n  $cluster_url = rawurlencode($clustername);\n  $node_url = rawurlencode($hostname);\n\n  $alt_view = \"\";\n\n  if ($context == \"cluster\") {\n    $alt_view = \"<button class=\\\"header_btn\\\" onclick=\\\"window.location='./?p=2&amp;c=$cluster_url';return false;\\\">Physical View</button>\";\n  } elseif ($context == \"physical\") {\n    $alt_view = \"<button class=\\\"header_btn\\\" onclick=\\\"window.location='./?c=$cluster_url';return false;\\\">Full View</button>\";\n  } elseif ($context==\"node\") {\n    $alt_view = \"<button class=\\\"header_btn\\\" onclick=\\\"window.location='./?c=$cluster_url&amp;h=$node_url&amp;$get_metric_string';return false;\\\">Host View</button>\";\n  } elseif ($context==\"host\") {\n    $alt_view = \"<button class=\\\"header_btn\\\" onclick=\\\"window.location='./?p=2&amp;c=$cluster_url&amp;h=$node_url';return false;\\\">Node View</button>\";\n  } elseif ($context == \"views\") {\n    if (checkAccess(GangliaAcl::ALL_VIEWS, GangliaAcl::EDIT, $conf)) {\n      $alt_view = '<button onclick=\"return false\" id=\"create_view_button\">Create View</button>';\n      $alt_view .= '&nbsp;&nbsp;<button onclick=\"return false\" id=\"delete_view_button\">Delete View</button>';\n    }\n  }\n  return $alt_view;\n}\n\nfunction make_node_menu($self,\n\t\t\t$context,\n\t\t\t$grid,\n\t\t\t$parentgrid,\n\t\t\t$parentlink,\n\t\t\t$gridstack_url,\n\t\t\t$clustername,\n\t\t\t$hostname,\n\t\t\t$get_metric_string,\n\t\t\t$showhosts,\n\t\t\t$hosts_up,\n\t\t\t$hosts_down) {\n  global $conf;\n\n  $node_menu = \"\";\n\n  if ($parentgrid) {\n    $node_menu .= \"<b><a href=\\\"$parentlink?gw=back&amp;gs=$gridstack_url&amp;$get_metric_string\\\">\" . \"$parentgrid ${conf['meta_designator']}</a></b> \";\n    $node_menu .= \"<b>&gt;</b>\\n\";\n  }\n\n  # Show grid.\n  if ((($self != \"unspecified\") && !$parentgrid) ||\n      $conf['always_display_grid_view']) {\n    $mygrid = ($self == \"unspecified\") ? \"\" : $self;\n    $node_menu .= \"<b><a href=\\\"./?$get_metric_string\\\">$mygrid ${conf['meta_designator']}</a></b> \";\n    $node_menu .= \"<b>&gt;</b>\\n\";\n  }\n\n  /////////////////////////////////////////////////////////////////////////////\n  // Cluster name has been specified. It comes right after\n  // Grid >\n  /////////////////////////////////////////////////////////////////////////////\n  if ($clustername) {\n    $url = rawurlencode($clustername);\n    $node_menu .= \"<b><a href=\\\"./?c=$url&amp;$get_metric_string\\\">$clustername</a></b> \";\n    $node_menu .= \"<b>&gt;</b>\\n\";\n    $node_menu .= hiddenvar(\"c\", $clustername);\n  } else if ($context == \"decompose_graph\") {\n    $node_menu .= '<input type=\"hidden\" name=\"dg\" value=\"1\">';\n    $node_menu .= \"Decompose Graph\";\n  } else {\n    # No cluster has been specified, so drop in a list\n    $node_menu .= \"<select name=\\\"c\\\" OnChange=\\\"ganglia_form.submit();\\\">\\n\";\n    $node_menu .= \"<option value=\\\"\\\">--Choose a Source\\n\";\n    ksort($grid);\n    foreach ($grid as $k => $v) {\n      if ($k == $self) continue;\n      if (isset($v['GRID']) and $v['GRID']) {\n        $url = $v['AUTHORITY'];\n        $node_menu .=\"<option value=\\\"$url\\\">$k ${conf['meta_designator']}\\n\";\n      } else {\n        $url = rawurlencode($k);\n        $node_menu .=\"<option value=\\\"$url\\\">$k\\n\";\n      }\n    }\n    $node_menu .= \"</select>\\n\";\n  }\n\n  /////////////////////////////////////////////////////////////////////////////\n  // We are in the cluster view pop up a list box of nodes\n  /////////////////////////////////////////////////////////////////////////////\n  if ($clustername && !$hostname) {\n    # Drop in a host list if we have hosts\n    if (!$showhosts) {\n      $node_menu .= \"[Summary Only]\";\n    } elseif (is_array($hosts_up) || is_array($hosts_down)) {\n      $node_menu .= \"<select name=\\\"h\\\" OnChange=\\\"ganglia_form.submit();\\\">\";\n      $node_menu .= \"<option value=\\\"\\\">--Choose a Node</option>\";\n\n      if (is_array($hosts_up)) {\n        uksort($hosts_up, \"strnatcmp\");\n        foreach ($hosts_up as $k=> $v) {\n          $url = rawurlencode($k);\n          $node_menu .= \"<option value=\\\"$url\\\">$k\\n\";\n        }\n      }\n\n      if (is_array($hosts_down)) {\n        uksort($hosts_down, \"strnatcmp\");\n        foreach ($hosts_down as $k=> $v) {\n          $url = rawurlencode($k);\n          $node_menu .= \"<option value=\\\"$url\\\">$k\\n\";\n        }\n      }\n      $node_menu .= \"</select>\\n\";\n    } else {\n      $node_menu .= \"<b>No Hosts</b>\\n\";\n    }\n  } else {\n    $node_menu .= \"<b>$hostname</b>\\n\";\n    $node_menu .= hiddenvar(\"h\", $hostname);\n  }\n  return $node_menu;\n}\n\n# RFM - These definitions are here to eliminate \"undefined variable\"\n# error messages in ssl_error_log.\n!isset($initgrid) and $initgrid = 0;\n!isset($metricname) and $metricname = \"\";\n!isset($context_metrics) and $context_metrics = \"\";\n\nif ($context == \"control\" && $controlroom < 0)\n  $header = \"header-nobanner\";\nelse\n  $header = \"header\";\n\n#\n# sacerdoti: beginning of Grid tree state handling\n#\n$me = $self . \"@\";\narray_key_exists($self, $grid) and $me = $me . $grid[$self]['AUTHORITY'];\nif ($initgrid)\n   {\n      $gridstack = array();\n      $gridstack[] = $me;\n   }\nelse if ($gridwalk==\"fwd\")\n   {\n      # push our info on gridstack, format is \"name@url>name2@url\".\n      if (end($gridstack) != $me)\n         {\n            $gridstack[] = $me;\n         }\n   }\nelse if ($gridwalk==\"back\")\n   {\n      # pop a single grid off stack.\n      if (end($gridstack) != $me)\n         {\n            array_pop($gridstack);\n         }\n   }\n$gridstack_str = join(\">\", $gridstack);\n$gridstack_url = rawurlencode($gridstack_str);\n\nif (strstr($clustername, \"http://\")) {\n   header(\"Location: $clustername?gw=fwd&amp;gs=$gridstack_url\");\n}\n\nif ($initgrid or $gridwalk)\n   {\n      # Use cookie so we dont have to pass gridstack around within this site.\n      # Cookie values are automatically urlencoded. Expires in a day.\n      if ( !isset($_COOKIE[\"gs\"]) or $_COOKIE[\"gs\"] != $gridstack_str )\n            setcookie(\"gs\", $gridstack_str, time() + 86400);\n   }\n\n# Invariant: back pointer is second-to-last element of gridstack. Grid stack\n# never has duplicate entries.\n# RFM - The original line caused an error when count($gridstack) = 1. This\n# should fix that.\n$parentgrid = $parentlink = NULL;\nif(count($gridstack) > 1) {\n  list($parentgrid, $parentlink) = explode(\"@\", $gridstack[count($gridstack)-2]);\n}\n\n$tpl = new Dwoo_Template_File( template(\"$header.tpl\") );\n$data = new Dwoo_Data();\n\n// Server offset used in generating pretty dates and times when zooming\n$data->assign(\"server_utc_offset\", date('Z'));\n//\n$data->assign(\"page_title\", $title);\n$data->assign(\"refresh\", $conf['default_refresh']);\n\n# Templated Logo image\n$data->assign(\"images\",\"./templates/${conf['template_name']}/images\");\n\n$data->assign( \"date\", date(\"r\"));\n\n# The page to go to when \"Get Fresh Data\" is pressed.\nif (isset($page))\n  $data->assign(\"page\", $page);\nelse\n  $data->assign(\"page\",\"./\");\n\n#\n# Used when making graphs via graph.php. Included in most URLs\n#\n$sort_url = rawurlencode($sort);\n\n$get_metric_string = \"m=$metricname&amp;r=$range&amp;s=$sort_url&amp;hc=${conf['hostcols']}&amp;mc=${conf['metriccols']}\";\nif ($jobrange and $jobstart)\n    $get_metric_string .= \"&amp;jr=$jobrange&amp;js=$jobstart\";\nif ($cs)\n    $get_metric_string .= \"&amp;cs=\" . rawurlencode($cs);\nif ($ce)\n    $get_metric_string .= \"&amp;ce=\" . rawurlencode($ce);\n\n$start_timestamp = null;\n$end_timestamp = null;\nif ($cs) {\n    if (! is_numeric($cs)) {\n        $start_timestamp = strtotime($cs);\n    } else {\n        $start_timestamp = $cs;\n    }\n\n    if ($ce) {\n        if (! is_numeric($ce)) {\n            $end_timestamp = strtotime($ce);\n        } else {\n            $end_timestamp = $ce;\n        }\n    } else {\n        $end_timestamp = $start_timestamp - $conf['time_ranges'][$range];\n    }\n} else {\n    $end_timestamp = time();\n    $start_timestamp = $end_timestamp - $conf['time_ranges'][$range];\n}\n\n$data->assign(\"start_timestamp\", $start_timestamp);\n$data->assign(\"end_timestamp\", $end_timestamp);\n\n# Make some information available to templates.\n$data->assign(\"cluster_url\", $cluster_url);\n\n$alt_view = make_alt_view($context, \n\t\t\t  $clustername, \n\t\t\t  $hostname, \n\t\t\t  $get_metric_string);\n$data->assign(\"alt_view\", $alt_view);\n\n# Build the node_menu\n$node_menu = \"\";\nif (($context != 'views') && ($context != 'compare_hosts')) {\n  $node_menu = make_node_menu($self,\n\t\t\t      $context,\n\t\t\t      $grid,\n\t\t\t      $parentgrid,\n\t\t\t      $parentlink,\n\t\t\t      $gridstack_url,\n\t\t\t      $clustername,\n\t\t\t      $hostname,\n\t\t\t      $get_metric_string,\n\t\t\t      $showhosts,\n\t\t\t      $hosts_up,\n\t\t\t      $hosts_down);\n  # Save other CGI variables\n  if ($physical)\n    $node_menu .= hiddenvar(\"p\", $physical);\n  $node_menu .= hiddenvar(\"cr\", $controlroom);\n  $node_menu .= hiddenvar(\"js\", $jobstart);\n  $node_menu .= hiddenvar(\"jr\", $jobrange);\n}\n$data->assign(\"node_menu\", $node_menu);\n\n//////////////////// Build the metric menu ////////////////////////////////////\n\nif (count($metrics)) {\n  foreach ($metrics as $firsthost => $bar) {\n      foreach ($metrics[$firsthost] as $m => $foo)\n        $context_metrics[$m] = $m;\n  }\n  foreach ($reports as $r => $foo)\n    $context_metrics[] = $r;\n}\n\n#\n# If there are graphs present, show ranges.\n#\n$range_menu = make_range_menu($physical, $jobrange, $cs, $ce, $range);\n$data->assign(\"range_menu\", $range_menu);\n\n#\n# Only compute metric-picker options if we have some, and are in cluster context.\n#\nif (is_array($context_metrics) and $context == \"cluster\") {\n  $picker_metrics = array();\n\n  # Find all the optional reports\n  if ($handle = opendir($conf['gweb_root'] . '/graph.d')) {\n\n    // If we are using RRDtool reports can be json or PHP suffixes\n    if ( $conf['graph_engine'] == \"rrdtool\" )\n      $report_suffix = \"php|json\";\n    else\n      $report_suffix = \"json\";\n\n    while (false !== ($file = readdir($handle))) {\n      if ( preg_match(\"/(.*)(_report)\\.(\" . $report_suffix .\")/\", $file, $out) ) {\n        if ( ! in_array($out[1] . \"_report\", $context_metrics) )\n          $context_metrics[] = $out[1] . \"_report\";\n      }\n    }\n\n    closedir($handle);\n  }\n\n  sort($context_metrics);\n\n  foreach ($context_metrics as $key) {\n    $url = rawurlencode($key);\n    $picker_metrics[] = \"<option value=\\\"$url\\\">$key</option>\";\n  }\n\n  $data->assign(\"picker_metrics\", join(\"\", $picker_metrics));\n  $data->assign(\"is_metrics_picker_disabled\", \"\");  \n} else {\n  // We have to disable the sort_menu if we are not in the cluster context\n  $data->assign(\"is_metrics_picker_disabled\", '$(\"#sort_menu\").toggle(); ');\n  $data->assign(\"picker_metrics\", \"\" );\n}\n\n#\n# Show sort order if there is more than one physical machine present.\n#\n$sort_menu = make_sort_menu($context, $sort);\n$data->assign(\"sort_menu\", $sort_menu );\n   \nif ($context == \"physical\" or $context == \"cluster\" or $context == 'host') {\n  $cols_menu = make_cols_menu();\n  $size_menu = make_size_menu($clustergraphsize, $context);\n}\n\nif ($context == \"host\") {\n  $metric_cols_menu = make_metric_cols_menu();\n}\n\n$custom_time = \"\";\n\nif ( in_array($context , array (\"meta\", \"cluster\", \"host\", \"views\", \"decompose_graph\", \"compare_hosts\") ) ) {\n   $examples = \"Feb 27 2007 00:00, 2/27/2007, 27.2.2007, now -1 week,\"\n      . \" -2 days, start + 1 hour, etc.\";\n   $custom_time = \"or <span class=\\\"nobr\\\">from <input type=\\\"TEXT\\\" title=\\\"$examples\\\" NAME=\\\"cs\\\" ID=\\\"datepicker-cs\\\" SIZE=\\\"17\\\"\";\n   if ($cs)\n      $custom_time .= \" value=\\\"$cs\\\"\";\n   $custom_time .= \"> to <input type=\\\"TEXT\\\" title=\\\"$examples\\\" name=\\\"ce\\\" ID=\\\"datepicker-ce\\\" SIZE=\\\"17\\\"\";\n   if ($ce)\n      $custom_time .= \" value=\\\"$ce\\\"\";\n   $custom_time .= \"> <input type=\\\"submit\\\" value=\\\"Go\\\">\\n\";\n   $custom_time .= \"<input type=\\\"button\\\" value=\\\"Clear\\\" onclick=\\\"ganglia_submit(1)\\\"></span>\\n\";\n#      $custom_time .= $calendar;\n   $data->assign(\"custom_time\", $custom_time);\n\n#      $tpl->assign(\"custom_time_head\", $calendar_head);\n   $data->assign(\"custom_time_head\", \"\");\n} else {\n   $data->assign(\"custom_time_head\", \"\");\n}\n \n$data->assign(\"custom_time\", $custom_time);\n\n/////////////////////////////////////////////////////////////////////////\n// Additional filter to add after the list of nodes. Only useful in\n// cluster_view\n/////////////////////////////////////////////////////////////////////////\nif ( $context == \"cluster\" ) {\n  if ( isset($user['host_regex']) && $user['host_regex'] != \"\" )\n    $set_host_regex_value=\"value='\" . $user['host_regex'] . \"'\";\n  else\n    $set_host_regex_value=\"\";\n\n  // In some clusters you may have thousands of hosts which may load\n  // for a long time. For those cases we have the ability to display\n  // only the max amount of graphs and put place holders for the rest ie.\n  // it will say only print host name without an image\n  $max_graphs_options = array(1000,500,200,100,50,25,20,15,10);\n\n  if ( isset($user['max_graphs']) && is_numeric($user['max_graphs']) )\n    $max_graphs = $user['max_graphs'];\n  else\n    $max_graphs = $conf['max_graphs'];\n  \n  $max_graphs_values = \"<option value=0>all</option>\";\n  foreach ( $max_graphs_options as $key => $value ) {\n      if ( $max_graphs == $value )\n$max_graphs_values .= \"<option selected>\" . $value . \"</option>\";\n      else\n$max_graphs_values .= \"<option>\" . $value . \"</option>\";\n\n  }\n\n  $data->assign(\"additional_filter_options\", 'Show only nodes matching <input name=host_regex ' .$set_host_regex_value . '>'\n   . '<input class=\"header_btn\" type=\"SUBMIT\" VALUE=\"Filter\">'\n   . '&nbsp;<span class=\"nobr\">Max graphs to show <select onChange=\"ganglia_submit();\" name=\"max_graphs\">' . $max_graphs_values . '</select></span>'\n    );\n} else\n  $data->assign(\"additional_filter_options\", '');\n\nif($conf['auth_system'] == 'enabled') {\n  $data->assign('auth_system_enabled', true);\n  $username = sanitize( GangliaAuth::getInstance()->getUser() );\n  $data->assign('username', $username);\n} else {\n  $data->assign('auth_system_enabled', false);\n  $data->assign('username', null);\n}\n\n\nif ( $conf['overlay_events'] == true )\n  $data->assign('overlay_events', true);\n\n$data->assign('selected_tab', htmlspecialchars($user['selected_tab']) );\n$data->assign('view_name', $user['viewname']);\n\n$additional_buttons = \"\";\nif ($context == 'views' || $context == 'decompose_graph' || $context == 'host') {\n  $additional_buttons = '<input title=\"Hide/Show Events\" type=\"checkbox\" id=\"show_all_events\" onclick=\"showAllEvents(this.checked)\"/><label for=\"show_all_events\">Hide/Show Events</label>';\n}\n$data->assign('additional_buttons', $additional_buttons);\n\n# Make sure that no data is cached..\nheader (\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\"); # Date in the past\nheader (\"Last-Modified: \" . gmdate(\"D, d M Y H:i:s\") . \" GMT\"); # always modified\nheader (\"Cache-Control: no-cache, must-revalidate\"); # HTTP/1.1\nheader (\"Pragma: no-cache\"); # HTTP/1.0\n\nif (file_exists(\"./templates/${conf['template_name']}/user_header.tpl\"))\n  $data->assign('user_header', \"1\");\n\n$dwoo->output($tpl, $data);\n\n?>\n", "<?php\ninclude_once \"./eval_conf.php\";\ninclude_once(\"./functions.php\");\ninclude_once \"./get_context.php\";\ninclude_once \"./ganglia.php\";\ninclude_once \"./get_ganglia.php\";\n?>\n<?php\n///////////////////////////////////////////////////////////////////////////////\n// Generating mobile view\n///////////////////////////////////////////////////////////////////////////////\nif ( isset($_GET['view_name'])) {\n?>  \n  <div data-role=\"page\" class=\"ganglia-mobile\" id=\"view-home\">\n    <div data-role=\"header\">\n      <a href=\"#\" class=\"ui-btn-left\" data-icon=\"arrow-l\" onclick=\"history.back(); return false\">Back</a>\n      <h1>View <?php print htmlspecialchars($_GET['view_name']); ?></h1>\n      <a href=\"#mobile-home\">Home</a>\n      <div data-role=\"navbar\">\n\t<ul>\n  <?php\n\n  $view_name = $_GET['view_name'];\n  $available_views = get_available_views();\n  \n  // Header bar support up to 5 items. 5+ items will be shown in multiple\n  // rows. Thus we'll limit to first 5 time ranges\n  $my_ranges = array_keys( $conf['time_ranges'] );     \n  for ( $i = 0 ; $i < 5 ; $i++ ) {\n     $context_ranges[] = $my_ranges[$i]; \n  }\n\n  $range_menu = \"\";\n  $range = $_GET['r'];\n\n  foreach ($context_ranges as $v) {\n     $url=rawurlencode($v);\n     if ($v == $range) {\n      $checked = \"class=\\\"ui-btn-active\\\"\";\n      $range_menu .= \"<li><a $checked href='#' onclick='return false;'>$v</a></li>\";\n    } else {\n      $range_menu .= \"<li><a href='mobile_helper.php?view_name=\" . rawurlencode($_GET['view_name']) . \"&r=\" . $v . \"&cs=&ce='>$v</a></li>\";\n    }\n\n  }\n    print $range_menu;\n  ?>\n\t  </ul>\n      </div><!-- /navbar -->\n    </div><!-- /header -->\n  \n    <div data-role=\"content\">\t\n  <?php\n\n    // Let's find the view definition\n    foreach ( $available_views as $view_id => $view ) {\n  \n     if ( $view['view_name'] == $view_name ) {\n  \n      $view_elements = get_view_graph_elements($view);\n\n      $range_args = \"\";\n      if ( isset($_GET['r']) && $_GET['r'] != \"\" ) \n\t    $range_args .= \"&r=\" . rawurlencode($_GET['r']);\n      if ( isset($_GET['cs']) && isset($_GET['ce']) ) \n\t    $range_args .= \"&cs=\" . rawurlencode($_GET['cs']) . \"&ce=\" . rawurlencode($_GET['ce']);\n\n      if ( count($view_elements) != 0 ) {\n\tforeach ( $view_elements as $id => $element ) {\n\t  print \"\n\t  <A HREF=\\\"./graph_all_periods.php?mobile=1&\" . $element['graph_args'] .\"&z=mobile\\\">\n\t  <IMG ALT=\\\"\" . $element['hostname'] . \" - \" . $element['name'] . \"\\\" BORDER=0 SRC=\\\"./graph.php?\" . $element['graph_args'] . \"&z=mobile\" . $range_args .  \"\\\"></A>\";\n\t}\n      } else {\n\tprint \"No graphs defined for this view. Please add some\";\n      }\n\t\n\t\n  \n     }  // end of if ( $view['view_name'] == $view_name\n    } // end of foreach ( $views as $view_id \n\n  \n    print \"</div><!-- /content -->\n    </div> <!-- /page -->\";\n} // end of if ( isset($_GET['view_name']))\n///////////////////////////////////////////////////////////////////////////////\n// Generate cluster summary view\n///////////////////////////////////////////////////////////////////////////////\nif ( isset($_GET['show_cluster_metrics'])) {\n  $clustername = $_GET['c'];\n?>  \n  <div data-role=\"page\" class=\"ganglia-mobile\" id=\"viewhost-<?php print $hostname; ?>\">\n    <div data-role=\"header\" data-position=\"fixed\">\n      <a href=\"#\" class=\"ui-btn-left\" data-icon=\"arrow-l\" onclick=\"history.back(); return false\">Back</a>\n      <h3>Cluster <?php print htmlspecialchars($clustername); ?></h3>\n      <a href=\"#mobile-home\">Home</a>\n        <div data-role=\"navbar\">\n\t<ul>\n  <?php\n\t// Header bar support up to 5 items. 5+ items will be shown in multiple\n\t// rows. Thus we'll limit to first 5 time ranges\n\t$my_ranges = array_keys( $conf['time_ranges'] );     \n\tfor ( $i = 0 ; $i < 5 ; $i++ ) {\n\t   $context_ranges[] = $my_ranges[$i]; \n\t}\n      \n\t$range_menu = \"\";\n\t$range = $_GET['r'];\n      \n\tforeach ($context_ranges as $v) {\n\t   $url=rawurlencode($v);\n\t   if ($v == $range) {\n\t     $checked = \"class=\\\"ui-btn-active\\\"\";\n      \t     $range_menu .= \"<li><a $checked href='#'>$v</a></li>\";\n\t  } else {\n      \t     $range_menu .= \"<li><a href='mobile_helper.php?show_cluster_metrics=1&c=\" . rawurlencode($clustername) . \"&r=\" . $v . \"&cs=&ce='>$v</a></li>\";\n\t  }\n\t}\n\t  print $range_menu;\n    ?>\n\t</ul>\n      </div><!-- /navbar -->\n    </div><!-- /header -->\n  \n    <div data-role=\"content\">\n<?php\n    $graph_args = \"c=\".rawurlencode($clustername).\"&r=\".rawurlencode($range);\n    \n    ///////////////////////////////////////////////////////////////////////////\n    // Let's find out what optional reports are included\n    // First we find out what the default (site-wide) reports are then look\n    // for host specific included or excluded reports\n    ///////////////////////////////////////////////////////////////////////////\n    $default_reports = array(\"included_reports\" => array(), \"excluded_reports\" => array());\n    if ( is_file($conf['conf_dir'] . \"/default.json\") ) {\n      $default_reports = array_merge($default_reports,json_decode(file_get_contents($conf['conf_dir'] . \"/default.json\"), TRUE));\n    }\n    \n    $cluster_file = $conf['conf_dir'] . \"/cluster_\" . preg_replace('/[^a-zA-Z0-9_-]/', '', $clustername) . \".json\";\n    if ( pathinfo( $cluster_file, PATHINFO_DIRNAME ) != $conf['conf_dir'] ) {\n      die('Invalid path detected');\n    }\n    $override_reports = array(\"included_reports\" => array(), \"excluded_reports\" => array());\n    if ( is_file($cluster_file) ) {\n      $override_reports = array_merge($override_reports, json_decode(file_get_contents($cluster_file), TRUE));\n    }\n    \n    # Merge arrays\n    $reports[\"included_reports\"] = array_merge( $default_reports[\"included_reports\"] , $override_reports[\"included_reports\"]);\n    $reports[\"excluded_reports\"] = array_merge($default_reports[\"excluded_reports\"] , $override_reports[\"excluded_reports\"]);\n    \n    # Remove duplicates\n    $reports[\"included_reports\"] = array_unique($reports[\"included_reports\"]);\n    $reports[\"excluded_reports\"] = array_unique($reports[\"excluded_reports\"]);\n    \n    foreach ( $reports[\"included_reports\"] as $index => $report_name ) {\n      if ( ! in_array( $report_name, $reports[\"excluded_reports\"] ) ) {\n\tprint \"<a name=metric_\" . $report_name . \">\n\t<A HREF=\\\"./graph_all_periods.php?mobile=1&$graph_args&amp;g=\" . $report_name . \"&amp;z=mobile&amp;c=\".rawurlencode($clustername).\"\\\">\n\t<IMG BORDER=0 ALT=\\\"\".rawurlencode($clustername).\"\\\" SRC=\\\"./graph.php?$graph_args&amp;g=\" . $report_name .\"&amp;z=mobile&amp;c=\".rawurlencode($clustername).\"\\\"></A>\n\t\";\n      }\n\n    }\n\n?>\n      </div><!-- /content -->\n    </div> <!-- /page -->\";\n<?php\n}\n///////////////////////////////////////////////////////////////////////////////\n// Generate host view\n///////////////////////////////////////////////////////////////////////////////\nif ( isset($_GET['show_host_metrics'])) {\n  $hostname = $_GET['h'];\n  $clustername = $_GET['c'];\n?>\n  <div data-role=\"page\" class=\"ganglia-mobile\" id=\"viewhost-<?php print htmlspecialchars($hostname); ?>\">\n    <div data-role=\"header\" data-position=\"fixed\">\n      <a href=\"#\" class=\"ui-btn-left\" data-icon=\"arrow-l\" onclick=\"history.back(); return false\">Back</a>\n      <h3>Host <?php print htmlspecialchars($hostname); ?></h3>\n      <a href=\"#mobile-home\">Home</a>\n        <div data-role=\"navbar\">\n\t<ul>\n  <?php\n\t// Header bar support up to 5 items. 5+ items will be shown in multiple\n\t// rows. Thus we'll limit to first 5 time ranges\n\t$my_ranges = array_keys( $conf['time_ranges'] );     \n\tfor ( $i = 0 ; $i < 5 ; $i++ ) {\n\t   $context_ranges[] = $my_ranges[$i]; \n\t}\n      \n\t$range_menu = \"\";\n\t$range = $_GET['r'];\n      \n\tforeach ($context_ranges as $v) {\n\t   $url=rawurlencode($v);\n\t   if ($v == $range) {\n\t     $checked = \"class=\\\"ui-btn-active\\\"\";\n      \t     $range_menu .= \"<li><a $checked href='#'>$v</a></li>\";\n\t  } else {\n      \t     $range_menu .= \"<li><a href='mobile_helper.php?show_host_metrics=1&h=\" . rawurlencode($hostname) . \"&c=\" . rawurlencode($clustername) . \"&r=\" . $v . \"&cs=&ce='>$v</a></li>\";\n\t  }\n\t}\n\t  print $range_menu;\n    ?>\n\t</ul>\n      </div><!-- /navbar -->\n    </div><!-- /header -->\n  \n    <div data-role=\"content\">\n<?php\n    $graph_args = \"h=\".rawurlencode($hostname).\"&c=\".rawurlencode($clustername).\"&r=\".rawurlencode($range);\n    \n    ///////////////////////////////////////////////////////////////////////////\n    // Let's find out what optional reports are included\n    // First we find out what the default (site-wide) reports are then look\n    // for host specific included or excluded reports\n    ///////////////////////////////////////////////////////////////////////////\n    $default_reports = array(\"included_reports\" => array(), \"excluded_reports\" => array());\n    if ( is_file($conf['conf_dir'] . \"/default.json\") ) {\n      $default_reports = array_merge($default_reports,json_decode(file_get_contents($conf['conf_dir'] . \"/default.json\"), TRUE));\n    }\n    \n    $host_file = $conf['conf_dir'] . \"/host_\" . preg_replace('/[^a-zA-Z0-9_-]/', '', $hostname) . \".json\";\n    if ( pathinfo( $host_file, PATHINFO_DIRNAME ) != $conf['conf_dir'] ) {\n      die('Invalid path detected');\n    }\n    $override_reports = array(\"included_reports\" => array(), \"excluded_reports\" => array());\n    if ( is_file($host_file) ) {\n      $override_reports = array_merge($override_reports, json_decode(file_get_contents($host_file), TRUE));\n    }\n    \n    # Merge arrays\n    $reports[\"included_reports\"] = array_merge( $default_reports[\"included_reports\"] , $override_reports[\"included_reports\"]);\n    $reports[\"excluded_reports\"] = array_merge($default_reports[\"excluded_reports\"] , $override_reports[\"excluded_reports\"]);\n    \n    # Remove duplicates\n    $reports[\"included_reports\"] = array_unique($reports[\"included_reports\"]);\n    $reports[\"excluded_reports\"] = array_unique($reports[\"excluded_reports\"]);\n    \n    foreach ( $reports[\"included_reports\"] as $index => $report_name ) {\n    \n      if ( ! in_array( $report_name, $reports[\"excluded_reports\"] ) ) {\n\tprint \"\n\t<A HREF=\\\"./graph_all_periods.php?mobile=1&$graph_args&amp;g=\" . $report_name . \"&amp;z=large\\\">\n\t<IMG BORDER=0 ALT=\\\"\".rawurlencode($clustername).\"\\\" SRC=\\\"./graph.php?$graph_args&amp;g=\" . $report_name .\"&amp;z=mobile\\\"></A>\";\n      }\n    }\n    ?>  \n<?php\n\n$g_metrics_group = array();\n$groups = array();\n\n$size = \"mobile\";\n\nforeach ($metrics as $metric_name => $metric_attributes) {\n\n  if ($metric_attributes['TYPE'] == \"string\" or $metric_attributes['TYPE']==\"timestamp\" or\n      (isset($always_timestamp[$metric_name]) and $always_timestamp[$metric_name])) {\n\t$s_metrics[$metric_name] = $v;\n  } elseif ($metric_attributes['SLOPE'] == \"zero\" or (isset($always_constant[$metric_name]) and $always_constant[$metric_name])) {\n\t$c_metrics[$metric_name] = $v;\n  } else if (isset($reports[$metric_name]) and $reports[$metric])\n    continue;\n  else {\n    $metric_graphargs = \"c=\".rawurlencode($clustername).\"&amp;h=\".rawurlencode($hostname).\"&amp;v=\".rawurlencode($metric_attributes[VAL])\n      .\"&amp;m=$metric_name&amp;r=\".rawurlencode($range).\"&amp;z=$size&amp;jr=$jobrange\"\n      .\"&amp;js=$jobstart&amp;st=$cluster[LOCALTIME]\";\n    if ($cs)\n       $metric_graphargs .= \"&amp;cs=\" . rawurlencode($cs);\n    if ($ce)\n       $metric_graphargs .= \"&amp;ce=\" . rawurlencode($ce);\n    # Adding units to graph 2003 by Jason Smith <smithj4@bnl.gov>.\n    if ($metric_attributes['UNITS']) {\n       $encodeUnits = rawurlencode($metric_attributes['UNITS']);\n       $metric_graphargs .= \"&amp;vl=$encodeUnits\";\n    }\n    if (isset($metric_attributes['TITLE'])) {\n       $title = $metric_attributes['TITLE'];\n       $metric_graphargs .= \"&amp;ti=$title\";\n    }\n    $g_metrics[$metric_name]['graph'] = $graph_args . \"&\" . $metric_graphargs;\n    $g_metrics[$metric_name]['description'] = isset($metric_attributes['DESC']) ? $metric_attributes['DESC'] : '';\n\n    if ( !isset($metrics[$metric_name]['GROUP']) )\n      $group_name = \"no group\";\n    else\n      $group_name = $metrics[$metric_name]['GROUP'][0];\n\n    // Make an array of groups\n    if ( ! in_array($group_name, $groups) ) {\n      $groups[] = $group_name;\n    }\n    \n    $g_metrics_group[$group_name][] = $metric_name;\n }\n}\n\nksort($g_metrics_group);\nforeach ( $g_metrics_group as $metric_group_name => $metric_group_members ) {\n?>\n      <div data-role=\"collapsible\" data-collapsed=\"true\">\n\t<h3><?php print $metric_group_name . \" (\" . sizeof($metric_group_members) . \")\"; ?></h3>\n<?php\n      foreach ( $metric_group_members as $index => $metric_name ) {\n\tprint \"\n\t<A HREF=\\\"./graph_all_periods.php?mobile=1&\" . $g_metrics[$metric_name]['graph'] .  \"\\\">\n\t<IMG BORDER=0 ALT=\\\"\".htmlspecialchars($clustername).\"\\\" SRC=\\\"./graph.php?\" . $g_metrics[$metric_name]['graph'] . \"\\\"></A>\";\n      }\n?>\n      </div> <!-- /collapsible -->\n<?php\n} // end of foreach ( $g_metrics_group\n?>\n    </div><!-- /content -->\n  </div><!-- /page -->\n<?php\n}\n?>  \n", "<?php\n$months_ahead = array(0,1,2,3,6,9,12,18,24);\n$months_back = array(12,9,6,3,2,1);\nif ( !isset($_REQUEST['trendrange']) )\n  $_REQUEST['trendrange'] = 6;\nif ( !isset($_REQUEST['trendhistory']) )\n  $_REQUEST['trendhistory'] = 6;\n\n$drop_args = array(\"trendrange\", \"trendhistory\");\n\nforeach ( $_REQUEST as $key => $value ) {\n  if ( ! in_array($key, $drop_args) )\n    $graph_args[] = rawurlencode($key) . \"=\" . rawurlencode( str_replace(\"_/graph_php?\", \"\", $value) );\n}\n\n$query_string = preg_replace(\"/(&trendrange=)(\\d+)/\", \"\", $_SERVER['QUERY_STRING'] );\n$query_string = preg_replace(\"/(&trendhistory=)(\\d+)/\", \"\", htmlspecialchars($query_string, ENT_QUOTES) );\n\n\n?>\n<center>\n<div id=\"trend_range_menu\">\n<form id=\"trend_range_form\">\nUse data from last \n<?php\nforeach ( $months_back as $index => $month ) {\n  if (  $_REQUEST['trendhistory'] == $month )\n    $checked = 'checked=\"checked\"';\n  else\n    $checked = \"\";\n?>\n   <input OnChange='drawTrendGraph(\"<?php print $query_string ?>\" + \"&\" + $(\"#trend_range_form\").serialize()); return false;' type=\"radio\" id=\"trendhistory-<?php print $month; ?>\" name=\"trendhistory\" value=\"<?php print $month; ?>\" <?php print $checked; ?>/>\n   <label for=\"trendhistory-<?php print $month; ?>\"><?php print $month; ?></label>\n<?php\n}\n?>\nmonths&nbsp;|&nbsp;Extend trend line \n<?php\n\nif ( !isset($_REQUEST['trendrange']) )\n  $_REQUEST['trendrange'] = 6;\n\nforeach ( $months_ahead as $index => $month ) {\n\n  if (  $_REQUEST['trendrange'] == $month )\n    $checked = 'checked=\"checked\"';\n  else\n    $checked = \"\";\n\n?>\n   <input OnChange='drawTrendGraph(\"<?php print $query_string ?>\" + \"&\" + $(\"#trend_range_form\").serialize()); return false;' type=\"radio\" id=\"range-<?php print $month; ?>\" name=\"trendrange\" value=\"<?php print $month; ?>\" <?php print $checked; ?>/>\n   <label for=\"range-<?php print $month; ?>\"><?php print $month; ?></label>\n<?php\n}\n?>\n months ahead</form></div>\n</center>\n<script type=\"text/javascript\">\n  $(function () {\n    $(\"#trend_range_menu\").buttonset();\n  });\n</script>\n", "<?php\n\ninclude_once(\"./eval_conf.php\");\ninclude_once(\"./functions.php\");\n\nif( ! checkAccess(GangliaAcl::ALL_VIEWS, GangliaAcl::VIEW, $conf) ) {\n  die(\"You do not have access to view views.\");\n}\n\n// Load the metric caching code we use if we need to display graphs\nretrieve_metrics_cache();\n\n$base = isset($_GET['base']) ? rawurlencode($_GET['base']) . \"/\" : \"\";\n?>\n\n<html>\n<head>\n<script type=\"text/javascript\" src=\"<?php print $base; ?>js/jquery-1.8.2.min.js\"></script>\n<script type=\"text/javascript\" src=\"<?php print $base; ?>js/jquery-ui-1.9.1.custom.min.js\"></script>\n<link type=\"text/css\" href=\"css/smoothness/jquery-ui-1.9.1.custom.min.css\" rel=\"stylesheet\"/>\n<link rel=\"stylesheet\" href=\"./styles.css\" type=\"text/css\">\n</head>\n<body>\n  <div>\n\n<?php\n  $available_views = get_available_views();\n  $view_name = $_GET['vn'];\n\n  // Let's find the view definition\n  foreach ($available_views as $view_id => $view) {\n    if ($view['view_name'] == $view_name) {\n      $view_elements = get_view_graph_elements($view);\n      $range_args = \"\";\n      if (isset($_GET['r']) && $_GET['r'] != \"\") \n\t$range_args .= \"&amp;r=\" . rawurlencode($_GET['r']);\n      if (isset($_GET['cs']) && isset($_GET['ce'])) \n\t$range_args .= \"&amp;cs=\" . rawurlencode($_GET['cs']) . \"&amp;ce=\" . rawurlencode($_GET['ce']);\n\n      if (count($view_elements) != 0) {\n\tforeach ($view_elements as $id => $element) {\n\t  $legend = isset($element['hostname']) ? $element['hostname'] : \"Aggregate graph\";\n          $base = isset($_GET['base']) ? rawurlencode($_GET['base']) : '.';\n\t  print \"<a href=\\\"\" . $base . \"/graph_all_periods.php?\" . htmlentities($element['graph_args']) .\"&amp;z=large\\\"><img title=\\\"\" . $legend . \" - \" . $element['name'] . \"\\\" border=0 src=\\\"\" . $base . \"/graph.php?\" . htmlentities($element['graph_args']) . \"&amp;z=small\" . $range_args .  \"\\\" style=\\\"padding:2px;\\\"></a>\";\n\t}\n      } else {\n\tprint \"No graphs defined for this view. Please add some\";\n      }\n    }\n  } \n?>\n  </div>\n</body>\n</html>\n\n", "<?php\ninclude_once(\"./eval_conf.php\");\ninclude_once(\"./functions.php\");\ninclude_once(\"./global.php\");\n\nif (! checkAccess(GangliaAcl::ALL_VIEWS, GangliaAcl::VIEW, $conf))\n  die(\"You do not have access to view views.\");\n\n///////////////////////////////////////////////////////////////////////////////\n// Create new view\n///////////////////////////////////////////////////////////////////////////////\nif (isset($_GET['create_view'])) {\n  if(! checkAccess(GangliaAcl::ALL_VIEWS, GangliaAcl::EDIT, $conf)) {\n    $output = \"You do not have access to edit views.\";\n  } else {\n    // Check whether the view name already exists\n    $view_exists = 0;\n\n    $available_views = get_available_views();\n\n    foreach ($available_views as $view_id => $view) {\n      if ($view['view_name'] == $_GET['view_name']) {\n        $view_exists = 1;\n      }\n    }\n\n    if ($view_exists == 1) {\n      $output = \"<strong>Alert:</strong> View with the name \" .\n                $_GET['view_name'] . \n                \" already exists.\";\n    } else {\n      $empty_view = array (\"view_name\" => $_GET['view_name'],\n                           \"items\" => array());\n      $view_suffix = str_replace(\" \", \"_\", $_GET['view_name']);\n      $view_filename = $conf['views_dir'] . \"/view_\" . preg_replace('/[^a-zA-Z0-9_-]/', '', $view_suffix) . \".json\";\n      if ( pathinfo( $view_filename, PATHINFO_DIRNAME ) != $conf['views_dir'] ) {\n        die('Invalid path detected');\n      }\n      $json = json_encode($empty_view);\n      if (file_put_contents($view_filename, \n                            json_prettyprint($json)) === FALSE) {\n        $output = \"<strong>Alert:</strong>\" .\n                  \" Can't write to file \" . htmlspecialchars($view_filename) .\n                  \" Perhaps permissions are wrong.\";\n      } else {\n        $output = \"View has been created successfully.\";\n      }\n    }\n  }\n?>\n<div class=\"ui-widget\">\n  <div class=\"ui-state-default ui-corner-all\" style=\"padding: 0 .7em;\"> \n    <p><span class=\"ui-icon ui-icon-alert\" style=\"float: left; margin-right: .3em;\"></span> \n    <?php echo $output ?></p>\n  </div>\n</div>\n<?php\n  exit(0);\n} \n\n///////////////////////////////////////////////////////////////////////////////\n// Delete view\n///////////////////////////////////////////////////////////////////////////////\nif (isset($_GET['delete_view'])) {\n  if (! checkAccess(GangliaAcl::ALL_VIEWS, GangliaAcl::EDIT, $conf)) {\n    $output = \"You do not have access to edit views.\";\n  } else {\n    // Check whether the view name already exists\n    $view_exists = 0;\n\n    $available_views = get_available_views();\n\n    foreach ($available_views as $view_id => $view) {\n      if ($view['view_name'] == $_GET['view_name']) {\n        $view_exists = 1;\n      }\n    }\n\n    if ($view_exists != 1) {\n      $output = \"<strong>Alert:</strong> View with the name \" .\n      $_GET['view_name'] . \n      \" does not exist.\";\n    } else {\n      $view_suffix = str_replace(\" \", \"_\", $_GET['view_name']);\n      $view_filename = $conf['views_dir'] . \"/view_\" . preg_replace('/[^a-zA-Z0-9_-]/', '', $view_suffix) . \".json\";\n      if ( pathinfo( $view_filename, PATHINFO_DIRNAME ) != $conf['views_dir'] ) {\n        die('Invalid path detected');\n      }\n      if (unlink($view_filename) === FALSE) {\n        $output = \"<strong>Alert:</strong>\" .\n                  \" Can't remove file $view_filename.\" .\n                  \" Perhaps permissions are wrong.\";\n      } else {\n        $output = \"View has been successfully removed.\";\n      }\n    }\n  }\n} // delete_view\n\n///////////////////////////////////////////////////////////////////////////////\n// Add to view\n///////////////////////////////////////////////////////////////////////////////\nif (isset($_GET['add_to_view'])) {\n  if (! checkAccess(GangliaAcl::ALL_VIEWS, GangliaAcl::EDIT, $conf)) {\n    $output = \"You do not have access to edit views.\";\n  } else {\n    $view_exists = 0;\n    // Check whether the view name already exists\n    $available_views = get_available_views();\n\n    foreach ($available_views as $view_id => $view) {\n      if ($view['view_name'] == $_GET['view_name']) {\n        $view_exists = 1;\n        break;\n      }\n    }\n\n    if ($view_exists == 0) {\n      $output = \"<strong>Alert:</strong> View \" .\n      $_GET['view_name'] . \n      \" does not exist. This should not happen.\";\n    } else {\n      // Read in contents of an existing view\n      $view_filename = $view['file_name'];\n      // Delete the file_name index\n      unset($view['file_name']);\n\n      # Check if we are adding an aggregate graph\n      if (isset($_GET['aggregate'])) {\n\tforeach ( $_GET['mreg'] as $key => $value ) \n\t  $metric_regex_array[] = array(\"regex\" => $value);\n\n\t  foreach ($_GET['hreg'] as $key => $value) \n\t    $host_regex_array[] = array(\"regex\" => $value);\n\n\t  $item_array = array(\"aggregate_graph\" => \"true\", \n                              \"metric_regex\" => $metric_regex_array, \n\t                      \"host_regex\" => $host_regex_array, \n                              \"graph_type\" => stripslashes($_GET['gtype']),\n\t                      \"vertical_label\" => stripslashes($_GET['vl']),\n                              \"title\" => $_GET['title'],\n                        \"glegend\" => $_GET['glegend']);\n\n          if (isset($_GET['x']) && is_numeric($_GET['x'])) {\n            $item_array[\"upper_limit\"] = $_GET['x'];\n          }\n          if ( isset($_GET['n']) && is_numeric($_GET['n'])) {\n            $item_array[\"lower_limit\"] = $_GET['n'];\n          }\n          if ( isset($_GET['c']) ) {\n            $item_array[\"cluster\"] = $_GET['c'];\n          }\n\n          if ( isset($_GET['h']) ) { $item_array['host'] = $_GET['h']; unset($item_array['host_regex']); }\n          if ( isset($_GET['m']) ) { $item_array['metric'] = $_GET['m']; unset($item_array['metric_regex']); }\n          if ( isset($_GET['g']) ) { $item_array['graph'] = $_GET['g']; }\n          if ($item_array['host_regex'] == null) $item_array['host_regex'] = '.*';\n\n          $view['items'][] = $item_array;\n          unset($item_array);\n\n      } else {\n\tif ($_GET['type'] == \"metric\") {\n          $items = array(\"hostname\" => $_GET['host_name'], \n                         \"metric\" => $_GET['metric_name']);\n\t  if (isset($_GET['vertical_label']))\n            $items[\"vertical_label\"] = stripslashes($_GET['vertical_label']);\n\t  if (isset($_GET['title']))\n            $items[\"title\"] = stripslashes($_GET['title']);\n\t  if (isset($_GET['c']))\n            $items[\"cluster\"] = $_GET['c'];\n          if (isset($_GET['warning']) && is_numeric($_GET['warning']))\n            $items[\"warning\"] = $_GET['warning'];\n          if (isset($_GET['critical']) && is_numeric($_GET['critical']))\n            $items[\"critical\"] = $_GET['critical'];\n          \n\t  $view['items'][] = $items;\n\t} else\n\t  $view['items'][] = array(\"hostname\" => $_GET['host_name'], \n                                   \"graph\" => $_GET['metric_name']);\n      }\n\n      $json = json_encode($view);\n\n      if (file_put_contents($view_filename, \n                            json_prettyprint($json)) === FALSE ) {\n        $output = \"<strong>Alert:</strong>\" .\n                  \" Can't write to file $view_filename.\" .\n                  \" Perhaps permissions are wrong.\";\n      } else {\n        $output = \"View has been updated successfully.\";\n      } \n    }  \n  }\n?>\n<div class=\"ui-widget\">\n  <div class=\"ui-state-default ui-corner-all\" style=\"padding: 0 .7em;\"> \n    <p><span class=\"ui-icon ui-icon-alert\" style=\"float: left; margin-right: .3em;\"></span> \n    <?php echo $output ?></p>\n  </div>\n</div>\n<?php\n  exit(0);\n} \n\n$available_views = get_available_views();\n$existing_views = '';\nforeach ($available_views as $view) {\n $v = $view['view_name'];\n $vid = viewId($v);\n $checked = ($_GET['vn'] == $v);\n $existing_views .= '<input type=\"radio\" id=\"' . $vid . '\" onClick=\"selectView(\\'' . $v . '\\'); return false;\"' . ($checked ? \" checked\" : \"\") . '><label style=\"text-align:left;\" class=\"nobr\" for=\"' . $vid . '\">' . $v . '</label>'; \n}\n\nif (isset($_GET['views_menu'])) {\n?>\n<div id=\"views_menu\">\n  <?php echo $existing_views ?>\n</div>\n<script type=\"text/javascript\">$(function(){$(\"#views_menu\").buttonsetv();});</script>\n<?php\n  exit(0);\n}\n\n$tpl = new Dwoo_Template_File( template(\"views_view.tpl\") );\n$data = new Dwoo_Data();\n$data->assign(\"range\",$range);\n\n// Pop up a warning message if there are no available views\n// (Disable temporarily, otherwise we can't create views)\nif (sizeof($available_views) == -1) {\n  $error_msg = '\n    <div class=\"ui-widget\">\n      <div class=\"ui-state-error ui-corner-all\" style=\"padding: 0 .7em;\"> \n        <p><span class=\"ui-icon ui-icon-alert\" \n                 style=\"float: left; margin-right: .3em;\"></span> \n\t   <strong>Alert:</strong> There are no views defined.</p>\n      </div>\n    </div>';\n}\n\n$size = isset($clustergraphsize) ? $clustergraphsize : 'default';\n//set to 'default' to preserve old behavior\n$size = $size == 'medium' ? 'default' : $size; \n\n$additional_host_img_css_classes = \"\";\nif ( isset($conf['zoom_support']) && $conf['zoom_support'] === true )\n    $additional_host_img_css_classes = \"host_${size}_zoomable\";\n\n$data->assign(\"additional_host_img_css_classes\", \n              $additional_host_img_css_classes);\n\n$data->assign(\"existing_views\", $existing_views);\n$data->assign(\"view_name\", $user[\"viewname\"]);\n\n$view_items = NULL;\nforeach ($available_views as $view_id => $view) {\n if ($view['view_name'] == $user[\"viewname\"]) {\n   $view_elements = get_view_graph_elements($view);\n   $view_items = array();\n   if ( count($view_elements) != 0) {\n     $graphargs = \"\";\n     if ($cs)\n       $graphargs .= \"&amp;cs=\" . rawurlencode($cs);\n     if ($ce)\n       $graphargs .= \"&amp;ce=\" . rawurlencode($ce);\n        \n     foreach ($view_elements as $id => $element) {\n       $view_items[] = array (\"legend\" => isset($element['hostname']) ? $element['hostname'] : \"Aggregate graph\",\n                               \"url_args\" => htmlentities($element['graph_args']) . \"&amp;r=\" . $range . $graphargs,\n\n                               \"aggregate_graph\" => isset($element['aggregate_graph']) ? 1 : 0\n        );\n      }\n    }\n    \n    $data->assign(\"number_of_view_items\", sizeof($view_items));\n    break;    \n }  // end of if ( $view['view_name'] == $view_name\n} // end of foreach ( $views as $view_id \n\nif (isset($view_items))\n  $data->assign(\"view_items\", $view_items);\n\n$data->assign('GRAPH_BASE_ID', $GRAPH_BASE_ID);\n$data->assign('SHOW_EVENTS_BASE_ID', $SHOW_EVENTS_BASE_ID);\n \n$dwoo->output($tpl, $data);\n\n?>\n"], "filenames": ["actions.php", "autorotation.php", "compare_hosts.php", "decompose_graph.php", "graph_all_periods.php", "header.php", "mobile_helper.php", "trend_navigation.php", "views.php", "views_view.php"], "buggy_code_start_loc": [17, 130, 59, 26, 56, 532, 17, 13, 13, 35], "buggy_code_end_loc": [49, 131, 65, 30, 156, 533, 306, 63, 44, 83], "fixing_code_start_loc": [17, 130, 59, 26, 56, 532, 17, 13, 13, 35], "fixing_code_end_loc": [49, 131, 65, 30, 156, 533, 312, 63, 44, 89], "type": "CWE-79", "message": "Multiple cross-site scripting (XSS) vulnerabilities in Ganglia Web before 3.5.6 allow remote attackers to inject arbitrary web script or HTML via unspecified vectors.", "other": {"cve": {"id": "CVE-2013-0275", "sourceIdentifier": "secalert@redhat.com", "published": "2013-03-14T03:12:47.400", "lastModified": "2013-03-19T04:00:00.000", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Multiple cross-site scripting (XSS) vulnerabilities in Ganglia Web before 3.5.6 allow remote attackers to inject arbitrary web script or HTML via unspecified vectors."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de ejecuci\u00f3n de secuencias de comandos en sitios cruzados (XSS) en Ganglia Web anterior a v3.5.6 que permite a atacantes remotos inyectar secuencias de comandos web o HTML a trav\u00e9s de vectores no especificados."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ganglia:ganglia-web:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.5.5", "matchCriteriaId": "12374B8B-D6C7-4E5D-B433-F179590AAA90"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ganglia:ganglia-web:2.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "E95DD90F-69C4-4861-BC7E-5B3C11B6827B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ganglia:ganglia-web:2.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "1AAC2B01-943B-47F9-846A-69705B9DC947"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ganglia:ganglia-web:2.1.2:*:*:*:*:*:*:*", "matchCriteriaId": "21788841-C2E8-443B-8A39-429A583689AE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ganglia:ganglia-web:2.1.3:*:*:*:*:*:*:*", "matchCriteriaId": "B4B8F2C7-4526-4EA9-AF86-F46D71C4CD5A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ganglia:ganglia-web:2.1.5:*:*:*:*:*:*:*", "matchCriteriaId": "3A045D9D-4535-4389-8B65-A5F0E7CA2173"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ganglia:ganglia-web:2.1.6:*:*:*:*:*:*:*", "matchCriteriaId": "2AD09224-3B74-4825-91C9-7710E81F480B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ganglia:ganglia-web:2.1.7:*:*:*:*:*:*:*", "matchCriteriaId": "4C285B26-94DC-452A-83D7-A74FB04EB1B1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ganglia:ganglia-web:2.1.8:*:*:*:*:*:*:*", "matchCriteriaId": "2DCAFCD2-E035-457E-BC8C-7E9DAFA9322F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ganglia:ganglia-web:2.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "CF00F439-F811-4784-9D15-43E1899D8A2C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ganglia:ganglia-web:3.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "74DA7C86-7B22-4881-98B8-704F0A701334"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ganglia:ganglia-web:3.3.1:*:*:*:*:*:*:*", "matchCriteriaId": "A03EB5D6-9EF5-416D-A1ED-2BCFD8D25350"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ganglia:ganglia-web:3.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "8EE4F28D-DFCF-4D00-97D8-D62F3A9C1ECE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ganglia:ganglia-web:3.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "483FFF2D-73F8-4006-BE65-A13FA3D032B6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ganglia:ganglia-web:3.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "2FF1EF43-AB84-4E6E-85F8-F04725772249"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ganglia:ganglia-web:3.5.1:*:*:*:*:*:*:*", "matchCriteriaId": "F6A4B180-6142-40A9-AAA1-966F55608D31"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ganglia:ganglia-web:3.5.2:*:*:*:*:*:*:*", "matchCriteriaId": "4B3DB94D-0247-4C03-AB5D-604D8505E37B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ganglia:ganglia-web:3.5.3:*:*:*:*:*:*:*", "matchCriteriaId": "4A5D1106-A204-4494-9FB6-CCB35EC64884"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ganglia:ganglia-web:3.5.4:*:*:*:*:*:*:*", "matchCriteriaId": "D0E95C0F-EEDB-4C6A-82A6-1CD4A237AA95"}]}]}], "references": [{"url": "http://ganglia.info/?p=566", "source": "secalert@redhat.com", "tags": ["Vendor Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2013/02/08/6", "source": "secalert@redhat.com"}, {"url": "http://www.securityfocus.com/bid/58204", "source": "secalert@redhat.com"}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=892823", "source": "secalert@redhat.com"}, {"url": "https://github.com/ganglia/ganglia-web/commit/31d348947419058c43b8dfcd062e2988abd5058e", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/ganglia/ganglia-web/commit/31d348947419058c43b8dfcd062e2988abd5058e"}}