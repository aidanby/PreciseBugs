{"buggy_code": ["{\n  \"name\": \"config-shield\",\n  \"version\": \"0.2.1\",\n  \"description\": \"Store and retrieve data sensative in nature\",\n  \"main\": \"./lib/index.js\",\n  \"scripts\": {\n    \"test\": \"mocha\",\n    \"start\": \"npm run cli\",\n    \"cli\": \"node ./scripts/cli.js\"\n  },\n  \"bin\": {\n    \"config-shield\": \"./bin/config-shield\",\n    \"cshield\": \"./bin/config-shield\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:godaddy/node-config-shield.git\"\n  },\n  \"author\": {\n    \"name\": \"Aaron Silvas\"\n  },\n  \"devDependencies\": {\n    \"mocha\": \"^7.2.0\"\n  },\n  \"readmeFilename\": \"README.md\",\n  \"gitHead\": \"ff363e0f7ed1645cc3c6c8c34f69c0eda156a3bf\",\n  \"maintainers\": [\n    {\n      \"name\": \"asilvas\",\n      \"email\": \"asilvas@godaddy.com\"\n    }\n  ]\n}\n", "var readline = require('readline');\r\n\r\nvar rl = readline.createInterface({\r\n  input: process.stdin,\r\n  output: process.stdout\r\n});\r\n\r\nmodule.exports = cliMain;\r\n\r\nvar instance = require('../lib/index.js');\r\n\r\nvar commands = {\r\n  'get': cmdGet,\r\n  'set': cmdSet,\r\n  'remove': cmdRemove,\r\n  'keys': cmdKeys,\r\n  'save': cmdSave,\r\n  'load': cmdLoad,\r\n  'convert': cmdConvert,\r\n  'dropBackup': cmdDropBackup,\r\n  'help': cmdHelp,\r\n  'exit': cmdExit\r\n};\r\n\r\nfunction cliMain() {\r\n  rl.resume();\r\n  rl.write(': config-shield v' + require('../package.json').version + ' ready\\r\\n');\r\n  cmdLoad(process.argv[2], process.argv[3]);\r\n}\r\n\r\ncliMain();\r\n\r\nfunction cmdHelp() {\r\n  rl.write(': Available commands:\\r\\n');\r\n  Object.keys(commands).forEach(function(cmdName) {\r\n    rl.write(': * ' + cmdName + '\\r\\n');\r\n  });\r\n  enterCommand();\r\n}\r\n\r\nfunction enterCommand() {\r\n  rl.write('\\r\\n');\r\n  rl.question('> ', onCommand);\r\n}\r\n\r\nfunction onCommand(lineInput) {\r\n  lineInput = lineInput.replace(/[\\r\\n]/g, \"\");\r\n  var parts = lineInput.split(' ');\r\n\r\n  var cmd = commands[parts[0]];\r\n  if (!cmd) {\r\n    rl.write(': Command \"' + parts[0] + '\" not found.\\r\\n');\r\n    cmdHelp();\r\n    return;\r\n  }\r\n\r\n  var partOne = parts[1] || null;\r\n  var partTwo = parts.splice(2).join(' ');\r\n\r\n  cmd.call(null, partOne, partTwo);\r\n}\r\n\r\nfunction cmdGet(key) {\r\n  var val = instance.getProp(key);\r\n  if (!val) {\r\n    rl.write(': \"' + key + '\" not found');\r\n  } else {\r\n    rl.write(': ' + JSON.stringify(val, null, 2));\r\n  }\r\n\r\n  enterCommand();\r\n}\r\n\r\nfunction cmdSet(key, val) {\r\n  var objVal = val;\r\n\r\n  try {\r\n    var strTest = /^[\\'\\\"](.*?)[\\'\\\"]$/.exec(val);\r\n    if (!strTest || strTest.length !== 2) { // do not parse if explicitly a string\r\n      objVal = eval('(' + val + ')'); // attempt to parse\r\n    } else {\r\n      objVal = strTest[1];\r\n    }\r\n  } catch(ex) {\r\n    // use as existing string\r\n  }\r\n\r\n  instance.setProp(key, objVal);\r\n  rl.write(': stored as type ' + typeof objVal);\r\n\r\n  enterCommand();\r\n}\r\n\r\nfunction cmdRemove(key) {\r\n  instance.removeProp(key);\r\n\r\n  enterCommand();\r\n}\r\n\r\nfunction cmdKeys() {\r\n  rl.write(': Keys: ' + instance.getKeys());\r\n\r\n  enterCommand();\r\n}\r\n\r\nfunction getConfigPath(configPath, cb) {\r\n  if (configPath) {\r\n    return void cb(configPath);\r\n  }\r\n  rl.question('enter path of config (enter to use existing path)> ', function(configPath) {\r\n    if (configPath.length === 0) {\r\n      configPath = instance.configPath;\r\n    }\r\n    cb(configPath);\r\n  });\r\n}\r\n\r\nfunction getPrivateKeyPath(privateKeyPath, cb) {\r\n  if (privateKeyPath) {\r\n    return void cb(privateKeyPath);\r\n  }\r\n  rl.question('enter path of private key (press enter to use private key path in config)> ', function(privateKeyPath) {\r\n    if (privateKeyPath.length === 0) {\r\n      privateKeyPath = null;\r\n    }\r\n    cb(privateKeyPath);\r\n  });\r\n}\r\n\r\nfunction getBackup(backup, cb) {\r\n  if (typeof backup === 'string' && backup.length > 0) {\r\n    return void cb(backup);\r\n  }\r\n  rl.question('backup old values to enable key rotations? (enter to disable, or `true`)> ', function(backup) {\r\n    if (backup.length === 0) {\r\n      backup = 'false';\r\n    }\r\n    cb(backup);\r\n  });\r\n}\r\n\r\nfunction cmdSave(configPath) {\r\n  getConfigPath(null, function (configPath) {\r\n    rl.write(': saving... ');\r\n    try {\r\n      instance.save(configPath);\r\n      rl.write('done');\r\n    } catch (ex) {\r\n      rl.write('FAILED: ' + ex.toString());\r\n    }\r\n\r\n    enterCommand();\r\n  });\r\n\r\n}\r\n\r\nfunction cmdLoad(configPath, privateKeyPath) {\r\n  getConfigPath(configPath, function (configPath) {\r\n    getPrivateKeyPath(privateKeyPath, function (privateKeyPath) {\r\n      rl.write(': loading...');\r\n      try {\r\n        instance.load({ configPath: configPath, privateKeyPath: privateKeyPath });\r\n        rl.write('done');\r\n      } catch (ex) {\r\n        rl.write('FAILED: ' + ex.toString());\r\n      }\r\n\r\n      enterCommand();\r\n    });\r\n  });\r\n}\r\n\r\nfunction cmdConvert(privateKeyPath, backup) {\r\n  getPrivateKeyPath(privateKeyPath, function (privateKeyPath) {\r\n    getBackup(backup, function (backup) {\r\n      rl.write(': converting...');\r\n      instance.convert({ privateKeyPath: privateKeyPath, backup: backup === 'true' });\r\n      rl.write('done. Type `save` to persist to disk');\r\n\r\n      enterCommand();\r\n    });\r\n  });\r\n}\r\n\r\nfunction cmdDropBackup() {\r\n  instance.dropBackup();\r\n\r\n  rl.write('backups dropped. Type `save` to persist to disk');\r\n\r\n  enterCommand();\r\n}\r\n\r\nfunction cmdExit() {\r\n  // todo: prompt if change not saved\r\n\r\n  rl.write(': Exiting...');\r\n  rl.close();\r\n  process.exit(0);\r\n}\r\n"], "fixing_code": ["{\n  \"name\": \"config-shield\",\n  \"version\": \"0.2.2\",\n  \"description\": \"Store and retrieve data sensative in nature\",\n  \"main\": \"./lib/index.js\",\n  \"scripts\": {\n    \"test\": \"mocha\",\n    \"start\": \"npm run cli\",\n    \"cli\": \"node ./scripts/cli.js\"\n  },\n  \"bin\": {\n    \"config-shield\": \"./bin/config-shield\",\n    \"cshield\": \"./bin/config-shield\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:godaddy/node-config-shield.git\"\n  },\n  \"author\": {\n    \"name\": \"Aaron Silvas\"\n  },\n  \"devDependencies\": {\n    \"mocha\": \"^7.2.0\"\n  },\n  \"readmeFilename\": \"README.md\",\n  \"gitHead\": \"ff363e0f7ed1645cc3c6c8c34f69c0eda156a3bf\",\n  \"maintainers\": [\n    {\n      \"name\": \"asilvas\",\n      \"email\": \"asilvas@godaddy.com\"\n    }\n  ],\n  \"dependencies\": {\n    \"json5\": \"^2.1.3\"\n  }\n}\n", "var readline = require('readline');\r\nvar JSON5 = require('json5');\r\n\r\nvar rl = readline.createInterface({\r\n  input: process.stdin,\r\n  output: process.stdout\r\n});\r\n\r\nmodule.exports = cliMain;\r\n\r\nvar instance = require('../lib/index.js');\r\n\r\nvar commands = {\r\n  'get': cmdGet,\r\n  'set': cmdSet,\r\n  'remove': cmdRemove,\r\n  'keys': cmdKeys,\r\n  'save': cmdSave,\r\n  'load': cmdLoad,\r\n  'convert': cmdConvert,\r\n  'dropBackup': cmdDropBackup,\r\n  'help': cmdHelp,\r\n  'exit': cmdExit\r\n};\r\n\r\nfunction cliMain() {\r\n  rl.resume();\r\n  rl.write(': config-shield v' + require('../package.json').version + ' ready\\r\\n');\r\n  cmdLoad(process.argv[2], process.argv[3]);\r\n}\r\n\r\ncliMain();\r\n\r\nfunction cmdHelp() {\r\n  rl.write(': Available commands:\\r\\n');\r\n  Object.keys(commands).forEach(function(cmdName) {\r\n    rl.write(': * ' + cmdName + '\\r\\n');\r\n  });\r\n  enterCommand();\r\n}\r\n\r\nfunction enterCommand() {\r\n  rl.write('\\r\\n');\r\n  rl.question('> ', onCommand);\r\n}\r\n\r\nfunction onCommand(lineInput) {\r\n  lineInput = lineInput.replace(/[\\r\\n]/g, \"\");\r\n  var parts = lineInput.split(' ');\r\n\r\n  var cmd = commands[parts[0]];\r\n  if (!cmd) {\r\n    rl.write(': Command \"' + parts[0] + '\" not found.\\r\\n');\r\n    cmdHelp();\r\n    return;\r\n  }\r\n\r\n  var partOne = parts[1] || null;\r\n  var partTwo = parts.splice(2).join(' ');\r\n\r\n  cmd.call(null, partOne, partTwo);\r\n}\r\n\r\nfunction cmdGet(key) {\r\n  var val = instance.getProp(key);\r\n  if (!val) {\r\n    rl.write(': \"' + key + '\" not found');\r\n  } else {\r\n    rl.write(': ' + JSON.stringify(val, null, 2));\r\n  }\r\n\r\n  enterCommand();\r\n}\r\n\r\nfunction cmdSet(key, val) {\r\n  var objVal = val;\r\n\r\n  try {\r\n    var strTest = /^[\\'\\\"](.*?)[\\'\\\"]$/.exec(val);\r\n    if (!strTest || strTest.length !== 2) { // do not parse if explicitly a string\r\n      objVal = JSON5.parse(val); // attempt to parse\r\n    } else {\r\n      objVal = strTest[1];\r\n    }\r\n  } catch(ex) {\r\n    // use as existing string\r\n  }\r\n\r\n  instance.setProp(key, objVal);\r\n  rl.write(': stored as type ' + typeof objVal);\r\n\r\n  enterCommand();\r\n}\r\n\r\nfunction cmdRemove(key) {\r\n  instance.removeProp(key);\r\n\r\n  enterCommand();\r\n}\r\n\r\nfunction cmdKeys() {\r\n  rl.write(': Keys: ' + instance.getKeys());\r\n\r\n  enterCommand();\r\n}\r\n\r\nfunction getConfigPath(configPath, cb) {\r\n  if (configPath) {\r\n    return void cb(configPath);\r\n  }\r\n  rl.question('enter path of config (enter to use existing path)> ', function(configPath) {\r\n    if (configPath.length === 0) {\r\n      configPath = instance.configPath;\r\n    }\r\n    cb(configPath);\r\n  });\r\n}\r\n\r\nfunction getPrivateKeyPath(privateKeyPath, cb) {\r\n  if (privateKeyPath) {\r\n    return void cb(privateKeyPath);\r\n  }\r\n  rl.question('enter path of private key (press enter to use private key path in config)> ', function(privateKeyPath) {\r\n    if (privateKeyPath.length === 0) {\r\n      privateKeyPath = null;\r\n    }\r\n    cb(privateKeyPath);\r\n  });\r\n}\r\n\r\nfunction getBackup(backup, cb) {\r\n  if (typeof backup === 'string' && backup.length > 0) {\r\n    return void cb(backup);\r\n  }\r\n  rl.question('backup old values to enable key rotations? (enter to disable, or `true`)> ', function(backup) {\r\n    if (backup.length === 0) {\r\n      backup = 'false';\r\n    }\r\n    cb(backup);\r\n  });\r\n}\r\n\r\nfunction cmdSave(configPath) {\r\n  getConfigPath(null, function (configPath) {\r\n    rl.write(': saving... ');\r\n    try {\r\n      instance.save(configPath);\r\n      rl.write('done');\r\n    } catch (ex) {\r\n      rl.write('FAILED: ' + ex.toString());\r\n    }\r\n\r\n    enterCommand();\r\n  });\r\n\r\n}\r\n\r\nfunction cmdLoad(configPath, privateKeyPath) {\r\n  getConfigPath(configPath, function (configPath) {\r\n    getPrivateKeyPath(privateKeyPath, function (privateKeyPath) {\r\n      rl.write(': loading...');\r\n      try {\r\n        instance.load({ configPath: configPath, privateKeyPath: privateKeyPath });\r\n        rl.write('done');\r\n      } catch (ex) {\r\n        rl.write('FAILED: ' + ex.toString());\r\n      }\r\n\r\n      enterCommand();\r\n    });\r\n  });\r\n}\r\n\r\nfunction cmdConvert(privateKeyPath, backup) {\r\n  getPrivateKeyPath(privateKeyPath, function (privateKeyPath) {\r\n    getBackup(backup, function (backup) {\r\n      rl.write(': converting...');\r\n      instance.convert({ privateKeyPath: privateKeyPath, backup: backup === 'true' });\r\n      rl.write('done. Type `save` to persist to disk');\r\n\r\n      enterCommand();\r\n    });\r\n  });\r\n}\r\n\r\nfunction cmdDropBackup() {\r\n  instance.dropBackup();\r\n\r\n  rl.write('backups dropped. Type `save` to persist to disk');\r\n\r\n  enterCommand();\r\n}\r\n\r\nfunction cmdExit() {\r\n  // todo: prompt if change not saved\r\n\r\n  rl.write(': Exiting...');\r\n  rl.close();\r\n  process.exit(0);\r\n}\r\n"], "filenames": ["package.json", "scripts/cli.js"], "buggy_code_start_loc": [3, 1], "buggy_code_end_loc": [33, 81], "fixing_code_start_loc": [3, 2], "fixing_code_end_loc": [36, 82], "type": "CWE-913", "message": "** DISPUTED ** scripts/cli.js in the GoDaddy node-config-shield (aka Config Shield) package before 0.2.2 for Node.js calls eval when processing a set command. NOTE: the vendor reportedly states that this is not a vulnerability. The set command was not intended for use with untrusted data.", "other": {"cve": {"id": "CVE-2021-26276", "sourceIdentifier": "cve@mitre.org", "published": "2021-01-27T20:15:13.863", "lastModified": "2022-04-26T15:16:21.510", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "** DISPUTED ** scripts/cli.js in the GoDaddy node-config-shield (aka Config Shield) package before 0.2.2 for Node.js calls eval when processing a set command. NOTE: the vendor reportedly states that this is not a vulnerability. The set command was not intended for use with untrusted data."}, {"lang": "es", "value": "**EN DISPUTA ** El archivo scripts/cli.js en el paquete Node.js de GoDaddy node-config-shield (tambi\u00e9n se conoce como Config Shield) versiones anteriores a 0.2.2 para llamadas eval de Node.js al procesar un comando set.&#xa0;NOTA: el proveedor afirma que esto no es una vulnerabilidad.&#xa0;El comando set no fue dise\u00f1ado para usarse con datos no confiables"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-913"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:godaddy:node-config-shield:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "0.2.3", "matchCriteriaId": "4883EEF7-4E8B-4F9B-BC2B-B65D38298989"}]}]}], "references": [{"url": "https://advisory.checkmarx.net/advisory/CX-2021-4773", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/godaddy/node-config-shield/commit/cdba5d3a7accd661ffbc52e208153464bd0d9da6", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/godaddy/node-config-shield/commit/cdba5d3a7accd661ffbc52e208153464bd0d9da6"}}