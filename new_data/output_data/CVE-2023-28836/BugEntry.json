{"buggy_code": ["from django import forms\nfrom django.utils.safestring import mark_safe\nfrom django.utils.translation import gettext as _\n\nfrom wagtail.models import Page\n\n\nclass PageChoiceField(forms.ModelChoiceField):\n    def label_from_instance(self, obj):\n        bits = []\n        for ancestor in (\n            obj.get_ancestors(inclusive=True).exclude(depth=1).specific(defer=True)\n        ):\n            bits.append(ancestor.get_admin_display_title())\n        return mark_safe('<span class=\"icon icon-arrow-right\"></span>'.join(bits))\n\n\nclass ParentChooserForm(forms.Form):\n    parent_page = PageChoiceField(\n        label=_(\"Parent page\"),\n        required=True,\n        empty_label=None,\n        queryset=Page.objects.none(),\n        widget=forms.RadioSelect(),\n    )\n\n    def __init__(self, valid_parents_qs, *args, **kwargs):\n        self.valid_parents_qs = valid_parents_qs\n        super().__init__(*args, **kwargs)\n        self.fields[\"parent_page\"].queryset = self.valid_parents_qs\n", "from django.contrib.auth.models import Group, Permission\nfrom django.test import TestCase\n\nfrom wagtail.models import GroupPagePermission, Page\nfrom wagtail.test.testapp.models import BusinessIndex, EventCategory, EventPage\nfrom wagtail.test.utils import WagtailTestUtils\n\n\nclass TestIndexView(TestCase, WagtailTestUtils):\n    fixtures = [\"test_specific.json\"]\n\n    def setUp(self):\n        self.login()\n\n    def get(self, **params):\n        return self.client.get(\"/admin/tests/eventpage/\", params)\n\n    def test_simple(self):\n        response = self.get()\n\n        self.assertEqual(response.status_code, 200)\n\n        # There are four event pages in the test data\n        self.assertEqual(response.context[\"result_count\"], 4)\n\n        # User has add permission\n        self.assertIs(response.context[\"user_can_create\"], True)\n\n    def test_filter(self):\n        # Filter by audience\n        response = self.get(audience__exact=\"public\")\n\n        self.assertEqual(response.status_code, 200)\n\n        # Only three of the event page in the test data are 'public'\n        self.assertEqual(response.context[\"result_count\"], 3)\n\n        for eventpage in response.context[\"object_list\"]:\n            self.assertEqual(eventpage.audience, \"public\")\n\n    def test_search(self):\n        response = self.get(q=\"Someone\")\n\n        self.assertEqual(response.status_code, 200)\n\n        # There is one eventpage where the title contains 'Someone'\n        self.assertEqual(response.context[\"result_count\"], 1)\n\n    def test_ordering(self):\n        response = self.get(o=\"0.1\")\n\n        self.assertEqual(response.status_code, 200)\n\n        # There should still be four results\n        self.assertEqual(response.context[\"result_count\"], 4)\n\n    def test_using_core_page(self):\n        # The core page is slightly different to other pages, so exclude it\n        response = self.client.get(\"/admin/wagtailcore/page/\")\n        self.assertEqual(response.status_code, 200)\n\n        root_page = Page.objects.get(depth=1)\n        self.assertNotIn(root_page, response.context[\"paginator\"].object_list)\n\n\nclass TestExcludeFromExplorer(TestCase, WagtailTestUtils):\n    fixtures = [\"modeladmintest_test.json\"]\n\n    def setUp(self):\n        self.login()\n\n    def test_attribute_effects_explorer(self):\n        # The two VenuePages should appear in the venuepage list\n        response = self.client.get(\"/admin/modeladmintest/venuepage/\")\n        self.assertContains(response, \"Santa&#x27;s Grotto\")\n        self.assertContains(response, \"Santa&#x27;s Workshop\")\n\n        # But when viewing the children of 'Christmas' event in explorer\n        response = self.client.get(\"/admin/pages/4/\")\n        self.assertNotContains(response, \"Santa&#x27;s Grotto\")\n        self.assertNotContains(response, \"Santa&#x27;s Workshop\")\n\n        # But the other test page should...\n        self.assertContains(response, \"Claim your free present!\")\n\n\nclass TestCreateView(TestCase, WagtailTestUtils):\n    fixtures = [\"test_specific.json\"]\n\n    def setUp(self):\n        self.login()\n\n    def test_redirect_to_choose_parent(self):\n        # When more than one possible parent page exists, redirect to choose_parent\n        response = self.client.get(\"/admin/tests/eventpage/create/\")\n        self.assertRedirects(response, \"/admin/tests/eventpage/choose_parent/\")\n\n    def test_one_parent_exists(self):\n        # Create a BusinessIndex page that BusinessChild can exist under\n        homepage = Page.objects.get(url_path=\"/home/\")\n        business_index = BusinessIndex(title=\"Business Index\")\n        homepage.add_child(instance=business_index)\n\n        # When one possible parent page exists, redirect straight to the page create view\n        response = self.client.get(\"/admin/tests/businesschild/create/\")\n\n        expected_path = \"/admin/pages/add/tests/businesschild/%d/\" % business_index.pk\n        expected_next_path = \"/admin/tests/businesschild/\"\n        self.assertRedirects(\n            response, \"%s?next=%s\" % (expected_path, expected_next_path)\n        )\n\n\nclass TestInspectView(TestCase, WagtailTestUtils):\n    fixtures = [\"test_specific.json\", \"modeladmintest_test.json\"]\n\n    def setUp(self):\n        self.login()\n\n    def get(self, id):\n        return self.client.get(\"/admin/tests/eventpage/inspect/%d/\" % id)\n\n    def test_simple(self):\n        response = self.get(4)\n        self.assertEqual(response.status_code, 200)\n\n    def test_title_present(self):\n        \"\"\"\n        The page title should appear three times. Once in the header, and two times\n        in the field listing (as the actual title and as the draft title)\n        \"\"\"\n        response = self.get(4)\n        self.assertContains(response, \"Christmas\", 3)\n\n    def test_manytomany_output(self):\n        \"\"\"\n        Because ManyToMany fields are output InspectView by default, the\n        `categories` for the event should output as a comma separated list\n        once populated.\n        \"\"\"\n        eventpage = EventPage.objects.get(pk=4)\n        free_category = EventCategory.objects.create(name=\"Free\")\n        child_friendly_category = EventCategory.objects.create(name=\"Child-friendly\")\n        eventpage.categories = (free_category, child_friendly_category)\n        eventpage.save()\n        response = self.get(4)\n        self.assertContains(response, \"<dd>Free, Child-friendly</dd>\", html=True)\n\n    def test_false_values_displayed(self):\n        \"\"\"\n        Boolean fields with False values should display False, rather than the\n        value of `get_empty_value_display()`. For this page, those should be\n        `locked`, `expired` and `has_unpublished_changes`\n        \"\"\"\n        response = self.get(4)\n        self.assertContains(response, \"<dd>False</dd>\", count=3, html=True)\n\n    def test_location_present(self):\n        \"\"\"\n        The location should appear once, in the field listing\n        \"\"\"\n        response = self.get(4)\n        self.assertContains(response, \"The North Pole\", 1)\n\n    def test_non_existent(self):\n        response = self.get(100)\n        self.assertEqual(response.status_code, 404)\n\n    def test_short_description_is_used_as_field_label(self):\n        \"\"\"\n        A custom field has been added to the inspect view's `inspect_view_fields` and since\n        this field has a `short_description` we expect it to be used as the field's label,\n        and not use the name of the function.\n        \"\"\"\n        response = self.client.get(\"/admin/modeladmintest/author/inspect/1/\")\n        self.assertContains(response, \"Birth information\")\n        self.assertNotContains(response, \"author_birth_string\")\n\n    def test_back_to_listing(self):\n        response = self.client.get(\"/admin/modeladmintest/author/inspect/1/\")\n        # check that back to listing link exists\n        expected = \"\"\"\n            <p class=\"back\">\n                    <a href=\"/admin/modeladmintest/author/\">\n                        <svg class=\"icon icon-arrow-left default\" aria-hidden=\"true\">\n                            <use href=\"#icon-arrow-left\"></use>\n                        </svg>\n                        Back to author list\n                    </a>\n            </p>\n        \"\"\"\n        self.assertContains(response, expected, html=True)\n\n\nclass TestEditView(TestCase, WagtailTestUtils):\n    fixtures = [\"test_specific.json\"]\n\n    def setUp(self):\n        self.login()\n\n    def get(self, obj_id):\n        return self.client.get(\"/admin/tests/eventpage/edit/%d/\" % obj_id)\n\n    def test_simple(self):\n        response = self.get(4)\n\n        expected_path = \"/admin/pages/4/edit/\"\n        expected_next_path = \"/admin/tests/eventpage/\"\n        self.assertRedirects(\n            response, \"%s?next=%s\" % (expected_path, expected_next_path)\n        )\n\n    def test_non_existent(self):\n        response = self.get(100)\n\n        self.assertEqual(response.status_code, 404)\n\n    def test_using_core_page(self):\n        # The core page is slightly different to other pages, so exclude it\n        root_page = Page.objects.get(depth=1)\n        response = self.client.get(\"/admin/wagtailcore/page/{}/\".format(root_page.id))\n        self.assertEqual(response.status_code, 404)\n\n\nclass TestDeleteView(TestCase, WagtailTestUtils):\n    fixtures = [\"test_specific.json\"]\n\n    def setUp(self):\n        self.login()\n\n    def get(self, obj_id):\n        return self.client.get(\"/admin/tests/eventpage/delete/%d/\" % obj_id)\n\n    def test_simple(self):\n        response = self.get(4)\n\n        expected_path = \"/admin/pages/4/delete/\"\n        expected_next_path = \"/admin/tests/eventpage/\"\n        self.assertRedirects(\n            response, \"%s?next=%s\" % (expected_path, expected_next_path)\n        )\n\n\nclass TestChooseParentView(TestCase, WagtailTestUtils):\n    fixtures = [\"test_specific.json\"]\n\n    def setUp(self):\n        self.login()\n\n    def test_simple(self):\n        response = self.client.get(\"/admin/tests/eventpage/choose_parent/\")\n\n        self.assertEqual(response.status_code, 200)\n\n    def test_no_parent_exists(self):\n        response = self.client.get(\"/admin/tests/businesschild/choose_parent/\")\n\n        self.assertRedirects(response, \"/admin/\")\n\n    def test_post(self):\n        response = self.client.post(\n            \"/admin/tests/eventpage/choose_parent/\",\n            {\n                \"parent_page\": 2,\n            },\n        )\n\n        expected_path = \"/admin/pages/add/tests/eventpage/2/\"\n        expected_next_path = \"/admin/tests/eventpage/\"\n        self.assertRedirects(\n            response, \"%s?next=%s\" % (expected_path, expected_next_path)\n        )\n\n    def test_back_to_listing(self):\n        response = self.client.post(\"/admin/tests/eventpage/choose_parent/\")\n        # check that back to listing link exists\n        expected = \"\"\"\n            <p class=\"back\">\n                    <a href=\"/admin/tests/eventpage/\">\n                        <svg class=\"icon icon-arrow-left default\" aria-hidden=\"true\">\n                            <use href=\"#icon-arrow-left\"></use>\n                        </svg>\n                        Back to event page list\n                    </a>\n            </p>\n        \"\"\"\n        self.assertContains(response, expected, html=True)\n\n\nclass TestChooseParentViewForNonSuperuser(TestCase, WagtailTestUtils):\n    fixtures = [\"test_specific.json\"]\n\n    def setUp(self):\n        homepage = Page.objects.get(url_path=\"/home/\")\n        business_index = BusinessIndex(\n            title=\"Public Business Index\",\n            draft_title=\"Public Business Index\",\n        )\n        homepage.add_child(instance=business_index)\n\n        another_business_index = BusinessIndex(\n            title=\"Another Business Index\",\n            draft_title=\"Another Business Index\",\n        )\n        homepage.add_child(instance=another_business_index)\n\n        secret_business_index = BusinessIndex(\n            title=\"Private Business Index\",\n            draft_title=\"Private Business Index\",\n        )\n        homepage.add_child(instance=secret_business_index)\n\n        business_editors = Group.objects.create(name=\"Business editors\")\n        business_editors.permissions.add(\n            Permission.objects.get(codename=\"access_admin\")\n        )\n        GroupPagePermission.objects.create(\n            group=business_editors, page=business_index, permission_type=\"add\"\n        )\n        GroupPagePermission.objects.create(\n            group=business_editors, page=another_business_index, permission_type=\"add\"\n        )\n\n        user = self.create_user(username=\"test2\", password=\"password\")\n        user.groups.add(business_editors)\n        # Login\n        self.login(username=\"test2\", password=\"password\")\n\n    def test_simple(self):\n        response = self.client.get(\"/admin/tests/businesschild/choose_parent/\")\n\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, \"Public Business Index\")\n        self.assertNotContains(response, \"Private Business Index\")\n\n\nclass TestEditorAccess(TestCase, WagtailTestUtils):\n    fixtures = [\"test_specific.json\"]\n\n    def setUp(self):\n        # Create a user\n        user = self.create_user(username=\"test2\", password=\"password\")\n        user.groups.add(Group.objects.get(pk=2))\n        # Login\n        self.login(username=\"test2\", password=\"password\")\n\n    def test_delete_permitted(self):\n        response = self.client.get(\"/admin/tests/eventpage/delete/4/\")\n        self.assertRedirects(response, \"/admin/\")\n\n\nclass TestModeratorAccess(TestCase, WagtailTestUtils):\n    fixtures = [\"test_specific.json\"]\n\n    def setUp(self):\n        # Create a user\n        user = self.create_user(username=\"test3\", password=\"password\")\n        user.groups.add(Group.objects.get(pk=1))\n        # Login\n        self.login(username=\"test3\", password=\"password\")\n\n    def test_delete_permitted(self):\n        response = self.client.get(\"/admin/tests/eventpage/delete/4/\")\n        self.assertRedirects(\n            response, \"/admin/pages/4/delete/?next=/admin/tests/eventpage/\"\n        )\n\n\nclass TestSearch(TestCase, WagtailTestUtils):\n    fixtures = [\"test_specific.json\"]\n\n    def setUp(self):\n        self.login()\n\n    def test_lookup_allowed_on_parentalkey(self):\n        try:\n            self.client.get(\n                \"/admin/tests/eventpage/?related_links__link_page__id__exact=1\"\n            )\n        except AttributeError:\n            self.fail(\"Lookup on parentalkey raised AttributeError unexpectedly\")\n"], "fixing_code": ["from django import forms\nfrom django.utils.translation import gettext as _\n\nfrom wagtail.models import Page\n\n\nclass PageChoiceField(forms.ModelChoiceField):\n    def label_from_instance(self, obj):\n        bits = []\n        for ancestor in (\n            obj.get_ancestors(inclusive=True).exclude(depth=1).specific(defer=True)\n        ):\n            bits.append(ancestor.get_admin_display_title())\n        return \" | \".join(bits)\n\n\nclass ParentChooserForm(forms.Form):\n    parent_page = PageChoiceField(\n        label=_(\"Parent page\"),\n        required=True,\n        empty_label=None,\n        queryset=Page.objects.none(),\n        widget=forms.RadioSelect(),\n    )\n\n    def __init__(self, valid_parents_qs, *args, **kwargs):\n        self.valid_parents_qs = valid_parents_qs\n        super().__init__(*args, **kwargs)\n        self.fields[\"parent_page\"].queryset = self.valid_parents_qs\n", "from django.contrib.auth.models import Group, Permission\nfrom django.test import TestCase\n\nfrom wagtail.models import GroupPagePermission, Page\nfrom wagtail.test.testapp.models import BusinessIndex, EventCategory, EventPage\nfrom wagtail.test.utils import WagtailTestUtils\n\n\nclass TestIndexView(TestCase, WagtailTestUtils):\n    fixtures = [\"test_specific.json\"]\n\n    def setUp(self):\n        self.login()\n\n    def get(self, **params):\n        return self.client.get(\"/admin/tests/eventpage/\", params)\n\n    def test_simple(self):\n        response = self.get()\n\n        self.assertEqual(response.status_code, 200)\n\n        # There are four event pages in the test data\n        self.assertEqual(response.context[\"result_count\"], 4)\n\n        # User has add permission\n        self.assertIs(response.context[\"user_can_create\"], True)\n\n    def test_filter(self):\n        # Filter by audience\n        response = self.get(audience__exact=\"public\")\n\n        self.assertEqual(response.status_code, 200)\n\n        # Only three of the event page in the test data are 'public'\n        self.assertEqual(response.context[\"result_count\"], 3)\n\n        for eventpage in response.context[\"object_list\"]:\n            self.assertEqual(eventpage.audience, \"public\")\n\n    def test_search(self):\n        response = self.get(q=\"Someone\")\n\n        self.assertEqual(response.status_code, 200)\n\n        # There is one eventpage where the title contains 'Someone'\n        self.assertEqual(response.context[\"result_count\"], 1)\n\n    def test_ordering(self):\n        response = self.get(o=\"0.1\")\n\n        self.assertEqual(response.status_code, 200)\n\n        # There should still be four results\n        self.assertEqual(response.context[\"result_count\"], 4)\n\n    def test_using_core_page(self):\n        # The core page is slightly different to other pages, so exclude it\n        response = self.client.get(\"/admin/wagtailcore/page/\")\n        self.assertEqual(response.status_code, 200)\n\n        root_page = Page.objects.get(depth=1)\n        self.assertNotIn(root_page, response.context[\"paginator\"].object_list)\n\n\nclass TestExcludeFromExplorer(TestCase, WagtailTestUtils):\n    fixtures = [\"modeladmintest_test.json\"]\n\n    def setUp(self):\n        self.login()\n\n    def test_attribute_effects_explorer(self):\n        # The two VenuePages should appear in the venuepage list\n        response = self.client.get(\"/admin/modeladmintest/venuepage/\")\n        self.assertContains(response, \"Santa&#x27;s Grotto\")\n        self.assertContains(response, \"Santa&#x27;s Workshop\")\n\n        # But when viewing the children of 'Christmas' event in explorer\n        response = self.client.get(\"/admin/pages/4/\")\n        self.assertNotContains(response, \"Santa&#x27;s Grotto\")\n        self.assertNotContains(response, \"Santa&#x27;s Workshop\")\n\n        # But the other test page should...\n        self.assertContains(response, \"Claim your free present!\")\n\n\nclass TestCreateView(TestCase, WagtailTestUtils):\n    fixtures = [\"test_specific.json\"]\n\n    def setUp(self):\n        self.login()\n\n    def test_redirect_to_choose_parent(self):\n        # When more than one possible parent page exists, redirect to choose_parent\n        response = self.client.get(\"/admin/tests/eventpage/create/\")\n        self.assertRedirects(response, \"/admin/tests/eventpage/choose_parent/\")\n\n    def test_one_parent_exists(self):\n        # Create a BusinessIndex page that BusinessChild can exist under\n        homepage = Page.objects.get(url_path=\"/home/\")\n        business_index = BusinessIndex(title=\"Business Index\")\n        homepage.add_child(instance=business_index)\n\n        # When one possible parent page exists, redirect straight to the page create view\n        response = self.client.get(\"/admin/tests/businesschild/create/\")\n\n        expected_path = \"/admin/pages/add/tests/businesschild/%d/\" % business_index.pk\n        expected_next_path = \"/admin/tests/businesschild/\"\n        self.assertRedirects(\n            response, \"%s?next=%s\" % (expected_path, expected_next_path)\n        )\n\n\nclass TestInspectView(TestCase, WagtailTestUtils):\n    fixtures = [\"test_specific.json\", \"modeladmintest_test.json\"]\n\n    def setUp(self):\n        self.login()\n\n    def get(self, id):\n        return self.client.get(\"/admin/tests/eventpage/inspect/%d/\" % id)\n\n    def test_simple(self):\n        response = self.get(4)\n        self.assertEqual(response.status_code, 200)\n\n    def test_title_present(self):\n        \"\"\"\n        The page title should appear three times. Once in the header, and two times\n        in the field listing (as the actual title and as the draft title)\n        \"\"\"\n        response = self.get(4)\n        self.assertContains(response, \"Christmas\", 3)\n\n    def test_manytomany_output(self):\n        \"\"\"\n        Because ManyToMany fields are output InspectView by default, the\n        `categories` for the event should output as a comma separated list\n        once populated.\n        \"\"\"\n        eventpage = EventPage.objects.get(pk=4)\n        free_category = EventCategory.objects.create(name=\"Free\")\n        child_friendly_category = EventCategory.objects.create(name=\"Child-friendly\")\n        eventpage.categories = (free_category, child_friendly_category)\n        eventpage.save()\n        response = self.get(4)\n        self.assertContains(response, \"<dd>Free, Child-friendly</dd>\", html=True)\n\n    def test_false_values_displayed(self):\n        \"\"\"\n        Boolean fields with False values should display False, rather than the\n        value of `get_empty_value_display()`. For this page, those should be\n        `locked`, `expired` and `has_unpublished_changes`\n        \"\"\"\n        response = self.get(4)\n        self.assertContains(response, \"<dd>False</dd>\", count=3, html=True)\n\n    def test_location_present(self):\n        \"\"\"\n        The location should appear once, in the field listing\n        \"\"\"\n        response = self.get(4)\n        self.assertContains(response, \"The North Pole\", 1)\n\n    def test_non_existent(self):\n        response = self.get(100)\n        self.assertEqual(response.status_code, 404)\n\n    def test_short_description_is_used_as_field_label(self):\n        \"\"\"\n        A custom field has been added to the inspect view's `inspect_view_fields` and since\n        this field has a `short_description` we expect it to be used as the field's label,\n        and not use the name of the function.\n        \"\"\"\n        response = self.client.get(\"/admin/modeladmintest/author/inspect/1/\")\n        self.assertContains(response, \"Birth information\")\n        self.assertNotContains(response, \"author_birth_string\")\n\n    def test_back_to_listing(self):\n        response = self.client.get(\"/admin/modeladmintest/author/inspect/1/\")\n        # check that back to listing link exists\n        expected = \"\"\"\n            <p class=\"back\">\n                    <a href=\"/admin/modeladmintest/author/\">\n                        <svg class=\"icon icon-arrow-left default\" aria-hidden=\"true\">\n                            <use href=\"#icon-arrow-left\"></use>\n                        </svg>\n                        Back to author list\n                    </a>\n            </p>\n        \"\"\"\n        self.assertContains(response, expected, html=True)\n\n\nclass TestEditView(TestCase, WagtailTestUtils):\n    fixtures = [\"test_specific.json\"]\n\n    def setUp(self):\n        self.login()\n\n    def get(self, obj_id):\n        return self.client.get(\"/admin/tests/eventpage/edit/%d/\" % obj_id)\n\n    def test_simple(self):\n        response = self.get(4)\n\n        expected_path = \"/admin/pages/4/edit/\"\n        expected_next_path = \"/admin/tests/eventpage/\"\n        self.assertRedirects(\n            response, \"%s?next=%s\" % (expected_path, expected_next_path)\n        )\n\n    def test_non_existent(self):\n        response = self.get(100)\n\n        self.assertEqual(response.status_code, 404)\n\n    def test_using_core_page(self):\n        # The core page is slightly different to other pages, so exclude it\n        root_page = Page.objects.get(depth=1)\n        response = self.client.get(\"/admin/wagtailcore/page/{}/\".format(root_page.id))\n        self.assertEqual(response.status_code, 404)\n\n\nclass TestDeleteView(TestCase, WagtailTestUtils):\n    fixtures = [\"test_specific.json\"]\n\n    def setUp(self):\n        self.login()\n\n    def get(self, obj_id):\n        return self.client.get(\"/admin/tests/eventpage/delete/%d/\" % obj_id)\n\n    def test_simple(self):\n        response = self.get(4)\n\n        expected_path = \"/admin/pages/4/delete/\"\n        expected_next_path = \"/admin/tests/eventpage/\"\n        self.assertRedirects(\n            response, \"%s?next=%s\" % (expected_path, expected_next_path)\n        )\n\n\nclass TestChooseParentView(TestCase, WagtailTestUtils):\n    fixtures = [\"test_specific.json\"]\n\n    def setUp(self):\n        self.login()\n\n    def test_simple(self):\n        response = self.client.get(\"/admin/tests/eventpage/choose_parent/\")\n\n        self.assertEqual(response.status_code, 200)\n\n    def test_no_parent_exists(self):\n        response = self.client.get(\"/admin/tests/businesschild/choose_parent/\")\n\n        self.assertRedirects(response, \"/admin/\")\n\n    def test_post(self):\n        response = self.client.post(\n            \"/admin/tests/eventpage/choose_parent/\",\n            {\n                \"parent_page\": 2,\n            },\n        )\n\n        expected_path = \"/admin/pages/add/tests/eventpage/2/\"\n        expected_next_path = \"/admin/tests/eventpage/\"\n        self.assertRedirects(\n            response, \"%s?next=%s\" % (expected_path, expected_next_path)\n        )\n\n    def test_back_to_listing(self):\n        response = self.client.post(\"/admin/tests/eventpage/choose_parent/\")\n        # check that back to listing link exists\n        expected = \"\"\"\n            <p class=\"back\">\n                    <a href=\"/admin/tests/eventpage/\">\n                        <svg class=\"icon icon-arrow-left default\" aria-hidden=\"true\">\n                            <use href=\"#icon-arrow-left\"></use>\n                        </svg>\n                        Back to event page list\n                    </a>\n            </p>\n        \"\"\"\n        self.assertContains(response, expected, html=True)\n\n    def test_page_title_html_escaping(self):\n        homepage = Page.objects.get(url_path=\"/home/\")\n        business_index = BusinessIndex(\n            title=\"Title with <script>alert('XSS')</script>\",\n        )\n        homepage.add_child(instance=business_index)\n\n        response = self.client.get(\"/admin/tests/businesschild/choose_parent/\")\n\n        self.assertEqual(response.status_code, 200)\n        self.assertNotContains(response, \"Title with <script>alert('XSS')</script>\")\n        self.assertContains(\n            response, \"Title with &lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;\"\n        )\n\n\nclass TestChooseParentViewForNonSuperuser(TestCase, WagtailTestUtils):\n    fixtures = [\"test_specific.json\"]\n\n    def setUp(self):\n        homepage = Page.objects.get(url_path=\"/home/\")\n        business_index = BusinessIndex(\n            title=\"Public Business Index\",\n            draft_title=\"Public Business Index\",\n        )\n        homepage.add_child(instance=business_index)\n\n        another_business_index = BusinessIndex(\n            title=\"Another Business Index\",\n            draft_title=\"Another Business Index\",\n        )\n        homepage.add_child(instance=another_business_index)\n\n        secret_business_index = BusinessIndex(\n            title=\"Private Business Index\",\n            draft_title=\"Private Business Index\",\n        )\n        homepage.add_child(instance=secret_business_index)\n\n        business_editors = Group.objects.create(name=\"Business editors\")\n        business_editors.permissions.add(\n            Permission.objects.get(codename=\"access_admin\")\n        )\n        GroupPagePermission.objects.create(\n            group=business_editors, page=business_index, permission_type=\"add\"\n        )\n        GroupPagePermission.objects.create(\n            group=business_editors, page=another_business_index, permission_type=\"add\"\n        )\n\n        user = self.create_user(username=\"test2\", password=\"password\")\n        user.groups.add(business_editors)\n        # Login\n        self.login(username=\"test2\", password=\"password\")\n\n    def test_simple(self):\n        response = self.client.get(\"/admin/tests/businesschild/choose_parent/\")\n\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, \"Public Business Index\")\n        self.assertNotContains(response, \"Private Business Index\")\n\n\nclass TestEditorAccess(TestCase, WagtailTestUtils):\n    fixtures = [\"test_specific.json\"]\n\n    def setUp(self):\n        # Create a user\n        user = self.create_user(username=\"test2\", password=\"password\")\n        user.groups.add(Group.objects.get(pk=2))\n        # Login\n        self.login(username=\"test2\", password=\"password\")\n\n    def test_delete_permitted(self):\n        response = self.client.get(\"/admin/tests/eventpage/delete/4/\")\n        self.assertRedirects(response, \"/admin/\")\n\n\nclass TestModeratorAccess(TestCase, WagtailTestUtils):\n    fixtures = [\"test_specific.json\"]\n\n    def setUp(self):\n        # Create a user\n        user = self.create_user(username=\"test3\", password=\"password\")\n        user.groups.add(Group.objects.get(pk=1))\n        # Login\n        self.login(username=\"test3\", password=\"password\")\n\n    def test_delete_permitted(self):\n        response = self.client.get(\"/admin/tests/eventpage/delete/4/\")\n        self.assertRedirects(\n            response, \"/admin/pages/4/delete/?next=/admin/tests/eventpage/\"\n        )\n\n\nclass TestSearch(TestCase, WagtailTestUtils):\n    fixtures = [\"test_specific.json\"]\n\n    def setUp(self):\n        self.login()\n\n    def test_lookup_allowed_on_parentalkey(self):\n        try:\n            self.client.get(\n                \"/admin/tests/eventpage/?related_links__link_page__id__exact=1\"\n            )\n        except AttributeError:\n            self.fail(\"Lookup on parentalkey raised AttributeError unexpectedly\")\n"], "filenames": ["wagtail/contrib/modeladmin/forms.py", "wagtail/contrib/modeladmin/tests/test_page_modeladmin.py"], "buggy_code_start_loc": [2, 288], "buggy_code_end_loc": [16, 288], "fixing_code_start_loc": [1, 289], "fixing_code_end_loc": [15, 304], "type": "CWE-79", "message": "Wagtail is an open source content management system built on Django. Starting in version 1.5 and prior to versions 4.1.4 and 4.2.2, a stored cross-site scripting (XSS) vulnerability exists on ModelAdmin views within the Wagtail admin interface. A user with a limited-permission editor account for the Wagtail admin could potentially craft pages and documents that, when viewed by a user with higher privileges, could perform actions with that user's credentials. The vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin, and only affects sites with ModelAdmin enabled. For page, the vulnerability is in the \"Choose a parent page\" ModelAdmin view (`ChooseParentView`), available when managing pages via ModelAdmin. For documents, the vulnerability is in the ModelAdmin Inspect view (`InspectView`) when displaying document fields. Patched versions have been released as Wagtail 4.1.4 and Wagtail 4.2.2. Site owners who are unable to upgrade to the new versions can disable or override the corresponding functionality.", "other": {"cve": {"id": "CVE-2023-28836", "sourceIdentifier": "security-advisories@github.com", "published": "2023-04-03T17:15:06.957", "lastModified": "2023-04-10T13:45:10.197", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Wagtail is an open source content management system built on Django. Starting in version 1.5 and prior to versions 4.1.4 and 4.2.2, a stored cross-site scripting (XSS) vulnerability exists on ModelAdmin views within the Wagtail admin interface. A user with a limited-permission editor account for the Wagtail admin could potentially craft pages and documents that, when viewed by a user with higher privileges, could perform actions with that user's credentials. The vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin, and only affects sites with ModelAdmin enabled. For page, the vulnerability is in the \"Choose a parent page\" ModelAdmin view (`ChooseParentView`), available when managing pages via ModelAdmin. For documents, the vulnerability is in the ModelAdmin Inspect view (`InspectView`) when displaying document fields. Patched versions have been released as Wagtail 4.1.4 and Wagtail 4.2.2. Site owners who are unable to upgrade to the new versions can disable or override the corresponding functionality."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 6.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.5, "impactScore": 5.9}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:torchbox:wagtail:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.5", "versionEndExcluding": "4.1.4", "matchCriteriaId": "2431A916-407F-441E-BCBC-880EDF09596C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:torchbox:wagtail:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.2", "versionEndExcluding": "4.2.2", "matchCriteriaId": "0B1B8BD9-78D3-4032-95EB-E0FFF890198D"}]}]}], "references": [{"url": "https://docs.wagtail.org/en/stable/reference/contrib/modeladmin/chooseparentview.html#customising-chooseparentview", "source": "security-advisories@github.com", "tags": ["Product"]}, {"url": "https://docs.wagtail.org/en/stable/reference/contrib/modeladmin/inspectview.html#enabling-customising-inspectview", "source": "security-advisories@github.com", "tags": ["Product"]}, {"url": "https://github.com/wagtail/wagtail/commit/5be2b1ed55fd7259dfdf2c82e7701dba407b8b62", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/wagtail/wagtail/commit/bc84bf9815610cfbf8db3b6050c7ddcbaa4b9713", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/wagtail/wagtail/commit/eefc3381d37b476791610e5d30594fae443f33af", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/wagtail/wagtail/commit/ff806ab173a504395fdfb3139eb0a29444ab4b91", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/wagtail/wagtail/releases/tag/v4.2.2", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/wagtail/wagtail/security/advisories/GHSA-5286-f2rf-35c2", "source": "security-advisories@github.com", "tags": ["Mitigation", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/wagtail/wagtail/commit/5be2b1ed55fd7259dfdf2c82e7701dba407b8b62"}}