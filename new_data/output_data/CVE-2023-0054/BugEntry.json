{"buggy_code": ["/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n/*\n * eval.c: Expression evaluation.\n */\n#define USING_FLOAT_STUFF\n\n#include \"vim.h\"\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n\n#ifdef VMS\n# include <float.h>\n#endif\n\n#define NAMESPACE_CHAR\t(char_u *)\"abglstvw\"\n\n/*\n * When recursively copying lists and dicts we need to remember which ones we\n * have done to avoid endless recursiveness.  This unique ID is used for that.\n * The last bit is used for previous_funccal, ignored when comparing.\n */\nstatic int current_copyID = 0;\n\nstatic int eval2(char_u **arg, typval_T *rettv, evalarg_T *evalarg);\nstatic int eval3(char_u **arg, typval_T *rettv, evalarg_T *evalarg);\nstatic int eval4(char_u **arg, typval_T *rettv, evalarg_T *evalarg);\nstatic int eval5(char_u **arg, typval_T *rettv, evalarg_T *evalarg);\nstatic int eval6(char_u **arg, typval_T *rettv, evalarg_T *evalarg);\nstatic int eval7(char_u **arg, typval_T *rettv, evalarg_T *evalarg, int want_string);\nstatic int eval8(char_u **arg, typval_T *rettv, evalarg_T *evalarg, int want_string);\nstatic int eval9(char_u **arg, typval_T *rettv, evalarg_T *evalarg, int want_string);\nstatic int eval9_leader(typval_T *rettv, int numeric_only, char_u *start_leader, char_u **end_leaderp);\n\nstatic int free_unref_items(int copyID);\nstatic char_u *make_expanded_name(char_u *in_start, char_u *expr_start, char_u *expr_end, char_u *in_end);\n\n/*\n * Return \"n1\" divided by \"n2\", taking care of dividing by zero.\n * If \"failed\" is not NULL set it to TRUE when dividing by zero fails.\n */\n\tvarnumber_T\nnum_divide(varnumber_T n1, varnumber_T n2, int *failed)\n{\n    varnumber_T\tresult;\n\n    if (n2 == 0)\n    {\n\tif (in_vim9script())\n\t{\n\t    emsg(_(e_divide_by_zero));\n\t    if (failed != NULL)\n\t\t*failed = TRUE;\n\t}\n\tif (n1 == 0)\n\t    result = VARNUM_MIN; // similar to NaN\n\telse if (n1 < 0)\n\t    result = -VARNUM_MAX;\n\telse\n\t    result = VARNUM_MAX;\n    }\n    else if (n1 == VARNUM_MIN && n2 == -1)\n    {\n\t// specific case: trying to do VARNUM_MIN / -1 results in a positive\n\t// number that doesn't fit in varnumber_T and causes an FPE\n\tresult = VARNUM_MAX;\n    }\n    else\n\tresult = n1 / n2;\n\n    return result;\n}\n\n/*\n * Return \"n1\" modulus \"n2\", taking care of dividing by zero.\n * If \"failed\" is not NULL set it to TRUE when dividing by zero fails.\n */\n\tvarnumber_T\nnum_modulus(varnumber_T n1, varnumber_T n2, int *failed)\n{\n    if (n2 == 0 && in_vim9script())\n    {\n\temsg(_(e_divide_by_zero));\n\tif (failed != NULL)\n\t    *failed = TRUE;\n    }\n    return (n2 == 0) ? 0 : (n1 % n2);\n}\n\n/*\n * Initialize the global and v: variables.\n */\n    void\neval_init(void)\n{\n    evalvars_init();\n    func_init();\n}\n\n#if defined(EXITFREE) || defined(PROTO)\n    void\neval_clear(void)\n{\n    evalvars_clear();\n    free_scriptnames();  // must come after evalvars_clear().\n    free_locales();\n\n    // autoloaded script names\n    free_autoload_scriptnames();\n\n    // unreferenced lists and dicts\n    (void)garbage_collect(FALSE);\n\n    // functions not garbage collected\n    free_all_functions();\n}\n#endif\n\n    void\nfill_evalarg_from_eap(evalarg_T *evalarg, exarg_T *eap, int skip)\n{\n    init_evalarg(evalarg);\n    evalarg->eval_flags = skip ? 0 : EVAL_EVALUATE;\n\n    if (eap == NULL)\n\treturn;\n\n    evalarg->eval_cstack = eap->cstack;\n    if (sourcing_a_script(eap) || eap->getline == get_list_line)\n    {\n\tevalarg->eval_getline = eap->getline;\n\tevalarg->eval_cookie = eap->cookie;\n    }\n}\n\n/*\n * Top level evaluation function, returning a boolean.\n * Sets \"error\" to TRUE if there was an error.\n * Return TRUE or FALSE.\n */\n    int\neval_to_bool(\n    char_u\t*arg,\n    int\t\t*error,\n    exarg_T\t*eap,\n    int\t\tskip,\t    // only parse, don't execute\n    int\t\tuse_simple_function)\n{\n    typval_T\ttv;\n    varnumber_T\tretval = FALSE;\n    evalarg_T\tevalarg;\n    int\t\tr;\n\n    fill_evalarg_from_eap(&evalarg, eap, skip);\n\n    if (skip)\n\t++emsg_skip;\n    if (use_simple_function)\n\tr = eval0_simple_funccal(arg, &tv, eap, &evalarg);\n    else\n\tr = eval0(arg, &tv, eap, &evalarg);\n    if (r == FAIL)\n\t*error = TRUE;\n    else\n    {\n\t*error = FALSE;\n\tif (!skip)\n\t{\n\t    if (in_vim9script())\n\t\tretval = tv_get_bool_chk(&tv, error);\n\t    else\n\t\tretval = (tv_get_number_chk(&tv, error) != 0);\n\t    clear_tv(&tv);\n\t}\n    }\n    if (skip)\n\t--emsg_skip;\n    clear_evalarg(&evalarg, eap);\n\n    return (int)retval;\n}\n\n/*\n * Call eval1() and give an error message if not done at a lower level.\n */\n    static int\neval1_emsg(char_u **arg, typval_T *rettv, exarg_T *eap)\n{\n    char_u\t*start = *arg;\n    int\t\tret;\n    int\t\tdid_emsg_before = did_emsg;\n    int\t\tcalled_emsg_before = called_emsg;\n    evalarg_T\tevalarg;\n\n    fill_evalarg_from_eap(&evalarg, eap, eap != NULL && eap->skip);\n\n    ret = eval1(arg, rettv, &evalarg);\n    if (ret == FAIL)\n    {\n\t// Report the invalid expression unless the expression evaluation has\n\t// been cancelled due to an aborting error, an interrupt, or an\n\t// exception, or we already gave a more specific error.\n\t// Also check called_emsg for when using assert_fails().\n\tif (!aborting() && did_emsg == did_emsg_before\n\t\t\t\t\t  && called_emsg == called_emsg_before)\n\t    semsg(_(e_invalid_expression_str), start);\n    }\n    clear_evalarg(&evalarg, eap);\n    return ret;\n}\n\n/*\n * Return whether a typval is a valid expression to pass to eval_expr_typval()\n * or eval_expr_to_bool().  An empty string returns FALSE;\n */\n    int\neval_expr_valid_arg(typval_T *tv)\n{\n    return tv->v_type != VAR_UNKNOWN\n\t    && (tv->v_type != VAR_STRING\n\t\t  || (tv->vval.v_string != NULL && *tv->vval.v_string != NUL));\n}\n\n/*\n * When calling eval_expr_typval() many times we only need one funccall_T.\n * Returns NULL when no funccall_T is to be used.\n * When returning non-NULL remove_funccal() must be called later.\n */\n    funccall_T *\neval_expr_get_funccal(typval_T *expr, typval_T *rettv)\n{\n    if (expr->v_type != VAR_PARTIAL)\n\treturn NULL;\n\n    partial_T *partial = expr->vval.v_partial;\n    if (partial == NULL)\n\treturn NULL;\n    if (partial->pt_func == NULL\n\t    || partial->pt_func->uf_def_status == UF_NOT_COMPILED)\n\treturn NULL;\n\n    return create_funccal(partial->pt_func, rettv);\n}\n\n/*\n * Evaluate an expression, which can be a function, partial or string.\n * Pass arguments \"argv[argc]\".\n * \"fc_arg\" is from eval_expr_get_funccal() or NULL;\n * Return the result in \"rettv\" and OK or FAIL.\n */\n    int\neval_expr_typval(\n\ttypval_T    *expr,\n\ttypval_T    *argv,\n\tint\t    argc,\n\tfunccall_T  *fc_arg,\n\ttypval_T    *rettv)\n{\n    char_u\t*s;\n    char_u\tbuf[NUMBUFLEN];\n    funcexe_T\tfuncexe;\n\n    if (expr->v_type == VAR_FUNC)\n    {\n\ts = expr->vval.v_string;\n\tif (s == NULL || *s == NUL)\n\t    return FAIL;\n\tCLEAR_FIELD(funcexe);\n\tfuncexe.fe_evaluate = TRUE;\n\tif (call_func(s, -1, rettv, argc, argv, &funcexe) == FAIL)\n\t    return FAIL;\n    }\n    else if (expr->v_type == VAR_PARTIAL)\n    {\n\tpartial_T   *partial = expr->vval.v_partial;\n\n\tif (partial == NULL)\n\t    return FAIL;\n\n\tif (partial->pt_func != NULL\n\t\t\t  && partial->pt_func->uf_def_status != UF_NOT_COMPILED)\n\t{\n\t    funccall_T\t*fc = fc_arg != NULL ? fc_arg\n\t\t\t\t     : create_funccal(partial->pt_func, rettv);\n\t    int\t\tr;\n\n\t    if (fc == NULL)\n\t\treturn FAIL;\n\n\t    // Shortcut to call a compiled function with minimal overhead.\n\t    r = call_def_function(partial->pt_func, argc, argv,\n\t\t\t\t    DEF_USE_PT_ARGV, partial, NULL, fc, rettv);\n\t    if (fc_arg == NULL)\n\t\tremove_funccal();\n\t    if (r == FAIL)\n\t\treturn FAIL;\n\t}\n\telse\n\t{\n\t    s = partial_name(partial);\n\t    if (s == NULL || *s == NUL)\n\t\treturn FAIL;\n\t    CLEAR_FIELD(funcexe);\n\t    funcexe.fe_evaluate = TRUE;\n\t    funcexe.fe_partial = partial;\n\t    if (call_func(s, -1, rettv, argc, argv, &funcexe) == FAIL)\n\t\treturn FAIL;\n\t}\n    }\n    else if (expr->v_type == VAR_INSTR)\n    {\n\treturn exe_typval_instr(expr, rettv);\n    }\n    else\n    {\n\ts = tv_get_string_buf_chk_strict(expr, buf, in_vim9script());\n\tif (s == NULL)\n\t    return FAIL;\n\ts = skipwhite(s);\n\tif (eval1_emsg(&s, rettv, NULL) == FAIL)\n\t    return FAIL;\n\tif (*skipwhite(s) != NUL)  // check for trailing chars after expr\n\t{\n\t    clear_tv(rettv);\n\t    semsg(_(e_invalid_expression_str), s);\n\t    return FAIL;\n\t}\n    }\n    return OK;\n}\n\n/*\n * Like eval_to_bool() but using a typval_T instead of a string.\n * Works for string, funcref and partial.\n */\n    int\neval_expr_to_bool(typval_T *expr, int *error)\n{\n    typval_T\trettv;\n    int\t\tres;\n\n    if (eval_expr_typval(expr, NULL, 0, NULL, &rettv) == FAIL)\n    {\n\t*error = TRUE;\n\treturn FALSE;\n    }\n    res = (tv_get_bool_chk(&rettv, error) != 0);\n    clear_tv(&rettv);\n    return res;\n}\n\n/*\n * Top level evaluation function, returning a string.  If \"skip\" is TRUE,\n * only parsing to \"nextcmd\" is done, without reporting errors.  Return\n * pointer to allocated memory, or NULL for failure or when \"skip\" is TRUE.\n */\n    char_u *\neval_to_string_skip(\n    char_u\t*arg,\n    exarg_T\t*eap,\n    int\t\tskip)\t    // only parse, don't execute\n{\n    typval_T\ttv;\n    char_u\t*retval;\n    evalarg_T\tevalarg;\n\n    fill_evalarg_from_eap(&evalarg, eap, skip);\n    if (skip)\n\t++emsg_skip;\n    if (eval0(arg, &tv, eap, &evalarg) == FAIL || skip)\n\tretval = NULL;\n    else\n    {\n\tretval = vim_strsave(tv_get_string(&tv));\n\tclear_tv(&tv);\n    }\n    if (skip)\n\t--emsg_skip;\n    clear_evalarg(&evalarg, eap);\n\n    return retval;\n}\n\n/*\n * Initialize \"evalarg\" for use.\n */\n    void\ninit_evalarg(evalarg_T *evalarg)\n{\n    CLEAR_POINTER(evalarg);\n    ga_init2(&evalarg->eval_tofree_ga, sizeof(char_u *), 20);\n}\n\n/*\n * If \"evalarg->eval_tofree\" is not NULL free it later.\n * Caller is expected to overwrite \"evalarg->eval_tofree\" next.\n */\n    static void\nfree_eval_tofree_later(evalarg_T *evalarg)\n{\n    if (evalarg->eval_tofree == NULL)\n\treturn;\n\n    if (ga_grow(&evalarg->eval_tofree_ga, 1) == OK)\n\t((char_u **)evalarg->eval_tofree_ga.ga_data)\n\t    [evalarg->eval_tofree_ga.ga_len++]\n\t    = evalarg->eval_tofree;\n    else\n\tvim_free(evalarg->eval_tofree);\n}\n\n/*\n * After using \"evalarg\" filled from \"eap\": free the memory.\n */\n    void\nclear_evalarg(evalarg_T *evalarg, exarg_T *eap)\n{\n    if (evalarg == NULL)\n\treturn;\n\n    garray_T *etga = &evalarg->eval_tofree_ga;\n\n    if (evalarg->eval_tofree != NULL || evalarg->eval_using_cmdline)\n    {\n\tif (eap != NULL)\n\t{\n\t    // We may need to keep the original command line, e.g. for\n\t    // \":let\" it has the variable names.  But we may also need\n\t    // the new one, \"nextcmd\" points into it.  Keep both.\n\t    vim_free(eap->cmdline_tofree);\n\t    eap->cmdline_tofree = *eap->cmdlinep;\n\n\t    if (evalarg->eval_using_cmdline && etga->ga_len > 0)\n\t    {\n\t\t// \"nextcmd\" points into the last line in eval_tofree_ga,\n\t\t// need to keep it around.\n\t\t--etga->ga_len;\n\t\t*eap->cmdlinep = ((char_u **)etga->ga_data)[etga->ga_len];\n\t\tvim_free(evalarg->eval_tofree);\n\t    }\n\t    else\n\t\t*eap->cmdlinep = evalarg->eval_tofree;\n\t}\n\telse\n\t    vim_free(evalarg->eval_tofree);\n\tevalarg->eval_tofree = NULL;\n    }\n\n    ga_clear_strings(etga);\n    VIM_CLEAR(evalarg->eval_tofree_lambda);\n}\n\n/*\n * Skip over an expression at \"*pp\".\n * Return FAIL for an error, OK otherwise.\n */\n    int\nskip_expr(char_u **pp, evalarg_T *evalarg)\n{\n    typval_T\trettv;\n\n    *pp = skipwhite(*pp);\n    return eval1(pp, &rettv, evalarg);\n}\n\n/*\n * Skip over an expression at \"*arg\".\n * If in Vim9 script and line breaks are encountered, the lines are\n * concatenated.  \"evalarg->eval_tofree\" will be set accordingly.\n * \"arg\" is advanced to just after the expression.\n * \"start\" is set to the start of the expression, \"end\" to just after the end.\n * Also when the expression is copied to allocated memory.\n * Return FAIL for an error, OK otherwise.\n */\n    int\nskip_expr_concatenate(\n\tchar_u\t    **arg,\n\tchar_u\t    **start,\n\tchar_u\t    **end,\n\tevalarg_T   *evalarg)\n{\n    typval_T\trettv;\n    int\t\tres;\n    int\t\tvim9script = in_vim9script();\n    garray_T    *gap = evalarg == NULL ? NULL : &evalarg->eval_ga;\n    garray_T    *freegap = evalarg == NULL ? NULL : &evalarg->eval_freega;\n    int\t\tsave_flags = evalarg == NULL ? 0 : evalarg->eval_flags;\n    int\t\tevaluate = evalarg == NULL\n\t\t\t       ? FALSE : (evalarg->eval_flags & EVAL_EVALUATE);\n\n    if (vim9script && evaluate\n\t       && (evalarg->eval_cookie != NULL || evalarg->eval_cctx != NULL))\n    {\n\tga_init2(gap, sizeof(char_u *), 10);\n\t// leave room for \"start\"\n\tif (ga_grow(gap, 1) == OK)\n\t    ++gap->ga_len;\n\tga_init2(freegap, sizeof(char_u *), 10);\n    }\n    *start = *arg;\n\n    // Don't evaluate the expression.\n    if (evalarg != NULL)\n\tevalarg->eval_flags &= ~EVAL_EVALUATE;\n    *arg = skipwhite(*arg);\n    res = eval1(arg, &rettv, evalarg);\n    *end = *arg;\n    if (evalarg != NULL)\n\tevalarg->eval_flags = save_flags;\n\n    if (vim9script && evaluate\n\t    && (evalarg->eval_cookie != NULL || evalarg->eval_cctx != NULL))\n    {\n\tif (evalarg->eval_ga.ga_len == 1)\n\t{\n\t    // just the one line, no need to concatenate\n\t    ga_clear(gap);\n\t    gap->ga_itemsize = 0;\n\t}\n\telse\n\t{\n\t    char_u\t    *p;\n\t    size_t\t    endoff = STRLEN(*arg);\n\n\t    // Line breaks encountered, concatenate all the lines.\n\t    *((char_u **)gap->ga_data) = *start;\n\t    p = ga_concat_strings(gap, \" \");\n\n\t    // free the lines only when using getsourceline()\n\t    if (evalarg->eval_cookie != NULL)\n\t    {\n\t\t// Do not free the first line, the caller can still use it.\n\t\t*((char_u **)gap->ga_data) = NULL;\n\t\t// Do not free the last line, \"arg\" points into it, free it\n\t\t// later.  Also free \"eval_tofree\" later if needed.\n\t\tfree_eval_tofree_later(evalarg);\n\t\tevalarg->eval_tofree =\n\t\t\t\t    ((char_u **)gap->ga_data)[gap->ga_len - 1];\n\t\t((char_u **)gap->ga_data)[gap->ga_len - 1] = NULL;\n\t\tga_clear_strings(gap);\n\t    }\n\t    else\n\t    {\n\t\tga_clear(gap);\n\n\t\t// free lines that were explicitly marked for freeing\n\t\tga_clear_strings(freegap);\n\t    }\n\n\t    gap->ga_itemsize = 0;\n\t    if (p == NULL)\n\t\treturn FAIL;\n\t    *start = p;\n\t    vim_free(evalarg->eval_tofree_lambda);\n\t    evalarg->eval_tofree_lambda = p;\n\t    // Compute \"end\" relative to the end.\n\t    *end = *start + STRLEN(*start) - endoff;\n\t}\n    }\n\n    return res;\n}\n\n/*\n * Convert \"tv\" to a string.\n * When \"convert\" is TRUE convert a List into a sequence of lines and convert\n * a Float to a String.\n * Returns an allocated string (NULL when out of memory).\n */\n    char_u *\ntypval2string(typval_T *tv, int convert)\n{\n    garray_T\tga;\n    char_u\t*retval;\n    char_u\tnumbuf[NUMBUFLEN];\n\n    if (convert && tv->v_type == VAR_LIST)\n    {\n\tga_init2(&ga, sizeof(char), 80);\n\tif (tv->vval.v_list != NULL)\n\t{\n\t    list_join(&ga, tv->vval.v_list, (char_u *)\"\\n\", TRUE, FALSE, 0);\n\t    if (tv->vval.v_list->lv_len > 0)\n\t\tga_append(&ga, NL);\n\t}\n\tga_append(&ga, NUL);\n\tretval = (char_u *)ga.ga_data;\n    }\n    else if (convert && tv->v_type == VAR_FLOAT)\n    {\n\tvim_snprintf((char *)numbuf, NUMBUFLEN, \"%g\", tv->vval.v_float);\n\tretval = vim_strsave(numbuf);\n    }\n    else\n\tretval = vim_strsave(tv_get_string(tv));\n    return retval;\n}\n\n/*\n * Top level evaluation function, returning a string.  Does not handle line\n * breaks.\n * When \"convert\" is TRUE convert a List into a sequence of lines and convert\n * a Float to a String.\n * Return pointer to allocated memory, or NULL for failure.\n */\n    char_u *\neval_to_string_eap(\n    char_u\t*arg,\n    int\t\tconvert,\n    exarg_T\t*eap,\n    int\t\tuse_simple_function)\n{\n    typval_T\ttv;\n    char_u\t*retval;\n    evalarg_T\tevalarg;\n    int\t\tr;\n\n    fill_evalarg_from_eap(&evalarg, eap, eap != NULL && eap->skip);\n    if (use_simple_function)\n\tr = eval0_simple_funccal(arg, &tv, NULL, &evalarg);\n    else\n\tr = eval0(arg, &tv, NULL, &evalarg);\n    if (r == FAIL)\n\tretval = NULL;\n    else\n    {\n\tretval = typval2string(&tv, convert);\n\tclear_tv(&tv);\n    }\n    clear_evalarg(&evalarg, NULL);\n\n    return retval;\n}\n\n    char_u *\neval_to_string(\n    char_u\t*arg,\n    int\t\tconvert,\n    int\t\tuse_simple_function)\n{\n    return eval_to_string_eap(arg, convert, NULL, use_simple_function);\n}\n\n/*\n * Call eval_to_string() without using current local variables and using\n * textlock.  When \"use_sandbox\" is TRUE use the sandbox.\n * Use legacy Vim script syntax.\n */\n    char_u *\neval_to_string_safe(\n    char_u\t*arg,\n    int\t\tuse_sandbox,\n    int\t\tkeep_script_version,\n    int\t\tuse_simple_function)\n{\n    char_u\t*retval;\n    funccal_entry_T funccal_entry;\n    int\t\tsave_sc_version = current_sctx.sc_version;\n    int\t\tsave_garbage = may_garbage_collect;\n\n    if (!keep_script_version)\n\tcurrent_sctx.sc_version = 1;\n    save_funccal(&funccal_entry);\n    if (use_sandbox)\n\t++sandbox;\n    ++textlock;\n    may_garbage_collect = FALSE;\n    retval = eval_to_string(arg, FALSE, use_simple_function);\n    if (use_sandbox)\n\t--sandbox;\n    --textlock;\n    may_garbage_collect = save_garbage;\n    restore_funccal();\n    current_sctx.sc_version = save_sc_version;\n    return retval;\n}\n\n/*\n * Top level evaluation function, returning a number.\n * Evaluates \"expr\" silently.\n * Returns -1 for an error.\n */\n    varnumber_T\neval_to_number(char_u *expr, int use_simple_function)\n{\n    typval_T\trettv;\n    varnumber_T\tretval;\n    char_u\t*p = skipwhite(expr);\n    int\t\tr = NOTDONE;\n\n    ++emsg_off;\n\n    if (use_simple_function)\n\tr = may_call_simple_func(expr, &rettv);\n    if (r == NOTDONE)\n\tr = eval1(&p, &rettv, &EVALARG_EVALUATE);\n    if (r == FAIL)\n\tretval = -1;\n    else\n    {\n\tretval = tv_get_number_chk(&rettv, NULL);\n\tclear_tv(&rettv);\n    }\n    --emsg_off;\n\n    return retval;\n}\n\n/*\n * Top level evaluation function.\n * Returns an allocated typval_T with the result.\n * Returns NULL when there is an error.\n */\n    typval_T *\neval_expr(char_u *arg, exarg_T *eap)\n{\n    return eval_expr_ext(arg, eap, FALSE);\n}\n\n    typval_T *\neval_expr_ext(char_u *arg, exarg_T *eap, int use_simple_function)\n{\n    typval_T\t*tv;\n    evalarg_T\tevalarg;\n\n    fill_evalarg_from_eap(&evalarg, eap, eap != NULL && eap->skip);\n\n    tv = ALLOC_ONE(typval_T);\n    if (tv != NULL)\n    {\n\tint\tr = NOTDONE;\n\n\tif (use_simple_function)\n\t    r = eval0_simple_funccal(arg, tv, eap, &evalarg);\n\tif (r == NOTDONE)\n\t    r = eval0(arg, tv, eap, &evalarg);\n\n\tif (r == FAIL)\n\t    VIM_CLEAR(tv);\n    }\n\n    clear_evalarg(&evalarg, eap);\n    return tv;\n}\n\n/*\n * \"*arg\" points to what can be a function name in the form of \"import.Name\" or\n * \"Funcref\".  Return the name of the function.  Set \"tofree\" to something that\n * was allocated.\n * If \"verbose\" is FALSE no errors are given.\n * Return NULL for any failure.\n */\n    static char_u *\nderef_function_name(\n\t    char_u\t**arg,\n\t    char_u\t**tofree,\n\t    evalarg_T\t*evalarg,\n\t    int\t\tverbose)\n{\n    typval_T\tref;\n    char_u\t*name = *arg;\n    int\t\tsave_flags = 0;\n\n    ref.v_type = VAR_UNKNOWN;\n    if (evalarg != NULL)\n    {\n\t// need to evaluate this to get an import, like in \"a.Func\"\n\tsave_flags = evalarg->eval_flags;\n\tevalarg->eval_flags |= EVAL_EVALUATE;\n    }\n    if (eval9(arg, &ref, evalarg, FALSE) == FAIL)\n    {\n\tdictitem_T\t*v;\n\n\t// If <SID>VarName was used it would not be found, try another way.\n\tv = find_var_also_in_script(name, NULL, FALSE);\n\tif (v == NULL)\n\t{\n\t    name = NULL;\n\t    goto theend;\n\t}\n\tcopy_tv(&v->di_tv, &ref);\n    }\n    if (*skipwhite(*arg) != NUL)\n    {\n\tif (verbose)\n\t    semsg(_(e_trailing_characters_str), *arg);\n\tname = NULL;\n    }\n    else if (ref.v_type == VAR_FUNC && ref.vval.v_string != NULL)\n    {\n\tname = ref.vval.v_string;\n\tref.vval.v_string = NULL;\n\t*tofree = name;\n    }\n    else if (ref.v_type == VAR_PARTIAL && ref.vval.v_partial != NULL)\n    {\n\tif (ref.vval.v_partial->pt_argc > 0\n\t\t|| ref.vval.v_partial->pt_dict != NULL)\n\t{\n\t    if (verbose)\n\t\temsg(_(e_cannot_use_partial_here));\n\t    name = NULL;\n\t}\n\telse\n\t{\n\t    name = vim_strsave(partial_name(ref.vval.v_partial));\n\t    *tofree = name;\n\t}\n    }\n    else\n    {\n\tif (verbose)\n\t    semsg(_(e_not_callable_type_str), name);\n\tname = NULL;\n    }\n\ntheend:\n    clear_tv(&ref);\n    if (evalarg != NULL)\n\tevalarg->eval_flags = save_flags;\n    return name;\n}\n\n/*\n * Call some Vim script function and return the result in \"*rettv\".\n * Uses argv[0] to argv[argc - 1] for the function arguments.  argv[argc]\n * should have type VAR_UNKNOWN.\n * Returns OK or FAIL.\n */\n    int\ncall_vim_function(\n    char_u      *func,\n    int\t\targc,\n    typval_T\t*argv,\n    typval_T\t*rettv)\n{\n    int\t\tret;\n    funcexe_T\tfuncexe;\n    char_u\t*arg;\n    char_u\t*name;\n    char_u\t*tofree = NULL;\n    int\t\tignore_errors;\n\n    rettv->v_type = VAR_UNKNOWN;\t\t// clear_tv() uses this\n    CLEAR_FIELD(funcexe);\n    funcexe.fe_firstline = curwin->w_cursor.lnum;\n    funcexe.fe_lastline = curwin->w_cursor.lnum;\n    funcexe.fe_evaluate = TRUE;\n\n    // The name might be \"import.Func\" or \"Funcref\".  We don't know, we need to\n    // ignore errors for an undefined name.  But we do want errors when an\n    // autoload script has errors.  Guess that when there is a dot in the name\n    // showing errors is the right choice.\n    ignore_errors = vim_strchr(func, '.') == NULL;\n    arg = func;\n    if (ignore_errors)\n\t++emsg_off;\n    name = deref_function_name(&arg, &tofree, &EVALARG_EVALUATE, FALSE);\n    if (ignore_errors)\n\t--emsg_off;\n    if (name == NULL)\n\tname = func;\n\n    ret = call_func(name, -1, rettv, argc, argv, &funcexe);\n\n    if (ret == FAIL)\n\tclear_tv(rettv);\n    vim_free(tofree);\n\n    return ret;\n}\n\n/*\n * Call Vim script function \"func\" and return the result as a string.\n * Uses \"argv[0]\" to \"argv[argc - 1]\" for the function arguments. \"argv[argc]\"\n * should have type VAR_UNKNOWN.\n * Returns NULL when calling the function fails.\n */\n    void *\ncall_func_retstr(\n    char_u      *func,\n    int\t\targc,\n    typval_T\t*argv)\n{\n    typval_T\trettv;\n    char_u\t*retval;\n\n    if (call_vim_function(func, argc, argv, &rettv) == FAIL)\n\treturn NULL;\n\n    retval = vim_strsave(tv_get_string(&rettv));\n    clear_tv(&rettv);\n    return retval;\n}\n\n/*\n * Call Vim script function \"func\" and return the result as a List.\n * Uses \"argv\" and \"argc\" as call_func_retstr().\n * Returns NULL when there is something wrong.\n * Gives an error when the returned value is not a list.\n */\n    void *\ncall_func_retlist(\n    char_u      *func,\n    int\t\targc,\n    typval_T\t*argv)\n{\n    typval_T\trettv;\n\n    if (call_vim_function(func, argc, argv, &rettv) == FAIL)\n\treturn NULL;\n\n    if (rettv.v_type != VAR_LIST)\n    {\n\tsemsg(_(e_custom_list_completion_function_does_not_return_list_but_str),\n\t\tvartype_name(rettv.v_type));\n\tclear_tv(&rettv);\n\treturn NULL;\n    }\n\n    return rettv.vval.v_list;\n}\n\n#if defined(FEAT_FOLDING) || defined(PROTO)\n/*\n * Evaluate \"arg\", which is 'foldexpr'.\n * Note: caller must set \"curwin\" to match \"arg\".\n * Returns the foldlevel, and any character preceding it in \"*cp\".  Doesn't\n * give error messages.\n */\n    int\neval_foldexpr(win_T *wp, int *cp)\n{\n    char_u\t*arg;\n    typval_T\ttv;\n    varnumber_T\tretval;\n    char_u\t*s;\n    sctx_T\tsaved_sctx = current_sctx;\n    int\t\tuse_sandbox = was_set_insecurely((char_u *)\"foldexpr\",\n\t\t\t\t\t\t\t\t    OPT_LOCAL);\n\n    arg = skipwhite(wp->w_p_fde);\n    current_sctx = wp->w_p_script_ctx[WV_FDE];\n\n    ++emsg_off;\n    if (use_sandbox)\n\t++sandbox;\n    ++textlock;\n    *cp = NUL;\n\n    // Evaluate the expression.  If the expression is \"FuncName()\" call the\n    // function directly.\n    if (eval0_simple_funccal(arg, &tv, NULL, &EVALARG_EVALUATE) == FAIL)\n\tretval = 0;\n    else\n    {\n\t// If the result is a number, just return the number.\n\tif (tv.v_type == VAR_NUMBER)\n\t    retval = tv.vval.v_number;\n\telse if (tv.v_type != VAR_STRING || tv.vval.v_string == NULL)\n\t    retval = 0;\n\telse\n\t{\n\t    // If the result is a string, check if there is a non-digit before\n\t    // the number.\n\t    s = tv.vval.v_string;\n\t    if (!VIM_ISDIGIT(*s) && *s != '-')\n\t\t*cp = *s++;\n\t    retval = atol((char *)s);\n\t}\n\tclear_tv(&tv);\n    }\n    --emsg_off;\n    if (use_sandbox)\n\t--sandbox;\n    --textlock;\n    clear_evalarg(&EVALARG_EVALUATE, NULL);\n    current_sctx = saved_sctx;\n\n    return (int)retval;\n}\n#endif\n\n/*\n * Get an lval: variable, Dict item or List item that can be assigned a value\n * to: \"name\", \"na{me}\", \"name[expr]\", \"name[expr:expr]\", \"name[expr][expr]\",\n * \"name.key\", \"name.key[expr]\" etc.\n * Indexing only works if \"name\" is an existing List or Dictionary.\n * \"name\" points to the start of the name.\n * If \"rettv\" is not NULL it points to the value to be assigned.\n * \"unlet\" is TRUE for \":unlet\": slightly different behavior when something is\n * wrong; must end in space or cmd separator.\n *\n * flags:\n *  GLV_QUIET:       do not give error messages\n *  GLV_READ_ONLY:   will not change the variable\n *  GLV_NO_AUTOLOAD: do not use script autoloading\n *\n * Returns a pointer to just after the name, including indexes.\n * When an evaluation error occurs \"lp->ll_name\" is NULL;\n * Returns NULL for a parsing error.  Still need to free items in \"lp\"!\n */\n    char_u *\nget_lval(\n    char_u\t*name,\n    typval_T\t*rettv,\n    lval_T\t*lp,\n    int\t\tunlet,\n    int\t\tskip,\n    int\t\tflags,\t    // GLV_ values\n    int\t\tfne_flags)  // flags for find_name_end()\n{\n    char_u\t*p;\n    char_u\t*expr_start, *expr_end;\n    int\t\tcc;\n    dictitem_T\t*v;\n    typval_T\tvar1;\n    typval_T\tvar2;\n    int\t\tempty1 = FALSE;\n    char_u\t*key = NULL;\n    int\t\tlen;\n    hashtab_T\t*ht = NULL;\n    int\t\tquiet = flags & GLV_QUIET;\n    int\t\twriting;\n    int\t\tvim9script = in_vim9script();\n\n    // Clear everything in \"lp\".\n    CLEAR_POINTER(lp);\n\n    if (skip || (flags & GLV_COMPILING))\n    {\n\t// When skipping or compiling just find the end of the name.\n\tlp->ll_name = name;\n\tlp->ll_name_end = find_name_end(name, NULL, NULL,\n\t\t\t\t\t\t      FNE_INCL_BR | fne_flags);\n\treturn lp->ll_name_end;\n    }\n\n    // Cannot use \"s:var\" at the Vim9 script level.  \"s: type\" is OK.\n    if (vim9script && at_script_level()\n\t\t  && name[0] == 's' && name[1] == ':' && !VIM_ISWHITE(name[2]))\n    {\n\tsemsg(_(e_cannot_use_s_colon_in_vim9_script_str), name);\n\treturn NULL;\n    }\n\n    // Find the end of the name.\n    p = find_name_end(name, &expr_start, &expr_end, fne_flags);\n    lp->ll_name_end = p;\n    if (expr_start != NULL)\n    {\n\t// Don't expand the name when we already know there is an error.\n\tif (unlet && !VIM_ISWHITE(*p) && !ends_excmd(*p)\n\t\t\t\t\t\t    && *p != '[' && *p != '.')\n\t{\n\t    semsg(_(e_trailing_characters_str), p);\n\t    return NULL;\n\t}\n\n\tlp->ll_exp_name = make_expanded_name(name, expr_start, expr_end, p);\n\tif (lp->ll_exp_name == NULL)\n\t{\n\t    // Report an invalid expression in braces, unless the\n\t    // expression evaluation has been cancelled due to an\n\t    // aborting error, an interrupt, or an exception.\n\t    if (!aborting() && !quiet)\n\t    {\n\t\temsg_severe = TRUE;\n\t\tsemsg(_(e_invalid_argument_str), name);\n\t\treturn NULL;\n\t    }\n\t}\n\tlp->ll_name = lp->ll_exp_name;\n    }\n    else\n    {\n\tlp->ll_name = name;\n\n\tif (vim9script)\n\t{\n\t    // \"a: type\" is declaring variable \"a\" with a type, not \"a:\".\n\t    // However, \"g:[key]\" is indexing a dictionary.\n\t    if (p == name + 2 && p[-1] == ':' && *p != '[')\n\t    {\n\t\t--p;\n\t\tlp->ll_name_end = p;\n\t    }\n\t    if (*p == ':')\n\t    {\n\t\tchar_u\t    *tp = skipwhite(p + 1);\n\n\t\tif (is_scoped_variable(name))\n\t\t{\n\t\t    semsg(_(e_cannot_use_type_with_this_variable_str), name);\n\t\t    return NULL;\n\t\t}\n\t\tif (tp == p + 1 && !quiet)\n\t\t{\n\t\t    semsg(_(e_white_space_required_after_str_str), \":\", p);\n\t\t    return NULL;\n\t\t}\n\t\tif (!SCRIPT_ID_VALID(current_sctx.sc_sid))\n\t\t{\n\t\t    semsg(_(e_using_type_not_in_script_context_str), p);\n\t\t    return NULL;\n\t\t}\n\n\t\t// parse the type after the name\n\t\tlp->ll_type = parse_type(&tp,\n\t\t\t       &SCRIPT_ITEM(current_sctx.sc_sid)->sn_type_list,\n\t\t\t       !quiet);\n\t\tif (lp->ll_type == NULL && !quiet)\n\t\t    return NULL;\n\t\tlp->ll_name_end = tp;\n\t    }\n\t}\n    }\n    if (lp->ll_name == NULL)\n\treturn p;\n\n    if (*p == '.')\n    {\n\timported_T *import = find_imported(lp->ll_name, p - lp->ll_name, TRUE);\n\n\tif (import != NULL)\n\t{\n\t    ufunc_T *ufunc;\n\t    type_T *type;\n\n\t    import_check_sourced_sid(&import->imp_sid);\n\t    lp->ll_sid = import->imp_sid;\n\t    lp->ll_name = skipwhite(p + 1);\n\t    p = find_name_end(lp->ll_name, NULL, NULL, fne_flags);\n\t    lp->ll_name_end = p;\n\n\t    // check the item is exported\n\t    cc = *p;\n\t    *p = NUL;\n\t    if (find_exported(import->imp_sid, lp->ll_name, &ufunc, &type,\n\t\t\t\t\t\t       NULL, NULL, TRUE) == -1)\n\t    {\n\t\t*p = cc;\n\t\treturn NULL;\n\t    }\n\t    *p = cc;\n\t}\n    }\n\n    // Without [idx] or .key we are done.\n    if ((*p != '[' && *p != '.'))\n\treturn p;\n\n    if (vim9script && lval_root != NULL)\n    {\n\t// using local variable\n\tlp->ll_tv = lval_root;\n\tv = NULL;\n    }\n    else\n    {\n\tcc = *p;\n\t*p = NUL;\n\t// When we would write to the variable pass &ht and prevent autoload.\n\twriting = !(flags & GLV_READ_ONLY);\n\tv = find_var(lp->ll_name, writing ? &ht : NULL,\n\t\t\t\t\t (flags & GLV_NO_AUTOLOAD) || writing);\n\tif (v == NULL && !quiet)\n\t    semsg(_(e_undefined_variable_str), lp->ll_name);\n\t*p = cc;\n\tif (v == NULL)\n\t    return NULL;\n\tlp->ll_tv = &v->di_tv;\n    }\n\n    if (vim9script && (flags & GLV_NO_DECL) == 0)\n    {\n\tif (!quiet)\n\t    semsg(_(e_variable_already_declared_str), lp->ll_name);\n\treturn NULL;\n    }\n\n    /*\n     * Loop until no more [idx] or .key is following.\n     */\n    var1.v_type = VAR_UNKNOWN;\n    var2.v_type = VAR_UNKNOWN;\n    while (*p == '[' || (*p == '.' && p[1] != '=' && p[1] != '.'))\n    {\n\tvartype_T v_type = lp->ll_tv->v_type;\n\n\tif (*p == '.' && v_type != VAR_DICT\n\t\t      && v_type != VAR_OBJECT\n\t\t      && v_type != VAR_CLASS)\n\t{\n\t    if (!quiet)\n\t\tsemsg(_(e_dot_can_only_be_used_on_dictionary_str), name);\n\t    return NULL;\n\t}\n\tif (v_type != VAR_LIST\n\t\t&& v_type != VAR_DICT\n\t\t&& v_type != VAR_BLOB\n\t\t&& v_type != VAR_OBJECT\n\t\t&& v_type != VAR_CLASS)\n\t{\n\t    if (!quiet)\n\t\temsg(_(e_can_only_index_list_dictionary_or_blob));\n\t    return NULL;\n\t}\n\n\t// A NULL list/blob works like an empty list/blob, allocate one now.\n\tint r = OK;\n\tif (v_type == VAR_LIST && lp->ll_tv->vval.v_list == NULL)\n\t    r = rettv_list_alloc(lp->ll_tv);\n\telse if (v_type == VAR_BLOB\n\t\t\t\t\t     && lp->ll_tv->vval.v_blob == NULL)\n\t    r = rettv_blob_alloc(lp->ll_tv);\n\tif (r == FAIL)\n\t    return NULL;\n\n\tif (lp->ll_range)\n\t{\n\t    if (!quiet)\n\t\temsg(_(e_slice_must_come_last));\n\t    return NULL;\n\t}\n\n\tif (vim9script && lp->ll_valtype == NULL\n\t\t&& v != NULL\n\t\t&& lp->ll_tv == &v->di_tv\n\t\t&& ht != NULL && ht == get_script_local_ht())\n\t{\n\t    svar_T  *sv = find_typval_in_script(lp->ll_tv, 0, TRUE);\n\n\t    // Vim9 script local variable: get the type\n\t    if (sv != NULL)\n\t\tlp->ll_valtype = sv->sv_type;\n\t}\n\n\tlen = -1;\n\tif (*p == '.')\n\t{\n\t    key = p + 1;\n\t    for (len = 0; ASCII_ISALNUM(key[len]) || key[len] == '_'; ++len)\n\t\t;\n\t    if (len == 0)\n\t    {\n\t\tif (!quiet)\n\t\t    emsg(_(e_cannot_use_empty_key_for_dictionary));\n\t\treturn NULL;\n\t    }\n\t    p = key + len;\n\t}\n\telse\n\t{\n\t    // Get the index [expr] or the first index [expr: ].\n\t    p = skipwhite(p + 1);\n\t    if (*p == ':')\n\t\tempty1 = TRUE;\n\t    else\n\t    {\n\t\tempty1 = FALSE;\n\t\tif (eval1(&p, &var1, &EVALARG_EVALUATE) == FAIL)  // recursive!\n\t\t    return NULL;\n\t\tif (tv_get_string_chk(&var1) == NULL)\n\t\t{\n\t\t    // not a number or string\n\t\t    clear_tv(&var1);\n\t\t    return NULL;\n\t\t}\n\t\tp = skipwhite(p);\n\t    }\n\n\t    // Optionally get the second index [ :expr].\n\t    if (*p == ':')\n\t    {\n\t\tif (v_type == VAR_DICT)\n\t\t{\n\t\t    if (!quiet)\n\t\t\temsg(_(e_cannot_slice_dictionary));\n\t\t    clear_tv(&var1);\n\t\t    return NULL;\n\t\t}\n\t\tif (rettv != NULL\n\t\t\t&& !(rettv->v_type == VAR_LIST\n\t\t\t\t\t\t && rettv->vval.v_list != NULL)\n\t\t\t&& !(rettv->v_type == VAR_BLOB\n\t\t\t\t\t\t&& rettv->vval.v_blob != NULL))\n\t\t{\n\t\t    if (!quiet)\n\t\t\temsg(_(e_slice_requires_list_or_blob_value));\n\t\t    clear_tv(&var1);\n\t\t    return NULL;\n\t\t}\n\t\tp = skipwhite(p + 1);\n\t\tif (*p == ']')\n\t\t    lp->ll_empty2 = TRUE;\n\t\telse\n\t\t{\n\t\t    lp->ll_empty2 = FALSE;\n\t\t    // recursive!\n\t\t    if (eval1(&p, &var2, &EVALARG_EVALUATE) == FAIL)\n\t\t    {\n\t\t\tclear_tv(&var1);\n\t\t\treturn NULL;\n\t\t    }\n\t\t    if (tv_get_string_chk(&var2) == NULL)\n\t\t    {\n\t\t\t// not a number or string\n\t\t\tclear_tv(&var1);\n\t\t\tclear_tv(&var2);\n\t\t\treturn NULL;\n\t\t    }\n\t\t}\n\t\tlp->ll_range = TRUE;\n\t    }\n\t    else\n\t\tlp->ll_range = FALSE;\n\n\t    if (*p != ']')\n\t    {\n\t\tif (!quiet)\n\t\t    emsg(_(e_missing_closing_square_brace));\n\t\tclear_tv(&var1);\n\t\tclear_tv(&var2);\n\t\treturn NULL;\n\t    }\n\n\t    // Skip to past ']'.\n\t    ++p;\n\t}\n\n\tif (v_type == VAR_DICT)\n\t{\n\t    if (len == -1)\n\t    {\n\t\t// \"[key]\": get key from \"var1\"\n\t\tkey = tv_get_string_chk(&var1);\t// is number or string\n\t\tif (key == NULL)\n\t\t{\n\t\t    clear_tv(&var1);\n\t\t    return NULL;\n\t\t}\n\t    }\n\t    lp->ll_list = NULL;\n\n\t    // a NULL dict is equivalent with an empty dict\n\t    if (lp->ll_tv->vval.v_dict == NULL)\n\t    {\n\t\tlp->ll_tv->vval.v_dict = dict_alloc();\n\t\tif (lp->ll_tv->vval.v_dict == NULL)\n\t\t{\n\t\t    clear_tv(&var1);\n\t\t    return NULL;\n\t\t}\n\t\t++lp->ll_tv->vval.v_dict->dv_refcount;\n\t    }\n\t    lp->ll_dict = lp->ll_tv->vval.v_dict;\n\n\t    lp->ll_di = dict_find(lp->ll_dict, key, len);\n\n\t    // When assigning to a scope dictionary check that a function and\n\t    // variable name is valid (only variable name unless it is l: or\n\t    // g: dictionary). Disallow overwriting a builtin function.\n\t    if (rettv != NULL && lp->ll_dict->dv_scope != 0)\n\t    {\n\t\tint prevval;\n\n\t\tif (len != -1)\n\t\t{\n\t\t    prevval = key[len];\n\t\t    key[len] = NUL;\n\t\t}\n\t\telse\n\t\t    prevval = 0; // avoid compiler warning\n\t\tint wrong = (lp->ll_dict->dv_scope == VAR_DEF_SCOPE\n\t\t\t       && (rettv->v_type == VAR_FUNC\n\t\t\t\t\t    || rettv->v_type == VAR_PARTIAL)\n\t\t\t       && var_wrong_func_name(key, lp->ll_di == NULL))\n\t\t\t|| !valid_varname(key, -1, TRUE);\n\t\tif (len != -1)\n\t\t    key[len] = prevval;\n\t\tif (wrong)\n\t\t{\n\t\t    clear_tv(&var1);\n\t\t    return NULL;\n\t\t}\n\t    }\n\n\t    if (lp->ll_valtype != NULL)\n\t\t// use the type of the member\n\t\tlp->ll_valtype = lp->ll_valtype->tt_member;\n\n\t    if (lp->ll_di == NULL)\n\t    {\n\t\t// Can't add \"v:\" or \"a:\" variable.\n\t\tif (lp->ll_dict == get_vimvar_dict()\n\t\t\t || &lp->ll_dict->dv_hashtab == get_funccal_args_ht())\n\t\t{\n\t\t    semsg(_(e_illegal_variable_name_str), name);\n\t\t    clear_tv(&var1);\n\t\t    return NULL;\n\t\t}\n\n\t\t// Key does not exist in dict: may need to add it.\n\t\tif (*p == '[' || *p == '.' || unlet)\n\t\t{\n\t\t    if (!quiet)\n\t\t\tsemsg(_(e_key_not_present_in_dictionary_str), key);\n\t\t    clear_tv(&var1);\n\t\t    return NULL;\n\t\t}\n\t\tif (len == -1)\n\t\t    lp->ll_newkey = vim_strsave(key);\n\t\telse\n\t\t    lp->ll_newkey = vim_strnsave(key, len);\n\t\tclear_tv(&var1);\n\t\tif (lp->ll_newkey == NULL)\n\t\t    p = NULL;\n\t\tbreak;\n\t    }\n\t    // existing variable, need to check if it can be changed\n\t    else if ((flags & GLV_READ_ONLY) == 0\n\t\t\t&& (var_check_ro(lp->ll_di->di_flags, name, FALSE)\n\t\t\t  || var_check_lock(lp->ll_di->di_flags, name, FALSE)))\n\t    {\n\t\tclear_tv(&var1);\n\t\treturn NULL;\n\t    }\n\n\t    clear_tv(&var1);\n\t    lp->ll_tv = &lp->ll_di->di_tv;\n\t}\n\telse if (v_type == VAR_BLOB)\n\t{\n\t    long bloblen = blob_len(lp->ll_tv->vval.v_blob);\n\n\t    /*\n\t     * Get the number and item for the only or first index of the List.\n\t     */\n\t    if (empty1)\n\t\tlp->ll_n1 = 0;\n\t    else\n\t\t// is number or string\n\t\tlp->ll_n1 = (long)tv_get_number(&var1);\n\t    clear_tv(&var1);\n\n\t    if (check_blob_index(bloblen, lp->ll_n1, quiet) == FAIL)\n\t    {\n\t\tclear_tv(&var2);\n\t\treturn NULL;\n\t    }\n\t    if (lp->ll_range && !lp->ll_empty2)\n\t    {\n\t\tlp->ll_n2 = (long)tv_get_number(&var2);\n\t\tclear_tv(&var2);\n\t\tif (check_blob_range(bloblen, lp->ll_n1, lp->ll_n2, quiet)\n\t\t\t\t\t\t\t\t       == FAIL)\n\t\t    return NULL;\n\t    }\n\t    lp->ll_blob = lp->ll_tv->vval.v_blob;\n\t    lp->ll_tv = NULL;\n\t    break;\n\t}\n\telse if (v_type == VAR_LIST)\n\t{\n\t    /*\n\t     * Get the number and item for the only or first index of the List.\n\t     */\n\t    if (empty1)\n\t\tlp->ll_n1 = 0;\n\t    else\n\t\t// is number or string\n\t\tlp->ll_n1 = (long)tv_get_number(&var1);\n\t    clear_tv(&var1);\n\n\t    lp->ll_dict = NULL;\n\t    lp->ll_list = lp->ll_tv->vval.v_list;\n\t    lp->ll_li = check_range_index_one(lp->ll_list, &lp->ll_n1,\n\t\t\t\t     (flags & GLV_ASSIGN_WITH_OP) == 0, quiet);\n\t    if (lp->ll_li == NULL)\n\t    {\n\t\tclear_tv(&var2);\n\t\treturn NULL;\n\t    }\n\n\t    if (lp->ll_valtype != NULL)\n\t\t// use the type of the member\n\t\tlp->ll_valtype = lp->ll_valtype->tt_member;\n\n\t    /*\n\t     * May need to find the item or absolute index for the second\n\t     * index of a range.\n\t     * When no index given: \"lp->ll_empty2\" is TRUE.\n\t     * Otherwise \"lp->ll_n2\" is set to the second index.\n\t     */\n\t    if (lp->ll_range && !lp->ll_empty2)\n\t    {\n\t\tlp->ll_n2 = (long)tv_get_number(&var2);\n\t\t\t\t\t\t    // is number or string\n\t\tclear_tv(&var2);\n\t\tif (check_range_index_two(lp->ll_list,\n\t\t\t\t\t    &lp->ll_n1, lp->ll_li,\n\t\t\t\t\t    &lp->ll_n2, quiet) == FAIL)\n\t\t    return NULL;\n\t    }\n\n\t    lp->ll_tv = &lp->ll_li->li_tv;\n\t}\n\telse  // v_type == VAR_CLASS || v_type == VAR_OBJECT\n\t{\n\t    class_T *cl = (v_type == VAR_OBJECT\n\t\t\t\t\t   && lp->ll_tv->vval.v_object != NULL)\n\t\t\t    ? lp->ll_tv->vval.v_object->obj_class\n\t\t\t    : lp->ll_tv->vval.v_class;\n\t    // TODO: what if class is NULL?\n\t    if (cl != NULL)\n\t    {\n\t\tlp->ll_valtype = NULL;\n\t\tint count = v_type == VAR_OBJECT ? cl->class_obj_member_count\n\t\t\t\t\t\t: cl->class_class_member_count;\n\t\tocmember_T *members = v_type == VAR_OBJECT\n\t\t\t\t\t\t     ? cl->class_obj_members\n\t\t\t\t\t\t     : cl->class_class_members;\n\t\tfor (int i = 0; i < count; ++i)\n\t\t{\n\t\t    ocmember_T *om = members + i;\n\t\t    if (STRNCMP(om->ocm_name, key, p - key) == 0\n\t\t\t\t\t       && om->ocm_name[p - key] == NUL)\n\t\t    {\n\t\t\tswitch (om->ocm_access)\n\t\t\t{\n\t\t\t    case ACCESS_PRIVATE:\n\t\t\t\t    semsg(_(e_cannot_access_private_member_str),\n\t\t\t\t\t\t\t\t om->ocm_name);\n\t\t\t\t    return NULL;\n\t\t\t    case ACCESS_READ:\n\t\t\t\t    if (!(flags & GLV_READ_ONLY))\n\t\t\t\t    {\n\t\t\t\t\tsemsg(_(e_member_is_not_writable_str),\n\t\t\t\t\t\t\t\t om->ocm_name);\n\t\t\t\t\treturn NULL;\n\t\t\t\t    }\n\t\t\t\t    break;\n\t\t\t    case ACCESS_ALL:\n\t\t\t\t    break;\n\t\t\t}\n\n\t\t\tlp->ll_valtype = om->ocm_type;\n\n\t\t\tif (v_type == VAR_OBJECT)\n\t\t\t    lp->ll_tv = ((typval_T *)(\n\t\t\t\t\t    lp->ll_tv->vval.v_object + 1)) + i;\n\t\t\telse\n\t\t\t    lp->ll_tv = &cl->class_members_tv[i];\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\tif (lp->ll_valtype == NULL)\n\t\t{\n\t\t    if (v_type == VAR_OBJECT)\n\t\t\tsemsg(_(e_object_member_not_found_str), key);\n\t\t    else\n\t\t\tsemsg(_(e_class_member_not_found_str), key);\n\t\t    return NULL;\n\t\t}\n\t    }\n\t}\n    }\n\n    clear_tv(&var1);\n    lp->ll_name_end = p;\n    return p;\n}\n\n/*\n * Clear lval \"lp\" that was filled by get_lval().\n */\n    void\nclear_lval(lval_T *lp)\n{\n    vim_free(lp->ll_exp_name);\n    vim_free(lp->ll_newkey);\n}\n\n/*\n * Set a variable that was parsed by get_lval() to \"rettv\".\n * \"endp\" points to just after the parsed name.\n * \"op\" is NULL, \"+\" for \"+=\", \"-\" for \"-=\", \"*\" for \"*=\", \"/\" for \"/=\",\n * \"%\" for \"%=\", \".\" for \".=\" or \"=\" for \"=\".\n */\n    void\nset_var_lval(\n    lval_T\t*lp,\n    char_u\t*endp,\n    typval_T\t*rettv,\n    int\t\tcopy,\n    int\t\tflags,\t    // ASSIGN_CONST, ASSIGN_NO_DECL\n    char_u\t*op,\n    int\t\tvar_idx)    // index for \"let [a, b] = list\"\n{\n    int\t\tcc;\n    dictitem_T\t*di;\n\n    if (lp->ll_tv == NULL)\n    {\n\tcc = *endp;\n\t*endp = NUL;\n\tif (in_vim9script() && check_reserved_name(lp->ll_name, NULL) == FAIL)\n\t    return;\n\n\tif (lp->ll_blob != NULL)\n\t{\n\t    int\t    error = FALSE, val;\n\n\t    if (op != NULL && *op != '=')\n\t    {\n\t\tsemsg(_(e_wrong_variable_type_for_str_equal), op);\n\t\treturn;\n\t    }\n\t    if (value_check_lock(lp->ll_blob->bv_lock, lp->ll_name, FALSE))\n\t\treturn;\n\n\t    if (lp->ll_range && rettv->v_type == VAR_BLOB)\n\t    {\n\t\tif (lp->ll_empty2)\n\t\t    lp->ll_n2 = blob_len(lp->ll_blob) - 1;\n\n\t\tif (blob_set_range(lp->ll_blob, lp->ll_n1, lp->ll_n2,\n\t\t\t\t\t\t\t\trettv) == FAIL)\n\t\t    return;\n\t    }\n\t    else\n\t    {\n\t\tval = (int)tv_get_number_chk(rettv, &error);\n\t\tif (!error)\n\t\t    blob_set_append(lp->ll_blob, lp->ll_n1, val);\n\t    }\n\t}\n\telse if (op != NULL && *op != '=')\n\t{\n\t    typval_T tv;\n\n\t    if ((flags & (ASSIGN_CONST | ASSIGN_FINAL))\n\t\t\t\t\t     && (flags & ASSIGN_FOR_LOOP) == 0)\n\t    {\n\t\temsg(_(e_cannot_modify_existing_variable));\n\t\t*endp = cc;\n\t\treturn;\n\t    }\n\n\t    // handle +=, -=, *=, /=, %= and .=\n\t    di = NULL;\n\t    if (eval_variable(lp->ll_name, (int)STRLEN(lp->ll_name),\n\t\t\t\t lp->ll_sid, &tv, &di, EVAL_VAR_VERBOSE) == OK)\n\t    {\n\t\tif ((di == NULL\n\t\t\t || (!var_check_ro(di->di_flags, lp->ll_name, FALSE)\n\t\t\t   && !tv_check_lock(&di->di_tv, lp->ll_name, FALSE)))\n\t\t\t&& tv_op(&tv, rettv, op) == OK)\n\t\t    set_var_const(lp->ll_name, lp->ll_sid, NULL, &tv, FALSE,\n\t\t\t\t\t\t\t    ASSIGN_NO_DECL, 0);\n\t\tclear_tv(&tv);\n\t    }\n\t}\n\telse\n\t{\n\t    if (lp->ll_type != NULL && check_typval_arg_type(lp->ll_type, rettv,\n\t\t\t\t\t\t\t      NULL, 0) == FAIL)\n\t\treturn;\n\t    set_var_const(lp->ll_name, lp->ll_sid, lp->ll_type, rettv, copy,\n\t\t\t\t\t\t\t       flags, var_idx);\n\t}\n\t*endp = cc;\n    }\n    else if (value_check_lock(lp->ll_newkey == NULL\n\t\t? lp->ll_tv->v_lock\n\t\t: lp->ll_tv->vval.v_dict->dv_lock, lp->ll_name, FALSE))\n\t;\n    else if (lp->ll_range)\n    {\n\tif ((flags & (ASSIGN_CONST | ASSIGN_FINAL))\n\t\t\t\t\t     && (flags & ASSIGN_FOR_LOOP) == 0)\n\t{\n\t    emsg(_(e_cannot_lock_range));\n\t    return;\n\t}\n\n\t(void)list_assign_range(lp->ll_list, rettv->vval.v_list,\n\t\t\t lp->ll_n1, lp->ll_n2, lp->ll_empty2, op, lp->ll_name);\n    }\n    else\n    {\n\t/*\n\t * Assign to a List, Dictionary or Object item.\n\t */\n\tif ((flags & (ASSIGN_CONST | ASSIGN_FINAL))\n\t\t\t\t\t     && (flags & ASSIGN_FOR_LOOP) == 0)\n\t{\n\t    emsg(_(e_cannot_lock_list_or_dict));\n\t    return;\n\t}\n\n\tif (lp->ll_valtype != NULL\n\t\t    && check_typval_arg_type(lp->ll_valtype, rettv,\n\t\t\t\t\t\t\t      NULL, 0) == FAIL)\n\t    return;\n\n\tif (lp->ll_newkey != NULL)\n\t{\n\t    if (op != NULL && *op != '=')\n\t    {\n\t\tsemsg(_(e_key_not_present_in_dictionary_str), lp->ll_newkey);\n\t\treturn;\n\t    }\n\t    if (dict_wrong_func_name(lp->ll_tv->vval.v_dict, rettv,\n\t\t\t\t\t\t\t\tlp->ll_newkey))\n\t\treturn;\n\n\t    // Need to add an item to the Dictionary.\n\t    di = dictitem_alloc(lp->ll_newkey);\n\t    if (di == NULL)\n\t\treturn;\n\t    if (dict_add(lp->ll_tv->vval.v_dict, di) == FAIL)\n\t    {\n\t\tvim_free(di);\n\t\treturn;\n\t    }\n\t    lp->ll_tv = &di->di_tv;\n\t}\n\telse if (op != NULL && *op != '=')\n\t{\n\t    tv_op(lp->ll_tv, rettv, op);\n\t    return;\n\t}\n\telse\n\t    clear_tv(lp->ll_tv);\n\n\t/*\n\t * Assign the value to the variable or list item.\n\t */\n\tif (copy)\n\t    copy_tv(rettv, lp->ll_tv);\n\telse\n\t{\n\t    *lp->ll_tv = *rettv;\n\t    lp->ll_tv->v_lock = 0;\n\t    init_tv(rettv);\n\t}\n    }\n}\n\n/*\n * Handle \"tv1 += tv2\", \"tv1 -= tv2\", \"tv1 *= tv2\", \"tv1 /= tv2\", \"tv1 %= tv2\"\n * and \"tv1 .= tv2\"\n * Returns OK or FAIL.\n */\n    int\ntv_op(typval_T *tv1, typval_T *tv2, char_u *op)\n{\n    varnumber_T\tn;\n    char_u\tnumbuf[NUMBUFLEN];\n    char_u\t*s;\n    int\t\tfailed = FALSE;\n\n    // Can't do anything with a Funcref or Dict on the right.\n    // v:true and friends only work with \"..=\".\n    if (tv2->v_type != VAR_FUNC && tv2->v_type != VAR_DICT\n\t\t    && ((tv2->v_type != VAR_BOOL && tv2->v_type != VAR_SPECIAL)\n\t\t\t\t\t\t\t\t|| *op == '.'))\n    {\n\tswitch (tv1->v_type)\n\t{\n\t    case VAR_UNKNOWN:\n\t    case VAR_ANY:\n\t    case VAR_VOID:\n\t    case VAR_DICT:\n\t    case VAR_FUNC:\n\t    case VAR_PARTIAL:\n\t    case VAR_BOOL:\n\t    case VAR_SPECIAL:\n\t    case VAR_JOB:\n\t    case VAR_CHANNEL:\n\t    case VAR_INSTR:\n\t    case VAR_CLASS:\n\t    case VAR_OBJECT:\n\t\tbreak;\n\n\t    case VAR_BLOB:\n\t\tif (*op != '+' || tv2->v_type != VAR_BLOB)\n\t\t    break;\n\t\t// BLOB += BLOB\n\t\tif (tv1->vval.v_blob != NULL && tv2->vval.v_blob != NULL)\n\t\t{\n\t\t    blob_T  *b1 = tv1->vval.v_blob;\n\t\t    blob_T  *b2 = tv2->vval.v_blob;\n\t\t    int\ti, len = blob_len(b2);\n\t\t    for (i = 0; i < len; i++)\n\t\t\tga_append(&b1->bv_ga, blob_get(b2, i));\n\t\t}\n\t\treturn OK;\n\n\t    case VAR_LIST:\n\t\tif (*op != '+' || tv2->v_type != VAR_LIST)\n\t\t    break;\n\t\t// List += List\n\t\tif (tv2->vval.v_list != NULL)\n\t\t{\n\t\t    if (tv1->vval.v_list == NULL)\n\t\t    {\n\t\t\ttv1->vval.v_list = tv2->vval.v_list;\n\t\t\t++tv1->vval.v_list->lv_refcount;\n\t\t    }\n\t\t    else\n\t\t\tlist_extend(tv1->vval.v_list, tv2->vval.v_list, NULL);\n\t\t}\n\t\treturn OK;\n\n\t    case VAR_NUMBER:\n\t    case VAR_STRING:\n\t\tif (tv2->v_type == VAR_LIST)\n\t\t    break;\n\t\tif (vim_strchr((char_u *)\"+-*/%\", *op) != NULL)\n\t\t{\n\t\t    // nr += nr , nr -= nr , nr *=nr , nr /= nr , nr %= nr\n\t\t    n = tv_get_number(tv1);\n\t\t    if (tv2->v_type == VAR_FLOAT)\n\t\t    {\n\t\t\tfloat_T f = n;\n\n\t\t\tif (*op == '%')\n\t\t\t    break;\n\t\t\tswitch (*op)\n\t\t\t{\n\t\t\t    case '+': f += tv2->vval.v_float; break;\n\t\t\t    case '-': f -= tv2->vval.v_float; break;\n\t\t\t    case '*': f *= tv2->vval.v_float; break;\n\t\t\t    case '/': f /= tv2->vval.v_float; break;\n\t\t\t}\n\t\t\tclear_tv(tv1);\n\t\t\ttv1->v_type = VAR_FLOAT;\n\t\t\ttv1->vval.v_float = f;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\tswitch (*op)\n\t\t\t{\n\t\t\t    case '+': n += tv_get_number(tv2); break;\n\t\t\t    case '-': n -= tv_get_number(tv2); break;\n\t\t\t    case '*': n *= tv_get_number(tv2); break;\n\t\t\t    case '/': n = num_divide(n, tv_get_number(tv2),\n\t\t\t\t\t\t\t       &failed); break;\n\t\t\t    case '%': n = num_modulus(n, tv_get_number(tv2),\n\t\t\t\t\t\t\t       &failed); break;\n\t\t\t}\n\t\t\tclear_tv(tv1);\n\t\t\ttv1->v_type = VAR_NUMBER;\n\t\t\ttv1->vval.v_number = n;\n\t\t    }\n\t\t}\n\t\telse\n\t\t{\n\t\t    if (tv2->v_type == VAR_FLOAT)\n\t\t\tbreak;\n\n\t\t    // str .= str\n\t\t    s = tv_get_string(tv1);\n\t\t    s = concat_str(s, tv_get_string_buf(tv2, numbuf));\n\t\t    clear_tv(tv1);\n\t\t    tv1->v_type = VAR_STRING;\n\t\t    tv1->vval.v_string = s;\n\t\t}\n\t\treturn failed ? FAIL : OK;\n\n\t    case VAR_FLOAT:\n\t\t{\n\t\t    float_T f;\n\n\t\t    if (*op == '%' || *op == '.'\n\t\t\t\t   || (tv2->v_type != VAR_FLOAT\n\t\t\t\t    && tv2->v_type != VAR_NUMBER\n\t\t\t\t    && tv2->v_type != VAR_STRING))\n\t\t\tbreak;\n\t\t    if (tv2->v_type == VAR_FLOAT)\n\t\t\tf = tv2->vval.v_float;\n\t\t    else\n\t\t\tf = tv_get_number(tv2);\n\t\t    switch (*op)\n\t\t    {\n\t\t\tcase '+': tv1->vval.v_float += f; break;\n\t\t\tcase '-': tv1->vval.v_float -= f; break;\n\t\t\tcase '*': tv1->vval.v_float *= f; break;\n\t\t\tcase '/': tv1->vval.v_float /= f; break;\n\t\t    }\n\t\t}\n\t\treturn OK;\n\t}\n    }\n\n    semsg(_(e_wrong_variable_type_for_str_equal), op);\n    return FAIL;\n}\n\n/*\n * Evaluate the expression used in a \":for var in expr\" command.\n * \"arg\" points to \"var\".\n * Set \"*errp\" to TRUE for an error, FALSE otherwise;\n * Return a pointer that holds the info.  Null when there is an error.\n */\n    void *\neval_for_line(\n    char_u\t*arg,\n    int\t\t*errp,\n    exarg_T\t*eap,\n    evalarg_T\t*evalarg)\n{\n    forinfo_T\t*fi;\n    char_u\t*var_list_end;\n    char_u\t*expr;\n    typval_T\ttv;\n    list_T\t*l;\n    int\t\tskip = !(evalarg->eval_flags & EVAL_EVALUATE);\n\n    *errp = TRUE;\t// default: there is an error\n\n    fi = ALLOC_CLEAR_ONE(forinfo_T);\n    if (fi == NULL)\n\treturn NULL;\n\n    var_list_end = skip_var_list(arg, TRUE, &fi->fi_varcount,\n\t\t\t\t\t\t     &fi->fi_semicolon, FALSE);\n    if (var_list_end == NULL)\n\treturn fi;\n\n    expr = skipwhite_and_linebreak(var_list_end, evalarg);\n    if (expr[0] != 'i' || expr[1] != 'n'\n\t\t\t\t  || !(expr[2] == NUL || VIM_ISWHITE(expr[2])))\n    {\n\tif (in_vim9script() && *expr == ':' && expr != var_list_end)\n\t    semsg(_(e_no_white_space_allowed_before_colon_str), expr);\n\telse\n\t    emsg(_(e_missing_in_after_for));\n\treturn fi;\n    }\n\n    if (skip)\n\t++emsg_skip;\n    expr = skipwhite_and_linebreak(expr + 2, evalarg);\n    if (eval0(expr, &tv, eap, evalarg) == OK)\n    {\n\t*errp = FALSE;\n\tif (!skip)\n\t{\n\t    if (tv.v_type == VAR_LIST)\n\t    {\n\t\tl = tv.vval.v_list;\n\t\tif (l == NULL)\n\t\t{\n\t\t    // a null list is like an empty list: do nothing\n\t\t    clear_tv(&tv);\n\t\t}\n\t\telse\n\t\t{\n\t\t    // Need a real list here.\n\t\t    CHECK_LIST_MATERIALIZE(l);\n\n\t\t    // No need to increment the refcount, it's already set for\n\t\t    // the list being used in \"tv\".\n\t\t    fi->fi_list = l;\n\t\t    list_add_watch(l, &fi->fi_lw);\n\t\t    fi->fi_lw.lw_item = l->lv_first;\n\t\t}\n\t    }\n\t    else if (tv.v_type == VAR_BLOB)\n\t    {\n\t\tfi->fi_bi = 0;\n\t\tif (tv.vval.v_blob != NULL)\n\t\t{\n\t\t    typval_T btv;\n\n\t\t    // Make a copy, so that the iteration still works when the\n\t\t    // blob is changed.\n\t\t    blob_copy(tv.vval.v_blob, &btv);\n\t\t    fi->fi_blob = btv.vval.v_blob;\n\t\t}\n\t\tclear_tv(&tv);\n\t    }\n\t    else if (tv.v_type == VAR_STRING)\n\t    {\n\t\tfi->fi_byte_idx = 0;\n\t\tfi->fi_string = tv.vval.v_string;\n\t\ttv.vval.v_string = NULL;\n\t\tif (fi->fi_string == NULL)\n\t\t    fi->fi_string = vim_strsave((char_u *)\"\");\n\t    }\n\t    else\n\t    {\n\t\temsg(_(e_string_list_or_blob_required));\n\t\tclear_tv(&tv);\n\t    }\n\t}\n    }\n    if (skip)\n\t--emsg_skip;\n    fi->fi_break_count = evalarg->eval_break_count;\n\n    return fi;\n}\n\n/*\n * Used when looping over a :for line, skip the \"in expr\" part.\n */\n    void\nskip_for_lines(void *fi_void, evalarg_T *evalarg)\n{\n    forinfo_T\t*fi = (forinfo_T *)fi_void;\n    int\t\ti;\n\n    for (i = 0; i < fi->fi_break_count; ++i)\n\teval_next_line(NULL, evalarg);\n}\n\n/*\n * Use the first item in a \":for\" list.  Advance to the next.\n * Assign the values to the variable (list).  \"arg\" points to the first one.\n * Return TRUE when a valid item was found, FALSE when at end of list or\n * something wrong.\n */\n    int\nnext_for_item(void *fi_void, char_u *arg)\n{\n    forinfo_T\t*fi = (forinfo_T *)fi_void;\n    int\t\tresult;\n    int\t\tflag = ASSIGN_FOR_LOOP | (in_vim9script()\n\t\t\t ? (ASSIGN_FINAL\n\t\t\t     // first round: error if variable exists\n\t\t\t     | (fi->fi_bi == 0 ? 0 : ASSIGN_DECL)\n\t\t\t     | ASSIGN_NO_MEMBER_TYPE\n\t\t\t     | ASSIGN_UPDATE_BLOCK_ID)\n\t\t\t : 0);\n    listitem_T\t*item;\n    int\t\tskip_assign = in_vim9script() && arg[0] == '_'\n\t\t\t\t\t\t      && !eval_isnamec(arg[1]);\n\n    if (fi->fi_blob != NULL)\n    {\n\ttypval_T\ttv;\n\n\tif (fi->fi_bi >= blob_len(fi->fi_blob))\n\t    return FALSE;\n\ttv.v_type = VAR_NUMBER;\n\ttv.v_lock = VAR_FIXED;\n\ttv.vval.v_number = blob_get(fi->fi_blob, fi->fi_bi);\n\t++fi->fi_bi;\n\tif (skip_assign)\n\t    return TRUE;\n\treturn ex_let_vars(arg, &tv, TRUE, fi->fi_semicolon,\n\t\t\t\t\t    fi->fi_varcount, flag, NULL) == OK;\n    }\n\n    if (fi->fi_string != NULL)\n    {\n\ttypval_T\ttv;\n\tint\t\tlen;\n\n\tlen = mb_ptr2len(fi->fi_string + fi->fi_byte_idx);\n\tif (len == 0)\n\t    return FALSE;\n\ttv.v_type = VAR_STRING;\n\ttv.v_lock = VAR_FIXED;\n\ttv.vval.v_string = vim_strnsave(fi->fi_string + fi->fi_byte_idx, len);\n\tfi->fi_byte_idx += len;\n\t++fi->fi_bi;\n\tif (skip_assign)\n\t    result = TRUE;\n\telse\n\t    result = ex_let_vars(arg, &tv, TRUE, fi->fi_semicolon,\n\t\t\t\t\t    fi->fi_varcount, flag, NULL) == OK;\n\tvim_free(tv.vval.v_string);\n\treturn result;\n    }\n\n    item = fi->fi_lw.lw_item;\n    if (item == NULL)\n\tresult = FALSE;\n    else\n    {\n\tfi->fi_lw.lw_item = item->li_next;\n\t++fi->fi_bi;\n\tif (skip_assign)\n\t    result = TRUE;\n\telse\n\t    result = (ex_let_vars(arg, &item->li_tv, TRUE, fi->fi_semicolon,\n\t\t\t\t\t   fi->fi_varcount, flag, NULL) == OK);\n    }\n    return result;\n}\n\n/*\n * Free the structure used to store info used by \":for\".\n */\n    void\nfree_for_info(void *fi_void)\n{\n    forinfo_T    *fi = (forinfo_T *)fi_void;\n\n    if (fi == NULL)\n\treturn;\n    if (fi->fi_list != NULL)\n    {\n\tlist_rem_watch(fi->fi_list, &fi->fi_lw);\n\tlist_unref(fi->fi_list);\n    }\n    else if (fi->fi_blob != NULL)\n\tblob_unref(fi->fi_blob);\n    else\n\tvim_free(fi->fi_string);\n    vim_free(fi);\n}\n\n    void\nset_context_for_expression(\n    expand_T\t*xp,\n    char_u\t*arg,\n    cmdidx_T\tcmdidx)\n{\n    int\t\thas_expr = cmdidx != CMD_let && cmdidx != CMD_var;\n    int\t\tc;\n    char_u\t*p;\n\n    if (cmdidx == CMD_let || cmdidx == CMD_var\n\t\t\t\t || cmdidx == CMD_const || cmdidx == CMD_final)\n    {\n\txp->xp_context = EXPAND_USER_VARS;\n\tif (vim_strpbrk(arg, (char_u *)\"\\\"'+-*/%.=!?~|&$([<>,#\") == NULL)\n\t{\n\t    // \":let var1 var2 ...\": find last space.\n\t    for (p = arg + STRLEN(arg); p >= arg; )\n\t    {\n\t\txp->xp_pattern = p;\n\t\tMB_PTR_BACK(arg, p);\n\t\tif (VIM_ISWHITE(*p))\n\t\t    break;\n\t    }\n\t    return;\n\t}\n    }\n    else\n\txp->xp_context = cmdidx == CMD_call ? EXPAND_FUNCTIONS\n\t\t\t\t\t\t\t  : EXPAND_EXPRESSION;\n    while ((xp->xp_pattern = vim_strpbrk(arg,\n\t\t\t\t  (char_u *)\"\\\"'+-*/%.=!?~|&$([<>,#\")) != NULL)\n    {\n\tc = *xp->xp_pattern;\n\tif (c == '&')\n\t{\n\t    c = xp->xp_pattern[1];\n\t    if (c == '&')\n\t    {\n\t\t++xp->xp_pattern;\n\t\txp->xp_context = has_expr ? EXPAND_EXPRESSION : EXPAND_NOTHING;\n\t    }\n\t    else if (c != ' ')\n\t    {\n\t\txp->xp_context = EXPAND_SETTINGS;\n\t\tif ((c == 'l' || c == 'g') && xp->xp_pattern[2] == ':')\n\t\t    xp->xp_pattern += 2;\n\n\t    }\n\t}\n\telse if (c == '$')\n\t{\n\t    // environment variable\n\t    xp->xp_context = EXPAND_ENV_VARS;\n\t}\n\telse if (c == '=')\n\t{\n\t    has_expr = TRUE;\n\t    xp->xp_context = EXPAND_EXPRESSION;\n\t}\n\telse if (c == '#'\n\t\t&& xp->xp_context == EXPAND_EXPRESSION)\n\t{\n\t    // Autoload function/variable contains '#'.\n\t    break;\n\t}\n\telse if ((c == '<' || c == '#')\n\t\t&& xp->xp_context == EXPAND_FUNCTIONS\n\t\t&& vim_strchr(xp->xp_pattern, '(') == NULL)\n\t{\n\t    // Function name can start with \"<SNR>\" and contain '#'.\n\t    break;\n\t}\n\telse if (has_expr)\n\t{\n\t    if (c == '\"')\t    // string\n\t    {\n\t\twhile ((c = *++xp->xp_pattern) != NUL && c != '\"')\n\t\t    if (c == '\\\\' && xp->xp_pattern[1] != NUL)\n\t\t\t++xp->xp_pattern;\n\t\txp->xp_context = EXPAND_NOTHING;\n\t    }\n\t    else if (c == '\\'')\t    // literal string\n\t    {\n\t\t// Trick: '' is like stopping and starting a literal string.\n\t\twhile ((c = *++xp->xp_pattern) != NUL && c != '\\'')\n\t\t    /* skip */ ;\n\t\txp->xp_context = EXPAND_NOTHING;\n\t    }\n\t    else if (c == '|')\n\t    {\n\t\tif (xp->xp_pattern[1] == '|')\n\t\t{\n\t\t    ++xp->xp_pattern;\n\t\t    xp->xp_context = EXPAND_EXPRESSION;\n\t\t}\n\t\telse\n\t\t    xp->xp_context = EXPAND_COMMANDS;\n\t    }\n\t    else\n\t\txp->xp_context = EXPAND_EXPRESSION;\n\t}\n\telse\n\t    // Doesn't look like something valid, expand as an expression\n\t    // anyway.\n\t    xp->xp_context = EXPAND_EXPRESSION;\n\targ = xp->xp_pattern;\n\tif (*arg != NUL)\n\t    while ((c = *++arg) != NUL && (c == ' ' || c == '\\t'))\n\t\t/* skip */ ;\n    }\n\n    // \":exe one two\" completes \"two\"\n    if ((cmdidx == CMD_execute\n\t\t|| cmdidx == CMD_echo\n\t\t|| cmdidx == CMD_echon\n\t\t|| cmdidx == CMD_echomsg\n\t\t|| cmdidx == CMD_echowindow)\n\t    && xp->xp_context == EXPAND_EXPRESSION)\n    {\n\tfor (;;)\n\t{\n\t    char_u *n = skiptowhite(arg);\n\n\t    if (n == arg || IS_WHITE_OR_NUL(*skipwhite(n)))\n\t\tbreak;\n\t    arg = skipwhite(n);\n\t}\n    }\n\n    xp->xp_pattern = arg;\n}\n\n/*\n * Return TRUE if \"pat\" matches \"text\".\n * Does not use 'cpo' and always uses 'magic'.\n */\n    int\npattern_match(char_u *pat, char_u *text, int ic)\n{\n    int\t\tmatches = FALSE;\n    char_u\t*save_cpo;\n    regmatch_T\tregmatch;\n\n    // avoid 'l' flag in 'cpoptions'\n    save_cpo = p_cpo;\n    p_cpo = empty_option;\n    regmatch.regprog = vim_regcomp(pat, RE_MAGIC + RE_STRING);\n    if (regmatch.regprog != NULL)\n    {\n\tregmatch.rm_ic = ic;\n\tmatches = vim_regexec_nl(&regmatch, text, (colnr_T)0);\n\tvim_regfree(regmatch.regprog);\n    }\n    p_cpo = save_cpo;\n    return matches;\n}\n\n/*\n * Handle a name followed by \"(\".  Both for just \"name(arg)\" and for\n * \"expr->name(arg)\".\n * Returns OK or FAIL.\n */\n    static int\neval_func(\n\tchar_u\t    **arg,\t// points to \"(\", will be advanced\n\tevalarg_T   *evalarg,\n\tchar_u\t    *name,\n\tint\t    name_len,\n\ttypval_T    *rettv,\n\tint\t    flags,\n\ttypval_T    *basetv)\t// \"expr\" for \"expr->name(arg)\"\n{\n    int\t\tevaluate = flags & EVAL_EVALUATE;\n    char_u\t*s = name;\n    int\t\tlen = name_len;\n    partial_T\t*partial;\n    int\t\tret = OK;\n    type_T\t*type = NULL;\n    int\t\tfound_var = FALSE;\n\n    if (!evaluate)\n\tcheck_vars(s, len);\n\n    // If \"s\" is the name of a variable of type VAR_FUNC\n    // use its contents.\n    s = deref_func_name(s, &len, &partial,\n\t\t in_vim9script() ? &type : NULL, !evaluate, FALSE, &found_var);\n\n    // Need to make a copy, in case evaluating the arguments makes\n    // the name invalid.\n    s = vim_strsave(s);\n    if (s == NULL || (evaluate && (*s == NUL || (flags & EVAL_CONSTANT))))\n\tret = FAIL;\n    else\n    {\n\tfuncexe_T funcexe;\n\n\t// Invoke the function.\n\tCLEAR_FIELD(funcexe);\n\tfuncexe.fe_firstline = curwin->w_cursor.lnum;\n\tfuncexe.fe_lastline = curwin->w_cursor.lnum;\n\tfuncexe.fe_evaluate = evaluate;\n\tfuncexe.fe_partial = partial;\n\tfuncexe.fe_basetv = basetv;\n\tfuncexe.fe_check_type = type;\n\tfuncexe.fe_found_var = found_var;\n\tret = get_func_tv(s, len, rettv, arg, evalarg, &funcexe);\n    }\n    vim_free(s);\n\n    // If evaluate is FALSE rettv->v_type was not set in\n    // get_func_tv, but it's needed in handle_subscript() to parse\n    // what follows. So set it here.\n    if (rettv->v_type == VAR_UNKNOWN && !evaluate && **arg == '(')\n    {\n\trettv->vval.v_string = NULL;\n\trettv->v_type = VAR_FUNC;\n    }\n\n    // Stop the expression evaluation when immediately\n    // aborting on error, or when an interrupt occurred or\n    // an exception was thrown but not caught.\n    if (evaluate && aborting())\n    {\n\tif (ret == OK)\n\t    clear_tv(rettv);\n\tret = FAIL;\n    }\n    return ret;\n}\n\n/*\n * After a NL, skip over empty lines and comment-only lines.\n */\n    static char_u *\nnewline_skip_comments(char_u *arg)\n{\n    char_u *p = arg + 1;\n\n    for (;;)\n    {\n\tp = skipwhite(p);\n\n\tif (*p == NUL)\n\t    break;\n\tif (vim9_comment_start(p))\n\t{\n\t    char_u *nl = vim_strchr(p, NL);\n\n\t    if (nl == NULL)\n\t\t    break;\n\t    p = nl;\n\t}\n\tif (*p != NL)\n\t    break;\n\t++p;  // skip another NL\n    }\n    return p;\n}\n\n/*\n * Get the next line source line without advancing.  But do skip over comment\n * lines.\n * Only called for Vim9 script.\n */\n    static char_u *\ngetline_peek_skip_comments(evalarg_T *evalarg)\n{\n    for (;;)\n    {\n\tchar_u *next = getline_peek(evalarg->eval_getline,\n\t\t\t\t\t\t\t evalarg->eval_cookie);\n\tchar_u *p;\n\n\tif (next == NULL)\n\t    break;\n\tp = skipwhite(next);\n\tif (*p != NUL && !vim9_comment_start(p))\n\t    return next;\n\tif (eval_next_line(NULL, evalarg) == NULL)\n\t    break;\n    }\n    return NULL;\n}\n\n/*\n * If inside Vim9 script, \"arg\" points to the end of a line (ignoring a #\n * comment) and there is a next line, return the next line (skipping blanks)\n * and set \"getnext\".\n * Otherwise return the next non-white at or after \"arg\" and set \"getnext\" to\n * FALSE.\n * \"arg\" must point somewhere inside a line, not at the start.\n */\n    char_u *\neval_next_non_blank(char_u *arg, evalarg_T *evalarg, int *getnext)\n{\n    char_u *p = skipwhite(arg);\n\n    *getnext = FALSE;\n    if (in_vim9script()\n\t    && evalarg != NULL\n\t    && (evalarg->eval_cookie != NULL || evalarg->eval_cctx != NULL\n\t\t\t\t\t\t\t\t   || *p == NL)\n\t    && (*p == NUL || *p == NL\n\t\t\t     || (vim9_comment_start(p) && VIM_ISWHITE(p[-1]))))\n    {\n\tchar_u *next;\n\n\tif (*p == NL)\n\t    next = newline_skip_comments(p);\n\telse if (evalarg->eval_cookie != NULL)\n\t    next = getline_peek_skip_comments(evalarg);\n\telse\n\t    next = peek_next_line_from_context(evalarg->eval_cctx);\n\n\tif (next != NULL)\n\t{\n\t    *getnext = *p != NL;\n\t    return skipwhite(next);\n\t}\n    }\n    return p;\n}\n\n/*\n * To be called after eval_next_non_blank() sets \"getnext\" to TRUE.\n * Only called for Vim9 script.\n */\n    char_u *\neval_next_line(char_u *arg, evalarg_T *evalarg)\n{\n    garray_T\t*gap = &evalarg->eval_ga;\n    char_u\t*line;\n\n    if (arg != NULL)\n    {\n\tif (*arg == NL)\n\t    return newline_skip_comments(arg);\n\t// Truncate before a trailing comment, so that concatenating the lines\n\t// won't turn the rest into a comment.\n\tif (*skipwhite(arg) == '#')\n\t    *arg = NUL;\n    }\n\n    if (evalarg->eval_cookie != NULL)\n\tline = evalarg->eval_getline(0, evalarg->eval_cookie, 0,\n\t\t\t\t\t\t\t   GETLINE_CONCAT_ALL);\n    else\n\tline = next_line_from_context(evalarg->eval_cctx, TRUE);\n    if (line == NULL)\n\treturn NULL;\n\n    ++evalarg->eval_break_count;\n    if (gap->ga_itemsize > 0 && ga_grow(gap, 1) == OK)\n    {\n\tchar_u *p = skipwhite(line);\n\n\t// Going to concatenate the lines after parsing.  For an empty or\n\t// comment line use an empty string.\n\tif (*p == NUL || vim9_comment_start(p))\n\t{\n\t    vim_free(line);\n\t    line = vim_strsave((char_u *)\"\");\n\t}\n\n\t((char_u **)gap->ga_data)[gap->ga_len] = line;\n\t++gap->ga_len;\n    }\n    else if (evalarg->eval_cookie != NULL)\n    {\n\tfree_eval_tofree_later(evalarg);\n\tevalarg->eval_tofree = line;\n    }\n\n    // Advanced to the next line, \"arg\" no longer points into the previous\n    // line.\n    evalarg->eval_using_cmdline = FALSE;\n    return skipwhite(line);\n}\n\n/*\n * Call eval_next_non_blank() and get the next line if needed.\n */\n    char_u *\nskipwhite_and_linebreak(char_u *arg, evalarg_T *evalarg)\n{\n    int\t    getnext;\n    char_u  *p = skipwhite_and_nl(arg);\n\n    if (evalarg == NULL)\n\treturn skipwhite(arg);\n    eval_next_non_blank(p, evalarg, &getnext);\n    if (getnext)\n\treturn eval_next_line(arg, evalarg);\n    return p;\n}\n\n/*\n * The \"eval\" functions have an \"evalarg\" argument: When NULL or\n * \"evalarg->eval_flags\" does not have EVAL_EVALUATE, then the argument is only\n * parsed but not executed.  The functions may return OK, but the rettv will be\n * of type VAR_UNKNOWN.  The functions still returns FAIL for a syntax error.\n */\n\n/*\n * Handle zero level expression.\n * This calls eval1() and handles error message and nextcmd.\n * Put the result in \"rettv\" when returning OK and \"evaluate\" is TRUE.\n * Note: \"rettv.v_lock\" is not set.\n * \"evalarg\" can be NULL, EVALARG_EVALUATE or a pointer.\n * Return OK or FAIL.\n */\n    int\neval0(\n    char_u\t*arg,\n    typval_T\t*rettv,\n    exarg_T\t*eap,\n    evalarg_T\t*evalarg)\n{\n    return eval0_retarg(arg, rettv, eap, evalarg, NULL);\n}\n\n/*\n * If \"arg\" is a simple function call without arguments then call it and return\n * the result.  Otherwise return NOTDONE.\n */\n    int\nmay_call_simple_func(\n    char_u\t*arg,\n    typval_T\t*rettv)\n{\n    char_u  *parens = (char_u *)strstr((char *)arg, \"()\");\n    int\t    r = NOTDONE;\n\n    // If the expression is \"FuncName()\" then we can skip a lot of overhead.\n    if (parens != NULL && *skipwhite(parens + 2) == NUL)\n    {\n\tchar_u *p = STRNCMP(arg, \"<SNR>\", 5) == 0 ? skipdigits(arg + 5) : arg;\n\n\tif (to_name_end(p, TRUE) == parens)\n\t    r = call_simple_func(arg, (int)(parens - arg), rettv);\n    }\n    return r;\n}\n\n/*\n * Handle zero level expression with optimization for a simple function call.\n * Same arguments and return value as eval0().\n */\n    int\neval0_simple_funccal(\n    char_u\t*arg,\n    typval_T\t*rettv,\n    exarg_T\t*eap,\n    evalarg_T\t*evalarg)\n{\n    int\t    r = may_call_simple_func(arg, rettv);\n\n    if (r == NOTDONE)\n\tr = eval0_retarg(arg, rettv, eap, evalarg, NULL);\n    return r;\n}\n\n/*\n * Like eval0() but when \"retarg\" is not NULL store the pointer to after the\n * expression and don't check what comes after the expression.\n */\n    int\neval0_retarg(\n    char_u\t*arg,\n    typval_T\t*rettv,\n    exarg_T\t*eap,\n    evalarg_T\t*evalarg,\n    char_u\t**retarg)\n{\n    int\t\tret;\n    char_u\t*p;\n    char_u\t*expr_end;\n    int\t\tdid_emsg_before = did_emsg;\n    int\t\tcalled_emsg_before = called_emsg;\n    int\t\tflags = evalarg == NULL ? 0 : evalarg->eval_flags;\n    int\t\tcheck_for_end = retarg == NULL;\n    int\t\tend_error = FALSE;\n\n    p = skipwhite(arg);\n    ret = eval1(&p, rettv, evalarg);\n\n    if (ret != FAIL)\n    {\n\texpr_end = p;\n\tp = skipwhite(p);\n\n\t// In Vim9 script a command block is not split at NL characters for\n\t// commands using an expression argument.  Skip over a '#' comment to\n\t// check for a following NL.  Require white space before the '#'.\n\tif (in_vim9script() && p > expr_end && retarg == NULL)\n\t    while (*p == '#')\n\t    {\n\t\tchar_u *nl = vim_strchr(p, NL);\n\n\t\tif (nl == NULL)\n\t\t    break;\n\t\tp = skipwhite(nl + 1);\n\t\tif (eap != NULL && *p != NUL)\n\t\t    eap->nextcmd = p;\n\t\tcheck_for_end = FALSE;\n\t    }\n\n\tif (check_for_end)\n\t    end_error = !ends_excmd2(arg, p);\n    }\n\n    if (ret == FAIL || end_error)\n    {\n\tif (ret != FAIL)\n\t    clear_tv(rettv);\n\t/*\n\t * Report the invalid expression unless the expression evaluation has\n\t * been cancelled due to an aborting error, an interrupt, or an\n\t * exception, or we already gave a more specific error.\n\t * Also check called_emsg for when using assert_fails().\n\t */\n\tif (!aborting()\n\t\t&& did_emsg == did_emsg_before\n\t\t&& called_emsg == called_emsg_before\n\t\t&& (flags & EVAL_CONSTANT) == 0\n\t\t&& (!in_vim9script() || !vim9_bad_comment(p)))\n\t{\n\t    if (end_error)\n\t\tsemsg(_(e_trailing_characters_str), p);\n\t    else\n\t\tsemsg(_(e_invalid_expression_str), arg);\n\t}\n\n\t// Some of the expression may not have been consumed.  Do not check for\n\t// a next command to avoid more errors, unless \"|\" is following, which\n\t// could only be a command separator.\n\tif (eap != NULL && p != NULL\n\t\t\t  &&  skipwhite(p)[0] == '|' && skipwhite(p)[1] != '|')\n\t    eap->nextcmd = check_nextcmd(p);\n\treturn FAIL;\n    }\n\n    if (retarg != NULL)\n\t*retarg = p;\n    else if (check_for_end && eap != NULL)\n\tset_nextcmd(eap, p);\n\n    return ret;\n}\n\n/*\n * Handle top level expression:\n *\texpr2 ? expr1 : expr1\n *\texpr2 ?? expr1\n *\n * \"arg\" must point to the first non-white of the expression.\n * \"arg\" is advanced to just after the recognized expression.\n *\n * Note: \"rettv.v_lock\" is not set.\n *\n * Return OK or FAIL.\n */\n    int\neval1(char_u **arg, typval_T *rettv, evalarg_T *evalarg)\n{\n    char_u  *p;\n    int\t    getnext;\n\n    CLEAR_POINTER(rettv);\n\n    /*\n     * Get the first variable.\n     */\n    if (eval2(arg, rettv, evalarg) == FAIL)\n\treturn FAIL;\n\n    p = eval_next_non_blank(*arg, evalarg, &getnext);\n    if (*p == '?')\n    {\n\tint\t\top_falsy = p[1] == '?';\n\tint\t\tresult;\n\ttypval_T\tvar2;\n\tevalarg_T\t*evalarg_used = evalarg;\n\tevalarg_T\tlocal_evalarg;\n\tint\t\torig_flags;\n\tint\t\tevaluate;\n\tint\t\tvim9script = in_vim9script();\n\n\tif (evalarg == NULL)\n\t{\n\t    init_evalarg(&local_evalarg);\n\t    evalarg_used = &local_evalarg;\n\t}\n\torig_flags = evalarg_used->eval_flags;\n\tevaluate = evalarg_used->eval_flags & EVAL_EVALUATE;\n\n\tif (getnext)\n\t    *arg = eval_next_line(*arg, evalarg_used);\n\telse\n\t{\n\t    if (evaluate && vim9script && !VIM_ISWHITE(p[-1]))\n\t    {\n\t\terror_white_both(p, op_falsy ? 2 : 1);\n\t\tclear_tv(rettv);\n\t\treturn FAIL;\n\t    }\n\t    *arg = p;\n\t}\n\n\tresult = FALSE;\n\tif (evaluate)\n\t{\n\t    int\t\terror = FALSE;\n\n\t    if (op_falsy)\n\t\tresult = tv2bool(rettv);\n\t    else if (vim9script)\n\t\tresult = tv_get_bool_chk(rettv, &error);\n\t    else if (tv_get_number_chk(rettv, &error) != 0)\n\t\tresult = TRUE;\n\t    if (error || !op_falsy || !result)\n\t\tclear_tv(rettv);\n\t    if (error)\n\t\treturn FAIL;\n\t}\n\n\t/*\n\t * Get the second variable.  Recursive!\n\t */\n\tif (op_falsy)\n\t    ++*arg;\n\tif (evaluate && vim9script && !IS_WHITE_OR_NUL((*arg)[1]))\n\t{\n\t    error_white_both(*arg - (op_falsy ? 1 : 0), op_falsy ? 2 : 1);\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\t*arg = skipwhite_and_linebreak(*arg + 1, evalarg_used);\n\tevalarg_used->eval_flags = (op_falsy ? !result : result)\n\t\t\t\t    ? orig_flags : orig_flags & ~EVAL_EVALUATE;\n\tif (eval1(arg, &var2, evalarg_used) == FAIL)\n\t{\n\t    evalarg_used->eval_flags = orig_flags;\n\t    return FAIL;\n\t}\n\tif (!op_falsy || !result)\n\t    *rettv = var2;\n\n\tif (!op_falsy)\n\t{\n\t    /*\n\t     * Check for the \":\".\n\t     */\n\t    p = eval_next_non_blank(*arg, evalarg_used, &getnext);\n\t    if (*p != ':')\n\t    {\n\t\temsg(_(e_missing_colon_after_questionmark));\n\t\tif (evaluate && result)\n\t\t    clear_tv(rettv);\n\t\tevalarg_used->eval_flags = orig_flags;\n\t\treturn FAIL;\n\t    }\n\t    if (getnext)\n\t\t*arg = eval_next_line(*arg, evalarg_used);\n\t    else\n\t    {\n\t\tif (evaluate && vim9script && !VIM_ISWHITE(p[-1]))\n\t\t{\n\t\t    error_white_both(p, 1);\n\t\t    clear_tv(rettv);\n\t\t    evalarg_used->eval_flags = orig_flags;\n\t\t    return FAIL;\n\t\t}\n\t\t*arg = p;\n\t    }\n\n\t    /*\n\t     * Get the third variable.  Recursive!\n\t     */\n\t    if (evaluate && vim9script && !IS_WHITE_OR_NUL((*arg)[1]))\n\t    {\n\t\terror_white_both(*arg, 1);\n\t\tclear_tv(rettv);\n\t\tevalarg_used->eval_flags = orig_flags;\n\t\treturn FAIL;\n\t    }\n\t    *arg = skipwhite_and_linebreak(*arg + 1, evalarg_used);\n\t    evalarg_used->eval_flags = !result ? orig_flags\n\t\t\t\t\t\t : orig_flags & ~EVAL_EVALUATE;\n\t    if (eval1(arg, &var2, evalarg_used) == FAIL)\n\t    {\n\t\tif (evaluate && result)\n\t\t    clear_tv(rettv);\n\t\tevalarg_used->eval_flags = orig_flags;\n\t\treturn FAIL;\n\t    }\n\t    if (evaluate && !result)\n\t\t*rettv = var2;\n\t}\n\n\tif (evalarg == NULL)\n\t    clear_evalarg(&local_evalarg, NULL);\n\telse\n\t    evalarg->eval_flags = orig_flags;\n    }\n\n    return OK;\n}\n\n/*\n * Handle first level expression:\n *\texpr2 || expr2 || expr2\t    logical OR\n *\n * \"arg\" must point to the first non-white of the expression.\n * \"arg\" is advanced to just after the recognized expression.\n *\n * Return OK or FAIL.\n */\n    static int\neval2(char_u **arg, typval_T *rettv, evalarg_T *evalarg)\n{\n    char_u\t*p;\n    int\t\tgetnext;\n\n    /*\n     * Get the first expression.\n     */\n    if (eval3(arg, rettv, evalarg) == FAIL)\n\treturn FAIL;\n\n    /*\n     * Handle the  \"||\" operator.\n     */\n    p = eval_next_non_blank(*arg, evalarg, &getnext);\n    if (p[0] == '|' && p[1] == '|')\n    {\n\tevalarg_T   *evalarg_used = evalarg;\n\tevalarg_T   local_evalarg;\n\tint\t    evaluate;\n\tint\t    orig_flags;\n\tlong\t    result = FALSE;\n\ttypval_T    var2;\n\tint\t    error = FALSE;\n\tint\t    vim9script = in_vim9script();\n\n\tif (evalarg == NULL)\n\t{\n\t    init_evalarg(&local_evalarg);\n\t    evalarg_used = &local_evalarg;\n\t}\n\torig_flags = evalarg_used->eval_flags;\n\tevaluate = orig_flags & EVAL_EVALUATE;\n\tif (evaluate)\n\t{\n\t    if (vim9script)\n\t\tresult = tv_get_bool_chk(rettv, &error);\n\t    else if (tv_get_number_chk(rettv, &error) != 0)\n\t\tresult = TRUE;\n\t    clear_tv(rettv);\n\t    if (error)\n\t\treturn FAIL;\n\t}\n\n\t/*\n\t * Repeat until there is no following \"||\".\n\t */\n\twhile (p[0] == '|' && p[1] == '|')\n\t{\n\t    if (getnext)\n\t\t*arg = eval_next_line(*arg, evalarg_used);\n\t    else\n\t    {\n\t\tif (evaluate && vim9script && !VIM_ISWHITE(p[-1]))\n\t\t{\n\t\t    error_white_both(p, 2);\n\t\t    clear_tv(rettv);\n\t\t    return FAIL;\n\t\t}\n\t\t*arg = p;\n\t    }\n\n\t    /*\n\t     * Get the second variable.\n\t     */\n\t    if (evaluate && vim9script && !IS_WHITE_OR_NUL((*arg)[2]))\n\t    {\n\t\terror_white_both(*arg, 2);\n\t\tclear_tv(rettv);\n\t\treturn FAIL;\n\t    }\n\t    *arg = skipwhite_and_linebreak(*arg + 2, evalarg_used);\n\t    evalarg_used->eval_flags = !result ? orig_flags\n\t\t\t\t\t\t : orig_flags & ~EVAL_EVALUATE;\n\t    if (eval3(arg, &var2, evalarg_used) == FAIL)\n\t\treturn FAIL;\n\n\t    /*\n\t     * Compute the result.\n\t     */\n\t    if (evaluate && !result)\n\t    {\n\t\tif (vim9script)\n\t\t    result = tv_get_bool_chk(&var2, &error);\n\t\telse if (tv_get_number_chk(&var2, &error) != 0)\n\t\t    result = TRUE;\n\t\tclear_tv(&var2);\n\t\tif (error)\n\t\t    return FAIL;\n\t    }\n\t    if (evaluate)\n\t    {\n\t\tif (vim9script)\n\t\t{\n\t\t    rettv->v_type = VAR_BOOL;\n\t\t    rettv->vval.v_number = result ? VVAL_TRUE : VVAL_FALSE;\n\t\t}\n\t\telse\n\t\t{\n\t\t    rettv->v_type = VAR_NUMBER;\n\t\t    rettv->vval.v_number = result;\n\t\t}\n\t    }\n\n\t    p = eval_next_non_blank(*arg, evalarg_used, &getnext);\n\t}\n\n\tif (evalarg == NULL)\n\t    clear_evalarg(&local_evalarg, NULL);\n\telse\n\t    evalarg->eval_flags = orig_flags;\n    }\n\n    return OK;\n}\n\n/*\n * Handle second level expression:\n *\texpr3 && expr3 && expr3\t    logical AND\n *\n * \"arg\" must point to the first non-white of the expression.\n * \"arg\" is advanced to just after the recognized expression.\n *\n * Return OK or FAIL.\n */\n    static int\neval3(char_u **arg, typval_T *rettv, evalarg_T *evalarg)\n{\n    char_u\t*p;\n    int\t\tgetnext;\n\n    /*\n     * Get the first expression.\n     */\n    if (eval4(arg, rettv, evalarg) == FAIL)\n\treturn FAIL;\n\n    /*\n     * Handle the \"&&\" operator.\n     */\n    p = eval_next_non_blank(*arg, evalarg, &getnext);\n    if (p[0] == '&' && p[1] == '&')\n    {\n\tevalarg_T   *evalarg_used = evalarg;\n\tevalarg_T   local_evalarg;\n\tint\t    orig_flags;\n\tint\t    evaluate;\n\tlong\t    result = TRUE;\n\ttypval_T    var2;\n\tint\t    error = FALSE;\n\tint\t    vim9script = in_vim9script();\n\n\tif (evalarg == NULL)\n\t{\n\t    init_evalarg(&local_evalarg);\n\t    evalarg_used = &local_evalarg;\n\t}\n\torig_flags = evalarg_used->eval_flags;\n\tevaluate = orig_flags & EVAL_EVALUATE;\n\tif (evaluate)\n\t{\n\t    if (vim9script)\n\t\tresult = tv_get_bool_chk(rettv, &error);\n\t    else if (tv_get_number_chk(rettv, &error) == 0)\n\t\tresult = FALSE;\n\t    clear_tv(rettv);\n\t    if (error)\n\t\treturn FAIL;\n\t}\n\n\t/*\n\t * Repeat until there is no following \"&&\".\n\t */\n\twhile (p[0] == '&' && p[1] == '&')\n\t{\n\t    if (getnext)\n\t\t*arg = eval_next_line(*arg, evalarg_used);\n\t    else\n\t    {\n\t\tif (evaluate && vim9script && !VIM_ISWHITE(p[-1]))\n\t\t{\n\t\t    error_white_both(p, 2);\n\t\t    clear_tv(rettv);\n\t\t    return FAIL;\n\t\t}\n\t\t*arg = p;\n\t    }\n\n\t    /*\n\t     * Get the second variable.\n\t     */\n\t    if (evaluate && vim9script && !IS_WHITE_OR_NUL((*arg)[2]))\n\t    {\n\t\terror_white_both(*arg, 2);\n\t\tclear_tv(rettv);\n\t\treturn FAIL;\n\t    }\n\t    *arg = skipwhite_and_linebreak(*arg + 2, evalarg_used);\n\t    evalarg_used->eval_flags = result ? orig_flags\n\t\t\t\t\t\t : orig_flags & ~EVAL_EVALUATE;\n\t    CLEAR_FIELD(var2);\n\t    if (eval4(arg, &var2, evalarg_used) == FAIL)\n\t\treturn FAIL;\n\n\t    /*\n\t     * Compute the result.\n\t     */\n\t    if (evaluate && result)\n\t    {\n\t\tif (vim9script)\n\t\t    result = tv_get_bool_chk(&var2, &error);\n\t\telse if (tv_get_number_chk(&var2, &error) == 0)\n\t\t    result = FALSE;\n\t\tclear_tv(&var2);\n\t\tif (error)\n\t\t    return FAIL;\n\t    }\n\t    if (evaluate)\n\t    {\n\t\tif (vim9script)\n\t\t{\n\t\t    rettv->v_type = VAR_BOOL;\n\t\t    rettv->vval.v_number = result ? VVAL_TRUE : VVAL_FALSE;\n\t\t}\n\t\telse\n\t\t{\n\t\t    rettv->v_type = VAR_NUMBER;\n\t\t    rettv->vval.v_number = result;\n\t\t}\n\t    }\n\n\t    p = eval_next_non_blank(*arg, evalarg_used, &getnext);\n\t}\n\n\tif (evalarg == NULL)\n\t    clear_evalarg(&local_evalarg, NULL);\n\telse\n\t    evalarg->eval_flags = orig_flags;\n    }\n\n    return OK;\n}\n\n/*\n * Handle third level expression:\n *\tvar1 == var2\n *\tvar1 =~ var2\n *\tvar1 != var2\n *\tvar1 !~ var2\n *\tvar1 > var2\n *\tvar1 >= var2\n *\tvar1 < var2\n *\tvar1 <= var2\n *\tvar1 is var2\n *\tvar1 isnot var2\n *\n * \"arg\" must point to the first non-white of the expression.\n * \"arg\" is advanced to just after the recognized expression.\n *\n * Return OK or FAIL.\n */\n    static int\neval4(char_u **arg, typval_T *rettv, evalarg_T *evalarg)\n{\n    char_u\t*p;\n    int\t\tgetnext;\n    exprtype_T\ttype = EXPR_UNKNOWN;\n    int\t\tlen = 2;\n    int\t\ttype_is = FALSE;\n\n    /*\n     * Get the first expression.\n     */\n    if (eval5(arg, rettv, evalarg) == FAIL)\n\treturn FAIL;\n\n    p = eval_next_non_blank(*arg, evalarg, &getnext);\n\n    type = get_compare_type(p, &len, &type_is);\n\n    /*\n     * If there is a comparative operator, use it.\n     */\n    if (type != EXPR_UNKNOWN)\n    {\n\ttypval_T    var2;\n\tint\t    ic;\n\tint\t    vim9script = in_vim9script();\n\tint\t    evaluate = evalarg == NULL\n\t\t\t\t   ? 0 : (evalarg->eval_flags & EVAL_EVALUATE);\n\tlong\t    comp_lnum = SOURCING_LNUM;\n\n\tif (getnext)\n\t{\n\t    *arg = eval_next_line(*arg, evalarg);\n\t    p = *arg;\n\t}\n\telse if (evaluate && vim9script && !VIM_ISWHITE(**arg))\n\t{\n\t    error_white_both(*arg, len);\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\n\tif (vim9script && type_is && (p[len] == '?' || p[len] == '#'))\n\t{\n\t    semsg(_(e_invalid_expression_str), p);\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\n\t// extra question mark appended: ignore case\n\tif (p[len] == '?')\n\t{\n\t    ic = TRUE;\n\t    ++len;\n\t}\n\t// extra '#' appended: match case\n\telse if (p[len] == '#')\n\t{\n\t    ic = FALSE;\n\t    ++len;\n\t}\n\t// nothing appended: use 'ignorecase' if not in Vim script\n\telse\n\t    ic = vim9script ? FALSE : p_ic;\n\n\t/*\n\t * Get the second variable.\n\t */\n\tif (evaluate && vim9script && !IS_WHITE_OR_NUL(p[len]))\n\t{\n\t    error_white_both(p, len);\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\t*arg = skipwhite_and_linebreak(p + len, evalarg);\n\tif (eval5(arg, &var2, evalarg) == FAIL)\n\t{\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\tif (evaluate)\n\t{\n\t    int ret;\n\n\t    // use the line of the comparison for messages\n\t    SOURCING_LNUM = comp_lnum;\n\t    if (vim9script && check_compare_types(type, rettv, &var2) == FAIL)\n\t    {\n\t\tret = FAIL;\n\t\tclear_tv(rettv);\n\t    }\n\t    else\n\t\tret = typval_compare(rettv, &var2, type, ic);\n\t    clear_tv(&var2);\n\t    return ret;\n\t}\n    }\n\n    return OK;\n}\n\n/*\n * Make a copy of blob \"tv1\" and append blob \"tv2\".\n */\n    void\neval_addblob(typval_T *tv1, typval_T *tv2)\n{\n    blob_T  *b1 = tv1->vval.v_blob;\n    blob_T  *b2 = tv2->vval.v_blob;\n    blob_T  *b = blob_alloc();\n    int\t    i;\n\n    if (b == NULL)\n\treturn;\n\n    for (i = 0; i < blob_len(b1); i++)\n\tga_append(&b->bv_ga, blob_get(b1, i));\n    for (i = 0; i < blob_len(b2); i++)\n\tga_append(&b->bv_ga, blob_get(b2, i));\n\n    clear_tv(tv1);\n    rettv_blob_set(tv1, b);\n}\n\n/*\n * Make a copy of list \"tv1\" and append list \"tv2\".\n */\n    int\neval_addlist(typval_T *tv1, typval_T *tv2)\n{\n    typval_T var3;\n\n    // concatenate Lists\n    if (list_concat(tv1->vval.v_list, tv2->vval.v_list, &var3) == FAIL)\n    {\n\tclear_tv(tv1);\n\tclear_tv(tv2);\n\treturn FAIL;\n    }\n    clear_tv(tv1);\n    *tv1 = var3;\n    return OK;\n}\n\n/*\n * Handle the bitwise left/right shift operator expression:\n *\tvar1 << var2\n *\tvar1 >> var2\n *\n * \"arg\" must point to the first non-white of the expression.\n * \"arg\" is advanced to just after the recognized expression.\n *\n * Return OK or FAIL.\n */\n    static int\neval5(char_u **arg, typval_T *rettv, evalarg_T *evalarg)\n{\n    /*\n     * Get the first expression.\n     */\n    if (eval6(arg, rettv, evalarg) == FAIL)\n\treturn FAIL;\n\n    /*\n     * Repeat computing, until no '<<' or '>>' is following.\n     */\n    for (;;)\n    {\n\tchar_u\t\t*p;\n\tint\t\tgetnext;\n\texprtype_T\ttype;\n\tint\t\tevaluate;\n\ttypval_T\tvar2;\n\tint\t\tvim9script;\n\n\tp = eval_next_non_blank(*arg, evalarg, &getnext);\n\tif (p[0] == '<' && p[1] == '<')\n\t    type = EXPR_LSHIFT;\n\telse if (p[0] == '>' && p[1] == '>')\n\t    type = EXPR_RSHIFT;\n\telse\n\t    return OK;\n\n\t// Handle a bitwise left or right shift operator\n\tif (rettv->v_type != VAR_NUMBER)\n\t{\n\t    // left operand should be a number\n\t    emsg(_(e_bitshift_ops_must_be_number));\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\n\tevaluate = evalarg == NULL ? 0 : (evalarg->eval_flags & EVAL_EVALUATE);\n\tvim9script = in_vim9script();\n\tif (getnext)\n\t{\n\t    *arg = eval_next_line(*arg, evalarg);\n\t    p = *arg;\n\t}\n\telse if (evaluate && vim9script && !VIM_ISWHITE(**arg))\n\t{\n\t    error_white_both(*arg, 2);\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\n\t/*\n\t * Get the second variable.\n\t */\n\tif (evaluate && vim9script && !IS_WHITE_OR_NUL(p[2]))\n\t{\n\t    error_white_both(p, 2);\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\t*arg = skipwhite_and_linebreak(p + 2, evalarg);\n\tif (eval6(arg, &var2, evalarg) == FAIL)\n\t{\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\n\tif (var2.v_type != VAR_NUMBER || var2.vval.v_number < 0)\n\t{\n\t    // right operand should be a positive number\n\t    if (var2.v_type != VAR_NUMBER)\n\t\temsg(_(e_bitshift_ops_must_be_number));\n\t    else\n\t\temsg(_(e_bitshift_ops_must_be_positive));\n\t    clear_tv(rettv);\n\t    clear_tv(&var2);\n\t    return FAIL;\n\t}\n\n\tif (evaluate)\n\t{\n\t    if (var2.vval.v_number > MAX_LSHIFT_BITS)\n\t\t// shifting more bits than we have always results in zero\n\t\trettv->vval.v_number = 0;\n\t    else if (type == EXPR_LSHIFT)\n\t\trettv->vval.v_number =\n\t\t      (uvarnumber_T)rettv->vval.v_number << var2.vval.v_number;\n\t    else\n\t\trettv->vval.v_number =\n\t\t      (uvarnumber_T)rettv->vval.v_number >> var2.vval.v_number;\n\t}\n\n\tclear_tv(&var2);\n    }\n\n    return OK;\n}\n\n/*\n * Handle fifth level expression:\n *\t+\tnumber addition, concatenation of list or blob\n *\t-\tnumber subtraction\n *\t.\tstring concatenation (if script version is 1)\n *\t..\tstring concatenation\n *\n * \"arg\" must point to the first non-white of the expression.\n * \"arg\" is advanced to just after the recognized expression.\n *\n * Return OK or FAIL.\n */\n    static int\neval6(char_u **arg, typval_T *rettv, evalarg_T *evalarg)\n{\n    /*\n     * Get the first expression.\n     */\n    if (eval7(arg, rettv, evalarg, FALSE) == FAIL)\n\treturn FAIL;\n\n    /*\n     * Repeat computing, until no '+', '-' or '.' is following.\n     */\n    for (;;)\n    {\n\tint\t    evaluate;\n\tint\t    getnext;\n\tchar_u\t    *p;\n\tint\t    op;\n\tint\t    oplen;\n\tint\t    concat;\n\ttypval_T    var2;\n\tint\t    vim9script = in_vim9script();\n\n\t// \".\" is only string concatenation when scriptversion is 1\n\t// \"+=\", \"-=\" and \"..=\" are assignments\n\t// \"++\" and \"--\" on the next line are a separate command.\n\tp = eval_next_non_blank(*arg, evalarg, &getnext);\n\top = *p;\n\tconcat = op == '.' && (*(p + 1) == '.' || in_old_script(2));\n\tif ((op != '+' && op != '-' && !concat) || p[1] == '='\n\t\t\t\t\t       || (p[1] == '.' && p[2] == '='))\n\t    break;\n\tif (getnext && (op == '+' || op == '-') && p[0] == p[1])\n\t    break;\n\n\tevaluate = evalarg == NULL ? 0 : (evalarg->eval_flags & EVAL_EVALUATE);\n\toplen = (concat && p[1] == '.') ? 2 : 1;\n\tif (getnext)\n\t    *arg = eval_next_line(*arg, evalarg);\n\telse\n\t{\n\t    if (evaluate && vim9script && !VIM_ISWHITE(**arg))\n\t    {\n\t\terror_white_both(*arg, oplen);\n\t\tclear_tv(rettv);\n\t\treturn FAIL;\n\t    }\n\t    *arg = p;\n\t}\n\tif ((op != '+' || (rettv->v_type != VAR_LIST\n\t\t\t\t\t\t && rettv->v_type != VAR_BLOB))\n\t\t&& (op == '.' || rettv->v_type != VAR_FLOAT)\n\t\t&& evaluate)\n\t{\n\t    int\t\terror = FALSE;\n\n\t    // For \"list + ...\", an illegal use of the first operand as\n\t    // a number cannot be determined before evaluating the 2nd\n\t    // operand: if this is also a list, all is ok.\n\t    // For \"something . ...\", \"something - ...\" or \"non-list + ...\",\n\t    // we know that the first operand needs to be a string or number\n\t    // without evaluating the 2nd operand.  So check before to avoid\n\t    // side effects after an error.\n\t    if (op != '.')\n\t\ttv_get_number_chk(rettv, &error);\n\t    if ((op == '.' && tv_get_string_chk(rettv) == NULL) || error)\n\t    {\n\t\tclear_tv(rettv);\n\t\treturn FAIL;\n\t    }\n\t}\n\n\t/*\n\t * Get the second variable.\n\t */\n\tif (evaluate && vim9script && !IS_WHITE_OR_NUL((*arg)[oplen]))\n\t{\n\t    error_white_both(*arg, oplen);\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\t*arg = skipwhite_and_linebreak(*arg + oplen, evalarg);\n\tif (eval7(arg, &var2, evalarg, !vim9script && op == '.') == FAIL)\n\t{\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\n\tif (evaluate)\n\t{\n\t    /*\n\t     * Compute the result.\n\t     */\n\t    if (op == '.')\n\t    {\n\t\tchar_u\tbuf1[NUMBUFLEN], buf2[NUMBUFLEN];\n\t\tchar_u\t*s1 = tv_get_string_buf(rettv, buf1);\n\t\tchar_u\t*s2 = NULL;\n\n\t\tif (vim9script && (var2.v_type == VAR_VOID\n\t\t\t|| var2.v_type == VAR_CHANNEL\n\t\t\t|| var2.v_type == VAR_JOB))\n\t\t    semsg(_(e_using_invalid_value_as_string_str),\n\t\t\t\t\t\t   vartype_name(var2.v_type));\n\t\telse if (vim9script && var2.v_type == VAR_FLOAT)\n\t\t{\n\t\t    vim_snprintf((char *)buf2, NUMBUFLEN, \"%g\",\n\t\t\t\t\t\t\t    var2.vval.v_float);\n\t\t    s2 = buf2;\n\t\t}\n\t\telse\n\t\t    s2 = tv_get_string_buf_chk(&var2, buf2);\n\t\tif (s2 == NULL)\t\t// type error ?\n\t\t{\n\t\t    clear_tv(rettv);\n\t\t    clear_tv(&var2);\n\t\t    return FAIL;\n\t\t}\n\t\tp = concat_str(s1, s2);\n\t\tclear_tv(rettv);\n\t\trettv->v_type = VAR_STRING;\n\t\trettv->vval.v_string = p;\n\t    }\n\t    else if (op == '+' && rettv->v_type == VAR_BLOB\n\t\t\t\t\t\t   && var2.v_type == VAR_BLOB)\n\t\teval_addblob(rettv, &var2);\n\t    else if (op == '+' && rettv->v_type == VAR_LIST\n\t\t\t\t\t\t   && var2.v_type == VAR_LIST)\n\t    {\n\t\tif (eval_addlist(rettv, &var2) == FAIL)\n\t\t    return FAIL;\n\t    }\n\t    else\n\t    {\n\t\tint\t\terror = FALSE;\n\t\tvarnumber_T\tn1, n2;\n\t\tfloat_T\t\tf1 = 0, f2 = 0;\n\n\t\tif (rettv->v_type == VAR_FLOAT)\n\t\t{\n\t\t    f1 = rettv->vval.v_float;\n\t\t    n1 = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t    n1 = tv_get_number_chk(rettv, &error);\n\t\t    if (error)\n\t\t    {\n\t\t\t// This can only happen for \"list + non-list\" or\n\t\t\t// \"blob + non-blob\".  For \"non-list + ...\" or\n\t\t\t// \"something - ...\", we returned before evaluating the\n\t\t\t// 2nd operand.\n\t\t\tclear_tv(rettv);\n\t\t\tclear_tv(&var2);\n\t\t\treturn FAIL;\n\t\t    }\n\t\t    if (var2.v_type == VAR_FLOAT)\n\t\t\tf1 = n1;\n\t\t}\n\t\tif (var2.v_type == VAR_FLOAT)\n\t\t{\n\t\t    f2 = var2.vval.v_float;\n\t\t    n2 = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t    n2 = tv_get_number_chk(&var2, &error);\n\t\t    if (error)\n\t\t    {\n\t\t\tclear_tv(rettv);\n\t\t\tclear_tv(&var2);\n\t\t\treturn FAIL;\n\t\t    }\n\t\t    if (rettv->v_type == VAR_FLOAT)\n\t\t\tf2 = n2;\n\t\t}\n\t\tclear_tv(rettv);\n\n\t\t// If there is a float on either side the result is a float.\n\t\tif (rettv->v_type == VAR_FLOAT || var2.v_type == VAR_FLOAT)\n\t\t{\n\t\t    if (op == '+')\n\t\t\tf1 = f1 + f2;\n\t\t    else\n\t\t\tf1 = f1 - f2;\n\t\t    rettv->v_type = VAR_FLOAT;\n\t\t    rettv->vval.v_float = f1;\n\t\t}\n\t\telse\n\t\t{\n\t\t    if (op == '+')\n\t\t\tn1 = n1 + n2;\n\t\t    else\n\t\t\tn1 = n1 - n2;\n\t\t    rettv->v_type = VAR_NUMBER;\n\t\t    rettv->vval.v_number = n1;\n\t\t}\n\t    }\n\t    clear_tv(&var2);\n\t}\n    }\n    return OK;\n}\n\n/*\n * Handle sixth level expression:\n *\t*\tnumber multiplication\n *\t/\tnumber division\n *\t%\tnumber modulo\n *\n * \"arg\" must point to the first non-white of the expression.\n * \"arg\" is advanced to just after the recognized expression.\n *\n * Return OK or FAIL.\n */\n    static int\neval7(\n    char_u\t**arg,\n    typval_T\t*rettv,\n    evalarg_T\t*evalarg,\n    int\t\twant_string)  // after \".\" operator\n{\n    int\t    use_float = FALSE;\n\n    /*\n     * Get the first expression.\n     */\n    if (eval8(arg, rettv, evalarg, want_string) == FAIL)\n\treturn FAIL;\n\n    /*\n     * Repeat computing, until no '*', '/' or '%' is following.\n     */\n    for (;;)\n    {\n\tint\t    evaluate;\n\tint\t    getnext;\n\ttypval_T    var2;\n\tchar_u\t    *p;\n\tint\t    op;\n\tvarnumber_T n1, n2;\n\tfloat_T\t    f1, f2;\n\tint\t    error;\n\n\t// \"*=\", \"/=\" and \"%=\" are assignments\n\tp = eval_next_non_blank(*arg, evalarg, &getnext);\n\top = *p;\n\tif ((op != '*' && op != '/' && op != '%') || p[1] == '=')\n\t    break;\n\n\tevaluate = evalarg == NULL ? 0 : (evalarg->eval_flags & EVAL_EVALUATE);\n\tif (getnext)\n\t    *arg = eval_next_line(*arg, evalarg);\n\telse\n\t{\n\t    if (evaluate && in_vim9script() && !VIM_ISWHITE(**arg))\n\t    {\n\t\terror_white_both(*arg, 1);\n\t\tclear_tv(rettv);\n\t\treturn FAIL;\n\t    }\n\t    *arg = p;\n\t}\n\n\tf1 = 0;\n\tf2 = 0;\n\terror = FALSE;\n\tif (evaluate)\n\t{\n\t    if (rettv->v_type == VAR_FLOAT)\n\t    {\n\t\tf1 = rettv->vval.v_float;\n\t\tuse_float = TRUE;\n\t\tn1 = 0;\n\t    }\n\t    else\n\t\tn1 = tv_get_number_chk(rettv, &error);\n\t    clear_tv(rettv);\n\t    if (error)\n\t\treturn FAIL;\n\t}\n\telse\n\t    n1 = 0;\n\n\t/*\n\t * Get the second variable.\n\t */\n\tif (evaluate && in_vim9script() && !IS_WHITE_OR_NUL((*arg)[1]))\n\t{\n\t    error_white_both(*arg, 1);\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\t*arg = skipwhite_and_linebreak(*arg + 1, evalarg);\n\tif (eval8(arg, &var2, evalarg, FALSE) == FAIL)\n\t    return FAIL;\n\n\tif (evaluate)\n\t{\n\t    if (var2.v_type == VAR_FLOAT)\n\t    {\n\t\tif (!use_float)\n\t\t{\n\t\t    f1 = n1;\n\t\t    use_float = TRUE;\n\t\t}\n\t\tf2 = var2.vval.v_float;\n\t\tn2 = 0;\n\t    }\n\t    else\n\t    {\n\t\tn2 = tv_get_number_chk(&var2, &error);\n\t\tclear_tv(&var2);\n\t\tif (error)\n\t\t    return FAIL;\n\t\tif (use_float)\n\t\t    f2 = n2;\n\t    }\n\n\t    /*\n\t     * Compute the result.\n\t     * When either side is a float the result is a float.\n\t     */\n\t    if (use_float)\n\t    {\n\t\tif (op == '*')\n\t\t    f1 = f1 * f2;\n\t\telse if (op == '/')\n\t\t{\n#ifdef VMS\n\t\t    // VMS crashes on divide by zero, work around it\n\t\t    if (f2 == 0.0)\n\t\t    {\n\t\t\tif (f1 == 0)\n\t\t\t    f1 = -1 * __F_FLT_MAX - 1L;   // similar to NaN\n\t\t\telse if (f1 < 0)\n\t\t\t    f1 = -1 * __F_FLT_MAX;\n\t\t\telse\n\t\t\t    f1 = __F_FLT_MAX;\n\t\t    }\n\t\t    else\n\t\t\tf1 = f1 / f2;\n#else\n\t\t    // We rely on the floating point library to handle divide\n\t\t    // by zero to result in \"inf\" and not a crash.\n\t\t    f1 = f1 / f2;\n#endif\n\t\t}\n\t\telse\n\t\t{\n\t\t    emsg(_(e_cannot_use_percent_with_float));\n\t\t    return FAIL;\n\t\t}\n\t\trettv->v_type = VAR_FLOAT;\n\t\trettv->vval.v_float = f1;\n\t    }\n\t    else\n\t    {\n\t\tint\t    failed = FALSE;\n\n\t\tif (op == '*')\n\t\t    n1 = n1 * n2;\n\t\telse if (op == '/')\n\t\t    n1 = num_divide(n1, n2, &failed);\n\t\telse\n\t\t    n1 = num_modulus(n1, n2, &failed);\n\t\tif (failed)\n\t\t    return FAIL;\n\n\t\trettv->v_type = VAR_NUMBER;\n\t\trettv->vval.v_number = n1;\n\t    }\n\t}\n    }\n\n    return OK;\n}\n\n/*\n * Handle a type cast before a base level expression.\n * \"arg\" must point to the first non-white of the expression.\n * \"arg\" is advanced to just after the recognized expression.\n * Return OK or FAIL.\n */\n    static int\neval8(\n    char_u\t**arg,\n    typval_T\t*rettv,\n    evalarg_T\t*evalarg,\n    int\t\twant_string)\t// after \".\" operator\n{\n    type_T\t*want_type = NULL;\n    garray_T\ttype_list;\t    // list of pointers to allocated types\n    int\t\tres;\n    int\t\tevaluate = evalarg == NULL ? 0\n\t\t\t\t       : (evalarg->eval_flags & EVAL_EVALUATE);\n\n    // Recognize <type> in Vim9 script only.\n    if (in_vim9script() && **arg == '<' && eval_isnamec1((*arg)[1])\n\t\t\t\t\t     && STRNCMP(*arg, \"<SNR>\", 5) != 0)\n    {\n\t++*arg;\n\tga_init2(&type_list, sizeof(type_T *), 10);\n\twant_type = parse_type(arg, &type_list, TRUE);\n\tif (want_type == NULL && (evaluate || **arg != '>'))\n\t{\n\t    clear_type_list(&type_list);\n\t    return FAIL;\n\t}\n\n\tif (**arg != '>')\n\t{\n\t    if (*skipwhite(*arg) == '>')\n\t\tsemsg(_(e_no_white_space_allowed_before_str_str), \">\", *arg);\n\t    else\n\t\temsg(_(e_missing_gt));\n\t    clear_type_list(&type_list);\n\t    return FAIL;\n\t}\n\t++*arg;\n\t*arg = skipwhite_and_linebreak(*arg, evalarg);\n    }\n\n    res = eval9(arg, rettv, evalarg, want_string);\n\n    if (want_type != NULL && evaluate)\n    {\n\tif (res == OK)\n\t{\n\t    type_T *actual = typval2type(rettv, get_copyID(), &type_list,\n\t\t\t\t\t\t\t       TVTT_DO_MEMBER);\n\n\t    if (!equal_type(want_type, actual, 0))\n\t    {\n\t\tif (want_type == &t_bool && actual != &t_bool\n\t\t\t\t\t&& (actual->tt_flags & TTFLAG_BOOL_OK))\n\t\t{\n\t\t    int n = tv2bool(rettv);\n\n\t\t    // can use \"0\" and \"1\" for boolean in some places\n\t\t    clear_tv(rettv);\n\t\t    rettv->v_type = VAR_BOOL;\n\t\t    rettv->vval.v_number = n ? VVAL_TRUE : VVAL_FALSE;\n\t\t}\n\t\telse\n\t\t{\n\t\t    where_T where = WHERE_INIT;\n\n\t\t    where.wt_variable = TRUE;\n\t\t    res = check_type(want_type, actual, TRUE, where);\n\t\t}\n\t    }\n\t}\n\tclear_type_list(&type_list);\n    }\n\n    return res;\n}\n\n    int\neval_leader(char_u **arg, int vim9)\n{\n    char_u\t*s = *arg;\n    char_u\t*p = *arg;\n\n    while (*p == '!' || *p == '-' || *p == '+')\n    {\n\tchar_u *n = skipwhite(p + 1);\n\n\t// ++, --, -+ and +- are not accepted in Vim9 script\n\tif (vim9 && (*p == '-' || *p == '+') && (*n == '-' || *n == '+'))\n\t{\n\t    semsg(_(e_invalid_expression_str), s);\n\t    return FAIL;\n\t}\n\tp = n;\n    }\n    *arg = p;\n    return OK;\n}\n\n/*\n * Check for a predefined value \"true\", \"false\" and \"null.*\".\n * Return OK when recognized.\n */\n    int\nhandle_predefined(char_u *s, int len, typval_T *rettv)\n{\n    switch (len)\n    {\n\tcase 4: if (STRNCMP(s, \"true\", 4) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_BOOL;\n\t\t    rettv->vval.v_number = VVAL_TRUE;\n\t\t    return OK;\n\t\t}\n\t\tif (STRNCMP(s, \"null\", 4) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_SPECIAL;\n\t\t    rettv->vval.v_number = VVAL_NULL;\n\t\t    return OK;\n\t\t}\n\t\tbreak;\n\tcase 5: if (STRNCMP(s, \"false\", 5) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_BOOL;\n\t\t    rettv->vval.v_number = VVAL_FALSE;\n\t\t    return OK;\n\t\t}\n\t\tbreak;\n\tcase 8: if (STRNCMP(s, \"null_job\", 8) == 0)\n\t\t{\n#ifdef FEAT_JOB_CHANNEL\n\t\t    rettv->v_type = VAR_JOB;\n\t\t    rettv->vval.v_job = NULL;\n#else\n\t\t    rettv->v_type = VAR_SPECIAL;\n\t\t    rettv->vval.v_number = VVAL_NULL;\n#endif\n\t\t    return OK;\n\t\t}\n\t\tbreak;\n\tcase 9:\n\t\tif (STRNCMP(s, \"null_\", 5) != 0)\n\t\t    break;\n\t\tif (STRNCMP(s + 5, \"list\", 4) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_LIST;\n\t\t    rettv->vval.v_list = NULL;\n\t\t    return OK;\n\t\t}\n\t\tif (STRNCMP(s + 5, \"dict\", 4) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_DICT;\n\t\t    rettv->vval.v_dict = NULL;\n\t\t    return OK;\n\t\t}\n\t\tif (STRNCMP(s + 5, \"blob\", 4) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_BLOB;\n\t\t    rettv->vval.v_blob = NULL;\n\t\t    return OK;\n\t\t}\n\t\tbreak;\n\tcase 10: if (STRNCMP(s, \"null_class\", 10) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_CLASS;\n\t\t    rettv->vval.v_class = NULL;\n\t\t    return OK;\n\t\t}\n\t\t break;\n\tcase 11: if (STRNCMP(s, \"null_string\", 11) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_STRING;\n\t\t    rettv->vval.v_string = NULL;\n\t\t    return OK;\n\t\t}\n\t\tif (STRNCMP(s, \"null_object\", 11) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_OBJECT;\n\t\t    rettv->vval.v_object = NULL;\n\t\t    return OK;\n\t\t}\n\t\tbreak;\n\tcase 12:\n\t\tif (STRNCMP(s, \"null_channel\", 12) == 0)\n\t\t{\n#ifdef FEAT_JOB_CHANNEL\n\t\t    rettv->v_type = VAR_CHANNEL;\n\t\t    rettv->vval.v_channel = NULL;\n#else\n\t\t    rettv->v_type = VAR_SPECIAL;\n\t\t    rettv->vval.v_number = VVAL_NULL;\n#endif\n\t\t    return OK;\n\t\t}\n\t\tif (STRNCMP(s, \"null_partial\", 12) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_PARTIAL;\n\t\t    rettv->vval.v_partial = NULL;\n\t\t    return OK;\n\t\t}\n\t\tbreak;\n\tcase 13: if (STRNCMP(s, \"null_function\", 13) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_FUNC;\n\t\t    rettv->vval.v_string = NULL;\n\t\t    return OK;\n\t\t}\n\t\tbreak;\n    }\n    return FAIL;\n}\n\n/*\n * Handle sixth level expression:\n *  number\t\tnumber constant\n *  0zFFFFFFFF\t\tBlob constant\n *  \"string\"\t\tstring constant\n *  'string'\t\tliteral string constant\n *  &option-name\toption value\n *  @r\t\t\tregister contents\n *  identifier\t\tvariable value\n *  function()\t\tfunction call\n *  $VAR\t\tenvironment variable\n *  (expression)\tnested expression\n *  [expr, expr]\tList\n *  {arg, arg -> expr}\tLambda\n *  {key: val, key: val}   Dictionary\n *  #{key: val, key: val}  Dictionary with literal keys\n *\n *  Also handle:\n *  ! in front\t\tlogical NOT\n *  - in front\t\tunary minus\n *  + in front\t\tunary plus (ignored)\n *  trailing []\t\tsubscript in String or List\n *  trailing .name\tentry in Dictionary\n *  trailing ->name()\tmethod call\n *\n * \"arg\" must point to the first non-white of the expression.\n * \"arg\" is advanced to just after the recognized expression.\n *\n * Return OK or FAIL.\n */\n    static int\neval9(\n    char_u\t**arg,\n    typval_T\t*rettv,\n    evalarg_T\t*evalarg,\n    int\t\twant_string)\t// after \".\" operator\n{\n    int\t\tevaluate = evalarg != NULL\n\t\t\t\t      && (evalarg->eval_flags & EVAL_EVALUATE);\n    int\t\tlen;\n    char_u\t*s;\n    char_u\t*name_start = NULL;\n    char_u\t*start_leader, *end_leader;\n    int\t\tret = OK;\n    char_u\t*alias;\n    static int\trecurse = 0;\n    int\t\tvim9script = in_vim9script();\n\n    /*\n     * Initialise variable so that clear_tv() can't mistake this for a\n     * string and free a string that isn't there.\n     */\n    rettv->v_type = VAR_UNKNOWN;\n\n    /*\n     * Skip '!', '-' and '+' characters.  They are handled later.\n     */\n    start_leader = *arg;\n    if (eval_leader(arg, vim9script) == FAIL)\n\treturn FAIL;\n    end_leader = *arg;\n\n    if (**arg == '.' && (!isdigit(*(*arg + 1)) || in_old_script(2)))\n    {\n\tsemsg(_(e_invalid_expression_str), *arg);\n\t++*arg;\n\treturn FAIL;\n    }\n\n    // Limit recursion to 1000 levels.  At least at 10000 we run out of stack\n    // and crash.  With MSVC the stack is smaller.\n    if (recurse ==\n#ifdef _MSC_VER\n\t\t    300\n#else\n\t\t    1000\n#endif\n\t\t    )\n    {\n\tsemsg(_(e_expression_too_recursive_str), *arg);\n\treturn FAIL;\n    }\n    ++recurse;\n\n    switch (**arg)\n    {\n    /*\n     * Number constant.\n     */\n    case '0':\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n    case '.':\tret = eval_number(arg, rettv, evaluate, want_string);\n\n\t\t// Apply prefixed \"-\" and \"+\" now.  Matters especially when\n\t\t// \"->\" follows.\n\t\tif (ret == OK && evaluate && end_leader > start_leader\n\t\t\t\t\t\t  && rettv->v_type != VAR_BLOB)\n\t\t    ret = eval9_leader(rettv, TRUE, start_leader, &end_leader);\n\t\tbreak;\n\n    /*\n     * String constant: \"string\".\n     */\n    case '\"':\tret = eval_string(arg, rettv, evaluate, FALSE);\n\t\tbreak;\n\n    /*\n     * Literal string constant: 'str''ing'.\n     */\n    case '\\'':\tret = eval_lit_string(arg, rettv, evaluate, FALSE);\n\t\tbreak;\n\n    /*\n     * List: [expr, expr]\n     */\n    case '[':\tret = eval_list(arg, rettv, evalarg, TRUE);\n\t\tbreak;\n\n    /*\n     * Dictionary: #{key: val, key: val}\n     */\n    case '#':\tif (vim9script)\n\t\t{\n\t\t    ret = vim9_bad_comment(*arg) ? FAIL : NOTDONE;\n\t\t}\n\t\telse if ((*arg)[1] == '{')\n\t\t{\n\t\t    ++*arg;\n\t\t    ret = eval_dict(arg, rettv, evalarg, TRUE);\n\t\t}\n\t\telse\n\t\t    ret = NOTDONE;\n\t\tbreak;\n\n    /*\n     * Lambda: {arg, arg -> expr}\n     * Dictionary: {'key': val, 'key': val}\n     */\n    case '{':\tif (vim9script)\n\t\t    ret = NOTDONE;\n\t\telse\n\t\t    ret = get_lambda_tv(arg, rettv, vim9script, evalarg);\n\t\tif (ret == NOTDONE)\n\t\t    ret = eval_dict(arg, rettv, evalarg, FALSE);\n\t\tbreak;\n\n    /*\n     * Option value: &name\n     */\n    case '&':\tret = eval_option(arg, rettv, evaluate);\n\t\tbreak;\n\n    /*\n     * Environment variable: $VAR.\n     * Interpolated string: $\"string\" or $'string'.\n     */\n    case '$':\tif ((*arg)[1] == '\"' || (*arg)[1] == '\\'')\n\t\t    ret = eval_interp_string(arg, rettv, evaluate);\n\t\telse\n\t\t    ret = eval_env_var(arg, rettv, evaluate);\n\t\tbreak;\n\n    /*\n     * Register contents: @r.\n     */\n    case '@':\t++*arg;\n\t\tif (evaluate)\n\t\t{\n\t\t    if (vim9script && IS_WHITE_OR_NUL(**arg))\n\t\t\tsemsg(_(e_syntax_error_at_str), *arg);\n\t\t    else if (vim9script && !valid_yank_reg(**arg, FALSE))\n\t\t\temsg_invreg(**arg);\n\t\t    else\n\t\t    {\n\t\t\trettv->v_type = VAR_STRING;\n\t\t\trettv->vval.v_string = get_reg_contents(**arg,\n\t\t\t\t\t\t\t\tGREG_EXPR_SRC);\n\t\t    }\n\t\t}\n\t\tif (**arg != NUL)\n\t\t    ++*arg;\n\t\tbreak;\n\n    /*\n     * nested expression: (expression).\n     * or lambda: (arg) => expr\n     */\n    case '(':\tret = NOTDONE;\n\t\tif (vim9script)\n\t\t{\n\t\t    ret = get_lambda_tv(arg, rettv, TRUE, evalarg);\n\t\t    if (ret == OK && evaluate)\n\t\t    {\n\t\t\tufunc_T *ufunc = rettv->vval.v_partial->pt_func;\n\n\t\t\t// Compile it here to get the return type.  The return\n\t\t\t// type is optional, when it's missing use t_unknown.\n\t\t\t// This is recognized in compile_return().\n\t\t\tif (ufunc->uf_ret_type->tt_type == VAR_VOID)\n\t\t\t    ufunc->uf_ret_type = &t_unknown;\n\t\t\tif (compile_def_function(ufunc, FALSE,\n\t\t\t\t\tget_compile_type(ufunc), NULL) == FAIL)\n\t\t\t{\n\t\t\t    clear_tv(rettv);\n\t\t\t    ret = FAIL;\n\t\t\t}\n\t\t    }\n\t\t}\n\t\tif (ret == NOTDONE)\n\t\t{\n\t\t    *arg = skipwhite_and_linebreak(*arg + 1, evalarg);\n\t\t    ret = eval1(arg, rettv, evalarg);\t// recursive!\n\n\t\t    *arg = skipwhite_and_linebreak(*arg, evalarg);\n\t\t    if (**arg == ')')\n\t\t\t++*arg;\n\t\t    else if (ret == OK)\n\t\t    {\n\t\t\temsg(_(e_missing_closing_paren));\n\t\t\tclear_tv(rettv);\n\t\t\tret = FAIL;\n\t\t    }\n\t\t}\n\t\tbreak;\n\n    default:\tret = NOTDONE;\n\t\tbreak;\n    }\n\n    if (ret == NOTDONE)\n    {\n\t/*\n\t * Must be a variable or function name.\n\t * Can also be a curly-braces kind of name: {expr}.\n\t */\n\ts = *arg;\n\tlen = get_name_len(arg, &alias, evaluate, TRUE);\n\tif (alias != NULL)\n\t    s = alias;\n\n\tif (len <= 0)\n\t    ret = FAIL;\n\telse\n\t{\n\t    int\t    flags = evalarg == NULL ? 0 : evalarg->eval_flags;\n\n\t    if (evaluate && vim9script && len == 1 && *s == '_')\n\t    {\n\t\temsg(_(e_cannot_use_underscore_here));\n\t\tret = FAIL;\n\t    }\n\t    else if (evaluate && vim9script && len > 2\n\t\t\t\t\t\t && s[0] == 's' && s[1] == ':')\n\t    {\n\t\tsemsg(_(e_cannot_use_s_colon_in_vim9_script_str), s);\n\t\tret = FAIL;\n\t    }\n\t    else if ((vim9script ? **arg : *skipwhite(*arg)) == '(')\n\t    {\n\t\t// \"name(...\"  recursive!\n\t\t*arg = skipwhite(*arg);\n\t\tret = eval_func(arg, evalarg, s, len, rettv, flags, NULL);\n\t    }\n\t    else if (flags & EVAL_CONSTANT)\n\t\tret = FAIL;\n\t    else if (evaluate)\n\t    {\n\t\t// get the value of \"true\", \"false\", etc. or a variable\n\t\tret = FAIL;\n\t\tif (vim9script)\n\t\t    ret = handle_predefined(s, len, rettv);\n\t\tif (ret == FAIL)\n\t\t{\n\t\t    name_start = s;\n\t\t    ret = eval_variable(s, len, 0, rettv, NULL,\n\t\t\t\t\t   EVAL_VAR_VERBOSE + EVAL_VAR_IMPORT);\n\t\t}\n\t    }\n\t    else\n\t    {\n\t\t// skip the name\n\t\tcheck_vars(s, len);\n\t\tret = OK;\n\t    }\n\t}\n\tvim_free(alias);\n    }\n\n    // Handle following '[', '(' and '.' for expr[expr], expr.name,\n    // expr(expr), expr->name(expr)\n    if (ret == OK)\n\tret = handle_subscript(arg, name_start, rettv, evalarg, evaluate);\n\n    /*\n     * Apply logical NOT and unary '-', from right to left, ignore '+'.\n     */\n    if (ret == OK && evaluate && end_leader > start_leader)\n\tret = eval9_leader(rettv, FALSE, start_leader, &end_leader);\n\n    --recurse;\n    return ret;\n}\n\n/*\n * Apply the leading \"!\" and \"-\" before an eval9 expression to \"rettv\".\n * When \"numeric_only\" is TRUE only handle \"+\" and \"-\".\n * Adjusts \"end_leaderp\" until it is at \"start_leader\".\n */\n    static int\neval9_leader(\n\ttypval_T    *rettv,\n\tint\t    numeric_only,\n\tchar_u\t    *start_leader,\n\tchar_u\t    **end_leaderp)\n{\n    char_u\t*end_leader = *end_leaderp;\n    int\t\tret = OK;\n    int\t\terror = FALSE;\n    varnumber_T val = 0;\n    vartype_T\ttype = rettv->v_type;\n    int\t\tvim9script = in_vim9script();\n    float_T\t    f = 0.0;\n\n    if (rettv->v_type == VAR_FLOAT)\n\tf = rettv->vval.v_float;\n    else\n    {\n\twhile (VIM_ISWHITE(end_leader[-1]))\n\t    --end_leader;\n\tif (vim9script && end_leader[-1] == '!')\n\t    val = tv2bool(rettv);\n\telse\n\t    val = tv_get_number_chk(rettv, &error);\n    }\n    if (error)\n    {\n\tclear_tv(rettv);\n\tret = FAIL;\n    }\n    else\n    {\n\twhile (end_leader > start_leader)\n\t{\n\t    --end_leader;\n\t    if (*end_leader == '!')\n\t    {\n\t\tif (numeric_only)\n\t\t{\n\t\t    ++end_leader;\n\t\t    break;\n\t\t}\n\t\tif (rettv->v_type == VAR_FLOAT)\n\t\t{\n\t\t    if (vim9script)\n\t\t    {\n\t\t\trettv->v_type = VAR_BOOL;\n\t\t\tval = f == 0.0 ? VVAL_TRUE : VVAL_FALSE;\n\t\t    }\n\t\t    else\n\t\t\tf = !f;\n\t\t}\n\t\telse\n\t\t{\n\t\t    val = !val;\n\t\t    type = VAR_BOOL;\n\t\t}\n\t    }\n\t    else if (*end_leader == '-')\n\t    {\n\t\tif (rettv->v_type == VAR_FLOAT)\n\t\t    f = -f;\n\t\telse\n\t\t{\n\t\t    val = -val;\n\t\t    type = VAR_NUMBER;\n\t\t}\n\t    }\n\t}\n\tif (rettv->v_type == VAR_FLOAT)\n\t{\n\t    clear_tv(rettv);\n\t    rettv->vval.v_float = f;\n\t}\n\telse\n\t{\n\t    clear_tv(rettv);\n\t    if (vim9script)\n\t\trettv->v_type = type;\n\t    else\n\t\trettv->v_type = VAR_NUMBER;\n\t    rettv->vval.v_number = val;\n\t}\n    }\n    *end_leaderp = end_leader;\n    return ret;\n}\n\n/*\n * Call the function referred to in \"rettv\".\n */\n    static int\ncall_func_rettv(\n\tchar_u\t    **arg,\n\tevalarg_T   *evalarg,\n\ttypval_T    *rettv,\n\tint\t    evaluate,\n\tdict_T\t    *selfdict,\n\ttypval_T    *basetv)\n{\n    partial_T\t*pt = NULL;\n    funcexe_T\tfuncexe;\n    typval_T\tfunctv;\n    char_u\t*s;\n    int\t\tret;\n\n    // need to copy the funcref so that we can clear rettv\n    if (evaluate)\n    {\n\tfunctv = *rettv;\n\trettv->v_type = VAR_UNKNOWN;\n\n\t// Invoke the function.  Recursive!\n\tif (functv.v_type == VAR_PARTIAL)\n\t{\n\t    pt = functv.vval.v_partial;\n\t    s = partial_name(pt);\n\t}\n\telse\n\t{\n\t    s = functv.vval.v_string;\n\t    if (s == NULL || *s == NUL)\n\t    {\n\t\temsg(_(e_empty_function_name));\n\t\tret = FAIL;\n\t\tgoto theend;\n\t    }\n\t}\n    }\n    else\n\ts = (char_u *)\"\";\n\n    CLEAR_FIELD(funcexe);\n    funcexe.fe_firstline = curwin->w_cursor.lnum;\n    funcexe.fe_lastline = curwin->w_cursor.lnum;\n    funcexe.fe_evaluate = evaluate;\n    funcexe.fe_partial = pt;\n    funcexe.fe_selfdict = selfdict;\n    funcexe.fe_basetv = basetv;\n    ret = get_func_tv(s, -1, rettv, arg, evalarg, &funcexe);\n\ntheend:\n    // Clear the funcref afterwards, so that deleting it while\n    // evaluating the arguments is possible (see test55).\n    if (evaluate)\n\tclear_tv(&functv);\n\n    return ret;\n}\n\n/*\n * Evaluate \"->method()\".\n * \"*arg\" points to \"method\".\n * Returns FAIL or OK. \"*arg\" is advanced to after the ')'.\n */\n    static int\neval_lambda(\n    char_u\t**arg,\n    typval_T\t*rettv,\n    evalarg_T\t*evalarg,\n    int\t\tverbose)\t// give error messages\n{\n    int\t\tevaluate = evalarg != NULL\n\t\t\t\t      && (evalarg->eval_flags & EVAL_EVALUATE);\n    typval_T\tbase = *rettv;\n    int\t\tret;\n\n    rettv->v_type = VAR_UNKNOWN;\n\n    if (**arg == '{')\n    {\n\t// ->{lambda}()\n\tret = get_lambda_tv(arg, rettv, FALSE, evalarg);\n    }\n    else\n    {\n\t// ->(lambda)()\n\t++*arg;\n\tret = eval1(arg, rettv, evalarg);\n\t*arg = skipwhite_and_linebreak(*arg, evalarg);\n\tif (**arg != ')')\n\t{\n\t    emsg(_(e_missing_closing_paren));\n\t    return FAIL;\n\t}\n\tif (rettv->v_type != VAR_STRING && rettv->v_type != VAR_FUNC\n\t\t\t\t\t       && rettv->v_type != VAR_PARTIAL)\n\t{\n\t    emsg(_(e_string_or_function_required_for_arrow_parens_expr));\n\t    return FAIL;\n\t}\n\t++*arg;\n    }\n    if (ret != OK)\n\treturn FAIL;\n\n    if (**arg != '(')\n    {\n\tif (verbose)\n\t{\n\t    if (*skipwhite(*arg) == '(')\n\t\temsg(_(e_no_white_space_allowed_before_parenthesis));\n\t    else\n\t\tsemsg(_(e_missing_parenthesis_str), \"lambda\");\n\t}\n\tclear_tv(rettv);\n\tret = FAIL;\n    }\n    else\n\tret = call_func_rettv(arg, evalarg, rettv, evaluate, NULL, &base);\n\n    // Clear the funcref afterwards, so that deleting it while\n    // evaluating the arguments is possible (see test55).\n    if (evaluate)\n\tclear_tv(&base);\n\n    return ret;\n}\n\n/*\n * Evaluate \"->method()\".\n * \"*arg\" points to \"method\".\n * Returns FAIL or OK. \"*arg\" is advanced to after the ')'.\n */\n    static int\neval_method(\n    char_u\t**arg,\n    typval_T\t*rettv,\n    evalarg_T\t*evalarg,\n    int\t\tverbose)\t// give error messages\n{\n    char_u\t*name;\n    long\tlen;\n    char_u\t*alias;\n    char_u\t*tofree = NULL;\n    typval_T\tbase = *rettv;\n    int\t\tret = OK;\n    int\t\tevaluate = evalarg != NULL\n\t\t\t\t      && (evalarg->eval_flags & EVAL_EVALUATE);\n\n    rettv->v_type = VAR_UNKNOWN;\n\n    name = *arg;\n    len = get_name_len(arg, &alias, evaluate, evaluate);\n    if (alias != NULL)\n\tname = alias;\n\n    if (len <= 0)\n    {\n\tif (verbose)\n\t    emsg(_(e_missing_name_after_method));\n\tret = FAIL;\n    }\n    else\n    {\n\tchar_u *paren;\n\n\t// If there is no \"(\" immediately following, but there is further on,\n\t// it can be \"import.Func()\", \"dict.Func()\", \"list[nr]\", etc.\n\t// Does not handle anything where \"(\" is part of the expression.\n\t*arg = skipwhite(*arg);\n\n\tif (**arg != '(' && alias == NULL\n\t\t\t\t    && (paren = vim_strchr(*arg, '(')) != NULL)\n\t{\n\t    *arg = name;\n\n\t    // Truncate the name a the \"(\".  Avoid trying to get another line\n\t    // by making \"getline\" NULL.\n\t    *paren = NUL;\n\t    char_u\t*(*getline)(int, void *, int, getline_opt_T) = NULL;\n\t    if (evalarg != NULL)\n\t    {\n\t\tgetline = evalarg->eval_getline;\n\t\tevalarg->eval_getline = NULL;\n\t    }\n\n\t    char_u *deref = deref_function_name(arg, &tofree, evalarg, verbose);\n\t    if (deref == NULL)\n\t    {\n\t\t*arg = name + len;\n\t\tret = FAIL;\n\t    }\n\t    else\n\t    {\n\t\tname = deref;\n\t\tlen = (long)STRLEN(name);\n\t    }\n\n\t    *paren = '(';\n\t    if (getline != NULL)\n\t\tevalarg->eval_getline = getline;\n\t}\n\n\tif (ret == OK)\n\t{\n\t    *arg = skipwhite(*arg);\n\n\t    if (**arg != '(')\n\t    {\n\t\tif (verbose)\n\t\t    semsg(_(e_missing_parenthesis_str), name);\n\t\tret = FAIL;\n\t    }\n\t    else if (VIM_ISWHITE((*arg)[-1]))\n\t    {\n\t\tif (verbose)\n\t\t    emsg(_(e_no_white_space_allowed_before_parenthesis));\n\t\tret = FAIL;\n\t    }\n\t    else\n\t\tret = eval_func(arg, evalarg, name, len, rettv,\n\t\t\t\t\t  evaluate ? EVAL_EVALUATE : 0, &base);\n\t}\n    }\n\n    // Clear the funcref afterwards, so that deleting it while\n    // evaluating the arguments is possible (see test55).\n    if (evaluate)\n\tclear_tv(&base);\n    vim_free(tofree);\n\n    return ret;\n}\n\n/*\n * Evaluate an \"[expr]\" or \"[expr:expr]\" index.  Also \"dict.key\".\n * \"*arg\" points to the '[' or '.'.\n * Returns FAIL or OK. \"*arg\" is advanced to after the ']'.\n */\n    static int\neval_index(\n    char_u\t**arg,\n    typval_T\t*rettv,\n    evalarg_T\t*evalarg,\n    int\t\tverbose)\t// give error messages\n{\n    int\t\tevaluate = evalarg != NULL\n\t\t\t\t      && (evalarg->eval_flags & EVAL_EVALUATE);\n    int\t\tempty1 = FALSE, empty2 = FALSE;\n    typval_T\tvar1, var2;\n    int\t\trange = FALSE;\n    char_u\t*key = NULL;\n    int\t\tkeylen = -1;\n    int\t\tvim9script = in_vim9script();\n\n    if (check_can_index(rettv, evaluate, verbose) == FAIL)\n\treturn FAIL;\n\n    init_tv(&var1);\n    init_tv(&var2);\n    if (**arg == '.')\n    {\n\t/*\n\t * dict.name\n\t */\n\tkey = *arg + 1;\n\tfor (keylen = 0; eval_isdictc(key[keylen]); ++keylen)\n\t    ;\n\tif (keylen == 0)\n\t    return FAIL;\n\t*arg = key + keylen;\n    }\n    else\n    {\n\t/*\n\t * something[idx]\n\t *\n\t * Get the (first) variable from inside the [].\n\t */\n\t*arg = skipwhite_and_linebreak(*arg + 1, evalarg);\n\tif (**arg == ':')\n\t    empty1 = TRUE;\n\telse if (eval1(arg, &var1, evalarg) == FAIL)\t// recursive!\n\t    return FAIL;\n\telse if (vim9script && **arg == ':')\n\t{\n\t    semsg(_(e_white_space_required_before_and_after_str_at_str),\n\t\t\t\t\t\t\t\t    \":\", *arg);\n\t    clear_tv(&var1);\n\t    return FAIL;\n\t}\n\telse if (evaluate)\n\t{\n\t    int error = FALSE;\n\n\t    // allow for indexing with float\n\t    if (vim9script && rettv->v_type == VAR_DICT\n\t\t\t\t\t\t   && var1.v_type == VAR_FLOAT)\n\t    {\n\t\tvar1.vval.v_string = typval_tostring(&var1, TRUE);\n\t\tvar1.v_type = VAR_STRING;\n\t    }\n\n\t    if (vim9script && rettv->v_type == VAR_LIST)\n\t\ttv_get_number_chk(&var1, &error);\n\t    else\n\t\terror = tv_get_string_chk(&var1) == NULL;\n\t    if (error)\n\t    {\n\t\t// not a number or string\n\t\tclear_tv(&var1);\n\t\treturn FAIL;\n\t    }\n\t}\n\n\t/*\n\t * Get the second variable from inside the [:].\n\t */\n\t*arg = skipwhite_and_linebreak(*arg, evalarg);\n\tif (**arg == ':')\n\t{\n\t    range = TRUE;\n\t    ++*arg;\n\t    if (vim9script && !IS_WHITE_OR_NUL(**arg) && **arg != ']')\n\t    {\n\t\tsemsg(_(e_white_space_required_before_and_after_str_at_str),\n\t\t\t\t\t\t\t\t\":\", *arg - 1);\n\t\tif (!empty1)\n\t\t    clear_tv(&var1);\n\t\treturn FAIL;\n\t    }\n\t    *arg = skipwhite_and_linebreak(*arg, evalarg);\n\t    if (**arg == ']')\n\t\tempty2 = TRUE;\n\t    else if (eval1(arg, &var2, evalarg) == FAIL)\t// recursive!\n\t    {\n\t\tif (!empty1)\n\t\t    clear_tv(&var1);\n\t\treturn FAIL;\n\t    }\n\t    else if (evaluate && tv_get_string_chk(&var2) == NULL)\n\t    {\n\t\t// not a number or string\n\t\tif (!empty1)\n\t\t    clear_tv(&var1);\n\t\tclear_tv(&var2);\n\t\treturn FAIL;\n\t    }\n\t}\n\n\t// Check for the ']'.\n\t*arg = skipwhite_and_linebreak(*arg, evalarg);\n\tif (**arg != ']')\n\t{\n\t    if (verbose)\n\t\temsg(_(e_missing_closing_square_brace));\n\t    clear_tv(&var1);\n\t    if (range)\n\t\tclear_tv(&var2);\n\t    return FAIL;\n\t}\n\t*arg = *arg + 1;\t// skip over the ']'\n    }\n\n    if (evaluate)\n    {\n\tint res = eval_index_inner(rettv, range,\n\t\tempty1 ? NULL : &var1, empty2 ? NULL : &var2, FALSE,\n\t\tkey, keylen, verbose);\n\n\tif (!empty1)\n\t    clear_tv(&var1);\n\tif (range)\n\t    clear_tv(&var2);\n\treturn res;\n    }\n    return OK;\n}\n\n/*\n * Check if \"rettv\" can have an [index] or [sli:ce]\n */\n    int\ncheck_can_index(typval_T *rettv, int evaluate, int verbose)\n{\n    switch (rettv->v_type)\n    {\n\tcase VAR_FUNC:\n\tcase VAR_PARTIAL:\n\t    if (verbose)\n\t\temsg(_(e_cannot_index_a_funcref));\n\t    return FAIL;\n\tcase VAR_FLOAT:\n\t    if (verbose)\n\t\temsg(_(e_using_float_as_string));\n\t    return FAIL;\n\tcase VAR_BOOL:\n\tcase VAR_SPECIAL:\n\tcase VAR_JOB:\n\tcase VAR_CHANNEL:\n\tcase VAR_INSTR:\n\tcase VAR_CLASS:\n\tcase VAR_OBJECT:\n\t    if (verbose)\n\t\temsg(_(e_cannot_index_special_variable));\n\t    return FAIL;\n\tcase VAR_UNKNOWN:\n\tcase VAR_ANY:\n\tcase VAR_VOID:\n\t    if (evaluate)\n\t    {\n\t\temsg(_(e_cannot_index_special_variable));\n\t\treturn FAIL;\n\t    }\n\t    // FALLTHROUGH\n\n\tcase VAR_STRING:\n\tcase VAR_LIST:\n\tcase VAR_DICT:\n\tcase VAR_BLOB:\n\t    break;\n\tcase VAR_NUMBER:\n\t    if (in_vim9script())\n\t\temsg(_(e_cannot_index_number));\n\t    break;\n    }\n    return OK;\n}\n\n/*\n * slice() function\n */\n    void\nf_slice(typval_T *argvars, typval_T *rettv)\n{\n    if (in_vim9script()\n\t    && ((argvars[0].v_type != VAR_STRING\n\t\t    && argvars[0].v_type != VAR_LIST\n\t\t    && argvars[0].v_type != VAR_BLOB\n\t\t    && check_for_list_arg(argvars, 0) == FAIL)\n\t\t|| check_for_number_arg(argvars, 1) == FAIL\n\t\t|| check_for_opt_number_arg(argvars, 2) == FAIL))\n\treturn;\n\n    if (check_can_index(argvars, TRUE, FALSE) != OK)\n\treturn;\n\n    copy_tv(argvars, rettv);\n    eval_index_inner(rettv, TRUE, argvars + 1,\n\t    argvars[2].v_type == VAR_UNKNOWN ? NULL : argvars + 2,\n\t    TRUE, NULL, 0, FALSE);\n}\n\n/*\n * Apply index or range to \"rettv\".\n * \"var1\" is the first index, NULL for [:expr].\n * \"var2\" is the second index, NULL for [expr] and [expr: ]\n * \"exclusive\" is TRUE for slice(): second index is exclusive, use character\n * index for string.\n * Alternatively, \"key\" is not NULL, then key[keylen] is the dict index.\n */\n    int\neval_index_inner(\n\ttypval_T    *rettv,\n\tint\t    is_range,\n\ttypval_T    *var1,\n\ttypval_T    *var2,\n\tint\t    exclusive,\n\tchar_u\t    *key,\n\tint\t    keylen,\n\tint\t    verbose)\n{\n    varnumber_T\t    n1, n2 = 0;\n    long\t    len;\n\n    n1 = 0;\n    if (var1 != NULL && rettv->v_type != VAR_DICT)\n\tn1 = tv_get_number(var1);\n\n    if (is_range)\n    {\n\tif (rettv->v_type == VAR_DICT)\n\t{\n\t    if (verbose)\n\t\temsg(_(e_cannot_slice_dictionary));\n\t    return FAIL;\n\t}\n\tif (var2 != NULL)\n\t    n2 = tv_get_number(var2);\n\telse\n\t    n2 = VARNUM_MAX;\n    }\n\n    switch (rettv->v_type)\n    {\n\tcase VAR_UNKNOWN:\n\tcase VAR_ANY:\n\tcase VAR_VOID:\n\tcase VAR_FUNC:\n\tcase VAR_PARTIAL:\n\tcase VAR_FLOAT:\n\tcase VAR_BOOL:\n\tcase VAR_SPECIAL:\n\tcase VAR_JOB:\n\tcase VAR_CHANNEL:\n\tcase VAR_INSTR:\n\tcase VAR_CLASS:\n\tcase VAR_OBJECT:\n\t    break; // not evaluating, skipping over subscript\n\n\tcase VAR_NUMBER:\n\tcase VAR_STRING:\n\t    {\n\t\tchar_u\t*s = tv_get_string(rettv);\n\n\t\tlen = (long)STRLEN(s);\n\t\tif (in_vim9script() || exclusive)\n\t\t{\n\t\t    if (is_range)\n\t\t\ts = string_slice(s, n1, n2, exclusive);\n\t\t    else\n\t\t\ts = char_from_string(s, n1);\n\t\t}\n\t\telse if (is_range)\n\t\t{\n\t\t    // The resulting variable is a substring.  If the indexes\n\t\t    // are out of range the result is empty.\n\t\t    if (n1 < 0)\n\t\t    {\n\t\t\tn1 = len + n1;\n\t\t\tif (n1 < 0)\n\t\t\t    n1 = 0;\n\t\t    }\n\t\t    if (n2 < 0)\n\t\t\tn2 = len + n2;\n\t\t    else if (n2 >= len)\n\t\t\tn2 = len;\n\t\t    if (n1 >= len || n2 < 0 || n1 > n2)\n\t\t\ts = NULL;\n\t\t    else\n\t\t\ts = vim_strnsave(s + n1, n2 - n1 + 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t    // The resulting variable is a string of a single\n\t\t    // character.  If the index is too big or negative the\n\t\t    // result is empty.\n\t\t    if (n1 >= len || n1 < 0)\n\t\t\ts = NULL;\n\t\t    else\n\t\t\ts = vim_strnsave(s + n1, 1);\n\t\t}\n\t\tclear_tv(rettv);\n\t\trettv->v_type = VAR_STRING;\n\t\trettv->vval.v_string = s;\n\t    }\n\t    break;\n\n\tcase VAR_BLOB:\n\t    blob_slice_or_index(rettv->vval.v_blob, is_range, n1, n2,\n\t\t\t\t\t\t\t     exclusive, rettv);\n\t    break;\n\n\tcase VAR_LIST:\n\t    if (var1 == NULL)\n\t\tn1 = 0;\n\t    if (var2 == NULL)\n\t\tn2 = VARNUM_MAX;\n\t    if (list_slice_or_index(rettv->vval.v_list,\n\t\t\t  is_range, n1, n2, exclusive, rettv, verbose) == FAIL)\n\t\treturn FAIL;\n\t    break;\n\n\tcase VAR_DICT:\n\t    {\n\t\tdictitem_T\t*item;\n\t\ttypval_T\ttmp;\n\n\t\tif (key == NULL)\n\t\t{\n\t\t    key = tv_get_string_chk(var1);\n\t\t    if (key == NULL)\n\t\t\treturn FAIL;\n\t\t}\n\n\t\titem = dict_find(rettv->vval.v_dict, key, keylen);\n\n\t\tif (item == NULL)\n\t\t{\n\t\t    if (verbose)\n\t\t    {\n\t\t\tif (keylen > 0)\n\t\t\t    key[keylen] = NUL;\n\t\t\tsemsg(_(e_key_not_present_in_dictionary_str), key);\n\t\t    }\n\t\t    return FAIL;\n\t\t}\n\n\t\tcopy_tv(&item->di_tv, &tmp);\n\t\tclear_tv(rettv);\n\t\t*rettv = tmp;\n\t    }\n\t    break;\n    }\n    return OK;\n}\n\n/*\n * Return the function name of partial \"pt\".\n */\n    char_u *\npartial_name(partial_T *pt)\n{\n    if (pt != NULL)\n    {\n\tif (pt->pt_name != NULL)\n\t    return pt->pt_name;\n\tif (pt->pt_func != NULL)\n\t    return pt->pt_func->uf_name;\n    }\n    return (char_u *)\"\";\n}\n\n    static void\npartial_free(partial_T *pt)\n{\n    int i;\n\n    for (i = 0; i < pt->pt_argc; ++i)\n\tclear_tv(&pt->pt_argv[i]);\n    vim_free(pt->pt_argv);\n    dict_unref(pt->pt_dict);\n    if (pt->pt_name != NULL)\n    {\n\tfunc_unref(pt->pt_name);\n\tvim_free(pt->pt_name);\n    }\n    else\n\tfunc_ptr_unref(pt->pt_func);\n\n    // \"out_up\" is no longer used, decrement refcount on partial that owns it.\n    partial_unref(pt->pt_outer.out_up_partial);\n\n    // Using pt_outer from another partial.\n    partial_unref(pt->pt_outer_partial);\n\n    // Decrease the reference count for the context of a closure.  If down\n    // to the minimum it may be time to free it.\n    if (pt->pt_funcstack != NULL)\n    {\n\t--pt->pt_funcstack->fs_refcount;\n\tfuncstack_check_refcount(pt->pt_funcstack);\n    }\n    // Similarly for loop variables.\n    for (i = 0; i < MAX_LOOP_DEPTH; ++i)\n\tif (pt->pt_loopvars[i] != NULL)\n\t{\n\t    --pt->pt_loopvars[i]->lvs_refcount;\n\t    loopvars_check_refcount(pt->pt_loopvars[i]);\n\t}\n\n    vim_free(pt);\n}\n\n/*\n * Unreference a closure: decrement the reference count and free it when it\n * becomes zero.\n */\n    void\npartial_unref(partial_T *pt)\n{\n    if (pt == NULL)\n\treturn;\n\n    int\tdone = FALSE;\n\n    if (--pt->pt_refcount <= 0)\n\tpartial_free(pt);\n\n    // If the reference count goes down to one, the funcstack may be the\n    // only reference and can be freed if no other partials reference it.\n    else if (pt->pt_refcount == 1)\n    {\n\t// careful: if the funcstack is freed it may contain this partial\n\t// and it gets freed as well\n\tif (pt->pt_funcstack != NULL)\n\t    done = funcstack_check_refcount(pt->pt_funcstack);\n\n\tif (!done)\n\t{\n\t    int\tdepth;\n\n\t    for (depth = 0; depth < MAX_LOOP_DEPTH; ++depth)\n\t\tif (pt->pt_loopvars[depth] != NULL\n\t\t\t&& loopvars_check_refcount(pt->pt_loopvars[depth]))\n\t\t    break;\n\t}\n    }\n}\n\n/*\n * Return the next (unique) copy ID.\n * Used for serializing nested structures.\n */\n    int\nget_copyID(void)\n{\n    current_copyID += COPYID_INC;\n    return current_copyID;\n}\n\n/*\n * Garbage collection for lists and dictionaries.\n *\n * We use reference counts to be able to free most items right away when they\n * are no longer used.  But for composite items it's possible that it becomes\n * unused while the reference count is > 0: When there is a recursive\n * reference.  Example:\n *\t:let l = [1, 2, 3]\n *\t:let d = {9: l}\n *\t:let l[1] = d\n *\n * Since this is quite unusual we handle this with garbage collection: every\n * once in a while find out which lists and dicts are not referenced from any\n * variable.\n *\n * Here is a good reference text about garbage collection (refers to Python\n * but it applies to all reference-counting mechanisms):\n *\thttp://python.ca/nas/python/gc/\n */\n\n/*\n * Do garbage collection for lists and dicts.\n * When \"testing\" is TRUE this is called from test_garbagecollect_now().\n * Return TRUE if some memory was freed.\n */\n    int\ngarbage_collect(int testing)\n{\n    int\t\tcopyID;\n    int\t\tabort = FALSE;\n    buf_T\t*buf;\n    win_T\t*wp;\n    int\t\tdid_free = FALSE;\n    tabpage_T\t*tp;\n\n    if (!testing)\n    {\n\t// Only do this once.\n\twant_garbage_collect = FALSE;\n\tmay_garbage_collect = FALSE;\n\tgarbage_collect_at_exit = FALSE;\n    }\n\n    // The execution stack can grow big, limit the size.\n    if (exestack.ga_maxlen - exestack.ga_len > 500)\n    {\n\tsize_t\tnew_len;\n\tchar_u\t*pp;\n\tint\tn;\n\n\t// Keep 150% of the current size, with a minimum of the growth size.\n\tn = exestack.ga_len / 2;\n\tif (n < exestack.ga_growsize)\n\t    n = exestack.ga_growsize;\n\n\t// Don't make it bigger though.\n\tif (exestack.ga_len + n < exestack.ga_maxlen)\n\t{\n\t    new_len = (size_t)exestack.ga_itemsize * (exestack.ga_len + n);\n\t    pp = vim_realloc(exestack.ga_data, new_len);\n\t    if (pp == NULL)\n\t\treturn FAIL;\n\t    exestack.ga_maxlen = exestack.ga_len + n;\n\t    exestack.ga_data = pp;\n\t}\n    }\n\n    // We advance by two because we add one for items referenced through\n    // previous_funccal.\n    copyID = get_copyID();\n\n    /*\n     * 1. Go through all accessible variables and mark all lists and dicts\n     *    with copyID.\n     */\n\n    // Don't free variables in the previous_funccal list unless they are only\n    // referenced through previous_funccal.  This must be first, because if\n    // the item is referenced elsewhere the funccal must not be freed.\n    abort = abort || set_ref_in_previous_funccal(copyID);\n\n    // script-local variables\n    abort = abort || garbage_collect_scriptvars(copyID);\n\n    // buffer-local variables\n    FOR_ALL_BUFFERS(buf)\n\tabort = abort || set_ref_in_item(&buf->b_bufvar.di_tv, copyID,\n\t\t\t\t\t\t\t\t  NULL, NULL);\n\n    // window-local variables\n    FOR_ALL_TAB_WINDOWS(tp, wp)\n\tabort = abort || set_ref_in_item(&wp->w_winvar.di_tv, copyID,\n\t\t\t\t\t\t\t\t  NULL, NULL);\n    // window-local variables in autocmd windows\n    for (int i = 0; i < AUCMD_WIN_COUNT; ++i)\n\tif (aucmd_win[i].auc_win != NULL)\n\t    abort = abort || set_ref_in_item(\n\t\t    &aucmd_win[i].auc_win->w_winvar.di_tv, copyID, NULL, NULL);\n#ifdef FEAT_PROP_POPUP\n    FOR_ALL_POPUPWINS(wp)\n\tabort = abort || set_ref_in_item(&wp->w_winvar.di_tv, copyID,\n\t\t\t\t\t\t\t\t  NULL, NULL);\n    FOR_ALL_TABPAGES(tp)\n\tFOR_ALL_POPUPWINS_IN_TAB(tp, wp)\n\t\tabort = abort || set_ref_in_item(&wp->w_winvar.di_tv, copyID,\n\t\t\t\t\t\t\t\t  NULL, NULL);\n#endif\n\n    // tabpage-local variables\n    FOR_ALL_TABPAGES(tp)\n\tabort = abort || set_ref_in_item(&tp->tp_winvar.di_tv, copyID,\n\t\t\t\t\t\t\t\t  NULL, NULL);\n    // global variables\n    abort = abort || garbage_collect_globvars(copyID);\n\n    // function-local variables\n    abort = abort || set_ref_in_call_stack(copyID);\n\n    // named functions (matters for closures)\n    abort = abort || set_ref_in_functions(copyID);\n\n    // function call arguments, if v:testing is set.\n    abort = abort || set_ref_in_func_args(copyID);\n\n    // funcstacks keep variables for closures\n    abort = abort || set_ref_in_funcstacks(copyID);\n\n    // loopvars keep variables for loop blocks\n    abort = abort || set_ref_in_loopvars(copyID);\n\n    // v: vars\n    abort = abort || garbage_collect_vimvars(copyID);\n\n    // callbacks in buffers\n    abort = abort || set_ref_in_buffers(copyID);\n\n    // 'completefunc', 'omnifunc' and 'thesaurusfunc' callbacks\n    abort = abort || set_ref_in_insexpand_funcs(copyID);\n\n    // 'operatorfunc' callback\n    abort = abort || set_ref_in_opfunc(copyID);\n\n    // 'tagfunc' callback\n    abort = abort || set_ref_in_tagfunc(copyID);\n\n    // 'imactivatefunc' and 'imstatusfunc' callbacks\n    abort = abort || set_ref_in_im_funcs(copyID);\n\n#ifdef FEAT_LUA\n    abort = abort || set_ref_in_lua(copyID);\n#endif\n\n#ifdef FEAT_PYTHON\n    abort = abort || set_ref_in_python(copyID);\n#endif\n\n#ifdef FEAT_PYTHON3\n    abort = abort || set_ref_in_python3(copyID);\n#endif\n\n#ifdef FEAT_JOB_CHANNEL\n    abort = abort || set_ref_in_channel(copyID);\n    abort = abort || set_ref_in_job(copyID);\n#endif\n#ifdef FEAT_NETBEANS_INTG\n    abort = abort || set_ref_in_nb_channel(copyID);\n#endif\n\n#ifdef FEAT_TIMERS\n    abort = abort || set_ref_in_timer(copyID);\n#endif\n\n#ifdef FEAT_QUICKFIX\n    abort = abort || set_ref_in_quickfix(copyID);\n#endif\n\n#ifdef FEAT_TERMINAL\n    abort = abort || set_ref_in_term(copyID);\n#endif\n\n#ifdef FEAT_PROP_POPUP\n    abort = abort || set_ref_in_popups(copyID);\n#endif\n\n    if (!abort)\n    {\n\t/*\n\t * 2. Free lists and dictionaries that are not referenced.\n\t */\n\tdid_free = free_unref_items(copyID);\n\n\t/*\n\t * 3. Check if any funccal can be freed now.\n\t *    This may call us back recursively.\n\t */\n\tfree_unref_funccal(copyID, testing);\n    }\n    else if (p_verbose > 0)\n    {\n\tverb_msg(_(\"Not enough memory to set references, garbage collection aborted!\"));\n    }\n\n    return did_free;\n}\n\n/*\n * Free lists, dictionaries, channels and jobs that are no longer referenced.\n */\n    static int\nfree_unref_items(int copyID)\n{\n    int\t\tdid_free = FALSE;\n\n    // Let all \"free\" functions know that we are here.  This means no\n    // dictionaries, lists, channels or jobs are to be freed, because we will\n    // do that here.\n    in_free_unref_items = TRUE;\n\n    /*\n     * PASS 1: free the contents of the items.  We don't free the items\n     * themselves yet, so that it is possible to decrement refcount counters\n     */\n\n    // Go through the list of dicts and free items without this copyID.\n    did_free |= dict_free_nonref(copyID);\n\n    // Go through the list of lists and free items without this copyID.\n    did_free |= list_free_nonref(copyID);\n\n    // Go through the list of objects and free items without this copyID.\n    did_free |= object_free_nonref(copyID);\n\n#ifdef FEAT_JOB_CHANNEL\n    // Go through the list of jobs and free items without the copyID. This\n    // must happen before doing channels, because jobs refer to channels, but\n    // the reference from the channel to the job isn't tracked.\n    did_free |= free_unused_jobs_contents(copyID, COPYID_MASK);\n\n    // Go through the list of channels and free items without the copyID.\n    did_free |= free_unused_channels_contents(copyID, COPYID_MASK);\n#endif\n\n    /*\n     * PASS 2: free the items themselves.\n     */\n    dict_free_items(copyID);\n    list_free_items(copyID);\n\n#ifdef FEAT_JOB_CHANNEL\n    // Go through the list of jobs and free items without the copyID. This\n    // must happen before doing channels, because jobs refer to channels, but\n    // the reference from the channel to the job isn't tracked.\n    free_unused_jobs(copyID, COPYID_MASK);\n\n    // Go through the list of channels and free items without the copyID.\n    free_unused_channels(copyID, COPYID_MASK);\n#endif\n\n    in_free_unref_items = FALSE;\n\n    return did_free;\n}\n\n/*\n * Mark all lists and dicts referenced through hashtab \"ht\" with \"copyID\".\n * \"list_stack\" is used to add lists to be marked.  Can be NULL.\n *\n * Returns TRUE if setting references failed somehow.\n */\n    int\nset_ref_in_ht(hashtab_T *ht, int copyID, list_stack_T **list_stack)\n{\n    int\t\ttodo;\n    int\t\tabort = FALSE;\n    hashitem_T\t*hi;\n    hashtab_T\t*cur_ht;\n    ht_stack_T\t*ht_stack = NULL;\n    ht_stack_T\t*tempitem;\n\n    cur_ht = ht;\n    for (;;)\n    {\n\tif (!abort)\n\t{\n\t    // Mark each item in the hashtab.  If the item contains a hashtab\n\t    // it is added to ht_stack, if it contains a list it is added to\n\t    // list_stack.\n\t    todo = (int)cur_ht->ht_used;\n\t    for (hi = cur_ht->ht_array; todo > 0; ++hi)\n\t\tif (!HASHITEM_EMPTY(hi))\n\t\t{\n\t\t    --todo;\n\t\t    abort = abort || set_ref_in_item(&HI2DI(hi)->di_tv, copyID,\n\t\t\t\t\t\t       &ht_stack, list_stack);\n\t\t}\n\t}\n\n\tif (ht_stack == NULL)\n\t    break;\n\n\t// take an item from the stack\n\tcur_ht = ht_stack->ht;\n\ttempitem = ht_stack;\n\tht_stack = ht_stack->prev;\n\tfree(tempitem);\n    }\n\n    return abort;\n}\n\n#if defined(FEAT_LUA) || defined(FEAT_PYTHON) || defined(FEAT_PYTHON3) \\\n\t\t\t\t\t\t\t|| defined(PROTO)\n/*\n * Mark a dict and its items with \"copyID\".\n * Returns TRUE if setting references failed somehow.\n */\n    int\nset_ref_in_dict(dict_T *d, int copyID)\n{\n    if (d != NULL && d->dv_copyID != copyID)\n    {\n\td->dv_copyID = copyID;\n\treturn set_ref_in_ht(&d->dv_hashtab, copyID, NULL);\n    }\n    return FALSE;\n}\n#endif\n\n/*\n * Mark a list and its items with \"copyID\".\n * Returns TRUE if setting references failed somehow.\n */\n    int\nset_ref_in_list(list_T *ll, int copyID)\n{\n    if (ll != NULL && ll->lv_copyID != copyID)\n    {\n\tll->lv_copyID = copyID;\n\treturn set_ref_in_list_items(ll, copyID, NULL);\n    }\n    return FALSE;\n}\n\n/*\n * Mark all lists and dicts referenced through list \"l\" with \"copyID\".\n * \"ht_stack\" is used to add hashtabs to be marked.  Can be NULL.\n *\n * Returns TRUE if setting references failed somehow.\n */\n    int\nset_ref_in_list_items(list_T *l, int copyID, ht_stack_T **ht_stack)\n{\n    listitem_T\t *li;\n    int\t\t abort = FALSE;\n    list_T\t *cur_l;\n    list_stack_T *list_stack = NULL;\n    list_stack_T *tempitem;\n\n    cur_l = l;\n    for (;;)\n    {\n\tif (!abort && cur_l->lv_first != &range_list_item)\n\t    // Mark each item in the list.  If the item contains a hashtab\n\t    // it is added to ht_stack, if it contains a list it is added to\n\t    // list_stack.\n\t    for (li = cur_l->lv_first; !abort && li != NULL; li = li->li_next)\n\t\tabort = abort || set_ref_in_item(&li->li_tv, copyID,\n\t\t\t\t\t\t       ht_stack, &list_stack);\n\tif (list_stack == NULL)\n\t    break;\n\n\t// take an item from the stack\n\tcur_l = list_stack->list;\n\ttempitem = list_stack;\n\tlist_stack = list_stack->prev;\n\tfree(tempitem);\n    }\n\n    return abort;\n}\n\n/*\n * Mark the partial in callback 'cb' with \"copyID\".\n */\n    int\nset_ref_in_callback(callback_T *cb, int copyID)\n{\n    typval_T tv;\n\n    if (cb->cb_name == NULL || *cb->cb_name == NUL || cb->cb_partial == NULL)\n\treturn FALSE;\n\n    tv.v_type = VAR_PARTIAL;\n    tv.vval.v_partial = cb->cb_partial;\n    return set_ref_in_item(&tv, copyID, NULL, NULL);\n}\n\n/*\n * Mark all lists, dicts and other container types referenced through typval\n * \"tv\" with \"copyID\".\n * \"list_stack\" is used to add lists to be marked.  Can be NULL.\n * \"ht_stack\" is used to add hashtabs to be marked.  Can be NULL.\n *\n * Returns TRUE if setting references failed somehow.\n */\n    int\nset_ref_in_item(\n    typval_T\t    *tv,\n    int\t\t    copyID,\n    ht_stack_T\t    **ht_stack,\n    list_stack_T    **list_stack)\n{\n    int\t\tabort = FALSE;\n\n    switch (tv->v_type)\n    {\n\tcase VAR_DICT:\n\t{\n\t    dict_T\t*dd = tv->vval.v_dict;\n\n\t    if (dd != NULL && dd->dv_copyID != copyID)\n\t    {\n\t\t// Didn't see this dict yet.\n\t\tdd->dv_copyID = copyID;\n\t\tif (ht_stack == NULL)\n\t\t{\n\t\t    abort = set_ref_in_ht(&dd->dv_hashtab, copyID, list_stack);\n\t\t}\n\t\telse\n\t\t{\n\t\t    ht_stack_T *newitem = ALLOC_ONE(ht_stack_T);\n\n\t\t    if (newitem == NULL)\n\t\t\tabort = TRUE;\n\t\t    else\n\t\t    {\n\t\t\tnewitem->ht = &dd->dv_hashtab;\n\t\t\tnewitem->prev = *ht_stack;\n\t\t\t*ht_stack = newitem;\n\t\t    }\n\t\t}\n\t    }\n\t    break;\n\t}\n\n\tcase VAR_LIST:\n\t{\n\t    list_T\t*ll = tv->vval.v_list;\n\n\t    if (ll != NULL && ll->lv_copyID != copyID)\n\t    {\n\t\t// Didn't see this list yet.\n\t\tll->lv_copyID = copyID;\n\t\tif (list_stack == NULL)\n\t\t{\n\t\t    abort = set_ref_in_list_items(ll, copyID, ht_stack);\n\t\t}\n\t\telse\n\t\t{\n\t\t    list_stack_T *newitem = ALLOC_ONE(list_stack_T);\n\n\t\t    if (newitem == NULL)\n\t\t\tabort = TRUE;\n\t\t    else\n\t\t    {\n\t\t\tnewitem->list = ll;\n\t\t\tnewitem->prev = *list_stack;\n\t\t\t*list_stack = newitem;\n\t\t    }\n\t\t}\n\t    }\n\t    break;\n\t}\n\n\tcase VAR_FUNC:\n\t{\n\t    abort = set_ref_in_func(tv->vval.v_string, NULL, copyID);\n\t    break;\n\t}\n\n\tcase VAR_PARTIAL:\n\t{\n\t    partial_T\t*pt = tv->vval.v_partial;\n\t    int\t\ti;\n\n\t    if (pt != NULL && pt->pt_copyID != copyID)\n\t    {\n\t\t// Didn't see this partial yet.\n\t\tpt->pt_copyID = copyID;\n\n\t\tabort = set_ref_in_func(pt->pt_name, pt->pt_func, copyID);\n\n\t\tif (pt->pt_dict != NULL)\n\t\t{\n\t\t    typval_T dtv;\n\n\t\t    dtv.v_type = VAR_DICT;\n\t\t    dtv.vval.v_dict = pt->pt_dict;\n\t\t    set_ref_in_item(&dtv, copyID, ht_stack, list_stack);\n\t\t}\n\n\t\tfor (i = 0; i < pt->pt_argc; ++i)\n\t\t    abort = abort || set_ref_in_item(&pt->pt_argv[i], copyID,\n\t\t\t\t\t\t\t ht_stack, list_stack);\n\t\t// pt_funcstack is handled in set_ref_in_funcstacks()\n\t\t// pt_loopvars is handled in set_ref_in_loopvars()\n\t    }\n\t    break;\n\t}\n\n\tcase VAR_JOB:\n\t{\n#ifdef FEAT_JOB_CHANNEL\n\t    job_T\t    *job = tv->vval.v_job;\n\t    typval_T    dtv;\n\n\t    if (job != NULL && job->jv_copyID != copyID)\n\t    {\n\t\tjob->jv_copyID = copyID;\n\t\tif (job->jv_channel != NULL)\n\t\t{\n\t\t    dtv.v_type = VAR_CHANNEL;\n\t\t    dtv.vval.v_channel = job->jv_channel;\n\t\t    set_ref_in_item(&dtv, copyID, ht_stack, list_stack);\n\t\t}\n\t\tif (job->jv_exit_cb.cb_partial != NULL)\n\t\t{\n\t\t    dtv.v_type = VAR_PARTIAL;\n\t\t    dtv.vval.v_partial = job->jv_exit_cb.cb_partial;\n\t\t    set_ref_in_item(&dtv, copyID, ht_stack, list_stack);\n\t\t}\n\t    }\n#endif\n\t    break;\n\t}\n\n\tcase VAR_CHANNEL:\n\t{\n#ifdef FEAT_JOB_CHANNEL\n\t    channel_T   *ch = tv->vval.v_channel;\n\t    ch_part_T   part;\n\t    typval_T    dtv;\n\t    jsonq_T\t*jq;\n\t    cbq_T\t*cq;\n\n\t    if (ch != NULL && ch->ch_copyID != copyID)\n\t    {\n\t\tch->ch_copyID = copyID;\n\t\tfor (part = PART_SOCK; part < PART_COUNT; ++part)\n\t\t{\n\t\t    for (jq = ch->ch_part[part].ch_json_head.jq_next;\n\t\t\t\t\t\t  jq != NULL; jq = jq->jq_next)\n\t\t\tset_ref_in_item(jq->jq_value, copyID,\n\t\t\t\t\t\t\t ht_stack, list_stack);\n\t\t    for (cq = ch->ch_part[part].ch_cb_head.cq_next; cq != NULL;\n\t\t\t\t\t\t\t      cq = cq->cq_next)\n\t\t\tif (cq->cq_callback.cb_partial != NULL)\n\t\t\t{\n\t\t\t    dtv.v_type = VAR_PARTIAL;\n\t\t\t    dtv.vval.v_partial = cq->cq_callback.cb_partial;\n\t\t\t    set_ref_in_item(&dtv, copyID, ht_stack, list_stack);\n\t\t\t}\n\t\t    if (ch->ch_part[part].ch_callback.cb_partial != NULL)\n\t\t    {\n\t\t\tdtv.v_type = VAR_PARTIAL;\n\t\t\tdtv.vval.v_partial =\n\t\t\t\t      ch->ch_part[part].ch_callback.cb_partial;\n\t\t\tset_ref_in_item(&dtv, copyID, ht_stack, list_stack);\n\t\t    }\n\t\t}\n\t\tif (ch->ch_callback.cb_partial != NULL)\n\t\t{\n\t\t    dtv.v_type = VAR_PARTIAL;\n\t\t    dtv.vval.v_partial = ch->ch_callback.cb_partial;\n\t\t    set_ref_in_item(&dtv, copyID, ht_stack, list_stack);\n\t\t}\n\t\tif (ch->ch_close_cb.cb_partial != NULL)\n\t\t{\n\t\t    dtv.v_type = VAR_PARTIAL;\n\t\t    dtv.vval.v_partial = ch->ch_close_cb.cb_partial;\n\t\t    set_ref_in_item(&dtv, copyID, ht_stack, list_stack);\n\t\t}\n\t    }\n#endif\n\t    break;\n\t}\n\n\tcase VAR_CLASS:\n\t    // TODO: Mark methods in class_obj_methods ?\n\t    // Mark initializer expressions?\n\t    break;\n\n\tcase VAR_OBJECT:\n\t    {\n\t\tobject_T *obj = tv->vval.v_object;\n\t\tif (obj != NULL && obj->obj_copyID != copyID)\n\t\t{\n\t\t    obj->obj_copyID = copyID;\n\n\t\t    // The typval_T array is right after the object_T.\n\t\t    typval_T *mtv = (typval_T *)(obj + 1);\n\t\t    for (int i = 0; !abort\n\t\t\t    && i < obj->obj_class->class_obj_member_count; ++i)\n\t\t\tabort = abort || set_ref_in_item(mtv + i, copyID,\n\t\t\t\t\t\t\t ht_stack, list_stack);\n\t\t}\n\t\tbreak;\n\t    }\n\n\tcase VAR_UNKNOWN:\n\tcase VAR_ANY:\n\tcase VAR_VOID:\n\tcase VAR_BOOL:\n\tcase VAR_SPECIAL:\n\tcase VAR_NUMBER:\n\tcase VAR_FLOAT:\n\tcase VAR_STRING:\n\tcase VAR_BLOB:\n\tcase VAR_INSTR:\n\t    // Types that do not contain any other item\n\t    break;\n    }\n\n    return abort;\n}\n\n/*\n * Return a string with the string representation of a variable.\n * If the memory is allocated \"tofree\" is set to it, otherwise NULL.\n * \"numbuf\" is used for a number.\n * When \"copyID\" is not NULL replace recursive lists and dicts with \"...\".\n * When both \"echo_style\" and \"composite_val\" are FALSE, put quotes around\n * strings as \"string()\", otherwise does not put quotes around strings, as\n * \":echo\" displays values.\n * When \"restore_copyID\" is FALSE, repeated items in dictionaries and lists\n * are replaced with \"...\".\n * May return NULL.\n */\n    char_u *\necho_string_core(\n    typval_T\t*tv,\n    char_u\t**tofree,\n    char_u\t*numbuf,\n    int\t\tcopyID,\n    int\t\techo_style,\n    int\t\trestore_copyID,\n    int\t\tcomposite_val)\n{\n    static int\trecurse = 0;\n    char_u\t*r = NULL;\n\n    if (recurse >= DICT_MAXNEST)\n    {\n\tif (!did_echo_string_emsg)\n\t{\n\t    // Only give this message once for a recursive call to avoid\n\t    // flooding the user with errors.  And stop iterating over lists\n\t    // and dicts.\n\t    did_echo_string_emsg = TRUE;\n\t    emsg(_(e_variable_nested_too_deep_for_displaying));\n\t}\n\t*tofree = NULL;\n\treturn (char_u *)\"{E724}\";\n    }\n    ++recurse;\n\n    switch (tv->v_type)\n    {\n\tcase VAR_STRING:\n\t    if (echo_style && !composite_val)\n\t    {\n\t\t*tofree = NULL;\n\t\tr = tv->vval.v_string;\n\t\tif (r == NULL)\n\t\t    r = (char_u *)\"\";\n\t    }\n\t    else\n\t    {\n\t\t*tofree = string_quote(tv->vval.v_string, FALSE);\n\t\tr = *tofree;\n\t    }\n\t    break;\n\n\tcase VAR_FUNC:\n\t    {\n\t\tchar_u buf[MAX_FUNC_NAME_LEN];\n\n\t\tif (echo_style)\n\t\t{\n\t\t    r = tv->vval.v_string == NULL ? (char_u *)\"function()\"\n\t\t\t\t  : make_ufunc_name_readable(tv->vval.v_string,\n\t\t\t\t\t\t       buf, MAX_FUNC_NAME_LEN);\n\t\t    if (r == buf)\n\t\t    {\n\t\t\tr = vim_strsave(buf);\n\t\t\t*tofree = r;\n\t\t    }\n\t\t    else\n\t\t\t*tofree = NULL;\n\t\t}\n\t\telse\n\t\t{\n\t\t    *tofree = string_quote(tv->vval.v_string == NULL ? NULL\n\t\t\t    : make_ufunc_name_readable(\n\t\t\t\ttv->vval.v_string, buf, MAX_FUNC_NAME_LEN),\n\t\t\t\t\t\t\t\t\t TRUE);\n\t\t    r = *tofree;\n\t\t}\n\t    }\n\t    break;\n\n\tcase VAR_PARTIAL:\n\t    {\n\t\tpartial_T   *pt = tv->vval.v_partial;\n\t\tchar_u\t    *fname = string_quote(pt == NULL ? NULL\n\t\t\t\t\t\t    : partial_name(pt), FALSE);\n\t\tgarray_T    ga;\n\t\tint\t    i;\n\t\tchar_u\t    *tf;\n\n\t\tga_init2(&ga, 1, 100);\n\t\tga_concat(&ga, (char_u *)\"function(\");\n\t\tif (fname != NULL)\n\t\t{\n\t\t    // When using uf_name prepend \"g:\" for a global function.\n\t\t    if (pt != NULL && pt->pt_name == NULL && fname[0] == '\\''\n\t\t\t\t\t\t      && vim_isupper(fname[1]))\n\t\t    {\n\t\t\tga_concat(&ga, (char_u *)\"'g:\");\n\t\t\tga_concat(&ga, fname + 1);\n\t\t    }\n\t\t    else\n\t\t\tga_concat(&ga, fname);\n\t\t    vim_free(fname);\n\t\t}\n\t\tif (pt != NULL && pt->pt_argc > 0)\n\t\t{\n\t\t    ga_concat(&ga, (char_u *)\", [\");\n\t\t    for (i = 0; i < pt->pt_argc; ++i)\n\t\t    {\n\t\t\tif (i > 0)\n\t\t\t    ga_concat(&ga, (char_u *)\", \");\n\t\t\tga_concat(&ga,\n\t\t\t     tv2string(&pt->pt_argv[i], &tf, numbuf, copyID));\n\t\t\tvim_free(tf);\n\t\t    }\n\t\t    ga_concat(&ga, (char_u *)\"]\");\n\t\t}\n\t\tif (pt != NULL && pt->pt_dict != NULL)\n\t\t{\n\t\t    typval_T dtv;\n\n\t\t    ga_concat(&ga, (char_u *)\", \");\n\t\t    dtv.v_type = VAR_DICT;\n\t\t    dtv.vval.v_dict = pt->pt_dict;\n\t\t    ga_concat(&ga, tv2string(&dtv, &tf, numbuf, copyID));\n\t\t    vim_free(tf);\n\t\t}\n\t\t// terminate with ')' and a NUL\n\t\tga_concat_len(&ga, (char_u *)\")\", 2);\n\n\t\t*tofree = ga.ga_data;\n\t\tr = *tofree;\n\t\tbreak;\n\t    }\n\n\tcase VAR_BLOB:\n\t    r = blob2string(tv->vval.v_blob, tofree, numbuf);\n\t    break;\n\n\tcase VAR_LIST:\n\t    if (tv->vval.v_list == NULL)\n\t    {\n\t\t// NULL list is equivalent to empty list.\n\t\t*tofree = NULL;\n\t\tr = (char_u *)\"[]\";\n\t    }\n\t    else if (copyID != 0 && tv->vval.v_list->lv_copyID == copyID\n\t\t    && tv->vval.v_list->lv_len > 0)\n\t    {\n\t\t*tofree = NULL;\n\t\tr = (char_u *)\"[...]\";\n\t    }\n\t    else\n\t    {\n\t\tint old_copyID = tv->vval.v_list->lv_copyID;\n\n\t\ttv->vval.v_list->lv_copyID = copyID;\n\t\t*tofree = list2string(tv, copyID, restore_copyID);\n\t\tif (restore_copyID)\n\t\t    tv->vval.v_list->lv_copyID = old_copyID;\n\t\tr = *tofree;\n\t    }\n\t    break;\n\n\tcase VAR_DICT:\n\t    if (tv->vval.v_dict == NULL)\n\t    {\n\t\t// NULL dict is equivalent to empty dict.\n\t\t*tofree = NULL;\n\t\tr = (char_u *)\"{}\";\n\t    }\n\t    else if (copyID != 0 && tv->vval.v_dict->dv_copyID == copyID\n\t\t    && tv->vval.v_dict->dv_hashtab.ht_used != 0)\n\t    {\n\t\t*tofree = NULL;\n\t\tr = (char_u *)\"{...}\";\n\t    }\n\t    else\n\t    {\n\t\tint old_copyID = tv->vval.v_dict->dv_copyID;\n\n\t\ttv->vval.v_dict->dv_copyID = copyID;\n\t\t*tofree = dict2string(tv, copyID, restore_copyID);\n\t\tif (restore_copyID)\n\t\t    tv->vval.v_dict->dv_copyID = old_copyID;\n\t\tr = *tofree;\n\t    }\n\t    break;\n\n\tcase VAR_NUMBER:\n\tcase VAR_UNKNOWN:\n\tcase VAR_ANY:\n\tcase VAR_VOID:\n\t    *tofree = NULL;\n\t    r = tv_get_string_buf(tv, numbuf);\n\t    break;\n\n\tcase VAR_JOB:\n\tcase VAR_CHANNEL:\n#ifdef FEAT_JOB_CHANNEL\n\t    *tofree = NULL;\n\t    r = tv->v_type == VAR_JOB ? job_to_string_buf(tv, numbuf)\n\t\t\t\t\t   : channel_to_string_buf(tv, numbuf);\n\t    if (composite_val)\n\t    {\n\t\t*tofree = string_quote(r, FALSE);\n\t\tr = *tofree;\n\t    }\n#endif\n\t    break;\n\n\tcase VAR_INSTR:\n\t    *tofree = NULL;\n\t    r = (char_u *)\"instructions\";\n\t    break;\n\n\tcase VAR_CLASS:\n\t    {\n\t\tclass_T *cl = tv->vval.v_class;\n\t\tsize_t len = 6 + (cl == NULL ? 9 : STRLEN(cl->class_name)) + 1;\n\t\tr = *tofree = alloc(len);\n\t\tvim_snprintf((char *)r, len, \"class %s\",\n\t\t\t    cl == NULL ? \"[unknown]\" : (char *)cl->class_name);\n\t    }\n\t    break;\n\n\tcase VAR_OBJECT:\n\t    {\n\t\tgarray_T ga;\n\t\tga_init2(&ga, 1, 50);\n\t\tga_concat(&ga, (char_u *)\"object of \");\n\t\tobject_T *obj = tv->vval.v_object;\n\t\tclass_T *cl = obj == NULL ? NULL : obj->obj_class;\n\t\tga_concat(&ga, cl == NULL ? (char_u *)\"[unknown]\"\n\t\t\t\t\t\t\t     : cl->class_name);\n\t\tif (cl != NULL)\n\t\t{\n\t\t    ga_concat(&ga, (char_u *)\" {\");\n\t\t    for (int i = 0; i < cl->class_obj_member_count; ++i)\n\t\t    {\n\t\t\tif (i > 0)\n\t\t\t    ga_concat(&ga, (char_u *)\", \");\n\t\t\tocmember_T *m = &cl->class_obj_members[i];\n\t\t\tga_concat(&ga, m->ocm_name);\n\t\t\tga_concat(&ga, (char_u *)\": \");\n\t\t\tchar_u *tf = NULL;\n\t\t\tga_concat(&ga, echo_string_core(\n\t\t\t\t\t       (typval_T *)(obj + 1) + i,\n\t\t\t\t\t       &tf, numbuf, copyID, echo_style,\n\t\t\t\t\t       restore_copyID, composite_val));\n\t\t\tvim_free(tf);\n\t\t    }\n\t\t    ga_concat(&ga, (char_u *)\"}\");\n\t\t}\n\n\t\t*tofree = r = ga.ga_data;\n\t    }\n\t    break;\n\n\tcase VAR_FLOAT:\n\t    *tofree = NULL;\n\t    vim_snprintf((char *)numbuf, NUMBUFLEN, \"%g\", tv->vval.v_float);\n\t    r = numbuf;\n\t    break;\n\n\tcase VAR_BOOL:\n\tcase VAR_SPECIAL:\n\t    *tofree = NULL;\n\t    r = (char_u *)get_var_special_name(tv->vval.v_number);\n\t    break;\n    }\n\n    if (--recurse == 0)\n\tdid_echo_string_emsg = FALSE;\n    return r;\n}\n\n/*\n * Return a string with the string representation of a variable.\n * If the memory is allocated \"tofree\" is set to it, otherwise NULL.\n * \"numbuf\" is used for a number.\n * Does not put quotes around strings, as \":echo\" displays values.\n * When \"copyID\" is not NULL replace recursive lists and dicts with \"...\".\n * May return NULL.\n */\n    char_u *\necho_string(\n    typval_T\t*tv,\n    char_u\t**tofree,\n    char_u\t*numbuf,\n    int\t\tcopyID)\n{\n    return echo_string_core(tv, tofree, numbuf, copyID, TRUE, FALSE, FALSE);\n}\n\n/*\n * Convert the specified byte index of line 'lnum' in buffer 'buf' to a\n * character index.  Works only for loaded buffers. Returns -1 on failure.\n * The index of the first byte and the first character is zero.\n */\n    int\nbuf_byteidx_to_charidx(buf_T *buf, int lnum, int byteidx)\n{\n    char_u\t*str;\n    char_u\t*t;\n    int\t\tcount;\n\n    if (buf == NULL || buf->b_ml.ml_mfp == NULL)\n\treturn -1;\n\n    if (lnum > buf->b_ml.ml_line_count)\n\tlnum = buf->b_ml.ml_line_count;\n\n    str = ml_get_buf(buf, lnum, FALSE);\n    if (str == NULL)\n\treturn -1;\n\n    if (*str == NUL)\n\treturn 0;\n\n    // count the number of characters\n    t = str;\n    for (count = 0; *t != NUL && t <= str + byteidx; count++)\n\tt += mb_ptr2len(t);\n\n    // In insert mode, when the cursor is at the end of a non-empty line,\n    // byteidx points to the NUL character immediately past the end of the\n    // string. In this case, add one to the character count.\n    if (*t == NUL && byteidx != 0 && t == str + byteidx)\n\tcount++;\n\n    return count - 1;\n}\n\n/*\n * Convert the specified character index of line 'lnum' in buffer 'buf' to a\n * byte index.  Works only for loaded buffers. Returns -1 on failure.\n * The index of the first byte and the first character is zero.\n */\n    int\nbuf_charidx_to_byteidx(buf_T *buf, int lnum, int charidx)\n{\n    char_u\t*str;\n    char_u\t*t;\n\n    if (buf == NULL || buf->b_ml.ml_mfp == NULL)\n\treturn -1;\n\n    if (lnum > buf->b_ml.ml_line_count)\n\tlnum = buf->b_ml.ml_line_count;\n\n    str = ml_get_buf(buf, lnum, FALSE);\n    if (str == NULL)\n\treturn -1;\n\n    // Convert the character offset to a byte offset\n    t = str;\n    while (*t != NUL && --charidx > 0)\n\tt += mb_ptr2len(t);\n\n    return t - str;\n}\n\n/*\n * Translate a String variable into a position.\n * Returns NULL when there is an error.\n */\n    pos_T *\nvar2fpos(\n    typval_T\t*varp,\n    int\t\tdollar_lnum,\t// TRUE when $ is last line\n    int\t\t*fnum,\t\t// set to fnum for '0, 'A, etc.\n    int\t\tcharcol)\t// return character column\n{\n    char_u\t\t*name;\n    static pos_T\tpos;\n    pos_T\t\t*pp;\n\n    // Argument can be [lnum, col, coladd].\n    if (varp->v_type == VAR_LIST)\n    {\n\tlist_T\t\t*l;\n\tint\t\tlen;\n\tint\t\terror = FALSE;\n\tlistitem_T\t*li;\n\n\tl = varp->vval.v_list;\n\tif (l == NULL)\n\t    return NULL;\n\n\t// Get the line number\n\tpos.lnum = list_find_nr(l, 0L, &error);\n\tif (error || pos.lnum <= 0 || pos.lnum > curbuf->b_ml.ml_line_count)\n\t    return NULL;\t// invalid line number\n\tif (charcol)\n\t    len = (long)mb_charlen(ml_get(pos.lnum));\n\telse\n\t    len = (long)STRLEN(ml_get(pos.lnum));\n\n\t// Get the column number\n\t// We accept \"$\" for the column number: last column.\n\tli = list_find(l, 1L);\n\tif (li != NULL && li->li_tv.v_type == VAR_STRING\n\t\t&& li->li_tv.vval.v_string != NULL\n\t\t&& STRCMP(li->li_tv.vval.v_string, \"$\") == 0)\n\t{\n\t    pos.col = len + 1;\n\t}\n\telse\n\t{\n\t    pos.col = list_find_nr(l, 1L, &error);\n\t    if (error)\n\t\treturn NULL;\n\t}\n\n\t// Accept a position up to the NUL after the line.\n\tif (pos.col == 0 || (int)pos.col > len + 1)\n\t    return NULL;\t// invalid column number\n\t--pos.col;\n\n\t// Get the virtual offset.  Defaults to zero.\n\tpos.coladd = list_find_nr(l, 2L, &error);\n\tif (error)\n\t    pos.coladd = 0;\n\n\treturn &pos;\n    }\n\n    if (in_vim9script() && check_for_string_arg(varp, 0) == FAIL)\n\treturn NULL;\n\n    name = tv_get_string_chk(varp);\n    if (name == NULL)\n\treturn NULL;\n\n    pos.lnum = 0;\n    if (name[0] == '.' && (!in_vim9script() || name[1] == NUL))\n    {\n\t// cursor\n\tpos = curwin->w_cursor;\n    }\n    else if (name[0] == 'v' && name[1] == NUL)\n    {\n\t// Visual start\n\tif (VIsual_active)\n\t    pos = VIsual;\n\telse\n\t    pos = curwin->w_cursor;\n    }\n    else if (name[0] == '\\'' && (!in_vim9script()\n\t\t\t\t\t|| (name[1] != NUL && name[2] == NUL)))\n    {\n\t// mark\n\tpp = getmark_buf_fnum(curbuf, name[1], FALSE, fnum);\n\tif (pp == NULL || pp == (pos_T *)-1 || pp->lnum <= 0)\n\t    return NULL;\n\tpos = *pp;\n    }\n    if (pos.lnum != 0)\n    {\n\tif (charcol)\n\t    pos.col = buf_byteidx_to_charidx(curbuf, pos.lnum, pos.col);\n\treturn &pos;\n    }\n\n    pos.coladd = 0;\n\n    if (name[0] == 'w' && dollar_lnum)\n    {\n\tpos.col = 0;\n\tif (name[1] == '0')\t\t// \"w0\": first visible line\n\t{\n\t    update_topline();\n\t    // In silent Ex mode topline is zero, but that's not a valid line\n\t    // number; use one instead.\n\t    pos.lnum = curwin->w_topline > 0 ? curwin->w_topline : 1;\n\t    return &pos;\n\t}\n\telse if (name[1] == '$')\t// \"w$\": last visible line\n\t{\n\t    validate_botline();\n\t    // In silent Ex mode botline is zero, return zero then.\n\t    pos.lnum = curwin->w_botline > 0 ? curwin->w_botline - 1 : 0;\n\t    return &pos;\n\t}\n    }\n    else if (name[0] == '$')\t\t// last column or line\n    {\n\tif (dollar_lnum)\n\t{\n\t    pos.lnum = curbuf->b_ml.ml_line_count;\n\t    pos.col = 0;\n\t}\n\telse\n\t{\n\t    pos.lnum = curwin->w_cursor.lnum;\n\t    if (charcol)\n\t\tpos.col = (colnr_T)mb_charlen(ml_get_curline());\n\t    else\n\t\tpos.col = (colnr_T)STRLEN(ml_get_curline());\n\t}\n\treturn &pos;\n    }\n    if (in_vim9script())\n\tsemsg(_(e_invalid_value_for_line_number_str), name);\n    return NULL;\n}\n\n/*\n * Convert list in \"arg\" into position \"posp\" and optional file number \"fnump\".\n * When \"fnump\" is NULL there is no file number, only 3 items: [lnum, col, off]\n * Note that the column is passed on as-is, the caller may want to decrement\n * it to use 1 for the first column.\n * If \"charcol\" is TRUE use the column as the character index instead of the\n * byte index.\n * Return FAIL when conversion is not possible, doesn't check the position for\n * validity.\n */\n    int\nlist2fpos(\n    typval_T\t*arg,\n    pos_T\t*posp,\n    int\t\t*fnump,\n    colnr_T\t*curswantp,\n    int\t\tcharcol)\n{\n    list_T\t*l = arg->vval.v_list;\n    long\ti = 0;\n    long\tn;\n\n    // List must be: [fnum, lnum, col, coladd, curswant], where \"fnum\" is only\n    // there when \"fnump\" isn't NULL; \"coladd\" and \"curswant\" are optional.\n    if (arg->v_type != VAR_LIST\n\t    || l == NULL\n\t    || l->lv_len < (fnump == NULL ? 2 : 3)\n\t    || l->lv_len > (fnump == NULL ? 4 : 5))\n\treturn FAIL;\n\n    if (fnump != NULL)\n    {\n\tn = list_find_nr(l, i++, NULL);\t// fnum\n\tif (n < 0)\n\t    return FAIL;\n\tif (n == 0)\n\t    n = curbuf->b_fnum;\t\t// current buffer\n\t*fnump = n;\n    }\n\n    n = list_find_nr(l, i++, NULL);\t// lnum\n    if (n < 0)\n\treturn FAIL;\n    posp->lnum = n;\n\n    n = list_find_nr(l, i++, NULL);\t// col\n    if (n < 0)\n\treturn FAIL;\n    // If character position is specified, then convert to byte position\n    // If the line number is zero use the cursor line.\n    if (charcol)\n    {\n\tbuf_T\t*buf;\n\n\t// Get the text for the specified line in a loaded buffer\n\tbuf = buflist_findnr(fnump == NULL ? curbuf->b_fnum : *fnump);\n\tif (buf == NULL || buf->b_ml.ml_mfp == NULL)\n\t    return FAIL;\n\n\tn = buf_charidx_to_byteidx(buf,\n\t\t  posp->lnum == 0 ? curwin->w_cursor.lnum : posp->lnum, n) + 1;\n    }\n    posp->col = n;\n\n    n = list_find_nr(l, i, NULL);\t// off\n    if (n < 0)\n\tposp->coladd = 0;\n    else\n\tposp->coladd = n;\n\n    if (curswantp != NULL)\n\t*curswantp = list_find_nr(l, i + 1, NULL);  // curswant\n\n    return OK;\n}\n\n/*\n * Get the length of an environment variable name.\n * Advance \"arg\" to the first character after the name.\n * Return 0 for error.\n */\n    int\nget_env_len(char_u **arg)\n{\n    char_u\t*p;\n    int\t\tlen;\n\n    for (p = *arg; vim_isIDc(*p); ++p)\n\t;\n    if (p == *arg)\t    // no name found\n\treturn 0;\n\n    len = (int)(p - *arg);\n    *arg = p;\n    return len;\n}\n\n/*\n * Get the length of the name of a function or internal variable.\n * \"arg\" is advanced to after the name.\n * Return 0 if something is wrong.\n */\n    int\nget_id_len(char_u **arg)\n{\n    char_u\t*p;\n    int\t\tlen;\n\n    // Find the end of the name.\n    for (p = *arg; eval_isnamec(*p); ++p)\n    {\n\tif (*p == ':')\n\t{\n\t    // \"s:\" is start of \"s:var\", but \"n:\" is not and can be used in\n\t    // slice \"[n:]\".  Also \"xx:\" is not a namespace.\n\t    len = (int)(p - *arg);\n\t    if ((len == 1 && vim_strchr(NAMESPACE_CHAR, **arg) == NULL)\n\t\t    || len > 1)\n\t\tbreak;\n\t}\n    }\n    if (p == *arg)\t    // no name found\n\treturn 0;\n\n    len = (int)(p - *arg);\n    *arg = p;\n\n    return len;\n}\n\n/*\n * Get the length of the name of a variable or function.\n * Only the name is recognized, does not handle \".key\" or \"[idx]\".\n * \"arg\" is advanced to the first non-white character after the name.\n * Return -1 if curly braces expansion failed.\n * Return 0 if something else is wrong.\n * If the name contains 'magic' {}'s, expand them and return the\n * expanded name in an allocated string via 'alias' - caller must free.\n */\n    int\nget_name_len(\n    char_u\t**arg,\n    char_u\t**alias,\n    int\t\tevaluate,\n    int\t\tverbose)\n{\n    int\t\tlen;\n    char_u\t*p;\n    char_u\t*expr_start;\n    char_u\t*expr_end;\n\n    *alias = NULL;  // default to no alias\n\n    if ((*arg)[0] == K_SPECIAL && (*arg)[1] == KS_EXTRA\n\t\t\t\t\t\t  && (*arg)[2] == (int)KE_SNR)\n    {\n\t// hard coded <SNR>, already translated\n\t*arg += 3;\n\treturn get_id_len(arg) + 3;\n    }\n    len = eval_fname_script(*arg);\n    if (len > 0)\n    {\n\t// literal \"<SID>\", \"s:\" or \"<SNR>\"\n\t*arg += len;\n    }\n\n    /*\n     * Find the end of the name; check for {} construction.\n     */\n    p = find_name_end(*arg, &expr_start, &expr_end,\n\t\t\t\t\t       len > 0 ? 0 : FNE_CHECK_START);\n    if (expr_start != NULL)\n    {\n\tchar_u\t*temp_string;\n\n\tif (!evaluate)\n\t{\n\t    len += (int)(p - *arg);\n\t    *arg = skipwhite(p);\n\t    return len;\n\t}\n\n\t/*\n\t * Include any <SID> etc in the expanded string:\n\t * Thus the -len here.\n\t */\n\ttemp_string = make_expanded_name(*arg - len, expr_start, expr_end, p);\n\tif (temp_string == NULL)\n\t    return -1;\n\t*alias = temp_string;\n\t*arg = skipwhite(p);\n\treturn (int)STRLEN(temp_string);\n    }\n\n    len += get_id_len(arg);\n    // Only give an error when there is something, otherwise it will be\n    // reported at a higher level.\n    if (len == 0 && verbose && **arg != NUL)\n\tsemsg(_(e_invalid_expression_str), *arg);\n\n    return len;\n}\n\n/*\n * Find the end of a variable or function name, taking care of magic braces.\n * If \"expr_start\" is not NULL then \"expr_start\" and \"expr_end\" are set to the\n * start and end of the first magic braces item.\n * \"flags\" can have FNE_INCL_BR and FNE_CHECK_START.\n * Return a pointer to just after the name.  Equal to \"arg\" if there is no\n * valid name.\n */\n    char_u *\nfind_name_end(\n    char_u\t*arg,\n    char_u\t**expr_start,\n    char_u\t**expr_end,\n    int\t\tflags)\n{\n    int\t\tmb_nest = 0;\n    int\t\tbr_nest = 0;\n    char_u\t*p;\n    int\t\tlen;\n    int\t\tvim9script = in_vim9script();\n\n    if (expr_start != NULL)\n    {\n\t*expr_start = NULL;\n\t*expr_end = NULL;\n    }\n\n    // Quick check for valid starting character.\n    if ((flags & FNE_CHECK_START) && !eval_isnamec1(*arg)\n\t\t\t\t\t\t&& (*arg != '{' || vim9script))\n\treturn arg;\n\n    for (p = arg; *p != NUL\n\t\t    && (eval_isnamec(*p)\n\t\t\t|| (*p == '{' && !vim9script)\n\t\t\t|| ((flags & FNE_INCL_BR) && (*p == '['\n\t\t\t\t\t || (*p == '.' && eval_isdictc(p[1]))))\n\t\t\t|| mb_nest != 0\n\t\t\t|| br_nest != 0); MB_PTR_ADV(p))\n    {\n\tif (*p == '\\'')\n\t{\n\t    // skip over 'string' to avoid counting [ and ] inside it.\n\t    for (p = p + 1; *p != NUL && *p != '\\''; MB_PTR_ADV(p))\n\t\t;\n\t    if (*p == NUL)\n\t\tbreak;\n\t}\n\telse if (*p == '\"')\n\t{\n\t    // skip over \"str\\\"ing\" to avoid counting [ and ] inside it.\n\t    for (p = p + 1; *p != NUL && *p != '\"'; MB_PTR_ADV(p))\n\t\tif (*p == '\\\\' && p[1] != NUL)\n\t\t    ++p;\n\t    if (*p == NUL)\n\t\tbreak;\n\t}\n\telse if (br_nest == 0 && mb_nest == 0 && *p == ':')\n\t{\n\t    // \"s:\" is start of \"s:var\", but \"n:\" is not and can be used in\n\t    // slice \"[n:]\".  Also \"xx:\" is not a namespace. But {ns}: is.\n\t    len = (int)(p - arg);\n\t    if ((len == 1 && vim_strchr(NAMESPACE_CHAR, *arg) == NULL)\n\t\t    || (len > 1 && p[-1] != '}'))\n\t\tbreak;\n\t}\n\n\tif (mb_nest == 0)\n\t{\n\t    if (*p == '[')\n\t\t++br_nest;\n\t    else if (*p == ']')\n\t\t--br_nest;\n\t}\n\n\tif (br_nest == 0 && !vim9script)\n\t{\n\t    if (*p == '{')\n\t    {\n\t\tmb_nest++;\n\t\tif (expr_start != NULL && *expr_start == NULL)\n\t\t    *expr_start = p;\n\t    }\n\t    else if (*p == '}')\n\t    {\n\t\tmb_nest--;\n\t\tif (expr_start != NULL && mb_nest == 0 && *expr_end == NULL)\n\t\t    *expr_end = p;\n\t    }\n\t}\n    }\n\n    return p;\n}\n\n/*\n * Expands out the 'magic' {}'s in a variable/function name.\n * Note that this can call itself recursively, to deal with\n * constructs like foo{bar}{baz}{bam}\n * The four pointer arguments point to \"foo{expre}ss{ion}bar\"\n *\t\t\t\"in_start\"      ^\n *\t\t\t\"expr_start\"\t   ^\n *\t\t\t\"expr_end\"\t\t ^\n *\t\t\t\"in_end\"\t\t\t    ^\n *\n * Returns a new allocated string, which the caller must free.\n * Returns NULL for failure.\n */\n    static char_u *\nmake_expanded_name(\n    char_u\t*in_start,\n    char_u\t*expr_start,\n    char_u\t*expr_end,\n    char_u\t*in_end)\n{\n    char_u\tc1;\n    char_u\t*retval = NULL;\n    char_u\t*temp_result;\n\n    if (expr_end == NULL || in_end == NULL)\n\treturn NULL;\n    *expr_start\t= NUL;\n    *expr_end = NUL;\n    c1 = *in_end;\n    *in_end = NUL;\n\n    temp_result = eval_to_string(expr_start + 1, FALSE, FALSE);\n    if (temp_result != NULL)\n    {\n\tretval = alloc(STRLEN(temp_result) + (expr_start - in_start)\n\t\t\t\t\t\t   + (in_end - expr_end) + 1);\n\tif (retval != NULL)\n\t{\n\t    STRCPY(retval, in_start);\n\t    STRCAT(retval, temp_result);\n\t    STRCAT(retval, expr_end + 1);\n\t}\n    }\n    vim_free(temp_result);\n\n    *in_end = c1;\t\t// put char back for error messages\n    *expr_start = '{';\n    *expr_end = '}';\n\n    if (retval != NULL)\n    {\n\ttemp_result = find_name_end(retval, &expr_start, &expr_end, 0);\n\tif (expr_start != NULL)\n\t{\n\t    // Further expansion!\n\t    temp_result = make_expanded_name(retval, expr_start,\n\t\t\t\t\t\t       expr_end, temp_result);\n\t    vim_free(retval);\n\t    retval = temp_result;\n\t}\n    }\n\n    return retval;\n}\n\n/*\n * Return TRUE if character \"c\" can be used in a variable or function name.\n * Does not include '{' or '}' for magic braces.\n */\n    int\neval_isnamec(int c)\n{\n    return ASCII_ISALNUM(c) || c == '_' || c == ':' || c == AUTOLOAD_CHAR;\n}\n\n/*\n * Return TRUE if character \"c\" can be used as the first character in a\n * variable or function name (excluding '{' and '}').\n */\n    int\neval_isnamec1(int c)\n{\n    return ASCII_ISALPHA(c) || c == '_';\n}\n\n/*\n * Return TRUE if character \"c\" can be used as the first character of a\n * dictionary key.\n */\n    int\neval_isdictc(int c)\n{\n    return ASCII_ISALNUM(c) || c == '_';\n}\n\n/*\n * Handle:\n * - expr[expr], expr[expr:expr] subscript\n * - \".name\" lookup\n * - function call with Funcref variable: func(expr)\n * - method call: var->method()\n *\n * Can all be combined in any order: dict.func(expr)[idx]['func'](expr)->len()\n * \"name_start\" points to a variable before the subscript or is NULL.\n */\n    int\nhandle_subscript(\n    char_u\t**arg,\n    char_u\t*name_start,\n    typval_T\t*rettv,\n    evalarg_T\t*evalarg,\n    int\t\tverbose)\t// give error messages\n{\n    int\t\tevaluate = evalarg != NULL\n\t\t\t\t      && (evalarg->eval_flags & EVAL_EVALUATE);\n    int\t\tret = OK;\n    dict_T\t*selfdict = NULL;\n    int\t\tcheck_white = TRUE;\n    int\t\tgetnext;\n    char_u\t*p;\n\n    while (ret == OK)\n    {\n\t// When at the end of the line and \".name\" or \"->{\" or \"->X\" follows in\n\t// the next line then consume the line break.\n\tp = eval_next_non_blank(*arg, evalarg, &getnext);\n\tif (getnext\n\t    && ((rettv->v_type == VAR_DICT && *p == '.' && eval_isdictc(p[1]))\n\t\t|| (p[0] == '-' && p[1] == '>' && (p[2] == '{'\n\t\t\t|| ASCII_ISALPHA(in_vim9script() ? *skipwhite(p + 2)\n\t\t\t\t\t\t\t\t    : p[2])))))\n\t{\n\t    *arg = eval_next_line(*arg, evalarg);\n\t    p = *arg;\n\t    check_white = FALSE;\n\t}\n\n\tif (rettv->v_type == VAR_ANY)\n\t{\n\t    char_u\t*exp_name;\n\t    int\t\tcc;\n\t    int\t\tidx;\n\t    ufunc_T\t*ufunc;\n\t    type_T\t*type;\n\n\t    // Found script from \"import {name} as name\", script item name must\n\t    // follow.  \"rettv->vval.v_number\" has the script ID.\n\t    if (**arg != '.')\n\t    {\n\t\tif (verbose)\n\t\t    semsg(_(e_expected_dot_after_name_str),\n\t\t\t\t\tname_start != NULL ? name_start: *arg);\n\t\tret = FAIL;\n\t\tbreak;\n\t    }\n\t    ++*arg;\n\t    if (IS_WHITE_OR_NUL(**arg))\n\t    {\n\t\tif (verbose)\n\t\t    emsg(_(e_no_white_space_allowed_after_dot));\n\t\tret = FAIL;\n\t\tbreak;\n\t    }\n\n\t    // isolate the name\n\t    exp_name = *arg;\n\t    while (eval_isnamec(**arg))\n\t\t++*arg;\n\t    cc = **arg;\n\t    **arg = NUL;\n\n\t    idx = find_exported(rettv->vval.v_number, exp_name, &ufunc, &type,\n\t\t       evalarg == NULL ? NULL : evalarg->eval_cctx,\n\t\t       evalarg == NULL ? NULL : evalarg->eval_cstack, verbose);\n\t    **arg = cc;\n\n\t    if (idx < 0 && ufunc == NULL)\n\t    {\n\t\tret = FAIL;\n\t\tbreak;\n\t    }\n\t    if (idx >= 0)\n\t    {\n\t\tscriptitem_T    *si = SCRIPT_ITEM(rettv->vval.v_number);\n\t\tsvar_T\t\t*sv = ((svar_T *)si->sn_var_vals.ga_data) + idx;\n\n\t\tcopy_tv(sv->sv_tv, rettv);\n\t    }\n\t    else\n\t    {\n\t\trettv->v_type = VAR_FUNC;\n\t\trettv->vval.v_string = vim_strsave(ufunc->uf_name);\n\t    }\n\t    continue;\n\t}\n\n\tif ((**arg == '(' && (!evaluate || rettv->v_type == VAR_FUNC\n\t\t\t    || rettv->v_type == VAR_PARTIAL))\n\t\t    && (!check_white || !VIM_ISWHITE(*(*arg - 1))))\n\t{\n\t    ret = call_func_rettv(arg, evalarg, rettv, evaluate,\n\t\t\t\t\t\t\t       selfdict, NULL);\n\n\t    // Stop the expression evaluation when immediately aborting on\n\t    // error, or when an interrupt occurred or an exception was thrown\n\t    // but not caught.\n\t    if (aborting())\n\t    {\n\t\tif (ret == OK)\n\t\t    clear_tv(rettv);\n\t\tret = FAIL;\n\t    }\n\t    dict_unref(selfdict);\n\t    selfdict = NULL;\n\t}\n\telse if (p[0] == '-' && p[1] == '>')\n\t{\n\t    if (in_vim9script())\n\t\t*arg = skipwhite(p + 2);\n\t    else\n\t\t*arg = p + 2;\n\t    if (ret == OK)\n\t    {\n\t\tif (VIM_ISWHITE(**arg))\n\t\t{\n\t\t    emsg(_(e_no_white_space_allowed_before_parenthesis));\n\t\t    ret = FAIL;\n\t\t}\n\t\telse if ((**arg == '{' && !in_vim9script()) || **arg == '(')\n\t\t    // expr->{lambda}() or expr->(lambda)()\n\t\t    ret = eval_lambda(arg, rettv, evalarg, verbose);\n\t\telse\n\t\t    // expr->name()\n\t\t    ret = eval_method(arg, rettv, evalarg, verbose);\n\t    }\n\t}\n\t// \".\" is \".name\" lookup when we found a dict or when evaluating and\n\t// scriptversion is at least 2, where string concatenation is \"..\".\n\telse if (**arg == '['\n\t\t|| (**arg == '.' && (rettv->v_type == VAR_DICT\n\t\t\t|| (!evaluate\n\t\t\t    && (*arg)[1] != '.'\n\t\t\t    && !in_old_script(2)))))\n\t{\n\t    dict_unref(selfdict);\n\t    if (rettv->v_type == VAR_DICT)\n\t    {\n\t\tselfdict = rettv->vval.v_dict;\n\t\tif (selfdict != NULL)\n\t\t    ++selfdict->dv_refcount;\n\t    }\n\t    else\n\t\tselfdict = NULL;\n\t    if (eval_index(arg, rettv, evalarg, verbose) == FAIL)\n\t    {\n\t\tclear_tv(rettv);\n\t\tret = FAIL;\n\t    }\n\t}\n\telse if (**arg == '.' && (rettv->v_type == VAR_CLASS\n\t\t\t\t\t       || rettv->v_type == VAR_OBJECT))\n\t{\n\t    // class member: SomeClass.varname\n\t    // class method: SomeClass.SomeMethod()\n\t    // class constructor: SomeClass.new()\n\t    // object member: someObject.varname\n\t    // object method: someObject.SomeMethod()\n\t    if (class_object_index(arg, rettv, evalarg, verbose) == FAIL)\n\t    {\n\t\tclear_tv(rettv);\n\t\tret = FAIL;\n\t    }\n\t}\n\telse\n\t    break;\n    }\n\n    // Turn \"dict.Func\" into a partial for \"Func\" bound to \"dict\".\n    // Don't do this when \"Func\" is already a partial that was bound\n    // explicitly (pt_auto is FALSE).\n    if (selfdict != NULL\n\t    && (rettv->v_type == VAR_FUNC\n\t\t|| (rettv->v_type == VAR_PARTIAL\n\t\t    && (rettv->vval.v_partial->pt_auto\n\t\t\t|| rettv->vval.v_partial->pt_dict == NULL))))\n\tselfdict = make_partial(selfdict, rettv);\n\n    dict_unref(selfdict);\n    return ret;\n}\n\n/*\n * Make a copy of an item.\n * Lists and Dictionaries are also copied.  A deep copy if \"deep\" is set.\n * \"top\" is TRUE for the toplevel of copy().\n * For deepcopy() \"copyID\" is zero for a full copy or the ID for when a\n * reference to an already copied list/dict can be used.\n * Returns FAIL or OK.\n */\n    int\nitem_copy(\n    typval_T\t*from,\n    typval_T\t*to,\n    int\t\tdeep,\n    int\t\ttop,\n    int\t\tcopyID)\n{\n    static int\trecurse = 0;\n    int\t\tret = OK;\n\n    if (recurse >= DICT_MAXNEST)\n    {\n\temsg(_(e_variable_nested_too_deep_for_making_copy));\n\treturn FAIL;\n    }\n    ++recurse;\n\n    switch (from->v_type)\n    {\n\tcase VAR_NUMBER:\n\tcase VAR_FLOAT:\n\tcase VAR_STRING:\n\tcase VAR_FUNC:\n\tcase VAR_PARTIAL:\n\tcase VAR_BOOL:\n\tcase VAR_SPECIAL:\n\tcase VAR_JOB:\n\tcase VAR_CHANNEL:\n\tcase VAR_INSTR:\n\tcase VAR_CLASS:\n\tcase VAR_OBJECT:\n\t    copy_tv(from, to);\n\t    break;\n\tcase VAR_LIST:\n\t    to->v_type = VAR_LIST;\n\t    to->v_lock = 0;\n\t    if (from->vval.v_list == NULL)\n\t\tto->vval.v_list = NULL;\n\t    else if (copyID != 0 && from->vval.v_list->lv_copyID == copyID)\n\t    {\n\t\t// use the copy made earlier\n\t\tto->vval.v_list = from->vval.v_list->lv_copylist;\n\t\t++to->vval.v_list->lv_refcount;\n\t    }\n\t    else\n\t\tto->vval.v_list = list_copy(from->vval.v_list,\n\t\t\t\t\t\t\t    deep, top, copyID);\n\t    if (to->vval.v_list == NULL)\n\t\tret = FAIL;\n\t    break;\n\tcase VAR_BLOB:\n\t    ret = blob_copy(from->vval.v_blob, to);\n\t    break;\n\tcase VAR_DICT:\n\t    to->v_type = VAR_DICT;\n\t    to->v_lock = 0;\n\t    if (from->vval.v_dict == NULL)\n\t\tto->vval.v_dict = NULL;\n\t    else if (copyID != 0 && from->vval.v_dict->dv_copyID == copyID)\n\t    {\n\t\t// use the copy made earlier\n\t\tto->vval.v_dict = from->vval.v_dict->dv_copydict;\n\t\t++to->vval.v_dict->dv_refcount;\n\t    }\n\t    else\n\t\tto->vval.v_dict = dict_copy(from->vval.v_dict,\n\t\t\t\t\t\t\t    deep, top, copyID);\n\t    if (to->vval.v_dict == NULL)\n\t\tret = FAIL;\n\t    break;\n\tcase VAR_UNKNOWN:\n\tcase VAR_ANY:\n\tcase VAR_VOID:\n\t    internal_error_no_abort(\"item_copy(UNKNOWN)\");\n\t    ret = FAIL;\n    }\n    --recurse;\n    return ret;\n}\n\n    void\necho_one(typval_T *rettv, int with_space, int *atstart, int *needclr)\n{\n    char_u\t*tofree;\n    char_u\tnumbuf[NUMBUFLEN];\n    char_u\t*p = echo_string(rettv, &tofree, numbuf, get_copyID());\n\n    if (*atstart)\n    {\n\t*atstart = FALSE;\n\t// Call msg_start() after eval1(), evaluating the expression\n\t// may cause a message to appear.\n\tif (with_space)\n\t{\n\t    // Mark the saved text as finishing the line, so that what\n\t    // follows is displayed on a new line when scrolling back\n\t    // at the more prompt.\n\t    msg_sb_eol();\n\t    msg_start();\n\t}\n    }\n    else if (with_space)\n\tmsg_puts_attr(\" \", echo_attr);\n\n    if (p != NULL)\n\tfor ( ; *p != NUL && !got_int; ++p)\n\t{\n\t    if (*p == '\\n' || *p == '\\r' || *p == TAB)\n\t    {\n\t\tif (*p != TAB && *needclr)\n\t\t{\n\t\t    // remove any text still there from the command\n\t\t    msg_clr_eos();\n\t\t    *needclr = FALSE;\n\t\t}\n\t\tmsg_putchar_attr(*p, echo_attr);\n\t    }\n\t    else\n\t    {\n\t\tif (has_mbyte)\n\t\t{\n\t\t    int i = (*mb_ptr2len)(p);\n\n\t\t    (void)msg_outtrans_len_attr(p, i, echo_attr);\n\t\t    p += i - 1;\n\t\t}\n\t\telse\n\t\t    (void)msg_outtrans_len_attr(p, 1, echo_attr);\n\t    }\n\t}\n    vim_free(tofree);\n}\n\n/*\n * \":echo expr1 ...\"\tprint each argument separated with a space, add a\n *\t\t\tnewline at the end.\n * \":echon expr1 ...\"\tprint each argument plain.\n */\n    void\nex_echo(exarg_T *eap)\n{\n    char_u\t*arg = eap->arg;\n    typval_T\trettv;\n    char_u\t*arg_start;\n    int\t\tneedclr = TRUE;\n    int\t\tatstart = TRUE;\n    int\t\tdid_emsg_before = did_emsg;\n    int\t\tcalled_emsg_before = called_emsg;\n    evalarg_T\tevalarg;\n\n    fill_evalarg_from_eap(&evalarg, eap, eap->skip);\n\n    if (eap->skip)\n\t++emsg_skip;\n    while ((!ends_excmd2(eap->cmd, arg) || *arg == '\"') && !got_int)\n    {\n\t// If eval1() causes an error message the text from the command may\n\t// still need to be cleared. E.g., \"echo 22,44\".\n\tneed_clr_eos = needclr;\n\n\targ_start = arg;\n\tif (eval1(&arg, &rettv, &evalarg) == FAIL)\n\t{\n\t    /*\n\t     * Report the invalid expression unless the expression evaluation\n\t     * has been cancelled due to an aborting error, an interrupt, or an\n\t     * exception.\n\t     */\n\t    if (!aborting() && did_emsg == did_emsg_before\n\t\t\t\t\t  && called_emsg == called_emsg_before)\n\t\tsemsg(_(e_invalid_expression_str), arg_start);\n\t    need_clr_eos = FALSE;\n\t    break;\n\t}\n\tneed_clr_eos = FALSE;\n\n\tif (!eap->skip)\n\t{\n\t    if (rettv.v_type == VAR_VOID)\n\t    {\n\t\tsemsg(_(e_expression_does_not_result_in_value_str), arg_start);\n\t\tbreak;\n\t    }\n\t    echo_one(&rettv, eap->cmdidx == CMD_echo, &atstart, &needclr);\n\t}\n\n\tclear_tv(&rettv);\n\targ = skipwhite(arg);\n    }\n    set_nextcmd(eap, arg);\n    clear_evalarg(&evalarg, eap);\n\n    if (eap->skip)\n\t--emsg_skip;\n    else\n    {\n\t// remove text that may still be there from the command\n\tif (needclr)\n\t    msg_clr_eos();\n\tif (eap->cmdidx == CMD_echo)\n\t    msg_end();\n    }\n}\n\n/*\n * \":echohl {name}\".\n */\n    void\nex_echohl(exarg_T *eap)\n{\n    echo_attr = syn_name2attr(eap->arg);\n}\n\n/*\n * Returns the :echo attribute\n */\n    int\nget_echo_attr(void)\n{\n    return echo_attr;\n}\n\n/*\n * \":execute expr1 ...\"\texecute the result of an expression.\n * \":echomsg expr1 ...\"\tPrint a message\n * \":echowindow expr1 ...\" Print a message in the messages window\n * \":echoerr expr1 ...\"\tPrint an error\n * \":echoconsole expr1 ...\" Print a message on stdout\n * Each gets spaces around each argument and a newline at the end for\n * echo commands\n */\n    void\nex_execute(exarg_T *eap)\n{\n    char_u\t*arg = eap->arg;\n    typval_T\trettv;\n    int\t\tret = OK;\n    char_u\t*p;\n    garray_T\tga;\n    int\t\tlen;\n    long\tstart_lnum = SOURCING_LNUM;\n\n    ga_init2(&ga, 1, 80);\n\n    if (eap->skip)\n\t++emsg_skip;\n    while (!ends_excmd2(eap->cmd, arg) || *arg == '\"')\n    {\n\tret = eval1_emsg(&arg, &rettv, eap);\n\tif (ret == FAIL)\n\t    break;\n\n\tif (!eap->skip)\n\t{\n\t    char_u   buf[NUMBUFLEN];\n\n\t    if (eap->cmdidx == CMD_execute)\n\t    {\n\t\tif (rettv.v_type == VAR_CHANNEL || rettv.v_type == VAR_JOB)\n\t\t{\n\t\t    semsg(_(e_using_invalid_value_as_string_str),\n\t\t\t\t\t\t  vartype_name(rettv.v_type));\n\t\t    p = NULL;\n\t\t}\n\t\telse\n\t\t    p = tv_get_string_buf(&rettv, buf);\n\t    }\n\t    else\n\t\tp = tv_stringify(&rettv, buf);\n\t    if (p == NULL)\n\t    {\n\t\tclear_tv(&rettv);\n\t\tret = FAIL;\n\t\tbreak;\n\t    }\n\t    len = (int)STRLEN(p);\n\t    if (ga_grow(&ga, len + 2) == FAIL)\n\t    {\n\t\tclear_tv(&rettv);\n\t\tret = FAIL;\n\t\tbreak;\n\t    }\n\t    if (ga.ga_len)\n\t\t((char_u *)(ga.ga_data))[ga.ga_len++] = ' ';\n\t    STRCPY((char_u *)(ga.ga_data) + ga.ga_len, p);\n\t    ga.ga_len += len;\n\t}\n\n\tclear_tv(&rettv);\n\targ = skipwhite(arg);\n    }\n\n    if (ret != FAIL && ga.ga_data != NULL)\n    {\n\t// use the first line of continuation lines for messages\n\tSOURCING_LNUM = start_lnum;\n\n\tif (eap->cmdidx == CMD_echomsg\n\t\t|| eap->cmdidx == CMD_echowindow\n\t\t|| eap->cmdidx == CMD_echoerr)\n\t{\n\t    // Mark the already saved text as finishing the line, so that what\n\t    // follows is displayed on a new line when scrolling back at the\n\t    // more prompt.\n\t    msg_sb_eol();\n\t}\n\n\tif (eap->cmdidx == CMD_echomsg)\n\t{\n\t    msg_attr(ga.ga_data, echo_attr);\n\t    out_flush();\n\t}\n\telse if (eap->cmdidx == CMD_echowindow)\n\t{\n#ifdef HAS_MESSAGE_WINDOW\n\t    start_echowindow(eap->addr_count > 0 ? eap->line2 : 0);\n#endif\n\t    msg_attr(ga.ga_data, echo_attr);\n#ifdef HAS_MESSAGE_WINDOW\n\t    end_echowindow();\n#endif\n\t}\n\telse if (eap->cmdidx == CMD_echoconsole)\n\t{\n\t    ui_write(ga.ga_data, (int)STRLEN(ga.ga_data), TRUE);\n\t    ui_write((char_u *)\"\\r\\n\", 2, TRUE);\n\t}\n\telse if (eap->cmdidx == CMD_echoerr)\n\t{\n\t    int\t\tsave_did_emsg = did_emsg;\n\n\t    // We don't want to abort following commands, restore did_emsg.\n\t    emsg(ga.ga_data);\n\t    if (!force_abort)\n\t\tdid_emsg = save_did_emsg;\n\t}\n\telse if (eap->cmdidx == CMD_execute)\n\t{\n\t    int save_sticky_cmdmod_flags = sticky_cmdmod_flags;\n\n\t    // \"legacy exe cmd\" and \"vim9cmd exe cmd\" applies to \"cmd\".\n\t    sticky_cmdmod_flags = cmdmod.cmod_flags\n\t\t\t\t\t\t& (CMOD_LEGACY | CMOD_VIM9CMD);\n\t    do_cmdline((char_u *)ga.ga_data,\n\t\t       eap->getline, eap->cookie, DOCMD_NOWAIT|DOCMD_VERBOSE);\n\t    sticky_cmdmod_flags = save_sticky_cmdmod_flags;\n\t}\n    }\n\n    ga_clear(&ga);\n\n    if (eap->skip)\n\t--emsg_skip;\n    set_nextcmd(eap, arg);\n}\n\n/*\n * Skip over the name of an option: \"&option\", \"&g:option\" or \"&l:option\".\n * \"arg\" points to the \"&\" or '+' when called, to \"option\" when returning.\n * Returns NULL when no option name found.  Otherwise pointer to the char\n * after the option name.\n */\n    char_u *\nfind_option_end(char_u **arg, int *scope)\n{\n    char_u\t*p = *arg;\n\n    ++p;\n    if (*p == 'g' && p[1] == ':')\n    {\n\t*scope = OPT_GLOBAL;\n\tp += 2;\n    }\n    else if (*p == 'l' && p[1] == ':')\n    {\n\t*scope = OPT_LOCAL;\n\tp += 2;\n    }\n    else\n\t*scope = 0;\n\n    if (!ASCII_ISALPHA(*p))\n\treturn NULL;\n    *arg = p;\n\n    if (p[0] == 't' && p[1] == '_' && p[2] != NUL && p[3] != NUL)\n\tp += 4;\t    // termcap option\n    else\n\twhile (ASCII_ISALPHA(*p))\n\t    ++p;\n    return p;\n}\n\n/*\n * Display script name where an item was last set.\n * Should only be invoked when 'verbose' is non-zero.\n */\n    void\nlast_set_msg(sctx_T script_ctx)\n{\n    char_u *p;\n\n    if (script_ctx.sc_sid == 0)\n\treturn;\n\n    p = home_replace_save(NULL, get_scriptname(script_ctx.sc_sid));\n    if (p == NULL)\n\treturn;\n\n    verbose_enter();\n    msg_puts(_(\"\\n\\tLast set from \"));\n    msg_puts((char *)p);\n    if (script_ctx.sc_lnum > 0)\n    {\n\tmsg_puts(_(line_msg));\n\tmsg_outnum((long)script_ctx.sc_lnum);\n    }\n    verbose_leave();\n    vim_free(p);\n}\n\n#endif // FEAT_EVAL\n\n/*\n * Perform a substitution on \"str\" with pattern \"pat\" and substitute \"sub\".\n * When \"sub\" is NULL \"expr\" is used, must be a VAR_FUNC or VAR_PARTIAL.\n * \"flags\" can be \"g\" to do a global substitute.\n * Returns an allocated string, NULL for error.\n */\n    char_u *\ndo_string_sub(\n    char_u\t*str,\n    char_u\t*pat,\n    char_u\t*sub,\n    typval_T\t*expr,\n    char_u\t*flags)\n{\n    int\t\tsublen;\n    regmatch_T\tregmatch;\n    int\t\ti;\n    int\t\tdo_all;\n    char_u\t*tail;\n    char_u\t*end;\n    garray_T\tga;\n    char_u\t*ret;\n    char_u\t*save_cpo;\n    char_u\t*zero_width = NULL;\n\n    // Make 'cpoptions' empty, so that the 'l' flag doesn't work here\n    save_cpo = p_cpo;\n    p_cpo = empty_option;\n\n    ga_init2(&ga, 1, 200);\n\n    do_all = (flags[0] == 'g');\n\n    regmatch.rm_ic = p_ic;\n    regmatch.regprog = vim_regcomp(pat, RE_MAGIC + RE_STRING);\n    if (regmatch.regprog != NULL)\n    {\n\ttail = str;\n\tend = str + STRLEN(str);\n\twhile (vim_regexec_nl(&regmatch, str, (colnr_T)(tail - str)))\n\t{\n\t    // Skip empty match except for first match.\n\t    if (regmatch.startp[0] == regmatch.endp[0])\n\t    {\n\t\tif (zero_width == regmatch.startp[0])\n\t\t{\n\t\t    // avoid getting stuck on a match with an empty string\n\t\t    i = mb_ptr2len(tail);\n\t\t    mch_memmove((char_u *)ga.ga_data + ga.ga_len, tail,\n\t\t\t\t\t\t\t\t   (size_t)i);\n\t\t    ga.ga_len += i;\n\t\t    tail += i;\n\t\t    continue;\n\t\t}\n\t\tzero_width = regmatch.startp[0];\n\t    }\n\n\t    /*\n\t     * Get some space for a temporary buffer to do the substitution\n\t     * into.  It will contain:\n\t     * - The text up to where the match is.\n\t     * - The substituted text.\n\t     * - The text after the match.\n\t     */\n\t    sublen = vim_regsub(&regmatch, sub, expr, tail, 0, REGSUB_MAGIC);\n\t    if (ga_grow(&ga, (int)((end - tail) + sublen -\n\t\t\t    (regmatch.endp[0] - regmatch.startp[0]))) == FAIL)\n\t    {\n\t\tga_clear(&ga);\n\t\tbreak;\n\t    }\n\n\t    // copy the text up to where the match is\n\t    i = (int)(regmatch.startp[0] - tail);\n\t    mch_memmove((char_u *)ga.ga_data + ga.ga_len, tail, (size_t)i);\n\t    // add the substituted text\n\t    (void)vim_regsub(&regmatch, sub, expr,\n\t\t\t\t  (char_u *)ga.ga_data + ga.ga_len + i, sublen,\n\t\t\t\t  REGSUB_COPY | REGSUB_MAGIC);\n\t    ga.ga_len += i + sublen - 1;\n\t    tail = regmatch.endp[0];\n\t    if (*tail == NUL)\n\t\tbreak;\n\t    if (!do_all)\n\t\tbreak;\n\t}\n\n\tif (ga.ga_data != NULL)\n\t    STRCPY((char *)ga.ga_data + ga.ga_len, tail);\n\n\tvim_regfree(regmatch.regprog);\n    }\n\n    ret = vim_strsave(ga.ga_data == NULL ? str : (char_u *)ga.ga_data);\n    ga_clear(&ga);\n    if (p_cpo == empty_option)\n\tp_cpo = save_cpo;\n    else\n    {\n\t// Darn, evaluating {sub} expression or {expr} changed the value.\n\t// If it's still empty it was changed and restored, need to restore in\n\t// the complicated way.\n\tif (*p_cpo == NUL)\n\t    set_option_value_give_err((char_u *)\"cpo\", 0L, save_cpo, 0);\n\tfree_string_option(save_cpo);\n    }\n\n    return ret;\n}\n", "\" Tests for the substitute (:s) command\n\nsource shared.vim\nsource check.vim\nsource screendump.vim\n\nfunc Test_multiline_subst()\n  enew!\n  call append(0, [\"1 aa\",\n\t      \\ \"bb\",\n\t      \\ \"cc\",\n\t      \\ \"2 dd\",\n\t      \\ \"ee\",\n\t      \\ \"3 ef\",\n\t      \\ \"gh\",\n\t      \\ \"4 ij\",\n\t      \\ \"5 a8\",\n\t      \\ \"8b c9\",\n\t      \\ \"9d\",\n\t      \\ \"6 e7\",\n\t      \\ \"77f\",\n\t      \\ \"xxxxx\"])\n\n  1\n  \" test if replacing a line break works with a back reference\n  /^1/,/^2/s/\\n\\(.\\)/ \\1/\n  \" test if inserting a line break works with a back reference\n  /^3/,/^4/s/\\(.\\)$/\\r\\1/\n  \" test if replacing a line break with another line break works\n  /^5/,/^6/s/\\(\\_d\\{3}\\)/x\\1x/\n  call assert_equal('1 aa bb cc 2 dd ee', getline(1))\n  call assert_equal('3 e', getline(2))\n  call assert_equal('f', getline(3))\n  call assert_equal('g', getline(4))\n  call assert_equal('h', getline(5))\n  call assert_equal('4 i', getline(6))\n  call assert_equal('j', getline(7))\n  call assert_equal('5 ax8', getline(8))\n  call assert_equal('8xb cx9', getline(9))\n  call assert_equal('9xd', getline(10))\n  call assert_equal('6 ex7', getline(11))\n  call assert_equal('7x7f', getline(12))\n  call assert_equal('xxxxx', getline(13))\n  enew!\nendfunc\n\nfunc Test_substitute_variants()\n  \" Validate that all the 2-/3-letter variants which embed the flags into the\n  \" command name actually work.\n  enew!\n  let ln = 'Testing string'\n  let variants = [\n\t\\ { 'cmd': ':s/Test/test/c', 'exp': 'testing string', 'prompt': 'y' },\n\t\\ { 'cmd': ':s/foo/bar/ce', 'exp': ln },\n\t\\ { 'cmd': ':s/t/r/cg', 'exp': 'Tesring srring', 'prompt': 'a' },\n\t\\ { 'cmd': ':s/t/r/ci', 'exp': 'resting string', 'prompt': 'y' },\n\t\\ { 'cmd': ':s/t/r/cI', 'exp': 'Tesring string', 'prompt': 'y' },\n\t\\ { 'cmd': ':s/t/r/c', 'exp': 'Testing string', 'prompt': 'n' },\n\t\\ { 'cmd': ':s/t/r/cn', 'exp': ln },\n\t\\ { 'cmd': ':s/t/r/cp', 'exp': 'Tesring string', 'prompt': 'y' },\n\t\\ { 'cmd': ':s/t/r/cl', 'exp': 'Tesring string', 'prompt': 'y' },\n\t\\ { 'cmd': ':s/t/r/gc', 'exp': 'Tesring srring', 'prompt': 'a' },\n\t\\ { 'cmd': ':s/i/I/gc', 'exp': 'TestIng string', 'prompt': 'l' },\n\t\\ { 'cmd': ':s/foo/bar/ge', 'exp': ln },\n\t\\ { 'cmd': ':s/t/r/g', 'exp': 'Tesring srring' },\n\t\\ { 'cmd': ':s/t/r/gi', 'exp': 'resring srring' },\n\t\\ { 'cmd': ':s/t/r/gI', 'exp': 'Tesring srring' },\n\t\\ { 'cmd': ':s/t/r/gn', 'exp': ln },\n\t\\ { 'cmd': ':s/t/r/gp', 'exp': 'Tesring srring' },\n\t\\ { 'cmd': ':s/t/r/gl', 'exp': 'Tesring srring' },\n\t\\ { 'cmd': ':s//r/gr', 'exp': 'Testr strr' },\n\t\\ { 'cmd': ':s/t/r/ic', 'exp': 'resting string', 'prompt': 'y' },\n\t\\ { 'cmd': ':s/foo/bar/ie', 'exp': ln },\n\t\\ { 'cmd': ':s/t/r/i', 'exp': 'resting string' },\n\t\\ { 'cmd': ':s/t/r/iI', 'exp': 'Tesring string' },\n\t\\ { 'cmd': ':s/t/r/in', 'exp': ln },\n\t\\ { 'cmd': ':s/t/r/ip', 'exp': 'resting string' },\n\t\\ { 'cmd': ':s//r/ir', 'exp': 'Testr string' },\n\t\\ { 'cmd': ':s/t/r/Ic', 'exp': 'Tesring string', 'prompt': 'y' },\n\t\\ { 'cmd': ':s/foo/bar/Ie', 'exp': ln },\n\t\\ { 'cmd': ':s/t/r/Ig', 'exp': 'Tesring srring' },\n\t\\ { 'cmd': ':s/t/r/Ii', 'exp': 'resting string' },\n\t\\ { 'cmd': ':s/t/r/I', 'exp': 'Tesring string' },\n\t\\ { 'cmd': ':s/t/r/Ip', 'exp': 'Tesring string' },\n\t\\ { 'cmd': ':s/t/r/Il', 'exp': 'Tesring string' },\n\t\\ { 'cmd': ':s//r/Ir', 'exp': 'Testr string' },\n\t\\ { 'cmd': ':s//r/rc', 'exp': 'Testr string', 'prompt': 'y' },\n\t\\ { 'cmd': ':s//r/rg', 'exp': 'Testr strr' },\n\t\\ { 'cmd': ':s//r/ri', 'exp': 'Testr string' },\n\t\\ { 'cmd': ':s//r/rI', 'exp': 'Testr string' },\n\t\\ { 'cmd': ':s//r/rn', 'exp': 'Testing string' },\n\t\\ { 'cmd': ':s//r/rp', 'exp': 'Testr string' },\n\t\\ { 'cmd': ':s//r/rl', 'exp': 'Testr string' },\n\t\\ { 'cmd': ':s//r/r', 'exp': 'Testr string' },\n\t\\ { 'cmd': ':s/i/I/gc', 'exp': 'Testing string', 'prompt': 'q' },\n\t\\]\n\n  for var in variants\n    for run in [1, 2]\n      let cmd = var.cmd\n      if run == 2 && cmd =~ \"/.*/.*/.\"\n\t\" Change  :s/from/to/{flags}  to  :s{flags}\n\tlet cmd = substitute(cmd, '/.*/', '', '')\n      endif\n      call setline(1, [ln])\n      let msg = printf('using \"%s\"', cmd)\n      let @/='ing'\n      let v:errmsg = ''\n      call feedkeys(cmd . \"\\<CR>\" . get(var, 'prompt', ''), 'ntx')\n      \" No error should exist (matters for testing e flag)\n      call assert_equal('', v:errmsg, msg)\n      call assert_equal(var.exp, getline('.'), msg)\n    endfor\n  endfor\nendfunc\n\n\" Test the l, p, # flags.\nfunc Test_substitute_flags_lp()\n  new\n  call setline(1, \"abc\\tdef\\<C-h>ghi\")\n\n  let a = execute('s/a/a/p')\n  call assert_equal(\"\\nabc     def^Hghi\", a)\n\n  let a = execute('s/a/a/l')\n  call assert_equal(\"\\nabc^Idef^Hghi$\", a)\n\n  let a = execute('s/a/a/#')\n  call assert_equal(\"\\n  1 abc     def^Hghi\", a)\n\n  let a = execute('s/a/a/p#')\n  call assert_equal(\"\\n  1 abc     def^Hghi\", a)\n\n  let a = execute('s/a/a/l#')\n  call assert_equal(\"\\n  1 abc^Idef^Hghi$\", a)\n\n  let a = execute('s/a/a/')\n  call assert_equal(\"\", a)\n\n  bwipe!\nendfunc\n\nfunc Test_substitute_repeat()\n  \" This caused an invalid memory access.\n  split Xsubfile\n  s/^/x\n  call feedkeys(\"Qsc\\<CR>y\", 'tx')\n  bwipe!\nendfunc\n\n\" Test %s/\\n// which is implemented as a special case to use a\n\" more efficient join rather than doing a regular substitution.\nfunc Test_substitute_join()\n  new\n\n  call setline(1, [\"foo\\tbar\", \"bar\\<C-H>foo\"])\n  let a = execute('%s/\\n//')\n  call assert_equal(\"\", a)\n  call assert_equal([\"foo\\tbarbar\\<C-H>foo\"], getline(1, '$'))\n  call assert_equal('\\n', histget(\"search\", -1))\n\n  call setline(1, [\"foo\\tbar\", \"bar\\<C-H>foo\"])\n  let a = execute('%s/\\n//g')\n  call assert_equal(\"\", a)\n  call assert_equal([\"foo\\tbarbar\\<C-H>foo\"], getline(1, '$'))\n  call assert_equal('\\n', histget(\"search\", -1))\n\n  call setline(1, [\"foo\\tbar\", \"bar\\<C-H>foo\"])\n  let a = execute('%s/\\n//p')\n  call assert_equal(\"\\nfoo     barbar^Hfoo\", a)\n  call assert_equal([\"foo\\tbarbar\\<C-H>foo\"], getline(1, '$'))\n  call assert_equal('\\n', histget(\"search\", -1))\n\n  call setline(1, [\"foo\\tbar\", \"bar\\<C-H>foo\"])\n  let a = execute('%s/\\n//l')\n  call assert_equal(\"\\nfoo^Ibarbar^Hfoo$\", a)\n  call assert_equal([\"foo\\tbarbar\\<C-H>foo\"], getline(1, '$'))\n  call assert_equal('\\n', histget(\"search\", -1))\n\n  call setline(1, [\"foo\\tbar\", \"bar\\<C-H>foo\"])\n  let a = execute('%s/\\n//#')\n  call assert_equal(\"\\n  1 foo     barbar^Hfoo\", a)\n  call assert_equal([\"foo\\tbarbar\\<C-H>foo\"], getline(1, '$'))\n  call assert_equal('\\n', histget(\"search\", -1))\n\n  call setline(1, ['foo', 'bar', 'baz', 'qux'])\n  call execute('1,2s/\\n//')\n  call assert_equal(['foobarbaz', 'qux'], getline(1, '$'))\n\n  bwipe!\nendfunc\n\nfunc Test_substitute_count()\n  new\n  call setline(1, ['foo foo', 'foo foo', 'foo foo', 'foo foo', 'foo foo'])\n  2\n\n  s/foo/bar/3\n  call assert_equal(['foo foo', 'bar foo', 'bar foo', 'bar foo', 'foo foo'],\n  \\                 getline(1, '$'))\n\n  call assert_fails('s/foo/bar/0', 'E939:')\n\n  call setline(1, ['foo foo', 'foo foo', 'foo foo', 'foo foo', 'foo foo'])\n  2,4s/foo/bar/ 10\n  call assert_equal(['foo foo', 'foo foo', 'foo foo', 'bar foo', 'bar foo'],\n        \\           getline(1, '$'))\n\n  bwipe!\nendfunc\n\n\" Test substitute 'n' flag (report number of matches, do not substitute).\nfunc Test_substitute_flag_n()\n  new\n  let lines = ['foo foo', 'foo foo', 'foo foo', 'foo foo', 'foo foo']\n  call setline(1, lines)\n\n  call assert_equal(\"\\n3 matches on 3 lines\", execute('2,4s/foo/bar/n'))\n  call assert_equal(\"\\n6 matches on 3 lines\", execute('2,4s/foo/bar/gn'))\n\n  \" c flag (confirm) should be ignored when using n flag.\n  call assert_equal(\"\\n3 matches on 3 lines\", execute('2,4s/foo/bar/nc'))\n\n  \" No substitution should have been done.\n  call assert_equal(lines, getline(1, '$'))\n\n  %delete _\n  call setline(1, ['A', 'Bar', 'Baz'])\n  call assert_equal(\"\\n1 match on 1 line\", execute('s/\\nB\\@=//gn'))\n\n  bwipe!\nendfunc\n\nfunc Test_substitute_errors()\n  new\n  call setline(1, 'foobar')\n\n  call assert_fails('s/FOO/bar/', 'E486:')\n  call assert_fails('s/foo/bar/@', 'E488:')\n  call assert_fails('s/\\(/bar/', 'E54:')\n  call assert_fails('s afooabara', 'E146:')\n  call assert_fails('s\\\\a', 'E10:')\n\n  setl nomodifiable\n  call assert_fails('s/foo/bar/', 'E21:')\n\n  call assert_fails(\"let s=substitute([], 'a', 'A', 'g')\", 'E730:')\n  call assert_fails(\"let s=substitute('abcda', [], 'A', 'g')\", 'E730:')\n  call assert_fails(\"let s=substitute('abcda', 'a', [], 'g')\", 'E730:')\n  call assert_fails(\"let s=substitute('abcda', 'a', 'A', [])\", 'E730:')\n  call assert_fails(\"let s=substitute('abc', '\\\\%(', 'A', 'g')\", 'E53:')\n\n  bwipe!\nendfunc\n\n\" Test for *sub-replace-special* and *sub-replace-expression* on substitute().\nfunc Test_sub_replace_1()\n  \" Run the tests with 'magic' on\n  set magic\n  set cpo&\n  call assert_equal('AA', substitute('A', 'A', '&&', ''))\n  call assert_equal('&', substitute('B', 'B', '\\&', ''))\n  call assert_equal('C123456789987654321', substitute('C123456789', 'C\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)', '\\0\\9\\8\\7\\6\\5\\4\\3\\2\\1', ''))\n  call assert_equal('d', substitute('D', 'D', 'd', ''))\n  call assert_equal('~', substitute('E', 'E', '~', ''))\n  call assert_equal('~', substitute('F', 'F', '\\~', ''))\n  call assert_equal('Gg', substitute('G', 'G', '\\ugg', ''))\n  call assert_equal('Hh', substitute('H', 'H', '\\Uh\\Eh', ''))\n  call assert_equal('iI', substitute('I', 'I', '\\lII', ''))\n  call assert_equal('jJ', substitute('J', 'J', '\\LJ\\EJ', ''))\n  call assert_equal('Kk', substitute('K', 'K', '\\Uk\\ek', ''))\n  call assert_equal(\"l\\<C-V>\\<C-M>l\",\n\t\t\t\\ substitute('lLl', 'L', \"\\<C-V>\\<C-M>\", ''))\n  call assert_equal(\"m\\<C-M>m\", substitute('mMm', 'M', '\\r', ''))\n  call assert_equal(\"n\\<C-V>\\<C-M>n\",\n\t\t\t\\ substitute('nNn', 'N', \"\\\\\\<C-V>\\<C-M>\", ''))\n  call assert_equal(\"o\\no\", substitute('oOo', 'O', '\\n', ''))\n  call assert_equal(\"p\\<C-H>p\", substitute('pPp', 'P', '\\b', ''))\n  call assert_equal(\"q\\tq\", substitute('qQq', 'Q', '\\t', ''))\n  call assert_equal('r\\r', substitute('rRr', 'R', '\\\\', ''))\n  call assert_equal('scs', substitute('sSs', 'S', '\\c', ''))\n  call assert_equal(\"u\\nu\", substitute('uUu', 'U', \"\\n\", ''))\n  call assert_equal(\"v\\<C-H>v\", substitute('vVv', 'V', \"\\b\", ''))\n  call assert_equal(\"w\\\\w\", substitute('wWw', 'W', \"\\\\\", ''))\n  call assert_equal(\"x\\<C-M>x\", substitute('xXx', 'X', \"\\r\", ''))\n  call assert_equal(\"YyyY\", substitute('Y', 'Y', '\\L\\uyYy\\l\\EY', ''))\n  call assert_equal(\"zZZz\", substitute('Z', 'Z', '\\U\\lZzZ\\u\\Ez', ''))\n  \" \\v or \\V after $\n  call assert_equal('abxx', substitute('abcd', 'xy$\\v|cd$', 'xx', ''))\n  call assert_equal('abxx', substitute('abcd', 'xy$\\V\\|cd\\$', 'xx', ''))\nendfunc\n\nfunc Test_sub_replace_2()\n  \" Run the tests with 'magic' off\n  set nomagic\n  set cpo&\n  call assert_equal('AA', substitute('A', 'A', '&&', ''))\n  call assert_equal('&', substitute('B', 'B', '\\&', ''))\n  call assert_equal('C123456789987654321', substitute('C123456789', 'C\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)', '\\0\\9\\8\\7\\6\\5\\4\\3\\2\\1', ''))\n  call assert_equal('d', substitute('D', 'D', 'd', ''))\n  call assert_equal('~', substitute('E', 'E', '~', ''))\n  call assert_equal('~', substitute('F', 'F', '\\~', ''))\n  call assert_equal('Gg', substitute('G', 'G', '\\ugg', ''))\n  call assert_equal('Hh', substitute('H', 'H', '\\Uh\\Eh', ''))\n  call assert_equal('iI', substitute('I', 'I', '\\lII', ''))\n  call assert_equal('jJ', substitute('J', 'J', '\\LJ\\EJ', ''))\n  call assert_equal('Kk', substitute('K', 'K', '\\Uk\\ek', ''))\n  call assert_equal(\"l\\<C-V>\\<C-M>l\",\n\t\t\t\\ substitute('lLl', 'L', \"\\<C-V>\\<C-M>\", ''))\n  call assert_equal(\"m\\<C-M>m\", substitute('mMm', 'M', '\\r', ''))\n  call assert_equal(\"n\\<C-V>\\<C-M>n\",\n\t\t\t\\ substitute('nNn', 'N', \"\\\\\\<C-V>\\<C-M>\", ''))\n  call assert_equal(\"o\\no\", substitute('oOo', 'O', '\\n', ''))\n  call assert_equal(\"p\\<C-H>p\", substitute('pPp', 'P', '\\b', ''))\n  call assert_equal(\"q\\tq\", substitute('qQq', 'Q', '\\t', ''))\n  call assert_equal('r\\r', substitute('rRr', 'R', '\\\\', ''))\n  call assert_equal('scs', substitute('sSs', 'S', '\\c', ''))\n  call assert_equal(\"t\\<C-M>t\", substitute('tTt', 'T', \"\\r\", ''))\n  call assert_equal(\"u\\nu\", substitute('uUu', 'U', \"\\n\", ''))\n  call assert_equal(\"v\\<C-H>v\", substitute('vVv', 'V', \"\\b\", ''))\n  call assert_equal('w\\w', substitute('wWw', 'W', \"\\\\\", ''))\n  call assert_equal('XxxX', substitute('X', 'X', '\\L\\uxXx\\l\\EX', ''))\n  call assert_equal('yYYy', substitute('Y', 'Y', '\\U\\lYyY\\u\\Ey', ''))\nendfunc\n\nfunc Test_sub_replace_3()\n  set magic&\n  set cpo&\n  call assert_equal('a\\a', substitute('aAa', 'A', '\\=\"\\\\\"', ''))\n  call assert_equal('b\\\\b', substitute('bBb', 'B', '\\=\"\\\\\\\\\"', ''))\n  call assert_equal(\"c\\rc\", substitute('cCc', 'C', \"\\\\=\\\"\\r\\\"\", ''))\n  call assert_equal(\"d\\\\\\rd\", substitute('dDd', 'D', \"\\\\=\\\"\\\\\\\\\\r\\\"\", ''))\n  call assert_equal(\"e\\\\\\\\\\re\", substitute('eEe', 'E', \"\\\\=\\\"\\\\\\\\\\\\\\\\\\r\\\"\", ''))\n  call assert_equal('f\\rf', substitute('fFf', 'F', '\\=\"\\\\r\"', ''))\n  call assert_equal('j\\nj', substitute('jJj', 'J', '\\=\"\\\\n\"', ''))\n  call assert_equal(\"k\\<C-M>k\", substitute('kKk', 'K', '\\=\"\\r\"', ''))\n  call assert_equal(\"l\\nl\", substitute('lLl', 'L', '\\=\"\\n\"', ''))\nendfunc\n\n\" Test for submatch() on substitute().\nfunc Test_sub_replace_4()\n  set magic&\n  set cpo&\n  call assert_equal('a\\a', substitute('aAa', 'A',\n\t\t\\ '\\=substitute(submatch(0), \".\", \"\\\\\", \"\")', ''))\n  call assert_equal('b\\b', substitute('bBb', 'B',\n\t\t\\ '\\=substitute(submatch(0), \".\", \"\\\\\\\\\", \"\")', ''))\n  call assert_equal(\"c\\<C-V>\\<C-M>c\", substitute('cCc', 'C', '\\=substitute(submatch(0), \".\", \"\\<C-V>\\<C-M>\", \"\")', ''))\n  call assert_equal(\"d\\<C-V>\\<C-M>d\", substitute('dDd', 'D', '\\=substitute(submatch(0), \".\", \"\\\\\\<C-V>\\<C-M>\", \"\")', ''))\n  call assert_equal(\"e\\\\\\<C-V>\\<C-M>e\", substitute('eEe', 'E', '\\=substitute(submatch(0), \".\", \"\\\\\\\\\\<C-V>\\<C-M>\", \"\")', ''))\n  call assert_equal(\"f\\<C-M>f\", substitute('fFf', 'F', '\\=substitute(submatch(0), \".\", \"\\\\r\", \"\")', ''))\n  call assert_equal(\"j\\nj\", substitute('jJj', 'J', '\\=substitute(submatch(0), \".\", \"\\\\n\", \"\")', ''))\n  call assert_equal(\"k\\rk\", substitute('kKk', 'K', '\\=substitute(submatch(0), \".\", \"\\r\", \"\")', ''))\n  call assert_equal(\"l\\nl\", substitute('lLl', 'L', '\\=substitute(submatch(0), \".\", \"\\n\", \"\")', ''))\nendfunc\n\nfunc Test_sub_replace_5()\n  set magic&\n  set cpo&\n  call assert_equal('A123456789987654321', substitute('A123456789',\n\t\t\\ 'A\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)',\n\t\t\\ '\\=submatch(0) . submatch(9) . submatch(8) . ' .\n\t\t\\ 'submatch(7) . submatch(6) . submatch(5) . ' .\n\t\t\\ 'submatch(4) . submatch(3) . submatch(2) . submatch(1)',\n\t\t\\ ''))\n   call assert_equal(\"[['A123456789'], ['9'], ['8'], ['7'], ['6'], \" .\n\t\t\\ \"['5'], ['4'], ['3'], ['2'], ['1']]\",\n\t\t\\ substitute('A123456789',\n\t\t\\ 'A\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)',\n\t\t\\ '\\=string([submatch(0, 1), submatch(9, 1), ' .\n\t\t\\ 'submatch(8, 1), 7->submatch(1), submatch(6, 1), ' .\n\t\t\\ 'submatch(5, 1), submatch(4, 1), submatch(3, 1), ' .\n\t\t\\ 'submatch(2, 1), submatch(1, 1)])',\n\t\t\\ ''))\nendfunc\n\nfunc Test_sub_replace_6()\n  set magic&\n  set cpo+=/\n  call assert_equal('a', substitute('A', 'A', 'a', ''))\n  call assert_equal('%', substitute('B', 'B', '%', ''))\n  set cpo-=/\n  call assert_equal('c', substitute('C', 'C', 'c', ''))\n  call assert_equal('%', substitute('D', 'D', '%', ''))\nendfunc\n\nfunc Test_sub_replace_7()\n  set magic&\n  set cpo&\n  call assert_equal('A\u0016A', substitute('A\u0016A', 'A.', '\\=submatch(0)', ''))\n  call assert_equal(\"B\\nB\", substitute(\"B\\nB\", 'B.', '\\=submatch(0)', ''))\n  call assert_equal(\"['B\\n']B\", substitute(\"B\\nB\", 'B.', '\\=string(submatch(0, 1))', ''))\n  call assert_equal('-abab', substitute('-bb', '\\zeb', 'a', 'g'))\n  call assert_equal('c-cbcbc', substitute('-bb', '\\ze', 'c', 'g'))\nendfunc\n\n\" Test for *:s%* on :substitute.\nfunc Test_sub_replace_8()\n  new\n  set magic&\n  set cpo&\n  $put =',,X'\n  s/\\(^\\|,\\)\\ze\\(,\\|X\\)/\\1N/g\n  call assert_equal('N,,NX', getline(\"$\"))\n  $put =',,Y'\n  let cmd = ':s/\\(^\\|,\\)\\ze\\(,\\|Y\\)/\\1N/gc'\n  call feedkeys(cmd . \"\\<CR>a\", \"xt\")\n  call assert_equal('N,,NY', getline(\"$\"))\n  :$put =',,Z'\n  let cmd = ':s/\\(^\\|,\\)\\ze\\(,\\|Z\\)/\\1N/gc'\n  call feedkeys(cmd . \"\\<CR>yy\", \"xt\")\n  call assert_equal('N,,NZ', getline(\"$\"))\n  enew! | close\nendfunc\n\nfunc Test_sub_replace_9()\n  new\n  set magic&\n  set cpo&\n  $put ='xxx'\n  call feedkeys(\":s/x/X/gc\\<CR>yyq\", \"xt\")\n  call assert_equal('XXx', getline(\"$\"))\n  enew! | close\nendfunc\n\nfunc Test_sub_replace_10()\n   set magic&\n   set cpo&\n   call assert_equal('a1a2a3a', substitute('123', '\\zs', 'a', 'g'))\n   call assert_equal('aaa', substitute('123', '\\zs.', 'a', 'g'))\n   call assert_equal('1a2a3a', substitute('123', '.\\zs', 'a', 'g'))\n   call assert_equal('a1a2a3a', substitute('123', '\\ze', 'a', 'g'))\n   call assert_equal('a1a2a3', substitute('123', '\\ze.', 'a', 'g'))\n   call assert_equal('aaa', substitute('123', '.\\ze', 'a', 'g'))\n   call assert_equal('aa2a3a', substitute('123', '1\\|\\ze', 'a', 'g'))\n   call assert_equal('1aaa', substitute('123', '1\\zs\\|[23]', 'a', 'g'))\nendfunc\n\nfunc SubReplacer(text, submatches)\n  return a:text .. a:submatches[0] .. a:text\nendfunc\nfunc SubReplacerVar(text, ...)\n  return a:text .. a:1[0] .. a:text\nendfunc\ndef SubReplacerVar9(text: string, ...args: list<list<string>>): string\n  return text .. args[0][0] .. text\nenddef\nfunc SubReplacer20(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, submatches)\n  return a:t3 .. a:submatches[0] .. a:t11\nendfunc\n\nfunc Test_substitute_partial()\n  call assert_equal('1foo2foo3', substitute('123', '2', function('SubReplacer', ['foo']), 'g'))\n  call assert_equal('1foo2foo3', substitute('123', '2', function('SubReplacerVar', ['foo']), 'g'))\n  call assert_equal('1foo2foo3', substitute('123', '2', function('SubReplacerVar9', ['foo']), 'g'))\n\n  \" 19 arguments plus one is just OK\n  let Replacer = function('SubReplacer20', repeat(['foo'], 19))\n  call assert_equal('1foo2foo3', substitute('123', '2', Replacer, 'g'))\n\n  \" 20 arguments plus one is too many\n  let Replacer = function('SubReplacer20', repeat(['foo'], 20))\n  call assert_fails(\"call substitute('123', '2', Replacer, 'g')\", 'E118:')\nendfunc\n\nfunc Test_substitute_float()\n  call assert_equal('number 1.23', substitute('number ', '$', { -> 1.23 }, ''))\n  vim9 assert_equal('number 1.23', substitute('number ', '$', () => 1.23, ''))\nendfunc\n\n\" Tests for *sub-replace-special* and *sub-replace-expression* on :substitute.\n\n\" Execute a list of :substitute command tests\nfunc Run_SubCmd_Tests(tests)\n  enew!\n  for t in a:tests\n    let start = line('.') + 1\n    let end = start + len(t[2]) - 1\n    exe \"normal o\" . t[0]\n    call cursor(start, 1)\n    exe t[1]\n    call assert_equal(t[2], getline(start, end), t[1])\n  endfor\n  enew!\nendfunc\n\nfunc Test_sub_cmd_1()\n  set magic\n  set cpo&\n\n  \" List entry format: [input, cmd, output]\n  let tests = [['A', 's/A/&&/', ['AA']],\n\t      \\ ['B', 's/B/\\&/', ['&']],\n\t      \\ ['C123456789', 's/C\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)/\\0\\9\\8\\7\\6\\5\\4\\3\\2\\1/', ['C123456789987654321']],\n\t      \\ ['D', 's/D/d/', ['d']],\n\t      \\ ['E', 's/E/~/', ['d']],\n\t      \\ ['F', 's/F/\\~/', ['~']],\n\t      \\ ['G', 's/G/\\ugg/', ['Gg']],\n\t      \\ ['H', 's/H/\\Uh\\Eh/', ['Hh']],\n\t      \\ ['I', 's/I/\\lII/', ['iI']],\n\t      \\ ['J', 's/J/\\LJ\\EJ/', ['jJ']],\n\t      \\ ['K', 's/K/\\Uk\\ek/', ['Kk']],\n\t      \\ ['lLl', \"s/L/\\<C-V>\\<C-M>/\", [\"l\\<C-V>\", 'l']],\n\t      \\ ['mMm', 's/M/\\r/', ['m', 'm']],\n\t      \\ ['nNn', \"s/N/\\\\\\<C-V>\\<C-M>/\", [\"n\\<C-V>\", 'n']],\n\t      \\ ['oOo', 's/O/\\n/', [\"o\\no\"]],\n\t      \\ ['pPp', 's/P/\\b/', [\"p\\<C-H>p\"]],\n\t      \\ ['qQq', 's/Q/\\t/', [\"q\\tq\"]],\n\t      \\ ['rRr', 's/R/\\\\/', ['r\\r']],\n\t      \\ ['sSs', 's/S/\\c/', ['scs']],\n\t      \\ ['tTt', \"s/T/\\<C-V>\\<C-J>/\", [\"t\\<C-V>\\<C-J>t\"]],\n\t      \\ ['U', 's/U/\\L\\uuUu\\l\\EU/', ['UuuU']],\n\t      \\ ['V', 's/V/\\U\\lVvV\\u\\Ev/', ['vVVv']],\n\t      \\ ['\\', 's/\\\\/\\\\\\\\/', ['\\\\']]\n\t      \\ ]\n  call Run_SubCmd_Tests(tests)\nendfunc\n\nfunc Test_sub_cmd_2()\n  set nomagic\n  set cpo&\n\n  \" List entry format: [input, cmd, output]\n  let tests = [['A', 's/A/&&/', ['&&']],\n\t      \\ ['B', 's/B/\\&/', ['B']],\n\t      \\ ['C123456789', 's/\\mC\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)/\\0\\9\\8\\7\\6\\5\\4\\3\\2\\1/', ['C123456789987654321']],\n\t      \\ ['D', 's/D/d/', ['d']],\n\t      \\ ['E', 's/E/~/', ['~']],\n\t      \\ ['F', 's/F/\\~/', ['~']],\n\t      \\ ['G', 's/G/\\ugg/', ['Gg']],\n\t      \\ ['H', 's/H/\\Uh\\Eh/', ['Hh']],\n\t      \\ ['I', 's/I/\\lII/', ['iI']],\n\t      \\ ['J', 's/J/\\LJ\\EJ/', ['jJ']],\n\t      \\ ['K', 's/K/\\Uk\\ek/', ['Kk']],\n\t      \\ ['lLl', \"s/L/\\<C-V>\\<C-M>/\", [\"l\\<C-V>\", 'l']],\n\t      \\ ['mMm', 's/M/\\r/', ['m', 'm']],\n\t      \\ ['nNn', \"s/N/\\\\\\<C-V>\\<C-M>/\", [\"n\\<C-V>\", 'n']],\n\t      \\ ['oOo', 's/O/\\n/', [\"o\\no\"]],\n\t      \\ ['pPp', 's/P/\\b/', [\"p\\<C-H>p\"]],\n\t      \\ ['qQq', 's/Q/\\t/', [\"q\\tq\"]],\n\t      \\ ['rRr', 's/R/\\\\/', ['r\\r']],\n\t      \\ ['sSs', 's/S/\\c/', ['scs']],\n\t      \\ ['tTt', \"s/T/\\<C-V>\\<C-J>/\", [\"t\\<C-V>\\<C-J>t\"]],\n\t      \\ ['U', 's/U/\\L\\uuUu\\l\\EU/', ['UuuU']],\n\t      \\ ['V', 's/V/\\U\\lVvV\\u\\Ev/', ['vVVv']],\n\t      \\ ['\\', 's/\\\\/\\\\\\\\/', ['\\\\']]\n\t      \\ ]\n  call Run_SubCmd_Tests(tests)\nendfunc\n\nfunc Test_sub_cmd_3()\n  set nomagic\n  set cpo&\n\n  \" List entry format: [input, cmd, output]\n  let tests = [['aAa', \"s/A/\\\\='\\\\'/\", ['a\\a']],\n\t      \\ ['bBb', \"s/B/\\\\='\\\\\\\\'/\", ['b\\\\b']],\n\t      \\ ['cCc', \"s/C/\\\\='\\<C-V>\\<C-M>'/\", [\"c\\<C-V>\", 'c']],\n\t      \\ ['dDd', \"s/D/\\\\='\\\\\\<C-V>\\<C-M>'/\", [\"d\\\\\\<C-V>\", 'd']],\n\t      \\ ['eEe', \"s/E/\\\\='\\\\\\\\\\<C-V>\\<C-M>'/\", [\"e\\\\\\\\\\<C-V>\", 'e']],\n\t      \\ ['fFf', \"s/F/\\\\='\\r'/\", ['f', 'f']],\n\t      \\ ['gGg', \"s/G/\\\\='\\<C-V>\\<C-J>'/\", [\"g\\<C-V>\", 'g']],\n\t      \\ ['hHh', \"s/H/\\\\='\\\\\\<C-V>\\<C-J>'/\", [\"h\\\\\\<C-V>\", 'h']],\n\t      \\ ['iIi', \"s/I/\\\\='\\\\\\\\\\<C-V>\\<C-J>'/\", [\"i\\\\\\\\\\<C-V>\", 'i']],\n\t      \\ ['jJj', \"s/J/\\\\='\\n'/\", ['j', 'j']],\n\t      \\ ['kKk', 's/K/\\=\"\\r\"/', ['k', 'k']],\n\t      \\ ['lLl', 's/L/\\=\"\\n\"/', ['l', 'l']]\n\t      \\ ]\n  call Run_SubCmd_Tests(tests)\nendfunc\n\n\" Test for submatch() on :substitute.\nfunc Test_sub_cmd_4()\n  set magic&\n  set cpo&\n\n  \" List entry format: [input, cmd, output]\n  let tests = [ ['aAa', \"s/A/\\\\=substitute(submatch(0), '.', '\\\\', '')/\",\n\t      \\\t\t\t\t['a\\a']],\n\t      \\ ['bBb', \"s/B/\\\\=substitute(submatch(0), '.', '\\\\', '')/\",\n\t      \\\t\t\t\t['b\\b']],\n\t      \\ ['cCc', \"s/C/\\\\=substitute(submatch(0), '.', '\\<C-V>\\<C-M>', '')/\",\n\t      \\\t\t\t\t[\"c\\<C-V>\", 'c']],\n\t      \\ ['dDd', \"s/D/\\\\=substitute(submatch(0), '.', '\\\\\\<C-V>\\<C-M>', '')/\",\n\t      \\\t\t\t\t[\"d\\<C-V>\", 'd']],\n\t      \\ ['eEe', \"s/E/\\\\=substitute(submatch(0), '.', '\\\\\\\\\\<C-V>\\<C-M>', '')/\",\n\t      \\\t\t\t\t[\"e\\\\\\<C-V>\", 'e']],\n\t      \\ ['fFf', \"s/F/\\\\=substitute(submatch(0), '.', '\\\\r', '')/\",\n\t      \\\t\t\t\t['f', 'f']],\n\t      \\ ['gGg', 's/G/\\=substitute(submatch(0), \".\", \"\\<C-V>\\<C-J>\", \"\")/',\n\t      \\\t\t\t\t[\"g\\<C-V>\", 'g']],\n\t      \\ ['hHh', 's/H/\\=substitute(submatch(0), \".\", \"\\\\\\<C-V>\\<C-J>\", \"\")/',\n\t      \\\t\t\t\t[\"h\\<C-V>\", 'h']],\n\t      \\ ['iIi', 's/I/\\=substitute(submatch(0), \".\", \"\\\\\\\\\\<C-V>\\<C-J>\", \"\")/',\n\t      \\\t\t\t\t[\"i\\\\\\<C-V>\", 'i']],\n\t      \\ ['jJj', \"s/J/\\\\=substitute(submatch(0), '.', '\\\\n', '')/\",\n\t      \\\t\t\t\t['j', 'j']],\n\t      \\ ['kKk', \"s/K/\\\\=substitute(submatch(0), '.', '\\\\r', '')/\",\n\t      \\\t\t\t\t['k', 'k']],\n\t      \\ ['lLl', \"s/L/\\\\=substitute(submatch(0), '.', '\\\\n', '')/\",\n\t      \\\t\t\t\t['l', 'l']],\n\t      \\ ]\n  call Run_SubCmd_Tests(tests)\nendfunc\n\nfunc Test_sub_cmd_5()\n  set magic&\n  set cpo&\n\n  \" List entry format: [input, cmd, output]\n  let tests = [ ['A123456789', 's/A\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)/\\=submatch(0) . submatch(9) . submatch(8) . submatch(7) . submatch(6) . submatch(5) . submatch(4) . submatch(3) . submatch(2) . submatch(1)/', ['A123456789987654321']],\n\t      \\ ['B123456789', 's/B\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)/\\=string([submatch(0, 1), submatch(9, 1), submatch(8, 1), submatch(7, 1), submatch(6, 1), submatch(5, 1), submatch(4, 1), submatch(3, 1), submatch(2, 1), submatch(1, 1)])/', [\"[['B123456789'], ['9'], ['8'], ['7'], ['6'], ['5'], ['4'], ['3'], ['2'], ['1']]\"]],\n\t      \\ ]\n  call Run_SubCmd_Tests(tests)\nendfunc\n\n\" Test for *:s%* on :substitute.\nfunc Test_sub_cmd_6()\n  set magic&\n  set cpo+=/\n\n  \" List entry format: [input, cmd, output]\n  let tests = [ ['A', 's/A/a/', ['a']],\n\t      \\ ['B', 's/B/%/', ['a']],\n\t      \\ ]\n  call Run_SubCmd_Tests(tests)\n\n  set cpo-=/\n  let tests = [ ['C', 's/C/c/', ['c']],\n\t      \\ ['D', 's/D/%/', ['%']],\n\t      \\ ]\n  call Run_SubCmd_Tests(tests)\n\n  set cpo&\nendfunc\n\n\" Test for :s replacing \\n with  line break.\nfunc Test_sub_cmd_7()\n  set magic&\n  set cpo&\n\n  \" List entry format: [input, cmd, output]\n  let tests = [ [\"A\\<C-V>\\<C-M>A\", 's/A./\\=submatch(0)/', ['A', 'A']],\n\t      \\ [\"B\\<C-V>\\<C-J>B\", 's/B./\\=submatch(0)/', ['B', 'B']],\n\t      \\ [\"C\\<C-V>\\<C-J>C\", 's/C./\\=strtrans(string(submatch(0, 1)))/', [strtrans(\"['C\\<C-J>']C\")]],\n\t      \\ [\"D\\<C-V>\\<C-J>\\nD\", 's/D.\\nD/\\=strtrans(string(submatch(0, 1)))/', [strtrans(\"['D\\<C-J>', 'D']\")]],\n\t      \\ [\"E\\<C-V>\\<C-J>\\n\\<C-V>\\<C-J>\\n\\<C-V>\\<C-J>\\n\\<C-V>\\<C-J>\\n\\<C-V>\\<C-J>E\", 's/E\\_.\\{-}E/\\=strtrans(string(submatch(0, 1)))/', [strtrans(\"['E\\<C-J>', '\\<C-J>', '\\<C-J>', '\\<C-J>', '\\<C-J>E']\")]],\n\t      \\ ]\n  call Run_SubCmd_Tests(tests)\n\n  exe \"normal oQ\\nQ\\<Esc>k\"\n  call assert_fails('s/Q[^\\n]Q/\\=submatch(0).\"foobar\"/', 'E486:')\n  enew!\nendfunc\n\nfunc TitleString()\n  let check = 'foo' =~ 'bar'\n  return \"\"\nendfunc\n\nfunc Test_sub_cmd_8()\n  set titlestring=%{TitleString()}\n\n  enew!\n  call append(0, ['', 'test_one', 'test_two'])\n  call cursor(1,1)\n  /^test_one/s/.*/\\=\"foo\\nbar\"/\n  call assert_equal('foo', getline(2))\n  call assert_equal('bar', getline(3))\n  call feedkeys(':/^test_two/s/.*/\\=\"foo\\nbar\"/c', \"t\")\n  call feedkeys(\"\\<CR>y\", \"xt\")\n  call assert_equal('foo', getline(4))\n  call assert_equal('bar', getline(5))\n\n  enew!\n  set titlestring&\nendfunc\n\nfunc Test_sub_cmd_9()\n  new\n  let input = ['1 aaa', '2 aaa', '3 aaa']\n  call setline(1, input)\n  func Foo()\n    return submatch(0)\n  endfunc\n  %s/aaa/\\=Foo()/gn\n  call assert_equal(input, getline(1, '$'))\n  call assert_equal(1, &modifiable)\n\n  delfunc Foo\n  bw!\nendfunc\n\nfunc Test_sub_highlight_zero_match()\n  CheckRunVimInTerminal\n\n  let lines =<< trim END\n    call setline(1, ['one', 'two', 'three'])\n  END\n  call writefile(lines, 'XscriptSubHighlight', 'D')\n  let buf = RunVimInTerminal('-S XscriptSubHighlight', #{rows: 8, cols: 60})\n  call term_sendkeys(buf, \":%s/^/   /c\\<CR>\")\n  call VerifyScreenDump(buf, 'Test_sub_highlight_zer_match_1', {})\n\n  call term_sendkeys(buf, \"\\<Esc>\")\n  call StopVimInTerminal(buf)\nendfunc\n\nfunc Test_nocatch_sub_failure_handling()\n  \" normal error results in all replacements \n  func Foo()\n    foobar\n  endfunc\n  new\n  call setline(1, ['1 aaa', '2 aaa', '3 aaa'])\n  \" need silent! to avoid a delay when entering Insert mode\n  silent! %s/aaa/\\=Foo()/g\n  call assert_equal(['1 0', '2 0', '3 0'], getline(1, 3))\n\n  \" Throw without try-catch causes abort after the first line.\n  \" We cannot test this, since it would stop executing the test script.\n\n  \" try/catch does not result in any changes\n  func! Foo()\n    throw 'error'\n  endfunc\n  call setline(1, ['1 aaa', '2 aaa', '3 aaa'])\n  let error_caught = 0\n  try\n    %s/aaa/\\=Foo()/g\n  catch\n    let error_caught = 1\n  endtry\n  call assert_equal(1, error_caught)\n  call assert_equal(['1 aaa', '2 aaa', '3 aaa'], getline(1, 3))\n\n  \" Same, but using \"n\" flag so that \"sandbox\" gets set\n  call setline(1, ['1 aaa', '2 aaa', '3 aaa'])\n  let error_caught = 0\n  try\n    %s/aaa/\\=Foo()/gn\n  catch\n    let error_caught = 1\n  endtry\n  call assert_equal(1, error_caught)\n  call assert_equal(['1 aaa', '2 aaa', '3 aaa'], getline(1, 3))\n\n  delfunc Foo\n  bwipe!\nendfunc\n\n\" Test \":s/pat/sub/\" with different ~s in sub.\nfunc Test_replace_with_tilde()\n  new\n  \" Set the last replace string to empty\n  s/^$//\n  call append(0, ['- Bug in \"vPPPP\" on this text:'])\n  normal gg\n  s/u/~u~/\n  call assert_equal('- Bug in \"vPPPP\" on this text:', getline(1))\n  s/i/~u~/\n  call assert_equal('- Bug uuun \"vPPPP\" on this text:', getline(1))\n  s/o/~~~/\n  call assert_equal('- Bug uuun \"vPPPP\" uuuuuuuuun this text:', getline(1))\n  close!\nendfunc\n\nfunc Test_replace_keeppatterns()\n  new\n  a\nfoobar\n\nsubstitute foo asdf\n\none two\n.\n\n  normal gg\n  /^substitute\n  s/foo/bar/\n  call assert_equal('foo', @/)\n  call assert_equal('substitute bar asdf', getline('.'))\n\n  /^substitute\n  keeppatterns s/asdf/xyz/\n  call assert_equal('^substitute', @/)\n  call assert_equal('substitute bar xyz', getline('.'))\n\n  exe \"normal /bar /e\\<CR>\"\n  call assert_equal(15, col('.'))\n  normal -\n  keeppatterns /xyz\n  call assert_equal('bar ', @/)\n  call assert_equal('substitute bar xyz', getline('.'))\n  exe \"normal 0dn\"\n  call assert_equal('xyz', getline('.'))\n\n  close!\nendfunc\n\nfunc Test_sub_beyond_end()\n  new\n  call setline(1, '#')\n  let @/ = '^#\\n\\zs'\n  s///e\n  call assert_equal('#', getline(1))\n  bwipe!\nendfunc\n\n\" Test for repeating last substitution using :~ and :&r\nfunc Test_repeat_last_sub()\n  new\n  call setline(1, ['blue green yellow orange white'])\n  s/blue/red/\n  let @/ = 'yellow'\n  ~\n  let @/ = 'white'\n  :&r\n  let @/ = 'green'\n  s//gray\n  call assert_equal('red gray red orange red', getline(1))\n  close!\nendfunc\n\n\" Test for Vi compatible substitution:\n\"     \\/{string}/, \\?{string}? and \\&{string}&\nfunc Test_sub_vi_compatibility()\n  new\n  call setline(1, ['blue green yellow orange blue'])\n  let @/ = 'orange'\n  s\\/white/\n  let @/ = 'blue'\n  s\\?amber?\n  let @/ = 'white'\n  s\\&green&\n  call assert_equal('amber green yellow white green', getline(1))\n  close!\n\n  call assert_fails('vim9cmd s\\/white/', 'E1270:')\n  call assert_fails('vim9cmd s\\?white?', 'E1270:')\n  call assert_fails('vim9cmd s\\&white&', 'E1270:')\nendfunc\n\n\" Test for substitute with the new text longer than the original text\nfunc Test_sub_expand_text()\n  new\n  call setline(1, 'abcabcabcabcabcabcabcabc')\n  s/b/\\=repeat('B', 10)/g\n  call assert_equal(repeat('aBBBBBBBBBBc', 8), getline(1))\n  close!\nendfunc\n\n\" Test for command failures when the last substitute pattern is not set.\nfunc Test_sub_with_no_last_pat()\n  let lines =<< trim [SCRIPT]\n    call assert_fails('~', 'E33:')\n    call assert_fails('s//abc/g', 'E35:')\n    call assert_fails('s\\/bar', 'E35:')\n    call assert_fails('s\\&bar&', 'E33:')\n    call writefile(v:errors, 'Xresult')\n    qall!\n  [SCRIPT]\n  call writefile(lines, 'Xscript', 'D')\n  if RunVim([], [], '--clean -S Xscript')\n    call assert_equal([], readfile('Xresult'))\n  endif\n\n  let lines =<< trim [SCRIPT]\n    set cpo+=/\n    call assert_fails('s/abc/%/', 'E33:')\n    call writefile(v:errors, 'Xresult')\n    qall!\n  [SCRIPT]\n  call writefile(lines, 'Xscript')\n  if RunVim([], [], '--clean -S Xscript')\n    call assert_equal([], readfile('Xresult'))\n  endif\n\n  call delete('Xresult')\nendfunc\n\nfunc Test_substitute()\n  call assert_equal('a\u010f\u013d\u2018a\u010f\u013d\u2019a\u010f\u013d\u201ca', substitute('\u010f\u013d\u2018\u010f\u013d\u2019\u010f\u013d\u201c', '\\zs', 'a', 'g'))\n  \" Substitute with special keys\n  call assert_equal(\"a\\<End>c\", substitute('abc', \"a.c\", \"a\\<End>c\", ''))\nendfunc\n\nfunc Test_substitute_expr()\n  let g:val = 'XXX'\n  call assert_equal('XXX', substitute('yyy', 'y*', '\\=g:val', ''))\n  call assert_equal('XXX', substitute('yyy', 'y*', {-> g:val}, ''))\n  call assert_equal(\"-\\u1b \\uf2-\", substitute(\"-%1b %f2-\", '%\\(\\x\\x\\)',\n\t\t\t   \\ '\\=nr2char(\"0x\" . submatch(1))', 'g'))\n  call assert_equal(\"-\\u1b \\uf2-\", substitute(\"-%1b %f2-\", '%\\(\\x\\x\\)',\n\t\t\t   \\ {-> nr2char(\"0x\" . submatch(1))}, 'g'))\n\n  call assert_equal('231', substitute('123', '\\(.\\)\\(.\\)\\(.\\)',\n\t\\ {-> submatch(2) . submatch(3) . submatch(1)}, ''))\n\n  func Recurse()\n    return substitute('yyy', 'y\\(.\\)y', {-> submatch(1)}, '')\n  endfunc\n  \" recursive call works\n  call assert_equal('-y-x-', substitute('xxx', 'x\\(.\\)x', {-> '-' . Recurse() . '-' . submatch(1) . '-'}, ''))\n\n  call assert_fails(\"let s=submatch([])\", 'E745:')\n  call assert_fails(\"let s=submatch(2, [])\", 'E745:')\nendfunc\n\nfunc Test_invalid_submatch()\n  \" This was causing invalid memory access in Vim-7.4.2232 and older\n  call assert_fails(\"call substitute('x', '.', {-> submatch(10)}, '')\", 'E935:')\n  call assert_fails('eval submatch(-1)', 'E935:')\n  call assert_equal('', submatch(0))\n  call assert_equal('', submatch(1))\n  call assert_equal([], submatch(0, 1))\n  call assert_equal([], submatch(1, 1))\nendfunc\n\nfunc Test_submatch_list_concatenate()\n  let pat = 'A\\(.\\)'\n  let Rep = {-> string([submatch(0, 1)] + [[submatch(1)]])}\n  call substitute('A1', pat, Rep, '')->assert_equal(\"[['A1'], ['1']]\")\nendfunc\n\nfunc Test_substitute_expr_arg()\n  call assert_equal('123456789-123456789=', substitute('123456789',\n\t\\ '\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)',\n\t\\ {m -> m[0] . '-' . m[1] . m[2] . m[3] . m[4] . m[5] . m[6] . m[7] . m[8] . m[9] . '='}, ''))\n\n  call assert_equal('123456-123456=789', substitute('123456789',\n\t\\ '\\(.\\)\\(.\\)\\(.\\)\\(a*\\)\\(n*\\)\\(.\\)\\(.\\)\\(.\\)\\(x*\\)',\n\t\\ {m -> m[0] . '-' . m[1] . m[2] . m[3] . m[4] . m[5] . m[6] . m[7] . m[8] . m[9] . '='}, ''))\n\n  call assert_equal('123456789-123456789x=', substitute('123456789',\n\t\\ '\\(.\\)\\(.\\)\\(.*\\)',\n\t\\ {m -> m[0] . '-' . m[1] . m[2] . m[3] . 'x' . m[4] . m[5] . m[6] . m[7] . m[8] . m[9] . '='}, ''))\n\n  call assert_fails(\"call substitute('xxx', '.', {m -> string(add(m, 'x'))}, '')\", 'E742:')\n  call assert_fails(\"call substitute('xxx', '.', {m -> string(insert(m, 'x'))}, '')\", 'E742:')\n  call assert_fails(\"call substitute('xxx', '.', {m -> string(extend(m, ['x']))}, '')\", 'E742:')\n  call assert_fails(\"call substitute('xxx', '.', {m -> string(remove(m, 1))}, '')\", 'E742:')\nendfunc\n\n\" Test for using a function to supply the substitute string\nfunc Test_substitute_using_func()\n  func Xfunc()\n    return '1234'\n  endfunc\n  call assert_equal('a1234f', substitute('abcdef', 'b..e',\n        \\ function(\"Xfunc\"), ''))\n  delfunc Xfunc\nendfunc\n\n\" Test for using submatch() with a multiline match\nfunc Test_substitute_multiline_submatch()\n  new\n  call setline(1, ['line1', 'line2', 'line3', 'line4'])\n  %s/^line1\\(\\_.\\+\\)line4$/\\=submatch(1)/\n  call assert_equal(['', 'line2', 'line3', ''], getline(1, '$'))\n  close!\nendfunc\n\nfunc Test_substitute_skipped_range()\n  new\n  if 0\n    /1/5/2/2/\\n\n  endif\n  call assert_equal([0, 1, 1, 0, 1], getcurpos())\n  bwipe!\nendfunc\n\n\" Test using the 'gdefault' option (when on, flag 'g' is default on).\nfunc Test_substitute_gdefault()\n  new\n\n  \" First check without 'gdefault'\n  call setline(1, 'foo bar foo')\n  s/foo/FOO/\n  call assert_equal('FOO bar foo', getline(1))\n  call setline(1, 'foo bar foo')\n  s/foo/FOO/g\n  call assert_equal('FOO bar FOO', getline(1))\n  call setline(1, 'foo bar foo')\n  s/foo/FOO/gg\n  call assert_equal('FOO bar foo', getline(1))\n\n  \" Then check with 'gdefault'\n  set gdefault\n  call setline(1, 'foo bar foo')\n  s/foo/FOO/\n  call assert_equal('FOO bar FOO', getline(1))\n  call setline(1, 'foo bar foo')\n  s/foo/FOO/g\n  call assert_equal('FOO bar foo', getline(1))\n  call setline(1, 'foo bar foo')\n  s/foo/FOO/gg\n  call assert_equal('FOO bar FOO', getline(1))\n\n  \" Setting 'compatible' should reset 'gdefault'\n  call assert_equal(1, &gdefault)\n  set compatible\n  call assert_equal(0, &gdefault)\n  set nocompatible\n  call assert_equal(0, &gdefault)\n\n  bw!\nendfunc\n\n\" This was using \"old_sub\" after it was freed.\nfunc Test_using_old_sub()\n  set compatible maxfuncdepth=10\n  new\n  call setline(1, 'some text.')\n  func Repl()\n    ~\n    s/\n  endfunc\n  silent! s/\\%')/\\=Repl()\n\n  delfunc Repl\n  bwipe!\n  set nocompatible\nendfunc\n\n\" This was switching windows in between computing the length and using it.\nfunc Test_sub_change_window()\n  silent! lfile\n  sil! norm o0000000000000000000000000000000000000000000000000000\n  func Repl()\n    lopen\n  endfunc\n  silent!  s/\\%')/\\=Repl()\n  bwipe!\n  bwipe!\n  delfunc Repl\nendfunc\n\n\" This was undoign a change in between computing the length and using it.\nfunc Do_Test_sub_undo_change()\n  new\n  norm o0000000000000000000000000000000000000000000000000000\n  silent! s/\\%')/\\=Repl()\n  bwipe!\nendfunc\n\nfunc Test_sub_undo_change()\n  func Repl()\n    silent! norm g-\n  endfunc\n  call Do_Test_sub_undo_change()\n\n  func! Repl()\n    silent earlier\n  endfunc\n  call Do_Test_sub_undo_change()\n\n  delfunc Repl\nendfunc\n\n\" This was opening a command line window from the expression\nfunc Test_sub_open_cmdline_win()\n  \" the error only happens in a very specific setup, run a new Vim instance to\n  \" get a clean starting point.\n  let lines =<< trim [SCRIPT]\n    set vb t_vb=\n    norm o0000000000000000000000000000000000000000000000000000\n    func Replace()\n      norm q/\n    endfunc\n    s/\\%')/\\=Replace()\n    redir >Xresult\n    messages\n    redir END\n    qall!\n  [SCRIPT]\n  call writefile(lines, 'Xscript', 'D')\n  if RunVim([], [], '-u NONE -S Xscript')\n    call assert_match('E565: Not allowed to change text or change window',\n          \\ readfile('Xresult')->join('XX'))\n  endif\n\n  call delete('Xresult')\nendfunc\n\n\" This was editing a script file from the expression\nfunc Test_sub_edit_scriptfile()\n  new\n  norm o0000000000000000000000000000000000000000000000000000\n  func EditScript()\n    silent! scr! Xsedfile\n  endfunc\n  s/\\%')/\\=EditScript()\n\n  delfunc EditScript\n  bwipe!\nendfunc\n\n\" This was editing another file from the expression.\nfunc Test_sub_expr_goto_other_file()\n  call writefile([''], 'Xfileone', 'D')\n  enew!\n  call setline(1, ['a', 'b', 'c', 'd',\n\t\\ 'Xfileone zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'])\n\n  func g:SplitGotoFile()\n    exe \"sil! norm 0\\<C-W>gf\"\n    return ''\n  endfunc\n\n  $\n  s/\\%')/\\=g:SplitGotoFile()\n\n  delfunc g:SplitGotoFile\n  bwipe!\nendfunc\n\n\" Test for the 2-letter and 3-letter :substitute commands\nfunc Test_substitute_short_cmd()\n  new\n  call setline(1, ['one', 'one one one'])\n  s/one/two\n  call cursor(2, 1)\n\n  \" :sc\n  call feedkeys(\":sc\\<CR>y\", 'xt')\n  call assert_equal('two one one', getline(2))\n\n  \" :scg\n  call setline(2, 'one one one')\n  call feedkeys(\":scg\\<CR>nyq\", 'xt')\n  call assert_equal('one two one', getline(2))\n\n  \" :sci\n  call setline(2, 'ONE One onE')\n  call feedkeys(\":sci\\<CR>y\", 'xt')\n  call assert_equal('two One onE', getline(2))\n\n  \" :scI\n  set ignorecase\n  call setline(2, 'ONE One one')\n  call feedkeys(\":scI\\<CR>y\", 'xt')\n  call assert_equal('ONE One two', getline(2))\n  set ignorecase&\n\n  \" :scn\n  call setline(2, 'one one one')\n  let t = execute('scn')->split(\"\\n\")\n  call assert_equal(['1 match on 1 line'], t)\n  call assert_equal('one one one', getline(2))\n\n  \" :scp\n  call setline(2, \"\\tone one one\")\n  redir => output\n  call feedkeys(\":scp\\<CR>y\", 'xt')\n  redir END\n  call assert_equal('        two one one', output->split(\"\\n\")[-1])\n  call assert_equal(\"\\ttwo one one\", getline(2))\n\n  \" :scl\n  call setline(2, \"\\tone one one\")\n  redir => output\n  call feedkeys(\":scl\\<CR>y\", 'xt')\n  redir END\n  call assert_equal(\"^Itwo one one$\", output->split(\"\\n\")[-1])\n  call assert_equal(\"\\ttwo one one\", getline(2))\n\n  \" :sgc\n  call setline(2, 'one one one one one')\n  call feedkeys(\":sgc\\<CR>nyyq\", 'xt')\n  call assert_equal('one two two one one', getline(2))\n\n  \" :sg\n  call setline(2, 'one one one')\n  sg\n  call assert_equal('two two two', getline(2))\n\n  \" :sgi\n  call setline(2, 'ONE One onE')\n  sgi\n  call assert_equal('two two two', getline(2))\n\n  \" :sgI\n  set ignorecase\n  call setline(2, 'ONE One one')\n  sgI\n  call assert_equal('ONE One two', getline(2))\n  set ignorecase&\n\n  \" :sgn\n  call setline(2, 'one one one')\n  let t = execute('sgn')->split(\"\\n\")\n  call assert_equal(['3 matches on 1 line'], t)\n  call assert_equal('one one one', getline(2))\n\n  \" :sgp\n  call setline(2, \"\\tone one one\")\n  redir => output\n  sgp\n  redir END\n  call assert_equal('        two two two', output->split(\"\\n\")[-1])\n  call assert_equal(\"\\ttwo two two\", getline(2))\n\n  \" :sgl\n  call setline(2, \"\\tone one one\")\n  redir => output\n  sgl\n  redir END\n  call assert_equal(\"^Itwo two two$\", output->split(\"\\n\")[-1])\n  call assert_equal(\"\\ttwo two two\", getline(2))\n\n  \" :sgr\n  call setline(2, \"one one one\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  sgr\n  call assert_equal('xyz xyz xyz', getline(2))\n\n  \" :sic\n  call cursor(1, 1)\n  s/one/two/e\n  call setline(2, \"ONE One one\")\n  call cursor(2, 1)\n  call feedkeys(\":sic\\<CR>y\", 'xt')\n  call assert_equal('two One one', getline(2))\n\n  \" :si\n  call setline(2, \"ONE One one\")\n  si\n  call assert_equal('two One one', getline(2))\n\n  \" :siI\n  call setline(2, \"ONE One one\")\n  siI\n  call assert_equal('ONE One two', getline(2))\n\n  \" :sin\n  call setline(2, 'ONE One onE')\n  let t = execute('sin')->split(\"\\n\")\n  call assert_equal(['1 match on 1 line'], t)\n  call assert_equal('ONE One onE', getline(2))\n\n  \" :sip\n  call setline(2, \"\\tONE One onE\")\n  redir => output\n  sip\n  redir END\n  call assert_equal('        two One onE', output->split(\"\\n\")[-1])\n  call assert_equal(\"\\ttwo One onE\", getline(2))\n\n  \" :sir\n  call setline(2, \"ONE One onE\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  sir\n  call assert_equal('xyz One onE', getline(2))\n\n  \" :sIc\n  call cursor(1, 1)\n  s/one/two/e\n  call setline(2, \"ONE One one\")\n  call cursor(2, 1)\n  call feedkeys(\":sIc\\<CR>y\", 'xt')\n  call assert_equal('ONE One two', getline(2))\n\n  \" :sIg\n  call setline(2, \"ONE one onE one\")\n  sIg\n  call assert_equal('ONE two onE two', getline(2))\n\n  \" :sIi\n  call setline(2, \"ONE One one\")\n  sIi\n  call assert_equal('two One one', getline(2))\n\n  \" :sI\n  call setline(2, \"ONE One one\")\n  sI\n  call assert_equal('ONE One two', getline(2))\n\n  \" :sIn\n  call setline(2, 'ONE One one')\n  let t = execute('sIn')->split(\"\\n\")\n  call assert_equal(['1 match on 1 line'], t)\n  call assert_equal('ONE One one', getline(2))\n\n  \" :sIp\n  call setline(2, \"\\tONE One one\")\n  redir => output\n  sIp\n  redir END\n  call assert_equal('        ONE One two', output->split(\"\\n\")[-1])\n  call assert_equal(\"\\tONE One two\", getline(2))\n\n  \" :sIl\n  call setline(2, \"\\tONE onE one\")\n  redir => output\n  sIl\n  redir END\n  call assert_equal(\"^IONE onE two$\", output->split(\"\\n\")[-1])\n  call assert_equal(\"\\tONE onE two\", getline(2))\n\n  \" :sIr\n  call setline(2, \"ONE one onE\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  sIr\n  call assert_equal('ONE xyz onE', getline(2))\n\n  \" :src\n  call setline(2, \"ONE one one\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  call feedkeys(\":src\\<CR>y\", 'xt')\n  call assert_equal('ONE xyz one', getline(2))\n\n  \" :srg\n  call setline(2, \"one one one\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  srg\n  call assert_equal('xyz xyz xyz', getline(2))\n\n  \" :sri\n  call setline(2, \"ONE one onE\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  sri\n  call assert_equal('xyz one onE', getline(2))\n\n  \" :srI\n  call setline(2, \"ONE one onE\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  srI\n  call assert_equal('ONE xyz onE', getline(2))\n\n  \" :srn\n  call setline(2, \"ONE one onE\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  let t = execute('srn')->split(\"\\n\")\n  call assert_equal(['1 match on 1 line'], t)\n  call assert_equal('ONE one onE', getline(2))\n\n  \" :srp\n  call setline(2, \"\\tONE one onE\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  redir => output\n  srp\n  redir END\n  call assert_equal('        ONE xyz onE', output->split(\"\\n\")[-1])\n  call assert_equal(\"\\tONE xyz onE\", getline(2))\n\n  \" :srl\n  call setline(2, \"\\tONE one onE\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  redir => output\n  srl\n  redir END\n  call assert_equal(\"^IONE xyz onE$\", output->split(\"\\n\")[-1])\n  call assert_equal(\"\\tONE xyz onE\", getline(2))\n\n  \" :sr\n  call setline(2, \"ONE one onE\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  sr\n  call assert_equal('ONE xyz onE', getline(2))\n\n  \" :sce\n  s/abc/xyz/e\n  call assert_fails(\"sc\", 'E486:')\n  sce\n  \" :sge\n  call assert_fails(\"sg\", 'E486:')\n  sge\n  \" :sie\n  call assert_fails(\"si\", 'E486:')\n  sie\n  \" :sIe\n  call assert_fails(\"sI\", 'E486:')\n  sIe\n\n  bw!\nendfunc\n\n\" This should be done last to reveal a memory leak when vim_regsub_both() is\n\" called to evaluate an expression but it is not used in a second call.\nfunc Test_z_substitute_expr_leak()\n  func SubExpr()\n    ~n\n  endfunc\n  silent! s/\\%')/\\=SubExpr()\n  delfunc SubExpr\nendfunc\n\n\" vim: shiftwidth=2 sts=2 expandtab\n", "/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\t\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n#include \"vim.h\"\n\n/*\n * Vim originated from Stevie version 3.6 (Fish disk 217) by GRWalter (Fred)\n * It has been changed beyond recognition since then.\n *\n * Differences between version 8.2 and 9.0 can be found with \":help version9\".\n * Differences between version 7.4 and 8.x can be found with \":help version8\".\n * Differences between version 6.4 and 7.x can be found with \":help version7\".\n * Differences between version 5.8 and 6.x can be found with \":help version6\".\n * Differences between version 4.x and 5.x can be found with \":help version5\".\n * Differences between version 3.0 and 4.x can be found with \":help version4\".\n * All the remarks about older versions have been removed, they are not very\n * interesting.\n */\n\n#include \"version.h\"\n\nchar\t\t*Version = VIM_VERSION_SHORT;\nstatic char\t*mediumVersion = VIM_VERSION_MEDIUM;\n\n#if defined(HAVE_DATE_TIME) || defined(PROTO)\n# if (defined(VMS) && defined(VAXC)) || defined(PROTO)\nchar\tlongVersion[sizeof(VIM_VERSION_LONG_DATE) + sizeof(__DATE__)\n\t\t\t\t\t\t      + sizeof(__TIME__) + 3];\n\n    void\ninit_longVersion(void)\n{\n    /*\n     * Construct the long version string.  Necessary because\n     * VAX C can't concatenate strings in the preprocessor.\n     */\n    strcpy(longVersion, VIM_VERSION_LONG_DATE);\n#ifdef BUILD_DATE\n    strcat(longVersion, BUILD_DATE);\n#else\n    strcat(longVersion, __DATE__);\n    strcat(longVersion, \" \");\n    strcat(longVersion, __TIME__);\n#endif\n    strcat(longVersion, \")\");\n}\n\n# else\nchar\t*longVersion = NULL;\n\n    void\ninit_longVersion(void)\n{\n    if (longVersion == NULL)\n    {\n#ifdef BUILD_DATE\n\tchar *date_time = BUILD_DATE;\n#else\n\tchar *date_time = __DATE__ \" \" __TIME__;\n#endif\n\tchar *msg = _(\"%s (%s, compiled %s)\");\n\tsize_t len = strlen(msg)\n\t\t    + strlen(VIM_VERSION_LONG_ONLY)\n\t\t    + strlen(VIM_VERSION_DATE_ONLY)\n\t\t    + strlen(date_time);\n\n\tlongVersion = alloc(len);\n\tif (longVersion == NULL)\n\t    longVersion = VIM_VERSION_LONG;\n\telse\n\t    vim_snprintf(longVersion, len, msg,\n\t\t      VIM_VERSION_LONG_ONLY, VIM_VERSION_DATE_ONLY, date_time);\n    }\n}\n# endif\n#else\nchar\t*longVersion = VIM_VERSION_LONG;\n\n    void\ninit_longVersion(void)\n{\n    // nothing to do\n}\n#endif\n\nstatic char *(features[]) =\n{\n#ifdef HAVE_ACL\n\t\"+acl\",\n#else\n\t\"-acl\",\n#endif\n#ifdef AMIGA\t\t// only for Amiga systems\n# ifdef FEAT_ARP\n\t\"+ARP\",\n# else\n\t\"-ARP\",\n# endif\n#endif\n#ifdef FEAT_ARABIC\n\t\"+arabic\",\n#else\n\t\"-arabic\",\n#endif\n\t\"+autocmd\",\n#ifdef FEAT_AUTOCHDIR\n       \"+autochdir\",\n#else\n       \"-autochdir\",\n#endif\n#ifdef FEAT_AUTOSERVERNAME\n\t\"+autoservername\",\n#else\n\t\"-autoservername\",\n#endif\n#ifdef FEAT_BEVAL_GUI\n\t\"+balloon_eval\",\n#else\n\t\"-balloon_eval\",\n#endif\n#ifdef FEAT_BEVAL_TERM\n\t\"+balloon_eval_term\",\n#else\n\t\"-balloon_eval_term\",\n#endif\n#ifdef FEAT_BROWSE\n\t\"+browse\",\n#else\n\t\"-browse\",\n#endif\n\t\"++builtin_terms\",\n#ifdef FEAT_BYTEOFF\n\t\"+byte_offset\",\n#else\n\t\"-byte_offset\",\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t\"+channel\",\n#else\n\t\"-channel\",\n#endif\n\t\"+cindent\",\n#ifdef FEAT_CLIENTSERVER\n\t\"+clientserver\",\n#else\n\t\"-clientserver\",\n#endif\n#ifdef FEAT_CLIPBOARD\n\t\"+clipboard\",\n#else\n\t\"-clipboard\",\n#endif\n\t\"+cmdline_compl\",\n\t\"+cmdline_hist\",\n\t\"+cmdline_info\",\n\t\"+comments\",\n#ifdef FEAT_CONCEAL\n\t\"+conceal\",\n#else\n\t\"-conceal\",\n#endif\n#ifdef FEAT_CRYPT\n\t\"+cryptv\",\n#else\n\t\"-cryptv\",\n#endif\n#ifdef FEAT_CSCOPE\n\t\"+cscope\",\n#else\n\t\"-cscope\",\n#endif\n\t\"+cursorbind\",\n#ifdef CURSOR_SHAPE\n\t\"+cursorshape\",\n#else\n\t\"-cursorshape\",\n#endif\n#if defined(FEAT_CON_DIALOG) && defined(FEAT_GUI_DIALOG)\n\t\"+dialog_con_gui\",\n#else\n# if defined(FEAT_CON_DIALOG)\n\t\"+dialog_con\",\n# else\n#  if defined(FEAT_GUI_DIALOG)\n\t\"+dialog_gui\",\n#  else\n\t\"-dialog\",\n#  endif\n# endif\n#endif\n#ifdef FEAT_DIFF\n\t\"+diff\",\n#else\n\t\"-diff\",\n#endif\n#ifdef FEAT_DIGRAPHS\n\t\"+digraphs\",\n#else\n\t\"-digraphs\",\n#endif\n#ifdef FEAT_GUI_MSWIN\n# ifdef FEAT_DIRECTX\n\t\"+directx\",\n# else\n\t\"-directx\",\n# endif\n#endif\n#ifdef FEAT_DND\n\t\"+dnd\",\n#else\n\t\"-dnd\",\n#endif\n\t\"-ebcdic\",\n#ifdef FEAT_EMACS_TAGS\n\t\"+emacs_tags\",\n#else\n\t\"-emacs_tags\",\n#endif\n#ifdef FEAT_EVAL\n\t\"+eval\",\n#else\n\t\"-eval\",\n#endif\n\t\"+ex_extra\",\n#ifdef FEAT_SEARCH_EXTRA\n\t\"+extra_search\",\n#else\n\t\"-extra_search\",\n#endif\n\t\"-farsi\",\n\t\"+file_in_path\",\n#ifdef FEAT_FIND_ID\n\t\"+find_in_path\",\n#else\n\t\"-find_in_path\",\n#endif\n\t\"+float\",\n#ifdef FEAT_FOLDING\n\t\"+folding\",\n#else\n\t\"-folding\",\n#endif\n\t\"-footer\",\n\t// only interesting on Unix systems\n#if !defined(USE_SYSTEM) && defined(UNIX)\n\t\"+fork()\",\n#endif\n#ifdef FEAT_GETTEXT\n# ifdef DYNAMIC_GETTEXT\n\t\"+gettext/dyn\",\n# else\n\t\"+gettext\",\n# endif\n#else\n\t\"-gettext\",\n#endif\n\t\"-hangul_input\",\n#if (defined(HAVE_ICONV_H) && defined(USE_ICONV)) || defined(DYNAMIC_ICONV)\n# ifdef DYNAMIC_ICONV\n\t\"+iconv/dyn\",\n# else\n\t\"+iconv\",\n# endif\n#else\n\t\"-iconv\",\n#endif\n\t\"+insert_expand\",\n#ifdef FEAT_IPV6\n\t\"+ipv6\",\n#else\n\t\"-ipv6\",\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t\"+job\",\n#else\n\t\"-job\",\n#endif\n\t\"+jumplist\",\n#ifdef FEAT_KEYMAP\n\t\"+keymap\",\n#else\n\t\"-keymap\",\n#endif\n#ifdef FEAT_EVAL\n\t\"+lambda\",\n#else\n\t\"-lambda\",\n#endif\n#ifdef FEAT_LANGMAP\n\t\"+langmap\",\n#else\n\t\"-langmap\",\n#endif\n#ifdef FEAT_LIBCALL\n\t\"+libcall\",\n#else\n\t\"-libcall\",\n#endif\n#ifdef FEAT_LINEBREAK\n\t\"+linebreak\",\n#else\n\t\"-linebreak\",\n#endif\n\t\"+lispindent\",\n\t\"+listcmds\",\n\t\"+localmap\",\n#ifdef FEAT_LUA\n# ifdef DYNAMIC_LUA\n\t\"+lua/dyn\",\n# else\n\t\"+lua\",\n# endif\n#else\n\t\"-lua\",\n#endif\n#ifdef FEAT_MENU\n\t\"+menu\",\n#else\n\t\"-menu\",\n#endif\n#ifdef FEAT_SESSION\n\t\"+mksession\",\n#else\n\t\"-mksession\",\n#endif\n\t\"+modify_fname\",\n\t\"+mouse\",\n#ifdef FEAT_MOUSESHAPE\n\t\"+mouseshape\",\n#else\n\t\"-mouseshape\",\n#endif\n\n#if defined(UNIX) || defined(VMS)\n# ifdef FEAT_MOUSE_DEC\n\t\"+mouse_dec\",\n# else\n\t\"-mouse_dec\",\n# endif\n# ifdef FEAT_MOUSE_GPM\n#  ifdef DYNAMIC_GPM\n\t\"+mouse_gpm/dyn\",\n#  else\n\t\"+mouse_gpm\",\n#  endif\n# else\n\t\"-mouse_gpm\",\n# endif\n# ifdef FEAT_MOUSE_JSB\n\t\"+mouse_jsbterm\",\n# else\n\t\"-mouse_jsbterm\",\n# endif\n# ifdef FEAT_MOUSE_NET\n\t\"+mouse_netterm\",\n# else\n\t\"-mouse_netterm\",\n# endif\n#endif\n\n#ifdef __QNX__\n# ifdef FEAT_MOUSE_PTERM\n\t\"+mouse_pterm\",\n# else\n\t\"-mouse_pterm\",\n# endif\n#endif\n\n#if defined(UNIX) || defined(VMS)\n\t\"+mouse_sgr\",\n# ifdef FEAT_SYSMOUSE\n\t\"+mouse_sysmouse\",\n# else\n\t\"-mouse_sysmouse\",\n# endif\n# ifdef FEAT_MOUSE_URXVT\n\t\"+mouse_urxvt\",\n# else\n\t\"-mouse_urxvt\",\n# endif\n\t\"+mouse_xterm\",\n#endif\n\n#ifdef FEAT_MBYTE_IME\n# ifdef DYNAMIC_IME\n\t\"+multi_byte_ime/dyn\",\n# else\n\t\"+multi_byte_ime\",\n# endif\n#else\n\t\"+multi_byte\",\n#endif\n#ifdef FEAT_MULTI_LANG\n\t\"+multi_lang\",\n#else\n\t\"-multi_lang\",\n#endif\n#ifdef FEAT_MZSCHEME\n# ifdef DYNAMIC_MZSCHEME\n\t\"+mzscheme/dyn\",\n# else\n\t\"+mzscheme\",\n# endif\n#else\n\t\"-mzscheme\",\n#endif\n#ifdef FEAT_NETBEANS_INTG\n\t\"+netbeans_intg\",\n#else\n\t\"-netbeans_intg\",\n#endif\n\t\"+num64\",\n#ifdef FEAT_GUI_MSWIN\n# ifdef FEAT_OLE\n\t\"+ole\",\n# else\n\t\"-ole\",\n# endif\n#endif\n#ifdef FEAT_EVAL\n\t\"+packages\",\n#else\n\t\"-packages\",\n#endif\n\t\"+path_extra\",\n#ifdef FEAT_PERL\n# ifdef DYNAMIC_PERL\n\t\"+perl/dyn\",\n# else\n\t\"+perl\",\n# endif\n#else\n\t\"-perl\",\n#endif\n#ifdef FEAT_PERSISTENT_UNDO\n\t\"+persistent_undo\",\n#else\n\t\"-persistent_undo\",\n#endif\n#ifdef FEAT_PROP_POPUP\n\t\"+popupwin\",\n#else\n\t\"-popupwin\",\n#endif\n#ifdef FEAT_PRINTER\n# ifdef FEAT_POSTSCRIPT\n\t\"+postscript\",\n# else\n\t\"-postscript\",\n# endif\n\t\"+printer\",\n#else\n\t\"-printer\",\n#endif\n#ifdef FEAT_PROFILE\n\t\"+profile\",\n#else\n\t\"-profile\",\n#endif\n#ifdef FEAT_PYTHON\n# ifdef DYNAMIC_PYTHON\n\t\"+python/dyn\",\n# else\n\t\"+python\",\n# endif\n#else\n\t\"-python\",\n#endif\n#ifdef FEAT_PYTHON3\n# ifdef DYNAMIC_PYTHON3\n\t\"+python3/dyn\",\n# else\n\t\"+python3\",\n# endif\n#else\n\t\"-python3\",\n#endif\n#ifdef FEAT_QUICKFIX\n\t\"+quickfix\",\n#else\n\t\"-quickfix\",\n#endif\n#ifdef FEAT_RELTIME\n\t\"+reltime\",\n#else\n\t\"-reltime\",\n#endif\n#ifdef FEAT_RIGHTLEFT\n\t\"+rightleft\",\n#else\n\t\"-rightleft\",\n#endif\n#ifdef FEAT_RUBY\n# ifdef DYNAMIC_RUBY\n\t\"+ruby/dyn\",\n# else\n\t\"+ruby\",\n# endif\n#else\n\t\"-ruby\",\n#endif\n\t\"+scrollbind\",\n#ifdef FEAT_SIGNS\n\t\"+signs\",\n#else\n\t\"-signs\",\n#endif\n\t\"+smartindent\",\n#ifdef FEAT_SODIUM\n# ifdef DYNAMIC_SODIUM\n\t\"+sodium/dyn\",\n# else\n\t\"+sodium\",\n# endif\n#else\n\t\"-sodium\",\n#endif\n#ifdef FEAT_SOUND\n\t\"+sound\",\n#else\n\t\"-sound\",\n#endif\n#ifdef FEAT_SPELL\n\t\"+spell\",\n#else\n\t\"-spell\",\n#endif\n#ifdef STARTUPTIME\n\t\"+startuptime\",\n#else\n\t\"-startuptime\",\n#endif\n#ifdef FEAT_STL_OPT\n\t\"+statusline\",\n#else\n\t\"-statusline\",\n#endif\n\t\"-sun_workshop\",\n#ifdef FEAT_SYN_HL\n\t\"+syntax\",\n#else\n\t\"-syntax\",\n#endif\n\t    // only interesting on Unix systems\n#if defined(USE_SYSTEM) && defined(UNIX)\n\t\"+system()\",\n#endif\n\t\"+tag_binary\",\n\t\"-tag_old_static\",\n\t\"-tag_any_white\",\n#ifdef FEAT_TCL\n# ifdef DYNAMIC_TCL\n\t\"+tcl/dyn\",\n# else\n\t\"+tcl\",\n# endif\n#else\n\t\"-tcl\",\n#endif\n#ifdef FEAT_TERMGUICOLORS\n\t\"+termguicolors\",\n#else\n\t\"-termguicolors\",\n#endif\n#ifdef FEAT_TERMINAL\n\t\"+terminal\",\n#else\n\t\"-terminal\",\n#endif\n#if defined(UNIX)\n// only Unix can have terminfo instead of termcap\n# ifdef TERMINFO\n\t\"+terminfo\",\n# else\n\t\"-terminfo\",\n# endif\n#endif\n#ifdef FEAT_TERMRESPONSE\n\t\"+termresponse\",\n#else\n\t\"-termresponse\",\n#endif\n\t\"+textobjects\",\n#ifdef FEAT_PROP_POPUP\n\t\"+textprop\",\n#else\n\t\"-textprop\",\n#endif\n#if !defined(UNIX)\n// unix always includes termcap support\n# ifdef HAVE_TGETENT\n\t\"+tgetent\",\n# else\n\t\"-tgetent\",\n# endif\n#endif\n#ifdef FEAT_TIMERS\n\t\"+timers\",\n#else\n\t\"-timers\",\n#endif\n\t\"+title\",\n#ifdef FEAT_TOOLBAR\n\t\"+toolbar\",\n#else\n\t\"-toolbar\",\n#endif\n\t\"+user_commands\",\n#ifdef FEAT_VARTABS\n\t\"+vartabs\",\n#else\n\t\"-vartabs\",\n#endif\n\t\"+vertsplit\",\n\t\"+vim9script\",\n#ifdef FEAT_VIMINFO\n\t\"+viminfo\",\n#else\n\t\"-viminfo\",\n#endif\n\t\"+virtualedit\",\n\t\"+visual\",\n\t\"+visualextra\",\n\t\"+vreplace\",\n#ifdef MSWIN\n# ifdef FEAT_VTP\n\t\"+vtp\",\n# else\n\t\"-vtp\",\n# endif\n#endif\n\t\"+wildignore\",\n\t\"+wildmenu\",\n\t\"+windows\",\n#ifdef FEAT_WRITEBACKUP\n\t\"+writebackup\",\n#else\n\t\"-writebackup\",\n#endif\n#if defined(UNIX) || defined(VMS)\n# ifdef FEAT_X11\n\t\"+X11\",\n# else\n\t\"-X11\",\n# endif\n#endif\n#ifdef FEAT_XFONTSET\n\t\"+xfontset\",\n#else\n\t\"-xfontset\",\n#endif\n#ifdef FEAT_XIM\n\t\"+xim\",\n#else\n\t\"-xim\",\n#endif\n#if defined(MSWIN)\n# ifdef FEAT_XPM_W32\n\t\"+xpm_w32\",\n# else\n\t\"-xpm_w32\",\n# endif\n#elif defined(HAVE_XPM)\n\t\"+xpm\",\n#else\n\t\"-xpm\",\n#endif\n#if defined(UNIX) || defined(VMS)\n# if defined(USE_XSMP_INTERACT)\n\t\"+xsmp_interact\",\n# elif defined(USE_XSMP)\n\t\"+xsmp\",\n# else\n\t\"-xsmp\",\n# endif\n# ifdef FEAT_XCLIPBOARD\n\t\"+xterm_clipboard\",\n# else\n\t\"-xterm_clipboard\",\n# endif\n#endif\n#ifdef FEAT_XTERM_SAVE\n\t\"+xterm_save\",\n#else\n\t\"-xterm_save\",\n#endif\n\tNULL\n};\n\nstatic int included_patches[] =\n{   /* Add new patch number below this line */\n/**/\n    1144,\n/**/\n    1143,\n/**/\n    1142,\n/**/\n    1141,\n/**/\n    1140,\n/**/\n    1139,\n/**/\n    1138,\n/**/\n    1137,\n/**/\n    1136,\n/**/\n    1135,\n/**/\n    1134,\n/**/\n    1133,\n/**/\n    1132,\n/**/\n    1131,\n/**/\n    1130,\n/**/\n    1129,\n/**/\n    1128,\n/**/\n    1127,\n/**/\n    1126,\n/**/\n    1125,\n/**/\n    1124,\n/**/\n    1123,\n/**/\n    1122,\n/**/\n    1121,\n/**/\n    1120,\n/**/\n    1119,\n/**/\n    1118,\n/**/\n    1117,\n/**/\n    1116,\n/**/\n    1115,\n/**/\n    1114,\n/**/\n    1113,\n/**/\n    1112,\n/**/\n    1111,\n/**/\n    1110,\n/**/\n    1109,\n/**/\n    1108,\n/**/\n    1107,\n/**/\n    1106,\n/**/\n    1105,\n/**/\n    1104,\n/**/\n    1103,\n/**/\n    1102,\n/**/\n    1101,\n/**/\n    1100,\n/**/\n    1099,\n/**/\n    1098,\n/**/\n    1097,\n/**/\n    1096,\n/**/\n    1095,\n/**/\n    1094,\n/**/\n    1093,\n/**/\n    1092,\n/**/\n    1091,\n/**/\n    1090,\n/**/\n    1089,\n/**/\n    1088,\n/**/\n    1087,\n/**/\n    1086,\n/**/\n    1085,\n/**/\n    1084,\n/**/\n    1083,\n/**/\n    1082,\n/**/\n    1081,\n/**/\n    1080,\n/**/\n    1079,\n/**/\n    1078,\n/**/\n    1077,\n/**/\n    1076,\n/**/\n    1075,\n/**/\n    1074,\n/**/\n    1073,\n/**/\n    1072,\n/**/\n    1071,\n/**/\n    1070,\n/**/\n    1069,\n/**/\n    1068,\n/**/\n    1067,\n/**/\n    1066,\n/**/\n    1065,\n/**/\n    1064,\n/**/\n    1063,\n/**/\n    1062,\n/**/\n    1061,\n/**/\n    1060,\n/**/\n    1059,\n/**/\n    1058,\n/**/\n    1057,\n/**/\n    1056,\n/**/\n    1055,\n/**/\n    1054,\n/**/\n    1053,\n/**/\n    1052,\n/**/\n    1051,\n/**/\n    1050,\n/**/\n    1049,\n/**/\n    1048,\n/**/\n    1047,\n/**/\n    1046,\n/**/\n    1045,\n/**/\n    1044,\n/**/\n    1043,\n/**/\n    1042,\n/**/\n    1041,\n/**/\n    1040,\n/**/\n    1039,\n/**/\n    1038,\n/**/\n    1037,\n/**/\n    1036,\n/**/\n    1035,\n/**/\n    1034,\n/**/\n    1033,\n/**/\n    1032,\n/**/\n    1031,\n/**/\n    1030,\n/**/\n    1029,\n/**/\n    1028,\n/**/\n    1027,\n/**/\n    1026,\n/**/\n    1025,\n/**/\n    1024,\n/**/\n    1023,\n/**/\n    1022,\n/**/\n    1021,\n/**/\n    1020,\n/**/\n    1019,\n/**/\n    1018,\n/**/\n    1017,\n/**/\n    1016,\n/**/\n    1015,\n/**/\n    1014,\n/**/\n    1013,\n/**/\n    1012,\n/**/\n    1011,\n/**/\n    1010,\n/**/\n    1009,\n/**/\n    1008,\n/**/\n    1007,\n/**/\n    1006,\n/**/\n    1005,\n/**/\n    1004,\n/**/\n    1003,\n/**/\n    1002,\n/**/\n    1001,\n/**/\n    1000,\n/**/\n    999,\n/**/\n    998,\n/**/\n    997,\n/**/\n    996,\n/**/\n    995,\n/**/\n    994,\n/**/\n    993,\n/**/\n    992,\n/**/\n    991,\n/**/\n    990,\n/**/\n    989,\n/**/\n    988,\n/**/\n    987,\n/**/\n    986,\n/**/\n    985,\n/**/\n    984,\n/**/\n    983,\n/**/\n    982,\n/**/\n    981,\n/**/\n    980,\n/**/\n    979,\n/**/\n    978,\n/**/\n    977,\n/**/\n    976,\n/**/\n    975,\n/**/\n    974,\n/**/\n    973,\n/**/\n    972,\n/**/\n    971,\n/**/\n    970,\n/**/\n    969,\n/**/\n    968,\n/**/\n    967,\n/**/\n    966,\n/**/\n    965,\n/**/\n    964,\n/**/\n    963,\n/**/\n    962,\n/**/\n    961,\n/**/\n    960,\n/**/\n    959,\n/**/\n    958,\n/**/\n    957,\n/**/\n    956,\n/**/\n    955,\n/**/\n    954,\n/**/\n    953,\n/**/\n    952,\n/**/\n    951,\n/**/\n    950,\n/**/\n    949,\n/**/\n    948,\n/**/\n    947,\n/**/\n    946,\n/**/\n    945,\n/**/\n    944,\n/**/\n    943,\n/**/\n    942,\n/**/\n    941,\n/**/\n    940,\n/**/\n    939,\n/**/\n    938,\n/**/\n    937,\n/**/\n    936,\n/**/\n    935,\n/**/\n    934,\n/**/\n    933,\n/**/\n    932,\n/**/\n    931,\n/**/\n    930,\n/**/\n    929,\n/**/\n    928,\n/**/\n    927,\n/**/\n    926,\n/**/\n    925,\n/**/\n    924,\n/**/\n    923,\n/**/\n    922,\n/**/\n    921,\n/**/\n    920,\n/**/\n    919,\n/**/\n    918,\n/**/\n    917,\n/**/\n    916,\n/**/\n    915,\n/**/\n    914,\n/**/\n    913,\n/**/\n    912,\n/**/\n    911,\n/**/\n    910,\n/**/\n    909,\n/**/\n    908,\n/**/\n    907,\n/**/\n    906,\n/**/\n    905,\n/**/\n    904,\n/**/\n    903,\n/**/\n    902,\n/**/\n    901,\n/**/\n    900,\n/**/\n    899,\n/**/\n    898,\n/**/\n    897,\n/**/\n    896,\n/**/\n    895,\n/**/\n    894,\n/**/\n    893,\n/**/\n    892,\n/**/\n    891,\n/**/\n    890,\n/**/\n    889,\n/**/\n    888,\n/**/\n    887,\n/**/\n    886,\n/**/\n    885,\n/**/\n    884,\n/**/\n    883,\n/**/\n    882,\n/**/\n    881,\n/**/\n    880,\n/**/\n    879,\n/**/\n    878,\n/**/\n    877,\n/**/\n    876,\n/**/\n    875,\n/**/\n    874,\n/**/\n    873,\n/**/\n    872,\n/**/\n    871,\n/**/\n    870,\n/**/\n    869,\n/**/\n    868,\n/**/\n    867,\n/**/\n    866,\n/**/\n    865,\n/**/\n    864,\n/**/\n    863,\n/**/\n    862,\n/**/\n    861,\n/**/\n    860,\n/**/\n    859,\n/**/\n    858,\n/**/\n    857,\n/**/\n    856,\n/**/\n    855,\n/**/\n    854,\n/**/\n    853,\n/**/\n    852,\n/**/\n    851,\n/**/\n    850,\n/**/\n    849,\n/**/\n    848,\n/**/\n    847,\n/**/\n    846,\n/**/\n    845,\n/**/\n    844,\n/**/\n    843,\n/**/\n    842,\n/**/\n    841,\n/**/\n    840,\n/**/\n    839,\n/**/\n    838,\n/**/\n    837,\n/**/\n    836,\n/**/\n    835,\n/**/\n    834,\n/**/\n    833,\n/**/\n    832,\n/**/\n    831,\n/**/\n    830,\n/**/\n    829,\n/**/\n    828,\n/**/\n    827,\n/**/\n    826,\n/**/\n    825,\n/**/\n    824,\n/**/\n    823,\n/**/\n    822,\n/**/\n    821,\n/**/\n    820,\n/**/\n    819,\n/**/\n    818,\n/**/\n    817,\n/**/\n    816,\n/**/\n    815,\n/**/\n    814,\n/**/\n    813,\n/**/\n    812,\n/**/\n    811,\n/**/\n    810,\n/**/\n    809,\n/**/\n    808,\n/**/\n    807,\n/**/\n    806,\n/**/\n    805,\n/**/\n    804,\n/**/\n    803,\n/**/\n    802,\n/**/\n    801,\n/**/\n    800,\n/**/\n    799,\n/**/\n    798,\n/**/\n    797,\n/**/\n    796,\n/**/\n    795,\n/**/\n    794,\n/**/\n    793,\n/**/\n    792,\n/**/\n    791,\n/**/\n    790,\n/**/\n    789,\n/**/\n    788,\n/**/\n    787,\n/**/\n    786,\n/**/\n    785,\n/**/\n    784,\n/**/\n    783,\n/**/\n    782,\n/**/\n    781,\n/**/\n    780,\n/**/\n    779,\n/**/\n    778,\n/**/\n    777,\n/**/\n    776,\n/**/\n    775,\n/**/\n    774,\n/**/\n    773,\n/**/\n    772,\n/**/\n    771,\n/**/\n    770,\n/**/\n    769,\n/**/\n    768,\n/**/\n    767,\n/**/\n    766,\n/**/\n    765,\n/**/\n    764,\n/**/\n    763,\n/**/\n    762,\n/**/\n    761,\n/**/\n    760,\n/**/\n    759,\n/**/\n    758,\n/**/\n    757,\n/**/\n    756,\n/**/\n    755,\n/**/\n    754,\n/**/\n    753,\n/**/\n    752,\n/**/\n    751,\n/**/\n    750,\n/**/\n    749,\n/**/\n    748,\n/**/\n    747,\n/**/\n    746,\n/**/\n    745,\n/**/\n    744,\n/**/\n    743,\n/**/\n    742,\n/**/\n    741,\n/**/\n    740,\n/**/\n    739,\n/**/\n    738,\n/**/\n    737,\n/**/\n    736,\n/**/\n    735,\n/**/\n    734,\n/**/\n    733,\n/**/\n    732,\n/**/\n    731,\n/**/\n    730,\n/**/\n    729,\n/**/\n    728,\n/**/\n    727,\n/**/\n    726,\n/**/\n    725,\n/**/\n    724,\n/**/\n    723,\n/**/\n    722,\n/**/\n    721,\n/**/\n    720,\n/**/\n    719,\n/**/\n    718,\n/**/\n    717,\n/**/\n    716,\n/**/\n    715,\n/**/\n    714,\n/**/\n    713,\n/**/\n    712,\n/**/\n    711,\n/**/\n    710,\n/**/\n    709,\n/**/\n    708,\n/**/\n    707,\n/**/\n    706,\n/**/\n    705,\n/**/\n    704,\n/**/\n    703,\n/**/\n    702,\n/**/\n    701,\n/**/\n    700,\n/**/\n    699,\n/**/\n    698,\n/**/\n    697,\n/**/\n    696,\n/**/\n    695,\n/**/\n    694,\n/**/\n    693,\n/**/\n    692,\n/**/\n    691,\n/**/\n    690,\n/**/\n    689,\n/**/\n    688,\n/**/\n    687,\n/**/\n    686,\n/**/\n    685,\n/**/\n    684,\n/**/\n    683,\n/**/\n    682,\n/**/\n    681,\n/**/\n    680,\n/**/\n    679,\n/**/\n    678,\n/**/\n    677,\n/**/\n    676,\n/**/\n    675,\n/**/\n    674,\n/**/\n    673,\n/**/\n    672,\n/**/\n    671,\n/**/\n    670,\n/**/\n    669,\n/**/\n    668,\n/**/\n    667,\n/**/\n    666,\n/**/\n    665,\n/**/\n    664,\n/**/\n    663,\n/**/\n    662,\n/**/\n    661,\n/**/\n    660,\n/**/\n    659,\n/**/\n    658,\n/**/\n    657,\n/**/\n    656,\n/**/\n    655,\n/**/\n    654,\n/**/\n    653,\n/**/\n    652,\n/**/\n    651,\n/**/\n    650,\n/**/\n    649,\n/**/\n    648,\n/**/\n    647,\n/**/\n    646,\n/**/\n    645,\n/**/\n    644,\n/**/\n    643,\n/**/\n    642,\n/**/\n    641,\n/**/\n    640,\n/**/\n    639,\n/**/\n    638,\n/**/\n    637,\n/**/\n    636,\n/**/\n    635,\n/**/\n    634,\n/**/\n    633,\n/**/\n    632,\n/**/\n    631,\n/**/\n    630,\n/**/\n    629,\n/**/\n    628,\n/**/\n    627,\n/**/\n    626,\n/**/\n    625,\n/**/\n    624,\n/**/\n    623,\n/**/\n    622,\n/**/\n    621,\n/**/\n    620,\n/**/\n    619,\n/**/\n    618,\n/**/\n    617,\n/**/\n    616,\n/**/\n    615,\n/**/\n    614,\n/**/\n    613,\n/**/\n    612,\n/**/\n    611,\n/**/\n    610,\n/**/\n    609,\n/**/\n    608,\n/**/\n    607,\n/**/\n    606,\n/**/\n    605,\n/**/\n    604,\n/**/\n    603,\n/**/\n    602,\n/**/\n    601,\n/**/\n    600,\n/**/\n    599,\n/**/\n    598,\n/**/\n    597,\n/**/\n    596,\n/**/\n    595,\n/**/\n    594,\n/**/\n    593,\n/**/\n    592,\n/**/\n    591,\n/**/\n    590,\n/**/\n    589,\n/**/\n    588,\n/**/\n    587,\n/**/\n    586,\n/**/\n    585,\n/**/\n    584,\n/**/\n    583,\n/**/\n    582,\n/**/\n    581,\n/**/\n    580,\n/**/\n    579,\n/**/\n    578,\n/**/\n    577,\n/**/\n    576,\n/**/\n    575,\n/**/\n    574,\n/**/\n    573,\n/**/\n    572,\n/**/\n    571,\n/**/\n    570,\n/**/\n    569,\n/**/\n    568,\n/**/\n    567,\n/**/\n    566,\n/**/\n    565,\n/**/\n    564,\n/**/\n    563,\n/**/\n    562,\n/**/\n    561,\n/**/\n    560,\n/**/\n    559,\n/**/\n    558,\n/**/\n    557,\n/**/\n    556,\n/**/\n    555,\n/**/\n    554,\n/**/\n    553,\n/**/\n    552,\n/**/\n    551,\n/**/\n    550,\n/**/\n    549,\n/**/\n    548,\n/**/\n    547,\n/**/\n    546,\n/**/\n    545,\n/**/\n    544,\n/**/\n    543,\n/**/\n    542,\n/**/\n    541,\n/**/\n    540,\n/**/\n    539,\n/**/\n    538,\n/**/\n    537,\n/**/\n    536,\n/**/\n    535,\n/**/\n    534,\n/**/\n    533,\n/**/\n    532,\n/**/\n    531,\n/**/\n    530,\n/**/\n    529,\n/**/\n    528,\n/**/\n    527,\n/**/\n    526,\n/**/\n    525,\n/**/\n    524,\n/**/\n    523,\n/**/\n    522,\n/**/\n    521,\n/**/\n    520,\n/**/\n    519,\n/**/\n    518,\n/**/\n    517,\n/**/\n    516,\n/**/\n    515,\n/**/\n    514,\n/**/\n    513,\n/**/\n    512,\n/**/\n    511,\n/**/\n    510,\n/**/\n    509,\n/**/\n    508,\n/**/\n    507,\n/**/\n    506,\n/**/\n    505,\n/**/\n    504,\n/**/\n    503,\n/**/\n    502,\n/**/\n    501,\n/**/\n    500,\n/**/\n    499,\n/**/\n    498,\n/**/\n    497,\n/**/\n    496,\n/**/\n    495,\n/**/\n    494,\n/**/\n    493,\n/**/\n    492,\n/**/\n    491,\n/**/\n    490,\n/**/\n    489,\n/**/\n    488,\n/**/\n    487,\n/**/\n    486,\n/**/\n    485,\n/**/\n    484,\n/**/\n    483,\n/**/\n    482,\n/**/\n    481,\n/**/\n    480,\n/**/\n    479,\n/**/\n    478,\n/**/\n    477,\n/**/\n    476,\n/**/\n    475,\n/**/\n    474,\n/**/\n    473,\n/**/\n    472,\n/**/\n    471,\n/**/\n    470,\n/**/\n    469,\n/**/\n    468,\n/**/\n    467,\n/**/\n    466,\n/**/\n    465,\n/**/\n    464,\n/**/\n    463,\n/**/\n    462,\n/**/\n    461,\n/**/\n    460,\n/**/\n    459,\n/**/\n    458,\n/**/\n    457,\n/**/\n    456,\n/**/\n    455,\n/**/\n    454,\n/**/\n    453,\n/**/\n    452,\n/**/\n    451,\n/**/\n    450,\n/**/\n    449,\n/**/\n    448,\n/**/\n    447,\n/**/\n    446,\n/**/\n    445,\n/**/\n    444,\n/**/\n    443,\n/**/\n    442,\n/**/\n    441,\n/**/\n    440,\n/**/\n    439,\n/**/\n    438,\n/**/\n    437,\n/**/\n    436,\n/**/\n    435,\n/**/\n    434,\n/**/\n    433,\n/**/\n    432,\n/**/\n    431,\n/**/\n    430,\n/**/\n    429,\n/**/\n    428,\n/**/\n    427,\n/**/\n    426,\n/**/\n    425,\n/**/\n    424,\n/**/\n    423,\n/**/\n    422,\n/**/\n    421,\n/**/\n    420,\n/**/\n    419,\n/**/\n    418,\n/**/\n    417,\n/**/\n    416,\n/**/\n    415,\n/**/\n    414,\n/**/\n    413,\n/**/\n    412,\n/**/\n    411,\n/**/\n    410,\n/**/\n    409,\n/**/\n    408,\n/**/\n    407,\n/**/\n    406,\n/**/\n    405,\n/**/\n    404,\n/**/\n    403,\n/**/\n    402,\n/**/\n    401,\n/**/\n    400,\n/**/\n    399,\n/**/\n    398,\n/**/\n    397,\n/**/\n    396,\n/**/\n    395,\n/**/\n    394,\n/**/\n    393,\n/**/\n    392,\n/**/\n    391,\n/**/\n    390,\n/**/\n    389,\n/**/\n    388,\n/**/\n    387,\n/**/\n    386,\n/**/\n    385,\n/**/\n    384,\n/**/\n    383,\n/**/\n    382,\n/**/\n    381,\n/**/\n    380,\n/**/\n    379,\n/**/\n    378,\n/**/\n    377,\n/**/\n    376,\n/**/\n    375,\n/**/\n    374,\n/**/\n    373,\n/**/\n    372,\n/**/\n    371,\n/**/\n    370,\n/**/\n    369,\n/**/\n    368,\n/**/\n    367,\n/**/\n    366,\n/**/\n    365,\n/**/\n    364,\n/**/\n    363,\n/**/\n    362,\n/**/\n    361,\n/**/\n    360,\n/**/\n    359,\n/**/\n    358,\n/**/\n    357,\n/**/\n    356,\n/**/\n    355,\n/**/\n    354,\n/**/\n    353,\n/**/\n    352,\n/**/\n    351,\n/**/\n    350,\n/**/\n    349,\n/**/\n    348,\n/**/\n    347,\n/**/\n    346,\n/**/\n    345,\n/**/\n    344,\n/**/\n    343,\n/**/\n    342,\n/**/\n    341,\n/**/\n    340,\n/**/\n    339,\n/**/\n    338,\n/**/\n    337,\n/**/\n    336,\n/**/\n    335,\n/**/\n    334,\n/**/\n    333,\n/**/\n    332,\n/**/\n    331,\n/**/\n    330,\n/**/\n    329,\n/**/\n    328,\n/**/\n    327,\n/**/\n    326,\n/**/\n    325,\n/**/\n    324,\n/**/\n    323,\n/**/\n    322,\n/**/\n    321,\n/**/\n    320,\n/**/\n    319,\n/**/\n    318,\n/**/\n    317,\n/**/\n    316,\n/**/\n    315,\n/**/\n    314,\n/**/\n    313,\n/**/\n    312,\n/**/\n    311,\n/**/\n    310,\n/**/\n    309,\n/**/\n    308,\n/**/\n    307,\n/**/\n    306,\n/**/\n    305,\n/**/\n    304,\n/**/\n    303,\n/**/\n    302,\n/**/\n    301,\n/**/\n    300,\n/**/\n    299,\n/**/\n    298,\n/**/\n    297,\n/**/\n    296,\n/**/\n    295,\n/**/\n    294,\n/**/\n    293,\n/**/\n    292,\n/**/\n    291,\n/**/\n    290,\n/**/\n    289,\n/**/\n    288,\n/**/\n    287,\n/**/\n    286,\n/**/\n    285,\n/**/\n    284,\n/**/\n    283,\n/**/\n    282,\n/**/\n    281,\n/**/\n    280,\n/**/\n    279,\n/**/\n    278,\n/**/\n    277,\n/**/\n    276,\n/**/\n    275,\n/**/\n    274,\n/**/\n    273,\n/**/\n    272,\n/**/\n    271,\n/**/\n    270,\n/**/\n    269,\n/**/\n    268,\n/**/\n    267,\n/**/\n    266,\n/**/\n    265,\n/**/\n    264,\n/**/\n    263,\n/**/\n    262,\n/**/\n    261,\n/**/\n    260,\n/**/\n    259,\n/**/\n    258,\n/**/\n    257,\n/**/\n    256,\n/**/\n    255,\n/**/\n    254,\n/**/\n    253,\n/**/\n    252,\n/**/\n    251,\n/**/\n    250,\n/**/\n    249,\n/**/\n    248,\n/**/\n    247,\n/**/\n    246,\n/**/\n    245,\n/**/\n    244,\n/**/\n    243,\n/**/\n    242,\n/**/\n    241,\n/**/\n    240,\n/**/\n    239,\n/**/\n    238,\n/**/\n    237,\n/**/\n    236,\n/**/\n    235,\n/**/\n    234,\n/**/\n    233,\n/**/\n    232,\n/**/\n    231,\n/**/\n    230,\n/**/\n    229,\n/**/\n    228,\n/**/\n    227,\n/**/\n    226,\n/**/\n    225,\n/**/\n    224,\n/**/\n    223,\n/**/\n    222,\n/**/\n    221,\n/**/\n    220,\n/**/\n    219,\n/**/\n    218,\n/**/\n    217,\n/**/\n    216,\n/**/\n    215,\n/**/\n    214,\n/**/\n    213,\n/**/\n    212,\n/**/\n    211,\n/**/\n    210,\n/**/\n    209,\n/**/\n    208,\n/**/\n    207,\n/**/\n    206,\n/**/\n    205,\n/**/\n    204,\n/**/\n    203,\n/**/\n    202,\n/**/\n    201,\n/**/\n    200,\n/**/\n    199,\n/**/\n    198,\n/**/\n    197,\n/**/\n    196,\n/**/\n    195,\n/**/\n    194,\n/**/\n    193,\n/**/\n    192,\n/**/\n    191,\n/**/\n    190,\n/**/\n    189,\n/**/\n    188,\n/**/\n    187,\n/**/\n    186,\n/**/\n    185,\n/**/\n    184,\n/**/\n    183,\n/**/\n    182,\n/**/\n    181,\n/**/\n    180,\n/**/\n    179,\n/**/\n    178,\n/**/\n    177,\n/**/\n    176,\n/**/\n    175,\n/**/\n    174,\n/**/\n    173,\n/**/\n    172,\n/**/\n    171,\n/**/\n    170,\n/**/\n    169,\n/**/\n    168,\n/**/\n    167,\n/**/\n    166,\n/**/\n    165,\n/**/\n    164,\n/**/\n    163,\n/**/\n    162,\n/**/\n    161,\n/**/\n    160,\n/**/\n    159,\n/**/\n    158,\n/**/\n    157,\n/**/\n    156,\n/**/\n    155,\n/**/\n    154,\n/**/\n    153,\n/**/\n    152,\n/**/\n    151,\n/**/\n    150,\n/**/\n    149,\n/**/\n    148,\n/**/\n    147,\n/**/\n    146,\n/**/\n    145,\n/**/\n    144,\n/**/\n    143,\n/**/\n    142,\n/**/\n    141,\n/**/\n    140,\n/**/\n    139,\n/**/\n    138,\n/**/\n    137,\n/**/\n    136,\n/**/\n    135,\n/**/\n    134,\n/**/\n    133,\n/**/\n    132,\n/**/\n    131,\n/**/\n    130,\n/**/\n    129,\n/**/\n    128,\n/**/\n    127,\n/**/\n    126,\n/**/\n    125,\n/**/\n    124,\n/**/\n    123,\n/**/\n    122,\n/**/\n    121,\n/**/\n    120,\n/**/\n    119,\n/**/\n    118,\n/**/\n    117,\n/**/\n    116,\n/**/\n    115,\n/**/\n    114,\n/**/\n    113,\n/**/\n    112,\n/**/\n    111,\n/**/\n    110,\n/**/\n    109,\n/**/\n    108,\n/**/\n    107,\n/**/\n    106,\n/**/\n    105,\n/**/\n    104,\n/**/\n    103,\n/**/\n    102,\n/**/\n    101,\n/**/\n    100,\n/**/\n    99,\n/**/\n    98,\n/**/\n    97,\n/**/\n    96,\n/**/\n    95,\n/**/\n    94,\n/**/\n    93,\n/**/\n    92,\n/**/\n    91,\n/**/\n    90,\n/**/\n    89,\n/**/\n    88,\n/**/\n    87,\n/**/\n    86,\n/**/\n    85,\n/**/\n    84,\n/**/\n    83,\n/**/\n    82,\n/**/\n    81,\n/**/\n    80,\n/**/\n    79,\n/**/\n    78,\n/**/\n    77,\n/**/\n    76,\n/**/\n    75,\n/**/\n    74,\n/**/\n    73,\n/**/\n    72,\n/**/\n    71,\n/**/\n    70,\n/**/\n    69,\n/**/\n    68,\n/**/\n    67,\n/**/\n    66,\n/**/\n    65,\n/**/\n    64,\n/**/\n    63,\n/**/\n    62,\n/**/\n    61,\n/**/\n    60,\n/**/\n    59,\n/**/\n    58,\n/**/\n    57,\n/**/\n    56,\n/**/\n    55,\n/**/\n    54,\n/**/\n    53,\n/**/\n    52,\n/**/\n    51,\n/**/\n    50,\n/**/\n    49,\n/**/\n    48,\n/**/\n    47,\n/**/\n    46,\n/**/\n    45,\n/**/\n    44,\n/**/\n    43,\n/**/\n    42,\n/**/\n    41,\n/**/\n    40,\n/**/\n    39,\n/**/\n    38,\n/**/\n    37,\n/**/\n    36,\n/**/\n    35,\n/**/\n    34,\n/**/\n    33,\n/**/\n    32,\n/**/\n    31,\n/**/\n    30,\n/**/\n    29,\n/**/\n    28,\n/**/\n    27,\n/**/\n    26,\n/**/\n    25,\n/**/\n    24,\n/**/\n    23,\n/**/\n    22,\n/**/\n    21,\n/**/\n    20,\n/**/\n    19,\n/**/\n    18,\n/**/\n    17,\n/**/\n    16,\n/**/\n    15,\n/**/\n    14,\n/**/\n    13,\n/**/\n    12,\n/**/\n    11,\n/**/\n    10,\n/**/\n    9,\n/**/\n    8,\n/**/\n    7,\n/**/\n    6,\n/**/\n    5,\n/**/\n    4,\n/**/\n    3,\n/**/\n    2,\n/**/\n    1,\n/**/\n    0\n};\n\n/*\n * Place to put a short description when adding a feature with a patch.\n * Keep it short, e.g.,: \"relative numbers\", \"persistent undo\".\n * Also add a comment marker to separate the lines.\n * See the official Vim patches for the diff format: It must use a context of\n * one line only.  Create it by hand or use \"diff -C2\" and edit the patch.\n */\nstatic char *(extra_patches[]) =\n{   /* Add your patch description below this line */\n/**/\n    NULL\n};\n\n    int\nhighest_patch(void)\n{\n    // this relies on the highest patch number to be the first entry\n    return included_patches[0];\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * Return TRUE if patch \"n\" has been included.\n */\n    int\nhas_patch(int n)\n{\n    int\t\th, m, l;\n\n    // Perform a binary search.\n    l = 0;\n    h = (int)ARRAY_LENGTH(included_patches) - 1;\n    for (;;)\n    {\n\tm = (l + h) / 2;\n\tif (included_patches[m] == n)\n\t    return TRUE;\n\tif (l == h)\n\t    break;\n\tif (included_patches[m] < n)\n\t    h = m;\n\telse\n\t    l = m + 1;\n    }\n    return FALSE;\n}\n#endif\n\n    void\nex_version(exarg_T *eap)\n{\n    /*\n     * Ignore a \":version 9.99\" command.\n     */\n    if (*eap->arg == NUL)\n    {\n\tmsg_putchar('\\n');\n\tlist_version();\n    }\n}\n\n/*\n * Output a string for the version message.  If it's going to wrap, output a\n * newline, unless the message is too long to fit on the screen anyway.\n * When \"wrap\" is TRUE wrap the string in [].\n */\n    static void\nversion_msg_wrap(char_u *s, int wrap)\n{\n    int\t\tlen = vim_strsize(s) + (wrap ? 2 : 0);\n\n    if (!got_int && len < (int)Columns && msg_col + len >= (int)Columns\n\t\t\t\t\t\t\t\t&& *s != '\\n')\n\tmsg_putchar('\\n');\n    if (!got_int)\n    {\n\tif (wrap)\n\t    msg_puts(\"[\");\n\tmsg_puts((char *)s);\n\tif (wrap)\n\t    msg_puts(\"]\");\n    }\n}\n\n    static void\nversion_msg(char *s)\n{\n    version_msg_wrap((char_u *)s, FALSE);\n}\n\n/*\n * List all features aligned in columns, dictionary style.\n */\n    static void\nlist_features(void)\n{\n    list_in_columns((char_u **)features, -1, -1);\n}\n\n/*\n * List string items nicely aligned in columns.\n * When \"size\" is < 0 then the last entry is marked with NULL.\n * The entry with index \"current\" is inclosed in [].\n */\n    void\nlist_in_columns(char_u **items, int size, int current)\n{\n    int\t\ti;\n    int\t\tncol;\n    int\t\tnrow;\n    int\t\tcur_row = 1;\n    int\t\titem_count = 0;\n    int\t\twidth = 0;\n#ifdef FEAT_SYN_HL\n    int\t\tuse_highlight = (items == (char_u **)features);\n#endif\n\n    // Find the length of the longest item, use that + 1 as the column\n    // width.\n    for (i = 0; size < 0 ? items[i] != NULL : i < size; ++i)\n    {\n\tint l = vim_strsize(items[i]) + (i == current ? 2 : 0);\n\n\tif (l > width)\n\t    width = l;\n\t++item_count;\n    }\n    width += 1;\n\n    if (Columns < width)\n    {\n\t// Not enough screen columns - show one per line\n\tfor (i = 0; i < item_count; ++i)\n\t{\n\t    version_msg_wrap(items[i], i == current);\n\t    if (msg_col > 0 && i < item_count - 1)\n\t\tmsg_putchar('\\n');\n\t}\n\treturn;\n    }\n\n    // The rightmost column doesn't need a separator.\n    // Sacrifice it to fit in one more column if possible.\n    ncol = (int) (Columns + 1) / width;\n    nrow = item_count / ncol + ((item_count % ncol) ? 1 : 0);\n\n    // \"i\" counts columns then rows.  \"idx\" counts rows then columns.\n    for (i = 0; !got_int && i < nrow * ncol; ++i)\n    {\n\tint idx = (i / ncol) + (i % ncol) * nrow;\n\n\tif (idx < item_count)\n\t{\n\t    int last_col = (i + 1) % ncol == 0;\n\n\t    if (idx == current)\n\t\tmsg_putchar('[');\n#ifdef FEAT_SYN_HL\n\t    if (use_highlight && items[idx][0] == '-')\n\t\tmsg_puts_attr((char *)items[idx], HL_ATTR(HLF_W));\n\t    else\n#endif\n\t\tmsg_puts((char *)items[idx]);\n\t    if (idx == current)\n\t\tmsg_putchar(']');\n\t    if (last_col)\n\t    {\n\t\tif (msg_col > 0 && cur_row < nrow)\n\t\t    msg_putchar('\\n');\n\t\t++cur_row;\n\t    }\n\t    else\n\t    {\n\t\twhile (msg_col % width)\n\t\t    msg_putchar(' ');\n\t    }\n\t}\n\telse\n\t{\n\t    // this row is out of items, thus at the end of the row\n\t    if (msg_col > 0)\n\t    {\n\t\tif (cur_row < nrow)\n\t\t    msg_putchar('\\n');\n\t\t++cur_row;\n\t    }\n\t}\n    }\n}\n\n    void\nlist_version(void)\n{\n    int\t\ti;\n    int\t\tfirst;\n    char\t*s = \"\";\n\n    /*\n     * When adding features here, don't forget to update the list of\n     * internal variables in eval.c!\n     */\n    init_longVersion();\n    msg(longVersion);\n#ifdef MSWIN\n# ifdef FEAT_GUI_MSWIN\n#  ifdef VIMDLL\n#   ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit GUI/console version\"));\n#   else\n    msg_puts(_(\"\\nMS-Windows 32-bit GUI/console version\"));\n#   endif\n#  else\n#   ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit GUI version\"));\n#   else\n    msg_puts(_(\"\\nMS-Windows 32-bit GUI version\"));\n#   endif\n#  endif\n#  ifdef FEAT_OLE\n    msg_puts(_(\" with OLE support\"));\n#  endif\n# else\n#  ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit console version\"));\n#  else\n    msg_puts(_(\"\\nMS-Windows 32-bit console version\"));\n#  endif\n# endif\n#endif\n#if defined(MACOS_X)\n# if defined(MACOS_X_DARWIN)\n    msg_puts(_(\"\\nmacOS version\"));\n# else\n    msg_puts(_(\"\\nmacOS version w/o darwin feat.\"));\n# endif\n# if defined(__arm64__)\n    msg_puts(\" - arm64\");\n# elif defined(__x86_64__)\n    msg_puts(\" - x86_64\");\n# endif\n#endif\n\n#ifdef VMS\n    msg_puts(_(\"\\nOpenVMS version\"));\n# ifdef HAVE_PATHDEF\n    if (*compiled_arch != NUL)\n    {\n\tmsg_puts(\" - \");\n\tmsg_puts((char *)compiled_arch);\n    }\n# endif\n\n#endif\n\n    // Print the list of patch numbers if there is at least one.\n    // Print a range when patches are consecutive: \"1-10, 12, 15-40, 42-45\"\n    if (included_patches[0] != 0)\n    {\n\tmsg_puts(_(\"\\nIncluded patches: \"));\n\tfirst = -1;\n\ti = (int)ARRAY_LENGTH(included_patches) - 1;\n\twhile (--i >= 0)\n\t{\n\t    if (first < 0)\n\t\tfirst = included_patches[i];\n\t    if (i == 0 || included_patches[i - 1] != included_patches[i] + 1)\n\t    {\n\t\tmsg_puts(s);\n\t\ts = \", \";\n\t\tmsg_outnum((long)first);\n\t\tif (first != included_patches[i])\n\t\t{\n\t\t    msg_puts(\"-\");\n\t\t    msg_outnum((long)included_patches[i]);\n\t\t}\n\t\tfirst = -1;\n\t    }\n\t}\n    }\n\n    // Print the list of extra patch descriptions if there is at least one.\n    if (extra_patches[0] != NULL)\n    {\n\tmsg_puts(_(\"\\nExtra patches: \"));\n\ts = \"\";\n\tfor (i = 0; extra_patches[i] != NULL; ++i)\n\t{\n\t    msg_puts(s);\n\t    s = \", \";\n\t    msg_puts(extra_patches[i]);\n\t}\n    }\n\n#ifdef MODIFIED_BY\n    msg_puts(\"\\n\");\n    msg_puts(_(\"Modified by \"));\n    msg_puts(MODIFIED_BY);\n#endif\n\n#ifdef HAVE_PATHDEF\n    if (*compiled_user != NUL || *compiled_sys != NUL)\n    {\n\tmsg_puts(_(\"\\nCompiled \"));\n\tif (*compiled_user != NUL)\n\t{\n\t    msg_puts(_(\"by \"));\n\t    msg_puts((char *)compiled_user);\n\t}\n\tif (*compiled_sys != NUL)\n\t{\n\t    msg_puts(\"@\");\n\t    msg_puts((char *)compiled_sys);\n\t}\n    }\n#endif\n\n#if defined(FEAT_HUGE)\n    msg_puts(_(\"\\nHuge version \"));\n#elif defined(FEAT_NORMAL)\n    msg_puts(_(\"\\nNormal version \"));\n#else\n    msg_puts(_(\"\\nTiny version \"));\n#endif\n#if !defined(FEAT_GUI)\n    msg_puts(_(\"without GUI.\"));\n#elif defined(FEAT_GUI_GTK)\n# if defined(USE_GTK3)\n    msg_puts(_(\"with GTK3 GUI.\"));\n# elif defined(FEAT_GUI_GNOME)\n     msg_puts(_(\"with GTK2-GNOME GUI.\"));\n# else\n     msg_puts(_(\"with GTK2 GUI.\"));\n# endif\n#elif defined(FEAT_GUI_MOTIF)\n    msg_puts(_(\"with X11-Motif GUI.\"));\n#elif defined(FEAT_GUI_HAIKU)\n    msg_puts(_(\"with Haiku GUI.\"));\n#elif defined(FEAT_GUI_PHOTON)\n    msg_puts(_(\"with Photon GUI.\"));\n#elif defined(MSWIN)\n    msg_puts(_(\"with GUI.\"));\n#endif\n    version_msg(_(\"  Features included (+) or not (-):\\n\"));\n\n    list_features();\n    if (msg_col > 0)\n\tmsg_putchar('\\n');\n\n#ifdef SYS_VIMRC_FILE\n    version_msg(_(\"   system vimrc file: \\\"\"));\n    version_msg(SYS_VIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE\n    version_msg(_(\"     user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE2\n    version_msg(_(\" 2nd user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE2);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE3\n    version_msg(_(\" 3rd user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE3);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_EXRC_FILE\n    version_msg(_(\"      user exrc file: \\\"\"));\n    version_msg(USR_EXRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_EXRC_FILE2\n    version_msg(_(\"  2nd user exrc file: \\\"\"));\n    version_msg(USR_EXRC_FILE2);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef FEAT_GUI\n# ifdef SYS_GVIMRC_FILE\n    version_msg(_(\"  system gvimrc file: \\\"\"));\n    version_msg(SYS_GVIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n# endif\n    version_msg(_(\"    user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n# ifdef USR_GVIMRC_FILE2\n    version_msg(_(\"2nd user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE2);\n    version_msg(\"\\\"\\n\");\n# endif\n# ifdef USR_GVIMRC_FILE3\n    version_msg(_(\"3rd user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE3);\n    version_msg(\"\\\"\\n\");\n# endif\n#endif\n    version_msg(_(\"       defaults file: \\\"\"));\n    version_msg(VIM_DEFAULTS_FILE);\n    version_msg(\"\\\"\\n\");\n#ifdef FEAT_GUI\n# ifdef SYS_MENU_FILE\n    version_msg(_(\"    system menu file: \\\"\"));\n    version_msg(SYS_MENU_FILE);\n    version_msg(\"\\\"\\n\");\n# endif\n#endif\n#ifdef HAVE_PATHDEF\n    if (*default_vim_dir != NUL)\n    {\n\tversion_msg(_(\"  fall-back for $VIM: \\\"\"));\n\tversion_msg((char *)default_vim_dir);\n\tversion_msg(\"\\\"\\n\");\n    }\n    if (*default_vimruntime_dir != NUL)\n    {\n\tversion_msg(_(\" f-b for $VIMRUNTIME: \\\"\"));\n\tversion_msg((char *)default_vimruntime_dir);\n\tversion_msg(\"\\\"\\n\");\n    }\n    version_msg(_(\"Compilation: \"));\n    version_msg((char *)all_cflags);\n    version_msg(\"\\n\");\n#ifdef VMS\n    if (*compiler_version != NUL)\n    {\n\tversion_msg(_(\"Compiler: \"));\n\tversion_msg((char *)compiler_version);\n\tversion_msg(\"\\n\");\n    }\n#endif\n    version_msg(_(\"Linking: \"));\n    version_msg((char *)all_lflags);\n#endif\n#ifdef DEBUG\n    version_msg(\"\\n\");\n    version_msg(_(\"  DEBUG BUILD\"));\n#endif\n}\n\nstatic void do_intro_line(int row, char_u *mesg, int add_version, int attr);\nstatic void intro_message(int colon);\n\n/*\n * Show the intro message when not editing a file.\n */\n    void\nmaybe_intro_message(void)\n{\n    if (BUFEMPTY()\n\t    && curbuf->b_fname == NULL\n\t    && firstwin->w_next == NULL\n\t    && vim_strchr(p_shm, SHM_INTRO) == NULL)\n\tintro_message(FALSE);\n}\n\n/*\n * Give an introductory message about Vim.\n * Only used when starting Vim on an empty file, without a file name.\n * Or with the \":intro\" command (for Sven :-).\n */\n    static void\nintro_message(\n    int\t\tcolon)\t\t// TRUE for \":intro\"\n{\n    int\t\ti;\n    int\t\trow;\n    int\t\tblanklines;\n    int\t\tsponsor;\n    char\t*p;\n    static char\t*(lines[]) =\n    {\n\tN_(\"VIM - Vi IMproved\"),\n\t\"\",\n\tN_(\"version \"),\n\tN_(\"by Bram Moolenaar et al.\"),\n#ifdef MODIFIED_BY\n\t\" \",\n#endif\n\tN_(\"Vim is open source and freely distributable\"),\n\t\"\",\n\tN_(\"Help poor children in Uganda!\"),\n\tN_(\"type  :help iccf<Enter>       for information \"),\n\t\"\",\n\tN_(\"type  :q<Enter>               to exit         \"),\n\tN_(\"type  :help<Enter>  or  <F1>  for on-line help\"),\n\tN_(\"type  :help version9<Enter>   for version info\"),\n\tNULL,\n\t\"\",\n\tN_(\"Running in Vi compatible mode\"),\n\tN_(\"type  :set nocp<Enter>        for Vim defaults\"),\n\tN_(\"type  :help cp-default<Enter> for info on this\"),\n    };\n#ifdef FEAT_GUI\n    static char\t*(gui_lines[]) =\n    {\n\tNULL,\n\tNULL,\n\tNULL,\n\tNULL,\n#ifdef MODIFIED_BY\n\tNULL,\n#endif\n\tNULL,\n\tNULL,\n\tNULL,\n\tN_(\"menu  Help->Orphans           for information    \"),\n\tNULL,\n\tN_(\"Running modeless, typed text is inserted\"),\n\tN_(\"menu  Edit->Global Settings->Toggle Insert Mode  \"),\n\tN_(\"                              for two modes      \"),\n\tNULL,\n\tNULL,\n\tNULL,\n\tN_(\"menu  Edit->Global Settings->Toggle Vi Compatible\"),\n\tN_(\"                              for Vim defaults   \"),\n    };\n#endif\n\n    // blanklines = screen height - # message lines\n    blanklines = (int)Rows - (ARRAY_LENGTH(lines) - 1);\n    if (!p_cp)\n\tblanklines += 4;  // add 4 for not showing \"Vi compatible\" message\n\n    // Don't overwrite a statusline.  Depends on 'cmdheight'.\n    if (p_ls > 1)\n\tblanklines -= Rows - topframe->fr_height;\n    if (blanklines < 0)\n\tblanklines = 0;\n\n    // Show the sponsor and register message one out of four times, the Uganda\n    // message two out of four times.\n    sponsor = (int)time(NULL);\n    sponsor = ((sponsor & 2) == 0) - ((sponsor & 4) == 0);\n\n    // start displaying the message lines after half of the blank lines\n    row = blanklines / 2;\n    if ((row >= 2 && Columns >= 50) || colon)\n    {\n\tfor (i = 0; i < (int)ARRAY_LENGTH(lines); ++i)\n\t{\n\t    p = lines[i];\n#ifdef FEAT_GUI\n\t    if (p_im && gui.in_use && gui_lines[i] != NULL)\n\t\tp = gui_lines[i];\n#endif\n\t    if (p == NULL)\n\t    {\n\t\tif (!p_cp)\n\t\t    break;\n\t\tcontinue;\n\t    }\n\t    if (sponsor != 0)\n\t    {\n\t\tif (strstr(p, \"children\") != NULL)\n\t\t    p = sponsor < 0\n\t\t\t? N_(\"Sponsor Vim development!\")\n\t\t\t: N_(\"Become a registered Vim user!\");\n\t\telse if (strstr(p, \"iccf\") != NULL)\n\t\t    p = sponsor < 0\n\t\t\t? N_(\"type  :help sponsor<Enter>    for information \")\n\t\t\t: N_(\"type  :help register<Enter>   for information \");\n\t\telse if (strstr(p, \"Orphans\") != NULL)\n\t\t    p = N_(\"menu  Help->Sponsor/Register  for information    \");\n\t    }\n\t    if (*p != NUL)\n\t\tdo_intro_line(row, (char_u *)_(p), i == 2, 0);\n\t    ++row;\n\t}\n    }\n\n    // Make the wait-return message appear just below the text.\n    if (colon)\n\tmsg_row = row;\n}\n\n    static void\ndo_intro_line(\n    int\t\trow,\n    char_u\t*mesg,\n    int\t\tadd_version,\n    int\t\tattr)\n{\n    char_u\tvers[20];\n    int\t\tcol;\n    char_u\t*p;\n    int\t\tl;\n    int\t\tclen;\n#ifdef MODIFIED_BY\n# define MODBY_LEN 150\n    char_u\tmodby[MODBY_LEN];\n\n    if (*mesg == ' ')\n    {\n\tvim_strncpy(modby, (char_u *)_(\"Modified by \"), MODBY_LEN - 1);\n\tl = (int)STRLEN(modby);\n\tvim_strncpy(modby + l, (char_u *)MODIFIED_BY, MODBY_LEN - l - 1);\n\tmesg = modby;\n    }\n#endif\n\n    // Center the message horizontally.\n    col = vim_strsize(mesg);\n    if (add_version)\n    {\n\tSTRCPY(vers, mediumVersion);\n\tif (highest_patch())\n\t{\n\t    // Check for 9.9x or 9.9xx, alpha/beta version\n\t    if (isalpha((int)vers[3]))\n\t    {\n\t\tint len = (isalpha((int)vers[4])) ? 5 : 4;\n\t\tsprintf((char *)vers + len, \".%d%s\", highest_patch(),\n\t\t\t\t\t\t\t mediumVersion + len);\n\t    }\n\t    else\n\t\tsprintf((char *)vers + 3, \".%d\", highest_patch());\n\t}\n\tcol += (int)STRLEN(vers);\n    }\n    col = (Columns - col) / 2;\n    if (col < 0)\n\tcol = 0;\n\n    // Split up in parts to highlight <> items differently.\n    for (p = mesg; *p != NUL; p += l)\n    {\n\tclen = 0;\n\tfor (l = 0; p[l] != NUL\n\t\t\t && (l == 0 || (p[l] != '<' && p[l - 1] != '>')); ++l)\n\t{\n\t    if (has_mbyte)\n\t    {\n\t\tclen += ptr2cells(p + l);\n\t\tl += (*mb_ptr2len)(p + l) - 1;\n\t    }\n\t    else\n\t\tclen += byte2cells(p[l]);\n\t}\n\tscreen_puts_len(p, l, row, col, *p == '<' ? HL_ATTR(HLF_8) : attr);\n\tcol += clen;\n    }\n\n    // Add the version number to the version line.\n    if (add_version)\n\tscreen_puts(vers, row, col, 0);\n}\n\n/*\n * \":intro\": clear screen, display intro screen and wait for return.\n */\n    void\nex_intro(exarg_T *eap UNUSED)\n{\n    screenclear();\n    intro_message(TRUE);\n    wait_return(TRUE);\n}\n"], "fixing_code": ["/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n/*\n * eval.c: Expression evaluation.\n */\n#define USING_FLOAT_STUFF\n\n#include \"vim.h\"\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n\n#ifdef VMS\n# include <float.h>\n#endif\n\n#define NAMESPACE_CHAR\t(char_u *)\"abglstvw\"\n\n/*\n * When recursively copying lists and dicts we need to remember which ones we\n * have done to avoid endless recursiveness.  This unique ID is used for that.\n * The last bit is used for previous_funccal, ignored when comparing.\n */\nstatic int current_copyID = 0;\n\nstatic int eval2(char_u **arg, typval_T *rettv, evalarg_T *evalarg);\nstatic int eval3(char_u **arg, typval_T *rettv, evalarg_T *evalarg);\nstatic int eval4(char_u **arg, typval_T *rettv, evalarg_T *evalarg);\nstatic int eval5(char_u **arg, typval_T *rettv, evalarg_T *evalarg);\nstatic int eval6(char_u **arg, typval_T *rettv, evalarg_T *evalarg);\nstatic int eval7(char_u **arg, typval_T *rettv, evalarg_T *evalarg, int want_string);\nstatic int eval8(char_u **arg, typval_T *rettv, evalarg_T *evalarg, int want_string);\nstatic int eval9(char_u **arg, typval_T *rettv, evalarg_T *evalarg, int want_string);\nstatic int eval9_leader(typval_T *rettv, int numeric_only, char_u *start_leader, char_u **end_leaderp);\n\nstatic int free_unref_items(int copyID);\nstatic char_u *make_expanded_name(char_u *in_start, char_u *expr_start, char_u *expr_end, char_u *in_end);\n\n/*\n * Return \"n1\" divided by \"n2\", taking care of dividing by zero.\n * If \"failed\" is not NULL set it to TRUE when dividing by zero fails.\n */\n\tvarnumber_T\nnum_divide(varnumber_T n1, varnumber_T n2, int *failed)\n{\n    varnumber_T\tresult;\n\n    if (n2 == 0)\n    {\n\tif (in_vim9script())\n\t{\n\t    emsg(_(e_divide_by_zero));\n\t    if (failed != NULL)\n\t\t*failed = TRUE;\n\t}\n\tif (n1 == 0)\n\t    result = VARNUM_MIN; // similar to NaN\n\telse if (n1 < 0)\n\t    result = -VARNUM_MAX;\n\telse\n\t    result = VARNUM_MAX;\n    }\n    else if (n1 == VARNUM_MIN && n2 == -1)\n    {\n\t// specific case: trying to do VARNUM_MIN / -1 results in a positive\n\t// number that doesn't fit in varnumber_T and causes an FPE\n\tresult = VARNUM_MAX;\n    }\n    else\n\tresult = n1 / n2;\n\n    return result;\n}\n\n/*\n * Return \"n1\" modulus \"n2\", taking care of dividing by zero.\n * If \"failed\" is not NULL set it to TRUE when dividing by zero fails.\n */\n\tvarnumber_T\nnum_modulus(varnumber_T n1, varnumber_T n2, int *failed)\n{\n    if (n2 == 0 && in_vim9script())\n    {\n\temsg(_(e_divide_by_zero));\n\tif (failed != NULL)\n\t    *failed = TRUE;\n    }\n    return (n2 == 0) ? 0 : (n1 % n2);\n}\n\n/*\n * Initialize the global and v: variables.\n */\n    void\neval_init(void)\n{\n    evalvars_init();\n    func_init();\n}\n\n#if defined(EXITFREE) || defined(PROTO)\n    void\neval_clear(void)\n{\n    evalvars_clear();\n    free_scriptnames();  // must come after evalvars_clear().\n    free_locales();\n\n    // autoloaded script names\n    free_autoload_scriptnames();\n\n    // unreferenced lists and dicts\n    (void)garbage_collect(FALSE);\n\n    // functions not garbage collected\n    free_all_functions();\n}\n#endif\n\n    void\nfill_evalarg_from_eap(evalarg_T *evalarg, exarg_T *eap, int skip)\n{\n    init_evalarg(evalarg);\n    evalarg->eval_flags = skip ? 0 : EVAL_EVALUATE;\n\n    if (eap == NULL)\n\treturn;\n\n    evalarg->eval_cstack = eap->cstack;\n    if (sourcing_a_script(eap) || eap->getline == get_list_line)\n    {\n\tevalarg->eval_getline = eap->getline;\n\tevalarg->eval_cookie = eap->cookie;\n    }\n}\n\n/*\n * Top level evaluation function, returning a boolean.\n * Sets \"error\" to TRUE if there was an error.\n * Return TRUE or FALSE.\n */\n    int\neval_to_bool(\n    char_u\t*arg,\n    int\t\t*error,\n    exarg_T\t*eap,\n    int\t\tskip,\t    // only parse, don't execute\n    int\t\tuse_simple_function)\n{\n    typval_T\ttv;\n    varnumber_T\tretval = FALSE;\n    evalarg_T\tevalarg;\n    int\t\tr;\n\n    fill_evalarg_from_eap(&evalarg, eap, skip);\n\n    if (skip)\n\t++emsg_skip;\n    if (use_simple_function)\n\tr = eval0_simple_funccal(arg, &tv, eap, &evalarg);\n    else\n\tr = eval0(arg, &tv, eap, &evalarg);\n    if (r == FAIL)\n\t*error = TRUE;\n    else\n    {\n\t*error = FALSE;\n\tif (!skip)\n\t{\n\t    if (in_vim9script())\n\t\tretval = tv_get_bool_chk(&tv, error);\n\t    else\n\t\tretval = (tv_get_number_chk(&tv, error) != 0);\n\t    clear_tv(&tv);\n\t}\n    }\n    if (skip)\n\t--emsg_skip;\n    clear_evalarg(&evalarg, eap);\n\n    return (int)retval;\n}\n\n/*\n * Call eval1() and give an error message if not done at a lower level.\n */\n    static int\neval1_emsg(char_u **arg, typval_T *rettv, exarg_T *eap)\n{\n    char_u\t*start = *arg;\n    int\t\tret;\n    int\t\tdid_emsg_before = did_emsg;\n    int\t\tcalled_emsg_before = called_emsg;\n    evalarg_T\tevalarg;\n\n    fill_evalarg_from_eap(&evalarg, eap, eap != NULL && eap->skip);\n\n    ret = eval1(arg, rettv, &evalarg);\n    if (ret == FAIL)\n    {\n\t// Report the invalid expression unless the expression evaluation has\n\t// been cancelled due to an aborting error, an interrupt, or an\n\t// exception, or we already gave a more specific error.\n\t// Also check called_emsg for when using assert_fails().\n\tif (!aborting() && did_emsg == did_emsg_before\n\t\t\t\t\t  && called_emsg == called_emsg_before)\n\t    semsg(_(e_invalid_expression_str), start);\n    }\n    clear_evalarg(&evalarg, eap);\n    return ret;\n}\n\n/*\n * Return whether a typval is a valid expression to pass to eval_expr_typval()\n * or eval_expr_to_bool().  An empty string returns FALSE;\n */\n    int\neval_expr_valid_arg(typval_T *tv)\n{\n    return tv->v_type != VAR_UNKNOWN\n\t    && (tv->v_type != VAR_STRING\n\t\t  || (tv->vval.v_string != NULL && *tv->vval.v_string != NUL));\n}\n\n/*\n * When calling eval_expr_typval() many times we only need one funccall_T.\n * Returns NULL when no funccall_T is to be used.\n * When returning non-NULL remove_funccal() must be called later.\n */\n    funccall_T *\neval_expr_get_funccal(typval_T *expr, typval_T *rettv)\n{\n    if (expr->v_type != VAR_PARTIAL)\n\treturn NULL;\n\n    partial_T *partial = expr->vval.v_partial;\n    if (partial == NULL)\n\treturn NULL;\n    if (partial->pt_func == NULL\n\t    || partial->pt_func->uf_def_status == UF_NOT_COMPILED)\n\treturn NULL;\n\n    return create_funccal(partial->pt_func, rettv);\n}\n\n/*\n * Evaluate an expression, which can be a function, partial or string.\n * Pass arguments \"argv[argc]\".\n * \"fc_arg\" is from eval_expr_get_funccal() or NULL;\n * Return the result in \"rettv\" and OK or FAIL.\n */\n    int\neval_expr_typval(\n\ttypval_T    *expr,\n\ttypval_T    *argv,\n\tint\t    argc,\n\tfunccall_T  *fc_arg,\n\ttypval_T    *rettv)\n{\n    char_u\t*s;\n    char_u\tbuf[NUMBUFLEN];\n    funcexe_T\tfuncexe;\n\n    if (expr->v_type == VAR_FUNC)\n    {\n\ts = expr->vval.v_string;\n\tif (s == NULL || *s == NUL)\n\t    return FAIL;\n\tCLEAR_FIELD(funcexe);\n\tfuncexe.fe_evaluate = TRUE;\n\tif (call_func(s, -1, rettv, argc, argv, &funcexe) == FAIL)\n\t    return FAIL;\n    }\n    else if (expr->v_type == VAR_PARTIAL)\n    {\n\tpartial_T   *partial = expr->vval.v_partial;\n\n\tif (partial == NULL)\n\t    return FAIL;\n\n\tif (partial->pt_func != NULL\n\t\t\t  && partial->pt_func->uf_def_status != UF_NOT_COMPILED)\n\t{\n\t    funccall_T\t*fc = fc_arg != NULL ? fc_arg\n\t\t\t\t     : create_funccal(partial->pt_func, rettv);\n\t    int\t\tr;\n\n\t    if (fc == NULL)\n\t\treturn FAIL;\n\n\t    // Shortcut to call a compiled function with minimal overhead.\n\t    r = call_def_function(partial->pt_func, argc, argv,\n\t\t\t\t    DEF_USE_PT_ARGV, partial, NULL, fc, rettv);\n\t    if (fc_arg == NULL)\n\t\tremove_funccal();\n\t    if (r == FAIL)\n\t\treturn FAIL;\n\t}\n\telse\n\t{\n\t    s = partial_name(partial);\n\t    if (s == NULL || *s == NUL)\n\t\treturn FAIL;\n\t    CLEAR_FIELD(funcexe);\n\t    funcexe.fe_evaluate = TRUE;\n\t    funcexe.fe_partial = partial;\n\t    if (call_func(s, -1, rettv, argc, argv, &funcexe) == FAIL)\n\t\treturn FAIL;\n\t}\n    }\n    else if (expr->v_type == VAR_INSTR)\n    {\n\treturn exe_typval_instr(expr, rettv);\n    }\n    else\n    {\n\ts = tv_get_string_buf_chk_strict(expr, buf, in_vim9script());\n\tif (s == NULL)\n\t    return FAIL;\n\ts = skipwhite(s);\n\tif (eval1_emsg(&s, rettv, NULL) == FAIL)\n\t    return FAIL;\n\tif (*skipwhite(s) != NUL)  // check for trailing chars after expr\n\t{\n\t    clear_tv(rettv);\n\t    semsg(_(e_invalid_expression_str), s);\n\t    return FAIL;\n\t}\n    }\n    return OK;\n}\n\n/*\n * Like eval_to_bool() but using a typval_T instead of a string.\n * Works for string, funcref and partial.\n */\n    int\neval_expr_to_bool(typval_T *expr, int *error)\n{\n    typval_T\trettv;\n    int\t\tres;\n\n    if (eval_expr_typval(expr, NULL, 0, NULL, &rettv) == FAIL)\n    {\n\t*error = TRUE;\n\treturn FALSE;\n    }\n    res = (tv_get_bool_chk(&rettv, error) != 0);\n    clear_tv(&rettv);\n    return res;\n}\n\n/*\n * Top level evaluation function, returning a string.  If \"skip\" is TRUE,\n * only parsing to \"nextcmd\" is done, without reporting errors.  Return\n * pointer to allocated memory, or NULL for failure or when \"skip\" is TRUE.\n */\n    char_u *\neval_to_string_skip(\n    char_u\t*arg,\n    exarg_T\t*eap,\n    int\t\tskip)\t    // only parse, don't execute\n{\n    typval_T\ttv;\n    char_u\t*retval;\n    evalarg_T\tevalarg;\n\n    fill_evalarg_from_eap(&evalarg, eap, skip);\n    if (skip)\n\t++emsg_skip;\n    if (eval0(arg, &tv, eap, &evalarg) == FAIL || skip)\n\tretval = NULL;\n    else\n    {\n\tretval = vim_strsave(tv_get_string(&tv));\n\tclear_tv(&tv);\n    }\n    if (skip)\n\t--emsg_skip;\n    clear_evalarg(&evalarg, eap);\n\n    return retval;\n}\n\n/*\n * Initialize \"evalarg\" for use.\n */\n    void\ninit_evalarg(evalarg_T *evalarg)\n{\n    CLEAR_POINTER(evalarg);\n    ga_init2(&evalarg->eval_tofree_ga, sizeof(char_u *), 20);\n}\n\n/*\n * If \"evalarg->eval_tofree\" is not NULL free it later.\n * Caller is expected to overwrite \"evalarg->eval_tofree\" next.\n */\n    static void\nfree_eval_tofree_later(evalarg_T *evalarg)\n{\n    if (evalarg->eval_tofree == NULL)\n\treturn;\n\n    if (ga_grow(&evalarg->eval_tofree_ga, 1) == OK)\n\t((char_u **)evalarg->eval_tofree_ga.ga_data)\n\t    [evalarg->eval_tofree_ga.ga_len++]\n\t    = evalarg->eval_tofree;\n    else\n\tvim_free(evalarg->eval_tofree);\n}\n\n/*\n * After using \"evalarg\" filled from \"eap\": free the memory.\n */\n    void\nclear_evalarg(evalarg_T *evalarg, exarg_T *eap)\n{\n    if (evalarg == NULL)\n\treturn;\n\n    garray_T *etga = &evalarg->eval_tofree_ga;\n\n    if (evalarg->eval_tofree != NULL || evalarg->eval_using_cmdline)\n    {\n\tif (eap != NULL)\n\t{\n\t    // We may need to keep the original command line, e.g. for\n\t    // \":let\" it has the variable names.  But we may also need\n\t    // the new one, \"nextcmd\" points into it.  Keep both.\n\t    vim_free(eap->cmdline_tofree);\n\t    eap->cmdline_tofree = *eap->cmdlinep;\n\n\t    if (evalarg->eval_using_cmdline && etga->ga_len > 0)\n\t    {\n\t\t// \"nextcmd\" points into the last line in eval_tofree_ga,\n\t\t// need to keep it around.\n\t\t--etga->ga_len;\n\t\t*eap->cmdlinep = ((char_u **)etga->ga_data)[etga->ga_len];\n\t\tvim_free(evalarg->eval_tofree);\n\t    }\n\t    else\n\t\t*eap->cmdlinep = evalarg->eval_tofree;\n\t}\n\telse\n\t    vim_free(evalarg->eval_tofree);\n\tevalarg->eval_tofree = NULL;\n    }\n\n    ga_clear_strings(etga);\n    VIM_CLEAR(evalarg->eval_tofree_lambda);\n}\n\n/*\n * Skip over an expression at \"*pp\".\n * Return FAIL for an error, OK otherwise.\n */\n    int\nskip_expr(char_u **pp, evalarg_T *evalarg)\n{\n    typval_T\trettv;\n\n    *pp = skipwhite(*pp);\n    return eval1(pp, &rettv, evalarg);\n}\n\n/*\n * Skip over an expression at \"*arg\".\n * If in Vim9 script and line breaks are encountered, the lines are\n * concatenated.  \"evalarg->eval_tofree\" will be set accordingly.\n * \"arg\" is advanced to just after the expression.\n * \"start\" is set to the start of the expression, \"end\" to just after the end.\n * Also when the expression is copied to allocated memory.\n * Return FAIL for an error, OK otherwise.\n */\n    int\nskip_expr_concatenate(\n\tchar_u\t    **arg,\n\tchar_u\t    **start,\n\tchar_u\t    **end,\n\tevalarg_T   *evalarg)\n{\n    typval_T\trettv;\n    int\t\tres;\n    int\t\tvim9script = in_vim9script();\n    garray_T    *gap = evalarg == NULL ? NULL : &evalarg->eval_ga;\n    garray_T    *freegap = evalarg == NULL ? NULL : &evalarg->eval_freega;\n    int\t\tsave_flags = evalarg == NULL ? 0 : evalarg->eval_flags;\n    int\t\tevaluate = evalarg == NULL\n\t\t\t       ? FALSE : (evalarg->eval_flags & EVAL_EVALUATE);\n\n    if (vim9script && evaluate\n\t       && (evalarg->eval_cookie != NULL || evalarg->eval_cctx != NULL))\n    {\n\tga_init2(gap, sizeof(char_u *), 10);\n\t// leave room for \"start\"\n\tif (ga_grow(gap, 1) == OK)\n\t    ++gap->ga_len;\n\tga_init2(freegap, sizeof(char_u *), 10);\n    }\n    *start = *arg;\n\n    // Don't evaluate the expression.\n    if (evalarg != NULL)\n\tevalarg->eval_flags &= ~EVAL_EVALUATE;\n    *arg = skipwhite(*arg);\n    res = eval1(arg, &rettv, evalarg);\n    *end = *arg;\n    if (evalarg != NULL)\n\tevalarg->eval_flags = save_flags;\n\n    if (vim9script && evaluate\n\t    && (evalarg->eval_cookie != NULL || evalarg->eval_cctx != NULL))\n    {\n\tif (evalarg->eval_ga.ga_len == 1)\n\t{\n\t    // just the one line, no need to concatenate\n\t    ga_clear(gap);\n\t    gap->ga_itemsize = 0;\n\t}\n\telse\n\t{\n\t    char_u\t    *p;\n\t    size_t\t    endoff = STRLEN(*arg);\n\n\t    // Line breaks encountered, concatenate all the lines.\n\t    *((char_u **)gap->ga_data) = *start;\n\t    p = ga_concat_strings(gap, \" \");\n\n\t    // free the lines only when using getsourceline()\n\t    if (evalarg->eval_cookie != NULL)\n\t    {\n\t\t// Do not free the first line, the caller can still use it.\n\t\t*((char_u **)gap->ga_data) = NULL;\n\t\t// Do not free the last line, \"arg\" points into it, free it\n\t\t// later.  Also free \"eval_tofree\" later if needed.\n\t\tfree_eval_tofree_later(evalarg);\n\t\tevalarg->eval_tofree =\n\t\t\t\t    ((char_u **)gap->ga_data)[gap->ga_len - 1];\n\t\t((char_u **)gap->ga_data)[gap->ga_len - 1] = NULL;\n\t\tga_clear_strings(gap);\n\t    }\n\t    else\n\t    {\n\t\tga_clear(gap);\n\n\t\t// free lines that were explicitly marked for freeing\n\t\tga_clear_strings(freegap);\n\t    }\n\n\t    gap->ga_itemsize = 0;\n\t    if (p == NULL)\n\t\treturn FAIL;\n\t    *start = p;\n\t    vim_free(evalarg->eval_tofree_lambda);\n\t    evalarg->eval_tofree_lambda = p;\n\t    // Compute \"end\" relative to the end.\n\t    *end = *start + STRLEN(*start) - endoff;\n\t}\n    }\n\n    return res;\n}\n\n/*\n * Convert \"tv\" to a string.\n * When \"convert\" is TRUE convert a List into a sequence of lines and convert\n * a Float to a String.\n * Returns an allocated string (NULL when out of memory).\n */\n    char_u *\ntypval2string(typval_T *tv, int convert)\n{\n    garray_T\tga;\n    char_u\t*retval;\n    char_u\tnumbuf[NUMBUFLEN];\n\n    if (convert && tv->v_type == VAR_LIST)\n    {\n\tga_init2(&ga, sizeof(char), 80);\n\tif (tv->vval.v_list != NULL)\n\t{\n\t    list_join(&ga, tv->vval.v_list, (char_u *)\"\\n\", TRUE, FALSE, 0);\n\t    if (tv->vval.v_list->lv_len > 0)\n\t\tga_append(&ga, NL);\n\t}\n\tga_append(&ga, NUL);\n\tretval = (char_u *)ga.ga_data;\n    }\n    else if (convert && tv->v_type == VAR_FLOAT)\n    {\n\tvim_snprintf((char *)numbuf, NUMBUFLEN, \"%g\", tv->vval.v_float);\n\tretval = vim_strsave(numbuf);\n    }\n    else\n\tretval = vim_strsave(tv_get_string(tv));\n    return retval;\n}\n\n/*\n * Top level evaluation function, returning a string.  Does not handle line\n * breaks.\n * When \"convert\" is TRUE convert a List into a sequence of lines and convert\n * a Float to a String.\n * Return pointer to allocated memory, or NULL for failure.\n */\n    char_u *\neval_to_string_eap(\n    char_u\t*arg,\n    int\t\tconvert,\n    exarg_T\t*eap,\n    int\t\tuse_simple_function)\n{\n    typval_T\ttv;\n    char_u\t*retval;\n    evalarg_T\tevalarg;\n    int\t\tr;\n\n    fill_evalarg_from_eap(&evalarg, eap, eap != NULL && eap->skip);\n    if (use_simple_function)\n\tr = eval0_simple_funccal(arg, &tv, NULL, &evalarg);\n    else\n\tr = eval0(arg, &tv, NULL, &evalarg);\n    if (r == FAIL)\n\tretval = NULL;\n    else\n    {\n\tretval = typval2string(&tv, convert);\n\tclear_tv(&tv);\n    }\n    clear_evalarg(&evalarg, NULL);\n\n    return retval;\n}\n\n    char_u *\neval_to_string(\n    char_u\t*arg,\n    int\t\tconvert,\n    int\t\tuse_simple_function)\n{\n    return eval_to_string_eap(arg, convert, NULL, use_simple_function);\n}\n\n/*\n * Call eval_to_string() without using current local variables and using\n * textlock.  When \"use_sandbox\" is TRUE use the sandbox.\n * Use legacy Vim script syntax.\n */\n    char_u *\neval_to_string_safe(\n    char_u\t*arg,\n    int\t\tuse_sandbox,\n    int\t\tkeep_script_version,\n    int\t\tuse_simple_function)\n{\n    char_u\t*retval;\n    funccal_entry_T funccal_entry;\n    int\t\tsave_sc_version = current_sctx.sc_version;\n    int\t\tsave_garbage = may_garbage_collect;\n\n    if (!keep_script_version)\n\tcurrent_sctx.sc_version = 1;\n    save_funccal(&funccal_entry);\n    if (use_sandbox)\n\t++sandbox;\n    ++textlock;\n    may_garbage_collect = FALSE;\n    retval = eval_to_string(arg, FALSE, use_simple_function);\n    if (use_sandbox)\n\t--sandbox;\n    --textlock;\n    may_garbage_collect = save_garbage;\n    restore_funccal();\n    current_sctx.sc_version = save_sc_version;\n    return retval;\n}\n\n/*\n * Top level evaluation function, returning a number.\n * Evaluates \"expr\" silently.\n * Returns -1 for an error.\n */\n    varnumber_T\neval_to_number(char_u *expr, int use_simple_function)\n{\n    typval_T\trettv;\n    varnumber_T\tretval;\n    char_u\t*p = skipwhite(expr);\n    int\t\tr = NOTDONE;\n\n    ++emsg_off;\n\n    if (use_simple_function)\n\tr = may_call_simple_func(expr, &rettv);\n    if (r == NOTDONE)\n\tr = eval1(&p, &rettv, &EVALARG_EVALUATE);\n    if (r == FAIL)\n\tretval = -1;\n    else\n    {\n\tretval = tv_get_number_chk(&rettv, NULL);\n\tclear_tv(&rettv);\n    }\n    --emsg_off;\n\n    return retval;\n}\n\n/*\n * Top level evaluation function.\n * Returns an allocated typval_T with the result.\n * Returns NULL when there is an error.\n */\n    typval_T *\neval_expr(char_u *arg, exarg_T *eap)\n{\n    return eval_expr_ext(arg, eap, FALSE);\n}\n\n    typval_T *\neval_expr_ext(char_u *arg, exarg_T *eap, int use_simple_function)\n{\n    typval_T\t*tv;\n    evalarg_T\tevalarg;\n\n    fill_evalarg_from_eap(&evalarg, eap, eap != NULL && eap->skip);\n\n    tv = ALLOC_ONE(typval_T);\n    if (tv != NULL)\n    {\n\tint\tr = NOTDONE;\n\n\tif (use_simple_function)\n\t    r = eval0_simple_funccal(arg, tv, eap, &evalarg);\n\tif (r == NOTDONE)\n\t    r = eval0(arg, tv, eap, &evalarg);\n\n\tif (r == FAIL)\n\t    VIM_CLEAR(tv);\n    }\n\n    clear_evalarg(&evalarg, eap);\n    return tv;\n}\n\n/*\n * \"*arg\" points to what can be a function name in the form of \"import.Name\" or\n * \"Funcref\".  Return the name of the function.  Set \"tofree\" to something that\n * was allocated.\n * If \"verbose\" is FALSE no errors are given.\n * Return NULL for any failure.\n */\n    static char_u *\nderef_function_name(\n\t    char_u\t**arg,\n\t    char_u\t**tofree,\n\t    evalarg_T\t*evalarg,\n\t    int\t\tverbose)\n{\n    typval_T\tref;\n    char_u\t*name = *arg;\n    int\t\tsave_flags = 0;\n\n    ref.v_type = VAR_UNKNOWN;\n    if (evalarg != NULL)\n    {\n\t// need to evaluate this to get an import, like in \"a.Func\"\n\tsave_flags = evalarg->eval_flags;\n\tevalarg->eval_flags |= EVAL_EVALUATE;\n    }\n    if (eval9(arg, &ref, evalarg, FALSE) == FAIL)\n    {\n\tdictitem_T\t*v;\n\n\t// If <SID>VarName was used it would not be found, try another way.\n\tv = find_var_also_in_script(name, NULL, FALSE);\n\tif (v == NULL)\n\t{\n\t    name = NULL;\n\t    goto theend;\n\t}\n\tcopy_tv(&v->di_tv, &ref);\n    }\n    if (*skipwhite(*arg) != NUL)\n    {\n\tif (verbose)\n\t    semsg(_(e_trailing_characters_str), *arg);\n\tname = NULL;\n    }\n    else if (ref.v_type == VAR_FUNC && ref.vval.v_string != NULL)\n    {\n\tname = ref.vval.v_string;\n\tref.vval.v_string = NULL;\n\t*tofree = name;\n    }\n    else if (ref.v_type == VAR_PARTIAL && ref.vval.v_partial != NULL)\n    {\n\tif (ref.vval.v_partial->pt_argc > 0\n\t\t|| ref.vval.v_partial->pt_dict != NULL)\n\t{\n\t    if (verbose)\n\t\temsg(_(e_cannot_use_partial_here));\n\t    name = NULL;\n\t}\n\telse\n\t{\n\t    name = vim_strsave(partial_name(ref.vval.v_partial));\n\t    *tofree = name;\n\t}\n    }\n    else\n    {\n\tif (verbose)\n\t    semsg(_(e_not_callable_type_str), name);\n\tname = NULL;\n    }\n\ntheend:\n    clear_tv(&ref);\n    if (evalarg != NULL)\n\tevalarg->eval_flags = save_flags;\n    return name;\n}\n\n/*\n * Call some Vim script function and return the result in \"*rettv\".\n * Uses argv[0] to argv[argc - 1] for the function arguments.  argv[argc]\n * should have type VAR_UNKNOWN.\n * Returns OK or FAIL.\n */\n    int\ncall_vim_function(\n    char_u      *func,\n    int\t\targc,\n    typval_T\t*argv,\n    typval_T\t*rettv)\n{\n    int\t\tret;\n    funcexe_T\tfuncexe;\n    char_u\t*arg;\n    char_u\t*name;\n    char_u\t*tofree = NULL;\n    int\t\tignore_errors;\n\n    rettv->v_type = VAR_UNKNOWN;\t\t// clear_tv() uses this\n    CLEAR_FIELD(funcexe);\n    funcexe.fe_firstline = curwin->w_cursor.lnum;\n    funcexe.fe_lastline = curwin->w_cursor.lnum;\n    funcexe.fe_evaluate = TRUE;\n\n    // The name might be \"import.Func\" or \"Funcref\".  We don't know, we need to\n    // ignore errors for an undefined name.  But we do want errors when an\n    // autoload script has errors.  Guess that when there is a dot in the name\n    // showing errors is the right choice.\n    ignore_errors = vim_strchr(func, '.') == NULL;\n    arg = func;\n    if (ignore_errors)\n\t++emsg_off;\n    name = deref_function_name(&arg, &tofree, &EVALARG_EVALUATE, FALSE);\n    if (ignore_errors)\n\t--emsg_off;\n    if (name == NULL)\n\tname = func;\n\n    ret = call_func(name, -1, rettv, argc, argv, &funcexe);\n\n    if (ret == FAIL)\n\tclear_tv(rettv);\n    vim_free(tofree);\n\n    return ret;\n}\n\n/*\n * Call Vim script function \"func\" and return the result as a string.\n * Uses \"argv[0]\" to \"argv[argc - 1]\" for the function arguments. \"argv[argc]\"\n * should have type VAR_UNKNOWN.\n * Returns NULL when calling the function fails.\n */\n    void *\ncall_func_retstr(\n    char_u      *func,\n    int\t\targc,\n    typval_T\t*argv)\n{\n    typval_T\trettv;\n    char_u\t*retval;\n\n    if (call_vim_function(func, argc, argv, &rettv) == FAIL)\n\treturn NULL;\n\n    retval = vim_strsave(tv_get_string(&rettv));\n    clear_tv(&rettv);\n    return retval;\n}\n\n/*\n * Call Vim script function \"func\" and return the result as a List.\n * Uses \"argv\" and \"argc\" as call_func_retstr().\n * Returns NULL when there is something wrong.\n * Gives an error when the returned value is not a list.\n */\n    void *\ncall_func_retlist(\n    char_u      *func,\n    int\t\targc,\n    typval_T\t*argv)\n{\n    typval_T\trettv;\n\n    if (call_vim_function(func, argc, argv, &rettv) == FAIL)\n\treturn NULL;\n\n    if (rettv.v_type != VAR_LIST)\n    {\n\tsemsg(_(e_custom_list_completion_function_does_not_return_list_but_str),\n\t\tvartype_name(rettv.v_type));\n\tclear_tv(&rettv);\n\treturn NULL;\n    }\n\n    return rettv.vval.v_list;\n}\n\n#if defined(FEAT_FOLDING) || defined(PROTO)\n/*\n * Evaluate \"arg\", which is 'foldexpr'.\n * Note: caller must set \"curwin\" to match \"arg\".\n * Returns the foldlevel, and any character preceding it in \"*cp\".  Doesn't\n * give error messages.\n */\n    int\neval_foldexpr(win_T *wp, int *cp)\n{\n    char_u\t*arg;\n    typval_T\ttv;\n    varnumber_T\tretval;\n    char_u\t*s;\n    sctx_T\tsaved_sctx = current_sctx;\n    int\t\tuse_sandbox = was_set_insecurely((char_u *)\"foldexpr\",\n\t\t\t\t\t\t\t\t    OPT_LOCAL);\n\n    arg = skipwhite(wp->w_p_fde);\n    current_sctx = wp->w_p_script_ctx[WV_FDE];\n\n    ++emsg_off;\n    if (use_sandbox)\n\t++sandbox;\n    ++textlock;\n    *cp = NUL;\n\n    // Evaluate the expression.  If the expression is \"FuncName()\" call the\n    // function directly.\n    if (eval0_simple_funccal(arg, &tv, NULL, &EVALARG_EVALUATE) == FAIL)\n\tretval = 0;\n    else\n    {\n\t// If the result is a number, just return the number.\n\tif (tv.v_type == VAR_NUMBER)\n\t    retval = tv.vval.v_number;\n\telse if (tv.v_type != VAR_STRING || tv.vval.v_string == NULL)\n\t    retval = 0;\n\telse\n\t{\n\t    // If the result is a string, check if there is a non-digit before\n\t    // the number.\n\t    s = tv.vval.v_string;\n\t    if (!VIM_ISDIGIT(*s) && *s != '-')\n\t\t*cp = *s++;\n\t    retval = atol((char *)s);\n\t}\n\tclear_tv(&tv);\n    }\n    --emsg_off;\n    if (use_sandbox)\n\t--sandbox;\n    --textlock;\n    clear_evalarg(&EVALARG_EVALUATE, NULL);\n    current_sctx = saved_sctx;\n\n    return (int)retval;\n}\n#endif\n\n/*\n * Get an lval: variable, Dict item or List item that can be assigned a value\n * to: \"name\", \"na{me}\", \"name[expr]\", \"name[expr:expr]\", \"name[expr][expr]\",\n * \"name.key\", \"name.key[expr]\" etc.\n * Indexing only works if \"name\" is an existing List or Dictionary.\n * \"name\" points to the start of the name.\n * If \"rettv\" is not NULL it points to the value to be assigned.\n * \"unlet\" is TRUE for \":unlet\": slightly different behavior when something is\n * wrong; must end in space or cmd separator.\n *\n * flags:\n *  GLV_QUIET:       do not give error messages\n *  GLV_READ_ONLY:   will not change the variable\n *  GLV_NO_AUTOLOAD: do not use script autoloading\n *\n * Returns a pointer to just after the name, including indexes.\n * When an evaluation error occurs \"lp->ll_name\" is NULL;\n * Returns NULL for a parsing error.  Still need to free items in \"lp\"!\n */\n    char_u *\nget_lval(\n    char_u\t*name,\n    typval_T\t*rettv,\n    lval_T\t*lp,\n    int\t\tunlet,\n    int\t\tskip,\n    int\t\tflags,\t    // GLV_ values\n    int\t\tfne_flags)  // flags for find_name_end()\n{\n    char_u\t*p;\n    char_u\t*expr_start, *expr_end;\n    int\t\tcc;\n    dictitem_T\t*v;\n    typval_T\tvar1;\n    typval_T\tvar2;\n    int\t\tempty1 = FALSE;\n    char_u\t*key = NULL;\n    int\t\tlen;\n    hashtab_T\t*ht = NULL;\n    int\t\tquiet = flags & GLV_QUIET;\n    int\t\twriting;\n    int\t\tvim9script = in_vim9script();\n\n    // Clear everything in \"lp\".\n    CLEAR_POINTER(lp);\n\n    if (skip || (flags & GLV_COMPILING))\n    {\n\t// When skipping or compiling just find the end of the name.\n\tlp->ll_name = name;\n\tlp->ll_name_end = find_name_end(name, NULL, NULL,\n\t\t\t\t\t\t      FNE_INCL_BR | fne_flags);\n\treturn lp->ll_name_end;\n    }\n\n    // Cannot use \"s:var\" at the Vim9 script level.  \"s: type\" is OK.\n    if (vim9script && at_script_level()\n\t\t  && name[0] == 's' && name[1] == ':' && !VIM_ISWHITE(name[2]))\n    {\n\tsemsg(_(e_cannot_use_s_colon_in_vim9_script_str), name);\n\treturn NULL;\n    }\n\n    // Find the end of the name.\n    p = find_name_end(name, &expr_start, &expr_end, fne_flags);\n    lp->ll_name_end = p;\n    if (expr_start != NULL)\n    {\n\t// Don't expand the name when we already know there is an error.\n\tif (unlet && !VIM_ISWHITE(*p) && !ends_excmd(*p)\n\t\t\t\t\t\t    && *p != '[' && *p != '.')\n\t{\n\t    semsg(_(e_trailing_characters_str), p);\n\t    return NULL;\n\t}\n\n\tlp->ll_exp_name = make_expanded_name(name, expr_start, expr_end, p);\n\tif (lp->ll_exp_name == NULL)\n\t{\n\t    // Report an invalid expression in braces, unless the\n\t    // expression evaluation has been cancelled due to an\n\t    // aborting error, an interrupt, or an exception.\n\t    if (!aborting() && !quiet)\n\t    {\n\t\temsg_severe = TRUE;\n\t\tsemsg(_(e_invalid_argument_str), name);\n\t\treturn NULL;\n\t    }\n\t}\n\tlp->ll_name = lp->ll_exp_name;\n    }\n    else\n    {\n\tlp->ll_name = name;\n\n\tif (vim9script)\n\t{\n\t    // \"a: type\" is declaring variable \"a\" with a type, not \"a:\".\n\t    // However, \"g:[key]\" is indexing a dictionary.\n\t    if (p == name + 2 && p[-1] == ':' && *p != '[')\n\t    {\n\t\t--p;\n\t\tlp->ll_name_end = p;\n\t    }\n\t    if (*p == ':')\n\t    {\n\t\tchar_u\t    *tp = skipwhite(p + 1);\n\n\t\tif (is_scoped_variable(name))\n\t\t{\n\t\t    semsg(_(e_cannot_use_type_with_this_variable_str), name);\n\t\t    return NULL;\n\t\t}\n\t\tif (tp == p + 1 && !quiet)\n\t\t{\n\t\t    semsg(_(e_white_space_required_after_str_str), \":\", p);\n\t\t    return NULL;\n\t\t}\n\t\tif (!SCRIPT_ID_VALID(current_sctx.sc_sid))\n\t\t{\n\t\t    semsg(_(e_using_type_not_in_script_context_str), p);\n\t\t    return NULL;\n\t\t}\n\n\t\t// parse the type after the name\n\t\tlp->ll_type = parse_type(&tp,\n\t\t\t       &SCRIPT_ITEM(current_sctx.sc_sid)->sn_type_list,\n\t\t\t       !quiet);\n\t\tif (lp->ll_type == NULL && !quiet)\n\t\t    return NULL;\n\t\tlp->ll_name_end = tp;\n\t    }\n\t}\n    }\n    if (lp->ll_name == NULL)\n\treturn p;\n\n    if (*p == '.')\n    {\n\timported_T *import = find_imported(lp->ll_name, p - lp->ll_name, TRUE);\n\n\tif (import != NULL)\n\t{\n\t    ufunc_T *ufunc;\n\t    type_T *type;\n\n\t    import_check_sourced_sid(&import->imp_sid);\n\t    lp->ll_sid = import->imp_sid;\n\t    lp->ll_name = skipwhite(p + 1);\n\t    p = find_name_end(lp->ll_name, NULL, NULL, fne_flags);\n\t    lp->ll_name_end = p;\n\n\t    // check the item is exported\n\t    cc = *p;\n\t    *p = NUL;\n\t    if (find_exported(import->imp_sid, lp->ll_name, &ufunc, &type,\n\t\t\t\t\t\t       NULL, NULL, TRUE) == -1)\n\t    {\n\t\t*p = cc;\n\t\treturn NULL;\n\t    }\n\t    *p = cc;\n\t}\n    }\n\n    // Without [idx] or .key we are done.\n    if ((*p != '[' && *p != '.'))\n\treturn p;\n\n    if (vim9script && lval_root != NULL)\n    {\n\t// using local variable\n\tlp->ll_tv = lval_root;\n\tv = NULL;\n    }\n    else\n    {\n\tcc = *p;\n\t*p = NUL;\n\t// When we would write to the variable pass &ht and prevent autoload.\n\twriting = !(flags & GLV_READ_ONLY);\n\tv = find_var(lp->ll_name, writing ? &ht : NULL,\n\t\t\t\t\t (flags & GLV_NO_AUTOLOAD) || writing);\n\tif (v == NULL && !quiet)\n\t    semsg(_(e_undefined_variable_str), lp->ll_name);\n\t*p = cc;\n\tif (v == NULL)\n\t    return NULL;\n\tlp->ll_tv = &v->di_tv;\n    }\n\n    if (vim9script && (flags & GLV_NO_DECL) == 0)\n    {\n\tif (!quiet)\n\t    semsg(_(e_variable_already_declared_str), lp->ll_name);\n\treturn NULL;\n    }\n\n    /*\n     * Loop until no more [idx] or .key is following.\n     */\n    var1.v_type = VAR_UNKNOWN;\n    var2.v_type = VAR_UNKNOWN;\n    while (*p == '[' || (*p == '.' && p[1] != '=' && p[1] != '.'))\n    {\n\tvartype_T v_type = lp->ll_tv->v_type;\n\n\tif (*p == '.' && v_type != VAR_DICT\n\t\t      && v_type != VAR_OBJECT\n\t\t      && v_type != VAR_CLASS)\n\t{\n\t    if (!quiet)\n\t\tsemsg(_(e_dot_can_only_be_used_on_dictionary_str), name);\n\t    return NULL;\n\t}\n\tif (v_type != VAR_LIST\n\t\t&& v_type != VAR_DICT\n\t\t&& v_type != VAR_BLOB\n\t\t&& v_type != VAR_OBJECT\n\t\t&& v_type != VAR_CLASS)\n\t{\n\t    if (!quiet)\n\t\temsg(_(e_can_only_index_list_dictionary_or_blob));\n\t    return NULL;\n\t}\n\n\t// A NULL list/blob works like an empty list/blob, allocate one now.\n\tint r = OK;\n\tif (v_type == VAR_LIST && lp->ll_tv->vval.v_list == NULL)\n\t    r = rettv_list_alloc(lp->ll_tv);\n\telse if (v_type == VAR_BLOB\n\t\t\t\t\t     && lp->ll_tv->vval.v_blob == NULL)\n\t    r = rettv_blob_alloc(lp->ll_tv);\n\tif (r == FAIL)\n\t    return NULL;\n\n\tif (lp->ll_range)\n\t{\n\t    if (!quiet)\n\t\temsg(_(e_slice_must_come_last));\n\t    return NULL;\n\t}\n\n\tif (vim9script && lp->ll_valtype == NULL\n\t\t&& v != NULL\n\t\t&& lp->ll_tv == &v->di_tv\n\t\t&& ht != NULL && ht == get_script_local_ht())\n\t{\n\t    svar_T  *sv = find_typval_in_script(lp->ll_tv, 0, TRUE);\n\n\t    // Vim9 script local variable: get the type\n\t    if (sv != NULL)\n\t\tlp->ll_valtype = sv->sv_type;\n\t}\n\n\tlen = -1;\n\tif (*p == '.')\n\t{\n\t    key = p + 1;\n\t    for (len = 0; ASCII_ISALNUM(key[len]) || key[len] == '_'; ++len)\n\t\t;\n\t    if (len == 0)\n\t    {\n\t\tif (!quiet)\n\t\t    emsg(_(e_cannot_use_empty_key_for_dictionary));\n\t\treturn NULL;\n\t    }\n\t    p = key + len;\n\t}\n\telse\n\t{\n\t    // Get the index [expr] or the first index [expr: ].\n\t    p = skipwhite(p + 1);\n\t    if (*p == ':')\n\t\tempty1 = TRUE;\n\t    else\n\t    {\n\t\tempty1 = FALSE;\n\t\tif (eval1(&p, &var1, &EVALARG_EVALUATE) == FAIL)  // recursive!\n\t\t    return NULL;\n\t\tif (tv_get_string_chk(&var1) == NULL)\n\t\t{\n\t\t    // not a number or string\n\t\t    clear_tv(&var1);\n\t\t    return NULL;\n\t\t}\n\t\tp = skipwhite(p);\n\t    }\n\n\t    // Optionally get the second index [ :expr].\n\t    if (*p == ':')\n\t    {\n\t\tif (v_type == VAR_DICT)\n\t\t{\n\t\t    if (!quiet)\n\t\t\temsg(_(e_cannot_slice_dictionary));\n\t\t    clear_tv(&var1);\n\t\t    return NULL;\n\t\t}\n\t\tif (rettv != NULL\n\t\t\t&& !(rettv->v_type == VAR_LIST\n\t\t\t\t\t\t && rettv->vval.v_list != NULL)\n\t\t\t&& !(rettv->v_type == VAR_BLOB\n\t\t\t\t\t\t&& rettv->vval.v_blob != NULL))\n\t\t{\n\t\t    if (!quiet)\n\t\t\temsg(_(e_slice_requires_list_or_blob_value));\n\t\t    clear_tv(&var1);\n\t\t    return NULL;\n\t\t}\n\t\tp = skipwhite(p + 1);\n\t\tif (*p == ']')\n\t\t    lp->ll_empty2 = TRUE;\n\t\telse\n\t\t{\n\t\t    lp->ll_empty2 = FALSE;\n\t\t    // recursive!\n\t\t    if (eval1(&p, &var2, &EVALARG_EVALUATE) == FAIL)\n\t\t    {\n\t\t\tclear_tv(&var1);\n\t\t\treturn NULL;\n\t\t    }\n\t\t    if (tv_get_string_chk(&var2) == NULL)\n\t\t    {\n\t\t\t// not a number or string\n\t\t\tclear_tv(&var1);\n\t\t\tclear_tv(&var2);\n\t\t\treturn NULL;\n\t\t    }\n\t\t}\n\t\tlp->ll_range = TRUE;\n\t    }\n\t    else\n\t\tlp->ll_range = FALSE;\n\n\t    if (*p != ']')\n\t    {\n\t\tif (!quiet)\n\t\t    emsg(_(e_missing_closing_square_brace));\n\t\tclear_tv(&var1);\n\t\tclear_tv(&var2);\n\t\treturn NULL;\n\t    }\n\n\t    // Skip to past ']'.\n\t    ++p;\n\t}\n\n\tif (v_type == VAR_DICT)\n\t{\n\t    if (len == -1)\n\t    {\n\t\t// \"[key]\": get key from \"var1\"\n\t\tkey = tv_get_string_chk(&var1);\t// is number or string\n\t\tif (key == NULL)\n\t\t{\n\t\t    clear_tv(&var1);\n\t\t    return NULL;\n\t\t}\n\t    }\n\t    lp->ll_list = NULL;\n\n\t    // a NULL dict is equivalent with an empty dict\n\t    if (lp->ll_tv->vval.v_dict == NULL)\n\t    {\n\t\tlp->ll_tv->vval.v_dict = dict_alloc();\n\t\tif (lp->ll_tv->vval.v_dict == NULL)\n\t\t{\n\t\t    clear_tv(&var1);\n\t\t    return NULL;\n\t\t}\n\t\t++lp->ll_tv->vval.v_dict->dv_refcount;\n\t    }\n\t    lp->ll_dict = lp->ll_tv->vval.v_dict;\n\n\t    lp->ll_di = dict_find(lp->ll_dict, key, len);\n\n\t    // When assigning to a scope dictionary check that a function and\n\t    // variable name is valid (only variable name unless it is l: or\n\t    // g: dictionary). Disallow overwriting a builtin function.\n\t    if (rettv != NULL && lp->ll_dict->dv_scope != 0)\n\t    {\n\t\tint prevval;\n\n\t\tif (len != -1)\n\t\t{\n\t\t    prevval = key[len];\n\t\t    key[len] = NUL;\n\t\t}\n\t\telse\n\t\t    prevval = 0; // avoid compiler warning\n\t\tint wrong = (lp->ll_dict->dv_scope == VAR_DEF_SCOPE\n\t\t\t       && (rettv->v_type == VAR_FUNC\n\t\t\t\t\t    || rettv->v_type == VAR_PARTIAL)\n\t\t\t       && var_wrong_func_name(key, lp->ll_di == NULL))\n\t\t\t|| !valid_varname(key, -1, TRUE);\n\t\tif (len != -1)\n\t\t    key[len] = prevval;\n\t\tif (wrong)\n\t\t{\n\t\t    clear_tv(&var1);\n\t\t    return NULL;\n\t\t}\n\t    }\n\n\t    if (lp->ll_valtype != NULL)\n\t\t// use the type of the member\n\t\tlp->ll_valtype = lp->ll_valtype->tt_member;\n\n\t    if (lp->ll_di == NULL)\n\t    {\n\t\t// Can't add \"v:\" or \"a:\" variable.\n\t\tif (lp->ll_dict == get_vimvar_dict()\n\t\t\t || &lp->ll_dict->dv_hashtab == get_funccal_args_ht())\n\t\t{\n\t\t    semsg(_(e_illegal_variable_name_str), name);\n\t\t    clear_tv(&var1);\n\t\t    return NULL;\n\t\t}\n\n\t\t// Key does not exist in dict: may need to add it.\n\t\tif (*p == '[' || *p == '.' || unlet)\n\t\t{\n\t\t    if (!quiet)\n\t\t\tsemsg(_(e_key_not_present_in_dictionary_str), key);\n\t\t    clear_tv(&var1);\n\t\t    return NULL;\n\t\t}\n\t\tif (len == -1)\n\t\t    lp->ll_newkey = vim_strsave(key);\n\t\telse\n\t\t    lp->ll_newkey = vim_strnsave(key, len);\n\t\tclear_tv(&var1);\n\t\tif (lp->ll_newkey == NULL)\n\t\t    p = NULL;\n\t\tbreak;\n\t    }\n\t    // existing variable, need to check if it can be changed\n\t    else if ((flags & GLV_READ_ONLY) == 0\n\t\t\t&& (var_check_ro(lp->ll_di->di_flags, name, FALSE)\n\t\t\t  || var_check_lock(lp->ll_di->di_flags, name, FALSE)))\n\t    {\n\t\tclear_tv(&var1);\n\t\treturn NULL;\n\t    }\n\n\t    clear_tv(&var1);\n\t    lp->ll_tv = &lp->ll_di->di_tv;\n\t}\n\telse if (v_type == VAR_BLOB)\n\t{\n\t    long bloblen = blob_len(lp->ll_tv->vval.v_blob);\n\n\t    /*\n\t     * Get the number and item for the only or first index of the List.\n\t     */\n\t    if (empty1)\n\t\tlp->ll_n1 = 0;\n\t    else\n\t\t// is number or string\n\t\tlp->ll_n1 = (long)tv_get_number(&var1);\n\t    clear_tv(&var1);\n\n\t    if (check_blob_index(bloblen, lp->ll_n1, quiet) == FAIL)\n\t    {\n\t\tclear_tv(&var2);\n\t\treturn NULL;\n\t    }\n\t    if (lp->ll_range && !lp->ll_empty2)\n\t    {\n\t\tlp->ll_n2 = (long)tv_get_number(&var2);\n\t\tclear_tv(&var2);\n\t\tif (check_blob_range(bloblen, lp->ll_n1, lp->ll_n2, quiet)\n\t\t\t\t\t\t\t\t       == FAIL)\n\t\t    return NULL;\n\t    }\n\t    lp->ll_blob = lp->ll_tv->vval.v_blob;\n\t    lp->ll_tv = NULL;\n\t    break;\n\t}\n\telse if (v_type == VAR_LIST)\n\t{\n\t    /*\n\t     * Get the number and item for the only or first index of the List.\n\t     */\n\t    if (empty1)\n\t\tlp->ll_n1 = 0;\n\t    else\n\t\t// is number or string\n\t\tlp->ll_n1 = (long)tv_get_number(&var1);\n\t    clear_tv(&var1);\n\n\t    lp->ll_dict = NULL;\n\t    lp->ll_list = lp->ll_tv->vval.v_list;\n\t    lp->ll_li = check_range_index_one(lp->ll_list, &lp->ll_n1,\n\t\t\t\t     (flags & GLV_ASSIGN_WITH_OP) == 0, quiet);\n\t    if (lp->ll_li == NULL)\n\t    {\n\t\tclear_tv(&var2);\n\t\treturn NULL;\n\t    }\n\n\t    if (lp->ll_valtype != NULL)\n\t\t// use the type of the member\n\t\tlp->ll_valtype = lp->ll_valtype->tt_member;\n\n\t    /*\n\t     * May need to find the item or absolute index for the second\n\t     * index of a range.\n\t     * When no index given: \"lp->ll_empty2\" is TRUE.\n\t     * Otherwise \"lp->ll_n2\" is set to the second index.\n\t     */\n\t    if (lp->ll_range && !lp->ll_empty2)\n\t    {\n\t\tlp->ll_n2 = (long)tv_get_number(&var2);\n\t\t\t\t\t\t    // is number or string\n\t\tclear_tv(&var2);\n\t\tif (check_range_index_two(lp->ll_list,\n\t\t\t\t\t    &lp->ll_n1, lp->ll_li,\n\t\t\t\t\t    &lp->ll_n2, quiet) == FAIL)\n\t\t    return NULL;\n\t    }\n\n\t    lp->ll_tv = &lp->ll_li->li_tv;\n\t}\n\telse  // v_type == VAR_CLASS || v_type == VAR_OBJECT\n\t{\n\t    class_T *cl = (v_type == VAR_OBJECT\n\t\t\t\t\t   && lp->ll_tv->vval.v_object != NULL)\n\t\t\t    ? lp->ll_tv->vval.v_object->obj_class\n\t\t\t    : lp->ll_tv->vval.v_class;\n\t    // TODO: what if class is NULL?\n\t    if (cl != NULL)\n\t    {\n\t\tlp->ll_valtype = NULL;\n\t\tint count = v_type == VAR_OBJECT ? cl->class_obj_member_count\n\t\t\t\t\t\t: cl->class_class_member_count;\n\t\tocmember_T *members = v_type == VAR_OBJECT\n\t\t\t\t\t\t     ? cl->class_obj_members\n\t\t\t\t\t\t     : cl->class_class_members;\n\t\tfor (int i = 0; i < count; ++i)\n\t\t{\n\t\t    ocmember_T *om = members + i;\n\t\t    if (STRNCMP(om->ocm_name, key, p - key) == 0\n\t\t\t\t\t       && om->ocm_name[p - key] == NUL)\n\t\t    {\n\t\t\tswitch (om->ocm_access)\n\t\t\t{\n\t\t\t    case ACCESS_PRIVATE:\n\t\t\t\t    semsg(_(e_cannot_access_private_member_str),\n\t\t\t\t\t\t\t\t om->ocm_name);\n\t\t\t\t    return NULL;\n\t\t\t    case ACCESS_READ:\n\t\t\t\t    if (!(flags & GLV_READ_ONLY))\n\t\t\t\t    {\n\t\t\t\t\tsemsg(_(e_member_is_not_writable_str),\n\t\t\t\t\t\t\t\t om->ocm_name);\n\t\t\t\t\treturn NULL;\n\t\t\t\t    }\n\t\t\t\t    break;\n\t\t\t    case ACCESS_ALL:\n\t\t\t\t    break;\n\t\t\t}\n\n\t\t\tlp->ll_valtype = om->ocm_type;\n\n\t\t\tif (v_type == VAR_OBJECT)\n\t\t\t    lp->ll_tv = ((typval_T *)(\n\t\t\t\t\t    lp->ll_tv->vval.v_object + 1)) + i;\n\t\t\telse\n\t\t\t    lp->ll_tv = &cl->class_members_tv[i];\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\tif (lp->ll_valtype == NULL)\n\t\t{\n\t\t    if (v_type == VAR_OBJECT)\n\t\t\tsemsg(_(e_object_member_not_found_str), key);\n\t\t    else\n\t\t\tsemsg(_(e_class_member_not_found_str), key);\n\t\t    return NULL;\n\t\t}\n\t    }\n\t}\n    }\n\n    clear_tv(&var1);\n    lp->ll_name_end = p;\n    return p;\n}\n\n/*\n * Clear lval \"lp\" that was filled by get_lval().\n */\n    void\nclear_lval(lval_T *lp)\n{\n    vim_free(lp->ll_exp_name);\n    vim_free(lp->ll_newkey);\n}\n\n/*\n * Set a variable that was parsed by get_lval() to \"rettv\".\n * \"endp\" points to just after the parsed name.\n * \"op\" is NULL, \"+\" for \"+=\", \"-\" for \"-=\", \"*\" for \"*=\", \"/\" for \"/=\",\n * \"%\" for \"%=\", \".\" for \".=\" or \"=\" for \"=\".\n */\n    void\nset_var_lval(\n    lval_T\t*lp,\n    char_u\t*endp,\n    typval_T\t*rettv,\n    int\t\tcopy,\n    int\t\tflags,\t    // ASSIGN_CONST, ASSIGN_NO_DECL\n    char_u\t*op,\n    int\t\tvar_idx)    // index for \"let [a, b] = list\"\n{\n    int\t\tcc;\n    dictitem_T\t*di;\n\n    if (lp->ll_tv == NULL)\n    {\n\tcc = *endp;\n\t*endp = NUL;\n\tif (in_vim9script() && check_reserved_name(lp->ll_name, NULL) == FAIL)\n\t    return;\n\n\tif (lp->ll_blob != NULL)\n\t{\n\t    int\t    error = FALSE, val;\n\n\t    if (op != NULL && *op != '=')\n\t    {\n\t\tsemsg(_(e_wrong_variable_type_for_str_equal), op);\n\t\treturn;\n\t    }\n\t    if (value_check_lock(lp->ll_blob->bv_lock, lp->ll_name, FALSE))\n\t\treturn;\n\n\t    if (lp->ll_range && rettv->v_type == VAR_BLOB)\n\t    {\n\t\tif (lp->ll_empty2)\n\t\t    lp->ll_n2 = blob_len(lp->ll_blob) - 1;\n\n\t\tif (blob_set_range(lp->ll_blob, lp->ll_n1, lp->ll_n2,\n\t\t\t\t\t\t\t\trettv) == FAIL)\n\t\t    return;\n\t    }\n\t    else\n\t    {\n\t\tval = (int)tv_get_number_chk(rettv, &error);\n\t\tif (!error)\n\t\t    blob_set_append(lp->ll_blob, lp->ll_n1, val);\n\t    }\n\t}\n\telse if (op != NULL && *op != '=')\n\t{\n\t    typval_T tv;\n\n\t    if ((flags & (ASSIGN_CONST | ASSIGN_FINAL))\n\t\t\t\t\t     && (flags & ASSIGN_FOR_LOOP) == 0)\n\t    {\n\t\temsg(_(e_cannot_modify_existing_variable));\n\t\t*endp = cc;\n\t\treturn;\n\t    }\n\n\t    // handle +=, -=, *=, /=, %= and .=\n\t    di = NULL;\n\t    if (eval_variable(lp->ll_name, (int)STRLEN(lp->ll_name),\n\t\t\t\t lp->ll_sid, &tv, &di, EVAL_VAR_VERBOSE) == OK)\n\t    {\n\t\tif ((di == NULL\n\t\t\t || (!var_check_ro(di->di_flags, lp->ll_name, FALSE)\n\t\t\t   && !tv_check_lock(&di->di_tv, lp->ll_name, FALSE)))\n\t\t\t&& tv_op(&tv, rettv, op) == OK)\n\t\t    set_var_const(lp->ll_name, lp->ll_sid, NULL, &tv, FALSE,\n\t\t\t\t\t\t\t    ASSIGN_NO_DECL, 0);\n\t\tclear_tv(&tv);\n\t    }\n\t}\n\telse\n\t{\n\t    if (lp->ll_type != NULL && check_typval_arg_type(lp->ll_type, rettv,\n\t\t\t\t\t\t\t      NULL, 0) == FAIL)\n\t\treturn;\n\t    set_var_const(lp->ll_name, lp->ll_sid, lp->ll_type, rettv, copy,\n\t\t\t\t\t\t\t       flags, var_idx);\n\t}\n\t*endp = cc;\n    }\n    else if (value_check_lock(lp->ll_newkey == NULL\n\t\t? lp->ll_tv->v_lock\n\t\t: lp->ll_tv->vval.v_dict->dv_lock, lp->ll_name, FALSE))\n\t;\n    else if (lp->ll_range)\n    {\n\tif ((flags & (ASSIGN_CONST | ASSIGN_FINAL))\n\t\t\t\t\t     && (flags & ASSIGN_FOR_LOOP) == 0)\n\t{\n\t    emsg(_(e_cannot_lock_range));\n\t    return;\n\t}\n\n\t(void)list_assign_range(lp->ll_list, rettv->vval.v_list,\n\t\t\t lp->ll_n1, lp->ll_n2, lp->ll_empty2, op, lp->ll_name);\n    }\n    else\n    {\n\t/*\n\t * Assign to a List, Dictionary or Object item.\n\t */\n\tif ((flags & (ASSIGN_CONST | ASSIGN_FINAL))\n\t\t\t\t\t     && (flags & ASSIGN_FOR_LOOP) == 0)\n\t{\n\t    emsg(_(e_cannot_lock_list_or_dict));\n\t    return;\n\t}\n\n\tif (lp->ll_valtype != NULL\n\t\t    && check_typval_arg_type(lp->ll_valtype, rettv,\n\t\t\t\t\t\t\t      NULL, 0) == FAIL)\n\t    return;\n\n\tif (lp->ll_newkey != NULL)\n\t{\n\t    if (op != NULL && *op != '=')\n\t    {\n\t\tsemsg(_(e_key_not_present_in_dictionary_str), lp->ll_newkey);\n\t\treturn;\n\t    }\n\t    if (dict_wrong_func_name(lp->ll_tv->vval.v_dict, rettv,\n\t\t\t\t\t\t\t\tlp->ll_newkey))\n\t\treturn;\n\n\t    // Need to add an item to the Dictionary.\n\t    di = dictitem_alloc(lp->ll_newkey);\n\t    if (di == NULL)\n\t\treturn;\n\t    if (dict_add(lp->ll_tv->vval.v_dict, di) == FAIL)\n\t    {\n\t\tvim_free(di);\n\t\treturn;\n\t    }\n\t    lp->ll_tv = &di->di_tv;\n\t}\n\telse if (op != NULL && *op != '=')\n\t{\n\t    tv_op(lp->ll_tv, rettv, op);\n\t    return;\n\t}\n\telse\n\t    clear_tv(lp->ll_tv);\n\n\t/*\n\t * Assign the value to the variable or list item.\n\t */\n\tif (copy)\n\t    copy_tv(rettv, lp->ll_tv);\n\telse\n\t{\n\t    *lp->ll_tv = *rettv;\n\t    lp->ll_tv->v_lock = 0;\n\t    init_tv(rettv);\n\t}\n    }\n}\n\n/*\n * Handle \"tv1 += tv2\", \"tv1 -= tv2\", \"tv1 *= tv2\", \"tv1 /= tv2\", \"tv1 %= tv2\"\n * and \"tv1 .= tv2\"\n * Returns OK or FAIL.\n */\n    int\ntv_op(typval_T *tv1, typval_T *tv2, char_u *op)\n{\n    varnumber_T\tn;\n    char_u\tnumbuf[NUMBUFLEN];\n    char_u\t*s;\n    int\t\tfailed = FALSE;\n\n    // Can't do anything with a Funcref or Dict on the right.\n    // v:true and friends only work with \"..=\".\n    if (tv2->v_type != VAR_FUNC && tv2->v_type != VAR_DICT\n\t\t    && ((tv2->v_type != VAR_BOOL && tv2->v_type != VAR_SPECIAL)\n\t\t\t\t\t\t\t\t|| *op == '.'))\n    {\n\tswitch (tv1->v_type)\n\t{\n\t    case VAR_UNKNOWN:\n\t    case VAR_ANY:\n\t    case VAR_VOID:\n\t    case VAR_DICT:\n\t    case VAR_FUNC:\n\t    case VAR_PARTIAL:\n\t    case VAR_BOOL:\n\t    case VAR_SPECIAL:\n\t    case VAR_JOB:\n\t    case VAR_CHANNEL:\n\t    case VAR_INSTR:\n\t    case VAR_CLASS:\n\t    case VAR_OBJECT:\n\t\tbreak;\n\n\t    case VAR_BLOB:\n\t\tif (*op != '+' || tv2->v_type != VAR_BLOB)\n\t\t    break;\n\t\t// BLOB += BLOB\n\t\tif (tv1->vval.v_blob != NULL && tv2->vval.v_blob != NULL)\n\t\t{\n\t\t    blob_T  *b1 = tv1->vval.v_blob;\n\t\t    blob_T  *b2 = tv2->vval.v_blob;\n\t\t    int\ti, len = blob_len(b2);\n\t\t    for (i = 0; i < len; i++)\n\t\t\tga_append(&b1->bv_ga, blob_get(b2, i));\n\t\t}\n\t\treturn OK;\n\n\t    case VAR_LIST:\n\t\tif (*op != '+' || tv2->v_type != VAR_LIST)\n\t\t    break;\n\t\t// List += List\n\t\tif (tv2->vval.v_list != NULL)\n\t\t{\n\t\t    if (tv1->vval.v_list == NULL)\n\t\t    {\n\t\t\ttv1->vval.v_list = tv2->vval.v_list;\n\t\t\t++tv1->vval.v_list->lv_refcount;\n\t\t    }\n\t\t    else\n\t\t\tlist_extend(tv1->vval.v_list, tv2->vval.v_list, NULL);\n\t\t}\n\t\treturn OK;\n\n\t    case VAR_NUMBER:\n\t    case VAR_STRING:\n\t\tif (tv2->v_type == VAR_LIST)\n\t\t    break;\n\t\tif (vim_strchr((char_u *)\"+-*/%\", *op) != NULL)\n\t\t{\n\t\t    // nr += nr , nr -= nr , nr *=nr , nr /= nr , nr %= nr\n\t\t    n = tv_get_number(tv1);\n\t\t    if (tv2->v_type == VAR_FLOAT)\n\t\t    {\n\t\t\tfloat_T f = n;\n\n\t\t\tif (*op == '%')\n\t\t\t    break;\n\t\t\tswitch (*op)\n\t\t\t{\n\t\t\t    case '+': f += tv2->vval.v_float; break;\n\t\t\t    case '-': f -= tv2->vval.v_float; break;\n\t\t\t    case '*': f *= tv2->vval.v_float; break;\n\t\t\t    case '/': f /= tv2->vval.v_float; break;\n\t\t\t}\n\t\t\tclear_tv(tv1);\n\t\t\ttv1->v_type = VAR_FLOAT;\n\t\t\ttv1->vval.v_float = f;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\tswitch (*op)\n\t\t\t{\n\t\t\t    case '+': n += tv_get_number(tv2); break;\n\t\t\t    case '-': n -= tv_get_number(tv2); break;\n\t\t\t    case '*': n *= tv_get_number(tv2); break;\n\t\t\t    case '/': n = num_divide(n, tv_get_number(tv2),\n\t\t\t\t\t\t\t       &failed); break;\n\t\t\t    case '%': n = num_modulus(n, tv_get_number(tv2),\n\t\t\t\t\t\t\t       &failed); break;\n\t\t\t}\n\t\t\tclear_tv(tv1);\n\t\t\ttv1->v_type = VAR_NUMBER;\n\t\t\ttv1->vval.v_number = n;\n\t\t    }\n\t\t}\n\t\telse\n\t\t{\n\t\t    if (tv2->v_type == VAR_FLOAT)\n\t\t\tbreak;\n\n\t\t    // str .= str\n\t\t    s = tv_get_string(tv1);\n\t\t    s = concat_str(s, tv_get_string_buf(tv2, numbuf));\n\t\t    clear_tv(tv1);\n\t\t    tv1->v_type = VAR_STRING;\n\t\t    tv1->vval.v_string = s;\n\t\t}\n\t\treturn failed ? FAIL : OK;\n\n\t    case VAR_FLOAT:\n\t\t{\n\t\t    float_T f;\n\n\t\t    if (*op == '%' || *op == '.'\n\t\t\t\t   || (tv2->v_type != VAR_FLOAT\n\t\t\t\t    && tv2->v_type != VAR_NUMBER\n\t\t\t\t    && tv2->v_type != VAR_STRING))\n\t\t\tbreak;\n\t\t    if (tv2->v_type == VAR_FLOAT)\n\t\t\tf = tv2->vval.v_float;\n\t\t    else\n\t\t\tf = tv_get_number(tv2);\n\t\t    switch (*op)\n\t\t    {\n\t\t\tcase '+': tv1->vval.v_float += f; break;\n\t\t\tcase '-': tv1->vval.v_float -= f; break;\n\t\t\tcase '*': tv1->vval.v_float *= f; break;\n\t\t\tcase '/': tv1->vval.v_float /= f; break;\n\t\t    }\n\t\t}\n\t\treturn OK;\n\t}\n    }\n\n    semsg(_(e_wrong_variable_type_for_str_equal), op);\n    return FAIL;\n}\n\n/*\n * Evaluate the expression used in a \":for var in expr\" command.\n * \"arg\" points to \"var\".\n * Set \"*errp\" to TRUE for an error, FALSE otherwise;\n * Return a pointer that holds the info.  Null when there is an error.\n */\n    void *\neval_for_line(\n    char_u\t*arg,\n    int\t\t*errp,\n    exarg_T\t*eap,\n    evalarg_T\t*evalarg)\n{\n    forinfo_T\t*fi;\n    char_u\t*var_list_end;\n    char_u\t*expr;\n    typval_T\ttv;\n    list_T\t*l;\n    int\t\tskip = !(evalarg->eval_flags & EVAL_EVALUATE);\n\n    *errp = TRUE;\t// default: there is an error\n\n    fi = ALLOC_CLEAR_ONE(forinfo_T);\n    if (fi == NULL)\n\treturn NULL;\n\n    var_list_end = skip_var_list(arg, TRUE, &fi->fi_varcount,\n\t\t\t\t\t\t     &fi->fi_semicolon, FALSE);\n    if (var_list_end == NULL)\n\treturn fi;\n\n    expr = skipwhite_and_linebreak(var_list_end, evalarg);\n    if (expr[0] != 'i' || expr[1] != 'n'\n\t\t\t\t  || !(expr[2] == NUL || VIM_ISWHITE(expr[2])))\n    {\n\tif (in_vim9script() && *expr == ':' && expr != var_list_end)\n\t    semsg(_(e_no_white_space_allowed_before_colon_str), expr);\n\telse\n\t    emsg(_(e_missing_in_after_for));\n\treturn fi;\n    }\n\n    if (skip)\n\t++emsg_skip;\n    expr = skipwhite_and_linebreak(expr + 2, evalarg);\n    if (eval0(expr, &tv, eap, evalarg) == OK)\n    {\n\t*errp = FALSE;\n\tif (!skip)\n\t{\n\t    if (tv.v_type == VAR_LIST)\n\t    {\n\t\tl = tv.vval.v_list;\n\t\tif (l == NULL)\n\t\t{\n\t\t    // a null list is like an empty list: do nothing\n\t\t    clear_tv(&tv);\n\t\t}\n\t\telse\n\t\t{\n\t\t    // Need a real list here.\n\t\t    CHECK_LIST_MATERIALIZE(l);\n\n\t\t    // No need to increment the refcount, it's already set for\n\t\t    // the list being used in \"tv\".\n\t\t    fi->fi_list = l;\n\t\t    list_add_watch(l, &fi->fi_lw);\n\t\t    fi->fi_lw.lw_item = l->lv_first;\n\t\t}\n\t    }\n\t    else if (tv.v_type == VAR_BLOB)\n\t    {\n\t\tfi->fi_bi = 0;\n\t\tif (tv.vval.v_blob != NULL)\n\t\t{\n\t\t    typval_T btv;\n\n\t\t    // Make a copy, so that the iteration still works when the\n\t\t    // blob is changed.\n\t\t    blob_copy(tv.vval.v_blob, &btv);\n\t\t    fi->fi_blob = btv.vval.v_blob;\n\t\t}\n\t\tclear_tv(&tv);\n\t    }\n\t    else if (tv.v_type == VAR_STRING)\n\t    {\n\t\tfi->fi_byte_idx = 0;\n\t\tfi->fi_string = tv.vval.v_string;\n\t\ttv.vval.v_string = NULL;\n\t\tif (fi->fi_string == NULL)\n\t\t    fi->fi_string = vim_strsave((char_u *)\"\");\n\t    }\n\t    else\n\t    {\n\t\temsg(_(e_string_list_or_blob_required));\n\t\tclear_tv(&tv);\n\t    }\n\t}\n    }\n    if (skip)\n\t--emsg_skip;\n    fi->fi_break_count = evalarg->eval_break_count;\n\n    return fi;\n}\n\n/*\n * Used when looping over a :for line, skip the \"in expr\" part.\n */\n    void\nskip_for_lines(void *fi_void, evalarg_T *evalarg)\n{\n    forinfo_T\t*fi = (forinfo_T *)fi_void;\n    int\t\ti;\n\n    for (i = 0; i < fi->fi_break_count; ++i)\n\teval_next_line(NULL, evalarg);\n}\n\n/*\n * Use the first item in a \":for\" list.  Advance to the next.\n * Assign the values to the variable (list).  \"arg\" points to the first one.\n * Return TRUE when a valid item was found, FALSE when at end of list or\n * something wrong.\n */\n    int\nnext_for_item(void *fi_void, char_u *arg)\n{\n    forinfo_T\t*fi = (forinfo_T *)fi_void;\n    int\t\tresult;\n    int\t\tflag = ASSIGN_FOR_LOOP | (in_vim9script()\n\t\t\t ? (ASSIGN_FINAL\n\t\t\t     // first round: error if variable exists\n\t\t\t     | (fi->fi_bi == 0 ? 0 : ASSIGN_DECL)\n\t\t\t     | ASSIGN_NO_MEMBER_TYPE\n\t\t\t     | ASSIGN_UPDATE_BLOCK_ID)\n\t\t\t : 0);\n    listitem_T\t*item;\n    int\t\tskip_assign = in_vim9script() && arg[0] == '_'\n\t\t\t\t\t\t      && !eval_isnamec(arg[1]);\n\n    if (fi->fi_blob != NULL)\n    {\n\ttypval_T\ttv;\n\n\tif (fi->fi_bi >= blob_len(fi->fi_blob))\n\t    return FALSE;\n\ttv.v_type = VAR_NUMBER;\n\ttv.v_lock = VAR_FIXED;\n\ttv.vval.v_number = blob_get(fi->fi_blob, fi->fi_bi);\n\t++fi->fi_bi;\n\tif (skip_assign)\n\t    return TRUE;\n\treturn ex_let_vars(arg, &tv, TRUE, fi->fi_semicolon,\n\t\t\t\t\t    fi->fi_varcount, flag, NULL) == OK;\n    }\n\n    if (fi->fi_string != NULL)\n    {\n\ttypval_T\ttv;\n\tint\t\tlen;\n\n\tlen = mb_ptr2len(fi->fi_string + fi->fi_byte_idx);\n\tif (len == 0)\n\t    return FALSE;\n\ttv.v_type = VAR_STRING;\n\ttv.v_lock = VAR_FIXED;\n\ttv.vval.v_string = vim_strnsave(fi->fi_string + fi->fi_byte_idx, len);\n\tfi->fi_byte_idx += len;\n\t++fi->fi_bi;\n\tif (skip_assign)\n\t    result = TRUE;\n\telse\n\t    result = ex_let_vars(arg, &tv, TRUE, fi->fi_semicolon,\n\t\t\t\t\t    fi->fi_varcount, flag, NULL) == OK;\n\tvim_free(tv.vval.v_string);\n\treturn result;\n    }\n\n    item = fi->fi_lw.lw_item;\n    if (item == NULL)\n\tresult = FALSE;\n    else\n    {\n\tfi->fi_lw.lw_item = item->li_next;\n\t++fi->fi_bi;\n\tif (skip_assign)\n\t    result = TRUE;\n\telse\n\t    result = (ex_let_vars(arg, &item->li_tv, TRUE, fi->fi_semicolon,\n\t\t\t\t\t   fi->fi_varcount, flag, NULL) == OK);\n    }\n    return result;\n}\n\n/*\n * Free the structure used to store info used by \":for\".\n */\n    void\nfree_for_info(void *fi_void)\n{\n    forinfo_T    *fi = (forinfo_T *)fi_void;\n\n    if (fi == NULL)\n\treturn;\n    if (fi->fi_list != NULL)\n    {\n\tlist_rem_watch(fi->fi_list, &fi->fi_lw);\n\tlist_unref(fi->fi_list);\n    }\n    else if (fi->fi_blob != NULL)\n\tblob_unref(fi->fi_blob);\n    else\n\tvim_free(fi->fi_string);\n    vim_free(fi);\n}\n\n    void\nset_context_for_expression(\n    expand_T\t*xp,\n    char_u\t*arg,\n    cmdidx_T\tcmdidx)\n{\n    int\t\thas_expr = cmdidx != CMD_let && cmdidx != CMD_var;\n    int\t\tc;\n    char_u\t*p;\n\n    if (cmdidx == CMD_let || cmdidx == CMD_var\n\t\t\t\t || cmdidx == CMD_const || cmdidx == CMD_final)\n    {\n\txp->xp_context = EXPAND_USER_VARS;\n\tif (vim_strpbrk(arg, (char_u *)\"\\\"'+-*/%.=!?~|&$([<>,#\") == NULL)\n\t{\n\t    // \":let var1 var2 ...\": find last space.\n\t    for (p = arg + STRLEN(arg); p >= arg; )\n\t    {\n\t\txp->xp_pattern = p;\n\t\tMB_PTR_BACK(arg, p);\n\t\tif (VIM_ISWHITE(*p))\n\t\t    break;\n\t    }\n\t    return;\n\t}\n    }\n    else\n\txp->xp_context = cmdidx == CMD_call ? EXPAND_FUNCTIONS\n\t\t\t\t\t\t\t  : EXPAND_EXPRESSION;\n    while ((xp->xp_pattern = vim_strpbrk(arg,\n\t\t\t\t  (char_u *)\"\\\"'+-*/%.=!?~|&$([<>,#\")) != NULL)\n    {\n\tc = *xp->xp_pattern;\n\tif (c == '&')\n\t{\n\t    c = xp->xp_pattern[1];\n\t    if (c == '&')\n\t    {\n\t\t++xp->xp_pattern;\n\t\txp->xp_context = has_expr ? EXPAND_EXPRESSION : EXPAND_NOTHING;\n\t    }\n\t    else if (c != ' ')\n\t    {\n\t\txp->xp_context = EXPAND_SETTINGS;\n\t\tif ((c == 'l' || c == 'g') && xp->xp_pattern[2] == ':')\n\t\t    xp->xp_pattern += 2;\n\n\t    }\n\t}\n\telse if (c == '$')\n\t{\n\t    // environment variable\n\t    xp->xp_context = EXPAND_ENV_VARS;\n\t}\n\telse if (c == '=')\n\t{\n\t    has_expr = TRUE;\n\t    xp->xp_context = EXPAND_EXPRESSION;\n\t}\n\telse if (c == '#'\n\t\t&& xp->xp_context == EXPAND_EXPRESSION)\n\t{\n\t    // Autoload function/variable contains '#'.\n\t    break;\n\t}\n\telse if ((c == '<' || c == '#')\n\t\t&& xp->xp_context == EXPAND_FUNCTIONS\n\t\t&& vim_strchr(xp->xp_pattern, '(') == NULL)\n\t{\n\t    // Function name can start with \"<SNR>\" and contain '#'.\n\t    break;\n\t}\n\telse if (has_expr)\n\t{\n\t    if (c == '\"')\t    // string\n\t    {\n\t\twhile ((c = *++xp->xp_pattern) != NUL && c != '\"')\n\t\t    if (c == '\\\\' && xp->xp_pattern[1] != NUL)\n\t\t\t++xp->xp_pattern;\n\t\txp->xp_context = EXPAND_NOTHING;\n\t    }\n\t    else if (c == '\\'')\t    // literal string\n\t    {\n\t\t// Trick: '' is like stopping and starting a literal string.\n\t\twhile ((c = *++xp->xp_pattern) != NUL && c != '\\'')\n\t\t    /* skip */ ;\n\t\txp->xp_context = EXPAND_NOTHING;\n\t    }\n\t    else if (c == '|')\n\t    {\n\t\tif (xp->xp_pattern[1] == '|')\n\t\t{\n\t\t    ++xp->xp_pattern;\n\t\t    xp->xp_context = EXPAND_EXPRESSION;\n\t\t}\n\t\telse\n\t\t    xp->xp_context = EXPAND_COMMANDS;\n\t    }\n\t    else\n\t\txp->xp_context = EXPAND_EXPRESSION;\n\t}\n\telse\n\t    // Doesn't look like something valid, expand as an expression\n\t    // anyway.\n\t    xp->xp_context = EXPAND_EXPRESSION;\n\targ = xp->xp_pattern;\n\tif (*arg != NUL)\n\t    while ((c = *++arg) != NUL && (c == ' ' || c == '\\t'))\n\t\t/* skip */ ;\n    }\n\n    // \":exe one two\" completes \"two\"\n    if ((cmdidx == CMD_execute\n\t\t|| cmdidx == CMD_echo\n\t\t|| cmdidx == CMD_echon\n\t\t|| cmdidx == CMD_echomsg\n\t\t|| cmdidx == CMD_echowindow)\n\t    && xp->xp_context == EXPAND_EXPRESSION)\n    {\n\tfor (;;)\n\t{\n\t    char_u *n = skiptowhite(arg);\n\n\t    if (n == arg || IS_WHITE_OR_NUL(*skipwhite(n)))\n\t\tbreak;\n\t    arg = skipwhite(n);\n\t}\n    }\n\n    xp->xp_pattern = arg;\n}\n\n/*\n * Return TRUE if \"pat\" matches \"text\".\n * Does not use 'cpo' and always uses 'magic'.\n */\n    int\npattern_match(char_u *pat, char_u *text, int ic)\n{\n    int\t\tmatches = FALSE;\n    char_u\t*save_cpo;\n    regmatch_T\tregmatch;\n\n    // avoid 'l' flag in 'cpoptions'\n    save_cpo = p_cpo;\n    p_cpo = empty_option;\n    regmatch.regprog = vim_regcomp(pat, RE_MAGIC + RE_STRING);\n    if (regmatch.regprog != NULL)\n    {\n\tregmatch.rm_ic = ic;\n\tmatches = vim_regexec_nl(&regmatch, text, (colnr_T)0);\n\tvim_regfree(regmatch.regprog);\n    }\n    p_cpo = save_cpo;\n    return matches;\n}\n\n/*\n * Handle a name followed by \"(\".  Both for just \"name(arg)\" and for\n * \"expr->name(arg)\".\n * Returns OK or FAIL.\n */\n    static int\neval_func(\n\tchar_u\t    **arg,\t// points to \"(\", will be advanced\n\tevalarg_T   *evalarg,\n\tchar_u\t    *name,\n\tint\t    name_len,\n\ttypval_T    *rettv,\n\tint\t    flags,\n\ttypval_T    *basetv)\t// \"expr\" for \"expr->name(arg)\"\n{\n    int\t\tevaluate = flags & EVAL_EVALUATE;\n    char_u\t*s = name;\n    int\t\tlen = name_len;\n    partial_T\t*partial;\n    int\t\tret = OK;\n    type_T\t*type = NULL;\n    int\t\tfound_var = FALSE;\n\n    if (!evaluate)\n\tcheck_vars(s, len);\n\n    // If \"s\" is the name of a variable of type VAR_FUNC\n    // use its contents.\n    s = deref_func_name(s, &len, &partial,\n\t\t in_vim9script() ? &type : NULL, !evaluate, FALSE, &found_var);\n\n    // Need to make a copy, in case evaluating the arguments makes\n    // the name invalid.\n    s = vim_strsave(s);\n    if (s == NULL || (evaluate && (*s == NUL || (flags & EVAL_CONSTANT))))\n\tret = FAIL;\n    else\n    {\n\tfuncexe_T funcexe;\n\n\t// Invoke the function.\n\tCLEAR_FIELD(funcexe);\n\tfuncexe.fe_firstline = curwin->w_cursor.lnum;\n\tfuncexe.fe_lastline = curwin->w_cursor.lnum;\n\tfuncexe.fe_evaluate = evaluate;\n\tfuncexe.fe_partial = partial;\n\tfuncexe.fe_basetv = basetv;\n\tfuncexe.fe_check_type = type;\n\tfuncexe.fe_found_var = found_var;\n\tret = get_func_tv(s, len, rettv, arg, evalarg, &funcexe);\n    }\n    vim_free(s);\n\n    // If evaluate is FALSE rettv->v_type was not set in\n    // get_func_tv, but it's needed in handle_subscript() to parse\n    // what follows. So set it here.\n    if (rettv->v_type == VAR_UNKNOWN && !evaluate && **arg == '(')\n    {\n\trettv->vval.v_string = NULL;\n\trettv->v_type = VAR_FUNC;\n    }\n\n    // Stop the expression evaluation when immediately\n    // aborting on error, or when an interrupt occurred or\n    // an exception was thrown but not caught.\n    if (evaluate && aborting())\n    {\n\tif (ret == OK)\n\t    clear_tv(rettv);\n\tret = FAIL;\n    }\n    return ret;\n}\n\n/*\n * After a NL, skip over empty lines and comment-only lines.\n */\n    static char_u *\nnewline_skip_comments(char_u *arg)\n{\n    char_u *p = arg + 1;\n\n    for (;;)\n    {\n\tp = skipwhite(p);\n\n\tif (*p == NUL)\n\t    break;\n\tif (vim9_comment_start(p))\n\t{\n\t    char_u *nl = vim_strchr(p, NL);\n\n\t    if (nl == NULL)\n\t\t    break;\n\t    p = nl;\n\t}\n\tif (*p != NL)\n\t    break;\n\t++p;  // skip another NL\n    }\n    return p;\n}\n\n/*\n * Get the next line source line without advancing.  But do skip over comment\n * lines.\n * Only called for Vim9 script.\n */\n    static char_u *\ngetline_peek_skip_comments(evalarg_T *evalarg)\n{\n    for (;;)\n    {\n\tchar_u *next = getline_peek(evalarg->eval_getline,\n\t\t\t\t\t\t\t evalarg->eval_cookie);\n\tchar_u *p;\n\n\tif (next == NULL)\n\t    break;\n\tp = skipwhite(next);\n\tif (*p != NUL && !vim9_comment_start(p))\n\t    return next;\n\tif (eval_next_line(NULL, evalarg) == NULL)\n\t    break;\n    }\n    return NULL;\n}\n\n/*\n * If inside Vim9 script, \"arg\" points to the end of a line (ignoring a #\n * comment) and there is a next line, return the next line (skipping blanks)\n * and set \"getnext\".\n * Otherwise return the next non-white at or after \"arg\" and set \"getnext\" to\n * FALSE.\n * \"arg\" must point somewhere inside a line, not at the start.\n */\n    char_u *\neval_next_non_blank(char_u *arg, evalarg_T *evalarg, int *getnext)\n{\n    char_u *p = skipwhite(arg);\n\n    *getnext = FALSE;\n    if (in_vim9script()\n\t    && evalarg != NULL\n\t    && (evalarg->eval_cookie != NULL || evalarg->eval_cctx != NULL\n\t\t\t\t\t\t\t\t   || *p == NL)\n\t    && (*p == NUL || *p == NL\n\t\t\t     || (vim9_comment_start(p) && VIM_ISWHITE(p[-1]))))\n    {\n\tchar_u *next;\n\n\tif (*p == NL)\n\t    next = newline_skip_comments(p);\n\telse if (evalarg->eval_cookie != NULL)\n\t    next = getline_peek_skip_comments(evalarg);\n\telse\n\t    next = peek_next_line_from_context(evalarg->eval_cctx);\n\n\tif (next != NULL)\n\t{\n\t    *getnext = *p != NL;\n\t    return skipwhite(next);\n\t}\n    }\n    return p;\n}\n\n/*\n * To be called after eval_next_non_blank() sets \"getnext\" to TRUE.\n * Only called for Vim9 script.\n */\n    char_u *\neval_next_line(char_u *arg, evalarg_T *evalarg)\n{\n    garray_T\t*gap = &evalarg->eval_ga;\n    char_u\t*line;\n\n    if (arg != NULL)\n    {\n\tif (*arg == NL)\n\t    return newline_skip_comments(arg);\n\t// Truncate before a trailing comment, so that concatenating the lines\n\t// won't turn the rest into a comment.\n\tif (*skipwhite(arg) == '#')\n\t    *arg = NUL;\n    }\n\n    if (evalarg->eval_cookie != NULL)\n\tline = evalarg->eval_getline(0, evalarg->eval_cookie, 0,\n\t\t\t\t\t\t\t   GETLINE_CONCAT_ALL);\n    else\n\tline = next_line_from_context(evalarg->eval_cctx, TRUE);\n    if (line == NULL)\n\treturn NULL;\n\n    ++evalarg->eval_break_count;\n    if (gap->ga_itemsize > 0 && ga_grow(gap, 1) == OK)\n    {\n\tchar_u *p = skipwhite(line);\n\n\t// Going to concatenate the lines after parsing.  For an empty or\n\t// comment line use an empty string.\n\tif (*p == NUL || vim9_comment_start(p))\n\t{\n\t    vim_free(line);\n\t    line = vim_strsave((char_u *)\"\");\n\t}\n\n\t((char_u **)gap->ga_data)[gap->ga_len] = line;\n\t++gap->ga_len;\n    }\n    else if (evalarg->eval_cookie != NULL)\n    {\n\tfree_eval_tofree_later(evalarg);\n\tevalarg->eval_tofree = line;\n    }\n\n    // Advanced to the next line, \"arg\" no longer points into the previous\n    // line.\n    evalarg->eval_using_cmdline = FALSE;\n    return skipwhite(line);\n}\n\n/*\n * Call eval_next_non_blank() and get the next line if needed.\n */\n    char_u *\nskipwhite_and_linebreak(char_u *arg, evalarg_T *evalarg)\n{\n    int\t    getnext;\n    char_u  *p = skipwhite_and_nl(arg);\n\n    if (evalarg == NULL)\n\treturn skipwhite(arg);\n    eval_next_non_blank(p, evalarg, &getnext);\n    if (getnext)\n\treturn eval_next_line(arg, evalarg);\n    return p;\n}\n\n/*\n * The \"eval\" functions have an \"evalarg\" argument: When NULL or\n * \"evalarg->eval_flags\" does not have EVAL_EVALUATE, then the argument is only\n * parsed but not executed.  The functions may return OK, but the rettv will be\n * of type VAR_UNKNOWN.  The functions still returns FAIL for a syntax error.\n */\n\n/*\n * Handle zero level expression.\n * This calls eval1() and handles error message and nextcmd.\n * Put the result in \"rettv\" when returning OK and \"evaluate\" is TRUE.\n * Note: \"rettv.v_lock\" is not set.\n * \"evalarg\" can be NULL, EVALARG_EVALUATE or a pointer.\n * Return OK or FAIL.\n */\n    int\neval0(\n    char_u\t*arg,\n    typval_T\t*rettv,\n    exarg_T\t*eap,\n    evalarg_T\t*evalarg)\n{\n    return eval0_retarg(arg, rettv, eap, evalarg, NULL);\n}\n\n/*\n * If \"arg\" is a simple function call without arguments then call it and return\n * the result.  Otherwise return NOTDONE.\n */\n    int\nmay_call_simple_func(\n    char_u\t*arg,\n    typval_T\t*rettv)\n{\n    char_u  *parens = (char_u *)strstr((char *)arg, \"()\");\n    int\t    r = NOTDONE;\n\n    // If the expression is \"FuncName()\" then we can skip a lot of overhead.\n    if (parens != NULL && *skipwhite(parens + 2) == NUL)\n    {\n\tchar_u *p = STRNCMP(arg, \"<SNR>\", 5) == 0 ? skipdigits(arg + 5) : arg;\n\n\tif (to_name_end(p, TRUE) == parens)\n\t    r = call_simple_func(arg, (int)(parens - arg), rettv);\n    }\n    return r;\n}\n\n/*\n * Handle zero level expression with optimization for a simple function call.\n * Same arguments and return value as eval0().\n */\n    int\neval0_simple_funccal(\n    char_u\t*arg,\n    typval_T\t*rettv,\n    exarg_T\t*eap,\n    evalarg_T\t*evalarg)\n{\n    int\t    r = may_call_simple_func(arg, rettv);\n\n    if (r == NOTDONE)\n\tr = eval0_retarg(arg, rettv, eap, evalarg, NULL);\n    return r;\n}\n\n/*\n * Like eval0() but when \"retarg\" is not NULL store the pointer to after the\n * expression and don't check what comes after the expression.\n */\n    int\neval0_retarg(\n    char_u\t*arg,\n    typval_T\t*rettv,\n    exarg_T\t*eap,\n    evalarg_T\t*evalarg,\n    char_u\t**retarg)\n{\n    int\t\tret;\n    char_u\t*p;\n    char_u\t*expr_end;\n    int\t\tdid_emsg_before = did_emsg;\n    int\t\tcalled_emsg_before = called_emsg;\n    int\t\tflags = evalarg == NULL ? 0 : evalarg->eval_flags;\n    int\t\tcheck_for_end = retarg == NULL;\n    int\t\tend_error = FALSE;\n\n    p = skipwhite(arg);\n    ret = eval1(&p, rettv, evalarg);\n\n    if (ret != FAIL)\n    {\n\texpr_end = p;\n\tp = skipwhite(p);\n\n\t// In Vim9 script a command block is not split at NL characters for\n\t// commands using an expression argument.  Skip over a '#' comment to\n\t// check for a following NL.  Require white space before the '#'.\n\tif (in_vim9script() && p > expr_end && retarg == NULL)\n\t    while (*p == '#')\n\t    {\n\t\tchar_u *nl = vim_strchr(p, NL);\n\n\t\tif (nl == NULL)\n\t\t    break;\n\t\tp = skipwhite(nl + 1);\n\t\tif (eap != NULL && *p != NUL)\n\t\t    eap->nextcmd = p;\n\t\tcheck_for_end = FALSE;\n\t    }\n\n\tif (check_for_end)\n\t    end_error = !ends_excmd2(arg, p);\n    }\n\n    if (ret == FAIL || end_error)\n    {\n\tif (ret != FAIL)\n\t    clear_tv(rettv);\n\t/*\n\t * Report the invalid expression unless the expression evaluation has\n\t * been cancelled due to an aborting error, an interrupt, or an\n\t * exception, or we already gave a more specific error.\n\t * Also check called_emsg for when using assert_fails().\n\t */\n\tif (!aborting()\n\t\t&& did_emsg == did_emsg_before\n\t\t&& called_emsg == called_emsg_before\n\t\t&& (flags & EVAL_CONSTANT) == 0\n\t\t&& (!in_vim9script() || !vim9_bad_comment(p)))\n\t{\n\t    if (end_error)\n\t\tsemsg(_(e_trailing_characters_str), p);\n\t    else\n\t\tsemsg(_(e_invalid_expression_str), arg);\n\t}\n\n\t// Some of the expression may not have been consumed.  Do not check for\n\t// a next command to avoid more errors, unless \"|\" is following, which\n\t// could only be a command separator.\n\tif (eap != NULL && p != NULL\n\t\t\t  &&  skipwhite(p)[0] == '|' && skipwhite(p)[1] != '|')\n\t    eap->nextcmd = check_nextcmd(p);\n\treturn FAIL;\n    }\n\n    if (retarg != NULL)\n\t*retarg = p;\n    else if (check_for_end && eap != NULL)\n\tset_nextcmd(eap, p);\n\n    return ret;\n}\n\n/*\n * Handle top level expression:\n *\texpr2 ? expr1 : expr1\n *\texpr2 ?? expr1\n *\n * \"arg\" must point to the first non-white of the expression.\n * \"arg\" is advanced to just after the recognized expression.\n *\n * Note: \"rettv.v_lock\" is not set.\n *\n * Return OK or FAIL.\n */\n    int\neval1(char_u **arg, typval_T *rettv, evalarg_T *evalarg)\n{\n    char_u  *p;\n    int\t    getnext;\n\n    CLEAR_POINTER(rettv);\n\n    /*\n     * Get the first variable.\n     */\n    if (eval2(arg, rettv, evalarg) == FAIL)\n\treturn FAIL;\n\n    p = eval_next_non_blank(*arg, evalarg, &getnext);\n    if (*p == '?')\n    {\n\tint\t\top_falsy = p[1] == '?';\n\tint\t\tresult;\n\ttypval_T\tvar2;\n\tevalarg_T\t*evalarg_used = evalarg;\n\tevalarg_T\tlocal_evalarg;\n\tint\t\torig_flags;\n\tint\t\tevaluate;\n\tint\t\tvim9script = in_vim9script();\n\n\tif (evalarg == NULL)\n\t{\n\t    init_evalarg(&local_evalarg);\n\t    evalarg_used = &local_evalarg;\n\t}\n\torig_flags = evalarg_used->eval_flags;\n\tevaluate = evalarg_used->eval_flags & EVAL_EVALUATE;\n\n\tif (getnext)\n\t    *arg = eval_next_line(*arg, evalarg_used);\n\telse\n\t{\n\t    if (evaluate && vim9script && !VIM_ISWHITE(p[-1]))\n\t    {\n\t\terror_white_both(p, op_falsy ? 2 : 1);\n\t\tclear_tv(rettv);\n\t\treturn FAIL;\n\t    }\n\t    *arg = p;\n\t}\n\n\tresult = FALSE;\n\tif (evaluate)\n\t{\n\t    int\t\terror = FALSE;\n\n\t    if (op_falsy)\n\t\tresult = tv2bool(rettv);\n\t    else if (vim9script)\n\t\tresult = tv_get_bool_chk(rettv, &error);\n\t    else if (tv_get_number_chk(rettv, &error) != 0)\n\t\tresult = TRUE;\n\t    if (error || !op_falsy || !result)\n\t\tclear_tv(rettv);\n\t    if (error)\n\t\treturn FAIL;\n\t}\n\n\t/*\n\t * Get the second variable.  Recursive!\n\t */\n\tif (op_falsy)\n\t    ++*arg;\n\tif (evaluate && vim9script && !IS_WHITE_OR_NUL((*arg)[1]))\n\t{\n\t    error_white_both(*arg - (op_falsy ? 1 : 0), op_falsy ? 2 : 1);\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\t*arg = skipwhite_and_linebreak(*arg + 1, evalarg_used);\n\tevalarg_used->eval_flags = (op_falsy ? !result : result)\n\t\t\t\t    ? orig_flags : orig_flags & ~EVAL_EVALUATE;\n\tif (eval1(arg, &var2, evalarg_used) == FAIL)\n\t{\n\t    evalarg_used->eval_flags = orig_flags;\n\t    return FAIL;\n\t}\n\tif (!op_falsy || !result)\n\t    *rettv = var2;\n\n\tif (!op_falsy)\n\t{\n\t    /*\n\t     * Check for the \":\".\n\t     */\n\t    p = eval_next_non_blank(*arg, evalarg_used, &getnext);\n\t    if (*p != ':')\n\t    {\n\t\temsg(_(e_missing_colon_after_questionmark));\n\t\tif (evaluate && result)\n\t\t    clear_tv(rettv);\n\t\tevalarg_used->eval_flags = orig_flags;\n\t\treturn FAIL;\n\t    }\n\t    if (getnext)\n\t\t*arg = eval_next_line(*arg, evalarg_used);\n\t    else\n\t    {\n\t\tif (evaluate && vim9script && !VIM_ISWHITE(p[-1]))\n\t\t{\n\t\t    error_white_both(p, 1);\n\t\t    clear_tv(rettv);\n\t\t    evalarg_used->eval_flags = orig_flags;\n\t\t    return FAIL;\n\t\t}\n\t\t*arg = p;\n\t    }\n\n\t    /*\n\t     * Get the third variable.  Recursive!\n\t     */\n\t    if (evaluate && vim9script && !IS_WHITE_OR_NUL((*arg)[1]))\n\t    {\n\t\terror_white_both(*arg, 1);\n\t\tclear_tv(rettv);\n\t\tevalarg_used->eval_flags = orig_flags;\n\t\treturn FAIL;\n\t    }\n\t    *arg = skipwhite_and_linebreak(*arg + 1, evalarg_used);\n\t    evalarg_used->eval_flags = !result ? orig_flags\n\t\t\t\t\t\t : orig_flags & ~EVAL_EVALUATE;\n\t    if (eval1(arg, &var2, evalarg_used) == FAIL)\n\t    {\n\t\tif (evaluate && result)\n\t\t    clear_tv(rettv);\n\t\tevalarg_used->eval_flags = orig_flags;\n\t\treturn FAIL;\n\t    }\n\t    if (evaluate && !result)\n\t\t*rettv = var2;\n\t}\n\n\tif (evalarg == NULL)\n\t    clear_evalarg(&local_evalarg, NULL);\n\telse\n\t    evalarg->eval_flags = orig_flags;\n    }\n\n    return OK;\n}\n\n/*\n * Handle first level expression:\n *\texpr2 || expr2 || expr2\t    logical OR\n *\n * \"arg\" must point to the first non-white of the expression.\n * \"arg\" is advanced to just after the recognized expression.\n *\n * Return OK or FAIL.\n */\n    static int\neval2(char_u **arg, typval_T *rettv, evalarg_T *evalarg)\n{\n    char_u\t*p;\n    int\t\tgetnext;\n\n    /*\n     * Get the first expression.\n     */\n    if (eval3(arg, rettv, evalarg) == FAIL)\n\treturn FAIL;\n\n    /*\n     * Handle the  \"||\" operator.\n     */\n    p = eval_next_non_blank(*arg, evalarg, &getnext);\n    if (p[0] == '|' && p[1] == '|')\n    {\n\tevalarg_T   *evalarg_used = evalarg;\n\tevalarg_T   local_evalarg;\n\tint\t    evaluate;\n\tint\t    orig_flags;\n\tlong\t    result = FALSE;\n\ttypval_T    var2;\n\tint\t    error = FALSE;\n\tint\t    vim9script = in_vim9script();\n\n\tif (evalarg == NULL)\n\t{\n\t    init_evalarg(&local_evalarg);\n\t    evalarg_used = &local_evalarg;\n\t}\n\torig_flags = evalarg_used->eval_flags;\n\tevaluate = orig_flags & EVAL_EVALUATE;\n\tif (evaluate)\n\t{\n\t    if (vim9script)\n\t\tresult = tv_get_bool_chk(rettv, &error);\n\t    else if (tv_get_number_chk(rettv, &error) != 0)\n\t\tresult = TRUE;\n\t    clear_tv(rettv);\n\t    if (error)\n\t\treturn FAIL;\n\t}\n\n\t/*\n\t * Repeat until there is no following \"||\".\n\t */\n\twhile (p[0] == '|' && p[1] == '|')\n\t{\n\t    if (getnext)\n\t\t*arg = eval_next_line(*arg, evalarg_used);\n\t    else\n\t    {\n\t\tif (evaluate && vim9script && !VIM_ISWHITE(p[-1]))\n\t\t{\n\t\t    error_white_both(p, 2);\n\t\t    clear_tv(rettv);\n\t\t    return FAIL;\n\t\t}\n\t\t*arg = p;\n\t    }\n\n\t    /*\n\t     * Get the second variable.\n\t     */\n\t    if (evaluate && vim9script && !IS_WHITE_OR_NUL((*arg)[2]))\n\t    {\n\t\terror_white_both(*arg, 2);\n\t\tclear_tv(rettv);\n\t\treturn FAIL;\n\t    }\n\t    *arg = skipwhite_and_linebreak(*arg + 2, evalarg_used);\n\t    evalarg_used->eval_flags = !result ? orig_flags\n\t\t\t\t\t\t : orig_flags & ~EVAL_EVALUATE;\n\t    if (eval3(arg, &var2, evalarg_used) == FAIL)\n\t\treturn FAIL;\n\n\t    /*\n\t     * Compute the result.\n\t     */\n\t    if (evaluate && !result)\n\t    {\n\t\tif (vim9script)\n\t\t    result = tv_get_bool_chk(&var2, &error);\n\t\telse if (tv_get_number_chk(&var2, &error) != 0)\n\t\t    result = TRUE;\n\t\tclear_tv(&var2);\n\t\tif (error)\n\t\t    return FAIL;\n\t    }\n\t    if (evaluate)\n\t    {\n\t\tif (vim9script)\n\t\t{\n\t\t    rettv->v_type = VAR_BOOL;\n\t\t    rettv->vval.v_number = result ? VVAL_TRUE : VVAL_FALSE;\n\t\t}\n\t\telse\n\t\t{\n\t\t    rettv->v_type = VAR_NUMBER;\n\t\t    rettv->vval.v_number = result;\n\t\t}\n\t    }\n\n\t    p = eval_next_non_blank(*arg, evalarg_used, &getnext);\n\t}\n\n\tif (evalarg == NULL)\n\t    clear_evalarg(&local_evalarg, NULL);\n\telse\n\t    evalarg->eval_flags = orig_flags;\n    }\n\n    return OK;\n}\n\n/*\n * Handle second level expression:\n *\texpr3 && expr3 && expr3\t    logical AND\n *\n * \"arg\" must point to the first non-white of the expression.\n * \"arg\" is advanced to just after the recognized expression.\n *\n * Return OK or FAIL.\n */\n    static int\neval3(char_u **arg, typval_T *rettv, evalarg_T *evalarg)\n{\n    char_u\t*p;\n    int\t\tgetnext;\n\n    /*\n     * Get the first expression.\n     */\n    if (eval4(arg, rettv, evalarg) == FAIL)\n\treturn FAIL;\n\n    /*\n     * Handle the \"&&\" operator.\n     */\n    p = eval_next_non_blank(*arg, evalarg, &getnext);\n    if (p[0] == '&' && p[1] == '&')\n    {\n\tevalarg_T   *evalarg_used = evalarg;\n\tevalarg_T   local_evalarg;\n\tint\t    orig_flags;\n\tint\t    evaluate;\n\tlong\t    result = TRUE;\n\ttypval_T    var2;\n\tint\t    error = FALSE;\n\tint\t    vim9script = in_vim9script();\n\n\tif (evalarg == NULL)\n\t{\n\t    init_evalarg(&local_evalarg);\n\t    evalarg_used = &local_evalarg;\n\t}\n\torig_flags = evalarg_used->eval_flags;\n\tevaluate = orig_flags & EVAL_EVALUATE;\n\tif (evaluate)\n\t{\n\t    if (vim9script)\n\t\tresult = tv_get_bool_chk(rettv, &error);\n\t    else if (tv_get_number_chk(rettv, &error) == 0)\n\t\tresult = FALSE;\n\t    clear_tv(rettv);\n\t    if (error)\n\t\treturn FAIL;\n\t}\n\n\t/*\n\t * Repeat until there is no following \"&&\".\n\t */\n\twhile (p[0] == '&' && p[1] == '&')\n\t{\n\t    if (getnext)\n\t\t*arg = eval_next_line(*arg, evalarg_used);\n\t    else\n\t    {\n\t\tif (evaluate && vim9script && !VIM_ISWHITE(p[-1]))\n\t\t{\n\t\t    error_white_both(p, 2);\n\t\t    clear_tv(rettv);\n\t\t    return FAIL;\n\t\t}\n\t\t*arg = p;\n\t    }\n\n\t    /*\n\t     * Get the second variable.\n\t     */\n\t    if (evaluate && vim9script && !IS_WHITE_OR_NUL((*arg)[2]))\n\t    {\n\t\terror_white_both(*arg, 2);\n\t\tclear_tv(rettv);\n\t\treturn FAIL;\n\t    }\n\t    *arg = skipwhite_and_linebreak(*arg + 2, evalarg_used);\n\t    evalarg_used->eval_flags = result ? orig_flags\n\t\t\t\t\t\t : orig_flags & ~EVAL_EVALUATE;\n\t    CLEAR_FIELD(var2);\n\t    if (eval4(arg, &var2, evalarg_used) == FAIL)\n\t\treturn FAIL;\n\n\t    /*\n\t     * Compute the result.\n\t     */\n\t    if (evaluate && result)\n\t    {\n\t\tif (vim9script)\n\t\t    result = tv_get_bool_chk(&var2, &error);\n\t\telse if (tv_get_number_chk(&var2, &error) == 0)\n\t\t    result = FALSE;\n\t\tclear_tv(&var2);\n\t\tif (error)\n\t\t    return FAIL;\n\t    }\n\t    if (evaluate)\n\t    {\n\t\tif (vim9script)\n\t\t{\n\t\t    rettv->v_type = VAR_BOOL;\n\t\t    rettv->vval.v_number = result ? VVAL_TRUE : VVAL_FALSE;\n\t\t}\n\t\telse\n\t\t{\n\t\t    rettv->v_type = VAR_NUMBER;\n\t\t    rettv->vval.v_number = result;\n\t\t}\n\t    }\n\n\t    p = eval_next_non_blank(*arg, evalarg_used, &getnext);\n\t}\n\n\tif (evalarg == NULL)\n\t    clear_evalarg(&local_evalarg, NULL);\n\telse\n\t    evalarg->eval_flags = orig_flags;\n    }\n\n    return OK;\n}\n\n/*\n * Handle third level expression:\n *\tvar1 == var2\n *\tvar1 =~ var2\n *\tvar1 != var2\n *\tvar1 !~ var2\n *\tvar1 > var2\n *\tvar1 >= var2\n *\tvar1 < var2\n *\tvar1 <= var2\n *\tvar1 is var2\n *\tvar1 isnot var2\n *\n * \"arg\" must point to the first non-white of the expression.\n * \"arg\" is advanced to just after the recognized expression.\n *\n * Return OK or FAIL.\n */\n    static int\neval4(char_u **arg, typval_T *rettv, evalarg_T *evalarg)\n{\n    char_u\t*p;\n    int\t\tgetnext;\n    exprtype_T\ttype = EXPR_UNKNOWN;\n    int\t\tlen = 2;\n    int\t\ttype_is = FALSE;\n\n    /*\n     * Get the first expression.\n     */\n    if (eval5(arg, rettv, evalarg) == FAIL)\n\treturn FAIL;\n\n    p = eval_next_non_blank(*arg, evalarg, &getnext);\n\n    type = get_compare_type(p, &len, &type_is);\n\n    /*\n     * If there is a comparative operator, use it.\n     */\n    if (type != EXPR_UNKNOWN)\n    {\n\ttypval_T    var2;\n\tint\t    ic;\n\tint\t    vim9script = in_vim9script();\n\tint\t    evaluate = evalarg == NULL\n\t\t\t\t   ? 0 : (evalarg->eval_flags & EVAL_EVALUATE);\n\tlong\t    comp_lnum = SOURCING_LNUM;\n\n\tif (getnext)\n\t{\n\t    *arg = eval_next_line(*arg, evalarg);\n\t    p = *arg;\n\t}\n\telse if (evaluate && vim9script && !VIM_ISWHITE(**arg))\n\t{\n\t    error_white_both(*arg, len);\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\n\tif (vim9script && type_is && (p[len] == '?' || p[len] == '#'))\n\t{\n\t    semsg(_(e_invalid_expression_str), p);\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\n\t// extra question mark appended: ignore case\n\tif (p[len] == '?')\n\t{\n\t    ic = TRUE;\n\t    ++len;\n\t}\n\t// extra '#' appended: match case\n\telse if (p[len] == '#')\n\t{\n\t    ic = FALSE;\n\t    ++len;\n\t}\n\t// nothing appended: use 'ignorecase' if not in Vim script\n\telse\n\t    ic = vim9script ? FALSE : p_ic;\n\n\t/*\n\t * Get the second variable.\n\t */\n\tif (evaluate && vim9script && !IS_WHITE_OR_NUL(p[len]))\n\t{\n\t    error_white_both(p, len);\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\t*arg = skipwhite_and_linebreak(p + len, evalarg);\n\tif (eval5(arg, &var2, evalarg) == FAIL)\n\t{\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\tif (evaluate)\n\t{\n\t    int ret;\n\n\t    // use the line of the comparison for messages\n\t    SOURCING_LNUM = comp_lnum;\n\t    if (vim9script && check_compare_types(type, rettv, &var2) == FAIL)\n\t    {\n\t\tret = FAIL;\n\t\tclear_tv(rettv);\n\t    }\n\t    else\n\t\tret = typval_compare(rettv, &var2, type, ic);\n\t    clear_tv(&var2);\n\t    return ret;\n\t}\n    }\n\n    return OK;\n}\n\n/*\n * Make a copy of blob \"tv1\" and append blob \"tv2\".\n */\n    void\neval_addblob(typval_T *tv1, typval_T *tv2)\n{\n    blob_T  *b1 = tv1->vval.v_blob;\n    blob_T  *b2 = tv2->vval.v_blob;\n    blob_T  *b = blob_alloc();\n    int\t    i;\n\n    if (b == NULL)\n\treturn;\n\n    for (i = 0; i < blob_len(b1); i++)\n\tga_append(&b->bv_ga, blob_get(b1, i));\n    for (i = 0; i < blob_len(b2); i++)\n\tga_append(&b->bv_ga, blob_get(b2, i));\n\n    clear_tv(tv1);\n    rettv_blob_set(tv1, b);\n}\n\n/*\n * Make a copy of list \"tv1\" and append list \"tv2\".\n */\n    int\neval_addlist(typval_T *tv1, typval_T *tv2)\n{\n    typval_T var3;\n\n    // concatenate Lists\n    if (list_concat(tv1->vval.v_list, tv2->vval.v_list, &var3) == FAIL)\n    {\n\tclear_tv(tv1);\n\tclear_tv(tv2);\n\treturn FAIL;\n    }\n    clear_tv(tv1);\n    *tv1 = var3;\n    return OK;\n}\n\n/*\n * Handle the bitwise left/right shift operator expression:\n *\tvar1 << var2\n *\tvar1 >> var2\n *\n * \"arg\" must point to the first non-white of the expression.\n * \"arg\" is advanced to just after the recognized expression.\n *\n * Return OK or FAIL.\n */\n    static int\neval5(char_u **arg, typval_T *rettv, evalarg_T *evalarg)\n{\n    /*\n     * Get the first expression.\n     */\n    if (eval6(arg, rettv, evalarg) == FAIL)\n\treturn FAIL;\n\n    /*\n     * Repeat computing, until no '<<' or '>>' is following.\n     */\n    for (;;)\n    {\n\tchar_u\t\t*p;\n\tint\t\tgetnext;\n\texprtype_T\ttype;\n\tint\t\tevaluate;\n\ttypval_T\tvar2;\n\tint\t\tvim9script;\n\n\tp = eval_next_non_blank(*arg, evalarg, &getnext);\n\tif (p[0] == '<' && p[1] == '<')\n\t    type = EXPR_LSHIFT;\n\telse if (p[0] == '>' && p[1] == '>')\n\t    type = EXPR_RSHIFT;\n\telse\n\t    return OK;\n\n\t// Handle a bitwise left or right shift operator\n\tif (rettv->v_type != VAR_NUMBER)\n\t{\n\t    // left operand should be a number\n\t    emsg(_(e_bitshift_ops_must_be_number));\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\n\tevaluate = evalarg == NULL ? 0 : (evalarg->eval_flags & EVAL_EVALUATE);\n\tvim9script = in_vim9script();\n\tif (getnext)\n\t{\n\t    *arg = eval_next_line(*arg, evalarg);\n\t    p = *arg;\n\t}\n\telse if (evaluate && vim9script && !VIM_ISWHITE(**arg))\n\t{\n\t    error_white_both(*arg, 2);\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\n\t/*\n\t * Get the second variable.\n\t */\n\tif (evaluate && vim9script && !IS_WHITE_OR_NUL(p[2]))\n\t{\n\t    error_white_both(p, 2);\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\t*arg = skipwhite_and_linebreak(p + 2, evalarg);\n\tif (eval6(arg, &var2, evalarg) == FAIL)\n\t{\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\n\tif (var2.v_type != VAR_NUMBER || var2.vval.v_number < 0)\n\t{\n\t    // right operand should be a positive number\n\t    if (var2.v_type != VAR_NUMBER)\n\t\temsg(_(e_bitshift_ops_must_be_number));\n\t    else\n\t\temsg(_(e_bitshift_ops_must_be_positive));\n\t    clear_tv(rettv);\n\t    clear_tv(&var2);\n\t    return FAIL;\n\t}\n\n\tif (evaluate)\n\t{\n\t    if (var2.vval.v_number > MAX_LSHIFT_BITS)\n\t\t// shifting more bits than we have always results in zero\n\t\trettv->vval.v_number = 0;\n\t    else if (type == EXPR_LSHIFT)\n\t\trettv->vval.v_number =\n\t\t      (uvarnumber_T)rettv->vval.v_number << var2.vval.v_number;\n\t    else\n\t\trettv->vval.v_number =\n\t\t      (uvarnumber_T)rettv->vval.v_number >> var2.vval.v_number;\n\t}\n\n\tclear_tv(&var2);\n    }\n\n    return OK;\n}\n\n/*\n * Handle fifth level expression:\n *\t+\tnumber addition, concatenation of list or blob\n *\t-\tnumber subtraction\n *\t.\tstring concatenation (if script version is 1)\n *\t..\tstring concatenation\n *\n * \"arg\" must point to the first non-white of the expression.\n * \"arg\" is advanced to just after the recognized expression.\n *\n * Return OK or FAIL.\n */\n    static int\neval6(char_u **arg, typval_T *rettv, evalarg_T *evalarg)\n{\n    /*\n     * Get the first expression.\n     */\n    if (eval7(arg, rettv, evalarg, FALSE) == FAIL)\n\treturn FAIL;\n\n    /*\n     * Repeat computing, until no '+', '-' or '.' is following.\n     */\n    for (;;)\n    {\n\tint\t    evaluate;\n\tint\t    getnext;\n\tchar_u\t    *p;\n\tint\t    op;\n\tint\t    oplen;\n\tint\t    concat;\n\ttypval_T    var2;\n\tint\t    vim9script = in_vim9script();\n\n\t// \".\" is only string concatenation when scriptversion is 1\n\t// \"+=\", \"-=\" and \"..=\" are assignments\n\t// \"++\" and \"--\" on the next line are a separate command.\n\tp = eval_next_non_blank(*arg, evalarg, &getnext);\n\top = *p;\n\tconcat = op == '.' && (*(p + 1) == '.' || in_old_script(2));\n\tif ((op != '+' && op != '-' && !concat) || p[1] == '='\n\t\t\t\t\t       || (p[1] == '.' && p[2] == '='))\n\t    break;\n\tif (getnext && (op == '+' || op == '-') && p[0] == p[1])\n\t    break;\n\n\tevaluate = evalarg == NULL ? 0 : (evalarg->eval_flags & EVAL_EVALUATE);\n\toplen = (concat && p[1] == '.') ? 2 : 1;\n\tif (getnext)\n\t    *arg = eval_next_line(*arg, evalarg);\n\telse\n\t{\n\t    if (evaluate && vim9script && !VIM_ISWHITE(**arg))\n\t    {\n\t\terror_white_both(*arg, oplen);\n\t\tclear_tv(rettv);\n\t\treturn FAIL;\n\t    }\n\t    *arg = p;\n\t}\n\tif ((op != '+' || (rettv->v_type != VAR_LIST\n\t\t\t\t\t\t && rettv->v_type != VAR_BLOB))\n\t\t&& (op == '.' || rettv->v_type != VAR_FLOAT)\n\t\t&& evaluate)\n\t{\n\t    int\t\terror = FALSE;\n\n\t    // For \"list + ...\", an illegal use of the first operand as\n\t    // a number cannot be determined before evaluating the 2nd\n\t    // operand: if this is also a list, all is ok.\n\t    // For \"something . ...\", \"something - ...\" or \"non-list + ...\",\n\t    // we know that the first operand needs to be a string or number\n\t    // without evaluating the 2nd operand.  So check before to avoid\n\t    // side effects after an error.\n\t    if (op != '.')\n\t\ttv_get_number_chk(rettv, &error);\n\t    if ((op == '.' && tv_get_string_chk(rettv) == NULL) || error)\n\t    {\n\t\tclear_tv(rettv);\n\t\treturn FAIL;\n\t    }\n\t}\n\n\t/*\n\t * Get the second variable.\n\t */\n\tif (evaluate && vim9script && !IS_WHITE_OR_NUL((*arg)[oplen]))\n\t{\n\t    error_white_both(*arg, oplen);\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\t*arg = skipwhite_and_linebreak(*arg + oplen, evalarg);\n\tif (eval7(arg, &var2, evalarg, !vim9script && op == '.') == FAIL)\n\t{\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\n\tif (evaluate)\n\t{\n\t    /*\n\t     * Compute the result.\n\t     */\n\t    if (op == '.')\n\t    {\n\t\tchar_u\tbuf1[NUMBUFLEN], buf2[NUMBUFLEN];\n\t\tchar_u\t*s1 = tv_get_string_buf(rettv, buf1);\n\t\tchar_u\t*s2 = NULL;\n\n\t\tif (vim9script && (var2.v_type == VAR_VOID\n\t\t\t|| var2.v_type == VAR_CHANNEL\n\t\t\t|| var2.v_type == VAR_JOB))\n\t\t    semsg(_(e_using_invalid_value_as_string_str),\n\t\t\t\t\t\t   vartype_name(var2.v_type));\n\t\telse if (vim9script && var2.v_type == VAR_FLOAT)\n\t\t{\n\t\t    vim_snprintf((char *)buf2, NUMBUFLEN, \"%g\",\n\t\t\t\t\t\t\t    var2.vval.v_float);\n\t\t    s2 = buf2;\n\t\t}\n\t\telse\n\t\t    s2 = tv_get_string_buf_chk(&var2, buf2);\n\t\tif (s2 == NULL)\t\t// type error ?\n\t\t{\n\t\t    clear_tv(rettv);\n\t\t    clear_tv(&var2);\n\t\t    return FAIL;\n\t\t}\n\t\tp = concat_str(s1, s2);\n\t\tclear_tv(rettv);\n\t\trettv->v_type = VAR_STRING;\n\t\trettv->vval.v_string = p;\n\t    }\n\t    else if (op == '+' && rettv->v_type == VAR_BLOB\n\t\t\t\t\t\t   && var2.v_type == VAR_BLOB)\n\t\teval_addblob(rettv, &var2);\n\t    else if (op == '+' && rettv->v_type == VAR_LIST\n\t\t\t\t\t\t   && var2.v_type == VAR_LIST)\n\t    {\n\t\tif (eval_addlist(rettv, &var2) == FAIL)\n\t\t    return FAIL;\n\t    }\n\t    else\n\t    {\n\t\tint\t\terror = FALSE;\n\t\tvarnumber_T\tn1, n2;\n\t\tfloat_T\t\tf1 = 0, f2 = 0;\n\n\t\tif (rettv->v_type == VAR_FLOAT)\n\t\t{\n\t\t    f1 = rettv->vval.v_float;\n\t\t    n1 = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t    n1 = tv_get_number_chk(rettv, &error);\n\t\t    if (error)\n\t\t    {\n\t\t\t// This can only happen for \"list + non-list\" or\n\t\t\t// \"blob + non-blob\".  For \"non-list + ...\" or\n\t\t\t// \"something - ...\", we returned before evaluating the\n\t\t\t// 2nd operand.\n\t\t\tclear_tv(rettv);\n\t\t\tclear_tv(&var2);\n\t\t\treturn FAIL;\n\t\t    }\n\t\t    if (var2.v_type == VAR_FLOAT)\n\t\t\tf1 = n1;\n\t\t}\n\t\tif (var2.v_type == VAR_FLOAT)\n\t\t{\n\t\t    f2 = var2.vval.v_float;\n\t\t    n2 = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t    n2 = tv_get_number_chk(&var2, &error);\n\t\t    if (error)\n\t\t    {\n\t\t\tclear_tv(rettv);\n\t\t\tclear_tv(&var2);\n\t\t\treturn FAIL;\n\t\t    }\n\t\t    if (rettv->v_type == VAR_FLOAT)\n\t\t\tf2 = n2;\n\t\t}\n\t\tclear_tv(rettv);\n\n\t\t// If there is a float on either side the result is a float.\n\t\tif (rettv->v_type == VAR_FLOAT || var2.v_type == VAR_FLOAT)\n\t\t{\n\t\t    if (op == '+')\n\t\t\tf1 = f1 + f2;\n\t\t    else\n\t\t\tf1 = f1 - f2;\n\t\t    rettv->v_type = VAR_FLOAT;\n\t\t    rettv->vval.v_float = f1;\n\t\t}\n\t\telse\n\t\t{\n\t\t    if (op == '+')\n\t\t\tn1 = n1 + n2;\n\t\t    else\n\t\t\tn1 = n1 - n2;\n\t\t    rettv->v_type = VAR_NUMBER;\n\t\t    rettv->vval.v_number = n1;\n\t\t}\n\t    }\n\t    clear_tv(&var2);\n\t}\n    }\n    return OK;\n}\n\n/*\n * Handle sixth level expression:\n *\t*\tnumber multiplication\n *\t/\tnumber division\n *\t%\tnumber modulo\n *\n * \"arg\" must point to the first non-white of the expression.\n * \"arg\" is advanced to just after the recognized expression.\n *\n * Return OK or FAIL.\n */\n    static int\neval7(\n    char_u\t**arg,\n    typval_T\t*rettv,\n    evalarg_T\t*evalarg,\n    int\t\twant_string)  // after \".\" operator\n{\n    int\t    use_float = FALSE;\n\n    /*\n     * Get the first expression.\n     */\n    if (eval8(arg, rettv, evalarg, want_string) == FAIL)\n\treturn FAIL;\n\n    /*\n     * Repeat computing, until no '*', '/' or '%' is following.\n     */\n    for (;;)\n    {\n\tint\t    evaluate;\n\tint\t    getnext;\n\ttypval_T    var2;\n\tchar_u\t    *p;\n\tint\t    op;\n\tvarnumber_T n1, n2;\n\tfloat_T\t    f1, f2;\n\tint\t    error;\n\n\t// \"*=\", \"/=\" and \"%=\" are assignments\n\tp = eval_next_non_blank(*arg, evalarg, &getnext);\n\top = *p;\n\tif ((op != '*' && op != '/' && op != '%') || p[1] == '=')\n\t    break;\n\n\tevaluate = evalarg == NULL ? 0 : (evalarg->eval_flags & EVAL_EVALUATE);\n\tif (getnext)\n\t    *arg = eval_next_line(*arg, evalarg);\n\telse\n\t{\n\t    if (evaluate && in_vim9script() && !VIM_ISWHITE(**arg))\n\t    {\n\t\terror_white_both(*arg, 1);\n\t\tclear_tv(rettv);\n\t\treturn FAIL;\n\t    }\n\t    *arg = p;\n\t}\n\n\tf1 = 0;\n\tf2 = 0;\n\terror = FALSE;\n\tif (evaluate)\n\t{\n\t    if (rettv->v_type == VAR_FLOAT)\n\t    {\n\t\tf1 = rettv->vval.v_float;\n\t\tuse_float = TRUE;\n\t\tn1 = 0;\n\t    }\n\t    else\n\t\tn1 = tv_get_number_chk(rettv, &error);\n\t    clear_tv(rettv);\n\t    if (error)\n\t\treturn FAIL;\n\t}\n\telse\n\t    n1 = 0;\n\n\t/*\n\t * Get the second variable.\n\t */\n\tif (evaluate && in_vim9script() && !IS_WHITE_OR_NUL((*arg)[1]))\n\t{\n\t    error_white_both(*arg, 1);\n\t    clear_tv(rettv);\n\t    return FAIL;\n\t}\n\t*arg = skipwhite_and_linebreak(*arg + 1, evalarg);\n\tif (eval8(arg, &var2, evalarg, FALSE) == FAIL)\n\t    return FAIL;\n\n\tif (evaluate)\n\t{\n\t    if (var2.v_type == VAR_FLOAT)\n\t    {\n\t\tif (!use_float)\n\t\t{\n\t\t    f1 = n1;\n\t\t    use_float = TRUE;\n\t\t}\n\t\tf2 = var2.vval.v_float;\n\t\tn2 = 0;\n\t    }\n\t    else\n\t    {\n\t\tn2 = tv_get_number_chk(&var2, &error);\n\t\tclear_tv(&var2);\n\t\tif (error)\n\t\t    return FAIL;\n\t\tif (use_float)\n\t\t    f2 = n2;\n\t    }\n\n\t    /*\n\t     * Compute the result.\n\t     * When either side is a float the result is a float.\n\t     */\n\t    if (use_float)\n\t    {\n\t\tif (op == '*')\n\t\t    f1 = f1 * f2;\n\t\telse if (op == '/')\n\t\t{\n#ifdef VMS\n\t\t    // VMS crashes on divide by zero, work around it\n\t\t    if (f2 == 0.0)\n\t\t    {\n\t\t\tif (f1 == 0)\n\t\t\t    f1 = -1 * __F_FLT_MAX - 1L;   // similar to NaN\n\t\t\telse if (f1 < 0)\n\t\t\t    f1 = -1 * __F_FLT_MAX;\n\t\t\telse\n\t\t\t    f1 = __F_FLT_MAX;\n\t\t    }\n\t\t    else\n\t\t\tf1 = f1 / f2;\n#else\n\t\t    // We rely on the floating point library to handle divide\n\t\t    // by zero to result in \"inf\" and not a crash.\n\t\t    f1 = f1 / f2;\n#endif\n\t\t}\n\t\telse\n\t\t{\n\t\t    emsg(_(e_cannot_use_percent_with_float));\n\t\t    return FAIL;\n\t\t}\n\t\trettv->v_type = VAR_FLOAT;\n\t\trettv->vval.v_float = f1;\n\t    }\n\t    else\n\t    {\n\t\tint\t    failed = FALSE;\n\n\t\tif (op == '*')\n\t\t    n1 = n1 * n2;\n\t\telse if (op == '/')\n\t\t    n1 = num_divide(n1, n2, &failed);\n\t\telse\n\t\t    n1 = num_modulus(n1, n2, &failed);\n\t\tif (failed)\n\t\t    return FAIL;\n\n\t\trettv->v_type = VAR_NUMBER;\n\t\trettv->vval.v_number = n1;\n\t    }\n\t}\n    }\n\n    return OK;\n}\n\n/*\n * Handle a type cast before a base level expression.\n * \"arg\" must point to the first non-white of the expression.\n * \"arg\" is advanced to just after the recognized expression.\n * Return OK or FAIL.\n */\n    static int\neval8(\n    char_u\t**arg,\n    typval_T\t*rettv,\n    evalarg_T\t*evalarg,\n    int\t\twant_string)\t// after \".\" operator\n{\n    type_T\t*want_type = NULL;\n    garray_T\ttype_list;\t    // list of pointers to allocated types\n    int\t\tres;\n    int\t\tevaluate = evalarg == NULL ? 0\n\t\t\t\t       : (evalarg->eval_flags & EVAL_EVALUATE);\n\n    // Recognize <type> in Vim9 script only.\n    if (in_vim9script() && **arg == '<' && eval_isnamec1((*arg)[1])\n\t\t\t\t\t     && STRNCMP(*arg, \"<SNR>\", 5) != 0)\n    {\n\t++*arg;\n\tga_init2(&type_list, sizeof(type_T *), 10);\n\twant_type = parse_type(arg, &type_list, TRUE);\n\tif (want_type == NULL && (evaluate || **arg != '>'))\n\t{\n\t    clear_type_list(&type_list);\n\t    return FAIL;\n\t}\n\n\tif (**arg != '>')\n\t{\n\t    if (*skipwhite(*arg) == '>')\n\t\tsemsg(_(e_no_white_space_allowed_before_str_str), \">\", *arg);\n\t    else\n\t\temsg(_(e_missing_gt));\n\t    clear_type_list(&type_list);\n\t    return FAIL;\n\t}\n\t++*arg;\n\t*arg = skipwhite_and_linebreak(*arg, evalarg);\n    }\n\n    res = eval9(arg, rettv, evalarg, want_string);\n\n    if (want_type != NULL && evaluate)\n    {\n\tif (res == OK)\n\t{\n\t    type_T *actual = typval2type(rettv, get_copyID(), &type_list,\n\t\t\t\t\t\t\t       TVTT_DO_MEMBER);\n\n\t    if (!equal_type(want_type, actual, 0))\n\t    {\n\t\tif (want_type == &t_bool && actual != &t_bool\n\t\t\t\t\t&& (actual->tt_flags & TTFLAG_BOOL_OK))\n\t\t{\n\t\t    int n = tv2bool(rettv);\n\n\t\t    // can use \"0\" and \"1\" for boolean in some places\n\t\t    clear_tv(rettv);\n\t\t    rettv->v_type = VAR_BOOL;\n\t\t    rettv->vval.v_number = n ? VVAL_TRUE : VVAL_FALSE;\n\t\t}\n\t\telse\n\t\t{\n\t\t    where_T where = WHERE_INIT;\n\n\t\t    where.wt_variable = TRUE;\n\t\t    res = check_type(want_type, actual, TRUE, where);\n\t\t}\n\t    }\n\t}\n\tclear_type_list(&type_list);\n    }\n\n    return res;\n}\n\n    int\neval_leader(char_u **arg, int vim9)\n{\n    char_u\t*s = *arg;\n    char_u\t*p = *arg;\n\n    while (*p == '!' || *p == '-' || *p == '+')\n    {\n\tchar_u *n = skipwhite(p + 1);\n\n\t// ++, --, -+ and +- are not accepted in Vim9 script\n\tif (vim9 && (*p == '-' || *p == '+') && (*n == '-' || *n == '+'))\n\t{\n\t    semsg(_(e_invalid_expression_str), s);\n\t    return FAIL;\n\t}\n\tp = n;\n    }\n    *arg = p;\n    return OK;\n}\n\n/*\n * Check for a predefined value \"true\", \"false\" and \"null.*\".\n * Return OK when recognized.\n */\n    int\nhandle_predefined(char_u *s, int len, typval_T *rettv)\n{\n    switch (len)\n    {\n\tcase 4: if (STRNCMP(s, \"true\", 4) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_BOOL;\n\t\t    rettv->vval.v_number = VVAL_TRUE;\n\t\t    return OK;\n\t\t}\n\t\tif (STRNCMP(s, \"null\", 4) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_SPECIAL;\n\t\t    rettv->vval.v_number = VVAL_NULL;\n\t\t    return OK;\n\t\t}\n\t\tbreak;\n\tcase 5: if (STRNCMP(s, \"false\", 5) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_BOOL;\n\t\t    rettv->vval.v_number = VVAL_FALSE;\n\t\t    return OK;\n\t\t}\n\t\tbreak;\n\tcase 8: if (STRNCMP(s, \"null_job\", 8) == 0)\n\t\t{\n#ifdef FEAT_JOB_CHANNEL\n\t\t    rettv->v_type = VAR_JOB;\n\t\t    rettv->vval.v_job = NULL;\n#else\n\t\t    rettv->v_type = VAR_SPECIAL;\n\t\t    rettv->vval.v_number = VVAL_NULL;\n#endif\n\t\t    return OK;\n\t\t}\n\t\tbreak;\n\tcase 9:\n\t\tif (STRNCMP(s, \"null_\", 5) != 0)\n\t\t    break;\n\t\tif (STRNCMP(s + 5, \"list\", 4) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_LIST;\n\t\t    rettv->vval.v_list = NULL;\n\t\t    return OK;\n\t\t}\n\t\tif (STRNCMP(s + 5, \"dict\", 4) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_DICT;\n\t\t    rettv->vval.v_dict = NULL;\n\t\t    return OK;\n\t\t}\n\t\tif (STRNCMP(s + 5, \"blob\", 4) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_BLOB;\n\t\t    rettv->vval.v_blob = NULL;\n\t\t    return OK;\n\t\t}\n\t\tbreak;\n\tcase 10: if (STRNCMP(s, \"null_class\", 10) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_CLASS;\n\t\t    rettv->vval.v_class = NULL;\n\t\t    return OK;\n\t\t}\n\t\t break;\n\tcase 11: if (STRNCMP(s, \"null_string\", 11) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_STRING;\n\t\t    rettv->vval.v_string = NULL;\n\t\t    return OK;\n\t\t}\n\t\tif (STRNCMP(s, \"null_object\", 11) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_OBJECT;\n\t\t    rettv->vval.v_object = NULL;\n\t\t    return OK;\n\t\t}\n\t\tbreak;\n\tcase 12:\n\t\tif (STRNCMP(s, \"null_channel\", 12) == 0)\n\t\t{\n#ifdef FEAT_JOB_CHANNEL\n\t\t    rettv->v_type = VAR_CHANNEL;\n\t\t    rettv->vval.v_channel = NULL;\n#else\n\t\t    rettv->v_type = VAR_SPECIAL;\n\t\t    rettv->vval.v_number = VVAL_NULL;\n#endif\n\t\t    return OK;\n\t\t}\n\t\tif (STRNCMP(s, \"null_partial\", 12) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_PARTIAL;\n\t\t    rettv->vval.v_partial = NULL;\n\t\t    return OK;\n\t\t}\n\t\tbreak;\n\tcase 13: if (STRNCMP(s, \"null_function\", 13) == 0)\n\t\t{\n\t\t    rettv->v_type = VAR_FUNC;\n\t\t    rettv->vval.v_string = NULL;\n\t\t    return OK;\n\t\t}\n\t\tbreak;\n    }\n    return FAIL;\n}\n\n/*\n * Handle sixth level expression:\n *  number\t\tnumber constant\n *  0zFFFFFFFF\t\tBlob constant\n *  \"string\"\t\tstring constant\n *  'string'\t\tliteral string constant\n *  &option-name\toption value\n *  @r\t\t\tregister contents\n *  identifier\t\tvariable value\n *  function()\t\tfunction call\n *  $VAR\t\tenvironment variable\n *  (expression)\tnested expression\n *  [expr, expr]\tList\n *  {arg, arg -> expr}\tLambda\n *  {key: val, key: val}   Dictionary\n *  #{key: val, key: val}  Dictionary with literal keys\n *\n *  Also handle:\n *  ! in front\t\tlogical NOT\n *  - in front\t\tunary minus\n *  + in front\t\tunary plus (ignored)\n *  trailing []\t\tsubscript in String or List\n *  trailing .name\tentry in Dictionary\n *  trailing ->name()\tmethod call\n *\n * \"arg\" must point to the first non-white of the expression.\n * \"arg\" is advanced to just after the recognized expression.\n *\n * Return OK or FAIL.\n */\n    static int\neval9(\n    char_u\t**arg,\n    typval_T\t*rettv,\n    evalarg_T\t*evalarg,\n    int\t\twant_string)\t// after \".\" operator\n{\n    int\t\tevaluate = evalarg != NULL\n\t\t\t\t      && (evalarg->eval_flags & EVAL_EVALUATE);\n    int\t\tlen;\n    char_u\t*s;\n    char_u\t*name_start = NULL;\n    char_u\t*start_leader, *end_leader;\n    int\t\tret = OK;\n    char_u\t*alias;\n    static int\trecurse = 0;\n    int\t\tvim9script = in_vim9script();\n\n    /*\n     * Initialise variable so that clear_tv() can't mistake this for a\n     * string and free a string that isn't there.\n     */\n    rettv->v_type = VAR_UNKNOWN;\n\n    /*\n     * Skip '!', '-' and '+' characters.  They are handled later.\n     */\n    start_leader = *arg;\n    if (eval_leader(arg, vim9script) == FAIL)\n\treturn FAIL;\n    end_leader = *arg;\n\n    if (**arg == '.' && (!isdigit(*(*arg + 1)) || in_old_script(2)))\n    {\n\tsemsg(_(e_invalid_expression_str), *arg);\n\t++*arg;\n\treturn FAIL;\n    }\n\n    // Limit recursion to 1000 levels.  At least at 10000 we run out of stack\n    // and crash.  With MSVC the stack is smaller.\n    if (recurse ==\n#ifdef _MSC_VER\n\t\t    300\n#else\n\t\t    1000\n#endif\n\t\t    )\n    {\n\tsemsg(_(e_expression_too_recursive_str), *arg);\n\treturn FAIL;\n    }\n    ++recurse;\n\n    switch (**arg)\n    {\n    /*\n     * Number constant.\n     */\n    case '0':\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n    case '.':\tret = eval_number(arg, rettv, evaluate, want_string);\n\n\t\t// Apply prefixed \"-\" and \"+\" now.  Matters especially when\n\t\t// \"->\" follows.\n\t\tif (ret == OK && evaluate && end_leader > start_leader\n\t\t\t\t\t\t  && rettv->v_type != VAR_BLOB)\n\t\t    ret = eval9_leader(rettv, TRUE, start_leader, &end_leader);\n\t\tbreak;\n\n    /*\n     * String constant: \"string\".\n     */\n    case '\"':\tret = eval_string(arg, rettv, evaluate, FALSE);\n\t\tbreak;\n\n    /*\n     * Literal string constant: 'str''ing'.\n     */\n    case '\\'':\tret = eval_lit_string(arg, rettv, evaluate, FALSE);\n\t\tbreak;\n\n    /*\n     * List: [expr, expr]\n     */\n    case '[':\tret = eval_list(arg, rettv, evalarg, TRUE);\n\t\tbreak;\n\n    /*\n     * Dictionary: #{key: val, key: val}\n     */\n    case '#':\tif (vim9script)\n\t\t{\n\t\t    ret = vim9_bad_comment(*arg) ? FAIL : NOTDONE;\n\t\t}\n\t\telse if ((*arg)[1] == '{')\n\t\t{\n\t\t    ++*arg;\n\t\t    ret = eval_dict(arg, rettv, evalarg, TRUE);\n\t\t}\n\t\telse\n\t\t    ret = NOTDONE;\n\t\tbreak;\n\n    /*\n     * Lambda: {arg, arg -> expr}\n     * Dictionary: {'key': val, 'key': val}\n     */\n    case '{':\tif (vim9script)\n\t\t    ret = NOTDONE;\n\t\telse\n\t\t    ret = get_lambda_tv(arg, rettv, vim9script, evalarg);\n\t\tif (ret == NOTDONE)\n\t\t    ret = eval_dict(arg, rettv, evalarg, FALSE);\n\t\tbreak;\n\n    /*\n     * Option value: &name\n     */\n    case '&':\tret = eval_option(arg, rettv, evaluate);\n\t\tbreak;\n\n    /*\n     * Environment variable: $VAR.\n     * Interpolated string: $\"string\" or $'string'.\n     */\n    case '$':\tif ((*arg)[1] == '\"' || (*arg)[1] == '\\'')\n\t\t    ret = eval_interp_string(arg, rettv, evaluate);\n\t\telse\n\t\t    ret = eval_env_var(arg, rettv, evaluate);\n\t\tbreak;\n\n    /*\n     * Register contents: @r.\n     */\n    case '@':\t++*arg;\n\t\tif (evaluate)\n\t\t{\n\t\t    if (vim9script && IS_WHITE_OR_NUL(**arg))\n\t\t\tsemsg(_(e_syntax_error_at_str), *arg);\n\t\t    else if (vim9script && !valid_yank_reg(**arg, FALSE))\n\t\t\temsg_invreg(**arg);\n\t\t    else\n\t\t    {\n\t\t\trettv->v_type = VAR_STRING;\n\t\t\trettv->vval.v_string = get_reg_contents(**arg,\n\t\t\t\t\t\t\t\tGREG_EXPR_SRC);\n\t\t    }\n\t\t}\n\t\tif (**arg != NUL)\n\t\t    ++*arg;\n\t\tbreak;\n\n    /*\n     * nested expression: (expression).\n     * or lambda: (arg) => expr\n     */\n    case '(':\tret = NOTDONE;\n\t\tif (vim9script)\n\t\t{\n\t\t    ret = get_lambda_tv(arg, rettv, TRUE, evalarg);\n\t\t    if (ret == OK && evaluate)\n\t\t    {\n\t\t\tufunc_T *ufunc = rettv->vval.v_partial->pt_func;\n\n\t\t\t// Compile it here to get the return type.  The return\n\t\t\t// type is optional, when it's missing use t_unknown.\n\t\t\t// This is recognized in compile_return().\n\t\t\tif (ufunc->uf_ret_type->tt_type == VAR_VOID)\n\t\t\t    ufunc->uf_ret_type = &t_unknown;\n\t\t\tif (compile_def_function(ufunc, FALSE,\n\t\t\t\t\tget_compile_type(ufunc), NULL) == FAIL)\n\t\t\t{\n\t\t\t    clear_tv(rettv);\n\t\t\t    ret = FAIL;\n\t\t\t}\n\t\t    }\n\t\t}\n\t\tif (ret == NOTDONE)\n\t\t{\n\t\t    *arg = skipwhite_and_linebreak(*arg + 1, evalarg);\n\t\t    ret = eval1(arg, rettv, evalarg);\t// recursive!\n\n\t\t    *arg = skipwhite_and_linebreak(*arg, evalarg);\n\t\t    if (**arg == ')')\n\t\t\t++*arg;\n\t\t    else if (ret == OK)\n\t\t    {\n\t\t\temsg(_(e_missing_closing_paren));\n\t\t\tclear_tv(rettv);\n\t\t\tret = FAIL;\n\t\t    }\n\t\t}\n\t\tbreak;\n\n    default:\tret = NOTDONE;\n\t\tbreak;\n    }\n\n    if (ret == NOTDONE)\n    {\n\t/*\n\t * Must be a variable or function name.\n\t * Can also be a curly-braces kind of name: {expr}.\n\t */\n\ts = *arg;\n\tlen = get_name_len(arg, &alias, evaluate, TRUE);\n\tif (alias != NULL)\n\t    s = alias;\n\n\tif (len <= 0)\n\t    ret = FAIL;\n\telse\n\t{\n\t    int\t    flags = evalarg == NULL ? 0 : evalarg->eval_flags;\n\n\t    if (evaluate && vim9script && len == 1 && *s == '_')\n\t    {\n\t\temsg(_(e_cannot_use_underscore_here));\n\t\tret = FAIL;\n\t    }\n\t    else if (evaluate && vim9script && len > 2\n\t\t\t\t\t\t && s[0] == 's' && s[1] == ':')\n\t    {\n\t\tsemsg(_(e_cannot_use_s_colon_in_vim9_script_str), s);\n\t\tret = FAIL;\n\t    }\n\t    else if ((vim9script ? **arg : *skipwhite(*arg)) == '(')\n\t    {\n\t\t// \"name(...\"  recursive!\n\t\t*arg = skipwhite(*arg);\n\t\tret = eval_func(arg, evalarg, s, len, rettv, flags, NULL);\n\t    }\n\t    else if (flags & EVAL_CONSTANT)\n\t\tret = FAIL;\n\t    else if (evaluate)\n\t    {\n\t\t// get the value of \"true\", \"false\", etc. or a variable\n\t\tret = FAIL;\n\t\tif (vim9script)\n\t\t    ret = handle_predefined(s, len, rettv);\n\t\tif (ret == FAIL)\n\t\t{\n\t\t    name_start = s;\n\t\t    ret = eval_variable(s, len, 0, rettv, NULL,\n\t\t\t\t\t   EVAL_VAR_VERBOSE + EVAL_VAR_IMPORT);\n\t\t}\n\t    }\n\t    else\n\t    {\n\t\t// skip the name\n\t\tcheck_vars(s, len);\n\t\tret = OK;\n\t    }\n\t}\n\tvim_free(alias);\n    }\n\n    // Handle following '[', '(' and '.' for expr[expr], expr.name,\n    // expr(expr), expr->name(expr)\n    if (ret == OK)\n\tret = handle_subscript(arg, name_start, rettv, evalarg, evaluate);\n\n    /*\n     * Apply logical NOT and unary '-', from right to left, ignore '+'.\n     */\n    if (ret == OK && evaluate && end_leader > start_leader)\n\tret = eval9_leader(rettv, FALSE, start_leader, &end_leader);\n\n    --recurse;\n    return ret;\n}\n\n/*\n * Apply the leading \"!\" and \"-\" before an eval9 expression to \"rettv\".\n * When \"numeric_only\" is TRUE only handle \"+\" and \"-\".\n * Adjusts \"end_leaderp\" until it is at \"start_leader\".\n */\n    static int\neval9_leader(\n\ttypval_T    *rettv,\n\tint\t    numeric_only,\n\tchar_u\t    *start_leader,\n\tchar_u\t    **end_leaderp)\n{\n    char_u\t*end_leader = *end_leaderp;\n    int\t\tret = OK;\n    int\t\terror = FALSE;\n    varnumber_T val = 0;\n    vartype_T\ttype = rettv->v_type;\n    int\t\tvim9script = in_vim9script();\n    float_T\t    f = 0.0;\n\n    if (rettv->v_type == VAR_FLOAT)\n\tf = rettv->vval.v_float;\n    else\n    {\n\twhile (VIM_ISWHITE(end_leader[-1]))\n\t    --end_leader;\n\tif (vim9script && end_leader[-1] == '!')\n\t    val = tv2bool(rettv);\n\telse\n\t    val = tv_get_number_chk(rettv, &error);\n    }\n    if (error)\n    {\n\tclear_tv(rettv);\n\tret = FAIL;\n    }\n    else\n    {\n\twhile (end_leader > start_leader)\n\t{\n\t    --end_leader;\n\t    if (*end_leader == '!')\n\t    {\n\t\tif (numeric_only)\n\t\t{\n\t\t    ++end_leader;\n\t\t    break;\n\t\t}\n\t\tif (rettv->v_type == VAR_FLOAT)\n\t\t{\n\t\t    if (vim9script)\n\t\t    {\n\t\t\trettv->v_type = VAR_BOOL;\n\t\t\tval = f == 0.0 ? VVAL_TRUE : VVAL_FALSE;\n\t\t    }\n\t\t    else\n\t\t\tf = !f;\n\t\t}\n\t\telse\n\t\t{\n\t\t    val = !val;\n\t\t    type = VAR_BOOL;\n\t\t}\n\t    }\n\t    else if (*end_leader == '-')\n\t    {\n\t\tif (rettv->v_type == VAR_FLOAT)\n\t\t    f = -f;\n\t\telse\n\t\t{\n\t\t    val = -val;\n\t\t    type = VAR_NUMBER;\n\t\t}\n\t    }\n\t}\n\tif (rettv->v_type == VAR_FLOAT)\n\t{\n\t    clear_tv(rettv);\n\t    rettv->vval.v_float = f;\n\t}\n\telse\n\t{\n\t    clear_tv(rettv);\n\t    if (vim9script)\n\t\trettv->v_type = type;\n\t    else\n\t\trettv->v_type = VAR_NUMBER;\n\t    rettv->vval.v_number = val;\n\t}\n    }\n    *end_leaderp = end_leader;\n    return ret;\n}\n\n/*\n * Call the function referred to in \"rettv\".\n */\n    static int\ncall_func_rettv(\n\tchar_u\t    **arg,\n\tevalarg_T   *evalarg,\n\ttypval_T    *rettv,\n\tint\t    evaluate,\n\tdict_T\t    *selfdict,\n\ttypval_T    *basetv)\n{\n    partial_T\t*pt = NULL;\n    funcexe_T\tfuncexe;\n    typval_T\tfunctv;\n    char_u\t*s;\n    int\t\tret;\n\n    // need to copy the funcref so that we can clear rettv\n    if (evaluate)\n    {\n\tfunctv = *rettv;\n\trettv->v_type = VAR_UNKNOWN;\n\n\t// Invoke the function.  Recursive!\n\tif (functv.v_type == VAR_PARTIAL)\n\t{\n\t    pt = functv.vval.v_partial;\n\t    s = partial_name(pt);\n\t}\n\telse\n\t{\n\t    s = functv.vval.v_string;\n\t    if (s == NULL || *s == NUL)\n\t    {\n\t\temsg(_(e_empty_function_name));\n\t\tret = FAIL;\n\t\tgoto theend;\n\t    }\n\t}\n    }\n    else\n\ts = (char_u *)\"\";\n\n    CLEAR_FIELD(funcexe);\n    funcexe.fe_firstline = curwin->w_cursor.lnum;\n    funcexe.fe_lastline = curwin->w_cursor.lnum;\n    funcexe.fe_evaluate = evaluate;\n    funcexe.fe_partial = pt;\n    funcexe.fe_selfdict = selfdict;\n    funcexe.fe_basetv = basetv;\n    ret = get_func_tv(s, -1, rettv, arg, evalarg, &funcexe);\n\ntheend:\n    // Clear the funcref afterwards, so that deleting it while\n    // evaluating the arguments is possible (see test55).\n    if (evaluate)\n\tclear_tv(&functv);\n\n    return ret;\n}\n\n/*\n * Evaluate \"->method()\".\n * \"*arg\" points to \"method\".\n * Returns FAIL or OK. \"*arg\" is advanced to after the ')'.\n */\n    static int\neval_lambda(\n    char_u\t**arg,\n    typval_T\t*rettv,\n    evalarg_T\t*evalarg,\n    int\t\tverbose)\t// give error messages\n{\n    int\t\tevaluate = evalarg != NULL\n\t\t\t\t      && (evalarg->eval_flags & EVAL_EVALUATE);\n    typval_T\tbase = *rettv;\n    int\t\tret;\n\n    rettv->v_type = VAR_UNKNOWN;\n\n    if (**arg == '{')\n    {\n\t// ->{lambda}()\n\tret = get_lambda_tv(arg, rettv, FALSE, evalarg);\n    }\n    else\n    {\n\t// ->(lambda)()\n\t++*arg;\n\tret = eval1(arg, rettv, evalarg);\n\t*arg = skipwhite_and_linebreak(*arg, evalarg);\n\tif (**arg != ')')\n\t{\n\t    emsg(_(e_missing_closing_paren));\n\t    return FAIL;\n\t}\n\tif (rettv->v_type != VAR_STRING && rettv->v_type != VAR_FUNC\n\t\t\t\t\t       && rettv->v_type != VAR_PARTIAL)\n\t{\n\t    emsg(_(e_string_or_function_required_for_arrow_parens_expr));\n\t    return FAIL;\n\t}\n\t++*arg;\n    }\n    if (ret != OK)\n\treturn FAIL;\n\n    if (**arg != '(')\n    {\n\tif (verbose)\n\t{\n\t    if (*skipwhite(*arg) == '(')\n\t\temsg(_(e_no_white_space_allowed_before_parenthesis));\n\t    else\n\t\tsemsg(_(e_missing_parenthesis_str), \"lambda\");\n\t}\n\tclear_tv(rettv);\n\tret = FAIL;\n    }\n    else\n\tret = call_func_rettv(arg, evalarg, rettv, evaluate, NULL, &base);\n\n    // Clear the funcref afterwards, so that deleting it while\n    // evaluating the arguments is possible (see test55).\n    if (evaluate)\n\tclear_tv(&base);\n\n    return ret;\n}\n\n/*\n * Evaluate \"->method()\".\n * \"*arg\" points to \"method\".\n * Returns FAIL or OK. \"*arg\" is advanced to after the ')'.\n */\n    static int\neval_method(\n    char_u\t**arg,\n    typval_T\t*rettv,\n    evalarg_T\t*evalarg,\n    int\t\tverbose)\t// give error messages\n{\n    char_u\t*name;\n    long\tlen;\n    char_u\t*alias;\n    char_u\t*tofree = NULL;\n    typval_T\tbase = *rettv;\n    int\t\tret = OK;\n    int\t\tevaluate = evalarg != NULL\n\t\t\t\t      && (evalarg->eval_flags & EVAL_EVALUATE);\n\n    rettv->v_type = VAR_UNKNOWN;\n\n    name = *arg;\n    len = get_name_len(arg, &alias, evaluate, evaluate);\n    if (alias != NULL)\n\tname = alias;\n\n    if (len <= 0)\n    {\n\tif (verbose)\n\t    emsg(_(e_missing_name_after_method));\n\tret = FAIL;\n    }\n    else\n    {\n\tchar_u *paren;\n\n\t// If there is no \"(\" immediately following, but there is further on,\n\t// it can be \"import.Func()\", \"dict.Func()\", \"list[nr]\", etc.\n\t// Does not handle anything where \"(\" is part of the expression.\n\t*arg = skipwhite(*arg);\n\n\tif (**arg != '(' && alias == NULL\n\t\t\t\t    && (paren = vim_strchr(*arg, '(')) != NULL)\n\t{\n\t    *arg = name;\n\n\t    // Truncate the name a the \"(\".  Avoid trying to get another line\n\t    // by making \"getline\" NULL.\n\t    *paren = NUL;\n\t    char_u\t*(*getline)(int, void *, int, getline_opt_T) = NULL;\n\t    if (evalarg != NULL)\n\t    {\n\t\tgetline = evalarg->eval_getline;\n\t\tevalarg->eval_getline = NULL;\n\t    }\n\n\t    char_u *deref = deref_function_name(arg, &tofree, evalarg, verbose);\n\t    if (deref == NULL)\n\t    {\n\t\t*arg = name + len;\n\t\tret = FAIL;\n\t    }\n\t    else\n\t    {\n\t\tname = deref;\n\t\tlen = (long)STRLEN(name);\n\t    }\n\n\t    *paren = '(';\n\t    if (getline != NULL)\n\t\tevalarg->eval_getline = getline;\n\t}\n\n\tif (ret == OK)\n\t{\n\t    *arg = skipwhite(*arg);\n\n\t    if (**arg != '(')\n\t    {\n\t\tif (verbose)\n\t\t    semsg(_(e_missing_parenthesis_str), name);\n\t\tret = FAIL;\n\t    }\n\t    else if (VIM_ISWHITE((*arg)[-1]))\n\t    {\n\t\tif (verbose)\n\t\t    emsg(_(e_no_white_space_allowed_before_parenthesis));\n\t\tret = FAIL;\n\t    }\n\t    else\n\t\tret = eval_func(arg, evalarg, name, len, rettv,\n\t\t\t\t\t  evaluate ? EVAL_EVALUATE : 0, &base);\n\t}\n    }\n\n    // Clear the funcref afterwards, so that deleting it while\n    // evaluating the arguments is possible (see test55).\n    if (evaluate)\n\tclear_tv(&base);\n    vim_free(tofree);\n\n    return ret;\n}\n\n/*\n * Evaluate an \"[expr]\" or \"[expr:expr]\" index.  Also \"dict.key\".\n * \"*arg\" points to the '[' or '.'.\n * Returns FAIL or OK. \"*arg\" is advanced to after the ']'.\n */\n    static int\neval_index(\n    char_u\t**arg,\n    typval_T\t*rettv,\n    evalarg_T\t*evalarg,\n    int\t\tverbose)\t// give error messages\n{\n    int\t\tevaluate = evalarg != NULL\n\t\t\t\t      && (evalarg->eval_flags & EVAL_EVALUATE);\n    int\t\tempty1 = FALSE, empty2 = FALSE;\n    typval_T\tvar1, var2;\n    int\t\trange = FALSE;\n    char_u\t*key = NULL;\n    int\t\tkeylen = -1;\n    int\t\tvim9script = in_vim9script();\n\n    if (check_can_index(rettv, evaluate, verbose) == FAIL)\n\treturn FAIL;\n\n    init_tv(&var1);\n    init_tv(&var2);\n    if (**arg == '.')\n    {\n\t/*\n\t * dict.name\n\t */\n\tkey = *arg + 1;\n\tfor (keylen = 0; eval_isdictc(key[keylen]); ++keylen)\n\t    ;\n\tif (keylen == 0)\n\t    return FAIL;\n\t*arg = key + keylen;\n    }\n    else\n    {\n\t/*\n\t * something[idx]\n\t *\n\t * Get the (first) variable from inside the [].\n\t */\n\t*arg = skipwhite_and_linebreak(*arg + 1, evalarg);\n\tif (**arg == ':')\n\t    empty1 = TRUE;\n\telse if (eval1(arg, &var1, evalarg) == FAIL)\t// recursive!\n\t    return FAIL;\n\telse if (vim9script && **arg == ':')\n\t{\n\t    semsg(_(e_white_space_required_before_and_after_str_at_str),\n\t\t\t\t\t\t\t\t    \":\", *arg);\n\t    clear_tv(&var1);\n\t    return FAIL;\n\t}\n\telse if (evaluate)\n\t{\n\t    int error = FALSE;\n\n\t    // allow for indexing with float\n\t    if (vim9script && rettv->v_type == VAR_DICT\n\t\t\t\t\t\t   && var1.v_type == VAR_FLOAT)\n\t    {\n\t\tvar1.vval.v_string = typval_tostring(&var1, TRUE);\n\t\tvar1.v_type = VAR_STRING;\n\t    }\n\n\t    if (vim9script && rettv->v_type == VAR_LIST)\n\t\ttv_get_number_chk(&var1, &error);\n\t    else\n\t\terror = tv_get_string_chk(&var1) == NULL;\n\t    if (error)\n\t    {\n\t\t// not a number or string\n\t\tclear_tv(&var1);\n\t\treturn FAIL;\n\t    }\n\t}\n\n\t/*\n\t * Get the second variable from inside the [:].\n\t */\n\t*arg = skipwhite_and_linebreak(*arg, evalarg);\n\tif (**arg == ':')\n\t{\n\t    range = TRUE;\n\t    ++*arg;\n\t    if (vim9script && !IS_WHITE_OR_NUL(**arg) && **arg != ']')\n\t    {\n\t\tsemsg(_(e_white_space_required_before_and_after_str_at_str),\n\t\t\t\t\t\t\t\t\":\", *arg - 1);\n\t\tif (!empty1)\n\t\t    clear_tv(&var1);\n\t\treturn FAIL;\n\t    }\n\t    *arg = skipwhite_and_linebreak(*arg, evalarg);\n\t    if (**arg == ']')\n\t\tempty2 = TRUE;\n\t    else if (eval1(arg, &var2, evalarg) == FAIL)\t// recursive!\n\t    {\n\t\tif (!empty1)\n\t\t    clear_tv(&var1);\n\t\treturn FAIL;\n\t    }\n\t    else if (evaluate && tv_get_string_chk(&var2) == NULL)\n\t    {\n\t\t// not a number or string\n\t\tif (!empty1)\n\t\t    clear_tv(&var1);\n\t\tclear_tv(&var2);\n\t\treturn FAIL;\n\t    }\n\t}\n\n\t// Check for the ']'.\n\t*arg = skipwhite_and_linebreak(*arg, evalarg);\n\tif (**arg != ']')\n\t{\n\t    if (verbose)\n\t\temsg(_(e_missing_closing_square_brace));\n\t    clear_tv(&var1);\n\t    if (range)\n\t\tclear_tv(&var2);\n\t    return FAIL;\n\t}\n\t*arg = *arg + 1;\t// skip over the ']'\n    }\n\n    if (evaluate)\n    {\n\tint res = eval_index_inner(rettv, range,\n\t\tempty1 ? NULL : &var1, empty2 ? NULL : &var2, FALSE,\n\t\tkey, keylen, verbose);\n\n\tif (!empty1)\n\t    clear_tv(&var1);\n\tif (range)\n\t    clear_tv(&var2);\n\treturn res;\n    }\n    return OK;\n}\n\n/*\n * Check if \"rettv\" can have an [index] or [sli:ce]\n */\n    int\ncheck_can_index(typval_T *rettv, int evaluate, int verbose)\n{\n    switch (rettv->v_type)\n    {\n\tcase VAR_FUNC:\n\tcase VAR_PARTIAL:\n\t    if (verbose)\n\t\temsg(_(e_cannot_index_a_funcref));\n\t    return FAIL;\n\tcase VAR_FLOAT:\n\t    if (verbose)\n\t\temsg(_(e_using_float_as_string));\n\t    return FAIL;\n\tcase VAR_BOOL:\n\tcase VAR_SPECIAL:\n\tcase VAR_JOB:\n\tcase VAR_CHANNEL:\n\tcase VAR_INSTR:\n\tcase VAR_CLASS:\n\tcase VAR_OBJECT:\n\t    if (verbose)\n\t\temsg(_(e_cannot_index_special_variable));\n\t    return FAIL;\n\tcase VAR_UNKNOWN:\n\tcase VAR_ANY:\n\tcase VAR_VOID:\n\t    if (evaluate)\n\t    {\n\t\temsg(_(e_cannot_index_special_variable));\n\t\treturn FAIL;\n\t    }\n\t    // FALLTHROUGH\n\n\tcase VAR_STRING:\n\tcase VAR_LIST:\n\tcase VAR_DICT:\n\tcase VAR_BLOB:\n\t    break;\n\tcase VAR_NUMBER:\n\t    if (in_vim9script())\n\t\temsg(_(e_cannot_index_number));\n\t    break;\n    }\n    return OK;\n}\n\n/*\n * slice() function\n */\n    void\nf_slice(typval_T *argvars, typval_T *rettv)\n{\n    if (in_vim9script()\n\t    && ((argvars[0].v_type != VAR_STRING\n\t\t    && argvars[0].v_type != VAR_LIST\n\t\t    && argvars[0].v_type != VAR_BLOB\n\t\t    && check_for_list_arg(argvars, 0) == FAIL)\n\t\t|| check_for_number_arg(argvars, 1) == FAIL\n\t\t|| check_for_opt_number_arg(argvars, 2) == FAIL))\n\treturn;\n\n    if (check_can_index(argvars, TRUE, FALSE) != OK)\n\treturn;\n\n    copy_tv(argvars, rettv);\n    eval_index_inner(rettv, TRUE, argvars + 1,\n\t    argvars[2].v_type == VAR_UNKNOWN ? NULL : argvars + 2,\n\t    TRUE, NULL, 0, FALSE);\n}\n\n/*\n * Apply index or range to \"rettv\".\n * \"var1\" is the first index, NULL for [:expr].\n * \"var2\" is the second index, NULL for [expr] and [expr: ]\n * \"exclusive\" is TRUE for slice(): second index is exclusive, use character\n * index for string.\n * Alternatively, \"key\" is not NULL, then key[keylen] is the dict index.\n */\n    int\neval_index_inner(\n\ttypval_T    *rettv,\n\tint\t    is_range,\n\ttypval_T    *var1,\n\ttypval_T    *var2,\n\tint\t    exclusive,\n\tchar_u\t    *key,\n\tint\t    keylen,\n\tint\t    verbose)\n{\n    varnumber_T\t    n1, n2 = 0;\n    long\t    len;\n\n    n1 = 0;\n    if (var1 != NULL && rettv->v_type != VAR_DICT)\n\tn1 = tv_get_number(var1);\n\n    if (is_range)\n    {\n\tif (rettv->v_type == VAR_DICT)\n\t{\n\t    if (verbose)\n\t\temsg(_(e_cannot_slice_dictionary));\n\t    return FAIL;\n\t}\n\tif (var2 != NULL)\n\t    n2 = tv_get_number(var2);\n\telse\n\t    n2 = VARNUM_MAX;\n    }\n\n    switch (rettv->v_type)\n    {\n\tcase VAR_UNKNOWN:\n\tcase VAR_ANY:\n\tcase VAR_VOID:\n\tcase VAR_FUNC:\n\tcase VAR_PARTIAL:\n\tcase VAR_FLOAT:\n\tcase VAR_BOOL:\n\tcase VAR_SPECIAL:\n\tcase VAR_JOB:\n\tcase VAR_CHANNEL:\n\tcase VAR_INSTR:\n\tcase VAR_CLASS:\n\tcase VAR_OBJECT:\n\t    break; // not evaluating, skipping over subscript\n\n\tcase VAR_NUMBER:\n\tcase VAR_STRING:\n\t    {\n\t\tchar_u\t*s = tv_get_string(rettv);\n\n\t\tlen = (long)STRLEN(s);\n\t\tif (in_vim9script() || exclusive)\n\t\t{\n\t\t    if (is_range)\n\t\t\ts = string_slice(s, n1, n2, exclusive);\n\t\t    else\n\t\t\ts = char_from_string(s, n1);\n\t\t}\n\t\telse if (is_range)\n\t\t{\n\t\t    // The resulting variable is a substring.  If the indexes\n\t\t    // are out of range the result is empty.\n\t\t    if (n1 < 0)\n\t\t    {\n\t\t\tn1 = len + n1;\n\t\t\tif (n1 < 0)\n\t\t\t    n1 = 0;\n\t\t    }\n\t\t    if (n2 < 0)\n\t\t\tn2 = len + n2;\n\t\t    else if (n2 >= len)\n\t\t\tn2 = len;\n\t\t    if (n1 >= len || n2 < 0 || n1 > n2)\n\t\t\ts = NULL;\n\t\t    else\n\t\t\ts = vim_strnsave(s + n1, n2 - n1 + 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t    // The resulting variable is a string of a single\n\t\t    // character.  If the index is too big or negative the\n\t\t    // result is empty.\n\t\t    if (n1 >= len || n1 < 0)\n\t\t\ts = NULL;\n\t\t    else\n\t\t\ts = vim_strnsave(s + n1, 1);\n\t\t}\n\t\tclear_tv(rettv);\n\t\trettv->v_type = VAR_STRING;\n\t\trettv->vval.v_string = s;\n\t    }\n\t    break;\n\n\tcase VAR_BLOB:\n\t    blob_slice_or_index(rettv->vval.v_blob, is_range, n1, n2,\n\t\t\t\t\t\t\t     exclusive, rettv);\n\t    break;\n\n\tcase VAR_LIST:\n\t    if (var1 == NULL)\n\t\tn1 = 0;\n\t    if (var2 == NULL)\n\t\tn2 = VARNUM_MAX;\n\t    if (list_slice_or_index(rettv->vval.v_list,\n\t\t\t  is_range, n1, n2, exclusive, rettv, verbose) == FAIL)\n\t\treturn FAIL;\n\t    break;\n\n\tcase VAR_DICT:\n\t    {\n\t\tdictitem_T\t*item;\n\t\ttypval_T\ttmp;\n\n\t\tif (key == NULL)\n\t\t{\n\t\t    key = tv_get_string_chk(var1);\n\t\t    if (key == NULL)\n\t\t\treturn FAIL;\n\t\t}\n\n\t\titem = dict_find(rettv->vval.v_dict, key, keylen);\n\n\t\tif (item == NULL)\n\t\t{\n\t\t    if (verbose)\n\t\t    {\n\t\t\tif (keylen > 0)\n\t\t\t    key[keylen] = NUL;\n\t\t\tsemsg(_(e_key_not_present_in_dictionary_str), key);\n\t\t    }\n\t\t    return FAIL;\n\t\t}\n\n\t\tcopy_tv(&item->di_tv, &tmp);\n\t\tclear_tv(rettv);\n\t\t*rettv = tmp;\n\t    }\n\t    break;\n    }\n    return OK;\n}\n\n/*\n * Return the function name of partial \"pt\".\n */\n    char_u *\npartial_name(partial_T *pt)\n{\n    if (pt != NULL)\n    {\n\tif (pt->pt_name != NULL)\n\t    return pt->pt_name;\n\tif (pt->pt_func != NULL)\n\t    return pt->pt_func->uf_name;\n    }\n    return (char_u *)\"\";\n}\n\n    static void\npartial_free(partial_T *pt)\n{\n    int i;\n\n    for (i = 0; i < pt->pt_argc; ++i)\n\tclear_tv(&pt->pt_argv[i]);\n    vim_free(pt->pt_argv);\n    dict_unref(pt->pt_dict);\n    if (pt->pt_name != NULL)\n    {\n\tfunc_unref(pt->pt_name);\n\tvim_free(pt->pt_name);\n    }\n    else\n\tfunc_ptr_unref(pt->pt_func);\n\n    // \"out_up\" is no longer used, decrement refcount on partial that owns it.\n    partial_unref(pt->pt_outer.out_up_partial);\n\n    // Using pt_outer from another partial.\n    partial_unref(pt->pt_outer_partial);\n\n    // Decrease the reference count for the context of a closure.  If down\n    // to the minimum it may be time to free it.\n    if (pt->pt_funcstack != NULL)\n    {\n\t--pt->pt_funcstack->fs_refcount;\n\tfuncstack_check_refcount(pt->pt_funcstack);\n    }\n    // Similarly for loop variables.\n    for (i = 0; i < MAX_LOOP_DEPTH; ++i)\n\tif (pt->pt_loopvars[i] != NULL)\n\t{\n\t    --pt->pt_loopvars[i]->lvs_refcount;\n\t    loopvars_check_refcount(pt->pt_loopvars[i]);\n\t}\n\n    vim_free(pt);\n}\n\n/*\n * Unreference a closure: decrement the reference count and free it when it\n * becomes zero.\n */\n    void\npartial_unref(partial_T *pt)\n{\n    if (pt == NULL)\n\treturn;\n\n    int\tdone = FALSE;\n\n    if (--pt->pt_refcount <= 0)\n\tpartial_free(pt);\n\n    // If the reference count goes down to one, the funcstack may be the\n    // only reference and can be freed if no other partials reference it.\n    else if (pt->pt_refcount == 1)\n    {\n\t// careful: if the funcstack is freed it may contain this partial\n\t// and it gets freed as well\n\tif (pt->pt_funcstack != NULL)\n\t    done = funcstack_check_refcount(pt->pt_funcstack);\n\n\tif (!done)\n\t{\n\t    int\tdepth;\n\n\t    for (depth = 0; depth < MAX_LOOP_DEPTH; ++depth)\n\t\tif (pt->pt_loopvars[depth] != NULL\n\t\t\t&& loopvars_check_refcount(pt->pt_loopvars[depth]))\n\t\t    break;\n\t}\n    }\n}\n\n/*\n * Return the next (unique) copy ID.\n * Used for serializing nested structures.\n */\n    int\nget_copyID(void)\n{\n    current_copyID += COPYID_INC;\n    return current_copyID;\n}\n\n/*\n * Garbage collection for lists and dictionaries.\n *\n * We use reference counts to be able to free most items right away when they\n * are no longer used.  But for composite items it's possible that it becomes\n * unused while the reference count is > 0: When there is a recursive\n * reference.  Example:\n *\t:let l = [1, 2, 3]\n *\t:let d = {9: l}\n *\t:let l[1] = d\n *\n * Since this is quite unusual we handle this with garbage collection: every\n * once in a while find out which lists and dicts are not referenced from any\n * variable.\n *\n * Here is a good reference text about garbage collection (refers to Python\n * but it applies to all reference-counting mechanisms):\n *\thttp://python.ca/nas/python/gc/\n */\n\n/*\n * Do garbage collection for lists and dicts.\n * When \"testing\" is TRUE this is called from test_garbagecollect_now().\n * Return TRUE if some memory was freed.\n */\n    int\ngarbage_collect(int testing)\n{\n    int\t\tcopyID;\n    int\t\tabort = FALSE;\n    buf_T\t*buf;\n    win_T\t*wp;\n    int\t\tdid_free = FALSE;\n    tabpage_T\t*tp;\n\n    if (!testing)\n    {\n\t// Only do this once.\n\twant_garbage_collect = FALSE;\n\tmay_garbage_collect = FALSE;\n\tgarbage_collect_at_exit = FALSE;\n    }\n\n    // The execution stack can grow big, limit the size.\n    if (exestack.ga_maxlen - exestack.ga_len > 500)\n    {\n\tsize_t\tnew_len;\n\tchar_u\t*pp;\n\tint\tn;\n\n\t// Keep 150% of the current size, with a minimum of the growth size.\n\tn = exestack.ga_len / 2;\n\tif (n < exestack.ga_growsize)\n\t    n = exestack.ga_growsize;\n\n\t// Don't make it bigger though.\n\tif (exestack.ga_len + n < exestack.ga_maxlen)\n\t{\n\t    new_len = (size_t)exestack.ga_itemsize * (exestack.ga_len + n);\n\t    pp = vim_realloc(exestack.ga_data, new_len);\n\t    if (pp == NULL)\n\t\treturn FAIL;\n\t    exestack.ga_maxlen = exestack.ga_len + n;\n\t    exestack.ga_data = pp;\n\t}\n    }\n\n    // We advance by two because we add one for items referenced through\n    // previous_funccal.\n    copyID = get_copyID();\n\n    /*\n     * 1. Go through all accessible variables and mark all lists and dicts\n     *    with copyID.\n     */\n\n    // Don't free variables in the previous_funccal list unless they are only\n    // referenced through previous_funccal.  This must be first, because if\n    // the item is referenced elsewhere the funccal must not be freed.\n    abort = abort || set_ref_in_previous_funccal(copyID);\n\n    // script-local variables\n    abort = abort || garbage_collect_scriptvars(copyID);\n\n    // buffer-local variables\n    FOR_ALL_BUFFERS(buf)\n\tabort = abort || set_ref_in_item(&buf->b_bufvar.di_tv, copyID,\n\t\t\t\t\t\t\t\t  NULL, NULL);\n\n    // window-local variables\n    FOR_ALL_TAB_WINDOWS(tp, wp)\n\tabort = abort || set_ref_in_item(&wp->w_winvar.di_tv, copyID,\n\t\t\t\t\t\t\t\t  NULL, NULL);\n    // window-local variables in autocmd windows\n    for (int i = 0; i < AUCMD_WIN_COUNT; ++i)\n\tif (aucmd_win[i].auc_win != NULL)\n\t    abort = abort || set_ref_in_item(\n\t\t    &aucmd_win[i].auc_win->w_winvar.di_tv, copyID, NULL, NULL);\n#ifdef FEAT_PROP_POPUP\n    FOR_ALL_POPUPWINS(wp)\n\tabort = abort || set_ref_in_item(&wp->w_winvar.di_tv, copyID,\n\t\t\t\t\t\t\t\t  NULL, NULL);\n    FOR_ALL_TABPAGES(tp)\n\tFOR_ALL_POPUPWINS_IN_TAB(tp, wp)\n\t\tabort = abort || set_ref_in_item(&wp->w_winvar.di_tv, copyID,\n\t\t\t\t\t\t\t\t  NULL, NULL);\n#endif\n\n    // tabpage-local variables\n    FOR_ALL_TABPAGES(tp)\n\tabort = abort || set_ref_in_item(&tp->tp_winvar.di_tv, copyID,\n\t\t\t\t\t\t\t\t  NULL, NULL);\n    // global variables\n    abort = abort || garbage_collect_globvars(copyID);\n\n    // function-local variables\n    abort = abort || set_ref_in_call_stack(copyID);\n\n    // named functions (matters for closures)\n    abort = abort || set_ref_in_functions(copyID);\n\n    // function call arguments, if v:testing is set.\n    abort = abort || set_ref_in_func_args(copyID);\n\n    // funcstacks keep variables for closures\n    abort = abort || set_ref_in_funcstacks(copyID);\n\n    // loopvars keep variables for loop blocks\n    abort = abort || set_ref_in_loopvars(copyID);\n\n    // v: vars\n    abort = abort || garbage_collect_vimvars(copyID);\n\n    // callbacks in buffers\n    abort = abort || set_ref_in_buffers(copyID);\n\n    // 'completefunc', 'omnifunc' and 'thesaurusfunc' callbacks\n    abort = abort || set_ref_in_insexpand_funcs(copyID);\n\n    // 'operatorfunc' callback\n    abort = abort || set_ref_in_opfunc(copyID);\n\n    // 'tagfunc' callback\n    abort = abort || set_ref_in_tagfunc(copyID);\n\n    // 'imactivatefunc' and 'imstatusfunc' callbacks\n    abort = abort || set_ref_in_im_funcs(copyID);\n\n#ifdef FEAT_LUA\n    abort = abort || set_ref_in_lua(copyID);\n#endif\n\n#ifdef FEAT_PYTHON\n    abort = abort || set_ref_in_python(copyID);\n#endif\n\n#ifdef FEAT_PYTHON3\n    abort = abort || set_ref_in_python3(copyID);\n#endif\n\n#ifdef FEAT_JOB_CHANNEL\n    abort = abort || set_ref_in_channel(copyID);\n    abort = abort || set_ref_in_job(copyID);\n#endif\n#ifdef FEAT_NETBEANS_INTG\n    abort = abort || set_ref_in_nb_channel(copyID);\n#endif\n\n#ifdef FEAT_TIMERS\n    abort = abort || set_ref_in_timer(copyID);\n#endif\n\n#ifdef FEAT_QUICKFIX\n    abort = abort || set_ref_in_quickfix(copyID);\n#endif\n\n#ifdef FEAT_TERMINAL\n    abort = abort || set_ref_in_term(copyID);\n#endif\n\n#ifdef FEAT_PROP_POPUP\n    abort = abort || set_ref_in_popups(copyID);\n#endif\n\n    if (!abort)\n    {\n\t/*\n\t * 2. Free lists and dictionaries that are not referenced.\n\t */\n\tdid_free = free_unref_items(copyID);\n\n\t/*\n\t * 3. Check if any funccal can be freed now.\n\t *    This may call us back recursively.\n\t */\n\tfree_unref_funccal(copyID, testing);\n    }\n    else if (p_verbose > 0)\n    {\n\tverb_msg(_(\"Not enough memory to set references, garbage collection aborted!\"));\n    }\n\n    return did_free;\n}\n\n/*\n * Free lists, dictionaries, channels and jobs that are no longer referenced.\n */\n    static int\nfree_unref_items(int copyID)\n{\n    int\t\tdid_free = FALSE;\n\n    // Let all \"free\" functions know that we are here.  This means no\n    // dictionaries, lists, channels or jobs are to be freed, because we will\n    // do that here.\n    in_free_unref_items = TRUE;\n\n    /*\n     * PASS 1: free the contents of the items.  We don't free the items\n     * themselves yet, so that it is possible to decrement refcount counters\n     */\n\n    // Go through the list of dicts and free items without this copyID.\n    did_free |= dict_free_nonref(copyID);\n\n    // Go through the list of lists and free items without this copyID.\n    did_free |= list_free_nonref(copyID);\n\n    // Go through the list of objects and free items without this copyID.\n    did_free |= object_free_nonref(copyID);\n\n#ifdef FEAT_JOB_CHANNEL\n    // Go through the list of jobs and free items without the copyID. This\n    // must happen before doing channels, because jobs refer to channels, but\n    // the reference from the channel to the job isn't tracked.\n    did_free |= free_unused_jobs_contents(copyID, COPYID_MASK);\n\n    // Go through the list of channels and free items without the copyID.\n    did_free |= free_unused_channels_contents(copyID, COPYID_MASK);\n#endif\n\n    /*\n     * PASS 2: free the items themselves.\n     */\n    dict_free_items(copyID);\n    list_free_items(copyID);\n\n#ifdef FEAT_JOB_CHANNEL\n    // Go through the list of jobs and free items without the copyID. This\n    // must happen before doing channels, because jobs refer to channels, but\n    // the reference from the channel to the job isn't tracked.\n    free_unused_jobs(copyID, COPYID_MASK);\n\n    // Go through the list of channels and free items without the copyID.\n    free_unused_channels(copyID, COPYID_MASK);\n#endif\n\n    in_free_unref_items = FALSE;\n\n    return did_free;\n}\n\n/*\n * Mark all lists and dicts referenced through hashtab \"ht\" with \"copyID\".\n * \"list_stack\" is used to add lists to be marked.  Can be NULL.\n *\n * Returns TRUE if setting references failed somehow.\n */\n    int\nset_ref_in_ht(hashtab_T *ht, int copyID, list_stack_T **list_stack)\n{\n    int\t\ttodo;\n    int\t\tabort = FALSE;\n    hashitem_T\t*hi;\n    hashtab_T\t*cur_ht;\n    ht_stack_T\t*ht_stack = NULL;\n    ht_stack_T\t*tempitem;\n\n    cur_ht = ht;\n    for (;;)\n    {\n\tif (!abort)\n\t{\n\t    // Mark each item in the hashtab.  If the item contains a hashtab\n\t    // it is added to ht_stack, if it contains a list it is added to\n\t    // list_stack.\n\t    todo = (int)cur_ht->ht_used;\n\t    for (hi = cur_ht->ht_array; todo > 0; ++hi)\n\t\tif (!HASHITEM_EMPTY(hi))\n\t\t{\n\t\t    --todo;\n\t\t    abort = abort || set_ref_in_item(&HI2DI(hi)->di_tv, copyID,\n\t\t\t\t\t\t       &ht_stack, list_stack);\n\t\t}\n\t}\n\n\tif (ht_stack == NULL)\n\t    break;\n\n\t// take an item from the stack\n\tcur_ht = ht_stack->ht;\n\ttempitem = ht_stack;\n\tht_stack = ht_stack->prev;\n\tfree(tempitem);\n    }\n\n    return abort;\n}\n\n#if defined(FEAT_LUA) || defined(FEAT_PYTHON) || defined(FEAT_PYTHON3) \\\n\t\t\t\t\t\t\t|| defined(PROTO)\n/*\n * Mark a dict and its items with \"copyID\".\n * Returns TRUE if setting references failed somehow.\n */\n    int\nset_ref_in_dict(dict_T *d, int copyID)\n{\n    if (d != NULL && d->dv_copyID != copyID)\n    {\n\td->dv_copyID = copyID;\n\treturn set_ref_in_ht(&d->dv_hashtab, copyID, NULL);\n    }\n    return FALSE;\n}\n#endif\n\n/*\n * Mark a list and its items with \"copyID\".\n * Returns TRUE if setting references failed somehow.\n */\n    int\nset_ref_in_list(list_T *ll, int copyID)\n{\n    if (ll != NULL && ll->lv_copyID != copyID)\n    {\n\tll->lv_copyID = copyID;\n\treturn set_ref_in_list_items(ll, copyID, NULL);\n    }\n    return FALSE;\n}\n\n/*\n * Mark all lists and dicts referenced through list \"l\" with \"copyID\".\n * \"ht_stack\" is used to add hashtabs to be marked.  Can be NULL.\n *\n * Returns TRUE if setting references failed somehow.\n */\n    int\nset_ref_in_list_items(list_T *l, int copyID, ht_stack_T **ht_stack)\n{\n    listitem_T\t *li;\n    int\t\t abort = FALSE;\n    list_T\t *cur_l;\n    list_stack_T *list_stack = NULL;\n    list_stack_T *tempitem;\n\n    cur_l = l;\n    for (;;)\n    {\n\tif (!abort && cur_l->lv_first != &range_list_item)\n\t    // Mark each item in the list.  If the item contains a hashtab\n\t    // it is added to ht_stack, if it contains a list it is added to\n\t    // list_stack.\n\t    for (li = cur_l->lv_first; !abort && li != NULL; li = li->li_next)\n\t\tabort = abort || set_ref_in_item(&li->li_tv, copyID,\n\t\t\t\t\t\t       ht_stack, &list_stack);\n\tif (list_stack == NULL)\n\t    break;\n\n\t// take an item from the stack\n\tcur_l = list_stack->list;\n\ttempitem = list_stack;\n\tlist_stack = list_stack->prev;\n\tfree(tempitem);\n    }\n\n    return abort;\n}\n\n/*\n * Mark the partial in callback 'cb' with \"copyID\".\n */\n    int\nset_ref_in_callback(callback_T *cb, int copyID)\n{\n    typval_T tv;\n\n    if (cb->cb_name == NULL || *cb->cb_name == NUL || cb->cb_partial == NULL)\n\treturn FALSE;\n\n    tv.v_type = VAR_PARTIAL;\n    tv.vval.v_partial = cb->cb_partial;\n    return set_ref_in_item(&tv, copyID, NULL, NULL);\n}\n\n/*\n * Mark all lists, dicts and other container types referenced through typval\n * \"tv\" with \"copyID\".\n * \"list_stack\" is used to add lists to be marked.  Can be NULL.\n * \"ht_stack\" is used to add hashtabs to be marked.  Can be NULL.\n *\n * Returns TRUE if setting references failed somehow.\n */\n    int\nset_ref_in_item(\n    typval_T\t    *tv,\n    int\t\t    copyID,\n    ht_stack_T\t    **ht_stack,\n    list_stack_T    **list_stack)\n{\n    int\t\tabort = FALSE;\n\n    switch (tv->v_type)\n    {\n\tcase VAR_DICT:\n\t{\n\t    dict_T\t*dd = tv->vval.v_dict;\n\n\t    if (dd != NULL && dd->dv_copyID != copyID)\n\t    {\n\t\t// Didn't see this dict yet.\n\t\tdd->dv_copyID = copyID;\n\t\tif (ht_stack == NULL)\n\t\t{\n\t\t    abort = set_ref_in_ht(&dd->dv_hashtab, copyID, list_stack);\n\t\t}\n\t\telse\n\t\t{\n\t\t    ht_stack_T *newitem = ALLOC_ONE(ht_stack_T);\n\n\t\t    if (newitem == NULL)\n\t\t\tabort = TRUE;\n\t\t    else\n\t\t    {\n\t\t\tnewitem->ht = &dd->dv_hashtab;\n\t\t\tnewitem->prev = *ht_stack;\n\t\t\t*ht_stack = newitem;\n\t\t    }\n\t\t}\n\t    }\n\t    break;\n\t}\n\n\tcase VAR_LIST:\n\t{\n\t    list_T\t*ll = tv->vval.v_list;\n\n\t    if (ll != NULL && ll->lv_copyID != copyID)\n\t    {\n\t\t// Didn't see this list yet.\n\t\tll->lv_copyID = copyID;\n\t\tif (list_stack == NULL)\n\t\t{\n\t\t    abort = set_ref_in_list_items(ll, copyID, ht_stack);\n\t\t}\n\t\telse\n\t\t{\n\t\t    list_stack_T *newitem = ALLOC_ONE(list_stack_T);\n\n\t\t    if (newitem == NULL)\n\t\t\tabort = TRUE;\n\t\t    else\n\t\t    {\n\t\t\tnewitem->list = ll;\n\t\t\tnewitem->prev = *list_stack;\n\t\t\t*list_stack = newitem;\n\t\t    }\n\t\t}\n\t    }\n\t    break;\n\t}\n\n\tcase VAR_FUNC:\n\t{\n\t    abort = set_ref_in_func(tv->vval.v_string, NULL, copyID);\n\t    break;\n\t}\n\n\tcase VAR_PARTIAL:\n\t{\n\t    partial_T\t*pt = tv->vval.v_partial;\n\t    int\t\ti;\n\n\t    if (pt != NULL && pt->pt_copyID != copyID)\n\t    {\n\t\t// Didn't see this partial yet.\n\t\tpt->pt_copyID = copyID;\n\n\t\tabort = set_ref_in_func(pt->pt_name, pt->pt_func, copyID);\n\n\t\tif (pt->pt_dict != NULL)\n\t\t{\n\t\t    typval_T dtv;\n\n\t\t    dtv.v_type = VAR_DICT;\n\t\t    dtv.vval.v_dict = pt->pt_dict;\n\t\t    set_ref_in_item(&dtv, copyID, ht_stack, list_stack);\n\t\t}\n\n\t\tfor (i = 0; i < pt->pt_argc; ++i)\n\t\t    abort = abort || set_ref_in_item(&pt->pt_argv[i], copyID,\n\t\t\t\t\t\t\t ht_stack, list_stack);\n\t\t// pt_funcstack is handled in set_ref_in_funcstacks()\n\t\t// pt_loopvars is handled in set_ref_in_loopvars()\n\t    }\n\t    break;\n\t}\n\n\tcase VAR_JOB:\n\t{\n#ifdef FEAT_JOB_CHANNEL\n\t    job_T\t    *job = tv->vval.v_job;\n\t    typval_T    dtv;\n\n\t    if (job != NULL && job->jv_copyID != copyID)\n\t    {\n\t\tjob->jv_copyID = copyID;\n\t\tif (job->jv_channel != NULL)\n\t\t{\n\t\t    dtv.v_type = VAR_CHANNEL;\n\t\t    dtv.vval.v_channel = job->jv_channel;\n\t\t    set_ref_in_item(&dtv, copyID, ht_stack, list_stack);\n\t\t}\n\t\tif (job->jv_exit_cb.cb_partial != NULL)\n\t\t{\n\t\t    dtv.v_type = VAR_PARTIAL;\n\t\t    dtv.vval.v_partial = job->jv_exit_cb.cb_partial;\n\t\t    set_ref_in_item(&dtv, copyID, ht_stack, list_stack);\n\t\t}\n\t    }\n#endif\n\t    break;\n\t}\n\n\tcase VAR_CHANNEL:\n\t{\n#ifdef FEAT_JOB_CHANNEL\n\t    channel_T   *ch = tv->vval.v_channel;\n\t    ch_part_T   part;\n\t    typval_T    dtv;\n\t    jsonq_T\t*jq;\n\t    cbq_T\t*cq;\n\n\t    if (ch != NULL && ch->ch_copyID != copyID)\n\t    {\n\t\tch->ch_copyID = copyID;\n\t\tfor (part = PART_SOCK; part < PART_COUNT; ++part)\n\t\t{\n\t\t    for (jq = ch->ch_part[part].ch_json_head.jq_next;\n\t\t\t\t\t\t  jq != NULL; jq = jq->jq_next)\n\t\t\tset_ref_in_item(jq->jq_value, copyID,\n\t\t\t\t\t\t\t ht_stack, list_stack);\n\t\t    for (cq = ch->ch_part[part].ch_cb_head.cq_next; cq != NULL;\n\t\t\t\t\t\t\t      cq = cq->cq_next)\n\t\t\tif (cq->cq_callback.cb_partial != NULL)\n\t\t\t{\n\t\t\t    dtv.v_type = VAR_PARTIAL;\n\t\t\t    dtv.vval.v_partial = cq->cq_callback.cb_partial;\n\t\t\t    set_ref_in_item(&dtv, copyID, ht_stack, list_stack);\n\t\t\t}\n\t\t    if (ch->ch_part[part].ch_callback.cb_partial != NULL)\n\t\t    {\n\t\t\tdtv.v_type = VAR_PARTIAL;\n\t\t\tdtv.vval.v_partial =\n\t\t\t\t      ch->ch_part[part].ch_callback.cb_partial;\n\t\t\tset_ref_in_item(&dtv, copyID, ht_stack, list_stack);\n\t\t    }\n\t\t}\n\t\tif (ch->ch_callback.cb_partial != NULL)\n\t\t{\n\t\t    dtv.v_type = VAR_PARTIAL;\n\t\t    dtv.vval.v_partial = ch->ch_callback.cb_partial;\n\t\t    set_ref_in_item(&dtv, copyID, ht_stack, list_stack);\n\t\t}\n\t\tif (ch->ch_close_cb.cb_partial != NULL)\n\t\t{\n\t\t    dtv.v_type = VAR_PARTIAL;\n\t\t    dtv.vval.v_partial = ch->ch_close_cb.cb_partial;\n\t\t    set_ref_in_item(&dtv, copyID, ht_stack, list_stack);\n\t\t}\n\t    }\n#endif\n\t    break;\n\t}\n\n\tcase VAR_CLASS:\n\t    // TODO: Mark methods in class_obj_methods ?\n\t    // Mark initializer expressions?\n\t    break;\n\n\tcase VAR_OBJECT:\n\t    {\n\t\tobject_T *obj = tv->vval.v_object;\n\t\tif (obj != NULL && obj->obj_copyID != copyID)\n\t\t{\n\t\t    obj->obj_copyID = copyID;\n\n\t\t    // The typval_T array is right after the object_T.\n\t\t    typval_T *mtv = (typval_T *)(obj + 1);\n\t\t    for (int i = 0; !abort\n\t\t\t    && i < obj->obj_class->class_obj_member_count; ++i)\n\t\t\tabort = abort || set_ref_in_item(mtv + i, copyID,\n\t\t\t\t\t\t\t ht_stack, list_stack);\n\t\t}\n\t\tbreak;\n\t    }\n\n\tcase VAR_UNKNOWN:\n\tcase VAR_ANY:\n\tcase VAR_VOID:\n\tcase VAR_BOOL:\n\tcase VAR_SPECIAL:\n\tcase VAR_NUMBER:\n\tcase VAR_FLOAT:\n\tcase VAR_STRING:\n\tcase VAR_BLOB:\n\tcase VAR_INSTR:\n\t    // Types that do not contain any other item\n\t    break;\n    }\n\n    return abort;\n}\n\n/*\n * Return a string with the string representation of a variable.\n * If the memory is allocated \"tofree\" is set to it, otherwise NULL.\n * \"numbuf\" is used for a number.\n * When \"copyID\" is not NULL replace recursive lists and dicts with \"...\".\n * When both \"echo_style\" and \"composite_val\" are FALSE, put quotes around\n * strings as \"string()\", otherwise does not put quotes around strings, as\n * \":echo\" displays values.\n * When \"restore_copyID\" is FALSE, repeated items in dictionaries and lists\n * are replaced with \"...\".\n * May return NULL.\n */\n    char_u *\necho_string_core(\n    typval_T\t*tv,\n    char_u\t**tofree,\n    char_u\t*numbuf,\n    int\t\tcopyID,\n    int\t\techo_style,\n    int\t\trestore_copyID,\n    int\t\tcomposite_val)\n{\n    static int\trecurse = 0;\n    char_u\t*r = NULL;\n\n    if (recurse >= DICT_MAXNEST)\n    {\n\tif (!did_echo_string_emsg)\n\t{\n\t    // Only give this message once for a recursive call to avoid\n\t    // flooding the user with errors.  And stop iterating over lists\n\t    // and dicts.\n\t    did_echo_string_emsg = TRUE;\n\t    emsg(_(e_variable_nested_too_deep_for_displaying));\n\t}\n\t*tofree = NULL;\n\treturn (char_u *)\"{E724}\";\n    }\n    ++recurse;\n\n    switch (tv->v_type)\n    {\n\tcase VAR_STRING:\n\t    if (echo_style && !composite_val)\n\t    {\n\t\t*tofree = NULL;\n\t\tr = tv->vval.v_string;\n\t\tif (r == NULL)\n\t\t    r = (char_u *)\"\";\n\t    }\n\t    else\n\t    {\n\t\t*tofree = string_quote(tv->vval.v_string, FALSE);\n\t\tr = *tofree;\n\t    }\n\t    break;\n\n\tcase VAR_FUNC:\n\t    {\n\t\tchar_u buf[MAX_FUNC_NAME_LEN];\n\n\t\tif (echo_style)\n\t\t{\n\t\t    r = tv->vval.v_string == NULL ? (char_u *)\"function()\"\n\t\t\t\t  : make_ufunc_name_readable(tv->vval.v_string,\n\t\t\t\t\t\t       buf, MAX_FUNC_NAME_LEN);\n\t\t    if (r == buf)\n\t\t    {\n\t\t\tr = vim_strsave(buf);\n\t\t\t*tofree = r;\n\t\t    }\n\t\t    else\n\t\t\t*tofree = NULL;\n\t\t}\n\t\telse\n\t\t{\n\t\t    *tofree = string_quote(tv->vval.v_string == NULL ? NULL\n\t\t\t    : make_ufunc_name_readable(\n\t\t\t\ttv->vval.v_string, buf, MAX_FUNC_NAME_LEN),\n\t\t\t\t\t\t\t\t\t TRUE);\n\t\t    r = *tofree;\n\t\t}\n\t    }\n\t    break;\n\n\tcase VAR_PARTIAL:\n\t    {\n\t\tpartial_T   *pt = tv->vval.v_partial;\n\t\tchar_u\t    *fname = string_quote(pt == NULL ? NULL\n\t\t\t\t\t\t    : partial_name(pt), FALSE);\n\t\tgarray_T    ga;\n\t\tint\t    i;\n\t\tchar_u\t    *tf;\n\n\t\tga_init2(&ga, 1, 100);\n\t\tga_concat(&ga, (char_u *)\"function(\");\n\t\tif (fname != NULL)\n\t\t{\n\t\t    // When using uf_name prepend \"g:\" for a global function.\n\t\t    if (pt != NULL && pt->pt_name == NULL && fname[0] == '\\''\n\t\t\t\t\t\t      && vim_isupper(fname[1]))\n\t\t    {\n\t\t\tga_concat(&ga, (char_u *)\"'g:\");\n\t\t\tga_concat(&ga, fname + 1);\n\t\t    }\n\t\t    else\n\t\t\tga_concat(&ga, fname);\n\t\t    vim_free(fname);\n\t\t}\n\t\tif (pt != NULL && pt->pt_argc > 0)\n\t\t{\n\t\t    ga_concat(&ga, (char_u *)\", [\");\n\t\t    for (i = 0; i < pt->pt_argc; ++i)\n\t\t    {\n\t\t\tif (i > 0)\n\t\t\t    ga_concat(&ga, (char_u *)\", \");\n\t\t\tga_concat(&ga,\n\t\t\t     tv2string(&pt->pt_argv[i], &tf, numbuf, copyID));\n\t\t\tvim_free(tf);\n\t\t    }\n\t\t    ga_concat(&ga, (char_u *)\"]\");\n\t\t}\n\t\tif (pt != NULL && pt->pt_dict != NULL)\n\t\t{\n\t\t    typval_T dtv;\n\n\t\t    ga_concat(&ga, (char_u *)\", \");\n\t\t    dtv.v_type = VAR_DICT;\n\t\t    dtv.vval.v_dict = pt->pt_dict;\n\t\t    ga_concat(&ga, tv2string(&dtv, &tf, numbuf, copyID));\n\t\t    vim_free(tf);\n\t\t}\n\t\t// terminate with ')' and a NUL\n\t\tga_concat_len(&ga, (char_u *)\")\", 2);\n\n\t\t*tofree = ga.ga_data;\n\t\tr = *tofree;\n\t\tbreak;\n\t    }\n\n\tcase VAR_BLOB:\n\t    r = blob2string(tv->vval.v_blob, tofree, numbuf);\n\t    break;\n\n\tcase VAR_LIST:\n\t    if (tv->vval.v_list == NULL)\n\t    {\n\t\t// NULL list is equivalent to empty list.\n\t\t*tofree = NULL;\n\t\tr = (char_u *)\"[]\";\n\t    }\n\t    else if (copyID != 0 && tv->vval.v_list->lv_copyID == copyID\n\t\t    && tv->vval.v_list->lv_len > 0)\n\t    {\n\t\t*tofree = NULL;\n\t\tr = (char_u *)\"[...]\";\n\t    }\n\t    else\n\t    {\n\t\tint old_copyID = tv->vval.v_list->lv_copyID;\n\n\t\ttv->vval.v_list->lv_copyID = copyID;\n\t\t*tofree = list2string(tv, copyID, restore_copyID);\n\t\tif (restore_copyID)\n\t\t    tv->vval.v_list->lv_copyID = old_copyID;\n\t\tr = *tofree;\n\t    }\n\t    break;\n\n\tcase VAR_DICT:\n\t    if (tv->vval.v_dict == NULL)\n\t    {\n\t\t// NULL dict is equivalent to empty dict.\n\t\t*tofree = NULL;\n\t\tr = (char_u *)\"{}\";\n\t    }\n\t    else if (copyID != 0 && tv->vval.v_dict->dv_copyID == copyID\n\t\t    && tv->vval.v_dict->dv_hashtab.ht_used != 0)\n\t    {\n\t\t*tofree = NULL;\n\t\tr = (char_u *)\"{...}\";\n\t    }\n\t    else\n\t    {\n\t\tint old_copyID = tv->vval.v_dict->dv_copyID;\n\n\t\ttv->vval.v_dict->dv_copyID = copyID;\n\t\t*tofree = dict2string(tv, copyID, restore_copyID);\n\t\tif (restore_copyID)\n\t\t    tv->vval.v_dict->dv_copyID = old_copyID;\n\t\tr = *tofree;\n\t    }\n\t    break;\n\n\tcase VAR_NUMBER:\n\tcase VAR_UNKNOWN:\n\tcase VAR_ANY:\n\tcase VAR_VOID:\n\t    *tofree = NULL;\n\t    r = tv_get_string_buf(tv, numbuf);\n\t    break;\n\n\tcase VAR_JOB:\n\tcase VAR_CHANNEL:\n#ifdef FEAT_JOB_CHANNEL\n\t    *tofree = NULL;\n\t    r = tv->v_type == VAR_JOB ? job_to_string_buf(tv, numbuf)\n\t\t\t\t\t   : channel_to_string_buf(tv, numbuf);\n\t    if (composite_val)\n\t    {\n\t\t*tofree = string_quote(r, FALSE);\n\t\tr = *tofree;\n\t    }\n#endif\n\t    break;\n\n\tcase VAR_INSTR:\n\t    *tofree = NULL;\n\t    r = (char_u *)\"instructions\";\n\t    break;\n\n\tcase VAR_CLASS:\n\t    {\n\t\tclass_T *cl = tv->vval.v_class;\n\t\tsize_t len = 6 + (cl == NULL ? 9 : STRLEN(cl->class_name)) + 1;\n\t\tr = *tofree = alloc(len);\n\t\tvim_snprintf((char *)r, len, \"class %s\",\n\t\t\t    cl == NULL ? \"[unknown]\" : (char *)cl->class_name);\n\t    }\n\t    break;\n\n\tcase VAR_OBJECT:\n\t    {\n\t\tgarray_T ga;\n\t\tga_init2(&ga, 1, 50);\n\t\tga_concat(&ga, (char_u *)\"object of \");\n\t\tobject_T *obj = tv->vval.v_object;\n\t\tclass_T *cl = obj == NULL ? NULL : obj->obj_class;\n\t\tga_concat(&ga, cl == NULL ? (char_u *)\"[unknown]\"\n\t\t\t\t\t\t\t     : cl->class_name);\n\t\tif (cl != NULL)\n\t\t{\n\t\t    ga_concat(&ga, (char_u *)\" {\");\n\t\t    for (int i = 0; i < cl->class_obj_member_count; ++i)\n\t\t    {\n\t\t\tif (i > 0)\n\t\t\t    ga_concat(&ga, (char_u *)\", \");\n\t\t\tocmember_T *m = &cl->class_obj_members[i];\n\t\t\tga_concat(&ga, m->ocm_name);\n\t\t\tga_concat(&ga, (char_u *)\": \");\n\t\t\tchar_u *tf = NULL;\n\t\t\tga_concat(&ga, echo_string_core(\n\t\t\t\t\t       (typval_T *)(obj + 1) + i,\n\t\t\t\t\t       &tf, numbuf, copyID, echo_style,\n\t\t\t\t\t       restore_copyID, composite_val));\n\t\t\tvim_free(tf);\n\t\t    }\n\t\t    ga_concat(&ga, (char_u *)\"}\");\n\t\t}\n\n\t\t*tofree = r = ga.ga_data;\n\t    }\n\t    break;\n\n\tcase VAR_FLOAT:\n\t    *tofree = NULL;\n\t    vim_snprintf((char *)numbuf, NUMBUFLEN, \"%g\", tv->vval.v_float);\n\t    r = numbuf;\n\t    break;\n\n\tcase VAR_BOOL:\n\tcase VAR_SPECIAL:\n\t    *tofree = NULL;\n\t    r = (char_u *)get_var_special_name(tv->vval.v_number);\n\t    break;\n    }\n\n    if (--recurse == 0)\n\tdid_echo_string_emsg = FALSE;\n    return r;\n}\n\n/*\n * Return a string with the string representation of a variable.\n * If the memory is allocated \"tofree\" is set to it, otherwise NULL.\n * \"numbuf\" is used for a number.\n * Does not put quotes around strings, as \":echo\" displays values.\n * When \"copyID\" is not NULL replace recursive lists and dicts with \"...\".\n * May return NULL.\n */\n    char_u *\necho_string(\n    typval_T\t*tv,\n    char_u\t**tofree,\n    char_u\t*numbuf,\n    int\t\tcopyID)\n{\n    return echo_string_core(tv, tofree, numbuf, copyID, TRUE, FALSE, FALSE);\n}\n\n/*\n * Convert the specified byte index of line 'lnum' in buffer 'buf' to a\n * character index.  Works only for loaded buffers. Returns -1 on failure.\n * The index of the first byte and the first character is zero.\n */\n    int\nbuf_byteidx_to_charidx(buf_T *buf, int lnum, int byteidx)\n{\n    char_u\t*str;\n    char_u\t*t;\n    int\t\tcount;\n\n    if (buf == NULL || buf->b_ml.ml_mfp == NULL)\n\treturn -1;\n\n    if (lnum > buf->b_ml.ml_line_count)\n\tlnum = buf->b_ml.ml_line_count;\n\n    str = ml_get_buf(buf, lnum, FALSE);\n    if (str == NULL)\n\treturn -1;\n\n    if (*str == NUL)\n\treturn 0;\n\n    // count the number of characters\n    t = str;\n    for (count = 0; *t != NUL && t <= str + byteidx; count++)\n\tt += mb_ptr2len(t);\n\n    // In insert mode, when the cursor is at the end of a non-empty line,\n    // byteidx points to the NUL character immediately past the end of the\n    // string. In this case, add one to the character count.\n    if (*t == NUL && byteidx != 0 && t == str + byteidx)\n\tcount++;\n\n    return count - 1;\n}\n\n/*\n * Convert the specified character index of line 'lnum' in buffer 'buf' to a\n * byte index.  Works only for loaded buffers. Returns -1 on failure.\n * The index of the first byte and the first character is zero.\n */\n    int\nbuf_charidx_to_byteidx(buf_T *buf, int lnum, int charidx)\n{\n    char_u\t*str;\n    char_u\t*t;\n\n    if (buf == NULL || buf->b_ml.ml_mfp == NULL)\n\treturn -1;\n\n    if (lnum > buf->b_ml.ml_line_count)\n\tlnum = buf->b_ml.ml_line_count;\n\n    str = ml_get_buf(buf, lnum, FALSE);\n    if (str == NULL)\n\treturn -1;\n\n    // Convert the character offset to a byte offset\n    t = str;\n    while (*t != NUL && --charidx > 0)\n\tt += mb_ptr2len(t);\n\n    return t - str;\n}\n\n/*\n * Translate a String variable into a position.\n * Returns NULL when there is an error.\n */\n    pos_T *\nvar2fpos(\n    typval_T\t*varp,\n    int\t\tdollar_lnum,\t// TRUE when $ is last line\n    int\t\t*fnum,\t\t// set to fnum for '0, 'A, etc.\n    int\t\tcharcol)\t// return character column\n{\n    char_u\t\t*name;\n    static pos_T\tpos;\n    pos_T\t\t*pp;\n\n    // Argument can be [lnum, col, coladd].\n    if (varp->v_type == VAR_LIST)\n    {\n\tlist_T\t\t*l;\n\tint\t\tlen;\n\tint\t\terror = FALSE;\n\tlistitem_T\t*li;\n\n\tl = varp->vval.v_list;\n\tif (l == NULL)\n\t    return NULL;\n\n\t// Get the line number\n\tpos.lnum = list_find_nr(l, 0L, &error);\n\tif (error || pos.lnum <= 0 || pos.lnum > curbuf->b_ml.ml_line_count)\n\t    return NULL;\t// invalid line number\n\tif (charcol)\n\t    len = (long)mb_charlen(ml_get(pos.lnum));\n\telse\n\t    len = (long)STRLEN(ml_get(pos.lnum));\n\n\t// Get the column number\n\t// We accept \"$\" for the column number: last column.\n\tli = list_find(l, 1L);\n\tif (li != NULL && li->li_tv.v_type == VAR_STRING\n\t\t&& li->li_tv.vval.v_string != NULL\n\t\t&& STRCMP(li->li_tv.vval.v_string, \"$\") == 0)\n\t{\n\t    pos.col = len + 1;\n\t}\n\telse\n\t{\n\t    pos.col = list_find_nr(l, 1L, &error);\n\t    if (error)\n\t\treturn NULL;\n\t}\n\n\t// Accept a position up to the NUL after the line.\n\tif (pos.col == 0 || (int)pos.col > len + 1)\n\t    return NULL;\t// invalid column number\n\t--pos.col;\n\n\t// Get the virtual offset.  Defaults to zero.\n\tpos.coladd = list_find_nr(l, 2L, &error);\n\tif (error)\n\t    pos.coladd = 0;\n\n\treturn &pos;\n    }\n\n    if (in_vim9script() && check_for_string_arg(varp, 0) == FAIL)\n\treturn NULL;\n\n    name = tv_get_string_chk(varp);\n    if (name == NULL)\n\treturn NULL;\n\n    pos.lnum = 0;\n    if (name[0] == '.' && (!in_vim9script() || name[1] == NUL))\n    {\n\t// cursor\n\tpos = curwin->w_cursor;\n    }\n    else if (name[0] == 'v' && name[1] == NUL)\n    {\n\t// Visual start\n\tif (VIsual_active)\n\t    pos = VIsual;\n\telse\n\t    pos = curwin->w_cursor;\n    }\n    else if (name[0] == '\\'' && (!in_vim9script()\n\t\t\t\t\t|| (name[1] != NUL && name[2] == NUL)))\n    {\n\t// mark\n\tpp = getmark_buf_fnum(curbuf, name[1], FALSE, fnum);\n\tif (pp == NULL || pp == (pos_T *)-1 || pp->lnum <= 0)\n\t    return NULL;\n\tpos = *pp;\n    }\n    if (pos.lnum != 0)\n    {\n\tif (charcol)\n\t    pos.col = buf_byteidx_to_charidx(curbuf, pos.lnum, pos.col);\n\treturn &pos;\n    }\n\n    pos.coladd = 0;\n\n    if (name[0] == 'w' && dollar_lnum)\n    {\n\tpos.col = 0;\n\tif (name[1] == '0')\t\t// \"w0\": first visible line\n\t{\n\t    update_topline();\n\t    // In silent Ex mode topline is zero, but that's not a valid line\n\t    // number; use one instead.\n\t    pos.lnum = curwin->w_topline > 0 ? curwin->w_topline : 1;\n\t    return &pos;\n\t}\n\telse if (name[1] == '$')\t// \"w$\": last visible line\n\t{\n\t    validate_botline();\n\t    // In silent Ex mode botline is zero, return zero then.\n\t    pos.lnum = curwin->w_botline > 0 ? curwin->w_botline - 1 : 0;\n\t    return &pos;\n\t}\n    }\n    else if (name[0] == '$')\t\t// last column or line\n    {\n\tif (dollar_lnum)\n\t{\n\t    pos.lnum = curbuf->b_ml.ml_line_count;\n\t    pos.col = 0;\n\t}\n\telse\n\t{\n\t    pos.lnum = curwin->w_cursor.lnum;\n\t    if (charcol)\n\t\tpos.col = (colnr_T)mb_charlen(ml_get_curline());\n\t    else\n\t\tpos.col = (colnr_T)STRLEN(ml_get_curline());\n\t}\n\treturn &pos;\n    }\n    if (in_vim9script())\n\tsemsg(_(e_invalid_value_for_line_number_str), name);\n    return NULL;\n}\n\n/*\n * Convert list in \"arg\" into position \"posp\" and optional file number \"fnump\".\n * When \"fnump\" is NULL there is no file number, only 3 items: [lnum, col, off]\n * Note that the column is passed on as-is, the caller may want to decrement\n * it to use 1 for the first column.\n * If \"charcol\" is TRUE use the column as the character index instead of the\n * byte index.\n * Return FAIL when conversion is not possible, doesn't check the position for\n * validity.\n */\n    int\nlist2fpos(\n    typval_T\t*arg,\n    pos_T\t*posp,\n    int\t\t*fnump,\n    colnr_T\t*curswantp,\n    int\t\tcharcol)\n{\n    list_T\t*l = arg->vval.v_list;\n    long\ti = 0;\n    long\tn;\n\n    // List must be: [fnum, lnum, col, coladd, curswant], where \"fnum\" is only\n    // there when \"fnump\" isn't NULL; \"coladd\" and \"curswant\" are optional.\n    if (arg->v_type != VAR_LIST\n\t    || l == NULL\n\t    || l->lv_len < (fnump == NULL ? 2 : 3)\n\t    || l->lv_len > (fnump == NULL ? 4 : 5))\n\treturn FAIL;\n\n    if (fnump != NULL)\n    {\n\tn = list_find_nr(l, i++, NULL);\t// fnum\n\tif (n < 0)\n\t    return FAIL;\n\tif (n == 0)\n\t    n = curbuf->b_fnum;\t\t// current buffer\n\t*fnump = n;\n    }\n\n    n = list_find_nr(l, i++, NULL);\t// lnum\n    if (n < 0)\n\treturn FAIL;\n    posp->lnum = n;\n\n    n = list_find_nr(l, i++, NULL);\t// col\n    if (n < 0)\n\treturn FAIL;\n    // If character position is specified, then convert to byte position\n    // If the line number is zero use the cursor line.\n    if (charcol)\n    {\n\tbuf_T\t*buf;\n\n\t// Get the text for the specified line in a loaded buffer\n\tbuf = buflist_findnr(fnump == NULL ? curbuf->b_fnum : *fnump);\n\tif (buf == NULL || buf->b_ml.ml_mfp == NULL)\n\t    return FAIL;\n\n\tn = buf_charidx_to_byteidx(buf,\n\t\t  posp->lnum == 0 ? curwin->w_cursor.lnum : posp->lnum, n) + 1;\n    }\n    posp->col = n;\n\n    n = list_find_nr(l, i, NULL);\t// off\n    if (n < 0)\n\tposp->coladd = 0;\n    else\n\tposp->coladd = n;\n\n    if (curswantp != NULL)\n\t*curswantp = list_find_nr(l, i + 1, NULL);  // curswant\n\n    return OK;\n}\n\n/*\n * Get the length of an environment variable name.\n * Advance \"arg\" to the first character after the name.\n * Return 0 for error.\n */\n    int\nget_env_len(char_u **arg)\n{\n    char_u\t*p;\n    int\t\tlen;\n\n    for (p = *arg; vim_isIDc(*p); ++p)\n\t;\n    if (p == *arg)\t    // no name found\n\treturn 0;\n\n    len = (int)(p - *arg);\n    *arg = p;\n    return len;\n}\n\n/*\n * Get the length of the name of a function or internal variable.\n * \"arg\" is advanced to after the name.\n * Return 0 if something is wrong.\n */\n    int\nget_id_len(char_u **arg)\n{\n    char_u\t*p;\n    int\t\tlen;\n\n    // Find the end of the name.\n    for (p = *arg; eval_isnamec(*p); ++p)\n    {\n\tif (*p == ':')\n\t{\n\t    // \"s:\" is start of \"s:var\", but \"n:\" is not and can be used in\n\t    // slice \"[n:]\".  Also \"xx:\" is not a namespace.\n\t    len = (int)(p - *arg);\n\t    if ((len == 1 && vim_strchr(NAMESPACE_CHAR, **arg) == NULL)\n\t\t    || len > 1)\n\t\tbreak;\n\t}\n    }\n    if (p == *arg)\t    // no name found\n\treturn 0;\n\n    len = (int)(p - *arg);\n    *arg = p;\n\n    return len;\n}\n\n/*\n * Get the length of the name of a variable or function.\n * Only the name is recognized, does not handle \".key\" or \"[idx]\".\n * \"arg\" is advanced to the first non-white character after the name.\n * Return -1 if curly braces expansion failed.\n * Return 0 if something else is wrong.\n * If the name contains 'magic' {}'s, expand them and return the\n * expanded name in an allocated string via 'alias' - caller must free.\n */\n    int\nget_name_len(\n    char_u\t**arg,\n    char_u\t**alias,\n    int\t\tevaluate,\n    int\t\tverbose)\n{\n    int\t\tlen;\n    char_u\t*p;\n    char_u\t*expr_start;\n    char_u\t*expr_end;\n\n    *alias = NULL;  // default to no alias\n\n    if ((*arg)[0] == K_SPECIAL && (*arg)[1] == KS_EXTRA\n\t\t\t\t\t\t  && (*arg)[2] == (int)KE_SNR)\n    {\n\t// hard coded <SNR>, already translated\n\t*arg += 3;\n\treturn get_id_len(arg) + 3;\n    }\n    len = eval_fname_script(*arg);\n    if (len > 0)\n    {\n\t// literal \"<SID>\", \"s:\" or \"<SNR>\"\n\t*arg += len;\n    }\n\n    /*\n     * Find the end of the name; check for {} construction.\n     */\n    p = find_name_end(*arg, &expr_start, &expr_end,\n\t\t\t\t\t       len > 0 ? 0 : FNE_CHECK_START);\n    if (expr_start != NULL)\n    {\n\tchar_u\t*temp_string;\n\n\tif (!evaluate)\n\t{\n\t    len += (int)(p - *arg);\n\t    *arg = skipwhite(p);\n\t    return len;\n\t}\n\n\t/*\n\t * Include any <SID> etc in the expanded string:\n\t * Thus the -len here.\n\t */\n\ttemp_string = make_expanded_name(*arg - len, expr_start, expr_end, p);\n\tif (temp_string == NULL)\n\t    return -1;\n\t*alias = temp_string;\n\t*arg = skipwhite(p);\n\treturn (int)STRLEN(temp_string);\n    }\n\n    len += get_id_len(arg);\n    // Only give an error when there is something, otherwise it will be\n    // reported at a higher level.\n    if (len == 0 && verbose && **arg != NUL)\n\tsemsg(_(e_invalid_expression_str), *arg);\n\n    return len;\n}\n\n/*\n * Find the end of a variable or function name, taking care of magic braces.\n * If \"expr_start\" is not NULL then \"expr_start\" and \"expr_end\" are set to the\n * start and end of the first magic braces item.\n * \"flags\" can have FNE_INCL_BR and FNE_CHECK_START.\n * Return a pointer to just after the name.  Equal to \"arg\" if there is no\n * valid name.\n */\n    char_u *\nfind_name_end(\n    char_u\t*arg,\n    char_u\t**expr_start,\n    char_u\t**expr_end,\n    int\t\tflags)\n{\n    int\t\tmb_nest = 0;\n    int\t\tbr_nest = 0;\n    char_u\t*p;\n    int\t\tlen;\n    int\t\tvim9script = in_vim9script();\n\n    if (expr_start != NULL)\n    {\n\t*expr_start = NULL;\n\t*expr_end = NULL;\n    }\n\n    // Quick check for valid starting character.\n    if ((flags & FNE_CHECK_START) && !eval_isnamec1(*arg)\n\t\t\t\t\t\t&& (*arg != '{' || vim9script))\n\treturn arg;\n\n    for (p = arg; *p != NUL\n\t\t    && (eval_isnamec(*p)\n\t\t\t|| (*p == '{' && !vim9script)\n\t\t\t|| ((flags & FNE_INCL_BR) && (*p == '['\n\t\t\t\t\t || (*p == '.' && eval_isdictc(p[1]))))\n\t\t\t|| mb_nest != 0\n\t\t\t|| br_nest != 0); MB_PTR_ADV(p))\n    {\n\tif (*p == '\\'')\n\t{\n\t    // skip over 'string' to avoid counting [ and ] inside it.\n\t    for (p = p + 1; *p != NUL && *p != '\\''; MB_PTR_ADV(p))\n\t\t;\n\t    if (*p == NUL)\n\t\tbreak;\n\t}\n\telse if (*p == '\"')\n\t{\n\t    // skip over \"str\\\"ing\" to avoid counting [ and ] inside it.\n\t    for (p = p + 1; *p != NUL && *p != '\"'; MB_PTR_ADV(p))\n\t\tif (*p == '\\\\' && p[1] != NUL)\n\t\t    ++p;\n\t    if (*p == NUL)\n\t\tbreak;\n\t}\n\telse if (br_nest == 0 && mb_nest == 0 && *p == ':')\n\t{\n\t    // \"s:\" is start of \"s:var\", but \"n:\" is not and can be used in\n\t    // slice \"[n:]\".  Also \"xx:\" is not a namespace. But {ns}: is.\n\t    len = (int)(p - arg);\n\t    if ((len == 1 && vim_strchr(NAMESPACE_CHAR, *arg) == NULL)\n\t\t    || (len > 1 && p[-1] != '}'))\n\t\tbreak;\n\t}\n\n\tif (mb_nest == 0)\n\t{\n\t    if (*p == '[')\n\t\t++br_nest;\n\t    else if (*p == ']')\n\t\t--br_nest;\n\t}\n\n\tif (br_nest == 0 && !vim9script)\n\t{\n\t    if (*p == '{')\n\t    {\n\t\tmb_nest++;\n\t\tif (expr_start != NULL && *expr_start == NULL)\n\t\t    *expr_start = p;\n\t    }\n\t    else if (*p == '}')\n\t    {\n\t\tmb_nest--;\n\t\tif (expr_start != NULL && mb_nest == 0 && *expr_end == NULL)\n\t\t    *expr_end = p;\n\t    }\n\t}\n    }\n\n    return p;\n}\n\n/*\n * Expands out the 'magic' {}'s in a variable/function name.\n * Note that this can call itself recursively, to deal with\n * constructs like foo{bar}{baz}{bam}\n * The four pointer arguments point to \"foo{expre}ss{ion}bar\"\n *\t\t\t\"in_start\"      ^\n *\t\t\t\"expr_start\"\t   ^\n *\t\t\t\"expr_end\"\t\t ^\n *\t\t\t\"in_end\"\t\t\t    ^\n *\n * Returns a new allocated string, which the caller must free.\n * Returns NULL for failure.\n */\n    static char_u *\nmake_expanded_name(\n    char_u\t*in_start,\n    char_u\t*expr_start,\n    char_u\t*expr_end,\n    char_u\t*in_end)\n{\n    char_u\tc1;\n    char_u\t*retval = NULL;\n    char_u\t*temp_result;\n\n    if (expr_end == NULL || in_end == NULL)\n\treturn NULL;\n    *expr_start\t= NUL;\n    *expr_end = NUL;\n    c1 = *in_end;\n    *in_end = NUL;\n\n    temp_result = eval_to_string(expr_start + 1, FALSE, FALSE);\n    if (temp_result != NULL)\n    {\n\tretval = alloc(STRLEN(temp_result) + (expr_start - in_start)\n\t\t\t\t\t\t   + (in_end - expr_end) + 1);\n\tif (retval != NULL)\n\t{\n\t    STRCPY(retval, in_start);\n\t    STRCAT(retval, temp_result);\n\t    STRCAT(retval, expr_end + 1);\n\t}\n    }\n    vim_free(temp_result);\n\n    *in_end = c1;\t\t// put char back for error messages\n    *expr_start = '{';\n    *expr_end = '}';\n\n    if (retval != NULL)\n    {\n\ttemp_result = find_name_end(retval, &expr_start, &expr_end, 0);\n\tif (expr_start != NULL)\n\t{\n\t    // Further expansion!\n\t    temp_result = make_expanded_name(retval, expr_start,\n\t\t\t\t\t\t       expr_end, temp_result);\n\t    vim_free(retval);\n\t    retval = temp_result;\n\t}\n    }\n\n    return retval;\n}\n\n/*\n * Return TRUE if character \"c\" can be used in a variable or function name.\n * Does not include '{' or '}' for magic braces.\n */\n    int\neval_isnamec(int c)\n{\n    return ASCII_ISALNUM(c) || c == '_' || c == ':' || c == AUTOLOAD_CHAR;\n}\n\n/*\n * Return TRUE if character \"c\" can be used as the first character in a\n * variable or function name (excluding '{' and '}').\n */\n    int\neval_isnamec1(int c)\n{\n    return ASCII_ISALPHA(c) || c == '_';\n}\n\n/*\n * Return TRUE if character \"c\" can be used as the first character of a\n * dictionary key.\n */\n    int\neval_isdictc(int c)\n{\n    return ASCII_ISALNUM(c) || c == '_';\n}\n\n/*\n * Handle:\n * - expr[expr], expr[expr:expr] subscript\n * - \".name\" lookup\n * - function call with Funcref variable: func(expr)\n * - method call: var->method()\n *\n * Can all be combined in any order: dict.func(expr)[idx]['func'](expr)->len()\n * \"name_start\" points to a variable before the subscript or is NULL.\n */\n    int\nhandle_subscript(\n    char_u\t**arg,\n    char_u\t*name_start,\n    typval_T\t*rettv,\n    evalarg_T\t*evalarg,\n    int\t\tverbose)\t// give error messages\n{\n    int\t\tevaluate = evalarg != NULL\n\t\t\t\t      && (evalarg->eval_flags & EVAL_EVALUATE);\n    int\t\tret = OK;\n    dict_T\t*selfdict = NULL;\n    int\t\tcheck_white = TRUE;\n    int\t\tgetnext;\n    char_u\t*p;\n\n    while (ret == OK)\n    {\n\t// When at the end of the line and \".name\" or \"->{\" or \"->X\" follows in\n\t// the next line then consume the line break.\n\tp = eval_next_non_blank(*arg, evalarg, &getnext);\n\tif (getnext\n\t    && ((rettv->v_type == VAR_DICT && *p == '.' && eval_isdictc(p[1]))\n\t\t|| (p[0] == '-' && p[1] == '>' && (p[2] == '{'\n\t\t\t|| ASCII_ISALPHA(in_vim9script() ? *skipwhite(p + 2)\n\t\t\t\t\t\t\t\t    : p[2])))))\n\t{\n\t    *arg = eval_next_line(*arg, evalarg);\n\t    p = *arg;\n\t    check_white = FALSE;\n\t}\n\n\tif (rettv->v_type == VAR_ANY)\n\t{\n\t    char_u\t*exp_name;\n\t    int\t\tcc;\n\t    int\t\tidx;\n\t    ufunc_T\t*ufunc;\n\t    type_T\t*type;\n\n\t    // Found script from \"import {name} as name\", script item name must\n\t    // follow.  \"rettv->vval.v_number\" has the script ID.\n\t    if (**arg != '.')\n\t    {\n\t\tif (verbose)\n\t\t    semsg(_(e_expected_dot_after_name_str),\n\t\t\t\t\tname_start != NULL ? name_start: *arg);\n\t\tret = FAIL;\n\t\tbreak;\n\t    }\n\t    ++*arg;\n\t    if (IS_WHITE_OR_NUL(**arg))\n\t    {\n\t\tif (verbose)\n\t\t    emsg(_(e_no_white_space_allowed_after_dot));\n\t\tret = FAIL;\n\t\tbreak;\n\t    }\n\n\t    // isolate the name\n\t    exp_name = *arg;\n\t    while (eval_isnamec(**arg))\n\t\t++*arg;\n\t    cc = **arg;\n\t    **arg = NUL;\n\n\t    idx = find_exported(rettv->vval.v_number, exp_name, &ufunc, &type,\n\t\t       evalarg == NULL ? NULL : evalarg->eval_cctx,\n\t\t       evalarg == NULL ? NULL : evalarg->eval_cstack, verbose);\n\t    **arg = cc;\n\n\t    if (idx < 0 && ufunc == NULL)\n\t    {\n\t\tret = FAIL;\n\t\tbreak;\n\t    }\n\t    if (idx >= 0)\n\t    {\n\t\tscriptitem_T    *si = SCRIPT_ITEM(rettv->vval.v_number);\n\t\tsvar_T\t\t*sv = ((svar_T *)si->sn_var_vals.ga_data) + idx;\n\n\t\tcopy_tv(sv->sv_tv, rettv);\n\t    }\n\t    else\n\t    {\n\t\trettv->v_type = VAR_FUNC;\n\t\trettv->vval.v_string = vim_strsave(ufunc->uf_name);\n\t    }\n\t    continue;\n\t}\n\n\tif ((**arg == '(' && (!evaluate || rettv->v_type == VAR_FUNC\n\t\t\t    || rettv->v_type == VAR_PARTIAL))\n\t\t    && (!check_white || !VIM_ISWHITE(*(*arg - 1))))\n\t{\n\t    ret = call_func_rettv(arg, evalarg, rettv, evaluate,\n\t\t\t\t\t\t\t       selfdict, NULL);\n\n\t    // Stop the expression evaluation when immediately aborting on\n\t    // error, or when an interrupt occurred or an exception was thrown\n\t    // but not caught.\n\t    if (aborting())\n\t    {\n\t\tif (ret == OK)\n\t\t    clear_tv(rettv);\n\t\tret = FAIL;\n\t    }\n\t    dict_unref(selfdict);\n\t    selfdict = NULL;\n\t}\n\telse if (p[0] == '-' && p[1] == '>')\n\t{\n\t    if (in_vim9script())\n\t\t*arg = skipwhite(p + 2);\n\t    else\n\t\t*arg = p + 2;\n\t    if (ret == OK)\n\t    {\n\t\tif (VIM_ISWHITE(**arg))\n\t\t{\n\t\t    emsg(_(e_no_white_space_allowed_before_parenthesis));\n\t\t    ret = FAIL;\n\t\t}\n\t\telse if ((**arg == '{' && !in_vim9script()) || **arg == '(')\n\t\t    // expr->{lambda}() or expr->(lambda)()\n\t\t    ret = eval_lambda(arg, rettv, evalarg, verbose);\n\t\telse\n\t\t    // expr->name()\n\t\t    ret = eval_method(arg, rettv, evalarg, verbose);\n\t    }\n\t}\n\t// \".\" is \".name\" lookup when we found a dict or when evaluating and\n\t// scriptversion is at least 2, where string concatenation is \"..\".\n\telse if (**arg == '['\n\t\t|| (**arg == '.' && (rettv->v_type == VAR_DICT\n\t\t\t|| (!evaluate\n\t\t\t    && (*arg)[1] != '.'\n\t\t\t    && !in_old_script(2)))))\n\t{\n\t    dict_unref(selfdict);\n\t    if (rettv->v_type == VAR_DICT)\n\t    {\n\t\tselfdict = rettv->vval.v_dict;\n\t\tif (selfdict != NULL)\n\t\t    ++selfdict->dv_refcount;\n\t    }\n\t    else\n\t\tselfdict = NULL;\n\t    if (eval_index(arg, rettv, evalarg, verbose) == FAIL)\n\t    {\n\t\tclear_tv(rettv);\n\t\tret = FAIL;\n\t    }\n\t}\n\telse if (**arg == '.' && (rettv->v_type == VAR_CLASS\n\t\t\t\t\t       || rettv->v_type == VAR_OBJECT))\n\t{\n\t    // class member: SomeClass.varname\n\t    // class method: SomeClass.SomeMethod()\n\t    // class constructor: SomeClass.new()\n\t    // object member: someObject.varname\n\t    // object method: someObject.SomeMethod()\n\t    if (class_object_index(arg, rettv, evalarg, verbose) == FAIL)\n\t    {\n\t\tclear_tv(rettv);\n\t\tret = FAIL;\n\t    }\n\t}\n\telse\n\t    break;\n    }\n\n    // Turn \"dict.Func\" into a partial for \"Func\" bound to \"dict\".\n    // Don't do this when \"Func\" is already a partial that was bound\n    // explicitly (pt_auto is FALSE).\n    if (selfdict != NULL\n\t    && (rettv->v_type == VAR_FUNC\n\t\t|| (rettv->v_type == VAR_PARTIAL\n\t\t    && (rettv->vval.v_partial->pt_auto\n\t\t\t|| rettv->vval.v_partial->pt_dict == NULL))))\n\tselfdict = make_partial(selfdict, rettv);\n\n    dict_unref(selfdict);\n    return ret;\n}\n\n/*\n * Make a copy of an item.\n * Lists and Dictionaries are also copied.  A deep copy if \"deep\" is set.\n * \"top\" is TRUE for the toplevel of copy().\n * For deepcopy() \"copyID\" is zero for a full copy or the ID for when a\n * reference to an already copied list/dict can be used.\n * Returns FAIL or OK.\n */\n    int\nitem_copy(\n    typval_T\t*from,\n    typval_T\t*to,\n    int\t\tdeep,\n    int\t\ttop,\n    int\t\tcopyID)\n{\n    static int\trecurse = 0;\n    int\t\tret = OK;\n\n    if (recurse >= DICT_MAXNEST)\n    {\n\temsg(_(e_variable_nested_too_deep_for_making_copy));\n\treturn FAIL;\n    }\n    ++recurse;\n\n    switch (from->v_type)\n    {\n\tcase VAR_NUMBER:\n\tcase VAR_FLOAT:\n\tcase VAR_STRING:\n\tcase VAR_FUNC:\n\tcase VAR_PARTIAL:\n\tcase VAR_BOOL:\n\tcase VAR_SPECIAL:\n\tcase VAR_JOB:\n\tcase VAR_CHANNEL:\n\tcase VAR_INSTR:\n\tcase VAR_CLASS:\n\tcase VAR_OBJECT:\n\t    copy_tv(from, to);\n\t    break;\n\tcase VAR_LIST:\n\t    to->v_type = VAR_LIST;\n\t    to->v_lock = 0;\n\t    if (from->vval.v_list == NULL)\n\t\tto->vval.v_list = NULL;\n\t    else if (copyID != 0 && from->vval.v_list->lv_copyID == copyID)\n\t    {\n\t\t// use the copy made earlier\n\t\tto->vval.v_list = from->vval.v_list->lv_copylist;\n\t\t++to->vval.v_list->lv_refcount;\n\t    }\n\t    else\n\t\tto->vval.v_list = list_copy(from->vval.v_list,\n\t\t\t\t\t\t\t    deep, top, copyID);\n\t    if (to->vval.v_list == NULL)\n\t\tret = FAIL;\n\t    break;\n\tcase VAR_BLOB:\n\t    ret = blob_copy(from->vval.v_blob, to);\n\t    break;\n\tcase VAR_DICT:\n\t    to->v_type = VAR_DICT;\n\t    to->v_lock = 0;\n\t    if (from->vval.v_dict == NULL)\n\t\tto->vval.v_dict = NULL;\n\t    else if (copyID != 0 && from->vval.v_dict->dv_copyID == copyID)\n\t    {\n\t\t// use the copy made earlier\n\t\tto->vval.v_dict = from->vval.v_dict->dv_copydict;\n\t\t++to->vval.v_dict->dv_refcount;\n\t    }\n\t    else\n\t\tto->vval.v_dict = dict_copy(from->vval.v_dict,\n\t\t\t\t\t\t\t    deep, top, copyID);\n\t    if (to->vval.v_dict == NULL)\n\t\tret = FAIL;\n\t    break;\n\tcase VAR_UNKNOWN:\n\tcase VAR_ANY:\n\tcase VAR_VOID:\n\t    internal_error_no_abort(\"item_copy(UNKNOWN)\");\n\t    ret = FAIL;\n    }\n    --recurse;\n    return ret;\n}\n\n    void\necho_one(typval_T *rettv, int with_space, int *atstart, int *needclr)\n{\n    char_u\t*tofree;\n    char_u\tnumbuf[NUMBUFLEN];\n    char_u\t*p = echo_string(rettv, &tofree, numbuf, get_copyID());\n\n    if (*atstart)\n    {\n\t*atstart = FALSE;\n\t// Call msg_start() after eval1(), evaluating the expression\n\t// may cause a message to appear.\n\tif (with_space)\n\t{\n\t    // Mark the saved text as finishing the line, so that what\n\t    // follows is displayed on a new line when scrolling back\n\t    // at the more prompt.\n\t    msg_sb_eol();\n\t    msg_start();\n\t}\n    }\n    else if (with_space)\n\tmsg_puts_attr(\" \", echo_attr);\n\n    if (p != NULL)\n\tfor ( ; *p != NUL && !got_int; ++p)\n\t{\n\t    if (*p == '\\n' || *p == '\\r' || *p == TAB)\n\t    {\n\t\tif (*p != TAB && *needclr)\n\t\t{\n\t\t    // remove any text still there from the command\n\t\t    msg_clr_eos();\n\t\t    *needclr = FALSE;\n\t\t}\n\t\tmsg_putchar_attr(*p, echo_attr);\n\t    }\n\t    else\n\t    {\n\t\tif (has_mbyte)\n\t\t{\n\t\t    int i = (*mb_ptr2len)(p);\n\n\t\t    (void)msg_outtrans_len_attr(p, i, echo_attr);\n\t\t    p += i - 1;\n\t\t}\n\t\telse\n\t\t    (void)msg_outtrans_len_attr(p, 1, echo_attr);\n\t    }\n\t}\n    vim_free(tofree);\n}\n\n/*\n * \":echo expr1 ...\"\tprint each argument separated with a space, add a\n *\t\t\tnewline at the end.\n * \":echon expr1 ...\"\tprint each argument plain.\n */\n    void\nex_echo(exarg_T *eap)\n{\n    char_u\t*arg = eap->arg;\n    typval_T\trettv;\n    char_u\t*arg_start;\n    int\t\tneedclr = TRUE;\n    int\t\tatstart = TRUE;\n    int\t\tdid_emsg_before = did_emsg;\n    int\t\tcalled_emsg_before = called_emsg;\n    evalarg_T\tevalarg;\n\n    fill_evalarg_from_eap(&evalarg, eap, eap->skip);\n\n    if (eap->skip)\n\t++emsg_skip;\n    while ((!ends_excmd2(eap->cmd, arg) || *arg == '\"') && !got_int)\n    {\n\t// If eval1() causes an error message the text from the command may\n\t// still need to be cleared. E.g., \"echo 22,44\".\n\tneed_clr_eos = needclr;\n\n\targ_start = arg;\n\tif (eval1(&arg, &rettv, &evalarg) == FAIL)\n\t{\n\t    /*\n\t     * Report the invalid expression unless the expression evaluation\n\t     * has been cancelled due to an aborting error, an interrupt, or an\n\t     * exception.\n\t     */\n\t    if (!aborting() && did_emsg == did_emsg_before\n\t\t\t\t\t  && called_emsg == called_emsg_before)\n\t\tsemsg(_(e_invalid_expression_str), arg_start);\n\t    need_clr_eos = FALSE;\n\t    break;\n\t}\n\tneed_clr_eos = FALSE;\n\n\tif (!eap->skip)\n\t{\n\t    if (rettv.v_type == VAR_VOID)\n\t    {\n\t\tsemsg(_(e_expression_does_not_result_in_value_str), arg_start);\n\t\tbreak;\n\t    }\n\t    echo_one(&rettv, eap->cmdidx == CMD_echo, &atstart, &needclr);\n\t}\n\n\tclear_tv(&rettv);\n\targ = skipwhite(arg);\n    }\n    set_nextcmd(eap, arg);\n    clear_evalarg(&evalarg, eap);\n\n    if (eap->skip)\n\t--emsg_skip;\n    else\n    {\n\t// remove text that may still be there from the command\n\tif (needclr)\n\t    msg_clr_eos();\n\tif (eap->cmdidx == CMD_echo)\n\t    msg_end();\n    }\n}\n\n/*\n * \":echohl {name}\".\n */\n    void\nex_echohl(exarg_T *eap)\n{\n    echo_attr = syn_name2attr(eap->arg);\n}\n\n/*\n * Returns the :echo attribute\n */\n    int\nget_echo_attr(void)\n{\n    return echo_attr;\n}\n\n/*\n * \":execute expr1 ...\"\texecute the result of an expression.\n * \":echomsg expr1 ...\"\tPrint a message\n * \":echowindow expr1 ...\" Print a message in the messages window\n * \":echoerr expr1 ...\"\tPrint an error\n * \":echoconsole expr1 ...\" Print a message on stdout\n * Each gets spaces around each argument and a newline at the end for\n * echo commands\n */\n    void\nex_execute(exarg_T *eap)\n{\n    char_u\t*arg = eap->arg;\n    typval_T\trettv;\n    int\t\tret = OK;\n    char_u\t*p;\n    garray_T\tga;\n    int\t\tlen;\n    long\tstart_lnum = SOURCING_LNUM;\n\n    ga_init2(&ga, 1, 80);\n\n    if (eap->skip)\n\t++emsg_skip;\n    while (!ends_excmd2(eap->cmd, arg) || *arg == '\"')\n    {\n\tret = eval1_emsg(&arg, &rettv, eap);\n\tif (ret == FAIL)\n\t    break;\n\n\tif (!eap->skip)\n\t{\n\t    char_u   buf[NUMBUFLEN];\n\n\t    if (eap->cmdidx == CMD_execute)\n\t    {\n\t\tif (rettv.v_type == VAR_CHANNEL || rettv.v_type == VAR_JOB)\n\t\t{\n\t\t    semsg(_(e_using_invalid_value_as_string_str),\n\t\t\t\t\t\t  vartype_name(rettv.v_type));\n\t\t    p = NULL;\n\t\t}\n\t\telse\n\t\t    p = tv_get_string_buf(&rettv, buf);\n\t    }\n\t    else\n\t\tp = tv_stringify(&rettv, buf);\n\t    if (p == NULL)\n\t    {\n\t\tclear_tv(&rettv);\n\t\tret = FAIL;\n\t\tbreak;\n\t    }\n\t    len = (int)STRLEN(p);\n\t    if (ga_grow(&ga, len + 2) == FAIL)\n\t    {\n\t\tclear_tv(&rettv);\n\t\tret = FAIL;\n\t\tbreak;\n\t    }\n\t    if (ga.ga_len)\n\t\t((char_u *)(ga.ga_data))[ga.ga_len++] = ' ';\n\t    STRCPY((char_u *)(ga.ga_data) + ga.ga_len, p);\n\t    ga.ga_len += len;\n\t}\n\n\tclear_tv(&rettv);\n\targ = skipwhite(arg);\n    }\n\n    if (ret != FAIL && ga.ga_data != NULL)\n    {\n\t// use the first line of continuation lines for messages\n\tSOURCING_LNUM = start_lnum;\n\n\tif (eap->cmdidx == CMD_echomsg\n\t\t|| eap->cmdidx == CMD_echowindow\n\t\t|| eap->cmdidx == CMD_echoerr)\n\t{\n\t    // Mark the already saved text as finishing the line, so that what\n\t    // follows is displayed on a new line when scrolling back at the\n\t    // more prompt.\n\t    msg_sb_eol();\n\t}\n\n\tif (eap->cmdidx == CMD_echomsg)\n\t{\n\t    msg_attr(ga.ga_data, echo_attr);\n\t    out_flush();\n\t}\n\telse if (eap->cmdidx == CMD_echowindow)\n\t{\n#ifdef HAS_MESSAGE_WINDOW\n\t    start_echowindow(eap->addr_count > 0 ? eap->line2 : 0);\n#endif\n\t    msg_attr(ga.ga_data, echo_attr);\n#ifdef HAS_MESSAGE_WINDOW\n\t    end_echowindow();\n#endif\n\t}\n\telse if (eap->cmdidx == CMD_echoconsole)\n\t{\n\t    ui_write(ga.ga_data, (int)STRLEN(ga.ga_data), TRUE);\n\t    ui_write((char_u *)\"\\r\\n\", 2, TRUE);\n\t}\n\telse if (eap->cmdidx == CMD_echoerr)\n\t{\n\t    int\t\tsave_did_emsg = did_emsg;\n\n\t    // We don't want to abort following commands, restore did_emsg.\n\t    emsg(ga.ga_data);\n\t    if (!force_abort)\n\t\tdid_emsg = save_did_emsg;\n\t}\n\telse if (eap->cmdidx == CMD_execute)\n\t{\n\t    int save_sticky_cmdmod_flags = sticky_cmdmod_flags;\n\n\t    // \"legacy exe cmd\" and \"vim9cmd exe cmd\" applies to \"cmd\".\n\t    sticky_cmdmod_flags = cmdmod.cmod_flags\n\t\t\t\t\t\t& (CMOD_LEGACY | CMOD_VIM9CMD);\n\t    do_cmdline((char_u *)ga.ga_data,\n\t\t       eap->getline, eap->cookie, DOCMD_NOWAIT|DOCMD_VERBOSE);\n\t    sticky_cmdmod_flags = save_sticky_cmdmod_flags;\n\t}\n    }\n\n    ga_clear(&ga);\n\n    if (eap->skip)\n\t--emsg_skip;\n    set_nextcmd(eap, arg);\n}\n\n/*\n * Skip over the name of an option: \"&option\", \"&g:option\" or \"&l:option\".\n * \"arg\" points to the \"&\" or '+' when called, to \"option\" when returning.\n * Returns NULL when no option name found.  Otherwise pointer to the char\n * after the option name.\n */\n    char_u *\nfind_option_end(char_u **arg, int *scope)\n{\n    char_u\t*p = *arg;\n\n    ++p;\n    if (*p == 'g' && p[1] == ':')\n    {\n\t*scope = OPT_GLOBAL;\n\tp += 2;\n    }\n    else if (*p == 'l' && p[1] == ':')\n    {\n\t*scope = OPT_LOCAL;\n\tp += 2;\n    }\n    else\n\t*scope = 0;\n\n    if (!ASCII_ISALPHA(*p))\n\treturn NULL;\n    *arg = p;\n\n    if (p[0] == 't' && p[1] == '_' && p[2] != NUL && p[3] != NUL)\n\tp += 4;\t    // termcap option\n    else\n\twhile (ASCII_ISALPHA(*p))\n\t    ++p;\n    return p;\n}\n\n/*\n * Display script name where an item was last set.\n * Should only be invoked when 'verbose' is non-zero.\n */\n    void\nlast_set_msg(sctx_T script_ctx)\n{\n    char_u *p;\n\n    if (script_ctx.sc_sid == 0)\n\treturn;\n\n    p = home_replace_save(NULL, get_scriptname(script_ctx.sc_sid));\n    if (p == NULL)\n\treturn;\n\n    verbose_enter();\n    msg_puts(_(\"\\n\\tLast set from \"));\n    msg_puts((char *)p);\n    if (script_ctx.sc_lnum > 0)\n    {\n\tmsg_puts(_(line_msg));\n\tmsg_outnum((long)script_ctx.sc_lnum);\n    }\n    verbose_leave();\n    vim_free(p);\n}\n\n#endif // FEAT_EVAL\n\n/*\n * Perform a substitution on \"str\" with pattern \"pat\" and substitute \"sub\".\n * When \"sub\" is NULL \"expr\" is used, must be a VAR_FUNC or VAR_PARTIAL.\n * \"flags\" can be \"g\" to do a global substitute.\n * Returns an allocated string, NULL for error.\n */\n    char_u *\ndo_string_sub(\n    char_u\t*str,\n    char_u\t*pat,\n    char_u\t*sub,\n    typval_T\t*expr,\n    char_u\t*flags)\n{\n    int\t\tsublen;\n    regmatch_T\tregmatch;\n    int\t\ti;\n    int\t\tdo_all;\n    char_u\t*tail;\n    char_u\t*end;\n    garray_T\tga;\n    char_u\t*ret;\n    char_u\t*save_cpo;\n    char_u\t*zero_width = NULL;\n\n    // Make 'cpoptions' empty, so that the 'l' flag doesn't work here\n    save_cpo = p_cpo;\n    p_cpo = empty_option;\n\n    ga_init2(&ga, 1, 200);\n\n    do_all = (flags[0] == 'g');\n\n    regmatch.rm_ic = p_ic;\n    regmatch.regprog = vim_regcomp(pat, RE_MAGIC + RE_STRING);\n    if (regmatch.regprog != NULL)\n    {\n\ttail = str;\n\tend = str + STRLEN(str);\n\twhile (vim_regexec_nl(&regmatch, str, (colnr_T)(tail - str)))\n\t{\n\t    // Skip empty match except for first match.\n\t    if (regmatch.startp[0] == regmatch.endp[0])\n\t    {\n\t\tif (zero_width == regmatch.startp[0])\n\t\t{\n\t\t    // avoid getting stuck on a match with an empty string\n\t\t    i = mb_ptr2len(tail);\n\t\t    mch_memmove((char_u *)ga.ga_data + ga.ga_len, tail,\n\t\t\t\t\t\t\t\t   (size_t)i);\n\t\t    ga.ga_len += i;\n\t\t    tail += i;\n\t\t    continue;\n\t\t}\n\t\tzero_width = regmatch.startp[0];\n\t    }\n\n\t    /*\n\t     * Get some space for a temporary buffer to do the substitution\n\t     * into.  It will contain:\n\t     * - The text up to where the match is.\n\t     * - The substituted text.\n\t     * - The text after the match.\n\t     */\n\t    sublen = vim_regsub(&regmatch, sub, expr, tail, 0, REGSUB_MAGIC);\n\t    if (sublen <= 0)\n\t    {\n\t\tga_clear(&ga);\n\t\tbreak;\n\t    }\n\t    if (ga_grow(&ga, (int)((end - tail) + sublen -\n\t\t\t    (regmatch.endp[0] - regmatch.startp[0]))) == FAIL)\n\t    {\n\t\tga_clear(&ga);\n\t\tbreak;\n\t    }\n\n\t    // copy the text up to where the match is\n\t    i = (int)(regmatch.startp[0] - tail);\n\t    mch_memmove((char_u *)ga.ga_data + ga.ga_len, tail, (size_t)i);\n\t    // add the substituted text\n\t    (void)vim_regsub(&regmatch, sub, expr,\n\t\t\t\t  (char_u *)ga.ga_data + ga.ga_len + i, sublen,\n\t\t\t\t  REGSUB_COPY | REGSUB_MAGIC);\n\t    ga.ga_len += i + sublen - 1;\n\t    tail = regmatch.endp[0];\n\t    if (*tail == NUL)\n\t\tbreak;\n\t    if (!do_all)\n\t\tbreak;\n\t}\n\n\tif (ga.ga_data != NULL)\n\t    STRCPY((char *)ga.ga_data + ga.ga_len, tail);\n\n\tvim_regfree(regmatch.regprog);\n    }\n\n    ret = vim_strsave(ga.ga_data == NULL ? str : (char_u *)ga.ga_data);\n    ga_clear(&ga);\n    if (p_cpo == empty_option)\n\tp_cpo = save_cpo;\n    else\n    {\n\t// Darn, evaluating {sub} expression or {expr} changed the value.\n\t// If it's still empty it was changed and restored, need to restore in\n\t// the complicated way.\n\tif (*p_cpo == NUL)\n\t    set_option_value_give_err((char_u *)\"cpo\", 0L, save_cpo, 0);\n\tfree_string_option(save_cpo);\n    }\n\n    return ret;\n}\n", "\" Tests for the substitute (:s) command\n\nsource shared.vim\nsource check.vim\nsource screendump.vim\n\nfunc Test_multiline_subst()\n  enew!\n  call append(0, [\"1 aa\",\n\t      \\ \"bb\",\n\t      \\ \"cc\",\n\t      \\ \"2 dd\",\n\t      \\ \"ee\",\n\t      \\ \"3 ef\",\n\t      \\ \"gh\",\n\t      \\ \"4 ij\",\n\t      \\ \"5 a8\",\n\t      \\ \"8b c9\",\n\t      \\ \"9d\",\n\t      \\ \"6 e7\",\n\t      \\ \"77f\",\n\t      \\ \"xxxxx\"])\n\n  1\n  \" test if replacing a line break works with a back reference\n  /^1/,/^2/s/\\n\\(.\\)/ \\1/\n  \" test if inserting a line break works with a back reference\n  /^3/,/^4/s/\\(.\\)$/\\r\\1/\n  \" test if replacing a line break with another line break works\n  /^5/,/^6/s/\\(\\_d\\{3}\\)/x\\1x/\n  call assert_equal('1 aa bb cc 2 dd ee', getline(1))\n  call assert_equal('3 e', getline(2))\n  call assert_equal('f', getline(3))\n  call assert_equal('g', getline(4))\n  call assert_equal('h', getline(5))\n  call assert_equal('4 i', getline(6))\n  call assert_equal('j', getline(7))\n  call assert_equal('5 ax8', getline(8))\n  call assert_equal('8xb cx9', getline(9))\n  call assert_equal('9xd', getline(10))\n  call assert_equal('6 ex7', getline(11))\n  call assert_equal('7x7f', getline(12))\n  call assert_equal('xxxxx', getline(13))\n  enew!\nendfunc\n\nfunc Test_substitute_variants()\n  \" Validate that all the 2-/3-letter variants which embed the flags into the\n  \" command name actually work.\n  enew!\n  let ln = 'Testing string'\n  let variants = [\n\t\\ { 'cmd': ':s/Test/test/c', 'exp': 'testing string', 'prompt': 'y' },\n\t\\ { 'cmd': ':s/foo/bar/ce', 'exp': ln },\n\t\\ { 'cmd': ':s/t/r/cg', 'exp': 'Tesring srring', 'prompt': 'a' },\n\t\\ { 'cmd': ':s/t/r/ci', 'exp': 'resting string', 'prompt': 'y' },\n\t\\ { 'cmd': ':s/t/r/cI', 'exp': 'Tesring string', 'prompt': 'y' },\n\t\\ { 'cmd': ':s/t/r/c', 'exp': 'Testing string', 'prompt': 'n' },\n\t\\ { 'cmd': ':s/t/r/cn', 'exp': ln },\n\t\\ { 'cmd': ':s/t/r/cp', 'exp': 'Tesring string', 'prompt': 'y' },\n\t\\ { 'cmd': ':s/t/r/cl', 'exp': 'Tesring string', 'prompt': 'y' },\n\t\\ { 'cmd': ':s/t/r/gc', 'exp': 'Tesring srring', 'prompt': 'a' },\n\t\\ { 'cmd': ':s/i/I/gc', 'exp': 'TestIng string', 'prompt': 'l' },\n\t\\ { 'cmd': ':s/foo/bar/ge', 'exp': ln },\n\t\\ { 'cmd': ':s/t/r/g', 'exp': 'Tesring srring' },\n\t\\ { 'cmd': ':s/t/r/gi', 'exp': 'resring srring' },\n\t\\ { 'cmd': ':s/t/r/gI', 'exp': 'Tesring srring' },\n\t\\ { 'cmd': ':s/t/r/gn', 'exp': ln },\n\t\\ { 'cmd': ':s/t/r/gp', 'exp': 'Tesring srring' },\n\t\\ { 'cmd': ':s/t/r/gl', 'exp': 'Tesring srring' },\n\t\\ { 'cmd': ':s//r/gr', 'exp': 'Testr strr' },\n\t\\ { 'cmd': ':s/t/r/ic', 'exp': 'resting string', 'prompt': 'y' },\n\t\\ { 'cmd': ':s/foo/bar/ie', 'exp': ln },\n\t\\ { 'cmd': ':s/t/r/i', 'exp': 'resting string' },\n\t\\ { 'cmd': ':s/t/r/iI', 'exp': 'Tesring string' },\n\t\\ { 'cmd': ':s/t/r/in', 'exp': ln },\n\t\\ { 'cmd': ':s/t/r/ip', 'exp': 'resting string' },\n\t\\ { 'cmd': ':s//r/ir', 'exp': 'Testr string' },\n\t\\ { 'cmd': ':s/t/r/Ic', 'exp': 'Tesring string', 'prompt': 'y' },\n\t\\ { 'cmd': ':s/foo/bar/Ie', 'exp': ln },\n\t\\ { 'cmd': ':s/t/r/Ig', 'exp': 'Tesring srring' },\n\t\\ { 'cmd': ':s/t/r/Ii', 'exp': 'resting string' },\n\t\\ { 'cmd': ':s/t/r/I', 'exp': 'Tesring string' },\n\t\\ { 'cmd': ':s/t/r/Ip', 'exp': 'Tesring string' },\n\t\\ { 'cmd': ':s/t/r/Il', 'exp': 'Tesring string' },\n\t\\ { 'cmd': ':s//r/Ir', 'exp': 'Testr string' },\n\t\\ { 'cmd': ':s//r/rc', 'exp': 'Testr string', 'prompt': 'y' },\n\t\\ { 'cmd': ':s//r/rg', 'exp': 'Testr strr' },\n\t\\ { 'cmd': ':s//r/ri', 'exp': 'Testr string' },\n\t\\ { 'cmd': ':s//r/rI', 'exp': 'Testr string' },\n\t\\ { 'cmd': ':s//r/rn', 'exp': 'Testing string' },\n\t\\ { 'cmd': ':s//r/rp', 'exp': 'Testr string' },\n\t\\ { 'cmd': ':s//r/rl', 'exp': 'Testr string' },\n\t\\ { 'cmd': ':s//r/r', 'exp': 'Testr string' },\n\t\\ { 'cmd': ':s/i/I/gc', 'exp': 'Testing string', 'prompt': 'q' },\n\t\\]\n\n  for var in variants\n    for run in [1, 2]\n      let cmd = var.cmd\n      if run == 2 && cmd =~ \"/.*/.*/.\"\n\t\" Change  :s/from/to/{flags}  to  :s{flags}\n\tlet cmd = substitute(cmd, '/.*/', '', '')\n      endif\n      call setline(1, [ln])\n      let msg = printf('using \"%s\"', cmd)\n      let @/='ing'\n      let v:errmsg = ''\n      call feedkeys(cmd . \"\\<CR>\" . get(var, 'prompt', ''), 'ntx')\n      \" No error should exist (matters for testing e flag)\n      call assert_equal('', v:errmsg, msg)\n      call assert_equal(var.exp, getline('.'), msg)\n    endfor\n  endfor\nendfunc\n\n\" Test the l, p, # flags.\nfunc Test_substitute_flags_lp()\n  new\n  call setline(1, \"abc\\tdef\\<C-h>ghi\")\n\n  let a = execute('s/a/a/p')\n  call assert_equal(\"\\nabc     def^Hghi\", a)\n\n  let a = execute('s/a/a/l')\n  call assert_equal(\"\\nabc^Idef^Hghi$\", a)\n\n  let a = execute('s/a/a/#')\n  call assert_equal(\"\\n  1 abc     def^Hghi\", a)\n\n  let a = execute('s/a/a/p#')\n  call assert_equal(\"\\n  1 abc     def^Hghi\", a)\n\n  let a = execute('s/a/a/l#')\n  call assert_equal(\"\\n  1 abc^Idef^Hghi$\", a)\n\n  let a = execute('s/a/a/')\n  call assert_equal(\"\", a)\n\n  bwipe!\nendfunc\n\nfunc Test_substitute_repeat()\n  \" This caused an invalid memory access.\n  split Xsubfile\n  s/^/x\n  call feedkeys(\"Qsc\\<CR>y\", 'tx')\n  bwipe!\nendfunc\n\n\" Test %s/\\n// which is implemented as a special case to use a\n\" more efficient join rather than doing a regular substitution.\nfunc Test_substitute_join()\n  new\n\n  call setline(1, [\"foo\\tbar\", \"bar\\<C-H>foo\"])\n  let a = execute('%s/\\n//')\n  call assert_equal(\"\", a)\n  call assert_equal([\"foo\\tbarbar\\<C-H>foo\"], getline(1, '$'))\n  call assert_equal('\\n', histget(\"search\", -1))\n\n  call setline(1, [\"foo\\tbar\", \"bar\\<C-H>foo\"])\n  let a = execute('%s/\\n//g')\n  call assert_equal(\"\", a)\n  call assert_equal([\"foo\\tbarbar\\<C-H>foo\"], getline(1, '$'))\n  call assert_equal('\\n', histget(\"search\", -1))\n\n  call setline(1, [\"foo\\tbar\", \"bar\\<C-H>foo\"])\n  let a = execute('%s/\\n//p')\n  call assert_equal(\"\\nfoo     barbar^Hfoo\", a)\n  call assert_equal([\"foo\\tbarbar\\<C-H>foo\"], getline(1, '$'))\n  call assert_equal('\\n', histget(\"search\", -1))\n\n  call setline(1, [\"foo\\tbar\", \"bar\\<C-H>foo\"])\n  let a = execute('%s/\\n//l')\n  call assert_equal(\"\\nfoo^Ibarbar^Hfoo$\", a)\n  call assert_equal([\"foo\\tbarbar\\<C-H>foo\"], getline(1, '$'))\n  call assert_equal('\\n', histget(\"search\", -1))\n\n  call setline(1, [\"foo\\tbar\", \"bar\\<C-H>foo\"])\n  let a = execute('%s/\\n//#')\n  call assert_equal(\"\\n  1 foo     barbar^Hfoo\", a)\n  call assert_equal([\"foo\\tbarbar\\<C-H>foo\"], getline(1, '$'))\n  call assert_equal('\\n', histget(\"search\", -1))\n\n  call setline(1, ['foo', 'bar', 'baz', 'qux'])\n  call execute('1,2s/\\n//')\n  call assert_equal(['foobarbaz', 'qux'], getline(1, '$'))\n\n  bwipe!\nendfunc\n\nfunc Test_substitute_count()\n  new\n  call setline(1, ['foo foo', 'foo foo', 'foo foo', 'foo foo', 'foo foo'])\n  2\n\n  s/foo/bar/3\n  call assert_equal(['foo foo', 'bar foo', 'bar foo', 'bar foo', 'foo foo'],\n  \\                 getline(1, '$'))\n\n  call assert_fails('s/foo/bar/0', 'E939:')\n\n  call setline(1, ['foo foo', 'foo foo', 'foo foo', 'foo foo', 'foo foo'])\n  2,4s/foo/bar/ 10\n  call assert_equal(['foo foo', 'foo foo', 'foo foo', 'bar foo', 'bar foo'],\n        \\           getline(1, '$'))\n\n  bwipe!\nendfunc\n\n\" Test substitute 'n' flag (report number of matches, do not substitute).\nfunc Test_substitute_flag_n()\n  new\n  let lines = ['foo foo', 'foo foo', 'foo foo', 'foo foo', 'foo foo']\n  call setline(1, lines)\n\n  call assert_equal(\"\\n3 matches on 3 lines\", execute('2,4s/foo/bar/n'))\n  call assert_equal(\"\\n6 matches on 3 lines\", execute('2,4s/foo/bar/gn'))\n\n  \" c flag (confirm) should be ignored when using n flag.\n  call assert_equal(\"\\n3 matches on 3 lines\", execute('2,4s/foo/bar/nc'))\n\n  \" No substitution should have been done.\n  call assert_equal(lines, getline(1, '$'))\n\n  %delete _\n  call setline(1, ['A', 'Bar', 'Baz'])\n  call assert_equal(\"\\n1 match on 1 line\", execute('s/\\nB\\@=//gn'))\n\n  bwipe!\nendfunc\n\nfunc Test_substitute_errors()\n  new\n  call setline(1, 'foobar')\n\n  call assert_fails('s/FOO/bar/', 'E486:')\n  call assert_fails('s/foo/bar/@', 'E488:')\n  call assert_fails('s/\\(/bar/', 'E54:')\n  call assert_fails('s afooabara', 'E146:')\n  call assert_fails('s\\\\a', 'E10:')\n\n  setl nomodifiable\n  call assert_fails('s/foo/bar/', 'E21:')\n\n  call assert_fails(\"let s=substitute([], 'a', 'A', 'g')\", 'E730:')\n  call assert_fails(\"let s=substitute('abcda', [], 'A', 'g')\", 'E730:')\n  call assert_fails(\"let s=substitute('abcda', 'a', [], 'g')\", 'E730:')\n  call assert_fails(\"let s=substitute('abcda', 'a', 'A', [])\", 'E730:')\n  call assert_fails(\"let s=substitute('abc', '\\\\%(', 'A', 'g')\", 'E53:')\n\n  bwipe!\nendfunc\n\n\" Test for *sub-replace-special* and *sub-replace-expression* on substitute().\nfunc Test_sub_replace_1()\n  \" Run the tests with 'magic' on\n  set magic\n  set cpo&\n  call assert_equal('AA', substitute('A', 'A', '&&', ''))\n  call assert_equal('&', substitute('B', 'B', '\\&', ''))\n  call assert_equal('C123456789987654321', substitute('C123456789', 'C\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)', '\\0\\9\\8\\7\\6\\5\\4\\3\\2\\1', ''))\n  call assert_equal('d', substitute('D', 'D', 'd', ''))\n  call assert_equal('~', substitute('E', 'E', '~', ''))\n  call assert_equal('~', substitute('F', 'F', '\\~', ''))\n  call assert_equal('Gg', substitute('G', 'G', '\\ugg', ''))\n  call assert_equal('Hh', substitute('H', 'H', '\\Uh\\Eh', ''))\n  call assert_equal('iI', substitute('I', 'I', '\\lII', ''))\n  call assert_equal('jJ', substitute('J', 'J', '\\LJ\\EJ', ''))\n  call assert_equal('Kk', substitute('K', 'K', '\\Uk\\ek', ''))\n  call assert_equal(\"l\\<C-V>\\<C-M>l\",\n\t\t\t\\ substitute('lLl', 'L', \"\\<C-V>\\<C-M>\", ''))\n  call assert_equal(\"m\\<C-M>m\", substitute('mMm', 'M', '\\r', ''))\n  call assert_equal(\"n\\<C-V>\\<C-M>n\",\n\t\t\t\\ substitute('nNn', 'N', \"\\\\\\<C-V>\\<C-M>\", ''))\n  call assert_equal(\"o\\no\", substitute('oOo', 'O', '\\n', ''))\n  call assert_equal(\"p\\<C-H>p\", substitute('pPp', 'P', '\\b', ''))\n  call assert_equal(\"q\\tq\", substitute('qQq', 'Q', '\\t', ''))\n  call assert_equal('r\\r', substitute('rRr', 'R', '\\\\', ''))\n  call assert_equal('scs', substitute('sSs', 'S', '\\c', ''))\n  call assert_equal(\"u\\nu\", substitute('uUu', 'U', \"\\n\", ''))\n  call assert_equal(\"v\\<C-H>v\", substitute('vVv', 'V', \"\\b\", ''))\n  call assert_equal(\"w\\\\w\", substitute('wWw', 'W', \"\\\\\", ''))\n  call assert_equal(\"x\\<C-M>x\", substitute('xXx', 'X', \"\\r\", ''))\n  call assert_equal(\"YyyY\", substitute('Y', 'Y', '\\L\\uyYy\\l\\EY', ''))\n  call assert_equal(\"zZZz\", substitute('Z', 'Z', '\\U\\lZzZ\\u\\Ez', ''))\n  \" \\v or \\V after $\n  call assert_equal('abxx', substitute('abcd', 'xy$\\v|cd$', 'xx', ''))\n  call assert_equal('abxx', substitute('abcd', 'xy$\\V\\|cd\\$', 'xx', ''))\nendfunc\n\nfunc Test_sub_replace_2()\n  \" Run the tests with 'magic' off\n  set nomagic\n  set cpo&\n  call assert_equal('AA', substitute('A', 'A', '&&', ''))\n  call assert_equal('&', substitute('B', 'B', '\\&', ''))\n  call assert_equal('C123456789987654321', substitute('C123456789', 'C\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)', '\\0\\9\\8\\7\\6\\5\\4\\3\\2\\1', ''))\n  call assert_equal('d', substitute('D', 'D', 'd', ''))\n  call assert_equal('~', substitute('E', 'E', '~', ''))\n  call assert_equal('~', substitute('F', 'F', '\\~', ''))\n  call assert_equal('Gg', substitute('G', 'G', '\\ugg', ''))\n  call assert_equal('Hh', substitute('H', 'H', '\\Uh\\Eh', ''))\n  call assert_equal('iI', substitute('I', 'I', '\\lII', ''))\n  call assert_equal('jJ', substitute('J', 'J', '\\LJ\\EJ', ''))\n  call assert_equal('Kk', substitute('K', 'K', '\\Uk\\ek', ''))\n  call assert_equal(\"l\\<C-V>\\<C-M>l\",\n\t\t\t\\ substitute('lLl', 'L', \"\\<C-V>\\<C-M>\", ''))\n  call assert_equal(\"m\\<C-M>m\", substitute('mMm', 'M', '\\r', ''))\n  call assert_equal(\"n\\<C-V>\\<C-M>n\",\n\t\t\t\\ substitute('nNn', 'N', \"\\\\\\<C-V>\\<C-M>\", ''))\n  call assert_equal(\"o\\no\", substitute('oOo', 'O', '\\n', ''))\n  call assert_equal(\"p\\<C-H>p\", substitute('pPp', 'P', '\\b', ''))\n  call assert_equal(\"q\\tq\", substitute('qQq', 'Q', '\\t', ''))\n  call assert_equal('r\\r', substitute('rRr', 'R', '\\\\', ''))\n  call assert_equal('scs', substitute('sSs', 'S', '\\c', ''))\n  call assert_equal(\"t\\<C-M>t\", substitute('tTt', 'T', \"\\r\", ''))\n  call assert_equal(\"u\\nu\", substitute('uUu', 'U', \"\\n\", ''))\n  call assert_equal(\"v\\<C-H>v\", substitute('vVv', 'V', \"\\b\", ''))\n  call assert_equal('w\\w', substitute('wWw', 'W', \"\\\\\", ''))\n  call assert_equal('XxxX', substitute('X', 'X', '\\L\\uxXx\\l\\EX', ''))\n  call assert_equal('yYYy', substitute('Y', 'Y', '\\U\\lYyY\\u\\Ey', ''))\nendfunc\n\nfunc Test_sub_replace_3()\n  set magic&\n  set cpo&\n  call assert_equal('a\\a', substitute('aAa', 'A', '\\=\"\\\\\"', ''))\n  call assert_equal('b\\\\b', substitute('bBb', 'B', '\\=\"\\\\\\\\\"', ''))\n  call assert_equal(\"c\\rc\", substitute('cCc', 'C', \"\\\\=\\\"\\r\\\"\", ''))\n  call assert_equal(\"d\\\\\\rd\", substitute('dDd', 'D', \"\\\\=\\\"\\\\\\\\\\r\\\"\", ''))\n  call assert_equal(\"e\\\\\\\\\\re\", substitute('eEe', 'E', \"\\\\=\\\"\\\\\\\\\\\\\\\\\\r\\\"\", ''))\n  call assert_equal('f\\rf', substitute('fFf', 'F', '\\=\"\\\\r\"', ''))\n  call assert_equal('j\\nj', substitute('jJj', 'J', '\\=\"\\\\n\"', ''))\n  call assert_equal(\"k\\<C-M>k\", substitute('kKk', 'K', '\\=\"\\r\"', ''))\n  call assert_equal(\"l\\nl\", substitute('lLl', 'L', '\\=\"\\n\"', ''))\nendfunc\n\n\" Test for submatch() on substitute().\nfunc Test_sub_replace_4()\n  set magic&\n  set cpo&\n  call assert_equal('a\\a', substitute('aAa', 'A',\n\t\t\\ '\\=substitute(submatch(0), \".\", \"\\\\\", \"\")', ''))\n  call assert_equal('b\\b', substitute('bBb', 'B',\n\t\t\\ '\\=substitute(submatch(0), \".\", \"\\\\\\\\\", \"\")', ''))\n  call assert_equal(\"c\\<C-V>\\<C-M>c\", substitute('cCc', 'C', '\\=substitute(submatch(0), \".\", \"\\<C-V>\\<C-M>\", \"\")', ''))\n  call assert_equal(\"d\\<C-V>\\<C-M>d\", substitute('dDd', 'D', '\\=substitute(submatch(0), \".\", \"\\\\\\<C-V>\\<C-M>\", \"\")', ''))\n  call assert_equal(\"e\\\\\\<C-V>\\<C-M>e\", substitute('eEe', 'E', '\\=substitute(submatch(0), \".\", \"\\\\\\\\\\<C-V>\\<C-M>\", \"\")', ''))\n  call assert_equal(\"f\\<C-M>f\", substitute('fFf', 'F', '\\=substitute(submatch(0), \".\", \"\\\\r\", \"\")', ''))\n  call assert_equal(\"j\\nj\", substitute('jJj', 'J', '\\=substitute(submatch(0), \".\", \"\\\\n\", \"\")', ''))\n  call assert_equal(\"k\\rk\", substitute('kKk', 'K', '\\=substitute(submatch(0), \".\", \"\\r\", \"\")', ''))\n  call assert_equal(\"l\\nl\", substitute('lLl', 'L', '\\=substitute(submatch(0), \".\", \"\\n\", \"\")', ''))\nendfunc\n\nfunc Test_sub_replace_5()\n  set magic&\n  set cpo&\n  call assert_equal('A123456789987654321', substitute('A123456789',\n\t\t\\ 'A\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)',\n\t\t\\ '\\=submatch(0) . submatch(9) . submatch(8) . ' .\n\t\t\\ 'submatch(7) . submatch(6) . submatch(5) . ' .\n\t\t\\ 'submatch(4) . submatch(3) . submatch(2) . submatch(1)',\n\t\t\\ ''))\n   call assert_equal(\"[['A123456789'], ['9'], ['8'], ['7'], ['6'], \" .\n\t\t\\ \"['5'], ['4'], ['3'], ['2'], ['1']]\",\n\t\t\\ substitute('A123456789',\n\t\t\\ 'A\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)',\n\t\t\\ '\\=string([submatch(0, 1), submatch(9, 1), ' .\n\t\t\\ 'submatch(8, 1), 7->submatch(1), submatch(6, 1), ' .\n\t\t\\ 'submatch(5, 1), submatch(4, 1), submatch(3, 1), ' .\n\t\t\\ 'submatch(2, 1), submatch(1, 1)])',\n\t\t\\ ''))\nendfunc\n\nfunc Test_sub_replace_6()\n  set magic&\n  set cpo+=/\n  call assert_equal('a', substitute('A', 'A', 'a', ''))\n  call assert_equal('%', substitute('B', 'B', '%', ''))\n  set cpo-=/\n  call assert_equal('c', substitute('C', 'C', 'c', ''))\n  call assert_equal('%', substitute('D', 'D', '%', ''))\nendfunc\n\nfunc Test_sub_replace_7()\n  set magic&\n  set cpo&\n  call assert_equal('A\u0016A', substitute('A\u0016A', 'A.', '\\=submatch(0)', ''))\n  call assert_equal(\"B\\nB\", substitute(\"B\\nB\", 'B.', '\\=submatch(0)', ''))\n  call assert_equal(\"['B\\n']B\", substitute(\"B\\nB\", 'B.', '\\=string(submatch(0, 1))', ''))\n  call assert_equal('-abab', substitute('-bb', '\\zeb', 'a', 'g'))\n  call assert_equal('c-cbcbc', substitute('-bb', '\\ze', 'c', 'g'))\nendfunc\n\n\" Test for *:s%* on :substitute.\nfunc Test_sub_replace_8()\n  new\n  set magic&\n  set cpo&\n  $put =',,X'\n  s/\\(^\\|,\\)\\ze\\(,\\|X\\)/\\1N/g\n  call assert_equal('N,,NX', getline(\"$\"))\n  $put =',,Y'\n  let cmd = ':s/\\(^\\|,\\)\\ze\\(,\\|Y\\)/\\1N/gc'\n  call feedkeys(cmd . \"\\<CR>a\", \"xt\")\n  call assert_equal('N,,NY', getline(\"$\"))\n  :$put =',,Z'\n  let cmd = ':s/\\(^\\|,\\)\\ze\\(,\\|Z\\)/\\1N/gc'\n  call feedkeys(cmd . \"\\<CR>yy\", \"xt\")\n  call assert_equal('N,,NZ', getline(\"$\"))\n  enew! | close\nendfunc\n\nfunc Test_sub_replace_9()\n  new\n  set magic&\n  set cpo&\n  $put ='xxx'\n  call feedkeys(\":s/x/X/gc\\<CR>yyq\", \"xt\")\n  call assert_equal('XXx', getline(\"$\"))\n  enew! | close\nendfunc\n\nfunc Test_sub_replace_10()\n   set magic&\n   set cpo&\n   call assert_equal('a1a2a3a', substitute('123', '\\zs', 'a', 'g'))\n   call assert_equal('aaa', substitute('123', '\\zs.', 'a', 'g'))\n   call assert_equal('1a2a3a', substitute('123', '.\\zs', 'a', 'g'))\n   call assert_equal('a1a2a3a', substitute('123', '\\ze', 'a', 'g'))\n   call assert_equal('a1a2a3', substitute('123', '\\ze.', 'a', 'g'))\n   call assert_equal('aaa', substitute('123', '.\\ze', 'a', 'g'))\n   call assert_equal('aa2a3a', substitute('123', '1\\|\\ze', 'a', 'g'))\n   call assert_equal('1aaa', substitute('123', '1\\zs\\|[23]', 'a', 'g'))\nendfunc\n\nfunc SubReplacer(text, submatches)\n  return a:text .. a:submatches[0] .. a:text\nendfunc\nfunc SubReplacerVar(text, ...)\n  return a:text .. a:1[0] .. a:text\nendfunc\ndef SubReplacerVar9(text: string, ...args: list<list<string>>): string\n  return text .. args[0][0] .. text\nenddef\nfunc SubReplacer20(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, submatches)\n  return a:t3 .. a:submatches[0] .. a:t11\nendfunc\n\nfunc Test_substitute_partial()\n  call assert_equal('1foo2foo3', substitute('123', '2', function('SubReplacer', ['foo']), 'g'))\n  call assert_equal('1foo2foo3', substitute('123', '2', function('SubReplacerVar', ['foo']), 'g'))\n  call assert_equal('1foo2foo3', substitute('123', '2', function('SubReplacerVar9', ['foo']), 'g'))\n\n  \" 19 arguments plus one is just OK\n  let Replacer = function('SubReplacer20', repeat(['foo'], 19))\n  call assert_equal('1foo2foo3', substitute('123', '2', Replacer, 'g'))\n\n  \" 20 arguments plus one is too many\n  let Replacer = function('SubReplacer20', repeat(['foo'], 20))\n  call assert_fails(\"call substitute('123', '2', Replacer, 'g')\", 'E118:')\nendfunc\n\nfunc Test_substitute_float()\n  call assert_equal('number 1.23', substitute('number ', '$', { -> 1.23 }, ''))\n  vim9 assert_equal('number 1.23', substitute('number ', '$', () => 1.23, ''))\nendfunc\n\n\" Tests for *sub-replace-special* and *sub-replace-expression* on :substitute.\n\n\" Execute a list of :substitute command tests\nfunc Run_SubCmd_Tests(tests)\n  enew!\n  for t in a:tests\n    let start = line('.') + 1\n    let end = start + len(t[2]) - 1\n    exe \"normal o\" . t[0]\n    call cursor(start, 1)\n    exe t[1]\n    call assert_equal(t[2], getline(start, end), t[1])\n  endfor\n  enew!\nendfunc\n\nfunc Test_sub_cmd_1()\n  set magic\n  set cpo&\n\n  \" List entry format: [input, cmd, output]\n  let tests = [['A', 's/A/&&/', ['AA']],\n\t      \\ ['B', 's/B/\\&/', ['&']],\n\t      \\ ['C123456789', 's/C\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)/\\0\\9\\8\\7\\6\\5\\4\\3\\2\\1/', ['C123456789987654321']],\n\t      \\ ['D', 's/D/d/', ['d']],\n\t      \\ ['E', 's/E/~/', ['d']],\n\t      \\ ['F', 's/F/\\~/', ['~']],\n\t      \\ ['G', 's/G/\\ugg/', ['Gg']],\n\t      \\ ['H', 's/H/\\Uh\\Eh/', ['Hh']],\n\t      \\ ['I', 's/I/\\lII/', ['iI']],\n\t      \\ ['J', 's/J/\\LJ\\EJ/', ['jJ']],\n\t      \\ ['K', 's/K/\\Uk\\ek/', ['Kk']],\n\t      \\ ['lLl', \"s/L/\\<C-V>\\<C-M>/\", [\"l\\<C-V>\", 'l']],\n\t      \\ ['mMm', 's/M/\\r/', ['m', 'm']],\n\t      \\ ['nNn', \"s/N/\\\\\\<C-V>\\<C-M>/\", [\"n\\<C-V>\", 'n']],\n\t      \\ ['oOo', 's/O/\\n/', [\"o\\no\"]],\n\t      \\ ['pPp', 's/P/\\b/', [\"p\\<C-H>p\"]],\n\t      \\ ['qQq', 's/Q/\\t/', [\"q\\tq\"]],\n\t      \\ ['rRr', 's/R/\\\\/', ['r\\r']],\n\t      \\ ['sSs', 's/S/\\c/', ['scs']],\n\t      \\ ['tTt', \"s/T/\\<C-V>\\<C-J>/\", [\"t\\<C-V>\\<C-J>t\"]],\n\t      \\ ['U', 's/U/\\L\\uuUu\\l\\EU/', ['UuuU']],\n\t      \\ ['V', 's/V/\\U\\lVvV\\u\\Ev/', ['vVVv']],\n\t      \\ ['\\', 's/\\\\/\\\\\\\\/', ['\\\\']]\n\t      \\ ]\n  call Run_SubCmd_Tests(tests)\nendfunc\n\nfunc Test_sub_cmd_2()\n  set nomagic\n  set cpo&\n\n  \" List entry format: [input, cmd, output]\n  let tests = [['A', 's/A/&&/', ['&&']],\n\t      \\ ['B', 's/B/\\&/', ['B']],\n\t      \\ ['C123456789', 's/\\mC\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)/\\0\\9\\8\\7\\6\\5\\4\\3\\2\\1/', ['C123456789987654321']],\n\t      \\ ['D', 's/D/d/', ['d']],\n\t      \\ ['E', 's/E/~/', ['~']],\n\t      \\ ['F', 's/F/\\~/', ['~']],\n\t      \\ ['G', 's/G/\\ugg/', ['Gg']],\n\t      \\ ['H', 's/H/\\Uh\\Eh/', ['Hh']],\n\t      \\ ['I', 's/I/\\lII/', ['iI']],\n\t      \\ ['J', 's/J/\\LJ\\EJ/', ['jJ']],\n\t      \\ ['K', 's/K/\\Uk\\ek/', ['Kk']],\n\t      \\ ['lLl', \"s/L/\\<C-V>\\<C-M>/\", [\"l\\<C-V>\", 'l']],\n\t      \\ ['mMm', 's/M/\\r/', ['m', 'm']],\n\t      \\ ['nNn', \"s/N/\\\\\\<C-V>\\<C-M>/\", [\"n\\<C-V>\", 'n']],\n\t      \\ ['oOo', 's/O/\\n/', [\"o\\no\"]],\n\t      \\ ['pPp', 's/P/\\b/', [\"p\\<C-H>p\"]],\n\t      \\ ['qQq', 's/Q/\\t/', [\"q\\tq\"]],\n\t      \\ ['rRr', 's/R/\\\\/', ['r\\r']],\n\t      \\ ['sSs', 's/S/\\c/', ['scs']],\n\t      \\ ['tTt', \"s/T/\\<C-V>\\<C-J>/\", [\"t\\<C-V>\\<C-J>t\"]],\n\t      \\ ['U', 's/U/\\L\\uuUu\\l\\EU/', ['UuuU']],\n\t      \\ ['V', 's/V/\\U\\lVvV\\u\\Ev/', ['vVVv']],\n\t      \\ ['\\', 's/\\\\/\\\\\\\\/', ['\\\\']]\n\t      \\ ]\n  call Run_SubCmd_Tests(tests)\nendfunc\n\nfunc Test_sub_cmd_3()\n  set nomagic\n  set cpo&\n\n  \" List entry format: [input, cmd, output]\n  let tests = [['aAa', \"s/A/\\\\='\\\\'/\", ['a\\a']],\n\t      \\ ['bBb', \"s/B/\\\\='\\\\\\\\'/\", ['b\\\\b']],\n\t      \\ ['cCc', \"s/C/\\\\='\\<C-V>\\<C-M>'/\", [\"c\\<C-V>\", 'c']],\n\t      \\ ['dDd', \"s/D/\\\\='\\\\\\<C-V>\\<C-M>'/\", [\"d\\\\\\<C-V>\", 'd']],\n\t      \\ ['eEe', \"s/E/\\\\='\\\\\\\\\\<C-V>\\<C-M>'/\", [\"e\\\\\\\\\\<C-V>\", 'e']],\n\t      \\ ['fFf', \"s/F/\\\\='\\r'/\", ['f', 'f']],\n\t      \\ ['gGg', \"s/G/\\\\='\\<C-V>\\<C-J>'/\", [\"g\\<C-V>\", 'g']],\n\t      \\ ['hHh', \"s/H/\\\\='\\\\\\<C-V>\\<C-J>'/\", [\"h\\\\\\<C-V>\", 'h']],\n\t      \\ ['iIi', \"s/I/\\\\='\\\\\\\\\\<C-V>\\<C-J>'/\", [\"i\\\\\\\\\\<C-V>\", 'i']],\n\t      \\ ['jJj', \"s/J/\\\\='\\n'/\", ['j', 'j']],\n\t      \\ ['kKk', 's/K/\\=\"\\r\"/', ['k', 'k']],\n\t      \\ ['lLl', 's/L/\\=\"\\n\"/', ['l', 'l']]\n\t      \\ ]\n  call Run_SubCmd_Tests(tests)\nendfunc\n\n\" Test for submatch() on :substitute.\nfunc Test_sub_cmd_4()\n  set magic&\n  set cpo&\n\n  \" List entry format: [input, cmd, output]\n  let tests = [ ['aAa', \"s/A/\\\\=substitute(submatch(0), '.', '\\\\', '')/\",\n\t      \\\t\t\t\t['a\\a']],\n\t      \\ ['bBb', \"s/B/\\\\=substitute(submatch(0), '.', '\\\\', '')/\",\n\t      \\\t\t\t\t['b\\b']],\n\t      \\ ['cCc', \"s/C/\\\\=substitute(submatch(0), '.', '\\<C-V>\\<C-M>', '')/\",\n\t      \\\t\t\t\t[\"c\\<C-V>\", 'c']],\n\t      \\ ['dDd', \"s/D/\\\\=substitute(submatch(0), '.', '\\\\\\<C-V>\\<C-M>', '')/\",\n\t      \\\t\t\t\t[\"d\\<C-V>\", 'd']],\n\t      \\ ['eEe', \"s/E/\\\\=substitute(submatch(0), '.', '\\\\\\\\\\<C-V>\\<C-M>', '')/\",\n\t      \\\t\t\t\t[\"e\\\\\\<C-V>\", 'e']],\n\t      \\ ['fFf', \"s/F/\\\\=substitute(submatch(0), '.', '\\\\r', '')/\",\n\t      \\\t\t\t\t['f', 'f']],\n\t      \\ ['gGg', 's/G/\\=substitute(submatch(0), \".\", \"\\<C-V>\\<C-J>\", \"\")/',\n\t      \\\t\t\t\t[\"g\\<C-V>\", 'g']],\n\t      \\ ['hHh', 's/H/\\=substitute(submatch(0), \".\", \"\\\\\\<C-V>\\<C-J>\", \"\")/',\n\t      \\\t\t\t\t[\"h\\<C-V>\", 'h']],\n\t      \\ ['iIi', 's/I/\\=substitute(submatch(0), \".\", \"\\\\\\\\\\<C-V>\\<C-J>\", \"\")/',\n\t      \\\t\t\t\t[\"i\\\\\\<C-V>\", 'i']],\n\t      \\ ['jJj', \"s/J/\\\\=substitute(submatch(0), '.', '\\\\n', '')/\",\n\t      \\\t\t\t\t['j', 'j']],\n\t      \\ ['kKk', \"s/K/\\\\=substitute(submatch(0), '.', '\\\\r', '')/\",\n\t      \\\t\t\t\t['k', 'k']],\n\t      \\ ['lLl', \"s/L/\\\\=substitute(submatch(0), '.', '\\\\n', '')/\",\n\t      \\\t\t\t\t['l', 'l']],\n\t      \\ ]\n  call Run_SubCmd_Tests(tests)\nendfunc\n\nfunc Test_sub_cmd_5()\n  set magic&\n  set cpo&\n\n  \" List entry format: [input, cmd, output]\n  let tests = [ ['A123456789', 's/A\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)/\\=submatch(0) . submatch(9) . submatch(8) . submatch(7) . submatch(6) . submatch(5) . submatch(4) . submatch(3) . submatch(2) . submatch(1)/', ['A123456789987654321']],\n\t      \\ ['B123456789', 's/B\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)/\\=string([submatch(0, 1), submatch(9, 1), submatch(8, 1), submatch(7, 1), submatch(6, 1), submatch(5, 1), submatch(4, 1), submatch(3, 1), submatch(2, 1), submatch(1, 1)])/', [\"[['B123456789'], ['9'], ['8'], ['7'], ['6'], ['5'], ['4'], ['3'], ['2'], ['1']]\"]],\n\t      \\ ]\n  call Run_SubCmd_Tests(tests)\nendfunc\n\n\" Test for *:s%* on :substitute.\nfunc Test_sub_cmd_6()\n  set magic&\n  set cpo+=/\n\n  \" List entry format: [input, cmd, output]\n  let tests = [ ['A', 's/A/a/', ['a']],\n\t      \\ ['B', 's/B/%/', ['a']],\n\t      \\ ]\n  call Run_SubCmd_Tests(tests)\n\n  set cpo-=/\n  let tests = [ ['C', 's/C/c/', ['c']],\n\t      \\ ['D', 's/D/%/', ['%']],\n\t      \\ ]\n  call Run_SubCmd_Tests(tests)\n\n  set cpo&\nendfunc\n\n\" Test for :s replacing \\n with  line break.\nfunc Test_sub_cmd_7()\n  set magic&\n  set cpo&\n\n  \" List entry format: [input, cmd, output]\n  let tests = [ [\"A\\<C-V>\\<C-M>A\", 's/A./\\=submatch(0)/', ['A', 'A']],\n\t      \\ [\"B\\<C-V>\\<C-J>B\", 's/B./\\=submatch(0)/', ['B', 'B']],\n\t      \\ [\"C\\<C-V>\\<C-J>C\", 's/C./\\=strtrans(string(submatch(0, 1)))/', [strtrans(\"['C\\<C-J>']C\")]],\n\t      \\ [\"D\\<C-V>\\<C-J>\\nD\", 's/D.\\nD/\\=strtrans(string(submatch(0, 1)))/', [strtrans(\"['D\\<C-J>', 'D']\")]],\n\t      \\ [\"E\\<C-V>\\<C-J>\\n\\<C-V>\\<C-J>\\n\\<C-V>\\<C-J>\\n\\<C-V>\\<C-J>\\n\\<C-V>\\<C-J>E\", 's/E\\_.\\{-}E/\\=strtrans(string(submatch(0, 1)))/', [strtrans(\"['E\\<C-J>', '\\<C-J>', '\\<C-J>', '\\<C-J>', '\\<C-J>E']\")]],\n\t      \\ ]\n  call Run_SubCmd_Tests(tests)\n\n  exe \"normal oQ\\nQ\\<Esc>k\"\n  call assert_fails('s/Q[^\\n]Q/\\=submatch(0).\"foobar\"/', 'E486:')\n  enew!\nendfunc\n\nfunc TitleString()\n  let check = 'foo' =~ 'bar'\n  return \"\"\nendfunc\n\nfunc Test_sub_cmd_8()\n  set titlestring=%{TitleString()}\n\n  enew!\n  call append(0, ['', 'test_one', 'test_two'])\n  call cursor(1,1)\n  /^test_one/s/.*/\\=\"foo\\nbar\"/\n  call assert_equal('foo', getline(2))\n  call assert_equal('bar', getline(3))\n  call feedkeys(':/^test_two/s/.*/\\=\"foo\\nbar\"/c', \"t\")\n  call feedkeys(\"\\<CR>y\", \"xt\")\n  call assert_equal('foo', getline(4))\n  call assert_equal('bar', getline(5))\n\n  enew!\n  set titlestring&\nendfunc\n\nfunc Test_sub_cmd_9()\n  new\n  let input = ['1 aaa', '2 aaa', '3 aaa']\n  call setline(1, input)\n  func Foo()\n    return submatch(0)\n  endfunc\n  %s/aaa/\\=Foo()/gn\n  call assert_equal(input, getline(1, '$'))\n  call assert_equal(1, &modifiable)\n\n  delfunc Foo\n  bw!\nendfunc\n\nfunc Test_sub_highlight_zero_match()\n  CheckRunVimInTerminal\n\n  let lines =<< trim END\n    call setline(1, ['one', 'two', 'three'])\n  END\n  call writefile(lines, 'XscriptSubHighlight', 'D')\n  let buf = RunVimInTerminal('-S XscriptSubHighlight', #{rows: 8, cols: 60})\n  call term_sendkeys(buf, \":%s/^/   /c\\<CR>\")\n  call VerifyScreenDump(buf, 'Test_sub_highlight_zer_match_1', {})\n\n  call term_sendkeys(buf, \"\\<Esc>\")\n  call StopVimInTerminal(buf)\nendfunc\n\nfunc Test_nocatch_sub_failure_handling()\n  \" normal error results in all replacements \n  func Foo()\n    foobar\n  endfunc\n  new\n  call setline(1, ['1 aaa', '2 aaa', '3 aaa'])\n  \" need silent! to avoid a delay when entering Insert mode\n  silent! %s/aaa/\\=Foo()/g\n  call assert_equal(['1 0', '2 0', '3 0'], getline(1, 3))\n\n  \" Throw without try-catch causes abort after the first line.\n  \" We cannot test this, since it would stop executing the test script.\n\n  \" try/catch does not result in any changes\n  func! Foo()\n    throw 'error'\n  endfunc\n  call setline(1, ['1 aaa', '2 aaa', '3 aaa'])\n  let error_caught = 0\n  try\n    %s/aaa/\\=Foo()/g\n  catch\n    let error_caught = 1\n  endtry\n  call assert_equal(1, error_caught)\n  call assert_equal(['1 aaa', '2 aaa', '3 aaa'], getline(1, 3))\n\n  \" Same, but using \"n\" flag so that \"sandbox\" gets set\n  call setline(1, ['1 aaa', '2 aaa', '3 aaa'])\n  let error_caught = 0\n  try\n    %s/aaa/\\=Foo()/gn\n  catch\n    let error_caught = 1\n  endtry\n  call assert_equal(1, error_caught)\n  call assert_equal(['1 aaa', '2 aaa', '3 aaa'], getline(1, 3))\n\n  delfunc Foo\n  bwipe!\nendfunc\n\n\" Test \":s/pat/sub/\" with different ~s in sub.\nfunc Test_replace_with_tilde()\n  new\n  \" Set the last replace string to empty\n  s/^$//\n  call append(0, ['- Bug in \"vPPPP\" on this text:'])\n  normal gg\n  s/u/~u~/\n  call assert_equal('- Bug in \"vPPPP\" on this text:', getline(1))\n  s/i/~u~/\n  call assert_equal('- Bug uuun \"vPPPP\" on this text:', getline(1))\n  s/o/~~~/\n  call assert_equal('- Bug uuun \"vPPPP\" uuuuuuuuun this text:', getline(1))\n  close!\nendfunc\n\nfunc Test_replace_keeppatterns()\n  new\n  a\nfoobar\n\nsubstitute foo asdf\n\none two\n.\n\n  normal gg\n  /^substitute\n  s/foo/bar/\n  call assert_equal('foo', @/)\n  call assert_equal('substitute bar asdf', getline('.'))\n\n  /^substitute\n  keeppatterns s/asdf/xyz/\n  call assert_equal('^substitute', @/)\n  call assert_equal('substitute bar xyz', getline('.'))\n\n  exe \"normal /bar /e\\<CR>\"\n  call assert_equal(15, col('.'))\n  normal -\n  keeppatterns /xyz\n  call assert_equal('bar ', @/)\n  call assert_equal('substitute bar xyz', getline('.'))\n  exe \"normal 0dn\"\n  call assert_equal('xyz', getline('.'))\n\n  close!\nendfunc\n\nfunc Test_sub_beyond_end()\n  new\n  call setline(1, '#')\n  let @/ = '^#\\n\\zs'\n  s///e\n  call assert_equal('#', getline(1))\n  bwipe!\nendfunc\n\n\" Test for repeating last substitution using :~ and :&r\nfunc Test_repeat_last_sub()\n  new\n  call setline(1, ['blue green yellow orange white'])\n  s/blue/red/\n  let @/ = 'yellow'\n  ~\n  let @/ = 'white'\n  :&r\n  let @/ = 'green'\n  s//gray\n  call assert_equal('red gray red orange red', getline(1))\n  close!\nendfunc\n\n\" Test for Vi compatible substitution:\n\"     \\/{string}/, \\?{string}? and \\&{string}&\nfunc Test_sub_vi_compatibility()\n  new\n  call setline(1, ['blue green yellow orange blue'])\n  let @/ = 'orange'\n  s\\/white/\n  let @/ = 'blue'\n  s\\?amber?\n  let @/ = 'white'\n  s\\&green&\n  call assert_equal('amber green yellow white green', getline(1))\n  close!\n\n  call assert_fails('vim9cmd s\\/white/', 'E1270:')\n  call assert_fails('vim9cmd s\\?white?', 'E1270:')\n  call assert_fails('vim9cmd s\\&white&', 'E1270:')\nendfunc\n\n\" Test for substitute with the new text longer than the original text\nfunc Test_sub_expand_text()\n  new\n  call setline(1, 'abcabcabcabcabcabcabcabc')\n  s/b/\\=repeat('B', 10)/g\n  call assert_equal(repeat('aBBBBBBBBBBc', 8), getline(1))\n  close!\nendfunc\n\n\" Test for command failures when the last substitute pattern is not set.\nfunc Test_sub_with_no_last_pat()\n  let lines =<< trim [SCRIPT]\n    call assert_fails('~', 'E33:')\n    call assert_fails('s//abc/g', 'E35:')\n    call assert_fails('s\\/bar', 'E35:')\n    call assert_fails('s\\&bar&', 'E33:')\n    call writefile(v:errors, 'Xresult')\n    qall!\n  [SCRIPT]\n  call writefile(lines, 'Xscript', 'D')\n  if RunVim([], [], '--clean -S Xscript')\n    call assert_equal([], readfile('Xresult'))\n  endif\n\n  let lines =<< trim [SCRIPT]\n    set cpo+=/\n    call assert_fails('s/abc/%/', 'E33:')\n    call writefile(v:errors, 'Xresult')\n    qall!\n  [SCRIPT]\n  call writefile(lines, 'Xscript')\n  if RunVim([], [], '--clean -S Xscript')\n    call assert_equal([], readfile('Xresult'))\n  endif\n\n  call delete('Xresult')\nendfunc\n\nfunc Test_substitute()\n  call assert_equal('a\uff11a\uff12a\uff13a', substitute('\uff11\uff12\uff13', '\\zs', 'a', 'g'))\n  \" Substitute with special keys\n  call assert_equal(\"a\\<End>c\", substitute('abc', \"a.c\", \"a\\<End>c\", ''))\nendfunc\n\nfunc Test_substitute_expr()\n  let g:val = 'XXX'\n  call assert_equal('XXX', substitute('yyy', 'y*', '\\=g:val', ''))\n  call assert_equal('XXX', substitute('yyy', 'y*', {-> g:val}, ''))\n  call assert_equal(\"-\\u1b \\uf2-\", substitute(\"-%1b %f2-\", '%\\(\\x\\x\\)',\n\t\t\t   \\ '\\=nr2char(\"0x\" . submatch(1))', 'g'))\n  call assert_equal(\"-\\u1b \\uf2-\", substitute(\"-%1b %f2-\", '%\\(\\x\\x\\)',\n\t\t\t   \\ {-> nr2char(\"0x\" . submatch(1))}, 'g'))\n\n  call assert_equal('231', substitute('123', '\\(.\\)\\(.\\)\\(.\\)',\n\t\\ {-> submatch(2) . submatch(3) . submatch(1)}, ''))\n\n  func Recurse()\n    return substitute('yyy', 'y\\(.\\)y', {-> submatch(1)}, '')\n  endfunc\n  \" recursive call works\n  call assert_equal('-y-x-', substitute('xxx', 'x\\(.\\)x', {-> '-' . Recurse() . '-' . submatch(1) . '-'}, ''))\n\n  call assert_fails(\"let s=submatch([])\", 'E745:')\n  call assert_fails(\"let s=submatch(2, [])\", 'E745:')\nendfunc\n\nfunc Test_invalid_submatch()\n  \" This was causing invalid memory access in Vim-7.4.2232 and older\n  call assert_fails(\"call substitute('x', '.', {-> submatch(10)}, '')\", 'E935:')\n  call assert_fails('eval submatch(-1)', 'E935:')\n  call assert_equal('', submatch(0))\n  call assert_equal('', submatch(1))\n  call assert_equal([], submatch(0, 1))\n  call assert_equal([], submatch(1, 1))\nendfunc\n\nfunc Test_submatch_list_concatenate()\n  let pat = 'A\\(.\\)'\n  let Rep = {-> string([submatch(0, 1)] + [[submatch(1)]])}\n  call substitute('A1', pat, Rep, '')->assert_equal(\"[['A1'], ['1']]\")\nendfunc\n\nfunc Test_substitute_expr_arg()\n  call assert_equal('123456789-123456789=', substitute('123456789',\n\t\\ '\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)',\n\t\\ {m -> m[0] . '-' . m[1] . m[2] . m[3] . m[4] . m[5] . m[6] . m[7] . m[8] . m[9] . '='}, ''))\n\n  call assert_equal('123456-123456=789', substitute('123456789',\n\t\\ '\\(.\\)\\(.\\)\\(.\\)\\(a*\\)\\(n*\\)\\(.\\)\\(.\\)\\(.\\)\\(x*\\)',\n\t\\ {m -> m[0] . '-' . m[1] . m[2] . m[3] . m[4] . m[5] . m[6] . m[7] . m[8] . m[9] . '='}, ''))\n\n  call assert_equal('123456789-123456789x=', substitute('123456789',\n\t\\ '\\(.\\)\\(.\\)\\(.*\\)',\n\t\\ {m -> m[0] . '-' . m[1] . m[2] . m[3] . 'x' . m[4] . m[5] . m[6] . m[7] . m[8] . m[9] . '='}, ''))\n\n  call assert_fails(\"call substitute('xxx', '.', {m -> string(add(m, 'x'))}, '')\", 'E742:')\n  call assert_fails(\"call substitute('xxx', '.', {m -> string(insert(m, 'x'))}, '')\", 'E742:')\n  call assert_fails(\"call substitute('xxx', '.', {m -> string(extend(m, ['x']))}, '')\", 'E742:')\n  call assert_fails(\"call substitute('xxx', '.', {m -> string(remove(m, 1))}, '')\", 'E742:')\nendfunc\n\n\" Test for using a function to supply the substitute string\nfunc Test_substitute_using_func()\n  func Xfunc()\n    return '1234'\n  endfunc\n  call assert_equal('a1234f', substitute('abcdef', 'b..e',\n        \\ function(\"Xfunc\"), ''))\n  delfunc Xfunc\nendfunc\n\n\" Test for using submatch() with a multiline match\nfunc Test_substitute_multiline_submatch()\n  new\n  call setline(1, ['line1', 'line2', 'line3', 'line4'])\n  %s/^line1\\(\\_.\\+\\)line4$/\\=submatch(1)/\n  call assert_equal(['', 'line2', 'line3', ''], getline(1, '$'))\n  close!\nendfunc\n\nfunc Test_substitute_skipped_range()\n  new\n  if 0\n    /1/5/2/2/\\n\n  endif\n  call assert_equal([0, 1, 1, 0, 1], getcurpos())\n  bwipe!\nendfunc\n\n\" Test using the 'gdefault' option (when on, flag 'g' is default on).\nfunc Test_substitute_gdefault()\n  new\n\n  \" First check without 'gdefault'\n  call setline(1, 'foo bar foo')\n  s/foo/FOO/\n  call assert_equal('FOO bar foo', getline(1))\n  call setline(1, 'foo bar foo')\n  s/foo/FOO/g\n  call assert_equal('FOO bar FOO', getline(1))\n  call setline(1, 'foo bar foo')\n  s/foo/FOO/gg\n  call assert_equal('FOO bar foo', getline(1))\n\n  \" Then check with 'gdefault'\n  set gdefault\n  call setline(1, 'foo bar foo')\n  s/foo/FOO/\n  call assert_equal('FOO bar FOO', getline(1))\n  call setline(1, 'foo bar foo')\n  s/foo/FOO/g\n  call assert_equal('FOO bar foo', getline(1))\n  call setline(1, 'foo bar foo')\n  s/foo/FOO/gg\n  call assert_equal('FOO bar FOO', getline(1))\n\n  \" Setting 'compatible' should reset 'gdefault'\n  call assert_equal(1, &gdefault)\n  set compatible\n  call assert_equal(0, &gdefault)\n  set nocompatible\n  call assert_equal(0, &gdefault)\n\n  bw!\nendfunc\n\n\" This was using \"old_sub\" after it was freed.\nfunc Test_using_old_sub()\n  set compatible maxfuncdepth=10\n  new\n  call setline(1, 'some text.')\n  func Repl()\n    ~\n    s/\n  endfunc\n  silent! s/\\%')/\\=Repl()\n\n  delfunc Repl\n  bwipe!\n  set nocompatible\nendfunc\n\n\" This was switching windows in between computing the length and using it.\nfunc Test_sub_change_window()\n  silent! lfile\n  sil! norm o0000000000000000000000000000000000000000000000000000\n  func Repl()\n    lopen\n  endfunc\n  silent!  s/\\%')/\\=Repl()\n  bwipe!\n  bwipe!\n  delfunc Repl\nendfunc\n\n\" This was undoign a change in between computing the length and using it.\nfunc Do_Test_sub_undo_change()\n  new\n  norm o0000000000000000000000000000000000000000000000000000\n  silent! s/\\%')/\\=Repl()\n  bwipe!\nendfunc\n\nfunc Test_sub_undo_change()\n  func Repl()\n    silent! norm g-\n  endfunc\n  call Do_Test_sub_undo_change()\n\n  func! Repl()\n    silent earlier\n  endfunc\n  call Do_Test_sub_undo_change()\n\n  delfunc Repl\nendfunc\n\n\" This was opening a command line window from the expression\nfunc Test_sub_open_cmdline_win()\n  \" the error only happens in a very specific setup, run a new Vim instance to\n  \" get a clean starting point.\n  let lines =<< trim [SCRIPT]\n    set vb t_vb=\n    norm o0000000000000000000000000000000000000000000000000000\n    func Replace()\n      norm q/\n    endfunc\n    s/\\%')/\\=Replace()\n    redir >Xresult\n    messages\n    redir END\n    qall!\n  [SCRIPT]\n  call writefile(lines, 'Xscript', 'D')\n  if RunVim([], [], '-u NONE -S Xscript')\n    call assert_match('E565: Not allowed to change text or change window',\n          \\ readfile('Xresult')->join('XX'))\n  endif\n\n  call delete('Xresult')\nendfunc\n\n\" This was editing a script file from the expression\nfunc Test_sub_edit_scriptfile()\n  new\n  norm o0000000000000000000000000000000000000000000000000000\n  func EditScript()\n    silent! scr! Xsedfile\n  endfunc\n  s/\\%')/\\=EditScript()\n\n  delfunc EditScript\n  bwipe!\nendfunc\n\n\" This was editing another file from the expression.\nfunc Test_sub_expr_goto_other_file()\n  call writefile([''], 'Xfileone', 'D')\n  enew!\n  call setline(1, ['a', 'b', 'c', 'd',\n\t\\ 'Xfileone zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'])\n\n  func g:SplitGotoFile()\n    exe \"sil! norm 0\\<C-W>gf\"\n    return ''\n  endfunc\n\n  $\n  s/\\%')/\\=g:SplitGotoFile()\n\n  delfunc g:SplitGotoFile\n  bwipe!\nendfunc\n\nfunc Test_recursive_expr_substitute()\n  \" this was reading invalid memory\n  let lines =<< trim END\n      func Repl(g, n)\n        s\n        r%:s000\n      endfunc\n      next 0\n      let caught = 0\n      s/\\%')/\\=Repl(0, 0)\n      qall!\n  END\n  call writefile(lines, 'XexprSubst', 'D')\n  call RunVim([], [], '--clean -S XexprSubst')\nendfunc\n\n\" Test for the 2-letter and 3-letter :substitute commands\nfunc Test_substitute_short_cmd()\n  new\n  call setline(1, ['one', 'one one one'])\n  s/one/two\n  call cursor(2, 1)\n\n  \" :sc\n  call feedkeys(\":sc\\<CR>y\", 'xt')\n  call assert_equal('two one one', getline(2))\n\n  \" :scg\n  call setline(2, 'one one one')\n  call feedkeys(\":scg\\<CR>nyq\", 'xt')\n  call assert_equal('one two one', getline(2))\n\n  \" :sci\n  call setline(2, 'ONE One onE')\n  call feedkeys(\":sci\\<CR>y\", 'xt')\n  call assert_equal('two One onE', getline(2))\n\n  \" :scI\n  set ignorecase\n  call setline(2, 'ONE One one')\n  call feedkeys(\":scI\\<CR>y\", 'xt')\n  call assert_equal('ONE One two', getline(2))\n  set ignorecase&\n\n  \" :scn\n  call setline(2, 'one one one')\n  let t = execute('scn')->split(\"\\n\")\n  call assert_equal(['1 match on 1 line'], t)\n  call assert_equal('one one one', getline(2))\n\n  \" :scp\n  call setline(2, \"\\tone one one\")\n  redir => output\n  call feedkeys(\":scp\\<CR>y\", 'xt')\n  redir END\n  call assert_equal('        two one one', output->split(\"\\n\")[-1])\n  call assert_equal(\"\\ttwo one one\", getline(2))\n\n  \" :scl\n  call setline(2, \"\\tone one one\")\n  redir => output\n  call feedkeys(\":scl\\<CR>y\", 'xt')\n  redir END\n  call assert_equal(\"^Itwo one one$\", output->split(\"\\n\")[-1])\n  call assert_equal(\"\\ttwo one one\", getline(2))\n\n  \" :sgc\n  call setline(2, 'one one one one one')\n  call feedkeys(\":sgc\\<CR>nyyq\", 'xt')\n  call assert_equal('one two two one one', getline(2))\n\n  \" :sg\n  call setline(2, 'one one one')\n  sg\n  call assert_equal('two two two', getline(2))\n\n  \" :sgi\n  call setline(2, 'ONE One onE')\n  sgi\n  call assert_equal('two two two', getline(2))\n\n  \" :sgI\n  set ignorecase\n  call setline(2, 'ONE One one')\n  sgI\n  call assert_equal('ONE One two', getline(2))\n  set ignorecase&\n\n  \" :sgn\n  call setline(2, 'one one one')\n  let t = execute('sgn')->split(\"\\n\")\n  call assert_equal(['3 matches on 1 line'], t)\n  call assert_equal('one one one', getline(2))\n\n  \" :sgp\n  call setline(2, \"\\tone one one\")\n  redir => output\n  sgp\n  redir END\n  call assert_equal('        two two two', output->split(\"\\n\")[-1])\n  call assert_equal(\"\\ttwo two two\", getline(2))\n\n  \" :sgl\n  call setline(2, \"\\tone one one\")\n  redir => output\n  sgl\n  redir END\n  call assert_equal(\"^Itwo two two$\", output->split(\"\\n\")[-1])\n  call assert_equal(\"\\ttwo two two\", getline(2))\n\n  \" :sgr\n  call setline(2, \"one one one\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  sgr\n  call assert_equal('xyz xyz xyz', getline(2))\n\n  \" :sic\n  call cursor(1, 1)\n  s/one/two/e\n  call setline(2, \"ONE One one\")\n  call cursor(2, 1)\n  call feedkeys(\":sic\\<CR>y\", 'xt')\n  call assert_equal('two One one', getline(2))\n\n  \" :si\n  call setline(2, \"ONE One one\")\n  si\n  call assert_equal('two One one', getline(2))\n\n  \" :siI\n  call setline(2, \"ONE One one\")\n  siI\n  call assert_equal('ONE One two', getline(2))\n\n  \" :sin\n  call setline(2, 'ONE One onE')\n  let t = execute('sin')->split(\"\\n\")\n  call assert_equal(['1 match on 1 line'], t)\n  call assert_equal('ONE One onE', getline(2))\n\n  \" :sip\n  call setline(2, \"\\tONE One onE\")\n  redir => output\n  sip\n  redir END\n  call assert_equal('        two One onE', output->split(\"\\n\")[-1])\n  call assert_equal(\"\\ttwo One onE\", getline(2))\n\n  \" :sir\n  call setline(2, \"ONE One onE\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  sir\n  call assert_equal('xyz One onE', getline(2))\n\n  \" :sIc\n  call cursor(1, 1)\n  s/one/two/e\n  call setline(2, \"ONE One one\")\n  call cursor(2, 1)\n  call feedkeys(\":sIc\\<CR>y\", 'xt')\n  call assert_equal('ONE One two', getline(2))\n\n  \" :sIg\n  call setline(2, \"ONE one onE one\")\n  sIg\n  call assert_equal('ONE two onE two', getline(2))\n\n  \" :sIi\n  call setline(2, \"ONE One one\")\n  sIi\n  call assert_equal('two One one', getline(2))\n\n  \" :sI\n  call setline(2, \"ONE One one\")\n  sI\n  call assert_equal('ONE One two', getline(2))\n\n  \" :sIn\n  call setline(2, 'ONE One one')\n  let t = execute('sIn')->split(\"\\n\")\n  call assert_equal(['1 match on 1 line'], t)\n  call assert_equal('ONE One one', getline(2))\n\n  \" :sIp\n  call setline(2, \"\\tONE One one\")\n  redir => output\n  sIp\n  redir END\n  call assert_equal('        ONE One two', output->split(\"\\n\")[-1])\n  call assert_equal(\"\\tONE One two\", getline(2))\n\n  \" :sIl\n  call setline(2, \"\\tONE onE one\")\n  redir => output\n  sIl\n  redir END\n  call assert_equal(\"^IONE onE two$\", output->split(\"\\n\")[-1])\n  call assert_equal(\"\\tONE onE two\", getline(2))\n\n  \" :sIr\n  call setline(2, \"ONE one onE\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  sIr\n  call assert_equal('ONE xyz onE', getline(2))\n\n  \" :src\n  call setline(2, \"ONE one one\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  call feedkeys(\":src\\<CR>y\", 'xt')\n  call assert_equal('ONE xyz one', getline(2))\n\n  \" :srg\n  call setline(2, \"one one one\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  srg\n  call assert_equal('xyz xyz xyz', getline(2))\n\n  \" :sri\n  call setline(2, \"ONE one onE\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  sri\n  call assert_equal('xyz one onE', getline(2))\n\n  \" :srI\n  call setline(2, \"ONE one onE\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  srI\n  call assert_equal('ONE xyz onE', getline(2))\n\n  \" :srn\n  call setline(2, \"ONE one onE\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  let t = execute('srn')->split(\"\\n\")\n  call assert_equal(['1 match on 1 line'], t)\n  call assert_equal('ONE one onE', getline(2))\n\n  \" :srp\n  call setline(2, \"\\tONE one onE\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  redir => output\n  srp\n  redir END\n  call assert_equal('        ONE xyz onE', output->split(\"\\n\")[-1])\n  call assert_equal(\"\\tONE xyz onE\", getline(2))\n\n  \" :srl\n  call setline(2, \"\\tONE one onE\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  redir => output\n  srl\n  redir END\n  call assert_equal(\"^IONE xyz onE$\", output->split(\"\\n\")[-1])\n  call assert_equal(\"\\tONE xyz onE\", getline(2))\n\n  \" :sr\n  call setline(2, \"ONE one onE\")\n  call cursor(2, 1)\n  s/abc/xyz/e\n  let @/ = 'one'\n  sr\n  call assert_equal('ONE xyz onE', getline(2))\n\n  \" :sce\n  s/abc/xyz/e\n  call assert_fails(\"sc\", 'E486:')\n  sce\n  \" :sge\n  call assert_fails(\"sg\", 'E486:')\n  sge\n  \" :sie\n  call assert_fails(\"si\", 'E486:')\n  sie\n  \" :sIe\n  call assert_fails(\"sI\", 'E486:')\n  sIe\n\n  bw!\nendfunc\n\n\" This should be done last to reveal a memory leak when vim_regsub_both() is\n\" called to evaluate an expression but it is not used in a second call.\nfunc Test_z_substitute_expr_leak()\n  func SubExpr()\n    ~n\n  endfunc\n  silent! s/\\%')/\\=SubExpr()\n  delfunc SubExpr\nendfunc\n\n\" vim: shiftwidth=2 sts=2 expandtab\n", "/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\t\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n#include \"vim.h\"\n\n/*\n * Vim originated from Stevie version 3.6 (Fish disk 217) by GRWalter (Fred)\n * It has been changed beyond recognition since then.\n *\n * Differences between version 8.2 and 9.0 can be found with \":help version9\".\n * Differences between version 7.4 and 8.x can be found with \":help version8\".\n * Differences between version 6.4 and 7.x can be found with \":help version7\".\n * Differences between version 5.8 and 6.x can be found with \":help version6\".\n * Differences between version 4.x and 5.x can be found with \":help version5\".\n * Differences between version 3.0 and 4.x can be found with \":help version4\".\n * All the remarks about older versions have been removed, they are not very\n * interesting.\n */\n\n#include \"version.h\"\n\nchar\t\t*Version = VIM_VERSION_SHORT;\nstatic char\t*mediumVersion = VIM_VERSION_MEDIUM;\n\n#if defined(HAVE_DATE_TIME) || defined(PROTO)\n# if (defined(VMS) && defined(VAXC)) || defined(PROTO)\nchar\tlongVersion[sizeof(VIM_VERSION_LONG_DATE) + sizeof(__DATE__)\n\t\t\t\t\t\t      + sizeof(__TIME__) + 3];\n\n    void\ninit_longVersion(void)\n{\n    /*\n     * Construct the long version string.  Necessary because\n     * VAX C can't concatenate strings in the preprocessor.\n     */\n    strcpy(longVersion, VIM_VERSION_LONG_DATE);\n#ifdef BUILD_DATE\n    strcat(longVersion, BUILD_DATE);\n#else\n    strcat(longVersion, __DATE__);\n    strcat(longVersion, \" \");\n    strcat(longVersion, __TIME__);\n#endif\n    strcat(longVersion, \")\");\n}\n\n# else\nchar\t*longVersion = NULL;\n\n    void\ninit_longVersion(void)\n{\n    if (longVersion == NULL)\n    {\n#ifdef BUILD_DATE\n\tchar *date_time = BUILD_DATE;\n#else\n\tchar *date_time = __DATE__ \" \" __TIME__;\n#endif\n\tchar *msg = _(\"%s (%s, compiled %s)\");\n\tsize_t len = strlen(msg)\n\t\t    + strlen(VIM_VERSION_LONG_ONLY)\n\t\t    + strlen(VIM_VERSION_DATE_ONLY)\n\t\t    + strlen(date_time);\n\n\tlongVersion = alloc(len);\n\tif (longVersion == NULL)\n\t    longVersion = VIM_VERSION_LONG;\n\telse\n\t    vim_snprintf(longVersion, len, msg,\n\t\t      VIM_VERSION_LONG_ONLY, VIM_VERSION_DATE_ONLY, date_time);\n    }\n}\n# endif\n#else\nchar\t*longVersion = VIM_VERSION_LONG;\n\n    void\ninit_longVersion(void)\n{\n    // nothing to do\n}\n#endif\n\nstatic char *(features[]) =\n{\n#ifdef HAVE_ACL\n\t\"+acl\",\n#else\n\t\"-acl\",\n#endif\n#ifdef AMIGA\t\t// only for Amiga systems\n# ifdef FEAT_ARP\n\t\"+ARP\",\n# else\n\t\"-ARP\",\n# endif\n#endif\n#ifdef FEAT_ARABIC\n\t\"+arabic\",\n#else\n\t\"-arabic\",\n#endif\n\t\"+autocmd\",\n#ifdef FEAT_AUTOCHDIR\n       \"+autochdir\",\n#else\n       \"-autochdir\",\n#endif\n#ifdef FEAT_AUTOSERVERNAME\n\t\"+autoservername\",\n#else\n\t\"-autoservername\",\n#endif\n#ifdef FEAT_BEVAL_GUI\n\t\"+balloon_eval\",\n#else\n\t\"-balloon_eval\",\n#endif\n#ifdef FEAT_BEVAL_TERM\n\t\"+balloon_eval_term\",\n#else\n\t\"-balloon_eval_term\",\n#endif\n#ifdef FEAT_BROWSE\n\t\"+browse\",\n#else\n\t\"-browse\",\n#endif\n\t\"++builtin_terms\",\n#ifdef FEAT_BYTEOFF\n\t\"+byte_offset\",\n#else\n\t\"-byte_offset\",\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t\"+channel\",\n#else\n\t\"-channel\",\n#endif\n\t\"+cindent\",\n#ifdef FEAT_CLIENTSERVER\n\t\"+clientserver\",\n#else\n\t\"-clientserver\",\n#endif\n#ifdef FEAT_CLIPBOARD\n\t\"+clipboard\",\n#else\n\t\"-clipboard\",\n#endif\n\t\"+cmdline_compl\",\n\t\"+cmdline_hist\",\n\t\"+cmdline_info\",\n\t\"+comments\",\n#ifdef FEAT_CONCEAL\n\t\"+conceal\",\n#else\n\t\"-conceal\",\n#endif\n#ifdef FEAT_CRYPT\n\t\"+cryptv\",\n#else\n\t\"-cryptv\",\n#endif\n#ifdef FEAT_CSCOPE\n\t\"+cscope\",\n#else\n\t\"-cscope\",\n#endif\n\t\"+cursorbind\",\n#ifdef CURSOR_SHAPE\n\t\"+cursorshape\",\n#else\n\t\"-cursorshape\",\n#endif\n#if defined(FEAT_CON_DIALOG) && defined(FEAT_GUI_DIALOG)\n\t\"+dialog_con_gui\",\n#else\n# if defined(FEAT_CON_DIALOG)\n\t\"+dialog_con\",\n# else\n#  if defined(FEAT_GUI_DIALOG)\n\t\"+dialog_gui\",\n#  else\n\t\"-dialog\",\n#  endif\n# endif\n#endif\n#ifdef FEAT_DIFF\n\t\"+diff\",\n#else\n\t\"-diff\",\n#endif\n#ifdef FEAT_DIGRAPHS\n\t\"+digraphs\",\n#else\n\t\"-digraphs\",\n#endif\n#ifdef FEAT_GUI_MSWIN\n# ifdef FEAT_DIRECTX\n\t\"+directx\",\n# else\n\t\"-directx\",\n# endif\n#endif\n#ifdef FEAT_DND\n\t\"+dnd\",\n#else\n\t\"-dnd\",\n#endif\n\t\"-ebcdic\",\n#ifdef FEAT_EMACS_TAGS\n\t\"+emacs_tags\",\n#else\n\t\"-emacs_tags\",\n#endif\n#ifdef FEAT_EVAL\n\t\"+eval\",\n#else\n\t\"-eval\",\n#endif\n\t\"+ex_extra\",\n#ifdef FEAT_SEARCH_EXTRA\n\t\"+extra_search\",\n#else\n\t\"-extra_search\",\n#endif\n\t\"-farsi\",\n\t\"+file_in_path\",\n#ifdef FEAT_FIND_ID\n\t\"+find_in_path\",\n#else\n\t\"-find_in_path\",\n#endif\n\t\"+float\",\n#ifdef FEAT_FOLDING\n\t\"+folding\",\n#else\n\t\"-folding\",\n#endif\n\t\"-footer\",\n\t// only interesting on Unix systems\n#if !defined(USE_SYSTEM) && defined(UNIX)\n\t\"+fork()\",\n#endif\n#ifdef FEAT_GETTEXT\n# ifdef DYNAMIC_GETTEXT\n\t\"+gettext/dyn\",\n# else\n\t\"+gettext\",\n# endif\n#else\n\t\"-gettext\",\n#endif\n\t\"-hangul_input\",\n#if (defined(HAVE_ICONV_H) && defined(USE_ICONV)) || defined(DYNAMIC_ICONV)\n# ifdef DYNAMIC_ICONV\n\t\"+iconv/dyn\",\n# else\n\t\"+iconv\",\n# endif\n#else\n\t\"-iconv\",\n#endif\n\t\"+insert_expand\",\n#ifdef FEAT_IPV6\n\t\"+ipv6\",\n#else\n\t\"-ipv6\",\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t\"+job\",\n#else\n\t\"-job\",\n#endif\n\t\"+jumplist\",\n#ifdef FEAT_KEYMAP\n\t\"+keymap\",\n#else\n\t\"-keymap\",\n#endif\n#ifdef FEAT_EVAL\n\t\"+lambda\",\n#else\n\t\"-lambda\",\n#endif\n#ifdef FEAT_LANGMAP\n\t\"+langmap\",\n#else\n\t\"-langmap\",\n#endif\n#ifdef FEAT_LIBCALL\n\t\"+libcall\",\n#else\n\t\"-libcall\",\n#endif\n#ifdef FEAT_LINEBREAK\n\t\"+linebreak\",\n#else\n\t\"-linebreak\",\n#endif\n\t\"+lispindent\",\n\t\"+listcmds\",\n\t\"+localmap\",\n#ifdef FEAT_LUA\n# ifdef DYNAMIC_LUA\n\t\"+lua/dyn\",\n# else\n\t\"+lua\",\n# endif\n#else\n\t\"-lua\",\n#endif\n#ifdef FEAT_MENU\n\t\"+menu\",\n#else\n\t\"-menu\",\n#endif\n#ifdef FEAT_SESSION\n\t\"+mksession\",\n#else\n\t\"-mksession\",\n#endif\n\t\"+modify_fname\",\n\t\"+mouse\",\n#ifdef FEAT_MOUSESHAPE\n\t\"+mouseshape\",\n#else\n\t\"-mouseshape\",\n#endif\n\n#if defined(UNIX) || defined(VMS)\n# ifdef FEAT_MOUSE_DEC\n\t\"+mouse_dec\",\n# else\n\t\"-mouse_dec\",\n# endif\n# ifdef FEAT_MOUSE_GPM\n#  ifdef DYNAMIC_GPM\n\t\"+mouse_gpm/dyn\",\n#  else\n\t\"+mouse_gpm\",\n#  endif\n# else\n\t\"-mouse_gpm\",\n# endif\n# ifdef FEAT_MOUSE_JSB\n\t\"+mouse_jsbterm\",\n# else\n\t\"-mouse_jsbterm\",\n# endif\n# ifdef FEAT_MOUSE_NET\n\t\"+mouse_netterm\",\n# else\n\t\"-mouse_netterm\",\n# endif\n#endif\n\n#ifdef __QNX__\n# ifdef FEAT_MOUSE_PTERM\n\t\"+mouse_pterm\",\n# else\n\t\"-mouse_pterm\",\n# endif\n#endif\n\n#if defined(UNIX) || defined(VMS)\n\t\"+mouse_sgr\",\n# ifdef FEAT_SYSMOUSE\n\t\"+mouse_sysmouse\",\n# else\n\t\"-mouse_sysmouse\",\n# endif\n# ifdef FEAT_MOUSE_URXVT\n\t\"+mouse_urxvt\",\n# else\n\t\"-mouse_urxvt\",\n# endif\n\t\"+mouse_xterm\",\n#endif\n\n#ifdef FEAT_MBYTE_IME\n# ifdef DYNAMIC_IME\n\t\"+multi_byte_ime/dyn\",\n# else\n\t\"+multi_byte_ime\",\n# endif\n#else\n\t\"+multi_byte\",\n#endif\n#ifdef FEAT_MULTI_LANG\n\t\"+multi_lang\",\n#else\n\t\"-multi_lang\",\n#endif\n#ifdef FEAT_MZSCHEME\n# ifdef DYNAMIC_MZSCHEME\n\t\"+mzscheme/dyn\",\n# else\n\t\"+mzscheme\",\n# endif\n#else\n\t\"-mzscheme\",\n#endif\n#ifdef FEAT_NETBEANS_INTG\n\t\"+netbeans_intg\",\n#else\n\t\"-netbeans_intg\",\n#endif\n\t\"+num64\",\n#ifdef FEAT_GUI_MSWIN\n# ifdef FEAT_OLE\n\t\"+ole\",\n# else\n\t\"-ole\",\n# endif\n#endif\n#ifdef FEAT_EVAL\n\t\"+packages\",\n#else\n\t\"-packages\",\n#endif\n\t\"+path_extra\",\n#ifdef FEAT_PERL\n# ifdef DYNAMIC_PERL\n\t\"+perl/dyn\",\n# else\n\t\"+perl\",\n# endif\n#else\n\t\"-perl\",\n#endif\n#ifdef FEAT_PERSISTENT_UNDO\n\t\"+persistent_undo\",\n#else\n\t\"-persistent_undo\",\n#endif\n#ifdef FEAT_PROP_POPUP\n\t\"+popupwin\",\n#else\n\t\"-popupwin\",\n#endif\n#ifdef FEAT_PRINTER\n# ifdef FEAT_POSTSCRIPT\n\t\"+postscript\",\n# else\n\t\"-postscript\",\n# endif\n\t\"+printer\",\n#else\n\t\"-printer\",\n#endif\n#ifdef FEAT_PROFILE\n\t\"+profile\",\n#else\n\t\"-profile\",\n#endif\n#ifdef FEAT_PYTHON\n# ifdef DYNAMIC_PYTHON\n\t\"+python/dyn\",\n# else\n\t\"+python\",\n# endif\n#else\n\t\"-python\",\n#endif\n#ifdef FEAT_PYTHON3\n# ifdef DYNAMIC_PYTHON3\n\t\"+python3/dyn\",\n# else\n\t\"+python3\",\n# endif\n#else\n\t\"-python3\",\n#endif\n#ifdef FEAT_QUICKFIX\n\t\"+quickfix\",\n#else\n\t\"-quickfix\",\n#endif\n#ifdef FEAT_RELTIME\n\t\"+reltime\",\n#else\n\t\"-reltime\",\n#endif\n#ifdef FEAT_RIGHTLEFT\n\t\"+rightleft\",\n#else\n\t\"-rightleft\",\n#endif\n#ifdef FEAT_RUBY\n# ifdef DYNAMIC_RUBY\n\t\"+ruby/dyn\",\n# else\n\t\"+ruby\",\n# endif\n#else\n\t\"-ruby\",\n#endif\n\t\"+scrollbind\",\n#ifdef FEAT_SIGNS\n\t\"+signs\",\n#else\n\t\"-signs\",\n#endif\n\t\"+smartindent\",\n#ifdef FEAT_SODIUM\n# ifdef DYNAMIC_SODIUM\n\t\"+sodium/dyn\",\n# else\n\t\"+sodium\",\n# endif\n#else\n\t\"-sodium\",\n#endif\n#ifdef FEAT_SOUND\n\t\"+sound\",\n#else\n\t\"-sound\",\n#endif\n#ifdef FEAT_SPELL\n\t\"+spell\",\n#else\n\t\"-spell\",\n#endif\n#ifdef STARTUPTIME\n\t\"+startuptime\",\n#else\n\t\"-startuptime\",\n#endif\n#ifdef FEAT_STL_OPT\n\t\"+statusline\",\n#else\n\t\"-statusline\",\n#endif\n\t\"-sun_workshop\",\n#ifdef FEAT_SYN_HL\n\t\"+syntax\",\n#else\n\t\"-syntax\",\n#endif\n\t    // only interesting on Unix systems\n#if defined(USE_SYSTEM) && defined(UNIX)\n\t\"+system()\",\n#endif\n\t\"+tag_binary\",\n\t\"-tag_old_static\",\n\t\"-tag_any_white\",\n#ifdef FEAT_TCL\n# ifdef DYNAMIC_TCL\n\t\"+tcl/dyn\",\n# else\n\t\"+tcl\",\n# endif\n#else\n\t\"-tcl\",\n#endif\n#ifdef FEAT_TERMGUICOLORS\n\t\"+termguicolors\",\n#else\n\t\"-termguicolors\",\n#endif\n#ifdef FEAT_TERMINAL\n\t\"+terminal\",\n#else\n\t\"-terminal\",\n#endif\n#if defined(UNIX)\n// only Unix can have terminfo instead of termcap\n# ifdef TERMINFO\n\t\"+terminfo\",\n# else\n\t\"-terminfo\",\n# endif\n#endif\n#ifdef FEAT_TERMRESPONSE\n\t\"+termresponse\",\n#else\n\t\"-termresponse\",\n#endif\n\t\"+textobjects\",\n#ifdef FEAT_PROP_POPUP\n\t\"+textprop\",\n#else\n\t\"-textprop\",\n#endif\n#if !defined(UNIX)\n// unix always includes termcap support\n# ifdef HAVE_TGETENT\n\t\"+tgetent\",\n# else\n\t\"-tgetent\",\n# endif\n#endif\n#ifdef FEAT_TIMERS\n\t\"+timers\",\n#else\n\t\"-timers\",\n#endif\n\t\"+title\",\n#ifdef FEAT_TOOLBAR\n\t\"+toolbar\",\n#else\n\t\"-toolbar\",\n#endif\n\t\"+user_commands\",\n#ifdef FEAT_VARTABS\n\t\"+vartabs\",\n#else\n\t\"-vartabs\",\n#endif\n\t\"+vertsplit\",\n\t\"+vim9script\",\n#ifdef FEAT_VIMINFO\n\t\"+viminfo\",\n#else\n\t\"-viminfo\",\n#endif\n\t\"+virtualedit\",\n\t\"+visual\",\n\t\"+visualextra\",\n\t\"+vreplace\",\n#ifdef MSWIN\n# ifdef FEAT_VTP\n\t\"+vtp\",\n# else\n\t\"-vtp\",\n# endif\n#endif\n\t\"+wildignore\",\n\t\"+wildmenu\",\n\t\"+windows\",\n#ifdef FEAT_WRITEBACKUP\n\t\"+writebackup\",\n#else\n\t\"-writebackup\",\n#endif\n#if defined(UNIX) || defined(VMS)\n# ifdef FEAT_X11\n\t\"+X11\",\n# else\n\t\"-X11\",\n# endif\n#endif\n#ifdef FEAT_XFONTSET\n\t\"+xfontset\",\n#else\n\t\"-xfontset\",\n#endif\n#ifdef FEAT_XIM\n\t\"+xim\",\n#else\n\t\"-xim\",\n#endif\n#if defined(MSWIN)\n# ifdef FEAT_XPM_W32\n\t\"+xpm_w32\",\n# else\n\t\"-xpm_w32\",\n# endif\n#elif defined(HAVE_XPM)\n\t\"+xpm\",\n#else\n\t\"-xpm\",\n#endif\n#if defined(UNIX) || defined(VMS)\n# if defined(USE_XSMP_INTERACT)\n\t\"+xsmp_interact\",\n# elif defined(USE_XSMP)\n\t\"+xsmp\",\n# else\n\t\"-xsmp\",\n# endif\n# ifdef FEAT_XCLIPBOARD\n\t\"+xterm_clipboard\",\n# else\n\t\"-xterm_clipboard\",\n# endif\n#endif\n#ifdef FEAT_XTERM_SAVE\n\t\"+xterm_save\",\n#else\n\t\"-xterm_save\",\n#endif\n\tNULL\n};\n\nstatic int included_patches[] =\n{   /* Add new patch number below this line */\n/**/\n    1145,\n/**/\n    1144,\n/**/\n    1143,\n/**/\n    1142,\n/**/\n    1141,\n/**/\n    1140,\n/**/\n    1139,\n/**/\n    1138,\n/**/\n    1137,\n/**/\n    1136,\n/**/\n    1135,\n/**/\n    1134,\n/**/\n    1133,\n/**/\n    1132,\n/**/\n    1131,\n/**/\n    1130,\n/**/\n    1129,\n/**/\n    1128,\n/**/\n    1127,\n/**/\n    1126,\n/**/\n    1125,\n/**/\n    1124,\n/**/\n    1123,\n/**/\n    1122,\n/**/\n    1121,\n/**/\n    1120,\n/**/\n    1119,\n/**/\n    1118,\n/**/\n    1117,\n/**/\n    1116,\n/**/\n    1115,\n/**/\n    1114,\n/**/\n    1113,\n/**/\n    1112,\n/**/\n    1111,\n/**/\n    1110,\n/**/\n    1109,\n/**/\n    1108,\n/**/\n    1107,\n/**/\n    1106,\n/**/\n    1105,\n/**/\n    1104,\n/**/\n    1103,\n/**/\n    1102,\n/**/\n    1101,\n/**/\n    1100,\n/**/\n    1099,\n/**/\n    1098,\n/**/\n    1097,\n/**/\n    1096,\n/**/\n    1095,\n/**/\n    1094,\n/**/\n    1093,\n/**/\n    1092,\n/**/\n    1091,\n/**/\n    1090,\n/**/\n    1089,\n/**/\n    1088,\n/**/\n    1087,\n/**/\n    1086,\n/**/\n    1085,\n/**/\n    1084,\n/**/\n    1083,\n/**/\n    1082,\n/**/\n    1081,\n/**/\n    1080,\n/**/\n    1079,\n/**/\n    1078,\n/**/\n    1077,\n/**/\n    1076,\n/**/\n    1075,\n/**/\n    1074,\n/**/\n    1073,\n/**/\n    1072,\n/**/\n    1071,\n/**/\n    1070,\n/**/\n    1069,\n/**/\n    1068,\n/**/\n    1067,\n/**/\n    1066,\n/**/\n    1065,\n/**/\n    1064,\n/**/\n    1063,\n/**/\n    1062,\n/**/\n    1061,\n/**/\n    1060,\n/**/\n    1059,\n/**/\n    1058,\n/**/\n    1057,\n/**/\n    1056,\n/**/\n    1055,\n/**/\n    1054,\n/**/\n    1053,\n/**/\n    1052,\n/**/\n    1051,\n/**/\n    1050,\n/**/\n    1049,\n/**/\n    1048,\n/**/\n    1047,\n/**/\n    1046,\n/**/\n    1045,\n/**/\n    1044,\n/**/\n    1043,\n/**/\n    1042,\n/**/\n    1041,\n/**/\n    1040,\n/**/\n    1039,\n/**/\n    1038,\n/**/\n    1037,\n/**/\n    1036,\n/**/\n    1035,\n/**/\n    1034,\n/**/\n    1033,\n/**/\n    1032,\n/**/\n    1031,\n/**/\n    1030,\n/**/\n    1029,\n/**/\n    1028,\n/**/\n    1027,\n/**/\n    1026,\n/**/\n    1025,\n/**/\n    1024,\n/**/\n    1023,\n/**/\n    1022,\n/**/\n    1021,\n/**/\n    1020,\n/**/\n    1019,\n/**/\n    1018,\n/**/\n    1017,\n/**/\n    1016,\n/**/\n    1015,\n/**/\n    1014,\n/**/\n    1013,\n/**/\n    1012,\n/**/\n    1011,\n/**/\n    1010,\n/**/\n    1009,\n/**/\n    1008,\n/**/\n    1007,\n/**/\n    1006,\n/**/\n    1005,\n/**/\n    1004,\n/**/\n    1003,\n/**/\n    1002,\n/**/\n    1001,\n/**/\n    1000,\n/**/\n    999,\n/**/\n    998,\n/**/\n    997,\n/**/\n    996,\n/**/\n    995,\n/**/\n    994,\n/**/\n    993,\n/**/\n    992,\n/**/\n    991,\n/**/\n    990,\n/**/\n    989,\n/**/\n    988,\n/**/\n    987,\n/**/\n    986,\n/**/\n    985,\n/**/\n    984,\n/**/\n    983,\n/**/\n    982,\n/**/\n    981,\n/**/\n    980,\n/**/\n    979,\n/**/\n    978,\n/**/\n    977,\n/**/\n    976,\n/**/\n    975,\n/**/\n    974,\n/**/\n    973,\n/**/\n    972,\n/**/\n    971,\n/**/\n    970,\n/**/\n    969,\n/**/\n    968,\n/**/\n    967,\n/**/\n    966,\n/**/\n    965,\n/**/\n    964,\n/**/\n    963,\n/**/\n    962,\n/**/\n    961,\n/**/\n    960,\n/**/\n    959,\n/**/\n    958,\n/**/\n    957,\n/**/\n    956,\n/**/\n    955,\n/**/\n    954,\n/**/\n    953,\n/**/\n    952,\n/**/\n    951,\n/**/\n    950,\n/**/\n    949,\n/**/\n    948,\n/**/\n    947,\n/**/\n    946,\n/**/\n    945,\n/**/\n    944,\n/**/\n    943,\n/**/\n    942,\n/**/\n    941,\n/**/\n    940,\n/**/\n    939,\n/**/\n    938,\n/**/\n    937,\n/**/\n    936,\n/**/\n    935,\n/**/\n    934,\n/**/\n    933,\n/**/\n    932,\n/**/\n    931,\n/**/\n    930,\n/**/\n    929,\n/**/\n    928,\n/**/\n    927,\n/**/\n    926,\n/**/\n    925,\n/**/\n    924,\n/**/\n    923,\n/**/\n    922,\n/**/\n    921,\n/**/\n    920,\n/**/\n    919,\n/**/\n    918,\n/**/\n    917,\n/**/\n    916,\n/**/\n    915,\n/**/\n    914,\n/**/\n    913,\n/**/\n    912,\n/**/\n    911,\n/**/\n    910,\n/**/\n    909,\n/**/\n    908,\n/**/\n    907,\n/**/\n    906,\n/**/\n    905,\n/**/\n    904,\n/**/\n    903,\n/**/\n    902,\n/**/\n    901,\n/**/\n    900,\n/**/\n    899,\n/**/\n    898,\n/**/\n    897,\n/**/\n    896,\n/**/\n    895,\n/**/\n    894,\n/**/\n    893,\n/**/\n    892,\n/**/\n    891,\n/**/\n    890,\n/**/\n    889,\n/**/\n    888,\n/**/\n    887,\n/**/\n    886,\n/**/\n    885,\n/**/\n    884,\n/**/\n    883,\n/**/\n    882,\n/**/\n    881,\n/**/\n    880,\n/**/\n    879,\n/**/\n    878,\n/**/\n    877,\n/**/\n    876,\n/**/\n    875,\n/**/\n    874,\n/**/\n    873,\n/**/\n    872,\n/**/\n    871,\n/**/\n    870,\n/**/\n    869,\n/**/\n    868,\n/**/\n    867,\n/**/\n    866,\n/**/\n    865,\n/**/\n    864,\n/**/\n    863,\n/**/\n    862,\n/**/\n    861,\n/**/\n    860,\n/**/\n    859,\n/**/\n    858,\n/**/\n    857,\n/**/\n    856,\n/**/\n    855,\n/**/\n    854,\n/**/\n    853,\n/**/\n    852,\n/**/\n    851,\n/**/\n    850,\n/**/\n    849,\n/**/\n    848,\n/**/\n    847,\n/**/\n    846,\n/**/\n    845,\n/**/\n    844,\n/**/\n    843,\n/**/\n    842,\n/**/\n    841,\n/**/\n    840,\n/**/\n    839,\n/**/\n    838,\n/**/\n    837,\n/**/\n    836,\n/**/\n    835,\n/**/\n    834,\n/**/\n    833,\n/**/\n    832,\n/**/\n    831,\n/**/\n    830,\n/**/\n    829,\n/**/\n    828,\n/**/\n    827,\n/**/\n    826,\n/**/\n    825,\n/**/\n    824,\n/**/\n    823,\n/**/\n    822,\n/**/\n    821,\n/**/\n    820,\n/**/\n    819,\n/**/\n    818,\n/**/\n    817,\n/**/\n    816,\n/**/\n    815,\n/**/\n    814,\n/**/\n    813,\n/**/\n    812,\n/**/\n    811,\n/**/\n    810,\n/**/\n    809,\n/**/\n    808,\n/**/\n    807,\n/**/\n    806,\n/**/\n    805,\n/**/\n    804,\n/**/\n    803,\n/**/\n    802,\n/**/\n    801,\n/**/\n    800,\n/**/\n    799,\n/**/\n    798,\n/**/\n    797,\n/**/\n    796,\n/**/\n    795,\n/**/\n    794,\n/**/\n    793,\n/**/\n    792,\n/**/\n    791,\n/**/\n    790,\n/**/\n    789,\n/**/\n    788,\n/**/\n    787,\n/**/\n    786,\n/**/\n    785,\n/**/\n    784,\n/**/\n    783,\n/**/\n    782,\n/**/\n    781,\n/**/\n    780,\n/**/\n    779,\n/**/\n    778,\n/**/\n    777,\n/**/\n    776,\n/**/\n    775,\n/**/\n    774,\n/**/\n    773,\n/**/\n    772,\n/**/\n    771,\n/**/\n    770,\n/**/\n    769,\n/**/\n    768,\n/**/\n    767,\n/**/\n    766,\n/**/\n    765,\n/**/\n    764,\n/**/\n    763,\n/**/\n    762,\n/**/\n    761,\n/**/\n    760,\n/**/\n    759,\n/**/\n    758,\n/**/\n    757,\n/**/\n    756,\n/**/\n    755,\n/**/\n    754,\n/**/\n    753,\n/**/\n    752,\n/**/\n    751,\n/**/\n    750,\n/**/\n    749,\n/**/\n    748,\n/**/\n    747,\n/**/\n    746,\n/**/\n    745,\n/**/\n    744,\n/**/\n    743,\n/**/\n    742,\n/**/\n    741,\n/**/\n    740,\n/**/\n    739,\n/**/\n    738,\n/**/\n    737,\n/**/\n    736,\n/**/\n    735,\n/**/\n    734,\n/**/\n    733,\n/**/\n    732,\n/**/\n    731,\n/**/\n    730,\n/**/\n    729,\n/**/\n    728,\n/**/\n    727,\n/**/\n    726,\n/**/\n    725,\n/**/\n    724,\n/**/\n    723,\n/**/\n    722,\n/**/\n    721,\n/**/\n    720,\n/**/\n    719,\n/**/\n    718,\n/**/\n    717,\n/**/\n    716,\n/**/\n    715,\n/**/\n    714,\n/**/\n    713,\n/**/\n    712,\n/**/\n    711,\n/**/\n    710,\n/**/\n    709,\n/**/\n    708,\n/**/\n    707,\n/**/\n    706,\n/**/\n    705,\n/**/\n    704,\n/**/\n    703,\n/**/\n    702,\n/**/\n    701,\n/**/\n    700,\n/**/\n    699,\n/**/\n    698,\n/**/\n    697,\n/**/\n    696,\n/**/\n    695,\n/**/\n    694,\n/**/\n    693,\n/**/\n    692,\n/**/\n    691,\n/**/\n    690,\n/**/\n    689,\n/**/\n    688,\n/**/\n    687,\n/**/\n    686,\n/**/\n    685,\n/**/\n    684,\n/**/\n    683,\n/**/\n    682,\n/**/\n    681,\n/**/\n    680,\n/**/\n    679,\n/**/\n    678,\n/**/\n    677,\n/**/\n    676,\n/**/\n    675,\n/**/\n    674,\n/**/\n    673,\n/**/\n    672,\n/**/\n    671,\n/**/\n    670,\n/**/\n    669,\n/**/\n    668,\n/**/\n    667,\n/**/\n    666,\n/**/\n    665,\n/**/\n    664,\n/**/\n    663,\n/**/\n    662,\n/**/\n    661,\n/**/\n    660,\n/**/\n    659,\n/**/\n    658,\n/**/\n    657,\n/**/\n    656,\n/**/\n    655,\n/**/\n    654,\n/**/\n    653,\n/**/\n    652,\n/**/\n    651,\n/**/\n    650,\n/**/\n    649,\n/**/\n    648,\n/**/\n    647,\n/**/\n    646,\n/**/\n    645,\n/**/\n    644,\n/**/\n    643,\n/**/\n    642,\n/**/\n    641,\n/**/\n    640,\n/**/\n    639,\n/**/\n    638,\n/**/\n    637,\n/**/\n    636,\n/**/\n    635,\n/**/\n    634,\n/**/\n    633,\n/**/\n    632,\n/**/\n    631,\n/**/\n    630,\n/**/\n    629,\n/**/\n    628,\n/**/\n    627,\n/**/\n    626,\n/**/\n    625,\n/**/\n    624,\n/**/\n    623,\n/**/\n    622,\n/**/\n    621,\n/**/\n    620,\n/**/\n    619,\n/**/\n    618,\n/**/\n    617,\n/**/\n    616,\n/**/\n    615,\n/**/\n    614,\n/**/\n    613,\n/**/\n    612,\n/**/\n    611,\n/**/\n    610,\n/**/\n    609,\n/**/\n    608,\n/**/\n    607,\n/**/\n    606,\n/**/\n    605,\n/**/\n    604,\n/**/\n    603,\n/**/\n    602,\n/**/\n    601,\n/**/\n    600,\n/**/\n    599,\n/**/\n    598,\n/**/\n    597,\n/**/\n    596,\n/**/\n    595,\n/**/\n    594,\n/**/\n    593,\n/**/\n    592,\n/**/\n    591,\n/**/\n    590,\n/**/\n    589,\n/**/\n    588,\n/**/\n    587,\n/**/\n    586,\n/**/\n    585,\n/**/\n    584,\n/**/\n    583,\n/**/\n    582,\n/**/\n    581,\n/**/\n    580,\n/**/\n    579,\n/**/\n    578,\n/**/\n    577,\n/**/\n    576,\n/**/\n    575,\n/**/\n    574,\n/**/\n    573,\n/**/\n    572,\n/**/\n    571,\n/**/\n    570,\n/**/\n    569,\n/**/\n    568,\n/**/\n    567,\n/**/\n    566,\n/**/\n    565,\n/**/\n    564,\n/**/\n    563,\n/**/\n    562,\n/**/\n    561,\n/**/\n    560,\n/**/\n    559,\n/**/\n    558,\n/**/\n    557,\n/**/\n    556,\n/**/\n    555,\n/**/\n    554,\n/**/\n    553,\n/**/\n    552,\n/**/\n    551,\n/**/\n    550,\n/**/\n    549,\n/**/\n    548,\n/**/\n    547,\n/**/\n    546,\n/**/\n    545,\n/**/\n    544,\n/**/\n    543,\n/**/\n    542,\n/**/\n    541,\n/**/\n    540,\n/**/\n    539,\n/**/\n    538,\n/**/\n    537,\n/**/\n    536,\n/**/\n    535,\n/**/\n    534,\n/**/\n    533,\n/**/\n    532,\n/**/\n    531,\n/**/\n    530,\n/**/\n    529,\n/**/\n    528,\n/**/\n    527,\n/**/\n    526,\n/**/\n    525,\n/**/\n    524,\n/**/\n    523,\n/**/\n    522,\n/**/\n    521,\n/**/\n    520,\n/**/\n    519,\n/**/\n    518,\n/**/\n    517,\n/**/\n    516,\n/**/\n    515,\n/**/\n    514,\n/**/\n    513,\n/**/\n    512,\n/**/\n    511,\n/**/\n    510,\n/**/\n    509,\n/**/\n    508,\n/**/\n    507,\n/**/\n    506,\n/**/\n    505,\n/**/\n    504,\n/**/\n    503,\n/**/\n    502,\n/**/\n    501,\n/**/\n    500,\n/**/\n    499,\n/**/\n    498,\n/**/\n    497,\n/**/\n    496,\n/**/\n    495,\n/**/\n    494,\n/**/\n    493,\n/**/\n    492,\n/**/\n    491,\n/**/\n    490,\n/**/\n    489,\n/**/\n    488,\n/**/\n    487,\n/**/\n    486,\n/**/\n    485,\n/**/\n    484,\n/**/\n    483,\n/**/\n    482,\n/**/\n    481,\n/**/\n    480,\n/**/\n    479,\n/**/\n    478,\n/**/\n    477,\n/**/\n    476,\n/**/\n    475,\n/**/\n    474,\n/**/\n    473,\n/**/\n    472,\n/**/\n    471,\n/**/\n    470,\n/**/\n    469,\n/**/\n    468,\n/**/\n    467,\n/**/\n    466,\n/**/\n    465,\n/**/\n    464,\n/**/\n    463,\n/**/\n    462,\n/**/\n    461,\n/**/\n    460,\n/**/\n    459,\n/**/\n    458,\n/**/\n    457,\n/**/\n    456,\n/**/\n    455,\n/**/\n    454,\n/**/\n    453,\n/**/\n    452,\n/**/\n    451,\n/**/\n    450,\n/**/\n    449,\n/**/\n    448,\n/**/\n    447,\n/**/\n    446,\n/**/\n    445,\n/**/\n    444,\n/**/\n    443,\n/**/\n    442,\n/**/\n    441,\n/**/\n    440,\n/**/\n    439,\n/**/\n    438,\n/**/\n    437,\n/**/\n    436,\n/**/\n    435,\n/**/\n    434,\n/**/\n    433,\n/**/\n    432,\n/**/\n    431,\n/**/\n    430,\n/**/\n    429,\n/**/\n    428,\n/**/\n    427,\n/**/\n    426,\n/**/\n    425,\n/**/\n    424,\n/**/\n    423,\n/**/\n    422,\n/**/\n    421,\n/**/\n    420,\n/**/\n    419,\n/**/\n    418,\n/**/\n    417,\n/**/\n    416,\n/**/\n    415,\n/**/\n    414,\n/**/\n    413,\n/**/\n    412,\n/**/\n    411,\n/**/\n    410,\n/**/\n    409,\n/**/\n    408,\n/**/\n    407,\n/**/\n    406,\n/**/\n    405,\n/**/\n    404,\n/**/\n    403,\n/**/\n    402,\n/**/\n    401,\n/**/\n    400,\n/**/\n    399,\n/**/\n    398,\n/**/\n    397,\n/**/\n    396,\n/**/\n    395,\n/**/\n    394,\n/**/\n    393,\n/**/\n    392,\n/**/\n    391,\n/**/\n    390,\n/**/\n    389,\n/**/\n    388,\n/**/\n    387,\n/**/\n    386,\n/**/\n    385,\n/**/\n    384,\n/**/\n    383,\n/**/\n    382,\n/**/\n    381,\n/**/\n    380,\n/**/\n    379,\n/**/\n    378,\n/**/\n    377,\n/**/\n    376,\n/**/\n    375,\n/**/\n    374,\n/**/\n    373,\n/**/\n    372,\n/**/\n    371,\n/**/\n    370,\n/**/\n    369,\n/**/\n    368,\n/**/\n    367,\n/**/\n    366,\n/**/\n    365,\n/**/\n    364,\n/**/\n    363,\n/**/\n    362,\n/**/\n    361,\n/**/\n    360,\n/**/\n    359,\n/**/\n    358,\n/**/\n    357,\n/**/\n    356,\n/**/\n    355,\n/**/\n    354,\n/**/\n    353,\n/**/\n    352,\n/**/\n    351,\n/**/\n    350,\n/**/\n    349,\n/**/\n    348,\n/**/\n    347,\n/**/\n    346,\n/**/\n    345,\n/**/\n    344,\n/**/\n    343,\n/**/\n    342,\n/**/\n    341,\n/**/\n    340,\n/**/\n    339,\n/**/\n    338,\n/**/\n    337,\n/**/\n    336,\n/**/\n    335,\n/**/\n    334,\n/**/\n    333,\n/**/\n    332,\n/**/\n    331,\n/**/\n    330,\n/**/\n    329,\n/**/\n    328,\n/**/\n    327,\n/**/\n    326,\n/**/\n    325,\n/**/\n    324,\n/**/\n    323,\n/**/\n    322,\n/**/\n    321,\n/**/\n    320,\n/**/\n    319,\n/**/\n    318,\n/**/\n    317,\n/**/\n    316,\n/**/\n    315,\n/**/\n    314,\n/**/\n    313,\n/**/\n    312,\n/**/\n    311,\n/**/\n    310,\n/**/\n    309,\n/**/\n    308,\n/**/\n    307,\n/**/\n    306,\n/**/\n    305,\n/**/\n    304,\n/**/\n    303,\n/**/\n    302,\n/**/\n    301,\n/**/\n    300,\n/**/\n    299,\n/**/\n    298,\n/**/\n    297,\n/**/\n    296,\n/**/\n    295,\n/**/\n    294,\n/**/\n    293,\n/**/\n    292,\n/**/\n    291,\n/**/\n    290,\n/**/\n    289,\n/**/\n    288,\n/**/\n    287,\n/**/\n    286,\n/**/\n    285,\n/**/\n    284,\n/**/\n    283,\n/**/\n    282,\n/**/\n    281,\n/**/\n    280,\n/**/\n    279,\n/**/\n    278,\n/**/\n    277,\n/**/\n    276,\n/**/\n    275,\n/**/\n    274,\n/**/\n    273,\n/**/\n    272,\n/**/\n    271,\n/**/\n    270,\n/**/\n    269,\n/**/\n    268,\n/**/\n    267,\n/**/\n    266,\n/**/\n    265,\n/**/\n    264,\n/**/\n    263,\n/**/\n    262,\n/**/\n    261,\n/**/\n    260,\n/**/\n    259,\n/**/\n    258,\n/**/\n    257,\n/**/\n    256,\n/**/\n    255,\n/**/\n    254,\n/**/\n    253,\n/**/\n    252,\n/**/\n    251,\n/**/\n    250,\n/**/\n    249,\n/**/\n    248,\n/**/\n    247,\n/**/\n    246,\n/**/\n    245,\n/**/\n    244,\n/**/\n    243,\n/**/\n    242,\n/**/\n    241,\n/**/\n    240,\n/**/\n    239,\n/**/\n    238,\n/**/\n    237,\n/**/\n    236,\n/**/\n    235,\n/**/\n    234,\n/**/\n    233,\n/**/\n    232,\n/**/\n    231,\n/**/\n    230,\n/**/\n    229,\n/**/\n    228,\n/**/\n    227,\n/**/\n    226,\n/**/\n    225,\n/**/\n    224,\n/**/\n    223,\n/**/\n    222,\n/**/\n    221,\n/**/\n    220,\n/**/\n    219,\n/**/\n    218,\n/**/\n    217,\n/**/\n    216,\n/**/\n    215,\n/**/\n    214,\n/**/\n    213,\n/**/\n    212,\n/**/\n    211,\n/**/\n    210,\n/**/\n    209,\n/**/\n    208,\n/**/\n    207,\n/**/\n    206,\n/**/\n    205,\n/**/\n    204,\n/**/\n    203,\n/**/\n    202,\n/**/\n    201,\n/**/\n    200,\n/**/\n    199,\n/**/\n    198,\n/**/\n    197,\n/**/\n    196,\n/**/\n    195,\n/**/\n    194,\n/**/\n    193,\n/**/\n    192,\n/**/\n    191,\n/**/\n    190,\n/**/\n    189,\n/**/\n    188,\n/**/\n    187,\n/**/\n    186,\n/**/\n    185,\n/**/\n    184,\n/**/\n    183,\n/**/\n    182,\n/**/\n    181,\n/**/\n    180,\n/**/\n    179,\n/**/\n    178,\n/**/\n    177,\n/**/\n    176,\n/**/\n    175,\n/**/\n    174,\n/**/\n    173,\n/**/\n    172,\n/**/\n    171,\n/**/\n    170,\n/**/\n    169,\n/**/\n    168,\n/**/\n    167,\n/**/\n    166,\n/**/\n    165,\n/**/\n    164,\n/**/\n    163,\n/**/\n    162,\n/**/\n    161,\n/**/\n    160,\n/**/\n    159,\n/**/\n    158,\n/**/\n    157,\n/**/\n    156,\n/**/\n    155,\n/**/\n    154,\n/**/\n    153,\n/**/\n    152,\n/**/\n    151,\n/**/\n    150,\n/**/\n    149,\n/**/\n    148,\n/**/\n    147,\n/**/\n    146,\n/**/\n    145,\n/**/\n    144,\n/**/\n    143,\n/**/\n    142,\n/**/\n    141,\n/**/\n    140,\n/**/\n    139,\n/**/\n    138,\n/**/\n    137,\n/**/\n    136,\n/**/\n    135,\n/**/\n    134,\n/**/\n    133,\n/**/\n    132,\n/**/\n    131,\n/**/\n    130,\n/**/\n    129,\n/**/\n    128,\n/**/\n    127,\n/**/\n    126,\n/**/\n    125,\n/**/\n    124,\n/**/\n    123,\n/**/\n    122,\n/**/\n    121,\n/**/\n    120,\n/**/\n    119,\n/**/\n    118,\n/**/\n    117,\n/**/\n    116,\n/**/\n    115,\n/**/\n    114,\n/**/\n    113,\n/**/\n    112,\n/**/\n    111,\n/**/\n    110,\n/**/\n    109,\n/**/\n    108,\n/**/\n    107,\n/**/\n    106,\n/**/\n    105,\n/**/\n    104,\n/**/\n    103,\n/**/\n    102,\n/**/\n    101,\n/**/\n    100,\n/**/\n    99,\n/**/\n    98,\n/**/\n    97,\n/**/\n    96,\n/**/\n    95,\n/**/\n    94,\n/**/\n    93,\n/**/\n    92,\n/**/\n    91,\n/**/\n    90,\n/**/\n    89,\n/**/\n    88,\n/**/\n    87,\n/**/\n    86,\n/**/\n    85,\n/**/\n    84,\n/**/\n    83,\n/**/\n    82,\n/**/\n    81,\n/**/\n    80,\n/**/\n    79,\n/**/\n    78,\n/**/\n    77,\n/**/\n    76,\n/**/\n    75,\n/**/\n    74,\n/**/\n    73,\n/**/\n    72,\n/**/\n    71,\n/**/\n    70,\n/**/\n    69,\n/**/\n    68,\n/**/\n    67,\n/**/\n    66,\n/**/\n    65,\n/**/\n    64,\n/**/\n    63,\n/**/\n    62,\n/**/\n    61,\n/**/\n    60,\n/**/\n    59,\n/**/\n    58,\n/**/\n    57,\n/**/\n    56,\n/**/\n    55,\n/**/\n    54,\n/**/\n    53,\n/**/\n    52,\n/**/\n    51,\n/**/\n    50,\n/**/\n    49,\n/**/\n    48,\n/**/\n    47,\n/**/\n    46,\n/**/\n    45,\n/**/\n    44,\n/**/\n    43,\n/**/\n    42,\n/**/\n    41,\n/**/\n    40,\n/**/\n    39,\n/**/\n    38,\n/**/\n    37,\n/**/\n    36,\n/**/\n    35,\n/**/\n    34,\n/**/\n    33,\n/**/\n    32,\n/**/\n    31,\n/**/\n    30,\n/**/\n    29,\n/**/\n    28,\n/**/\n    27,\n/**/\n    26,\n/**/\n    25,\n/**/\n    24,\n/**/\n    23,\n/**/\n    22,\n/**/\n    21,\n/**/\n    20,\n/**/\n    19,\n/**/\n    18,\n/**/\n    17,\n/**/\n    16,\n/**/\n    15,\n/**/\n    14,\n/**/\n    13,\n/**/\n    12,\n/**/\n    11,\n/**/\n    10,\n/**/\n    9,\n/**/\n    8,\n/**/\n    7,\n/**/\n    6,\n/**/\n    5,\n/**/\n    4,\n/**/\n    3,\n/**/\n    2,\n/**/\n    1,\n/**/\n    0\n};\n\n/*\n * Place to put a short description when adding a feature with a patch.\n * Keep it short, e.g.,: \"relative numbers\", \"persistent undo\".\n * Also add a comment marker to separate the lines.\n * See the official Vim patches for the diff format: It must use a context of\n * one line only.  Create it by hand or use \"diff -C2\" and edit the patch.\n */\nstatic char *(extra_patches[]) =\n{   /* Add your patch description below this line */\n/**/\n    NULL\n};\n\n    int\nhighest_patch(void)\n{\n    // this relies on the highest patch number to be the first entry\n    return included_patches[0];\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * Return TRUE if patch \"n\" has been included.\n */\n    int\nhas_patch(int n)\n{\n    int\t\th, m, l;\n\n    // Perform a binary search.\n    l = 0;\n    h = (int)ARRAY_LENGTH(included_patches) - 1;\n    for (;;)\n    {\n\tm = (l + h) / 2;\n\tif (included_patches[m] == n)\n\t    return TRUE;\n\tif (l == h)\n\t    break;\n\tif (included_patches[m] < n)\n\t    h = m;\n\telse\n\t    l = m + 1;\n    }\n    return FALSE;\n}\n#endif\n\n    void\nex_version(exarg_T *eap)\n{\n    /*\n     * Ignore a \":version 9.99\" command.\n     */\n    if (*eap->arg == NUL)\n    {\n\tmsg_putchar('\\n');\n\tlist_version();\n    }\n}\n\n/*\n * Output a string for the version message.  If it's going to wrap, output a\n * newline, unless the message is too long to fit on the screen anyway.\n * When \"wrap\" is TRUE wrap the string in [].\n */\n    static void\nversion_msg_wrap(char_u *s, int wrap)\n{\n    int\t\tlen = vim_strsize(s) + (wrap ? 2 : 0);\n\n    if (!got_int && len < (int)Columns && msg_col + len >= (int)Columns\n\t\t\t\t\t\t\t\t&& *s != '\\n')\n\tmsg_putchar('\\n');\n    if (!got_int)\n    {\n\tif (wrap)\n\t    msg_puts(\"[\");\n\tmsg_puts((char *)s);\n\tif (wrap)\n\t    msg_puts(\"]\");\n    }\n}\n\n    static void\nversion_msg(char *s)\n{\n    version_msg_wrap((char_u *)s, FALSE);\n}\n\n/*\n * List all features aligned in columns, dictionary style.\n */\n    static void\nlist_features(void)\n{\n    list_in_columns((char_u **)features, -1, -1);\n}\n\n/*\n * List string items nicely aligned in columns.\n * When \"size\" is < 0 then the last entry is marked with NULL.\n * The entry with index \"current\" is inclosed in [].\n */\n    void\nlist_in_columns(char_u **items, int size, int current)\n{\n    int\t\ti;\n    int\t\tncol;\n    int\t\tnrow;\n    int\t\tcur_row = 1;\n    int\t\titem_count = 0;\n    int\t\twidth = 0;\n#ifdef FEAT_SYN_HL\n    int\t\tuse_highlight = (items == (char_u **)features);\n#endif\n\n    // Find the length of the longest item, use that + 1 as the column\n    // width.\n    for (i = 0; size < 0 ? items[i] != NULL : i < size; ++i)\n    {\n\tint l = vim_strsize(items[i]) + (i == current ? 2 : 0);\n\n\tif (l > width)\n\t    width = l;\n\t++item_count;\n    }\n    width += 1;\n\n    if (Columns < width)\n    {\n\t// Not enough screen columns - show one per line\n\tfor (i = 0; i < item_count; ++i)\n\t{\n\t    version_msg_wrap(items[i], i == current);\n\t    if (msg_col > 0 && i < item_count - 1)\n\t\tmsg_putchar('\\n');\n\t}\n\treturn;\n    }\n\n    // The rightmost column doesn't need a separator.\n    // Sacrifice it to fit in one more column if possible.\n    ncol = (int) (Columns + 1) / width;\n    nrow = item_count / ncol + ((item_count % ncol) ? 1 : 0);\n\n    // \"i\" counts columns then rows.  \"idx\" counts rows then columns.\n    for (i = 0; !got_int && i < nrow * ncol; ++i)\n    {\n\tint idx = (i / ncol) + (i % ncol) * nrow;\n\n\tif (idx < item_count)\n\t{\n\t    int last_col = (i + 1) % ncol == 0;\n\n\t    if (idx == current)\n\t\tmsg_putchar('[');\n#ifdef FEAT_SYN_HL\n\t    if (use_highlight && items[idx][0] == '-')\n\t\tmsg_puts_attr((char *)items[idx], HL_ATTR(HLF_W));\n\t    else\n#endif\n\t\tmsg_puts((char *)items[idx]);\n\t    if (idx == current)\n\t\tmsg_putchar(']');\n\t    if (last_col)\n\t    {\n\t\tif (msg_col > 0 && cur_row < nrow)\n\t\t    msg_putchar('\\n');\n\t\t++cur_row;\n\t    }\n\t    else\n\t    {\n\t\twhile (msg_col % width)\n\t\t    msg_putchar(' ');\n\t    }\n\t}\n\telse\n\t{\n\t    // this row is out of items, thus at the end of the row\n\t    if (msg_col > 0)\n\t    {\n\t\tif (cur_row < nrow)\n\t\t    msg_putchar('\\n');\n\t\t++cur_row;\n\t    }\n\t}\n    }\n}\n\n    void\nlist_version(void)\n{\n    int\t\ti;\n    int\t\tfirst;\n    char\t*s = \"\";\n\n    /*\n     * When adding features here, don't forget to update the list of\n     * internal variables in eval.c!\n     */\n    init_longVersion();\n    msg(longVersion);\n#ifdef MSWIN\n# ifdef FEAT_GUI_MSWIN\n#  ifdef VIMDLL\n#   ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit GUI/console version\"));\n#   else\n    msg_puts(_(\"\\nMS-Windows 32-bit GUI/console version\"));\n#   endif\n#  else\n#   ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit GUI version\"));\n#   else\n    msg_puts(_(\"\\nMS-Windows 32-bit GUI version\"));\n#   endif\n#  endif\n#  ifdef FEAT_OLE\n    msg_puts(_(\" with OLE support\"));\n#  endif\n# else\n#  ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit console version\"));\n#  else\n    msg_puts(_(\"\\nMS-Windows 32-bit console version\"));\n#  endif\n# endif\n#endif\n#if defined(MACOS_X)\n# if defined(MACOS_X_DARWIN)\n    msg_puts(_(\"\\nmacOS version\"));\n# else\n    msg_puts(_(\"\\nmacOS version w/o darwin feat.\"));\n# endif\n# if defined(__arm64__)\n    msg_puts(\" - arm64\");\n# elif defined(__x86_64__)\n    msg_puts(\" - x86_64\");\n# endif\n#endif\n\n#ifdef VMS\n    msg_puts(_(\"\\nOpenVMS version\"));\n# ifdef HAVE_PATHDEF\n    if (*compiled_arch != NUL)\n    {\n\tmsg_puts(\" - \");\n\tmsg_puts((char *)compiled_arch);\n    }\n# endif\n\n#endif\n\n    // Print the list of patch numbers if there is at least one.\n    // Print a range when patches are consecutive: \"1-10, 12, 15-40, 42-45\"\n    if (included_patches[0] != 0)\n    {\n\tmsg_puts(_(\"\\nIncluded patches: \"));\n\tfirst = -1;\n\ti = (int)ARRAY_LENGTH(included_patches) - 1;\n\twhile (--i >= 0)\n\t{\n\t    if (first < 0)\n\t\tfirst = included_patches[i];\n\t    if (i == 0 || included_patches[i - 1] != included_patches[i] + 1)\n\t    {\n\t\tmsg_puts(s);\n\t\ts = \", \";\n\t\tmsg_outnum((long)first);\n\t\tif (first != included_patches[i])\n\t\t{\n\t\t    msg_puts(\"-\");\n\t\t    msg_outnum((long)included_patches[i]);\n\t\t}\n\t\tfirst = -1;\n\t    }\n\t}\n    }\n\n    // Print the list of extra patch descriptions if there is at least one.\n    if (extra_patches[0] != NULL)\n    {\n\tmsg_puts(_(\"\\nExtra patches: \"));\n\ts = \"\";\n\tfor (i = 0; extra_patches[i] != NULL; ++i)\n\t{\n\t    msg_puts(s);\n\t    s = \", \";\n\t    msg_puts(extra_patches[i]);\n\t}\n    }\n\n#ifdef MODIFIED_BY\n    msg_puts(\"\\n\");\n    msg_puts(_(\"Modified by \"));\n    msg_puts(MODIFIED_BY);\n#endif\n\n#ifdef HAVE_PATHDEF\n    if (*compiled_user != NUL || *compiled_sys != NUL)\n    {\n\tmsg_puts(_(\"\\nCompiled \"));\n\tif (*compiled_user != NUL)\n\t{\n\t    msg_puts(_(\"by \"));\n\t    msg_puts((char *)compiled_user);\n\t}\n\tif (*compiled_sys != NUL)\n\t{\n\t    msg_puts(\"@\");\n\t    msg_puts((char *)compiled_sys);\n\t}\n    }\n#endif\n\n#if defined(FEAT_HUGE)\n    msg_puts(_(\"\\nHuge version \"));\n#elif defined(FEAT_NORMAL)\n    msg_puts(_(\"\\nNormal version \"));\n#else\n    msg_puts(_(\"\\nTiny version \"));\n#endif\n#if !defined(FEAT_GUI)\n    msg_puts(_(\"without GUI.\"));\n#elif defined(FEAT_GUI_GTK)\n# if defined(USE_GTK3)\n    msg_puts(_(\"with GTK3 GUI.\"));\n# elif defined(FEAT_GUI_GNOME)\n     msg_puts(_(\"with GTK2-GNOME GUI.\"));\n# else\n     msg_puts(_(\"with GTK2 GUI.\"));\n# endif\n#elif defined(FEAT_GUI_MOTIF)\n    msg_puts(_(\"with X11-Motif GUI.\"));\n#elif defined(FEAT_GUI_HAIKU)\n    msg_puts(_(\"with Haiku GUI.\"));\n#elif defined(FEAT_GUI_PHOTON)\n    msg_puts(_(\"with Photon GUI.\"));\n#elif defined(MSWIN)\n    msg_puts(_(\"with GUI.\"));\n#endif\n    version_msg(_(\"  Features included (+) or not (-):\\n\"));\n\n    list_features();\n    if (msg_col > 0)\n\tmsg_putchar('\\n');\n\n#ifdef SYS_VIMRC_FILE\n    version_msg(_(\"   system vimrc file: \\\"\"));\n    version_msg(SYS_VIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE\n    version_msg(_(\"     user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE2\n    version_msg(_(\" 2nd user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE2);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE3\n    version_msg(_(\" 3rd user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE3);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_EXRC_FILE\n    version_msg(_(\"      user exrc file: \\\"\"));\n    version_msg(USR_EXRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_EXRC_FILE2\n    version_msg(_(\"  2nd user exrc file: \\\"\"));\n    version_msg(USR_EXRC_FILE2);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef FEAT_GUI\n# ifdef SYS_GVIMRC_FILE\n    version_msg(_(\"  system gvimrc file: \\\"\"));\n    version_msg(SYS_GVIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n# endif\n    version_msg(_(\"    user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n# ifdef USR_GVIMRC_FILE2\n    version_msg(_(\"2nd user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE2);\n    version_msg(\"\\\"\\n\");\n# endif\n# ifdef USR_GVIMRC_FILE3\n    version_msg(_(\"3rd user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE3);\n    version_msg(\"\\\"\\n\");\n# endif\n#endif\n    version_msg(_(\"       defaults file: \\\"\"));\n    version_msg(VIM_DEFAULTS_FILE);\n    version_msg(\"\\\"\\n\");\n#ifdef FEAT_GUI\n# ifdef SYS_MENU_FILE\n    version_msg(_(\"    system menu file: \\\"\"));\n    version_msg(SYS_MENU_FILE);\n    version_msg(\"\\\"\\n\");\n# endif\n#endif\n#ifdef HAVE_PATHDEF\n    if (*default_vim_dir != NUL)\n    {\n\tversion_msg(_(\"  fall-back for $VIM: \\\"\"));\n\tversion_msg((char *)default_vim_dir);\n\tversion_msg(\"\\\"\\n\");\n    }\n    if (*default_vimruntime_dir != NUL)\n    {\n\tversion_msg(_(\" f-b for $VIMRUNTIME: \\\"\"));\n\tversion_msg((char *)default_vimruntime_dir);\n\tversion_msg(\"\\\"\\n\");\n    }\n    version_msg(_(\"Compilation: \"));\n    version_msg((char *)all_cflags);\n    version_msg(\"\\n\");\n#ifdef VMS\n    if (*compiler_version != NUL)\n    {\n\tversion_msg(_(\"Compiler: \"));\n\tversion_msg((char *)compiler_version);\n\tversion_msg(\"\\n\");\n    }\n#endif\n    version_msg(_(\"Linking: \"));\n    version_msg((char *)all_lflags);\n#endif\n#ifdef DEBUG\n    version_msg(\"\\n\");\n    version_msg(_(\"  DEBUG BUILD\"));\n#endif\n}\n\nstatic void do_intro_line(int row, char_u *mesg, int add_version, int attr);\nstatic void intro_message(int colon);\n\n/*\n * Show the intro message when not editing a file.\n */\n    void\nmaybe_intro_message(void)\n{\n    if (BUFEMPTY()\n\t    && curbuf->b_fname == NULL\n\t    && firstwin->w_next == NULL\n\t    && vim_strchr(p_shm, SHM_INTRO) == NULL)\n\tintro_message(FALSE);\n}\n\n/*\n * Give an introductory message about Vim.\n * Only used when starting Vim on an empty file, without a file name.\n * Or with the \":intro\" command (for Sven :-).\n */\n    static void\nintro_message(\n    int\t\tcolon)\t\t// TRUE for \":intro\"\n{\n    int\t\ti;\n    int\t\trow;\n    int\t\tblanklines;\n    int\t\tsponsor;\n    char\t*p;\n    static char\t*(lines[]) =\n    {\n\tN_(\"VIM - Vi IMproved\"),\n\t\"\",\n\tN_(\"version \"),\n\tN_(\"by Bram Moolenaar et al.\"),\n#ifdef MODIFIED_BY\n\t\" \",\n#endif\n\tN_(\"Vim is open source and freely distributable\"),\n\t\"\",\n\tN_(\"Help poor children in Uganda!\"),\n\tN_(\"type  :help iccf<Enter>       for information \"),\n\t\"\",\n\tN_(\"type  :q<Enter>               to exit         \"),\n\tN_(\"type  :help<Enter>  or  <F1>  for on-line help\"),\n\tN_(\"type  :help version9<Enter>   for version info\"),\n\tNULL,\n\t\"\",\n\tN_(\"Running in Vi compatible mode\"),\n\tN_(\"type  :set nocp<Enter>        for Vim defaults\"),\n\tN_(\"type  :help cp-default<Enter> for info on this\"),\n    };\n#ifdef FEAT_GUI\n    static char\t*(gui_lines[]) =\n    {\n\tNULL,\n\tNULL,\n\tNULL,\n\tNULL,\n#ifdef MODIFIED_BY\n\tNULL,\n#endif\n\tNULL,\n\tNULL,\n\tNULL,\n\tN_(\"menu  Help->Orphans           for information    \"),\n\tNULL,\n\tN_(\"Running modeless, typed text is inserted\"),\n\tN_(\"menu  Edit->Global Settings->Toggle Insert Mode  \"),\n\tN_(\"                              for two modes      \"),\n\tNULL,\n\tNULL,\n\tNULL,\n\tN_(\"menu  Edit->Global Settings->Toggle Vi Compatible\"),\n\tN_(\"                              for Vim defaults   \"),\n    };\n#endif\n\n    // blanklines = screen height - # message lines\n    blanklines = (int)Rows - (ARRAY_LENGTH(lines) - 1);\n    if (!p_cp)\n\tblanklines += 4;  // add 4 for not showing \"Vi compatible\" message\n\n    // Don't overwrite a statusline.  Depends on 'cmdheight'.\n    if (p_ls > 1)\n\tblanklines -= Rows - topframe->fr_height;\n    if (blanklines < 0)\n\tblanklines = 0;\n\n    // Show the sponsor and register message one out of four times, the Uganda\n    // message two out of four times.\n    sponsor = (int)time(NULL);\n    sponsor = ((sponsor & 2) == 0) - ((sponsor & 4) == 0);\n\n    // start displaying the message lines after half of the blank lines\n    row = blanklines / 2;\n    if ((row >= 2 && Columns >= 50) || colon)\n    {\n\tfor (i = 0; i < (int)ARRAY_LENGTH(lines); ++i)\n\t{\n\t    p = lines[i];\n#ifdef FEAT_GUI\n\t    if (p_im && gui.in_use && gui_lines[i] != NULL)\n\t\tp = gui_lines[i];\n#endif\n\t    if (p == NULL)\n\t    {\n\t\tif (!p_cp)\n\t\t    break;\n\t\tcontinue;\n\t    }\n\t    if (sponsor != 0)\n\t    {\n\t\tif (strstr(p, \"children\") != NULL)\n\t\t    p = sponsor < 0\n\t\t\t? N_(\"Sponsor Vim development!\")\n\t\t\t: N_(\"Become a registered Vim user!\");\n\t\telse if (strstr(p, \"iccf\") != NULL)\n\t\t    p = sponsor < 0\n\t\t\t? N_(\"type  :help sponsor<Enter>    for information \")\n\t\t\t: N_(\"type  :help register<Enter>   for information \");\n\t\telse if (strstr(p, \"Orphans\") != NULL)\n\t\t    p = N_(\"menu  Help->Sponsor/Register  for information    \");\n\t    }\n\t    if (*p != NUL)\n\t\tdo_intro_line(row, (char_u *)_(p), i == 2, 0);\n\t    ++row;\n\t}\n    }\n\n    // Make the wait-return message appear just below the text.\n    if (colon)\n\tmsg_row = row;\n}\n\n    static void\ndo_intro_line(\n    int\t\trow,\n    char_u\t*mesg,\n    int\t\tadd_version,\n    int\t\tattr)\n{\n    char_u\tvers[20];\n    int\t\tcol;\n    char_u\t*p;\n    int\t\tl;\n    int\t\tclen;\n#ifdef MODIFIED_BY\n# define MODBY_LEN 150\n    char_u\tmodby[MODBY_LEN];\n\n    if (*mesg == ' ')\n    {\n\tvim_strncpy(modby, (char_u *)_(\"Modified by \"), MODBY_LEN - 1);\n\tl = (int)STRLEN(modby);\n\tvim_strncpy(modby + l, (char_u *)MODIFIED_BY, MODBY_LEN - l - 1);\n\tmesg = modby;\n    }\n#endif\n\n    // Center the message horizontally.\n    col = vim_strsize(mesg);\n    if (add_version)\n    {\n\tSTRCPY(vers, mediumVersion);\n\tif (highest_patch())\n\t{\n\t    // Check for 9.9x or 9.9xx, alpha/beta version\n\t    if (isalpha((int)vers[3]))\n\t    {\n\t\tint len = (isalpha((int)vers[4])) ? 5 : 4;\n\t\tsprintf((char *)vers + len, \".%d%s\", highest_patch(),\n\t\t\t\t\t\t\t mediumVersion + len);\n\t    }\n\t    else\n\t\tsprintf((char *)vers + 3, \".%d\", highest_patch());\n\t}\n\tcol += (int)STRLEN(vers);\n    }\n    col = (Columns - col) / 2;\n    if (col < 0)\n\tcol = 0;\n\n    // Split up in parts to highlight <> items differently.\n    for (p = mesg; *p != NUL; p += l)\n    {\n\tclen = 0;\n\tfor (l = 0; p[l] != NUL\n\t\t\t && (l == 0 || (p[l] != '<' && p[l - 1] != '>')); ++l)\n\t{\n\t    if (has_mbyte)\n\t    {\n\t\tclen += ptr2cells(p + l);\n\t\tl += (*mb_ptr2len)(p + l) - 1;\n\t    }\n\t    else\n\t\tclen += byte2cells(p[l]);\n\t}\n\tscreen_puts_len(p, l, row, col, *p == '<' ? HL_ATTR(HLF_8) : attr);\n\tcol += clen;\n    }\n\n    // Add the version number to the version line.\n    if (add_version)\n\tscreen_puts(vers, row, col, 0);\n}\n\n/*\n * \":intro\": clear screen, display intro screen and wait for return.\n */\n    void\nex_intro(exarg_T *eap UNUSED)\n{\n    screenclear();\n    intro_message(TRUE);\n    wait_return(TRUE);\n}\n"], "filenames": ["src/eval.c", "src/testdir/test_substitute.vim", "src/version.c"], "buggy_code_start_loc": [7314, 883, 697], "buggy_code_end_loc": [7314, 1117, 697], "fixing_code_start_loc": [7315, 883, 698], "fixing_code_end_loc": [7320, 1134, 700], "type": "CWE-787", "message": "Out-of-bounds Write in GitHub repository vim/vim prior to 9.0.1145.", "other": {"cve": {"id": "CVE-2023-0054", "sourceIdentifier": "security@huntr.dev", "published": "2023-01-04T19:15:09.573", "lastModified": "2023-05-03T12:16:43.723", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Out-of-bounds Write in GitHub repository vim/vim prior to 9.0.1145."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.3, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-787"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:vim:vim:*:*:*:*:*:*:*:*", "versionEndExcluding": "9.0.1145", "matchCriteriaId": "7A64F3DA-66B5-4F73-A776-7457E9CBCE52"}]}]}], "references": [{"url": "http://seclists.org/fulldisclosure/2023/Mar/17", "source": "security@huntr.dev"}, {"url": "https://github.com/vim/vim/commit/3ac1d97a1d9353490493d30088256360435f7731", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/b289ee0f-fd16-4147-bd01-c6289c45e49d", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/202305-16", "source": "security@huntr.dev"}, {"url": "https://support.apple.com/kb/HT213670", "source": "security@huntr.dev"}]}, "github_commit_url": "https://github.com/vim/vim/commit/3ac1d97a1d9353490493d30088256360435f7731"}}