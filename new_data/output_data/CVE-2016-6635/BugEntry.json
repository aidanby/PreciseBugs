{"buggy_code": ["<?php\n/**\n * Administration API: Core Ajax handlers\n *\n * @package WordPress\n * @subpackage Administration\n * @since 2.1.0\n */\n\n//\n// No-privilege Ajax handlers.\n//\n\n/**\n * Ajax handler for the Heartbeat API in\n * the no-privilege context.\n *\n * Runs when the user is not logged in.\n *\n * @since 3.6.0\n */\nfunction wp_ajax_nopriv_heartbeat() {\n\t$response = array();\n\n\t// screen_id is the same as $current_screen->id and the JS global 'pagenow'.\n\tif ( ! empty($_POST['screen_id']) )\n\t\t$screen_id = sanitize_key($_POST['screen_id']);\n\telse\n\t\t$screen_id = 'front';\n\n\tif ( ! empty($_POST['data']) ) {\n\t\t$data = wp_unslash( (array) $_POST['data'] );\n\n\t\t/**\n\t\t * Filter Heartbeat AJAX response in no-privilege environments.\n\t\t *\n\t\t * @since 3.6.0\n\t\t *\n\t\t * @param array|object $response  The no-priv Heartbeat response object or array.\n\t\t * @param array        $data      An array of data passed via $_POST.\n\t\t * @param string       $screen_id The screen id.\n\t\t */\n\t\t$response = apply_filters( 'heartbeat_nopriv_received', $response, $data, $screen_id );\n\t}\n\n\t/**\n\t * Filter Heartbeat AJAX response when no data is passed.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param array|object $response  The Heartbeat response object or array.\n\t * @param string       $screen_id The screen id.\n\t */\n\t$response = apply_filters( 'heartbeat_nopriv_send', $response, $screen_id );\n\n\t/**\n\t * Fires when Heartbeat ticks in no-privilege environments.\n\t *\n\t * Allows the transport to be easily replaced with long-polling.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param array|object $response  The no-priv Heartbeat response.\n\t * @param string       $screen_id The screen id.\n\t */\n\tdo_action( 'heartbeat_nopriv_tick', $response, $screen_id );\n\n\t// Send the current time according to the server.\n\t$response['server_time'] = time();\n\n\twp_send_json($response);\n}\n\n//\n// GET-based Ajax handlers.\n//\n\n/**\n * Ajax handler for fetching a list table.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n */\nfunction wp_ajax_fetch_list() {\n\tglobal $wp_list_table;\n\n\t$list_class = $_GET['list_args']['class'];\n\tcheck_ajax_referer( \"fetch-list-$list_class\", '_ajax_fetch_list_nonce' );\n\n\t$wp_list_table = _get_list_table( $list_class, array( 'screen' => $_GET['list_args']['screen']['id'] ) );\n\tif ( ! $wp_list_table )\n\t\twp_die( 0 );\n\n\tif ( ! $wp_list_table->ajax_user_can() )\n\t\twp_die( -1 );\n\n\t$wp_list_table->ajax_response();\n\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler for tag search.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_ajax_tag_search() {\n\tif ( ! isset( $_GET['tax'] ) ) {\n\t\twp_die( 0 );\n\t}\n\n\t$taxonomy = sanitize_key( $_GET['tax'] );\n\t$tax = get_taxonomy( $taxonomy );\n\tif ( ! $tax ) {\n\t\twp_die( 0 );\n\t}\n\n\tif ( ! current_user_can( $tax->cap->assign_terms ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$s = wp_unslash( $_GET['q'] );\n\n\t$comma = _x( ',', 'tag delimiter' );\n\tif ( ',' !== $comma )\n\t\t$s = str_replace( $comma, ',', $s );\n\tif ( false !== strpos( $s, ',' ) ) {\n\t\t$s = explode( ',', $s );\n\t\t$s = $s[count( $s ) - 1];\n\t}\n\t$s = trim( $s );\n\n\t/**\n\t * Filter the minimum number of characters required to fire a tag search via AJAX.\n\t *\n\t * @since 4.0.0\n\t *\n\t * @param int    $characters The minimum number of characters required. Default 2.\n\t * @param object $tax        The taxonomy object.\n\t * @param string $s          The search term.\n\t */\n\t$term_search_min_chars = (int) apply_filters( 'term_search_min_chars', 2, $tax, $s );\n\n\t/*\n\t * Require $term_search_min_chars chars for matching (default: 2)\n\t * ensure it's a non-negative, non-zero integer.\n\t */\n\tif ( ( $term_search_min_chars == 0 ) || ( strlen( $s ) < $term_search_min_chars ) ){\n\t\twp_die();\n\t}\n\n\t$results = get_terms( $taxonomy, array( 'name__like' => $s, 'fields' => 'names', 'hide_empty' => false ) );\n\n\techo join( $results, \"\\n\" );\n\twp_die();\n}\n\n/**\n * Ajax handler for compression testing.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_wp_compression_test() {\n\tif ( !current_user_can( 'manage_options' ) )\n\t\twp_die( -1 );\n\n\tif ( ini_get('zlib.output_compression') || 'ob_gzhandler' == ini_get('output_handler') ) {\n\t\tupdate_site_option('can_compress_scripts', 0);\n\t\twp_die( 0 );\n\t}\n\n\tif ( isset($_GET['test']) ) {\n\t\theader( 'Expires: Wed, 11 Jan 1984 05:00:00 GMT' );\n\t\theader( 'Last-Modified: ' . gmdate( 'D, d M Y H:i:s' ) . ' GMT' );\n\t\theader( 'Cache-Control: no-cache, must-revalidate, max-age=0' );\n\t\theader( 'Pragma: no-cache' );\n\t\theader('Content-Type: application/javascript; charset=UTF-8');\n\t\t$force_gzip = ( defined('ENFORCE_GZIP') && ENFORCE_GZIP );\n\t\t$test_str = '\"wpCompressionTest Lorem ipsum dolor sit amet consectetuer mollis sapien urna ut a. Eu nonummy condimentum fringilla tempor pretium platea vel nibh netus Maecenas. Hac molestie amet justo quis pellentesque est ultrices interdum nibh Morbi. Cras mattis pretium Phasellus ante ipsum ipsum ut sociis Suspendisse Lorem. Ante et non molestie. Porta urna Vestibulum egestas id congue nibh eu risus gravida sit. Ac augue auctor Ut et non a elit massa id sodales. Elit eu Nulla at nibh adipiscing mattis lacus mauris at tempus. Netus nibh quis suscipit nec feugiat eget sed lorem et urna. Pellentesque lacus at ut massa consectetuer ligula ut auctor semper Pellentesque. Ut metus massa nibh quam Curabitur molestie nec mauris congue. Volutpat molestie elit justo facilisis neque ac risus Ut nascetur tristique. Vitae sit lorem tellus et quis Phasellus lacus tincidunt nunc Fusce. Pharetra wisi Suspendisse mus sagittis libero lacinia Integer consequat ac Phasellus. Et urna ac cursus tortor aliquam Aliquam amet tellus volutpat Vestibulum. Justo interdum condimentum In augue congue tellus sollicitudin Quisque quis nibh.\"';\n\n\t\t if ( 1 == $_GET['test'] ) {\n\t\t \techo $test_str;\n\t\t \twp_die();\n\t\t } elseif ( 2 == $_GET['test'] ) {\n\t\t\tif ( !isset($_SERVER['HTTP_ACCEPT_ENCODING']) )\n\t\t\t\twp_die( -1 );\n\t\t\tif ( false !== stripos( $_SERVER['HTTP_ACCEPT_ENCODING'], 'deflate') && function_exists('gzdeflate') && ! $force_gzip ) {\n\t\t\t\theader('Content-Encoding: deflate');\n\t\t\t\t$out = gzdeflate( $test_str, 1 );\n\t\t\t} elseif ( false !== stripos( $_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') && function_exists('gzencode') ) {\n\t\t\t\theader('Content-Encoding: gzip');\n\t\t\t\t$out = gzencode( $test_str, 1 );\n\t\t\t} else {\n\t\t\t\twp_die( -1 );\n\t\t\t}\n\t\t\techo $out;\n\t\t\twp_die();\n\t\t} elseif ( 'no' == $_GET['test'] ) {\n\t\t\tupdate_site_option('can_compress_scripts', 0);\n\t\t} elseif ( 'yes' == $_GET['test'] ) {\n\t\t\tupdate_site_option('can_compress_scripts', 1);\n\t\t}\n\t}\n\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler for image editor previews.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_imgedit_preview() {\n\t$post_id = intval($_GET['postid']);\n\tif ( empty($post_id) || !current_user_can('edit_post', $post_id) )\n\t\twp_die( -1 );\n\n\tcheck_ajax_referer( \"image_editor-$post_id\" );\n\n\tinclude_once( ABSPATH . 'wp-admin/includes/image-edit.php' );\n\tif ( ! stream_preview_image($post_id) )\n\t\twp_die( -1 );\n\n\twp_die();\n}\n\n/**\n * Ajax handler for oEmbed caching.\n *\n * @since 3.1.0\n *\n * @global WP_Embed $wp_embed\n */\nfunction wp_ajax_oembed_cache() {\n\t$GLOBALS['wp_embed']->cache_oembed( $_GET['post'] );\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler for user autocomplete.\n *\n * @since 3.4.0\n */\nfunction wp_ajax_autocomplete_user() {\n\tif ( ! is_multisite() || ! current_user_can( 'promote_users' ) || wp_is_large_network( 'users' ) )\n\t\twp_die( -1 );\n\n\t/** This filter is documented in wp-admin/user-new.php */\n\tif ( ! is_super_admin() && ! apply_filters( 'autocomplete_users_for_site_admins', false ) )\n\t\twp_die( -1 );\n\n\t$return = array();\n\n\t// Check the type of request\n\t// Current allowed values are `add` and `search`\n\tif ( isset( $_REQUEST['autocomplete_type'] ) && 'search' === $_REQUEST['autocomplete_type'] ) {\n\t\t$type = $_REQUEST['autocomplete_type'];\n\t} else {\n\t\t$type = 'add';\n\t}\n\n\t// Check the desired field for value\n\t// Current allowed values are `user_email` and `user_login`\n\tif ( isset( $_REQUEST['autocomplete_field'] ) && 'user_email' === $_REQUEST['autocomplete_field'] ) {\n\t\t$field = $_REQUEST['autocomplete_field'];\n\t} else {\n\t\t$field = 'user_login';\n\t}\n\n\t// Exclude current users of this blog\n\tif ( isset( $_REQUEST['site_id'] ) ) {\n\t\t$id = absint( $_REQUEST['site_id'] );\n\t} else {\n\t\t$id = get_current_blog_id();\n\t}\n\n\t$include_blog_users = ( $type == 'search' ? get_users( array( 'blog_id' => $id, 'fields' => 'ID' ) ) : array() );\n\t$exclude_blog_users = ( $type == 'add' ? get_users( array( 'blog_id' => $id, 'fields' => 'ID' ) ) : array() );\n\n\t$users = get_users( array(\n\t\t'blog_id' => false,\n\t\t'search'  => '*' . $_REQUEST['term'] . '*',\n\t\t'include' => $include_blog_users,\n\t\t'exclude' => $exclude_blog_users,\n\t\t'search_columns' => array( 'user_login', 'user_nicename', 'user_email' ),\n\t) );\n\n\tforeach ( $users as $user ) {\n\t\t$return[] = array(\n\t\t\t/* translators: 1: user_login, 2: user_email */\n\t\t\t'label' => sprintf( _x( '%1$s (%2$s)', 'user autocomplete result' ), $user->user_login, $user->user_email ),\n\t\t\t'value' => $user->$field,\n\t\t);\n\t}\n\n\twp_die( wp_json_encode( $return ) );\n}\n\n/**\n * Ajax handler for dashboard widgets.\n *\n * @since 3.4.0\n */\nfunction wp_ajax_dashboard_widgets() {\n\trequire_once ABSPATH . 'wp-admin/includes/dashboard.php';\n\n\t$pagenow = $_GET['pagenow'];\n\tif ( $pagenow === 'dashboard-user' || $pagenow === 'dashboard-network' || $pagenow === 'dashboard' ) {\n\t\tset_current_screen( $pagenow );\n\t}\n\n\tswitch ( $_GET['widget'] ) {\n\t\tcase 'dashboard_primary' :\n\t\t\twp_dashboard_primary();\n\t\t\tbreak;\n\t}\n\twp_die();\n}\n\n/**\n * Ajax handler for Customizer preview logged-in status.\n *\n * @since 3.4.0\n */\nfunction wp_ajax_logged_in() {\n\twp_die( 1 );\n}\n\n//\n// Ajax helpers.\n//\n\n/**\n * Sends back current comment total and new page links if they need to be updated.\n *\n * Contrary to normal success AJAX response (\"1\"), die with time() on success.\n *\n * @access private\n * @since 2.7.0\n *\n * @param int $comment_id\n * @param int $delta\n */\nfunction _wp_ajax_delete_comment_response( $comment_id, $delta = -1 ) {\n\t$total    = isset( $_POST['_total'] )    ? (int) $_POST['_total']    : 0;\n\t$per_page = isset( $_POST['_per_page'] ) ? (int) $_POST['_per_page'] : 0;\n\t$page     = isset( $_POST['_page'] )     ? (int) $_POST['_page']     : 0;\n\t$url      = isset( $_POST['_url'] )      ? esc_url_raw( $_POST['_url'] ) : '';\n\n\t// JS didn't send us everything we need to know. Just die with success message\n\tif ( ! $total || ! $per_page || ! $page || ! $url ) {\n\t\t$time = time();\n\t\t$comment = get_comment( $comment_id );\n\n\t\t$counts = wp_count_comments();\n\n\t\t$x = new WP_Ajax_Response( array(\n\t\t\t'what' => 'comment',\n\t\t\t// Here for completeness - not used.\n\t\t\t'id' => $comment_id,\n\t\t\t'supplemental' => array(\n\t\t\t\t'status' => $comment ? $comment->comment_approved : '',\n\t\t\t\t'postId' => $comment ? $comment->comment_post_ID : '',\n\t\t\t\t'time' => $time,\n\t\t\t\t'in_moderation' => $counts->moderated,\n\t\t\t\t'i18n_comments_text' => sprintf(\n\t\t\t\t\t_n( '%s Comment', '%s Comments', $counts->approved ),\n\t\t\t\t\tnumber_format_i18n( $counts->approved )\n\t\t\t\t),\n\t\t\t\t'i18n_moderation_text' => sprintf(\n\t\t\t\t\t_nx( '%s in moderation', '%s in moderation', $counts->moderated, 'comments' ),\n\t\t\t\t\tnumber_format_i18n( $counts->moderated )\n\t\t\t\t)\n\t\t\t)\n\t\t) );\n\t\t$x->send();\n\t}\n\n\t$total += $delta;\n\tif ( $total < 0 )\n\t\t$total = 0;\n\n\t// Only do the expensive stuff on a page-break, and about 1 other time per page\n\tif ( 0 == $total % $per_page || 1 == mt_rand( 1, $per_page ) ) {\n\t\t$post_id = 0;\n\t\t// What type of comment count are we looking for?\n\t\t$status = 'all';\n\t\t$parsed = parse_url( $url );\n\t\tif ( isset( $parsed['query'] ) ) {\n\t\t\tparse_str( $parsed['query'], $query_vars );\n\t\t\tif ( !empty( $query_vars['comment_status'] ) )\n\t\t\t\t$status = $query_vars['comment_status'];\n\t\t\tif ( !empty( $query_vars['p'] ) )\n\t\t\t\t$post_id = (int) $query_vars['p'];\n\t\t}\n\n\t\t$comment_count = wp_count_comments($post_id);\n\n\t\t// We're looking for a known type of comment count.\n\t\tif ( isset( $comment_count->$status ) )\n\t\t\t$total = $comment_count->$status;\n\t\t\t// Else use the decremented value from above.\n\t}\n\n\t// The time since the last comment count.\n\t$time = time();\n\t$comment = get_comment( $comment_id );\n\n\t$x = new WP_Ajax_Response( array(\n\t\t'what' => 'comment',\n\t\t// Here for completeness - not used.\n\t\t'id' => $comment_id,\n\t\t'supplemental' => array(\n\t\t\t'status' => $comment ? $comment->comment_approved : '',\n\t\t\t'postId' => $comment ? $comment->comment_post_ID : '',\n\t\t\t'total_items_i18n' => sprintf( _n( '%s item', '%s items', $total ), number_format_i18n( $total ) ),\n\t\t\t'total_pages' => ceil( $total / $per_page ),\n\t\t\t'total_pages_i18n' => number_format_i18n( ceil( $total / $per_page ) ),\n\t\t\t'total' => $total,\n\t\t\t'time' => $time\n\t\t)\n\t) );\n\t$x->send();\n}\n\n//\n// POST-based Ajax handlers.\n//\n\n/**\n * Ajax handler for adding a hierarchical term.\n *\n * @access private\n * @since 3.1.0\n */\nfunction _wp_ajax_add_hierarchical_term() {\n\t$action = $_POST['action'];\n\t$taxonomy = get_taxonomy(substr($action, 4));\n\tcheck_ajax_referer( $action, '_ajax_nonce-add-' . $taxonomy->name );\n\tif ( !current_user_can( $taxonomy->cap->edit_terms ) )\n\t\twp_die( -1 );\n\t$names = explode(',', $_POST['new'.$taxonomy->name]);\n\t$parent = isset($_POST['new'.$taxonomy->name.'_parent']) ? (int) $_POST['new'.$taxonomy->name.'_parent'] : 0;\n\tif ( 0 > $parent )\n\t\t$parent = 0;\n\tif ( $taxonomy->name == 'category' )\n\t\t$post_category = isset($_POST['post_category']) ? (array) $_POST['post_category'] : array();\n\telse\n\t\t$post_category = ( isset($_POST['tax_input']) && isset($_POST['tax_input'][$taxonomy->name]) ) ? (array) $_POST['tax_input'][$taxonomy->name] : array();\n\t$checked_categories = array_map( 'absint', (array) $post_category );\n\t$popular_ids = wp_popular_terms_checklist($taxonomy->name, 0, 10, false);\n\n\tforeach ( $names as $cat_name ) {\n\t\t$cat_name = trim($cat_name);\n\t\t$category_nicename = sanitize_title($cat_name);\n\t\tif ( '' === $category_nicename )\n\t\t\tcontinue;\n\t\tif ( !$cat_id = term_exists( $cat_name, $taxonomy->name, $parent ) )\n\t\t\t$cat_id = wp_insert_term( $cat_name, $taxonomy->name, array( 'parent' => $parent ) );\n\t\tif ( is_wp_error( $cat_id ) ) {\n\t\t\tcontinue;\n\t\t} elseif ( is_array( $cat_id ) ) {\n\t\t\t$cat_id = $cat_id['term_id'];\n\t\t}\n\t\t$checked_categories[] = $cat_id;\n\t\tif ( $parent ) // Do these all at once in a second\n\t\t\tcontinue;\n\n\t\tob_start();\n\n\t\twp_terms_checklist( 0, array( 'taxonomy' => $taxonomy->name, 'descendants_and_self' => $cat_id, 'selected_cats' => $checked_categories, 'popular_cats' => $popular_ids ));\n\n\t\t$data = ob_get_clean();\n\n\t\t$add = array(\n\t\t\t'what' => $taxonomy->name,\n\t\t\t'id' => $cat_id,\n\t\t\t'data' => str_replace( array(\"\\n\", \"\\t\"), '', $data),\n\t\t\t'position' => -1\n\t\t);\n\t}\n\n\tif ( $parent ) { // Foncy - replace the parent and all its children\n\t\t$parent = get_term( $parent, $taxonomy->name );\n\t\t$term_id = $parent->term_id;\n\n\t\twhile ( $parent->parent ) { // get the top parent\n\t\t\t$parent = get_term( $parent->parent, $taxonomy->name );\n\t\t\tif ( is_wp_error( $parent ) )\n\t\t\t\tbreak;\n\t\t\t$term_id = $parent->term_id;\n\t\t}\n\n\t\tob_start();\n\n\t\twp_terms_checklist( 0, array('taxonomy' => $taxonomy->name, 'descendants_and_self' => $term_id, 'selected_cats' => $checked_categories, 'popular_cats' => $popular_ids));\n\n\t\t$data = ob_get_clean();\n\n\t\t$add = array(\n\t\t\t'what' => $taxonomy->name,\n\t\t\t'id' => $term_id,\n\t\t\t'data' => str_replace( array(\"\\n\", \"\\t\"), '', $data),\n\t\t\t'position' => -1\n\t\t);\n\t}\n\n\tob_start();\n\n\twp_dropdown_categories( array(\n\t\t'taxonomy' => $taxonomy->name, 'hide_empty' => 0, 'name' => 'new'.$taxonomy->name.'_parent', 'orderby' => 'name',\n\t\t'hierarchical' => 1, 'show_option_none' => '&mdash; '.$taxonomy->labels->parent_item.' &mdash;'\n\t) );\n\n\t$sup = ob_get_clean();\n\n\t$add['supplemental'] = array( 'newcat_parent' => $sup );\n\n\t$x = new WP_Ajax_Response( $add );\n\t$x->send();\n}\n\n/**\n * Ajax handler for deleting a comment.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_delete_comment() {\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tif ( !$comment = get_comment( $id ) )\n\t\twp_die( time() );\n\tif ( ! current_user_can( 'edit_comment', $comment->comment_ID ) )\n\t\twp_die( -1 );\n\n\tcheck_ajax_referer( \"delete-comment_$id\" );\n\t$status = wp_get_comment_status( $comment );\n\n\t$delta = -1;\n\tif ( isset($_POST['trash']) && 1 == $_POST['trash'] ) {\n\t\tif ( 'trash' == $status )\n\t\t\twp_die( time() );\n\t\t$r = wp_trash_comment( $comment );\n\t} elseif ( isset($_POST['untrash']) && 1 == $_POST['untrash'] ) {\n\t\tif ( 'trash' != $status )\n\t\t\twp_die( time() );\n\t\t$r = wp_untrash_comment( $comment );\n\t\tif ( ! isset( $_POST['comment_status'] ) || $_POST['comment_status'] != 'trash' ) // undo trash, not in trash\n\t\t\t$delta = 1;\n\t} elseif ( isset($_POST['spam']) && 1 == $_POST['spam'] ) {\n\t\tif ( 'spam' == $status )\n\t\t\twp_die( time() );\n\t\t$r = wp_spam_comment( $comment );\n\t} elseif ( isset($_POST['unspam']) && 1 == $_POST['unspam'] ) {\n\t\tif ( 'spam' != $status )\n\t\t\twp_die( time() );\n\t\t$r = wp_unspam_comment( $comment );\n\t\tif ( ! isset( $_POST['comment_status'] ) || $_POST['comment_status'] != 'spam' ) // undo spam, not in spam\n\t\t\t$delta = 1;\n\t} elseif ( isset($_POST['delete']) && 1 == $_POST['delete'] ) {\n\t\t$r = wp_delete_comment( $comment );\n\t} else {\n\t\twp_die( -1 );\n\t}\n\n\tif ( $r ) // Decide if we need to send back '1' or a more complicated response including page links and comment counts\n\t\t_wp_ajax_delete_comment_response( $comment->comment_ID, $delta );\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler for deleting a tag.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_delete_tag() {\n\t$tag_id = (int) $_POST['tag_ID'];\n\tcheck_ajax_referer( \"delete-tag_$tag_id\" );\n\n\t$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : 'post_tag';\n\t$tax = get_taxonomy($taxonomy);\n\n\tif ( !current_user_can( $tax->cap->delete_terms ) )\n\t\twp_die( -1 );\n\n\t$tag = get_term( $tag_id, $taxonomy );\n\tif ( !$tag || is_wp_error( $tag ) )\n\t\twp_die( 1 );\n\n\tif ( wp_delete_term($tag_id, $taxonomy))\n\t\twp_die( 1 );\n\telse\n\t\twp_die( 0 );\n}\n\n/**\n * Ajax handler for deleting a link.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_delete_link() {\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tcheck_ajax_referer( \"delete-bookmark_$id\" );\n\tif ( !current_user_can( 'manage_links' ) )\n\t\twp_die( -1 );\n\n\t$link = get_bookmark( $id );\n\tif ( !$link || is_wp_error( $link ) )\n\t\twp_die( 1 );\n\n\tif ( wp_delete_link( $id ) )\n\t\twp_die( 1 );\n\telse\n\t\twp_die( 0 );\n}\n\n/**\n * Ajax handler for deleting meta.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_delete_meta() {\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tcheck_ajax_referer( \"delete-meta_$id\" );\n\tif ( !$meta = get_metadata_by_mid( 'post', $id ) )\n\t\twp_die( 1 );\n\n\tif ( is_protected_meta( $meta->meta_key, 'post' ) || ! current_user_can( 'delete_post_meta',  $meta->post_id, $meta->meta_key ) )\n\t\twp_die( -1 );\n\tif ( delete_meta( $meta->meta_id ) )\n\t\twp_die( 1 );\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler for deleting a post.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_delete_post( $action ) {\n\tif ( empty( $action ) )\n\t\t$action = 'delete-post';\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tcheck_ajax_referer( \"{$action}_$id\" );\n\tif ( !current_user_can( 'delete_post', $id ) )\n\t\twp_die( -1 );\n\n\tif ( !get_post( $id ) )\n\t\twp_die( 1 );\n\n\tif ( wp_delete_post( $id ) )\n\t\twp_die( 1 );\n\telse\n\t\twp_die( 0 );\n}\n\n/**\n * Ajax handler for sending a post to the trash.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_trash_post( $action ) {\n\tif ( empty( $action ) )\n\t\t$action = 'trash-post';\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tcheck_ajax_referer( \"{$action}_$id\" );\n\tif ( !current_user_can( 'delete_post', $id ) )\n\t\twp_die( -1 );\n\n\tif ( !get_post( $id ) )\n\t\twp_die( 1 );\n\n\tif ( 'trash-post' == $action )\n\t\t$done = wp_trash_post( $id );\n\telse\n\t\t$done = wp_untrash_post( $id );\n\n\tif ( $done )\n\t\twp_die( 1 );\n\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler to restore a post from the trash.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_untrash_post( $action ) {\n\tif ( empty( $action ) )\n\t\t$action = 'untrash-post';\n\twp_ajax_trash_post( $action );\n}\n\n/**\n * @since 3.1.0\n *\n * @param string $action\n */\nfunction wp_ajax_delete_page( $action ) {\n\tif ( empty( $action ) )\n\t\t$action = 'delete-page';\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tcheck_ajax_referer( \"{$action}_$id\" );\n\tif ( !current_user_can( 'delete_page', $id ) )\n\t\twp_die( -1 );\n\n\tif ( ! get_post( $id ) )\n\t\twp_die( 1 );\n\n\tif ( wp_delete_post( $id ) )\n\t\twp_die( 1 );\n\telse\n\t\twp_die( 0 );\n}\n\n/**\n * Ajax handler to dim a comment.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_dim_comment() {\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tif ( !$comment = get_comment( $id ) ) {\n\t\t$x = new WP_Ajax_Response( array(\n\t\t\t'what' => 'comment',\n\t\t\t'id' => new WP_Error('invalid_comment', sprintf(__('Comment %d does not exist'), $id))\n\t\t) );\n\t\t$x->send();\n\t}\n\n\tif ( ! current_user_can( 'edit_comment', $comment->comment_ID ) && ! current_user_can( 'moderate_comments' ) )\n\t\twp_die( -1 );\n\n\t$current = wp_get_comment_status( $comment );\n\tif ( isset( $_POST['new'] ) && $_POST['new'] == $current )\n\t\twp_die( time() );\n\n\tcheck_ajax_referer( \"approve-comment_$id\" );\n\tif ( in_array( $current, array( 'unapproved', 'spam' ) ) ) {\n\t\t$result = wp_set_comment_status( $comment, 'approve', true );\n\t} else {\n\t\t$result = wp_set_comment_status( $comment, 'hold', true );\n\t}\n\n\tif ( is_wp_error($result) ) {\n\t\t$x = new WP_Ajax_Response( array(\n\t\t\t'what' => 'comment',\n\t\t\t'id' => $result\n\t\t) );\n\t\t$x->send();\n\t}\n\n\t// Decide if we need to send back '1' or a more complicated response including page links and comment counts\n\t_wp_ajax_delete_comment_response( $comment->comment_ID );\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler for deleting a link category.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_add_link_category( $action ) {\n\tif ( empty( $action ) )\n\t\t$action = 'add-link-category';\n\tcheck_ajax_referer( $action );\n\tif ( !current_user_can( 'manage_categories' ) )\n\t\twp_die( -1 );\n\t$names = explode(',', wp_unslash( $_POST['newcat'] ) );\n\t$x = new WP_Ajax_Response();\n\tforeach ( $names as $cat_name ) {\n\t\t$cat_name = trim($cat_name);\n\t\t$slug = sanitize_title($cat_name);\n\t\tif ( '' === $slug )\n\t\t\tcontinue;\n\t\tif ( !$cat_id = term_exists( $cat_name, 'link_category' ) )\n\t\t\t$cat_id = wp_insert_term( $cat_name, 'link_category' );\n\t\tif ( is_wp_error( $cat_id ) ) {\n\t\t\tcontinue;\n\t\t} elseif ( is_array( $cat_id ) ) {\n\t\t\t$cat_id = $cat_id['term_id'];\n\t\t}\n\t\t$cat_name = esc_html( $cat_name );\n\t\t$x->add( array(\n\t\t\t'what' => 'link-category',\n\t\t\t'id' => $cat_id,\n\t\t\t'data' => \"<li id='link-category-$cat_id'><label for='in-link-category-$cat_id' class='selectit'><input value='\" . esc_attr($cat_id) . \"' type='checkbox' checked='checked' name='link_category[]' id='in-link-category-$cat_id'/> $cat_name</label></li>\",\n\t\t\t'position' => -1\n\t\t) );\n\t}\n\t$x->send();\n}\n\n/**\n * Ajax handler to add a tag.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n */\nfunction wp_ajax_add_tag() {\n\tglobal $wp_list_table;\n\n\tcheck_ajax_referer( 'add-tag', '_wpnonce_add-tag' );\n\t$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : 'post_tag';\n\t$tax = get_taxonomy($taxonomy);\n\n\tif ( !current_user_can( $tax->cap->edit_terms ) )\n\t\twp_die( -1 );\n\n\t$x = new WP_Ajax_Response();\n\n\t$tag = wp_insert_term($_POST['tag-name'], $taxonomy, $_POST );\n\n\tif ( !$tag || is_wp_error($tag) || (!$tag = get_term( $tag['term_id'], $taxonomy )) ) {\n\t\t$message = __('An error has occurred. Please reload the page and try again.');\n\t\tif ( is_wp_error($tag) && $tag->get_error_message() )\n\t\t\t$message = $tag->get_error_message();\n\n\t\t$x->add( array(\n\t\t\t'what' => 'taxonomy',\n\t\t\t'data' => new WP_Error('error', $message )\n\t\t) );\n\t\t$x->send();\n\t}\n\n\t$wp_list_table = _get_list_table( 'WP_Terms_List_Table', array( 'screen' => $_POST['screen'] ) );\n\n\t$level = 0;\n\tif ( is_taxonomy_hierarchical($taxonomy) ) {\n\t\t$level = count( get_ancestors( $tag->term_id, $taxonomy, 'taxonomy' ) );\n\t\tob_start();\n\t\t$wp_list_table->single_row( $tag, $level );\n\t\t$noparents = ob_get_clean();\n\t}\n\n\tob_start();\n\t$wp_list_table->single_row( $tag );\n\t$parents = ob_get_clean();\n\n\t$x->add( array(\n\t\t'what' => 'taxonomy',\n\t\t'supplemental' => compact('parents', 'noparents')\n\t) );\n\t$x->add( array(\n\t\t'what' => 'term',\n\t\t'position' => $level,\n\t\t'supplemental' => (array) $tag\n\t) );\n\t$x->send();\n}\n\n/**\n * Ajax handler for getting a tagcloud.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_get_tagcloud() {\n\tif ( ! isset( $_POST['tax'] ) ) {\n\t\twp_die( 0 );\n\t}\n\n\t$taxonomy = sanitize_key( $_POST['tax'] );\n\t$tax = get_taxonomy( $taxonomy );\n\tif ( ! $tax ) {\n\t\twp_die( 0 );\n\t}\n\n\tif ( ! current_user_can( $tax->cap->assign_terms ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$tags = get_terms( $taxonomy, array( 'number' => 45, 'orderby' => 'count', 'order' => 'DESC' ) );\n\n\tif ( empty( $tags ) )\n\t\twp_die( $tax->labels->not_found );\n\n\tif ( is_wp_error( $tags ) )\n\t\twp_die( $tags->get_error_message() );\n\n\tforeach ( $tags as $key => $tag ) {\n\t\t$tags[ $key ]->link = '#';\n\t\t$tags[ $key ]->id = $tag->term_id;\n\t}\n\n\t// We need raw tag names here, so don't filter the output\n\t$return = wp_generate_tag_cloud( $tags, array('filter' => 0) );\n\n\tif ( empty($return) )\n\t\twp_die( 0 );\n\n\techo $return;\n\n\twp_die();\n}\n\n/**\n * Ajax handler for getting comments.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n * @global int           $post_id\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_get_comments( $action ) {\n\tglobal $wp_list_table, $post_id;\n\tif ( empty( $action ) )\n\t\t$action = 'get-comments';\n\n\tcheck_ajax_referer( $action );\n\n\tif ( empty( $post_id ) && ! empty( $_REQUEST['p'] ) ) {\n\t\t$id = absint( $_REQUEST['p'] );\n\t\tif ( ! empty( $id ) )\n\t\t\t$post_id = $id;\n\t}\n\n\tif ( empty( $post_id ) )\n\t\twp_die( -1 );\n\n\t$wp_list_table = _get_list_table( 'WP_Post_Comments_List_Table', array( 'screen' => 'edit-comments' ) );\n\n\tif ( ! current_user_can( 'edit_post', $post_id ) )\n\t\twp_die( -1 );\n\n\t$wp_list_table->prepare_items();\n\n\tif ( !$wp_list_table->has_items() )\n\t\twp_die( 1 );\n\n\t$x = new WP_Ajax_Response();\n\tob_start();\n\tforeach ( $wp_list_table->items as $comment ) {\n\t\tif ( ! current_user_can( 'edit_comment', $comment->comment_ID ) )\n\t\t\tcontinue;\n\t\tget_comment( $comment );\n\t\t$wp_list_table->single_row( $comment );\n\t}\n\t$comment_list_item = ob_get_clean();\n\n\t$x->add( array(\n\t\t'what' => 'comments',\n\t\t'data' => $comment_list_item\n\t) );\n\t$x->send();\n}\n\n/**\n * Ajax handler for replying to a comment.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_replyto_comment( $action ) {\n\tglobal $wp_list_table;\n\tif ( empty( $action ) )\n\t\t$action = 'replyto-comment';\n\n\tcheck_ajax_referer( $action, '_ajax_nonce-replyto-comment' );\n\n\t$comment_post_ID = (int) $_POST['comment_post_ID'];\n\t$post = get_post( $comment_post_ID );\n\tif ( ! $post )\n\t\twp_die( -1 );\n\n\tif ( !current_user_can( 'edit_post', $comment_post_ID ) )\n\t\twp_die( -1 );\n\n\tif ( empty( $post->post_status ) )\n\t\twp_die( 1 );\n\telseif ( in_array($post->post_status, array('draft', 'pending', 'trash') ) )\n\t\twp_die( __('ERROR: you are replying to a comment on a draft post.') );\n\n\t$user = wp_get_current_user();\n\tif ( $user->exists() ) {\n\t\t$user_ID = $user->ID;\n\t\t$comment_author       = wp_slash( $user->display_name );\n\t\t$comment_author_email = wp_slash( $user->user_email );\n\t\t$comment_author_url   = wp_slash( $user->user_url );\n\t\t$comment_content      = trim( $_POST['content'] );\n\t\t$comment_type         = isset( $_POST['comment_type'] ) ? trim( $_POST['comment_type'] ) : '';\n\t\tif ( current_user_can( 'unfiltered_html' ) ) {\n\t\t\tif ( ! isset( $_POST['_wp_unfiltered_html_comment'] ) )\n\t\t\t\t$_POST['_wp_unfiltered_html_comment'] = '';\n\n\t\t\tif ( wp_create_nonce( 'unfiltered-html-comment' ) != $_POST['_wp_unfiltered_html_comment'] ) {\n\t\t\t\tkses_remove_filters(); // start with a clean slate\n\t\t\t\tkses_init_filters(); // set up the filters\n\t\t\t}\n\t\t}\n\t} else {\n\t\twp_die( __( 'Sorry, you must be logged in to reply to a comment.' ) );\n\t}\n\n\tif ( '' == $comment_content )\n\t\twp_die( __( 'ERROR: please type a comment.' ) );\n\n\t$comment_parent = 0;\n\tif ( isset( $_POST['comment_ID'] ) )\n\t\t$comment_parent = absint( $_POST['comment_ID'] );\n\t$comment_auto_approved = false;\n\t$commentdata = compact('comment_post_ID', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_content', 'comment_type', 'comment_parent', 'user_ID');\n\n\t// Automatically approve parent comment.\n\tif ( !empty($_POST['approve_parent']) ) {\n\t\t$parent = get_comment( $comment_parent );\n\n\t\tif ( $parent && $parent->comment_approved === '0' && $parent->comment_post_ID == $comment_post_ID ) {\n\t\t\tif ( ! current_user_can( 'edit_comment', $parent->comment_ID ) ) {\n\t\t\t\twp_die( -1 );\n\t\t\t}\n\n\t\t\tif ( wp_set_comment_status( $parent, 'approve' ) )\n\t\t\t\t$comment_auto_approved = true;\n\t\t}\n\t}\n\n\t$comment_id = wp_new_comment( $commentdata );\n\t$comment = get_comment($comment_id);\n\tif ( ! $comment ) wp_die( 1 );\n\n\t$position = ( isset($_POST['position']) && (int) $_POST['position'] ) ? (int) $_POST['position'] : '-1';\n\n\tob_start();\n\tif ( isset( $_REQUEST['mode'] ) && 'dashboard' == $_REQUEST['mode'] ) {\n\t\trequire_once( ABSPATH . 'wp-admin/includes/dashboard.php' );\n\t\t_wp_dashboard_recent_comments_row( $comment );\n\t} else {\n\t\tif ( isset( $_REQUEST['mode'] ) && 'single' == $_REQUEST['mode'] ) {\n\t\t\t$wp_list_table = _get_list_table('WP_Post_Comments_List_Table', array( 'screen' => 'edit-comments' ) );\n\t\t} else {\n\t\t\t$wp_list_table = _get_list_table('WP_Comments_List_Table', array( 'screen' => 'edit-comments' ) );\n\t\t}\n\t\t$wp_list_table->single_row( $comment );\n\t}\n\t$comment_list_item = ob_get_clean();\n\n\t$response =  array(\n\t\t'what' => 'comment',\n\t\t'id' => $comment->comment_ID,\n\t\t'data' => $comment_list_item,\n\t\t'position' => $position\n\t);\n\n\t$counts = wp_count_comments();\n\t$response['supplemental'] = array(\n\t\t'in_moderation' => $counts->moderated,\n\t\t'i18n_comments_text' => sprintf(\n\t\t\t_n( '%s Comment', '%s Comments', $counts->approved ),\n\t\t\tnumber_format_i18n( $counts->approved )\n\t\t),\n\t\t'i18n_moderation_text' => sprintf(\n\t\t\t_nx( '%s in moderation', '%s in moderation', $counts->moderated, 'comments' ),\n\t\t\tnumber_format_i18n( $counts->moderated )\n\t\t)\n\t);\n\n\tif ( $comment_auto_approved ) {\n\t\t$response['supplemental']['parent_approved'] = $parent->comment_ID;\n\t\t$response['supplemental']['parent_post_id'] = $parent->comment_post_ID;\n\t}\n\n\t$x = new WP_Ajax_Response();\n\t$x->add( $response );\n\t$x->send();\n}\n\n/**\n * Ajax handler for editing a comment.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n */\nfunction wp_ajax_edit_comment() {\n\tglobal $wp_list_table;\n\n\tcheck_ajax_referer( 'replyto-comment', '_ajax_nonce-replyto-comment' );\n\n\t$comment_id = (int) $_POST['comment_ID'];\n\tif ( ! current_user_can( 'edit_comment', $comment_id ) )\n\t\twp_die( -1 );\n\n\tif ( '' == $_POST['content'] )\n\t\twp_die( __( 'ERROR: please type a comment.' ) );\n\n\tif ( isset( $_POST['status'] ) )\n\t\t$_POST['comment_status'] = $_POST['status'];\n\tedit_comment();\n\n\t$position = ( isset($_POST['position']) && (int) $_POST['position']) ? (int) $_POST['position'] : '-1';\n\t$checkbox = ( isset($_POST['checkbox']) && true == $_POST['checkbox'] ) ? 1 : 0;\n\t$wp_list_table = _get_list_table( $checkbox ? 'WP_Comments_List_Table' : 'WP_Post_Comments_List_Table', array( 'screen' => 'edit-comments' ) );\n\n\t$comment = get_comment( $comment_id );\n\tif ( empty( $comment->comment_ID ) )\n\t\twp_die( -1 );\n\n\tob_start();\n\t$wp_list_table->single_row( $comment );\n\t$comment_list_item = ob_get_clean();\n\n\t$x = new WP_Ajax_Response();\n\n\t$x->add( array(\n\t\t'what' => 'edit_comment',\n\t\t'id' => $comment->comment_ID,\n\t\t'data' => $comment_list_item,\n\t\t'position' => $position\n\t));\n\n\t$x->send();\n}\n\n/**\n * Ajax handler for adding a menu item.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_add_menu_item() {\n\tcheck_ajax_referer( 'add-menu_item', 'menu-settings-column-nonce' );\n\n\tif ( ! current_user_can( 'edit_theme_options' ) )\n\t\twp_die( -1 );\n\n\trequire_once ABSPATH . 'wp-admin/includes/nav-menu.php';\n\n\t// For performance reasons, we omit some object properties from the checklist.\n\t// The following is a hacky way to restore them when adding non-custom items.\n\n\t$menu_items_data = array();\n\tforeach ( (array) $_POST['menu-item'] as $menu_item_data ) {\n\t\tif (\n\t\t\t! empty( $menu_item_data['menu-item-type'] ) &&\n\t\t\t'custom' != $menu_item_data['menu-item-type'] &&\n\t\t\t! empty( $menu_item_data['menu-item-object-id'] )\n\t\t) {\n\t\t\tswitch( $menu_item_data['menu-item-type'] ) {\n\t\t\t\tcase 'post_type' :\n\t\t\t\t\t$_object = get_post( $menu_item_data['menu-item-object-id'] );\n\t\t\t\tbreak;\n\n\t\t\t\tcase 'post_type_archive' :\n\t\t\t\t\t$_object = get_post_type_object( $menu_item_data['menu-item-object'] );\n\t\t\t\tbreak;\n\n\t\t\t\tcase 'taxonomy' :\n\t\t\t\t\t$_object = get_term( $menu_item_data['menu-item-object-id'], $menu_item_data['menu-item-object'] );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$_menu_items = array_map( 'wp_setup_nav_menu_item', array( $_object ) );\n\t\t\t$_menu_item = reset( $_menu_items );\n\n\t\t\t// Restore the missing menu item properties\n\t\t\t$menu_item_data['menu-item-description'] = $_menu_item->description;\n\t\t}\n\n\t\t$menu_items_data[] = $menu_item_data;\n\t}\n\n\t$item_ids = wp_save_nav_menu_items( 0, $menu_items_data );\n\tif ( is_wp_error( $item_ids ) )\n\t\twp_die( 0 );\n\n\t$menu_items = array();\n\n\tforeach ( (array) $item_ids as $menu_item_id ) {\n\t\t$menu_obj = get_post( $menu_item_id );\n\t\tif ( ! empty( $menu_obj->ID ) ) {\n\t\t\t$menu_obj = wp_setup_nav_menu_item( $menu_obj );\n\t\t\t$menu_obj->label = $menu_obj->title; // don't show \"(pending)\" in ajax-added items\n\t\t\t$menu_items[] = $menu_obj;\n\t\t}\n\t}\n\n\t/** This filter is documented in wp-admin/includes/nav-menu.php */\n\t$walker_class_name = apply_filters( 'wp_edit_nav_menu_walker', 'Walker_Nav_Menu_Edit', $_POST['menu'] );\n\n\tif ( ! class_exists( $walker_class_name ) )\n\t\twp_die( 0 );\n\n\tif ( ! empty( $menu_items ) ) {\n\t\t$args = array(\n\t\t\t'after' => '',\n\t\t\t'before' => '',\n\t\t\t'link_after' => '',\n\t\t\t'link_before' => '',\n\t\t\t'walker' => new $walker_class_name,\n\t\t);\n\t\techo walk_nav_menu_tree( $menu_items, 0, (object) $args );\n\t}\n\twp_die();\n}\n\n/**\n * Ajax handler for adding meta.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_add_meta() {\n\tcheck_ajax_referer( 'add-meta', '_ajax_nonce-add-meta' );\n\t$c = 0;\n\t$pid = (int) $_POST['post_id'];\n\t$post = get_post( $pid );\n\n\tif ( isset($_POST['metakeyselect']) || isset($_POST['metakeyinput']) ) {\n\t\tif ( !current_user_can( 'edit_post', $pid ) )\n\t\t\twp_die( -1 );\n\t\tif ( isset($_POST['metakeyselect']) && '#NONE#' == $_POST['metakeyselect'] && empty($_POST['metakeyinput']) )\n\t\t\twp_die( 1 );\n\n\t\t// If the post is an autodraft, save the post as a draft and then attempt to save the meta.\n\t\tif ( $post->post_status == 'auto-draft' ) {\n\t\t\t$post_data = array();\n\t\t\t$post_data['action'] = 'draft'; // Warning fix\n\t\t\t$post_data['post_ID'] = $pid;\n\t\t\t$post_data['post_type'] = $post->post_type;\n\t\t\t$post_data['post_status'] = 'draft';\n\t\t\t$now = current_time('timestamp', 1);\n\t\t\t$post_data['post_title'] = sprintf( __( 'Draft created on %1$s at %2$s' ), date( __( 'F j, Y' ), $now ), date( __( 'g:i a' ), $now ) );\n\n\t\t\t$pid = edit_post( $post_data );\n\t\t\tif ( $pid ) {\n\t\t\t\tif ( is_wp_error( $pid ) ) {\n\t\t\t\t\t$x = new WP_Ajax_Response( array(\n\t\t\t\t\t\t'what' => 'meta',\n\t\t\t\t\t\t'data' => $pid\n\t\t\t\t\t) );\n\t\t\t\t\t$x->send();\n\t\t\t\t}\n\n\t\t\t\tif ( !$mid = add_meta( $pid ) )\n\t\t\t\t\twp_die( __( 'Please provide a custom field value.' ) );\n\t\t\t} else {\n\t\t\t\twp_die( 0 );\n\t\t\t}\n\t\t} elseif ( ! $mid = add_meta( $pid ) ) {\n\t\t\twp_die( __( 'Please provide a custom field value.' ) );\n\t\t}\n\n\t\t$meta = get_metadata_by_mid( 'post', $mid );\n\t\t$pid = (int) $meta->post_id;\n\t\t$meta = get_object_vars( $meta );\n\t\t$x = new WP_Ajax_Response( array(\n\t\t\t'what' => 'meta',\n\t\t\t'id' => $mid,\n\t\t\t'data' => _list_meta_row( $meta, $c ),\n\t\t\t'position' => 1,\n\t\t\t'supplemental' => array('postid' => $pid)\n\t\t) );\n\t} else { // Update?\n\t\t$mid = (int) key( $_POST['meta'] );\n\t\t$key = wp_unslash( $_POST['meta'][$mid]['key'] );\n\t\t$value = wp_unslash( $_POST['meta'][$mid]['value'] );\n\t\tif ( '' == trim($key) )\n\t\t\twp_die( __( 'Please provide a custom field name.' ) );\n\t\tif ( '' == trim($value) )\n\t\t\twp_die( __( 'Please provide a custom field value.' ) );\n\t\tif ( ! $meta = get_metadata_by_mid( 'post', $mid ) )\n\t\t\twp_die( 0 ); // if meta doesn't exist\n\t\tif ( is_protected_meta( $meta->meta_key, 'post' ) || is_protected_meta( $key, 'post' ) ||\n\t\t\t! current_user_can( 'edit_post_meta', $meta->post_id, $meta->meta_key ) ||\n\t\t\t! current_user_can( 'edit_post_meta', $meta->post_id, $key ) )\n\t\t\twp_die( -1 );\n\t\tif ( $meta->meta_value != $value || $meta->meta_key != $key ) {\n\t\t\tif ( !$u = update_metadata_by_mid( 'post', $mid, $value, $key ) )\n\t\t\t\twp_die( 0 ); // We know meta exists; we also know it's unchanged (or DB error, in which case there are bigger problems).\n\t\t}\n\n\t\t$x = new WP_Ajax_Response( array(\n\t\t\t'what' => 'meta',\n\t\t\t'id' => $mid, 'old_id' => $mid,\n\t\t\t'data' => _list_meta_row( array(\n\t\t\t\t'meta_key' => $key,\n\t\t\t\t'meta_value' => $value,\n\t\t\t\t'meta_id' => $mid\n\t\t\t), $c ),\n\t\t\t'position' => 0,\n\t\t\t'supplemental' => array('postid' => $meta->post_id)\n\t\t) );\n\t}\n\t$x->send();\n}\n\n/**\n * Ajax handler for adding a user.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_add_user( $action ) {\n\tglobal $wp_list_table;\n\tif ( empty( $action ) )\n\t\t$action = 'add-user';\n\n\tcheck_ajax_referer( $action );\n\tif ( ! current_user_can('create_users') )\n\t\twp_die( -1 );\n\tif ( ! $user_id = edit_user() ) {\n\t\twp_die( 0 );\n\t} elseif ( is_wp_error( $user_id ) ) {\n\t\t$x = new WP_Ajax_Response( array(\n\t\t\t'what' => 'user',\n\t\t\t'id' => $user_id\n\t\t) );\n\t\t$x->send();\n\t}\n\t$user_object = get_userdata( $user_id );\n\n\t$wp_list_table = _get_list_table('WP_Users_List_Table');\n\n\t$role = current( $user_object->roles );\n\n\t$x = new WP_Ajax_Response( array(\n\t\t'what' => 'user',\n\t\t'id' => $user_id,\n\t\t'data' => $wp_list_table->single_row( $user_object, '', $role ),\n\t\t'supplemental' => array(\n\t\t\t'show-link' => sprintf(\n\t\t\t\t/* translators: %s: the new user */\n\t\t\t\t__( 'User %s added' ),\n\t\t\t\t'<a href=\"#user-' . $user_id . '\">' . $user_object->user_login . '</a>'\n\t\t\t),\n\t\t\t'role' => $role,\n\t\t)\n\t) );\n\t$x->send();\n}\n\n/**\n * Ajax handler for closed post boxes.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_closed_postboxes() {\n\tcheck_ajax_referer( 'closedpostboxes', 'closedpostboxesnonce' );\n\t$closed = isset( $_POST['closed'] ) ? explode( ',', $_POST['closed']) : array();\n\t$closed = array_filter($closed);\n\n\t$hidden = isset( $_POST['hidden'] ) ? explode( ',', $_POST['hidden']) : array();\n\t$hidden = array_filter($hidden);\n\n\t$page = isset( $_POST['page'] ) ? $_POST['page'] : '';\n\n\tif ( $page != sanitize_key( $page ) )\n\t\twp_die( 0 );\n\n\tif ( ! $user = wp_get_current_user() )\n\t\twp_die( -1 );\n\n\tif ( is_array($closed) )\n\t\tupdate_user_option($user->ID, \"closedpostboxes_$page\", $closed, true);\n\n\tif ( is_array($hidden) ) {\n\t\t$hidden = array_diff( $hidden, array('submitdiv', 'linksubmitdiv', 'manage-menu', 'create-menu') ); // postboxes that are always shown\n\t\tupdate_user_option($user->ID, \"metaboxhidden_$page\", $hidden, true);\n\t}\n\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for hidden columns.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_hidden_columns() {\n\tcheck_ajax_referer( 'screen-options-nonce', 'screenoptionnonce' );\n\t$page = isset( $_POST['page'] ) ? $_POST['page'] : '';\n\n\tif ( $page != sanitize_key( $page ) )\n\t\twp_die( 0 );\n\n\tif ( ! $user = wp_get_current_user() )\n\t\twp_die( -1 );\n\n\t$hidden = ! empty( $_POST['hidden'] ) ? explode( ',', $_POST['hidden'] ) : array();\n\tupdate_user_option( $user->ID, \"manage{$page}columnshidden\", $hidden, true );\n\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for updating whether to display the welcome panel.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_update_welcome_panel() {\n\tcheck_ajax_referer( 'welcome-panel-nonce', 'welcomepanelnonce' );\n\n\tif ( ! current_user_can( 'edit_theme_options' ) )\n\t\twp_die( -1 );\n\n\tupdate_user_meta( get_current_user_id(), 'show_welcome_panel', empty( $_POST['visible'] ) ? 0 : 1 );\n\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for retrieving menu meta boxes.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_menu_get_metabox() {\n\tif ( ! current_user_can( 'edit_theme_options' ) )\n\t\twp_die( -1 );\n\n\trequire_once ABSPATH . 'wp-admin/includes/nav-menu.php';\n\n\tif ( isset( $_POST['item-type'] ) && 'post_type' == $_POST['item-type'] ) {\n\t\t$type = 'posttype';\n\t\t$callback = 'wp_nav_menu_item_post_type_meta_box';\n\t\t$items = (array) get_post_types( array( 'show_in_nav_menus' => true ), 'object' );\n\t} elseif ( isset( $_POST['item-type'] ) && 'taxonomy' == $_POST['item-type'] ) {\n\t\t$type = 'taxonomy';\n\t\t$callback = 'wp_nav_menu_item_taxonomy_meta_box';\n\t\t$items = (array) get_taxonomies( array( 'show_ui' => true ), 'object' );\n\t}\n\n\tif ( ! empty( $_POST['item-object'] ) && isset( $items[$_POST['item-object']] ) ) {\n\t\t$menus_meta_box_object = $items[ $_POST['item-object'] ];\n\n\t\t/** This filter is documented in wp-admin/includes/nav-menu.php */\n\t\t$item = apply_filters( 'nav_menu_meta_box_object', $menus_meta_box_object );\n\t\tob_start();\n\t\tcall_user_func_array($callback, array(\n\t\t\tnull,\n\t\t\tarray(\n\t\t\t\t'id' => 'add-' . $item->name,\n\t\t\t\t'title' => $item->labels->name,\n\t\t\t\t'callback' => $callback,\n\t\t\t\t'args' => $item,\n\t\t\t)\n\t\t));\n\n\t\t$markup = ob_get_clean();\n\n\t\techo wp_json_encode(array(\n\t\t\t'replace-id' => $type . '-' . $item->name,\n\t\t\t'markup' => $markup,\n\t\t));\n\t}\n\n\twp_die();\n}\n\n/**\n * Ajax handler for internal linking.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_wp_link_ajax() {\n\tcheck_ajax_referer( 'internal-linking', '_ajax_linking_nonce' );\n\n\t$args = array();\n\n\tif ( isset( $_POST['search'] ) ) {\n\t\t$args['s'] = wp_unslash( $_POST['search'] );\n\t}\n\n\tif ( isset( $_POST['term'] ) ) {\n\t\t$args['s'] = wp_unslash( $_POST['term'] );\n\t}\n\n\t$args['pagenum'] = ! empty( $_POST['page'] ) ? absint( $_POST['page'] ) : 1;\n\n\trequire(ABSPATH . WPINC . '/class-wp-editor.php');\n\t$results = _WP_Editors::wp_link_query( $args );\n\n\tif ( ! isset( $results ) )\n\t\twp_die( 0 );\n\n\techo wp_json_encode( $results );\n\techo \"\\n\";\n\n\twp_die();\n}\n\n/**\n * Ajax handler for menu locations save.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_menu_locations_save() {\n\tif ( ! current_user_can( 'edit_theme_options' ) )\n\t\twp_die( -1 );\n\tcheck_ajax_referer( 'add-menu_item', 'menu-settings-column-nonce' );\n\tif ( ! isset( $_POST['menu-locations'] ) )\n\t\twp_die( 0 );\n\tset_theme_mod( 'nav_menu_locations', array_map( 'absint', $_POST['menu-locations'] ) );\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for saving the meta box order.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_meta_box_order() {\n\tcheck_ajax_referer( 'meta-box-order' );\n\t$order = isset( $_POST['order'] ) ? (array) $_POST['order'] : false;\n\t$page_columns = isset( $_POST['page_columns'] ) ? $_POST['page_columns'] : 'auto';\n\n\tif ( $page_columns != 'auto' )\n\t\t$page_columns = (int) $page_columns;\n\n\t$page = isset( $_POST['page'] ) ? $_POST['page'] : '';\n\n\tif ( $page != sanitize_key( $page ) )\n\t\twp_die( 0 );\n\n\tif ( ! $user = wp_get_current_user() )\n\t\twp_die( -1 );\n\n\tif ( $order )\n\t\tupdate_user_option($user->ID, \"meta-box-order_$page\", $order, true);\n\n\tif ( $page_columns )\n\t\tupdate_user_option($user->ID, \"screen_layout_$page\", $page_columns, true);\n\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for menu quick searching.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_menu_quick_search() {\n\tif ( ! current_user_can( 'edit_theme_options' ) )\n\t\twp_die( -1 );\n\n\trequire_once ABSPATH . 'wp-admin/includes/nav-menu.php';\n\n\t_wp_ajax_menu_quick_search( $_POST );\n\n\twp_die();\n}\n\n/**\n * Ajax handler to retrieve a permalink.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_get_permalink() {\n\tcheck_ajax_referer( 'getpermalink', 'getpermalinknonce' );\n\t$post_id = isset($_POST['post_id'])? intval($_POST['post_id']) : 0;\n\twp_die( get_preview_post_link( $post_id ) );\n}\n\n/**\n * Ajax handler to retrieve a sample permalink.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_sample_permalink() {\n\tcheck_ajax_referer( 'samplepermalink', 'samplepermalinknonce' );\n\t$post_id = isset($_POST['post_id'])? intval($_POST['post_id']) : 0;\n\t$title = isset($_POST['new_title'])? $_POST['new_title'] : '';\n\t$slug = isset($_POST['new_slug'])? $_POST['new_slug'] : null;\n\twp_die( get_sample_permalink_html( $post_id, $title, $slug ) );\n}\n\n/**\n * Ajax handler for Quick Edit saving a post from a list table.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n */\nfunction wp_ajax_inline_save() {\n\tglobal $wp_list_table, $mode;\n\n\tcheck_ajax_referer( 'inlineeditnonce', '_inline_edit' );\n\n\tif ( ! isset($_POST['post_ID']) || ! ( $post_ID = (int) $_POST['post_ID'] ) )\n\t\twp_die();\n\n\tif ( 'page' == $_POST['post_type'] ) {\n\t\tif ( ! current_user_can( 'edit_page', $post_ID ) )\n\t\t\twp_die( __( 'You are not allowed to edit this page.' ) );\n\t} else {\n\t\tif ( ! current_user_can( 'edit_post', $post_ID ) )\n\t\t\twp_die( __( 'You are not allowed to edit this post.' ) );\n\t}\n\n\tif ( $last = wp_check_post_lock( $post_ID ) ) {\n\t\t$last_user = get_userdata( $last );\n\t\t$last_user_name = $last_user ? $last_user->display_name : __( 'Someone' );\n\t\tprintf( $_POST['post_type'] == 'page' ? __( 'Saving is disabled: %s is currently editing this page.' ) : __( 'Saving is disabled: %s is currently editing this post.' ),\tesc_html( $last_user_name ) );\n\t\twp_die();\n\t}\n\n\t$data = &$_POST;\n\n\t$post = get_post( $post_ID, ARRAY_A );\n\n\t// Since it's coming from the database.\n\t$post = wp_slash($post);\n\n\t$data['content'] = $post['post_content'];\n\t$data['excerpt'] = $post['post_excerpt'];\n\n\t// Rename.\n\t$data['user_ID'] = get_current_user_id();\n\n\tif ( isset($data['post_parent']) )\n\t\t$data['parent_id'] = $data['post_parent'];\n\n\t// Status.\n\tif ( isset( $data['keep_private'] ) && 'private' == $data['keep_private'] ) {\n\t\t$data['visibility']  = 'private';\n\t\t$data['post_status'] = 'private';\n\t} else {\n\t\t$data['post_status'] = $data['_status'];\n\t}\n\n\tif ( empty($data['comment_status']) )\n\t\t$data['comment_status'] = 'closed';\n\tif ( empty($data['ping_status']) )\n\t\t$data['ping_status'] = 'closed';\n\n\t// Exclude terms from taxonomies that are not supposed to appear in Quick Edit.\n\tif ( ! empty( $data['tax_input'] ) ) {\n\t\tforeach ( $data['tax_input'] as $taxonomy => $terms ) {\n\t\t\t$tax_object = get_taxonomy( $taxonomy );\n\t\t\t/** This filter is documented in wp-admin/includes/class-wp-posts-list-table.php */\n\t\t\tif ( ! apply_filters( 'quick_edit_show_taxonomy', $tax_object->show_in_quick_edit, $taxonomy, $post['post_type'] ) ) {\n\t\t\t\tunset( $data['tax_input'][ $taxonomy ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Hack: wp_unique_post_slug() doesn't work for drafts, so we will fake that our post is published.\n\tif ( ! empty( $data['post_name'] ) && in_array( $post['post_status'], array( 'draft', 'pending' ) ) ) {\n\t\t$post['post_status'] = 'publish';\n\t\t$data['post_name'] = wp_unique_post_slug( $data['post_name'], $post['ID'], $post['post_status'], $post['post_type'], $post['post_parent'] );\n\t}\n\n\t// Update the post.\n\tedit_post();\n\n\t$wp_list_table = _get_list_table( 'WP_Posts_List_Table', array( 'screen' => $_POST['screen'] ) );\n\n\t$mode = $_POST['post_view'] === 'excerpt' ? 'excerpt' : 'list';\n\n\t$level = 0;\n\t$request_post = array( get_post( $_POST['post_ID'] ) );\n\t$parent = $request_post[0]->post_parent;\n\n\twhile ( $parent > 0 ) {\n\t\t$parent_post = get_post( $parent );\n\t\t$parent = $parent_post->post_parent;\n\t\t$level++;\n\t}\n\n\t$wp_list_table->display_rows( array( get_post( $_POST['post_ID'] ) ), $level );\n\n\twp_die();\n}\n\n/**\n * Ajax handler for quick edit saving for a term.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n */\nfunction wp_ajax_inline_save_tax() {\n\tglobal $wp_list_table;\n\n\tcheck_ajax_referer( 'taxinlineeditnonce', '_inline_edit' );\n\n\t$taxonomy = sanitize_key( $_POST['taxonomy'] );\n\t$tax = get_taxonomy( $taxonomy );\n\tif ( ! $tax )\n\t\twp_die( 0 );\n\n\tif ( ! current_user_can( $tax->cap->edit_terms ) )\n\t\twp_die( -1 );\n\n\t$wp_list_table = _get_list_table( 'WP_Terms_List_Table', array( 'screen' => 'edit-' . $taxonomy ) );\n\n\tif ( ! isset($_POST['tax_ID']) || ! ( $id = (int) $_POST['tax_ID'] ) )\n\t\twp_die( -1 );\n\n\t$tag = get_term( $id, $taxonomy );\n\t$_POST['description'] = $tag->description;\n\n\t$updated = wp_update_term($id, $taxonomy, $_POST);\n\tif ( $updated && !is_wp_error($updated) ) {\n\t\t$tag = get_term( $updated['term_id'], $taxonomy );\n\t\tif ( !$tag || is_wp_error( $tag ) ) {\n\t\t\tif ( is_wp_error($tag) && $tag->get_error_message() )\n\t\t\t\twp_die( $tag->get_error_message() );\n\t\t\twp_die( __( 'Item not updated.' ) );\n\t\t}\n\t} else {\n\t\tif ( is_wp_error($updated) && $updated->get_error_message() )\n\t\t\twp_die( $updated->get_error_message() );\n\t\twp_die( __( 'Item not updated.' ) );\n\t}\n\t$level = 0;\n\t$parent = $tag->parent;\n\twhile ( $parent > 0 ) {\n\t\t$parent_tag = get_term( $parent, $taxonomy );\n\t\t$parent = $parent_tag->parent;\n\t\t$level++;\n\t}\n\t$wp_list_table->single_row( $tag, $level );\n\twp_die();\n}\n\n/**\n * Ajax handler for querying posts for the Find Posts modal.\n *\n * @see window.findPosts\n *\n * @since 3.1.0\n */\nfunction wp_ajax_find_posts() {\n\tcheck_ajax_referer( 'find-posts' );\n\n\t$post_types = get_post_types( array( 'public' => true ), 'objects' );\n\tunset( $post_types['attachment'] );\n\n\t$s = wp_unslash( $_POST['ps'] );\n\t$args = array(\n\t\t'post_type' => array_keys( $post_types ),\n\t\t'post_status' => 'any',\n\t\t'posts_per_page' => 50,\n\t);\n\tif ( '' !== $s )\n\t\t$args['s'] = $s;\n\n\t$posts = get_posts( $args );\n\n\tif ( ! $posts ) {\n\t\twp_send_json_error( __( 'No items found.' ) );\n\t}\n\n\t$html = '<table class=\"widefat\"><thead><tr><th class=\"found-radio\"><br /></th><th>'.__('Title').'</th><th class=\"no-break\">'.__('Type').'</th><th class=\"no-break\">'.__('Date').'</th><th class=\"no-break\">'.__('Status').'</th></tr></thead><tbody>';\n\t$alt = '';\n\tforeach ( $posts as $post ) {\n\t\t$title = trim( $post->post_title ) ? $post->post_title : __( '(no title)' );\n\t\t$alt = ( 'alternate' == $alt ) ? '' : 'alternate';\n\n\t\tswitch ( $post->post_status ) {\n\t\t\tcase 'publish' :\n\t\t\tcase 'private' :\n\t\t\t\t$stat = __('Published');\n\t\t\t\tbreak;\n\t\t\tcase 'future' :\n\t\t\t\t$stat = __('Scheduled');\n\t\t\t\tbreak;\n\t\t\tcase 'pending' :\n\t\t\t\t$stat = __('Pending Review');\n\t\t\t\tbreak;\n\t\t\tcase 'draft' :\n\t\t\t\t$stat = __('Draft');\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif ( '0000-00-00 00:00:00' == $post->post_date ) {\n\t\t\t$time = '';\n\t\t} else {\n\t\t\t/* translators: date format in table columns, see http://php.net/date */\n\t\t\t$time = mysql2date(__('Y/m/d'), $post->post_date);\n\t\t}\n\n\t\t$html .= '<tr class=\"' . trim( 'found-posts ' . $alt ) . '\"><td class=\"found-radio\"><input type=\"radio\" id=\"found-'.$post->ID.'\" name=\"found_post_id\" value=\"' . esc_attr($post->ID) . '\"></td>';\n\t\t$html .= '<td><label for=\"found-'.$post->ID.'\">' . esc_html( $title ) . '</label></td><td class=\"no-break\">' . esc_html( $post_types[$post->post_type]->labels->singular_name ) . '</td><td class=\"no-break\">'.esc_html( $time ) . '</td><td class=\"no-break\">' . esc_html( $stat ). ' </td></tr>' . \"\\n\\n\";\n\t}\n\n\t$html .= '</tbody></table>';\n\n\twp_send_json_success( $html );\n}\n\n/**\n * Ajax handler for saving the widgets order.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_widgets_order() {\n\tcheck_ajax_referer( 'save-sidebar-widgets', 'savewidgets' );\n\n\tif ( !current_user_can('edit_theme_options') )\n\t\twp_die( -1 );\n\n\tunset( $_POST['savewidgets'], $_POST['action'] );\n\n\t// Save widgets order for all sidebars.\n\tif ( is_array($_POST['sidebars']) ) {\n\t\t$sidebars = array();\n\t\tforeach ( $_POST['sidebars'] as $key => $val ) {\n\t\t\t$sb = array();\n\t\t\tif ( !empty($val) ) {\n\t\t\t\t$val = explode(',', $val);\n\t\t\t\tforeach ( $val as $k => $v ) {\n\t\t\t\t\tif ( strpos($v, 'widget-') === false )\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t$sb[$k] = substr($v, strpos($v, '_') + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$sidebars[$key] = $sb;\n\t\t}\n\t\twp_set_sidebars_widgets($sidebars);\n\t\twp_die( 1 );\n\t}\n\n\twp_die( -1 );\n}\n\n/**\n * Ajax handler for saving a widget.\n *\n * @since 3.1.0\n *\n * @global array $wp_registered_widgets\n * @global array $wp_registered_widget_controls\n * @global array $wp_registered_widget_updates\n */\nfunction wp_ajax_save_widget() {\n\tglobal $wp_registered_widgets, $wp_registered_widget_controls, $wp_registered_widget_updates;\n\n\tcheck_ajax_referer( 'save-sidebar-widgets', 'savewidgets' );\n\n\tif ( !current_user_can('edit_theme_options') || !isset($_POST['id_base']) )\n\t\twp_die( -1 );\n\n\tunset( $_POST['savewidgets'], $_POST['action'] );\n\n\t/**\n\t * Fires early when editing the widgets displayed in sidebars.\n\t *\n\t * @since 2.8.0\n\t */\n\tdo_action( 'load-widgets.php' );\n\n\t/**\n\t * Fires early when editing the widgets displayed in sidebars.\n\t *\n\t * @since 2.8.0\n\t */\n\tdo_action( 'widgets.php' );\n\n\t/** This action is documented in wp-admin/widgets.php */\n\tdo_action( 'sidebar_admin_setup' );\n\n\t$id_base = $_POST['id_base'];\n\t$widget_id = $_POST['widget-id'];\n\t$sidebar_id = $_POST['sidebar'];\n\t$multi_number = !empty($_POST['multi_number']) ? (int) $_POST['multi_number'] : 0;\n\t$settings = isset($_POST['widget-' . $id_base]) && is_array($_POST['widget-' . $id_base]) ? $_POST['widget-' . $id_base] : false;\n\t$error = '<p>' . __('An error has occurred. Please reload the page and try again.') . '</p>';\n\n\t$sidebars = wp_get_sidebars_widgets();\n\t$sidebar = isset($sidebars[$sidebar_id]) ? $sidebars[$sidebar_id] : array();\n\n\t// Delete.\n\tif ( isset($_POST['delete_widget']) && $_POST['delete_widget'] ) {\n\n\t\tif ( !isset($wp_registered_widgets[$widget_id]) )\n\t\t\twp_die( $error );\n\n\t\t$sidebar = array_diff( $sidebar, array($widget_id) );\n\t\t$_POST = array('sidebar' => $sidebar_id, 'widget-' . $id_base => array(), 'the-widget-id' => $widget_id, 'delete_widget' => '1');\n\n\t\t/** This action is documented in wp-admin/widgets.php */\n\t\tdo_action( 'delete_widget', $widget_id, $sidebar_id, $id_base );\n\n\t} elseif ( $settings && preg_match( '/__i__|%i%/', key($settings) ) ) {\n\t\tif ( !$multi_number )\n\t\t\twp_die( $error );\n\n\t\t$_POST[ 'widget-' . $id_base ] = array( $multi_number => reset( $settings ) );\n\t\t$widget_id = $id_base . '-' . $multi_number;\n\t\t$sidebar[] = $widget_id;\n\t}\n\t$_POST['widget-id'] = $sidebar;\n\n\tforeach ( (array) $wp_registered_widget_updates as $name => $control ) {\n\n\t\tif ( $name == $id_base ) {\n\t\t\tif ( !is_callable( $control['callback'] ) )\n\t\t\t\tcontinue;\n\n\t\t\tob_start();\n\t\t\t\tcall_user_func_array( $control['callback'], $control['params'] );\n\t\t\tob_end_clean();\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif ( isset($_POST['delete_widget']) && $_POST['delete_widget'] ) {\n\t\t$sidebars[$sidebar_id] = $sidebar;\n\t\twp_set_sidebars_widgets($sidebars);\n\t\techo \"deleted:$widget_id\";\n\t\twp_die();\n\t}\n\n\tif ( !empty($_POST['add_new']) )\n\t\twp_die();\n\n\tif ( $form = $wp_registered_widget_controls[$widget_id] )\n\t\tcall_user_func_array( $form['callback'], $form['params'] );\n\n\twp_die();\n}\n\n/**\n * Ajax handler for saving a widget.\n *\n * @since 3.9.0\n *\n * @global WP_Customize_Manager $wp_customize\n */\nfunction wp_ajax_update_widget() {\n\tglobal $wp_customize;\n\t$wp_customize->widgets->wp_ajax_update_widget();\n}\n\n/**\n * Ajax handler for removing inactive widgets.\n *\n * @since 4.4.0\n */\nfunction wp_ajax_delete_inactive_widgets() {\n\tcheck_ajax_referer( 'remove-inactive-widgets', 'removeinactivewidgets' );\n\n\tif ( ! current_user_can( 'edit_theme_options' ) ) {\n\t\twp_die( -1 );\n\t}\n\n\tunset( $_POST['removeinactivewidgets'], $_POST['action'] );\n\n\tdo_action( 'load-widgets.php' );\n\tdo_action( 'widgets.php' );\n\tdo_action( 'sidebar_admin_setup' );\n\n\t$sidebars_widgets = wp_get_sidebars_widgets();\n\n\tforeach ( $sidebars_widgets['wp_inactive_widgets'] as $key => $widget_id ) {\n\t\t$pieces = explode( '-', $widget_id );\n\t\t$multi_number = array_pop( $pieces );\n\t\t$id_base = implode( '-', $pieces );\n\t\t$widget = get_option( 'widget_' . $id_base );\n\t\tunset( $widget[$multi_number] );\n\t\tupdate_option( 'widget_' . $id_base, $widget );\n\t\tunset( $sidebars_widgets['wp_inactive_widgets'][$key] );\n\t}\n\n\twp_set_sidebars_widgets( $sidebars_widgets );\n\n\twp_die();\n}\n\n/**\n * Ajax handler for uploading attachments\n *\n * @since 3.3.0\n */\nfunction wp_ajax_upload_attachment() {\n\tcheck_ajax_referer( 'media-form' );\n\t/*\n\t * This function does not use wp_send_json_success() / wp_send_json_error()\n\t * as the html4 Plupload handler requires a text/html content-type for older IE.\n\t * See https://core.trac.wordpress.org/ticket/31037\n\t */\n\n\tif ( ! current_user_can( 'upload_files' ) ) {\n\t\techo wp_json_encode( array(\n\t\t\t'success' => false,\n\t\t\t'data'    => array(\n\t\t\t\t'message'  => __( 'You do not have permission to upload files.' ),\n\t\t\t\t'filename' => $_FILES['async-upload']['name'],\n\t\t\t)\n\t\t) );\n\n\t\twp_die();\n\t}\n\n\tif ( isset( $_REQUEST['post_id'] ) ) {\n\t\t$post_id = $_REQUEST['post_id'];\n\t\tif ( ! current_user_can( 'edit_post', $post_id ) ) {\n\t\t\techo wp_json_encode( array(\n\t\t\t\t'success' => false,\n\t\t\t\t'data'    => array(\n\t\t\t\t\t'message'  => __( \"You don't have permission to attach files to this post.\" ),\n\t\t\t\t\t'filename' => $_FILES['async-upload']['name'],\n\t\t\t\t)\n\t\t\t) );\n\n\t\t\twp_die();\n\t\t}\n\t} else {\n\t\t$post_id = null;\n\t}\n\n\t$post_data = isset( $_REQUEST['post_data'] ) ? $_REQUEST['post_data'] : array();\n\n\t// If the context is custom header or background, make sure the uploaded file is an image.\n\tif ( isset( $post_data['context'] ) && in_array( $post_data['context'], array( 'custom-header', 'custom-background' ) ) ) {\n\t\t$wp_filetype = wp_check_filetype_and_ext( $_FILES['async-upload']['tmp_name'], $_FILES['async-upload']['name'] );\n\t\tif ( ! wp_match_mime_types( 'image', $wp_filetype['type'] ) ) {\n\t\t\techo wp_json_encode( array(\n\t\t\t\t'success' => false,\n\t\t\t\t'data'    => array(\n\t\t\t\t\t'message'  => __( 'The uploaded file is not a valid image. Please try again.' ),\n\t\t\t\t\t'filename' => $_FILES['async-upload']['name'],\n\t\t\t\t)\n\t\t\t) );\n\n\t\t\twp_die();\n\t\t}\n\t}\n\n\t$attachment_id = media_handle_upload( 'async-upload', $post_id, $post_data );\n\n\tif ( is_wp_error( $attachment_id ) ) {\n\t\techo wp_json_encode( array(\n\t\t\t'success' => false,\n\t\t\t'data'    => array(\n\t\t\t\t'message'  => $attachment_id->get_error_message(),\n\t\t\t\t'filename' => $_FILES['async-upload']['name'],\n\t\t\t)\n\t\t) );\n\n\t\twp_die();\n\t}\n\n\tif ( isset( $post_data['context'] ) && isset( $post_data['theme'] ) ) {\n\t\tif ( 'custom-background' === $post_data['context'] )\n\t\t\tupdate_post_meta( $attachment_id, '_wp_attachment_is_custom_background', $post_data['theme'] );\n\n\t\tif ( 'custom-header' === $post_data['context'] )\n\t\t\tupdate_post_meta( $attachment_id, '_wp_attachment_is_custom_header', $post_data['theme'] );\n\t}\n\n\tif ( ! $attachment = wp_prepare_attachment_for_js( $attachment_id ) )\n\t\twp_die();\n\n\techo wp_json_encode( array(\n\t\t'success' => true,\n\t\t'data'    => $attachment,\n\t) );\n\n\twp_die();\n}\n\n/**\n * Ajax handler for image editing.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_image_editor() {\n\t$attachment_id = intval($_POST['postid']);\n\tif ( empty($attachment_id) || !current_user_can('edit_post', $attachment_id) )\n\t\twp_die( -1 );\n\n\tcheck_ajax_referer( \"image_editor-$attachment_id\" );\n\tinclude_once( ABSPATH . 'wp-admin/includes/image-edit.php' );\n\n\t$msg = false;\n\tswitch ( $_POST['do'] ) {\n\t\tcase 'save' :\n\t\t\t$msg = wp_save_image($attachment_id);\n\t\t\t$msg = wp_json_encode($msg);\n\t\t\twp_die( $msg );\n\t\t\tbreak;\n\t\tcase 'scale' :\n\t\t\t$msg = wp_save_image($attachment_id);\n\t\t\tbreak;\n\t\tcase 'restore' :\n\t\t\t$msg = wp_restore_image($attachment_id);\n\t\t\tbreak;\n\t}\n\n\twp_image_editor($attachment_id, $msg);\n\twp_die();\n}\n\n/**\n * Ajax handler for setting the featured image.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_set_post_thumbnail() {\n\t$json = ! empty( $_REQUEST['json'] ); // New-style request\n\n\t$post_ID = intval( $_POST['post_id'] );\n\tif ( ! current_user_can( 'edit_post', $post_ID ) )\n\t\twp_die( -1 );\n\n\t$thumbnail_id = intval( $_POST['thumbnail_id'] );\n\n\tif ( $json )\n\t\tcheck_ajax_referer( \"update-post_$post_ID\" );\n\telse\n\t\tcheck_ajax_referer( \"set_post_thumbnail-$post_ID\" );\n\n\tif ( $thumbnail_id == '-1' ) {\n\t\tif ( delete_post_thumbnail( $post_ID ) ) {\n\t\t\t$return = _wp_post_thumbnail_html( null, $post_ID );\n\t\t\t$json ? wp_send_json_success( $return ) : wp_die( $return );\n\t\t} else {\n\t\t\twp_die( 0 );\n\t\t}\n\t}\n\n\tif ( set_post_thumbnail( $post_ID, $thumbnail_id ) ) {\n\t\t$return = _wp_post_thumbnail_html( $thumbnail_id, $post_ID );\n\t\t$json ? wp_send_json_success( $return ) : wp_die( $return );\n\t}\n\n\twp_die( 0 );\n}\n\n/**\n * AJAX handler for setting the featured image for an attachment.\n *\n * @since 4.0.0\n *\n * @see set_post_thumbnail()\n */\nfunction wp_ajax_set_attachment_thumbnail() {\n\tif ( empty( $_POST['urls'] ) || ! is_array( $_POST['urls'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$thumbnail_id = (int) $_POST['thumbnail_id'];\n\tif ( empty( $thumbnail_id ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$post_ids = array();\n\t// For each URL, try to find its corresponding post ID.\n\tforeach ( $_POST['urls'] as $url ) {\n\t\t$post_id = attachment_url_to_postid( $url );\n\t\tif ( ! empty( $post_id ) ) {\n\t\t\t$post_ids[] = $post_id;\n\t\t}\n\t}\n\n\tif ( empty( $post_ids ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$success = 0;\n\t// For each found attachment, set its thumbnail.\n\tforeach ( $post_ids as $post_id ) {\n\t\tif ( ! current_user_can( 'edit_post', $post_id ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( set_post_thumbnail( $post_id, $thumbnail_id ) ) {\n\t\t\t$success++;\n\t\t}\n\t}\n\n\tif ( 0 === $success ) {\n\t\twp_send_json_error();\n\t} else {\n\t\twp_send_json_success();\n\t}\n\n\twp_send_json_error();\n}\n\n/**\n * Ajax handler for date formatting.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_date_format() {\n\twp_die( date_i18n( sanitize_option( 'date_format', wp_unslash( $_POST['date'] ) ) ) );\n}\n\n/**\n * Ajax handler for time formatting.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_time_format() {\n\twp_die( date_i18n( sanitize_option( 'time_format', wp_unslash( $_POST['date'] ) ) ) );\n}\n\n/**\n * Ajax handler for saving posts from the fullscreen editor.\n *\n * @since 3.1.0\n * @deprecated 4.3.0\n */\nfunction wp_ajax_wp_fullscreen_save_post() {\n\t$post_id = isset( $_POST['post_ID'] ) ? (int) $_POST['post_ID'] : 0;\n\n\t$post = null;\n\n\tif ( $post_id )\n\t\t$post = get_post( $post_id );\n\n\tcheck_ajax_referer('update-post_' . $post_id, '_wpnonce');\n\n\t$post_id = edit_post();\n\n\tif ( is_wp_error( $post_id ) ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( $post ) {\n\t\t$last_date = mysql2date( __( 'F j, Y' ), $post->post_modified );\n\t\t$last_time = mysql2date( __( 'g:i a' ), $post->post_modified );\n\t} else {\n\t\t$last_date = date_i18n( __( 'F j, Y' ) );\n\t\t$last_time = date_i18n( __( 'g:i a' ) );\n\t}\n\n\tif ( $last_id = get_post_meta( $post_id, '_edit_last', true ) ) {\n\t\t$last_user = get_userdata( $last_id );\n\t\t$last_edited = sprintf( __('Last edited by %1$s on %2$s at %3$s'), esc_html( $last_user->display_name ), $last_date, $last_time );\n\t} else {\n\t\t$last_edited = sprintf( __('Last edited on %1$s at %2$s'), $last_date, $last_time );\n\t}\n\n\twp_send_json_success( array( 'last_edited' => $last_edited ) );\n}\n\n/**\n * Ajax handler for removing a post lock.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_wp_remove_post_lock() {\n\tif ( empty( $_POST['post_ID'] ) || empty( $_POST['active_post_lock'] ) )\n\t\twp_die( 0 );\n\t$post_id = (int) $_POST['post_ID'];\n\tif ( ! $post = get_post( $post_id ) )\n\t\twp_die( 0 );\n\n\tcheck_ajax_referer( 'update-post_' . $post_id );\n\n\tif ( ! current_user_can( 'edit_post', $post_id ) )\n\t\twp_die( -1 );\n\n\t$active_lock = array_map( 'absint', explode( ':', $_POST['active_post_lock'] ) );\n\tif ( $active_lock[1] != get_current_user_id() )\n\t\twp_die( 0 );\n\n\t/**\n\t * Filter the post lock window duration.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param int $interval The interval in seconds the post lock duration\n\t *                      should last, plus 5 seconds. Default 150.\n\t */\n\t$new_lock = ( time() - apply_filters( 'wp_check_post_lock_window', 150 ) + 5 ) . ':' . $active_lock[1];\n\tupdate_post_meta( $post_id, '_edit_lock', $new_lock, implode( ':', $active_lock ) );\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for dismissing a WordPress pointer.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_dismiss_wp_pointer() {\n\t$pointer = $_POST['pointer'];\n\tif ( $pointer != sanitize_key( $pointer ) )\n\t\twp_die( 0 );\n\n//\tcheck_ajax_referer( 'dismiss-pointer_' . $pointer );\n\n\t$dismissed = array_filter( explode( ',', (string) get_user_meta( get_current_user_id(), 'dismissed_wp_pointers', true ) ) );\n\n\tif ( in_array( $pointer, $dismissed ) )\n\t\twp_die( 0 );\n\n\t$dismissed[] = $pointer;\n\t$dismissed = implode( ',', $dismissed );\n\n\tupdate_user_meta( get_current_user_id(), 'dismissed_wp_pointers', $dismissed );\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for getting an attachment.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_get_attachment() {\n\tif ( ! isset( $_REQUEST['id'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! $id = absint( $_REQUEST['id'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! $post = get_post( $id ) )\n\t\twp_send_json_error();\n\n\tif ( 'attachment' != $post->post_type )\n\t\twp_send_json_error();\n\n\tif ( ! current_user_can( 'upload_files' ) )\n\t\twp_send_json_error();\n\n\tif ( ! $attachment = wp_prepare_attachment_for_js( $id ) )\n\t\twp_send_json_error();\n\n\twp_send_json_success( $attachment );\n}\n\n/**\n * Ajax handler for querying attachments.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_query_attachments() {\n\tif ( ! current_user_can( 'upload_files' ) )\n\t\twp_send_json_error();\n\n\t$query = isset( $_REQUEST['query'] ) ? (array) $_REQUEST['query'] : array();\n\t$keys = array(\n\t\t's', 'order', 'orderby', 'posts_per_page', 'paged', 'post_mime_type',\n\t\t'post_parent', 'post__in', 'post__not_in', 'year', 'monthnum'\n\t);\n\tforeach ( get_taxonomies_for_attachments( 'objects' ) as $t ) {\n\t\tif ( $t->query_var && isset( $query[ $t->query_var ] ) ) {\n\t\t\t$keys[] = $t->query_var;\n\t\t}\n\t}\n\n\t$query = array_intersect_key( $query, array_flip( $keys ) );\n\t$query['post_type'] = 'attachment';\n\tif ( MEDIA_TRASH\n\t\t&& ! empty( $_REQUEST['query']['post_status'] )\n\t\t&& 'trash' === $_REQUEST['query']['post_status'] ) {\n\t\t$query['post_status'] = 'trash';\n\t} else {\n\t\t$query['post_status'] = 'inherit';\n\t}\n\n\tif ( current_user_can( get_post_type_object( 'attachment' )->cap->read_private_posts ) )\n\t\t$query['post_status'] .= ',private';\n\n\t/**\n\t * Filter the arguments passed to WP_Query during an AJAX\n\t * call for querying attachments.\n\t *\n\t * @since 3.7.0\n\t *\n\t * @see WP_Query::parse_query()\n\t *\n\t * @param array $query An array of query variables.\n\t */\n\t$query = apply_filters( 'ajax_query_attachments_args', $query );\n\t$query = new WP_Query( $query );\n\n\t$posts = array_map( 'wp_prepare_attachment_for_js', $query->posts );\n\t$posts = array_filter( $posts );\n\n\twp_send_json_success( $posts );\n}\n\n/**\n * Ajax handler for updating attachment attributes.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_save_attachment() {\n\tif ( ! isset( $_REQUEST['id'] ) || ! isset( $_REQUEST['changes'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! $id = absint( $_REQUEST['id'] ) )\n\t\twp_send_json_error();\n\n\tcheck_ajax_referer( 'update-post_' . $id, 'nonce' );\n\n\tif ( ! current_user_can( 'edit_post', $id ) )\n\t\twp_send_json_error();\n\n\t$changes = $_REQUEST['changes'];\n\t$post    = get_post( $id, ARRAY_A );\n\n\tif ( 'attachment' != $post['post_type'] )\n\t\twp_send_json_error();\n\n\tif ( isset( $changes['parent'] ) )\n\t\t$post['post_parent'] = $changes['parent'];\n\n\tif ( isset( $changes['title'] ) )\n\t\t$post['post_title'] = $changes['title'];\n\n\tif ( isset( $changes['caption'] ) )\n\t\t$post['post_excerpt'] = $changes['caption'];\n\n\tif ( isset( $changes['description'] ) )\n\t\t$post['post_content'] = $changes['description'];\n\n\tif ( MEDIA_TRASH && isset( $changes['status'] ) )\n\t\t$post['post_status'] = $changes['status'];\n\n\tif ( isset( $changes['alt'] ) ) {\n\t\t$alt = wp_unslash( $changes['alt'] );\n\t\tif ( $alt != get_post_meta( $id, '_wp_attachment_image_alt', true ) ) {\n\t\t\t$alt = wp_strip_all_tags( $alt, true );\n\t\t\tupdate_post_meta( $id, '_wp_attachment_image_alt', wp_slash( $alt ) );\n\t\t}\n\t}\n\n\tif ( wp_attachment_is( 'audio', $post['ID'] ) ) {\n\t\t$changed = false;\n\t\t$id3data = wp_get_attachment_metadata( $post['ID'] );\n\t\tif ( ! is_array( $id3data ) ) {\n\t\t\t$changed = true;\n\t\t\t$id3data = array();\n\t\t}\n\t\tforeach ( wp_get_attachment_id3_keys( (object) $post, 'edit' ) as $key => $label ) {\n\t\t\tif ( isset( $changes[ $key ] ) ) {\n\t\t\t\t$changed = true;\n\t\t\t\t$id3data[ $key ] = sanitize_text_field( wp_unslash( $changes[ $key ] ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( $changed ) {\n\t\t\twp_update_attachment_metadata( $id, $id3data );\n\t\t}\n\t}\n\n\tif ( MEDIA_TRASH && isset( $changes['status'] ) && 'trash' === $changes['status'] ) {\n\t\twp_delete_post( $id );\n\t} else {\n\t\twp_update_post( $post );\n\t}\n\n\twp_send_json_success();\n}\n\n/**\n * Ajax handler for saving backwards compatible attachment attributes.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_save_attachment_compat() {\n\tif ( ! isset( $_REQUEST['id'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! $id = absint( $_REQUEST['id'] ) )\n\t\twp_send_json_error();\n\n\tif ( empty( $_REQUEST['attachments'] ) || empty( $_REQUEST['attachments'][ $id ] ) )\n\t\twp_send_json_error();\n\t$attachment_data = $_REQUEST['attachments'][ $id ];\n\n\tcheck_ajax_referer( 'update-post_' . $id, 'nonce' );\n\n\tif ( ! current_user_can( 'edit_post', $id ) )\n\t\twp_send_json_error();\n\n\t$post = get_post( $id, ARRAY_A );\n\n\tif ( 'attachment' != $post['post_type'] )\n\t\twp_send_json_error();\n\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$post = apply_filters( 'attachment_fields_to_save', $post, $attachment_data );\n\n\tif ( isset( $post['errors'] ) ) {\n\t\t$errors = $post['errors']; // @todo return me and display me!\n\t\tunset( $post['errors'] );\n\t}\n\n\twp_update_post( $post );\n\n\tforeach ( get_attachment_taxonomies( $post ) as $taxonomy ) {\n\t\tif ( isset( $attachment_data[ $taxonomy ] ) )\n\t\t\twp_set_object_terms( $id, array_map( 'trim', preg_split( '/,+/', $attachment_data[ $taxonomy ] ) ), $taxonomy, false );\n\t}\n\n\tif ( ! $attachment = wp_prepare_attachment_for_js( $id ) )\n\t\twp_send_json_error();\n\n\twp_send_json_success( $attachment );\n}\n\n/**\n * Ajax handler for saving the attachment order.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_save_attachment_order() {\n\tif ( ! isset( $_REQUEST['post_id'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! $post_id = absint( $_REQUEST['post_id'] ) )\n\t\twp_send_json_error();\n\n\tif ( empty( $_REQUEST['attachments'] ) )\n\t\twp_send_json_error();\n\n\tcheck_ajax_referer( 'update-post_' . $post_id, 'nonce' );\n\n\t$attachments = $_REQUEST['attachments'];\n\n\tif ( ! current_user_can( 'edit_post', $post_id ) )\n\t\twp_send_json_error();\n\n\tforeach ( $attachments as $attachment_id => $menu_order ) {\n\t\tif ( ! current_user_can( 'edit_post', $attachment_id ) )\n\t\t\tcontinue;\n\t\tif ( ! $attachment = get_post( $attachment_id ) )\n\t\t\tcontinue;\n\t\tif ( 'attachment' != $attachment->post_type )\n\t\t\tcontinue;\n\n\t\twp_update_post( array( 'ID' => $attachment_id, 'menu_order' => $menu_order ) );\n\t}\n\n\twp_send_json_success();\n}\n\n/**\n * Ajax handler for sending an attachment to the editor.\n *\n * Generates the HTML to send an attachment to the editor.\n * Backwards compatible with the media_send_to_editor filter\n * and the chain of filters that follow.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_send_attachment_to_editor() {\n\tcheck_ajax_referer( 'media-send-to-editor', 'nonce' );\n\n\t$attachment = wp_unslash( $_POST['attachment'] );\n\n\t$id = intval( $attachment['id'] );\n\n\tif ( ! $post = get_post( $id ) )\n\t\twp_send_json_error();\n\n\tif ( 'attachment' != $post->post_type )\n\t\twp_send_json_error();\n\n\tif ( current_user_can( 'edit_post', $id ) ) {\n\t\t// If this attachment is unattached, attach it. Primarily a back compat thing.\n\t\tif ( 0 == $post->post_parent && $insert_into_post_id = intval( $_POST['post_id'] ) ) {\n\t\t\twp_update_post( array( 'ID' => $id, 'post_parent' => $insert_into_post_id ) );\n\t\t}\n\t}\n\n\t$url = empty( $attachment['url'] ) ? '' : $attachment['url'];\n\t$rel = ( strpos( $url, 'attachment_id') || get_attachment_link( $id ) == $url );\n\n\tremove_filter( 'media_send_to_editor', 'image_media_send_to_editor' );\n\n\tif ( 'image' === substr( $post->post_mime_type, 0, 5 ) ) {\n\t\t$align = isset( $attachment['align'] ) ? $attachment['align'] : 'none';\n\t\t$size = isset( $attachment['image-size'] ) ? $attachment['image-size'] : 'medium';\n\t\t$alt = isset( $attachment['image_alt'] ) ? $attachment['image_alt'] : '';\n\n\t\t// No whitespace-only captions.\n\t\t$caption = isset( $attachment['post_excerpt'] ) ? $attachment['post_excerpt'] : '';\n\t\tif ( '' === trim( $caption ) ) {\n\t\t\t$caption = '';\n\t\t}\n\n\t\t$title = ''; // We no longer insert title tags into <img> tags, as they are redundant.\n\t\t$html = get_image_send_to_editor( $id, $caption, $title, $align, $url, $rel, $size, $alt );\n\t} elseif ( wp_attachment_is( 'video', $post ) || wp_attachment_is( 'audio', $post )  ) {\n\t\t$html = stripslashes_deep( $_POST['html'] );\n\t} else {\n\t\t$html = isset( $attachment['post_title'] ) ? $attachment['post_title'] : '';\n\t\t$rel = $rel ? ' rel=\"attachment wp-att-' . $id . '\"' : ''; // Hard-coded string, $id is already sanitized\n\n\t\tif ( ! empty( $url ) ) {\n\t\t\t$html = '<a href=\"' . esc_url( $url ) . '\"' . $rel . '\">' . $html . '</a>';\n\t\t}\n\t}\n\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$html = apply_filters( 'media_send_to_editor', $html, $id, $attachment );\n\n\twp_send_json_success( $html );\n}\n\n/**\n * Ajax handler for sending a link to the editor.\n *\n * Generates the HTML to send a non-image embed link to the editor.\n *\n * Backwards compatible with the following filters:\n * - file_send_to_editor_url\n * - audio_send_to_editor_url\n * - video_send_to_editor_url\n *\n * @since 3.5.0\n *\n * @global WP_Post  $post\n * @global WP_Embed $wp_embed\n */\nfunction wp_ajax_send_link_to_editor() {\n\tglobal $post, $wp_embed;\n\n\tcheck_ajax_referer( 'media-send-to-editor', 'nonce' );\n\n\tif ( ! $src = wp_unslash( $_POST['src'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! strpos( $src, '://' ) )\n\t\t$src = 'http://' . $src;\n\n\tif ( ! $src = esc_url_raw( $src ) )\n\t\twp_send_json_error();\n\n\tif ( ! $link_text = trim( wp_unslash( $_POST['link_text'] ) ) )\n\t\t$link_text = wp_basename( $src );\n\n\t$post = get_post( isset( $_POST['post_id'] ) ? $_POST['post_id'] : 0 );\n\n\t// Ping WordPress for an embed.\n\t$check_embed = $wp_embed->run_shortcode( '[embed]'. $src .'[/embed]' );\n\n\t// Fallback that WordPress creates when no oEmbed was found.\n\t$fallback = $wp_embed->maybe_make_link( $src );\n\n\tif ( $check_embed !== $fallback ) {\n\t\t// TinyMCE view for [embed] will parse this\n\t\t$html = '[embed]' . $src . '[/embed]';\n\t} elseif ( $link_text ) {\n\t\t$html = '<a href=\"' . esc_url( $src ) . '\">' . $link_text . '</a>';\n\t} else {\n\t\t$html = '';\n\t}\n\n\t// Figure out what filter to run:\n\t$type = 'file';\n\tif ( ( $ext = preg_replace( '/^.+?\\.([^.]+)$/', '$1', $src ) ) && ( $ext_type = wp_ext2type( $ext ) )\n\t\t&& ( 'audio' == $ext_type || 'video' == $ext_type ) )\n\t\t\t$type = $ext_type;\n\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$html = apply_filters( $type . '_send_to_editor_url', $html, $src, $link_text );\n\n\twp_send_json_success( $html );\n}\n\n/**\n * Ajax handler for the Heartbeat API.\n *\n * Runs when the user is logged in.\n *\n * @since 3.6.0\n */\nfunction wp_ajax_heartbeat() {\n\tif ( empty( $_POST['_nonce'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$response = $data = array();\n\t$nonce_state = wp_verify_nonce( $_POST['_nonce'], 'heartbeat-nonce' );\n\n\t// screen_id is the same as $current_screen->id and the JS global 'pagenow'.\n\tif ( ! empty( $_POST['screen_id'] ) ) {\n\t\t$screen_id = sanitize_key($_POST['screen_id']);\n\t} else {\n\t\t$screen_id = 'front';\n\t}\n\n\tif ( ! empty( $_POST['data'] ) ) {\n\t\t$data = wp_unslash( (array) $_POST['data'] );\n\t}\n\n\tif ( 1 !== $nonce_state ) {\n\t\t$response = apply_filters( 'wp_refresh_nonces', $response, $data, $screen_id );\n\n\t\tif ( false === $nonce_state ) {\n\t\t\t// User is logged in but nonces have expired.\n\t\t\t$response['nonces_expired'] = true;\n\t\t\twp_send_json( $response );\n\t\t}\n\t}\n\n\tif ( ! empty( $data ) ) {\n\t\t/**\n\t\t * Filter the Heartbeat response received.\n\t\t *\n\t\t * @since 3.6.0\n\t\t *\n\t\t * @param array  $response  The Heartbeat response.\n\t\t * @param array  $data      The $_POST data sent.\n\t\t * @param string $screen_id The screen id.\n\t\t */\n\t\t$response = apply_filters( 'heartbeat_received', $response, $data, $screen_id );\n\t}\n\n\t/**\n\t * Filter the Heartbeat response sent.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param array  $response  The Heartbeat response.\n\t * @param string $screen_id The screen id.\n\t */\n\t$response = apply_filters( 'heartbeat_send', $response, $screen_id );\n\n\t/**\n\t * Fires when Heartbeat ticks in logged-in environments.\n\t *\n\t * Allows the transport to be easily replaced with long-polling.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param array  $response  The Heartbeat response.\n\t * @param string $screen_id The screen id.\n\t */\n\tdo_action( 'heartbeat_tick', $response, $screen_id );\n\n\t// Send the current time according to the server\n\t$response['server_time'] = time();\n\n\twp_send_json( $response );\n}\n\n/**\n * Ajax handler for getting revision diffs.\n *\n * @since 3.6.0\n */\nfunction wp_ajax_get_revision_diffs() {\n\trequire ABSPATH . 'wp-admin/includes/revision.php';\n\n\tif ( ! $post = get_post( (int) $_REQUEST['post_id'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! current_user_can( 'read_post', $post->ID ) )\n\t\twp_send_json_error();\n\n\t// Really just pre-loading the cache here.\n\tif ( ! $revisions = wp_get_post_revisions( $post->ID, array( 'check_enabled' => false ) ) )\n\t\twp_send_json_error();\n\n\t$return = array();\n\t@set_time_limit( 0 );\n\n\tforeach ( $_REQUEST['compare'] as $compare_key ) {\n\t\tlist( $compare_from, $compare_to ) = explode( ':', $compare_key ); // from:to\n\n\t\t$return[] = array(\n\t\t\t'id' => $compare_key,\n\t\t\t'fields' => wp_get_revision_ui_diff( $post, $compare_from, $compare_to ),\n\t\t);\n\t}\n\twp_send_json_success( $return );\n}\n\n/**\n * Ajax handler for auto-saving the selected color scheme for\n * a user's own profile.\n *\n * @since 3.8.0\n *\n * @global array $_wp_admin_css_colors\n */\nfunction wp_ajax_save_user_color_scheme() {\n\tglobal $_wp_admin_css_colors;\n\n\tcheck_ajax_referer( 'save-color-scheme', 'nonce' );\n\n\t$color_scheme = sanitize_key( $_POST['color_scheme'] );\n\n\tif ( ! isset( $_wp_admin_css_colors[ $color_scheme ] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$previous_color_scheme = get_user_meta( get_current_user_id(), 'admin_color', true );\n\tupdate_user_meta( get_current_user_id(), 'admin_color', $color_scheme );\n\n\twp_send_json_success( array(\n\t\t'previousScheme' => 'admin-color-' . $previous_color_scheme,\n\t\t'currentScheme'  => 'admin-color-' . $color_scheme\n\t) );\n}\n\n/**\n * Ajax handler for getting themes from themes_api().\n *\n * @since 3.9.0\n *\n * @global array $themes_allowedtags\n * @global array $theme_field_defaults\n */\nfunction wp_ajax_query_themes() {\n\tglobal $themes_allowedtags, $theme_field_defaults;\n\n\tif ( ! current_user_can( 'install_themes' ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$args = wp_parse_args( wp_unslash( $_REQUEST['request'] ), array(\n\t\t'per_page' => 20,\n\t\t'fields'   => $theme_field_defaults\n\t) );\n\n\tif ( isset( $args['browse'] ) && 'favorites' === $args['browse'] && ! isset( $args['user'] ) ) {\n\t\t$user = get_user_option( 'wporg_favorites' );\n\t\tif ( $user ) {\n\t\t\t$args['user'] = $user;\n\t\t}\n\t}\n\n\t$old_filter = isset( $args['browse'] ) ? $args['browse'] : 'search';\n\n\t/** This filter is documented in wp-admin/includes/class-wp-theme-install-list-table.php */\n\t$args = apply_filters( 'install_themes_table_api_args_' . $old_filter, $args );\n\n\t$api = themes_api( 'query_themes', $args );\n\n\tif ( is_wp_error( $api ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$update_php = network_admin_url( 'update.php?action=install-theme' );\n\tforeach ( $api->themes as &$theme ) {\n\t\t$theme->install_url = add_query_arg( array(\n\t\t\t'theme'    => $theme->slug,\n\t\t\t'_wpnonce' => wp_create_nonce( 'install-theme_' . $theme->slug )\n\t\t), $update_php );\n\n\t\t$theme->name        = wp_kses( $theme->name, $themes_allowedtags );\n\t\t$theme->author      = wp_kses( $theme->author, $themes_allowedtags );\n\t\t$theme->version     = wp_kses( $theme->version, $themes_allowedtags );\n\t\t$theme->description = wp_kses( $theme->description, $themes_allowedtags );\n\t\t$theme->stars       = wp_star_rating( array( 'rating' => $theme->rating, 'type' => 'percent', 'number' => $theme->num_ratings, 'echo' => false ) );\n\t\t$theme->num_ratings = number_format_i18n( $theme->num_ratings );\n\t\t$theme->preview_url = set_url_scheme( $theme->preview_url );\n\t}\n\n\twp_send_json_success( $api );\n}\n\n/**\n * Apply [embed] AJAX handlers to a string.\n *\n * @since 4.0.0\n *\n * @global WP_Post    $post       Global $post.\n * @global WP_Embed   $wp_embed   Embed API instance.\n * @global WP_Scripts $wp_scripts\n */\nfunction wp_ajax_parse_embed() {\n\tglobal $post, $wp_embed;\n\n\tif ( ! $post = get_post( (int) $_POST['post_ID'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( empty( $_POST['shortcode'] ) || ! current_user_can( 'edit_post', $post->ID ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$shortcode = wp_unslash( $_POST['shortcode'] );\n\n\tpreg_match( '/' . get_shortcode_regex() . '/s', $shortcode, $matches );\n\t$atts = shortcode_parse_atts( $matches[3] );\n\tif ( ! empty( $matches[5] ) ) {\n\t\t$url = $matches[5];\n\t} elseif ( ! empty( $atts['src'] ) ) {\n\t\t$url = $atts['src'];\n\t} else {\n\t\t$url = '';\n\t}\n\n\t$parsed = false;\n\tsetup_postdata( $post );\n\n\t$wp_embed->return_false_on_fail = true;\n\n\tif ( is_ssl() && 0 === strpos( $url, 'http://' ) ) {\n\t\t// Admin is ssl and the user pasted non-ssl URL.\n\t\t// Check if the provider supports ssl embeds and use that for the preview.\n\t\t$ssl_shortcode = preg_replace( '%^(\\\\[embed[^\\\\]]*\\\\])http://%i', '$1https://', $shortcode );\n\t\t$parsed = $wp_embed->run_shortcode( $ssl_shortcode );\n\n\t\tif ( ! $parsed ) {\n\t\t\t$no_ssl_support = true;\n\t\t}\n\t}\n\n\tif ( $url && ! $parsed ) {\n\t\t$parsed = $wp_embed->run_shortcode( $shortcode );\n\t}\n\n\tif ( ! $parsed ) {\n\t\twp_send_json_error( array(\n\t\t\t'type' => 'not-embeddable',\n\t\t\t'message' => sprintf( __( '%s failed to embed.' ), '<code>' . esc_html( $url ) . '</code>' ),\n\t\t) );\n\t}\n\n\tif ( has_shortcode( $parsed, 'audio' ) || has_shortcode( $parsed, 'video' ) ) {\n\t\t$styles = '';\n\t\t$mce_styles = wpview_media_sandbox_styles();\n\t\tforeach ( $mce_styles as $style ) {\n\t\t\t$styles .= sprintf( '<link rel=\"stylesheet\" href=\"%s\"/>', $style );\n\t\t}\n\n\t\t$html = do_shortcode( $parsed );\n\n\t\tglobal $wp_scripts;\n\t\tif ( ! empty( $wp_scripts ) ) {\n\t\t\t$wp_scripts->done = array();\n\t\t}\n\t\tob_start();\n\t\twp_print_scripts( 'wp-mediaelement' );\n\t\t$scripts = ob_get_clean();\n\n\t\t$parsed = $styles . $html . $scripts;\n\t}\n\n\n\tif ( ! empty( $no_ssl_support ) || ( is_ssl() && ( preg_match( '%<(iframe|script|embed) [^>]*src=\"http://%', $parsed ) ||\n\t\tpreg_match( '%<link [^>]*href=\"http://%', $parsed ) ) ) ) {\n\t\t// Admin is ssl and the embed is not. Iframes, scripts, and other \"active content\" will be blocked.\n\t\twp_send_json_error( array(\n\t\t\t'type' => 'not-ssl',\n\t\t\t'message' => __( 'This preview is unavailable in the editor.' ),\n\t\t) );\n\t}\n\n\twp_send_json_success( array(\n\t\t'body' => $parsed,\n\t\t'attr' => $wp_embed->last_attr\n\t) );\n}\n\n/**\n * @since 4.0.0\n *\n * @global WP_Post    $post\n * @global WP_Scripts $wp_scripts\n */\nfunction wp_ajax_parse_media_shortcode() {\n\tglobal $post, $wp_scripts;\n\n\tif ( empty( $_POST['shortcode'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$shortcode = wp_unslash( $_POST['shortcode'] );\n\n\tif ( ! empty( $_POST['post_ID'] ) ) {\n\t\t$post = get_post( (int) $_POST['post_ID'] );\n\t}\n\n\t// the embed shortcode requires a post\n\tif ( ! $post || ! current_user_can( 'edit_post', $post->ID ) ) {\n\t\tif ( 'embed' === $shortcode ) {\n\t\t\twp_send_json_error();\n\t\t}\n\t} else {\n\t\tsetup_postdata( $post );\n\t}\n\n\t$parsed = do_shortcode( $shortcode  );\n\n\tif ( empty( $parsed ) ) {\n\t\twp_send_json_error( array(\n\t\t\t'type' => 'no-items',\n\t\t\t'message' => __( 'No items found.' ),\n\t\t) );\n\t}\n\n\t$head = '';\n\t$styles = wpview_media_sandbox_styles();\n\n\tforeach ( $styles as $style ) {\n\t\t$head .= '<link type=\"text/css\" rel=\"stylesheet\" href=\"' . $style . '\">';\n\t}\n\n\tif ( ! empty( $wp_scripts ) ) {\n\t\t$wp_scripts->done = array();\n\t}\n\n\tob_start();\n\n\techo $parsed;\n\n\tif ( 'playlist' === $_REQUEST['type'] ) {\n\t\twp_underscore_playlist_templates();\n\n\t\twp_print_scripts( 'wp-playlist' );\n\t} else {\n\t\twp_print_scripts( array( 'froogaloop', 'wp-mediaelement' ) );\n\t}\n\n\twp_send_json_success( array(\n\t\t'head' => $head,\n\t\t'body' => ob_get_clean()\n\t) );\n}\n\n/**\n * AJAX handler for destroying multiple open sessions for a user.\n *\n * @since 4.1.0\n */\nfunction wp_ajax_destroy_sessions() {\n\t$user = get_userdata( (int) $_POST['user_id'] );\n\tif ( $user ) {\n\t\tif ( ! current_user_can( 'edit_user', $user->ID ) ) {\n\t\t\t$user = false;\n\t\t} elseif ( ! wp_verify_nonce( $_POST['nonce'], 'update-user_' . $user->ID ) ) {\n\t\t\t$user = false;\n\t\t}\n\t}\n\n\tif ( ! $user ) {\n\t\twp_send_json_error( array(\n\t\t\t'message' => __( 'Could not log out user sessions. Please try again.' ),\n\t\t) );\n\t}\n\n\t$sessions = WP_Session_Tokens::get_instance( $user->ID );\n\n\tif ( $user->ID === get_current_user_id() ) {\n\t\t$sessions->destroy_others( wp_get_session_token() );\n\t\t$message = __( 'You are now logged out everywhere else.' );\n\t} else {\n\t\t$sessions->destroy_all();\n\t\t/* translators: 1: User's display name. */\n\t\t$message = sprintf( __( '%s has been logged out.' ), $user->display_name );\n\t}\n\n\twp_send_json_success( array( 'message' => $message ) );\n}\n\n\n/**\n * AJAX handler for updating a plugin.\n *\n * @since 4.2.0\n *\n * @see Plugin_Upgrader\n */\nfunction wp_ajax_update_plugin() {\n\tglobal $wp_filesystem;\n\n\t$plugin = urldecode( $_POST['plugin'] );\n\n\t$status = array(\n\t\t'update'     => 'plugin',\n\t\t'plugin'     => $plugin,\n\t\t'slug'       => sanitize_key( $_POST['slug'] ),\n\t\t'oldVersion' => '',\n\t\t'newVersion' => '',\n\t);\n\n\t$plugin_data = get_plugin_data( WP_PLUGIN_DIR . '/' . $plugin );\n\tif ( $plugin_data['Version'] ) {\n\t\t$status['oldVersion'] = sprintf( __( 'Version %s' ), $plugin_data['Version'] );\n\t}\n\n\tif ( ! current_user_can( 'update_plugins' ) ) {\n\t\t$status['error'] = __( 'You do not have sufficient permissions to update plugins for this site.' );\n \t\twp_send_json_error( $status );\n\t}\n\n\tcheck_ajax_referer( 'updates' );\n\n\tinclude_once( ABSPATH . 'wp-admin/includes/class-wp-upgrader.php' );\n\n\twp_update_plugins();\n\n\t$skin = new Automatic_Upgrader_Skin();\n\t$upgrader = new Plugin_Upgrader( $skin );\n\t$result = $upgrader->bulk_upgrade( array( $plugin ) );\n\n\tif ( is_array( $result ) && empty( $result[$plugin] ) && is_wp_error( $skin->result ) ) {\n\t\t$result = $skin->result;\n\t}\n\n\tif ( is_array( $result ) && !empty( $result[ $plugin ] ) ) {\n\t\t$plugin_update_data = current( $result );\n\n\t\t/*\n\t\t * If the `update_plugins` site transient is empty (e.g. when you update\n\t\t * two plugins in quick succession before the transient repopulates),\n\t\t * this may be the return.\n\t\t *\n\t\t * Preferably something can be done to ensure `update_plugins` isn't empty.\n\t\t * For now, surface some sort of error here.\n\t\t */\n\t\tif ( $plugin_update_data === true ) {\n\t\t\t$status['error'] = __( 'Plugin update failed.' );\n \t\t\twp_send_json_error( $status );\n\t\t}\n\n\t\t$plugin_data = get_plugins( '/' . $result[ $plugin ]['destination_name'] );\n\t\t$plugin_data = reset( $plugin_data );\n\n\t\tif ( $plugin_data['Version'] ) {\n\t\t\t$status['newVersion'] = sprintf( __( 'Version %s' ), $plugin_data['Version'] );\n\t\t}\n\n\t\twp_send_json_success( $status );\n\t} else if ( is_wp_error( $result ) ) {\n\t\t$status['error'] = $result->get_error_message();\n \t\twp_send_json_error( $status );\n\n \t} else if ( is_bool( $result ) && ! $result ) {\n\t\t$status['errorCode'] = 'unable_to_connect_to_filesystem';\n\t\t$status['error'] = __( 'Unable to connect to the filesystem. Please confirm your credentials.' );\n\n\t\t// Pass through the error from WP_Filesystem if one was raised\n\t\tif ( is_wp_error( $wp_filesystem->errors ) && $wp_filesystem->errors->get_error_code() ) {\n\t\t\t$status['error'] = $wp_filesystem->errors->get_error_message();\n\t\t}\n\n\t\twp_send_json_error( $status );\n\n\t} else {\n\t\t// An unhandled error occured\n\t\t$status['error'] = __( 'Plugin update failed.' );\n\t\twp_send_json_error( $status );\n\t}\n}\n\n/**\n * AJAX handler for saving a post from Press This.\n *\n * @since 4.2.0\n *\n * @global WP_Press_This $wp_press_this\n */\nfunction wp_ajax_press_this_save_post() {\n\tif ( empty( $GLOBALS['wp_press_this'] ) ) {\n\t\tinclude( ABSPATH . 'wp-admin/includes/class-wp-press-this.php' );\n\t}\n\n\t$GLOBALS['wp_press_this']->save_post();\n}\n\n/**\n * AJAX handler for creating new category from Press This.\n *\n * @since 4.2.0\n *\n * @global WP_Press_This $wp_press_this\n */\nfunction wp_ajax_press_this_add_category() {\n\tif ( empty( $GLOBALS['wp_press_this'] ) ) {\n\t\tinclude( ABSPATH . 'wp-admin/includes/class-wp-press-this.php' );\n\t}\n\n\t$GLOBALS['wp_press_this']->add_category();\n}\n\n/**\n * AJAX handler for cropping an image.\n *\n * @since 4.3.0\n *\n * @global WP_Site_Icon $wp_site_icon\n */\nfunction wp_ajax_crop_image() {\n\t$attachment_id = absint( $_POST['id'] );\n\n\tcheck_ajax_referer( 'image_editor-' . $attachment_id, 'nonce' );\n\tif ( ! current_user_can( 'customize' ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$context = str_replace( '_', '-', $_POST['context'] );\n\t$data    = array_map( 'absint', $_POST['cropDetails'] );\n\t$cropped = wp_crop_image( $attachment_id, $data['x1'], $data['y1'], $data['width'], $data['height'], $data['dst_width'], $data['dst_height'] );\n\n\tif ( ! $cropped || is_wp_error( $cropped ) ) {\n\t\twp_send_json_error( array( 'message' => __( 'Image could not be processed.' ) ) );\n\t}\n\n\tswitch ( $context ) {\n\t\tcase 'site-icon':\n\t\t\trequire_once ABSPATH . '/wp-admin/includes/class-wp-site-icon.php';\n\t\t\tglobal $wp_site_icon;\n\n\t\t\t// Skip creating a new attachment if the attachment is a Site Icon.\n\t\t\tif ( get_post_meta( $attachment_id, '_wp_attachment_context', true ) == $context ) {\n\n\t\t\t\t// Delete the temporary cropped file, we don't need it.\n\t\t\t\twp_delete_file( $cropped );\n\n\t\t\t\t// Additional sizes in wp_prepare_attachment_for_js().\n\t\t\t\tadd_filter( 'image_size_names_choose', array( $wp_site_icon, 'additional_sizes' ) );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t/** This filter is documented in wp-admin/custom-header.php */\n\t\t\t$cropped = apply_filters( 'wp_create_file_in_uploads', $cropped, $attachment_id ); // For replication.\n\t\t\t$object  = $wp_site_icon->create_attachment_object( $cropped, $attachment_id );\n\t\t\tunset( $object['ID'] );\n\n\t\t\t// Update the attachment.\n\t\t\tadd_filter( 'intermediate_image_sizes_advanced', array( $wp_site_icon, 'additional_sizes' ) );\n\t\t\t$attachment_id = $wp_site_icon->insert_attachment( $object, $cropped );\n\t\t\tremove_filter( 'intermediate_image_sizes_advanced', array( $wp_site_icon, 'additional_sizes' ) );\n\n\t\t\t// Additional sizes in wp_prepare_attachment_for_js().\n\t\t\tadd_filter( 'image_size_names_choose', array( $wp_site_icon, 'additional_sizes' ) );\n\t\t\tbreak;\n\n\t\tdefault:\n\n\t\t\t/**\n\t\t\t * Fires before a cropped image is saved.\n\t\t\t *\n\t\t\t * Allows to add filters to modify the way a cropped image is saved.\n\t\t\t *\n\t\t\t * @since 4.3.0\n\t\t\t *\n\t\t\t * @param string $context       The Customizer control requesting the cropped image.\n\t\t\t * @param int    $attachment_id The attachment ID of the original image.\n\t\t\t * @param string $cropped       Path to the cropped image file.\n\t\t\t */\n\t\t\tdo_action( 'wp_ajax_crop_image_pre_save', $context, $attachment_id, $cropped );\n\n\t\t\t/** This filter is documented in wp-admin/custom-header.php */\n\t\t\t$cropped = apply_filters( 'wp_create_file_in_uploads', $cropped, $attachment_id ); // For replication.\n\n\t\t\t$parent_url = wp_get_attachment_url( $attachment_id );\n\t\t\t$url        = str_replace( basename( $parent_url ), basename( $cropped ), $parent_url );\n\n\t\t\t$size       = @getimagesize( $cropped );\n\t\t\t$image_type = ( $size ) ? $size['mime'] : 'image/jpeg';\n\n\t\t\t$object = array(\n\t\t\t\t'post_title'     => basename( $cropped ),\n\t\t\t\t'post_content'   => $url,\n\t\t\t\t'post_mime_type' => $image_type,\n\t\t\t\t'guid'           => $url,\n\t\t\t\t'context'        => $context,\n\t\t\t);\n\n\t\t\t$attachment_id = wp_insert_attachment( $object, $cropped );\n\t\t\t$metadata = wp_generate_attachment_metadata( $attachment_id, $cropped );\n\n\t\t\t/**\n\t\t\t * Filter the cropped image attachment metadata.\n\t\t\t *\n\t\t\t * @since 4.3.0\n\t\t\t *\n\t\t\t * @see wp_generate_attachment_metadata()\n\t\t\t *\n\t\t\t * @param array $metadata Attachment metadata.\n\t\t\t */\n\t\t\t$metadata = apply_filters( 'wp_ajax_cropped_attachment_metadata', $metadata );\n\t\t\twp_update_attachment_metadata( $attachment_id, $metadata );\n\n\t\t\t/**\n\t\t\t * Filter the attachment ID for a cropped image.\n\t\t\t *\n\t\t\t * @since 4.3.0\n\t\t\t *\n\t\t\t * @param int    $attachment_id The attachment ID of the cropped image.\n\t\t\t * @param string $context       The Customizer control requesting the cropped image.\n\t\t\t */\n\t\t\t$attachment_id = apply_filters( 'wp_ajax_cropped_attachment_id', $attachment_id, $context );\n\t}\n\n\twp_send_json_success( wp_prepare_attachment_for_js( $attachment_id ) );\n}\n\n/**\n * Ajax handler for generating a password.\n *\n * @since 4.4.0\n */\nfunction wp_ajax_generate_password() {\n\twp_send_json_success( wp_generate_password( 24 ) );\n}\n\n/**\n * Ajax handler for saving the user's WordPress.org username.\n *\n * @since 4.4.0\n */\nfunction wp_ajax_save_wporg_username() {\n\tif ( ! current_user_can( 'install_themes' ) && ! current_user_can( 'install_plugins' ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$username = isset( $_REQUEST['username'] ) ? wp_unslash( $_REQUEST['username'] ) : false;\n\n\tif ( ! $username ) {\n\t\twp_send_json_error();\n\t}\n\n\twp_send_json_success( update_user_meta( get_current_user_id(), 'wporg_favorites', $username ) );\n}\n", "<?php\n/**\n * Template WordPress Administration API.\n *\n * A Big Mess. Also some neat functions that are nicely written.\n *\n * @package WordPress\n * @subpackage Administration\n */\n\n/** Walker_Category_Checklist class */\nrequire_once( ABSPATH . 'wp-admin/includes/class-walker-category-checklist.php' );\n\n/** WP_Internal_Pointers class */\nrequire_once( ABSPATH . 'wp-admin/includes/class-wp-internal-pointers.php' );\n\n//\n// Category Checklists\n//\n\n/**\n * Output an unordered list of checkbox input elements labeled with category names.\n *\n * @since 2.5.1\n *\n * @see wp_terms_checklist()\n *\n * @param int    $post_id              Optional. Post to generate a categories checklist for. Default 0.\n *                                     $selected_cats must not be an array. Default 0.\n * @param int    $descendants_and_self Optional. ID of the category to output along with its descendants.\n *                                     Default 0.\n * @param array  $selected_cats        Optional. List of categories to mark as checked. Default false.\n * @param array  $popular_cats         Optional. List of categories to receive the \"popular-category\" class.\n *                                     Default false.\n * @param object $walker               Optional. Walker object to use to build the output.\n *                                     Default is a Walker_Category_Checklist instance.\n * @param bool   $checked_ontop        Optional. Whether to move checked items out of the hierarchy and to\n *                                     the top of the list. Default true.\n */\nfunction wp_category_checklist( $post_id = 0, $descendants_and_self = 0, $selected_cats = false, $popular_cats = false, $walker = null, $checked_ontop = true ) {\n\twp_terms_checklist( $post_id, array(\n\t\t'taxonomy' => 'category',\n\t\t'descendants_and_self' => $descendants_and_self,\n\t\t'selected_cats' => $selected_cats,\n\t\t'popular_cats' => $popular_cats,\n\t\t'walker' => $walker,\n\t\t'checked_ontop' => $checked_ontop\n\t) );\n}\n\n/**\n * Output an unordered list of checkbox input elements labelled with term names.\n *\n * Taxonomy-independent version of wp_category_checklist().\n *\n * @since 3.0.0\n * @since 4.4.0 Introduced the `$echo` argument.\n *\n * @param int          $post_id Optional. Post ID. Default 0.\n * @param array|string $args {\n *     Optional. Array or string of arguments for generating a terms checklist. Default empty array.\n *\n *     @type int    $descendants_and_self ID of the category to output along with its descendants.\n *                                        Default 0.\n *     @type array  $selected_cats        List of categories to mark as checked. Default false.\n *     @type array  $popular_cats         List of categories to receive the \"popular-category\" class.\n *                                        Default false.\n *     @type object $walker               Walker object to use to build the output.\n *                                        Default is a Walker_Category_Checklist instance.\n *     @type string $taxonomy             Taxonomy to generate the checklist for. Default 'category'.\n *     @type bool   $checked_ontop        Whether to move checked items out of the hierarchy and to\n *                                        the top of the list. Default true.\n *     @type bool   $echo                 Whether to echo the generated markup. False to return the markup instead\n *                                        of echoing it. Default true.\n * }\n */\nfunction wp_terms_checklist( $post_id = 0, $args = array() ) {\n \t$defaults = array(\n\t\t'descendants_and_self' => 0,\n\t\t'selected_cats' => false,\n\t\t'popular_cats' => false,\n\t\t'walker' => null,\n\t\t'taxonomy' => 'category',\n\t\t'checked_ontop' => true,\n\t\t'echo' => true,\n\t);\n\n\t/**\n\t * Filter the taxonomy terms checklist arguments.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @see wp_terms_checklist()\n\t *\n\t * @param array $args    An array of arguments.\n\t * @param int   $post_id The post ID.\n\t */\n\t$params = apply_filters( 'wp_terms_checklist_args', $args, $post_id );\n\n\t$r = wp_parse_args( $params, $defaults );\n\n\tif ( empty( $r['walker'] ) || ! ( $r['walker'] instanceof Walker ) ) {\n\t\t$walker = new Walker_Category_Checklist;\n\t} else {\n\t\t$walker = $r['walker'];\n\t}\n\n\t$taxonomy = $r['taxonomy'];\n\t$descendants_and_self = (int) $r['descendants_and_self'];\n\n\t$args = array( 'taxonomy' => $taxonomy );\n\n\t$tax = get_taxonomy( $taxonomy );\n\t$args['disabled'] = ! current_user_can( $tax->cap->assign_terms );\n\n\t$args['list_only'] = ! empty( $r['list_only'] );\n\n\tif ( is_array( $r['selected_cats'] ) ) {\n\t\t$args['selected_cats'] = $r['selected_cats'];\n\t} elseif ( $post_id ) {\n\t\t$args['selected_cats'] = wp_get_object_terms( $post_id, $taxonomy, array_merge( $args, array( 'fields' => 'ids' ) ) );\n\t} else {\n\t\t$args['selected_cats'] = array();\n\t}\n\tif ( is_array( $r['popular_cats'] ) ) {\n\t\t$args['popular_cats'] = $r['popular_cats'];\n\t} else {\n\t\t$args['popular_cats'] = get_terms( $taxonomy, array(\n\t\t\t'fields' => 'ids',\n\t\t\t'orderby' => 'count',\n\t\t\t'order' => 'DESC',\n\t\t\t'number' => 10,\n\t\t\t'hierarchical' => false\n\t\t) );\n\t}\n\tif ( $descendants_and_self ) {\n\t\t$categories = (array) get_terms( $taxonomy, array(\n\t\t\t'child_of' => $descendants_and_self,\n\t\t\t'hierarchical' => 0,\n\t\t\t'hide_empty' => 0\n\t\t) );\n\t\t$self = get_term( $descendants_and_self, $taxonomy );\n\t\tarray_unshift( $categories, $self );\n\t} else {\n\t\t$categories = (array) get_terms( $taxonomy, array( 'get' => 'all' ) );\n\t}\n\n\t$output = '';\n\n\tif ( $r['checked_ontop'] ) {\n\t\t// Post process $categories rather than adding an exclude to the get_terms() query to keep the query the same across all posts (for any query cache)\n\t\t$checked_categories = array();\n\t\t$keys = array_keys( $categories );\n\n\t\tforeach ( $keys as $k ) {\n\t\t\tif ( in_array( $categories[$k]->term_id, $args['selected_cats'] ) ) {\n\t\t\t\t$checked_categories[] = $categories[$k];\n\t\t\t\tunset( $categories[$k] );\n\t\t\t}\n\t\t}\n\n\t\t// Put checked cats on top\n\t\t$output .= call_user_func_array( array( $walker, 'walk' ), array( $checked_categories, 0, $args ) );\n\t}\n\t// Then the rest of them\n\t$output .= call_user_func_array( array( $walker, 'walk' ), array( $categories, 0, $args ) );\n\n\tif ( $r['echo'] ) {\n\t\techo $output;\n\t}\n\n\treturn $output;\n}\n\n/**\n * Retrieve a list of the most popular terms from the specified taxonomy.\n *\n * If the $echo argument is true then the elements for a list of checkbox\n * `<input>` elements labelled with the names of the selected terms is output.\n * If the $post_ID global isn't empty then the terms associated with that\n * post will be marked as checked.\n *\n * @since 2.5.0\n *\n * @param string $taxonomy Taxonomy to retrieve terms from.\n * @param int $default Not used.\n * @param int $number Number of terms to retrieve. Defaults to 10.\n * @param bool $echo Optionally output the list as well. Defaults to true.\n * @return array List of popular term IDs.\n */\nfunction wp_popular_terms_checklist( $taxonomy, $default = 0, $number = 10, $echo = true ) {\n\t$post = get_post();\n\n\tif ( $post && $post->ID )\n\t\t$checked_terms = wp_get_object_terms($post->ID, $taxonomy, array('fields'=>'ids'));\n\telse\n\t\t$checked_terms = array();\n\n\t$terms = get_terms( $taxonomy, array( 'orderby' => 'count', 'order' => 'DESC', 'number' => $number, 'hierarchical' => false ) );\n\n\t$tax = get_taxonomy($taxonomy);\n\n\t$popular_ids = array();\n\tforeach ( (array) $terms as $term ) {\n\t\t$popular_ids[] = $term->term_id;\n\t\tif ( !$echo ) // hack for AJAX use\n\t\t\tcontinue;\n\t\t$id = \"popular-$taxonomy-$term->term_id\";\n\t\t$checked = in_array( $term->term_id, $checked_terms ) ? 'checked=\"checked\"' : '';\n\t\t?>\n\n\t\t<li id=\"<?php echo $id; ?>\" class=\"popular-category\">\n\t\t\t<label class=\"selectit\">\n\t\t\t\t<input id=\"in-<?php echo $id; ?>\" type=\"checkbox\" <?php echo $checked; ?> value=\"<?php echo (int) $term->term_id; ?>\" <?php disabled( ! current_user_can( $tax->cap->assign_terms ) ); ?> />\n\t\t\t\t<?php\n\t\t\t\t/** This filter is documented in wp-includes/category-template.php */\n\t\t\t\techo esc_html( apply_filters( 'the_category', $term->name ) );\n\t\t\t\t?>\n\t\t\t</label>\n\t\t</li>\n\n\t\t<?php\n\t}\n\treturn $popular_ids;\n}\n\n/**\n * Outputs a link category checklist element.\n *\n * @since 2.5.1\n *\n * @param int $link_id\n */\nfunction wp_link_category_checklist( $link_id = 0 ) {\n\t$default = 1;\n\n\t$checked_categories = array();\n\n\tif ( $link_id ) {\n\t\t$checked_categories = wp_get_link_cats( $link_id );\n\t\t// No selected categories, strange\n\t\tif ( ! count( $checked_categories ) ) {\n\t\t\t$checked_categories[] = $default;\n\t\t}\n\t} else {\n\t\t$checked_categories[] = $default;\n\t}\n\n\t$categories = get_terms( 'link_category', array( 'orderby' => 'name', 'hide_empty' => 0 ) );\n\n\tif ( empty( $categories ) )\n\t\treturn;\n\n\tforeach ( $categories as $category ) {\n\t\t$cat_id = $category->term_id;\n\n\t\t/** This filter is documented in wp-includes/category-template.php */\n\t\t$name = esc_html( apply_filters( 'the_category', $category->name ) );\n\t\t$checked = in_array( $cat_id, $checked_categories ) ? ' checked=\"checked\"' : '';\n\t\techo '<li id=\"link-category-', $cat_id, '\"><label for=\"in-link-category-', $cat_id, '\" class=\"selectit\"><input value=\"', $cat_id, '\" type=\"checkbox\" name=\"link_category[]\" id=\"in-link-category-', $cat_id, '\"', $checked, '/> ', $name, \"</label></li>\";\n\t}\n}\n\n/**\n * Adds hidden fields with the data for use in the inline editor for posts and pages.\n *\n * @since 2.7.0\n *\n * @param WP_Post $post Post object.\n */\nfunction get_inline_data($post) {\n\t$post_type_object = get_post_type_object($post->post_type);\n\tif ( ! current_user_can( 'edit_post', $post->ID ) )\n\t\treturn;\n\n\t$title = esc_textarea( trim( $post->post_title ) );\n\n\t/** This filter is documented in wp-admin/edit-tag-form.php */\n\techo '\n<div class=\"hidden\" id=\"inline_' . $post->ID . '\">\n\t<div class=\"post_title\">' . $title . '</div>' .\n\t/** This filter is documented in wp-admin/edit-tag-form.php */\n\t'<div class=\"post_name\">' . apply_filters( 'editable_slug', $post->post_name, $post ) . '</div>\n\t<div class=\"post_author\">' . $post->post_author . '</div>\n\t<div class=\"comment_status\">' . esc_html( $post->comment_status ) . '</div>\n\t<div class=\"ping_status\">' . esc_html( $post->ping_status ) . '</div>\n\t<div class=\"_status\">' . esc_html( $post->post_status ) . '</div>\n\t<div class=\"jj\">' . mysql2date( 'd', $post->post_date, false ) . '</div>\n\t<div class=\"mm\">' . mysql2date( 'm', $post->post_date, false ) . '</div>\n\t<div class=\"aa\">' . mysql2date( 'Y', $post->post_date, false ) . '</div>\n\t<div class=\"hh\">' . mysql2date( 'H', $post->post_date, false ) . '</div>\n\t<div class=\"mn\">' . mysql2date( 'i', $post->post_date, false ) . '</div>\n\t<div class=\"ss\">' . mysql2date( 's', $post->post_date, false ) . '</div>\n\t<div class=\"post_password\">' . esc_html( $post->post_password ) . '</div>';\n\n\tif ( $post_type_object->hierarchical )\n\t\techo '<div class=\"post_parent\">' . $post->post_parent . '</div>';\n\n\tif ( $post->post_type == 'page' )\n\t\techo '<div class=\"page_template\">' . esc_html( get_post_meta( $post->ID, '_wp_page_template', true ) ) . '</div>';\n\n\tif ( post_type_supports( $post->post_type, 'page-attributes' ) )\n\t\techo '<div class=\"menu_order\">' . $post->menu_order . '</div>';\n\n\t$taxonomy_names = get_object_taxonomies( $post->post_type );\n\tforeach ( $taxonomy_names as $taxonomy_name) {\n\t\t$taxonomy = get_taxonomy( $taxonomy_name );\n\n\t\tif ( $taxonomy->hierarchical && $taxonomy->show_ui ) {\n\n\t\t\t$terms = get_object_term_cache( $post->ID, $taxonomy_name );\n\t\t\tif ( false === $terms ) {\n\t\t\t\t$terms = wp_get_object_terms( $post->ID, $taxonomy_name );\n\t\t\t\twp_cache_add( $post->ID, $terms, $taxonomy_name . '_relationships' );\n\t\t\t}\n\t\t\t$term_ids = empty( $terms ) ? array() : wp_list_pluck( $terms, 'term_id' );\n\n\t\t\techo '<div class=\"post_category\" id=\"' . $taxonomy_name . '_' . $post->ID . '\">' . implode( ',', $term_ids ) . '</div>';\n\n\t\t} elseif ( $taxonomy->show_ui ) {\n\n\t\t\t$terms_to_edit = get_terms_to_edit( $post->ID, $taxonomy_name );\n\t\t\tif ( ! is_string( $terms_to_edit ) ) {\n\t\t\t\t$terms_to_edit = '';\n\t\t\t}\n\n\t\t\techo '<div class=\"tags_input\" id=\"'.$taxonomy_name.'_'.$post->ID.'\">'\n\t\t\t\t. esc_html( str_replace( ',', ', ', $terms_to_edit ) ) . '</div>';\n\n\t\t}\n\t}\n\n\tif ( !$post_type_object->hierarchical )\n\t\techo '<div class=\"sticky\">' . (is_sticky($post->ID) ? 'sticky' : '') . '</div>';\n\n\tif ( post_type_supports( $post->post_type, 'post-formats' ) )\n\t\techo '<div class=\"post_format\">' . esc_html( get_post_format( $post->ID ) ) . '</div>';\n\n\techo '</div>';\n}\n\n/**\n * Outputs the in-line comment reply-to form in the Comments list table.\n *\n * @since 2.7.0\n *\n * @global WP_List_Table $wp_list_table\n *\n * @param int    $position\n * @param bool   $checkbox\n * @param string $mode\n * @param bool   $table_row\n */\nfunction wp_comment_reply( $position = 1, $checkbox = false, $mode = 'single', $table_row = true ) {\n\tglobal $wp_list_table;\n\t/**\n\t * Filter the in-line comment reply-to form output in the Comments\n\t * list table.\n\t *\n\t * Returning a non-empty value here will short-circuit display\n\t * of the in-line comment-reply form in the Comments list table,\n\t * echoing the returned value instead.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @see wp_comment_reply()\n\t *\n\t * @param string $content The reply-to form content.\n\t * @param array  $args    An array of default args.\n\t */\n\t$content = apply_filters( 'wp_comment_reply', '', array( 'position' => $position, 'checkbox' => $checkbox, 'mode' => $mode ) );\n\n\tif ( ! empty($content) ) {\n\t\techo $content;\n\t\treturn;\n\t}\n\n\tif ( ! $wp_list_table ) {\n\t\tif ( $mode == 'single' ) {\n\t\t\t$wp_list_table = _get_list_table('WP_Post_Comments_List_Table');\n\t\t} else {\n\t\t\t$wp_list_table = _get_list_table('WP_Comments_List_Table');\n\t\t}\n\t}\n\n?>\n<form method=\"get\">\n<?php if ( $table_row ) : ?>\n<table style=\"display:none;\"><tbody id=\"com-reply\"><tr id=\"replyrow\" class=\"inline-edit-row\" style=\"display:none;\"><td colspan=\"<?php echo $wp_list_table->get_column_count(); ?>\" class=\"colspanchange\">\n<?php else : ?>\n<div id=\"com-reply\" style=\"display:none;\"><div id=\"replyrow\" style=\"display:none;\">\n<?php endif; ?>\n\t<fieldset class=\"comment-reply\">\n\t<legend>\n\t\t<span class=\"hidden\" id=\"editlegend\"><?php _e( 'Edit Comment' ); ?></span>\n\t\t<span class=\"hidden\" id=\"replyhead\"><?php _e( 'Reply to Comment' ); ?></span>\n\t\t<span class=\"hidden\" id=\"addhead\"><?php _e( 'Add new Comment' ); ?></span>\n\t</legend>\n\n\t<div id=\"replycontainer\">\n\t<label for=\"replycontent\" class=\"screen-reader-text\"><?php _e( 'Comment' ); ?></label>\n\t<?php\n\t$quicktags_settings = array( 'buttons' => 'strong,em,link,block,del,ins,img,ul,ol,li,code,close' );\n\twp_editor( '', 'replycontent', array( 'media_buttons' => false, 'tinymce' => false, 'quicktags' => $quicktags_settings ) );\n\t?>\n\t</div>\n\n\t<div id=\"edithead\" style=\"display:none;\">\n\t\t<div class=\"inside\">\n\t\t<label for=\"author-name\"><?php _e( 'Name' ) ?></label>\n\t\t<input type=\"text\" name=\"newcomment_author\" size=\"50\" value=\"\" id=\"author-name\" />\n\t\t</div>\n\n\t\t<div class=\"inside\">\n\t\t<label for=\"author-email\"><?php _e('Email') ?></label>\n\t\t<input type=\"text\" name=\"newcomment_author_email\" size=\"50\" value=\"\" id=\"author-email\" />\n\t\t</div>\n\n\t\t<div class=\"inside\">\n\t\t<label for=\"author-url\"><?php _e('URL') ?></label>\n\t\t<input type=\"text\" id=\"author-url\" name=\"newcomment_author_url\" class=\"code\" size=\"103\" value=\"\" />\n\t\t</div>\n\t</div>\n\n\t<p id=\"replysubmit\" class=\"submit\">\n\t<a href=\"#comments-form\" class=\"save button-primary alignright\">\n\t<span id=\"addbtn\" style=\"display:none;\"><?php _e('Add Comment'); ?></span>\n\t<span id=\"savebtn\" style=\"display:none;\"><?php _e('Update Comment'); ?></span>\n\t<span id=\"replybtn\" style=\"display:none;\"><?php _e('Submit Reply'); ?></span></a>\n\t<a href=\"#comments-form\" class=\"cancel button-secondary alignleft\"><?php _e('Cancel'); ?></a>\n\t<span class=\"waiting spinner\"></span>\n\t<span class=\"error\" style=\"display:none;\"></span>\n\t</p>\n\n\t<input type=\"hidden\" name=\"action\" id=\"action\" value=\"\" />\n\t<input type=\"hidden\" name=\"comment_ID\" id=\"comment_ID\" value=\"\" />\n\t<input type=\"hidden\" name=\"comment_post_ID\" id=\"comment_post_ID\" value=\"\" />\n\t<input type=\"hidden\" name=\"status\" id=\"status\" value=\"\" />\n\t<input type=\"hidden\" name=\"position\" id=\"position\" value=\"<?php echo $position; ?>\" />\n\t<input type=\"hidden\" name=\"checkbox\" id=\"checkbox\" value=\"<?php echo $checkbox ? 1 : 0; ?>\" />\n\t<input type=\"hidden\" name=\"mode\" id=\"mode\" value=\"<?php echo esc_attr($mode); ?>\" />\n\t<?php\n\t\twp_nonce_field( 'replyto-comment', '_ajax_nonce-replyto-comment', false );\n\t\tif ( current_user_can( 'unfiltered_html' ) )\n\t\t\twp_nonce_field( 'unfiltered-html-comment', '_wp_unfiltered_html_comment', false );\n\t?>\n\t</fieldset>\n<?php if ( $table_row ) : ?>\n</td></tr></tbody></table>\n<?php else : ?>\n</div></div>\n<?php endif; ?>\n</form>\n<?php\n}\n\n/**\n * Output 'undo move to trash' text for comments\n *\n * @since 2.9.0\n */\nfunction wp_comment_trashnotice() {\n?>\n<div class=\"hidden\" id=\"trash-undo-holder\">\n\t<div class=\"trash-undo-inside\"><?php printf(__('Comment by %s moved to the trash.'), '<strong></strong>'); ?> <span class=\"undo untrash\"><a href=\"#\"><?php _e('Undo'); ?></a></span></div>\n</div>\n<div class=\"hidden\" id=\"spam-undo-holder\">\n\t<div class=\"spam-undo-inside\"><?php printf(__('Comment by %s marked as spam.'), '<strong></strong>'); ?> <span class=\"undo unspam\"><a href=\"#\"><?php _e('Undo'); ?></a></span></div>\n</div>\n<?php\n}\n\n/**\n * Outputs a post's public meta data in the Custom Fields meta box.\n *\n * @since 1.2.0\n *\n * @param array $meta\n */\nfunction list_meta( $meta ) {\n\t// Exit if no meta\n\tif ( ! $meta ) {\n\t\techo '\n<table id=\"list-table\" style=\"display: none;\">\n\t<thead>\n\t<tr>\n\t\t<th class=\"left\">' . _x( 'Name', 'meta name' ) . '</th>\n\t\t<th>' . __( 'Value' ) . '</th>\n\t</tr>\n\t</thead>\n\t<tbody id=\"the-list\" data-wp-lists=\"list:meta\">\n\t<tr><td></td></tr>\n\t</tbody>\n</table>'; //TBODY needed for list-manipulation JS\n\t\treturn;\n\t}\n\t$count = 0;\n?>\n<table id=\"list-table\">\n\t<thead>\n\t<tr>\n\t\t<th class=\"left\"><?php _ex( 'Name', 'meta name' ) ?></th>\n\t\t<th><?php _e( 'Value' ) ?></th>\n\t</tr>\n\t</thead>\n\t<tbody id='the-list' data-wp-lists='list:meta'>\n<?php\n\tforeach ( $meta as $entry )\n\t\techo _list_meta_row( $entry, $count );\n?>\n\t</tbody>\n</table>\n<?php\n}\n\n/**\n * Outputs a single row of public meta data in the Custom Fields meta box.\n *\n * @since 2.5.0\n *\n * @staticvar string $update_nonce\n *\n * @param array $entry\n * @param int   $count\n * @return string\n */\nfunction _list_meta_row( $entry, &$count ) {\n\tstatic $update_nonce = '';\n\n\tif ( is_protected_meta( $entry['meta_key'], 'post' ) )\n\t\treturn '';\n\n\tif ( ! $update_nonce )\n\t\t$update_nonce = wp_create_nonce( 'add-meta' );\n\n\t$r = '';\n\t++ $count;\n\n\tif ( is_serialized( $entry['meta_value'] ) ) {\n\t\tif ( is_serialized_string( $entry['meta_value'] ) ) {\n\t\t\t// This is a serialized string, so we should display it.\n\t\t\t$entry['meta_value'] = maybe_unserialize( $entry['meta_value'] );\n\t\t} else {\n\t\t\t// This is a serialized array/object so we should NOT display it.\n\t\t\t--$count;\n\t\t\treturn '';\n\t\t}\n\t}\n\n\t$entry['meta_key'] = esc_attr($entry['meta_key']);\n\t$entry['meta_value'] = esc_textarea( $entry['meta_value'] ); // using a <textarea />\n\t$entry['meta_id'] = (int) $entry['meta_id'];\n\n\t$delete_nonce = wp_create_nonce( 'delete-meta_' . $entry['meta_id'] );\n\n\t$r .= \"\\n\\t<tr id='meta-{$entry['meta_id']}'>\";\n\t$r .= \"\\n\\t\\t<td class='left'><label class='screen-reader-text' for='meta-{$entry['meta_id']}-key'>\" . __( 'Key' ) . \"</label><input name='meta[{$entry['meta_id']}][key]' id='meta-{$entry['meta_id']}-key' type='text' size='20' value='{$entry['meta_key']}' />\";\n\n\t$r .= \"\\n\\t\\t<div class='submit'>\";\n\t$r .= get_submit_button( __( 'Delete' ), 'deletemeta small', \"deletemeta[{$entry['meta_id']}]\", false, array( 'data-wp-lists' => \"delete:the-list:meta-{$entry['meta_id']}::_ajax_nonce=$delete_nonce\" ) );\n\t$r .= \"\\n\\t\\t\";\n\t$r .= get_submit_button( __( 'Update' ), 'updatemeta small', \"meta-{$entry['meta_id']}-submit\", false, array( 'data-wp-lists' => \"add:the-list:meta-{$entry['meta_id']}::_ajax_nonce-add-meta=$update_nonce\" ) );\n\t$r .= \"</div>\";\n\t$r .= wp_nonce_field( 'change-meta', '_ajax_nonce', false, false );\n\t$r .= \"</td>\";\n\n\t$r .= \"\\n\\t\\t<td><label class='screen-reader-text' for='meta-{$entry['meta_id']}-value'>\" . __( 'Value' ) . \"</label><textarea name='meta[{$entry['meta_id']}][value]' id='meta-{$entry['meta_id']}-value' rows='2' cols='30'>{$entry['meta_value']}</textarea></td>\\n\\t</tr>\";\n\treturn $r;\n}\n\n/**\n * Prints the form in the Custom Fields meta box.\n *\n * @since 1.2.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param WP_Post $post Optional. The post being edited.\n */\nfunction meta_form( $post = null ) {\n\tglobal $wpdb;\n\t$post = get_post( $post );\n\n\t/**\n\t * Filter values for the meta key dropdown in the Custom Fields meta box.\n\t *\n\t * Returning a non-null value will effectively short-circuit and avoid a\n\t * potentially expensive query against postmeta.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param array|null $keys Pre-defined meta keys to be used in place of a postmeta query. Default null.\n\t * @param WP_Post    $post The current post object.\n\t */\n\t$keys = apply_filters( 'postmeta_form_keys', null, $post );\n\n\tif ( null === $keys ) {\n\t\t/**\n\t\t * Filter the number of custom fields to retrieve for the drop-down\n\t\t * in the Custom Fields meta box.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @param int $limit Number of custom fields to retrieve. Default 30.\n\t\t */\n\t\t$limit = apply_filters( 'postmeta_form_limit', 30 );\n\t\t$sql = \"SELECT DISTINCT meta_key\n\t\t\tFROM $wpdb->postmeta\n\t\t\tWHERE meta_key NOT BETWEEN '_' AND '_z'\n\t\t\tHAVING meta_key NOT LIKE %s\n\t\t\tORDER BY meta_key\n\t\t\tLIMIT %d\";\n\t\t$keys = $wpdb->get_col( $wpdb->prepare( $sql, $wpdb->esc_like( '_' ) . '%', $limit ) );\n\t}\n\n\tif ( $keys ) {\n\t\tnatcasesort( $keys );\n\t\t$meta_key_input_id = 'metakeyselect';\n\t} else {\n\t\t$meta_key_input_id = 'metakeyinput';\n\t}\n?>\n<p><strong><?php _e( 'Add New Custom Field:' ) ?></strong></p>\n<table id=\"newmeta\">\n<thead>\n<tr>\n<th class=\"left\"><label for=\"<?php echo $meta_key_input_id; ?>\"><?php _ex( 'Name', 'meta name' ) ?></label></th>\n<th><label for=\"metavalue\"><?php _e( 'Value' ) ?></label></th>\n</tr>\n</thead>\n\n<tbody>\n<tr>\n<td id=\"newmetaleft\" class=\"left\">\n<?php if ( $keys ) { ?>\n<select id=\"metakeyselect\" name=\"metakeyselect\">\n<option value=\"#NONE#\"><?php _e( '&mdash; Select &mdash;' ); ?></option>\n<?php\n\n\tforeach ( $keys as $key ) {\n\t\tif ( is_protected_meta( $key, 'post' ) || ! current_user_can( 'add_post_meta', $post->ID, $key ) )\n\t\t\tcontinue;\n\t\techo \"\\n<option value='\" . esc_attr($key) . \"'>\" . esc_html($key) . \"</option>\";\n\t}\n?>\n</select>\n<input class=\"hide-if-js\" type=\"text\" id=\"metakeyinput\" name=\"metakeyinput\" value=\"\" />\n<a href=\"#postcustomstuff\" class=\"hide-if-no-js\" onclick=\"jQuery('#metakeyinput, #metakeyselect, #enternew, #cancelnew').toggle();return false;\">\n<span id=\"enternew\"><?php _e('Enter new'); ?></span>\n<span id=\"cancelnew\" class=\"hidden\"><?php _e('Cancel'); ?></span></a>\n<?php } else { ?>\n<input type=\"text\" id=\"metakeyinput\" name=\"metakeyinput\" value=\"\" />\n<?php } ?>\n</td>\n<td><textarea id=\"metavalue\" name=\"metavalue\" rows=\"2\" cols=\"25\"></textarea></td>\n</tr>\n\n<tr><td colspan=\"2\">\n<div class=\"submit\">\n<?php submit_button( __( 'Add Custom Field' ), 'secondary', 'addmeta', false, array( 'id' => 'newmeta-submit', 'data-wp-lists' => 'add:the-list:newmeta' ) ); ?>\n</div>\n<?php wp_nonce_field( 'add-meta', '_ajax_nonce-add-meta', false ); ?>\n</td></tr>\n</tbody>\n</table>\n<?php\n\n}\n\n/**\n * Print out HTML form date elements for editing post or comment publish date.\n *\n * @since 0.71\n * @since 4.4.0 Converted to use get_comment() instead of the global `$comment`.\n *\n * @global WP_Locale  $wp_locale\n *\n * @param int|bool $edit      Accepts 1|true for editing the date, 0|false for adding the date.\n * @param int|bool $for_post  Accepts 1|true for applying the date to a post, 0|false for a comment.\n * @param int      $tab_index The tabindex attribute to add. Default 0.\n * @param int|bool $multi     Optional. Whether the additional fields and buttons should be added.\n *                            Default 0|false.\n */\nfunction touch_time( $edit = 1, $for_post = 1, $tab_index = 0, $multi = 0 ) {\n\tglobal $wp_locale;\n\t$post = get_post();\n\n\tif ( $for_post )\n\t\t$edit = ! ( in_array($post->post_status, array('draft', 'pending') ) && (!$post->post_date_gmt || '0000-00-00 00:00:00' == $post->post_date_gmt ) );\n\n\t$tab_index_attribute = '';\n\tif ( (int) $tab_index > 0 )\n\t\t$tab_index_attribute = \" tabindex=\\\"$tab_index\\\"\";\n\n\t// todo: Remove this?\n\t// echo '<label for=\"timestamp\" style=\"display: block;\"><input type=\"checkbox\" class=\"checkbox\" name=\"edit_date\" value=\"1\" id=\"timestamp\"'.$tab_index_attribute.' /> '.__( 'Edit timestamp' ).'</label><br />';\n\n\t$time_adj = current_time('timestamp');\n\t$post_date = ($for_post) ? $post->post_date : get_comment()->comment_date;\n\t$jj = ($edit) ? mysql2date( 'd', $post_date, false ) : gmdate( 'd', $time_adj );\n\t$mm = ($edit) ? mysql2date( 'm', $post_date, false ) : gmdate( 'm', $time_adj );\n\t$aa = ($edit) ? mysql2date( 'Y', $post_date, false ) : gmdate( 'Y', $time_adj );\n\t$hh = ($edit) ? mysql2date( 'H', $post_date, false ) : gmdate( 'H', $time_adj );\n\t$mn = ($edit) ? mysql2date( 'i', $post_date, false ) : gmdate( 'i', $time_adj );\n\t$ss = ($edit) ? mysql2date( 's', $post_date, false ) : gmdate( 's', $time_adj );\n\n\t$cur_jj = gmdate( 'd', $time_adj );\n\t$cur_mm = gmdate( 'm', $time_adj );\n\t$cur_aa = gmdate( 'Y', $time_adj );\n\t$cur_hh = gmdate( 'H', $time_adj );\n\t$cur_mn = gmdate( 'i', $time_adj );\n\n\t$month = '<label><span class=\"screen-reader-text\">' . __( 'Month' ) . '</span><select ' . ( $multi ? '' : 'id=\"mm\" ' ) . 'name=\"mm\"' . $tab_index_attribute . \">\\n\";\n\tfor ( $i = 1; $i < 13; $i = $i +1 ) {\n\t\t$monthnum = zeroise($i, 2);\n\t\t$monthtext = $wp_locale->get_month_abbrev( $wp_locale->get_month( $i ) );\n\t\t$month .= \"\\t\\t\\t\" . '<option value=\"' . $monthnum . '\" data-text=\"' . $monthtext . '\" ' . selected( $monthnum, $mm, false ) . '>';\n\t\t/* translators: 1: month number (01, 02, etc.), 2: month abbreviation */\n\t\t$month .= sprintf( __( '%1$s-%2$s' ), $monthnum, $monthtext ) . \"</option>\\n\";\n\t}\n\t$month .= '</select></label>';\n\n\t$day = '<label><span class=\"screen-reader-text\">' . __( 'Day' ) . '</span><input type=\"text\" ' . ( $multi ? '' : 'id=\"jj\" ' ) . 'name=\"jj\" value=\"' . $jj . '\" size=\"2\" maxlength=\"2\"' . $tab_index_attribute . ' autocomplete=\"off\" /></label>';\n\t$year = '<label><span class=\"screen-reader-text\">' . __( 'Year' ) . '</span><input type=\"text\" ' . ( $multi ? '' : 'id=\"aa\" ' ) . 'name=\"aa\" value=\"' . $aa . '\" size=\"4\" maxlength=\"4\"' . $tab_index_attribute . ' autocomplete=\"off\" /></label>';\n\t$hour = '<label><span class=\"screen-reader-text\">' . __( 'Hour' ) . '</span><input type=\"text\" ' . ( $multi ? '' : 'id=\"hh\" ' ) . 'name=\"hh\" value=\"' . $hh . '\" size=\"2\" maxlength=\"2\"' . $tab_index_attribute . ' autocomplete=\"off\" /></label>';\n\t$minute = '<label><span class=\"screen-reader-text\">' . __( 'Minute' ) . '</span><input type=\"text\" ' . ( $multi ? '' : 'id=\"mn\" ' ) . 'name=\"mn\" value=\"' . $mn . '\" size=\"2\" maxlength=\"2\"' . $tab_index_attribute . ' autocomplete=\"off\" /></label>';\n\n\techo '<div class=\"timestamp-wrap\">';\n\t/* translators: 1: month, 2: day, 3: year, 4: hour, 5: minute */\n\tprintf( __( '%1$s %2$s, %3$s @ %4$s:%5$s' ), $month, $day, $year, $hour, $minute );\n\n\techo '</div><input type=\"hidden\" id=\"ss\" name=\"ss\" value=\"' . $ss . '\" />';\n\n\tif ( $multi ) return;\n\n\techo \"\\n\\n\";\n\t$map = array(\n\t\t'mm' => array( $mm, $cur_mm ),\n\t\t'jj' => array( $jj, $cur_jj ),\n\t\t'aa' => array( $aa, $cur_aa ),\n\t\t'hh' => array( $hh, $cur_hh ),\n\t\t'mn' => array( $mn, $cur_mn ),\n\t);\n\tforeach ( $map as $timeunit => $value ) {\n\t\tlist( $unit, $curr ) = $value;\n\n\t\techo '<input type=\"hidden\" id=\"hidden_' . $timeunit . '\" name=\"hidden_' . $timeunit . '\" value=\"' . $unit . '\" />' . \"\\n\";\n\t\t$cur_timeunit = 'cur_' . $timeunit;\n\t\techo '<input type=\"hidden\" id=\"' . $cur_timeunit . '\" name=\"' . $cur_timeunit . '\" value=\"' . $curr . '\" />' . \"\\n\";\n\t}\n?>\n\n<p>\n<a href=\"#edit_timestamp\" class=\"save-timestamp hide-if-no-js button\"><?php _e('OK'); ?></a>\n<a href=\"#edit_timestamp\" class=\"cancel-timestamp hide-if-no-js button-cancel\"><?php _e('Cancel'); ?></a>\n</p>\n<?php\n}\n\n/**\n * Print out option HTML elements for the page templates drop-down.\n *\n * @since 1.5.0\n *\n * @param string $default Optional. The template file name. Default empty.\n */\nfunction page_template_dropdown( $default = '' ) {\n\t$templates = get_page_templates( get_post() );\n\tksort( $templates );\n\tforeach ( array_keys( $templates ) as $template ) {\n\t\t$selected = selected( $default, $templates[ $template ], false );\n\t\techo \"\\n\\t<option value='\" . $templates[ $template ] . \"' $selected>$template</option>\";\n\t}\n}\n\n/**\n * Print out option HTML elements for the page parents drop-down.\n *\n * @since 1.5.0\n * @since 4.4.0 `$post` argument was added.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int         $default Optional. The default page ID to be pre-selected. Default 0.\n * @param int         $parent  Optional. The parent page ID. Default 0.\n * @param int         $level   Optional. Page depth level. Default 0.\n * @param int|WP_Post $post    Post ID or WP_Post object.\n *\n * @return null|false Boolean False if page has no children, otherwise print out html elements\n */\nfunction parent_dropdown( $default = 0, $parent = 0, $level = 0, $post = null ) {\n\tglobal $wpdb;\n\t$post = get_post( $post );\n\t$items = $wpdb->get_results( $wpdb->prepare(\"SELECT ID, post_parent, post_title FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'page' ORDER BY menu_order\", $parent) );\n\n\tif ( $items ) {\n\t\tforeach ( $items as $item ) {\n\t\t\t// A page cannot be its own parent.\n\t\t\tif ( $post && $post->ID && $item->ID == $post->ID )\n\t\t\t\tcontinue;\n\n\t\t\t$pad = str_repeat( '&nbsp;', $level * 3 );\n\t\t\t$selected = selected( $default, $item->ID, false );\n\n\t\t\techo \"\\n\\t<option class='level-$level' value='$item->ID' $selected>$pad \" . esc_html($item->post_title) . \"</option>\";\n\t\t\tparent_dropdown( $default, $item->ID, $level +1 );\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/**\n * Print out option html elements for role selectors.\n *\n * @since 2.1.0\n *\n * @param string $selected Slug for the role that should be already selected.\n */\nfunction wp_dropdown_roles( $selected = '' ) {\n\t$p = '';\n\t$r = '';\n\n\t$editable_roles = array_reverse( get_editable_roles() );\n\n\tforeach ( $editable_roles as $role => $details ) {\n\t\t$name = translate_user_role($details['name'] );\n\t\tif ( $selected == $role ) // preselect specified role\n\t\t\t$p = \"\\n\\t<option selected='selected' value='\" . esc_attr($role) . \"'>$name</option>\";\n\t\telse\n\t\t\t$r .= \"\\n\\t<option value='\" . esc_attr($role) . \"'>$name</option>\";\n\t}\n\techo $p . $r;\n}\n\n/**\n * Outputs the form used by the importers to accept the data to be imported\n *\n * @since 2.0.0\n *\n * @param string $action The action attribute for the form.\n */\nfunction wp_import_upload_form( $action ) {\n\n\t/**\n\t * Filter the maximum allowed upload size for import files.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @see wp_max_upload_size()\n\t *\n\t * @param int $max_upload_size Allowed upload size. Default 1 MB.\n\t */\n\t$bytes = apply_filters( 'import_upload_size_limit', wp_max_upload_size() );\n\t$size = size_format( $bytes );\n\t$upload_dir = wp_upload_dir();\n\tif ( ! empty( $upload_dir['error'] ) ) :\n\t\t?><div class=\"error\"><p><?php _e('Before you can upload your import file, you will need to fix the following error:'); ?></p>\n\t\t<p><strong><?php echo $upload_dir['error']; ?></strong></p></div><?php\n\telse :\n?>\n<form enctype=\"multipart/form-data\" id=\"import-upload-form\" method=\"post\" class=\"wp-upload-form\" action=\"<?php echo esc_url( wp_nonce_url( $action, 'import-upload' ) ); ?>\">\n<p>\n<label for=\"upload\"><?php _e( 'Choose a file from your computer:' ); ?></label> (<?php printf( __('Maximum size: %s' ), $size ); ?>)\n<input type=\"file\" id=\"upload\" name=\"import\" size=\"25\" />\n<input type=\"hidden\" name=\"action\" value=\"save\" />\n<input type=\"hidden\" name=\"max_file_size\" value=\"<?php echo $bytes; ?>\" />\n</p>\n<?php submit_button( __('Upload file and import'), 'primary' ); ?>\n</form>\n<?php\n\tendif;\n}\n\n/**\n * Adds a meta box to one or more screens.\n *\n * @since 2.5.0\n * @since 4.4.0 The `$screen` parameter now accepts an array of screen IDs.\n *\n * @global array $wp_meta_boxes\n *\n * @param string                 $id            Meta box ID (used in the 'id' attribute for the meta box).\n * @param string                 $title         Title of the meta box.\n * @param callable               $callback      Function that fills the box with the desired content.\n *                                              The function should echo its output.\n * @param string|array|WP_Screen $screen        Optional. The screen or screens on which to show the box\n *                                              (such as a post type, 'link', or 'comment'). Accepts a single\n *                                              screen ID, WP_Screen object, or array of screen IDs. Default\n *                                              is the current screen.\n * @param string                 $context       Optional. The context within the screen where the boxes\n *                                              should display. Available contexts vary from screen to\n *                                              screen. Post edit screen contexts include 'normal', 'side',\n *                                              and 'advanced'. Comments screen contexts include 'normal'\n *                                              and 'side'. Menus meta boxes (accordion sections) all use\n *                                              the 'side' context. Global default is 'advanced'.\n * @param string                 $priority      Optional. The priority within the context where the boxes\n *                                              should show ('high', 'low'). Default 'default'.\n * @param array                  $callback_args Optional. Data that should be set as the $args property\n *                                              of the box array (which is the second parameter passed\n *                                              to your callback). Default null.\n */\nfunction add_meta_box( $id, $title, $callback, $screen = null, $context = 'advanced', $priority = 'default', $callback_args = null ) {\n\tglobal $wp_meta_boxes;\n\n\tif ( empty( $screen ) ) {\n\t\t$screen = get_current_screen();\n\t} elseif ( is_string( $screen ) ) {\n\t\t$screen = convert_to_screen( $screen );\n\t} elseif ( is_array( $screen ) ) {\n\t\tforeach ( $screen as $single_screen ) {\n\t\t\tadd_meta_box( $id, $title, $callback, $single_screen, $context, $priority, $callback_args );\n\t\t}\n\t}\n\n\tif ( ! isset( $screen->id ) ) {\n\t\treturn;\n\t}\n\n\t$page = $screen->id;\n\n\tif ( !isset($wp_meta_boxes) )\n\t\t$wp_meta_boxes = array();\n\tif ( !isset($wp_meta_boxes[$page]) )\n\t\t$wp_meta_boxes[$page] = array();\n\tif ( !isset($wp_meta_boxes[$page][$context]) )\n\t\t$wp_meta_boxes[$page][$context] = array();\n\n\tforeach ( array_keys($wp_meta_boxes[$page]) as $a_context ) {\n\t\tforeach ( array('high', 'core', 'default', 'low') as $a_priority ) {\n\t\t\tif ( !isset($wp_meta_boxes[$page][$a_context][$a_priority][$id]) )\n\t\t\t\tcontinue;\n\n\t\t\t// If a core box was previously added or removed by a plugin, don't add.\n\t\t\tif ( 'core' == $priority ) {\n\t\t\t\t// If core box previously deleted, don't add\n\t\t\t\tif ( false === $wp_meta_boxes[$page][$a_context][$a_priority][$id] )\n\t\t\t\t\treturn;\n\n\t\t\t\t/*\n\t\t\t\t * If box was added with default priority, give it core priority to\n\t\t\t\t * maintain sort order.\n\t\t\t\t */\n\t\t\t\tif ( 'default' == $a_priority ) {\n\t\t\t\t\t$wp_meta_boxes[$page][$a_context]['core'][$id] = $wp_meta_boxes[$page][$a_context]['default'][$id];\n\t\t\t\t\tunset($wp_meta_boxes[$page][$a_context]['default'][$id]);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If no priority given and id already present, use existing priority.\n\t\t\tif ( empty($priority) ) {\n\t\t\t\t$priority = $a_priority;\n\t\t\t/*\n\t\t\t * Else, if we're adding to the sorted priority, we don't know the title\n\t\t\t * or callback. Grab them from the previously added context/priority.\n\t\t\t */\n\t\t\t} elseif ( 'sorted' == $priority ) {\n\t\t\t\t$title = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['title'];\n\t\t\t\t$callback = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['callback'];\n\t\t\t\t$callback_args = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['args'];\n\t\t\t}\n\t\t\t// An id can be in only one priority and one context.\n\t\t\tif ( $priority != $a_priority || $context != $a_context )\n\t\t\t\tunset($wp_meta_boxes[$page][$a_context][$a_priority][$id]);\n\t\t}\n\t}\n\n\tif ( empty($priority) )\n\t\t$priority = 'low';\n\n\tif ( !isset($wp_meta_boxes[$page][$context][$priority]) )\n\t\t$wp_meta_boxes[$page][$context][$priority] = array();\n\n\t$wp_meta_boxes[$page][$context][$priority][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback, 'args' => $callback_args);\n}\n\n/**\n * Meta-Box template function\n *\n * @since 2.5.0\n *\n * @global array $wp_meta_boxes\n *\n * @staticvar bool $already_sorted\n * @param string|WP_Screen $screen  Screen identifier\n * @param string           $context box context\n * @param mixed            $object  gets passed to the box callback function as first parameter\n * @return int number of meta_boxes\n */\nfunction do_meta_boxes( $screen, $context, $object ) {\n\tglobal $wp_meta_boxes;\n\tstatic $already_sorted = false;\n\n\tif ( empty( $screen ) )\n\t\t$screen = get_current_screen();\n\telseif ( is_string( $screen ) )\n\t\t$screen = convert_to_screen( $screen );\n\n\t$page = $screen->id;\n\n\t$hidden = get_hidden_meta_boxes( $screen );\n\n\tprintf('<div id=\"%s-sortables\" class=\"meta-box-sortables\">', htmlspecialchars($context));\n\n\t// Grab the ones the user has manually sorted. Pull them out of their previous context/priority and into the one the user chose\n\tif ( ! $already_sorted && $sorted = get_user_option( \"meta-box-order_$page\" ) ) {\n\t\tforeach ( $sorted as $box_context => $ids ) {\n\t\t\tforeach ( explode( ',', $ids ) as $id ) {\n\t\t\t\tif ( $id && 'dashboard_browser_nag' !== $id ) {\n\t\t\t\t\tadd_meta_box( $id, null, null, $screen, $box_context, 'sorted' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t$already_sorted = true;\n\n\t$i = 0;\n\n\tif ( isset( $wp_meta_boxes[ $page ][ $context ] ) ) {\n\t\tforeach ( array( 'high', 'sorted', 'core', 'default', 'low' ) as $priority ) {\n\t\t\tif ( isset( $wp_meta_boxes[ $page ][ $context ][ $priority ]) ) {\n\t\t\t\tforeach ( (array) $wp_meta_boxes[ $page ][ $context ][ $priority ] as $box ) {\n\t\t\t\t\tif ( false == $box || ! $box['title'] )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t$i++;\n\t\t\t\t\t$hidden_class = in_array($box['id'], $hidden) ? ' hide-if-js' : '';\n\t\t\t\t\techo '<div id=\"' . $box['id'] . '\" class=\"postbox ' . postbox_classes($box['id'], $page) . $hidden_class . '\" ' . '>' . \"\\n\";\n\t\t\t\t\tif ( 'dashboard_browser_nag' != $box['id'] ) {\n\t\t\t\t\t\techo '<button type=\"button\" class=\"handlediv button-link\" aria-expanded=\"true\">';\n\t\t\t\t\t\techo '<span class=\"screen-reader-text\">' . sprintf( __( 'Toggle panel: %s' ), $box['title'] ) . '</span>';\n\t\t\t\t\t\techo '<span class=\"toggle-indicator\" aria-hidden=\"true\"></span>';\n\t\t\t\t\t\techo '</button>';\n\t\t\t\t\t}\n\t\t\t\t\techo \"<h2 class='hndle'><span>{$box['title']}</span></h2>\\n\";\n\t\t\t\t\techo '<div class=\"inside\">' . \"\\n\";\n\t\t\t\t\tcall_user_func($box['callback'], $object, $box);\n\t\t\t\t\techo \"</div>\\n\";\n\t\t\t\t\techo \"</div>\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\techo \"</div>\";\n\n\treturn $i;\n\n}\n\n/**\n * Removes a meta box from one or more screens.\n *\n * @since 2.6.0\n * @since 4.4.0 The `$screen` parameter now accepts an array of screen IDs.\n *\n * @global array $wp_meta_boxes\n *\n * @param string                 $id      Meta box ID (used in the 'id' attribute for the meta box).\n * @param string|array|WP_Screen $screen  The screen or screens on which the meta box is shown (such as a\n *                                        post type, 'link', or 'comment'). Accepts a single screen ID,\n *                                        WP_Screen object, or array of screen IDs.\n * @param string                 $context Optional. The context within the screen where the boxes\n *                                        should display. Available contexts vary from screen to\n *                                        screen. Post edit screen contexts include 'normal', 'side',\n *                                        and 'advanced'. Comments screen contexts include 'normal'\n *                                        and 'side'. Menus meta boxes (accordion sections) all use\n *                                        the 'side' context. Global default is 'advanced'.\n */\nfunction remove_meta_box( $id, $screen, $context ) {\n\tglobal $wp_meta_boxes;\n\n\tif ( empty( $screen ) ) {\n\t\t$screen = get_current_screen();\n\t} elseif ( is_string( $screen ) ) {\n\t\t$screen = convert_to_screen( $screen );\n\t} elseif ( is_array( $screen ) ) {\n\t\tforeach ( $screen as $single_screen ) {\n\t\t\tremove_meta_box( $id, $single_screen, $context );\n\t\t}\n\t}\n\n\tif ( ! isset( $screen->id ) ) {\n\t\treturn;\n\t}\n\n\t$page = $screen->id;\n\n\tif ( !isset($wp_meta_boxes) )\n\t\t$wp_meta_boxes = array();\n\tif ( !isset($wp_meta_boxes[$page]) )\n\t\t$wp_meta_boxes[$page] = array();\n\tif ( !isset($wp_meta_boxes[$page][$context]) )\n\t\t$wp_meta_boxes[$page][$context] = array();\n\n\tforeach ( array('high', 'core', 'default', 'low') as $priority )\n\t\t$wp_meta_boxes[$page][$context][$priority][$id] = false;\n}\n\n/**\n * Meta Box Accordion Template Function\n *\n * Largely made up of abstracted code from {@link do_meta_boxes()}, this\n * function serves to build meta boxes as list items for display as\n * a collapsible accordion.\n *\n * @since 3.6.0\n *\n * @uses global $wp_meta_boxes Used to retrieve registered meta boxes.\n *\n * @param string|object $screen  The screen identifier.\n * @param string        $context The meta box context.\n * @param mixed         $object  gets passed to the section callback function as first parameter.\n * @return int number of meta boxes as accordion sections.\n */\nfunction do_accordion_sections( $screen, $context, $object ) {\n\tglobal $wp_meta_boxes;\n\n\twp_enqueue_script( 'accordion' );\n\n\tif ( empty( $screen ) )\n\t\t$screen = get_current_screen();\n\telseif ( is_string( $screen ) )\n\t\t$screen = convert_to_screen( $screen );\n\n\t$page = $screen->id;\n\n\t$hidden = get_hidden_meta_boxes( $screen );\n\t?>\n\t<div id=\"side-sortables\" class=\"accordion-container\">\n\t\t<ul class=\"outer-border\">\n\t<?php\n\t$i = 0;\n\t$first_open = false;\n\n\tif ( isset( $wp_meta_boxes[ $page ][ $context ] ) ) {\n\t\tforeach ( array( 'high', 'core', 'default', 'low' ) as $priority ) {\n\t\t\tif ( isset( $wp_meta_boxes[ $page ][ $context ][ $priority ] ) ) {\n\t\t\t\tforeach ( $wp_meta_boxes[ $page ][ $context ][ $priority ] as $box ) {\n\t\t\t\t\tif ( false == $box || ! $box['title'] )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t$i++;\n\t\t\t\t\t$hidden_class = in_array( $box['id'], $hidden ) ? 'hide-if-js' : '';\n\n\t\t\t\t\t$open_class = '';\n\t\t\t\t\tif ( ! $first_open && empty( $hidden_class ) ) {\n\t\t\t\t\t\t$first_open = true;\n\t\t\t\t\t\t$open_class = 'open';\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\t\t\t\t\t<li class=\"control-section accordion-section <?php echo $hidden_class; ?> <?php echo $open_class; ?> <?php echo esc_attr( $box['id'] ); ?>\" id=\"<?php echo esc_attr( $box['id'] ); ?>\">\n\t\t\t\t\t\t<h3 class=\"accordion-section-title hndle\" tabindex=\"0\">\n\t\t\t\t\t\t\t<?php echo esc_html( $box['title'] ); ?>\n\t\t\t\t\t\t\t<span class=\"screen-reader-text\"><?php _e( 'Press return or enter to open this section' ); ?></span>\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<div class=\"accordion-section-content <?php postbox_classes( $box['id'], $page ); ?>\">\n\t\t\t\t\t\t\t<div class=\"inside\">\n\t\t\t\t\t\t\t\t<?php call_user_func( $box['callback'], $object, $box ); ?>\n\t\t\t\t\t\t\t</div><!-- .inside -->\n\t\t\t\t\t\t</div><!-- .accordion-section-content -->\n\t\t\t\t\t</li><!-- .accordion-section -->\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t?>\n\t\t</ul><!-- .outer-border -->\n\t</div><!-- .accordion-container -->\n\t<?php\n\treturn $i;\n}\n\n/**\n * Add a new section to a settings page.\n *\n * Part of the Settings API. Use this to define new settings sections for an admin page.\n * Show settings sections in your admin page callback function with do_settings_sections().\n * Add settings fields to your section with add_settings_field()\n *\n * The $callback argument should be the name of a function that echoes out any\n * content you want to show at the top of the settings section before the actual\n * fields. It can output nothing if you want.\n *\n * @since 2.7.0\n *\n * @global $wp_settings_sections Storage array of all settings sections added to admin pages\n *\n * @param string   $id       Slug-name to identify the section. Used in the 'id' attribute of tags.\n * @param string   $title    Formatted title of the section. Shown as the heading for the section.\n * @param callable $callback Function that echos out any content at the top of the section (between heading and fields).\n * @param string   $page     The slug-name of the settings page on which to show the section. Built-in pages include\n *                           'general', 'reading', 'writing', 'discussion', 'media', etc. Create your own using\n *                           add_options_page();\n */\nfunction add_settings_section($id, $title, $callback, $page) {\n\tglobal $wp_settings_sections;\n\n\tif ( 'misc' == $page ) {\n\t\t_deprecated_argument( __FUNCTION__, '3.0', sprintf( __( 'The \"%s\" options group has been removed. Use another settings group.' ), 'misc' ) );\n\t\t$page = 'general';\n\t}\n\n\tif ( 'privacy' == $page ) {\n\t\t_deprecated_argument( __FUNCTION__, '3.5', sprintf( __( 'The \"%s\" options group has been removed. Use another settings group.' ), 'privacy' ) );\n\t\t$page = 'reading';\n\t}\n\n\t$wp_settings_sections[$page][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback);\n}\n\n/**\n * Add a new field to a section of a settings page\n *\n * Part of the Settings API. Use this to define a settings field that will show\n * as part of a settings section inside a settings page. The fields are shown using\n * do_settings_fields() in do_settings-sections()\n *\n * The $callback argument should be the name of a function that echoes out the\n * html input tags for this setting field. Use get_option() to retrieve existing\n * values to show.\n *\n * @since 2.7.0\n * @since 4.2.0 The `$class` argument was added.\n *\n * @global $wp_settings_fields Storage array of settings fields and info about their pages/sections\n *\n * @param string   $id       Slug-name to identify the field. Used in the 'id' attribute of tags.\n * @param string   $title    Formatted title of the field. Shown as the label for the field\n *                           during output.\n * @param callable $callback Function that fills the field with the desired form inputs. The\n *                           function should echo its output.\n * @param string   $page     The slug-name of the settings page on which to show the section\n *                           (general, reading, writing, ...).\n * @param string   $section  Optional. The slug-name of the section of the settings page\n *                           in which to show the box. Default 'default'.\n * @param array    $args {\n *     Optional. Extra arguments used when outputting the field.\n *\n *     @type string $label_for When supplied, the setting title will be wrapped\n *                             in a `<label>` element, its `for` attribute populated\n *                             with this value.\n *     @type string $class     CSS Class to be added to the `<tr>` element when the\n *                             field is output.\n * }\n */\nfunction add_settings_field($id, $title, $callback, $page, $section = 'default', $args = array()) {\n\tglobal $wp_settings_fields;\n\n\tif ( 'misc' == $page ) {\n\t\t_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );\n\t\t$page = 'general';\n\t}\n\n\tif ( 'privacy' == $page ) {\n\t\t_deprecated_argument( __FUNCTION__, '3.5', __( 'The privacy options group has been removed. Use another settings group.' ) );\n\t\t$page = 'reading';\n\t}\n\n\t$wp_settings_fields[$page][$section][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback, 'args' => $args);\n}\n\n/**\n * Prints out all settings sections added to a particular settings page\n *\n * Part of the Settings API. Use this in a settings page callback function\n * to output all the sections and fields that were added to that $page with\n * add_settings_section() and add_settings_field()\n *\n * @global $wp_settings_sections Storage array of all settings sections added to admin pages\n * @global $wp_settings_fields Storage array of settings fields and info about their pages/sections\n * @since 2.7.0\n *\n * @param string $page The slug name of the page whose settings sections you want to output\n */\nfunction do_settings_sections( $page ) {\n\tglobal $wp_settings_sections, $wp_settings_fields;\n\n\tif ( ! isset( $wp_settings_sections[$page] ) )\n\t\treturn;\n\n\tforeach ( (array) $wp_settings_sections[$page] as $section ) {\n\t\tif ( $section['title'] )\n\t\t\techo \"<h2>{$section['title']}</h2>\\n\";\n\n\t\tif ( $section['callback'] )\n\t\t\tcall_user_func( $section['callback'], $section );\n\n\t\tif ( ! isset( $wp_settings_fields ) || !isset( $wp_settings_fields[$page] ) || !isset( $wp_settings_fields[$page][$section['id']] ) )\n\t\t\tcontinue;\n\t\techo '<table class=\"form-table\">';\n\t\tdo_settings_fields( $page, $section['id'] );\n\t\techo '</table>';\n\t}\n}\n\n/**\n * Print out the settings fields for a particular settings section\n *\n * Part of the Settings API. Use this in a settings page to output\n * a specific section. Should normally be called by do_settings_sections()\n * rather than directly.\n *\n * @global $wp_settings_fields Storage array of settings fields and their pages/sections\n *\n * @since 2.7.0\n *\n * @param string $page Slug title of the admin page who's settings fields you want to show.\n * @param string $section Slug title of the settings section who's fields you want to show.\n */\nfunction do_settings_fields($page, $section) {\n\tglobal $wp_settings_fields;\n\n\tif ( ! isset( $wp_settings_fields[$page][$section] ) )\n\t\treturn;\n\n\tforeach ( (array) $wp_settings_fields[$page][$section] as $field ) {\n\t\t$class = '';\n\n\t\tif ( ! empty( $field['args']['class'] ) ) {\n\t\t\t$class = ' class=\"' . esc_attr( $field['args']['class'] ) . '\"';\n\t\t}\n\n\t\techo \"<tr{$class}>\";\n\n\t\tif ( ! empty( $field['args']['label_for'] ) ) {\n\t\t\techo '<th scope=\"row\"><label for=\"' . esc_attr( $field['args']['label_for'] ) . '\">' . $field['title'] . '</label></th>';\n\t\t} else {\n\t\t\techo '<th scope=\"row\">' . $field['title'] . '</th>';\n\t\t}\n\n\t\techo '<td>';\n\t\tcall_user_func($field['callback'], $field['args']);\n\t\techo '</td>';\n\t\techo '</tr>';\n\t}\n}\n\n/**\n * Register a settings error to be displayed to the user\n *\n * Part of the Settings API. Use this to show messages to users about settings validation\n * problems, missing settings or anything else.\n *\n * Settings errors should be added inside the $sanitize_callback function defined in\n * register_setting() for a given setting to give feedback about the submission.\n *\n * By default messages will show immediately after the submission that generated the error.\n * Additional calls to settings_errors() can be used to show errors even when the settings\n * page is first accessed.\n *\n * @since 3.0.0\n *\n * @global array $wp_settings_errors Storage array of errors registered during this pageload\n *\n * @param string $setting Slug title of the setting to which this error applies\n * @param string $code    Slug-name to identify the error. Used as part of 'id' attribute in HTML output.\n * @param string $message The formatted message text to display to the user (will be shown inside styled\n *                        `<div>` and `<p>` tags).\n * @param string $type    Optional. Message type, controls HTML class. Accepts 'error' or 'updated'.\n *                        Default 'error'.\n */\nfunction add_settings_error( $setting, $code, $message, $type = 'error' ) {\n\tglobal $wp_settings_errors;\n\n\t$wp_settings_errors[] = array(\n\t\t'setting' => $setting,\n\t\t'code'    => $code,\n\t\t'message' => $message,\n\t\t'type'    => $type\n\t);\n}\n\n/**\n * Fetch settings errors registered by add_settings_error()\n *\n * Checks the $wp_settings_errors array for any errors declared during the current\n * pageload and returns them.\n *\n * If changes were just submitted ($_GET['settings-updated']) and settings errors were saved\n * to the 'settings_errors' transient then those errors will be returned instead. This\n * is used to pass errors back across pageloads.\n *\n * Use the $sanitize argument to manually re-sanitize the option before returning errors.\n * This is useful if you have errors or notices you want to show even when the user\n * hasn't submitted data (i.e. when they first load an options page, or in admin_notices action hook)\n *\n * @since 3.0.0\n *\n * @global array $wp_settings_errors Storage array of errors registered during this pageload\n *\n * @param string $setting Optional slug title of a specific setting who's errors you want.\n * @param boolean $sanitize Whether to re-sanitize the setting value before returning errors.\n * @return array Array of settings errors\n */\nfunction get_settings_errors( $setting = '', $sanitize = false ) {\n\tglobal $wp_settings_errors;\n\n\t/*\n\t * If $sanitize is true, manually re-run the sanitization for this option\n\t * This allows the $sanitize_callback from register_setting() to run, adding\n\t * any settings errors you want to show by default.\n\t */\n\tif ( $sanitize )\n\t\tsanitize_option( $setting, get_option( $setting ) );\n\n\t// If settings were passed back from options.php then use them.\n\tif ( isset( $_GET['settings-updated'] ) && $_GET['settings-updated'] && get_transient( 'settings_errors' ) ) {\n\t\t$wp_settings_errors = array_merge( (array) $wp_settings_errors, get_transient( 'settings_errors' ) );\n\t\tdelete_transient( 'settings_errors' );\n\t}\n\n\t// Check global in case errors have been added on this pageload.\n\tif ( ! count( $wp_settings_errors ) )\n\t\treturn array();\n\n\t// Filter the results to those of a specific setting if one was set.\n\tif ( $setting ) {\n\t\t$setting_errors = array();\n\t\tforeach ( (array) $wp_settings_errors as $key => $details ) {\n\t\t\tif ( $setting == $details['setting'] )\n\t\t\t\t$setting_errors[] = $wp_settings_errors[$key];\n\t\t}\n\t\treturn $setting_errors;\n\t}\n\n\treturn $wp_settings_errors;\n}\n\n/**\n * Display settings errors registered by {@see add_settings_error()}.\n *\n * Part of the Settings API. Outputs a div for each error retrieved by\n * {@see get_settings_errors()}.\n *\n * This is called automatically after a settings page based on the\n * Settings API is submitted. Errors should be added during the validation\n * callback function for a setting defined in {@see register_setting()}\n *\n * The $sanitize option is passed into {@see get_settings_errors()} and will\n * re-run the setting sanitization\n * on its current value.\n *\n * The $hide_on_update option will cause errors to only show when the settings\n * page is first loaded. if the user has already saved new values it will be\n * hidden to avoid repeating messages already shown in the default error\n * reporting after submission. This is useful to show general errors like\n * missing settings when the user arrives at the settings page.\n *\n * @since 3.0.0\n *\n * @param string $setting        Optional slug title of a specific setting who's errors you want.\n * @param bool   $sanitize       Whether to re-sanitize the setting value before returning errors.\n * @param bool   $hide_on_update If set to true errors will not be shown if the settings page has already been submitted.\n */\nfunction settings_errors( $setting = '', $sanitize = false, $hide_on_update = false ) {\n\n\tif ( $hide_on_update && ! empty( $_GET['settings-updated'] ) )\n\t\treturn;\n\n\t$settings_errors = get_settings_errors( $setting, $sanitize );\n\n\tif ( empty( $settings_errors ) )\n\t\treturn;\n\n\t$output = '';\n\tforeach ( $settings_errors as $key => $details ) {\n\t\t$css_id = 'setting-error-' . $details['code'];\n\t\t$css_class = $details['type'] . ' settings-error notice is-dismissible';\n\t\t$output .= \"<div id='$css_id' class='$css_class'> \\n\";\n\t\t$output .= \"<p><strong>{$details['message']}</strong></p>\";\n\t\t$output .= \"</div> \\n\";\n\t}\n\techo $output;\n}\n\n/**\n * Outputs the modal window used for attaching media to posts or pages in the media-listing screen.\n *\n * @since 2.7.0\n *\n * @param string $found_action\n */\nfunction find_posts_div($found_action = '') {\n?>\n\t<div id=\"find-posts\" class=\"find-box\" style=\"display: none;\">\n\t\t<div id=\"find-posts-head\" class=\"find-box-head\">\n\t\t\t<?php _e( 'Attach to existing content' ); ?>\n\t\t\t<div id=\"find-posts-close\"></div>\n\t\t</div>\n\t\t<div class=\"find-box-inside\">\n\t\t\t<div class=\"find-box-search\">\n\t\t\t\t<?php if ( $found_action ) { ?>\n\t\t\t\t\t<input type=\"hidden\" name=\"found_action\" value=\"<?php echo esc_attr($found_action); ?>\" />\n\t\t\t\t<?php } ?>\n\t\t\t\t<input type=\"hidden\" name=\"affected\" id=\"affected\" value=\"\" />\n\t\t\t\t<?php wp_nonce_field( 'find-posts', '_ajax_nonce', false ); ?>\n\t\t\t\t<label class=\"screen-reader-text\" for=\"find-posts-input\"><?php _e( 'Search' ); ?></label>\n\t\t\t\t<input type=\"text\" id=\"find-posts-input\" name=\"ps\" value=\"\" />\n\t\t\t\t<span class=\"spinner\"></span>\n\t\t\t\t<input type=\"button\" id=\"find-posts-search\" value=\"<?php esc_attr_e( 'Search' ); ?>\" class=\"button\" />\n\t\t\t\t<div class=\"clear\"></div>\n\t\t\t</div>\n\t\t\t<div id=\"find-posts-response\"></div>\n\t\t</div>\n\t\t<div class=\"find-box-buttons\">\n\t\t\t<?php submit_button( __( 'Select' ), 'button-primary alignright', 'find-posts-submit', false ); ?>\n\t\t\t<div class=\"clear\"></div>\n\t\t</div>\n\t</div>\n<?php\n}\n\n/**\n * Display the post password.\n *\n * The password is passed through {@link esc_attr()} to ensure that it\n * is safe for placing in an html attribute.\n *\n * @since 2.7.0\n */\nfunction the_post_password() {\n\t$post = get_post();\n\tif ( isset( $post->post_password ) )\n\t\techo esc_attr( $post->post_password );\n}\n\n/**\n * Get the post title.\n *\n * The post title is fetched and if it is blank then a default string is\n * returned.\n *\n * @since 2.7.0\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.\n * @return string The post title if set.\n */\nfunction _draft_or_post_title( $post = 0 ) {\n\t$title = get_the_title( $post );\n\tif ( empty( $title ) )\n\t\t$title = __( '(no title)' );\n\treturn esc_html( $title );\n}\n\n/**\n * Display the search query.\n *\n * A simple wrapper to display the \"s\" parameter in a GET URI. This function\n * should only be used when {@link the_search_query()} cannot.\n *\n * @since 2.7.0\n */\nfunction _admin_search_query() {\n\techo isset($_REQUEST['s']) ? esc_attr( wp_unslash( $_REQUEST['s'] ) ) : '';\n}\n\n/**\n * Generic Iframe header for use with Thickbox\n *\n * @since 2.7.0\n *\n * @global string    $hook_suffix\n * @global string    $admin_body_class\n * @global WP_Locale $wp_locale\n *\n * @param string $title      Optional. Title of the Iframe page. Default empty.\n * @param bool   $deprecated Not used.\n */\nfunction iframe_header( $title = '', $deprecated = false ) {\n\tshow_admin_bar( false );\n\tglobal $hook_suffix, $admin_body_class, $wp_locale;\n\t$admin_body_class = preg_replace('/[^a-z0-9_-]+/i', '-', $hook_suffix);\n\n\t$current_screen = get_current_screen();\n\n\t@header( 'Content-Type: ' . get_option( 'html_type' ) . '; charset=' . get_option( 'blog_charset' ) );\n\t_wp_admin_html_begin();\n?>\n<title><?php bloginfo('name') ?> &rsaquo; <?php echo $title ?> &#8212; <?php _e('WordPress'); ?></title>\n<?php\nwp_enqueue_style( 'colors' );\n?>\n<script type=\"text/javascript\">\naddLoadEvent = function(func){if(typeof jQuery!=\"undefined\")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};\nfunction tb_close(){var win=window.dialogArguments||opener||parent||top;win.tb_remove();}\nvar ajaxurl = '<?php echo admin_url( 'admin-ajax.php', 'relative' ); ?>',\n\tpagenow = '<?php echo $current_screen->id; ?>',\n\ttypenow = '<?php echo $current_screen->post_type; ?>',\n\tadminpage = '<?php echo $admin_body_class; ?>',\n\tthousandsSeparator = '<?php echo addslashes( $wp_locale->number_format['thousands_sep'] ); ?>',\n\tdecimalPoint = '<?php echo addslashes( $wp_locale->number_format['decimal_point'] ); ?>',\n\tisRtl = <?php echo (int) is_rtl(); ?>;\n</script>\n<?php\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( 'admin_enqueue_scripts', $hook_suffix );\n\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( \"admin_print_styles-$hook_suffix\" );\n\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( 'admin_print_styles' );\n\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( \"admin_print_scripts-$hook_suffix\" );\n\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( 'admin_print_scripts' );\n\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( \"admin_head-$hook_suffix\" );\n\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( 'admin_head' );\n\n$admin_body_class .= ' locale-' . sanitize_html_class( strtolower( str_replace( '_', '-', get_locale() ) ) );\n\nif ( is_rtl() )\n\t$admin_body_class .= ' rtl';\n\n?>\n</head>\n<?php\n/** This filter is documented in wp-admin/admin-header.php */\n$admin_body_classes = apply_filters( 'admin_body_class', '' );\n?>\n<body<?php\n/**\n * @global string $body_id\n */\nif ( isset($GLOBALS['body_id']) ) echo ' id=\"' . $GLOBALS['body_id'] . '\"'; ?> class=\"wp-admin wp-core-ui no-js iframe <?php echo $admin_body_classes . ' ' . $admin_body_class; ?>\">\n<script type=\"text/javascript\">\n(function(){\nvar c = document.body.className;\nc = c.replace(/no-js/, 'js');\ndocument.body.className = c;\n})();\n</script>\n<?php\n}\n\n/**\n * Generic Iframe footer for use with Thickbox\n *\n * @since 2.7.0\n */\nfunction iframe_footer() {\n\t/*\n\t * We're going to hide any footer output on iFrame pages,\n\t * but run the hooks anyway since they output JavaScript\n\t * or other needed content.\n\t */\n\t ?>\n\t<div class=\"hidden\">\n<?php\n\t/** This action is documented in wp-admin/admin-footer.php */\n\tdo_action( 'admin_footer', '' );\n\n\t/** This action is documented in wp-admin/admin-footer.php */\n\tdo_action( 'admin_print_footer_scripts' );\n?>\n\t</div>\n<script type=\"text/javascript\">if(typeof wpOnload==\"function\")wpOnload();</script>\n</body>\n</html>\n<?php\n}\n\n/**\n *\n * @param WP_Post $post\n */\nfunction _post_states($post) {\n\t$post_states = array();\n\tif ( isset( $_REQUEST['post_status'] ) )\n\t\t$post_status = $_REQUEST['post_status'];\n\telse\n\t\t$post_status = '';\n\n\tif ( !empty($post->post_password) )\n\t\t$post_states['protected'] = __('Password protected');\n\tif ( 'private' == $post->post_status && 'private' != $post_status )\n\t\t$post_states['private'] = __('Private');\n\tif ( 'draft' == $post->post_status && 'draft' != $post_status )\n\t\t$post_states['draft'] = __('Draft');\n\tif ( 'pending' == $post->post_status && 'pending' != $post_status )\n\t\t$post_states['pending'] = _x('Pending', 'post status');\n\tif ( is_sticky($post->ID) )\n\t\t$post_states['sticky'] = __('Sticky');\n\n\tif ( 'future' === $post->post_status ) {\n\t\t$post_states['scheduled'] = __( 'Scheduled' );\n\t}\n\n\tif ( 'page' === get_option( 'show_on_front' ) ) {\n\t\tif ( intval( get_option( 'page_on_front' ) ) === $post->ID ) {\n\t\t\t$post_states['page_on_front'] = __( 'Front Page' );\n\t\t}\n\n\t\tif ( intval( get_option( 'page_for_posts' ) ) === $post->ID ) {\n\t\t\t$post_states['page_for_posts'] = __( 'Posts Page' );\n\t\t}\n\t}\n\n\t/**\n\t * Filter the default post display states used in the posts list table.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param array   $post_states An array of post display states.\n\t * @param WP_Post $post        The current post object.\n\t */\n\t$post_states = apply_filters( 'display_post_states', $post_states, $post );\n\n\tif ( ! empty($post_states) ) {\n\t\t$state_count = count($post_states);\n\t\t$i = 0;\n\t\techo ' &mdash; ';\n\t\tforeach ( $post_states as $state ) {\n\t\t\t++$i;\n\t\t\t( $i == $state_count ) ? $sep = '' : $sep = ', ';\n\t\t\techo \"<span class='post-state'>$state$sep</span>\";\n\t\t}\n\t}\n\n}\n\n/**\n *\n * @param WP_Post $post\n */\nfunction _media_states( $post ) {\n\t$media_states = array();\n\t$stylesheet = get_option('stylesheet');\n\n\tif ( current_theme_supports( 'custom-header') ) {\n\t\t$meta_header = get_post_meta($post->ID, '_wp_attachment_is_custom_header', true );\n\t\tif ( ! empty( $meta_header ) && $meta_header == $stylesheet )\n\t\t\t$media_states[] = __( 'Header Image' );\n\t}\n\n\tif ( current_theme_supports( 'custom-background') ) {\n\t\t$meta_background = get_post_meta($post->ID, '_wp_attachment_is_custom_background', true );\n\t\tif ( ! empty( $meta_background ) && $meta_background == $stylesheet )\n\t\t\t$media_states[] = __( 'Background Image' );\n\t}\n\n\tif ( $post->ID == get_option( 'site_icon' ) ) {\n\t\t$media_states[] = __( 'Site Icon' );\n\t}\n\n\tif ( $post->ID == get_theme_mod( 'site_logo' ) ) {\n\t\t$media_states[] = __( 'Logo' );\n\t}\n\n\t/**\n\t * Filter the default media display states for items in the Media list table.\n\t *\n\t * @since 3.2.0\n\t *\n\t * @param array $media_states An array of media states. Default 'Header Image',\n\t *                            'Background Image', 'Site Icon', 'Logo'.\n\t */\n\t$media_states = apply_filters( 'display_media_states', $media_states );\n\n\tif ( ! empty( $media_states ) ) {\n\t\t$state_count = count( $media_states );\n\t\t$i = 0;\n\t\techo ' &mdash; ';\n\t\tforeach ( $media_states as $state ) {\n\t\t\t++$i;\n\t\t\t( $i == $state_count ) ? $sep = '' : $sep = ', ';\n\t\t\techo \"<span class='post-state'>$state$sep</span>\";\n\t\t}\n\t}\n}\n\n/**\n * Test support for compressing JavaScript from PHP\n *\n * Outputs JavaScript that tests if compression from PHP works as expected\n * and sets an option with the result. Has no effect when the current user\n * is not an administrator. To run the test again the option 'can_compress_scripts'\n * has to be deleted.\n *\n * @since 2.8.0\n */\nfunction compression_test() {\n?>\n\t<script type=\"text/javascript\">\n\tvar testCompression = {\n\t\tget : function(test) {\n\t\t\tvar x;\n\t\t\tif ( window.XMLHttpRequest ) {\n\t\t\t\tx = new XMLHttpRequest();\n\t\t\t} else {\n\t\t\t\ttry{x=new ActiveXObject('Msxml2.XMLHTTP');}catch(e){try{x=new ActiveXObject('Microsoft.XMLHTTP');}catch(e){};}\n\t\t\t}\n\n\t\t\tif (x) {\n\t\t\t\tx.onreadystatechange = function() {\n\t\t\t\t\tvar r, h;\n\t\t\t\t\tif ( x.readyState == 4 ) {\n\t\t\t\t\t\tr = x.responseText.substr(0, 18);\n\t\t\t\t\t\th = x.getResponseHeader('Content-Encoding');\n\t\t\t\t\t\ttestCompression.check(r, h, test);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tx.open('GET', ajaxurl + '?action=wp-compression-test&test='+test+'&'+(new Date()).getTime(), true);\n\t\t\t\tx.send('');\n\t\t\t}\n\t\t},\n\n\t\tcheck : function(r, h, test) {\n\t\t\tif ( ! r && ! test )\n\t\t\t\tthis.get(1);\n\n\t\t\tif ( 1 == test ) {\n\t\t\t\tif ( h && ( h.match(/deflate/i) || h.match(/gzip/i) ) )\n\t\t\t\t\tthis.get('no');\n\t\t\t\telse\n\t\t\t\t\tthis.get(2);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( 2 == test ) {\n\t\t\t\tif ( '\"wpCompressionTest' == r )\n\t\t\t\t\tthis.get('yes');\n\t\t\t\telse\n\t\t\t\t\tthis.get('no');\n\t\t\t}\n\t\t}\n\t};\n\ttestCompression.check();\n\t</script>\n<?php\n}\n\n/**\n * Echoes a submit button, with provided text and appropriate class(es).\n *\n * @since 3.1.0\n *\n * @see get_submit_button()\n *\n * @param string       $text             The text of the button (defaults to 'Save Changes')\n * @param string       $type             Optional. The type and CSS class(es) of the button. Core values\n *                                       include 'primary', 'secondary', 'delete'. Default 'primary'\n * @param string       $name             The HTML name of the submit button. Defaults to \"submit\". If no\n *                                       id attribute is given in $other_attributes below, $name will be\n *                                       used as the button's id.\n * @param bool         $wrap             True if the output button should be wrapped in a paragraph tag,\n *                                       false otherwise. Defaults to true\n * @param array|string $other_attributes Other attributes that should be output with the button, mapping\n *                                       attributes to their values, such as setting tabindex to 1, etc.\n *                                       These key/value attribute pairs will be output as attribute=\"value\",\n *                                       where attribute is the key. Other attributes can also be provided\n *                                       as a string such as 'tabindex=\"1\"', though the array format is\n *                                       preferred. Default null.\n */\nfunction submit_button( $text = null, $type = 'primary', $name = 'submit', $wrap = true, $other_attributes = null ) {\n\techo get_submit_button( $text, $type, $name, $wrap, $other_attributes );\n}\n\n/**\n * Returns a submit button, with provided text and appropriate class\n *\n * @since 3.1.0\n *\n * @param string       $text             Optional. The text of the button. Default 'Save Changes'.\n * @param string       $type             Optional. The type of button. Accepts 'primary', 'secondary',\n *                                       or 'delete'. Default 'primary large'.\n * @param string       $name             Optional. The HTML name of the submit button. Defaults to \"submit\".\n *                                       If no id attribute is given in $other_attributes below, `$name` will\n *                                       be used as the button's id. Default 'submit'.\n * @param bool         $wrap             Optional. True if the output button should be wrapped in a paragraph\n *                                       tag, false otherwise. Default true.\n * @param array|string $other_attributes Optional. Other attributes that should be output with the button,\n *                                       mapping attributes to their values, such as `array( 'tabindex' => '1' )`.\n *                                       These attributes will be output as `attribute=\"value\"`, such as\n *                                       `tabindex=\"1\"`. Other attributes can also be provided as a string such\n *                                       as `tabindex=\"1\"`, though the array format is typically cleaner.\n *                                       Default empty.\n * @return string Submit button HTML.\n */\nfunction get_submit_button( $text = '', $type = 'primary large', $name = 'submit', $wrap = true, $other_attributes = '' ) {\n\tif ( ! is_array( $type ) )\n\t\t$type = explode( ' ', $type );\n\n\t$button_shorthand = array( 'primary', 'small', 'large' );\n\t$classes = array( 'button' );\n\tforeach ( $type as $t ) {\n\t\tif ( 'secondary' === $t || 'button-secondary' === $t )\n\t\t\tcontinue;\n\t\t$classes[] = in_array( $t, $button_shorthand ) ? 'button-' . $t : $t;\n\t}\n\t$class = implode( ' ', array_unique( $classes ) );\n\n\tif ( 'delete' === $type )\n\t\t$class = 'button-secondary delete';\n\n\t$text = $text ? $text : __( 'Save Changes' );\n\n\t// Default the id attribute to $name unless an id was specifically provided in $other_attributes\n\t$id = $name;\n\tif ( is_array( $other_attributes ) && isset( $other_attributes['id'] ) ) {\n\t\t$id = $other_attributes['id'];\n\t\tunset( $other_attributes['id'] );\n\t}\n\n\t$attributes = '';\n\tif ( is_array( $other_attributes ) ) {\n\t\tforeach ( $other_attributes as $attribute => $value ) {\n\t\t\t$attributes .= $attribute . '=\"' . esc_attr( $value ) . '\" '; // Trailing space is important\n\t\t}\n\t} elseif ( ! empty( $other_attributes ) ) { // Attributes provided as a string\n\t\t$attributes = $other_attributes;\n\t}\n\n\t// Don't output empty name and id attributes.\n\t$name_attr = $name ? ' name=\"' . esc_attr( $name ) . '\"' : '';\n\t$id_attr = $id ? ' id=\"' . esc_attr( $id ) . '\"' : '';\n\n\t$button = '<input type=\"submit\"' . $name_attr . $id_attr . ' class=\"' . esc_attr( $class );\n\t$button\t.= '\" value=\"' . esc_attr( $text ) . '\" ' . $attributes . ' />';\n\n\tif ( $wrap ) {\n\t\t$button = '<p class=\"submit\">' . $button . '</p>';\n\t}\n\n\treturn $button;\n}\n\n/**\n *\n * @global bool $is_IE\n */\nfunction _wp_admin_html_begin() {\n\tglobal $is_IE;\n\n\t$admin_html_class = ( is_admin_bar_showing() ) ? 'wp-toolbar' : '';\n\n\tif ( $is_IE )\n\t\t@header('X-UA-Compatible: IE=edge');\n\n?>\n<!DOCTYPE html>\n<!--[if IE 8]>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" class=\"ie8 <?php echo $admin_html_class; ?>\" <?php\n\t/**\n\t * Fires inside the HTML tag in the admin header.\n\t *\n\t * @since 2.2.0\n\t */\n\tdo_action( 'admin_xml_ns' );\n?> <?php language_attributes(); ?>>\n<![endif]-->\n<!--[if !(IE 8) ]><!-->\n<html xmlns=\"http://www.w3.org/1999/xhtml\" class=\"<?php echo $admin_html_class; ?>\" <?php\n\t/** This action is documented in wp-admin/includes/template.php */\n\tdo_action( 'admin_xml_ns' );\n?> <?php language_attributes(); ?>>\n<!--<![endif]-->\n<head>\n<meta http-equiv=\"Content-Type\" content=\"<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>\" />\n<?php\n}\n\n/**\n * Convert a screen string to a screen object\n *\n * @since 3.0.0\n *\n * @param string $hook_name The hook name (also known as the hook suffix) used to determine the screen.\n * @return WP_Screen Screen object.\n */\nfunction convert_to_screen( $hook_name ) {\n\tif ( ! class_exists( 'WP_Screen', false ) ) {\n\t\t_doing_it_wrong( 'convert_to_screen(), add_meta_box()', __( \"Likely direct inclusion of wp-admin/includes/template.php in order to use add_meta_box(). This is very wrong. Hook the add_meta_box() call into the add_meta_boxes action instead.\" ), '3.3' );\n\t\treturn (object) array( 'id' => '_invalid', 'base' => '_are_belong_to_us' );\n\t}\n\n\treturn WP_Screen::get( $hook_name );\n}\n\n/**\n * Output the HTML for restoring the post data from DOM storage\n *\n * @since 3.6.0\n * @access private\n */\nfunction _local_storage_notice() {\n\t?>\n\t<div id=\"local-storage-notice\" class=\"hidden notice\">\n\t<p class=\"local-restore\">\n\t\t<?php _e('The backup of this post in your browser is different from the version below.'); ?>\n\t\t<a class=\"restore-backup\" href=\"#\"><?php _e('Restore the backup.'); ?></a>\n\t</p>\n\t<p class=\"undo-restore hidden\">\n\t\t<?php _e('Post restored successfully.'); ?>\n\t\t<a class=\"undo-restore-backup\" href=\"#\"><?php _e('Undo.'); ?></a>\n\t</p>\n\t</div>\n\t<?php\n}\n\n/**\n * Output a HTML element with a star rating for a given rating.\n *\n * Outputs a HTML element with the star rating exposed on a 0..5 scale in\n * half star increments (ie. 1, 1.5, 2 stars). Optionally, if specified, the\n * number of ratings may also be displayed by passing the $number parameter.\n *\n * @since 3.8.0\n * @since 4.4.0 Introduced the `echo` parameter.\n *\n * @param array $args {\n *     Optional. Array of star ratings arguments.\n *\n *     @type int    $rating The rating to display, expressed in either a 0.5 rating increment,\n *                          or percentage. Default 0.\n *     @type string $type   Format that the $rating is in. Valid values are 'rating' (default),\n *                          or, 'percent'. Default 'rating'.\n *     @type int    $number The number of ratings that makes up this rating. Default 0.\n *     @type bool   $echo   Whether to echo the generated markup. False to return the markup instead\n *                          of echoing it. Default true.\n * }\n */\nfunction wp_star_rating( $args = array() ) {\n\t$defaults = array(\n\t\t'rating' => 0,\n\t\t'type'   => 'rating',\n\t\t'number' => 0,\n\t\t'echo'   => true,\n\t);\n\t$r = wp_parse_args( $args, $defaults );\n\n\t// Non-english decimal places when the $rating is coming from a string\n\t$rating = str_replace( ',', '.', $r['rating'] );\n\n\t// Convert Percentage to star rating, 0..5 in .5 increments\n\tif ( 'percent' == $r['type'] ) {\n\t\t$rating = round( $rating / 10, 0 ) / 2;\n\t}\n\n\t// Calculate the number of each type of star needed\n\t$full_stars = floor( $rating );\n\t$half_stars = ceil( $rating - $full_stars );\n\t$empty_stars = 5 - $full_stars - $half_stars;\n\n\tif ( $r['number'] ) {\n\t\t/* translators: 1: The rating, 2: The number of ratings */\n\t\t$format = _n( '%1$s rating based on %2$s rating', '%1$s rating based on %2$s ratings', $r['number'] );\n\t\t$title = sprintf( $format, number_format_i18n( $rating, 1 ), number_format_i18n( $r['number'] ) );\n\t} else {\n\t\t/* translators: 1: The rating */\n\t\t$title = sprintf( __( '%s rating' ), number_format_i18n( $rating, 1 ) );\n\t}\n\n\t$output = '<div class=\"star-rating\">';\n\t$output .= '<span class=\"screen-reader-text\">' . $title . '</span>';\n\t$output .= str_repeat( '<div class=\"star star-full\"></div>', $full_stars );\n\t$output .= str_repeat( '<div class=\"star star-half\"></div>', $half_stars );\n\t$output .= str_repeat( '<div class=\"star star-empty\"></div>', $empty_stars );\n\t$output .= '</div>';\n\n\tif ( $r['echo'] ) {\n\t\techo $output;\n\t}\n\n\treturn $output;\n}\n\n/**\n * Output a notice when editing the page for posts (internal use only).\n *\n * @ignore\n * @since 4.2.0\n */\nfunction _wp_posts_page_notice() {\n\techo '<div class=\"notice notice-warning inline\"><p>' . __( 'You are currently editing the page that shows your latest posts.' ) . '</p></div>';\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.5-RC1-37135';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 36686;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4308-20160323';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "fixing_code": ["<?php\n/**\n * Administration API: Core Ajax handlers\n *\n * @package WordPress\n * @subpackage Administration\n * @since 2.1.0\n */\n\n//\n// No-privilege Ajax handlers.\n//\n\n/**\n * Ajax handler for the Heartbeat API in\n * the no-privilege context.\n *\n * Runs when the user is not logged in.\n *\n * @since 3.6.0\n */\nfunction wp_ajax_nopriv_heartbeat() {\n\t$response = array();\n\n\t// screen_id is the same as $current_screen->id and the JS global 'pagenow'.\n\tif ( ! empty($_POST['screen_id']) )\n\t\t$screen_id = sanitize_key($_POST['screen_id']);\n\telse\n\t\t$screen_id = 'front';\n\n\tif ( ! empty($_POST['data']) ) {\n\t\t$data = wp_unslash( (array) $_POST['data'] );\n\n\t\t/**\n\t\t * Filter Heartbeat AJAX response in no-privilege environments.\n\t\t *\n\t\t * @since 3.6.0\n\t\t *\n\t\t * @param array|object $response  The no-priv Heartbeat response object or array.\n\t\t * @param array        $data      An array of data passed via $_POST.\n\t\t * @param string       $screen_id The screen id.\n\t\t */\n\t\t$response = apply_filters( 'heartbeat_nopriv_received', $response, $data, $screen_id );\n\t}\n\n\t/**\n\t * Filter Heartbeat AJAX response when no data is passed.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param array|object $response  The Heartbeat response object or array.\n\t * @param string       $screen_id The screen id.\n\t */\n\t$response = apply_filters( 'heartbeat_nopriv_send', $response, $screen_id );\n\n\t/**\n\t * Fires when Heartbeat ticks in no-privilege environments.\n\t *\n\t * Allows the transport to be easily replaced with long-polling.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param array|object $response  The no-priv Heartbeat response.\n\t * @param string       $screen_id The screen id.\n\t */\n\tdo_action( 'heartbeat_nopriv_tick', $response, $screen_id );\n\n\t// Send the current time according to the server.\n\t$response['server_time'] = time();\n\n\twp_send_json($response);\n}\n\n//\n// GET-based Ajax handlers.\n//\n\n/**\n * Ajax handler for fetching a list table.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n */\nfunction wp_ajax_fetch_list() {\n\tglobal $wp_list_table;\n\n\t$list_class = $_GET['list_args']['class'];\n\tcheck_ajax_referer( \"fetch-list-$list_class\", '_ajax_fetch_list_nonce' );\n\n\t$wp_list_table = _get_list_table( $list_class, array( 'screen' => $_GET['list_args']['screen']['id'] ) );\n\tif ( ! $wp_list_table )\n\t\twp_die( 0 );\n\n\tif ( ! $wp_list_table->ajax_user_can() )\n\t\twp_die( -1 );\n\n\t$wp_list_table->ajax_response();\n\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler for tag search.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_ajax_tag_search() {\n\tif ( ! isset( $_GET['tax'] ) ) {\n\t\twp_die( 0 );\n\t}\n\n\t$taxonomy = sanitize_key( $_GET['tax'] );\n\t$tax = get_taxonomy( $taxonomy );\n\tif ( ! $tax ) {\n\t\twp_die( 0 );\n\t}\n\n\tif ( ! current_user_can( $tax->cap->assign_terms ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$s = wp_unslash( $_GET['q'] );\n\n\t$comma = _x( ',', 'tag delimiter' );\n\tif ( ',' !== $comma )\n\t\t$s = str_replace( $comma, ',', $s );\n\tif ( false !== strpos( $s, ',' ) ) {\n\t\t$s = explode( ',', $s );\n\t\t$s = $s[count( $s ) - 1];\n\t}\n\t$s = trim( $s );\n\n\t/**\n\t * Filter the minimum number of characters required to fire a tag search via AJAX.\n\t *\n\t * @since 4.0.0\n\t *\n\t * @param int    $characters The minimum number of characters required. Default 2.\n\t * @param object $tax        The taxonomy object.\n\t * @param string $s          The search term.\n\t */\n\t$term_search_min_chars = (int) apply_filters( 'term_search_min_chars', 2, $tax, $s );\n\n\t/*\n\t * Require $term_search_min_chars chars for matching (default: 2)\n\t * ensure it's a non-negative, non-zero integer.\n\t */\n\tif ( ( $term_search_min_chars == 0 ) || ( strlen( $s ) < $term_search_min_chars ) ){\n\t\twp_die();\n\t}\n\n\t$results = get_terms( $taxonomy, array( 'name__like' => $s, 'fields' => 'names', 'hide_empty' => false ) );\n\n\techo join( $results, \"\\n\" );\n\twp_die();\n}\n\n/**\n * Ajax handler for compression testing.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_wp_compression_test() {\n\tif ( !current_user_can( 'manage_options' ) )\n\t\twp_die( -1 );\n\n\tif ( ini_get('zlib.output_compression') || 'ob_gzhandler' == ini_get('output_handler') ) {\n\t\tupdate_site_option('can_compress_scripts', 0);\n\t\twp_die( 0 );\n\t}\n\n\tif ( isset($_GET['test']) ) {\n\t\theader( 'Expires: Wed, 11 Jan 1984 05:00:00 GMT' );\n\t\theader( 'Last-Modified: ' . gmdate( 'D, d M Y H:i:s' ) . ' GMT' );\n\t\theader( 'Cache-Control: no-cache, must-revalidate, max-age=0' );\n\t\theader( 'Pragma: no-cache' );\n\t\theader('Content-Type: application/javascript; charset=UTF-8');\n\t\t$force_gzip = ( defined('ENFORCE_GZIP') && ENFORCE_GZIP );\n\t\t$test_str = '\"wpCompressionTest Lorem ipsum dolor sit amet consectetuer mollis sapien urna ut a. Eu nonummy condimentum fringilla tempor pretium platea vel nibh netus Maecenas. Hac molestie amet justo quis pellentesque est ultrices interdum nibh Morbi. Cras mattis pretium Phasellus ante ipsum ipsum ut sociis Suspendisse Lorem. Ante et non molestie. Porta urna Vestibulum egestas id congue nibh eu risus gravida sit. Ac augue auctor Ut et non a elit massa id sodales. Elit eu Nulla at nibh adipiscing mattis lacus mauris at tempus. Netus nibh quis suscipit nec feugiat eget sed lorem et urna. Pellentesque lacus at ut massa consectetuer ligula ut auctor semper Pellentesque. Ut metus massa nibh quam Curabitur molestie nec mauris congue. Volutpat molestie elit justo facilisis neque ac risus Ut nascetur tristique. Vitae sit lorem tellus et quis Phasellus lacus tincidunt nunc Fusce. Pharetra wisi Suspendisse mus sagittis libero lacinia Integer consequat ac Phasellus. Et urna ac cursus tortor aliquam Aliquam amet tellus volutpat Vestibulum. Justo interdum condimentum In augue congue tellus sollicitudin Quisque quis nibh.\"';\n\n\t\t if ( 1 == $_GET['test'] ) {\n\t\t \techo $test_str;\n\t\t \twp_die();\n\t\t } elseif ( 2 == $_GET['test'] ) {\n\t\t\tif ( !isset($_SERVER['HTTP_ACCEPT_ENCODING']) )\n\t\t\t\twp_die( -1 );\n\t\t\tif ( false !== stripos( $_SERVER['HTTP_ACCEPT_ENCODING'], 'deflate') && function_exists('gzdeflate') && ! $force_gzip ) {\n\t\t\t\theader('Content-Encoding: deflate');\n\t\t\t\t$out = gzdeflate( $test_str, 1 );\n\t\t\t} elseif ( false !== stripos( $_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') && function_exists('gzencode') ) {\n\t\t\t\theader('Content-Encoding: gzip');\n\t\t\t\t$out = gzencode( $test_str, 1 );\n\t\t\t} else {\n\t\t\t\twp_die( -1 );\n\t\t\t}\n\t\t\techo $out;\n\t\t\twp_die();\n\t\t} elseif ( 'no' == $_GET['test'] ) {\n\t\t\tcheck_ajax_referer( 'update_can_compress_scripts' );\n\t\t\tupdate_site_option('can_compress_scripts', 0);\n\t\t} elseif ( 'yes' == $_GET['test'] ) {\n\t\t\tcheck_ajax_referer( 'update_can_compress_scripts' );\n\t\t\tupdate_site_option('can_compress_scripts', 1);\n\t\t}\n\t}\n\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler for image editor previews.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_imgedit_preview() {\n\t$post_id = intval($_GET['postid']);\n\tif ( empty($post_id) || !current_user_can('edit_post', $post_id) )\n\t\twp_die( -1 );\n\n\tcheck_ajax_referer( \"image_editor-$post_id\" );\n\n\tinclude_once( ABSPATH . 'wp-admin/includes/image-edit.php' );\n\tif ( ! stream_preview_image($post_id) )\n\t\twp_die( -1 );\n\n\twp_die();\n}\n\n/**\n * Ajax handler for oEmbed caching.\n *\n * @since 3.1.0\n *\n * @global WP_Embed $wp_embed\n */\nfunction wp_ajax_oembed_cache() {\n\t$GLOBALS['wp_embed']->cache_oembed( $_GET['post'] );\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler for user autocomplete.\n *\n * @since 3.4.0\n */\nfunction wp_ajax_autocomplete_user() {\n\tif ( ! is_multisite() || ! current_user_can( 'promote_users' ) || wp_is_large_network( 'users' ) )\n\t\twp_die( -1 );\n\n\t/** This filter is documented in wp-admin/user-new.php */\n\tif ( ! is_super_admin() && ! apply_filters( 'autocomplete_users_for_site_admins', false ) )\n\t\twp_die( -1 );\n\n\t$return = array();\n\n\t// Check the type of request\n\t// Current allowed values are `add` and `search`\n\tif ( isset( $_REQUEST['autocomplete_type'] ) && 'search' === $_REQUEST['autocomplete_type'] ) {\n\t\t$type = $_REQUEST['autocomplete_type'];\n\t} else {\n\t\t$type = 'add';\n\t}\n\n\t// Check the desired field for value\n\t// Current allowed values are `user_email` and `user_login`\n\tif ( isset( $_REQUEST['autocomplete_field'] ) && 'user_email' === $_REQUEST['autocomplete_field'] ) {\n\t\t$field = $_REQUEST['autocomplete_field'];\n\t} else {\n\t\t$field = 'user_login';\n\t}\n\n\t// Exclude current users of this blog\n\tif ( isset( $_REQUEST['site_id'] ) ) {\n\t\t$id = absint( $_REQUEST['site_id'] );\n\t} else {\n\t\t$id = get_current_blog_id();\n\t}\n\n\t$include_blog_users = ( $type == 'search' ? get_users( array( 'blog_id' => $id, 'fields' => 'ID' ) ) : array() );\n\t$exclude_blog_users = ( $type == 'add' ? get_users( array( 'blog_id' => $id, 'fields' => 'ID' ) ) : array() );\n\n\t$users = get_users( array(\n\t\t'blog_id' => false,\n\t\t'search'  => '*' . $_REQUEST['term'] . '*',\n\t\t'include' => $include_blog_users,\n\t\t'exclude' => $exclude_blog_users,\n\t\t'search_columns' => array( 'user_login', 'user_nicename', 'user_email' ),\n\t) );\n\n\tforeach ( $users as $user ) {\n\t\t$return[] = array(\n\t\t\t/* translators: 1: user_login, 2: user_email */\n\t\t\t'label' => sprintf( _x( '%1$s (%2$s)', 'user autocomplete result' ), $user->user_login, $user->user_email ),\n\t\t\t'value' => $user->$field,\n\t\t);\n\t}\n\n\twp_die( wp_json_encode( $return ) );\n}\n\n/**\n * Ajax handler for dashboard widgets.\n *\n * @since 3.4.0\n */\nfunction wp_ajax_dashboard_widgets() {\n\trequire_once ABSPATH . 'wp-admin/includes/dashboard.php';\n\n\t$pagenow = $_GET['pagenow'];\n\tif ( $pagenow === 'dashboard-user' || $pagenow === 'dashboard-network' || $pagenow === 'dashboard' ) {\n\t\tset_current_screen( $pagenow );\n\t}\n\n\tswitch ( $_GET['widget'] ) {\n\t\tcase 'dashboard_primary' :\n\t\t\twp_dashboard_primary();\n\t\t\tbreak;\n\t}\n\twp_die();\n}\n\n/**\n * Ajax handler for Customizer preview logged-in status.\n *\n * @since 3.4.0\n */\nfunction wp_ajax_logged_in() {\n\twp_die( 1 );\n}\n\n//\n// Ajax helpers.\n//\n\n/**\n * Sends back current comment total and new page links if they need to be updated.\n *\n * Contrary to normal success AJAX response (\"1\"), die with time() on success.\n *\n * @access private\n * @since 2.7.0\n *\n * @param int $comment_id\n * @param int $delta\n */\nfunction _wp_ajax_delete_comment_response( $comment_id, $delta = -1 ) {\n\t$total    = isset( $_POST['_total'] )    ? (int) $_POST['_total']    : 0;\n\t$per_page = isset( $_POST['_per_page'] ) ? (int) $_POST['_per_page'] : 0;\n\t$page     = isset( $_POST['_page'] )     ? (int) $_POST['_page']     : 0;\n\t$url      = isset( $_POST['_url'] )      ? esc_url_raw( $_POST['_url'] ) : '';\n\n\t// JS didn't send us everything we need to know. Just die with success message\n\tif ( ! $total || ! $per_page || ! $page || ! $url ) {\n\t\t$time = time();\n\t\t$comment = get_comment( $comment_id );\n\n\t\t$counts = wp_count_comments();\n\n\t\t$x = new WP_Ajax_Response( array(\n\t\t\t'what' => 'comment',\n\t\t\t// Here for completeness - not used.\n\t\t\t'id' => $comment_id,\n\t\t\t'supplemental' => array(\n\t\t\t\t'status' => $comment ? $comment->comment_approved : '',\n\t\t\t\t'postId' => $comment ? $comment->comment_post_ID : '',\n\t\t\t\t'time' => $time,\n\t\t\t\t'in_moderation' => $counts->moderated,\n\t\t\t\t'i18n_comments_text' => sprintf(\n\t\t\t\t\t_n( '%s Comment', '%s Comments', $counts->approved ),\n\t\t\t\t\tnumber_format_i18n( $counts->approved )\n\t\t\t\t),\n\t\t\t\t'i18n_moderation_text' => sprintf(\n\t\t\t\t\t_nx( '%s in moderation', '%s in moderation', $counts->moderated, 'comments' ),\n\t\t\t\t\tnumber_format_i18n( $counts->moderated )\n\t\t\t\t)\n\t\t\t)\n\t\t) );\n\t\t$x->send();\n\t}\n\n\t$total += $delta;\n\tif ( $total < 0 )\n\t\t$total = 0;\n\n\t// Only do the expensive stuff on a page-break, and about 1 other time per page\n\tif ( 0 == $total % $per_page || 1 == mt_rand( 1, $per_page ) ) {\n\t\t$post_id = 0;\n\t\t// What type of comment count are we looking for?\n\t\t$status = 'all';\n\t\t$parsed = parse_url( $url );\n\t\tif ( isset( $parsed['query'] ) ) {\n\t\t\tparse_str( $parsed['query'], $query_vars );\n\t\t\tif ( !empty( $query_vars['comment_status'] ) )\n\t\t\t\t$status = $query_vars['comment_status'];\n\t\t\tif ( !empty( $query_vars['p'] ) )\n\t\t\t\t$post_id = (int) $query_vars['p'];\n\t\t}\n\n\t\t$comment_count = wp_count_comments($post_id);\n\n\t\t// We're looking for a known type of comment count.\n\t\tif ( isset( $comment_count->$status ) )\n\t\t\t$total = $comment_count->$status;\n\t\t\t// Else use the decremented value from above.\n\t}\n\n\t// The time since the last comment count.\n\t$time = time();\n\t$comment = get_comment( $comment_id );\n\n\t$x = new WP_Ajax_Response( array(\n\t\t'what' => 'comment',\n\t\t// Here for completeness - not used.\n\t\t'id' => $comment_id,\n\t\t'supplemental' => array(\n\t\t\t'status' => $comment ? $comment->comment_approved : '',\n\t\t\t'postId' => $comment ? $comment->comment_post_ID : '',\n\t\t\t'total_items_i18n' => sprintf( _n( '%s item', '%s items', $total ), number_format_i18n( $total ) ),\n\t\t\t'total_pages' => ceil( $total / $per_page ),\n\t\t\t'total_pages_i18n' => number_format_i18n( ceil( $total / $per_page ) ),\n\t\t\t'total' => $total,\n\t\t\t'time' => $time\n\t\t)\n\t) );\n\t$x->send();\n}\n\n//\n// POST-based Ajax handlers.\n//\n\n/**\n * Ajax handler for adding a hierarchical term.\n *\n * @access private\n * @since 3.1.0\n */\nfunction _wp_ajax_add_hierarchical_term() {\n\t$action = $_POST['action'];\n\t$taxonomy = get_taxonomy(substr($action, 4));\n\tcheck_ajax_referer( $action, '_ajax_nonce-add-' . $taxonomy->name );\n\tif ( !current_user_can( $taxonomy->cap->edit_terms ) )\n\t\twp_die( -1 );\n\t$names = explode(',', $_POST['new'.$taxonomy->name]);\n\t$parent = isset($_POST['new'.$taxonomy->name.'_parent']) ? (int) $_POST['new'.$taxonomy->name.'_parent'] : 0;\n\tif ( 0 > $parent )\n\t\t$parent = 0;\n\tif ( $taxonomy->name == 'category' )\n\t\t$post_category = isset($_POST['post_category']) ? (array) $_POST['post_category'] : array();\n\telse\n\t\t$post_category = ( isset($_POST['tax_input']) && isset($_POST['tax_input'][$taxonomy->name]) ) ? (array) $_POST['tax_input'][$taxonomy->name] : array();\n\t$checked_categories = array_map( 'absint', (array) $post_category );\n\t$popular_ids = wp_popular_terms_checklist($taxonomy->name, 0, 10, false);\n\n\tforeach ( $names as $cat_name ) {\n\t\t$cat_name = trim($cat_name);\n\t\t$category_nicename = sanitize_title($cat_name);\n\t\tif ( '' === $category_nicename )\n\t\t\tcontinue;\n\t\tif ( !$cat_id = term_exists( $cat_name, $taxonomy->name, $parent ) )\n\t\t\t$cat_id = wp_insert_term( $cat_name, $taxonomy->name, array( 'parent' => $parent ) );\n\t\tif ( is_wp_error( $cat_id ) ) {\n\t\t\tcontinue;\n\t\t} elseif ( is_array( $cat_id ) ) {\n\t\t\t$cat_id = $cat_id['term_id'];\n\t\t}\n\t\t$checked_categories[] = $cat_id;\n\t\tif ( $parent ) // Do these all at once in a second\n\t\t\tcontinue;\n\n\t\tob_start();\n\n\t\twp_terms_checklist( 0, array( 'taxonomy' => $taxonomy->name, 'descendants_and_self' => $cat_id, 'selected_cats' => $checked_categories, 'popular_cats' => $popular_ids ));\n\n\t\t$data = ob_get_clean();\n\n\t\t$add = array(\n\t\t\t'what' => $taxonomy->name,\n\t\t\t'id' => $cat_id,\n\t\t\t'data' => str_replace( array(\"\\n\", \"\\t\"), '', $data),\n\t\t\t'position' => -1\n\t\t);\n\t}\n\n\tif ( $parent ) { // Foncy - replace the parent and all its children\n\t\t$parent = get_term( $parent, $taxonomy->name );\n\t\t$term_id = $parent->term_id;\n\n\t\twhile ( $parent->parent ) { // get the top parent\n\t\t\t$parent = get_term( $parent->parent, $taxonomy->name );\n\t\t\tif ( is_wp_error( $parent ) )\n\t\t\t\tbreak;\n\t\t\t$term_id = $parent->term_id;\n\t\t}\n\n\t\tob_start();\n\n\t\twp_terms_checklist( 0, array('taxonomy' => $taxonomy->name, 'descendants_and_self' => $term_id, 'selected_cats' => $checked_categories, 'popular_cats' => $popular_ids));\n\n\t\t$data = ob_get_clean();\n\n\t\t$add = array(\n\t\t\t'what' => $taxonomy->name,\n\t\t\t'id' => $term_id,\n\t\t\t'data' => str_replace( array(\"\\n\", \"\\t\"), '', $data),\n\t\t\t'position' => -1\n\t\t);\n\t}\n\n\tob_start();\n\n\twp_dropdown_categories( array(\n\t\t'taxonomy' => $taxonomy->name, 'hide_empty' => 0, 'name' => 'new'.$taxonomy->name.'_parent', 'orderby' => 'name',\n\t\t'hierarchical' => 1, 'show_option_none' => '&mdash; '.$taxonomy->labels->parent_item.' &mdash;'\n\t) );\n\n\t$sup = ob_get_clean();\n\n\t$add['supplemental'] = array( 'newcat_parent' => $sup );\n\n\t$x = new WP_Ajax_Response( $add );\n\t$x->send();\n}\n\n/**\n * Ajax handler for deleting a comment.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_delete_comment() {\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tif ( !$comment = get_comment( $id ) )\n\t\twp_die( time() );\n\tif ( ! current_user_can( 'edit_comment', $comment->comment_ID ) )\n\t\twp_die( -1 );\n\n\tcheck_ajax_referer( \"delete-comment_$id\" );\n\t$status = wp_get_comment_status( $comment );\n\n\t$delta = -1;\n\tif ( isset($_POST['trash']) && 1 == $_POST['trash'] ) {\n\t\tif ( 'trash' == $status )\n\t\t\twp_die( time() );\n\t\t$r = wp_trash_comment( $comment );\n\t} elseif ( isset($_POST['untrash']) && 1 == $_POST['untrash'] ) {\n\t\tif ( 'trash' != $status )\n\t\t\twp_die( time() );\n\t\t$r = wp_untrash_comment( $comment );\n\t\tif ( ! isset( $_POST['comment_status'] ) || $_POST['comment_status'] != 'trash' ) // undo trash, not in trash\n\t\t\t$delta = 1;\n\t} elseif ( isset($_POST['spam']) && 1 == $_POST['spam'] ) {\n\t\tif ( 'spam' == $status )\n\t\t\twp_die( time() );\n\t\t$r = wp_spam_comment( $comment );\n\t} elseif ( isset($_POST['unspam']) && 1 == $_POST['unspam'] ) {\n\t\tif ( 'spam' != $status )\n\t\t\twp_die( time() );\n\t\t$r = wp_unspam_comment( $comment );\n\t\tif ( ! isset( $_POST['comment_status'] ) || $_POST['comment_status'] != 'spam' ) // undo spam, not in spam\n\t\t\t$delta = 1;\n\t} elseif ( isset($_POST['delete']) && 1 == $_POST['delete'] ) {\n\t\t$r = wp_delete_comment( $comment );\n\t} else {\n\t\twp_die( -1 );\n\t}\n\n\tif ( $r ) // Decide if we need to send back '1' or a more complicated response including page links and comment counts\n\t\t_wp_ajax_delete_comment_response( $comment->comment_ID, $delta );\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler for deleting a tag.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_delete_tag() {\n\t$tag_id = (int) $_POST['tag_ID'];\n\tcheck_ajax_referer( \"delete-tag_$tag_id\" );\n\n\t$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : 'post_tag';\n\t$tax = get_taxonomy($taxonomy);\n\n\tif ( !current_user_can( $tax->cap->delete_terms ) )\n\t\twp_die( -1 );\n\n\t$tag = get_term( $tag_id, $taxonomy );\n\tif ( !$tag || is_wp_error( $tag ) )\n\t\twp_die( 1 );\n\n\tif ( wp_delete_term($tag_id, $taxonomy))\n\t\twp_die( 1 );\n\telse\n\t\twp_die( 0 );\n}\n\n/**\n * Ajax handler for deleting a link.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_delete_link() {\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tcheck_ajax_referer( \"delete-bookmark_$id\" );\n\tif ( !current_user_can( 'manage_links' ) )\n\t\twp_die( -1 );\n\n\t$link = get_bookmark( $id );\n\tif ( !$link || is_wp_error( $link ) )\n\t\twp_die( 1 );\n\n\tif ( wp_delete_link( $id ) )\n\t\twp_die( 1 );\n\telse\n\t\twp_die( 0 );\n}\n\n/**\n * Ajax handler for deleting meta.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_delete_meta() {\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tcheck_ajax_referer( \"delete-meta_$id\" );\n\tif ( !$meta = get_metadata_by_mid( 'post', $id ) )\n\t\twp_die( 1 );\n\n\tif ( is_protected_meta( $meta->meta_key, 'post' ) || ! current_user_can( 'delete_post_meta',  $meta->post_id, $meta->meta_key ) )\n\t\twp_die( -1 );\n\tif ( delete_meta( $meta->meta_id ) )\n\t\twp_die( 1 );\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler for deleting a post.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_delete_post( $action ) {\n\tif ( empty( $action ) )\n\t\t$action = 'delete-post';\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tcheck_ajax_referer( \"{$action}_$id\" );\n\tif ( !current_user_can( 'delete_post', $id ) )\n\t\twp_die( -1 );\n\n\tif ( !get_post( $id ) )\n\t\twp_die( 1 );\n\n\tif ( wp_delete_post( $id ) )\n\t\twp_die( 1 );\n\telse\n\t\twp_die( 0 );\n}\n\n/**\n * Ajax handler for sending a post to the trash.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_trash_post( $action ) {\n\tif ( empty( $action ) )\n\t\t$action = 'trash-post';\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tcheck_ajax_referer( \"{$action}_$id\" );\n\tif ( !current_user_can( 'delete_post', $id ) )\n\t\twp_die( -1 );\n\n\tif ( !get_post( $id ) )\n\t\twp_die( 1 );\n\n\tif ( 'trash-post' == $action )\n\t\t$done = wp_trash_post( $id );\n\telse\n\t\t$done = wp_untrash_post( $id );\n\n\tif ( $done )\n\t\twp_die( 1 );\n\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler to restore a post from the trash.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_untrash_post( $action ) {\n\tif ( empty( $action ) )\n\t\t$action = 'untrash-post';\n\twp_ajax_trash_post( $action );\n}\n\n/**\n * @since 3.1.0\n *\n * @param string $action\n */\nfunction wp_ajax_delete_page( $action ) {\n\tif ( empty( $action ) )\n\t\t$action = 'delete-page';\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tcheck_ajax_referer( \"{$action}_$id\" );\n\tif ( !current_user_can( 'delete_page', $id ) )\n\t\twp_die( -1 );\n\n\tif ( ! get_post( $id ) )\n\t\twp_die( 1 );\n\n\tif ( wp_delete_post( $id ) )\n\t\twp_die( 1 );\n\telse\n\t\twp_die( 0 );\n}\n\n/**\n * Ajax handler to dim a comment.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_dim_comment() {\n\t$id = isset( $_POST['id'] ) ? (int) $_POST['id'] : 0;\n\n\tif ( !$comment = get_comment( $id ) ) {\n\t\t$x = new WP_Ajax_Response( array(\n\t\t\t'what' => 'comment',\n\t\t\t'id' => new WP_Error('invalid_comment', sprintf(__('Comment %d does not exist'), $id))\n\t\t) );\n\t\t$x->send();\n\t}\n\n\tif ( ! current_user_can( 'edit_comment', $comment->comment_ID ) && ! current_user_can( 'moderate_comments' ) )\n\t\twp_die( -1 );\n\n\t$current = wp_get_comment_status( $comment );\n\tif ( isset( $_POST['new'] ) && $_POST['new'] == $current )\n\t\twp_die( time() );\n\n\tcheck_ajax_referer( \"approve-comment_$id\" );\n\tif ( in_array( $current, array( 'unapproved', 'spam' ) ) ) {\n\t\t$result = wp_set_comment_status( $comment, 'approve', true );\n\t} else {\n\t\t$result = wp_set_comment_status( $comment, 'hold', true );\n\t}\n\n\tif ( is_wp_error($result) ) {\n\t\t$x = new WP_Ajax_Response( array(\n\t\t\t'what' => 'comment',\n\t\t\t'id' => $result\n\t\t) );\n\t\t$x->send();\n\t}\n\n\t// Decide if we need to send back '1' or a more complicated response including page links and comment counts\n\t_wp_ajax_delete_comment_response( $comment->comment_ID );\n\twp_die( 0 );\n}\n\n/**\n * Ajax handler for deleting a link category.\n *\n * @since 3.1.0\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_add_link_category( $action ) {\n\tif ( empty( $action ) )\n\t\t$action = 'add-link-category';\n\tcheck_ajax_referer( $action );\n\tif ( !current_user_can( 'manage_categories' ) )\n\t\twp_die( -1 );\n\t$names = explode(',', wp_unslash( $_POST['newcat'] ) );\n\t$x = new WP_Ajax_Response();\n\tforeach ( $names as $cat_name ) {\n\t\t$cat_name = trim($cat_name);\n\t\t$slug = sanitize_title($cat_name);\n\t\tif ( '' === $slug )\n\t\t\tcontinue;\n\t\tif ( !$cat_id = term_exists( $cat_name, 'link_category' ) )\n\t\t\t$cat_id = wp_insert_term( $cat_name, 'link_category' );\n\t\tif ( is_wp_error( $cat_id ) ) {\n\t\t\tcontinue;\n\t\t} elseif ( is_array( $cat_id ) ) {\n\t\t\t$cat_id = $cat_id['term_id'];\n\t\t}\n\t\t$cat_name = esc_html( $cat_name );\n\t\t$x->add( array(\n\t\t\t'what' => 'link-category',\n\t\t\t'id' => $cat_id,\n\t\t\t'data' => \"<li id='link-category-$cat_id'><label for='in-link-category-$cat_id' class='selectit'><input value='\" . esc_attr($cat_id) . \"' type='checkbox' checked='checked' name='link_category[]' id='in-link-category-$cat_id'/> $cat_name</label></li>\",\n\t\t\t'position' => -1\n\t\t) );\n\t}\n\t$x->send();\n}\n\n/**\n * Ajax handler to add a tag.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n */\nfunction wp_ajax_add_tag() {\n\tglobal $wp_list_table;\n\n\tcheck_ajax_referer( 'add-tag', '_wpnonce_add-tag' );\n\t$taxonomy = !empty($_POST['taxonomy']) ? $_POST['taxonomy'] : 'post_tag';\n\t$tax = get_taxonomy($taxonomy);\n\n\tif ( !current_user_can( $tax->cap->edit_terms ) )\n\t\twp_die( -1 );\n\n\t$x = new WP_Ajax_Response();\n\n\t$tag = wp_insert_term($_POST['tag-name'], $taxonomy, $_POST );\n\n\tif ( !$tag || is_wp_error($tag) || (!$tag = get_term( $tag['term_id'], $taxonomy )) ) {\n\t\t$message = __('An error has occurred. Please reload the page and try again.');\n\t\tif ( is_wp_error($tag) && $tag->get_error_message() )\n\t\t\t$message = $tag->get_error_message();\n\n\t\t$x->add( array(\n\t\t\t'what' => 'taxonomy',\n\t\t\t'data' => new WP_Error('error', $message )\n\t\t) );\n\t\t$x->send();\n\t}\n\n\t$wp_list_table = _get_list_table( 'WP_Terms_List_Table', array( 'screen' => $_POST['screen'] ) );\n\n\t$level = 0;\n\tif ( is_taxonomy_hierarchical($taxonomy) ) {\n\t\t$level = count( get_ancestors( $tag->term_id, $taxonomy, 'taxonomy' ) );\n\t\tob_start();\n\t\t$wp_list_table->single_row( $tag, $level );\n\t\t$noparents = ob_get_clean();\n\t}\n\n\tob_start();\n\t$wp_list_table->single_row( $tag );\n\t$parents = ob_get_clean();\n\n\t$x->add( array(\n\t\t'what' => 'taxonomy',\n\t\t'supplemental' => compact('parents', 'noparents')\n\t) );\n\t$x->add( array(\n\t\t'what' => 'term',\n\t\t'position' => $level,\n\t\t'supplemental' => (array) $tag\n\t) );\n\t$x->send();\n}\n\n/**\n * Ajax handler for getting a tagcloud.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_get_tagcloud() {\n\tif ( ! isset( $_POST['tax'] ) ) {\n\t\twp_die( 0 );\n\t}\n\n\t$taxonomy = sanitize_key( $_POST['tax'] );\n\t$tax = get_taxonomy( $taxonomy );\n\tif ( ! $tax ) {\n\t\twp_die( 0 );\n\t}\n\n\tif ( ! current_user_can( $tax->cap->assign_terms ) ) {\n\t\twp_die( -1 );\n\t}\n\n\t$tags = get_terms( $taxonomy, array( 'number' => 45, 'orderby' => 'count', 'order' => 'DESC' ) );\n\n\tif ( empty( $tags ) )\n\t\twp_die( $tax->labels->not_found );\n\n\tif ( is_wp_error( $tags ) )\n\t\twp_die( $tags->get_error_message() );\n\n\tforeach ( $tags as $key => $tag ) {\n\t\t$tags[ $key ]->link = '#';\n\t\t$tags[ $key ]->id = $tag->term_id;\n\t}\n\n\t// We need raw tag names here, so don't filter the output\n\t$return = wp_generate_tag_cloud( $tags, array('filter' => 0) );\n\n\tif ( empty($return) )\n\t\twp_die( 0 );\n\n\techo $return;\n\n\twp_die();\n}\n\n/**\n * Ajax handler for getting comments.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n * @global int           $post_id\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_get_comments( $action ) {\n\tglobal $wp_list_table, $post_id;\n\tif ( empty( $action ) )\n\t\t$action = 'get-comments';\n\n\tcheck_ajax_referer( $action );\n\n\tif ( empty( $post_id ) && ! empty( $_REQUEST['p'] ) ) {\n\t\t$id = absint( $_REQUEST['p'] );\n\t\tif ( ! empty( $id ) )\n\t\t\t$post_id = $id;\n\t}\n\n\tif ( empty( $post_id ) )\n\t\twp_die( -1 );\n\n\t$wp_list_table = _get_list_table( 'WP_Post_Comments_List_Table', array( 'screen' => 'edit-comments' ) );\n\n\tif ( ! current_user_can( 'edit_post', $post_id ) )\n\t\twp_die( -1 );\n\n\t$wp_list_table->prepare_items();\n\n\tif ( !$wp_list_table->has_items() )\n\t\twp_die( 1 );\n\n\t$x = new WP_Ajax_Response();\n\tob_start();\n\tforeach ( $wp_list_table->items as $comment ) {\n\t\tif ( ! current_user_can( 'edit_comment', $comment->comment_ID ) )\n\t\t\tcontinue;\n\t\tget_comment( $comment );\n\t\t$wp_list_table->single_row( $comment );\n\t}\n\t$comment_list_item = ob_get_clean();\n\n\t$x->add( array(\n\t\t'what' => 'comments',\n\t\t'data' => $comment_list_item\n\t) );\n\t$x->send();\n}\n\n/**\n * Ajax handler for replying to a comment.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_replyto_comment( $action ) {\n\tglobal $wp_list_table;\n\tif ( empty( $action ) )\n\t\t$action = 'replyto-comment';\n\n\tcheck_ajax_referer( $action, '_ajax_nonce-replyto-comment' );\n\n\t$comment_post_ID = (int) $_POST['comment_post_ID'];\n\t$post = get_post( $comment_post_ID );\n\tif ( ! $post )\n\t\twp_die( -1 );\n\n\tif ( !current_user_can( 'edit_post', $comment_post_ID ) )\n\t\twp_die( -1 );\n\n\tif ( empty( $post->post_status ) )\n\t\twp_die( 1 );\n\telseif ( in_array($post->post_status, array('draft', 'pending', 'trash') ) )\n\t\twp_die( __('ERROR: you are replying to a comment on a draft post.') );\n\n\t$user = wp_get_current_user();\n\tif ( $user->exists() ) {\n\t\t$user_ID = $user->ID;\n\t\t$comment_author       = wp_slash( $user->display_name );\n\t\t$comment_author_email = wp_slash( $user->user_email );\n\t\t$comment_author_url   = wp_slash( $user->user_url );\n\t\t$comment_content      = trim( $_POST['content'] );\n\t\t$comment_type         = isset( $_POST['comment_type'] ) ? trim( $_POST['comment_type'] ) : '';\n\t\tif ( current_user_can( 'unfiltered_html' ) ) {\n\t\t\tif ( ! isset( $_POST['_wp_unfiltered_html_comment'] ) )\n\t\t\t\t$_POST['_wp_unfiltered_html_comment'] = '';\n\n\t\t\tif ( wp_create_nonce( 'unfiltered-html-comment' ) != $_POST['_wp_unfiltered_html_comment'] ) {\n\t\t\t\tkses_remove_filters(); // start with a clean slate\n\t\t\t\tkses_init_filters(); // set up the filters\n\t\t\t}\n\t\t}\n\t} else {\n\t\twp_die( __( 'Sorry, you must be logged in to reply to a comment.' ) );\n\t}\n\n\tif ( '' == $comment_content )\n\t\twp_die( __( 'ERROR: please type a comment.' ) );\n\n\t$comment_parent = 0;\n\tif ( isset( $_POST['comment_ID'] ) )\n\t\t$comment_parent = absint( $_POST['comment_ID'] );\n\t$comment_auto_approved = false;\n\t$commentdata = compact('comment_post_ID', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_content', 'comment_type', 'comment_parent', 'user_ID');\n\n\t// Automatically approve parent comment.\n\tif ( !empty($_POST['approve_parent']) ) {\n\t\t$parent = get_comment( $comment_parent );\n\n\t\tif ( $parent && $parent->comment_approved === '0' && $parent->comment_post_ID == $comment_post_ID ) {\n\t\t\tif ( ! current_user_can( 'edit_comment', $parent->comment_ID ) ) {\n\t\t\t\twp_die( -1 );\n\t\t\t}\n\n\t\t\tif ( wp_set_comment_status( $parent, 'approve' ) )\n\t\t\t\t$comment_auto_approved = true;\n\t\t}\n\t}\n\n\t$comment_id = wp_new_comment( $commentdata );\n\t$comment = get_comment($comment_id);\n\tif ( ! $comment ) wp_die( 1 );\n\n\t$position = ( isset($_POST['position']) && (int) $_POST['position'] ) ? (int) $_POST['position'] : '-1';\n\n\tob_start();\n\tif ( isset( $_REQUEST['mode'] ) && 'dashboard' == $_REQUEST['mode'] ) {\n\t\trequire_once( ABSPATH . 'wp-admin/includes/dashboard.php' );\n\t\t_wp_dashboard_recent_comments_row( $comment );\n\t} else {\n\t\tif ( isset( $_REQUEST['mode'] ) && 'single' == $_REQUEST['mode'] ) {\n\t\t\t$wp_list_table = _get_list_table('WP_Post_Comments_List_Table', array( 'screen' => 'edit-comments' ) );\n\t\t} else {\n\t\t\t$wp_list_table = _get_list_table('WP_Comments_List_Table', array( 'screen' => 'edit-comments' ) );\n\t\t}\n\t\t$wp_list_table->single_row( $comment );\n\t}\n\t$comment_list_item = ob_get_clean();\n\n\t$response =  array(\n\t\t'what' => 'comment',\n\t\t'id' => $comment->comment_ID,\n\t\t'data' => $comment_list_item,\n\t\t'position' => $position\n\t);\n\n\t$counts = wp_count_comments();\n\t$response['supplemental'] = array(\n\t\t'in_moderation' => $counts->moderated,\n\t\t'i18n_comments_text' => sprintf(\n\t\t\t_n( '%s Comment', '%s Comments', $counts->approved ),\n\t\t\tnumber_format_i18n( $counts->approved )\n\t\t),\n\t\t'i18n_moderation_text' => sprintf(\n\t\t\t_nx( '%s in moderation', '%s in moderation', $counts->moderated, 'comments' ),\n\t\t\tnumber_format_i18n( $counts->moderated )\n\t\t)\n\t);\n\n\tif ( $comment_auto_approved ) {\n\t\t$response['supplemental']['parent_approved'] = $parent->comment_ID;\n\t\t$response['supplemental']['parent_post_id'] = $parent->comment_post_ID;\n\t}\n\n\t$x = new WP_Ajax_Response();\n\t$x->add( $response );\n\t$x->send();\n}\n\n/**\n * Ajax handler for editing a comment.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n */\nfunction wp_ajax_edit_comment() {\n\tglobal $wp_list_table;\n\n\tcheck_ajax_referer( 'replyto-comment', '_ajax_nonce-replyto-comment' );\n\n\t$comment_id = (int) $_POST['comment_ID'];\n\tif ( ! current_user_can( 'edit_comment', $comment_id ) )\n\t\twp_die( -1 );\n\n\tif ( '' == $_POST['content'] )\n\t\twp_die( __( 'ERROR: please type a comment.' ) );\n\n\tif ( isset( $_POST['status'] ) )\n\t\t$_POST['comment_status'] = $_POST['status'];\n\tedit_comment();\n\n\t$position = ( isset($_POST['position']) && (int) $_POST['position']) ? (int) $_POST['position'] : '-1';\n\t$checkbox = ( isset($_POST['checkbox']) && true == $_POST['checkbox'] ) ? 1 : 0;\n\t$wp_list_table = _get_list_table( $checkbox ? 'WP_Comments_List_Table' : 'WP_Post_Comments_List_Table', array( 'screen' => 'edit-comments' ) );\n\n\t$comment = get_comment( $comment_id );\n\tif ( empty( $comment->comment_ID ) )\n\t\twp_die( -1 );\n\n\tob_start();\n\t$wp_list_table->single_row( $comment );\n\t$comment_list_item = ob_get_clean();\n\n\t$x = new WP_Ajax_Response();\n\n\t$x->add( array(\n\t\t'what' => 'edit_comment',\n\t\t'id' => $comment->comment_ID,\n\t\t'data' => $comment_list_item,\n\t\t'position' => $position\n\t));\n\n\t$x->send();\n}\n\n/**\n * Ajax handler for adding a menu item.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_add_menu_item() {\n\tcheck_ajax_referer( 'add-menu_item', 'menu-settings-column-nonce' );\n\n\tif ( ! current_user_can( 'edit_theme_options' ) )\n\t\twp_die( -1 );\n\n\trequire_once ABSPATH . 'wp-admin/includes/nav-menu.php';\n\n\t// For performance reasons, we omit some object properties from the checklist.\n\t// The following is a hacky way to restore them when adding non-custom items.\n\n\t$menu_items_data = array();\n\tforeach ( (array) $_POST['menu-item'] as $menu_item_data ) {\n\t\tif (\n\t\t\t! empty( $menu_item_data['menu-item-type'] ) &&\n\t\t\t'custom' != $menu_item_data['menu-item-type'] &&\n\t\t\t! empty( $menu_item_data['menu-item-object-id'] )\n\t\t) {\n\t\t\tswitch( $menu_item_data['menu-item-type'] ) {\n\t\t\t\tcase 'post_type' :\n\t\t\t\t\t$_object = get_post( $menu_item_data['menu-item-object-id'] );\n\t\t\t\tbreak;\n\n\t\t\t\tcase 'post_type_archive' :\n\t\t\t\t\t$_object = get_post_type_object( $menu_item_data['menu-item-object'] );\n\t\t\t\tbreak;\n\n\t\t\t\tcase 'taxonomy' :\n\t\t\t\t\t$_object = get_term( $menu_item_data['menu-item-object-id'], $menu_item_data['menu-item-object'] );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$_menu_items = array_map( 'wp_setup_nav_menu_item', array( $_object ) );\n\t\t\t$_menu_item = reset( $_menu_items );\n\n\t\t\t// Restore the missing menu item properties\n\t\t\t$menu_item_data['menu-item-description'] = $_menu_item->description;\n\t\t}\n\n\t\t$menu_items_data[] = $menu_item_data;\n\t}\n\n\t$item_ids = wp_save_nav_menu_items( 0, $menu_items_data );\n\tif ( is_wp_error( $item_ids ) )\n\t\twp_die( 0 );\n\n\t$menu_items = array();\n\n\tforeach ( (array) $item_ids as $menu_item_id ) {\n\t\t$menu_obj = get_post( $menu_item_id );\n\t\tif ( ! empty( $menu_obj->ID ) ) {\n\t\t\t$menu_obj = wp_setup_nav_menu_item( $menu_obj );\n\t\t\t$menu_obj->label = $menu_obj->title; // don't show \"(pending)\" in ajax-added items\n\t\t\t$menu_items[] = $menu_obj;\n\t\t}\n\t}\n\n\t/** This filter is documented in wp-admin/includes/nav-menu.php */\n\t$walker_class_name = apply_filters( 'wp_edit_nav_menu_walker', 'Walker_Nav_Menu_Edit', $_POST['menu'] );\n\n\tif ( ! class_exists( $walker_class_name ) )\n\t\twp_die( 0 );\n\n\tif ( ! empty( $menu_items ) ) {\n\t\t$args = array(\n\t\t\t'after' => '',\n\t\t\t'before' => '',\n\t\t\t'link_after' => '',\n\t\t\t'link_before' => '',\n\t\t\t'walker' => new $walker_class_name,\n\t\t);\n\t\techo walk_nav_menu_tree( $menu_items, 0, (object) $args );\n\t}\n\twp_die();\n}\n\n/**\n * Ajax handler for adding meta.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_add_meta() {\n\tcheck_ajax_referer( 'add-meta', '_ajax_nonce-add-meta' );\n\t$c = 0;\n\t$pid = (int) $_POST['post_id'];\n\t$post = get_post( $pid );\n\n\tif ( isset($_POST['metakeyselect']) || isset($_POST['metakeyinput']) ) {\n\t\tif ( !current_user_can( 'edit_post', $pid ) )\n\t\t\twp_die( -1 );\n\t\tif ( isset($_POST['metakeyselect']) && '#NONE#' == $_POST['metakeyselect'] && empty($_POST['metakeyinput']) )\n\t\t\twp_die( 1 );\n\n\t\t// If the post is an autodraft, save the post as a draft and then attempt to save the meta.\n\t\tif ( $post->post_status == 'auto-draft' ) {\n\t\t\t$post_data = array();\n\t\t\t$post_data['action'] = 'draft'; // Warning fix\n\t\t\t$post_data['post_ID'] = $pid;\n\t\t\t$post_data['post_type'] = $post->post_type;\n\t\t\t$post_data['post_status'] = 'draft';\n\t\t\t$now = current_time('timestamp', 1);\n\t\t\t$post_data['post_title'] = sprintf( __( 'Draft created on %1$s at %2$s' ), date( __( 'F j, Y' ), $now ), date( __( 'g:i a' ), $now ) );\n\n\t\t\t$pid = edit_post( $post_data );\n\t\t\tif ( $pid ) {\n\t\t\t\tif ( is_wp_error( $pid ) ) {\n\t\t\t\t\t$x = new WP_Ajax_Response( array(\n\t\t\t\t\t\t'what' => 'meta',\n\t\t\t\t\t\t'data' => $pid\n\t\t\t\t\t) );\n\t\t\t\t\t$x->send();\n\t\t\t\t}\n\n\t\t\t\tif ( !$mid = add_meta( $pid ) )\n\t\t\t\t\twp_die( __( 'Please provide a custom field value.' ) );\n\t\t\t} else {\n\t\t\t\twp_die( 0 );\n\t\t\t}\n\t\t} elseif ( ! $mid = add_meta( $pid ) ) {\n\t\t\twp_die( __( 'Please provide a custom field value.' ) );\n\t\t}\n\n\t\t$meta = get_metadata_by_mid( 'post', $mid );\n\t\t$pid = (int) $meta->post_id;\n\t\t$meta = get_object_vars( $meta );\n\t\t$x = new WP_Ajax_Response( array(\n\t\t\t'what' => 'meta',\n\t\t\t'id' => $mid,\n\t\t\t'data' => _list_meta_row( $meta, $c ),\n\t\t\t'position' => 1,\n\t\t\t'supplemental' => array('postid' => $pid)\n\t\t) );\n\t} else { // Update?\n\t\t$mid = (int) key( $_POST['meta'] );\n\t\t$key = wp_unslash( $_POST['meta'][$mid]['key'] );\n\t\t$value = wp_unslash( $_POST['meta'][$mid]['value'] );\n\t\tif ( '' == trim($key) )\n\t\t\twp_die( __( 'Please provide a custom field name.' ) );\n\t\tif ( '' == trim($value) )\n\t\t\twp_die( __( 'Please provide a custom field value.' ) );\n\t\tif ( ! $meta = get_metadata_by_mid( 'post', $mid ) )\n\t\t\twp_die( 0 ); // if meta doesn't exist\n\t\tif ( is_protected_meta( $meta->meta_key, 'post' ) || is_protected_meta( $key, 'post' ) ||\n\t\t\t! current_user_can( 'edit_post_meta', $meta->post_id, $meta->meta_key ) ||\n\t\t\t! current_user_can( 'edit_post_meta', $meta->post_id, $key ) )\n\t\t\twp_die( -1 );\n\t\tif ( $meta->meta_value != $value || $meta->meta_key != $key ) {\n\t\t\tif ( !$u = update_metadata_by_mid( 'post', $mid, $value, $key ) )\n\t\t\t\twp_die( 0 ); // We know meta exists; we also know it's unchanged (or DB error, in which case there are bigger problems).\n\t\t}\n\n\t\t$x = new WP_Ajax_Response( array(\n\t\t\t'what' => 'meta',\n\t\t\t'id' => $mid, 'old_id' => $mid,\n\t\t\t'data' => _list_meta_row( array(\n\t\t\t\t'meta_key' => $key,\n\t\t\t\t'meta_value' => $value,\n\t\t\t\t'meta_id' => $mid\n\t\t\t), $c ),\n\t\t\t'position' => 0,\n\t\t\t'supplemental' => array('postid' => $meta->post_id)\n\t\t) );\n\t}\n\t$x->send();\n}\n\n/**\n * Ajax handler for adding a user.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n *\n * @param string $action Action to perform.\n */\nfunction wp_ajax_add_user( $action ) {\n\tglobal $wp_list_table;\n\tif ( empty( $action ) )\n\t\t$action = 'add-user';\n\n\tcheck_ajax_referer( $action );\n\tif ( ! current_user_can('create_users') )\n\t\twp_die( -1 );\n\tif ( ! $user_id = edit_user() ) {\n\t\twp_die( 0 );\n\t} elseif ( is_wp_error( $user_id ) ) {\n\t\t$x = new WP_Ajax_Response( array(\n\t\t\t'what' => 'user',\n\t\t\t'id' => $user_id\n\t\t) );\n\t\t$x->send();\n\t}\n\t$user_object = get_userdata( $user_id );\n\n\t$wp_list_table = _get_list_table('WP_Users_List_Table');\n\n\t$role = current( $user_object->roles );\n\n\t$x = new WP_Ajax_Response( array(\n\t\t'what' => 'user',\n\t\t'id' => $user_id,\n\t\t'data' => $wp_list_table->single_row( $user_object, '', $role ),\n\t\t'supplemental' => array(\n\t\t\t'show-link' => sprintf(\n\t\t\t\t/* translators: %s: the new user */\n\t\t\t\t__( 'User %s added' ),\n\t\t\t\t'<a href=\"#user-' . $user_id . '\">' . $user_object->user_login . '</a>'\n\t\t\t),\n\t\t\t'role' => $role,\n\t\t)\n\t) );\n\t$x->send();\n}\n\n/**\n * Ajax handler for closed post boxes.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_closed_postboxes() {\n\tcheck_ajax_referer( 'closedpostboxes', 'closedpostboxesnonce' );\n\t$closed = isset( $_POST['closed'] ) ? explode( ',', $_POST['closed']) : array();\n\t$closed = array_filter($closed);\n\n\t$hidden = isset( $_POST['hidden'] ) ? explode( ',', $_POST['hidden']) : array();\n\t$hidden = array_filter($hidden);\n\n\t$page = isset( $_POST['page'] ) ? $_POST['page'] : '';\n\n\tif ( $page != sanitize_key( $page ) )\n\t\twp_die( 0 );\n\n\tif ( ! $user = wp_get_current_user() )\n\t\twp_die( -1 );\n\n\tif ( is_array($closed) )\n\t\tupdate_user_option($user->ID, \"closedpostboxes_$page\", $closed, true);\n\n\tif ( is_array($hidden) ) {\n\t\t$hidden = array_diff( $hidden, array('submitdiv', 'linksubmitdiv', 'manage-menu', 'create-menu') ); // postboxes that are always shown\n\t\tupdate_user_option($user->ID, \"metaboxhidden_$page\", $hidden, true);\n\t}\n\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for hidden columns.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_hidden_columns() {\n\tcheck_ajax_referer( 'screen-options-nonce', 'screenoptionnonce' );\n\t$page = isset( $_POST['page'] ) ? $_POST['page'] : '';\n\n\tif ( $page != sanitize_key( $page ) )\n\t\twp_die( 0 );\n\n\tif ( ! $user = wp_get_current_user() )\n\t\twp_die( -1 );\n\n\t$hidden = ! empty( $_POST['hidden'] ) ? explode( ',', $_POST['hidden'] ) : array();\n\tupdate_user_option( $user->ID, \"manage{$page}columnshidden\", $hidden, true );\n\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for updating whether to display the welcome panel.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_update_welcome_panel() {\n\tcheck_ajax_referer( 'welcome-panel-nonce', 'welcomepanelnonce' );\n\n\tif ( ! current_user_can( 'edit_theme_options' ) )\n\t\twp_die( -1 );\n\n\tupdate_user_meta( get_current_user_id(), 'show_welcome_panel', empty( $_POST['visible'] ) ? 0 : 1 );\n\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for retrieving menu meta boxes.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_menu_get_metabox() {\n\tif ( ! current_user_can( 'edit_theme_options' ) )\n\t\twp_die( -1 );\n\n\trequire_once ABSPATH . 'wp-admin/includes/nav-menu.php';\n\n\tif ( isset( $_POST['item-type'] ) && 'post_type' == $_POST['item-type'] ) {\n\t\t$type = 'posttype';\n\t\t$callback = 'wp_nav_menu_item_post_type_meta_box';\n\t\t$items = (array) get_post_types( array( 'show_in_nav_menus' => true ), 'object' );\n\t} elseif ( isset( $_POST['item-type'] ) && 'taxonomy' == $_POST['item-type'] ) {\n\t\t$type = 'taxonomy';\n\t\t$callback = 'wp_nav_menu_item_taxonomy_meta_box';\n\t\t$items = (array) get_taxonomies( array( 'show_ui' => true ), 'object' );\n\t}\n\n\tif ( ! empty( $_POST['item-object'] ) && isset( $items[$_POST['item-object']] ) ) {\n\t\t$menus_meta_box_object = $items[ $_POST['item-object'] ];\n\n\t\t/** This filter is documented in wp-admin/includes/nav-menu.php */\n\t\t$item = apply_filters( 'nav_menu_meta_box_object', $menus_meta_box_object );\n\t\tob_start();\n\t\tcall_user_func_array($callback, array(\n\t\t\tnull,\n\t\t\tarray(\n\t\t\t\t'id' => 'add-' . $item->name,\n\t\t\t\t'title' => $item->labels->name,\n\t\t\t\t'callback' => $callback,\n\t\t\t\t'args' => $item,\n\t\t\t)\n\t\t));\n\n\t\t$markup = ob_get_clean();\n\n\t\techo wp_json_encode(array(\n\t\t\t'replace-id' => $type . '-' . $item->name,\n\t\t\t'markup' => $markup,\n\t\t));\n\t}\n\n\twp_die();\n}\n\n/**\n * Ajax handler for internal linking.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_wp_link_ajax() {\n\tcheck_ajax_referer( 'internal-linking', '_ajax_linking_nonce' );\n\n\t$args = array();\n\n\tif ( isset( $_POST['search'] ) ) {\n\t\t$args['s'] = wp_unslash( $_POST['search'] );\n\t}\n\n\tif ( isset( $_POST['term'] ) ) {\n\t\t$args['s'] = wp_unslash( $_POST['term'] );\n\t}\n\n\t$args['pagenum'] = ! empty( $_POST['page'] ) ? absint( $_POST['page'] ) : 1;\n\n\trequire(ABSPATH . WPINC . '/class-wp-editor.php');\n\t$results = _WP_Editors::wp_link_query( $args );\n\n\tif ( ! isset( $results ) )\n\t\twp_die( 0 );\n\n\techo wp_json_encode( $results );\n\techo \"\\n\";\n\n\twp_die();\n}\n\n/**\n * Ajax handler for menu locations save.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_menu_locations_save() {\n\tif ( ! current_user_can( 'edit_theme_options' ) )\n\t\twp_die( -1 );\n\tcheck_ajax_referer( 'add-menu_item', 'menu-settings-column-nonce' );\n\tif ( ! isset( $_POST['menu-locations'] ) )\n\t\twp_die( 0 );\n\tset_theme_mod( 'nav_menu_locations', array_map( 'absint', $_POST['menu-locations'] ) );\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for saving the meta box order.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_meta_box_order() {\n\tcheck_ajax_referer( 'meta-box-order' );\n\t$order = isset( $_POST['order'] ) ? (array) $_POST['order'] : false;\n\t$page_columns = isset( $_POST['page_columns'] ) ? $_POST['page_columns'] : 'auto';\n\n\tif ( $page_columns != 'auto' )\n\t\t$page_columns = (int) $page_columns;\n\n\t$page = isset( $_POST['page'] ) ? $_POST['page'] : '';\n\n\tif ( $page != sanitize_key( $page ) )\n\t\twp_die( 0 );\n\n\tif ( ! $user = wp_get_current_user() )\n\t\twp_die( -1 );\n\n\tif ( $order )\n\t\tupdate_user_option($user->ID, \"meta-box-order_$page\", $order, true);\n\n\tif ( $page_columns )\n\t\tupdate_user_option($user->ID, \"screen_layout_$page\", $page_columns, true);\n\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for menu quick searching.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_menu_quick_search() {\n\tif ( ! current_user_can( 'edit_theme_options' ) )\n\t\twp_die( -1 );\n\n\trequire_once ABSPATH . 'wp-admin/includes/nav-menu.php';\n\n\t_wp_ajax_menu_quick_search( $_POST );\n\n\twp_die();\n}\n\n/**\n * Ajax handler to retrieve a permalink.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_get_permalink() {\n\tcheck_ajax_referer( 'getpermalink', 'getpermalinknonce' );\n\t$post_id = isset($_POST['post_id'])? intval($_POST['post_id']) : 0;\n\twp_die( get_preview_post_link( $post_id ) );\n}\n\n/**\n * Ajax handler to retrieve a sample permalink.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_sample_permalink() {\n\tcheck_ajax_referer( 'samplepermalink', 'samplepermalinknonce' );\n\t$post_id = isset($_POST['post_id'])? intval($_POST['post_id']) : 0;\n\t$title = isset($_POST['new_title'])? $_POST['new_title'] : '';\n\t$slug = isset($_POST['new_slug'])? $_POST['new_slug'] : null;\n\twp_die( get_sample_permalink_html( $post_id, $title, $slug ) );\n}\n\n/**\n * Ajax handler for Quick Edit saving a post from a list table.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n */\nfunction wp_ajax_inline_save() {\n\tglobal $wp_list_table, $mode;\n\n\tcheck_ajax_referer( 'inlineeditnonce', '_inline_edit' );\n\n\tif ( ! isset($_POST['post_ID']) || ! ( $post_ID = (int) $_POST['post_ID'] ) )\n\t\twp_die();\n\n\tif ( 'page' == $_POST['post_type'] ) {\n\t\tif ( ! current_user_can( 'edit_page', $post_ID ) )\n\t\t\twp_die( __( 'You are not allowed to edit this page.' ) );\n\t} else {\n\t\tif ( ! current_user_can( 'edit_post', $post_ID ) )\n\t\t\twp_die( __( 'You are not allowed to edit this post.' ) );\n\t}\n\n\tif ( $last = wp_check_post_lock( $post_ID ) ) {\n\t\t$last_user = get_userdata( $last );\n\t\t$last_user_name = $last_user ? $last_user->display_name : __( 'Someone' );\n\t\tprintf( $_POST['post_type'] == 'page' ? __( 'Saving is disabled: %s is currently editing this page.' ) : __( 'Saving is disabled: %s is currently editing this post.' ),\tesc_html( $last_user_name ) );\n\t\twp_die();\n\t}\n\n\t$data = &$_POST;\n\n\t$post = get_post( $post_ID, ARRAY_A );\n\n\t// Since it's coming from the database.\n\t$post = wp_slash($post);\n\n\t$data['content'] = $post['post_content'];\n\t$data['excerpt'] = $post['post_excerpt'];\n\n\t// Rename.\n\t$data['user_ID'] = get_current_user_id();\n\n\tif ( isset($data['post_parent']) )\n\t\t$data['parent_id'] = $data['post_parent'];\n\n\t// Status.\n\tif ( isset( $data['keep_private'] ) && 'private' == $data['keep_private'] ) {\n\t\t$data['visibility']  = 'private';\n\t\t$data['post_status'] = 'private';\n\t} else {\n\t\t$data['post_status'] = $data['_status'];\n\t}\n\n\tif ( empty($data['comment_status']) )\n\t\t$data['comment_status'] = 'closed';\n\tif ( empty($data['ping_status']) )\n\t\t$data['ping_status'] = 'closed';\n\n\t// Exclude terms from taxonomies that are not supposed to appear in Quick Edit.\n\tif ( ! empty( $data['tax_input'] ) ) {\n\t\tforeach ( $data['tax_input'] as $taxonomy => $terms ) {\n\t\t\t$tax_object = get_taxonomy( $taxonomy );\n\t\t\t/** This filter is documented in wp-admin/includes/class-wp-posts-list-table.php */\n\t\t\tif ( ! apply_filters( 'quick_edit_show_taxonomy', $tax_object->show_in_quick_edit, $taxonomy, $post['post_type'] ) ) {\n\t\t\t\tunset( $data['tax_input'][ $taxonomy ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Hack: wp_unique_post_slug() doesn't work for drafts, so we will fake that our post is published.\n\tif ( ! empty( $data['post_name'] ) && in_array( $post['post_status'], array( 'draft', 'pending' ) ) ) {\n\t\t$post['post_status'] = 'publish';\n\t\t$data['post_name'] = wp_unique_post_slug( $data['post_name'], $post['ID'], $post['post_status'], $post['post_type'], $post['post_parent'] );\n\t}\n\n\t// Update the post.\n\tedit_post();\n\n\t$wp_list_table = _get_list_table( 'WP_Posts_List_Table', array( 'screen' => $_POST['screen'] ) );\n\n\t$mode = $_POST['post_view'] === 'excerpt' ? 'excerpt' : 'list';\n\n\t$level = 0;\n\t$request_post = array( get_post( $_POST['post_ID'] ) );\n\t$parent = $request_post[0]->post_parent;\n\n\twhile ( $parent > 0 ) {\n\t\t$parent_post = get_post( $parent );\n\t\t$parent = $parent_post->post_parent;\n\t\t$level++;\n\t}\n\n\t$wp_list_table->display_rows( array( get_post( $_POST['post_ID'] ) ), $level );\n\n\twp_die();\n}\n\n/**\n * Ajax handler for quick edit saving for a term.\n *\n * @since 3.1.0\n *\n * @global WP_List_Table $wp_list_table\n */\nfunction wp_ajax_inline_save_tax() {\n\tglobal $wp_list_table;\n\n\tcheck_ajax_referer( 'taxinlineeditnonce', '_inline_edit' );\n\n\t$taxonomy = sanitize_key( $_POST['taxonomy'] );\n\t$tax = get_taxonomy( $taxonomy );\n\tif ( ! $tax )\n\t\twp_die( 0 );\n\n\tif ( ! current_user_can( $tax->cap->edit_terms ) )\n\t\twp_die( -1 );\n\n\t$wp_list_table = _get_list_table( 'WP_Terms_List_Table', array( 'screen' => 'edit-' . $taxonomy ) );\n\n\tif ( ! isset($_POST['tax_ID']) || ! ( $id = (int) $_POST['tax_ID'] ) )\n\t\twp_die( -1 );\n\n\t$tag = get_term( $id, $taxonomy );\n\t$_POST['description'] = $tag->description;\n\n\t$updated = wp_update_term($id, $taxonomy, $_POST);\n\tif ( $updated && !is_wp_error($updated) ) {\n\t\t$tag = get_term( $updated['term_id'], $taxonomy );\n\t\tif ( !$tag || is_wp_error( $tag ) ) {\n\t\t\tif ( is_wp_error($tag) && $tag->get_error_message() )\n\t\t\t\twp_die( $tag->get_error_message() );\n\t\t\twp_die( __( 'Item not updated.' ) );\n\t\t}\n\t} else {\n\t\tif ( is_wp_error($updated) && $updated->get_error_message() )\n\t\t\twp_die( $updated->get_error_message() );\n\t\twp_die( __( 'Item not updated.' ) );\n\t}\n\t$level = 0;\n\t$parent = $tag->parent;\n\twhile ( $parent > 0 ) {\n\t\t$parent_tag = get_term( $parent, $taxonomy );\n\t\t$parent = $parent_tag->parent;\n\t\t$level++;\n\t}\n\t$wp_list_table->single_row( $tag, $level );\n\twp_die();\n}\n\n/**\n * Ajax handler for querying posts for the Find Posts modal.\n *\n * @see window.findPosts\n *\n * @since 3.1.0\n */\nfunction wp_ajax_find_posts() {\n\tcheck_ajax_referer( 'find-posts' );\n\n\t$post_types = get_post_types( array( 'public' => true ), 'objects' );\n\tunset( $post_types['attachment'] );\n\n\t$s = wp_unslash( $_POST['ps'] );\n\t$args = array(\n\t\t'post_type' => array_keys( $post_types ),\n\t\t'post_status' => 'any',\n\t\t'posts_per_page' => 50,\n\t);\n\tif ( '' !== $s )\n\t\t$args['s'] = $s;\n\n\t$posts = get_posts( $args );\n\n\tif ( ! $posts ) {\n\t\twp_send_json_error( __( 'No items found.' ) );\n\t}\n\n\t$html = '<table class=\"widefat\"><thead><tr><th class=\"found-radio\"><br /></th><th>'.__('Title').'</th><th class=\"no-break\">'.__('Type').'</th><th class=\"no-break\">'.__('Date').'</th><th class=\"no-break\">'.__('Status').'</th></tr></thead><tbody>';\n\t$alt = '';\n\tforeach ( $posts as $post ) {\n\t\t$title = trim( $post->post_title ) ? $post->post_title : __( '(no title)' );\n\t\t$alt = ( 'alternate' == $alt ) ? '' : 'alternate';\n\n\t\tswitch ( $post->post_status ) {\n\t\t\tcase 'publish' :\n\t\t\tcase 'private' :\n\t\t\t\t$stat = __('Published');\n\t\t\t\tbreak;\n\t\t\tcase 'future' :\n\t\t\t\t$stat = __('Scheduled');\n\t\t\t\tbreak;\n\t\t\tcase 'pending' :\n\t\t\t\t$stat = __('Pending Review');\n\t\t\t\tbreak;\n\t\t\tcase 'draft' :\n\t\t\t\t$stat = __('Draft');\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif ( '0000-00-00 00:00:00' == $post->post_date ) {\n\t\t\t$time = '';\n\t\t} else {\n\t\t\t/* translators: date format in table columns, see http://php.net/date */\n\t\t\t$time = mysql2date(__('Y/m/d'), $post->post_date);\n\t\t}\n\n\t\t$html .= '<tr class=\"' . trim( 'found-posts ' . $alt ) . '\"><td class=\"found-radio\"><input type=\"radio\" id=\"found-'.$post->ID.'\" name=\"found_post_id\" value=\"' . esc_attr($post->ID) . '\"></td>';\n\t\t$html .= '<td><label for=\"found-'.$post->ID.'\">' . esc_html( $title ) . '</label></td><td class=\"no-break\">' . esc_html( $post_types[$post->post_type]->labels->singular_name ) . '</td><td class=\"no-break\">'.esc_html( $time ) . '</td><td class=\"no-break\">' . esc_html( $stat ). ' </td></tr>' . \"\\n\\n\";\n\t}\n\n\t$html .= '</tbody></table>';\n\n\twp_send_json_success( $html );\n}\n\n/**\n * Ajax handler for saving the widgets order.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_widgets_order() {\n\tcheck_ajax_referer( 'save-sidebar-widgets', 'savewidgets' );\n\n\tif ( !current_user_can('edit_theme_options') )\n\t\twp_die( -1 );\n\n\tunset( $_POST['savewidgets'], $_POST['action'] );\n\n\t// Save widgets order for all sidebars.\n\tif ( is_array($_POST['sidebars']) ) {\n\t\t$sidebars = array();\n\t\tforeach ( $_POST['sidebars'] as $key => $val ) {\n\t\t\t$sb = array();\n\t\t\tif ( !empty($val) ) {\n\t\t\t\t$val = explode(',', $val);\n\t\t\t\tforeach ( $val as $k => $v ) {\n\t\t\t\t\tif ( strpos($v, 'widget-') === false )\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t$sb[$k] = substr($v, strpos($v, '_') + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$sidebars[$key] = $sb;\n\t\t}\n\t\twp_set_sidebars_widgets($sidebars);\n\t\twp_die( 1 );\n\t}\n\n\twp_die( -1 );\n}\n\n/**\n * Ajax handler for saving a widget.\n *\n * @since 3.1.0\n *\n * @global array $wp_registered_widgets\n * @global array $wp_registered_widget_controls\n * @global array $wp_registered_widget_updates\n */\nfunction wp_ajax_save_widget() {\n\tglobal $wp_registered_widgets, $wp_registered_widget_controls, $wp_registered_widget_updates;\n\n\tcheck_ajax_referer( 'save-sidebar-widgets', 'savewidgets' );\n\n\tif ( !current_user_can('edit_theme_options') || !isset($_POST['id_base']) )\n\t\twp_die( -1 );\n\n\tunset( $_POST['savewidgets'], $_POST['action'] );\n\n\t/**\n\t * Fires early when editing the widgets displayed in sidebars.\n\t *\n\t * @since 2.8.0\n\t */\n\tdo_action( 'load-widgets.php' );\n\n\t/**\n\t * Fires early when editing the widgets displayed in sidebars.\n\t *\n\t * @since 2.8.0\n\t */\n\tdo_action( 'widgets.php' );\n\n\t/** This action is documented in wp-admin/widgets.php */\n\tdo_action( 'sidebar_admin_setup' );\n\n\t$id_base = $_POST['id_base'];\n\t$widget_id = $_POST['widget-id'];\n\t$sidebar_id = $_POST['sidebar'];\n\t$multi_number = !empty($_POST['multi_number']) ? (int) $_POST['multi_number'] : 0;\n\t$settings = isset($_POST['widget-' . $id_base]) && is_array($_POST['widget-' . $id_base]) ? $_POST['widget-' . $id_base] : false;\n\t$error = '<p>' . __('An error has occurred. Please reload the page and try again.') . '</p>';\n\n\t$sidebars = wp_get_sidebars_widgets();\n\t$sidebar = isset($sidebars[$sidebar_id]) ? $sidebars[$sidebar_id] : array();\n\n\t// Delete.\n\tif ( isset($_POST['delete_widget']) && $_POST['delete_widget'] ) {\n\n\t\tif ( !isset($wp_registered_widgets[$widget_id]) )\n\t\t\twp_die( $error );\n\n\t\t$sidebar = array_diff( $sidebar, array($widget_id) );\n\t\t$_POST = array('sidebar' => $sidebar_id, 'widget-' . $id_base => array(), 'the-widget-id' => $widget_id, 'delete_widget' => '1');\n\n\t\t/** This action is documented in wp-admin/widgets.php */\n\t\tdo_action( 'delete_widget', $widget_id, $sidebar_id, $id_base );\n\n\t} elseif ( $settings && preg_match( '/__i__|%i%/', key($settings) ) ) {\n\t\tif ( !$multi_number )\n\t\t\twp_die( $error );\n\n\t\t$_POST[ 'widget-' . $id_base ] = array( $multi_number => reset( $settings ) );\n\t\t$widget_id = $id_base . '-' . $multi_number;\n\t\t$sidebar[] = $widget_id;\n\t}\n\t$_POST['widget-id'] = $sidebar;\n\n\tforeach ( (array) $wp_registered_widget_updates as $name => $control ) {\n\n\t\tif ( $name == $id_base ) {\n\t\t\tif ( !is_callable( $control['callback'] ) )\n\t\t\t\tcontinue;\n\n\t\t\tob_start();\n\t\t\t\tcall_user_func_array( $control['callback'], $control['params'] );\n\t\t\tob_end_clean();\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif ( isset($_POST['delete_widget']) && $_POST['delete_widget'] ) {\n\t\t$sidebars[$sidebar_id] = $sidebar;\n\t\twp_set_sidebars_widgets($sidebars);\n\t\techo \"deleted:$widget_id\";\n\t\twp_die();\n\t}\n\n\tif ( !empty($_POST['add_new']) )\n\t\twp_die();\n\n\tif ( $form = $wp_registered_widget_controls[$widget_id] )\n\t\tcall_user_func_array( $form['callback'], $form['params'] );\n\n\twp_die();\n}\n\n/**\n * Ajax handler for saving a widget.\n *\n * @since 3.9.0\n *\n * @global WP_Customize_Manager $wp_customize\n */\nfunction wp_ajax_update_widget() {\n\tglobal $wp_customize;\n\t$wp_customize->widgets->wp_ajax_update_widget();\n}\n\n/**\n * Ajax handler for removing inactive widgets.\n *\n * @since 4.4.0\n */\nfunction wp_ajax_delete_inactive_widgets() {\n\tcheck_ajax_referer( 'remove-inactive-widgets', 'removeinactivewidgets' );\n\n\tif ( ! current_user_can( 'edit_theme_options' ) ) {\n\t\twp_die( -1 );\n\t}\n\n\tunset( $_POST['removeinactivewidgets'], $_POST['action'] );\n\n\tdo_action( 'load-widgets.php' );\n\tdo_action( 'widgets.php' );\n\tdo_action( 'sidebar_admin_setup' );\n\n\t$sidebars_widgets = wp_get_sidebars_widgets();\n\n\tforeach ( $sidebars_widgets['wp_inactive_widgets'] as $key => $widget_id ) {\n\t\t$pieces = explode( '-', $widget_id );\n\t\t$multi_number = array_pop( $pieces );\n\t\t$id_base = implode( '-', $pieces );\n\t\t$widget = get_option( 'widget_' . $id_base );\n\t\tunset( $widget[$multi_number] );\n\t\tupdate_option( 'widget_' . $id_base, $widget );\n\t\tunset( $sidebars_widgets['wp_inactive_widgets'][$key] );\n\t}\n\n\twp_set_sidebars_widgets( $sidebars_widgets );\n\n\twp_die();\n}\n\n/**\n * Ajax handler for uploading attachments\n *\n * @since 3.3.0\n */\nfunction wp_ajax_upload_attachment() {\n\tcheck_ajax_referer( 'media-form' );\n\t/*\n\t * This function does not use wp_send_json_success() / wp_send_json_error()\n\t * as the html4 Plupload handler requires a text/html content-type for older IE.\n\t * See https://core.trac.wordpress.org/ticket/31037\n\t */\n\n\tif ( ! current_user_can( 'upload_files' ) ) {\n\t\techo wp_json_encode( array(\n\t\t\t'success' => false,\n\t\t\t'data'    => array(\n\t\t\t\t'message'  => __( 'You do not have permission to upload files.' ),\n\t\t\t\t'filename' => $_FILES['async-upload']['name'],\n\t\t\t)\n\t\t) );\n\n\t\twp_die();\n\t}\n\n\tif ( isset( $_REQUEST['post_id'] ) ) {\n\t\t$post_id = $_REQUEST['post_id'];\n\t\tif ( ! current_user_can( 'edit_post', $post_id ) ) {\n\t\t\techo wp_json_encode( array(\n\t\t\t\t'success' => false,\n\t\t\t\t'data'    => array(\n\t\t\t\t\t'message'  => __( \"You don't have permission to attach files to this post.\" ),\n\t\t\t\t\t'filename' => $_FILES['async-upload']['name'],\n\t\t\t\t)\n\t\t\t) );\n\n\t\t\twp_die();\n\t\t}\n\t} else {\n\t\t$post_id = null;\n\t}\n\n\t$post_data = isset( $_REQUEST['post_data'] ) ? $_REQUEST['post_data'] : array();\n\n\t// If the context is custom header or background, make sure the uploaded file is an image.\n\tif ( isset( $post_data['context'] ) && in_array( $post_data['context'], array( 'custom-header', 'custom-background' ) ) ) {\n\t\t$wp_filetype = wp_check_filetype_and_ext( $_FILES['async-upload']['tmp_name'], $_FILES['async-upload']['name'] );\n\t\tif ( ! wp_match_mime_types( 'image', $wp_filetype['type'] ) ) {\n\t\t\techo wp_json_encode( array(\n\t\t\t\t'success' => false,\n\t\t\t\t'data'    => array(\n\t\t\t\t\t'message'  => __( 'The uploaded file is not a valid image. Please try again.' ),\n\t\t\t\t\t'filename' => $_FILES['async-upload']['name'],\n\t\t\t\t)\n\t\t\t) );\n\n\t\t\twp_die();\n\t\t}\n\t}\n\n\t$attachment_id = media_handle_upload( 'async-upload', $post_id, $post_data );\n\n\tif ( is_wp_error( $attachment_id ) ) {\n\t\techo wp_json_encode( array(\n\t\t\t'success' => false,\n\t\t\t'data'    => array(\n\t\t\t\t'message'  => $attachment_id->get_error_message(),\n\t\t\t\t'filename' => $_FILES['async-upload']['name'],\n\t\t\t)\n\t\t) );\n\n\t\twp_die();\n\t}\n\n\tif ( isset( $post_data['context'] ) && isset( $post_data['theme'] ) ) {\n\t\tif ( 'custom-background' === $post_data['context'] )\n\t\t\tupdate_post_meta( $attachment_id, '_wp_attachment_is_custom_background', $post_data['theme'] );\n\n\t\tif ( 'custom-header' === $post_data['context'] )\n\t\t\tupdate_post_meta( $attachment_id, '_wp_attachment_is_custom_header', $post_data['theme'] );\n\t}\n\n\tif ( ! $attachment = wp_prepare_attachment_for_js( $attachment_id ) )\n\t\twp_die();\n\n\techo wp_json_encode( array(\n\t\t'success' => true,\n\t\t'data'    => $attachment,\n\t) );\n\n\twp_die();\n}\n\n/**\n * Ajax handler for image editing.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_image_editor() {\n\t$attachment_id = intval($_POST['postid']);\n\tif ( empty($attachment_id) || !current_user_can('edit_post', $attachment_id) )\n\t\twp_die( -1 );\n\n\tcheck_ajax_referer( \"image_editor-$attachment_id\" );\n\tinclude_once( ABSPATH . 'wp-admin/includes/image-edit.php' );\n\n\t$msg = false;\n\tswitch ( $_POST['do'] ) {\n\t\tcase 'save' :\n\t\t\t$msg = wp_save_image($attachment_id);\n\t\t\t$msg = wp_json_encode($msg);\n\t\t\twp_die( $msg );\n\t\t\tbreak;\n\t\tcase 'scale' :\n\t\t\t$msg = wp_save_image($attachment_id);\n\t\t\tbreak;\n\t\tcase 'restore' :\n\t\t\t$msg = wp_restore_image($attachment_id);\n\t\t\tbreak;\n\t}\n\n\twp_image_editor($attachment_id, $msg);\n\twp_die();\n}\n\n/**\n * Ajax handler for setting the featured image.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_set_post_thumbnail() {\n\t$json = ! empty( $_REQUEST['json'] ); // New-style request\n\n\t$post_ID = intval( $_POST['post_id'] );\n\tif ( ! current_user_can( 'edit_post', $post_ID ) )\n\t\twp_die( -1 );\n\n\t$thumbnail_id = intval( $_POST['thumbnail_id'] );\n\n\tif ( $json )\n\t\tcheck_ajax_referer( \"update-post_$post_ID\" );\n\telse\n\t\tcheck_ajax_referer( \"set_post_thumbnail-$post_ID\" );\n\n\tif ( $thumbnail_id == '-1' ) {\n\t\tif ( delete_post_thumbnail( $post_ID ) ) {\n\t\t\t$return = _wp_post_thumbnail_html( null, $post_ID );\n\t\t\t$json ? wp_send_json_success( $return ) : wp_die( $return );\n\t\t} else {\n\t\t\twp_die( 0 );\n\t\t}\n\t}\n\n\tif ( set_post_thumbnail( $post_ID, $thumbnail_id ) ) {\n\t\t$return = _wp_post_thumbnail_html( $thumbnail_id, $post_ID );\n\t\t$json ? wp_send_json_success( $return ) : wp_die( $return );\n\t}\n\n\twp_die( 0 );\n}\n\n/**\n * AJAX handler for setting the featured image for an attachment.\n *\n * @since 4.0.0\n *\n * @see set_post_thumbnail()\n */\nfunction wp_ajax_set_attachment_thumbnail() {\n\tif ( empty( $_POST['urls'] ) || ! is_array( $_POST['urls'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$thumbnail_id = (int) $_POST['thumbnail_id'];\n\tif ( empty( $thumbnail_id ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$post_ids = array();\n\t// For each URL, try to find its corresponding post ID.\n\tforeach ( $_POST['urls'] as $url ) {\n\t\t$post_id = attachment_url_to_postid( $url );\n\t\tif ( ! empty( $post_id ) ) {\n\t\t\t$post_ids[] = $post_id;\n\t\t}\n\t}\n\n\tif ( empty( $post_ids ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$success = 0;\n\t// For each found attachment, set its thumbnail.\n\tforeach ( $post_ids as $post_id ) {\n\t\tif ( ! current_user_can( 'edit_post', $post_id ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( set_post_thumbnail( $post_id, $thumbnail_id ) ) {\n\t\t\t$success++;\n\t\t}\n\t}\n\n\tif ( 0 === $success ) {\n\t\twp_send_json_error();\n\t} else {\n\t\twp_send_json_success();\n\t}\n\n\twp_send_json_error();\n}\n\n/**\n * Ajax handler for date formatting.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_date_format() {\n\twp_die( date_i18n( sanitize_option( 'date_format', wp_unslash( $_POST['date'] ) ) ) );\n}\n\n/**\n * Ajax handler for time formatting.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_time_format() {\n\twp_die( date_i18n( sanitize_option( 'time_format', wp_unslash( $_POST['date'] ) ) ) );\n}\n\n/**\n * Ajax handler for saving posts from the fullscreen editor.\n *\n * @since 3.1.0\n * @deprecated 4.3.0\n */\nfunction wp_ajax_wp_fullscreen_save_post() {\n\t$post_id = isset( $_POST['post_ID'] ) ? (int) $_POST['post_ID'] : 0;\n\n\t$post = null;\n\n\tif ( $post_id )\n\t\t$post = get_post( $post_id );\n\n\tcheck_ajax_referer('update-post_' . $post_id, '_wpnonce');\n\n\t$post_id = edit_post();\n\n\tif ( is_wp_error( $post_id ) ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( $post ) {\n\t\t$last_date = mysql2date( __( 'F j, Y' ), $post->post_modified );\n\t\t$last_time = mysql2date( __( 'g:i a' ), $post->post_modified );\n\t} else {\n\t\t$last_date = date_i18n( __( 'F j, Y' ) );\n\t\t$last_time = date_i18n( __( 'g:i a' ) );\n\t}\n\n\tif ( $last_id = get_post_meta( $post_id, '_edit_last', true ) ) {\n\t\t$last_user = get_userdata( $last_id );\n\t\t$last_edited = sprintf( __('Last edited by %1$s on %2$s at %3$s'), esc_html( $last_user->display_name ), $last_date, $last_time );\n\t} else {\n\t\t$last_edited = sprintf( __('Last edited on %1$s at %2$s'), $last_date, $last_time );\n\t}\n\n\twp_send_json_success( array( 'last_edited' => $last_edited ) );\n}\n\n/**\n * Ajax handler for removing a post lock.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_wp_remove_post_lock() {\n\tif ( empty( $_POST['post_ID'] ) || empty( $_POST['active_post_lock'] ) )\n\t\twp_die( 0 );\n\t$post_id = (int) $_POST['post_ID'];\n\tif ( ! $post = get_post( $post_id ) )\n\t\twp_die( 0 );\n\n\tcheck_ajax_referer( 'update-post_' . $post_id );\n\n\tif ( ! current_user_can( 'edit_post', $post_id ) )\n\t\twp_die( -1 );\n\n\t$active_lock = array_map( 'absint', explode( ':', $_POST['active_post_lock'] ) );\n\tif ( $active_lock[1] != get_current_user_id() )\n\t\twp_die( 0 );\n\n\t/**\n\t * Filter the post lock window duration.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param int $interval The interval in seconds the post lock duration\n\t *                      should last, plus 5 seconds. Default 150.\n\t */\n\t$new_lock = ( time() - apply_filters( 'wp_check_post_lock_window', 150 ) + 5 ) . ':' . $active_lock[1];\n\tupdate_post_meta( $post_id, '_edit_lock', $new_lock, implode( ':', $active_lock ) );\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for dismissing a WordPress pointer.\n *\n * @since 3.1.0\n */\nfunction wp_ajax_dismiss_wp_pointer() {\n\t$pointer = $_POST['pointer'];\n\tif ( $pointer != sanitize_key( $pointer ) )\n\t\twp_die( 0 );\n\n//\tcheck_ajax_referer( 'dismiss-pointer_' . $pointer );\n\n\t$dismissed = array_filter( explode( ',', (string) get_user_meta( get_current_user_id(), 'dismissed_wp_pointers', true ) ) );\n\n\tif ( in_array( $pointer, $dismissed ) )\n\t\twp_die( 0 );\n\n\t$dismissed[] = $pointer;\n\t$dismissed = implode( ',', $dismissed );\n\n\tupdate_user_meta( get_current_user_id(), 'dismissed_wp_pointers', $dismissed );\n\twp_die( 1 );\n}\n\n/**\n * Ajax handler for getting an attachment.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_get_attachment() {\n\tif ( ! isset( $_REQUEST['id'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! $id = absint( $_REQUEST['id'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! $post = get_post( $id ) )\n\t\twp_send_json_error();\n\n\tif ( 'attachment' != $post->post_type )\n\t\twp_send_json_error();\n\n\tif ( ! current_user_can( 'upload_files' ) )\n\t\twp_send_json_error();\n\n\tif ( ! $attachment = wp_prepare_attachment_for_js( $id ) )\n\t\twp_send_json_error();\n\n\twp_send_json_success( $attachment );\n}\n\n/**\n * Ajax handler for querying attachments.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_query_attachments() {\n\tif ( ! current_user_can( 'upload_files' ) )\n\t\twp_send_json_error();\n\n\t$query = isset( $_REQUEST['query'] ) ? (array) $_REQUEST['query'] : array();\n\t$keys = array(\n\t\t's', 'order', 'orderby', 'posts_per_page', 'paged', 'post_mime_type',\n\t\t'post_parent', 'post__in', 'post__not_in', 'year', 'monthnum'\n\t);\n\tforeach ( get_taxonomies_for_attachments( 'objects' ) as $t ) {\n\t\tif ( $t->query_var && isset( $query[ $t->query_var ] ) ) {\n\t\t\t$keys[] = $t->query_var;\n\t\t}\n\t}\n\n\t$query = array_intersect_key( $query, array_flip( $keys ) );\n\t$query['post_type'] = 'attachment';\n\tif ( MEDIA_TRASH\n\t\t&& ! empty( $_REQUEST['query']['post_status'] )\n\t\t&& 'trash' === $_REQUEST['query']['post_status'] ) {\n\t\t$query['post_status'] = 'trash';\n\t} else {\n\t\t$query['post_status'] = 'inherit';\n\t}\n\n\tif ( current_user_can( get_post_type_object( 'attachment' )->cap->read_private_posts ) )\n\t\t$query['post_status'] .= ',private';\n\n\t/**\n\t * Filter the arguments passed to WP_Query during an AJAX\n\t * call for querying attachments.\n\t *\n\t * @since 3.7.0\n\t *\n\t * @see WP_Query::parse_query()\n\t *\n\t * @param array $query An array of query variables.\n\t */\n\t$query = apply_filters( 'ajax_query_attachments_args', $query );\n\t$query = new WP_Query( $query );\n\n\t$posts = array_map( 'wp_prepare_attachment_for_js', $query->posts );\n\t$posts = array_filter( $posts );\n\n\twp_send_json_success( $posts );\n}\n\n/**\n * Ajax handler for updating attachment attributes.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_save_attachment() {\n\tif ( ! isset( $_REQUEST['id'] ) || ! isset( $_REQUEST['changes'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! $id = absint( $_REQUEST['id'] ) )\n\t\twp_send_json_error();\n\n\tcheck_ajax_referer( 'update-post_' . $id, 'nonce' );\n\n\tif ( ! current_user_can( 'edit_post', $id ) )\n\t\twp_send_json_error();\n\n\t$changes = $_REQUEST['changes'];\n\t$post    = get_post( $id, ARRAY_A );\n\n\tif ( 'attachment' != $post['post_type'] )\n\t\twp_send_json_error();\n\n\tif ( isset( $changes['parent'] ) )\n\t\t$post['post_parent'] = $changes['parent'];\n\n\tif ( isset( $changes['title'] ) )\n\t\t$post['post_title'] = $changes['title'];\n\n\tif ( isset( $changes['caption'] ) )\n\t\t$post['post_excerpt'] = $changes['caption'];\n\n\tif ( isset( $changes['description'] ) )\n\t\t$post['post_content'] = $changes['description'];\n\n\tif ( MEDIA_TRASH && isset( $changes['status'] ) )\n\t\t$post['post_status'] = $changes['status'];\n\n\tif ( isset( $changes['alt'] ) ) {\n\t\t$alt = wp_unslash( $changes['alt'] );\n\t\tif ( $alt != get_post_meta( $id, '_wp_attachment_image_alt', true ) ) {\n\t\t\t$alt = wp_strip_all_tags( $alt, true );\n\t\t\tupdate_post_meta( $id, '_wp_attachment_image_alt', wp_slash( $alt ) );\n\t\t}\n\t}\n\n\tif ( wp_attachment_is( 'audio', $post['ID'] ) ) {\n\t\t$changed = false;\n\t\t$id3data = wp_get_attachment_metadata( $post['ID'] );\n\t\tif ( ! is_array( $id3data ) ) {\n\t\t\t$changed = true;\n\t\t\t$id3data = array();\n\t\t}\n\t\tforeach ( wp_get_attachment_id3_keys( (object) $post, 'edit' ) as $key => $label ) {\n\t\t\tif ( isset( $changes[ $key ] ) ) {\n\t\t\t\t$changed = true;\n\t\t\t\t$id3data[ $key ] = sanitize_text_field( wp_unslash( $changes[ $key ] ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( $changed ) {\n\t\t\twp_update_attachment_metadata( $id, $id3data );\n\t\t}\n\t}\n\n\tif ( MEDIA_TRASH && isset( $changes['status'] ) && 'trash' === $changes['status'] ) {\n\t\twp_delete_post( $id );\n\t} else {\n\t\twp_update_post( $post );\n\t}\n\n\twp_send_json_success();\n}\n\n/**\n * Ajax handler for saving backwards compatible attachment attributes.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_save_attachment_compat() {\n\tif ( ! isset( $_REQUEST['id'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! $id = absint( $_REQUEST['id'] ) )\n\t\twp_send_json_error();\n\n\tif ( empty( $_REQUEST['attachments'] ) || empty( $_REQUEST['attachments'][ $id ] ) )\n\t\twp_send_json_error();\n\t$attachment_data = $_REQUEST['attachments'][ $id ];\n\n\tcheck_ajax_referer( 'update-post_' . $id, 'nonce' );\n\n\tif ( ! current_user_can( 'edit_post', $id ) )\n\t\twp_send_json_error();\n\n\t$post = get_post( $id, ARRAY_A );\n\n\tif ( 'attachment' != $post['post_type'] )\n\t\twp_send_json_error();\n\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$post = apply_filters( 'attachment_fields_to_save', $post, $attachment_data );\n\n\tif ( isset( $post['errors'] ) ) {\n\t\t$errors = $post['errors']; // @todo return me and display me!\n\t\tunset( $post['errors'] );\n\t}\n\n\twp_update_post( $post );\n\n\tforeach ( get_attachment_taxonomies( $post ) as $taxonomy ) {\n\t\tif ( isset( $attachment_data[ $taxonomy ] ) )\n\t\t\twp_set_object_terms( $id, array_map( 'trim', preg_split( '/,+/', $attachment_data[ $taxonomy ] ) ), $taxonomy, false );\n\t}\n\n\tif ( ! $attachment = wp_prepare_attachment_for_js( $id ) )\n\t\twp_send_json_error();\n\n\twp_send_json_success( $attachment );\n}\n\n/**\n * Ajax handler for saving the attachment order.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_save_attachment_order() {\n\tif ( ! isset( $_REQUEST['post_id'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! $post_id = absint( $_REQUEST['post_id'] ) )\n\t\twp_send_json_error();\n\n\tif ( empty( $_REQUEST['attachments'] ) )\n\t\twp_send_json_error();\n\n\tcheck_ajax_referer( 'update-post_' . $post_id, 'nonce' );\n\n\t$attachments = $_REQUEST['attachments'];\n\n\tif ( ! current_user_can( 'edit_post', $post_id ) )\n\t\twp_send_json_error();\n\n\tforeach ( $attachments as $attachment_id => $menu_order ) {\n\t\tif ( ! current_user_can( 'edit_post', $attachment_id ) )\n\t\t\tcontinue;\n\t\tif ( ! $attachment = get_post( $attachment_id ) )\n\t\t\tcontinue;\n\t\tif ( 'attachment' != $attachment->post_type )\n\t\t\tcontinue;\n\n\t\twp_update_post( array( 'ID' => $attachment_id, 'menu_order' => $menu_order ) );\n\t}\n\n\twp_send_json_success();\n}\n\n/**\n * Ajax handler for sending an attachment to the editor.\n *\n * Generates the HTML to send an attachment to the editor.\n * Backwards compatible with the media_send_to_editor filter\n * and the chain of filters that follow.\n *\n * @since 3.5.0\n */\nfunction wp_ajax_send_attachment_to_editor() {\n\tcheck_ajax_referer( 'media-send-to-editor', 'nonce' );\n\n\t$attachment = wp_unslash( $_POST['attachment'] );\n\n\t$id = intval( $attachment['id'] );\n\n\tif ( ! $post = get_post( $id ) )\n\t\twp_send_json_error();\n\n\tif ( 'attachment' != $post->post_type )\n\t\twp_send_json_error();\n\n\tif ( current_user_can( 'edit_post', $id ) ) {\n\t\t// If this attachment is unattached, attach it. Primarily a back compat thing.\n\t\tif ( 0 == $post->post_parent && $insert_into_post_id = intval( $_POST['post_id'] ) ) {\n\t\t\twp_update_post( array( 'ID' => $id, 'post_parent' => $insert_into_post_id ) );\n\t\t}\n\t}\n\n\t$url = empty( $attachment['url'] ) ? '' : $attachment['url'];\n\t$rel = ( strpos( $url, 'attachment_id') || get_attachment_link( $id ) == $url );\n\n\tremove_filter( 'media_send_to_editor', 'image_media_send_to_editor' );\n\n\tif ( 'image' === substr( $post->post_mime_type, 0, 5 ) ) {\n\t\t$align = isset( $attachment['align'] ) ? $attachment['align'] : 'none';\n\t\t$size = isset( $attachment['image-size'] ) ? $attachment['image-size'] : 'medium';\n\t\t$alt = isset( $attachment['image_alt'] ) ? $attachment['image_alt'] : '';\n\n\t\t// No whitespace-only captions.\n\t\t$caption = isset( $attachment['post_excerpt'] ) ? $attachment['post_excerpt'] : '';\n\t\tif ( '' === trim( $caption ) ) {\n\t\t\t$caption = '';\n\t\t}\n\n\t\t$title = ''; // We no longer insert title tags into <img> tags, as they are redundant.\n\t\t$html = get_image_send_to_editor( $id, $caption, $title, $align, $url, $rel, $size, $alt );\n\t} elseif ( wp_attachment_is( 'video', $post ) || wp_attachment_is( 'audio', $post )  ) {\n\t\t$html = stripslashes_deep( $_POST['html'] );\n\t} else {\n\t\t$html = isset( $attachment['post_title'] ) ? $attachment['post_title'] : '';\n\t\t$rel = $rel ? ' rel=\"attachment wp-att-' . $id . '\"' : ''; // Hard-coded string, $id is already sanitized\n\n\t\tif ( ! empty( $url ) ) {\n\t\t\t$html = '<a href=\"' . esc_url( $url ) . '\"' . $rel . '\">' . $html . '</a>';\n\t\t}\n\t}\n\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$html = apply_filters( 'media_send_to_editor', $html, $id, $attachment );\n\n\twp_send_json_success( $html );\n}\n\n/**\n * Ajax handler for sending a link to the editor.\n *\n * Generates the HTML to send a non-image embed link to the editor.\n *\n * Backwards compatible with the following filters:\n * - file_send_to_editor_url\n * - audio_send_to_editor_url\n * - video_send_to_editor_url\n *\n * @since 3.5.0\n *\n * @global WP_Post  $post\n * @global WP_Embed $wp_embed\n */\nfunction wp_ajax_send_link_to_editor() {\n\tglobal $post, $wp_embed;\n\n\tcheck_ajax_referer( 'media-send-to-editor', 'nonce' );\n\n\tif ( ! $src = wp_unslash( $_POST['src'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! strpos( $src, '://' ) )\n\t\t$src = 'http://' . $src;\n\n\tif ( ! $src = esc_url_raw( $src ) )\n\t\twp_send_json_error();\n\n\tif ( ! $link_text = trim( wp_unslash( $_POST['link_text'] ) ) )\n\t\t$link_text = wp_basename( $src );\n\n\t$post = get_post( isset( $_POST['post_id'] ) ? $_POST['post_id'] : 0 );\n\n\t// Ping WordPress for an embed.\n\t$check_embed = $wp_embed->run_shortcode( '[embed]'. $src .'[/embed]' );\n\n\t// Fallback that WordPress creates when no oEmbed was found.\n\t$fallback = $wp_embed->maybe_make_link( $src );\n\n\tif ( $check_embed !== $fallback ) {\n\t\t// TinyMCE view for [embed] will parse this\n\t\t$html = '[embed]' . $src . '[/embed]';\n\t} elseif ( $link_text ) {\n\t\t$html = '<a href=\"' . esc_url( $src ) . '\">' . $link_text . '</a>';\n\t} else {\n\t\t$html = '';\n\t}\n\n\t// Figure out what filter to run:\n\t$type = 'file';\n\tif ( ( $ext = preg_replace( '/^.+?\\.([^.]+)$/', '$1', $src ) ) && ( $ext_type = wp_ext2type( $ext ) )\n\t\t&& ( 'audio' == $ext_type || 'video' == $ext_type ) )\n\t\t\t$type = $ext_type;\n\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$html = apply_filters( $type . '_send_to_editor_url', $html, $src, $link_text );\n\n\twp_send_json_success( $html );\n}\n\n/**\n * Ajax handler for the Heartbeat API.\n *\n * Runs when the user is logged in.\n *\n * @since 3.6.0\n */\nfunction wp_ajax_heartbeat() {\n\tif ( empty( $_POST['_nonce'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$response = $data = array();\n\t$nonce_state = wp_verify_nonce( $_POST['_nonce'], 'heartbeat-nonce' );\n\n\t// screen_id is the same as $current_screen->id and the JS global 'pagenow'.\n\tif ( ! empty( $_POST['screen_id'] ) ) {\n\t\t$screen_id = sanitize_key($_POST['screen_id']);\n\t} else {\n\t\t$screen_id = 'front';\n\t}\n\n\tif ( ! empty( $_POST['data'] ) ) {\n\t\t$data = wp_unslash( (array) $_POST['data'] );\n\t}\n\n\tif ( 1 !== $nonce_state ) {\n\t\t$response = apply_filters( 'wp_refresh_nonces', $response, $data, $screen_id );\n\n\t\tif ( false === $nonce_state ) {\n\t\t\t// User is logged in but nonces have expired.\n\t\t\t$response['nonces_expired'] = true;\n\t\t\twp_send_json( $response );\n\t\t}\n\t}\n\n\tif ( ! empty( $data ) ) {\n\t\t/**\n\t\t * Filter the Heartbeat response received.\n\t\t *\n\t\t * @since 3.6.0\n\t\t *\n\t\t * @param array  $response  The Heartbeat response.\n\t\t * @param array  $data      The $_POST data sent.\n\t\t * @param string $screen_id The screen id.\n\t\t */\n\t\t$response = apply_filters( 'heartbeat_received', $response, $data, $screen_id );\n\t}\n\n\t/**\n\t * Filter the Heartbeat response sent.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param array  $response  The Heartbeat response.\n\t * @param string $screen_id The screen id.\n\t */\n\t$response = apply_filters( 'heartbeat_send', $response, $screen_id );\n\n\t/**\n\t * Fires when Heartbeat ticks in logged-in environments.\n\t *\n\t * Allows the transport to be easily replaced with long-polling.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param array  $response  The Heartbeat response.\n\t * @param string $screen_id The screen id.\n\t */\n\tdo_action( 'heartbeat_tick', $response, $screen_id );\n\n\t// Send the current time according to the server\n\t$response['server_time'] = time();\n\n\twp_send_json( $response );\n}\n\n/**\n * Ajax handler for getting revision diffs.\n *\n * @since 3.6.0\n */\nfunction wp_ajax_get_revision_diffs() {\n\trequire ABSPATH . 'wp-admin/includes/revision.php';\n\n\tif ( ! $post = get_post( (int) $_REQUEST['post_id'] ) )\n\t\twp_send_json_error();\n\n\tif ( ! current_user_can( 'read_post', $post->ID ) )\n\t\twp_send_json_error();\n\n\t// Really just pre-loading the cache here.\n\tif ( ! $revisions = wp_get_post_revisions( $post->ID, array( 'check_enabled' => false ) ) )\n\t\twp_send_json_error();\n\n\t$return = array();\n\t@set_time_limit( 0 );\n\n\tforeach ( $_REQUEST['compare'] as $compare_key ) {\n\t\tlist( $compare_from, $compare_to ) = explode( ':', $compare_key ); // from:to\n\n\t\t$return[] = array(\n\t\t\t'id' => $compare_key,\n\t\t\t'fields' => wp_get_revision_ui_diff( $post, $compare_from, $compare_to ),\n\t\t);\n\t}\n\twp_send_json_success( $return );\n}\n\n/**\n * Ajax handler for auto-saving the selected color scheme for\n * a user's own profile.\n *\n * @since 3.8.0\n *\n * @global array $_wp_admin_css_colors\n */\nfunction wp_ajax_save_user_color_scheme() {\n\tglobal $_wp_admin_css_colors;\n\n\tcheck_ajax_referer( 'save-color-scheme', 'nonce' );\n\n\t$color_scheme = sanitize_key( $_POST['color_scheme'] );\n\n\tif ( ! isset( $_wp_admin_css_colors[ $color_scheme ] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$previous_color_scheme = get_user_meta( get_current_user_id(), 'admin_color', true );\n\tupdate_user_meta( get_current_user_id(), 'admin_color', $color_scheme );\n\n\twp_send_json_success( array(\n\t\t'previousScheme' => 'admin-color-' . $previous_color_scheme,\n\t\t'currentScheme'  => 'admin-color-' . $color_scheme\n\t) );\n}\n\n/**\n * Ajax handler for getting themes from themes_api().\n *\n * @since 3.9.0\n *\n * @global array $themes_allowedtags\n * @global array $theme_field_defaults\n */\nfunction wp_ajax_query_themes() {\n\tglobal $themes_allowedtags, $theme_field_defaults;\n\n\tif ( ! current_user_can( 'install_themes' ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$args = wp_parse_args( wp_unslash( $_REQUEST['request'] ), array(\n\t\t'per_page' => 20,\n\t\t'fields'   => $theme_field_defaults\n\t) );\n\n\tif ( isset( $args['browse'] ) && 'favorites' === $args['browse'] && ! isset( $args['user'] ) ) {\n\t\t$user = get_user_option( 'wporg_favorites' );\n\t\tif ( $user ) {\n\t\t\t$args['user'] = $user;\n\t\t}\n\t}\n\n\t$old_filter = isset( $args['browse'] ) ? $args['browse'] : 'search';\n\n\t/** This filter is documented in wp-admin/includes/class-wp-theme-install-list-table.php */\n\t$args = apply_filters( 'install_themes_table_api_args_' . $old_filter, $args );\n\n\t$api = themes_api( 'query_themes', $args );\n\n\tif ( is_wp_error( $api ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$update_php = network_admin_url( 'update.php?action=install-theme' );\n\tforeach ( $api->themes as &$theme ) {\n\t\t$theme->install_url = add_query_arg( array(\n\t\t\t'theme'    => $theme->slug,\n\t\t\t'_wpnonce' => wp_create_nonce( 'install-theme_' . $theme->slug )\n\t\t), $update_php );\n\n\t\t$theme->name        = wp_kses( $theme->name, $themes_allowedtags );\n\t\t$theme->author      = wp_kses( $theme->author, $themes_allowedtags );\n\t\t$theme->version     = wp_kses( $theme->version, $themes_allowedtags );\n\t\t$theme->description = wp_kses( $theme->description, $themes_allowedtags );\n\t\t$theme->stars       = wp_star_rating( array( 'rating' => $theme->rating, 'type' => 'percent', 'number' => $theme->num_ratings, 'echo' => false ) );\n\t\t$theme->num_ratings = number_format_i18n( $theme->num_ratings );\n\t\t$theme->preview_url = set_url_scheme( $theme->preview_url );\n\t}\n\n\twp_send_json_success( $api );\n}\n\n/**\n * Apply [embed] AJAX handlers to a string.\n *\n * @since 4.0.0\n *\n * @global WP_Post    $post       Global $post.\n * @global WP_Embed   $wp_embed   Embed API instance.\n * @global WP_Scripts $wp_scripts\n */\nfunction wp_ajax_parse_embed() {\n\tglobal $post, $wp_embed;\n\n\tif ( ! $post = get_post( (int) $_POST['post_ID'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\tif ( empty( $_POST['shortcode'] ) || ! current_user_can( 'edit_post', $post->ID ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$shortcode = wp_unslash( $_POST['shortcode'] );\n\n\tpreg_match( '/' . get_shortcode_regex() . '/s', $shortcode, $matches );\n\t$atts = shortcode_parse_atts( $matches[3] );\n\tif ( ! empty( $matches[5] ) ) {\n\t\t$url = $matches[5];\n\t} elseif ( ! empty( $atts['src'] ) ) {\n\t\t$url = $atts['src'];\n\t} else {\n\t\t$url = '';\n\t}\n\n\t$parsed = false;\n\tsetup_postdata( $post );\n\n\t$wp_embed->return_false_on_fail = true;\n\n\tif ( is_ssl() && 0 === strpos( $url, 'http://' ) ) {\n\t\t// Admin is ssl and the user pasted non-ssl URL.\n\t\t// Check if the provider supports ssl embeds and use that for the preview.\n\t\t$ssl_shortcode = preg_replace( '%^(\\\\[embed[^\\\\]]*\\\\])http://%i', '$1https://', $shortcode );\n\t\t$parsed = $wp_embed->run_shortcode( $ssl_shortcode );\n\n\t\tif ( ! $parsed ) {\n\t\t\t$no_ssl_support = true;\n\t\t}\n\t}\n\n\tif ( $url && ! $parsed ) {\n\t\t$parsed = $wp_embed->run_shortcode( $shortcode );\n\t}\n\n\tif ( ! $parsed ) {\n\t\twp_send_json_error( array(\n\t\t\t'type' => 'not-embeddable',\n\t\t\t'message' => sprintf( __( '%s failed to embed.' ), '<code>' . esc_html( $url ) . '</code>' ),\n\t\t) );\n\t}\n\n\tif ( has_shortcode( $parsed, 'audio' ) || has_shortcode( $parsed, 'video' ) ) {\n\t\t$styles = '';\n\t\t$mce_styles = wpview_media_sandbox_styles();\n\t\tforeach ( $mce_styles as $style ) {\n\t\t\t$styles .= sprintf( '<link rel=\"stylesheet\" href=\"%s\"/>', $style );\n\t\t}\n\n\t\t$html = do_shortcode( $parsed );\n\n\t\tglobal $wp_scripts;\n\t\tif ( ! empty( $wp_scripts ) ) {\n\t\t\t$wp_scripts->done = array();\n\t\t}\n\t\tob_start();\n\t\twp_print_scripts( 'wp-mediaelement' );\n\t\t$scripts = ob_get_clean();\n\n\t\t$parsed = $styles . $html . $scripts;\n\t}\n\n\n\tif ( ! empty( $no_ssl_support ) || ( is_ssl() && ( preg_match( '%<(iframe|script|embed) [^>]*src=\"http://%', $parsed ) ||\n\t\tpreg_match( '%<link [^>]*href=\"http://%', $parsed ) ) ) ) {\n\t\t// Admin is ssl and the embed is not. Iframes, scripts, and other \"active content\" will be blocked.\n\t\twp_send_json_error( array(\n\t\t\t'type' => 'not-ssl',\n\t\t\t'message' => __( 'This preview is unavailable in the editor.' ),\n\t\t) );\n\t}\n\n\twp_send_json_success( array(\n\t\t'body' => $parsed,\n\t\t'attr' => $wp_embed->last_attr\n\t) );\n}\n\n/**\n * @since 4.0.0\n *\n * @global WP_Post    $post\n * @global WP_Scripts $wp_scripts\n */\nfunction wp_ajax_parse_media_shortcode() {\n\tglobal $post, $wp_scripts;\n\n\tif ( empty( $_POST['shortcode'] ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$shortcode = wp_unslash( $_POST['shortcode'] );\n\n\tif ( ! empty( $_POST['post_ID'] ) ) {\n\t\t$post = get_post( (int) $_POST['post_ID'] );\n\t}\n\n\t// the embed shortcode requires a post\n\tif ( ! $post || ! current_user_can( 'edit_post', $post->ID ) ) {\n\t\tif ( 'embed' === $shortcode ) {\n\t\t\twp_send_json_error();\n\t\t}\n\t} else {\n\t\tsetup_postdata( $post );\n\t}\n\n\t$parsed = do_shortcode( $shortcode  );\n\n\tif ( empty( $parsed ) ) {\n\t\twp_send_json_error( array(\n\t\t\t'type' => 'no-items',\n\t\t\t'message' => __( 'No items found.' ),\n\t\t) );\n\t}\n\n\t$head = '';\n\t$styles = wpview_media_sandbox_styles();\n\n\tforeach ( $styles as $style ) {\n\t\t$head .= '<link type=\"text/css\" rel=\"stylesheet\" href=\"' . $style . '\">';\n\t}\n\n\tif ( ! empty( $wp_scripts ) ) {\n\t\t$wp_scripts->done = array();\n\t}\n\n\tob_start();\n\n\techo $parsed;\n\n\tif ( 'playlist' === $_REQUEST['type'] ) {\n\t\twp_underscore_playlist_templates();\n\n\t\twp_print_scripts( 'wp-playlist' );\n\t} else {\n\t\twp_print_scripts( array( 'froogaloop', 'wp-mediaelement' ) );\n\t}\n\n\twp_send_json_success( array(\n\t\t'head' => $head,\n\t\t'body' => ob_get_clean()\n\t) );\n}\n\n/**\n * AJAX handler for destroying multiple open sessions for a user.\n *\n * @since 4.1.0\n */\nfunction wp_ajax_destroy_sessions() {\n\t$user = get_userdata( (int) $_POST['user_id'] );\n\tif ( $user ) {\n\t\tif ( ! current_user_can( 'edit_user', $user->ID ) ) {\n\t\t\t$user = false;\n\t\t} elseif ( ! wp_verify_nonce( $_POST['nonce'], 'update-user_' . $user->ID ) ) {\n\t\t\t$user = false;\n\t\t}\n\t}\n\n\tif ( ! $user ) {\n\t\twp_send_json_error( array(\n\t\t\t'message' => __( 'Could not log out user sessions. Please try again.' ),\n\t\t) );\n\t}\n\n\t$sessions = WP_Session_Tokens::get_instance( $user->ID );\n\n\tif ( $user->ID === get_current_user_id() ) {\n\t\t$sessions->destroy_others( wp_get_session_token() );\n\t\t$message = __( 'You are now logged out everywhere else.' );\n\t} else {\n\t\t$sessions->destroy_all();\n\t\t/* translators: 1: User's display name. */\n\t\t$message = sprintf( __( '%s has been logged out.' ), $user->display_name );\n\t}\n\n\twp_send_json_success( array( 'message' => $message ) );\n}\n\n\n/**\n * AJAX handler for updating a plugin.\n *\n * @since 4.2.0\n *\n * @see Plugin_Upgrader\n */\nfunction wp_ajax_update_plugin() {\n\tglobal $wp_filesystem;\n\n\t$plugin = urldecode( $_POST['plugin'] );\n\n\t$status = array(\n\t\t'update'     => 'plugin',\n\t\t'plugin'     => $plugin,\n\t\t'slug'       => sanitize_key( $_POST['slug'] ),\n\t\t'oldVersion' => '',\n\t\t'newVersion' => '',\n\t);\n\n\t$plugin_data = get_plugin_data( WP_PLUGIN_DIR . '/' . $plugin );\n\tif ( $plugin_data['Version'] ) {\n\t\t$status['oldVersion'] = sprintf( __( 'Version %s' ), $plugin_data['Version'] );\n\t}\n\n\tif ( ! current_user_can( 'update_plugins' ) ) {\n\t\t$status['error'] = __( 'You do not have sufficient permissions to update plugins for this site.' );\n \t\twp_send_json_error( $status );\n\t}\n\n\tcheck_ajax_referer( 'updates' );\n\n\tinclude_once( ABSPATH . 'wp-admin/includes/class-wp-upgrader.php' );\n\n\twp_update_plugins();\n\n\t$skin = new Automatic_Upgrader_Skin();\n\t$upgrader = new Plugin_Upgrader( $skin );\n\t$result = $upgrader->bulk_upgrade( array( $plugin ) );\n\n\tif ( is_array( $result ) && empty( $result[$plugin] ) && is_wp_error( $skin->result ) ) {\n\t\t$result = $skin->result;\n\t}\n\n\tif ( is_array( $result ) && !empty( $result[ $plugin ] ) ) {\n\t\t$plugin_update_data = current( $result );\n\n\t\t/*\n\t\t * If the `update_plugins` site transient is empty (e.g. when you update\n\t\t * two plugins in quick succession before the transient repopulates),\n\t\t * this may be the return.\n\t\t *\n\t\t * Preferably something can be done to ensure `update_plugins` isn't empty.\n\t\t * For now, surface some sort of error here.\n\t\t */\n\t\tif ( $plugin_update_data === true ) {\n\t\t\t$status['error'] = __( 'Plugin update failed.' );\n \t\t\twp_send_json_error( $status );\n\t\t}\n\n\t\t$plugin_data = get_plugins( '/' . $result[ $plugin ]['destination_name'] );\n\t\t$plugin_data = reset( $plugin_data );\n\n\t\tif ( $plugin_data['Version'] ) {\n\t\t\t$status['newVersion'] = sprintf( __( 'Version %s' ), $plugin_data['Version'] );\n\t\t}\n\n\t\twp_send_json_success( $status );\n\t} else if ( is_wp_error( $result ) ) {\n\t\t$status['error'] = $result->get_error_message();\n \t\twp_send_json_error( $status );\n\n \t} else if ( is_bool( $result ) && ! $result ) {\n\t\t$status['errorCode'] = 'unable_to_connect_to_filesystem';\n\t\t$status['error'] = __( 'Unable to connect to the filesystem. Please confirm your credentials.' );\n\n\t\t// Pass through the error from WP_Filesystem if one was raised\n\t\tif ( is_wp_error( $wp_filesystem->errors ) && $wp_filesystem->errors->get_error_code() ) {\n\t\t\t$status['error'] = $wp_filesystem->errors->get_error_message();\n\t\t}\n\n\t\twp_send_json_error( $status );\n\n\t} else {\n\t\t// An unhandled error occured\n\t\t$status['error'] = __( 'Plugin update failed.' );\n\t\twp_send_json_error( $status );\n\t}\n}\n\n/**\n * AJAX handler for saving a post from Press This.\n *\n * @since 4.2.0\n *\n * @global WP_Press_This $wp_press_this\n */\nfunction wp_ajax_press_this_save_post() {\n\tif ( empty( $GLOBALS['wp_press_this'] ) ) {\n\t\tinclude( ABSPATH . 'wp-admin/includes/class-wp-press-this.php' );\n\t}\n\n\t$GLOBALS['wp_press_this']->save_post();\n}\n\n/**\n * AJAX handler for creating new category from Press This.\n *\n * @since 4.2.0\n *\n * @global WP_Press_This $wp_press_this\n */\nfunction wp_ajax_press_this_add_category() {\n\tif ( empty( $GLOBALS['wp_press_this'] ) ) {\n\t\tinclude( ABSPATH . 'wp-admin/includes/class-wp-press-this.php' );\n\t}\n\n\t$GLOBALS['wp_press_this']->add_category();\n}\n\n/**\n * AJAX handler for cropping an image.\n *\n * @since 4.3.0\n *\n * @global WP_Site_Icon $wp_site_icon\n */\nfunction wp_ajax_crop_image() {\n\t$attachment_id = absint( $_POST['id'] );\n\n\tcheck_ajax_referer( 'image_editor-' . $attachment_id, 'nonce' );\n\tif ( ! current_user_can( 'customize' ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$context = str_replace( '_', '-', $_POST['context'] );\n\t$data    = array_map( 'absint', $_POST['cropDetails'] );\n\t$cropped = wp_crop_image( $attachment_id, $data['x1'], $data['y1'], $data['width'], $data['height'], $data['dst_width'], $data['dst_height'] );\n\n\tif ( ! $cropped || is_wp_error( $cropped ) ) {\n\t\twp_send_json_error( array( 'message' => __( 'Image could not be processed.' ) ) );\n\t}\n\n\tswitch ( $context ) {\n\t\tcase 'site-icon':\n\t\t\trequire_once ABSPATH . '/wp-admin/includes/class-wp-site-icon.php';\n\t\t\tglobal $wp_site_icon;\n\n\t\t\t// Skip creating a new attachment if the attachment is a Site Icon.\n\t\t\tif ( get_post_meta( $attachment_id, '_wp_attachment_context', true ) == $context ) {\n\n\t\t\t\t// Delete the temporary cropped file, we don't need it.\n\t\t\t\twp_delete_file( $cropped );\n\n\t\t\t\t// Additional sizes in wp_prepare_attachment_for_js().\n\t\t\t\tadd_filter( 'image_size_names_choose', array( $wp_site_icon, 'additional_sizes' ) );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t/** This filter is documented in wp-admin/custom-header.php */\n\t\t\t$cropped = apply_filters( 'wp_create_file_in_uploads', $cropped, $attachment_id ); // For replication.\n\t\t\t$object  = $wp_site_icon->create_attachment_object( $cropped, $attachment_id );\n\t\t\tunset( $object['ID'] );\n\n\t\t\t// Update the attachment.\n\t\t\tadd_filter( 'intermediate_image_sizes_advanced', array( $wp_site_icon, 'additional_sizes' ) );\n\t\t\t$attachment_id = $wp_site_icon->insert_attachment( $object, $cropped );\n\t\t\tremove_filter( 'intermediate_image_sizes_advanced', array( $wp_site_icon, 'additional_sizes' ) );\n\n\t\t\t// Additional sizes in wp_prepare_attachment_for_js().\n\t\t\tadd_filter( 'image_size_names_choose', array( $wp_site_icon, 'additional_sizes' ) );\n\t\t\tbreak;\n\n\t\tdefault:\n\n\t\t\t/**\n\t\t\t * Fires before a cropped image is saved.\n\t\t\t *\n\t\t\t * Allows to add filters to modify the way a cropped image is saved.\n\t\t\t *\n\t\t\t * @since 4.3.0\n\t\t\t *\n\t\t\t * @param string $context       The Customizer control requesting the cropped image.\n\t\t\t * @param int    $attachment_id The attachment ID of the original image.\n\t\t\t * @param string $cropped       Path to the cropped image file.\n\t\t\t */\n\t\t\tdo_action( 'wp_ajax_crop_image_pre_save', $context, $attachment_id, $cropped );\n\n\t\t\t/** This filter is documented in wp-admin/custom-header.php */\n\t\t\t$cropped = apply_filters( 'wp_create_file_in_uploads', $cropped, $attachment_id ); // For replication.\n\n\t\t\t$parent_url = wp_get_attachment_url( $attachment_id );\n\t\t\t$url        = str_replace( basename( $parent_url ), basename( $cropped ), $parent_url );\n\n\t\t\t$size       = @getimagesize( $cropped );\n\t\t\t$image_type = ( $size ) ? $size['mime'] : 'image/jpeg';\n\n\t\t\t$object = array(\n\t\t\t\t'post_title'     => basename( $cropped ),\n\t\t\t\t'post_content'   => $url,\n\t\t\t\t'post_mime_type' => $image_type,\n\t\t\t\t'guid'           => $url,\n\t\t\t\t'context'        => $context,\n\t\t\t);\n\n\t\t\t$attachment_id = wp_insert_attachment( $object, $cropped );\n\t\t\t$metadata = wp_generate_attachment_metadata( $attachment_id, $cropped );\n\n\t\t\t/**\n\t\t\t * Filter the cropped image attachment metadata.\n\t\t\t *\n\t\t\t * @since 4.3.0\n\t\t\t *\n\t\t\t * @see wp_generate_attachment_metadata()\n\t\t\t *\n\t\t\t * @param array $metadata Attachment metadata.\n\t\t\t */\n\t\t\t$metadata = apply_filters( 'wp_ajax_cropped_attachment_metadata', $metadata );\n\t\t\twp_update_attachment_metadata( $attachment_id, $metadata );\n\n\t\t\t/**\n\t\t\t * Filter the attachment ID for a cropped image.\n\t\t\t *\n\t\t\t * @since 4.3.0\n\t\t\t *\n\t\t\t * @param int    $attachment_id The attachment ID of the cropped image.\n\t\t\t * @param string $context       The Customizer control requesting the cropped image.\n\t\t\t */\n\t\t\t$attachment_id = apply_filters( 'wp_ajax_cropped_attachment_id', $attachment_id, $context );\n\t}\n\n\twp_send_json_success( wp_prepare_attachment_for_js( $attachment_id ) );\n}\n\n/**\n * Ajax handler for generating a password.\n *\n * @since 4.4.0\n */\nfunction wp_ajax_generate_password() {\n\twp_send_json_success( wp_generate_password( 24 ) );\n}\n\n/**\n * Ajax handler for saving the user's WordPress.org username.\n *\n * @since 4.4.0\n */\nfunction wp_ajax_save_wporg_username() {\n\tif ( ! current_user_can( 'install_themes' ) && ! current_user_can( 'install_plugins' ) ) {\n\t\twp_send_json_error();\n\t}\n\n\t$username = isset( $_REQUEST['username'] ) ? wp_unslash( $_REQUEST['username'] ) : false;\n\n\tif ( ! $username ) {\n\t\twp_send_json_error();\n\t}\n\n\twp_send_json_success( update_user_meta( get_current_user_id(), 'wporg_favorites', $username ) );\n}\n", "<?php\n/**\n * Template WordPress Administration API.\n *\n * A Big Mess. Also some neat functions that are nicely written.\n *\n * @package WordPress\n * @subpackage Administration\n */\n\n/** Walker_Category_Checklist class */\nrequire_once( ABSPATH . 'wp-admin/includes/class-walker-category-checklist.php' );\n\n/** WP_Internal_Pointers class */\nrequire_once( ABSPATH . 'wp-admin/includes/class-wp-internal-pointers.php' );\n\n//\n// Category Checklists\n//\n\n/**\n * Output an unordered list of checkbox input elements labeled with category names.\n *\n * @since 2.5.1\n *\n * @see wp_terms_checklist()\n *\n * @param int    $post_id              Optional. Post to generate a categories checklist for. Default 0.\n *                                     $selected_cats must not be an array. Default 0.\n * @param int    $descendants_and_self Optional. ID of the category to output along with its descendants.\n *                                     Default 0.\n * @param array  $selected_cats        Optional. List of categories to mark as checked. Default false.\n * @param array  $popular_cats         Optional. List of categories to receive the \"popular-category\" class.\n *                                     Default false.\n * @param object $walker               Optional. Walker object to use to build the output.\n *                                     Default is a Walker_Category_Checklist instance.\n * @param bool   $checked_ontop        Optional. Whether to move checked items out of the hierarchy and to\n *                                     the top of the list. Default true.\n */\nfunction wp_category_checklist( $post_id = 0, $descendants_and_self = 0, $selected_cats = false, $popular_cats = false, $walker = null, $checked_ontop = true ) {\n\twp_terms_checklist( $post_id, array(\n\t\t'taxonomy' => 'category',\n\t\t'descendants_and_self' => $descendants_and_self,\n\t\t'selected_cats' => $selected_cats,\n\t\t'popular_cats' => $popular_cats,\n\t\t'walker' => $walker,\n\t\t'checked_ontop' => $checked_ontop\n\t) );\n}\n\n/**\n * Output an unordered list of checkbox input elements labelled with term names.\n *\n * Taxonomy-independent version of wp_category_checklist().\n *\n * @since 3.0.0\n * @since 4.4.0 Introduced the `$echo` argument.\n *\n * @param int          $post_id Optional. Post ID. Default 0.\n * @param array|string $args {\n *     Optional. Array or string of arguments for generating a terms checklist. Default empty array.\n *\n *     @type int    $descendants_and_self ID of the category to output along with its descendants.\n *                                        Default 0.\n *     @type array  $selected_cats        List of categories to mark as checked. Default false.\n *     @type array  $popular_cats         List of categories to receive the \"popular-category\" class.\n *                                        Default false.\n *     @type object $walker               Walker object to use to build the output.\n *                                        Default is a Walker_Category_Checklist instance.\n *     @type string $taxonomy             Taxonomy to generate the checklist for. Default 'category'.\n *     @type bool   $checked_ontop        Whether to move checked items out of the hierarchy and to\n *                                        the top of the list. Default true.\n *     @type bool   $echo                 Whether to echo the generated markup. False to return the markup instead\n *                                        of echoing it. Default true.\n * }\n */\nfunction wp_terms_checklist( $post_id = 0, $args = array() ) {\n \t$defaults = array(\n\t\t'descendants_and_self' => 0,\n\t\t'selected_cats' => false,\n\t\t'popular_cats' => false,\n\t\t'walker' => null,\n\t\t'taxonomy' => 'category',\n\t\t'checked_ontop' => true,\n\t\t'echo' => true,\n\t);\n\n\t/**\n\t * Filter the taxonomy terms checklist arguments.\n\t *\n\t * @since 3.4.0\n\t *\n\t * @see wp_terms_checklist()\n\t *\n\t * @param array $args    An array of arguments.\n\t * @param int   $post_id The post ID.\n\t */\n\t$params = apply_filters( 'wp_terms_checklist_args', $args, $post_id );\n\n\t$r = wp_parse_args( $params, $defaults );\n\n\tif ( empty( $r['walker'] ) || ! ( $r['walker'] instanceof Walker ) ) {\n\t\t$walker = new Walker_Category_Checklist;\n\t} else {\n\t\t$walker = $r['walker'];\n\t}\n\n\t$taxonomy = $r['taxonomy'];\n\t$descendants_and_self = (int) $r['descendants_and_self'];\n\n\t$args = array( 'taxonomy' => $taxonomy );\n\n\t$tax = get_taxonomy( $taxonomy );\n\t$args['disabled'] = ! current_user_can( $tax->cap->assign_terms );\n\n\t$args['list_only'] = ! empty( $r['list_only'] );\n\n\tif ( is_array( $r['selected_cats'] ) ) {\n\t\t$args['selected_cats'] = $r['selected_cats'];\n\t} elseif ( $post_id ) {\n\t\t$args['selected_cats'] = wp_get_object_terms( $post_id, $taxonomy, array_merge( $args, array( 'fields' => 'ids' ) ) );\n\t} else {\n\t\t$args['selected_cats'] = array();\n\t}\n\tif ( is_array( $r['popular_cats'] ) ) {\n\t\t$args['popular_cats'] = $r['popular_cats'];\n\t} else {\n\t\t$args['popular_cats'] = get_terms( $taxonomy, array(\n\t\t\t'fields' => 'ids',\n\t\t\t'orderby' => 'count',\n\t\t\t'order' => 'DESC',\n\t\t\t'number' => 10,\n\t\t\t'hierarchical' => false\n\t\t) );\n\t}\n\tif ( $descendants_and_self ) {\n\t\t$categories = (array) get_terms( $taxonomy, array(\n\t\t\t'child_of' => $descendants_and_self,\n\t\t\t'hierarchical' => 0,\n\t\t\t'hide_empty' => 0\n\t\t) );\n\t\t$self = get_term( $descendants_and_self, $taxonomy );\n\t\tarray_unshift( $categories, $self );\n\t} else {\n\t\t$categories = (array) get_terms( $taxonomy, array( 'get' => 'all' ) );\n\t}\n\n\t$output = '';\n\n\tif ( $r['checked_ontop'] ) {\n\t\t// Post process $categories rather than adding an exclude to the get_terms() query to keep the query the same across all posts (for any query cache)\n\t\t$checked_categories = array();\n\t\t$keys = array_keys( $categories );\n\n\t\tforeach ( $keys as $k ) {\n\t\t\tif ( in_array( $categories[$k]->term_id, $args['selected_cats'] ) ) {\n\t\t\t\t$checked_categories[] = $categories[$k];\n\t\t\t\tunset( $categories[$k] );\n\t\t\t}\n\t\t}\n\n\t\t// Put checked cats on top\n\t\t$output .= call_user_func_array( array( $walker, 'walk' ), array( $checked_categories, 0, $args ) );\n\t}\n\t// Then the rest of them\n\t$output .= call_user_func_array( array( $walker, 'walk' ), array( $categories, 0, $args ) );\n\n\tif ( $r['echo'] ) {\n\t\techo $output;\n\t}\n\n\treturn $output;\n}\n\n/**\n * Retrieve a list of the most popular terms from the specified taxonomy.\n *\n * If the $echo argument is true then the elements for a list of checkbox\n * `<input>` elements labelled with the names of the selected terms is output.\n * If the $post_ID global isn't empty then the terms associated with that\n * post will be marked as checked.\n *\n * @since 2.5.0\n *\n * @param string $taxonomy Taxonomy to retrieve terms from.\n * @param int $default Not used.\n * @param int $number Number of terms to retrieve. Defaults to 10.\n * @param bool $echo Optionally output the list as well. Defaults to true.\n * @return array List of popular term IDs.\n */\nfunction wp_popular_terms_checklist( $taxonomy, $default = 0, $number = 10, $echo = true ) {\n\t$post = get_post();\n\n\tif ( $post && $post->ID )\n\t\t$checked_terms = wp_get_object_terms($post->ID, $taxonomy, array('fields'=>'ids'));\n\telse\n\t\t$checked_terms = array();\n\n\t$terms = get_terms( $taxonomy, array( 'orderby' => 'count', 'order' => 'DESC', 'number' => $number, 'hierarchical' => false ) );\n\n\t$tax = get_taxonomy($taxonomy);\n\n\t$popular_ids = array();\n\tforeach ( (array) $terms as $term ) {\n\t\t$popular_ids[] = $term->term_id;\n\t\tif ( !$echo ) // hack for AJAX use\n\t\t\tcontinue;\n\t\t$id = \"popular-$taxonomy-$term->term_id\";\n\t\t$checked = in_array( $term->term_id, $checked_terms ) ? 'checked=\"checked\"' : '';\n\t\t?>\n\n\t\t<li id=\"<?php echo $id; ?>\" class=\"popular-category\">\n\t\t\t<label class=\"selectit\">\n\t\t\t\t<input id=\"in-<?php echo $id; ?>\" type=\"checkbox\" <?php echo $checked; ?> value=\"<?php echo (int) $term->term_id; ?>\" <?php disabled( ! current_user_can( $tax->cap->assign_terms ) ); ?> />\n\t\t\t\t<?php\n\t\t\t\t/** This filter is documented in wp-includes/category-template.php */\n\t\t\t\techo esc_html( apply_filters( 'the_category', $term->name ) );\n\t\t\t\t?>\n\t\t\t</label>\n\t\t</li>\n\n\t\t<?php\n\t}\n\treturn $popular_ids;\n}\n\n/**\n * Outputs a link category checklist element.\n *\n * @since 2.5.1\n *\n * @param int $link_id\n */\nfunction wp_link_category_checklist( $link_id = 0 ) {\n\t$default = 1;\n\n\t$checked_categories = array();\n\n\tif ( $link_id ) {\n\t\t$checked_categories = wp_get_link_cats( $link_id );\n\t\t// No selected categories, strange\n\t\tif ( ! count( $checked_categories ) ) {\n\t\t\t$checked_categories[] = $default;\n\t\t}\n\t} else {\n\t\t$checked_categories[] = $default;\n\t}\n\n\t$categories = get_terms( 'link_category', array( 'orderby' => 'name', 'hide_empty' => 0 ) );\n\n\tif ( empty( $categories ) )\n\t\treturn;\n\n\tforeach ( $categories as $category ) {\n\t\t$cat_id = $category->term_id;\n\n\t\t/** This filter is documented in wp-includes/category-template.php */\n\t\t$name = esc_html( apply_filters( 'the_category', $category->name ) );\n\t\t$checked = in_array( $cat_id, $checked_categories ) ? ' checked=\"checked\"' : '';\n\t\techo '<li id=\"link-category-', $cat_id, '\"><label for=\"in-link-category-', $cat_id, '\" class=\"selectit\"><input value=\"', $cat_id, '\" type=\"checkbox\" name=\"link_category[]\" id=\"in-link-category-', $cat_id, '\"', $checked, '/> ', $name, \"</label></li>\";\n\t}\n}\n\n/**\n * Adds hidden fields with the data for use in the inline editor for posts and pages.\n *\n * @since 2.7.0\n *\n * @param WP_Post $post Post object.\n */\nfunction get_inline_data($post) {\n\t$post_type_object = get_post_type_object($post->post_type);\n\tif ( ! current_user_can( 'edit_post', $post->ID ) )\n\t\treturn;\n\n\t$title = esc_textarea( trim( $post->post_title ) );\n\n\t/** This filter is documented in wp-admin/edit-tag-form.php */\n\techo '\n<div class=\"hidden\" id=\"inline_' . $post->ID . '\">\n\t<div class=\"post_title\">' . $title . '</div>' .\n\t/** This filter is documented in wp-admin/edit-tag-form.php */\n\t'<div class=\"post_name\">' . apply_filters( 'editable_slug', $post->post_name, $post ) . '</div>\n\t<div class=\"post_author\">' . $post->post_author . '</div>\n\t<div class=\"comment_status\">' . esc_html( $post->comment_status ) . '</div>\n\t<div class=\"ping_status\">' . esc_html( $post->ping_status ) . '</div>\n\t<div class=\"_status\">' . esc_html( $post->post_status ) . '</div>\n\t<div class=\"jj\">' . mysql2date( 'd', $post->post_date, false ) . '</div>\n\t<div class=\"mm\">' . mysql2date( 'm', $post->post_date, false ) . '</div>\n\t<div class=\"aa\">' . mysql2date( 'Y', $post->post_date, false ) . '</div>\n\t<div class=\"hh\">' . mysql2date( 'H', $post->post_date, false ) . '</div>\n\t<div class=\"mn\">' . mysql2date( 'i', $post->post_date, false ) . '</div>\n\t<div class=\"ss\">' . mysql2date( 's', $post->post_date, false ) . '</div>\n\t<div class=\"post_password\">' . esc_html( $post->post_password ) . '</div>';\n\n\tif ( $post_type_object->hierarchical )\n\t\techo '<div class=\"post_parent\">' . $post->post_parent . '</div>';\n\n\tif ( $post->post_type == 'page' )\n\t\techo '<div class=\"page_template\">' . esc_html( get_post_meta( $post->ID, '_wp_page_template', true ) ) . '</div>';\n\n\tif ( post_type_supports( $post->post_type, 'page-attributes' ) )\n\t\techo '<div class=\"menu_order\">' . $post->menu_order . '</div>';\n\n\t$taxonomy_names = get_object_taxonomies( $post->post_type );\n\tforeach ( $taxonomy_names as $taxonomy_name) {\n\t\t$taxonomy = get_taxonomy( $taxonomy_name );\n\n\t\tif ( $taxonomy->hierarchical && $taxonomy->show_ui ) {\n\n\t\t\t$terms = get_object_term_cache( $post->ID, $taxonomy_name );\n\t\t\tif ( false === $terms ) {\n\t\t\t\t$terms = wp_get_object_terms( $post->ID, $taxonomy_name );\n\t\t\t\twp_cache_add( $post->ID, $terms, $taxonomy_name . '_relationships' );\n\t\t\t}\n\t\t\t$term_ids = empty( $terms ) ? array() : wp_list_pluck( $terms, 'term_id' );\n\n\t\t\techo '<div class=\"post_category\" id=\"' . $taxonomy_name . '_' . $post->ID . '\">' . implode( ',', $term_ids ) . '</div>';\n\n\t\t} elseif ( $taxonomy->show_ui ) {\n\n\t\t\t$terms_to_edit = get_terms_to_edit( $post->ID, $taxonomy_name );\n\t\t\tif ( ! is_string( $terms_to_edit ) ) {\n\t\t\t\t$terms_to_edit = '';\n\t\t\t}\n\n\t\t\techo '<div class=\"tags_input\" id=\"'.$taxonomy_name.'_'.$post->ID.'\">'\n\t\t\t\t. esc_html( str_replace( ',', ', ', $terms_to_edit ) ) . '</div>';\n\n\t\t}\n\t}\n\n\tif ( !$post_type_object->hierarchical )\n\t\techo '<div class=\"sticky\">' . (is_sticky($post->ID) ? 'sticky' : '') . '</div>';\n\n\tif ( post_type_supports( $post->post_type, 'post-formats' ) )\n\t\techo '<div class=\"post_format\">' . esc_html( get_post_format( $post->ID ) ) . '</div>';\n\n\techo '</div>';\n}\n\n/**\n * Outputs the in-line comment reply-to form in the Comments list table.\n *\n * @since 2.7.0\n *\n * @global WP_List_Table $wp_list_table\n *\n * @param int    $position\n * @param bool   $checkbox\n * @param string $mode\n * @param bool   $table_row\n */\nfunction wp_comment_reply( $position = 1, $checkbox = false, $mode = 'single', $table_row = true ) {\n\tglobal $wp_list_table;\n\t/**\n\t * Filter the in-line comment reply-to form output in the Comments\n\t * list table.\n\t *\n\t * Returning a non-empty value here will short-circuit display\n\t * of the in-line comment-reply form in the Comments list table,\n\t * echoing the returned value instead.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @see wp_comment_reply()\n\t *\n\t * @param string $content The reply-to form content.\n\t * @param array  $args    An array of default args.\n\t */\n\t$content = apply_filters( 'wp_comment_reply', '', array( 'position' => $position, 'checkbox' => $checkbox, 'mode' => $mode ) );\n\n\tif ( ! empty($content) ) {\n\t\techo $content;\n\t\treturn;\n\t}\n\n\tif ( ! $wp_list_table ) {\n\t\tif ( $mode == 'single' ) {\n\t\t\t$wp_list_table = _get_list_table('WP_Post_Comments_List_Table');\n\t\t} else {\n\t\t\t$wp_list_table = _get_list_table('WP_Comments_List_Table');\n\t\t}\n\t}\n\n?>\n<form method=\"get\">\n<?php if ( $table_row ) : ?>\n<table style=\"display:none;\"><tbody id=\"com-reply\"><tr id=\"replyrow\" class=\"inline-edit-row\" style=\"display:none;\"><td colspan=\"<?php echo $wp_list_table->get_column_count(); ?>\" class=\"colspanchange\">\n<?php else : ?>\n<div id=\"com-reply\" style=\"display:none;\"><div id=\"replyrow\" style=\"display:none;\">\n<?php endif; ?>\n\t<fieldset class=\"comment-reply\">\n\t<legend>\n\t\t<span class=\"hidden\" id=\"editlegend\"><?php _e( 'Edit Comment' ); ?></span>\n\t\t<span class=\"hidden\" id=\"replyhead\"><?php _e( 'Reply to Comment' ); ?></span>\n\t\t<span class=\"hidden\" id=\"addhead\"><?php _e( 'Add new Comment' ); ?></span>\n\t</legend>\n\n\t<div id=\"replycontainer\">\n\t<label for=\"replycontent\" class=\"screen-reader-text\"><?php _e( 'Comment' ); ?></label>\n\t<?php\n\t$quicktags_settings = array( 'buttons' => 'strong,em,link,block,del,ins,img,ul,ol,li,code,close' );\n\twp_editor( '', 'replycontent', array( 'media_buttons' => false, 'tinymce' => false, 'quicktags' => $quicktags_settings ) );\n\t?>\n\t</div>\n\n\t<div id=\"edithead\" style=\"display:none;\">\n\t\t<div class=\"inside\">\n\t\t<label for=\"author-name\"><?php _e( 'Name' ) ?></label>\n\t\t<input type=\"text\" name=\"newcomment_author\" size=\"50\" value=\"\" id=\"author-name\" />\n\t\t</div>\n\n\t\t<div class=\"inside\">\n\t\t<label for=\"author-email\"><?php _e('Email') ?></label>\n\t\t<input type=\"text\" name=\"newcomment_author_email\" size=\"50\" value=\"\" id=\"author-email\" />\n\t\t</div>\n\n\t\t<div class=\"inside\">\n\t\t<label for=\"author-url\"><?php _e('URL') ?></label>\n\t\t<input type=\"text\" id=\"author-url\" name=\"newcomment_author_url\" class=\"code\" size=\"103\" value=\"\" />\n\t\t</div>\n\t</div>\n\n\t<p id=\"replysubmit\" class=\"submit\">\n\t<a href=\"#comments-form\" class=\"save button-primary alignright\">\n\t<span id=\"addbtn\" style=\"display:none;\"><?php _e('Add Comment'); ?></span>\n\t<span id=\"savebtn\" style=\"display:none;\"><?php _e('Update Comment'); ?></span>\n\t<span id=\"replybtn\" style=\"display:none;\"><?php _e('Submit Reply'); ?></span></a>\n\t<a href=\"#comments-form\" class=\"cancel button-secondary alignleft\"><?php _e('Cancel'); ?></a>\n\t<span class=\"waiting spinner\"></span>\n\t<span class=\"error\" style=\"display:none;\"></span>\n\t</p>\n\n\t<input type=\"hidden\" name=\"action\" id=\"action\" value=\"\" />\n\t<input type=\"hidden\" name=\"comment_ID\" id=\"comment_ID\" value=\"\" />\n\t<input type=\"hidden\" name=\"comment_post_ID\" id=\"comment_post_ID\" value=\"\" />\n\t<input type=\"hidden\" name=\"status\" id=\"status\" value=\"\" />\n\t<input type=\"hidden\" name=\"position\" id=\"position\" value=\"<?php echo $position; ?>\" />\n\t<input type=\"hidden\" name=\"checkbox\" id=\"checkbox\" value=\"<?php echo $checkbox ? 1 : 0; ?>\" />\n\t<input type=\"hidden\" name=\"mode\" id=\"mode\" value=\"<?php echo esc_attr($mode); ?>\" />\n\t<?php\n\t\twp_nonce_field( 'replyto-comment', '_ajax_nonce-replyto-comment', false );\n\t\tif ( current_user_can( 'unfiltered_html' ) )\n\t\t\twp_nonce_field( 'unfiltered-html-comment', '_wp_unfiltered_html_comment', false );\n\t?>\n\t</fieldset>\n<?php if ( $table_row ) : ?>\n</td></tr></tbody></table>\n<?php else : ?>\n</div></div>\n<?php endif; ?>\n</form>\n<?php\n}\n\n/**\n * Output 'undo move to trash' text for comments\n *\n * @since 2.9.0\n */\nfunction wp_comment_trashnotice() {\n?>\n<div class=\"hidden\" id=\"trash-undo-holder\">\n\t<div class=\"trash-undo-inside\"><?php printf(__('Comment by %s moved to the trash.'), '<strong></strong>'); ?> <span class=\"undo untrash\"><a href=\"#\"><?php _e('Undo'); ?></a></span></div>\n</div>\n<div class=\"hidden\" id=\"spam-undo-holder\">\n\t<div class=\"spam-undo-inside\"><?php printf(__('Comment by %s marked as spam.'), '<strong></strong>'); ?> <span class=\"undo unspam\"><a href=\"#\"><?php _e('Undo'); ?></a></span></div>\n</div>\n<?php\n}\n\n/**\n * Outputs a post's public meta data in the Custom Fields meta box.\n *\n * @since 1.2.0\n *\n * @param array $meta\n */\nfunction list_meta( $meta ) {\n\t// Exit if no meta\n\tif ( ! $meta ) {\n\t\techo '\n<table id=\"list-table\" style=\"display: none;\">\n\t<thead>\n\t<tr>\n\t\t<th class=\"left\">' . _x( 'Name', 'meta name' ) . '</th>\n\t\t<th>' . __( 'Value' ) . '</th>\n\t</tr>\n\t</thead>\n\t<tbody id=\"the-list\" data-wp-lists=\"list:meta\">\n\t<tr><td></td></tr>\n\t</tbody>\n</table>'; //TBODY needed for list-manipulation JS\n\t\treturn;\n\t}\n\t$count = 0;\n?>\n<table id=\"list-table\">\n\t<thead>\n\t<tr>\n\t\t<th class=\"left\"><?php _ex( 'Name', 'meta name' ) ?></th>\n\t\t<th><?php _e( 'Value' ) ?></th>\n\t</tr>\n\t</thead>\n\t<tbody id='the-list' data-wp-lists='list:meta'>\n<?php\n\tforeach ( $meta as $entry )\n\t\techo _list_meta_row( $entry, $count );\n?>\n\t</tbody>\n</table>\n<?php\n}\n\n/**\n * Outputs a single row of public meta data in the Custom Fields meta box.\n *\n * @since 2.5.0\n *\n * @staticvar string $update_nonce\n *\n * @param array $entry\n * @param int   $count\n * @return string\n */\nfunction _list_meta_row( $entry, &$count ) {\n\tstatic $update_nonce = '';\n\n\tif ( is_protected_meta( $entry['meta_key'], 'post' ) )\n\t\treturn '';\n\n\tif ( ! $update_nonce )\n\t\t$update_nonce = wp_create_nonce( 'add-meta' );\n\n\t$r = '';\n\t++ $count;\n\n\tif ( is_serialized( $entry['meta_value'] ) ) {\n\t\tif ( is_serialized_string( $entry['meta_value'] ) ) {\n\t\t\t// This is a serialized string, so we should display it.\n\t\t\t$entry['meta_value'] = maybe_unserialize( $entry['meta_value'] );\n\t\t} else {\n\t\t\t// This is a serialized array/object so we should NOT display it.\n\t\t\t--$count;\n\t\t\treturn '';\n\t\t}\n\t}\n\n\t$entry['meta_key'] = esc_attr($entry['meta_key']);\n\t$entry['meta_value'] = esc_textarea( $entry['meta_value'] ); // using a <textarea />\n\t$entry['meta_id'] = (int) $entry['meta_id'];\n\n\t$delete_nonce = wp_create_nonce( 'delete-meta_' . $entry['meta_id'] );\n\n\t$r .= \"\\n\\t<tr id='meta-{$entry['meta_id']}'>\";\n\t$r .= \"\\n\\t\\t<td class='left'><label class='screen-reader-text' for='meta-{$entry['meta_id']}-key'>\" . __( 'Key' ) . \"</label><input name='meta[{$entry['meta_id']}][key]' id='meta-{$entry['meta_id']}-key' type='text' size='20' value='{$entry['meta_key']}' />\";\n\n\t$r .= \"\\n\\t\\t<div class='submit'>\";\n\t$r .= get_submit_button( __( 'Delete' ), 'deletemeta small', \"deletemeta[{$entry['meta_id']}]\", false, array( 'data-wp-lists' => \"delete:the-list:meta-{$entry['meta_id']}::_ajax_nonce=$delete_nonce\" ) );\n\t$r .= \"\\n\\t\\t\";\n\t$r .= get_submit_button( __( 'Update' ), 'updatemeta small', \"meta-{$entry['meta_id']}-submit\", false, array( 'data-wp-lists' => \"add:the-list:meta-{$entry['meta_id']}::_ajax_nonce-add-meta=$update_nonce\" ) );\n\t$r .= \"</div>\";\n\t$r .= wp_nonce_field( 'change-meta', '_ajax_nonce', false, false );\n\t$r .= \"</td>\";\n\n\t$r .= \"\\n\\t\\t<td><label class='screen-reader-text' for='meta-{$entry['meta_id']}-value'>\" . __( 'Value' ) . \"</label><textarea name='meta[{$entry['meta_id']}][value]' id='meta-{$entry['meta_id']}-value' rows='2' cols='30'>{$entry['meta_value']}</textarea></td>\\n\\t</tr>\";\n\treturn $r;\n}\n\n/**\n * Prints the form in the Custom Fields meta box.\n *\n * @since 1.2.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param WP_Post $post Optional. The post being edited.\n */\nfunction meta_form( $post = null ) {\n\tglobal $wpdb;\n\t$post = get_post( $post );\n\n\t/**\n\t * Filter values for the meta key dropdown in the Custom Fields meta box.\n\t *\n\t * Returning a non-null value will effectively short-circuit and avoid a\n\t * potentially expensive query against postmeta.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param array|null $keys Pre-defined meta keys to be used in place of a postmeta query. Default null.\n\t * @param WP_Post    $post The current post object.\n\t */\n\t$keys = apply_filters( 'postmeta_form_keys', null, $post );\n\n\tif ( null === $keys ) {\n\t\t/**\n\t\t * Filter the number of custom fields to retrieve for the drop-down\n\t\t * in the Custom Fields meta box.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @param int $limit Number of custom fields to retrieve. Default 30.\n\t\t */\n\t\t$limit = apply_filters( 'postmeta_form_limit', 30 );\n\t\t$sql = \"SELECT DISTINCT meta_key\n\t\t\tFROM $wpdb->postmeta\n\t\t\tWHERE meta_key NOT BETWEEN '_' AND '_z'\n\t\t\tHAVING meta_key NOT LIKE %s\n\t\t\tORDER BY meta_key\n\t\t\tLIMIT %d\";\n\t\t$keys = $wpdb->get_col( $wpdb->prepare( $sql, $wpdb->esc_like( '_' ) . '%', $limit ) );\n\t}\n\n\tif ( $keys ) {\n\t\tnatcasesort( $keys );\n\t\t$meta_key_input_id = 'metakeyselect';\n\t} else {\n\t\t$meta_key_input_id = 'metakeyinput';\n\t}\n?>\n<p><strong><?php _e( 'Add New Custom Field:' ) ?></strong></p>\n<table id=\"newmeta\">\n<thead>\n<tr>\n<th class=\"left\"><label for=\"<?php echo $meta_key_input_id; ?>\"><?php _ex( 'Name', 'meta name' ) ?></label></th>\n<th><label for=\"metavalue\"><?php _e( 'Value' ) ?></label></th>\n</tr>\n</thead>\n\n<tbody>\n<tr>\n<td id=\"newmetaleft\" class=\"left\">\n<?php if ( $keys ) { ?>\n<select id=\"metakeyselect\" name=\"metakeyselect\">\n<option value=\"#NONE#\"><?php _e( '&mdash; Select &mdash;' ); ?></option>\n<?php\n\n\tforeach ( $keys as $key ) {\n\t\tif ( is_protected_meta( $key, 'post' ) || ! current_user_can( 'add_post_meta', $post->ID, $key ) )\n\t\t\tcontinue;\n\t\techo \"\\n<option value='\" . esc_attr($key) . \"'>\" . esc_html($key) . \"</option>\";\n\t}\n?>\n</select>\n<input class=\"hide-if-js\" type=\"text\" id=\"metakeyinput\" name=\"metakeyinput\" value=\"\" />\n<a href=\"#postcustomstuff\" class=\"hide-if-no-js\" onclick=\"jQuery('#metakeyinput, #metakeyselect, #enternew, #cancelnew').toggle();return false;\">\n<span id=\"enternew\"><?php _e('Enter new'); ?></span>\n<span id=\"cancelnew\" class=\"hidden\"><?php _e('Cancel'); ?></span></a>\n<?php } else { ?>\n<input type=\"text\" id=\"metakeyinput\" name=\"metakeyinput\" value=\"\" />\n<?php } ?>\n</td>\n<td><textarea id=\"metavalue\" name=\"metavalue\" rows=\"2\" cols=\"25\"></textarea></td>\n</tr>\n\n<tr><td colspan=\"2\">\n<div class=\"submit\">\n<?php submit_button( __( 'Add Custom Field' ), 'secondary', 'addmeta', false, array( 'id' => 'newmeta-submit', 'data-wp-lists' => 'add:the-list:newmeta' ) ); ?>\n</div>\n<?php wp_nonce_field( 'add-meta', '_ajax_nonce-add-meta', false ); ?>\n</td></tr>\n</tbody>\n</table>\n<?php\n\n}\n\n/**\n * Print out HTML form date elements for editing post or comment publish date.\n *\n * @since 0.71\n * @since 4.4.0 Converted to use get_comment() instead of the global `$comment`.\n *\n * @global WP_Locale  $wp_locale\n *\n * @param int|bool $edit      Accepts 1|true for editing the date, 0|false for adding the date.\n * @param int|bool $for_post  Accepts 1|true for applying the date to a post, 0|false for a comment.\n * @param int      $tab_index The tabindex attribute to add. Default 0.\n * @param int|bool $multi     Optional. Whether the additional fields and buttons should be added.\n *                            Default 0|false.\n */\nfunction touch_time( $edit = 1, $for_post = 1, $tab_index = 0, $multi = 0 ) {\n\tglobal $wp_locale;\n\t$post = get_post();\n\n\tif ( $for_post )\n\t\t$edit = ! ( in_array($post->post_status, array('draft', 'pending') ) && (!$post->post_date_gmt || '0000-00-00 00:00:00' == $post->post_date_gmt ) );\n\n\t$tab_index_attribute = '';\n\tif ( (int) $tab_index > 0 )\n\t\t$tab_index_attribute = \" tabindex=\\\"$tab_index\\\"\";\n\n\t// todo: Remove this?\n\t// echo '<label for=\"timestamp\" style=\"display: block;\"><input type=\"checkbox\" class=\"checkbox\" name=\"edit_date\" value=\"1\" id=\"timestamp\"'.$tab_index_attribute.' /> '.__( 'Edit timestamp' ).'</label><br />';\n\n\t$time_adj = current_time('timestamp');\n\t$post_date = ($for_post) ? $post->post_date : get_comment()->comment_date;\n\t$jj = ($edit) ? mysql2date( 'd', $post_date, false ) : gmdate( 'd', $time_adj );\n\t$mm = ($edit) ? mysql2date( 'm', $post_date, false ) : gmdate( 'm', $time_adj );\n\t$aa = ($edit) ? mysql2date( 'Y', $post_date, false ) : gmdate( 'Y', $time_adj );\n\t$hh = ($edit) ? mysql2date( 'H', $post_date, false ) : gmdate( 'H', $time_adj );\n\t$mn = ($edit) ? mysql2date( 'i', $post_date, false ) : gmdate( 'i', $time_adj );\n\t$ss = ($edit) ? mysql2date( 's', $post_date, false ) : gmdate( 's', $time_adj );\n\n\t$cur_jj = gmdate( 'd', $time_adj );\n\t$cur_mm = gmdate( 'm', $time_adj );\n\t$cur_aa = gmdate( 'Y', $time_adj );\n\t$cur_hh = gmdate( 'H', $time_adj );\n\t$cur_mn = gmdate( 'i', $time_adj );\n\n\t$month = '<label><span class=\"screen-reader-text\">' . __( 'Month' ) . '</span><select ' . ( $multi ? '' : 'id=\"mm\" ' ) . 'name=\"mm\"' . $tab_index_attribute . \">\\n\";\n\tfor ( $i = 1; $i < 13; $i = $i +1 ) {\n\t\t$monthnum = zeroise($i, 2);\n\t\t$monthtext = $wp_locale->get_month_abbrev( $wp_locale->get_month( $i ) );\n\t\t$month .= \"\\t\\t\\t\" . '<option value=\"' . $monthnum . '\" data-text=\"' . $monthtext . '\" ' . selected( $monthnum, $mm, false ) . '>';\n\t\t/* translators: 1: month number (01, 02, etc.), 2: month abbreviation */\n\t\t$month .= sprintf( __( '%1$s-%2$s' ), $monthnum, $monthtext ) . \"</option>\\n\";\n\t}\n\t$month .= '</select></label>';\n\n\t$day = '<label><span class=\"screen-reader-text\">' . __( 'Day' ) . '</span><input type=\"text\" ' . ( $multi ? '' : 'id=\"jj\" ' ) . 'name=\"jj\" value=\"' . $jj . '\" size=\"2\" maxlength=\"2\"' . $tab_index_attribute . ' autocomplete=\"off\" /></label>';\n\t$year = '<label><span class=\"screen-reader-text\">' . __( 'Year' ) . '</span><input type=\"text\" ' . ( $multi ? '' : 'id=\"aa\" ' ) . 'name=\"aa\" value=\"' . $aa . '\" size=\"4\" maxlength=\"4\"' . $tab_index_attribute . ' autocomplete=\"off\" /></label>';\n\t$hour = '<label><span class=\"screen-reader-text\">' . __( 'Hour' ) . '</span><input type=\"text\" ' . ( $multi ? '' : 'id=\"hh\" ' ) . 'name=\"hh\" value=\"' . $hh . '\" size=\"2\" maxlength=\"2\"' . $tab_index_attribute . ' autocomplete=\"off\" /></label>';\n\t$minute = '<label><span class=\"screen-reader-text\">' . __( 'Minute' ) . '</span><input type=\"text\" ' . ( $multi ? '' : 'id=\"mn\" ' ) . 'name=\"mn\" value=\"' . $mn . '\" size=\"2\" maxlength=\"2\"' . $tab_index_attribute . ' autocomplete=\"off\" /></label>';\n\n\techo '<div class=\"timestamp-wrap\">';\n\t/* translators: 1: month, 2: day, 3: year, 4: hour, 5: minute */\n\tprintf( __( '%1$s %2$s, %3$s @ %4$s:%5$s' ), $month, $day, $year, $hour, $minute );\n\n\techo '</div><input type=\"hidden\" id=\"ss\" name=\"ss\" value=\"' . $ss . '\" />';\n\n\tif ( $multi ) return;\n\n\techo \"\\n\\n\";\n\t$map = array(\n\t\t'mm' => array( $mm, $cur_mm ),\n\t\t'jj' => array( $jj, $cur_jj ),\n\t\t'aa' => array( $aa, $cur_aa ),\n\t\t'hh' => array( $hh, $cur_hh ),\n\t\t'mn' => array( $mn, $cur_mn ),\n\t);\n\tforeach ( $map as $timeunit => $value ) {\n\t\tlist( $unit, $curr ) = $value;\n\n\t\techo '<input type=\"hidden\" id=\"hidden_' . $timeunit . '\" name=\"hidden_' . $timeunit . '\" value=\"' . $unit . '\" />' . \"\\n\";\n\t\t$cur_timeunit = 'cur_' . $timeunit;\n\t\techo '<input type=\"hidden\" id=\"' . $cur_timeunit . '\" name=\"' . $cur_timeunit . '\" value=\"' . $curr . '\" />' . \"\\n\";\n\t}\n?>\n\n<p>\n<a href=\"#edit_timestamp\" class=\"save-timestamp hide-if-no-js button\"><?php _e('OK'); ?></a>\n<a href=\"#edit_timestamp\" class=\"cancel-timestamp hide-if-no-js button-cancel\"><?php _e('Cancel'); ?></a>\n</p>\n<?php\n}\n\n/**\n * Print out option HTML elements for the page templates drop-down.\n *\n * @since 1.5.0\n *\n * @param string $default Optional. The template file name. Default empty.\n */\nfunction page_template_dropdown( $default = '' ) {\n\t$templates = get_page_templates( get_post() );\n\tksort( $templates );\n\tforeach ( array_keys( $templates ) as $template ) {\n\t\t$selected = selected( $default, $templates[ $template ], false );\n\t\techo \"\\n\\t<option value='\" . $templates[ $template ] . \"' $selected>$template</option>\";\n\t}\n}\n\n/**\n * Print out option HTML elements for the page parents drop-down.\n *\n * @since 1.5.0\n * @since 4.4.0 `$post` argument was added.\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int         $default Optional. The default page ID to be pre-selected. Default 0.\n * @param int         $parent  Optional. The parent page ID. Default 0.\n * @param int         $level   Optional. Page depth level. Default 0.\n * @param int|WP_Post $post    Post ID or WP_Post object.\n *\n * @return null|false Boolean False if page has no children, otherwise print out html elements\n */\nfunction parent_dropdown( $default = 0, $parent = 0, $level = 0, $post = null ) {\n\tglobal $wpdb;\n\t$post = get_post( $post );\n\t$items = $wpdb->get_results( $wpdb->prepare(\"SELECT ID, post_parent, post_title FROM $wpdb->posts WHERE post_parent = %d AND post_type = 'page' ORDER BY menu_order\", $parent) );\n\n\tif ( $items ) {\n\t\tforeach ( $items as $item ) {\n\t\t\t// A page cannot be its own parent.\n\t\t\tif ( $post && $post->ID && $item->ID == $post->ID )\n\t\t\t\tcontinue;\n\n\t\t\t$pad = str_repeat( '&nbsp;', $level * 3 );\n\t\t\t$selected = selected( $default, $item->ID, false );\n\n\t\t\techo \"\\n\\t<option class='level-$level' value='$item->ID' $selected>$pad \" . esc_html($item->post_title) . \"</option>\";\n\t\t\tparent_dropdown( $default, $item->ID, $level +1 );\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/**\n * Print out option html elements for role selectors.\n *\n * @since 2.1.0\n *\n * @param string $selected Slug for the role that should be already selected.\n */\nfunction wp_dropdown_roles( $selected = '' ) {\n\t$p = '';\n\t$r = '';\n\n\t$editable_roles = array_reverse( get_editable_roles() );\n\n\tforeach ( $editable_roles as $role => $details ) {\n\t\t$name = translate_user_role($details['name'] );\n\t\tif ( $selected == $role ) // preselect specified role\n\t\t\t$p = \"\\n\\t<option selected='selected' value='\" . esc_attr($role) . \"'>$name</option>\";\n\t\telse\n\t\t\t$r .= \"\\n\\t<option value='\" . esc_attr($role) . \"'>$name</option>\";\n\t}\n\techo $p . $r;\n}\n\n/**\n * Outputs the form used by the importers to accept the data to be imported\n *\n * @since 2.0.0\n *\n * @param string $action The action attribute for the form.\n */\nfunction wp_import_upload_form( $action ) {\n\n\t/**\n\t * Filter the maximum allowed upload size for import files.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @see wp_max_upload_size()\n\t *\n\t * @param int $max_upload_size Allowed upload size. Default 1 MB.\n\t */\n\t$bytes = apply_filters( 'import_upload_size_limit', wp_max_upload_size() );\n\t$size = size_format( $bytes );\n\t$upload_dir = wp_upload_dir();\n\tif ( ! empty( $upload_dir['error'] ) ) :\n\t\t?><div class=\"error\"><p><?php _e('Before you can upload your import file, you will need to fix the following error:'); ?></p>\n\t\t<p><strong><?php echo $upload_dir['error']; ?></strong></p></div><?php\n\telse :\n?>\n<form enctype=\"multipart/form-data\" id=\"import-upload-form\" method=\"post\" class=\"wp-upload-form\" action=\"<?php echo esc_url( wp_nonce_url( $action, 'import-upload' ) ); ?>\">\n<p>\n<label for=\"upload\"><?php _e( 'Choose a file from your computer:' ); ?></label> (<?php printf( __('Maximum size: %s' ), $size ); ?>)\n<input type=\"file\" id=\"upload\" name=\"import\" size=\"25\" />\n<input type=\"hidden\" name=\"action\" value=\"save\" />\n<input type=\"hidden\" name=\"max_file_size\" value=\"<?php echo $bytes; ?>\" />\n</p>\n<?php submit_button( __('Upload file and import'), 'primary' ); ?>\n</form>\n<?php\n\tendif;\n}\n\n/**\n * Adds a meta box to one or more screens.\n *\n * @since 2.5.0\n * @since 4.4.0 The `$screen` parameter now accepts an array of screen IDs.\n *\n * @global array $wp_meta_boxes\n *\n * @param string                 $id            Meta box ID (used in the 'id' attribute for the meta box).\n * @param string                 $title         Title of the meta box.\n * @param callable               $callback      Function that fills the box with the desired content.\n *                                              The function should echo its output.\n * @param string|array|WP_Screen $screen        Optional. The screen or screens on which to show the box\n *                                              (such as a post type, 'link', or 'comment'). Accepts a single\n *                                              screen ID, WP_Screen object, or array of screen IDs. Default\n *                                              is the current screen.\n * @param string                 $context       Optional. The context within the screen where the boxes\n *                                              should display. Available contexts vary from screen to\n *                                              screen. Post edit screen contexts include 'normal', 'side',\n *                                              and 'advanced'. Comments screen contexts include 'normal'\n *                                              and 'side'. Menus meta boxes (accordion sections) all use\n *                                              the 'side' context. Global default is 'advanced'.\n * @param string                 $priority      Optional. The priority within the context where the boxes\n *                                              should show ('high', 'low'). Default 'default'.\n * @param array                  $callback_args Optional. Data that should be set as the $args property\n *                                              of the box array (which is the second parameter passed\n *                                              to your callback). Default null.\n */\nfunction add_meta_box( $id, $title, $callback, $screen = null, $context = 'advanced', $priority = 'default', $callback_args = null ) {\n\tglobal $wp_meta_boxes;\n\n\tif ( empty( $screen ) ) {\n\t\t$screen = get_current_screen();\n\t} elseif ( is_string( $screen ) ) {\n\t\t$screen = convert_to_screen( $screen );\n\t} elseif ( is_array( $screen ) ) {\n\t\tforeach ( $screen as $single_screen ) {\n\t\t\tadd_meta_box( $id, $title, $callback, $single_screen, $context, $priority, $callback_args );\n\t\t}\n\t}\n\n\tif ( ! isset( $screen->id ) ) {\n\t\treturn;\n\t}\n\n\t$page = $screen->id;\n\n\tif ( !isset($wp_meta_boxes) )\n\t\t$wp_meta_boxes = array();\n\tif ( !isset($wp_meta_boxes[$page]) )\n\t\t$wp_meta_boxes[$page] = array();\n\tif ( !isset($wp_meta_boxes[$page][$context]) )\n\t\t$wp_meta_boxes[$page][$context] = array();\n\n\tforeach ( array_keys($wp_meta_boxes[$page]) as $a_context ) {\n\t\tforeach ( array('high', 'core', 'default', 'low') as $a_priority ) {\n\t\t\tif ( !isset($wp_meta_boxes[$page][$a_context][$a_priority][$id]) )\n\t\t\t\tcontinue;\n\n\t\t\t// If a core box was previously added or removed by a plugin, don't add.\n\t\t\tif ( 'core' == $priority ) {\n\t\t\t\t// If core box previously deleted, don't add\n\t\t\t\tif ( false === $wp_meta_boxes[$page][$a_context][$a_priority][$id] )\n\t\t\t\t\treturn;\n\n\t\t\t\t/*\n\t\t\t\t * If box was added with default priority, give it core priority to\n\t\t\t\t * maintain sort order.\n\t\t\t\t */\n\t\t\t\tif ( 'default' == $a_priority ) {\n\t\t\t\t\t$wp_meta_boxes[$page][$a_context]['core'][$id] = $wp_meta_boxes[$page][$a_context]['default'][$id];\n\t\t\t\t\tunset($wp_meta_boxes[$page][$a_context]['default'][$id]);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If no priority given and id already present, use existing priority.\n\t\t\tif ( empty($priority) ) {\n\t\t\t\t$priority = $a_priority;\n\t\t\t/*\n\t\t\t * Else, if we're adding to the sorted priority, we don't know the title\n\t\t\t * or callback. Grab them from the previously added context/priority.\n\t\t\t */\n\t\t\t} elseif ( 'sorted' == $priority ) {\n\t\t\t\t$title = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['title'];\n\t\t\t\t$callback = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['callback'];\n\t\t\t\t$callback_args = $wp_meta_boxes[$page][$a_context][$a_priority][$id]['args'];\n\t\t\t}\n\t\t\t// An id can be in only one priority and one context.\n\t\t\tif ( $priority != $a_priority || $context != $a_context )\n\t\t\t\tunset($wp_meta_boxes[$page][$a_context][$a_priority][$id]);\n\t\t}\n\t}\n\n\tif ( empty($priority) )\n\t\t$priority = 'low';\n\n\tif ( !isset($wp_meta_boxes[$page][$context][$priority]) )\n\t\t$wp_meta_boxes[$page][$context][$priority] = array();\n\n\t$wp_meta_boxes[$page][$context][$priority][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback, 'args' => $callback_args);\n}\n\n/**\n * Meta-Box template function\n *\n * @since 2.5.0\n *\n * @global array $wp_meta_boxes\n *\n * @staticvar bool $already_sorted\n * @param string|WP_Screen $screen  Screen identifier\n * @param string           $context box context\n * @param mixed            $object  gets passed to the box callback function as first parameter\n * @return int number of meta_boxes\n */\nfunction do_meta_boxes( $screen, $context, $object ) {\n\tglobal $wp_meta_boxes;\n\tstatic $already_sorted = false;\n\n\tif ( empty( $screen ) )\n\t\t$screen = get_current_screen();\n\telseif ( is_string( $screen ) )\n\t\t$screen = convert_to_screen( $screen );\n\n\t$page = $screen->id;\n\n\t$hidden = get_hidden_meta_boxes( $screen );\n\n\tprintf('<div id=\"%s-sortables\" class=\"meta-box-sortables\">', htmlspecialchars($context));\n\n\t// Grab the ones the user has manually sorted. Pull them out of their previous context/priority and into the one the user chose\n\tif ( ! $already_sorted && $sorted = get_user_option( \"meta-box-order_$page\" ) ) {\n\t\tforeach ( $sorted as $box_context => $ids ) {\n\t\t\tforeach ( explode( ',', $ids ) as $id ) {\n\t\t\t\tif ( $id && 'dashboard_browser_nag' !== $id ) {\n\t\t\t\t\tadd_meta_box( $id, null, null, $screen, $box_context, 'sorted' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t$already_sorted = true;\n\n\t$i = 0;\n\n\tif ( isset( $wp_meta_boxes[ $page ][ $context ] ) ) {\n\t\tforeach ( array( 'high', 'sorted', 'core', 'default', 'low' ) as $priority ) {\n\t\t\tif ( isset( $wp_meta_boxes[ $page ][ $context ][ $priority ]) ) {\n\t\t\t\tforeach ( (array) $wp_meta_boxes[ $page ][ $context ][ $priority ] as $box ) {\n\t\t\t\t\tif ( false == $box || ! $box['title'] )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t$i++;\n\t\t\t\t\t$hidden_class = in_array($box['id'], $hidden) ? ' hide-if-js' : '';\n\t\t\t\t\techo '<div id=\"' . $box['id'] . '\" class=\"postbox ' . postbox_classes($box['id'], $page) . $hidden_class . '\" ' . '>' . \"\\n\";\n\t\t\t\t\tif ( 'dashboard_browser_nag' != $box['id'] ) {\n\t\t\t\t\t\techo '<button type=\"button\" class=\"handlediv button-link\" aria-expanded=\"true\">';\n\t\t\t\t\t\techo '<span class=\"screen-reader-text\">' . sprintf( __( 'Toggle panel: %s' ), $box['title'] ) . '</span>';\n\t\t\t\t\t\techo '<span class=\"toggle-indicator\" aria-hidden=\"true\"></span>';\n\t\t\t\t\t\techo '</button>';\n\t\t\t\t\t}\n\t\t\t\t\techo \"<h2 class='hndle'><span>{$box['title']}</span></h2>\\n\";\n\t\t\t\t\techo '<div class=\"inside\">' . \"\\n\";\n\t\t\t\t\tcall_user_func($box['callback'], $object, $box);\n\t\t\t\t\techo \"</div>\\n\";\n\t\t\t\t\techo \"</div>\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\techo \"</div>\";\n\n\treturn $i;\n\n}\n\n/**\n * Removes a meta box from one or more screens.\n *\n * @since 2.6.0\n * @since 4.4.0 The `$screen` parameter now accepts an array of screen IDs.\n *\n * @global array $wp_meta_boxes\n *\n * @param string                 $id      Meta box ID (used in the 'id' attribute for the meta box).\n * @param string|array|WP_Screen $screen  The screen or screens on which the meta box is shown (such as a\n *                                        post type, 'link', or 'comment'). Accepts a single screen ID,\n *                                        WP_Screen object, or array of screen IDs.\n * @param string                 $context Optional. The context within the screen where the boxes\n *                                        should display. Available contexts vary from screen to\n *                                        screen. Post edit screen contexts include 'normal', 'side',\n *                                        and 'advanced'. Comments screen contexts include 'normal'\n *                                        and 'side'. Menus meta boxes (accordion sections) all use\n *                                        the 'side' context. Global default is 'advanced'.\n */\nfunction remove_meta_box( $id, $screen, $context ) {\n\tglobal $wp_meta_boxes;\n\n\tif ( empty( $screen ) ) {\n\t\t$screen = get_current_screen();\n\t} elseif ( is_string( $screen ) ) {\n\t\t$screen = convert_to_screen( $screen );\n\t} elseif ( is_array( $screen ) ) {\n\t\tforeach ( $screen as $single_screen ) {\n\t\t\tremove_meta_box( $id, $single_screen, $context );\n\t\t}\n\t}\n\n\tif ( ! isset( $screen->id ) ) {\n\t\treturn;\n\t}\n\n\t$page = $screen->id;\n\n\tif ( !isset($wp_meta_boxes) )\n\t\t$wp_meta_boxes = array();\n\tif ( !isset($wp_meta_boxes[$page]) )\n\t\t$wp_meta_boxes[$page] = array();\n\tif ( !isset($wp_meta_boxes[$page][$context]) )\n\t\t$wp_meta_boxes[$page][$context] = array();\n\n\tforeach ( array('high', 'core', 'default', 'low') as $priority )\n\t\t$wp_meta_boxes[$page][$context][$priority][$id] = false;\n}\n\n/**\n * Meta Box Accordion Template Function\n *\n * Largely made up of abstracted code from {@link do_meta_boxes()}, this\n * function serves to build meta boxes as list items for display as\n * a collapsible accordion.\n *\n * @since 3.6.0\n *\n * @uses global $wp_meta_boxes Used to retrieve registered meta boxes.\n *\n * @param string|object $screen  The screen identifier.\n * @param string        $context The meta box context.\n * @param mixed         $object  gets passed to the section callback function as first parameter.\n * @return int number of meta boxes as accordion sections.\n */\nfunction do_accordion_sections( $screen, $context, $object ) {\n\tglobal $wp_meta_boxes;\n\n\twp_enqueue_script( 'accordion' );\n\n\tif ( empty( $screen ) )\n\t\t$screen = get_current_screen();\n\telseif ( is_string( $screen ) )\n\t\t$screen = convert_to_screen( $screen );\n\n\t$page = $screen->id;\n\n\t$hidden = get_hidden_meta_boxes( $screen );\n\t?>\n\t<div id=\"side-sortables\" class=\"accordion-container\">\n\t\t<ul class=\"outer-border\">\n\t<?php\n\t$i = 0;\n\t$first_open = false;\n\n\tif ( isset( $wp_meta_boxes[ $page ][ $context ] ) ) {\n\t\tforeach ( array( 'high', 'core', 'default', 'low' ) as $priority ) {\n\t\t\tif ( isset( $wp_meta_boxes[ $page ][ $context ][ $priority ] ) ) {\n\t\t\t\tforeach ( $wp_meta_boxes[ $page ][ $context ][ $priority ] as $box ) {\n\t\t\t\t\tif ( false == $box || ! $box['title'] )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t$i++;\n\t\t\t\t\t$hidden_class = in_array( $box['id'], $hidden ) ? 'hide-if-js' : '';\n\n\t\t\t\t\t$open_class = '';\n\t\t\t\t\tif ( ! $first_open && empty( $hidden_class ) ) {\n\t\t\t\t\t\t$first_open = true;\n\t\t\t\t\t\t$open_class = 'open';\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\t\t\t\t\t<li class=\"control-section accordion-section <?php echo $hidden_class; ?> <?php echo $open_class; ?> <?php echo esc_attr( $box['id'] ); ?>\" id=\"<?php echo esc_attr( $box['id'] ); ?>\">\n\t\t\t\t\t\t<h3 class=\"accordion-section-title hndle\" tabindex=\"0\">\n\t\t\t\t\t\t\t<?php echo esc_html( $box['title'] ); ?>\n\t\t\t\t\t\t\t<span class=\"screen-reader-text\"><?php _e( 'Press return or enter to open this section' ); ?></span>\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<div class=\"accordion-section-content <?php postbox_classes( $box['id'], $page ); ?>\">\n\t\t\t\t\t\t\t<div class=\"inside\">\n\t\t\t\t\t\t\t\t<?php call_user_func( $box['callback'], $object, $box ); ?>\n\t\t\t\t\t\t\t</div><!-- .inside -->\n\t\t\t\t\t\t</div><!-- .accordion-section-content -->\n\t\t\t\t\t</li><!-- .accordion-section -->\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t?>\n\t\t</ul><!-- .outer-border -->\n\t</div><!-- .accordion-container -->\n\t<?php\n\treturn $i;\n}\n\n/**\n * Add a new section to a settings page.\n *\n * Part of the Settings API. Use this to define new settings sections for an admin page.\n * Show settings sections in your admin page callback function with do_settings_sections().\n * Add settings fields to your section with add_settings_field()\n *\n * The $callback argument should be the name of a function that echoes out any\n * content you want to show at the top of the settings section before the actual\n * fields. It can output nothing if you want.\n *\n * @since 2.7.0\n *\n * @global $wp_settings_sections Storage array of all settings sections added to admin pages\n *\n * @param string   $id       Slug-name to identify the section. Used in the 'id' attribute of tags.\n * @param string   $title    Formatted title of the section. Shown as the heading for the section.\n * @param callable $callback Function that echos out any content at the top of the section (between heading and fields).\n * @param string   $page     The slug-name of the settings page on which to show the section. Built-in pages include\n *                           'general', 'reading', 'writing', 'discussion', 'media', etc. Create your own using\n *                           add_options_page();\n */\nfunction add_settings_section($id, $title, $callback, $page) {\n\tglobal $wp_settings_sections;\n\n\tif ( 'misc' == $page ) {\n\t\t_deprecated_argument( __FUNCTION__, '3.0', sprintf( __( 'The \"%s\" options group has been removed. Use another settings group.' ), 'misc' ) );\n\t\t$page = 'general';\n\t}\n\n\tif ( 'privacy' == $page ) {\n\t\t_deprecated_argument( __FUNCTION__, '3.5', sprintf( __( 'The \"%s\" options group has been removed. Use another settings group.' ), 'privacy' ) );\n\t\t$page = 'reading';\n\t}\n\n\t$wp_settings_sections[$page][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback);\n}\n\n/**\n * Add a new field to a section of a settings page\n *\n * Part of the Settings API. Use this to define a settings field that will show\n * as part of a settings section inside a settings page. The fields are shown using\n * do_settings_fields() in do_settings-sections()\n *\n * The $callback argument should be the name of a function that echoes out the\n * html input tags for this setting field. Use get_option() to retrieve existing\n * values to show.\n *\n * @since 2.7.0\n * @since 4.2.0 The `$class` argument was added.\n *\n * @global $wp_settings_fields Storage array of settings fields and info about their pages/sections\n *\n * @param string   $id       Slug-name to identify the field. Used in the 'id' attribute of tags.\n * @param string   $title    Formatted title of the field. Shown as the label for the field\n *                           during output.\n * @param callable $callback Function that fills the field with the desired form inputs. The\n *                           function should echo its output.\n * @param string   $page     The slug-name of the settings page on which to show the section\n *                           (general, reading, writing, ...).\n * @param string   $section  Optional. The slug-name of the section of the settings page\n *                           in which to show the box. Default 'default'.\n * @param array    $args {\n *     Optional. Extra arguments used when outputting the field.\n *\n *     @type string $label_for When supplied, the setting title will be wrapped\n *                             in a `<label>` element, its `for` attribute populated\n *                             with this value.\n *     @type string $class     CSS Class to be added to the `<tr>` element when the\n *                             field is output.\n * }\n */\nfunction add_settings_field($id, $title, $callback, $page, $section = 'default', $args = array()) {\n\tglobal $wp_settings_fields;\n\n\tif ( 'misc' == $page ) {\n\t\t_deprecated_argument( __FUNCTION__, '3.0', __( 'The miscellaneous options group has been removed. Use another settings group.' ) );\n\t\t$page = 'general';\n\t}\n\n\tif ( 'privacy' == $page ) {\n\t\t_deprecated_argument( __FUNCTION__, '3.5', __( 'The privacy options group has been removed. Use another settings group.' ) );\n\t\t$page = 'reading';\n\t}\n\n\t$wp_settings_fields[$page][$section][$id] = array('id' => $id, 'title' => $title, 'callback' => $callback, 'args' => $args);\n}\n\n/**\n * Prints out all settings sections added to a particular settings page\n *\n * Part of the Settings API. Use this in a settings page callback function\n * to output all the sections and fields that were added to that $page with\n * add_settings_section() and add_settings_field()\n *\n * @global $wp_settings_sections Storage array of all settings sections added to admin pages\n * @global $wp_settings_fields Storage array of settings fields and info about their pages/sections\n * @since 2.7.0\n *\n * @param string $page The slug name of the page whose settings sections you want to output\n */\nfunction do_settings_sections( $page ) {\n\tglobal $wp_settings_sections, $wp_settings_fields;\n\n\tif ( ! isset( $wp_settings_sections[$page] ) )\n\t\treturn;\n\n\tforeach ( (array) $wp_settings_sections[$page] as $section ) {\n\t\tif ( $section['title'] )\n\t\t\techo \"<h2>{$section['title']}</h2>\\n\";\n\n\t\tif ( $section['callback'] )\n\t\t\tcall_user_func( $section['callback'], $section );\n\n\t\tif ( ! isset( $wp_settings_fields ) || !isset( $wp_settings_fields[$page] ) || !isset( $wp_settings_fields[$page][$section['id']] ) )\n\t\t\tcontinue;\n\t\techo '<table class=\"form-table\">';\n\t\tdo_settings_fields( $page, $section['id'] );\n\t\techo '</table>';\n\t}\n}\n\n/**\n * Print out the settings fields for a particular settings section\n *\n * Part of the Settings API. Use this in a settings page to output\n * a specific section. Should normally be called by do_settings_sections()\n * rather than directly.\n *\n * @global $wp_settings_fields Storage array of settings fields and their pages/sections\n *\n * @since 2.7.0\n *\n * @param string $page Slug title of the admin page who's settings fields you want to show.\n * @param string $section Slug title of the settings section who's fields you want to show.\n */\nfunction do_settings_fields($page, $section) {\n\tglobal $wp_settings_fields;\n\n\tif ( ! isset( $wp_settings_fields[$page][$section] ) )\n\t\treturn;\n\n\tforeach ( (array) $wp_settings_fields[$page][$section] as $field ) {\n\t\t$class = '';\n\n\t\tif ( ! empty( $field['args']['class'] ) ) {\n\t\t\t$class = ' class=\"' . esc_attr( $field['args']['class'] ) . '\"';\n\t\t}\n\n\t\techo \"<tr{$class}>\";\n\n\t\tif ( ! empty( $field['args']['label_for'] ) ) {\n\t\t\techo '<th scope=\"row\"><label for=\"' . esc_attr( $field['args']['label_for'] ) . '\">' . $field['title'] . '</label></th>';\n\t\t} else {\n\t\t\techo '<th scope=\"row\">' . $field['title'] . '</th>';\n\t\t}\n\n\t\techo '<td>';\n\t\tcall_user_func($field['callback'], $field['args']);\n\t\techo '</td>';\n\t\techo '</tr>';\n\t}\n}\n\n/**\n * Register a settings error to be displayed to the user\n *\n * Part of the Settings API. Use this to show messages to users about settings validation\n * problems, missing settings or anything else.\n *\n * Settings errors should be added inside the $sanitize_callback function defined in\n * register_setting() for a given setting to give feedback about the submission.\n *\n * By default messages will show immediately after the submission that generated the error.\n * Additional calls to settings_errors() can be used to show errors even when the settings\n * page is first accessed.\n *\n * @since 3.0.0\n *\n * @global array $wp_settings_errors Storage array of errors registered during this pageload\n *\n * @param string $setting Slug title of the setting to which this error applies\n * @param string $code    Slug-name to identify the error. Used as part of 'id' attribute in HTML output.\n * @param string $message The formatted message text to display to the user (will be shown inside styled\n *                        `<div>` and `<p>` tags).\n * @param string $type    Optional. Message type, controls HTML class. Accepts 'error' or 'updated'.\n *                        Default 'error'.\n */\nfunction add_settings_error( $setting, $code, $message, $type = 'error' ) {\n\tglobal $wp_settings_errors;\n\n\t$wp_settings_errors[] = array(\n\t\t'setting' => $setting,\n\t\t'code'    => $code,\n\t\t'message' => $message,\n\t\t'type'    => $type\n\t);\n}\n\n/**\n * Fetch settings errors registered by add_settings_error()\n *\n * Checks the $wp_settings_errors array for any errors declared during the current\n * pageload and returns them.\n *\n * If changes were just submitted ($_GET['settings-updated']) and settings errors were saved\n * to the 'settings_errors' transient then those errors will be returned instead. This\n * is used to pass errors back across pageloads.\n *\n * Use the $sanitize argument to manually re-sanitize the option before returning errors.\n * This is useful if you have errors or notices you want to show even when the user\n * hasn't submitted data (i.e. when they first load an options page, or in admin_notices action hook)\n *\n * @since 3.0.0\n *\n * @global array $wp_settings_errors Storage array of errors registered during this pageload\n *\n * @param string $setting Optional slug title of a specific setting who's errors you want.\n * @param boolean $sanitize Whether to re-sanitize the setting value before returning errors.\n * @return array Array of settings errors\n */\nfunction get_settings_errors( $setting = '', $sanitize = false ) {\n\tglobal $wp_settings_errors;\n\n\t/*\n\t * If $sanitize is true, manually re-run the sanitization for this option\n\t * This allows the $sanitize_callback from register_setting() to run, adding\n\t * any settings errors you want to show by default.\n\t */\n\tif ( $sanitize )\n\t\tsanitize_option( $setting, get_option( $setting ) );\n\n\t// If settings were passed back from options.php then use them.\n\tif ( isset( $_GET['settings-updated'] ) && $_GET['settings-updated'] && get_transient( 'settings_errors' ) ) {\n\t\t$wp_settings_errors = array_merge( (array) $wp_settings_errors, get_transient( 'settings_errors' ) );\n\t\tdelete_transient( 'settings_errors' );\n\t}\n\n\t// Check global in case errors have been added on this pageload.\n\tif ( ! count( $wp_settings_errors ) )\n\t\treturn array();\n\n\t// Filter the results to those of a specific setting if one was set.\n\tif ( $setting ) {\n\t\t$setting_errors = array();\n\t\tforeach ( (array) $wp_settings_errors as $key => $details ) {\n\t\t\tif ( $setting == $details['setting'] )\n\t\t\t\t$setting_errors[] = $wp_settings_errors[$key];\n\t\t}\n\t\treturn $setting_errors;\n\t}\n\n\treturn $wp_settings_errors;\n}\n\n/**\n * Display settings errors registered by {@see add_settings_error()}.\n *\n * Part of the Settings API. Outputs a div for each error retrieved by\n * {@see get_settings_errors()}.\n *\n * This is called automatically after a settings page based on the\n * Settings API is submitted. Errors should be added during the validation\n * callback function for a setting defined in {@see register_setting()}\n *\n * The $sanitize option is passed into {@see get_settings_errors()} and will\n * re-run the setting sanitization\n * on its current value.\n *\n * The $hide_on_update option will cause errors to only show when the settings\n * page is first loaded. if the user has already saved new values it will be\n * hidden to avoid repeating messages already shown in the default error\n * reporting after submission. This is useful to show general errors like\n * missing settings when the user arrives at the settings page.\n *\n * @since 3.0.0\n *\n * @param string $setting        Optional slug title of a specific setting who's errors you want.\n * @param bool   $sanitize       Whether to re-sanitize the setting value before returning errors.\n * @param bool   $hide_on_update If set to true errors will not be shown if the settings page has already been submitted.\n */\nfunction settings_errors( $setting = '', $sanitize = false, $hide_on_update = false ) {\n\n\tif ( $hide_on_update && ! empty( $_GET['settings-updated'] ) )\n\t\treturn;\n\n\t$settings_errors = get_settings_errors( $setting, $sanitize );\n\n\tif ( empty( $settings_errors ) )\n\t\treturn;\n\n\t$output = '';\n\tforeach ( $settings_errors as $key => $details ) {\n\t\t$css_id = 'setting-error-' . $details['code'];\n\t\t$css_class = $details['type'] . ' settings-error notice is-dismissible';\n\t\t$output .= \"<div id='$css_id' class='$css_class'> \\n\";\n\t\t$output .= \"<p><strong>{$details['message']}</strong></p>\";\n\t\t$output .= \"</div> \\n\";\n\t}\n\techo $output;\n}\n\n/**\n * Outputs the modal window used for attaching media to posts or pages in the media-listing screen.\n *\n * @since 2.7.0\n *\n * @param string $found_action\n */\nfunction find_posts_div($found_action = '') {\n?>\n\t<div id=\"find-posts\" class=\"find-box\" style=\"display: none;\">\n\t\t<div id=\"find-posts-head\" class=\"find-box-head\">\n\t\t\t<?php _e( 'Attach to existing content' ); ?>\n\t\t\t<div id=\"find-posts-close\"></div>\n\t\t</div>\n\t\t<div class=\"find-box-inside\">\n\t\t\t<div class=\"find-box-search\">\n\t\t\t\t<?php if ( $found_action ) { ?>\n\t\t\t\t\t<input type=\"hidden\" name=\"found_action\" value=\"<?php echo esc_attr($found_action); ?>\" />\n\t\t\t\t<?php } ?>\n\t\t\t\t<input type=\"hidden\" name=\"affected\" id=\"affected\" value=\"\" />\n\t\t\t\t<?php wp_nonce_field( 'find-posts', '_ajax_nonce', false ); ?>\n\t\t\t\t<label class=\"screen-reader-text\" for=\"find-posts-input\"><?php _e( 'Search' ); ?></label>\n\t\t\t\t<input type=\"text\" id=\"find-posts-input\" name=\"ps\" value=\"\" />\n\t\t\t\t<span class=\"spinner\"></span>\n\t\t\t\t<input type=\"button\" id=\"find-posts-search\" value=\"<?php esc_attr_e( 'Search' ); ?>\" class=\"button\" />\n\t\t\t\t<div class=\"clear\"></div>\n\t\t\t</div>\n\t\t\t<div id=\"find-posts-response\"></div>\n\t\t</div>\n\t\t<div class=\"find-box-buttons\">\n\t\t\t<?php submit_button( __( 'Select' ), 'button-primary alignright', 'find-posts-submit', false ); ?>\n\t\t\t<div class=\"clear\"></div>\n\t\t</div>\n\t</div>\n<?php\n}\n\n/**\n * Display the post password.\n *\n * The password is passed through {@link esc_attr()} to ensure that it\n * is safe for placing in an html attribute.\n *\n * @since 2.7.0\n */\nfunction the_post_password() {\n\t$post = get_post();\n\tif ( isset( $post->post_password ) )\n\t\techo esc_attr( $post->post_password );\n}\n\n/**\n * Get the post title.\n *\n * The post title is fetched and if it is blank then a default string is\n * returned.\n *\n * @since 2.7.0\n *\n * @param int|WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.\n * @return string The post title if set.\n */\nfunction _draft_or_post_title( $post = 0 ) {\n\t$title = get_the_title( $post );\n\tif ( empty( $title ) )\n\t\t$title = __( '(no title)' );\n\treturn esc_html( $title );\n}\n\n/**\n * Display the search query.\n *\n * A simple wrapper to display the \"s\" parameter in a GET URI. This function\n * should only be used when {@link the_search_query()} cannot.\n *\n * @since 2.7.0\n */\nfunction _admin_search_query() {\n\techo isset($_REQUEST['s']) ? esc_attr( wp_unslash( $_REQUEST['s'] ) ) : '';\n}\n\n/**\n * Generic Iframe header for use with Thickbox\n *\n * @since 2.7.0\n *\n * @global string    $hook_suffix\n * @global string    $admin_body_class\n * @global WP_Locale $wp_locale\n *\n * @param string $title      Optional. Title of the Iframe page. Default empty.\n * @param bool   $deprecated Not used.\n */\nfunction iframe_header( $title = '', $deprecated = false ) {\n\tshow_admin_bar( false );\n\tglobal $hook_suffix, $admin_body_class, $wp_locale;\n\t$admin_body_class = preg_replace('/[^a-z0-9_-]+/i', '-', $hook_suffix);\n\n\t$current_screen = get_current_screen();\n\n\t@header( 'Content-Type: ' . get_option( 'html_type' ) . '; charset=' . get_option( 'blog_charset' ) );\n\t_wp_admin_html_begin();\n?>\n<title><?php bloginfo('name') ?> &rsaquo; <?php echo $title ?> &#8212; <?php _e('WordPress'); ?></title>\n<?php\nwp_enqueue_style( 'colors' );\n?>\n<script type=\"text/javascript\">\naddLoadEvent = function(func){if(typeof jQuery!=\"undefined\")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};\nfunction tb_close(){var win=window.dialogArguments||opener||parent||top;win.tb_remove();}\nvar ajaxurl = '<?php echo admin_url( 'admin-ajax.php', 'relative' ); ?>',\n\tpagenow = '<?php echo $current_screen->id; ?>',\n\ttypenow = '<?php echo $current_screen->post_type; ?>',\n\tadminpage = '<?php echo $admin_body_class; ?>',\n\tthousandsSeparator = '<?php echo addslashes( $wp_locale->number_format['thousands_sep'] ); ?>',\n\tdecimalPoint = '<?php echo addslashes( $wp_locale->number_format['decimal_point'] ); ?>',\n\tisRtl = <?php echo (int) is_rtl(); ?>;\n</script>\n<?php\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( 'admin_enqueue_scripts', $hook_suffix );\n\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( \"admin_print_styles-$hook_suffix\" );\n\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( 'admin_print_styles' );\n\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( \"admin_print_scripts-$hook_suffix\" );\n\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( 'admin_print_scripts' );\n\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( \"admin_head-$hook_suffix\" );\n\n/** This action is documented in wp-admin/admin-header.php */\ndo_action( 'admin_head' );\n\n$admin_body_class .= ' locale-' . sanitize_html_class( strtolower( str_replace( '_', '-', get_locale() ) ) );\n\nif ( is_rtl() )\n\t$admin_body_class .= ' rtl';\n\n?>\n</head>\n<?php\n/** This filter is documented in wp-admin/admin-header.php */\n$admin_body_classes = apply_filters( 'admin_body_class', '' );\n?>\n<body<?php\n/**\n * @global string $body_id\n */\nif ( isset($GLOBALS['body_id']) ) echo ' id=\"' . $GLOBALS['body_id'] . '\"'; ?> class=\"wp-admin wp-core-ui no-js iframe <?php echo $admin_body_classes . ' ' . $admin_body_class; ?>\">\n<script type=\"text/javascript\">\n(function(){\nvar c = document.body.className;\nc = c.replace(/no-js/, 'js');\ndocument.body.className = c;\n})();\n</script>\n<?php\n}\n\n/**\n * Generic Iframe footer for use with Thickbox\n *\n * @since 2.7.0\n */\nfunction iframe_footer() {\n\t/*\n\t * We're going to hide any footer output on iFrame pages,\n\t * but run the hooks anyway since they output JavaScript\n\t * or other needed content.\n\t */\n\t ?>\n\t<div class=\"hidden\">\n<?php\n\t/** This action is documented in wp-admin/admin-footer.php */\n\tdo_action( 'admin_footer', '' );\n\n\t/** This action is documented in wp-admin/admin-footer.php */\n\tdo_action( 'admin_print_footer_scripts' );\n?>\n\t</div>\n<script type=\"text/javascript\">if(typeof wpOnload==\"function\")wpOnload();</script>\n</body>\n</html>\n<?php\n}\n\n/**\n *\n * @param WP_Post $post\n */\nfunction _post_states($post) {\n\t$post_states = array();\n\tif ( isset( $_REQUEST['post_status'] ) )\n\t\t$post_status = $_REQUEST['post_status'];\n\telse\n\t\t$post_status = '';\n\n\tif ( !empty($post->post_password) )\n\t\t$post_states['protected'] = __('Password protected');\n\tif ( 'private' == $post->post_status && 'private' != $post_status )\n\t\t$post_states['private'] = __('Private');\n\tif ( 'draft' == $post->post_status && 'draft' != $post_status )\n\t\t$post_states['draft'] = __('Draft');\n\tif ( 'pending' == $post->post_status && 'pending' != $post_status )\n\t\t$post_states['pending'] = _x('Pending', 'post status');\n\tif ( is_sticky($post->ID) )\n\t\t$post_states['sticky'] = __('Sticky');\n\n\tif ( 'future' === $post->post_status ) {\n\t\t$post_states['scheduled'] = __( 'Scheduled' );\n\t}\n\n\tif ( 'page' === get_option( 'show_on_front' ) ) {\n\t\tif ( intval( get_option( 'page_on_front' ) ) === $post->ID ) {\n\t\t\t$post_states['page_on_front'] = __( 'Front Page' );\n\t\t}\n\n\t\tif ( intval( get_option( 'page_for_posts' ) ) === $post->ID ) {\n\t\t\t$post_states['page_for_posts'] = __( 'Posts Page' );\n\t\t}\n\t}\n\n\t/**\n\t * Filter the default post display states used in the posts list table.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param array   $post_states An array of post display states.\n\t * @param WP_Post $post        The current post object.\n\t */\n\t$post_states = apply_filters( 'display_post_states', $post_states, $post );\n\n\tif ( ! empty($post_states) ) {\n\t\t$state_count = count($post_states);\n\t\t$i = 0;\n\t\techo ' &mdash; ';\n\t\tforeach ( $post_states as $state ) {\n\t\t\t++$i;\n\t\t\t( $i == $state_count ) ? $sep = '' : $sep = ', ';\n\t\t\techo \"<span class='post-state'>$state$sep</span>\";\n\t\t}\n\t}\n\n}\n\n/**\n *\n * @param WP_Post $post\n */\nfunction _media_states( $post ) {\n\t$media_states = array();\n\t$stylesheet = get_option('stylesheet');\n\n\tif ( current_theme_supports( 'custom-header') ) {\n\t\t$meta_header = get_post_meta($post->ID, '_wp_attachment_is_custom_header', true );\n\t\tif ( ! empty( $meta_header ) && $meta_header == $stylesheet )\n\t\t\t$media_states[] = __( 'Header Image' );\n\t}\n\n\tif ( current_theme_supports( 'custom-background') ) {\n\t\t$meta_background = get_post_meta($post->ID, '_wp_attachment_is_custom_background', true );\n\t\tif ( ! empty( $meta_background ) && $meta_background == $stylesheet )\n\t\t\t$media_states[] = __( 'Background Image' );\n\t}\n\n\tif ( $post->ID == get_option( 'site_icon' ) ) {\n\t\t$media_states[] = __( 'Site Icon' );\n\t}\n\n\tif ( $post->ID == get_theme_mod( 'site_logo' ) ) {\n\t\t$media_states[] = __( 'Logo' );\n\t}\n\n\t/**\n\t * Filter the default media display states for items in the Media list table.\n\t *\n\t * @since 3.2.0\n\t *\n\t * @param array $media_states An array of media states. Default 'Header Image',\n\t *                            'Background Image', 'Site Icon', 'Logo'.\n\t */\n\t$media_states = apply_filters( 'display_media_states', $media_states );\n\n\tif ( ! empty( $media_states ) ) {\n\t\t$state_count = count( $media_states );\n\t\t$i = 0;\n\t\techo ' &mdash; ';\n\t\tforeach ( $media_states as $state ) {\n\t\t\t++$i;\n\t\t\t( $i == $state_count ) ? $sep = '' : $sep = ', ';\n\t\t\techo \"<span class='post-state'>$state$sep</span>\";\n\t\t}\n\t}\n}\n\n/**\n * Test support for compressing JavaScript from PHP\n *\n * Outputs JavaScript that tests if compression from PHP works as expected\n * and sets an option with the result. Has no effect when the current user\n * is not an administrator. To run the test again the option 'can_compress_scripts'\n * has to be deleted.\n *\n * @since 2.8.0\n */\nfunction compression_test() {\n?>\n\t<script type=\"text/javascript\">\n\tvar compressionNonce = <?php echo wp_json_encode( wp_create_nonce( 'update_can_compress_scripts' ) ); ?>;\n\tvar testCompression = {\n\t\tget : function(test) {\n\t\t\tvar x;\n\t\t\tif ( window.XMLHttpRequest ) {\n\t\t\t\tx = new XMLHttpRequest();\n\t\t\t} else {\n\t\t\t\ttry{x=new ActiveXObject('Msxml2.XMLHTTP');}catch(e){try{x=new ActiveXObject('Microsoft.XMLHTTP');}catch(e){};}\n\t\t\t}\n\n\t\t\tif (x) {\n\t\t\t\tx.onreadystatechange = function() {\n\t\t\t\t\tvar r, h;\n\t\t\t\t\tif ( x.readyState == 4 ) {\n\t\t\t\t\t\tr = x.responseText.substr(0, 18);\n\t\t\t\t\t\th = x.getResponseHeader('Content-Encoding');\n\t\t\t\t\t\ttestCompression.check(r, h, test);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tx.open('GET', ajaxurl + '?action=wp-compression-test&test='+test+'&_ajax_nonce='+compressionNonce+'&'+(new Date()).getTime(), true);\n\t\t\t\tx.send('');\n\t\t\t}\n\t\t},\n\n\t\tcheck : function(r, h, test) {\n\t\t\tif ( ! r && ! test )\n\t\t\t\tthis.get(1);\n\n\t\t\tif ( 1 == test ) {\n\t\t\t\tif ( h && ( h.match(/deflate/i) || h.match(/gzip/i) ) )\n\t\t\t\t\tthis.get('no');\n\t\t\t\telse\n\t\t\t\t\tthis.get(2);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( 2 == test ) {\n\t\t\t\tif ( '\"wpCompressionTest' == r )\n\t\t\t\t\tthis.get('yes');\n\t\t\t\telse\n\t\t\t\t\tthis.get('no');\n\t\t\t}\n\t\t}\n\t};\n\ttestCompression.check();\n\t</script>\n<?php\n}\n\n/**\n * Echoes a submit button, with provided text and appropriate class(es).\n *\n * @since 3.1.0\n *\n * @see get_submit_button()\n *\n * @param string       $text             The text of the button (defaults to 'Save Changes')\n * @param string       $type             Optional. The type and CSS class(es) of the button. Core values\n *                                       include 'primary', 'secondary', 'delete'. Default 'primary'\n * @param string       $name             The HTML name of the submit button. Defaults to \"submit\". If no\n *                                       id attribute is given in $other_attributes below, $name will be\n *                                       used as the button's id.\n * @param bool         $wrap             True if the output button should be wrapped in a paragraph tag,\n *                                       false otherwise. Defaults to true\n * @param array|string $other_attributes Other attributes that should be output with the button, mapping\n *                                       attributes to their values, such as setting tabindex to 1, etc.\n *                                       These key/value attribute pairs will be output as attribute=\"value\",\n *                                       where attribute is the key. Other attributes can also be provided\n *                                       as a string such as 'tabindex=\"1\"', though the array format is\n *                                       preferred. Default null.\n */\nfunction submit_button( $text = null, $type = 'primary', $name = 'submit', $wrap = true, $other_attributes = null ) {\n\techo get_submit_button( $text, $type, $name, $wrap, $other_attributes );\n}\n\n/**\n * Returns a submit button, with provided text and appropriate class\n *\n * @since 3.1.0\n *\n * @param string       $text             Optional. The text of the button. Default 'Save Changes'.\n * @param string       $type             Optional. The type of button. Accepts 'primary', 'secondary',\n *                                       or 'delete'. Default 'primary large'.\n * @param string       $name             Optional. The HTML name of the submit button. Defaults to \"submit\".\n *                                       If no id attribute is given in $other_attributes below, `$name` will\n *                                       be used as the button's id. Default 'submit'.\n * @param bool         $wrap             Optional. True if the output button should be wrapped in a paragraph\n *                                       tag, false otherwise. Default true.\n * @param array|string $other_attributes Optional. Other attributes that should be output with the button,\n *                                       mapping attributes to their values, such as `array( 'tabindex' => '1' )`.\n *                                       These attributes will be output as `attribute=\"value\"`, such as\n *                                       `tabindex=\"1\"`. Other attributes can also be provided as a string such\n *                                       as `tabindex=\"1\"`, though the array format is typically cleaner.\n *                                       Default empty.\n * @return string Submit button HTML.\n */\nfunction get_submit_button( $text = '', $type = 'primary large', $name = 'submit', $wrap = true, $other_attributes = '' ) {\n\tif ( ! is_array( $type ) )\n\t\t$type = explode( ' ', $type );\n\n\t$button_shorthand = array( 'primary', 'small', 'large' );\n\t$classes = array( 'button' );\n\tforeach ( $type as $t ) {\n\t\tif ( 'secondary' === $t || 'button-secondary' === $t )\n\t\t\tcontinue;\n\t\t$classes[] = in_array( $t, $button_shorthand ) ? 'button-' . $t : $t;\n\t}\n\t$class = implode( ' ', array_unique( $classes ) );\n\n\tif ( 'delete' === $type )\n\t\t$class = 'button-secondary delete';\n\n\t$text = $text ? $text : __( 'Save Changes' );\n\n\t// Default the id attribute to $name unless an id was specifically provided in $other_attributes\n\t$id = $name;\n\tif ( is_array( $other_attributes ) && isset( $other_attributes['id'] ) ) {\n\t\t$id = $other_attributes['id'];\n\t\tunset( $other_attributes['id'] );\n\t}\n\n\t$attributes = '';\n\tif ( is_array( $other_attributes ) ) {\n\t\tforeach ( $other_attributes as $attribute => $value ) {\n\t\t\t$attributes .= $attribute . '=\"' . esc_attr( $value ) . '\" '; // Trailing space is important\n\t\t}\n\t} elseif ( ! empty( $other_attributes ) ) { // Attributes provided as a string\n\t\t$attributes = $other_attributes;\n\t}\n\n\t// Don't output empty name and id attributes.\n\t$name_attr = $name ? ' name=\"' . esc_attr( $name ) . '\"' : '';\n\t$id_attr = $id ? ' id=\"' . esc_attr( $id ) . '\"' : '';\n\n\t$button = '<input type=\"submit\"' . $name_attr . $id_attr . ' class=\"' . esc_attr( $class );\n\t$button\t.= '\" value=\"' . esc_attr( $text ) . '\" ' . $attributes . ' />';\n\n\tif ( $wrap ) {\n\t\t$button = '<p class=\"submit\">' . $button . '</p>';\n\t}\n\n\treturn $button;\n}\n\n/**\n *\n * @global bool $is_IE\n */\nfunction _wp_admin_html_begin() {\n\tglobal $is_IE;\n\n\t$admin_html_class = ( is_admin_bar_showing() ) ? 'wp-toolbar' : '';\n\n\tif ( $is_IE )\n\t\t@header('X-UA-Compatible: IE=edge');\n\n?>\n<!DOCTYPE html>\n<!--[if IE 8]>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" class=\"ie8 <?php echo $admin_html_class; ?>\" <?php\n\t/**\n\t * Fires inside the HTML tag in the admin header.\n\t *\n\t * @since 2.2.0\n\t */\n\tdo_action( 'admin_xml_ns' );\n?> <?php language_attributes(); ?>>\n<![endif]-->\n<!--[if !(IE 8) ]><!-->\n<html xmlns=\"http://www.w3.org/1999/xhtml\" class=\"<?php echo $admin_html_class; ?>\" <?php\n\t/** This action is documented in wp-admin/includes/template.php */\n\tdo_action( 'admin_xml_ns' );\n?> <?php language_attributes(); ?>>\n<!--<![endif]-->\n<head>\n<meta http-equiv=\"Content-Type\" content=\"<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>\" />\n<?php\n}\n\n/**\n * Convert a screen string to a screen object\n *\n * @since 3.0.0\n *\n * @param string $hook_name The hook name (also known as the hook suffix) used to determine the screen.\n * @return WP_Screen Screen object.\n */\nfunction convert_to_screen( $hook_name ) {\n\tif ( ! class_exists( 'WP_Screen', false ) ) {\n\t\t_doing_it_wrong( 'convert_to_screen(), add_meta_box()', __( \"Likely direct inclusion of wp-admin/includes/template.php in order to use add_meta_box(). This is very wrong. Hook the add_meta_box() call into the add_meta_boxes action instead.\" ), '3.3' );\n\t\treturn (object) array( 'id' => '_invalid', 'base' => '_are_belong_to_us' );\n\t}\n\n\treturn WP_Screen::get( $hook_name );\n}\n\n/**\n * Output the HTML for restoring the post data from DOM storage\n *\n * @since 3.6.0\n * @access private\n */\nfunction _local_storage_notice() {\n\t?>\n\t<div id=\"local-storage-notice\" class=\"hidden notice\">\n\t<p class=\"local-restore\">\n\t\t<?php _e('The backup of this post in your browser is different from the version below.'); ?>\n\t\t<a class=\"restore-backup\" href=\"#\"><?php _e('Restore the backup.'); ?></a>\n\t</p>\n\t<p class=\"undo-restore hidden\">\n\t\t<?php _e('Post restored successfully.'); ?>\n\t\t<a class=\"undo-restore-backup\" href=\"#\"><?php _e('Undo.'); ?></a>\n\t</p>\n\t</div>\n\t<?php\n}\n\n/**\n * Output a HTML element with a star rating for a given rating.\n *\n * Outputs a HTML element with the star rating exposed on a 0..5 scale in\n * half star increments (ie. 1, 1.5, 2 stars). Optionally, if specified, the\n * number of ratings may also be displayed by passing the $number parameter.\n *\n * @since 3.8.0\n * @since 4.4.0 Introduced the `echo` parameter.\n *\n * @param array $args {\n *     Optional. Array of star ratings arguments.\n *\n *     @type int    $rating The rating to display, expressed in either a 0.5 rating increment,\n *                          or percentage. Default 0.\n *     @type string $type   Format that the $rating is in. Valid values are 'rating' (default),\n *                          or, 'percent'. Default 'rating'.\n *     @type int    $number The number of ratings that makes up this rating. Default 0.\n *     @type bool   $echo   Whether to echo the generated markup. False to return the markup instead\n *                          of echoing it. Default true.\n * }\n */\nfunction wp_star_rating( $args = array() ) {\n\t$defaults = array(\n\t\t'rating' => 0,\n\t\t'type'   => 'rating',\n\t\t'number' => 0,\n\t\t'echo'   => true,\n\t);\n\t$r = wp_parse_args( $args, $defaults );\n\n\t// Non-english decimal places when the $rating is coming from a string\n\t$rating = str_replace( ',', '.', $r['rating'] );\n\n\t// Convert Percentage to star rating, 0..5 in .5 increments\n\tif ( 'percent' == $r['type'] ) {\n\t\t$rating = round( $rating / 10, 0 ) / 2;\n\t}\n\n\t// Calculate the number of each type of star needed\n\t$full_stars = floor( $rating );\n\t$half_stars = ceil( $rating - $full_stars );\n\t$empty_stars = 5 - $full_stars - $half_stars;\n\n\tif ( $r['number'] ) {\n\t\t/* translators: 1: The rating, 2: The number of ratings */\n\t\t$format = _n( '%1$s rating based on %2$s rating', '%1$s rating based on %2$s ratings', $r['number'] );\n\t\t$title = sprintf( $format, number_format_i18n( $rating, 1 ), number_format_i18n( $r['number'] ) );\n\t} else {\n\t\t/* translators: 1: The rating */\n\t\t$title = sprintf( __( '%s rating' ), number_format_i18n( $rating, 1 ) );\n\t}\n\n\t$output = '<div class=\"star-rating\">';\n\t$output .= '<span class=\"screen-reader-text\">' . $title . '</span>';\n\t$output .= str_repeat( '<div class=\"star star-full\"></div>', $full_stars );\n\t$output .= str_repeat( '<div class=\"star star-half\"></div>', $half_stars );\n\t$output .= str_repeat( '<div class=\"star star-empty\"></div>', $empty_stars );\n\t$output .= '</div>';\n\n\tif ( $r['echo'] ) {\n\t\techo $output;\n\t}\n\n\treturn $output;\n}\n\n/**\n * Output a notice when editing the page for posts (internal use only).\n *\n * @ignore\n * @since 4.2.0\n */\nfunction _wp_posts_page_notice() {\n\techo '<div class=\"notice notice-warning inline\"><p>' . __( 'You are currently editing the page that shows your latest posts.' ) . '</p></div>';\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.5-RC1-37143';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 36686;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4308-20160323';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "filenames": ["wp-admin/includes/ajax-actions.php", "wp-admin/includes/template.php", "wp-includes/version.php"], "buggy_code_start_loc": [199, 1791, 7], "buggy_code_end_loc": [201, 1812, 8], "fixing_code_start_loc": [200, 1792, 7], "fixing_code_end_loc": [204, 1813, 8], "type": "CWE-352", "message": "Cross-site request forgery (CSRF) vulnerability in the wp_ajax_wp_compression_test function in wp-admin/includes/ajax-actions.php in WordPress before 4.5 allows remote attackers to hijack the authentication of administrators for requests that change the script compression option.", "other": {"cve": {"id": "CVE-2016-6635", "sourceIdentifier": "cve@mitre.org", "published": "2016-08-07T16:59:17.113", "lastModified": "2017-11-04T01:29:22.083", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Cross-site request forgery (CSRF) vulnerability in the wp_ajax_wp_compression_test function in wp-admin/includes/ajax-actions.php in WordPress before 4.5 allows remote attackers to hijack the authentication of administrators for requests that change the script compression option."}, {"lang": "es", "value": "Vulnerabilidad de CSRF en la funci\u00f3n wp_ajax_wp_compression_test en wp-admin/includes/ajax-actions.php en WordPress en versiones anteriores a 4.5 permite a atacantes remotos secuestrar la autenticaci\u00f3n de administradores para peticiones que cambian la opci\u00f3n de compresi\u00f3n de la escritura."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.4.2", "matchCriteriaId": "3DECF2AF-5224-4952-8DC4-2F6E2E8F66FA"}]}]}], "references": [{"url": "http://codex.wordpress.org/Version_4.5", "source": "cve@mitre.org", "tags": ["Release Notes"]}, {"url": "http://www.debian.org/security/2016/dsa-3681", "source": "cve@mitre.org"}, {"url": "https://github.com/WordPress/WordPress/commit/9b7a7754133c50b82bd9d976fb5b24094f658aab", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://wpvulndb.com/vulnerabilities/8475", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/WordPress/WordPress/commit/9b7a7754133c50b82bd9d976fb5b24094f658aab"}}