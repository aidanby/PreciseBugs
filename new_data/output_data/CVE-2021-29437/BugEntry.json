{"buggy_code": ["{\n\t\"@metadata\": {\n\t\t\"author\": \"Kenny2scratch\"\n\t},\n\t\"soa2-login-title\": \"Login with Scratch\",\n\t\"soa2-apps-title\": \"Manage your apps\",\n\t\"soa2-scratch-username\": \"Scratch username:\",\n\t\"soa2-invalid-username\": \"Invalid username: $1\",\n\t\"soa2-vercode-explanation\": \"Please go to $1 and comment the code below:\",\n\t\"soa2-your-profile\": \"your profile\",\n\t\"soa2-next\": \"Next\",\n\t\"soa2-login\": \"I have done so\",\n\t\"soa2-login-failed\": \"Login failed. Please try again, and make sure you comment the code on your profile.\",\n\t\"soa2-login-success\": \"You have successfully logged in. You may want to:\\n* [[Special:SOA2Apps|Manage your applications]]\\n* If you are an [[Special:ScratchOAuth2/admins|admin]], check the [[Special:SOA2Admin/approvals|name approval queue]]\",\n\t\"soa2-apps\": \"Below are your registered applications.\",\n\t\"soa2-new-app\": \"New application\",\n\t\"soa2-no-app-title\": \"No such application\",\n\t\"soa2-no-app\": \"No application with ID $1 belonging to you was found.\",\n\t\"soa2-app-id\": \"Client ID\",\n\t\"soa2-app-secret\": \"Client\\u00a0secret\",\n\t\"soa2-app-name\": \"App name\",\n\t\"soa2-app-owner\": \"Owner\",\n\t\"soa2-app-reset\": \"Reset secret (check then click Save)\",\n\t\"soa2-flags\": \"Flags\",\n\t\"soa2-flags-yes\": \"Yes\",\n\t\"soa2-flags-no\": \"No\",\n\t\"soa2-flags-NAME_APPROVED\": \"Name moderated and approved?\",\n\t\"soa2-flags-not-NAME_APPROVED\": \"Avoid releasing your app to the public until approved\",\n\t\"soa2-flags-VERIFIED\": \"Verified?\",\n\t\"soa2-flags-not-VERIFIED\": \"If your app is widely used, contact [[Special:ScratchOAuth2/admins|the admins]] to request verification\",\n\t\"soa2-flags-HIDE_OWNER\": \"Owner username hidden when authorizing?\",\n\t\"soa2-flags-not-HIDE_OWNER\": \"If your involvement in your app needs to be anonymous, contact [[Special:ScratchOAuth2/admins|the admins]] to request this flag\",\n\t\"soa2-app-uris\": \"Redirect URIs:\",\n\t\"soa2-app-save\": \"Save\",\n\t\"soa2-app-delete\": \"Delete $1\",\n\t\"soa2-app-deleted-title\": \"App deleted\",\n\t\"soa2-app-deleted\": \"The app has been deleted.\",\n\t\"soa2-app-deletion-confirm\": \"Are you sure you want to delete \\\"$1\\\"?\",\n\t\"soa2-app-new-title\": \"Create New Application\",\n\t\"soa2-app-create\": \"Create\",\n\t\"soa2-app-created\": \"Application created.\",\n\t\"soa2-unnamed-app\": \"[unnamed application]\",\n\t\"soa2-unmoderated-app\": \"[application name unmoderated]\",\n\t\"soa2-auth-title\": \"Authorizing $1 $2\",\n\t\"soa2-auth-verified\": \"This app is verified. Others with the same name are not the official ones.\",\n\t\"soa2-auth-desc\": \"Authorize $1? (Owned by [https://scratch.mit.edu/users/$2/ $2].) It will be able to:\",\n\t\"soa2-auth-desc-no-owner\": \"Authorize $1? It will be able to:\",\n\t\"soa2-auth-invalid-title\": \"Invalid Auth URL\",\n\t\"soa2-auth-invalid\": \"You have been given a faulty authorization URL.\\n<br/>Please contact whoever gave you this URL and inform them of this.\",\n\t\"soa2-auth-maybe-invalid\": \"Authorization failed. Please read the page below and try again.\\n<br/>If the problem persists, you may have been given a faulty authorization URL.\\n<br/>Contact whoever gave you this URL and inform them of this.\",\n\t\"soa2-auth-cancelled-title\": \"Authorization Cancelled\",\n\t\"soa2-auth-cancelled\": \"Authorizing the app has been cancelled.\",\n\t\"soa2-code-title\": \"ScratchOAuth2 Code\",\n\t\"soa2-code\": \"Please copy the code below and paste it into the application that brought you here:\",\n\t\"soa2-scope-identify\": \"Know who you are on Scratch\",\n\t\"soa2-not-admin-title\": \"Not admin\",\n\t\"soa2-not-admin\": \"You are not a ScratchOAuth2 admin and are denied access to this page.\",\n\t\"soa2-admin-approvals\": \"Application name approvals\",\n\t\"soa2-admin-approvals-name\": \"Application Name\",\n\t\"soa2-admin-approvals-check\": \"\\u2713?\",\n\t\"soa2-admin-approvals-submit\": \"Approve Checked\",\n\t\"soa2-admin-apps-title\": \"Manage apps\",\n\t\"soa2-admin-apps-namedtitle\": \"Manage apps for $1\",\n\t\"soa2-admin-apps-submit\": \"Get apps for this username\",\n\t\"soa2-admins-list-title\": \"ScratchOAuth2 Admins\",\n\t\"soa2-admins-list\": \"These users are responsible for maintaining ScratchOAuth2, moderating app names, and handling flag requests:\"\n}", "{\n\t\"@metadata\": {\n\t\t\"author\": \"Kenny2scratch\"\n\t},\n\t\"soa2-login-title\": \"Title of Special:ScratchOAuth2/login\",\n\t\"soa2-apps-title\": \"Title of Special:SOA2Apps\",\n\t\"soa2-scratch-username\": \"Label for Scratch username field\",\n\t\"soa2-invalid-username\": \"Error message for invalid username\",\n\t\"soa2-vercode-explanation\": \"Instructions for user verification. $1 is the \\\"your profile\\\" link.\",\n\t\"soa2-your-profile\": \"Link text for \\\"your profile\\\"\",\n\t\"soa2-next\": \"Next button text\",\n\t\"soa2-login\": \"Login button text\",\n\t\"soa2-login-failed\": \"Login failed error message\",\n\t\"soa2-login-success\": \"Login success message, shown if no returnto was specified\",\n\t\"soa2-apps\": \"Description of list of apps\",\n\t\"soa2-new-app\": \"Action link for new app, also title of such page\",\n\t\"soa2-no-app-title\": \"Error page title when no application can be found\",\n\t\"soa2-no-app\": \"Error when application cannot be found. $1 is the app ID.\",\n\t\"soa2-app-id\": \"Table header for client ID\",\n\t\"soa2-app-secret\": \"Table header for client secret (with nbsp to not wrap)\",\n\t\"soa2-app-name\": \"Label for app name field\",\n\t\"soa2-app-owner\": \"Label for owner username field\",\n\t\"soa2-app-reset\": \"Label for reset-secret checkbox\",\n\t\"soa2-flags\": \"Title of flags table\",\n\t\"soa2-flags-yes\": \"Boolean true\",\n\t\"soa2-flags-no\": \"Boolean false\",\n\t\"soa2-flags-NAME_APPROVED\": \"Label for the NAME_APPROVED flag\",\n\t\"soa2-flags-not-NAME_APPROVED\": \"Description for when NAME_APPROVED is not set\",\n\t\"soa2-flags-VERIFIED\": \"Label for the VERIFIED flag\",\n\t\"soa2-flags-not-VERIFIED\": \"Description for when VERIFIED is not set - do not translate the links\",\n\t\"soa2-flags-HIDE_OWNER\": \"Label for the HIDE_OWNER flag\",\n\t\"soa2-flags-not-HIDE_OWNER\": \"Description for when HIDE_OWNER is not set - do not translate the links\",\n\t\"soa2-app-uris\": \"Title of redirect URIs section\",\n\t\"soa2-app-save\": \"Save button text\",\n\t\"soa2-app-delete\": \"Delete button text\",\n\t\"soa2-app-deleted-title\": \"Successful deletion page title\",\n\t\"soa2-app-deleted\": \"App deletion success message\",\n\t\"soa2-app-deletion-confirm\": \"Confirmation message for deleting an app\",\n\t\"soa2-app-new-title\": \"Title of app creation page\",\n\t\"soa2-app-create\": \"Create button text\",\n\t\"soa2-app-created\": \"Application creation success message\",\n\t\"soa2-unnamed-app\": \"Placeholder for name of app when app is unnamed\",\n\t\"soa2-unmoderated-app\": \"Placeholder for name of app when the name is not yet moderated\",\n\t\"soa2-auth-title\": \"Title of Special:ScratchOAuth2/authorize. $1 is the app name, $2 is the potential verified checkmark.\",\n\t\"soa2-auth-verified\": \"Hover text for verified checkmark.\",\n\t\"soa2-auth-desc\": \"Question part of auth flow. $1 is the (escaped) app name, $2 is the username\",\n\t\"soa2-auth-desc-no-owner\": \"Question part of auth flow, without the owner name.\",\n\t\"soa2-auth-invalid-title\": \"Title of Special:ScratchOAuth2/authorize when parameter validation fails\",\n\t\"soa2-auth-invalid\": \"Error message when parameter validation fails\",\n\t\"soa2-auth-maybe-invalid\": \"Error message when POST differs from GET. Includes note instructing retry.\",\n\t\"soa2-auth-cancelled-title\": \"Title of Special:ScratchOAuth2/authorize after clicking Cancel\",\n\t\"soa2-auth-cancelled\": \"Cancel success message\",\n\t\"soa2-code-title\": \"Title of Special:SOA2Code\",\n\t\"soa2-code\": \"Instructions to paste code into app without redirect URI\",\n\t\"soa2-scope-identify\": \"Description of \\\"identify\\\" scope\",\n\t\"soa2-not-admin-title\": \"Title of Special:SOA2Admin when the logged in user is not an admin\",\n\t\"soa2-not-admin\": \"Error message when the logged in user is not an admin\",\n\t\"soa2-admin-approvals\": \"Title of Special:SOA2Admin/approvals\",\n\t\"soa2-admin-approvals-name\": \"Column title of app name\",\n\t\"soa2-admin-approvals-check\": \"Column title of approval checkbox (Unicode character is a checkmark)\",\n\t\"soa2-admin-approvals-submit\": \"Text of submit button for approvals\",\n\t\"soa2-admin-apps-title\": \"Title of Special:SOA2Admin/apps\",\n\t\"soa2-admin-apps-namedtitle\": \"Title of Special:SOA2Admin/apps/$1\",\n\t\"soa2-admin-apps-submit\": \"Text of submit button for username\",\n\t\"soa2-admins-list-title\": \"Title of Special:ScratchOAuth2/admins\",\n\t\"soa2-admins-list\": \"Description of us\"\n}", "<?php\n\nnamespace MediaWiki\\Extension\\ScratchOAuth2\\Common;\n\nrequire_once __DIR__ . \"/consts.php\";\nrequire_once __DIR__ . \"/db.php\";\n\nclass SOA2Login {\n\t/**\n\t * Generate the Scratch verification code.\n\t * @param string $username the username to generate the code for\n\t */\n\tpublic static function gen_code( $session ) {\n\t\tif (!$session->exists( 'soa2_scratch_code' )) {\n\t\t\t$code = chunk_split(hash('sha256', random_bytes(32)), 5, ':');\n\t\t\t$code = substr($code, 0, strlen($code) - 1); // chop off last colon\n\t\t\t$session->set( 'soa2_scratch_code', $code );\n\t\t\t$session->save();\n\t\t}\n\t\treturn $session->get( 'soa2_scratch_code' );\n\t}\n\t/**\n\t * Get the data needed to complete a login.\n\t * @param string $username the username to get the codes for\n\t */\n\tpublic static function codes( string $username ) {\n\t\tglobal $wgRequest;\n\t\t// get user data from API\n\t\t$user = json_decode(file_get_contents(sprintf(\n\t\t\tSOA2_USERS_API, urlencode($username))), true);\n\t\tif (!$user) return null;\n\t\t// save user data\n\t\t$username = $user['username'];\n\t\tSOA2DB::saveUser( $user['id'], $user['username'] );\n\t\t// actually do the code generation\n\t\t$session = $wgRequest->getSession();\n\t\t$session->persist();\n\t\t$csrf = $session->getToken()->toString();\n\t\t// Step 15\n\t\t$code = self::gen_code( $session ); // Step 15\n\t\treturn [ 'username' => $username, 'csrf' => $csrf, 'code' => $code ];\n\t}\n\t/**\n\t * Did the user comment this code?\n\t * @param string $code the code\n\t * @param string $username the user\n\t */\n\tpublic static function commented( string $username, string $code ) {\n\t\t$username = strtolower($username);\n\t\t// Step 20, 21\n\t\t$comments = file_get_contents(sprintf(SOA2_COMMENTS_API, $username, rand()));\n\t\t$matches = [];\n\t\tpreg_match_all(SOA2_COMMENTS_REGEX, $comments, $matches, PREG_PATTERN_ORDER);\n\t\tfor ($i = 0; $i < count($matches[0]); ++$i) {\n\t\t\tif (strtolower($matches[1][$i]) !== $username) continue;\n\t\t\tif (hash_equals($code, $matches[2][$i])) return true; // Step 22\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Log in a user\n\t * @param string $username the username to login\n\t * @param string $csrf the CSRF token submitted\n\t * @return boolean whether the login was successful\n\t */\n\tpublic static function login( string $username, string $csrf ) {\n\t\tglobal $wgRequest;\n\t\t$session = $wgRequest->getSession();\n\t\t$session->persist();\n\t\t$token = $session->getToken();\n\t\tif (!$session->getToken()->match($csrf, SOA2_CODE_EXPIRY)) return false;\n\t\t$code = self::gen_code( $session ); // Step 19\n\t\tif (!self::commented( $username, $code )) return false;\n\t\t// the login's successful, set the user ID\n\t\t$user = SOA2DB::getUserByName( $username );\n\t\t$session->set( 'soa2_user_id', $user->user_id ); // Step 23\n\t\t$session->remove( 'soa2_scratch_code' );\n\t\t$session->save();\n\t\treturn true;\n\t}\n}", "<?php\nnamespace MediaWiki\\Extension\\ScratchOAuth2\\Special;\n\nrequire_once dirname(__DIR__) . \"/common/consts.php\";\nrequire_once dirname(__DIR__) . \"/common/login.php\";\nrequire_once dirname(__DIR__) . \"/common/apps.php\";\nrequire_once dirname(__DIR__) . \"/common/auth.php\";\nrequire_once dirname(__DIR__) . \"/common/users.php\";\n\nuse SpecialPage;\nuse WebRequest;\nuse Html;\nuse Title;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\SOA2Login;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\SOA2Apps;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\SOA2Auth;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\SOA2Users;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\AppFlags;\n\nclass SpecialScratchOAuth2 extends SpecialPage {\n\tpublic function __construct() {\n\t\tparent::__construct( 'ScratchOAuth2' );\n\t}\n\n\tpublic function execute( $par ) {\n\t\t$this->checkReadOnly();\n\t\t$out = $this->getOutput();\n\t\t$out->setIndexPolicy( 'noindex' );\n\t\tswitch ( $par ) {\n\t\t\tcase 'login':\n\t\t\t\t$this->specialLogin();\n\t\t\t\tbreak;\n\t\t\tcase 'authorize':\n\t\t\t\t$this->specialAuth();\n\t\t\t\tbreak;\n\t\t\tcase 'admins':\n\t\t\t\t$this->showAdmins();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$out->setPageTitle( 'ScratchOAuth2' );\n\t\t\t\t$user_id = SOA2Apps::userID();\n\t\t\t\tif (!$user_id) {\n\t\t\t\t\t$out->redirect( $this->getPageTitle( 'login' )->getLinkURL(), 303 );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t$out->addWikiMsg('soa2-login-success');\n\t\t\t\t/*$out->addHTML(\n\t\t\t\t\t\"<p>Your Scratch user ID is \"\n\t\t\t\t\t. ($user_id ?: 'not set')\n\t\t\t\t\t. \"</p>\"\n\t\t\t\t);\n\t\t\t\tif ($this->getRequest()->getSession()->exists('soa2_authing')) {\n\t\t\t\t\t$out->addHTML(Html::element('pre', [], var_export(\n\t\t\t\t\t\tSOA2Auth::get( $this->getRequest()->getSessionData('soa2_authing') ), true\n\t\t\t\t\t)));\n\t\t\t\t}*/\n\t\t}\n\t}\n\n\tpublic function specialLogin( $error = null ) {\n\t\t$request = $this->getRequest();\n\t\t$out = $this->getOutput();\n\t\t$out->setPageTitle( wfMessage('soa2-login-title')->escaped() );\n\t\tif ($error) {\n\t\t\t$this->error($error);\n\t\t} else if (\n\t\t\t$request->wasPosted() && $request->getCheck( 'username' )\n\t\t) {\n\t\t\t$username = $request->getVal( 'username', '', );\n\t\t\tif (!preg_match(SOA2_USERNAME_REGEX, $username)) {\n\t\t\t\t$this->specialLogin(\n\t\t\t\t\twfMessage('soa2-invalid-username')->plaintextParams($username)->parse()\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ($request->getCheck( 'token' )) {\n\t\t\t\t$this->doLogin( $request );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t$this->loginForm( $request );\n\t\t\treturn;\n\t\t}\n\t\t// Step 11\n\t\t$out->addHTML(Html::openElement('form', [ 'method' => 'POST' ]));\n\t\t$out->addHTML(Html::rawElement('p', [], Html::label(\n\t\t\twfMessage('soa2-scratch-username')->escaped(),\n\t\t\t'soa2-username-input',\n\t\t)));\n\t\t// Step 12\n\t\t$out->addHTML(Html::rawElement('p', [], Html::input(\n\t\t\t'username',\n\t\t\t$request->getVal('username', ''),\n\t\t\t'text',\n\t\t\t[ 'id' => 'soa2-username-input' ]\n\t\t)));\n\t\t$out->addHTML(Html::rawElement('p', [], Html::submitButton(\n\t\t\twfMessage('soa2-next')->escaped(), []\n\t\t)));\n\t\t$out->addHTML(Html::closeElement('form'));\n\t}\n\n\tpublic function loginForm( WebRequest $request ) { // Step 13\n\t\t$out = $this->getOutput();\n\t\t$username = $request->getVal('username');\n\t\t$codes = SOA2Login::codes( $username );\n\t\t$out->addHTML(Html::openElement('form', [ 'method' => 'POST' ]));\n\t\t$out->addHTML(Html::hidden('username', $username));\n\t\t$out->addHTML(Html::hidden('token', $codes['csrf'])); // Step 14\n\t\t$profile = Html::element(\n\t\t\t'a',\n\t\t\t[\n\t\t\t\t'href' => sprintf(SOA2_PROFILE_URL, urlencode($username)),\n\t\t\t\t'target' => '_new'\n\t\t\t],\n\t\t\twfMessage('soa2-your-profile')->plain()\n\t\t);\n\t\t// Step 16\n\t\t$out->addHTML(Html::rawElement(\n\t\t\t'p', [],\n\t\t\twfMessage('soa2-vercode-explanation')->rawParams($profile)->parse()\n\t\t));\n\t\t$out->addHTML(Html::rawElement('p', [], Html::element(\n\t\t\t'code', [], $codes['code']\n\t\t)));\n\t\t$out->addHTML(Html::rawElement('p', [], Html::submitButton(\n\t\t\twfMessage('soa2-login')->plain(), []\n\t\t)));\n\t\t$out->addHTML(Html::closeElement('form'));\n\t}\n\n\tpublic function doLogin( WebRequest $request ) { // Step 18\n\t\t$success = SOA2Login::login(\n\t\t\t$request->getVal('username'),\n\t\t\t$request->getVal('token')\n\t\t);\n\t\tif (!$success) {\n\t\t\t$this->specialLogin(\n\t\t\t\twfMessage('soa2-login-failed')->parse()\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\t// Step 24\n\t\t$link = $request->getVal(\n\t\t\t'returnto',\n\t\t\t$this->getPageTitle()->getFullURL()\n\t\t);\n\t\t$this->getOutput()->redirect( $link, 303 );\n\t}\n\n\tpublic function error( string $error ) {\n\t\t$this->getOutput()->addHTML(Html::rawElement(\n\t\t\t'p', [],\n\t\t\tHtml::rawElement('span', [ 'class' => 'error' ], $error)\n\t\t));\n\t}\n\n\tpublic function specialAuth( ?string $error = null ) { // Step 8 or 25\n\t\t$user_id = SOA2Apps::userID();\n\t\t$request = $this->getRequest();\n\t\t$session = $request->getSession();\n\t\t$session->persist();\n\t\t$out = $this->getOutput();\n\t\tif (!$user_id) { // Step 9\n\t\t\t// Step 10\n\t\t\t$out->redirect($this->getPageTitle( 'login' )->getLinkURL([\n\t\t\t\t'returnto' => $request->getRequestURL()\n\t\t\t]), 303);\n\t\t\treturn;\n\t\t}\n\t\tif ($error) {\n\t\t\t$this->error($error);\n\t\t} else if ($request->wasPosted()) {\n\t\t\t$this->doAuth( $user_id );\n\t\t\treturn;\n\t\t}\n\t\tif (!($data = SOA2Auth::requestData( $request ))) { // Step 25\n\t\t\t$out->setPageTitle( wfMessage('soa2-auth-invalid-title')->escaped() );\n\t\t\t$out->addWikiMsg('soa2-auth-invalid');\n\t\t\t$out->returnToMain();\n\t\t\treturn;\n\t\t}\n\t\t$app = SOA2Apps::application( $data['client_id'], $data['owner_id'] );\n\t\tif (!SOA2Auth::get($session->get('soa2_authing') ?? '')) {\n\t\t\tSOA2Auth::cancel( $user_id ); // Just to be safe\n\t\t\t// Step 28\n\t\t\t$session->set('soa2_authing', SOA2Auth::start( $data, $user_id ));\n\t\t}\n\t\tif (!$app['app_name']) {\n\t\t\t$name = wfMessage('soa2-unnamed-app')->text();\n\t\t} else if (!($app['flags'] & AppFlags::NAME_APPROVED)) {\n\t\t\t$name = wfMessage('soa2-unmoderated-app')->text();\n\t\t} else {\n\t\t\t$name = $app['app_name'];\n\t\t}\n\t\tif ($app['flags'] & AppFlags::VERIFIED) {\n\t\t\t$check = Html::rawElement('sup', [], Html::element(\n\t\t\t\t'abbr',\n\t\t\t\t[ 'title' => wfMessage('soa2-auth-verified')->text(), 'style' => 'cursor: help' ],\n\t\t\t\thtml_entity_decode('&#x2713;', ENT_HTML5, 'UTF-8')\n\t\t\t));\n\t\t} else {\n\t\t\t$check = '';\n\t\t}\n\t\t$out->setPageTitle( wfMessage('soa2-auth-title', $name, $check)->parse() );\n\t\tif ($app['flags'] & AppFlags::HIDE_OWNER) {\n\t\t\t$out->addWikiMsg('soa2-auth-desc-no-owner', htmlspecialchars($name));\n\t\t} else {\n\t\t\t$out->addWikiMsg(\n\t\t\t\t'soa2-auth-desc',\n\t\t\t\thtmlspecialchars($name),\n\t\t\t\tSOA2Users::getName($data['owner_id'])\n\t\t\t);\n\t\t}\n\t\t$out->addHTML(Html::openElement('ul'));\n\t\tforeach ($data['scopes'] as $scope) {\n\t\t\t$out->addHTML(Html::element(\n\t\t\t\t'li', [], wfMessage('soa2-scope-' . $scope)->text()));\n\t\t}\n\t\t$out->addHTML(Html::closeElement('ul'));\n\t\t$out->addHTML(Html::openElement('form', [ 'method' => 'POST' ]));\n\t\t$out->addHTML(Html::hidden('token', $session->getToken()->toString()));\n\t\t$out->addHTML(Html::rawElement('p', [], Html::input(\n\t\t\t'confirm',\n\t\t\twfMessage('confirm')->text(),\n\t\t\t'submit'\n\t\t) . Html::input(\n\t\t\t'cancel',\n\t\t\twfMessage('cancel')->text(),\n\t\t\t'submit'\n\t\t)));\n\t\t$out->addHTML(Html::closeElement('form'));\n\t}\n\n\tpublic function doAuth( int $user_id ) { // Step 30\n\t\t$request = $this->getRequest();\n\t\t$session = $request->getSession();\n\t\tif (!$session->getToken()->match($request->getVal('token'))) {\n\t\t\t$this->specialAuth( wfMessage('sessionfailure')->parse() );\n\t\t\treturn;\n\t\t}\n\t\t$out = $this->getOutput();\n\t\tif ($request->getCheck('cancel')) {\n\t\t\tSOA2Auth::cancel( $user_id );\n\t\t\t$session->remove('soa2_authing');\n\t\t\t$out->setPageTitle( wfMessage('soa2-auth-cancelled-title')->escaped() );\n\t\t\t$out->addWikiMsg('soa2-auth-cancelled');\n\t\t\t$out->returnToMain();\n\t\t\treturn;\n\t\t}\n\t\tif (\n\t\t\t!($reqData = SOA2Auth::requestData( $request ))\n\t\t\t// the session data might be null if this is a get-less request\n\t\t\t// or the authing itself might be null if the code has been used\n\t\t\t// or in hopefully rare cases, if the authing has been expired\n\t\t\t// either way the result will be null so this is 2 birds 1 stone\n\t\t\t|| !($dbData = SOA2Auth::get($session->get('soa2_authing') ?? ''))\n\t\t\t|| $reqData['redirect_uri'] != $dbData['redirect_uri']\n\t\t\t|| $reqData['scopes'] != $dbData['scopes']\n\t\t\t|| $reqData['state'] != $dbData['state']\n\t\t\t|| $reqData['client_id'] != $dbData['client_id']\n\t\t) {\n\t\t\tSOA2Auth::cancel( $user_id );\n\t\t\t$session->remove('soa2_authing');\n\t\t\t$this->specialAuth( wfMessage('soa2-auth-maybe-invalid')->parse() );\n\t\t\treturn;\n\t\t}\n\t\t// Step 31\n\t\t$uri = $dbData['redirect_uri'] ?: $this->getTitleFor('SOA2Code')->getFullURL();\n\t\t// Step 32\n\t\t$code = $dbData['code'];\n\t\t$state = $dbData['state'];\n\t\t// Step 33\n\t\t$query = http_build_query([\n\t\t\t'code' => $code,\n\t\t\t'state' => $state\n\t\t], null, '&', PHP_QUERY_RFC3986);\n\t\t$uri .= (parse_url($uri, PHP_URL_QUERY) ? '&' : '?') . $query;\n\t\t$out->redirect($uri, 303);\n\t}\n\n\tpublic function showAdmins() {\n\t\tglobal $wgSOA2AdminUsers;\n\t\t$out = $this->getOutput();\n\t\t$out->setPageTitle( wfMessage('soa2-admins-list-title')->escaped() );\n\t\t$out->addWikiMsg('soa2-admins-list');\n\t\t$out->addHTML(Html::openElement('ul'));\n\t\tforeach ($wgSOA2AdminUsers as $user_id) {\n\t\t\t$user_name = SOA2Users::getName( $user_id );\n\t\t\tif (!$user_name) continue;\n\t\t\t$out->addHTML(Html::rawElement(\n\t\t\t\t'li', [], SOA2Users::makeProfileLink( $user_name )));\n\t\t}\n\t\t$out->addHTML(Html::closeElement('ul'));\n\t}\n}"], "fixing_code": ["{\n\t\"@metadata\": {\n\t\t\"author\": \"Kenny2scratch\"\n\t},\n\t\"soa2-login-title\": \"Login with Scratch\",\n\t\"soa2-apps-title\": \"Manage your apps\",\n\t\"soa2-scratch-username\": \"Scratch username:\",\n\t\"soa2-invalid-username\": \"Invalid username: $1\",\n\t\"soa2-vercode-explanation\": \"Please go to $1 and comment the code below:\",\n\t\"soa2-vercode-explanation2\": \"For added privacy, delete your comment immediately after logging in here.\",\n\t\"soa2-vercode\": \"Copy this paragraph (including both the code and this message). Only post this code if it came from {{SERVER}} | $1\",\n\t\"soa2-your-profile\": \"your profile\",\n\t\"soa2-next\": \"Next\",\n\t\"soa2-login\": \"I have done so\",\n\t\"soa2-login-failed\": \"Login failed. Please try again, and make sure you comment the code on your profile.\",\n\t\"soa2-login-success\": \"You have successfully logged in. You may want to:\\n* [[Special:SOA2Apps|Manage your applications]]\\n* If you are an [[Special:ScratchOAuth2/admins|admin]], check the [[Special:SOA2Admin/approvals|name approval queue]]\",\n\t\"soa2-apps\": \"Below are your registered applications.\",\n\t\"soa2-new-app\": \"New application\",\n\t\"soa2-no-app-title\": \"No such application\",\n\t\"soa2-no-app\": \"No application with ID $1 belonging to you was found.\",\n\t\"soa2-app-id\": \"Client ID\",\n\t\"soa2-app-secret\": \"Client\\u00a0secret\",\n\t\"soa2-app-name\": \"App name\",\n\t\"soa2-app-owner\": \"Owner\",\n\t\"soa2-app-reset\": \"Reset secret (check then click Save)\",\n\t\"soa2-flags\": \"Flags\",\n\t\"soa2-flags-yes\": \"Yes\",\n\t\"soa2-flags-no\": \"No\",\n\t\"soa2-flags-NAME_APPROVED\": \"Name moderated and approved?\",\n\t\"soa2-flags-not-NAME_APPROVED\": \"Avoid releasing your app to the public until approved\",\n\t\"soa2-flags-VERIFIED\": \"Verified?\",\n\t\"soa2-flags-not-VERIFIED\": \"If your app is widely used, contact [[Special:ScratchOAuth2/admins|the admins]] to request verification\",\n\t\"soa2-flags-HIDE_OWNER\": \"Owner username hidden when authorizing?\",\n\t\"soa2-flags-not-HIDE_OWNER\": \"If your involvement in your app needs to be anonymous, contact [[Special:ScratchOAuth2/admins|the admins]] to request this flag\",\n\t\"soa2-app-uris\": \"Redirect URIs:\",\n\t\"soa2-app-save\": \"Save\",\n\t\"soa2-app-delete\": \"Delete $1\",\n\t\"soa2-app-deleted-title\": \"App deleted\",\n\t\"soa2-app-deleted\": \"The app has been deleted.\",\n\t\"soa2-app-deletion-confirm\": \"Are you sure you want to delete \\\"$1\\\"?\",\n\t\"soa2-app-new-title\": \"Create New Application\",\n\t\"soa2-app-create\": \"Create\",\n\t\"soa2-app-created\": \"Application created.\",\n\t\"soa2-unnamed-app\": \"[unnamed application]\",\n\t\"soa2-unmoderated-app\": \"[application name unmoderated]\",\n\t\"soa2-auth-title\": \"Authorizing $1 $2\",\n\t\"soa2-auth-verified\": \"This app is verified. Others with the same name are not the official ones.\",\n\t\"soa2-auth-desc\": \"Authorize $1? (Owned by [https://scratch.mit.edu/users/$2/ $2].) It will be able to:\",\n\t\"soa2-auth-desc-no-owner\": \"Authorize $1? It will be able to:\",\n\t\"soa2-auth-invalid-title\": \"Invalid Auth URL\",\n\t\"soa2-auth-invalid\": \"You have been given a faulty authorization URL.\\n<br/>Please contact whoever gave you this URL and inform them of this.\",\n\t\"soa2-auth-maybe-invalid\": \"Authorization failed. Please read the page below and try again.\\n<br/>If the problem persists, you may have been given a faulty authorization URL.\\n<br/>Contact whoever gave you this URL and inform them of this.\",\n\t\"soa2-auth-cancelled-title\": \"Authorization Cancelled\",\n\t\"soa2-auth-cancelled\": \"Authorizing the app has been cancelled.\",\n\t\"soa2-code-title\": \"ScratchOAuth2 Code\",\n\t\"soa2-code\": \"Please copy the code below and paste it into the application that brought you here:\",\n\t\"soa2-scope-identify\": \"Know who you are on Scratch\",\n\t\"soa2-not-admin-title\": \"Not admin\",\n\t\"soa2-not-admin\": \"You are not a ScratchOAuth2 admin and are denied access to this page.\",\n\t\"soa2-admin-approvals\": \"Application name approvals\",\n\t\"soa2-admin-approvals-name\": \"Application Name\",\n\t\"soa2-admin-approvals-check\": \"\\u2713?\",\n\t\"soa2-admin-approvals-submit\": \"Approve Checked\",\n\t\"soa2-admin-apps-title\": \"Manage apps\",\n\t\"soa2-admin-apps-namedtitle\": \"Manage apps for $1\",\n\t\"soa2-admin-apps-submit\": \"Get apps for this username\",\n\t\"soa2-admins-list-title\": \"ScratchOAuth2 Admins\",\n\t\"soa2-admins-list\": \"These users are responsible for maintaining ScratchOAuth2, moderating app names, and handling flag requests:\"\n}", "{\n\t\"@metadata\": {\n\t\t\"author\": \"Kenny2scratch\"\n\t},\n\t\"soa2-login-title\": \"Title of Special:ScratchOAuth2/login\",\n\t\"soa2-apps-title\": \"Title of Special:SOA2Apps\",\n\t\"soa2-scratch-username\": \"Label for Scratch username field\",\n\t\"soa2-invalid-username\": \"Error message for invalid username\",\n\t\"soa2-vercode-explanation\": \"Instructions for user verification. $1 is the \\\"your profile\\\" link.\",\n\t\"soa2-vercode-explanation2\": \"Instructions to delete the comment afterwards.\",\n\t\"soa2-vercode\": \"A message prepended to the actual code to prevent man-in-the-middle attacks. $1 is the code.\",\n\t\"soa2-your-profile\": \"Link text for \\\"your profile\\\"\",\n\t\"soa2-next\": \"Next button text\",\n\t\"soa2-login\": \"Login button text\",\n\t\"soa2-login-failed\": \"Login failed error message\",\n\t\"soa2-login-success\": \"Login success message, shown if no returnto was specified\",\n\t\"soa2-apps\": \"Description of list of apps\",\n\t\"soa2-new-app\": \"Action link for new app, also title of such page\",\n\t\"soa2-no-app-title\": \"Error page title when no application can be found\",\n\t\"soa2-no-app\": \"Error when application cannot be found. $1 is the app ID.\",\n\t\"soa2-app-id\": \"Table header for client ID\",\n\t\"soa2-app-secret\": \"Table header for client secret (with nbsp to not wrap)\",\n\t\"soa2-app-name\": \"Label for app name field\",\n\t\"soa2-app-owner\": \"Label for owner username field\",\n\t\"soa2-app-reset\": \"Label for reset-secret checkbox\",\n\t\"soa2-flags\": \"Title of flags table\",\n\t\"soa2-flags-yes\": \"Boolean true\",\n\t\"soa2-flags-no\": \"Boolean false\",\n\t\"soa2-flags-NAME_APPROVED\": \"Label for the NAME_APPROVED flag\",\n\t\"soa2-flags-not-NAME_APPROVED\": \"Description for when NAME_APPROVED is not set\",\n\t\"soa2-flags-VERIFIED\": \"Label for the VERIFIED flag\",\n\t\"soa2-flags-not-VERIFIED\": \"Description for when VERIFIED is not set - do not translate the links\",\n\t\"soa2-flags-HIDE_OWNER\": \"Label for the HIDE_OWNER flag\",\n\t\"soa2-flags-not-HIDE_OWNER\": \"Description for when HIDE_OWNER is not set - do not translate the links\",\n\t\"soa2-app-uris\": \"Title of redirect URIs section\",\n\t\"soa2-app-save\": \"Save button text\",\n\t\"soa2-app-delete\": \"Delete button text\",\n\t\"soa2-app-deleted-title\": \"Successful deletion page title\",\n\t\"soa2-app-deleted\": \"App deletion success message\",\n\t\"soa2-app-deletion-confirm\": \"Confirmation message for deleting an app\",\n\t\"soa2-app-new-title\": \"Title of app creation page\",\n\t\"soa2-app-create\": \"Create button text\",\n\t\"soa2-app-created\": \"Application creation success message\",\n\t\"soa2-unnamed-app\": \"Placeholder for name of app when app is unnamed\",\n\t\"soa2-unmoderated-app\": \"Placeholder for name of app when the name is not yet moderated\",\n\t\"soa2-auth-title\": \"Title of Special:ScratchOAuth2/authorize. $1 is the app name, $2 is the potential verified checkmark.\",\n\t\"soa2-auth-verified\": \"Hover text for verified checkmark.\",\n\t\"soa2-auth-desc\": \"Question part of auth flow. $1 is the (escaped) app name, $2 is the username\",\n\t\"soa2-auth-desc-no-owner\": \"Question part of auth flow, without the owner name.\",\n\t\"soa2-auth-invalid-title\": \"Title of Special:ScratchOAuth2/authorize when parameter validation fails\",\n\t\"soa2-auth-invalid\": \"Error message when parameter validation fails\",\n\t\"soa2-auth-maybe-invalid\": \"Error message when POST differs from GET. Includes note instructing retry.\",\n\t\"soa2-auth-cancelled-title\": \"Title of Special:ScratchOAuth2/authorize after clicking Cancel\",\n\t\"soa2-auth-cancelled\": \"Cancel success message\",\n\t\"soa2-code-title\": \"Title of Special:SOA2Code\",\n\t\"soa2-code\": \"Instructions to paste code into app without redirect URI\",\n\t\"soa2-scope-identify\": \"Description of \\\"identify\\\" scope\",\n\t\"soa2-not-admin-title\": \"Title of Special:SOA2Admin when the logged in user is not an admin\",\n\t\"soa2-not-admin\": \"Error message when the logged in user is not an admin\",\n\t\"soa2-admin-approvals\": \"Title of Special:SOA2Admin/approvals\",\n\t\"soa2-admin-approvals-name\": \"Column title of app name\",\n\t\"soa2-admin-approvals-check\": \"Column title of approval checkbox (Unicode character is a checkmark)\",\n\t\"soa2-admin-approvals-submit\": \"Text of submit button for approvals\",\n\t\"soa2-admin-apps-title\": \"Title of Special:SOA2Admin/apps\",\n\t\"soa2-admin-apps-namedtitle\": \"Title of Special:SOA2Admin/apps/$1\",\n\t\"soa2-admin-apps-submit\": \"Text of submit button for username\",\n\t\"soa2-admins-list-title\": \"Title of Special:ScratchOAuth2/admins\",\n\t\"soa2-admins-list\": \"Description of us\"\n}", "<?php\n\nnamespace MediaWiki\\Extension\\ScratchOAuth2\\Common;\n\nrequire_once __DIR__ . \"/consts.php\";\nrequire_once __DIR__ . \"/db.php\";\n\nclass SOA2Login {\n\t/**\n\t * Generate the Scratch verification code.\n\t * @param string $username the username to generate the code for\n\t */\n\tpublic static function gen_code( $session ) {\n\t\tif (!$session->exists( 'soa2_scratch_code' )) {\n\t\t\t$code = chunk_split(hash('sha256', random_bytes(32)), 5, ':');\n\t\t\t$code = substr($code, 0, strlen($code) - 1); // chop off last colon\n\t\t\t$code = wfMessage('soa2-vercode', $code)->text();\n\t\t\t$session->set( 'soa2_scratch_code', $code );\n\t\t\t$session->save();\n\t\t}\n\t\treturn $session->get( 'soa2_scratch_code' );\n\t}\n\t/**\n\t * Get the data needed to complete a login.\n\t * @param string $username the username to get the codes for\n\t */\n\tpublic static function codes( string $username ) {\n\t\tglobal $wgRequest;\n\t\t// get user data from API\n\t\t$user = json_decode(file_get_contents(sprintf(\n\t\t\tSOA2_USERS_API, urlencode($username))), true);\n\t\tif (!$user) return null;\n\t\t// save user data\n\t\t$username = $user['username'];\n\t\tSOA2DB::saveUser( $user['id'], $user['username'] );\n\t\t// actually do the code generation\n\t\t$session = $wgRequest->getSession();\n\t\t$session->persist();\n\t\t$csrf = $session->getToken()->toString();\n\t\t// Step 15\n\t\t$code = self::gen_code( $session ); // Step 15\n\t\treturn [ 'username' => $username, 'csrf' => $csrf, 'code' => $code ];\n\t}\n\t/**\n\t * Did the user comment this code?\n\t * @param string $code the code\n\t * @param string $username the user\n\t */\n\tpublic static function commented( string $username, string $code ) {\n\t\t$username = strtolower($username);\n\t\t// Step 20, 21\n\t\t$comments = file_get_contents(sprintf(SOA2_COMMENTS_API, $username, rand()));\n\t\t$matches = [];\n\t\tpreg_match_all(SOA2_COMMENTS_REGEX, $comments, $matches, PREG_PATTERN_ORDER);\n\t\tfor ($i = 0; $i < count($matches[0]); ++$i) {\n\t\t\tif (strtolower($matches[1][$i]) !== $username) continue;\n\t\t\tif (hash_equals($code, $matches[2][$i])) return true; // Step 22\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Log in a user\n\t * @param string $username the username to login\n\t * @param string $csrf the CSRF token submitted\n\t * @return boolean whether the login was successful\n\t */\n\tpublic static function login( string $username, string $csrf ) {\n\t\tglobal $wgRequest;\n\t\t$session = $wgRequest->getSession();\n\t\t$session->persist();\n\t\t$token = $session->getToken();\n\t\tif (!$session->getToken()->match($csrf, SOA2_CODE_EXPIRY)) return false;\n\t\t$code = self::gen_code( $session ); // Step 19\n\t\tif (!self::commented( $username, $code )) return false;\n\t\t// the login's successful, set the user ID\n\t\t$user = SOA2DB::getUserByName( $username );\n\t\t$session->set( 'soa2_user_id', $user->user_id ); // Step 23\n\t\t$session->remove( 'soa2_scratch_code' );\n\t\t$session->save();\n\t\treturn true;\n\t}\n}", "<?php\nnamespace MediaWiki\\Extension\\ScratchOAuth2\\Special;\n\nrequire_once dirname(__DIR__) . \"/common/consts.php\";\nrequire_once dirname(__DIR__) . \"/common/login.php\";\nrequire_once dirname(__DIR__) . \"/common/apps.php\";\nrequire_once dirname(__DIR__) . \"/common/auth.php\";\nrequire_once dirname(__DIR__) . \"/common/users.php\";\n\nuse SpecialPage;\nuse WebRequest;\nuse Html;\nuse Title;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\SOA2Login;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\SOA2Apps;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\SOA2Auth;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\SOA2Users;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\AppFlags;\n\nclass SpecialScratchOAuth2 extends SpecialPage {\n\tpublic function __construct() {\n\t\tparent::__construct( 'ScratchOAuth2' );\n\t}\n\n\tpublic function execute( $par ) {\n\t\t$this->checkReadOnly();\n\t\t$out = $this->getOutput();\n\t\t$out->setIndexPolicy( 'noindex' );\n\t\tswitch ( $par ) {\n\t\t\tcase 'login':\n\t\t\t\t$this->specialLogin();\n\t\t\t\tbreak;\n\t\t\tcase 'authorize':\n\t\t\t\t$this->specialAuth();\n\t\t\t\tbreak;\n\t\t\tcase 'admins':\n\t\t\t\t$this->showAdmins();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$out->setPageTitle( 'ScratchOAuth2' );\n\t\t\t\t$user_id = SOA2Apps::userID();\n\t\t\t\tif (!$user_id) {\n\t\t\t\t\t$out->redirect( $this->getPageTitle( 'login' )->getLinkURL(), 303 );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t$out->addWikiMsg('soa2-login-success');\n\t\t\t\t/*$out->addHTML(\n\t\t\t\t\t\"<p>Your Scratch user ID is \"\n\t\t\t\t\t. ($user_id ?: 'not set')\n\t\t\t\t\t. \"</p>\"\n\t\t\t\t);\n\t\t\t\tif ($this->getRequest()->getSession()->exists('soa2_authing')) {\n\t\t\t\t\t$out->addHTML(Html::element('pre', [], var_export(\n\t\t\t\t\t\tSOA2Auth::get( $this->getRequest()->getSessionData('soa2_authing') ), true\n\t\t\t\t\t)));\n\t\t\t\t}*/\n\t\t}\n\t}\n\n\tpublic function specialLogin( $error = null ) {\n\t\t$request = $this->getRequest();\n\t\t$out = $this->getOutput();\n\t\t$out->setPageTitle( wfMessage('soa2-login-title')->escaped() );\n\t\tif ($error) {\n\t\t\t$this->error($error);\n\t\t} else if (\n\t\t\t$request->wasPosted() && $request->getCheck( 'username' )\n\t\t) {\n\t\t\t$username = $request->getVal( 'username', '', );\n\t\t\tif (!preg_match(SOA2_USERNAME_REGEX, $username)) {\n\t\t\t\t$this->specialLogin(\n\t\t\t\t\twfMessage('soa2-invalid-username')->plaintextParams($username)->parse()\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ($request->getCheck( 'token' )) {\n\t\t\t\t$this->doLogin( $request );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t$this->loginForm( $request );\n\t\t\treturn;\n\t\t}\n\t\t// Step 11\n\t\t$out->addHTML(Html::openElement('form', [ 'method' => 'POST' ]));\n\t\t$out->addHTML(Html::rawElement('p', [], Html::label(\n\t\t\twfMessage('soa2-scratch-username')->escaped(),\n\t\t\t'soa2-username-input',\n\t\t)));\n\t\t// Step 12\n\t\t$out->addHTML(Html::rawElement('p', [], Html::input(\n\t\t\t'username',\n\t\t\t$request->getVal('username', ''),\n\t\t\t'text',\n\t\t\t[ 'id' => 'soa2-username-input' ]\n\t\t)));\n\t\t$out->addHTML(Html::rawElement('p', [], Html::submitButton(\n\t\t\twfMessage('soa2-next')->escaped(), []\n\t\t)));\n\t\t$out->addHTML(Html::closeElement('form'));\n\t}\n\n\tpublic function loginForm( WebRequest $request ) { // Step 13\n\t\t$out = $this->getOutput();\n\t\t$username = $request->getVal('username');\n\t\t$codes = SOA2Login::codes( $username );\n\t\t$out->addHTML(Html::openElement('form', [ 'method' => 'POST' ]));\n\t\t$out->addHTML(Html::hidden('username', $username));\n\t\t$out->addHTML(Html::hidden('token', $codes['csrf'])); // Step 14\n\t\t$profile = Html::element(\n\t\t\t'a',\n\t\t\t[\n\t\t\t\t'href' => sprintf(SOA2_PROFILE_URL, urlencode($username)),\n\t\t\t\t'target' => '_new'\n\t\t\t],\n\t\t\twfMessage('soa2-your-profile')->plain()\n\t\t);\n\t\t// Step 16\n\t\t$out->addHTML(Html::rawElement(\n\t\t\t'p', [],\n\t\t\twfMessage('soa2-vercode-explanation')->rawParams($profile)->parse()\n\t\t));\n\t\t$out->addHTML(Html::rawElement('p', [], Html::element(\n\t\t\t'textarea', [], $codes['code']\n\t\t)));\n\t\t$out->addWikiMsg('soa2-vercode-explanation2');\n\t\t$out->addHTML(Html::rawElement('p', [], Html::submitButton(\n\t\t\twfMessage('soa2-login')->plain(), []\n\t\t)));\n\t\t$out->addHTML(Html::closeElement('form'));\n\t}\n\n\tpublic function doLogin( WebRequest $request ) { // Step 18\n\t\t$success = SOA2Login::login(\n\t\t\t$request->getVal('username'),\n\t\t\t$request->getVal('token')\n\t\t);\n\t\tif (!$success) {\n\t\t\t$this->specialLogin(\n\t\t\t\twfMessage('soa2-login-failed')->parse()\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\t// Step 24\n\t\t$link = $request->getVal(\n\t\t\t'returnto',\n\t\t\t$this->getPageTitle()->getFullURL()\n\t\t);\n\t\t$this->getOutput()->redirect( $link, 303 );\n\t}\n\n\tpublic function error( string $error ) {\n\t\t$this->getOutput()->addHTML(Html::rawElement(\n\t\t\t'p', [],\n\t\t\tHtml::rawElement('span', [ 'class' => 'error' ], $error)\n\t\t));\n\t}\n\n\tpublic function specialAuth( ?string $error = null ) { // Step 8 or 25\n\t\t$user_id = SOA2Apps::userID();\n\t\t$request = $this->getRequest();\n\t\t$session = $request->getSession();\n\t\t$session->persist();\n\t\t$out = $this->getOutput();\n\t\tif (!$user_id) { // Step 9\n\t\t\t// Step 10\n\t\t\t$out->redirect($this->getPageTitle( 'login' )->getLinkURL([\n\t\t\t\t'returnto' => $request->getRequestURL()\n\t\t\t]), 303);\n\t\t\treturn;\n\t\t}\n\t\tif ($error) {\n\t\t\t$this->error($error);\n\t\t} else if ($request->wasPosted()) {\n\t\t\t$this->doAuth( $user_id );\n\t\t\treturn;\n\t\t}\n\t\tif (!($data = SOA2Auth::requestData( $request ))) { // Step 25\n\t\t\t$out->setPageTitle( wfMessage('soa2-auth-invalid-title')->escaped() );\n\t\t\t$out->addWikiMsg('soa2-auth-invalid');\n\t\t\t$out->returnToMain();\n\t\t\treturn;\n\t\t}\n\t\t$app = SOA2Apps::application( $data['client_id'], $data['owner_id'] );\n\t\tif (!SOA2Auth::get($session->get('soa2_authing') ?? '')) {\n\t\t\tSOA2Auth::cancel( $user_id ); // Just to be safe\n\t\t\t// Step 28\n\t\t\t$session->set('soa2_authing', SOA2Auth::start( $data, $user_id ));\n\t\t}\n\t\tif (!$app['app_name']) {\n\t\t\t$name = wfMessage('soa2-unnamed-app')->text();\n\t\t} else if (!($app['flags'] & AppFlags::NAME_APPROVED)) {\n\t\t\t$name = wfMessage('soa2-unmoderated-app')->text();\n\t\t} else {\n\t\t\t$name = $app['app_name'];\n\t\t}\n\t\tif ($app['flags'] & AppFlags::VERIFIED) {\n\t\t\t$check = Html::rawElement('sup', [], Html::element(\n\t\t\t\t'abbr',\n\t\t\t\t[ 'title' => wfMessage('soa2-auth-verified')->text(), 'style' => 'cursor: help' ],\n\t\t\t\thtml_entity_decode('&#x2713;', ENT_HTML5, 'UTF-8')\n\t\t\t));\n\t\t} else {\n\t\t\t$check = '';\n\t\t}\n\t\t$out->setPageTitle( wfMessage('soa2-auth-title', $name, $check)->parse() );\n\t\tif ($app['flags'] & AppFlags::HIDE_OWNER) {\n\t\t\t$out->addWikiMsg('soa2-auth-desc-no-owner', htmlspecialchars($name));\n\t\t} else {\n\t\t\t$out->addWikiMsg(\n\t\t\t\t'soa2-auth-desc',\n\t\t\t\thtmlspecialchars($name),\n\t\t\t\tSOA2Users::getName($data['owner_id'])\n\t\t\t);\n\t\t}\n\t\t$out->addHTML(Html::openElement('ul'));\n\t\tforeach ($data['scopes'] as $scope) {\n\t\t\t$out->addHTML(Html::element(\n\t\t\t\t'li', [], wfMessage('soa2-scope-' . $scope)->text()));\n\t\t}\n\t\t$out->addHTML(Html::closeElement('ul'));\n\t\t$out->addHTML(Html::openElement('form', [ 'method' => 'POST' ]));\n\t\t$out->addHTML(Html::hidden('token', $session->getToken()->toString()));\n\t\t$out->addHTML(Html::rawElement('p', [], Html::input(\n\t\t\t'confirm',\n\t\t\twfMessage('confirm')->text(),\n\t\t\t'submit'\n\t\t) . Html::input(\n\t\t\t'cancel',\n\t\t\twfMessage('cancel')->text(),\n\t\t\t'submit'\n\t\t)));\n\t\t$out->addHTML(Html::closeElement('form'));\n\t}\n\n\tpublic function doAuth( int $user_id ) { // Step 30\n\t\t$request = $this->getRequest();\n\t\t$session = $request->getSession();\n\t\tif (!$session->getToken()->match($request->getVal('token'))) {\n\t\t\t$this->specialAuth( wfMessage('sessionfailure')->parse() );\n\t\t\treturn;\n\t\t}\n\t\t$out = $this->getOutput();\n\t\tif ($request->getCheck('cancel')) {\n\t\t\tSOA2Auth::cancel( $user_id );\n\t\t\t$session->remove('soa2_authing');\n\t\t\t$out->setPageTitle( wfMessage('soa2-auth-cancelled-title')->escaped() );\n\t\t\t$out->addWikiMsg('soa2-auth-cancelled');\n\t\t\t$out->returnToMain();\n\t\t\treturn;\n\t\t}\n\t\tif (\n\t\t\t!($reqData = SOA2Auth::requestData( $request ))\n\t\t\t// the session data might be null if this is a get-less request\n\t\t\t// or the authing itself might be null if the code has been used\n\t\t\t// or in hopefully rare cases, if the authing has been expired\n\t\t\t// either way the result will be null so this is 2 birds 1 stone\n\t\t\t|| !($dbData = SOA2Auth::get($session->get('soa2_authing') ?? ''))\n\t\t\t|| $reqData['redirect_uri'] != $dbData['redirect_uri']\n\t\t\t|| $reqData['scopes'] != $dbData['scopes']\n\t\t\t|| $reqData['state'] != $dbData['state']\n\t\t\t|| $reqData['client_id'] != $dbData['client_id']\n\t\t) {\n\t\t\tSOA2Auth::cancel( $user_id );\n\t\t\t$session->remove('soa2_authing');\n\t\t\t$this->specialAuth( wfMessage('soa2-auth-maybe-invalid')->parse() );\n\t\t\treturn;\n\t\t}\n\t\t// Step 31\n\t\t$uri = $dbData['redirect_uri'] ?: $this->getTitleFor('SOA2Code')->getFullURL();\n\t\t// Step 32\n\t\t$code = $dbData['code'];\n\t\t$state = $dbData['state'];\n\t\t// Step 33\n\t\t$query = http_build_query([\n\t\t\t'code' => $code,\n\t\t\t'state' => $state\n\t\t], null, '&', PHP_QUERY_RFC3986);\n\t\t$uri .= (parse_url($uri, PHP_URL_QUERY) ? '&' : '?') . $query;\n\t\t$out->redirect($uri, 303);\n\t}\n\n\tpublic function showAdmins() {\n\t\tglobal $wgSOA2AdminUsers;\n\t\t$out = $this->getOutput();\n\t\t$out->setPageTitle( wfMessage('soa2-admins-list-title')->escaped() );\n\t\t$out->addWikiMsg('soa2-admins-list');\n\t\t$out->addHTML(Html::openElement('ul'));\n\t\tforeach ($wgSOA2AdminUsers as $user_id) {\n\t\t\t$user_name = SOA2Users::getName( $user_id );\n\t\t\tif (!$user_name) continue;\n\t\t\t$out->addHTML(Html::rawElement(\n\t\t\t\t'li', [], SOA2Users::makeProfileLink( $user_name )));\n\t\t}\n\t\t$out->addHTML(Html::closeElement('ul'));\n\t}\n}"], "filenames": ["i18n/en.json", "i18n/qqq.json", "includes/common/login.php", "includes/special/SpecialScratchOAuth2.php"], "buggy_code_start_loc": [9, 9, 16, 123], "buggy_code_end_loc": [9, 9, 16, 125], "fixing_code_start_loc": [10, 10, 17, 123], "fixing_code_end_loc": [12, 12, 18, 126], "type": "CWE-863", "message": "ScratchOAuth2 is an Oauth implementation for Scratch. Any ScratchOAuth2-related data normally accessible and modifiable by a user can be read and modified by a third party. 1. Scratch user visits 3rd party site. 2. 3rd party site asks user for Scratch username. 3. 3rd party site pretends to be user and gets login code from ScratchOAuth2. 4. 3rd party site gives code to user and instructs them to post it on their profile. 5. User posts code on their profile, not knowing it is a ScratchOAuth2 login code. 6. 3rd party site completes login with ScratchOAuth2. 7. 3rd party site has full access to anything the user could do if they directly logged in. See referenced GitHub security advisory for patch notes and workarounds.", "other": {"cve": {"id": "CVE-2021-29437", "sourceIdentifier": "security-advisories@github.com", "published": "2021-04-13T20:15:22.093", "lastModified": "2021-04-22T15:28:32.980", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "ScratchOAuth2 is an Oauth implementation for Scratch. Any ScratchOAuth2-related data normally accessible and modifiable by a user can be read and modified by a third party. 1. Scratch user visits 3rd party site. 2. 3rd party site asks user for Scratch username. 3. 3rd party site pretends to be user and gets login code from ScratchOAuth2. 4. 3rd party site gives code to user and instructs them to post it on their profile. 5. User posts code on their profile, not knowing it is a ScratchOAuth2 login code. 6. 3rd party site completes login with ScratchOAuth2. 7. 3rd party site has full access to anything the user could do if they directly logged in. See referenced GitHub security advisory for patch notes and workarounds."}, {"lang": "es", "value": "ScratchOAuth2 es una implementaci\u00f3n de Oauth para Scratch.&#xa0;Cualquier dato relacionado con ScratchOAuth2 normalmente accesible y modificable por un usuario puede ser le\u00eddo y modificado por un tercero.&#xa0;1. El usuario de Scratch visita un sitio de terceros.&#xa0;2. El sitio de terceros solicita al usuario el nombre de usuario de Scratch.&#xa0;3. El sitio de terceros pretende ser un usuario y obtiene el c\u00f3digo de inicio de sesi\u00f3n de ScratchOAuth2.&#xa0;4. El sitio de terceros proporciona un c\u00f3digo al usuario y le indica que lo publique en su perfil.&#xa0;5. El usuario publica el c\u00f3digo en su perfil, sin saber que es un c\u00f3digo de inicio de sesi\u00f3n de ScratchOAuth2.&#xa0;6. El sitio de terceros completa el inicio de sesi\u00f3n con ScratchOAuth2.&#xa0;7. El sitio de terceros tiene acceso completo a cualquier cosa que el usuario pueda hacer si inicia sesi\u00f3n directamente. Consulte el aviso de seguridad de GitHub al que se hace referencia para ver notas de parches y soluciones"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 5.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.6, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:H/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "HIGH", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 4.9, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-863"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:scratchoauth2_project:scratchoauth2:*:*:*:*:*:scratch:*:*", "versionEndExcluding": "2021-04-13", "matchCriteriaId": "FA485728-97AA-480C-BE2A-B4ACB8F6F65D"}]}]}], "references": [{"url": "https://github.com/ScratchVerifier/ScratchOAuth2/commit/9220c2a77eda3df37a84486ad722f1ad0985d8e7", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ScratchVerifier/ScratchOAuth2/security/advisories/GHSA-gvpg-23fh-8g75", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ScratchVerifier/ScratchOAuth2/commit/9220c2a77eda3df37a84486ad722f1ad0985d8e7"}}