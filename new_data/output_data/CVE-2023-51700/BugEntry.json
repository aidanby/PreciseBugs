{"buggy_code": ["<?php\nnamespace Mobile_BankID_Integration;\n\nuse Dimafe6\\BankID\\Service\\BankIDService;\n\nnew Core();\n\n/**\n * Core of the plugin.\n * It is responsible for all interactions with the BankID API and authentication of users.\n */\nclass Core {\n\n\t/**\n\t * Static variable that holds the instance of the class and make sure that there is only one instance at a time.\n\t *\n\t * @var Core|null\n\t */\n\tpublic static Core|null $instance = null;\n\n\t/**\n\t * BankIDService object.\n\t *\n\t * @var BankIDService|null\n\t */\n\tprivate BankIDService $bankid_service;\n\n\t/**\n\t * Class constructor that sets static $instance variable and adds actions.\n\t */\n\tpublic function __construct() {\n\t\tif ( isset( self::$instance ) ) {\n\t\t\treturn;\n\t\t}\n\t\tself::$instance = $this;\n\t\tadd_action( 'init', array( $this, 'init' ) );\n\t\tadd_action( 'wp_logout', array( $this, 'deleteAuthCookie' ) );\n\t}\n\n\t/**\n\t * Create BankIDService object and do action mobile_bankid_integration_init if required options are set.\n\t *\n\t * @return void\n\t */\n\tpublic function init() {\n\t\tif ( get_option( 'mobile_bankid_integration_endpoint' ) && get_option( 'mobile_bankid_integration_certificate' ) && get_option( 'mobile_bankid_integration_password' ) ) {\n\t\t\t$this->create_bankid_service();\n\t\t\tdo_action( 'mobile_bankid_integration_init' );\n\t\t}\n\t}\n\n\t/**\n\t * Create BankIDService object.\n\t *\n\t * @return void\n\t */\n\tprivate function create_bankid_service() {\n\t\t$this->bankid_service = new BankIDService(\n\t\t\tget_option( 'mobile_bankid_integration_endpoint' ),\n\t\t\t$_SERVER['REMOTE_ADDR'], // phpcs:ignore -- Does always exist and isn't user input.\n\t\t\tarray(\n\t\t\t\t'verify' => false,\n\t\t\t\t'cert'   => array( get_option( 'mobile_bankid_integration_certificate' ), get_option( 'mobile_bankid_integration_password' ) ),\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * Get BankIDService object.\n\t *\n\t * @return BankIDService\n\t */\n\tpublic function get_bankid_service() {\n\t\treturn $this->bankid_service;\n\t}\n\n\t/**\n\t * Creating new identification order.\n\t *\n\t * @return array\n\t */\n\tpublic function identify() {\n\t\tif ( ! isset( $this->bankid_service ) ) {\n\t\t\t$this->create_bankid_service();\n\t\t}\n\n\t\t$response = $this->bankid_service->getAuthResponse();\n\t\t// Save the response in DB.\n\t\t$this->saveAuthResponseToDB( $response->orderRef, $response ); // phpcs:ignore -- We cannot modify $orderRef to snake_case.\n\t\treturn array(\n\t\t\t'orderRef'       => $response->orderRef, // phpcs:ignore -- We cannot modify $orderRef to snake_case.\n\t\t\t'autoStartToken' => $response->autoStartToken, // phpcs:ignore -- We cannot modify $autoStartToken to snake_case.\n\t\t);\n\t}\n\n\t/**\n\t * Read the auth_response from DB.\n\t *\n\t * @param string $order_ref BankID order reference.\n\t * @return array|null\n\t */\n\tpublic function getAuthResponseFromDB( $order_ref ) {\n\t\tglobal $wpdb;\n\t\t$response = $wpdb->get_row( // phpcs:ignore WordPress.DB.DirectDatabaseQuery.DirectQuery, WordPress.DB.DirectDatabaseQuery.NoCaching\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT * FROM {$wpdb->prefix}mobile_bankid_integration_auth_responses WHERE orderRef = %s\",\n\t\t\t\t$order_ref\n\t\t\t)\n\t\t);\n\t\tif ( ! $response ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn array(\n\t\t\t'time_created' => $response->time_created,\n\t\t\t'response'     => unserialize( $response->response ),\n\t\t\t'orderRef'     => $response->orderRef, // phpcs:ignore -- We shall not modify $orderRef to snake_case.\n\t\t);\n\t}\n\n\t/**\n\t * Save the auth_response to DB.\n\t *\n\t * @param string $orderRef BankID order reference.\n\t * @param array  $response BankID response.\n\t * @return void\n\t */\n\tprivate function saveAuthResponseToDB( $orderRef, $response ) { // phpcs:ignore -- We shall not modify $orderRef to snake_case.\n\t\tglobal $wpdb;\n\t\t$table_name = $wpdb->prefix . 'mobile_bankid_integration_auth_responses';\n\t\t$wpdb->insert( // phpcs:ignore WordPress.DB.DirectDatabaseQuery.DirectQuery\n\t\t\t$table_name,\n\t\t\tarray(\n\t\t\t\t'time_created' => time(),\n\t\t\t\t'response'     => serialize( $response ),\n\t\t\t\t'orderRef'     => $orderRef, // phpcs:ignore -- We shall not modify $orderRef to snake_case.\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * Delete the auth_response from DB.\n\t *\n\t * @param string $orderRef BankID order reference.\n\t * @return void\n\t */\n\tpublic function deleteAuthResponseFromDB( $orderRef ) { // phpcs:ignore -- We shall not modify $orderRef to snake_case.\n\t\tglobal $wpdb;\n\t\t$table_name = $wpdb->prefix . 'mobile_bankid_integration_auth_responses';\n\t\t$wpdb->delete( // phpcs:ignore WordPress.DB.DirectDatabaseQuery.DirectQuery, WordPress.DB.DirectDatabaseQuery.NoCaching\n\t\t\t$table_name,\n\t\t\tarray(\n\t\t\t\t'orderRef' => $orderRef, // phpcs:ignore -- We shall not modify $orderRef to snake_case.\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * Get user ID from personal number.\n\t *\n\t * @param string $personal_number Personal number (12 digits, no hyphen).\n\t * @return int|false\n\t */\n\tpublic function getUserIdFromPersonalNumber( $personal_number ) {\n\t\t// Get user by personal number from User Meta.\n\t\t$user_query = new \\WP_User_Query(\n\t\t\tarray(\n\t\t\t\t'meta_key'   => 'mobile_bankid_integration_personal_number',\n\t\t\t\t'meta_value' => $personal_number,\n\t\t\t)\n\t\t);\n\t\t$users      = $user_query->get_results();\n\t\tif ( count( $users ) > 0 && count( $users ) < 2 ) {\n\t\t\treturn $users[0]->ID;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Set personal number for user.\n\t *\n\t * @param int    $user_id User ID.\n\t * @param string $personal_number Personal number (12 digits, no hyphen).\n\t * @return void\n\t */\n\tpublic function setPersonalNumberForUser( $user_id, $personal_number ) {\n\t\t// Check if user already has a personal number.\n\t\tif ( $this->getUserIdFromPersonalNumber( $personal_number ) !== false ) {\n\t\t\treturn;\n\t\t}\n\n\t\tupdate_user_meta( $user_id, 'mobile_bankid_integration_personal_number', $personal_number );\n\t}\n\n\t/**\n\t * Authentication cookies are used to verify the identity of a user who logs in to the site.\n\t *\n\t * Authentication cookies are set when a user logs in to the site, and are used to verify the identity of a user who logs in to the site.\n\t * They are a guarantee that the user signed in to the site using Mobile BankID.\n\t * It shall be a custom PHP SESSION.\n\t *\n\t * @param int $user_id User ID.\n\t * @return void\n\t */\n\tpublic function createAuthCookie( $user_id ) {\n\t\t// START SESSION.\n\t\tif ( ! session_id() ) {\n\t\t\tsession_start();\n\t\t}\n\t\t$personal_number = get_user_meta( $user_id, 'mobile_bankid_integration_personal_number', true );\n\t\tif ( ! $personal_number ) {\n\t\t\treturn;\n\t\t}\n\t\t$auth_cookie                                       = array(\n\t\t\t'user_id'         => $user_id,\n\t\t\t'personal_number' => $personal_number,\n\t\t\t'time_created'    => time(),\n\t\t);\n\t\t$_SESSION['mobile_bankid_integration_auth_cookie'] = $auth_cookie;\n\t}\n\n\t/**\n\t * Verify the authentication cookie.\n\t *\n\t * @return bool\n\t */\n\tpublic function verifyAuthCookie() {\n\t\t// START SESSION.\n\t\tif ( ! session_id() ) {\n\t\t\tsession_start();\n\t\t}\n\t\tif ( ! isset( $_SESSION['mobile_bankid_integration_auth_cookie'] ) ) {\n\t\t\treturn false;\n\t\t}\n\t\t$auth_cookie = $_SESSION['mobile_bankid_integration_auth_cookie']; // phpcs:ignore -- $_SESSION is not user input.\n\t\tif ( ! isset( $auth_cookie['user_id'] ) || ! isset( $auth_cookie['personal_number'] ) || ! isset( $auth_cookie['time_created'] ) ) {\n\t\t\treturn false;\n\t\t}\n\t\t$user_id         = $auth_cookie['user_id'];\n\t\t$personal_number = $auth_cookie['personal_number'];\n\t\t$time_created    = $auth_cookie['time_created'];\n\t\t// Check if user is same.\n\t\tif ( get_current_user_id() !== $user_id ) {\n\t\t\treturn false;\n\t\t}\n\t\t// Check if personal number is correct.\n\t\tif ( get_user_meta( $user_id, 'mobile_bankid_integration_personal_number', true ) !== $personal_number ) {\n\t\t\treturn false;\n\t\t}\n\t\t// Check if time created is not older than 24 hours.\n\t\tif ( $time_created < time() - 86400 ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Delete the authentication cookie.\n\t *\n\t * @return void\n\t */\n\tpublic function deleteAuthCookie() {\n\t\t// START SESSION.\n\t\tif ( ! session_id() ) {\n\t\t\tsession_start();\n\t\t}\n\t\ttry {\n\t\t\tunset( $_SESSION['mobile_bankid_integration_auth_cookie'] );\n\t\t} catch ( \\Throwable $th ) { // phpcs:ignore\n\t\t\t// Do nothing.\n\t\t}\n\t}\n}\n", "<?php\nnamespace Mobile_BankID_Integration\\WP_Login;\n\nuse \\Mobile_BankID_Integration\\Core;\nuse \\chillerlan\\QRCode\\QRCode;\n\nnew API;\n\nclass API {\n    public function __construct() {\n        add_action('rest_api_init', [$this, 'registerRoutes']);\n    }\n\n    public function registerRoutes() {\n        register_rest_route('mobile-bankid-integration/v1/login', '/identify', array(\n            'methods' => 'POST',\n            'callback' => [$this, 'identify'],\n            'permission_callback' => '__return_true'\n        ));\n        register_rest_route('mobile-bankid-integration/v1/login', '/status', array(\n            'methods' => 'GET',\n            'callback' => [$this, 'status'],\n            'permission_callback' => '__return_true'\n        ));\n    }\n\n    public function identify() {\n        $instance = Core::$instance;\n        $response = $instance->identify();\n        return $response;\n    }\n    public function status() {\n        $instance = Core::$instance;\n\n        if (!isset($_GET['orderRef'])) {\n            return new \\WP_Error('no_orderRef', 'No orderRef provided.', array('status' => 400));\n        }\n\n        $orderRef = $_GET['orderRef'];\n        $db_row = $instance->getAuthResponseFromDB($orderRef);\n        if (!isset($db_row)) {\n            return new \\WP_Error('no_orderRef', 'No orderRef found in DB.', array('status' => 400));\n        }\n        $auth_response = $db_row['response'];\n        $time = time();\n        $time_since_auth = $time - $db_row['time_created'];\n\n        $status = $instance->get_bankid_service()->collectResponse($auth_response->orderRef);\n\n        if ($status->status == \"failed\" ) {\n            $instance->deleteAuthResponseFromDB($orderRef);\n            $return = [\n                \"qr\" => null,\n                \"orderRef\" => $orderRef,\n                \"time_since_auth\" => $time_since_auth,\n                \"status\" => \"failed\",\n                \"hintCode\" => $status->hintCode\n            ];\n            return $return;\n        }\n\n        if ($status->status == \"complete\") {\n            $instance->deleteAuthResponseFromDB($orderRef);\n            if ($this->signInAsUserFromBankID($status->completionData->user->personalNumber, $status->completionData->user->givenName, $status->completionData->user->surname) == false) {\n                return [\n                    \"qr\" => null,\n                    \"orderRef\" => $orderRef,\n                    \"time_since_auth\" => $time_since_auth,\n                    \"status\" => \"complete_no_user\",\n                ];\n            }\n            return [\n                \"qr\" => null,\n                \"orderRef\" => $orderRef,\n                \"time_since_auth\" => $time_since_auth,\n                \"status\" => \"complete\",\n            ];\n        }\n\n        $qr = new QRCode;\n        $qrCode = $qr->render(\"bankid.\".$auth_response->qrStartToken.\".\".$time_since_auth.\".\".hash_hmac('sha256', $time_since_auth, $auth_response->qrStartSecret));\n        return [\n            \"qr\" => $qrCode,\n            \"orderRef\" => $orderRef,\n            \"time_since_auth\" => $time_since_auth,\n            \"status\" => $status->status,\n            \"hintCode\" => $status->hintCode ?? \"\",\n        ];\n    }\n\n    private function signInAsUserFromBankID($personal_number, $fname, $lname) {\n        // Get user by personal number from DB.\n        $user_id = Core::$instance->getUserIdFromPersonalNumber($personal_number);\n\n        $user = get_user_by('id', $user_id);\n        if (!$user) {\n            if (get_option('mobile_bankid_integration_registration') != \"yes\") {\n                return false;\n            }\n\n            // Create user.\n            $user_id = wp_create_user($this->randomUsername(), wp_generate_password());\n            $user = get_user_by('id', $user_id);\n            // Set user name\n            wp_update_user(array(\n                'ID' => $user_id,\n                'display_name' => $fname.\" \".$lname,\n                'first_name' => $fname,\n                'last_name' => $lname,\n            ));\n\n            // Set user personal number.\n            Core::$instance->setPersonalNumberForUser($user_id, $personal_number);\n        } else {\n            $user_id = $user->ID;\n        }\n        wp_set_current_user($user_id);\n        wp_set_auth_cookie($user_id);\n        Core::$instance->createAuthCookie($user_id);\n        do_action('wp_login', $personal_number, $user);\n        return $user;\n    }\n\n    private function randomUsername(){\n        $user_exists = 1;\n        do {\n           $rnd_str = sprintf(\"%06d\", mt_rand(1, 999999));\n           $user_exists = username_exists( \"user_\" . $rnd_str );\n       } while( $user_exists > 0 );\n       return \"user_\" . $rnd_str;\n    }\n}"], "fixing_code": ["<?php\nnamespace Mobile_BankID_Integration;\n\nuse Dimafe6\\BankID\\Service\\BankIDService;\n\nnew Core();\n\n/**\n * Core of the plugin.\n * It is responsible for all interactions with the BankID API and authentication of users.\n */\nclass Core {\n\n\t/**\n\t * Static variable that holds the instance of the class and make sure that there is only one instance at a time.\n\t *\n\t * @var Core|null\n\t */\n\tpublic static Core|null $instance = null;\n\n\t/**\n\t * BankIDService object.\n\t *\n\t * @var BankIDService|null\n\t */\n\tprivate BankIDService $bankid_service;\n\n\t/**\n\t * Class constructor that sets static $instance variable and adds actions.\n\t */\n\tpublic function __construct() {\n\t\tif ( isset( self::$instance ) ) {\n\t\t\treturn;\n\t\t}\n\t\tself::$instance = $this;\n\t\tadd_action( 'init', array( $this, 'init' ) );\n\t\tadd_action( 'wp_logout', array( $this, 'deleteAuthCookie' ) );\n\t}\n\n\t/**\n\t * Create BankIDService object and do action mobile_bankid_integration_init if required options are set.\n\t *\n\t * @return void\n\t */\n\tpublic function init() {\n\t\tif ( get_option( 'mobile_bankid_integration_endpoint' ) && get_option( 'mobile_bankid_integration_certificate' ) && get_option( 'mobile_bankid_integration_password' ) ) {\n\t\t\t$this->create_bankid_service();\n\t\t\tdo_action( 'mobile_bankid_integration_init' );\n\t\t}\n\t}\n\n\t/**\n\t * Create BankIDService object.\n\t *\n\t * @return void\n\t */\n\tprivate function create_bankid_service() {\n\t\t$this->bankid_service = new BankIDService(\n\t\t\tget_option( 'mobile_bankid_integration_endpoint' ),\n\t\t\t$_SERVER['REMOTE_ADDR'], // phpcs:ignore -- Does always exist and isn't user input.\n\t\t\tarray(\n\t\t\t\t'verify' => false,\n\t\t\t\t'cert'   => array( get_option( 'mobile_bankid_integration_certificate' ), get_option( 'mobile_bankid_integration_password' ) ),\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * Get BankIDService object.\n\t *\n\t * @return BankIDService\n\t */\n\tpublic function get_bankid_service() {\n\t\treturn $this->bankid_service;\n\t}\n\n\t/**\n\t * Creating new identification order.\n\t *\n\t * @return array\n\t */\n\tpublic function identify() {\n\t\tif ( ! isset( $this->bankid_service ) ) {\n\t\t\t$this->create_bankid_service();\n\t\t}\n\n\t\t$response = $this->bankid_service->getAuthResponse();\n\t\t// Save the response in DB.\n\t\t$this->saveAuthResponseToDB( $response->orderRef, $response ); // phpcs:ignore -- We cannot modify $orderRef to snake_case.\n\t\treturn array(\n\t\t\t'orderRef'       => $response->orderRef, // phpcs:ignore -- We cannot modify $orderRef to snake_case.\n\t\t\t'autoStartToken' => $response->autoStartToken, // phpcs:ignore -- We cannot modify $autoStartToken to snake_case.\n\t\t);\n\t}\n\n\t/**\n\t * Read the auth_response from DB.\n\t *\n\t * @param string $order_ref BankID order reference.\n\t * @return array|null\n\t */\n\tpublic function getAuthResponseFromDB( $order_ref ) {\n\t\tglobal $wpdb;\n\t\t$response = $wpdb->get_row( // phpcs:ignore WordPress.DB.DirectDatabaseQuery.DirectQuery, WordPress.DB.DirectDatabaseQuery.NoCaching\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT * FROM {$wpdb->prefix}mobile_bankid_integration_auth_responses WHERE orderRef = %s\",\n\t\t\t\t$order_ref\n\t\t\t)\n\t\t);\n\t\tif ( ! $response ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn array(\n\t\t\t'time_created' => $response->time_created,\n\t\t\t'response'     => $this->convert_json_order_response_to_array( $response->response ),\n\t\t\t'orderRef'     => $response->orderRef, // phpcs:ignore -- We shall not modify $orderRef to snake_case.\n\t\t);\n\t}\n\n\t/**\n\t * Save the auth_response to DB.\n\t *\n\t * @param string $orderRef BankID order reference.\n\t * @param array  $response BankID response.\n\t * @return void\n\t */\n\tprivate function saveAuthResponseToDB( $orderRef, $response ) { // phpcs:ignore -- We shall not modify $orderRef to snake_case.\n\t\tglobal $wpdb;\n\t\t$table_name = $wpdb->prefix . 'mobile_bankid_integration_auth_responses';\n\t\t$wpdb->insert( // phpcs:ignore WordPress.DB.DirectDatabaseQuery.DirectQuery\n\t\t\t$table_name,\n\t\t\tarray(\n\t\t\t\t'time_created' => time(),\n\t\t\t\t'response'     => $this->convert_order_response_to_json( $response ),\n\t\t\t\t'orderRef'     => $orderRef, // phpcs:ignore -- We shall not modify $orderRef to snake_case.\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * Delete the auth_response from DB.\n\t *\n\t * @param string $orderRef BankID order reference.\n\t * @return void\n\t */\n\tpublic function deleteAuthResponseFromDB( $orderRef ) { // phpcs:ignore -- We shall not modify $orderRef to snake_case.\n\t\tglobal $wpdb;\n\t\t$table_name = $wpdb->prefix . 'mobile_bankid_integration_auth_responses';\n\t\t$wpdb->delete( // phpcs:ignore WordPress.DB.DirectDatabaseQuery.DirectQuery, WordPress.DB.DirectDatabaseQuery.NoCaching\n\t\t\t$table_name,\n\t\t\tarray(\n\t\t\t\t'orderRef' => $orderRef, // phpcs:ignore -- We shall not modify $orderRef to snake_case.\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * Get user ID from personal number.\n\t *\n\t * @param string $personal_number Personal number (12 digits, no hyphen).\n\t * @return int|false\n\t */\n\tpublic function getUserIdFromPersonalNumber( $personal_number ) {\n\t\t// Get user by personal number from User Meta.\n\t\t$user_query = new \\WP_User_Query(\n\t\t\tarray(\n\t\t\t\t'meta_key'   => 'mobile_bankid_integration_personal_number',\n\t\t\t\t'meta_value' => $personal_number,\n\t\t\t)\n\t\t);\n\t\t$users      = $user_query->get_results();\n\t\tif ( count( $users ) > 0 && count( $users ) < 2 ) {\n\t\t\treturn $users[0]->ID;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Set personal number for user.\n\t *\n\t * @param int    $user_id User ID.\n\t * @param string $personal_number Personal number (12 digits, no hyphen).\n\t * @return void\n\t */\n\tpublic function setPersonalNumberForUser( $user_id, $personal_number ) {\n\t\t// Check if user already has a personal number.\n\t\tif ( $this->getUserIdFromPersonalNumber( $personal_number ) !== false ) {\n\t\t\treturn;\n\t\t}\n\n\t\tupdate_user_meta( $user_id, 'mobile_bankid_integration_personal_number', $personal_number );\n\t}\n\n\t/**\n\t * Authentication cookies are used to verify the identity of a user who logs in to the site.\n\t *\n\t * Authentication cookies are set when a user logs in to the site, and are used to verify the identity of a user who logs in to the site.\n\t * They are a guarantee that the user signed in to the site using Mobile BankID.\n\t * It shall be a custom PHP SESSION.\n\t *\n\t * @param int $user_id User ID.\n\t * @return void\n\t */\n\tpublic function createAuthCookie( $user_id ) {\n\t\t// START SESSION.\n\t\tif ( ! session_id() ) {\n\t\t\tsession_start();\n\t\t}\n\t\t$personal_number = get_user_meta( $user_id, 'mobile_bankid_integration_personal_number', true );\n\t\tif ( ! $personal_number ) {\n\t\t\treturn;\n\t\t}\n\t\t$auth_cookie                                       = array(\n\t\t\t'user_id'         => $user_id,\n\t\t\t'personal_number' => $personal_number,\n\t\t\t'time_created'    => time(),\n\t\t);\n\t\t$_SESSION['mobile_bankid_integration_auth_cookie'] = $auth_cookie;\n\t}\n\n\t/**\n\t * Verify the authentication cookie.\n\t *\n\t * @return bool\n\t */\n\tpublic function verifyAuthCookie() {\n\t\t// START SESSION.\n\t\tif ( ! session_id() ) {\n\t\t\tsession_start();\n\t\t}\n\t\tif ( ! isset( $_SESSION['mobile_bankid_integration_auth_cookie'] ) ) {\n\t\t\treturn false;\n\t\t}\n\t\t$auth_cookie = $_SESSION['mobile_bankid_integration_auth_cookie']; // phpcs:ignore -- $_SESSION is not user input.\n\t\tif ( ! isset( $auth_cookie['user_id'] ) || ! isset( $auth_cookie['personal_number'] ) || ! isset( $auth_cookie['time_created'] ) ) {\n\t\t\treturn false;\n\t\t}\n\t\t$user_id         = $auth_cookie['user_id'];\n\t\t$personal_number = $auth_cookie['personal_number'];\n\t\t$time_created    = $auth_cookie['time_created'];\n\t\t// Check if user is same.\n\t\tif ( get_current_user_id() !== $user_id ) {\n\t\t\treturn false;\n\t\t}\n\t\t// Check if personal number is correct.\n\t\tif ( get_user_meta( $user_id, 'mobile_bankid_integration_personal_number', true ) !== $personal_number ) {\n\t\t\treturn false;\n\t\t}\n\t\t// Check if time created is not older than 24 hours.\n\t\tif ( $time_created < time() - 86400 ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Delete the authentication cookie.\n\t *\n\t * @return void\n\t */\n\tpublic function deleteAuthCookie() {\n\t\t// START SESSION.\n\t\tif ( ! session_id() ) {\n\t\t\tsession_start();\n\t\t}\n\t\ttry {\n\t\t\tunset( $_SESSION['mobile_bankid_integration_auth_cookie'] );\n\t\t} catch ( \\Throwable $th ) { // phpcs:ignore\n\t\t\t// Do nothing.\n\t\t}\n\t}\n\n\t/**\n\t * Convert Dimafe6\\BankID\\OrderResponse to json.\n\t *\n\t * @param Dimafe6\\BankID\\OrderResponse $order_response Order response.\n\t * @return array\n\t * @since 1.0.1\n\t */\n\tprivate function convert_order_response_to_json( $order_response ): string {\n\t\t// Make sure that $order_response is an instance of Dimafe6\\BankID\\Model\\OrderResponse.\n\t\tif ( ! $order_response instanceof \\Dimafe6\\BankID\\Model\\OrderResponse ) {\n\t\t\treturn array();\n\t\t}\n\t\t$array = array(\n\t\t\t'orderRef'       => $order_response->orderRef, // phpcs:ignore -- We shall not modify $orderRef to snake_case.\n\t\t\t'autoStartToken' => $order_response->autoStartToken // phpcs:ignore -- We shall not modify $autoStartToken to snake_case.\n\t\t);\n\t\t// If property qrStartToken exists, add it to the array.\n\t\tif ( property_exists( $order_response, 'qrStartToken' ) ) {\n\t\t\t$array['qrStartToken'] = $order_response->qrStartToken; // phpcs:ignore -- We shall not modify $qrStartToken to snake_case.\n\t\t}\n\t\t// If property qrStartSecret exists, add it to the array.\n\t\tif ( property_exists( $order_response, 'qrStartSecret' ) ) {\n\t\t\t$array['qrStartSecret'] = $order_response->qrStartSecret; // phpcs:ignore -- We shall not modify $qrStartSecret to snake_case.\n\t\t}\n\n\t\t$json = wp_json_encode( $array );\n\n\t\treturn $json ? $json : '{}';\n\t}\n\n\t/**\n\t * Convert JSON OrderResponse to array after checking if it is valid.\n\t *\n\t * @param string $json JSON OrderResponse.\n\t * @throws \\Exception If JSON or data is not valid.\n\t * @return array\n\t * @since 1.0.1\n\t */\n\tprivate function convert_json_order_response_to_array( $json ): array {\n\t\t// Check each property in the JSON OrderResponse against [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\n\t\t// If any of the properties is not valid, return an empty array.\n\t\t$json = json_decode( $json, true );\n\t\tif ( ! is_array( $json ) ) {\n\t\t\tthrow new \\Exception( 'Invalid JSON' );\n\t\t}\n\t\tforeach ( $json as $key => $value ) {\n\t\t\tif ( ! preg_match( '/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/', $value ) ) {\n\t\t\t\tthrow new \\Exception( 'Data is not valid' );\n\t\t\t}\n\t\t}\n\t\treturn $json;\n\t}\n}\n", "<?php\nnamespace Mobile_BankID_Integration\\WP_Login;\n\nuse \\Mobile_BankID_Integration\\Core;\nuse \\chillerlan\\QRCode\\QRCode;\n\nnew API;\n\nclass API {\n    public function __construct() {\n        add_action('rest_api_init', [$this, 'registerRoutes']);\n    }\n\n    public function registerRoutes() {\n        register_rest_route('mobile-bankid-integration/v1/login', '/identify', array(\n            'methods' => 'POST',\n            'callback' => [$this, 'identify'],\n            'permission_callback' => '__return_true'\n        ));\n        register_rest_route('mobile-bankid-integration/v1/login', '/status', array(\n            'methods' => 'GET',\n            'callback' => [$this, 'status'],\n            'permission_callback' => '__return_true'\n        ));\n    }\n\n    public function identify() {\n        $instance = Core::$instance;\n        $response = $instance->identify();\n        return $response;\n    }\n    public function status() {\n        $instance = Core::$instance;\n\n        if (!isset($_GET['orderRef'])) {\n            return new \\WP_Error('no_orderRef', 'No orderRef provided.', array('status' => 400));\n        }\n\n        $orderRef = $_GET['orderRef'];\n        $db_row = $instance->getAuthResponseFromDB($orderRef);\n        if (!isset($db_row)) {\n            return new \\WP_Error('no_orderRef', 'No orderRef found in DB.', array('status' => 400));\n        }\n        $auth_response = $db_row['response'];\n        $time = time();\n        $time_since_auth = $time - $db_row['time_created'];\n\n        $status = $instance->get_bankid_service()->collectResponse($auth_response['orderRef']);\n\n        if ($status->status == \"failed\" ) {\n            $instance->deleteAuthResponseFromDB($orderRef);\n            $return = [\n                \"qr\" => null,\n                \"orderRef\" => $orderRef,\n                \"time_since_auth\" => $time_since_auth,\n                \"status\" => \"failed\",\n                \"hintCode\" => $status->hintCode\n            ];\n            return $return;\n        }\n\n        if ($status->status == \"complete\") {\n            $instance->deleteAuthResponseFromDB($orderRef);\n            if ($this->signInAsUserFromBankID($status->completionData->user->personalNumber, $status->completionData->user->givenName, $status->completionData->user->surname) == false) {\n                return [\n                    \"qr\" => null,\n                    \"orderRef\" => $orderRef,\n                    \"time_since_auth\" => $time_since_auth,\n                    \"status\" => \"complete_no_user\",\n                ];\n            }\n            return [\n                \"qr\" => null,\n                \"orderRef\" => $orderRef,\n                \"time_since_auth\" => $time_since_auth,\n                \"status\" => \"complete\",\n            ];\n        }\n\n        $qr = new QRCode;\n        $qrCode = $qr->render(\"bankid.\".$auth_response['qrStartToken'].\".\".$time_since_auth.\".\".hash_hmac('sha256', $time_since_auth, $auth_response['qrStartSecret']));\n        return [\n            \"qr\" => $qrCode,\n            \"orderRef\" => $orderRef,\n            \"time_since_auth\" => $time_since_auth,\n            \"status\" => $status->status,\n            \"hintCode\" => $status->hintCode ?? \"\",\n        ];\n    }\n\n    private function signInAsUserFromBankID($personal_number, $fname, $lname) {\n        // Get user by personal number from DB.\n        $user_id = Core::$instance->getUserIdFromPersonalNumber($personal_number);\n\n        $user = get_user_by('id', $user_id);\n        if (!$user) {\n            if (get_option('mobile_bankid_integration_registration') != \"yes\") {\n                return false;\n            }\n\n            // Create user.\n            $user_id = wp_create_user($this->randomUsername(), wp_generate_password());\n            $user = get_user_by('id', $user_id);\n            // Set user name\n            wp_update_user(array(\n                'ID' => $user_id,\n                'display_name' => $fname.\" \".$lname,\n                'first_name' => $fname,\n                'last_name' => $lname,\n            ));\n\n            // Set user personal number.\n            Core::$instance->setPersonalNumberForUser($user_id, $personal_number);\n        } else {\n            $user_id = $user->ID;\n        }\n        wp_set_current_user($user_id);\n        wp_set_auth_cookie($user_id);\n        Core::$instance->createAuthCookie($user_id);\n        do_action('wp_login', $personal_number, $user);\n        return $user;\n    }\n\n    private function randomUsername(){\n        $user_exists = 1;\n        do {\n           $rnd_str = sprintf(\"%06d\", mt_rand(1, 999999));\n           $user_exists = username_exists( \"user_\" . $rnd_str );\n       } while( $user_exists > 0 );\n       return \"user_\" . $rnd_str;\n    }\n}"], "filenames": ["includes/class-core.php", "includes/wp-login/class-api.php"], "buggy_code_start_loc": [115, 48], "buggy_code_end_loc": [271, 82], "fixing_code_start_loc": [115, 48], "fixing_code_end_loc": [325, 82], "type": "CWE-502", "message": "Unofficial Mobile BankID Integration for WordPress lets users employ Mobile BankID to authenticate themselves on your WordPress site. Prior to 1.0.1, WP-Mobile-BankID-Integration is affected by a vulnerability classified as a Deserialization of Untrusted Data vulnerability, specifically impacting scenarios where an attacker can manipulate the database. If unauthorized actors gain access to the database, they could exploit this vulnerability to execute object injection attacks. This could lead to unauthorized code execution, data manipulation, or data exfiltration within the WordPress environment.  Users of the plugin should upgrade to version 1.0.1 (or later), where the serialization and deserialization of OrderResponse objects have been switched out to an array stored as JSON.  A possible workaround for users unable to upgrade immediately is to enforce stricter access controls on the database, ensuring that only trusted and authorized entities can modify data. Additionally, implementing monitoring tools to detect unusual database activities could help identify and mitigate potential exploitation attempts.\n", "other": {"cve": {"id": "CVE-2023-51700", "sourceIdentifier": "security-advisories@github.com", "published": "2023-12-27T18:15:23.700", "lastModified": "2024-01-04T16:55:39.650", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Unofficial Mobile BankID Integration for WordPress lets users employ Mobile BankID to authenticate themselves on your WordPress site. Prior to 1.0.1, WP-Mobile-BankID-Integration is affected by a vulnerability classified as a Deserialization of Untrusted Data vulnerability, specifically impacting scenarios where an attacker can manipulate the database. If unauthorized actors gain access to the database, they could exploit this vulnerability to execute object injection attacks. This could lead to unauthorized code execution, data manipulation, or data exfiltration within the WordPress environment.  Users of the plugin should upgrade to version 1.0.1 (or later), where the serialization and deserialization of OrderResponse objects have been switched out to an array stored as JSON.  A possible workaround for users unable to upgrade immediately is to enforce stricter access controls on the database, ensuring that only trusted and authorized entities can modify data. Additionally, implementing monitoring tools to detect unusual database activities could help identify and mitigate potential exploitation attempts.\n"}, {"lang": "es", "value": "La integraci\u00f3n no oficial de Mobile BankID para WordPress permite a los usuarios emplear Mobile BankID para autenticarse en su sitio de WordPress. Antes de la versi\u00f3n 1.0.1, WP-Mobile-BankID-Integration se ve afectado por una vulnerabilidad clasificada como vulnerabilidad de deserializaci\u00f3n de datos no confiables, que afecta espec\u00edficamente escenarios en los que un atacante puede manipular la base de datos. Si actores no autorizados obtienen acceso a la base de datos, podr\u00edan aprovechar esta vulnerabilidad para ejecutar ataques de inyecci\u00f3n de objetos. Esto podr\u00eda dar lugar a la ejecuci\u00f3n de c\u00f3digo no autorizado, manipulaci\u00f3n de datos o filtraci\u00f3n de datos dentro del entorno de WordPress. Los usuarios del complemento deben actualizar a la versi\u00f3n 1.0.1 (o posterior), donde la serializaci\u00f3n y deserializaci\u00f3n de los objetos OrderResponse se cambiaron a una matriz almacenada como JSON. Una posible soluci\u00f3n para los usuarios que no pueden actualizar inmediatamente es aplicar controles de acceso m\u00e1s estrictos a la base de datos, garantizando que solo las entidades autorizadas y de confianza puedan modificar los datos. Adem\u00e1s, implementar herramientas de monitoreo para detectar actividades inusuales en la base de datos podr\u00eda ayudar a identificar y mitigar posibles intentos de explotaci\u00f3n."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 6.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.5, "impactScore": 5.9}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-502"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jamieblomerus:unofficial_mobile_bankid_integration:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "1.0.1", "matchCriteriaId": "4BC13A72-3F9F-43DA-8F3B-1E8A6BFD42CF"}]}]}], "references": [{"url": "https://github.com/jamieblomerus/WP-Mobile-BankID-Integration/commit/8251c6298a995ccf4f26c43f03ed11a275dd0c5f", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/jamieblomerus/WP-Mobile-BankID-Integration/security/advisories/GHSA-pqwp-qrp7-grg4", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/jamieblomerus/WP-Mobile-BankID-Integration/commit/8251c6298a995ccf4f26c43f03ed11a275dd0c5f"}}