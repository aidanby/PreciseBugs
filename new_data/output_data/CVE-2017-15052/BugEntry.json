{"buggy_code": ["<?php\n/**\n *\n * @file          users.queries.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link        http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nrequire_once 'SecureHandler.php';\nsession_start();\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1 ||\n    !isset($_SESSION['user_id']) || empty($_SESSION['user_id']) ||\n    !isset($_SESSION['key']) || empty($_SESSION['key'])\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/include.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/checks.php';\n$filtered_newvalue = filter_input(INPUT_POST, 'newValue', FILTER_SANITIZE_STRING);\nif (!checkUser($_SESSION['user_id'], $_SESSION['key'], \"manage_users\")) {\n    if (null === $filtered_newvalue) {\n        $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n        include $SETTINGS['cpassman_dir'].'/error.php';\n        exit();\n    } else {\n        $filtered_newvalue = filter_input(INPUT_POST, 'newValue', FILTER_SANITIZE_STRING);\n        // Do special check to allow user to change attributes of his profile\n        if (empty($filtered_newvalue) || !checkUser($_SESSION['user_id'], $_SESSION['key'], \"profile\")) {\n            $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n            include $SETTINGS['cpassman_dir'].'/error.php';\n            exit();\n        }\n    }\n}\n\n\ninclude $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\nheader(\"Content-type: text/html; charset=utf-8\");\nrequire_once $SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n// Connect to mysql server\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n$pass = defuse_return_decrypted($pass);\nDB::$host = $server;\nDB::$user = $user;\nDB::$password = $pass;\nDB::$dbName = $database;\nDB::$port = $port;\nDB::$encoding = $encoding;\nDB::$error_handler = true;\n$link = mysqli_connect($server, $user, $pass, $database, $port);\n$link->set_charset($encoding);\n\n//Load Tree\n$tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n$tree->register();\n$tree = new Tree\\NestedTree\\NestedTree($pre.'nested_tree', 'id', 'parent_id', 'title');\n\nif (null !== filter_input(INPUT_POST, 'type', FILTER_SANITIZE_STRING)) {\n    switch (filter_input(INPUT_POST, 'type', FILTER_SANITIZE_STRING)) {\n        case \"groupes_visibles\":\n        case \"groupes_interdits\":\n            // Prepare variables\n            $post_valeur = filter_input(INPUT_POST, 'valeur', FILTER_SANITIZE_STRING);\n            $val = explode(';', $post_valeur);\n            $post_type = filter_input(INPUT_POST, 'type', FILTER_SANITIZE_STRING);\n\n            // Check if id folder is already stored\n            $data = DB::queryfirstrow(\n                \"SELECT \".$post_type.\"\n                FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                $val[0]\n            );\n            $new_groupes = $data[$post_type];\n            if (empty($data[$post_type]) === false) {\n                $groupes = explode(';', $data[$post_type]);\n                if (in_array($val[1], $groupes)) {\n                    $new_groupes = str_replace($val[1], \"\", $new_groupes);\n                } else {\n                    $new_groupes .= \";\".$val[1];\n                }\n            } else {\n                $new_groupes = $val[1];\n            }\n            while (substr_count($new_groupes, \";;\") > 0) {\n                $new_groupes = str_replace(\";;\", \";\", $new_groupes);\n            }\n            // Store id DB\n            DB::update(\n                prefix_table(\"users\"),\n                array($post_type => $new_groupes),\n                \"id = %i\",\n                $val[0]\n            );\n            break;\n        /**\n         * Update a fonction\n         */\n        case \"fonction\":\n            $val = explode(';', filter_input(INPUT_POST, 'valeur', FILTER_SANITIZE_STRING));\n\n            // Check if ID exists\n            $data = DB::queryfirstrow(\"SELECT fonction_id FROM \".prefix_table(\"users\").\" WHERE id = %i\", $val[0]);\n            $new_fonctions = $data['fonction_id'];\n            if (!empty($data['fonction_id'])) {\n                $fonctions = explode(';', $data['fonction_id']);\n                if (in_array($val[1], $fonctions)) {\n                    $new_fonctions = str_replace($val[1], \"\", $new_fonctions);\n                } elseif (!empty($new_fonctions)) {\n                    $new_fonctions .= \";\".$val[1];\n                } else {\n                    $new_fonctions = \";\".$val[1];\n                }\n            } else {\n                $new_fonctions = $val[1];\n            }\n            // ensure no double ; exists\n            $new_fonctions = str_replace(\";;\", \";\", $new_fonctions);\n            // Store id DB\n            DB::update(\n                prefix_table(\"users\"),\n                array(\n                    'fonction_id' => $new_fonctions\n                    ),\n                \"id = %i\",\n                $val[0]\n            );\n            break;\n        /**\n         * ADD NEW USER\n         */\n        case \"add_new_user\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData(\n                filter_input(INPUT_POST, 'data', FILTER_SANITIZE_STRING),\n                \"decode\"\n            );\n\n            // Prepare variables\n            $login = noHTML(htmlspecialchars_decode($dataReceived['login']));\n            $name = noHTML(htmlspecialchars_decode($dataReceived['name']));\n            $lastname = noHTML(htmlspecialchars_decode($dataReceived['lastname']));\n            $pw = htmlspecialchars_decode($dataReceived['pw']);\n\n            // Empty user\n            if (mysqli_escape_string($link, htmlspecialchars_decode($login)) == \"\") {\n                echo '[ { \"error\" : \"'.addslashes($LANG['error_empty_data']).'\" } ]';\n                break;\n            }\n            // Check if user already exists\n            $data = DB::query(\n                \"SELECT id, fonction_id, groupes_interdits, groupes_visibles FROM \".prefix_table(\"users\").\"\n                WHERE login = %s\",\n                mysqli_escape_string($link, stripslashes($login))\n            );\n\n            if (DB::count() == 0) {\n                // check if admin role is set. If yes then check if originator is allowed\n                if ($dataReceived['admin'] === \"true\" && $_SESSION['user_admin'] !== \"1\") {\n                    echo '[ { \"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\" } ]';\n                    break;\n                }\n\n                // Add user in DB\n                DB::insert(\n                    prefix_table(\"users\"),\n                    array(\n                        'login' => $login,\n                        'name' => $name,\n                        'lastname' => $lastname,\n                        'pw' => bCrypt(stringUtf8Decode($pw), COST),\n                        'email' => $dataReceived['email'],\n                        'admin' => $dataReceived['admin'] == \"true\" ? '1' : '0',\n                        'gestionnaire' => $dataReceived['manager'] == \"true\" ? '1' : '0',\n                        'read_only' => $dataReceived['read_only'] == \"true\" ? '1' : '0',\n                        'personal_folder' => $dataReceived['personal_folder'] == \"true\" ? '1' : '0',\n                        'user_language' => $SETTINGS['default_language'],\n                        'fonction_id' => $dataReceived['groups'],\n                        'groupes_interdits' => $dataReceived['forbidden_flds'],\n                        'groupes_visibles' => $dataReceived['allowed_flds'],\n                        'isAdministratedByRole' => $dataReceived['isAdministratedByRole'] === \"null\" ? \"0\" : $dataReceived['isAdministratedByRole'],\n                        'encrypted_psk' => ''\n                        )\n                );\n                $new_user_id = DB::insertId();\n                // Create personnal folder\n                if ($dataReceived['personal_folder'] === \"true\") {\n                    DB::insert(\n                        prefix_table(\"nested_tree\"),\n                        array(\n                            'parent_id' => '0',\n                            'title' => $new_user_id,\n                            'bloquer_creation' => '0',\n                            'bloquer_modification' => '0',\n                            'personal_folder' => '1'\n                            )\n                    );\n                    $tree->rebuild();\n                }\n                // Create folder and role for domain\n                if ($dataReceived['new_folder_role_domain'] == \"true\") {\n                    // create folder\n                    DB::insert(\n                        prefix_table(\"nested_tree\"),\n                        array(\n                            'parent_id' => 0,\n                            'title' => mysqli_escape_string($link, stripslashes($dataReceived['domain'])),\n                            'personal_folder' => 0,\n                            'renewal_period' => 0,\n                            'bloquer_creation' => '0',\n                            'bloquer_modification' => '0'\n                            )\n                    );\n                    $new_folder_id = DB::insertId();\n                    // Add complexity\n                    DB::insert(\n                        prefix_table(\"misc\"),\n                        array(\n                            'type' => 'complex',\n                            'intitule' => $new_folder_id,\n                            'valeur' => 50\n                            )\n                    );\n                    // Create role\n                    DB::insert(\n                        prefix_table(\"roles_title\"),\n                        array(\n                            'title' => mysqli_escape_string($link, stripslashes(($dataReceived['domain'])))\n                            )\n                    );\n                    $new_role_id = DB::insertId();\n                    // Associate new role to new folder\n                    DB::insert(\n                        prefix_table(\"roles_values\"),\n                        array(\n                            'folder_id' => $new_folder_id,\n                            'role_id' => $new_role_id\n                            )\n                    );\n                    // Add the new user to this role\n                    DB::update(\n                        prefix_table(\"users\"),\n                        array(\n                            'fonction_id' => is_int($new_role_id)\n                            ),\n                        \"id=%i\",\n                        $new_user_id\n                    );\n                    // rebuild tree\n                    $tree->rebuild();\n                }\n                // get links url\n                if (empty($SETTINGS['email_server_url'])) {\n                    $SETTINGS['email_server_url'] = $SETTINGS['cpassman_url'];\n                }\n                // Send email to new user\n                sendEmail(\n                    $LANG['email_subject_new_user'],\n                    str_replace(array('#tp_login#', '#tp_pw#', '#tp_link#'), array(\" \".addslashes($login), addslashes($pw), $SETTINGS['email_server_url']), $LANG['email_new_user_mail']),\n                    $dataReceived['email']\n                );\n                // update LOG\n                logEvents('user_mngt', 'at_user_added', $_SESSION['user_id'], $_SESSION['login'], $new_user_id);\n\n                echo '[ { \"error\" : \"no\" } ]';\n            } else {\n                echo '[ { \"error\" : \"'.addslashes($LANG['error_user_exists']).'\" } ]';\n            }\n            break;\n\n        /**\n         * Delete the user\n         */\n        case \"delete_user\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // Prepare post variables\n            $post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);\n\n            if (filter_input(INPUT_POST, 'action', FILTER_SANITIZE_STRING) == \"delete\") {\n                // delete user in database\n                DB::delete(\n                    prefix_table(\"users\"),\n                    \"id = %i\",\n                    $post_id\n                );\n                // delete personal folder and subfolders\n                $data = DB::queryfirstrow(\n                    \"SELECT id FROM \".prefix_table(\"nested_tree\").\"\n                    WHERE title = %s AND personal_folder = %i\",\n                    $post_id,\n                    \"1\"\n                );\n                // Get through each subfolder\n                if (!empty($data['id'])) {\n                    $folders = $tree->getDescendants($data['id'], true);\n                    foreach ($folders as $folder) {\n                        // delete folder\n                        DB::delete(prefix_table(\"nested_tree\"), \"id = %i AND personal_folder = %i\", $folder->id, \"1\");\n                        // delete items & logs\n                        $items = DB::query(\n                            \"SELECT id FROM \".prefix_table(\"items\").\"\n                            WHERE id_tree=%i AND perso = %i\",\n                            $folder->id,\n                            \"1\"\n                        );\n                        foreach ($items as $item) {\n                            // Delete item\n                            DB::delete(prefix_table(\"items\"), \"id = %i\", $item['id']);\n                            // log\n                            DB::delete(prefix_table(\"log_items\"), \"id_item = %i\", $item['id']);\n                        }\n                    }\n                    // rebuild tree\n                    $tree = new Tree\\NestedTree\\NestedTree($pre.'nested_tree', 'id', 'parent_id', 'title');\n                    $tree->rebuild();\n                }\n                // update LOG\n                logEvents('user_mngt', 'at_user_deleted', $_SESSION['user_id'], $_SESSION['login'], $post_id);\n            } else {\n                // lock user in database\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        'disabled' => 1,\n                        'key_tempo' => \"\"\n                        ),\n                    \"id=%i\",\n                    $post_id\n                );\n                // update LOG\n                logEvents('user_mngt', 'at_user_locked', $_SESSION['user_id'], $_SESSION['login'], $post_id);\n            }\n            echo '[ { \"error\" : \"no\" } ]';\n            break;\n\n        /**\n         * UPDATE EMAIL OF USER\n         */\n        case \"modif_mail_user\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                // error\n                echo '[ { \"error\" : \"yes\" } ]';\n                break;\n            }\n\n            // Prepare post variables\n            $post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);\n\n            // Get old email\n            $data = DB::queryfirstrow(\n                \"SELECT email FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                $post_id\n            );\n\n            DB::update(\n                prefix_table(\"users\"),\n                array(\n                    'email' => filter_input(INPUT_POST, 'newemail', FILTER_SANITIZE_STRING)\n                    ),\n                \"id = %i\",\n                $post_id\n            );\n            // update LOG\n            logEvents(\n                'user_mngt',\n                'at_user_email_changed:'.$data['email'],\n                intval($_SESSION['user_id']),\n                filter_input(INPUT_POST, 'login', FILTER_SANITIZE_STRING),\n                $post_id\n            );\n            echo '[{\"error\" : \"no\"}]';\n            break;\n\n        /**\n         * UPDATE CAN CREATE ROOT FOLDER RIGHT\n         */\n        case \"can_create_root_folder\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\", \"error_text\" => addslashes($LANG['error_not_allowed_to'])), \"encode\");\n                break;\n            }\n\n            DB::update(\n                prefix_table(\"users\"),\n                array(\n                    'can_create_root_folder' => filter_input(INPUT_POST, 'value', FILTER_SANITIZE_STRING)\n                    ),\n                \"id = %i\",\n                filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n            );\n            echo prepareExchangedData(array(\"error\" => \"\"), \"encode\");\n            break;\n        /**\n         * UPDATE ADMIN RIGHTS FOR USER\n         */\n        case \"admin\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)\n                || $_SESSION['is_admin'] !== \"1\"\n            ) {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\", \"error_text\" => addslashes($LANG['error_not_allowed_to'])), \"encode\");\n                exit();\n            }\n\n            $post_value = filter_input(INPUT_POST, 'value', FILTER_SANITIZE_NUMBER_INT);\n\n            DB::update(\n                prefix_table(\"users\"),\n                array(\n                    'admin' => $post_value,\n                    'gestionnaire' => $post_value === 1 ? \"0\" : \"0\",\n                    'read_only' => $post_value === 1 ? \"0\" : \"0\"\n                    ),\n                \"id = %i\",\n                filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n            );\n\n            echo prepareExchangedData(array(\"error\" => \"\"), \"encode\");\n            break;\n        /**\n         * UPDATE MANAGER RIGHTS FOR USER\n         */\n        case \"gestionnaire\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\", \"error_text\" => addslashes($LANG['error_not_allowed_to'])), \"encode\");\n                break;\n            }\n\n            // Get some data\n            $data = DB::queryfirstrow(\n                \"SELECT can_manage_all_users, gestionnaire FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n            );\n\n            $post_value = filter_input(INPUT_POST, 'value', FILTER_SANITIZE_NUMBER_INT);\n\n            DB::update(\n                prefix_table(\"users\"),\n                array(\n                    'gestionnaire' => $post_value,\n                    'can_manage_all_users' => ($data['can_manage_all_users'] === \"0\" && $post_value === \"1\") ? \"0\" : (\n                        ($data['can_manage_all_users'] === \"0\" && $post_value === \"0\") ? \"0\" : (\n                        ($data['can_manage_all_users'] === \"1\" && $post_value === \"0\") ? \"0\" : \"1\")\n                    ),\n                    'admin' => $post_value === 1 ? \"0\" : \"0\",\n                    'read_only' => $post_value === 1 ? \"0\" : \"0\"\n                    ),\n                \"id = %i\",\n                filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n            );\n            echo prepareExchangedData(array(\"error\" => \"\"), \"encode\");\n            break;\n        /**\n         * UPDATE READ ONLY RIGHTS FOR USER\n         */\n        case \"read_only\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\", \"error_text\" => addslashes($LANG['error_not_allowed_to'])), \"encode\");\n                break;\n            }\n\n            $post_value = filter_input(INPUT_POST, 'value', FILTER_SANITIZE_NUMBER_INT);\n\n            DB::update(\n                prefix_table(\"users\"),\n                array(\n                    'read_only' => $post_value,\n                    'gestionnaire' => $post_value === 1 ? \"0\" : \"0\",\n                    'admin' => $post_value === 1 ? 0 : \"0\"\n                    ),\n                \"id = %i\",\n                filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n            );\n            echo prepareExchangedData(array(\"error\" => \"\"), \"encode\");\n            break;\n        /**\n         * UPDATE CAN MANAGE ALL USERS RIGHTS FOR USER\n         * Notice that this role must be also Manager\n         */\n        case \"can_manage_all_users\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\", \"error_text\" => addslashes($LANG['error_not_allowed_to'])), \"encode\");\n                break;\n            }\n\n            // Get some data\n            $data = DB::queryfirstrow(\n                \"SELECT admin, gestionnaire FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n            );\n\n            $post_value = filter_input(INPUT_POST, 'value', FILTER_SANITIZE_NUMBER_INT);\n\n            DB::update(\n                prefix_table(\"users\"),\n                array(\n                    'can_manage_all_users' => $post_value,\n                    'gestionnaire' => ($data['gestionnaire'] === \"0\" && $post_value === 1) ? \"1\" : (($data['gestionnaire'] === \"1\" && $post_value === 1) ? \"1\" : (($data['gestionnaire'] === \"1\" && $post_value === 0) ? \"1\" : \"0\")),\n                    'admin' => $post_value === 1 ? \"1\" : \"0\",\n                    'read_only' => $post_value === 1 ? \"1\" : \"0\"\n                    ),\n                \"id = %i\",\n                filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n            );\n            echo prepareExchangedData(array(\"error\" => \"\"), \"encode\");\n            break;\n        /**\n         * UPDATE PERSONNAL FOLDER FOR USER\n         */\n        case \"personal_folder\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\", \"error_text\" => addslashes($LANG['error_not_allowed_to'])), \"encode\");\n                break;\n            }\n\n            $post_value = filter_input(INPUT_POST, 'value', FILTER_SANITIZE_NUMBER_INT);\n\n            DB::update(\n                prefix_table(\"users\"),\n                array(\n                    'personal_folder' => $post_value === 1 ? \"1\" : \"0\"\n                    ),\n                \"id = %i\",\n                filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n            );\n            echo prepareExchangedData(array(\"error\" => \"\"), \"encode\");\n            break;\n\n        /**\n         * CHANGE USER FUNCTIONS\n         */\n        case \"open_div_functions\":\n            $text = \"\";\n            // Refresh list of existing functions\n            $data_user = DB::queryfirstrow(\n                \"SELECT fonction_id FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n            );\n\n            $users_functions = explode(';', $data_user['fonction_id']);\n            // array of roles for actual user\n            $my_functions = explode(';', $_SESSION['fonction_id']);\n\n            $rows = DB::query(\"SELECT id,title,creator_id FROM \".prefix_table(\"roles_title\"));\n            foreach ($rows as $record) {\n                if ($_SESSION['is_admin'] === 1 || ($_SESSION['user_manager'] === 1 && (in_array($record['id'], $my_functions) || $record['creator_id'] === $_SESSION['user_id']))) {\n                    $text .= '<input type=\"checkbox\" id=\"cb_change_function-'.$record['id'].'\"';\n                    if (in_array($record['id'], $users_functions)) {\n                        $text .= ' checked';\n                    }\n                    $text .= '>&nbsp;'.$record['title'].'<br />';\n                }\n            }\n            // return data\n            $return_values = json_encode(array(\"text\" => $text), JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP);\n            echo $return_values;\n            break;\n        /**\n         * Change user's functions\n         */\n        case \"change_user_functions\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\", \"error_text\" => addslashes($LANG['error_not_allowed_to'])), \"encode\");\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            // save data\n            DB::update(\n                prefix_table(\"users\"),\n                array(\n                    'fonction_id' => filter_input(INPUT_POST, 'list', FILTER_SANITIZE_STRING)\n                    ),\n                \"id = %i\",\n                filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n            );\n            // display information\n            $text = \"\";\n            // Check if POST is empty\n            if (empty(filter_input(INPUT_POST, 'list', FILTER_SANITIZE_STRING)) === false) {\n                $rows = DB::query(\n                    \"SELECT title FROM \".prefix_table(\"roles_title\").\" WHERE id IN %ls\",\n                    explode(\";\", filter_input(INPUT_POST, 'list', FILTER_SANITIZE_STRING))\n                );\n                foreach ($rows as $record) {\n                    $text .= '<i class=\\'fa fa-angle-right\\'></i>&nbsp;'.$record['title'].\"<br />\";\n                }\n            } else {\n                $text = '<span style=\\\"text-align:center\\\"><i class=\\\"fa fa-warning mi-red\\\" ></i>&nbsp;</span>';\n            }\n            // send back data\n            echo '[{\"text\":\"'.$text.'\"}]';\n            break;\n\n        /**\n         * CHANGE AUTHORIZED GROUPS\n         */\n        case \"open_div_autgroups\":\n            $text = \"\";\n            // Refresh list of existing functions\n            $data_user = DB::queryfirstrow(\n                \"SELECT groupes_visibles FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n            );\n\n            $user = explode(';', $data_user['groupes_visibles']);\n\n            $tree_desc = $tree->getDescendants();\n            foreach ($tree_desc as $t) {\n                if (in_array($t->id, $_SESSION['groupes_visibles']) && !in_array($t->id, $_SESSION['personal_visible_groups'])) {\n                    $text .= '<input type=\"checkbox\" id=\"cb_change_autgroup-'.$t->id.'\"';\n                    $ident = \"\";\n                    for ($y = 1; $y < $t->nlevel; $y++) {\n                        $ident .= \"&nbsp;&nbsp;\";\n                    }\n                    if (in_array($t->id, $user)) {\n                        $text .= ' checked';\n                    }\n                    $text .= '>&nbsp;'.$ident.$t->title.'<br />';\n                    $prev_level = $t->nlevel;\n                }\n            }\n            // return data\n            $return_values = json_encode(array(\"text\" => $text), JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP);\n            echo $return_values;\n            break;\n\n        /**\n         * CHANGE ADMINISTRATED BY\n         */\n        case \"change_user_adminby\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            // save data\n            DB::update(\n                prefix_table(\"users\"),\n                array(\n                    'isAdministratedByRole' => filter_input(INPUT_POST, 'isAdministratedByRole', FILTER_SANITIZE_STRING)\n                    ),\n                \"id = %i\",\n                filter_input(INPUT_POST, 'userId', FILTER_SANITIZE_NUMBER_INT)\n            );\n            echo '[{\"done\":\"\"}]';\n            break;\n\n        /**\n         * Change authorized groups\n         */\n        case \"change_user_autgroups\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            // save data\n            DB::update(\n                prefix_table(\"users\"),\n                array(\n                    'groupes_visibles' => filter_input(INPUT_POST, 'list', FILTER_SANITIZE_STRING)\n                    ),\n                \"id = %i\",\n                filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n            );\n            // display information\n            $text = \"\";\n            $val = str_replace(';', ',', filter_input(INPUT_POST, 'list', FILTER_SANITIZE_STRING));\n            // Check if POST is empty\n            if (empty(filter_input(INPUT_POST, 'list', FILTER_SANITIZE_STRING)) === false) {\n                $rows = DB::query(\n                    \"SELECT title,nlevel FROM \".prefix_table(\"nested_tree\").\" WHERE id IN %ls\",\n                    explode(\";\", filter_input(INPUT_POST, 'list', FILTER_SANITIZE_STRING))\n                );\n                foreach ($rows as $record) {\n                    $text .= '<i class=\\'fa fa-angle-right\\'></i>&nbsp;'.$record['title'].\"<br />\";\n                }\n            }\n            // send back data\n            echo '[{\"text\":\"'.$text.'\"}]';\n            break;\n\n        /**\n         * Unlock user\n         */\n        case \"unlock_account\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            DB::update(\n                prefix_table(\"users\"),\n                array(\n                    'disabled' => 0,\n                    'no_bad_attempts' => 0\n                    ),\n                \"id = %i\",\n                filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n            );\n            // update LOG\n            logEvents(\n                'user_mngt',\n                'at_user_unlocked',\n                $_SESSION['user_id'],\n                $_SESSION['login'],\n                filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n            );\n            break;\n\n        /*\n        * Check the domain\n        */\n        case \"check_domain\":\n            $return = array();\n            // Check if folder exists\n            $data = DB::query(\n                \"SELECT * FROM \".prefix_table(\"nested_tree\").\"\n                WHERE title = %s AND parent_id = %i\",\n                filter_input(INPUT_POST, 'domain', FILTER_SANITIZE_STRING),\n                \"0\"\n            );\n            $counter = DB::count();\n            if ($counter != 0) {\n                $return[\"folder\"] = \"exists\";\n            } else {\n                $return[\"folder\"] = \"not_exists\";\n            }\n            // Check if role exists\n            $data = DB::query(\n                \"SELECT * FROM \".prefix_table(\"roles_title\").\"\n                WHERE title = %s\",\n                filter_input(INPUT_POST, 'domain', FILTER_SANITIZE_STRING)\n            );\n            $counter = DB::count();\n            if ($counter != 0) {\n                $return[\"role\"] = \"exists\";\n            } else {\n                $return[\"role\"] = \"not_exists\";\n            }\n\n            echo json_encode($return);\n            break;\n\n        /*\n        * Get logs for a user\n        */\n        case \"user_log_items\":\n            $nb_pages = 1;\n            $logs = $sql_filter = \"\";\n            $pages = '<table style=\\'border-top:1px solid #969696;\\'><tr><td>'.$LANG['pages'].'&nbsp;:&nbsp;</td>';\n\n            // Prepare POST variables\n            $post_nb_items_by_page = filter_input(INPUT_POST, 'nb_items_by_page', FILTER_SANITIZE_NUMBER_INT);\n            $post_scope = filter_input(INPUT_POST, 'scope', FILTER_SANITIZE_STRING);\n\n            if (filter_input(INPUT_POST, 'scope', FILTER_SANITIZE_STRING) === \"user_activity\") {\n                if (null !== filter_input(INPUT_POST, 'filter', FILTER_SANITIZE_STRING)\n                    && !empty(filter_input(INPUT_POST, 'filter', FILTER_SANITIZE_STRING))\n                    && filter_input(INPUT_POST, 'filter', FILTER_SANITIZE_STRING) !== \"all\"\n                ) {\n                    $sql_filter = \" AND l.action = '\".filter_input(INPUT_POST, 'filter', FILTER_SANITIZE_STRING).\"'\";\n                }\n                // get number of pages\n                DB::query(\n                    \"SELECT *\n                    FROM \".prefix_table(\"log_items\").\" as l\n                    INNER JOIN \".prefix_table(\"items\").\" as i ON (l.id_item=i.id)\n                    INNER JOIN \".prefix_table(\"users\").\" as u ON (l.id_user=u.id)\n                    WHERE l.id_user = %i \".$sql_filter,\n                    filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n                );\n                $counter = DB::count();\n                // define query limits\n                if (null !== filter_input(INPUT_POST, 'page', FILTER_SANITIZE_NUMBER_INT)\n                    && filter_input(INPUT_POST, 'page', FILTER_SANITIZE_NUMBER_INT) > 1\n                ) {\n                    $start = (intval($post_nb_items_by_page)\n                        * (intval(filter_input(INPUT_POST, 'page', FILTER_SANITIZE_NUMBER_INT)) - 1)) + 1;\n                } else {\n                    $start = 0;\n                }\n                // launch query\n                $rows = DB::query(\n                    \"SELECT l.date as date, u.login as login, i.label as label, l.action as action\n                    FROM \".prefix_table(\"log_items\").\" as l\n                    INNER JOIN \".prefix_table(\"items\").\" as i ON (l.id_item=i.id)\n                    INNER JOIN \".prefix_table(\"users\").\" as u ON (l.id_user=u.id)\n                    WHERE l.id_user = %i \".$sql_filter.\"\n                    ORDER BY date DESC\n                    LIMIT \".intval($start).\",\".intval($post_nb_items_by_page),\n                    filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n                );\n            } else {\n                // get number of pages\n                DB::query(\n                    \"SELECT *\n                    FROM \".prefix_table(\"log_system\").\"\n                    WHERE type = %s AND field_1=%i\",\n                    \"user_mngt\",\n                    filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n                );\n                $counter = DB::count();\n                // define query limits\n                if (null !== filter_input(INPUT_POST, 'page', FILTER_SANITIZE_NUMBER_INT)\n                    && filter_input(INPUT_POST, 'page', FILTER_SANITIZE_NUMBER_INT) > 1\n                ) {\n                    $start = (intval($post_nb_items_by_page)\n                        * (intval(filter_input(INPUT_POST, 'page', FILTER_SANITIZE_NUMBER_INT)) - 1)) + 1;\n                } else {\n                    $start = 0;\n                }\n                // launch query\n                $rows = DB::query(\n                    \"SELECT *\n                    FROM \".prefix_table(\"log_system\").\"\n                    WHERE type = %s AND field_1=%i\n                    ORDER BY date DESC\n                    LIMIT \".mysqli_real_escape_string($link, filter_var($start, FILTER_SANITIZE_NUMBER_INT)).\", \".mysqli_real_escape_string($link, $post_nb_items_by_page),\n                    \"user_mngt\",\n                    filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n                );\n            }\n            // generate data\n            if (isset($counter) && $counter != 0) {\n                $nb_pages = ceil($counter / intval($post_nb_items_by_page));\n                for ($i = 1; $i <= $nb_pages; $i++) {\n                    $pages .= '<td onclick=\\'displayLogs('.$i.',\\\"'.$post_scope.'\\\")\\'><span style=\\'cursor:pointer;'.(filter_input(INPUT_POST, 'page', FILTER_SANITIZE_NUMBER_INT) === $i ? 'font-weight:bold;font-size:18px;\\'>'.$i : '\\'>'.$i).'</span></td>';\n                }\n            }\n            $pages .= '</tr></table>';\n            if (isset($rows)) {\n                foreach ($rows as $record) {\n                    if ($post_scope === \"user_mngt\") {\n                        $user = DB::queryfirstrow(\n                            \"SELECT login\n                            from \".prefix_table(\"users\").\"\n                            WHERE id=%i\",\n                            $record['qui']\n                        );\n                        $user_1 = DB::queryfirstrow(\n                            \"SELECT login\n                            from \".prefix_table(\"users\").\"\n                            WHERE id=%i\",\n                            filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n                        );\n                        $tmp = explode(\":\", $record['label']);\n                        // extract action done\n                        $label = \"\";\n                        if ($tmp[0] == \"at_user_initial_pwd_changed\") {\n                            $label = $LANG['log_user_initial_pwd_changed'];\n                        } elseif ($tmp[0] == \"at_user_email_changed\") {\n                            $label = $LANG['log_user_email_changed'].$tmp[1];\n                        } elseif ($tmp[0] == \"at_user_added\") {\n                            $label = $LANG['log_user_created'];\n                        } elseif ($tmp[0] == \"at_user_locked\") {\n                            $label = $LANG['log_user_locked'];\n                        } elseif ($tmp[0] == \"at_user_unlocked\") {\n                            $label = $LANG['log_user_unlocked'];\n                        } elseif ($tmp[0] == \"at_user_pwd_changed\") {\n                            $label = $LANG['log_user_pwd_changed'];\n                        }\n                        // prepare log\n                        $logs .= '<tr><td>'.date($SETTINGS['date_format'].\" \".$SETTINGS['time_format'], $record['date']).'</td><td align=\\\"center\\\">'.$label.'</td><td align=\\\"center\\\">'.$user['login'].'</td><td align=\\\"center\\\"></td></tr>';\n                    } else {\n                        $logs .= '<tr><td>'.date($SETTINGS['date_format'].\" \".$SETTINGS['time_format'], $record['date']).'</td><td align=\\\"center\\\">'.str_replace('\"', '\\\"', $record['label']).'</td><td align=\\\"center\\\">'.$record['login'].'</td><td align=\\\"center\\\">'.$LANG[$record['action']].'</td></tr>';\n                    }\n                }\n            }\n\n            echo '[ { \"table_logs\": \"'.($logs).'\", \"pages\": \"'.($pages).'\", \"error\" : \"no\" } ]';\n            break;\n\n        /*\n        * Migrate the Admin PF to User\n        */\n        case \"migrate_admin_pf\":\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData(\n                filter_input(INPUT_POST, 'data', FILTER_SANITIZE_STRING),\n                \"decode\"\n            );\n            // Prepare variables\n            $user_id = htmlspecialchars_decode($data_received['user_id']);\n            $salt_user = htmlspecialchars_decode($data_received['salt_user']);\n\n            if (!isset($_SESSION['user_settings']['clear_psk']) || $_SESSION['user_settings']['clear_psk'] == \"\") {\n                echo '[ { \"error\" : \"no_sk\" } ]';\n            } elseif ($salt_user == \"\") {\n                echo '[ { \"error\" : \"no_sk_user\" } ]';\n            } elseif ($user_id == \"\") {\n                echo '[ { \"error\" : \"no_user_id\" } ]';\n            } else {\n                // Get folder id for Admin\n                $admin_folder = DB::queryFirstRow(\n                    \"SELECT id FROM \".prefix_table(\"nested_tree\").\"\n                    WHERE title = %i AND personal_folder = %i\",\n                    intval($_SESSION['user_id']),\n                    \"1\"\n                );\n                // Get folder id for User\n                $user_folder = DB::queryFirstRow(\n                    \"SELECT id FROM \".prefix_table(\"nested_tree\").\"\n                    WHERE title=%i AND personal_folder = %i\",\n                    intval($user_id),\n                    \"1\"\n                );\n                // Get through each subfolder\n                foreach ($tree->getDescendants($admin_folder['id'], true) as $folder) {\n                    // Get each Items in PF\n                    $rows = DB::query(\n                        \"SELECT i.pw, i.label, l.id_user\n                        FROM \".prefix_table(\"items\").\" as i\n                        LEFT JOIN \".prefix_table(\"log_items\").\" as l ON (l.id_item=i.id)\n                        WHERE l.action = %s AND i.perso=%i AND i.id_tree=%i\",\n                        \"at_creation\",\n                        \"1\",\n                        intval($folder->id)\n                    );\n                    foreach ($rows as $record) {\n                        echo $record['label'].\" - \";\n                        // Change user\n                        DB::update(\n                            prefix_table(\"log_items\"),\n                            array(\n                                'id_user' => $user_id\n                                ),\n                            \"id_item = %i AND id_user $ %i AND action = %s\",\n                            $record['id'],\n                            $user_id,\n                            \"at_creation\"\n                        );\n                    }\n                }\n                $tree->rebuild();\n                echo '[ { \"error\" : \"no\" } ]';\n            }\n\n            break;\n\n        /**\n         * delete the timestamp value for specified user => disconnect\n         */\n        case \"disconnect_user\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            // Do\n            DB::update(\n                prefix_table(\"users\"),\n                array(\n                    'timestamp' => \"\",\n                    'key_tempo' => \"\",\n                    'session_end' => \"\"\n                    ),\n                \"id = %i\",\n                filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT)\n            );\n            break;\n\n        /**\n         * delete the timestamp value for all users\n         */\n        case \"disconnect_all_users\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            // Do\n            $rows = DB::query(\n                \"SELECT id FROM \".prefix_table(\"users\").\"\n                WHERE timestamp != %s AND admin != %i\",\n                \"\",\n                \"1\"\n            );\n            foreach ($rows as $record) {\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        'timestamp' => \"\",\n                        'key_tempo' => \"\",\n                        'session_end' => \"\"\n                        ),\n                    \"id = %i\",\n                    intval($record['id'])\n                );\n            }\n            break;\n        /**\n         * Get user info\n         */\n        case \"get_user_info\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            $arrData = array();\n            $arrFunction = array();\n            $arrMngBy = array();\n            $arrFldForbidden = array();\n            $arrFldAllowed = array();\n\n            //Build tree\n            $tree = new SplClassLoader('Tree\\NestedTree', $SETTINGS['cpassman_dir'].'/includes/libraries');\n            $tree->register();\n            $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n            // get User info\n            $rowUser = DB::queryFirstRow(\n                \"SELECT login, name, lastname, email, disabled, fonction_id, groupes_interdits, groupes_visibles, isAdministratedByRole, gestionnaire, read_only, can_create_root_folder, personal_folder, can_manage_all_users, admin\n                FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n            );\n\n            // get FUNCTIONS\n            $functionsList = \"\";\n            $users_functions = explode(';', $rowUser['fonction_id']);\n            // array of roles for actual user\n            $my_functions = explode(';', $_SESSION['fonction_id']);\n\n            $rows = DB::query(\"SELECT id,title,creator_id FROM \".prefix_table(\"roles_title\"));\n            foreach ($rows as $record) {\n                if ($_SESSION['is_admin'] == 1 || ($_SESSION['user_manager'] == 1 && (in_array($record['id'], $my_functions) || $record['creator_id'] == $_SESSION['user_id']))) {\n                    if (in_array($record['id'], $users_functions)) {\n                        $tmp = ' selected=\"selected\"';\n\n                        //\n                        array_push(\n                            $arrFunction,\n                            array(\n                                'title' => $record['title'],\n                                'id' => $record['id']\n                            )\n                        );\n                    } else {\n                        $tmp = \"\";\n                    }\n                    $functionsList .= '<option value=\"'.$record['id'].'\" class=\"folder_rights_role\"'.$tmp.'>'.$record['title'].'</option>';\n                }\n            }\n\n            // get MANAGEDBY\n            $rolesList = array();\n            $rows = DB::query(\"SELECT id,title FROM \".prefix_table(\"roles_title\").\" ORDER BY title ASC\");\n            foreach ($rows as $reccord) {\n                $rolesList[$reccord['id']] = array('id' => $reccord['id'], 'title' => $reccord['title']);\n            }\n            $managedBy = '<option value=\"0\">'.$LANG['administrators_only'].'</option>';\n            foreach ($rolesList as $fonction) {\n                if ($_SESSION['is_admin'] || in_array($fonction['id'], $_SESSION['user_roles'])) {\n                    if ($rowUser['isAdministratedByRole'] == $fonction['id']) {\n                        $tmp = ' selected=\"selected\"';\n\n                        //\n                        array_push(\n                            $arrMngBy,\n                            array(\n                                'title' => $fonction['title'],\n                                'id' => $fonction['id']\n                            )\n                        );\n                    } else {\n                        $tmp = \"\";\n                    }\n                    $managedBy .= '<option value=\"'.$fonction['id'].'\"'.$tmp.'>'.$LANG['managers_of'].' '.$fonction['title'].'</option>';\n                }\n            }\n\n            if (count($arrMngBy) === 0) {\n                array_push(\n                    $arrMngBy,\n                    array(\n                        'title' => $LANG['administrators_only'],\n                        'id' => \"0\"\n                    )\n                );\n            }\n\n            // get FOLDERS FORBIDDEN\n            $forbiddenFolders = \"\";\n            $userForbidFolders = explode(';', $rowUser['groupes_interdits']);\n            $tree_desc = $tree->getDescendants();\n            foreach ($tree_desc as $t) {\n                if (in_array($t->id, $_SESSION['groupes_visibles']) && !in_array($t->id, $_SESSION['personal_visible_groups'])) {\n                    $tmp = \"\";\n                    $ident = \"\";\n                    for ($y = 1; $y < $t->nlevel; $y++) {\n                        $ident .= \"&nbsp;&nbsp;\";\n                    }\n                    if (in_array($t->id, $userForbidFolders)) {\n                        $tmp = ' selected=\"selected\"';\n\n                        //\n                        array_push(\n                            $arrFldForbidden,\n                            array(\n                                'title' => htmlspecialchars($t->title, ENT_COMPAT, \"UTF-8\"),\n                                'id' => $t->id\n                            )\n                        );\n                    }\n                    $forbiddenFolders .= '<option value=\"'.$t->id.'\"'.$tmp.'>'.$ident.@htmlspecialchars($t->title, ENT_COMPAT, \"UTF-8\").'</option>';\n\n                    $prev_level = $t->nlevel;\n                }\n            }\n\n            // get FOLDERS ALLOWED\n            $allowedFolders = \"\";\n            $userAllowFolders = explode(';', $rowUser['groupes_visibles']);\n            $tree_desc = $tree->getDescendants();\n            foreach ($tree_desc as $t) {\n                if (in_array($t->id, $_SESSION['groupes_visibles']) && !in_array($t->id, $_SESSION['personal_visible_groups'])) {\n                    $tmp = \"\";\n                    $ident = \"\";\n                    for ($y = 1; $y < $t->nlevel; $y++) {\n                        $ident .= \"&nbsp;&nbsp;\";\n                    }\n                    if (in_array($t->id, $userAllowFolders)) {\n                        $tmp = ' selected=\"selected\"';\n\n                        //\n                        array_push(\n                            $arrFldAllowed,\n                            array(\n                                'title' => htmlspecialchars($t->title, ENT_COMPAT, \"UTF-8\"),\n                                'id' => $t->id\n                            )\n                        );\n                    }\n                    $allowedFolders .= '<option value=\"'.$t->id.'\"'.$tmp.'>'.$ident.@htmlspecialchars($t->title, ENT_COMPAT, \"UTF-8\").'</option>';\n\n                    $prev_level = $t->nlevel;\n                }\n            }\n\n            // get USER STATUS\n            if ($rowUser['disabled'] == 1) {\n                $arrData['info'] = $LANG['user_info_locked'].'<br /><input type=\"checkbox\" value=\"unlock\" name=\"1\" class=\"chk\">&nbsp;<label for=\"1\">'.$LANG['user_info_unlock_question'].'</label><br /><input type=\"checkbox\"  value=\"delete\" id=\"account_delete\" class=\"chk\" name=\"2\" onclick=\"confirmDeletion()\">&nbsp;<label for=\"2\">'.$LANG['user_info_delete_question'].\"</label>\";\n            } else {\n                $arrData['info'] = $LANG['user_info_active'].'<br /><input type=\"checkbox\" value=\"lock\" class=\"chk\">&nbsp;'.$LANG['user_info_lock_question'];\n            }\n\n            $arrData['error'] = \"no\";\n            $arrData['log'] = $rowUser['login'];\n            $arrData['name'] = $rowUser['name'];\n            $arrData['lastname'] = $rowUser['lastname'];\n            $arrData['email'] = $rowUser['email'];\n            $arrData['function'] = $functionsList;\n            $arrData['managedby'] = $managedBy;\n            $arrData['foldersForbid'] = $forbiddenFolders;\n            $arrData['foldersAllow'] = $allowedFolders; //print_r($arrMngBy);\n            $arrData['share_function'] = json_encode($arrFunction, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP);\n            $arrData['share_managedby'] = json_encode($arrMngBy, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP);\n            $arrData['share_forbidden'] = json_encode($arrFldForbidden, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP);\n            $arrData['share_allowed'] = json_encode($arrFldAllowed, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP);\n            $arrData['gestionnaire'] = $rowUser['gestionnaire'];\n            $arrData['read_only'] = $rowUser['read_only'];\n            $arrData['can_create_root_folder'] = $rowUser['can_create_root_folder'];\n            $arrData['personal_folder'] = $rowUser['personal_folder'];\n            $arrData['can_manage_all_users'] = $rowUser['can_manage_all_users'];\n            $arrData['admin'] = $rowUser['admin'];\n\n            $return_values = json_encode($arrData, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP);\n            echo $return_values;\n\n            break;\n\n        /**\n         * EDIT user\n         */\n        case \"store_user_changes\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData(\n                filter_input(INPUT_POST, 'data', FILTER_SANITIZE_STRING),\n                \"decode\"\n            );\n\n            // Empty user\n            if (mysqli_escape_string($link, htmlspecialchars_decode($dataReceived['login'])) == \"\") {\n                echo '[ { \"error\" : \"'.addslashes($LANG['error_empty_data']).'\" } ]';\n                break;\n            }\n\n            $account_status_action = mysqli_escape_string($link, htmlspecialchars_decode($dataReceived['action_on_user']));\n\n            // Prepare POST variables\n            $post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);\n\n            // delete account\n            // delete user in database\n            if ($account_status_action === \"delete\") {\n                DB::delete(\n                    prefix_table(\"users\"),\n                    \"id = %i\",\n                    $post_id\n                );\n                // delete personal folder and subfolders\n                $data = DB::queryfirstrow(\n                    \"SELECT id FROM \".prefix_table(\"nested_tree\").\"\n                    WHERE title = %s AND personal_folder = %i\",\n                    $post_id,\n                    \"1\"\n                );\n                // Get through each subfolder\n                if (!empty($data['id'])) {\n                    $folders = $tree->getDescendants($data['id'], true);\n                    foreach ($folders as $folder) {\n                        // delete folder\n                        DB::delete(prefix_table(\"nested_tree\"), \"id = %i AND personal_folder = %i\", $folder->id, \"1\");\n                        // delete items & logs\n                        $items = DB::query(\n                            \"SELECT id FROM \".prefix_table(\"items\").\"\n                            WHERE id_tree=%i AND perso = %i\",\n                            $folder->id,\n                            \"1\"\n                        );\n                        foreach ($items as $item) {\n                            // Delete item\n                            DB::delete(prefix_table(\"items\"), \"id = %i\", $item['id']);\n                            // log\n                            DB::delete(prefix_table(\"log_items\"), \"id_item = %i\", $item['id']);\n                        }\n                    }\n                    // rebuild tree\n                    $tree = new Tree\\NestedTree\\NestedTree($pre.'nested_tree', 'id', 'parent_id', 'title');\n                    $tree->rebuild();\n                }\n                // update LOG\n                logEvents('user_mngt', 'at_user_deleted', $_SESSION['user_id'], $_SESSION['login'], $post_id);\n            } else {\n                // Get old data about user\n                $oldData = DB::queryfirstrow(\n                    \"SELECT * FROM \".prefix_table(\"users\").\"\n                    WHERE id = %i\",\n                    $post_id\n                );\n\n                // manage account status\n                $accountDisabled = 0;\n                if ($account_status_action == \"unlock\") {\n                    $accountDisabled = 0;\n                    $logDisabledText = \"at_user_unlocked\";\n                } elseif ($account_status_action == \"lock\") {\n                    $accountDisabled = 1;\n                    $logDisabledText = \"at_user_locked\";\n                }\n\n                // update user\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        'login' => mysqli_escape_string($link, htmlspecialchars_decode($dataReceived['login'])),\n                        'name' => mysqli_escape_string($link, htmlspecialchars_decode($dataReceived['name'])),\n                        'lastname' => mysqli_escape_string($link, htmlspecialchars_decode($dataReceived['lastname'])),\n                        'email' => mysqli_escape_string($link, htmlspecialchars_decode($dataReceived['email'])),\n                        'disabled' => $accountDisabled,\n                        'isAdministratedByRole' => $dataReceived['managedby'],\n                        'groupes_interdits' => empty($dataReceived['forbidFld']) ? '0' : rtrim($dataReceived['forbidFld'], \";\"),\n                        'groupes_visibles' => empty($dataReceived['allowFld']) ? '0' : rtrim($dataReceived['allowFld'], \";\"),\n                        'fonction_id' => empty($dataReceived['functions']) ? '0' : rtrim($dataReceived['functions'], \";\"),\n                        ),\n                    \"id = %i\",\n                    $post_id\n                );\n\n                // update SESSION\n                if ($_SESSION['user_id'] === $post_id) {\n                    $_SESSION['user_email'] = mysqli_escape_string($link, htmlspecialchars_decode($dataReceived['email']));\n                    $_SESSION['name'] = mysqli_escape_string($link, htmlspecialchars_decode($dataReceived['name']));\n                    $_SESSION['lastname'] = mysqli_escape_string($link, htmlspecialchars_decode($dataReceived['lastname']));\n                }\n\n                // update LOG\n                if ($oldData['email'] != mysqli_escape_string($link, htmlspecialchars_decode($dataReceived['email']))) {\n                    logEvents('user_mngt', 'at_user_email_changed:'.$oldData['email'], intval($_SESSION['user_id']), $_SESSION['login'], $post_id);\n                }\n\n                if ($oldData['disabled'] != $accountDisabled) {\n                    // update LOG\n                    logEvents('user_mngt', $logDisabledText, $_SESSION['user_id'], $_SESSION['login'], $post_id);\n                }\n            }\n\n            echo '[ { \"error\" : \"no\" } ]';\n            break;\n\n        /**\n         * UPDATE CAN CREATE ROOT FOLDER RIGHT\n         */\n        case \"user_edit_login\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            DB::update(\n                prefix_table(\"users\"),\n                array(\n                    'login' => filter_input(INPUT_POST, 'login', FILTER_SANITIZE_STRING),\n                    'name' => filter_input(INPUT_POST, 'name', FILTER_SANITIZE_STRING),\n                    'lastname' => filter_input(INPUT_POST, 'lastname', FILTER_SANITIZE_STRING)\n                ),\n                \"id = %i\",\n                filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n            );\n            break;\n\n        /**\n         * IS LOGIN AVAILABLE?\n         */\n        case \"is_login_available\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            DB::queryfirstrow(\n                \"SELECT * FROM \".prefix_table(\"users\").\"\n                WHERE login = %s\",\n                mysqli_escape_string(\n                    $link,\n                    htmlspecialchars_decode(filter_input(INPUT_POST, 'login', FILTER_SANITIZE_STRING))\n                )\n            );\n\n            echo '[ { \"error\" : \"\" , \"exists\" : \"'.DB::count().'\"} ]';\n\n            break;\n\n        /**\n         * GET USER FOLDER RIGHT\n         */\n        case \"user_folders_rights\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\", \"error_text\" => addslashes($LANG['error_not_allowed_to'])), \"encode\");\n                break;\n            }\n            $arrData = array();\n\n            //Build tree\n            $tree = new SplClassLoader('Tree\\NestedTree', $SETTINGS['cpassman_dir'].'/includes/libraries');\n            $tree->register();\n            $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n            // get User info\n            $rowUser = DB::queryFirstRow(\n                \"SELECT login, name, lastname, email, disabled, fonction_id, groupes_interdits, groupes_visibles, isAdministratedByRole, avatar_thumb\n                FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n            );\n\n            // get rights\n            $functionsList = \"\";\n            $arrFolders = [];\n            $html = '<div style=\"padding:5px; margin-bottom:10px; height:40px;\" class=\"ui-state-focus ui-corner-all\">';\n            if (!empty($rowUser['avatar_thumb'])) {\n                $html .= '<div style=\"float:left; margin-right:30px;\"><img src=\"includes/avatars/'.$rowUser['avatar_thumb'].'\"></div>';\n            }\n            $html .= '<div style=\"float:left;font-size:20px; margin-top:8px; text-align:center;\">'.$rowUser['name'].' '.$rowUser['lastname'].' ['.$rowUser['login'].']</div></div><table>';\n\n            $arrData['functions'] = array_filter(explode(';', $rowUser['fonction_id']));\n            $arrData['allowed_folders'] = array_filter(explode(';', $rowUser['groupes_visibles']));\n            $arrData['denied_folders'] = array_filter(explode(';', $rowUser['groupes_interdits']));\n\n            // refine folders based upon roles\n            $rows = DB::query(\n                \"SELECT folder_id, type\n                FROM \".prefix_table(\"roles_values\").\"\n                WHERE role_id IN %ls\n                ORDER BY folder_id ASC\",\n                $arrData['functions']\n            );\n            foreach ($rows as $record) {\n                $bFound = false;\n                $x = 0;\n                foreach ($arrFolders as $fld) {\n                    if ($fld['id'] === $record['folder_id']) {\n                        // get the level of access on the folder\n                        $arrFolders[$x]['type'] = evaluate_folder_acces_level($record['type'], $arrFolders[$x]['type']);\n                        $bFound = true;\n                        break;\n                    }\n                    $x++;\n                }\n                if ($bFound === false && !in_array($record['folder_id'], $arrData['denied_folders'])) {\n                    array_push($arrFolders, array(\"id\" => $record['folder_id'], \"type\" => $record['type']));\n                }\n            }\n\n            $tree_desc = $tree->getDescendants();\n            foreach ($tree_desc as $t) {\n                foreach ($arrFolders as $fld) {\n                    if ($fld['id'] === $t->id) {\n                        // get folder name\n                        $row = DB::queryFirstRow(\n                            \"SELECT title, nlevel\n                            FROM \".prefix_table(\"nested_tree\").\"\n                            WHERE id = %i\",\n                            $fld['id']\n                        );\n\n                        // manage indentation\n                        $ident = '';\n                        for ($y = 1; $y < $row['nlevel']; $y++) {\n                            $ident .= '<i class=\"fa fa-sm fa-caret-right\"></i>&nbsp;';\n                        }\n\n                        // manage right icon\n                        if ($fld['type'] == \"W\") {\n                            $color = '#008000';\n                            $allowed = \"W\";\n                            $title = $LANG['write'];\n                            $label = '\n                            <span class=\"fa-stack\" title=\"'.$LANG['write'].'\" style=\"color:#008000;\">\n                                <i class=\"fa fa-square-o fa-stack-2x\"></i>\n                                <i class=\"fa fa-indent fa-stack-1x\"></i>\n                            </span>\n                            <span class=\"fa-stack\" title=\"'.$LANG['write'].'\" style=\"color:#008000;\">\n                                <i class=\"fa fa-square-o fa-stack-2x\"></i>\n                                <i class=\"fa fa-edit fa-stack-1x\"></i>\n                            </span>\n                            <span class=\"fa-stack\" title=\"'.$LANG['write'].'\" style=\"color:#008000;\">\n                                <i class=\"fa fa-square-o fa-stack-2x\"></i>\n                                <i class=\"fa fa-eraser fa-stack-1x\"></i>\n                            </span>';\n                        } elseif ($fld['type'] == \"ND\") {\n                            $color = '#4E45F7';\n                            $allowed = \"ND\";\n                            $title = $LANG['no_delete'];\n                            $label = '\n                            <span class=\"fa-stack\" title=\"'.$LANG['no_delete'].'\" style=\"color:#4E45F7;\">\n                                <i class=\"fa fa-square-o fa-stack-2x\"></i>\n                                <i class=\"fa fa-indent fa-stack-1x\"></i>\n                            </span>\n                            <span class=\"fa-stack\" title=\"'.$LANG['no_delete'].'\" style=\"color:#4E45F7;\">\n                                <i class=\"fa fa-square-o fa-stack-2x\"></i>\n                                <i class=\"fa fa-edit fa-stack-1x\"></i>\n                            </span>';\n                        } elseif ($fld['type'] == \"NE\") {\n                            $color = '#4E45F7';\n                            $allowed = \"NE\";\n                            $title = $LANG['no_edit'];\n                            $label = '\n                            <span class=\"fa-stack\" title=\"'.$LANG['no_edit'].'\" style=\"color:#4E45F7;\">\n                                <i class=\"fa fa-square-o fa-stack-2x\"></i>\n                                <i class=\"fa fa-indent fa-stack-1x\"></i>\n                            </span>\n                            <span class=\"fa-stack\" title=\"'.$LANG['no_edit'].'\" style=\"color:#4E45F7;\">\n                                <i class=\"fa fa-square-o fa-stack-2x\"></i>\n                                <i class=\"fa fa-eraser fa-stack-1x\"></i>\n                            </span>';\n                        } elseif ($fld['type'] == \"NDNE\") {\n                            $color = '#4E45F7';\n                            $allowed = \"NDNE\";\n                            $title = $LANG['no_edit_no_delete'];\n                            $label = '\n                            <span class=\"fa-stack\" title=\"'.$LANG['no_edit_no_delete'].'\" style=\"color:#4E45F7;\">\n                                <i class=\"fa fa-square-o fa-stack-2x\"></i>\n                                <i class=\"fa fa-indent fa-stack-1x\"></i>\n                            </span>';\n                        } else {\n                            $color = '#FEBC11';\n                            $allowed = \"R\";\n                            $title = $LANG['read'];\n                            $label = '\n                            <span class=\"fa-stack\" title=\"'.$LANG['read'].'\" style=\"color:#ff9000;\">\n                                <i class=\"fa fa-square-o fa-stack-2x\"></i>\n                                <i class=\"fa fa-eye fa-stack-1x\"></i>\n                            </span>';\n                        }\n\n                        $html .= '<tr><td>'.$ident.$row['title'].'</td><td>'.$label.\"</td></tr>\";\n                        break;\n                    }\n                }\n            }\n\n            $html .= '</table><div style=\"margin-top:15px; padding:3px;\" class=\"ui-widget-content ui-state-default ui-corner-all\"><span class=\"fa fa-info\"></span>&nbsp;'.$LANG['folders_not_visible_are_not_displayed'].'</div>';\n\n            $return_values = prepareExchangedData(\n                array(\n                    'html' => $html,\n                    'error' => '',\n                    'login' => $rowUser['login']\n                ),\n                \"encode\"\n            );\n            echo $return_values;\n            break;\n\n        /**\n         * GET LIST OF USERS\n         */\n        case \"get_list_of_users_for_sharing\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\", \"error_text\" => addslashes($LANG['error_not_allowed_to'])), \"encode\");\n                break;\n            }\n\n            $list_users_from = '';\n            $list_users_to = '';\n\n            if (!$_SESSION['is_admin'] && !$_SESSION['user_can_manage_all_users']) {\n                $rows = DB::query(\n                    \"SELECT id, login, name, lastname, gestionnaire, read_only, can_manage_all_users\n                    FROM \".prefix_table(\"users\").\"\n                    WHERE admin = %i AND isAdministratedByRole IN %ls\",\n                    \"0\",\n                    array_filter($_SESSION['user_roles'])\n                );\n            } else {\n                $rows = DB::query(\n                    \"SELECT id, login, name, lastname, gestionnaire, read_only, can_manage_all_users\n                    FROM \".prefix_table(\"users\").\"\n                    WHERE admin = %i\",\n                    \"0\"\n                );\n            }\n\n            foreach ($rows as $record) {\n                $list_users_from .= '<option id=\"share_from-'.$record['id'].'\">'.$record['name'].' '.$record['lastname'].' ['.$record['login'].']</option>';\n                $list_users_to .= '<option id=\"share_to-'.$record['id'].'\">'.$record['name'].' '.$record['lastname'].' ['.$record['login'].']</option>';\n            }\n\n            $return_values = prepareExchangedData(\n                array(\n                    'users_list_from' => $list_users_from,\n                    'users_list_to' => $list_users_to,\n                    'error' => ''\n                ),\n                \"encode\"\n            );\n            echo $return_values;\n\n            break;\n\n        /**\n         * UPDATE USERS RIGHTS BY SHARING\n         */\n        case \"update_users_rights_sharing\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // Check send values\n            if (empty(filter_input(INPUT_POST, 'source_id', FILTER_SANITIZE_NUMBER_INT)) === true\n                || empty(filter_input(INPUT_POST, 'destination_ids', FILTER_SANITIZE_NUMBER_INT)) === true\n            ) {\n                // error\n                exit();\n            }\n\n            // manage other rights\n            /* Possible values: gestionnaire;read_only;can_create_root_folder;personal_folder;can_manage_all_users;admin*/\n            $user_other_rights = explode(';', filter_input(INPUT_POST, 'user_otherrights', FILTER_SANITIZE_STRING));\n\n            foreach (explode(';', filter_input(INPUT_POST, 'destination_ids', FILTER_SANITIZE_STRING)) as $dest_user_id) {\n                // update user\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        'fonction_id' => filter_input(INPUT_POST, 'user_functions', FILTER_SANITIZE_NUMBER_INT),\n                        'isAdministratedByRole' => filter_input(INPUT_POST, 'user_managedby', FILTER_SANITIZE_STRING),\n                        'groupes_visibles' => filter_input(INPUT_POST, 'user_fldallowed', FILTER_SANITIZE_STRING),\n                        'groupes_interdits' => filter_input(INPUT_POST, 'user_fldforbid', FILTER_SANITIZE_STRING),\n                        'gestionnaire' => $user_other_rights[0],\n                        'read_only' => $user_other_rights[1],\n                        'can_create_root_folder' => $user_other_rights[2],\n                        'personal_folder' => $user_other_rights[3],\n                        'can_manage_all_users' => $user_other_rights[4],\n                        'admin' => $user_other_rights[5],\n                        ),\n                    \"id = %i\",\n                    $dest_user_id\n                );\n            }\n            break;\n    }\n// # NEW LOGIN FOR USER HAS BEEN DEFINED ##\n} elseif (!empty(filter_input(INPUT_POST, 'newValue', FILTER_SANITIZE_STRING))) {\n    // Prepare POST variables\n    $value = explode('_', filter_input(INPUT_POST, 'id', FILTER_SANITIZE_STRING));\n    $post_newValue = filter_input(INPUT_POST, 'newValue', FILTER_SANITIZE_STRING);\n\n    if ($value[0] === \"userlanguage\") {\n        $value[0] = \"user_language\";\n        $post_newValue = strtolower($post_newValue);\n    }\n    DB::update(\n        prefix_table(\"users\"),\n        array(\n            $value[0] => $post_newValue\n            ),\n        \"id = %i\",\n        $value[1]\n    );\n    // update LOG\n    logEvents(\n        'user_mngt',\n        'at_user_new_'.$value[0].':'.$value[1],\n        $_SESSION['user_id'],\n        $_SESSION['login'],\n        filter_input(INPUT_POST, 'id', FILTER_SANITIZE_STRING)\n    );\n    // refresh SESSION if requested\n    if ($value[0] === \"treeloadstrategy\") {\n        $_SESSION['user_settings']['treeloadstrategy'] = $post_newValue;\n    } elseif ($value[0] === \"usertimezone\") {\n    // special case for usertimezone where session needs to be updated\n        $_SESSION['user_settings']['usertimezone'] = $post_newValue;\n    } elseif ($value[0] === \"userlanguage\") {\n    // special case for user_language where session needs to be updated\n        $_SESSION['user_settings']['user_language'] = $post_newValue;\n        $_SESSION['user_language'] = $post_newValue;\n    } elseif ($value[0] === \"agses-usercardid\") {\n    // special case for agsescardid where session needs to be updated\n        $_SESSION['user_settings']['agses-usercardid'] = $post_newValue;\n    } elseif ($value[0] === \"email\") {\n    // store email change in session\n        $_SESSION['user_email'] = $post_newValue;\n    }\n    // Display info\n    echo htmlentities($post_newValue, ENT_QUOTES);\n// # ADMIN FOR USER HAS BEEN DEFINED ##\n} elseif (null !== filter_input(INPUT_POST, 'newadmin', FILTER_SANITIZE_NUMBER_INT)) {\n    $id = explode('_', filter_input(INPUT_POST, 'id', FILTER_SANITIZE_STRING));\n    DB::update(\n        prefix_table(\"users\"),\n        array(\n            'admin' => filter_input(INPUT_POST, 'newadmin', FILTER_SANITIZE_NUMBER_INT)\n            ),\n        \"id = %i\",\n        $id[1]\n    );\n    // Display info\n    if (filter_input(INPUT_POST, 'newadmin', FILTER_SANITIZE_NUMBER_INT) === 1) {\n        echo \"Oui\";\n    } else {\n        echo \"Non\";\n    }\n}\n\n/**\n * Return the level of access on a folder\n * @param  string $new_val      New value\n * @param  string $existing_val Current value\n * @return string               Returned index\n */\nfunction evaluate_folder_acces_level($new_val, $existing_val)\n{\n    $levels = array(\n        \"W\" => 4,\n        \"ND\" => 3,\n        \"NE\" => 3,\n        \"NDNE\" => 2,\n        \"R\" => 1\n    );\n\n    if (empty($existing_val)) {\n        $current_level_points = 0;\n    } else {\n        $current_level_points = $levels[$existing_val];\n    }\n    $new_level_points = $levels[$new_val];\n\n    // check if new is > to current one (always keep the highest level)\n    if (($new_val === \"ND\" && $existing_val === \"NE\")\n        ||\n        ($new_val === \"NE\" && $existing_val === \"ND\")\n    ) {\n        return \"NDNE\";\n    } else {\n        if ($current_level_points > $new_level_points) {\n            return  $existing_val;\n        } else {\n            return  $new_val;\n        }\n    }\n}\n", "<?php\n/**\n * @file          users.load.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1) {\n    die('Hacking attempt...');\n}\n\n?>\n\n<script type=\"text/javascript\">\n//<![CDATA[\n\n    $.extend($.expr[\":\"], {\n        \"containsIN\": function(elem, i, match, array) {\n            return (elem.textContent || elem.innerText || \"\").toLowerCase().indexOf((match[3] || \"\").toLowerCase()) >= 0;\n        }\n    });\n\n    // prepare Alphabet\n    var _alphabetSearch = '';\n    $.fn.dataTable.ext.search.push( function ( settings, searchData ) {\n        if ( ! _alphabetSearch ) {\n            return true;\n        }\n        if ( searchData[0].charAt(0) === _alphabetSearch ) {\n            return true;\n        }\n        return false;\n    } );\n\n$(function() {\n    $(\"#tabs\").tabs();\n\n    //Build multiselect box\n    $(\"#user_edit_functions_list, #user_edit_managedby, #user_edit_auth, #user_edit_forbid, #new_user_groups, #new_user_auth_folders, #new_user_forbid_folders\").multiselect({\n        selectedList: 7,\n        minWidth: 550,\n        height: 145,\n        checkAllText: \"<?php echo $LANG['check_all_text']; ?>\",\n        uncheckAllText: \"<?php echo $LANG['uncheck_all_text']; ?>\"\n    });\n    $(\"#new_is_admin_by\").multiselect({\n        selectedList: 7,\n        multiple:false,\n        minWidth: 550,\n        height: 145,\n        checkAllText: \"<?php echo $LANG['check_all_text']; ?>\",\n        uncheckAllText: \"<?php echo $LANG['uncheck_all_text']; ?>\"\n    });\n    $(\"#share_rights_from, #share_rights_to\").multiselect({\n        selectedList: 7,\n        multiple:false,\n        minWidth: 350,\n        height: 145,\n        checkAllText: \"<?php echo $LANG['check_all_text']; ?>\",\n        uncheckAllText: \"<?php echo $LANG['uncheck_all_text']; ?>\"\n    });\n\n    //Launch the datatables pluggin\n    var tableUsers = $(\"#t_users\").dataTable({\n        \"order\": [[ 1, \"asc\" ]],\n        \"ordering\": false,\n        \"pagingType\": \"full_numbers\",\n        \"processing\": true,\n        \"serverSide\": true,\n        \"ajax\": {\n            url: \"sources/datatable/datatable.users.php\",\n            data: function(d) {\n                d.letter = _alphabetSearch\n            }\n        },\n        \"language\": {\n            \"url\": \"includes/language/datatables.<?php echo $_SESSION['user_language']; ?>.txt\"\n        },\n        \"columns\": [\n            {\"width\": \"13%\", className: \"dt-body-left\"},\n            {\"width\": \"10%\"},\n            {\"width\": \"15%\"},\n            {\"width\": \"15%\"},\n            {\"width\": \"20%\"},\n            {\"width\": \"20%\"},\n            null,\n            null,\n            null,\n            null,\n            null,\n            null\n        ]\n    })\n    .on('xhr.dt', function ( e, settings, json, xhr ) {\n        $(\".tip\").tooltipster({multiple: true});\n    } );\n\n    // manage the Alphabet\n    var alphabet = $('<div class=\"alphabet\"/>').append( 'Search: ' );\n    $('<span class=\"clear active\"/>')\n        .data( 'letter', '' )\n        .html( 'None' )\n        .appendTo( alphabet );\n    for ( var i=0 ; i<26 ; i++ ) {\n        var letter = String.fromCharCode( 65 + i );\n\n        $('<span/>')\n            .data( 'letter', letter )\n            .html( letter )\n            .appendTo( alphabet );\n    }\n    alphabet.insertBefore( \"#t_users_alphabet\" );\n    alphabet.on( 'click', 'span', function () {\n        alphabet.find( '.active' ).removeClass( 'active' );\n        $(this).addClass( 'active' );\n\n        _alphabetSearch = $(this).data('letter');\n\n        tableUsers.api().ajax.reload();\n    } );\n\n    // manage the click on toggle icons\n    $(document).on({\n        click: function (event) {\n            $(\"#div_loading\").show();\n            var tmp = $(this).attr('tp').split('-');    //[0]>ID ; [1]>action  ; [2]>NewValue\n\n            // send change to be stored\n            $.post(\n                \"sources/users.queries.php\",\n                {\n                    type    : tmp[1],\n                    value   : tmp[2],\n                    id      : tmp[0],\n                    key        : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    $(\"#div_loading\").hide();\n\n                    // manage not allowed\n                    if (data.error == \"not_allowed\") {\n                       $(\"#div_dialog_message_text\").html(data.error_text);\n                       $(\"#div_dialog_message\").dialog(\"open\");\n                       return false;\n                    }\n\n                    // refresh table content\n                    tableUsers.api().ajax.reload();\n                }\n            );\n        }\n    },\n    \".fa-toggle-off, .fa-toggle-on\"\n    );\n\n    // check if login is available\n    $(\"#new_login\").change(function() {\n        login_exists($(this).val());\n    });\n\n\n    $(\"#change_user_pw_newpw\").simplePassMeter({\n        \"requirements\": {},\n          \"container\": \"#pw_strength\",\n          \"defaultText\" : \"<?php echo $LANG['index_pw_level_txt']; ?>\",\n        \"ratings\": [\n            {\"minScore\": 0,\n                \"className\": \"meterFail\",\n                \"text\": \"<?php echo $LANG['complex_level0']; ?>\"\n            },\n            {\"minScore\": 25,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo $LANG['complex_level1']; ?>\"\n            },\n            {\"minScore\": 50,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo $LANG['complex_level2']; ?>\"\n            },\n            {\"minScore\": 60,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo $LANG['complex_level3']; ?>\"\n            },\n            {\"minScore\": 70,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo $LANG['complex_level4']; ?>\"\n            },\n            {\"minScore\": 80,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo $LANG['complex_level5']; ?>\"\n            },\n            {\"minScore\": 90,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo $LANG['complex_level6']; ?>\"\n            }\n        ]\n    });\n    $(\"#change_user_pw_newpw\").bind({\n        \"score.simplePassMeter\" : function(jQEvent, score) {\n            //$(\"#pw_strength\").val(score);\n        }\n    });\n\n    $(\"#change_user_functions\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 400,\n        title: \"<?php echo $LANG['change_user_functions_title']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['save_button']; ?>\": function() {\n                Change_user_rights(document.getElementById(\"selected_user\").value,\"functions\");\n                $(this).dialog(\"close\");\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    $(\"#change_user_autgroups\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 400,\n        title: \"<?php echo $LANG['change_user_autgroups_title']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['save_button']; ?>\": function() {\n                Change_user_rights(document.getElementById(\"selected_user\").value,\"autgroups\");\n                $(this).dialog(\"close\");\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    $(\"#change_user_forgroups\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 400,\n        title: \"<?php echo $LANG['change_user_forgroups_title']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['save_button']; ?>\": function() {\n                Change_user_rights(document.getElementById(\"selected_user\").value,\"forgroups\");\n                $(this).dialog(\"close\");\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        }\n    });;\n\n    $(\"#change_user_adminby\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 200,\n        title: \"<?php echo $LANG['is_administrated_by_role']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['save_button']; ?>\": function() {\n                $.post(\n                    \"sources/users.queries.php\",\n                    {\n                        type    :\"change_user_adminby\",\n                        userId : $(\"#selected_user\").val(),\n                        isAdministratedByRole : $(\"#user_admin_by\").val(),\n                        key    : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        if ($(\"#user_admin_by\").val() == \"0\") {\n                            $(\"#list_adminby_\"+$(\"#selected_user\").val()).\n                            html(\"<?php echo $LANG['admin_small']; ?>\");\n                        } else {\n                            $(\"#list_adminby_\"+$(\"#selected_user\").val()).\n                            html($(\"#user_admin_by option:selected\").text().match(/\"([^\"]+)\"/)[1]);\n                        }\n                        $(\"#change_user_adminby\").dialog(\"close\");\n                    }\n               )\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    $(\"#add_new_user\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 590,\n        height: 620,\n        title: \"<?php echo $LANG['new_user_title']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['save_button']; ?>\": function() {\n                if ($(\"#new_login\").val() == \"\" || $(\"#new_pwd\").val()==\"\" || $(\"#new_email\").val()==\"\") {\n                    $(\"#add_new_user_error\").show(1).html(\"<?php echo $LANG['error_must_enter_all_fields']; ?>\").delay(1000).fadeOut(1000);\n                } else {\n                    $(\"#add_new_user_info\").show().html(\"<span class=\\'fa fa-cog fa-spin fa-lg\\'></span>&nbsp;<?php echo $LANG['please_wait']; ?>\");\n\n                    // get lists\n                    var forbidFld = \"\", authFld = \"\", groups = \"\";\n                    $(\"#new_user_groups option:selected\").each(function () {\n                        groups += $(this).val() + \";\";\n                    });\n                    $(\"#new_user_auth_folders option:selected\").each(function () {\n                        authFld += $(this).val() + \";\";\n                    });\n                    $(\"#new_user_forbid_folders option:selected\").each(function () {\n                        forbidFld += $(this).val() + \";\";\n                    });\n\n                    //prepare data\n                    var data = '{\"login\":\"'+sanitizeString($('#new_login').val())+'\", '+\n                        '\"name\":\"'+sanitizeString($('#new_name').val())+'\", '+\n                        '\"lastname\":\"'+sanitizeString($('#new_lastname').val())+'\", '+\n                        '\"pw\":\"'+sanitizeString($('#new_pwd').val())+'\", '+\n                        '\"email\":\"'+$(\"#new_email\").val()+'\", '+\n                        '\"admin\":\"'+$(\"#new_admin\").prop(\"checked\")+'\", '+\n                        '\"manager\":\"'+$(\"#new_manager\").prop(\"checked\")+'\", '+\n                        '\"read_only\":\"'+$(\"#new_read_only\").prop(\"checked\")+'\", '+\n                        '\"personal_folder\":\"'+$(\"#new_personal_folder\").prop(\"checked\")+'\", '+\n                        '\"new_folder_role_domain\":\"'+$(\"#new_folder_role_domain\").prop(\"checked\")+'\", '+\n                        '\"domain\":\"'+$('#new_domain').val()+'\", '+\n                        '\"isAdministratedByRole\":\"'+$(\"#new_is_admin_by\").val()+'\", '+\n                        '\"groups\":\"' + groups + '\", '+\n                        '\"allowed_flds\":\"' + authFld + '\", '+\n                        '\"forbidden_flds\":\"' + forbidFld + '\"}';\n\n                    $.post(\n                        \"sources/users.queries.php\",\n                        {\n                            type    :\"add_new_user\",\n                            data     : prepareExchangedData(data, \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                            key    : \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            $(\"#add_new_user_info\").hide().html(\"\");\n                            if (data[0].error == \"no\") {\n                                // clear form fields\n                                $(\"#new_name, #new_lastname, #new_login, #new_pwd, #new_is_admin_by, #new_email, #new_domain\").val(\"\");\n                                $(\"#new_admin, #new_manager, #new_read_only, #new_personal_folder\").prop(\"checked\", false);\n\n                                // refresh table content\n                                tableUsers.api().ajax.reload();\n\n                                $(\"#add_new_user\").dialog(\"close\");\n                            } else {\n                                $(\"#add_new_user_error\").html(data[0].error).show(1).delay(1000).fadeOut(1000);\n                            }\n                        },\n                        \"json\"\n                   )\n                }\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    $(\"#delete_user\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 150,\n        title: \"<?php echo $LANG['admin_action']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['ok']; ?>\": function() {\n                $.post(\n                    \"sources/users.queries.php\",\n                    {\n                        type    : \"delete_user\",\n                        id        : $(\"#delete_user_id\").val(),\n                        action    : $(\"#delete_user_action\").val(),\n                        key        : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        window.location.href = \"index.php?page=manage_users\";\n                    },\n                    \"json\"\n               );\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    $(\"#change_user_pw\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 380,\n        height: 300,\n        title: \"<?php echo $LANG['admin_action']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['pw_generate']; ?>\": function() {\n                $(\"#generated_user_pw\").html(\"\");\n                $(\"#change_user_pw_wait\").show();\n                $.post(\n                        \"sources/main.queries.php\",\n                        {\n                            type       : \"generate_a_password\",\n                            length     : 12,\n                            secure     : true,\n                            symbols    : true,\n                            capitalize : true,\n                            numerals   : true\n                        },\n                        function(data) {\n                            data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                            if (data.error == \"true\") {\n                                $(\"#div_dialog_message_text\").html(data.error_msg);\n                                $(\"#div_dialog_message\").dialog(\"open\");\n                            } else {\n                                $(\"#change_user_pw_newpw_confirm, #change_user_pw_newpw\").val(data.key);\n                                $(\"#generated_user_pw\").text(data.key);\n                                $(\"#generated_user_pw, #generated_user_pw_title\").show();\n                                $(\"#change_user_pw_newpw\").focus();\n                            }\n                            $(\"#change_user_pw_wait\").hide();\n                        }\n                   );\n            },\n            \"<?php echo $LANG['save_button']; ?>\": function() {\n                if ($(\"#change_user_pw_newpw_confirm\").val() === \"\" || $(\"#change_user_pw_newpw\").val() === \"\") {\n                // check if empty\n                    $(\"#change_user_pw_error\").html(\"<?php echo $LANG['error_must_enter_all_fields']; ?>\").show(1).delay(1000).fadeOut(1000);\n                } else if ($(\"#change_user_pw_newpw\").val() === $(\"#change_user_pw_newpw_confirm\").val()) {\n                // check if egual\n                    var data = \"{\\\"new_pw\\\":\\\"\"+sanitizeString($(\"#change_user_pw_newpw\").val())+\"\\\" , \\\"user_id\\\":\\\"\"+$(\"#change_user_pw_id\").val()+\"\\\" , \\\"key\\\":\\\"<?php echo $_SESSION['key']; ?>\\\"}\";\n                    $.post(\n                        \"sources/main.queries.php\",\n                        {\n                            type    : \"change_pw\",\n                            change_pw_origine    : \"admin_change\",\n                            data    : prepareExchangedData(data, \"encode\", \"<?php echo $_SESSION['key']; ?>\")\n                        },\n                        function(data) {\n                            if (data[0].error == \"none\") {\n                                $(\"#change_user_pw_error\").html(\"\").hide();\n                                $(\"#change_user_pw_newpw_confirm, #change_user_pw_newpw\").val(\"\");\n                                $(\"#change_user_pw\").dialog(\"close\");\n                            } else if (data[0].error == \"key_not_conform\") {\n                                $(\"#change_user_pw_error\").html(\"PROTECTION KEY NOT CONFORM!! Try to relog.\");\n                            } else if (data[0].error == \"pwd_hash_not_correct\") {\n                                $(\"#change_user_pw_error\").addClass(\"ui-state-error ui-corner-all\").show().html(\"<span><?php echo $LANG['error_not_allowed_to']; ?></span>\");\n                            } else {\n                                $(\"#change_user_pw_error\").html(\"Something occurs ... no data to work with!\");\n                            }\n                        },\n                        \"json\"\n                   );\n                } else {\n                    $(\"#change_user_pw_error\").html(\"<?php echo $LANG['error_password_confirmation']; ?>\").show(1).delay(1000).fadeOut(1000);\n                }\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(\"#change_user_pw_newpw_confirm, #change_user_pw_newpw\").val(\"\");\n                $(this).dialog(\"close\");\n            }\n        },\n        beforeClose: function( event, ui ) {\n            $(\"#change_user_pw_newpw, #change_user_pw_newpw_confirm, #generated_user_pw\").val(\"\");\n            $(\"#show_generated_pw\").hide();\n        }\n    });\n\n    $(\"#user_logs_dialog\").dialog({\n        bgiframe: false,\n        modal: false,\n        autoOpen: false,\n        width: 850,\n        height: 500,\n        title: \"<?php echo $LANG[\"logs\"]; ?>\",\n        buttons: {\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(\"#span_user_activity_option\").hide();\n                $(\"#activity\").val(0);\n                $(\"#tbody_logs\").empty();\n                $(\"#log_pages\").empty();\n                $(this).dialog(\"close\");\n            }\n        },\n        open: function() {\n            $.post(\n                \"sources/users.queries.php\",\n                {\n                    type                : \"user_log_items\",\n                    page                : $(\"#log_page\").val(),\n                    nb_items_by_page    : $(\"#nb_items_by_page\").val(),\n                    id                  : $(\"#selected_user\").val(),\n                    scope               : 'user_activity'\n                },\n                function(data) {\n                    if (data[0].error == \"no\") {\n                        $(\"#tbody_logs\").empty().append(data[0].table_logs);\n                        $(\"#log_pages\").empty().html(data[0].pages);\n                    }\n                },\n                \"json\"\n           );\n        }\n    });\n\n    $(\"#manager_dialog\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 200,\n        title: \"<?php echo $LANG['admin_action']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    $(\"#user_edit_login_dialog\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 280,\n        title: \"<?php echo $LANG['admin_action']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['save_button']; ?>\": function() {\n                $(\"#user_edit_login_dialog_message\").html(\"<?php echo $LANG['please_wait']; ?>\");\n                $.post(\n                    \"sources/users.queries.php\",\n                    {\n                        type    : \"user_edit_login\",\n                        id      : $(\"#selected_user\").val(),\n                        login   : $(\"#edit_login\").val(),\n                        name    : $(\"#edit_name\").val(),\n                        lastname: $(\"#edit_lastname\").val(),\n                        key     : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        $(\"#name_\"+$(\"#selected_user\").html()).html($(\"#edit_name\").val());\n                        $(\"#lastname_\"+$(\"#selected_user\").val()).html($(\"#edit_lastname\").val());\n                        $(\"#login_\"+$(\"#selected_user\").val()).html($(\"#edit_login\").val());\n                        $(\"#user_edit_login_dialog\").dialog(\"close\");\n                    }\n                );\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        open: function() {\n            $(\"#edit_name\").val($(\"#name_\"+$(\"#selected_user\").val()).html());\n            $(\"#edit_lastname\").val($(\"#lastname_\"+$(\"#selected_user\").val()).html());\n            $(\"#edit_login\").val($(\"#login_\"+$(\"#selected_user\").val()).html());\n        },\n        close: function() {\n            $(\"#user_edit_login_dialog_message\").html(\"\");\n        }\n    });\n\n    var watermark = 'Search a user';\n\n    //init, set watermark text and class\n    $('#search').val(watermark).addClass('watermark');\n\n    //if blur and no value inside, set watermark text and class again.\n    $('#search').blur(function(){\n        if ($(this).val().length == 0){\n            $(this).val(watermark).addClass('watermark');\n        }\n    });\n\n    //if focus and text is watermrk, set it to empty and remove the watermark class\n    $('#search').focus(function(){\n        if ($(this).val() == watermark){\n            $(this).val('').removeClass('watermark');\n        }\n    });\n\n\n    $('input[name=\"search\"]').keyup(function(){\n        var searchterm = $(this).val();\n        if(searchterm.length > 1) {\n            var match = $('tr.data-row:containsIN(\"' + searchterm + '\")');\n            var nomatch = $('tr.data-row:not(:containsIN(\"' + searchterm + '\"))');\n            match.addClass('selected');\n            nomatch.css(\"display\", \"none\");\n        } else {\n            $('tr.data-row').css(\"display\", \"\");\n            $('tr.data-row').removeClass('selected');\n        }\n    });\n\n    $(\"#manager_dialog\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 200,\n        title: \"<?php echo $LANG['admin_action']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    $(\"#user_management_dialog\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 600,\n        height: 550,\n        title: \"<?php echo $LANG['dialog_admin_user_edit_title']; ?>\",\n        open:  function() {\n            $(\"#user_edit_functions_list, #user_edit_managedby, #user_edit_auth, #user_edit_forbid\").empty();\n            $(\".ui-dialog-buttonpane button:contains('<?php echo $LANG['save_button']; ?>')\").button(\"disable\");\n            $.post(\n                \"sources/users.queries.php\",\n                {\n                    type : \"get_user_info\",\n                    id   : $('#user_edit_id').val(),\n                    key  : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    if (data.error == \"no\") {\n                        $(\".ui-dialog-buttonpane button:contains('<?php echo $LANG['save_button']; ?>')\").button(\"enable\");\n\n                        $(\"#user_edit_login\").val(data.log);\n                        $(\"#user_edit_name\").val(data.name);\n                        $(\"#user_edit_lastname\").val(data.lastname);\n                        $(\"#user_edit_email\").val(data.email);\n                        $(\"#user_edit_info\").html(data.info);\n\n                        $(\"#user_edit_functions_list\").append(data.function);\n                        $(\"#user_edit_functions_list\").multiselect('refresh');\n\n                        $(\"#user_edit_managedby\").append(data.managedby);\n                        $(\"#user_edit_managedby\").multiselect({\n                            multiple: false,\n                            header: \"<?php echo $LANG['select']; ?>\",\n                            noneSelectedText: \"<?php echo $LANG['select']; ?>\",\n                            selectedList: 1\n                        }, 'refresh');\n\n                        $(\"#user_edit_auth\").append(data.foldersAllow);\n                        $(\"#user_edit_auth\").multiselect('refresh');\n\n                        $(\"#user_edit_forbid\").append(data.foldersForbid);\n                        $(\"#user_edit_forbid\").multiselect('refresh');\n\n                        $(\"#user_edit_wait\").hide();\n                        $(\"#user_edit_div\").show();\n                    } else {\n                        $(\"#user_edit_error\").html(\"<?php echo $LANG['error_unknown']; ?>\")\n                        $(\"#user_edit_wait\").hide();\n                        $(\"#user_edit_div\").show();\n                    }\n                },\n                \"json\"\n            );\n\n            $(\"#user_edit_error, #user_edit_warning_bottom\").hide().html(\"\");\n        },\n        buttons: {\n            \"<?php echo $LANG['save_button']; ?>\": function() {\n                var functions = managedby = allowFld = forbidFld = action_on_user = \"\";\n                // manage the multiselect boxes\n                $(\"#user_edit_functions_list option:selected\").each(function () {\n                    functions += $(this).val() + \";\";\n                });\n                $(\"#user_edit_managedby option:selected\").each(function () {\n                    managedby = $(this).val();\n                });\n                $(\"#user_edit_auth option:selected\").each(function () {\n                    allowFld += $(this).val() + \";\";\n                });\n                $(\"#user_edit_forbid option:selected\").each(function () {\n                    forbidFld += $(this).val() + \";\";\n                });\n\n                // manage the account status\n                $(\".chk:checked\").each(function() {\n                    if ($(this).val() == \"lock\") action_on_user = \"lock\";\n                    else if ($(this).val() == \"delete\") action_on_user = \"delete\";\n                    else if ($(this).val() == \"unlock\") action_on_user = \"unlock\";\n                });\n\n\n                //prepare data\n                var data = '{\"login\":\"'+sanitizeString($('#user_edit_login').val())+'\", '+\n                    '\"name\":\"'+sanitizeString($('#user_edit_name').val())+'\", '+\n                    '\"lastname\":\"'+sanitizeString($('#user_edit_lastname').val())+'\", '+\n                    '\"email\":\"'+sanitizeString($('#user_edit_email').val())+'\", '+\n                    '\"action_on_user\":\"'+sanitizeString(action_on_user)+'\", '+\n                    '\"functions\":\"'+functions+'\", '+\n                    '\"managedby\":\"'+managedby+'\", '+\n                    '\"allowFld\":\"'+allowFld+'\", '+\n                    '\"forbidFld\":\"'+forbidFld+'\"}';\n\n                $(\"#user_edit_wait\").show();\n                $.post(\n                    \"sources/users.queries.php\",\n                    {\n                        type    : \"store_user_changes\",\n                        id      : $('#user_edit_id').val(),\n                        data    : prepareExchangedData(data, \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key     : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        if (data[0].error == \"no\") {\n\n                        }\n                        // refresh table content\n                        tableUsers.api().ajax.reload();\n                        $(\"#user_management_dialog\").dialog(\"close\");\n                    },\n                    \"json\"\n                );\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(\"#user_edit_error, #user_edit_warning_bottom\").hide().html(\"\");\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n\n    $(\"#share_rights_dialog\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 600,\n        height: 400,\n        title: \"<?php echo $LANG['share_user_rights']; ?>\",\n        open:  function() {\n            $(\".ui-dialog-buttonpane button:contains('<?php echo $LANG['save_button']; ?>')\").button(\"disable\");\n            $.post(\n                \"sources/users.queries.php\",\n                {\n                    type : \"get_list_of_users_for_sharing\",\n                    key  : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    if (data.error === \"\") {\n                        $(\".ui-dialog-buttonpane button:contains('<?php echo $LANG['save_button']; ?>')\").button(\"enable\");\n\n                        $(\"#share_rights_from\").append(data.users_list_from);\n                        $(\"#share_rights_from\").multiselect({\n                            multiple: false,\n                            header: \"<?php echo $LANG['select']; ?>\",\n                            noneSelectedText: \"<?php echo $LANG['select']; ?>\",\n                            selectedList: 1,\n                            maxWidth: \"300px;\"\n                        }, 'refresh');\n\n                        $(\"#share_rights_to\").append(data.users_list_to);\n                        $(\"#share_rights_to\").multiselect({\n                            multiple: true,\n                            header: \"<?php echo $LANG['select']; ?>\",\n                            noneSelectedText: \"<?php echo $LANG['select']; ?>\",\n                            selectedList: 7,\n                            maxWidth: \"300px;\"\n                        }, 'refresh');\n\n                        get_user_rights();\n                    } else {\n                        $(\"#share_rights_dialog_error\").html(\"<?php echo $LANG['error_unknown']; ?>\");\n                    }\n                }\n            );\n        },\n        close:  function() {\n            $(\"#share_rights_from, #share_rights_to\").empty();\n            $(\"#share_rights_details_1, share_rights_details_2, share_rights_details_3, share_rights_details_4\").html(\"\");\n            $(\"#share_rights_details_ids_1, #share_rights_details_ids_2, #share_rights_details_ids_3, #share_rights_details_ids_4\").val(\"\");\n        },\n        buttons: {\n            \"<?php echo $LANG['save_button']; ?>\": function() {\n                $(\"#share_rights_dialog_msg\").html(\"<?php echo '<i class=\\\"fa fa-cog fa-spin fa-2x\\\"></i>&nbsp;'.$LANG['please_wait']; ?>\").show();\n\n                // destination users\n                var destination_ids = '';\n                $(\"#share_rights_to option:selected\").each(function () {\n                    if ($(this).val() !== $(\"#share_rights_from\").val()) {\n                        if (destination_ids === \"\") {\n                            destination_ids = $(this).attr('id').split('-')[1];\n                        } else {\n                            destination_ids += \";\" + $(this).attr('id').split('-')[1];\n                        }\n                    }\n                });\n\n                if (destination_ids === \"\") {\n                    $(\"#share_rights_dialog_msg\").html(\"\").hide();\n                    return false;\n                }\n\n                $.post(\n                    \"sources/users.queries.php\",\n                    {\n                        type            : \"update_users_rights_sharing\",\n                        source_id       : $(\"#share_rights_from option:selected\").attr('id').split('-')[1],\n                        destination_ids : destination_ids,\n                        user_functions  : $(\"#share_rights_details_ids_1\").val(),\n                        user_managedby  : $(\"#share_rights_details_ids_2\").val(),\n                        user_fldallowed : $(\"#share_rights_details_ids_3\").val(),\n                        user_fldforbid  : $(\"#share_rights_details_ids_4\").val(),\n                        user_otherrights: $(\"#share_rights_details_other\").val(),\n                        key             : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        $(\"#share_rights_dialog_msg\").hide();\n                        $(\"#share_rights_from\").empty();\n                        $(\"#share_rights_to option:selected\").prop(\"selected\", false);\n\n                        // refresh table content\n                        tableUsers.api().ajax.reload();\n\n                        // unselect destination users\n                        $(\"#share_rights_to\").multiselect(\"uncheckAll\");\n\n                        $(\"#share_rights_dialog_msg\").html(\"<?php echo '<i class=\\\"fa fa-check-circle fa-2x mi-green\\\"></i>&nbsp;'.$LANG['alert_message_done']; ?>\").show(0).delay(2000).hide(0);\n                    }\n                );\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n\n    $(\"#user_folders_rights_dialog\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 380,\n        height: 600,\n        title: \"<?php echo $LANG['user_s_rights_on_folders']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['close']; ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        open: function() {\n            $(\"#user_folders_rights_dialog_wait\").show();\n            $(\"#user_folders_rights_dialog_txt\").html(\"\");\n            $.post(\n                \"sources/users.queries.php\",\n                {\n                    type    : \"user_folders_rights\",\n                    id      : $('#user_folders_rights_dialog_id').val(),\n                    key     : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    $(\"#user_folders_rights_dialog_txt\").html(data.html);\n                    $(\"#user_folders_rights_dialog_wait\").hide();\n                }\n            );\n        }\n    });\n});\n\n/*\n* Adds some warnings when decision is to delete an account\n*/\nfunction confirmDeletion()\n{\n    if ($(\"#account_delete\").prop(\"checked\") === true) {\n        if ($(\"#confirm_deletion\").val() == \"\") {\n            $(\"#account_delete\").prop(\"checked\", false);\n            $(\"#confirm_deletion\").val(\"1\");\n            $(\"#user_edit_error\").show().html(\"<?php echo $LANG['user_info_delete']; ?>\");\n        } else {\n            $(\"#user_edit_error\").hide().html(\"\");\n            $(\"#user_edit_warning_bottom\").show().html(\"<?php echo $LANG['user_info_delete_warning']; ?>\");\n        }\n    } else {\n        $(\"#confirm_deletion\").val(\"\");\n        $(\"#user_edit_error, #user_edit_warning_bottom\").hide().html(\"\");\n        $(\"#user_edit_deletion_warning\").remove();\n    }\n}\n\nfunction pwGenerate(elem)\n{\n    console.log(\">> \"+elem);\n    $.post(\n        \"sources/main.queries.php\",\n        {\n            type    : \"generate_a_password\",\n            size    : Math.floor((8-5)*Math.random()) + 6,\n            num        : true,\n            maj        : true,\n            symb    : false,\n            fixed_elem    : 1,\n            elem    : elem,\n            force    : false\n        },\n        function(data) {\n            data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            if (data.error === \"true\") {\n                $(\"#div_dialog_message_text\").html(data.error_msg);\n                $(\"#div_dialog_message\").dialog(\"open\");\n            } else {\n                $(\"#\"+elem).val(data.key).focus();\n            }\n        }\n   );\n}\n\nfunction action_on_user(id, action)\n{\n    if (action == \"lock\") {\n        $(\"#user_action_html\").html(\"<?php echo $LANG['confirm_lock_account']; ?>\");\n    } else {\n        $(\"#user_action_html\").html(\"<?php echo $LANG['confirm_del_account']; ?>\");\n    }\n    $(\"#delete_user_action\").val(action);\n    $(\"#delete_user_login\").val($(\"#login_\"+id).text());\n    $(\"#delete_user_id\").val(id);\n    $(\"#delete_user_show_login\").html($(\"#login_\"+id).text());\n    $(\"#delete_user\").dialog(\"open\");\n}\n\nfunction mdp_user(id)\n{\n    $(\"#generated_user_pw_title, #generated_user_pw\").hide();\n    $(\"#change_user_pw_id\").val(id);\n    $(\"#change_user_pw_show_login\").html($(\"#user_login_\"+id).text());\n    $(\"#change_user_pw\").dialog(\"open\");\n}\n\nfunction ChangeUserParm(id, parameter, new_value)\n{\n    $.post(\"sources/users.queries.php\",\n        {\n            type    : parameter,\n            value   : new_value,\n            id      : id,\n            key        : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            $(\"#div_dialog_message_text\").html(\"<div style=\\\"font-size:16px; text-align:center;\\\"><span class=\\\"ui-icon ui-icon-info\\\" style=\\\"float: left; margin-right: .3em;\\\"></span><?php echo $LANG['alert_message_done']; ?></div>\");$(\"#div_dialog_message\").dialog(\"open\");\n\n        }\n   );\n}\n\nfunction Open_Div_Change(id,type)\n{\n    $(\"#div_loading\").show();\n    $.post(\"sources/users.queries.php\",\n        {\n            type    : \"open_div_\"+type,\n            id      : id,\n            key        : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            data = $.parseJSON(data);\n            $(\"#div_loading\").hide();\n            if (type == \"functions\") {\n                $(\"#change_user_functions_list\").html(data.text);\n                $(\"#selected_user\").val(id);\n                $(\"#change_user_functions\").dialog(\"open\");\n            } else if (type == \"autgroups\") {\n                $(\"#change_user_autgroups_list\").html(data.text);\n                $(\"#selected_user\").val(id);\n                $(\"#change_user_autgroups\").dialog(\"open\");\n            } else if (type == \"forgroups\") {\n                $(\"#change_user_forgroups_list\").html(data.text);\n                $(\"#selected_user\").val(id);\n                $(\"#change_user_forgroups\").dialog(\"open\");\n            }\n        }\n   );\n}\n\nfunction ChangeUSerAdminBy(id)\n{\n    $(\"#selected_user\").val(id);\n    $(\"#change_user_adminby\").dialog(\"open\");\n}\n\nfunction Change_user_rights(id,type)\n{\n    var list = \"\";\n    if (type == \"functions\") var form = document.forms.tmp_functions;\n    if (type == \"autgroups\") var form = document.forms.tmp_autgroups;\n    if (type == \"forgroups\") var form = document.forms.tmp_forgroups;\n\n    $(\"#div_loading\").show();\n\n    for (i=0 ; i<= form.length-1 ; i++) {\n        if (form[i].type == \"checkbox\" && form[i].checked) {\n            function_id = form[i].id.split(\"-\")\n            if (list == \"\") list = function_id[1];\n            else list = list + \";\" + function_id[1];\n        }\n    }\n\n    $.post(\"sources/users.queries.php\",\n        {\n            type    : \"change_user_\"+type,\n            id      : id,\n            list    : list,\n            key     : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            if (type == \"functions\") {\n                $(\"#list_function_user_\"+id).html(data[0].text);\n            } else if (type == \"autgroups\") {\n                $(\"#list_autgroups_user_\"+id).html(data[0].text);\n            } else if (type == \"forgroups\") {\n                $(\"#list_forgroups_user_\"+id).html(data[0].text);\n            }\n            $(\"#div_loading\").hide();\n        },\n        \"json\"\n   );\n}\n\nfunction unlock_user(id)\n{\n    $.post(\"sources/users.queries.php\",\n        {\n            type    : \"unlock_account\",\n            id      : id,\n            key        : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            document.form_utilisateurs.submit();\n        }\n   );\n};\n\nfunction check_domain(email)\n{\n    $(\"#ajax_loader_new_mail\").show();\n\n    //extract domain from email\n    var atsign = email.substring(0,email.lastIndexOf(\"@\")+1);\n    var domain = email.substring(atsign.length,email.length+1);\n\n    //check if domain exists\n    $.post(\"sources/users.queries.php\",\n        {\n            type        : \"check_domain\",\n            domain      : domain\n        },\n        function(data) {\n            data = $.parseJSON(data);\n            $(\"#new_folder_role_domain\").attr(\"disabled\", \"disabled\");\n            if (data.folder == \"not_exists\" && data.role == \"not_exists\" && domain !=\"\") {\n                $(\"#new_folder_role_domain\").attr(\"disabled\", \"\");\n                $(\"#auto_create_folder_role_span\").html(domain);\n                $(\"#new_domain\").val(domain);\n                $(\"#auto_create_folder_role\").css('visibility', 'visible');\n            } else {\n                $(\"#auto_create_folder_role\").css('visibility', 'hidden');\n            }\n            $(\"#ajax_loader_new_mail\").hide();\n        }\n   );\n}\n\nfunction displayLogs(page, scope)\n{\n    $.post(\n        \"sources/users.queries.php\",\n        {\n            type                : \"user_log_items\",\n            page                : page,\n            nb_items_by_page    : $(\"#nb_items_by_page\").val(),\n            filter              : $(\"#activity_filter\").val(),\n            id                  : $(\"#selected_user\").val(),\n            scope               : scope\n        },\n        function(data) {console.log(\">>\" + data[0].table_logs);\n            if (data[0].error == \"no\") {\n                $(\"#tbody_logs\").empty().append(data[0].table_logs);\n                $(\"#log_pages\").empty().append(data[0].pages);\n            }\n        },\n        \"json\"\n   );\n}\n\nfunction user_action_log_items(id)\n{\n    $(\"#selected_user\").val(id);\n    $(\"#user_logs_dialog\").dialog(\"open\");\n}\n\nfunction user_action_ga_code(id)\n{\n    $(\"#div_loading\").show();\n    $.post(\n    \"sources/main.queries.php\",\n    {\n        type          : \"ga_generate_qr\",\n        id            : id,\n        demand_origin : \"users_management_list\",\n        send_email    : \"1\"\n    },\n    function(data) {\n        if (data[0].error == \"0\") {\n            $(\"#div_dialog_message_text\")\n                .html(\"<div><?php echo $LANG['share_sent_ok']; ?></div>\")\n                .addClass(\"ui-state-highlight ui-corner-all\");\n        } else {\n            if (data[0].error == \"no_email\") {\n                $(\"#div_dialog_message_text\").html(\"<?php echo $LANG['error_no_email']; ?>\");\n            } else if (data[0].error == \"no_user\") {\n                $(\"#div_dialog_message_text\").html(\"<?php echo $LANG['error_no_user']; ?>\");\n            } else if (data[0].error == \"not_allowed\") {\n                $(\"#div_dialog_message_text\").html(\"<?php echo $LANG['error_not_allowed_to']; ?>\");\n            }\n            $(\"#div_dialog_message_text\").addClass(\"ui-state-error ui-corner-all\");\n        }\n        $(\"#div_dialog_message\").dialog('open');\n        $(\"#div_loading\").hide();\n    },\n    \"json\"\n    );\n}\n\nfunction user_edit_login(id)\n{\n    $(\"#selected_user\").val(id);\n    $(\"#user_edit_login_dialog\").dialog(\"open\");\n}\n\n\n/**\n *\n * @access public\n * @return void\n **/\nfunction migrate_pf(user_id)\n{\n    $(\"#migrate_pf_admin_id\").val(user_id);\n    $('#migrate_pf_dialog').dialog('open');\n}\n\n/**\n*\n*/\nfunction user_edit(user_id)\n{\n    $(\"#user_edit_wait\").show();\n    $(\"#user_edit_div\").hide();\n    $(\"#user_edit_id\").val(user_id);\n    $('#user_management_dialog').dialog('open');\n}\n\n\n/**\n*\n*/\nfunction get_user_rights()\n{\n    if ($(\"#share_rights_from option:selected\").length === 0) return false;\n\n    var user_id = $(\"#share_rights_from option:selected\").attr('id').split('-')[1]\n    $.post(\n        \"sources/users.queries.php\",\n        {\n            type : \"get_user_info\",\n            id   : user_id,\n            key  : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            if (data.error == \"no\") {\n                $(\"#share_rights_details\").show();\n\n                // functions\n                var tmp = \"\", tmp2 = \"\";\n                var my_json = $.parseJSON(data.share_function);\n                $.each(my_json, function(k, v) {\n                    if (v['id'] !== \"\") {\n                        if (tmp === \"\") {\n                            tmp = v['title'];\n                            tmp2 = v['id'];\n                        } else {\n                            tmp += \" ; \" + v['title'];\n                            tmp2 += \";\"+v['id'];\n                        }\n                    }\n                });\n                $(\"#share_rights_details_1\").html(tmp);\n                $(\"#share_rights_details_ids_1\").val(tmp2);\n\n                // managed by\n                tmp = \"\";\n                tmp2 = \"\";\n                my_json = $.parseJSON(data.share_managedby);\n                $.each(my_json, function(k, v) {\n                    if (v['id'] !== \"\") {\n                        if (tmp === \"\") {\n                            tmp = v['title'];\n                            tmp2 = v['id'];\n                        } else {\n                            tmp += \" ; \" + v['title'];\n                            tmp2 += \";\"+v['id'];\n                        }\n                    }\n                });\n                $(\"#share_rights_details_2\").html(tmp);\n                $(\"#share_rights_details_ids_2\").val(tmp2);\n\n                // forbidden\n                tmp = \"\";\n                tmp2 = \"\";\n                my_json = $.parseJSON(data.share_forbidden);\n                $.each(my_json, function(k, v) {\n                    if (v['id'] !== \"\") {\n                        if (tmp === \"\") {\n                            tmp = v['title'];\n                            tmp2 = v['id'];\n                        } else {\n                            tmp += \" ; \" + v['title'];\n                            tmp2 += \";\"+v['id'];\n                        }\n                    }\n                });\n                $(\"#share_rights_details_4\").html(tmp === \"\" ? \"<?php echo $LANG['none']; ?>\" : tmp);\n                $(\"#share_rights_details_ids_4\").val(tmp2);\n\n                // allowed\n                tmp = \"\";\n                tmp2 = \"\";\n                my_json = $.parseJSON(data.share_allowed);\n                $.each(my_json, function(k, v) {\n                    if (v['id'] !== \"\") {\n                        if (tmp === \"\") {\n                            tmp = v['title'];\n                            tmp2 = v['id'];\n                        } else {\n                            tmp += \" ; \" + v['title'];\n                            tmp2 += \";\"+v['id'];\n                        }\n                    }\n                });\n                $(\"#share_rights_details_3\").html(tmp === \"\" ? \"<?php echo $LANG['none']; ?>\" : tmp);\n                $(\"#share_rights_details_ids_3\").val(tmp2);\n\n                $(\"#share_rights_details_other\").val(data.gestionnaire + \";\" + data.read_only + \";\" + data.can_create_root_folder + \";\" + data.personal_folder + \";\" + data.can_manage_all_users + \";\" + data.admin);\n            }\n        },\n        \"json\"\n    );\n}\n\n/**\n* SHOW USER FOLDERS\n*/\nfunction user_folders_rights(user_id)\n{\n    $(\"#user_folders_rights_dialog_id\").val(user_id);\n    $('#user_folders_rights_dialog').dialog('open');\n}\n\n/**\n *\n */\n function show_user_log(action)\n {\n     if (action == \"user_activity\") {\n         $(\"#span_user_activity_option\").show();\n         displayLogs(1,'user_activity');\n     } else {\n         $(\"#span_user_activity_option\").hide();\n         displayLogs(1,'user_mngt');\n     }\n}\n\n/**\n* permits to create an automatic login based upon name and lastname\n*/\nfunction loginCreation()\n{\n    $(\"#new_login\").val($(\"#new_name\").val().toLowerCase().replace(/ /g,\"\")+\".\"+$(\"#new_lastname\").val().toLowerCase().replace(/ /g,\"\"));\n    login_exists($(\"#new_login\").val());\n}\n\n/**\n* Launches a query to identify if login exists\n*/\nfunction login_exists(text) {\n    $.post(\n        \"sources/users.queries.php\",\n        {\n            type    : \"is_login_available\",\n            login   : text,\n            key     : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            if (data[0].error === \"\") {\n                if (data[0].exists === \"0\") {\n                    $(\"#new_login_status\").html('<span class=\"fa fa-check mi-green\"></span>').show();\n                } else {\n                    $(\"#new_login_status\").html('<span class=\"fa fa-minus-circle mi-red\"></span>').show();\n                }\n            }\n        },\n        \"json\"\n    );\n}\n\n\nfunction htmlspecialchars_decode (string, quote_style)\n{\n    if (string != null && string != \"\") {\n        // Convert special HTML entities back to characters\n        var optTemp = 0, i = 0, noquotes= false;\n        if (typeof quote_style === 'undefined') {        quote_style = 2;\n        }\n        string = string.toString().replace(/&lt;/g, '<').replace(/&gt;/g, '>');\n        var OPTS = {\n            'ENT_NOQUOTES': 0,\n            'ENT_HTML_QUOTE_SINGLE' : 1,\n            'ENT_HTML_QUOTE_DOUBLE' : 2,\n            'ENT_COMPAT': 2,\n            'ENT_QUOTES': 3,\n            'ENT_IGNORE' : 4\n        };\n        if (quote_style === 0) {\n            noquotes = true;\n        }\n        if (typeof quote_style !== 'number') { // Allow for a single string or an array of string flags\n            quote_style = [].concat(quote_style);\n            for (i=0; i < quote_style.length; i++) {\n                // Resolve string input to bitwise e.g. 'PATHINFO_EXTENSION' becomes 4\n                if (OPTS[quote_style[i]] === 0) {\n                    noquotes = true;\n                } else if (OPTS[quote_style[i]]) {\n                    optTemp = optTemp | OPTS[quote_style[i]];\n                }\n            }\n            quote_style = optTemp;\n        }\n        if (quote_style & OPTS.ENT_HTML_QUOTE_SINGLE) {\n            string = string.replace(/&#0*39;/g, \"'\"); // PHP doesn't currently escape if more than one 0, but it should\n            // string = string.replace(/&apos;|&#x0*27;/g, \"'\"); // This would also be useful here, but not a part of PHP\n        }\n        if (!noquotes) {\n            string = string.replace(/&quot;/g, '\"');\n        }\n\n        string = string.replace(/&nbsp;/g, ' ');\n\n        // Put this in last place to avoid escape being double-decoded    string = string.replace(/&amp;/g, '&');\n    }\n\n    return string;\n}\n//]]>\n</script>\n"], "fixing_code": ["<?php\n/**\n *\n * @file          users.queries.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link        http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nrequire_once 'SecureHandler.php';\nsession_start();\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1 ||\n    !isset($_SESSION['user_id']) || empty($_SESSION['user_id']) ||\n    !isset($_SESSION['key']) || empty($_SESSION['key'])\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/include.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/checks.php';\n$filtered_newvalue = filter_input(INPUT_POST, 'newValue', FILTER_SANITIZE_STRING);\nif (!checkUser($_SESSION['user_id'], $_SESSION['key'], \"manage_users\")) {\n    if (null === $filtered_newvalue) {\n        $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n        include $SETTINGS['cpassman_dir'].'/error.php';\n        exit();\n    } else {\n        $filtered_newvalue = filter_input(INPUT_POST, 'newValue', FILTER_SANITIZE_STRING);\n        // Do special check to allow user to change attributes of his profile\n        if (empty($filtered_newvalue) || !checkUser($_SESSION['user_id'], $_SESSION['key'], \"profile\")) {\n            $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n            include $SETTINGS['cpassman_dir'].'/error.php';\n            exit();\n        }\n    }\n}\n\n\ninclude $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\nheader(\"Content-type: text/html; charset=utf-8\");\nrequire_once $SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n// Connect to mysql server\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n$pass = defuse_return_decrypted($pass);\nDB::$host = $server;\nDB::$user = $user;\nDB::$password = $pass;\nDB::$dbName = $database;\nDB::$port = $port;\nDB::$encoding = $encoding;\nDB::$error_handler = true;\n$link = mysqli_connect($server, $user, $pass, $database, $port);\n$link->set_charset($encoding);\n\n//Load Tree\n$tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n$tree->register();\n$tree = new Tree\\NestedTree\\NestedTree($pre.'nested_tree', 'id', 'parent_id', 'title');\n\nif (null !== filter_input(INPUT_POST, 'type', FILTER_SANITIZE_STRING)) {\n    switch (filter_input(INPUT_POST, 'type', FILTER_SANITIZE_STRING)) {\n        /**\n         * ADD NEW USER\n         */\n        case \"add_new_user\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData(\n                filter_input(INPUT_POST, 'data', FILTER_SANITIZE_STRING),\n                \"decode\"\n            );\n\n            // Prepare variables\n            $login = noHTML(htmlspecialchars_decode($dataReceived['login']));\n            $name = noHTML(htmlspecialchars_decode($dataReceived['name']));\n            $lastname = noHTML(htmlspecialchars_decode($dataReceived['lastname']));\n            $pw = htmlspecialchars_decode($dataReceived['pw']);\n\n            // Empty user\n            if (mysqli_escape_string($link, htmlspecialchars_decode($login)) == \"\") {\n                echo '[ { \"error\" : \"'.addslashes($LANG['error_empty_data']).'\" } ]';\n                break;\n            }\n            // Check if user already exists\n            $data = DB::query(\n                \"SELECT id, fonction_id, groupes_interdits, groupes_visibles FROM \".prefix_table(\"users\").\"\n                WHERE login = %s\",\n                mysqli_escape_string($link, stripslashes($login))\n            );\n\n            if (DB::count() == 0) {\n                // check if admin role is set. If yes then check if originator is allowed\n                if ($dataReceived['admin'] === \"true\" && $_SESSION['user_admin'] !== \"1\") {\n                    echo '[ { \"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\" } ]';\n                    break;\n                }\n\n                // Add user in DB\n                DB::insert(\n                    prefix_table(\"users\"),\n                    array(\n                        'login' => $login,\n                        'name' => $name,\n                        'lastname' => $lastname,\n                        'pw' => bCrypt(stringUtf8Decode($pw), COST),\n                        'email' => $dataReceived['email'],\n                        'admin' => $dataReceived['admin'] == \"true\" ? '1' : '0',\n                        'gestionnaire' => $dataReceived['manager'] == \"true\" ? '1' : '0',\n                        'read_only' => $dataReceived['read_only'] == \"true\" ? '1' : '0',\n                        'personal_folder' => $dataReceived['personal_folder'] == \"true\" ? '1' : '0',\n                        'user_language' => $SETTINGS['default_language'],\n                        'fonction_id' => $dataReceived['groups'],\n                        'groupes_interdits' => $dataReceived['forbidden_flds'],\n                        'groupes_visibles' => $dataReceived['allowed_flds'],\n                        'isAdministratedByRole' => $dataReceived['isAdministratedByRole'] === \"null\" ? \"0\" : $dataReceived['isAdministratedByRole'],\n                        'encrypted_psk' => ''\n                        )\n                );\n                $new_user_id = DB::insertId();\n                // Create personnal folder\n                if ($dataReceived['personal_folder'] === \"true\") {\n                    DB::insert(\n                        prefix_table(\"nested_tree\"),\n                        array(\n                            'parent_id' => '0',\n                            'title' => $new_user_id,\n                            'bloquer_creation' => '0',\n                            'bloquer_modification' => '0',\n                            'personal_folder' => '1'\n                            )\n                    );\n                    $tree->rebuild();\n                }\n                // Create folder and role for domain\n                if ($dataReceived['new_folder_role_domain'] == \"true\") {\n                    // create folder\n                    DB::insert(\n                        prefix_table(\"nested_tree\"),\n                        array(\n                            'parent_id' => 0,\n                            'title' => mysqli_escape_string($link, stripslashes($dataReceived['domain'])),\n                            'personal_folder' => 0,\n                            'renewal_period' => 0,\n                            'bloquer_creation' => '0',\n                            'bloquer_modification' => '0'\n                            )\n                    );\n                    $new_folder_id = DB::insertId();\n                    // Add complexity\n                    DB::insert(\n                        prefix_table(\"misc\"),\n                        array(\n                            'type' => 'complex',\n                            'intitule' => $new_folder_id,\n                            'valeur' => 50\n                            )\n                    );\n                    // Create role\n                    DB::insert(\n                        prefix_table(\"roles_title\"),\n                        array(\n                            'title' => mysqli_escape_string($link, stripslashes(($dataReceived['domain'])))\n                            )\n                    );\n                    $new_role_id = DB::insertId();\n                    // Associate new role to new folder\n                    DB::insert(\n                        prefix_table(\"roles_values\"),\n                        array(\n                            'folder_id' => $new_folder_id,\n                            'role_id' => $new_role_id\n                            )\n                    );\n                    // Add the new user to this role\n                    DB::update(\n                        prefix_table(\"users\"),\n                        array(\n                            'fonction_id' => is_int($new_role_id)\n                            ),\n                        \"id=%i\",\n                        $new_user_id\n                    );\n                    // rebuild tree\n                    $tree->rebuild();\n                }\n                // get links url\n                if (empty($SETTINGS['email_server_url'])) {\n                    $SETTINGS['email_server_url'] = $SETTINGS['cpassman_url'];\n                }\n                // Send email to new user\n                sendEmail(\n                    $LANG['email_subject_new_user'],\n                    str_replace(array('#tp_login#', '#tp_pw#', '#tp_link#'), array(\" \".addslashes($login), addslashes($pw), $SETTINGS['email_server_url']), $LANG['email_new_user_mail']),\n                    $dataReceived['email']\n                );\n                // update LOG\n                logEvents('user_mngt', 'at_user_added', $_SESSION['user_id'], $_SESSION['login'], $new_user_id);\n\n                echo '[ { \"error\" : \"no\" } ]';\n            } else {\n                echo '[ { \"error\" : \"'.addslashes($LANG['error_user_exists']).'\" } ]';\n            }\n            break;\n\n        /**\n         * Delete the user\n         */\n        case \"delete_user\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // Prepare post variables\n            $post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);\n\n            // Get info about user to delete\n            $data_user = DB::queryfirstrow(\n                \"SELECT admin, isAdministratedByRole FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                $post_id\n            );\n\n            // Is this user allowed to do this?\n            if ($_SESSION['is_admin'] === \"1\"\n                || (in_array($data_user['isAdministratedByRole'], $_SESSION['user_roles']))\n                || ($_SESSION['user_can_manage_all_users'] === \"1\" && $data_user['admin'] !== \"1\")\n            ) {\n                if (filter_input(INPUT_POST, 'action', FILTER_SANITIZE_STRING) == \"delete\") {\n                    // delete user in database\n                    DB::delete(\n                        prefix_table(\"users\"),\n                        \"id = %i\",\n                        $post_id\n                    );\n                    // delete personal folder and subfolders\n                    $data = DB::queryfirstrow(\n                        \"SELECT id FROM \".prefix_table(\"nested_tree\").\"\n                        WHERE title = %s AND personal_folder = %i\",\n                        $post_id,\n                        \"1\"\n                    );\n                    // Get through each subfolder\n                    if (!empty($data['id'])) {\n                        $folders = $tree->getDescendants($data['id'], true);\n                        foreach ($folders as $folder) {\n                            // delete folder\n                            DB::delete(prefix_table(\"nested_tree\"), \"id = %i AND personal_folder = %i\", $folder->id, \"1\");\n                            // delete items & logs\n                            $items = DB::query(\n                                \"SELECT id FROM \".prefix_table(\"items\").\"\n                                WHERE id_tree=%i AND perso = %i\",\n                                $folder->id,\n                                \"1\"\n                            );\n                            foreach ($items as $item) {\n                                // Delete item\n                                DB::delete(prefix_table(\"items\"), \"id = %i\", $item['id']);\n                                // log\n                                DB::delete(prefix_table(\"log_items\"), \"id_item = %i\", $item['id']);\n                            }\n                        }\n                        // rebuild tree\n                        $tree = new Tree\\NestedTree\\NestedTree($pre.'nested_tree', 'id', 'parent_id', 'title');\n                        $tree->rebuild();\n                    }\n                    // update LOG\n                    logEvents('user_mngt', 'at_user_deleted', $_SESSION['user_id'], $_SESSION['login'], $post_id);\n                } else {\n                    // lock user in database\n                    DB::update(\n                        prefix_table(\"users\"),\n                        array(\n                            'disabled' => 1,\n                            'key_tempo' => \"\"\n                            ),\n                        \"id=%i\",\n                        $post_id\n                    );\n                    // update LOG\n                    logEvents('user_mngt', 'at_user_locked', $_SESSION['user_id'], $_SESSION['login'], $post_id);\n                }\n                echo '[ { \"error\" : \"no\" } ]';\n            } else {\n                echo '[ { \"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\" } ]';\n            }\n            break;\n\n        /**\n         * UPDATE CAN CREATE ROOT FOLDER RIGHT\n         */\n        case \"can_create_root_folder\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\", \"error_text\" => addslashes($LANG['error_not_allowed_to'])), \"encode\");\n                break;\n            }\n\n            $post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);\n\n            // Get info about user to delete\n            $data_user = DB::queryfirstrow(\n                \"SELECT admin, isAdministratedByRole FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                $post_id\n            );\n\n            // Is this user allowed to do this?\n            if ($_SESSION['is_admin'] === \"1\"\n                || (in_array($data_user['isAdministratedByRole'], $_SESSION['user_roles']))\n                || ($_SESSION['user_can_manage_all_users'] === \"1\" && $data_user['admin'] !== \"1\")\n            ) {\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        'can_create_root_folder' => filter_input(INPUT_POST, 'value', FILTER_SANITIZE_STRING)\n                        ),\n                    \"id = %i\",\n                    $post_id\n                );\n                echo prepareExchangedData(array(\"error\" => \"\"), \"encode\");\n            } else {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\"), \"encode\");\n            }\n            break;\n        /**\n         * UPDATE ADMIN RIGHTS FOR USER\n         */\n        case \"admin\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)\n                || $_SESSION['is_admin'] !== \"1\"\n            ) {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\", \"error_text\" => addslashes($LANG['error_not_allowed_to'])), \"encode\");\n                exit();\n            }\n\n            $post_value = filter_input(INPUT_POST, 'value', FILTER_SANITIZE_NUMBER_INT);\n            $post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);\n\n            // Get info about user to delete\n            $data_user = DB::queryfirstrow(\n                \"SELECT admin, isAdministratedByRole FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                $post_id\n            );\n\n            // Is this user allowed to do this?\n            if ($_SESSION['is_admin'] === \"1\"\n                || (in_array($data_user['isAdministratedByRole'], $_SESSION['user_roles']))\n                || ($_SESSION['user_can_manage_all_users'] === \"1\" && $data_user['admin'] !== \"1\")\n            ) {\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        'admin' => $post_value,\n                        'gestionnaire' => $post_value === 1 ? \"0\" : \"0\",\n                        'read_only' => $post_value === 1 ? \"0\" : \"0\"\n                        ),\n                    \"id = %i\",\n                    $post_id\n                );\n\n                echo prepareExchangedData(array(\"error\" => \"\"), \"encode\");\n            } else {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\"), \"encode\");\n            }\n            break;\n        /**\n         * UPDATE MANAGER RIGHTS FOR USER\n         */\n        case \"gestionnaire\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\", \"error_text\" => addslashes($LANG['error_not_allowed_to'])), \"encode\");\n                break;\n            }\n\n            $post_value = filter_input(INPUT_POST, 'value', FILTER_SANITIZE_NUMBER_INT);\n            $post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);\n\n            // Get info about user to delete\n            $data_user = DB::queryfirstrow(\n                \"SELECT admin, isAdministratedByRole, can_manage_all_users, gestionnaire\n                FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                $post_id\n            );\n\n            // Is this user allowed to do this?\n            if ($_SESSION['is_admin'] === \"1\"\n                || (in_array($data_user['isAdministratedByRole'], $_SESSION['user_roles']))\n                || ($_SESSION['user_can_manage_all_users'] === \"1\" && $data_user['admin'] !== \"1\")\n            ) {\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        'gestionnaire' => $post_value,\n                        'can_manage_all_users' => ($data_user['can_manage_all_users'] === \"0\" && $post_value === \"1\") ? \"0\" : (\n                            ($data_user['can_manage_all_users'] === \"0\" && $post_value === \"0\") ? \"0\" : (\n                            ($data_user['can_manage_all_users'] === \"1\" && $post_value === \"0\") ? \"0\" : \"1\")\n                        ),\n                        'admin' => $post_value === 1 ? \"0\" : \"0\",\n                        'read_only' => $post_value === 1 ? \"0\" : \"0\"\n                        ),\n                    \"id = %i\",\n                    $post_id\n                );\n                echo prepareExchangedData(array(\"error\" => \"\"), \"encode\");\n            } else {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\"), \"encode\");\n            }\n            break;\n        /**\n         * UPDATE READ ONLY RIGHTS FOR USER\n         */\n        case \"read_only\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\", \"error_text\" => addslashes($LANG['error_not_allowed_to'])), \"encode\");\n                break;\n            }\n\n            $post_value = filter_input(INPUT_POST, 'value', FILTER_SANITIZE_NUMBER_INT);\n            $post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);\n\n            // Get info about user to delete\n            $data_user = DB::queryfirstrow(\n                \"SELECT admin, isAdministratedByRole FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                $post_id\n            );\n\n            // Is this user allowed to do this?\n            if ($_SESSION['is_admin'] === \"1\"\n                || (in_array($data_user['isAdministratedByRole'], $_SESSION['user_roles']))\n                || ($_SESSION['user_can_manage_all_users'] === \"1\" && $data_user['admin'] !== \"1\")\n            ) {\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        'read_only' => $post_value,\n                        'gestionnaire' => $post_value === 1 ? \"0\" : \"0\",\n                        'admin' => $post_value === 1 ? 0 : \"0\"\n                        ),\n                    \"id = %i\",\n                    $post_id\n                );\n                echo prepareExchangedData(array(\"error\" => \"\"), \"encode\");\n            } else {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\"), \"encode\");\n            }\n            break;\n        /**\n         * UPDATE CAN MANAGE ALL USERS RIGHTS FOR USER\n         * Notice that this role must be also Manager\n         */\n        case \"can_manage_all_users\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\", \"error_text\" => addslashes($LANG['error_not_allowed_to'])), \"encode\");\n                break;\n            }\n\n            $post_value = filter_input(INPUT_POST, 'value', FILTER_SANITIZE_NUMBER_INT);\n            $post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);\n\n            // Get info about user to delete\n            $data_user = DB::queryfirstrow(\n                \"SELECT admin, isAdministratedByRole, gestionnaire\n                FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                $post_id\n            );\n\n            // Is this user allowed to do this?\n            if ($_SESSION['is_admin'] === \"1\"\n                || (in_array($data_user['isAdministratedByRole'], $_SESSION['user_roles']))\n                || ($_SESSION['user_can_manage_all_users'] === \"1\" && $data_user['admin'] !== \"1\")\n            ) {\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        'can_manage_all_users' => $post_value,\n                        'gestionnaire' => ($data_user['gestionnaire'] === \"0\" && $post_value === 1) ? \"1\" : (($data_user['gestionnaire'] === \"1\" && $post_value === 1) ? \"1\" : (($data_user['gestionnaire'] === \"1\" && $post_value === 0) ? \"1\" : \"0\")),\n                        'admin' => $post_value === 1 ? \"1\" : \"0\",\n                        'read_only' => $post_value === 1 ? \"1\" : \"0\"\n                        ),\n                    \"id = %i\",\n                    $post_id\n                );\n                echo prepareExchangedData(array(\"error\" => \"\"), \"encode\");\n            } else {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\"), \"encode\");\n            }\n            break;\n        /**\n         * UPDATE PERSONNAL FOLDER FOR USER\n         */\n        case \"personal_folder\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\", \"error_text\" => addslashes($LANG['error_not_allowed_to'])), \"encode\");\n                break;\n            }\n\n            $post_value = filter_input(INPUT_POST, 'value', FILTER_SANITIZE_NUMBER_INT);\n            $post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);\n\n            // Get info about user to delete\n            $data_user = DB::queryfirstrow(\n                \"SELECT admin, isAdministratedByRole, gestionnaire\n                FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                $post_id\n            );\n\n            // Is this user allowed to do this?\n            if ($_SESSION['is_admin'] === \"1\"\n                || (in_array($data_user['isAdministratedByRole'], $_SESSION['user_roles']))\n                || ($_SESSION['user_can_manage_all_users'] === \"1\" && $data_user['admin'] !== \"1\")\n            ) {\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        'personal_folder' => $post_value === \"1\" ? \"1\" : \"0\"\n                        ),\n                    \"id = %i\",\n                    $post_id\n                );\n                echo prepareExchangedData(array(\"error\" => \"\"), \"encode\");\n            } else {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\"), \"encode\");\n            }\n            break;\n\n        /**\n         * Unlock user\n         */\n        case \"unlock_account\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            $post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);\n\n            // Get info about user to delete\n            $data_user = DB::queryfirstrow(\n                \"SELECT admin, isAdministratedByRole, gestionnaire\n                FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                $post_id\n            );\n\n            // Is this user allowed to do this?\n            if ($_SESSION['is_admin'] === \"1\"\n                || (in_array($data_user['isAdministratedByRole'], $_SESSION['user_roles']))\n                || ($_SESSION['user_can_manage_all_users'] === \"1\" && $data_user['admin'] !== \"1\")\n            ) {\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        'disabled' => 0,\n                        'no_bad_attempts' => 0\n                        ),\n                    \"id = %i\",\n                    $post_id\n                );\n                // update LOG\n                logEvents(\n                    'user_mngt',\n                    'at_user_unlocked',\n                    $_SESSION['user_id'],\n                    $_SESSION['login'],\n                    $post_id\n                );\n            }\n            break;\n\n        /*\n        * Check the domain\n        */\n        case \"check_domain\":\n            $return = array();\n            // Check if folder exists\n            $data = DB::query(\n                \"SELECT * FROM \".prefix_table(\"nested_tree\").\"\n                WHERE title = %s AND parent_id = %i\",\n                filter_input(INPUT_POST, 'domain', FILTER_SANITIZE_STRING),\n                \"0\"\n            );\n            $counter = DB::count();\n            if ($counter != 0) {\n                $return[\"folder\"] = \"exists\";\n            } else {\n                $return[\"folder\"] = \"not_exists\";\n            }\n            // Check if role exists\n            $data = DB::query(\n                \"SELECT * FROM \".prefix_table(\"roles_title\").\"\n                WHERE title = %s\",\n                filter_input(INPUT_POST, 'domain', FILTER_SANITIZE_STRING)\n            );\n            $counter = DB::count();\n            if ($counter != 0) {\n                $return[\"role\"] = \"exists\";\n            } else {\n                $return[\"role\"] = \"not_exists\";\n            }\n\n            echo json_encode($return);\n            break;\n\n        /*\n        * Get logs for a user\n        */\n        case \"user_log_items\":\n            $nb_pages = 1;\n            $logs = $sql_filter = \"\";\n            $pages = '<table style=\\'border-top:1px solid #969696;\\'><tr><td>'.$LANG['pages'].'&nbsp;:&nbsp;</td>';\n\n            // Prepare POST variables\n            $post_nb_items_by_page = filter_input(INPUT_POST, 'nb_items_by_page', FILTER_SANITIZE_NUMBER_INT);\n            $post_scope = filter_input(INPUT_POST, 'scope', FILTER_SANITIZE_STRING);\n\n            if (filter_input(INPUT_POST, 'scope', FILTER_SANITIZE_STRING) === \"user_activity\") {\n                if (null !== filter_input(INPUT_POST, 'filter', FILTER_SANITIZE_STRING)\n                    && !empty(filter_input(INPUT_POST, 'filter', FILTER_SANITIZE_STRING))\n                    && filter_input(INPUT_POST, 'filter', FILTER_SANITIZE_STRING) !== \"all\"\n                ) {\n                    $sql_filter = \" AND l.action = '\".filter_input(INPUT_POST, 'filter', FILTER_SANITIZE_STRING).\"'\";\n                }\n                // get number of pages\n                DB::query(\n                    \"SELECT *\n                    FROM \".prefix_table(\"log_items\").\" as l\n                    INNER JOIN \".prefix_table(\"items\").\" as i ON (l.id_item=i.id)\n                    INNER JOIN \".prefix_table(\"users\").\" as u ON (l.id_user=u.id)\n                    WHERE l.id_user = %i \".$sql_filter,\n                    filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n                );\n                $counter = DB::count();\n                // define query limits\n                if (null !== filter_input(INPUT_POST, 'page', FILTER_SANITIZE_NUMBER_INT)\n                    && filter_input(INPUT_POST, 'page', FILTER_SANITIZE_NUMBER_INT) > 1\n                ) {\n                    $start = (intval($post_nb_items_by_page)\n                        * (intval(filter_input(INPUT_POST, 'page', FILTER_SANITIZE_NUMBER_INT)) - 1)) + 1;\n                } else {\n                    $start = 0;\n                }\n                // launch query\n                $rows = DB::query(\n                    \"SELECT l.date as date, u.login as login, i.label as label, l.action as action\n                    FROM \".prefix_table(\"log_items\").\" as l\n                    INNER JOIN \".prefix_table(\"items\").\" as i ON (l.id_item=i.id)\n                    INNER JOIN \".prefix_table(\"users\").\" as u ON (l.id_user=u.id)\n                    WHERE l.id_user = %i \".$sql_filter.\"\n                    ORDER BY date DESC\n                    LIMIT \".intval($start).\",\".intval($post_nb_items_by_page),\n                    filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n                );\n            } else {\n                // get number of pages\n                DB::query(\n                    \"SELECT *\n                    FROM \".prefix_table(\"log_system\").\"\n                    WHERE type = %s AND field_1=%i\",\n                    \"user_mngt\",\n                    filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n                );\n                $counter = DB::count();\n                // define query limits\n                if (null !== filter_input(INPUT_POST, 'page', FILTER_SANITIZE_NUMBER_INT)\n                    && filter_input(INPUT_POST, 'page', FILTER_SANITIZE_NUMBER_INT) > 1\n                ) {\n                    $start = (intval($post_nb_items_by_page)\n                        * (intval(filter_input(INPUT_POST, 'page', FILTER_SANITIZE_NUMBER_INT)) - 1)) + 1;\n                } else {\n                    $start = 0;\n                }\n                // launch query\n                $rows = DB::query(\n                    \"SELECT *\n                    FROM \".prefix_table(\"log_system\").\"\n                    WHERE type = %s AND field_1=%i\n                    ORDER BY date DESC\n                    LIMIT \".mysqli_real_escape_string($link, filter_var($start, FILTER_SANITIZE_NUMBER_INT)).\", \".mysqli_real_escape_string($link, $post_nb_items_by_page),\n                    \"user_mngt\",\n                    filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n                );\n            }\n            // generate data\n            if (isset($counter) && $counter != 0) {\n                $nb_pages = ceil($counter / intval($post_nb_items_by_page));\n                for ($i = 1; $i <= $nb_pages; $i++) {\n                    $pages .= '<td onclick=\\'displayLogs('.$i.',\\\"'.$post_scope.'\\\")\\'><span style=\\'cursor:pointer;'.(filter_input(INPUT_POST, 'page', FILTER_SANITIZE_NUMBER_INT) === $i ? 'font-weight:bold;font-size:18px;\\'>'.$i : '\\'>'.$i).'</span></td>';\n                }\n            }\n            $pages .= '</tr></table>';\n            if (isset($rows)) {\n                foreach ($rows as $record) {\n                    if ($post_scope === \"user_mngt\") {\n                        $user = DB::queryfirstrow(\n                            \"SELECT login\n                            from \".prefix_table(\"users\").\"\n                            WHERE id=%i\",\n                            $record['qui']\n                        );\n                        $user_1 = DB::queryfirstrow(\n                            \"SELECT login\n                            from \".prefix_table(\"users\").\"\n                            WHERE id=%i\",\n                            filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n                        );\n                        $tmp = explode(\":\", $record['label']);\n                        // extract action done\n                        $label = \"\";\n                        if ($tmp[0] == \"at_user_initial_pwd_changed\") {\n                            $label = $LANG['log_user_initial_pwd_changed'];\n                        } elseif ($tmp[0] == \"at_user_email_changed\") {\n                            $label = $LANG['log_user_email_changed'].$tmp[1];\n                        } elseif ($tmp[0] == \"at_user_added\") {\n                            $label = $LANG['log_user_created'];\n                        } elseif ($tmp[0] == \"at_user_locked\") {\n                            $label = $LANG['log_user_locked'];\n                        } elseif ($tmp[0] == \"at_user_unlocked\") {\n                            $label = $LANG['log_user_unlocked'];\n                        } elseif ($tmp[0] == \"at_user_pwd_changed\") {\n                            $label = $LANG['log_user_pwd_changed'];\n                        }\n                        // prepare log\n                        $logs .= '<tr><td>'.date($SETTINGS['date_format'].\" \".$SETTINGS['time_format'], $record['date']).'</td><td align=\\\"center\\\">'.$label.'</td><td align=\\\"center\\\">'.$user['login'].'</td><td align=\\\"center\\\"></td></tr>';\n                    } else {\n                        $logs .= '<tr><td>'.date($SETTINGS['date_format'].\" \".$SETTINGS['time_format'], $record['date']).'</td><td align=\\\"center\\\">'.str_replace('\"', '\\\"', $record['label']).'</td><td align=\\\"center\\\">'.$record['login'].'</td><td align=\\\"center\\\">'.$LANG[$record['action']].'</td></tr>';\n                    }\n                }\n            }\n\n            echo '[ { \"table_logs\": \"'.($logs).'\", \"pages\": \"'.($pages).'\", \"error\" : \"no\" } ]';\n            break;\n\n        /*\n        * Migrate the Admin PF to User\n        */\n        case \"migrate_admin_pf\":\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData(\n                filter_input(INPUT_POST, 'data', FILTER_SANITIZE_STRING),\n                \"decode\"\n            );\n            // Prepare variables\n            $user_id = htmlspecialchars_decode($data_received['user_id']);\n            $salt_user = htmlspecialchars_decode($data_received['salt_user']);\n\n            if (!isset($_SESSION['user_settings']['clear_psk']) || $_SESSION['user_settings']['clear_psk'] == \"\") {\n                echo '[ { \"error\" : \"no_sk\" } ]';\n            } elseif ($salt_user == \"\") {\n                echo '[ { \"error\" : \"no_sk_user\" } ]';\n            } elseif ($user_id == \"\") {\n                echo '[ { \"error\" : \"no_user_id\" } ]';\n            } else {\n                // Get folder id for Admin\n                $admin_folder = DB::queryFirstRow(\n                    \"SELECT id FROM \".prefix_table(\"nested_tree\").\"\n                    WHERE title = %i AND personal_folder = %i\",\n                    intval($_SESSION['user_id']),\n                    \"1\"\n                );\n                // Get folder id for User\n                $user_folder = DB::queryFirstRow(\n                    \"SELECT id FROM \".prefix_table(\"nested_tree\").\"\n                    WHERE title=%i AND personal_folder = %i\",\n                    intval($user_id),\n                    \"1\"\n                );\n                // Get through each subfolder\n                foreach ($tree->getDescendants($admin_folder['id'], true) as $folder) {\n                    // Get each Items in PF\n                    $rows = DB::query(\n                        \"SELECT i.pw, i.label, l.id_user\n                        FROM \".prefix_table(\"items\").\" as i\n                        LEFT JOIN \".prefix_table(\"log_items\").\" as l ON (l.id_item=i.id)\n                        WHERE l.action = %s AND i.perso=%i AND i.id_tree=%i\",\n                        \"at_creation\",\n                        \"1\",\n                        intval($folder->id)\n                    );\n                    foreach ($rows as $record) {\n                        echo $record['label'].\" - \";\n                        // Change user\n                        DB::update(\n                            prefix_table(\"log_items\"),\n                            array(\n                                'id_user' => $user_id\n                                ),\n                            \"id_item = %i AND id_user $ %i AND action = %s\",\n                            $record['id'],\n                            $user_id,\n                            \"at_creation\"\n                        );\n                    }\n                }\n                $tree->rebuild();\n                echo '[ { \"error\" : \"no\" } ]';\n            }\n\n            break;\n\n        /**\n         * delete the timestamp value for specified user => disconnect\n         */\n        case \"disconnect_user\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            $post_user_id = filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT);\n\n            // Get info about user to delete\n            $data_user = DB::queryfirstrow(\n                \"SELECT admin, isAdministratedByRole, gestionnaire\n                FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                $post_id\n            );\n\n            // Is this user allowed to do this?\n            if ($_SESSION['is_admin'] === \"1\"\n                || (in_array($data_user['isAdministratedByRole'], $_SESSION['user_roles']))\n                || ($_SESSION['user_can_manage_all_users'] === \"1\" && $data_user['admin'] !== \"1\")\n            ) {\n                // Do\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        'timestamp' => \"\",\n                        'key_tempo' => \"\",\n                        'session_end' => \"\"\n                        ),\n                    \"id = %i\",\n                    $post_user_id\n                );\n            }\n            break;\n\n        /**\n         * delete the timestamp value for all users\n         */\n        case \"disconnect_all_users\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // Do\n            $rows = DB::query(\n                \"SELECT id FROM \".prefix_table(\"users\").\"\n                WHERE timestamp != %s AND admin != %i\",\n                \"\",\n                \"1\"\n            );\n            foreach ($rows as $record) {\n                // Get info about user to delete\n                $data_user = DB::queryfirstrow(\n                    \"SELECT admin, isAdministratedByRole, gestionnaire\n                    FROM \".prefix_table(\"users\").\"\n                    WHERE id = %i\",\n                    $record['id']\n                );\n\n                // Is this user allowed to do this?\n                if ($_SESSION['is_admin'] === \"1\"\n                    || (in_array($data_user['isAdministratedByRole'], $_SESSION['user_roles']))\n                    || ($_SESSION['user_can_manage_all_users'] === \"1\" && $data_user['admin'] !== \"1\")\n                    ) {\n                    DB::update(\n                        prefix_table(\"users\"),\n                        array(\n                            'timestamp' => \"\",\n                            'key_tempo' => \"\",\n                            'session_end' => \"\"\n                            ),\n                        \"id = %i\",\n                        intval($record['id'])\n                    );\n                }\n            }\n            break;\n        /**\n         * Get user info\n         */\n        case \"get_user_info\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            $post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);\n\n            // Get info about user to delete\n            $data_user = DB::queryfirstrow(\n                \"SELECT admin, isAdministratedByRole, gestionnaire\n                FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                $post_id\n            );\n\n            // Is this user allowed to do this?\n            if ($_SESSION['is_admin'] === \"1\"\n                || (in_array($data_user['isAdministratedByRole'], $_SESSION['user_roles']))\n                || ($_SESSION['user_can_manage_all_users'] === \"1\" && $data_user['admin'] !== \"1\")\n            ) {\n                $arrData = array();\n                $arrFunction = array();\n                $arrMngBy = array();\n                $arrFldForbidden = array();\n                $arrFldAllowed = array();\n\n                //Build tree\n                $tree = new SplClassLoader('Tree\\NestedTree', $SETTINGS['cpassman_dir'].'/includes/libraries');\n                $tree->register();\n                $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n                // get User info\n                $rowUser = DB::queryFirstRow(\n                    \"SELECT login, name, lastname, email, disabled, fonction_id, groupes_interdits, groupes_visibles, isAdministratedByRole, gestionnaire, read_only, can_create_root_folder, personal_folder, can_manage_all_users, admin\n                    FROM \".prefix_table(\"users\").\"\n                    WHERE id = %i\",\n                    $post_id\n                );\n\n                // get FUNCTIONS\n                $functionsList = \"\";\n                $users_functions = explode(';', $rowUser['fonction_id']);\n                // array of roles for actual user\n                $my_functions = explode(';', $_SESSION['fonction_id']);\n\n                $rows = DB::query(\"SELECT id,title,creator_id FROM \".prefix_table(\"roles_title\"));\n                foreach ($rows as $record) {\n                    if ($_SESSION['is_admin'] == 1 || ($_SESSION['user_manager'] == 1 && (in_array($record['id'], $my_functions) || $record['creator_id'] == $_SESSION['user_id']))) {\n                        if (in_array($record['id'], $users_functions)) {\n                            $tmp = ' selected=\"selected\"';\n\n                            //\n                            array_push(\n                                $arrFunction,\n                                array(\n                                    'title' => $record['title'],\n                                    'id' => $record['id']\n                                )\n                            );\n                        } else {\n                            $tmp = \"\";\n                        }\n                        $functionsList .= '<option value=\"'.$record['id'].'\" class=\"folder_rights_role\"'.$tmp.'>'.$record['title'].'</option>';\n                    }\n                }\n\n                // get MANAGEDBY\n                $rolesList = array();\n                $rows = DB::query(\"SELECT id,title FROM \".prefix_table(\"roles_title\").\" ORDER BY title ASC\");\n                foreach ($rows as $reccord) {\n                    $rolesList[$reccord['id']] = array('id' => $reccord['id'], 'title' => $reccord['title']);\n                }\n                $managedBy = '<option value=\"0\">'.$LANG['administrators_only'].'</option>';\n                foreach ($rolesList as $fonction) {\n                    if ($_SESSION['is_admin'] || in_array($fonction['id'], $_SESSION['user_roles'])) {\n                        if ($rowUser['isAdministratedByRole'] == $fonction['id']) {\n                            $tmp = ' selected=\"selected\"';\n\n                            //\n                            array_push(\n                                $arrMngBy,\n                                array(\n                                    'title' => $fonction['title'],\n                                    'id' => $fonction['id']\n                                )\n                            );\n                        } else {\n                            $tmp = \"\";\n                        }\n                        $managedBy .= '<option value=\"'.$fonction['id'].'\"'.$tmp.'>'.$LANG['managers_of'].' '.$fonction['title'].'</option>';\n                    }\n                }\n\n                if (count($arrMngBy) === 0) {\n                    array_push(\n                        $arrMngBy,\n                        array(\n                            'title' => $LANG['administrators_only'],\n                            'id' => \"0\"\n                        )\n                    );\n                }\n\n                // get FOLDERS FORBIDDEN\n                $forbiddenFolders = \"\";\n                $userForbidFolders = explode(';', $rowUser['groupes_interdits']);\n                $tree_desc = $tree->getDescendants();\n                foreach ($tree_desc as $t) {\n                    if (in_array($t->id, $_SESSION['groupes_visibles']) && !in_array($t->id, $_SESSION['personal_visible_groups'])) {\n                        $tmp = \"\";\n                        $ident = \"\";\n                        for ($y = 1; $y < $t->nlevel; $y++) {\n                            $ident .= \"&nbsp;&nbsp;\";\n                        }\n                        if (in_array($t->id, $userForbidFolders)) {\n                            $tmp = ' selected=\"selected\"';\n\n                            //\n                            array_push(\n                                $arrFldForbidden,\n                                array(\n                                    'title' => htmlspecialchars($t->title, ENT_COMPAT, \"UTF-8\"),\n                                    'id' => $t->id\n                                )\n                            );\n                        }\n                        $forbiddenFolders .= '<option value=\"'.$t->id.'\"'.$tmp.'>'.$ident.@htmlspecialchars($t->title, ENT_COMPAT, \"UTF-8\").'</option>';\n\n                        $prev_level = $t->nlevel;\n                    }\n                }\n\n                // get FOLDERS ALLOWED\n                $allowedFolders = \"\";\n                $userAllowFolders = explode(';', $rowUser['groupes_visibles']);\n                $tree_desc = $tree->getDescendants();\n                foreach ($tree_desc as $t) {\n                    if (in_array($t->id, $_SESSION['groupes_visibles']) && !in_array($t->id, $_SESSION['personal_visible_groups'])) {\n                        $tmp = \"\";\n                        $ident = \"\";\n                        for ($y = 1; $y < $t->nlevel; $y++) {\n                            $ident .= \"&nbsp;&nbsp;\";\n                        }\n                        if (in_array($t->id, $userAllowFolders)) {\n                            $tmp = ' selected=\"selected\"';\n\n                            //\n                            array_push(\n                                $arrFldAllowed,\n                                array(\n                                    'title' => htmlspecialchars($t->title, ENT_COMPAT, \"UTF-8\"),\n                                    'id' => $t->id\n                                )\n                            );\n                        }\n                        $allowedFolders .= '<option value=\"'.$t->id.'\"'.$tmp.'>'.$ident.@htmlspecialchars($t->title, ENT_COMPAT, \"UTF-8\").'</option>';\n\n                        $prev_level = $t->nlevel;\n                    }\n                }\n\n                // get USER STATUS\n                if ($rowUser['disabled'] == 1) {\n                    $arrData['info'] = $LANG['user_info_locked'].'<br /><input type=\"checkbox\" value=\"unlock\" name=\"1\" class=\"chk\">&nbsp;<label for=\"1\">'.$LANG['user_info_unlock_question'].'</label><br /><input type=\"checkbox\"  value=\"delete\" id=\"account_delete\" class=\"chk\" name=\"2\" onclick=\"confirmDeletion()\">&nbsp;<label for=\"2\">'.$LANG['user_info_delete_question'].\"</label>\";\n                } else {\n                    $arrData['info'] = $LANG['user_info_active'].'<br /><input type=\"checkbox\" value=\"lock\" class=\"chk\">&nbsp;'.$LANG['user_info_lock_question'];\n                }\n\n                $arrData['error'] = \"no\";\n                $arrData['log'] = $rowUser['login'];\n                $arrData['name'] = $rowUser['name'];\n                $arrData['lastname'] = $rowUser['lastname'];\n                $arrData['email'] = $rowUser['email'];\n                $arrData['function'] = $functionsList;\n                $arrData['managedby'] = $managedBy;\n                $arrData['foldersForbid'] = $forbiddenFolders;\n                $arrData['foldersAllow'] = $allowedFolders; //print_r($arrMngBy);\n                $arrData['share_function'] = json_encode($arrFunction, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP);\n                $arrData['share_managedby'] = json_encode($arrMngBy, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP);\n                $arrData['share_forbidden'] = json_encode($arrFldForbidden, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP);\n                $arrData['share_allowed'] = json_encode($arrFldAllowed, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP);\n                $arrData['gestionnaire'] = $rowUser['gestionnaire'];\n                $arrData['read_only'] = $rowUser['read_only'];\n                $arrData['can_create_root_folder'] = $rowUser['can_create_root_folder'];\n                $arrData['personal_folder'] = $rowUser['personal_folder'];\n                $arrData['can_manage_all_users'] = $rowUser['can_manage_all_users'];\n                $arrData['admin'] = $rowUser['admin'];\n\n                $return_values = json_encode($arrData, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP);\n            } else {\n                $arrData['error'] = \"not_allowed\";\n                $return_values = json_encode($arrData, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP);\n            }\n            echo $return_values;\n\n            break;\n\n        /**\n         * EDIT user\n         */\n        case \"store_user_changes\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData(\n                filter_input(INPUT_POST, 'data', FILTER_SANITIZE_STRING),\n                \"decode\"\n            );\n\n            // Init post variables\n            $account_status_action = filter_var(htmlspecialchars_decode($dataReceived['action_on_user']), FILTER_SANITIZE_STRING);\n            $post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);\n            $post_login = filter_var(htmlspecialchars_decode($dataReceived['login']), FILTER_SANITIZE_STRING);\n\n            // Empty user\n            if (empty($post_login) === true) {\n                echo '[ { \"error\" : \"'.addslashes($LANG['error_empty_data']).'\" } ]';\n                break;\n            }\n\n            // Get info about user to delete\n            $data_user = DB::queryfirstrow(\n                \"SELECT admin, isAdministratedByRole FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                $post_id\n            );\n\n            // Is this user allowed to do this?\n            if ($_SESSION['is_admin'] === \"1\"\n                || (in_array($data_user['isAdministratedByRole'], $_SESSION['user_roles']))\n                || ($_SESSION['user_can_manage_all_users'] === \"1\" && $data_user['admin'] !== \"1\")\n            ) {\n                // delete account\n                // delete user in database\n                if ($account_status_action === \"delete\") {\n                    DB::delete(\n                        prefix_table(\"users\"),\n                        \"id = %i\",\n                        $post_id\n                    );\n                    // delete personal folder and subfolders\n                    $data = DB::queryfirstrow(\n                        \"SELECT id FROM \".prefix_table(\"nested_tree\").\"\n                        WHERE title = %s AND personal_folder = %i\",\n                        $post_id,\n                        \"1\"\n                    );\n                    // Get through each subfolder\n                    if (!empty($data['id'])) {\n                        $folders = $tree->getDescendants($data['id'], true);\n                        foreach ($folders as $folder) {\n                            // delete folder\n                            DB::delete(prefix_table(\"nested_tree\"), \"id = %i AND personal_folder = %i\", $folder->id, \"1\");\n                            // delete items & logs\n                            $items = DB::query(\n                                \"SELECT id FROM \".prefix_table(\"items\").\"\n                                WHERE id_tree=%i AND perso = %i\",\n                                $folder->id,\n                                \"1\"\n                            );\n                            foreach ($items as $item) {\n                                // Delete item\n                                DB::delete(prefix_table(\"items\"), \"id = %i\", $item['id']);\n                                // log\n                                DB::delete(prefix_table(\"log_items\"), \"id_item = %i\", $item['id']);\n                            }\n                        }\n                        // rebuild tree\n                        $tree = new Tree\\NestedTree\\NestedTree($pre.'nested_tree', 'id', 'parent_id', 'title');\n                        $tree->rebuild();\n                    }\n                    // update LOG\n                    logEvents('user_mngt', 'at_user_deleted', $_SESSION['user_id'], $_SESSION['login'], $post_id);\n                } else {\n                    // Get old data about user\n                    $oldData = DB::queryfirstrow(\n                        \"SELECT * FROM \".prefix_table(\"users\").\"\n                        WHERE id = %i\",\n                        $post_id\n                    );\n\n                    // manage account status\n                    $accountDisabled = 0;\n                    if ($account_status_action == \"unlock\") {\n                        $accountDisabled = 0;\n                        $logDisabledText = \"at_user_unlocked\";\n                    } elseif ($account_status_action == \"lock\") {\n                        $accountDisabled = 1;\n                        $logDisabledText = \"at_user_locked\";\n                    }\n\n                    // update user\n                    DB::update(\n                        prefix_table(\"users\"),\n                        array(\n                            'login' => mysqli_escape_string($link, htmlspecialchars_decode($dataReceived['login'])),\n                            'name' => mysqli_escape_string($link, htmlspecialchars_decode($dataReceived['name'])),\n                            'lastname' => mysqli_escape_string($link, htmlspecialchars_decode($dataReceived['lastname'])),\n                            'email' => mysqli_escape_string($link, htmlspecialchars_decode($dataReceived['email'])),\n                            'disabled' => $accountDisabled,\n                            'isAdministratedByRole' => $dataReceived['managedby'],\n                            'groupes_interdits' => empty($dataReceived['forbidFld']) ? '0' : rtrim($dataReceived['forbidFld'], \";\"),\n                            'groupes_visibles' => empty($dataReceived['allowFld']) ? '0' : rtrim($dataReceived['allowFld'], \";\"),\n                            'fonction_id' => empty($dataReceived['functions']) ? '0' : rtrim($dataReceived['functions'], \";\"),\n                            ),\n                        \"id = %i\",\n                        $post_id\n                    );\n\n                    // update SESSION\n                    if ($_SESSION['user_id'] === $post_id) {\n                        $_SESSION['user_email'] = mysqli_escape_string($link, htmlspecialchars_decode($dataReceived['email']));\n                        $_SESSION['name'] = mysqli_escape_string($link, htmlspecialchars_decode($dataReceived['name']));\n                        $_SESSION['lastname'] = mysqli_escape_string($link, htmlspecialchars_decode($dataReceived['lastname']));\n                    }\n\n                    // update LOG\n                    if ($oldData['email'] != mysqli_escape_string($link, htmlspecialchars_decode($dataReceived['email']))) {\n                        logEvents('user_mngt', 'at_user_email_changed:'.$oldData['email'], intval($_SESSION['user_id']), $_SESSION['login'], $post_id);\n                    }\n\n                    if ($oldData['disabled'] != $accountDisabled) {\n                        // update LOG\n                        logEvents('user_mngt', $logDisabledText, $_SESSION['user_id'], $_SESSION['login'], $post_id);\n                    }\n                }\n                echo '[ { \"error\" : \"no\" } ]';\n            } else {\n                echo '[ { \"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\" } ]';\n            }\n            break;\n\n        /**\n         * UPDATE CAN CREATE ROOT FOLDER RIGHT\n         */\n        case \"user_edit_login\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            $post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);\n\n            // Get info about user to delete\n            $data_user = DB::queryfirstrow(\n                \"SELECT admin, isAdministratedByRole FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                $post_id\n            );\n            \n            // Is this user allowed to do this?\n            if ($_SESSION['is_admin'] === \"1\"\n                || (in_array($data_user['isAdministratedByRole'], $_SESSION['user_roles']))\n                || ($_SESSION['user_can_manage_all_users'] === \"1\" && $data_user['admin'] !== \"1\")\n            ) {\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        'login' => filter_input(INPUT_POST, 'login', FILTER_SANITIZE_STRING),\n                        'name' => filter_input(INPUT_POST, 'name', FILTER_SANITIZE_STRING),\n                        'lastname' => filter_input(INPUT_POST, 'lastname', FILTER_SANITIZE_STRING)\n                    ),\n                    \"id = %i\",\n                    $post_id\n                );\n            }\n            break;\n\n        /**\n         * IS LOGIN AVAILABLE?\n         */\n        case \"is_login_available\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            DB::queryfirstrow(\n                \"SELECT * FROM \".prefix_table(\"users\").\"\n                WHERE login = %s\",\n                mysqli_escape_string(\n                    $link,\n                    htmlspecialchars_decode(filter_input(INPUT_POST, 'login', FILTER_SANITIZE_STRING))\n                )\n            );\n\n            echo '[ { \"error\" : \"\" , \"exists\" : \"'.DB::count().'\"} ]';\n\n            break;\n\n        /**\n         * GET USER FOLDER RIGHT\n         */\n        case \"user_folders_rights\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\", \"error_text\" => addslashes($LANG['error_not_allowed_to'])), \"encode\");\n                break;\n            }\n            $arrData = array();\n\n            //Build tree\n            $tree = new SplClassLoader('Tree\\NestedTree', $SETTINGS['cpassman_dir'].'/includes/libraries');\n            $tree->register();\n            $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n            // get User info\n            $rowUser = DB::queryFirstRow(\n                \"SELECT login, name, lastname, email, disabled, fonction_id, groupes_interdits, groupes_visibles, isAdministratedByRole, avatar_thumb\n                FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT)\n            );\n\n            // get rights\n            $functionsList = \"\";\n            $arrFolders = [];\n            $html = '<div style=\"padding:5px; margin-bottom:10px; height:40px;\" class=\"ui-state-focus ui-corner-all\">';\n            if (!empty($rowUser['avatar_thumb'])) {\n                $html .= '<div style=\"float:left; margin-right:30px;\"><img src=\"includes/avatars/'.$rowUser['avatar_thumb'].'\"></div>';\n            }\n            $html .= '<div style=\"float:left;font-size:20px; margin-top:8px; text-align:center;\">'.$rowUser['name'].' '.$rowUser['lastname'].' ['.$rowUser['login'].']</div></div><table>';\n\n            $arrData['functions'] = array_filter(explode(';', $rowUser['fonction_id']));\n            $arrData['allowed_folders'] = array_filter(explode(';', $rowUser['groupes_visibles']));\n            $arrData['denied_folders'] = array_filter(explode(';', $rowUser['groupes_interdits']));\n\n            // refine folders based upon roles\n            $rows = DB::query(\n                \"SELECT folder_id, type\n                FROM \".prefix_table(\"roles_values\").\"\n                WHERE role_id IN %ls\n                ORDER BY folder_id ASC\",\n                $arrData['functions']\n            );\n            foreach ($rows as $record) {\n                $bFound = false;\n                $x = 0;\n                foreach ($arrFolders as $fld) {\n                    if ($fld['id'] === $record['folder_id']) {\n                        // get the level of access on the folder\n                        $arrFolders[$x]['type'] = evaluate_folder_acces_level($record['type'], $arrFolders[$x]['type']);\n                        $bFound = true;\n                        break;\n                    }\n                    $x++;\n                }\n                if ($bFound === false && !in_array($record['folder_id'], $arrData['denied_folders'])) {\n                    array_push($arrFolders, array(\"id\" => $record['folder_id'], \"type\" => $record['type']));\n                }\n            }\n\n            $tree_desc = $tree->getDescendants();\n            foreach ($tree_desc as $t) {\n                foreach ($arrFolders as $fld) {\n                    if ($fld['id'] === $t->id) {\n                        // get folder name\n                        $row = DB::queryFirstRow(\n                            \"SELECT title, nlevel\n                            FROM \".prefix_table(\"nested_tree\").\"\n                            WHERE id = %i\",\n                            $fld['id']\n                        );\n\n                        // manage indentation\n                        $ident = '';\n                        for ($y = 1; $y < $row['nlevel']; $y++) {\n                            $ident .= '<i class=\"fa fa-sm fa-caret-right\"></i>&nbsp;';\n                        }\n\n                        // manage right icon\n                        if ($fld['type'] == \"W\") {\n                            $color = '#008000';\n                            $allowed = \"W\";\n                            $title = $LANG['write'];\n                            $label = '\n                            <span class=\"fa-stack\" title=\"'.$LANG['write'].'\" style=\"color:#008000;\">\n                                <i class=\"fa fa-square-o fa-stack-2x\"></i>\n                                <i class=\"fa fa-indent fa-stack-1x\"></i>\n                            </span>\n                            <span class=\"fa-stack\" title=\"'.$LANG['write'].'\" style=\"color:#008000;\">\n                                <i class=\"fa fa-square-o fa-stack-2x\"></i>\n                                <i class=\"fa fa-edit fa-stack-1x\"></i>\n                            </span>\n                            <span class=\"fa-stack\" title=\"'.$LANG['write'].'\" style=\"color:#008000;\">\n                                <i class=\"fa fa-square-o fa-stack-2x\"></i>\n                                <i class=\"fa fa-eraser fa-stack-1x\"></i>\n                            </span>';\n                        } elseif ($fld['type'] == \"ND\") {\n                            $color = '#4E45F7';\n                            $allowed = \"ND\";\n                            $title = $LANG['no_delete'];\n                            $label = '\n                            <span class=\"fa-stack\" title=\"'.$LANG['no_delete'].'\" style=\"color:#4E45F7;\">\n                                <i class=\"fa fa-square-o fa-stack-2x\"></i>\n                                <i class=\"fa fa-indent fa-stack-1x\"></i>\n                            </span>\n                            <span class=\"fa-stack\" title=\"'.$LANG['no_delete'].'\" style=\"color:#4E45F7;\">\n                                <i class=\"fa fa-square-o fa-stack-2x\"></i>\n                                <i class=\"fa fa-edit fa-stack-1x\"></i>\n                            </span>';\n                        } elseif ($fld['type'] == \"NE\") {\n                            $color = '#4E45F7';\n                            $allowed = \"NE\";\n                            $title = $LANG['no_edit'];\n                            $label = '\n                            <span class=\"fa-stack\" title=\"'.$LANG['no_edit'].'\" style=\"color:#4E45F7;\">\n                                <i class=\"fa fa-square-o fa-stack-2x\"></i>\n                                <i class=\"fa fa-indent fa-stack-1x\"></i>\n                            </span>\n                            <span class=\"fa-stack\" title=\"'.$LANG['no_edit'].'\" style=\"color:#4E45F7;\">\n                                <i class=\"fa fa-square-o fa-stack-2x\"></i>\n                                <i class=\"fa fa-eraser fa-stack-1x\"></i>\n                            </span>';\n                        } elseif ($fld['type'] == \"NDNE\") {\n                            $color = '#4E45F7';\n                            $allowed = \"NDNE\";\n                            $title = $LANG['no_edit_no_delete'];\n                            $label = '\n                            <span class=\"fa-stack\" title=\"'.$LANG['no_edit_no_delete'].'\" style=\"color:#4E45F7;\">\n                                <i class=\"fa fa-square-o fa-stack-2x\"></i>\n                                <i class=\"fa fa-indent fa-stack-1x\"></i>\n                            </span>';\n                        } else {\n                            $color = '#FEBC11';\n                            $allowed = \"R\";\n                            $title = $LANG['read'];\n                            $label = '\n                            <span class=\"fa-stack\" title=\"'.$LANG['read'].'\" style=\"color:#ff9000;\">\n                                <i class=\"fa fa-square-o fa-stack-2x\"></i>\n                                <i class=\"fa fa-eye fa-stack-1x\"></i>\n                            </span>';\n                        }\n\n                        $html .= '<tr><td>'.$ident.$row['title'].'</td><td>'.$label.\"</td></tr>\";\n                        break;\n                    }\n                }\n            }\n\n            $html .= '</table><div style=\"margin-top:15px; padding:3px;\" class=\"ui-widget-content ui-state-default ui-corner-all\"><span class=\"fa fa-info\"></span>&nbsp;'.$LANG['folders_not_visible_are_not_displayed'].'</div>';\n\n            $return_values = prepareExchangedData(\n                array(\n                    'html' => $html,\n                    'error' => '',\n                    'login' => $rowUser['login']\n                ),\n                \"encode\"\n            );\n            echo $return_values;\n            break;\n\n        /**\n         * GET LIST OF USERS\n         */\n        case \"get_list_of_users_for_sharing\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo prepareExchangedData(array(\"error\" => \"not_allowed\", \"error_text\" => addslashes($LANG['error_not_allowed_to'])), \"encode\");\n                break;\n            }\n\n            $list_users_from = '';\n            $list_users_to = '';\n\n            if (!$_SESSION['is_admin'] && !$_SESSION['user_can_manage_all_users']) {\n                $rows = DB::query(\n                    \"SELECT id, login, name, lastname, gestionnaire, read_only, can_manage_all_users\n                    FROM \".prefix_table(\"users\").\"\n                    WHERE admin = %i AND isAdministratedByRole IN %ls\",\n                    \"0\",\n                    array_filter($_SESSION['user_roles'])\n                );\n            } else {\n                $rows = DB::query(\n                    \"SELECT id, login, name, lastname, gestionnaire, read_only, can_manage_all_users\n                    FROM \".prefix_table(\"users\").\"\n                    WHERE admin = %i\",\n                    \"0\"\n                );\n            }\n\n            foreach ($rows as $record) {\n                $list_users_from .= '<option id=\"share_from-'.$record['id'].'\">'.$record['name'].' '.$record['lastname'].' ['.$record['login'].']</option>';\n                $list_users_to .= '<option id=\"share_to-'.$record['id'].'\">'.$record['name'].' '.$record['lastname'].' ['.$record['login'].']</option>';\n            }\n\n            $return_values = prepareExchangedData(\n                array(\n                    'users_list_from' => $list_users_from,\n                    'users_list_to' => $list_users_to,\n                    'error' => ''\n                ),\n                \"encode\"\n            );\n            echo $return_values;\n\n            break;\n\n        /**\n         * UPDATE USERS RIGHTS BY SHARING\n         */\n        case \"update_users_rights_sharing\":\n            // Check KEY\n            if (filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING) !== filter_var($_SESSION['key'], FILTER_SANITIZE_STRING)) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            $post_source_id = filter_input(INPUT_POST, 'source_id', FILTER_SANITIZE_NUMBER_INT);\n            $post_destination_ids = filter_input(INPUT_POST, 'destination_ids', FILTER_SANITIZE_STRING);\n            $post_user_otherrights = filter_input(INPUT_POST, 'user_otherrights', FILTER_SANITIZE_STRING);\n\n            // Check send values\n            if (empty($post_source_id) === true\n                || empty($post_destination_ids) === true\n            ) {\n                // error\n                exit();\n            }\n\n            // Get info about user\n            $data_user = DB::queryfirstrow(\n                \"SELECT admin, isAdministratedByRole FROM \".prefix_table(\"users\").\"\n                WHERE id = %i\",\n                $post_source_id\n            );\n            \n            // Is this user allowed to do this?\n            if ($_SESSION['is_admin'] === \"1\"\n                || (in_array($data_user['isAdministratedByRole'], $_SESSION['user_roles']))\n                || ($_SESSION['user_can_manage_all_users'] === \"1\" && $data_user['admin'] !== \"1\")\n            ) {\n                // manage other rights\n                /* Possible values: gestionnaire;read_only;can_create_root_folder;personal_folder;can_manage_all_users;admin*/\n                $user_other_rights = explode(';', $post_user_otherrights);\n\n                foreach (explode(';', $post_destination_ids) as $dest_user_id) {\n                    // get info about the user to update\n                    $data_user = DB::queryfirstrow(\n                        \"SELECT admin, isAdministratedByRole FROM \".prefix_table(\"users\").\"\n                        WHERE id = %i\",\n                        $dest_user_id\n                    );\n\n                    // Is this user allowed to do this?\n                    if ($_SESSION['is_admin'] === \"1\"\n                        || (in_array($data_user['isAdministratedByRole'], $_SESSION['user_roles']))\n                        || ($_SESSION['user_can_manage_all_users'] === \"1\" && $data_user['admin'] !== \"1\")\n                    ) {\n                        // update user\n                        DB::update(\n                            prefix_table(\"users\"),\n                            array(\n                                'fonction_id' => filter_input(INPUT_POST, 'user_functions', FILTER_SANITIZE_NUMBER_INT),\n                                'isAdministratedByRole' => filter_input(INPUT_POST, 'user_managedby', FILTER_SANITIZE_STRING),\n                                'groupes_visibles' => filter_input(INPUT_POST, 'user_fldallowed', FILTER_SANITIZE_STRING),\n                                'groupes_interdits' => filter_input(INPUT_POST, 'user_fldforbid', FILTER_SANITIZE_STRING),\n                                'gestionnaire' => $user_other_rights[0],\n                                'read_only' => $user_other_rights[1],\n                                'can_create_root_folder' => $user_other_rights[2],\n                                'personal_folder' => $user_other_rights[3],\n                                'can_manage_all_users' => $user_other_rights[4],\n                                'admin' => $user_other_rights[5],\n                                ),\n                            \"id = %i\",\n                            $dest_user_id\n                        );\n                    }\n                }\n            }\n            break;\n    }\n// # NEW LOGIN FOR USER HAS BEEN DEFINED ##\n} elseif (!empty(filter_input(INPUT_POST, 'newValue', FILTER_SANITIZE_STRING))) {\n    // Prepare POST variables\n    $value = explode('_', filter_input(INPUT_POST, 'id', FILTER_SANITIZE_STRING));\n    $post_newValue = filter_input(INPUT_POST, 'newValue', FILTER_SANITIZE_STRING);\n\n    if ($value[0] === \"userlanguage\") {\n        $value[0] = \"user_language\";\n        $post_newValue = strtolower($post_newValue);\n    }\n    DB::update(\n        prefix_table(\"users\"),\n        array(\n            $value[0] => $post_newValue\n            ),\n        \"id = %i\",\n        $value[1]\n    );\n    // update LOG\n    logEvents(\n        'user_mngt',\n        'at_user_new_'.$value[0].':'.$value[1],\n        $_SESSION['user_id'],\n        $_SESSION['login'],\n        filter_input(INPUT_POST, 'id', FILTER_SANITIZE_STRING)\n    );\n    // refresh SESSION if requested\n    if ($value[0] === \"treeloadstrategy\") {\n        $_SESSION['user_settings']['treeloadstrategy'] = $post_newValue;\n    } elseif ($value[0] === \"usertimezone\") {\n    // special case for usertimezone where session needs to be updated\n        $_SESSION['user_settings']['usertimezone'] = $post_newValue;\n    } elseif ($value[0] === \"userlanguage\") {\n    // special case for user_language where session needs to be updated\n        $_SESSION['user_settings']['user_language'] = $post_newValue;\n        $_SESSION['user_language'] = $post_newValue;\n    } elseif ($value[0] === \"agses-usercardid\") {\n    // special case for agsescardid where session needs to be updated\n        $_SESSION['user_settings']['agses-usercardid'] = $post_newValue;\n    } elseif ($value[0] === \"email\") {\n    // store email change in session\n        $_SESSION['user_email'] = $post_newValue;\n    }\n    // Display info\n    echo htmlentities($post_newValue, ENT_QUOTES);\n// # ADMIN FOR USER HAS BEEN DEFINED ##\n} elseif (null !== filter_input(INPUT_POST, 'newadmin', FILTER_SANITIZE_NUMBER_INT)) {\n    $id = explode('_', filter_input(INPUT_POST, 'id', FILTER_SANITIZE_STRING));\n    DB::update(\n        prefix_table(\"users\"),\n        array(\n            'admin' => filter_input(INPUT_POST, 'newadmin', FILTER_SANITIZE_NUMBER_INT)\n            ),\n        \"id = %i\",\n        $id[1]\n    );\n    // Display info\n    if (filter_input(INPUT_POST, 'newadmin', FILTER_SANITIZE_NUMBER_INT) === 1) {\n        echo \"Oui\";\n    } else {\n        echo \"Non\";\n    }\n}\n\n/**\n * Return the level of access on a folder\n * @param  string $new_val      New value\n * @param  string $existing_val Current value\n * @return string               Returned index\n */\nfunction evaluate_folder_acces_level($new_val, $existing_val)\n{\n    $levels = array(\n        \"W\" => 4,\n        \"ND\" => 3,\n        \"NE\" => 3,\n        \"NDNE\" => 2,\n        \"R\" => 1\n    );\n\n    if (empty($existing_val)) {\n        $current_level_points = 0;\n    } else {\n        $current_level_points = $levels[$existing_val];\n    }\n    $new_level_points = $levels[$new_val];\n\n    // check if new is > to current one (always keep the highest level)\n    if (($new_val === \"ND\" && $existing_val === \"NE\")\n        ||\n        ($new_val === \"NE\" && $existing_val === \"ND\")\n    ) {\n        return \"NDNE\";\n    } else {\n        if ($current_level_points > $new_level_points) {\n            return  $existing_val;\n        } else {\n            return  $new_val;\n        }\n    }\n}\n", "<?php\n/**\n * @file          users.load.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1) {\n    die('Hacking attempt...');\n}\n\n?>\n\n<script type=\"text/javascript\">\n//<![CDATA[\n\n    $.extend($.expr[\":\"], {\n        \"containsIN\": function(elem, i, match, array) {\n            return (elem.textContent || elem.innerText || \"\").toLowerCase().indexOf((match[3] || \"\").toLowerCase()) >= 0;\n        }\n    });\n\n    // prepare Alphabet\n    var _alphabetSearch = '';\n    $.fn.dataTable.ext.search.push( function ( settings, searchData ) {\n        if ( ! _alphabetSearch ) {\n            return true;\n        }\n        if ( searchData[0].charAt(0) === _alphabetSearch ) {\n            return true;\n        }\n        return false;\n    } );\n\n$(function() {\n    $(\"#tabs\").tabs();\n\n    //Build multiselect box\n    $(\"#user_edit_functions_list, #user_edit_managedby, #user_edit_auth, #user_edit_forbid, #new_user_groups, #new_user_auth_folders, #new_user_forbid_folders\").multiselect({\n        selectedList: 7,\n        minWidth: 550,\n        height: 145,\n        checkAllText: \"<?php echo $LANG['check_all_text']; ?>\",\n        uncheckAllText: \"<?php echo $LANG['uncheck_all_text']; ?>\"\n    });\n    $(\"#new_is_admin_by\").multiselect({\n        selectedList: 7,\n        multiple:false,\n        minWidth: 550,\n        height: 145,\n        checkAllText: \"<?php echo $LANG['check_all_text']; ?>\",\n        uncheckAllText: \"<?php echo $LANG['uncheck_all_text']; ?>\"\n    });\n    $(\"#share_rights_from, #share_rights_to\").multiselect({\n        selectedList: 7,\n        multiple:false,\n        minWidth: 350,\n        height: 145,\n        checkAllText: \"<?php echo $LANG['check_all_text']; ?>\",\n        uncheckAllText: \"<?php echo $LANG['uncheck_all_text']; ?>\"\n    });\n\n    //Launch the datatables pluggin\n    var tableUsers = $(\"#t_users\").dataTable({\n        \"order\": [[ 1, \"asc\" ]],\n        \"ordering\": false,\n        \"pagingType\": \"full_numbers\",\n        \"processing\": true,\n        \"serverSide\": true,\n        \"ajax\": {\n            url: \"sources/datatable/datatable.users.php\",\n            data: function(d) {\n                d.letter = _alphabetSearch\n            }\n        },\n        \"language\": {\n            \"url\": \"includes/language/datatables.<?php echo $_SESSION['user_language']; ?>.txt\"\n        },\n        \"columns\": [\n            {\"width\": \"13%\", className: \"dt-body-left\"},\n            {\"width\": \"10%\"},\n            {\"width\": \"15%\"},\n            {\"width\": \"15%\"},\n            {\"width\": \"20%\"},\n            {\"width\": \"20%\"},\n            null,\n            null,\n            null,\n            null,\n            null,\n            null\n        ]\n    })\n    .on('xhr.dt', function ( e, settings, json, xhr ) {\n        $(\".tip\").tooltipster({multiple: true});\n    } );\n\n    // manage the Alphabet\n    var alphabet = $('<div class=\"alphabet\"/>').append( 'Search: ' );\n    $('<span class=\"clear active\"/>')\n        .data( 'letter', '' )\n        .html( 'None' )\n        .appendTo( alphabet );\n    for ( var i=0 ; i<26 ; i++ ) {\n        var letter = String.fromCharCode( 65 + i );\n\n        $('<span/>')\n            .data( 'letter', letter )\n            .html( letter )\n            .appendTo( alphabet );\n    }\n    alphabet.insertBefore( \"#t_users_alphabet\" );\n    alphabet.on( 'click', 'span', function () {\n        alphabet.find( '.active' ).removeClass( 'active' );\n        $(this).addClass( 'active' );\n\n        _alphabetSearch = $(this).data('letter');\n\n        tableUsers.api().ajax.reload();\n    } );\n\n    // manage the click on toggle icons\n    $(document).on({\n        click: function (event) {\n            $(\"#div_loading\").show();\n            var tmp = $(this).attr('tp').split('-');    //[0]>ID ; [1]>action  ; [2]>NewValue\n\n            // send change to be stored\n            $.post(\n                \"sources/users.queries.php\",\n                {\n                    type    : tmp[1],\n                    value   : tmp[2],\n                    id      : tmp[0],\n                    key        : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    $(\"#div_loading\").hide();\n\n                    // manage not allowed\n                    if (data.error === \"not_allowed\") {\n                       $(\"#div_dialog_message_text\").html(data.error_text);\n                       $(\"#div_dialog_message\").dialog(\"open\");\n                       return false;\n                    }\n\n                    // refresh table content\n                    tableUsers.api().ajax.reload();\n                }\n            );\n        }\n    },\n    \".fa-toggle-off, .fa-toggle-on\"\n    );\n\n    // check if login is available\n    $(\"#new_login\").change(function() {\n        login_exists($(this).val());\n    });\n\n\n    $(\"#change_user_pw_newpw\").simplePassMeter({\n        \"requirements\": {},\n          \"container\": \"#pw_strength\",\n          \"defaultText\" : \"<?php echo $LANG['index_pw_level_txt']; ?>\",\n        \"ratings\": [\n            {\"minScore\": 0,\n                \"className\": \"meterFail\",\n                \"text\": \"<?php echo $LANG['complex_level0']; ?>\"\n            },\n            {\"minScore\": 25,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo $LANG['complex_level1']; ?>\"\n            },\n            {\"minScore\": 50,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo $LANG['complex_level2']; ?>\"\n            },\n            {\"minScore\": 60,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo $LANG['complex_level3']; ?>\"\n            },\n            {\"minScore\": 70,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo $LANG['complex_level4']; ?>\"\n            },\n            {\"minScore\": 80,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo $LANG['complex_level5']; ?>\"\n            },\n            {\"minScore\": 90,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo $LANG['complex_level6']; ?>\"\n            }\n        ]\n    });\n    $(\"#change_user_pw_newpw\").bind({\n        \"score.simplePassMeter\" : function(jQEvent, score) {\n            //$(\"#pw_strength\").val(score);\n        }\n    });\n\n    $(\"#add_new_user\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 590,\n        height: 620,\n        title: \"<?php echo $LANG['new_user_title']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['save_button']; ?>\": function() {\n                if ($(\"#new_login\").val() == \"\" || $(\"#new_pwd\").val()==\"\" || $(\"#new_email\").val()==\"\") {\n                    $(\"#add_new_user_error\").show(1).html(\"<?php echo $LANG['error_must_enter_all_fields']; ?>\").delay(1000).fadeOut(1000);\n                } else {\n                    $(\"#add_new_user_info\").show().html(\"<span class=\\'fa fa-cog fa-spin fa-lg\\'></span>&nbsp;<?php echo $LANG['please_wait']; ?>\");\n\n                    // get lists\n                    var forbidFld = \"\", authFld = \"\", groups = \"\";\n                    $(\"#new_user_groups option:selected\").each(function () {\n                        groups += $(this).val() + \";\";\n                    });\n                    $(\"#new_user_auth_folders option:selected\").each(function () {\n                        authFld += $(this).val() + \";\";\n                    });\n                    $(\"#new_user_forbid_folders option:selected\").each(function () {\n                        forbidFld += $(this).val() + \";\";\n                    });\n\n                    //prepare data\n                    var data = '{\"login\":\"'+sanitizeString($('#new_login').val())+'\", '+\n                        '\"name\":\"'+sanitizeString($('#new_name').val())+'\", '+\n                        '\"lastname\":\"'+sanitizeString($('#new_lastname').val())+'\", '+\n                        '\"pw\":\"'+sanitizeString($('#new_pwd').val())+'\", '+\n                        '\"email\":\"'+$(\"#new_email\").val()+'\", '+\n                        '\"admin\":\"'+$(\"#new_admin\").prop(\"checked\")+'\", '+\n                        '\"manager\":\"'+$(\"#new_manager\").prop(\"checked\")+'\", '+\n                        '\"read_only\":\"'+$(\"#new_read_only\").prop(\"checked\")+'\", '+\n                        '\"personal_folder\":\"'+$(\"#new_personal_folder\").prop(\"checked\")+'\", '+\n                        '\"new_folder_role_domain\":\"'+$(\"#new_folder_role_domain\").prop(\"checked\")+'\", '+\n                        '\"domain\":\"'+$('#new_domain').val()+'\", '+\n                        '\"isAdministratedByRole\":\"'+$(\"#new_is_admin_by\").val()+'\", '+\n                        '\"groups\":\"' + groups + '\", '+\n                        '\"allowed_flds\":\"' + authFld + '\", '+\n                        '\"forbidden_flds\":\"' + forbidFld + '\"}';\n\n                    $.post(\n                        \"sources/users.queries.php\",\n                        {\n                            type    :\"add_new_user\",\n                            data     : prepareExchangedData(data, \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                            key    : \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            $(\"#add_new_user_info\").hide().html(\"\");\n                            if (data[0].error === \"no\") {\n                                // clear form fields\n                                $(\"#new_name, #new_lastname, #new_login, #new_pwd, #new_is_admin_by, #new_email, #new_domain\").val(\"\");\n                                $(\"#new_admin, #new_manager, #new_read_only, #new_personal_folder\").prop(\"checked\", false);\n\n                                // refresh table content\n                                tableUsers.api().ajax.reload();\n\n                                $(\"#add_new_user\").dialog(\"close\");\n                            } else {\n                                $(\"#add_new_user_error\").html(data[0].error).show(1).delay(1000).fadeOut(1000);\n                            }\n                        },\n                        \"json\"\n                   )\n                }\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    $(\"#delete_user\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 150,\n        title: \"<?php echo $LANG['admin_action']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['ok']; ?>\": function() {\n                $.post(\n                    \"sources/users.queries.php\",\n                    {\n                        type   : \"delete_user\",\n                        id     : $(\"#delete_user_id\").val(),\n                        action : $(\"#delete_user_action\").val(),\n                        key    : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        if (data[0].error !== \"no\") {\n                            $(\"#user_action_html\").html(data[0].error);\n                        } else {\n                            window.location.href = \"index.php?page=manage_users\";\n                        }\n                    },\n                    \"json\"\n               );\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    $(\"#change_user_pw\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 380,\n        height: 300,\n        title: \"<?php echo $LANG['admin_action']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['pw_generate']; ?>\": function() {\n                $(\"#generated_user_pw\").html(\"\");\n                $(\"#change_user_pw_wait\").show();\n                $.post(\n                        \"sources/main.queries.php\",\n                        {\n                            type       : \"generate_a_password\",\n                            length     : 12,\n                            secure     : true,\n                            symbols    : true,\n                            capitalize : true,\n                            numerals   : true\n                        },\n                        function(data) {\n                            data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                            if (data.error == \"true\") {\n                                $(\"#div_dialog_message_text\").html(data.error_msg);\n                                $(\"#div_dialog_message\").dialog(\"open\");\n                            } else {\n                                $(\"#change_user_pw_newpw_confirm, #change_user_pw_newpw\").val(data.key);\n                                $(\"#generated_user_pw\").text(data.key);\n                                $(\"#generated_user_pw, #generated_user_pw_title\").show();\n                                $(\"#change_user_pw_newpw\").focus();\n                            }\n                            $(\"#change_user_pw_wait\").hide();\n                        }\n                   );\n            },\n            \"<?php echo $LANG['save_button']; ?>\": function() {\n                if ($(\"#change_user_pw_newpw_confirm\").val() === \"\" || $(\"#change_user_pw_newpw\").val() === \"\") {\n                // check if empty\n                    $(\"#change_user_pw_error\").html(\"<?php echo $LANG['error_must_enter_all_fields']; ?>\").show(1).delay(1000).fadeOut(1000);\n                } else if ($(\"#change_user_pw_newpw\").val() === $(\"#change_user_pw_newpw_confirm\").val()) {\n                // check if egual\n                    var data = \"{\\\"new_pw\\\":\\\"\"+sanitizeString($(\"#change_user_pw_newpw\").val())+\"\\\" , \\\"user_id\\\":\\\"\"+$(\"#change_user_pw_id\").val()+\"\\\" , \\\"key\\\":\\\"<?php echo $_SESSION['key']; ?>\\\"}\";\n                    $.post(\n                        \"sources/main.queries.php\",\n                        {\n                            type    : \"change_pw\",\n                            change_pw_origine    : \"admin_change\",\n                            data    : prepareExchangedData(data, \"encode\", \"<?php echo $_SESSION['key']; ?>\")\n                        },\n                        function(data) {\n                            if (data[0].error == \"none\") {\n                                $(\"#change_user_pw_error\").html(\"\").hide();\n                                $(\"#change_user_pw_newpw_confirm, #change_user_pw_newpw\").val(\"\");\n                                $(\"#change_user_pw\").dialog(\"close\");\n                            } else if (data[0].error == \"key_not_conform\") {\n                                $(\"#change_user_pw_error\").html(\"PROTECTION KEY NOT CONFORM!! Try to relog.\");\n                            } else if (data[0].error == \"pwd_hash_not_correct\") {\n                                $(\"#change_user_pw_error\").addClass(\"ui-state-error ui-corner-all\").show().html(\"<span><?php echo $LANG['error_not_allowed_to']; ?></span>\");\n                            } else {\n                                $(\"#change_user_pw_error\").html(\"Something occurs ... no data to work with!\");\n                            }\n                        },\n                        \"json\"\n                   );\n                } else {\n                    $(\"#change_user_pw_error\").html(\"<?php echo $LANG['error_password_confirmation']; ?>\").show(1).delay(1000).fadeOut(1000);\n                }\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(\"#change_user_pw_newpw_confirm, #change_user_pw_newpw\").val(\"\");\n                $(this).dialog(\"close\");\n            }\n        },\n        beforeClose: function( event, ui ) {\n            $(\"#change_user_pw_newpw, #change_user_pw_newpw_confirm, #generated_user_pw\").val(\"\");\n            $(\"#show_generated_pw\").hide();\n        }\n    });\n\n    $(\"#user_logs_dialog\").dialog({\n        bgiframe: false,\n        modal: false,\n        autoOpen: false,\n        width: 850,\n        height: 500,\n        title: \"<?php echo $LANG[\"logs\"]; ?>\",\n        buttons: {\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(\"#span_user_activity_option\").hide();\n                $(\"#activity\").val(0);\n                $(\"#tbody_logs\").empty();\n                $(\"#log_pages\").empty();\n                $(this).dialog(\"close\");\n            }\n        },\n        open: function() {\n            $.post(\n                \"sources/users.queries.php\",\n                {\n                    type                : \"user_log_items\",\n                    page                : $(\"#log_page\").val(),\n                    nb_items_by_page    : $(\"#nb_items_by_page\").val(),\n                    id                  : $(\"#selected_user\").val(),\n                    scope               : 'user_activity'\n                },\n                function(data) {\n                    if (data[0].error == \"no\") {\n                        $(\"#tbody_logs\").empty().append(data[0].table_logs);\n                        $(\"#log_pages\").empty().html(data[0].pages);\n                    }\n                },\n                \"json\"\n           );\n        }\n    });\n\n    $(\"#manager_dialog\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 200,\n        title: \"<?php echo $LANG['admin_action']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    $(\"#user_edit_login_dialog\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 280,\n        title: \"<?php echo $LANG['admin_action']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['save_button']; ?>\": function() {\n                $(\"#user_edit_login_dialog_message\").html(\"<?php echo $LANG['please_wait']; ?>\");\n                $.post(\n                    \"sources/users.queries.php\",\n                    {\n                        type    : \"user_edit_login\",\n                        id      : $(\"#selected_user\").val(),\n                        login   : $(\"#edit_login\").val(),\n                        name    : $(\"#edit_name\").val(),\n                        lastname: $(\"#edit_lastname\").val(),\n                        key     : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        $(\"#name_\"+$(\"#selected_user\").html()).html($(\"#edit_name\").val());\n                        $(\"#lastname_\"+$(\"#selected_user\").val()).html($(\"#edit_lastname\").val());\n                        $(\"#login_\"+$(\"#selected_user\").val()).html($(\"#edit_login\").val());\n                        $(\"#user_edit_login_dialog\").dialog(\"close\");\n                    }\n                );\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        open: function() {\n            $(\"#edit_name\").val($(\"#name_\"+$(\"#selected_user\").val()).html());\n            $(\"#edit_lastname\").val($(\"#lastname_\"+$(\"#selected_user\").val()).html());\n            $(\"#edit_login\").val($(\"#login_\"+$(\"#selected_user\").val()).html());\n        },\n        close: function() {\n            $(\"#user_edit_login_dialog_message\").html(\"\");\n        }\n    });\n\n    var watermark = 'Search a user';\n\n    //init, set watermark text and class\n    $('#search').val(watermark).addClass('watermark');\n\n    //if blur and no value inside, set watermark text and class again.\n    $('#search').blur(function(){\n        if ($(this).val().length == 0){\n            $(this).val(watermark).addClass('watermark');\n        }\n    });\n\n    //if focus and text is watermrk, set it to empty and remove the watermark class\n    $('#search').focus(function(){\n        if ($(this).val() == watermark){\n            $(this).val('').removeClass('watermark');\n        }\n    });\n\n\n    $('input[name=\"search\"]').keyup(function(){\n        var searchterm = $(this).val();\n        if(searchterm.length > 1) {\n            var match = $('tr.data-row:containsIN(\"' + searchterm + '\")');\n            var nomatch = $('tr.data-row:not(:containsIN(\"' + searchterm + '\"))');\n            match.addClass('selected');\n            nomatch.css(\"display\", \"none\");\n        } else {\n            $('tr.data-row').css(\"display\", \"\");\n            $('tr.data-row').removeClass('selected');\n        }\n    });\n\n    $(\"#manager_dialog\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 200,\n        title: \"<?php echo $LANG['admin_action']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    $(\"#user_management_dialog\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 600,\n        height: 550,\n        title: \"<?php echo $LANG['dialog_admin_user_edit_title']; ?>\",\n        open:  function() {\n            $(\"#user_edit_functions_list, #user_edit_managedby, #user_edit_auth, #user_edit_forbid\").empty();\n            $(\".ui-dialog-buttonpane button:contains('<?php echo $LANG['save_button']; ?>')\").button(\"disable\");\n            $(\"#user_edit_error\").html(\"\").hide();\n            $.post(\n                \"sources/users.queries.php\",\n                {\n                    type : \"get_user_info\",\n                    id   : 9,\n                    key  : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    if (data.error === \"no\") {\n                        $(\".ui-dialog-buttonpane button:contains('<?php echo $LANG['save_button']; ?>')\").button(\"enable\");\n\n                        $(\"#user_edit_login\").val(data.log);\n                        $(\"#user_edit_name\").val(data.name);\n                        $(\"#user_edit_lastname\").val(data.lastname);\n                        $(\"#user_edit_email\").val(data.email);\n                        $(\"#user_edit_info\").html(data.info);\n\n                        $(\"#user_edit_functions_list\").append(data.function);\n                        $(\"#user_edit_functions_list\").multiselect('refresh');\n\n                        $(\"#user_edit_managedby\").append(data.managedby);\n                        $(\"#user_edit_managedby\").multiselect({\n                            multiple: false,\n                            header: \"<?php echo $LANG['select']; ?>\",\n                            noneSelectedText: \"<?php echo $LANG['select']; ?>\",\n                            selectedList: 1\n                        }, 'refresh');\n\n                        $(\"#user_edit_auth\").append(data.foldersAllow);\n                        $(\"#user_edit_auth\").multiselect('refresh');\n\n                        $(\"#user_edit_forbid\").append(data.foldersForbid);\n                        $(\"#user_edit_forbid\").multiselect('refresh');\n\n                        $(\"#user_edit_wait\").hide();\n                        $(\"#user_edit_div\").show();\n                    } else {\n                        $(\"#user_edit_error\").html(\"<?php echo $LANG['error_unknown']; ?>\").show();\n                        $(\"#user_edit_wait\").hide();\n                        $(\"#user_edit_div\").show();\n                    }\n                },\n                \"json\"\n            );\n\n            $(\"#user_edit_error, #user_edit_warning_bottom\").hide().html(\"\");\n        },\n        buttons: {\n            \"<?php echo $LANG['save_button']; ?>\": function() {\n                var functions = managedby = allowFld = forbidFld = action_on_user = \"\";\n                // manage the multiselect boxes\n                $(\"#user_edit_functions_list option:selected\").each(function () {\n                    functions += $(this).val() + \";\";\n                });\n                $(\"#user_edit_managedby option:selected\").each(function () {\n                    managedby = $(this).val();\n                });\n                $(\"#user_edit_auth option:selected\").each(function () {\n                    allowFld += $(this).val() + \";\";\n                });\n                $(\"#user_edit_forbid option:selected\").each(function () {\n                    forbidFld += $(this).val() + \";\";\n                });\n\n                // manage the account status\n                $(\".chk:checked\").each(function() {\n                    if ($(this).val() == \"lock\") action_on_user = \"lock\";\n                    else if ($(this).val() == \"delete\") action_on_user = \"delete\";\n                    else if ($(this).val() == \"unlock\") action_on_user = \"unlock\";\n                });\n\n\n                //prepare data\n                var data = '{\"login\":\"'+sanitizeString($('#user_edit_login').val())+'\", '+\n                    '\"name\":\"'+sanitizeString($('#user_edit_name').val())+'\", '+\n                    '\"lastname\":\"'+sanitizeString($('#user_edit_lastname').val())+'\", '+\n                    '\"email\":\"'+sanitizeString($('#user_edit_email').val())+'\", '+\n                    '\"action_on_user\":\"'+sanitizeString(action_on_user)+'\", '+\n                    '\"functions\":\"'+functions+'\", '+\n                    '\"managedby\":\"'+managedby+'\", '+\n                    '\"allowFld\":\"'+allowFld+'\", '+\n                    '\"forbidFld\":\"'+forbidFld+'\"}';\n\n                $(\"#user_edit_wait\").show();\n                $.post(\n                    \"sources/users.queries.php\",\n                    {\n                        type    : \"store_user_changes\",\n                        id      : $('#user_edit_id').val(),\n                        data    : prepareExchangedData(data, \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key     : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        if (data[0].error !==\"no\") {\n                            $(\"#user_edit_error\").html(data[0].error).show(1).delay(2000).fadeOut(1000);\n                            $(\"#user_edit_wait\").hide();\n                            $(\".chk\").attr(\"checked\", false);\n                        } else {\n                            // refresh table content\n                            tableUsers.api().ajax.reload();\n                            $(\"#user_management_dialog\").dialog(\"close\");\n                        }\n                    },\n                    \"json\"\n                );\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(\"#user_edit_error, #user_edit_warning_bottom\").hide().html(\"\");\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n\n    $(\"#share_rights_dialog\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 600,\n        height: 400,\n        title: \"<?php echo $LANG['share_user_rights']; ?>\",\n        open:  function() {\n            $(\".ui-dialog-buttonpane button:contains('<?php echo $LANG['save_button']; ?>')\").button(\"disable\");\n            $.post(\n                \"sources/users.queries.php\",\n                {\n                    type : \"get_list_of_users_for_sharing\",\n                    key  : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    if (data.error === \"\") {\n                        $(\".ui-dialog-buttonpane button:contains('<?php echo $LANG['save_button']; ?>')\").button(\"enable\");\n\n                        $(\"#share_rights_from\").append(data.users_list_from);\n                        $(\"#share_rights_from\").multiselect({\n                            multiple: false,\n                            header: \"<?php echo $LANG['select']; ?>\",\n                            noneSelectedText: \"<?php echo $LANG['select']; ?>\",\n                            selectedList: 1,\n                            maxWidth: \"300px;\"\n                        }, 'refresh');\n\n                        $(\"#share_rights_to\").append(data.users_list_to);\n                        $(\"#share_rights_to\").multiselect({\n                            multiple: true,\n                            header: \"<?php echo $LANG['select']; ?>\",\n                            noneSelectedText: \"<?php echo $LANG['select']; ?>\",\n                            selectedList: 7,\n                            maxWidth: \"300px;\"\n                        }, 'refresh');\n\n                        get_user_rights();\n                    } else {\n                        $(\"#share_rights_dialog_error\").html(\"<?php echo $LANG['error_unknown']; ?>\");\n                    }\n                }\n            );\n        },\n        close:  function() {\n            $(\"#share_rights_from, #share_rights_to\").empty();\n            $(\"#share_rights_details_1, share_rights_details_2, share_rights_details_3, share_rights_details_4\").html(\"\");\n            $(\"#share_rights_details_ids_1, #share_rights_details_ids_2, #share_rights_details_ids_3, #share_rights_details_ids_4\").val(\"\");\n        },\n        buttons: {\n            \"<?php echo $LANG['save_button']; ?>\": function() {\n                $(\"#share_rights_dialog_msg\").html(\"<?php echo '<i class=\\\"fa fa-cog fa-spin fa-2x\\\"></i>&nbsp;'.$LANG['please_wait']; ?>\").show();\n\n                // destination users\n                var destination_ids = '';\n                $(\"#share_rights_to option:selected\").each(function () {\n                    if ($(this).val() !== $(\"#share_rights_from\").val()) {\n                        if (destination_ids === \"\") {\n                            destination_ids = $(this).attr('id').split('-')[1];\n                        } else {\n                            destination_ids += \";\" + $(this).attr('id').split('-')[1];\n                        }\n                    }\n                });\n\n                if (destination_ids === \"\") {\n                    $(\"#share_rights_dialog_msg\").html(\"\").hide();\n                    return false;\n                }\n\n                $.post(\n                    \"sources/users.queries.php\",\n                    {\n                        type            : \"update_users_rights_sharing\",\n                        source_id       : $(\"#share_rights_from option:selected\").attr('id').split('-')[1],\n                        destination_ids : destination_ids,\n                        user_functions  : $(\"#share_rights_details_ids_1\").val(),\n                        user_managedby  : $(\"#share_rights_details_ids_2\").val(),\n                        user_fldallowed : $(\"#share_rights_details_ids_3\").val(),\n                        user_fldforbid  : $(\"#share_rights_details_ids_4\").val(),\n                        user_otherrights: $(\"#share_rights_details_other\").val(),\n                        key             : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        $(\"#share_rights_dialog_msg\").hide();\n                        $(\"#share_rights_from\").empty();\n                        $(\"#share_rights_to option:selected\").prop(\"selected\", false);\n\n                        // refresh table content\n                        tableUsers.api().ajax.reload();\n\n                        // unselect destination users\n                        $(\"#share_rights_to\").multiselect(\"uncheckAll\");\n\n                        $(\"#share_rights_dialog_msg\").html(\"<?php echo '<i class=\\\"fa fa-check-circle fa-2x mi-green\\\"></i>&nbsp;'.$LANG['alert_message_done']; ?>\").show(0).delay(2000).hide(0);\n                    }\n                );\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n\n    $(\"#user_folders_rights_dialog\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 380,\n        height: 600,\n        title: \"<?php echo $LANG['user_s_rights_on_folders']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['close']; ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        open: function() {\n            $(\"#user_folders_rights_dialog_wait\").show();\n            $(\"#user_folders_rights_dialog_txt\").html(\"\");\n            $.post(\n                \"sources/users.queries.php\",\n                {\n                    type    : \"user_folders_rights\",\n                    id      : $('#user_folders_rights_dialog_id').val(),\n                    key     : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    $(\"#user_folders_rights_dialog_txt\").html(data.html);\n                    $(\"#user_folders_rights_dialog_wait\").hide();\n                }\n            );\n        }\n    });\n});\n\n/*\n* Adds some warnings when decision is to delete an account\n*/\nfunction confirmDeletion()\n{\n    if ($(\"#account_delete\").prop(\"checked\") === true) {\n        if ($(\"#confirm_deletion\").val() == \"\") {\n            $(\"#account_delete\").prop(\"checked\", false);\n            $(\"#confirm_deletion\").val(\"1\");\n            $(\"#user_edit_error\").show().html(\"<?php echo $LANG['user_info_delete']; ?>\");\n        } else {\n            $(\"#user_edit_error\").hide().html(\"\");\n            $(\"#user_edit_warning_bottom\").show().html(\"<?php echo $LANG['user_info_delete_warning']; ?>\");\n        }\n    } else {\n        $(\"#confirm_deletion\").val(\"\");\n        $(\"#user_edit_error, #user_edit_warning_bottom\").hide().html(\"\");\n        $(\"#user_edit_deletion_warning\").remove();\n    }\n}\n\nfunction pwGenerate(elem)\n{\n    console.log(\">> \"+elem);\n    $.post(\n        \"sources/main.queries.php\",\n        {\n            type    : \"generate_a_password\",\n            size    : Math.floor((8-5)*Math.random()) + 6,\n            num        : true,\n            maj        : true,\n            symb    : false,\n            fixed_elem    : 1,\n            elem    : elem,\n            force    : false\n        },\n        function(data) {\n            data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            if (data.error === \"true\") {\n                $(\"#div_dialog_message_text\").html(data.error_msg);\n                $(\"#div_dialog_message\").dialog(\"open\");\n            } else {\n                $(\"#\"+elem).val(data.key).focus();\n            }\n        }\n   );\n}\n\nfunction action_on_user(id, action)\n{\n    if (action == \"lock\") {\n        $(\"#user_action_html\").html(\"<?php echo $LANG['confirm_lock_account']; ?>\");\n    } else {\n        $(\"#user_action_html\").html(\"<?php echo $LANG['confirm_del_account']; ?>\");\n    }\n    $(\"#delete_user_action\").val(action);\n    $(\"#delete_user_login\").val($(\"#login_\"+id).text());\n    $(\"#delete_user_id\").val(id);\n    $(\"#delete_user_show_login\").html($(\"#login_\"+id).text());\n    $(\"#delete_user\").dialog(\"open\");\n}\n\nfunction mdp_user(id)\n{\n    $(\"#generated_user_pw_title, #generated_user_pw\").hide();\n    $(\"#change_user_pw_id\").val(id);\n    $(\"#change_user_pw_show_login\").html($(\"#user_login_\"+id).text());\n    $(\"#change_user_pw\").dialog(\"open\");\n}\n\nfunction ChangeUserParm(id, parameter, new_value)\n{\n    $.post(\"sources/users.queries.php\",\n        {\n            type    : parameter,\n            value   : new_value,\n            id      : id,\n            key        : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            $(\"#div_dialog_message_text\").html(\"<div style=\\\"font-size:16px; text-align:center;\\\"><span class=\\\"ui-icon ui-icon-info\\\" style=\\\"float: left; margin-right: .3em;\\\"></span><?php echo $LANG['alert_message_done']; ?></div>\");$(\"#div_dialog_message\").dialog(\"open\");\n\n        }\n   );\n}\n\nfunction Open_Div_Change(id,type)\n{\n    $(\"#div_loading\").show();\n    $.post(\"sources/users.queries.php\",\n        {\n            type    : \"open_div_\"+type,\n            id      : id,\n            key        : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            data = $.parseJSON(data);\n            $(\"#div_loading\").hide();\n            if (type == \"functions\") {\n                $(\"#change_user_functions_list\").html(data.text);\n                $(\"#selected_user\").val(id);\n                $(\"#change_user_functions\").dialog(\"open\");\n            } else if (type == \"autgroups\") {\n                $(\"#change_user_autgroups_list\").html(data.text);\n                $(\"#selected_user\").val(id);\n                $(\"#change_user_autgroups\").dialog(\"open\");\n            } else if (type == \"forgroups\") {\n                $(\"#change_user_forgroups_list\").html(data.text);\n                $(\"#selected_user\").val(id);\n                $(\"#change_user_forgroups\").dialog(\"open\");\n            }\n        }\n   );\n}\n\nfunction ChangeUSerAdminBy(id)\n{\n    $(\"#selected_user\").val(id);\n    $(\"#change_user_adminby\").dialog(\"open\");\n}\n\nfunction unlock_user(id)\n{\n    $.post(\"sources/users.queries.php\",\n        {\n            type    : \"unlock_account\",\n            id      : id,\n            key        : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            document.form_utilisateurs.submit();\n        }\n   );\n};\n\nfunction check_domain(email)\n{\n    $(\"#ajax_loader_new_mail\").show();\n\n    //extract domain from email\n    var atsign = email.substring(0,email.lastIndexOf(\"@\")+1);\n    var domain = email.substring(atsign.length,email.length+1);\n\n    //check if domain exists\n    $.post(\"sources/users.queries.php\",\n        {\n            type        : \"check_domain\",\n            domain      : domain\n        },\n        function(data) {\n            data = $.parseJSON(data);\n            $(\"#new_folder_role_domain\").attr(\"disabled\", \"disabled\");\n            if (data.folder == \"not_exists\" && data.role == \"not_exists\" && domain !=\"\") {\n                $(\"#new_folder_role_domain\").attr(\"disabled\", \"\");\n                $(\"#auto_create_folder_role_span\").html(domain);\n                $(\"#new_domain\").val(domain);\n                $(\"#auto_create_folder_role\").css('visibility', 'visible');\n            } else {\n                $(\"#auto_create_folder_role\").css('visibility', 'hidden');\n            }\n            $(\"#ajax_loader_new_mail\").hide();\n        }\n   );\n}\n\nfunction displayLogs(page, scope)\n{\n    $.post(\n        \"sources/users.queries.php\",\n        {\n            type                : \"user_log_items\",\n            page                : page,\n            nb_items_by_page    : $(\"#nb_items_by_page\").val(),\n            filter              : $(\"#activity_filter\").val(),\n            id                  : $(\"#selected_user\").val(),\n            scope               : scope\n        },\n        function(data) {console.log(\">>\" + data[0].table_logs);\n            if (data[0].error == \"no\") {\n                $(\"#tbody_logs\").empty().append(data[0].table_logs);\n                $(\"#log_pages\").empty().append(data[0].pages);\n            }\n        },\n        \"json\"\n   );\n}\n\nfunction user_action_log_items(id)\n{\n    $(\"#selected_user\").val(id);\n    $(\"#user_logs_dialog\").dialog(\"open\");\n}\n\nfunction user_action_ga_code(id)\n{\n    $(\"#div_loading\").show();\n    $.post(\n    \"sources/main.queries.php\",\n    {\n        type          : \"ga_generate_qr\",\n        id            : id,\n        demand_origin : \"users_management_list\",\n        send_email    : \"1\"\n    },\n    function(data) {\n        if (data[0].error == \"0\") {\n            $(\"#div_dialog_message_text\")\n                .html(\"<div><?php echo $LANG['share_sent_ok']; ?></div>\")\n                .addClass(\"ui-state-highlight ui-corner-all\");\n        } else {\n            if (data[0].error == \"no_email\") {\n                $(\"#div_dialog_message_text\").html(\"<?php echo $LANG['error_no_email']; ?>\");\n            } else if (data[0].error == \"no_user\") {\n                $(\"#div_dialog_message_text\").html(\"<?php echo $LANG['error_no_user']; ?>\");\n            } else if (data[0].error == \"not_allowed\") {\n                $(\"#div_dialog_message_text\").html(\"<?php echo $LANG['error_not_allowed_to']; ?>\");\n            }\n            $(\"#div_dialog_message_text\").addClass(\"ui-state-error ui-corner-all\");\n        }\n        $(\"#div_dialog_message\").dialog('open');\n        $(\"#div_loading\").hide();\n    },\n    \"json\"\n    );\n}\n\nfunction user_edit_login(id)\n{\n    $(\"#selected_user\").val(id);\n    $(\"#user_edit_login_dialog\").dialog(\"open\");\n}\n\n\n/**\n *\n * @access public\n * @return void\n **/\nfunction migrate_pf(user_id)\n{\n    $(\"#migrate_pf_admin_id\").val(user_id);\n    $('#migrate_pf_dialog').dialog('open');\n}\n\n/**\n*\n*/\nfunction user_edit(user_id)\n{\n    $(\"#user_edit_wait\").show();\n    $(\"#user_edit_div\").hide();\n    $(\"#user_edit_id\").val(user_id);\n    $('#user_management_dialog').dialog('open');\n}\n\n\n/**\n*\n*/\nfunction get_user_rights()\n{\n    if ($(\"#share_rights_from option:selected\").length === 0) return false;\n\n    var user_id = $(\"#share_rights_from option:selected\").attr('id').split('-')[1]\n    $.post(\n        \"sources/users.queries.php\",\n        {\n            type : \"get_user_info\",\n            id   : user_id,\n            key  : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            if (data.error == \"no\") {\n                $(\"#share_rights_details\").show();\n\n                // functions\n                var tmp = \"\", tmp2 = \"\";\n                var my_json = $.parseJSON(data.share_function);\n                $.each(my_json, function(k, v) {\n                    if (v['id'] !== \"\") {\n                        if (tmp === \"\") {\n                            tmp = v['title'];\n                            tmp2 = v['id'];\n                        } else {\n                            tmp += \" ; \" + v['title'];\n                            tmp2 += \";\"+v['id'];\n                        }\n                    }\n                });\n                $(\"#share_rights_details_1\").html(tmp);\n                $(\"#share_rights_details_ids_1\").val(tmp2);\n\n                // managed by\n                tmp = \"\";\n                tmp2 = \"\";\n                my_json = $.parseJSON(data.share_managedby);\n                $.each(my_json, function(k, v) {\n                    if (v['id'] !== \"\") {\n                        if (tmp === \"\") {\n                            tmp = v['title'];\n                            tmp2 = v['id'];\n                        } else {\n                            tmp += \" ; \" + v['title'];\n                            tmp2 += \";\"+v['id'];\n                        }\n                    }\n                });\n                $(\"#share_rights_details_2\").html(tmp);\n                $(\"#share_rights_details_ids_2\").val(tmp2);\n\n                // forbidden\n                tmp = \"\";\n                tmp2 = \"\";\n                my_json = $.parseJSON(data.share_forbidden);\n                $.each(my_json, function(k, v) {\n                    if (v['id'] !== \"\") {\n                        if (tmp === \"\") {\n                            tmp = v['title'];\n                            tmp2 = v['id'];\n                        } else {\n                            tmp += \" ; \" + v['title'];\n                            tmp2 += \";\"+v['id'];\n                        }\n                    }\n                });\n                $(\"#share_rights_details_4\").html(tmp === \"\" ? \"<?php echo $LANG['none']; ?>\" : tmp);\n                $(\"#share_rights_details_ids_4\").val(tmp2);\n\n                // allowed\n                tmp = \"\";\n                tmp2 = \"\";\n                my_json = $.parseJSON(data.share_allowed);\n                $.each(my_json, function(k, v) {\n                    if (v['id'] !== \"\") {\n                        if (tmp === \"\") {\n                            tmp = v['title'];\n                            tmp2 = v['id'];\n                        } else {\n                            tmp += \" ; \" + v['title'];\n                            tmp2 += \";\"+v['id'];\n                        }\n                    }\n                });\n                $(\"#share_rights_details_3\").html(tmp === \"\" ? \"<?php echo $LANG['none']; ?>\" : tmp);\n                $(\"#share_rights_details_ids_3\").val(tmp2);\n\n                $(\"#share_rights_details_other\").val(data.gestionnaire + \";\" + data.read_only + \";\" + data.can_create_root_folder + \";\" + data.personal_folder + \";\" + data.can_manage_all_users + \";\" + data.admin);\n            }\n        },\n        \"json\"\n    );\n}\n\n/**\n* SHOW USER FOLDERS\n*/\nfunction user_folders_rights(user_id)\n{\n    $(\"#user_folders_rights_dialog_id\").val(user_id);\n    $('#user_folders_rights_dialog').dialog('open');\n}\n\n/**\n *\n */\n function show_user_log(action)\n {\n     if (action == \"user_activity\") {\n         $(\"#span_user_activity_option\").show();\n         displayLogs(1,'user_activity');\n     } else {\n         $(\"#span_user_activity_option\").hide();\n         displayLogs(1,'user_mngt');\n     }\n}\n\n/**\n* permits to create an automatic login based upon name and lastname\n*/\nfunction loginCreation()\n{\n    $(\"#new_login\").val($(\"#new_name\").val().toLowerCase().replace(/ /g,\"\")+\".\"+$(\"#new_lastname\").val().toLowerCase().replace(/ /g,\"\"));\n    login_exists($(\"#new_login\").val());\n}\n\n/**\n* Launches a query to identify if login exists\n*/\nfunction login_exists(text) {\n    $.post(\n        \"sources/users.queries.php\",\n        {\n            type    : \"is_login_available\",\n            login   : text,\n            key     : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            if (data[0].error === \"\") {\n                if (data[0].exists === \"0\") {\n                    $(\"#new_login_status\").html('<span class=\"fa fa-check mi-green\"></span>').show();\n                } else {\n                    $(\"#new_login_status\").html('<span class=\"fa fa-minus-circle mi-red\"></span>').show();\n                }\n            }\n        },\n        \"json\"\n    );\n}\n\n\nfunction htmlspecialchars_decode (string, quote_style)\n{\n    if (string != null && string != \"\") {\n        // Convert special HTML entities back to characters\n        var optTemp = 0, i = 0, noquotes= false;\n        if (typeof quote_style === 'undefined') {        quote_style = 2;\n        }\n        string = string.toString().replace(/&lt;/g, '<').replace(/&gt;/g, '>');\n        var OPTS = {\n            'ENT_NOQUOTES': 0,\n            'ENT_HTML_QUOTE_SINGLE' : 1,\n            'ENT_HTML_QUOTE_DOUBLE' : 2,\n            'ENT_COMPAT': 2,\n            'ENT_QUOTES': 3,\n            'ENT_IGNORE' : 4\n        };\n        if (quote_style === 0) {\n            noquotes = true;\n        }\n        if (typeof quote_style !== 'number') { // Allow for a single string or an array of string flags\n            quote_style = [].concat(quote_style);\n            for (i=0; i < quote_style.length; i++) {\n                // Resolve string input to bitwise e.g. 'PATHINFO_EXTENSION' becomes 4\n                if (OPTS[quote_style[i]] === 0) {\n                    noquotes = true;\n                } else if (OPTS[quote_style[i]]) {\n                    optTemp = optTemp | OPTS[quote_style[i]];\n                }\n            }\n            quote_style = optTemp;\n        }\n        if (quote_style & OPTS.ENT_HTML_QUOTE_SINGLE) {\n            string = string.replace(/&#0*39;/g, \"'\"); // PHP doesn't currently escape if more than one 0, but it should\n            // string = string.replace(/&apos;|&#x0*27;/g, \"'\"); // This would also be useful here, but not a part of PHP\n        }\n        if (!noquotes) {\n            string = string.replace(/&quot;/g, '\"');\n        }\n\n        string = string.replace(/&nbsp;/g, ' ');\n\n        // Put this in last place to avoid escape being double-decoded    string = string.replace(/&amp;/g, '&');\n    }\n\n    return string;\n}\n//]]>\n</script>\n"], "filenames": ["sources/users.queries.php", "users.load.php"], "buggy_code_start_loc": [81, 149], "buggy_code_end_loc": [1640, 1040], "fixing_code_start_loc": [80, 149], "fixing_code_end_loc": [1601, 920], "type": "CWE-269", "message": "TeamPass before 2.1.27.9 does not properly enforce manager access control when requesting users.queries.php. It is then possible for a manager user to delete an arbitrary user (including admin), or modify attributes of any arbitrary user except administrator. To exploit the vulnerability, an authenticated attacker must have the manager rights on the application, then tamper with the requests sent directly, for example by changing the \"id\" parameter when invoking \"delete_user\" on users.queries.php.", "other": {"cve": {"id": "CVE-2017-15052", "sourceIdentifier": "cve@mitre.org", "published": "2017-11-27T19:29:00.267", "lastModified": "2019-10-03T00:03:26.223", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TeamPass before 2.1.27.9 does not properly enforce manager access control when requesting users.queries.php. It is then possible for a manager user to delete an arbitrary user (including admin), or modify attributes of any arbitrary user except administrator. To exploit the vulnerability, an authenticated attacker must have the manager rights on the application, then tamper with the requests sent directly, for example by changing the \"id\" parameter when invoking \"delete_user\" on users.queries.php."}, {"lang": "es", "value": "Las versiones anteriores a la 2.1.27.9 de TeamPass no aplican correctamente el control de acceso de managers al solicitar users.queries.php. En ese caso, es posible que un usuario manager elimine un usuario arbitrario (incluyendo a un administrador) o que modifique atributos de cualquier usuario arbitrario excepto un administrador. Para explotar la vulnerabilidad, un atacante autenticado debe tener los derechos de manager de la aplicaci\u00f3n y alterar las peticiones enviadas directamente, por ejemplo cambiando el par\u00e1metro \"id\" al invocar \"delete_user\" en users.queries.php."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 4.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-269"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:teampass:teampass:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.27.9", "matchCriteriaId": "35D9C25C-1C7F-404B-B27E-00B1BC77A868"}]}]}], "references": [{"url": "http://blog.amossys.fr/teampass-multiple-cve-01.html", "source": "cve@mitre.org", "tags": ["Exploit", "Technical Description", "Third Party Advisory"]}, {"url": "https://github.com/nilsteampassnet/TeamPass/commit/8f2d51dd6c24f76e4f259d0df22cff9b275f2dd1", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/nilsteampassnet/TeamPass/commit/8f2d51dd6c24f76e4f259d0df22cff9b275f2dd1"}}