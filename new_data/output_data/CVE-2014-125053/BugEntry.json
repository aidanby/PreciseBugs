{"buggy_code": ["<?php\nif (!defined('GUESTBOOK_PATH')) die('Hacking attempt!');\n\nglobal $user;\n\ninclude(GUESTBOOK_PATH . 'include/functions.inc.php');\n\n$url_self = empty($page['start']) ? GUESTBOOK_URL : add_url_params(GUESTBOOK_URL, array('start' => $page['start']));\n\n// +-----------------------------------------------------------------------+\n// |                                actions                                |\n// +-----------------------------------------------------------------------+\nif (isset($_GET['action']))\n{\n  switch ($_GET['action'])\n  {\n    case 'edit_comment':\n    {\n      include_once(GUESTBOOK_PATH.'include/functions_comment.inc.php');\n      \n      check_input_parameter('comment_to_edit', $_GET, false, PATTERN_ID);\n      $author_id = get_comment_author_id_guestbook($_GET['comment_to_edit']);\n\n      if (can_manage_comment('edit', $author_id))\n      {\n        if (!empty($_POST['content']))\n        {\n          check_pwg_token();\n          $comment_action = update_user_comment_guestbook(\n            array(\n              'comment_id' => $_GET['comment_to_edit'],\n              'content' => $_POST['content']\n              ),\n            $_POST['key']\n            );\n\n          $perform_redirect = false;\n          switch ($comment_action)\n          {\n            case 'moderate':\n              $_SESSION['page_infos'][] = l10n('An administrator must authorize your comment before it is visible.');\n            case 'validate':\n              $_SESSION['page_infos'][] = l10n('Your comment has been registered');\n              $perform_redirect = true;\n              break;\n            case 'reject':\n              $_SESSION['page_errors'][] = l10n('Your comment has NOT been registered because it did not pass the validation rules');\n              $perform_redirect = true;\n              break;\n            default:\n              trigger_error('Invalid comment action '.$comment_action, E_USER_WARNING);\n          }\n\n          if ($perform_redirect)\n          {\n            redirect($url_self);\n          }\n          unset($_POST['content']);\n        }\n        else\n        {\n          $edit_comment = $_GET['comment_to_edit'];\n        }\n      }\n      break;\n    }\n    case 'delete_comment' :\n    {\n      check_pwg_token();\n\n      include_once(GUESTBOOK_PATH.'include/functions_comment.inc.php');\n\n      check_input_parameter('comment_to_delete', $_GET, false, PATTERN_ID);\n\n      $author_id = get_comment_author_id_guestbook($_GET['comment_to_delete']);\n\n      if (can_manage_comment('delete', $author_id))\n      {\n        delete_user_comment_guestbook($_GET['comment_to_delete']);\n      }\n\n      redirect($url_self);\n    }\n    case 'validate_comment' :\n    {\n      check_pwg_token();\n\n      include_once(GUESTBOOK_PATH.'include/functions_comment.inc.php');\n\n      check_input_parameter('comment_to_validate', $_GET, false, PATTERN_ID);\n\n      $author_id = get_comment_author_id_guestbook($_GET['comment_to_validate']);\n\n      if (can_manage_comment('validate', $author_id))\n      {\n        validate_user_comment_guestbook($_GET['comment_to_validate']);\n      }\n\n      redirect($url_self);\n    }\n\n  }\n}\n\n// +-----------------------------------------------------------------------+\n// |                                add comment                            |\n// +-----------------------------------------------------------------------+\nif (isset($_POST['content']) && (!is_a_guest() || $conf['guestbook']['guest_can_add']))\n{\n  $comm = array(\n    'author' => trim(@$_POST['author']),\n    'email' => trim(@$_POST['email']),\n    'content' => trim($_POST['content']),\n    'website' => trim($_POST['website']),\n    'rate' => @$_POST['score'],\n   );\n\n  include_once(GUESTBOOK_PATH.'include/functions_comment.inc.php');\n\n  $comment_action = insert_user_comment_guestbook($comm, @$_POST['key']);\n\n  switch ($comment_action)\n  {\n    case 'moderate':\n      $page['infos'][] = l10n('An administrator must authorize your comment before it is visible.');\n    case 'validate':\n      $page['infos'][] = l10n('Your comment has been registered');\n      break;\n    case 'reject':\n      set_status_header(403);\n      $template->assign('GB_OPEN', true);\n      $page['errors'][] = l10n('Your comment has NOT been registered because it did not pass the validation rules');\n      break;\n    default:\n      trigger_error('Invalid comment action '.$comment_action, E_USER_WARNING);\n  }\n}\n\n// +-----------------------------------------------------------------------+\n// |                                display comments                       |\n// +-----------------------------------------------------------------------+\n$where_clauses = array('1=1');\nif (!is_admin())\n{\n  $where_clauses[] = 'validated = \\'true\\'';\n}\nif (isset($_GET['comment_id']))\n{\n  $where_clauses[] = 'com.id = '.pwg_db_real_escape_string($_GET['comment_id']);\n}\n\n// number of comments for this picture\n$query = '\nSELECT\n    COUNT(*) AS nb_comments\n  FROM '.GUESTBOOK_TABLE.' as com\n  WHERE '.implode(' AND ', $where_clauses).'\n;';\n$row = pwg_db_fetch_assoc(pwg_query($query));\n\n// navigation bar creation\n$page['start'] = 0;\nif (isset($_GET['start']))\n{\n  $page['start'] = $_GET['start'];\n}\n\n$navigation_bar = create_navigation_bar(\n  GUESTBOOK_URL,\n  $row['nb_comments'],\n  $page['start'],\n  $conf['guestbook']['nb_comment_page'],\n  false\n  );\n\n$template->assign(array(\n  'COMMENT_COUNT' => $row['nb_comments'],\n  'navbar' => $navigation_bar,\n  ));\n  \nif ($row['nb_comments'] > 0)\n{\n  $query = '\nSELECT\n    com.id,\n    author,\n    author_id,\n    '.$conf['user_fields']['username'].' AS username,\n    date,\n    content,\n    validated,\n    website,\n    rate,\n    email\n  FROM '.GUESTBOOK_TABLE.' AS com\n  LEFT JOIN '.USERS_TABLE.' AS u\n    ON u.'.$conf['user_fields']['id'].' = author_id\n  WHERE '.implode(' AND ', $where_clauses).'\n  ORDER BY date DESC\n  LIMIT '.$conf['guestbook']['nb_comment_page'].' OFFSET '.$page['start'].'\n;';\n  $result = pwg_query( $query );\n\n  while ($row = pwg_db_fetch_assoc($result))\n  {\n    if (!empty($row['author']))\n    {\n      $author = $row['author'];\n      if ($author == 'guest')\n      {\n        $author = l10n('guest');\n      }\n    }\n    else\n    {\n      $author = stripslashes($row['username']);\n    }\n\n    $tpl_comment = array(\n      'ID' => $row['id'],\n      'AUTHOR' => trigger_change('render_comment_author', $author),\n      'DATE' => format_date($row['date'], true),\n      'CONTENT' => trigger_change('render_comment_content', $row['content'], 'guestbook'),\n      'WEBSITE' => $row['website'],\n      );\n      \n    if ($conf['guestbook']['activate_rating'])\n    {\n      $tpl_comment['STARS'] = get_stars($row['rate'], get_root_url().GUESTBOOK_PATH .'template/jquery.raty/');\n    }\n      \n    if (is_admin() and !empty($row['email']))\n    {\n      $tpl_comment['EMAIL'] = $row['email'];\n    }\n\n    if (can_manage_comment('delete', $row['author_id']))\n    {\n      $tpl_comment['U_DELETE'] = add_url_params(\n        $url_self,\n        array(\n          'action'=>'delete_comment',\n          'comment_to_delete'=>$row['id'],\n          'pwg_token' => get_pwg_token(),\n          )\n        );\n    }\n    if (can_manage_comment('edit', $row['author_id']))\n    {\n      $tpl_comment['U_EDIT'] = add_url_params(\n        $url_self,\n        array(\n          'action'=>'edit_comment',\n          'comment_to_edit'=>$row['id'],\n          )\n        );\n        if (isset($edit_comment) and ($row['id'] == $edit_comment))\n        {\n          $tpl_comment['IN_EDIT'] = true;\n          $tpl_comment['KEY'] = get_ephemeral_key(2);\n          $tpl_comment['CONTENT'] = $row['content'];\n          $tpl_comment['PWG_TOKEN'] = get_pwg_token();\n          $tpl_comment['U_CANCEL'] = $url_self;\n        }\n    }\n    if (is_admin())\n    {\n      if ($row['validated'] != 'true')\n      {\n        $tpl_comment['U_VALIDATE'] = add_url_params(\n          $url_self,\n          array(\n            'action' => 'validate_comment',\n            'comment_to_validate' => $row['id'],\n            'pwg_token' => get_pwg_token(),\n            )\n          );\n      }\n    }\n    $template->append('comments', $tpl_comment);\n  }\n}\n\n$show_add_comment_form = !is_a_guest() || $conf['guestbook']['guest_can_add'];\nif (isset($edit_comment))\n{\n  $show_add_comment_form = false;\n}\n\nif ($show_add_comment_form)\n{\n  foreach (array('content','author','website','email') as $el)\n  {\n    ${$el} = '';\n    if ('reject'===@$comment_action and !empty($comm[$el]))\n    {\n      ${$el} = htmlspecialchars( stripslashes($comm[$el]) );\n    }\n  }\n  if (is_classic_user())\n  {\n    $author = $user['username'];\n    $email = $user['email'];\n  }\n  if (empty($conf['comments_email_mandatory'])) // < 2.5 compatibility\n  {\n    $conf['comments_email_mandatory'] = false;\n  }\n\n  $template->assign('comment_add',\n    array(\n      'F_ACTION' => $url_self,\n      'KEY' => get_ephemeral_key(3),\n      'CONTENT' => $content,\n      'IS_LOGGED' => is_classic_user(),\n      'AUTHOR' => $author,\n      'WEBSITE' => $website,\n      'EMAIL' => $email,\n      'ACTIVATE_RATING' => $conf['guestbook']['activate_rating'],\n      'EMAIL_MANDATORY' => $conf['comments_email_mandatory'],\n    ));\n}\n\n$template->assign(array(\n  'GUESTBOOK_PATH' => GUESTBOOK_PATH,\n  'ABS_GUESTBOOK_PATH' => realpath(GUESTBOOK_PATH) . '/',\n  ));\n\n$template->set_filename('guestbook', realpath(GUESTBOOK_PATH . 'template/guestbook.tpl'));\n$template->assign_var_from_handle('CONTENT', 'guestbook');\n"], "fixing_code": ["<?php\nif (!defined('GUESTBOOK_PATH')) die('Hacking attempt!');\n\nglobal $user;\n\ninclude(GUESTBOOK_PATH . 'include/functions.inc.php');\n\n$url_self = empty($page['start']) ? GUESTBOOK_URL : add_url_params(GUESTBOOK_URL, array('start' => $page['start']));\n\n// +-----------------------------------------------------------------------+\n// |                                actions                                |\n// +-----------------------------------------------------------------------+\nif (isset($_GET['action']))\n{\n  switch ($_GET['action'])\n  {\n    case 'edit_comment':\n    {\n      include_once(GUESTBOOK_PATH.'include/functions_comment.inc.php');\n      \n      check_input_parameter('comment_to_edit', $_GET, false, PATTERN_ID);\n      $author_id = get_comment_author_id_guestbook($_GET['comment_to_edit']);\n\n      if (can_manage_comment('edit', $author_id))\n      {\n        if (!empty($_POST['content']))\n        {\n          check_pwg_token();\n          $comment_action = update_user_comment_guestbook(\n            array(\n              'comment_id' => $_GET['comment_to_edit'],\n              'content' => $_POST['content']\n              ),\n            $_POST['key']\n            );\n\n          $perform_redirect = false;\n          switch ($comment_action)\n          {\n            case 'moderate':\n              $_SESSION['page_infos'][] = l10n('An administrator must authorize your comment before it is visible.');\n            case 'validate':\n              $_SESSION['page_infos'][] = l10n('Your comment has been registered');\n              $perform_redirect = true;\n              break;\n            case 'reject':\n              $_SESSION['page_errors'][] = l10n('Your comment has NOT been registered because it did not pass the validation rules');\n              $perform_redirect = true;\n              break;\n            default:\n              trigger_error('Invalid comment action '.$comment_action, E_USER_WARNING);\n          }\n\n          if ($perform_redirect)\n          {\n            redirect($url_self);\n          }\n          unset($_POST['content']);\n        }\n        else\n        {\n          $edit_comment = $_GET['comment_to_edit'];\n        }\n      }\n      break;\n    }\n    case 'delete_comment' :\n    {\n      check_pwg_token();\n\n      include_once(GUESTBOOK_PATH.'include/functions_comment.inc.php');\n\n      check_input_parameter('comment_to_delete', $_GET, false, PATTERN_ID);\n\n      $author_id = get_comment_author_id_guestbook($_GET['comment_to_delete']);\n\n      if (can_manage_comment('delete', $author_id))\n      {\n        delete_user_comment_guestbook($_GET['comment_to_delete']);\n      }\n\n      redirect($url_self);\n    }\n    case 'validate_comment' :\n    {\n      check_pwg_token();\n\n      include_once(GUESTBOOK_PATH.'include/functions_comment.inc.php');\n\n      check_input_parameter('comment_to_validate', $_GET, false, PATTERN_ID);\n\n      $author_id = get_comment_author_id_guestbook($_GET['comment_to_validate']);\n\n      if (can_manage_comment('validate', $author_id))\n      {\n        validate_user_comment_guestbook($_GET['comment_to_validate']);\n      }\n\n      redirect($url_self);\n    }\n\n  }\n}\n\n// +-----------------------------------------------------------------------+\n// |                                add comment                            |\n// +-----------------------------------------------------------------------+\nif (isset($_POST['content']) && (!is_a_guest() || $conf['guestbook']['guest_can_add']))\n{\n  $comm = array(\n    'author' => trim(@$_POST['author']),\n    'email' => trim(@$_POST['email']),\n    'content' => trim($_POST['content']),\n    'website' => trim($_POST['website']),\n    'rate' => @$_POST['score'],\n   );\n\n  include_once(GUESTBOOK_PATH.'include/functions_comment.inc.php');\n\n  $comment_action = insert_user_comment_guestbook($comm, @$_POST['key']);\n\n  switch ($comment_action)\n  {\n    case 'moderate':\n      $page['infos'][] = l10n('An administrator must authorize your comment before it is visible.');\n    case 'validate':\n      $page['infos'][] = l10n('Your comment has been registered');\n      break;\n    case 'reject':\n      set_status_header(403);\n      $template->assign('GB_OPEN', true);\n      $page['errors'][] = l10n('Your comment has NOT been registered because it did not pass the validation rules');\n      break;\n    default:\n      trigger_error('Invalid comment action '.$comment_action, E_USER_WARNING);\n  }\n}\n\n// +-----------------------------------------------------------------------+\n// |                                display comments                       |\n// +-----------------------------------------------------------------------+\n$where_clauses = array('1=1');\nif (!is_admin())\n{\n  $where_clauses[] = 'validated = \\'true\\'';\n}\nif (isset($_GET['comment_id']))\n{\n  $where_clauses[] = 'com.id = '.pwg_db_real_escape_string($_GET['comment_id']);\n}\n\n// number of comments for this picture\n$query = '\nSELECT\n    COUNT(*) AS nb_comments\n  FROM '.GUESTBOOK_TABLE.' as com\n  WHERE '.implode(' AND ', $where_clauses).'\n;';\n$row = pwg_db_fetch_assoc(pwg_query($query));\n\n// navigation bar creation\n$page['start'] = 0;\nif (isset($_GET['start']) && is_numeric($_GET['start']) && $_GET['start'] >= 0)\n{\n  $page['start'] = $_GET['start'];\n}\n\n$navigation_bar = create_navigation_bar(\n  GUESTBOOK_URL,\n  $row['nb_comments'],\n  $page['start'],\n  $conf['guestbook']['nb_comment_page'],\n  false\n  );\n\n$template->assign(array(\n  'COMMENT_COUNT' => $row['nb_comments'],\n  'navbar' => $navigation_bar,\n  ));\n  \nif ($row['nb_comments'] > 0)\n{\n  $query = '\nSELECT\n    com.id,\n    author,\n    author_id,\n    '.$conf['user_fields']['username'].' AS username,\n    date,\n    content,\n    validated,\n    website,\n    rate,\n    email\n  FROM '.GUESTBOOK_TABLE.' AS com\n  LEFT JOIN '.USERS_TABLE.' AS u\n    ON u.'.$conf['user_fields']['id'].' = author_id\n  WHERE '.implode(' AND ', $where_clauses).'\n  ORDER BY date DESC\n  LIMIT '.$conf['guestbook']['nb_comment_page'].' OFFSET '.$page['start'].'\n;';\n  $result = pwg_query( $query );\n\n  while ($row = pwg_db_fetch_assoc($result))\n  {\n    if (!empty($row['author']))\n    {\n      $author = $row['author'];\n      if ($author == 'guest')\n      {\n        $author = l10n('guest');\n      }\n    }\n    else\n    {\n      $author = stripslashes($row['username']);\n    }\n\n    $tpl_comment = array(\n      'ID' => $row['id'],\n      'AUTHOR' => trigger_change('render_comment_author', $author),\n      'DATE' => format_date($row['date'], true),\n      'CONTENT' => trigger_change('render_comment_content', $row['content'], 'guestbook'),\n      'WEBSITE' => $row['website'],\n      );\n      \n    if ($conf['guestbook']['activate_rating'])\n    {\n      $tpl_comment['STARS'] = get_stars($row['rate'], get_root_url().GUESTBOOK_PATH .'template/jquery.raty/');\n    }\n      \n    if (is_admin() and !empty($row['email']))\n    {\n      $tpl_comment['EMAIL'] = $row['email'];\n    }\n\n    if (can_manage_comment('delete', $row['author_id']))\n    {\n      $tpl_comment['U_DELETE'] = add_url_params(\n        $url_self,\n        array(\n          'action'=>'delete_comment',\n          'comment_to_delete'=>$row['id'],\n          'pwg_token' => get_pwg_token(),\n          )\n        );\n    }\n    if (can_manage_comment('edit', $row['author_id']))\n    {\n      $tpl_comment['U_EDIT'] = add_url_params(\n        $url_self,\n        array(\n          'action'=>'edit_comment',\n          'comment_to_edit'=>$row['id'],\n          )\n        );\n        if (isset($edit_comment) and ($row['id'] == $edit_comment))\n        {\n          $tpl_comment['IN_EDIT'] = true;\n          $tpl_comment['KEY'] = get_ephemeral_key(2);\n          $tpl_comment['CONTENT'] = $row['content'];\n          $tpl_comment['PWG_TOKEN'] = get_pwg_token();\n          $tpl_comment['U_CANCEL'] = $url_self;\n        }\n    }\n    if (is_admin())\n    {\n      if ($row['validated'] != 'true')\n      {\n        $tpl_comment['U_VALIDATE'] = add_url_params(\n          $url_self,\n          array(\n            'action' => 'validate_comment',\n            'comment_to_validate' => $row['id'],\n            'pwg_token' => get_pwg_token(),\n            )\n          );\n      }\n    }\n    $template->append('comments', $tpl_comment);\n  }\n}\n\n$show_add_comment_form = !is_a_guest() || $conf['guestbook']['guest_can_add'];\nif (isset($edit_comment))\n{\n  $show_add_comment_form = false;\n}\n\nif ($show_add_comment_form)\n{\n  foreach (array('content','author','website','email') as $el)\n  {\n    ${$el} = '';\n    if ('reject'===@$comment_action and !empty($comm[$el]))\n    {\n      ${$el} = htmlspecialchars( stripslashes($comm[$el]) );\n    }\n  }\n  if (is_classic_user())\n  {\n    $author = $user['username'];\n    $email = $user['email'];\n  }\n  if (empty($conf['comments_email_mandatory'])) // < 2.5 compatibility\n  {\n    $conf['comments_email_mandatory'] = false;\n  }\n\n  $template->assign('comment_add',\n    array(\n      'F_ACTION' => $url_self,\n      'KEY' => get_ephemeral_key(3),\n      'CONTENT' => $content,\n      'IS_LOGGED' => is_classic_user(),\n      'AUTHOR' => $author,\n      'WEBSITE' => $website,\n      'EMAIL' => $email,\n      'ACTIVATE_RATING' => $conf['guestbook']['activate_rating'],\n      'EMAIL_MANDATORY' => $conf['comments_email_mandatory'],\n    ));\n}\n\n$template->assign(array(\n  'GUESTBOOK_PATH' => GUESTBOOK_PATH,\n  'ABS_GUESTBOOK_PATH' => realpath(GUESTBOOK_PATH) . '/',\n  ));\n\n$template->set_filename('guestbook', realpath(GUESTBOOK_PATH . 'template/guestbook.tpl'));\n$template->assign_var_from_handle('CONTENT', 'guestbook');\n"], "filenames": ["include/guestbook.inc.php"], "buggy_code_start_loc": [163], "buggy_code_end_loc": [164], "fixing_code_start_loc": [163], "fixing_code_end_loc": [164], "type": "CWE-89", "message": "A vulnerability was found in Piwigo-Guest-Book up to 1.3.0. It has been declared as critical. This vulnerability affects unknown code of the file include/guestbook.inc.php of the component Navigation Bar. The manipulation of the argument start leads to sql injection. Upgrading to version 1.3.1 is able to address this issue. The name of the patch is 0cdd1c388edf15089c3a7541cefe7756e560581d. It is recommended to upgrade the affected component. VDB-217582 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2014-125053", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-06T23:15:09.483", "lastModified": "2023-01-12T15:27:02.683", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in Piwigo-Guest-Book up to 1.3.0. It has been declared as critical. This vulnerability affects unknown code of the file include/guestbook.inc.php of the component Navigation Bar. The manipulation of the argument start leads to sql injection. Upgrading to version 1.3.1 is able to address this issue. The name of the patch is 0cdd1c388edf15089c3a7541cefe7756e560581d. It is recommended to upgrade the affected component. VDB-217582 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:piwigo:guestbook:*:*:*:*:*:piwigo:*:*", "versionEndExcluding": "1.3.1", "matchCriteriaId": "F20007FE-B811-43DF-9521-A5D83FDD4A8A"}]}]}], "references": [{"url": "https://github.com/Piwigo/Piwigo-Guest-Book/commit/0cdd1c388edf15089c3a7541cefe7756e560581d", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Piwigo/Piwigo-Guest-Book/releases/tag/1.3.1", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217582", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://vuldb.com/?id.217582", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/Piwigo/Piwigo-Guest-Book/commit/0cdd1c388edf15089c3a7541cefe7756e560581d"}}