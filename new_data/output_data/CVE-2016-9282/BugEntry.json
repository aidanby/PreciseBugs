{"buggy_code": ["<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package Modules\n */\n\nclass searchController extends expController {\n    public $useractions = array(\n        'show'=>'Show Search Form',\n        'cloud'=>'Show Tag Cloud'\n    );\n    protected $manage_permissions = array(\n        'spider'=>'Spider Site',\n        'searchQueryReport'=>'Search Query Report',\n        'topSearchReport'=>'Top Search Report',\n    );\n    public $remove_configs = array(\n        'aggregation',\n        'categories',\n        'comments',\n        'ealerts',\n        'facebook',\n        'files',\n        'rss',\n        'tags',\n        'twitter',\n    );  // all options: ('aggregation','categories','comments','ealerts','facebook','files','pagination','rss','tags','twitter',)\n\n    static function displayname() { return gt(\"Search Form\"); }\n    static function description() { return gt(\"Add a form to allow users to search for content on your website.\"); }\n    static function hasSources() { return false; }\n    static function hasContent() { return false; }\n\n    public function search()\n    {\n        global $router;\n\n        $terms = $this->params['search_string'];\n\n        // If magic quotes is on and the user uses modifiers like \" (quotes) they get escaped. We don't want that in this case.\n        if (get_magic_quotes_gpc()) {\n            $terms = stripslashes($terms);\n        }\n        $terms = htmlspecialchars($terms);\n\n        if ($router->current_url == substr(URL_FULL, 0, -1)) {  // give us a user friendly url\n            unset($router->params['int']);\n//            unset($router->params['src']);\n//            $router->params['src'] = '1';\n            redirect_to($router->params);\n        }\n\n        $search = new search();\n\n        $page = new expPaginator(array(\n//            'model'=>'search',\n            'records'=>$search->getSearchResults($terms, !empty($this->config['only_best']), 0, !empty($this->config['eventlimit']) ? $this->config['eventlimit'] : null),\n            //'sql'=>$sql,\n            'limit'=>(isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10,\n            'order'=>'score',\n            'dir'=>'DESC',\n            'page' => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'dontsortwithincat'=>true,\n            'controller' => $this->params['controller'],\n            'action' => $this->params['action'],\n            'src' => $this->loc->src,\n        ));\n\n        if (!empty($this->config['is_categorized'])) {\n            $results = array();\n            foreach ($page->records as $hit) {\n                if (!isset($results[$hit->category])) {\n                    $results[$hit->category] = array();\n                }\n                $results[$hit->category][] = $hit;\n            }\n            assign_to_template(array(\n                'results'=>$results,\n            ));\n        }\n\n        // include CSS for results\n        // auto-include the CSS for pagination links\n\t    expCSS::pushToHead(array(\n//\t\t    \"unique\"=>\"search-results\",\n\t\t    \"link\"=>$this->asset_path.\"css/results.css\",\n\t\t    )\n\t\t);\n\n        assign_to_template(array(\n            'page'=>$page,\n            'terms'=>$terms,\n            'params'=>$this->params,\n        ));\n    }\n\n    public static function spider() {\n        global $db;\n\n        // reinitialize search index\n\t    $db->delete('search');\n\n        $mods = array();\n        // old school modules\n//\t    foreach (expModules::modules_list() as $mod) {\n////\t\t    $name = @call_user_func(array($mod,'name'));\n//            $name = @call_user_func(array($mod,'searchName'));\n//\t\t    if (class_exists($mod) && is_callable(array($mod,'spiderContent'))) {\n//                $mods[$name] = call_user_func(array($mod,'spiderContent'));\n//\t\t    }\n//\t    }\n\n        // 2.0 modules\n//\t    foreach (expModules::listControllers() as $ctlname=>$ctl) {\n        foreach (expModules::getActiveControllersList() as $ctl) {\n            $ctlname = expModules::getModuleClassName($ctl);\n\t\t    $controller = new $ctlname();\n\t\t    if (method_exists($controller,'isSearchable') && $controller->isSearchable()) {\n//\t\t\t    $mods[$controller->name()] = $controller->addContentToSearch();\n                $mods[$controller->searchName()] = $controller->addContentToSearch();\n\t\t    }\n\t    }\n\n\t    uksort($mods,'strnatcasecmp');\n\t    assign_to_template(array(\n            'mods'=>$mods\n        ));\n    }\n\n    public function show() {\n        //no need to do anything..we're just showing the form... so far! MUAHAHAHAHAHAAA!   what?\n//        redirect_to(array(\"controller\"=>'search',\"action\"=>'showall'));\n    }\n\n    public function showall() {\n//        redirect_to(array(\"controller\"=>'search',\"action\"=>'show'));\n//        $this->show();\n    }\n\n    /**\n     * tag cloud\n     */\n    function cloud() {\n        global $db;\n\n        expHistory::set('manageable', $this->params);\n        $page = new expPaginator(array(\n            'model'=>'expTag',\n            'where'=>null,\n//          'limit'=>999,\n            'order'=>\"title\",\n            'dontsortwithincat'=>true,\n            'controller'=>$this->baseclassname,\n            'action'=>$this->params['action'],\n            'src'=>static::hasSources() == true ? $this->loc->src : null,\n            'columns'=>array(gt('ID#')=>'id',gt('Title')=>'title',gt('Body')=>'body'),\n        ));\n\n//        foreach ($db->selectColumn('content_expTags','content_type',null,null,true) as $contenttype) {\n//            foreach ($page->records as $key => $value) {\n//                $attatchedat = $page->records[$key]->findWhereAttachedTo($contenttype);\n//                if (!empty($attatchedat)) {\n//                    $page->records[$key]->attachedcount = @$page->records[$key]->attachedcount + count($attatchedat);\n//                    $page->records[$key]->attached[$contenttype] = $attatchedat;\n//                }\n//            }\n//        }\n        $tags_list = array();\n        foreach ($page->records as $key=>$record) {\n            $count = $db->countObjects('content_expTags','exptags_id=' . $record->id);\n            if ($count) {\n                $page->records[$key]->attachedcount = $count;\n                $tags_list[$record->title] = new stdClass();\n                $tags_list[$record->title]->count = $count;\n                $tags_list[$record->title]->sef_url = $record->sef_url;\n                $tags_list[$record->title]->title = $record->title;\n            } else {\n                unset($page->records[$key]);\n            }\n        }\n        // trim the tag cloud to our limit.\n        $page->records = expSorter::sort(array('array'=>$page->records, 'order'=>'attachedcount DESC', 'type'=>'a'));\n        if (!empty($this->config['limit'])) $page->records = array_slice($page->records,0,$this->config['limit']);\n        if (!empty($this->config['order']) && $this->config['order'] != 'hits') {\n            $page->records = expSorter::sort(array('array'=>$page->records, 'order'=>'title ASC', 'ignore_case'=>true, 'sort_type'=>'a'));\n        }\n        assign_to_template(array(\n            'page'=>$page,\n            'tags_list'=>$tags_list\n        ));\n    }\n\n    // some general search stuff\n    public function autocomplete() {\n        return;  //fixme this negates the code below!\n        global $db;\n\n        $model = $this->params['model'];\n        $mod = new $model();\n        $srchcol = explode(\",\",$this->params['searchoncol']);\n        /*for ($i=0; $i<count($srchcol); $i++) {\n            if ($i>=1) $sql .= \" OR \";\n            $sql .= $srchcol[$i].' LIKE \\'%'.$this->params['query'].'%\\'';\n        }*/\n        //    $sql .= ' AND parent_id=0';\n        //eDebug($sql);\n\n        //$res = $mod->find('all',$sql,'id',25);\n        $sql = \"select DISTINCT(p.id), p.title, model, sef_url, f.id as fileid from \".$db->prefix.\"product as p INNER JOIN \".$db->prefix.\"content_expfiles as cef ON p.id=cef.content_id INNER JOIN \".$db->prefix.\"expfiles as f ON cef.expfiles_id = f.id where match (p.title,p.model,p.body) against ('\" . $this->params['query'] . \"') AND p.parent_id=0 order by match (p.title,p.model,p.body) against ('\" . $this->params['query'] . \"') desc LIMIT 25\";\n        //$res = $db->selectObjectsBySql($sql);\n        //$res = $db->selectObjectBySql('SELECT * FROM `exponent_product`');\n\n        $ar = new expAjaxReply(200, gt('Here\\'s the items you wanted'), $res);\n        $ar->send();\n    }\n\n\tpublic function searchQueryReport() {  //fixme this will typically create a 500 error due to number of search query records\n\t\tglobal $db;\n\n\t\t//Instantiate the search model\n\t\t$search = new search();\n\n\t\t//Store the keywords that returns nothing\n        $badSearch = array();\n\t\t$badSearchArr =  array();\n\n\t\t//User Records Initialization\n\t\t$all_user  = -1;\n\t\t$anonymous = -2;\n\t\t$uname = array('id'=>array($all_user, $anonymous), 'name'=>array('All Users', 'Anonymous'));\n\n\t\t$user_default = '';\n\t\t$where = '';\n\n\t\tif(isset($this->params['user_id']) && $this->params['user_id'] != -1) {\n\t\t\t$user_default = $this->params['user_id'];\n\t\t}\n\n\t\texpHistory::set('manageable', $this->params);\n\n\t\t$ctr  = 2;\n\t\t$ctr2 = 0;\n\n\t\t//Getting the search users\n\t\t$records = $db->selectObjects('search_queries');  // note we get all records a first time?\n\n\n\t\tforeach($records as $item) {\n\t\t\t$u = user::getUserById($item->user_id);\n\n\t\t\tif($item->user_id == 0) {\n\t\t\t\t$item->user_id = $anonymous;\n\t\t\t}\n\n\t\t\tif(!in_array($item->user_id, $uname['id'])) {\n\t\t\t\t$uname['name'][$ctr] = $u->firstname . ' ' . $u->lastname;\n\t\t\t\t$uname['id'][$ctr] = $item->user_id;\n\t\t\t\t$ctr++;\n\t\t\t}\n\n\t\t\t$result  = $search->getSearchResults($item->query, false, true);\n\t\t\tif(empty($result) && !in_array($item->query, $badSearchArr)) {\n\t\t\t\t$badSearchArr[] = $item->query;\n\t\t\t\t$badSearch[$ctr2]['query'] = $item->query;\n\t\t\t\t$badSearch[$ctr2]['count'] = $db->countObjects(\"search_queries\", \"query='{$item->query}'\");\n\t\t\t\t$ctr2++;\n\t\t\t}\n\n\t\t}\n\n\t\t//Check if the user choose from the dropdown\n\t\tif(!empty($user_default)) {\n\t\t\tif($user_default == $anonymous) {\n\t\t\t\t$u_id = 0;\n\t\t\t} else {\n\t\t\t\t$u_id = $user_default;\n\t\t\t}\n\t\t\t$where .= \"user_id = {$u_id}\";\n\t\t}\n\n\t\t//Get all the search query records\n\t\t$records = $db->selectObjects('search_queries', $where);  // note we then get all records a 2nd time?\n        for ($i = 0, $iMax = count($records); $i < $iMax; $i++) {\n\t\t\tif(!empty($records[$i]->user_id)) {\n\t\t\t\t$u = user::getUserById($records[$i]->user_id);\n\t\t\t\t$records[$i]->user = $u->firstname . ' ' . $u->lastname;\n\t\t\t}\n\t\t}\n\n        $page = new expPaginator(array(\n            'records' => $records,\n            'where'=>1,\n            'model'=>'search_queries',\n            'limit'=>(isset($this->config['limit']) && $this->config['limit'] != '') ? 10 : $this->config['limit'],\n            'order'=>empty($this->config['order']) ? 'timestamp' : $this->config['order'],\n            'page'=>(isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'=>$this->baseclassname,\n            'action'=>$this->params['action'],\n            'columns'=>array(\n                'ID'=>'id',\n                gt('Query')=>'query',\n                gt('Timestamp')=>'timestamp',\n                gt('User')=>'user_id',\n            ),\n        ));\n\n        $uname['id'] = implode($uname['id'],',');\n        $uname['name'] = implode($uname['name'],',');\n        assign_to_template(array(\n            'page'=>$page,\n            'users'=>$uname,\n            'user_default' => $user_default,\n            'badSearch' => $badSearch\n        ));\n\n\t}\n\n\tpublic function topSearchReport() {\n\t\tglobal $db;\n\n\t\t$limit = intval(TOP_SEARCH);\n\n\t\tif(empty($limit)) {\n\t\t\t$limit = 10;\n\t\t}\n\n\t\t$count   = $db->countObjects('search_queries');\n\n\t\t$records = $db->selectObjectsBySql(\"SELECT COUNT(query) cnt, query FROM \" .$db->prefix . \"search_queries GROUP BY query ORDER BY cnt DESC LIMIT 0, {$limit}\");\n\n        $records_key_arr = array();\n        $records_values_arr = array();\n\t\tforeach($records as $item) {\n\t\t\t$records_key_arr[] = '\"' . addslashes($item->query) . '\"';\n\t\t\t$records_values_arr[] = number_format((($item->cnt / $count)*100), 2);\n\t\t}\n\t\t$records_key   = implode(\",\", $records_key_arr);\n\t\t$records_values = implode(\",\", $records_values_arr);\n\n\t\tassign_to_template(array(\n            'records'=>$records,\n            'total'=>$count,\n            'limit' => $limit,\n            'records_key' => $records_key,\n            'records_values' => $records_values\n        ));\n\t}\n\n    function delete_search_queries() {\n        $sq = new search_queries();\n        $sqall = $sq->find('all');\n        if (!empty($sqall)) foreach ($sqall as $sqd) {\n            $sqd->delete();\n        }\n        flash('message', gt(\"Search Queries successfully deleted.\"));\n        expHistory::back();\n    }\n\n}\n\n?>"], "fixing_code": ["<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package Modules\n */\n\nclass searchController extends expController {\n    public $useractions = array(\n        'show'=>'Show Search Form',\n        'cloud'=>'Show Tag Cloud'\n    );\n    protected $manage_permissions = array(\n        'spider'=>'Spider Site',\n        'searchQueryReport'=>'Search Query Report',\n        'topSearchReport'=>'Top Search Report',\n    );\n    public $remove_configs = array(\n        'aggregation',\n        'categories',\n        'comments',\n        'ealerts',\n        'facebook',\n        'files',\n        'rss',\n        'tags',\n        'twitter',\n    );  // all options: ('aggregation','categories','comments','ealerts','facebook','files','pagination','rss','tags','twitter',)\n\n    static function displayname() { return gt(\"Search Form\"); }\n    static function description() { return gt(\"Add a form to allow users to search for content on your website.\"); }\n    static function hasSources() { return false; }\n    static function hasContent() { return false; }\n\n    public function search()\n    {\n        global $router;\n\n        $terms = $this->params['search_string'];\n\n        // If magic quotes is on and the user uses modifiers like \" (quotes) they get escaped. We don't want that in this case.\n        if (get_magic_quotes_gpc()) {\n            $terms = stripslashes($terms);\n        }\n        $terms = expString::escape(htmlspecialchars($terms));\n\n        if ($router->current_url == substr(URL_FULL, 0, -1)) {  // give us a user friendly url\n            unset($router->params['int']);\n//            unset($router->params['src']);\n//            $router->params['src'] = '1';\n            redirect_to($router->params);\n        }\n\n        $search = new search();\n\n        $page = new expPaginator(array(\n//            'model'=>'search',\n            'records'=>$search->getSearchResults($terms, !empty($this->config['only_best']), 0, !empty($this->config['eventlimit']) ? $this->config['eventlimit'] : null),\n            //'sql'=>$sql,\n            'limit'=>(isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10,\n            'order'=>'score',\n            'dir'=>'DESC',\n            'page' => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'dontsortwithincat'=>true,\n            'controller' => $this->params['controller'],\n            'action' => $this->params['action'],\n            'src' => $this->loc->src,\n        ));\n\n        if (!empty($this->config['is_categorized'])) {\n            $results = array();\n            foreach ($page->records as $hit) {\n                if (!isset($results[$hit->category])) {\n                    $results[$hit->category] = array();\n                }\n                $results[$hit->category][] = $hit;\n            }\n            assign_to_template(array(\n                'results'=>$results,\n            ));\n        }\n\n        // include CSS for results\n        // auto-include the CSS for pagination links\n\t    expCSS::pushToHead(array(\n//\t\t    \"unique\"=>\"search-results\",\n\t\t    \"link\"=>$this->asset_path.\"css/results.css\",\n\t\t    )\n\t\t);\n\n        assign_to_template(array(\n            'page'=>$page,\n            'terms'=>$terms,\n            'params'=>$this->params,\n        ));\n    }\n\n    public static function spider() {\n        global $db;\n\n        // reinitialize search index\n\t    $db->delete('search');\n\n        $mods = array();\n        // old school modules\n//\t    foreach (expModules::modules_list() as $mod) {\n////\t\t    $name = @call_user_func(array($mod,'name'));\n//            $name = @call_user_func(array($mod,'searchName'));\n//\t\t    if (class_exists($mod) && is_callable(array($mod,'spiderContent'))) {\n//                $mods[$name] = call_user_func(array($mod,'spiderContent'));\n//\t\t    }\n//\t    }\n\n        // 2.0 modules\n//\t    foreach (expModules::listControllers() as $ctlname=>$ctl) {\n        foreach (expModules::getActiveControllersList() as $ctl) {\n            $ctlname = expModules::getModuleClassName($ctl);\n\t\t    $controller = new $ctlname();\n\t\t    if (method_exists($controller,'isSearchable') && $controller->isSearchable()) {\n//\t\t\t    $mods[$controller->name()] = $controller->addContentToSearch();\n                $mods[$controller->searchName()] = $controller->addContentToSearch();\n\t\t    }\n\t    }\n\n\t    uksort($mods,'strnatcasecmp');\n\t    assign_to_template(array(\n            'mods'=>$mods\n        ));\n    }\n\n    public function show() {\n        //no need to do anything..we're just showing the form... so far! MUAHAHAHAHAHAAA!   what?\n//        redirect_to(array(\"controller\"=>'search',\"action\"=>'showall'));\n    }\n\n    public function showall() {\n//        redirect_to(array(\"controller\"=>'search',\"action\"=>'show'));\n//        $this->show();\n    }\n\n    /**\n     * tag cloud\n     */\n    function cloud() {\n        global $db;\n\n        expHistory::set('manageable', $this->params);\n        $page = new expPaginator(array(\n            'model'=>'expTag',\n            'where'=>null,\n//          'limit'=>999,\n            'order'=>\"title\",\n            'dontsortwithincat'=>true,\n            'controller'=>$this->baseclassname,\n            'action'=>$this->params['action'],\n            'src'=>static::hasSources() == true ? $this->loc->src : null,\n            'columns'=>array(gt('ID#')=>'id',gt('Title')=>'title',gt('Body')=>'body'),\n        ));\n\n//        foreach ($db->selectColumn('content_expTags','content_type',null,null,true) as $contenttype) {\n//            foreach ($page->records as $key => $value) {\n//                $attatchedat = $page->records[$key]->findWhereAttachedTo($contenttype);\n//                if (!empty($attatchedat)) {\n//                    $page->records[$key]->attachedcount = @$page->records[$key]->attachedcount + count($attatchedat);\n//                    $page->records[$key]->attached[$contenttype] = $attatchedat;\n//                }\n//            }\n//        }\n        $tags_list = array();\n        foreach ($page->records as $key=>$record) {\n            $count = $db->countObjects('content_expTags','exptags_id=' . $record->id);\n            if ($count) {\n                $page->records[$key]->attachedcount = $count;\n                $tags_list[$record->title] = new stdClass();\n                $tags_list[$record->title]->count = $count;\n                $tags_list[$record->title]->sef_url = $record->sef_url;\n                $tags_list[$record->title]->title = $record->title;\n            } else {\n                unset($page->records[$key]);\n            }\n        }\n        // trim the tag cloud to our limit.\n        $page->records = expSorter::sort(array('array'=>$page->records, 'order'=>'attachedcount DESC', 'type'=>'a'));\n        if (!empty($this->config['limit'])) $page->records = array_slice($page->records,0,$this->config['limit']);\n        if (!empty($this->config['order']) && $this->config['order'] != 'hits') {\n            $page->records = expSorter::sort(array('array'=>$page->records, 'order'=>'title ASC', 'ignore_case'=>true, 'sort_type'=>'a'));\n        }\n        assign_to_template(array(\n            'page'=>$page,\n            'tags_list'=>$tags_list\n        ));\n    }\n\n    // some general search stuff\n    public function autocomplete() {\n        return;  //fixme this negates the code below!\n        global $db;\n\n        $model = $this->params['model'];\n        $mod = new $model();\n        $srchcol = explode(\",\",$this->params['searchoncol']);\n        /*for ($i=0; $i<count($srchcol); $i++) {\n            if ($i>=1) $sql .= \" OR \";\n            $sql .= $srchcol[$i].' LIKE \\'%'.$this->params['query'].'%\\'';\n        }*/\n        //    $sql .= ' AND parent_id=0';\n        //eDebug($sql);\n\n        //$res = $mod->find('all',$sql,'id',25);\n        $sql = \"select DISTINCT(p.id), p.title, model, sef_url, f.id as fileid from \".$db->prefix.\"product as p INNER JOIN \".$db->prefix.\"content_expfiles as cef ON p.id=cef.content_id INNER JOIN \".$db->prefix.\"expfiles as f ON cef.expfiles_id = f.id where match (p.title,p.model,p.body) against ('\" . $this->params['query'] . \"') AND p.parent_id=0 order by match (p.title,p.model,p.body) against ('\" . $this->params['query'] . \"') desc LIMIT 25\";\n        //$res = $db->selectObjectsBySql($sql);\n        //$res = $db->selectObjectBySql('SELECT * FROM `exponent_product`');\n\n        $ar = new expAjaxReply(200, gt('Here\\'s the items you wanted'), $res);\n        $ar->send();\n    }\n\n\tpublic function searchQueryReport() {  //fixme this will typically create a 500 error due to number of search query records\n\t\tglobal $db;\n\n\t\t//Instantiate the search model\n\t\t$search = new search();\n\n\t\t//Store the keywords that returns nothing\n        $badSearch = array();\n\t\t$badSearchArr =  array();\n\n\t\t//User Records Initialization\n\t\t$all_user  = -1;\n\t\t$anonymous = -2;\n\t\t$uname = array('id'=>array($all_user, $anonymous), 'name'=>array('All Users', 'Anonymous'));\n\n\t\t$user_default = '';\n\t\t$where = '';\n\n\t\tif(isset($this->params['user_id']) && $this->params['user_id'] != -1) {\n\t\t\t$user_default = $this->params['user_id'];\n\t\t}\n\n\t\texpHistory::set('manageable', $this->params);\n\n\t\t$ctr  = 2;\n\t\t$ctr2 = 0;\n\n\t\t//Getting the search users\n\t\t$records = $db->selectObjects('search_queries');  // note we get all records a first time?\n\n\n\t\tforeach($records as $item) {\n\t\t\t$u = user::getUserById($item->user_id);\n\n\t\t\tif($item->user_id == 0) {\n\t\t\t\t$item->user_id = $anonymous;\n\t\t\t}\n\n\t\t\tif(!in_array($item->user_id, $uname['id'])) {\n\t\t\t\t$uname['name'][$ctr] = $u->firstname . ' ' . $u->lastname;\n\t\t\t\t$uname['id'][$ctr] = $item->user_id;\n\t\t\t\t$ctr++;\n\t\t\t}\n\n\t\t\t$result  = $search->getSearchResults($item->query, false, true);\n\t\t\tif(empty($result) && !in_array($item->query, $badSearchArr)) {\n\t\t\t\t$badSearchArr[] = $item->query;\n\t\t\t\t$badSearch[$ctr2]['query'] = $item->query;\n\t\t\t\t$badSearch[$ctr2]['count'] = $db->countObjects(\"search_queries\", \"query='{$item->query}'\");\n\t\t\t\t$ctr2++;\n\t\t\t}\n\n\t\t}\n\n\t\t//Check if the user choose from the dropdown\n\t\tif(!empty($user_default)) {\n\t\t\tif($user_default == $anonymous) {\n\t\t\t\t$u_id = 0;\n\t\t\t} else {\n\t\t\t\t$u_id = $user_default;\n\t\t\t}\n\t\t\t$where .= \"user_id = {$u_id}\";\n\t\t}\n\n\t\t//Get all the search query records\n\t\t$records = $db->selectObjects('search_queries', $where);  // note we then get all records a 2nd time?\n        for ($i = 0, $iMax = count($records); $i < $iMax; $i++) {\n\t\t\tif(!empty($records[$i]->user_id)) {\n\t\t\t\t$u = user::getUserById($records[$i]->user_id);\n\t\t\t\t$records[$i]->user = $u->firstname . ' ' . $u->lastname;\n\t\t\t}\n\t\t}\n\n        $page = new expPaginator(array(\n            'records' => $records,\n            'where'=>1,\n            'model'=>'search_queries',\n            'limit'=>(isset($this->config['limit']) && $this->config['limit'] != '') ? 10 : $this->config['limit'],\n            'order'=>empty($this->config['order']) ? 'timestamp' : $this->config['order'],\n            'page'=>(isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'=>$this->baseclassname,\n            'action'=>$this->params['action'],\n            'columns'=>array(\n                'ID'=>'id',\n                gt('Query')=>'query',\n                gt('Timestamp')=>'timestamp',\n                gt('User')=>'user_id',\n            ),\n        ));\n\n        $uname['id'] = implode($uname['id'],',');\n        $uname['name'] = implode($uname['name'],',');\n        assign_to_template(array(\n            'page'=>$page,\n            'users'=>$uname,\n            'user_default' => $user_default,\n            'badSearch' => $badSearch\n        ));\n\n\t}\n\n\tpublic function topSearchReport() {\n\t\tglobal $db;\n\n\t\t$limit = intval(TOP_SEARCH);\n\n\t\tif(empty($limit)) {\n\t\t\t$limit = 10;\n\t\t}\n\n\t\t$count   = $db->countObjects('search_queries');\n\n\t\t$records = $db->selectObjectsBySql(\"SELECT COUNT(query) cnt, query FROM \" .$db->prefix . \"search_queries GROUP BY query ORDER BY cnt DESC LIMIT 0, {$limit}\");\n\n        $records_key_arr = array();\n        $records_values_arr = array();\n\t\tforeach($records as $item) {\n\t\t\t$records_key_arr[] = '\"' . addslashes($item->query) . '\"';\n\t\t\t$records_values_arr[] = number_format((($item->cnt / $count)*100), 2);\n\t\t}\n\t\t$records_key   = implode(\",\", $records_key_arr);\n\t\t$records_values = implode(\",\", $records_values_arr);\n\n\t\tassign_to_template(array(\n            'records'=>$records,\n            'total'=>$count,\n            'limit' => $limit,\n            'records_key' => $records_key,\n            'records_values' => $records_values\n        ));\n\t}\n\n    function delete_search_queries() {\n        $sq = new search_queries();\n        $sqall = $sq->find('all');\n        if (!empty($sqall)) foreach ($sqall as $sqd) {\n            $sqd->delete();\n        }\n        flash('message', gt(\"Search Queries successfully deleted.\"));\n        expHistory::back();\n    }\n\n}\n\n?>"], "filenames": ["framework/modules/search/controllers/searchController.php"], "buggy_code_start_loc": [61], "buggy_code_end_loc": [62], "fixing_code_start_loc": [61], "fixing_code_end_loc": [62], "type": "CWE-89", "message": "SQL Injection in framework/modules/search/controllers/searchController.php in Exponent CMS v2.4.0 allows remote attackers to read database information via action=search&module=search with the search_string parameter.", "other": {"cve": {"id": "CVE-2016-9282", "sourceIdentifier": "cve@mitre.org", "published": "2016-11-11T22:59:00.187", "lastModified": "2017-07-28T01:29:08.080", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "SQL Injection in framework/modules/search/controllers/searchController.php in Exponent CMS v2.4.0 allows remote attackers to read database information via action=search&module=search with the search_string parameter."}, {"lang": "es", "value": "SQL Injection en framework/modules/search/controllers/searchController.php en Exponent CMS v2.4.0 permite a atacantes remotos leer informaci\u00f3n de la base de datos a trav\u00e9s del par\u00e1metro action=search&module=search with the search_string."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": true, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:exponentcms:exponent_cms:2.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "CFEAA82F-83B2-49B8-B860-2F18C3C66321"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/94296", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securitytracker.com/id/1037281", "source": "cve@mitre.org"}, {"url": "https://github.com/exponentcms/exponent-cms/commit/e83721a5b9fcc88e1141a8fb29c3d1bd522257c1", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch"]}]}, "github_commit_url": "https://github.com/exponentcms/exponent-cms/commit/e83721a5b9fcc88e1141a8fb29c3d1bd522257c1"}}