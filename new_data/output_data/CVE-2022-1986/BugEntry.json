{"buggy_code": ["# Changelog\n\nAll notable changes to Gogs are documented in this file.\n\n## 0.13.0+dev (`main`)\n\n### Added\n\n- An unlisted option is added when create or migrate a repository. Unlisted repositories are public but not being listed for users without direct access in the UI. [#5733](https://github.com/gogs/gogs/issues/5733)\n- New configuration option `[git.timeout] DIFF` for customizing operation timeout of `git diff`. [#6315](https://github.com/gogs/gogs/issues/6315)\n- New configuration option `[server] SSH_SERVER_MACS` for setting list of accepted MACs for connections to builtin SSH server. [#6434](https://github.com/gogs/gogs/issues/6434)\n- Support specifying custom schema for PostgreSQL. [#6695](https://github.com/gogs/gogs/pull/6695)\n- Support rendering Mermaid diagrams in Markdown. [#6776](https://github.com/gogs/gogs/pull/6776)\n- New languages support: Mongolian. [#6510](https://github.com/gogs/gogs/pull/6510)\n\n### Changed\n\n- The default branch has been changed to `main`. [#6285](https://github.com/gogs/gogs/pull/6285)\n- MSSQL as database backend is deprecated, installation page no longer shows it as an option. Existing installations and manually craft configuration file continue to work. [#6295](https://github.com/gogs/gogs/pull/6295)\n- Use [Task](https://github.com/go-task/task) as the build tool. [#6297](https://github.com/gogs/gogs/pull/6297)\n- The required Go version to compile source code changed to 1.16.\n\n### Fixed\n\n- Unable to use LDAP authentication on ARM machines. [#6761](https://github.com/gogs/gogs/issues/6761)\n- Unable to init repository during creation on Windows. [#6967](https://github.com/gogs/gogs/issues/6967)\n- Mysterious panic on `Value not found for type *repo.HTTPContext`. [#6963](https://github.com/gogs/gogs/issues/6963)\n\n### Removed\n\n- \u26a0\ufe0f Migrations before 0.12 are removed, installations not on 0.12 should upgrade to it to run the migrations and then upgrade to 0.13.\n- Configuration section `[mailer]` is no longer used, please use `[email]`.\n- Configuration section `[service]` is no longer used, please use `[auth]`.\n- Configuration option `APP_NAME` is no longer used, please use `BRAND_NAME`.\n- Configuration option `[security] REVERSE_PROXY_AUTHENTICATION_USER` is no longer used, please use `[auth] REVERSE_PROXY_AUTHENTICATION_HEADER`.\n- Configuration option `[auth] ACTIVE_CODE_LIVE_MINUTES` is no longer used, please use `[auth] ACTIVATE_CODE_LIVES`.\n- Configuration option `[auth] RESET_PASSWD_CODE_LIVE_MINUTES` is no longer used, please use `[auth] RESET_PASSWORD_CODE_LIVES`.\n- Configuration option `[auth] ENABLE_CAPTCHA` is no longer used, please use `[auth] ENABLE_REGISTRATION_CAPTCHA`.\n- Configuration option `[auth] ENABLE_NOTIFY_MAIL` is no longer used, please use `[user] ENABLE_EMAIL_NOTIFICATION`.\n- Configuration option `[auth] REGISTER_EMAIL_CONFIRM` is no longer used, please use `[auth] REQUIRE_EMAIL_CONFIRMATION`.\n- Configuration option `[session] GC_INTERVAL_TIME` is no longer used, please use `[session] GC_INTERVAL`.\n- Configuration option `[session] SESSION_LIFE_TIME` is no longer used, please use `[session] MAX_LIFE_TIME`.\n- Configuration option `[server] ROOT_URL` is no longer used, please use `[server] EXTERNAL_URL`.\n- Configuration option `[server] LANDING_PAGE` is no longer used, please use `[server] LANDING_URL`.\n- Configuration option `[database] DB_TYPE` is no longer used, please use `[database] TYPE`.\n- Configuration option `[database] PASSWD` is no longer used, please use `[database] PASSWORD`.\n- Remove option to use Makefile as the build tool. [#6980](https://github.com/gogs/gogs/pull/6980)\n\n## 0.12.8\n\n### Changed\n\n- All users (including admins) need to use the configuration option `[security] LOCAL_NETWORK_ALLOWLIST` to allow repository migration and webhooks to be able to access local network addresses, which is a comma separated list of hostnames. [#6988](https://github.com/gogs/gogs/pull/6988)\n\n### Fixed\n\n- _Security:_ SSRF in webhook. [#6901](https://github.com/gogs/gogs/issues/6901)\n- _Security:_ XSS in cookies. [#6953](https://github.com/gogs/gogs/issues/6953)\n- _Security:_ OS Command Injection in file uploading. [#6968](https://github.com/gogs/gogs/issues/6968)\n- _Security:_ Remote Command Execution in file editing. [#6555](https://github.com/gogs/gogs/issues/6555)\n\n## 0.12.7\n\n### Fixed\n\n- _Security:_ Stored XSS in issues. [#6919](https://github.com/gogs/gogs/issues/6919)\n- Invalid character in `Access-Control-Allow-Credentials` response header. [#4983](https://github.com/gogs/gogs/issues/4983)\n- Mysterious `ssh: overflow reading version string` errors from builtin SSH server. [#6882](https://github.com/gogs/gogs/issues/6882)\n\n## 0.12.6\n\n### Fixed\n\n- _Security:_ Remote command execution in file uploading. [#6833](https://github.com/gogs/gogs/issues/6833)\n- _Regression:_ Unable to migrate repository from other local Git hosting. Added a new configuration option `[security] LOCAL_NETWORK_ALLOWLIST`, which is a comma separated list of hostnames that are explicitly allowed to be accessed within the local network. [#6841](https://github.com/gogs/gogs/issues/6841)\n- Slow start of Docker containers using NAS devices. [#6554](https://github.com/gogs/gogs/issues/6554)\n\n## 0.12.5\n\n### Fixed\n\n- _Security:_ Potential SSRF in repository migration. [#6754](https://github.com/gogs/gogs/issues/6754)\n- _Security:_ Improper PAM authorization handling. [#6810](https://github.com/gogs/gogs/issues/6810)\n\n## 0.12.4\n\n### Fixed\n\n- _Security:_ Potential SSRF attack by CRLF injection via repository migration. [#6413](https://github.com/gogs/gogs/issues/6413)\n- _Regression:_ Fixed smart links for issues stops rendering. [#6506](https://github.com/gogs/gogs/issues/6506)\n- Added `X-Frame-Options` header to prevent Clickjacking. [#6409](https://github.com/gogs/gogs/issues/6409)\n\n## 0.12.3\n\n### Fixed\n\n- _Regression:_ When running Gogs on Windows, push commits no longer fail on a daily basis with the error \"pre-receive hook declined\". [#6316](https://github.com/gogs/gogs/issues/6316)\n- Auto-linked commit SHAs now have correct links. [#6300](https://github.com/gogs/gogs/issues/6300)\n- Git LFS client (with version >= 2.5.0) wasn't able to upload files with known format (e.g. PNG, JPEG), and the server is expecting the HTTP Header `Content-Type` to be `application/octet-stream`. The server now tells the LFS client to always use `Content-Type: application/octet-stream` when upload files.\n\n## 0.12.2\n\n### Fixed\n\n- _Regression:_ Pages are correctly rendered when requesting `?go-get=1` for subdirectories. [#6314](https://github.com/gogs/gogs/issues/6314)\n- _Regression:_ Submodule with a relative path is linked correctly. [#6319](https://github.com/gogs/gogs/issues/6319)\n- Backup can be processed when `--target` is specified on Windows. [#6339](https://github.com/gogs/gogs/issues/6339)\n- Commit message contains keywords look like an issue reference no longer fails the push entirely. [#6289](https://github.com/gogs/gogs/issues/6289)\n\n## 0.12.1\n\n### Fixed\n\n- The `updated_at` field is now correctly updated when updates an issue. [#6209](https://github.com/gogs/gogs/issues/6209)\n- Fixed a regression which created `login_source.cfg` column to have `VARCHAR(255)` instead of `TEXT` in MySQL. [#6280](https://github.com/gogs/gogs/issues/6280)\n\n## 0.12.0\n\n### Added\n\n- Support for Git LFS, you can read documentation for both [user](https://github.com/gogs/gogs/blob/main/docs/user/lfs.md) and [admin](https://github.com/gogs/gogs/blob/main/docs/admin/lfs.md). [#1322](https://github.com/gogs/gogs/issues/1322)\n- Allow admin to remove observers from the repository. [#5803](https://github.com/gogs/gogs/pull/5803)\n- Use `Last-Modified` HTTP header for raw files. [#5811](https://github.com/gogs/gogs/issues/5811)\n- Support syntax highlighting for SAS code files (i.e. `.r`, `.sas`, `.tex`, `.yaml`). [#5856](https://github.com/gogs/gogs/pull/5856)\n- Able to fill in pull request title with a template. [#5901](https://github.com/gogs/gogs/pull/5901)\n- Able to override static files under `public/` directory, please refer to [documentation](https://gogs.io/docs/features/custom_template) for usage. [#5920](https://github.com/gogs/gogs/pull/5920)\n- New API endpoint `GET /admin/teams/:teamid/members` to list members of a team. [#5877](https://github.com/gogs/gogs/issues/5877)\n- Support backup with retention policy for Docker deployments. [#6140](https://github.com/gogs/gogs/pull/6140)\n\n### Changed\n\n- The organization profile page has changed to display at most 12 members. [#5506](https://github.com/gogs/gogs/issues/5506)\n- The required Go version to compile source code changed to 1.14.\n- All assets are now embedded into binary and served from memory by default. Set `[server] LOAD_ASSETS_FROM_DISK = true` to load them from disk. [#5920](https://github.com/gogs/gogs/pull/5920)\n- Application and Go versions are removed from page footer and only show in the admin dashboard.\n- Build tag for running as Windows Service has been changed from `miniwinsvc` to `minwinsvc`.\n- Configuration option `APP_NAME` is deprecated and will end support in 0.13.0, please start using `BRAND_NAME`.\n- Configuration option `[server] ROOT_URL` is deprecated and will end support in 0.13.0, please start using `[server] EXTERNAL_URL`.\n- Configuration option `[server] LANDING_PAGE` is deprecated and will end support in 0.13.0, please start using `[server] LANDING_URL`.\n- Configuration option `[database] DB_TYPE` is deprecated and will end support in 0.13.0, please start using `[database] TYPE`.\n- Configuration option `[database] PASSWD` is deprecated and will end support in 0.13.0, please start using `[database] PASSWORD`.\n- Configuration option `[security] REVERSE_PROXY_AUTHENTICATION_USER` is deprecated and will end support in 0.13.0, please start using `[auth] REVERSE_PROXY_AUTHENTICATION_HEADER`.\n- Configuration section `[mailer]` is deprecated and will end support in 0.13.0, please start using `[email]`.\n- Configuration section `[service]` is deprecated and will end support in 0.13.0, please start using `[auth]`.\n- Configuration option `[auth] ACTIVE_CODE_LIVE_MINUTES` is deprecated and will end support in 0.13.0, please start using `[auth] ACTIVATE_CODE_LIVES`.\n- Configuration option `[auth] RESET_PASSWD_CODE_LIVE_MINUTES` is deprecated and will end support in 0.13.0, please start using `[auth] RESET_PASSWORD_CODE_LIVES`.\n- Configuration option `[auth] REGISTER_EMAIL_CONFIRM` is deprecated and will end support in 0.13.0, please start using `[auth] REQUIRE_EMAIL_CONFIRMATION`.\n- Configuration option `[auth] ENABLE_CAPTCHA` is deprecated and will end support in 0.13.0, please start using `[auth] ENABLE_REGISTRATION_CAPTCHA`.\n- Configuration option `[auth] ENABLE_NOTIFY_MAIL` is deprecated and will end support in 0.13.0, please start using `[user] ENABLE_EMAIL_NOTIFICATION`.\n- Configuration option `[session] GC_INTERVAL_TIME` is deprecated and will end support in 0.13.0, please start using `[session] GC_INTERVAL`.\n- Configuration option `[session] SESSION_LIFE_TIME` is deprecated and will end support in 0.13.0, please start using `[session] MAX_LIFE_TIME`.\n- The name `-` is reserved and cannot be used for users or organizations.\n\n### Fixed\n\n- [Security] Potential open redirection with i18n.\n- [Security] Potential ability to delete files outside a repository.\n- [Security] Potential ability to set primary email on others' behalf from their verified emails.\n- [Security] Potential XSS attack via `.ipynb`. [#5170](https://github.com/gogs/gogs/issues/5170)\n- [Security] Potential SSRF attack via webhooks. [#5366](https://github.com/gogs/gogs/issues/5366)\n- [Security] Potential CSRF attack in admin panel. [#5367](https://github.com/gogs/gogs/issues/5367)\n- [Security] Potential stored XSS attack in some browsers. [#5397](https://github.com/gogs/gogs/issues/5397)\n- [Security] Potential RCE on mirror repositories. [#5767](https://github.com/gogs/gogs/issues/5767)\n- [Security] Potential XSS attack with raw markdown API. [#5907](https://github.com/gogs/gogs/pull/5907)\n- File both modified and renamed within a commit treated as separate files. [#5056](https://github.com/gogs/gogs/issues/5056)\n- Unable to restore the database backup to MySQL 8.0 with syntax error. [#5602](https://github.com/gogs/gogs/issues/5602)\n- Open/close milestone redirects to a 404 page. [#5677](https://github.com/gogs/gogs/issues/5677)\n- Disallow multiple tokens with same name. [#5587](https://github.com/gogs/gogs/issues/5587) [#5820](https://github.com/gogs/gogs/pull/5820)\n- Enable Federated Avatar Lookup could cause server to crash. [#5848](https://github.com/gogs/gogs/issues/5848)\n- Private repositories are hidden in the organization's view. [#5869](https://github.com/gogs/gogs/issues/5869)\n- Users have access to base repository cannot view commits in forks. [#5878](https://github.com/gogs/gogs/issues/5878)\n- Server error when changing email address in user settings page. [#5899](https://github.com/gogs/gogs/issues/5899)\n- Fall back to use RFC 3339 as time layout when misconfigured. [#6098](https://github.com/gogs/gogs/issues/6098)\n- Unable to update team with server error. [#6185](https://github.com/gogs/gogs/issues/6185)\n- Webhooks are not fired after push when `[service] REQUIRE_SIGNIN_VIEW = true`.\n- Files with identical content are randomly displayed one of them.\n\n### Removed\n\n- Configuration option `[other] SHOW_FOOTER_VERSION`\n- Configuration option `[server] STATIC_ROOT_PATH`\n- Configuration option `[repository] MIRROR_QUEUE_LENGTH`\n- Configuration option `[repository] PULL_REQUEST_QUEUE_LENGTH`\n- Configuration option `[session] ENABLE_SET_COOKIE`\n- Configuration option `[release.attachment] PATH`\n- Configuration option `[webhook] QUEUE_LENGTH`\n- Build tag `sqlite`, which means CGO is now required.\n\n---\n\n**Older change logs can be found on [GitHub](https://github.com/gogs/gogs/releases?after=v0.12.0).**\n", "// Copyright 2016 The Gogs Authors. All rights reserved.\n// Use of this source code is governed by a MIT-style\n// license that can be found in the LICENSE file.\n\npackage db\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"mime/multipart\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/pkg/errors\"\n\tgouuid \"github.com/satori/go.uuid\"\n\t\"github.com/unknwon/com\"\n\n\t\"github.com/gogs/git-module\"\n\n\t\"gogs.io/gogs/internal/conf\"\n\t\"gogs.io/gogs/internal/cryptoutil\"\n\tdberrors \"gogs.io/gogs/internal/db/errors\"\n\t\"gogs.io/gogs/internal/gitutil\"\n\t\"gogs.io/gogs/internal/osutil\"\n\t\"gogs.io/gogs/internal/pathutil\"\n\t\"gogs.io/gogs/internal/process\"\n\t\"gogs.io/gogs/internal/tool\"\n)\n\nconst (\n\tENV_AUTH_USER_ID           = \"GOGS_AUTH_USER_ID\"\n\tENV_AUTH_USER_NAME         = \"GOGS_AUTH_USER_NAME\"\n\tENV_AUTH_USER_EMAIL        = \"GOGS_AUTH_USER_EMAIL\"\n\tENV_REPO_OWNER_NAME        = \"GOGS_REPO_OWNER_NAME\"\n\tENV_REPO_OWNER_SALT_MD5    = \"GOGS_REPO_OWNER_SALT_MD5\"\n\tENV_REPO_ID                = \"GOGS_REPO_ID\"\n\tENV_REPO_NAME              = \"GOGS_REPO_NAME\"\n\tENV_REPO_CUSTOM_HOOKS_PATH = \"GOGS_REPO_CUSTOM_HOOKS_PATH\"\n)\n\ntype ComposeHookEnvsOptions struct {\n\tAuthUser  *User\n\tOwnerName string\n\tOwnerSalt string\n\tRepoID    int64\n\tRepoName  string\n\tRepoPath  string\n}\n\nfunc ComposeHookEnvs(opts ComposeHookEnvsOptions) []string {\n\tenvs := []string{\n\t\t\"SSH_ORIGINAL_COMMAND=1\",\n\t\tENV_AUTH_USER_ID + \"=\" + com.ToStr(opts.AuthUser.ID),\n\t\tENV_AUTH_USER_NAME + \"=\" + opts.AuthUser.Name,\n\t\tENV_AUTH_USER_EMAIL + \"=\" + opts.AuthUser.Email,\n\t\tENV_REPO_OWNER_NAME + \"=\" + opts.OwnerName,\n\t\tENV_REPO_OWNER_SALT_MD5 + \"=\" + cryptoutil.MD5(opts.OwnerSalt),\n\t\tENV_REPO_ID + \"=\" + com.ToStr(opts.RepoID),\n\t\tENV_REPO_NAME + \"=\" + opts.RepoName,\n\t\tENV_REPO_CUSTOM_HOOKS_PATH + \"=\" + filepath.Join(opts.RepoPath, \"custom_hooks\"),\n\t}\n\treturn envs\n}\n\n// ___________    .___.__  __    ___________.__.__\n// \\_   _____/  __| _/|__|/  |_  \\_   _____/|__|  |   ____\n//  |    __)_  / __ | |  \\   __\\  |    __)  |  |  | _/ __ \\\n//  |        \\/ /_/ | |  ||  |    |     \\   |  |  |_\\  ___/\n// /_______  /\\____ | |__||__|    \\___  /   |__|____/\\___  >\n//         \\/      \\/                 \\/                 \\/\n\n// discardLocalRepoBranchChanges discards local commits/changes of\n// given branch to make sure it is even to remote branch.\nfunc discardLocalRepoBranchChanges(localPath, branch string) error {\n\tif !com.IsExist(localPath) {\n\t\treturn nil\n\t}\n\n\t// No need to check if nothing in the repository.\n\tif !git.RepoHasBranch(localPath, branch) {\n\t\treturn nil\n\t}\n\n\trev := \"origin/\" + branch\n\tif err := git.Reset(localPath, rev, git.ResetOptions{Hard: true}); err != nil {\n\t\treturn fmt.Errorf(\"reset [revision: %s]: %v\", rev, err)\n\t}\n\treturn nil\n}\n\nfunc (repo *Repository) DiscardLocalRepoBranchChanges(branch string) error {\n\treturn discardLocalRepoBranchChanges(repo.LocalCopyPath(), branch)\n}\n\n// CheckoutNewBranch checks out to a new branch from the a branch name.\nfunc (repo *Repository) CheckoutNewBranch(oldBranch, newBranch string) error {\n\tif err := git.Checkout(repo.LocalCopyPath(), newBranch, git.CheckoutOptions{\n\t\tBaseBranch: oldBranch,\n\t\tTimeout:    time.Duration(conf.Git.Timeout.Pull) * time.Second,\n\t}); err != nil {\n\t\treturn fmt.Errorf(\"checkout [base: %s, new: %s]: %v\", oldBranch, newBranch, err)\n\t}\n\treturn nil\n}\n\ntype UpdateRepoFileOptions struct {\n\tLastCommitID string\n\tOldBranch    string\n\tNewBranch    string\n\tOldTreeName  string\n\tNewTreeName  string\n\tMessage      string\n\tContent      string\n\tIsNewFile    bool\n}\n\n// UpdateRepoFile adds or updates a file in repository.\nfunc (repo *Repository) UpdateRepoFile(doer *User, opts UpdateRepoFileOptions) (err error) {\n\t// \ud83d\udea8 SECURITY: Prevent uploading files into the \".git\" directory\n\tif isRepositoryGitPath(opts.NewTreeName) {\n\t\treturn errors.Errorf(\"bad tree path %q\", opts.NewTreeName)\n\t}\n\n\trepoWorkingPool.CheckIn(com.ToStr(repo.ID))\n\tdefer repoWorkingPool.CheckOut(com.ToStr(repo.ID))\n\n\tif err = repo.DiscardLocalRepoBranchChanges(opts.OldBranch); err != nil {\n\t\treturn fmt.Errorf(\"discard local repo branch[%s] changes: %v\", opts.OldBranch, err)\n\t} else if err = repo.UpdateLocalCopyBranch(opts.OldBranch); err != nil {\n\t\treturn fmt.Errorf(\"update local copy branch[%s]: %v\", opts.OldBranch, err)\n\t}\n\n\trepoPath := repo.RepoPath()\n\tlocalPath := repo.LocalCopyPath()\n\n\tif opts.OldBranch != opts.NewBranch {\n\t\t// Directly return error if new branch already exists in the server\n\t\tif git.RepoHasBranch(repoPath, opts.NewBranch) {\n\t\t\treturn dberrors.BranchAlreadyExists{Name: opts.NewBranch}\n\t\t}\n\n\t\t// Otherwise, delete branch from local copy in case out of sync\n\t\tif git.RepoHasBranch(localPath, opts.NewBranch) {\n\t\t\tif err = git.DeleteBranch(localPath, opts.NewBranch, git.DeleteBranchOptions{\n\t\t\t\tForce: true,\n\t\t\t}); err != nil {\n\t\t\t\treturn fmt.Errorf(\"delete branch %q: %v\", opts.NewBranch, err)\n\t\t\t}\n\t\t}\n\n\t\tif err := repo.CheckoutNewBranch(opts.OldBranch, opts.NewBranch); err != nil {\n\t\t\treturn fmt.Errorf(\"checkout new branch[%s] from old branch[%s]: %v\", opts.NewBranch, opts.OldBranch, err)\n\t\t}\n\t}\n\n\toldFilePath := path.Join(localPath, opts.OldTreeName)\n\tfilePath := path.Join(localPath, opts.NewTreeName)\n\tif err = os.MkdirAll(path.Dir(filePath), os.ModePerm); err != nil {\n\t\treturn err\n\t}\n\n\t// If it's meant to be a new file, make sure it doesn't exist.\n\tif opts.IsNewFile {\n\t\tif com.IsExist(filePath) {\n\t\t\treturn ErrRepoFileAlreadyExist{filePath}\n\t\t}\n\t}\n\n\t// Ignore move step if it's a new file under a directory.\n\t// Otherwise, move the file when name changed.\n\tif osutil.IsFile(oldFilePath) && opts.OldTreeName != opts.NewTreeName {\n\t\tif err = git.Move(localPath, opts.OldTreeName, opts.NewTreeName); err != nil {\n\t\t\treturn fmt.Errorf(\"git mv %q %q: %v\", opts.OldTreeName, opts.NewTreeName, err)\n\t\t}\n\t}\n\n\tif err = ioutil.WriteFile(filePath, []byte(opts.Content), 0666); err != nil {\n\t\treturn fmt.Errorf(\"write file: %v\", err)\n\t}\n\n\tif err = git.Add(localPath, git.AddOptions{All: true}); err != nil {\n\t\treturn fmt.Errorf(\"git add --all: %v\", err)\n\t} else if err = git.CreateCommit(localPath, doer.NewGitSig(), opts.Message); err != nil {\n\t\treturn fmt.Errorf(\"commit changes on %q: %v\", localPath, err)\n\t}\n\n\terr = git.Push(localPath, \"origin\", opts.NewBranch,\n\t\tgit.PushOptions{\n\t\t\tCommandOptions: git.CommandOptions{\n\t\t\t\tEnvs: ComposeHookEnvs(ComposeHookEnvsOptions{\n\t\t\t\t\tAuthUser:  doer,\n\t\t\t\t\tOwnerName: repo.MustOwner().Name,\n\t\t\t\t\tOwnerSalt: repo.MustOwner().Salt,\n\t\t\t\t\tRepoID:    repo.ID,\n\t\t\t\t\tRepoName:  repo.Name,\n\t\t\t\t\tRepoPath:  repo.RepoPath(),\n\t\t\t\t}),\n\t\t\t},\n\t\t},\n\t)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"git push origin %s: %v\", opts.NewBranch, err)\n\t}\n\treturn nil\n}\n\n// GetDiffPreview produces and returns diff result of a file which is not yet committed.\nfunc (repo *Repository) GetDiffPreview(branch, treePath, content string) (diff *gitutil.Diff, err error) {\n\trepoWorkingPool.CheckIn(com.ToStr(repo.ID))\n\tdefer repoWorkingPool.CheckOut(com.ToStr(repo.ID))\n\n\tif err = repo.DiscardLocalRepoBranchChanges(branch); err != nil {\n\t\treturn nil, fmt.Errorf(\"discard local repo branch[%s] changes: %v\", branch, err)\n\t} else if err = repo.UpdateLocalCopyBranch(branch); err != nil {\n\t\treturn nil, fmt.Errorf(\"update local copy branch[%s]: %v\", branch, err)\n\t}\n\n\tlocalPath := repo.LocalCopyPath()\n\tfilePath := path.Join(localPath, treePath)\n\tif err = os.MkdirAll(filepath.Dir(filePath), os.ModePerm); err != nil {\n\t\treturn nil, err\n\t}\n\tif err = ioutil.WriteFile(filePath, []byte(content), 0666); err != nil {\n\t\treturn nil, fmt.Errorf(\"write file: %v\", err)\n\t}\n\n\tcmd := exec.Command(\"git\", \"diff\", treePath)\n\tcmd.Dir = localPath\n\tcmd.Stderr = os.Stderr\n\n\tstdout, err := cmd.StdoutPipe()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"get stdout pipe: %v\", err)\n\t}\n\n\tif err = cmd.Start(); err != nil {\n\t\treturn nil, fmt.Errorf(\"start: %v\", err)\n\t}\n\n\tpid := process.Add(fmt.Sprintf(\"GetDiffPreview [repo_path: %s]\", repo.RepoPath()), cmd)\n\tdefer process.Remove(pid)\n\n\tdiff, err = gitutil.ParseDiff(stdout, conf.Git.MaxDiffFiles, conf.Git.MaxDiffLines, conf.Git.MaxDiffLineChars)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"parse diff: %v\", err)\n\t}\n\n\tif err = cmd.Wait(); err != nil {\n\t\treturn nil, fmt.Errorf(\"wait: %v\", err)\n\t}\n\n\treturn diff, nil\n}\n\n// ________         .__          __           ___________.__.__\n// \\______ \\   ____ |  |   _____/  |_  ____   \\_   _____/|__|  |   ____\n//  |    |  \\_/ __ \\|  | _/ __ \\   __\\/ __ \\   |    __)  |  |  | _/ __ \\\n//  |    `   \\  ___/|  |_\\  ___/|  | \\  ___/   |     \\   |  |  |_\\  ___/\n// /_______  /\\___  >____/\\___  >__|  \\___  >  \\___  /   |__|____/\\___  >\n//         \\/     \\/          \\/          \\/       \\/                 \\/\n//\n\ntype DeleteRepoFileOptions struct {\n\tLastCommitID string\n\tOldBranch    string\n\tNewBranch    string\n\tTreePath     string\n\tMessage      string\n}\n\nfunc (repo *Repository) DeleteRepoFile(doer *User, opts DeleteRepoFileOptions) (err error) {\n\trepoWorkingPool.CheckIn(com.ToStr(repo.ID))\n\tdefer repoWorkingPool.CheckOut(com.ToStr(repo.ID))\n\n\tif err = repo.DiscardLocalRepoBranchChanges(opts.OldBranch); err != nil {\n\t\treturn fmt.Errorf(\"discard local repo branch[%s] changes: %v\", opts.OldBranch, err)\n\t} else if err = repo.UpdateLocalCopyBranch(opts.OldBranch); err != nil {\n\t\treturn fmt.Errorf(\"update local copy branch[%s]: %v\", opts.OldBranch, err)\n\t}\n\n\tif opts.OldBranch != opts.NewBranch {\n\t\tif err := repo.CheckoutNewBranch(opts.OldBranch, opts.NewBranch); err != nil {\n\t\t\treturn fmt.Errorf(\"checkout new branch[%s] from old branch[%s]: %v\", opts.NewBranch, opts.OldBranch, err)\n\t\t}\n\t}\n\n\tlocalPath := repo.LocalCopyPath()\n\tif err = os.Remove(path.Join(localPath, opts.TreePath)); err != nil {\n\t\treturn fmt.Errorf(\"remove file %q: %v\", opts.TreePath, err)\n\t}\n\n\tif err = git.Add(localPath, git.AddOptions{All: true}); err != nil {\n\t\treturn fmt.Errorf(\"git add --all: %v\", err)\n\t} else if err = git.CreateCommit(localPath, doer.NewGitSig(), opts.Message); err != nil {\n\t\treturn fmt.Errorf(\"commit changes to %q: %v\", localPath, err)\n\t}\n\n\terr = git.Push(localPath, \"origin\", opts.NewBranch,\n\t\tgit.PushOptions{\n\t\t\tCommandOptions: git.CommandOptions{\n\t\t\t\tEnvs: ComposeHookEnvs(ComposeHookEnvsOptions{\n\t\t\t\t\tAuthUser:  doer,\n\t\t\t\t\tOwnerName: repo.MustOwner().Name,\n\t\t\t\t\tOwnerSalt: repo.MustOwner().Salt,\n\t\t\t\t\tRepoID:    repo.ID,\n\t\t\t\t\tRepoName:  repo.Name,\n\t\t\t\t\tRepoPath:  repo.RepoPath(),\n\t\t\t\t}),\n\t\t\t},\n\t\t},\n\t)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"git push origin %s: %v\", opts.NewBranch, err)\n\t}\n\treturn nil\n}\n\n//  ____ ___        .__                    .___ ___________.___.__\n// |    |   \\______ |  |   _________     __| _/ \\_   _____/|   |  |   ____   ______\n// |    |   /\\____ \\|  |  /  _ \\__  \\   / __ |   |    __)  |   |  | _/ __ \\ /  ___/\n// |    |  / |  |_> >  |_(  <_> ) __ \\_/ /_/ |   |     \\   |   |  |_\\  ___/ \\___ \\\n// |______/  |   __/|____/\\____(____  /\\____ |   \\___  /   |___|____/\\___  >____  >\n//           |__|                   \\/      \\/       \\/                  \\/     \\/\n//\n\n// Upload represent a uploaded file to a repo to be deleted when moved\ntype Upload struct {\n\tID   int64\n\tUUID string `xorm:\"uuid UNIQUE\"`\n\tName string\n}\n\n// UploadLocalPath returns where uploads is stored in local file system based on given UUID.\nfunc UploadLocalPath(uuid string) string {\n\treturn path.Join(conf.Repository.Upload.TempPath, uuid[0:1], uuid[1:2], uuid)\n}\n\n// LocalPath returns where uploads are temporarily stored in local file system.\nfunc (upload *Upload) LocalPath() string {\n\treturn UploadLocalPath(upload.UUID)\n}\n\n// NewUpload creates a new upload object.\nfunc NewUpload(name string, buf []byte, file multipart.File) (_ *Upload, err error) {\n\tif tool.IsMaliciousPath(name) {\n\t\treturn nil, fmt.Errorf(\"malicious path detected: %s\", name)\n\t}\n\n\tupload := &Upload{\n\t\tUUID: gouuid.NewV4().String(),\n\t\tName: name,\n\t}\n\n\tlocalPath := upload.LocalPath()\n\tif err = os.MkdirAll(path.Dir(localPath), os.ModePerm); err != nil {\n\t\treturn nil, fmt.Errorf(\"mkdir all: %v\", err)\n\t}\n\n\tfw, err := os.Create(localPath)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"create: %v\", err)\n\t}\n\tdefer fw.Close()\n\n\tif _, err = fw.Write(buf); err != nil {\n\t\treturn nil, fmt.Errorf(\"write: %v\", err)\n\t} else if _, err = io.Copy(fw, file); err != nil {\n\t\treturn nil, fmt.Errorf(\"copy: %v\", err)\n\t}\n\n\tif _, err := x.Insert(upload); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn upload, nil\n}\n\nfunc GetUploadByUUID(uuid string) (*Upload, error) {\n\tupload := &Upload{UUID: uuid}\n\thas, err := x.Get(upload)\n\tif err != nil {\n\t\treturn nil, err\n\t} else if !has {\n\t\treturn nil, ErrUploadNotExist{0, uuid}\n\t}\n\treturn upload, nil\n}\n\nfunc GetUploadsByUUIDs(uuids []string) ([]*Upload, error) {\n\tif len(uuids) == 0 {\n\t\treturn []*Upload{}, nil\n\t}\n\n\t// Silently drop invalid uuids.\n\tuploads := make([]*Upload, 0, len(uuids))\n\treturn uploads, x.In(\"uuid\", uuids).Find(&uploads)\n}\n\nfunc DeleteUploads(uploads ...*Upload) (err error) {\n\tif len(uploads) == 0 {\n\t\treturn nil\n\t}\n\n\tsess := x.NewSession()\n\tdefer sess.Close()\n\tif err = sess.Begin(); err != nil {\n\t\treturn err\n\t}\n\n\tids := make([]int64, len(uploads))\n\tfor i := 0; i < len(uploads); i++ {\n\t\tids[i] = uploads[i].ID\n\t}\n\tif _, err = sess.In(\"id\", ids).Delete(new(Upload)); err != nil {\n\t\treturn fmt.Errorf(\"delete uploads: %v\", err)\n\t}\n\n\tfor _, upload := range uploads {\n\t\tlocalPath := upload.LocalPath()\n\t\tif !osutil.IsFile(localPath) {\n\t\t\tcontinue\n\t\t}\n\n\t\tif err := os.Remove(localPath); err != nil {\n\t\t\treturn fmt.Errorf(\"remove upload: %v\", err)\n\t\t}\n\t}\n\n\treturn sess.Commit()\n}\n\nfunc DeleteUpload(u *Upload) error {\n\treturn DeleteUploads(u)\n}\n\nfunc DeleteUploadByUUID(uuid string) error {\n\tupload, err := GetUploadByUUID(uuid)\n\tif err != nil {\n\t\tif IsErrUploadNotExist(err) {\n\t\t\treturn nil\n\t\t}\n\t\treturn fmt.Errorf(\"get upload by UUID[%s]: %v\", uuid, err)\n\t}\n\n\tif err := DeleteUpload(upload); err != nil {\n\t\treturn fmt.Errorf(\"delete upload: %v\", err)\n\t}\n\n\treturn nil\n}\n\ntype UploadRepoFileOptions struct {\n\tLastCommitID string\n\tOldBranch    string\n\tNewBranch    string\n\tTreePath     string\n\tMessage      string\n\tFiles        []string // In UUID format\n}\n\n// isRepositoryGitPath returns true if given path is or resides inside \".git\"\n// path of the repository.\nfunc isRepositoryGitPath(path string) bool {\n\treturn strings.HasSuffix(path, \".git\") ||\n\t\tstrings.Contains(path, \".git\"+string(os.PathSeparator)) ||\n\t\t// Windows treats \".git.\" the same as \".git\"\n\t\tstrings.HasSuffix(path, \".git.\") ||\n\t\tstrings.Contains(path, \".git.\"+string(os.PathSeparator))\n}\n\nfunc (repo *Repository) UploadRepoFiles(doer *User, opts UploadRepoFileOptions) error {\n\tif len(opts.Files) == 0 {\n\t\treturn nil\n\t}\n\n\t// \ud83d\udea8 SECURITY: Prevent uploading files into the \".git\" directory\n\tif isRepositoryGitPath(opts.TreePath) {\n\t\treturn errors.Errorf(\"bad tree path %q\", opts.TreePath)\n\t}\n\n\tuploads, err := GetUploadsByUUIDs(opts.Files)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"get uploads by UUIDs[%v]: %v\", opts.Files, err)\n\t}\n\n\trepoWorkingPool.CheckIn(com.ToStr(repo.ID))\n\tdefer repoWorkingPool.CheckOut(com.ToStr(repo.ID))\n\n\tif err = repo.DiscardLocalRepoBranchChanges(opts.OldBranch); err != nil {\n\t\treturn fmt.Errorf(\"discard local repo branch[%s] changes: %v\", opts.OldBranch, err)\n\t} else if err = repo.UpdateLocalCopyBranch(opts.OldBranch); err != nil {\n\t\treturn fmt.Errorf(\"update local copy branch[%s]: %v\", opts.OldBranch, err)\n\t}\n\n\tif opts.OldBranch != opts.NewBranch {\n\t\tif err = repo.CheckoutNewBranch(opts.OldBranch, opts.NewBranch); err != nil {\n\t\t\treturn fmt.Errorf(\"checkout new branch[%s] from old branch[%s]: %v\", opts.NewBranch, opts.OldBranch, err)\n\t\t}\n\t}\n\n\tlocalPath := repo.LocalCopyPath()\n\tdirPath := path.Join(localPath, opts.TreePath)\n\tif err = os.MkdirAll(dirPath, os.ModePerm); err != nil {\n\t\treturn err\n\t}\n\n\t// Copy uploaded files into repository\n\tfor _, upload := range uploads {\n\t\ttmpPath := upload.LocalPath()\n\t\tif !osutil.IsFile(tmpPath) {\n\t\t\tcontinue\n\t\t}\n\n\t\tupload.Name = pathutil.Clean(upload.Name)\n\n\t\t// \ud83d\udea8 SECURITY: Prevent uploading files into the \".git\" directory\n\t\tif isRepositoryGitPath(upload.Name) {\n\t\t\tcontinue\n\t\t}\n\n\t\ttargetPath := path.Join(dirPath, upload.Name)\n\t\tif err = com.Copy(tmpPath, targetPath); err != nil {\n\t\t\treturn fmt.Errorf(\"copy: %v\", err)\n\t\t}\n\t}\n\n\tif err = git.Add(localPath, git.AddOptions{All: true}); err != nil {\n\t\treturn fmt.Errorf(\"git add --all: %v\", err)\n\t} else if err = git.CreateCommit(localPath, doer.NewGitSig(), opts.Message); err != nil {\n\t\treturn fmt.Errorf(\"commit changes on %q: %v\", localPath, err)\n\t}\n\n\terr = git.Push(localPath, \"origin\", opts.NewBranch,\n\t\tgit.PushOptions{\n\t\t\tCommandOptions: git.CommandOptions{\n\t\t\t\tEnvs: ComposeHookEnvs(ComposeHookEnvsOptions{\n\t\t\t\t\tAuthUser:  doer,\n\t\t\t\t\tOwnerName: repo.MustOwner().Name,\n\t\t\t\t\tOwnerSalt: repo.MustOwner().Salt,\n\t\t\t\t\tRepoID:    repo.ID,\n\t\t\t\t\tRepoName:  repo.Name,\n\t\t\t\t\tRepoPath:  repo.RepoPath(),\n\t\t\t\t}),\n\t\t\t},\n\t\t},\n\t)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"git push origin %s: %v\", opts.NewBranch, err)\n\t}\n\n\treturn DeleteUploads(uploads...)\n}\n", "// Copyright 2018 The Gogs Authors. All rights reserved.\n// Use of this source code is governed by a MIT-style\n// license that can be found in the LICENSE file.\n\npackage db\n\nimport (\n\t\"path/filepath\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc Test_isRepositoryGitPath(t *testing.T) {\n\ttests := []struct {\n\t\tpath    string\n\t\twantVal bool\n\t}{\n\t\t{path: filepath.Join(\".\", \".git\"), wantVal: true},\n\t\t{path: filepath.Join(\".\", \".git\", \"\"), wantVal: true},\n\t\t{path: filepath.Join(\".\", \".git\", \"hooks\", \"pre-commit\"), wantVal: true},\n\t\t{path: filepath.Join(\".git\", \"hooks\"), wantVal: true},\n\t\t{path: filepath.Join(\"dir\", \".git\"), wantVal: true},\n\n\t\t{path: filepath.Join(\".\", \".git.\"), wantVal: true},\n\t\t{path: filepath.Join(\".\", \".git.\", \"\"), wantVal: true},\n\t\t{path: filepath.Join(\".\", \".git.\", \"hooks\", \"pre-commit\"), wantVal: true},\n\t\t{path: filepath.Join(\".git.\", \"hooks\"), wantVal: true},\n\t\t{path: filepath.Join(\"dir\", \".git.\"), wantVal: true},\n\n\t\t{path: filepath.Join(\".gitignore\"), wantVal: false},\n\t\t{path: filepath.Join(\"dir\", \".gitkeep\"), wantVal: false},\n\t}\n\tfor _, test := range tests {\n\t\tt.Run(\"\", func(t *testing.T) {\n\t\t\tassert.Equal(t, test.wantVal, isRepositoryGitPath(test.path))\n\t\t})\n\t}\n}\n"], "fixing_code": ["# Changelog\n\nAll notable changes to Gogs are documented in this file.\n\n## 0.13.0+dev (`main`)\n\n### Added\n\n- An unlisted option is added when create or migrate a repository. Unlisted repositories are public but not being listed for users without direct access in the UI. [#5733](https://github.com/gogs/gogs/issues/5733)\n- New configuration option `[git.timeout] DIFF` for customizing operation timeout of `git diff`. [#6315](https://github.com/gogs/gogs/issues/6315)\n- New configuration option `[server] SSH_SERVER_MACS` for setting list of accepted MACs for connections to builtin SSH server. [#6434](https://github.com/gogs/gogs/issues/6434)\n- Support specifying custom schema for PostgreSQL. [#6695](https://github.com/gogs/gogs/pull/6695)\n- Support rendering Mermaid diagrams in Markdown. [#6776](https://github.com/gogs/gogs/pull/6776)\n- New languages support: Mongolian. [#6510](https://github.com/gogs/gogs/pull/6510)\n\n### Changed\n\n- The default branch has been changed to `main`. [#6285](https://github.com/gogs/gogs/pull/6285)\n- MSSQL as database backend is deprecated, installation page no longer shows it as an option. Existing installations and manually craft configuration file continue to work. [#6295](https://github.com/gogs/gogs/pull/6295)\n- Use [Task](https://github.com/go-task/task) as the build tool. [#6297](https://github.com/gogs/gogs/pull/6297)\n- The required Go version to compile source code changed to 1.16.\n\n### Fixed\n\n- _Security:_ OS Command Injection in file editor. [#7000](https://github.com/gogs/gogs/issues/7000)\n- Unable to use LDAP authentication on ARM machines. [#6761](https://github.com/gogs/gogs/issues/6761)\n- Unable to init repository during creation on Windows. [#6967](https://github.com/gogs/gogs/issues/6967)\n- Mysterious panic on `Value not found for type *repo.HTTPContext`. [#6963](https://github.com/gogs/gogs/issues/6963)\n\n### Removed\n\n- \u26a0\ufe0f Migrations before 0.12 are removed, installations not on 0.12 should upgrade to it to run the migrations and then upgrade to 0.13.\n- Configuration section `[mailer]` is no longer used, please use `[email]`.\n- Configuration section `[service]` is no longer used, please use `[auth]`.\n- Configuration option `APP_NAME` is no longer used, please use `BRAND_NAME`.\n- Configuration option `[security] REVERSE_PROXY_AUTHENTICATION_USER` is no longer used, please use `[auth] REVERSE_PROXY_AUTHENTICATION_HEADER`.\n- Configuration option `[auth] ACTIVE_CODE_LIVE_MINUTES` is no longer used, please use `[auth] ACTIVATE_CODE_LIVES`.\n- Configuration option `[auth] RESET_PASSWD_CODE_LIVE_MINUTES` is no longer used, please use `[auth] RESET_PASSWORD_CODE_LIVES`.\n- Configuration option `[auth] ENABLE_CAPTCHA` is no longer used, please use `[auth] ENABLE_REGISTRATION_CAPTCHA`.\n- Configuration option `[auth] ENABLE_NOTIFY_MAIL` is no longer used, please use `[user] ENABLE_EMAIL_NOTIFICATION`.\n- Configuration option `[auth] REGISTER_EMAIL_CONFIRM` is no longer used, please use `[auth] REQUIRE_EMAIL_CONFIRMATION`.\n- Configuration option `[session] GC_INTERVAL_TIME` is no longer used, please use `[session] GC_INTERVAL`.\n- Configuration option `[session] SESSION_LIFE_TIME` is no longer used, please use `[session] MAX_LIFE_TIME`.\n- Configuration option `[server] ROOT_URL` is no longer used, please use `[server] EXTERNAL_URL`.\n- Configuration option `[server] LANDING_PAGE` is no longer used, please use `[server] LANDING_URL`.\n- Configuration option `[database] DB_TYPE` is no longer used, please use `[database] TYPE`.\n- Configuration option `[database] PASSWD` is no longer used, please use `[database] PASSWORD`.\n- Remove option to use Makefile as the build tool. [#6980](https://github.com/gogs/gogs/pull/6980)\n\n## 0.12.8\n\n### Changed\n\n- All users (including admins) need to use the configuration option `[security] LOCAL_NETWORK_ALLOWLIST` to allow repository migration and webhooks to be able to access local network addresses, which is a comma separated list of hostnames. [#6988](https://github.com/gogs/gogs/pull/6988)\n\n### Fixed\n\n- _Security:_ SSRF in webhook. [#6901](https://github.com/gogs/gogs/issues/6901)\n- _Security:_ XSS in cookies. [#6953](https://github.com/gogs/gogs/issues/6953)\n- _Security:_ OS Command Injection in file uploading. [#6968](https://github.com/gogs/gogs/issues/6968)\n- _Security:_ Remote Command Execution in file editing. [#6555](https://github.com/gogs/gogs/issues/6555)\n\n## 0.12.7\n\n### Fixed\n\n- _Security:_ Stored XSS in issues. [#6919](https://github.com/gogs/gogs/issues/6919)\n- Invalid character in `Access-Control-Allow-Credentials` response header. [#4983](https://github.com/gogs/gogs/issues/4983)\n- Mysterious `ssh: overflow reading version string` errors from builtin SSH server. [#6882](https://github.com/gogs/gogs/issues/6882)\n\n## 0.12.6\n\n### Fixed\n\n- _Security:_ Remote command execution in file uploading. [#6833](https://github.com/gogs/gogs/issues/6833)\n- _Regression:_ Unable to migrate repository from other local Git hosting. Added a new configuration option `[security] LOCAL_NETWORK_ALLOWLIST`, which is a comma separated list of hostnames that are explicitly allowed to be accessed within the local network. [#6841](https://github.com/gogs/gogs/issues/6841)\n- Slow start of Docker containers using NAS devices. [#6554](https://github.com/gogs/gogs/issues/6554)\n\n## 0.12.5\n\n### Fixed\n\n- _Security:_ Potential SSRF in repository migration. [#6754](https://github.com/gogs/gogs/issues/6754)\n- _Security:_ Improper PAM authorization handling. [#6810](https://github.com/gogs/gogs/issues/6810)\n\n## 0.12.4\n\n### Fixed\n\n- _Security:_ Potential SSRF attack by CRLF injection via repository migration. [#6413](https://github.com/gogs/gogs/issues/6413)\n- _Regression:_ Fixed smart links for issues stops rendering. [#6506](https://github.com/gogs/gogs/issues/6506)\n- Added `X-Frame-Options` header to prevent Clickjacking. [#6409](https://github.com/gogs/gogs/issues/6409)\n\n## 0.12.3\n\n### Fixed\n\n- _Regression:_ When running Gogs on Windows, push commits no longer fail on a daily basis with the error \"pre-receive hook declined\". [#6316](https://github.com/gogs/gogs/issues/6316)\n- Auto-linked commit SHAs now have correct links. [#6300](https://github.com/gogs/gogs/issues/6300)\n- Git LFS client (with version >= 2.5.0) wasn't able to upload files with known format (e.g. PNG, JPEG), and the server is expecting the HTTP Header `Content-Type` to be `application/octet-stream`. The server now tells the LFS client to always use `Content-Type: application/octet-stream` when upload files.\n\n## 0.12.2\n\n### Fixed\n\n- _Regression:_ Pages are correctly rendered when requesting `?go-get=1` for subdirectories. [#6314](https://github.com/gogs/gogs/issues/6314)\n- _Regression:_ Submodule with a relative path is linked correctly. [#6319](https://github.com/gogs/gogs/issues/6319)\n- Backup can be processed when `--target` is specified on Windows. [#6339](https://github.com/gogs/gogs/issues/6339)\n- Commit message contains keywords look like an issue reference no longer fails the push entirely. [#6289](https://github.com/gogs/gogs/issues/6289)\n\n## 0.12.1\n\n### Fixed\n\n- The `updated_at` field is now correctly updated when updates an issue. [#6209](https://github.com/gogs/gogs/issues/6209)\n- Fixed a regression which created `login_source.cfg` column to have `VARCHAR(255)` instead of `TEXT` in MySQL. [#6280](https://github.com/gogs/gogs/issues/6280)\n\n## 0.12.0\n\n### Added\n\n- Support for Git LFS, you can read documentation for both [user](https://github.com/gogs/gogs/blob/main/docs/user/lfs.md) and [admin](https://github.com/gogs/gogs/blob/main/docs/admin/lfs.md). [#1322](https://github.com/gogs/gogs/issues/1322)\n- Allow admin to remove observers from the repository. [#5803](https://github.com/gogs/gogs/pull/5803)\n- Use `Last-Modified` HTTP header for raw files. [#5811](https://github.com/gogs/gogs/issues/5811)\n- Support syntax highlighting for SAS code files (i.e. `.r`, `.sas`, `.tex`, `.yaml`). [#5856](https://github.com/gogs/gogs/pull/5856)\n- Able to fill in pull request title with a template. [#5901](https://github.com/gogs/gogs/pull/5901)\n- Able to override static files under `public/` directory, please refer to [documentation](https://gogs.io/docs/features/custom_template) for usage. [#5920](https://github.com/gogs/gogs/pull/5920)\n- New API endpoint `GET /admin/teams/:teamid/members` to list members of a team. [#5877](https://github.com/gogs/gogs/issues/5877)\n- Support backup with retention policy for Docker deployments. [#6140](https://github.com/gogs/gogs/pull/6140)\n\n### Changed\n\n- The organization profile page has changed to display at most 12 members. [#5506](https://github.com/gogs/gogs/issues/5506)\n- The required Go version to compile source code changed to 1.14.\n- All assets are now embedded into binary and served from memory by default. Set `[server] LOAD_ASSETS_FROM_DISK = true` to load them from disk. [#5920](https://github.com/gogs/gogs/pull/5920)\n- Application and Go versions are removed from page footer and only show in the admin dashboard.\n- Build tag for running as Windows Service has been changed from `miniwinsvc` to `minwinsvc`.\n- Configuration option `APP_NAME` is deprecated and will end support in 0.13.0, please start using `BRAND_NAME`.\n- Configuration option `[server] ROOT_URL` is deprecated and will end support in 0.13.0, please start using `[server] EXTERNAL_URL`.\n- Configuration option `[server] LANDING_PAGE` is deprecated and will end support in 0.13.0, please start using `[server] LANDING_URL`.\n- Configuration option `[database] DB_TYPE` is deprecated and will end support in 0.13.0, please start using `[database] TYPE`.\n- Configuration option `[database] PASSWD` is deprecated and will end support in 0.13.0, please start using `[database] PASSWORD`.\n- Configuration option `[security] REVERSE_PROXY_AUTHENTICATION_USER` is deprecated and will end support in 0.13.0, please start using `[auth] REVERSE_PROXY_AUTHENTICATION_HEADER`.\n- Configuration section `[mailer]` is deprecated and will end support in 0.13.0, please start using `[email]`.\n- Configuration section `[service]` is deprecated and will end support in 0.13.0, please start using `[auth]`.\n- Configuration option `[auth] ACTIVE_CODE_LIVE_MINUTES` is deprecated and will end support in 0.13.0, please start using `[auth] ACTIVATE_CODE_LIVES`.\n- Configuration option `[auth] RESET_PASSWD_CODE_LIVE_MINUTES` is deprecated and will end support in 0.13.0, please start using `[auth] RESET_PASSWORD_CODE_LIVES`.\n- Configuration option `[auth] REGISTER_EMAIL_CONFIRM` is deprecated and will end support in 0.13.0, please start using `[auth] REQUIRE_EMAIL_CONFIRMATION`.\n- Configuration option `[auth] ENABLE_CAPTCHA` is deprecated and will end support in 0.13.0, please start using `[auth] ENABLE_REGISTRATION_CAPTCHA`.\n- Configuration option `[auth] ENABLE_NOTIFY_MAIL` is deprecated and will end support in 0.13.0, please start using `[user] ENABLE_EMAIL_NOTIFICATION`.\n- Configuration option `[session] GC_INTERVAL_TIME` is deprecated and will end support in 0.13.0, please start using `[session] GC_INTERVAL`.\n- Configuration option `[session] SESSION_LIFE_TIME` is deprecated and will end support in 0.13.0, please start using `[session] MAX_LIFE_TIME`.\n- The name `-` is reserved and cannot be used for users or organizations.\n\n### Fixed\n\n- [Security] Potential open redirection with i18n.\n- [Security] Potential ability to delete files outside a repository.\n- [Security] Potential ability to set primary email on others' behalf from their verified emails.\n- [Security] Potential XSS attack via `.ipynb`. [#5170](https://github.com/gogs/gogs/issues/5170)\n- [Security] Potential SSRF attack via webhooks. [#5366](https://github.com/gogs/gogs/issues/5366)\n- [Security] Potential CSRF attack in admin panel. [#5367](https://github.com/gogs/gogs/issues/5367)\n- [Security] Potential stored XSS attack in some browsers. [#5397](https://github.com/gogs/gogs/issues/5397)\n- [Security] Potential RCE on mirror repositories. [#5767](https://github.com/gogs/gogs/issues/5767)\n- [Security] Potential XSS attack with raw markdown API. [#5907](https://github.com/gogs/gogs/pull/5907)\n- File both modified and renamed within a commit treated as separate files. [#5056](https://github.com/gogs/gogs/issues/5056)\n- Unable to restore the database backup to MySQL 8.0 with syntax error. [#5602](https://github.com/gogs/gogs/issues/5602)\n- Open/close milestone redirects to a 404 page. [#5677](https://github.com/gogs/gogs/issues/5677)\n- Disallow multiple tokens with same name. [#5587](https://github.com/gogs/gogs/issues/5587) [#5820](https://github.com/gogs/gogs/pull/5820)\n- Enable Federated Avatar Lookup could cause server to crash. [#5848](https://github.com/gogs/gogs/issues/5848)\n- Private repositories are hidden in the organization's view. [#5869](https://github.com/gogs/gogs/issues/5869)\n- Users have access to base repository cannot view commits in forks. [#5878](https://github.com/gogs/gogs/issues/5878)\n- Server error when changing email address in user settings page. [#5899](https://github.com/gogs/gogs/issues/5899)\n- Fall back to use RFC 3339 as time layout when misconfigured. [#6098](https://github.com/gogs/gogs/issues/6098)\n- Unable to update team with server error. [#6185](https://github.com/gogs/gogs/issues/6185)\n- Webhooks are not fired after push when `[service] REQUIRE_SIGNIN_VIEW = true`.\n- Files with identical content are randomly displayed one of them.\n\n### Removed\n\n- Configuration option `[other] SHOW_FOOTER_VERSION`\n- Configuration option `[server] STATIC_ROOT_PATH`\n- Configuration option `[repository] MIRROR_QUEUE_LENGTH`\n- Configuration option `[repository] PULL_REQUEST_QUEUE_LENGTH`\n- Configuration option `[session] ENABLE_SET_COOKIE`\n- Configuration option `[release.attachment] PATH`\n- Configuration option `[webhook] QUEUE_LENGTH`\n- Build tag `sqlite`, which means CGO is now required.\n\n---\n\n**Older change logs can be found on [GitHub](https://github.com/gogs/gogs/releases?after=v0.12.0).**\n", "// Copyright 2016 The Gogs Authors. All rights reserved.\n// Use of this source code is governed by a MIT-style\n// license that can be found in the LICENSE file.\n\npackage db\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"mime/multipart\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/pkg/errors\"\n\tgouuid \"github.com/satori/go.uuid\"\n\t\"github.com/unknwon/com\"\n\n\t\"github.com/gogs/git-module\"\n\n\t\"gogs.io/gogs/internal/conf\"\n\t\"gogs.io/gogs/internal/cryptoutil\"\n\tdberrors \"gogs.io/gogs/internal/db/errors\"\n\t\"gogs.io/gogs/internal/gitutil\"\n\t\"gogs.io/gogs/internal/osutil\"\n\t\"gogs.io/gogs/internal/pathutil\"\n\t\"gogs.io/gogs/internal/process\"\n\t\"gogs.io/gogs/internal/tool\"\n)\n\nconst (\n\tENV_AUTH_USER_ID           = \"GOGS_AUTH_USER_ID\"\n\tENV_AUTH_USER_NAME         = \"GOGS_AUTH_USER_NAME\"\n\tENV_AUTH_USER_EMAIL        = \"GOGS_AUTH_USER_EMAIL\"\n\tENV_REPO_OWNER_NAME        = \"GOGS_REPO_OWNER_NAME\"\n\tENV_REPO_OWNER_SALT_MD5    = \"GOGS_REPO_OWNER_SALT_MD5\"\n\tENV_REPO_ID                = \"GOGS_REPO_ID\"\n\tENV_REPO_NAME              = \"GOGS_REPO_NAME\"\n\tENV_REPO_CUSTOM_HOOKS_PATH = \"GOGS_REPO_CUSTOM_HOOKS_PATH\"\n)\n\ntype ComposeHookEnvsOptions struct {\n\tAuthUser  *User\n\tOwnerName string\n\tOwnerSalt string\n\tRepoID    int64\n\tRepoName  string\n\tRepoPath  string\n}\n\nfunc ComposeHookEnvs(opts ComposeHookEnvsOptions) []string {\n\tenvs := []string{\n\t\t\"SSH_ORIGINAL_COMMAND=1\",\n\t\tENV_AUTH_USER_ID + \"=\" + com.ToStr(opts.AuthUser.ID),\n\t\tENV_AUTH_USER_NAME + \"=\" + opts.AuthUser.Name,\n\t\tENV_AUTH_USER_EMAIL + \"=\" + opts.AuthUser.Email,\n\t\tENV_REPO_OWNER_NAME + \"=\" + opts.OwnerName,\n\t\tENV_REPO_OWNER_SALT_MD5 + \"=\" + cryptoutil.MD5(opts.OwnerSalt),\n\t\tENV_REPO_ID + \"=\" + com.ToStr(opts.RepoID),\n\t\tENV_REPO_NAME + \"=\" + opts.RepoName,\n\t\tENV_REPO_CUSTOM_HOOKS_PATH + \"=\" + filepath.Join(opts.RepoPath, \"custom_hooks\"),\n\t}\n\treturn envs\n}\n\n// ___________    .___.__  __    ___________.__.__\n// \\_   _____/  __| _/|__|/  |_  \\_   _____/|__|  |   ____\n//  |    __)_  / __ | |  \\   __\\  |    __)  |  |  | _/ __ \\\n//  |        \\/ /_/ | |  ||  |    |     \\   |  |  |_\\  ___/\n// /_______  /\\____ | |__||__|    \\___  /   |__|____/\\___  >\n//         \\/      \\/                 \\/                 \\/\n\n// discardLocalRepoBranchChanges discards local commits/changes of\n// given branch to make sure it is even to remote branch.\nfunc discardLocalRepoBranchChanges(localPath, branch string) error {\n\tif !com.IsExist(localPath) {\n\t\treturn nil\n\t}\n\n\t// No need to check if nothing in the repository.\n\tif !git.RepoHasBranch(localPath, branch) {\n\t\treturn nil\n\t}\n\n\trev := \"origin/\" + branch\n\tif err := git.Reset(localPath, rev, git.ResetOptions{Hard: true}); err != nil {\n\t\treturn fmt.Errorf(\"reset [revision: %s]: %v\", rev, err)\n\t}\n\treturn nil\n}\n\nfunc (repo *Repository) DiscardLocalRepoBranchChanges(branch string) error {\n\treturn discardLocalRepoBranchChanges(repo.LocalCopyPath(), branch)\n}\n\n// CheckoutNewBranch checks out to a new branch from the a branch name.\nfunc (repo *Repository) CheckoutNewBranch(oldBranch, newBranch string) error {\n\tif err := git.Checkout(repo.LocalCopyPath(), newBranch, git.CheckoutOptions{\n\t\tBaseBranch: oldBranch,\n\t\tTimeout:    time.Duration(conf.Git.Timeout.Pull) * time.Second,\n\t}); err != nil {\n\t\treturn fmt.Errorf(\"checkout [base: %s, new: %s]: %v\", oldBranch, newBranch, err)\n\t}\n\treturn nil\n}\n\ntype UpdateRepoFileOptions struct {\n\tLastCommitID string\n\tOldBranch    string\n\tNewBranch    string\n\tOldTreeName  string\n\tNewTreeName  string\n\tMessage      string\n\tContent      string\n\tIsNewFile    bool\n}\n\n// UpdateRepoFile adds or updates a file in repository.\nfunc (repo *Repository) UpdateRepoFile(doer *User, opts UpdateRepoFileOptions) (err error) {\n\t// \ud83d\udea8 SECURITY: Prevent uploading files into the \".git\" directory\n\tif isRepositoryGitPath(opts.NewTreeName) {\n\t\treturn errors.Errorf(\"bad tree path %q\", opts.NewTreeName)\n\t}\n\n\trepoWorkingPool.CheckIn(com.ToStr(repo.ID))\n\tdefer repoWorkingPool.CheckOut(com.ToStr(repo.ID))\n\n\tif err = repo.DiscardLocalRepoBranchChanges(opts.OldBranch); err != nil {\n\t\treturn fmt.Errorf(\"discard local repo branch[%s] changes: %v\", opts.OldBranch, err)\n\t} else if err = repo.UpdateLocalCopyBranch(opts.OldBranch); err != nil {\n\t\treturn fmt.Errorf(\"update local copy branch[%s]: %v\", opts.OldBranch, err)\n\t}\n\n\trepoPath := repo.RepoPath()\n\tlocalPath := repo.LocalCopyPath()\n\n\tif opts.OldBranch != opts.NewBranch {\n\t\t// Directly return error if new branch already exists in the server\n\t\tif git.RepoHasBranch(repoPath, opts.NewBranch) {\n\t\t\treturn dberrors.BranchAlreadyExists{Name: opts.NewBranch}\n\t\t}\n\n\t\t// Otherwise, delete branch from local copy in case out of sync\n\t\tif git.RepoHasBranch(localPath, opts.NewBranch) {\n\t\t\tif err = git.DeleteBranch(localPath, opts.NewBranch, git.DeleteBranchOptions{\n\t\t\t\tForce: true,\n\t\t\t}); err != nil {\n\t\t\t\treturn fmt.Errorf(\"delete branch %q: %v\", opts.NewBranch, err)\n\t\t\t}\n\t\t}\n\n\t\tif err := repo.CheckoutNewBranch(opts.OldBranch, opts.NewBranch); err != nil {\n\t\t\treturn fmt.Errorf(\"checkout new branch[%s] from old branch[%s]: %v\", opts.NewBranch, opts.OldBranch, err)\n\t\t}\n\t}\n\n\toldFilePath := path.Join(localPath, opts.OldTreeName)\n\tfilePath := path.Join(localPath, opts.NewTreeName)\n\tif err = os.MkdirAll(path.Dir(filePath), os.ModePerm); err != nil {\n\t\treturn err\n\t}\n\n\t// If it's meant to be a new file, make sure it doesn't exist.\n\tif opts.IsNewFile {\n\t\tif com.IsExist(filePath) {\n\t\t\treturn ErrRepoFileAlreadyExist{filePath}\n\t\t}\n\t}\n\n\t// Ignore move step if it's a new file under a directory.\n\t// Otherwise, move the file when name changed.\n\tif osutil.IsFile(oldFilePath) && opts.OldTreeName != opts.NewTreeName {\n\t\tif err = git.Move(localPath, opts.OldTreeName, opts.NewTreeName); err != nil {\n\t\t\treturn fmt.Errorf(\"git mv %q %q: %v\", opts.OldTreeName, opts.NewTreeName, err)\n\t\t}\n\t}\n\n\tif err = ioutil.WriteFile(filePath, []byte(opts.Content), 0666); err != nil {\n\t\treturn fmt.Errorf(\"write file: %v\", err)\n\t}\n\n\tif err = git.Add(localPath, git.AddOptions{All: true}); err != nil {\n\t\treturn fmt.Errorf(\"git add --all: %v\", err)\n\t} else if err = git.CreateCommit(localPath, doer.NewGitSig(), opts.Message); err != nil {\n\t\treturn fmt.Errorf(\"commit changes on %q: %v\", localPath, err)\n\t}\n\n\terr = git.Push(localPath, \"origin\", opts.NewBranch,\n\t\tgit.PushOptions{\n\t\t\tCommandOptions: git.CommandOptions{\n\t\t\t\tEnvs: ComposeHookEnvs(ComposeHookEnvsOptions{\n\t\t\t\t\tAuthUser:  doer,\n\t\t\t\t\tOwnerName: repo.MustOwner().Name,\n\t\t\t\t\tOwnerSalt: repo.MustOwner().Salt,\n\t\t\t\t\tRepoID:    repo.ID,\n\t\t\t\t\tRepoName:  repo.Name,\n\t\t\t\t\tRepoPath:  repo.RepoPath(),\n\t\t\t\t}),\n\t\t\t},\n\t\t},\n\t)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"git push origin %s: %v\", opts.NewBranch, err)\n\t}\n\treturn nil\n}\n\n// GetDiffPreview produces and returns diff result of a file which is not yet committed.\nfunc (repo *Repository) GetDiffPreview(branch, treePath, content string) (diff *gitutil.Diff, err error) {\n\trepoWorkingPool.CheckIn(com.ToStr(repo.ID))\n\tdefer repoWorkingPool.CheckOut(com.ToStr(repo.ID))\n\n\tif err = repo.DiscardLocalRepoBranchChanges(branch); err != nil {\n\t\treturn nil, fmt.Errorf(\"discard local repo branch[%s] changes: %v\", branch, err)\n\t} else if err = repo.UpdateLocalCopyBranch(branch); err != nil {\n\t\treturn nil, fmt.Errorf(\"update local copy branch[%s]: %v\", branch, err)\n\t}\n\n\tlocalPath := repo.LocalCopyPath()\n\tfilePath := path.Join(localPath, treePath)\n\tif err = os.MkdirAll(filepath.Dir(filePath), os.ModePerm); err != nil {\n\t\treturn nil, err\n\t}\n\tif err = ioutil.WriteFile(filePath, []byte(content), 0666); err != nil {\n\t\treturn nil, fmt.Errorf(\"write file: %v\", err)\n\t}\n\n\tcmd := exec.Command(\"git\", \"diff\", treePath)\n\tcmd.Dir = localPath\n\tcmd.Stderr = os.Stderr\n\n\tstdout, err := cmd.StdoutPipe()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"get stdout pipe: %v\", err)\n\t}\n\n\tif err = cmd.Start(); err != nil {\n\t\treturn nil, fmt.Errorf(\"start: %v\", err)\n\t}\n\n\tpid := process.Add(fmt.Sprintf(\"GetDiffPreview [repo_path: %s]\", repo.RepoPath()), cmd)\n\tdefer process.Remove(pid)\n\n\tdiff, err = gitutil.ParseDiff(stdout, conf.Git.MaxDiffFiles, conf.Git.MaxDiffLines, conf.Git.MaxDiffLineChars)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"parse diff: %v\", err)\n\t}\n\n\tif err = cmd.Wait(); err != nil {\n\t\treturn nil, fmt.Errorf(\"wait: %v\", err)\n\t}\n\n\treturn diff, nil\n}\n\n// ________         .__          __           ___________.__.__\n// \\______ \\   ____ |  |   _____/  |_  ____   \\_   _____/|__|  |   ____\n//  |    |  \\_/ __ \\|  | _/ __ \\   __\\/ __ \\   |    __)  |  |  | _/ __ \\\n//  |    `   \\  ___/|  |_\\  ___/|  | \\  ___/   |     \\   |  |  |_\\  ___/\n// /_______  /\\___  >____/\\___  >__|  \\___  >  \\___  /   |__|____/\\___  >\n//         \\/     \\/          \\/          \\/       \\/                 \\/\n//\n\ntype DeleteRepoFileOptions struct {\n\tLastCommitID string\n\tOldBranch    string\n\tNewBranch    string\n\tTreePath     string\n\tMessage      string\n}\n\nfunc (repo *Repository) DeleteRepoFile(doer *User, opts DeleteRepoFileOptions) (err error) {\n\trepoWorkingPool.CheckIn(com.ToStr(repo.ID))\n\tdefer repoWorkingPool.CheckOut(com.ToStr(repo.ID))\n\n\tif err = repo.DiscardLocalRepoBranchChanges(opts.OldBranch); err != nil {\n\t\treturn fmt.Errorf(\"discard local repo branch[%s] changes: %v\", opts.OldBranch, err)\n\t} else if err = repo.UpdateLocalCopyBranch(opts.OldBranch); err != nil {\n\t\treturn fmt.Errorf(\"update local copy branch[%s]: %v\", opts.OldBranch, err)\n\t}\n\n\tif opts.OldBranch != opts.NewBranch {\n\t\tif err := repo.CheckoutNewBranch(opts.OldBranch, opts.NewBranch); err != nil {\n\t\t\treturn fmt.Errorf(\"checkout new branch[%s] from old branch[%s]: %v\", opts.NewBranch, opts.OldBranch, err)\n\t\t}\n\t}\n\n\tlocalPath := repo.LocalCopyPath()\n\tif err = os.Remove(path.Join(localPath, opts.TreePath)); err != nil {\n\t\treturn fmt.Errorf(\"remove file %q: %v\", opts.TreePath, err)\n\t}\n\n\tif err = git.Add(localPath, git.AddOptions{All: true}); err != nil {\n\t\treturn fmt.Errorf(\"git add --all: %v\", err)\n\t} else if err = git.CreateCommit(localPath, doer.NewGitSig(), opts.Message); err != nil {\n\t\treturn fmt.Errorf(\"commit changes to %q: %v\", localPath, err)\n\t}\n\n\terr = git.Push(localPath, \"origin\", opts.NewBranch,\n\t\tgit.PushOptions{\n\t\t\tCommandOptions: git.CommandOptions{\n\t\t\t\tEnvs: ComposeHookEnvs(ComposeHookEnvsOptions{\n\t\t\t\t\tAuthUser:  doer,\n\t\t\t\t\tOwnerName: repo.MustOwner().Name,\n\t\t\t\t\tOwnerSalt: repo.MustOwner().Salt,\n\t\t\t\t\tRepoID:    repo.ID,\n\t\t\t\t\tRepoName:  repo.Name,\n\t\t\t\t\tRepoPath:  repo.RepoPath(),\n\t\t\t\t}),\n\t\t\t},\n\t\t},\n\t)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"git push origin %s: %v\", opts.NewBranch, err)\n\t}\n\treturn nil\n}\n\n//  ____ ___        .__                    .___ ___________.___.__\n// |    |   \\______ |  |   _________     __| _/ \\_   _____/|   |  |   ____   ______\n// |    |   /\\____ \\|  |  /  _ \\__  \\   / __ |   |    __)  |   |  | _/ __ \\ /  ___/\n// |    |  / |  |_> >  |_(  <_> ) __ \\_/ /_/ |   |     \\   |   |  |_\\  ___/ \\___ \\\n// |______/  |   __/|____/\\____(____  /\\____ |   \\___  /   |___|____/\\___  >____  >\n//           |__|                   \\/      \\/       \\/                  \\/     \\/\n//\n\n// Upload represent a uploaded file to a repo to be deleted when moved\ntype Upload struct {\n\tID   int64\n\tUUID string `xorm:\"uuid UNIQUE\"`\n\tName string\n}\n\n// UploadLocalPath returns where uploads is stored in local file system based on given UUID.\nfunc UploadLocalPath(uuid string) string {\n\treturn path.Join(conf.Repository.Upload.TempPath, uuid[0:1], uuid[1:2], uuid)\n}\n\n// LocalPath returns where uploads are temporarily stored in local file system.\nfunc (upload *Upload) LocalPath() string {\n\treturn UploadLocalPath(upload.UUID)\n}\n\n// NewUpload creates a new upload object.\nfunc NewUpload(name string, buf []byte, file multipart.File) (_ *Upload, err error) {\n\tif tool.IsMaliciousPath(name) {\n\t\treturn nil, fmt.Errorf(\"malicious path detected: %s\", name)\n\t}\n\n\tupload := &Upload{\n\t\tUUID: gouuid.NewV4().String(),\n\t\tName: name,\n\t}\n\n\tlocalPath := upload.LocalPath()\n\tif err = os.MkdirAll(path.Dir(localPath), os.ModePerm); err != nil {\n\t\treturn nil, fmt.Errorf(\"mkdir all: %v\", err)\n\t}\n\n\tfw, err := os.Create(localPath)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"create: %v\", err)\n\t}\n\tdefer fw.Close()\n\n\tif _, err = fw.Write(buf); err != nil {\n\t\treturn nil, fmt.Errorf(\"write: %v\", err)\n\t} else if _, err = io.Copy(fw, file); err != nil {\n\t\treturn nil, fmt.Errorf(\"copy: %v\", err)\n\t}\n\n\tif _, err := x.Insert(upload); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn upload, nil\n}\n\nfunc GetUploadByUUID(uuid string) (*Upload, error) {\n\tupload := &Upload{UUID: uuid}\n\thas, err := x.Get(upload)\n\tif err != nil {\n\t\treturn nil, err\n\t} else if !has {\n\t\treturn nil, ErrUploadNotExist{0, uuid}\n\t}\n\treturn upload, nil\n}\n\nfunc GetUploadsByUUIDs(uuids []string) ([]*Upload, error) {\n\tif len(uuids) == 0 {\n\t\treturn []*Upload{}, nil\n\t}\n\n\t// Silently drop invalid uuids.\n\tuploads := make([]*Upload, 0, len(uuids))\n\treturn uploads, x.In(\"uuid\", uuids).Find(&uploads)\n}\n\nfunc DeleteUploads(uploads ...*Upload) (err error) {\n\tif len(uploads) == 0 {\n\t\treturn nil\n\t}\n\n\tsess := x.NewSession()\n\tdefer sess.Close()\n\tif err = sess.Begin(); err != nil {\n\t\treturn err\n\t}\n\n\tids := make([]int64, len(uploads))\n\tfor i := 0; i < len(uploads); i++ {\n\t\tids[i] = uploads[i].ID\n\t}\n\tif _, err = sess.In(\"id\", ids).Delete(new(Upload)); err != nil {\n\t\treturn fmt.Errorf(\"delete uploads: %v\", err)\n\t}\n\n\tfor _, upload := range uploads {\n\t\tlocalPath := upload.LocalPath()\n\t\tif !osutil.IsFile(localPath) {\n\t\t\tcontinue\n\t\t}\n\n\t\tif err := os.Remove(localPath); err != nil {\n\t\t\treturn fmt.Errorf(\"remove upload: %v\", err)\n\t\t}\n\t}\n\n\treturn sess.Commit()\n}\n\nfunc DeleteUpload(u *Upload) error {\n\treturn DeleteUploads(u)\n}\n\nfunc DeleteUploadByUUID(uuid string) error {\n\tupload, err := GetUploadByUUID(uuid)\n\tif err != nil {\n\t\tif IsErrUploadNotExist(err) {\n\t\t\treturn nil\n\t\t}\n\t\treturn fmt.Errorf(\"get upload by UUID[%s]: %v\", uuid, err)\n\t}\n\n\tif err := DeleteUpload(upload); err != nil {\n\t\treturn fmt.Errorf(\"delete upload: %v\", err)\n\t}\n\n\treturn nil\n}\n\ntype UploadRepoFileOptions struct {\n\tLastCommitID string\n\tOldBranch    string\n\tNewBranch    string\n\tTreePath     string\n\tMessage      string\n\tFiles        []string // In UUID format\n}\n\n// isRepositoryGitPath returns true if given path is or resides inside \".git\"\n// path of the repository.\nfunc isRepositoryGitPath(path string) bool {\n\treturn strings.HasSuffix(path, \".git\") ||\n\t\tstrings.Contains(path, \".git/\") ||\n\t\tstrings.Contains(path, `.git\\`) ||\n\t\t// Windows treats \".git.\" the same as \".git\"\n\t\tstrings.HasSuffix(path, \".git.\") ||\n\t\tstrings.Contains(path, \".git./\") ||\n\t\tstrings.Contains(path, `.git.\\`)\n}\n\nfunc (repo *Repository) UploadRepoFiles(doer *User, opts UploadRepoFileOptions) error {\n\tif len(opts.Files) == 0 {\n\t\treturn nil\n\t}\n\n\t// \ud83d\udea8 SECURITY: Prevent uploading files into the \".git\" directory\n\tif isRepositoryGitPath(opts.TreePath) {\n\t\treturn errors.Errorf(\"bad tree path %q\", opts.TreePath)\n\t}\n\n\tuploads, err := GetUploadsByUUIDs(opts.Files)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"get uploads by UUIDs[%v]: %v\", opts.Files, err)\n\t}\n\n\trepoWorkingPool.CheckIn(com.ToStr(repo.ID))\n\tdefer repoWorkingPool.CheckOut(com.ToStr(repo.ID))\n\n\tif err = repo.DiscardLocalRepoBranchChanges(opts.OldBranch); err != nil {\n\t\treturn fmt.Errorf(\"discard local repo branch[%s] changes: %v\", opts.OldBranch, err)\n\t} else if err = repo.UpdateLocalCopyBranch(opts.OldBranch); err != nil {\n\t\treturn fmt.Errorf(\"update local copy branch[%s]: %v\", opts.OldBranch, err)\n\t}\n\n\tif opts.OldBranch != opts.NewBranch {\n\t\tif err = repo.CheckoutNewBranch(opts.OldBranch, opts.NewBranch); err != nil {\n\t\t\treturn fmt.Errorf(\"checkout new branch[%s] from old branch[%s]: %v\", opts.NewBranch, opts.OldBranch, err)\n\t\t}\n\t}\n\n\tlocalPath := repo.LocalCopyPath()\n\tdirPath := path.Join(localPath, opts.TreePath)\n\tif err = os.MkdirAll(dirPath, os.ModePerm); err != nil {\n\t\treturn err\n\t}\n\n\t// Copy uploaded files into repository\n\tfor _, upload := range uploads {\n\t\ttmpPath := upload.LocalPath()\n\t\tif !osutil.IsFile(tmpPath) {\n\t\t\tcontinue\n\t\t}\n\n\t\tupload.Name = pathutil.Clean(upload.Name)\n\n\t\t// \ud83d\udea8 SECURITY: Prevent uploading files into the \".git\" directory\n\t\tif isRepositoryGitPath(upload.Name) {\n\t\t\tcontinue\n\t\t}\n\n\t\ttargetPath := path.Join(dirPath, upload.Name)\n\t\tif err = com.Copy(tmpPath, targetPath); err != nil {\n\t\t\treturn fmt.Errorf(\"copy: %v\", err)\n\t\t}\n\t}\n\n\tif err = git.Add(localPath, git.AddOptions{All: true}); err != nil {\n\t\treturn fmt.Errorf(\"git add --all: %v\", err)\n\t} else if err = git.CreateCommit(localPath, doer.NewGitSig(), opts.Message); err != nil {\n\t\treturn fmt.Errorf(\"commit changes on %q: %v\", localPath, err)\n\t}\n\n\terr = git.Push(localPath, \"origin\", opts.NewBranch,\n\t\tgit.PushOptions{\n\t\t\tCommandOptions: git.CommandOptions{\n\t\t\t\tEnvs: ComposeHookEnvs(ComposeHookEnvsOptions{\n\t\t\t\t\tAuthUser:  doer,\n\t\t\t\t\tOwnerName: repo.MustOwner().Name,\n\t\t\t\t\tOwnerSalt: repo.MustOwner().Salt,\n\t\t\t\t\tRepoID:    repo.ID,\n\t\t\t\t\tRepoName:  repo.Name,\n\t\t\t\t\tRepoPath:  repo.RepoPath(),\n\t\t\t\t}),\n\t\t\t},\n\t\t},\n\t)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"git push origin %s: %v\", opts.NewBranch, err)\n\t}\n\n\treturn DeleteUploads(uploads...)\n}\n", "// Copyright 2018 The Gogs Authors. All rights reserved.\n// Use of this source code is governed by a MIT-style\n// license that can be found in the LICENSE file.\n\npackage db\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc Test_isRepositoryGitPath(t *testing.T) {\n\ttests := []struct {\n\t\tpath    string\n\t\twantVal bool\n\t}{\n\t\t{path: \".git\", wantVal: true},\n\t\t{path: \"./.git\", wantVal: true},\n\t\t{path: \".git/hooks/pre-commit\", wantVal: true},\n\t\t{path: \".git/hooks\", wantVal: true},\n\t\t{path: \"dir/.git\", wantVal: true},\n\n\t\t{path: \".gitignore\", wantVal: false},\n\t\t{path: \"dir/.gitkeep\", wantVal: false},\n\n\t\t// Windows-specific\n\t\t{path: `.git\\`, wantVal: true},\n\t\t{path: `.git\\hooks\\pre-commit`, wantVal: true},\n\t\t{path: `.git\\hooks`, wantVal: true},\n\t\t{path: `dir\\.git`, wantVal: true},\n\n\t\t{path: `.\\.git.`, wantVal: true},\n\t\t{path: `.\\.git.\\`, wantVal: true},\n\t\t{path: `.git.\\hooks\\pre-commit`, wantVal: true},\n\t\t{path: `.git.\\hooks`, wantVal: true},\n\t\t{path: `dir\\.git.`, wantVal: true},\n\n\t\t{path: \"./.git.\", wantVal: true},\n\t\t{path: \"./.git./\", wantVal: true},\n\t\t{path: \".git./hooks/pre-commit\", wantVal: true},\n\t\t{path: \".git./hooks\", wantVal: true},\n\t\t{path: \"dir/.git.\", wantVal: true},\n\n\t\t{path: `dir\\.gitkeep`, wantVal: false},\n\t}\n\tfor _, test := range tests {\n\t\tt.Run(test.path, func(t *testing.T) {\n\t\t\tassert.Equal(t, test.wantVal, isRepositoryGitPath(test.path))\n\t\t})\n\t}\n}\n"], "filenames": ["CHANGELOG.md", "internal/db/repo_editor.go", "internal/db/repo_editor_test.go"], "buggy_code_start_loc": [24, 470, 8], "buggy_code_end_loc": [24, 474, 36], "fixing_code_start_loc": [25, 470, 7], "fixing_code_end_loc": [26, 476, 49], "type": "CWE-78", "message": "OS Command Injection in GitHub repository gogs/gogs prior to 0.12.9.", "other": {"cve": {"id": "CVE-2022-1986", "sourceIdentifier": "security@huntr.dev", "published": "2022-06-09T17:15:08.627", "lastModified": "2022-06-15T17:01:21.060", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OS Command Injection in GitHub repository gogs/gogs prior to 0.12.9."}, {"lang": "es", "value": "Una Inyecci\u00f3n de comandos del Sistema Operativo en el repositorio de GitHub gogs/gogs versiones anteriores a 0.12.9"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 10.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:gogs:gogs:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.12.9", "matchCriteriaId": "4DAD0C2A-2575-4160-90B2-D024A0A41B0A"}]}]}], "references": [{"url": "https://github.com/gogs/gogs/commit/38aff73251cc46ced96dd608dab6190415032a82", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/776e8f29-ff5e-4501-bb9f-0bd335007930", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/gogs/gogs/commit/38aff73251cc46ced96dd608dab6190415032a82"}}