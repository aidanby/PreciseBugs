{"buggy_code": ["<?php\n\nif (!defined('BASEPATH')) {\n    exit('No direct script access allowed');\n}\n/*\n * LimeSurvey\n * Copyright (C) 2013 The LimeSurvey Project Team / Carsten Schmitz\n * All rights reserved.\n * License: GNU/GPL License v2 or later, see LICENSE.php\n * LimeSurvey is free software. This version may have been modified pursuant\n * to the GNU General Public License, and as distributed it includes or\n * is derivative of works licensed under the GNU General Public License or\n * other free or open source software licenses.\n * See COPYRIGHT.php for copyright notices and details.\n */\n\n/**\n * Filemanagement Controller\n *\n * This controller is used in the global file management as well as the survey specific\n *\n * @package        LimeSurvey\n * @subpackage    Backend\n */\nclass LimeSurveyFileManager extends Survey_Common_Action\n{\n    /**\n     * In controller error storage to have a centralizes error message system\n     *\n     * @var Object\n     */\n    private $oError = null;\n\n    /**\n     * globally available directories\n     * @TODO make this a configuration in global config\n     *\n     * @var array\n     */\n    private $globalDirectories = [\n        'upload' . DIRECTORY_SEPARATOR . 'themes' . DIRECTORY_SEPARATOR . 'survey' . DIRECTORY_SEPARATOR . 'generalfiles',\n        'upload' . DIRECTORY_SEPARATOR . 'global',\n    ];\n\n    public function getAllowedFileExtensions() {\n        return Yii::app()->getConfig('allowedfileuploads');\n    }\n\n    /**\n     * Basic index function to call the view\n     *\n     * @param int|null $iSurveyId\n     * @return void Renders HTML-page\n     */\n    public function index($surveyid = null)\n    {\n        $possibleFolders = $this->_collectFolderList($surveyid);\n\n        $aTranslate = [\n            'File management' => gT('File management'),\n            'Upload' => gT('Upload'),\n            'Cancel move' => gT('Cancel move'),\n            'Cancel copy' => gT('Cancel copy'),\n            'Move' => gT('Move'),\n            'Copy' => gT('Copy'),\n            'Upload a file' => gT('Upload a file'),\n            'File could not be uploaded' => gT('File could not be uploaded'),\n            'Drag and drop here, or click once to start uploading' => gT('Drag and drop here, or click once to start uploading'),\n            'File is uploaded to currently selected folder' => gT('File is uploaded to currently selected folder'),\n            'An error has happened and no files could be located' => gT('An error has happened and no files could be located'),\n            'An error has occured and the file list could not be loaded:' => gT('An error has occured and the file list could not be loaded:'),\n            'An error has occured and the folders could not be loaded:' => gT('An error has occured and the folders could not be loaded:'),\n            'An error has occured and the file(s) could not be uploaded:' => gT('An error has occured and the folders could not be loaded:'),\n            'An error has occured and the selected files could not be downloaded.' => gT('An error has occured and the selected files could not be downloaded.'),\n            'File name' => gT('File name'),\n            'Type' => gT('Type'),\n            'Size' => gT('Size'),\n            'Mod time' => gT('Mod time'),\n            'Action' => gT('Action'),\n            'Delete file' => gT('Delete file'),\n            'Copy file' => gT('Copy file'),\n            'Move file' => gT('Move file'),\n            'Allowed file extensions' => gT('Allowed file extensions'),\n            'File formats' => '.'.gT(implode(\", .\", $this->allowedFileExtensions)) \n        ];\n\n        Yii::app()->getClientScript()->registerPackage('filemanager');\n        $aData['jsData'] = [\n            'surveyid' => $surveyid,\n            'possibleFolders' => $possibleFolders,\n            'i10N' => $aTranslate,\n            'allowedFileTypes' => $this->allowedFileExtensions,\n            'baseUrl' => $this->getController()->createUrl('admin/filemanager', ['sa' => '']),\n        ];\n        $renderView = $surveyid == null ? 'view' : 'surveyview';\n\n        if ($surveyid !== null) {\n            $oSurvey = Survey::model()->findByPk($surveyid);\n            $aData['surveyid'] = $surveyid;\n            $aData['presetFolder'] = 'upload' . DIRECTORY_SEPARATOR . 'surveys' . DIRECTORY_SEPARATOR . $surveyid;\n            $aData['surveybar']['buttons']['view'] = true;\n            $aData['title_bar']['title'] = $oSurvey->currentLanguageSettings->surveyls_title . \" (\" . gT(\"ID\") . \":\" . $surveyid . \")\";\n            $aData['subaction'] = gT(\"File manager\");\n        }\n\n        $this->_renderWrappedTemplate('SurveyFiles', $renderView, $aData);\n    }\n\n    public function getFilesForSurvey($surveyid = null)\n    {\n        $folders = $this->_collectCompleteFolderList($surveyid);\n        $result = [];\n\n        foreach ($folders as $folder) {\n            $result[$folder] = $this->_collectFileList($folder);\n        }\n\n        $this->_printJsonResponse($result);\n        return;\n    }\n\n    /**\n     * Calls the list of files in the selected folder\n     *\n     * @param string $folder\n     * @param int|null $iSurveyId\n     * @return void Renders json document\n     */\n    public function getFileList($folder, $iSurveyId = null)\n    {\n        $directory = $this->_checkFolder($folder, $iSurveyId);\n\n        if ($directory === false) {\n            $this->throwError();\n            return;\n        }\n\n        $fileList = $this->_collectFileList($directory);\n\n        $this->_printJsonResponse($fileList);\n        return;\n    }\n\n    public function getFolderList($iSurveyId = null)\n    {\n        $aAllowedFolders = $this->_collectRecursiveFolderList($iSurveyId);\n\n        $this->_printJsonResponse($aAllowedFolders);\n        return;\n    }\n\n    public function deleteFile()\n    {\n        $iSurveyId = Yii::app()->request->getPost('surveyid');\n        $file = Yii::app()->request->getPost('file');\n        $folder = dirname($file['path']);\n        $checkDirectory = $this->_checkFolder($folder, $iSurveyId);\n        \n        if ($checkDirectory === false) {\n            $this->throwError();\n            return;\n        }\n        \n        $realFilePath = dirname(Yii::app()->basePath) . DIRECTORY_SEPARATOR . $file['path'];\n        \n        //Throw exception if file does not exist\n        if (!$this->checkTargetExists($realFilePath)) {\n            $this->_setError(\n                \"FILE_NOT_EXISTING\",\n                gT(\"The file does not exist\")\n            );\n            $this->throwError();\n        }\n\n        if (!unlink($realFilePath)) {\n            $this->_setError(\n                \"DELETE_FILE_ERROR\",\n                gT(\"The file could not be deleted\")\n            );\n            $this->throwError();\n        }\n        $this->_printJsonResponse(\n            [\n                'success' => true,\n                'message' => sprintf(gT(\"File successfully deleted\"), $file['shortName']),\n            ]\n        );\n    }\n\n    public function transitFiles()\n    {\n        $folder = Yii::app()->request->getPost('targetFolder');\n        $iSurveyId = Yii::app()->request->getPost('surveyid');\n        $files = Yii::app()->request->getPost('files');\n        $action = Yii::app()->request->getPost('action');\n\n        $checkDirectory = $this->_checkFolder($folder, $iSurveyId);\n        \n        foreach($files as $file) {\n            $this->checkChangedFilename($file);\n\n            $realTargetPath = dirname(Yii::app()->basePath) . DIRECTORY_SEPARATOR . $folder;\n            $fileDestination = realpath($realTargetPath) . DIRECTORY_SEPARATOR . $file['shortName'];\n\n            $realFilePath = dirname(Yii::app()->basePath) . DIRECTORY_SEPARATOR . $file['path'];\n            $fileSource = realpath($realFilePath);\n\n            if ($this->checkTargetExists($fileDestination) && Yii::app()->getConfig('overwritefiles') == 0) {\n                $ext = pathinfo($fileDestination, PATHINFO_EXTENSION);\n                $shorthash = hash('adler32', microtime());\n                $fileDestination = preg_replace(\"/\\.\" . $ext . \"/\", \"-\" . $shorthash . \".\" . $ext, $fileDestination);\n            }\n\n            if ($action == 'copy') {\n                if (!copy($fileSource, $fileDestination)) {\n                    $this->_setError(\n                        'COPY_FAILED',\n                        gT(\"Your file could not be copied\")\n                    );\n                    $this->throwError();\n                    return;\n                }\n            } else if ($action == 'move') {\n                if (!@rename($fileSource, $fileDestination)) {\n                    $this->_setError(\n                        'MOVE_FAILED',\n                        gT(\"Your file could not be moved\")\n                    );\n                    $this->throwError();\n                    return;\n                }\n            }\n        }\n\n        $successMessage = $action == 'copy' ? gT(\"Files successfully copied\") : gT(\"Files successfully moved\");\n        $this->_printJsonResponse([\n            'success' => true,\n            'message' => $successMessage,\n        ]);\n        return;\n\n    }\n\n    /**\n     * Action to upload a file returns a json document\n     * @TODO Currently a naive extension filter is in place this needs to be secured against executables.\n     *\n     * @return void\n     */\n    public function uploadFile()\n    {\n        $folder = Yii::app()->request->getPost('folder');\n        $iSurveyId = Yii::app()->request->getPost('surveyid', null);\n\n        if (($iSurveyId == 'null' || $iSurveyId == null) && !preg_match(\"/generalfiles/\", $folder)) {\n            $iSurveyId = null;\n            $folder = 'upload' . DIRECTORY_SEPARATOR . 'global';\n        }\n\n        $directory = $this->_checkFolder($folder, $iSurveyId);\n\n        if ($directory === false) {\n            $this->throwError();\n            return;\n        }\n\n        $debug[] = $_FILES;\n\n        if ($_FILES['file']['error'] == 1 || $_FILES['file']['error'] == 2) {\n            $this->_setError(\n                'MAX_FILESIZE_REACHED',\n                sprintf(gT(\"Sorry, this file is too large. Only files up to %01.2f MB are allowed.\"), getMaximumFileUploadSize() / 1024 / 1024)\n            );\n            $this->throwError();\n            return;\n        }\n\n        $path = $_FILES['file']['name'];\n        $ext = pathinfo($path, PATHINFO_EXTENSION);\n\n        // Naive fileextension test => needs proper evaluation\n\n        if ($this->_extensionAllowed($ext, 'upload') === false) {\n            $this->_setError(\n                'FILETYPE_NOT_ALLOWED',\n                gT(\"Sorry, this file type is not allowed. Please contact your administrator for a list of allowed filetypes.\")\n            );\n            $this->throwError();\n            return;\n        }\n\n        $destdir = dirname(Yii::app()->basePath) . DIRECTORY_SEPARATOR . $folder;\n\n        $filename = sanitize_filename($_FILES['file']['name'], false, false, false); // Don't force lowercase or alphanumeric\n        $fullfilepath = $destdir . DIRECTORY_SEPARATOR . $filename;\n        $fullfilepath = preg_replace(\"%\".DIRECTORY_SEPARATOR.DIRECTORY_SEPARATOR.\"%\", DIRECTORY_SEPARATOR, $fullfilepath);\n\n        if ($this->checkTargetExists($fullfilepath) && Yii::app()->getConfig('overwritefiles') == 0) {\n            $ext = pathinfo($fullfilepath, PATHINFO_EXTENSION);\n            $shorthash = hash('adler32', microtime());\n            $fullfilepath = preg_replace(\"/\\.\" . $ext . \"/\", \"-\" . $shorthash . \".\", $fullfilepath);\n        }\n\n        //$fullfilepath = realpath($fullfilepath);\n\n        $debug[] = $destdir;\n        $debug[] = $filename;\n        $debug[] = $fullfilepath;\n\n        if (!is_writable($destdir)) {\n            $this->_setError(\n                'FILE_DESTINATION_UNWRITABLE',\n                sprintf(gT(\"An error occurred uploading your file. The folder (%s) is not writable for the webserver.\"), $folder)\n            );\n            $this->throwError();\n            return;\n        }\n\n        \n        if($ext == 'zip') {\n            App()->loadLibrary('admin.pclzip');\n            $zip = new PclZip($_FILES['file']['tmp_name']);\n            $aExtractResult = $zip->extract(PCLZIP_OPT_PATH, $destdir, PCLZIP_CB_PRE_EXTRACT, 'resourceExtractFilter');\n            \n            if ($aExtractResult === 0) {\n                $this->_setError(\n                    'FILE_NOT_A_VALID_ARCHIVE',\n                    gT(\"This file is not a valid ZIP file archive. Import failed.\")\n                );\n                $this->throwError();\n                return;\n            };\n\n            $linkToImage = 'about:blank';\n            $message = sprintf(gT(\"File %s uploaded and %s files unpacked\"), $filename, safecount($aExtractResult));\n        } else {\n            if (\n                !move_uploaded_file(\n                    $_FILES['file']['tmp_name'], \n                    $fullfilepath \n                )\n            ) {\n                $this->_setError(\n                    'FILE_COULD NOT_BE_MOVED',\n                    sprintf(gT(\"An error occurred uploading your file. This may be caused by incorrect permissions for the target folder. (%s)\"), $folder)\n                );\n                $this->throwError();\n                return;\n            }\n            $message = sprintf(gT(\"File %s uploaded\"), $filename);\n            $linkToImage = Yii::app()->baseUrl . '/' . $folder . '/' . $filename;\n        }\n\n        \n\n\n        $this->_printJsonResponse(\n            [\n                'success' => true,\n                'message' => $message,\n                'src' => $linkToImage,\n                'debug' => $debug,\n            ]\n        );\n\n    }\n\n    public function downloadFiles() {\n        App()->loadLibrary('admin.pclzip');\n        \n        $folder = basename(Yii::app()->request->getPost('folder', 'global'));\n        $files = Yii::app()->request->getPost('files');\n\n        $tempdir = Yii::app()->getConfig('tempdir');\n        $randomizedFileName = $folder.'_'.substr(md5(time()),3,13).'.zip';\n        $zipfile = $tempdir.DIRECTORY_SEPARATOR.$randomizedFileName;\n        $arrayOfFiles = array_map( function($file){ return $file['path']; }, $files);\n        $archive = new PclZip($zipfile);\n        $checkFileCreate = $archive->create($arrayOfFiles, PCLZIP_OPT_REMOVE_ALL_PATH);\n        $urlFormat = Yii::app()->getUrlManager()->getUrlFormat();\n        $getFileLink = Yii::app()->createUrl('admin/filemanager/sa/getZipFile');\n        if($urlFormat == 'path') {\n            $getFileLink .= '?path='.$zipfile;\n        } else {\n            $getFileLink .= '&path='.$zipfile;\n        }\n\n        $this->_printJsonResponse(\n            [\n                'success' => true,\n                'message' => sprintf(gT(\"Files are ready for download in archive %s.\"), $randomizedFileName),\n                'downloadLink' => $getFileLink ,\n            ]\n        );\n    }\n\n    public function getZipFile($path) {\n        $filename = basename($path);\n\n        // echo \"<pre>\";\n        // echo $path.\"\\n\";\n        // echo $filename.\"\\n\";\n        // echo \"isFile => \".is_file($path) ? 'isFile' : 'isNoFile'.\"\\n\";\n        // echo \"</pre>\";\n        if (is_file($path) || true) {\n            // Send the file for download!\n            header(\"Expires: 0\");\n            header(\"Cache-Control: must-revalidate\");\n            header(\"Content-Type: application/force-download\");\n            header(\"Content-Disposition: attachment; filename=$filename\");\n            header(\"Content-Description: File Transfer\");\n\n            @readfile($path);\n\n            // Delete the temporary file\n            unlink($path);\n        }\n    }\n\n    ############################ PRIVATE METHODS ############################\n\n    /**\n     * Naive test for file extension\n     * @TODO enhance this for file uploads\n     *\n     * @param string $fileExtension\n     * @return boolean\n     */\n    private function _extensionAllowed($fileExtension, $purpose = 'show')\n    {\n        if($purpose == 'upload') {\n            return in_array($fileExtension, $this->allowedFileExtensions) || $fileExtension == 'zip';\n        }\n\n        if ($purpose == 'show') {\n            return in_array($fileExtension, $this->allowedFileExtensions);\n        }\n    }\n\n    private function checkTargetExists($fileDestination)\n    {\n        return is_file($fileDestination);\n    }\n\n    private function _checkFolder($sFolderPath, $iSurveyId = null)\n    {\n\n        $aAllowedFolders = $this->_collectCompleteFolderList($iSurveyId);\n        $inInAllowedFolders = false;\n\n        foreach ($aAllowedFolders as $folderName => $folderPath) {\n            $inInAllowedFolders = (preg_match('%/?' . preg_quote($folderPath) . '/?%', $sFolderPath)) || $inInAllowedFolders;\n        }\n\n        if (!$inInAllowedFolders) {\n            $this->_setError('NO_PERMISSION', gT(\"You don't have permission to this folder\"), null, [\n                \"sFolderPath\" => $sFolderPath,\n                \"aAllowedFolders\" => $aAllowedFolders,\n            ]);\n            return false;\n        }\n\n        $realPath = dirname(Yii::app()->basePath) . DIRECTORY_SEPARATOR . $sFolderPath;\n        if (!is_dir($realPath)) {\n            mkdir($realPath);\n        }\n\n        return $sFolderPath;\n    }\n\n    /**\n     * Creates a list of files in the selected folder\n     *\n     * @param int|null $iSurveyId\n     * @return array list of files [filename => filepath]\n     */\n    private function _collectFileList($folderPath)\n    {\n        $directoryArray = array();\n\n        $realPath = dirname(Yii::app()->basePath) . DIRECTORY_SEPARATOR . $folderPath;\n        if (empty($realPath) || !is_dir($realPath)) {\n            return $directoryArray;\n        }\n\n        $files = scandir($realPath);\n        $finfo = finfo_open(FILEINFO_MIME_TYPE);\n\n        foreach ($files as $file) {\n            if ($file == '.' || $file == '..') {continue;}\n\n            $fileRelativePath = $folderPath . DIRECTORY_SEPARATOR . $file;\n            $fileRealpath = dirname(Yii::app()->basePath) . DIRECTORY_SEPARATOR . $fileRelativePath;\n            $fileIsDirectoy = @is_dir($fileRealpath);\n            $isImage = strpos(finfo_file($finfo, $fileRealpath), 'image') !== false;\n            if ($fileIsDirectoy) {\n                continue;\n            } else {\n\n                $fileExt = strtolower(pathinfo($fileRealpath, PATHINFO_EXTENSION));\n                if (!$this->_extensionAllowed($fileExt)) {continue;}\n\n                $iconClassArray = LsDefaultDataSets::fileTypeIcons();\n                $size = filesize($fileRealpath);\n                if (isset($iconClassArray[$fileExt])) {\n                    $iconClass = $iconClassArray[$fileExt];\n                } else {\n                    $iconClass = $iconClassArray['blank'];\n                }\n            }\n\n            $sSystemDateFormat = getDateFormatData(Yii::app()->session['dateformat']);\n            $iFileTimeDate = filemtime($fileRealpath);\n\n            $linkToImage = Yii::app()->getBaseUrl(true) . '/' . $folderPath . '/' . rawurlencode($file);\n            $hash = hash_file('md5', $fileRealpath);\n\n            $directoryArray[$file] = [\n                'iconClass' => $iconClass,\n                'isImage' => $isImage,\n                'src' => $linkToImage,\n                'hash' => $hash,\n                'path' => $fileRelativePath,\n                'size' => $size,\n                'shortName' => $file,\n                'mod_time' => date($sSystemDateFormat['phpdate'] . ' H:i', $iFileTimeDate),\n            ];\n        }\n        return $directoryArray;\n\n    }\n\n    /**\n     * Creates an array of possible folders\n     *\n     * @param int|null $iSurveyId\n     * @return array List of visible folders\n     */\n    private function _collectFolderList($iSurveyId = null)\n    {\n        $folders = $this->globalDirectories;\n\n        if ($iSurveyId != null) {\n            $folders[] = 'upload' . DIRECTORY_SEPARATOR . 'surveys' . DIRECTORY_SEPARATOR . $iSurveyId;\n        } else {\n            $aSurveyIds = Yii::app()->db->createCommand()->select('sid')->from('{{surveys}}')->queryColumn();\n            foreach ($aSurveyIds as $itrtSsurveyId) {\n                if (\n                    Permission::model()->hasGlobalPermission('superadmin', 'read')\n                    || Permission::model()->hasGlobalPermission('surveys', 'update')\n                    || Permission::model()->hasSurveyPermission($itrtSsurveyId, 'surveylocale', 'update')\n                ) {\n                    $folders[] = 'upload' . DIRECTORY_SEPARATOR . 'surveys' . DIRECTORY_SEPARATOR . $itrtSsurveyId;\n                }\n\n            }\n        }\n\n        return $folders;\n    }\n\n    /**\n     * Creates an array of all possible folders including child folders for access permission checks.\n     *\n     * @param int|null $iSurveyId\n     * @return array List of visible folders\n     */\n    private function _collectCompleteFolderList($iSurveyId = null)\n    {\n        $folders = $this->globalDirectories;\n\n        if ($iSurveyId != null) {\n            $folders[] = 'upload' . DIRECTORY_SEPARATOR . 'surveys' . DIRECTORY_SEPARATOR . $iSurveyId;\n        } else {\n            $aSurveyIds = Yii::app()->db->createCommand()->select('sid')->from('{{surveys}}')->queryColumn();\n            foreach ($aSurveyIds as $itrtSsurveyId) {\n                if (\n                    Permission::model()->hasGlobalPermission('superadmin', 'read')\n                    || Permission::model()->hasGlobalPermission('surveys', 'update')\n                    || Permission::model()->hasSurveyPermission($itrtSsurveyId, 'surveylocale', 'update')\n                ) {\n                    $folders[] = 'upload' . DIRECTORY_SEPARATOR . 'surveys' . DIRECTORY_SEPARATOR . $itrtSsurveyId;\n                }\n\n            }\n        }\n        $filelist = [];\n        foreach ($folders as $folder) {\n            $this->__recursiveScandir($folder, $folders, $filelist);\n        }\n\n        return $folders;\n    }\n\n    /**\n     * Recurses down the folder provided and adds a complete list of folders and files to the parametered arrays\n     * !!! Array provided are changed !!!\n     *\n     * @param string $folder\n     * @param array !by reference! $folderlist\n     * @param array !by reference! $filelist\n     * @return void\n     */\n    private function __recursiveScandir($folder, &$folderlist, &$filelist)\n    {\n        $realPath = dirname(Yii::app()->basePath) . DIRECTORY_SEPARATOR . $folder;\n        if (!file_exists($realPath)) {\n            return $folderlist;\n        }\n\n        $scandirCurrent = scandir($realPath);\n        foreach ($scandirCurrent as $fileDescriptor) {\n            if ($fileDescriptor == '.' || $fileDescriptor == '..') {continue;}\n\n            $childRelativePath = $folder . DIRECTORY_SEPARATOR . $fileDescriptor;\n            $childRealPath = realpath(Yii::getPathOfAlias('basePath') . $childRelativePath);\n            $childIsDirectoy = is_dir($childRealPath);\n\n            if ($childIsDirectoy) {\n                $folderlist[] = $childRelativePath;\n                $this->__recursiveScandir($childRelativePath, $folderlist, $filelist);\n            } else {\n                $filelist[] = $childRelativePath;\n            }\n        }\n    }\n\n    /**\n     * Creates an associative array of the possible folders for the treeview\n     *\n     * @param int|null $iSurveyId\n     * @return array List of visible folders\n     */\n    private function _collectRecursiveFolderList($iSurveyId = null)\n    {\n        $folders = $this->_collectFolderList($iSurveyId);\n        $folderList = [];\n        foreach ($folders as $folder) {\n            $folderList[] = $this->_composeFolderArray($folder);\n        }\n        return $folderList;\n    }\n\n    /**\n     * Get the correct tree array representation including child folders for provided folder\n     *\n     * @param string $folder\n     * @return array\n     */\n    private function _composeFolderArray($folder, $level='0')\n    {\n\n        $realPath = dirname(Yii::app()->basePath) . DIRECTORY_SEPARATOR . $folder;\n        if (!file_exists($realPath)) {\n            $this->_recursiveMkdir($realPath, 0750, true);\n        }\n        $allFiles = scandir($realPath);\n\n        $childFolders = [];\n        foreach ($allFiles as $childFile) {\n\n            if ($childFile == '.' || $childFile == '..') {continue;}\n\n            $childRelativePath = $folder . DIRECTORY_SEPARATOR . $childFile;\n            $childRealPath = realpath(Yii::getPathOfAlias('basePath') . $childRelativePath);\n            $childIsDirectoy = is_dir($childRealPath);\n\n            if (!$childIsDirectoy) {continue;}\n\n            $childFolders[] = $this->_composeFolderArray($childRelativePath, ($level+1));\n\n        }\n\n        $pathArray = explode(\"/\", $folder);\n        $shortName = end($pathArray);\n\n        $folderArray = [\n            'key' => $shortName.'_'.$level,\n            'folder' => $folder,\n            'realPath' => $realPath,\n            'shortName' => $shortName,\n            'children' => $childFolders,\n        ];\n        return $folderArray;\n    }\n\n    private function _recursiveMkdir($folder, $rights=0755) {\n        $folders = explode(DIRECTORY_SEPARATOR, $folder);\n        $curFolder = array_shift($folders).DIRECTORY_SEPARATOR;\n        foreach ($folders as $folder) {\n            $curFolder.= DIRECTORY_SEPARATOR.$folder;\n            if (!is_dir($curFolder) && strlen($curFolder) > 0 && !preg_match(\"/^[A-Za-z]:$/\", $curFolder)) {\n                mkdir($curFolder, $rights);\n            }\n        }\n    }\n\n    /**\n     * Sets the internal error object\n     *\n     * @param string $code\n     * @param string $message\n     * @param string|null $title\n     * @return void\n     */\n    private function _setError($code, $message, $title = '', $debug = null)\n    {\n        $this->oError = new FileManagerError();\n        $this->oError->code = $code;\n        $this->oError->message = $message;\n        $this->oError->title = $title;\n        $this->oError->debug = $debug;\n    }\n\n    /**\n     * Prints a json document with the data provided as parameter\n     *\n     * @param array $data The data that should be transferred\n     * @return void Renders JSON document\n     */\n    private function _printJsonResponse($data)\n    {\n        $this->getController()->renderPartial(\n            '/admin/super/_renderJson', [\n                'success' => true,\n                'data' => $data,\n        ]);\n    }\n\n    /**\n     * Prints a json document with the intercontroller error message\n     *\n     * @return void Renders JSON document\n     */\n    private function throwError()\n    {\n        throw new LSJsonException(\n            500,\n            (Yii::app()->getConfig('debug') > 0 ? $this->oError->code.': ' : '')\n            .$this->oError->message,\n            0\n        );\n    }\n\n    /**\n     * Throw exception if src and dest filename is different.\n     *\n     * @param array $file\n     * @return void\n     * @throws \\Exception\n     */\n    private function checkChangedFilename(array $file)\n    {\n        /** @var string[] */\n        $pathParts = explode('/', $file['path']);\n        /** @var string */\n        $lastPart = $pathParts[count($pathParts) - 1];\n\n        if ($lastPart !== $file['shortName']) {\n            $this->_setError(\n                \"FILENAME_CHANGED\",\n                gT(\"The destination file name is not the same as the source file name\")\n            );\n            $this->throwError();\n        }\n    }\n}\n\nclass FileManagerError\n{\n    public $message;\n    public $title;\n    public $code;\n}\n"], "fixing_code": ["<?php\n\nif (!defined('BASEPATH')) {\n    exit('No direct script access allowed');\n}\n/*\n * LimeSurvey\n * Copyright (C) 2013 The LimeSurvey Project Team / Carsten Schmitz\n * All rights reserved.\n * License: GNU/GPL License v2 or later, see LICENSE.php\n * LimeSurvey is free software. This version may have been modified pursuant\n * to the GNU General Public License, and as distributed it includes or\n * is derivative of works licensed under the GNU General Public License or\n * other free or open source software licenses.\n * See COPYRIGHT.php for copyright notices and details.\n */\n\n/**\n * Filemanagement Controller\n *\n * This controller is used in the global file management as well as the survey specific\n *\n * @package        LimeSurvey\n * @subpackage    Backend\n */\nclass LimeSurveyFileManager extends Survey_Common_Action\n{\n    /**\n     * In controller error storage to have a centralizes error message system\n     *\n     * @var Object\n     */\n    private $oError = null;\n\n    /**\n     * globally available directories\n     * @TODO make this a configuration in global config\n     *\n     * @var array\n     */\n    private $globalDirectories = [\n        'upload' . DIRECTORY_SEPARATOR . 'themes' . DIRECTORY_SEPARATOR . 'survey' . DIRECTORY_SEPARATOR . 'generalfiles',\n        'upload' . DIRECTORY_SEPARATOR . 'global',\n    ];\n\n    public function getAllowedFileExtensions() {\n        return Yii::app()->getConfig('allowedfileuploads');\n    }\n\n    /**\n     * Basic index function to call the view\n     *\n     * @param int|null $iSurveyId\n     * @return void Renders HTML-page\n     */\n    public function index($surveyid = null)\n    {\n        $possibleFolders = $this->_collectFolderList($surveyid);\n\n        $aTranslate = [\n            'File management' => gT('File management'),\n            'Upload' => gT('Upload'),\n            'Cancel move' => gT('Cancel move'),\n            'Cancel copy' => gT('Cancel copy'),\n            'Move' => gT('Move'),\n            'Copy' => gT('Copy'),\n            'Upload a file' => gT('Upload a file'),\n            'File could not be uploaded' => gT('File could not be uploaded'),\n            'Drag and drop here, or click once to start uploading' => gT('Drag and drop here, or click once to start uploading'),\n            'File is uploaded to currently selected folder' => gT('File is uploaded to currently selected folder'),\n            'An error has happened and no files could be located' => gT('An error has happened and no files could be located'),\n            'An error has occured and the file list could not be loaded:' => gT('An error has occured and the file list could not be loaded:'),\n            'An error has occured and the folders could not be loaded:' => gT('An error has occured and the folders could not be loaded:'),\n            'An error has occured and the file(s) could not be uploaded:' => gT('An error has occured and the folders could not be loaded:'),\n            'An error has occured and the selected files could not be downloaded.' => gT('An error has occured and the selected files could not be downloaded.'),\n            'File name' => gT('File name'),\n            'Type' => gT('Type'),\n            'Size' => gT('Size'),\n            'Mod time' => gT('Mod time'),\n            'Action' => gT('Action'),\n            'Delete file' => gT('Delete file'),\n            'Copy file' => gT('Copy file'),\n            'Move file' => gT('Move file'),\n            'Allowed file extensions' => gT('Allowed file extensions'),\n            'File formats' => '.'.gT(implode(\", .\", $this->allowedFileExtensions)) \n        ];\n\n        Yii::app()->getClientScript()->registerPackage('filemanager');\n        $aData['jsData'] = [\n            'surveyid' => $surveyid,\n            'possibleFolders' => $possibleFolders,\n            'i10N' => $aTranslate,\n            'allowedFileTypes' => $this->allowedFileExtensions,\n            'baseUrl' => $this->getController()->createUrl('admin/filemanager', ['sa' => '']),\n        ];\n        $renderView = $surveyid == null ? 'view' : 'surveyview';\n\n        if ($surveyid !== null) {\n            $oSurvey = Survey::model()->findByPk($surveyid);\n            $aData['surveyid'] = $surveyid;\n            $aData['presetFolder'] = 'upload' . DIRECTORY_SEPARATOR . 'surveys' . DIRECTORY_SEPARATOR . $surveyid;\n            $aData['surveybar']['buttons']['view'] = true;\n            $aData['title_bar']['title'] = $oSurvey->currentLanguageSettings->surveyls_title . \" (\" . gT(\"ID\") . \":\" . $surveyid . \")\";\n            $aData['subaction'] = gT(\"File manager\");\n        }\n\n        $this->_renderWrappedTemplate('SurveyFiles', $renderView, $aData);\n    }\n\n    public function getFilesForSurvey($surveyid = null)\n    {\n        $folders = $this->_collectCompleteFolderList($surveyid);\n        $result = [];\n\n        foreach ($folders as $folder) {\n            $result[$folder] = $this->_collectFileList($folder);\n        }\n\n        $this->_printJsonResponse($result);\n        return;\n    }\n\n    /**\n     * Calls the list of files in the selected folder\n     *\n     * @param string $folder\n     * @param int|null $iSurveyId\n     * @return void Renders json document\n     */\n    public function getFileList($folder, $iSurveyId = null)\n    {\n        $directory = $this->_checkFolder($folder, $iSurveyId);\n\n        if ($directory === false) {\n            $this->throwError();\n            return;\n        }\n\n        $fileList = $this->_collectFileList($directory);\n\n        $this->_printJsonResponse($fileList);\n        return;\n    }\n\n    public function getFolderList($iSurveyId = null)\n    {\n        $aAllowedFolders = $this->_collectRecursiveFolderList($iSurveyId);\n\n        $this->_printJsonResponse($aAllowedFolders);\n        return;\n    }\n\n    public function deleteFile()\n    {\n        $iSurveyId = Yii::app()->request->getPost('surveyid');\n        $file = Yii::app()->request->getPost('file');\n        $folder = dirname($file['path']);\n        $checkDirectory = $this->_checkFolder($folder, $iSurveyId);\n        \n        if ($checkDirectory === false) {\n            $this->throwError();\n            return;\n        }\n        \n        $realFilePath = dirname(Yii::app()->basePath) . DIRECTORY_SEPARATOR . $file['path'];\n        \n        //Throw exception if file does not exist\n        if (!$this->checkTargetExists($realFilePath)) {\n            $this->_setError(\n                \"FILE_NOT_EXISTING\",\n                gT(\"The file does not exist\")\n            );\n            $this->throwError();\n        }\n\n        if (!unlink($realFilePath)) {\n            $this->_setError(\n                \"DELETE_FILE_ERROR\",\n                gT(\"The file could not be deleted\")\n            );\n            $this->throwError();\n        }\n        $this->_printJsonResponse(\n            [\n                'success' => true,\n                'message' => sprintf(gT(\"File successfully deleted\"), $file['shortName']),\n            ]\n        );\n    }\n\n    public function transitFiles()\n    {\n        $folder = Yii::app()->request->getPost('targetFolder');\n        $iSurveyId = Yii::app()->request->getPost('surveyid');\n        $files = Yii::app()->request->getPost('files');\n        $action = Yii::app()->request->getPost('action');\n\n        $checkDirectory = $this->_checkFolder($folder, $iSurveyId);\n        \n        foreach($files as $file) {\n            $this->checkChangedFilename($file);\n\n            $realTargetPath = dirname(Yii::app()->basePath) . DIRECTORY_SEPARATOR . $folder;\n            $fileDestination = realpath($realTargetPath) . DIRECTORY_SEPARATOR . $file['shortName'];\n\n            $realFilePath = dirname(Yii::app()->basePath) . DIRECTORY_SEPARATOR . $file['path'];\n            $fileSource = realpath($realFilePath);\n\n            if ($this->checkTargetExists($fileDestination) && Yii::app()->getConfig('overwritefiles') == 0) {\n                $ext = pathinfo($fileDestination, PATHINFO_EXTENSION);\n                $shorthash = hash('adler32', microtime());\n                $fileDestination = preg_replace(\"/\\.\" . $ext . \"/\", \"-\" . $shorthash . \".\" . $ext, $fileDestination);\n            }\n\n            if ($action == 'copy') {\n                if (!copy($fileSource, $fileDestination)) {\n                    $this->_setError(\n                        'COPY_FAILED',\n                        gT(\"Your file could not be copied\")\n                    );\n                    $this->throwError();\n                    return;\n                }\n            } else if ($action == 'move') {\n                if (!@rename($fileSource, $fileDestination)) {\n                    $this->_setError(\n                        'MOVE_FAILED',\n                        gT(\"Your file could not be moved\")\n                    );\n                    $this->throwError();\n                    return;\n                }\n            }\n        }\n\n        $successMessage = $action == 'copy' ? gT(\"Files successfully copied\") : gT(\"Files successfully moved\");\n        $this->_printJsonResponse([\n            'success' => true,\n            'message' => $successMessage,\n        ]);\n        return;\n\n    }\n\n    /**\n     * Action to upload a file returns a json document\n     * @TODO Currently a naive extension filter is in place this needs to be secured against executables.\n     *\n     * @return void\n     */\n    public function uploadFile()\n    {\n        $folder = Yii::app()->request->getPost('folder');\n        $iSurveyId = Yii::app()->request->getPost('surveyid', null);\n\n        if (($iSurveyId == 'null' || $iSurveyId == null) && !preg_match(\"/generalfiles/\", $folder)) {\n            $iSurveyId = null;\n            $folder = 'upload' . DIRECTORY_SEPARATOR . 'global';\n        }\n\n        $directory = $this->_checkFolder($folder, $iSurveyId);\n\n        if ($directory === false) {\n            $this->throwError();\n            return;\n        }\n\n        $debug[] = $_FILES;\n\n        if ($_FILES['file']['error'] == 1 || $_FILES['file']['error'] == 2) {\n            $this->_setError(\n                'MAX_FILESIZE_REACHED',\n                sprintf(gT(\"Sorry, this file is too large. Only files up to %01.2f MB are allowed.\"), getMaximumFileUploadSize() / 1024 / 1024)\n            );\n            $this->throwError();\n            return;\n        }\n\n        $path = $_FILES['file']['name'];\n        $ext = pathinfo($path, PATHINFO_EXTENSION);\n\n        // Naive fileextension test => needs proper evaluation\n\n        if ($this->_extensionAllowed($ext, 'upload') === false) {\n            $this->_setError(\n                'FILETYPE_NOT_ALLOWED',\n                gT(\"Sorry, this file type is not allowed. Please contact your administrator for a list of allowed filetypes.\")\n            );\n            $this->throwError();\n            return;\n        }\n\n        $destdir = dirname(Yii::app()->basePath) . DIRECTORY_SEPARATOR . $folder;\n\n        $filename = sanitize_filename($_FILES['file']['name'], false, false, false); // Don't force lowercase or alphanumeric\n        $fullfilepath = $destdir . DIRECTORY_SEPARATOR . $filename;\n        $fullfilepath = preg_replace(\"%\".DIRECTORY_SEPARATOR.DIRECTORY_SEPARATOR.\"%\", DIRECTORY_SEPARATOR, $fullfilepath);\n\n        if ($this->checkTargetExists($fullfilepath) && Yii::app()->getConfig('overwritefiles') == 0) {\n            $ext = pathinfo($fullfilepath, PATHINFO_EXTENSION);\n            $shorthash = hash('adler32', microtime());\n            $fullfilepath = preg_replace(\"/\\.\" . $ext . \"/\", \"-\" . $shorthash . \".\", $fullfilepath);\n        }\n\n        //$fullfilepath = realpath($fullfilepath);\n\n        $debug[] = $destdir;\n        $debug[] = $filename;\n        $debug[] = $fullfilepath;\n\n        if (!is_writable($destdir)) {\n            $this->_setError(\n                'FILE_DESTINATION_UNWRITABLE',\n                sprintf(gT(\"An error occurred uploading your file. The folder (%s) is not writable for the webserver.\"), $folder)\n            );\n            $this->throwError();\n            return;\n        }\n\n        \n        if($ext == 'zip') {\n            App()->loadLibrary('admin.pclzip');\n            $zip = new PclZip($_FILES['file']['tmp_name']);\n            $aExtractResult = $zip->extract(PCLZIP_OPT_PATH, $destdir, PCLZIP_CB_PRE_EXTRACT, 'resourceExtractFilter');\n            \n            if ($aExtractResult === 0) {\n                $this->_setError(\n                    'FILE_NOT_A_VALID_ARCHIVE',\n                    gT(\"This file is not a valid ZIP file archive. Import failed.\")\n                );\n                $this->throwError();\n                return;\n            };\n\n            $linkToImage = 'about:blank';\n            $message = sprintf(gT(\"File %s uploaded and %s files unpacked\"), $filename, safecount($aExtractResult));\n        } else {\n            if (\n                !move_uploaded_file(\n                    $_FILES['file']['tmp_name'], \n                    $fullfilepath \n                )\n            ) {\n                $this->_setError(\n                    'FILE_COULD NOT_BE_MOVED',\n                    sprintf(gT(\"An error occurred uploading your file. This may be caused by incorrect permissions for the target folder. (%s)\"), $folder)\n                );\n                $this->throwError();\n                return;\n            }\n            $message = sprintf(gT(\"File %s uploaded\"), $filename);\n            $linkToImage = Yii::app()->baseUrl . '/' . $folder . '/' . $filename;\n        }\n\n        \n\n\n        $this->_printJsonResponse(\n            [\n                'success' => true,\n                'message' => $message,\n                'src' => $linkToImage,\n                'debug' => $debug,\n            ]\n        );\n\n    }\n\n    public function downloadFiles() {\n        App()->loadLibrary('admin.pclzip');\n        \n        $folder = basename(Yii::app()->request->getPost('folder', 'global'));\n        $files = Yii::app()->request->getPost('files');\n\n        $tempdir = Yii::app()->getConfig('tempdir');\n        $randomizedFileName = $folder.'_'.substr(md5(time()),3,13).'.zip';\n        $zipfile = $tempdir.DIRECTORY_SEPARATOR.$randomizedFileName;\n        $arrayOfFiles = array_map( function($file){ return $file['path']; }, $files);\n        $archive = new PclZip($zipfile);\n        $checkFileCreate = $archive->create($arrayOfFiles, PCLZIP_OPT_REMOVE_ALL_PATH);\n        $urlFormat = Yii::app()->getUrlManager()->getUrlFormat();\n        $getFileLink = Yii::app()->createUrl('admin/filemanager/sa/getZipFile');\n        $_SESSION['__path'] = $zipfile;\n\n        $this->_printJsonResponse(\n            [\n                'success' => true,\n                'message' => sprintf(gT(\"Files are ready for download in archive %s.\"), $randomizedFileName),\n                'downloadLink' => $getFileLink ,\n            ]\n        );\n    }\n\n    /**\n     * @return void\n     */\n    public function getZipFile()\n    {\n        $path = $_SESSION['__path'];\n        unset($_SESSION['__path']);\n        $filename = basename($path);\n\n        if (is_file($path)) {\n            // Send the file for download!\n            header(\"Expires: 0\");\n            header(\"Cache-Control: must-revalidate\");\n            header(\"Content-Type: application/force-download\");\n            header(\"Content-Disposition: attachment; filename=$filename\");\n            header(\"Content-Description: File Transfer\");\n\n            @readfile($path);\n\n            // Delete the temporary file\n            unlink($path);\n        }\n    }\n\n    ############################ PRIVATE METHODS ############################\n\n    /**\n     * Naive test for file extension\n     * @TODO enhance this for file uploads\n     *\n     * @param string $fileExtension\n     * @return boolean\n     */\n    private function _extensionAllowed($fileExtension, $purpose = 'show')\n    {\n        if($purpose == 'upload') {\n            return in_array($fileExtension, $this->allowedFileExtensions) || $fileExtension == 'zip';\n        }\n\n        if ($purpose == 'show') {\n            return in_array($fileExtension, $this->allowedFileExtensions);\n        }\n    }\n\n    private function checkTargetExists($fileDestination)\n    {\n        return is_file($fileDestination);\n    }\n\n    private function _checkFolder($sFolderPath, $iSurveyId = null)\n    {\n\n        $aAllowedFolders = $this->_collectCompleteFolderList($iSurveyId);\n        $inInAllowedFolders = false;\n\n        foreach ($aAllowedFolders as $folderName => $folderPath) {\n            $inInAllowedFolders = (preg_match('%/?' . preg_quote($folderPath) . '/?%', $sFolderPath)) || $inInAllowedFolders;\n        }\n\n        if (!$inInAllowedFolders) {\n            $this->_setError('NO_PERMISSION', gT(\"You don't have permission to this folder\"), null, [\n                \"sFolderPath\" => $sFolderPath,\n                \"aAllowedFolders\" => $aAllowedFolders,\n            ]);\n            return false;\n        }\n\n        $realPath = dirname(Yii::app()->basePath) . DIRECTORY_SEPARATOR . $sFolderPath;\n        if (!is_dir($realPath)) {\n            mkdir($realPath);\n        }\n\n        return $sFolderPath;\n    }\n\n    /**\n     * Creates a list of files in the selected folder\n     *\n     * @param int|null $iSurveyId\n     * @return array list of files [filename => filepath]\n     */\n    private function _collectFileList($folderPath)\n    {\n        $directoryArray = array();\n\n        $realPath = dirname(Yii::app()->basePath) . DIRECTORY_SEPARATOR . $folderPath;\n        if (empty($realPath) || !is_dir($realPath)) {\n            return $directoryArray;\n        }\n\n        $files = scandir($realPath);\n        $finfo = finfo_open(FILEINFO_MIME_TYPE);\n\n        foreach ($files as $file) {\n            if ($file == '.' || $file == '..') {continue;}\n\n            $fileRelativePath = $folderPath . DIRECTORY_SEPARATOR . $file;\n            $fileRealpath = dirname(Yii::app()->basePath) . DIRECTORY_SEPARATOR . $fileRelativePath;\n            $fileIsDirectoy = @is_dir($fileRealpath);\n            $isImage = strpos(finfo_file($finfo, $fileRealpath), 'image') !== false;\n            if ($fileIsDirectoy) {\n                continue;\n            } else {\n\n                $fileExt = strtolower(pathinfo($fileRealpath, PATHINFO_EXTENSION));\n                if (!$this->_extensionAllowed($fileExt)) {continue;}\n\n                $iconClassArray = LsDefaultDataSets::fileTypeIcons();\n                $size = filesize($fileRealpath);\n                if (isset($iconClassArray[$fileExt])) {\n                    $iconClass = $iconClassArray[$fileExt];\n                } else {\n                    $iconClass = $iconClassArray['blank'];\n                }\n            }\n\n            $sSystemDateFormat = getDateFormatData(Yii::app()->session['dateformat']);\n            $iFileTimeDate = filemtime($fileRealpath);\n\n            $linkToImage = Yii::app()->getBaseUrl(true) . '/' . $folderPath . '/' . rawurlencode($file);\n            $hash = hash_file('md5', $fileRealpath);\n\n            $directoryArray[$file] = [\n                'iconClass' => $iconClass,\n                'isImage' => $isImage,\n                'src' => $linkToImage,\n                'hash' => $hash,\n                'path' => $fileRelativePath,\n                'size' => $size,\n                'shortName' => $file,\n                'mod_time' => date($sSystemDateFormat['phpdate'] . ' H:i', $iFileTimeDate),\n            ];\n        }\n        return $directoryArray;\n\n    }\n\n    /**\n     * Creates an array of possible folders\n     *\n     * @param int|null $iSurveyId\n     * @return array List of visible folders\n     */\n    private function _collectFolderList($iSurveyId = null)\n    {\n        $folders = $this->globalDirectories;\n\n        if ($iSurveyId != null) {\n            $folders[] = 'upload' . DIRECTORY_SEPARATOR . 'surveys' . DIRECTORY_SEPARATOR . $iSurveyId;\n        } else {\n            $aSurveyIds = Yii::app()->db->createCommand()->select('sid')->from('{{surveys}}')->queryColumn();\n            foreach ($aSurveyIds as $itrtSsurveyId) {\n                if (\n                    Permission::model()->hasGlobalPermission('superadmin', 'read')\n                    || Permission::model()->hasGlobalPermission('surveys', 'update')\n                    || Permission::model()->hasSurveyPermission($itrtSsurveyId, 'surveylocale', 'update')\n                ) {\n                    $folders[] = 'upload' . DIRECTORY_SEPARATOR . 'surveys' . DIRECTORY_SEPARATOR . $itrtSsurveyId;\n                }\n\n            }\n        }\n\n        return $folders;\n    }\n\n    /**\n     * Creates an array of all possible folders including child folders for access permission checks.\n     *\n     * @param int|null $iSurveyId\n     * @return array List of visible folders\n     */\n    private function _collectCompleteFolderList($iSurveyId = null)\n    {\n        $folders = $this->globalDirectories;\n\n        if ($iSurveyId != null) {\n            $folders[] = 'upload' . DIRECTORY_SEPARATOR . 'surveys' . DIRECTORY_SEPARATOR . $iSurveyId;\n        } else {\n            $aSurveyIds = Yii::app()->db->createCommand()->select('sid')->from('{{surveys}}')->queryColumn();\n            foreach ($aSurveyIds as $itrtSsurveyId) {\n                if (\n                    Permission::model()->hasGlobalPermission('superadmin', 'read')\n                    || Permission::model()->hasGlobalPermission('surveys', 'update')\n                    || Permission::model()->hasSurveyPermission($itrtSsurveyId, 'surveylocale', 'update')\n                ) {\n                    $folders[] = 'upload' . DIRECTORY_SEPARATOR . 'surveys' . DIRECTORY_SEPARATOR . $itrtSsurveyId;\n                }\n\n            }\n        }\n        $filelist = [];\n        foreach ($folders as $folder) {\n            $this->__recursiveScandir($folder, $folders, $filelist);\n        }\n\n        return $folders;\n    }\n\n    /**\n     * Recurses down the folder provided and adds a complete list of folders and files to the parametered arrays\n     * !!! Array provided are changed !!!\n     *\n     * @param string $folder\n     * @param array !by reference! $folderlist\n     * @param array !by reference! $filelist\n     * @return void\n     */\n    private function __recursiveScandir($folder, &$folderlist, &$filelist)\n    {\n        $realPath = dirname(Yii::app()->basePath) . DIRECTORY_SEPARATOR . $folder;\n        if (!file_exists($realPath)) {\n            return $folderlist;\n        }\n\n        $scandirCurrent = scandir($realPath);\n        foreach ($scandirCurrent as $fileDescriptor) {\n            if ($fileDescriptor == '.' || $fileDescriptor == '..') {continue;}\n\n            $childRelativePath = $folder . DIRECTORY_SEPARATOR . $fileDescriptor;\n            $childRealPath = realpath(Yii::getPathOfAlias('basePath') . $childRelativePath);\n            $childIsDirectoy = is_dir($childRealPath);\n\n            if ($childIsDirectoy) {\n                $folderlist[] = $childRelativePath;\n                $this->__recursiveScandir($childRelativePath, $folderlist, $filelist);\n            } else {\n                $filelist[] = $childRelativePath;\n            }\n        }\n    }\n\n    /**\n     * Creates an associative array of the possible folders for the treeview\n     *\n     * @param int|null $iSurveyId\n     * @return array List of visible folders\n     */\n    private function _collectRecursiveFolderList($iSurveyId = null)\n    {\n        $folders = $this->_collectFolderList($iSurveyId);\n        $folderList = [];\n        foreach ($folders as $folder) {\n            $folderList[] = $this->_composeFolderArray($folder);\n        }\n        return $folderList;\n    }\n\n    /**\n     * Get the correct tree array representation including child folders for provided folder\n     *\n     * @param string $folder\n     * @return array\n     */\n    private function _composeFolderArray($folder, $level='0')\n    {\n\n        $realPath = dirname(Yii::app()->basePath) . DIRECTORY_SEPARATOR . $folder;\n        if (!file_exists($realPath)) {\n            $this->_recursiveMkdir($realPath, 0750, true);\n        }\n        $allFiles = scandir($realPath);\n\n        $childFolders = [];\n        foreach ($allFiles as $childFile) {\n\n            if ($childFile == '.' || $childFile == '..') {continue;}\n\n            $childRelativePath = $folder . DIRECTORY_SEPARATOR . $childFile;\n            $childRealPath = realpath(Yii::getPathOfAlias('basePath') . $childRelativePath);\n            $childIsDirectoy = is_dir($childRealPath);\n\n            if (!$childIsDirectoy) {continue;}\n\n            $childFolders[] = $this->_composeFolderArray($childRelativePath, ($level+1));\n\n        }\n\n        $pathArray = explode(\"/\", $folder);\n        $shortName = end($pathArray);\n\n        $folderArray = [\n            'key' => $shortName.'_'.$level,\n            'folder' => $folder,\n            'realPath' => $realPath,\n            'shortName' => $shortName,\n            'children' => $childFolders,\n        ];\n        return $folderArray;\n    }\n\n    private function _recursiveMkdir($folder, $rights=0755) {\n        $folders = explode(DIRECTORY_SEPARATOR, $folder);\n        $curFolder = array_shift($folders).DIRECTORY_SEPARATOR;\n        foreach ($folders as $folder) {\n            $curFolder.= DIRECTORY_SEPARATOR.$folder;\n            if (!is_dir($curFolder) && strlen($curFolder) > 0 && !preg_match(\"/^[A-Za-z]:$/\", $curFolder)) {\n                mkdir($curFolder, $rights);\n            }\n        }\n    }\n\n    /**\n     * Sets the internal error object\n     *\n     * @param string $code\n     * @param string $message\n     * @param string|null $title\n     * @return void\n     */\n    private function _setError($code, $message, $title = '', $debug = null)\n    {\n        $this->oError = new FileManagerError();\n        $this->oError->code = $code;\n        $this->oError->message = $message;\n        $this->oError->title = $title;\n        $this->oError->debug = $debug;\n    }\n\n    /**\n     * Prints a json document with the data provided as parameter\n     *\n     * @param array $data The data that should be transferred\n     * @return void Renders JSON document\n     */\n    private function _printJsonResponse($data)\n    {\n        $this->getController()->renderPartial(\n            '/admin/super/_renderJson', [\n                'success' => true,\n                'data' => $data,\n        ]);\n    }\n\n    /**\n     * Prints a json document with the intercontroller error message\n     *\n     * @return void Renders JSON document\n     */\n    private function throwError()\n    {\n        throw new LSJsonException(\n            500,\n            (Yii::app()->getConfig('debug') > 0 ? $this->oError->code.': ' : '')\n            .$this->oError->message,\n            0\n        );\n    }\n\n    /**\n     * Throw exception if src and dest filename is different.\n     *\n     * @param array $file\n     * @return void\n     * @throws \\Exception\n     */\n    private function checkChangedFilename(array $file)\n    {\n        /** @var string[] */\n        $pathParts = explode('/', $file['path']);\n        /** @var string */\n        $lastPart = $pathParts[count($pathParts) - 1];\n\n        if ($lastPart !== $file['shortName']) {\n            $this->_setError(\n                \"FILENAME_CHANGED\",\n                gT(\"The destination file name is not the same as the source file name\")\n            );\n            $this->throwError();\n        }\n    }\n}\n\nclass FileManagerError\n{\n    public $message;\n    public $title;\n    public $code;\n}\n"], "filenames": ["application/controllers/admin/LimeSurveyFileManager.php"], "buggy_code_start_loc": [383], "buggy_code_end_loc": [407], "fixing_code_start_loc": [383], "fixing_code_end_loc": [404], "type": "CWE-22", "message": "LimeSurvey before 4.1.12+200324 contains a path traversal vulnerability in application/controllers/admin/LimeSurveyFileManager.php.", "other": {"cve": {"id": "CVE-2020-11455", "sourceIdentifier": "cve@mitre.org", "published": "2020-04-01T16:15:27.420", "lastModified": "2022-07-30T03:41:36.070", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "LimeSurvey before 4.1.12+200324 contains a path traversal vulnerability in application/controllers/admin/LimeSurveyFileManager.php."}, {"lang": "es", "value": "LimeSurvey versiones anteriores a 4.1.12+200324, contiene una vulnerabilidad de salto de ruta en el archivo application/controllers/admin/LimeSurveyFileManager.php."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:limesurvey:limesurvey:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.1.11", "matchCriteriaId": "256777E0-C72F-4449-9F10-17360ABE4E7A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:limesurvey:limesurvey:4.1.12:-:*:*:*:*:*:*", "matchCriteriaId": "FC08E13E-4B2A-4F76-9820-433F8EA20BB5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:limesurvey:limesurvey:4.1.12:200324:*:*:*:*:*:*", "matchCriteriaId": "D60E1E37-3C08-4AFC-B079-0D63D3ECE06C"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/157112/LimeSurvey-4.1.11-Path-Traversal.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/LimeSurvey/LimeSurvey/commit/daf50ebb16574badfb7ae0b8526ddc5871378f1b", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.exploit-db.com/exploits/48297", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/LimeSurvey/LimeSurvey/commit/daf50ebb16574badfb7ae0b8526ddc5871378f1b"}}