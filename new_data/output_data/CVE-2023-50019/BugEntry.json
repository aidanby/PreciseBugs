{"buggy_code": ["/*\n * Copyright (C) 2019,2020 by Sukchan Lee <acetcom@gmail.com>\n *\n * This file is part of Open5GS.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n#include \"ngap-handler.h\"\n#include \"gmm-handler.h\"\n#include \"gmm-build.h\"\n#include \"nas-path.h\"\n#include \"nas-security.h\"\n#include \"ngap-path.h\"\n#include \"nausf-handler.h\"\n#include \"nsmf-handler.h\"\n#include \"nudm-handler.h\"\n#include \"npcf-handler.h\"\n#include \"sbi-path.h\"\n#include \"amf-sm.h\"\n\n#undef OGS_LOG_DOMAIN\n#define OGS_LOG_DOMAIN __gmm_log_domain\n\ntypedef enum {\n    GMM_COMMON_STATE_DEREGISTERED,\n    GMM_COMMON_STATE_REGISTERED,\n} gmm_common_state_e;\n\nstatic void common_register_state(ogs_fsm_t *s, amf_event_t *e,\n        gmm_common_state_e state);\n\n\nvoid gmm_state_initial(ogs_fsm_t *s, amf_event_t *e)\n{\n    ogs_assert(s);\n\n    amf_sm_debug(e);\n\n    OGS_FSM_TRAN(s, &gmm_state_de_registered);\n}\n\nvoid gmm_state_final(ogs_fsm_t *s, amf_event_t *e)\n{\n    ogs_assert(s);\n\n    amf_sm_debug(e);\n}\n\nvoid gmm_state_de_registered(ogs_fsm_t *s, amf_event_t *e)\n{\n    amf_ue_t *amf_ue = NULL;\n    amf_sess_t *sess = NULL;\n\n    ogs_sbi_message_t *sbi_message = NULL;\n\n    int r, state = 0;\n\n    ogs_assert(s);\n    ogs_assert(e);\n\n    amf_sm_debug(e);\n\n    if (e->sess) {\n        sess = e->sess;\n        amf_ue = sess->amf_ue;\n        ogs_assert(amf_ue);\n    } else {\n        amf_ue = e->amf_ue;\n        ogs_assert(amf_ue);\n    }\n\n    switch (e->h.id) {\n    case OGS_FSM_ENTRY_SIG:\n        AMF_UE_CLEAR_PAGING_INFO(amf_ue);\n        AMF_UE_CLEAR_N2_TRANSFER(amf_ue, pdu_session_resource_setup_request);\n        AMF_UE_CLEAR_5GSM_MESSAGE(amf_ue);\n        CLEAR_AMF_UE_ALL_TIMERS(amf_ue);\n\n        /*\n         * Issue #2040\n         *\n         * TS23.501\n         * 5.4.4 UE Radio Capability handling\n         * 5.4.4.1 UE radio capability information storage in the AMF\n         *\n         * The AMF deletes the UE radio capability when the UE RM state\n         * in the AMF transitions to RM-DEREGISTERED. When the AMF receives\n         * Registration Request with the Registration type set to Initial\n         * Registration or when it receives the first Registration Request\n         * after E-UTRA/EPC Attach with Registration type set to Mobility\n         * Registration Update, the AMF deletes the UE radio capability.\n         *\n         * TS24.501\n         * 5.5.2 De-registration procedure\n         * 5.5.2.1 General\n         *\n         * When the AMF enters the state 5GMM-DEREGISTERED for 3GPP access,\n         * the AMF shall delete the stored UE radio capability information\n         * or the UE radio capability ID, if any.\n         *\n         * (DEPRECATED) Issue #1917 (from Switch-Off to De-Registration)\n         *\n         * When the UE sends a De-registration Request with Switch-Off,\n         * AMF should remove the the stored UE Radio Capability.\n         *\n         * Otherwise, the Radio Capability will not match\n         * because the gNB will not query the Radio Capability\n         * when the UE changes USIM.\n         */\n        OGS_ASN_CLEAR_DATA(&amf_ue->ueRadioCapability);\n        break;\n    case OGS_FSM_EXIT_SIG:\n        break;\n\n    case AMF_EVENT_5GMM_MESSAGE:\n        common_register_state(s, e, GMM_COMMON_STATE_DEREGISTERED);\n        break;\n\n    case AMF_EVENT_5GMM_TIMER:\n        switch (e->h.timer_id) {\n        case AMF_TIMER_T3570:\n            if (amf_ue->t3570.retry_count >=\n                    amf_timer_cfg(AMF_TIMER_T3570)->max_count) {\n                ogs_warn(\"Retransmission of Identity-Request failed. \"\n                        \"Stop retransmission\");\n                CLEAR_AMF_UE_TIMER(amf_ue->t3570);\n                OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n            } else {\n                amf_ue->t3570.retry_count++;\n                r = nas_5gs_send_identity_request(amf_ue);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            break;\n\n        case AMF_TIMER_T3522:\n            if (amf_ue->t3522.retry_count >=\n                    amf_timer_cfg(AMF_TIMER_T3522)->max_count) {\n                ogs_warn(\"Retransmission of Deregistration-Request failed. \"\n                        \"Stop retransmission\");\n                CLEAR_AMF_UE_TIMER(amf_ue->t3522);\n                OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n            } else {\n                amf_ue->t3522.retry_count++;\n                r = nas_5gs_send_de_registration_request(amf_ue,\n                        OpenAPI_deregistration_reason_NULL, 0);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            break;\n\n        case AMF_TIMER_MOBILE_REACHABLE:\n\n            /*\n             * TS 24.501\n             * 5.3.7 Handling of the periodic registration update timer and\n             *\n             * Upon expiry of the mobile reachable timer the network shall\n             * start the implicit de-registration timer over 3GPP access.\n             * The default value of the implicit de-registration timer over\n             * 3GPP access is 4 minutes greater than the value of timer T3512.\n             */\n\n            ogs_warn(\"[%s] Mobile Reachable Timer Expired\", amf_ue->supi);\n\n            ogs_list_for_each(&amf_ue->sess_list, sess) {\n                if (sess->paging.ongoing == true &&\n                    sess->paging.n1n2_failure_txf_notif_uri != NULL) {\n                    ogs_assert(true ==\n                        amf_sbi_send_n1_n2_failure_notify(\n                            sess,\n                            OpenAPI_n1_n2_message_transfer_cause_UE_NOT_REACHABLE_FOR_SESSION));\n                }\n            }\n\n            /* Stop Paging */\n            AMF_UE_CLEAR_PAGING_INFO(amf_ue);\n            AMF_UE_CLEAR_N2_TRANSFER(\n                    amf_ue, pdu_session_resource_setup_request);\n            AMF_UE_CLEAR_5GSM_MESSAGE(amf_ue);\n            CLEAR_AMF_UE_TIMER(amf_ue->t3513);\n\n            ogs_timer_start(amf_ue->implicit_deregistration.timer,\n                    ogs_time_from_sec(amf_self()->time.t3512.value + 240));\n            break;\n\n        case AMF_TIMER_IMPLICIT_DEREGISTRATION:\n\n            /*\n             * TS 24.501\n             * 5.3.7 Handling of the periodic registration update timer and\n             *\n             * If the implicit de-registration timer expires before the UE\n             * contacts the network, the network shall implicitly de-register\n             * the UE.\n             *\n             * TS 23.502\n             * 4.2.2.3.3 Network-initiated Deregistration\n             *\n             * The AMF does not send the Deregistration Request message\n             * to the UE for Implicit Deregistration.\n             */\n\n            ogs_info(\"[%s] Do Network-initiated De-register UE\", amf_ue->supi);\n\n            state = AMF_NETWORK_INITIATED_IMPLICIT_DE_REGISTERED;\n\n            if (UDM_SDM_SUBSCRIBED(amf_ue)) {\n                r = amf_ue_sbi_discover_and_send(\n                        OGS_SBI_SERVICE_TYPE_NUDM_SDM, NULL,\n                        amf_nudm_sdm_build_subscription_delete,\n                        amf_ue, state, NULL);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            } else if (PCF_AM_POLICY_ASSOCIATED(amf_ue)) {\n                    r = amf_ue_sbi_discover_and_send(\n                        OGS_SBI_SERVICE_TYPE_NPCF_AM_POLICY_CONTROL,\n                        NULL,\n                        amf_npcf_am_policy_control_build_delete,\n                        amf_ue, state, NULL);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n            }\n            break;\n\n        default:\n            ogs_error(\"Unknown timer[%s:%d]\",\n                    amf_timer_get_name(e->h.timer_id), e->h.timer_id);\n        }\n        break;\n\n    case OGS_EVENT_SBI_CLIENT:\n        sbi_message = e->h.sbi.message;\n        ogs_assert(sbi_message);\n        state = e->h.sbi.state;\n\n        SWITCH(sbi_message->h.service.name)\n        CASE(OGS_SBI_SERVICE_NAME_NAUSF_AUTH)\n            SWITCH(sbi_message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_UE_AUTHENTICATIONS)\n\n                if (sbi_message->res_status != OGS_SBI_HTTP_STATUS_CREATED &&\n                    sbi_message->res_status != OGS_SBI_HTTP_STATUS_OK &&\n                    sbi_message->res_status != OGS_SBI_HTTP_STATUS_NO_CONTENT) {\n                    if (sbi_message->res_status ==\n                            OGS_SBI_HTTP_STATUS_NOT_FOUND) {\n                        ogs_warn(\"[%s] Cannot find SUCI [%d]\",\n                            amf_ue->suci, sbi_message->res_status);\n                    } else {\n                        ogs_error(\"[%s] HTTP response error [%d]\",\n                            amf_ue->suci, sbi_message->res_status);\n                    }\n                }\n\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_POST)\n                    ogs_warn(\"[%s] Ignore SBI message\", amf_ue->suci);\n                    break;\n                CASE(OGS_SBI_HTTP_METHOD_PUT)\n                    ogs_warn(\"[%s] Ignore SBI message\", amf_ue->suci);\n                    break;\n                CASE(OGS_SBI_HTTP_METHOD_DELETE)\n                    if (amf_ue->confirmation_url_for_5g_aka)\n                        ogs_free(amf_ue->confirmation_url_for_5g_aka);\n                    amf_ue->confirmation_url_for_5g_aka = NULL;\n\n                    if (state == AMF_RELEASE_SM_CONTEXT_NO_STATE ||\n                        state == AMF_UE_INITIATED_DE_REGISTERED) {\n\n                        if (PCF_AM_POLICY_ASSOCIATED(amf_ue)) {\n                            r = amf_ue_sbi_discover_and_send(\n                                    OGS_SBI_SERVICE_TYPE_NPCF_AM_POLICY_CONTROL,\n                                    NULL,\n                                    amf_npcf_am_policy_control_build_delete,\n                                    amf_ue, state, NULL);\n                            ogs_expect(r == OGS_OK);\n                            ogs_assert(r != OGS_ERROR);\n                        } else {\n                            r = nas_5gs_send_de_registration_accept(amf_ue);\n                            ogs_expect(r == OGS_OK);\n                            ogs_assert(r != OGS_ERROR);\n                        }\n\n                    } else if (state ==\n                            AMF_NETWORK_INITIATED_IMPLICIT_DE_REGISTERED ||\n                               state ==\n                            AMF_NETWORK_INITIATED_EXPLICIT_DE_REGISTERED) {\n\n                        int xact_count = amf_sess_xact_count(amf_ue);\n                        amf_sbi_send_release_all_sessions(amf_ue, state);\n\n                        if (!AMF_SESSION_RELEASE_PENDING(amf_ue) &&\n                            amf_sess_xact_count(amf_ue) == xact_count) {\n\n                            if (PCF_AM_POLICY_ASSOCIATED(amf_ue)) {\n                                r = amf_ue_sbi_discover_and_send(\n                                        OGS_SBI_SERVICE_TYPE_NPCF_AM_POLICY_CONTROL,\n                                        NULL,\n                                        amf_npcf_am_policy_control_build_delete,\n                                        amf_ue, state, NULL);\n                                ogs_expect(r == OGS_OK);\n                                ogs_assert(r != OGS_ERROR);\n                            }\n                        }\n                    }\n                    break;\n                DEFAULT\n                    ogs_error(\"[%s] Invalid HTTP method [%s]\",\n                            amf_ue->suci, sbi_message->h.method);\n                    ogs_assert_if_reached();\n                END\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_5G_AKA)\n            CASE(OGS_SBI_RESOURCE_NAME_5G_AKA_CONFIRMATION)\n            CASE(OGS_SBI_RESOURCE_NAME_EAP_SESSION)\n                ogs_warn(\"[%s] Ignore SBI message\", amf_ue->supi);\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[0]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NUDM_SDM)\n            if ((sbi_message->res_status != OGS_SBI_HTTP_STATUS_OK) &&\n                (sbi_message->res_status != OGS_SBI_HTTP_STATUS_CREATED) &&\n                (sbi_message->res_status != OGS_SBI_HTTP_STATUS_NO_CONTENT)) {\n                ogs_error(\"[%s] HTTP response error [%d]\",\n                          amf_ue->supi, sbi_message->res_status);\n            }\n\n            SWITCH(sbi_message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_AM_DATA)\n            CASE(OGS_SBI_RESOURCE_NAME_SMF_SELECT_DATA)\n            CASE(OGS_SBI_RESOURCE_NAME_UE_CONTEXT_IN_SMF_DATA)\n                ogs_warn(\"[%s] Ignore SBI message\", amf_ue->supi);\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_SDM_SUBSCRIPTIONS)\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_DELETE)\n                    /*\n                     * - AMF_UE_INITIATED_DE_REGISTERED\n                     * 1. PDU session establishment request\n                     * 2. PDUSessionResourceSetupRequest +\n                     *    PDU session establishment accept\n                     * 3. PDUSessionResourceSetupResponse\n                     * 4. Deregistration request\n                     * 5. UEContextReleaseCommand\n                     * 6. UEContextReleaseComplete\n                     *\n                     * - AMF_RELEASE_SM_CONTEXT_NO_STATE\n                     * 1. PDU session release request\n                     * 2. PDUSessionResourceReleaseCommand +\n                     *    PDU session release command\n                     * 3. PDUSessionResourceReleaseREsponse\n                     * 4. PDU session release complete\n                     * 5. Deregistration request\n                     * 6. UEContextReleaseCommand\n                     * 7. UEContextReleaseComplete\n                     */\n                    if (state == AMF_RELEASE_SM_CONTEXT_NO_STATE ||\n                        state == AMF_UE_INITIATED_DE_REGISTERED) {\n                        if (amf_ue->data_change_subscription_id) {\n                            ogs_free(amf_ue->data_change_subscription_id);\n                            amf_ue->data_change_subscription_id = NULL;\n                        }\n\n                        r = amf_ue_sbi_discover_and_send(\n                                OGS_SBI_SERVICE_TYPE_NUDM_UECM, NULL,\n                                amf_nudm_uecm_build_registration_delete,\n                                amf_ue, state, NULL);\n                        ogs_expect(r == OGS_OK);\n                        ogs_assert(r != OGS_ERROR);\n                    } else {\n                        ogs_fatal(\"Invalid state [%d]\", state);\n                        ogs_assert_if_reached();\n                    }\n                    break;\n                DEFAULT\n                    ogs_warn(\"[%s] Ignore invalid HTTP method [%s]\",\n                            amf_ue->suci, sbi_message->h.method);\n                END\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[1]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NUDM_UECM)\n            if (sbi_message->res_status != OGS_SBI_HTTP_STATUS_CREATED &&\n                sbi_message->res_status != OGS_SBI_HTTP_STATUS_NO_CONTENT &&\n                sbi_message->res_status != OGS_SBI_HTTP_STATUS_OK) {\n                ogs_error(\"[%s] HTTP response error [%d]\",\n                        amf_ue->supi, sbi_message->res_status);\n            }\n\n            SWITCH(sbi_message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_REGISTRATIONS)\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_PUT)\n                    ogs_warn(\"[%s] Ignore SBI message\", amf_ue->supi);\n                    break;\n                CASE(OGS_SBI_HTTP_METHOD_PATCH)\n                    SWITCH(sbi_message->h.resource.component[2])\n                    CASE(OGS_SBI_RESOURCE_NAME_AMF_3GPP_ACCESS)\n                        /*\n                         * - AMF_UE_INITIATED_DE_REGISTERED\n                         * 1. PDU session establishment request\n                         * 2. PDUSessionResourceSetupRequest +\n                         *    PDU session establishment accept\n                         * 3. PDUSessionResourceSetupResponse\n                         * 4. Deregistration request\n                         * 5. UEContextReleaseCommand\n                         * 6. UEContextReleaseComplete\n                         *\n                         * - AMF_RELEASE_SM_CONTEXT_NO_STATE\n                         * 1. PDU session release request\n                         * 2. PDUSessionResourceReleaseCommand +\n                         *    PDU session release command\n                         * 3. PDUSessionResourceReleaseREsponse\n                         * 4. PDU session release complete\n                         * 5. Deregistration request\n                         * 6. UEContextReleaseCommand\n                         * 7. UEContextReleaseComplete\n                         */\n                        if (state == AMF_RELEASE_SM_CONTEXT_NO_STATE ||\n                            state == AMF_UE_INITIATED_DE_REGISTERED) {\n\n                            if (amf_ue->confirmation_url_for_5g_aka) {\n                                r = amf_ue_sbi_discover_and_send(\n                                    OGS_SBI_SERVICE_TYPE_NAUSF_AUTH,\n                                    NULL,\n                                    amf_nausf_auth_build_authenticate_delete,\n                                    amf_ue, state, NULL);\n                                ogs_expect(r == OGS_OK);\n                                ogs_assert(r != OGS_ERROR);\n                            } else if (PCF_AM_POLICY_ASSOCIATED(amf_ue)) {\n                                r = amf_ue_sbi_discover_and_send(\n                                        OGS_SBI_SERVICE_TYPE_NPCF_AM_POLICY_CONTROL,\n                                        NULL,\n                                        amf_npcf_am_policy_control_build_delete,\n                                        amf_ue, state, NULL);\n                                ogs_expect(r == OGS_OK);\n                                ogs_assert(r != OGS_ERROR);\n                            } else {\n                                r = nas_5gs_send_de_registration_accept(amf_ue);\n                                ogs_expect(r == OGS_OK);\n                                ogs_assert(r != OGS_ERROR);\n                            }\n                        } else {\n                            ogs_fatal(\"Invalid state [%d]\", state);\n                            ogs_assert_if_reached();\n                        }\n                        break;\n                    DEFAULT\n                        ogs_warn(\"Ignoring invalid resource name [%s]\",\n                                 sbi_message->h.resource.component[2]);\n                    END\n                    break;\n\n                DEFAULT\n                    ogs_error(\"[%s] Invalid HTTP method [%s]\",\n                            amf_ue->suci, sbi_message->h.method);\n                    ogs_assert_if_reached();\n                END\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[1]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NPCF_AM_POLICY_CONTROL)\n            SWITCH(sbi_message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_POLICIES)\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_POST)\n                    ogs_warn(\"[%s] Ignore SBI message\", amf_ue->suci);\n                    break;\n\n                CASE(OGS_SBI_HTTP_METHOD_DELETE)\n                    /*\n                     * - AMF_UE_INITIATED_DE_REGISTERED\n                     * 1. PDU session establishment request\n                     * 2. PDUSessionResourceSetupRequest +\n                     *    PDU session establishment accept\n                     * 3. PDUSessionResourceSetupResponse\n                     * 4. Deregistration request\n                     * 5. UEContextReleaseCommand\n                     * 6. UEContextReleaseComplete\n                     *\n                     * - AMF_RELEASE_SM_CONTEXT_NO_STATE\n                     * 1. PDU session release request\n                     * 2. PDUSessionResourceReleaseCommand +\n                     *    PDU session release command\n                     * 3. PDUSessionResourceReleaseREsponse\n                     * 4. PDU session release complete\n                     * 5. Deregistration request\n                     * 6. UEContextReleaseCommand\n                     * 7. UEContextReleaseComplete\n                     */\n                    if (state == AMF_RELEASE_SM_CONTEXT_NO_STATE ||\n                        state == AMF_UE_INITIATED_DE_REGISTERED) {\n                        r = nas_5gs_send_de_registration_accept(amf_ue);\n                        ogs_expect(r == OGS_OK);\n                        ogs_assert(r != OGS_ERROR);\n\n                        PCF_AM_POLICY_CLEAR(amf_ue);\n                    } else {\n                        ogs_fatal(\"Invalid state [%d]\", state);\n                        ogs_assert_if_reached();\n                    }\n                    break;\n\n                DEFAULT\n                    ogs_error(\"Unknown method [%s]\", sbi_message->h.method);\n                    ogs_assert_if_reached();\n                END\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[0]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        DEFAULT\n            ogs_error(\"Invalid service name [%s]\", sbi_message->h.service.name);\n            ogs_assert_if_reached();\n        END\n        break;\n\n    default:\n        ogs_error(\"Unknown event[%s]\", amf_event_get_name(e));\n    }\n}\n\nvoid gmm_state_registered(ogs_fsm_t *s, amf_event_t *e)\n{\n    int i, r, state, xact_count = 0;\n\n    amf_ue_t *amf_ue = NULL;\n    amf_sess_t *sess = NULL;\n\n    ogs_sbi_message_t *sbi_message = NULL;\n\n    ogs_assert(s);\n    ogs_assert(e);\n\n    amf_sm_debug(e);\n\n    if (e->sess) {\n        sess = e->sess;\n        amf_ue = sess->amf_ue;\n        ogs_assert(amf_ue);\n    } else {\n        amf_ue = e->amf_ue;\n        ogs_assert(amf_ue);\n    }\n\n    switch (e->h.id) {\n    case OGS_FSM_ENTRY_SIG:\n        ogs_assert(amf_ue->num_of_slice <= OGS_MAX_NUM_OF_SLICE);\n        for (i = 0; i < amf_ue->num_of_slice; i++) {\n            amf_metrics_inst_by_slice_add(&amf_ue->nr_tai.plmn_id,\n                    &amf_ue->slice[i].s_nssai,\n                    AMF_METR_GAUGE_RM_REGISTERED_SUB_NBR, 1);\n        }\n        break;\n    case OGS_FSM_EXIT_SIG:\n        ogs_assert(amf_ue->num_of_slice <= OGS_MAX_NUM_OF_SLICE);\n        for (i = 0; i < amf_ue->num_of_slice; i++) {\n            amf_metrics_inst_by_slice_add(&amf_ue->nr_tai.plmn_id,\n                    &amf_ue->slice[i].s_nssai,\n                    AMF_METR_GAUGE_RM_REGISTERED_SUB_NBR, -1);\n        }\n        break;\n\n    case AMF_EVENT_5GMM_MESSAGE:\n        common_register_state(s, e, GMM_COMMON_STATE_REGISTERED);\n        break;\n\n    case AMF_EVENT_5GMM_TIMER:\n        switch (e->h.timer_id) {\n        case AMF_TIMER_T3513:\n            if (amf_ue->t3513.retry_count >=\n                    amf_timer_cfg(AMF_TIMER_T3513)->max_count) {\n                amf_sess_t *sess = NULL;\n\n                /* Paging failed */\n                ogs_warn(\"[%s] Paging failed. Stop\", amf_ue->supi);\n\n                ogs_list_for_each(&amf_ue->sess_list, sess) {\n                    if (sess->paging.ongoing == true &&\n                        sess->paging.n1n2_failure_txf_notif_uri != NULL) {\n                        ogs_assert(true ==\n                            amf_sbi_send_n1_n2_failure_notify(\n                                sess,\n                                OpenAPI_n1_n2_message_transfer_cause_UE_NOT_RESPONDING));\n                    }\n                }\n\n                AMF_UE_CLEAR_PAGING_INFO(amf_ue);\n                AMF_UE_CLEAR_N2_TRANSFER(\n                        amf_ue, pdu_session_resource_setup_request);\n                AMF_UE_CLEAR_5GSM_MESSAGE(amf_ue);\n                CLEAR_AMF_UE_TIMER(amf_ue->t3513);\n\n            } else {\n                amf_ue->t3513.retry_count++;\n                /* If t3513 is timeout, the saved pkbuf is used.  */\n                r = ngap_send_paging(amf_ue);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            break;\n\n        case AMF_TIMER_T3522:\n            if (amf_ue->t3522.retry_count >=\n                    amf_timer_cfg(AMF_TIMER_T3522)->max_count) {\n                ogs_warn(\"Retransmission of Deregistration-Request failed. \"\n                        \"Stop retransmission\");\n                CLEAR_AMF_UE_TIMER(amf_ue->t3522);\n                OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n            } else {\n                amf_ue->t3522.retry_count++;\n                r = nas_5gs_send_de_registration_request(amf_ue,\n                        OpenAPI_deregistration_reason_NULL, 0);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            break;\n\n        case AMF_TIMER_T3555:\n            if (amf_ue->t3555.retry_count >=\n                    amf_timer_cfg(AMF_TIMER_T3555)->max_count) {\n                /* Configuration update command failed */\n                ogs_warn(\"[%s] Configuration update failed. Stop\",\n                        amf_ue->supi);\n                CLEAR_AMF_UE_TIMER(amf_ue->t3555);\n\n            } else {\n                amf_ue->t3555.retry_count++;\n\n                /*\n                 * If t3555 is timeout, the saved pkbuf is used.\n                 * In this case, ack should be set to 1 for timer expiration\n                 */\n                r = nas_5gs_send_configuration_update_command(amf_ue, NULL);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            break;\n\n        case AMF_TIMER_T3570:\n            if (amf_ue->t3570.retry_count >=\n                    amf_timer_cfg(AMF_TIMER_T3570)->max_count) {\n                ogs_warn(\"Retransmission of Identity-Request failed. \"\n                        \"Stop retransmission\");\n                CLEAR_AMF_UE_TIMER(amf_ue->t3570);\n                OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n            } else {\n                amf_ue->t3570.retry_count++;\n                r = nas_5gs_send_identity_request(amf_ue);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            break;\n\n        case AMF_TIMER_MOBILE_REACHABLE:\n\n            /*\n             * TS 24.501\n             * 5.3.7 Handling of the periodic registration update timer and\n             *\n             * Upon expiry of the mobile reachable timer the network shall\n             * start the implicit de-registration timer over 3GPP access.\n             * The default value of the implicit de-registration timer over\n             * 3GPP access is 4 minutes greater than the value of timer T3512.\n             */\n\n            ogs_warn(\"[%s] Mobile Reachable Timer Expired\", amf_ue->supi);\n\n            ogs_list_for_each(&amf_ue->sess_list, sess) {\n                if (sess->paging.ongoing == true &&\n                    sess->paging.n1n2_failure_txf_notif_uri != NULL) {\n                    ogs_assert(true ==\n                        amf_sbi_send_n1_n2_failure_notify(\n                            sess,\n                            OpenAPI_n1_n2_message_transfer_cause_UE_NOT_REACHABLE_FOR_SESSION));\n                }\n            }\n\n            /* Stop Paging */\n            AMF_UE_CLEAR_PAGING_INFO(amf_ue);\n            AMF_UE_CLEAR_N2_TRANSFER(\n                    amf_ue, pdu_session_resource_setup_request);\n            AMF_UE_CLEAR_5GSM_MESSAGE(amf_ue);\n            CLEAR_AMF_UE_TIMER(amf_ue->t3513);\n\n            ogs_timer_start(amf_ue->implicit_deregistration.timer,\n                    ogs_time_from_sec(amf_self()->time.t3512.value + 240));\n            break;\n\n        case AMF_TIMER_IMPLICIT_DEREGISTRATION:\n\n            /*\n             * TS 24.501\n             * 5.3.7 Handling of the periodic registration update timer and\n             *\n             * If the implicit de-registration timer expires before the UE\n             * contacts the network, the network shall implicitly de-register\n             * the UE.\n             *\n             * TS 23.502\n             * 4.2.2.3.3 Network-initiated Deregistration\n             *\n             * The AMF does not send the Deregistration Request message\n             * to the UE for Implicit Deregistration.\n             */\n\n            ogs_info(\"[%s] Do Network-initiated De-register UE\", amf_ue->supi);\n\n            state = AMF_NETWORK_INITIATED_IMPLICIT_DE_REGISTERED;\n\n            if (UDM_SDM_SUBSCRIBED(amf_ue)) {\n                r = amf_ue_sbi_discover_and_send(\n                        OGS_SBI_SERVICE_TYPE_NUDM_SDM, NULL,\n                        amf_nudm_sdm_build_subscription_delete,\n                        amf_ue, state, NULL);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            } else if (PCF_AM_POLICY_ASSOCIATED(amf_ue)) {\n                    r = amf_ue_sbi_discover_and_send(\n                        OGS_SBI_SERVICE_TYPE_NPCF_AM_POLICY_CONTROL,\n                        NULL,\n                        amf_npcf_am_policy_control_build_delete,\n                        amf_ue, state, NULL);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n            }\n            break;\n\n        default:\n            ogs_error(\"Unknown timer[%s:%d]\",\n                    amf_timer_get_name(e->h.timer_id), e->h.timer_id);\n        }\n        break;\n\n    case OGS_EVENT_SBI_CLIENT:\n        sbi_message = e->h.sbi.message;\n        ogs_assert(sbi_message);\n        state = e->h.sbi.state;\n\n        xact_count = amf_sess_xact_count(amf_ue);\n\n        SWITCH(sbi_message->h.service.name)\n        CASE(OGS_SBI_SERVICE_NAME_NAUSF_AUTH)\n            SWITCH(sbi_message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_UE_AUTHENTICATIONS)\n\n                if (sbi_message->res_status != OGS_SBI_HTTP_STATUS_CREATED &&\n                    sbi_message->res_status != OGS_SBI_HTTP_STATUS_OK &&\n                    sbi_message->res_status != OGS_SBI_HTTP_STATUS_NO_CONTENT) {\n                    if (sbi_message->res_status ==\n                            OGS_SBI_HTTP_STATUS_NOT_FOUND) {\n                        ogs_warn(\"[%s] Cannot find SUCI [%d]\",\n                            amf_ue->suci, sbi_message->res_status);\n                    } else {\n                        ogs_error(\"[%s] HTTP response error [%d]\",\n                            amf_ue->suci, sbi_message->res_status);\n                    }\n                }\n\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_POST)\n                    ogs_warn(\"[%s] Ignore SBI message\", amf_ue->suci);\n                    break;\n                CASE(OGS_SBI_HTTP_METHOD_PUT)\n                    ogs_warn(\"[%s] Ignore SBI message\", amf_ue->suci);\n                    break;\n                CASE(OGS_SBI_HTTP_METHOD_DELETE)\n                    if (amf_ue->confirmation_url_for_5g_aka)\n                        ogs_free(amf_ue->confirmation_url_for_5g_aka);\n                    amf_ue->confirmation_url_for_5g_aka = NULL;\n\n                    if (state == AMF_RELEASE_SM_CONTEXT_NO_STATE ||\n                        state == AMF_UE_INITIATED_DE_REGISTERED) {\n\n                        if (PCF_AM_POLICY_ASSOCIATED(amf_ue)) {\n                            r = amf_ue_sbi_discover_and_send(\n                                    OGS_SBI_SERVICE_TYPE_NPCF_AM_POLICY_CONTROL,\n                                    NULL,\n                                    amf_npcf_am_policy_control_build_delete,\n                                    amf_ue, state, NULL);\n                            ogs_expect(r == OGS_OK);\n                            ogs_assert(r != OGS_ERROR);\n                        } else {\n                            r = nas_5gs_send_de_registration_accept(amf_ue);\n                            ogs_expect(r == OGS_OK);\n                            ogs_assert(r != OGS_ERROR);\n                        }\n\n                    } else if (state ==\n                            AMF_NETWORK_INITIATED_IMPLICIT_DE_REGISTERED ||\n                               state ==\n                            AMF_NETWORK_INITIATED_EXPLICIT_DE_REGISTERED) {\n\n                        int xact_count = amf_sess_xact_count(amf_ue);\n                        amf_sbi_send_release_all_sessions(amf_ue, state);\n\n                        if (!AMF_SESSION_RELEASE_PENDING(amf_ue) &&\n                            amf_sess_xact_count(amf_ue) == xact_count) {\n\n                            if (PCF_AM_POLICY_ASSOCIATED(amf_ue)) {\n                                r = amf_ue_sbi_discover_and_send(\n                                        OGS_SBI_SERVICE_TYPE_NPCF_AM_POLICY_CONTROL,\n                                        NULL,\n                                        amf_npcf_am_policy_control_build_delete,\n                                        amf_ue, state, NULL);\n                                ogs_expect(r == OGS_OK);\n                                ogs_assert(r != OGS_ERROR);\n                            }\n                        }\n                    }\n                    break;\n                DEFAULT\n                    ogs_error(\"[%s] Invalid HTTP method [%s]\",\n                            amf_ue->suci, sbi_message->h.method);\n                    ogs_assert_if_reached();\n                END\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_5G_AKA)\n            CASE(OGS_SBI_RESOURCE_NAME_5G_AKA_CONFIRMATION)\n            CASE(OGS_SBI_RESOURCE_NAME_EAP_SESSION)\n                ogs_warn(\"[%s] Ignore SBI message\", amf_ue->supi);\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[0]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NUDM_SDM)\n            if ((sbi_message->res_status != OGS_SBI_HTTP_STATUS_OK) &&\n                (sbi_message->res_status != OGS_SBI_HTTP_STATUS_CREATED) &&\n                (sbi_message->res_status != OGS_SBI_HTTP_STATUS_NO_CONTENT)) {\n                ogs_error(\"[%s] HTTP response error [%d]\",\n                          amf_ue->supi, sbi_message->res_status);\n            }\n\n            SWITCH(sbi_message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_AM_DATA)\n            CASE(OGS_SBI_RESOURCE_NAME_SMF_SELECT_DATA)\n            CASE(OGS_SBI_RESOURCE_NAME_UE_CONTEXT_IN_SMF_DATA)\n                ogs_warn(\"[%s] Ignore SBI message\", amf_ue->supi);\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_SDM_SUBSCRIPTIONS)\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_DELETE)\n                    /*\n                     * - AMF_NETWORK_INITIATED_IMPLICIT_DE_REGISTERED\n                     * 1. Implicit Timer Expiration\n                     * 2. UDM_SDM_Unsubscribe\n                     * 3. UDM_UECM_Deregisration\n                     * 4. PDU session release request\n                     * 5. PDUSessionResourceReleaseCommand +\n                     *    PDU session release command\n                     * 6. PDUSessionResourceReleaseResponse\n                     * 7. AM_Policy_Association_Termination\n                     *\n                     * - AMF_NETWORK_INITIATED_EXPLICIT_DE_REGISTERED\n                     * 1. UDM_UECM_DeregistrationNotification\n                     * 2. Deregistration request\n                     * 3. UDM_SDM_Unsubscribe\n                     * 4. UDM_UECM_Deregisration\n                     * 5. PDU session release request\n                     * 6. PDUSessionResourceReleaseCommand +\n                     *    PDU session release command\n                     * 7. PDUSessionResourceReleaseResponse\n                     * 8. AM_Policy_Association_Termination\n                     * 9.  Deregistration accept\n                     * 10. Signalling Connecion Release\n                     */\n                    if (state ==\n                            AMF_NETWORK_INITIATED_IMPLICIT_DE_REGISTERED ||\n                        state ==\n                            AMF_NETWORK_INITIATED_EXPLICIT_DE_REGISTERED) {\n                        if (amf_ue->data_change_subscription_id) {\n                            ogs_free(amf_ue->data_change_subscription_id);\n                            amf_ue->data_change_subscription_id = NULL;\n                        }\n\n                        r = amf_ue_sbi_discover_and_send(\n                                OGS_SBI_SERVICE_TYPE_NUDM_UECM, NULL,\n                                amf_nudm_uecm_build_registration_delete,\n                                amf_ue, state, NULL);\n                        ogs_expect(r == OGS_OK);\n                        ogs_assert(r != OGS_ERROR);\n                    } else {\n                        ogs_fatal(\"Invalid state [%d]\", state);\n                        ogs_assert_if_reached();\n                    }\n                    break;\n                DEFAULT\n                    ogs_warn(\"[%s] Ignore invalid HTTP method [%s]\",\n                            amf_ue->suci, sbi_message->h.method);\n                END\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[1]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NUDM_UECM)\n            if (sbi_message->res_status != OGS_SBI_HTTP_STATUS_CREATED &&\n                sbi_message->res_status != OGS_SBI_HTTP_STATUS_NO_CONTENT &&\n                sbi_message->res_status != OGS_SBI_HTTP_STATUS_OK) {\n                ogs_error(\"[%s] HTTP response error [%d]\",\n                        amf_ue->supi, sbi_message->res_status);\n            }\n\n            SWITCH(sbi_message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_REGISTRATIONS)\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_PUT)\n                    ogs_warn(\"[%s] Ignore SBI message\", amf_ue->supi);\n                    break;\n                CASE(OGS_SBI_HTTP_METHOD_PATCH)\n                    SWITCH(sbi_message->h.resource.component[2])\n                    CASE(OGS_SBI_RESOURCE_NAME_AMF_3GPP_ACCESS)\n                        /*\n                         * - AMF_NETWORK_INITIATED_IMPLICIT_DE_REGISTERED\n                         * 1. Implicit Timer Expiration\n                         * 2. UDM_SDM_Unsubscribe\n                         * 3. UDM_UECM_Deregisration\n                         * 4. Authentication Result Removal\n                         * 5. PDU session release request\n                         * 6. PDUSessionResourceReleaseCommand +\n                         *    PDU session release command\n                         * 7. PDUSessionResourceReleaseResponse\n                         * 8. AM_Policy_Association_Termination\n                         *\n                         * - AMF_NETWORK_INITIATED_EXPLICIT_DE_REGISTERED\n                         * 1. UDM_UECM_DeregistrationNotification\n                         * 2. Deregistration request\n                         * 3. UDM_SDM_Unsubscribe\n                         * 4. UDM_UECM_Deregisration\n                         * 5. Authentication Result Removal\n                         * 6. PDU session release request\n                         * 7. PDUSessionResourceReleaseCommand +\n                         *    PDU session release command\n                         * 8. PDUSessionResourceReleaseResponse\n                         * 9. AM_Policy_Association_Termination\n                         * 10. Deregistration accept\n                         * 11. Signalling Connecion Release\n                         */\n                        if (state ==\n                                AMF_NETWORK_INITIATED_IMPLICIT_DE_REGISTERED ||\n                            state ==\n                                AMF_NETWORK_INITIATED_EXPLICIT_DE_REGISTERED) {\n\n                            if (amf_ue->confirmation_url_for_5g_aka) {\n                                r = amf_ue_sbi_discover_and_send(\n                                        OGS_SBI_SERVICE_TYPE_NAUSF_AUTH,\n                                        NULL,\n                                        amf_nausf_auth_build_authenticate_delete,\n                                        amf_ue, state, NULL);\n                                ogs_expect(r == OGS_OK);\n                                ogs_assert(r != OGS_ERROR);\n\n                            } else {\n\n                                amf_sbi_send_release_all_sessions(amf_ue, state);\n\n                                if (!AMF_SESSION_RELEASE_PENDING(amf_ue) &&\n                                    amf_sess_xact_count(amf_ue) == xact_count) {\n\n                                    if (PCF_AM_POLICY_ASSOCIATED(amf_ue)) {\n                                        r = amf_ue_sbi_discover_and_send(\n                                                OGS_SBI_SERVICE_TYPE_NPCF_AM_POLICY_CONTROL,\n                                                NULL,\n                                                amf_npcf_am_policy_control_build_delete,\n                                                amf_ue, state, NULL);\n                                        ogs_expect(r == OGS_OK);\n                                        ogs_assert(r != OGS_ERROR);\n                                    }\n                                }\n                            }\n                        } else {\n                            ogs_fatal(\"Invalid state [%d]\", state);\n                            ogs_assert_if_reached();\n                        }\n                        break;\n                    DEFAULT\n                        ogs_warn(\"Ignoring invalid resource name [%s]\",\n                                 sbi_message->h.resource.component[2]);\n                    END\n                    break;\n\n                DEFAULT\n                    ogs_error(\"[%s] Invalid HTTP method [%s]\",\n                            amf_ue->suci, sbi_message->h.method);\n                    ogs_assert_if_reached();\n                END\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[1]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NPCF_AM_POLICY_CONTROL)\n            SWITCH(sbi_message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_POLICIES)\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_POST)\n                    ogs_warn(\"[%s] Ignore SBI message\", amf_ue->suci);\n                    break;\n\n                CASE(OGS_SBI_HTTP_METHOD_DELETE)\n                    /*\n                     * - AMF_NETWORK_INITIATED_IMPLICIT_DE_REGISTERED\n                     * 1. Implicit Timer Expiration\n                     * 2. UDM_SDM_Unsubscribe\n                     * 3. UDM_UECM_Deregisration\n                     * 4. PDU session release request\n                     * 5. PDUSessionResourceReleaseCommand +\n                     *    PDU session release command\n                     * 6. PDUSessionResourceReleaseResponse\n                     * 7. AM_Policy_Association_Termination\n                     *\n                     * - AMF_NETWORK_INITIATED_EXPLICIT_DE_REGISTERED\n                     * 1. UDM_UECM_DeregistrationNotification\n                     * 2. Deregistration request\n                     * 3. UDM_SDM_Unsubscribe\n                     * 4. UDM_UECM_Deregisration\n                     * 5. PDU session release request\n                     * 6. PDUSessionResourceReleaseCommand +\n                     *    PDU session release command\n                     * 7. PDUSessionResourceReleaseResponse\n                     * 8. AM_Policy_Association_Termination\n                     * 9. Deregistration accept\n                     * 10.Signalling Connecion Release\n                     */\n                    if (state == AMF_NETWORK_INITIATED_IMPLICIT_DE_REGISTERED) {\n                        ogs_warn(\"[%s] Implicit De-registered\", amf_ue->supi);\n                        OGS_FSM_TRAN(&amf_ue->sm,\n                                &gmm_state_ue_context_will_remove);\n\n                    } else if (state ==\n                            AMF_NETWORK_INITIATED_EXPLICIT_DE_REGISTERED) {\n                        ogs_warn(\"[%s] Explicit De-registered\", amf_ue->supi);\n\n                        amf_ue->explict_de_registered.sbi_done = true;\n\n                        if (amf_ue->explict_de_registered.n1_done == true) {\n                            r = ngap_send_ran_ue_context_release_command(\n                                    amf_ue->ran_ue,\n                                    NGAP_Cause_PR_misc,\n                                    NGAP_CauseMisc_om_intervention,\n                                    NGAP_UE_CTX_REL_UE_CONTEXT_REMOVE, 0);\n                            ogs_expect(r == OGS_OK);\n                            ogs_assert(r != OGS_ERROR);\n                        }\n\n                    } else {\n                        ogs_fatal(\"Invalid state [%d]\", state);\n                        ogs_assert_if_reached();\n                    }\n                    break;\n\n                DEFAULT\n                    ogs_error(\"Unknown method [%s]\", sbi_message->h.method);\n                    ogs_assert_if_reached();\n                END\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[0]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        DEFAULT\n            ogs_error(\"Invalid service name [%s]\", sbi_message->h.service.name);\n            ogs_assert_if_reached();\n        END\n        break;\n\n    default:\n        ogs_error(\"Unknown event[%s]\", amf_event_get_name(e));\n    }\n}\n\nstatic void common_register_state(ogs_fsm_t *s, amf_event_t *e,\n        gmm_common_state_e state)\n{\n    int r, xact_count = 0;\n    ogs_nas_5gmm_cause_t gmm_cause;\n\n    amf_ue_t *amf_ue = NULL;\n    amf_sess_t *sess = NULL;\n    ran_ue_t *ran_ue = NULL;\n    ogs_nas_5gs_message_t *nas_message = NULL;\n    ogs_nas_security_header_type_t h;\n\n    ogs_assert(e);\n\n    if (e->sess) {\n        sess = e->sess;\n        amf_ue = sess->amf_ue;\n        ogs_assert(amf_ue);\n    } else {\n        amf_ue = e->amf_ue;\n        ogs_assert(amf_ue);\n    }\n\n    switch (e->h.id) {\n    case AMF_EVENT_5GMM_MESSAGE:\n        nas_message = e->nas.message;\n        ogs_assert(nas_message);\n\n        ran_ue = ran_ue_cycle(amf_ue->ran_ue);\n        ogs_assert(ran_ue);\n\n        h.type = e->nas.type;\n\n        xact_count = amf_sess_xact_count(amf_ue);\n\n        switch (nas_message->gmm.h.message_type) {\n        case OGS_NAS_5GS_REGISTRATION_REQUEST:\n            ogs_info(\"Registration request\");\n            gmm_cause = gmm_handle_registration_request(\n                    amf_ue, h, e->ngap.code,\n                    &nas_message->gmm.registration_request);\n\n            switch (amf_ue->nas.registration.value) {\n            case OGS_NAS_5GS_REGISTRATION_TYPE_INITIAL:\n                amf_metrics_inst_global_inc(AMF_METR_GLOB_CTR_RM_REG_INIT_REQ);\n                break;\n            case OGS_NAS_5GS_REGISTRATION_TYPE_MOBILITY_UPDATING:\n                amf_metrics_inst_global_inc(AMF_METR_GLOB_CTR_RM_REG_MOB_REQ);\n                break;\n            case OGS_NAS_5GS_REGISTRATION_TYPE_PERIODIC_UPDATING:\n                amf_metrics_inst_global_inc(AMF_METR_GLOB_CTR_RM_REG_PERIOD_REQ);\n                break;\n            case OGS_NAS_5GS_REGISTRATION_TYPE_EMERGENCY:\n                amf_metrics_inst_global_inc(AMF_METR_GLOB_CTR_RM_REG_EMERG_REQ);\n                break;\n            default:\n                ogs_error(\"Unknown reg_type[%d]\", amf_ue->nas.registration.value);\n            }\n\n            if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                ogs_error(\"gmm_handle_registration_request() failed [%d]\",\n                            gmm_cause);\n                r = nas_5gs_send_registration_reject(amf_ue, gmm_cause);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            if (!AMF_UE_HAVE_SUCI(amf_ue)) {\n                CLEAR_AMF_UE_TIMER(amf_ue->t3570);\n                r = nas_5gs_send_identity_request(amf_ue);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                break;\n            }\n\n            if (h.integrity_protected && SECURITY_CONTEXT_IS_VALID(amf_ue)) {\n\n                gmm_cause = gmm_handle_registration_update(\n                        amf_ue, &nas_message->gmm.registration_request);\n                if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                    ogs_error(\"[%s] gmm_handle_registration_update() \"\n                                \"failed [%d]\", amf_ue->suci, gmm_cause);\n                    r = nas_5gs_send_registration_reject(amf_ue, gmm_cause);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n                    OGS_FSM_TRAN(s, gmm_state_exception);\n                    break;\n                }\n\n                if (amf_sess_xact_count(amf_ue) == xact_count) {\n\n                    if (amf_update_allowed_nssai(amf_ue) == false) {\n                        ogs_error(\"No Allowed-NSSAI\");\n                        r = nas_5gs_send_gmm_reject(\n                                amf_ue,\n                                OGS_5GMM_CAUSE_NO_NETWORK_SLICES_AVAILABLE);\n                        ogs_expect(r == OGS_OK);\n                        ogs_assert(r != OGS_ERROR);\n                        OGS_FSM_TRAN(s, gmm_state_exception);\n                        break;\n                    }\n\n                    if (!PCF_AM_POLICY_ASSOCIATED(amf_ue)) {\n                        r = amf_ue_sbi_discover_and_send(\n                                OGS_SBI_SERVICE_TYPE_NPCF_AM_POLICY_CONTROL,\n                                NULL,\n                                amf_npcf_am_policy_control_build_create,\n                                amf_ue, 0, NULL);\n                        ogs_expect(r == OGS_OK);\n                        ogs_assert(r != OGS_ERROR);\n                        OGS_FSM_TRAN(s, &gmm_state_initial_context_setup);\n                        break;\n                    }\n\n                    CLEAR_AMF_UE_TIMER(amf_ue->t3550);\n                    r = nas_5gs_send_registration_accept(amf_ue);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n                }\n\n                if (amf_ue->next.m_tmsi)\n                    OGS_FSM_TRAN(s, &gmm_state_initial_context_setup);\n                else\n                    OGS_FSM_TRAN(s, &gmm_state_registered);\n\n            } else {\n\n                amf_sbi_send_release_all_sessions(\n                        amf_ue, AMF_RELEASE_SM_CONTEXT_NO_STATE);\n\n                if (!AMF_SESSION_RELEASE_PENDING(amf_ue) &&\n                    amf_sess_xact_count(amf_ue) == xact_count) {\n                    r = amf_ue_sbi_discover_and_send(\n                            OGS_SBI_SERVICE_TYPE_NAUSF_AUTH, NULL,\n                            amf_nausf_auth_build_authenticate,\n                            amf_ue, 0, NULL);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n                }\n\n                OGS_FSM_TRAN(s, &gmm_state_authentication);\n            }\n            break;\n\n        case OGS_NAS_5GS_SERVICE_REQUEST:\n            ogs_info(\"Service request\");\n\n            if (state != GMM_COMMON_STATE_REGISTERED) {\n                ogs_info(\"[%s] Handling service request failed [Not registered]\",\n                            amf_ue->suci);\n                r = nas_5gs_send_service_reject(amf_ue,\n                    OGS_5GMM_CAUSE_UE_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORK);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            gmm_cause = gmm_handle_service_request(\n                    amf_ue, h, e->ngap.code, &nas_message->gmm.service_request);\n            if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                ogs_error(\"[%s] gmm_handle_service_request() failed [%d]\",\n                            amf_ue->suci, gmm_cause);\n                r = nas_5gs_send_service_reject(amf_ue, gmm_cause);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            if (!AMF_UE_HAVE_SUCI(amf_ue)) {\n                ogs_info(\"Service request : Unknown UE\");\n                r = nas_5gs_send_service_reject(amf_ue,\n                    OGS_5GMM_CAUSE_UE_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORK);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            if (!h.integrity_protected || !SECURITY_CONTEXT_IS_VALID(amf_ue)) {\n                ogs_error(\"No Security Context\");\n                r = nas_5gs_send_service_reject(amf_ue,\n                    OGS_5GMM_CAUSE_UE_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORK);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            gmm_cause = gmm_handle_service_update(\n                    amf_ue, &nas_message->gmm.service_request);\n            if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                ogs_error(\"[%s] gmm_handle_service_update() failed [%d]\",\n                            amf_ue->suci, gmm_cause);\n                r = nas_5gs_send_service_reject(amf_ue, gmm_cause);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            OGS_FSM_TRAN(s, gmm_state_registered);\n            break;\n\n        case OGS_NAS_5GS_IDENTITY_RESPONSE:\n            CLEAR_AMF_UE_TIMER(amf_ue->t3570);\n\n            ogs_info(\"Identity response\");\n            gmm_cause = gmm_handle_identity_response(amf_ue,\n                    &nas_message->gmm.identity_response);\n            if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                ogs_error(\"gmm_handle_identity_response() \"\n                            \"failed [%d] in type [%d]\",\n                            gmm_cause, amf_ue->nas.message_type);\n                r = nas_5gs_send_gmm_reject(amf_ue, gmm_cause);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            if (!AMF_UE_HAVE_SUCI(amf_ue)) {\n                ogs_error(\"No SUCI\");\n                r = nas_5gs_send_gmm_reject(amf_ue, gmm_cause);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            amf_sbi_send_release_all_sessions(\n                    amf_ue, AMF_RELEASE_SM_CONTEXT_NO_STATE);\n\n            if (!AMF_SESSION_RELEASE_PENDING(amf_ue) &&\n                amf_sess_xact_count(amf_ue) == xact_count) {\n                r = amf_ue_sbi_discover_and_send(\n                        OGS_SBI_SERVICE_TYPE_NAUSF_AUTH, NULL,\n                        amf_nausf_auth_build_authenticate,\n                        amf_ue, 0, NULL);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n\n            OGS_FSM_TRAN(s, &gmm_state_authentication);\n            break;\n\n        case OGS_NAS_5GS_5GMM_STATUS:\n            ogs_warn(\"[%s] 5GMM STATUS : Cause[%d]\", amf_ue->suci,\n                    nas_message->gmm.gmm_status.gmm_cause);\n            OGS_FSM_TRAN(s, &gmm_state_exception);\n            break;\n\n        case OGS_NAS_5GS_DEREGISTRATION_REQUEST_FROM_UE:\n            ogs_info(\"[%s] Deregistration request\", amf_ue->supi);\n\n            gmm_handle_deregistration_request(\n                    amf_ue, &nas_message->gmm.deregistration_request_from_ue);\n            OGS_FSM_TRAN(s, &gmm_state_de_registered);\n            break;\n\n        case OGS_NAS_5GS_DEREGISTRATION_ACCEPT_TO_UE:\n            ogs_info(\"[%s] Deregistration accept\", amf_ue->supi);\n            CLEAR_AMF_UE_TIMER(amf_ue->t3522);\n\n            amf_ue->explict_de_registered.n1_done = true;\n\n            if (amf_ue->explict_de_registered.sbi_done == true) {\n                r = ngap_send_ran_ue_context_release_command(amf_ue->ran_ue,\n                        NGAP_Cause_PR_misc, NGAP_CauseMisc_om_intervention,\n                        NGAP_UE_CTX_REL_UE_CONTEXT_REMOVE, 0);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            break;\n\n        case OGS_NAS_5GS_CONFIGURATION_UPDATE_COMPLETE:\n            ogs_debug(\"[%s] Configuration update complete\", amf_ue->supi);\n\n            amf_metrics_inst_global_inc(AMF_METR_GLOB_CTR_MM_CONF_UPDATE_SUCC);\n\n            /*\n             * TS24.501\n             * 5.3.3 Temporary identities\n             *\n             * The AMF shall assign a new 5G-GUTI for a particular UE:\n             *\n             * a) during a successful initial registration procedure;\n             * b) during a successful registration procedure\n             *    for mobility registration update; and\n             * c) after a successful service request procedure invoked\n             *    as a response to a paging request from the network and\n             *    before the release of the N1 NAS signalling connection\n             *    as specified in subclause 5.4.4.1.\n             *\n             * The AMF should assign a new 5G-GUTI for a particular UE\n             * during a successful registration procedure\n             * for periodic registration update.\n             *\n             * The AMF may assign a new 5G-GUTI at any time for a particular UE\n             * by performing the generic UE configuration update procedure.\n             */\n            if (amf_ue->next.m_tmsi) {\n                amf_ue_confirm_guti(amf_ue);\n            } else {\n                ogs_info(\"[%s] No GUTI allocated\", amf_ue->supi);\n            }\n\n            CLEAR_AMF_UE_TIMER(amf_ue->t3555);\n            break;\n\n        case OGS_NAS_5GS_UL_NAS_TRANSPORT:\n            if (!h.integrity_protected || !SECURITY_CONTEXT_IS_VALID(amf_ue)) {\n                ogs_error(\"No Security Context\");\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            gmm_handle_ul_nas_transport(\n                    amf_ue, &nas_message->gmm.ul_nas_transport);\n            break;\n\n        case OGS_NAS_5GS_REGISTRATION_COMPLETE:\n            ogs_error(\"[%s] Registration complete in INVALID-STATE\",\n                        amf_ue->supi);\n            break;\n\n        default:\n            ogs_error(\"Unknown message [%d]\", nas_message->gmm.h.message_type);\n        }\n        break;\n\n    default:\n        ogs_fatal(\"Unknown event[%s]\", amf_event_get_name(e));\n        ogs_assert_if_reached();\n    }\n}\n\nvoid gmm_state_authentication(ogs_fsm_t *s, amf_event_t *e)\n{\n    int r, rv;\n    ogs_nas_5gmm_cause_t gmm_cause;\n\n    amf_ue_t *amf_ue = NULL;\n    amf_sess_t *sess = NULL;\n\n    ogs_nas_5gs_message_t *nas_message = NULL;\n    ogs_nas_security_header_type_t h;\n\n    ogs_nas_5gs_authentication_failure_t *authentication_failure = NULL;\n    ogs_nas_authentication_failure_parameter_t\n        *authentication_failure_parameter = NULL;\n\n    ogs_sbi_message_t *sbi_message = NULL;\n\n    ogs_assert(s);\n    ogs_assert(e);\n\n    amf_sm_debug(e);\n\n    if (e->sess) {\n        sess = e->sess;\n        amf_ue = sess->amf_ue;\n        ogs_assert(amf_ue);\n    } else {\n        amf_ue = e->amf_ue;\n        ogs_assert(amf_ue);\n    }\n\n    switch (e->h.id) {\n    case OGS_FSM_ENTRY_SIG:\n        break;\n    case OGS_FSM_EXIT_SIG:\n        break;\n    case AMF_EVENT_5GMM_MESSAGE:\n        nas_message = e->nas.message;\n        ogs_assert(nas_message);\n\n        h.type = e->nas.type;\n\n        switch (nas_message->gmm.h.message_type) {\n        case OGS_NAS_5GS_AUTHENTICATION_RESPONSE:\n            rv = gmm_handle_authentication_response(\n                    amf_ue, &nas_message->gmm.authentication_response);\n\n            if (rv != OGS_OK) {\n                r = nas_5gs_send_authentication_reject(amf_ue);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n            }\n            break;\n\n        case OGS_NAS_5GS_AUTHENTICATION_FAILURE:\n            authentication_failure = &nas_message->gmm.authentication_failure;\n            ogs_assert(authentication_failure);\n            authentication_failure_parameter = &authentication_failure->\n                authentication_failure_parameter;\n            ogs_assert(authentication_failure_parameter);\n\n            ogs_debug(\"[%s] Authentication failure [%d]\", amf_ue->suci,\n                    authentication_failure->gmm_cause);\n\n            amf_metrics_inst_by_cause_add(authentication_failure->gmm_cause,\n                    AMF_METR_CTR_AMF_AUTH_FAIL, 1);\n\n            CLEAR_AMF_UE_TIMER(amf_ue->t3560);\n\n            switch (authentication_failure->gmm_cause) {\n            case OGS_5GMM_CAUSE_MAC_FAILURE:\n                ogs_warn(\"Authentication failure(MAC failure)\");\n                break;\n\n            case OGS_5GMM_CAUSE_NON_5G_AUTHENTICATION_UNACCEPTABLE:\n                ogs_error(\"Authentication failure\"\n                        \"(Non-5GS authentication unacceptable)\");\n                break;\n\n            case OGS_5GMM_CAUSE_NGKSI_ALREADY_IN_USE:\n                ogs_warn(\"Authentication failure(ngKSI already in use)\");\n                r = amf_ue_sbi_discover_and_send(\n                        OGS_SBI_SERVICE_TYPE_NAUSF_AUTH, NULL,\n                        amf_nausf_auth_build_authenticate,\n                        amf_ue, 0, NULL);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                return;\n\n            case OGS_5GMM_CAUSE_SYNCH_FAILURE:\n                ogs_warn(\"Authentication failure(Synch failure)\");\n                if (authentication_failure_parameter->length != OGS_AUTS_LEN) {\n                    ogs_error(\"Invalid AUTS Length [%d]\",\n                            authentication_failure_parameter->length);\n                    break;\n                }\n                r = amf_ue_sbi_discover_and_send(\n                        OGS_SBI_SERVICE_TYPE_NAUSF_AUTH, NULL,\n                        amf_nausf_auth_build_authenticate,\n                        amf_ue, 0, authentication_failure_parameter->auts);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                return;\n\n            default:\n                ogs_error(\"Unknown GMM_CAUSE{%d] in Authentication\"\n                        \" failure\",\n                        authentication_failure->gmm_cause);\n                break;\n            }\n\n            r = nas_5gs_send_authentication_reject(amf_ue);\n            ogs_expect(r == OGS_OK);\n            ogs_assert(r != OGS_ERROR);\n            OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n\n            break;\n        case OGS_NAS_5GS_REGISTRATION_REQUEST:\n            ogs_warn(\"Registration request\");\n            gmm_cause = gmm_handle_registration_request(\n                    amf_ue, h, e->ngap.code,\n                    &nas_message->gmm.registration_request);\n            if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                ogs_error(\"[%s] gmm_handle_registration_request() failed [%d]\",\n                            amf_ue->suci, gmm_cause);\n                r = nas_5gs_send_registration_reject(amf_ue, gmm_cause);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            r = amf_ue_sbi_discover_and_send(\n                    OGS_SBI_SERVICE_TYPE_NAUSF_AUTH, NULL,\n                    amf_nausf_auth_build_authenticate, amf_ue, 0, NULL);\n            ogs_expect(r == OGS_OK);\n            ogs_assert(r != OGS_ERROR);\n            break;\n\n        case OGS_NAS_5GS_5GMM_STATUS:\n            ogs_warn(\"[%s] 5GMM STATUS : Cause[%d]\",\n                    amf_ue->suci, nas_message->gmm.gmm_status.gmm_cause);\n            OGS_FSM_TRAN(s, &gmm_state_exception);\n            break;\n\n        case OGS_NAS_5GS_DEREGISTRATION_REQUEST_FROM_UE:\n            ogs_warn(\"[%s] Deregistration request\", amf_ue->supi);\n\n            gmm_handle_deregistration_request(\n                    amf_ue, &nas_message->gmm.deregistration_request_from_ue);\n            OGS_FSM_TRAN(s, &gmm_state_de_registered);\n            break;\n\n        default:\n            ogs_error(\"Unknown message[%d]\", nas_message->gmm.h.message_type);\n            break;\n        }\n        break;\n    case AMF_EVENT_5GMM_TIMER:\n        switch (e->h.timer_id) {\n        case AMF_TIMER_T3560:\n            if (amf_ue->t3560.retry_count >=\n                    amf_timer_cfg(AMF_TIMER_T3560)->max_count) {\n                ogs_warn(\"[%s] Retransmission failed. Stop retransmission\",\n                        amf_ue->suci);\n                r = nas_5gs_send_authentication_reject(amf_ue);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n            } else {\n                amf_ue->t3560.retry_count++;\n                r = nas_5gs_send_authentication_request(amf_ue);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            break;\n        default:\n            ogs_error(\"[%s] Unknown timer[%s:%d]\", amf_ue->suci,\n                    amf_timer_get_name(e->h.timer_id), e->h.timer_id);\n            break;\n        }\n        break;\n    case OGS_EVENT_SBI_CLIENT:\n        sbi_message = e->h.sbi.message;\n        ogs_assert(sbi_message);\n\n        SWITCH(sbi_message->h.service.name)\n        CASE(OGS_SBI_SERVICE_NAME_NAUSF_AUTH)\n            SWITCH(sbi_message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_UE_AUTHENTICATIONS)\n\n                if (sbi_message->res_status != OGS_SBI_HTTP_STATUS_CREATED &&\n                    sbi_message->res_status != OGS_SBI_HTTP_STATUS_OK) {\n                    if (sbi_message->res_status ==\n                            OGS_SBI_HTTP_STATUS_NOT_FOUND) {\n                        ogs_warn(\"[%s] Cannot find SUCI [%d]\",\n                            amf_ue->suci, sbi_message->res_status);\n                    } else {\n                        ogs_error(\"[%s] HTTP response error [%d]\",\n                            amf_ue->suci, sbi_message->res_status);\n                    }\n                    r = nas_5gs_send_gmm_reject_from_sbi(\n                            amf_ue, sbi_message->res_status);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n                    OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n                    break;\n                }\n\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_POST)\n                    rv = amf_nausf_auth_handle_authenticate(\n                            amf_ue, sbi_message);\n                    if (rv != OGS_OK) {\n                        ogs_error(\"[%s] Cannot handle SBI message\",\n                                amf_ue->suci);\n                        r = nas_5gs_send_authentication_reject(amf_ue);\n                        ogs_expect(r == OGS_OK);\n                        ogs_assert(r != OGS_ERROR);\n                        OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n                    }\n                    break;\n                CASE(OGS_SBI_HTTP_METHOD_PUT)\n                    rv = amf_nausf_auth_handle_authenticate_confirmation(\n                            amf_ue, sbi_message);\n                    if (rv != OGS_OK) {\n                        ogs_error(\"[%s] Cannot handle SBI message\",\n                                amf_ue->suci);\n                        r = nas_5gs_send_authentication_reject(amf_ue);\n                        ogs_expect(r == OGS_OK);\n                        ogs_assert(r != OGS_ERROR);\n                        OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n                    } else {\n                        OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_security_mode);\n                    }\n                    break;\n                DEFAULT\n                    ogs_error(\"[%s] Invalid HTTP method [%s]\",\n                            amf_ue->suci, sbi_message->h.method);\n                    ogs_assert_if_reached();\n                END\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[0]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        DEFAULT\n            ogs_error(\"Invalid service name [%s]\", sbi_message->h.service.name);\n            ogs_assert_if_reached();\n        END\n        break;\n\n    default:\n        ogs_error(\"Unknown event[%s]\", amf_event_get_name(e));\n        break;\n    }\n}\n\nvoid gmm_state_security_mode(ogs_fsm_t *s, amf_event_t *e)\n{\n    int r;\n    ogs_nas_5gmm_cause_t gmm_cause;\n    amf_ue_t *amf_ue = NULL;\n    ogs_nas_5gs_message_t *nas_message = NULL;\n    ogs_nas_security_header_type_t h;\n\n    ogs_assert(s);\n    ogs_assert(e);\n\n    amf_sm_debug(e);\n\n    amf_ue = e->amf_ue;\n    ogs_assert(amf_ue);\n\n    switch (e->h.id) {\n    case OGS_FSM_ENTRY_SIG:\n        CLEAR_AMF_UE_TIMER(amf_ue->t3560);\n        r = nas_5gs_send_security_mode_command(amf_ue);\n        ogs_expect(r == OGS_OK);\n        ogs_assert(r != OGS_ERROR);\n        break;\n    case OGS_FSM_EXIT_SIG:\n        break;\n    case AMF_EVENT_5GMM_MESSAGE:\n        nas_message = e->nas.message;\n        ogs_assert(nas_message);\n\n        h.type = e->nas.type;\n\n        switch (nas_message->gmm.h.message_type) {\n        case OGS_NAS_5GS_SECURITY_MODE_COMPLETE:\n            ogs_debug(\"[%s] Security mode complete\", amf_ue->supi);\n\n        /*\n         * TS24.501\n         * Section 4.4.4.3\n         * Integrity checking of NAS signalling messages in the AMF\n         *\n         * Once the secure exchange of NAS messages has been established\n         * for the NAS signalling connection, the receiving 5GMM entity\n         * in the AMF shall not process any NAS signalling messages\n         * unless they have been successfully integrity checked by the NAS.\n         * If any NAS signalling message, having not successfully passed\n         * the integrity check, is received, then the NAS in the AMF shall\n         * discard that message. If any NAS signalling message is received,\n         * as not integrity protected even though the secure exchange\n         * of NAS messages has been established, then the NAS shall discard\n         * this message.\n         */\n            if (h.integrity_protected == 0) {\n                ogs_error(\"[%s] Security-mode : No Integrity Protected\",\n                        amf_ue->supi);\n                break;\n            }\n\n            if (!SECURITY_CONTEXT_IS_VALID(amf_ue)) {\n                ogs_error(\"[%s] No Security Context\", amf_ue->supi);\n                break;\n            }\n\n            CLEAR_AMF_UE_TIMER(amf_ue->t3560);\n\n            gmm_cause = gmm_handle_security_mode_complete(\n                    amf_ue, &nas_message->gmm.security_mode_complete);\n            if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                ogs_error(\"[%s] gmm_handle_security_mode_complete() \"\n                            \"failed [%d] in type [%d]\",\n                            amf_ue->suci, gmm_cause, amf_ue->nas.message_type);\n                r = nas_5gs_send_gmm_reject(amf_ue, gmm_cause);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            ogs_kdf_kgnb_and_kn3iwf(\n                    amf_ue->kamf, amf_ue->ul_count.i32,\n                    amf_ue->nas.access_type, amf_ue->kgnb);\n            ogs_kdf_nh_gnb(amf_ue->kamf, amf_ue->kgnb, amf_ue->nh);\n            amf_ue->nhcc = 1;\n\n            r = amf_ue_sbi_discover_and_send(\n                    OGS_SBI_SERVICE_TYPE_NUDM_UECM, NULL,\n                    amf_nudm_uecm_build_registration, amf_ue, 0, NULL);\n            ogs_expect(r == OGS_OK);\n            ogs_assert(r != OGS_ERROR);\n\n            if (amf_ue->nas.message_type == OGS_NAS_5GS_REGISTRATION_REQUEST) {\n                OGS_FSM_TRAN(s, &gmm_state_initial_context_setup);\n            } else if (amf_ue->nas.message_type ==\n                        OGS_NAS_5GS_SERVICE_REQUEST) {\n                OGS_FSM_TRAN(s, &gmm_state_registered);\n            } else {\n                ogs_fatal(\"Invalid OGS_NAS_5GS[%d]\", amf_ue->nas.message_type);\n                ogs_assert_if_reached();\n            }\n            break;\n        case OGS_NAS_5GS_SECURITY_MODE_REJECT:\n            ogs_warn(\"[%s] Security mode reject : Cause[%d]\",\n                    amf_ue->supi,\n                    nas_message->gmm.security_mode_reject.gmm_cause);\n            CLEAR_AMF_UE_TIMER(amf_ue->t3560);\n            OGS_FSM_TRAN(s, &gmm_state_exception);\n            break;\n        case OGS_NAS_5GS_REGISTRATION_REQUEST:\n            ogs_warn(\"Registration request\");\n            gmm_cause = gmm_handle_registration_request(\n                    amf_ue, h, e->ngap.code,\n                    &nas_message->gmm.registration_request);\n            if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                ogs_error(\"[%s] gmm_handle_registration_request() failed [%d]\",\n                            amf_ue->suci, gmm_cause);\n                r = nas_5gs_send_registration_reject(amf_ue, gmm_cause);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            r = amf_ue_sbi_discover_and_send(\n                    OGS_SBI_SERVICE_TYPE_NAUSF_AUTH, NULL,\n                    amf_nausf_auth_build_authenticate, amf_ue, 0, NULL);\n            ogs_expect(r == OGS_OK);\n            ogs_assert(r != OGS_ERROR);\n\n            OGS_FSM_TRAN(s, &gmm_state_authentication);\n            break;\n\n        case OGS_NAS_5GS_SERVICE_REQUEST:\n            ogs_info(\"[%s] Service request\", amf_ue->supi);\n            r = nas_5gs_send_service_reject(amf_ue,\n                    OGS_5GMM_CAUSE_UE_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORK);\n            ogs_expect(r == OGS_OK);\n            ogs_assert(r != OGS_ERROR);\n            OGS_FSM_TRAN(s, &gmm_state_exception);\n            break;\n\n        case OGS_NAS_5GS_5GMM_STATUS:\n            ogs_warn(\"[%s] 5GMM STATUS : Cause[%d]\",\n                    amf_ue->supi, nas_message->gmm.gmm_status.gmm_cause);\n            OGS_FSM_TRAN(s, &gmm_state_exception);\n            break;\n\n        case OGS_NAS_5GS_DEREGISTRATION_REQUEST_FROM_UE:\n            ogs_warn(\"[%s] Deregistration request\", amf_ue->supi);\n\n            gmm_handle_deregistration_request(\n                    amf_ue, &nas_message->gmm.deregistration_request_from_ue);\n            OGS_FSM_TRAN(s, &gmm_state_de_registered);\n            break;\n\n        default:\n            ogs_error(\"Unknown message[%d]\", nas_message->gmm.h.message_type);\n            break;\n        }\n        break;\n    case AMF_EVENT_5GMM_TIMER:\n        switch (e->h.timer_id) {\n        case AMF_TIMER_T3560:\n            if (amf_ue->t3560.retry_count >=\n                    amf_timer_cfg(AMF_TIMER_T3560)->max_count) {\n                ogs_warn(\"[%s] Retransmission failed. Stop\", amf_ue->supi);\n                r = nas_5gs_send_gmm_reject(amf_ue,\n                        OGS_5GMM_CAUSE_SECURITY_MODE_REJECTED_UNSPECIFIED);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n            } else {\n                amf_ue->t3560.retry_count++;\n                r = nas_5gs_send_security_mode_command(amf_ue);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            break;\n        default:\n            ogs_error(\"Unknown timer[%s:%d]\",\n                    amf_timer_get_name(e->h.timer_id), e->h.timer_id);\n            break;\n        }\n        break;\n    default:\n        ogs_error(\"Unknown event[%s]\", amf_event_get_name(e));\n        break;\n    }\n}\n\nvoid gmm_state_initial_context_setup(ogs_fsm_t *s, amf_event_t *e)\n{\n    int rv, r, state, xact_count = 0;\n    ogs_nas_5gmm_cause_t gmm_cause;\n\n    amf_ue_t *amf_ue = NULL;\n    amf_sess_t *sess = NULL;\n    ogs_nas_5gs_message_t *nas_message = NULL;\n    ogs_nas_security_header_type_t h;\n\n    ogs_sbi_message_t *sbi_message = NULL;\n\n    gmm_configuration_update_command_param_t param;\n\n    ogs_assert(s);\n    ogs_assert(e);\n\n    amf_sm_debug(e);\n\n    if (e->sess) {\n        sess = e->sess;\n        amf_ue = sess->amf_ue;\n        ogs_assert(amf_ue);\n    } else {\n        amf_ue = e->amf_ue;\n        ogs_assert(amf_ue);\n    }\n\n    switch (e->h.id) {\n    case OGS_FSM_ENTRY_SIG:\n        break;\n    case OGS_FSM_EXIT_SIG:\n        break;\n\n    case OGS_EVENT_SBI_CLIENT:\n        sbi_message = e->h.sbi.message;\n        ogs_assert(sbi_message);\n        state = e->h.sbi.state;\n\n        SWITCH(sbi_message->h.service.name)\n        CASE(OGS_SBI_SERVICE_NAME_NUDM_UECM)\n\n            SWITCH(sbi_message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_REGISTRATIONS)\n                if (sbi_message->res_status != OGS_SBI_HTTP_STATUS_CREATED &&\n                    sbi_message->res_status != OGS_SBI_HTTP_STATUS_NO_CONTENT &&\n                    sbi_message->res_status != OGS_SBI_HTTP_STATUS_OK) {\n                    ogs_error(\"[%s] HTTP response error [%d]\",\n                            amf_ue->supi, sbi_message->res_status);\n                    r = nas_5gs_send_gmm_reject(\n                            amf_ue, OGS_5GMM_CAUSE_5GS_SERVICES_NOT_ALLOWED);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n                    OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n                    break;\n                }\n\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_PUT)\n                    r = amf_ue_sbi_discover_and_send(\n                            OGS_SBI_SERVICE_TYPE_NUDM_SDM, NULL,\n                            amf_nudm_sdm_build_get,\n                            amf_ue, state,\n                            (char *)OGS_SBI_RESOURCE_NAME_AM_DATA);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n                    break;\n\n                DEFAULT\n                    ogs_error(\"[%s] Invalid HTTP method [%s]\",\n                            amf_ue->suci, sbi_message->h.method);\n                    ogs_assert_if_reached();\n                END\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[1]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NUDM_SDM)\n\n            SWITCH(sbi_message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_AM_DATA)\n            CASE(OGS_SBI_RESOURCE_NAME_SMF_SELECT_DATA)\n            CASE(OGS_SBI_RESOURCE_NAME_UE_CONTEXT_IN_SMF_DATA)\n            CASE(OGS_SBI_RESOURCE_NAME_SDM_SUBSCRIPTIONS)\n                if ((sbi_message->res_status != OGS_SBI_HTTP_STATUS_OK) &&\n                    (sbi_message->res_status != OGS_SBI_HTTP_STATUS_CREATED)) {\n                    ogs_error(\"[%s] HTTP response error [%d]\",\n                            amf_ue->supi, sbi_message->res_status);\n                    r = nas_5gs_send_gmm_reject(\n                            amf_ue, OGS_5GMM_CAUSE_5GS_SERVICES_NOT_ALLOWED);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n                    OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n                    break;\n                }\n\n                rv = amf_nudm_sdm_handle_provisioned(\n                        amf_ue, state, sbi_message);\n                if (rv != OGS_OK) {\n                    ogs_error(\"[%s] amf_nudm_sdm_handle_provisioned(%s) failed\",\n                            amf_ue->supi, sbi_message->h.resource.component[1]);\n                    OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n                    break;\n                }\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[1]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NPCF_AM_POLICY_CONTROL)\n            SWITCH(sbi_message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_POLICIES)\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_POST)\n                    rv = amf_npcf_am_policy_control_handle_create(\n                            amf_ue, sbi_message);\n                    if (rv != OGS_OK) {\n                        ogs_error(\"[%s] amf_npcf_am_policy_control\"\n                                \"_handle_create() failed\", amf_ue->supi);\n                        OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n                        break;\n                    }\n\n                    ogs_assert(amf_ue->nas.message_type ==\n                            OGS_NAS_5GS_REGISTRATION_REQUEST);\n                    CLEAR_AMF_UE_TIMER(amf_ue->t3550);\n                    r = nas_5gs_send_registration_accept(amf_ue);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n\n                    /* In nsmf-handler.c\n                     *\n                     * 1. AMF_SESS_STORE_N2_TRANSFER\n                     * 2. if PCF_AM_POLICY is NOT associated\n                     * 3. AMF sends npcf-am-policy-control/create to PCF\n                     *\n                     * In gmm-sm.c\n                     * 4. Send Registration Accept\n                     * 5. We should clear N2 transfer\n                     *    (PDUSessionResourceSetupRequest)\n                     */\n                    AMF_UE_CLEAR_N2_TRANSFER(\n                            amf_ue, pdu_session_resource_setup_request);\n\n                    if (!amf_ue->next.m_tmsi)\n                        OGS_FSM_TRAN(s, &gmm_state_registered);\n                    break;\n\n                DEFAULT\n                    ogs_error(\"Unknown method [%s]\", sbi_message->h.method);\n                    ogs_assert_if_reached();\n                END\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[0]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        DEFAULT\n            ogs_error(\"Invalid service name [%s]\", sbi_message->h.service.name);\n            ogs_assert_if_reached();\n        END\n        break;\n\n    case AMF_EVENT_5GMM_MESSAGE:\n        nas_message = e->nas.message;\n        ogs_assert(nas_message);\n\n        h.type = e->nas.type;\n\n        xact_count = amf_sess_xact_count(amf_ue);\n\n        switch (nas_message->gmm.h.message_type) {\n        case OGS_NAS_5GS_REGISTRATION_COMPLETE:\n            ogs_info(\"[%s] Registration complete\", amf_ue->supi);\n\n            CLEAR_AMF_UE_TIMER(amf_ue->t3550);\n\n            /*\n             * TS24.501\n             * 5.3.3 Temporary identities\n             *\n             * The AMF shall assign a new 5G-GUTI for a particular UE:\n             *\n             * a) during a successful initial registration procedure;\n             * b) during a successful registration procedure\n             *    for mobility registration update; and\n             * c) after a successful service request procedure invoked\n             *    as a response to a paging request from the network and\n             *    before the release of the N1 NAS signalling connection\n             *    as specified in subclause 5.4.4.1.\n             *\n             * The AMF should assign a new 5G-GUTI for a particular UE\n             * during a successful registration procedure\n             * for periodic registration update.\n             *\n             * The AMF may assign a new 5G-GUTI at any time for a particular UE\n             * by performing the generic UE configuration update procedure.\n             */\n            if (amf_ue->next.m_tmsi) {\n                amf_ue_confirm_guti(amf_ue);\n            } else {\n                ogs_error(\"[%s] No GUTI allocated\", amf_ue->supi);\n            }\n\n            /*\n             * TS24.501\n             * 5.4.4.2 Generic UE configuration update procedure initiated\n             *         by the network\n             *\n             * If an acknowledgement from the UE is requested, the AMF shall\n             * indicate acknowledgement requested in the Configuration update\n             * indication IE in the CONFIGURATION UPDATE COMMAND message and\n             * shall start timer T3555. Acknowledgement shall be requested\n             * for all parameters except when only NITZ is included.\n             *\n             * TS23.502\n             * 4.2.4.2 UE Configuration Update procedure for access and\n             * mobility management related parameters\n             *\n             * The AMF includes one or more of 5G-GUTI, TAI List,\n             * Allowed NSSAI, Mapping Of Allowed NSSAI, Configured NSSAI\n             * for the Serving PLMN, Mapping Of Configured NSSAI,\n             * rejected S-NSSAIs, NITZ (Network Identity and Time Zone),\n             * Mobility Restrictions parameters, LADN Information,\n             * Operator-defined access category definitions or SMS Subscribed\n             * Indication if the AMF wants to update these NAS parameters\n             * without triggering a UE Registration procedure.\n             */\n            memset(&param, 0, sizeof(param));\n            param.nitz = 1;\n            r = nas_5gs_send_configuration_update_command(amf_ue, &param);\n            ogs_expect(r == OGS_OK);\n            ogs_assert(r != OGS_ERROR);\n\n            switch (amf_ue->nas.registration.value) {\n            case OGS_NAS_5GS_REGISTRATION_TYPE_INITIAL:\n                amf_metrics_inst_global_inc(AMF_METR_GLOB_CTR_RM_REG_INIT_SUCC);\n                break;\n            case OGS_NAS_5GS_REGISTRATION_TYPE_MOBILITY_UPDATING:\n                amf_metrics_inst_global_inc(AMF_METR_GLOB_CTR_RM_REG_MOB_SUCC);\n                break;\n            case OGS_NAS_5GS_REGISTRATION_TYPE_PERIODIC_UPDATING:\n                amf_metrics_inst_global_inc(AMF_METR_GLOB_CTR_RM_REG_PERIOD_SUCC);\n                break;\n            case OGS_NAS_5GS_REGISTRATION_TYPE_EMERGENCY:\n                amf_metrics_inst_global_inc(AMF_METR_GLOB_CTR_RM_REG_EMERG_SUCC);\n                break;\n            default:\n                ogs_error(\"Unknown reg_type[%d]\",\n                        amf_ue->nas.registration.value);\n            }\n            OGS_FSM_TRAN(s, &gmm_state_registered);\n            break;\n\n        case OGS_NAS_5GS_REGISTRATION_REQUEST:\n            ogs_warn(\"Registration request\");\n            gmm_cause = gmm_handle_registration_request(\n                    amf_ue, h, e->ngap.code,\n                    &nas_message->gmm.registration_request);\n            if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                ogs_error(\"[%s] gmm_handle_registration_request() failed [%d]\",\n                            amf_ue->suci, gmm_cause);\n                r = nas_5gs_send_registration_reject(amf_ue, gmm_cause);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            amf_sbi_send_release_all_sessions(\n                    amf_ue, AMF_RELEASE_SM_CONTEXT_NO_STATE);\n\n            if (!AMF_SESSION_RELEASE_PENDING(amf_ue) &&\n                amf_sess_xact_count(amf_ue) == xact_count) {\n                r = amf_ue_sbi_discover_and_send(\n                        OGS_SBI_SERVICE_TYPE_NAUSF_AUTH, NULL,\n                        amf_nausf_auth_build_authenticate,\n                        amf_ue, 0, NULL);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            OGS_FSM_TRAN(s, &gmm_state_authentication);\n            break;\n\n        case OGS_NAS_5GS_SERVICE_REQUEST:\n            ogs_info(\"[%s] Service request\", amf_ue->supi);\n            r = nas_5gs_send_service_reject(amf_ue,\n                OGS_5GMM_CAUSE_UE_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORK);\n            ogs_expect(r == OGS_OK);\n            ogs_assert(r != OGS_ERROR);\n            OGS_FSM_TRAN(s, &gmm_state_exception);\n            break;\n\n        case OGS_NAS_5GS_5GMM_STATUS:\n            ogs_warn(\"[%s] 5GMM STATUS : Cause[%d]\",\n                    amf_ue->supi, nas_message->gmm.gmm_status.gmm_cause);\n            OGS_FSM_TRAN(s, &gmm_state_exception);\n            break;\n\n        case OGS_NAS_5GS_DEREGISTRATION_REQUEST_FROM_UE:\n            ogs_warn(\"[%s] Deregistration request\", amf_ue->supi);\n\n            gmm_handle_deregistration_request(\n                    amf_ue, &nas_message->gmm.deregistration_request_from_ue);\n            OGS_FSM_TRAN(s, &gmm_state_de_registered);\n            break;\n\n        default:\n            ogs_error(\"Unknown message [%d]\", nas_message->gmm.h.message_type);\n            break;\n        }\n        break;\n    case AMF_EVENT_5GMM_TIMER:\n        switch (e->h.timer_id) {\n        case AMF_TIMER_T3550:\n            if (amf_ue->t3550.retry_count >=\n                    amf_timer_cfg(AMF_TIMER_T3550)->max_count) {\n                ogs_warn(\"[%s] Retransmission failed. Stop retransmission\",\n                        amf_ue->suci);\n                OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n            } else {\n                amf_ue->t3550.retry_count++;\n                r = nas_5gs_send_registration_accept(amf_ue);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            break;\n        default:\n            ogs_error(\"[%s] Unknown timer[%s:%d]\", amf_ue->suci,\n                    amf_timer_get_name(e->h.timer_id), e->h.timer_id);\n            break;\n        }\n        break;\n    default:\n        ogs_error(\"Unknown event[%s]\", amf_event_get_name(e));\n        break;\n    }\n}\n\nvoid gmm_state_ue_context_will_remove(ogs_fsm_t *s, amf_event_t *e)\n{\n    amf_ue_t *amf_ue = NULL;\n    amf_sess_t *sess = NULL;\n\n    ogs_assert(s);\n    ogs_assert(e);\n\n    amf_sm_debug(e);\n\n    if (e->sess) {\n        sess = e->sess;\n        amf_ue = sess->amf_ue;\n        ogs_assert(amf_ue);\n    } else {\n        amf_ue = e->amf_ue;\n        ogs_assert(amf_ue);\n    }\n\n    switch (e->h.id) {\n    case OGS_FSM_ENTRY_SIG:\n        amf_ue_remove(amf_ue);\n        break;\n\n    case OGS_FSM_EXIT_SIG:\n        break;\n\n    default:\n        ogs_error(\"Unknown event[%s]\", amf_event_get_name(e));\n    }\n}\n\nvoid gmm_state_exception(ogs_fsm_t *s, amf_event_t *e)\n{\n    int xact_count = 0, r;\n    ogs_nas_5gmm_cause_t gmm_cause;\n\n    amf_ue_t *amf_ue = NULL;\n    amf_sess_t *sess = NULL;\n    ran_ue_t *ran_ue = NULL;\n    ogs_nas_5gs_message_t *nas_message = NULL;\n    ogs_nas_security_header_type_t h;\n\n    ogs_assert(s);\n    ogs_assert(e);\n\n    amf_sm_debug(e);\n\n    if (e->sess) {\n        sess = e->sess;\n        amf_ue = sess->amf_ue;\n        ogs_assert(amf_ue);\n    } else {\n        amf_ue = e->amf_ue;\n        ogs_assert(amf_ue);\n    }\n\n    switch (e->h.id) {\n    case OGS_FSM_ENTRY_SIG:\n        AMF_UE_CLEAR_PAGING_INFO(amf_ue);\n        AMF_UE_CLEAR_N2_TRANSFER(amf_ue, pdu_session_resource_setup_request);\n        AMF_UE_CLEAR_5GSM_MESSAGE(amf_ue);\n        CLEAR_AMF_UE_ALL_TIMERS(amf_ue);\n\n        xact_count = amf_sess_xact_count(amf_ue);\n\n        amf_sbi_send_release_all_sessions(\n                amf_ue, AMF_RELEASE_SM_CONTEXT_NO_STATE);\n\n        if (!AMF_SESSION_RELEASE_PENDING(amf_ue) &&\n            amf_sess_xact_count(amf_ue) == xact_count) {\n            r = ngap_send_amf_ue_context_release_command(amf_ue,\n                    NGAP_Cause_PR_nas, NGAP_CauseNas_normal_release,\n                    NGAP_UE_CTX_REL_UE_CONTEXT_REMOVE, 0);\n            ogs_expect(r == OGS_OK);\n            ogs_assert(r != OGS_ERROR);\n        }\n        break;\n    case OGS_FSM_EXIT_SIG:\n        break;\n\n    case AMF_EVENT_5GMM_MESSAGE:\n        nas_message = e->nas.message;\n        ogs_assert(nas_message);\n\n        ran_ue = ran_ue_cycle(amf_ue->ran_ue);\n        ogs_assert(ran_ue);\n\n        h.type = e->nas.type;\n\n        xact_count = amf_sess_xact_count(amf_ue);\n\n        switch (nas_message->gmm.h.message_type) {\n        case OGS_NAS_5GS_REGISTRATION_REQUEST:\n            ogs_info(\"Registration request\");\n            gmm_cause = gmm_handle_registration_request(\n                    amf_ue, h, e->ngap.code,\n                    &nas_message->gmm.registration_request);\n            if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                ogs_error(\"gmm_handle_registration_request() failed [%d]\",\n                            gmm_cause);\n                r = nas_5gs_send_registration_reject(amf_ue, gmm_cause);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            if (!AMF_UE_HAVE_SUCI(amf_ue)) {\n                CLEAR_AMF_UE_TIMER(amf_ue->t3570);\n                r = nas_5gs_send_identity_request(amf_ue);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n\n                OGS_FSM_TRAN(s, &gmm_state_de_registered);\n                break;\n            }\n\n            if (h.integrity_protected && SECURITY_CONTEXT_IS_VALID(amf_ue)) {\n\n                gmm_cause = gmm_handle_registration_update(\n                        amf_ue, &nas_message->gmm.registration_request);\n                if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                    ogs_error(\"[%s] gmm_handle_registration_update() \"\n                                \"failed [%d]\", amf_ue->suci, gmm_cause);\n                    r = nas_5gs_send_registration_reject(amf_ue, gmm_cause);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n                    OGS_FSM_TRAN(s, gmm_state_exception);\n                    break;\n                }\n\n                if (amf_sess_xact_count(amf_ue) == xact_count) {\n\n                    if (amf_update_allowed_nssai(amf_ue) == false) {\n                        ogs_error(\"No Allowed-NSSAI\");\n                        r = nas_5gs_send_gmm_reject(\n                                amf_ue,\n                                OGS_5GMM_CAUSE_NO_NETWORK_SLICES_AVAILABLE);\n                        ogs_expect(r == OGS_OK);\n                        ogs_assert(r != OGS_ERROR);\n                        OGS_FSM_TRAN(s, gmm_state_exception);\n                        break;\n                    }\n\n                    if (!PCF_AM_POLICY_ASSOCIATED(amf_ue)) {\n                        r = amf_ue_sbi_discover_and_send(\n                                OGS_SBI_SERVICE_TYPE_NPCF_AM_POLICY_CONTROL,\n                                NULL,\n                                amf_npcf_am_policy_control_build_create,\n                                amf_ue, 0, NULL);\n                        ogs_expect(r == OGS_OK);\n                        ogs_assert(r != OGS_ERROR);\n                        OGS_FSM_TRAN(s, &gmm_state_initial_context_setup);\n                        break;\n                    }\n\n                    CLEAR_AMF_UE_TIMER(amf_ue->t3550);\n                    r = nas_5gs_send_registration_accept(amf_ue);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n                }\n\n                if (amf_ue->next.m_tmsi)\n                    OGS_FSM_TRAN(s, &gmm_state_initial_context_setup);\n                else\n                    OGS_FSM_TRAN(s, &gmm_state_registered);\n\n            } else {\n\n                amf_sbi_send_release_all_sessions(\n                        amf_ue, AMF_RELEASE_SM_CONTEXT_NO_STATE);\n\n                if (!AMF_SESSION_RELEASE_PENDING(amf_ue) &&\n                    amf_sess_xact_count(amf_ue) == xact_count) {\n                    r = amf_ue_sbi_discover_and_send(\n                            OGS_SBI_SERVICE_TYPE_NAUSF_AUTH, NULL,\n                            amf_nausf_auth_build_authenticate,\n                            amf_ue, 0, NULL);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n                }\n\n                OGS_FSM_TRAN(s, &gmm_state_authentication);\n            }\n            break;\n\n        default:\n            ogs_error(\"Unknown message [%d]\", nas_message->gmm.h.message_type);\n        }\n        break;\n\n    default:\n        ogs_error(\"Unknown event[%s]\", amf_event_get_name(e));\n    }\n}\n"], "fixing_code": ["/*\n * Copyright (C) 2019,2020 by Sukchan Lee <acetcom@gmail.com>\n *\n * This file is part of Open5GS.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n#include \"ngap-handler.h\"\n#include \"gmm-handler.h\"\n#include \"gmm-build.h\"\n#include \"nas-path.h\"\n#include \"nas-security.h\"\n#include \"ngap-path.h\"\n#include \"nausf-handler.h\"\n#include \"nsmf-handler.h\"\n#include \"nudm-handler.h\"\n#include \"npcf-handler.h\"\n#include \"sbi-path.h\"\n#include \"amf-sm.h\"\n\n#undef OGS_LOG_DOMAIN\n#define OGS_LOG_DOMAIN __gmm_log_domain\n\ntypedef enum {\n    GMM_COMMON_STATE_DEREGISTERED,\n    GMM_COMMON_STATE_REGISTERED,\n} gmm_common_state_e;\n\nstatic void common_register_state(ogs_fsm_t *s, amf_event_t *e,\n        gmm_common_state_e state);\n\n\nvoid gmm_state_initial(ogs_fsm_t *s, amf_event_t *e)\n{\n    ogs_assert(s);\n\n    amf_sm_debug(e);\n\n    OGS_FSM_TRAN(s, &gmm_state_de_registered);\n}\n\nvoid gmm_state_final(ogs_fsm_t *s, amf_event_t *e)\n{\n    ogs_assert(s);\n\n    amf_sm_debug(e);\n}\n\nvoid gmm_state_de_registered(ogs_fsm_t *s, amf_event_t *e)\n{\n    amf_ue_t *amf_ue = NULL;\n    amf_sess_t *sess = NULL;\n\n    ogs_sbi_message_t *sbi_message = NULL;\n\n    int r, state = 0;\n\n    ogs_assert(s);\n    ogs_assert(e);\n\n    amf_sm_debug(e);\n\n    if (e->sess) {\n        sess = e->sess;\n        amf_ue = sess->amf_ue;\n        ogs_assert(amf_ue);\n    } else {\n        amf_ue = e->amf_ue;\n        ogs_assert(amf_ue);\n    }\n\n    switch (e->h.id) {\n    case OGS_FSM_ENTRY_SIG:\n        AMF_UE_CLEAR_PAGING_INFO(amf_ue);\n        AMF_UE_CLEAR_N2_TRANSFER(amf_ue, pdu_session_resource_setup_request);\n        AMF_UE_CLEAR_5GSM_MESSAGE(amf_ue);\n        CLEAR_AMF_UE_ALL_TIMERS(amf_ue);\n\n        /*\n         * Issue #2040\n         *\n         * TS23.501\n         * 5.4.4 UE Radio Capability handling\n         * 5.4.4.1 UE radio capability information storage in the AMF\n         *\n         * The AMF deletes the UE radio capability when the UE RM state\n         * in the AMF transitions to RM-DEREGISTERED. When the AMF receives\n         * Registration Request with the Registration type set to Initial\n         * Registration or when it receives the first Registration Request\n         * after E-UTRA/EPC Attach with Registration type set to Mobility\n         * Registration Update, the AMF deletes the UE radio capability.\n         *\n         * TS24.501\n         * 5.5.2 De-registration procedure\n         * 5.5.2.1 General\n         *\n         * When the AMF enters the state 5GMM-DEREGISTERED for 3GPP access,\n         * the AMF shall delete the stored UE radio capability information\n         * or the UE radio capability ID, if any.\n         *\n         * (DEPRECATED) Issue #1917 (from Switch-Off to De-Registration)\n         *\n         * When the UE sends a De-registration Request with Switch-Off,\n         * AMF should remove the the stored UE Radio Capability.\n         *\n         * Otherwise, the Radio Capability will not match\n         * because the gNB will not query the Radio Capability\n         * when the UE changes USIM.\n         */\n        OGS_ASN_CLEAR_DATA(&amf_ue->ueRadioCapability);\n        break;\n    case OGS_FSM_EXIT_SIG:\n        break;\n\n    case AMF_EVENT_5GMM_MESSAGE:\n        common_register_state(s, e, GMM_COMMON_STATE_DEREGISTERED);\n        break;\n\n    case AMF_EVENT_5GMM_TIMER:\n        switch (e->h.timer_id) {\n        case AMF_TIMER_T3570:\n            if (amf_ue->t3570.retry_count >=\n                    amf_timer_cfg(AMF_TIMER_T3570)->max_count) {\n                ogs_warn(\"Retransmission of Identity-Request failed. \"\n                        \"Stop retransmission\");\n                CLEAR_AMF_UE_TIMER(amf_ue->t3570);\n                OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n            } else {\n                amf_ue->t3570.retry_count++;\n                r = nas_5gs_send_identity_request(amf_ue);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            break;\n\n        case AMF_TIMER_T3522:\n            if (amf_ue->t3522.retry_count >=\n                    amf_timer_cfg(AMF_TIMER_T3522)->max_count) {\n                ogs_warn(\"Retransmission of Deregistration-Request failed. \"\n                        \"Stop retransmission\");\n                CLEAR_AMF_UE_TIMER(amf_ue->t3522);\n                OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n            } else {\n                amf_ue->t3522.retry_count++;\n                r = nas_5gs_send_de_registration_request(amf_ue,\n                        OpenAPI_deregistration_reason_NULL, 0);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            break;\n\n        case AMF_TIMER_MOBILE_REACHABLE:\n\n            /*\n             * TS 24.501\n             * 5.3.7 Handling of the periodic registration update timer and\n             *\n             * Upon expiry of the mobile reachable timer the network shall\n             * start the implicit de-registration timer over 3GPP access.\n             * The default value of the implicit de-registration timer over\n             * 3GPP access is 4 minutes greater than the value of timer T3512.\n             */\n\n            ogs_warn(\"[%s] Mobile Reachable Timer Expired\", amf_ue->supi);\n\n            ogs_list_for_each(&amf_ue->sess_list, sess) {\n                if (sess->paging.ongoing == true &&\n                    sess->paging.n1n2_failure_txf_notif_uri != NULL) {\n                    ogs_assert(true ==\n                        amf_sbi_send_n1_n2_failure_notify(\n                            sess,\n                            OpenAPI_n1_n2_message_transfer_cause_UE_NOT_REACHABLE_FOR_SESSION));\n                }\n            }\n\n            /* Stop Paging */\n            AMF_UE_CLEAR_PAGING_INFO(amf_ue);\n            AMF_UE_CLEAR_N2_TRANSFER(\n                    amf_ue, pdu_session_resource_setup_request);\n            AMF_UE_CLEAR_5GSM_MESSAGE(amf_ue);\n            CLEAR_AMF_UE_TIMER(amf_ue->t3513);\n\n            ogs_timer_start(amf_ue->implicit_deregistration.timer,\n                    ogs_time_from_sec(amf_self()->time.t3512.value + 240));\n            break;\n\n        case AMF_TIMER_IMPLICIT_DEREGISTRATION:\n\n            /*\n             * TS 24.501\n             * 5.3.7 Handling of the periodic registration update timer and\n             *\n             * If the implicit de-registration timer expires before the UE\n             * contacts the network, the network shall implicitly de-register\n             * the UE.\n             *\n             * TS 23.502\n             * 4.2.2.3.3 Network-initiated Deregistration\n             *\n             * The AMF does not send the Deregistration Request message\n             * to the UE for Implicit Deregistration.\n             */\n\n            ogs_info(\"[%s] Do Network-initiated De-register UE\", amf_ue->supi);\n\n            state = AMF_NETWORK_INITIATED_IMPLICIT_DE_REGISTERED;\n\n            if (UDM_SDM_SUBSCRIBED(amf_ue)) {\n                r = amf_ue_sbi_discover_and_send(\n                        OGS_SBI_SERVICE_TYPE_NUDM_SDM, NULL,\n                        amf_nudm_sdm_build_subscription_delete,\n                        amf_ue, state, NULL);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            } else if (PCF_AM_POLICY_ASSOCIATED(amf_ue)) {\n                    r = amf_ue_sbi_discover_and_send(\n                        OGS_SBI_SERVICE_TYPE_NPCF_AM_POLICY_CONTROL,\n                        NULL,\n                        amf_npcf_am_policy_control_build_delete,\n                        amf_ue, state, NULL);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n            }\n            break;\n\n        default:\n            ogs_error(\"Unknown timer[%s:%d]\",\n                    amf_timer_get_name(e->h.timer_id), e->h.timer_id);\n        }\n        break;\n\n    case OGS_EVENT_SBI_CLIENT:\n        sbi_message = e->h.sbi.message;\n        ogs_assert(sbi_message);\n        state = e->h.sbi.state;\n\n        SWITCH(sbi_message->h.service.name)\n        CASE(OGS_SBI_SERVICE_NAME_NAUSF_AUTH)\n            SWITCH(sbi_message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_UE_AUTHENTICATIONS)\n\n                if (sbi_message->res_status != OGS_SBI_HTTP_STATUS_CREATED &&\n                    sbi_message->res_status != OGS_SBI_HTTP_STATUS_OK &&\n                    sbi_message->res_status != OGS_SBI_HTTP_STATUS_NO_CONTENT) {\n                    if (sbi_message->res_status ==\n                            OGS_SBI_HTTP_STATUS_NOT_FOUND) {\n                        ogs_warn(\"[%s] Cannot find SUCI [%d]\",\n                            amf_ue->suci, sbi_message->res_status);\n                    } else {\n                        ogs_error(\"[%s] HTTP response error [%d]\",\n                            amf_ue->suci, sbi_message->res_status);\n                    }\n                }\n\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_POST)\n                    ogs_warn(\"[%s] Ignore SBI message\", amf_ue->suci);\n                    break;\n                CASE(OGS_SBI_HTTP_METHOD_PUT)\n                    ogs_warn(\"[%s] Ignore SBI message\", amf_ue->suci);\n                    break;\n                CASE(OGS_SBI_HTTP_METHOD_DELETE)\n                    if (amf_ue->confirmation_url_for_5g_aka)\n                        ogs_free(amf_ue->confirmation_url_for_5g_aka);\n                    amf_ue->confirmation_url_for_5g_aka = NULL;\n\n                    if (state == AMF_RELEASE_SM_CONTEXT_NO_STATE ||\n                        state == AMF_UE_INITIATED_DE_REGISTERED) {\n\n                        if (PCF_AM_POLICY_ASSOCIATED(amf_ue)) {\n                            r = amf_ue_sbi_discover_and_send(\n                                    OGS_SBI_SERVICE_TYPE_NPCF_AM_POLICY_CONTROL,\n                                    NULL,\n                                    amf_npcf_am_policy_control_build_delete,\n                                    amf_ue, state, NULL);\n                            ogs_expect(r == OGS_OK);\n                            ogs_assert(r != OGS_ERROR);\n                        } else {\n                            r = nas_5gs_send_de_registration_accept(amf_ue);\n                            ogs_expect(r == OGS_OK);\n                            ogs_assert(r != OGS_ERROR);\n                        }\n\n                    } else if (state ==\n                            AMF_NETWORK_INITIATED_IMPLICIT_DE_REGISTERED ||\n                               state ==\n                            AMF_NETWORK_INITIATED_EXPLICIT_DE_REGISTERED) {\n\n                        int xact_count = amf_sess_xact_count(amf_ue);\n                        amf_sbi_send_release_all_sessions(amf_ue, state);\n\n                        if (!AMF_SESSION_RELEASE_PENDING(amf_ue) &&\n                            amf_sess_xact_count(amf_ue) == xact_count) {\n\n                            if (PCF_AM_POLICY_ASSOCIATED(amf_ue)) {\n                                r = amf_ue_sbi_discover_and_send(\n                                        OGS_SBI_SERVICE_TYPE_NPCF_AM_POLICY_CONTROL,\n                                        NULL,\n                                        amf_npcf_am_policy_control_build_delete,\n                                        amf_ue, state, NULL);\n                                ogs_expect(r == OGS_OK);\n                                ogs_assert(r != OGS_ERROR);\n                            }\n                        }\n                    }\n                    break;\n                DEFAULT\n                    ogs_error(\"[%s] Invalid HTTP method [%s]\",\n                            amf_ue->suci, sbi_message->h.method);\n                    ogs_assert_if_reached();\n                END\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_5G_AKA)\n            CASE(OGS_SBI_RESOURCE_NAME_5G_AKA_CONFIRMATION)\n            CASE(OGS_SBI_RESOURCE_NAME_EAP_SESSION)\n                ogs_warn(\"[%s] Ignore SBI message\", amf_ue->supi);\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[0]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NUDM_SDM)\n            if ((sbi_message->res_status != OGS_SBI_HTTP_STATUS_OK) &&\n                (sbi_message->res_status != OGS_SBI_HTTP_STATUS_CREATED) &&\n                (sbi_message->res_status != OGS_SBI_HTTP_STATUS_NO_CONTENT)) {\n                ogs_error(\"[%s] HTTP response error [%d]\",\n                          amf_ue->supi, sbi_message->res_status);\n            }\n\n            SWITCH(sbi_message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_AM_DATA)\n            CASE(OGS_SBI_RESOURCE_NAME_SMF_SELECT_DATA)\n            CASE(OGS_SBI_RESOURCE_NAME_UE_CONTEXT_IN_SMF_DATA)\n                ogs_warn(\"[%s] Ignore SBI message\", amf_ue->supi);\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_SDM_SUBSCRIPTIONS)\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_DELETE)\n                    /*\n                     * - AMF_UE_INITIATED_DE_REGISTERED\n                     * 1. PDU session establishment request\n                     * 2. PDUSessionResourceSetupRequest +\n                     *    PDU session establishment accept\n                     * 3. PDUSessionResourceSetupResponse\n                     * 4. Deregistration request\n                     * 5. UEContextReleaseCommand\n                     * 6. UEContextReleaseComplete\n                     *\n                     * - AMF_RELEASE_SM_CONTEXT_NO_STATE\n                     * 1. PDU session release request\n                     * 2. PDUSessionResourceReleaseCommand +\n                     *    PDU session release command\n                     * 3. PDUSessionResourceReleaseREsponse\n                     * 4. PDU session release complete\n                     * 5. Deregistration request\n                     * 6. UEContextReleaseCommand\n                     * 7. UEContextReleaseComplete\n                     */\n                    if (state == AMF_RELEASE_SM_CONTEXT_NO_STATE ||\n                        state == AMF_UE_INITIATED_DE_REGISTERED) {\n                        if (amf_ue->data_change_subscription_id) {\n                            ogs_free(amf_ue->data_change_subscription_id);\n                            amf_ue->data_change_subscription_id = NULL;\n                        }\n\n                        r = amf_ue_sbi_discover_and_send(\n                                OGS_SBI_SERVICE_TYPE_NUDM_UECM, NULL,\n                                amf_nudm_uecm_build_registration_delete,\n                                amf_ue, state, NULL);\n                        ogs_expect(r == OGS_OK);\n                        ogs_assert(r != OGS_ERROR);\n                    } else {\n                        ogs_fatal(\"Invalid state [%d]\", state);\n                        ogs_assert_if_reached();\n                    }\n                    break;\n                DEFAULT\n                    ogs_warn(\"[%s] Ignore invalid HTTP method [%s]\",\n                            amf_ue->suci, sbi_message->h.method);\n                END\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[1]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NUDM_UECM)\n            if (sbi_message->res_status != OGS_SBI_HTTP_STATUS_CREATED &&\n                sbi_message->res_status != OGS_SBI_HTTP_STATUS_NO_CONTENT &&\n                sbi_message->res_status != OGS_SBI_HTTP_STATUS_OK) {\n                ogs_error(\"[%s] HTTP response error [%d]\",\n                        amf_ue->supi, sbi_message->res_status);\n            }\n\n            SWITCH(sbi_message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_REGISTRATIONS)\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_PUT)\n                    ogs_warn(\"[%s] Ignore SBI message\", amf_ue->supi);\n                    break;\n                CASE(OGS_SBI_HTTP_METHOD_PATCH)\n                    SWITCH(sbi_message->h.resource.component[2])\n                    CASE(OGS_SBI_RESOURCE_NAME_AMF_3GPP_ACCESS)\n                        /*\n                         * - AMF_UE_INITIATED_DE_REGISTERED\n                         * 1. PDU session establishment request\n                         * 2. PDUSessionResourceSetupRequest +\n                         *    PDU session establishment accept\n                         * 3. PDUSessionResourceSetupResponse\n                         * 4. Deregistration request\n                         * 5. UEContextReleaseCommand\n                         * 6. UEContextReleaseComplete\n                         *\n                         * - AMF_RELEASE_SM_CONTEXT_NO_STATE\n                         * 1. PDU session release request\n                         * 2. PDUSessionResourceReleaseCommand +\n                         *    PDU session release command\n                         * 3. PDUSessionResourceReleaseREsponse\n                         * 4. PDU session release complete\n                         * 5. Deregistration request\n                         * 6. UEContextReleaseCommand\n                         * 7. UEContextReleaseComplete\n                         */\n                        if (state == AMF_RELEASE_SM_CONTEXT_NO_STATE ||\n                            state == AMF_UE_INITIATED_DE_REGISTERED) {\n\n                            if (amf_ue->confirmation_url_for_5g_aka) {\n                                r = amf_ue_sbi_discover_and_send(\n                                    OGS_SBI_SERVICE_TYPE_NAUSF_AUTH,\n                                    NULL,\n                                    amf_nausf_auth_build_authenticate_delete,\n                                    amf_ue, state, NULL);\n                                ogs_expect(r == OGS_OK);\n                                ogs_assert(r != OGS_ERROR);\n                            } else if (PCF_AM_POLICY_ASSOCIATED(amf_ue)) {\n                                r = amf_ue_sbi_discover_and_send(\n                                        OGS_SBI_SERVICE_TYPE_NPCF_AM_POLICY_CONTROL,\n                                        NULL,\n                                        amf_npcf_am_policy_control_build_delete,\n                                        amf_ue, state, NULL);\n                                ogs_expect(r == OGS_OK);\n                                ogs_assert(r != OGS_ERROR);\n                            } else {\n                                r = nas_5gs_send_de_registration_accept(amf_ue);\n                                ogs_expect(r == OGS_OK);\n                                ogs_assert(r != OGS_ERROR);\n                            }\n                        } else {\n                            ogs_fatal(\"Invalid state [%d]\", state);\n                            ogs_assert_if_reached();\n                        }\n                        break;\n                    DEFAULT\n                        ogs_warn(\"Ignoring invalid resource name [%s]\",\n                                 sbi_message->h.resource.component[2]);\n                    END\n                    break;\n\n                DEFAULT\n                    ogs_error(\"[%s] Invalid HTTP method [%s]\",\n                            amf_ue->suci, sbi_message->h.method);\n                    ogs_assert_if_reached();\n                END\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[1]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NPCF_AM_POLICY_CONTROL)\n            SWITCH(sbi_message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_POLICIES)\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_POST)\n                    ogs_warn(\"[%s] Ignore SBI message\", amf_ue->suci);\n                    break;\n\n                CASE(OGS_SBI_HTTP_METHOD_DELETE)\n                    /*\n                     * - AMF_UE_INITIATED_DE_REGISTERED\n                     * 1. PDU session establishment request\n                     * 2. PDUSessionResourceSetupRequest +\n                     *    PDU session establishment accept\n                     * 3. PDUSessionResourceSetupResponse\n                     * 4. Deregistration request\n                     * 5. UEContextReleaseCommand\n                     * 6. UEContextReleaseComplete\n                     *\n                     * - AMF_RELEASE_SM_CONTEXT_NO_STATE\n                     * 1. PDU session release request\n                     * 2. PDUSessionResourceReleaseCommand +\n                     *    PDU session release command\n                     * 3. PDUSessionResourceReleaseREsponse\n                     * 4. PDU session release complete\n                     * 5. Deregistration request\n                     * 6. UEContextReleaseCommand\n                     * 7. UEContextReleaseComplete\n                     */\n                    if (state == AMF_RELEASE_SM_CONTEXT_NO_STATE ||\n                        state == AMF_UE_INITIATED_DE_REGISTERED) {\n                        r = nas_5gs_send_de_registration_accept(amf_ue);\n                        ogs_expect(r == OGS_OK);\n                        ogs_assert(r != OGS_ERROR);\n\n                        PCF_AM_POLICY_CLEAR(amf_ue);\n                    } else {\n                        ogs_fatal(\"Invalid state [%d]\", state);\n                        ogs_assert_if_reached();\n                    }\n                    break;\n\n                DEFAULT\n                    ogs_error(\"Unknown method [%s]\", sbi_message->h.method);\n                    ogs_assert_if_reached();\n                END\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[0]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        DEFAULT\n            ogs_error(\"Invalid service name [%s]\", sbi_message->h.service.name);\n            ogs_assert_if_reached();\n        END\n        break;\n\n    default:\n        ogs_error(\"Unknown event[%s]\", amf_event_get_name(e));\n    }\n}\n\nvoid gmm_state_registered(ogs_fsm_t *s, amf_event_t *e)\n{\n    int i, r, state, xact_count = 0;\n\n    amf_ue_t *amf_ue = NULL;\n    amf_sess_t *sess = NULL;\n\n    ogs_sbi_message_t *sbi_message = NULL;\n\n    ogs_assert(s);\n    ogs_assert(e);\n\n    amf_sm_debug(e);\n\n    if (e->sess) {\n        sess = e->sess;\n        amf_ue = sess->amf_ue;\n        ogs_assert(amf_ue);\n    } else {\n        amf_ue = e->amf_ue;\n        ogs_assert(amf_ue);\n    }\n\n    switch (e->h.id) {\n    case OGS_FSM_ENTRY_SIG:\n        ogs_assert(amf_ue->num_of_slice <= OGS_MAX_NUM_OF_SLICE);\n        for (i = 0; i < amf_ue->num_of_slice; i++) {\n            amf_metrics_inst_by_slice_add(&amf_ue->nr_tai.plmn_id,\n                    &amf_ue->slice[i].s_nssai,\n                    AMF_METR_GAUGE_RM_REGISTERED_SUB_NBR, 1);\n        }\n        break;\n    case OGS_FSM_EXIT_SIG:\n        ogs_assert(amf_ue->num_of_slice <= OGS_MAX_NUM_OF_SLICE);\n        for (i = 0; i < amf_ue->num_of_slice; i++) {\n            amf_metrics_inst_by_slice_add(&amf_ue->nr_tai.plmn_id,\n                    &amf_ue->slice[i].s_nssai,\n                    AMF_METR_GAUGE_RM_REGISTERED_SUB_NBR, -1);\n        }\n        break;\n\n    case AMF_EVENT_5GMM_MESSAGE:\n        common_register_state(s, e, GMM_COMMON_STATE_REGISTERED);\n        break;\n\n    case AMF_EVENT_5GMM_TIMER:\n        switch (e->h.timer_id) {\n        case AMF_TIMER_T3513:\n            if (amf_ue->t3513.retry_count >=\n                    amf_timer_cfg(AMF_TIMER_T3513)->max_count) {\n                amf_sess_t *sess = NULL;\n\n                /* Paging failed */\n                ogs_warn(\"[%s] Paging failed. Stop\", amf_ue->supi);\n\n                ogs_list_for_each(&amf_ue->sess_list, sess) {\n                    if (sess->paging.ongoing == true &&\n                        sess->paging.n1n2_failure_txf_notif_uri != NULL) {\n                        ogs_assert(true ==\n                            amf_sbi_send_n1_n2_failure_notify(\n                                sess,\n                                OpenAPI_n1_n2_message_transfer_cause_UE_NOT_RESPONDING));\n                    }\n                }\n\n                AMF_UE_CLEAR_PAGING_INFO(amf_ue);\n                AMF_UE_CLEAR_N2_TRANSFER(\n                        amf_ue, pdu_session_resource_setup_request);\n                AMF_UE_CLEAR_5GSM_MESSAGE(amf_ue);\n                CLEAR_AMF_UE_TIMER(amf_ue->t3513);\n\n            } else {\n                amf_ue->t3513.retry_count++;\n                /* If t3513 is timeout, the saved pkbuf is used.  */\n                r = ngap_send_paging(amf_ue);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            break;\n\n        case AMF_TIMER_T3522:\n            if (amf_ue->t3522.retry_count >=\n                    amf_timer_cfg(AMF_TIMER_T3522)->max_count) {\n                ogs_warn(\"Retransmission of Deregistration-Request failed. \"\n                        \"Stop retransmission\");\n                CLEAR_AMF_UE_TIMER(amf_ue->t3522);\n                OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n            } else {\n                amf_ue->t3522.retry_count++;\n                r = nas_5gs_send_de_registration_request(amf_ue,\n                        OpenAPI_deregistration_reason_NULL, 0);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            break;\n\n        case AMF_TIMER_T3555:\n            if (amf_ue->t3555.retry_count >=\n                    amf_timer_cfg(AMF_TIMER_T3555)->max_count) {\n                /* Configuration update command failed */\n                ogs_warn(\"[%s] Configuration update failed. Stop\",\n                        amf_ue->supi);\n                CLEAR_AMF_UE_TIMER(amf_ue->t3555);\n\n            } else {\n                amf_ue->t3555.retry_count++;\n\n                /*\n                 * If t3555 is timeout, the saved pkbuf is used.\n                 * In this case, ack should be set to 1 for timer expiration\n                 */\n                r = nas_5gs_send_configuration_update_command(amf_ue, NULL);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            break;\n\n        case AMF_TIMER_T3570:\n            if (amf_ue->t3570.retry_count >=\n                    amf_timer_cfg(AMF_TIMER_T3570)->max_count) {\n                ogs_warn(\"Retransmission of Identity-Request failed. \"\n                        \"Stop retransmission\");\n                CLEAR_AMF_UE_TIMER(amf_ue->t3570);\n                OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n            } else {\n                amf_ue->t3570.retry_count++;\n                r = nas_5gs_send_identity_request(amf_ue);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            break;\n\n        case AMF_TIMER_MOBILE_REACHABLE:\n\n            /*\n             * TS 24.501\n             * 5.3.7 Handling of the periodic registration update timer and\n             *\n             * Upon expiry of the mobile reachable timer the network shall\n             * start the implicit de-registration timer over 3GPP access.\n             * The default value of the implicit de-registration timer over\n             * 3GPP access is 4 minutes greater than the value of timer T3512.\n             */\n\n            ogs_warn(\"[%s] Mobile Reachable Timer Expired\", amf_ue->supi);\n\n            ogs_list_for_each(&amf_ue->sess_list, sess) {\n                if (sess->paging.ongoing == true &&\n                    sess->paging.n1n2_failure_txf_notif_uri != NULL) {\n                    ogs_assert(true ==\n                        amf_sbi_send_n1_n2_failure_notify(\n                            sess,\n                            OpenAPI_n1_n2_message_transfer_cause_UE_NOT_REACHABLE_FOR_SESSION));\n                }\n            }\n\n            /* Stop Paging */\n            AMF_UE_CLEAR_PAGING_INFO(amf_ue);\n            AMF_UE_CLEAR_N2_TRANSFER(\n                    amf_ue, pdu_session_resource_setup_request);\n            AMF_UE_CLEAR_5GSM_MESSAGE(amf_ue);\n            CLEAR_AMF_UE_TIMER(amf_ue->t3513);\n\n            ogs_timer_start(amf_ue->implicit_deregistration.timer,\n                    ogs_time_from_sec(amf_self()->time.t3512.value + 240));\n            break;\n\n        case AMF_TIMER_IMPLICIT_DEREGISTRATION:\n\n            /*\n             * TS 24.501\n             * 5.3.7 Handling of the periodic registration update timer and\n             *\n             * If the implicit de-registration timer expires before the UE\n             * contacts the network, the network shall implicitly de-register\n             * the UE.\n             *\n             * TS 23.502\n             * 4.2.2.3.3 Network-initiated Deregistration\n             *\n             * The AMF does not send the Deregistration Request message\n             * to the UE for Implicit Deregistration.\n             */\n\n            ogs_info(\"[%s] Do Network-initiated De-register UE\", amf_ue->supi);\n\n            state = AMF_NETWORK_INITIATED_IMPLICIT_DE_REGISTERED;\n\n            if (UDM_SDM_SUBSCRIBED(amf_ue)) {\n                r = amf_ue_sbi_discover_and_send(\n                        OGS_SBI_SERVICE_TYPE_NUDM_SDM, NULL,\n                        amf_nudm_sdm_build_subscription_delete,\n                        amf_ue, state, NULL);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            } else if (PCF_AM_POLICY_ASSOCIATED(amf_ue)) {\n                    r = amf_ue_sbi_discover_and_send(\n                        OGS_SBI_SERVICE_TYPE_NPCF_AM_POLICY_CONTROL,\n                        NULL,\n                        amf_npcf_am_policy_control_build_delete,\n                        amf_ue, state, NULL);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n            }\n            break;\n\n        default:\n            ogs_error(\"Unknown timer[%s:%d]\",\n                    amf_timer_get_name(e->h.timer_id), e->h.timer_id);\n        }\n        break;\n\n    case OGS_EVENT_SBI_CLIENT:\n        sbi_message = e->h.sbi.message;\n        ogs_assert(sbi_message);\n        state = e->h.sbi.state;\n\n        xact_count = amf_sess_xact_count(amf_ue);\n\n        SWITCH(sbi_message->h.service.name)\n        CASE(OGS_SBI_SERVICE_NAME_NAUSF_AUTH)\n            SWITCH(sbi_message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_UE_AUTHENTICATIONS)\n\n                if (sbi_message->res_status != OGS_SBI_HTTP_STATUS_CREATED &&\n                    sbi_message->res_status != OGS_SBI_HTTP_STATUS_OK &&\n                    sbi_message->res_status != OGS_SBI_HTTP_STATUS_NO_CONTENT) {\n                    if (sbi_message->res_status ==\n                            OGS_SBI_HTTP_STATUS_NOT_FOUND) {\n                        ogs_warn(\"[%s] Cannot find SUCI [%d]\",\n                            amf_ue->suci, sbi_message->res_status);\n                    } else {\n                        ogs_error(\"[%s] HTTP response error [%d]\",\n                            amf_ue->suci, sbi_message->res_status);\n                    }\n                }\n\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_POST)\n                    ogs_warn(\"[%s] Ignore SBI message\", amf_ue->suci);\n                    break;\n                CASE(OGS_SBI_HTTP_METHOD_PUT)\n                    ogs_warn(\"[%s] Ignore SBI message\", amf_ue->suci);\n                    break;\n                CASE(OGS_SBI_HTTP_METHOD_DELETE)\n                    if (amf_ue->confirmation_url_for_5g_aka)\n                        ogs_free(amf_ue->confirmation_url_for_5g_aka);\n                    amf_ue->confirmation_url_for_5g_aka = NULL;\n\n                    if (state == AMF_RELEASE_SM_CONTEXT_NO_STATE ||\n                        state == AMF_UE_INITIATED_DE_REGISTERED) {\n\n                        if (PCF_AM_POLICY_ASSOCIATED(amf_ue)) {\n                            r = amf_ue_sbi_discover_and_send(\n                                    OGS_SBI_SERVICE_TYPE_NPCF_AM_POLICY_CONTROL,\n                                    NULL,\n                                    amf_npcf_am_policy_control_build_delete,\n                                    amf_ue, state, NULL);\n                            ogs_expect(r == OGS_OK);\n                            ogs_assert(r != OGS_ERROR);\n                        } else {\n                            r = nas_5gs_send_de_registration_accept(amf_ue);\n                            ogs_expect(r == OGS_OK);\n                            ogs_assert(r != OGS_ERROR);\n                        }\n\n                    } else if (state ==\n                            AMF_NETWORK_INITIATED_IMPLICIT_DE_REGISTERED ||\n                               state ==\n                            AMF_NETWORK_INITIATED_EXPLICIT_DE_REGISTERED) {\n\n                        int xact_count = amf_sess_xact_count(amf_ue);\n                        amf_sbi_send_release_all_sessions(amf_ue, state);\n\n                        if (!AMF_SESSION_RELEASE_PENDING(amf_ue) &&\n                            amf_sess_xact_count(amf_ue) == xact_count) {\n\n                            if (PCF_AM_POLICY_ASSOCIATED(amf_ue)) {\n                                r = amf_ue_sbi_discover_and_send(\n                                        OGS_SBI_SERVICE_TYPE_NPCF_AM_POLICY_CONTROL,\n                                        NULL,\n                                        amf_npcf_am_policy_control_build_delete,\n                                        amf_ue, state, NULL);\n                                ogs_expect(r == OGS_OK);\n                                ogs_assert(r != OGS_ERROR);\n                            }\n                        }\n                    }\n                    break;\n                DEFAULT\n                    ogs_error(\"[%s] Invalid HTTP method [%s]\",\n                            amf_ue->suci, sbi_message->h.method);\n                    ogs_assert_if_reached();\n                END\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_5G_AKA)\n            CASE(OGS_SBI_RESOURCE_NAME_5G_AKA_CONFIRMATION)\n            CASE(OGS_SBI_RESOURCE_NAME_EAP_SESSION)\n                ogs_warn(\"[%s] Ignore SBI message\", amf_ue->supi);\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[0]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NUDM_SDM)\n            if ((sbi_message->res_status != OGS_SBI_HTTP_STATUS_OK) &&\n                (sbi_message->res_status != OGS_SBI_HTTP_STATUS_CREATED) &&\n                (sbi_message->res_status != OGS_SBI_HTTP_STATUS_NO_CONTENT)) {\n                ogs_error(\"[%s] HTTP response error [%d]\",\n                          amf_ue->supi, sbi_message->res_status);\n            }\n\n            SWITCH(sbi_message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_AM_DATA)\n            CASE(OGS_SBI_RESOURCE_NAME_SMF_SELECT_DATA)\n            CASE(OGS_SBI_RESOURCE_NAME_UE_CONTEXT_IN_SMF_DATA)\n                ogs_warn(\"[%s] Ignore SBI message\", amf_ue->supi);\n                break;\n\n            CASE(OGS_SBI_RESOURCE_NAME_SDM_SUBSCRIPTIONS)\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_DELETE)\n                    /*\n                     * - AMF_NETWORK_INITIATED_IMPLICIT_DE_REGISTERED\n                     * 1. Implicit Timer Expiration\n                     * 2. UDM_SDM_Unsubscribe\n                     * 3. UDM_UECM_Deregisration\n                     * 4. PDU session release request\n                     * 5. PDUSessionResourceReleaseCommand +\n                     *    PDU session release command\n                     * 6. PDUSessionResourceReleaseResponse\n                     * 7. AM_Policy_Association_Termination\n                     *\n                     * - AMF_NETWORK_INITIATED_EXPLICIT_DE_REGISTERED\n                     * 1. UDM_UECM_DeregistrationNotification\n                     * 2. Deregistration request\n                     * 3. UDM_SDM_Unsubscribe\n                     * 4. UDM_UECM_Deregisration\n                     * 5. PDU session release request\n                     * 6. PDUSessionResourceReleaseCommand +\n                     *    PDU session release command\n                     * 7. PDUSessionResourceReleaseResponse\n                     * 8. AM_Policy_Association_Termination\n                     * 9.  Deregistration accept\n                     * 10. Signalling Connecion Release\n                     */\n                    if (state ==\n                            AMF_NETWORK_INITIATED_IMPLICIT_DE_REGISTERED ||\n                        state ==\n                            AMF_NETWORK_INITIATED_EXPLICIT_DE_REGISTERED) {\n                        if (amf_ue->data_change_subscription_id) {\n                            ogs_free(amf_ue->data_change_subscription_id);\n                            amf_ue->data_change_subscription_id = NULL;\n                        }\n\n                        r = amf_ue_sbi_discover_and_send(\n                                OGS_SBI_SERVICE_TYPE_NUDM_UECM, NULL,\n                                amf_nudm_uecm_build_registration_delete,\n                                amf_ue, state, NULL);\n                        ogs_expect(r == OGS_OK);\n                        ogs_assert(r != OGS_ERROR);\n                    } else {\n                        ogs_fatal(\"Invalid state [%d]\", state);\n                        ogs_assert_if_reached();\n                    }\n                    break;\n                DEFAULT\n                    ogs_warn(\"[%s] Ignore invalid HTTP method [%s]\",\n                            amf_ue->suci, sbi_message->h.method);\n                END\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[1]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NUDM_UECM)\n            if (sbi_message->res_status != OGS_SBI_HTTP_STATUS_CREATED &&\n                sbi_message->res_status != OGS_SBI_HTTP_STATUS_NO_CONTENT &&\n                sbi_message->res_status != OGS_SBI_HTTP_STATUS_OK) {\n                ogs_error(\"[%s] HTTP response error [%d]\",\n                        amf_ue->supi, sbi_message->res_status);\n            }\n\n            SWITCH(sbi_message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_REGISTRATIONS)\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_PUT)\n                    ogs_warn(\"[%s] Ignore SBI message\", amf_ue->supi);\n                    break;\n                CASE(OGS_SBI_HTTP_METHOD_PATCH)\n                    SWITCH(sbi_message->h.resource.component[2])\n                    CASE(OGS_SBI_RESOURCE_NAME_AMF_3GPP_ACCESS)\n                        /*\n                         * - AMF_NETWORK_INITIATED_IMPLICIT_DE_REGISTERED\n                         * 1. Implicit Timer Expiration\n                         * 2. UDM_SDM_Unsubscribe\n                         * 3. UDM_UECM_Deregisration\n                         * 4. Authentication Result Removal\n                         * 5. PDU session release request\n                         * 6. PDUSessionResourceReleaseCommand +\n                         *    PDU session release command\n                         * 7. PDUSessionResourceReleaseResponse\n                         * 8. AM_Policy_Association_Termination\n                         *\n                         * - AMF_NETWORK_INITIATED_EXPLICIT_DE_REGISTERED\n                         * 1. UDM_UECM_DeregistrationNotification\n                         * 2. Deregistration request\n                         * 3. UDM_SDM_Unsubscribe\n                         * 4. UDM_UECM_Deregisration\n                         * 5. Authentication Result Removal\n                         * 6. PDU session release request\n                         * 7. PDUSessionResourceReleaseCommand +\n                         *    PDU session release command\n                         * 8. PDUSessionResourceReleaseResponse\n                         * 9. AM_Policy_Association_Termination\n                         * 10. Deregistration accept\n                         * 11. Signalling Connecion Release\n                         */\n                        if (state ==\n                                AMF_NETWORK_INITIATED_IMPLICIT_DE_REGISTERED ||\n                            state ==\n                                AMF_NETWORK_INITIATED_EXPLICIT_DE_REGISTERED) {\n\n                            if (amf_ue->confirmation_url_for_5g_aka) {\n                                r = amf_ue_sbi_discover_and_send(\n                                        OGS_SBI_SERVICE_TYPE_NAUSF_AUTH,\n                                        NULL,\n                                        amf_nausf_auth_build_authenticate_delete,\n                                        amf_ue, state, NULL);\n                                ogs_expect(r == OGS_OK);\n                                ogs_assert(r != OGS_ERROR);\n\n                            } else {\n\n                                amf_sbi_send_release_all_sessions(amf_ue, state);\n\n                                if (!AMF_SESSION_RELEASE_PENDING(amf_ue) &&\n                                    amf_sess_xact_count(amf_ue) == xact_count) {\n\n                                    if (PCF_AM_POLICY_ASSOCIATED(amf_ue)) {\n                                        r = amf_ue_sbi_discover_and_send(\n                                                OGS_SBI_SERVICE_TYPE_NPCF_AM_POLICY_CONTROL,\n                                                NULL,\n                                                amf_npcf_am_policy_control_build_delete,\n                                                amf_ue, state, NULL);\n                                        ogs_expect(r == OGS_OK);\n                                        ogs_assert(r != OGS_ERROR);\n                                    }\n                                }\n                            }\n                        } else {\n                            ogs_fatal(\"Invalid state [%d]\", state);\n                            ogs_assert_if_reached();\n                        }\n                        break;\n                    DEFAULT\n                        ogs_warn(\"Ignoring invalid resource name [%s]\",\n                                 sbi_message->h.resource.component[2]);\n                    END\n                    break;\n\n                DEFAULT\n                    ogs_error(\"[%s] Invalid HTTP method [%s]\",\n                            amf_ue->suci, sbi_message->h.method);\n                    ogs_assert_if_reached();\n                END\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[1]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NPCF_AM_POLICY_CONTROL)\n            SWITCH(sbi_message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_POLICIES)\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_POST)\n                    ogs_warn(\"[%s] Ignore SBI message\", amf_ue->suci);\n                    break;\n\n                CASE(OGS_SBI_HTTP_METHOD_DELETE)\n                    /*\n                     * - AMF_NETWORK_INITIATED_IMPLICIT_DE_REGISTERED\n                     * 1. Implicit Timer Expiration\n                     * 2. UDM_SDM_Unsubscribe\n                     * 3. UDM_UECM_Deregisration\n                     * 4. PDU session release request\n                     * 5. PDUSessionResourceReleaseCommand +\n                     *    PDU session release command\n                     * 6. PDUSessionResourceReleaseResponse\n                     * 7. AM_Policy_Association_Termination\n                     *\n                     * - AMF_NETWORK_INITIATED_EXPLICIT_DE_REGISTERED\n                     * 1. UDM_UECM_DeregistrationNotification\n                     * 2. Deregistration request\n                     * 3. UDM_SDM_Unsubscribe\n                     * 4. UDM_UECM_Deregisration\n                     * 5. PDU session release request\n                     * 6. PDUSessionResourceReleaseCommand +\n                     *    PDU session release command\n                     * 7. PDUSessionResourceReleaseResponse\n                     * 8. AM_Policy_Association_Termination\n                     * 9. Deregistration accept\n                     * 10.Signalling Connecion Release\n                     */\n                    if (state == AMF_NETWORK_INITIATED_IMPLICIT_DE_REGISTERED) {\n                        ogs_warn(\"[%s] Implicit De-registered\", amf_ue->supi);\n                        OGS_FSM_TRAN(&amf_ue->sm,\n                                &gmm_state_ue_context_will_remove);\n\n                    } else if (state ==\n                            AMF_NETWORK_INITIATED_EXPLICIT_DE_REGISTERED) {\n                        ogs_warn(\"[%s] Explicit De-registered\", amf_ue->supi);\n\n                        amf_ue->explict_de_registered.sbi_done = true;\n\n                        if (amf_ue->explict_de_registered.n1_done == true) {\n                            r = ngap_send_ran_ue_context_release_command(\n                                    amf_ue->ran_ue,\n                                    NGAP_Cause_PR_misc,\n                                    NGAP_CauseMisc_om_intervention,\n                                    NGAP_UE_CTX_REL_UE_CONTEXT_REMOVE, 0);\n                            ogs_expect(r == OGS_OK);\n                            ogs_assert(r != OGS_ERROR);\n                        }\n\n                    } else {\n                        ogs_fatal(\"Invalid state [%d]\", state);\n                        ogs_assert_if_reached();\n                    }\n                    break;\n\n                DEFAULT\n                    ogs_error(\"Unknown method [%s]\", sbi_message->h.method);\n                    ogs_assert_if_reached();\n                END\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[0]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        DEFAULT\n            ogs_error(\"Invalid service name [%s]\", sbi_message->h.service.name);\n            ogs_assert_if_reached();\n        END\n        break;\n\n    default:\n        ogs_error(\"Unknown event[%s]\", amf_event_get_name(e));\n    }\n}\n\nstatic void common_register_state(ogs_fsm_t *s, amf_event_t *e,\n        gmm_common_state_e state)\n{\n    int r, xact_count = 0;\n    ogs_nas_5gmm_cause_t gmm_cause;\n\n    amf_ue_t *amf_ue = NULL;\n    amf_sess_t *sess = NULL;\n    ran_ue_t *ran_ue = NULL;\n    ogs_nas_5gs_message_t *nas_message = NULL;\n    ogs_nas_security_header_type_t h;\n\n    ogs_assert(e);\n\n    if (e->sess) {\n        sess = e->sess;\n        amf_ue = sess->amf_ue;\n        ogs_assert(amf_ue);\n    } else {\n        amf_ue = e->amf_ue;\n        ogs_assert(amf_ue);\n    }\n\n    switch (e->h.id) {\n    case AMF_EVENT_5GMM_MESSAGE:\n        nas_message = e->nas.message;\n        ogs_assert(nas_message);\n\n        ran_ue = ran_ue_cycle(amf_ue->ran_ue);\n        ogs_assert(ran_ue);\n\n        h.type = e->nas.type;\n\n        xact_count = amf_sess_xact_count(amf_ue);\n\n        switch (nas_message->gmm.h.message_type) {\n        case OGS_NAS_5GS_REGISTRATION_REQUEST:\n            ogs_info(\"Registration request\");\n            gmm_cause = gmm_handle_registration_request(\n                    amf_ue, h, e->ngap.code,\n                    &nas_message->gmm.registration_request);\n\n            switch (amf_ue->nas.registration.value) {\n            case OGS_NAS_5GS_REGISTRATION_TYPE_INITIAL:\n                amf_metrics_inst_global_inc(AMF_METR_GLOB_CTR_RM_REG_INIT_REQ);\n                break;\n            case OGS_NAS_5GS_REGISTRATION_TYPE_MOBILITY_UPDATING:\n                amf_metrics_inst_global_inc(AMF_METR_GLOB_CTR_RM_REG_MOB_REQ);\n                break;\n            case OGS_NAS_5GS_REGISTRATION_TYPE_PERIODIC_UPDATING:\n                amf_metrics_inst_global_inc(AMF_METR_GLOB_CTR_RM_REG_PERIOD_REQ);\n                break;\n            case OGS_NAS_5GS_REGISTRATION_TYPE_EMERGENCY:\n                amf_metrics_inst_global_inc(AMF_METR_GLOB_CTR_RM_REG_EMERG_REQ);\n                break;\n            default:\n                ogs_error(\"Unknown reg_type[%d]\", amf_ue->nas.registration.value);\n            }\n\n            if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                ogs_error(\"gmm_handle_registration_request() failed [%d]\",\n                            gmm_cause);\n                r = nas_5gs_send_registration_reject(amf_ue, gmm_cause);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            if (!AMF_UE_HAVE_SUCI(amf_ue)) {\n                CLEAR_AMF_UE_TIMER(amf_ue->t3570);\n                r = nas_5gs_send_identity_request(amf_ue);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                break;\n            }\n\n            if (h.integrity_protected && SECURITY_CONTEXT_IS_VALID(amf_ue)) {\n\n                gmm_cause = gmm_handle_registration_update(\n                        amf_ue, &nas_message->gmm.registration_request);\n                if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                    ogs_error(\"[%s] gmm_handle_registration_update() \"\n                                \"failed [%d]\", amf_ue->suci, gmm_cause);\n                    r = nas_5gs_send_registration_reject(amf_ue, gmm_cause);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n                    OGS_FSM_TRAN(s, gmm_state_exception);\n                    break;\n                }\n\n                if (amf_sess_xact_count(amf_ue) == xact_count) {\n\n                    if (amf_update_allowed_nssai(amf_ue) == false) {\n                        ogs_error(\"No Allowed-NSSAI\");\n                        r = nas_5gs_send_gmm_reject(\n                                amf_ue,\n                                OGS_5GMM_CAUSE_NO_NETWORK_SLICES_AVAILABLE);\n                        ogs_expect(r == OGS_OK);\n                        ogs_assert(r != OGS_ERROR);\n                        OGS_FSM_TRAN(s, gmm_state_exception);\n                        break;\n                    }\n\n                    if (!PCF_AM_POLICY_ASSOCIATED(amf_ue)) {\n                        r = amf_ue_sbi_discover_and_send(\n                                OGS_SBI_SERVICE_TYPE_NPCF_AM_POLICY_CONTROL,\n                                NULL,\n                                amf_npcf_am_policy_control_build_create,\n                                amf_ue, 0, NULL);\n                        ogs_expect(r == OGS_OK);\n                        ogs_assert(r != OGS_ERROR);\n                        OGS_FSM_TRAN(s, &gmm_state_initial_context_setup);\n                        break;\n                    }\n\n                    CLEAR_AMF_UE_TIMER(amf_ue->t3550);\n                    r = nas_5gs_send_registration_accept(amf_ue);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n                }\n\n                if (amf_ue->next.m_tmsi)\n                    OGS_FSM_TRAN(s, &gmm_state_initial_context_setup);\n                else\n                    OGS_FSM_TRAN(s, &gmm_state_registered);\n\n            } else {\n\n                amf_sbi_send_release_all_sessions(\n                        amf_ue, AMF_RELEASE_SM_CONTEXT_NO_STATE);\n\n                if (!AMF_SESSION_RELEASE_PENDING(amf_ue) &&\n                    amf_sess_xact_count(amf_ue) == xact_count) {\n                    r = amf_ue_sbi_discover_and_send(\n                            OGS_SBI_SERVICE_TYPE_NAUSF_AUTH, NULL,\n                            amf_nausf_auth_build_authenticate,\n                            amf_ue, 0, NULL);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n                }\n\n                OGS_FSM_TRAN(s, &gmm_state_authentication);\n            }\n            break;\n\n        case OGS_NAS_5GS_SERVICE_REQUEST:\n            ogs_info(\"Service request\");\n\n            if (state != GMM_COMMON_STATE_REGISTERED) {\n                ogs_info(\"[%s] Handling service request failed [Not registered]\",\n                            amf_ue->suci);\n                r = nas_5gs_send_service_reject(amf_ue,\n                    OGS_5GMM_CAUSE_UE_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORK);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            gmm_cause = gmm_handle_service_request(\n                    amf_ue, h, e->ngap.code, &nas_message->gmm.service_request);\n            if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                ogs_error(\"[%s] gmm_handle_service_request() failed [%d]\",\n                            amf_ue->suci, gmm_cause);\n                r = nas_5gs_send_service_reject(amf_ue, gmm_cause);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            if (!AMF_UE_HAVE_SUCI(amf_ue)) {\n                ogs_info(\"Service request : Unknown UE\");\n                r = nas_5gs_send_service_reject(amf_ue,\n                    OGS_5GMM_CAUSE_UE_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORK);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            if (!h.integrity_protected || !SECURITY_CONTEXT_IS_VALID(amf_ue)) {\n                ogs_error(\"No Security Context\");\n                r = nas_5gs_send_service_reject(amf_ue,\n                    OGS_5GMM_CAUSE_UE_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORK);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            gmm_cause = gmm_handle_service_update(\n                    amf_ue, &nas_message->gmm.service_request);\n            if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                ogs_error(\"[%s] gmm_handle_service_update() failed [%d]\",\n                            amf_ue->suci, gmm_cause);\n                r = nas_5gs_send_service_reject(amf_ue, gmm_cause);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            OGS_FSM_TRAN(s, gmm_state_registered);\n            break;\n\n        case OGS_NAS_5GS_IDENTITY_RESPONSE:\n            CLEAR_AMF_UE_TIMER(amf_ue->t3570);\n\n            ogs_info(\"Identity response\");\n            gmm_cause = gmm_handle_identity_response(amf_ue,\n                    &nas_message->gmm.identity_response);\n            if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                ogs_error(\"gmm_handle_identity_response() \"\n                            \"failed [%d] in type [%d]\",\n                            gmm_cause, amf_ue->nas.message_type);\n                r = nas_5gs_send_gmm_reject(amf_ue, gmm_cause);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            if (!AMF_UE_HAVE_SUCI(amf_ue)) {\n                ogs_error(\"No SUCI\");\n                r = nas_5gs_send_gmm_reject(amf_ue, gmm_cause);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            amf_sbi_send_release_all_sessions(\n                    amf_ue, AMF_RELEASE_SM_CONTEXT_NO_STATE);\n\n            if (!AMF_SESSION_RELEASE_PENDING(amf_ue) &&\n                amf_sess_xact_count(amf_ue) == xact_count) {\n                r = amf_ue_sbi_discover_and_send(\n                        OGS_SBI_SERVICE_TYPE_NAUSF_AUTH, NULL,\n                        amf_nausf_auth_build_authenticate,\n                        amf_ue, 0, NULL);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n\n            OGS_FSM_TRAN(s, &gmm_state_authentication);\n            break;\n\n        case OGS_NAS_5GS_5GMM_STATUS:\n            ogs_warn(\"[%s] 5GMM STATUS : Cause[%d]\", amf_ue->suci,\n                    nas_message->gmm.gmm_status.gmm_cause);\n            OGS_FSM_TRAN(s, &gmm_state_exception);\n            break;\n\n        case OGS_NAS_5GS_DEREGISTRATION_REQUEST_FROM_UE:\n            ogs_info(\"[%s] Deregistration request\", amf_ue->supi);\n\n            gmm_handle_deregistration_request(\n                    amf_ue, &nas_message->gmm.deregistration_request_from_ue);\n            OGS_FSM_TRAN(s, &gmm_state_de_registered);\n            break;\n\n        case OGS_NAS_5GS_DEREGISTRATION_ACCEPT_TO_UE:\n            ogs_info(\"[%s] Deregistration accept\", amf_ue->supi);\n            CLEAR_AMF_UE_TIMER(amf_ue->t3522);\n\n            amf_ue->explict_de_registered.n1_done = true;\n\n            if (amf_ue->explict_de_registered.sbi_done == true) {\n                r = ngap_send_ran_ue_context_release_command(amf_ue->ran_ue,\n                        NGAP_Cause_PR_misc, NGAP_CauseMisc_om_intervention,\n                        NGAP_UE_CTX_REL_UE_CONTEXT_REMOVE, 0);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            break;\n\n        case OGS_NAS_5GS_CONFIGURATION_UPDATE_COMPLETE:\n            ogs_debug(\"[%s] Configuration update complete\", amf_ue->supi);\n\n            amf_metrics_inst_global_inc(AMF_METR_GLOB_CTR_MM_CONF_UPDATE_SUCC);\n\n            /*\n             * TS24.501\n             * 5.3.3 Temporary identities\n             *\n             * The AMF shall assign a new 5G-GUTI for a particular UE:\n             *\n             * a) during a successful initial registration procedure;\n             * b) during a successful registration procedure\n             *    for mobility registration update; and\n             * c) after a successful service request procedure invoked\n             *    as a response to a paging request from the network and\n             *    before the release of the N1 NAS signalling connection\n             *    as specified in subclause 5.4.4.1.\n             *\n             * The AMF should assign a new 5G-GUTI for a particular UE\n             * during a successful registration procedure\n             * for periodic registration update.\n             *\n             * The AMF may assign a new 5G-GUTI at any time for a particular UE\n             * by performing the generic UE configuration update procedure.\n             */\n            if (amf_ue->next.m_tmsi) {\n                amf_ue_confirm_guti(amf_ue);\n            } else {\n                ogs_info(\"[%s] No GUTI allocated\", amf_ue->supi);\n            }\n\n            CLEAR_AMF_UE_TIMER(amf_ue->t3555);\n            break;\n\n        case OGS_NAS_5GS_UL_NAS_TRANSPORT:\n            if (!h.integrity_protected || !SECURITY_CONTEXT_IS_VALID(amf_ue)) {\n                ogs_error(\"No Security Context\");\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            gmm_handle_ul_nas_transport(\n                    amf_ue, &nas_message->gmm.ul_nas_transport);\n            break;\n\n        case OGS_NAS_5GS_REGISTRATION_COMPLETE:\n            ogs_error(\"[%s] Registration complete in INVALID-STATE\",\n                        amf_ue->supi);\n            break;\n\n        default:\n            ogs_error(\"Unknown message [%d]\", nas_message->gmm.h.message_type);\n        }\n        break;\n\n    default:\n        ogs_fatal(\"Unknown event[%s]\", amf_event_get_name(e));\n        ogs_assert_if_reached();\n    }\n}\n\nvoid gmm_state_authentication(ogs_fsm_t *s, amf_event_t *e)\n{\n    int r, rv;\n    ogs_nas_5gmm_cause_t gmm_cause;\n\n    amf_ue_t *amf_ue = NULL;\n    amf_sess_t *sess = NULL;\n\n    ogs_nas_5gs_message_t *nas_message = NULL;\n    ogs_nas_security_header_type_t h;\n\n    ogs_nas_5gs_authentication_failure_t *authentication_failure = NULL;\n    ogs_nas_authentication_failure_parameter_t\n        *authentication_failure_parameter = NULL;\n\n    ogs_sbi_message_t *sbi_message = NULL;\n\n    ogs_assert(s);\n    ogs_assert(e);\n\n    amf_sm_debug(e);\n\n    if (e->sess) {\n        sess = e->sess;\n        amf_ue = sess->amf_ue;\n        ogs_assert(amf_ue);\n    } else {\n        amf_ue = e->amf_ue;\n        ogs_assert(amf_ue);\n    }\n\n    switch (e->h.id) {\n    case OGS_FSM_ENTRY_SIG:\n        break;\n    case OGS_FSM_EXIT_SIG:\n        break;\n    case AMF_EVENT_5GMM_MESSAGE:\n        nas_message = e->nas.message;\n        ogs_assert(nas_message);\n\n        h.type = e->nas.type;\n\n        switch (nas_message->gmm.h.message_type) {\n        case OGS_NAS_5GS_AUTHENTICATION_RESPONSE:\n            rv = gmm_handle_authentication_response(\n                    amf_ue, &nas_message->gmm.authentication_response);\n\n            if (rv != OGS_OK) {\n                r = nas_5gs_send_authentication_reject(amf_ue);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n            }\n            break;\n\n        case OGS_NAS_5GS_AUTHENTICATION_FAILURE:\n            authentication_failure = &nas_message->gmm.authentication_failure;\n            ogs_assert(authentication_failure);\n            authentication_failure_parameter = &authentication_failure->\n                authentication_failure_parameter;\n            ogs_assert(authentication_failure_parameter);\n\n            ogs_debug(\"[%s] Authentication failure [%d]\", amf_ue->suci,\n                    authentication_failure->gmm_cause);\n\n            amf_metrics_inst_by_cause_add(authentication_failure->gmm_cause,\n                    AMF_METR_CTR_AMF_AUTH_FAIL, 1);\n\n            CLEAR_AMF_UE_TIMER(amf_ue->t3560);\n\n            switch (authentication_failure->gmm_cause) {\n            case OGS_5GMM_CAUSE_MAC_FAILURE:\n                ogs_warn(\"Authentication failure(MAC failure)\");\n                break;\n\n            case OGS_5GMM_CAUSE_NON_5G_AUTHENTICATION_UNACCEPTABLE:\n                ogs_error(\"Authentication failure\"\n                        \"(Non-5GS authentication unacceptable)\");\n                break;\n\n            case OGS_5GMM_CAUSE_NGKSI_ALREADY_IN_USE:\n                ogs_warn(\"Authentication failure(ngKSI already in use)\");\n                r = amf_ue_sbi_discover_and_send(\n                        OGS_SBI_SERVICE_TYPE_NAUSF_AUTH, NULL,\n                        amf_nausf_auth_build_authenticate,\n                        amf_ue, 0, NULL);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                return;\n\n            case OGS_5GMM_CAUSE_SYNCH_FAILURE:\n                ogs_warn(\"Authentication failure(Synch failure)\");\n                if (authentication_failure_parameter->length != OGS_AUTS_LEN) {\n                    ogs_error(\"Invalid AUTS Length [%d]\",\n                            authentication_failure_parameter->length);\n                    break;\n                }\n                r = amf_ue_sbi_discover_and_send(\n                        OGS_SBI_SERVICE_TYPE_NAUSF_AUTH, NULL,\n                        amf_nausf_auth_build_authenticate,\n                        amf_ue, 0, authentication_failure_parameter->auts);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                return;\n\n            default:\n                ogs_error(\"Unknown GMM_CAUSE{%d] in Authentication\"\n                        \" failure\",\n                        authentication_failure->gmm_cause);\n                break;\n            }\n\n            r = nas_5gs_send_authentication_reject(amf_ue);\n            ogs_expect(r == OGS_OK);\n            ogs_assert(r != OGS_ERROR);\n            OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n\n            break;\n        case OGS_NAS_5GS_REGISTRATION_REQUEST:\n            ogs_warn(\"Registration request\");\n            gmm_cause = gmm_handle_registration_request(\n                    amf_ue, h, e->ngap.code,\n                    &nas_message->gmm.registration_request);\n            if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                ogs_error(\"[%s] gmm_handle_registration_request() failed [%d]\",\n                            amf_ue->suci, gmm_cause);\n                r = nas_5gs_send_registration_reject(amf_ue, gmm_cause);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            r = amf_ue_sbi_discover_and_send(\n                    OGS_SBI_SERVICE_TYPE_NAUSF_AUTH, NULL,\n                    amf_nausf_auth_build_authenticate, amf_ue, 0, NULL);\n            ogs_expect(r == OGS_OK);\n            ogs_assert(r != OGS_ERROR);\n            break;\n\n        case OGS_NAS_5GS_5GMM_STATUS:\n            ogs_warn(\"[%s] 5GMM STATUS : Cause[%d]\",\n                    amf_ue->suci, nas_message->gmm.gmm_status.gmm_cause);\n            OGS_FSM_TRAN(s, &gmm_state_exception);\n            break;\n\n        case OGS_NAS_5GS_DEREGISTRATION_REQUEST_FROM_UE:\n            ogs_warn(\"[%s] Deregistration request\", amf_ue->supi);\n\n            gmm_handle_deregistration_request(\n                    amf_ue, &nas_message->gmm.deregistration_request_from_ue);\n            OGS_FSM_TRAN(s, &gmm_state_de_registered);\n            break;\n\n        default:\n            ogs_error(\"Unknown message[%d]\", nas_message->gmm.h.message_type);\n            break;\n        }\n        break;\n    case AMF_EVENT_5GMM_TIMER:\n        switch (e->h.timer_id) {\n        case AMF_TIMER_T3560:\n            if (amf_ue->t3560.retry_count >=\n                    amf_timer_cfg(AMF_TIMER_T3560)->max_count) {\n                ogs_warn(\"[%s] Retransmission failed. Stop retransmission\",\n                        amf_ue->suci);\n                r = nas_5gs_send_authentication_reject(amf_ue);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n            } else {\n                amf_ue->t3560.retry_count++;\n                r = nas_5gs_send_authentication_request(amf_ue);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            break;\n        default:\n            ogs_error(\"[%s] Unknown timer[%s:%d]\", amf_ue->suci,\n                    amf_timer_get_name(e->h.timer_id), e->h.timer_id);\n            break;\n        }\n        break;\n    case OGS_EVENT_SBI_CLIENT:\n        sbi_message = e->h.sbi.message;\n        ogs_assert(sbi_message);\n\n        SWITCH(sbi_message->h.service.name)\n        CASE(OGS_SBI_SERVICE_NAME_NAUSF_AUTH)\n            SWITCH(sbi_message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_UE_AUTHENTICATIONS)\n\n                if (sbi_message->res_status != OGS_SBI_HTTP_STATUS_CREATED &&\n                    sbi_message->res_status != OGS_SBI_HTTP_STATUS_OK) {\n                    if (sbi_message->res_status ==\n                            OGS_SBI_HTTP_STATUS_NOT_FOUND) {\n                        ogs_warn(\"[%s] Cannot find SUCI [%d]\",\n                            amf_ue->suci, sbi_message->res_status);\n                    } else {\n                        ogs_error(\"[%s] HTTP response error [%d]\",\n                            amf_ue->suci, sbi_message->res_status);\n                    }\n                    r = nas_5gs_send_gmm_reject_from_sbi(\n                            amf_ue, sbi_message->res_status);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n                    OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n                    break;\n                }\n\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_POST)\n                    rv = amf_nausf_auth_handle_authenticate(\n                            amf_ue, sbi_message);\n                    if (rv != OGS_OK) {\n                        ogs_error(\"[%s] Cannot handle SBI message\",\n                                amf_ue->suci);\n                        r = nas_5gs_send_authentication_reject(amf_ue);\n                        ogs_expect(r == OGS_OK);\n                        ogs_assert(r != OGS_ERROR);\n                        OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n                    }\n                    break;\n                CASE(OGS_SBI_HTTP_METHOD_PUT)\n                    rv = amf_nausf_auth_handle_authenticate_confirmation(\n                            amf_ue, sbi_message);\n                    if (rv != OGS_OK) {\n                        ogs_error(\"[%s] Cannot handle SBI message\",\n                                amf_ue->suci);\n                        r = nas_5gs_send_authentication_reject(amf_ue);\n                        ogs_expect(r == OGS_OK);\n                        ogs_assert(r != OGS_ERROR);\n                        OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n                    } else {\n                        OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_security_mode);\n                    }\n                    break;\n                DEFAULT\n                    ogs_error(\"[%s] Invalid HTTP method [%s]\",\n                            amf_ue->suci, sbi_message->h.method);\n                    ogs_assert_if_reached();\n                END\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[0]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NUDM_UECM)\n            if (sbi_message->res_status != OGS_SBI_HTTP_STATUS_CREATED &&\n                sbi_message->res_status != OGS_SBI_HTTP_STATUS_NO_CONTENT &&\n                sbi_message->res_status != OGS_SBI_HTTP_STATUS_OK) {\n                ogs_error(\"[%s] HTTP response error [%d]\",\n                        amf_ue->supi, sbi_message->res_status);\n            }\n\n            SWITCH(sbi_message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_REGISTRATIONS)\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_PUT)\n                    /*\n                     * Issue #2733\n                     *\n                     * We need to ignore this message in this state.\n                     */\n                    ogs_error(\"[%s] Ignore SBI message\", amf_ue->supi);\n                    break;\n                DEFAULT\n                    ogs_error(\"[%s] Invalid HTTP method [%s]\",\n                            amf_ue->suci, sbi_message->h.method);\n                    ogs_assert_if_reached();\n                END\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[1]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        DEFAULT\n            ogs_error(\"Invalid service name [%s]\", sbi_message->h.service.name);\n            ogs_assert_if_reached();\n        END\n        break;\n\n    default:\n        ogs_error(\"Unknown event[%s]\", amf_event_get_name(e));\n        break;\n    }\n}\n\nvoid gmm_state_security_mode(ogs_fsm_t *s, amf_event_t *e)\n{\n    int r;\n    ogs_nas_5gmm_cause_t gmm_cause;\n    amf_ue_t *amf_ue = NULL;\n    ogs_nas_5gs_message_t *nas_message = NULL;\n    ogs_nas_security_header_type_t h;\n\n    ogs_assert(s);\n    ogs_assert(e);\n\n    amf_sm_debug(e);\n\n    amf_ue = e->amf_ue;\n    ogs_assert(amf_ue);\n\n    switch (e->h.id) {\n    case OGS_FSM_ENTRY_SIG:\n        CLEAR_AMF_UE_TIMER(amf_ue->t3560);\n        r = nas_5gs_send_security_mode_command(amf_ue);\n        ogs_expect(r == OGS_OK);\n        ogs_assert(r != OGS_ERROR);\n        break;\n    case OGS_FSM_EXIT_SIG:\n        break;\n    case AMF_EVENT_5GMM_MESSAGE:\n        nas_message = e->nas.message;\n        ogs_assert(nas_message);\n\n        h.type = e->nas.type;\n\n        switch (nas_message->gmm.h.message_type) {\n        case OGS_NAS_5GS_SECURITY_MODE_COMPLETE:\n            ogs_debug(\"[%s] Security mode complete\", amf_ue->supi);\n\n        /*\n         * TS24.501\n         * Section 4.4.4.3\n         * Integrity checking of NAS signalling messages in the AMF\n         *\n         * Once the secure exchange of NAS messages has been established\n         * for the NAS signalling connection, the receiving 5GMM entity\n         * in the AMF shall not process any NAS signalling messages\n         * unless they have been successfully integrity checked by the NAS.\n         * If any NAS signalling message, having not successfully passed\n         * the integrity check, is received, then the NAS in the AMF shall\n         * discard that message. If any NAS signalling message is received,\n         * as not integrity protected even though the secure exchange\n         * of NAS messages has been established, then the NAS shall discard\n         * this message.\n         */\n            if (h.integrity_protected == 0) {\n                ogs_error(\"[%s] Security-mode : No Integrity Protected\",\n                        amf_ue->supi);\n                break;\n            }\n\n            if (!SECURITY_CONTEXT_IS_VALID(amf_ue)) {\n                ogs_error(\"[%s] No Security Context\", amf_ue->supi);\n                break;\n            }\n\n            CLEAR_AMF_UE_TIMER(amf_ue->t3560);\n\n            gmm_cause = gmm_handle_security_mode_complete(\n                    amf_ue, &nas_message->gmm.security_mode_complete);\n            if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                ogs_error(\"[%s] gmm_handle_security_mode_complete() \"\n                            \"failed [%d] in type [%d]\",\n                            amf_ue->suci, gmm_cause, amf_ue->nas.message_type);\n                r = nas_5gs_send_gmm_reject(amf_ue, gmm_cause);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            ogs_kdf_kgnb_and_kn3iwf(\n                    amf_ue->kamf, amf_ue->ul_count.i32,\n                    amf_ue->nas.access_type, amf_ue->kgnb);\n            ogs_kdf_nh_gnb(amf_ue->kamf, amf_ue->kgnb, amf_ue->nh);\n            amf_ue->nhcc = 1;\n\n            r = amf_ue_sbi_discover_and_send(\n                    OGS_SBI_SERVICE_TYPE_NUDM_UECM, NULL,\n                    amf_nudm_uecm_build_registration, amf_ue, 0, NULL);\n            ogs_expect(r == OGS_OK);\n            ogs_assert(r != OGS_ERROR);\n\n            if (amf_ue->nas.message_type == OGS_NAS_5GS_REGISTRATION_REQUEST) {\n                OGS_FSM_TRAN(s, &gmm_state_initial_context_setup);\n            } else if (amf_ue->nas.message_type ==\n                        OGS_NAS_5GS_SERVICE_REQUEST) {\n                OGS_FSM_TRAN(s, &gmm_state_registered);\n            } else {\n                ogs_fatal(\"Invalid OGS_NAS_5GS[%d]\", amf_ue->nas.message_type);\n                ogs_assert_if_reached();\n            }\n            break;\n        case OGS_NAS_5GS_SECURITY_MODE_REJECT:\n            ogs_warn(\"[%s] Security mode reject : Cause[%d]\",\n                    amf_ue->supi,\n                    nas_message->gmm.security_mode_reject.gmm_cause);\n            CLEAR_AMF_UE_TIMER(amf_ue->t3560);\n            OGS_FSM_TRAN(s, &gmm_state_exception);\n            break;\n        case OGS_NAS_5GS_REGISTRATION_REQUEST:\n            ogs_warn(\"Registration request\");\n            gmm_cause = gmm_handle_registration_request(\n                    amf_ue, h, e->ngap.code,\n                    &nas_message->gmm.registration_request);\n            if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                ogs_error(\"[%s] gmm_handle_registration_request() failed [%d]\",\n                            amf_ue->suci, gmm_cause);\n                r = nas_5gs_send_registration_reject(amf_ue, gmm_cause);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            r = amf_ue_sbi_discover_and_send(\n                    OGS_SBI_SERVICE_TYPE_NAUSF_AUTH, NULL,\n                    amf_nausf_auth_build_authenticate, amf_ue, 0, NULL);\n            ogs_expect(r == OGS_OK);\n            ogs_assert(r != OGS_ERROR);\n\n            OGS_FSM_TRAN(s, &gmm_state_authentication);\n            break;\n\n        case OGS_NAS_5GS_SERVICE_REQUEST:\n            ogs_info(\"[%s] Service request\", amf_ue->supi);\n            r = nas_5gs_send_service_reject(amf_ue,\n                    OGS_5GMM_CAUSE_UE_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORK);\n            ogs_expect(r == OGS_OK);\n            ogs_assert(r != OGS_ERROR);\n            OGS_FSM_TRAN(s, &gmm_state_exception);\n            break;\n\n        case OGS_NAS_5GS_5GMM_STATUS:\n            ogs_warn(\"[%s] 5GMM STATUS : Cause[%d]\",\n                    amf_ue->supi, nas_message->gmm.gmm_status.gmm_cause);\n            OGS_FSM_TRAN(s, &gmm_state_exception);\n            break;\n\n        case OGS_NAS_5GS_DEREGISTRATION_REQUEST_FROM_UE:\n            ogs_warn(\"[%s] Deregistration request\", amf_ue->supi);\n\n            gmm_handle_deregistration_request(\n                    amf_ue, &nas_message->gmm.deregistration_request_from_ue);\n            OGS_FSM_TRAN(s, &gmm_state_de_registered);\n            break;\n\n        default:\n            ogs_error(\"Unknown message[%d]\", nas_message->gmm.h.message_type);\n            break;\n        }\n        break;\n    case AMF_EVENT_5GMM_TIMER:\n        switch (e->h.timer_id) {\n        case AMF_TIMER_T3560:\n            if (amf_ue->t3560.retry_count >=\n                    amf_timer_cfg(AMF_TIMER_T3560)->max_count) {\n                ogs_warn(\"[%s] Retransmission failed. Stop\", amf_ue->supi);\n                r = nas_5gs_send_gmm_reject(amf_ue,\n                        OGS_5GMM_CAUSE_SECURITY_MODE_REJECTED_UNSPECIFIED);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n            } else {\n                amf_ue->t3560.retry_count++;\n                r = nas_5gs_send_security_mode_command(amf_ue);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            break;\n        default:\n            ogs_error(\"Unknown timer[%s:%d]\",\n                    amf_timer_get_name(e->h.timer_id), e->h.timer_id);\n            break;\n        }\n        break;\n    default:\n        ogs_error(\"Unknown event[%s]\", amf_event_get_name(e));\n        break;\n    }\n}\n\nvoid gmm_state_initial_context_setup(ogs_fsm_t *s, amf_event_t *e)\n{\n    int rv, r, state, xact_count = 0;\n    ogs_nas_5gmm_cause_t gmm_cause;\n\n    amf_ue_t *amf_ue = NULL;\n    amf_sess_t *sess = NULL;\n    ogs_nas_5gs_message_t *nas_message = NULL;\n    ogs_nas_security_header_type_t h;\n\n    ogs_sbi_message_t *sbi_message = NULL;\n\n    gmm_configuration_update_command_param_t param;\n\n    ogs_assert(s);\n    ogs_assert(e);\n\n    amf_sm_debug(e);\n\n    if (e->sess) {\n        sess = e->sess;\n        amf_ue = sess->amf_ue;\n        ogs_assert(amf_ue);\n    } else {\n        amf_ue = e->amf_ue;\n        ogs_assert(amf_ue);\n    }\n\n    switch (e->h.id) {\n    case OGS_FSM_ENTRY_SIG:\n        break;\n    case OGS_FSM_EXIT_SIG:\n        break;\n\n    case OGS_EVENT_SBI_CLIENT:\n        sbi_message = e->h.sbi.message;\n        ogs_assert(sbi_message);\n        state = e->h.sbi.state;\n\n        SWITCH(sbi_message->h.service.name)\n        CASE(OGS_SBI_SERVICE_NAME_NUDM_UECM)\n\n            SWITCH(sbi_message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_REGISTRATIONS)\n                if (sbi_message->res_status != OGS_SBI_HTTP_STATUS_CREATED &&\n                    sbi_message->res_status != OGS_SBI_HTTP_STATUS_NO_CONTENT &&\n                    sbi_message->res_status != OGS_SBI_HTTP_STATUS_OK) {\n                    ogs_error(\"[%s] HTTP response error [%d]\",\n                            amf_ue->supi, sbi_message->res_status);\n                    r = nas_5gs_send_gmm_reject(\n                            amf_ue, OGS_5GMM_CAUSE_5GS_SERVICES_NOT_ALLOWED);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n                    OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n                    break;\n                }\n\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_PUT)\n                    r = amf_ue_sbi_discover_and_send(\n                            OGS_SBI_SERVICE_TYPE_NUDM_SDM, NULL,\n                            amf_nudm_sdm_build_get,\n                            amf_ue, state,\n                            (char *)OGS_SBI_RESOURCE_NAME_AM_DATA);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n                    break;\n\n                DEFAULT\n                    ogs_error(\"[%s] Invalid HTTP method [%s]\",\n                            amf_ue->suci, sbi_message->h.method);\n                    ogs_assert_if_reached();\n                END\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[1]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NUDM_SDM)\n\n            SWITCH(sbi_message->h.resource.component[1])\n            CASE(OGS_SBI_RESOURCE_NAME_AM_DATA)\n            CASE(OGS_SBI_RESOURCE_NAME_SMF_SELECT_DATA)\n            CASE(OGS_SBI_RESOURCE_NAME_UE_CONTEXT_IN_SMF_DATA)\n            CASE(OGS_SBI_RESOURCE_NAME_SDM_SUBSCRIPTIONS)\n                if ((sbi_message->res_status != OGS_SBI_HTTP_STATUS_OK) &&\n                    (sbi_message->res_status != OGS_SBI_HTTP_STATUS_CREATED)) {\n                    ogs_error(\"[%s] HTTP response error [%d]\",\n                            amf_ue->supi, sbi_message->res_status);\n                    r = nas_5gs_send_gmm_reject(\n                            amf_ue, OGS_5GMM_CAUSE_5GS_SERVICES_NOT_ALLOWED);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n                    OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n                    break;\n                }\n\n                rv = amf_nudm_sdm_handle_provisioned(\n                        amf_ue, state, sbi_message);\n                if (rv != OGS_OK) {\n                    ogs_error(\"[%s] amf_nudm_sdm_handle_provisioned(%s) failed\",\n                            amf_ue->supi, sbi_message->h.resource.component[1]);\n                    OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n                    break;\n                }\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[1]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        CASE(OGS_SBI_SERVICE_NAME_NPCF_AM_POLICY_CONTROL)\n            SWITCH(sbi_message->h.resource.component[0])\n            CASE(OGS_SBI_RESOURCE_NAME_POLICIES)\n                SWITCH(sbi_message->h.method)\n                CASE(OGS_SBI_HTTP_METHOD_POST)\n                    rv = amf_npcf_am_policy_control_handle_create(\n                            amf_ue, sbi_message);\n                    if (rv != OGS_OK) {\n                        ogs_error(\"[%s] amf_npcf_am_policy_control\"\n                                \"_handle_create() failed\", amf_ue->supi);\n                        OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n                        break;\n                    }\n\n                    ogs_assert(amf_ue->nas.message_type ==\n                            OGS_NAS_5GS_REGISTRATION_REQUEST);\n                    CLEAR_AMF_UE_TIMER(amf_ue->t3550);\n                    r = nas_5gs_send_registration_accept(amf_ue);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n\n                    /* In nsmf-handler.c\n                     *\n                     * 1. AMF_SESS_STORE_N2_TRANSFER\n                     * 2. if PCF_AM_POLICY is NOT associated\n                     * 3. AMF sends npcf-am-policy-control/create to PCF\n                     *\n                     * In gmm-sm.c\n                     * 4. Send Registration Accept\n                     * 5. We should clear N2 transfer\n                     *    (PDUSessionResourceSetupRequest)\n                     */\n                    AMF_UE_CLEAR_N2_TRANSFER(\n                            amf_ue, pdu_session_resource_setup_request);\n\n                    if (!amf_ue->next.m_tmsi)\n                        OGS_FSM_TRAN(s, &gmm_state_registered);\n                    break;\n\n                DEFAULT\n                    ogs_error(\"Unknown method [%s]\", sbi_message->h.method);\n                    ogs_assert_if_reached();\n                END\n                break;\n\n            DEFAULT\n                ogs_error(\"Invalid resource name [%s]\",\n                        sbi_message->h.resource.component[0]);\n                ogs_assert_if_reached();\n            END\n            break;\n\n        DEFAULT\n            ogs_error(\"Invalid service name [%s]\", sbi_message->h.service.name);\n            ogs_assert_if_reached();\n        END\n        break;\n\n    case AMF_EVENT_5GMM_MESSAGE:\n        nas_message = e->nas.message;\n        ogs_assert(nas_message);\n\n        h.type = e->nas.type;\n\n        xact_count = amf_sess_xact_count(amf_ue);\n\n        switch (nas_message->gmm.h.message_type) {\n        case OGS_NAS_5GS_REGISTRATION_COMPLETE:\n            ogs_info(\"[%s] Registration complete\", amf_ue->supi);\n\n            CLEAR_AMF_UE_TIMER(amf_ue->t3550);\n\n            /*\n             * TS24.501\n             * 5.3.3 Temporary identities\n             *\n             * The AMF shall assign a new 5G-GUTI for a particular UE:\n             *\n             * a) during a successful initial registration procedure;\n             * b) during a successful registration procedure\n             *    for mobility registration update; and\n             * c) after a successful service request procedure invoked\n             *    as a response to a paging request from the network and\n             *    before the release of the N1 NAS signalling connection\n             *    as specified in subclause 5.4.4.1.\n             *\n             * The AMF should assign a new 5G-GUTI for a particular UE\n             * during a successful registration procedure\n             * for periodic registration update.\n             *\n             * The AMF may assign a new 5G-GUTI at any time for a particular UE\n             * by performing the generic UE configuration update procedure.\n             */\n            if (amf_ue->next.m_tmsi) {\n                amf_ue_confirm_guti(amf_ue);\n            } else {\n                ogs_error(\"[%s] No GUTI allocated\", amf_ue->supi);\n            }\n\n            /*\n             * TS24.501\n             * 5.4.4.2 Generic UE configuration update procedure initiated\n             *         by the network\n             *\n             * If an acknowledgement from the UE is requested, the AMF shall\n             * indicate acknowledgement requested in the Configuration update\n             * indication IE in the CONFIGURATION UPDATE COMMAND message and\n             * shall start timer T3555. Acknowledgement shall be requested\n             * for all parameters except when only NITZ is included.\n             *\n             * TS23.502\n             * 4.2.4.2 UE Configuration Update procedure for access and\n             * mobility management related parameters\n             *\n             * The AMF includes one or more of 5G-GUTI, TAI List,\n             * Allowed NSSAI, Mapping Of Allowed NSSAI, Configured NSSAI\n             * for the Serving PLMN, Mapping Of Configured NSSAI,\n             * rejected S-NSSAIs, NITZ (Network Identity and Time Zone),\n             * Mobility Restrictions parameters, LADN Information,\n             * Operator-defined access category definitions or SMS Subscribed\n             * Indication if the AMF wants to update these NAS parameters\n             * without triggering a UE Registration procedure.\n             */\n            memset(&param, 0, sizeof(param));\n            param.nitz = 1;\n            r = nas_5gs_send_configuration_update_command(amf_ue, &param);\n            ogs_expect(r == OGS_OK);\n            ogs_assert(r != OGS_ERROR);\n\n            switch (amf_ue->nas.registration.value) {\n            case OGS_NAS_5GS_REGISTRATION_TYPE_INITIAL:\n                amf_metrics_inst_global_inc(AMF_METR_GLOB_CTR_RM_REG_INIT_SUCC);\n                break;\n            case OGS_NAS_5GS_REGISTRATION_TYPE_MOBILITY_UPDATING:\n                amf_metrics_inst_global_inc(AMF_METR_GLOB_CTR_RM_REG_MOB_SUCC);\n                break;\n            case OGS_NAS_5GS_REGISTRATION_TYPE_PERIODIC_UPDATING:\n                amf_metrics_inst_global_inc(AMF_METR_GLOB_CTR_RM_REG_PERIOD_SUCC);\n                break;\n            case OGS_NAS_5GS_REGISTRATION_TYPE_EMERGENCY:\n                amf_metrics_inst_global_inc(AMF_METR_GLOB_CTR_RM_REG_EMERG_SUCC);\n                break;\n            default:\n                ogs_error(\"Unknown reg_type[%d]\",\n                        amf_ue->nas.registration.value);\n            }\n            OGS_FSM_TRAN(s, &gmm_state_registered);\n            break;\n\n        case OGS_NAS_5GS_REGISTRATION_REQUEST:\n            ogs_warn(\"Registration request\");\n            gmm_cause = gmm_handle_registration_request(\n                    amf_ue, h, e->ngap.code,\n                    &nas_message->gmm.registration_request);\n            if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                ogs_error(\"[%s] gmm_handle_registration_request() failed [%d]\",\n                            amf_ue->suci, gmm_cause);\n                r = nas_5gs_send_registration_reject(amf_ue, gmm_cause);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            amf_sbi_send_release_all_sessions(\n                    amf_ue, AMF_RELEASE_SM_CONTEXT_NO_STATE);\n\n            if (!AMF_SESSION_RELEASE_PENDING(amf_ue) &&\n                amf_sess_xact_count(amf_ue) == xact_count) {\n                r = amf_ue_sbi_discover_and_send(\n                        OGS_SBI_SERVICE_TYPE_NAUSF_AUTH, NULL,\n                        amf_nausf_auth_build_authenticate,\n                        amf_ue, 0, NULL);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            OGS_FSM_TRAN(s, &gmm_state_authentication);\n            break;\n\n        case OGS_NAS_5GS_SERVICE_REQUEST:\n            ogs_info(\"[%s] Service request\", amf_ue->supi);\n            r = nas_5gs_send_service_reject(amf_ue,\n                OGS_5GMM_CAUSE_UE_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORK);\n            ogs_expect(r == OGS_OK);\n            ogs_assert(r != OGS_ERROR);\n            OGS_FSM_TRAN(s, &gmm_state_exception);\n            break;\n\n        case OGS_NAS_5GS_5GMM_STATUS:\n            ogs_warn(\"[%s] 5GMM STATUS : Cause[%d]\",\n                    amf_ue->supi, nas_message->gmm.gmm_status.gmm_cause);\n            OGS_FSM_TRAN(s, &gmm_state_exception);\n            break;\n\n        case OGS_NAS_5GS_DEREGISTRATION_REQUEST_FROM_UE:\n            ogs_warn(\"[%s] Deregistration request\", amf_ue->supi);\n\n            gmm_handle_deregistration_request(\n                    amf_ue, &nas_message->gmm.deregistration_request_from_ue);\n            OGS_FSM_TRAN(s, &gmm_state_de_registered);\n            break;\n\n        default:\n            ogs_error(\"Unknown message [%d]\", nas_message->gmm.h.message_type);\n            break;\n        }\n        break;\n    case AMF_EVENT_5GMM_TIMER:\n        switch (e->h.timer_id) {\n        case AMF_TIMER_T3550:\n            if (amf_ue->t3550.retry_count >=\n                    amf_timer_cfg(AMF_TIMER_T3550)->max_count) {\n                ogs_warn(\"[%s] Retransmission failed. Stop retransmission\",\n                        amf_ue->suci);\n                OGS_FSM_TRAN(&amf_ue->sm, &gmm_state_exception);\n            } else {\n                amf_ue->t3550.retry_count++;\n                r = nas_5gs_send_registration_accept(amf_ue);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n            }\n            break;\n        default:\n            ogs_error(\"[%s] Unknown timer[%s:%d]\", amf_ue->suci,\n                    amf_timer_get_name(e->h.timer_id), e->h.timer_id);\n            break;\n        }\n        break;\n    default:\n        ogs_error(\"Unknown event[%s]\", amf_event_get_name(e));\n        break;\n    }\n}\n\nvoid gmm_state_ue_context_will_remove(ogs_fsm_t *s, amf_event_t *e)\n{\n    amf_ue_t *amf_ue = NULL;\n    amf_sess_t *sess = NULL;\n\n    ogs_assert(s);\n    ogs_assert(e);\n\n    amf_sm_debug(e);\n\n    if (e->sess) {\n        sess = e->sess;\n        amf_ue = sess->amf_ue;\n        ogs_assert(amf_ue);\n    } else {\n        amf_ue = e->amf_ue;\n        ogs_assert(amf_ue);\n    }\n\n    switch (e->h.id) {\n    case OGS_FSM_ENTRY_SIG:\n        amf_ue_remove(amf_ue);\n        break;\n\n    case OGS_FSM_EXIT_SIG:\n        break;\n\n    default:\n        ogs_error(\"Unknown event[%s]\", amf_event_get_name(e));\n    }\n}\n\nvoid gmm_state_exception(ogs_fsm_t *s, amf_event_t *e)\n{\n    int xact_count = 0, r;\n    ogs_nas_5gmm_cause_t gmm_cause;\n\n    amf_ue_t *amf_ue = NULL;\n    amf_sess_t *sess = NULL;\n    ran_ue_t *ran_ue = NULL;\n    ogs_nas_5gs_message_t *nas_message = NULL;\n    ogs_nas_security_header_type_t h;\n\n    ogs_assert(s);\n    ogs_assert(e);\n\n    amf_sm_debug(e);\n\n    if (e->sess) {\n        sess = e->sess;\n        amf_ue = sess->amf_ue;\n        ogs_assert(amf_ue);\n    } else {\n        amf_ue = e->amf_ue;\n        ogs_assert(amf_ue);\n    }\n\n    switch (e->h.id) {\n    case OGS_FSM_ENTRY_SIG:\n        AMF_UE_CLEAR_PAGING_INFO(amf_ue);\n        AMF_UE_CLEAR_N2_TRANSFER(amf_ue, pdu_session_resource_setup_request);\n        AMF_UE_CLEAR_5GSM_MESSAGE(amf_ue);\n        CLEAR_AMF_UE_ALL_TIMERS(amf_ue);\n\n        xact_count = amf_sess_xact_count(amf_ue);\n\n        amf_sbi_send_release_all_sessions(\n                amf_ue, AMF_RELEASE_SM_CONTEXT_NO_STATE);\n\n        if (!AMF_SESSION_RELEASE_PENDING(amf_ue) &&\n            amf_sess_xact_count(amf_ue) == xact_count) {\n            r = ngap_send_amf_ue_context_release_command(amf_ue,\n                    NGAP_Cause_PR_nas, NGAP_CauseNas_normal_release,\n                    NGAP_UE_CTX_REL_UE_CONTEXT_REMOVE, 0);\n            ogs_expect(r == OGS_OK);\n            ogs_assert(r != OGS_ERROR);\n        }\n        break;\n    case OGS_FSM_EXIT_SIG:\n        break;\n\n    case AMF_EVENT_5GMM_MESSAGE:\n        nas_message = e->nas.message;\n        ogs_assert(nas_message);\n\n        ran_ue = ran_ue_cycle(amf_ue->ran_ue);\n        ogs_assert(ran_ue);\n\n        h.type = e->nas.type;\n\n        xact_count = amf_sess_xact_count(amf_ue);\n\n        switch (nas_message->gmm.h.message_type) {\n        case OGS_NAS_5GS_REGISTRATION_REQUEST:\n            ogs_info(\"Registration request\");\n            gmm_cause = gmm_handle_registration_request(\n                    amf_ue, h, e->ngap.code,\n                    &nas_message->gmm.registration_request);\n            if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                ogs_error(\"gmm_handle_registration_request() failed [%d]\",\n                            gmm_cause);\n                r = nas_5gs_send_registration_reject(amf_ue, gmm_cause);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n                OGS_FSM_TRAN(s, gmm_state_exception);\n                break;\n            }\n\n            if (!AMF_UE_HAVE_SUCI(amf_ue)) {\n                CLEAR_AMF_UE_TIMER(amf_ue->t3570);\n                r = nas_5gs_send_identity_request(amf_ue);\n                ogs_expect(r == OGS_OK);\n                ogs_assert(r != OGS_ERROR);\n\n                OGS_FSM_TRAN(s, &gmm_state_de_registered);\n                break;\n            }\n\n            if (h.integrity_protected && SECURITY_CONTEXT_IS_VALID(amf_ue)) {\n\n                gmm_cause = gmm_handle_registration_update(\n                        amf_ue, &nas_message->gmm.registration_request);\n                if (gmm_cause != OGS_5GMM_CAUSE_REQUEST_ACCEPTED) {\n                    ogs_error(\"[%s] gmm_handle_registration_update() \"\n                                \"failed [%d]\", amf_ue->suci, gmm_cause);\n                    r = nas_5gs_send_registration_reject(amf_ue, gmm_cause);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n                    OGS_FSM_TRAN(s, gmm_state_exception);\n                    break;\n                }\n\n                if (amf_sess_xact_count(amf_ue) == xact_count) {\n\n                    if (amf_update_allowed_nssai(amf_ue) == false) {\n                        ogs_error(\"No Allowed-NSSAI\");\n                        r = nas_5gs_send_gmm_reject(\n                                amf_ue,\n                                OGS_5GMM_CAUSE_NO_NETWORK_SLICES_AVAILABLE);\n                        ogs_expect(r == OGS_OK);\n                        ogs_assert(r != OGS_ERROR);\n                        OGS_FSM_TRAN(s, gmm_state_exception);\n                        break;\n                    }\n\n                    if (!PCF_AM_POLICY_ASSOCIATED(amf_ue)) {\n                        r = amf_ue_sbi_discover_and_send(\n                                OGS_SBI_SERVICE_TYPE_NPCF_AM_POLICY_CONTROL,\n                                NULL,\n                                amf_npcf_am_policy_control_build_create,\n                                amf_ue, 0, NULL);\n                        ogs_expect(r == OGS_OK);\n                        ogs_assert(r != OGS_ERROR);\n                        OGS_FSM_TRAN(s, &gmm_state_initial_context_setup);\n                        break;\n                    }\n\n                    CLEAR_AMF_UE_TIMER(amf_ue->t3550);\n                    r = nas_5gs_send_registration_accept(amf_ue);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n                }\n\n                if (amf_ue->next.m_tmsi)\n                    OGS_FSM_TRAN(s, &gmm_state_initial_context_setup);\n                else\n                    OGS_FSM_TRAN(s, &gmm_state_registered);\n\n            } else {\n\n                amf_sbi_send_release_all_sessions(\n                        amf_ue, AMF_RELEASE_SM_CONTEXT_NO_STATE);\n\n                if (!AMF_SESSION_RELEASE_PENDING(amf_ue) &&\n                    amf_sess_xact_count(amf_ue) == xact_count) {\n                    r = amf_ue_sbi_discover_and_send(\n                            OGS_SBI_SERVICE_TYPE_NAUSF_AUTH, NULL,\n                            amf_nausf_auth_build_authenticate,\n                            amf_ue, 0, NULL);\n                    ogs_expect(r == OGS_OK);\n                    ogs_assert(r != OGS_ERROR);\n                }\n\n                OGS_FSM_TRAN(s, &gmm_state_authentication);\n            }\n            break;\n\n        default:\n            ogs_error(\"Unknown message [%d]\", nas_message->gmm.h.message_type);\n        }\n        break;\n\n    default:\n        ogs_error(\"Unknown event[%s]\", amf_event_get_name(e));\n    }\n}\n"], "filenames": ["src/amf/gmm-sm.c"], "buggy_code_start_loc": [1718], "buggy_code_end_loc": [1718], "fixing_code_start_loc": [1719], "fixing_code_end_loc": [1752], "type": "CWE-755", "message": "An issue was discovered in open5gs v2.6.6. InitialUEMessage, Registration request sent at a specific time can crash AMF due to incorrect error handling of Nudm_UECM_Registration response.", "other": {"cve": {"id": "CVE-2023-50019", "sourceIdentifier": "cve@mitre.org", "published": "2024-01-02T22:15:09.147", "lastModified": "2024-01-11T17:28:54.257", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in open5gs v2.6.6. InitialUEMessage, Registration request sent at a specific time can crash AMF due to incorrect error handling of Nudm_UECM_Registration response."}, {"lang": "es", "value": "Se descubri\u00f3 un problema en open5gs v2.6.6. InitialUEMessage, la solicitud de registro enviada en un momento espec\u00edfico puede bloquear AMF debido a un manejo incorrecto de errores de la respuesta Nudm_UECM_Registration."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-755"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:open5gs:open5gs:2.6.6:*:*:*:*:*:*:*", "matchCriteriaId": "27AA61AC-D4A0-40B4-8965-E578FC5F8D03"}]}]}], "references": [{"url": "https://github.com/open5gs/open5gs/commit/7278714133422cee46c32c7523f81ec2cecad9e2", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/open5gs/open5gs/issues/2733", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/open5gs/open5gs/commit/7278714133422cee46c32c7523f81ec2cecad9e2"}}