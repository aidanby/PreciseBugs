{"buggy_code": ["<?php\n# MantisBT - A PHP based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Filter print helper functions API\n *\n * @package CoreAPI\n * @subpackage FilterAPI\n * @copyright Copyright 2016  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n * @link http://www.mantisbt.org\n *\n * @uses access_api.php\n * @uses authentication_api.php\n * @uses config_api.php\n * @uses constant_inc.php\n * @uses current_user_api.php\n * @uses filter_api.php\n * @uses filter_constants_inc.php\n * @uses gpc_api.php\n * @uses helper_api.php\n * @uses html_api.php\n * @uses lang_api.php\n * @uses logging_api.php\n * @uses print_api.php\n * @uses relationship_api.php\n * @uses string_api.php\n * @uses user_api.php\n */\n\nrequire_api( 'access_api.php' );\nrequire_api( 'authentication_api.php' );\nrequire_api( 'config_api.php' );\nrequire_api( 'constant_inc.php' );\nrequire_api( 'current_user_api.php' );\nrequire_api( 'filter_api.php' );\nrequire_api( 'filter_constants_inc.php' );\nrequire_api( 'gpc_api.php' );\nrequire_api( 'helper_api.php' );\nrequire_api( 'html_api.php' );\nrequire_api( 'lang_api.php' );\nrequire_api( 'logging_api.php' );\nrequire_api( 'print_api.php' );\nrequire_api( 'relationship_api.php' );\nrequire_api( 'string_api.php' );\nrequire_api( 'user_api.php' );\n\n\n/**\n * @internal The following functions each print out filter field inputs.\n *      They are derived from view_filters_page.php\n *      The functions follow a strict naming convention:\n *\n * \t\tprint_filter_[filter_name]\n *\n *      Where [filter_name] is the same as the \"name\" of the form element for\n *      that filter. This naming convention is depended upon by the controller\n *      at the end of the script.\n *\n * @todo print functions should be abstracted.  Many of these functions\n *      are virtually identical except for the property name.\n *      Perhaps this code could be made simpler by refactoring into a\n *      class so as to avoid all those calls to global(which are pretty ugly)\n *      These functions could also be shared by view_filters_page.php\n */\n\n/**\n * Returns HTML for each filter field, to be used in filter form.\n * $p_filter_target is a field name to match any of \"the print_filter_...\" functions,\n * excluding those related to custom fields and plugin fields.\n * When $p_show_options is enabled, the form inputs are returned to allow selection,\n * if the option is disabled, returns the current value and a hidden input for that value.\n * @param array $p_filter Filter array\n * @param string $p_filter_target Filter field name\n * @param boolean $p_show_inputs True to return a visible form input or false for a text value.\n * @return string The html content for the field requested\n */\nfunction filter_form_get_input( array $p_filter, $p_filter_target, $p_show_inputs = true ) {\n\tif( $p_show_inputs ) {\n\t\t$t_function_prefix = 'print_filter_';\n\t} else {\n\t\t$t_function_prefix = 'print_filter_values_';\n\t}\n\t$t_params = array( $p_filter );\n\t$t_function_name = $t_function_prefix . $p_filter_target;\n\n\t# override non standard calls\n\tswitch( $p_filter_target ) {\n\t\tcase 'do_filter_by_date':\n\t\tcase 'do_filter_by_last_updated_date':\n\t\t\tif( $p_show_inputs ) {\n\t\t\t\t$t_params = array( false, $p_filter );\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\tif( function_exists( $t_function_name ) ) {\n\t\tob_start();\n\t\tcall_user_func_array( $t_function_name, $t_params );\n\t\treturn ob_get_clean();\n\t} else {\n\t\t# error - no function to populate the target (e.g., print_filter_foo)\n\t\terror_parameters( $p_filter_target );\n\t\ttrigger_error( ERROR_FILTER_NOT_FOUND, ERROR );\n\t\treturn false;\n\t}\n}\n\n\n/**\n * Return the input modifier to be used for advanced filters.\n * @param array $p_filter\tFilter array to use\n * @return string\n */\nfunction filter_select_modifier( array $p_filter ) {\n\tif( FILTER_VIEW_TYPE_ADVANCED == $p_filter['_view_type'] ) {\n\t\treturn ' multiple=\"multiple\" size=\"10\"';\n\t} else {\n\t\treturn '';\n\t}\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_values_reporter_id( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_REPORTER_ID] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_REPORTER_ID] as $t_current ) {\n\t\t\t$t_this_name = '';\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_REPORTER_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else if( filter_field_is_myself( $t_current ) ) {\n\t\t\t\tif( access_has_project_level( config_get( 'report_bug_threshold' ) ) ) {\n\t\t\t\t\t$t_this_name = '[' . lang_get( 'myself' ) . ']';\n\t\t\t\t} else {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t}\n\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t$t_this_name = lang_get( 'none' );\n\t\t\t} else {\n\t\t\t\t$t_this_name = user_get_name( $t_current );\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_name );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n/**\n * Print the reporter field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_reporter_id( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?>\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_REPORTER_ID;?>[]\">\n\t\t<?php\n\t# if current user is a reporter, and limited reports set to ON, only display that name\n\t# @@@ thraxisp - access_has_project_level checks greater than or equal to,\n\t#   this assumed that there aren't any holes above REPORTER where the limit would apply\n\t#\n\tif( ( ON === config_get( 'limit_reporters' ) ) && ( !access_has_project_level( access_threshold_min_level( config_get( 'report_bug_threshold' ) ) + 1 ) ) ) {\n\t\t$t_id = auth_get_current_user_id();\n\t\t$t_username = user_get_name( $t_id );\n\t\t$t_display_name = string_attribute( $t_username );\n\t\techo '<option value=\"' . $t_id . '\" selected=\"selected\">' . $t_display_name . '</option>';\n\t} else {\n\t\t?>\n\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_REPORTER_ID], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t<?php\n\t\t\tif( access_has_project_level( config_get( 'report_bug_threshold' ) ) ) {\n\t\t\t\techo '<option value=\"' . META_FILTER_MYSELF . '\" ';\n\t\t\t\tcheck_selected( $p_filter[FILTER_PROPERTY_REPORTER_ID], META_FILTER_MYSELF );\n\t\t\t\techo '>[' . lang_get( 'myself' ) . ']</option>';\n\t\t\t}\n\t\tprint_reporter_option_list( $p_filter[FILTER_PROPERTY_REPORTER_ID] );\n\t}?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_user_monitor( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\t$t_none_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_MONITOR_USER_ID] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_MONITOR_USER_ID] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_MONITOR_USER_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_name = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t$t_none_found = true;\n\t\t\t} else if( filter_field_is_myself( $t_current ) ) {\n\t\t\t\tif( access_has_project_level( config_get( 'monitor_bug_threshold' ) ) ) {\n\t\t\t\t\t$t_this_name = '[' . lang_get( 'myself' ) . ']';\n\t\t\t\t} else {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$t_this_name = user_get_name( $t_current );\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_name );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else if( true == $t_none_found ) {\n\t\t\techo lang_get( 'none' );\n\t\t} else {\n\t\t\techo string_display( $t_output );\n\t\t}\n\t}\n}\n\n/**\n * Print the user monitor field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_user_monitor( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?>\n\t<!-- Monitored by -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_MONITOR_USER_ID;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_MONITOR_USER_ID], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_MONITOR_USER_ID], META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php\n\t\t\t\tif( access_has_project_level( config_get( 'monitor_bug_threshold' ) ) ) {\n\t\techo '<option value=\"' . META_FILTER_MYSELF . '\" ';\n\t\tcheck_selected( $p_filter[FILTER_PROPERTY_MONITOR_USER_ID], META_FILTER_MYSELF );\n\t\techo '>[' . lang_get( 'myself' ) . ']</option>';\n\t}\n\t$t_threshold = config_get( 'show_monitor_list_threshold' );\n\n\tif( access_has_project_level( $t_threshold ) ) {\n\t\tprint_user_option_list( $p_filter[FILTER_PROPERTY_MONITOR_USER_ID], null, config_get( 'monitor_bug_threshold' ) );\n\t}\n\t?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_handler_id( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_HANDLER_ID] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_HANDLER_ID] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_HANDLER_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_name = '';\n\t\t\tif( filter_field_is_none( $t_current ) ) {\n\t\t\t\t$t_this_name = lang_get( 'none' );\n\t\t\t} else if( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else if( filter_field_is_myself( $t_current ) ) {\n\t\t\t\tif( access_has_project_level( config_get( 'handle_bug_threshold' ) ) ) {\n\t\t\t\t\t$t_this_name = '[' . lang_get( 'myself' ) . ']';\n\t\t\t\t} else {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$t_this_name = user_get_name( $t_current );\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_name );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo string_display( $t_output );\n\t\t}\n\t}\n}\n\n/**\n * print the handler field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_handler_id( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?>\n\t\t<!-- Handler -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_HANDLER_ID;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_HANDLER_ID], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php if( access_has_project_level( config_get( 'view_handler_threshold' ) ) ) {?>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_HANDLER_ID], META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php\n\t\t\t\tif( access_has_project_level( config_get( 'handle_bug_threshold' ) ) ) {\n\t\t\techo '<option value=\"' . META_FILTER_MYSELF . '\" ';\n\t\t\tcheck_selected( $p_filter[FILTER_PROPERTY_HANDLER_ID], META_FILTER_MYSELF );\n\t\t\techo '>[' . lang_get( 'myself' ) . ']</option>';\n\t\t}\n\n\t\tprint_assign_to_option_list( $p_filter[FILTER_PROPERTY_HANDLER_ID] );\n\t}?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_category( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\t$t_none_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_CATEGORY_ID] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_CATEGORY_ID] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_CATEGORY_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} elseif( filter_field_is_none( $t_current ) ) {\n\t\t\t\t$t_none_found = true;\n\t\t\t} else {\n\t\t\t\t$t_this_string = $t_current;\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} elseif( true == $t_none_found ) {\n\t\t\techo lang_get( 'none' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n/**\n * print the category field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_category( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?>\n\t\t<!-- Category -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_CATEGORY_ID;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_CATEGORY_ID], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_CATEGORY_ID], (string)META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php print_category_filter_option_list( $p_filter[FILTER_PROPERTY_CATEGORY_ID] )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_platform( array $p_filter ) {\n\tprint_multivalue_field( FILTER_PROPERTY_PLATFORM, $p_filter[FILTER_PROPERTY_PLATFORM] );\n}\n\n/**\n * print the platform field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_platform( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?>\n\t\t<!-- Platform -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_PLATFORM;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_PLATFORM], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php\n\t\t\t\tlog_event( LOG_FILTERING, 'Platform = ' . var_export( $p_filter[FILTER_PROPERTY_PLATFORM], true ) );\n\tprint_platform_option_list( $p_filter[FILTER_PROPERTY_PLATFORM] );\n\t?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_os( array $p_filter ) {\n\tprint_multivalue_field( FILTER_PROPERTY_OS, $p_filter[FILTER_PROPERTY_OS] );\n}\n\n/**\n * print the os field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_os( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?>\n\t\t<!-- OS -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_OS;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_OS], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php print_os_option_list( $p_filter[FILTER_PROPERTY_OS] )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_os_build( array $p_filter ) {\n\tprint_multivalue_field( FILTER_PROPERTY_OS_BUILD, $p_filter[FILTER_PROPERTY_OS_BUILD] );\n}\n\n/**\n * print the os build field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_os_build( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?>\n\t\t<!-- OS Build -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_OS_BUILD;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_OS_BUILD], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php print_os_build_option_list( $p_filter[FILTER_PROPERTY_OS_BUILD] )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_severity( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_SEVERITY] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_SEVERITY] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_SEVERITY, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else {\n\t\t\t\t$t_this_string = get_enum_element( 'severity', $t_current );\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n/**\n * print the severity field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_severity( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Severity -->\n\t\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_SEVERITY;?>[]\">\n\t\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_SEVERITY], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t\t<?php print_enum_string_option_list( 'severity', $p_filter[FILTER_PROPERTY_SEVERITY] )?>\n\t\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_resolution( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_RESOLUTION] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_RESOLUTION] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_RESOLUTION, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else {\n\t\t\t\t$t_this_string = get_enum_element( 'resolution', $t_current );\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n/**\n * print resolution field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_resolution( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Resolution -->\n\t\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_RESOLUTION;?>[]\">\n\t\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_RESOLUTION], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t\t<?php print_enum_string_option_list( 'resolution', $p_filter[FILTER_PROPERTY_RESOLUTION] )?>\n\t\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_status( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_STATUS] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_STATUS] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_STATUS, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else {\n\t\t\t\t$t_this_string = get_enum_element( 'status', $t_current );\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n/**\n * print status field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_status( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?>\t<!-- Status -->\n\t\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_STATUS;?>[]\">\n\t\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_STATUS], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t\t<?php print_enum_string_option_list( 'status', $p_filter[FILTER_PROPERTY_STATUS] )?>\n\t\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_hide_status( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_none_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_HIDE_STATUS] ) == 0 ) {\n\t\techo lang_get( 'none' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_HIDE_STATUS] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_HIDE_STATUS, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_none( $t_current ) ) {\n\t\t\t\t$t_none_found = true;\n\t\t\t} else {\n\t\t\t\t$t_this_string = get_enum_element( 'status', $t_current );\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\t$t_hide_status_post = '';\n\t\tif( count( $t_filter[FILTER_PROPERTY_HIDE_STATUS] ) == 1 ) {\n\t\t\t$t_hide_status_post = ' (' . lang_get( 'and_above' ) . ')';\n\t\t}\n\t\tif( true == $t_none_found ) {\n\t\t\techo lang_get( 'none' );\n\t\t} else {\n\t\t\techo $t_output . string_display_line( $t_hide_status_post );\n\t\t}\n\t}\n}\n\n/**\n * print hide status field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_hide_status( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Hide Status -->\n\t\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_HIDE_STATUS;?>[]\">\n\t\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\">[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t\t<?php print_enum_string_option_list( 'status', $p_filter[FILTER_PROPERTY_HIDE_STATUS] )?>\n\t\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_build( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_BUILD] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_BUILD] as $t_current ) {\n\t\t\t$t_current = stripslashes( $t_current );\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_BUILD, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t$t_this_string = lang_get( 'none' );\n\t\t\t} else {\n\t\t\t\t$t_this_string = $t_current;\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n/**\n * print build field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_build( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Build -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_BUILD;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_BUILD], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_BUILD], (string)META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php print_build_option_list( $p_filter[FILTER_PROPERTY_BUILD] )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_version( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_VERSION] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_VERSION] as $t_current ) {\n\t\t\t$t_current = stripslashes( $t_current );\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_VERSION, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t$t_this_string = lang_get( 'none' );\n\t\t\t} else {\n\t\t\t\t$t_this_string = $t_current;\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n/**\n * print version field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_version( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Version -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_VERSION;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_VERSION], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_VERSION], (string)META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php print_version_option_list( $p_filter[FILTER_PROPERTY_VERSION], null, VERSION_ALL, false, true )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_fixed_in_version( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_FIXED_IN_VERSION] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_FIXED_IN_VERSION] as $t_current ) {\n\t\t\t$t_current = stripslashes( $t_current );\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_FIXED_IN_VERSION, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t$t_this_string = lang_get( 'none' );\n\t\t\t} else {\n\t\t\t\t$t_this_string = $t_current;\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n/**\n * print fixed in version field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_fixed_in_version( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Fixed in Version -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_FIXED_IN_VERSION;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_FIXED_IN_VERSION], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_FIXED_IN_VERSION], (string)META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php print_version_option_list( $p_filter[FILTER_PROPERTY_FIXED_IN_VERSION], null, VERSION_ALL, false, true )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_target_version( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_TARGET_VERSION] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_TARGET_VERSION] as $t_current ) {\n\t\t\t$t_current = stripslashes( $t_current );\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_TARGET_VERSION, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t$t_this_string = lang_get( 'none' );\n\t\t\t} else {\n\t\t\t\t$t_this_string = $t_current;\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n/**\n * print target version field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_target_version( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Fixed in Version -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_TARGET_VERSION;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_TARGET_VERSION], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_TARGET_VERSION], (string)META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php print_version_option_list( $p_filter[FILTER_PROPERTY_TARGET_VERSION], null, VERSION_ALL, false, true )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_priority( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_PRIORITY] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_PRIORITY] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_PRIORITY, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else {\n\t\t\t\t$t_this_string = get_enum_element( 'priority', $t_current );\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n/**\n * print priority field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_priority( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Priority -->\n\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_PRIORITY;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_PRIORITY], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php print_enum_string_option_list( 'priority', $p_filter[FILTER_PROPERTY_PRIORITY] )?>\n\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_profile( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_PROFILE_ID] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_PROFILE_ID] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_PROFILE_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else {\n\t\t\t\t$t_profile = profile_get_row_direct( $t_current );\n\t\t\t\t$t_this_string = $t_profile['platform'] . ' ' . $t_profile['os'] . ' ' . $t_profile['os_build'];\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n/**\n * print profile field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_profile( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Profile -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_PROFILE_ID;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_PROFILE_ID], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php print_profile_option_list_for_project( helper_get_current_project(), $p_filter[FILTER_PROPERTY_PROFILE_ID] );?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_per_page( array $p_filter ) {\n\t$t_filter = $p_filter;\n\techo ( $t_filter[FILTER_PROPERTY_ISSUES_PER_PAGE] == 0 ) ? lang_get( 'all' ) : string_display_line( $t_filter[FILTER_PROPERTY_ISSUES_PER_PAGE] );\n\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_ISSUES_PER_PAGE, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_ISSUES_PER_PAGE] ), '\" />';\n}\n\n/**\n * print issues per page field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_per_page( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Number of bugs per page -->\n\t\t<input class=\"input-xs\" type=\"text\" name=\"<?php echo FILTER_PROPERTY_ISSUES_PER_PAGE;?>\" size=\"3\" maxlength=\"7\" value=\"<?php echo $p_filter[FILTER_PROPERTY_ISSUES_PER_PAGE]?>\" />\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_view_state( array $p_filter ) {\n\t$t_filter = $p_filter;\n\tif( VS_PUBLIC === $t_filter[FILTER_PROPERTY_VIEW_STATE] ) {\n\t\techo lang_get( 'public' );\n\t} else if( VS_PRIVATE === $t_filter[FILTER_PROPERTY_VIEW_STATE] ) {\n\t\techo lang_get( 'private' );\n\t} else {\n\t\techo lang_get( 'any' );\n\t\t$t_filter[FILTER_PROPERTY_VIEW_STATE] = META_FILTER_ANY;\n\t}\n\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_VIEW_STATE, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_VIEW_STATE] ), '\" />';\n}\n\n/**\n * print view state field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_view_state( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- View Status -->\n\t\t<select class=\"input-xs\" name=\"<?php echo FILTER_PROPERTY_VIEW_STATE;?>\">\n\t\t\t<?php\n\t\t\techo '<option value=\"' . META_FILTER_ANY . '\"';\n\tcheck_selected( $p_filter[FILTER_PROPERTY_VIEW_STATE], META_FILTER_ANY );\n\techo '>[' . lang_get( 'any' ) . ']</option>';\n\techo '<option value=\"' . VS_PUBLIC . '\"';\n\tcheck_selected( $p_filter[FILTER_PROPERTY_VIEW_STATE], VS_PUBLIC );\n\techo '>' . lang_get( 'public' ) . '</option>';\n\techo '<option value=\"' . VS_PRIVATE . '\"';\n\tcheck_selected( $p_filter[FILTER_PROPERTY_VIEW_STATE], VS_PRIVATE );\n\techo '>' . lang_get( 'private' ) . '</option>';\n\t?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_sticky_issues( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_sticky_filter_state = gpc_string_to_bool( $t_filter[FILTER_PROPERTY_STICKY] );\n\tprint( $t_sticky_filter_state ? lang_get( 'yes' ) : lang_get( 'no' ) );\n\t?>\n\t<input type=\"hidden\" name=\"<?php\n\t\techo FILTER_PROPERTY_STICKY; ?>\" value=\"<?php\n\t\techo $t_sticky_filter_state ? 'on' : 'off'; ?>\" />\n\t<?php\n}\n\n/**\n * print sticky issues field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_sticky_issues( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Show or hide sticky bugs -->\n\t\t\t<input type=\"hidden\" name=\"<?php echo FILTER_PROPERTY_STICKY ?>\" value=\"<?php echo OFF ?>\">\n            <label>\n\t\t\t    <input class=\"input-xs ace\" type=\"checkbox\" name=\"<?php echo FILTER_PROPERTY_STICKY;?>\"<?php check_checked( gpc_string_to_bool( $p_filter[FILTER_PROPERTY_STICKY] ), true );?> />\n\t\t\t    <span class=\"lbl\"></span>\n            </label>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_highlight_changed( array $p_filter ) {\n\t$t_filter = $p_filter;\n\techo $t_filter[FILTER_PROPERTY_HIGHLIGHT_CHANGED];\n\t\t?>\n\t\t<input type=\"hidden\"\n\t\t\tname=\"<?php echo FILTER_PROPERTY_HIGHLIGHT_CHANGED; ?>\"\n\t\t\tvalue=\"<?php echo string_attribute( $t_filter[FILTER_PROPERTY_HIGHLIGHT_CHANGED] ); ?>\">\n\t\t<?php\n}\n\n/**\n * print highlight changed field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_highlight_changed( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Highlight changed bugs -->\n\t\t\t<input class=\"input-xs\" type=\"text\" name=\"<?php echo FILTER_PROPERTY_HIGHLIGHT_CHANGED;?>\" size=\"3\" maxlength=\"7\" value=\"<?php echo $p_filter[FILTER_PROPERTY_HIGHLIGHT_CHANGED]?>\" />\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_do_filter_by_date( array $p_filter ) {\n\t$t_filter = $p_filter;\n\tif( 'on' == $t_filter[FILTER_PROPERTY_FILTER_BY_DATE_SUBMITTED] ) {\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_FILTER_BY_DATE_SUBMITTED, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_FILTER_BY_DATE_SUBMITTED] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_START_MONTH, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_START_MONTH] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_START_DAY, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_START_DAY] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_START_YEAR, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_START_YEAR] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_END_MONTH, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_END_MONTH] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_END_DAY, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_END_DAY] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_END_YEAR, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_END_YEAR] ), '\" />';\n\n\t\t$t_chars = preg_split( '//', config_get( 'short_date_format' ), -1, PREG_SPLIT_NO_EMPTY );\n\t\t$t_time = mktime( 0, 0, 0, $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_START_MONTH], $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_START_DAY], $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_START_YEAR] );\n\t\tforeach( $t_chars as $t_char ) {\n\t\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo lang_get( 'month_' . strtolower ( date( 'F', $t_time ) ) );\n\t\t\t}\n\t\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo date( 'd', $t_time );\n\t\t\t}\n\t\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo date( 'Y', $t_time );\n\t\t\t}\n\t\t}\n\n\t\techo ' - ';\n\n\t\t$t_time = mktime( 0, 0, 0, $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_END_MONTH], $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_END_DAY], $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_END_YEAR] );\n\t\tforeach( $t_chars as $t_char ) {\n\t\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo lang_get( 'month_' . strtolower ( date( 'F', $t_time ) ) );\n\t\t\t}\n\t\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo date( 'd', $t_time );\n\t\t\t}\n\t\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo date( 'Y', $t_time );\n\t\t\t}\n\t\t}\n\t} else {\n\t\techo lang_get( 'no' );\n\t}\n}\n\n/**\n * Print filter by date fields\n * @global array $g_filter\n * @param boolean $p_hide_checkbox Hide data filter checkbox.\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_do_filter_by_date( $p_hide_checkbox = false, array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n?>\n\t\t<table cellspacing=\"0\" cellpadding=\"0\">\n<?php\n\t$t_menu_disabled =  '';\n\tif( !$p_hide_checkbox ) {\n?>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">\n\t\t\t\t<input type=\"hidden\" name=\"<?php echo FILTER_PROPERTY_FILTER_BY_DATE_SUBMITTED ?>\" value=\"<?php echo OFF ?>\" />\n\t\t\t\t<label>\n\t\t\t\t\t<input class=\"input-xs ace js_switch_date_inputs_trigger\" type=\"checkbox\" id=\"use_date_filters\" class=\"input-xs\"\n\t\t\t\t\t\tname=\"<?php echo FILTER_PROPERTY_FILTER_BY_DATE_SUBMITTED ?>\"\n\t\t\t\t\t\t<?php check_checked( gpc_string_to_bool( $p_filter[FILTER_PROPERTY_FILTER_BY_DATE_SUBMITTED] ), true ) ?> />\n\t\t\t\t\t<span class=\"lbl padding-6 small\"><?php echo lang_get( 'use_date_filters' )?></span>\n\t\t\t\t</label>\n\t\t\t</td>\n\t\t</tr>\n<?php\n\n\t\tif( ON != $p_filter[FILTER_PROPERTY_FILTER_BY_DATE_SUBMITTED] ) {\n\t\t\t$t_menu_disabled = ' disabled=\"disabled\" ';\n\t\t}\n\t}\n?>\n\n\t\t<!-- Start date -->\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<?php echo lang_get( 'start_date_label' )?>\n\t\t\t</td>\n\t\t\t<td class=\"nowrap\">\n\t\t\t<?php\n\t\t\t$t_chars = preg_split( '//', config_get( 'short_date_format' ), -1, PREG_SPLIT_NO_EMPTY );\n\tforeach( $t_chars as $t_char ) {\n\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_START_MONTH, '\"', $t_menu_disabled, '>';\n\t\t\tprint_month_option_list( $p_filter[FILTER_PROPERTY_DATE_SUBMITTED_START_MONTH] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_START_DAY, '\"', $t_menu_disabled, '>';\n\t\t\tprint_day_option_list( $p_filter[FILTER_PROPERTY_DATE_SUBMITTED_START_DAY] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_START_YEAR, '\"', $t_menu_disabled, '>';\n\t\t\tprint_year_option_list( $p_filter[FILTER_PROPERTY_DATE_SUBMITTED_START_YEAR] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t}\n\t?>\n\t\t\t</td>\n\t\t</tr>\n\t\t<!-- End date -->\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<?php echo lang_get( 'end_date_label' )?>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<?php\n\t\t\t$t_chars = preg_split( '//', config_get( 'short_date_format' ), -1, PREG_SPLIT_NO_EMPTY );\n\tforeach( $t_chars as $t_char ) {\n\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_END_MONTH, '\"', $t_menu_disabled, '>';\n\t\t\tprint_month_option_list( $p_filter[FILTER_PROPERTY_DATE_SUBMITTED_END_MONTH] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_END_DAY, '\"', $t_menu_disabled, '>';\n\t\t\tprint_day_option_list( $p_filter[FILTER_PROPERTY_DATE_SUBMITTED_END_DAY] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_END_YEAR, '\"', $t_menu_disabled, '>';\n\t\t\tprint_year_option_list( $p_filter[FILTER_PROPERTY_DATE_SUBMITTED_END_YEAR] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t}\n\t?>\n\t\t\t</td>\n\t\t</tr>\n\t\t</table>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_do_filter_by_last_updated_date( array $p_filter ) {\n\t$t_filter = $p_filter;\n\tif( 'on' == $t_filter[FILTER_PROPERTY_FILTER_BY_LAST_UPDATED_DATE] ) {\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_FILTER_BY_LAST_UPDATED_DATE, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_FILTER_BY_LAST_UPDATED_DATE] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_LAST_UPDATED_START_MONTH, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_LAST_UPDATED_START_MONTH] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_LAST_UPDATED_START_DAY, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_LAST_UPDATED_START_DAY] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_LAST_UPDATED_START_YEAR, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_LAST_UPDATED_START_YEAR] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_LAST_UPDATED_END_MONTH, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_LAST_UPDATED_END_MONTH] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_LAST_UPDATED_END_DAY, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_LAST_UPDATED_END_DAY] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_LAST_UPDATED_END_YEAR, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_LAST_UPDATED_END_YEAR] ), '\" />';\n\n\t\t$t_chars = preg_split( '//', config_get( 'short_date_format' ), -1, PREG_SPLIT_NO_EMPTY );\n\t\t$t_time = mktime( 0, 0, 0, $t_filter[FILTER_PROPERTY_LAST_UPDATED_START_MONTH], $t_filter[FILTER_PROPERTY_LAST_UPDATED_START_DAY], $t_filter[FILTER_PROPERTY_LAST_UPDATED_START_YEAR] );\n\t\tforeach( $t_chars as $t_char ) {\n\t\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo lang_get( 'month_' . strtolower (date( 'F', $t_time ) ) );\n\t\t\t}\n\t\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo date( 'd', $t_time );\n\t\t\t}\n\t\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo date( 'Y', $t_time );\n\t\t\t}\n\t\t}\n\n\t\techo ' - ';\n\n\t\t$t_time = mktime( 0, 0, 0, $t_filter[FILTER_PROPERTY_LAST_UPDATED_END_MONTH], $t_filter[FILTER_PROPERTY_LAST_UPDATED_END_DAY], $t_filter[FILTER_PROPERTY_LAST_UPDATED_END_YEAR] );\n\t\tforeach( $t_chars as $t_char ) {\n\t\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo lang_get( 'month_' . strtolower ( date( 'F', $t_time ) ) );\n\t\t\t}\n\t\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo date( 'd', $t_time );\n\t\t\t}\n\t\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo date( 'Y', $t_time );\n\t\t\t}\n\t\t}\n\t} else {\n\t\techo lang_get( 'no' );\n\t}\n}\n\n/**\n * Print filter by last update date fields\n * @global array $g_filter\n * @param boolean $p_hide_checkbox Hide data filter checkbox.\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_do_filter_by_last_updated_date( $p_hide_checkbox = false, array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n?>\n\t\t<table cellspacing=\"0\" cellpadding=\"0\">\n<?php\n\t$t_menu_disabled =  '';\n\tif( !$p_hide_checkbox ) {\n?>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">\n\t\t\t\t<input type=\"hidden\" name=\"<?php echo FILTER_PROPERTY_FILTER_BY_LAST_UPDATED_DATE ?>\" value=\"<?php echo OFF ?>\" />\n\t\t\t\t<label>\n\t\t\t\t\t<input class=\"input-xs ace js_switch_date_inputs_trigger\" type=\"checkbox\" id=\"use_last_updated_date_filters\" class=\"input-xs\"\n\t\t\t\t\t\tname=\"<?php echo FILTER_PROPERTY_FILTER_BY_LAST_UPDATED_DATE ?>\"\n\t\t\t\t\t\t<?php check_checked( gpc_string_to_bool( $p_filter[FILTER_PROPERTY_FILTER_BY_LAST_UPDATED_DATE] ), true ) ?> />\n\t\t\t\t\t<span class=\"lbl padding-6 small\"><?php echo lang_get( 'use_last_updated_date_filters' )?></span>\n\t\t\t\t</label>\n\t\t\t</td>\n\t\t</tr>\n<?php\n\n\t\tif( ON != $p_filter[FILTER_PROPERTY_FILTER_BY_LAST_UPDATED_DATE] ) {\n\t\t\t$t_menu_disabled = ' disabled=\"disabled\" ';\n\t\t}\n\t}\n?>\n\n\t\t<!-- Start date -->\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<?php echo lang_get( 'start_date_label' )?>\n\t\t\t</td>\n\t\t\t<td class=\"nowrap\">\n\t\t\t<?php\n\t\t\t$t_chars = preg_split( '//', config_get( 'short_date_format' ), -1, PREG_SPLIT_NO_EMPTY );\n\tforeach( $t_chars as $t_char ) {\n\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_LAST_UPDATED_START_MONTH, '\"', $t_menu_disabled, '>';\n\t\t\tprint_month_option_list( $p_filter[FILTER_PROPERTY_LAST_UPDATED_START_MONTH] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_LAST_UPDATED_START_DAY, '\"', $t_menu_disabled, '>';\n\t\t\tprint_day_option_list( $p_filter[FILTER_PROPERTY_LAST_UPDATED_START_DAY] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_LAST_UPDATED_START_YEAR, '\"', $t_menu_disabled, '>';\n\t\t\tprint_year_option_list( $p_filter[FILTER_PROPERTY_LAST_UPDATED_START_YEAR] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t}\n\t?>\n\t\t\t</td>\n\t\t</tr>\n\t\t<!-- End date -->\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<?php echo lang_get( 'end_date_label' )?>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<?php\n\t\t\t$t_chars = preg_split( '//', config_get( 'short_date_format' ), -1, PREG_SPLIT_NO_EMPTY );\n\tforeach( $t_chars as $t_char ) {\n\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_LAST_UPDATED_END_MONTH, '\"', $t_menu_disabled, '>';\n\t\t\tprint_month_option_list( $p_filter[FILTER_PROPERTY_LAST_UPDATED_END_MONTH] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_LAST_UPDATED_END_DAY, '\"', $t_menu_disabled, '>';\n\t\t\tprint_day_option_list( $p_filter[FILTER_PROPERTY_LAST_UPDATED_END_DAY] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_LAST_UPDATED_END_YEAR, '\"', $t_menu_disabled, '>';\n\t\t\tprint_year_option_list( $p_filter[FILTER_PROPERTY_LAST_UPDATED_END_YEAR] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t}\n\t?>\n\t\t\t</td>\n\t\t</tr>\n\t\t</table>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_relationship_type( array $p_filter ) {\n\t$t_filter = $p_filter;\n\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_RELATIONSHIP_TYPE, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_RELATIONSHIP_TYPE] ), '\" />';\n\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_RELATIONSHIP_BUG, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_RELATIONSHIP_BUG] ), '\" />';\n\t$c_rel_type = $t_filter[FILTER_PROPERTY_RELATIONSHIP_TYPE];\n\t$c_rel_bug = $t_filter[FILTER_PROPERTY_RELATIONSHIP_BUG];\n\tif( BUG_REL_ANY == $c_rel_type ) {\n\t\tswitch ( $c_rel_bug ) {\n\t\t\tcase META_FILTER_NONE:\n\t\t\t\techo lang_get( 'none' );\n\t\t\t\tbreak;\n\t\t\tcase META_FILTER_ANY:\n\t\t\t\techo lang_get( 'any' );\n\t\t\t\tbreak;\n\t\t\tdefault;\n\t\t\t\techo lang_get( 'any' ),' ' , lang_get( 'with' ), ' ', $c_rel_bug;\n\t\t}\n\t} elseif( BUG_REL_NONE == $c_rel_type ) {\n\t\techo lang_get( 'none' );\n\t\tswitch ( $c_rel_bug ) {\n\t\t\tcase META_FILTER_NONE:\n\t\t\tcase META_FILTER_ANY:\n\t\t\t\tbreak;\n\t\t\tdefault;\n\t\t\t\techo ' ', lang_get( 'with' ), ' ', $c_rel_bug;\n\t\t}\n\t} else {\n\t\techo relationship_get_description_for_history( $c_rel_type ) . ' ';\n\t\tswitch ( $c_rel_bug ) {\n\t\t\tcase META_FILTER_NONE:\n\t\t\t\techo lang_get( 'none' );\n\t\t\t\tbreak;\n\t\t\tcase META_FILTER_ANY:\n\t\t\t\techo lang_get( 'any' );\n\t\t\t\tbreak;\n\t\t\tdefault;\n\t\t\t\techo $c_rel_bug;\n\t\t}\n\t}\n}\n\n/**\n * print relationship fields\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_relationship_type( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t$c_reltype_value = $p_filter[FILTER_PROPERTY_RELATIONSHIP_TYPE];\n\trelationship_list_box( $c_reltype_value, 'relationship_type', true, true, \"input-xs\" );\n\techo '<input class=\"input-xs\" type=\"text\" name=\"', FILTER_PROPERTY_RELATIONSHIP_BUG, '\" size=\"5\" maxlength=\"10\" value=\"', $p_filter[FILTER_PROPERTY_RELATIONSHIP_BUG], '\" />';\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_tag_string( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_tag_string = $t_filter[FILTER_PROPERTY_TAG_STRING];\n\tif( $t_filter[FILTER_PROPERTY_TAG_SELECT] != 0 && tag_exists( $t_filter[FILTER_PROPERTY_TAG_SELECT] ) ) {\n\t\t$t_tag_string .= ( is_blank( $t_tag_string ) ? '' : config_get( 'tag_separator' ) );\n\t\t$t_tag_string .= tag_get_field( $t_filter[FILTER_PROPERTY_TAG_SELECT], 'name' );\n\t}\n\techo string_html_entities( $t_tag_string );\n\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_TAG_STRING, '\" value=\"', string_attribute( $t_tag_string ), '\" />';\n}\n\n/**\n * print tag fields\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_tag_string( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( !access_has_project_level( config_get( 'tag_view_threshold' ) ) ) {\n\t\treturn;\n\t}\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t$t_tag_string = $p_filter[FILTER_PROPERTY_TAG_STRING];\n\tif( $p_filter[FILTER_PROPERTY_TAG_SELECT] != 0 && tag_exists( $p_filter[FILTER_PROPERTY_TAG_SELECT] ) ) {\n\t\t$t_tag_string .= ( is_blank( $t_tag_string ) ? '' : config_get( 'tag_separator' ) );\n\t\t$t_tag_string .= tag_get_field( $p_filter[FILTER_PROPERTY_TAG_SELECT], 'name' );\n\t}\n\t?>\n\t\t<input type=\"hidden\" id=\"tag_separator\" value=\"<?php echo config_get( 'tag_separator' )?>\" />\n\t\t<input class=\"input-xs\" type=\"text\" name=\"<?php echo FILTER_PROPERTY_TAG_STRING;?>\" id=\"<?php echo FILTER_PROPERTY_TAG_STRING;?>\" size=\"25\" value=\"<?php echo string_attribute( $t_tag_string )?>\" />\n\t\t<select class=\"input-xs\" <?php echo helper_get_tab_index()?> name=\"<?php echo FILTER_PROPERTY_TAG_SELECT;?>\" id=\"<?php echo FILTER_PROPERTY_TAG_SELECT;?>\">\n\t\t\t<?php print_tag_option_list();?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n */\nfunction print_filter_values_note_user_id( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_NOTE_USER_ID] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_NOTE_USER_ID] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_NOTE_USER_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_name = '';\n\t\t\tif( filter_field_is_none( $t_current ) ) {\n\t\t\t\t$t_this_name = lang_get( 'none' );\n\t\t\t} else if( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else if( filter_field_is_myself( $t_current ) ) {\n\t\t\t\tif( access_has_project_level( config_get( 'handle_bug_threshold' ) ) ) {\n\t\t\t\t\t$t_this_name = '[' . lang_get( 'myself' ) . ']';\n\t\t\t\t} else {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$t_this_name = user_get_name( $t_current );\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_name );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n/**\n * print note reporter field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_note_user_id( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?>\n\t<!-- BUGNOTE REPORTER -->\n\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_NOTE_USER_ID;?>[]\">\n\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_NOTE_USER_ID], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t<?php if( access_has_project_level( config_get( 'view_handler_threshold' ) ) ) {?>\n\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_NOTE_USER_ID], META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t<?php\n\t\t\tif( access_has_project_level( config_get( 'handle_bug_threshold' ) ) ) {\n\t\t\t\techo '<option value=\"' . META_FILTER_MYSELF . '\"';\n\t\t\t\tcheck_selected( $p_filter[FILTER_PROPERTY_NOTE_USER_ID], META_FILTER_MYSELF );\n\t\t\t\techo '>[' . lang_get( 'myself' ) . ']</option>';\n\t\t\t}\n\n\t\t\tprint_note_option_list( $p_filter[FILTER_PROPERTY_NOTE_USER_ID] );\n\t\t}\n\t?>\n\t</select>\n\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\t\t\tFilter array\n * @param string $p_field_name\t\tField name\n * @param object $p_filter_object\tFilter object\n * @return void\n */\nfunction print_filter_values_plugin_field( array $p_filter, $p_field_name, $p_filter_object ) {\n\tif( !isset( $p_filter[$p_field_name] ) ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_value = $p_filter[$p_field_name];\n\t\tswitch( $p_filter_object->type ) {\n\t\t\tcase FILTER_TYPE_STRING:\n\t\t\tcase FILTER_TYPE_INT:\n\t\t\t\tif( filter_field_is_any( $t_value ) ) {\n\t\t\t\t\techo lang_get( 'any' );\n\t\t\t\t} else {\n\t\t\t\t\techo string_display_line( $t_value );\n\t\t\t\t}\n\t\t\t\techo '<input type=\"hidden\" name=\"' . string_attribute( $p_field_name ) . '\" value=\"' . string_attribute( $t_value ) . '\">';\n\t\t\t\tbreak;\n\n\t\t\tcase FILTER_TYPE_BOOLEAN:\n\t\t\t\techo string_display_line( $p_filter_object->display( (bool)$t_value ) );\n\t\t\t\techo '<input type=\"hidden\" name=\"' . string_attribute( $p_field_name ) . '\" value=\"' . (bool)$t_value . '\">';\n\t\t\t\tbreak;\n\n\t\t\tcase FILTER_TYPE_MULTI_STRING:\n\t\t\tcase FILTER_TYPE_MULTI_INT:\n\t\t\t\tif( !is_array( $t_value ) ) {\n\t\t\t\t\t$t_value = array( $t_value );\n\t\t\t\t}\n\t\t\t\t$t_strings = array();\n\t\t\t\tforeach( $t_value as $t_current ) {\n\t\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t\t$t_strings[] = lang_get( 'any' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_strings[] = string_display_line( $p_filter_object->display( $t_current ) );\n\t\t\t\t\t}\n\t\t\t\t\techo '<input type=\"hidden\" name=\"' . string_attribute( $p_field_name ) . '[]\" value=\"' . string_attribute( $t_current ) . '\">';\n\t\t\t\t}\n\t\t\t\techo implode( '<br>', $t_strings );\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\n/**\n * Print plugin filter fields as defined by MantisFilter objects.\n * @global array $g_filter\n * @param string $p_field_name    Field name.\n * @param object $p_filter_object Filter object.\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_plugin_field( $p_field_name, $p_filter_object, array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\n\t$t_size = (int)$p_filter_object->size;\n\n\tswitch( $p_filter_object->type ) {\n\t\tcase FILTER_TYPE_STRING:\n\t\t\techo '<input class=\"input-xs\" name=\"', string_attribute( $p_field_name ), '\"',\n\t\t\t\t( $t_size > 0 ? ' size=\"' . $t_size . '\"' : '' ), ' value=\"',\n\t\t\t\tstring_attribute( $p_filter[$p_field_name] ), '\"/>';\n\t\t\tbreak;\n\n\t\tcase FILTER_TYPE_INT:\n\t\t\techo '<input class=\"input-xs\" name=\"', string_attribute( $p_field_name ), '\"',\n\t\t\t\t( $t_size > 0 ? ' size=\"' . $t_size . '\"' : '' ), ' value=\"',\n\t\t\t\t(int)$p_filter[$p_field_name], '\"/>';\n\t\t\tbreak;\n\n\t\tcase FILTER_TYPE_BOOLEAN:\n\t\t\techo '<input name=\"', string_attribute( $p_field_name ), '\" type=\"hidden\" value=\"', OFF ,'\"/>';\n\t\t\techo '<label>';\n\t\t\techo '<input class=\"input-xs\" name=\"', string_attribute( $p_field_name ), '\" type=\"checkbox\"',\n\t\t\t\t( $t_size > 0 ? ' size=\"' . $t_size . '\"' : '' ), check_checked( (bool)$p_filter[$p_field_name] ) , '\"/>';\n\t\t\techo '<span class=\"lbl\"></span>';\n\t\t\techo '</label>';\n\t\t\tbreak;\n\n\t\tcase FILTER_TYPE_MULTI_STRING:\n\t\t\techo '<select class=\"input-xs\" ' . filter_select_modifier( $p_filter ) . ( $t_size > 0 ? ' size=\"' . $t_size . '\"' : '' ), ' name=\"',\n\t\t\t\tstring_attribute( $p_field_name ), '[]\">', '<option value=\"', META_FILTER_ANY, '\"',\n\t\t\t\tcheck_selected( $p_filter[$p_field_name], (string)META_FILTER_ANY ), '>[', lang_get( 'any' ), ']</option>';\n\n\t\t\tforeach( $p_filter_object->options() as $t_option_value => $t_option_name ) {\n\t\t\t\techo '<option value=\"', string_attribute( $t_option_value ), '\" ',\n\t\t\t\t\tcheck_selected( $p_filter[$p_field_name], $t_option_value, false ), '>',\n\t\t\t\t\tstring_display_line( $t_option_name ), '</option>';\n\t\t\t}\n\n\t\t\techo '</select>';\n\t\t\tbreak;\n\n\t\tcase FILTER_TYPE_MULTI_INT:\n\t\t\techo '<select class=\"input-xs\"' . filter_select_modifier( $p_filter ) . ( $t_size > 0 ? ' size=\"' . $t_size . '\"' : '' ), ' name=\"',\n\t\t\t\tstring_attribute( $p_field_name ), '[]\">', '<option value=\"', META_FILTER_ANY, '\"',\n\t\t\t\tcheck_selected( $p_filter[$p_field_name], META_FILTER_ANY ), '>[', lang_get( 'any' ), ']</option>';\n\n\t\t\tforeach( $p_filter_object->options() as $t_option_value => $t_option_name ) {\n\t\t\t\techo '<option value=\"', (int)$t_option_value, '\" ',\n\t\t\t\t\tcheck_selected( $p_filter[$p_field_name], (int)$t_option_value ), '>',\n\t\t\t\t\tstring_display_line( $t_option_name ), '</option>';\n\t\t\t}\n\n\t\t\techo '</select>';\n\t\t\tbreak;\n\t}\n}\n\n/**\n * Print the current value of custom field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array to use\n * @param integer $p_field_id\tCustom field id\n * @return void\n */\nfunction print_filter_values_custom_field( array $p_filter, $p_field_id ) {\n\tif( CUSTOM_FIELD_TYPE_DATE == custom_field_type( $p_field_id ) ) {\n\t\tprint_filter_values_custom_field_date( $p_filter, $p_field_id );\n\t\treturn;\n\t}\n\n\tif( isset( $p_filter['custom_fields'][$p_field_id] ) ) {\n\t\t$t_values = $p_filter['custom_fields'][$p_field_id];\n\t} else {\n\t\t$t_values = array();\n\t}\n\t$t_strings = array();\n\t$t_inputs = array();\n\n\tif( filter_field_is_any( $t_values ) ) {\n\t\t$t_strings[] = lang_get( 'any' );\n\t} else {\n\t\tforeach( $t_values as $t_val ) {\n\t\t\t$t_val = stripslashes( $t_val );\n\t\t\tif( filter_field_is_none( $t_val ) ) {\n\t\t\t\t$t_strings[] = lang_get( 'none' );\n\t\t\t} else {\n\t\t\t\t$t_strings[] = $t_val;\n\t\t\t}\n\t\t\t$t_inputs[] = '<input type=\"hidden\" name=\"custom_field_' . $p_field_id . '[]\" value=\"' . string_attribute( $t_val ) . '\" />';\n\t\t}\n\t}\n\n\techo implode( '<br>', $t_strings );\n\techo implode( '', $t_inputs );\n}\n\n/**\n * Print the current value of this filter field (for a date type field), as visible string,\n * and as a hidden form input.\n * @param array $p_filter\tFilter array to use\n * @param integer $p_field_id\tCustom field id\n * @return void\n */\nfunction print_filter_values_custom_field_date( array $p_filter, $p_field_id ) {\n\t$t_short_date_format = config_get( 'short_date_format' );\n\tif( !isset( $p_filter['custom_fields'][$p_field_id][1] ) ) {\n\t\t$p_filter['custom_fields'][$p_field_id][1] = 0;\n\t}\n\t$t_start = date( $t_short_date_format, $p_filter['custom_fields'][$p_field_id][1] );\n\n\tif( !isset( $p_filter['custom_fields'][$p_field_id][2] ) ) {\n\t\t$p_filter['custom_fields'][$p_field_id][2] = 0;\n\t}\n\t$t_end = date( $t_short_date_format, $p_filter['custom_fields'][$p_field_id][2] );\n\tswitch( $p_filter['custom_fields'][$p_field_id][0] ) {\n\t\tcase CUSTOM_FIELD_DATE_ANY:\n\t\t\techo lang_get( 'any' );\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_NONE:\n\t\t\techo lang_get( 'none' );\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_BETWEEN:\n\t\t\techo lang_get( 'between_date' ) . '<br>';\n\t\t\techo $t_start . '<br>' . $t_end;\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_ONORBEFORE:\n\t\t\techo lang_get( 'on_or_before_date' ) . '<br>';\n\t\t\techo $t_end;\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_BEFORE:\n\t\t\techo lang_get( 'before_date' ) . '<br>';\n\t\t\techo $t_end;\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_ON:\n\t\t\techo lang_get( 'on_date' ) . '<br>';\n\t\t\techo $t_start;\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_AFTER:\n\t\t\techo lang_get( 'after_date' ) . '<br>';\n\t\t\techo $t_start;\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_ONORAFTER:\n\t\t\techo lang_get( 'on_or_after_date' ) . '<br>';\n\t\t\techo $t_start;\n\t\t\tbreak;\n\t}\n\t# print hidden inputs\n\t$t_cf = $p_filter['custom_fields'][$p_field_id];\n\techo '<input type=\"hidden\" name=\"custom_field_' . $p_field_id . '_control\" value=\"' . $t_cf[0] . '\">';\n\techo '<input type=\"hidden\" name=\"custom_field_' . $p_field_id . '_start_timestamp\" value=\"' . $t_cf[1] . '\">';\n\techo '<input type=\"hidden\" name=\"custom_field_' . $p_field_id . '_end_timestamp\" value=\"' . $t_cf[2] . '\">';\n}\n\n\n/**\n * Print custom field input list.\n * This function does not validates permissions\n * @global array $g_filter\n * @param integer $p_field_id\tCustom field id\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_custom_field( $p_field_id, array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\n\t$t_cfdef = custom_field_get_definition( $p_field_id );\n\n\tswitch( $t_cfdef['type'] ) {\n\t\tcase CUSTOM_FIELD_TYPE_DATE:\n\t\t\tprint_filter_custom_field_date( $p_field_id, $p_filter );\n\t\t\tbreak;\n\n\t\tcase CUSTOM_FIELD_TYPE_TEXTAREA:\n\t\t\techo '<input class=\"input-xs\" type=\"text\" name=\"custom_field_', $p_field_id, '\" size=\"10\" value=\"\" >';\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\techo '<select class=\"input-xs\" ' . filter_select_modifier( $p_filter ) . ' name=\"custom_field_' . $p_field_id . '[]\">';\n\t\t\t# Option META_FILTER_ANY\n\t\t\techo '<option value=\"' . META_FILTER_ANY . '\"';\n\t\t\tcheck_selected( $p_filter['custom_fields'][$p_field_id], META_FILTER_ANY, false );\n\t\t\techo '>[' . lang_get( 'any' ) . ']</option>';\n\t\t\t# don't show META_FILTER_NONE for enumerated types as it's not possible for them to be blank\n\t\t\tif( !in_array( $t_cfdef['type'], array( CUSTOM_FIELD_TYPE_ENUM, CUSTOM_FIELD_TYPE_LIST, CUSTOM_FIELD_TYPE_MULTILIST ) ) ) {\n\t\t\t\techo '<option value=\"' . META_FILTER_NONE . '\"';\n\t\t\t\tcheck_selected( $p_filter['custom_fields'][$p_field_id], META_FILTER_NONE, false );\n\t\t\t\techo '>[' . lang_get( 'none' ) . ']</option>';\n\t\t\t}\n\t\t\t# Print possible values\n\t\t\t$t_included_projects = filter_get_included_projects( $p_filter );\n\t\t\t$t_values = custom_field_distinct_values( $t_cfdef, $t_included_projects );\n\t\t\tif( is_array( $t_values ) ){\n\t\t\t\t$t_max_length = config_get( 'max_dropdown_length' );\n\t\t\t\tforeach( $t_values as $t_val ) {\n\t\t\t\t\tif( filter_field_is_any($t_val) || filter_field_is_none( $t_val ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\techo '<option value=\"' . string_attribute( $t_val ) . '\"';\n\t\t\t\t\tif( isset( $p_filter['custom_fields'][$p_field_id] ) ) {\n\t\t\t\t\t\tcheck_selected( $p_filter['custom_fields'][$p_field_id], $t_val, false );\n\t\t\t\t\t}\n\t\t\t\t\techo '>' . string_attribute( string_shorten( $t_val, $t_max_length ) ) . '</option>';\n\t\t\t\t}\n\t\t\t}\n\t\t\techo '</select>';\n\t\t\tbreak;\n\t}\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_sort( array $p_filter ) {\n\t$p_sort_properties = filter_get_visible_sort_properties_array( $p_filter );\n\t$t_sort_fields = $p_sort_properties[FILTER_PROPERTY_SORT_FIELD_NAME];\n\t$t_dir_fields = $p_sort_properties[FILTER_PROPERTY_SORT_DIRECTION];\n\n\t# @TODO cproensa: this could be a constant, or conffig.\n\t$t_max_displayed_sort = 2;\n\n\t$t_count = count( $t_sort_fields );\n\tfor( $i = 0; $i < $t_count; $i++ ) {\n\t\t# Only show the first sort columns\n\t\tif( $i< $t_max_displayed_sort ) {\n\t\t\tif( $i > 0 ) {\n\t\t\t\techo ', ';\n\t\t\t}\n\t\t\t$t_sort = $t_sort_fields[$i];\n\t\t\tif(column_is_custom_field( $t_sort ) ) {\n\t\t\t\t$t_field_name = string_display( lang_get_defaulted( column_get_custom_field_name( $t_sort ) ) );\n\t\t\t} else {\n\t\t\t\t$t_field_name = string_get_field_name( $t_sort );\n\t\t\t}\n\t\t\techo $t_field_name . ' ' . lang_get( 'bugnote_order_' . mb_strtolower( $t_dir_fields[$i] ) );\n\t\t} elseif ( $i == $t_max_displayed_sort ) {\n\t\t\techo ', ...';\n\t\t}\n\t\t# All sort columns are placed in hidden fields\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_SORT_FIELD_NAME, '[]\" value=\"', string_attribute( $t_sort_fields[$i] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_SORT_DIRECTION, '[]\" value=\"', string_attribute( $t_dir_fields[$i] ), '\" />';\n\t}\n}\n\n/**\n * Print sort fields\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_sort( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\n\t# get visible columns, and filter out those that ar not sortable\n\t$t_visible_columns = array_filter( helper_get_columns_to_view(), 'column_is_sortable' );\n\n\t$t_shown_fields[''] = '';\n\tforeach( $t_visible_columns as $t_column ) {\n\t\tif(column_is_custom_field( $t_column ) ) {\n\t\t\t$t_field_name = string_display( lang_get_defaulted( column_get_custom_field_name( $t_column ) ) );\n\t\t} else {\n\t\t\t$t_field_name = string_get_field_name( $t_column );\n\t\t}\n\t\t$t_shown_fields[$t_column] = $t_field_name;\n\t}\n\t$t_shown_dirs[''] = '';\n\t$t_shown_dirs['ASC'] = lang_get( 'bugnote_order_asc' );\n\t$t_shown_dirs['DESC'] = lang_get( 'bugnote_order_desc' );\n\n\t# get values from filter structure\n\t$p_sort_properties = filter_get_visible_sort_properties_array( $p_filter );\n\t$t_sort_fields = $p_sort_properties[FILTER_PROPERTY_SORT_FIELD_NAME];\n\t$t_dir_fields = $p_sort_properties[FILTER_PROPERTY_SORT_DIRECTION];\n\n\t# @TODO cproensa: this could be a constant, or conffig.\n\t$t_max_inputs_sort = 3;\n\n\t$t_print_select_inputs =\n\t\tfunction( $p_sort_val ='', $p_dir_val ='' ) use ( $t_shown_fields, $t_shown_dirs ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_SORT_FIELD_NAME, '[]\">';\n\t\t\tforeach( $t_shown_fields as $t_key => $t_val ) {\n\t\t\t\techo '<option value=\"' . $t_key . '\"';\n\t\t\t\tcheck_selected( $t_key, $p_sort_val );\n\t\t\t\techo '>' . $t_val . '</option>';\n\t\t\t}\n\t\t\techo '</select>';\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_SORT_DIRECTION, '[]\">';\n\t\t\tforeach( $t_shown_dirs as $t_key => $t_val ) {\n\t\t\t\techo '<option value=\"' . $t_key . '\"';\n\t\t\t\tcheck_selected( $t_key, $p_dir_val );\n\t\t\t\techo '>' . $t_val . '</option>';\n\t\t\t}\n\t\t\techo '</select>';\n\t\t};\n\n\t# if there are fields to display, show the dropdowns\n\tif( count( $t_visible_columns ) > 0 ) {\n\t\t$t_field_count = count( $t_sort_fields );\n\t\t$t_count = min( $t_field_count, $t_max_inputs_sort );\n\t\tfor( $i = 0; $i < $t_count; $i++ ) {\n\t\t\tif( $i > 0 ) {\n\t\t\t\techo ', ';\n\t\t\t}\n\t\t\t$t_print_select_inputs( $t_sort_fields[$i], $t_dir_fields[$i] );\n\t\t}\n\t\t# If we can have more inputs displayed, print one more as empty.\n\t\tif( $t_field_count < $t_max_inputs_sort ) {\n\t\t\techo ', ';\n\t\t\t$t_print_select_inputs();\n\t\t}\n\t} else {\n\t\techo lang_get_defaulted( 'last_updated' ) . lang_get( 'bugnote_order_desc' );\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_SORT_FIELD_NAME, '_array[]\" value=\"last_updated\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_SORT_DIRECTION, '_array[]\" value=\"DESC\" />';\n\t}\n}\n\n/**\n * Print custom field date fields\n * @global array $g_filter\n * @param integer $p_field_id  Custom field identifier.\n * @param array $p_filter \tFilter array\n * @return void\n */\nfunction print_filter_custom_field_date( $p_field_id, array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t$t_cfdef = custom_field_get_definition( $p_field_id );\n\t$t_included_projects = filter_get_included_projects( $p_filter );\n\t$t_values = custom_field_distinct_values( $t_cfdef, $t_included_projects );\n\n\t# Resort the values so there ordered numerically, they are sorted as strings otherwise which\n\t# may be wrong for dates before early 2001.\n\tif( is_array( $t_values ) ) {\n\t\tarray_multisort( $t_values, SORT_NUMERIC, SORT_ASC );\n\t}\n\n\t$t_sel_start_year = null;\n\t$t_sel_end_year = null;\n\tif( isset( $t_values[0] ) ) {\n\t\t$t_sel_start_year = date( 'Y', $t_values[0] );\n\t}\n\t$t_count = count( $t_values );\n\tif( isset( $t_values[$t_count - 1] ) ) {\n\t\t$t_sel_end_year = date( 'Y', $t_values[$t_count - 1] );\n\t}\n\n\t$t_start = date( 'U' );\n\n\t# Default to today in filters..\n\t$t_end = $t_start;\n\n\tif( isset( $p_filter['custom_fields'][$p_field_id][1] ) ) {\n\t\t$t_start_time = $p_filter['custom_fields'][$p_field_id][1];\n\t} else {\n\t\t$t_start_time = 0;\n\t}\n\n\tif( isset( $p_filter['custom_fields'][$p_field_id][2] ) ) {\n\t\t$t_end_time = $p_filter['custom_fields'][$p_field_id][2];\n\t} else {\n\t\t$t_end_time = 0;\n\t}\n\n\t$t_start_disable = true;\n\t$t_end_disable = true;\n\n\t# if $p_filter['custom_fields'][$p_field_id][0] is not set (ie no filter),\n\t# we will drop through the following switch and use the default values\n\t# above, so no need to check if stuff is set or not.\n\tswitch( $p_filter['custom_fields'][$p_field_id][0] ) {\n\t\tcase CUSTOM_FIELD_DATE_ANY:\n\t\tcase CUSTOM_FIELD_DATE_NONE:\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_BETWEEN:\n\t\t\t$t_start_disable = false;\n\t\t\t$t_end_disable = false;\n\t\t\t$t_start = $t_start_time;\n\t\t\t$t_end = $t_end_time;\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_ONORBEFORE:\n\t\tcase CUSTOM_FIELD_DATE_BEFORE:\n\t\t\t$t_start_disable = false;\n\t\t\t$t_start = $t_end_time;\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_ON:\n\t\tcase CUSTOM_FIELD_DATE_AFTER:\n\t\tcase CUSTOM_FIELD_DATE_ONORAFTER:\n\t\t\t$t_start_disable = false;\n\t\t\t$t_start = $t_start_time;\n\t\t\tbreak;\n\t}\n\n\techo '<table cellspacing=\"0\" cellpadding=\"0\"><tr><td>' . \"\\n\";\n\techo '<select class=\"input-xs\" size=\"1\" name=\"custom_field_' . $p_field_id . '_control\">' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_ANY . '\"';\n\tcheck_selected( (int)$p_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_ANY );\n\techo '>' . lang_get( 'any' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_NONE . '\"';\n\tcheck_selected( (int)$p_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_NONE );\n\techo '>' . lang_get( 'none' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_BETWEEN . '\"';\n\tcheck_selected( (int)$p_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_BETWEEN );\n\techo '>' . lang_get( 'between_date' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_ONORBEFORE . '\"';\n\tcheck_selected( (int)$p_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_ONORBEFORE );\n\techo '>' . lang_get( 'on_or_before_date' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_BEFORE . '\"';\n\tcheck_selected( (int)$p_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_BEFORE );\n\techo '>' . lang_get( 'before_date' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_ON . '\"';\n\tcheck_selected( (int)$p_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_ON );\n\techo '>' . lang_get( 'on_date' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_AFTER . '\"';\n\tcheck_selected( (int)$p_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_AFTER );\n\techo '>' . lang_get( 'after_date' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_ONORAFTER . '\"';\n\tcheck_selected( (int)$p_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_ONORAFTER );\n\techo '>' . lang_get( 'on_or_after_date' ) . '</option>' . \"\\n\";\n\techo '</select>' . \"\\n\";\n\n\techo \"</td></tr>\\n<tr><td>\";\n\n\tprint_date_selection_set( 'custom_field_' . $p_field_id . '_start', config_get( 'short_date_format' ), $t_start, $t_start_disable, false, $t_sel_start_year, $t_sel_end_year, \"input-xs\" );\n\tprint \"</td></tr>\\n<tr><td>\";\n\tprint_date_selection_set( 'custom_field_' . $p_field_id . '_end', config_get( 'short_date_format' ), $t_end, $t_end_disable, false, $t_sel_start_year, $t_sel_end_year, \"input-xs\" );\n\tprint \"</td></tr>\\n</table>\";\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_project_id( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\tif( !is_array( $t_filter[FILTER_PROPERTY_PROJECT_ID] ) ) {\n\t\t$t_filter[FILTER_PROPERTY_PROJECT_ID] = array(\n\t\t\t$t_filter[FILTER_PROPERTY_PROJECT_ID],\n\t\t);\n\t}\n\tif( count( $t_filter[FILTER_PROPERTY_PROJECT_ID] ) == 0 ) {\n\t\techo lang_get( 'current' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_PROJECT_ID] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_PROJECT_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\n\t\t\tif( META_FILTER_CURRENT == $t_current ) {\n\t\t\t\t$t_this_name = '[' . lang_get( 'current' ) . ']';\n\t\t\t} else {\n\t\t\t\t$t_this_name = project_get_name( $t_current, false );\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_name );\n\t\t}\n\t\techo $t_output;\n\t}\n}\n\n/**\n * Print project field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_project_id( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?>\n\t\t<!-- Project -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_PROJECT_ID;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_CURRENT ?>\"\n\t\t\t\t<?php check_selected( $p_filter[FILTER_PROPERTY_PROJECT_ID], META_FILTER_CURRENT );?>>\n\t\t\t\t[<?php echo lang_get( 'current' )?>]\n\t\t\t</option>\n\t\t\t<?php print_project_option_list( $p_filter[FILTER_PROPERTY_PROJECT_ID] )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_match_type( array $p_filter ) {\n\t$t_filter = $p_filter;\n\tswitch( $t_filter[FILTER_PROPERTY_MATCH_TYPE] ) {\n\t\tcase FILTER_MATCH_ANY:\n\t\t\techo lang_get( 'filter_match_any' );\n\t\t\tbreak;\n\t\tcase FILTER_MATCH_ALL:\n\t\tdefault:\n\t\t\techo lang_get( 'filter_match_all' );\n\t\t\tbreak;\n\t}\n\t?>\n\t\t<input type=\"hidden\" name=\"match_type\" value=\"<?php echo $t_filter[FILTER_PROPERTY_MATCH_TYPE] ?>\"/>\n\t<?php\n}\n\n/**\n * Print filter match type selector\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_match_type( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n?>\n\t\t<!-- Project -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_MATCH_TYPE;?>\">\n\t\t\t<option value=\"<?php echo FILTER_MATCH_ALL?>\" <?php check_selected( $p_filter[FILTER_PROPERTY_MATCH_TYPE], FILTER_MATCH_ALL );?>>[<?php echo lang_get( 'filter_match_all' )?>]</option>\n\t\t\t<option value=\"<?php echo FILTER_MATCH_ANY?>\" <?php check_selected( $p_filter[FILTER_PROPERTY_MATCH_TYPE], FILTER_MATCH_ANY );?>>[<?php echo lang_get( 'filter_match_any' )?>]</option>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Prints a multi-value filter field.\n * @param string $p_field_name  Field name.\n * @param mixed  $p_field_value Field value.\n * @return void\n */\nfunction print_multivalue_field( $p_field_name, $p_field_value ) {\n\t$t_output = '';\n\t$t_any_found = false;\n\n\tif( count( $p_field_value ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\n\t\t$t_field_value = is_array( $p_field_value ) ? $p_field_value : array( $p_field_value );\n\n\t\tforeach( $t_field_value as $t_current ) {\n\t\t\t$t_current = stripslashes( $t_current );\n\t\t\t?>\n\t\t\t\t<input type=\"hidden\" name=\"<?php echo string_attribute( $p_field_name )?>[]\" value=\"<?php echo string_attribute( $t_current );?>\" />\n\t\t\t\t<?php\n\t\t\t\t$t_this_string = '';\n\n\t\t\tif( ( ( $t_current == META_FILTER_ANY ) && ( is_numeric( $t_current ) ) ) || ( is_blank( $t_current ) ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else {\n\t\t\t\t$t_this_string = string_display( $t_current );\n\t\t\t}\n\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output .= '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\n\t\t\t$t_output .= $t_this_string;\n\t\t}\n\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n\n/**\n * Draw the table cells to view and edit a filter. This will usually be part of a form.\n * This method only prints the cells, not the table definition, or any other form element\n * outside of that.\n * A filter array is provided, to populate the fields.\n * The form will use javascript to show dynamic completion of fields (unless the\n * parameter $p_static is provided).\n * A page name can be provided to be used as a fallback script when javascript is\n * not available on the client, and the form was rendered with dynamic fields.\n * By default, the fallback is the current page.\n *\n * @param array $p_filter\tFilter array to show.\n * @param boolean $p_for_screen\tType of output\n * @param boolean $p_static\tWhether to print a static form (no dynamic fields)\n * @param string $p_static_fallback_page\tPage name to use as javascript fallback\n * @return void\n */\nfunction filter_form_draw_inputs( $p_filter, $p_for_screen = true, $p_static = false, $p_static_fallback_page = null ) {\n\n\t$t_filter = filter_ensure_valid_filter( $p_filter );\n\t$t_view_type = $t_filter['_view_type'];\n\t$t_source_query_id = isset( $t_filter['_source_query_id'] ) ? (int)$t_filter['_source_query_id'] : -1;\n\n\t# If it's a stored filter, linked to a specific project, use that project_id to render available fields\n\tif( $t_source_query_id > 0 ) {\n\t\t$t_project_id = (int)filter_get_field( $t_source_query_id, 'project_id' );\n\t\tif( ALL_PROJECTS == $t_project_id ) {\n\t\t\t# If all_projects, the filter can be used at any project, select the current project id\n\t\t\t$t_project_id = helper_get_current_project();\n\t\t} else if( $t_project_id < 0 ) {\n\t\t\t# If filter is an unnamed filter, project id is stored as negative value.\n\t\t\t$t_project_id = -1 * $t_project_id;\n\t\t}\n\t} else {\n\t\t$t_project_id = helper_get_current_project();\n\t}\n\n\tif( null === $p_static_fallback_page ) {\n\t\t$p_static_fallback_page = $_SERVER['PHP_SELF'];\n\t}\n\t$t_filters_url = $p_static_fallback_page;\n\t$t_get_params = $_GET;\n\t$t_get_params['for_screen'] = $p_for_screen;\n\t$t_get_params['static'] = ON;\n\t$t_get_params['view_type'] = ( FILTER_VIEW_TYPE_ADVANCED == $t_view_type )\n\t\t? FILTER_VIEW_TYPE_ADVANCED\n\t\t: FILTER_VIEW_TYPE_SIMPLE;\n\t$t_filters_url .= '?' . http_build_query( $t_get_params );\n\n\t$t_show_product_version =  version_should_show_product_version( $t_project_id );\n\t$t_show_build = $t_show_product_version && ( config_get( 'enable_product_build' ) == ON );\n\n\t# overload handler_id setting if user isn't supposed to see them (ref #6189)\n\tif( !access_has_any_project_level( 'view_handler_threshold' ) ) {\n\t\t$t_filter[FILTER_PROPERTY_HANDLER_ID] = array(\n\t\t\tMETA_FILTER_ANY,\n\t\t);\n\t}\n\n\tif ( config_get( 'use_dynamic_filters' ) ) {\n\t\t$t_dynamic_filter_expander_class = ' class=\"dynamic-filter-expander\"';\n\t} else {\n\t\t$t_dynamic_filter_expander_class = '';\n\t}\n\n\t$get_field_header = function ( $p_id, $p_label ) use ( $t_filters_url, $p_static, $t_filter, $t_source_query_id, $t_dynamic_filter_expander_class ) {\n\t\tif( $p_static) {\n\t\t\treturn $p_label;\n\t\t} else {\n\t\t\tif( filter_is_temporary( $t_filter ) ) {\n\t\t\t\t$t_data_filter_id = ' data-filter=\"' . filter_get_temporary_key( $t_filter ) . '\"';\n\t\t\t} elseif ( isset( $t_filter['_filter_id'] ) ) {\n\t\t\t\t$t_data_filter_id = ' data-filter_id=\"' . $t_filter['_filter_id'] . '\"';\n\t\t\t} else {\n\t\t\t\t$t_data_filter_id = '';\n\t\t\t}\n\t\t\treturn '<a href=\"' . $t_filters_url . '\" id=\"' . $p_id . '\"' . $t_dynamic_filter_expander_class . $t_data_filter_id . '>' . $p_label . '</a>';\n\t\t}\n\t};\n\n\n\t$t_filter_cols = max( 8, config_get( 'filter_custom_fields_per_row' ) );\n\t$t_show_inputs = $p_static;\n\n\t#\n\t# Build the field items\n\t# Use different sections to keep some separation among each group of fields\n\t# When a section starts, its fields start in a new row.\n\n\t$t_row1 = new FilterBoxGridLayout( $t_filter_cols , FilterBoxGridLayout::ORIENTATION_VERTICAL );\n\n\t$t_row1->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'reporter_id_filter', lang_get( 'reporter' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'reporter_id', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'reporter_id_filter_target' /* content id */\n\t\t\t));\n\t$t_row1->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'handler_id_filter', lang_get( 'assigned_to' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'handler_id', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'handler_id_filter_target' /* content id */\n\t\t\t));\n\t$t_row1->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'user_monitor_filter', lang_get( 'monitored_by' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'user_monitor', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'user_monitor_filter_target' /* content id */\n\t\t\t));\n\t$t_row1->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'note_user_id_filter', lang_get( 'note_user_id' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'note_user_id', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'note_user_id_filter_target' /* content id */\n\t\t\t));\n\t$t_row1->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'show_priority_filter', lang_get( 'priority' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'show_priority', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'show_priority_filter_target' /* content id */\n\t\t\t));\n\t$t_row1->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'show_severity_filter', lang_get( 'severity' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'show_severity', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'show_severity_filter_target' /* content id */\n\t\t\t));\n\t$t_row1->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'view_state_filter', lang_get( 'view_status' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'view_state', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'view_state_filter_target' /* content id */\n\t\t\t));\n\t$t_row1->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'sticky_issues_filter', lang_get( 'sticky' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'sticky_issues', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'sticky_issues_filter_target' /* content id */\n\t\t\t));\n\n\t$t_row2 = new FilterBoxGridLayout( $t_filter_cols , FilterBoxGridLayout::ORIENTATION_VERTICAL );\n\n\t$t_row2->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'show_category_filter', lang_get( 'category' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'show_category', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'show_category_filter_target' /* content id */\n\t\t\t));\n\tif( FILTER_VIEW_TYPE_SIMPLE == $t_view_type ) {\n\t\t$t_row2->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'hide_status_filter', lang_get( 'hide_status' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'hide_status', $t_show_inputs ),\n\t\t\t\t1 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'hide_status_filter_target' /* content id */\n\t\t\t\t));\n\t}\n\t$t_row2->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'show_status_filter', lang_get( 'status' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'show_status', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'show_status_filter_target' /* content id */\n\t\t\t));\n\t$t_row2->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'show_resolution_filter', lang_get( 'resolution' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'show_resolution', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'show_resolution_filter_target' /* content id */\n\t\t\t));\n\t$t_row2->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'do_filter_by_date_filter', lang_get( 'use_date_filters' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'do_filter_by_date', $t_show_inputs ),\n\t\t\t2 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'do_filter_by_date_filter_target' /* content id */\n\t\t\t));\n\t$t_row2->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'do_filter_by_last_updated_date_filter', lang_get( 'use_last_updated_date_filters' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'do_filter_by_last_updated_date', $t_show_inputs ),\n\t\t\t2 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'do_filter_by_last_updated_date_filter_target' /* content id */\n\t\t\t));\n\tif( FILTER_VIEW_TYPE_ADVANCED == $t_view_type ) {\n\t\t$t_row2->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'project_id_filter', lang_get( 'email_project' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'project_id', $t_show_inputs ),\n\t\t\t\t1 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'project_id_filter_target' /* content id */\n\t\t\t\t));\n\t}\n\n\t$t_row3 = new FilterBoxGridLayout( $t_filter_cols , FilterBoxGridLayout::ORIENTATION_VERTICAL );\n\n\tif( ON == config_get( 'enable_profiles' ) ) {\n\t\t$t_row3->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'show_profile_filter', lang_get( 'profile' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'show_profile', $t_show_inputs ),\n\t\t\t\t1 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'show_profile_filter_target' /* content id */\n\t\t\t\t));\n\t\t$t_row3->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'platform_filter', lang_get( 'platform' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'platform', $t_show_inputs ),\n\t\t\t\t1 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'platform_filter_target' /* content id */\n\t\t\t\t));\n\t\t$t_row3->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'os_filter', lang_get( 'os' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'os', $t_show_inputs ),\n\t\t\t\t1 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'os_filter_target' /* content id */\n\t\t\t\t));\n\t\t$t_row3->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'os_build_filter', lang_get( 'os_version' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'os_build', $t_show_inputs ),\n\t\t\t\t1 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'os_build_filter_target' /* content id */\n\t\t\t\t));\n\t}\n\tif( $t_show_build ) {\n\t\t$t_row3->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'show_build_filter', lang_get( 'product_build' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'show_build', $t_show_inputs ),\n\t\t\t\t1 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'show_build_filter_target' /* content id */\n\t\t\t\t));\n\t}\n\tif( $t_show_product_version ) {\n\t\t$t_row3->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'show_version_filter', lang_get( 'product_version' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'show_version', $t_show_inputs ),\n\t\t\t\t1 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'show_version_filter_target' /* content id */\n\t\t\t\t));\n\t\t$t_row3->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'show_fixed_in_version_filter', lang_get( 'fixed_in_version' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'show_fixed_in_version', $t_show_inputs ),\n\t\t\t\t1 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'show_fixed_in_version_filter_target' /* content id */\n\t\t\t\t));\n\t\t$t_row3->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'show_target_version_filter', lang_get( 'target_version' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'show_target_version', $t_show_inputs ),\n\t\t\t\t1 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'show_target_version_filter_target' /* content id */\n\t\t\t\t));\n\t}\n\t$t_row3->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'relationship_type_filter', lang_get( 'bug_relationships' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'relationship_type', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'relationship_type_filter_target' /* content id */\n\t\t\t));\n\tif( access_has_project_level( config_get( 'tag_view_threshold' ) ) ) {\n\t\t$t_row3->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'tag_string_filter', lang_get( 'tags' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'tag_string', $t_show_inputs ),\n\t\t\t\t3 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'tag_string_filter_target' /* content id */\n\t\t\t\t));\n\t}\n\n\t# plugin filters & custom fields\n\n\t$t_row_extra = new FilterBoxGridLayout( $t_filter_cols , FilterBoxGridLayout::ORIENTATION_VERTICAL );\n\n\t$t_plugin_filters = filter_get_plugin_filters();\n\tforeach( $t_plugin_filters as $t_field_name => $t_filter_object ) {\n\t\t$t_colspan = (int)$t_filter_object->colspan;\n\t\t$t_header = $get_field_header( string_attribute( $t_field_name ) . '_filter', string_display_line( $t_filter_object->title ) );\n\t\tob_start();\n\t\tif( $p_static ) {\n\t\t\tprint_filter_plugin_field( $t_field_name, $t_filter_object, $t_filter );\n\t\t} else {\n\t\t\tprint_filter_values_plugin_field( $t_filter, $t_field_name, $t_filter_object );\n\t\t}\n\t\t$t_content = ob_get_clean();\n\n\t\t$t_row_extra->add_item( new TableFieldsItem(\n\t\t\t\t$t_header,\n\t\t\t\t$t_content,\n\t\t\t\t$t_colspan,\n\t\t\t\tnull /* class */,\n\t\t\t\tstring_attribute( $t_field_name ) . '_filter_target' /* content id */\n\t\t\t\t));\n\t}\n\n\tif( ON == config_get( 'filter_by_custom_fields' ) ) {\n\t\t$t_filter_included_projects = filter_get_included_projects( $t_filter );\n\t\t$t_custom_fields = custom_field_get_linked_ids( $t_filter_included_projects );\n\t\t$t_accessible_custom_fields = array();\n\t\tforeach( $t_custom_fields as $t_cfid ) {\n\t\t\t$t_cfdef = custom_field_get_definition( $t_cfid );\n\t\t\t$t_projects_to_check = array_intersect( $t_filter_included_projects, custom_field_get_project_ids( $t_cfid ) );\n\t\t\tif( $t_cfdef['filter_by']\n\t\t\t\t&& access_has_any_project_level( (int)$t_cfdef['access_level_r'], $t_projects_to_check ) ) {\n\t\t\t\t$t_accessible_custom_fields[] = $t_cfdef;\n\t\t\t}\n\t\t}\n\n\t\tif( !empty( $t_accessible_custom_fields ) ) {\n\t\t\tforeach( $t_accessible_custom_fields as $t_cfdef ) {\n\t\t\t\t$t_header = $get_field_header( 'custom_field_' . $t_cfdef['id'] . '_filter', string_display_line( lang_get_defaulted( $t_cfdef['name'] ) ) );\n\t\t\t\tob_start();\n\t\t\t\tif( $p_static ) {\n\t\t\t\t\tprint_filter_custom_field( $t_cfdef['id'], $t_filter );\n\t\t\t\t} else {\n\t\t\t\t\tprint_filter_values_custom_field( $t_filter, $t_cfdef['id'] );\n\t\t\t\t}\n\t\t\t\t$t_content = ob_get_clean();\n\n\t\t\t\t$t_row_extra->add_item( new TableFieldsItem(\n\t\t\t\t\t\t$t_header,\n\t\t\t\t\t\t$t_content,\n\t\t\t\t\t\t1 /* colspan */,\n\t\t\t\t\t\tnull /* class */,\n\t\t\t\t\t\t'custom_field_' . $t_cfdef['id'] . '_filter_target' /* content id */\n\t\t\t\t\t\t));\n\t\t\t}\n\t\t}\n\t}\n\n\t# Section: last fields, horizontal orientation\n\n\t$t_section_last = new FilterBoxGridLayout( $t_filter_cols , FilterBoxGridLayout::ORIENTATION_HORIZONTAL );\n\n\t$t_section_last->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'per_page_filter', lang_get( 'show' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'per_page', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'per_page_filter_target' /* content id */\n\t\t\t));\n\t$t_section_last->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'show_sort_filter', lang_get( 'sort' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'show_sort', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'show_sort_filter_target' /* content id */\n\t\t\t));\n\t$t_section_last->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'match_type_filter', lang_get( 'filter_match_type' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'match_type', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'match_type_filter_target' /* content id */\n\t\t\t));\n\t$t_section_last->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'highlight_changed_filter', lang_get( 'changed' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'highlight_changed', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'highlight_changed_filter_target' /* content id */\n\t\t\t));\n\n\t?>\n\t<table class=\"table table-bordered table-condensed2\">\n\t\t<?php $t_row1->render() ?>\n\t\t<?php $t_row2->render() ?>\n\t\t<?php $t_row3->render() ?>\n\t\t<?php $t_row_extra->render() ?>\n\t\t<tr class=\"spacer\"></tr>\n\t\t<?php $t_section_last->render() ?>\n\t</table>\n\t<?php\n}\n\n\n/**\n * Class that extends TableGridLayout and implements the specific HTML output needed for the\n * filter form table\n */\nclass FilterBoxGridLayout extends TableGridLayout {\n\n\t/**\n\t * Prints HTML code for TD cell representing the Item header\n\t * @param TableFieldsItem $p_item Item to display\n\t * @param integer $p_colspan Colspan attribute for cell\n\t */\n\tprotected function render_td_item_header( TableFieldsItem $p_item, $p_colspan ) {\n\t\techo '<td class=\"small-caption category ' . $p_item->attr_class . '\"';\n\t\tif( $p_colspan > 1) {\n\t\t\techo ' colspan=\"' . $p_colspan . '\"';\n\t\t}\n\t\tif( $p_item->header_attr_id ) {\n\t\t\techo ' id=\"' . $p_item->header_attr_id . '\"';\n\t\t}\n\t\techo '>';\n\t\techo $p_item->header;\n\t\techo '</td>';\n\t}\n\n\t/**\n\t * Prints HTML code for TD cell representing the Item content\n\t * @param TableFieldsItem $p_item Item to display\n\t * @param integer $p_colspan Colspan attribute for cell\n\t */\n\tprotected function render_td_item_content( TableFieldsItem $p_item, $p_colspan ) {\n\t\techo '<td class=\"small-caption ' . $p_item->attr_class . '\"';\n\t\tif( $p_colspan > 1) {\n\t\t\techo ' colspan=\"' . $p_colspan . '\"';\n\t\t}\n\t\tif( $p_item->content_attr_id ) {\n\t\t\techo ' id=\"' . $p_item->content_attr_id . '\"';\n\t\t}\n\t\techo '>';\n\t\techo $p_item->content;\n\t\techo '</td>';\n\t}\n\n\t/**\n\t * Prints HTML code for an empty TD cell, of header type\n\t * @param integer $p_colspan Colspan attribute for cell\n\t */\n\tprotected function render_td_empty_header( $p_colspan ) {\n\t\techo '<td class=\"small-caption category\"';\n\t\tif( $p_colspan > 1) {\n\t\t\techo ' colspan=\"' . $p_colspan . '\"';\n\t\t}\n\t\techo '>';\n\t\techo '&nbsp;';\n\t\techo '</td>';\n\t}\n}\n"], "fixing_code": ["<?php\n# MantisBT - A PHP based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Filter print helper functions API\n *\n * @package CoreAPI\n * @subpackage FilterAPI\n * @copyright Copyright 2016  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n * @link http://www.mantisbt.org\n *\n * @uses access_api.php\n * @uses authentication_api.php\n * @uses config_api.php\n * @uses constant_inc.php\n * @uses current_user_api.php\n * @uses filter_api.php\n * @uses filter_constants_inc.php\n * @uses gpc_api.php\n * @uses helper_api.php\n * @uses html_api.php\n * @uses lang_api.php\n * @uses logging_api.php\n * @uses print_api.php\n * @uses relationship_api.php\n * @uses string_api.php\n * @uses user_api.php\n */\n\nrequire_api( 'access_api.php' );\nrequire_api( 'authentication_api.php' );\nrequire_api( 'config_api.php' );\nrequire_api( 'constant_inc.php' );\nrequire_api( 'current_user_api.php' );\nrequire_api( 'filter_api.php' );\nrequire_api( 'filter_constants_inc.php' );\nrequire_api( 'gpc_api.php' );\nrequire_api( 'helper_api.php' );\nrequire_api( 'html_api.php' );\nrequire_api( 'lang_api.php' );\nrequire_api( 'logging_api.php' );\nrequire_api( 'print_api.php' );\nrequire_api( 'relationship_api.php' );\nrequire_api( 'string_api.php' );\nrequire_api( 'user_api.php' );\n\n\n/**\n * @internal The following functions each print out filter field inputs.\n *      They are derived from view_filters_page.php\n *      The functions follow a strict naming convention:\n *\n * \t\tprint_filter_[filter_name]\n *\n *      Where [filter_name] is the same as the \"name\" of the form element for\n *      that filter. This naming convention is depended upon by the controller\n *      at the end of the script.\n *\n * @todo print functions should be abstracted.  Many of these functions\n *      are virtually identical except for the property name.\n *      Perhaps this code could be made simpler by refactoring into a\n *      class so as to avoid all those calls to global(which are pretty ugly)\n *      These functions could also be shared by view_filters_page.php\n */\n\n/**\n * Returns HTML for each filter field, to be used in filter form.\n * $p_filter_target is a field name to match any of \"the print_filter_...\" functions,\n * excluding those related to custom fields and plugin fields.\n * When $p_show_options is enabled, the form inputs are returned to allow selection,\n * if the option is disabled, returns the current value and a hidden input for that value.\n * @param array $p_filter Filter array\n * @param string $p_filter_target Filter field name\n * @param boolean $p_show_inputs True to return a visible form input or false for a text value.\n * @return string The html content for the field requested\n */\nfunction filter_form_get_input( array $p_filter, $p_filter_target, $p_show_inputs = true ) {\n\tif( $p_show_inputs ) {\n\t\t$t_function_prefix = 'print_filter_';\n\t} else {\n\t\t$t_function_prefix = 'print_filter_values_';\n\t}\n\t$t_params = array( $p_filter );\n\t$t_function_name = $t_function_prefix . $p_filter_target;\n\n\t# override non standard calls\n\tswitch( $p_filter_target ) {\n\t\tcase 'do_filter_by_date':\n\t\tcase 'do_filter_by_last_updated_date':\n\t\t\tif( $p_show_inputs ) {\n\t\t\t\t$t_params = array( false, $p_filter );\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\tif( function_exists( $t_function_name ) ) {\n\t\tob_start();\n\t\tcall_user_func_array( $t_function_name, $t_params );\n\t\treturn ob_get_clean();\n\t} else {\n\t\t# error - no function to populate the target (e.g., print_filter_foo)\n\t\terror_parameters( $p_filter_target );\n\t\ttrigger_error( ERROR_FILTER_NOT_FOUND, ERROR );\n\t\treturn false;\n\t}\n}\n\n\n/**\n * Return the input modifier to be used for advanced filters.\n * @param array $p_filter\tFilter array to use\n * @return string\n */\nfunction filter_select_modifier( array $p_filter ) {\n\tif( FILTER_VIEW_TYPE_ADVANCED == $p_filter['_view_type'] ) {\n\t\treturn ' multiple=\"multiple\" size=\"10\"';\n\t} else {\n\t\treturn '';\n\t}\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_values_reporter_id( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_REPORTER_ID] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_REPORTER_ID] as $t_current ) {\n\t\t\t$t_this_name = '';\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_REPORTER_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else if( filter_field_is_myself( $t_current ) ) {\n\t\t\t\tif( access_has_project_level( config_get( 'report_bug_threshold' ) ) ) {\n\t\t\t\t\t$t_this_name = '[' . lang_get( 'myself' ) . ']';\n\t\t\t\t} else {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t}\n\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t$t_this_name = lang_get( 'none' );\n\t\t\t} else {\n\t\t\t\t$t_this_name = user_get_name( $t_current );\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_name );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n/**\n * Print the reporter field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_reporter_id( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?>\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_REPORTER_ID;?>[]\">\n\t\t<?php\n\t# if current user is a reporter, and limited reports set to ON, only display that name\n\t# @@@ thraxisp - access_has_project_level checks greater than or equal to,\n\t#   this assumed that there aren't any holes above REPORTER where the limit would apply\n\t#\n\tif( ( ON === config_get( 'limit_reporters' ) ) && ( !access_has_project_level( access_threshold_min_level( config_get( 'report_bug_threshold' ) ) + 1 ) ) ) {\n\t\t$t_id = auth_get_current_user_id();\n\t\t$t_username = user_get_name( $t_id );\n\t\t$t_display_name = string_attribute( $t_username );\n\t\techo '<option value=\"' . $t_id . '\" selected=\"selected\">' . $t_display_name . '</option>';\n\t} else {\n\t\t?>\n\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_REPORTER_ID], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t<?php\n\t\t\tif( access_has_project_level( config_get( 'report_bug_threshold' ) ) ) {\n\t\t\t\techo '<option value=\"' . META_FILTER_MYSELF . '\" ';\n\t\t\t\tcheck_selected( $p_filter[FILTER_PROPERTY_REPORTER_ID], META_FILTER_MYSELF );\n\t\t\t\techo '>[' . lang_get( 'myself' ) . ']</option>';\n\t\t\t}\n\t\tprint_reporter_option_list( $p_filter[FILTER_PROPERTY_REPORTER_ID] );\n\t}?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_user_monitor( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\t$t_none_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_MONITOR_USER_ID] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_MONITOR_USER_ID] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_MONITOR_USER_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_name = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t$t_none_found = true;\n\t\t\t} else if( filter_field_is_myself( $t_current ) ) {\n\t\t\t\tif( access_has_project_level( config_get( 'monitor_bug_threshold' ) ) ) {\n\t\t\t\t\t$t_this_name = '[' . lang_get( 'myself' ) . ']';\n\t\t\t\t} else {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$t_this_name = user_get_name( $t_current );\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_name );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else if( true == $t_none_found ) {\n\t\t\techo lang_get( 'none' );\n\t\t} else {\n\t\t\techo string_display( $t_output );\n\t\t}\n\t}\n}\n\n/**\n * Print the user monitor field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_user_monitor( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?>\n\t<!-- Monitored by -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_MONITOR_USER_ID;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_MONITOR_USER_ID], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_MONITOR_USER_ID], META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php\n\t\t\t\tif( access_has_project_level( config_get( 'monitor_bug_threshold' ) ) ) {\n\t\techo '<option value=\"' . META_FILTER_MYSELF . '\" ';\n\t\tcheck_selected( $p_filter[FILTER_PROPERTY_MONITOR_USER_ID], META_FILTER_MYSELF );\n\t\techo '>[' . lang_get( 'myself' ) . ']</option>';\n\t}\n\t$t_threshold = config_get( 'show_monitor_list_threshold' );\n\n\tif( access_has_project_level( $t_threshold ) ) {\n\t\tprint_user_option_list( $p_filter[FILTER_PROPERTY_MONITOR_USER_ID], null, config_get( 'monitor_bug_threshold' ) );\n\t}\n\t?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_handler_id( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_HANDLER_ID] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_HANDLER_ID] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_HANDLER_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_name = '';\n\t\t\tif( filter_field_is_none( $t_current ) ) {\n\t\t\t\t$t_this_name = lang_get( 'none' );\n\t\t\t} else if( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else if( filter_field_is_myself( $t_current ) ) {\n\t\t\t\tif( access_has_project_level( config_get( 'handle_bug_threshold' ) ) ) {\n\t\t\t\t\t$t_this_name = '[' . lang_get( 'myself' ) . ']';\n\t\t\t\t} else {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$t_this_name = user_get_name( $t_current );\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_name );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo string_display( $t_output );\n\t\t}\n\t}\n}\n\n/**\n * print the handler field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_handler_id( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?>\n\t\t<!-- Handler -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_HANDLER_ID;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_HANDLER_ID], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php if( access_has_project_level( config_get( 'view_handler_threshold' ) ) ) {?>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_HANDLER_ID], META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php\n\t\t\t\tif( access_has_project_level( config_get( 'handle_bug_threshold' ) ) ) {\n\t\t\techo '<option value=\"' . META_FILTER_MYSELF . '\" ';\n\t\t\tcheck_selected( $p_filter[FILTER_PROPERTY_HANDLER_ID], META_FILTER_MYSELF );\n\t\t\techo '>[' . lang_get( 'myself' ) . ']</option>';\n\t\t}\n\n\t\tprint_assign_to_option_list( $p_filter[FILTER_PROPERTY_HANDLER_ID] );\n\t}?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_category( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\t$t_none_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_CATEGORY_ID] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_CATEGORY_ID] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_CATEGORY_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} elseif( filter_field_is_none( $t_current ) ) {\n\t\t\t\t$t_none_found = true;\n\t\t\t} else {\n\t\t\t\t$t_this_string = $t_current;\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} elseif( true == $t_none_found ) {\n\t\t\techo lang_get( 'none' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n/**\n * print the category field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_category( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?>\n\t\t<!-- Category -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_CATEGORY_ID;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_CATEGORY_ID], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_CATEGORY_ID], (string)META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php print_category_filter_option_list( $p_filter[FILTER_PROPERTY_CATEGORY_ID] )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_platform( array $p_filter ) {\n\tprint_multivalue_field( FILTER_PROPERTY_PLATFORM, $p_filter[FILTER_PROPERTY_PLATFORM] );\n}\n\n/**\n * print the platform field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_platform( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?>\n\t\t<!-- Platform -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_PLATFORM;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_PLATFORM], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php\n\t\t\t\tlog_event( LOG_FILTERING, 'Platform = ' . var_export( $p_filter[FILTER_PROPERTY_PLATFORM], true ) );\n\tprint_platform_option_list( $p_filter[FILTER_PROPERTY_PLATFORM] );\n\t?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_os( array $p_filter ) {\n\tprint_multivalue_field( FILTER_PROPERTY_OS, $p_filter[FILTER_PROPERTY_OS] );\n}\n\n/**\n * print the os field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_os( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?>\n\t\t<!-- OS -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_OS;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_OS], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php print_os_option_list( $p_filter[FILTER_PROPERTY_OS] )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_os_build( array $p_filter ) {\n\tprint_multivalue_field( FILTER_PROPERTY_OS_BUILD, $p_filter[FILTER_PROPERTY_OS_BUILD] );\n}\n\n/**\n * print the os build field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_os_build( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?>\n\t\t<!-- OS Build -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_OS_BUILD;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_OS_BUILD], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php print_os_build_option_list( $p_filter[FILTER_PROPERTY_OS_BUILD] )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_severity( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_SEVERITY] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_SEVERITY] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_SEVERITY, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else {\n\t\t\t\t$t_this_string = get_enum_element( 'severity', $t_current );\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n/**\n * print the severity field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_severity( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Severity -->\n\t\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_SEVERITY;?>[]\">\n\t\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_SEVERITY], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t\t<?php print_enum_string_option_list( 'severity', $p_filter[FILTER_PROPERTY_SEVERITY] )?>\n\t\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_resolution( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_RESOLUTION] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_RESOLUTION] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_RESOLUTION, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else {\n\t\t\t\t$t_this_string = get_enum_element( 'resolution', $t_current );\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n/**\n * print resolution field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_resolution( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Resolution -->\n\t\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_RESOLUTION;?>[]\">\n\t\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_RESOLUTION], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t\t<?php print_enum_string_option_list( 'resolution', $p_filter[FILTER_PROPERTY_RESOLUTION] )?>\n\t\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_status( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_STATUS] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_STATUS] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_STATUS, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else {\n\t\t\t\t$t_this_string = get_enum_element( 'status', $t_current );\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n/**\n * print status field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_status( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?>\t<!-- Status -->\n\t\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_STATUS;?>[]\">\n\t\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_STATUS], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t\t<?php print_enum_string_option_list( 'status', $p_filter[FILTER_PROPERTY_STATUS] )?>\n\t\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_hide_status( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_none_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_HIDE_STATUS] ) == 0 ) {\n\t\techo lang_get( 'none' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_HIDE_STATUS] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_HIDE_STATUS, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_none( $t_current ) ) {\n\t\t\t\t$t_none_found = true;\n\t\t\t} else {\n\t\t\t\t$t_this_string = get_enum_element( 'status', $t_current );\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\t$t_hide_status_post = '';\n\t\tif( count( $t_filter[FILTER_PROPERTY_HIDE_STATUS] ) == 1 ) {\n\t\t\t$t_hide_status_post = ' (' . lang_get( 'and_above' ) . ')';\n\t\t}\n\t\tif( true == $t_none_found ) {\n\t\t\techo lang_get( 'none' );\n\t\t} else {\n\t\t\techo $t_output . string_display_line( $t_hide_status_post );\n\t\t}\n\t}\n}\n\n/**\n * print hide status field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_hide_status( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Hide Status -->\n\t\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_HIDE_STATUS;?>[]\">\n\t\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\">[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t\t<?php print_enum_string_option_list( 'status', $p_filter[FILTER_PROPERTY_HIDE_STATUS] )?>\n\t\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_build( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_BUILD] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_BUILD] as $t_current ) {\n\t\t\t$t_current = stripslashes( $t_current );\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_BUILD, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t$t_this_string = lang_get( 'none' );\n\t\t\t} else {\n\t\t\t\t$t_this_string = $t_current;\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n/**\n * print build field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_build( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Build -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_BUILD;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_BUILD], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_BUILD], (string)META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php print_build_option_list( $p_filter[FILTER_PROPERTY_BUILD] )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_version( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_VERSION] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_VERSION] as $t_current ) {\n\t\t\t$t_current = stripslashes( $t_current );\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_VERSION, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t$t_this_string = lang_get( 'none' );\n\t\t\t} else {\n\t\t\t\t$t_this_string = $t_current;\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n/**\n * print version field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_version( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Version -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_VERSION;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_VERSION], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_VERSION], (string)META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php print_version_option_list( $p_filter[FILTER_PROPERTY_VERSION], null, VERSION_ALL, false, true )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_fixed_in_version( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_FIXED_IN_VERSION] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_FIXED_IN_VERSION] as $t_current ) {\n\t\t\t$t_current = stripslashes( $t_current );\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_FIXED_IN_VERSION, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t$t_this_string = lang_get( 'none' );\n\t\t\t} else {\n\t\t\t\t$t_this_string = $t_current;\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n/**\n * print fixed in version field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_fixed_in_version( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Fixed in Version -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_FIXED_IN_VERSION;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_FIXED_IN_VERSION], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_FIXED_IN_VERSION], (string)META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php print_version_option_list( $p_filter[FILTER_PROPERTY_FIXED_IN_VERSION], null, VERSION_ALL, false, true )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_target_version( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_TARGET_VERSION] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_TARGET_VERSION] as $t_current ) {\n\t\t\t$t_current = stripslashes( $t_current );\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_TARGET_VERSION, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t$t_this_string = lang_get( 'none' );\n\t\t\t} else {\n\t\t\t\t$t_this_string = $t_current;\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n/**\n * print target version field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_target_version( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Fixed in Version -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_TARGET_VERSION;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_TARGET_VERSION], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_TARGET_VERSION], (string)META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php print_version_option_list( $p_filter[FILTER_PROPERTY_TARGET_VERSION], null, VERSION_ALL, false, true )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_priority( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_PRIORITY] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_PRIORITY] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_PRIORITY, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else {\n\t\t\t\t$t_this_string = get_enum_element( 'priority', $t_current );\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n/**\n * print priority field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_priority( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Priority -->\n\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_PRIORITY;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_PRIORITY], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php print_enum_string_option_list( 'priority', $p_filter[FILTER_PROPERTY_PRIORITY] )?>\n\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_profile( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_PROFILE_ID] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_PROFILE_ID] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_PROFILE_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_string = '';\n\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else {\n\t\t\t\t$t_profile = profile_get_row_direct( $t_current );\n\t\t\t\t$t_this_string = $t_profile['platform'] . ' ' . $t_profile['os'] . ' ' . $t_profile['os_build'];\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n/**\n * print profile field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_profile( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Profile -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_PROFILE_ID;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_PROFILE_ID], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php print_profile_option_list_for_project( helper_get_current_project(), $p_filter[FILTER_PROPERTY_PROFILE_ID] );?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_per_page( array $p_filter ) {\n\t$t_filter = $p_filter;\n\techo ( $t_filter[FILTER_PROPERTY_ISSUES_PER_PAGE] == 0 ) ? lang_get( 'all' ) : string_display_line( $t_filter[FILTER_PROPERTY_ISSUES_PER_PAGE] );\n\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_ISSUES_PER_PAGE, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_ISSUES_PER_PAGE] ), '\" />';\n}\n\n/**\n * print issues per page field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_per_page( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Number of bugs per page -->\n\t\t<input class=\"input-xs\" type=\"text\" name=\"<?php echo FILTER_PROPERTY_ISSUES_PER_PAGE;?>\" size=\"3\" maxlength=\"7\" value=\"<?php echo $p_filter[FILTER_PROPERTY_ISSUES_PER_PAGE]?>\" />\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_view_state( array $p_filter ) {\n\t$t_filter = $p_filter;\n\tif( VS_PUBLIC === $t_filter[FILTER_PROPERTY_VIEW_STATE] ) {\n\t\techo lang_get( 'public' );\n\t} else if( VS_PRIVATE === $t_filter[FILTER_PROPERTY_VIEW_STATE] ) {\n\t\techo lang_get( 'private' );\n\t} else {\n\t\techo lang_get( 'any' );\n\t\t$t_filter[FILTER_PROPERTY_VIEW_STATE] = META_FILTER_ANY;\n\t}\n\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_VIEW_STATE, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_VIEW_STATE] ), '\" />';\n}\n\n/**\n * print view state field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_view_state( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- View Status -->\n\t\t<select class=\"input-xs\" name=\"<?php echo FILTER_PROPERTY_VIEW_STATE;?>\">\n\t\t\t<?php\n\t\t\techo '<option value=\"' . META_FILTER_ANY . '\"';\n\tcheck_selected( $p_filter[FILTER_PROPERTY_VIEW_STATE], META_FILTER_ANY );\n\techo '>[' . lang_get( 'any' ) . ']</option>';\n\techo '<option value=\"' . VS_PUBLIC . '\"';\n\tcheck_selected( $p_filter[FILTER_PROPERTY_VIEW_STATE], VS_PUBLIC );\n\techo '>' . lang_get( 'public' ) . '</option>';\n\techo '<option value=\"' . VS_PRIVATE . '\"';\n\tcheck_selected( $p_filter[FILTER_PROPERTY_VIEW_STATE], VS_PRIVATE );\n\techo '>' . lang_get( 'private' ) . '</option>';\n\t?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_sticky_issues( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_sticky_filter_state = gpc_string_to_bool( $t_filter[FILTER_PROPERTY_STICKY] );\n\tprint( $t_sticky_filter_state ? lang_get( 'yes' ) : lang_get( 'no' ) );\n\t?>\n\t<input type=\"hidden\" name=\"<?php\n\t\techo FILTER_PROPERTY_STICKY; ?>\" value=\"<?php\n\t\techo $t_sticky_filter_state ? 'on' : 'off'; ?>\" />\n\t<?php\n}\n\n/**\n * print sticky issues field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_sticky_issues( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Show or hide sticky bugs -->\n\t\t\t<input type=\"hidden\" name=\"<?php echo FILTER_PROPERTY_STICKY ?>\" value=\"<?php echo OFF ?>\">\n            <label>\n\t\t\t    <input class=\"input-xs ace\" type=\"checkbox\" name=\"<?php echo FILTER_PROPERTY_STICKY;?>\"<?php check_checked( gpc_string_to_bool( $p_filter[FILTER_PROPERTY_STICKY] ), true );?> />\n\t\t\t    <span class=\"lbl\"></span>\n            </label>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_highlight_changed( array $p_filter ) {\n\t$t_filter = $p_filter;\n\techo $t_filter[FILTER_PROPERTY_HIGHLIGHT_CHANGED];\n\t\t?>\n\t\t<input type=\"hidden\"\n\t\t\tname=\"<?php echo FILTER_PROPERTY_HIGHLIGHT_CHANGED; ?>\"\n\t\t\tvalue=\"<?php echo string_attribute( $t_filter[FILTER_PROPERTY_HIGHLIGHT_CHANGED] ); ?>\">\n\t\t<?php\n}\n\n/**\n * print highlight changed field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_highlight_changed( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?><!-- Highlight changed bugs -->\n\t\t\t<input class=\"input-xs\" type=\"text\" name=\"<?php echo FILTER_PROPERTY_HIGHLIGHT_CHANGED;?>\" size=\"3\" maxlength=\"7\" value=\"<?php echo $p_filter[FILTER_PROPERTY_HIGHLIGHT_CHANGED]?>\" />\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_do_filter_by_date( array $p_filter ) {\n\t$t_filter = $p_filter;\n\tif( 'on' == $t_filter[FILTER_PROPERTY_FILTER_BY_DATE_SUBMITTED] ) {\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_FILTER_BY_DATE_SUBMITTED, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_FILTER_BY_DATE_SUBMITTED] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_START_MONTH, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_START_MONTH] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_START_DAY, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_START_DAY] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_START_YEAR, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_START_YEAR] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_END_MONTH, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_END_MONTH] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_END_DAY, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_END_DAY] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_END_YEAR, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_END_YEAR] ), '\" />';\n\n\t\t$t_chars = preg_split( '//', config_get( 'short_date_format' ), -1, PREG_SPLIT_NO_EMPTY );\n\t\t$t_time = mktime( 0, 0, 0, $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_START_MONTH], $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_START_DAY], $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_START_YEAR] );\n\t\tforeach( $t_chars as $t_char ) {\n\t\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo lang_get( 'month_' . strtolower ( date( 'F', $t_time ) ) );\n\t\t\t}\n\t\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo date( 'd', $t_time );\n\t\t\t}\n\t\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo date( 'Y', $t_time );\n\t\t\t}\n\t\t}\n\n\t\techo ' - ';\n\n\t\t$t_time = mktime( 0, 0, 0, $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_END_MONTH], $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_END_DAY], $t_filter[FILTER_PROPERTY_DATE_SUBMITTED_END_YEAR] );\n\t\tforeach( $t_chars as $t_char ) {\n\t\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo lang_get( 'month_' . strtolower ( date( 'F', $t_time ) ) );\n\t\t\t}\n\t\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo date( 'd', $t_time );\n\t\t\t}\n\t\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo date( 'Y', $t_time );\n\t\t\t}\n\t\t}\n\t} else {\n\t\techo lang_get( 'no' );\n\t}\n}\n\n/**\n * Print filter by date fields\n * @global array $g_filter\n * @param boolean $p_hide_checkbox Hide data filter checkbox.\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_do_filter_by_date( $p_hide_checkbox = false, array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n?>\n\t\t<table cellspacing=\"0\" cellpadding=\"0\">\n<?php\n\t$t_menu_disabled =  '';\n\tif( !$p_hide_checkbox ) {\n?>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">\n\t\t\t\t<input type=\"hidden\" name=\"<?php echo FILTER_PROPERTY_FILTER_BY_DATE_SUBMITTED ?>\" value=\"<?php echo OFF ?>\" />\n\t\t\t\t<label>\n\t\t\t\t\t<input class=\"input-xs ace js_switch_date_inputs_trigger\" type=\"checkbox\" id=\"use_date_filters\" class=\"input-xs\"\n\t\t\t\t\t\tname=\"<?php echo FILTER_PROPERTY_FILTER_BY_DATE_SUBMITTED ?>\"\n\t\t\t\t\t\t<?php check_checked( gpc_string_to_bool( $p_filter[FILTER_PROPERTY_FILTER_BY_DATE_SUBMITTED] ), true ) ?> />\n\t\t\t\t\t<span class=\"lbl padding-6 small\"><?php echo lang_get( 'use_date_filters' )?></span>\n\t\t\t\t</label>\n\t\t\t</td>\n\t\t</tr>\n<?php\n\n\t\tif( ON != $p_filter[FILTER_PROPERTY_FILTER_BY_DATE_SUBMITTED] ) {\n\t\t\t$t_menu_disabled = ' disabled=\"disabled\" ';\n\t\t}\n\t}\n?>\n\n\t\t<!-- Start date -->\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<?php echo lang_get( 'start_date_label' )?>\n\t\t\t</td>\n\t\t\t<td class=\"nowrap\">\n\t\t\t<?php\n\t\t\t$t_chars = preg_split( '//', config_get( 'short_date_format' ), -1, PREG_SPLIT_NO_EMPTY );\n\tforeach( $t_chars as $t_char ) {\n\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_START_MONTH, '\"', $t_menu_disabled, '>';\n\t\t\tprint_month_option_list( $p_filter[FILTER_PROPERTY_DATE_SUBMITTED_START_MONTH] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_START_DAY, '\"', $t_menu_disabled, '>';\n\t\t\tprint_day_option_list( $p_filter[FILTER_PROPERTY_DATE_SUBMITTED_START_DAY] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_START_YEAR, '\"', $t_menu_disabled, '>';\n\t\t\tprint_year_option_list( $p_filter[FILTER_PROPERTY_DATE_SUBMITTED_START_YEAR] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t}\n\t?>\n\t\t\t</td>\n\t\t</tr>\n\t\t<!-- End date -->\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<?php echo lang_get( 'end_date_label' )?>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<?php\n\t\t\t$t_chars = preg_split( '//', config_get( 'short_date_format' ), -1, PREG_SPLIT_NO_EMPTY );\n\tforeach( $t_chars as $t_char ) {\n\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_END_MONTH, '\"', $t_menu_disabled, '>';\n\t\t\tprint_month_option_list( $p_filter[FILTER_PROPERTY_DATE_SUBMITTED_END_MONTH] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_END_DAY, '\"', $t_menu_disabled, '>';\n\t\t\tprint_day_option_list( $p_filter[FILTER_PROPERTY_DATE_SUBMITTED_END_DAY] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_DATE_SUBMITTED_END_YEAR, '\"', $t_menu_disabled, '>';\n\t\t\tprint_year_option_list( $p_filter[FILTER_PROPERTY_DATE_SUBMITTED_END_YEAR] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t}\n\t?>\n\t\t\t</td>\n\t\t</tr>\n\t\t</table>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_do_filter_by_last_updated_date( array $p_filter ) {\n\t$t_filter = $p_filter;\n\tif( 'on' == $t_filter[FILTER_PROPERTY_FILTER_BY_LAST_UPDATED_DATE] ) {\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_FILTER_BY_LAST_UPDATED_DATE, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_FILTER_BY_LAST_UPDATED_DATE] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_LAST_UPDATED_START_MONTH, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_LAST_UPDATED_START_MONTH] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_LAST_UPDATED_START_DAY, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_LAST_UPDATED_START_DAY] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_LAST_UPDATED_START_YEAR, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_LAST_UPDATED_START_YEAR] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_LAST_UPDATED_END_MONTH, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_LAST_UPDATED_END_MONTH] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_LAST_UPDATED_END_DAY, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_LAST_UPDATED_END_DAY] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_LAST_UPDATED_END_YEAR, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_LAST_UPDATED_END_YEAR] ), '\" />';\n\n\t\t$t_chars = preg_split( '//', config_get( 'short_date_format' ), -1, PREG_SPLIT_NO_EMPTY );\n\t\t$t_time = mktime( 0, 0, 0, $t_filter[FILTER_PROPERTY_LAST_UPDATED_START_MONTH], $t_filter[FILTER_PROPERTY_LAST_UPDATED_START_DAY], $t_filter[FILTER_PROPERTY_LAST_UPDATED_START_YEAR] );\n\t\tforeach( $t_chars as $t_char ) {\n\t\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo lang_get( 'month_' . strtolower (date( 'F', $t_time ) ) );\n\t\t\t}\n\t\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo date( 'd', $t_time );\n\t\t\t}\n\t\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo date( 'Y', $t_time );\n\t\t\t}\n\t\t}\n\n\t\techo ' - ';\n\n\t\t$t_time = mktime( 0, 0, 0, $t_filter[FILTER_PROPERTY_LAST_UPDATED_END_MONTH], $t_filter[FILTER_PROPERTY_LAST_UPDATED_END_DAY], $t_filter[FILTER_PROPERTY_LAST_UPDATED_END_YEAR] );\n\t\tforeach( $t_chars as $t_char ) {\n\t\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo lang_get( 'month_' . strtolower ( date( 'F', $t_time ) ) );\n\t\t\t}\n\t\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo date( 'd', $t_time );\n\t\t\t}\n\t\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\t\techo ' ';\n\t\t\t\techo date( 'Y', $t_time );\n\t\t\t}\n\t\t}\n\t} else {\n\t\techo lang_get( 'no' );\n\t}\n}\n\n/**\n * Print filter by last update date fields\n * @global array $g_filter\n * @param boolean $p_hide_checkbox Hide data filter checkbox.\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_do_filter_by_last_updated_date( $p_hide_checkbox = false, array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n?>\n\t\t<table cellspacing=\"0\" cellpadding=\"0\">\n<?php\n\t$t_menu_disabled =  '';\n\tif( !$p_hide_checkbox ) {\n?>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">\n\t\t\t\t<input type=\"hidden\" name=\"<?php echo FILTER_PROPERTY_FILTER_BY_LAST_UPDATED_DATE ?>\" value=\"<?php echo OFF ?>\" />\n\t\t\t\t<label>\n\t\t\t\t\t<input class=\"input-xs ace js_switch_date_inputs_trigger\" type=\"checkbox\" id=\"use_last_updated_date_filters\" class=\"input-xs\"\n\t\t\t\t\t\tname=\"<?php echo FILTER_PROPERTY_FILTER_BY_LAST_UPDATED_DATE ?>\"\n\t\t\t\t\t\t<?php check_checked( gpc_string_to_bool( $p_filter[FILTER_PROPERTY_FILTER_BY_LAST_UPDATED_DATE] ), true ) ?> />\n\t\t\t\t\t<span class=\"lbl padding-6 small\"><?php echo lang_get( 'use_last_updated_date_filters' )?></span>\n\t\t\t\t</label>\n\t\t\t</td>\n\t\t</tr>\n<?php\n\n\t\tif( ON != $p_filter[FILTER_PROPERTY_FILTER_BY_LAST_UPDATED_DATE] ) {\n\t\t\t$t_menu_disabled = ' disabled=\"disabled\" ';\n\t\t}\n\t}\n?>\n\n\t\t<!-- Start date -->\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<?php echo lang_get( 'start_date_label' )?>\n\t\t\t</td>\n\t\t\t<td class=\"nowrap\">\n\t\t\t<?php\n\t\t\t$t_chars = preg_split( '//', config_get( 'short_date_format' ), -1, PREG_SPLIT_NO_EMPTY );\n\tforeach( $t_chars as $t_char ) {\n\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_LAST_UPDATED_START_MONTH, '\"', $t_menu_disabled, '>';\n\t\t\tprint_month_option_list( $p_filter[FILTER_PROPERTY_LAST_UPDATED_START_MONTH] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_LAST_UPDATED_START_DAY, '\"', $t_menu_disabled, '>';\n\t\t\tprint_day_option_list( $p_filter[FILTER_PROPERTY_LAST_UPDATED_START_DAY] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_LAST_UPDATED_START_YEAR, '\"', $t_menu_disabled, '>';\n\t\t\tprint_year_option_list( $p_filter[FILTER_PROPERTY_LAST_UPDATED_START_YEAR] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t}\n\t?>\n\t\t\t</td>\n\t\t</tr>\n\t\t<!-- End date -->\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<?php echo lang_get( 'end_date_label' )?>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<?php\n\t\t\t$t_chars = preg_split( '//', config_get( 'short_date_format' ), -1, PREG_SPLIT_NO_EMPTY );\n\tforeach( $t_chars as $t_char ) {\n\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_LAST_UPDATED_END_MONTH, '\"', $t_menu_disabled, '>';\n\t\t\tprint_month_option_list( $p_filter[FILTER_PROPERTY_LAST_UPDATED_END_MONTH] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_LAST_UPDATED_END_DAY, '\"', $t_menu_disabled, '>';\n\t\t\tprint_day_option_list( $p_filter[FILTER_PROPERTY_LAST_UPDATED_END_DAY] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_LAST_UPDATED_END_YEAR, '\"', $t_menu_disabled, '>';\n\t\t\tprint_year_option_list( $p_filter[FILTER_PROPERTY_LAST_UPDATED_END_YEAR] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t}\n\t?>\n\t\t\t</td>\n\t\t</tr>\n\t\t</table>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_relationship_type( array $p_filter ) {\n\t$t_filter = $p_filter;\n\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_RELATIONSHIP_TYPE, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_RELATIONSHIP_TYPE] ), '\" />';\n\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_RELATIONSHIP_BUG, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_RELATIONSHIP_BUG] ), '\" />';\n\t$c_rel_type = $t_filter[FILTER_PROPERTY_RELATIONSHIP_TYPE];\n\t$c_rel_bug = $t_filter[FILTER_PROPERTY_RELATIONSHIP_BUG];\n\tif( BUG_REL_ANY == $c_rel_type ) {\n\t\tswitch ( $c_rel_bug ) {\n\t\t\tcase META_FILTER_NONE:\n\t\t\t\techo lang_get( 'none' );\n\t\t\t\tbreak;\n\t\t\tcase META_FILTER_ANY:\n\t\t\t\techo lang_get( 'any' );\n\t\t\t\tbreak;\n\t\t\tdefault;\n\t\t\t\techo lang_get( 'any' ),' ' , lang_get( 'with' ), ' ', $c_rel_bug;\n\t\t}\n\t} elseif( BUG_REL_NONE == $c_rel_type ) {\n\t\techo lang_get( 'none' );\n\t\tswitch ( $c_rel_bug ) {\n\t\t\tcase META_FILTER_NONE:\n\t\t\tcase META_FILTER_ANY:\n\t\t\t\tbreak;\n\t\t\tdefault;\n\t\t\t\techo ' ', lang_get( 'with' ), ' ', $c_rel_bug;\n\t\t}\n\t} else {\n\t\techo relationship_get_description_for_history( $c_rel_type ) . ' ';\n\t\tswitch ( $c_rel_bug ) {\n\t\t\tcase META_FILTER_NONE:\n\t\t\t\techo lang_get( 'none' );\n\t\t\t\tbreak;\n\t\t\tcase META_FILTER_ANY:\n\t\t\t\techo lang_get( 'any' );\n\t\t\t\tbreak;\n\t\t\tdefault;\n\t\t\t\techo $c_rel_bug;\n\t\t}\n\t}\n}\n\n/**\n * print relationship fields\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_relationship_type( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t$c_reltype_value = $p_filter[FILTER_PROPERTY_RELATIONSHIP_TYPE];\n\trelationship_list_box( $c_reltype_value, 'relationship_type', true, true, \"input-xs\" );\n\techo '<input class=\"input-xs\" type=\"text\" name=\"', FILTER_PROPERTY_RELATIONSHIP_BUG, '\" size=\"5\" maxlength=\"10\" value=\"', $p_filter[FILTER_PROPERTY_RELATIONSHIP_BUG], '\" />';\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_tag_string( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_tag_string = $t_filter[FILTER_PROPERTY_TAG_STRING];\n\tif( $t_filter[FILTER_PROPERTY_TAG_SELECT] != 0 && tag_exists( $t_filter[FILTER_PROPERTY_TAG_SELECT] ) ) {\n\t\t$t_tag_string .= ( is_blank( $t_tag_string ) ? '' : config_get( 'tag_separator' ) );\n\t\t$t_tag_string .= tag_get_field( $t_filter[FILTER_PROPERTY_TAG_SELECT], 'name' );\n\t}\n\techo string_html_entities( $t_tag_string );\n\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_TAG_STRING, '\" value=\"', string_attribute( $t_tag_string ), '\" />';\n}\n\n/**\n * print tag fields\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_tag_string( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( !access_has_project_level( config_get( 'tag_view_threshold' ) ) ) {\n\t\treturn;\n\t}\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t$t_tag_string = $p_filter[FILTER_PROPERTY_TAG_STRING];\n\tif( $p_filter[FILTER_PROPERTY_TAG_SELECT] != 0 && tag_exists( $p_filter[FILTER_PROPERTY_TAG_SELECT] ) ) {\n\t\t$t_tag_string .= ( is_blank( $t_tag_string ) ? '' : config_get( 'tag_separator' ) );\n\t\t$t_tag_string .= tag_get_field( $p_filter[FILTER_PROPERTY_TAG_SELECT], 'name' );\n\t}\n\t?>\n\t\t<input type=\"hidden\" id=\"tag_separator\" value=\"<?php echo config_get( 'tag_separator' )?>\" />\n\t\t<input class=\"input-xs\" type=\"text\" name=\"<?php echo FILTER_PROPERTY_TAG_STRING;?>\" id=\"<?php echo FILTER_PROPERTY_TAG_STRING;?>\" size=\"25\" value=\"<?php echo string_attribute( $t_tag_string )?>\" />\n\t\t<select class=\"input-xs\" <?php echo helper_get_tab_index()?> name=\"<?php echo FILTER_PROPERTY_TAG_SELECT;?>\" id=\"<?php echo FILTER_PROPERTY_TAG_SELECT;?>\">\n\t\t\t<?php print_tag_option_list();?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n */\nfunction print_filter_values_note_user_id( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\t$t_any_found = false;\n\tif( count( $t_filter[FILTER_PROPERTY_NOTE_USER_ID] ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_NOTE_USER_ID] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_NOTE_USER_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t$t_this_name = '';\n\t\t\tif( filter_field_is_none( $t_current ) ) {\n\t\t\t\t$t_this_name = lang_get( 'none' );\n\t\t\t} else if( filter_field_is_any( $t_current ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else if( filter_field_is_myself( $t_current ) ) {\n\t\t\t\tif( access_has_project_level( config_get( 'handle_bug_threshold' ) ) ) {\n\t\t\t\t\t$t_this_name = '[' . lang_get( 'myself' ) . ']';\n\t\t\t\t} else {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$t_this_name = user_get_name( $t_current );\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_name );\n\t\t}\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n/**\n * print note reporter field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_note_user_id( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?>\n\t<!-- BUGNOTE REPORTER -->\n\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_NOTE_USER_ID;?>[]\">\n\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_NOTE_USER_ID], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t<?php if( access_has_project_level( config_get( 'view_handler_threshold' ) ) ) {?>\n\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $p_filter[FILTER_PROPERTY_NOTE_USER_ID], META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t<?php\n\t\t\tif( access_has_project_level( config_get( 'handle_bug_threshold' ) ) ) {\n\t\t\t\techo '<option value=\"' . META_FILTER_MYSELF . '\"';\n\t\t\t\tcheck_selected( $p_filter[FILTER_PROPERTY_NOTE_USER_ID], META_FILTER_MYSELF );\n\t\t\t\techo '>[' . lang_get( 'myself' ) . ']</option>';\n\t\t\t}\n\n\t\t\tprint_note_option_list( $p_filter[FILTER_PROPERTY_NOTE_USER_ID] );\n\t\t}\n\t?>\n\t</select>\n\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\t\t\tFilter array\n * @param string $p_field_name\t\tField name\n * @param object $p_filter_object\tFilter object\n * @return void\n */\nfunction print_filter_values_plugin_field( array $p_filter, $p_field_name, $p_filter_object ) {\n\tif( !isset( $p_filter[$p_field_name] ) ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_value = $p_filter[$p_field_name];\n\t\tswitch( $p_filter_object->type ) {\n\t\t\tcase FILTER_TYPE_STRING:\n\t\t\tcase FILTER_TYPE_INT:\n\t\t\t\tif( filter_field_is_any( $t_value ) ) {\n\t\t\t\t\techo lang_get( 'any' );\n\t\t\t\t} else {\n\t\t\t\t\techo string_display_line( $t_value );\n\t\t\t\t}\n\t\t\t\techo '<input type=\"hidden\" name=\"' . string_attribute( $p_field_name ) . '\" value=\"' . string_attribute( $t_value ) . '\">';\n\t\t\t\tbreak;\n\n\t\t\tcase FILTER_TYPE_BOOLEAN:\n\t\t\t\techo string_display_line( $p_filter_object->display( (bool)$t_value ) );\n\t\t\t\techo '<input type=\"hidden\" name=\"' . string_attribute( $p_field_name ) . '\" value=\"' . (bool)$t_value . '\">';\n\t\t\t\tbreak;\n\n\t\t\tcase FILTER_TYPE_MULTI_STRING:\n\t\t\tcase FILTER_TYPE_MULTI_INT:\n\t\t\t\tif( !is_array( $t_value ) ) {\n\t\t\t\t\t$t_value = array( $t_value );\n\t\t\t\t}\n\t\t\t\t$t_strings = array();\n\t\t\t\tforeach( $t_value as $t_current ) {\n\t\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t\t$t_strings[] = lang_get( 'any' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_strings[] = string_display_line( $p_filter_object->display( $t_current ) );\n\t\t\t\t\t}\n\t\t\t\t\techo '<input type=\"hidden\" name=\"' . string_attribute( $p_field_name ) . '[]\" value=\"' . string_attribute( $t_current ) . '\">';\n\t\t\t\t}\n\t\t\t\techo implode( '<br>', $t_strings );\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\n/**\n * Print plugin filter fields as defined by MantisFilter objects.\n * @global array $g_filter\n * @param string $p_field_name    Field name.\n * @param object $p_filter_object Filter object.\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_plugin_field( $p_field_name, $p_filter_object, array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\n\t$t_size = (int)$p_filter_object->size;\n\n\tswitch( $p_filter_object->type ) {\n\t\tcase FILTER_TYPE_STRING:\n\t\t\techo '<input class=\"input-xs\" name=\"', string_attribute( $p_field_name ), '\"',\n\t\t\t\t( $t_size > 0 ? ' size=\"' . $t_size . '\"' : '' ), ' value=\"',\n\t\t\t\tstring_attribute( $p_filter[$p_field_name] ), '\"/>';\n\t\t\tbreak;\n\n\t\tcase FILTER_TYPE_INT:\n\t\t\techo '<input class=\"input-xs\" name=\"', string_attribute( $p_field_name ), '\"',\n\t\t\t\t( $t_size > 0 ? ' size=\"' . $t_size . '\"' : '' ), ' value=\"',\n\t\t\t\t(int)$p_filter[$p_field_name], '\"/>';\n\t\t\tbreak;\n\n\t\tcase FILTER_TYPE_BOOLEAN:\n\t\t\techo '<input name=\"', string_attribute( $p_field_name ), '\" type=\"hidden\" value=\"', OFF ,'\"/>';\n\t\t\techo '<label>';\n\t\t\techo '<input class=\"input-xs\" name=\"', string_attribute( $p_field_name ), '\" type=\"checkbox\"',\n\t\t\t\t( $t_size > 0 ? ' size=\"' . $t_size . '\"' : '' ), check_checked( (bool)$p_filter[$p_field_name] ) , '\"/>';\n\t\t\techo '<span class=\"lbl\"></span>';\n\t\t\techo '</label>';\n\t\t\tbreak;\n\n\t\tcase FILTER_TYPE_MULTI_STRING:\n\t\t\techo '<select class=\"input-xs\" ' . filter_select_modifier( $p_filter ) . ( $t_size > 0 ? ' size=\"' . $t_size . '\"' : '' ), ' name=\"',\n\t\t\t\tstring_attribute( $p_field_name ), '[]\">', '<option value=\"', META_FILTER_ANY, '\"',\n\t\t\t\tcheck_selected( $p_filter[$p_field_name], (string)META_FILTER_ANY ), '>[', lang_get( 'any' ), ']</option>';\n\n\t\t\tforeach( $p_filter_object->options() as $t_option_value => $t_option_name ) {\n\t\t\t\techo '<option value=\"', string_attribute( $t_option_value ), '\" ',\n\t\t\t\t\tcheck_selected( $p_filter[$p_field_name], $t_option_value, false ), '>',\n\t\t\t\t\tstring_display_line( $t_option_name ), '</option>';\n\t\t\t}\n\n\t\t\techo '</select>';\n\t\t\tbreak;\n\n\t\tcase FILTER_TYPE_MULTI_INT:\n\t\t\techo '<select class=\"input-xs\"' . filter_select_modifier( $p_filter ) . ( $t_size > 0 ? ' size=\"' . $t_size . '\"' : '' ), ' name=\"',\n\t\t\t\tstring_attribute( $p_field_name ), '[]\">', '<option value=\"', META_FILTER_ANY, '\"',\n\t\t\t\tcheck_selected( $p_filter[$p_field_name], META_FILTER_ANY ), '>[', lang_get( 'any' ), ']</option>';\n\n\t\t\tforeach( $p_filter_object->options() as $t_option_value => $t_option_name ) {\n\t\t\t\techo '<option value=\"', (int)$t_option_value, '\" ',\n\t\t\t\t\tcheck_selected( $p_filter[$p_field_name], (int)$t_option_value ), '>',\n\t\t\t\t\tstring_display_line( $t_option_name ), '</option>';\n\t\t\t}\n\n\t\t\techo '</select>';\n\t\t\tbreak;\n\t}\n}\n\n/**\n * Print the current value of custom field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array to use\n * @param integer $p_field_id\tCustom field id\n * @return void\n */\nfunction print_filter_values_custom_field( array $p_filter, $p_field_id ) {\n\tif( CUSTOM_FIELD_TYPE_DATE == custom_field_type( $p_field_id ) ) {\n\t\tprint_filter_values_custom_field_date( $p_filter, $p_field_id );\n\t\treturn;\n\t}\n\n\tif( isset( $p_filter['custom_fields'][$p_field_id] ) ) {\n\t\t$t_values = $p_filter['custom_fields'][$p_field_id];\n\t} else {\n\t\t$t_values = array();\n\t}\n\t$t_strings = array();\n\t$t_inputs = array();\n\n\tif( filter_field_is_any( $t_values ) ) {\n\t\t$t_strings[] = lang_get( 'any' );\n\t} else {\n\t\tforeach( $t_values as $t_val ) {\n\t\t\t$t_val = stripslashes( $t_val );\n\t\t\tif( filter_field_is_none( $t_val ) ) {\n\t\t\t\t$t_strings[] = lang_get( 'none' );\n\t\t\t} else {\n\t\t\t\t$t_strings[] = $t_val;\n\t\t\t}\n\t\t\t$t_inputs[] = '<input type=\"hidden\" name=\"custom_field_' . $p_field_id . '[]\" value=\"' . string_attribute( $t_val ) . '\" />';\n\t\t}\n\t}\n\n\techo implode( '<br>', $t_strings );\n\techo implode( '', $t_inputs );\n}\n\n/**\n * Print the current value of this filter field (for a date type field), as visible string,\n * and as a hidden form input.\n * @param array $p_filter\tFilter array to use\n * @param integer $p_field_id\tCustom field id\n * @return void\n */\nfunction print_filter_values_custom_field_date( array $p_filter, $p_field_id ) {\n\t$t_short_date_format = config_get( 'short_date_format' );\n\tif( !isset( $p_filter['custom_fields'][$p_field_id][1] ) ) {\n\t\t$p_filter['custom_fields'][$p_field_id][1] = 0;\n\t}\n\t$t_start = date( $t_short_date_format, $p_filter['custom_fields'][$p_field_id][1] );\n\n\tif( !isset( $p_filter['custom_fields'][$p_field_id][2] ) ) {\n\t\t$p_filter['custom_fields'][$p_field_id][2] = 0;\n\t}\n\t$t_end = date( $t_short_date_format, $p_filter['custom_fields'][$p_field_id][2] );\n\tswitch( $p_filter['custom_fields'][$p_field_id][0] ) {\n\t\tcase CUSTOM_FIELD_DATE_ANY:\n\t\t\techo lang_get( 'any' );\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_NONE:\n\t\t\techo lang_get( 'none' );\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_BETWEEN:\n\t\t\techo lang_get( 'between_date' ) . '<br>';\n\t\t\techo $t_start . '<br>' . $t_end;\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_ONORBEFORE:\n\t\t\techo lang_get( 'on_or_before_date' ) . '<br>';\n\t\t\techo $t_end;\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_BEFORE:\n\t\t\techo lang_get( 'before_date' ) . '<br>';\n\t\t\techo $t_end;\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_ON:\n\t\t\techo lang_get( 'on_date' ) . '<br>';\n\t\t\techo $t_start;\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_AFTER:\n\t\t\techo lang_get( 'after_date' ) . '<br>';\n\t\t\techo $t_start;\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_ONORAFTER:\n\t\t\techo lang_get( 'on_or_after_date' ) . '<br>';\n\t\t\techo $t_start;\n\t\t\tbreak;\n\t}\n\t# print hidden inputs\n\t$t_cf = $p_filter['custom_fields'][$p_field_id];\n\techo '<input type=\"hidden\" name=\"custom_field_' . $p_field_id . '_control\" value=\"' . $t_cf[0] . '\">';\n\techo '<input type=\"hidden\" name=\"custom_field_' . $p_field_id . '_start_timestamp\" value=\"' . $t_cf[1] . '\">';\n\techo '<input type=\"hidden\" name=\"custom_field_' . $p_field_id . '_end_timestamp\" value=\"' . $t_cf[2] . '\">';\n}\n\n\n/**\n * Print custom field input list.\n * This function does not validates permissions\n * @global array $g_filter\n * @param integer $p_field_id\tCustom field id\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_custom_field( $p_field_id, array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\n\t$t_cfdef = custom_field_get_definition( $p_field_id );\n\n\tswitch( $t_cfdef['type'] ) {\n\t\tcase CUSTOM_FIELD_TYPE_DATE:\n\t\t\tprint_filter_custom_field_date( $p_field_id, $p_filter );\n\t\t\tbreak;\n\n\t\tcase CUSTOM_FIELD_TYPE_TEXTAREA:\n\t\t\techo '<input class=\"input-xs\" type=\"text\" name=\"custom_field_', $p_field_id, '\" size=\"10\" value=\"\" >';\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\techo '<select class=\"input-xs\" ' . filter_select_modifier( $p_filter ) . ' name=\"custom_field_' . $p_field_id . '[]\">';\n\t\t\t# Option META_FILTER_ANY\n\t\t\techo '<option value=\"' . META_FILTER_ANY . '\"';\n\t\t\tcheck_selected( $p_filter['custom_fields'][$p_field_id], META_FILTER_ANY, false );\n\t\t\techo '>[' . lang_get( 'any' ) . ']</option>';\n\t\t\t# don't show META_FILTER_NONE for enumerated types as it's not possible for them to be blank\n\t\t\tif( !in_array( $t_cfdef['type'], array( CUSTOM_FIELD_TYPE_ENUM, CUSTOM_FIELD_TYPE_LIST, CUSTOM_FIELD_TYPE_MULTILIST ) ) ) {\n\t\t\t\techo '<option value=\"' . META_FILTER_NONE . '\"';\n\t\t\t\tcheck_selected( $p_filter['custom_fields'][$p_field_id], META_FILTER_NONE, false );\n\t\t\t\techo '>[' . lang_get( 'none' ) . ']</option>';\n\t\t\t}\n\t\t\t# Print possible values\n\t\t\t$t_included_projects = filter_get_included_projects( $p_filter );\n\t\t\t$t_values = custom_field_distinct_values( $t_cfdef, $t_included_projects );\n\t\t\tif( is_array( $t_values ) ){\n\t\t\t\t$t_max_length = config_get( 'max_dropdown_length' );\n\t\t\t\tforeach( $t_values as $t_val ) {\n\t\t\t\t\tif( filter_field_is_any($t_val) || filter_field_is_none( $t_val ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\techo '<option value=\"' . string_attribute( $t_val ) . '\"';\n\t\t\t\t\tif( isset( $p_filter['custom_fields'][$p_field_id] ) ) {\n\t\t\t\t\t\tcheck_selected( $p_filter['custom_fields'][$p_field_id], $t_val, false );\n\t\t\t\t\t}\n\t\t\t\t\techo '>' . string_attribute( string_shorten( $t_val, $t_max_length ) ) . '</option>';\n\t\t\t\t}\n\t\t\t}\n\t\t\techo '</select>';\n\t\t\tbreak;\n\t}\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_show_sort( array $p_filter ) {\n\t$p_sort_properties = filter_get_visible_sort_properties_array( $p_filter );\n\t$t_sort_fields = $p_sort_properties[FILTER_PROPERTY_SORT_FIELD_NAME];\n\t$t_dir_fields = $p_sort_properties[FILTER_PROPERTY_SORT_DIRECTION];\n\n\t# @TODO cproensa: this could be a constant, or conffig.\n\t$t_max_displayed_sort = 2;\n\n\t$t_count = count( $t_sort_fields );\n\tfor( $i = 0; $i < $t_count; $i++ ) {\n\t\t# Only show the first sort columns\n\t\tif( $i< $t_max_displayed_sort ) {\n\t\t\tif( $i > 0 ) {\n\t\t\t\techo ', ';\n\t\t\t}\n\t\t\t$t_sort = $t_sort_fields[$i];\n\t\t\tif(column_is_custom_field( $t_sort ) ) {\n\t\t\t\t$t_field_name = string_display( lang_get_defaulted( column_get_custom_field_name( $t_sort ) ) );\n\t\t\t} else {\n\t\t\t\t$t_field_name = string_get_field_name( $t_sort );\n\t\t\t}\n\t\t\techo $t_field_name . ' ' . lang_get( 'bugnote_order_' . mb_strtolower( $t_dir_fields[$i] ) );\n\t\t} elseif ( $i == $t_max_displayed_sort ) {\n\t\t\techo ', ...';\n\t\t}\n\t\t# All sort columns are placed in hidden fields\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_SORT_FIELD_NAME, '[]\" value=\"', string_attribute( $t_sort_fields[$i] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_SORT_DIRECTION, '[]\" value=\"', string_attribute( $t_dir_fields[$i] ), '\" />';\n\t}\n}\n\n/**\n * Print sort fields\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_show_sort( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\n\t# get visible columns, and filter out those that ar not sortable\n\t$t_visible_columns = array_filter( helper_get_columns_to_view(), 'column_is_sortable' );\n\n\t$t_shown_fields[''] = '';\n\tforeach( $t_visible_columns as $t_column ) {\n\t\tif(column_is_custom_field( $t_column ) ) {\n\t\t\t$t_field_name = string_display( lang_get_defaulted( column_get_custom_field_name( $t_column ) ) );\n\t\t} else {\n\t\t\t$t_field_name = string_get_field_name( $t_column );\n\t\t}\n\t\t$t_shown_fields[$t_column] = $t_field_name;\n\t}\n\t$t_shown_dirs[''] = '';\n\t$t_shown_dirs['ASC'] = lang_get( 'bugnote_order_asc' );\n\t$t_shown_dirs['DESC'] = lang_get( 'bugnote_order_desc' );\n\n\t# get values from filter structure\n\t$p_sort_properties = filter_get_visible_sort_properties_array( $p_filter );\n\t$t_sort_fields = $p_sort_properties[FILTER_PROPERTY_SORT_FIELD_NAME];\n\t$t_dir_fields = $p_sort_properties[FILTER_PROPERTY_SORT_DIRECTION];\n\n\t# @TODO cproensa: this could be a constant, or conffig.\n\t$t_max_inputs_sort = 3;\n\n\t$t_print_select_inputs =\n\t\tfunction( $p_sort_val ='', $p_dir_val ='' ) use ( $t_shown_fields, $t_shown_dirs ) {\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_SORT_FIELD_NAME, '[]\">';\n\t\t\tforeach( $t_shown_fields as $t_key => $t_val ) {\n\t\t\t\techo '<option value=\"' . $t_key . '\"';\n\t\t\t\tcheck_selected( $t_key, $p_sort_val );\n\t\t\t\techo '>' . $t_val . '</option>';\n\t\t\t}\n\t\t\techo '</select>';\n\t\t\techo '<select class=\"input-xs\" name=\"', FILTER_PROPERTY_SORT_DIRECTION, '[]\">';\n\t\t\tforeach( $t_shown_dirs as $t_key => $t_val ) {\n\t\t\t\techo '<option value=\"' . $t_key . '\"';\n\t\t\t\tcheck_selected( $t_key, $p_dir_val );\n\t\t\t\techo '>' . $t_val . '</option>';\n\t\t\t}\n\t\t\techo '</select>';\n\t\t};\n\n\t# if there are fields to display, show the dropdowns\n\tif( count( $t_visible_columns ) > 0 ) {\n\t\t$t_field_count = count( $t_sort_fields );\n\t\t$t_count = min( $t_field_count, $t_max_inputs_sort );\n\t\tfor( $i = 0; $i < $t_count; $i++ ) {\n\t\t\tif( $i > 0 ) {\n\t\t\t\techo ', ';\n\t\t\t}\n\t\t\t$t_print_select_inputs( $t_sort_fields[$i], $t_dir_fields[$i] );\n\t\t}\n\t\t# If we can have more inputs displayed, print one more as empty.\n\t\tif( $t_field_count < $t_max_inputs_sort ) {\n\t\t\techo ', ';\n\t\t\t$t_print_select_inputs();\n\t\t}\n\t} else {\n\t\techo lang_get_defaulted( 'last_updated' ) . lang_get( 'bugnote_order_desc' );\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_SORT_FIELD_NAME, '_array[]\" value=\"last_updated\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_SORT_DIRECTION, '_array[]\" value=\"DESC\" />';\n\t}\n}\n\n/**\n * Print custom field date fields\n * @global array $g_filter\n * @param integer $p_field_id  Custom field identifier.\n * @param array $p_filter \tFilter array\n * @return void\n */\nfunction print_filter_custom_field_date( $p_field_id, array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t$t_cfdef = custom_field_get_definition( $p_field_id );\n\t$t_included_projects = filter_get_included_projects( $p_filter );\n\t$t_values = custom_field_distinct_values( $t_cfdef, $t_included_projects );\n\n\t# Resort the values so there ordered numerically, they are sorted as strings otherwise which\n\t# may be wrong for dates before early 2001.\n\tif( is_array( $t_values ) ) {\n\t\tarray_multisort( $t_values, SORT_NUMERIC, SORT_ASC );\n\t}\n\n\t$t_sel_start_year = null;\n\t$t_sel_end_year = null;\n\tif( isset( $t_values[0] ) ) {\n\t\t$t_sel_start_year = date( 'Y', $t_values[0] );\n\t}\n\t$t_count = count( $t_values );\n\tif( isset( $t_values[$t_count - 1] ) ) {\n\t\t$t_sel_end_year = date( 'Y', $t_values[$t_count - 1] );\n\t}\n\n\t$t_start = date( 'U' );\n\n\t# Default to today in filters..\n\t$t_end = $t_start;\n\n\tif( isset( $p_filter['custom_fields'][$p_field_id][1] ) ) {\n\t\t$t_start_time = $p_filter['custom_fields'][$p_field_id][1];\n\t} else {\n\t\t$t_start_time = 0;\n\t}\n\n\tif( isset( $p_filter['custom_fields'][$p_field_id][2] ) ) {\n\t\t$t_end_time = $p_filter['custom_fields'][$p_field_id][2];\n\t} else {\n\t\t$t_end_time = 0;\n\t}\n\n\t$t_start_disable = true;\n\t$t_end_disable = true;\n\n\t# if $p_filter['custom_fields'][$p_field_id][0] is not set (ie no filter),\n\t# we will drop through the following switch and use the default values\n\t# above, so no need to check if stuff is set or not.\n\tswitch( $p_filter['custom_fields'][$p_field_id][0] ) {\n\t\tcase CUSTOM_FIELD_DATE_ANY:\n\t\tcase CUSTOM_FIELD_DATE_NONE:\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_BETWEEN:\n\t\t\t$t_start_disable = false;\n\t\t\t$t_end_disable = false;\n\t\t\t$t_start = $t_start_time;\n\t\t\t$t_end = $t_end_time;\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_ONORBEFORE:\n\t\tcase CUSTOM_FIELD_DATE_BEFORE:\n\t\t\t$t_start_disable = false;\n\t\t\t$t_start = $t_end_time;\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_ON:\n\t\tcase CUSTOM_FIELD_DATE_AFTER:\n\t\tcase CUSTOM_FIELD_DATE_ONORAFTER:\n\t\t\t$t_start_disable = false;\n\t\t\t$t_start = $t_start_time;\n\t\t\tbreak;\n\t}\n\n\techo '<table cellspacing=\"0\" cellpadding=\"0\"><tr><td>' . \"\\n\";\n\techo '<select class=\"input-xs\" size=\"1\" name=\"custom_field_' . $p_field_id . '_control\">' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_ANY . '\"';\n\tcheck_selected( (int)$p_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_ANY );\n\techo '>' . lang_get( 'any' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_NONE . '\"';\n\tcheck_selected( (int)$p_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_NONE );\n\techo '>' . lang_get( 'none' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_BETWEEN . '\"';\n\tcheck_selected( (int)$p_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_BETWEEN );\n\techo '>' . lang_get( 'between_date' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_ONORBEFORE . '\"';\n\tcheck_selected( (int)$p_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_ONORBEFORE );\n\techo '>' . lang_get( 'on_or_before_date' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_BEFORE . '\"';\n\tcheck_selected( (int)$p_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_BEFORE );\n\techo '>' . lang_get( 'before_date' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_ON . '\"';\n\tcheck_selected( (int)$p_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_ON );\n\techo '>' . lang_get( 'on_date' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_AFTER . '\"';\n\tcheck_selected( (int)$p_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_AFTER );\n\techo '>' . lang_get( 'after_date' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_ONORAFTER . '\"';\n\tcheck_selected( (int)$p_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_ONORAFTER );\n\techo '>' . lang_get( 'on_or_after_date' ) . '</option>' . \"\\n\";\n\techo '</select>' . \"\\n\";\n\n\techo \"</td></tr>\\n<tr><td>\";\n\n\tprint_date_selection_set( 'custom_field_' . $p_field_id . '_start', config_get( 'short_date_format' ), $t_start, $t_start_disable, false, $t_sel_start_year, $t_sel_end_year, \"input-xs\" );\n\tprint \"</td></tr>\\n<tr><td>\";\n\tprint_date_selection_set( 'custom_field_' . $p_field_id . '_end', config_get( 'short_date_format' ), $t_end, $t_end_disable, false, $t_sel_start_year, $t_sel_end_year, \"input-xs\" );\n\tprint \"</td></tr>\\n</table>\";\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_project_id( array $p_filter ) {\n\t$t_filter = $p_filter;\n\t$t_output = '';\n\tif( !is_array( $t_filter[FILTER_PROPERTY_PROJECT_ID] ) ) {\n\t\t$t_filter[FILTER_PROPERTY_PROJECT_ID] = array(\n\t\t\t$t_filter[FILTER_PROPERTY_PROJECT_ID],\n\t\t);\n\t}\n\tif( count( $t_filter[FILTER_PROPERTY_PROJECT_ID] ) == 0 ) {\n\t\techo lang_get( 'current' );\n\t} else {\n\t\t$t_first_flag = true;\n\t\tforeach( $t_filter[FILTER_PROPERTY_PROJECT_ID] as $t_current ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_PROJECT_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\n\t\t\tif( META_FILTER_CURRENT == $t_current ) {\n\t\t\t\t$t_this_name = '[' . lang_get( 'current' ) . ']';\n\t\t\t} else {\n\t\t\t\t$t_this_name = project_get_name( $t_current, false );\n\t\t\t}\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\t\t\t$t_output = $t_output . string_display_line( $t_this_name );\n\t\t}\n\t\techo $t_output;\n\t}\n}\n\n/**\n * Print project field\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_project_id( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n\t?>\n\t\t<!-- Project -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_PROJECT_ID;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_CURRENT ?>\"\n\t\t\t\t<?php check_selected( $p_filter[FILTER_PROPERTY_PROJECT_ID], META_FILTER_CURRENT );?>>\n\t\t\t\t[<?php echo lang_get( 'current' )?>]\n\t\t\t</option>\n\t\t\t<?php print_project_option_list( $p_filter[FILTER_PROPERTY_PROJECT_ID] )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the current value of this filter field, as visible string, and as a hidden form input.\n * @param array $p_filter\tFilter array\n * @return void\n */\nfunction print_filter_values_match_type( array $p_filter ) {\n\t$t_filter = $p_filter;\n\tswitch( $t_filter[FILTER_PROPERTY_MATCH_TYPE] ) {\n\t\tcase FILTER_MATCH_ANY:\n\t\t\techo lang_get( 'filter_match_any' );\n\t\t\tbreak;\n\t\tcase FILTER_MATCH_ALL:\n\t\tdefault:\n\t\t\techo lang_get( 'filter_match_all' );\n\t\t\tbreak;\n\t}\n\t?>\n\t\t<input type=\"hidden\" name=\"match_type\" value=\"<?php echo $t_filter[FILTER_PROPERTY_MATCH_TYPE] ?>\"/>\n\t<?php\n}\n\n/**\n * Print filter match type selector\n * @global array $g_filter\n * @param array $p_filter Filter array\n * @return void\n */\nfunction print_filter_match_type( array $p_filter = null ) {\n\tglobal $g_filter;\n\tif( null === $p_filter ) {\n\t\t$p_filter = $g_filter;\n\t}\n?>\n\t\t<!-- Project -->\n\t\t<select class=\"input-xs\" <?php echo filter_select_modifier( $p_filter ) ?> name=\"<?php echo FILTER_PROPERTY_MATCH_TYPE;?>\">\n\t\t\t<option value=\"<?php echo FILTER_MATCH_ALL?>\" <?php check_selected( $p_filter[FILTER_PROPERTY_MATCH_TYPE], FILTER_MATCH_ALL );?>>[<?php echo lang_get( 'filter_match_all' )?>]</option>\n\t\t\t<option value=\"<?php echo FILTER_MATCH_ANY?>\" <?php check_selected( $p_filter[FILTER_PROPERTY_MATCH_TYPE], FILTER_MATCH_ANY );?>>[<?php echo lang_get( 'filter_match_any' )?>]</option>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Prints a multi-value filter field.\n * @param string $p_field_name  Field name.\n * @param mixed  $p_field_value Field value.\n * @return void\n */\nfunction print_multivalue_field( $p_field_name, $p_field_value ) {\n\t$t_output = '';\n\t$t_any_found = false;\n\n\tif( count( $p_field_value ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\n\t\t$t_field_value = is_array( $p_field_value ) ? $p_field_value : array( $p_field_value );\n\n\t\tforeach( $t_field_value as $t_current ) {\n\t\t\t$t_current = stripslashes( $t_current );\n\t\t\t?>\n\t\t\t\t<input type=\"hidden\" name=\"<?php echo string_attribute( $p_field_name )?>[]\" value=\"<?php echo string_attribute( $t_current );?>\" />\n\t\t\t\t<?php\n\t\t\t\t$t_this_string = '';\n\n\t\t\tif( ( ( $t_current == META_FILTER_ANY ) && ( is_numeric( $t_current ) ) ) || ( is_blank( $t_current ) ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else {\n\t\t\t\t$t_this_string = string_display( $t_current );\n\t\t\t}\n\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output .= '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\n\t\t\t$t_output .= $t_this_string;\n\t\t}\n\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n\n/**\n * Draw the table cells to view and edit a filter. This will usually be part of a form.\n * This method only prints the cells, not the table definition, or any other form element\n * outside of that.\n * A filter array is provided, to populate the fields.\n * The form will use javascript to show dynamic completion of fields (unless the\n * parameter $p_static is provided).\n * A page name can be provided to be used as a fallback script when javascript is\n * not available on the client, and the form was rendered with dynamic fields.\n * By default, the fallback is the current page.\n *\n * @param array $p_filter\tFilter array to show.\n * @param boolean $p_for_screen\tType of output\n * @param boolean $p_static\tWhether to print a static form (no dynamic fields)\n * @param string $p_static_fallback_page\tPage name to use as javascript fallback\n * @return void\n */\nfunction filter_form_draw_inputs( $p_filter, $p_for_screen = true, $p_static = false, $p_static_fallback_page = null ) {\n\n\t$t_filter = filter_ensure_valid_filter( $p_filter );\n\t$t_view_type = $t_filter['_view_type'];\n\t$t_source_query_id = isset( $t_filter['_source_query_id'] ) ? (int)$t_filter['_source_query_id'] : -1;\n\n\t# If it's a stored filter, linked to a specific project, use that project_id to render available fields\n\tif( $t_source_query_id > 0 ) {\n\t\t$t_project_id = (int)filter_get_field( $t_source_query_id, 'project_id' );\n\t\tif( ALL_PROJECTS == $t_project_id ) {\n\t\t\t# If all_projects, the filter can be used at any project, select the current project id\n\t\t\t$t_project_id = helper_get_current_project();\n\t\t} else if( $t_project_id < 0 ) {\n\t\t\t# If filter is an unnamed filter, project id is stored as negative value.\n\t\t\t$t_project_id = -1 * $t_project_id;\n\t\t}\n\t} else {\n\t\t$t_project_id = helper_get_current_project();\n\t}\n\n\tif( null === $p_static_fallback_page ) {\n\t\t$p_static_fallback_page = $_SERVER['PHP_SELF'];\n\t\t$p_static_fallback_page = string_sanitize_url( $_SERVER['PHP_SELF'] );\n\t}\n\t$t_filters_url = $p_static_fallback_page;\n\t$t_get_params = $_GET;\n\t$t_get_params['for_screen'] = $p_for_screen;\n\t$t_get_params['static'] = ON;\n\t$t_get_params['view_type'] = ( FILTER_VIEW_TYPE_ADVANCED == $t_view_type )\n\t\t? FILTER_VIEW_TYPE_ADVANCED\n\t\t: FILTER_VIEW_TYPE_SIMPLE;\n\t$t_filters_url .= '?' . http_build_query( $t_get_params );\n\n\t$t_show_product_version =  version_should_show_product_version( $t_project_id );\n\t$t_show_build = $t_show_product_version && ( config_get( 'enable_product_build' ) == ON );\n\n\t# overload handler_id setting if user isn't supposed to see them (ref #6189)\n\tif( !access_has_any_project_level( 'view_handler_threshold' ) ) {\n\t\t$t_filter[FILTER_PROPERTY_HANDLER_ID] = array(\n\t\t\tMETA_FILTER_ANY,\n\t\t);\n\t}\n\n\tif ( config_get( 'use_dynamic_filters' ) ) {\n\t\t$t_dynamic_filter_expander_class = ' class=\"dynamic-filter-expander\"';\n\t} else {\n\t\t$t_dynamic_filter_expander_class = '';\n\t}\n\n\t$get_field_header = function ( $p_id, $p_label ) use ( $t_filters_url, $p_static, $t_filter, $t_source_query_id, $t_dynamic_filter_expander_class ) {\n\t\tif( $p_static) {\n\t\t\treturn $p_label;\n\t\t} else {\n\t\t\tif( filter_is_temporary( $t_filter ) ) {\n\t\t\t\t$t_data_filter_id = ' data-filter=\"' . filter_get_temporary_key( $t_filter ) . '\"';\n\t\t\t} elseif ( isset( $t_filter['_filter_id'] ) ) {\n\t\t\t\t$t_data_filter_id = ' data-filter_id=\"' . $t_filter['_filter_id'] . '\"';\n\t\t\t} else {\n\t\t\t\t$t_data_filter_id = '';\n\t\t\t}\n\t\t\treturn '<a href=\"' . $t_filters_url . '\" id=\"' . $p_id . '\"' . $t_dynamic_filter_expander_class . $t_data_filter_id . '>' . $p_label . '</a>';\n\t\t}\n\t};\n\n\n\t$t_filter_cols = max( 8, config_get( 'filter_custom_fields_per_row' ) );\n\t$t_show_inputs = $p_static;\n\n\t#\n\t# Build the field items\n\t# Use different sections to keep some separation among each group of fields\n\t# When a section starts, its fields start in a new row.\n\n\t$t_row1 = new FilterBoxGridLayout( $t_filter_cols , FilterBoxGridLayout::ORIENTATION_VERTICAL );\n\n\t$t_row1->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'reporter_id_filter', lang_get( 'reporter' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'reporter_id', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'reporter_id_filter_target' /* content id */\n\t\t\t));\n\t$t_row1->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'handler_id_filter', lang_get( 'assigned_to' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'handler_id', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'handler_id_filter_target' /* content id */\n\t\t\t));\n\t$t_row1->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'user_monitor_filter', lang_get( 'monitored_by' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'user_monitor', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'user_monitor_filter_target' /* content id */\n\t\t\t));\n\t$t_row1->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'note_user_id_filter', lang_get( 'note_user_id' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'note_user_id', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'note_user_id_filter_target' /* content id */\n\t\t\t));\n\t$t_row1->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'show_priority_filter', lang_get( 'priority' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'show_priority', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'show_priority_filter_target' /* content id */\n\t\t\t));\n\t$t_row1->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'show_severity_filter', lang_get( 'severity' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'show_severity', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'show_severity_filter_target' /* content id */\n\t\t\t));\n\t$t_row1->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'view_state_filter', lang_get( 'view_status' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'view_state', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'view_state_filter_target' /* content id */\n\t\t\t));\n\t$t_row1->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'sticky_issues_filter', lang_get( 'sticky' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'sticky_issues', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'sticky_issues_filter_target' /* content id */\n\t\t\t));\n\n\t$t_row2 = new FilterBoxGridLayout( $t_filter_cols , FilterBoxGridLayout::ORIENTATION_VERTICAL );\n\n\t$t_row2->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'show_category_filter', lang_get( 'category' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'show_category', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'show_category_filter_target' /* content id */\n\t\t\t));\n\tif( FILTER_VIEW_TYPE_SIMPLE == $t_view_type ) {\n\t\t$t_row2->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'hide_status_filter', lang_get( 'hide_status' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'hide_status', $t_show_inputs ),\n\t\t\t\t1 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'hide_status_filter_target' /* content id */\n\t\t\t\t));\n\t}\n\t$t_row2->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'show_status_filter', lang_get( 'status' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'show_status', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'show_status_filter_target' /* content id */\n\t\t\t));\n\t$t_row2->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'show_resolution_filter', lang_get( 'resolution' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'show_resolution', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'show_resolution_filter_target' /* content id */\n\t\t\t));\n\t$t_row2->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'do_filter_by_date_filter', lang_get( 'use_date_filters' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'do_filter_by_date', $t_show_inputs ),\n\t\t\t2 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'do_filter_by_date_filter_target' /* content id */\n\t\t\t));\n\t$t_row2->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'do_filter_by_last_updated_date_filter', lang_get( 'use_last_updated_date_filters' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'do_filter_by_last_updated_date', $t_show_inputs ),\n\t\t\t2 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'do_filter_by_last_updated_date_filter_target' /* content id */\n\t\t\t));\n\tif( FILTER_VIEW_TYPE_ADVANCED == $t_view_type ) {\n\t\t$t_row2->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'project_id_filter', lang_get( 'email_project' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'project_id', $t_show_inputs ),\n\t\t\t\t1 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'project_id_filter_target' /* content id */\n\t\t\t\t));\n\t}\n\n\t$t_row3 = new FilterBoxGridLayout( $t_filter_cols , FilterBoxGridLayout::ORIENTATION_VERTICAL );\n\n\tif( ON == config_get( 'enable_profiles' ) ) {\n\t\t$t_row3->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'show_profile_filter', lang_get( 'profile' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'show_profile', $t_show_inputs ),\n\t\t\t\t1 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'show_profile_filter_target' /* content id */\n\t\t\t\t));\n\t\t$t_row3->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'platform_filter', lang_get( 'platform' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'platform', $t_show_inputs ),\n\t\t\t\t1 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'platform_filter_target' /* content id */\n\t\t\t\t));\n\t\t$t_row3->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'os_filter', lang_get( 'os' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'os', $t_show_inputs ),\n\t\t\t\t1 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'os_filter_target' /* content id */\n\t\t\t\t));\n\t\t$t_row3->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'os_build_filter', lang_get( 'os_version' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'os_build', $t_show_inputs ),\n\t\t\t\t1 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'os_build_filter_target' /* content id */\n\t\t\t\t));\n\t}\n\tif( $t_show_build ) {\n\t\t$t_row3->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'show_build_filter', lang_get( 'product_build' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'show_build', $t_show_inputs ),\n\t\t\t\t1 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'show_build_filter_target' /* content id */\n\t\t\t\t));\n\t}\n\tif( $t_show_product_version ) {\n\t\t$t_row3->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'show_version_filter', lang_get( 'product_version' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'show_version', $t_show_inputs ),\n\t\t\t\t1 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'show_version_filter_target' /* content id */\n\t\t\t\t));\n\t\t$t_row3->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'show_fixed_in_version_filter', lang_get( 'fixed_in_version' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'show_fixed_in_version', $t_show_inputs ),\n\t\t\t\t1 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'show_fixed_in_version_filter_target' /* content id */\n\t\t\t\t));\n\t\t$t_row3->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'show_target_version_filter', lang_get( 'target_version' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'show_target_version', $t_show_inputs ),\n\t\t\t\t1 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'show_target_version_filter_target' /* content id */\n\t\t\t\t));\n\t}\n\t$t_row3->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'relationship_type_filter', lang_get( 'bug_relationships' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'relationship_type', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'relationship_type_filter_target' /* content id */\n\t\t\t));\n\tif( access_has_project_level( config_get( 'tag_view_threshold' ) ) ) {\n\t\t$t_row3->add_item( new TableFieldsItem(\n\t\t\t\t$get_field_header( 'tag_string_filter', lang_get( 'tags' ) ),\n\t\t\t\tfilter_form_get_input( $t_filter, 'tag_string', $t_show_inputs ),\n\t\t\t\t3 /* colspan */,\n\t\t\t\tnull /* class */,\n\t\t\t\t'tag_string_filter_target' /* content id */\n\t\t\t\t));\n\t}\n\n\t# plugin filters & custom fields\n\n\t$t_row_extra = new FilterBoxGridLayout( $t_filter_cols , FilterBoxGridLayout::ORIENTATION_VERTICAL );\n\n\t$t_plugin_filters = filter_get_plugin_filters();\n\tforeach( $t_plugin_filters as $t_field_name => $t_filter_object ) {\n\t\t$t_colspan = (int)$t_filter_object->colspan;\n\t\t$t_header = $get_field_header( string_attribute( $t_field_name ) . '_filter', string_display_line( $t_filter_object->title ) );\n\t\tob_start();\n\t\tif( $p_static ) {\n\t\t\tprint_filter_plugin_field( $t_field_name, $t_filter_object, $t_filter );\n\t\t} else {\n\t\t\tprint_filter_values_plugin_field( $t_filter, $t_field_name, $t_filter_object );\n\t\t}\n\t\t$t_content = ob_get_clean();\n\n\t\t$t_row_extra->add_item( new TableFieldsItem(\n\t\t\t\t$t_header,\n\t\t\t\t$t_content,\n\t\t\t\t$t_colspan,\n\t\t\t\tnull /* class */,\n\t\t\t\tstring_attribute( $t_field_name ) . '_filter_target' /* content id */\n\t\t\t\t));\n\t}\n\n\tif( ON == config_get( 'filter_by_custom_fields' ) ) {\n\t\t$t_filter_included_projects = filter_get_included_projects( $t_filter );\n\t\t$t_custom_fields = custom_field_get_linked_ids( $t_filter_included_projects );\n\t\t$t_accessible_custom_fields = array();\n\t\tforeach( $t_custom_fields as $t_cfid ) {\n\t\t\t$t_cfdef = custom_field_get_definition( $t_cfid );\n\t\t\t$t_projects_to_check = array_intersect( $t_filter_included_projects, custom_field_get_project_ids( $t_cfid ) );\n\t\t\tif( $t_cfdef['filter_by']\n\t\t\t\t&& access_has_any_project_level( (int)$t_cfdef['access_level_r'], $t_projects_to_check ) ) {\n\t\t\t\t$t_accessible_custom_fields[] = $t_cfdef;\n\t\t\t}\n\t\t}\n\n\t\tif( !empty( $t_accessible_custom_fields ) ) {\n\t\t\tforeach( $t_accessible_custom_fields as $t_cfdef ) {\n\t\t\t\t$t_header = $get_field_header( 'custom_field_' . $t_cfdef['id'] . '_filter', string_display_line( lang_get_defaulted( $t_cfdef['name'] ) ) );\n\t\t\t\tob_start();\n\t\t\t\tif( $p_static ) {\n\t\t\t\t\tprint_filter_custom_field( $t_cfdef['id'], $t_filter );\n\t\t\t\t} else {\n\t\t\t\t\tprint_filter_values_custom_field( $t_filter, $t_cfdef['id'] );\n\t\t\t\t}\n\t\t\t\t$t_content = ob_get_clean();\n\n\t\t\t\t$t_row_extra->add_item( new TableFieldsItem(\n\t\t\t\t\t\t$t_header,\n\t\t\t\t\t\t$t_content,\n\t\t\t\t\t\t1 /* colspan */,\n\t\t\t\t\t\tnull /* class */,\n\t\t\t\t\t\t'custom_field_' . $t_cfdef['id'] . '_filter_target' /* content id */\n\t\t\t\t\t\t));\n\t\t\t}\n\t\t}\n\t}\n\n\t# Section: last fields, horizontal orientation\n\n\t$t_section_last = new FilterBoxGridLayout( $t_filter_cols , FilterBoxGridLayout::ORIENTATION_HORIZONTAL );\n\n\t$t_section_last->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'per_page_filter', lang_get( 'show' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'per_page', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'per_page_filter_target' /* content id */\n\t\t\t));\n\t$t_section_last->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'show_sort_filter', lang_get( 'sort' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'show_sort', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'show_sort_filter_target' /* content id */\n\t\t\t));\n\t$t_section_last->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'match_type_filter', lang_get( 'filter_match_type' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'match_type', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'match_type_filter_target' /* content id */\n\t\t\t));\n\t$t_section_last->add_item( new TableFieldsItem(\n\t\t\t$get_field_header( 'highlight_changed_filter', lang_get( 'changed' ) ),\n\t\t\tfilter_form_get_input( $t_filter, 'highlight_changed', $t_show_inputs ),\n\t\t\t1 /* colspan */,\n\t\t\tnull /* class */,\n\t\t\t'highlight_changed_filter_target' /* content id */\n\t\t\t));\n\n\t?>\n\t<table class=\"table table-bordered table-condensed2\">\n\t\t<?php $t_row1->render() ?>\n\t\t<?php $t_row2->render() ?>\n\t\t<?php $t_row3->render() ?>\n\t\t<?php $t_row_extra->render() ?>\n\t\t<tr class=\"spacer\"></tr>\n\t\t<?php $t_section_last->render() ?>\n\t</table>\n\t<?php\n}\n\n\n/**\n * Class that extends TableGridLayout and implements the specific HTML output needed for the\n * filter form table\n */\nclass FilterBoxGridLayout extends TableGridLayout {\n\n\t/**\n\t * Prints HTML code for TD cell representing the Item header\n\t * @param TableFieldsItem $p_item Item to display\n\t * @param integer $p_colspan Colspan attribute for cell\n\t */\n\tprotected function render_td_item_header( TableFieldsItem $p_item, $p_colspan ) {\n\t\techo '<td class=\"small-caption category ' . $p_item->attr_class . '\"';\n\t\tif( $p_colspan > 1) {\n\t\t\techo ' colspan=\"' . $p_colspan . '\"';\n\t\t}\n\t\tif( $p_item->header_attr_id ) {\n\t\t\techo ' id=\"' . $p_item->header_attr_id . '\"';\n\t\t}\n\t\techo '>';\n\t\techo $p_item->header;\n\t\techo '</td>';\n\t}\n\n\t/**\n\t * Prints HTML code for TD cell representing the Item content\n\t * @param TableFieldsItem $p_item Item to display\n\t * @param integer $p_colspan Colspan attribute for cell\n\t */\n\tprotected function render_td_item_content( TableFieldsItem $p_item, $p_colspan ) {\n\t\techo '<td class=\"small-caption ' . $p_item->attr_class . '\"';\n\t\tif( $p_colspan > 1) {\n\t\t\techo ' colspan=\"' . $p_colspan . '\"';\n\t\t}\n\t\tif( $p_item->content_attr_id ) {\n\t\t\techo ' id=\"' . $p_item->content_attr_id . '\"';\n\t\t}\n\t\techo '>';\n\t\techo $p_item->content;\n\t\techo '</td>';\n\t}\n\n\t/**\n\t * Prints HTML code for an empty TD cell, of header type\n\t * @param integer $p_colspan Colspan attribute for cell\n\t */\n\tprotected function render_td_empty_header( $p_colspan ) {\n\t\techo '<td class=\"small-caption category\"';\n\t\tif( $p_colspan > 1) {\n\t\t\techo ' colspan=\"' . $p_colspan . '\"';\n\t\t}\n\t\techo '>';\n\t\techo '&nbsp;';\n\t\techo '</td>';\n\t}\n}\n"], "filenames": ["core/filter_form_api.php"], "buggy_code_start_loc": [2396], "buggy_code_end_loc": [2396], "fixing_code_start_loc": [2397], "fixing_code_end_loc": [2398], "type": "CWE-79", "message": "A cross-site scripting (XSS) vulnerability in the View Filters page (view_filters_page.php) in MantisBT 2.1.0 through 2.15.0 allows remote attackers to inject arbitrary code (if CSP settings permit it) through a crafted PATH_INFO.", "other": {"cve": {"id": "CVE-2018-13055", "sourceIdentifier": "cve@mitre.org", "published": "2018-08-03T18:29:00.453", "lastModified": "2018-10-04T18:33:37.653", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A cross-site scripting (XSS) vulnerability in the View Filters page (view_filters_page.php) in MantisBT 2.1.0 through 2.15.0 allows remote attackers to inject arbitrary code (if CSP settings permit it) through a crafted PATH_INFO."}, {"lang": "es", "value": "Una vulnerabilidad de Cross-Site Scripting (XSS) en la p\u00e1gina View Filters (view_filters_page.php) en MantisBT, desde la versi\u00f3n 2.1.0 hasta la 2.15.0, permite que los atacantes remotos inyecten c\u00f3digo arbitrario (si la configuraci\u00f3n CSP lo permite) mediante un PATH_INFO manipulado."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.1.0", "versionEndIncluding": "2.15.0", "matchCriteriaId": "3A4A36D7-BF63-42C8-B422-628BE3B16B89"}]}]}], "references": [{"url": "http://github.com/mantisbt/mantisbt/commit/4efac90ed89a5c009108b641e2e95683791a165a", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://mantisbt.org/blog/archives/mantisbt/602", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://mantisbt.org/bugs/view.php?id=24580", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "http://github.com/mantisbt/mantisbt/commit/4efac90ed89a5c009108b641e2e95683791a165a"}}