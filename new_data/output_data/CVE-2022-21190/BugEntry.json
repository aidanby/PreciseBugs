{"buggy_code": ["# Change Log\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/)\nand this project adheres to [Semantic Versioning](http://semver.org/).\n\n\n## [6.2.2] - 2022-03-27\n\n### Fixed\n\n- More complete fix for prototype pollution vulnerability first addressed in\n  #384 (Marc-Aur\u00e8le Darche @madarche)\n\n\n## [6.2.1] - 2021-10-20\n\n### Fixed\n\n- Fix misspelling of the word optional in the error message #397 (Dan Allen @mojavelinux))\n\n\n## [6.2.0] - 2021-05-21\n\n### Changed\n\n- Update dependency: validator `^11.1.0` \u2192 `^13.6.0` ([#390](https://github.com/mozilla/node-convict/pull/390))\n- Update dependency: parser `^18.1.3` \u2192 `^20.2.7` ([#390](https://github.com/mozilla/node-convict/pull/390))\n- Update dependency: moment `^2.24.0` \u2192 `^2.29.1` ([#390](https://github.com/mozilla/node-convict/pull/390))\n\n\n## [6.1.0] - 2021-05-03\n\n### Added\n\n- Add new \"nullable\" option to allow \"null\" additionally to any format #386 (maxwrlr)\n\n\n## [6.0.1] - 2021-03-11\n\n### Fixed\n\n- Fix prototype pollution vulnerability #384 (arjunshibu, Jamie Slome)\n\n\n## [6.0.0] - 2020-05-02\n### Changed\n\n- [BREAKING] Multi-packages split #327 (A-312, Marc-Aur\u00e8le Darche @madarche).\n  There are now 3 packages: convict, convict-format-with-validator, convict-format-with-moment\n- [BREAKING] Remove the *json5* dependency and make it an optional parser #326 (A-312)\n- Ease relying applications security fixes by using `^x.y.z` range versions for\n  Convict's `dependencies` and `devDependencies`, instead of exact/strict versions.\n  Nowadays all applications should lock their `dependencies` and\n  `devDependencies` using lock files such as `package-lock.json`. There is also\n  tools such as `npm audit fix` that very easily and effectively fix\n  vulnerabilites in version ranges. So, from now on, Convict will not put itself\n  in the way, by leveraging Semantic Versioning to its maximum for\n  `dependencies` and `devDependencies`. (Marc-Aur\u00e8le Darche @madarche)\n\n### Fixed\n\n- Fix multiple vulns by upgrading some deps\n  (Cyrille Verrier @cyrille-arundo, Marc-Aur\u00e8le Darche @madarche)\n\n\n## [5.2.0] - 2019-10-12\n### Added\n\n- Add output preference for validate #301 (A-312)\n\n### Changed\n\n- Bump validator from 10.11.0 to 11.1.0 #316 (Tomasz Adamski @tmszdmsk)\n\n### Fixed\n\n- Fix vulns by upgrading some deps (eslint, mocha, coveralls) + npm audit fix\n  (Marc-Aur\u00e8le Darche @madarche)\n- Doc: Fix typo and improve grammar and consistency in double-hyphen warning\n  #324 (Maya Vera @mayavera)\n- Doc: Fix link #308 (Brett Neese @brettneese)\n- Fix test on Windows #304 (A-312)\n\n## [5.1.0] - 2019-07-26\n### Added\n\n- Add context argument to custom format validate #296 (A-312)\n\n## [5.0.2] - 2019-07-26\n### Changed\n\n- Include only required validator functions #279 (Marcin K @chyzwar)\n\n## [5.0.1] - 2019-07-26\n### Fixed\n\n- Fix dev deps vulns by upgrading (nyc, coveralls) #295 (Marc-Aur\u00e8le Darche @madarche, A-312)\n\n## [5.0.0] - 2019-05-06\n### Changed\n\n- Drop long deprecated `strict: true`/`strict: false` option, which has been replaced by the\n  `allowed: 'strict`/`allowed: 'warn` option (Marc-Aur\u00e8le Darche @madarche)\n- Update runtime deps (json5, moment, validator, yargs-parser) (Marc-Aur\u00e8le Darche @madarche)\n- Update dev deps (coveralls, eslint, js-yaml, mocha, toml) (Marc-Aur\u00e8le Darche @madarche)\n- Replaced dev deps (istanbul replaced by nyc, obj_diff replaced by\n  deep-object-diff) (Marc-Aur\u00e8le Darche @madarche)\n- Drop Node.js < 6 support due to dep requirements (Marc-Aur\u00e8le Darche @madarche)\n\n## [4.4.1] - 2018-12-15\n### Fixed\n\n- Fix README for addFormats #268, #275 (Walter Rumsby @wrumsby, Sebastian Yandun\n  @svyandun, Eray Hanoglu @erayhanoglu, Marc-Aur\u00e8le Darche @madarche)\n\n### Changed\n\n- Update deps (yargs-parser, validator) (Marc-Aur\u00e8le Darche @madarche)\n\n## [4.4.0] - 2018-09-22\n### Fixed\n\n- Fixed dot notation parsing by disabling dot-notation option in yarg-parser #269 (Patrick Shaw @PatrickShaw)\n\n### Added\n\n- Pass the name of the property being assigned to the custom coerce function #262 (Dan Allen @mojavelinux)\n\n## [4.3.2] - 2018-07-19\n### Fixed\n\n- Update deps (validator.js@10.4.0, yargs-parser@10.1.0, coveralls@3.0.2) fixes #264 (Marc-Aur\u00e8le Darche @madarche)\n\n## [4.3.1] - 2018-06-07\n### Fixed\n\n- Handle loading empty files #257 (Paul Colleoni @polco)\n\n## [4.3.0] - 2018-06-02\n### Fixed\n\n- Allow argument value to be falsy #246 (Dan Allen @mojavelinux)\n\n### Added\n\n- Accept args and env as parameters to convict function #223 (Dan Allen @mojavelinux)\n- Allow the default parser to be set #248 (Dan Allen @mojavelinux)\n- Add package-lock.json file (Marc-Aur\u00e8le Darche @madarche)\n\n### Changed\n\n- Update deps (almost all) (Marc-Aur\u00e8le Darche @madarche)\n\n### Removed\n\n- Remove browserify package and configuration. This was never needed. (Marc-Aur\u00e8le Darche @madarche)\n\n## [4.2.0] - 2018-03-23\n### Added\n\n- Enhanced file formats support #244 (Tuan Nguyen @rocketspacer)\n\n### Changed\n\n- Fix doc (Marc-Aur\u00e8le Darche @madarche)\n\n## [4.1.0] - 2018-03-15\n### Changed\n\n- Make warnings more visible by coloring them #242 (Nawfel @NawfelBgh)\n\n### Fixed\n- Fix custom format object nested properties warning by checking for the item\n  type instead of item format #234 (Helias Criouet @Helias-Criouet)\n- Fix README on how cli args work #226 (Ian Chadwick @ianchadwick)\n\n## [4.0.2] - 2017-11-30\n### Security\n\n- Update moment to fixed security version #231 (Marc-Aur\u00e8le Darche @madarche)\n\n## [4.0.1] - 2017-09-17\n### Changed\n\n- Update dependencies #220 (Marc-Aur\u00e8le Darche @madarche)\n- Move away from minimist to yargs-parser #219 (Marc-Aur\u00e8le Darche @madarche)\n- Corrected a typo #218 (Nikolay Govorov @nikolay-govorov)\n- Fix issue with empty string over default not null value #217 (Jonathan Petitcolas @jpetitcolas)\n- Ensure property defaults are not modified #216 (Eli Young @elyscape)\n- Nested props in 'object' values are not undeclared #215 (Michael McGahan @mmcgahan)\n\n## [4.0.0] - 2017-06-22\n### Added\n\n- Handle shorthand for default empty objects #194 (Eli Young @elyscape)\n- 100% test coverage #192 (Eli Young @elyscape)\n- Include static tests in code coverage checks #191 (Eli Young @elyscape)\n- Add support for masking sensitive values #190 (Eli Young @elyscape)\n- Support mapping env vars to multiple settings #189 (Richard Marmorstein @twitchard)\n\n### Changed\n\n- Rework validate() to check for overridden parent #206 (Eli Young @elyscape)\n- Document that a JSON/JSON5 schema file can be used #198 (Marc-Aur\u00e8le Darche @madarche)\n- Better advertize CLI tests as such #197 (Marc-Aur\u00e8le Darche @madarche)\n- Support arbitrary casing of booleans #195 (Eli Young @elyscape)\n\n### Removed\n\n- Remove the npm-shrinkwrap.json file #210 (Marc-Aur\u00e8le Darche @madarche)\n\n### Fixed\n\n- Fix documentation for config.loadFile() #207 (Eli Young @elyscape)\n- Tests env/arg type coercion and fix arg number coercion #199 (Eli Young @elyscape)\n- Make schema objects actually useful #196 (Eli Young @elyscape)\n\n## [3.0.0] - 2017-03-16\n### Added\n\n- In `validate` function alter option `strict` to `allowed`, with option values `strict` and `warn` #182 (@benTrust)\n\n### Changed\n\n- Rename pipe formats to emphasize that they are for windows pipes #179\n  (Gurpreet Atwal @gurpreetatwal)\n- Update dependencies #184 (Marc-Aur\u00e8le Darche @madarche)\n\n## [2.0.0] - 2016-12-18\n\n- Named Pipe Support #175 (Gurpreet Atwal @gurpreetatwal)\n- Stop supporting Node.js 0.12 by december 2016 #166 (Marc-Aur\u00e8le Darche @madarche)\n- Stop supporting Node.js 0.10 by october 2016 #164 (Marc-Aur\u00e8le Darche @madarche)\n- Remove deprecated methods `root` and `toSchemaString`\n- Deps: validator@6.2.0\n- Deps: moment@2.17.1\n- Deps: json5@0.5.1\n- devDeps: all up-to-date\n\n## [1.5.0] - 2016-09-28\n\n- Add `RegExp` format #165 (@philbooth)\n\n## [1.4.0] - 2016-05-29\n\n- Add new reset method #148 (Marc-Aur\u00e8le Darche @madarche)\n- Replace optimist which is deprecated #154 (Brian Vanderbusch @LongLiveCHIEF)\n- Move varify to optionalDependencies #153 (@mlucool)\n\n## [1.3.0] - 2016-04-07\n\n- Replace cjson with json5 (@ratson)\n- Fix missing npm-shrinkwrap.json file in published NPM module\n\n## [1.2.0] - 2016-04-01\n\n- Support for built-in formats in schema files #138 (Hem Brahmbhatt @damnhipster)\n- Improve stability and security: Use shrinkwrap to lock module dependencies #139 (Marc-Aur\u00e8le Darche @madarche)\n- devDeps: coveralls@2.11.9 to stay in sync\n- devDeps: eslint@2.5.3 to stay in sync\n\n## [1.1.3] - 2016-03-18\n\n- Fix Null default with custom validator causes json parse error #122 (@RoboPhred)\n- Documentation improvement (Brian Vanderbusch @LongLiveCHIEF)\n- Deps: moment@2.12.0 to stay in sync\n- devDeps: coveralls@2.11.8 to stay in sync\n- devDeps: eslint@2.4.0 to stay in sync\n- devDeps: mocha-lcov-reporter@1.2.0 to stay in sync\n\n## [1.1.2] - 2016-02-12\n\n- Documentation and management script fixes; no code changes.\n\n## [1.1.1] - 2016-02-05\n\n- Deps: moment@2.11.2 to fix\n  https://nodesecurity.io/advisories/moment_regular-expression-denial-of-service\n- Deps: validator@4.6.1 to stay in sync\n\n## [1.1.0] - 2016-02-02\n\n- Fix loading consecutive files could cause an error to be thrown #111\n  (Abdullah Ali @voodooattack)\n- Coerce values loaded from a file #96 (Jens Olsson @jsol)\n- Improvement: Pass instance to coerce #109 (Abdullah Ali @voodooattack)\n- Fix missing return in validate reducer #101 (Kris Reeves @myndzi)\n- Deps: moment\n- Deps: validator\n- Switch back from Blanket to Istanbul for test coverage (Marc-Aur\u00e8le Darche @madarche)\n- Stricter JSLint linting (Marc-Aur\u00e8le Darche @madarche)\n- Improve documentation (Olivier Lalonde @olalonde, Marc-Aur\u00e8le Darche @madarche)\n\n## [1.0.2] - 2015-12-09\n\n- Merge pull request [#97](https://github.com/mozilla/node-convict/issues/97) from yoz/cjson-0.3.2\n  Update cjson dependency to 0.3.2\n- Update cjson dependency to 0.3.2\n  This removes the transitive dependency on 'jsonlint' (in favor of json-parse-helpfulerror), which avoids its problems with unstated dependencies on 'file' and 'system'.\n- Coerce values loaded from a file\n  Previously values were coerced if added through\n  set(), command line arguments or env arguments.\n  Added the schema to the recursive overlay function\n  so that values added through load() and loadFile()\n  are also coerced.\n  Corrected a test to reflect this.\n- Deps: update all\n- Switch from JSHint to ESLint\n\n## [1.0.1] - 2015-08-11\n\n- Merge pull request [#87](https://github.com/mozilla/node-convict/issues/87) from mozilla/rfk/duration-integer-string\n  Accept integer millisecond durations in string form, e.g. from env vars.\n- Accept integer millisecond durations in string form, e.g. from env vars.\n\n## [1.0.0] - 2015-08-01\n\n- Merge pull request [#85](https://github.com/mozilla/node-convict/issues/85) from madarche/feat-1.0\n  v1.0.0 and remove old deprecated formats ipv4 and ipv6\n- Better wording for validate options\n- Consistency using periods\n- Improve feature description again\n- Improved features description\n- Better config.validate([options]) doc + beautify\n- Update dependencies\n- Merge branch 'feat-update-dependencies' into feat-1.0\n- v1.0.0 Remove old deprecated formats ipv4 and ipv6\n\n## [0.8.2] - 2015-07-20\n\n- Merge pull request [#84](https://github.com/mozilla/node-convict/issues/84) from madarche/feat-update-deps\n  Update dependencies\n- Update dependencies\n\n## [0.8.1] - 2015-07-20\n\n- Merge pull request [#82](https://github.com/mozilla/node-convict/issues/82) from myndzi/fix-license\n  Update package.json 'license' key format\n- Merge pull request [#83](https://github.com/mozilla/node-convict/issues/83) from madarche/feat-get-properties\n  Document and test properties and schema export\n- Document and test properties and schema export\n  This modification also renames the previously undocumented and untested\n  following methods:\n  * root\u2192getProperties and\n  * toSchemaString\u2192getSchemaString\n  The renaming was done for clearer intent and consistency in naming. The\n  previous method names are still supported but deprecated.\n- Update package.json 'license' key format\n- Merge pull request [#80](https://github.com/mozilla/node-convict/issues/80) from madarche/fix-nested-schema-doc\n  Document nested settings in schema\n- Merge pull request [#79](https://github.com/mozilla/node-convict/issues/79) from madarche/fix-doc\n  Document new strict validation mode\n- Document nested settings in schema\n  Fixes [#78](https://github.com/mozilla/node-convict/issues/78)\n- Document new strict validation mode\n  Fixes [#75](https://github.com/mozilla/node-convict/issues/75)\n- Merge pull request [#77](https://github.com/mozilla/node-convict/issues/77) from madarche/fix-test_coverage\n  Fix test coverage\n- Fix test coverage\n  The rationale in this change is to put logic as less as possible in\n  .travis.yml since it's not testable on developers' system.\n- Merge pull request [#76](https://github.com/mozilla/node-convict/issues/76) from madarche/feat-update_dependencies\n  Update dependencies\n- Merge pull request [#74](https://github.com/mozilla/node-convict/issues/74) from mmerkes/master\n  Fixes [#73](https://github.com/mozilla/node-convict/issues/73), removes validator.check from README.md and adds valid form\u2026\n- Update dependencies\n- Adds convict.addFormat() to validation section of README and tidies up section\n- Fixes [#73](https://github.com/mozilla/node-convict/issues/73), removes validator.check from README.md and adds valid format checker\n\n## [0.8.0] - 2015-05-31\n\n- Merge pull request [#64](https://github.com/mozilla/node-convict/issues/64) from umar-muneer/master\n  Strict Validation Mode Added\n- Merge pull request [#72](https://github.com/mozilla/node-convict/issues/72) from pdehaan/patch-2\n  Fix typos in README\n- Fix typos in README\n\n## [0.7.0] - 2015-04-29\n\n- Merge pull request [#66](https://github.com/mozilla/node-convict/issues/66) from collinwat/add-format-overload\n  addFormat supports object arguments as well as function arguments\n- Merge pull request [#70](https://github.com/mozilla/node-convict/issues/70) from madarche/fix-update-deps\n  Update dependencies and removed `should` replaced\n- Merge pull request [#69](https://github.com/mozilla/node-convict/issues/69) from madarche/feat-new-nodejs-0.12\n  Make CI test Node.js 0.12, the new stable\n- Update dependencies and removed `should` replaced\n  `should` has been replaced by `js-must`.\n- Make CI test Node.js 0.12, the new stable\n- Merge pull request [#61](https://github.com/mozilla/node-convict/issues/61) from ronjouch/browserifyTransformVarify\n  Add 'varify' browserify transform to support IE9,10\n- Add format supports object arguments as well as function arguments\n- Merge pull request [#62](https://github.com/mozilla/node-convict/issues/62) from madjid04/master\n  Add code coverage with blanket\n- Strict Validation Mode\n  1. Added a fix for nested validation checks.\n  2. Modified test case schema and config files.\n- Strict Validation Mode Added\n  1. Added a Strict Validation mode. If set to true, any properties\n  specified in config files that are not declared in the schema will\n  result in errors. This is to ensure that the schema and the config\n  files are in sync. This brings convict further in line with the concept\n  of a \u201cSchema\u201d. By default the strict mode is set to false.\n  2. Added test cases for strict mode\n- modification of the indentation\n\n## [0.6.1] - 2015-01-12\n\n- Fix duration check #54\n- Update dependencies #48\n- Use js-must a safer test assertion library #49\n\n## [0.6.0] - 2014-11-14\n\n- Update dependencies (including latest validator) #46\n- Deprecate \"ipv4\" and \"ipv6\" formats\n\n## [0.5.1] - 2014-10-29\n\n- Update dependencies\n- Use fix versions everywhere for safe validation\n- More readable date for test #43\n\n## [0.5.0] - 2014-10-15\n\n- Fix npmignore anything that's not needed for production #38\n- Fix The schema get modified by convict #37\n- npm ignore things\n- JSHint lint + 80 cols formatting #39\n\n## [0.4.3] - 2014-10-13\n\n- Test the correct convict object for the undefined attribute #31\n- Update moment.js to 2.6.0 #36\n\n## [0.4.2] - 2014-01-12\n\n- Update cjson 0.2.1 \u2014> 0.3.0\n- Coerce 'nat' formatted values #26\n- Update canonical package.json URLs #24\n- Fix 'should handle timestamp' failing test #21\n- Update package.json #43\n- Add license info\n  * Update Dependency #18\n\n## [0.4.1] - 2013-10-14\n\n- Support JSON formatted objects in env\n\n## [0.4.0] - 2013-07-31\n\n## [0.3.3] - 2013-06-18\n\n## [0.3.1] - 2013-06-04\n\n## [0.3.0] - 2013-06-03\n\n## [0.2.3] - 2013-05-27\n\n## [0.2.2] - 2013-05-25\n\n## [0.2.1] - 2013-05-25\n\n## [0.2.0] - 2013-05-23\n\n## [0.1.1] - 2013-05-19\n\n## [0.1.0] - 2013-03-05\n\nInitial release\n", "/**\n * convict\n * Configuration management with support for environmental variables, files,\n * and validation.\n */\n'use strict'\n\nconst fs = require('fs')\nconst parseArgs = require('yargs-parser')\nconst cloneDeep = require('lodash.clonedeep')\n\n// Forbidden key paths, for protection against prototype pollution\nconst FORBIDDEN_KEY_PATHS = [\n  '__proto__',\n  'this.constructor.prototype',\n]\n\nconst ALLOWED_OPTION_STRICT = 'strict'\nconst ALLOWED_OPTION_WARN = 'warn'\n\nfunction assert(assertion, err_msg) {\n  if (!assertion) {\n    throw new Error(err_msg)\n  }\n}\n\n// format can be a:\n// - predefine type, as seen below\n// - an array of enumerated values, e.g. [\"production\", \"development\", \"testing\"]\n// - built-in JavaScript type, i.e. Object, Array, String, Number, Boolean, RegExp\n// - or if omitted, the Object.prototype.toString.call of the default value\n\n/**\n * Checks if x is a valid port\n *\n * @param {*} x\n * @returns {Boolean}\n */\nfunction isPort(x) {\n  return Number.isInteger(x) && x >= 0 && x <= 65535\n}\n\n/**\n * Checks if x is a windows named pipe\n *\n * @see https://msdn.microsoft.com/en-us/library/windows/desktop/aa365783(v=vs.85).aspx\n * @param {*} x\n * @returns {Boolean}\n */\nfunction isWindowsNamedPipe(x) {\n  return String(x).includes('\\\\\\\\.\\\\pipe\\\\')\n}\n\nconst types = {\n  '*': function() { },\n  int: function(x) {\n    assert(Number.isInteger(x), 'must be an integer')\n  },\n  nat: function(x) {\n    assert(Number.isInteger(x) && x >= 0, 'must be a positive integer')\n  },\n  port: function(x) {\n    assert(isPort(x), 'ports must be within range 0 - 65535')\n  },\n  windows_named_pipe: function(x) {\n    assert(isWindowsNamedPipe(x), 'must be a valid pipe')\n  },\n  port_or_windows_named_pipe: function(x) {\n    if (!isWindowsNamedPipe(x)) {\n      assert(isPort(x), 'must be a windows named pipe or a number within range 0 - 65535')\n    }\n  }\n}\n// alias\ntypes.integer = types.int\n\nconst custom_converters = new Map()\n\nconst parsers_registry = {'*': JSON.parse}\n\nfunction flatten(obj, useProperties) {\n  const stack = Object.keys(obj)\n  let key\n\n  const entries = []\n\n  while (stack.length) {\n    key = stack.shift()\n    let val = walk(obj, key)\n    if (typeof val === 'object' && !Array.isArray(val) && val != null) {\n      if (useProperties) {\n        if ('_cvtProperties' in val) {\n          val = val._cvtProperties\n          key = key + '._cvtProperties'\n        } else {\n          entries.push([key, val])\n          continue\n        }\n      }\n      const subkeys = Object.keys(val)\n\n      // Don't filter out empty objects\n      if (subkeys.length > 0) {\n        subkeys.forEach(function(subkey) {\n          stack.push(key + '.' + subkey)\n        })\n        continue\n      }\n    }\n    entries.push([key, val])\n  }\n\n  const flattened = {}\n  entries.forEach(function(entry) {\n    let key = entry[0]\n    if (useProperties) {\n      key = key.replace(/\\._cvtProperties/g, '')\n    }\n    const val = entry[1]\n    flattened[key] = val\n  })\n\n  return flattened\n}\n\nfunction validate(instance, schema, strictValidation) {\n  const errors = {\n    undeclared: [],\n    invalid_type: [],\n    missing: []\n  }\n\n  const flatInstance = flatten(instance)\n  const flatSchema = flatten(schema._cvtProperties, true)\n\n  Object.keys(flatSchema).forEach(function(name) {\n    const schemaItem = flatSchema[name]\n    let instanceItem = flatInstance[name]\n    if (!(name in flatInstance)) {\n      try {\n        if (typeof schemaItem.default === 'object' &&\n          !Array.isArray(schemaItem.default)) {\n          // Missing item may be an object with undeclared children, so try to\n          // pull it unflattened from the config instance for type validation\n          instanceItem = walk(instance, name)\n        } else {\n          throw new Error('missing')\n        }\n      } catch (e) {\n        const err = new Error(\"configuration param '\" + name\n          + \"' missing from config, did you override its parent?\")\n        errors.missing.push(err)\n        return\n      }\n    }\n    delete flatInstance[name]\n\n    // ignore nested keys of schema 'object' properties\n    if (schemaItem.format === 'object' || typeof schemaItem.default === 'object') {\n      Object.keys(flatInstance)\n        .filter(function(key) {\n          return key.lastIndexOf(name + '.', 0) === 0\n        }).forEach(function(key) {\n          delete flatInstance[key]\n        })\n    }\n\n    if (!(typeof schemaItem.default === 'undefined' &&\n          instanceItem === schemaItem.default)) {\n      try {\n        schemaItem._format(instanceItem)\n      } catch (err) {\n        errors.invalid_type.push(err)\n      }\n    }\n\n    return\n  })\n\n  if (strictValidation) {\n    Object.keys(flatInstance).forEach(function(name) {\n      const err = new Error(\"configuration param '\" + name\n        + \"' not declared in the schema\")\n      errors.undeclared.push(err)\n    })\n  }\n\n  return errors\n}\n\n// helper for asserting that a value is in the list of valid options\nfunction contains(options, x) {\n  assert(options.indexOf(x) !== -1, 'must be one of the possible values: ' +\n         JSON.stringify(options))\n}\n\nconst BUILT_INS_BY_NAME = {\n  Object: Object,\n  Array: Array,\n  String: String,\n  Number: Number,\n  Boolean: Boolean,\n  RegExp: RegExp\n}\nconst BUILT_IN_NAMES = Object.keys(BUILT_INS_BY_NAME)\nconst BUILT_INS = BUILT_IN_NAMES.map(function(name) {\n  return BUILT_INS_BY_NAME[name]\n})\n\nfunction normalizeSchema(name, node, props, fullName, env, argv, sensitive) {\n  if (name === '_cvtProperties') {\n    throw new Error(\"'\" + fullName + \"': '_cvtProperties' is reserved word of convict.\")\n  }\n\n  // If the current schema node is not a config property (has no \"default\"), recursively normalize it.\n  if (typeof node === 'object' && node !== null && !Array.isArray(node) &&\n    Object.keys(node).length > 0 && !('default' in node)) {\n    props[name] = {\n      _cvtProperties: {}\n    }\n    Object.keys(node).forEach(function(k) {\n      normalizeSchema(k, node[k], props[name]._cvtProperties, fullName + '.' +\n                      k, env, argv, sensitive)\n    })\n    return\n  } else if (typeof node !== 'object' || Array.isArray(node) ||\n    node === null || Object.keys(node).length == 0) {\n    // Normalize shorthand \"value\" config properties\n    node = {default: node}\n  }\n\n  const o = cloneDeep(node)\n  props[name] = o\n  // associate this property with an environmental variable\n  if (o.env) {\n    if (!env[o.env]) {\n      env[o.env] = []\n    }\n    env[o.env].push(fullName)\n  }\n\n  // associate this property with a command-line argument\n  if (o.arg) {\n    if (argv[o.arg]) {\n      throw new Error(\"'\" + fullName + \"' reuses a command-line argument: \" +\n        o.arg)\n    }\n    argv[o.arg] = fullName\n  }\n\n  // mark this property as sensitive\n  if (o.sensitive === true) {\n    sensitive.add(fullName)\n  }\n\n  // store original format function\n  const format = o.format\n  let newFormat\n\n  if (BUILT_INS.indexOf(format) >= 0 || BUILT_IN_NAMES.indexOf(format) >= 0) {\n    // if the format property is a built-in JavaScript constructor,\n    // assert that the value is of that type\n    const Format = typeof format === 'string' ? BUILT_INS_BY_NAME[format] : format\n    newFormat = function(x) {\n      assert(Object.prototype.toString.call(x) ==\n        Object.prototype.toString.call(new Format()),\n      'must be of type ' + Format.name)\n    }\n    o.format = Format.name.toLowerCase()\n\n  } else if (typeof format === 'string') {\n    // store declared type\n    if (!types[format]) {\n      throw new Error(\"'\" + fullName + \"' uses an unknown format type: \" +\n        format)\n    }\n\n    // use a predefined type\n    newFormat = types[format]\n\n  } else if (Array.isArray(format)) {\n    // assert that the value is a valid option\n    newFormat = contains.bind(null, format)\n\n  } else if (typeof format === 'function') {\n    newFormat = format\n\n  } else if (format && typeof format !== 'function') {\n    throw new Error(\"'\" + fullName +\n      \"': `format` must be a function or a known format type.\")\n  }\n\n  if (!newFormat && !format) {\n    // default format is the typeof the default value\n    const type = Object.prototype.toString.call(o.default)\n    newFormat = function(x) {\n      assert(Object.prototype.toString.call(x) == type,\n        ' should be of type ' + type.replace(/\\[.* |]/g, ''))\n    }\n  }\n\n  o._format = function(x) {\n    // accept null if allowed before calling any format function\n    if (this.nullable && x === null) {\n      return\n    }\n\n    try {\n      newFormat(x, this)\n    } catch (e) {\n      // attach the value and the property's fullName to the error\n      e.fullName = fullName\n      e.value = x\n      throw e\n    }\n  }\n}\n\nfunction importEnvironment(o) {\n  const env = o.getEnv()\n  Object.keys(o._env).forEach(function(envStr) {\n    if (env[envStr] !== undefined) {\n      const ks = o._env[envStr]\n      ks.forEach(function(k) {\n        o.set(k, env[envStr])\n      })\n    }\n  })\n}\n\nfunction importArguments(o) {\n  const argv = parseArgs(o.getArgs(), {\n    configuration: {\n      'dot-notation': false\n    }\n  })\n  Object.keys(o._argv).forEach(function(argStr) {\n    const k = o._argv[argStr]\n    if (argv[argStr] !== undefined) {\n      o.set(k, String(argv[argStr]))\n    }\n  })\n}\n\nfunction addDefaultValues(schema, c, instance) {\n  Object.keys(schema._cvtProperties).forEach(function(name) {\n    const p = schema._cvtProperties[name]\n    if (p._cvtProperties) {\n      const kids = c[name] || {}\n      addDefaultValues(p, kids, instance)\n      c[name] = kids\n    } else {\n      c[name] = coerce(name, cloneDeep(p.default), schema, instance)\n    }\n  })\n}\n\nfunction isObj(o) {\n  return typeof o === 'object' && o !== null\n}\n\nfunction overlay(from, to, schema) {\n  Object.keys(from).forEach(function(k) {\n    // leaf\n    if (Array.isArray(from[k]) || !isObj(from[k]) || !schema || schema.format === 'object') {\n      to[k] = coerce(k, from[k], schema)\n    } else {\n      if (!isObj(to[k])) {\n        to[k] = {}\n      }\n      overlay(from[k], to[k], schema._cvtProperties[k])\n    }\n  })\n}\n\nfunction traverseSchema(schema, path) {\n  const ar = path.split('.')\n  let o = schema\n  while (ar.length > 0) {\n    const k = ar.shift()\n    if (o && o._cvtProperties && o._cvtProperties[k]) {\n      o = o._cvtProperties[k]\n    } else {\n      o = null\n      break\n    }\n  }\n\n  return o\n}\n\nfunction getFormat(schema, path) {\n  const o = traverseSchema(schema, path)\n  if (o == null) {\n    return null\n  }\n  if (typeof o.format === 'string') {\n    return o.format\n  }\n  if (o.default != null) {\n    return typeof o.default\n  }\n  return null\n}\n\nfunction coerce(k, v, schema, instance) {\n  const format = getFormat(schema, k)\n\n  if (typeof v === 'string') {\n    if (custom_converters.has(format)) {\n      return custom_converters.get(format)(v, instance, k)\n    }\n    switch (format) {\n    case 'port':\n    case 'nat':\n    case 'integer':\n    case 'int': v = parseInt(v, 10); break\n    case 'port_or_windows_named_pipe': v = isWindowsNamedPipe(v) ? v : parseInt(v, 10); break\n    case 'number': v = parseFloat(v); break\n    case 'boolean': v = String(v).toLowerCase() !== 'false'; break\n    case 'array': v = v.split(','); break\n    case 'object': v = JSON.parse(v); break\n    case 'regexp': v = new RegExp(v); break\n    default:\n        // TODO: Should we throw an exception here?\n    }\n  }\n\n  return v\n}\n\nfunction loadFile(path) {\n  const segments = path.split('.')\n  const extension = segments.length > 1 ? segments.pop() : ''\n  const parse = parsers_registry[extension] || parsers_registry['*']\n\n  // TODO Get rid of the sync call\n  // eslint-disable-next-line no-sync\n  return parse(fs.readFileSync(path, 'utf-8'))\n}\n\nfunction walk(obj, path, initializeMissing) {\n  if (path) {\n    const ar = path.split('.')\n    while (ar.length) {\n      const k = ar.shift()\n      if (initializeMissing && obj[k] == null) {\n        obj[k] = {}\n        obj = obj[k]\n      } else if (k in obj) {\n        obj = obj[k]\n      } else {\n        throw new Error(\"cannot find configuration param '\" + path + \"'\")\n      }\n    }\n  }\n\n  return obj\n}\n\n/**\n * @returns a config object\n */\nconst convict = function convict(def, opts) {\n\n  // TODO: Rename this `rv` variable (supposedly \"return value\") into something\n  // more meaningful.\n  const rv = {\n    /**\n     * Gets the array of process arguments, using the override passed to the\n     * convict function or process.argv if no override was passed.\n     */\n    getArgs: function() {\n      return opts && opts.args || process.argv.slice(2)\n    },\n\n    /**\n     * Gets the environment variable map, using the override passed to the\n     * convict function or process.env if no override was passed.\n     */\n    getEnv: function() {\n      return opts && opts.env || process.env\n    },\n\n    /**\n     * Exports all the properties (that is the keys and their current values) as JSON\n     */\n    getProperties: function() {\n      return cloneDeep(this._instance)\n    },\n\n    /**\n     * Exports all the properties (that is the keys and their current values) as\n     * a JSON string, with sensitive values masked. Sensitive values are masked\n     * even if they aren't set, to avoid revealing any information.\n     */\n    toString: function() {\n      const clone = cloneDeep(this._instance)\n      this._sensitive.forEach(function(key) {\n        const path = key.split('.')\n        const childKey = path.pop()\n        const parentKey = path.join('.')\n        const parent = walk(clone, parentKey)\n        parent[childKey] = '[Sensitive]'\n      })\n      return JSON.stringify(clone, null, 2)\n    },\n\n    /**\n     * Exports the schema as JSON.\n     */\n    getSchema: function() {\n      return JSON.parse(JSON.stringify(this._schema))\n    },\n\n    /**\n     * Exports the schema as a JSON string\n     */\n    getSchemaString: function() {\n      return JSON.stringify(this._schema, null, 2)\n    },\n\n    /**\n     * @returns the current value of the name property. name can use dot\n     *     notation to reference nested values\n     */\n    get: function(path) {\n      const o = walk(this._instance, path)\n      return cloneDeep(o)\n    },\n\n    /**\n     * @returns the default value of the name property. name can use dot\n     *     notation to reference nested values\n     */\n    default: function(path) {\n      // The default value for FOO.BAR.BAZ is stored in `_schema._cvtProperties` at:\n      //   FOO._cvtProperties.BAR._cvtProperties.BAZ.default\n      path = path.split('.').join('._cvtProperties.') + '.default'\n      const o = walk(this._schema._cvtProperties, path)\n      return cloneDeep(o)\n    },\n\n    /**\n     * Resets a property to its default value as defined in the schema\n     */\n    reset: function(prop_name) {\n      this.set(prop_name, this.default(prop_name))\n    },\n\n    /**\n     * @returns true if the property name is defined, or false otherwise\n     */\n    has: function(path) {\n      try {\n        const r = this.get(path)\n        // values that are set but undefined return false\n        return typeof r !== 'undefined'\n      } catch (e) {\n        return false\n      }\n    },\n\n    /**\n     * Sets the value of name to value. name can use dot notation to reference\n     * nested values, e.g. \"database.port\". If objects in the chain don't yet\n     * exist, they will be initialized to empty objects\n     */\n    set: function(k, v) {\n      for (const path of FORBIDDEN_KEY_PATHS) {\n        if (k.startsWith(`${path}.`)) {\n          return this\n        }\n      }\n\n      v = coerce(k, v, this._schema, this)\n      const path = k.split('.')\n      const childKey = path.pop()\n      const parentKey = path.join('.')\n      const parent = walk(this._instance, parentKey, true)\n      parent[childKey] = v\n      return this\n    },\n\n    /**\n     * Loads and merges a JavaScript object into config\n     */\n    load: function(conf) {\n      overlay(conf, this._instance, this._schema)\n      // environment and arguments always overrides config files\n      importEnvironment(rv)\n      importArguments(rv)\n      return this\n    },\n\n    /**\n     * Loads and merges one or multiple JSON configuration files into config\n     */\n    loadFile: function(paths) {\n      const self = this\n      if (!Array.isArray(paths)) {\n        paths = [paths]\n      }\n      paths.forEach(function(path) {\n        // Support empty config files #253\n        const result = loadFile(path)\n        if (result) {\n          overlay(result, self._instance, self._schema)\n        }\n      })\n      // environment and arguments always overrides config files\n      importEnvironment(rv)\n      importArguments(rv)\n      return this\n    },\n\n    /**\n     * Validates config against the schema used to initialize it\n     */\n    validate: function(options) {\n      options = options || {}\n\n      options.allowed = options.allowed || ALLOWED_OPTION_WARN\n\n      if (options.output && typeof options.output !== 'function') {\n        throw new Error('options.output is optional and must be a function.')\n      }\n\n      const output_function = options.output || global.console.log\n\n      const errors = validate(this._instance, this._schema, options.allowed)\n\n      if (errors.invalid_type.length + errors.undeclared.length + errors.missing.length) {\n        const sensitive = this._sensitive\n\n        const fillErrorBuffer = function(errors) {\n          let err_buf = ''\n          for (let i = 0; i < errors.length; i++) {\n\n            if (err_buf.length) {\n              err_buf += '\\n'\n            }\n\n            const e = errors[i]\n\n            if (e.fullName) {\n              err_buf += e.fullName + ': '\n            }\n            if (e.message) {\n              err_buf += e.message\n            }\n            if (e.value && !sensitive.has(e.fullName)) {\n              err_buf += ': value was ' + JSON.stringify(e.value)\n            }\n          }\n          return err_buf\n        }\n\n        const types_err_buf = fillErrorBuffer(errors.invalid_type)\n        const params_err_buf = fillErrorBuffer(errors.undeclared)\n        const missing_err_buf = fillErrorBuffer(errors.missing)\n\n        const output_err_bufs = [types_err_buf, missing_err_buf]\n\n        if (options.allowed === ALLOWED_OPTION_WARN && params_err_buf.length) {\n          let warning = 'Warning:'\n          if (process.stdout.isTTY) {\n            // Write 'Warning:' in bold and in yellow\n            const SET_BOLD_YELLOW_TEXT = '\\x1b[33;1m'\n            const RESET_ALL_ATTRIBUTES = '\\x1b[0m'\n            warning = SET_BOLD_YELLOW_TEXT + warning + RESET_ALL_ATTRIBUTES\n          }\n          output_function(warning + ' ' + params_err_buf)\n        } else if (options.allowed === ALLOWED_OPTION_STRICT) {\n          output_err_bufs.push(params_err_buf)\n        }\n\n        const output = output_err_bufs\n          .filter(function(str) {\n            return str.length\n          })\n          .join('\\n')\n\n        if (output.length) {\n          throw new Error(output)\n        }\n\n      }\n      return this\n    }\n  }\n\n  // If the definition is a string treat it as an external schema file\n  if (typeof def === 'string') {\n    rv._def = loadFile(def)\n  } else {\n    rv._def = def\n  }\n\n  // build up current config from definition\n  rv._schema = {\n    _cvtProperties: {}\n  }\n\n  rv._env = {}\n  rv._argv = {}\n  rv._sensitive = new Set()\n\n  Object.keys(rv._def).forEach(function(k) {\n    normalizeSchema(k, rv._def[k], rv._schema._cvtProperties, k, rv._env, rv._argv,\n      rv._sensitive)\n  })\n\n  rv._instance = {}\n  addDefaultValues(rv._schema, rv._instance, rv)\n  importEnvironment(rv)\n  importArguments(rv)\n\n  return rv\n}\n\n/**\n * Adds a new custom format\n */\nconvict.addFormat = function(name, validate, coerce) {\n  if (typeof name === 'object') {\n    validate = name.validate\n    coerce = name.coerce\n    name = name.name\n  }\n  if (typeof validate !== 'function') {\n    throw new Error('Validation function for ' + name + ' must be a function.')\n  }\n  if (coerce && typeof coerce !== 'function') {\n    throw new Error('Coerce function for ' + name + ' must be a function.')\n  }\n  types[name] = validate\n  if (coerce) {\n    custom_converters.set(name, coerce)\n  }\n}\n\n/**\n * Adds new custom formats\n */\nconvict.addFormats = function(formats) {\n  Object.keys(formats).forEach(function(type) {\n    convict.addFormat(type, formats[type].validate, formats[type].coerce)\n  })\n}\n\n/**\n * Adds a new custom file parser\n */\nconvict.addParser = function(parsers) {\n  if (!Array.isArray(parsers)) {\n    parsers = [parsers]\n  }\n\n  parsers.forEach(function(parser) {\n    if (!parser) {\n      throw new Error('Invalid parser')\n    }\n    if (!parser.extension) {\n      throw new Error('Missing parser.extension')\n    }\n    if (!parser.parse) {\n      throw new Error('Missing parser.parse function')\n    }\n\n    if (typeof parser.parse !== 'function') {\n      throw new Error('Invalid parser.parse function')\n    }\n\n    const extensions = !Array.isArray(parser.extension) ? [parser.extension] : parser.extension\n    extensions.forEach(function(extension) {\n      if (typeof extension !== 'string') {\n        throw new Error('Invalid parser.extension')\n      }\n      parsers_registry[extension] = parser.parse\n    })\n  })\n}\n\nmodule.exports = convict\n", "'use strict'\n\nconst convict = require('../')\n\ndescribe('Convict prototype pollution resistance', function() {\n\n  test('against __proto__', function() {\n    const obj = {}\n    const config = convict(obj)\n\n    config.set('__proto__.polluted_proto_root', 'Polluted!')\n    expect({}).not.toHaveProperty('polluted_proto_root')\n\n    config.set('__proto__.nested.polluted_proto_nested', 'Polluted!')\n    expect({}).not.toHaveProperty('nested')\n    expect({}).not.toHaveProperty('nested.polluted_proto_nested')\n  })\n\n  test('against this.constructor.prototype', function() {\n    const obj = {}\n    const config = convict(obj)\n\n    config.set('this.constructor.prototype.polluted_constructor_prototype_root', 'Polluted!')\n    expect({}).not.toHaveProperty('polluted_constructor_prototype_root')\n\n    config.set('this.constructor.prototype.nested.polluted_constructor_prototype_nested', 'Polluted!')\n    expect({}).not.toHaveProperty('nested')\n    expect({}).not.toHaveProperty('nested.polluted_constructor_prototype_nested')\n  })\n\n})\n"], "fixing_code": ["# Change Log\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/)\nand this project adheres to [Semantic Versioning](http://semver.org/).\n\n\n## [6.2.3] - 2022-05-07\n\n### Fixed\n\n- More more complete fix for prototype pollution vulnerability first addressed\n  in #384 (Marc-Aur\u00e8le Darche @madarche, Snyk Security team)\n\n\n## [6.2.2] - 2022-03-27\n\n### Fixed\n\n- More complete fix for prototype pollution vulnerability first addressed in\n  #384 (Marc-Aur\u00e8le Darche @madarche)\n\n\n## [6.2.1] - 2021-10-20\n\n### Fixed\n\n- Fix misspelling of the word optional in the error message #397 (Dan Allen @mojavelinux))\n\n\n## [6.2.0] - 2021-05-21\n\n### Changed\n\n- Update dependency: validator `^11.1.0` \u2192 `^13.6.0` ([#390](https://github.com/mozilla/node-convict/pull/390))\n- Update dependency: parser `^18.1.3` \u2192 `^20.2.7` ([#390](https://github.com/mozilla/node-convict/pull/390))\n- Update dependency: moment `^2.24.0` \u2192 `^2.29.1` ([#390](https://github.com/mozilla/node-convict/pull/390))\n\n\n## [6.1.0] - 2021-05-03\n\n### Added\n\n- Add new \"nullable\" option to allow \"null\" additionally to any format #386 (maxwrlr)\n\n\n## [6.0.1] - 2021-03-11\n\n### Fixed\n\n- Fix prototype pollution vulnerability #384 (arjunshibu, Jamie Slome)\n\n\n## [6.0.0] - 2020-05-02\n### Changed\n\n- [BREAKING] Multi-packages split #327 (A-312, Marc-Aur\u00e8le Darche @madarche).\n  There are now 3 packages: convict, convict-format-with-validator, convict-format-with-moment\n- [BREAKING] Remove the *json5* dependency and make it an optional parser #326 (A-312)\n- Ease relying applications security fixes by using `^x.y.z` range versions for\n  Convict's `dependencies` and `devDependencies`, instead of exact/strict versions.\n  Nowadays all applications should lock their `dependencies` and\n  `devDependencies` using lock files such as `package-lock.json`. There is also\n  tools such as `npm audit fix` that very easily and effectively fix\n  vulnerabilites in version ranges. So, from now on, Convict will not put itself\n  in the way, by leveraging Semantic Versioning to its maximum for\n  `dependencies` and `devDependencies`. (Marc-Aur\u00e8le Darche @madarche)\n\n### Fixed\n\n- Fix multiple vulns by upgrading some deps\n  (Cyrille Verrier @cyrille-arundo, Marc-Aur\u00e8le Darche @madarche)\n\n\n## [5.2.0] - 2019-10-12\n### Added\n\n- Add output preference for validate #301 (A-312)\n\n### Changed\n\n- Bump validator from 10.11.0 to 11.1.0 #316 (Tomasz Adamski @tmszdmsk)\n\n### Fixed\n\n- Fix vulns by upgrading some deps (eslint, mocha, coveralls) + npm audit fix\n  (Marc-Aur\u00e8le Darche @madarche)\n- Doc: Fix typo and improve grammar and consistency in double-hyphen warning\n  #324 (Maya Vera @mayavera)\n- Doc: Fix link #308 (Brett Neese @brettneese)\n- Fix test on Windows #304 (A-312)\n\n## [5.1.0] - 2019-07-26\n### Added\n\n- Add context argument to custom format validate #296 (A-312)\n\n## [5.0.2] - 2019-07-26\n### Changed\n\n- Include only required validator functions #279 (Marcin K @chyzwar)\n\n## [5.0.1] - 2019-07-26\n### Fixed\n\n- Fix dev deps vulns by upgrading (nyc, coveralls) #295 (Marc-Aur\u00e8le Darche @madarche, A-312)\n\n## [5.0.0] - 2019-05-06\n### Changed\n\n- Drop long deprecated `strict: true`/`strict: false` option, which has been replaced by the\n  `allowed: 'strict`/`allowed: 'warn` option (Marc-Aur\u00e8le Darche @madarche)\n- Update runtime deps (json5, moment, validator, yargs-parser) (Marc-Aur\u00e8le Darche @madarche)\n- Update dev deps (coveralls, eslint, js-yaml, mocha, toml) (Marc-Aur\u00e8le Darche @madarche)\n- Replaced dev deps (istanbul replaced by nyc, obj_diff replaced by\n  deep-object-diff) (Marc-Aur\u00e8le Darche @madarche)\n- Drop Node.js < 6 support due to dep requirements (Marc-Aur\u00e8le Darche @madarche)\n\n## [4.4.1] - 2018-12-15\n### Fixed\n\n- Fix README for addFormats #268, #275 (Walter Rumsby @wrumsby, Sebastian Yandun\n  @svyandun, Eray Hanoglu @erayhanoglu, Marc-Aur\u00e8le Darche @madarche)\n\n### Changed\n\n- Update deps (yargs-parser, validator) (Marc-Aur\u00e8le Darche @madarche)\n\n## [4.4.0] - 2018-09-22\n### Fixed\n\n- Fixed dot notation parsing by disabling dot-notation option in yarg-parser #269 (Patrick Shaw @PatrickShaw)\n\n### Added\n\n- Pass the name of the property being assigned to the custom coerce function #262 (Dan Allen @mojavelinux)\n\n## [4.3.2] - 2018-07-19\n### Fixed\n\n- Update deps (validator.js@10.4.0, yargs-parser@10.1.0, coveralls@3.0.2) fixes #264 (Marc-Aur\u00e8le Darche @madarche)\n\n## [4.3.1] - 2018-06-07\n### Fixed\n\n- Handle loading empty files #257 (Paul Colleoni @polco)\n\n## [4.3.0] - 2018-06-02\n### Fixed\n\n- Allow argument value to be falsy #246 (Dan Allen @mojavelinux)\n\n### Added\n\n- Accept args and env as parameters to convict function #223 (Dan Allen @mojavelinux)\n- Allow the default parser to be set #248 (Dan Allen @mojavelinux)\n- Add package-lock.json file (Marc-Aur\u00e8le Darche @madarche)\n\n### Changed\n\n- Update deps (almost all) (Marc-Aur\u00e8le Darche @madarche)\n\n### Removed\n\n- Remove browserify package and configuration. This was never needed. (Marc-Aur\u00e8le Darche @madarche)\n\n## [4.2.0] - 2018-03-23\n### Added\n\n- Enhanced file formats support #244 (Tuan Nguyen @rocketspacer)\n\n### Changed\n\n- Fix doc (Marc-Aur\u00e8le Darche @madarche)\n\n## [4.1.0] - 2018-03-15\n### Changed\n\n- Make warnings more visible by coloring them #242 (Nawfel @NawfelBgh)\n\n### Fixed\n- Fix custom format object nested properties warning by checking for the item\n  type instead of item format #234 (Helias Criouet @Helias-Criouet)\n- Fix README on how cli args work #226 (Ian Chadwick @ianchadwick)\n\n## [4.0.2] - 2017-11-30\n### Security\n\n- Update moment to fixed security version #231 (Marc-Aur\u00e8le Darche @madarche)\n\n## [4.0.1] - 2017-09-17\n### Changed\n\n- Update dependencies #220 (Marc-Aur\u00e8le Darche @madarche)\n- Move away from minimist to yargs-parser #219 (Marc-Aur\u00e8le Darche @madarche)\n- Corrected a typo #218 (Nikolay Govorov @nikolay-govorov)\n- Fix issue with empty string over default not null value #217 (Jonathan Petitcolas @jpetitcolas)\n- Ensure property defaults are not modified #216 (Eli Young @elyscape)\n- Nested props in 'object' values are not undeclared #215 (Michael McGahan @mmcgahan)\n\n## [4.0.0] - 2017-06-22\n### Added\n\n- Handle shorthand for default empty objects #194 (Eli Young @elyscape)\n- 100% test coverage #192 (Eli Young @elyscape)\n- Include static tests in code coverage checks #191 (Eli Young @elyscape)\n- Add support for masking sensitive values #190 (Eli Young @elyscape)\n- Support mapping env vars to multiple settings #189 (Richard Marmorstein @twitchard)\n\n### Changed\n\n- Rework validate() to check for overridden parent #206 (Eli Young @elyscape)\n- Document that a JSON/JSON5 schema file can be used #198 (Marc-Aur\u00e8le Darche @madarche)\n- Better advertize CLI tests as such #197 (Marc-Aur\u00e8le Darche @madarche)\n- Support arbitrary casing of booleans #195 (Eli Young @elyscape)\n\n### Removed\n\n- Remove the npm-shrinkwrap.json file #210 (Marc-Aur\u00e8le Darche @madarche)\n\n### Fixed\n\n- Fix documentation for config.loadFile() #207 (Eli Young @elyscape)\n- Tests env/arg type coercion and fix arg number coercion #199 (Eli Young @elyscape)\n- Make schema objects actually useful #196 (Eli Young @elyscape)\n\n## [3.0.0] - 2017-03-16\n### Added\n\n- In `validate` function alter option `strict` to `allowed`, with option values `strict` and `warn` #182 (@benTrust)\n\n### Changed\n\n- Rename pipe formats to emphasize that they are for windows pipes #179\n  (Gurpreet Atwal @gurpreetatwal)\n- Update dependencies #184 (Marc-Aur\u00e8le Darche @madarche)\n\n## [2.0.0] - 2016-12-18\n\n- Named Pipe Support #175 (Gurpreet Atwal @gurpreetatwal)\n- Stop supporting Node.js 0.12 by december 2016 #166 (Marc-Aur\u00e8le Darche @madarche)\n- Stop supporting Node.js 0.10 by october 2016 #164 (Marc-Aur\u00e8le Darche @madarche)\n- Remove deprecated methods `root` and `toSchemaString`\n- Deps: validator@6.2.0\n- Deps: moment@2.17.1\n- Deps: json5@0.5.1\n- devDeps: all up-to-date\n\n## [1.5.0] - 2016-09-28\n\n- Add `RegExp` format #165 (@philbooth)\n\n## [1.4.0] - 2016-05-29\n\n- Add new reset method #148 (Marc-Aur\u00e8le Darche @madarche)\n- Replace optimist which is deprecated #154 (Brian Vanderbusch @LongLiveCHIEF)\n- Move varify to optionalDependencies #153 (@mlucool)\n\n## [1.3.0] - 2016-04-07\n\n- Replace cjson with json5 (@ratson)\n- Fix missing npm-shrinkwrap.json file in published NPM module\n\n## [1.2.0] - 2016-04-01\n\n- Support for built-in formats in schema files #138 (Hem Brahmbhatt @damnhipster)\n- Improve stability and security: Use shrinkwrap to lock module dependencies #139 (Marc-Aur\u00e8le Darche @madarche)\n- devDeps: coveralls@2.11.9 to stay in sync\n- devDeps: eslint@2.5.3 to stay in sync\n\n## [1.1.3] - 2016-03-18\n\n- Fix Null default with custom validator causes json parse error #122 (@RoboPhred)\n- Documentation improvement (Brian Vanderbusch @LongLiveCHIEF)\n- Deps: moment@2.12.0 to stay in sync\n- devDeps: coveralls@2.11.8 to stay in sync\n- devDeps: eslint@2.4.0 to stay in sync\n- devDeps: mocha-lcov-reporter@1.2.0 to stay in sync\n\n## [1.1.2] - 2016-02-12\n\n- Documentation and management script fixes; no code changes.\n\n## [1.1.1] - 2016-02-05\n\n- Deps: moment@2.11.2 to fix\n  https://nodesecurity.io/advisories/moment_regular-expression-denial-of-service\n- Deps: validator@4.6.1 to stay in sync\n\n## [1.1.0] - 2016-02-02\n\n- Fix loading consecutive files could cause an error to be thrown #111\n  (Abdullah Ali @voodooattack)\n- Coerce values loaded from a file #96 (Jens Olsson @jsol)\n- Improvement: Pass instance to coerce #109 (Abdullah Ali @voodooattack)\n- Fix missing return in validate reducer #101 (Kris Reeves @myndzi)\n- Deps: moment\n- Deps: validator\n- Switch back from Blanket to Istanbul for test coverage (Marc-Aur\u00e8le Darche @madarche)\n- Stricter JSLint linting (Marc-Aur\u00e8le Darche @madarche)\n- Improve documentation (Olivier Lalonde @olalonde, Marc-Aur\u00e8le Darche @madarche)\n\n## [1.0.2] - 2015-12-09\n\n- Merge pull request [#97](https://github.com/mozilla/node-convict/issues/97) from yoz/cjson-0.3.2\n  Update cjson dependency to 0.3.2\n- Update cjson dependency to 0.3.2\n  This removes the transitive dependency on 'jsonlint' (in favor of json-parse-helpfulerror), which avoids its problems with unstated dependencies on 'file' and 'system'.\n- Coerce values loaded from a file\n  Previously values were coerced if added through\n  set(), command line arguments or env arguments.\n  Added the schema to the recursive overlay function\n  so that values added through load() and loadFile()\n  are also coerced.\n  Corrected a test to reflect this.\n- Deps: update all\n- Switch from JSHint to ESLint\n\n## [1.0.1] - 2015-08-11\n\n- Merge pull request [#87](https://github.com/mozilla/node-convict/issues/87) from mozilla/rfk/duration-integer-string\n  Accept integer millisecond durations in string form, e.g. from env vars.\n- Accept integer millisecond durations in string form, e.g. from env vars.\n\n## [1.0.0] - 2015-08-01\n\n- Merge pull request [#85](https://github.com/mozilla/node-convict/issues/85) from madarche/feat-1.0\n  v1.0.0 and remove old deprecated formats ipv4 and ipv6\n- Better wording for validate options\n- Consistency using periods\n- Improve feature description again\n- Improved features description\n- Better config.validate([options]) doc + beautify\n- Update dependencies\n- Merge branch 'feat-update-dependencies' into feat-1.0\n- v1.0.0 Remove old deprecated formats ipv4 and ipv6\n\n## [0.8.2] - 2015-07-20\n\n- Merge pull request [#84](https://github.com/mozilla/node-convict/issues/84) from madarche/feat-update-deps\n  Update dependencies\n- Update dependencies\n\n## [0.8.1] - 2015-07-20\n\n- Merge pull request [#82](https://github.com/mozilla/node-convict/issues/82) from myndzi/fix-license\n  Update package.json 'license' key format\n- Merge pull request [#83](https://github.com/mozilla/node-convict/issues/83) from madarche/feat-get-properties\n  Document and test properties and schema export\n- Document and test properties and schema export\n  This modification also renames the previously undocumented and untested\n  following methods:\n  * root\u2192getProperties and\n  * toSchemaString\u2192getSchemaString\n  The renaming was done for clearer intent and consistency in naming. The\n  previous method names are still supported but deprecated.\n- Update package.json 'license' key format\n- Merge pull request [#80](https://github.com/mozilla/node-convict/issues/80) from madarche/fix-nested-schema-doc\n  Document nested settings in schema\n- Merge pull request [#79](https://github.com/mozilla/node-convict/issues/79) from madarche/fix-doc\n  Document new strict validation mode\n- Document nested settings in schema\n  Fixes [#78](https://github.com/mozilla/node-convict/issues/78)\n- Document new strict validation mode\n  Fixes [#75](https://github.com/mozilla/node-convict/issues/75)\n- Merge pull request [#77](https://github.com/mozilla/node-convict/issues/77) from madarche/fix-test_coverage\n  Fix test coverage\n- Fix test coverage\n  The rationale in this change is to put logic as less as possible in\n  .travis.yml since it's not testable on developers' system.\n- Merge pull request [#76](https://github.com/mozilla/node-convict/issues/76) from madarche/feat-update_dependencies\n  Update dependencies\n- Merge pull request [#74](https://github.com/mozilla/node-convict/issues/74) from mmerkes/master\n  Fixes [#73](https://github.com/mozilla/node-convict/issues/73), removes validator.check from README.md and adds valid form\u2026\n- Update dependencies\n- Adds convict.addFormat() to validation section of README and tidies up section\n- Fixes [#73](https://github.com/mozilla/node-convict/issues/73), removes validator.check from README.md and adds valid format checker\n\n## [0.8.0] - 2015-05-31\n\n- Merge pull request [#64](https://github.com/mozilla/node-convict/issues/64) from umar-muneer/master\n  Strict Validation Mode Added\n- Merge pull request [#72](https://github.com/mozilla/node-convict/issues/72) from pdehaan/patch-2\n  Fix typos in README\n- Fix typos in README\n\n## [0.7.0] - 2015-04-29\n\n- Merge pull request [#66](https://github.com/mozilla/node-convict/issues/66) from collinwat/add-format-overload\n  addFormat supports object arguments as well as function arguments\n- Merge pull request [#70](https://github.com/mozilla/node-convict/issues/70) from madarche/fix-update-deps\n  Update dependencies and removed `should` replaced\n- Merge pull request [#69](https://github.com/mozilla/node-convict/issues/69) from madarche/feat-new-nodejs-0.12\n  Make CI test Node.js 0.12, the new stable\n- Update dependencies and removed `should` replaced\n  `should` has been replaced by `js-must`.\n- Make CI test Node.js 0.12, the new stable\n- Merge pull request [#61](https://github.com/mozilla/node-convict/issues/61) from ronjouch/browserifyTransformVarify\n  Add 'varify' browserify transform to support IE9,10\n- Add format supports object arguments as well as function arguments\n- Merge pull request [#62](https://github.com/mozilla/node-convict/issues/62) from madjid04/master\n  Add code coverage with blanket\n- Strict Validation Mode\n  1. Added a fix for nested validation checks.\n  2. Modified test case schema and config files.\n- Strict Validation Mode Added\n  1. Added a Strict Validation mode. If set to true, any properties\n  specified in config files that are not declared in the schema will\n  result in errors. This is to ensure that the schema and the config\n  files are in sync. This brings convict further in line with the concept\n  of a \u201cSchema\u201d. By default the strict mode is set to false.\n  2. Added test cases for strict mode\n- modification of the indentation\n\n## [0.6.1] - 2015-01-12\n\n- Fix duration check #54\n- Update dependencies #48\n- Use js-must a safer test assertion library #49\n\n## [0.6.0] - 2014-11-14\n\n- Update dependencies (including latest validator) #46\n- Deprecate \"ipv4\" and \"ipv6\" formats\n\n## [0.5.1] - 2014-10-29\n\n- Update dependencies\n- Use fix versions everywhere for safe validation\n- More readable date for test #43\n\n## [0.5.0] - 2014-10-15\n\n- Fix npmignore anything that's not needed for production #38\n- Fix The schema get modified by convict #37\n- npm ignore things\n- JSHint lint + 80 cols formatting #39\n\n## [0.4.3] - 2014-10-13\n\n- Test the correct convict object for the undefined attribute #31\n- Update moment.js to 2.6.0 #36\n\n## [0.4.2] - 2014-01-12\n\n- Update cjson 0.2.1 \u2014> 0.3.0\n- Coerce 'nat' formatted values #26\n- Update canonical package.json URLs #24\n- Fix 'should handle timestamp' failing test #21\n- Update package.json #43\n- Add license info\n  * Update Dependency #18\n\n## [0.4.1] - 2013-10-14\n\n- Support JSON formatted objects in env\n\n## [0.4.0] - 2013-07-31\n\n## [0.3.3] - 2013-06-18\n\n## [0.3.1] - 2013-06-04\n\n## [0.3.0] - 2013-06-03\n\n## [0.2.3] - 2013-05-27\n\n## [0.2.2] - 2013-05-25\n\n## [0.2.1] - 2013-05-25\n\n## [0.2.0] - 2013-05-23\n\n## [0.1.1] - 2013-05-19\n\n## [0.1.0] - 2013-03-05\n\nInitial release\n", "/**\n * convict\n * Configuration management with support for environmental variables, files,\n * and validation.\n */\n'use strict'\n\nconst fs = require('fs')\nconst parseArgs = require('yargs-parser')\nconst cloneDeep = require('lodash.clonedeep')\n\n// Forbidden key paths, for protection against prototype pollution\nconst FORBIDDEN_KEY_PATHS = [\n  '__proto__.',\n  'this.constructor.prototype.',\n]\n\nconst ALLOWED_OPTION_STRICT = 'strict'\nconst ALLOWED_OPTION_WARN = 'warn'\n\nfunction assert(assertion, err_msg) {\n  if (!assertion) {\n    throw new Error(err_msg)\n  }\n}\n\n// format can be a:\n// - predefine type, as seen below\n// - an array of enumerated values, e.g. [\"production\", \"development\", \"testing\"]\n// - built-in JavaScript type, i.e. Object, Array, String, Number, Boolean, RegExp\n// - or if omitted, the Object.prototype.toString.call of the default value\n\n/**\n * Checks if x is a valid port\n *\n * @param {*} x\n * @returns {Boolean}\n */\nfunction isPort(x) {\n  return Number.isInteger(x) && x >= 0 && x <= 65535\n}\n\n/**\n * Checks if x is a windows named pipe\n *\n * @see https://msdn.microsoft.com/en-us/library/windows/desktop/aa365783(v=vs.85).aspx\n * @param {*} x\n * @returns {Boolean}\n */\nfunction isWindowsNamedPipe(x) {\n  return String(x).includes('\\\\\\\\.\\\\pipe\\\\')\n}\n\nconst types = {\n  '*': function() { },\n  int: function(x) {\n    assert(Number.isInteger(x), 'must be an integer')\n  },\n  nat: function(x) {\n    assert(Number.isInteger(x) && x >= 0, 'must be a positive integer')\n  },\n  port: function(x) {\n    assert(isPort(x), 'ports must be within range 0 - 65535')\n  },\n  windows_named_pipe: function(x) {\n    assert(isWindowsNamedPipe(x), 'must be a valid pipe')\n  },\n  port_or_windows_named_pipe: function(x) {\n    if (!isWindowsNamedPipe(x)) {\n      assert(isPort(x), 'must be a windows named pipe or a number within range 0 - 65535')\n    }\n  }\n}\n// alias\ntypes.integer = types.int\n\nconst custom_converters = new Map()\n\nconst parsers_registry = {'*': JSON.parse}\n\nfunction flatten(obj, useProperties) {\n  const stack = Object.keys(obj)\n  let key\n\n  const entries = []\n\n  while (stack.length) {\n    key = stack.shift()\n    let val = walk(obj, key)\n    if (typeof val === 'object' && !Array.isArray(val) && val != null) {\n      if (useProperties) {\n        if ('_cvtProperties' in val) {\n          val = val._cvtProperties\n          key = key + '._cvtProperties'\n        } else {\n          entries.push([key, val])\n          continue\n        }\n      }\n      const subkeys = Object.keys(val)\n\n      // Don't filter out empty objects\n      if (subkeys.length > 0) {\n        subkeys.forEach(function(subkey) {\n          stack.push(key + '.' + subkey)\n        })\n        continue\n      }\n    }\n    entries.push([key, val])\n  }\n\n  const flattened = {}\n  entries.forEach(function(entry) {\n    let key = entry[0]\n    if (useProperties) {\n      key = key.replace(/\\._cvtProperties/g, '')\n    }\n    const val = entry[1]\n    flattened[key] = val\n  })\n\n  return flattened\n}\n\nfunction validate(instance, schema, strictValidation) {\n  const errors = {\n    undeclared: [],\n    invalid_type: [],\n    missing: []\n  }\n\n  const flatInstance = flatten(instance)\n  const flatSchema = flatten(schema._cvtProperties, true)\n\n  Object.keys(flatSchema).forEach(function(name) {\n    const schemaItem = flatSchema[name]\n    let instanceItem = flatInstance[name]\n    if (!(name in flatInstance)) {\n      try {\n        if (typeof schemaItem.default === 'object' &&\n          !Array.isArray(schemaItem.default)) {\n          // Missing item may be an object with undeclared children, so try to\n          // pull it unflattened from the config instance for type validation\n          instanceItem = walk(instance, name)\n        } else {\n          throw new Error('missing')\n        }\n      } catch (e) {\n        const err = new Error(\"configuration param '\" + name\n          + \"' missing from config, did you override its parent?\")\n        errors.missing.push(err)\n        return\n      }\n    }\n    delete flatInstance[name]\n\n    // ignore nested keys of schema 'object' properties\n    if (schemaItem.format === 'object' || typeof schemaItem.default === 'object') {\n      Object.keys(flatInstance)\n        .filter(function(key) {\n          return key.lastIndexOf(name + '.', 0) === 0\n        }).forEach(function(key) {\n          delete flatInstance[key]\n        })\n    }\n\n    if (!(typeof schemaItem.default === 'undefined' &&\n          instanceItem === schemaItem.default)) {\n      try {\n        schemaItem._format(instanceItem)\n      } catch (err) {\n        errors.invalid_type.push(err)\n      }\n    }\n\n    return\n  })\n\n  if (strictValidation) {\n    Object.keys(flatInstance).forEach(function(name) {\n      const err = new Error(\"configuration param '\" + name\n        + \"' not declared in the schema\")\n      errors.undeclared.push(err)\n    })\n  }\n\n  return errors\n}\n\n// helper for asserting that a value is in the list of valid options\nfunction contains(options, x) {\n  assert(options.indexOf(x) !== -1, 'must be one of the possible values: ' +\n         JSON.stringify(options))\n}\n\nconst BUILT_INS_BY_NAME = {\n  Object: Object,\n  Array: Array,\n  String: String,\n  Number: Number,\n  Boolean: Boolean,\n  RegExp: RegExp\n}\nconst BUILT_IN_NAMES = Object.keys(BUILT_INS_BY_NAME)\nconst BUILT_INS = BUILT_IN_NAMES.map(function(name) {\n  return BUILT_INS_BY_NAME[name]\n})\n\nfunction normalizeSchema(name, node, props, fullName, env, argv, sensitive) {\n  if (name === '_cvtProperties') {\n    throw new Error(\"'\" + fullName + \"': '_cvtProperties' is reserved word of convict.\")\n  }\n\n  // If the current schema node is not a config property (has no \"default\"), recursively normalize it.\n  if (typeof node === 'object' && node !== null && !Array.isArray(node) &&\n    Object.keys(node).length > 0 && !('default' in node)) {\n    props[name] = {\n      _cvtProperties: {}\n    }\n    Object.keys(node).forEach(function(k) {\n      normalizeSchema(k, node[k], props[name]._cvtProperties, fullName + '.' +\n                      k, env, argv, sensitive)\n    })\n    return\n  } else if (typeof node !== 'object' || Array.isArray(node) ||\n    node === null || Object.keys(node).length == 0) {\n    // Normalize shorthand \"value\" config properties\n    node = {default: node}\n  }\n\n  const o = cloneDeep(node)\n  props[name] = o\n  // associate this property with an environmental variable\n  if (o.env) {\n    if (!env[o.env]) {\n      env[o.env] = []\n    }\n    env[o.env].push(fullName)\n  }\n\n  // associate this property with a command-line argument\n  if (o.arg) {\n    if (argv[o.arg]) {\n      throw new Error(\"'\" + fullName + \"' reuses a command-line argument: \" +\n        o.arg)\n    }\n    argv[o.arg] = fullName\n  }\n\n  // mark this property as sensitive\n  if (o.sensitive === true) {\n    sensitive.add(fullName)\n  }\n\n  // store original format function\n  const format = o.format\n  let newFormat\n\n  if (BUILT_INS.indexOf(format) >= 0 || BUILT_IN_NAMES.indexOf(format) >= 0) {\n    // if the format property is a built-in JavaScript constructor,\n    // assert that the value is of that type\n    const Format = typeof format === 'string' ? BUILT_INS_BY_NAME[format] : format\n    newFormat = function(x) {\n      assert(Object.prototype.toString.call(x) ==\n        Object.prototype.toString.call(new Format()),\n      'must be of type ' + Format.name)\n    }\n    o.format = Format.name.toLowerCase()\n\n  } else if (typeof format === 'string') {\n    // store declared type\n    if (!types[format]) {\n      throw new Error(\"'\" + fullName + \"' uses an unknown format type: \" +\n        format)\n    }\n\n    // use a predefined type\n    newFormat = types[format]\n\n  } else if (Array.isArray(format)) {\n    // assert that the value is a valid option\n    newFormat = contains.bind(null, format)\n\n  } else if (typeof format === 'function') {\n    newFormat = format\n\n  } else if (format && typeof format !== 'function') {\n    throw new Error(\"'\" + fullName +\n      \"': `format` must be a function or a known format type.\")\n  }\n\n  if (!newFormat && !format) {\n    // default format is the typeof the default value\n    const type = Object.prototype.toString.call(o.default)\n    newFormat = function(x) {\n      assert(Object.prototype.toString.call(x) == type,\n        ' should be of type ' + type.replace(/\\[.* |]/g, ''))\n    }\n  }\n\n  o._format = function(x) {\n    // accept null if allowed before calling any format function\n    if (this.nullable && x === null) {\n      return\n    }\n\n    try {\n      newFormat(x, this)\n    } catch (e) {\n      // attach the value and the property's fullName to the error\n      e.fullName = fullName\n      e.value = x\n      throw e\n    }\n  }\n}\n\nfunction importEnvironment(o) {\n  const env = o.getEnv()\n  Object.keys(o._env).forEach(function(envStr) {\n    if (env[envStr] !== undefined) {\n      const ks = o._env[envStr]\n      ks.forEach(function(k) {\n        o.set(k, env[envStr])\n      })\n    }\n  })\n}\n\nfunction importArguments(o) {\n  const argv = parseArgs(o.getArgs(), {\n    configuration: {\n      'dot-notation': false\n    }\n  })\n  Object.keys(o._argv).forEach(function(argStr) {\n    const k = o._argv[argStr]\n    if (argv[argStr] !== undefined) {\n      o.set(k, String(argv[argStr]))\n    }\n  })\n}\n\nfunction addDefaultValues(schema, c, instance) {\n  Object.keys(schema._cvtProperties).forEach(function(name) {\n    const p = schema._cvtProperties[name]\n    if (p._cvtProperties) {\n      const kids = c[name] || {}\n      addDefaultValues(p, kids, instance)\n      c[name] = kids\n    } else {\n      c[name] = coerce(name, cloneDeep(p.default), schema, instance)\n    }\n  })\n}\n\nfunction isObj(o) {\n  return typeof o === 'object' && o !== null\n}\n\nfunction overlay(from, to, schema) {\n  Object.keys(from).forEach(function(k) {\n    // leaf\n    if (Array.isArray(from[k]) || !isObj(from[k]) || !schema || schema.format === 'object') {\n      to[k] = coerce(k, from[k], schema)\n    } else {\n      if (!isObj(to[k])) {\n        to[k] = {}\n      }\n      overlay(from[k], to[k], schema._cvtProperties[k])\n    }\n  })\n}\n\nfunction traverseSchema(schema, path) {\n  const ar = path.split('.')\n  let o = schema\n  while (ar.length > 0) {\n    const k = ar.shift()\n    if (o && o._cvtProperties && o._cvtProperties[k]) {\n      o = o._cvtProperties[k]\n    } else {\n      o = null\n      break\n    }\n  }\n\n  return o\n}\n\nfunction getFormat(schema, path) {\n  const o = traverseSchema(schema, path)\n  if (o == null) {\n    return null\n  }\n  if (typeof o.format === 'string') {\n    return o.format\n  }\n  if (o.default != null) {\n    return typeof o.default\n  }\n  return null\n}\n\nfunction coerce(k, v, schema, instance) {\n  const format = getFormat(schema, k)\n\n  if (typeof v === 'string') {\n    if (custom_converters.has(format)) {\n      return custom_converters.get(format)(v, instance, k)\n    }\n    switch (format) {\n    case 'port':\n    case 'nat':\n    case 'integer':\n    case 'int': v = parseInt(v, 10); break\n    case 'port_or_windows_named_pipe': v = isWindowsNamedPipe(v) ? v : parseInt(v, 10); break\n    case 'number': v = parseFloat(v); break\n    case 'boolean': v = String(v).toLowerCase() !== 'false'; break\n    case 'array': v = v.split(','); break\n    case 'object': v = JSON.parse(v); break\n    case 'regexp': v = new RegExp(v); break\n    default:\n        // TODO: Should we throw an exception here?\n    }\n  }\n\n  return v\n}\n\nfunction loadFile(path) {\n  const segments = path.split('.')\n  const extension = segments.length > 1 ? segments.pop() : ''\n  const parse = parsers_registry[extension] || parsers_registry['*']\n\n  // TODO Get rid of the sync call\n  // eslint-disable-next-line no-sync\n  return parse(fs.readFileSync(path, 'utf-8'))\n}\n\nfunction walk(obj, path, initializeMissing) {\n  if (path) {\n    const ar = path.split('.')\n    while (ar.length) {\n      const k = ar.shift()\n      if (initializeMissing && obj[k] == null) {\n        obj[k] = {}\n        obj = obj[k]\n      } else if (k in obj) {\n        obj = obj[k]\n      } else {\n        throw new Error(\"cannot find configuration param '\" + path + \"'\")\n      }\n    }\n  }\n\n  return obj\n}\n\n/**\n * @returns a config object\n */\nconst convict = function convict(def, opts) {\n\n  // TODO: Rename this `rv` variable (supposedly \"return value\") into something\n  // more meaningful.\n  const rv = {\n    /**\n     * Gets the array of process arguments, using the override passed to the\n     * convict function or process.argv if no override was passed.\n     */\n    getArgs: function() {\n      return opts && opts.args || process.argv.slice(2)\n    },\n\n    /**\n     * Gets the environment variable map, using the override passed to the\n     * convict function or process.env if no override was passed.\n     */\n    getEnv: function() {\n      return opts && opts.env || process.env\n    },\n\n    /**\n     * Exports all the properties (that is the keys and their current values) as JSON\n     */\n    getProperties: function() {\n      return cloneDeep(this._instance)\n    },\n\n    /**\n     * Exports all the properties (that is the keys and their current values) as\n     * a JSON string, with sensitive values masked. Sensitive values are masked\n     * even if they aren't set, to avoid revealing any information.\n     */\n    toString: function() {\n      const clone = cloneDeep(this._instance)\n      this._sensitive.forEach(function(key) {\n        const path = key.split('.')\n        const childKey = path.pop()\n        const parentKey = path.join('.')\n        const parent = walk(clone, parentKey)\n        parent[childKey] = '[Sensitive]'\n      })\n      return JSON.stringify(clone, null, 2)\n    },\n\n    /**\n     * Exports the schema as JSON.\n     */\n    getSchema: function() {\n      return JSON.parse(JSON.stringify(this._schema))\n    },\n\n    /**\n     * Exports the schema as a JSON string\n     */\n    getSchemaString: function() {\n      return JSON.stringify(this._schema, null, 2)\n    },\n\n    /**\n     * @returns the current value of the name property. name can use dot\n     *     notation to reference nested values\n     */\n    get: function(path) {\n      const o = walk(this._instance, path)\n      return cloneDeep(o)\n    },\n\n    /**\n     * @returns the default value of the name property. name can use dot\n     *     notation to reference nested values\n     */\n    default: function(path) {\n      // The default value for FOO.BAR.BAZ is stored in `_schema._cvtProperties` at:\n      //   FOO._cvtProperties.BAR._cvtProperties.BAZ.default\n      path = path.split('.').join('._cvtProperties.') + '.default'\n      const o = walk(this._schema._cvtProperties, path)\n      return cloneDeep(o)\n    },\n\n    /**\n     * Resets a property to its default value as defined in the schema\n     */\n    reset: function(prop_name) {\n      this.set(prop_name, this.default(prop_name))\n    },\n\n    /**\n     * @returns true if the property name is defined, or false otherwise\n     */\n    has: function(path) {\n      try {\n        const r = this.get(path)\n        // values that are set but undefined return false\n        return typeof r !== 'undefined'\n      } catch (e) {\n        return false\n      }\n    },\n\n    /**\n     * Sets the value of name to value. name can use dot notation to reference\n     * nested values, e.g. \"database.port\". If objects in the chain don't yet\n     * exist, they will be initialized to empty objects\n     */\n    set: function(k, v) {\n      for (const forbidden_key_path of FORBIDDEN_KEY_PATHS) {\n        if (k.startsWith(forbidden_key_path) ||\n            k.includes(`.${forbidden_key_path}`)) {\n          return this\n        }\n      }\n\n      v = coerce(k, v, this._schema, this)\n      const path = k.split('.')\n      const childKey = path.pop()\n      const parentKey = path.join('.')\n      const parent = walk(this._instance, parentKey, true)\n      parent[childKey] = v\n      return this\n    },\n\n    /**\n     * Loads and merges a JavaScript object into config\n     */\n    load: function(conf) {\n      overlay(conf, this._instance, this._schema)\n      // environment and arguments always overrides config files\n      importEnvironment(rv)\n      importArguments(rv)\n      return this\n    },\n\n    /**\n     * Loads and merges one or multiple JSON configuration files into config\n     */\n    loadFile: function(paths) {\n      const self = this\n      if (!Array.isArray(paths)) {\n        paths = [paths]\n      }\n      paths.forEach(function(path) {\n        // Support empty config files #253\n        const result = loadFile(path)\n        if (result) {\n          overlay(result, self._instance, self._schema)\n        }\n      })\n      // environment and arguments always overrides config files\n      importEnvironment(rv)\n      importArguments(rv)\n      return this\n    },\n\n    /**\n     * Validates config against the schema used to initialize it\n     */\n    validate: function(options) {\n      options = options || {}\n\n      options.allowed = options.allowed || ALLOWED_OPTION_WARN\n\n      if (options.output && typeof options.output !== 'function') {\n        throw new Error('options.output is optional and must be a function.')\n      }\n\n      const output_function = options.output || global.console.log\n\n      const errors = validate(this._instance, this._schema, options.allowed)\n\n      if (errors.invalid_type.length + errors.undeclared.length + errors.missing.length) {\n        const sensitive = this._sensitive\n\n        const fillErrorBuffer = function(errors) {\n          let err_buf = ''\n          for (let i = 0; i < errors.length; i++) {\n\n            if (err_buf.length) {\n              err_buf += '\\n'\n            }\n\n            const e = errors[i]\n\n            if (e.fullName) {\n              err_buf += e.fullName + ': '\n            }\n            if (e.message) {\n              err_buf += e.message\n            }\n            if (e.value && !sensitive.has(e.fullName)) {\n              err_buf += ': value was ' + JSON.stringify(e.value)\n            }\n          }\n          return err_buf\n        }\n\n        const types_err_buf = fillErrorBuffer(errors.invalid_type)\n        const params_err_buf = fillErrorBuffer(errors.undeclared)\n        const missing_err_buf = fillErrorBuffer(errors.missing)\n\n        const output_err_bufs = [types_err_buf, missing_err_buf]\n\n        if (options.allowed === ALLOWED_OPTION_WARN && params_err_buf.length) {\n          let warning = 'Warning:'\n          if (process.stdout.isTTY) {\n            // Write 'Warning:' in bold and in yellow\n            const SET_BOLD_YELLOW_TEXT = '\\x1b[33;1m'\n            const RESET_ALL_ATTRIBUTES = '\\x1b[0m'\n            warning = SET_BOLD_YELLOW_TEXT + warning + RESET_ALL_ATTRIBUTES\n          }\n          output_function(warning + ' ' + params_err_buf)\n        } else if (options.allowed === ALLOWED_OPTION_STRICT) {\n          output_err_bufs.push(params_err_buf)\n        }\n\n        const output = output_err_bufs\n          .filter(function(str) {\n            return str.length\n          })\n          .join('\\n')\n\n        if (output.length) {\n          throw new Error(output)\n        }\n\n      }\n      return this\n    }\n  }\n\n  // If the definition is a string treat it as an external schema file\n  if (typeof def === 'string') {\n    rv._def = loadFile(def)\n  } else {\n    rv._def = def\n  }\n\n  // build up current config from definition\n  rv._schema = {\n    _cvtProperties: {}\n  }\n\n  rv._env = {}\n  rv._argv = {}\n  rv._sensitive = new Set()\n\n  Object.keys(rv._def).forEach(function(k) {\n    normalizeSchema(k, rv._def[k], rv._schema._cvtProperties, k, rv._env, rv._argv,\n      rv._sensitive)\n  })\n\n  rv._instance = {}\n  addDefaultValues(rv._schema, rv._instance, rv)\n  importEnvironment(rv)\n  importArguments(rv)\n\n  return rv\n}\n\n/**\n * Adds a new custom format\n */\nconvict.addFormat = function(name, validate, coerce) {\n  if (typeof name === 'object') {\n    validate = name.validate\n    coerce = name.coerce\n    name = name.name\n  }\n  if (typeof validate !== 'function') {\n    throw new Error('Validation function for ' + name + ' must be a function.')\n  }\n  if (coerce && typeof coerce !== 'function') {\n    throw new Error('Coerce function for ' + name + ' must be a function.')\n  }\n  types[name] = validate\n  if (coerce) {\n    custom_converters.set(name, coerce)\n  }\n}\n\n/**\n * Adds new custom formats\n */\nconvict.addFormats = function(formats) {\n  Object.keys(formats).forEach(function(type) {\n    convict.addFormat(type, formats[type].validate, formats[type].coerce)\n  })\n}\n\n/**\n * Adds a new custom file parser\n */\nconvict.addParser = function(parsers) {\n  if (!Array.isArray(parsers)) {\n    parsers = [parsers]\n  }\n\n  parsers.forEach(function(parser) {\n    if (!parser) {\n      throw new Error('Invalid parser')\n    }\n    if (!parser.extension) {\n      throw new Error('Missing parser.extension')\n    }\n    if (!parser.parse) {\n      throw new Error('Missing parser.parse function')\n    }\n\n    if (typeof parser.parse !== 'function') {\n      throw new Error('Invalid parser.parse function')\n    }\n\n    const extensions = !Array.isArray(parser.extension) ? [parser.extension] : parser.extension\n    extensions.forEach(function(extension) {\n      if (typeof extension !== 'string') {\n        throw new Error('Invalid parser.extension')\n      }\n      parsers_registry[extension] = parser.parse\n    })\n  })\n}\n\nmodule.exports = convict\n", "'use strict'\n\nconst convict = require('../')\n\ndescribe('Convict prototype pollution resistance', function() {\n\n  test('against __proto__', function() {\n    const obj = {}\n    const config = convict(obj)\n\n    config.set('__proto__.polluted_proto_root', 'Polluted!')\n    expect({}).not.toHaveProperty('polluted_proto_root')\n\n    config.set('__proto__.nested.polluted_proto_nested', 'Polluted!')\n    expect({}).not.toHaveProperty('nested')\n    expect({}).not.toHaveProperty('nested.polluted_proto_nested')\n\n    config.set('this.__proto__.polluted_proto_root', 'Polluted!')\n    expect({}).not.toHaveProperty('polluted_proto_root')\n\n    config.set('this.__proto__.nested.polluted_proto_nested', 'Polluted!')\n    expect({}).not.toHaveProperty('nested')\n    expect({}).not.toHaveProperty('nested.polluted_proto_nested')\n\n    config.set('foo.__proto__.polluted_proto_root', 'Polluted!')\n    expect({}).not.toHaveProperty('polluted_proto_root')\n\n    config.set('foo.__proto__.nested.polluted_proto_nested', 'Polluted!')\n    expect({}).not.toHaveProperty('nested')\n    expect({}).not.toHaveProperty('nested.polluted_proto_nested')\n  })\n\n  test('against this.constructor.prototype', function() {\n    const obj = {}\n    const config = convict(obj)\n\n    config.set('this.constructor.prototype.polluted_constructor_prototype_root', 'Polluted!')\n    expect({}).not.toHaveProperty('polluted_constructor_prototype_root')\n\n    config.set('this.constructor.prototype.nested.polluted_constructor_prototype_nested', 'Polluted!')\n    expect({}).not.toHaveProperty('nested')\n    expect({}).not.toHaveProperty('nested.polluted_constructor_prototype_nested')\n\n    config.set('this.this.constructor.prototype.polluted_constructor_prototype_root', 'Polluted!')\n    expect({}).not.toHaveProperty('polluted_constructor_prototype_root')\n\n    config.set('this.this.constructor.prototype.nested.polluted_constructor_prototype_nested', 'Polluted!')\n    expect({}).not.toHaveProperty('nested')\n    expect({}).not.toHaveProperty('nested.polluted_constructor_prototype_nested')\n\n    config.set('foo.this.constructor.prototype.polluted_constructor_prototype_root', 'Polluted!')\n    expect({}).not.toHaveProperty('polluted_constructor_prototype_root')\n\n    config.set('foo.this.constructor.prototype.nested.polluted_constructor_prototype_nested', 'Polluted!')\n    expect({}).not.toHaveProperty('nested')\n    expect({}).not.toHaveProperty('nested.polluted_constructor_prototype_nested')\n  })\n\n})\n"], "filenames": ["CHANGELOG.md", "packages/convict/src/main.js", "packages/convict/test/prototype_pollution.test.js"], "buggy_code_start_loc": [6, 14, 16], "buggy_code_end_loc": [6, 572, 28], "fixing_code_start_loc": [7, 14, 17], "fixing_code_end_loc": [15, 573, 57], "type": "CWE-1321", "message": "This affects the package convict before 6.2.3. This is a bypass of [CVE-2022-22143](https://security.snyk.io/vuln/SNYK-JS-CONVICT-2340604). The [fix](https://github.com/mozilla/node-convict/commit/3b86be087d8f14681a9c889d45da7fe3ad9cd880) introduced, relies on the startsWith method and does not prevent the vulnerability: before splitting the path, it checks if it starts with __proto__ or this.constructor.prototype. To bypass this check it's possible to prepend the dangerous paths with any string value followed by a dot, like for example foo.__proto__ or foo.this.constructor.prototype.", "other": {"cve": {"id": "CVE-2022-21190", "sourceIdentifier": "report@snyk.io", "published": "2022-05-13T20:15:08.013", "lastModified": "2022-05-24T14:11:33.373", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "This affects the package convict before 6.2.3. This is a bypass of [CVE-2022-22143](https://security.snyk.io/vuln/SNYK-JS-CONVICT-2340604). The [fix](https://github.com/mozilla/node-convict/commit/3b86be087d8f14681a9c889d45da7fe3ad9cd880) introduced, relies on the startsWith method and does not prevent the vulnerability: before splitting the path, it checks if it starts with __proto__ or this.constructor.prototype. To bypass this check it's possible to prepend the dangerous paths with any string value followed by a dot, like for example foo.__proto__ or foo.this.constructor.prototype."}, {"lang": "es", "value": "Esto afecta al paquete convict versiones anteriores a 6.2.3. Esto es una omisi\u00f3n de [CVE-2022-22143](https://security.snyk.io/vuln/SNYK-JS-CONVICT-2340604). La [fix](https://github.com/mozilla/node-convict/commit/3b86be087d8f14681a9c889d45da7fe3ad9cd880) introducida, esta basada en el m\u00e9todo startsWith y no impide la vulnerabilidad: antes de dividir la ruta, comprueba si comienza con __proto__ o this.constructor.prototype. Para impider esta comprobaci\u00f3n es posible anteponer a las rutas peligrosas cualquier valor de cadena seguido de un punto, como por ejemplo foo.__proto__ o foo.this.constructor.prototype"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1321"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mozilla:convict:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "6.2.3", "matchCriteriaId": "255ADFF4-3826-4C4D-AD80-FA83F171E3C4"}]}]}], "references": [{"url": "https://gist.github.com/dellalibera/cebce20e51410acebff1f46afdc89808", "source": "report@snyk.io", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/mozilla/node-convict/blob/3b86be087d8f14681a9c889d45da7fe3ad9cd880/packages/convict/src/main.js%23L571", "source": "report@snyk.io", "tags": ["Broken Link", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/mozilla/node-convict/blob/master/CHANGELOG.md%23623---2022-05-07", "source": "report@snyk.io", "tags": ["Broken Link", "Release Notes", "Tool Signature"]}, {"url": "https://github.com/mozilla/node-convict/commit/1ea0ab19c5208f66509e1c43b0d0f21c1fd29b75", "source": "report@snyk.io", "tags": ["Patch", "Tool Signature"]}, {"url": "https://snyk.io/vuln/SNYK-JS-CONVICT-2774757", "source": "report@snyk.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/mozilla/node-convict/commit/1ea0ab19c5208f66509e1c43b0d0f21c1fd29b75"}}