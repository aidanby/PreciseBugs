{"buggy_code": ["# Release Notes\n\n## 2.6.3 (2023-08-15)\n\n- Prevent uploading .phps + .(x)html files in assets manager\n- Require verification for updating user data\n- Support post field projection after content population (via ..{fieldname})\n- Extract width + height and colors from uploaded svg files\n- Implement HTTP caching when using response cache (via rspc parameter)\n- Resolve `{field}:locale` in filter and sort parameters\n- Optimize icon font size\n- Add missing meta fields to GraphQL model definitions @filipmiik\n- Fix long text expanding grid items\n\n## 2.6.2 (2023-07-31)\n\n- Add video frame preview (assets manager)\n- Fix `$not` for MongoLite\n- Add `app.system.install` event trigger on initial installation\n- Add support for closing dialogs via `Escape`\n- Add cached modules loading\n- Update icon font\n- Fix global error handler when using spaces\n- Auto map :{space}/storage/* to .spaces/{space}/storage/* (Apache)\n\n## 2.6.1 (2023-06-24)\n\n- Fix api token checking\n\n## 2.6.0 (2023-06-21)\n\n- Try to auto-generate meaningful linked content preview if display setting is missing\n- Update Vue to v3.3.4\n- Add missing permission settings @raffaelj\n- Improve role permissions UI\n- Show locale value picker only if multiple locales are available\n- Use `crypto.randomUUID()` only if available\n- Populate only allowed models in content api (thanks @Ccamm)\n- Fix possible content `models` permission naming collision (thanks @raffaelj)\n- Fix internal content find/populate api exposing data to users without required rights (thanks @raffaelj)\n- Fix empty settings screen\n- Add csrf token validation to internal api calls to improve security (thanks @Ccamm)\n- Add clone functionality to tree content items\n- Add additional checks to `/api/system/healthcheck`\n- Fix disabling asset picker in wysiwyg field\n- Improve fields projection (eg nested fields) when using MongoLite as data storage\n- Use AG Grid instead of Tabulator.js as a foundation for the table field\n- Limit number of files to upload in admin ui based on php setting `max_file_uploads`\n\n## 2.5.2 (2023-05-18)\n\n- Fix link content item dialog\n- Update vendor libs\n\n## 2.5.1 (2023-05-15)\n\n- Fix js error thrown in dialog component\n- Remove 2FA info from internal users/load api\n- Update icons\n- Minor UI improvements\n- add `content.remove.before` event\n- Refactor `kiss-popoutmenu` component to `kiss-popout`\n- Introduce `user-info` component\n- Update Vue to v3.3.2\n- Update vendor libs\n\n## 2.5.0 (2023-04-15)\n\n- Fix initial item position on tree item creation\n- Add avif image type support (depending on used GD lib)\n- Add experimental natural language to mongo query support (only for admin ui filtering collection items and assets)\n- Add lightweight indexing library (for full-text search)\n- Make logged login data configurable\n- Add filter models feature on role permission page\n- Fix populate option singleton data queries via GraphQL\n- Clone / duplicate collection items\n- Refactor admin ui language loading\n- Add `content:field:remove` and `content:field:rename` tower cli commands to cleanup content data after model changes\n\n\n## 2.4.1 (2023-03-20)\n\n- Add field preview renderer for boolen field\n- Fix tag field\n- Add display meta property support for tree content models\n- Add active property to field-nav items\n- Add additional security check when uploading files\n- Fix assets image cache check\n- Add thumbnail api usage to internal bucket storage file previews\n- Improve revisions display performance\n\n## 2.4.0 (2023-03-08)\n\n- Add additional security check editing php files in finder\n- Fix base64 encoding data not in latin char range\n- Add internal bucket storage container feature\n- Add /content/tree/{model} api endpoint\n- Batch edit content items\n- Update vendor libs\n\n## 2.3.9 (2023-02-13)\n\n- Fix batch state update (when using MongoLite) #75\n- Fix min/max settings for number fields #76\n- Set X-Frame-Options to prevent possible clickjacking via iframe layer\n- Allow to load linked content items in display previews #78\n- Allow to load thumbnails from linked assets in display previews\n\n## 2.3.8 (2023-02-04)\n\n- Fix not allowed user role modification by intercepting request\n- Fix tree item view #72\n- Update Vue to v3.2.47\n- Improve svg loading for <kiss-svg /> elements\n- Update vendor libs\n\n## 2.3.7 (2023-01-31)\n\n- Batch update collection items state\n- Add state filter to collection items view\n- Fix possible infinite content population loop\n- Fix filter option for collection link field\n- Add content view aside event triggers\n- Deep clone data object for preview interpolation\n- Update vendor libs\n\n## 2.3.6 (2023-01-03)\n\n- Fix tree model nesting items\n- Fix table preview for repeatable wysiwyg fields\n- Fix clearing readonly fields\n- Fix filter option for collection link field\n- Update vendor libs\n\n## 2.3.5 (2022-12-15)\n\n- Fix getallheaders keys\n- Improve assets api error message on missing parameters\n- Add placeholder container if empty nav field\n- Add autofocus to app search field on show\n- Add current locale context to fields in fields renderer component\n- Invalidate opcache for edited php files via finder\n- Remove avif support due to unpredictable server configurations\n- Fix PHP 8.2 related issues\n- Fix `maxlevel` meta property if value is 0\n- Define default sorting of items in collection model meta settings\n- Auto-resolve $DATE() values in db queries\n\n## 2.3.4 (2022-11-25)\n\n- Fix user settings updating for users without admin role\n- Update vendor libs\n- Update Vue to 3.2.45\n- Cache loaded icons in admin view\n- Add drag'n drop upload of files support (finder module)\n- Fix cross-origin error (content previews) @isemog\n\n## 2.3.3 (2022-11-02)\n\n- Add ESC + auto focus support for dialogs\n- Update Vue to 3.2.41\n- Add finder module (only for super admin users)\n- Set default value to false for boolean fields\n- Update vendor libs\n\n## 2.3.2 (2022-10-24)\n\n- Add clear cache action\n- Fix spaces load error if spaces folder does not exists\n\n\n## 2.3.1 (2022-10-21)\n\n- Fix return type for Utils::parseSize\n- Update Uppy.js to v3.0.1\n- Resolve nested linked content items on content item population\n- Auto-populate content item for content previews\n- Fix response cache\n- Fix time field error (list option)\n- Refactor CORS preflight handling\n- Add spaces feature (beta)\n\n## 2.3.0 (2022-09-16)\n\n- Update vendor libs\n- Fix field-object js error\n- Don't apply default content fields on update (saveItem)\n- Fix GraphQL error when numeric field names are used\n- Fix wysiwyg field (Safari) #24\n- Fix enter on selected result in app search\n- Update Vue to 3.2.39\n- Improve custom api endpoint resolving\n- Fix updating items via API #27 @o-\n\n\n## 2.2.2 (2022-08-20)\n\n- Add `./tower app:update` cli command to update Cockpit to the latest or specific version\n- Fix exposing 2FA secret in JWT token on login\n- Enable keyboard navigation in search modal #14 @raffaelj\n- Prevent double loading of field-code.js #15 @raffaelj\n- Fix 2fa for login modal #13 @raffaelj\n\n## 2.2.1 (2022-08-10)\n\n- Fix linked tree content item display resolver\n- Refactor content models index page\n\n## 2.2.0 (2022-08-08)\n\n- Add create|update|delete endpoints content item to REST API\n- Add GraphQL mutation saveContentItem to create|update content items\n- Add GraphQL mutation deleteContentItem to delete content items\n- Add app side panel (admin layout)\n- Stop execution of code after redirecting\n\n## 2.1.2 (2022-08-04)\n\n- \ud83d\udea8 Fix typo field-contentItemtLink -> Need to re-assign field type contentItemLink \ud83d\udea8\n- General cleanup + fix typos\n- Add content tree items reorder permission\n- Refactor app layout header\n- Show more detailed error message if saving user settings fail\n- Hide publish state configuration ui if missing permission to mange publish state\n- Fix selected item link of tree model\n- Fix missing assets folders permission checks\n\n## 2.1.1 (2022-08-02)\n\n- Fix tree model route in app search results\n- Fix loosing nested level on saving tree item\n\n## 2.1.0 (2022-08-01)\n\n- Add initial global app search implementation (alt|option + f)\n- Minor fixes on closing html tag + uninitialized variable #11 @remluben\n- Update lib/vendor\n- Update vendor assets sortablejs v1.15, uppy v2.13.1, tinyMCE v6.1.2\n- Add model type tree - organize content items as tree\n\n## 2.0.2 (2022-07-20)\n\n- Fix select boxes in dark theme (chrome on windows) #8\n- Change login (noun) to log in (verb)\n- Fix required field check on nested repeatable items\n- Enable picking item by clicking on empty placeholder area (Asset + Content Link field)\n- Open api playground with preselected api key\n- Enable clear field function also in nested fields\n- Make fields-manger + fields-renderer component available by default\n- Set content model icon\n\n## 2.0.1 (2022-07-17)\n\n- Refactor admin ui localization\n- Object.freeze App._vars + App._paths\n- Make logged in user information available on the client side (App.user)\n- Update .htaccess file to deny public access to php files except router entry index.php\n- Add visual hover state to content item tables\n\n## 2.0.0 (2022-07-13)\n\n- Initial release \ud83c\udf7e\ud83e\udd73", "<?php\n\n// Register Helpers\n$this->helpers['asset'] = 'Assets\\\\Helper\\\\Asset';\n\n// load admin related code\n$this->on('app.admin.init', function() {\n    include(__DIR__.'/admin.php');\n});\n\n// load api request related code\n$this->on('app.api.request', function() {\n    include(__DIR__.'/api.php');\n});\n\n// assets api\n$this->module('assets')->extend([\n\n    'assets' => function(array $options = []) {\n        $assets = $this->app->dataStorage->find('assets', $options)->toArray();\n        return $assets;\n    },\n\n    'update' => function($assets) {\n\n        $assets = isset($assets[0]) ? $assets : [$assets];\n        $by = $this->app->helper('auth')->getUser('_id', null);\n\n        foreach ($assets as &$asset) {\n\n            $_asset = $this->app->dataStorage->findOne('assets', ['_id' => $asset['_id']]);\n\n            if (!$_asset) continue;\n\n            $asset['_modified'] = time();\n            $asset['_mby'] = $by;\n\n            $this->app->trigger('assets.asset.update', [&$asset]);\n\n            $this->app->dataStorage->save('assets', $asset);\n\n        }\n\n        return $assets;\n    },\n\n    'folders' => function(array $options = []) {\n        return $this->app->dataStorage->find('assets/folders', $options)->toArray();\n    },\n\n    'upload' => function(string $param = 'files', array $meta = []) {\n\n        $files = [];\n\n        if (is_string($param) && isset($this->app->request->files[$param])) {\n            $files = $this->app->request->files[$param];\n        } elseif (is_array($param) && isset($param['name'], $param['error'], $param['tmp_name'])) {\n            $files = $param;\n        }\n\n        $finfo      = finfo_open(FILEINFO_MIME_TYPE);\n        $uploaded  = [];\n        $failed    = [];\n        $_files     = [];\n        $assets    = [];\n\n        $allowed   = $this->app->retrieve('assets/allowed_uploads', '*');\n        $allowed   = $allowed == '*' ? true : str_replace([' ', ','], ['', '|'], preg_quote(is_array($allowed) ? implode(',', $allowed) : $allowed));\n        $max_size  = $this->app->retrieve('assets/max_upload_size', 0);\n\n        $forbiddenExtension = ['php', 'phar', 'phtml', 'phps', 'htm', 'html', 'xhtml', 'htaccess'];\n        $forbiddenMime = [\n            'application/x-httpd-php', 'application/x-php', 'text/x-php',\n            'text/html', 'application/xhtml+xml'\n        ];\n\n        if (isset($files['name']) && is_array($files['name'])) {\n\n            $cnt = count($files['name']);\n\n            for ($i = 0; $i < $cnt; $i++) {\n\n                $_file  = $this->app->path('#tmp:').'/'.$files['name'][$i];\n                $_mime = finfo_file($finfo, $_file);\n                $_isAllowed = $allowed === true ? true : preg_match(\"/\\.({$allowed})$/i\", $_file);\n                $_sizeAllowed = $max_size ? filesize($files['tmp_name'][$i]) < $max_size : true;\n\n                // prevent uploading php / html files\n                if ($_isAllowed && (\n                    in_array(strtolower(pathinfo($_file, PATHINFO_EXTENSION)), $forbiddenExtension) ||\n                    in_array(strtolower($_mime), $forbiddenMime)\n                )) {\n                    $_isAllowed = false;\n                }\n\n                if (!$files['error'][$i] && $_isAllowed && $_sizeAllowed && move_uploaded_file($files['tmp_name'][$i], $_file)) {\n\n                    $_files[]   = $_file;\n                    $uploaded[] = $files['name'][$i];\n\n                    if (\\preg_match('/\\.(svg|xml)$/i', $_file)) {\n                        file_put_contents($_file, \\SVGSanitizer::clean(\\file_get_contents($_file)));\n                    }\n\n                } else {\n                    $failed[] = $files['name'][$i];\n                }\n            }\n        }\n\n        if (count($_files)) {\n\n            $assets = $this->add($_files, $meta, isset($meta['_id']));\n\n            foreach ($_files as $file) {\n                unlink($file);\n            }\n        }\n\n        return ['uploaded' => $uploaded, 'failed' => $failed, 'assets' => $assets];\n    },\n\n    'add' => function(array $files, array $meta = [], bool $update = false) {\n\n        $files     = isset($files[0]) ? $files : [$files];\n        $finfo     = finfo_open(FILEINFO_MIME_TYPE);\n        $assets    = [];\n        $created   = time();\n        $by        = $this->app->helper('auth')->getUser('_id', null);\n\n        foreach ($files as $idx => &$file) {\n\n            // clean filename\n            $name = basename($file);\n\n            // clean filename\n            $filename = pathinfo($file, PATHINFO_FILENAME);\n            $ext = pathinfo($file, PATHINFO_EXTENSION);\n            $cleanFilename = preg_replace('/[^a-zA-Z0-9-_\\.]/','', str_replace(' ', '-', $filename));\n            $clean = $cleanFilename.uniqid(\"_uid_\").'.'.$ext;\n            $path  = '/'.date('Y/m/d').'/'.$clean;\n\n            $asset = [\n                'path' => $path,\n                'title' => $name,\n                'mime' => finfo_file($finfo, $file),\n                'type' => 'unknown',\n                'description' => '',\n                'tags' => [],\n                'size' => filesize($file),\n                'colors' => null,\n                'width' => null,\n                'height' => null,\n                '_hash' => hash_file('md5', $file),\n                '_created' => $created,\n                '_modified' => $created,\n                '_cby' => $by\n            ];\n\n            if (!$asset['mime']) {\n                $asset['mime'] = 'unknown';\n            }\n\n            if ($asset['mime'] == 'image/svg') {\n                $asset['mime'] = 'image/svg+xml';\n            }\n\n            $asset['type'] = match(1) {\n                preg_match('/\\.(jpg|jpeg|png|gif|svg|webp)$/i', $file) => 'image',\n                preg_match('/\\.(mp4|mov|ogv|webv|wmv|flv|avi)$/i', $file) => 'video',\n                preg_match('/\\.(mp3|weba|ogg|wav|flac)$/i', $file) => 'audio',\n                preg_match('/\\.(zip|rar|7zip|gz|tar)$/i', $file) => 'archive',\n                preg_match('/\\.(txt|htm|html|pdf|md)$/i', $file) => 'document',\n                preg_match('/\\.(htm|html|php|css|less|js|json|md|markdown|yaml|xml|htaccess)$/i', $file) => 'code',\n                default => 'unknown'\n            };\n\n            if ($asset['type'] == 'image') {\n\n                if (preg_match('/\\.svg$/i', $file)) {\n\n                    if (function_exists('simplexml_load_string')) {\n\n                        $svgContent = file_get_contents($file);\n\n                        libxml_use_internal_errors(true);\n                        $xml = simplexml_load_string($svgContent);\n                        libxml_use_internal_errors(false);\n\n                        if ($xml && isset($xml['width']) && isset($xml['height'])) {\n\n                            $asset['width'] = (string)$xml['width'];\n                            $asset['height'] = (string)$xml['height'];\n\n                            if (is_numeric($asset['width'])) $asset['width'] = $asset['width'] + 0;\n                            if (is_numeric($asset['height'])) $asset['height'] = $asset['height'] + 0;\n\n                            $colors = [];\n\n                            foreach([\n                                '/#([a-fA-F0-9]{3,8})\\b/',\n                                '/rgba?\\(\\s*\\d+\\s*,\\s*\\d+\\s*,\\s*\\d+\\s*(,\\s*[\\d.]+\\s*)?\\)/',\n                                '/hsla?\\(\\s*\\d+\\s*,\\s*[\\d.%]+\\s*,\\s*[\\d.%]+\\s*(,\\s*[\\d.]+\\s*)?\\)/',\n                            ] as $regex) {\n                                preg_match_all($regex, $svgContent, $matches);\n                                if (isset($matches[0])) $colors = array_merge($colors, $matches[0]);\n                            }\n\n                            $asset['colors'] = count($colors) ? array_merge([], array_unique($colors)) : null;\n                        }\n                    }\n\n                } else {\n\n                    $info = getimagesize($file);\n                    $asset['width']  = $info[0];\n                    $asset['height'] = $info[1];\n\n                    if ($asset['width'] && $asset['height']) {\n\n                        try {\n                            $asset['colors'] = \\ColorThief\\ColorThief::getPalette($file, 5, ceil(($asset['width'] * $asset['height']) / 10000));\n                        } catch (\\Exception $e) {\n                            $asset['colors'] = [];\n                        }\n\n                        foreach ($asset['colors'] as &$color) {\n                            $color = sprintf(\"#%02x%02x%02x\", $color[0], $color[1], $color[2]);\n                        }\n                    }\n                }\n            }\n\n            $opts  = ['mimetype' => $asset['mime']];\n            $_meta = isset($meta[$idx]) && is_array($meta[$idx]) ? $meta[$idx] : $meta;\n\n            $this->app->trigger('assets.asset.upload', [&$asset, &$_meta, &$opts, &$file, &$path]);\n\n            if (!$asset) {\n                continue;\n            }\n\n            // move file\n            try {\n\n                $stream = fopen($file, 'r+');\n                $this->app->fileStorage->writeStream(\"uploads://{$path}\", $stream, $opts);\n\n                if (is_resource($stream)) {\n                    fclose($stream);\n                }\n\n            } catch (Throwable $exception) {\n                continue;\n            }\n\n            foreach ($_meta as $key => $val) {\n                $asset[$key] = $val;\n            }\n\n            $this->app->trigger('assets.asset', [&$asset]);\n\n            $assets[] = $asset;\n        }\n\n        if (count($assets)) {\n\n            if ($update) {\n                foreach ($assets as $asset) {\n                    $this->app->trigger('assets.asset.update', [&$asset]);\n                    $this->app->dataStorage->save('assets', $asset);\n                }\n            } else {\n                $this->app->trigger('assets.add', [&$assets]);\n                $this->app->dataStorage->insert('assets', $assets);\n            }\n        }\n\n        $this->app->trigger('assets.uploaded', [$assets]);\n\n        return $assets;\n    },\n\n    'remove' => function(mixed $assets) {\n\n        $assets = isset($assets[0]) ? $assets : [$assets];\n\n        foreach ($assets as &$asset) {\n\n            if (is_string($asset)) {\n                $asset = $this->app->dataStorage->findOne('assets', ['_id' => $asset]);\n            }\n\n            if (!isset($asset['_id'])) continue;\n\n            if (!isset($asset['path'])) {\n                $asset = $this->app->dataStorage->findOne('assets', ['_id' => $asset['_id']]);\n            }\n\n            if (!$asset) continue;\n\n            $this->app->dataStorage->remove('assets', ['_id' => $asset['_id']]);\n\n            if ($this->app->fileStorage->fileExists('uploads://'.trim($asset['path'], '/'))) {\n                $this->app->fileStorage->delete('uploads://'.trim($asset['path'], '/'));\n            }\n\n            $this->app->trigger('assets.asset.remove', [$asset]);\n        }\n\n        $this->app->trigger('assets.remove', [$assets]);\n\n        return $assets;\n    },\n\n    'thumbnail' => function(array $options = []) {\n        return $this->app->helper('asset')->thumbnail($options);\n    }\n]);\n"], "fixing_code": ["# Release Notes\n\n## WIP\n\n- Fix mime type detection on asset upload\n\n## 2.6.3 (2023-08-15)\n\n- Prevent uploading .phps + .(x)html files in assets manager\n- Require verification for updating user data\n- Support post field projection after content population (via ..{fieldname})\n- Extract width + height and colors from uploaded svg files\n- Implement HTTP caching when using response cache (via rspc parameter)\n- Resolve `{field}:locale` in filter and sort parameters\n- Optimize icon font size\n- Add missing meta fields to GraphQL model definitions @filipmiik\n- Fix long text expanding grid items\n\n## 2.6.2 (2023-07-31)\n\n- Add video frame preview (assets manager)\n- Fix `$not` for MongoLite\n- Add `app.system.install` event trigger on initial installation\n- Add support for closing dialogs via `Escape`\n- Add cached modules loading\n- Update icon font\n- Fix global error handler when using spaces\n- Auto map :{space}/storage/* to .spaces/{space}/storage/* (Apache)\n\n## 2.6.1 (2023-06-24)\n\n- Fix api token checking\n\n## 2.6.0 (2023-06-21)\n\n- Try to auto-generate meaningful linked content preview if display setting is missing\n- Update Vue to v3.3.4\n- Add missing permission settings @raffaelj\n- Improve role permissions UI\n- Show locale value picker only if multiple locales are available\n- Use `crypto.randomUUID()` only if available\n- Populate only allowed models in content api (thanks @Ccamm)\n- Fix possible content `models` permission naming collision (thanks @raffaelj)\n- Fix internal content find/populate api exposing data to users without required rights (thanks @raffaelj)\n- Fix empty settings screen\n- Add csrf token validation to internal api calls to improve security (thanks @Ccamm)\n- Add clone functionality to tree content items\n- Add additional checks to `/api/system/healthcheck`\n- Fix disabling asset picker in wysiwyg field\n- Improve fields projection (eg nested fields) when using MongoLite as data storage\n- Use AG Grid instead of Tabulator.js as a foundation for the table field\n- Limit number of files to upload in admin ui based on php setting `max_file_uploads`\n\n## 2.5.2 (2023-05-18)\n\n- Fix link content item dialog\n- Update vendor libs\n\n## 2.5.1 (2023-05-15)\n\n- Fix js error thrown in dialog component\n- Remove 2FA info from internal users/load api\n- Update icons\n- Minor UI improvements\n- add `content.remove.before` event\n- Refactor `kiss-popoutmenu` component to `kiss-popout`\n- Introduce `user-info` component\n- Update Vue to v3.3.2\n- Update vendor libs\n\n## 2.5.0 (2023-04-15)\n\n- Fix initial item position on tree item creation\n- Add avif image type support (depending on used GD lib)\n- Add experimental natural language to mongo query support (only for admin ui filtering collection items and assets)\n- Add lightweight indexing library (for full-text search)\n- Make logged login data configurable\n- Add filter models feature on role permission page\n- Fix populate option singleton data queries via GraphQL\n- Clone / duplicate collection items\n- Refactor admin ui language loading\n- Add `content:field:remove` and `content:field:rename` tower cli commands to cleanup content data after model changes\n\n\n## 2.4.1 (2023-03-20)\n\n- Add field preview renderer for boolen field\n- Fix tag field\n- Add display meta property support for tree content models\n- Add active property to field-nav items\n- Add additional security check when uploading files\n- Fix assets image cache check\n- Add thumbnail api usage to internal bucket storage file previews\n- Improve revisions display performance\n\n## 2.4.0 (2023-03-08)\n\n- Add additional security check editing php files in finder\n- Fix base64 encoding data not in latin char range\n- Add internal bucket storage container feature\n- Add /content/tree/{model} api endpoint\n- Batch edit content items\n- Update vendor libs\n\n## 2.3.9 (2023-02-13)\n\n- Fix batch state update (when using MongoLite) #75\n- Fix min/max settings for number fields #76\n- Set X-Frame-Options to prevent possible clickjacking via iframe layer\n- Allow to load linked content items in display previews #78\n- Allow to load thumbnails from linked assets in display previews\n\n## 2.3.8 (2023-02-04)\n\n- Fix not allowed user role modification by intercepting request\n- Fix tree item view #72\n- Update Vue to v3.2.47\n- Improve svg loading for <kiss-svg /> elements\n- Update vendor libs\n\n## 2.3.7 (2023-01-31)\n\n- Batch update collection items state\n- Add state filter to collection items view\n- Fix possible infinite content population loop\n- Fix filter option for collection link field\n- Add content view aside event triggers\n- Deep clone data object for preview interpolation\n- Update vendor libs\n\n## 2.3.6 (2023-01-03)\n\n- Fix tree model nesting items\n- Fix table preview for repeatable wysiwyg fields\n- Fix clearing readonly fields\n- Fix filter option for collection link field\n- Update vendor libs\n\n## 2.3.5 (2022-12-15)\n\n- Fix getallheaders keys\n- Improve assets api error message on missing parameters\n- Add placeholder container if empty nav field\n- Add autofocus to app search field on show\n- Add current locale context to fields in fields renderer component\n- Invalidate opcache for edited php files via finder\n- Remove avif support due to unpredictable server configurations\n- Fix PHP 8.2 related issues\n- Fix `maxlevel` meta property if value is 0\n- Define default sorting of items in collection model meta settings\n- Auto-resolve $DATE() values in db queries\n\n## 2.3.4 (2022-11-25)\n\n- Fix user settings updating for users without admin role\n- Update vendor libs\n- Update Vue to 3.2.45\n- Cache loaded icons in admin view\n- Add drag'n drop upload of files support (finder module)\n- Fix cross-origin error (content previews) @isemog\n\n## 2.3.3 (2022-11-02)\n\n- Add ESC + auto focus support for dialogs\n- Update Vue to 3.2.41\n- Add finder module (only for super admin users)\n- Set default value to false for boolean fields\n- Update vendor libs\n\n## 2.3.2 (2022-10-24)\n\n- Add clear cache action\n- Fix spaces load error if spaces folder does not exists\n\n\n## 2.3.1 (2022-10-21)\n\n- Fix return type for Utils::parseSize\n- Update Uppy.js to v3.0.1\n- Resolve nested linked content items on content item population\n- Auto-populate content item for content previews\n- Fix response cache\n- Fix time field error (list option)\n- Refactor CORS preflight handling\n- Add spaces feature (beta)\n\n## 2.3.0 (2022-09-16)\n\n- Update vendor libs\n- Fix field-object js error\n- Don't apply default content fields on update (saveItem)\n- Fix GraphQL error when numeric field names are used\n- Fix wysiwyg field (Safari) #24\n- Fix enter on selected result in app search\n- Update Vue to 3.2.39\n- Improve custom api endpoint resolving\n- Fix updating items via API #27 @o-\n\n\n## 2.2.2 (2022-08-20)\n\n- Add `./tower app:update` cli command to update Cockpit to the latest or specific version\n- Fix exposing 2FA secret in JWT token on login\n- Enable keyboard navigation in search modal #14 @raffaelj\n- Prevent double loading of field-code.js #15 @raffaelj\n- Fix 2fa for login modal #13 @raffaelj\n\n## 2.2.1 (2022-08-10)\n\n- Fix linked tree content item display resolver\n- Refactor content models index page\n\n## 2.2.0 (2022-08-08)\n\n- Add create|update|delete endpoints content item to REST API\n- Add GraphQL mutation saveContentItem to create|update content items\n- Add GraphQL mutation deleteContentItem to delete content items\n- Add app side panel (admin layout)\n- Stop execution of code after redirecting\n\n## 2.1.2 (2022-08-04)\n\n- \ud83d\udea8 Fix typo field-contentItemtLink -> Need to re-assign field type contentItemLink \ud83d\udea8\n- General cleanup + fix typos\n- Add content tree items reorder permission\n- Refactor app layout header\n- Show more detailed error message if saving user settings fail\n- Hide publish state configuration ui if missing permission to mange publish state\n- Fix selected item link of tree model\n- Fix missing assets folders permission checks\n\n## 2.1.1 (2022-08-02)\n\n- Fix tree model route in app search results\n- Fix loosing nested level on saving tree item\n\n## 2.1.0 (2022-08-01)\n\n- Add initial global app search implementation (alt|option + f)\n- Minor fixes on closing html tag + uninitialized variable #11 @remluben\n- Update lib/vendor\n- Update vendor assets sortablejs v1.15, uppy v2.13.1, tinyMCE v6.1.2\n- Add model type tree - organize content items as tree\n\n## 2.0.2 (2022-07-20)\n\n- Fix select boxes in dark theme (chrome on windows) #8\n- Change login (noun) to log in (verb)\n- Fix required field check on nested repeatable items\n- Enable picking item by clicking on empty placeholder area (Asset + Content Link field)\n- Open api playground with preselected api key\n- Enable clear field function also in nested fields\n- Make fields-manger + fields-renderer component available by default\n- Set content model icon\n\n## 2.0.1 (2022-07-17)\n\n- Refactor admin ui localization\n- Object.freeze App._vars + App._paths\n- Make logged in user information available on the client side (App.user)\n- Update .htaccess file to deny public access to php files except router entry index.php\n- Add visual hover state to content item tables\n\n## 2.0.0 (2022-07-13)\n\n- Initial release \ud83c\udf7e\ud83e\udd73", "<?php\n\n// Register Helpers\n$this->helpers['asset'] = 'Assets\\\\Helper\\\\Asset';\n\n// load admin related code\n$this->on('app.admin.init', function() {\n    include(__DIR__.'/admin.php');\n});\n\n// load api request related code\n$this->on('app.api.request', function() {\n    include(__DIR__.'/api.php');\n});\n\n// assets api\n$this->module('assets')->extend([\n\n    'assets' => function(array $options = []) {\n        $assets = $this->app->dataStorage->find('assets', $options)->toArray();\n        return $assets;\n    },\n\n    'update' => function($assets) {\n\n        $assets = isset($assets[0]) ? $assets : [$assets];\n        $by = $this->app->helper('auth')->getUser('_id', null);\n\n        foreach ($assets as &$asset) {\n\n            $_asset = $this->app->dataStorage->findOne('assets', ['_id' => $asset['_id']]);\n\n            if (!$_asset) continue;\n\n            $asset['_modified'] = time();\n            $asset['_mby'] = $by;\n\n            $this->app->trigger('assets.asset.update', [&$asset]);\n\n            $this->app->dataStorage->save('assets', $asset);\n\n        }\n\n        return $assets;\n    },\n\n    'folders' => function(array $options = []) {\n        return $this->app->dataStorage->find('assets/folders', $options)->toArray();\n    },\n\n    'upload' => function(string $param = 'files', array $meta = []) {\n\n        $files = [];\n\n        if (is_string($param) && isset($this->app->request->files[$param])) {\n            $files = $this->app->request->files[$param];\n        } elseif (is_array($param) && isset($param['name'], $param['error'], $param['tmp_name'])) {\n            $files = $param;\n        }\n\n        $finfo      = finfo_open(FILEINFO_MIME_TYPE);\n        $uploaded  = [];\n        $failed    = [];\n        $_files     = [];\n        $assets    = [];\n\n        $allowed   = $this->app->retrieve('assets/allowed_uploads', '*');\n        $allowed   = $allowed == '*' ? true : str_replace([' ', ','], ['', '|'], preg_quote(is_array($allowed) ? implode(',', $allowed) : $allowed));\n        $max_size  = $this->app->retrieve('assets/max_upload_size', 0);\n\n        $forbiddenExtension = ['php', 'phar', 'phtml', 'phps', 'htm', 'html', 'xhtml', 'htaccess'];\n        $forbiddenMime = [\n            'application/x-httpd-php', 'application/x-php', 'text/x-php',\n            'text/html', 'application/xhtml+xml'\n        ];\n\n        if (isset($files['name']) && is_array($files['name'])) {\n\n            $cnt = count($files['name']);\n\n            for ($i = 0; $i < $cnt; $i++) {\n\n                $_file  = $this->app->path('#tmp:').'/'.$files['name'][$i];\n                $_mime = $finfo->file($files['tmp_name'][$i]);\n                $_isAllowed = $allowed === true ? true : preg_match(\"/\\.({$allowed})$/i\", $_file);\n                $_sizeAllowed = $max_size ? filesize($files['tmp_name'][$i]) < $max_size : true;\n\n                $extension = strtolower(pathinfo(parse_url($_file, PHP_URL_PATH), PATHINFO_EXTENSION));\n\n                // prevent uploading php / html files\n                if ($_isAllowed && (\n                    in_array($extension, $forbiddenExtension) ||\n                    in_array(strtolower($_mime), $forbiddenMime)\n                )) {\n                    $_isAllowed = false;\n                }\n\n                if (!$files['error'][$i] && $_isAllowed && $_sizeAllowed && move_uploaded_file($files['tmp_name'][$i], $_file)) {\n\n                    $_files[]   = $_file;\n                    $uploaded[] = $files['name'][$i];\n\n                    if (\\preg_match('/\\.(svg|xml)$/i', $_file)) {\n                        file_put_contents($_file, \\SVGSanitizer::clean(\\file_get_contents($_file)));\n                    }\n\n                } else {\n                    $failed[] = $files['name'][$i];\n                }\n            }\n        }\n\n        if (count($_files)) {\n\n            $assets = $this->add($_files, $meta, isset($meta['_id']));\n\n            foreach ($_files as $file) {\n                unlink($file);\n            }\n        }\n\n        return ['uploaded' => $uploaded, 'failed' => $failed, 'assets' => $assets];\n    },\n\n    'add' => function(array $files, array $meta = [], bool $update = false) {\n\n        $files     = isset($files[0]) ? $files : [$files];\n        $finfo     = finfo_open(FILEINFO_MIME_TYPE);\n        $assets    = [];\n        $created   = time();\n        $by        = $this->app->helper('auth')->getUser('_id', null);\n\n        foreach ($files as $idx => &$file) {\n\n            // clean filename\n            $name = basename($file);\n\n            // clean filename\n            $filename = pathinfo($file, PATHINFO_FILENAME);\n            $ext = pathinfo($file, PATHINFO_EXTENSION);\n            $cleanFilename = preg_replace('/[^a-zA-Z0-9-_\\.]/','', str_replace(' ', '-', $filename));\n            $clean = $cleanFilename.uniqid(\"_uid_\").'.'.$ext;\n            $path  = '/'.date('Y/m/d').'/'.$clean;\n\n            $asset = [\n                'path' => $path,\n                'title' => $name,\n                'mime' => finfo_file($finfo, $file),\n                'type' => 'unknown',\n                'description' => '',\n                'tags' => [],\n                'size' => filesize($file),\n                'colors' => null,\n                'width' => null,\n                'height' => null,\n                '_hash' => hash_file('md5', $file),\n                '_created' => $created,\n                '_modified' => $created,\n                '_cby' => $by\n            ];\n\n            if (!$asset['mime']) {\n                $asset['mime'] = 'unknown';\n            }\n\n            if ($asset['mime'] == 'image/svg') {\n                $asset['mime'] = 'image/svg+xml';\n            }\n\n            $asset['type'] = match(1) {\n                preg_match('/\\.(jpg|jpeg|png|gif|svg|webp)$/i', $file) => 'image',\n                preg_match('/\\.(mp4|mov|ogv|webv|wmv|flv|avi)$/i', $file) => 'video',\n                preg_match('/\\.(mp3|weba|ogg|wav|flac)$/i', $file) => 'audio',\n                preg_match('/\\.(zip|rar|7zip|gz|tar)$/i', $file) => 'archive',\n                preg_match('/\\.(txt|htm|html|pdf|md)$/i', $file) => 'document',\n                preg_match('/\\.(htm|html|php|css|less|js|json|md|markdown|yaml|xml|htaccess)$/i', $file) => 'code',\n                default => 'unknown'\n            };\n\n            if ($asset['type'] == 'image') {\n\n                if (preg_match('/\\.svg$/i', $file)) {\n\n                    if (function_exists('simplexml_load_string')) {\n\n                        $svgContent = file_get_contents($file);\n\n                        libxml_use_internal_errors(true);\n                        $xml = simplexml_load_string($svgContent);\n                        libxml_use_internal_errors(false);\n\n                        if ($xml && isset($xml['width']) && isset($xml['height'])) {\n\n                            $asset['width'] = (string)$xml['width'];\n                            $asset['height'] = (string)$xml['height'];\n\n                            if (is_numeric($asset['width'])) $asset['width'] = $asset['width'] + 0;\n                            if (is_numeric($asset['height'])) $asset['height'] = $asset['height'] + 0;\n\n                            $colors = [];\n\n                            foreach([\n                                '/#([a-fA-F0-9]{3,8})\\b/',\n                                '/rgba?\\(\\s*\\d+\\s*,\\s*\\d+\\s*,\\s*\\d+\\s*(,\\s*[\\d.]+\\s*)?\\)/',\n                                '/hsla?\\(\\s*\\d+\\s*,\\s*[\\d.%]+\\s*,\\s*[\\d.%]+\\s*(,\\s*[\\d.]+\\s*)?\\)/',\n                            ] as $regex) {\n                                preg_match_all($regex, $svgContent, $matches);\n                                if (isset($matches[0])) $colors = array_merge($colors, $matches[0]);\n                            }\n\n                            $asset['colors'] = count($colors) ? array_merge([], array_unique($colors)) : null;\n                        }\n                    }\n\n                } else {\n\n                    $info = getimagesize($file);\n                    $asset['width']  = $info[0];\n                    $asset['height'] = $info[1];\n\n                    if ($asset['width'] && $asset['height']) {\n\n                        try {\n                            $asset['colors'] = \\ColorThief\\ColorThief::getPalette($file, 5, ceil(($asset['width'] * $asset['height']) / 10000));\n                        } catch (\\Exception $e) {\n                            $asset['colors'] = [];\n                        }\n\n                        foreach ($asset['colors'] as &$color) {\n                            $color = sprintf(\"#%02x%02x%02x\", $color[0], $color[1], $color[2]);\n                        }\n                    }\n                }\n            }\n\n            $opts  = ['mimetype' => $asset['mime']];\n            $_meta = isset($meta[$idx]) && is_array($meta[$idx]) ? $meta[$idx] : $meta;\n\n            $this->app->trigger('assets.asset.upload', [&$asset, &$_meta, &$opts, &$file, &$path]);\n\n            if (!$asset) {\n                continue;\n            }\n\n            // move file\n            try {\n\n                $stream = fopen($file, 'r+');\n                $this->app->fileStorage->writeStream(\"uploads://{$path}\", $stream, $opts);\n\n                if (is_resource($stream)) {\n                    fclose($stream);\n                }\n\n            } catch (Throwable $exception) {\n                continue;\n            }\n\n            foreach ($_meta as $key => $val) {\n                $asset[$key] = $val;\n            }\n\n            $this->app->trigger('assets.asset', [&$asset]);\n\n            $assets[] = $asset;\n        }\n\n        if (count($assets)) {\n\n            if ($update) {\n                foreach ($assets as $asset) {\n                    $this->app->trigger('assets.asset.update', [&$asset]);\n                    $this->app->dataStorage->save('assets', $asset);\n                }\n            } else {\n                $this->app->trigger('assets.add', [&$assets]);\n                $this->app->dataStorage->insert('assets', $assets);\n            }\n        }\n\n        $this->app->trigger('assets.uploaded', [$assets]);\n\n        return $assets;\n    },\n\n    'remove' => function(mixed $assets) {\n\n        $assets = isset($assets[0]) ? $assets : [$assets];\n\n        foreach ($assets as &$asset) {\n\n            if (is_string($asset)) {\n                $asset = $this->app->dataStorage->findOne('assets', ['_id' => $asset]);\n            }\n\n            if (!isset($asset['_id'])) continue;\n\n            if (!isset($asset['path'])) {\n                $asset = $this->app->dataStorage->findOne('assets', ['_id' => $asset['_id']]);\n            }\n\n            if (!$asset) continue;\n\n            $this->app->dataStorage->remove('assets', ['_id' => $asset['_id']]);\n\n            if ($this->app->fileStorage->fileExists('uploads://'.trim($asset['path'], '/'))) {\n                $this->app->fileStorage->delete('uploads://'.trim($asset['path'], '/'));\n            }\n\n            $this->app->trigger('assets.asset.remove', [$asset]);\n        }\n\n        $this->app->trigger('assets.remove', [$assets]);\n\n        return $assets;\n    },\n\n    'thumbnail' => function(array $options = []) {\n        return $this->app->helper('asset')->thumbnail($options);\n    }\n]);\n"], "filenames": ["CHANGELOG.md", "modules/Assets/bootstrap.php"], "buggy_code_start_loc": [1, 84], "buggy_code_end_loc": [1, 91], "fixing_code_start_loc": [2, 84], "fixing_code_end_loc": [6, 93], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository cockpit-hq/cockpit prior to 2.6.4.", "other": {"cve": {"id": "CVE-2023-4395", "sourceIdentifier": "security@huntr.dev", "published": "2023-08-17T04:15:10.687", "lastModified": "2023-08-22T00:55:09.250", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository cockpit-hq/cockpit prior to 2.6.4."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:agentejo:cockpit:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.6.4", "matchCriteriaId": "20AD25FB-82CB-49B5-B01C-BF45CC9CE803"}]}]}], "references": [{"url": "https://github.com/cockpit-hq/cockpit/commit/36d1d4d256cbbab028342ba10cc493e5c119172c", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/60e38563-7ac8-4a13-ac04-2980cc48b0da", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/cockpit-hq/cockpit/commit/36d1d4d256cbbab028342ba10cc493e5c119172c"}}