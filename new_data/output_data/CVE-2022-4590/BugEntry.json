{"buggy_code": [";; Copyright (c) 2015-2022 Michael Schaeffer (dba East Coast Toolworks)\n;;\n;; Licensed as below.\n;;\n;; Licensed under the Apache License, Version 2.0 (the \"License\");\n;; you may not use this file except in compliance with the License.\n;; You may obtain a copy of the License at\n;;\n;;       http://www.apache.org/licenses/LICENSE-2.0\n;;\n;; The license is also includes at the root of the project in the file\n;; LICENSE.\n;;\n;; Unless required by applicable law or agreed to in writing, software\n;; distributed under the License is distributed on an \"AS IS\" BASIS,\n;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n;; See the License for the specific language governing permissions and\n;; limitations under the License.\n;;\n;; You must not remove this notice, or any other, from this software.\n\n\n(ns toto.todo.todo-list\n  (:use toto.core.util\n        toto.view.common\n        toto.view.icons\n        toto.view.components\n        toto.view.query\n        toto.view.page)\n  (:require [clojure.tools.logging :as log]\n            [hiccup.form :as form]\n            [hiccup.util :as util]\n            [toto.data.data :as data]\n            [toto.view.auth :as auth]\n            [toto.view.request-date :as request-date]\n            [toto.todo.sidebar-view :as sidebar-view]))\n\n(def html-breakpoint \"&#8203;\")\n\n(def pill-date-format (java.text.SimpleDateFormat. \"yyyy-MM-dd\"))\n\n(defn- format-date [ date ]\n  (.format pill-date-format date))\n\n(defn ensure-string-breakpoints [ s n ]\n  (clojure.string/join html-breakpoint (partition-string s n)))\n\n(defn- ensure-string-breaks [ string at ]\n  (clojure.string/replace string at (str at html-breakpoint)))\n\n(defn shorten-url-text [ url-text target-length ]\n  (let [url (java.net.URL. url-text)\n        base (str (.getProtocol url)\n                  \":\"\n                  (if-let [authority (.getAuthority url)]\n                    (str \"//\" authority)))]\n    (-> (util/escape-html\n         (str base\n              (string-leftmost (.getPath url)\n                               (max 0 (- (- target-length 3) (.length base)))\n                               \"...\")))\n        (ensure-string-breaks \"/\")\n        (ensure-string-breaks \".\"))))\n\n(defn- complete-item-button [ item-info ]\n  (post-button {:desc \"Complete Item\"\n                :target (str \"/item/\" (item-info :item_id) \"/complete\")}\n               img-check))\n\n(defn- restore-item-button [ item-info ]\n  (post-button {:desc \"Restore Item\"\n                :target (str \"/item/\" (item-info :item_id) \"/restore\")}\n               img-restore))\n\n(defn- delete-item-button [ item-info list-id ]\n  (post-button {:desc \"Delete Item\"\n                :target (str \"/item/\" (item-info :item_id) \"/delete\")}\n               img-trash))\n\n(defn- snooze-item-button [ item-info body ]\n  [:a {:href (shref \"\" {:modal \"snoozing\" :snoozing-item-id (item-info :item_id)})} body])\n\n(defn- item-priority-button [ item-id new-priority image-spec writable? ]\n  (if writable?\n    (post-button {:target (str \"/item/\" item-id \"/priority\")\n                  :args {:new-priority new-priority}\n                  :desc \"Set Item Priority\"}\n                 image-spec)\n    image-spec))\n\n(defn- render-item-priority-control [ item-id priority writable? ]\n  (if (request-date/valentines-day?)\n    (if (<= priority 0)\n      (item-priority-button item-id 1 img-heart-pink writable?)\n      (item-priority-button item-id 0 img-heart-red writable?))\n    (if (<= priority 0)\n      (item-priority-button item-id 1 img-star-gray writable?)\n      (item-priority-button item-id 0 img-star-yellow writable?))))\n\n(defn- render-new-item-form [ list-id editing-item? ]\n  (let [ sublists (data/get-view-sublists (auth/current-user-id) list-id)]\n    (form/form-to\n     {:class \"new-item-form\"}\n     [:post (shref \"/list/\" list-id)]\n     (if (= (count sublists) 0)\n       (form/hidden-field \"item-list-id\" list-id)\n       [:select {:id \"item-list-id\" :name \"item-list-id\"}\n        (form/select-options (map (fn [ sublist ]\n                                    [ (:desc sublist) (:sublist_id sublist)])\n                                  sublists))])\n     (form/text-field (cond-> {:maxlength \"1024\"\n                               :placeholder \"New Item Description\"\n                               :autocomplete \"off\"\n                               :onkeydown \"window._toto.onNewItemInputKeydown(event)\"}\n                        (not editing-item?) (assoc \"autofocus\" \"on\"))\n                      \"item-description\")\n     (form/hidden-field \"item-priority\" \"0\")\n     [:button.high-priority-submit {:type \"button\"\n                                    :onclick \"window._toto.submitHighPriority()\"}\n      img-star-yellow])))\n\n(def url-regex #\"(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]\")\n\n(defn- render-url [ [ url ] ]\n  [:a.item-link { :href url :target \"_blank\" } (shorten-url-text url 60)])\n\n(defn- render-item-text-segment [ item-text-segment ]\n  (clojure.string/join \" \" (map #(ensure-string-breakpoints % 15)\n                                (clojure.string/split item-text-segment #\"\\s\"))))\n\n(defn- render-item-text [ item-text ]\n  (interleave (conj (vec (map #(str \" \" (render-item-text-segment (.trim %)) \" \") (clojure.string/split item-text url-regex))) \"\")\n              (conj (vec (map render-url (re-seq url-regex item-text))) \"\")))\n\n(defn- render-age [ days ]\n  (cond (> days 720) (str (quot days 360) \"y\")\n        (> days 60) (str (quot days 30) \"m\")\n        :else (str days \"d\")))\n\n(defn item-drag-handle [ class item-info ]\n  [:div.item-drag-handle {:itemid (:item_id item-info)\n                          :class class}\n   img-drag-handle])\n\n(defn drop-target [ item-ordinal ]\n  [:div.order-drop-target {:ordinal item-ordinal :priority \"0\"} \"&nbsp;\"])\n\n(defn- render-todo-item [ view-list-id list-id item-info writable? editing? ]\n  (let [{item-id :item_id\n         is-complete? :is_complete\n         is-deleted? :is_deleted\n         priority :priority\n         snoozed-until :snoozed_until\n         currently-snoozed :currently_snoozed\n         created-by-id :created_by_id\n         created-by-email :created_by_email\n         created-by-name :created_by_name}\n        item-info]\n    [:div.item-row.order-drop-target\n     (cond-> {:id (str \"item_row_\" item-id)\n              :itemid item-id\n              :listid list-id\n              :ordinal (:item_ordinal item-info)\n              :priority priority\n              :class (class-set {\"editing\" editing?\n                                 \"display\" (not editing?)\n                                 \"high-priority\" (> priority 0)\n                                 \"snoozed\" currently-snoozed})}\n       writable? (assoc :edit-href (shref \"/list/\" view-list-id\n                                          { :edit-item-id item-id })))\n     (when writable?\n       (list\n        (item-drag-handle \"left\" item-info)\n        [:div.item-control.complete {:id (str \"item_control_\" item-id)}\n         (if editing?\n           (delete-item-button item-info list-id)\n           (if (or is-complete? is-deleted?)\n             (restore-item-button item-info)\n             (complete-item-button item-info)))]))\n     [:div.item-control.priority.left\n      (render-item-priority-control item-id priority writable?)]\n     [:div.item-description {:itemid item-id}\n      (if editing?\n         [:input (cond-> {:value (item-info :desc)\n                          :type \"text\"\n                          :name \"description\"\n                          :item-id item-id\n                          :view-href (shref \"/list/\" view-list-id without-modal)\n                          :onkeydown \"window._toto.onItemEditKeydown(event)\"}\n                   editing? (assoc \"autofocus\" \"on\"))]\n        (let [desc (item-info :desc)]\n          [:div {:id (str \"item_\" item-id)\n                 :class (class-set {\"deleted-item\" is-deleted?\n                                    \"completed-item\" is-complete?})}\n           (render-item-text desc)\n           (snooze-item-button item-info [:span.pill\n                                          (render-age (:age_in_days item-info))\n                                          (when currently-snoozed\n                                            (list\n                                             \", snoozed: \" (format-date snoozed-until)))])\n           (when (not (= created-by-id (auth/current-user-id)))\n             [:span.pill { :title created-by-email }\n              created-by-name])]))]\n     [:div.item-control.priority.right\n      (render-item-priority-control item-id priority writable?)]\n     (item-drag-handle \"right\" item-info)]))\n\n(defn- render-query-select [ id current-value ]\n  [:select { :id id :name id :onchange \"this.form.submit()\"}\n   (form/select-options [[ \"-\" \"-\"]\n                         [\"1d\" \"1\"]\n                         [\"7d\" \"7\"]\n                         [\"30d\" \"30\"]\n                         [\"90d\" \"90\"] ]\n                        (if (nil? current-value)\n                          \"-\"\n                          (str current-value)))])\n\n(defn- render-todo-list-query-settings [ list-id completed-within-days snoozed-for-days ]\n  [:div.query-settings\n   (form/form-to { :class \"embedded \"} [:get (shref \"/list/\" list-id)]\n                 [:div.control-segment\n                  [:a {:href (shref \"/list/\" list-id {:view \"completions\"})}\n                   \"[recently completed]\"]]\n                 [:div.control-segment\n                  [:a {:href (shref \"/list/\" list-id \"/details\")}\n                   \"[list details]\"]]\n                 [:div.control-segment\n                  [:a {:href (shref (str list-id) {:view :remove})}\n                   \" [default view]\"]]\n                 [:div.control-segment\n                  [:label {:for \"cwithin\"}\n                   \"Completed within: \"]\n                  (render-query-select \"cwithin\" completed-within-days)]\n                 [:div.control-segment\n                  [:a { :href (shref \"/list/\" list-id {:modal \"update-from\"} ) } \"[copy from]\"]])])\n\n(defn- render-todo-list-completion-query-settings [ list-id completed-within-days ]\n  [:div.query-settings\n   (form/form-to { :class \"embedded \"} [:get (shref \"/list/\" list-id \"/completions\")]\n                 [:div.control-segment\n                  [:a {:href (shref \"/list/\" list-id \"/details\")}\n                   \"[list details]\"]]\n                 [:div.control-segment\n                  [:a {:href (shref (str list-id) {:view :remove})}\n                   \" [default view]\"]]\n                 [:div.control-segment\n                  [:label {:for \"clwithin\"}\n                   \"Completed within: \"]\n                  (render-query-select \"clwithin\" completed-within-days)])])\n\n(defn- render-empty-list []\n  [:div.empty-list\n   [:h1\n    \"Nothing to do right now!\"]\n   [:p\n    \"To get started, you can add new items in the box above.\"]])\n\n(defn- render-snoozed-item-warning [ n-snoozed-items ]\n  [:div.snoozed-item-warning\n   n-snoozed-items \" more item\" (if (= n-snoozed-items 1) \"\" \"s\" ) \" snoozed for later. \"\n   \"Click \" [:a {:href (shref \"\" {:sfor \"99999\"})} \"here\"] \" to show.\"])\n\n(defn- todo-list-details [ view-list-id list-id edit-item-id writable? completed-within-days snoozed-for-days ]\n  (let [pending-items (data/get-pending-items list-id completed-within-days snoozed-for-days)\n        n-snoozed-items (count (filter :visibly_snoozed pending-items))\n        display-items (remove :visibly_snoozed pending-items)]\n\n    {:is-empty? (= (count display-items) 0)\n     :n-snoozed-items n-snoozed-items\n\n     :high-priority\n     (map #(render-todo-item view-list-id list-id % writable? (= edit-item-id (:item_id %)))\n          (filter #(> (:priority %) 0) display-items))\n\n     :normal-priority\n     (map #(render-todo-item view-list-id list-id % writable? (= edit-item-id (:item_id %)))\n          (filter #(<= (:priority %) 0) display-items))}))\n\n(defn- render-single-todo-list [ view-list-id list-id edit-item-id writable? completed-within-days snoozed-for-days ]\n  (let [details (todo-list-details view-list-id list-id edit-item-id writable? completed-within-days snoozed-for-days)]\n    (list\n     [:div.toplevel-list\n      (if (:is-empty? details)\n        (render-empty-list)\n        (concat\n         (:high-priority details)\n         (:normal-priority details)))]\n     (when (and writable? (> (:n-snoozed-items details) 0))\n       (render-snoozed-item-warning (:n-snoozed-items details))))))\n\n(defn- render-empty-view [ list-id ]\n  [:div.empty-list\n   [:h1\n    \"Empty list view!\"]\n   [:p\n    \"This is a todo list view, where it is possible to see the contents of\"\n    \" more than one list on a single page. To make this work, you need to \"\n    \" add a few lists to the view, which can be done \"\n    [:a {:href (shref \"/list/\" list-id \"/details\")} \"here\"] \".\"]])\n\n(defn- render-todo-list-view-section [ sublist-details key ]\n  (let [ items (key sublist-details ) ]\n    (when (> (count items) 0)\n      [:div.list-view-section\n       [:h2\n        [:a\n         {:href (shref \"/list/\" (:sublist_id sublist-details))}\n         (:desc sublist-details)]]\n       items])))\n\n(defn- render-todo-list-view [ list-id edit-item-id writable? completed-within-days snoozed-for-days ]\n  (let [ sublists (map #(merge % (todo-list-details list-id (:sublist_id %) edit-item-id writable? completed-within-days snoozed-for-days))\n                       (data/get-view-sublists (auth/current-user-id) list-id))]\n    [:div.toplevel-list\n     (cond\n       (= 0 (count sublists))\n       (render-empty-view list-id)\n\n       (every? true? (map :is-empty? sublists))\n       (render-empty-list)\n\n       :else\n       (list\n        (map #(render-todo-list-view-section % :high-priority) sublists)\n        (map #(render-todo-list-view-section % :normal-priority) sublists)\n\n        (let [ total-snoozed-items (apply + (map :n-snoozed-items sublists))]\n          (when (and writable? (> total-snoozed-items 0))\n            (render-snoozed-item-warning total-snoozed-items)))))]))\n\n(defn- message-recepient? []\n  (or (= 16 (auth/current-user-id))\n      (= 17 (auth/current-user-id))))\n\n(defn- render-valentines-day-banner []\n  (when (message-recepient?)\n    [:div.valentines-day-banner\n     img-heart-red\n     (if (request-date/valentines-day?)\n       \" Happy Valentines Day!!! I Love You! \"\n       \" I Love You, Teresa! \")\n     img-heart-red]))\n\n(defn- render-todo-list [ list-id edit-item-id writable? completed-within-days snoozed-for-days ]\n  (scroll-column\n   \"todo-list-scroller\"\n   (when writable?\n     (render-new-item-form list-id (boolean edit-item-id)))\n   (list\n    (render-valentines-day-banner)\n    (if (:is_view (data/get-todo-list-by-id list-id))\n      (render-todo-list-view list-id edit-item-id writable? completed-within-days snoozed-for-days )\n      (render-single-todo-list list-id list-id edit-item-id writable? completed-within-days snoozed-for-days))\n    (when writable?\n      (render-todo-list-query-settings list-id completed-within-days snoozed-for-days)))))\n\n(defn- render-empty-completion-list [ list-id ]\n  (let [n-items (data/get-item-count list-id)]\n    [:div.empty-list\n     [:h1\n      \"Nothing here right now!\"]\n     [:p\n      (if (= n-items 0)\n        \"As you add items and complete them, they will appear here.\"\n        \"Try expanding the query to see earlier completed items.\")]]))\n\n(defn- completed-items [ list-id completed-within-days ]\n  (let [ list-info (data/get-todo-list-by-id list-id) ]\n    (sort-by :updated_on\n             (mapcat (fn [ sublist-info ]\n                       (map #(assoc % :sublist_desc (:desc sublist-info))\n                            (data/get-completed-items (:sublist_id sublist-info) completed-within-days)))\n                     (if (:is_view list-info)\n                       (data/get-view-sublists (auth/current-user-id) list-id)\n                       [ { :sublist_id list-id :desc (:desc list-info)}])))))\n\n(defn- render-completed-item-list [ list-id completed-within-days ]\n  (let [ completed-items (completed-items list-id completed-within-days)]\n    (if (= (count completed-items) 0)\n      (render-empty-completion-list list-id)\n      (map\n       (fn [ todo-item ]\n         [:div.item-row {:class (class-set\n                                 {\"high-priority\" (> (:priority todo-item) 0)})}\n          [:div.item-description\n           [:div\n            (render-item-text (:desc todo-item))\n            [:span.pill (:sublist_desc todo-item)]\n            (when (> (:priority todo-item) 0)\n              (if (request-date/valentines-day?)\n                img-heart-red\n                img-star-yellow))]]])\n       completed-items))))\n\n(defn render-todo-list-completions [ list-id params ]\n  (let [min-list-priority (or (parsable-integer? (:min-list-priority params)) 0)\n        completed-within-days (or (parsable-integer? (:clwithin params)) 1)]\n    (render-page {:title ((data/get-todo-list-by-id list-id) :desc)\n                  :page-data-class \"todo-list-completions\"\n                  :sidebar (sidebar-view/render-sidebar-list-list list-id min-list-priority 0)}\n                 (scroll-column\n                  \"todo-list-completion-scroller\"\n                  [:h3\n                   [:a { :href (shref (str \"/list/\" list-id) {:view :remove}) } img-back-arrow]\n                   \"Items Completed Since: \" (format-date (add-days (current-time) (- completed-within-days)))]\n                  [:div.toplevel-list\n                   (render-completed-item-list list-id completed-within-days)\n                   (render-todo-list-completion-query-settings list-id completed-within-days)]))))\n\n(defn- render-snooze-modal [ params list-id ]\n  (let [ snoozing-item-id (parsable-integer? (:snoozing-item-id params))]\n    (defn render-snooze-choice [ label snooze-days shortcut-key ]\n      (post-button {:desc (str label \" (\" shortcut-key \")\")\n                    :target (str \"/item/\" snoozing-item-id \"/snooze\")\n                    :args {:snooze-days snooze-days}\n                    :shortcut-key shortcut-key\n                    :next-url (shref \"/list/\" list-id without-modal)}\n                   (str label \" (\" shortcut-key \")\")))\n    (render-modal\n     {:title \"Snooze item until later\"}\n     [:div.snooze-choices\n      (map (fn [ [ label snooze-days shortcut-key] ]\n               (render-snooze-choice label snooze-days shortcut-key))\n           [[\"Tomorrow\" 1 \"1\"]\n            [\"In Three Days\" 3 \"2\"]\n            [\"Next Week\"  7 \"3\"]\n            [\"Next Month\" 30 \"4\"]])]\n     (when (:currently_snoozed (data/get-item-by-id snoozing-item-id))\n       [:div.snooze-hoices\n        [:hr]\n        (render-snooze-choice \"Unsnooze\" 0 \"0\")]))))\n\n(defn- render-list-select [ id excluded-list-id ]\n  [:select { :id id :name id }\n   (form/select-options (map (fn [ list-info ]\n                               [ (:desc list-info) (:todo_list_id list-info)])\n                             (remove\n                              #(= excluded-list-id (:todo_list_id %))\n                              (data/get-todo-lists-by-user (auth/current-user-id)))))])\n\n(defn render-update-from-modal [ params list-id ]\n  (render-modal\n   {:title \"Update From\"\n    :form-post-to (shref \"/list/\" list-id \"/copy-from\" without-modal)}\n   \"Source:\"\n   (render-list-select \"copy-from-list-id\" (parsable-integer? list-id))\n   [:div.modal-controls\n    [:input {:type \"submit\" :value \"Copy List\"}]]))\n\n(defn- render-todo-list-item-page [ selected-list-id params ]\n  (let [edit-item-id (parsable-integer? (:edit-item-id params))\n        min-list-priority (or (parsable-integer? (:min-list-priority params)) 0)\n        completed-within-days (or (parsable-integer? (:cwithin params)) 0)\n        snoozed-for-days (or (parsable-integer? (:sfor params)) 0)]\n    (render-page {:title ((data/get-todo-list-by-id selected-list-id) :desc)\n                  :page-data-class \"todo-list\"\n                  :sidebar (sidebar-view/render-sidebar-list-list selected-list-id min-list-priority snoozed-for-days)\n                  :modals {\"snoozing\" #(render-snooze-modal params selected-list-id)\n                           \"update-from\" #(render-update-from-modal params selected-list-id)}}\n                 (render-todo-list selected-list-id edit-item-id true completed-within-days snoozed-for-days))))\n\n(defn render-todo-list-page [ selected-list-id params ]\n  (if (= (:view params) \"completions\")\n    (render-todo-list-completions selected-list-id params)\n    (render-todo-list-item-page selected-list-id params)))\n\n(defn render-todo-list-public-page [ params ]\n  (let [ { list-id :list-id } params ]\n    (when (and (data/list-public? list-id)\n               (not (data/list-owned-by-user-id? list-id (auth/current-user-id))))\n      (render-page {:title ((data/get-todo-list-by-id list-id) :desc)\n                    :page-data-class \"todo-list\"}\n                   (render-todo-list list-id nil false 0 0)))))\n", ";; Copyright (c) 2015-2022 Michael Schaeffer (dba East Coast Toolworks)\n;;\n;; Licensed as below.\n;;\n;; Licensed under the Apache License, Version 2.0 (the \"License\");\n;; you may not use this file except in compliance with the License.\n;; You may obtain a copy of the License at\n;;\n;;       http://www.apache.org/licenses/LICENSE-2.0\n;;\n;; The license is also includes at the root of the project in the file\n;; LICENSE.\n;;\n;; Unless required by applicable law or agreed to in writing, software\n;; distributed under the License is distributed on an \"AS IS\" BASIS,\n;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n;; See the License for the specific language governing permissions and\n;; limitations under the License.\n;;\n;; You must not remove this notice, or any other, from this\n\n(ns toto.todo.todo-list-manager\n  (:use toto.core.util\n        compojure.core\n        toto.view.common\n        toto.view.icons\n        toto.view.components\n        toto.view.query\n        toto.view.page)\n  (:require [clojure.tools.logging :as log]\n            [hiccup.form :as form]\n            [toto.data.data :as data]\n            [toto.view.auth :as auth]\n            [toto.todo.sidebar-view :as sidebar-view]))\n\n(defn- list-priority-button [ list-id new-priority image-spec ]\n  (post-button {:target (shref \"/list/\" list-id \"/priority\")\n                :args {:new-priority new-priority}\n                :desc \"Set List Priority\"}\n               image-spec))\n\n(defn render-list-star-control [ list-id priority ]\n  (if (<= priority 0)\n    (list-priority-button list-id 1 img-star-gray)\n    (list-priority-button list-id 0 img-star-yellow)))\n\n(defn render-list-arrow-control [ list-id priority ]\n  (if (>= priority 0)\n    (list-priority-button list-id -1 img-arrow-gray)\n    (list-priority-button list-id 0 img-arrow-blue)))\n\n(defn render-new-list-form [ ]\n  (form/form-to\n   {:class \"new-item-form\"}\n   [:post (shref \"/list\")]\n   (form/text-field {:maxlength \"32\"\n                     :placeholder \"New List Name\"\n                     :autofocus \"autofocus\"}\n                    \"list-description\")\n   [:div\n    (form/check-box \"is-view\" false \"Y\")\n    [:label {:for \"is-view\"} \"View\"]]))\n\n(defn render-list-list-page []\n  (render-page\n   {:title \"Manage Todo Lists\"}\n   (scroll-column\n    \"todo-list-list-scroller\"\n    (render-new-list-form)\n    [:div.toplevel-list.list-list\n     (map (fn [ list ]\n            (let [list-id (:todo_list_id list)\n                  priority (:priority list)]\n              [:div.item-row {:class (class-set {\"high-priority\" (> priority 0)\n                                                 \"low-priority\" (< priority 0)})}\n               [:div.item-control\n                [:a {:href (shref \"/list/\" list-id \"/details\")} img-edit-list]]\n               [:div.item-control\n                (render-list-star-control list-id priority)]\n               [:div.item-control\n                (render-list-arrow-control list-id priority)]\n               [:div.item-description\n                [:a {:href (shref \"/list/\" list-id)}\n                 (hiccup.util/escape-html (:desc list))\n                 [:span.pill (:item_count list)]]\n                (sidebar-view/render-list-visibility-flag list)]]))\n          (data/get-todo-lists-by-user (auth/current-user-id)))])))\n\n(defn- render-sort-list-panel [ list-id ]\n  [:div.config-panel\n   [:h1 \"Sort List\"]\n   (form/form-to {} [:post (shref \"/list/\" list-id \"/sort\")]\n    [:input {:type \"submit\" :value \"Sort By\"}]\n    [:select {:id \"sort-by\" :name \"sort-by\"}\n     (form/select-options [[\"Description\" \"desc\"]\n                           [\"Created Date\" \"created-on\"]\n                           [\"Updated Date\" \"updated-on\"]\n                           [\"Snoozed Until\" \"snoozed-until\"]])])])\n\n(defn- render-list-delete-panel [ list-id ]\n  [:div.config-panel\n   [:h1 \"Delete List\"]\n   (cond\n     (<= (data/get-user-list-count (auth/current-user-id)) 1)\n     [:span.warning \"Your last list cannot be deleted.\"]\n\n     (not (data/empty-list? list-id))\n     [:span.warning \"To delete this list, remove all items first.\"]\n\n     :else\n     (list\n      [:div\n       [:input.dangerous {:type \"submit\" :value \"Delete List\" :formaction (shref \"/list/\" list-id \"/delete\")}]\n       [:span.warning \"Warning, this cannot be undone.\"]]))])\n\n(defn- render-todo-list-permissions [ list-id error-message ]\n  (let [list-details (data/get-todo-list-by-id list-id)]\n    (list\n     [:div.config-panel\n      [:h1  \"List Permissions:\"]\n      [:div\n       (form/check-box \"is-public\" (:is_public list-details))\n       [:label {:for \"is-public\"} \"List publically visible?\"]]]\n     [:div.config-panel\n      [:h1  \"List Owners:\"]\n      (let [list-owners (data/get-todo-list-owners-by-list-id list-id) ]\n        [:div.list-owners\n         (map (fn [ { user-id :user_id user-email-addr :email_addr } ]\n                (let [ user-parameter-name (str \"user_\" user-id)]\n                  [:div.list-owner\n                   (if (= (auth/current-user-id) user-id)\n                     [:div.self-owner\n                      \"&nbsp;\"\n                      (form/hidden-field user-parameter-name \"on\")]\n                     (form/check-box user-parameter-name (in? list-owners user-id)))\n                   [:label {:for user-parameter-name}\n                    user-email-addr\n                    (when (= (auth/current-user-id) user-id)\n                      [:span.pill \"you\"])]]))\n              (data/get-friendly-users-by-id (auth/current-user-id)))\n         [:div.list-owner\n          [:div.self-owner \"&nbsp;\"]\n          [:input {:id \"share-with-email\"\n                   :name \"share-with-email\"\n                   :type \"text\"\n                   :placeholder \"Share Mail Address\"}]]\n         (when error-message\n           [:div.error-message\n            error-message])])])))\n\n(defn- render-todo-list-view-editor [ view-id ]\n  (let [user-id (auth/current-user-id)\n        todo-lists (data/get-todo-lists-by-user user-id)\n        view-sublist-ids (map :sublist_id (data/get-view-sublists user-id view-id))]\n    [:div.config-panel\n     [:h1 \"Component Lists\"]\n     [:div.component-lists\n      (map (fn [ todo-list ]\n             (let [ list-id (:todo_list_id todo-list) ]\n               [:div\n                (form/check-box (str \"list_\" list-id)\n                                (in? view-sublist-ids list-id))\n                (:desc todo-list)]))\n           (remove #(:is_view %) todo-lists))]]))\n\n(defn render-todo-list-details-page [ list-id min-list-priority & { :keys [ error-message ]}]\n  (let [list-details (data/get-todo-list-by-id list-id)\n        list-name (:desc list-details)\n        is-view (:is_view list-details)\n        list-type (if is-view \"View\" \"List\")]\n    (render-page\n     {:title (str list-type \" Details: \" list-name)\n      :sidebar (sidebar-view/render-sidebar-list-list list-id min-list-priority 0)}\n     (scroll-column\n      'todo-list-details-column\n      [:h3\n       [:a { :href (str \"/list/\" list-id ) } img-back-arrow]\n       \"List Details: \" list-name]\n      (form/form-to\n       {:class \"details\"}\n       [:post (shref \"/list/\" list-id \"/details\")]\n       [:div.config-panel\n        [:h1 (str list-type \" Name:\")]\n        (form/text-field { :maxlength \"32\" } \"list-name\" list-name)]\n       (if is-view\n         (render-todo-list-view-editor list-id)\n         (render-todo-list-permissions list-id error-message))\n       [:div.config-panel\n        [:div\n         [:input {:type \"submit\" :value \"Update List Details\"}]]])\n      (when (not is-view)\n        (render-sort-list-panel list-id))\n      (render-list-delete-panel list-id)))))\n\n\n", ";; Copyright (c) 2015-2022 Michael Schaeffer (dba East Coast Toolworks)\n;;\n;; Licensed as below.\n;;\n;; Licensed under the Apache License, Version 2.0 (the \"License\");\n;; you may not use this file except in compliance with the License.\n;; You may obtain a copy of the License at\n;;\n;;       http://www.apache.org/licenses/LICENSE-2.0\n;;\n;; The license is also includes at the root of the project in the file\n;; LICENSE.\n;;\n;; Unless required by applicable law or agreed to in writing, software\n;; distributed under the License is distributed on an \"AS IS\" BASIS,\n;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n;; See the License for the specific language governing permissions and\n;; limitations under the License.\n;;\n;; You must not remove this notice, or any other, from this software.\n\n(ns toto.view.page\n  (:use toto.core.util\n        toto.view.common\n        toto.view.components\n        toto.view.icons\n        toto.view.query\n        toto.view.components)\n  (:require [clojure.tools.logging :as log]\n            [hiccup.page :as page]\n            [hiccup.form :as form]\n            [toto.view.auth :as auth]))\n\n(defn session-controls []\n  (if-let [ username (auth/current-identity) ]\n    [:div.session-controls\n     [:a {:href \"/user/info\"} username]\n     \" - \"\n     [:a.warning { :href \"/logout\"} \"Log Out\"]]\n    [:div.session-controls\n     [:a {:href \"/login\"} \"Sign In\"]\n     [:a.emphasize {:href \"/user\"} \"Sign Up\"]]))\n\n\n(def without-modal {:modal :remove\n                    :edit-item-id :remove\n                    :snoozing-item-id :remove})\n\n(defn render-modal [ attrs & contents ]\n  (let [ escape-url (shref without-modal)]\n    [:div.dialog-background\n     [:dialog {:open \"true\" :data-escape-url escape-url}\n      [:h3 (:title attrs)]\n      [:div.cancel\n       [:a {:href escape-url} img-window-close]]\n      (if-let [ form-post-to (:form-post-to attrs)]\n        (form/form-to [:post form-post-to] contents)\n        contents)]]))\n\n(defn- render-support-modal [ ]\n  (let [ user-identity (auth/current-identity)]\n    (render-modal\n     {:title \"Contact Support\"\n      :form-post-to \"/support-message\"}\n     [:div.config-panel\n      [:h1 \"Contact Information\"]\n      (form/text-field {:maxlength \"128\"\n                        :placeholder \"Full Name\"\n                        :autocomplete \"off\"\n                        :autofocus \"on\"}\n                       \"full-name\")\n      (form/text-field (cond-> {:maxlength \"128\"\n                                :placeholder \"E-Mail Address\"\n                                :value user-identity}\n                         user-identity (assoc :readonly \"readonly\"))\n                       \"email-address\")]\n     (render-verify-question)\n     [:div.config-panel\n      [:h1 \"Message\"]\n      (form/text-area {:maxlength \"4096\"\n                       :rows \"12\"\n                       :cols \"64\"\n                       :autocomplete \"off\"}\n                      \"message-text\")]\n     (form/hidden-field \"current-uri\" (shref))\n     [:input {:type \"submit\" :value \"Send Message\"}])))\n\n(defn contact-support-button [ ]\n  [:a {:href (shref \"\" {:modal \"contact-support\" })} \"Contact Support\"])\n\n(defn- render-standard-header [ title ]\n  [:head\n   [:meta {:name \"viewport\"\n           ;; user-scalable=no fails to work on iOS n where n > 10\n           :content \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0\"}]\n   [:title (when *dev-mode* \"DEV - \") (:name (:app *config*)) (when title (str \" - \" title))]\n   [:link { :rel \"shortcut icon\" :href (resource \"favicon.ico\")}]\n   (page/include-css (resource \"toto.css\")\n                     (resource \"font-awesome.min.css\"))\n   [:script {:type \"module\" :src (resource \"toto.js\")}]\n   (page/include-js (resource \"DragDropTouch.js\"))])\n\n(defn- render-header [ page-title show-menu? ]\n  (let [ username (auth/current-identity)]\n    [:div.header\n     (when show-menu?\n       [:span.toggle-menu img-show-list \"&nbsp;\"])\n     [:span.app-name\n      [:a { :href \"/\" } (:name (:app *config*))] \" - \"]\n     page-title\n     (when *dev-mode*\n       [:span.pill.dev \"DEV\"])\n     (session-controls)]))\n\n(defn- render-sidebar-footer []\n  [:div.sidebar-footer\n   [:div.copyright\n    \"&#9400; 2015-2022 East Coast Toolworks\"]\n   (contact-support-button)])\n\n(defn- render-sidebar [ sidebar ]\n  [:div.sidebar\n   (scroll-column\n    \"sidebar-scroller\"\n    [:div.sidebar-control\n     [:span.close-menu img-close-list \"&nbsp;\"]\n     (session-controls)]\n    sidebar\n    (render-sidebar-footer))])\n\n(defn- render-page-modal [ attrs ]\n  (when-let [ modal-name (current-modal) ]\n    (let [ modal-defns (merge {\"contact-support\" render-support-modal }\n                              (or (:modals attrs) {})) ]\n      (if-let [modal (modal-defns modal-name)]\n        (modal)\n        (log/error \"Invalid modal for this page:\" modal-name\n                   \"(known:\" (keys modal-defns) \")\")))))\n\n(defn- render-page-body [ attrs contents ]\n  (let [{ :keys [ title page-data-class sidebar ] } attrs ]\n    [:body (if page-data-class\n             {:data-class page-data-class})\n     (render-header title (not (nil? sidebar)))\n     (if sidebar\n       (render-sidebar sidebar))\n     [:div.contents {:class (class-set { \"with-sidebar\" sidebar })}\n      (render-page-modal attrs)\n      contents]]))\n\n(defn render-page [ attrs & contents]\n  (page/html5\n   [:html\n    (render-standard-header (:title attrs))\n    (render-page-body attrs contents)]))\n"], "fixing_code": [";; Copyright (c) 2015-2022 Michael Schaeffer (dba East Coast Toolworks)\n;;\n;; Licensed as below.\n;;\n;; Licensed under the Apache License, Version 2.0 (the \"License\");\n;; you may not use this file except in compliance with the License.\n;; You may obtain a copy of the License at\n;;\n;;       http://www.apache.org/licenses/LICENSE-2.0\n;;\n;; The license is also includes at the root of the project in the file\n;; LICENSE.\n;;\n;; Unless required by applicable law or agreed to in writing, software\n;; distributed under the License is distributed on an \"AS IS\" BASIS,\n;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n;; See the License for the specific language governing permissions and\n;; limitations under the License.\n;;\n;; You must not remove this notice, or any other, from this software.\n\n\n(ns toto.todo.todo-list\n  (:use toto.core.util\n        toto.view.common\n        toto.view.icons\n        toto.view.components\n        toto.view.query\n        toto.view.page)\n  (:require [clojure.tools.logging :as log]\n            [hiccup.form :as hiccup-form]\n            [hiccup.util :as hiccup-util]\n            [toto.data.data :as data]\n            [toto.view.auth :as auth]\n            [toto.view.request-date :as request-date]\n            [toto.todo.sidebar-view :as sidebar-view]))\n\n(def html-breakpoint \"&#8203;\")\n\n(def pill-date-format (java.text.SimpleDateFormat. \"yyyy-MM-dd\"))\n\n(defn- format-date [ date ]\n  (.format pill-date-format date))\n\n(defn- ensure-string-breakpoints [ s n ]\n  (clojure.string/join html-breakpoint (map hiccup-util/escape-html (partition-string s n))))\n\n(defn- ensure-string-breaks [ string at ]\n  (clojure.string/replace string at (str at html-breakpoint)))\n\n(defn shorten-url-text [ url-text target-length ]\n  (let [url (java.net.URL. url-text)\n        base (str (.getProtocol url)\n                  \":\"\n                  (if-let [authority (.getAuthority url)]\n                    (str \"//\" authority)))]\n    (-> (hiccup-util/escape-html\n         (str base\n              (string-leftmost (.getPath url)\n                               (max 0 (- (- target-length 3) (.length base)))\n                               \"...\")))\n        (ensure-string-breaks \"/\")\n        (ensure-string-breaks \".\"))))\n\n(defn- complete-item-button [ item-info ]\n  (post-button {:desc \"Complete Item\"\n                :target (str \"/item/\" (item-info :item_id) \"/complete\")}\n               img-check))\n\n(defn- restore-item-button [ item-info ]\n  (post-button {:desc \"Restore Item\"\n                :target (str \"/item/\" (item-info :item_id) \"/restore\")}\n               img-restore))\n\n(defn- delete-item-button [ item-info list-id ]\n  (post-button {:desc \"Delete Item\"\n                :target (str \"/item/\" (item-info :item_id) \"/delete\")}\n               img-trash))\n\n(defn- snooze-item-button [ item-info body ]\n  [:a {:href (shref \"\" {:modal \"snoozing\" :snoozing-item-id (item-info :item_id)})} body])\n\n(defn- item-priority-button [ item-id new-priority image-spec writable? ]\n  (if writable?\n    (post-button {:target (str \"/item/\" item-id \"/priority\")\n                  :args {:new-priority new-priority}\n                  :desc \"Set Item Priority\"}\n                 image-spec)\n    image-spec))\n\n(defn- render-item-priority-control [ item-id priority writable? ]\n  (if (request-date/valentines-day?)\n    (if (<= priority 0)\n      (item-priority-button item-id 1 img-heart-pink writable?)\n      (item-priority-button item-id 0 img-heart-red writable?))\n    (if (<= priority 0)\n      (item-priority-button item-id 1 img-star-gray writable?)\n      (item-priority-button item-id 0 img-star-yellow writable?))))\n\n(defn- render-new-item-form [ list-id editing-item? ]\n  (let [ sublists (data/get-view-sublists (auth/current-user-id) list-id)]\n    (hiccup-form/form-to\n     {:class \"new-item-form\"}\n     [:post (shref \"/list/\" list-id)]\n     (if (= (count sublists) 0)\n       (hiccup-form/hidden-field \"item-list-id\" list-id)\n       [:select {:id \"item-list-id\" :name \"item-list-id\"}\n        (hiccup-form/select-options (map (fn [ sublist ]\n                                           [(hiccup-util/escape-html (:desc sublist))\n                                            (:sublist_id sublist)])\n                                  sublists))])\n     (hiccup-form/text-field (cond-> {:maxlength \"1024\"\n                               :placeholder \"New Item Description\"\n                               :autocomplete \"off\"\n                               :onkeydown \"window._toto.onNewItemInputKeydown(event)\"}\n                        (not editing-item?) (assoc \"autofocus\" \"on\"))\n                      \"item-description\")\n     (hiccup-form/hidden-field \"item-priority\" \"0\")\n     [:button.high-priority-submit {:type \"button\"\n                                    :onclick \"window._toto.submitHighPriority()\"}\n      img-star-yellow])))\n\n(def url-regex #\"(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]\")\n\n(defn- render-url [ [ url ] ]\n  [:a.item-link { :href url :target \"_blank\" } (shorten-url-text url 60)])\n\n(defn- render-item-text-segment [ item-text-segment ]\n  (clojure.string/join \" \" (map #(ensure-string-breakpoints % 15)\n                                (clojure.string/split item-text-segment #\"\\s\"))))\n\n(defn- render-item-text [ item-text ]\n  (interleave (conj (vec (map #(str \" \" (render-item-text-segment (.trim %)) \" \") (clojure.string/split item-text url-regex))) \"\")\n              (conj (vec (map render-url (re-seq url-regex item-text))) \"\")))\n\n(defn- render-age [ days ]\n  (cond (> days 720) (str (quot days 360) \"y\")\n        (> days 60) (str (quot days 30) \"m\")\n        :else (str days \"d\")))\n\n(defn item-drag-handle [ class item-info ]\n  [:div.item-drag-handle {:itemid (:item_id item-info)\n                          :class class}\n   img-drag-handle])\n\n(defn drop-target [ item-ordinal ]\n  [:div.order-drop-target {:ordinal item-ordinal :priority \"0\"} \"&nbsp;\"])\n\n(defn- render-todo-item [ view-list-id list-id item-info writable? editing? ]\n  (let [{item-id :item_id\n         is-complete? :is_complete\n         is-deleted? :is_deleted\n         priority :priority\n         snoozed-until :snoozed_until\n         currently-snoozed :currently_snoozed\n         created-by-id :created_by_id\n         created-by-email :created_by_email\n         created-by-name :created_by_name}\n        item-info]\n    [:div.item-row.order-drop-target\n     (cond-> {:id (str \"item_row_\" item-id)\n              :itemid item-id\n              :listid list-id\n              :ordinal (:item_ordinal item-info)\n              :priority priority\n              :class (class-set {\"editing\" editing?\n                                 \"display\" (not editing?)\n                                 \"high-priority\" (> priority 0)\n                                 \"snoozed\" currently-snoozed})}\n       writable? (assoc :edit-href (shref \"/list/\" view-list-id\n                                          { :edit-item-id item-id })))\n     (when writable?\n       (list\n        (item-drag-handle \"left\" item-info)\n        [:div.item-control.complete {:id (str \"item_control_\" item-id)}\n         (if editing?\n           (delete-item-button item-info list-id)\n           (if (or is-complete? is-deleted?)\n             (restore-item-button item-info)\n             (complete-item-button item-info)))]))\n     [:div.item-control.priority.left\n      (render-item-priority-control item-id priority writable?)]\n     [:div.item-description {:itemid item-id}\n      (if editing?\n         [:input (cond-> {:value (item-info :desc)\n                          :type \"text\"\n                          :name \"description\"\n                          :item-id item-id\n                          :view-href (shref \"/list/\" view-list-id without-modal)\n                          :onkeydown \"window._toto.onItemEditKeydown(event)\"}\n                   editing? (assoc \"autofocus\" \"on\"))]\n        (let [desc (item-info :desc)]\n          [:div {:id (str \"item_\" item-id)\n                 :class (class-set {\"deleted-item\" is-deleted?\n                                    \"completed-item\" is-complete?})}\n           (render-item-text desc)\n           (snooze-item-button item-info [:span.pill\n                                          (render-age (:age_in_days item-info))\n                                          (when currently-snoozed\n                                            (list\n                                             \", snoozed: \" (format-date snoozed-until)))])\n           (when (not (= created-by-id (auth/current-user-id)))\n             [:span.pill { :title created-by-email }\n              (hiccup-util/escape-html\n               created-by-name)])]))]\n     [:div.item-control.priority.right\n      (render-item-priority-control item-id priority writable?)]\n     (item-drag-handle \"right\" item-info)]))\n\n(defn- render-query-select [ id current-value ]\n  [:select { :id id :name id :onchange \"this.form.submit()\"}\n   (hiccup-form/select-options [[ \"-\" \"-\"]\n                         [\"1d\" \"1\"]\n                         [\"7d\" \"7\"]\n                         [\"30d\" \"30\"]\n                         [\"90d\" \"90\"] ]\n                        (if (nil? current-value)\n                          \"-\"\n                          (str current-value)))])\n\n(defn- render-todo-list-query-settings [ list-id completed-within-days snoozed-for-days ]\n  [:div.query-settings\n   (hiccup-form/form-to { :class \"embedded \"} [:get (shref \"/list/\" list-id)]\n                 [:div.control-segment\n                  [:a {:href (shref \"/list/\" list-id {:view \"completions\"})}\n                   \"[recently completed]\"]]\n                 [:div.control-segment\n                  [:a {:href (shref \"/list/\" list-id \"/details\")}\n                   \"[list details]\"]]\n                 [:div.control-segment\n                  [:a {:href (shref (str list-id) {:view :remove})}\n                   \" [default view]\"]]\n                 [:div.control-segment\n                  [:label {:for \"cwithin\"}\n                   \"Completed within: \"]\n                  (render-query-select \"cwithin\" completed-within-days)]\n                 [:div.control-segment\n                  [:a { :href (shref \"/list/\" list-id {:modal \"update-from\"} ) } \"[copy from]\"]])])\n\n(defn- render-todo-list-completion-query-settings [ list-id completed-within-days ]\n  [:div.query-settings\n   (hiccup-form/form-to { :class \"embedded \"} [:get (shref \"/list/\" list-id \"/completions\")]\n                 [:div.control-segment\n                  [:a {:href (shref \"/list/\" list-id \"/details\")}\n                   \"[list details]\"]]\n                 [:div.control-segment\n                  [:a {:href (shref (str list-id) {:view :remove})}\n                   \" [default view]\"]]\n                 [:div.control-segment\n                  [:label {:for \"clwithin\"}\n                   \"Completed within: \"]\n                  (render-query-select \"clwithin\" completed-within-days)])])\n\n(defn- render-empty-list []\n  [:div.empty-list\n   [:h1\n    \"Nothing to do right now!\"]\n   [:p\n    \"To get started, you can add new items in the box above.\"]])\n\n(defn- render-snoozed-item-warning [ n-snoozed-items ]\n  [:div.snoozed-item-warning\n   n-snoozed-items \" more item\" (if (= n-snoozed-items 1) \"\" \"s\" ) \" snoozed for later. \"\n   \"Click \" [:a {:href (shref \"\" {:sfor \"99999\"})} \"here\"] \" to show.\"])\n\n(defn- todo-list-details [ view-list-id list-id edit-item-id writable? completed-within-days snoozed-for-days ]\n  (let [pending-items (data/get-pending-items list-id completed-within-days snoozed-for-days)\n        n-snoozed-items (count (filter :visibly_snoozed pending-items))\n        display-items (remove :visibly_snoozed pending-items)]\n\n    {:is-empty? (= (count display-items) 0)\n     :n-snoozed-items n-snoozed-items\n\n     :high-priority\n     (map #(render-todo-item view-list-id list-id % writable? (= edit-item-id (:item_id %)))\n          (filter #(> (:priority %) 0) display-items))\n\n     :normal-priority\n     (map #(render-todo-item view-list-id list-id % writable? (= edit-item-id (:item_id %)))\n          (filter #(<= (:priority %) 0) display-items))}))\n\n(defn- render-single-todo-list [ view-list-id list-id edit-item-id writable? completed-within-days snoozed-for-days ]\n  (let [details (todo-list-details view-list-id list-id edit-item-id writable? completed-within-days snoozed-for-days)]\n    (list\n     [:div.toplevel-list\n      (if (:is-empty? details)\n        (render-empty-list)\n        (concat\n         (:high-priority details)\n         (:normal-priority details)))]\n     (when (and writable? (> (:n-snoozed-items details) 0))\n       (render-snoozed-item-warning (:n-snoozed-items details))))))\n\n(defn- render-empty-view [ list-id ]\n  [:div.empty-list\n   [:h1\n    \"Empty list view!\"]\n   [:p\n    \"This is a todo list view, where it is possible to see the contents of\"\n    \" more than one list on a single page. To make this work, you need to \"\n    \" add a few lists to the view, which can be done \"\n    [:a {:href (shref \"/list/\" list-id \"/details\")} \"here\"] \".\"]])\n\n(defn- render-todo-list-view-section [ sublist-details key ]\n  (let [ items (key sublist-details ) ]\n    (when (> (count items) 0)\n      [:div.list-view-section\n       [:h2\n        [:a\n         {:href (shref \"/list/\" (:sublist_id sublist-details))}\n         (hiccup-util/escape-html\n          (:desc sublist-details))]]\n       items])))\n\n(defn- render-todo-list-view [ list-id edit-item-id writable? completed-within-days snoozed-for-days ]\n  (let [ sublists (map #(merge % (todo-list-details list-id (:sublist_id %) edit-item-id writable? completed-within-days snoozed-for-days))\n                       (data/get-view-sublists (auth/current-user-id) list-id))]\n    [:div.toplevel-list\n     (cond\n       (= 0 (count sublists))\n       (render-empty-view list-id)\n\n       (every? true? (map :is-empty? sublists))\n       (render-empty-list)\n\n       :else\n       (list\n        (map #(render-todo-list-view-section % :high-priority) sublists)\n        (map #(render-todo-list-view-section % :normal-priority) sublists)\n\n        (let [ total-snoozed-items (apply + (map :n-snoozed-items sublists))]\n          (when (and writable? (> total-snoozed-items 0))\n            (render-snoozed-item-warning total-snoozed-items)))))]))\n\n(defn- message-recepient? []\n  (or (= 16 (auth/current-user-id))\n      (= 17 (auth/current-user-id))))\n\n(defn- render-valentines-day-banner []\n  (when (message-recepient?)\n    [:div.valentines-day-banner\n     img-heart-red\n     (if (request-date/valentines-day?)\n       \" Happy Valentines Day!!! I Love You! \"\n       \" I Love You, Teresa! \")\n     img-heart-red]))\n\n(defn- render-todo-list [ list-id edit-item-id writable? completed-within-days snoozed-for-days ]\n  (scroll-column\n   \"todo-list-scroller\"\n   (when writable?\n     (render-new-item-form list-id (boolean edit-item-id)))\n   (list\n    (render-valentines-day-banner)\n    (if (:is_view (data/get-todo-list-by-id list-id))\n      (render-todo-list-view list-id edit-item-id writable? completed-within-days snoozed-for-days )\n      (render-single-todo-list list-id list-id edit-item-id writable? completed-within-days snoozed-for-days))\n    (when writable?\n      (render-todo-list-query-settings list-id completed-within-days snoozed-for-days)))))\n\n(defn- render-empty-completion-list [ list-id ]\n  (let [n-items (data/get-item-count list-id)]\n    [:div.empty-list\n     [:h1\n      \"Nothing here right now!\"]\n     [:p\n      (if (= n-items 0)\n        \"As you add items and complete them, they will appear here.\"\n        \"Try expanding the query to see earlier completed items.\")]]))\n\n(defn- completed-items [ list-id completed-within-days ]\n  (let [ list-info (data/get-todo-list-by-id list-id) ]\n    (sort-by :updated_on\n             (mapcat (fn [ sublist-info ]\n                       (map #(assoc % :sublist_desc (:desc sublist-info))\n                            (data/get-completed-items (:sublist_id sublist-info) completed-within-days)))\n                     (if (:is_view list-info)\n                       (data/get-view-sublists (auth/current-user-id) list-id)\n                       [ { :sublist_id list-id :desc (:desc list-info)}])))))\n\n(defn- render-completed-item-list [ list-id completed-within-days ]\n  (let [ completed-items (completed-items list-id completed-within-days)]\n    (if (= (count completed-items) 0)\n      (render-empty-completion-list list-id)\n      (map\n       (fn [ todo-item ]\n         [:div.item-row {:class (class-set\n                                 {\"high-priority\" (> (:priority todo-item) 0)})}\n          [:div.item-description\n           [:div\n            (render-item-text (:desc todo-item))\n            [:span.pill (:sublist_desc todo-item)]\n            (when (> (:priority todo-item) 0)\n              (if (request-date/valentines-day?)\n                img-heart-red\n                img-star-yellow))]]])\n       completed-items))))\n\n(defn render-todo-list-completions [ list-id params ]\n  (let [min-list-priority (or (parsable-integer? (:min-list-priority params)) 0)\n        completed-within-days (or (parsable-integer? (:clwithin params)) 1)]\n    (render-page {:title ((data/get-todo-list-by-id list-id) :desc)\n                  :page-data-class \"todo-list-completions\"\n                  :sidebar (sidebar-view/render-sidebar-list-list list-id min-list-priority 0)}\n                 (scroll-column\n                  \"todo-list-completion-scroller\"\n                  [:h3\n                   [:a { :href (shref (str \"/list/\" list-id) {:view :remove}) } img-back-arrow]\n                   \"Items Completed Since: \" (format-date (add-days (current-time) (- completed-within-days)))]\n                  [:div.toplevel-list\n                   (render-completed-item-list list-id completed-within-days)\n                   (render-todo-list-completion-query-settings list-id completed-within-days)]))))\n\n(defn- render-snooze-modal [ params list-id ]\n  (let [ snoozing-item-id (parsable-integer? (:snoozing-item-id params))]\n    (defn render-snooze-choice [ label snooze-days shortcut-key ]\n      (post-button {:desc (str label \" (\" shortcut-key \")\")\n                    :target (str \"/item/\" snoozing-item-id \"/snooze\")\n                    :args {:snooze-days snooze-days}\n                    :shortcut-key shortcut-key\n                    :next-url (shref \"/list/\" list-id without-modal)}\n                   (str label \" (\" shortcut-key \")\")))\n    (render-modal\n     {:title \"Snooze item until later\"}\n     [:div.snooze-choices\n      (map (fn [ [ label snooze-days shortcut-key] ]\n               (render-snooze-choice label snooze-days shortcut-key))\n           [[\"Tomorrow\" 1 \"1\"]\n            [\"In Three Days\" 3 \"2\"]\n            [\"Next Week\"  7 \"3\"]\n            [\"Next Month\" 30 \"4\"]])]\n     (when (:currently_snoozed (data/get-item-by-id snoozing-item-id))\n       [:div.snooze-hoices\n        [:hr]\n        (render-snooze-choice \"Unsnooze\" 0 \"0\")]))))\n\n(defn- render-list-select [ id excluded-list-id ]\n  [:select { :id id :name id }\n   (hiccup-form/select-options\n    (map (fn [ list-info ]\n           [(hiccup-util/escape-html (:desc list-info))\n            (:todo_list_id list-info)])\n         (remove\n          #(= excluded-list-id (:todo_list_id %))\n          (data/get-todo-lists-by-user (auth/current-user-id)))))])\n\n(defn render-update-from-modal [ params list-id ]\n  (render-modal\n   {:title \"Update From\"\n    :form-post-to (shref \"/list/\" list-id \"/copy-from\" without-modal)}\n   \"Source:\"\n   (render-list-select \"copy-from-list-id\" (parsable-integer? list-id))\n   [:div.modal-controls\n    [:input {:type \"submit\" :value \"Copy List\"}]]))\n\n(defn- render-todo-list-item-page [ selected-list-id params ]\n  (let [edit-item-id (parsable-integer? (:edit-item-id params))\n        min-list-priority (or (parsable-integer? (:min-list-priority params)) 0)\n        completed-within-days (or (parsable-integer? (:cwithin params)) 0)\n        snoozed-for-days (or (parsable-integer? (:sfor params)) 0)]\n    (render-page {:title ((data/get-todo-list-by-id selected-list-id) :desc)\n                  :page-data-class \"todo-list\"\n                  :sidebar (sidebar-view/render-sidebar-list-list selected-list-id min-list-priority snoozed-for-days)\n                  :modals {\"snoozing\" #(render-snooze-modal params selected-list-id)\n                           \"update-from\" #(render-update-from-modal params selected-list-id)}}\n                 (render-todo-list selected-list-id edit-item-id true completed-within-days snoozed-for-days))))\n\n(defn render-todo-list-page [ selected-list-id params ]\n  (if (= (:view params) \"completions\")\n    (render-todo-list-completions selected-list-id params)\n    (render-todo-list-item-page selected-list-id params)))\n\n(defn render-todo-list-public-page [ params ]\n  (let [ { list-id :list-id } params ]\n    (when (and (data/list-public? list-id)\n               (not (data/list-owned-by-user-id? list-id (auth/current-user-id))))\n      (render-page {:title ((data/get-todo-list-by-id list-id) :desc)\n                    :page-data-class \"todo-list\"}\n                   (render-todo-list list-id nil false 0 0)))))\n", ";; Copyright (c) 2015-2022 Michael Schaeffer (dba East Coast Toolworks)\n;;\n;; Licensed as below.\n;;\n;; Licensed under the Apache License, Version 2.0 (the \"License\");\n;; you may not use this file except in compliance with the License.\n;; You may obtain a copy of the License at\n;;\n;;       http://www.apache.org/licenses/LICENSE-2.0\n;;\n;; The license is also includes at the root of the project in the file\n;; LICENSE.\n;;\n;; Unless required by applicable law or agreed to in writing, software\n;; distributed under the License is distributed on an \"AS IS\" BASIS,\n;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n;; See the License for the specific language governing permissions and\n;; limitations under the License.\n;;\n;; You must not remove this notice, or any other, from this\n\n(ns toto.todo.todo-list-manager\n  (:use toto.core.util\n        compojure.core\n        toto.view.common\n        toto.view.icons\n        toto.view.components\n        toto.view.query\n        toto.view.page)\n  (:require [clojure.tools.logging :as log]\n            [hiccup.form :as hiccup-form]\n            [hiccup.util :as hiccup-util]\n            [toto.data.data :as data]\n            [toto.view.auth :as auth]\n            [toto.todo.sidebar-view :as sidebar-view]))\n\n(defn- list-priority-button [ list-id new-priority image-spec ]\n  (post-button {:target (shref \"/list/\" list-id \"/priority\")\n                :args {:new-priority new-priority}\n                :desc \"Set List Priority\"}\n               image-spec))\n\n(defn render-list-star-control [ list-id priority ]\n  (if (<= priority 0)\n    (list-priority-button list-id 1 img-star-gray)\n    (list-priority-button list-id 0 img-star-yellow)))\n\n(defn render-list-arrow-control [ list-id priority ]\n  (if (>= priority 0)\n    (list-priority-button list-id -1 img-arrow-gray)\n    (list-priority-button list-id 0 img-arrow-blue)))\n\n(defn render-new-list-form [ ]\n  (hiccup-form/form-to\n   {:class \"new-item-form\"}\n   [:post (shref \"/list\")]\n   (hiccup-form/text-field {:maxlength \"32\"\n                     :placeholder \"New List Name\"\n                     :autofocus \"autofocus\"}\n                    \"list-description\")\n   [:div\n    (hiccup-form/check-box \"is-view\" false \"Y\")\n    [:label {:for \"is-view\"} \"View\"]]))\n\n(defn render-list-list-page []\n  (render-page\n   {:title \"Manage Todo Lists\"}\n   (scroll-column\n    \"todo-list-list-scroller\"\n    (render-new-list-form)\n    [:div.toplevel-list.list-list\n     (map (fn [ list ]\n            (let [list-id (:todo_list_id list)\n                  priority (:priority list)]\n              [:div.item-row {:class (class-set {\"high-priority\" (> priority 0)\n                                                 \"low-priority\" (< priority 0)})}\n               [:div.item-control\n                [:a {:href (shref \"/list/\" list-id \"/details\")} img-edit-list]]\n               [:div.item-control\n                (render-list-star-control list-id priority)]\n               [:div.item-control\n                (render-list-arrow-control list-id priority)]\n               [:div.item-description\n                [:a {:href (shref \"/list/\" list-id)}\n                 (hiccup.util/escape-html (:desc list))\n                 [:span.pill (:item_count list)]]\n                (sidebar-view/render-list-visibility-flag list)]]))\n          (data/get-todo-lists-by-user (auth/current-user-id)))])))\n\n(defn- render-sort-list-panel [ list-id ]\n  [:div.config-panel\n   [:h1 \"Sort List\"]\n   (hiccup-form/form-to {} [:post (shref \"/list/\" list-id \"/sort\")]\n    [:input {:type \"submit\" :value \"Sort By\"}]\n    [:select {:id \"sort-by\" :name \"sort-by\"}\n     (hiccup-form/select-options [[\"Description\" \"desc\"]\n                           [\"Created Date\" \"created-on\"]\n                           [\"Updated Date\" \"updated-on\"]\n                           [\"Snoozed Until\" \"snoozed-until\"]])])])\n\n(defn- render-list-delete-panel [ list-id ]\n  [:div.config-panel\n   [:h1 \"Delete List\"]\n   (cond\n     (<= (data/get-user-list-count (auth/current-user-id)) 1)\n     [:span.warning \"Your last list cannot be deleted.\"]\n\n     (not (data/empty-list? list-id))\n     [:span.warning \"To delete this list, remove all items first.\"]\n\n     :else\n     (list\n      [:div\n       [:input.dangerous {:type \"submit\" :value \"Delete List\" :formaction (shref \"/list/\" list-id \"/delete\")}]\n       [:span.warning \"Warning, this cannot be undone.\"]]))])\n\n(defn- render-todo-list-permissions [ list-id error-message ]\n  (let [list-details (data/get-todo-list-by-id list-id)]\n    (list\n     [:div.config-panel\n      [:h1  \"List Permissions:\"]\n      [:div\n       (hiccup-form/check-box \"is-public\" (:is_public list-details))\n       [:label {:for \"is-public\"} \"List publically visible?\"]]]\n     [:div.config-panel\n      [:h1  \"List Owners:\"]\n      (let [list-owners (data/get-todo-list-owners-by-list-id list-id) ]\n        [:div.list-owners\n         (map (fn [ { user-id :user_id user-email-addr :email_addr } ]\n                (let [ user-parameter-name (str \"user_\" user-id)]\n                  [:div.list-owner\n                   (if (= (auth/current-user-id) user-id)\n                     [:div.self-owner\n                      \"&nbsp;\"\n                      (hiccup-form/hidden-field user-parameter-name \"on\")]\n                     (hiccup-form/check-box user-parameter-name (in? list-owners user-id)))\n                   [:label {:for user-parameter-name}\n                    user-email-addr\n                    (when (= (auth/current-user-id) user-id)\n                      [:span.pill \"you\"])]]))\n              (data/get-friendly-users-by-id (auth/current-user-id)))\n         [:div.list-owner\n          [:div.self-owner \"&nbsp;\"]\n          [:input {:id \"share-with-email\"\n                   :name \"share-with-email\"\n                   :type \"text\"\n                   :placeholder \"Share Mail Address\"}]]\n         (when error-message\n           [:div.error-message\n            error-message])])])))\n\n(defn- render-todo-list-view-editor [ view-id ]\n  (let [user-id (auth/current-user-id)\n        todo-lists (data/get-todo-lists-by-user user-id)\n        view-sublist-ids (map :sublist_id (data/get-view-sublists user-id view-id))]\n    [:div.config-panel\n     [:h1 \"Component Lists\"]\n     [:div.component-lists\n      (map (fn [ todo-list ]\n             (let [ list-id (:todo_list_id todo-list) ]\n               [:div\n                (hiccup-form/check-box (str \"list_\" list-id)\n                                       (in? view-sublist-ids list-id))\n                (hiccup-util/escape-html\n                 (:desc todo-list))]))\n           (remove #(:is_view %) todo-lists))]]))\n\n(defn render-todo-list-details-page [ list-id min-list-priority & { :keys [ error-message ]}]\n  (let [list-details (data/get-todo-list-by-id list-id)\n        list-name (:desc list-details)\n        is-view (:is_view list-details)\n        list-type (if is-view \"View\" \"List\")]\n    (render-page\n     {:title (str list-type \" Details: \" (hiccup-util/escape-html list-name))\n      :sidebar (sidebar-view/render-sidebar-list-list list-id min-list-priority 0)}\n     (scroll-column\n      'todo-list-details-column\n      [:h3\n       [:a { :href (str \"/list/\" list-id ) } img-back-arrow]\n       \"List Details: \" (hiccup-util/escape-html list-name)]\n      (hiccup-form/form-to\n       {:class \"details\"}\n       [:post (shref \"/list/\" list-id \"/details\")]\n       [:div.config-panel\n        [:h1 (str list-type \" Name:\")]\n        (hiccup-form/text-field { :maxlength \"32\" } \"list-name\" list-name)]\n       (if is-view\n         (render-todo-list-view-editor list-id)\n         (render-todo-list-permissions list-id error-message))\n       [:div.config-panel\n        [:div\n         [:input {:type \"submit\" :value \"Update List Details\"}]]])\n      (when (not is-view)\n        (render-sort-list-panel list-id))\n      (render-list-delete-panel list-id)))))\n\n\n", ";; Copyright (c) 2015-2022 Michael Schaeffer (dba East Coast Toolworks)\n;;\n;; Licensed as below.\n;;\n;; Licensed under the Apache License, Version 2.0 (the \"License\");\n;; you may not use this file except in compliance with the License.\n;; You may obtain a copy of the License at\n;;\n;;       http://www.apache.org/licenses/LICENSE-2.0\n;;\n;; The license is also includes at the root of the project in the file\n;; LICENSE.\n;;\n;; Unless required by applicable law or agreed to in writing, software\n;; distributed under the License is distributed on an \"AS IS\" BASIS,\n;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n;; See the License for the specific language governing permissions and\n;; limitations under the License.\n;;\n;; You must not remove this notice, or any other, from this software.\n\n(ns toto.view.page\n  (:use toto.core.util\n        toto.view.common\n        toto.view.components\n        toto.view.icons\n        toto.view.query\n        toto.view.components)\n  (:require [clojure.tools.logging :as log]\n            [hiccup.page :as hiccup-page]\n            [hiccup.form :as hiccup-form]\n            [hiccup.util :as hiccup-util]\n            [toto.view.auth :as auth]))\n\n(defn session-controls []\n  (if-let [ username (auth/current-identity) ]\n    [:div.session-controls\n     [:a {:href \"/user/info\"} username]\n     \" - \"\n     [:a.warning { :href \"/logout\"} \"Log Out\"]]\n    [:div.session-controls\n     [:a {:href \"/login\"} \"Sign In\"]\n     [:a.emphasize {:href \"/user\"} \"Sign Up\"]]))\n\n\n(def without-modal {:modal :remove\n                    :edit-item-id :remove\n                    :snoozing-item-id :remove})\n\n(defn render-modal [ attrs & contents ]\n  (let [ escape-url (shref without-modal)]\n    [:div.dialog-background\n     [:dialog {:open \"true\" :data-escape-url escape-url}\n      [:h3 (:title attrs)]\n      [:div.cancel\n       [:a {:href escape-url} img-window-close]]\n      (if-let [ form-post-to (:form-post-to attrs)]\n        (hiccup-form/form-to [:post form-post-to] contents)\n        contents)]]))\n\n(defn- render-support-modal [ ]\n  (let [ user-identity (auth/current-identity)]\n    (render-modal\n     {:title \"Contact Support\"\n      :form-post-to \"/support-message\"}\n     [:div.config-panel\n      [:h1 \"Contact Information\"]\n      (hiccup-form/text-field {:maxlength \"128\"\n                        :placeholder \"Full Name\"\n                        :autocomplete \"off\"\n                        :autofocus \"on\"}\n                       \"full-name\")\n      (hiccup-form/text-field (cond-> {:maxlength \"128\"\n                                :placeholder \"E-Mail Address\"\n                                :value user-identity}\n                         user-identity (assoc :readonly \"readonly\"))\n                       \"email-address\")]\n     (render-verify-question)\n     [:div.config-panel\n      [:h1 \"Message\"]\n      (hiccup-form/text-area {:maxlength \"4096\"\n                       :rows \"12\"\n                       :cols \"64\"\n                       :autocomplete \"off\"}\n                      \"message-text\")]\n     (hiccup-form/hidden-field \"current-uri\" (shref))\n     [:input {:type \"submit\" :value \"Send Message\"}])))\n\n(defn contact-support-button [ ]\n  [:a {:href (shref \"\" {:modal \"contact-support\" })} \"Contact Support\"])\n\n(defn- render-standard-header [ title ]\n  [:head\n   [:meta {:name \"viewport\"\n           ;; user-scalable=no fails to work on iOS n where n > 10\n           :content \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0\"}]\n   [:title (when *dev-mode* \"DEV - \") (:name (:app *config*)) (when title (str \" - \" title))]\n   [:link { :rel \"shortcut icon\" :href (resource \"favicon.ico\")}]\n   (hiccup-page/include-css (resource \"toto.css\")\n                     (resource \"font-awesome.min.css\"))\n   [:script {:type \"module\" :src (resource \"toto.js\")}]\n   (hiccup-page/include-js (resource \"DragDropTouch.js\"))])\n\n(defn- render-header [ page-title show-menu? ]\n  (let [ username (auth/current-identity)]\n    [:div.header\n     (when show-menu?\n       [:span.toggle-menu img-show-list \"&nbsp;\"])\n     [:span.app-name\n      [:a { :href \"/\" } (:name (:app *config*))] \" - \"]\n     (hiccup-util/escape-html page-title)\n     (when *dev-mode*\n       [:span.pill.dev \"DEV\"])\n     (session-controls)]))\n\n(defn- render-sidebar-footer []\n  [:div.sidebar-footer\n   [:div.copyright\n    \"&#9400; 2015-2022 East Coast Toolworks\"]\n   (contact-support-button)])\n\n(defn- render-sidebar [ sidebar ]\n  [:div.sidebar\n   (scroll-column\n    \"sidebar-scroller\"\n    [:div.sidebar-control\n     [:span.close-menu img-close-list \"&nbsp;\"]\n     (session-controls)]\n    sidebar\n    (render-sidebar-footer))])\n\n(defn- render-page-modal [ attrs ]\n  (when-let [ modal-name (current-modal) ]\n    (let [ modal-defns (merge {\"contact-support\" render-support-modal }\n                              (or (:modals attrs) {})) ]\n      (if-let [modal (modal-defns modal-name)]\n        (modal)\n        (log/error \"Invalid modal for this page:\" modal-name\n                   \"(known:\" (keys modal-defns) \")\")))))\n\n(defn- render-page-body [ attrs contents ]\n  (let [{ :keys [ title page-data-class sidebar ] } attrs ]\n    [:body (if page-data-class\n             {:data-class page-data-class})\n     (render-header title (not (nil? sidebar)))\n     (if sidebar\n       (render-sidebar sidebar))\n     [:div.contents {:class (class-set { \"with-sidebar\" sidebar })}\n      (render-page-modal attrs)\n      contents]]))\n\n(defn render-page [ attrs & contents]\n  (hiccup-page/html5\n   [:html\n    (render-standard-header (:title attrs))\n    (render-page-body attrs contents)]))\n"], "filenames": ["src/toto/todo/todo_list.clj", "src/toto/todo/todo_list_manager.clj", "src/toto/view/page.clj"], "buggy_code_start_loc": [31, 31, 30], "buggy_code_end_loc": [441, 185, 153], "fixing_code_start_loc": [31, 31, 30], "fixing_code_end_loc": [446, 187, 154], "type": "CWE-79", "message": "A vulnerability was found in mschaef toto up to 1.4.20. It has been classified as problematic. This affects an unknown part of the component Todo List Handler. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 1.4.21 is able to address this issue. The name of the patch is fdc825ac5249f40683377e8a526a06cdc6870125. It is recommended to upgrade the affected component. The identifier VDB-216177 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2022-4590", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-17T19:15:09.007", "lastModified": "2022-12-22T18:14:32.403", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in mschaef toto up to 1.4.20. It has been classified as problematic. This affects an unknown part of the component Todo List Handler. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 1.4.21 is able to address this issue. The name of the patch is fdc825ac5249f40683377e8a526a06cdc6870125. It is recommended to upgrade the affected component. The identifier VDB-216177 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-707"}, {"lang": "en", "value": "CWE-74"}, {"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:toto_project:toto:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.4.21", "matchCriteriaId": "B5012806-6903-4362-84AB-34C4B39C3EB4"}]}]}], "references": [{"url": "https://github.com/mschaef/toto/commit/fdc825ac5249f40683377e8a526a06cdc6870125", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/mschaef/toto/releases/tag/1.4.21", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216177", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/mschaef/toto/commit/fdc825ac5249f40683377e8a526a06cdc6870125"}}