{"buggy_code": ["function isSpecificValue(val) {\n  return val instanceof Buffer || val instanceof Date || val instanceof RegExp;\n}\n\nfunction cloneSpecificValue(val) {\n  if (val instanceof Buffer) {\n    const _copy = Buffer.alloc(val.length);\n    val.copy(_copy);\n    return _copy;\n  } else if (val instanceof Date) {\n    return new Date(val.getTime());\n  } else if (val instanceof RegExp) {\n    return new RegExp(val);\n  } else {\n    throw new Error('Unexpected Value Type');\n  }\n}\n\nfunction override(...rawArgs) {\n  if (rawArgs.length < 1 || typeof rawArgs[0] !== 'object') return false;\n  if (rawArgs.length < 2) return rawArgs[0];\n  const target = rawArgs[0];\n  const args = Array.prototype.slice.call(rawArgs, 1);\n  let val, src;\n  args.forEach(obj => {\n    if (typeof obj !== 'object') return;\n    if (Array.isArray(obj)) {\n      obj.forEach((_, index) => {\n        src = target[index];\n        val = obj[index];\n        if (val === target) {\n        } else if (typeof val !== 'object' || val === null) {\n          target[index] = val;\n        } else if (isSpecificValue(val)) {\n          target[index] = cloneSpecificValue(val);\n        } else if (typeof src !== 'object' || src === null) {\n          if (Array.isArray(val)) {\n            target[index] = override([], val);\n          } else {\n            target[index] = override({}, val);\n          }\n        } else {\n          target[index] = override(src, val);\n        }\n        return;\n      });\n    } else {\n      Object.keys(obj).forEach(key => {\n        src = target[key];\n        val = obj[key];\n        if (val === target) {\n        } else if (typeof val !== 'object' || val === null) {\n          target[key] = val;\n        } else if (isSpecificValue(val)) {\n          target[key] = cloneSpecificValue(val);\n        } else if (typeof src !== 'object' || src === null) {\n          if (Array.isArray(val)) {\n            target[key] = override([], val);\n          } else {\n            target[key] = override({}, val);\n          }\n        } else {\n          target[key] = override(src, val);\n        }\n        return;\n      });\n    }\n  });\n  return target;\n}\n\nmodule.exports = override;"], "fixing_code": ["function isSpecificValue(val) {\n  return val instanceof Buffer || val instanceof Date || val instanceof RegExp;\n}\n\nfunction cloneSpecificValue(val) {\n  if (val instanceof Buffer) {\n    const _copy = Buffer.alloc(val.length);\n    val.copy(_copy);\n    return _copy;\n  } else if (val instanceof Date) {\n    return new Date(val.getTime());\n  } else if (val instanceof RegExp) {\n    return new RegExp(val);\n  } else {\n    throw new Error('Unexpected Value Type');\n  }\n}\n\nfunction override(...rawArgs) {\n  if (rawArgs.length < 1 || typeof rawArgs[0] !== 'object') return false;\n  if (rawArgs.length < 2) return rawArgs[0];\n  const target = rawArgs[0];\n  const args = Array.prototype.slice.call(rawArgs, 1);\n  let val, src;\n  args.forEach(obj => {\n    if (typeof obj !== 'object') return;\n    if (Array.isArray(obj)) {\n      obj.forEach((_, index) => {\n        src = target[index];\n        val = obj[index];\n        if (val === target) {\n        } else if (typeof val !== 'object' || val === null) {\n          target[index] = val;\n        } else if (isSpecificValue(val)) {\n          target[index] = cloneSpecificValue(val);\n        } else if (typeof src !== 'object' || src === null) {\n          if (Array.isArray(val)) {\n            target[index] = override([], val);\n          } else {\n            target[index] = override({}, val);\n          }\n        } else {\n          target[index] = override(src, val);\n        }\n        return;\n      });\n    } else {\n      Object.keys(obj).forEach(key => {\n        if (key == '__proto__' || key == 'constructor' || key == 'prototype')\n          return\n        src = target[key];\n        val = obj[key];\n        if (val === target) {\n        } else if (typeof val !== 'object' || val === null) {\n          target[key] = val;\n        } else if (isSpecificValue(val)) {\n          target[key] = cloneSpecificValue(val);\n        } else if (typeof src !== 'object' || src === null) {\n          if (Array.isArray(val)) {\n            target[key] = override([], val);\n          } else {\n            target[key] = override({}, val);\n          }\n        } else {\n          target[key] = override(src, val);\n        }\n        return;\n      });\n    }\n  });\n  return target;\n}\n\nmodule.exports = override;\n"], "filenames": ["src/index.js"], "buggy_code_start_loc": [48], "buggy_code_end_loc": [73], "fixing_code_start_loc": [49], "fixing_code_end_loc": [75], "type": "NVD-CWE-Other", "message": "Prototype pollution vulnerability in 'deep-override' versions 1.0.0 through 1.0.1 allows an attacker to cause a denial of service and may lead to remote code execution.", "other": {"cve": {"id": "CVE-2021-25941", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2021-05-14T14:15:07.817", "lastModified": "2021-05-24T15:38:33.637", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Prototype pollution vulnerability in 'deep-override' versions 1.0.0 through 1.0.1 allows an attacker to cause a denial of service and may lead to remote code execution."}, {"lang": "es", "value": "Una vulnerabilidad de contaminaci\u00f3n del prototipo en \"deep-override\" versi\u00f3nes 1.0.0 hasta 1.0.1, permite a un atacante causar una denegaci\u00f3n de servicio y puede conllevar a una ejecuci\u00f3n de c\u00f3digo remota"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:deep-override_project:deep-override:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.0.0", "versionEndExcluding": "1.0.2", "matchCriteriaId": "47243DCB-404C-42DA-82A7-D4F4393ED7D5"}]}]}], "references": [{"url": "https://github.com/ASaiAnudeep/deep-override/commit/2aced17651fb684959a6e04b1465a8329b3d5268", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25941", "source": "vulnerabilitylab@mend.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ASaiAnudeep/deep-override/commit/2aced17651fb684959a6e04b1465a8329b3d5268"}}