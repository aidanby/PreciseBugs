{"buggy_code": ["#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <vector>\n#include <math.h>\n#include <fstream>\n#include <sstream>\n#include <iostream>\n#include <unistd.h>\n#include <errno.h>\n#include \"boinc/sched_msgs.h\"\n#include \"boinc/error_numbers.h\"\n#include \"boinc/boinc_db.h\"\n#include \"sched_util.h\"\n#include \"validate_util.h\"\n\nusing namespace std;\n\nstruct DATA {\n\tchar* receptor;\n\tchar* ligand;\n\tdouble seed;\n\tfloat score;\n};\n\nint init_result(RESULT & result, void*& data) {\n\tFILE* f;\n\tstd::string line;\n\tint retval, n;\n\tDATA* dp = new DATA;\n\n\tOUTPUT_FILE_INFO fi;\n\n\tlog_messages.printf(MSG_DEBUG, \"Start\\n\");\n\n\tretval = get_output_file_path(result, fi.path);\n\tif (retval) {\n\t\tlog_messages.printf(MSG_CRITICAL, \"Unable to open file\\n\");\n\t\treturn -1;\n\t}\n\n\tf = fopen(fi.path.c_str(), \"r\");\n\n\tif (f == NULL) {\n\t\tlog_messages.printf(MSG_CRITICAL,\n\t\t\t\t\"Open error: %s\\n errno: %s Waiting...\\n\", fi.path.c_str(),\n\t\t\t\terrno);\n\t\tusleep(1000);\n\t\tlog_messages.printf(MSG_CRITICAL, \"Try again...\\n\");\n\t\tf = fopen(fi.path.c_str(), \"r\");\n\t\tif (f == NULL) {\n\t\t\treturn -1;\n\t\t}\n\t}\n\tlog_messages.printf(MSG_DEBUG, \"Check result\\n\");\n\n\tchar buff[256];\n\tn = fscanf(f, \"%s\", buff);\n\tchar * pch;\n\tpch = strtok(buff, \" ,\");\n\tif (pch != NULL) {\n\t\tdp->receptor = pch;\n\t} else {\n\t\tlog_messages.printf(MSG_CRITICAL, \"Seek receptor failed\\n\");\n\t\treturn -1;\n\t}\n\tpch = strtok(NULL, \",\");\n\tif (pch != NULL) {\n\t\tdp->ligand = pch;\n\t} else {\n\t\tlog_messages.printf(MSG_CRITICAL, \"Seek ligand failed\\n\");\n\t\treturn -1;\n\t}\n\tpch = strtok(NULL, \",\");\n\tif (pch != NULL) {\n\t\tdp->seed = strtod(pch, NULL);\n\t} else {\n\t\tlog_messages.printf(MSG_CRITICAL, \"Seek seed failed\\n\");\n\t\treturn -1;\n\t}\n\tpch = strtok(NULL, \",\");\n\tif (pch != NULL) {\n\t\tdp->score = atof(pch);\n\t} else {\n\t\tlog_messages.printf(MSG_CRITICAL, \"Seek score failed\\n\");\n\t\treturn -1;\n\t}\n\n\tlog_messages.printf(MSG_DEBUG, \"%s %s %f %f\\n\", dp->receptor, dp->ligand,\n\t\t\tdp->seed, dp->score);\n\tif (strlen(dp->ligand) < 4 || strlen(dp->receptor) < 4) {\n\t\tlog_messages.printf(MSG_CRITICAL, \"%s %s Name failed\\n\", dp->receptor,\n\t\t\t\tdp->ligand);\n\t\treturn -1;\n\t}\n\n\tdata = (void*) dp;\n\n\tfclose(f);\n\treturn 0;\n}\n\nint compare_results(RESULT& r1, void* _data1, RESULT const& r2, void* _data2,\n\t\tbool& match) {\n\n\tDATA* data1 = (DATA*) _data1;\n\tDATA* data2 = (DATA*) _data2;\n\n\tlog_messages.printf(MSG_DEBUG, \"%s %s %f %f -- %s %s %f %f\\n\",\n\t\t\tdata1->receptor, data1->ligand, data1->seed, data1->score,\n\t\t\tdata2->receptor, data2->ligand, data2->seed, data2->score);\n\n\tif (data1->score > (data2->score + 2) || data1->score < (data2->score - 2)\n\t\t\t|| data2->score > (data1->score + 2)\n\t\t\t|| data2->score < (data1->score - 2)) {\n\t\tlog_messages.printf(MSG_CRITICAL, \"%f %f -- %f %f Score failed\\n\",\n\t\t\t\tdata1->seed, data1->score, data2->seed, data2->score);\n\t\treturn -1;\n\t}\n\treturn 0;\n}\n\nint cleanup_result(RESULT const& r, void* data) {\n\tif (data)\n\t\tdelete (DATA*) data;\n\treturn 0;\n}\n"], "fixing_code": ["#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <vector>\n#include <math.h>\n#include <fstream>\n#include <sstream>\n#include <iostream>\n#include <unistd.h>\n#include <errno.h>\n#include \"boinc/sched_msgs.h\"\n#include \"boinc/error_numbers.h\"\n#include \"boinc/boinc_db.h\"\n#include \"sched_util.h\"\n#include \"validate_util.h\"\n\nusing namespace std;\n\nstruct DATA {\n\tchar* receptor;\n\tchar* ligand;\n\tdouble seed;\n\tfloat score;\n};\n\nint init_result(RESULT & result, void*& data) {\n\tFILE* f;\n\tstd::string line;\n\tint retval, n;\n\tDATA* dp = new DATA;\n\n\tOUTPUT_FILE_INFO fi;\n\n\tlog_messages.printf(MSG_DEBUG, \"Start\\n\");\n\n\tretval = get_output_file_path(result, fi.path);\n\tif (retval) {\n\t\tlog_messages.printf(MSG_CRITICAL, \"Unable to open file\\n\");\n\t\treturn -1;\n\t}\n\n\tf = fopen(fi.path.c_str(), \"r\");\n\n\tif (f == NULL) {\n\t\tlog_messages.printf(MSG_CRITICAL,\n\t\t\t\t\"Open error: %s\\n errno: %s Waiting...\\n\", fi.path.c_str(),\n\t\t\t\terrno);\n\t\tusleep(1000);\n\t\tlog_messages.printf(MSG_CRITICAL, \"Try again...\\n\");\n\t\tf = fopen(fi.path.c_str(), \"r\");\n\t\tif (f == NULL) {\n\t\t\treturn -1;\n\t\t}\n\t}\n\tlog_messages.printf(MSG_DEBUG, \"Check result\\n\");\n\n\tchar buff[256];\n\t//n = fscanf(f, \"%s\", buff);\n\tfgets(buff, 256, f);\n\tchar * pch;\n\tpch = strtok(buff, \" ,\");\n\tif (pch != NULL) {\n\t\tdp->receptor = pch;\n\t} else {\n\t\tlog_messages.printf(MSG_CRITICAL, \"Seek receptor failed\\n\");\n\t\treturn -1;\n\t}\n\tpch = strtok(NULL, \",\");\n\tif (pch != NULL) {\n\t\tdp->ligand = pch;\n\t} else {\n\t\tlog_messages.printf(MSG_CRITICAL, \"Seek ligand failed\\n\");\n\t\treturn -1;\n\t}\n\tpch = strtok(NULL, \",\");\n\tif (pch != NULL) {\n\t\tdp->seed = strtod(pch, NULL);\n\t} else {\n\t\tlog_messages.printf(MSG_CRITICAL, \"Seek seed failed\\n\");\n\t\treturn -1;\n\t}\n\tpch = strtok(NULL, \",\");\n\tif (pch != NULL) {\n\t\tdp->score = atof(pch);\n\t} else {\n\t\tlog_messages.printf(MSG_CRITICAL, \"Seek score failed\\n\");\n\t\treturn -1;\n\t}\n\n\tlog_messages.printf(MSG_DEBUG, \"%s %s %f %f\\n\", dp->receptor, dp->ligand,\n\t\t\tdp->seed, dp->score);\n\tif (strlen(dp->ligand) < 4 || strlen(dp->receptor) < 4) {\n\t\tlog_messages.printf(MSG_CRITICAL, \"%s %s Name failed\\n\", dp->receptor,\n\t\t\t\tdp->ligand);\n\t\treturn -1;\n\t}\n\n\tdata = (void*) dp;\n\n\tfclose(f);\n\treturn 0;\n}\n\nint compare_results(RESULT& r1, void* _data1, RESULT const& r2, void* _data2,\n\t\tbool& match) {\n\n\tDATA* data1 = (DATA*) _data1;\n\tDATA* data2 = (DATA*) _data2;\n\n\tlog_messages.printf(MSG_DEBUG, \"%s %s %f %f -- %s %s %f %f\\n\",\n\t\t\tdata1->receptor, data1->ligand, data1->seed, data1->score,\n\t\t\tdata2->receptor, data2->ligand, data2->seed, data2->score);\n\n\tif (data1->score > (data2->score + 2) || data1->score < (data2->score - 2)\n\t\t\t|| data2->score > (data1->score + 2)\n\t\t\t|| data2->score < (data1->score - 2)) {\n\t\tlog_messages.printf(MSG_CRITICAL, \"%f %f -- %f %f Score failed\\n\",\n\t\t\t\tdata1->seed, data1->score, data2->seed, data2->score);\n\t\treturn -1;\n\t}\n\treturn 0;\n}\n\nint cleanup_result(RESULT const& r, void* data) {\n\tif (data)\n\t\tdelete (DATA*) data;\n\treturn 0;\n}\n"], "filenames": ["validator/my_validator.cpp"], "buggy_code_start_loc": [58], "buggy_code_end_loc": [59], "fixing_code_start_loc": [58], "fixing_code_end_loc": [60], "type": "CWE-120", "message": "A vulnerability classified as critical was found in AenBleidd FiND. This vulnerability affects the function init_result of the file validator/my_validator.cpp. The manipulation leads to buffer overflow. The name of the patch is ee2eef34a83644f286c9adcaf30437f92e9c48f1. It is recommended to apply a patch to fix this issue. VDB-218458 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2015-10065", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-17T23:15:15.313", "lastModified": "2023-01-24T19:34:23.627", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as critical was found in AenBleidd FiND. This vulnerability affects the function init_result of the file validator/my_validator.cpp. The manipulation leads to buffer overflow. The name of the patch is ee2eef34a83644f286c9adcaf30437f92e9c48f1. It is recommended to apply a patch to fix this issue. VDB-218458 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-120"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:find_project:find:*:*:*:*:*:*:*:*", "versionEndExcluding": "2015-01-28", "matchCriteriaId": "E5222E99-7EF3-472F-AA7A-DCCC49C9A45C"}]}]}], "references": [{"url": "https://github.com/AenBleidd/FiND/commit/ee2eef34a83644f286c9adcaf30437f92e9c48f1", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218458", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory", "VDB Entry"]}, {"url": "https://vuldb.com/?id.218458", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/AenBleidd/FiND/commit/ee2eef34a83644f286c9adcaf30437f92e9c48f1"}}