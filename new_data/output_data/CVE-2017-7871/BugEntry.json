{"buggy_code": ["<?php\nuse \\Dropbox as dbx;\n\nfunction verify(){\n    echo $_GET['challenge'];\n}\n\nfunction webhook(){\n    #'''Receive a list of changed user IDs from Dropbox and process each.'''\n\n    //1 recup de l'header et verifie si signature dropbox\n    $signature = (isset(getallheaders()['X-Dropbox-Signature'])) ? getallheaders()['X-Dropbox-Signature'] : \"signature invalide\" ;\n    //comment v\u00e9rifier la signature ? (non facultatif)\n\n    //2 recup du json\n    $data = file_get_contents(\"php://input\");\n    $uidList = json_decode($data);\n    // file_put_contents('dblog.txt',$data.\"\\n\".$uidList);\n\n    //3 repondre rapidement\n    echo 'Lancement process_user';\n    process_user();\n    //nb  : on n'utilise pas les uid donc cette fonction pourrait se r\u00e9sumer en process_user();\n}\n\nfunction delta($myCustomClient ,$cursortxt, $url, $pathPrefix){\n    $cursor=file_get_contents($cursortxt);\n    // echo $cursor;\n    $deltaPage = $myCustomClient->getDelta($cursor,$pathPrefix);\n    $numAdds = 0;\n    $numRemoves = 0;\n    foreach ($deltaPage[\"entries\"] as $entry) {\n        list($lcPath, $metadata) = $entry;\n        if ($metadata === null) {\n            echo \"- $lcPath\\n\";\n            $numRemoves++;\n        } else {\n            echo \"+ $lcPath\\n\";\n            $numAdds++;\n        }\n        $id = explode(\"/\", substr($lcPath, strlen($pathPrefix)+1, 4))[0]; //create array separate by *\n        echo $id;\n    }\n    file_put_contents($cursortxt,$deltaPage[\"cursor\"]);\n\n    if($numAdds+$numRemoves>0){\n        header('Location: lib/ajax/'.$url.'.php?id='.$id);\n    }\n}\n\n\nfunction process_user(){\n    #'''Call /delta for the given user ID and process any changes.'''\n// creation d'un client dropbox\n    include(\"lib/dropboxAPI.php\");\n    $myCustomClient = new dbx\\Client($accessToken, $clientIdentifier);\n\n    //Articles\n    $pathPrefix=\"/Chargements appareil photo/ArticleTdm\";\n    $cursortxt = \"lib/cursor.txt\";\n    $url=\"url\";\n    delta($myCustomClient ,$cursortxt, $url, $pathPrefix);\n\n    //Challenge\n    $pathPrefix=\"/Chargements appareil photo/ChallengeTdm\";\n    $cursortxt = \"lib/cursorC.txt\";\n    $url=\"challenge_update\";\n    delta($myCustomClient , $cursortxt, $url, $pathPrefix);\n}\n\nif(isset($_GET['challenge'])){\n    verify();\n}elseif (isset(getallheaders()['X-Dropbox-Signature'])) {\n    webhook();\n}else {\n    process_user();\n}\n?>\n", "<?php \nuse \\Dropbox as dbx;\n\nfunction verify(){\n\techo $_GET['challenge'];\n}\n\nfunction webhook(){\n\t#'''Receive a list of changed user IDs from Dropbox and process each.'''\n\n\t//1 recup de l'header et verifie si signature dropbox\n\t$signature = (isset(getallheaders()['X-Dropbox-Signature'])) ? getallheaders()['X-Dropbox-Signature'] : \"signature invalide\" ;\n\t//comment v\u00e9rifier la signature ? (non facultatif)\n\n\t//2 recup du json\n\t$data = file_get_contents(\"php://input\"); \n\t$uidList = json_decode($data);\n\t// file_put_contents('dblog.txt',$data.\"\\n\".$uidList);\n\n\t//3 repondre rapidement\n\techo 'Lancement process_user';\n\tprocess_user();\n\t//nb  : on n'utilise pas les uid donc cette fonction pourrait se r\u00e9sumer en process_user();\n}\n\nfunction delta($myCustomClient ,$cursortxt, $url, $pathPrefix){\n\t$cursor=file_get_contents($cursortxt);\n\t// echo $cursor;\n\t$deltaPage = $myCustomClient->getDelta($cursor,$pathPrefix);\n\t$numAdds = 0;\n\t$numRemoves = 0;\n\tforeach ($deltaPage[\"entries\"] as $entry) {\n\t    list($lcPath, $metadata) = $entry;\n\t    if ($metadata === null) {\n\t        echo \"- $lcPath\\n\";\n\t        $numRemoves++;\n\t    } else {\n\t        echo \"+ $lcPath\\n\";\n\t        $numAdds++;\n\t    }\n\t    $id = explode(\"/\", substr($lcPath, strlen($pathPrefix)+1, 4))[0]; //create array separate by *\n\t\techo $id;\n\t}\n\tfile_put_contents($cursortxt,$deltaPage[\"cursor\"]);\n\n\tif($numAdds+$numRemoves>0){\n\t\t header('Location: lib/ajax/'.$url.'.php?id='.$id);\n\t}\n}\n\n\nfunction process_user(){\n\t#'''Call /delta for the given user ID and process any changes.'''\n// creation d'un client dropbox \n\tinclude(\"lib/dropboxAPI.php\");\n\t$myCustomClient = new dbx\\Client($accessToken, $clientIdentifier);\n\n\t//Articles\n \t$pathPrefix=\"/Chargements appareil photo/ArticleTdm\";\n \t$cursortxt = \"lib/cursor.txt\";\n \t$url=\"url\";\n \tdelta($myCustomClient ,$cursortxt, $url, $pathPrefix);\n\n \t//Challenge\n\t$pathPrefix=\"/Chargements appareil photo/ChallengeTdm\";\n \t$cursortxt = \"lib/cursorC.txt\";\n \t$url=\"challenge_update\";\n\tdelta($myCustomClient , $cursortxt, $url, $pathPrefix);\n}\n\nif(isset($_GET['challenge'])){\n\tverify();\n}elseif (isset(getallheaders()['X-Dropbox-Signature'])) {\n\twebhook();\n}else {\n\tprocess_user();\n}\n?>\n"], "fixing_code": ["<?php\nuse \\Dropbox as dbx;\n\nfunction verify(){\n    echo htmlspecialchars($_GET['challenge']);\n}\n\nfunction webhook(){\n    #'''Receive a list of changed user IDs from Dropbox and process each.'''\n\n    //1 recup de l'header et verifie si signature dropbox\n    $signature = (isset(getallheaders()['X-Dropbox-Signature'])) ? getallheaders()['X-Dropbox-Signature'] : \"signature invalide\" ;\n    //comment v\u00e9rifier la signature ? (non facultatif)\n\n    //2 recup du json\n    $data = file_get_contents(\"php://input\");\n    $uidList = json_decode($data);\n    // file_put_contents('dblog.txt',$data.\"\\n\".$uidList);\n\n    //3 repondre rapidement\n    echo 'Lancement process_user';\n    process_user();\n    //nb  : on n'utilise pas les uid donc cette fonction pourrait se r\u00e9sumer en process_user();\n}\n\nfunction delta($myCustomClient ,$cursortxt, $url, $pathPrefix){\n    $cursor=file_get_contents($cursortxt);\n    // echo $cursor;\n    $deltaPage = $myCustomClient->getDelta($cursor,$pathPrefix);\n    $numAdds = 0;\n    $numRemoves = 0;\n    foreach ($deltaPage[\"entries\"] as $entry) {\n        list($lcPath, $metadata) = $entry;\n        if ($metadata === null) {\n            echo \"- $lcPath\\n\";\n            $numRemoves++;\n        } else {\n            echo \"+ $lcPath\\n\";\n            $numAdds++;\n        }\n        $id = explode(\"/\", substr($lcPath, strlen($pathPrefix)+1, 4))[0]; //create array separate by *\n        echo $id;\n    }\n    file_put_contents($cursortxt,$deltaPage[\"cursor\"]);\n\n    if($numAdds+$numRemoves>0){\n        header('Location: ../lib/ajax/'.$url.'.php?id='.$id);\n    }\n}\n\n\nfunction process_user(){\n    #'''Call /delta for the given user ID and process any changes.'''\n// creation d'un client dropbox\n    include(\"../lib/dropboxAPI.php\");\n    $myCustomClient = new dbx\\Client($accessToken, $clientIdentifier);\n\n    //Articles\n    $pathPrefix=\"/Chargements appareil photo/ArticleTdm\";\n    $cursortxt = \"../lib/cursor.txt\";\n    $url=\"url\";\n    delta($myCustomClient ,$cursortxt, $url, $pathPrefix);\n\n    //Challenge\n    $pathPrefix=\"/Chargements appareil photo/ChallengeTdm\";\n    $cursortxt = \"../lib/cursorC.txt\";\n    $url=\"challenge_update\";\n    delta($myCustomClient , $cursortxt, $url, $pathPrefix);\n}\n\nif(isset($_GET['challenge'])){\n    verify();\n}elseif (isset(getallheaders()['X-Dropbox-Signature'])) {\n    webhook();\n}else {\n    process_user();\n}\n?>\n", "<?php \nuse \\Dropbox as dbx;\n\nfunction verify(){\n\techo htmlspecialchars($_GET['challenge']);\n}\n\nfunction webhook(){\n\t#'''Receive a list of changed user IDs from Dropbox and process each.'''\n\n\t//1 recup de l'header et verifie si signature dropbox\n\t$signature = (isset(getallheaders()['X-Dropbox-Signature'])) ? getallheaders()['X-Dropbox-Signature'] : \"signature invalide\" ;\n\t//comment v\u00e9rifier la signature ? (non facultatif)\n\n\t//2 recup du json\n\t$data = file_get_contents(\"php://input\"); \n\t$uidList = json_decode($data);\n\t// file_put_contents('dblog.txt',$data.\"\\n\".$uidList);\n\n\t//3 repondre rapidement\n\techo 'Lancement process_user';\n\tprocess_user();\n\t//nb  : on n'utilise pas les uid donc cette fonction pourrait se r\u00e9sumer en process_user();\n}\n\nfunction delta($myCustomClient ,$cursortxt, $url, $pathPrefix){\n\t$cursor=file_get_contents($cursortxt);\n\t// echo $cursor;\n\t$deltaPage = $myCustomClient->getDelta($cursor,$pathPrefix);\n\t$numAdds = 0;\n\t$numRemoves = 0;\n\tforeach ($deltaPage[\"entries\"] as $entry) {\n\t    list($lcPath, $metadata) = $entry;\n\t    if ($metadata === null) {\n\t        echo \"- $lcPath\\n\";\n\t        $numRemoves++;\n\t    } else {\n\t        echo \"+ $lcPath\\n\";\n\t        $numAdds++;\n\t    }\n\t    $id = explode(\"/\", substr($lcPath, strlen($pathPrefix)+1, 4))[0]; //create array separate by *\n\t\techo $id;\n\t}\n\tfile_put_contents($cursortxt,$deltaPage[\"cursor\"]);\n\n\tif($numAdds+$numRemoves>0){\n\t\t header('Location: lib/ajax/'.$url.'.php?id='.$id);\n\t}\n}\n\n\nfunction process_user(){\n\t#'''Call /delta for the given user ID and process any changes.'''\n// creation d'un client dropbox \n\tinclude(\"lib/dropboxAPI.php\");\n\t$myCustomClient = new dbx\\Client($accessToken, $clientIdentifier);\n\n\t//Articles\n \t$pathPrefix=\"/Chargements appareil photo/ArticleTdm\";\n \t$cursortxt = \"lib/cursor.txt\";\n \t$url=\"url\";\n \tdelta($myCustomClient ,$cursortxt, $url, $pathPrefix);\n\n \t//Challenge\n\t$pathPrefix=\"/Chargements appareil photo/ChallengeTdm\";\n \t$cursortxt = \"lib/cursorC.txt\";\n \t$url=\"challenge_update\";\n\tdelta($myCustomClient , $cursortxt, $url, $pathPrefix);\n}\n\nif(isset($_GET['challenge'])){\n\tverify();\n}elseif (isset(getallheaders()['X-Dropbox-Signature'])) {\n\twebhook();\n}else {\n\tprocess_user();\n}\n?>\n"], "filenames": ["src/Webhook.php", "webhook.php"], "buggy_code_start_loc": [5, 5], "buggy_code_end_loc": [67, 6], "fixing_code_start_loc": [5, 5], "fixing_code_end_loc": [67, 6], "type": "CWE-79", "message": "trollepierre/tdm before 2017-04-13 is vulnerable to a reflected XSS in tdm-master/webhook.php (challenge parameter).", "other": {"cve": {"id": "CVE-2017-7871", "sourceIdentifier": "cve@mitre.org", "published": "2017-04-14T18:59:01.157", "lastModified": "2017-04-25T00:42:15.950", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "trollepierre/tdm before 2017-04-13 is vulnerable to a reflected XSS in tdm-master/webhook.php (challenge parameter)."}, {"lang": "es", "value": "trollepierre/tdm en versiones anteriores a 2017-04-13 es vulnerable a un XSS reflejado en tdm-master/webhook.php (par\u00e1metro de desaf\u00edo)."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:tdm_project:tdm:*:*:*:*:*:*:*:*", "versionEndIncluding": "2017-04-12", "matchCriteriaId": "A897E17E-9C40-4184-A031-796C15089C07"}]}]}], "references": [{"url": "https://github.com/trollepierre/tdm/commit/2e89019d6a491f0a5ac3db8732181f6eb1d219aa", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/trollepierre/tdm/issues/50", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/trollepierre/tdm/commit/2e89019d6a491f0a5ac3db8732181f6eb1d219aa"}}