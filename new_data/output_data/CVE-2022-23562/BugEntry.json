{"buggy_code": ["/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/math_ops.cc.\n\n#include \"tensorflow/core/kernels/sequence_ops.h\"\n\n#include <cmath>\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/types.h\"\n\nnamespace tensorflow {\n\nusing CPUDevice = Eigen::ThreadPoolDevice;\nusing GPUDevice = Eigen::GpuDevice;\n\nnamespace functor {\n\ntemplate <typename T>\nstruct RangeFunctor<CPUDevice, T> {\n  void operator()(OpKernelContext* context, int64_t size, T start, T delta,\n                  typename TTypes<T>::Flat output) const {\n    (void)context;\n    T val = start;\n    for (int64_t i = 0; i < size; ++i) {\n      output(i) = T(val);\n      val += delta;\n    }\n  }\n};\n\n}  // namespace functor\n\ntemplate <typename Device, typename T>\nclass RangeOp : public OpKernel {\n public:\n  explicit RangeOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& start_in = context->input(0);\n    const Tensor& limit_in = context->input(1);\n    const Tensor& delta_in = context->input(2);\n    // TODO(rmlarsen): Disallow legacy use of length-1 vectors as scalars.\n    OP_REQUIRES(context,\n                TensorShapeUtils::IsScalar(start_in.shape()) ||\n                    (TensorShapeUtils::IsVector(start_in.shape()) &&\n                     start_in.shape().dim_size(0) == 1),\n                errors::InvalidArgument(\"start must be a scalar, not shape \",\n                                        start_in.shape().DebugString()));\n    OP_REQUIRES(context,\n                TensorShapeUtils::IsScalar(limit_in.shape()) ||\n                    (TensorShapeUtils::IsVector(limit_in.shape()) &&\n                     limit_in.shape().dim_size(0) == 1),\n                errors::InvalidArgument(\"limit must be a scalar, not shape \",\n                                        limit_in.shape().DebugString()));\n    OP_REQUIRES(context,\n                TensorShapeUtils::IsScalar(delta_in.shape()) ||\n                    (TensorShapeUtils::IsVector(delta_in.shape()) &&\n                     delta_in.shape().dim_size(0) == 1),\n                errors::InvalidArgument(\"delta must be a scalar, not shape \",\n                                        delta_in.shape().DebugString()));\n    const T start = start_in.scalar<T>()();\n    const T limit = limit_in.scalar<T>()();\n    const T delta = delta_in.scalar<T>()();\n    OP_REQUIRES(context, delta != 0,\n                errors::InvalidArgument(\"Requires delta != 0: \", delta));\n    if (delta > 0) {\n      OP_REQUIRES(\n          context, start <= limit,\n          errors::InvalidArgument(\n              \"Requires start <= limit when delta > 0: \", start, \"/\", limit));\n    } else {\n      OP_REQUIRES(\n          context, start >= limit,\n          errors::InvalidArgument(\n              \"Requires start >= limit when delta < 0: \", start, \"/\", limit));\n    }\n    int64_t size = 0;\n    if (std::is_integral<T>::value) {\n      size = static_cast<int64_t>(\n          (std::abs(limit - start) + std::abs(delta) - 1) / std::abs(delta));\n    } else {\n      size = static_cast<int64_t>(std::ceil(std::abs((limit - start) / delta)));\n    }\n    TensorShape shape;\n    OP_REQUIRES_OK(context, shape.AddDimWithStatus(size));\n    Tensor* out = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(0, shape, &out));\n    if (size == 0) return;\n    auto flat = out->flat<T>();\n    functor::RangeFunctor<Device, T>()(context, size, start, delta, flat);\n  }\n};\n\n#define REGISTER_KERNEL(DEV, DEV_TYPE, TYPE)                 \\\n  REGISTER_KERNEL_BUILDER(Name(\"Range\")                      \\\n                              .Device(DEV)                   \\\n                              .HostMemory(\"start\")           \\\n                              .HostMemory(\"limit\")           \\\n                              .HostMemory(\"delta\")           \\\n                              .TypeConstraint<TYPE>(\"Tidx\"), \\\n                          RangeOp<DEV_TYPE, TYPE>);\n\n#define REGISTER_CPU_KERNEL(T) REGISTER_KERNEL(DEVICE_CPU, CPUDevice, T)\n#define REGISTER_GPU_KERNEL(T) REGISTER_KERNEL(DEVICE_GPU, GPUDevice, T)\n\nTF_CALL_float(REGISTER_CPU_KERNEL);\nTF_CALL_double(REGISTER_CPU_KERNEL);\nTF_CALL_int32(REGISTER_CPU_KERNEL);\nTF_CALL_int64(REGISTER_CPU_KERNEL);\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\nTF_CALL_float(REGISTER_GPU_KERNEL);\nTF_CALL_double(REGISTER_GPU_KERNEL);\nTF_CALL_int64(REGISTER_GPU_KERNEL);\n\n// Special case to execute int32 on the host with host output.\nREGISTER_KERNEL_BUILDER(Name(\"Range\")\n                            .Device(DEVICE_GPU)\n                            .HostMemory(\"start\")\n                            .HostMemory(\"limit\")\n                            .HostMemory(\"delta\")\n                            .HostMemory(\"output\")\n                            .TypeConstraint<int32_t>(\"Tidx\"),\n                        RangeOp<CPUDevice, int32_t>);\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#undef REGISTER_KERNEL\n#undef REGISTER_CPU_KERNEL\n#undef REGISTER_GPU_KERNEL\n\ntemplate <typename T, typename Tnum>\nclass LinSpaceOp : public OpKernel {\n public:\n  explicit LinSpaceOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& start_in = context->input(0);\n    const Tensor& stop_in = context->input(1);\n    const Tensor& num_in = context->input(2);\n    OP_REQUIRES(context, TensorShapeUtils::IsScalar(start_in.shape()),\n                errors::InvalidArgument(\"start must be a scalar, not shape \",\n                                        start_in.shape().DebugString()));\n    OP_REQUIRES(context, TensorShapeUtils::IsScalar(stop_in.shape()),\n                errors::InvalidArgument(\"stop must be a scalar, not shape \",\n                                        stop_in.shape().DebugString()));\n    OP_REQUIRES(context, TensorShapeUtils::IsScalar(num_in.shape()),\n                errors::InvalidArgument(\"num must be a scalar, not shape \",\n                                        num_in.shape().DebugString()));\n    const T start = start_in.scalar<T>()();\n    const T stop = stop_in.scalar<T>()();\n    const Tnum num = num_in.scalar<Tnum>()();\n    OP_REQUIRES(context, num > 0,\n                errors::InvalidArgument(\"Requires num > 0: \", num));\n    Tensor* out = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(0, TensorShape({num}), &out));\n    auto flat = out->flat<T>();\n    flat(0) = start;\n    if (num > 1) {\n      const T step = (stop - start) / (num - 1);\n      for (Tnum i = 1; i < num - 1; ++i) flat(i) = start + step * i;\n      // Ensure final value == stop; float arithmetic won't guarantee this.\n      flat(num - 1) = stop;\n    }\n  }\n};\n\n#define REGISTER_KERNEL(DEV, T, Tidx)                       \\\n  REGISTER_KERNEL_BUILDER(Name(\"LinSpace\")                  \\\n                              .Device(DEV)                  \\\n                              .TypeConstraint<T>(\"T\")       \\\n                              .TypeConstraint<Tidx>(\"Tidx\") \\\n                              .HostMemory(\"start\")          \\\n                              .HostMemory(\"stop\")           \\\n                              .HostMemory(\"num\")            \\\n                              .HostMemory(\"output\"),        \\\n                          LinSpaceOp<T, Tidx>);\n\n#define REGISTER_KERNEL_ALL_NUMS(dev, T) \\\n  REGISTER_KERNEL(dev, T, int32);        \\\n  REGISTER_KERNEL(dev, T, int64_t)\n\n#define REGISTER_CPU_KERNEL(T) REGISTER_KERNEL_ALL_NUMS(DEVICE_CPU, T)\nTF_CALL_float(REGISTER_CPU_KERNEL);\nTF_CALL_double(REGISTER_CPU_KERNEL);\n\n#define REGISTER_DEFAULT_KERNEL(T) REGISTER_KERNEL_ALL_NUMS(DEVICE_DEFAULT, T)\nTF_CALL_float(REGISTER_DEFAULT_KERNEL);\nTF_CALL_double(REGISTER_DEFAULT_KERNEL);\n#undef REGISTER_DEFAULT_KERNEL\n\n#undef REGISTER_CPU_KERNEL\n#undef REGISTER_KERNEL_ALL_NUMS\n#undef REGISTER_KERNEL\n\n}  // namespace tensorflow\n", "/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/framework/common_shape_fns.h\"\n#include \"tensorflow/core/framework/numeric_op.h\"\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n\nnamespace tensorflow {\n\nusing shape_inference::DimensionHandle;\nusing shape_inference::InferenceContext;\nusing shape_inference::ShapeHandle;\n\nREGISTER_OP(\"AddN\")\n    .Input(\"inputs: N * T\")\n    .Output(\"sum: T\")\n    .Attr(\"N: int >= 1\")\n    .Attr(\"T: {numbertype, variant}\")\n    .SetIsCommutative()\n    .SetIsAggregate()\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle cur = c->input(c->num_inputs() - 1);\n      for (int i = c->num_inputs() - 2; i >= 0; --i) {\n        TF_RETURN_WITH_CONTEXT_IF_ERROR(c->Merge(c->input(i), cur, &cur),\n                                        \"From merging shape \", i,\n                                        \" with other shapes.\");\n      }\n      c->set_output(0, cur);\n\n      DataType dtype;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"T\", &dtype));\n\n      if (dtype != DT_VARIANT) {\n        // Exit early if not DT_VARIANT.\n        return Status::OK();\n      } else {\n        // DT_VARIANT shape handle shape inference.  All sizes and dtypes must\n        // be the same; all shapes must be compatible via Merge.\n        std::vector<shape_inference::ShapeAndType> cur_shapes_and_types;\n        auto* shapes_and_types =\n            c->input_handle_shapes_and_types(c->num_inputs() - 1);\n        if (shapes_and_types) {\n          cur_shapes_and_types = *shapes_and_types;\n        }\n\n        for (int i = c->num_inputs() - 2; i >= 0; --i) {\n          auto shapes_and_types_i = c->input_handle_shapes_and_types(i);\n          if (!shapes_and_types && shapes_and_types_i) {\n            // TODO(ebrevdo): Find cases where this happens and fix their shape\n            // inference.  If we are calling AddN on variant types, they should\n            // all have consistent shape_and_type info.\n            shapes_and_types = shapes_and_types_i;\n          } else if (shapes_and_types && shapes_and_types_i) {\n            if (shapes_and_types_i->size() != shapes_and_types->size()) {\n              return errors::InvalidArgument(\n                  \"shapes_and_types[\", i,\n                  \"].size() == \", shapes_and_types_i->size(),\n                  \" != shapes_and_types[0].size() == \",\n                  shapes_and_types->size());\n            }\n            for (int j = 0; j < shapes_and_types->size(); ++j) {\n              if (shapes_and_types->at(j).dtype !=\n                  shapes_and_types_i->at(j).dtype) {\n                return errors::InvalidArgument(\n                    \"shapes_and_types[\", i, \"][\", j, \"].dtype() == \",\n                    DataTypeString(shapes_and_types_i->at(j).dtype),\n                    \" != shapes_and_types[0][\", j, \"].dtype == \",\n                    DataTypeString(shapes_and_types->at(j).dtype));\n              }\n              TF_RETURN_WITH_CONTEXT_IF_ERROR(\n                  c->Merge(shapes_and_types_i->at(j).shape,\n                           cur_shapes_and_types.at(j).shape,\n                           &cur_shapes_and_types.at(j).shape),\n                  \"From merging shapes_and_types[\", i, \"][\", j, \"].shape with \",\n                  \"shapes_and_types[0][\", j, \"].shape\");\n            }\n          }\n        }\n        if (shapes_and_types) {\n          c->set_output_handle_shapes_and_types(0, cur_shapes_and_types);\n        }\n        return Status::OK();\n      }\n    });\n\n// --------------------------------------------------------------------------\n\n// Note that the following operator is just a placeholder and has no\n// associated kernel. The code in accumulate_n_optimizer.cc replaces\n// this placeholder with a graph of operators that do have kernels.\n// The Python code that generates instances of this op is currently in\n// contrib/framework/python/ops/accumulate_n_v2.py\nREGISTER_OP(\"AccumulateNV2\")\n    .Input(\"inputs: N * T\")\n    .Output(\"sum: T\")\n    .Attr(\"N: int >= 1\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"shape: shape\")\n    .SetIsCommutative()\n    .SetIsAggregate()\n    .SetShapeFn(shape_inference::ExplicitShape);\n\n// --------------------------------------------------------------------------\n\nREGISTER_OP(\"BatchMatMul\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"output: T\")\n    .Attr(\n        \"T: {bfloat16, half, float, double, int32, int64, complex64, \"\n        \"complex128}\")\n    .Attr(\"adj_x: bool = false\")\n    .Attr(\"adj_y: bool = false\")\n    .SetShapeFn(shape_inference::BatchMatMulShape);\n\nREGISTER_OP(\"BatchMatMulV2\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"output: T\")\n    .Attr(\n        \"T: {bfloat16, half, float, double, int16, int32, int64, complex64, \"\n        \"complex128}\")\n    .Attr(\"adj_x: bool = false\")\n    .Attr(\"adj_y: bool = false\")\n    .SetShapeFn(shape_inference::BatchMatMulV2Shape);\n\nREGISTER_OP(\"BatchMatMulV3\")\n    .Input(\"x: Ta\")\n    .Input(\"y: Tb\")\n    .Output(\"output: Tout\")\n    .Attr(\n        \"Ta: {bfloat16, half, float, double, uint8, int8, int16, int32, int64, \"\n        \"complex64, complex128}\")\n    .Attr(\n        \"Tb: {bfloat16, half, float, double, uint8, int8, int16, int32, int64, \"\n        \"complex64, complex128}\")\n    .Attr(\n        \"Tout: {bfloat16, half, float, double, int16, int32, int64, complex64, \"\n        \"complex128}\")\n    .Attr(\"adj_x: bool = false\")\n    .Attr(\"adj_y: bool = false\")\n    .SetShapeFn(shape_inference::BatchMatMulV2Shape);\n\n#ifdef INTEL_MKL\nREGISTER_OP(\"_MklBatchMatMul\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"output: T\")\n    .Attr(\"T: {bfloat16, float}\")\n    .Attr(\"adj_x: bool = false\")\n    .Attr(\"adj_y: bool = false\")\n    .SetShapeFn(shape_inference::BatchMatMulShape);\n\nREGISTER_OP(\"_MklBatchMatMulV2\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"output: T\")\n    .Attr(\"T: {bfloat16, float}\")\n    .Attr(\"adj_x: bool = false\")\n    .Attr(\"adj_y: bool = false\")\n    .SetShapeFn(shape_inference::BatchMatMulV2Shape);\n#endif  // INTEL_MKL\n\n// --------------------------------------------------------------------------\n// Casting Ops\n//\n// NOTE: Only a smaller number of types are supported by\n// Cast. The exact casting rule is TBD. The current\n// implementation uses C++ static cast rules for numeric\n// types, which may be changed in the future.\nREGISTER_OP(\"Cast\")\n    .Input(\"x: SrcT\")\n    .Output(\"y: DstT\")\n    .Attr(\"SrcT: type\")\n    .Attr(\"DstT: type\")\n    .Attr(\"Truncate: bool = false\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"_HostCast\")\n    .Input(\"x: SrcT\")\n    .Output(\"y: DstT\")\n    .Attr(\"SrcT: type\")\n    .Attr(\"DstT: type\")\n    .Attr(\"Truncate: bool = false\")\n    .SetShapeFn(shape_inference::UnchangedShape)\n    .Doc(R\"doc(\nCast x of type SrcT to y of DstT.\n\n_HostCast requires its input and produces its output in host memory.\n)doc\");\n\n// --------------------------------------------------------------------------\n\nREGISTER_OP(\"Abs\")\n    .Input(\"x: T\")\n    .Output(\"y: T\")\n    .Attr(\"T: {bfloat16, half, float, double, int8, int16, int32, int64}\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"ComplexAbs\")\n    .Input(\"x: T\")\n    .Output(\"y: Tout\")\n    .Attr(\"T: {complex64, complex128} = DT_COMPLEX64\")\n    .Attr(\"Tout: {float, double} = DT_FLOAT\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\n// Declares cwise unary operations signature: 't -> 't\n#define UNARY()                                                            \\\n  Input(\"x: T\")                                                            \\\n      .Output(\"y: T\")                                                      \\\n      .Attr(                                                               \\\n          \"T: {bfloat16, half, float, double, int8, int16, int32, int64, \" \\\n          \"complex64, complex128}\")                                        \\\n      .SetShapeFn(shape_inference::UnchangedShape)\n\n#define UNARY_UNSIGNED()                                                   \\\n  Input(\"x: T\")                                                            \\\n      .Output(\"y: T\")                                                      \\\n      .Attr(                                                               \\\n          \"T: {bfloat16, half, float, double, int8, int16, int32, int64, \" \\\n          \"uint8, uint16, uint32, uint64, complex64, complex128}\")         \\\n      .SetShapeFn(shape_inference::UnchangedShape)\n\n#define UNARY_REAL()                              \\\n  Input(\"x: T\")                                   \\\n      .Output(\"y: T\")                             \\\n      .Attr(\"T: {bfloat16, half, float, double}\") \\\n      .SetShapeFn(shape_inference::UnchangedShape)\n\n#define UNARY_COMPLEX()                                                  \\\n  Input(\"x: T\")                                                          \\\n      .Output(\"y: T\")                                                    \\\n      .Attr(\"T: {bfloat16, half, float, double, complex64, complex128}\") \\\n      .SetShapeFn(shape_inference::UnchangedShape)\n\n#define UNARY_GRADIENT_COMPLEX()                                         \\\n  Input(\"y: T\")                                                          \\\n      .Input(\"dy: T\")                                                    \\\n      .Output(\"z: T\")                                                    \\\n      .Attr(\"T: {bfloat16, half, float, double, complex64, complex128}\") \\\n      .SetShapeFn(shape_inference::UnchangedShape)\n\nREGISTER_OP(\"Neg\").UNARY();\n\nREGISTER_OP(\"Inv\").UNARY();\n\nREGISTER_OP(\"InvGrad\").UNARY_GRADIENT_COMPLEX();\n\nREGISTER_OP(\"Reciprocal\").UNARY();\n\nREGISTER_OP(\"ReciprocalGrad\").UNARY_GRADIENT_COMPLEX();\n\nREGISTER_OP(\"Square\").UNARY_UNSIGNED();\n\nREGISTER_OP(\"Sqrt\").UNARY_COMPLEX();\n\nREGISTER_OP(\"SqrtGrad\").UNARY_GRADIENT_COMPLEX();\n\nREGISTER_OP(\"Rsqrt\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Round\").UNARY();\n\nREGISTER_OP(\"RsqrtGrad\").UNARY_GRADIENT_COMPLEX();\n\nREGISTER_OP(\"Exp\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Expm1\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Log\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Log1p\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Sinh\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Cosh\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Tanh\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Asinh\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Acosh\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Atanh\").UNARY_COMPLEX();\n\nREGISTER_OP(\"TanhGrad\").UNARY_GRADIENT_COMPLEX();\n\nREGISTER_OP(\"Lgamma\").UNARY_REAL();\n\nREGISTER_OP(\"Digamma\").UNARY_REAL();\n\nREGISTER_OP(\"Erf\").UNARY_REAL();\nREGISTER_OP(\"Erfinv\").UNARY_REAL();\nREGISTER_OP(\"Ndtri\").UNARY_REAL();\nREGISTER_OP(\"Erfc\").UNARY_REAL();\n\nREGISTER_OP(\"Sigmoid\").UNARY_COMPLEX();\n\nREGISTER_OP(\"SigmoidGrad\").UNARY_GRADIENT_COMPLEX();\n\nREGISTER_OP(\"Sin\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Cos\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Tan\").UNARY();\n\nREGISTER_OP(\"Asin\").UNARY();\n\nREGISTER_OP(\"Acos\").UNARY();\n\nREGISTER_OP(\"Atan\").UNARY();\n\nREGISTER_OP(\"_UnaryOpsComposition\")\n    .Input(\"x: T\")\n    .Output(\"y: T\")\n    .Attr(\"T: {float, half, double}\")\n    .Attr(\"op_names: list(string)\")\n    .SetShapeFn(shape_inference::UnchangedShape)\n    .Doc(R\"doc(\n*NOTE*: Do not invoke this operator directly in Python. Graph rewrite pass is\nexpected to create these operators.\n)doc\");\n\n#undef UNARY\n#undef UNARY_REAL\n#undef UNARY_COMPLEX\n\nREGISTER_OP(\"IsNan\")\n    .Input(\"x: T\")\n    .Output(\"y: bool\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"IsInf\")\n    .Input(\"x: T\")\n    .Output(\"y: bool\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"IsFinite\")\n    .Input(\"x: T\")\n    .Output(\"y: bool\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"Sign\")\n    .Input(\"x: T\")\n    .Output(\"y: T\")\n    .Attr(\n        \"T: {bfloat16, half, float, double, int8, int16, int32, int64, \"\n        \"complex64, complex128}\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"Floor\")\n    .Input(\"x: T\")\n    .Output(\"y: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"Ceil\")\n    .Input(\"x: T\")\n    .Output(\"y: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"Rint\")\n    .Input(\"x: T\")\n    .Output(\"y: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\n// Declares cwise binary operations signature: 't, 't -> 't.\n\n#define BINARY_MORE()                                                          \\\n  Input(\"x: T\").Input(\"y: T\").Output(\"z: T\").Attr(                             \\\n      \"T: {bfloat16, half, float, double, uint8, int8, uint16, int16, int32, \" \\\n      \"uint32, uint64, int64, complex64, complex128}\")\n\n#define BINARY_FEWER()                                               \\\n  Input(\"x: T\").Input(\"y: T\").Output(\"z: T\").Attr(                   \\\n      \"T: {bfloat16, half, float, double, int32, int64, complex64, \" \\\n      \"complex128}\")\n\nREGISTER_OP(\"Add\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\n        \"T: {bfloat16, half, float, double, uint8, int8, int16, int32, int64, \"\n        \"complex64, complex128, string}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"AddV2\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\n        \"T: {bfloat16, half, float, double, uint8, uint16, uint32, uint64, \"\n        \"int8, int16, int32, int64, complex64, complex128}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn)\n    .SetIsAggregate()\n    .SetIsCommutative();\n\n#ifdef INTEL_MKL\nREGISTER_OP(\"_MklAdd\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Input(\"mkl_x: uint8\")\n    .Input(\"mkl_y: uint8\")\n    .Output(\"z: T\")\n    .Output(\"mkl_z: uint8\")\n    .Attr(\n        \"T: {half, float, double, uint8, int8, int16, int32, int64, complex64, \"\n        \"complex128, string, bfloat16}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn)\n    .Doc(R\"doc(\nReturns `x` + `y` element-wise.\n\n*NOTE*: `tf.math.add` supports broadcasting. `tf.math.add_n` does not. More about broadcasting\n[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html).\n)doc\");\n\nREGISTER_OP(\"_MklAddV2\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Input(\"mkl_x: uint8\")\n    .Input(\"mkl_y: uint8\")\n    .Output(\"z: T\")\n    .Output(\"mkl_z: uint8\")\n    .Attr(\n        \"T: {bfloat16, half, float, double, uint8, int8, int16, int32, int64, \"\n        \"complex64, complex128}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn)\n    .SetIsAggregate()\n    .SetIsCommutative()\n    .Doc(R\"doc(\nReturns `x` + `y` element-wise.\n*NOTE*: `tf.math.add` supports broadcasting. `tf.math.add_n` does not. More about broadcasting\n[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html).\n)doc\");\n#endif  // INTEL_MKL\n\nREGISTER_OP(\"Sub\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\n        \"T: {bfloat16, half, float, double, uint8, int8, uint16, int16, int32, \"\n        \"int64, complex64, complex128, uint32, uint64}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"_MklSub\")\n    .BINARY_FEWER()\n    .Input(\"mkl_x: uint8\")\n    .Input(\"mkl_y: uint8\")\n    .Output(\"mkl_z: uint8\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn)\n    .Doc(R\"doc(\nReturns x - y element-wise.\n\n*NOTE*: `Sub` supports broadcasting. More about broadcasting\n[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)\n)doc\");\n\nREGISTER_OP(\"Mul\").BINARY_MORE().SetIsCommutative().SetShapeFn(\n    shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"MulNoNan\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {bfloat16, half, float, double, complex64, complex128}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\n// Note: This op is not commutative w.r.t. to all its inputs.\nREGISTER_OP(\"_MklMul\")\n    .BINARY_MORE()\n    .Input(\"mkl_x: uint8\")\n    .Input(\"mkl_y: uint8\")\n    .Output(\"mkl_z: uint8\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn)\n    .Doc(R\"doc(\nReturns x * y element-wise.\n\n*NOTE*: `Mul` supports broadcasting. More about broadcasting\n[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)\n)doc\");\n\nREGISTER_OP(\"Div\").BINARY_MORE().SetShapeFn(\n    shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"DivNoNan\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {half, float, bfloat16, double, complex64, complex128}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"FloorDiv\")\n    .BINARY_MORE()\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"TruncateDiv\")\n    .BINARY_MORE()\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"RealDiv\").BINARY_MORE().SetShapeFn(\n    shape_inference::BroadcastBinaryOpShapeFn);\n\n// Note SquaredDifference implements conj(x - y)*(x - y).\nREGISTER_OP(\"SquaredDifference\")\n    .BINARY_FEWER()\n    .SetIsCommutative()\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\n// Note: This op is not commutative w.r.t. to all its inputs.\nREGISTER_OP(\"_MklSquaredDifference\")\n    .BINARY_FEWER()\n    .Input(\"mkl_x: uint8\")\n    .Input(\"mkl_y: uint8\")\n    .Output(\"mkl_z: uint8\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn)\n    .Doc(R\"doc(\nReturns (x - y)(x - y) element-wise.\n\n*NOTE*: `SquaredDifference` supports broadcasting. More about broadcasting\n[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)\n)doc\");\n\nREGISTER_OP(\"Xlogy\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {half, float, double, complex64, complex128}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Xlog1py\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {half, float, double, complex64, complex128}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Xdivy\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {half, float, double, complex64, complex128}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\n#undef BINARY_FEWER\n#undef BINARY_MORE\n\nREGISTER_OP(\"Maximum\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\n        \"T: {bfloat16, half, float, double, int8, uint8, int16, uint16, \"\n        \"int32, uint32, int64, uint64}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\n// Note: This op is not commutative w.r.t. to all its inputs.\nREGISTER_OP(\"_MklMaximum\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Input(\"mkl_x: uint8\")\n    .Input(\"mkl_y: uint8\")\n    .Output(\"z: T\")\n    .Output(\"mkl_z: uint8\")\n    .Attr(\"T: {half, float, double, int32, int64, bfloat16}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn)\n    .Doc(R\"doc(\nReturns the max of x and y (i.e. x > y ? x : y) element-wise.\n\n*NOTE*: `Maximum` supports broadcasting. More about broadcasting\n[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)\n)doc\");\n\nREGISTER_OP(\"Minimum\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\n        \"T: {bfloat16, half, float, double, int8, uint8, int16, uint16, \"\n        \"int32, uint32, int64, uint64}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Mod\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {int32, int64, float16, half, bfloat16, float, double}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"FloorMod\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\n        \"T: {int8, int16, int32, int64, uint8, uint16, uint32, uint64, \"\n        \"bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"TruncateMod\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {int32, int64, bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Pow\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\n        \"T: {bfloat16, float, half, double, int8, int16, int32, int64, \"\n        \"complex64, complex128}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Igammac\")\n    .Input(\"a: T\")\n    .Input(\"x: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Igamma\")\n    .Input(\"a: T\")\n    .Input(\"x: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"IgammaGradA\")\n    .Input(\"a: T\")\n    .Input(\"x: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {float, double}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Zeta\")\n    .Input(\"x: T\")\n    .Input(\"q: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {float, double}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Polygamma\")\n    .Input(\"a: T\")\n    .Input(\"x: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {float, double}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Atan2\")\n    .Input(\"y: T\")\n    .Input(\"x: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Betainc\")\n    .Input(\"a: T\")\n    .Input(\"b: T\")\n    .Input(\"x: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {float, double}\")\n    .SetShapeFn([](InferenceContext* c) {\n      const int num_inputs = 3;\n      ShapeHandle output = c->UnknownShape();\n      int num_scalars = 0;\n      ShapeHandle some_non_scalar;\n      for (int i = 0; i < num_inputs; ++i) {\n        ShapeHandle in = c->input(i);\n        if (!c->RankKnown(in)) {\n          some_non_scalar = in;\n          // An input with unknown rank could be either a scalar (to be\n          // broadcast) or some other shape.\n        } else if (c->Rank(in) == 0) {\n          // Input is a scalar, it will be broadcast to the output shape.\n          ++num_scalars;\n        } else {\n          TF_RETURN_IF_ERROR(c->Merge(output, in, &output));\n          some_non_scalar = output;\n        }\n      }\n\n      if (num_scalars == num_inputs - 1) {\n        // If all but one input is known to be a scalar, then output is the\n        // remaining input.\n        output = some_non_scalar;\n      } else if (num_scalars == num_inputs) {\n        // If all are scalars, output is scalar; pick the first one arbitrarily.\n        output = c->input(0);\n      }\n\n      c->set_output(0, output);\n      return Status::OK();\n    });\n\n// --------------------------------------------------------------------------\n\n// Declares cwise binary comparison operations signature: 't, 't -> bool,\n// where 't has a natural total order.\n#define COMPARISON()             \\\n  Input(\"x: T\")                  \\\n      .Input(\"y: T\")             \\\n      .Output(\"z: bool\")         \\\n      .Attr(\"T: realnumbertype\") \\\n      .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn)\n\nREGISTER_OP(\"Less\").COMPARISON();\n\nREGISTER_OP(\"LessEqual\").COMPARISON();\n\nREGISTER_OP(\"Greater\").COMPARISON();\n\nREGISTER_OP(\"GreaterEqual\").COMPARISON();\n\n#undef COMPARISON\n\n// --------------------------------------------------------------------------\n\n#define EQUALITY_COMPARISON()                                      \\\n  Input(\"x: T\")                                                    \\\n      .Input(\"y: T\")                                               \\\n      .Output(\"z: bool\")                                           \\\n      .SetIsCommutative()                                          \\\n      .Attr(\"T: type\")                                             \\\n      .Attr(\"incompatible_shape_error: bool = true\")               \\\n      .SetShapeFn([](InferenceContext* c) {                        \\\n        ShapeHandle x = c->input(0);                               \\\n        ShapeHandle y = c->input(1);                               \\\n        ShapeHandle output;                                        \\\n        bool incompatible_shape_error;                             \\\n        TF_RETURN_IF_ERROR(c->GetAttr(\"incompatible_shape_error\",  \\\n                                      &incompatible_shape_error)); \\\n        TF_RETURN_IF_ERROR(BroadcastBinaryOpOutputShapeFnHelper(   \\\n            c, x, y, incompatible_shape_error, &output));          \\\n        c->set_output(0, output);                                  \\\n        return Status::OK();                                       \\\n      })\n\nREGISTER_OP(\"Equal\").EQUALITY_COMPARISON();\n\nREGISTER_OP(\"NotEqual\").EQUALITY_COMPARISON();\n\n#undef EQUALITY_COMPARISON\n\nREGISTER_OP(\"ApproximateEqual\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: bool\")\n    .SetIsCommutative()\n    .Attr(\"T: numbertype\")\n    .Attr(\"tolerance: float = 0.00001\")\n    .SetShapeFn([](InferenceContext* c) {\n      // The inputs 'x' and 'y' must have the same shape.\n      ShapeHandle data_x = c->input(0);\n      ShapeHandle data_y = c->input(1);\n      TF_RETURN_IF_ERROR(c->Merge(data_x, data_y, &data_x));\n      return shape_inference::UnchangedShape(c);\n    });\n\n// --------------------------------------------------------------------------\n\nREGISTER_OP(\"LogicalNot\")\n    .Input(\"x: bool\")\n    .Output(\"y: bool\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\n#define BINARY_LOGICAL()  \\\n  Input(\"x: bool\")        \\\n      .Input(\"y: bool\")   \\\n      .Output(\"z: bool\")  \\\n      .SetIsCommutative() \\\n      .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn)\n\nREGISTER_OP(\"LogicalAnd\").BINARY_LOGICAL();\n\nREGISTER_OP(\"LogicalOr\").BINARY_LOGICAL();\n\n#undef BINARY_LOGICAL\n\n// --------------------------------------------------------------------------\n\nREGISTER_OP(\"Select\")\n    .Input(\"condition: bool\")\n    .Input(\"t: T\")\n    .Input(\"e: T\")\n    .Output(\"output: T\")\n    .Attr(\"T: type\")\n    .SetShapeFn([](InferenceContext* c) {\n      auto* handle_data_1 = c->input_handle_shapes_and_types(1);\n      auto* handle_data_2 = c->input_handle_shapes_and_types(2);\n      // Merge handle shape and dtype if applicable.\n      if (handle_data_1 != nullptr && handle_data_2 != nullptr) {\n        const auto size = handle_data_1->size();\n        std::vector<shape_inference::ShapeAndType> merged_handle_data(size);\n        if (size != handle_data_2->size()) {\n          return errors::InvalidArgument(\n              \"Trying to merge handles pointing to different numbers of \"\n              \"tensors.\");\n        }\n\n        for (int i = 0; i < size; ++i) {\n          const shape_inference::ShapeAndType& s1 = (*handle_data_1)[i];\n          const shape_inference::ShapeAndType& s2 = (*handle_data_2)[i];\n          if (s1.dtype != s2.dtype) {\n            // TODO(apassos) resolve this in the manner of b/32476923\n            return errors::InvalidArgument(\n                \"Trying to merge handles pointing to different dtypes.\");\n          }\n          merged_handle_data[i].dtype = s1.dtype;\n          TF_RETURN_IF_ERROR(\n              c->Merge(s1.shape, s2.shape, &merged_handle_data[i].shape));\n        }\n\n        c->set_output_handle_shapes_and_types(0, merged_handle_data);\n      }\n\n      // The inputs 'then' and 'else' must have the same shape.\n      ShapeHandle data = c->input(1);\n      ShapeHandle other = c->input(2);\n      TF_RETURN_IF_ERROR(c->Merge(data, other, &data));\n\n      // The input 'cond' must either have the same shape as 'then' and\n      // 'else', or be a vector if 'then' and 'else' are at least vectors.\n      ShapeHandle cond = c->input(0);\n\n      if (!c->RankKnown(cond) || !c->RankKnown(data)) {\n        c->set_output(0, data);\n        return Status::OK();\n      }\n\n      // rank of shape and data is known.\n\n      const int32_t cond_rank = c->Rank(cond);\n      const int32_t data_rank = c->Rank(data);\n\n      if (cond_rank == 0) {\n        // The rank of 'cond' is a scalar.\n        // t and e can have any shape.\n        c->set_output(0, data);\n        return Status::OK();\n      }\n\n      if (cond_rank != 1) {\n        // If 'cond' is not a vector, and not a scalar,\n        // then shape must match 'then' and 'else'\n        TF_RETURN_IF_ERROR(c->Merge(data, cond, &data));\n        c->set_output(0, data);\n        return Status::OK();\n      }\n\n      if (data_rank == 0) {\n        // if 'then' and 'else' are scalar also the cond must be\n        TF_RETURN_IF_ERROR(c->Merge(data, cond, &data));\n        c->set_output(0, data);\n        return Status::OK();\n      }\n\n      if (cond_rank == 1) {\n        // if the cond is a vector and the 'then' is not a scalar,\n        // the first dimension of 'then' and 'else'\n        TF_RETURN_IF_ERROR(c->Merge(cond, c->Vector(c->Dim(data, 0)), &cond));\n        c->set_output(0, data);\n        return Status::OK();\n      }\n\n      c->set_output(0, data);\n\n      return Status::OK();\n    });\n\nREGISTER_OP(\"SelectV2\")\n    .Input(\"condition: bool\")\n    .Input(\"t: T\")\n    .Input(\"e: T\")\n    .Output(\"output: T\")\n    .Attr(\"T: type\")\n    .SetShapeFn([](InferenceContext* c) {\n      auto* handle_data_1 = c->input_handle_shapes_and_types(1);\n      auto* handle_data_2 = c->input_handle_shapes_and_types(2);\n      // Merge handle shape and dtype if applicable.\n      if (handle_data_1 != nullptr && handle_data_2 != nullptr) {\n        const auto size = handle_data_1->size();\n        std::vector<shape_inference::ShapeAndType> merged_handle_data(size);\n        if (size != handle_data_2->size()) {\n          return errors::InvalidArgument(\n              \"Trying to merge handles pointing to different numbers of \"\n              \"tensors.\");\n        }\n\n        for (int i = 0; i < size; ++i) {\n          const shape_inference::ShapeAndType& s1 = (*handle_data_1)[i];\n          const shape_inference::ShapeAndType& s2 = (*handle_data_2)[i];\n          if (s1.dtype != s2.dtype) {\n            // TODO(apassos) resolve this in the manner of b/32476923\n            return errors::InvalidArgument(\n                \"Trying to merge handles pointing to different dtypes.\");\n          }\n          merged_handle_data[i].dtype = s1.dtype;\n          TF_RETURN_IF_ERROR(\n              c->Merge(s1.shape, s2.shape, &merged_handle_data[i].shape));\n        }\n\n        c->set_output_handle_shapes_and_types(0, merged_handle_data);\n      }\n\n      // The inputs 'cond', 'then', and 'else' must be broadcastable.\n      // TODO (yongtang): Consolidate 3-ary broadcast instead of\n      // multiple 2-ary broadcast.\n      ShapeHandle cond = c->input(0);\n      ShapeHandle then = c->input(1);\n      ShapeHandle else_ = c->input(2);\n      ShapeHandle other;\n      TF_RETURN_IF_ERROR(\n          BroadcastBinaryOpOutputShapeFnHelper(c, then, else_, true, &other));\n      ShapeHandle output;\n      TF_RETURN_IF_ERROR(\n          BroadcastBinaryOpOutputShapeFnHelper(c, cond, other, true, &output));\n      c->set_output(0, output);\n      return Status::OK();\n    });\n\n// --------------------------------------------------------------------------\n\nREGISTER_OP(\"MatMul\")\n    .Input(\"a: T\")\n    .Input(\"b: T\")\n    .Output(\"product: T\")\n    .Attr(\"transpose_a: bool = false\")\n    .Attr(\"transpose_b: bool = false\")\n    .Attr(\n        \"T: {bfloat16, half, float, double, int32, int64, complex64, \"\n        \"complex128}\")\n    .SetShapeFn(shape_inference::MatMulShape);\n\n#ifdef INTEL_MKL\nREGISTER_OP(\"_MklMatMul\")\n    .Input(\"a: T\")\n    .Input(\"b: T\")\n    .Output(\"product: T\")\n    .Attr(\"transpose_a: bool = false\")\n    .Attr(\"transpose_b: bool = false\")\n    .Attr(\"T: {bfloat16, float}\")\n    .SetShapeFn(shape_inference::MatMulShape);\n#endif  // INTEL_MKL\n\nREGISTER_OP(\"SparseMatMul\")\n    .Input(\"a: Ta\")\n    .Input(\"b: Tb\")\n    .Output(\"product: float\")\n    .Attr(\"transpose_a: bool = false\")\n    .Attr(\"transpose_b: bool = false\")\n    .Attr(\"a_is_sparse: bool = false\")\n    .Attr(\"b_is_sparse: bool = false\")\n    .Attr(\"Ta: {float, bfloat16} = DT_FLOAT\")\n    .Attr(\"Tb: {float, bfloat16} = DT_FLOAT\")\n    .SetShapeFn(shape_inference::MatMulShape);\n\nREGISTER_OP(\"_FusedMatMul\")\n    .Input(\"a: T\")\n    .Input(\"b: T\")\n    .Input(\"args: num_args * T\")\n    .Output(\"product: T\")\n    .Attr(\"transpose_a: bool = false\")\n    .Attr(\"transpose_b: bool = false\")\n    .Attr(\"T: {bfloat16, float}\")\n    .Attr(\"num_args: int >= 0\")\n    .Attr(\"fused_ops: list(string) = []\")\n    // Attributes for the FusedBatchNorm ----------- //\n    .Attr(\"epsilon: float = 0.0001\")\n    // Attributes for the LeakyRelu ---------------- //\n    .Attr(\"leakyrelu_alpha: float = 0.2\")\n    // --------------------------------------------- //\n    .SetShapeFn(shape_inference::MatMulShape)\n    .Doc(R\"doc(\nPerforms a MatMul followed by a specified series of operations.\n\nThe inputs to the MatMul are specified by `a` and `b`. The series of operations\nthat follows is specified by the `fused_ops` attribute, which is a list of TF op\nnames specified as strings (e.g. \"Relu\"). They are performed in order, where the\n(first) input to each op is the output of the preceding op. The first input and\nthe output of each fused_op must be of type T.\n\nCurrently supported fused_op combinations are: [\"BiasAdd\"] and [\"BiasAdd\",A],\nwhere A is one of {\"Elu\",\"Relu\",\"Relu6\"}.\n\n* The first input to BiasAdd is the Conv2D result, and the additional BiasAdd\ninput is specified by `args`.\n* If there is an op A specified, the output of the BiasAdd is the input to op A,\nand op A produces the _FusedConv2D output. Otherwise, the BiasAdd produces the\n_FusedConv2D output.\n\n*NOTE*: Do not invoke this operator directly in Python. Grappler is\nexpected to create these operators.\n)doc\");\n\n// --------------------------------------------------------------------------\n\n// For operations where the output is a reduction function along some\n// dimensions of the input.\nREGISTER_OP(\"Sum\")\n    .Input(\"input: T\")\n    .Input(\"reduction_indices: Tidx\")\n    .Output(\"output: T\")\n    .Attr(\"keep_dims: bool = false\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::ReductionShape);\n\nREGISTER_OP(\"EuclideanNorm\")\n    .Input(\"input: T\")\n    .Input(\"reduction_indices: Tidx\")\n    .Output(\"output: T\")\n    .Attr(\"keep_dims: bool = false\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::ReductionShape);\n\nREGISTER_OP(\"Mean\")\n    .Input(\"input: T\")\n    .Input(\"reduction_indices: Tidx\")\n    .Output(\"output: T\")\n    .Attr(\"keep_dims: bool = false\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::ReductionShape);\n\nREGISTER_OP(\"Prod\")\n    .Input(\"input: T\")\n    .Input(\"reduction_indices: Tidx\")\n    .Output(\"output: T\")\n    .Attr(\"keep_dims: bool = false\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::ReductionShape);\n\nREGISTER_OP(\"Min\")\n    .Input(\"input: T\")\n    .Input(\"reduction_indices: Tidx\")\n    .Output(\"output: T\")\n    .Attr(\"keep_dims: bool = false\")\n    .Attr(\"T: {realnumbertype, quantizedtype}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::ReductionShape);\n\nREGISTER_OP(\"Max\")\n    .Input(\"input: T\")\n    .Input(\"reduction_indices: Tidx\")\n    .Output(\"output: T\")\n    .Attr(\"keep_dims: bool = false\")\n    .Attr(\"T: {realnumbertype, quantizedtype}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::ReductionShape);\n\nnamespace {\n\nStatus ArgOpShape(shape_inference::InferenceContext* c) {\n  ShapeHandle dimension_shape;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 0, &dimension_shape));\n\n  ShapeHandle input_shape = c->input(0);\n  if (!c->RankKnown(input_shape)) {\n    return shape_inference::UnknownShape(c);\n  }\n\n  const int32_t input_rank = c->Rank(input_shape);\n  if (input_rank <= 1) {\n    // Reducing a scalar/vector must return a scalar.\n    return shape_inference::ScalarShape(c);\n  }\n\n  const Tensor* dim_t = c->input_tensor(1);\n  if (dim_t == nullptr) {\n    // We don't know the value of the dimension, but we\n    // know the rank of the input, so return the correct\n    // rank with unknown dimensions.\n    std::vector<DimensionHandle> dims(input_rank - 1);\n    for (int i = 0; i < dims.size(); ++i) {\n      dims[i] = c->UnknownDim();\n    }\n\n    c->set_output(0, c->MakeShape(dims));\n    return Status::OK();\n  }\n\n  int64_t dimension_val;\n  if (dim_t->dtype() == DT_INT32) {\n    dimension_val = dim_t->scalar<int32>()();\n  } else {\n    dimension_val = dim_t->scalar<int64_t>()();\n  }\n\n  int64_t axis = dimension_val < 0 ? dimension_val + input_rank : dimension_val;\n  if (axis < 0 || axis >= input_rank) {\n    return errors::InvalidArgument(\n        \"Dimension (\", dimension_val, \") must be in the range [\", -input_rank,\n        \", \", input_rank, \"), where \", input_rank,\n        \" is the number of dimensions in the input.\");\n  }\n\n  // Return the input shape without the dimension being reduced.\n  std::vector<DimensionHandle> dims;\n  for (int i = 0; i < input_rank; ++i) {\n    if (axis != i) {\n      dims.emplace_back(c->Dim(input_shape, i));\n    }\n  }\n  c->set_output(0, c->MakeShape(dims));\n  return Status::OK();\n}\n\n}  // namespace\n\nREGISTER_OP(\"ArgMax\")\n    .Input(\"input: T\")\n    .Input(\"dimension: Tidx\")\n    .Output(\"output: output_type\")\n    .Attr(\"T: {numbertype, bool}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"output_type: {int32, int64} = DT_INT64\")\n    .SetShapeFn(ArgOpShape);\n\nREGISTER_OP(\"ArgMin\")\n    .Input(\"input: T\")\n    .Input(\"dimension: Tidx\")\n    .Output(\"output: output_type\")\n    .Attr(\"T: {numbertype, bool}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"output_type: {int32, int64} = DT_INT64\")\n    .SetShapeFn(ArgOpShape);\n\nnamespace {\n\nStatus SegmentReductionShapeFn(InferenceContext* c) {\n  ShapeHandle data_shape;\n  ShapeHandle segment_ids_shape;\n  TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), 1, &data_shape));\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &segment_ids_shape));\n\n  ShapeHandle subshape;\n  TF_RETURN_IF_ERROR(c->Subshape(data_shape, 1, &subshape));\n\n  ShapeHandle out;\n  TF_RETURN_IF_ERROR(\n      c->Concatenate(c->Vector(InferenceContext::kUnknownDim), subshape, &out));\n  c->set_output(0, out);\n  return Status::OK();\n}\n\nStatus SparseSegmentReductionShapeFn(InferenceContext* c) {\n  ShapeHandle data_shape;\n  TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), 1, &data_shape));\n\n  ShapeHandle indices_shape;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &indices_shape));\n\n  ShapeHandle segment_ids_shape;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 1, &segment_ids_shape));\n\n  // indices and segment_ids should merge cleanly.\n  ShapeHandle unused;\n  TF_RETURN_IF_ERROR(c->Merge(indices_shape, segment_ids_shape, &unused));\n\n  ShapeHandle subshape;\n  TF_RETURN_IF_ERROR(c->Subshape(data_shape, 1, &subshape));\n\n  ShapeHandle out;\n  TF_RETURN_IF_ERROR(\n      c->Concatenate(c->Vector(InferenceContext::kUnknownDim), subshape, &out));\n  c->set_output(0, out);\n  return Status::OK();\n}\n\nStatus SparseSegmentReductionGradShapeFn(InferenceContext* c) {\n  ShapeHandle data_shape;\n  TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), 1, &data_shape));\n\n  ShapeHandle indices_shape;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &indices_shape));\n\n  // indices and segment_ids should merge cleanly.\n  ShapeHandle unused;\n  TF_RETURN_IF_ERROR(c->Merge(c->input(2), indices_shape, &unused));\n\n  // output_dim0 should be a scalar\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 0, &unused));\n\n  ShapeHandle subshape;\n  TF_RETURN_IF_ERROR(c->Subshape(data_shape, 1, &subshape));\n\n  const Tensor* dim0 = c->input_tensor(3);\n  ShapeHandle dim0_shape;\n  if (dim0 == nullptr) {\n    // We don't have the value at inference time, so the output\n    // shape is unknown.\n    dim0_shape = c->Vector(InferenceContext::kUnknownDim);\n  } else {\n    auto dim0_value = dim0->scalar<int32>()();\n    if (dim0_value < 0) {\n      return errors::InvalidArgument(\n          \"Cannot specify a negative value for output_dim0\");\n    }\n    dim0_shape = c->Vector(dim0_value);\n  }\n\n  ShapeHandle out;\n  TF_RETURN_IF_ERROR(c->Concatenate(dim0_shape, subshape, &out));\n  c->set_output(0, out);\n  return Status::OK();\n}\n\nStatus SparseSegmentReductionWithNumSegmentsShapeFn(InferenceContext* c) {\n  ShapeHandle data_shape;\n  TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), 1, &data_shape));\n\n  ShapeHandle indices_shape;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &indices_shape));\n\n  ShapeHandle segment_ids_shape;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 1, &segment_ids_shape));\n\n  ShapeHandle num_segments_shape;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 0, &num_segments_shape));\n\n  // indices and segment_ids should merge cleanly.\n  ShapeHandle unused;\n  TF_RETURN_IF_ERROR(c->Merge(indices_shape, segment_ids_shape, &unused));\n\n  ShapeHandle subshape;\n  TF_RETURN_IF_ERROR(c->Subshape(data_shape, 1, &subshape));\n\n  ShapeHandle out;\n  const Tensor* dim0 = c->input_tensor(3);\n  if (dim0 == nullptr) {\n    // We don't have the value at inference time, so the output\n    // shape is unknown.\n    TF_RETURN_IF_ERROR(c->Concatenate(c->Vector(InferenceContext::kUnknownDim),\n                                      subshape, &out));\n  } else {\n    auto dim0_value = dim0->scalar<int32>()();\n    if (dim0_value < 0) {\n      return errors::InvalidArgument(\n          \"Cannot specify a negative value for num_segments\");\n    }\n    TF_RETURN_IF_ERROR(c->Concatenate(c->Vector(dim0_value), subshape, &out));\n  }\n  c->set_output(0, out);\n  return Status::OK();\n}\n}  // namespace\n\nREGISTER_OP(\"SegmentSum\")\n    .Input(\"data: T\")\n    .Input(\"segment_ids: Tindices\")\n    .Output(\"output: T\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tindices: {int32,int64}\")\n    .SetShapeFn(SegmentReductionShapeFn);\n\nREGISTER_OP(\"SegmentMean\")\n    .Input(\"data: T\")\n    .Input(\"segment_ids: Tindices\")\n    .Output(\"output: T\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tindices: {int32,int64}\")\n    .SetShapeFn(SegmentReductionShapeFn);\n\nREGISTER_OP(\"SegmentProd\")\n    .Input(\"data: T\")\n    .Input(\"segment_ids: Tindices\")\n    .Output(\"output: T\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tindices: {int32,int64}\")\n    .SetShapeFn(SegmentReductionShapeFn);\n\nREGISTER_OP(\"SegmentMin\")\n    .Input(\"data: T\")\n    .Input(\"segment_ids: Tindices\")\n    .Output(\"output: T\")\n    .Attr(\"T: realnumbertype\")\n    .Attr(\"Tindices: {int32,int64}\")\n    .SetShapeFn(SegmentReductionShapeFn);\n\nREGISTER_OP(\"SegmentMax\")\n    .Input(\"data: T\")\n    .Input(\"segment_ids: Tindices\")\n    .Output(\"output: T\")\n    .Attr(\"T: realnumbertype\")\n    .Attr(\"Tindices: {int32,int64}\")\n    .SetShapeFn(SegmentReductionShapeFn);\n\nREGISTER_OP(\"UnsortedSegmentSum\")\n    .Input(\"data: T\")\n    .Input(\"segment_ids: Tindices\")\n    .Input(\"num_segments: Tnumsegments\")\n    .Output(\"output: T\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tindices: {int32,int64}\")\n    .Attr(\"Tnumsegments: {int32,int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::UnsortedSegmentReductionShapeFn);\n\nREGISTER_OP(\"UnsortedSegmentMax\")\n    .Input(\"data: T\")\n    .Input(\"segment_ids: Tindices\")\n    .Input(\"num_segments: Tnumsegments\")\n    .Output(\"output: T\")\n    .Attr(\"T: realnumbertype\")\n    .Attr(\"Tindices: {int32,int64}\")\n    .Attr(\"Tnumsegments: {int32,int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::UnsortedSegmentReductionShapeFn);\n\nREGISTER_OP(\"UnsortedSegmentMin\")\n    .Input(\"data: T\")\n    .Input(\"segment_ids: Tindices\")\n    .Input(\"num_segments: Tnumsegments\")\n    .Output(\"output: T\")\n    .Attr(\"T: realnumbertype\")\n    .Attr(\"Tindices: {int32,int64}\")\n    .Attr(\"Tnumsegments: {int32,int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::UnsortedSegmentReductionShapeFn);\n\nREGISTER_OP(\"UnsortedSegmentProd\")\n    .Input(\"data: T\")\n    .Input(\"segment_ids: Tindices\")\n    .Input(\"num_segments: Tnumsegments\")\n    .Output(\"output: T\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tindices: {int32,int64}\")\n    .Attr(\"Tnumsegments: {int32,int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::UnsortedSegmentReductionShapeFn);\n\nREGISTER_OP(\"SparseSegmentSum\")\n    .Input(\"data: T\")\n    .Input(\"indices: Tidx\")\n    .Input(\"segment_ids: Tsegmentids\")\n    .Output(\"output: T\")\n    .Attr(\"T: realnumbertype\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"Tsegmentids: {int32, int64} = DT_INT32\")\n    .SetShapeFn(SparseSegmentReductionShapeFn);\n\nREGISTER_OP(\"SparseSegmentSumWithNumSegments\")\n    .Input(\"data: T\")\n    .Input(\"indices: Tidx\")\n    .Input(\"segment_ids: Tsegmentids\")\n    .Input(\"num_segments: Tnumsegments\")\n    .Output(\"output: T\")\n    .Attr(\"T: realnumbertype\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"Tnumsegments: {int32,int64} = DT_INT32\")\n    .Attr(\"Tsegmentids: {int32, int64} = DT_INT32\")\n    .SetShapeFn(SparseSegmentReductionWithNumSegmentsShapeFn);\n\nREGISTER_OP(\"SparseSegmentSumGrad\")\n    .Input(\"grad: T\")\n    .Input(\"indices: Tidx\")\n    .Input(\"segment_ids: Tsegmentids\")\n    .Input(\"output_dim0: int32\")\n    .Output(\"output: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"Tsegmentids: {int32, int64} = DT_INT32\")\n    .SetShapeFn(SparseSegmentReductionGradShapeFn);\n\nREGISTER_OP(\"SparseSegmentMean\")\n    .Input(\"data: T\")\n    .Input(\"indices: Tidx\")\n    .Input(\"segment_ids: Tsegmentids\")\n    .Output(\"output: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"Tsegmentids: {int32, int64} = DT_INT32\")\n    .SetShapeFn(SparseSegmentReductionShapeFn);\n\nREGISTER_OP(\"SparseSegmentMeanWithNumSegments\")\n    .Input(\"data: T\")\n    .Input(\"indices: Tidx\")\n    .Input(\"segment_ids: Tsegmentids\")\n    .Input(\"num_segments: Tnumsegments\")\n    .Output(\"output: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"Tnumsegments: {int32,int64} = DT_INT32\")\n    .Attr(\"Tsegmentids: {int32, int64} = DT_INT32\")\n    .SetShapeFn(SparseSegmentReductionWithNumSegmentsShapeFn);\n\nREGISTER_OP(\"SparseSegmentMeanGrad\")\n    .Input(\"grad: T\")\n    .Input(\"indices: Tidx\")\n    .Input(\"segment_ids: Tsegmentids\")\n    .Input(\"output_dim0: int32\")\n    .Output(\"output: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"Tsegmentids: {int32, int64} = DT_INT32\")\n    .SetShapeFn(SparseSegmentReductionGradShapeFn);\n\nREGISTER_OP(\"SparseSegmentSqrtN\")\n    .Input(\"data: T\")\n    .Input(\"indices: Tidx\")\n    .Input(\"segment_ids: Tsegmentids\")\n    .Output(\"output: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"Tsegmentids: {int32, int64} = DT_INT32\")\n    .SetShapeFn(SparseSegmentReductionShapeFn);\n\nREGISTER_OP(\"SparseSegmentSqrtNWithNumSegments\")\n    .Input(\"data: T\")\n    .Input(\"indices: Tidx\")\n    .Input(\"segment_ids: Tsegmentids\")\n    .Input(\"num_segments: Tnumsegments\")\n    .Output(\"output: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"Tnumsegments: {int32,int64} = DT_INT32\")\n    .Attr(\"Tsegmentids: {int32, int64} = DT_INT32\")\n    .SetShapeFn(SparseSegmentReductionWithNumSegmentsShapeFn);\n\nREGISTER_OP(\"SparseSegmentSqrtNGrad\")\n    .Input(\"grad: T\")\n    .Input(\"indices: Tidx\")\n    .Input(\"segment_ids: Tsegmentids\")\n    .Input(\"output_dim0: int32\")\n    .Output(\"output: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"Tsegmentids: {int32, int64} = DT_INT32\")\n    .SetShapeFn(SparseSegmentReductionGradShapeFn);\n\nREGISTER_OP(\"All\")\n    .Input(\"input: bool\")\n    .Input(\"reduction_indices: Tidx\")\n    .Output(\"output: bool\")\n    .Attr(\"keep_dims: bool = false\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::ReductionShape);\n\nREGISTER_OP(\"Any\")\n    .Input(\"input: bool\")\n    .Input(\"reduction_indices: Tidx\")\n    .Attr(\"keep_dims: bool = false\")\n    .Output(\"output: bool\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::ReductionShape);\n\n// --------------------------------------------------------------------------\n\nnamespace {\n\ntemplate <typename T>\nStatus RangeSize(const Tensor* start_t, const Tensor* limit_t,\n                 const Tensor* delta_t, InferenceContext* const c) {\n  T start = start_t->scalar<T>()();\n  T limit = limit_t->scalar<T>()();\n  T delta = delta_t->scalar<T>()();\n  if (start > limit && delta > T(0)) {\n    return errors::InvalidArgument(\n        \"Requires start <= limit when delta > 0: \", start, \"/\", limit);\n  }\n  if (start < limit && delta < T(0)) {\n    return errors::InvalidArgument(\n        \"Requires start >= limit when delta < 0: \", start, \"/\", limit);\n  }\n  if (delta == T(0)) {\n    return errors::InvalidArgument(\"Requires delta != 0\");\n  }\n\n  auto size = (std::is_integral<T>::value\n                   ? ((Eigen::numext::abs(limit - start) +\n                       Eigen::numext::abs(delta) - T(1)) /\n                      Eigen::numext::abs(delta))\n                   : (Eigen::numext::ceil(\n                         Eigen::numext::abs((limit - start) / delta))));\n  c->set_output(0, c->Vector(static_cast<int64_t>(size)));\n  return Status::OK();\n}\n\n}  // namespace\n\nREGISTER_OP(\"Range\")\n    .Input(\"start: Tidx\")\n    .Input(\"limit: Tidx\")\n    .Input(\"delta: Tidx\")\n    .Output(\"output: Tidx\")\n    .Attr(\n        \"Tidx: \"\n        \"{bfloat16, half, float, double, int8, int16, int32, int64, uint32} = \"\n        \"DT_INT32\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle unused;\n      TF_RETURN_WITH_CONTEXT_IF_ERROR(c->WithRank(c->input(0), 0, &unused),\n                                      \" for 'start'\");\n      TF_RETURN_WITH_CONTEXT_IF_ERROR(c->WithRank(c->input(1), 0, &unused),\n                                      \" for 'limit'\");\n      TF_RETURN_WITH_CONTEXT_IF_ERROR(c->WithRank(c->input(2), 0, &unused),\n                                      \" for 'delta'\");\n      const Tensor* start_t = c->input_tensor(0);\n      const Tensor* limit_t = c->input_tensor(1);\n      const Tensor* delta_t = c->input_tensor(2);\n      DataType dtype;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"Tidx\", &dtype));\n      if (start_t == nullptr || limit_t == nullptr || delta_t == nullptr) {\n        c->set_output(0, c->Vector(InferenceContext::kUnknownDim));\n        return Status::OK();\n      }\n      if (dtype == DT_INT32) {\n        return RangeSize<int32>(start_t, limit_t, delta_t, c);\n      } else if (dtype == DT_INT16) {\n        return RangeSize<int16>(start_t, limit_t, delta_t, c);\n      } else if (dtype == DT_INT8) {\n        return RangeSize<int8>(start_t, limit_t, delta_t, c);\n      } else if (dtype == DT_INT64) {\n        return RangeSize<int64_t>(start_t, limit_t, delta_t, c);\n      } else if (dtype == DT_UINT32) {\n        return RangeSize<uint32>(start_t, limit_t, delta_t, c);\n      } else if (dtype == DT_FLOAT) {\n        return RangeSize<float>(start_t, limit_t, delta_t, c);\n      } else if (dtype == DT_DOUBLE) {\n        return RangeSize<double>(start_t, limit_t, delta_t, c);\n      } else if (dtype == DT_BFLOAT16) {\n        return RangeSize<bfloat16>(start_t, limit_t, delta_t, c);\n      } else {\n        return errors::InvalidArgument(\"Unsupported dtype\", dtype);\n      }\n      return Status::OK();\n    });\n\nREGISTER_OP(\"LinSpace\")\n    .Input(\"start: T\")\n    .Input(\"stop: T\")\n    .Input(\"num: Tidx\")\n    .Output(\"output: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle unused;\n      TF_RETURN_WITH_CONTEXT_IF_ERROR(c->WithRank(c->input(0), 0, &unused),\n                                      \" for 'start'\");\n      TF_RETURN_WITH_CONTEXT_IF_ERROR(c->WithRank(c->input(1), 0, &unused),\n                                      \" for 'stop'\");\n      TF_RETURN_WITH_CONTEXT_IF_ERROR(c->WithRank(c->input(2), 0, &unused),\n                                      \" for 'num'\");\n      const Tensor* num_t = c->input_tensor(2);\n      if (num_t == nullptr) {\n        c->set_output(0, c->Vector(InferenceContext::kUnknownDim));\n        return Status::OK();\n      }\n\n      int64_t num;\n      if (num_t->dtype() == DT_INT32) {\n        num = num_t->scalar<int32>()();\n      } else {\n        num = num_t->scalar<int64_t>()();\n      }\n      if (num <= 0) return errors::InvalidArgument(\"Requires num > 0: \", num);\n      c->set_output(0, c->Vector(num));\n      return Status::OK();\n    });\n\nREGISTER_OP(\"Complex\")\n    .Input(\"real: T\")\n    .Input(\"imag: T\")\n    .Output(\"out: Tout\")\n    .Attr(\"T: {float, double} = DT_FLOAT\")\n    .Attr(\"Tout: {complex64, complex128} = DT_COMPLEX64\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Real\")\n    .Input(\"input: T\")\n    .Output(\"output: Tout\")\n    .Attr(\"T: {complex64, complex128} = DT_COMPLEX64\")\n    .Attr(\"Tout: {float, double} = DT_FLOAT\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"Imag\")\n    .Input(\"input: T\")\n    .Output(\"output: Tout\")\n    .Attr(\"T: {complex64, complex128} = DT_COMPLEX64\")\n    .Attr(\"Tout: {float, double} = DT_FLOAT\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"Angle\")\n    .Input(\"input: T\")\n    .Output(\"output: Tout\")\n    .Attr(\"T: {complex64, complex128} = DT_COMPLEX64\")\n    .Attr(\"Tout: {float, double} = DT_FLOAT\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"Conj\")\n    .Input(\"input: T\")\n    .Output(\"output: T\")\n    .Attr(\"T: {complex64, complex128, variant} = DT_COMPLEX64\")\n    .SetShapeFn([](InferenceContext* c) {\n      c->set_output(0, c->input(0));\n      auto* handle_data = c->input_handle_shapes_and_types(0);\n      if (handle_data != nullptr) {\n        c->set_output_handle_shapes_and_types(0, *handle_data);\n      }\n      return Status::OK();\n    });\n\n// --------------------------------------------------------------------------\n\nREGISTER_OP(\"Cross\")\n    .Input(\"a: T\")\n    .Input(\"b: T\")\n    .Output(\"product: T\")\n    .Attr(\"T: realnumbertype\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle a_shape;\n      ShapeHandle b_shape;\n      // * Input rank >= 1.\n      TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), 1, &a_shape));\n      TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(1), 1, &b_shape));\n\n      // * Both inputs have the same shape.\n      TF_RETURN_IF_ERROR(c->Merge(a_shape, b_shape, &a_shape));\n\n      // * input_shape[-1] == 3.\n      if (c->RankKnown(a_shape)) {\n        int rank = c->Rank(a_shape);\n        auto dim = c->Dim(a_shape, rank - 1);\n        TF_RETURN_IF_ERROR(c->WithValue(dim, 3, &dim));\n      }\n      c->set_output(0, a_shape);\n      return Status::OK();\n    });\n\n// --------------------------------------------------------------------------\n\nREGISTER_OP(\"HistogramFixedWidth\")\n    .Input(\"values: T\")\n    .Input(\"value_range: T\")\n    .Input(\"nbins: int32\")\n    .Output(\"out: dtype\")\n    .Attr(\"T: {int32, int64, float32, float64}\")\n    .Attr(\"dtype: {int32, int64} = DT_INT32\")\n    .SetShapeFn([](InferenceContext* c) {\n      // value_range should be a vector.\n      ShapeHandle value_range_shape;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &value_range_shape));\n      // value_range should have two elements.\n      DimensionHandle unused;\n      TF_RETURN_IF_ERROR(\n          c->WithValue(c->Dim(value_range_shape, 0), 2, &unused));\n      // nbins should be a scalar.\n      ShapeHandle nbins_shape;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 0, &nbins_shape));\n\n      // If nbins is available, set the shape from nbins.\n      const Tensor* nbins_input = c->input_tensor(2);\n      if (nbins_input != nullptr) {\n        int64_t nbins;\n        TF_RETURN_IF_ERROR(c->GetScalarFromTensor(nbins_input, &nbins));\n        // nbins has to be positive.\n        if (nbins <= 0) {\n          return errors::InvalidArgument(\"Requires nbins > 0: \", nbins);\n        }\n        c->set_output(0, c->Vector(nbins));\n      } else {\n        c->set_output(0, c->UnknownShapeOfRank(1));\n      }\n      return Status::OK();\n    });\n\nREGISTER_OP(\"Bincount\")\n    .Input(\"arr: int32\")\n    .Input(\"size: int32\")\n    .Input(\"weights: T\")\n    .Attr(\"T: {int32, int64, float32, float64}\")\n    .Output(\"bins: T\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle unused;\n      // The input `size` must be a scalar.\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 0, &unused));\n\n      const Tensor* size_tensor = c->input_tensor(1);\n      if (size_tensor == nullptr) {\n        // Return unknown shape if size is not known.\n        c->set_output(0, c->UnknownShapeOfRank(1));\n        return Status::OK();\n      }\n\n      if (size_tensor->dims() != 0) {\n        return errors::InvalidArgument(\"Shape must be rank 0 but is rank \",\n                                       size_tensor->dims());\n      }\n\n      // Return `[size]` shape if size is known.\n      int32_t size_val = size_tensor->scalar<int32>()();\n      if (size_val < 0) {\n        return errors::InvalidArgument(\"size (\", size_val,\n                                       \") must be non-negative\");\n      }\n      c->set_output(0, c->MakeShape({size_val}));\n      return Status::OK();\n    });\n\nREGISTER_OP(\"DenseBincount\")\n    .Input(\"input: Tidx\")\n    .Input(\"size: Tidx\")\n    .Input(\"weights: T\")\n    .Attr(\"Tidx: {int32, int64}\")\n    .Attr(\"T: {int32, int64, float32, float64}\")\n    .Attr(\"binary_output: bool = false\")\n    .Output(\"output: T\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle unused;\n      // The input `input` must be at most matrix.\n      TF_RETURN_IF_ERROR(c->WithRankAtMost(c->input(0), 2, &unused));\n      // The input `size` must be a scalar.\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 0, &unused));\n\n      const Tensor* size_tensor = c->input_tensor(1);\n      if (size_tensor == nullptr) {\n        // Return unknown shape if size is not known.\n        c->set_output(0, c->UnknownShape());\n        return Status::OK();\n      }\n      if (size_tensor->dims() != 0) {\n        return errors::InvalidArgument(\"Shape must be rank 0 but is rank \",\n                                       size_tensor->dims());\n      }\n\n      int64_t size_val;\n      DataType dtype;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"Tidx\", &dtype));\n      if (dtype == DT_INT32) {\n        size_val = static_cast<int64_t>(size_tensor->scalar<int32>()());\n      } else if (dtype == DT_INT64) {\n        size_val = size_tensor->scalar<int64_t>()();\n      } else {\n        return errors::InvalidArgument(\"size dtype must be int32 or int64\");\n      }\n      // Return `[size]` shape if size is known.\n      if (size_val < 0) {\n        return errors::InvalidArgument(\"size (\", size_val,\n                                       \") must be non-negative\");\n      }\n      if (c->Rank(c->input(0)) == 1) {\n        c->set_output(0, c->MakeShape({size_val}));\n      } else if (c->Rank(c->input(0)) == 2) {\n        c->set_output(0, c->MakeShape({c->Dim(c->input(0), 0), size_val}));\n      }\n      return Status::OK();\n    });\n\nREGISTER_OP(\"SparseBincount\")\n    .Input(\"indices: int64\")\n    .Input(\"values: Tidx\")\n    .Input(\"dense_shape: int64\")\n    .Input(\"size: Tidx\")\n    .Input(\"weights: T\")\n    .Attr(\"Tidx: {int32, int64}\")\n    .Attr(\"T: {int32, int64, float32, float64}\")\n    .Attr(\"binary_output: bool = false\")\n    .Output(\"output: T\")\n    .SetShapeFn([](InferenceContext* c) {\n      const Tensor* size_tensor = c->input_tensor(3);\n      if (size_tensor == nullptr) {\n        // Return unknown shape if size is not known.\n        c->set_output(0, c->UnknownShape());\n        return Status::OK();\n      }\n      if (size_tensor->dims() != 0) {\n        return errors::InvalidArgument(\"Shape must be rank 0 but is rank \",\n                                       size_tensor->dims());\n      }\n\n      int64_t size_val;\n      DataType dtype;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"Tidx\", &dtype));\n      if (dtype == DT_INT32) {\n        size_val = static_cast<int64_t>(size_tensor->scalar<int32>()());\n      } else if (dtype == DT_INT64) {\n        size_val = size_tensor->scalar<int64_t>()();\n      } else {\n        return errors::InvalidArgument(\"size dtype must be int32 or int64\");\n      }\n      // Return `[size]` shape if size is known.\n      if (size_val < 0) {\n        return errors::InvalidArgument(\"size (\", size_val,\n                                       \") must be non-negative\");\n      }\n\n      const Tensor* shape_tensor = c->input_tensor(2);\n      if (shape_tensor == nullptr) {\n        // Return unknown shape if size is not known.\n        c->set_output(0, c->UnknownShape());\n        return Status::OK();\n      }\n      if (shape_tensor->NumElements() == 1) {\n        c->set_output(0, c->MakeShape({size_val}));\n      } else if (shape_tensor->NumElements() == 2) {\n        c->set_output(\n            0, c->MakeShape({shape_tensor->flat<int64_t>()(0), size_val}));\n      } else {\n        return errors::InvalidArgument(\"Input must be less than rank 2\");\n      }\n      return Status::OK();\n    });\n\nREGISTER_OP(\"RaggedBincount\")\n    .Input(\"splits: int64\")\n    .Input(\"values: Tidx\")\n    .Input(\"size: Tidx\")\n    .Input(\"weights: T\")\n    .Attr(\"Tidx: {int32, int64}\")\n    .Attr(\"T: {int32, int64, float32, float64}\")\n    .Attr(\"binary_output: bool = false\")\n    .Output(\"output: T\")\n    .SetShapeFn([](InferenceContext* c) {\n      c->set_output(0, c->UnknownShape());\n      return Status::OK();\n    });\n\nREGISTER_OP(\"Cumsum\")\n    .Input(\"x: T\")\n    .Input(\"axis: Tidx\")\n    .Attr(\"exclusive: bool = false\")\n    .Attr(\"reverse: bool = false\")\n    .Output(\"out: T\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"Cumprod\")\n    .Input(\"x: T\")\n    .Input(\"axis: Tidx\")\n    .Attr(\"exclusive: bool = false\")\n    .Attr(\"reverse: bool = false\")\n    .Output(\"out: T\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"CumulativeLogsumexp\")\n    .Input(\"x : T\")\n    .Input(\"axis: Tidx\")\n    .Attr(\"exclusive: bool = false\")\n    .Attr(\"reverse: bool = false\")\n    .Output(\"out: T\")\n    .Attr(\"T: {float16, float32, float64}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"QuantizedMatMul\")\n    .Input(\"a: T1\")\n    .Input(\"b: T2\")\n    .Input(\"min_a: float\")\n    .Input(\"max_a: float\")\n    .Input(\"min_b: float\")\n    .Input(\"max_b: float\")\n    .Output(\"out: Toutput\")\n    .Output(\"min_out: float\")\n    .Output(\"max_out: float\")\n    .Attr(\"T1: quantizedtype\")\n    .Attr(\"T2: quantizedtype\")\n    .Attr(\"Toutput: quantizedtype = DT_QINT32\")\n    .Attr(\"transpose_a: bool = false\")\n    .Attr(\"transpose_b: bool = false\")\n    .Attr(\"Tactivation: quantizedtype = DT_QUINT8\")\n    .SetShapeFn([](InferenceContext* c) {\n      TF_RETURN_IF_ERROR(shape_inference::MatMulShape(c));\n      ShapeHandle unused;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(4), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(5), 0, &unused));\n\n      c->set_output(1, c->Scalar());\n      c->set_output(2, c->Scalar());\n      return Status::OK();\n    });\n\n// Note: This op is not commutative w.r.t. to all its inputs.\nREGISTER_OP(\"QuantizedMul\")\n    .Input(\"x: T1\")\n    .Input(\"y: T2\")\n    .Input(\"min_x: float\")\n    .Input(\"max_x: float\")\n    .Input(\"min_y: float\")\n    .Input(\"max_y: float\")\n    .Output(\"z: Toutput\")\n    .Output(\"min_z: float\")\n    .Output(\"max_z: float\")\n    .Attr(\"T1: quantizedtype\")\n    .Attr(\"T2: quantizedtype\")\n    .Attr(\"Toutput: quantizedtype = DT_QINT32\")\n    .SetShapeFn([](InferenceContext* c) {\n      TF_RETURN_IF_ERROR(shape_inference::BroadcastBinaryOpShapeFn(c));\n      c->set_output(1, c->Scalar());\n      c->set_output(2, c->Scalar());\n      return Status::OK();\n    });\n\n// Note: This op is not commutative w.r.t. to all its inputs.\nREGISTER_OP(\"QuantizedAdd\")\n    .Input(\"x: T1\")\n    .Input(\"y: T2\")\n    .Input(\"min_x: float\")\n    .Input(\"max_x: float\")\n    .Input(\"min_y: float\")\n    .Input(\"max_y: float\")\n    .Output(\"z: Toutput\")\n    .Output(\"min_z: float\")\n    .Output(\"max_z: float\")\n    .Attr(\"T1: quantizedtype\")\n    .Attr(\"T2: quantizedtype\")\n    .Attr(\"Toutput: quantizedtype = DT_QINT32\")\n    .SetShapeFn([](InferenceContext* c) {\n      TF_RETURN_IF_ERROR(shape_inference::BroadcastBinaryOpShapeFn(c));\n      // min_x, max_x, min_y, max_y should be scalar.\n      ShapeHandle unused;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(4), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(5), 0, &unused));\n\n      c->set_output(1, c->Scalar());\n      c->set_output(2, c->Scalar());\n      return Status::OK();\n    });\n\nREGISTER_OP(\"QuantizeDownAndShrinkRange\")\n    .Input(\"input: Tinput\")\n    .Input(\"input_min: float\")\n    .Input(\"input_max: float\")\n    .Output(\"output: out_type\")\n    .Output(\"output_min: float\")\n    .Output(\"output_max: float\")\n    .Attr(\"Tinput: quantizedtype\")\n    .Attr(\"out_type: quantizedtype\")\n    .SetShapeFn([](InferenceContext* c) {\n      TF_RETURN_IF_ERROR(shape_inference::UnchangedShape(c));\n      ShapeHandle unused;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 0, &unused));\n      c->set_output(1, c->Scalar());\n      c->set_output(2, c->Scalar());\n      return Status::OK();\n    });\n\nREGISTER_OP(\"Requantize\")\n    .Input(\"input: Tinput\")\n    .Input(\"input_min: float\")\n    .Input(\"input_max: float\")\n    .Input(\"requested_output_min: float\")\n    .Input(\"requested_output_max: float\")\n    .Output(\"output: out_type\")\n    .Output(\"output_min: float\")\n    .Output(\"output_max: float\")\n    .Attr(\"Tinput: quantizedtype\")\n    .Attr(\"out_type: quantizedtype\")\n    .SetShapeFn([](InferenceContext* c) {\n      TF_RETURN_IF_ERROR(shape_inference::UnchangedShape(c));\n      ShapeHandle unused;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(4), 0, &unused));\n      c->set_output(1, c->Scalar());\n      c->set_output(2, c->Scalar());\n      return Status::OK();\n    });\n\nREGISTER_OP(\"RequantizationRange\")\n    .Input(\"input: Tinput\")\n    .Input(\"input_min: float\")\n    .Input(\"input_max: float\")\n    .Output(\"output_min: float\")\n    .Output(\"output_max: float\")\n    .Attr(\"Tinput: quantizedtype\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle unused;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 0, &unused));\n      c->set_output(0, c->Scalar());\n      c->set_output(1, c->Scalar());\n      return Status::OK();\n    });\n\n// --------------------------------------------------------------------------\n\nREGISTER_OP(\"Bucketize\")\n    .Input(\"input: T\")\n    .Output(\"output: int32\")\n    .Attr(\"T: {int32, int64, float, double}\")\n    .Attr(\"boundaries: list(float)\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"ClipByValue\")\n    .Input(\"t: T\")\n    .Input(\"clip_value_min: T\")\n    .Input(\"clip_value_max: T\")\n    .Output(\"output: T\")\n    .Attr(\"T: numbertype\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\n#ifdef INTEL_MKL\n// Note: This op is not commutative w.r.t. to all its inputs.\nREGISTER_OP(\"_MklAddN\")\n    .Input(\"inputs: N * T\")\n    .Input(\"mkl_input: N * uint8\")\n    .Output(\"sum: T\")\n    .Output(\"mkl_sum: uint8\")\n    .Attr(\"N: int >= 1\")\n    .Attr(\"T: numbertype\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle cur = c->input(c->num_inputs() - 1);\n      for (int i = c->num_inputs() - 2; i >= 0; --i) {\n        TF_RETURN_WITH_CONTEXT_IF_ERROR(c->Merge(c->input(i), cur, &cur),\n                                        \"From merging shape \", i,\n                                        \" with other shapes.\");\n      }\n      c->set_output(0, cur);\n      return Status::OK();\n    })\n    .Doc(R\"doc(\nAdd two input tensors element wise using mkl kernel sum.\ninputs: Must all be the same size and shape.\n)doc\");\n\n#endif  // INTEL_MKL\n\nREGISTER_OP(\"RequantizePerChannel\")\n    .Input(\"input: T\")\n    .Input(\"input_min: float\")\n    .Input(\"input_max: float\")\n    .Input(\"requested_output_min: float\")\n    .Input(\"requested_output_max: float\")\n    .Output(\"output: out_type\")\n    .Output(\"output_min: float\")\n    .Output(\"output_max: float\")\n    .Attr(\"T: quantizedtype = DT_QINT32\")\n    .Attr(\"out_type: quantizedtype = DT_QUINT8\")\n    .SetShapeFn([](InferenceContext* c) {\n      TF_RETURN_IF_ERROR(shape_inference::UnchangedShape(c));\n      ShapeHandle unused;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 1, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(4), 0, &unused));\n      c->set_output(1, c->Scalar());\n      c->set_output(2, c->Scalar());\n      return Status::OK();\n    });\nREGISTER_OP(\"RequantizationRangePerChannel\")\n    .Input(\"input: T\")\n    .Input(\"input_min: float\")\n    .Input(\"input_max: float\")\n    .Output(\"output_min: float\")\n    .Output(\"output_max: float\")\n    .Attr(\"T: quantizedtype = DT_QINT32\")\n    .Attr(\"clip_value_max: float\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle unused;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 1, &unused));\n      c->set_output(0, c->Scalar());\n      c->set_output(1, c->Scalar());\n      return Status::OK();\n    });\n\nREGISTER_OP(\"NextAfter\")\n    .Attr(\"T: {float64, float32} = DT_FLOAT\")\n    .Input(\"x1: T\")\n    .Input(\"x2: T\")\n    .Output(\"output: T\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"SobolSample\")\n    .Input(\"dim: int32\")\n    .Input(\"num_results: int32\")\n    .Input(\"skip: int32\")\n    .Attr(\"dtype: {float, double} = DT_FLOAT\")\n    .Output(\"samples: dtype\")\n    .SetShapeFn([](shape_inference::InferenceContext* c) {\n      ShapeHandle unused;\n\n      // inputs must be scalars\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 0, &unused));\n\n      const Tensor* dim_t = c->input_tensor(0);\n      const Tensor* num_results_t = c->input_tensor(1);\n\n      int32_t dim = dim_t == nullptr ? InferenceContext::kUnknownDim\n                                     : dim_t->scalar<int32>()();\n\n      int32_t num_results = num_results_t == nullptr\n                                ? InferenceContext::kUnknownDim\n                                : num_results_t->scalar<int32>()();\n\n      c->set_output(0, c->Matrix(num_results, dim));\n      return Status::OK();\n    });\n\n}  // namespace tensorflow\n", "# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for tensorflow.ops.ops.\"\"\"\n\nimport numpy as np\n\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import errors_impl\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import random_seed\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.layers import convolutional\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import init_ops\nfrom tensorflow.python.ops import linalg_ops\nfrom tensorflow.python.ops import math_ops\nfrom tensorflow.python.ops import partitioned_variables\nfrom tensorflow.python.ops import random_ops\nfrom tensorflow.python.ops import variable_scope\nfrom tensorflow.python.ops import variables\nfrom tensorflow.python.platform import test\n\n\n# Returns true iff the two initializers produce the same tensor to\n# within a tiny tolerance.\ndef identicaltest(tc, init1, init2, shape=None):\n  \"\"\"Tests if two initializations are identical to within tiny tolerances.\n\n  Args:\n    tc: An instance of TensorFlowTestCase.\n    init1: An Initializer that generates a tensor of a given shape\n    init2: An Initializer that generates a tensor of a given shape\n    shape: Shape of the tensor to initialize or `None` to use a vector of length\n      100.\n\n  Returns:\n    True or False as determined by test.\n  \"\"\"\n  if shape is None:\n    shape = [100]\n  with tc.test_session(graph=ops.Graph()):\n    t1 = init1(shape).eval()\n  with tc.test_session(graph=ops.Graph()):\n    t2 = init2(shape).eval()\n  return np.allclose(t1, t2, rtol=1e-15, atol=1e-15)\n\n\ndef duplicated_initializer(tc, init, graph_seed, shape=None):\n  \"\"\"Tests duplicated random initializer within the same graph.\n\n  This test generates two random kernels from the same initializer to the same\n  graph, and checks if the results are close enough. Even given the same global,\n  seed, two different instances of random kernels should generate different\n  results.\n\n  Args:\n    tc: An instance of TensorFlowTestCase.\n    init: An Initializer that generates a tensor of a given shape\n    graph_seed: A graph-level seed to use.\n    shape: Shape of the tensor to initialize or `None` to use a vector of length\n      100.\n\n  Returns:\n    True or False as determined by test.\n  \"\"\"\n  if shape is None:\n    shape = [100]\n  with tc.test_session(graph=ops.Graph()):\n    random_seed.set_random_seed(graph_seed)\n    t1 = init(shape).eval()\n    t2 = init(shape).eval()\n    return np.allclose(t1, t2, rtol=1e-15, atol=1e-15)\n\n\ndef _init_sampler(tc, init, num):\n  \"\"\"Returns a func to generate a random tensor of shape [num].\n\n  Args:\n    tc: An instance of TensorFlowTestCase.\n    init: An Initializer that generates a tensor of a given shape\n    num: Size of 1D tensor to create.\n\n  Returns:\n    Function to generate a random tensor.\n  \"\"\"\n\n  def func():\n    with tc.test_session():\n      return init([num]).eval()\n\n  return func\n\n\nclass ConstantInitializersTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testZerosInitializer(self):\n    with self.session():\n      shape = [2, 3]\n      x = variable_scope.get_variable(\n          \"x\", shape=shape, initializer=init_ops.zeros_initializer())\n      self.evaluate(x.initializer)\n      self.assertAllEqual(x, np.zeros(shape))\n\n  @test_util.run_deprecated_v1\n  def testOnesInitializer(self):\n    with self.session():\n      shape = [2, 3]\n      x = variable_scope.get_variable(\n          \"x\", shape=shape, initializer=init_ops.ones_initializer())\n      self.evaluate(x.initializer)\n      self.assertAllEqual(x, np.ones(shape))\n\n  @test_util.run_deprecated_v1\n  def testConstantZeroInitializer(self):\n    with self.session():\n      shape = [2, 3]\n      x = variable_scope.get_variable(\n          \"x\", shape=shape, initializer=init_ops.constant_initializer(0.0))\n      self.evaluate(x.initializer)\n      self.assertAllEqual(x, np.zeros(shape))\n\n  @test_util.run_deprecated_v1\n  def testConstantOneInitializer(self):\n    with self.session():\n      shape = [2, 3]\n      x = variable_scope.get_variable(\n          \"x\", shape=shape, initializer=init_ops.constant_initializer(1.0))\n      self.evaluate(x.initializer)\n      self.assertAllEqual(x, np.ones(shape))\n\n  @test_util.run_deprecated_v1\n  def testConstantIntInitializer(self):\n    with self.session():\n      shape = [2, 3]\n      x = variable_scope.get_variable(\n          \"x\",\n          shape=shape,\n          dtype=dtypes.int32,\n          initializer=init_ops.constant_initializer(7))\n      self.evaluate(x.initializer)\n      self.assertEqual(x.dtype.base_dtype, dtypes.int32)\n      self.assertAllEqual(x, 7 * np.ones(shape, dtype=np.int32))\n\n  @test_util.run_deprecated_v1\n  def testConstantTupleInitializer(self):\n    with self.session():\n      shape = [3]\n      x = variable_scope.get_variable(\n          \"x\",\n          shape=shape,\n          dtype=dtypes.int32,\n          initializer=init_ops.constant_initializer((10, 20, 30)))\n      self.evaluate(x.initializer)\n      self.assertEqual(x.dtype.base_dtype, dtypes.int32)\n      self.assertAllEqual(x, [10, 20, 30])\n\n  def _testNDimConstantInitializer(self, name, value, shape, expected):\n    with self.cached_session():\n      init = init_ops.constant_initializer(value, dtype=dtypes.int32)\n      x = variable_scope.get_variable(name, shape=shape, initializer=init)\n      self.evaluate(x.initializer)\n\n      actual = array_ops.reshape(x, [-1]).eval()\n      self.assertEqual(len(actual), len(expected))\n      for a, e in zip(actual, expected):\n        self.assertEqual(a, e)\n\n  @test_util.run_deprecated_v1\n  def testNDimConstantInitializer(self):\n    value = [0, 1, 2, 3, 4, 5]\n    shape = [2, 3]\n    expected = list(value)\n\n    self._testNDimConstantInitializer(\"list\", value, shape, expected)\n    self._testNDimConstantInitializer(\"ndarray\", np.asarray(value), shape,\n                                      expected)\n    self._testNDimConstantInitializer(\"2D-ndarray\",\n                                      np.asarray(value).reshape(tuple(shape)),\n                                      shape, expected)\n\n  def _testNDimConstantInitializerLessValues(self, name, value, shape,\n                                             expected):\n    with self.cached_session():\n      init = init_ops.constant_initializer(value, dtype=dtypes.int32)\n      x = variable_scope.get_variable(name, shape=shape, initializer=init)\n      self.evaluate(x.initializer)\n\n      actual = array_ops.reshape(x, [-1]).eval()\n      self.assertGreater(len(actual), len(expected))\n      for i in range(len(actual)):\n        a = actual[i]\n        e = expected[i] if i < len(expected) else expected[-1]\n        self.assertEqual(a, e)\n\n  @test_util.run_deprecated_v1\n  def testNDimConstantInitializerLessValues(self):\n    value = [0, 1, 2, 3, 4, 5]\n    shape = [2, 4]\n    expected = list(value)\n\n    self._testNDimConstantInitializerLessValues(\"list\", value, shape, expected)\n    self._testNDimConstantInitializerLessValues(\"ndarray\", np.asarray(value),\n                                                shape, expected)\n    self._testNDimConstantInitializerLessValues(\n        \"2D-ndarray\",\n        np.asarray(value).reshape(tuple([2, 3])), shape, expected)\n\n  def _testNDimConstantInitializerMoreValues(self, value, shape):\n    ops.reset_default_graph()\n    with self.cached_session():\n      init = init_ops.constant_initializer(value, dtype=dtypes.int32)\n      self.assertRaises(\n          ValueError,\n          variable_scope.get_variable,\n          \"x\",\n          shape=shape,\n          initializer=init)\n\n  @test_util.run_deprecated_v1\n  def testNDimConstantInitializerMoreValues(self):\n    value = [0, 1, 2, 3, 4, 5, 6, 7]\n    shape = [2, 3]\n    self._testNDimConstantInitializerMoreValues(value, shape)\n    self._testNDimConstantInitializerMoreValues(np.asarray(value), shape)\n    self._testNDimConstantInitializerMoreValues(\n        np.asarray(value).reshape(tuple([2, 4])), shape)\n\n  def testInvalidValueTypeForConstantInitializerCausesTypeError(self):\n    c = constant_op.constant([1.0, 2.0, 3.0])\n    with self.assertRaisesRegex(TypeError,\n                                r\"Invalid type for initial value=.*Tensor.*\"):\n      init_ops.constant_initializer(c, dtype=dtypes.float32)\n    v = variables.Variable([3.0, 2.0, 1.0])\n    with self.assertRaisesRegex(\n        TypeError, r\"Invalid type for initial value=.*Variable.*\"):\n      init_ops.constant_initializer(v, dtype=dtypes.float32)\n\n\nclass RandomNormalInitializationTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testInitializerIdentical(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.random_normal_initializer(0.0, 1.0, seed=1, dtype=dtype)\n      init2 = init_ops.random_normal_initializer(0.0, 1.0, seed=1, dtype=dtype)\n      self.assertTrue(identicaltest(self, init1, init2))\n\n  @test_util.run_deprecated_v1\n  def testInitializerDifferent(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.random_normal_initializer(0.0, 1.0, seed=1, dtype=dtype)\n      init2 = init_ops.random_normal_initializer(0.0, 1.0, seed=2, dtype=dtype)\n      self.assertFalse(identicaltest(self, init1, init2))\n\n  @test_util.run_deprecated_v1\n  def testDuplicatedInitializer(self):\n    init = init_ops.random_normal_initializer(0.0, 1.0)\n    self.assertFalse(duplicated_initializer(self, init, 1))\n\n  def testInvalidDataType(self):\n    self.assertRaises(\n        ValueError,\n        init_ops.random_normal_initializer,\n        0.0,\n        1.0,\n        dtype=dtypes.string)\n\n\nclass TruncatedNormalInitializationTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testInitializerIdentical(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.truncated_normal_initializer(\n          0.0, 1.0, seed=1, dtype=dtype)\n      init2 = init_ops.truncated_normal_initializer(\n          0.0, 1.0, seed=1, dtype=dtype)\n      self.assertTrue(identicaltest(self, init1, init2))\n\n  @test_util.run_deprecated_v1\n  def testInitializerDifferent(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.truncated_normal_initializer(\n          0.0, 1.0, seed=1, dtype=dtype)\n      init2 = init_ops.truncated_normal_initializer(\n          0.0, 1.0, seed=2, dtype=dtype)\n      self.assertFalse(identicaltest(self, init1, init2))\n\n  @test_util.run_deprecated_v1\n  def testDuplicatedInitializer(self):\n    init = init_ops.truncated_normal_initializer(0.0, 1.0)\n    self.assertFalse(duplicated_initializer(self, init, 1))\n\n  def testInvalidDataType(self):\n    self.assertRaises(\n        ValueError,\n        init_ops.truncated_normal_initializer,\n        0.0,\n        1.0,\n        dtype=dtypes.string)\n\n\nclass RandomUniformInitializationTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testInitializerIdentical(self):\n    for dtype in [dtypes.float32, dtypes.float64, dtypes.int64]:\n      init1 = init_ops.random_uniform_initializer(0, 7, seed=1, dtype=dtype)\n      init2 = init_ops.random_uniform_initializer(0, 7, seed=1, dtype=dtype)\n      self.assertTrue(identicaltest(self, init1, init2))\n\n  @test_util.run_deprecated_v1\n  def testInitializerDifferent(self):\n    for dtype in [dtypes.float32, dtypes.float64, dtypes.int32, dtypes.int64]:\n      init1 = init_ops.random_uniform_initializer(0, 7, seed=1, dtype=dtype)\n      init2 = init_ops.random_uniform_initializer(0, 7, seed=2, dtype=dtype)\n      self.assertFalse(identicaltest(self, init1, init2))\n\n  @test_util.run_deprecated_v1\n  def testDuplicatedInitializer(self):\n    init = init_ops.random_uniform_initializer(0.0, 1.0)\n    self.assertFalse(duplicated_initializer(self, init, 1))\n\n\nclass UniformUnitScalingInitializationTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testInitializerIdentical(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.uniform_unit_scaling_initializer(seed=1, dtype=dtype)\n      init2 = init_ops.uniform_unit_scaling_initializer(seed=1, dtype=dtype)\n      self.assertTrue(identicaltest(self, init1, init2))\n      init3 = init_ops.uniform_unit_scaling_initializer(\n          1.5, seed=1, dtype=dtype)\n      init4 = init_ops.uniform_unit_scaling_initializer(\n          1.5, seed=1, dtype=dtype)\n      self.assertTrue(identicaltest(self, init3, init4))\n\n  @test_util.run_deprecated_v1\n  def testInitializerDifferent(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.uniform_unit_scaling_initializer(seed=1, dtype=dtype)\n      init2 = init_ops.uniform_unit_scaling_initializer(seed=2, dtype=dtype)\n      init3 = init_ops.uniform_unit_scaling_initializer(\n          1.5, seed=1, dtype=dtype)\n      self.assertFalse(identicaltest(self, init1, init2))\n      self.assertFalse(identicaltest(self, init1, init3))\n      self.assertFalse(identicaltest(self, init2, init3))\n\n  @test_util.run_deprecated_v1\n  def testZeroSize(self):\n    shape = [0, 2]\n    with self.cached_session():\n      x = variable_scope.get_variable(\n          \"x\",\n          shape=shape,\n          initializer=init_ops.uniform_unit_scaling_initializer())\n      self.evaluate(variables.global_variables_initializer())\n      self.assertAllEqual(shape, self.evaluate(x).shape)\n\n  @test_util.run_deprecated_v1\n  def testDuplicatedInitializer(self):\n    init = init_ops.uniform_unit_scaling_initializer()\n    self.assertFalse(duplicated_initializer(self, init, 1))\n\n  def testInvalidDataType(self):\n    self.assertRaises(\n        ValueError,\n        init_ops.uniform_unit_scaling_initializer,\n        dtype=dtypes.string)\n\n\nclass VarianceScalingInitializationTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testTruncatedNormalDistribution(self):\n    shape = [100, 100]\n    expect_mean = 0.\n    expect_var = 1. / shape[0]\n    init = init_ops.variance_scaling_initializer(\n        distribution=\"truncated_normal\")\n\n    with self.session(), \\\n      test.mock.patch.object(\n          random_ops, \"truncated_normal\", wraps=random_ops.truncated_normal) \\\n          as mock_truncated_normal:\n      x = init(shape).eval()\n      self.assertTrue(mock_truncated_normal.called)\n\n    self.assertNear(np.mean(x), expect_mean, err=1e-2)\n    self.assertNear(np.var(x), expect_var, err=1e-2)\n\n  @test_util.run_deprecated_v1\n  def testNormalDistribution(self):\n    shape = [100, 100]\n    expect_mean = 0.\n    expect_var = 1. / shape[0]\n    init = init_ops.variance_scaling_initializer(distribution=\"normal\")\n\n    with self.session(), \\\n      test.mock.patch.object(\n          random_ops, \"truncated_normal\", wraps=random_ops.truncated_normal) \\\n          as mock_truncated_normal:\n      x = init(shape).eval()\n      self.assertTrue(mock_truncated_normal.called)\n\n    self.assertNear(np.mean(x), expect_mean, err=1e-2)\n    self.assertNear(np.var(x), expect_var, err=1e-2)\n\n  @test_util.run_deprecated_v1\n  def testUntruncatedNormalDistribution(self):\n    shape = [100, 100]\n    expect_mean = 0.\n    expect_var = 1. / shape[0]\n    init = init_ops.variance_scaling_initializer(\n        distribution=\"untruncated_normal\")\n\n    with self.session(), \\\n      test.mock.patch.object(\n          random_ops, \"random_normal\", wraps=random_ops.random_normal) \\\n          as mock_random_normal:\n      x = init(shape).eval()\n      self.assertTrue(mock_random_normal.called)\n\n    self.assertNear(np.mean(x), expect_mean, err=1e-2)\n    self.assertNear(np.var(x), expect_var, err=1e-2)\n\n  @test_util.run_deprecated_v1\n  def testUniformDistribution(self):\n    shape = [100, 100]\n    expect_mean = 0.\n    expect_var = 1. / shape[0]\n    init = init_ops.variance_scaling_initializer(distribution=\"uniform\")\n\n    with self.session():\n      x = init(shape).eval()\n\n    self.assertNear(np.mean(x), expect_mean, err=1e-2)\n    self.assertNear(np.var(x), expect_var, err=1e-2)\n\n\n# TODO(vrv): move to sequence_ops_test?\nclass RangeTest(test.TestCase):\n\n  def _Range(self, start, limit, delta):\n    with self.cached_session():\n      tf_ans = math_ops.range(start, limit, delta, name=\"range\")\n      self.assertEqual([len(np.arange(start, limit, delta))],\n                       tf_ans.get_shape())\n      return self.evaluate(tf_ans)\n\n  def testBasic(self):\n    self.assertTrue(\n        np.array_equal(self._Range(0, 5, 1), np.array([0, 1, 2, 3, 4])))\n    self.assertTrue(np.array_equal(self._Range(0, 5, 2), np.array([0, 2, 4])))\n    self.assertTrue(np.array_equal(self._Range(0, 6, 2), np.array([0, 2, 4])))\n    self.assertTrue(\n        np.array_equal(self._Range(13, 32, 7), np.array([13, 20, 27])))\n    self.assertTrue(\n        np.array_equal(\n            self._Range(100, 500, 100), np.array([100, 200, 300, 400])))\n    self.assertEqual(math_ops.range(0, 5, 1).dtype, dtypes.int32)\n\n  @test_util.run_deprecated_v1\n  def testLimitOnly(self):\n    with self.session():\n      self.assertAllEqual(np.arange(5), math_ops.range(5))\n\n  def testEmpty(self):\n    for start in 0, 5:\n      self.assertTrue(np.array_equal(self._Range(start, start, 1), []))\n\n  def testNonInteger(self):\n    self.assertTrue(\n        np.allclose(self._Range(0, 2, 0.5), np.array([0, 0.5, 1, 1.5])))\n    self.assertTrue(np.allclose(self._Range(0, 5, 2.5), np.array([0, 2.5])))\n    self.assertTrue(\n        np.allclose(self._Range(0, 3, 0.9), np.array([0, 0.9, 1.8, 2.7])))\n    self.assertTrue(\n        np.allclose(\n            self._Range(100., 500., 100.), np.array([100, 200, 300, 400])))\n    self.assertEqual(math_ops.range(0., 5., 1.).dtype, dtypes.float32)\n\n  def testNegativeDelta(self):\n    self.assertTrue(\n        np.array_equal(self._Range(5, -1, -1), np.array([5, 4, 3, 2, 1, 0])))\n    self.assertTrue(\n        np.allclose(self._Range(2.5, 0, -0.5), np.array([2.5, 2, 1.5, 1, 0.5])))\n    self.assertTrue(\n        np.array_equal(self._Range(-5, -10, -3), np.array([-5, -8])))\n\n  def testDType(self):\n    zero_int32 = math_ops.cast(0, dtypes.int32)\n    zero_int64 = math_ops.cast(0, dtypes.int64)\n    zero_float32 = math_ops.cast(0, dtypes.float32)\n    zero_float64 = math_ops.cast(0, dtypes.float64)\n\n    self.assertEqual(math_ops.range(zero_int32, 0, 1).dtype, dtypes.int32)\n    self.assertEqual(math_ops.range(zero_int64, 0, 1).dtype, dtypes.int64)\n    self.assertEqual(math_ops.range(zero_float32, 0, 1).dtype, dtypes.float32)\n    self.assertEqual(math_ops.range(zero_float64, 0, 1).dtype, dtypes.float64)\n\n    self.assertEqual(\n        math_ops.range(zero_int32, zero_int64, 1).dtype, dtypes.int64)\n    self.assertEqual(\n        math_ops.range(zero_int64, zero_float32, 1).dtype, dtypes.float32)\n    self.assertEqual(\n        math_ops.range(zero_float32, zero_float64, 1).dtype, dtypes.float64)\n    self.assertEqual(\n        math_ops.range(zero_float64, zero_int32, 1).dtype, dtypes.float64)\n\n    self.assertEqual(\n        math_ops.range(0, 0, 1, dtype=dtypes.int32).dtype, dtypes.int32)\n    self.assertEqual(\n        math_ops.range(0, 0, 1, dtype=dtypes.int64).dtype, dtypes.int64)\n    self.assertEqual(\n        math_ops.range(0, 0, 1, dtype=dtypes.float32).dtype, dtypes.float32)\n    self.assertEqual(\n        math_ops.range(0, 0, 1, dtype=dtypes.float64).dtype, dtypes.float64)\n\n  def testMixedDType(self):\n    # Test case for GitHub issue 35710\n    tf_ans = math_ops.range(\n        constant_op.constant(4, dtype=dtypes.int32), dtype=dtypes.int64)\n    self.assertAllEqual(self.evaluate(tf_ans), np.array([0, 1, 2, 3]))\n\n  def testLargeLimits(self):\n    # Test case for GitHub issue 46913.\n    with self.session():\n      with self.assertRaises(errors_impl.ResourceExhaustedError):\n        v = math_ops.range(0, 9223372036854775807)\n        self.evaluate(v)\n\n  def testLargeStarts(self):\n    # Test case for GitHub issue 46899.\n    with self.session():\n      with self.assertRaises(errors_impl.InvalidArgumentError):\n        v = math_ops.range(start=-1e+38, limit=1)\n        self.evaluate(v)\n\n\n# TODO(vrv): move to sequence_ops_test?\nclass LinSpaceTest(test.TestCase):\n\n  def _gpu_modes(self):\n    if test.is_gpu_available():\n      return [False, True]\n    else:\n      return [False]\n\n  def _LinSpace(self, start, stop, num):\n    with ops.Graph().as_default() as graph:\n      with self.session(graph=graph, force_gpu=self.force_gpu):\n        tf_ans = math_ops.linspace(start, stop, num, name=\"linspace\")\n        self.assertEqual([num], tf_ans.get_shape())\n        return self.evaluate(tf_ans)\n\n  def testPositive(self):\n    for self.force_gpu in self._gpu_modes():\n      self.assertArrayNear(self._LinSpace(1., 5., 1), np.array([1.]), 1e-5)\n      self.assertArrayNear(self._LinSpace(1., 5., 2), np.array([1., 5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(1., 5., 3), np.array([1., 3., 5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(1., 5., 4), np.array([1., 7. / 3., 11. / 3., 5.]),\n          1e-5)\n\n  def testNegative(self):\n    for self.force_gpu in self._gpu_modes():\n      self.assertArrayNear(self._LinSpace(-1., -5., 1), np.array([-1.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., -5., 2), np.array([-1., -5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., -5., 3), np.array([-1., -3., -5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., -5., 4), np.array([-1., -7. / 3., -11. / 3.,\n                                                 -5.]), 1e-5)\n\n  def testNegativeToPositive(self):\n    for self.force_gpu in self._gpu_modes():\n      self.assertArrayNear(self._LinSpace(-1., 5., 1), np.array([-1.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., 5., 2), np.array([-1., 5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., 5., 3), np.array([-1., 2., 5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., 5., 4), np.array([-1., 1., 3., 5.]), 1e-5)\n\n  def testPoint(self):\n    for self.force_gpu in self._gpu_modes():\n      self.assertArrayNear(self._LinSpace(5., 5., 1), np.array([5.]), 1e-5)\n      self.assertArrayNear(self._LinSpace(5., 5., 2), np.array([5.] * 2), 1e-5)\n      self.assertArrayNear(self._LinSpace(5., 5., 3), np.array([5.] * 3), 1e-5)\n      self.assertArrayNear(self._LinSpace(5., 5., 4), np.array([5.] * 4), 1e-5)\n\n  def testEndpointsAreExact(self):\n    for self.force_gpu in self._gpu_modes():\n      # Test some cases that produce last values not equal to \"stop\" when\n      # computed via start + (num - 1) * ((stop - start) / (num - 1)), since\n      # float arithmetic will introduce error through precision loss.\n      self.assertAllEqual(\n          self._LinSpace(0., 1., 42)[[0, -1]], np.array([0., 1.], np.float32))\n      self.assertAllEqual(\n          self._LinSpace(-1., 0., 42)[[0, -1]], np.array([-1., 0.], np.float32))\n      self.assertAllEqual(\n          self._LinSpace(.1, .2, 4)[[0, -1]], np.array([.1, .2], np.float32))\n      # Check a case for float64 error too.\n      self.assertAllEqual(\n          self._LinSpace(np.array(0., np.float64), .1, 12)[[0, -1]],\n          np.array([0., .1], np.float64))\n\n\nclass LinSpaceNdTest(test.TestCase):\n\n  def _gpu_modes(self):\n    if test.is_gpu_available():\n      return [False, True]\n    else:\n      return [False]\n\n  def _LinSpace(self, start, stop, num, axis=0):\n    with ops.Graph().as_default() as graph:\n      with self.session(graph=graph, force_gpu=self.force_gpu):\n        tf_ans = math_ops.linspace_nd(start, stop, num, axis=axis)\n        return self.evaluate(tf_ans)\n\n  def _LinSpaceNumConstant(self, start, stop, num, axis=0):\n    with ops.Graph().as_default() as graph:\n      num_constant = constant_op.constant(num)\n      with self.session(graph=graph, force_gpu=self.force_gpu):\n        tf_ans = math_ops.linspace_nd(start, stop, num_constant, axis=axis)\n        return self.evaluate(tf_ans)\n\n  def _LinspaceNoneShape(self, start, stop, num, graph_shape=None, axis=0):\n    with ops.Graph().as_default() as graph:\n      num_tensor = array_ops.placeholder(dtypes.int32)\n      start_t = array_ops.placeholder(dtypes.float32, shape=graph_shape)\n      stop_t = array_ops.placeholder(dtypes.float32, shape=graph_shape)\n      ans_tensor = math_ops.linspace_nd(start_t, stop_t, num_tensor, axis=axis)\n\n      with self.session(graph=graph, force_gpu=self.force_gpu) as sess:\n        feed_dict = {start_t: start, stop_t: stop, num_tensor: num}\n        return sess.run(ans_tensor, feed_dict=feed_dict)\n\n  def testPositive(self):\n    for self.force_gpu in self._gpu_modes():\n      self.assertArrayNear(self._LinSpace(1., 5., 1), np.array([1.]), 1e-5)\n      self.assertArrayNear(self._LinSpace(1., 5., 2), np.array([1., 5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(1., 5., 3), np.array([1., 3., 5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(1., 5., 4), np.array([1., 7. / 3., 11. / 3., 5.]),\n          1e-5)\n\n  def testNegative(self):\n    for self.force_gpu in self._gpu_modes():\n      self.assertArrayNear(self._LinSpace(-1., -5., 1), np.array([-1.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., -5., 2), np.array([-1., -5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., -5., 3), np.array([-1., -3., -5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., -5., 4), np.array([-1., -7. / 3., -11. / 3.,\n                                                 -5.]), 1e-5)\n\n  def testNegativeToPositive(self):\n    for self.force_gpu in self._gpu_modes():\n      self.assertArrayNear(self._LinSpace(-1., 5., 1), np.array([-1.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., 5., 2), np.array([-1., 5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., 5., 3), np.array([-1., 2., 5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., 5., 4), np.array([-1., 1., 3., 5.]), 1e-5)\n\n  def testPoint(self):\n    for self.force_gpu in self._gpu_modes():\n      self.assertArrayNear(self._LinSpace(5., 5., 1), np.array([5.]), 1e-5)\n      self.assertArrayNear(self._LinSpace(5., 5., 2), np.array([5.] * 2), 1e-5)\n      self.assertArrayNear(self._LinSpace(5., 5., 3), np.array([5.] * 3), 1e-5)\n      self.assertArrayNear(self._LinSpace(5., 5., 4), np.array([5.] * 4), 1e-5)\n\n  def testEndpointsAreExact(self):\n    for self.force_gpu in self._gpu_modes():\n      # Test some cases that produce last values not equal to \"stop\" when\n      # computed via start + (num - 1) * ((stop - start) / (num - 1)), since\n      # float arithmetic will introduce error through precision loss.\n      self.assertAllEqual(\n          self._LinSpace(0., 1., 42)[[0, -1]], np.array([0., 1.], np.float32))\n      self.assertAllEqual(\n          self._LinSpace(-1., 0., 42)[[0, -1]], np.array([-1., 0.], np.float32))\n      self.assertAllEqual(\n          self._LinSpace(.1, .2, 4)[[0, -1]], np.array([.1, .2], np.float32))\n      # Check a case for float64 error too.\n      self.assertAllEqual(\n          self._LinSpace(np.array(0., np.float64), .1, 12)[[0, -1]],\n          np.array([0., .1], np.float64))\n\n  def testScalarsCompareToNumpy(self):\n    for self.force_gpu in self._gpu_modes():\n      actual = self._LinSpace(0., 1., 32)\n      expected = np.linspace(0., 1., 32)\n      self.assertArrayNear(expected, actual, 1e-5)\n\n  def _baseNDArrayCompareToNumpy(self, axis):\n    for self.force_gpu in self._gpu_modes():\n      a, b, expected, num = self.create_nd_inputs_and_expected_output(axis)\n      actual = self._LinSpace(a, b, num, axis=axis)\n      self.assert_close(actual, expected)\n\n  def assert_close(self, actual, expected):\n    wrong_indices = np.where(~np.allclose(actual, expected))\n    mess = \"Wrong float answer. Wrong indices: {}\".format(wrong_indices)\n    self.assertTrue(np.allclose(actual, expected), mess)\n\n  def create_nd_inputs_and_expected_output(self, axis):\n    a = np.arange(2, dtype=np.float32)\n    b = a * 5\n    num = 5\n\n    res = np.array([[0., 0., 0., 0., 0.], [1., 2., 3., 4., 5.]])\n    expected = res if axis != 0 else res.T\n    return a, b, expected, num\n\n  def testNDArrayCompareToNumpyDefaultAxis(self):\n    self._baseNDArrayCompareToNumpy(0)\n\n  def testNDArrayAxisStrictlyPositive(self):\n    self._baseNDArrayCompareToNumpy(1)\n\n  def testNDArrayAxisStrictlyNegative(self):\n    self._baseNDArrayCompareToNumpy(-1)\n\n  def testNumConstant(self):\n    for self.force_gpu in self._gpu_modes():\n      actual = self._LinSpaceNumConstant(0., 1., 32)\n      expected = np.linspace(0., 1., 32)\n      self.assertArrayNear(expected, actual, 1e-5)\n\n  def testUnknownShapeAtGraphCreationTime(self):\n    self.base_test_unknown_shape((2))\n\n  def testNoneValuesInShapeAtGraphCreationTime(self):\n    self.base_test_unknown_shape((None))\n\n  def testNoneShapeAtGraphCreationTime(self):\n    self.base_test_unknown_shape(None)\n\n  def base_test_unknown_shape(self, graph_shape):\n    for self.force_gpu in self._gpu_modes():\n      axis = 1\n      a, b, expected, num = self.create_nd_inputs_and_expected_output(axis)\n      actual = self._LinspaceNoneShape(a, b, num, graph_shape, axis)\n      self.assert_close(actual, expected)\n\n\nclass DeviceTest(test.TestCase):\n\n  def testNoDevice(self):\n    with ops.Graph().as_default():\n      var = variables.Variable([[1.0, 1.0]])\n    self.assertDeviceEqual(None, var.device)\n    self.assertDeviceEqual(None, var.initializer.device)\n\n  def testDevice(self):\n    with ops.Graph().as_default():\n      with ops.device(\"/job:ps\"):\n        var = variables.Variable([[1.0, 1.0]])\n    self.assertDeviceEqual(\"/job:ps\", var.device)\n    self.assertDeviceEqual(\"/job:ps\", var.initializer.device)\n\n\nclass OrthogonalInitializerTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testInitializerIdentical(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.orthogonal_initializer(seed=1, dtype=dtype)\n      init2 = init_ops.orthogonal_initializer(seed=1, dtype=dtype)\n      self.assertTrue(identicaltest(self, init1, init2, (10, 10)))\n\n  @test_util.run_deprecated_v1\n  def testInitializerDifferent(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.orthogonal_initializer(seed=1, dtype=dtype)\n      init2 = init_ops.orthogonal_initializer(seed=2, dtype=dtype)\n      self.assertFalse(identicaltest(self, init1, init2, (10, 10)))\n\n  @test_util.run_deprecated_v1\n  def testDuplicatedInitializer(self):\n    init = init_ops.orthogonal_initializer()\n    self.assertFalse(duplicated_initializer(self, init, 1, (10, 10)))\n\n  def testInvalidDataType(self):\n    self.assertRaises(\n        ValueError, init_ops.orthogonal_initializer, dtype=dtypes.string)\n\n  def testInvalidShape(self):\n    init1 = init_ops.orthogonal_initializer()\n    with self.session(graph=ops.Graph(), use_gpu=True):\n      self.assertRaises(ValueError, init1, shape=[5])\n\n  @test_util.run_deprecated_v1\n  def testGain(self):\n    shape = (10, 10)\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.orthogonal_initializer(seed=1, dtype=dtype)\n      init2 = init_ops.orthogonal_initializer(gain=3.14, seed=1, dtype=dtype)\n      with self.session(graph=ops.Graph(), use_gpu=True):\n        t1 = init1(shape).eval()\n        t2 = init2(shape).eval()\n      self.assertAllClose(t1, t2 / 3.14)\n\n  @test_util.run_deprecated_v1\n  def testShapesValues(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      for shape in [(10, 10), (10, 9, 8), (100, 5, 5), (50, 40), (40, 50)]:\n        init = init_ops.orthogonal_initializer(dtype=dtype)\n        tol = 1e-5 if dtype == dtypes.float32 else 1e-12\n        with self.session(graph=ops.Graph(), use_gpu=True):\n          # Check the shape\n          t = init(shape).eval()\n          self.assertAllEqual(shape, t.shape)\n          # Check orthogonality by computing the inner product\n          t = t.reshape((np.prod(t.shape[:-1]), t.shape[-1]))\n          if t.shape[0] > t.shape[1]:\n            self.assertAllClose(\n                np.dot(t.T, t), np.eye(t.shape[1]), rtol=tol, atol=tol)\n          else:\n            self.assertAllClose(\n                np.dot(t, t.T), np.eye(t.shape[0]), rtol=tol, atol=tol)\n\n\nclass ConvolutionDeltaOrthogonalInitializerTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testInitializerIdentical(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_delta_orthogonal(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_delta_orthogonal(seed=1, dtype=dtype)\n      self.assertTrue(identicaltest(self, init1, init2, (3, 3, 10, 10)))\n\n  @test_util.run_deprecated_v1\n  def testInitializerDifferent(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_delta_orthogonal(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_delta_orthogonal(seed=2, dtype=dtype)\n      self.assertFalse(identicaltest(self, init1, init2, (3, 3, 10, 10)))\n\n  @test_util.run_deprecated_v1\n  def testDuplicatedInitializer(self):\n    init = init_ops.convolutional_delta_orthogonal()\n    self.assertFalse(duplicated_initializer(self, init, 1, (3, 3, 10, 10)))\n\n  def testInvalidDataType(self):\n    self.assertRaises(\n        ValueError,\n        init_ops.convolutional_delta_orthogonal,\n        dtype=dtypes.string)\n\n  def testInvalidShape(self):\n    init1 = init_ops.convolutional_delta_orthogonal()\n    with self.session(graph=ops.Graph(), use_gpu=True):\n      self.assertRaises(ValueError, init1, shape=[3, 3, 6, 5])\n\n  @test_util.run_deprecated_v1\n  def testGain(self):\n    shape = (3, 3, 10, 10)\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_delta_orthogonal(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_delta_orthogonal(\n          gain=3.14, seed=1, dtype=dtype)\n      with self.session(graph=ops.Graph(), use_gpu=True):\n        t1 = init1(shape).eval()\n        t2 = init2(shape).eval()\n      self.assertAllClose(t1, t2 / 3.14)\n\n  @test_util.run_deprecated_v1\n  def testShapesValues(self):\n    gain = 3.14\n    for dtype in [dtypes.float32]:\n      for kernel_size in [[3], [8], [3, 5], [2, 4], [3, 3, 3], [2, 2, 2]]:\n        tol = 1e-2\n        # Check orthogonality by computing ratio between\n        # the 2-norms of the inputs and outputs.\n        if len(kernel_size) == 1:\n          shape = [4, 32, 64]\n          convolution = convolutional.conv1d\n        elif len(kernel_size) == 2:\n          convolution = convolutional.conv2d\n          shape = [4, 32, 32, 64]\n        else:\n          shape = [4, 16, 16, 16, 64]\n          convolution = convolutional.conv3d\n        inputs = random_ops.random_normal(shape, dtype=dtype)\n        inputs_2norm = linalg_ops.norm(inputs)\n        outputs = convolution(\n            inputs,\n            padding=\"same\",\n            filters=128,\n            kernel_size=kernel_size,\n            use_bias=False,\n            kernel_initializer=init_ops.convolutional_delta_orthogonal(\n                gain=gain))\n        outputs_shape = shape[0:-1] + [128]\n        outputs_2norm = linalg_ops.norm(outputs)\n        ratio = outputs_2norm / inputs_2norm\n        my_ops = variables.global_variables_initializer()\n        with self.session():\n          self.evaluate(my_ops)\n          # Check the shape of the outputs\n          t = self.evaluate(outputs)\n          self.assertAllEqual(t.shape, outputs_shape)\n          # Check isometry of the delta-orthogonal kernel.\n          self.assertAllClose(self.evaluate(ratio), gain, rtol=tol, atol=tol)\n\n  @test_util.run_deprecated_v1\n  def testNonuniformity(self):\n    value = 0\n    abs_value = 0\n    shape = [3, 3, 10, 10]\n    count = 70\n    tol = 1e-5\n    with self.session():\n      for i in range(count):\n        x = variable_scope.get_variable(\n            \"{}\".format(i),\n            shape=shape,\n            initializer=init_ops.convolutional_delta_orthogonal)\n        self.evaluate(x.initializer)\n        y = self.evaluate(x)[1, 1, :, :]\n        determinant = np.linalg.det(y)\n        value += determinant\n        abs_value += np.abs(determinant)\n\n      # Check there is some variation in the signs of the determinants\n      self.assertLess(value, count - tol)\n      self.assertLess(-count + tol, value)\n      # Check all determinants have absolute value 1\n      # Compute the sum of the absolute values of 'count' determinants\n      self.assertAllClose(abs_value, count, rtol=tol, atol=tol)\n\n\n@test_util.run_all_without_tensor_float_32(\n    \"Tests convolutional_orthogonal_1d, which calls matmul\")\nclass ConvolutionOrthogonal1dInitializerTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testInitializerIdentical(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_orthogonal_1d(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_orthogonal_1d(seed=1, dtype=dtype)\n      self.assertTrue(identicaltest(self, init1, init2, (3, 10, 10)))\n\n  @test_util.run_deprecated_v1\n  def testInitializerDifferent(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_orthogonal_1d(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_orthogonal_1d(seed=2, dtype=dtype)\n      self.assertFalse(identicaltest(self, init1, init2, (3, 10, 10)))\n\n  @test_util.run_deprecated_v1\n  def testDuplicatedInitializer(self):\n    init = init_ops.convolutional_orthogonal_1d()\n    self.assertFalse(duplicated_initializer(self, init, 1, (3, 10, 10)))\n\n  def testInvalidDataType(self):\n    self.assertRaises(\n        ValueError, init_ops.convolutional_orthogonal_1d, dtype=dtypes.string)\n\n  def testInvalidShape(self):\n    init1 = init_ops.convolutional_orthogonal_1d()\n    with self.session(graph=ops.Graph(), use_gpu=True):\n      self.assertRaises(ValueError, init1, shape=[3, 6, 5])\n\n  @test_util.run_deprecated_v1\n  def testGain(self):\n    shape = (3, 10, 10)\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_orthogonal_1d(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_orthogonal_1d(\n          gain=3.14, seed=1, dtype=dtype)\n      with self.session(graph=ops.Graph(), use_gpu=True):\n        t1 = init1(shape).eval()\n        t2 = init2(shape).eval()\n      self.assertAllClose(t1, t2 / 3.14)\n\n  @test_util.run_deprecated_v1\n  def testNonuniformity(self):\n    value = 0\n    abs_value = 0\n    shape = [3, 10, 10]\n    count = 70\n    tol = 1e-5\n    with self.session():\n      for i in range(count):\n        x = variable_scope.get_variable(\n            \"{}\".format(i),\n            shape=shape,\n            initializer=init_ops.convolutional_orthogonal_1d)\n        self.evaluate(x.initializer)\n        y = np.sum(self.evaluate(x), axis=0)\n        determinant = np.linalg.det(y)\n        value += determinant\n        abs_value += np.abs(determinant)\n\n      # Check there is some variation in the signs of the determinants.\n      self.assertLess(value, count - tol)\n      self.assertLess(-count + tol, value)\n      # Check all determinants have absolute value 1\n      # Compute the sum of the absolute values of 'count' determinants\n      self.assertAllClose(abs_value, count, rtol=tol, atol=tol)\n\n  @test_util.run_deprecated_v1\n  def testShapesValues(self):\n\n    def circular_pad(input_, width, kernel_size):\n      \"\"\"Pad input_ for computing (circular) convolution.\n\n      Args:\n        input_: the input tensor\n        width: the width of the tensor.\n        kernel_size: the kernel size of the filter.\n\n      Returns:\n        a tensor whose width is (width + kernel_size - 1).\n      \"\"\"\n\n      beginning = kernel_size // 2\n      end = kernel_size - 1 - beginning\n\n      tmp_up = array_ops.slice(input_, [0, width - beginning, 0],\n                               [-1, beginning, -1])\n      tmp_down = array_ops.slice(input_, [0, 0, 0], [-1, end, -1])\n      tmp = array_ops.concat([tmp_up, input_, tmp_down], 1)\n\n      return tmp\n\n    cout = 64\n    shape = [10, 20, 32]\n    outputs_shape = shape[0:-1] + [cout]\n    dtype = dtypes.float32\n    tol = 1e-3\n    gain = 3.14\n    # Check orthogonality/isometry by computing the ratio between\n    # the 2-norms of the inputs and outputs.\n    for kernel_size in [[1], [2], [3], [4], [5], [6]]:\n      convolution = convolutional.conv1d\n      inputs = random_ops.random_normal(shape, dtype=dtype)\n      inputs_2norm = linalg_ops.norm(inputs)\n      input_with_circular_pad = circular_pad(inputs, shape[1], kernel_size[0])\n      outputs = convolution(\n          input_with_circular_pad,\n          padding=\"valid\",\n          filters=cout,\n          kernel_size=kernel_size[0],\n          use_bias=False,\n          kernel_initializer=init_ops.convolutional_orthogonal_1d(gain=gain))\n      outputs_2norm = linalg_ops.norm(outputs)\n      ratio = outputs_2norm / inputs_2norm\n      my_ops = variables.global_variables_initializer()\n      with self.session():\n        self.evaluate(my_ops)\n        # Check the shape of the outputs\n        t = self.evaluate(outputs)\n        self.assertAllEqual(t.shape, outputs_shape)\n        # Check isometry of the orthogonal kernel.\n        self.assertAllClose(self.evaluate(ratio), gain, rtol=tol, atol=tol)\n\n\nclass ConvolutionOrthogonal2dInitializerTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testInitializerIdentical(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_orthogonal_2d(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_orthogonal_2d(seed=1, dtype=dtype)\n      self.assertTrue(identicaltest(self, init1, init2, (3, 3, 10, 10)))\n\n  @test_util.run_deprecated_v1\n  def testInitializerDifferent(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_orthogonal_2d(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_orthogonal_2d(seed=2, dtype=dtype)\n      self.assertFalse(identicaltest(self, init1, init2, (3, 3, 10, 10)))\n\n  @test_util.run_deprecated_v1\n  def testDuplicatedInitializer(self):\n    init = init_ops.convolutional_orthogonal_2d()\n    self.assertFalse(duplicated_initializer(self, init, 1, (3, 3, 10, 10)))\n\n  def testInvalidDataType(self):\n    self.assertRaises(\n        ValueError, init_ops.convolutional_orthogonal_2d, dtype=dtypes.string)\n\n  def testInvalidShape(self):\n    init1 = init_ops.convolutional_orthogonal_2d()\n    with self.session(graph=ops.Graph(), use_gpu=True):\n      self.assertRaises(ValueError, init1, shape=[3, 3, 6, 5])\n\n  @test_util.run_deprecated_v1\n  def testGain(self):\n    shape = (3, 3, 10, 10)\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_orthogonal_2d(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_orthogonal_2d(\n          gain=3.14, seed=1, dtype=dtype)\n      with self.session(graph=ops.Graph(), use_gpu=True):\n        t1 = init1(shape).eval()\n        t2 = init2(shape).eval()\n      self.assertAllClose(t1, t2 / 3.14)\n\n  @test_util.run_deprecated_v1\n  def testShapesValues(self):\n\n    def circular_pad(input_, width, kernel_size):\n      \"\"\"Pad input_ for computing (circular) convolution.\n\n      Args:\n        input_: the input tensor\n        width: the width of the tensor.\n        kernel_size: the kernel size of the filter.\n\n      Returns:\n        a tensor whose width is (width + kernel_size - 1).\n      \"\"\"\n      beginning = kernel_size // 2\n      end = kernel_size - 1 - beginning\n\n      tmp_up = array_ops.slice(input_, [0, width - beginning, 0, 0],\n                               [-1, beginning, width, -1])\n      tmp_down = array_ops.slice(input_, [0, 0, 0, 0], [-1, end, width, -1])\n      tmp = array_ops.concat([tmp_up, input_, tmp_down], 1)\n\n      new_width = width + kernel_size - 1\n      tmp_left = array_ops.slice(tmp, [0, 0, width - beginning, 0],\n                                 [-1, new_width, beginning, -1])\n      tmp_right = array_ops.slice(tmp, [0, 0, 0, 0], [-1, new_width, end, -1])\n\n      final = array_ops.concat([tmp_left, tmp, tmp_right], 2)\n      return final\n\n    cout = 45\n    shape = [64, 28, 28, 32]\n    outputs_shape = shape[0:-1] + [cout]\n    dtype = dtypes.float32\n    tol = 1e-3\n    gain = 3.14\n    # Check orthogonality/isometry by computing the ratio between\n    # the 2-norms of the inputs and outputs.\n    for kernel_size in [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]:\n      convolution = convolutional.conv2d\n      inputs = random_ops.random_normal(shape, dtype=dtype)\n      inputs_2norm = linalg_ops.norm(inputs)\n      input_with_circular_pad = circular_pad(inputs, shape[1], kernel_size[0])\n      outputs = convolution(\n          input_with_circular_pad,\n          padding=\"valid\",\n          filters=cout,\n          kernel_size=kernel_size,\n          use_bias=False,\n          kernel_initializer=init_ops.convolutional_orthogonal_2d(gain=gain))\n      outputs_2norm = linalg_ops.norm(outputs)\n      ratio = outputs_2norm / inputs_2norm\n      my_ops = variables.global_variables_initializer()\n      with self.session():\n        self.evaluate(my_ops)\n        # Check the shape of the outputs\n        t = self.evaluate(outputs)\n        self.assertAllEqual(t.shape, outputs_shape)\n        # Check isometry of the orthogonal kernel.\n        self.assertAllClose(self.evaluate(ratio), gain, rtol=tol, atol=tol)\n\n\n@test_util.run_all_without_tensor_float_32(\n    \"Tests convolutional_orthogonal_3d, which calls matmul\")\nclass ConvolutionOrthogonal3dInitializerTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testInitializerIdentical(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_orthogonal_3d(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_orthogonal_3d(seed=1, dtype=dtype)\n      self.assertTrue(identicaltest(self, init1, init2, (3, 3, 3, 10, 10)))\n\n  @test_util.run_deprecated_v1\n  def testInitializerDifferent(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_orthogonal_3d(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_orthogonal_3d(seed=2, dtype=dtype)\n      self.assertFalse(identicaltest(self, init1, init2, (3, 3, 3, 10, 10)))\n\n  @test_util.run_deprecated_v1\n  def testDuplicatedInitializer(self):\n    init = init_ops.convolutional_orthogonal_3d()\n    self.assertFalse(duplicated_initializer(self, init, 1, (3, 3, 3, 10, 10)))\n\n  def testInvalidDataType(self):\n    self.assertRaises(\n        ValueError, init_ops.convolutional_orthogonal_3d, dtype=dtypes.string)\n\n  def testInvalidShape(self):\n    init1 = init_ops.convolutional_orthogonal_3d()\n    with self.session(graph=ops.Graph(), use_gpu=True):\n      self.assertRaises(ValueError, init1, shape=[3, 3, 3, 6, 5])\n\n  @test_util.run_deprecated_v1\n  def testGain(self):\n    shape = (3, 3, 3, 10, 10)\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_orthogonal_3d(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_orthogonal_3d(\n          gain=3.14, seed=1, dtype=dtype)\n      with self.session(graph=ops.Graph(), use_gpu=True):\n        t1 = init1(shape).eval()\n        t2 = init2(shape).eval()\n      self.assertAllClose(t1, t2 / 3.14)\n\n  @test_util.run_deprecated_v1\n  def testNonuniformity(self):\n    value = 0\n    abs_value = 0\n    shape = [3, 3, 3, 5, 5]\n    count = 20\n    tol = 1e-5\n    with self.session():\n      for i in range(count):\n        x = variable_scope.get_variable(\n            \"{}\".format(i),\n            shape=shape,\n            initializer=init_ops.convolutional_orthogonal_3d)\n        self.evaluate(x.initializer)\n        y = np.sum(self.evaluate(x), axis=(0, 1, 2))\n        determinant = np.linalg.det(y)\n        value += determinant\n        abs_value += np.abs(determinant)\n\n      # Check there is some variation in the signs of the determinants\n      self.assertLess(value, count - tol)\n      self.assertLess(-count + tol, value)\n      # Check all determinants have absolute value 1\n      # Compute the sum of the absolute values of 'count' determinants\n      self.assertAllClose(abs_value, count, rtol=tol, atol=tol)\n\n  @test_util.run_deprecated_v1\n  def testShapesValues(self):\n\n    def circular_pad(input_, width, kernel_size):\n      \"\"\"Padding input_ for computing circular convolution.\n\n      Args:\n        input_: the input tensor\n        width: the width of the tensor.\n        kernel_size: the kernel size of the filter.\n\n      Returns:\n        a tensor whose width is (width + kernel_size - 1).\n      \"\"\"\n\n      beginning = kernel_size // 2\n      end = kernel_size - 1 - beginning\n\n      tmp_up = array_ops.slice(input_, [0, width - beginning, 0, 0, 0],\n                               [-1, beginning, -1, -1, -1])\n      tmp_down = array_ops.slice(input_, [0, 0, 0, 0, 0], [-1, end, -1, -1, -1])\n      tmp = array_ops.concat([tmp_up, input_, tmp_down], 1)\n\n      tmp_left = array_ops.slice(tmp, [0, 0, width - beginning, 0, 0],\n                                 [-1, -1, beginning, -1, -1])\n      tmp_right = array_ops.slice(tmp, [0, 0, 0, 0, 0], [-1, -1, end, -1, -1])\n      tmp = array_ops.concat([tmp_left, tmp, tmp_right], 2)\n\n      tmp_front = array_ops.slice(tmp, [0, 0, 0, width - beginning, 0],\n                                  [-1, -1, -1, beginning, -1])\n      tmp_back = array_ops.slice(tmp, [0, 0, 0, 0, 0], [-1, -1, -1, end, -1])\n      return array_ops.concat([tmp_front, tmp, tmp_back], 3)\n\n    cout = 32\n    shape = [1, 7, 7, 7, 16]\n    outputs_shape = shape[0:-1] + [cout]\n    dtype = dtypes.float32\n    tol = 1e-3\n    gain = 3.14\n    # Check orthogonality/isometry by computing the ratio between\n    # the 2-norms of the inputs and outputs.\n    for kernel_size in [[1, 1, 1], [2, 2, 2], [3, 3, 3]]:\n      convolution = convolutional.conv3d\n      inputs = random_ops.random_normal(shape, dtype=dtype)\n      inputs_2norm = linalg_ops.norm(inputs)\n      input_with_circular_pad = circular_pad(inputs, shape[1], kernel_size[0])\n      outputs = convolution(\n          input_with_circular_pad,\n          padding=\"valid\",\n          filters=cout,\n          kernel_size=kernel_size[0],\n          use_bias=False,\n          kernel_initializer=init_ops.convolutional_orthogonal_3d(gain=gain))\n      outputs_2norm = linalg_ops.norm(outputs)\n      ratio = outputs_2norm / inputs_2norm\n      my_ops = variables.global_variables_initializer()\n      with self.cached_session():\n        self.evaluate(my_ops)\n        # Check the shape of the outputs\n        t = self.evaluate(outputs)\n        self.assertAllEqual(t.shape, outputs_shape)\n        # Check isometry of the orthogonal kernel.\n        self.assertAllClose(self.evaluate(ratio), gain, rtol=tol, atol=tol)\n\n\nclass IdentityInitializerTest(test.TestCase):\n\n  def testInvalidDataType(self):\n    self.assertRaises(\n        ValueError, init_ops.orthogonal_initializer, dtype=dtypes.string)\n\n  def testInvalidShape(self):\n    init = init_ops.identity_initializer()\n    with self.session(graph=ops.Graph(), use_gpu=True):\n      self.assertRaises(ValueError, init, shape=[5, 7, 7])\n      self.assertRaises(ValueError, init, shape=[5])\n      self.assertRaises(ValueError, init, shape=[])\n\n  @test_util.run_deprecated_v1\n  def testNonSquare(self):\n    init = init_ops.identity_initializer()\n    shape = (10, 5)\n    with self.session(graph=ops.Graph(), use_gpu=True):\n      self.assertAllClose(init(shape), np.eye(*shape))\n\n  @test_util.run_deprecated_v1\n  def testGain(self):\n    shape = (10, 10)\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init_default = init_ops.identity_initializer(dtype=dtype)\n      init_custom = init_ops.identity_initializer(gain=0.9, dtype=dtype)\n      with self.session(graph=ops.Graph(), use_gpu=True):\n        self.assertAllClose(init_default(shape), np.eye(*shape))\n      with self.session(graph=ops.Graph(), use_gpu=True):\n        self.assertAllClose(init_custom(shape), np.eye(*shape) * 0.9)\n\n  @test_util.run_deprecated_v1\n  def testPartitions(self):\n    shape = (10, 10)\n    init = init_ops.identity_initializer()\n    partitioner = partitioned_variables.variable_axis_size_partitioner(1)\n    with self.session(graph=ops.Graph(), use_gpu=True):\n      with variable_scope.variable_scope(\n          \"foo\", partitioner=partitioner, initializer=init):\n        v = array_ops.identity(variable_scope.get_variable(\"bar\", shape=shape))\n      self.evaluate(variables.global_variables_initializer())\n      self.assertAllClose(v, np.eye(*shape))\n\n\nif __name__ == \"__main__\":\n  test.main()\n"], "fixing_code": ["/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/math_ops.cc.\n\n#include \"tensorflow/core/kernels/sequence_ops.h\"\n\n#include <cmath>\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/types.h\"\n\nnamespace tensorflow {\n\nusing CPUDevice = Eigen::ThreadPoolDevice;\nusing GPUDevice = Eigen::GpuDevice;\n\nnamespace functor {\n\ntemplate <typename T>\nstruct RangeFunctor<CPUDevice, T> {\n  void operator()(OpKernelContext* context, int64_t size, T start, T delta,\n                  typename TTypes<T>::Flat output) const {\n    (void)context;\n    T val = start;\n    for (int64_t i = 0; i < size; ++i) {\n      output(i) = T(val);\n      val += delta;\n    }\n  }\n};\n\n}  // namespace functor\n\ntemplate <typename Device, typename T>\nclass RangeOp : public OpKernel {\n public:\n  explicit RangeOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& start_in = context->input(0);\n    const Tensor& limit_in = context->input(1);\n    const Tensor& delta_in = context->input(2);\n    // TODO(rmlarsen): Disallow legacy use of length-1 vectors as scalars.\n    OP_REQUIRES(context,\n                TensorShapeUtils::IsScalar(start_in.shape()) ||\n                    (TensorShapeUtils::IsVector(start_in.shape()) &&\n                     start_in.shape().dim_size(0) == 1),\n                errors::InvalidArgument(\"start must be a scalar, not shape \",\n                                        start_in.shape().DebugString()));\n    OP_REQUIRES(context,\n                TensorShapeUtils::IsScalar(limit_in.shape()) ||\n                    (TensorShapeUtils::IsVector(limit_in.shape()) &&\n                     limit_in.shape().dim_size(0) == 1),\n                errors::InvalidArgument(\"limit must be a scalar, not shape \",\n                                        limit_in.shape().DebugString()));\n    OP_REQUIRES(context,\n                TensorShapeUtils::IsScalar(delta_in.shape()) ||\n                    (TensorShapeUtils::IsVector(delta_in.shape()) &&\n                     delta_in.shape().dim_size(0) == 1),\n                errors::InvalidArgument(\"delta must be a scalar, not shape \",\n                                        delta_in.shape().DebugString()));\n    const T start = start_in.scalar<T>()();\n    const T limit = limit_in.scalar<T>()();\n    const T delta = delta_in.scalar<T>()();\n    OP_REQUIRES(context, delta != 0,\n                errors::InvalidArgument(\"Requires delta != 0: \", delta));\n    if (delta > 0) {\n      OP_REQUIRES(\n          context, start <= limit,\n          errors::InvalidArgument(\n              \"Requires start <= limit when delta > 0: \", start, \"/\", limit));\n    } else {\n      OP_REQUIRES(\n          context, start >= limit,\n          errors::InvalidArgument(\n              \"Requires start >= limit when delta < 0: \", start, \"/\", limit));\n    }\n    auto size_auto = (std::is_integral<T>::value\n                          ? (Eigen::numext::abs(limit - start) +\n                             Eigen::numext::abs(delta) - T(1)) /\n                                Eigen::numext::abs(delta)\n                          : Eigen::numext::ceil(\n                                Eigen::numext::abs((limit - start) / delta)));\n    OP_REQUIRES(\n        context, size_auto <= std::numeric_limits<int64_t>::max(),\n        errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \",\n                                std::numeric_limits<int64_t>::max()));\n\n    int64_t size = static_cast<int64_t>(size_auto);\n\n    TensorShape shape;\n    OP_REQUIRES_OK(context, shape.AddDimWithStatus(size));\n    Tensor* out = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(0, shape, &out));\n    if (size == 0) return;\n    auto flat = out->flat<T>();\n    functor::RangeFunctor<Device, T>()(context, size, start, delta, flat);\n  }\n};\n\n#define REGISTER_KERNEL(DEV, DEV_TYPE, TYPE)                 \\\n  REGISTER_KERNEL_BUILDER(Name(\"Range\")                      \\\n                              .Device(DEV)                   \\\n                              .HostMemory(\"start\")           \\\n                              .HostMemory(\"limit\")           \\\n                              .HostMemory(\"delta\")           \\\n                              .TypeConstraint<TYPE>(\"Tidx\"), \\\n                          RangeOp<DEV_TYPE, TYPE>);\n\n#define REGISTER_CPU_KERNEL(T) REGISTER_KERNEL(DEVICE_CPU, CPUDevice, T)\n#define REGISTER_GPU_KERNEL(T) REGISTER_KERNEL(DEVICE_GPU, GPUDevice, T)\n\nTF_CALL_float(REGISTER_CPU_KERNEL);\nTF_CALL_double(REGISTER_CPU_KERNEL);\nTF_CALL_int32(REGISTER_CPU_KERNEL);\nTF_CALL_int64(REGISTER_CPU_KERNEL);\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\nTF_CALL_float(REGISTER_GPU_KERNEL);\nTF_CALL_double(REGISTER_GPU_KERNEL);\nTF_CALL_int64(REGISTER_GPU_KERNEL);\n\n// Special case to execute int32 on the host with host output.\nREGISTER_KERNEL_BUILDER(Name(\"Range\")\n                            .Device(DEVICE_GPU)\n                            .HostMemory(\"start\")\n                            .HostMemory(\"limit\")\n                            .HostMemory(\"delta\")\n                            .HostMemory(\"output\")\n                            .TypeConstraint<int32_t>(\"Tidx\"),\n                        RangeOp<CPUDevice, int32_t>);\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#undef REGISTER_KERNEL\n#undef REGISTER_CPU_KERNEL\n#undef REGISTER_GPU_KERNEL\n\ntemplate <typename T, typename Tnum>\nclass LinSpaceOp : public OpKernel {\n public:\n  explicit LinSpaceOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& start_in = context->input(0);\n    const Tensor& stop_in = context->input(1);\n    const Tensor& num_in = context->input(2);\n    OP_REQUIRES(context, TensorShapeUtils::IsScalar(start_in.shape()),\n                errors::InvalidArgument(\"start must be a scalar, not shape \",\n                                        start_in.shape().DebugString()));\n    OP_REQUIRES(context, TensorShapeUtils::IsScalar(stop_in.shape()),\n                errors::InvalidArgument(\"stop must be a scalar, not shape \",\n                                        stop_in.shape().DebugString()));\n    OP_REQUIRES(context, TensorShapeUtils::IsScalar(num_in.shape()),\n                errors::InvalidArgument(\"num must be a scalar, not shape \",\n                                        num_in.shape().DebugString()));\n    const T start = start_in.scalar<T>()();\n    const T stop = stop_in.scalar<T>()();\n    const Tnum num = num_in.scalar<Tnum>()();\n    OP_REQUIRES(context, num > 0,\n                errors::InvalidArgument(\"Requires num > 0: \", num));\n    Tensor* out = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(0, TensorShape({num}), &out));\n    auto flat = out->flat<T>();\n    flat(0) = start;\n    if (num > 1) {\n      const T step = (stop - start) / (num - 1);\n      for (Tnum i = 1; i < num - 1; ++i) flat(i) = start + step * i;\n      // Ensure final value == stop; float arithmetic won't guarantee this.\n      flat(num - 1) = stop;\n    }\n  }\n};\n\n#define REGISTER_KERNEL(DEV, T, Tidx)                       \\\n  REGISTER_KERNEL_BUILDER(Name(\"LinSpace\")                  \\\n                              .Device(DEV)                  \\\n                              .TypeConstraint<T>(\"T\")       \\\n                              .TypeConstraint<Tidx>(\"Tidx\") \\\n                              .HostMemory(\"start\")          \\\n                              .HostMemory(\"stop\")           \\\n                              .HostMemory(\"num\")            \\\n                              .HostMemory(\"output\"),        \\\n                          LinSpaceOp<T, Tidx>);\n\n#define REGISTER_KERNEL_ALL_NUMS(dev, T) \\\n  REGISTER_KERNEL(dev, T, int32);        \\\n  REGISTER_KERNEL(dev, T, int64_t)\n\n#define REGISTER_CPU_KERNEL(T) REGISTER_KERNEL_ALL_NUMS(DEVICE_CPU, T)\nTF_CALL_float(REGISTER_CPU_KERNEL);\nTF_CALL_double(REGISTER_CPU_KERNEL);\n\n#define REGISTER_DEFAULT_KERNEL(T) REGISTER_KERNEL_ALL_NUMS(DEVICE_DEFAULT, T)\nTF_CALL_float(REGISTER_DEFAULT_KERNEL);\nTF_CALL_double(REGISTER_DEFAULT_KERNEL);\n#undef REGISTER_DEFAULT_KERNEL\n\n#undef REGISTER_CPU_KERNEL\n#undef REGISTER_KERNEL_ALL_NUMS\n#undef REGISTER_KERNEL\n\n}  // namespace tensorflow\n", "/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/core/framework/common_shape_fns.h\"\n#include \"tensorflow/core/framework/numeric_op.h\"\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n\nnamespace tensorflow {\n\nusing shape_inference::DimensionHandle;\nusing shape_inference::InferenceContext;\nusing shape_inference::ShapeHandle;\n\nREGISTER_OP(\"AddN\")\n    .Input(\"inputs: N * T\")\n    .Output(\"sum: T\")\n    .Attr(\"N: int >= 1\")\n    .Attr(\"T: {numbertype, variant}\")\n    .SetIsCommutative()\n    .SetIsAggregate()\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle cur = c->input(c->num_inputs() - 1);\n      for (int i = c->num_inputs() - 2; i >= 0; --i) {\n        TF_RETURN_WITH_CONTEXT_IF_ERROR(c->Merge(c->input(i), cur, &cur),\n                                        \"From merging shape \", i,\n                                        \" with other shapes.\");\n      }\n      c->set_output(0, cur);\n\n      DataType dtype;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"T\", &dtype));\n\n      if (dtype != DT_VARIANT) {\n        // Exit early if not DT_VARIANT.\n        return Status::OK();\n      } else {\n        // DT_VARIANT shape handle shape inference.  All sizes and dtypes must\n        // be the same; all shapes must be compatible via Merge.\n        std::vector<shape_inference::ShapeAndType> cur_shapes_and_types;\n        auto* shapes_and_types =\n            c->input_handle_shapes_and_types(c->num_inputs() - 1);\n        if (shapes_and_types) {\n          cur_shapes_and_types = *shapes_and_types;\n        }\n\n        for (int i = c->num_inputs() - 2; i >= 0; --i) {\n          auto shapes_and_types_i = c->input_handle_shapes_and_types(i);\n          if (!shapes_and_types && shapes_and_types_i) {\n            // TODO(ebrevdo): Find cases where this happens and fix their shape\n            // inference.  If we are calling AddN on variant types, they should\n            // all have consistent shape_and_type info.\n            shapes_and_types = shapes_and_types_i;\n          } else if (shapes_and_types && shapes_and_types_i) {\n            if (shapes_and_types_i->size() != shapes_and_types->size()) {\n              return errors::InvalidArgument(\n                  \"shapes_and_types[\", i,\n                  \"].size() == \", shapes_and_types_i->size(),\n                  \" != shapes_and_types[0].size() == \",\n                  shapes_and_types->size());\n            }\n            for (int j = 0; j < shapes_and_types->size(); ++j) {\n              if (shapes_and_types->at(j).dtype !=\n                  shapes_and_types_i->at(j).dtype) {\n                return errors::InvalidArgument(\n                    \"shapes_and_types[\", i, \"][\", j, \"].dtype() == \",\n                    DataTypeString(shapes_and_types_i->at(j).dtype),\n                    \" != shapes_and_types[0][\", j, \"].dtype == \",\n                    DataTypeString(shapes_and_types->at(j).dtype));\n              }\n              TF_RETURN_WITH_CONTEXT_IF_ERROR(\n                  c->Merge(shapes_and_types_i->at(j).shape,\n                           cur_shapes_and_types.at(j).shape,\n                           &cur_shapes_and_types.at(j).shape),\n                  \"From merging shapes_and_types[\", i, \"][\", j, \"].shape with \",\n                  \"shapes_and_types[0][\", j, \"].shape\");\n            }\n          }\n        }\n        if (shapes_and_types) {\n          c->set_output_handle_shapes_and_types(0, cur_shapes_and_types);\n        }\n        return Status::OK();\n      }\n    });\n\n// --------------------------------------------------------------------------\n\n// Note that the following operator is just a placeholder and has no\n// associated kernel. The code in accumulate_n_optimizer.cc replaces\n// this placeholder with a graph of operators that do have kernels.\n// The Python code that generates instances of this op is currently in\n// contrib/framework/python/ops/accumulate_n_v2.py\nREGISTER_OP(\"AccumulateNV2\")\n    .Input(\"inputs: N * T\")\n    .Output(\"sum: T\")\n    .Attr(\"N: int >= 1\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"shape: shape\")\n    .SetIsCommutative()\n    .SetIsAggregate()\n    .SetShapeFn(shape_inference::ExplicitShape);\n\n// --------------------------------------------------------------------------\n\nREGISTER_OP(\"BatchMatMul\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"output: T\")\n    .Attr(\n        \"T: {bfloat16, half, float, double, int32, int64, complex64, \"\n        \"complex128}\")\n    .Attr(\"adj_x: bool = false\")\n    .Attr(\"adj_y: bool = false\")\n    .SetShapeFn(shape_inference::BatchMatMulShape);\n\nREGISTER_OP(\"BatchMatMulV2\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"output: T\")\n    .Attr(\n        \"T: {bfloat16, half, float, double, int16, int32, int64, complex64, \"\n        \"complex128}\")\n    .Attr(\"adj_x: bool = false\")\n    .Attr(\"adj_y: bool = false\")\n    .SetShapeFn(shape_inference::BatchMatMulV2Shape);\n\nREGISTER_OP(\"BatchMatMulV3\")\n    .Input(\"x: Ta\")\n    .Input(\"y: Tb\")\n    .Output(\"output: Tout\")\n    .Attr(\n        \"Ta: {bfloat16, half, float, double, uint8, int8, int16, int32, int64, \"\n        \"complex64, complex128}\")\n    .Attr(\n        \"Tb: {bfloat16, half, float, double, uint8, int8, int16, int32, int64, \"\n        \"complex64, complex128}\")\n    .Attr(\n        \"Tout: {bfloat16, half, float, double, int16, int32, int64, complex64, \"\n        \"complex128}\")\n    .Attr(\"adj_x: bool = false\")\n    .Attr(\"adj_y: bool = false\")\n    .SetShapeFn(shape_inference::BatchMatMulV2Shape);\n\n#ifdef INTEL_MKL\nREGISTER_OP(\"_MklBatchMatMul\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"output: T\")\n    .Attr(\"T: {bfloat16, float}\")\n    .Attr(\"adj_x: bool = false\")\n    .Attr(\"adj_y: bool = false\")\n    .SetShapeFn(shape_inference::BatchMatMulShape);\n\nREGISTER_OP(\"_MklBatchMatMulV2\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"output: T\")\n    .Attr(\"T: {bfloat16, float}\")\n    .Attr(\"adj_x: bool = false\")\n    .Attr(\"adj_y: bool = false\")\n    .SetShapeFn(shape_inference::BatchMatMulV2Shape);\n#endif  // INTEL_MKL\n\n// --------------------------------------------------------------------------\n// Casting Ops\n//\n// NOTE: Only a smaller number of types are supported by\n// Cast. The exact casting rule is TBD. The current\n// implementation uses C++ static cast rules for numeric\n// types, which may be changed in the future.\nREGISTER_OP(\"Cast\")\n    .Input(\"x: SrcT\")\n    .Output(\"y: DstT\")\n    .Attr(\"SrcT: type\")\n    .Attr(\"DstT: type\")\n    .Attr(\"Truncate: bool = false\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"_HostCast\")\n    .Input(\"x: SrcT\")\n    .Output(\"y: DstT\")\n    .Attr(\"SrcT: type\")\n    .Attr(\"DstT: type\")\n    .Attr(\"Truncate: bool = false\")\n    .SetShapeFn(shape_inference::UnchangedShape)\n    .Doc(R\"doc(\nCast x of type SrcT to y of DstT.\n\n_HostCast requires its input and produces its output in host memory.\n)doc\");\n\n// --------------------------------------------------------------------------\n\nREGISTER_OP(\"Abs\")\n    .Input(\"x: T\")\n    .Output(\"y: T\")\n    .Attr(\"T: {bfloat16, half, float, double, int8, int16, int32, int64}\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"ComplexAbs\")\n    .Input(\"x: T\")\n    .Output(\"y: Tout\")\n    .Attr(\"T: {complex64, complex128} = DT_COMPLEX64\")\n    .Attr(\"Tout: {float, double} = DT_FLOAT\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\n// Declares cwise unary operations signature: 't -> 't\n#define UNARY()                                                            \\\n  Input(\"x: T\")                                                            \\\n      .Output(\"y: T\")                                                      \\\n      .Attr(                                                               \\\n          \"T: {bfloat16, half, float, double, int8, int16, int32, int64, \" \\\n          \"complex64, complex128}\")                                        \\\n      .SetShapeFn(shape_inference::UnchangedShape)\n\n#define UNARY_UNSIGNED()                                                   \\\n  Input(\"x: T\")                                                            \\\n      .Output(\"y: T\")                                                      \\\n      .Attr(                                                               \\\n          \"T: {bfloat16, half, float, double, int8, int16, int32, int64, \" \\\n          \"uint8, uint16, uint32, uint64, complex64, complex128}\")         \\\n      .SetShapeFn(shape_inference::UnchangedShape)\n\n#define UNARY_REAL()                              \\\n  Input(\"x: T\")                                   \\\n      .Output(\"y: T\")                             \\\n      .Attr(\"T: {bfloat16, half, float, double}\") \\\n      .SetShapeFn(shape_inference::UnchangedShape)\n\n#define UNARY_COMPLEX()                                                  \\\n  Input(\"x: T\")                                                          \\\n      .Output(\"y: T\")                                                    \\\n      .Attr(\"T: {bfloat16, half, float, double, complex64, complex128}\") \\\n      .SetShapeFn(shape_inference::UnchangedShape)\n\n#define UNARY_GRADIENT_COMPLEX()                                         \\\n  Input(\"y: T\")                                                          \\\n      .Input(\"dy: T\")                                                    \\\n      .Output(\"z: T\")                                                    \\\n      .Attr(\"T: {bfloat16, half, float, double, complex64, complex128}\") \\\n      .SetShapeFn(shape_inference::UnchangedShape)\n\nREGISTER_OP(\"Neg\").UNARY();\n\nREGISTER_OP(\"Inv\").UNARY();\n\nREGISTER_OP(\"InvGrad\").UNARY_GRADIENT_COMPLEX();\n\nREGISTER_OP(\"Reciprocal\").UNARY();\n\nREGISTER_OP(\"ReciprocalGrad\").UNARY_GRADIENT_COMPLEX();\n\nREGISTER_OP(\"Square\").UNARY_UNSIGNED();\n\nREGISTER_OP(\"Sqrt\").UNARY_COMPLEX();\n\nREGISTER_OP(\"SqrtGrad\").UNARY_GRADIENT_COMPLEX();\n\nREGISTER_OP(\"Rsqrt\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Round\").UNARY();\n\nREGISTER_OP(\"RsqrtGrad\").UNARY_GRADIENT_COMPLEX();\n\nREGISTER_OP(\"Exp\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Expm1\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Log\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Log1p\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Sinh\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Cosh\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Tanh\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Asinh\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Acosh\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Atanh\").UNARY_COMPLEX();\n\nREGISTER_OP(\"TanhGrad\").UNARY_GRADIENT_COMPLEX();\n\nREGISTER_OP(\"Lgamma\").UNARY_REAL();\n\nREGISTER_OP(\"Digamma\").UNARY_REAL();\n\nREGISTER_OP(\"Erf\").UNARY_REAL();\nREGISTER_OP(\"Erfinv\").UNARY_REAL();\nREGISTER_OP(\"Ndtri\").UNARY_REAL();\nREGISTER_OP(\"Erfc\").UNARY_REAL();\n\nREGISTER_OP(\"Sigmoid\").UNARY_COMPLEX();\n\nREGISTER_OP(\"SigmoidGrad\").UNARY_GRADIENT_COMPLEX();\n\nREGISTER_OP(\"Sin\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Cos\").UNARY_COMPLEX();\n\nREGISTER_OP(\"Tan\").UNARY();\n\nREGISTER_OP(\"Asin\").UNARY();\n\nREGISTER_OP(\"Acos\").UNARY();\n\nREGISTER_OP(\"Atan\").UNARY();\n\nREGISTER_OP(\"_UnaryOpsComposition\")\n    .Input(\"x: T\")\n    .Output(\"y: T\")\n    .Attr(\"T: {float, half, double}\")\n    .Attr(\"op_names: list(string)\")\n    .SetShapeFn(shape_inference::UnchangedShape)\n    .Doc(R\"doc(\n*NOTE*: Do not invoke this operator directly in Python. Graph rewrite pass is\nexpected to create these operators.\n)doc\");\n\n#undef UNARY\n#undef UNARY_REAL\n#undef UNARY_COMPLEX\n\nREGISTER_OP(\"IsNan\")\n    .Input(\"x: T\")\n    .Output(\"y: bool\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"IsInf\")\n    .Input(\"x: T\")\n    .Output(\"y: bool\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"IsFinite\")\n    .Input(\"x: T\")\n    .Output(\"y: bool\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"Sign\")\n    .Input(\"x: T\")\n    .Output(\"y: T\")\n    .Attr(\n        \"T: {bfloat16, half, float, double, int8, int16, int32, int64, \"\n        \"complex64, complex128}\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"Floor\")\n    .Input(\"x: T\")\n    .Output(\"y: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"Ceil\")\n    .Input(\"x: T\")\n    .Output(\"y: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"Rint\")\n    .Input(\"x: T\")\n    .Output(\"y: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\n// Declares cwise binary operations signature: 't, 't -> 't.\n\n#define BINARY_MORE()                                                          \\\n  Input(\"x: T\").Input(\"y: T\").Output(\"z: T\").Attr(                             \\\n      \"T: {bfloat16, half, float, double, uint8, int8, uint16, int16, int32, \" \\\n      \"uint32, uint64, int64, complex64, complex128}\")\n\n#define BINARY_FEWER()                                               \\\n  Input(\"x: T\").Input(\"y: T\").Output(\"z: T\").Attr(                   \\\n      \"T: {bfloat16, half, float, double, int32, int64, complex64, \" \\\n      \"complex128}\")\n\nREGISTER_OP(\"Add\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\n        \"T: {bfloat16, half, float, double, uint8, int8, int16, int32, int64, \"\n        \"complex64, complex128, string}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"AddV2\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\n        \"T: {bfloat16, half, float, double, uint8, uint16, uint32, uint64, \"\n        \"int8, int16, int32, int64, complex64, complex128}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn)\n    .SetIsAggregate()\n    .SetIsCommutative();\n\n#ifdef INTEL_MKL\nREGISTER_OP(\"_MklAdd\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Input(\"mkl_x: uint8\")\n    .Input(\"mkl_y: uint8\")\n    .Output(\"z: T\")\n    .Output(\"mkl_z: uint8\")\n    .Attr(\n        \"T: {half, float, double, uint8, int8, int16, int32, int64, complex64, \"\n        \"complex128, string, bfloat16}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn)\n    .Doc(R\"doc(\nReturns `x` + `y` element-wise.\n\n*NOTE*: `tf.math.add` supports broadcasting. `tf.math.add_n` does not. More about broadcasting\n[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html).\n)doc\");\n\nREGISTER_OP(\"_MklAddV2\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Input(\"mkl_x: uint8\")\n    .Input(\"mkl_y: uint8\")\n    .Output(\"z: T\")\n    .Output(\"mkl_z: uint8\")\n    .Attr(\n        \"T: {bfloat16, half, float, double, uint8, int8, int16, int32, int64, \"\n        \"complex64, complex128}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn)\n    .SetIsAggregate()\n    .SetIsCommutative()\n    .Doc(R\"doc(\nReturns `x` + `y` element-wise.\n*NOTE*: `tf.math.add` supports broadcasting. `tf.math.add_n` does not. More about broadcasting\n[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html).\n)doc\");\n#endif  // INTEL_MKL\n\nREGISTER_OP(\"Sub\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\n        \"T: {bfloat16, half, float, double, uint8, int8, uint16, int16, int32, \"\n        \"int64, complex64, complex128, uint32, uint64}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"_MklSub\")\n    .BINARY_FEWER()\n    .Input(\"mkl_x: uint8\")\n    .Input(\"mkl_y: uint8\")\n    .Output(\"mkl_z: uint8\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn)\n    .Doc(R\"doc(\nReturns x - y element-wise.\n\n*NOTE*: `Sub` supports broadcasting. More about broadcasting\n[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)\n)doc\");\n\nREGISTER_OP(\"Mul\").BINARY_MORE().SetIsCommutative().SetShapeFn(\n    shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"MulNoNan\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {bfloat16, half, float, double, complex64, complex128}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\n// Note: This op is not commutative w.r.t. to all its inputs.\nREGISTER_OP(\"_MklMul\")\n    .BINARY_MORE()\n    .Input(\"mkl_x: uint8\")\n    .Input(\"mkl_y: uint8\")\n    .Output(\"mkl_z: uint8\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn)\n    .Doc(R\"doc(\nReturns x * y element-wise.\n\n*NOTE*: `Mul` supports broadcasting. More about broadcasting\n[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)\n)doc\");\n\nREGISTER_OP(\"Div\").BINARY_MORE().SetShapeFn(\n    shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"DivNoNan\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {half, float, bfloat16, double, complex64, complex128}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"FloorDiv\")\n    .BINARY_MORE()\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"TruncateDiv\")\n    .BINARY_MORE()\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"RealDiv\").BINARY_MORE().SetShapeFn(\n    shape_inference::BroadcastBinaryOpShapeFn);\n\n// Note SquaredDifference implements conj(x - y)*(x - y).\nREGISTER_OP(\"SquaredDifference\")\n    .BINARY_FEWER()\n    .SetIsCommutative()\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\n// Note: This op is not commutative w.r.t. to all its inputs.\nREGISTER_OP(\"_MklSquaredDifference\")\n    .BINARY_FEWER()\n    .Input(\"mkl_x: uint8\")\n    .Input(\"mkl_y: uint8\")\n    .Output(\"mkl_z: uint8\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn)\n    .Doc(R\"doc(\nReturns (x - y)(x - y) element-wise.\n\n*NOTE*: `SquaredDifference` supports broadcasting. More about broadcasting\n[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)\n)doc\");\n\nREGISTER_OP(\"Xlogy\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {half, float, double, complex64, complex128}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Xlog1py\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {half, float, double, complex64, complex128}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Xdivy\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {half, float, double, complex64, complex128}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\n#undef BINARY_FEWER\n#undef BINARY_MORE\n\nREGISTER_OP(\"Maximum\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\n        \"T: {bfloat16, half, float, double, int8, uint8, int16, uint16, \"\n        \"int32, uint32, int64, uint64}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\n// Note: This op is not commutative w.r.t. to all its inputs.\nREGISTER_OP(\"_MklMaximum\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Input(\"mkl_x: uint8\")\n    .Input(\"mkl_y: uint8\")\n    .Output(\"z: T\")\n    .Output(\"mkl_z: uint8\")\n    .Attr(\"T: {half, float, double, int32, int64, bfloat16}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn)\n    .Doc(R\"doc(\nReturns the max of x and y (i.e. x > y ? x : y) element-wise.\n\n*NOTE*: `Maximum` supports broadcasting. More about broadcasting\n[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)\n)doc\");\n\nREGISTER_OP(\"Minimum\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\n        \"T: {bfloat16, half, float, double, int8, uint8, int16, uint16, \"\n        \"int32, uint32, int64, uint64}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Mod\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {int32, int64, float16, half, bfloat16, float, double}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"FloorMod\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\n        \"T: {int8, int16, int32, int64, uint8, uint16, uint32, uint64, \"\n        \"bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"TruncateMod\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {int32, int64, bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Pow\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: T\")\n    .Attr(\n        \"T: {bfloat16, float, half, double, int8, int16, int32, int64, \"\n        \"complex64, complex128}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Igammac\")\n    .Input(\"a: T\")\n    .Input(\"x: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Igamma\")\n    .Input(\"a: T\")\n    .Input(\"x: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"IgammaGradA\")\n    .Input(\"a: T\")\n    .Input(\"x: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {float, double}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Zeta\")\n    .Input(\"x: T\")\n    .Input(\"q: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {float, double}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Polygamma\")\n    .Input(\"a: T\")\n    .Input(\"x: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {float, double}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Atan2\")\n    .Input(\"y: T\")\n    .Input(\"x: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Betainc\")\n    .Input(\"a: T\")\n    .Input(\"b: T\")\n    .Input(\"x: T\")\n    .Output(\"z: T\")\n    .Attr(\"T: {float, double}\")\n    .SetShapeFn([](InferenceContext* c) {\n      const int num_inputs = 3;\n      ShapeHandle output = c->UnknownShape();\n      int num_scalars = 0;\n      ShapeHandle some_non_scalar;\n      for (int i = 0; i < num_inputs; ++i) {\n        ShapeHandle in = c->input(i);\n        if (!c->RankKnown(in)) {\n          some_non_scalar = in;\n          // An input with unknown rank could be either a scalar (to be\n          // broadcast) or some other shape.\n        } else if (c->Rank(in) == 0) {\n          // Input is a scalar, it will be broadcast to the output shape.\n          ++num_scalars;\n        } else {\n          TF_RETURN_IF_ERROR(c->Merge(output, in, &output));\n          some_non_scalar = output;\n        }\n      }\n\n      if (num_scalars == num_inputs - 1) {\n        // If all but one input is known to be a scalar, then output is the\n        // remaining input.\n        output = some_non_scalar;\n      } else if (num_scalars == num_inputs) {\n        // If all are scalars, output is scalar; pick the first one arbitrarily.\n        output = c->input(0);\n      }\n\n      c->set_output(0, output);\n      return Status::OK();\n    });\n\n// --------------------------------------------------------------------------\n\n// Declares cwise binary comparison operations signature: 't, 't -> bool,\n// where 't has a natural total order.\n#define COMPARISON()             \\\n  Input(\"x: T\")                  \\\n      .Input(\"y: T\")             \\\n      .Output(\"z: bool\")         \\\n      .Attr(\"T: realnumbertype\") \\\n      .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn)\n\nREGISTER_OP(\"Less\").COMPARISON();\n\nREGISTER_OP(\"LessEqual\").COMPARISON();\n\nREGISTER_OP(\"Greater\").COMPARISON();\n\nREGISTER_OP(\"GreaterEqual\").COMPARISON();\n\n#undef COMPARISON\n\n// --------------------------------------------------------------------------\n\n#define EQUALITY_COMPARISON()                                      \\\n  Input(\"x: T\")                                                    \\\n      .Input(\"y: T\")                                               \\\n      .Output(\"z: bool\")                                           \\\n      .SetIsCommutative()                                          \\\n      .Attr(\"T: type\")                                             \\\n      .Attr(\"incompatible_shape_error: bool = true\")               \\\n      .SetShapeFn([](InferenceContext* c) {                        \\\n        ShapeHandle x = c->input(0);                               \\\n        ShapeHandle y = c->input(1);                               \\\n        ShapeHandle output;                                        \\\n        bool incompatible_shape_error;                             \\\n        TF_RETURN_IF_ERROR(c->GetAttr(\"incompatible_shape_error\",  \\\n                                      &incompatible_shape_error)); \\\n        TF_RETURN_IF_ERROR(BroadcastBinaryOpOutputShapeFnHelper(   \\\n            c, x, y, incompatible_shape_error, &output));          \\\n        c->set_output(0, output);                                  \\\n        return Status::OK();                                       \\\n      })\n\nREGISTER_OP(\"Equal\").EQUALITY_COMPARISON();\n\nREGISTER_OP(\"NotEqual\").EQUALITY_COMPARISON();\n\n#undef EQUALITY_COMPARISON\n\nREGISTER_OP(\"ApproximateEqual\")\n    .Input(\"x: T\")\n    .Input(\"y: T\")\n    .Output(\"z: bool\")\n    .SetIsCommutative()\n    .Attr(\"T: numbertype\")\n    .Attr(\"tolerance: float = 0.00001\")\n    .SetShapeFn([](InferenceContext* c) {\n      // The inputs 'x' and 'y' must have the same shape.\n      ShapeHandle data_x = c->input(0);\n      ShapeHandle data_y = c->input(1);\n      TF_RETURN_IF_ERROR(c->Merge(data_x, data_y, &data_x));\n      return shape_inference::UnchangedShape(c);\n    });\n\n// --------------------------------------------------------------------------\n\nREGISTER_OP(\"LogicalNot\")\n    .Input(\"x: bool\")\n    .Output(\"y: bool\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\n#define BINARY_LOGICAL()  \\\n  Input(\"x: bool\")        \\\n      .Input(\"y: bool\")   \\\n      .Output(\"z: bool\")  \\\n      .SetIsCommutative() \\\n      .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn)\n\nREGISTER_OP(\"LogicalAnd\").BINARY_LOGICAL();\n\nREGISTER_OP(\"LogicalOr\").BINARY_LOGICAL();\n\n#undef BINARY_LOGICAL\n\n// --------------------------------------------------------------------------\n\nREGISTER_OP(\"Select\")\n    .Input(\"condition: bool\")\n    .Input(\"t: T\")\n    .Input(\"e: T\")\n    .Output(\"output: T\")\n    .Attr(\"T: type\")\n    .SetShapeFn([](InferenceContext* c) {\n      auto* handle_data_1 = c->input_handle_shapes_and_types(1);\n      auto* handle_data_2 = c->input_handle_shapes_and_types(2);\n      // Merge handle shape and dtype if applicable.\n      if (handle_data_1 != nullptr && handle_data_2 != nullptr) {\n        const auto size = handle_data_1->size();\n        std::vector<shape_inference::ShapeAndType> merged_handle_data(size);\n        if (size != handle_data_2->size()) {\n          return errors::InvalidArgument(\n              \"Trying to merge handles pointing to different numbers of \"\n              \"tensors.\");\n        }\n\n        for (int i = 0; i < size; ++i) {\n          const shape_inference::ShapeAndType& s1 = (*handle_data_1)[i];\n          const shape_inference::ShapeAndType& s2 = (*handle_data_2)[i];\n          if (s1.dtype != s2.dtype) {\n            // TODO(apassos) resolve this in the manner of b/32476923\n            return errors::InvalidArgument(\n                \"Trying to merge handles pointing to different dtypes.\");\n          }\n          merged_handle_data[i].dtype = s1.dtype;\n          TF_RETURN_IF_ERROR(\n              c->Merge(s1.shape, s2.shape, &merged_handle_data[i].shape));\n        }\n\n        c->set_output_handle_shapes_and_types(0, merged_handle_data);\n      }\n\n      // The inputs 'then' and 'else' must have the same shape.\n      ShapeHandle data = c->input(1);\n      ShapeHandle other = c->input(2);\n      TF_RETURN_IF_ERROR(c->Merge(data, other, &data));\n\n      // The input 'cond' must either have the same shape as 'then' and\n      // 'else', or be a vector if 'then' and 'else' are at least vectors.\n      ShapeHandle cond = c->input(0);\n\n      if (!c->RankKnown(cond) || !c->RankKnown(data)) {\n        c->set_output(0, data);\n        return Status::OK();\n      }\n\n      // rank of shape and data is known.\n\n      const int32_t cond_rank = c->Rank(cond);\n      const int32_t data_rank = c->Rank(data);\n\n      if (cond_rank == 0) {\n        // The rank of 'cond' is a scalar.\n        // t and e can have any shape.\n        c->set_output(0, data);\n        return Status::OK();\n      }\n\n      if (cond_rank != 1) {\n        // If 'cond' is not a vector, and not a scalar,\n        // then shape must match 'then' and 'else'\n        TF_RETURN_IF_ERROR(c->Merge(data, cond, &data));\n        c->set_output(0, data);\n        return Status::OK();\n      }\n\n      if (data_rank == 0) {\n        // if 'then' and 'else' are scalar also the cond must be\n        TF_RETURN_IF_ERROR(c->Merge(data, cond, &data));\n        c->set_output(0, data);\n        return Status::OK();\n      }\n\n      if (cond_rank == 1) {\n        // if the cond is a vector and the 'then' is not a scalar,\n        // the first dimension of 'then' and 'else'\n        TF_RETURN_IF_ERROR(c->Merge(cond, c->Vector(c->Dim(data, 0)), &cond));\n        c->set_output(0, data);\n        return Status::OK();\n      }\n\n      c->set_output(0, data);\n\n      return Status::OK();\n    });\n\nREGISTER_OP(\"SelectV2\")\n    .Input(\"condition: bool\")\n    .Input(\"t: T\")\n    .Input(\"e: T\")\n    .Output(\"output: T\")\n    .Attr(\"T: type\")\n    .SetShapeFn([](InferenceContext* c) {\n      auto* handle_data_1 = c->input_handle_shapes_and_types(1);\n      auto* handle_data_2 = c->input_handle_shapes_and_types(2);\n      // Merge handle shape and dtype if applicable.\n      if (handle_data_1 != nullptr && handle_data_2 != nullptr) {\n        const auto size = handle_data_1->size();\n        std::vector<shape_inference::ShapeAndType> merged_handle_data(size);\n        if (size != handle_data_2->size()) {\n          return errors::InvalidArgument(\n              \"Trying to merge handles pointing to different numbers of \"\n              \"tensors.\");\n        }\n\n        for (int i = 0; i < size; ++i) {\n          const shape_inference::ShapeAndType& s1 = (*handle_data_1)[i];\n          const shape_inference::ShapeAndType& s2 = (*handle_data_2)[i];\n          if (s1.dtype != s2.dtype) {\n            // TODO(apassos) resolve this in the manner of b/32476923\n            return errors::InvalidArgument(\n                \"Trying to merge handles pointing to different dtypes.\");\n          }\n          merged_handle_data[i].dtype = s1.dtype;\n          TF_RETURN_IF_ERROR(\n              c->Merge(s1.shape, s2.shape, &merged_handle_data[i].shape));\n        }\n\n        c->set_output_handle_shapes_and_types(0, merged_handle_data);\n      }\n\n      // The inputs 'cond', 'then', and 'else' must be broadcastable.\n      // TODO (yongtang): Consolidate 3-ary broadcast instead of\n      // multiple 2-ary broadcast.\n      ShapeHandle cond = c->input(0);\n      ShapeHandle then = c->input(1);\n      ShapeHandle else_ = c->input(2);\n      ShapeHandle other;\n      TF_RETURN_IF_ERROR(\n          BroadcastBinaryOpOutputShapeFnHelper(c, then, else_, true, &other));\n      ShapeHandle output;\n      TF_RETURN_IF_ERROR(\n          BroadcastBinaryOpOutputShapeFnHelper(c, cond, other, true, &output));\n      c->set_output(0, output);\n      return Status::OK();\n    });\n\n// --------------------------------------------------------------------------\n\nREGISTER_OP(\"MatMul\")\n    .Input(\"a: T\")\n    .Input(\"b: T\")\n    .Output(\"product: T\")\n    .Attr(\"transpose_a: bool = false\")\n    .Attr(\"transpose_b: bool = false\")\n    .Attr(\n        \"T: {bfloat16, half, float, double, int32, int64, complex64, \"\n        \"complex128}\")\n    .SetShapeFn(shape_inference::MatMulShape);\n\n#ifdef INTEL_MKL\nREGISTER_OP(\"_MklMatMul\")\n    .Input(\"a: T\")\n    .Input(\"b: T\")\n    .Output(\"product: T\")\n    .Attr(\"transpose_a: bool = false\")\n    .Attr(\"transpose_b: bool = false\")\n    .Attr(\"T: {bfloat16, float}\")\n    .SetShapeFn(shape_inference::MatMulShape);\n#endif  // INTEL_MKL\n\nREGISTER_OP(\"SparseMatMul\")\n    .Input(\"a: Ta\")\n    .Input(\"b: Tb\")\n    .Output(\"product: float\")\n    .Attr(\"transpose_a: bool = false\")\n    .Attr(\"transpose_b: bool = false\")\n    .Attr(\"a_is_sparse: bool = false\")\n    .Attr(\"b_is_sparse: bool = false\")\n    .Attr(\"Ta: {float, bfloat16} = DT_FLOAT\")\n    .Attr(\"Tb: {float, bfloat16} = DT_FLOAT\")\n    .SetShapeFn(shape_inference::MatMulShape);\n\nREGISTER_OP(\"_FusedMatMul\")\n    .Input(\"a: T\")\n    .Input(\"b: T\")\n    .Input(\"args: num_args * T\")\n    .Output(\"product: T\")\n    .Attr(\"transpose_a: bool = false\")\n    .Attr(\"transpose_b: bool = false\")\n    .Attr(\"T: {bfloat16, float}\")\n    .Attr(\"num_args: int >= 0\")\n    .Attr(\"fused_ops: list(string) = []\")\n    // Attributes for the FusedBatchNorm ----------- //\n    .Attr(\"epsilon: float = 0.0001\")\n    // Attributes for the LeakyRelu ---------------- //\n    .Attr(\"leakyrelu_alpha: float = 0.2\")\n    // --------------------------------------------- //\n    .SetShapeFn(shape_inference::MatMulShape)\n    .Doc(R\"doc(\nPerforms a MatMul followed by a specified series of operations.\n\nThe inputs to the MatMul are specified by `a` and `b`. The series of operations\nthat follows is specified by the `fused_ops` attribute, which is a list of TF op\nnames specified as strings (e.g. \"Relu\"). They are performed in order, where the\n(first) input to each op is the output of the preceding op. The first input and\nthe output of each fused_op must be of type T.\n\nCurrently supported fused_op combinations are: [\"BiasAdd\"] and [\"BiasAdd\",A],\nwhere A is one of {\"Elu\",\"Relu\",\"Relu6\"}.\n\n* The first input to BiasAdd is the Conv2D result, and the additional BiasAdd\ninput is specified by `args`.\n* If there is an op A specified, the output of the BiasAdd is the input to op A,\nand op A produces the _FusedConv2D output. Otherwise, the BiasAdd produces the\n_FusedConv2D output.\n\n*NOTE*: Do not invoke this operator directly in Python. Grappler is\nexpected to create these operators.\n)doc\");\n\n// --------------------------------------------------------------------------\n\n// For operations where the output is a reduction function along some\n// dimensions of the input.\nREGISTER_OP(\"Sum\")\n    .Input(\"input: T\")\n    .Input(\"reduction_indices: Tidx\")\n    .Output(\"output: T\")\n    .Attr(\"keep_dims: bool = false\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::ReductionShape);\n\nREGISTER_OP(\"EuclideanNorm\")\n    .Input(\"input: T\")\n    .Input(\"reduction_indices: Tidx\")\n    .Output(\"output: T\")\n    .Attr(\"keep_dims: bool = false\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::ReductionShape);\n\nREGISTER_OP(\"Mean\")\n    .Input(\"input: T\")\n    .Input(\"reduction_indices: Tidx\")\n    .Output(\"output: T\")\n    .Attr(\"keep_dims: bool = false\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::ReductionShape);\n\nREGISTER_OP(\"Prod\")\n    .Input(\"input: T\")\n    .Input(\"reduction_indices: Tidx\")\n    .Output(\"output: T\")\n    .Attr(\"keep_dims: bool = false\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::ReductionShape);\n\nREGISTER_OP(\"Min\")\n    .Input(\"input: T\")\n    .Input(\"reduction_indices: Tidx\")\n    .Output(\"output: T\")\n    .Attr(\"keep_dims: bool = false\")\n    .Attr(\"T: {realnumbertype, quantizedtype}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::ReductionShape);\n\nREGISTER_OP(\"Max\")\n    .Input(\"input: T\")\n    .Input(\"reduction_indices: Tidx\")\n    .Output(\"output: T\")\n    .Attr(\"keep_dims: bool = false\")\n    .Attr(\"T: {realnumbertype, quantizedtype}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::ReductionShape);\n\nnamespace {\n\nStatus ArgOpShape(shape_inference::InferenceContext* c) {\n  ShapeHandle dimension_shape;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 0, &dimension_shape));\n\n  ShapeHandle input_shape = c->input(0);\n  if (!c->RankKnown(input_shape)) {\n    return shape_inference::UnknownShape(c);\n  }\n\n  const int32_t input_rank = c->Rank(input_shape);\n  if (input_rank <= 1) {\n    // Reducing a scalar/vector must return a scalar.\n    return shape_inference::ScalarShape(c);\n  }\n\n  const Tensor* dim_t = c->input_tensor(1);\n  if (dim_t == nullptr) {\n    // We don't know the value of the dimension, but we\n    // know the rank of the input, so return the correct\n    // rank with unknown dimensions.\n    std::vector<DimensionHandle> dims(input_rank - 1);\n    for (int i = 0; i < dims.size(); ++i) {\n      dims[i] = c->UnknownDim();\n    }\n\n    c->set_output(0, c->MakeShape(dims));\n    return Status::OK();\n  }\n\n  int64_t dimension_val;\n  if (dim_t->dtype() == DT_INT32) {\n    dimension_val = dim_t->scalar<int32>()();\n  } else {\n    dimension_val = dim_t->scalar<int64_t>()();\n  }\n\n  int64_t axis = dimension_val < 0 ? dimension_val + input_rank : dimension_val;\n  if (axis < 0 || axis >= input_rank) {\n    return errors::InvalidArgument(\n        \"Dimension (\", dimension_val, \") must be in the range [\", -input_rank,\n        \", \", input_rank, \"), where \", input_rank,\n        \" is the number of dimensions in the input.\");\n  }\n\n  // Return the input shape without the dimension being reduced.\n  std::vector<DimensionHandle> dims;\n  for (int i = 0; i < input_rank; ++i) {\n    if (axis != i) {\n      dims.emplace_back(c->Dim(input_shape, i));\n    }\n  }\n  c->set_output(0, c->MakeShape(dims));\n  return Status::OK();\n}\n\n}  // namespace\n\nREGISTER_OP(\"ArgMax\")\n    .Input(\"input: T\")\n    .Input(\"dimension: Tidx\")\n    .Output(\"output: output_type\")\n    .Attr(\"T: {numbertype, bool}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"output_type: {int32, int64} = DT_INT64\")\n    .SetShapeFn(ArgOpShape);\n\nREGISTER_OP(\"ArgMin\")\n    .Input(\"input: T\")\n    .Input(\"dimension: Tidx\")\n    .Output(\"output: output_type\")\n    .Attr(\"T: {numbertype, bool}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"output_type: {int32, int64} = DT_INT64\")\n    .SetShapeFn(ArgOpShape);\n\nnamespace {\n\nStatus SegmentReductionShapeFn(InferenceContext* c) {\n  ShapeHandle data_shape;\n  ShapeHandle segment_ids_shape;\n  TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), 1, &data_shape));\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &segment_ids_shape));\n\n  ShapeHandle subshape;\n  TF_RETURN_IF_ERROR(c->Subshape(data_shape, 1, &subshape));\n\n  ShapeHandle out;\n  TF_RETURN_IF_ERROR(\n      c->Concatenate(c->Vector(InferenceContext::kUnknownDim), subshape, &out));\n  c->set_output(0, out);\n  return Status::OK();\n}\n\nStatus SparseSegmentReductionShapeFn(InferenceContext* c) {\n  ShapeHandle data_shape;\n  TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), 1, &data_shape));\n\n  ShapeHandle indices_shape;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &indices_shape));\n\n  ShapeHandle segment_ids_shape;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 1, &segment_ids_shape));\n\n  // indices and segment_ids should merge cleanly.\n  ShapeHandle unused;\n  TF_RETURN_IF_ERROR(c->Merge(indices_shape, segment_ids_shape, &unused));\n\n  ShapeHandle subshape;\n  TF_RETURN_IF_ERROR(c->Subshape(data_shape, 1, &subshape));\n\n  ShapeHandle out;\n  TF_RETURN_IF_ERROR(\n      c->Concatenate(c->Vector(InferenceContext::kUnknownDim), subshape, &out));\n  c->set_output(0, out);\n  return Status::OK();\n}\n\nStatus SparseSegmentReductionGradShapeFn(InferenceContext* c) {\n  ShapeHandle data_shape;\n  TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), 1, &data_shape));\n\n  ShapeHandle indices_shape;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &indices_shape));\n\n  // indices and segment_ids should merge cleanly.\n  ShapeHandle unused;\n  TF_RETURN_IF_ERROR(c->Merge(c->input(2), indices_shape, &unused));\n\n  // output_dim0 should be a scalar\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 0, &unused));\n\n  ShapeHandle subshape;\n  TF_RETURN_IF_ERROR(c->Subshape(data_shape, 1, &subshape));\n\n  const Tensor* dim0 = c->input_tensor(3);\n  ShapeHandle dim0_shape;\n  if (dim0 == nullptr) {\n    // We don't have the value at inference time, so the output\n    // shape is unknown.\n    dim0_shape = c->Vector(InferenceContext::kUnknownDim);\n  } else {\n    auto dim0_value = dim0->scalar<int32>()();\n    if (dim0_value < 0) {\n      return errors::InvalidArgument(\n          \"Cannot specify a negative value for output_dim0\");\n    }\n    dim0_shape = c->Vector(dim0_value);\n  }\n\n  ShapeHandle out;\n  TF_RETURN_IF_ERROR(c->Concatenate(dim0_shape, subshape, &out));\n  c->set_output(0, out);\n  return Status::OK();\n}\n\nStatus SparseSegmentReductionWithNumSegmentsShapeFn(InferenceContext* c) {\n  ShapeHandle data_shape;\n  TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), 1, &data_shape));\n\n  ShapeHandle indices_shape;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &indices_shape));\n\n  ShapeHandle segment_ids_shape;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 1, &segment_ids_shape));\n\n  ShapeHandle num_segments_shape;\n  TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 0, &num_segments_shape));\n\n  // indices and segment_ids should merge cleanly.\n  ShapeHandle unused;\n  TF_RETURN_IF_ERROR(c->Merge(indices_shape, segment_ids_shape, &unused));\n\n  ShapeHandle subshape;\n  TF_RETURN_IF_ERROR(c->Subshape(data_shape, 1, &subshape));\n\n  ShapeHandle out;\n  const Tensor* dim0 = c->input_tensor(3);\n  if (dim0 == nullptr) {\n    // We don't have the value at inference time, so the output\n    // shape is unknown.\n    TF_RETURN_IF_ERROR(c->Concatenate(c->Vector(InferenceContext::kUnknownDim),\n                                      subshape, &out));\n  } else {\n    auto dim0_value = dim0->scalar<int32>()();\n    if (dim0_value < 0) {\n      return errors::InvalidArgument(\n          \"Cannot specify a negative value for num_segments\");\n    }\n    TF_RETURN_IF_ERROR(c->Concatenate(c->Vector(dim0_value), subshape, &out));\n  }\n  c->set_output(0, out);\n  return Status::OK();\n}\n}  // namespace\n\nREGISTER_OP(\"SegmentSum\")\n    .Input(\"data: T\")\n    .Input(\"segment_ids: Tindices\")\n    .Output(\"output: T\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tindices: {int32,int64}\")\n    .SetShapeFn(SegmentReductionShapeFn);\n\nREGISTER_OP(\"SegmentMean\")\n    .Input(\"data: T\")\n    .Input(\"segment_ids: Tindices\")\n    .Output(\"output: T\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tindices: {int32,int64}\")\n    .SetShapeFn(SegmentReductionShapeFn);\n\nREGISTER_OP(\"SegmentProd\")\n    .Input(\"data: T\")\n    .Input(\"segment_ids: Tindices\")\n    .Output(\"output: T\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tindices: {int32,int64}\")\n    .SetShapeFn(SegmentReductionShapeFn);\n\nREGISTER_OP(\"SegmentMin\")\n    .Input(\"data: T\")\n    .Input(\"segment_ids: Tindices\")\n    .Output(\"output: T\")\n    .Attr(\"T: realnumbertype\")\n    .Attr(\"Tindices: {int32,int64}\")\n    .SetShapeFn(SegmentReductionShapeFn);\n\nREGISTER_OP(\"SegmentMax\")\n    .Input(\"data: T\")\n    .Input(\"segment_ids: Tindices\")\n    .Output(\"output: T\")\n    .Attr(\"T: realnumbertype\")\n    .Attr(\"Tindices: {int32,int64}\")\n    .SetShapeFn(SegmentReductionShapeFn);\n\nREGISTER_OP(\"UnsortedSegmentSum\")\n    .Input(\"data: T\")\n    .Input(\"segment_ids: Tindices\")\n    .Input(\"num_segments: Tnumsegments\")\n    .Output(\"output: T\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tindices: {int32,int64}\")\n    .Attr(\"Tnumsegments: {int32,int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::UnsortedSegmentReductionShapeFn);\n\nREGISTER_OP(\"UnsortedSegmentMax\")\n    .Input(\"data: T\")\n    .Input(\"segment_ids: Tindices\")\n    .Input(\"num_segments: Tnumsegments\")\n    .Output(\"output: T\")\n    .Attr(\"T: realnumbertype\")\n    .Attr(\"Tindices: {int32,int64}\")\n    .Attr(\"Tnumsegments: {int32,int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::UnsortedSegmentReductionShapeFn);\n\nREGISTER_OP(\"UnsortedSegmentMin\")\n    .Input(\"data: T\")\n    .Input(\"segment_ids: Tindices\")\n    .Input(\"num_segments: Tnumsegments\")\n    .Output(\"output: T\")\n    .Attr(\"T: realnumbertype\")\n    .Attr(\"Tindices: {int32,int64}\")\n    .Attr(\"Tnumsegments: {int32,int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::UnsortedSegmentReductionShapeFn);\n\nREGISTER_OP(\"UnsortedSegmentProd\")\n    .Input(\"data: T\")\n    .Input(\"segment_ids: Tindices\")\n    .Input(\"num_segments: Tnumsegments\")\n    .Output(\"output: T\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tindices: {int32,int64}\")\n    .Attr(\"Tnumsegments: {int32,int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::UnsortedSegmentReductionShapeFn);\n\nREGISTER_OP(\"SparseSegmentSum\")\n    .Input(\"data: T\")\n    .Input(\"indices: Tidx\")\n    .Input(\"segment_ids: Tsegmentids\")\n    .Output(\"output: T\")\n    .Attr(\"T: realnumbertype\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"Tsegmentids: {int32, int64} = DT_INT32\")\n    .SetShapeFn(SparseSegmentReductionShapeFn);\n\nREGISTER_OP(\"SparseSegmentSumWithNumSegments\")\n    .Input(\"data: T\")\n    .Input(\"indices: Tidx\")\n    .Input(\"segment_ids: Tsegmentids\")\n    .Input(\"num_segments: Tnumsegments\")\n    .Output(\"output: T\")\n    .Attr(\"T: realnumbertype\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"Tnumsegments: {int32,int64} = DT_INT32\")\n    .Attr(\"Tsegmentids: {int32, int64} = DT_INT32\")\n    .SetShapeFn(SparseSegmentReductionWithNumSegmentsShapeFn);\n\nREGISTER_OP(\"SparseSegmentSumGrad\")\n    .Input(\"grad: T\")\n    .Input(\"indices: Tidx\")\n    .Input(\"segment_ids: Tsegmentids\")\n    .Input(\"output_dim0: int32\")\n    .Output(\"output: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"Tsegmentids: {int32, int64} = DT_INT32\")\n    .SetShapeFn(SparseSegmentReductionGradShapeFn);\n\nREGISTER_OP(\"SparseSegmentMean\")\n    .Input(\"data: T\")\n    .Input(\"indices: Tidx\")\n    .Input(\"segment_ids: Tsegmentids\")\n    .Output(\"output: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"Tsegmentids: {int32, int64} = DT_INT32\")\n    .SetShapeFn(SparseSegmentReductionShapeFn);\n\nREGISTER_OP(\"SparseSegmentMeanWithNumSegments\")\n    .Input(\"data: T\")\n    .Input(\"indices: Tidx\")\n    .Input(\"segment_ids: Tsegmentids\")\n    .Input(\"num_segments: Tnumsegments\")\n    .Output(\"output: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"Tnumsegments: {int32,int64} = DT_INT32\")\n    .Attr(\"Tsegmentids: {int32, int64} = DT_INT32\")\n    .SetShapeFn(SparseSegmentReductionWithNumSegmentsShapeFn);\n\nREGISTER_OP(\"SparseSegmentMeanGrad\")\n    .Input(\"grad: T\")\n    .Input(\"indices: Tidx\")\n    .Input(\"segment_ids: Tsegmentids\")\n    .Input(\"output_dim0: int32\")\n    .Output(\"output: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"Tsegmentids: {int32, int64} = DT_INT32\")\n    .SetShapeFn(SparseSegmentReductionGradShapeFn);\n\nREGISTER_OP(\"SparseSegmentSqrtN\")\n    .Input(\"data: T\")\n    .Input(\"indices: Tidx\")\n    .Input(\"segment_ids: Tsegmentids\")\n    .Output(\"output: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"Tsegmentids: {int32, int64} = DT_INT32\")\n    .SetShapeFn(SparseSegmentReductionShapeFn);\n\nREGISTER_OP(\"SparseSegmentSqrtNWithNumSegments\")\n    .Input(\"data: T\")\n    .Input(\"indices: Tidx\")\n    .Input(\"segment_ids: Tsegmentids\")\n    .Input(\"num_segments: Tnumsegments\")\n    .Output(\"output: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"Tnumsegments: {int32,int64} = DT_INT32\")\n    .Attr(\"Tsegmentids: {int32, int64} = DT_INT32\")\n    .SetShapeFn(SparseSegmentReductionWithNumSegmentsShapeFn);\n\nREGISTER_OP(\"SparseSegmentSqrtNGrad\")\n    .Input(\"grad: T\")\n    .Input(\"indices: Tidx\")\n    .Input(\"segment_ids: Tsegmentids\")\n    .Input(\"output_dim0: int32\")\n    .Output(\"output: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .Attr(\"Tsegmentids: {int32, int64} = DT_INT32\")\n    .SetShapeFn(SparseSegmentReductionGradShapeFn);\n\nREGISTER_OP(\"All\")\n    .Input(\"input: bool\")\n    .Input(\"reduction_indices: Tidx\")\n    .Output(\"output: bool\")\n    .Attr(\"keep_dims: bool = false\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::ReductionShape);\n\nREGISTER_OP(\"Any\")\n    .Input(\"input: bool\")\n    .Input(\"reduction_indices: Tidx\")\n    .Attr(\"keep_dims: bool = false\")\n    .Output(\"output: bool\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::ReductionShape);\n\n// --------------------------------------------------------------------------\n\nnamespace {\n\ntemplate <typename T>\nStatus RangeSize(const Tensor* start_t, const Tensor* limit_t,\n                 const Tensor* delta_t, InferenceContext* const c) {\n  T start = start_t->scalar<T>()();\n  T limit = limit_t->scalar<T>()();\n  T delta = delta_t->scalar<T>()();\n  if (start > limit && delta > T(0)) {\n    return errors::InvalidArgument(\n        \"Requires start <= limit when delta > 0: \", start, \"/\", limit);\n  }\n  if (start < limit && delta < T(0)) {\n    return errors::InvalidArgument(\n        \"Requires start >= limit when delta < 0: \", start, \"/\", limit);\n  }\n  if (delta == T(0)) {\n    return errors::InvalidArgument(\"Requires delta != 0\");\n  }\n\n  auto size = (std::is_integral<T>::value\n                   ? ((Eigen::numext::abs(limit - start) +\n                       Eigen::numext::abs(delta) - T(1)) /\n                      Eigen::numext::abs(delta))\n                   : (Eigen::numext::ceil(\n                         Eigen::numext::abs((limit - start) / delta))));\n\n  // Undefined behaviour if size will not fit into int64_t\n  if (size > std::numeric_limits<int64_t>::max()) {\n    return errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \",\n                                   std::numeric_limits<int64_t>::max());\n  }\n\n  c->set_output(0, c->Vector(static_cast<int64_t>(size)));\n  return Status::OK();\n}\n\n}  // namespace\n\nREGISTER_OP(\"Range\")\n    .Input(\"start: Tidx\")\n    .Input(\"limit: Tidx\")\n    .Input(\"delta: Tidx\")\n    .Output(\"output: Tidx\")\n    .Attr(\n        \"Tidx: \"\n        \"{bfloat16, half, float, double, int8, int16, int32, int64, uint32} = \"\n        \"DT_INT32\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle unused;\n      TF_RETURN_WITH_CONTEXT_IF_ERROR(c->WithRank(c->input(0), 0, &unused),\n                                      \" for 'start'\");\n      TF_RETURN_WITH_CONTEXT_IF_ERROR(c->WithRank(c->input(1), 0, &unused),\n                                      \" for 'limit'\");\n      TF_RETURN_WITH_CONTEXT_IF_ERROR(c->WithRank(c->input(2), 0, &unused),\n                                      \" for 'delta'\");\n      const Tensor* start_t = c->input_tensor(0);\n      const Tensor* limit_t = c->input_tensor(1);\n      const Tensor* delta_t = c->input_tensor(2);\n      DataType dtype;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"Tidx\", &dtype));\n      if (start_t == nullptr || limit_t == nullptr || delta_t == nullptr) {\n        c->set_output(0, c->Vector(InferenceContext::kUnknownDim));\n        return Status::OK();\n      }\n      if (dtype == DT_INT32) {\n        return RangeSize<int32>(start_t, limit_t, delta_t, c);\n      } else if (dtype == DT_INT16) {\n        return RangeSize<int16>(start_t, limit_t, delta_t, c);\n      } else if (dtype == DT_INT8) {\n        return RangeSize<int8>(start_t, limit_t, delta_t, c);\n      } else if (dtype == DT_INT64) {\n        return RangeSize<int64_t>(start_t, limit_t, delta_t, c);\n      } else if (dtype == DT_UINT32) {\n        return RangeSize<uint32>(start_t, limit_t, delta_t, c);\n      } else if (dtype == DT_FLOAT) {\n        return RangeSize<float>(start_t, limit_t, delta_t, c);\n      } else if (dtype == DT_DOUBLE) {\n        return RangeSize<double>(start_t, limit_t, delta_t, c);\n      } else if (dtype == DT_BFLOAT16) {\n        return RangeSize<bfloat16>(start_t, limit_t, delta_t, c);\n      } else {\n        return errors::InvalidArgument(\"Unsupported dtype\", dtype);\n      }\n      return Status::OK();\n    });\n\nREGISTER_OP(\"LinSpace\")\n    .Input(\"start: T\")\n    .Input(\"stop: T\")\n    .Input(\"num: Tidx\")\n    .Output(\"output: T\")\n    .Attr(\"T: {bfloat16, half, float, double}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle unused;\n      TF_RETURN_WITH_CONTEXT_IF_ERROR(c->WithRank(c->input(0), 0, &unused),\n                                      \" for 'start'\");\n      TF_RETURN_WITH_CONTEXT_IF_ERROR(c->WithRank(c->input(1), 0, &unused),\n                                      \" for 'stop'\");\n      TF_RETURN_WITH_CONTEXT_IF_ERROR(c->WithRank(c->input(2), 0, &unused),\n                                      \" for 'num'\");\n      const Tensor* num_t = c->input_tensor(2);\n      if (num_t == nullptr) {\n        c->set_output(0, c->Vector(InferenceContext::kUnknownDim));\n        return Status::OK();\n      }\n\n      int64_t num;\n      if (num_t->dtype() == DT_INT32) {\n        num = num_t->scalar<int32>()();\n      } else {\n        num = num_t->scalar<int64_t>()();\n      }\n      if (num <= 0) return errors::InvalidArgument(\"Requires num > 0: \", num);\n      c->set_output(0, c->Vector(num));\n      return Status::OK();\n    });\n\nREGISTER_OP(\"Complex\")\n    .Input(\"real: T\")\n    .Input(\"imag: T\")\n    .Output(\"out: Tout\")\n    .Attr(\"T: {float, double} = DT_FLOAT\")\n    .Attr(\"Tout: {complex64, complex128} = DT_COMPLEX64\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"Real\")\n    .Input(\"input: T\")\n    .Output(\"output: Tout\")\n    .Attr(\"T: {complex64, complex128} = DT_COMPLEX64\")\n    .Attr(\"Tout: {float, double} = DT_FLOAT\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"Imag\")\n    .Input(\"input: T\")\n    .Output(\"output: Tout\")\n    .Attr(\"T: {complex64, complex128} = DT_COMPLEX64\")\n    .Attr(\"Tout: {float, double} = DT_FLOAT\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"Angle\")\n    .Input(\"input: T\")\n    .Output(\"output: Tout\")\n    .Attr(\"T: {complex64, complex128} = DT_COMPLEX64\")\n    .Attr(\"Tout: {float, double} = DT_FLOAT\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"Conj\")\n    .Input(\"input: T\")\n    .Output(\"output: T\")\n    .Attr(\"T: {complex64, complex128, variant} = DT_COMPLEX64\")\n    .SetShapeFn([](InferenceContext* c) {\n      c->set_output(0, c->input(0));\n      auto* handle_data = c->input_handle_shapes_and_types(0);\n      if (handle_data != nullptr) {\n        c->set_output_handle_shapes_and_types(0, *handle_data);\n      }\n      return Status::OK();\n    });\n\n// --------------------------------------------------------------------------\n\nREGISTER_OP(\"Cross\")\n    .Input(\"a: T\")\n    .Input(\"b: T\")\n    .Output(\"product: T\")\n    .Attr(\"T: realnumbertype\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle a_shape;\n      ShapeHandle b_shape;\n      // * Input rank >= 1.\n      TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), 1, &a_shape));\n      TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(1), 1, &b_shape));\n\n      // * Both inputs have the same shape.\n      TF_RETURN_IF_ERROR(c->Merge(a_shape, b_shape, &a_shape));\n\n      // * input_shape[-1] == 3.\n      if (c->RankKnown(a_shape)) {\n        int rank = c->Rank(a_shape);\n        auto dim = c->Dim(a_shape, rank - 1);\n        TF_RETURN_IF_ERROR(c->WithValue(dim, 3, &dim));\n      }\n      c->set_output(0, a_shape);\n      return Status::OK();\n    });\n\n// --------------------------------------------------------------------------\n\nREGISTER_OP(\"HistogramFixedWidth\")\n    .Input(\"values: T\")\n    .Input(\"value_range: T\")\n    .Input(\"nbins: int32\")\n    .Output(\"out: dtype\")\n    .Attr(\"T: {int32, int64, float32, float64}\")\n    .Attr(\"dtype: {int32, int64} = DT_INT32\")\n    .SetShapeFn([](InferenceContext* c) {\n      // value_range should be a vector.\n      ShapeHandle value_range_shape;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &value_range_shape));\n      // value_range should have two elements.\n      DimensionHandle unused;\n      TF_RETURN_IF_ERROR(\n          c->WithValue(c->Dim(value_range_shape, 0), 2, &unused));\n      // nbins should be a scalar.\n      ShapeHandle nbins_shape;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 0, &nbins_shape));\n\n      // If nbins is available, set the shape from nbins.\n      const Tensor* nbins_input = c->input_tensor(2);\n      if (nbins_input != nullptr) {\n        int64_t nbins;\n        TF_RETURN_IF_ERROR(c->GetScalarFromTensor(nbins_input, &nbins));\n        // nbins has to be positive.\n        if (nbins <= 0) {\n          return errors::InvalidArgument(\"Requires nbins > 0: \", nbins);\n        }\n        c->set_output(0, c->Vector(nbins));\n      } else {\n        c->set_output(0, c->UnknownShapeOfRank(1));\n      }\n      return Status::OK();\n    });\n\nREGISTER_OP(\"Bincount\")\n    .Input(\"arr: int32\")\n    .Input(\"size: int32\")\n    .Input(\"weights: T\")\n    .Attr(\"T: {int32, int64, float32, float64}\")\n    .Output(\"bins: T\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle unused;\n      // The input `size` must be a scalar.\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 0, &unused));\n\n      const Tensor* size_tensor = c->input_tensor(1);\n      if (size_tensor == nullptr) {\n        // Return unknown shape if size is not known.\n        c->set_output(0, c->UnknownShapeOfRank(1));\n        return Status::OK();\n      }\n\n      if (size_tensor->dims() != 0) {\n        return errors::InvalidArgument(\"Shape must be rank 0 but is rank \",\n                                       size_tensor->dims());\n      }\n\n      // Return `[size]` shape if size is known.\n      int32_t size_val = size_tensor->scalar<int32>()();\n      if (size_val < 0) {\n        return errors::InvalidArgument(\"size (\", size_val,\n                                       \") must be non-negative\");\n      }\n      c->set_output(0, c->MakeShape({size_val}));\n      return Status::OK();\n    });\n\nREGISTER_OP(\"DenseBincount\")\n    .Input(\"input: Tidx\")\n    .Input(\"size: Tidx\")\n    .Input(\"weights: T\")\n    .Attr(\"Tidx: {int32, int64}\")\n    .Attr(\"T: {int32, int64, float32, float64}\")\n    .Attr(\"binary_output: bool = false\")\n    .Output(\"output: T\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle unused;\n      // The input `input` must be at most matrix.\n      TF_RETURN_IF_ERROR(c->WithRankAtMost(c->input(0), 2, &unused));\n      // The input `size` must be a scalar.\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 0, &unused));\n\n      const Tensor* size_tensor = c->input_tensor(1);\n      if (size_tensor == nullptr) {\n        // Return unknown shape if size is not known.\n        c->set_output(0, c->UnknownShape());\n        return Status::OK();\n      }\n      if (size_tensor->dims() != 0) {\n        return errors::InvalidArgument(\"Shape must be rank 0 but is rank \",\n                                       size_tensor->dims());\n      }\n\n      int64_t size_val;\n      DataType dtype;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"Tidx\", &dtype));\n      if (dtype == DT_INT32) {\n        size_val = static_cast<int64_t>(size_tensor->scalar<int32>()());\n      } else if (dtype == DT_INT64) {\n        size_val = size_tensor->scalar<int64_t>()();\n      } else {\n        return errors::InvalidArgument(\"size dtype must be int32 or int64\");\n      }\n      // Return `[size]` shape if size is known.\n      if (size_val < 0) {\n        return errors::InvalidArgument(\"size (\", size_val,\n                                       \") must be non-negative\");\n      }\n      if (c->Rank(c->input(0)) == 1) {\n        c->set_output(0, c->MakeShape({size_val}));\n      } else if (c->Rank(c->input(0)) == 2) {\n        c->set_output(0, c->MakeShape({c->Dim(c->input(0), 0), size_val}));\n      }\n      return Status::OK();\n    });\n\nREGISTER_OP(\"SparseBincount\")\n    .Input(\"indices: int64\")\n    .Input(\"values: Tidx\")\n    .Input(\"dense_shape: int64\")\n    .Input(\"size: Tidx\")\n    .Input(\"weights: T\")\n    .Attr(\"Tidx: {int32, int64}\")\n    .Attr(\"T: {int32, int64, float32, float64}\")\n    .Attr(\"binary_output: bool = false\")\n    .Output(\"output: T\")\n    .SetShapeFn([](InferenceContext* c) {\n      const Tensor* size_tensor = c->input_tensor(3);\n      if (size_tensor == nullptr) {\n        // Return unknown shape if size is not known.\n        c->set_output(0, c->UnknownShape());\n        return Status::OK();\n      }\n      if (size_tensor->dims() != 0) {\n        return errors::InvalidArgument(\"Shape must be rank 0 but is rank \",\n                                       size_tensor->dims());\n      }\n\n      int64_t size_val;\n      DataType dtype;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"Tidx\", &dtype));\n      if (dtype == DT_INT32) {\n        size_val = static_cast<int64_t>(size_tensor->scalar<int32>()());\n      } else if (dtype == DT_INT64) {\n        size_val = size_tensor->scalar<int64_t>()();\n      } else {\n        return errors::InvalidArgument(\"size dtype must be int32 or int64\");\n      }\n      // Return `[size]` shape if size is known.\n      if (size_val < 0) {\n        return errors::InvalidArgument(\"size (\", size_val,\n                                       \") must be non-negative\");\n      }\n\n      const Tensor* shape_tensor = c->input_tensor(2);\n      if (shape_tensor == nullptr) {\n        // Return unknown shape if size is not known.\n        c->set_output(0, c->UnknownShape());\n        return Status::OK();\n      }\n      if (shape_tensor->NumElements() == 1) {\n        c->set_output(0, c->MakeShape({size_val}));\n      } else if (shape_tensor->NumElements() == 2) {\n        c->set_output(\n            0, c->MakeShape({shape_tensor->flat<int64_t>()(0), size_val}));\n      } else {\n        return errors::InvalidArgument(\"Input must be less than rank 2\");\n      }\n      return Status::OK();\n    });\n\nREGISTER_OP(\"RaggedBincount\")\n    .Input(\"splits: int64\")\n    .Input(\"values: Tidx\")\n    .Input(\"size: Tidx\")\n    .Input(\"weights: T\")\n    .Attr(\"Tidx: {int32, int64}\")\n    .Attr(\"T: {int32, int64, float32, float64}\")\n    .Attr(\"binary_output: bool = false\")\n    .Output(\"output: T\")\n    .SetShapeFn([](InferenceContext* c) {\n      c->set_output(0, c->UnknownShape());\n      return Status::OK();\n    });\n\nREGISTER_OP(\"Cumsum\")\n    .Input(\"x: T\")\n    .Input(\"axis: Tidx\")\n    .Attr(\"exclusive: bool = false\")\n    .Attr(\"reverse: bool = false\")\n    .Output(\"out: T\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"Cumprod\")\n    .Input(\"x: T\")\n    .Input(\"axis: Tidx\")\n    .Attr(\"exclusive: bool = false\")\n    .Attr(\"reverse: bool = false\")\n    .Output(\"out: T\")\n    .Attr(\"T: numbertype\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"CumulativeLogsumexp\")\n    .Input(\"x : T\")\n    .Input(\"axis: Tidx\")\n    .Attr(\"exclusive: bool = false\")\n    .Attr(\"reverse: bool = false\")\n    .Output(\"out: T\")\n    .Attr(\"T: {float16, float32, float64}\")\n    .Attr(\"Tidx: {int32, int64} = DT_INT32\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"QuantizedMatMul\")\n    .Input(\"a: T1\")\n    .Input(\"b: T2\")\n    .Input(\"min_a: float\")\n    .Input(\"max_a: float\")\n    .Input(\"min_b: float\")\n    .Input(\"max_b: float\")\n    .Output(\"out: Toutput\")\n    .Output(\"min_out: float\")\n    .Output(\"max_out: float\")\n    .Attr(\"T1: quantizedtype\")\n    .Attr(\"T2: quantizedtype\")\n    .Attr(\"Toutput: quantizedtype = DT_QINT32\")\n    .Attr(\"transpose_a: bool = false\")\n    .Attr(\"transpose_b: bool = false\")\n    .Attr(\"Tactivation: quantizedtype = DT_QUINT8\")\n    .SetShapeFn([](InferenceContext* c) {\n      TF_RETURN_IF_ERROR(shape_inference::MatMulShape(c));\n      ShapeHandle unused;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(4), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(5), 0, &unused));\n\n      c->set_output(1, c->Scalar());\n      c->set_output(2, c->Scalar());\n      return Status::OK();\n    });\n\n// Note: This op is not commutative w.r.t. to all its inputs.\nREGISTER_OP(\"QuantizedMul\")\n    .Input(\"x: T1\")\n    .Input(\"y: T2\")\n    .Input(\"min_x: float\")\n    .Input(\"max_x: float\")\n    .Input(\"min_y: float\")\n    .Input(\"max_y: float\")\n    .Output(\"z: Toutput\")\n    .Output(\"min_z: float\")\n    .Output(\"max_z: float\")\n    .Attr(\"T1: quantizedtype\")\n    .Attr(\"T2: quantizedtype\")\n    .Attr(\"Toutput: quantizedtype = DT_QINT32\")\n    .SetShapeFn([](InferenceContext* c) {\n      TF_RETURN_IF_ERROR(shape_inference::BroadcastBinaryOpShapeFn(c));\n      c->set_output(1, c->Scalar());\n      c->set_output(2, c->Scalar());\n      return Status::OK();\n    });\n\n// Note: This op is not commutative w.r.t. to all its inputs.\nREGISTER_OP(\"QuantizedAdd\")\n    .Input(\"x: T1\")\n    .Input(\"y: T2\")\n    .Input(\"min_x: float\")\n    .Input(\"max_x: float\")\n    .Input(\"min_y: float\")\n    .Input(\"max_y: float\")\n    .Output(\"z: Toutput\")\n    .Output(\"min_z: float\")\n    .Output(\"max_z: float\")\n    .Attr(\"T1: quantizedtype\")\n    .Attr(\"T2: quantizedtype\")\n    .Attr(\"Toutput: quantizedtype = DT_QINT32\")\n    .SetShapeFn([](InferenceContext* c) {\n      TF_RETURN_IF_ERROR(shape_inference::BroadcastBinaryOpShapeFn(c));\n      // min_x, max_x, min_y, max_y should be scalar.\n      ShapeHandle unused;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(4), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(5), 0, &unused));\n\n      c->set_output(1, c->Scalar());\n      c->set_output(2, c->Scalar());\n      return Status::OK();\n    });\n\nREGISTER_OP(\"QuantizeDownAndShrinkRange\")\n    .Input(\"input: Tinput\")\n    .Input(\"input_min: float\")\n    .Input(\"input_max: float\")\n    .Output(\"output: out_type\")\n    .Output(\"output_min: float\")\n    .Output(\"output_max: float\")\n    .Attr(\"Tinput: quantizedtype\")\n    .Attr(\"out_type: quantizedtype\")\n    .SetShapeFn([](InferenceContext* c) {\n      TF_RETURN_IF_ERROR(shape_inference::UnchangedShape(c));\n      ShapeHandle unused;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 0, &unused));\n      c->set_output(1, c->Scalar());\n      c->set_output(2, c->Scalar());\n      return Status::OK();\n    });\n\nREGISTER_OP(\"Requantize\")\n    .Input(\"input: Tinput\")\n    .Input(\"input_min: float\")\n    .Input(\"input_max: float\")\n    .Input(\"requested_output_min: float\")\n    .Input(\"requested_output_max: float\")\n    .Output(\"output: out_type\")\n    .Output(\"output_min: float\")\n    .Output(\"output_max: float\")\n    .Attr(\"Tinput: quantizedtype\")\n    .Attr(\"out_type: quantizedtype\")\n    .SetShapeFn([](InferenceContext* c) {\n      TF_RETURN_IF_ERROR(shape_inference::UnchangedShape(c));\n      ShapeHandle unused;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(4), 0, &unused));\n      c->set_output(1, c->Scalar());\n      c->set_output(2, c->Scalar());\n      return Status::OK();\n    });\n\nREGISTER_OP(\"RequantizationRange\")\n    .Input(\"input: Tinput\")\n    .Input(\"input_min: float\")\n    .Input(\"input_max: float\")\n    .Output(\"output_min: float\")\n    .Output(\"output_max: float\")\n    .Attr(\"Tinput: quantizedtype\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle unused;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 0, &unused));\n      c->set_output(0, c->Scalar());\n      c->set_output(1, c->Scalar());\n      return Status::OK();\n    });\n\n// --------------------------------------------------------------------------\n\nREGISTER_OP(\"Bucketize\")\n    .Input(\"input: T\")\n    .Output(\"output: int32\")\n    .Attr(\"T: {int32, int64, float, double}\")\n    .Attr(\"boundaries: list(float)\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\nREGISTER_OP(\"ClipByValue\")\n    .Input(\"t: T\")\n    .Input(\"clip_value_min: T\")\n    .Input(\"clip_value_max: T\")\n    .Output(\"output: T\")\n    .Attr(\"T: numbertype\")\n    .SetShapeFn(shape_inference::UnchangedShape);\n\n#ifdef INTEL_MKL\n// Note: This op is not commutative w.r.t. to all its inputs.\nREGISTER_OP(\"_MklAddN\")\n    .Input(\"inputs: N * T\")\n    .Input(\"mkl_input: N * uint8\")\n    .Output(\"sum: T\")\n    .Output(\"mkl_sum: uint8\")\n    .Attr(\"N: int >= 1\")\n    .Attr(\"T: numbertype\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle cur = c->input(c->num_inputs() - 1);\n      for (int i = c->num_inputs() - 2; i >= 0; --i) {\n        TF_RETURN_WITH_CONTEXT_IF_ERROR(c->Merge(c->input(i), cur, &cur),\n                                        \"From merging shape \", i,\n                                        \" with other shapes.\");\n      }\n      c->set_output(0, cur);\n      return Status::OK();\n    })\n    .Doc(R\"doc(\nAdd two input tensors element wise using mkl kernel sum.\ninputs: Must all be the same size and shape.\n)doc\");\n\n#endif  // INTEL_MKL\n\nREGISTER_OP(\"RequantizePerChannel\")\n    .Input(\"input: T\")\n    .Input(\"input_min: float\")\n    .Input(\"input_max: float\")\n    .Input(\"requested_output_min: float\")\n    .Input(\"requested_output_max: float\")\n    .Output(\"output: out_type\")\n    .Output(\"output_min: float\")\n    .Output(\"output_max: float\")\n    .Attr(\"T: quantizedtype = DT_QINT32\")\n    .Attr(\"out_type: quantizedtype = DT_QUINT8\")\n    .SetShapeFn([](InferenceContext* c) {\n      TF_RETURN_IF_ERROR(shape_inference::UnchangedShape(c));\n      ShapeHandle unused;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 1, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(4), 0, &unused));\n      c->set_output(1, c->Scalar());\n      c->set_output(2, c->Scalar());\n      return Status::OK();\n    });\nREGISTER_OP(\"RequantizationRangePerChannel\")\n    .Input(\"input: T\")\n    .Input(\"input_min: float\")\n    .Input(\"input_max: float\")\n    .Output(\"output_min: float\")\n    .Output(\"output_max: float\")\n    .Attr(\"T: quantizedtype = DT_QINT32\")\n    .Attr(\"clip_value_max: float\")\n    .SetShapeFn([](InferenceContext* c) {\n      ShapeHandle unused;\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 1, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 1, &unused));\n      c->set_output(0, c->Scalar());\n      c->set_output(1, c->Scalar());\n      return Status::OK();\n    });\n\nREGISTER_OP(\"NextAfter\")\n    .Attr(\"T: {float64, float32} = DT_FLOAT\")\n    .Input(\"x1: T\")\n    .Input(\"x2: T\")\n    .Output(\"output: T\")\n    .SetShapeFn(shape_inference::BroadcastBinaryOpShapeFn);\n\nREGISTER_OP(\"SobolSample\")\n    .Input(\"dim: int32\")\n    .Input(\"num_results: int32\")\n    .Input(\"skip: int32\")\n    .Attr(\"dtype: {float, double} = DT_FLOAT\")\n    .Output(\"samples: dtype\")\n    .SetShapeFn([](shape_inference::InferenceContext* c) {\n      ShapeHandle unused;\n\n      // inputs must be scalars\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 0, &unused));\n      TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 0, &unused));\n\n      const Tensor* dim_t = c->input_tensor(0);\n      const Tensor* num_results_t = c->input_tensor(1);\n\n      int32_t dim = dim_t == nullptr ? InferenceContext::kUnknownDim\n                                     : dim_t->scalar<int32>()();\n\n      int32_t num_results = num_results_t == nullptr\n                                ? InferenceContext::kUnknownDim\n                                : num_results_t->scalar<int32>()();\n\n      c->set_output(0, c->Matrix(num_results, dim));\n      return Status::OK();\n    });\n\n}  // namespace tensorflow\n", "# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for tensorflow.ops.ops.\"\"\"\n\nimport numpy as np\n\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import errors_impl\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import random_seed\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.layers import convolutional\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import init_ops\nfrom tensorflow.python.ops import linalg_ops\nfrom tensorflow.python.ops import math_ops\nfrom tensorflow.python.ops import partitioned_variables\nfrom tensorflow.python.ops import random_ops\nfrom tensorflow.python.ops import variable_scope\nfrom tensorflow.python.ops import variables\nfrom tensorflow.python.platform import test\n\n\n# Returns true iff the two initializers produce the same tensor to\n# within a tiny tolerance.\ndef identicaltest(tc, init1, init2, shape=None):\n  \"\"\"Tests if two initializations are identical to within tiny tolerances.\n\n  Args:\n    tc: An instance of TensorFlowTestCase.\n    init1: An Initializer that generates a tensor of a given shape\n    init2: An Initializer that generates a tensor of a given shape\n    shape: Shape of the tensor to initialize or `None` to use a vector of length\n      100.\n\n  Returns:\n    True or False as determined by test.\n  \"\"\"\n  if shape is None:\n    shape = [100]\n  with tc.test_session(graph=ops.Graph()):\n    t1 = init1(shape).eval()\n  with tc.test_session(graph=ops.Graph()):\n    t2 = init2(shape).eval()\n  return np.allclose(t1, t2, rtol=1e-15, atol=1e-15)\n\n\ndef duplicated_initializer(tc, init, graph_seed, shape=None):\n  \"\"\"Tests duplicated random initializer within the same graph.\n\n  This test generates two random kernels from the same initializer to the same\n  graph, and checks if the results are close enough. Even given the same global,\n  seed, two different instances of random kernels should generate different\n  results.\n\n  Args:\n    tc: An instance of TensorFlowTestCase.\n    init: An Initializer that generates a tensor of a given shape\n    graph_seed: A graph-level seed to use.\n    shape: Shape of the tensor to initialize or `None` to use a vector of length\n      100.\n\n  Returns:\n    True or False as determined by test.\n  \"\"\"\n  if shape is None:\n    shape = [100]\n  with tc.test_session(graph=ops.Graph()):\n    random_seed.set_random_seed(graph_seed)\n    t1 = init(shape).eval()\n    t2 = init(shape).eval()\n    return np.allclose(t1, t2, rtol=1e-15, atol=1e-15)\n\n\ndef _init_sampler(tc, init, num):\n  \"\"\"Returns a func to generate a random tensor of shape [num].\n\n  Args:\n    tc: An instance of TensorFlowTestCase.\n    init: An Initializer that generates a tensor of a given shape\n    num: Size of 1D tensor to create.\n\n  Returns:\n    Function to generate a random tensor.\n  \"\"\"\n\n  def func():\n    with tc.test_session():\n      return init([num]).eval()\n\n  return func\n\n\nclass ConstantInitializersTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testZerosInitializer(self):\n    with self.session():\n      shape = [2, 3]\n      x = variable_scope.get_variable(\n          \"x\", shape=shape, initializer=init_ops.zeros_initializer())\n      self.evaluate(x.initializer)\n      self.assertAllEqual(x, np.zeros(shape))\n\n  @test_util.run_deprecated_v1\n  def testOnesInitializer(self):\n    with self.session():\n      shape = [2, 3]\n      x = variable_scope.get_variable(\n          \"x\", shape=shape, initializer=init_ops.ones_initializer())\n      self.evaluate(x.initializer)\n      self.assertAllEqual(x, np.ones(shape))\n\n  @test_util.run_deprecated_v1\n  def testConstantZeroInitializer(self):\n    with self.session():\n      shape = [2, 3]\n      x = variable_scope.get_variable(\n          \"x\", shape=shape, initializer=init_ops.constant_initializer(0.0))\n      self.evaluate(x.initializer)\n      self.assertAllEqual(x, np.zeros(shape))\n\n  @test_util.run_deprecated_v1\n  def testConstantOneInitializer(self):\n    with self.session():\n      shape = [2, 3]\n      x = variable_scope.get_variable(\n          \"x\", shape=shape, initializer=init_ops.constant_initializer(1.0))\n      self.evaluate(x.initializer)\n      self.assertAllEqual(x, np.ones(shape))\n\n  @test_util.run_deprecated_v1\n  def testConstantIntInitializer(self):\n    with self.session():\n      shape = [2, 3]\n      x = variable_scope.get_variable(\n          \"x\",\n          shape=shape,\n          dtype=dtypes.int32,\n          initializer=init_ops.constant_initializer(7))\n      self.evaluate(x.initializer)\n      self.assertEqual(x.dtype.base_dtype, dtypes.int32)\n      self.assertAllEqual(x, 7 * np.ones(shape, dtype=np.int32))\n\n  @test_util.run_deprecated_v1\n  def testConstantTupleInitializer(self):\n    with self.session():\n      shape = [3]\n      x = variable_scope.get_variable(\n          \"x\",\n          shape=shape,\n          dtype=dtypes.int32,\n          initializer=init_ops.constant_initializer((10, 20, 30)))\n      self.evaluate(x.initializer)\n      self.assertEqual(x.dtype.base_dtype, dtypes.int32)\n      self.assertAllEqual(x, [10, 20, 30])\n\n  def _testNDimConstantInitializer(self, name, value, shape, expected):\n    with self.cached_session():\n      init = init_ops.constant_initializer(value, dtype=dtypes.int32)\n      x = variable_scope.get_variable(name, shape=shape, initializer=init)\n      self.evaluate(x.initializer)\n\n      actual = array_ops.reshape(x, [-1]).eval()\n      self.assertEqual(len(actual), len(expected))\n      for a, e in zip(actual, expected):\n        self.assertEqual(a, e)\n\n  @test_util.run_deprecated_v1\n  def testNDimConstantInitializer(self):\n    value = [0, 1, 2, 3, 4, 5]\n    shape = [2, 3]\n    expected = list(value)\n\n    self._testNDimConstantInitializer(\"list\", value, shape, expected)\n    self._testNDimConstantInitializer(\"ndarray\", np.asarray(value), shape,\n                                      expected)\n    self._testNDimConstantInitializer(\"2D-ndarray\",\n                                      np.asarray(value).reshape(tuple(shape)),\n                                      shape, expected)\n\n  def _testNDimConstantInitializerLessValues(self, name, value, shape,\n                                             expected):\n    with self.cached_session():\n      init = init_ops.constant_initializer(value, dtype=dtypes.int32)\n      x = variable_scope.get_variable(name, shape=shape, initializer=init)\n      self.evaluate(x.initializer)\n\n      actual = array_ops.reshape(x, [-1]).eval()\n      self.assertGreater(len(actual), len(expected))\n      for i in range(len(actual)):\n        a = actual[i]\n        e = expected[i] if i < len(expected) else expected[-1]\n        self.assertEqual(a, e)\n\n  @test_util.run_deprecated_v1\n  def testNDimConstantInitializerLessValues(self):\n    value = [0, 1, 2, 3, 4, 5]\n    shape = [2, 4]\n    expected = list(value)\n\n    self._testNDimConstantInitializerLessValues(\"list\", value, shape, expected)\n    self._testNDimConstantInitializerLessValues(\"ndarray\", np.asarray(value),\n                                                shape, expected)\n    self._testNDimConstantInitializerLessValues(\n        \"2D-ndarray\",\n        np.asarray(value).reshape(tuple([2, 3])), shape, expected)\n\n  def _testNDimConstantInitializerMoreValues(self, value, shape):\n    ops.reset_default_graph()\n    with self.cached_session():\n      init = init_ops.constant_initializer(value, dtype=dtypes.int32)\n      self.assertRaises(\n          ValueError,\n          variable_scope.get_variable,\n          \"x\",\n          shape=shape,\n          initializer=init)\n\n  @test_util.run_deprecated_v1\n  def testNDimConstantInitializerMoreValues(self):\n    value = [0, 1, 2, 3, 4, 5, 6, 7]\n    shape = [2, 3]\n    self._testNDimConstantInitializerMoreValues(value, shape)\n    self._testNDimConstantInitializerMoreValues(np.asarray(value), shape)\n    self._testNDimConstantInitializerMoreValues(\n        np.asarray(value).reshape(tuple([2, 4])), shape)\n\n  def testInvalidValueTypeForConstantInitializerCausesTypeError(self):\n    c = constant_op.constant([1.0, 2.0, 3.0])\n    with self.assertRaisesRegex(TypeError,\n                                r\"Invalid type for initial value=.*Tensor.*\"):\n      init_ops.constant_initializer(c, dtype=dtypes.float32)\n    v = variables.Variable([3.0, 2.0, 1.0])\n    with self.assertRaisesRegex(\n        TypeError, r\"Invalid type for initial value=.*Variable.*\"):\n      init_ops.constant_initializer(v, dtype=dtypes.float32)\n\n\nclass RandomNormalInitializationTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testInitializerIdentical(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.random_normal_initializer(0.0, 1.0, seed=1, dtype=dtype)\n      init2 = init_ops.random_normal_initializer(0.0, 1.0, seed=1, dtype=dtype)\n      self.assertTrue(identicaltest(self, init1, init2))\n\n  @test_util.run_deprecated_v1\n  def testInitializerDifferent(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.random_normal_initializer(0.0, 1.0, seed=1, dtype=dtype)\n      init2 = init_ops.random_normal_initializer(0.0, 1.0, seed=2, dtype=dtype)\n      self.assertFalse(identicaltest(self, init1, init2))\n\n  @test_util.run_deprecated_v1\n  def testDuplicatedInitializer(self):\n    init = init_ops.random_normal_initializer(0.0, 1.0)\n    self.assertFalse(duplicated_initializer(self, init, 1))\n\n  def testInvalidDataType(self):\n    self.assertRaises(\n        ValueError,\n        init_ops.random_normal_initializer,\n        0.0,\n        1.0,\n        dtype=dtypes.string)\n\n\nclass TruncatedNormalInitializationTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testInitializerIdentical(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.truncated_normal_initializer(\n          0.0, 1.0, seed=1, dtype=dtype)\n      init2 = init_ops.truncated_normal_initializer(\n          0.0, 1.0, seed=1, dtype=dtype)\n      self.assertTrue(identicaltest(self, init1, init2))\n\n  @test_util.run_deprecated_v1\n  def testInitializerDifferent(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.truncated_normal_initializer(\n          0.0, 1.0, seed=1, dtype=dtype)\n      init2 = init_ops.truncated_normal_initializer(\n          0.0, 1.0, seed=2, dtype=dtype)\n      self.assertFalse(identicaltest(self, init1, init2))\n\n  @test_util.run_deprecated_v1\n  def testDuplicatedInitializer(self):\n    init = init_ops.truncated_normal_initializer(0.0, 1.0)\n    self.assertFalse(duplicated_initializer(self, init, 1))\n\n  def testInvalidDataType(self):\n    self.assertRaises(\n        ValueError,\n        init_ops.truncated_normal_initializer,\n        0.0,\n        1.0,\n        dtype=dtypes.string)\n\n\nclass RandomUniformInitializationTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testInitializerIdentical(self):\n    for dtype in [dtypes.float32, dtypes.float64, dtypes.int64]:\n      init1 = init_ops.random_uniform_initializer(0, 7, seed=1, dtype=dtype)\n      init2 = init_ops.random_uniform_initializer(0, 7, seed=1, dtype=dtype)\n      self.assertTrue(identicaltest(self, init1, init2))\n\n  @test_util.run_deprecated_v1\n  def testInitializerDifferent(self):\n    for dtype in [dtypes.float32, dtypes.float64, dtypes.int32, dtypes.int64]:\n      init1 = init_ops.random_uniform_initializer(0, 7, seed=1, dtype=dtype)\n      init2 = init_ops.random_uniform_initializer(0, 7, seed=2, dtype=dtype)\n      self.assertFalse(identicaltest(self, init1, init2))\n\n  @test_util.run_deprecated_v1\n  def testDuplicatedInitializer(self):\n    init = init_ops.random_uniform_initializer(0.0, 1.0)\n    self.assertFalse(duplicated_initializer(self, init, 1))\n\n\nclass UniformUnitScalingInitializationTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testInitializerIdentical(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.uniform_unit_scaling_initializer(seed=1, dtype=dtype)\n      init2 = init_ops.uniform_unit_scaling_initializer(seed=1, dtype=dtype)\n      self.assertTrue(identicaltest(self, init1, init2))\n      init3 = init_ops.uniform_unit_scaling_initializer(\n          1.5, seed=1, dtype=dtype)\n      init4 = init_ops.uniform_unit_scaling_initializer(\n          1.5, seed=1, dtype=dtype)\n      self.assertTrue(identicaltest(self, init3, init4))\n\n  @test_util.run_deprecated_v1\n  def testInitializerDifferent(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.uniform_unit_scaling_initializer(seed=1, dtype=dtype)\n      init2 = init_ops.uniform_unit_scaling_initializer(seed=2, dtype=dtype)\n      init3 = init_ops.uniform_unit_scaling_initializer(\n          1.5, seed=1, dtype=dtype)\n      self.assertFalse(identicaltest(self, init1, init2))\n      self.assertFalse(identicaltest(self, init1, init3))\n      self.assertFalse(identicaltest(self, init2, init3))\n\n  @test_util.run_deprecated_v1\n  def testZeroSize(self):\n    shape = [0, 2]\n    with self.cached_session():\n      x = variable_scope.get_variable(\n          \"x\",\n          shape=shape,\n          initializer=init_ops.uniform_unit_scaling_initializer())\n      self.evaluate(variables.global_variables_initializer())\n      self.assertAllEqual(shape, self.evaluate(x).shape)\n\n  @test_util.run_deprecated_v1\n  def testDuplicatedInitializer(self):\n    init = init_ops.uniform_unit_scaling_initializer()\n    self.assertFalse(duplicated_initializer(self, init, 1))\n\n  def testInvalidDataType(self):\n    self.assertRaises(\n        ValueError,\n        init_ops.uniform_unit_scaling_initializer,\n        dtype=dtypes.string)\n\n\nclass VarianceScalingInitializationTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testTruncatedNormalDistribution(self):\n    shape = [100, 100]\n    expect_mean = 0.\n    expect_var = 1. / shape[0]\n    init = init_ops.variance_scaling_initializer(\n        distribution=\"truncated_normal\")\n\n    with self.session(), \\\n      test.mock.patch.object(\n          random_ops, \"truncated_normal\", wraps=random_ops.truncated_normal) \\\n          as mock_truncated_normal:\n      x = init(shape).eval()\n      self.assertTrue(mock_truncated_normal.called)\n\n    self.assertNear(np.mean(x), expect_mean, err=1e-2)\n    self.assertNear(np.var(x), expect_var, err=1e-2)\n\n  @test_util.run_deprecated_v1\n  def testNormalDistribution(self):\n    shape = [100, 100]\n    expect_mean = 0.\n    expect_var = 1. / shape[0]\n    init = init_ops.variance_scaling_initializer(distribution=\"normal\")\n\n    with self.session(), \\\n      test.mock.patch.object(\n          random_ops, \"truncated_normal\", wraps=random_ops.truncated_normal) \\\n          as mock_truncated_normal:\n      x = init(shape).eval()\n      self.assertTrue(mock_truncated_normal.called)\n\n    self.assertNear(np.mean(x), expect_mean, err=1e-2)\n    self.assertNear(np.var(x), expect_var, err=1e-2)\n\n  @test_util.run_deprecated_v1\n  def testUntruncatedNormalDistribution(self):\n    shape = [100, 100]\n    expect_mean = 0.\n    expect_var = 1. / shape[0]\n    init = init_ops.variance_scaling_initializer(\n        distribution=\"untruncated_normal\")\n\n    with self.session(), \\\n      test.mock.patch.object(\n          random_ops, \"random_normal\", wraps=random_ops.random_normal) \\\n          as mock_random_normal:\n      x = init(shape).eval()\n      self.assertTrue(mock_random_normal.called)\n\n    self.assertNear(np.mean(x), expect_mean, err=1e-2)\n    self.assertNear(np.var(x), expect_var, err=1e-2)\n\n  @test_util.run_deprecated_v1\n  def testUniformDistribution(self):\n    shape = [100, 100]\n    expect_mean = 0.\n    expect_var = 1. / shape[0]\n    init = init_ops.variance_scaling_initializer(distribution=\"uniform\")\n\n    with self.session():\n      x = init(shape).eval()\n\n    self.assertNear(np.mean(x), expect_mean, err=1e-2)\n    self.assertNear(np.var(x), expect_var, err=1e-2)\n\n\n# TODO(vrv): move to sequence_ops_test?\nclass RangeTest(test.TestCase):\n\n  def _Range(self, start, limit, delta):\n    with self.cached_session():\n      tf_ans = math_ops.range(start, limit, delta, name=\"range\")\n      self.assertEqual([len(np.arange(start, limit, delta))],\n                       tf_ans.get_shape())\n      return self.evaluate(tf_ans)\n\n  def testBasic(self):\n    self.assertTrue(\n        np.array_equal(self._Range(0, 5, 1), np.array([0, 1, 2, 3, 4])))\n    self.assertTrue(np.array_equal(self._Range(0, 5, 2), np.array([0, 2, 4])))\n    self.assertTrue(np.array_equal(self._Range(0, 6, 2), np.array([0, 2, 4])))\n    self.assertTrue(\n        np.array_equal(self._Range(13, 32, 7), np.array([13, 20, 27])))\n    self.assertTrue(\n        np.array_equal(\n            self._Range(100, 500, 100), np.array([100, 200, 300, 400])))\n    self.assertEqual(math_ops.range(0, 5, 1).dtype, dtypes.int32)\n\n  @test_util.run_deprecated_v1\n  def testLimitOnly(self):\n    with self.session():\n      self.assertAllEqual(np.arange(5), math_ops.range(5))\n\n  def testEmpty(self):\n    for start in 0, 5:\n      self.assertTrue(np.array_equal(self._Range(start, start, 1), []))\n\n  def testNonInteger(self):\n    self.assertTrue(\n        np.allclose(self._Range(0, 2, 0.5), np.array([0, 0.5, 1, 1.5])))\n    self.assertTrue(np.allclose(self._Range(0, 5, 2.5), np.array([0, 2.5])))\n    self.assertTrue(\n        np.allclose(self._Range(0, 3, 0.9), np.array([0, 0.9, 1.8, 2.7])))\n    self.assertTrue(\n        np.allclose(\n            self._Range(100., 500., 100.), np.array([100, 200, 300, 400])))\n    self.assertEqual(math_ops.range(0., 5., 1.).dtype, dtypes.float32)\n\n  def testNegativeDelta(self):\n    self.assertTrue(\n        np.array_equal(self._Range(5, -1, -1), np.array([5, 4, 3, 2, 1, 0])))\n    self.assertTrue(\n        np.allclose(self._Range(2.5, 0, -0.5), np.array([2.5, 2, 1.5, 1, 0.5])))\n    self.assertTrue(\n        np.array_equal(self._Range(-5, -10, -3), np.array([-5, -8])))\n\n  def testDType(self):\n    zero_int32 = math_ops.cast(0, dtypes.int32)\n    zero_int64 = math_ops.cast(0, dtypes.int64)\n    zero_float32 = math_ops.cast(0, dtypes.float32)\n    zero_float64 = math_ops.cast(0, dtypes.float64)\n\n    self.assertEqual(math_ops.range(zero_int32, 0, 1).dtype, dtypes.int32)\n    self.assertEqual(math_ops.range(zero_int64, 0, 1).dtype, dtypes.int64)\n    self.assertEqual(math_ops.range(zero_float32, 0, 1).dtype, dtypes.float32)\n    self.assertEqual(math_ops.range(zero_float64, 0, 1).dtype, dtypes.float64)\n\n    self.assertEqual(\n        math_ops.range(zero_int32, zero_int64, 1).dtype, dtypes.int64)\n    self.assertEqual(\n        math_ops.range(zero_int64, zero_float32, 1).dtype, dtypes.float32)\n    self.assertEqual(\n        math_ops.range(zero_float32, zero_float64, 1).dtype, dtypes.float64)\n    self.assertEqual(\n        math_ops.range(zero_float64, zero_int32, 1).dtype, dtypes.float64)\n\n    self.assertEqual(\n        math_ops.range(0, 0, 1, dtype=dtypes.int32).dtype, dtypes.int32)\n    self.assertEqual(\n        math_ops.range(0, 0, 1, dtype=dtypes.int64).dtype, dtypes.int64)\n    self.assertEqual(\n        math_ops.range(0, 0, 1, dtype=dtypes.float32).dtype, dtypes.float32)\n    self.assertEqual(\n        math_ops.range(0, 0, 1, dtype=dtypes.float64).dtype, dtypes.float64)\n\n  def testMixedDType(self):\n    # Test case for GitHub issue 35710\n    tf_ans = math_ops.range(\n        constant_op.constant(4, dtype=dtypes.int32), dtype=dtypes.int64)\n    self.assertAllEqual(self.evaluate(tf_ans), np.array([0, 1, 2, 3]))\n\n  def testLargeLimits(self):\n    # Test case for GitHub issue 46913.\n    with self.session():\n      with self.assertRaises(errors_impl.ResourceExhaustedError):\n        v = math_ops.range(0, 9223372036854775807)\n        self.evaluate(v)\n\n  def testLargeStarts(self):\n    # Test case for GitHub issue 46899.\n    with self.session():\n      with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):\n        v = math_ops.range(start=-1e+38, limit=1)\n        self.evaluate(v)\n\n\n# TODO(vrv): move to sequence_ops_test?\nclass LinSpaceTest(test.TestCase):\n\n  def _gpu_modes(self):\n    if test.is_gpu_available():\n      return [False, True]\n    else:\n      return [False]\n\n  def _LinSpace(self, start, stop, num):\n    with ops.Graph().as_default() as graph:\n      with self.session(graph=graph, force_gpu=self.force_gpu):\n        tf_ans = math_ops.linspace(start, stop, num, name=\"linspace\")\n        self.assertEqual([num], tf_ans.get_shape())\n        return self.evaluate(tf_ans)\n\n  def testPositive(self):\n    for self.force_gpu in self._gpu_modes():\n      self.assertArrayNear(self._LinSpace(1., 5., 1), np.array([1.]), 1e-5)\n      self.assertArrayNear(self._LinSpace(1., 5., 2), np.array([1., 5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(1., 5., 3), np.array([1., 3., 5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(1., 5., 4), np.array([1., 7. / 3., 11. / 3., 5.]),\n          1e-5)\n\n  def testNegative(self):\n    for self.force_gpu in self._gpu_modes():\n      self.assertArrayNear(self._LinSpace(-1., -5., 1), np.array([-1.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., -5., 2), np.array([-1., -5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., -5., 3), np.array([-1., -3., -5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., -5., 4), np.array([-1., -7. / 3., -11. / 3.,\n                                                 -5.]), 1e-5)\n\n  def testNegativeToPositive(self):\n    for self.force_gpu in self._gpu_modes():\n      self.assertArrayNear(self._LinSpace(-1., 5., 1), np.array([-1.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., 5., 2), np.array([-1., 5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., 5., 3), np.array([-1., 2., 5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., 5., 4), np.array([-1., 1., 3., 5.]), 1e-5)\n\n  def testPoint(self):\n    for self.force_gpu in self._gpu_modes():\n      self.assertArrayNear(self._LinSpace(5., 5., 1), np.array([5.]), 1e-5)\n      self.assertArrayNear(self._LinSpace(5., 5., 2), np.array([5.] * 2), 1e-5)\n      self.assertArrayNear(self._LinSpace(5., 5., 3), np.array([5.] * 3), 1e-5)\n      self.assertArrayNear(self._LinSpace(5., 5., 4), np.array([5.] * 4), 1e-5)\n\n  def testEndpointsAreExact(self):\n    for self.force_gpu in self._gpu_modes():\n      # Test some cases that produce last values not equal to \"stop\" when\n      # computed via start + (num - 1) * ((stop - start) / (num - 1)), since\n      # float arithmetic will introduce error through precision loss.\n      self.assertAllEqual(\n          self._LinSpace(0., 1., 42)[[0, -1]], np.array([0., 1.], np.float32))\n      self.assertAllEqual(\n          self._LinSpace(-1., 0., 42)[[0, -1]], np.array([-1., 0.], np.float32))\n      self.assertAllEqual(\n          self._LinSpace(.1, .2, 4)[[0, -1]], np.array([.1, .2], np.float32))\n      # Check a case for float64 error too.\n      self.assertAllEqual(\n          self._LinSpace(np.array(0., np.float64), .1, 12)[[0, -1]],\n          np.array([0., .1], np.float64))\n\n\nclass LinSpaceNdTest(test.TestCase):\n\n  def _gpu_modes(self):\n    if test.is_gpu_available():\n      return [False, True]\n    else:\n      return [False]\n\n  def _LinSpace(self, start, stop, num, axis=0):\n    with ops.Graph().as_default() as graph:\n      with self.session(graph=graph, force_gpu=self.force_gpu):\n        tf_ans = math_ops.linspace_nd(start, stop, num, axis=axis)\n        return self.evaluate(tf_ans)\n\n  def _LinSpaceNumConstant(self, start, stop, num, axis=0):\n    with ops.Graph().as_default() as graph:\n      num_constant = constant_op.constant(num)\n      with self.session(graph=graph, force_gpu=self.force_gpu):\n        tf_ans = math_ops.linspace_nd(start, stop, num_constant, axis=axis)\n        return self.evaluate(tf_ans)\n\n  def _LinspaceNoneShape(self, start, stop, num, graph_shape=None, axis=0):\n    with ops.Graph().as_default() as graph:\n      num_tensor = array_ops.placeholder(dtypes.int32)\n      start_t = array_ops.placeholder(dtypes.float32, shape=graph_shape)\n      stop_t = array_ops.placeholder(dtypes.float32, shape=graph_shape)\n      ans_tensor = math_ops.linspace_nd(start_t, stop_t, num_tensor, axis=axis)\n\n      with self.session(graph=graph, force_gpu=self.force_gpu) as sess:\n        feed_dict = {start_t: start, stop_t: stop, num_tensor: num}\n        return sess.run(ans_tensor, feed_dict=feed_dict)\n\n  def testPositive(self):\n    for self.force_gpu in self._gpu_modes():\n      self.assertArrayNear(self._LinSpace(1., 5., 1), np.array([1.]), 1e-5)\n      self.assertArrayNear(self._LinSpace(1., 5., 2), np.array([1., 5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(1., 5., 3), np.array([1., 3., 5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(1., 5., 4), np.array([1., 7. / 3., 11. / 3., 5.]),\n          1e-5)\n\n  def testNegative(self):\n    for self.force_gpu in self._gpu_modes():\n      self.assertArrayNear(self._LinSpace(-1., -5., 1), np.array([-1.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., -5., 2), np.array([-1., -5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., -5., 3), np.array([-1., -3., -5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., -5., 4), np.array([-1., -7. / 3., -11. / 3.,\n                                                 -5.]), 1e-5)\n\n  def testNegativeToPositive(self):\n    for self.force_gpu in self._gpu_modes():\n      self.assertArrayNear(self._LinSpace(-1., 5., 1), np.array([-1.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., 5., 2), np.array([-1., 5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., 5., 3), np.array([-1., 2., 5.]), 1e-5)\n      self.assertArrayNear(\n          self._LinSpace(-1., 5., 4), np.array([-1., 1., 3., 5.]), 1e-5)\n\n  def testPoint(self):\n    for self.force_gpu in self._gpu_modes():\n      self.assertArrayNear(self._LinSpace(5., 5., 1), np.array([5.]), 1e-5)\n      self.assertArrayNear(self._LinSpace(5., 5., 2), np.array([5.] * 2), 1e-5)\n      self.assertArrayNear(self._LinSpace(5., 5., 3), np.array([5.] * 3), 1e-5)\n      self.assertArrayNear(self._LinSpace(5., 5., 4), np.array([5.] * 4), 1e-5)\n\n  def testEndpointsAreExact(self):\n    for self.force_gpu in self._gpu_modes():\n      # Test some cases that produce last values not equal to \"stop\" when\n      # computed via start + (num - 1) * ((stop - start) / (num - 1)), since\n      # float arithmetic will introduce error through precision loss.\n      self.assertAllEqual(\n          self._LinSpace(0., 1., 42)[[0, -1]], np.array([0., 1.], np.float32))\n      self.assertAllEqual(\n          self._LinSpace(-1., 0., 42)[[0, -1]], np.array([-1., 0.], np.float32))\n      self.assertAllEqual(\n          self._LinSpace(.1, .2, 4)[[0, -1]], np.array([.1, .2], np.float32))\n      # Check a case for float64 error too.\n      self.assertAllEqual(\n          self._LinSpace(np.array(0., np.float64), .1, 12)[[0, -1]],\n          np.array([0., .1], np.float64))\n\n  def testScalarsCompareToNumpy(self):\n    for self.force_gpu in self._gpu_modes():\n      actual = self._LinSpace(0., 1., 32)\n      expected = np.linspace(0., 1., 32)\n      self.assertArrayNear(expected, actual, 1e-5)\n\n  def _baseNDArrayCompareToNumpy(self, axis):\n    for self.force_gpu in self._gpu_modes():\n      a, b, expected, num = self.create_nd_inputs_and_expected_output(axis)\n      actual = self._LinSpace(a, b, num, axis=axis)\n      self.assert_close(actual, expected)\n\n  def assert_close(self, actual, expected):\n    wrong_indices = np.where(~np.allclose(actual, expected))\n    mess = \"Wrong float answer. Wrong indices: {}\".format(wrong_indices)\n    self.assertTrue(np.allclose(actual, expected), mess)\n\n  def create_nd_inputs_and_expected_output(self, axis):\n    a = np.arange(2, dtype=np.float32)\n    b = a * 5\n    num = 5\n\n    res = np.array([[0., 0., 0., 0., 0.], [1., 2., 3., 4., 5.]])\n    expected = res if axis != 0 else res.T\n    return a, b, expected, num\n\n  def testNDArrayCompareToNumpyDefaultAxis(self):\n    self._baseNDArrayCompareToNumpy(0)\n\n  def testNDArrayAxisStrictlyPositive(self):\n    self._baseNDArrayCompareToNumpy(1)\n\n  def testNDArrayAxisStrictlyNegative(self):\n    self._baseNDArrayCompareToNumpy(-1)\n\n  def testNumConstant(self):\n    for self.force_gpu in self._gpu_modes():\n      actual = self._LinSpaceNumConstant(0., 1., 32)\n      expected = np.linspace(0., 1., 32)\n      self.assertArrayNear(expected, actual, 1e-5)\n\n  def testUnknownShapeAtGraphCreationTime(self):\n    self.base_test_unknown_shape((2))\n\n  def testNoneValuesInShapeAtGraphCreationTime(self):\n    self.base_test_unknown_shape((None))\n\n  def testNoneShapeAtGraphCreationTime(self):\n    self.base_test_unknown_shape(None)\n\n  def base_test_unknown_shape(self, graph_shape):\n    for self.force_gpu in self._gpu_modes():\n      axis = 1\n      a, b, expected, num = self.create_nd_inputs_and_expected_output(axis)\n      actual = self._LinspaceNoneShape(a, b, num, graph_shape, axis)\n      self.assert_close(actual, expected)\n\n\nclass DeviceTest(test.TestCase):\n\n  def testNoDevice(self):\n    with ops.Graph().as_default():\n      var = variables.Variable([[1.0, 1.0]])\n    self.assertDeviceEqual(None, var.device)\n    self.assertDeviceEqual(None, var.initializer.device)\n\n  def testDevice(self):\n    with ops.Graph().as_default():\n      with ops.device(\"/job:ps\"):\n        var = variables.Variable([[1.0, 1.0]])\n    self.assertDeviceEqual(\"/job:ps\", var.device)\n    self.assertDeviceEqual(\"/job:ps\", var.initializer.device)\n\n\nclass OrthogonalInitializerTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testInitializerIdentical(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.orthogonal_initializer(seed=1, dtype=dtype)\n      init2 = init_ops.orthogonal_initializer(seed=1, dtype=dtype)\n      self.assertTrue(identicaltest(self, init1, init2, (10, 10)))\n\n  @test_util.run_deprecated_v1\n  def testInitializerDifferent(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.orthogonal_initializer(seed=1, dtype=dtype)\n      init2 = init_ops.orthogonal_initializer(seed=2, dtype=dtype)\n      self.assertFalse(identicaltest(self, init1, init2, (10, 10)))\n\n  @test_util.run_deprecated_v1\n  def testDuplicatedInitializer(self):\n    init = init_ops.orthogonal_initializer()\n    self.assertFalse(duplicated_initializer(self, init, 1, (10, 10)))\n\n  def testInvalidDataType(self):\n    self.assertRaises(\n        ValueError, init_ops.orthogonal_initializer, dtype=dtypes.string)\n\n  def testInvalidShape(self):\n    init1 = init_ops.orthogonal_initializer()\n    with self.session(graph=ops.Graph(), use_gpu=True):\n      self.assertRaises(ValueError, init1, shape=[5])\n\n  @test_util.run_deprecated_v1\n  def testGain(self):\n    shape = (10, 10)\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.orthogonal_initializer(seed=1, dtype=dtype)\n      init2 = init_ops.orthogonal_initializer(gain=3.14, seed=1, dtype=dtype)\n      with self.session(graph=ops.Graph(), use_gpu=True):\n        t1 = init1(shape).eval()\n        t2 = init2(shape).eval()\n      self.assertAllClose(t1, t2 / 3.14)\n\n  @test_util.run_deprecated_v1\n  def testShapesValues(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      for shape in [(10, 10), (10, 9, 8), (100, 5, 5), (50, 40), (40, 50)]:\n        init = init_ops.orthogonal_initializer(dtype=dtype)\n        tol = 1e-5 if dtype == dtypes.float32 else 1e-12\n        with self.session(graph=ops.Graph(), use_gpu=True):\n          # Check the shape\n          t = init(shape).eval()\n          self.assertAllEqual(shape, t.shape)\n          # Check orthogonality by computing the inner product\n          t = t.reshape((np.prod(t.shape[:-1]), t.shape[-1]))\n          if t.shape[0] > t.shape[1]:\n            self.assertAllClose(\n                np.dot(t.T, t), np.eye(t.shape[1]), rtol=tol, atol=tol)\n          else:\n            self.assertAllClose(\n                np.dot(t, t.T), np.eye(t.shape[0]), rtol=tol, atol=tol)\n\n\nclass ConvolutionDeltaOrthogonalInitializerTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testInitializerIdentical(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_delta_orthogonal(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_delta_orthogonal(seed=1, dtype=dtype)\n      self.assertTrue(identicaltest(self, init1, init2, (3, 3, 10, 10)))\n\n  @test_util.run_deprecated_v1\n  def testInitializerDifferent(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_delta_orthogonal(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_delta_orthogonal(seed=2, dtype=dtype)\n      self.assertFalse(identicaltest(self, init1, init2, (3, 3, 10, 10)))\n\n  @test_util.run_deprecated_v1\n  def testDuplicatedInitializer(self):\n    init = init_ops.convolutional_delta_orthogonal()\n    self.assertFalse(duplicated_initializer(self, init, 1, (3, 3, 10, 10)))\n\n  def testInvalidDataType(self):\n    self.assertRaises(\n        ValueError,\n        init_ops.convolutional_delta_orthogonal,\n        dtype=dtypes.string)\n\n  def testInvalidShape(self):\n    init1 = init_ops.convolutional_delta_orthogonal()\n    with self.session(graph=ops.Graph(), use_gpu=True):\n      self.assertRaises(ValueError, init1, shape=[3, 3, 6, 5])\n\n  @test_util.run_deprecated_v1\n  def testGain(self):\n    shape = (3, 3, 10, 10)\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_delta_orthogonal(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_delta_orthogonal(\n          gain=3.14, seed=1, dtype=dtype)\n      with self.session(graph=ops.Graph(), use_gpu=True):\n        t1 = init1(shape).eval()\n        t2 = init2(shape).eval()\n      self.assertAllClose(t1, t2 / 3.14)\n\n  @test_util.run_deprecated_v1\n  def testShapesValues(self):\n    gain = 3.14\n    for dtype in [dtypes.float32]:\n      for kernel_size in [[3], [8], [3, 5], [2, 4], [3, 3, 3], [2, 2, 2]]:\n        tol = 1e-2\n        # Check orthogonality by computing ratio between\n        # the 2-norms of the inputs and outputs.\n        if len(kernel_size) == 1:\n          shape = [4, 32, 64]\n          convolution = convolutional.conv1d\n        elif len(kernel_size) == 2:\n          convolution = convolutional.conv2d\n          shape = [4, 32, 32, 64]\n        else:\n          shape = [4, 16, 16, 16, 64]\n          convolution = convolutional.conv3d\n        inputs = random_ops.random_normal(shape, dtype=dtype)\n        inputs_2norm = linalg_ops.norm(inputs)\n        outputs = convolution(\n            inputs,\n            padding=\"same\",\n            filters=128,\n            kernel_size=kernel_size,\n            use_bias=False,\n            kernel_initializer=init_ops.convolutional_delta_orthogonal(\n                gain=gain))\n        outputs_shape = shape[0:-1] + [128]\n        outputs_2norm = linalg_ops.norm(outputs)\n        ratio = outputs_2norm / inputs_2norm\n        my_ops = variables.global_variables_initializer()\n        with self.session():\n          self.evaluate(my_ops)\n          # Check the shape of the outputs\n          t = self.evaluate(outputs)\n          self.assertAllEqual(t.shape, outputs_shape)\n          # Check isometry of the delta-orthogonal kernel.\n          self.assertAllClose(self.evaluate(ratio), gain, rtol=tol, atol=tol)\n\n  @test_util.run_deprecated_v1\n  def testNonuniformity(self):\n    value = 0\n    abs_value = 0\n    shape = [3, 3, 10, 10]\n    count = 70\n    tol = 1e-5\n    with self.session():\n      for i in range(count):\n        x = variable_scope.get_variable(\n            \"{}\".format(i),\n            shape=shape,\n            initializer=init_ops.convolutional_delta_orthogonal)\n        self.evaluate(x.initializer)\n        y = self.evaluate(x)[1, 1, :, :]\n        determinant = np.linalg.det(y)\n        value += determinant\n        abs_value += np.abs(determinant)\n\n      # Check there is some variation in the signs of the determinants\n      self.assertLess(value, count - tol)\n      self.assertLess(-count + tol, value)\n      # Check all determinants have absolute value 1\n      # Compute the sum of the absolute values of 'count' determinants\n      self.assertAllClose(abs_value, count, rtol=tol, atol=tol)\n\n\n@test_util.run_all_without_tensor_float_32(\n    \"Tests convolutional_orthogonal_1d, which calls matmul\")\nclass ConvolutionOrthogonal1dInitializerTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testInitializerIdentical(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_orthogonal_1d(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_orthogonal_1d(seed=1, dtype=dtype)\n      self.assertTrue(identicaltest(self, init1, init2, (3, 10, 10)))\n\n  @test_util.run_deprecated_v1\n  def testInitializerDifferent(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_orthogonal_1d(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_orthogonal_1d(seed=2, dtype=dtype)\n      self.assertFalse(identicaltest(self, init1, init2, (3, 10, 10)))\n\n  @test_util.run_deprecated_v1\n  def testDuplicatedInitializer(self):\n    init = init_ops.convolutional_orthogonal_1d()\n    self.assertFalse(duplicated_initializer(self, init, 1, (3, 10, 10)))\n\n  def testInvalidDataType(self):\n    self.assertRaises(\n        ValueError, init_ops.convolutional_orthogonal_1d, dtype=dtypes.string)\n\n  def testInvalidShape(self):\n    init1 = init_ops.convolutional_orthogonal_1d()\n    with self.session(graph=ops.Graph(), use_gpu=True):\n      self.assertRaises(ValueError, init1, shape=[3, 6, 5])\n\n  @test_util.run_deprecated_v1\n  def testGain(self):\n    shape = (3, 10, 10)\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_orthogonal_1d(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_orthogonal_1d(\n          gain=3.14, seed=1, dtype=dtype)\n      with self.session(graph=ops.Graph(), use_gpu=True):\n        t1 = init1(shape).eval()\n        t2 = init2(shape).eval()\n      self.assertAllClose(t1, t2 / 3.14)\n\n  @test_util.run_deprecated_v1\n  def testNonuniformity(self):\n    value = 0\n    abs_value = 0\n    shape = [3, 10, 10]\n    count = 70\n    tol = 1e-5\n    with self.session():\n      for i in range(count):\n        x = variable_scope.get_variable(\n            \"{}\".format(i),\n            shape=shape,\n            initializer=init_ops.convolutional_orthogonal_1d)\n        self.evaluate(x.initializer)\n        y = np.sum(self.evaluate(x), axis=0)\n        determinant = np.linalg.det(y)\n        value += determinant\n        abs_value += np.abs(determinant)\n\n      # Check there is some variation in the signs of the determinants.\n      self.assertLess(value, count - tol)\n      self.assertLess(-count + tol, value)\n      # Check all determinants have absolute value 1\n      # Compute the sum of the absolute values of 'count' determinants\n      self.assertAllClose(abs_value, count, rtol=tol, atol=tol)\n\n  @test_util.run_deprecated_v1\n  def testShapesValues(self):\n\n    def circular_pad(input_, width, kernel_size):\n      \"\"\"Pad input_ for computing (circular) convolution.\n\n      Args:\n        input_: the input tensor\n        width: the width of the tensor.\n        kernel_size: the kernel size of the filter.\n\n      Returns:\n        a tensor whose width is (width + kernel_size - 1).\n      \"\"\"\n\n      beginning = kernel_size // 2\n      end = kernel_size - 1 - beginning\n\n      tmp_up = array_ops.slice(input_, [0, width - beginning, 0],\n                               [-1, beginning, -1])\n      tmp_down = array_ops.slice(input_, [0, 0, 0], [-1, end, -1])\n      tmp = array_ops.concat([tmp_up, input_, tmp_down], 1)\n\n      return tmp\n\n    cout = 64\n    shape = [10, 20, 32]\n    outputs_shape = shape[0:-1] + [cout]\n    dtype = dtypes.float32\n    tol = 1e-3\n    gain = 3.14\n    # Check orthogonality/isometry by computing the ratio between\n    # the 2-norms of the inputs and outputs.\n    for kernel_size in [[1], [2], [3], [4], [5], [6]]:\n      convolution = convolutional.conv1d\n      inputs = random_ops.random_normal(shape, dtype=dtype)\n      inputs_2norm = linalg_ops.norm(inputs)\n      input_with_circular_pad = circular_pad(inputs, shape[1], kernel_size[0])\n      outputs = convolution(\n          input_with_circular_pad,\n          padding=\"valid\",\n          filters=cout,\n          kernel_size=kernel_size[0],\n          use_bias=False,\n          kernel_initializer=init_ops.convolutional_orthogonal_1d(gain=gain))\n      outputs_2norm = linalg_ops.norm(outputs)\n      ratio = outputs_2norm / inputs_2norm\n      my_ops = variables.global_variables_initializer()\n      with self.session():\n        self.evaluate(my_ops)\n        # Check the shape of the outputs\n        t = self.evaluate(outputs)\n        self.assertAllEqual(t.shape, outputs_shape)\n        # Check isometry of the orthogonal kernel.\n        self.assertAllClose(self.evaluate(ratio), gain, rtol=tol, atol=tol)\n\n\nclass ConvolutionOrthogonal2dInitializerTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testInitializerIdentical(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_orthogonal_2d(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_orthogonal_2d(seed=1, dtype=dtype)\n      self.assertTrue(identicaltest(self, init1, init2, (3, 3, 10, 10)))\n\n  @test_util.run_deprecated_v1\n  def testInitializerDifferent(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_orthogonal_2d(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_orthogonal_2d(seed=2, dtype=dtype)\n      self.assertFalse(identicaltest(self, init1, init2, (3, 3, 10, 10)))\n\n  @test_util.run_deprecated_v1\n  def testDuplicatedInitializer(self):\n    init = init_ops.convolutional_orthogonal_2d()\n    self.assertFalse(duplicated_initializer(self, init, 1, (3, 3, 10, 10)))\n\n  def testInvalidDataType(self):\n    self.assertRaises(\n        ValueError, init_ops.convolutional_orthogonal_2d, dtype=dtypes.string)\n\n  def testInvalidShape(self):\n    init1 = init_ops.convolutional_orthogonal_2d()\n    with self.session(graph=ops.Graph(), use_gpu=True):\n      self.assertRaises(ValueError, init1, shape=[3, 3, 6, 5])\n\n  @test_util.run_deprecated_v1\n  def testGain(self):\n    shape = (3, 3, 10, 10)\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_orthogonal_2d(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_orthogonal_2d(\n          gain=3.14, seed=1, dtype=dtype)\n      with self.session(graph=ops.Graph(), use_gpu=True):\n        t1 = init1(shape).eval()\n        t2 = init2(shape).eval()\n      self.assertAllClose(t1, t2 / 3.14)\n\n  @test_util.run_deprecated_v1\n  def testShapesValues(self):\n\n    def circular_pad(input_, width, kernel_size):\n      \"\"\"Pad input_ for computing (circular) convolution.\n\n      Args:\n        input_: the input tensor\n        width: the width of the tensor.\n        kernel_size: the kernel size of the filter.\n\n      Returns:\n        a tensor whose width is (width + kernel_size - 1).\n      \"\"\"\n      beginning = kernel_size // 2\n      end = kernel_size - 1 - beginning\n\n      tmp_up = array_ops.slice(input_, [0, width - beginning, 0, 0],\n                               [-1, beginning, width, -1])\n      tmp_down = array_ops.slice(input_, [0, 0, 0, 0], [-1, end, width, -1])\n      tmp = array_ops.concat([tmp_up, input_, tmp_down], 1)\n\n      new_width = width + kernel_size - 1\n      tmp_left = array_ops.slice(tmp, [0, 0, width - beginning, 0],\n                                 [-1, new_width, beginning, -1])\n      tmp_right = array_ops.slice(tmp, [0, 0, 0, 0], [-1, new_width, end, -1])\n\n      final = array_ops.concat([tmp_left, tmp, tmp_right], 2)\n      return final\n\n    cout = 45\n    shape = [64, 28, 28, 32]\n    outputs_shape = shape[0:-1] + [cout]\n    dtype = dtypes.float32\n    tol = 1e-3\n    gain = 3.14\n    # Check orthogonality/isometry by computing the ratio between\n    # the 2-norms of the inputs and outputs.\n    for kernel_size in [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]:\n      convolution = convolutional.conv2d\n      inputs = random_ops.random_normal(shape, dtype=dtype)\n      inputs_2norm = linalg_ops.norm(inputs)\n      input_with_circular_pad = circular_pad(inputs, shape[1], kernel_size[0])\n      outputs = convolution(\n          input_with_circular_pad,\n          padding=\"valid\",\n          filters=cout,\n          kernel_size=kernel_size,\n          use_bias=False,\n          kernel_initializer=init_ops.convolutional_orthogonal_2d(gain=gain))\n      outputs_2norm = linalg_ops.norm(outputs)\n      ratio = outputs_2norm / inputs_2norm\n      my_ops = variables.global_variables_initializer()\n      with self.session():\n        self.evaluate(my_ops)\n        # Check the shape of the outputs\n        t = self.evaluate(outputs)\n        self.assertAllEqual(t.shape, outputs_shape)\n        # Check isometry of the orthogonal kernel.\n        self.assertAllClose(self.evaluate(ratio), gain, rtol=tol, atol=tol)\n\n\n@test_util.run_all_without_tensor_float_32(\n    \"Tests convolutional_orthogonal_3d, which calls matmul\")\nclass ConvolutionOrthogonal3dInitializerTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testInitializerIdentical(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_orthogonal_3d(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_orthogonal_3d(seed=1, dtype=dtype)\n      self.assertTrue(identicaltest(self, init1, init2, (3, 3, 3, 10, 10)))\n\n  @test_util.run_deprecated_v1\n  def testInitializerDifferent(self):\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_orthogonal_3d(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_orthogonal_3d(seed=2, dtype=dtype)\n      self.assertFalse(identicaltest(self, init1, init2, (3, 3, 3, 10, 10)))\n\n  @test_util.run_deprecated_v1\n  def testDuplicatedInitializer(self):\n    init = init_ops.convolutional_orthogonal_3d()\n    self.assertFalse(duplicated_initializer(self, init, 1, (3, 3, 3, 10, 10)))\n\n  def testInvalidDataType(self):\n    self.assertRaises(\n        ValueError, init_ops.convolutional_orthogonal_3d, dtype=dtypes.string)\n\n  def testInvalidShape(self):\n    init1 = init_ops.convolutional_orthogonal_3d()\n    with self.session(graph=ops.Graph(), use_gpu=True):\n      self.assertRaises(ValueError, init1, shape=[3, 3, 3, 6, 5])\n\n  @test_util.run_deprecated_v1\n  def testGain(self):\n    shape = (3, 3, 3, 10, 10)\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init1 = init_ops.convolutional_orthogonal_3d(seed=1, dtype=dtype)\n      init2 = init_ops.convolutional_orthogonal_3d(\n          gain=3.14, seed=1, dtype=dtype)\n      with self.session(graph=ops.Graph(), use_gpu=True):\n        t1 = init1(shape).eval()\n        t2 = init2(shape).eval()\n      self.assertAllClose(t1, t2 / 3.14)\n\n  @test_util.run_deprecated_v1\n  def testNonuniformity(self):\n    value = 0\n    abs_value = 0\n    shape = [3, 3, 3, 5, 5]\n    count = 20\n    tol = 1e-5\n    with self.session():\n      for i in range(count):\n        x = variable_scope.get_variable(\n            \"{}\".format(i),\n            shape=shape,\n            initializer=init_ops.convolutional_orthogonal_3d)\n        self.evaluate(x.initializer)\n        y = np.sum(self.evaluate(x), axis=(0, 1, 2))\n        determinant = np.linalg.det(y)\n        value += determinant\n        abs_value += np.abs(determinant)\n\n      # Check there is some variation in the signs of the determinants\n      self.assertLess(value, count - tol)\n      self.assertLess(-count + tol, value)\n      # Check all determinants have absolute value 1\n      # Compute the sum of the absolute values of 'count' determinants\n      self.assertAllClose(abs_value, count, rtol=tol, atol=tol)\n\n  @test_util.run_deprecated_v1\n  def testShapesValues(self):\n\n    def circular_pad(input_, width, kernel_size):\n      \"\"\"Padding input_ for computing circular convolution.\n\n      Args:\n        input_: the input tensor\n        width: the width of the tensor.\n        kernel_size: the kernel size of the filter.\n\n      Returns:\n        a tensor whose width is (width + kernel_size - 1).\n      \"\"\"\n\n      beginning = kernel_size // 2\n      end = kernel_size - 1 - beginning\n\n      tmp_up = array_ops.slice(input_, [0, width - beginning, 0, 0, 0],\n                               [-1, beginning, -1, -1, -1])\n      tmp_down = array_ops.slice(input_, [0, 0, 0, 0, 0], [-1, end, -1, -1, -1])\n      tmp = array_ops.concat([tmp_up, input_, tmp_down], 1)\n\n      tmp_left = array_ops.slice(tmp, [0, 0, width - beginning, 0, 0],\n                                 [-1, -1, beginning, -1, -1])\n      tmp_right = array_ops.slice(tmp, [0, 0, 0, 0, 0], [-1, -1, end, -1, -1])\n      tmp = array_ops.concat([tmp_left, tmp, tmp_right], 2)\n\n      tmp_front = array_ops.slice(tmp, [0, 0, 0, width - beginning, 0],\n                                  [-1, -1, -1, beginning, -1])\n      tmp_back = array_ops.slice(tmp, [0, 0, 0, 0, 0], [-1, -1, -1, end, -1])\n      return array_ops.concat([tmp_front, tmp, tmp_back], 3)\n\n    cout = 32\n    shape = [1, 7, 7, 7, 16]\n    outputs_shape = shape[0:-1] + [cout]\n    dtype = dtypes.float32\n    tol = 1e-3\n    gain = 3.14\n    # Check orthogonality/isometry by computing the ratio between\n    # the 2-norms of the inputs and outputs.\n    for kernel_size in [[1, 1, 1], [2, 2, 2], [3, 3, 3]]:\n      convolution = convolutional.conv3d\n      inputs = random_ops.random_normal(shape, dtype=dtype)\n      inputs_2norm = linalg_ops.norm(inputs)\n      input_with_circular_pad = circular_pad(inputs, shape[1], kernel_size[0])\n      outputs = convolution(\n          input_with_circular_pad,\n          padding=\"valid\",\n          filters=cout,\n          kernel_size=kernel_size[0],\n          use_bias=False,\n          kernel_initializer=init_ops.convolutional_orthogonal_3d(gain=gain))\n      outputs_2norm = linalg_ops.norm(outputs)\n      ratio = outputs_2norm / inputs_2norm\n      my_ops = variables.global_variables_initializer()\n      with self.cached_session():\n        self.evaluate(my_ops)\n        # Check the shape of the outputs\n        t = self.evaluate(outputs)\n        self.assertAllEqual(t.shape, outputs_shape)\n        # Check isometry of the orthogonal kernel.\n        self.assertAllClose(self.evaluate(ratio), gain, rtol=tol, atol=tol)\n\n\nclass IdentityInitializerTest(test.TestCase):\n\n  def testInvalidDataType(self):\n    self.assertRaises(\n        ValueError, init_ops.orthogonal_initializer, dtype=dtypes.string)\n\n  def testInvalidShape(self):\n    init = init_ops.identity_initializer()\n    with self.session(graph=ops.Graph(), use_gpu=True):\n      self.assertRaises(ValueError, init, shape=[5, 7, 7])\n      self.assertRaises(ValueError, init, shape=[5])\n      self.assertRaises(ValueError, init, shape=[])\n\n  @test_util.run_deprecated_v1\n  def testNonSquare(self):\n    init = init_ops.identity_initializer()\n    shape = (10, 5)\n    with self.session(graph=ops.Graph(), use_gpu=True):\n      self.assertAllClose(init(shape), np.eye(*shape))\n\n  @test_util.run_deprecated_v1\n  def testGain(self):\n    shape = (10, 10)\n    for dtype in [dtypes.float32, dtypes.float64]:\n      init_default = init_ops.identity_initializer(dtype=dtype)\n      init_custom = init_ops.identity_initializer(gain=0.9, dtype=dtype)\n      with self.session(graph=ops.Graph(), use_gpu=True):\n        self.assertAllClose(init_default(shape), np.eye(*shape))\n      with self.session(graph=ops.Graph(), use_gpu=True):\n        self.assertAllClose(init_custom(shape), np.eye(*shape) * 0.9)\n\n  @test_util.run_deprecated_v1\n  def testPartitions(self):\n    shape = (10, 10)\n    init = init_ops.identity_initializer()\n    partitioner = partitioned_variables.variable_axis_size_partitioner(1)\n    with self.session(graph=ops.Graph(), use_gpu=True):\n      with variable_scope.variable_scope(\n          \"foo\", partitioner=partitioner, initializer=init):\n        v = array_ops.identity(variable_scope.get_variable(\"bar\", shape=shape))\n      self.evaluate(variables.global_variables_initializer())\n      self.assertAllClose(v, np.eye(*shape))\n\n\nif __name__ == \"__main__\":\n  test.main()\n"], "filenames": ["tensorflow/core/kernels/sequence_ops.cc", "tensorflow/core/ops/math_ops.cc", "tensorflow/python/kernel_tests/array_ops/init_ops_test.py"], "buggy_code_start_loc": [94, 1491, 551], "buggy_code_end_loc": [101, 1491, 552], "fixing_code_start_loc": [94, 1492, 551], "fixing_code_end_loc": [107, 1499, 552], "type": "CWE-190", "message": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `Range` suffers from integer overflows. These can trigger undefined behavior or, in some scenarios, extremely large allocations. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2022-23562", "sourceIdentifier": "security-advisories@github.com", "published": "2022-02-04T23:15:13.843", "lastModified": "2022-02-09T18:19:05.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `Range` suffers from integer overflows. These can trigger undefined behavior or, in some scenarios, extremely large allocations. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."}, {"lang": "es", "value": "Tensorflow es un Marco de Aprendizaje Autom\u00e1tico de C\u00f3digo Abierto. La implementaci\u00f3n de \"Range\" sufre un desbordamientos de enteros. Estos pueden desencadenar un comportamiento indefinido o, en algunos escenarios, asignaciones extremadamente grandes. La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.8.0. Tambi\u00e9n seleccionaremos este commit en TensorFlow versi\u00f3n 2.7.1, TensorFlow versi\u00f3n 2.6.3, y TensorFlow versi\u00f3n 2.5.3, ya que estos tambi\u00e9n est\u00e1n afectados y a\u00fan est\u00e1n en el rango admitido"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 7.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-190"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.5.2", "matchCriteriaId": "688150BF-477C-48FC-9AEF-A79AC57A6DDC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.6.0", "versionEndIncluding": "2.6.2", "matchCriteriaId": "C9E69B60-8C97-47E2-9027-9598B8392E5D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.7.0:*:*:*:*:*:*:*", "matchCriteriaId": "2EDFAAB8-799C-4259-9102-944D4760DA2C"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/f0147751fd5d2ff23251149ebad9af9f03010732", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/issues/52676", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/pull/51733", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qx3f-p745-w4hr", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/f0147751fd5d2ff23251149ebad9af9f03010732"}}