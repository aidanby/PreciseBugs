{"buggy_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\Api\\Commands;\n\nuse Exception;\nuse Froxlor\\Api\\ApiCommand;\nuse Froxlor\\Api\\ResourceEntity;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Settings;\nuse Froxlor\\Validate\\Validate;\nuse PDO;\n\n/**\n * @since 0.10.0\n */\nclass HostingPlans extends ApiCommand implements ResourceEntity\n{\n\n\t/**\n\t * list all available hosting plans\n\t *\n\t * @param array $sql_search\n\t *            optional array with index = fieldname, and value = array with 'op' => operator (one of <, > or =),\n\t *            LIKE is used if left empty and 'value' => searchvalue\n\t * @param int $sql_limit\n\t *            optional specify number of results to be returned\n\t * @param int $sql_offset\n\t *            optional specify offset for resultset\n\t * @param array $sql_orderby\n\t *            optional array with index = fieldname and value = ASC|DESC to order the resultset by one or more\n\t *            fields\n\t *\n\t * @access admin\n\t * @return string json-encoded array count|list\n\t * @throws Exception\n\t */\n\tpublic function listing()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"[API] list hosting-plans\");\n\t\t\t$query_fields = [];\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT p.*, a.loginname as adminname\n\t\t\t\tFROM `\" . TABLE_PANEL_PLANS . \"` p, `\" . TABLE_PANEL_ADMINS . \"` a\n\t\t\t\tWHERE `p`.`adminid` = `a`.`adminid`\" . ($this->getUserDetail('customers_see_all') ? '' : \" AND `p`.`adminid` = :adminid \") . $this->getSearchWhere($query_fields, true) . $this->getOrderBy() . $this->getLimit());\n\t\t\t$params = [];\n\t\t\tif ($this->getUserDetail('customers_see_all') == '0') {\n\t\t\t\t$params['adminid'] = $this->getUserDetail('adminid');\n\t\t\t}\n\t\t\t$params = array_merge($params, $query_fields);\n\t\t\tDatabase::pexecute($result_stmt, $params, true, true);\n\t\t\t$result = [];\n\t\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$result[] = $row;\n\t\t\t}\n\t\t\treturn $this->response([\n\t\t\t\t'count' => count($result),\n\t\t\t\t'list' => $result\n\t\t\t]);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * returns the total number of accessible hosting plans\n\t *\n\t * @access admin\n\t * @return string json-encoded response message\n\t * @throws Exception\n\t */\n\tpublic function listingCount()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT COUNT(*) as num_plans\n\t\t\t\tFROM `\" . TABLE_PANEL_PLANS . \"` p, `\" . TABLE_PANEL_ADMINS . \"` a\n\t\t\t\tWHERE `p`.`adminid` = `a`.`adminid`\" . ($this->getUserDetail('customers_see_all') ? '' : \" AND `p`.`adminid` = :adminid \"));\n\t\t\t$params = [];\n\t\t\tif ($this->getUserDetail('customers_see_all') == '0') {\n\t\t\t\t$params['adminid'] = $this->getUserDetail('adminid');\n\t\t\t}\n\t\t\t$result = Database::pexecute_first($result_stmt, $params, true, true);\n\t\t\tif ($result) {\n\t\t\t\treturn $this->response($result['num_plans']);\n\t\t\t}\n\t\t\treturn $this->response(0);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * add new hosting-plan\n\t *\n\t * @param string $name\n\t *            name of the plan\n\t * @param string $description\n\t *            optional, description for hosting-plan\n\t * @param int $diskspace\n\t *            optional disk-space available for customer in MB, default 0\n\t * @param bool $diskspace_ul\n\t *            optional, whether customer should have unlimited diskspace, default 0 (false)\n\t * @param int $traffic\n\t *            optional traffic available for customer in GB, default 0\n\t * @param bool $traffic_ul\n\t *            optional, whether customer should have unlimited traffic, default 0 (false)\n\t * @param int $subdomains\n\t *            optional amount of subdomains available for customer, default 0\n\t * @param bool $subdomains_ul\n\t *            optional, whether customer should have unlimited subdomains, default 0 (false)\n\t * @param int $emails\n\t *            optional amount of emails available for customer, default 0\n\t * @param bool $emails_ul\n\t *            optional, whether customer should have unlimited emails, default 0 (false)\n\t * @param int $email_accounts\n\t *            optional amount of email-accounts available for customer, default 0\n\t * @param bool $email_accounts_ul\n\t *            optional, whether customer should have unlimited email-accounts, default 0 (false)\n\t * @param int $email_forwarders\n\t *            optional amount of email-forwarders available for customer, default 0\n\t * @param bool $email_forwarders_ul\n\t *            optional, whether customer should have unlimited email-forwarders, default 0 (false)\n\t * @param int $email_quota\n\t *            optional size of email-quota available for customer in MB, default is system-setting mail_quota\n\t * @param bool $email_quota_ul\n\t *            optional, whether customer should have unlimited email-quota, default 0 (false)\n\t * @param bool $email_imap\n\t *            optional, whether to allow IMAP access, default 0 (false)\n\t * @param bool $email_pop3\n\t *            optional, whether to allow POP3 access, default 0 (false)\n\t * @param int $ftps\n\t *            optional amount of ftp-accounts available for customer, default 0\n\t * @param bool $ftps_ul\n\t *            optional, whether customer should have unlimited ftp-accounts, default 0 (false)\n\t * @param int $mysqls\n\t *            optional amount of mysql-databases available for customer, default 0\n\t * @param bool $mysqls_ul\n\t *            optional, whether customer should have unlimited mysql-databases, default 0 (false)\n\t * @param bool $phpenabled\n\t *            optional, whether to allow usage of PHP, default 0 (false)\n\t * @param array $allowed_phpconfigs\n\t *            optional, array of IDs of php-config that the customer is allowed to use, default empty (none)\n\t * @param bool $perlenabled\n\t *            optional, whether to allow usage of Perl/CGI, default 0 (false)\n\t * @param bool $dnsenabled\n\t *            optional, whether to allow usage of the DNS editor (requires activated nameserver in settings),\n\t *            default 0 (false)\n\t * @param bool $logviewenabled\n\t *            optional, whether to allow access to webserver access/error-logs, default 0 (false)\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function add()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$name = $this->getParam('name');\n\t\t\t$description = $this->getParam('description', true, '');\n\n\t\t\t$value_arr = [];\n\t\t\t$value_arr['diskspace'] = $this->getUlParam('diskspace', 'diskspace_ul', true, 0);\n\t\t\t$value_arr['traffic'] = $this->getUlParam('traffic', 'traffic_ul', true, 0);\n\t\t\t$value_arr['subdomains'] = $this->getUlParam('subdomains', 'subdomains_ul', true, 0);\n\t\t\t$value_arr['emails'] = $this->getUlParam('emails', 'emails_ul', true, 0);\n\t\t\t$value_arr['email_accounts'] = $this->getUlParam('email_accounts', 'email_accounts_ul', true, 0);\n\t\t\t$value_arr['email_forwarders'] = $this->getUlParam('email_forwarders', 'email_forwarders_ul', true, 0);\n\t\t\t$value_arr['email_quota'] = $this->getUlParam('email_quota', 'email_quota_ul', true, Settings::Get('system.mail_quota'));\n\t\t\t$value_arr['email_imap'] = $this->getBoolParam('email_imap', true, 0);\n\t\t\t$value_arr['email_pop3'] = $this->getBoolParam('email_pop3', true, 0);\n\t\t\t$value_arr['ftps'] = $this->getUlParam('ftps', 'ftps_ul', true, 0);\n\t\t\t$value_arr['mysqls'] = $this->getUlParam('mysqls', 'mysqls_ul', true, 0);\n\t\t\t$value_arr['phpenabled'] = $this->getBoolParam('phpenabled', true, 0);\n\t\t\t$p_allowed_phpconfigs = $this->getParam('allowed_phpconfigs', true, []);\n\t\t\t$value_arr['perlenabled'] = $this->getBoolParam('perlenabled', true, 0);\n\t\t\t$value_arr['dnsenabled'] = $this->getBoolParam('dnsenabled', true, 0);\n\t\t\t$value_arr['logviewenabled'] = $this->getBoolParam('logviewenabled', true, 0);\n\n\t\t\t// validation\n\t\t\t$name = Validate::validate(trim($name), 'name', '', '', [], true);\n\t\t\t$description = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $description), 'description', Validate::REGEX_DESC_TEXT);\n\n\t\t\tif (Settings::Get('system.mail_quota_enabled') != '1') {\n\t\t\t\t$value_arr['email_quota'] = -1;\n\t\t\t}\n\n\t\t\t$value_arr['allowed_phpconfigs'] = [];\n\t\t\tif (!empty($p_allowed_phpconfigs) && is_array($p_allowed_phpconfigs)) {\n\t\t\t\tforeach ($p_allowed_phpconfigs as $allowed_phpconfig) {\n\t\t\t\t\t$allowed_phpconfig = intval($allowed_phpconfig);\n\t\t\t\t\t$value_arr['allowed_phpconfigs'][] = $allowed_phpconfig;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$value_arr['allowed_phpconfigs'] = array_map('intval', $value_arr['allowed_phpconfigs']);\n\n\t\t\t$ins_stmt = Database::prepare(\"\n\t\t\t\tINSERT INTO `\" . TABLE_PANEL_PLANS . \"`\n\t\t\t\tSET `adminid` = :adminid, `name` = :name, `description` = :desc, `value` = :valuearr, `ts` = UNIX_TIMESTAMP();\n\t\t\t\");\n\t\t\t$ins_data = [\n\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t'name' => $name,\n\t\t\t\t'desc' => $description,\n\t\t\t\t'valuearr' => json_encode($value_arr)\n\t\t\t];\n\t\t\tDatabase::pexecute($ins_stmt, $ins_data, true, true);\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] added hosting-plan '\" . $name . \"'\");\n\t\t\t$result = $this->apiCall('HostingPlans.get', [\n\t\t\t\t'planname' => $name\n\t\t\t]);\n\t\t\treturn $this->response($result);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * return a hosting-plan entry by either id or plan-name\n\t *\n\t * @param int $id\n\t *            optional, the hosting-plan-id\n\t * @param string $planname\n\t *            optional, the hosting-plan-name\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function get()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$dn_optional = $id > 0;\n\t\t\t$planname = $this->getParam('planname', $dn_optional, '');\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_PLANS . \"` WHERE \" . ($id > 0 ? \"`id` = :iddn\" : \"`name` = :iddn\") . ($this->getUserDetail('customers_see_all') ? '' : \" AND `adminid` = :adminid\"));\n\t\t\t$params = [\n\t\t\t\t'iddn' => ($id <= 0 ? $planname : $id)\n\t\t\t];\n\t\t\tif ($this->getUserDetail('customers_see_all') == '0') {\n\t\t\t\t$params['adminid'] = $this->getUserDetail('adminid');\n\t\t\t}\n\t\t\t$result = Database::pexecute_first($result_stmt, $params, true, true);\n\t\t\tif ($result) {\n\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"[API] get hosting-plan '\" . $result['name'] . \"'\");\n\t\t\t\treturn $this->response($result);\n\t\t\t}\n\t\t\t$key = ($id > 0 ? \"id #\" . $id : \"planname '\" . $planname . \"'\");\n\t\t\tthrow new Exception(\"Hosting-plan with \" . $key . \" could not be found\", 404);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * update hosting-plan by either id or plan-name\n\t *\n\t * @param int $id\n\t *            optional the hosting-plan-id\n\t * @param string $planname\n\t *            optional the hosting-plan-name\n\t * @param string $name\n\t *            optional name of the plan\n\t * @param string $description\n\t *            optional description for hosting-plan\n\t * @param int $diskspace\n\t *            optional disk-space available for customer in MB, default 0\n\t * @param bool $diskspace_ul\n\t *            optional, whether customer should have unlimited diskspace, default 0 (false)\n\t * @param int $traffic\n\t *            optional traffic available for customer in GB, default 0\n\t * @param bool $traffic_ul\n\t *            optional, whether customer should have unlimited traffic, default 0 (false)\n\t * @param int $subdomains\n\t *            optional amount of subdomains available for customer, default 0\n\t * @param bool $subdomains_ul\n\t *            optional, whether customer should have unlimited subdomains, default 0 (false)\n\t * @param int $emails\n\t *            optional amount of emails available for customer, default 0\n\t * @param bool $emails_ul\n\t *            optional, whether customer should have unlimited emails, default 0 (false)\n\t * @param int $email_accounts\n\t *            optional amount of email-accounts available for customer, default 0\n\t * @param bool $email_accounts_ul\n\t *            optional, whether customer should have unlimited email-accounts, default 0 (false)\n\t * @param int $email_forwarders\n\t *            optional amount of email-forwarders available for customer, default 0\n\t * @param bool $email_forwarders_ul\n\t *            optional, whether customer should have unlimited email-forwarders, default 0 (false)\n\t * @param int $email_quota\n\t *            optional size of email-quota available for customer in MB, default is system-setting mail_quota\n\t * @param bool $email_quota_ul\n\t *            optional, whether customer should have unlimited email-quota, default 0 (false)\n\t * @param bool $email_imap\n\t *            optional, whether to allow IMAP access, default 0 (false)\n\t * @param bool $email_pop3\n\t *            optional, whether to allow POP3 access, default 0 (false)\n\t * @param int $ftps\n\t *            optional amount of ftp-accounts available for customer, default 0\n\t * @param bool $ftps_ul\n\t *            optional, whether customer should have unlimited ftp-accounts, default 0 (false)\n\t * @param int $mysqls\n\t *            optional amount of mysql-databases available for customer, default 0\n\t * @param bool $mysqls_ul\n\t *            optional, whether customer should have unlimited mysql-databases, default 0 (false)\n\t * @param bool $phpenabled\n\t *            optional, whether to allow usage of PHP, default 0 (false)\n\t * @param array $allowed_phpconfigs\n\t *            optional, array of IDs of php-config that the customer is allowed to use, default empty (none)\n\t * @param bool $perlenabled\n\t *            optional, whether to allow usage of Perl/CGI, default 0 (false)\n\t * @param bool $dnsenabled\n\t *            optional, either to allow usage of the DNS editor (requires activated nameserver in settings),\n\t *            default 0 (false)\n\t * @param bool $logviewenabled\n\t *            optional, either to allow access to webserver access/error-logs, default 0 (false)\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function update()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t// parameters\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$dn_optional = $id > 0;\n\t\t\t$planname = $this->getParam('planname', $dn_optional, '');\n\n\t\t\t// get requested hosting-plan\n\t\t\t$result = $this->apiCall('HostingPlans.get', [\n\t\t\t\t'id' => $id,\n\t\t\t\t'planname' => $planname\n\t\t\t]);\n\t\t\t$id = $result['id'];\n\n\t\t\t$result['value'] = json_decode($result['value'], true);\n\t\t\tforeach ($result['value'] as $index => $value) {\n\t\t\t\t$result[$index] = $value;\n\t\t\t}\n\n\t\t\t$name = $this->getParam('name', true, $result['name']);\n\t\t\t$description = $this->getParam('description', true, $result['description']);\n\n\t\t\t$value_arr = [];\n\t\t\t$value_arr['diskspace'] = $this->getUlParam('diskspace', 'diskspace_ul', true, $result['diskspace']);\n\t\t\t$value_arr['traffic'] = $this->getUlParam('traffic', 'traffic_ul', true, $result['traffic']);\n\t\t\t$value_arr['subdomains'] = $this->getUlParam('subdomains', 'subdomains_ul', true, $result['subdomains']);\n\t\t\t$value_arr['emails'] = $this->getUlParam('emails', 'emails_ul', true, $result['emails']);\n\t\t\t$value_arr['email_accounts'] = $this->getUlParam('email_accounts', 'email_accounts_ul', true, $result['email_accounts']);\n\t\t\t$value_arr['email_forwarders'] = $this->getUlParam('email_forwarders', 'email_forwarders_ul', true, $result['email_forwarders']);\n\t\t\t$value_arr['email_quota'] = $this->getUlParam('email_quota', 'email_quota_ul', true, $result['email_quota']);\n\t\t\t$value_arr['email_imap'] = $this->getParam('email_imap', true, $result['email_imap']);\n\t\t\t$value_arr['email_pop3'] = $this->getParam('email_pop3', true, $result['email_pop3']);\n\t\t\t$value_arr['ftps'] = $this->getUlParam('ftps', 'ftps_ul', true, $result['ftps']);\n\t\t\t$value_arr['mysqls'] = $this->getUlParam('mysqls', 'mysqls_ul', true, $result['mysqls']);\n\t\t\t$value_arr['phpenabled'] = $this->getBoolParam('phpenabled', true, $result['phpenabled']);\n\t\t\t$p_allowed_phpconfigs = $this->getParam('allowed_phpconfigs', true, $result['allowed_phpconfigs']);\n\t\t\t$value_arr['perlenabled'] = $this->getBoolParam('perlenabled', true, $result['perlenabled']);\n\t\t\t$value_arr['dnsenabled'] = $this->getBoolParam('dnsenabled', true, $result['dnsenabled']);\n\t\t\t$value_arr['logviewenabled'] = $this->getBoolParam('logviewenabled', true, $result['logviewenabled']);\n\n\t\t\t// validation\n\t\t\t$name = Validate::validate(trim($name), 'name', '', '', [], true);\n\t\t\t$description = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $description), 'description', Validate::REGEX_DESC_TEXT);\n\n\t\t\tif (Settings::Get('system.mail_quota_enabled') != '1') {\n\t\t\t\t$value_arr['email_quota'] = -1;\n\t\t\t}\n\n\t\t\tif (empty($name)) {\n\t\t\t\t$name = $result['name'];\n\t\t\t}\n\n\t\t\t$value_arr['allowed_phpconfigs'] = [];\n\t\t\tif (!empty($p_allowed_phpconfigs) && is_array($p_allowed_phpconfigs)) {\n\t\t\t\tforeach ($p_allowed_phpconfigs as $allowed_phpconfig) {\n\t\t\t\t\t$allowed_phpconfig = intval($allowed_phpconfig);\n\t\t\t\t\t$value_arr['allowed_phpconfigs'][] = $allowed_phpconfig;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$value_arr['allowed_phpconfigs'] = array_map('intval', $value_arr['allowed_phpconfigs']);\n\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_PLANS . \"`\n\t\t\t\tSET `name` = :name, `description` = :desc, `value` = :valuearr, `ts` = UNIX_TIMESTAMP()\n\t\t\t\tWHERE `id` = :id\n\t\t\t\");\n\t\t\t$update_data = [\n\t\t\t\t'name' => $name,\n\t\t\t\t'desc' => $description,\n\t\t\t\t'valuearr' => json_encode($value_arr),\n\t\t\t\t'id' => $id\n\t\t\t];\n\t\t\tDatabase::pexecute($upd_stmt, $update_data, true, true);\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] updated hosting-plan '\" . $result['name'] . \"'\");\n\t\t\treturn $this->response($update_data);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * delete hosting-plan by either id or plan-name\n\t *\n\t * @param int $id\n\t *            optional the hosting-plan-id\n\t * @param string $planname\n\t *            optional the hosting-plan-name\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function delete()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$dn_optional = $id > 0;\n\t\t\t$planname = $this->getParam('planname', $dn_optional, '');\n\n\t\t\t// get requested hosting-plan\n\t\t\t$result = $this->apiCall('HostingPlans.get', [\n\t\t\t\t'id' => $id,\n\t\t\t\t'planname' => $planname\n\t\t\t]);\n\t\t\t$id = $result['id'];\n\n\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_PANEL_PLANS . \"` WHERE `id` = :id\n\t\t\t\");\n\t\t\tDatabase::pexecute($del_stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] deleted hosting-plan '\" . $result['name'] . \"'\");\n\t\t\treturn $this->response($result);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n}\n"], "fixing_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\Api\\Commands;\n\nuse Exception;\nuse Froxlor\\Api\\ApiCommand;\nuse Froxlor\\Api\\ResourceEntity;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Settings;\nuse Froxlor\\Validate\\Validate;\nuse PDO;\n\n/**\n * @since 0.10.0\n */\nclass HostingPlans extends ApiCommand implements ResourceEntity\n{\n\n\t/**\n\t * list all available hosting plans\n\t *\n\t * @param array $sql_search\n\t *            optional array with index = fieldname, and value = array with 'op' => operator (one of <, > or =),\n\t *            LIKE is used if left empty and 'value' => searchvalue\n\t * @param int $sql_limit\n\t *            optional specify number of results to be returned\n\t * @param int $sql_offset\n\t *            optional specify offset for resultset\n\t * @param array $sql_orderby\n\t *            optional array with index = fieldname and value = ASC|DESC to order the resultset by one or more\n\t *            fields\n\t *\n\t * @access admin\n\t * @return string json-encoded array count|list\n\t * @throws Exception\n\t */\n\tpublic function listing()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"[API] list hosting-plans\");\n\t\t\t$query_fields = [];\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT p.*, a.loginname as adminname\n\t\t\t\tFROM `\" . TABLE_PANEL_PLANS . \"` p, `\" . TABLE_PANEL_ADMINS . \"` a\n\t\t\t\tWHERE `p`.`adminid` = `a`.`adminid`\" . ($this->getUserDetail('customers_see_all') ? '' : \" AND `p`.`adminid` = :adminid \") . $this->getSearchWhere($query_fields, true) . $this->getOrderBy() . $this->getLimit());\n\t\t\t$params = [];\n\t\t\tif ($this->getUserDetail('customers_see_all') == '0') {\n\t\t\t\t$params['adminid'] = $this->getUserDetail('adminid');\n\t\t\t}\n\t\t\t$params = array_merge($params, $query_fields);\n\t\t\tDatabase::pexecute($result_stmt, $params, true, true);\n\t\t\t$result = [];\n\t\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$result[] = $row;\n\t\t\t}\n\t\t\treturn $this->response([\n\t\t\t\t'count' => count($result),\n\t\t\t\t'list' => $result\n\t\t\t]);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * returns the total number of accessible hosting plans\n\t *\n\t * @access admin\n\t * @return string json-encoded response message\n\t * @throws Exception\n\t */\n\tpublic function listingCount()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT COUNT(*) as num_plans\n\t\t\t\tFROM `\" . TABLE_PANEL_PLANS . \"` p, `\" . TABLE_PANEL_ADMINS . \"` a\n\t\t\t\tWHERE `p`.`adminid` = `a`.`adminid`\" . ($this->getUserDetail('customers_see_all') ? '' : \" AND `p`.`adminid` = :adminid \"));\n\t\t\t$params = [];\n\t\t\tif ($this->getUserDetail('customers_see_all') == '0') {\n\t\t\t\t$params['adminid'] = $this->getUserDetail('adminid');\n\t\t\t}\n\t\t\t$result = Database::pexecute_first($result_stmt, $params, true, true);\n\t\t\tif ($result) {\n\t\t\t\treturn $this->response($result['num_plans']);\n\t\t\t}\n\t\t\treturn $this->response(0);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * add new hosting-plan\n\t *\n\t * @param string $name\n\t *            name of the plan\n\t * @param string $description\n\t *            optional, description for hosting-plan\n\t * @param int $diskspace\n\t *            optional disk-space available for customer in MB, default 0\n\t * @param bool $diskspace_ul\n\t *            optional, whether customer should have unlimited diskspace, default 0 (false)\n\t * @param int $traffic\n\t *            optional traffic available for customer in GB, default 0\n\t * @param bool $traffic_ul\n\t *            optional, whether customer should have unlimited traffic, default 0 (false)\n\t * @param int $subdomains\n\t *            optional amount of subdomains available for customer, default 0\n\t * @param bool $subdomains_ul\n\t *            optional, whether customer should have unlimited subdomains, default 0 (false)\n\t * @param int $emails\n\t *            optional amount of emails available for customer, default 0\n\t * @param bool $emails_ul\n\t *            optional, whether customer should have unlimited emails, default 0 (false)\n\t * @param int $email_accounts\n\t *            optional amount of email-accounts available for customer, default 0\n\t * @param bool $email_accounts_ul\n\t *            optional, whether customer should have unlimited email-accounts, default 0 (false)\n\t * @param int $email_forwarders\n\t *            optional amount of email-forwarders available for customer, default 0\n\t * @param bool $email_forwarders_ul\n\t *            optional, whether customer should have unlimited email-forwarders, default 0 (false)\n\t * @param int $email_quota\n\t *            optional size of email-quota available for customer in MB, default is system-setting mail_quota\n\t * @param bool $email_quota_ul\n\t *            optional, whether customer should have unlimited email-quota, default 0 (false)\n\t * @param bool $email_imap\n\t *            optional, whether to allow IMAP access, default 0 (false)\n\t * @param bool $email_pop3\n\t *            optional, whether to allow POP3 access, default 0 (false)\n\t * @param int $ftps\n\t *            optional amount of ftp-accounts available for customer, default 0\n\t * @param bool $ftps_ul\n\t *            optional, whether customer should have unlimited ftp-accounts, default 0 (false)\n\t * @param int $mysqls\n\t *            optional amount of mysql-databases available for customer, default 0\n\t * @param bool $mysqls_ul\n\t *            optional, whether customer should have unlimited mysql-databases, default 0 (false)\n\t * @param bool $phpenabled\n\t *            optional, whether to allow usage of PHP, default 0 (false)\n\t * @param array $allowed_phpconfigs\n\t *            optional, array of IDs of php-config that the customer is allowed to use, default empty (none)\n\t * @param bool $perlenabled\n\t *            optional, whether to allow usage of Perl/CGI, default 0 (false)\n\t * @param bool $dnsenabled\n\t *            optional, whether to allow usage of the DNS editor (requires activated nameserver in settings),\n\t *            default 0 (false)\n\t * @param bool $logviewenabled\n\t *            optional, whether to allow access to webserver access/error-logs, default 0 (false)\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function add()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$name = $this->getParam('name');\n\t\t\t$description = $this->getParam('description', true, '');\n\n\t\t\t$value_arr = [];\n\t\t\t$value_arr['diskspace'] = $this->getUlParam('diskspace', 'diskspace_ul', true, 0);\n\t\t\t$value_arr['traffic'] = $this->getUlParam('traffic', 'traffic_ul', true, 0);\n\t\t\t$value_arr['subdomains'] = $this->getUlParam('subdomains', 'subdomains_ul', true, 0);\n\t\t\t$value_arr['emails'] = $this->getUlParam('emails', 'emails_ul', true, 0);\n\t\t\t$value_arr['email_accounts'] = $this->getUlParam('email_accounts', 'email_accounts_ul', true, 0);\n\t\t\t$value_arr['email_forwarders'] = $this->getUlParam('email_forwarders', 'email_forwarders_ul', true, 0);\n\t\t\t$value_arr['email_quota'] = $this->getUlParam('email_quota', 'email_quota_ul', true, Settings::Get('system.mail_quota'));\n\t\t\t$value_arr['email_imap'] = $this->getBoolParam('email_imap', true, 0);\n\t\t\t$value_arr['email_pop3'] = $this->getBoolParam('email_pop3', true, 0);\n\t\t\t$value_arr['ftps'] = $this->getUlParam('ftps', 'ftps_ul', true, 0);\n\t\t\t$value_arr['mysqls'] = $this->getUlParam('mysqls', 'mysqls_ul', true, 0);\n\t\t\t$value_arr['phpenabled'] = $this->getBoolParam('phpenabled', true, 0);\n\t\t\t$p_allowed_phpconfigs = $this->getParam('allowed_phpconfigs', true, []);\n\t\t\t$value_arr['perlenabled'] = $this->getBoolParam('perlenabled', true, 0);\n\t\t\t$value_arr['dnsenabled'] = $this->getBoolParam('dnsenabled', true, 0);\n\t\t\t$value_arr['logviewenabled'] = $this->getBoolParam('logviewenabled', true, 0);\n\n\t\t\t// validation\n\t\t\t$name = Validate::validate(trim($name), 'name', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t$description = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $description), 'description', Validate::REGEX_CONF_TEXT);\n\n\t\t\tif (Settings::Get('system.mail_quota_enabled') != '1') {\n\t\t\t\t$value_arr['email_quota'] = -1;\n\t\t\t}\n\n\t\t\t$value_arr['allowed_phpconfigs'] = [];\n\t\t\tif (!empty($p_allowed_phpconfigs) && is_array($p_allowed_phpconfigs)) {\n\t\t\t\tforeach ($p_allowed_phpconfigs as $allowed_phpconfig) {\n\t\t\t\t\t$allowed_phpconfig = intval($allowed_phpconfig);\n\t\t\t\t\t$value_arr['allowed_phpconfigs'][] = $allowed_phpconfig;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$value_arr['allowed_phpconfigs'] = array_map('intval', $value_arr['allowed_phpconfigs']);\n\n\t\t\t$ins_stmt = Database::prepare(\"\n\t\t\t\tINSERT INTO `\" . TABLE_PANEL_PLANS . \"`\n\t\t\t\tSET `adminid` = :adminid, `name` = :name, `description` = :desc, `value` = :valuearr, `ts` = UNIX_TIMESTAMP();\n\t\t\t\");\n\t\t\t$ins_data = [\n\t\t\t\t'adminid' => $this->getUserDetail('adminid'),\n\t\t\t\t'name' => $name,\n\t\t\t\t'desc' => $description,\n\t\t\t\t'valuearr' => json_encode($value_arr)\n\t\t\t];\n\t\t\tDatabase::pexecute($ins_stmt, $ins_data, true, true);\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] added hosting-plan '\" . $name . \"'\");\n\t\t\t$result = $this->apiCall('HostingPlans.get', [\n\t\t\t\t'planname' => $name\n\t\t\t]);\n\t\t\treturn $this->response($result);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * return a hosting-plan entry by either id or plan-name\n\t *\n\t * @param int $id\n\t *            optional, the hosting-plan-id\n\t * @param string $planname\n\t *            optional, the hosting-plan-name\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function get()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$dn_optional = $id > 0;\n\t\t\t$planname = $this->getParam('planname', $dn_optional, '');\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_PLANS . \"` WHERE \" . ($id > 0 ? \"`id` = :iddn\" : \"`name` = :iddn\") . ($this->getUserDetail('customers_see_all') ? '' : \" AND `adminid` = :adminid\"));\n\t\t\t$params = [\n\t\t\t\t'iddn' => ($id <= 0 ? $planname : $id)\n\t\t\t];\n\t\t\tif ($this->getUserDetail('customers_see_all') == '0') {\n\t\t\t\t$params['adminid'] = $this->getUserDetail('adminid');\n\t\t\t}\n\t\t\t$result = Database::pexecute_first($result_stmt, $params, true, true);\n\t\t\tif ($result) {\n\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"[API] get hosting-plan '\" . $result['name'] . \"'\");\n\t\t\t\treturn $this->response($result);\n\t\t\t}\n\t\t\t$key = ($id > 0 ? \"id #\" . $id : \"planname '\" . $planname . \"'\");\n\t\t\tthrow new Exception(\"Hosting-plan with \" . $key . \" could not be found\", 404);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * update hosting-plan by either id or plan-name\n\t *\n\t * @param int $id\n\t *            optional the hosting-plan-id\n\t * @param string $planname\n\t *            optional the hosting-plan-name\n\t * @param string $name\n\t *            optional name of the plan\n\t * @param string $description\n\t *            optional description for hosting-plan\n\t * @param int $diskspace\n\t *            optional disk-space available for customer in MB, default 0\n\t * @param bool $diskspace_ul\n\t *            optional, whether customer should have unlimited diskspace, default 0 (false)\n\t * @param int $traffic\n\t *            optional traffic available for customer in GB, default 0\n\t * @param bool $traffic_ul\n\t *            optional, whether customer should have unlimited traffic, default 0 (false)\n\t * @param int $subdomains\n\t *            optional amount of subdomains available for customer, default 0\n\t * @param bool $subdomains_ul\n\t *            optional, whether customer should have unlimited subdomains, default 0 (false)\n\t * @param int $emails\n\t *            optional amount of emails available for customer, default 0\n\t * @param bool $emails_ul\n\t *            optional, whether customer should have unlimited emails, default 0 (false)\n\t * @param int $email_accounts\n\t *            optional amount of email-accounts available for customer, default 0\n\t * @param bool $email_accounts_ul\n\t *            optional, whether customer should have unlimited email-accounts, default 0 (false)\n\t * @param int $email_forwarders\n\t *            optional amount of email-forwarders available for customer, default 0\n\t * @param bool $email_forwarders_ul\n\t *            optional, whether customer should have unlimited email-forwarders, default 0 (false)\n\t * @param int $email_quota\n\t *            optional size of email-quota available for customer in MB, default is system-setting mail_quota\n\t * @param bool $email_quota_ul\n\t *            optional, whether customer should have unlimited email-quota, default 0 (false)\n\t * @param bool $email_imap\n\t *            optional, whether to allow IMAP access, default 0 (false)\n\t * @param bool $email_pop3\n\t *            optional, whether to allow POP3 access, default 0 (false)\n\t * @param int $ftps\n\t *            optional amount of ftp-accounts available for customer, default 0\n\t * @param bool $ftps_ul\n\t *            optional, whether customer should have unlimited ftp-accounts, default 0 (false)\n\t * @param int $mysqls\n\t *            optional amount of mysql-databases available for customer, default 0\n\t * @param bool $mysqls_ul\n\t *            optional, whether customer should have unlimited mysql-databases, default 0 (false)\n\t * @param bool $phpenabled\n\t *            optional, whether to allow usage of PHP, default 0 (false)\n\t * @param array $allowed_phpconfigs\n\t *            optional, array of IDs of php-config that the customer is allowed to use, default empty (none)\n\t * @param bool $perlenabled\n\t *            optional, whether to allow usage of Perl/CGI, default 0 (false)\n\t * @param bool $dnsenabled\n\t *            optional, either to allow usage of the DNS editor (requires activated nameserver in settings),\n\t *            default 0 (false)\n\t * @param bool $logviewenabled\n\t *            optional, either to allow access to webserver access/error-logs, default 0 (false)\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function update()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t// parameters\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$dn_optional = $id > 0;\n\t\t\t$planname = $this->getParam('planname', $dn_optional, '');\n\n\t\t\t// get requested hosting-plan\n\t\t\t$result = $this->apiCall('HostingPlans.get', [\n\t\t\t\t'id' => $id,\n\t\t\t\t'planname' => $planname\n\t\t\t]);\n\t\t\t$id = $result['id'];\n\n\t\t\t$result['value'] = json_decode($result['value'], true);\n\t\t\tforeach ($result['value'] as $index => $value) {\n\t\t\t\t$result[$index] = $value;\n\t\t\t}\n\n\t\t\t$name = $this->getParam('name', true, $result['name']);\n\t\t\t$description = $this->getParam('description', true, $result['description']);\n\n\t\t\t$value_arr = [];\n\t\t\t$value_arr['diskspace'] = $this->getUlParam('diskspace', 'diskspace_ul', true, $result['diskspace']);\n\t\t\t$value_arr['traffic'] = $this->getUlParam('traffic', 'traffic_ul', true, $result['traffic']);\n\t\t\t$value_arr['subdomains'] = $this->getUlParam('subdomains', 'subdomains_ul', true, $result['subdomains']);\n\t\t\t$value_arr['emails'] = $this->getUlParam('emails', 'emails_ul', true, $result['emails']);\n\t\t\t$value_arr['email_accounts'] = $this->getUlParam('email_accounts', 'email_accounts_ul', true, $result['email_accounts']);\n\t\t\t$value_arr['email_forwarders'] = $this->getUlParam('email_forwarders', 'email_forwarders_ul', true, $result['email_forwarders']);\n\t\t\t$value_arr['email_quota'] = $this->getUlParam('email_quota', 'email_quota_ul', true, $result['email_quota']);\n\t\t\t$value_arr['email_imap'] = $this->getParam('email_imap', true, $result['email_imap']);\n\t\t\t$value_arr['email_pop3'] = $this->getParam('email_pop3', true, $result['email_pop3']);\n\t\t\t$value_arr['ftps'] = $this->getUlParam('ftps', 'ftps_ul', true, $result['ftps']);\n\t\t\t$value_arr['mysqls'] = $this->getUlParam('mysqls', 'mysqls_ul', true, $result['mysqls']);\n\t\t\t$value_arr['phpenabled'] = $this->getBoolParam('phpenabled', true, $result['phpenabled']);\n\t\t\t$p_allowed_phpconfigs = $this->getParam('allowed_phpconfigs', true, $result['allowed_phpconfigs']);\n\t\t\t$value_arr['perlenabled'] = $this->getBoolParam('perlenabled', true, $result['perlenabled']);\n\t\t\t$value_arr['dnsenabled'] = $this->getBoolParam('dnsenabled', true, $result['dnsenabled']);\n\t\t\t$value_arr['logviewenabled'] = $this->getBoolParam('logviewenabled', true, $result['logviewenabled']);\n\n\t\t\t// validation\n\t\t\t$name = Validate::validate(trim($name), 'name', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t$description = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $description), 'description', Validate::REGEX_CONF_TEXT);\n\n\t\t\tif (Settings::Get('system.mail_quota_enabled') != '1') {\n\t\t\t\t$value_arr['email_quota'] = -1;\n\t\t\t}\n\n\t\t\tif (empty($name)) {\n\t\t\t\t$name = $result['name'];\n\t\t\t}\n\n\t\t\t$value_arr['allowed_phpconfigs'] = [];\n\t\t\tif (!empty($p_allowed_phpconfigs) && is_array($p_allowed_phpconfigs)) {\n\t\t\t\tforeach ($p_allowed_phpconfigs as $allowed_phpconfig) {\n\t\t\t\t\t$allowed_phpconfig = intval($allowed_phpconfig);\n\t\t\t\t\t$value_arr['allowed_phpconfigs'][] = $allowed_phpconfig;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$value_arr['allowed_phpconfigs'] = array_map('intval', $value_arr['allowed_phpconfigs']);\n\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_PLANS . \"`\n\t\t\t\tSET `name` = :name, `description` = :desc, `value` = :valuearr, `ts` = UNIX_TIMESTAMP()\n\t\t\t\tWHERE `id` = :id\n\t\t\t\");\n\t\t\t$update_data = [\n\t\t\t\t'name' => $name,\n\t\t\t\t'desc' => $description,\n\t\t\t\t'valuearr' => json_encode($value_arr),\n\t\t\t\t'id' => $id\n\t\t\t];\n\t\t\tDatabase::pexecute($upd_stmt, $update_data, true, true);\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] updated hosting-plan '\" . $result['name'] . \"'\");\n\t\t\treturn $this->response($update_data);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * delete hosting-plan by either id or plan-name\n\t *\n\t * @param int $id\n\t *            optional the hosting-plan-id\n\t * @param string $planname\n\t *            optional the hosting-plan-name\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function delete()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$dn_optional = $id > 0;\n\t\t\t$planname = $this->getParam('planname', $dn_optional, '');\n\n\t\t\t// get requested hosting-plan\n\t\t\t$result = $this->apiCall('HostingPlans.get', [\n\t\t\t\t'id' => $id,\n\t\t\t\t'planname' => $planname\n\t\t\t]);\n\t\t\t$id = $result['id'];\n\n\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_PANEL_PLANS . \"` WHERE `id` = :id\n\t\t\t\");\n\t\t\tDatabase::pexecute($del_stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] deleted hosting-plan '\" . $result['name'] . \"'\");\n\t\t\treturn $this->response($result);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n}\n"], "filenames": ["lib/Froxlor/Api/Commands/HostingPlans.php"], "buggy_code_start_loc": [203], "buggy_code_end_loc": [387], "fixing_code_start_loc": [203], "fixing_code_end_loc": [387], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository froxlor/froxlor prior to 2.0.22.", "other": {"cve": {"id": "CVE-2023-4829", "sourceIdentifier": "security@huntr.dev", "published": "2023-10-13T13:15:12.523", "lastModified": "2023-10-17T16:10:31.727", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository froxlor/froxlor prior to 2.0.22."}, {"lang": "es", "value": "Cross-Site Scripting (XSS) Almacenado en el repositorio de GitHub froxlor/froxlor anterior a 2.0.22."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.9, "impactScore": 3.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:froxlor:froxlor:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.22", "matchCriteriaId": "3A1F0C8D-0EC2-4AEF-8800-3FCE3B9D9240"}]}]}], "references": [{"url": "https://github.com/froxlor/froxlor/commit/4711a414360782fe4fc94f7c25027077cbcdf73d", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/babd73ca-6c80-4145-8c7d-33a883fe606b", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/froxlor/froxlor/commit/4711a414360782fe4fc94f7c25027077cbcdf73d"}}