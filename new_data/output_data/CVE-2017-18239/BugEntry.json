{"buggy_code": ["package authentikat.jwt\n\nimport com.fasterxml.jackson.core.{ JsonFactory, JsonParser }\nimport org.apache.commons.codec.binary.Base64.{ decodeBase64, encodeBase64URLSafeString }\n//import org.json4s._\nimport org.json4s.jackson.JsonMethods\n\nimport scala.util.control.Exception.allCatch\n\nobject JsonWebToken extends JsonMethods {\n  mapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true)\n  /**\n   * Produces a JWT.\n   * @param header\n   * @param claims\n   * @param key\n   * @return\n   */\n\n  def apply(header: JwtHeader, claims: JwtClaimsSet, key: String): String = {\n    val encodedHeader = encodeBase64URLSafeString(header.asJsonString.getBytes(\"UTF-8\"))\n    val encodedClaims = encodeBase64URLSafeString(claims.asJsonString.getBytes(\"UTF-8\"))\n\n    val signingInput = encodedHeader + \".\" + encodedClaims\n\n    val encodedSignature: String = encodeBase64URLSafeString(\n      JsonWebSignature(header.algorithm.getOrElse(\"none\"), signingInput, key))\n\n    signingInput + \".\" + encodedSignature\n  }\n\n  /**\n   * Extractor method\n   * @param jwt\n   * @return\n   */\n\n  def unapply(jwt: String): Option[(JwtHeader, JwtClaimsSetJValue, String)] = {\n    jwt.split(\"\\\\.\") match {\n      case Array(providedHeader, providedClaims, providedSignature) \u21d2\n        import org.json4s.DefaultFormats\n        implicit val formats = DefaultFormats\n\n        val headerJsonString = new String(decodeBase64(providedHeader), \"UTF-8\")\n        val header = JwtHeader.fromJsonStringOpt(headerJsonString)\n        val optClaimsSet = allCatch opt {\n          parse(new String(decodeBase64(providedClaims), \"UTF-8\"))\n        }\n\n        if (header.isEmpty || optClaimsSet.isEmpty)\n          None\n        else {\n          val claimsSet = JwtClaimsSetJValue(optClaimsSet.get)\n\n          val signature = providedSignature\n\n          Some(header.get, claimsSet, signature)\n        }\n      case _ \u21d2\n        None\n    }\n  }\n\n  /**\n   * Validate a JWT claims set against a secret key.\n   * Validates an un-parsed jwt as parsing it before validating it is probably un-necessary.\n   * Note this does NOT validate exp or other validation claims - it only validates the claims against the hash.\n   * @param jwt\n   * @param key\n   * @return\n   */\n\n  def validate(jwt: String, key: String): Boolean = {\n\n    import org.json4s.DefaultFormats\n    implicit val formats = DefaultFormats\n\n    jwt.split(\"\\\\.\") match {\n      case Array(providedHeader, providedClaims, providedSignature) \u21d2\n\n        val headerJsonString = new String(decodeBase64(providedHeader), \"UTF-8\")\n        val header = JwtHeader.fromJsonStringOpt(headerJsonString).getOrElse(JwtHeader(None, None, None))\n\n        val signature = encodeBase64URLSafeString(\n          JsonWebSignature(header.algorithm.getOrElse(\"none\"), providedHeader + \".\" + providedClaims, key))\n\n        providedSignature.contentEquals(signature)\n      case _ \u21d2\n        false\n    }\n  }\n\n}\n\n"], "fixing_code": ["package authentikat.jwt\n\nimport com.fasterxml.jackson.core.{ JsonFactory, JsonParser }\nimport org.apache.commons.codec.binary.Base64.{ decodeBase64, encodeBase64URLSafeString }\n//import org.json4s._\nimport org.json4s.jackson.JsonMethods\n\nimport scala.util.control.Exception.allCatch\n\nobject JsonWebToken extends JsonMethods {\n  mapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true)\n  /**\n   * Produces a JWT.\n   * @param header\n   * @param claims\n   * @param key\n   * @return\n   */\n\n  def apply(header: JwtHeader, claims: JwtClaimsSet, key: String): String = {\n    val encodedHeader = encodeBase64URLSafeString(header.asJsonString.getBytes(\"UTF-8\"))\n    val encodedClaims = encodeBase64URLSafeString(claims.asJsonString.getBytes(\"UTF-8\"))\n\n    val signingInput = encodedHeader + \".\" + encodedClaims\n\n    val encodedSignature: String = encodeBase64URLSafeString(\n      JsonWebSignature(header.algorithm.getOrElse(\"none\"), signingInput, key))\n\n    signingInput + \".\" + encodedSignature\n  }\n\n  /**\n   * Extractor method\n   * @param jwt\n   * @return\n   */\n\n  def unapply(jwt: String): Option[(JwtHeader, JwtClaimsSetJValue, String)] = {\n    jwt.split(\"\\\\.\") match {\n      case Array(providedHeader, providedClaims, providedSignature) \u21d2\n        import org.json4s.DefaultFormats\n        implicit val formats = DefaultFormats\n\n        val headerJsonString = new String(decodeBase64(providedHeader), \"UTF-8\")\n        val header = JwtHeader.fromJsonStringOpt(headerJsonString)\n        val optClaimsSet = allCatch opt {\n          parse(new String(decodeBase64(providedClaims), \"UTF-8\"))\n        }\n\n        if (header.isEmpty || optClaimsSet.isEmpty)\n          None\n        else {\n          val claimsSet = JwtClaimsSetJValue(optClaimsSet.get)\n\n          val signature = providedSignature\n\n          Some(header.get, claimsSet, signature)\n        }\n      case _ \u21d2\n        None\n    }\n  }\n\n  /**\n   * Validate a JWT claims set against a secret key.\n   * Validates an un-parsed jwt as parsing it before validating it is probably un-necessary.\n   * Note this does NOT validate exp or other validation claims - it only validates the claims against the hash.\n   * @param jwt\n   * @param key\n   * @return\n   */\n\n  def validate(jwt: String, key: String): Boolean = {\n\n    import org.json4s.DefaultFormats\n    implicit val formats = DefaultFormats\n\n    jwt.split(\"\\\\.\") match {\n      case Array(providedHeader, providedClaims, providedSignature) \u21d2\n\n        val headerJsonString = new String(decodeBase64(providedHeader), \"UTF-8\")\n        val header = JwtHeader.fromJsonStringOpt(headerJsonString).getOrElse(JwtHeader(None, None, None))\n\n        val signature = encodeBase64URLSafeString(\n          JsonWebSignature(header.algorithm.getOrElse(\"none\"), providedHeader + \".\" + providedClaims, key))\n\n        java.security.MessageDigest.isEqual(providedSignature.getBytes(), signature.getBytes())\n      case _ \u21d2\n        false\n    }\n  }\n\n}\n\n"], "filenames": ["src/main/scala/authentikat/jwt/JsonWebToken.scala"], "buggy_code_start_loc": [87], "buggy_code_end_loc": [88], "fixing_code_start_loc": [87], "fixing_code_end_loc": [88], "type": "NVD-CWE-noinfo", "message": "A time-sensitive equality check on the JWT signature in the JsonWebToken.validate method in main/scala/authentikat/jwt/JsonWebToken.scala in authentikat-jwt (aka com.jason-goodwin/authentikat-jwt) version 0.4.5 and earlier allows the supplier of a JWT token to guess bit after bit of the signature by repeating validation requests.", "other": {"cve": {"id": "CVE-2017-18239", "sourceIdentifier": "cve@mitre.org", "published": "2018-03-18T03:29:00.213", "lastModified": "2019-10-03T00:03:26.223", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A time-sensitive equality check on the JWT signature in the JsonWebToken.validate method in main/scala/authentikat/jwt/JsonWebToken.scala in authentikat-jwt (aka com.jason-goodwin/authentikat-jwt) version 0.4.5 and earlier allows the supplier of a JWT token to guess bit after bit of the signature by repeating validation requests."}, {"lang": "es", "value": "Una comprobaci\u00f3n de igualdad sensible al tiempo en la firma JWT en el m\u00e9todo JsonWebToken.validate en main/scala/authentikat/jwt/JsonWebToken.scala en authentikat-jwt (tambi\u00e9n conocido como com.jason-goodwin/authentikat-jwt), en versiones 0.4.5 y anteriores, permite que el proveedor de un token JWT adivine bit tras bit de la firma mediante la repetici\u00f3n de peticiones de validaci\u00f3n."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:authentikat-jwt_project:authentikat-jwt:*:*:*:*:*:*:*:*", "versionEndIncluding": "0.4.5", "matchCriteriaId": "2DC45D86-D60C-4F0F-9166-ACC747C1222E"}]}]}], "references": [{"url": "https://github.com/jasongoodwin/authentikat-jwt/commit/2d2fa0d40ac8f2f7aa7e9b070fa1a25eee082cb0", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jasongoodwin/authentikat-jwt/issues/12", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/jasongoodwin/authentikat-jwt/pull/36", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jasongoodwin/authentikat-jwt/commit/2d2fa0d40ac8f2f7aa7e9b070fa1a25eee082cb0"}}