{"buggy_code": ["\"\"\"This file and its contents are licensed under the Apache License 2.0. Please see the included NOTICE for copyright information and LICENSE for a copy of the license.\n\"\"\"\n\"\"\"\nDjango Base settings for Label Studio.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/3.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/3.1/ref/settings/\n\"\"\"\nimport json\nimport logging\nimport os\nimport re\nfrom datetime import timedelta\n\nfrom label_studio.core.utils.params import get_bool_env\n\nformatter = 'standard'\nJSON_LOG = get_bool_env('JSON_LOG', False)\nif JSON_LOG:\n    formatter = 'json'\n\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'json': {\n            '()': 'label_studio.core.utils.formatter.CustomJsonFormatter',\n            'format': '[%(asctime)s] [%(name)s::%(funcName)s::%(lineno)d] [%(levelname)s] [%(user_id)s] %(message)s',\n            'datefmt': '%d/%b/%Y:%H:%M:%S %z',\n        },\n        'standard': {\n            'format': '[%(asctime)s] [%(name)s::%(funcName)s::%(lineno)d] [%(levelname)s] %(message)s',\n        },\n    },\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n            'formatter': formatter,\n        },\n    },\n    'root': {\n        'handlers': ['console'],\n        'level': os.environ.get('LOG_LEVEL', 'DEBUG'),\n    },\n    'loggers': {\n        'pykwalify': {'level': 'ERROR', 'propagate': False},\n        'tavern': {'level': 'ERROR', 'propagate': False},\n        'asyncio': {'level': 'WARNING'},\n        'rules': {'level': 'WARNING'},\n        'django': {\n            'handlers': ['console'],\n            # 'propagate': True,\n        },\n        'django_auth_ldap': {'level': os.environ.get('LOG_LEVEL', 'DEBUG')},\n        'rq.worker': {\n            'handlers': ['console'],\n            'level': os.environ.get('LOG_LEVEL', 'INFO'),\n        },\n        'ddtrace': {\n            'handlers': ['console'],\n            'level': 'WARNING',\n        },\n        'ldclient.util': {\n            'handlers': ['console'],\n            'level': 'ERROR',\n        },\n    },\n}\n\n# for printing messages before main logging config applied\nif not logging.getLogger().hasHandlers():\n    logging.basicConfig(level=logging.DEBUG, format='%(message)s')\n\nfrom label_studio.core.utils.io import get_data_dir\nfrom label_studio.core.utils.params import get_bool_env, get_env\n\nlogger = logging.getLogger(__name__)\nSILENCED_SYSTEM_CHECKS = []\n\n# Hostname is used for proper path generation to the resources, pages, etc\nHOSTNAME = get_env('HOST', '')\nif HOSTNAME:\n    if not HOSTNAME.startswith('http://') and not HOSTNAME.startswith('https://'):\n        logger.info(\n            '! HOST variable found in environment, but it must start with http:// or https://, ignore it: %s', HOSTNAME\n        )\n        HOSTNAME = ''\n    else:\n        logger.info('=> Hostname correctly is set to: %s', HOSTNAME)\n        if HOSTNAME.endswith('/'):\n            HOSTNAME = HOSTNAME[0:-1]\n\n        # for django url resolver\n        if HOSTNAME:\n            # http[s]://domain.com:8080/script_name => /script_name\n            pattern = re.compile(r'^http[s]?:\\/\\/([^:\\/\\s]+(:\\d*)?)(.*)?')\n            match = pattern.match(HOSTNAME)\n            FORCE_SCRIPT_NAME = match.group(3)\n            if FORCE_SCRIPT_NAME:\n                logger.info('=> Django URL prefix is set to: %s', FORCE_SCRIPT_NAME)\n\nINTERNAL_PORT = '8080'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = get_bool_env('DEBUG', True)\nDEBUG_MODAL_EXCEPTIONS = get_bool_env('DEBUG_MODAL_EXCEPTIONS', True)\n\n# Whether to verify SSL certs when making external requests, eg in the uploader\n# \u26a0\ufe0f Turning this off means assuming risk. \u26a0\ufe0f\n# Overridable at organization level via Organization#verify_ssl_certs\nVERIFY_SSL_CERTS = get_bool_env('VERIFY_SSL_CERTS', True)\n\n# 'sqlite-dll-<arch>-<version>.zip' should be hosted at this prefix\nWINDOWS_SQLITE_BINARY_HOST_PREFIX = get_env('WINDOWS_SQLITE_BINARY_HOST_PREFIX', 'https://www.sqlite.org/2023/')\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Base path for media root and other uploaded files\nBASE_DATA_DIR = get_env('BASE_DATA_DIR', get_data_dir())\nos.makedirs(BASE_DATA_DIR, exist_ok=True)\nlogger.info('=> Database and media directory: %s', BASE_DATA_DIR)\n\n# Databases\n# https://docs.djangoproject.com/en/2.1/ref/settings/#databases\nDJANGO_DB_MYSQL = 'mysql'\nDJANGO_DB_SQLITE = 'sqlite'\nDJANGO_DB_POSTGRESQL = 'postgresql'\nDJANGO_DB = 'default'\nDATABASE_NAME_DEFAULT = os.path.join(BASE_DATA_DIR, 'label_studio.sqlite3')\nDATABASE_NAME = get_env('DATABASE_NAME', DATABASE_NAME_DEFAULT)\nDATABASES_ALL = {\n    DJANGO_DB_POSTGRESQL: {\n        'ENGINE': 'django.db.backends.postgresql',\n        'USER': get_env('POSTGRE_USER', 'postgres'),\n        'PASSWORD': get_env('POSTGRE_PASSWORD', 'postgres'),\n        'NAME': get_env('POSTGRE_NAME', 'postgres'),\n        'HOST': get_env('POSTGRE_HOST', 'localhost'),\n        'PORT': int(get_env('POSTGRE_PORT', '5432')),\n    },\n    DJANGO_DB_MYSQL: {\n        'ENGINE': 'django.db.backends.mysql',\n        'USER': get_env('MYSQL_USER', 'root'),\n        'PASSWORD': get_env('MYSQL_PASSWORD', ''),\n        'NAME': get_env('MYSQL_NAME', 'labelstudio'),\n        'HOST': get_env('MYSQL_HOST', 'localhost'),\n        'PORT': int(get_env('MYSQL_PORT', '3306')),\n    },\n    DJANGO_DB_SQLITE: {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': DATABASE_NAME,\n        'OPTIONS': {\n            # 'timeout': 20,\n        },\n    },\n}\nDATABASES_ALL['default'] = DATABASES_ALL[DJANGO_DB_POSTGRESQL]\nDATABASES = {'default': DATABASES_ALL.get(get_env('DJANGO_DB', 'default'))}\n\nDEFAULT_AUTO_FIELD = 'django.db.models.AutoField'\n\nif get_bool_env('GOOGLE_LOGGING_ENABLED', False):\n    logging.info('Google Cloud Logging handler is enabled.')\n    try:\n        import google.cloud.logging\n        from google.auth.exceptions import GoogleAuthError\n\n        client = google.cloud.logging.Client()\n        client.setup_logging()\n\n        LOGGING['handlers']['google_cloud_logging'] = {\n            'level': get_env('LOG_LEVEL', 'WARNING'),\n            'class': 'google.cloud.logging.handlers.CloudLoggingHandler',\n            'client': client,\n        }\n        LOGGING['root']['handlers'].append('google_cloud_logging')\n    except GoogleAuthError:\n        logger.exception('Google Cloud Logging handler could not be setup.')\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django.contrib.humanize',\n    'drf_yasg',\n    'corsheaders',\n    'django_extensions',\n    'django_rq',\n    'django_filters',\n    'rules',\n    'annoying',\n    'rest_framework',\n    'rest_framework.authtoken',\n    'drf_generators',\n    'core',\n    'users',\n    'organizations',\n    'data_import',\n    'data_export',\n    'projects',\n    'tasks',\n    'data_manager',\n    'io_storages',\n    'ml',\n    'webhooks',\n    'labels_manager',\n]\n\nMIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.locale.LocaleMiddleware',\n    'core.middleware.DisableCSRF',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'core.middleware.CommonMiddlewareAppendSlashWithoutRedirect',  # instead of 'CommonMiddleware'\n    'core.middleware.CommonMiddleware',\n    'django_user_agents.middleware.UserAgentMiddleware',\n    'core.middleware.SetSessionUIDMiddleware',\n    'core.middleware.ContextLogMiddleware',\n    'core.middleware.DatabaseIsLockedRetryMiddleware',\n    'core.current_request.ThreadLocalMiddleware',\n]\n\nREST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': [\n        'core.api_permissions.HasObjectPermission',\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n    'EXCEPTION_HANDLER': 'core.utils.common.custom_exception_handler',\n    'DEFAULT_RENDERER_CLASSES': ('rest_framework.renderers.JSONRenderer',),\n    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',\n    'PAGE_SIZE': 100,\n    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination'\n}\nSILENCED_SYSTEM_CHECKS += ['rest_framework.W001']\n\n# CORS & Host settings\nINTERNAL_IPS = [  # django debug toolbar for django==2.2 requirement\n    '127.0.0.1',\n    'localhost',\n]\nCORS_ORIGIN_ALLOW_ALL = True\nCORS_ALLOW_METHODS = [\n    'DELETE',\n    'GET',\n    'OPTIONS',\n    'PATCH',\n    'POST',\n    'PUT',\n]\nALLOWED_HOSTS = ['*']\n\n# Auth modules\nAUTH_USER_MODEL = 'users.User'\nAUTHENTICATION_BACKENDS = [\n    'rules.permissions.ObjectPermissionBackend',\n    'django.contrib.auth.backends.ModelBackend',\n]\nUSE_USERNAME_FOR_LOGIN = False\n\nDISABLE_SIGNUP_WITHOUT_LINK = get_bool_env('DISABLE_SIGNUP_WITHOUT_LINK', False)\n\n# Password validation:\n# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n\n# Django templates\nTEMPLATES_DIR = os.path.join(os.path.dirname(BASE_DIR), 'templates')  # ../../from_this = 'web' dir\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [TEMPLATES_DIR],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n                'core.context_processors.settings',\n            ],\n            'builtins': ['django.templatetags.i18n'],\n        },\n    }\n]\n\n# RQ\nRQ_QUEUES = {\n    'critical': {\n        'HOST': 'localhost',\n        'PORT': 6379,\n        'DB': 0,\n        'DEFAULT_TIMEOUT': 180,\n    },\n    'high': {\n        'HOST': 'localhost',\n        'PORT': 6379,\n        'DB': 0,\n        'DEFAULT_TIMEOUT': 180,\n    },\n    'default': {\n        'HOST': 'localhost',\n        'PORT': 6379,\n        'DB': 0,\n        'DEFAULT_TIMEOUT': 180,\n    },\n    'low': {\n        'HOST': 'localhost',\n        'PORT': 6379,\n        'DB': 0,\n        'DEFAULT_TIMEOUT': 180,\n    },\n}\n\n# Swagger: automatic API documentation\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Token': {\n            'type': 'apiKey',\n            'name': 'Authorization',\n            'in': 'header',\n            'description': 'The token (or API key) must be passed as a request header. '\n            'You can find your user token on the User Account page in Label Studio. Example: '\n            '<br><pre><code class=\"language-bash\">'\n            'curl https://label-studio-host/api/projects -H \"Authorization: Token [your-token]\"'\n            '</code></pre>',\n        }\n    },\n    'APIS_SORTER': 'alpha',\n    'SUPPORTED_SUBMIT_METHODS': ['get', 'post', 'put', 'delete', 'patch'],\n    'OPERATIONS_SORTER': 'alpha',\n}\n\nSENTRY_DSN = get_env('SENTRY_DSN', None)\nSENTRY_RATE = float(get_env('SENTRY_RATE', 0.25))\nSENTRY_ENVIRONMENT = get_env('SENTRY_ENVIRONMENT', 'stage.opensource')\nSENTRY_REDIS_ENABLED = False\nFRONTEND_SENTRY_DSN = get_env('FRONTEND_SENTRY_DSN', None)\nFRONTEND_SENTRY_RATE = get_env('FRONTEND_SENTRY_RATE', 0.1)\nFRONTEND_SENTRY_ENVIRONMENT = get_env('FRONTEND_SENTRY_ENVIRONMENT', 'stage.opensource')\n\nROOT_URLCONF = 'core.urls'\nWSGI_APPLICATION = 'core.wsgi.application'\nGRAPHIQL = True\n\n# Internationalization\n# https://docs.djangoproject.com/en/2.1/topics/i18n/\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = False\nUSE_L10N = True\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nSTATIC_URL = '/static/'\n# if FORCE_SCRIPT_NAME:\n#    STATIC_URL = FORCE_SCRIPT_NAME + STATIC_URL\nlogger.info(f'=> Static URL is set to: {STATIC_URL}')\n\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static_build')\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\nSTATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n)\nSTATICFILES_STORAGE = 'core.storage.SkipMissedManifestStaticFilesStorage'\n\n# Sessions and CSRF\nSESSION_COOKIE_SECURE = bool(int(get_env('SESSION_COOKIE_SECURE', False)))\nSESSION_COOKIE_SAMESITE = get_env('SESSION_COOKIE_SAMESITE', 'Lax')\n\nCSRF_COOKIE_SECURE = bool(int(get_env('CSRF_COOKIE_SECURE', SESSION_COOKIE_SECURE)))\nCSRF_COOKIE_HTTPONLY = bool(int(get_env('CSRF_COOKIE_HTTPONLY', SESSION_COOKIE_SECURE)))\nCSRF_COOKIE_SAMESITE = get_env('CSRF_COOKIE_SAMESITE', 'Lax')\n\n# Inactivity user sessions\nINACTIVITY_SESSION_TIMEOUT_ENABLED = bool(int(get_env('INACTIVITY_SESSION_TIMEOUT_ENABLED', True)))\n# The most time a login will last, regardless of activity\nMAX_SESSION_AGE = int(get_env('MAX_SESSION_AGE', timedelta(days=14).total_seconds()))\n# The most time that can elapse between activity with the server before the user is logged out\nMAX_TIME_BETWEEN_ACTIVITY = int(get_env('MAX_TIME_BETWEEN_ACTIVITY', timedelta(days=5).total_seconds()))\n\nSSRF_PROTECTION_ENABLED = get_bool_env('SSRF_PROTECTION_ENABLED', False)\n\n# user media files\nMEDIA_ROOT = os.path.join(BASE_DATA_DIR, 'media')\nos.makedirs(MEDIA_ROOT, exist_ok=True)\nMEDIA_URL = '/data/'\nUPLOAD_DIR = 'upload'\nAVATAR_PATH = 'avatars'\n\nSUPPORTED_EXTENSIONS = set(\n    [\n        '.bmp',\n        '.csv',\n        '.flac',\n        '.gif',\n        '.htm',\n        '.html',\n        '.jpg',\n        '.jpeg',\n        '.json',\n        '.m4a',\n        '.mp3',\n        '.ogg',\n        '.png',\n        '.svg',\n        '.tsv',\n        '.txt',\n        '.wav',\n        '.xml',\n        '.mp4',\n        '.webm',\n        '.webp',\n    ]\n)\n\n# directory for files created during unit tests\nTEST_DATA_ROOT = os.path.join(BASE_DATA_DIR, 'test_data')\nos.makedirs(TEST_DATA_ROOT, exist_ok=True)\n\n# project exports\nEXPORT_DIR = os.path.join(BASE_DATA_DIR, 'export')\nEXPORT_URL_ROOT = '/export/'\nEXPORT_MIXIN = 'data_export.mixins.ExportMixin'\n# old export dir\nos.makedirs(EXPORT_DIR, exist_ok=True)\n# dir for delayed export\nDELAYED_EXPORT_DIR = 'export'\nos.makedirs(os.path.join(BASE_DATA_DIR, MEDIA_ROOT, DELAYED_EXPORT_DIR), exist_ok=True)\n\n# file / task size limits\nDATA_UPLOAD_MAX_MEMORY_SIZE = int(get_env('DATA_UPLOAD_MAX_MEMORY_SIZE', 250 * 1024 * 1024))\nDATA_UPLOAD_MAX_NUMBER_FILES = int(get_env('DATA_UPLOAD_MAX_NUMBER_FILES', 100))\nTASKS_MAX_NUMBER = 1000000\nTASKS_MAX_FILE_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE\n\nTASK_LOCK_TTL = int(get_env('TASK_LOCK_TTL', default=86400))\n\nLABEL_STREAM_HISTORY_LIMIT = int(get_env('LABEL_STREAM_HISTORY_LIMIT', default=100))\n\nRANDOM_NEXT_TASK_SAMPLE_SIZE = int(get_env('RANDOM_NEXT_TASK_SAMPLE_SIZE', 50))\n\nTASK_API_PAGE_SIZE_MAX = int(get_env('TASK_API_PAGE_SIZE_MAX', 0)) or None\n\n# Email backend\nFROM_EMAIL = get_env('FROM_EMAIL', 'Label Studio <hello@labelstud.io>')\nEMAIL_BACKEND = get_env('EMAIL_BACKEND', 'django.core.mail.backends.dummy.EmailBackend')\n\nENABLE_LOCAL_FILES_STORAGE = get_bool_env('ENABLE_LOCAL_FILES_STORAGE', default=True)\nLOCAL_FILES_SERVING_ENABLED = get_bool_env('LOCAL_FILES_SERVING_ENABLED', default=False)\nLOCAL_FILES_DOCUMENT_ROOT = get_env('LOCAL_FILES_DOCUMENT_ROOT', default=os.path.abspath(os.sep))\n\nSYNC_ON_TARGET_STORAGE_CREATION = get_bool_env('SYNC_ON_TARGET_STORAGE_CREATION', default=True)\n\nALLOW_IMPORT_TASKS_WITH_UNKNOWN_EMAILS = get_bool_env('ALLOW_IMPORT_TASKS_WITH_UNKNOWN_EMAILS', default=False)\n\n\"\"\" React Libraries: do not forget to change this dir in /etc/nginx/nginx.conf \"\"\"\n# EDITOR = label-studio-frontend repository\nEDITOR_ROOT = os.path.join(BASE_DIR, '../frontend/dist/lsf')\n# DM = data manager (included into FRONTEND due npm building, we need only version.json file from there)\nDM_ROOT = os.path.join(BASE_DIR, '../frontend/dist/dm')\n# FRONTEND = GUI for django backend\nREACT_APP_ROOT = os.path.join(BASE_DIR, '../frontend/dist/react-app')\n\n# per project settings\nBATCH_SIZE = 1000\nPROJECT_TITLE_MIN_LEN = 3\nPROJECT_TITLE_MAX_LEN = 50\nLOGIN_REDIRECT_URL = '/'\nLOGIN_URL = '/'\nMIN_GROUND_TRUTH = 10\nDATA_UNDEFINED_NAME = '$undefined$'\nLICENSE = {}\nVERSIONS = {}\nVERSION_EDITION = 'Community'\nLATEST_VERSION_CHECK = True\nVERSIONS_CHECK_TIME = 0\nALLOW_ORGANIZATION_WEBHOOKS = get_bool_env('ALLOW_ORGANIZATION_WEBHOOKS', False)\nCONVERTER_DOWNLOAD_RESOURCES = get_bool_env('CONVERTER_DOWNLOAD_RESOURCES', True)\nEXPERIMENTAL_FEATURES = get_bool_env('EXPERIMENTAL_FEATURES', False)\nUSE_ENFORCE_CSRF_CHECKS = get_bool_env('USE_ENFORCE_CSRF_CHECKS', True)  # False is for tests\nCLOUD_FILE_STORAGE_ENABLED = False\n\nIO_STORAGES_IMPORT_LINK_NAMES = [\n    'io_storages_s3importstoragelink',\n    'io_storages_gcsimportstoragelink',\n    'io_storages_azureblobimportstoragelink',\n    'io_storages_localfilesimportstoragelink',\n    'io_storages_redisimportstoragelink',\n]\n\nCREATE_ORGANIZATION = 'organizations.functions.create_organization'\nSAVE_USER = 'users.functions.save_user'\nPOST_PROCESS_REIMPORT = 'core.utils.common.empty'\nUSER_SERIALIZER = 'users.serializers.BaseUserSerializer'\nUSER_SERIALIZER_UPDATE = 'users.serializers.BaseUserSerializerUpdate'\nTASK_SERIALIZER = 'tasks.serializers.BaseTaskSerializer'\nEXPORT_DATA_SERIALIZER = 'data_export.serializers.BaseExportDataSerializer'\nDATA_MANAGER_GET_ALL_COLUMNS = 'data_manager.functions.get_all_columns'\nDATA_MANAGER_ANNOTATIONS_MAP = {}\nDATA_MANAGER_ACTIONS = {}\nDATA_MANAGER_CUSTOM_FILTER_EXPRESSIONS = 'data_manager.functions.custom_filter_expressions'\nDATA_MANAGER_PREPROCESS_FILTER = 'data_manager.functions.preprocess_filter'\nUSER_LOGIN_FORM = 'users.forms.LoginForm'\nPROJECT_MIXIN = 'projects.mixins.ProjectMixin'\nTASK_MIXIN = 'tasks.mixins.TaskMixin'\nANNOTATION_MIXIN = 'tasks.mixins.AnnotationMixin'\nORGANIZATION_MIXIN = 'organizations.mixins.OrganizationMixin'\nUSER_MIXIN = 'users.mixins.UserMixin'\nUSER_PERM = 'core.api_permissions.HasOwnerPermission'\nRECALCULATE_ALL_STATS = None\nGET_STORAGE_LIST = 'io_storages.functions.get_storage_list'\nSTORAGE_ANNOTATION_SERIALIZER = 'io_storages.serializers.StorageAnnotationSerializer'\nTASK_SERIALIZER_BULK = 'tasks.serializers.BaseTaskSerializerBulk'\nPREPROCESS_FIELD_NAME = 'data_manager.functions.preprocess_field_name'\nINTERACTIVE_DATA_SERIALIZER = 'data_export.serializers.BaseExportDataSerializerForInteractive'\nDELETE_TASKS_ANNOTATIONS_POSTPROCESS = None\n\n\ndef project_delete(project):\n    project.delete()\n\n\ndef user_auth(user_model, email, password):\n    return None\n\n\ndef collect_versions_dummy(**kwargs):\n    return {}\n\n\nPROJECT_DELETE = project_delete\nUSER_AUTH = user_auth\nCOLLECT_VERSIONS = collect_versions_dummy\n\nWEBHOOK_TIMEOUT = float(get_env('WEBHOOK_TIMEOUT', 1.0))\nWEBHOOK_BATCH_SIZE = int(get_env('WEBHOOK_BATCH_SIZE', 100))\nWEBHOOK_SERIALIZERS = {\n    'project': 'webhooks.serializers_for_hooks.ProjectWebhookSerializer',\n    'task': 'webhooks.serializers_for_hooks.TaskWebhookSerializer',\n    'annotation': 'webhooks.serializers_for_hooks.AnnotationWebhookSerializer',\n    'label': 'labels_manager.serializers.LabelSerializer',\n    'label_link': 'labels_manager.serializers.LabelLinkSerializer',\n}\n\nEDITOR_KEYMAP = json.dumps(get_env('EDITOR_KEYMAP'))\n\n# fix a problem with Windows mimetypes for JS and PNG\nimport mimetypes\n\nmimetypes.add_type('application/javascript', '.js', True)\nmimetypes.add_type('image/png', '.png', True)\n\n# fields name was used in DM api before\nREST_FLEX_FIELDS = {'FIELDS_PARAM': 'include'}\n\nINTERPOLATE_KEY_FRAMES = get_env('INTERPOLATE_KEY_FRAMES', False)\n\n# Feature Flags\nFEATURE_FLAGS_API_KEY = get_env('FEATURE_FLAGS_API_KEY', default='any key')\n\n# we may set feature flags from file\nFEATURE_FLAGS_FROM_FILE = get_bool_env('FEATURE_FLAGS_FROM_FILE', False)\nFEATURE_FLAGS_FILE = get_env('FEATURE_FLAGS_FILE', 'feature_flags.json')\n# or if file is not set, default is using offline mode\nFEATURE_FLAGS_OFFLINE = get_bool_env('FEATURE_FLAGS_OFFLINE', True)\n# default value for feature flags (if not overridden by environment or client)\nFEATURE_FLAGS_DEFAULT_VALUE = False\n\n# Whether to send analytics telemetry data\nCOLLECT_ANALYTICS = get_bool_env('collect_analytics', True)\n\n# Strip harmful content from SVG files by default\nSVG_SECURITY_CLEANUP = get_bool_env('SVG_SECURITY_CLEANUP', False)\n\nML_BLOCK_LOCAL_IP = get_bool_env('ML_BLOCK_LOCAL_IP', False)\n\nRQ_LONG_JOB_TIMEOUT = int(get_env('RQ_LONG_JOB_TIMEOUT', 36000))\n\nAPP_WEBSERVER = get_env('APP_WEBSERVER', 'django')\n\nBATCH_JOB_RETRY_TIMEOUT = int(get_env('BATCH_JOB_RETRY_TIMEOUT', 60))\n\nFUTURE_SAVE_TASK_TO_STORAGE = get_bool_env('FUTURE_SAVE_TASK_TO_STORAGE', default=False)\nFUTURE_SAVE_TASK_TO_STORAGE_JSON_EXT = get_bool_env('FUTURE_SAVE_TASK_TO_STORAGE_JSON_EXT', default=True)\nSTORAGE_IN_PROGRESS_TIMER = float(get_env('STORAGE_IN_PROGRESS_TIMER', 5.0))\n\nUSE_NGINX_FOR_EXPORT_DOWNLOADS = get_bool_env('USE_NGINX_FOR_EXPORT_DOWNLOADS', False)\n\nif get_env('MINIO_STORAGE_ENDPOINT') and not get_bool_env('MINIO_SKIP', False):\n    CLOUD_FILE_STORAGE_ENABLED = True\n    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\n    AWS_STORAGE_BUCKET_NAME = get_env('MINIO_STORAGE_BUCKET_NAME')\n    AWS_ACCESS_KEY_ID = get_env('MINIO_STORAGE_ACCESS_KEY')\n    AWS_SECRET_ACCESS_KEY = get_env('MINIO_STORAGE_SECRET_KEY')\n    AWS_S3_ENDPOINT_URL = get_env('MINIO_STORAGE_ENDPOINT')\n    AWS_QUERYSTRING_AUTH = False\n    # make domain for FileUpload.file\n    AWS_S3_SECURE_URLS = False\n    AWS_S3_URL_PROTOCOL = 'http:' if HOSTNAME.startswith('http://') else 'https:'\n    AWS_S3_CUSTOM_DOMAIN = HOSTNAME.replace('http://', '').replace('https://', '') + '/data'\n\nif get_env('STORAGE_TYPE') == 's3':\n    CLOUD_FILE_STORAGE_ENABLED = True\n    DEFAULT_FILE_STORAGE = 'core.storage.CustomS3Boto3Storage'\n    if get_env('STORAGE_AWS_ACCESS_KEY_ID'):\n        AWS_ACCESS_KEY_ID = get_env('STORAGE_AWS_ACCESS_KEY_ID')\n    if get_env('STORAGE_AWS_SECRET_ACCESS_KEY'):\n        AWS_SECRET_ACCESS_KEY = get_env('STORAGE_AWS_SECRET_ACCESS_KEY')\n    AWS_STORAGE_BUCKET_NAME = get_env('STORAGE_AWS_BUCKET_NAME')\n    AWS_S3_REGION_NAME = get_env('STORAGE_AWS_REGION_NAME', None)\n    AWS_S3_ENDPOINT_URL = get_env('STORAGE_AWS_ENDPOINT_URL', None)\n    if get_env('STORAGE_AWS_OBJECT_PARAMETERS'):\n        AWS_S3_OBJECT_PARAMETERS = json.loads(get_env('STORAGE_AWS_OBJECT_PARAMETERS'))\n    AWS_QUERYSTRING_EXPIRE = int(get_env('STORAGE_AWS_X_AMZ_EXPIRES', '86400'))\n    AWS_LOCATION = get_env('STORAGE_AWS_FOLDER', default='')\n    AWS_S3_USE_SSL = get_bool_env('STORAGE_AWS_S3_USE_SSL', True)\n    AWS_S3_VERIFY = get_env('STORAGE_AWS_S3_VERIFY', None)\n    if AWS_S3_VERIFY == 'false' or AWS_S3_VERIFY == 'False' or AWS_S3_VERIFY == '0':\n        AWS_S3_VERIFY = False\n    AWS_S3_SIGNATURE_VERSION = get_env('STORAGE_AWS_S3_SIGNATURE_VERSION', None)\n\nif get_env('STORAGE_TYPE') == 'azure':\n    CLOUD_FILE_STORAGE_ENABLED = True\n    DEFAULT_FILE_STORAGE = 'core.storage.CustomAzureStorage'\n    AZURE_ACCOUNT_NAME = get_env('STORAGE_AZURE_ACCOUNT_NAME')\n    AZURE_ACCOUNT_KEY = get_env('STORAGE_AZURE_ACCOUNT_KEY')\n    AZURE_CONTAINER = get_env('STORAGE_AZURE_CONTAINER_NAME')\n    AZURE_URL_EXPIRATION_SECS = int(get_env('STORAGE_AZURE_URL_EXPIRATION_SECS', '86400'))\n    AZURE_LOCATION = get_env('STORAGE_AZURE_FOLDER', default='')\n\nif get_env('STORAGE_TYPE') == 'gcs':\n    CLOUD_FILE_STORAGE_ENABLED = True\n    # DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'\n    DEFAULT_FILE_STORAGE = 'core.storage.AlternativeGoogleCloudStorage'\n    GS_PROJECT_ID = get_env('STORAGE_GCS_PROJECT_ID')\n    GS_BUCKET_NAME = get_env('STORAGE_GCS_BUCKET_NAME')\n    GS_EXPIRATION = timedelta(seconds=int(get_env('STORAGE_GCS_EXPIRATION_SECS', '86400')))\n    GS_LOCATION = get_env('STORAGE_GCS_FOLDER', default='')\n    GS_CUSTOM_ENDPOINT = get_env('STORAGE_GCS_ENDPOINT')\n\nCSRF_TRUSTED_ORIGINS = get_env('CSRF_TRUSTED_ORIGINS', [])\nif CSRF_TRUSTED_ORIGINS:\n    CSRF_TRUSTED_ORIGINS = CSRF_TRUSTED_ORIGINS.split(',')\n\nREAL_HOSTNAME = os.getenv('HOSTNAME')  # we have to use getenv, because we don't use LABEL_STUDIO_ prefix\nGCS_CLOUD_STORAGE_FORCE_DEFAULT_CREDENTIALS = get_bool_env('GCS_CLOUD_STORAGE_FORCE_DEFAULT_CREDENTIALS', False)\nPUBLIC_API_DOCS = get_bool_env('PUBLIC_API_DOCS', False)\n", "import os\n\nfrom rest_framework.exceptions import ValidationError\n\n\ndef cast_bool_from_str(value):\n    if isinstance(value, str):\n        if value.lower() in ['true', 'yes', 'on', '1']:\n            value = True\n        elif value.lower() in ['false', 'no', 'not', 'off', '0']:\n            value = False\n        else:\n            raise ValueError(f'Incorrect bool value \"{value}\". ' f'It should be one of [1, 0, true, false, yes, no]')\n    return value\n\n\ndef bool_from_request(params, key, default):\n    \"\"\"Get boolean value from request GET, POST, etc\n\n    :param params: dict POST, GET, etc\n    :param key: key to find\n    :param default: default value\n    :return: boolean\n    \"\"\"\n    value = params.get(key, default)\n\n    try:\n        if isinstance(value, str):\n            value = cast_bool_from_str(value)\n        return bool(int(value))\n    except Exception as e:\n        raise ValidationError({key: str(e)})\n\n\ndef int_from_request(params, key, default):\n    \"\"\"Get integer from request GET, POST, etc\n\n    :param params: dict POST, GET, etc\n    :param key: key to find\n    :param default: default value\n    :return: int\n    \"\"\"\n    value = params.get(key, default)\n\n    # str\n    if isinstance(value, str):\n        try:\n            return int(value)\n        except ValueError:\n            raise ValidationError({key: f'Incorrect value in key \"{key}\" = \"{value}\". It should be digit string.'})\n        except Exception as e:\n            raise ValidationError({key: str(e)})\n    # int\n    elif isinstance(value, int):\n        return value\n    # other\n    else:\n        raise ValidationError(\n            {key: f'Incorrect value type in key \"{key}\" = \"{value}\". ' f'It should be digit string or integer.'}\n        )\n\n\ndef float_from_request(params, key, default):\n    \"\"\"Get float from request GET, POST, etc\n\n    :param params: dict POST, GET, etc\n    :param key: key to find\n    :param default: default value\n    :return: float\n    \"\"\"\n    value = params.get(key, default)\n\n    # str\n    if isinstance(value, str):\n        try:\n            return float(value)\n        except ValueError:\n            raise ValidationError({key: f'Incorrect value in key \"{key}\" = \"{value}\". It should be digit string.'})\n    # float\n    elif isinstance(value, float) or isinstance(value, int):\n        return float(value)\n    # other\n    else:\n        raise ValidationError(\n            {key: f'Incorrect value type in key \"{key}\" = \"{value}\". ' f'It should be digit string or float.'}\n        )\n\n\ndef list_of_strings_from_request(params, key, default):\n    \"\"\"Get list of strings from request GET, POST, etc\n\n    :param params: dict POST, GET, etc\n    :param key: key to find\n    :param default: default value\n    :return: float\n    \"\"\"\n    value = params.get(key, default)\n    if value is None:\n        return\n    splitters = (',', ';', '|')\n    # str\n    if isinstance(value, str):\n        for splitter in splitters:\n            if splitter in value:\n                return value.split(splitter)\n        return [value]\n    else:\n        raise ValidationError(\n            {key: f'Incorrect value type in key \"{key}\" = \"{value}\". ' f'It should be digit string or float.'}\n        )\n\n\ndef get_env(name, default=None, is_bool=False):\n    for env_key in ['LABEL_STUDIO_' + name, 'HEARTEX_' + name, name]:\n        value = os.environ.get(env_key)\n        if value is not None:\n            if is_bool:\n                return bool_from_request(os.environ, env_key, default)\n            else:\n                return value\n    return default\n\n\ndef get_bool_env(key, default):\n    return get_env(key, default, is_bool=True)\n\n\ndef get_env_list_int(key, default=None):\n    \"\"\"\n    \"1,2,3\" in env variable => [1, 2, 3] in python\n    \"\"\"\n    value = get_env(key)\n    if not value:\n        if default is None:\n            return []\n        return default\n    return [int(el) for el in value.split(',')]\n\n\ndef get_all_env_with_prefix(prefix=None, is_bool=True, default_value=None):\n    out = {}\n    for key in os.environ.keys():\n        if not key.startswith(prefix):\n            continue\n        if is_bool:\n            out[key] = bool_from_request(os.environ, key, default_value)\n        else:\n            out[key] = os.environ[key]\n    return out\n", "\"\"\"This file and its contents are licensed under the Apache License 2.0. Please see the included NOTICE for copyright information and LICENSE for a copy of the license.\n\"\"\"\nimport logging\nfrom collections import OrderedDict\nfrom urllib.parse import unquote\n\nimport ujson as json\nfrom core.feature_flags import flag_set\nfrom core.utils.common import int_from_request\nfrom data_manager.models import View\nfrom data_manager.prepare_params import PrepareParams\nfrom django.conf import settings\nfrom rest_framework.generics import get_object_or_404\nfrom tasks.models import Task\n\nTASKS = 'tasks:'\nlogger = logging.getLogger(__name__)\n\n\nclass DataManagerException(Exception):\n    pass\n\n\ndef get_all_columns(project, *_):\n    \"\"\"Make columns info for the frontend data manager\"\"\"\n    result = {'columns': []}\n\n    # frontend uses MST data model, so we need two directional referencing parent <-> child\n    task_data_children = []\n    i = 0\n\n    data_types = OrderedDict()\n\n    # add data types from config again\n    project_data_types = {}\n    for key, value in project.data_types.items():\n        # skip keys from Repeater tag, because we already have its base data,\n        # e.g.: skip 'image[{{idx}}]' because we have 'image' list already\n        if '[' not in key:\n            project_data_types[key] = value\n    data_types.update(project_data_types.items())\n\n    # all data types from import data\n    all_data_columns = project.summary.all_data_columns\n    if all_data_columns:\n        data_types.update({key: 'Unknown' for key in all_data_columns if key not in data_types})\n\n    # remove $undefined$ if there is one type at least in labeling config, because it will be resolved automatically\n    if len(project_data_types) > 0:\n        data_types.pop(settings.DATA_UNDEFINED_NAME, None)\n\n    for key, data_type in list(data_types.items()):  # make data types from labeling config first\n        column = {\n            'id': key,\n            'title': key if key != settings.DATA_UNDEFINED_NAME else 'data',\n            'type': data_type if data_type in ['Image', 'Audio', 'AudioPlus', 'Video', 'Unknown'] else 'String',\n            'target': 'tasks',\n            'parent': 'data',\n            'visibility_defaults': {\n                'explore': True,\n                'labeling': key in project_data_types or key == settings.DATA_UNDEFINED_NAME,\n            },\n            'project_defined': True,\n        }\n        result['columns'].append(column)\n        task_data_children.append(column['id'])\n        i += 1\n\n    # --- Data root ---\n    data_root = {\n        'id': 'data',\n        'title': 'data',\n        'type': 'List',\n        'target': 'tasks',\n        'children': task_data_children,\n        'project_defined': False,\n    }\n\n    result['columns'] += [\n        # --- Tasks ---\n        {\n            'id': 'id',\n            'title': 'ID',\n            'type': 'Number',\n            'help': 'Task ID',\n            'target': 'tasks',\n            'visibility_defaults': {'explore': True, 'labeling': False},\n            'project_defined': False,\n        }\n    ]\n\n    if flag_set('ff_back_2070_inner_id_12052022_short', user=project.organization.created_by):\n        result['columns'] += [\n            {\n                'id': 'inner_id',\n                'title': 'Inner ID',\n                'type': 'Number',\n                'help': 'Internal task ID starting from 1 for the current project',\n                'target': 'tasks',\n                'visibility_defaults': {'explore': False, 'labeling': False},\n                'project_defined': False,\n            }\n        ]\n\n    if flag_set('fflag_fix_back_lsdv_4648_annotator_filter_29052023_short', user=project.organization.created_by):\n        project_members = project.all_members.values_list('id', flat=True)\n    else:\n        project_members = project.organization.members.values_list('user__id', flat=True)\n\n    result['columns'] += [\n        {\n            'id': 'completed_at',\n            'title': 'Completed',\n            'type': 'Datetime',\n            'target': 'tasks',\n            'help': 'Last annotation date',\n            'visibility_defaults': {'explore': True, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'total_annotations',\n            'title': 'Annotations',\n            'type': 'Number',\n            'target': 'tasks',\n            'help': 'Total annotations per task',\n            'visibility_defaults': {'explore': True, 'labeling': True},\n            'project_defined': False,\n        },\n        {\n            'id': 'cancelled_annotations',\n            'title': 'Cancelled',\n            'type': 'Number',\n            'target': 'tasks',\n            'help': 'Total cancelled (skipped) annotations',\n            'visibility_defaults': {'explore': True, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'total_predictions',\n            'title': 'Predictions',\n            'type': 'Number',\n            'target': 'tasks',\n            'help': 'Total predictions per task',\n            'visibility_defaults': {'explore': True, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'annotators',\n            'title': 'Annotated by',\n            'type': 'List',\n            'target': 'tasks',\n            'help': 'All users who completed the task',\n            'schema': {'items': project_members},\n            'visibility_defaults': {'explore': True, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'annotations_results',\n            'title': 'Annotation results',\n            'type': 'String',\n            'target': 'tasks',\n            'help': 'Annotation results stacked over all annotations',\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'annotations_ids',\n            'title': 'Annotation IDs',\n            'type': 'String',\n            'target': 'tasks',\n            'help': 'Annotation IDs stacked over all annotations',\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'predictions_score',\n            'title': 'Prediction score',\n            'type': 'Number',\n            'target': 'tasks',\n            'help': 'Average prediction score over all task predictions',\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'predictions_model_versions',\n            'title': 'Prediction model versions',\n            'type': 'List',\n            'target': 'tasks',\n            'help': 'Model versions aggregated over all predictions',\n            'schema': {'items': project.get_model_versions()},\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'predictions_results',\n            'title': 'Prediction results',\n            'type': 'String',\n            'target': 'tasks',\n            'help': 'Prediction results stacked over all predictions',\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'file_upload',\n            'title': 'Upload filename',\n            'type': 'String',\n            'target': 'tasks',\n            'help': 'Filename of uploaded file',\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'storage_filename',\n            'title': 'Storage filename',\n            'type': 'String',\n            'target': 'tasks',\n            'help': 'Filename from import storage',\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'created_at',\n            'title': 'Created at',\n            'type': 'Datetime',\n            'target': 'tasks',\n            'help': 'Task creation time',\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'updated_at',\n            'title': 'Updated at',\n            'type': 'Datetime',\n            'target': 'tasks',\n            'help': 'Task update time',\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'updated_by',\n            'title': 'Updated by',\n            'type': 'List',\n            'target': 'tasks',\n            'help': 'User who did the last task update',\n            'schema': {'items': project_members},\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'avg_lead_time',\n            'title': 'Lead Time',\n            'type': 'Number',\n            'help': 'Average lead time over all annotations (seconds)',\n            'target': 'tasks',\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'draft_exists',\n            'title': 'Drafts',\n            'type': 'Boolean',\n            'help': 'True if at least one draft exists for the task',\n            'target': 'tasks',\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n    ]\n\n    result['columns'].append(data_root)\n\n    return result\n\n\ndef get_prepare_params(request, project):\n    \"\"\"This function extract prepare_params from\n    * view_id if it's inside of request data\n    * selectedItems, filters, ordering if they are in request and there is no view id\n    \"\"\"\n    # use filters and selected items from view\n    view_id = int_from_request(request.GET, 'view', 0) or int_from_request(request.data, 'view', 0)\n    if view_id > 0:\n        view = get_object_or_404(View, pk=view_id)\n        if view.project.pk != project.pk:\n            raise DataManagerException('Project and View mismatch')\n        prepare_params = view.get_prepare_tasks_params(add_selected_items=True)\n        prepare_params.request = request\n\n    # use filters and selected items from request if it's specified\n    else:\n        # query arguments from url\n        if 'query' in request.GET:\n            data = json.loads(unquote(request.GET['query']))\n        # data payload from body\n        else:\n            data = request.data\n\n        selected = data.get('selectedItems', {'all': True, 'excluded': []})\n        if not isinstance(selected, dict):\n            raise DataManagerException(\n                'selectedItems must be dict: {\"all\": [true|false], ' '\"excluded | included\": [...task_ids...]}'\n            )\n        filters = data.get('filters', None)\n        ordering = data.get('ordering', [])\n        prepare_params = PrepareParams(\n            project=project.id, selectedItems=selected, data=data, filters=filters, ordering=ordering, request=request\n        )\n    return prepare_params\n\n\ndef get_prepared_queryset(request, project):\n    prepare_params = get_prepare_params(request, project)\n    queryset = Task.prepared.only_filtered(prepare_params=prepare_params)\n    return queryset\n\n\ndef evaluate_predictions(tasks):\n    \"\"\"Call ML backend for prediction evaluation of the task queryset\"\"\"\n    if not tasks:\n        return\n\n    project = tasks[0].project\n\n    for ml_backend in project.ml_backends.all():\n        # tasks = tasks.filter(~Q(predictions__model_version=ml_backend.model_version))\n        ml_backend.predict_tasks(tasks)\n\n\ndef filters_ordering_selected_items_exist(data):\n    return data.get('filters') or data.get('ordering') or data.get('selectedItems')\n\n\ndef custom_filter_expressions(*args, **kwargs):\n    pass\n\n\ndef preprocess_filter(_filter, *_):\n    return _filter\n\n\ndef preprocess_field_name(raw_field_name, only_undefined_field=False):\n    field_name = raw_field_name.replace('filter:', '')\n    field_name = field_name.replace('tasks:', '')\n    ascending = False if field_name[0] == '-' else True  # detect direction\n    field_name = field_name[1:] if field_name[0] == '-' else field_name  # remove direction\n    if field_name.startswith('data.'):\n        if only_undefined_field:\n            field_name = f'data__{settings.DATA_UNDEFINED_NAME}'\n        else:\n            field_name = field_name.replace('data.', 'data__')\n    return field_name, ascending\n", "\"\"\"This file and its contents are licensed under the Apache License 2.0. Please see the included NOTICE for copyright information and LICENSE for a copy of the license.\n\"\"\"\nimport os\n\nimport ujson as json\nfrom data_manager.models import Filter, FilterGroup, View\nfrom django.db import transaction\nfrom projects.models import Project\nfrom rest_framework import serializers\nfrom tasks.models import Task\nfrom tasks.serializers import AnnotationDraftSerializer, AnnotationSerializer, PredictionSerializer, TaskSerializer\n\nfrom label_studio.core.utils.common import round_floats\n\n\nclass FilterSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Filter\n        fields = '__all__'\n\n\nclass FilterGroupSerializer(serializers.ModelSerializer):\n    filters = FilterSerializer(many=True)\n\n    class Meta:\n        model = FilterGroup\n        fields = '__all__'\n\n\nclass ViewSerializer(serializers.ModelSerializer):\n    filter_group = FilterGroupSerializer(required=False)\n\n    class Meta:\n        model = View\n        fields = '__all__'\n\n    def to_internal_value(self, data):\n        \"\"\"\n        map old filters structure to models\n        \"filters\": {  ===> FilterGroup model\n            \"conjunction\": \"or\",\n            \"items\":[  ===> \"filters\" in FilterGroup\n                 {  ==> Filter model\n                   \"filter\":\"filter:tasks:data.image\", ==> column\n                    \"operator\":\"contains\",\n                    \"type\":\"Image\",\n                    \"value\": <string: \"XXX\" | int: 123 | dict | list>\n                 },\n                  {\n                    \"filter\":\"filter:tasks:data.image\",\n                    \"operator\":\"equal\",\n                    \"type\":\"Image\",\n                    \"value\": <string: \"XXX\" | int: 123 | dict | list>\n                 }\n              ]\n           }\n        }\n        \"\"\"\n        _data = data.get('data', {})\n\n        filters = _data.pop('filters', {})\n        conjunction = filters.get('conjunction')\n        if 'filter_group' not in data and conjunction:\n            data['filter_group'] = {'conjunction': conjunction, 'filters': []}\n            if 'items' in filters:\n                for f in filters['items']:\n                    data['filter_group']['filters'].append(\n                        {\n                            'column': f.get('filter', ''),\n                            'operator': f.get('operator', ''),\n                            'type': f.get('type', ''),\n                            'value': f.get('value', {}),\n                        }\n                    )\n\n        ordering = _data.pop('ordering', {})\n        data['ordering'] = ordering\n\n        return super().to_internal_value(data)\n\n    def to_representation(self, instance):\n        result = super().to_representation(instance)\n        filters = result.pop('filter_group', {})\n        if filters:\n            filters['items'] = []\n            filters.pop('filters', [])\n            filters.pop('id', None)\n\n            for f in instance.filter_group.filters.order_by('index'):\n                filters['items'].append(\n                    {\n                        'filter': f.column,\n                        'operator': f.operator,\n                        'type': f.type,\n                        'value': f.value,\n                    }\n                )\n            result['data']['filters'] = filters\n\n        selected_items = result.pop('selected_items', {})\n        if selected_items:\n            result['data']['selectedItems'] = selected_items\n\n        ordering = result.pop('ordering', {})\n        if ordering:\n            result['data']['ordering'] = ordering\n        return result\n\n    @staticmethod\n    def _create_filters(filter_group, filters_data):\n        filter_index = 0\n        for filter_data in filters_data:\n            filter_data['index'] = filter_index\n            filter_group.filters.add(Filter.objects.create(**filter_data))\n            filter_index += 1\n\n    def create(self, validated_data):\n        with transaction.atomic():\n            filter_group_data = validated_data.pop('filter_group', None)\n            if filter_group_data:\n                filters_data = filter_group_data.pop('filters', [])\n                filter_group = FilterGroup.objects.create(**filter_group_data)\n\n                self._create_filters(filter_group=filter_group, filters_data=filters_data)\n\n                validated_data['filter_group_id'] = filter_group.id\n            view = self.Meta.model.objects.create(**validated_data)\n\n            return view\n\n    def update(self, instance, validated_data):\n        with transaction.atomic():\n            filter_group_data = validated_data.pop('filter_group', None)\n            if filter_group_data:\n                filters_data = filter_group_data.pop('filters', [])\n\n                filter_group = instance.filter_group\n                if filter_group is None:\n                    filter_group = FilterGroup.objects.create(**filter_group_data)\n\n                conjunction = filter_group_data.get('conjunction')\n                if conjunction and filter_group.conjunction != conjunction:\n                    filter_group.conjunction = conjunction\n                    filter_group.save()\n\n                filter_group.filters.clear()\n                self._create_filters(filter_group=filter_group, filters_data=filters_data)\n\n            ordering = validated_data.pop('ordering', None)\n            if ordering and ordering != instance.ordering:\n                instance.ordering = ordering\n                instance.save()\n\n            if validated_data['data'] != instance.data:\n                instance.data = validated_data['data']\n                instance.save()\n\n            return instance\n\n\nclass DataManagerTaskSerializer(TaskSerializer):\n    predictions = serializers.SerializerMethodField(required=False, read_only=True)\n    annotations = AnnotationSerializer(required=False, many=True, default=[], read_only=True)\n    drafts = serializers.SerializerMethodField(required=False, read_only=True)\n    annotators = serializers.SerializerMethodField(required=False, read_only=True)\n\n    inner_id = serializers.IntegerField(required=False)\n    cancelled_annotations = serializers.IntegerField(required=False)\n    total_annotations = serializers.IntegerField(required=False)\n    total_predictions = serializers.IntegerField(required=False)\n    completed_at = serializers.DateTimeField(required=False)\n    annotations_results = serializers.SerializerMethodField(required=False)\n    predictions_results = serializers.SerializerMethodField(required=False)\n    predictions_score = serializers.FloatField(required=False)\n    file_upload = serializers.SerializerMethodField(required=False)\n    storage_filename = serializers.SerializerMethodField(required=False)\n    annotations_ids = serializers.SerializerMethodField(required=False)\n    predictions_model_versions = serializers.SerializerMethodField(required=False)\n    avg_lead_time = serializers.FloatField(required=False)\n    draft_exists = serializers.BooleanField(required=False)\n    updated_by = serializers.SerializerMethodField(required=False, read_only=True)\n\n    CHAR_LIMITS = 500\n\n    class Meta:\n        model = Task\n        ref_name = 'data_manager_task_serializer'\n        fields = '__all__'\n        expandable_fields = {'annotations': (AnnotationSerializer, {'many': True})}\n\n    def to_representation(self, obj):\n        \"\"\"Dynamically manage including of some fields in the API result\"\"\"\n        ret = super(DataManagerTaskSerializer, self).to_representation(obj)\n        if not self.context.get('annotations'):\n            ret.pop('annotations', None)\n        if not self.context.get('predictions'):\n            ret.pop('predictions', None)\n        return ret\n\n    def _pretty_results(self, task, field, unique=False):\n        if not hasattr(task, field) or getattr(task, field) is None:\n            return ''\n\n        result = getattr(task, field)\n        if isinstance(result, str):\n            output = result\n            if unique:\n                output = list(set(output.split(',')))\n                output = ','.join(output)\n\n        elif isinstance(result, int):\n            output = str(result)\n        else:\n            result = [r for r in result if r is not None]\n            if unique:\n                result = list(set(result))\n            result = round_floats(result)\n            output = json.dumps(result, ensure_ascii=False)[1:-1]  # remove brackets [ ]\n\n        return output[: self.CHAR_LIMITS].replace(',\"', ', \"').replace('],[', '] [').replace('\"', '')\n\n    def get_annotations_results(self, task):\n        return self._pretty_results(task, 'annotations_results')\n\n    def get_predictions_results(self, task):\n        return self._pretty_results(task, 'predictions_results')\n\n    def get_predictions(self, task):\n        return PredictionSerializer(task.predictions, many=True, default=[], read_only=True).data\n\n    @staticmethod\n    def get_file_upload(task):\n        if hasattr(task, 'file_upload_field'):\n            file_upload = task.file_upload_field\n            return os.path.basename(task.file_upload_field) if file_upload else None\n        return None\n\n    @staticmethod\n    def get_storage_filename(task):\n        return task.storage_filename\n\n    @staticmethod\n    def get_updated_by(obj):\n        return [{'user_id': obj.updated_by_id}] if obj.updated_by_id else []\n\n    @staticmethod\n    def get_annotators(obj):\n        if not hasattr(obj, 'annotators'):\n            return []\n\n        annotators = obj.annotators\n        if not annotators:\n            return []\n        if isinstance(annotators, str):\n            annotators = [int(v) for v in annotators.split(',')]\n\n        annotators = list(set(annotators))\n        annotators = [a for a in annotators if a is not None]\n        return annotators if hasattr(obj, 'annotators') and annotators else []\n\n    def get_annotations_ids(self, task):\n        return self._pretty_results(task, 'annotations_ids', unique=True)\n\n    def get_predictions_model_versions(self, task):\n        return self._pretty_results(task, 'predictions_model_versions', unique=True)\n\n    def get_drafts_serializer(self):\n        return AnnotationDraftSerializer\n\n    def get_drafts_queryset(self, user, drafts):\n        \"\"\"Get all user's draft\"\"\"\n        return drafts.filter(user=user)\n\n    def get_drafts(self, task):\n        \"\"\"Return drafts only for the current user\"\"\"\n        # it's for swagger documentation\n        if not isinstance(task, Task) or not self.context.get('drafts'):\n            return []\n\n        drafts = task.drafts\n        if 'request' in self.context and hasattr(self.context['request'], 'user'):\n            user = self.context['request'].user\n            drafts = self.get_drafts_queryset(user, drafts)\n\n        serializer_class = self.get_drafts_serializer()\n        return serializer_class(drafts, many=True, read_only=True, default=True, context=self.context).data\n\n\nclass SelectedItemsSerializer(serializers.Serializer):\n    all = serializers.BooleanField()\n    included = serializers.ListField(child=serializers.IntegerField(), required=False)\n    excluded = serializers.ListField(child=serializers.IntegerField(), required=False)\n\n    def validate(self, data):\n        if data['all'] is True and data.get('included'):\n            raise serializers.ValidationError('included not allowed with all==true')\n        if data['all'] is False and data.get('excluded'):\n            raise serializers.ValidationError('excluded not allowed with all==false')\n\n        view = self.context.get('view')\n        request = self.context.get('request')\n        if view and request and request.method in ('PATCH', 'DELETE'):\n            all_value = view.selected_items.get('all')\n            if all_value and all_value != data['all']:\n                raise serializers.ValidationError('changing all value possible only with POST method')\n\n        return data\n\n\nclass ViewResetSerializer(serializers.Serializer):\n    project = serializers.PrimaryKeyRelatedField(queryset=Project.objects.all())\n", "---\ntest_name: tasks-all-fields-postgre\nstrict: false\nmarks:\n  - usefixtures:\n      - django_live_url\n  - skipif: \"'default' not in '{tavern.env_vars.DJANGO_DB}'\"\nstages:\n\n  - id: signup\n    type: ref\n\n  - id: create_project\n    name: create_project\n    request:\n      data:\n        title: Test Draft 1\n        show_collab_predictions: true\n      method: POST\n      url: '{django_live_url}/api/projects'\n    response:\n      save:\n        json:\n          project_pk: id\n          created_by: created_by.id\n      status_code: 201\n\n  - name: create_filter_tasks\n    request:\n      files:\n        json_file: tests/data_manager/tasks_annotations_predictions.json\n      headers:\n        content-type: multipart/form-data\n      method: POST\n      url: '{django_live_url}/api/projects/{project_pk}/import'\n    response:\n      json:\n        annotation_count: 4\n        prediction_count: 3\n        task_count: 6\n      status_code: 201\n\n  - name: setup_views\n    request:\n      method: POST\n      url: '{django_live_url}/api/dm/views/?project={project_pk}'\n      json: {\n        \"data\": {\n          \"filters\": {\n            \"conjunction\": \"or\",\n            \"items\": [\n              {\n                \"filter\": \"filter:tasks:data.text\",\n                \"operator\": \"equal\",\n                \"type\": \"String\",\n                \"value\": \"Test example phrase 1\"\n              },\n              {\n                \"filter\": \"filter:tasks:data.text\",\n                \"operator\": \"contains\",\n                \"type\": \"String\",\n                \"value\": \"x\"\n              },\n              {\n                \"filter\": \"filter:tasks:annotations_results\",\n                \"operator\": \"contains\",\n                \"type\": \"String\",\n                \"value\": \"TESTING\"\n              },\n              {\n                \"filter\": \"filter:tasks:predictions_results\",\n                \"operator\": \"contains\",\n                \"type\": \"String\",\n                \"value\": \"PREDICTIONS\"\n              }\n            ]\n          },\n          \"ordering\": [\n            \"tasks:data.text\"\n          ]\n        },\n        \"project\": !int \"{project_pk}\"\n      }\n    response:\n      save:\n        json:\n          view: \"@\"\n      status_code: 201\n\n  - name: get_tasks\n    request:\n      method: GET\n      url: '{django_live_url}/api/tasks?fields=all&view={view.id}'\n    response:\n      status_code: 200\n      verify_response_with:\n        function: label_studio.tests.utils:save_response\n      json: {\n        \"total_annotations\": 4,\n        \"total_predictions\": 3,\n        \"total\": 4,\n        \"tasks\": [\n        {\n          \"cancelled_annotations\": 0,\n\n          \"annotations_results\": \"\",\n          \"data\": {\n            \"text\": \"opop\",\n            \"int_field\": 42\n          },\n\n          \"predictions_results\": !raw \"[{type:choices, value:{choices:[class_PREDICTIONS_TESTING]}, to_name:text, from_name:text_class}]\",\n          \"predictions_score\": null,\n          \"total_annotations\": 0,\n          \"total_predictions\": 1,\n          \"annotations_ids\": \"\",\n          \"annotations\": [],\n          \"predictions\": [\n          {\n            \"model_version\": \"undefined\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"result\": [\n            {\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_PREDICTIONS_TESTING\"\n                ]\n              },\n              \"to_name\": \"text\",\n              \"from_name\": \"text_class\"\n            }\n            ],\n            \"score\": null,\n            \"cluster\": null,\n            \"neighbors\": null,\n            \"mislabeling\": 0.0\n          }\n          ],\n          \"drafts\": [],\n          \"annotators\": [],\n          \"avg_lead_time\": null\n\n        },\n        {\n          \"cancelled_annotations\": 0,\n\n          \"annotations_results\": !raw \"[{type:choices, value:{choices:[class_A]}, to_name:text, from_name:text_class}]\",\n          \"data\": {\n            \"text\": \"Test example phrase 1\",\n            \"int_field\": 1\n          },\n\n          \"predictions_results\": !raw \"[{type:choices, value:{choices:[class_A]}, to_name:text, from_name:text_class}]\",\n          \"predictions_score\": null,\n          \"total_annotations\": 1,\n          \"total_predictions\": 1,\n          \"annotations_ids\": !anystr \"\",\n          \"annotations\": [\n          {\n\n            \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"completed_by\": !int \"{created_by}\",\n            \"result\": [\n            {\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_A\"\n                ]\n              },\n              \"to_name\": \"text\",\n              \"from_name\": \"text_class\"\n            }\n            ],\n            \"was_cancelled\": false,\n            \"ground_truth\": true,\n            \"lead_time\": 3.0\n          }\n          ],\n          \"predictions\": [\n          {\n            \"model_version\": \"model_version_A\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"result\": [\n            {\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_A\"\n                ]\n              },\n              \"to_name\": \"text\",\n              \"from_name\": \"text_class\"\n            }\n            ],\n            \"score\": null,\n            \"cluster\": null,\n            \"neighbors\": null,\n            \"mislabeling\": 0.0\n          }\n          ],\n          \"drafts\": [],\n          \"annotators\": [\n            !int \"{created_by}\"\n          ],\n          \"avg_lead_time\": 3.0\n        },\n        {\n          \"cancelled_annotations\": 0,\n\n          \"annotations_results\": !anystr \"\",\n          \"data\": {\n            \"text\": \"x2\",\n            \"int_field\": 20\n          },\n          \"predictions_results\": !anystr \"\",\n          \"predictions_score\": null,\n          \"total_annotations\": 2,\n          \"total_predictions\": 1,\n          \"annotations_ids\": !anystr \"\",\n          \"annotations\": [\n          {\n            \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"result\": [\n            {\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_A\"\n                ]\n              },\n              \"to_name\": \"text\",\n              \"from_name\": \"text_class\"\n            }\n            ],\n            \"was_cancelled\": false,\n            \"ground_truth\": true,\n            \"lead_time\": 3.0\n          },\n          {\n            \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"result\": [\n            {\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_A\"\n                ]\n              },\n              \"to_name\": \"text\",\n              \"from_name\": \"text_class\"\n            }\n            ],\n            \"was_cancelled\": false,\n            \"ground_truth\": true,\n            \"lead_time\": 5.0\n          }\n          ],\n          \"predictions\": [\n          {\n\n            \"model_version\": \"model_version_A\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"result\": [\n            {\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_A\"\n                ]\n              },\n              \"to_name\": \"text\",\n              \"from_name\": \"text_class\"\n            }\n            ],\n            \"score\": null,\n            \"cluster\": null,\n            \"neighbors\": null,\n            \"mislabeling\": 0.0\n          }\n          ],\n          \"drafts\": [],\n          \"annotators\": [\n            !int \"{created_by}\"\n          ],\n          \"avg_lead_time\": 4.0\n        },\n        {\n          \"cancelled_annotations\": 0,\n\n\n          \"annotations_results\": !raw \"[{type:choices, value:{choices:[class_TESTING]}, to_name:text, from_name:text_class}]\",\n          \"data\": {\n            \"text\": \"yoyo\",\n            \"int_field\": \"99\"\n          },\n\n          \"predictions_results\": \"\",\n          \"predictions_score\": null,\n          \"total_annotations\": 1,\n          \"total_predictions\": 0,\n          \"annotations_ids\": !anystr \"\",\n          \"annotations\": [\n          {\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"completed_by\": !int \"{created_by}\",\n            \"result\": [\n            {\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_TESTING\"\n                ]\n              },\n              \"to_name\": \"text\",\n              \"from_name\": \"text_class\"\n            }\n            ],\n            \"was_cancelled\": false,\n            \"ground_truth\": true,\n            \"lead_time\": null\n\n          }\n          ],\n          \"predictions\": [],\n          \"drafts\": [],\n\n          \"annotators\": [\n            !int \"{created_by}\"\n          ]\n\n        }\n        ]\n      }\n\n---\ntest_name: tasks-all-fields-sqlite\nstrict: false\nmarks:\n  - skipif: \"'default' in '{tavern.env_vars.DJANGO_DB}'\"\n  - usefixtures:\n      - django_live_url\nstages:\n\n  - id: signup\n    type: ref\n\n  - id: create_project\n    name: create_project\n    request:\n      data:\n        title: Test Draft 1\n        show_collab_predictions: true\n      method: POST\n      url: '{django_live_url}/api/projects'\n    response:\n      save:\n        json:\n          project_pk: id\n          created_by: created_by.id\n      status_code: 201\n\n  - name: create_filter_tasks\n    request:\n      files:\n        json_file: tests/data_manager/tasks_annotations_predictions.json\n      headers:\n        content-type: multipart/form-data\n      method: POST\n      url: '{django_live_url}/api/projects/{project_pk}/import'\n    response:\n      json:\n        annotation_count: 4\n        prediction_count: 3\n        task_count: 6\n      status_code: 201\n\n  - name: setup_views\n    request:\n      method: POST\n      url: '{django_live_url}/api/dm/views/?project={project_pk}'\n      json: {\n        \"data\": {\n          \"filters\": {\n            \"conjunction\": \"or\",\n            \"items\": [\n              {\n                \"filter\": \"filter:tasks:data.text\",\n                \"operator\": \"equal\",\n                \"type\": \"String\",\n                \"value\": \"Test example phrase 1\"\n              },\n              {\n                \"filter\": \"filter:tasks:data.text\",\n                \"operator\": \"contains\",\n                \"type\": \"String\",\n                \"value\": \"x\"\n              },\n              {\n                \"filter\": \"filter:tasks:annotations_results\",\n                \"operator\": \"contains\",\n                \"type\": \"String\",\n                \"value\": \"TESTING\"\n              },\n              {\n                \"filter\": \"filter:tasks:predictions_results\",\n                \"operator\": \"contains\",\n                \"type\": \"String\",\n                \"value\": \"PREDICTIONS\"\n              }\n            ]\n          },\n          \"ordering\": [\n            \"tasks:data.text\"\n          ]\n        },\n        \"project\": !int \"{project_pk}\"\n      }\n    response:\n      save:\n        json:\n          view: \"@\"\n      status_code: 201\n\n  - name: get_tasks\n    request:\n      method: GET\n      url: '{django_live_url}/api/tasks?fields=all&view={view.id}'\n    response:\n      status_code: 200\n      # verify_response_with:\n      #  function: label_studio.tests.utils:save_response\n      json:\n        {\n          \"total_annotations\": 4,\n          \"total_predictions\": 3,\n          \"total\": 4,\n          \"tasks\": [\n          {\n            \"cancelled_annotations\": 0,\n            \"annotations_results\": !raw \"[{from_name: text_class, to_name: text, type: choices, value: {choices: [class_A]}}]\",\n            \"data\": {\n              \"text\": \"Test example phrase 1\",\n              \"int_field\": 1\n            },\n            \"predictions_results\": !raw \"[{from_name: text_class, to_name: text, type: choices, value: {choices: [class_A]}}]\",\n            \"predictions_score\": null,\n            \"total_annotations\": 1,\n            \"total_predictions\": 1,\n            \"annotations_ids\": !anystr \"\",\n            \"annotations\": [\n            {\n\n              \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n              \"created_ago\": \"0\\u00a0minutes\",\n              \"completed_by\": !int \"{created_by}\",\n              \"result\": [\n              {\n                \"from_name\": \"text_class\",\n                \"to_name\": \"text\",\n                \"type\": \"choices\",\n                \"value\": {\n                  \"choices\": [\n                    \"class_A\"\n                  ]\n                }\n              }\n              ],\n              \"was_cancelled\": false,\n              \"ground_truth\": true,\n\n              \"lead_time\": 3.0\n\n            }\n            ],\n            \"predictions\": [\n            {\n\n              \"model_version\": \"model_version_A\",\n              \"created_ago\": \"0\\u00a0minutes\",\n              \"result\": [\n              {\n                \"from_name\": \"text_class\",\n                \"to_name\": \"text\",\n                \"type\": \"choices\",\n                \"value\": {\n                  \"choices\": [\n                    \"class_A\"\n                  ]\n                }\n              }\n              ],\n              \"score\": null,\n              \"cluster\": null,\n              \"neighbors\": null,\n              \"mislabeling\": 0.0,\n\n\n            }\n            ],\n            \"drafts\": [],\n            \"annotators\": [\n              !int \"{created_by}\"\n            ],\n            \"project\": !int \"{project_pk}\"\n          },\n          {\n            \"cancelled_annotations\": 0,\n            \"annotations_results\": \"\",\n            \"data\": {\n              \"int_field\": 42,\n              \"text\": \"opop\"\n            },\n            \"predictions_results\": !raw \"[{from_name: text_class, to_name: text, type: choices, value: {choices: [class_PREDICTIONS_TESTING]}}]\",\n            \"predictions_score\": null,\n            \"total_annotations\": 0,\n            \"total_predictions\": 1,\n            \"annotations_ids\": !anystr \"\",\n            \"annotations\": [],\n            \"predictions\": [\n            {\n\n              \"model_version\": \"undefined\",\n              \"created_ago\": \"0\\u00a0minutes\",\n              \"result\": [\n              {\n                \"from_name\": \"text_class\",\n                \"to_name\": \"text\",\n                \"type\": \"choices\",\n                \"value\": {\n                  \"choices\": [\n                    \"class_PREDICTIONS_TESTING\"\n                  ]\n                }\n              }\n              ],\n              \"score\": null,\n              \"cluster\": null,\n              \"neighbors\": null,\n              \"mislabeling\": 0.0,\n\n\n            }\n            ],\n            \"drafts\": [],\n            \"annotators\": [],\n            \"project\": !int \"{project_pk}\"\n          },\n          {\n            \"cancelled_annotations\": 0,\n            \"annotations_results\": !anystr \"\",\n            \"data\": {\n              \"int_field\": 20,\n              \"text\": \"x2\"\n            },\n            \"predictions_results\": !anystr \"\",\n            \"predictions_score\": null,\n            \"total_annotations\": 2,\n            \"total_predictions\": 1,\n            \"annotations_ids\": !anystr \"\",\n            \"annotations\": [\n            {\n\n              \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n              \"created_ago\": \"0\\u00a0minutes\",\n              \"completed_by\": !int \"{created_by}\",\n              \"result\": [\n              {\n                \"from_name\": \"text_class\",\n                \"to_name\": \"text\",\n                \"type\": \"choices\",\n                \"value\": {\n                  \"choices\": [\n                    \"class_A\"\n                  ]\n                }\n              }\n              ],\n              \"was_cancelled\": false,\n              \"ground_truth\": true,\n\n              \"lead_time\": 3.0\n\n            },\n            {\n\n              \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n              \"created_ago\": \"0\\u00a0minutes\",\n              \"completed_by\": !int \"{created_by}\",\n              \"result\": [\n              {\n                \"from_name\": \"text_class\",\n                \"to_name\": \"text\",\n                \"type\": \"choices\",\n                \"value\": {\n                  \"choices\": [\n                    \"class_A\"\n                  ]\n                }\n              }\n              ],\n              \"was_cancelled\": false,\n              \"ground_truth\": true,\n\n              \"lead_time\": 5.0\n\n            }\n            ],\n            \"predictions\": [\n            {\n\n              \"model_version\": \"model_version_A\",\n              \"created_ago\": \"0\\u00a0minutes\",\n              \"result\": [\n              {\n                \"from_name\": \"text_class\",\n                \"to_name\": \"text\",\n                \"type\": \"choices\",\n                \"value\": {\n                  \"choices\": [\n                    \"class_A\"\n                  ]\n                }\n              }\n              ],\n              \"score\": null,\n              \"cluster\": null,\n              \"neighbors\": null,\n              \"mislabeling\": 0.0,\n\n\n            }\n            ],\n            \"drafts\": [],\n            \"annotators\": [\n              !int \"{created_by}\"\n            ],\n            \"project\": !int \"{project_pk}\"\n          },\n          {\n            \"cancelled_annotations\": 0,\n            \"annotations_results\": !raw \"[{from_name: text_class, to_name: text, type: choices, value: {choices: [class_TESTING]}}]\",\n            \"data\": {\n              \"int_field\": \"99\",\n              \"text\": \"yoyo\"\n            },\n            \"predictions_results\": \"\",\n            \"predictions_score\": null,\n            \"total_annotations\": 1,\n            \"total_predictions\": 0,\n            \"annotations_ids\": !anystr \"\",\n            \"annotations\": [\n            {\n\n              \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n              \"created_ago\": \"0\\u00a0minutes\",\n              \"completed_by\": !int \"{created_by}\",\n              \"result\": [\n              {\n                \"from_name\": \"text_class\",\n                \"to_name\": \"text\",\n                \"type\": \"choices\",\n                \"value\": {\n                  \"choices\": [\n                    \"class_TESTING\"\n                  ]\n                }\n              }\n              ],\n              \"was_cancelled\": false,\n              \"ground_truth\": true,\n\n              \"lead_time\": null\n\n            }\n            ],\n            \"predictions\": [],\n            \"drafts\": [],\n            \"annotators\": [\n              !int \"{created_by}\"\n            ],\n            \"project\": !int \"{project_pk}\"\n          }\n          ]\n        }\n\n---\ntest_name: tasks-annotators\nstrict: false\nmarks:\n  - usefixtures:\n      - django_live_url\nstages:\n\n  - id: signup\n    type: ref\n\n  - id: create_project\n    name: create_project\n    request:\n      data:\n        title: Test Draft 1\n        show_collab_predictions: true\n      method: POST\n      url: '{django_live_url}/api/projects'\n    response:\n      save:\n        json:\n          project_pk: id\n          created_by: created_by.id\n      status_code: 201\n\n  - name: create_filter_tasks\n    request:\n      files:\n        json_file: tests/data_manager/tasks_annotations_predictions.json\n      headers:\n        content-type: multipart/form-data\n      method: POST\n      url: '{django_live_url}/api/projects/{project_pk}/import'\n    response:\n      json:\n        annotation_count: 4\n        prediction_count: 3\n        task_count: 6\n      status_code: 201\n\n  - name: setup_views\n    request:\n      method: POST\n      url: '{django_live_url}/api/dm/views/?project={project_pk}'\n      json: {\n        \"data\": {\n          \"filters\": {\n            \"conjunction\": \"or\",\n            \"items\": [\n              {\n                \"filter\": \"filter:tasks:annotators\",\n                \"operator\": \"not_contains\",\n                \"type\": \"List\",\n                \"value\": \"{created_by}\"\n              }\n            ]\n          },\n          \"ordering\": [\n            \"tasks:data.text\"\n          ]\n        },\n        \"project\": !int \"{project_pk}\"\n      }\n    response:\n      save:\n        json:\n          view: \"@\"\n      status_code: 201\n\n  - name: get_tasks\n    request:\n      method: GET\n      url: '{django_live_url}/api/tasks?fields=all&view={view.id}'\n    response:\n      status_code: 200\n      verify_response_with:\n        function: label_studio.tests.utils:save_response\n      json: {\n        \"total_annotations\": 0,\n        \"total_predictions\": 1,\n        \"total\": 3,\n        \"tasks\": [\n        {\n          \"cancelled_annotations\": 0,\n\n\n          \"annotations_results\": \"\",\n          \"data\": {\n            \"int_field\": 42,\n            \"text\": \"opop\"\n          },\n\n\n          \"predictions_score\": null,\n          \"total_annotations\": 0,\n          \"total_predictions\": 1,\n          \"annotations_ids\": !anystr \"\",\n          \"annotations\": [],\n          \"predictions\": [\n          {\n\n            \"model_version\": \"undefined\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"result\": [\n            {\n              \"from_name\": \"text_class\",\n              \"to_name\": \"text\",\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_PREDICTIONS_TESTING\"\n                ]\n              }\n            }\n            ],\n            \"score\": null,\n            \"cluster\": null,\n            \"neighbors\": null,\n            \"mislabeling\": 0.0,\n\n\n          }\n          ],\n          \"drafts\": [],\n\n          \"annotators\": [],\n          \"project\": !int \"{project_pk}\"\n        },\n        {\n          \"cancelled_annotations\": 0,\n\n\n          \"annotations_results\": \"\",\n          \"data\": {\n            \"text\": \"vivi\"\n          },\n\n          \"predictions_results\": \"\",\n          \"predictions_score\": null,\n          \"total_annotations\": 0,\n          \"total_predictions\": 0,\n          \"annotations_ids\": !anystr \"\",\n          \"annotations\": [],\n          \"predictions\": [],\n          \"drafts\": [],\n\n          \"annotators\": [],\n          \"project\": !int \"{project_pk}\"\n        },\n        {\n          \"cancelled_annotations\": 0,\n\n\n          \"annotations_results\": \"\",\n          \"data\": {\n            \"text\": \"zzz\"\n          },\n\n          \"predictions_results\": \"\",\n          \"predictions_score\": null,\n          \"total_annotations\": 0,\n          \"total_predictions\": 0,\n          \"annotations_ids\": !anystr \"\",\n          \"annotations\": [],\n          \"predictions\": [],\n          \"drafts\": [],\n\n          \"annotators\": [],\n          \"project\": !int \"{project_pk}\"\n        }\n        ]\n      }\n\n  - name: setup_views\n    request:\n      method: POST\n      url: '{django_live_url}/api/dm/views/?project={project_pk}'\n      json: {\n        \"data\": {\n          \"filters\": {\n            \"conjunction\": \"or\",\n            \"items\": [\n              {\n                \"filter\": \"filter:tasks:annotators\",\n                \"operator\": \"contains\",\n                \"type\": \"List\",\n                \"value\": \"{created_by}\"\n              }\n            ]\n          },\n          \"ordering\": [\n            \"tasks:data.text\"\n          ]\n        },\n        \"project\": !int \"{project_pk}\"\n      }\n    response:\n      save:\n        json:\n          view: \"@\"\n      status_code: 201\n\n  - name: get_tasks_after_setup\n    request:\n      method: GET\n      url: '{django_live_url}/api/tasks?fields=all&view={view.id}'\n    response:\n      status_code: 200\n      verify_response_with:\n        function: label_studio.tests.utils:save_response\n      json: {\n        \"total_annotations\": 4,\n        \"total_predictions\": 2,\n        \"total\": 3,\n        \"tasks\": [\n        {\n          \"cancelled_annotations\": 0,\n\n\n          \"data\": {\n            \"text\": \"Test example phrase 1\",\n            \"int_field\": 1\n          },\n\n\n          \"predictions_score\": null,\n          \"total_annotations\": 1,\n          \"total_predictions\": 1,\n          \"annotations_ids\": !anystr \"\",\n          \"annotations\": [\n          {\n\n            \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"completed_by\": !int \"{created_by}\",\n            \"result\": [\n            {\n              \"from_name\": \"text_class\",\n              \"to_name\": \"text\",\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_A\"\n                ]\n              }\n            }\n            ],\n            \"was_cancelled\": false,\n            \"ground_truth\": true,\n\n            \"lead_time\": 3.0\n\n          }\n          ],\n          \"predictions\": [\n          {\n\n            \"model_version\": \"model_version_A\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"result\": [\n            {\n              \"from_name\": \"text_class\",\n              \"to_name\": \"text\",\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_A\"\n                ]\n              }\n            }\n            ],\n            \"score\": null,\n            \"cluster\": null,\n            \"neighbors\": null,\n            \"mislabeling\": 0.0,\n\n\n          }\n          ],\n          \"drafts\": [],\n\n          \"annotators\": [\n            !int \"{created_by}\"\n          ],\n          \"project\": !int \"{project_pk}\"\n        },\n        {\n          \"cancelled_annotations\": 0,\n\n\n          \"data\": {\n            \"int_field\": 20,\n            \"text\": \"x2\"\n          },\n\n\n          \"predictions_score\": null,\n          \"total_annotations\": 2,\n          \"total_predictions\": 1,\n          \"annotations_ids\": !anystr \"\",\n          \"annotations\": [\n          {\n\n            \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"completed_by\": !int \"{created_by}\",\n            \"result\": [\n            {\n              \"from_name\": \"text_class\",\n              \"to_name\": \"text\",\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_A\"\n                ]\n              }\n            }\n            ],\n            \"was_cancelled\": false,\n            \"ground_truth\": true,\n\n            \"lead_time\": 3.0\n\n          },\n          {\n\n            \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"completed_by\": !int \"{created_by}\",\n            \"result\": [\n            {\n              \"from_name\": \"text_class\",\n              \"to_name\": \"text\",\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_A\"\n                ]\n              }\n            }\n            ],\n            \"was_cancelled\": false,\n            \"ground_truth\": true,\n\n            \"lead_time\": 5.0\n\n          }\n          ],\n          \"predictions\": [\n          {\n\n            \"model_version\": \"model_version_A\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"result\": [\n            {\n              \"from_name\": \"text_class\",\n              \"to_name\": \"text\",\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_A\"\n                ]\n              }\n            }\n            ],\n            \"score\": null,\n            \"cluster\": null,\n            \"neighbors\": null,\n            \"mislabeling\": 0.0,\n\n          }\n          ],\n          \"drafts\": [],\n          \"annotators\": [\n            !int \"{created_by}\"\n          ],\n          \"project\": !int \"{project_pk}\"\n        },\n        {\n          \"cancelled_annotations\": 0,\n\n\n          \"data\": {\n            \"int_field\": \"99\",\n            \"text\": \"yoyo\"\n          },\n\n          \"predictions_results\": \"\",\n          \"predictions_score\": null,\n          \"total_annotations\": 1,\n          \"total_predictions\": 0,\n          \"annotations_ids\": !anystr \"\",\n          \"annotations\": [\n          {\n\n            \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"completed_by\": !int \"{created_by}\",\n            \"result\": [\n            {\n              \"from_name\": \"text_class\",\n              \"to_name\": \"text\",\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_TESTING\"\n                ]\n              }\n            }\n            ],\n            \"was_cancelled\": false,\n            \"ground_truth\": true,\n\n            \"lead_time\": null\n\n          }\n          ],\n          \"predictions\": [],\n          \"drafts\": [],\n\n          \"annotators\": [\n            !int \"{created_by}\"\n          ],\n          \"project\": !int \"{project_pk}\"\n        }\n        ]\n      }\n\n---\ntest_name: tasks-minimal-fields\nstrict: false\nmarks:\n  - usefixtures:\n      - django_live_url\nstages:\n  \n  - id: signup\n    type: ref\n\n  - id: create_project\n    name: create_project\n    request:\n      data:\n        title: Test Draft 1\n        show_collab_predictions: true\n      method: POST\n      url: '{django_live_url}/api/projects'\n    response:\n      save:\n        json:\n          project_pk: id\n          created_by: created_by.id\n      status_code: 201\n\n  - name: create_filter_tasks\n    request:\n      files:\n        json_file: tests/data_manager/tasks_annotations_predictions.json\n      headers:\n        content-type: multipart/form-data\n      method: POST\n      url: '{django_live_url}/api/projects/{project_pk}/import'\n    response:\n      json:\n        annotation_count: 4\n        prediction_count: 3\n        task_count: 6\n      status_code: 201\n\n  - name: setup_views\n    request:\n      method: POST\n      url: '{django_live_url}/api/dm/views/?project={project_pk}'\n      json: {\n        \"data\": {\n          \"filters\": {\n            \"conjunction\": \"or\",\n            \"items\": [\n              {\n                \"filter\": \"filter:tasks:annotators\",\n                \"operator\": \"empty\",\n                \"type\": \"List\",\n                \"value\": false\n              }\n            ]\n          },\n          \"ordering\": [\n            \"tasks:data.text\"\n          ]\n        },\n        \"project\": !int \"{project_pk}\"\n      }\n    response:\n      save:\n        json:\n          view: \"@\"\n      status_code: 201\n\n  - name: get_tasks\n    request:\n      method: GET\n      url: '{django_live_url}/api/tasks?view={view.id}'\n    response:\n      status_code: 200\n      verify_response_with:\n        function: label_studio.tests.utils:save_response\n      json: {\n        \"total_annotations\": 4,\n        \"total_predictions\": 2,\n        \"total\": 3,\n        \"tasks\": [\n        {\n\n          \"annotations_results\": \"\",\n          \"data\": {\n            \"text\": \"Test example phrase 1\",\n            \"int_field\": 1\n          },\n\n          \"predictions_results\": \"\",\n          \"total_annotations\": 1,\n          \"annotations_ids\": !anystr \"\",\n          \"drafts\": [],\n          \"file_upload\": null,\n          \"annotators\": [\n            !int \"{created_by}\"\n          ],\n          \"project\": !int \"{project_pk}\"\n        },\n        {\n\n          \"annotations_results\": \"\",\n          \"data\": {\n            \"int_field\": 20,\n            \"text\": \"x2\"\n          },\n\n          \"predictions_results\": \"\",\n          \"total_annotations\": 2,\n          \"annotations_ids\": !anystr \"\",\n          \"drafts\": [],\n          \"file_upload\": null,\n          \"annotators\": [\n            !int \"{created_by}\"\n          ],\n          \"project\": !int \"{project_pk}\"\n        },\n        {\n\n          \"annotations_results\": \"\",\n          \"data\": {\n            \"int_field\": \"99\",\n            \"text\": \"yoyo\"\n          },\n\n          \"predictions_results\": \"\",\n          \"total_annotations\": 1,\n          \"annotations_ids\": !anystr \"\",\n          \"drafts\": [],\n          \"file_upload\": null,\n          \"annotators\": [\n            !int \"{created_by}\"\n          ],\n          \"project\": !int \"{project_pk}\"\n        }\n        ]\n      }\n\n  - name: setup_views\n    request:\n      method: POST\n      url: '{django_live_url}/api/dm/views/?project={project_pk}'\n      json: {\n        \"data\": {\n          \"filters\": {\n            \"conjunction\": \"and\",\n            \"items\": [\n              {\n                \"filter\": \"filter:tasks:predictions_results\",\n                \"operator\": \"equal\",\n                \"type\": \"String\",\n                \"value\": \"PREDICTIONS\"\n              },\n              {\n                \"filter\": \"filter:tasks:annotations_results\",\n                \"operator\": \"not_equal\",\n                \"type\": \"String\",\n                \"value\": \"PREDICTIONS\"\n              }\n            ]\n          },\n          \"ordering\": [\n            \"tasks:data.text\"\n          ]\n        },\n        \"project\": !int \"{project_pk}\"\n      }\n    response:\n      save:\n        json:\n          view: \"@\"\n      status_code: 201\n\n  - name: get_tasks\n    request:\n      method: GET\n      url: '{django_live_url}/api/tasks?view={view.id}'\n    response:\n      status_code: 200\n      verify_response_with:\n        function: label_studio.tests.utils:save_response\n      json: {\n        \"total_annotations\": 0,\n        \"total_predictions\": 0,\n        \"total\": 0,\n        }\n\n  - name: get_tasks_with_page\n    request:\n      method: GET\n      url: '{django_live_url}/api/tasks?view={view.id}&page=1'\n    response:\n      status_code: 200\n      verify_response_with:\n        function: label_studio.tests.utils:save_response\n      json: {\n        \"total_annotations\": 0,\n        \"total_predictions\": 0,\n        \"total\": 0,\n      }\n\n  - name: get_first_task\n    request:\n      method: GET\n      url: '{django_live_url}/api/projects/{project_pk}/next'\n    response:\n      save:\n        json:\n          first_task_id: id\n      status_code: 200\n\n  - name: create_annotation_first_task\n    request:\n      headers:\n        content-type: application/json\n      json:\n        lead_time: 5\n        result:\n        - from_name: label\n          to_name: text\n          type: choices\n          value:\n            choices:\n            - class_B\n      method: POST\n      url: '{django_live_url}/api/tasks/{first_task_id}/annotations'\n    response:\n      save:\n        json:\n          annotation_pk: id\n      status_code: 201\n\n  - name: setup_views\n    request:\n      method: POST\n      url: '{django_live_url}/api/dm/views/?project={project_pk}'\n      json: {\n        \"data\": {\n          \"filters\": {\n            \"conjunction\": \"or\",\n            \"items\": [\n              {\n                \"filter\": \"filter:tasks:updated_by\",\n                \"operator\": \"contains\",\n                \"type\": \"List\",\n                \"value\": !int \"{created_by}\",\n              }\n            ]\n          },\n          \"ordering\": [\n            \"tasks:data.text\"\n          ]\n        },\n        \"project\": !int \"{project_pk}\"\n      }\n    response:\n      save:\n        json:\n          view: \"@\"\n      status_code: 201\n\n  - name: get_tasks\n    request:\n      method: GET\n      url: '{django_live_url}/api/tasks?view={view.id}'\n    response:\n      status_code: 200\n      verify_response_with:\n        function: label_studio.tests.utils:save_response\n      json: {\n        \"total_annotations\": 1,\n        \"total_predictions\": 0,\n        \"total\": 1,\n      }\n\n  - name: setup_views\n    request:\n      method: POST\n      url: '{django_live_url}/api/dm/views/?project={project_pk}'\n      json: {\n        \"data\": {\n          \"filters\": {\n            \"conjunction\": \"or\",\n            \"items\": [\n              {\n                \"filter\": \"filter:tasks:updated_by\",\n                \"operator\": \"not_contains\",\n                \"type\": \"List\",\n                \"value\": !int \"{created_by}\",\n              }\n            ]\n          },\n          \"ordering\": [\n            \"tasks:data.text\"\n          ]\n        },\n        \"project\": !int \"{project_pk}\"\n      }\n    response:\n      save:\n        json:\n          view: \"@\"\n      status_code: 201\n\n  - name: get_tasks\n    request:\n      method: GET\n      url: '{django_live_url}/api/tasks?view={view.id}'\n    response:\n      status_code: 200\n      verify_response_with:\n        function: label_studio.tests.utils:save_response\n      json: {\n        \"total_annotations\": 4,\n        \"total_predictions\": 3,\n        \"total\": 5,\n      }\n\n  - name: setup_views\n    request:\n      method: POST\n      url: '{django_live_url}/api/dm/views/?project={project_pk}'\n      json: {\n        \"data\": {\n          \"filters\": {\n            \"conjunction\": \"or\",\n            \"items\": [\n              {\n                \"filter\": \"filter:tasks:updated_by\",\n                \"operator\": \"equal\",\n                \"type\": \"List\",\n                \"value\": !int \"{created_by}\",\n              }\n            ]\n          },\n          \"ordering\": [\n            \"tasks:data.text\"\n          ]\n        },\n        \"project\": !int \"{project_pk}\"\n      }\n    response:\n      save:\n        json:\n          view: \"@\"\n      status_code: 201\n\n  - name: get_tasks\n    request:\n      method: GET\n      url: '{django_live_url}/api/tasks?view={view.id}'\n    response:\n      status_code: 200\n      verify_response_with:\n        function: label_studio.tests.utils:save_response\n      json: {\n        \"total_annotations\": 1,\n        \"total_predictions\": 0,\n        \"total\": 1,\n      }\n"], "fixing_code": ["\"\"\"This file and its contents are licensed under the Apache License 2.0. Please see the included NOTICE for copyright information and LICENSE for a copy of the license.\n\"\"\"\n\"\"\"\nDjango Base settings for Label Studio.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/3.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/3.1/ref/settings/\n\"\"\"\nimport json\nimport logging\nimport os\nimport re\nfrom datetime import timedelta\n\nfrom label_studio.core.utils.params import get_bool_env, get_env_list\n\nformatter = 'standard'\nJSON_LOG = get_bool_env('JSON_LOG', False)\nif JSON_LOG:\n    formatter = 'json'\n\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'json': {\n            '()': 'label_studio.core.utils.formatter.CustomJsonFormatter',\n            'format': '[%(asctime)s] [%(name)s::%(funcName)s::%(lineno)d] [%(levelname)s] [%(user_id)s] %(message)s',\n            'datefmt': '%d/%b/%Y:%H:%M:%S %z',\n        },\n        'standard': {\n            'format': '[%(asctime)s] [%(name)s::%(funcName)s::%(lineno)d] [%(levelname)s] %(message)s',\n        },\n    },\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n            'formatter': formatter,\n        },\n    },\n    'root': {\n        'handlers': ['console'],\n        'level': os.environ.get('LOG_LEVEL', 'DEBUG'),\n    },\n    'loggers': {\n        'pykwalify': {'level': 'ERROR', 'propagate': False},\n        'tavern': {'level': 'ERROR', 'propagate': False},\n        'asyncio': {'level': 'WARNING'},\n        'rules': {'level': 'WARNING'},\n        'django': {\n            'handlers': ['console'],\n            # 'propagate': True,\n        },\n        'django_auth_ldap': {'level': os.environ.get('LOG_LEVEL', 'DEBUG')},\n        'rq.worker': {\n            'handlers': ['console'],\n            'level': os.environ.get('LOG_LEVEL', 'INFO'),\n        },\n        'ddtrace': {\n            'handlers': ['console'],\n            'level': 'WARNING',\n        },\n        'ldclient.util': {\n            'handlers': ['console'],\n            'level': 'ERROR',\n        },\n    },\n}\n\n# for printing messages before main logging config applied\nif not logging.getLogger().hasHandlers():\n    logging.basicConfig(level=logging.DEBUG, format='%(message)s')\n\nfrom label_studio.core.utils.io import get_data_dir\nfrom label_studio.core.utils.params import get_bool_env, get_env\n\nlogger = logging.getLogger(__name__)\nSILENCED_SYSTEM_CHECKS = []\n\n# Hostname is used for proper path generation to the resources, pages, etc\nHOSTNAME = get_env('HOST', '')\nif HOSTNAME:\n    if not HOSTNAME.startswith('http://') and not HOSTNAME.startswith('https://'):\n        logger.info(\n            '! HOST variable found in environment, but it must start with http:// or https://, ignore it: %s', HOSTNAME\n        )\n        HOSTNAME = ''\n    else:\n        logger.info('=> Hostname correctly is set to: %s', HOSTNAME)\n        if HOSTNAME.endswith('/'):\n            HOSTNAME = HOSTNAME[0:-1]\n\n        # for django url resolver\n        if HOSTNAME:\n            # http[s]://domain.com:8080/script_name => /script_name\n            pattern = re.compile(r'^http[s]?:\\/\\/([^:\\/\\s]+(:\\d*)?)(.*)?')\n            match = pattern.match(HOSTNAME)\n            FORCE_SCRIPT_NAME = match.group(3)\n            if FORCE_SCRIPT_NAME:\n                logger.info('=> Django URL prefix is set to: %s', FORCE_SCRIPT_NAME)\n\nINTERNAL_PORT = '8080'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = get_bool_env('DEBUG', True)\nDEBUG_MODAL_EXCEPTIONS = get_bool_env('DEBUG_MODAL_EXCEPTIONS', True)\n\n# Whether to verify SSL certs when making external requests, eg in the uploader\n# \u26a0\ufe0f Turning this off means assuming risk. \u26a0\ufe0f\n# Overridable at organization level via Organization#verify_ssl_certs\nVERIFY_SSL_CERTS = get_bool_env('VERIFY_SSL_CERTS', True)\n\n# 'sqlite-dll-<arch>-<version>.zip' should be hosted at this prefix\nWINDOWS_SQLITE_BINARY_HOST_PREFIX = get_env('WINDOWS_SQLITE_BINARY_HOST_PREFIX', 'https://www.sqlite.org/2023/')\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Base path for media root and other uploaded files\nBASE_DATA_DIR = get_env('BASE_DATA_DIR', get_data_dir())\nos.makedirs(BASE_DATA_DIR, exist_ok=True)\nlogger.info('=> Database and media directory: %s', BASE_DATA_DIR)\n\n# Databases\n# https://docs.djangoproject.com/en/2.1/ref/settings/#databases\nDJANGO_DB_MYSQL = 'mysql'\nDJANGO_DB_SQLITE = 'sqlite'\nDJANGO_DB_POSTGRESQL = 'postgresql'\nDJANGO_DB = 'default'\nDATABASE_NAME_DEFAULT = os.path.join(BASE_DATA_DIR, 'label_studio.sqlite3')\nDATABASE_NAME = get_env('DATABASE_NAME', DATABASE_NAME_DEFAULT)\nDATABASES_ALL = {\n    DJANGO_DB_POSTGRESQL: {\n        'ENGINE': 'django.db.backends.postgresql',\n        'USER': get_env('POSTGRE_USER', 'postgres'),\n        'PASSWORD': get_env('POSTGRE_PASSWORD', 'postgres'),\n        'NAME': get_env('POSTGRE_NAME', 'postgres'),\n        'HOST': get_env('POSTGRE_HOST', 'localhost'),\n        'PORT': int(get_env('POSTGRE_PORT', '5432')),\n    },\n    DJANGO_DB_MYSQL: {\n        'ENGINE': 'django.db.backends.mysql',\n        'USER': get_env('MYSQL_USER', 'root'),\n        'PASSWORD': get_env('MYSQL_PASSWORD', ''),\n        'NAME': get_env('MYSQL_NAME', 'labelstudio'),\n        'HOST': get_env('MYSQL_HOST', 'localhost'),\n        'PORT': int(get_env('MYSQL_PORT', '3306')),\n    },\n    DJANGO_DB_SQLITE: {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': DATABASE_NAME,\n        'OPTIONS': {\n            # 'timeout': 20,\n        },\n    },\n}\nDATABASES_ALL['default'] = DATABASES_ALL[DJANGO_DB_POSTGRESQL]\nDATABASES = {'default': DATABASES_ALL.get(get_env('DJANGO_DB', 'default'))}\n\nDEFAULT_AUTO_FIELD = 'django.db.models.AutoField'\n\nif get_bool_env('GOOGLE_LOGGING_ENABLED', False):\n    logging.info('Google Cloud Logging handler is enabled.')\n    try:\n        import google.cloud.logging\n        from google.auth.exceptions import GoogleAuthError\n\n        client = google.cloud.logging.Client()\n        client.setup_logging()\n\n        LOGGING['handlers']['google_cloud_logging'] = {\n            'level': get_env('LOG_LEVEL', 'WARNING'),\n            'class': 'google.cloud.logging.handlers.CloudLoggingHandler',\n            'client': client,\n        }\n        LOGGING['root']['handlers'].append('google_cloud_logging')\n    except GoogleAuthError:\n        logger.exception('Google Cloud Logging handler could not be setup.')\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django.contrib.humanize',\n    'drf_yasg',\n    'corsheaders',\n    'django_extensions',\n    'django_rq',\n    'django_filters',\n    'rules',\n    'annoying',\n    'rest_framework',\n    'rest_framework.authtoken',\n    'drf_generators',\n    'core',\n    'users',\n    'organizations',\n    'data_import',\n    'data_export',\n    'projects',\n    'tasks',\n    'data_manager',\n    'io_storages',\n    'ml',\n    'webhooks',\n    'labels_manager',\n]\n\nMIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.locale.LocaleMiddleware',\n    'core.middleware.DisableCSRF',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'core.middleware.CommonMiddlewareAppendSlashWithoutRedirect',  # instead of 'CommonMiddleware'\n    'core.middleware.CommonMiddleware',\n    'django_user_agents.middleware.UserAgentMiddleware',\n    'core.middleware.SetSessionUIDMiddleware',\n    'core.middleware.ContextLogMiddleware',\n    'core.middleware.DatabaseIsLockedRetryMiddleware',\n    'core.current_request.ThreadLocalMiddleware',\n]\n\nREST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': [\n        'core.api_permissions.HasObjectPermission',\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n    'EXCEPTION_HANDLER': 'core.utils.common.custom_exception_handler',\n    'DEFAULT_RENDERER_CLASSES': ('rest_framework.renderers.JSONRenderer',),\n    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',\n    'PAGE_SIZE': 100,\n    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination'\n}\nSILENCED_SYSTEM_CHECKS += ['rest_framework.W001']\n\n# CORS & Host settings\nINTERNAL_IPS = [  # django debug toolbar for django==2.2 requirement\n    '127.0.0.1',\n    'localhost',\n]\nCORS_ORIGIN_ALLOW_ALL = True\nCORS_ALLOW_METHODS = [\n    'DELETE',\n    'GET',\n    'OPTIONS',\n    'PATCH',\n    'POST',\n    'PUT',\n]\nALLOWED_HOSTS = ['*']\n\n# Auth modules\nAUTH_USER_MODEL = 'users.User'\nAUTHENTICATION_BACKENDS = [\n    'rules.permissions.ObjectPermissionBackend',\n    'django.contrib.auth.backends.ModelBackend',\n]\nUSE_USERNAME_FOR_LOGIN = False\n\nDISABLE_SIGNUP_WITHOUT_LINK = get_bool_env('DISABLE_SIGNUP_WITHOUT_LINK', False)\n\n# Password validation:\n# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n\n# Django templates\nTEMPLATES_DIR = os.path.join(os.path.dirname(BASE_DIR), 'templates')  # ../../from_this = 'web' dir\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [TEMPLATES_DIR],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n                'core.context_processors.settings',\n            ],\n            'builtins': ['django.templatetags.i18n'],\n        },\n    }\n]\n\n# RQ\nRQ_QUEUES = {\n    'critical': {\n        'HOST': 'localhost',\n        'PORT': 6379,\n        'DB': 0,\n        'DEFAULT_TIMEOUT': 180,\n    },\n    'high': {\n        'HOST': 'localhost',\n        'PORT': 6379,\n        'DB': 0,\n        'DEFAULT_TIMEOUT': 180,\n    },\n    'default': {\n        'HOST': 'localhost',\n        'PORT': 6379,\n        'DB': 0,\n        'DEFAULT_TIMEOUT': 180,\n    },\n    'low': {\n        'HOST': 'localhost',\n        'PORT': 6379,\n        'DB': 0,\n        'DEFAULT_TIMEOUT': 180,\n    },\n}\n\n# Swagger: automatic API documentation\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Token': {\n            'type': 'apiKey',\n            'name': 'Authorization',\n            'in': 'header',\n            'description': 'The token (or API key) must be passed as a request header. '\n            'You can find your user token on the User Account page in Label Studio. Example: '\n            '<br><pre><code class=\"language-bash\">'\n            'curl https://label-studio-host/api/projects -H \"Authorization: Token [your-token]\"'\n            '</code></pre>',\n        }\n    },\n    'APIS_SORTER': 'alpha',\n    'SUPPORTED_SUBMIT_METHODS': ['get', 'post', 'put', 'delete', 'patch'],\n    'OPERATIONS_SORTER': 'alpha',\n}\n\nSENTRY_DSN = get_env('SENTRY_DSN', None)\nSENTRY_RATE = float(get_env('SENTRY_RATE', 0.25))\nSENTRY_ENVIRONMENT = get_env('SENTRY_ENVIRONMENT', 'stage.opensource')\nSENTRY_REDIS_ENABLED = False\nFRONTEND_SENTRY_DSN = get_env('FRONTEND_SENTRY_DSN', None)\nFRONTEND_SENTRY_RATE = get_env('FRONTEND_SENTRY_RATE', 0.1)\nFRONTEND_SENTRY_ENVIRONMENT = get_env('FRONTEND_SENTRY_ENVIRONMENT', 'stage.opensource')\n\nROOT_URLCONF = 'core.urls'\nWSGI_APPLICATION = 'core.wsgi.application'\nGRAPHIQL = True\n\n# Internationalization\n# https://docs.djangoproject.com/en/2.1/topics/i18n/\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = False\nUSE_L10N = True\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nSTATIC_URL = '/static/'\n# if FORCE_SCRIPT_NAME:\n#    STATIC_URL = FORCE_SCRIPT_NAME + STATIC_URL\nlogger.info(f'=> Static URL is set to: {STATIC_URL}')\n\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static_build')\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\nSTATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n)\nSTATICFILES_STORAGE = 'core.storage.SkipMissedManifestStaticFilesStorage'\n\n# Sessions and CSRF\nSESSION_COOKIE_SECURE = bool(int(get_env('SESSION_COOKIE_SECURE', False)))\nSESSION_COOKIE_SAMESITE = get_env('SESSION_COOKIE_SAMESITE', 'Lax')\n\nCSRF_COOKIE_SECURE = bool(int(get_env('CSRF_COOKIE_SECURE', SESSION_COOKIE_SECURE)))\nCSRF_COOKIE_HTTPONLY = bool(int(get_env('CSRF_COOKIE_HTTPONLY', SESSION_COOKIE_SECURE)))\nCSRF_COOKIE_SAMESITE = get_env('CSRF_COOKIE_SAMESITE', 'Lax')\n\n# Inactivity user sessions\nINACTIVITY_SESSION_TIMEOUT_ENABLED = bool(int(get_env('INACTIVITY_SESSION_TIMEOUT_ENABLED', True)))\n# The most time a login will last, regardless of activity\nMAX_SESSION_AGE = int(get_env('MAX_SESSION_AGE', timedelta(days=14).total_seconds()))\n# The most time that can elapse between activity with the server before the user is logged out\nMAX_TIME_BETWEEN_ACTIVITY = int(get_env('MAX_TIME_BETWEEN_ACTIVITY', timedelta(days=5).total_seconds()))\n\nSSRF_PROTECTION_ENABLED = get_bool_env('SSRF_PROTECTION_ENABLED', False)\n\n# user media files\nMEDIA_ROOT = os.path.join(BASE_DATA_DIR, 'media')\nos.makedirs(MEDIA_ROOT, exist_ok=True)\nMEDIA_URL = '/data/'\nUPLOAD_DIR = 'upload'\nAVATAR_PATH = 'avatars'\n\nSUPPORTED_EXTENSIONS = set(\n    [\n        '.bmp',\n        '.csv',\n        '.flac',\n        '.gif',\n        '.htm',\n        '.html',\n        '.jpg',\n        '.jpeg',\n        '.json',\n        '.m4a',\n        '.mp3',\n        '.ogg',\n        '.png',\n        '.svg',\n        '.tsv',\n        '.txt',\n        '.wav',\n        '.xml',\n        '.mp4',\n        '.webm',\n        '.webp',\n    ]\n)\n\n# directory for files created during unit tests\nTEST_DATA_ROOT = os.path.join(BASE_DATA_DIR, 'test_data')\nos.makedirs(TEST_DATA_ROOT, exist_ok=True)\n\n# project exports\nEXPORT_DIR = os.path.join(BASE_DATA_DIR, 'export')\nEXPORT_URL_ROOT = '/export/'\nEXPORT_MIXIN = 'data_export.mixins.ExportMixin'\n# old export dir\nos.makedirs(EXPORT_DIR, exist_ok=True)\n# dir for delayed export\nDELAYED_EXPORT_DIR = 'export'\nos.makedirs(os.path.join(BASE_DATA_DIR, MEDIA_ROOT, DELAYED_EXPORT_DIR), exist_ok=True)\n\n# file / task size limits\nDATA_UPLOAD_MAX_MEMORY_SIZE = int(get_env('DATA_UPLOAD_MAX_MEMORY_SIZE', 250 * 1024 * 1024))\nDATA_UPLOAD_MAX_NUMBER_FILES = int(get_env('DATA_UPLOAD_MAX_NUMBER_FILES', 100))\nTASKS_MAX_NUMBER = 1000000\nTASKS_MAX_FILE_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE\n\nTASK_LOCK_TTL = int(get_env('TASK_LOCK_TTL', default=86400))\n\nLABEL_STREAM_HISTORY_LIMIT = int(get_env('LABEL_STREAM_HISTORY_LIMIT', default=100))\n\nRANDOM_NEXT_TASK_SAMPLE_SIZE = int(get_env('RANDOM_NEXT_TASK_SAMPLE_SIZE', 50))\n\nTASK_API_PAGE_SIZE_MAX = int(get_env('TASK_API_PAGE_SIZE_MAX', 0)) or None\n\n# Email backend\nFROM_EMAIL = get_env('FROM_EMAIL', 'Label Studio <hello@labelstud.io>')\nEMAIL_BACKEND = get_env('EMAIL_BACKEND', 'django.core.mail.backends.dummy.EmailBackend')\n\nENABLE_LOCAL_FILES_STORAGE = get_bool_env('ENABLE_LOCAL_FILES_STORAGE', default=True)\nLOCAL_FILES_SERVING_ENABLED = get_bool_env('LOCAL_FILES_SERVING_ENABLED', default=False)\nLOCAL_FILES_DOCUMENT_ROOT = get_env('LOCAL_FILES_DOCUMENT_ROOT', default=os.path.abspath(os.sep))\n\nSYNC_ON_TARGET_STORAGE_CREATION = get_bool_env('SYNC_ON_TARGET_STORAGE_CREATION', default=True)\n\nALLOW_IMPORT_TASKS_WITH_UNKNOWN_EMAILS = get_bool_env('ALLOW_IMPORT_TASKS_WITH_UNKNOWN_EMAILS', default=False)\n\n\"\"\" React Libraries: do not forget to change this dir in /etc/nginx/nginx.conf \"\"\"\n# EDITOR = label-studio-frontend repository\nEDITOR_ROOT = os.path.join(BASE_DIR, '../frontend/dist/lsf')\n# DM = data manager (included into FRONTEND due npm building, we need only version.json file from there)\nDM_ROOT = os.path.join(BASE_DIR, '../frontend/dist/dm')\n# FRONTEND = GUI for django backend\nREACT_APP_ROOT = os.path.join(BASE_DIR, '../frontend/dist/react-app')\n\n# per project settings\nBATCH_SIZE = 1000\nPROJECT_TITLE_MIN_LEN = 3\nPROJECT_TITLE_MAX_LEN = 50\nLOGIN_REDIRECT_URL = '/'\nLOGIN_URL = '/'\nMIN_GROUND_TRUTH = 10\nDATA_UNDEFINED_NAME = '$undefined$'\nLICENSE = {}\nVERSIONS = {}\nVERSION_EDITION = 'Community'\nLATEST_VERSION_CHECK = True\nVERSIONS_CHECK_TIME = 0\nALLOW_ORGANIZATION_WEBHOOKS = get_bool_env('ALLOW_ORGANIZATION_WEBHOOKS', False)\nCONVERTER_DOWNLOAD_RESOURCES = get_bool_env('CONVERTER_DOWNLOAD_RESOURCES', True)\nEXPERIMENTAL_FEATURES = get_bool_env('EXPERIMENTAL_FEATURES', False)\nUSE_ENFORCE_CSRF_CHECKS = get_bool_env('USE_ENFORCE_CSRF_CHECKS', True)  # False is for tests\nCLOUD_FILE_STORAGE_ENABLED = False\n\nIO_STORAGES_IMPORT_LINK_NAMES = [\n    'io_storages_s3importstoragelink',\n    'io_storages_gcsimportstoragelink',\n    'io_storages_azureblobimportstoragelink',\n    'io_storages_localfilesimportstoragelink',\n    'io_storages_redisimportstoragelink',\n]\n\nCREATE_ORGANIZATION = 'organizations.functions.create_organization'\nSAVE_USER = 'users.functions.save_user'\nPOST_PROCESS_REIMPORT = 'core.utils.common.empty'\nUSER_SERIALIZER = 'users.serializers.BaseUserSerializer'\nUSER_SERIALIZER_UPDATE = 'users.serializers.BaseUserSerializerUpdate'\nTASK_SERIALIZER = 'tasks.serializers.BaseTaskSerializer'\nEXPORT_DATA_SERIALIZER = 'data_export.serializers.BaseExportDataSerializer'\nDATA_MANAGER_GET_ALL_COLUMNS = 'data_manager.functions.get_all_columns'\nDATA_MANAGER_ANNOTATIONS_MAP = {}\nDATA_MANAGER_ACTIONS = {}\nDATA_MANAGER_CUSTOM_FILTER_EXPRESSIONS = 'data_manager.functions.custom_filter_expressions'\nDATA_MANAGER_PREPROCESS_FILTER = 'data_manager.functions.preprocess_filter'\nUSER_LOGIN_FORM = 'users.forms.LoginForm'\nPROJECT_MIXIN = 'projects.mixins.ProjectMixin'\nTASK_MIXIN = 'tasks.mixins.TaskMixin'\nANNOTATION_MIXIN = 'tasks.mixins.AnnotationMixin'\nORGANIZATION_MIXIN = 'organizations.mixins.OrganizationMixin'\nUSER_MIXIN = 'users.mixins.UserMixin'\nUSER_PERM = 'core.api_permissions.HasOwnerPermission'\nRECALCULATE_ALL_STATS = None\nGET_STORAGE_LIST = 'io_storages.functions.get_storage_list'\nSTORAGE_ANNOTATION_SERIALIZER = 'io_storages.serializers.StorageAnnotationSerializer'\nTASK_SERIALIZER_BULK = 'tasks.serializers.BaseTaskSerializerBulk'\nPREPROCESS_FIELD_NAME = 'data_manager.functions.preprocess_field_name'\nINTERACTIVE_DATA_SERIALIZER = 'data_export.serializers.BaseExportDataSerializerForInteractive'\nDELETE_TASKS_ANNOTATIONS_POSTPROCESS = None\n\n\ndef project_delete(project):\n    project.delete()\n\n\ndef user_auth(user_model, email, password):\n    return None\n\n\ndef collect_versions_dummy(**kwargs):\n    return {}\n\n\nPROJECT_DELETE = project_delete\nUSER_AUTH = user_auth\nCOLLECT_VERSIONS = collect_versions_dummy\n\nWEBHOOK_TIMEOUT = float(get_env('WEBHOOK_TIMEOUT', 1.0))\nWEBHOOK_BATCH_SIZE = int(get_env('WEBHOOK_BATCH_SIZE', 100))\nWEBHOOK_SERIALIZERS = {\n    'project': 'webhooks.serializers_for_hooks.ProjectWebhookSerializer',\n    'task': 'webhooks.serializers_for_hooks.TaskWebhookSerializer',\n    'annotation': 'webhooks.serializers_for_hooks.AnnotationWebhookSerializer',\n    'label': 'labels_manager.serializers.LabelSerializer',\n    'label_link': 'labels_manager.serializers.LabelLinkSerializer',\n}\n\nEDITOR_KEYMAP = json.dumps(get_env('EDITOR_KEYMAP'))\n\n# fix a problem with Windows mimetypes for JS and PNG\nimport mimetypes\n\nmimetypes.add_type('application/javascript', '.js', True)\nmimetypes.add_type('image/png', '.png', True)\n\n# fields name was used in DM api before\nREST_FLEX_FIELDS = {'FIELDS_PARAM': 'include'}\n\nINTERPOLATE_KEY_FRAMES = get_env('INTERPOLATE_KEY_FRAMES', False)\n\n# Feature Flags\nFEATURE_FLAGS_API_KEY = get_env('FEATURE_FLAGS_API_KEY', default='any key')\n\n# we may set feature flags from file\nFEATURE_FLAGS_FROM_FILE = get_bool_env('FEATURE_FLAGS_FROM_FILE', False)\nFEATURE_FLAGS_FILE = get_env('FEATURE_FLAGS_FILE', 'feature_flags.json')\n# or if file is not set, default is using offline mode\nFEATURE_FLAGS_OFFLINE = get_bool_env('FEATURE_FLAGS_OFFLINE', True)\n# default value for feature flags (if not overridden by environment or client)\nFEATURE_FLAGS_DEFAULT_VALUE = False\n\n# Whether to send analytics telemetry data\nCOLLECT_ANALYTICS = get_bool_env('collect_analytics', True)\n\n# Strip harmful content from SVG files by default\nSVG_SECURITY_CLEANUP = get_bool_env('SVG_SECURITY_CLEANUP', False)\n\nML_BLOCK_LOCAL_IP = get_bool_env('ML_BLOCK_LOCAL_IP', False)\n\nRQ_LONG_JOB_TIMEOUT = int(get_env('RQ_LONG_JOB_TIMEOUT', 36000))\n\nAPP_WEBSERVER = get_env('APP_WEBSERVER', 'django')\n\nBATCH_JOB_RETRY_TIMEOUT = int(get_env('BATCH_JOB_RETRY_TIMEOUT', 60))\n\nFUTURE_SAVE_TASK_TO_STORAGE = get_bool_env('FUTURE_SAVE_TASK_TO_STORAGE', default=False)\nFUTURE_SAVE_TASK_TO_STORAGE_JSON_EXT = get_bool_env('FUTURE_SAVE_TASK_TO_STORAGE_JSON_EXT', default=True)\nSTORAGE_IN_PROGRESS_TIMER = float(get_env('STORAGE_IN_PROGRESS_TIMER', 5.0))\n\nUSE_NGINX_FOR_EXPORT_DOWNLOADS = get_bool_env('USE_NGINX_FOR_EXPORT_DOWNLOADS', False)\n\nif get_env('MINIO_STORAGE_ENDPOINT') and not get_bool_env('MINIO_SKIP', False):\n    CLOUD_FILE_STORAGE_ENABLED = True\n    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\n    AWS_STORAGE_BUCKET_NAME = get_env('MINIO_STORAGE_BUCKET_NAME')\n    AWS_ACCESS_KEY_ID = get_env('MINIO_STORAGE_ACCESS_KEY')\n    AWS_SECRET_ACCESS_KEY = get_env('MINIO_STORAGE_SECRET_KEY')\n    AWS_S3_ENDPOINT_URL = get_env('MINIO_STORAGE_ENDPOINT')\n    AWS_QUERYSTRING_AUTH = False\n    # make domain for FileUpload.file\n    AWS_S3_SECURE_URLS = False\n    AWS_S3_URL_PROTOCOL = 'http:' if HOSTNAME.startswith('http://') else 'https:'\n    AWS_S3_CUSTOM_DOMAIN = HOSTNAME.replace('http://', '').replace('https://', '') + '/data'\n\nif get_env('STORAGE_TYPE') == 's3':\n    CLOUD_FILE_STORAGE_ENABLED = True\n    DEFAULT_FILE_STORAGE = 'core.storage.CustomS3Boto3Storage'\n    if get_env('STORAGE_AWS_ACCESS_KEY_ID'):\n        AWS_ACCESS_KEY_ID = get_env('STORAGE_AWS_ACCESS_KEY_ID')\n    if get_env('STORAGE_AWS_SECRET_ACCESS_KEY'):\n        AWS_SECRET_ACCESS_KEY = get_env('STORAGE_AWS_SECRET_ACCESS_KEY')\n    AWS_STORAGE_BUCKET_NAME = get_env('STORAGE_AWS_BUCKET_NAME')\n    AWS_S3_REGION_NAME = get_env('STORAGE_AWS_REGION_NAME', None)\n    AWS_S3_ENDPOINT_URL = get_env('STORAGE_AWS_ENDPOINT_URL', None)\n    if get_env('STORAGE_AWS_OBJECT_PARAMETERS'):\n        AWS_S3_OBJECT_PARAMETERS = json.loads(get_env('STORAGE_AWS_OBJECT_PARAMETERS'))\n    AWS_QUERYSTRING_EXPIRE = int(get_env('STORAGE_AWS_X_AMZ_EXPIRES', '86400'))\n    AWS_LOCATION = get_env('STORAGE_AWS_FOLDER', default='')\n    AWS_S3_USE_SSL = get_bool_env('STORAGE_AWS_S3_USE_SSL', True)\n    AWS_S3_VERIFY = get_env('STORAGE_AWS_S3_VERIFY', None)\n    if AWS_S3_VERIFY == 'false' or AWS_S3_VERIFY == 'False' or AWS_S3_VERIFY == '0':\n        AWS_S3_VERIFY = False\n    AWS_S3_SIGNATURE_VERSION = get_env('STORAGE_AWS_S3_SIGNATURE_VERSION', None)\n\nif get_env('STORAGE_TYPE') == 'azure':\n    CLOUD_FILE_STORAGE_ENABLED = True\n    DEFAULT_FILE_STORAGE = 'core.storage.CustomAzureStorage'\n    AZURE_ACCOUNT_NAME = get_env('STORAGE_AZURE_ACCOUNT_NAME')\n    AZURE_ACCOUNT_KEY = get_env('STORAGE_AZURE_ACCOUNT_KEY')\n    AZURE_CONTAINER = get_env('STORAGE_AZURE_CONTAINER_NAME')\n    AZURE_URL_EXPIRATION_SECS = int(get_env('STORAGE_AZURE_URL_EXPIRATION_SECS', '86400'))\n    AZURE_LOCATION = get_env('STORAGE_AZURE_FOLDER', default='')\n\nif get_env('STORAGE_TYPE') == 'gcs':\n    CLOUD_FILE_STORAGE_ENABLED = True\n    # DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'\n    DEFAULT_FILE_STORAGE = 'core.storage.AlternativeGoogleCloudStorage'\n    GS_PROJECT_ID = get_env('STORAGE_GCS_PROJECT_ID')\n    GS_BUCKET_NAME = get_env('STORAGE_GCS_BUCKET_NAME')\n    GS_EXPIRATION = timedelta(seconds=int(get_env('STORAGE_GCS_EXPIRATION_SECS', '86400')))\n    GS_LOCATION = get_env('STORAGE_GCS_FOLDER', default='')\n    GS_CUSTOM_ENDPOINT = get_env('STORAGE_GCS_ENDPOINT')\n\nCSRF_TRUSTED_ORIGINS = get_env('CSRF_TRUSTED_ORIGINS', [])\nif CSRF_TRUSTED_ORIGINS:\n    CSRF_TRUSTED_ORIGINS = CSRF_TRUSTED_ORIGINS.split(',')\n\nREAL_HOSTNAME = os.getenv('HOSTNAME')  # we have to use getenv, because we don't use LABEL_STUDIO_ prefix\nGCS_CLOUD_STORAGE_FORCE_DEFAULT_CREDENTIALS = get_bool_env('GCS_CLOUD_STORAGE_FORCE_DEFAULT_CREDENTIALS', False)\nPUBLIC_API_DOCS = get_bool_env('PUBLIC_API_DOCS', False)\n\n# By default, we disallow filters with foreign keys in data manager for security reasons.\n# Add to this list (either here in code, or via the env) to allow specific filters that rely on foreign keys.\nDATA_MANAGER_FILTER_ALLOWLIST = list(\n    set(get_env_list('DATA_MANAGER_FILTER_ALLOWLIST') + ['updated_by__active_organization'])\n)\n", "import os\nfrom typing import Callable, Optional, Sequence, TypeVar\n\nfrom rest_framework.exceptions import ValidationError\n\n\ndef cast_bool_from_str(value):\n    if isinstance(value, str):\n        if value.lower() in ['true', 'yes', 'on', '1']:\n            value = True\n        elif value.lower() in ['false', 'no', 'not', 'off', '0']:\n            value = False\n        else:\n            raise ValueError(f'Incorrect bool value \"{value}\". ' f'It should be one of [1, 0, true, false, yes, no]')\n    return value\n\n\ndef bool_from_request(params, key, default):\n    \"\"\"Get boolean value from request GET, POST, etc\n\n    :param params: dict POST, GET, etc\n    :param key: key to find\n    :param default: default value\n    :return: boolean\n    \"\"\"\n    value = params.get(key, default)\n\n    try:\n        if isinstance(value, str):\n            value = cast_bool_from_str(value)\n        return bool(int(value))\n    except Exception as e:\n        raise ValidationError({key: str(e)})\n\n\ndef int_from_request(params, key, default):\n    \"\"\"Get integer from request GET, POST, etc\n\n    :param params: dict POST, GET, etc\n    :param key: key to find\n    :param default: default value\n    :return: int\n    \"\"\"\n    value = params.get(key, default)\n\n    # str\n    if isinstance(value, str):\n        try:\n            return int(value)\n        except ValueError:\n            raise ValidationError({key: f'Incorrect value in key \"{key}\" = \"{value}\". It should be digit string.'})\n        except Exception as e:\n            raise ValidationError({key: str(e)})\n    # int\n    elif isinstance(value, int):\n        return value\n    # other\n    else:\n        raise ValidationError(\n            {key: f'Incorrect value type in key \"{key}\" = \"{value}\". ' f'It should be digit string or integer.'}\n        )\n\n\ndef float_from_request(params, key, default):\n    \"\"\"Get float from request GET, POST, etc\n\n    :param params: dict POST, GET, etc\n    :param key: key to find\n    :param default: default value\n    :return: float\n    \"\"\"\n    value = params.get(key, default)\n\n    # str\n    if isinstance(value, str):\n        try:\n            return float(value)\n        except ValueError:\n            raise ValidationError({key: f'Incorrect value in key \"{key}\" = \"{value}\". It should be digit string.'})\n    # float\n    elif isinstance(value, float) or isinstance(value, int):\n        return float(value)\n    # other\n    else:\n        raise ValidationError(\n            {key: f'Incorrect value type in key \"{key}\" = \"{value}\". ' f'It should be digit string or float.'}\n        )\n\n\ndef list_of_strings_from_request(params, key, default):\n    \"\"\"Get list of strings from request GET, POST, etc\n\n    :param params: dict POST, GET, etc\n    :param key: key to find\n    :param default: default value\n    :return: float\n    \"\"\"\n    value = params.get(key, default)\n    if value is None:\n        return\n    splitters = (',', ';', '|')\n    # str\n    if isinstance(value, str):\n        for splitter in splitters:\n            if splitter in value:\n                return value.split(splitter)\n        return [value]\n    else:\n        raise ValidationError(\n            {key: f'Incorrect value type in key \"{key}\" = \"{value}\". ' f'It should be digit string or float.'}\n        )\n\n\ndef get_env(name, default=None, is_bool=False):\n    for env_key in ['LABEL_STUDIO_' + name, 'HEARTEX_' + name, name]:\n        value = os.environ.get(env_key)\n        if value is not None:\n            if is_bool:\n                return bool_from_request(os.environ, env_key, default)\n            else:\n                return value\n    return default\n\n\ndef get_bool_env(key, default):\n    return get_env(key, default, is_bool=True)\n\n\nT = TypeVar('T')\n\n\ndef get_env_list(\n    key: str, default: Optional[Sequence[T]] = None, value_transform: Callable[[str], T] = str\n) -> Sequence[T]:\n    \"\"\"\n    \"foo,bar,baz\" in env variable => [\"foo\", \"bar\", \"baz\"] in python.\n    Use value_transform to convert the strings to any other type.\n    \"\"\"\n    value = get_env(key)\n    if not value:\n        if default is None:\n            return []\n        return default\n\n    return [value_transform(el) for el in value.split(',')]\n\n\ndef get_env_list_int(key, default=None) -> Sequence[int]:\n    return get_env_list(key, default=default, value_transform=int)\n\n\ndef get_all_env_with_prefix(prefix=None, is_bool=True, default_value=None):\n    out = {}\n    for key in os.environ.keys():\n        if not key.startswith(prefix):\n            continue\n        if is_bool:\n            out[key] = bool_from_request(os.environ, key, default_value)\n        else:\n            out[key] = os.environ[key]\n    return out\n", "\"\"\"This file and its contents are licensed under the Apache License 2.0. Please see the included NOTICE for copyright information and LICENSE for a copy of the license.\n\"\"\"\nimport logging\nfrom collections import OrderedDict\nfrom typing import Tuple\nfrom urllib.parse import unquote\n\nimport ujson as json\nfrom core.feature_flags import flag_set\nfrom core.utils.common import int_from_request\nfrom data_manager.models import View\nfrom data_manager.prepare_params import PrepareParams\nfrom django.conf import settings\nfrom rest_framework.generics import get_object_or_404\nfrom tasks.models import Task\n\nTASKS = 'tasks:'\nlogger = logging.getLogger(__name__)\n\n\nclass DataManagerException(Exception):\n    pass\n\n\ndef get_all_columns(project, *_):\n    \"\"\"Make columns info for the frontend data manager\"\"\"\n    result = {'columns': []}\n\n    # frontend uses MST data model, so we need two directional referencing parent <-> child\n    task_data_children = []\n    i = 0\n\n    data_types = OrderedDict()\n\n    # add data types from config again\n    project_data_types = {}\n    for key, value in project.data_types.items():\n        # skip keys from Repeater tag, because we already have its base data,\n        # e.g.: skip 'image[{{idx}}]' because we have 'image' list already\n        if '[' not in key:\n            project_data_types[key] = value\n    data_types.update(project_data_types.items())\n\n    # all data types from import data\n    all_data_columns = project.summary.all_data_columns\n    if all_data_columns:\n        data_types.update({key: 'Unknown' for key in all_data_columns if key not in data_types})\n\n    # remove $undefined$ if there is one type at least in labeling config, because it will be resolved automatically\n    if len(project_data_types) > 0:\n        data_types.pop(settings.DATA_UNDEFINED_NAME, None)\n\n    for key, data_type in list(data_types.items()):  # make data types from labeling config first\n        column = {\n            'id': key,\n            'title': key if key != settings.DATA_UNDEFINED_NAME else 'data',\n            'type': data_type if data_type in ['Image', 'Audio', 'AudioPlus', 'Video', 'Unknown'] else 'String',\n            'target': 'tasks',\n            'parent': 'data',\n            'visibility_defaults': {\n                'explore': True,\n                'labeling': key in project_data_types or key == settings.DATA_UNDEFINED_NAME,\n            },\n            'project_defined': True,\n        }\n        result['columns'].append(column)\n        task_data_children.append(column['id'])\n        i += 1\n\n    # --- Data root ---\n    data_root = {\n        'id': 'data',\n        'title': 'data',\n        'type': 'List',\n        'target': 'tasks',\n        'children': task_data_children,\n        'project_defined': False,\n    }\n\n    result['columns'] += [\n        # --- Tasks ---\n        {\n            'id': 'id',\n            'title': 'ID',\n            'type': 'Number',\n            'help': 'Task ID',\n            'target': 'tasks',\n            'visibility_defaults': {'explore': True, 'labeling': False},\n            'project_defined': False,\n        }\n    ]\n\n    if flag_set('ff_back_2070_inner_id_12052022_short', user=project.organization.created_by):\n        result['columns'] += [\n            {\n                'id': 'inner_id',\n                'title': 'Inner ID',\n                'type': 'Number',\n                'help': 'Internal task ID starting from 1 for the current project',\n                'target': 'tasks',\n                'visibility_defaults': {'explore': False, 'labeling': False},\n                'project_defined': False,\n            }\n        ]\n\n    if flag_set('fflag_fix_back_lsdv_4648_annotator_filter_29052023_short', user=project.organization.created_by):\n        project_members = project.all_members.values_list('id', flat=True)\n    else:\n        project_members = project.organization.members.values_list('user__id', flat=True)\n\n    result['columns'] += [\n        {\n            'id': 'completed_at',\n            'title': 'Completed',\n            'type': 'Datetime',\n            'target': 'tasks',\n            'help': 'Last annotation date',\n            'visibility_defaults': {'explore': True, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'total_annotations',\n            'title': 'Annotations',\n            'type': 'Number',\n            'target': 'tasks',\n            'help': 'Total annotations per task',\n            'visibility_defaults': {'explore': True, 'labeling': True},\n            'project_defined': False,\n        },\n        {\n            'id': 'cancelled_annotations',\n            'title': 'Cancelled',\n            'type': 'Number',\n            'target': 'tasks',\n            'help': 'Total cancelled (skipped) annotations',\n            'visibility_defaults': {'explore': True, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'total_predictions',\n            'title': 'Predictions',\n            'type': 'Number',\n            'target': 'tasks',\n            'help': 'Total predictions per task',\n            'visibility_defaults': {'explore': True, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'annotators',\n            'title': 'Annotated by',\n            'type': 'List',\n            'target': 'tasks',\n            'help': 'All users who completed the task',\n            'schema': {'items': project_members},\n            'visibility_defaults': {'explore': True, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'annotations_results',\n            'title': 'Annotation results',\n            'type': 'String',\n            'target': 'tasks',\n            'help': 'Annotation results stacked over all annotations',\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'annotations_ids',\n            'title': 'Annotation IDs',\n            'type': 'String',\n            'target': 'tasks',\n            'help': 'Annotation IDs stacked over all annotations',\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'predictions_score',\n            'title': 'Prediction score',\n            'type': 'Number',\n            'target': 'tasks',\n            'help': 'Average prediction score over all task predictions',\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'predictions_model_versions',\n            'title': 'Prediction model versions',\n            'type': 'List',\n            'target': 'tasks',\n            'help': 'Model versions aggregated over all predictions',\n            'schema': {'items': project.get_model_versions()},\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'predictions_results',\n            'title': 'Prediction results',\n            'type': 'String',\n            'target': 'tasks',\n            'help': 'Prediction results stacked over all predictions',\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'file_upload',\n            'title': 'Upload filename',\n            'type': 'String',\n            'target': 'tasks',\n            'help': 'Filename of uploaded file',\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'storage_filename',\n            'title': 'Storage filename',\n            'type': 'String',\n            'target': 'tasks',\n            'help': 'Filename from import storage',\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'created_at',\n            'title': 'Created at',\n            'type': 'Datetime',\n            'target': 'tasks',\n            'help': 'Task creation time',\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'updated_at',\n            'title': 'Updated at',\n            'type': 'Datetime',\n            'target': 'tasks',\n            'help': 'Task update time',\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'updated_by',\n            'title': 'Updated by',\n            'type': 'List',\n            'target': 'tasks',\n            'help': 'User who did the last task update',\n            'schema': {'items': project_members},\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'avg_lead_time',\n            'title': 'Lead Time',\n            'type': 'Number',\n            'help': 'Average lead time over all annotations (seconds)',\n            'target': 'tasks',\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n        {\n            'id': 'draft_exists',\n            'title': 'Drafts',\n            'type': 'Boolean',\n            'help': 'True if at least one draft exists for the task',\n            'target': 'tasks',\n            'visibility_defaults': {'explore': False, 'labeling': False},\n            'project_defined': False,\n        },\n    ]\n\n    result['columns'].append(data_root)\n\n    return result\n\n\ndef get_prepare_params(request, project):\n    \"\"\"This function extract prepare_params from\n    * view_id if it's inside of request data\n    * selectedItems, filters, ordering if they are in request and there is no view id\n    \"\"\"\n    # use filters and selected items from view\n    view_id = int_from_request(request.GET, 'view', 0) or int_from_request(request.data, 'view', 0)\n    if view_id > 0:\n        view = get_object_or_404(View, pk=view_id)\n        if view.project.pk != project.pk:\n            raise DataManagerException('Project and View mismatch')\n        prepare_params = view.get_prepare_tasks_params(add_selected_items=True)\n        prepare_params.request = request\n\n    # use filters and selected items from request if it's specified\n    else:\n        # query arguments from url\n        if 'query' in request.GET:\n            data = json.loads(unquote(request.GET['query']))\n        # data payload from body\n        else:\n            data = request.data\n\n        selected = data.get('selectedItems', {'all': True, 'excluded': []})\n        if not isinstance(selected, dict):\n            raise DataManagerException(\n                'selectedItems must be dict: {\"all\": [true|false], ' '\"excluded | included\": [...task_ids...]}'\n            )\n        filters = data.get('filters', None)\n        ordering = data.get('ordering', [])\n        prepare_params = PrepareParams(\n            project=project.id, selectedItems=selected, data=data, filters=filters, ordering=ordering, request=request\n        )\n    return prepare_params\n\n\ndef get_prepared_queryset(request, project):\n    prepare_params = get_prepare_params(request, project)\n    queryset = Task.prepared.only_filtered(prepare_params=prepare_params)\n    return queryset\n\n\ndef evaluate_predictions(tasks):\n    \"\"\"Call ML backend for prediction evaluation of the task queryset\"\"\"\n    if not tasks:\n        return\n\n    project = tasks[0].project\n\n    for ml_backend in project.ml_backends.all():\n        # tasks = tasks.filter(~Q(predictions__model_version=ml_backend.model_version))\n        ml_backend.predict_tasks(tasks)\n\n\ndef filters_ordering_selected_items_exist(data):\n    return data.get('filters') or data.get('ordering') or data.get('selectedItems')\n\n\ndef custom_filter_expressions(*args, **kwargs):\n    pass\n\n\ndef preprocess_filter(_filter, *_):\n    return _filter\n\n\ndef preprocess_field_name(raw_field_name, only_undefined_field=False) -> Tuple[str, bool]:\n    \"\"\"Transform a field name (as specified in the datamanager views endpoint) to\n    a django ORM field name. Also handle dotted accesses to task.data.\n\n    Edit with care; it's critical that this function not be changed in ways that\n    introduce vulnerabilities in the vein of the ORM Leak (see #5012). In particular\n    it is not advisable to use `replace` or other calls that replace all instances\n    of a string within this function.\n\n    Returns: Django ORM field name: str, Sort is ascending: bool\n    \"\"\"\n\n    field_name = raw_field_name\n    ascending = True\n\n    # Descending marker `-` may come at the beginning of the string\n    if field_name.startswith('-'):\n        ascending = False\n        field_name = field_name[1:]\n\n    # For security reasons, these must only be removed when they fall at the beginning of the string (or after `-`).\n    optional_prefixes = ['filter:', 'tasks:']\n    for prefix in optional_prefixes:\n        if field_name.startswith(prefix):\n            field_name = field_name[len(prefix) :]\n\n    # Descending marker may also come after other prefixes. Double negative is not allowed.\n    if ascending and field_name.startswith('-'):\n        ascending = False\n        field_name = field_name[1:]\n\n    if field_name.startswith('data.'):\n        if only_undefined_field:\n            field_name = f'data__{settings.DATA_UNDEFINED_NAME}'\n        else:\n            field_name = field_name.replace('data.', 'data__')\n    return field_name, ascending\n", "\"\"\"This file and its contents are licensed under the Apache License 2.0. Please see the included NOTICE for copyright information and LICENSE for a copy of the license.\n\"\"\"\nimport os\n\nimport ujson as json\nfrom data_manager.models import Filter, FilterGroup, View\nfrom django.conf import settings\nfrom django.db import transaction\nfrom projects.models import Project\nfrom rest_framework import serializers\nfrom tasks.models import Task\nfrom tasks.serializers import AnnotationDraftSerializer, AnnotationSerializer, PredictionSerializer, TaskSerializer\n\nfrom label_studio.core.utils.common import round_floats\n\n\nclass FilterSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Filter\n        fields = '__all__'\n\n    def validate_column(self, column: str) -> str:\n        \"\"\"\n        Ensure that the passed filter expression starts with 'filter:tasks:' and contains\n        no foreign key traversals. This means either the filter expression contains no '__'\n        substrings, or that it's the task.data json field that's accessed.\n\n        Users depending on foreign key traversals in views can allowlist them via the\n        DATA_MANAGER_FILTER_ALLOWLIST setting in the env.\n\n        Edit with care. The validations below are critical for security.\n        \"\"\"\n\n        column_copy = column\n\n        # We may support 'filter:annotations:' in the future, but we don't as of yet.\n        required_prefix = 'filter:tasks:'\n        optional_prefix = '-'\n\n        if not column_copy.startswith(required_prefix):\n            raise serializers.ValidationError(f'Filter \"{column}\" should start with \"{required_prefix}\"')\n\n        column_copy = column_copy[len(required_prefix) :]\n\n        if column_copy.startswith(optional_prefix):\n            column_copy = column_copy[len(optional_prefix) :]\n\n        if column_copy.startswith('data.'):\n            # Allow underscores if the filter is based on the `task.data` JSONField, because these don't leverage foreign keys.\n            return column\n\n        # Specific filters relying on foreign keys can be allowlisted\n        if column_copy in settings.DATA_MANAGER_FILTER_ALLOWLIST:\n            return column\n\n        # But in general, we don't allow foreign keys\n        if '__' in column_copy:\n            raise serializers.ValidationError(\n                f'\"__\" is not generally allowed in filters. Consider asking your administrator to add \"{column_copy}\" '\n                'to DATA_MANAGER_FILTER_ALLOWLIST, but note that some filter expressions may pose a security risk'\n            )\n\n        return column\n\n\nclass FilterGroupSerializer(serializers.ModelSerializer):\n    filters = FilterSerializer(many=True)\n\n    class Meta:\n        model = FilterGroup\n        fields = '__all__'\n\n\nclass ViewSerializer(serializers.ModelSerializer):\n    filter_group = FilterGroupSerializer(required=False)\n\n    class Meta:\n        model = View\n        fields = '__all__'\n\n    def to_internal_value(self, data):\n        \"\"\"\n        map old filters structure to models\n        \"filters\": {  ===> FilterGroup model\n            \"conjunction\": \"or\",\n            \"items\":[  ===> \"filters\" in FilterGroup\n                 {  ==> Filter model\n                   \"filter\":\"filter:tasks:data.image\", ==> column\n                    \"operator\":\"contains\",\n                    \"type\":\"Image\",\n                    \"value\": <string: \"XXX\" | int: 123 | dict | list>\n                 },\n                  {\n                    \"filter\":\"filter:tasks:data.image\",\n                    \"operator\":\"equal\",\n                    \"type\":\"Image\",\n                    \"value\": <string: \"XXX\" | int: 123 | dict | list>\n                 }\n              ]\n           }\n        }\n        \"\"\"\n        _data = data.get('data', {})\n\n        filters = _data.pop('filters', {})\n        conjunction = filters.get('conjunction')\n        if 'filter_group' not in data and conjunction:\n            data['filter_group'] = {'conjunction': conjunction, 'filters': []}\n            if 'items' in filters:\n                for f in filters['items']:\n                    data['filter_group']['filters'].append(\n                        {\n                            'column': f.get('filter', ''),\n                            'operator': f.get('operator', ''),\n                            'type': f.get('type', ''),\n                            'value': f.get('value', {}),\n                        }\n                    )\n\n        ordering = _data.pop('ordering', {})\n        data['ordering'] = ordering\n\n        return super().to_internal_value(data)\n\n    def to_representation(self, instance):\n        result = super().to_representation(instance)\n        filters = result.pop('filter_group', {})\n        if filters:\n            filters['items'] = []\n            filters.pop('filters', [])\n            filters.pop('id', None)\n\n            for f in instance.filter_group.filters.order_by('index'):\n                filters['items'].append(\n                    {\n                        'filter': f.column,\n                        'operator': f.operator,\n                        'type': f.type,\n                        'value': f.value,\n                    }\n                )\n            result['data']['filters'] = filters\n\n        selected_items = result.pop('selected_items', {})\n        if selected_items:\n            result['data']['selectedItems'] = selected_items\n\n        ordering = result.pop('ordering', {})\n        if ordering:\n            result['data']['ordering'] = ordering\n        return result\n\n    @staticmethod\n    def _create_filters(filter_group, filters_data):\n        filter_index = 0\n        for filter_data in filters_data:\n            filter_data['index'] = filter_index\n            filter_group.filters.add(Filter.objects.create(**filter_data))\n            filter_index += 1\n\n    def create(self, validated_data):\n        with transaction.atomic():\n            filter_group_data = validated_data.pop('filter_group', None)\n            if filter_group_data:\n                filters_data = filter_group_data.pop('filters', [])\n                filter_group = FilterGroup.objects.create(**filter_group_data)\n\n                self._create_filters(filter_group=filter_group, filters_data=filters_data)\n\n                validated_data['filter_group_id'] = filter_group.id\n            view = self.Meta.model.objects.create(**validated_data)\n\n            return view\n\n    def update(self, instance, validated_data):\n        with transaction.atomic():\n            filter_group_data = validated_data.pop('filter_group', None)\n            if filter_group_data:\n                filters_data = filter_group_data.pop('filters', [])\n\n                filter_group = instance.filter_group\n                if filter_group is None:\n                    filter_group = FilterGroup.objects.create(**filter_group_data)\n\n                conjunction = filter_group_data.get('conjunction')\n                if conjunction and filter_group.conjunction != conjunction:\n                    filter_group.conjunction = conjunction\n                    filter_group.save()\n\n                filter_group.filters.clear()\n                self._create_filters(filter_group=filter_group, filters_data=filters_data)\n\n            ordering = validated_data.pop('ordering', None)\n            if ordering and ordering != instance.ordering:\n                instance.ordering = ordering\n                instance.save()\n\n            if validated_data['data'] != instance.data:\n                instance.data = validated_data['data']\n                instance.save()\n\n            return instance\n\n\nclass DataManagerTaskSerializer(TaskSerializer):\n    predictions = serializers.SerializerMethodField(required=False, read_only=True)\n    annotations = AnnotationSerializer(required=False, many=True, default=[], read_only=True)\n    drafts = serializers.SerializerMethodField(required=False, read_only=True)\n    annotators = serializers.SerializerMethodField(required=False, read_only=True)\n\n    inner_id = serializers.IntegerField(required=False)\n    cancelled_annotations = serializers.IntegerField(required=False)\n    total_annotations = serializers.IntegerField(required=False)\n    total_predictions = serializers.IntegerField(required=False)\n    completed_at = serializers.DateTimeField(required=False)\n    annotations_results = serializers.SerializerMethodField(required=False)\n    predictions_results = serializers.SerializerMethodField(required=False)\n    predictions_score = serializers.FloatField(required=False)\n    file_upload = serializers.SerializerMethodField(required=False)\n    storage_filename = serializers.SerializerMethodField(required=False)\n    annotations_ids = serializers.SerializerMethodField(required=False)\n    predictions_model_versions = serializers.SerializerMethodField(required=False)\n    avg_lead_time = serializers.FloatField(required=False)\n    draft_exists = serializers.BooleanField(required=False)\n    updated_by = serializers.SerializerMethodField(required=False, read_only=True)\n\n    CHAR_LIMITS = 500\n\n    class Meta:\n        model = Task\n        ref_name = 'data_manager_task_serializer'\n        fields = '__all__'\n        expandable_fields = {'annotations': (AnnotationSerializer, {'many': True})}\n\n    def to_representation(self, obj):\n        \"\"\"Dynamically manage including of some fields in the API result\"\"\"\n        ret = super(DataManagerTaskSerializer, self).to_representation(obj)\n        if not self.context.get('annotations'):\n            ret.pop('annotations', None)\n        if not self.context.get('predictions'):\n            ret.pop('predictions', None)\n        return ret\n\n    def _pretty_results(self, task, field, unique=False):\n        if not hasattr(task, field) or getattr(task, field) is None:\n            return ''\n\n        result = getattr(task, field)\n        if isinstance(result, str):\n            output = result\n            if unique:\n                output = list(set(output.split(',')))\n                output = ','.join(output)\n\n        elif isinstance(result, int):\n            output = str(result)\n        else:\n            result = [r for r in result if r is not None]\n            if unique:\n                result = list(set(result))\n            result = round_floats(result)\n            output = json.dumps(result, ensure_ascii=False)[1:-1]  # remove brackets [ ]\n\n        return output[: self.CHAR_LIMITS].replace(',\"', ', \"').replace('],[', '] [').replace('\"', '')\n\n    def get_annotations_results(self, task):\n        return self._pretty_results(task, 'annotations_results')\n\n    def get_predictions_results(self, task):\n        return self._pretty_results(task, 'predictions_results')\n\n    def get_predictions(self, task):\n        return PredictionSerializer(task.predictions, many=True, default=[], read_only=True).data\n\n    @staticmethod\n    def get_file_upload(task):\n        if hasattr(task, 'file_upload_field'):\n            file_upload = task.file_upload_field\n            return os.path.basename(task.file_upload_field) if file_upload else None\n        return None\n\n    @staticmethod\n    def get_storage_filename(task):\n        return task.storage_filename\n\n    @staticmethod\n    def get_updated_by(obj):\n        return [{'user_id': obj.updated_by_id}] if obj.updated_by_id else []\n\n    @staticmethod\n    def get_annotators(obj):\n        if not hasattr(obj, 'annotators'):\n            return []\n\n        annotators = obj.annotators\n        if not annotators:\n            return []\n        if isinstance(annotators, str):\n            annotators = [int(v) for v in annotators.split(',')]\n\n        annotators = list(set(annotators))\n        annotators = [a for a in annotators if a is not None]\n        return annotators if hasattr(obj, 'annotators') and annotators else []\n\n    def get_annotations_ids(self, task):\n        return self._pretty_results(task, 'annotations_ids', unique=True)\n\n    def get_predictions_model_versions(self, task):\n        return self._pretty_results(task, 'predictions_model_versions', unique=True)\n\n    def get_drafts_serializer(self):\n        return AnnotationDraftSerializer\n\n    def get_drafts_queryset(self, user, drafts):\n        \"\"\"Get all user's draft\"\"\"\n        return drafts.filter(user=user)\n\n    def get_drafts(self, task):\n        \"\"\"Return drafts only for the current user\"\"\"\n        # it's for swagger documentation\n        if not isinstance(task, Task) or not self.context.get('drafts'):\n            return []\n\n        drafts = task.drafts\n        if 'request' in self.context and hasattr(self.context['request'], 'user'):\n            user = self.context['request'].user\n            drafts = self.get_drafts_queryset(user, drafts)\n\n        serializer_class = self.get_drafts_serializer()\n        return serializer_class(drafts, many=True, read_only=True, default=True, context=self.context).data\n\n\nclass SelectedItemsSerializer(serializers.Serializer):\n    all = serializers.BooleanField()\n    included = serializers.ListField(child=serializers.IntegerField(), required=False)\n    excluded = serializers.ListField(child=serializers.IntegerField(), required=False)\n\n    def validate(self, data):\n        if data['all'] is True and data.get('included'):\n            raise serializers.ValidationError('included not allowed with all==true')\n        if data['all'] is False and data.get('excluded'):\n            raise serializers.ValidationError('excluded not allowed with all==false')\n\n        view = self.context.get('view')\n        request = self.context.get('request')\n        if view and request and request.method in ('PATCH', 'DELETE'):\n            all_value = view.selected_items.get('all')\n            if all_value and all_value != data['all']:\n                raise serializers.ValidationError('changing all value possible only with POST method')\n\n        return data\n\n\nclass ViewResetSerializer(serializers.Serializer):\n    project = serializers.PrimaryKeyRelatedField(queryset=Project.objects.all())\n", "---\ntest_name: tasks-all-fields-postgre\nstrict: false\nmarks:\n  - usefixtures:\n      - django_live_url\n  - skipif: \"'default' not in '{tavern.env_vars.DJANGO_DB}'\"\nstages:\n\n  - id: signup\n    type: ref\n\n  - id: create_project\n    name: create_project\n    request:\n      data:\n        title: Test Draft 1\n        show_collab_predictions: true\n      method: POST\n      url: '{django_live_url}/api/projects'\n    response:\n      save:\n        json:\n          project_pk: id\n          created_by: created_by.id\n      status_code: 201\n\n  - name: create_filter_tasks\n    request:\n      files:\n        json_file: tests/data_manager/tasks_annotations_predictions.json\n      headers:\n        content-type: multipart/form-data\n      method: POST\n      url: '{django_live_url}/api/projects/{project_pk}/import'\n    response:\n      json:\n        annotation_count: 4\n        prediction_count: 3\n        task_count: 6\n      status_code: 201\n\n  - name: setup_views\n    request:\n      method: POST\n      url: '{django_live_url}/api/dm/views/?project={project_pk}'\n      json: {\n        \"data\": {\n          \"filters\": {\n            \"conjunction\": \"or\",\n            \"items\": [\n              {\n                \"filter\": \"filter:tasks:data.text\",\n                \"operator\": \"equal\",\n                \"type\": \"String\",\n                \"value\": \"Test example phrase 1\"\n              },\n              {\n                \"filter\": \"filter:tasks:data.text\",\n                \"operator\": \"contains\",\n                \"type\": \"String\",\n                \"value\": \"x\"\n              },\n              {\n                \"filter\": \"filter:tasks:annotations_results\",\n                \"operator\": \"contains\",\n                \"type\": \"String\",\n                \"value\": \"TESTING\"\n              },\n              {\n                \"filter\": \"filter:tasks:predictions_results\",\n                \"operator\": \"contains\",\n                \"type\": \"String\",\n                \"value\": \"PREDICTIONS\"\n              }\n            ]\n          },\n          \"ordering\": [\n            \"tasks:data.text\"\n          ]\n        },\n        \"project\": !int \"{project_pk}\"\n      }\n    response:\n      save:\n        json:\n          view: \"@\"\n      status_code: 201\n\n  - name: get_tasks\n    request:\n      method: GET\n      url: '{django_live_url}/api/tasks?fields=all&view={view.id}'\n    response:\n      status_code: 200\n      verify_response_with:\n        function: label_studio.tests.utils:save_response\n      json: {\n        \"total_annotations\": 4,\n        \"total_predictions\": 3,\n        \"total\": 4,\n        \"tasks\": [\n        {\n          \"cancelled_annotations\": 0,\n\n          \"annotations_results\": \"\",\n          \"data\": {\n            \"text\": \"opop\",\n            \"int_field\": 42\n          },\n\n          \"predictions_results\": !raw \"[{type:choices, value:{choices:[class_PREDICTIONS_TESTING]}, to_name:text, from_name:text_class}]\",\n          \"predictions_score\": null,\n          \"total_annotations\": 0,\n          \"total_predictions\": 1,\n          \"annotations_ids\": \"\",\n          \"annotations\": [],\n          \"predictions\": [\n          {\n            \"model_version\": \"undefined\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"result\": [\n            {\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_PREDICTIONS_TESTING\"\n                ]\n              },\n              \"to_name\": \"text\",\n              \"from_name\": \"text_class\"\n            }\n            ],\n            \"score\": null,\n            \"cluster\": null,\n            \"neighbors\": null,\n            \"mislabeling\": 0.0\n          }\n          ],\n          \"drafts\": [],\n          \"annotators\": [],\n          \"avg_lead_time\": null\n\n        },\n        {\n          \"cancelled_annotations\": 0,\n\n          \"annotations_results\": !raw \"[{type:choices, value:{choices:[class_A]}, to_name:text, from_name:text_class}]\",\n          \"data\": {\n            \"text\": \"Test example phrase 1\",\n            \"int_field\": 1\n          },\n\n          \"predictions_results\": !raw \"[{type:choices, value:{choices:[class_A]}, to_name:text, from_name:text_class}]\",\n          \"predictions_score\": null,\n          \"total_annotations\": 1,\n          \"total_predictions\": 1,\n          \"annotations_ids\": !anystr \"\",\n          \"annotations\": [\n          {\n\n            \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"completed_by\": !int \"{created_by}\",\n            \"result\": [\n            {\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_A\"\n                ]\n              },\n              \"to_name\": \"text\",\n              \"from_name\": \"text_class\"\n            }\n            ],\n            \"was_cancelled\": false,\n            \"ground_truth\": true,\n            \"lead_time\": 3.0\n          }\n          ],\n          \"predictions\": [\n          {\n            \"model_version\": \"model_version_A\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"result\": [\n            {\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_A\"\n                ]\n              },\n              \"to_name\": \"text\",\n              \"from_name\": \"text_class\"\n            }\n            ],\n            \"score\": null,\n            \"cluster\": null,\n            \"neighbors\": null,\n            \"mislabeling\": 0.0\n          }\n          ],\n          \"drafts\": [],\n          \"annotators\": [\n            !int \"{created_by}\"\n          ],\n          \"avg_lead_time\": 3.0\n        },\n        {\n          \"cancelled_annotations\": 0,\n\n          \"annotations_results\": !anystr \"\",\n          \"data\": {\n            \"text\": \"x2\",\n            \"int_field\": 20\n          },\n          \"predictions_results\": !anystr \"\",\n          \"predictions_score\": null,\n          \"total_annotations\": 2,\n          \"total_predictions\": 1,\n          \"annotations_ids\": !anystr \"\",\n          \"annotations\": [\n          {\n            \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"result\": [\n            {\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_A\"\n                ]\n              },\n              \"to_name\": \"text\",\n              \"from_name\": \"text_class\"\n            }\n            ],\n            \"was_cancelled\": false,\n            \"ground_truth\": true,\n            \"lead_time\": 3.0\n          },\n          {\n            \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"result\": [\n            {\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_A\"\n                ]\n              },\n              \"to_name\": \"text\",\n              \"from_name\": \"text_class\"\n            }\n            ],\n            \"was_cancelled\": false,\n            \"ground_truth\": true,\n            \"lead_time\": 5.0\n          }\n          ],\n          \"predictions\": [\n          {\n\n            \"model_version\": \"model_version_A\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"result\": [\n            {\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_A\"\n                ]\n              },\n              \"to_name\": \"text\",\n              \"from_name\": \"text_class\"\n            }\n            ],\n            \"score\": null,\n            \"cluster\": null,\n            \"neighbors\": null,\n            \"mislabeling\": 0.0\n          }\n          ],\n          \"drafts\": [],\n          \"annotators\": [\n            !int \"{created_by}\"\n          ],\n          \"avg_lead_time\": 4.0\n        },\n        {\n          \"cancelled_annotations\": 0,\n\n\n          \"annotations_results\": !raw \"[{type:choices, value:{choices:[class_TESTING]}, to_name:text, from_name:text_class}]\",\n          \"data\": {\n            \"text\": \"yoyo\",\n            \"int_field\": \"99\"\n          },\n\n          \"predictions_results\": \"\",\n          \"predictions_score\": null,\n          \"total_annotations\": 1,\n          \"total_predictions\": 0,\n          \"annotations_ids\": !anystr \"\",\n          \"annotations\": [\n          {\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"completed_by\": !int \"{created_by}\",\n            \"result\": [\n            {\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_TESTING\"\n                ]\n              },\n              \"to_name\": \"text\",\n              \"from_name\": \"text_class\"\n            }\n            ],\n            \"was_cancelled\": false,\n            \"ground_truth\": true,\n            \"lead_time\": null\n\n          }\n          ],\n          \"predictions\": [],\n          \"drafts\": [],\n\n          \"annotators\": [\n            !int \"{created_by}\"\n          ]\n\n        }\n        ]\n      }\n\n---\ntest_name: tasks-all-fields-sqlite\nstrict: false\nmarks:\n  - skipif: \"'default' in '{tavern.env_vars.DJANGO_DB}'\"\n  - usefixtures:\n      - django_live_url\nstages:\n\n  - id: signup\n    type: ref\n\n  - id: create_project\n    name: create_project\n    request:\n      data:\n        title: Test Draft 1\n        show_collab_predictions: true\n      method: POST\n      url: '{django_live_url}/api/projects'\n    response:\n      save:\n        json:\n          project_pk: id\n          created_by: created_by.id\n      status_code: 201\n\n  - name: create_filter_tasks\n    request:\n      files:\n        json_file: tests/data_manager/tasks_annotations_predictions.json\n      headers:\n        content-type: multipart/form-data\n      method: POST\n      url: '{django_live_url}/api/projects/{project_pk}/import'\n    response:\n      json:\n        annotation_count: 4\n        prediction_count: 3\n        task_count: 6\n      status_code: 201\n\n  - name: setup_views\n    request:\n      method: POST\n      url: '{django_live_url}/api/dm/views/?project={project_pk}'\n      json: {\n        \"data\": {\n          \"filters\": {\n            \"conjunction\": \"or\",\n            \"items\": [\n              {\n                \"filter\": \"filter:tasks:data.text\",\n                \"operator\": \"equal\",\n                \"type\": \"String\",\n                \"value\": \"Test example phrase 1\"\n              },\n              {\n                \"filter\": \"filter:tasks:data.text\",\n                \"operator\": \"contains\",\n                \"type\": \"String\",\n                \"value\": \"x\"\n              },\n              {\n                \"filter\": \"filter:tasks:annotations_results\",\n                \"operator\": \"contains\",\n                \"type\": \"String\",\n                \"value\": \"TESTING\"\n              },\n              {\n                \"filter\": \"filter:tasks:predictions_results\",\n                \"operator\": \"contains\",\n                \"type\": \"String\",\n                \"value\": \"PREDICTIONS\"\n              }\n            ]\n          },\n          \"ordering\": [\n            \"tasks:data.text\"\n          ]\n        },\n        \"project\": !int \"{project_pk}\"\n      }\n    response:\n      save:\n        json:\n          view: \"@\"\n      status_code: 201\n\n  - name: get_tasks\n    request:\n      method: GET\n      url: '{django_live_url}/api/tasks?fields=all&view={view.id}'\n    response:\n      status_code: 200\n      # verify_response_with:\n      #  function: label_studio.tests.utils:save_response\n      json:\n        {\n          \"total_annotations\": 4,\n          \"total_predictions\": 3,\n          \"total\": 4,\n          \"tasks\": [\n          {\n            \"cancelled_annotations\": 0,\n            \"annotations_results\": !raw \"[{from_name: text_class, to_name: text, type: choices, value: {choices: [class_A]}}]\",\n            \"data\": {\n              \"text\": \"Test example phrase 1\",\n              \"int_field\": 1\n            },\n            \"predictions_results\": !raw \"[{from_name: text_class, to_name: text, type: choices, value: {choices: [class_A]}}]\",\n            \"predictions_score\": null,\n            \"total_annotations\": 1,\n            \"total_predictions\": 1,\n            \"annotations_ids\": !anystr \"\",\n            \"annotations\": [\n            {\n\n              \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n              \"created_ago\": \"0\\u00a0minutes\",\n              \"completed_by\": !int \"{created_by}\",\n              \"result\": [\n              {\n                \"from_name\": \"text_class\",\n                \"to_name\": \"text\",\n                \"type\": \"choices\",\n                \"value\": {\n                  \"choices\": [\n                    \"class_A\"\n                  ]\n                }\n              }\n              ],\n              \"was_cancelled\": false,\n              \"ground_truth\": true,\n\n              \"lead_time\": 3.0\n\n            }\n            ],\n            \"predictions\": [\n            {\n\n              \"model_version\": \"model_version_A\",\n              \"created_ago\": \"0\\u00a0minutes\",\n              \"result\": [\n              {\n                \"from_name\": \"text_class\",\n                \"to_name\": \"text\",\n                \"type\": \"choices\",\n                \"value\": {\n                  \"choices\": [\n                    \"class_A\"\n                  ]\n                }\n              }\n              ],\n              \"score\": null,\n              \"cluster\": null,\n              \"neighbors\": null,\n              \"mislabeling\": 0.0,\n\n\n            }\n            ],\n            \"drafts\": [],\n            \"annotators\": [\n              !int \"{created_by}\"\n            ],\n            \"project\": !int \"{project_pk}\"\n          },\n          {\n            \"cancelled_annotations\": 0,\n            \"annotations_results\": \"\",\n            \"data\": {\n              \"int_field\": 42,\n              \"text\": \"opop\"\n            },\n            \"predictions_results\": !raw \"[{from_name: text_class, to_name: text, type: choices, value: {choices: [class_PREDICTIONS_TESTING]}}]\",\n            \"predictions_score\": null,\n            \"total_annotations\": 0,\n            \"total_predictions\": 1,\n            \"annotations_ids\": !anystr \"\",\n            \"annotations\": [],\n            \"predictions\": [\n            {\n\n              \"model_version\": \"undefined\",\n              \"created_ago\": \"0\\u00a0minutes\",\n              \"result\": [\n              {\n                \"from_name\": \"text_class\",\n                \"to_name\": \"text\",\n                \"type\": \"choices\",\n                \"value\": {\n                  \"choices\": [\n                    \"class_PREDICTIONS_TESTING\"\n                  ]\n                }\n              }\n              ],\n              \"score\": null,\n              \"cluster\": null,\n              \"neighbors\": null,\n              \"mislabeling\": 0.0,\n\n\n            }\n            ],\n            \"drafts\": [],\n            \"annotators\": [],\n            \"project\": !int \"{project_pk}\"\n          },\n          {\n            \"cancelled_annotations\": 0,\n            \"annotations_results\": !anystr \"\",\n            \"data\": {\n              \"int_field\": 20,\n              \"text\": \"x2\"\n            },\n            \"predictions_results\": !anystr \"\",\n            \"predictions_score\": null,\n            \"total_annotations\": 2,\n            \"total_predictions\": 1,\n            \"annotations_ids\": !anystr \"\",\n            \"annotations\": [\n            {\n\n              \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n              \"created_ago\": \"0\\u00a0minutes\",\n              \"completed_by\": !int \"{created_by}\",\n              \"result\": [\n              {\n                \"from_name\": \"text_class\",\n                \"to_name\": \"text\",\n                \"type\": \"choices\",\n                \"value\": {\n                  \"choices\": [\n                    \"class_A\"\n                  ]\n                }\n              }\n              ],\n              \"was_cancelled\": false,\n              \"ground_truth\": true,\n\n              \"lead_time\": 3.0\n\n            },\n            {\n\n              \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n              \"created_ago\": \"0\\u00a0minutes\",\n              \"completed_by\": !int \"{created_by}\",\n              \"result\": [\n              {\n                \"from_name\": \"text_class\",\n                \"to_name\": \"text\",\n                \"type\": \"choices\",\n                \"value\": {\n                  \"choices\": [\n                    \"class_A\"\n                  ]\n                }\n              }\n              ],\n              \"was_cancelled\": false,\n              \"ground_truth\": true,\n\n              \"lead_time\": 5.0\n\n            }\n            ],\n            \"predictions\": [\n            {\n\n              \"model_version\": \"model_version_A\",\n              \"created_ago\": \"0\\u00a0minutes\",\n              \"result\": [\n              {\n                \"from_name\": \"text_class\",\n                \"to_name\": \"text\",\n                \"type\": \"choices\",\n                \"value\": {\n                  \"choices\": [\n                    \"class_A\"\n                  ]\n                }\n              }\n              ],\n              \"score\": null,\n              \"cluster\": null,\n              \"neighbors\": null,\n              \"mislabeling\": 0.0,\n\n\n            }\n            ],\n            \"drafts\": [],\n            \"annotators\": [\n              !int \"{created_by}\"\n            ],\n            \"project\": !int \"{project_pk}\"\n          },\n          {\n            \"cancelled_annotations\": 0,\n            \"annotations_results\": !raw \"[{from_name: text_class, to_name: text, type: choices, value: {choices: [class_TESTING]}}]\",\n            \"data\": {\n              \"int_field\": \"99\",\n              \"text\": \"yoyo\"\n            },\n            \"predictions_results\": \"\",\n            \"predictions_score\": null,\n            \"total_annotations\": 1,\n            \"total_predictions\": 0,\n            \"annotations_ids\": !anystr \"\",\n            \"annotations\": [\n            {\n\n              \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n              \"created_ago\": \"0\\u00a0minutes\",\n              \"completed_by\": !int \"{created_by}\",\n              \"result\": [\n              {\n                \"from_name\": \"text_class\",\n                \"to_name\": \"text\",\n                \"type\": \"choices\",\n                \"value\": {\n                  \"choices\": [\n                    \"class_TESTING\"\n                  ]\n                }\n              }\n              ],\n              \"was_cancelled\": false,\n              \"ground_truth\": true,\n\n              \"lead_time\": null\n\n            }\n            ],\n            \"predictions\": [],\n            \"drafts\": [],\n            \"annotators\": [\n              !int \"{created_by}\"\n            ],\n            \"project\": !int \"{project_pk}\"\n          }\n          ]\n        }\n\n---\ntest_name: tasks-annotators\nstrict: false\nmarks:\n  - usefixtures:\n      - django_live_url\nstages:\n\n  - id: signup\n    type: ref\n\n  - id: create_project\n    name: create_project\n    request:\n      data:\n        title: Test Draft 1\n        show_collab_predictions: true\n      method: POST\n      url: '{django_live_url}/api/projects'\n    response:\n      save:\n        json:\n          project_pk: id\n          created_by: created_by.id\n      status_code: 201\n\n  - name: create_filter_tasks\n    request:\n      files:\n        json_file: tests/data_manager/tasks_annotations_predictions.json\n      headers:\n        content-type: multipart/form-data\n      method: POST\n      url: '{django_live_url}/api/projects/{project_pk}/import'\n    response:\n      json:\n        annotation_count: 4\n        prediction_count: 3\n        task_count: 6\n      status_code: 201\n\n  - name: setup_views\n    request:\n      method: POST\n      url: '{django_live_url}/api/dm/views/?project={project_pk}'\n      json: {\n        \"data\": {\n          \"filters\": {\n            \"conjunction\": \"or\",\n            \"items\": [\n              {\n                \"filter\": \"filter:tasks:annotators\",\n                \"operator\": \"not_contains\",\n                \"type\": \"List\",\n                \"value\": \"{created_by}\"\n              }\n            ]\n          },\n          \"ordering\": [\n            \"tasks:data.text\"\n          ]\n        },\n        \"project\": !int \"{project_pk}\"\n      }\n    response:\n      save:\n        json:\n          view: \"@\"\n      status_code: 201\n\n  - name: get_tasks\n    request:\n      method: GET\n      url: '{django_live_url}/api/tasks?fields=all&view={view.id}'\n    response:\n      status_code: 200\n      verify_response_with:\n        function: label_studio.tests.utils:save_response\n      json: {\n        \"total_annotations\": 0,\n        \"total_predictions\": 1,\n        \"total\": 3,\n        \"tasks\": [\n        {\n          \"cancelled_annotations\": 0,\n\n\n          \"annotations_results\": \"\",\n          \"data\": {\n            \"int_field\": 42,\n            \"text\": \"opop\"\n          },\n\n\n          \"predictions_score\": null,\n          \"total_annotations\": 0,\n          \"total_predictions\": 1,\n          \"annotations_ids\": !anystr \"\",\n          \"annotations\": [],\n          \"predictions\": [\n          {\n\n            \"model_version\": \"undefined\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"result\": [\n            {\n              \"from_name\": \"text_class\",\n              \"to_name\": \"text\",\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_PREDICTIONS_TESTING\"\n                ]\n              }\n            }\n            ],\n            \"score\": null,\n            \"cluster\": null,\n            \"neighbors\": null,\n            \"mislabeling\": 0.0,\n\n\n          }\n          ],\n          \"drafts\": [],\n\n          \"annotators\": [],\n          \"project\": !int \"{project_pk}\"\n        },\n        {\n          \"cancelled_annotations\": 0,\n\n\n          \"annotations_results\": \"\",\n          \"data\": {\n            \"text\": \"vivi\"\n          },\n\n          \"predictions_results\": \"\",\n          \"predictions_score\": null,\n          \"total_annotations\": 0,\n          \"total_predictions\": 0,\n          \"annotations_ids\": !anystr \"\",\n          \"annotations\": [],\n          \"predictions\": [],\n          \"drafts\": [],\n\n          \"annotators\": [],\n          \"project\": !int \"{project_pk}\"\n        },\n        {\n          \"cancelled_annotations\": 0,\n\n\n          \"annotations_results\": \"\",\n          \"data\": {\n            \"text\": \"zzz\"\n          },\n\n          \"predictions_results\": \"\",\n          \"predictions_score\": null,\n          \"total_annotations\": 0,\n          \"total_predictions\": 0,\n          \"annotations_ids\": !anystr \"\",\n          \"annotations\": [],\n          \"predictions\": [],\n          \"drafts\": [],\n\n          \"annotators\": [],\n          \"project\": !int \"{project_pk}\"\n        }\n        ]\n      }\n\n  - name: setup_views\n    request:\n      method: POST\n      url: '{django_live_url}/api/dm/views/?project={project_pk}'\n      json: {\n        \"data\": {\n          \"filters\": {\n            \"conjunction\": \"or\",\n            \"items\": [\n              {\n                \"filter\": \"filter:tasks:annotators\",\n                \"operator\": \"contains\",\n                \"type\": \"List\",\n                \"value\": \"{created_by}\"\n              }\n            ]\n          },\n          \"ordering\": [\n            \"tasks:data.text\"\n          ]\n        },\n        \"project\": !int \"{project_pk}\"\n      }\n    response:\n      save:\n        json:\n          view: \"@\"\n      status_code: 201\n\n  - name: get_tasks_after_setup\n    request:\n      method: GET\n      url: '{django_live_url}/api/tasks?fields=all&view={view.id}'\n    response:\n      status_code: 200\n      verify_response_with:\n        function: label_studio.tests.utils:save_response\n      json: {\n        \"total_annotations\": 4,\n        \"total_predictions\": 2,\n        \"total\": 3,\n        \"tasks\": [\n        {\n          \"cancelled_annotations\": 0,\n\n\n          \"data\": {\n            \"text\": \"Test example phrase 1\",\n            \"int_field\": 1\n          },\n\n\n          \"predictions_score\": null,\n          \"total_annotations\": 1,\n          \"total_predictions\": 1,\n          \"annotations_ids\": !anystr \"\",\n          \"annotations\": [\n          {\n\n            \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"completed_by\": !int \"{created_by}\",\n            \"result\": [\n            {\n              \"from_name\": \"text_class\",\n              \"to_name\": \"text\",\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_A\"\n                ]\n              }\n            }\n            ],\n            \"was_cancelled\": false,\n            \"ground_truth\": true,\n\n            \"lead_time\": 3.0\n\n          }\n          ],\n          \"predictions\": [\n          {\n\n            \"model_version\": \"model_version_A\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"result\": [\n            {\n              \"from_name\": \"text_class\",\n              \"to_name\": \"text\",\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_A\"\n                ]\n              }\n            }\n            ],\n            \"score\": null,\n            \"cluster\": null,\n            \"neighbors\": null,\n            \"mislabeling\": 0.0,\n\n\n          }\n          ],\n          \"drafts\": [],\n\n          \"annotators\": [\n            !int \"{created_by}\"\n          ],\n          \"project\": !int \"{project_pk}\"\n        },\n        {\n          \"cancelled_annotations\": 0,\n\n\n          \"data\": {\n            \"int_field\": 20,\n            \"text\": \"x2\"\n          },\n\n\n          \"predictions_score\": null,\n          \"total_annotations\": 2,\n          \"total_predictions\": 1,\n          \"annotations_ids\": !anystr \"\",\n          \"annotations\": [\n          {\n\n            \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"completed_by\": !int \"{created_by}\",\n            \"result\": [\n            {\n              \"from_name\": \"text_class\",\n              \"to_name\": \"text\",\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_A\"\n                ]\n              }\n            }\n            ],\n            \"was_cancelled\": false,\n            \"ground_truth\": true,\n\n            \"lead_time\": 3.0\n\n          },\n          {\n\n            \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"completed_by\": !int \"{created_by}\",\n            \"result\": [\n            {\n              \"from_name\": \"text_class\",\n              \"to_name\": \"text\",\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_A\"\n                ]\n              }\n            }\n            ],\n            \"was_cancelled\": false,\n            \"ground_truth\": true,\n\n            \"lead_time\": 5.0\n\n          }\n          ],\n          \"predictions\": [\n          {\n\n            \"model_version\": \"model_version_A\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"result\": [\n            {\n              \"from_name\": \"text_class\",\n              \"to_name\": \"text\",\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_A\"\n                ]\n              }\n            }\n            ],\n            \"score\": null,\n            \"cluster\": null,\n            \"neighbors\": null,\n            \"mislabeling\": 0.0,\n\n          }\n          ],\n          \"drafts\": [],\n          \"annotators\": [\n            !int \"{created_by}\"\n          ],\n          \"project\": !int \"{project_pk}\"\n        },\n        {\n          \"cancelled_annotations\": 0,\n\n\n          \"data\": {\n            \"int_field\": \"99\",\n            \"text\": \"yoyo\"\n          },\n\n          \"predictions_results\": \"\",\n          \"predictions_score\": null,\n          \"total_annotations\": 1,\n          \"total_predictions\": 0,\n          \"annotations_ids\": !anystr \"\",\n          \"annotations\": [\n          {\n\n            \"created_username\": \" test_suites_user@heartex.com, {created_by}\",\n            \"created_ago\": \"0\\u00a0minutes\",\n            \"completed_by\": !int \"{created_by}\",\n            \"result\": [\n            {\n              \"from_name\": \"text_class\",\n              \"to_name\": \"text\",\n              \"type\": \"choices\",\n              \"value\": {\n                \"choices\": [\n                  \"class_TESTING\"\n                ]\n              }\n            }\n            ],\n            \"was_cancelled\": false,\n            \"ground_truth\": true,\n\n            \"lead_time\": null\n\n          }\n          ],\n          \"predictions\": [],\n          \"drafts\": [],\n\n          \"annotators\": [\n            !int \"{created_by}\"\n          ],\n          \"project\": !int \"{project_pk}\"\n        }\n        ]\n      }\n\n---\ntest_name: tasks-minimal-fields\nstrict: false\nmarks:\n  - usefixtures:\n      - django_live_url\nstages:\n\n  - id: signup\n    type: ref\n\n  - id: create_project\n    name: create_project\n    request:\n      data:\n        title: Test Draft 1\n        show_collab_predictions: true\n      method: POST\n      url: '{django_live_url}/api/projects'\n    response:\n      save:\n        json:\n          project_pk: id\n          created_by: created_by.id\n      status_code: 201\n\n  - name: create_filter_tasks\n    request:\n      files:\n        json_file: tests/data_manager/tasks_annotations_predictions.json\n      headers:\n        content-type: multipart/form-data\n      method: POST\n      url: '{django_live_url}/api/projects/{project_pk}/import'\n    response:\n      json:\n        annotation_count: 4\n        prediction_count: 3\n        task_count: 6\n      status_code: 201\n\n  - name: setup_views\n    request:\n      method: POST\n      url: '{django_live_url}/api/dm/views/?project={project_pk}'\n      json: {\n        \"data\": {\n          \"filters\": {\n            \"conjunction\": \"or\",\n            \"items\": [\n              {\n                \"filter\": \"filter:tasks:annotators\",\n                \"operator\": \"empty\",\n                \"type\": \"List\",\n                \"value\": false\n              }\n            ]\n          },\n          \"ordering\": [\n            \"tasks:data.text\"\n          ]\n        },\n        \"project\": !int \"{project_pk}\"\n      }\n    response:\n      save:\n        json:\n          view: \"@\"\n      status_code: 201\n\n  - name: get_tasks\n    request:\n      method: GET\n      url: '{django_live_url}/api/tasks?view={view.id}'\n    response:\n      status_code: 200\n      verify_response_with:\n        function: label_studio.tests.utils:save_response\n      json: {\n        \"total_annotations\": 4,\n        \"total_predictions\": 2,\n        \"total\": 3,\n        \"tasks\": [\n        {\n\n          \"annotations_results\": \"\",\n          \"data\": {\n            \"text\": \"Test example phrase 1\",\n            \"int_field\": 1\n          },\n\n          \"predictions_results\": \"\",\n          \"total_annotations\": 1,\n          \"annotations_ids\": !anystr \"\",\n          \"drafts\": [],\n          \"file_upload\": null,\n          \"annotators\": [\n            !int \"{created_by}\"\n          ],\n          \"project\": !int \"{project_pk}\"\n        },\n        {\n\n          \"annotations_results\": \"\",\n          \"data\": {\n            \"int_field\": 20,\n            \"text\": \"x2\"\n          },\n\n          \"predictions_results\": \"\",\n          \"total_annotations\": 2,\n          \"annotations_ids\": !anystr \"\",\n          \"drafts\": [],\n          \"file_upload\": null,\n          \"annotators\": [\n            !int \"{created_by}\"\n          ],\n          \"project\": !int \"{project_pk}\"\n        },\n        {\n\n          \"annotations_results\": \"\",\n          \"data\": {\n            \"int_field\": \"99\",\n            \"text\": \"yoyo\"\n          },\n\n          \"predictions_results\": \"\",\n          \"total_annotations\": 1,\n          \"annotations_ids\": !anystr \"\",\n          \"drafts\": [],\n          \"file_upload\": null,\n          \"annotators\": [\n            !int \"{created_by}\"\n          ],\n          \"project\": !int \"{project_pk}\"\n        }\n        ]\n      }\n\n  - name: setup_views\n    request:\n      method: POST\n      url: '{django_live_url}/api/dm/views/?project={project_pk}'\n      json: {\n        \"data\": {\n          \"filters\": {\n            \"conjunction\": \"and\",\n            \"items\": [\n              {\n                \"filter\": \"filter:tasks:predictions_results\",\n                \"operator\": \"equal\",\n                \"type\": \"String\",\n                \"value\": \"PREDICTIONS\"\n              },\n              {\n                \"filter\": \"filter:tasks:annotations_results\",\n                \"operator\": \"not_equal\",\n                \"type\": \"String\",\n                \"value\": \"PREDICTIONS\"\n              }\n            ]\n          },\n          \"ordering\": [\n            \"tasks:data.text\"\n          ]\n        },\n        \"project\": !int \"{project_pk}\"\n      }\n    response:\n      save:\n        json:\n          view: \"@\"\n      status_code: 201\n\n  - name: get_tasks\n    request:\n      method: GET\n      url: '{django_live_url}/api/tasks?view={view.id}'\n    response:\n      status_code: 200\n      verify_response_with:\n        function: label_studio.tests.utils:save_response\n      json: {\n        \"total_annotations\": 0,\n        \"total_predictions\": 0,\n        \"total\": 0,\n        }\n\n  - name: get_tasks_with_page\n    request:\n      method: GET\n      url: '{django_live_url}/api/tasks?view={view.id}&page=1'\n    response:\n      status_code: 200\n      verify_response_with:\n        function: label_studio.tests.utils:save_response\n      json: {\n        \"total_annotations\": 0,\n        \"total_predictions\": 0,\n        \"total\": 0,\n      }\n\n  - name: get_first_task\n    request:\n      method: GET\n      url: '{django_live_url}/api/projects/{project_pk}/next'\n    response:\n      save:\n        json:\n          first_task_id: id\n      status_code: 200\n\n  - name: create_annotation_first_task\n    request:\n      headers:\n        content-type: application/json\n      json:\n        lead_time: 5\n        result:\n        - from_name: label\n          to_name: text\n          type: choices\n          value:\n            choices:\n            - class_B\n      method: POST\n      url: '{django_live_url}/api/tasks/{first_task_id}/annotations'\n    response:\n      save:\n        json:\n          annotation_pk: id\n      status_code: 201\n\n  - name: setup_views\n    request:\n      method: POST\n      url: '{django_live_url}/api/dm/views/?project={project_pk}'\n      json: {\n        \"data\": {\n          \"filters\": {\n            \"conjunction\": \"or\",\n            \"items\": [\n              {\n                \"filter\": \"filter:tasks:updated_by\",\n                \"operator\": \"contains\",\n                \"type\": \"List\",\n                \"value\": !int \"{created_by}\",\n              }\n            ]\n          },\n          \"ordering\": [\n            \"tasks:data.text\"\n          ]\n        },\n        \"project\": !int \"{project_pk}\"\n      }\n    response:\n      save:\n        json:\n          view: \"@\"\n      status_code: 201\n\n  - name: get_tasks\n    request:\n      method: GET\n      url: '{django_live_url}/api/tasks?view={view.id}'\n    response:\n      status_code: 200\n      verify_response_with:\n        function: label_studio.tests.utils:save_response\n      json: {\n        \"total_annotations\": 1,\n        \"total_predictions\": 0,\n        \"total\": 1,\n      }\n\n  - name: setup_views\n    request:\n      method: POST\n      url: '{django_live_url}/api/dm/views/?project={project_pk}'\n      json: {\n        \"data\": {\n          \"filters\": {\n            \"conjunction\": \"or\",\n            \"items\": [\n              {\n                \"filter\": \"filter:tasks:updated_by\",\n                \"operator\": \"not_contains\",\n                \"type\": \"List\",\n                \"value\": !int \"{created_by}\",\n              }\n            ]\n          },\n          \"ordering\": [\n            \"tasks:data.text\"\n          ]\n        },\n        \"project\": !int \"{project_pk}\"\n      }\n    response:\n      save:\n        json:\n          view: \"@\"\n      status_code: 201\n\n  - name: get_tasks\n    request:\n      method: GET\n      url: '{django_live_url}/api/tasks?view={view.id}'\n    response:\n      status_code: 200\n      verify_response_with:\n        function: label_studio.tests.utils:save_response\n      json: {\n        \"total_annotations\": 4,\n        \"total_predictions\": 3,\n        \"total\": 5,\n      }\n\n  - name: setup_views\n    request:\n      method: POST\n      url: '{django_live_url}/api/dm/views/?project={project_pk}'\n      json: {\n        \"data\": {\n          \"filters\": {\n            \"conjunction\": \"or\",\n            \"items\": [\n              {\n                \"filter\": \"filter:tasks:updated_by\",\n                \"operator\": \"equal\",\n                \"type\": \"List\",\n                \"value\": !int \"{created_by}\",\n              }\n            ]\n          },\n          \"ordering\": [\n            \"tasks:data.text\"\n          ]\n        },\n        \"project\": !int \"{project_pk}\"\n      }\n    response:\n      save:\n        json:\n          view: \"@\"\n      status_code: 201\n\n  - name: get_tasks\n    request:\n      method: GET\n      url: '{django_live_url}/api/tasks?view={view.id}'\n    response:\n      status_code: 200\n      verify_response_with:\n        function: label_studio.tests.utils:save_response\n      json: {\n        \"total_annotations\": 1,\n        \"total_predictions\": 0,\n        \"total\": 1,\n      }\n\n---\n\n# See FilterSerializer; test logic preventing exploit that traverses the ORM\n# to leak sensitive data character-by-character\ntest_name: tasks_api_filter_security_restrictions\nstrict: false\nmarks:\n- usefixtures:\n  - django_live_url\nstages:\n\n- id: signup\n  type: ref\n\n- id: create_project\n  name: create_project\n  request:\n    data:\n      title: Test Draft 1\n      show_collab_predictions: true\n    method: POST\n    url: '{django_live_url}/api/projects'\n  response:\n    save:\n      json:\n        project_pk: id\n        created_by: created_by.id\n    status_code: 201\n\n- name: create view with exploit filter should fail\n  request:\n    method: POST\n    url: '{django_live_url}/api/dm/views'\n    json:\n      project: '{project_pk}'\n      data:\n        filters:\n          conjunction: and\n          items:\n            - filter: \"filter:tasks:updated_by__sensitive_field\"\n              operator: empty\n              value: \"true\"\n              type: String\n  response:\n    status_code: 400\n    json:\n      validation_errors:\n        filter_group:\n          filters:\n            - column:\n              - '\"__\" is not generally allowed in filters. Consider asking your administrator to add \"updated_by__sensitive_field\" to DATA_MANAGER_FILTER_ALLOWLIST, but note that some filter expressions may pose a security risk'\n\n- name: create view with allowlisted filter should succeed\n  request:\n    method: POST\n    url: '{django_live_url}/api/dm/views'\n    json:\n      project: '{project_pk}'\n      data:\n        filters:\n          conjunction: and\n          items:\n            - filter: \"filter:tasks:updated_by__active_organization\"\n              operator: empty\n              value: \"true\"\n              type: String\n  response:\n    status_code: 201\n    save:\n      json:\n        view_pk: id\n\n- name: change filter to typical column succeeds\n  request:\n    method: PUT\n    url: '{django_live_url}/api/dm/views/{view_pk}?interaction=filter&project={project_pk}'\n    json:\n      project: '{project_pk}'\n      data:\n        filters:\n          conjunction: and\n          items:\n            - filter: \"filter:tasks:updated_by\"\n              operator: empty\n              value: \"true\"\n              type: String\n  response:\n    status_code: 200\n\n- name: change filter to unexpected prefix fails\n  request:\n    method: PUT\n    url: '{django_live_url}/api/dm/views/{view_pk}?interaction=filter&project={project_pk}'\n    json:\n      project: '{project_pk}'\n      data:\n        filters:\n          conjunction: and\n          items:\n            - filter: \"tasks:filter:annotations_results\"\n              operator: empty\n              value: \"true\"\n              type: String\n  response:\n    status_code: 400\n    json:\n      validation_errors:\n        filter_group:\n          filters:\n            - column:\n              - 'Filter \"tasks:filter:annotations_results\" should start with \"filter:tasks:\"'\n\n- name: change filter to include direction marker succeeds\n  request:\n    method: PUT\n    url: '{django_live_url}/api/dm/views/{view_pk}?interaction=filter&project={project_pk}'\n    json:\n      project: '{project_pk}'\n      data:\n        filters:\n          conjunction: and\n          items:\n            - filter: \"filter:tasks:-annotations_results\"\n              operator: empty\n              value: \"true\"\n              type: String\n  response:\n    status_code: 200\n\n- name: invalid filter with direction marker fails, but suggests correct allowlist\n  request:\n    method: PUT\n    url: '{django_live_url}/api/dm/views/{view_pk}?interaction=filter&project={project_pk}'\n    json:\n      project: '{project_pk}'\n      data:\n        filters:\n          conjunction: and\n          items:\n            - filter: \"filter:tasks:-updated_by__sensitive_field\"\n              operator: empty\n              value: \"true\"\n              type: String\n  response:\n    status_code: 400\n    json:\n      validation_errors:\n        filter_group:\n          filters:\n            - column:\n              - '\"__\" is not generally allowed in filters. Consider asking your administrator to add \"updated_by__sensitive_field\" to DATA_MANAGER_FILTER_ALLOWLIST, but note that some filter expressions may pose a security risk'\n\n- name: change filter to dotted data field with underscores succeeds\n  request:\n    method: PUT\n    url: '{django_live_url}/api/dm/views/{view_pk}?interaction=filter&project={project_pk}'\n    json:\n      project: '{project_pk}'\n      data:\n        filters:\n          conjunction: and\n          items:\n            - filter: \"filter:tasks:data.images__0\"\n              operator: empty\n              value: \"true\"\n              type: String\n  response:\n    status_code: 200\n\n- name: change filter to valid column without prefix fails\n  request:\n    method: PUT\n    url: '{django_live_url}/api/dm/views/{view_pk}?interaction=filter&project={project_pk}'\n    json:\n      project: '{project_pk}'\n      data:\n        filters:\n          conjunction: and\n          items:\n            - filter: \"annotations_results\"\n              operator: empty\n              value: \"true\"\n              type: String\n  response:\n    status_code: 400\n    json:\n      validation_errors:\n        filter_group:\n          filters:\n            - column:\n              - 'Filter \"annotations_results\" should start with \"filter:tasks:\"'\n\n---\n\n# Regression test preventing replace-all of prefixes from being used to construct exploit filters\ntest_name: tasks_api_prevent_prefix_regression\nstrict: false\nmarks:\n- usefixtures:\n  - django_live_url\nstages:\n\n- id: signup\n  type: ref\n\n- id: create_project\n  name: create_project\n  request:\n    data:\n      title: Test Draft 1\n      show_collab_predictions: true\n    method: POST\n    url: '{django_live_url}/api/projects'\n  response:\n    save:\n      json:\n        project_pk: id\n        created_by: created_by.id\n    status_code: 201\n\n# Perhaps our validation should be further improved, but for now, it's\n# garbage in, garbage out.\n- name: create view with prefix in middle of filter should succeed\n  request:\n    method: POST\n    url: '{django_live_url}/api/dm/views'\n    json:\n      project: '{project_pk}'\n      data:\n        filters:\n          conjunction: and\n          items:\n            # in an earlier version, preprocess_field_name would have\n            # transformed this to updated_by__sensitive_field\n            - filter: \"filter:tasks:updated_by_tasks:_sensitive_field\"\n              operator: empty\n              value: \"true\"\n              type: String\n  response:\n    status_code: 201\n    save:\n      json:\n        view_pk: id\n\n- name: get_tasks fails because \"updated_by_tasks:_sensitive_field\" doesn't resolve to a field\n  request:\n    method: GET\n    url: '{django_live_url}/api/tasks?view={view_pk}'\n  response:\n    # 500 actually expected here\n    status_code: 500\n"], "filenames": ["label_studio/core/settings/base.py", "label_studio/core/utils/params.py", "label_studio/data_manager/functions.py", "label_studio/data_manager/serializers.py", "label_studio/tests/data_manager/api_tasks.tavern.yml"], "buggy_code_start_loc": [18, 1, 4, 6, 1127], "buggy_code_end_loc": [669, 138, 345, 19, 1481], "fixing_code_start_loc": [18, 2, 5, 7, 1127], "fixing_code_end_loc": [676, 150, 372, 64, 1734], "type": "NVD-CWE-noinfo", "message": "Label Studio is an open source data labeling tool. In all current versions of Label Studio prior to 1.9.2post0, the application allows users to insecurely set filters for filtering tasks. An attacker can construct a filter chain to filter tasks based on sensitive fields for all user accounts on the platform by exploiting Django's Object Relational Mapper (ORM). Since the results of query can be manipulated by the ORM filter, an attacker can leak these sensitive fields character by character. In addition, Label Studio had a hard coded secret key that an attacker can use to forge a session token of any user by exploiting this ORM Leak vulnerability to leak account password hashes. This vulnerability has been addressed in commit `f931d9d129` which is included in the 1.9.2post0 release. Users are advised to upgrade. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2023-47117", "sourceIdentifier": "security-advisories@github.com", "published": "2023-11-13T21:15:08.317", "lastModified": "2023-11-20T17:42:48.293", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Label Studio is an open source data labeling tool. In all current versions of Label Studio prior to 1.9.2post0, the application allows users to insecurely set filters for filtering tasks. An attacker can construct a filter chain to filter tasks based on sensitive fields for all user accounts on the platform by exploiting Django's Object Relational Mapper (ORM). Since the results of query can be manipulated by the ORM filter, an attacker can leak these sensitive fields character by character. In addition, Label Studio had a hard coded secret key that an attacker can use to forge a session token of any user by exploiting this ORM Leak vulnerability to leak account password hashes. This vulnerability has been addressed in commit `f931d9d129` which is included in the 1.9.2post0 release. Users are advised to upgrade. There are no known workarounds for this vulnerability."}, {"lang": "es", "value": "Label Studio es una herramienta de etiquetado de datos de c\u00f3digo abierto. En todas las versiones actuales de Label Studio anteriores a la 1.9.2post0, la aplicaci\u00f3n permite a los usuarios configurar filtros de forma insegura para tareas de filtrado. Un atacante puede construir una cadena de filtros para filtrar tareas basadas en campos confidenciales para todas las cuentas de usuario en la plataforma explotando el Object Relational Mapper (ORM) de Django. Dado que los resultados de la consulta pueden ser manipulados por el filtro ORM, un atacante puede filtrar estos campos confidenciales car\u00e1cter por car\u00e1cter. Adem\u00e1s, Label Studio ten\u00eda una clave secreta codificada que un atacante puede usar para falsificar un token de sesi\u00f3n de cualquier usuario explotando esta vulnerabilidad de fuga de ORM para filtrar hashes de contrase\u00f1as de cuentas. Esta vulnerabilidad se solucion\u00f3 en el commit `f931d9d129` que se incluye en la versi\u00f3n 1.9.2post0. Se recomienda a los usuarios que actualicen. No se conocen workarounds para esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:humansignal:label_studio:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.9.2", "matchCriteriaId": "326DCEFD-7346-4651-80AD-728FE9E4BD87"}, {"vulnerable": true, "criteria": "cpe:2.3:a:humansignal:label_studio:1.9.2:-:*:*:*:*:*:*", "matchCriteriaId": "6ED24348-4388-489F-A77F-51B3CE76714D"}]}]}], "references": [{"url": "https://github.com/HumanSignal/label-studio/commit/f931d9d129002f54a495995774ce7384174cef5c", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/HumanSignal/label-studio/security/advisories/GHSA-6hjj-gq77-j4qw", "source": "security-advisories@github.com", "tags": ["Exploit", "Mitigation", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/HumanSignal/label-studio/commit/f931d9d129002f54a495995774ce7384174cef5c"}}