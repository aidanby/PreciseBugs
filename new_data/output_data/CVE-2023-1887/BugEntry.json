{"buggy_code": ["<?php\n\n/**\n * Adds a record in the database, handles the preview and checks for missing\n * category entries.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2003-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2003-02-23\n */\n\nuse Abraham\\TwitterOAuth\\TwitterOAuth;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Category\\CategoryPermission;\nuse phpMyFAQ\\Category\\CategoryRelation;\nuse phpMyFAQ\\Changelog;\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Faq\\FaqPermission;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\CategoryHelper;\nuse phpMyFAQ\\Helper\\LinkVerifierHelper;\nuse phpMyFAQ\\Instance\\Elasticsearch;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Logging;\nuse phpMyFAQ\\Notification;\nuse phpMyFAQ\\Question;\nuse phpMyFAQ\\Services\\Twitter;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Tags;\nuse phpMyFAQ\\Visits;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\nif ($user->perm->hasPermission($user->getUserId(), 'edit_faq') || $user->perm->hasPermission($user->getUserId(), 'add_faq')) {\n    // FAQ data\n    $dateStart = Filter::filterInput(INPUT_POST, 'dateStart', FILTER_UNSAFE_RAW);\n    $dateEnd = Filter::filterInput(INPUT_POST, 'dateEnd', FILTER_UNSAFE_RAW);\n    $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n    $categories = Filter::filterInputArray(\n        INPUT_POST,\n        [\n            'rubrik' => [\n                'filter' => FILTER_VALIDATE_INT,\n                'flags' => FILTER_REQUIRE_ARRAY,\n            ],\n        ]\n    );\n    $recordLang = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n    $tags = Filter::filterInput(INPUT_POST, 'tags', FILTER_UNSAFE_RAW);\n    $active = Filter::filterInput(INPUT_POST, 'active', FILTER_UNSAFE_RAW);\n    $sticky = Filter::filterInput(INPUT_POST, 'sticky', FILTER_UNSAFE_RAW);\n    $content = Filter::filterInput(INPUT_POST, 'answer', FILTER_SANITIZE_SPECIAL_CHARS);\n    $keywords = Filter::filterInput(INPUT_POST, 'keywords', FILTER_UNSAFE_RAW);\n    $author = Filter::filterInput(INPUT_POST, 'author', FILTER_UNSAFE_RAW);\n    $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n    $comment = Filter::filterInput(INPUT_POST, 'comment', FILTER_UNSAFE_RAW);\n    $recordId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT);\n    $solutionId = Filter::filterInput(INPUT_POST, 'solution_id', FILTER_VALIDATE_INT);\n    $revisionId = Filter::filterInput(INPUT_POST, 'revision_id', FILTER_VALIDATE_INT);\n    $changed = Filter::filterInput(INPUT_POST, 'changed', FILTER_UNSAFE_RAW);\n    $date = Filter::filterInput(INPUT_POST, 'date', FILTER_UNSAFE_RAW);\n    $notes = Filter::filterInput(INPUT_POST, 'notes', FILTER_UNSAFE_RAW);\n\n    // Permissions\n    $permissions = [];\n    if ('all' === Filter::filterInput(INPUT_POST, 'userpermission', FILTER_UNSAFE_RAW)) {\n        $permissions += [\n            'restricted_user' => [\n                -1,\n            ],\n        ];\n    } else {\n        $permissions += [\n            'restricted_user' => [\n                Filter::filterInput(INPUT_POST, 'restricted_users', FILTER_VALIDATE_INT),\n            ],\n        ];\n    }\n\n    if ('all' === Filter::filterInput(INPUT_POST, 'grouppermission', FILTER_UNSAFE_RAW)) {\n        $permissions += [\n            'restricted_groups' => [\n                -1,\n            ],\n        ];\n    } else {\n        $permissions += Filter::filterInputArray(\n            INPUT_POST,\n            [\n                'restricted_groups' => [\n                    'filter' => FILTER_VALIDATE_INT,\n                    'flags' => FILTER_REQUIRE_ARRAY,\n                ],\n            ]\n        );\n    }\n\n    if (!isset($categories['rubrik'])) {\n        $categories['rubrik'] = [];\n    }\n\n    if (!is_null($question) && !is_null($categories['rubrik'])) {\n        // new entry\n        $logging = new Logging($faqConfig);\n        $logging->logAdmin($user, 'admin-save-new-faq');\n        printf(\n            '<header class=\"row\"><div class=\"col-lg-12\"><h2 class=\"page-header\">%s</h2></div></header>',\n            $PMF_LANG['ad_entry_aor']\n        );\n\n        $category = new Category($faqConfig, [], false);\n        $category->setUser($currentAdminUser);\n        $category->setGroups($currentAdminGroups);\n\n        $categoryPermission = new CategoryPermission($faqConfig);\n\n        $faqPermission = new FaqPermission($faqConfig);\n\n        $tagging = new Tags($faqConfig);\n\n        $notification = new Notification($faqConfig);\n\n        $recordData = [\n            'lang' => $recordLang,\n            'active' => $active,\n            'sticky' => (!is_null($sticky) ? 1 : 0),\n            'thema' => Filter::removeAttributes(html_entity_decode($question, ENT_QUOTES | ENT_HTML5, 'UTF-8')),\n            'content' => Filter::removeAttributes(html_entity_decode($content, ENT_QUOTES | ENT_HTML5, 'UTF-8')),\n            'keywords' => $keywords,\n            'author' => $author,\n            'email' => $email,\n            'comment' => (!is_null($comment) ? 'y' : 'n'),\n            'date' => empty($date) ? date('YmdHis') : str_replace(['-', ':', ' '], '', $date),\n            'dateStart' => (empty($dateStart) ? '00000000000000' : str_replace('-', '', $dateStart) . '000000'),\n            'dateEnd' => (empty($dateEnd) ? '99991231235959' : str_replace('-', '', $dateEnd) . '235959'),\n            'linkState' => '',\n            'linkDateCheck' => 0,\n            'notes' => Filter::removeAttributes($notes)\n        ];\n\n        // Add new record and get that ID\n        $recordId = $faq->addRecord($recordData);\n\n        if ($recordId) {\n            // Create ChangeLog entry\n            $changelog = new Changelog($faqConfig);\n            $changelog->addEntry($recordId, $user->getUserId(), nl2br($changed), $recordData['lang']);\n\n            // Create the visit entry\n            $visits = new Visits($faqConfig);\n            $visits->logViews((int)$recordId);\n\n            $categoryRelation = new CategoryRelation($faqConfig);\n            $categoryRelation->add($categories['rubrik'], $recordId, $recordData['lang']);\n\n            // Insert the tags\n            if ($tags != '') {\n                $tagging->saveTags($recordId, explode(',', trim($tags)));\n            }\n\n            // Add user permissions\n            $faqPermission->add(FaqPermission::USER, $recordId, $permissions['restricted_user']);\n            $categoryPermission->add(CategoryPermission::USER, $categories['rubrik'], $permissions['restricted_user']);\n            // Add group permission\n            if ($faqConfig->get('security.permLevel') !== 'basic') {\n                $faqPermission->add(FaqPermission::GROUP, $recordId, $permissions['restricted_groups']);\n                $categoryPermission->add(\n                    CategoryPermission::GROUP,\n                    $categories['rubrik'],\n                    $permissions['restricted_groups']\n                );\n            }\n\n            // Open question answered\n            $questionObject = new Question($faqConfig);\n            $openQuestionId = Filter::filterInput(INPUT_POST, 'openQuestionId', FILTER_VALIDATE_INT);\n            if (0 !== $openQuestionId) {\n                if ($faqConfig->get('records.enableDeleteQuestion')) { // deletes question\n                    $questionObject->deleteQuestion($openQuestionId);\n                } else { // adds this faq record id to the related open question\n                    $questionObject->updateQuestionAnswer($openQuestionId, $recordId, $categories['rubrik'][0]);\n                }\n\n                $url = sprintf(\n                    '%s?action=faq&cat=%d&id=%d&artlang=%s',\n                    $faqConfig->getDefaultUrl(),\n                    $categories['rubrik'][0],\n                    $recordId,\n                    $recordLang\n                );\n                $oLink = new Link($url, $faqConfig);\n\n                // notify the user who added the question\n                try {\n                    $notifyEmail = Filter::filterInput(INPUT_POST, 'notifyEmail', FILTER_SANITIZE_EMAIL);\n                    $notifyUser = Filter::filterInput(INPUT_POST, 'notifyUser', FILTER_UNSAFE_RAW);\n                    $notification->sendOpenQuestionAnswered($notifyEmail, $notifyUser, $oLink->toString());\n                } catch (Exception $e) {\n                    printf('<p class=\"alert alert-warning\">%s</p>', $e->getMessage());\n                }\n            }\n\n            // Let the admin and the category owners to be informed by email of this new entry\n            try {\n                $categoryHelper = new CategoryHelper();\n                $categoryHelper\n                    ->setCategory($category)\n                    ->setConfiguration($faqConfig);\n                $moderators = $categoryHelper->getModerators($categories['rubrik']);\n                $notification->sendNewFaqAdded($moderators, $recordId, $recordLang);\n            } catch (Exception $e) {\n                printf('<p class=\"alert alert-warning\">%s</p>', $e->getMessage());\n            }\n\n            // Call Link Verification\n            LinkVerifierHelper::linkOndemandJavascript($recordId, $recordData['lang']);\n\n            // If Elasticsearch is enabled, index new FAQ document\n            if ($faqConfig->get('search.enableElasticsearch')) {\n                $esInstance = new Elasticsearch($faqConfig);\n                $esInstance->index(\n                    [\n                        'id' => $recordId,\n                        'lang' => $recordLang,\n                        'solution_id' => $solutionId,\n                        'question' => $recordData['thema'],\n                        'answer' => $recordData['content'],\n                        'keywords' => $keywords,\n                        'category_id' => $categories['rubrik'][0]\n                    ]\n                );\n            }\n\n            // Callback to Twitter if enabled\n            if ($faqConfig->get('socialnetworks.enableTwitterSupport')) {\n                $connection = new TwitterOAuth(\n                    $faqConfig->get('socialnetworks.twitterConsumerKey'),\n                    $faqConfig->get('socialnetworks.twitterConsumerSecret'),\n                    $faqConfig->get('socialnetworks.twitterAccessTokenKey'),\n                    $faqConfig->get('socialnetworks.twitterAccessTokenSecret')\n                );\n\n                $link = sprintf(\n                    'index.php?action=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    $categories['rubrik'][0],\n                    $recordId,\n                    $recordLang\n                );\n                $oLink = new Link($faqConfig->getDefaultUrl() . $link, $faqConfig);\n                $oLink->itemTitle = $question;\n                $link = $oLink->toString();\n\n                if ($connection) {\n                    $twitter = new Twitter($connection);\n                    $twitter->addPost($question, $tags, $link);\n                }\n            }\n\n            printf('<p class=\"alert alert-success\">%s</p>', $PMF_LANG['ad_entry_savedsuc']);\n            ?>\n          <script>\n            (() => {\n              setTimeout(() => {\n                window.location = \"index.php?action=editentry&id=<?= $recordId;\n                    ?>&lang=<?= $recordData['lang'] ?>\";\n              }, 5000);\n            })();\n          </script>\n            <?php\n        } else {\n            printf(\n                '<p class=\"alert alert-danger\">%s</p>',\n                $PMF_LANG['ad_entry_savedfail'] . $faqConfig->getDb()->error()\n            );\n        }\n    } else {\n        printf(\n            '<header class=\"row\"><div class=\"col-lg-12\"><h2 class=\"page-header\"><i aria-hidden=\"true\" class=\"fa fa-pencil\"></i> %s</h2></div></header>',\n            $PMF_LANG['ad_entry_aor']\n        );\n        printf(\n            '<p class=\"alert alert-danger\">%s</p>',\n            $PMF_LANG['ad_entryins_fail']\n        );\n        ?>\n      <form action=\"?action=editpreview\" method=\"post\">\n        <input type=\"hidden\" name=\"question\" value=\"<?= Strings::htmlspecialchars($question) ?>\">\n        <input type=\"hidden\" name=\"content\" class=\"mceNoEditor\" value=\"<?= Strings::htmlspecialchars($content) ?>\">\n        <input type=\"hidden\" name=\"lang\" value=\"<?= $recordLang ?>\">\n        <input type=\"hidden\" name=\"keywords\" value=\"<?= $keywords ?>\">\n        <input type=\"hidden\" name=\"tags\" value=\"<?= $tags ?>\">\n        <input type=\"hidden\" name=\"author\" value=\"<?= $author ?>\">\n        <input type=\"hidden\" name=\"email\" value=\"<?= $email ?>\">\n          <?php\n            if (is_array($categories['rubrik'])) {\n                foreach ($categories['rubrik'] as $key => $_categories) {\n                    echo '    <input type=\"hidden\" name=\"rubrik[' . $key . ']\" value=\"' . $_categories . '\" />';\n                }\n            }\n            ?>\n        <input type=\"hidden\" name=\"solution_id\" value=\"<?= $solutionId ?>\">\n        <input type=\"hidden\" name=\"revision\" value=\"<?= $revisionId ?>\">\n        <input type=\"hidden\" name=\"active\" value=\"<?= $active ?>\">\n        <input type=\"hidden\" name=\"changed\" value=\"<?= $changed ?>\">\n        <input type=\"hidden\" name=\"comment\" value=\"<?= $comment ?>\">\n        <input type=\"hidden\" name=\"dateStart\" value=\"<?= $dateStart ?>\">\n        <input type=\"hidden\" name=\"dateEnd\" value=\"<?= $dateEnd ?>\">\n        <input type=\"hidden\" name=\"userpermission\" value=\"<?= $user_permission ?>\">\n        <input type=\"hidden\" name=\"restricted_users\" value=\"<?= $permissions['restricted_user'] ?>\">\n        <input type=\"hidden\" name=\"grouppermission\" value=\"<?= $group_permission ?>\">\n        <input type=\"hidden\" name=\"restricted_group\" value=\"<?= $permissions['restricted_groups'] ?>\">\n        <input type=\"hidden\" name=\"date\" value=\"<?= $date ?>\">\n        <input type=\"hidden\" name=\"notes\" value=\"<?= $notes ?>\">\n        <p class=\"text-center\">\n          <button class=\"btn btn-primary\" type=\"submit\" name=\"submit\">\n              <?= $PMF_LANG['ad_entry_back'] ?>\n          </button>\n        </p>\n      </form>\n        <?php\n    }\n} else {\n    echo $PMF_LANG['err_NotAuth'];\n}\n"], "fixing_code": ["<?php\n\n/**\n * Adds a record in the database, handles the preview and checks for missing\n * category entries.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2003-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2003-02-23\n */\n\nuse Abraham\\TwitterOAuth\\TwitterOAuth;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Category\\CategoryPermission;\nuse phpMyFAQ\\Category\\CategoryRelation;\nuse phpMyFAQ\\Changelog;\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Faq\\FaqPermission;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\CategoryHelper;\nuse phpMyFAQ\\Helper\\LinkVerifierHelper;\nuse phpMyFAQ\\Instance\\Elasticsearch;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Logging;\nuse phpMyFAQ\\Notification;\nuse phpMyFAQ\\Question;\nuse phpMyFAQ\\Services\\Twitter;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Tags;\nuse phpMyFAQ\\Visits;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\nif ($user->perm->hasPermission($user->getUserId(), 'add_faq')) {\n    // FAQ data\n    $dateStart = Filter::filterInput(INPUT_POST, 'dateStart', FILTER_UNSAFE_RAW);\n    $dateEnd = Filter::filterInput(INPUT_POST, 'dateEnd', FILTER_UNSAFE_RAW);\n    $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n    $categories = Filter::filterInputArray(\n        INPUT_POST,\n        [\n            'rubrik' => [\n                'filter' => FILTER_VALIDATE_INT,\n                'flags' => FILTER_REQUIRE_ARRAY,\n            ],\n        ]\n    );\n    $recordLang = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n    $tags = Filter::filterInput(INPUT_POST, 'tags', FILTER_UNSAFE_RAW);\n    $active = Filter::filterInput(INPUT_POST, 'active', FILTER_UNSAFE_RAW);\n    $sticky = Filter::filterInput(INPUT_POST, 'sticky', FILTER_UNSAFE_RAW);\n    $content = Filter::filterInput(INPUT_POST, 'answer', FILTER_SANITIZE_SPECIAL_CHARS);\n    $keywords = Filter::filterInput(INPUT_POST, 'keywords', FILTER_UNSAFE_RAW);\n    $author = Filter::filterInput(INPUT_POST, 'author', FILTER_UNSAFE_RAW);\n    $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n    $comment = Filter::filterInput(INPUT_POST, 'comment', FILTER_UNSAFE_RAW);\n    $recordId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT);\n    $solutionId = Filter::filterInput(INPUT_POST, 'solution_id', FILTER_VALIDATE_INT);\n    $revisionId = Filter::filterInput(INPUT_POST, 'revision_id', FILTER_VALIDATE_INT);\n    $changed = Filter::filterInput(INPUT_POST, 'changed', FILTER_UNSAFE_RAW);\n    $date = Filter::filterInput(INPUT_POST, 'date', FILTER_UNSAFE_RAW);\n    $notes = Filter::filterInput(INPUT_POST, 'notes', FILTER_UNSAFE_RAW);\n\n    // Permissions\n    $permissions = [];\n    if ('all' === Filter::filterInput(INPUT_POST, 'userpermission', FILTER_UNSAFE_RAW)) {\n        $permissions += [\n            'restricted_user' => [\n                -1,\n            ],\n        ];\n    } else {\n        $permissions += [\n            'restricted_user' => [\n                Filter::filterInput(INPUT_POST, 'restricted_users', FILTER_VALIDATE_INT),\n            ],\n        ];\n    }\n\n    if ('all' === Filter::filterInput(INPUT_POST, 'grouppermission', FILTER_UNSAFE_RAW)) {\n        $permissions += [\n            'restricted_groups' => [\n                -1,\n            ],\n        ];\n    } else {\n        $permissions += Filter::filterInputArray(\n            INPUT_POST,\n            [\n                'restricted_groups' => [\n                    'filter' => FILTER_VALIDATE_INT,\n                    'flags' => FILTER_REQUIRE_ARRAY,\n                ],\n            ]\n        );\n    }\n\n    if (!isset($categories['rubrik'])) {\n        $categories['rubrik'] = [];\n    }\n\n    if (!is_null($question) && !is_null($categories['rubrik'])) {\n        // new entry\n        $logging = new Logging($faqConfig);\n        $logging->logAdmin($user, 'admin-save-new-faq');\n        printf(\n            '<header class=\"row\"><div class=\"col-lg-12\"><h2 class=\"page-header\">%s</h2></div></header>',\n            $PMF_LANG['ad_entry_aor']\n        );\n\n        $category = new Category($faqConfig, [], false);\n        $category->setUser($currentAdminUser);\n        $category->setGroups($currentAdminGroups);\n\n        $categoryPermission = new CategoryPermission($faqConfig);\n\n        $faqPermission = new FaqPermission($faqConfig);\n\n        $tagging = new Tags($faqConfig);\n\n        $notification = new Notification($faqConfig);\n\n        $recordData = [\n            'lang' => $recordLang,\n            'active' => $active,\n            'sticky' => (!is_null($sticky) ? 1 : 0),\n            'thema' => Filter::removeAttributes(html_entity_decode($question, ENT_QUOTES | ENT_HTML5, 'UTF-8')),\n            'content' => Filter::removeAttributes(html_entity_decode($content, ENT_QUOTES | ENT_HTML5, 'UTF-8')),\n            'keywords' => $keywords,\n            'author' => $author,\n            'email' => $email,\n            'comment' => (!is_null($comment) ? 'y' : 'n'),\n            'date' => empty($date) ? date('YmdHis') : str_replace(['-', ':', ' '], '', $date),\n            'dateStart' => (empty($dateStart) ? '00000000000000' : str_replace('-', '', $dateStart) . '000000'),\n            'dateEnd' => (empty($dateEnd) ? '99991231235959' : str_replace('-', '', $dateEnd) . '235959'),\n            'linkState' => '',\n            'linkDateCheck' => 0,\n            'notes' => Filter::removeAttributes($notes)\n        ];\n\n        // Add new record and get that ID\n        $recordId = $faq->addRecord($recordData);\n\n        if ($recordId) {\n            // Create ChangeLog entry\n            $changelog = new Changelog($faqConfig);\n            $changelog->addEntry($recordId, $user->getUserId(), nl2br($changed), $recordData['lang']);\n\n            // Create the visit entry\n            $visits = new Visits($faqConfig);\n            $visits->logViews((int)$recordId);\n\n            $categoryRelation = new CategoryRelation($faqConfig);\n            $categoryRelation->add($categories['rubrik'], $recordId, $recordData['lang']);\n\n            // Insert the tags\n            if ($tags != '') {\n                $tagging->saveTags($recordId, explode(',', trim($tags)));\n            }\n\n            // Add user permissions\n            $faqPermission->add(FaqPermission::USER, $recordId, $permissions['restricted_user']);\n            $categoryPermission->add(CategoryPermission::USER, $categories['rubrik'], $permissions['restricted_user']);\n            // Add group permission\n            if ($faqConfig->get('security.permLevel') !== 'basic') {\n                $faqPermission->add(FaqPermission::GROUP, $recordId, $permissions['restricted_groups']);\n                $categoryPermission->add(\n                    CategoryPermission::GROUP,\n                    $categories['rubrik'],\n                    $permissions['restricted_groups']\n                );\n            }\n\n            // Open question answered\n            $questionObject = new Question($faqConfig);\n            $openQuestionId = Filter::filterInput(INPUT_POST, 'openQuestionId', FILTER_VALIDATE_INT);\n            if (0 !== $openQuestionId) {\n                if ($faqConfig->get('records.enableDeleteQuestion')) { // deletes question\n                    $questionObject->deleteQuestion($openQuestionId);\n                } else { // adds this faq record id to the related open question\n                    $questionObject->updateQuestionAnswer($openQuestionId, $recordId, $categories['rubrik'][0]);\n                }\n\n                $url = sprintf(\n                    '%s?action=faq&cat=%d&id=%d&artlang=%s',\n                    $faqConfig->getDefaultUrl(),\n                    $categories['rubrik'][0],\n                    $recordId,\n                    $recordLang\n                );\n                $oLink = new Link($url, $faqConfig);\n\n                // notify the user who added the question\n                try {\n                    $notifyEmail = Filter::filterInput(INPUT_POST, 'notifyEmail', FILTER_SANITIZE_EMAIL);\n                    $notifyUser = Filter::filterInput(INPUT_POST, 'notifyUser', FILTER_UNSAFE_RAW);\n                    $notification->sendOpenQuestionAnswered($notifyEmail, $notifyUser, $oLink->toString());\n                } catch (Exception $e) {\n                    printf('<p class=\"alert alert-warning\">%s</p>', $e->getMessage());\n                }\n            }\n\n            // Let the admin and the category owners to be informed by email of this new entry\n            try {\n                $categoryHelper = new CategoryHelper();\n                $categoryHelper\n                    ->setCategory($category)\n                    ->setConfiguration($faqConfig);\n                $moderators = $categoryHelper->getModerators($categories['rubrik']);\n                $notification->sendNewFaqAdded($moderators, $recordId, $recordLang);\n            } catch (Exception $e) {\n                printf('<p class=\"alert alert-warning\">%s</p>', $e->getMessage());\n            }\n\n            // Call Link Verification\n            LinkVerifierHelper::linkOndemandJavascript($recordId, $recordData['lang']);\n\n            // If Elasticsearch is enabled, index new FAQ document\n            if ($faqConfig->get('search.enableElasticsearch')) {\n                $esInstance = new Elasticsearch($faqConfig);\n                $esInstance->index(\n                    [\n                        'id' => $recordId,\n                        'lang' => $recordLang,\n                        'solution_id' => $solutionId,\n                        'question' => $recordData['thema'],\n                        'answer' => $recordData['content'],\n                        'keywords' => $keywords,\n                        'category_id' => $categories['rubrik'][0]\n                    ]\n                );\n            }\n\n            // Callback to Twitter if enabled\n            if ($faqConfig->get('socialnetworks.enableTwitterSupport')) {\n                $connection = new TwitterOAuth(\n                    $faqConfig->get('socialnetworks.twitterConsumerKey'),\n                    $faqConfig->get('socialnetworks.twitterConsumerSecret'),\n                    $faqConfig->get('socialnetworks.twitterAccessTokenKey'),\n                    $faqConfig->get('socialnetworks.twitterAccessTokenSecret')\n                );\n\n                $link = sprintf(\n                    'index.php?action=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    $categories['rubrik'][0],\n                    $recordId,\n                    $recordLang\n                );\n                $oLink = new Link($faqConfig->getDefaultUrl() . $link, $faqConfig);\n                $oLink->itemTitle = $question;\n                $link = $oLink->toString();\n\n                if ($connection) {\n                    $twitter = new Twitter($connection);\n                    $twitter->addPost($question, $tags, $link);\n                }\n            }\n\n            printf('<p class=\"alert alert-success\">%s</p>', $PMF_LANG['ad_entry_savedsuc']);\n            ?>\n          <script>\n            (() => {\n              setTimeout(() => {\n                window.location = \"index.php?action=editentry&id=<?= $recordId;\n                    ?>&lang=<?= $recordData['lang'] ?>\";\n              }, 5000);\n            })();\n          </script>\n            <?php\n        } else {\n            printf(\n                '<p class=\"alert alert-danger\">%s</p>',\n                $PMF_LANG['ad_entry_savedfail'] . $faqConfig->getDb()->error()\n            );\n        }\n    } else {\n        printf(\n            '<header class=\"row\"><div class=\"col-lg-12\"><h2 class=\"page-header\"><i aria-hidden=\"true\" class=\"fa fa-pencil\"></i> %s</h2></div></header>',\n            $PMF_LANG['ad_entry_aor']\n        );\n        printf(\n            '<p class=\"alert alert-danger\">%s</p>',\n            $PMF_LANG['ad_entryins_fail']\n        );\n        ?>\n      <form action=\"?action=editpreview\" method=\"post\">\n        <input type=\"hidden\" name=\"question\" value=\"<?= Strings::htmlspecialchars($question) ?>\">\n        <input type=\"hidden\" name=\"content\" class=\"mceNoEditor\" value=\"<?= Strings::htmlspecialchars($content) ?>\">\n        <input type=\"hidden\" name=\"lang\" value=\"<?= $recordLang ?>\">\n        <input type=\"hidden\" name=\"keywords\" value=\"<?= $keywords ?>\">\n        <input type=\"hidden\" name=\"tags\" value=\"<?= $tags ?>\">\n        <input type=\"hidden\" name=\"author\" value=\"<?= $author ?>\">\n        <input type=\"hidden\" name=\"email\" value=\"<?= $email ?>\">\n          <?php\n            if (is_array($categories['rubrik'])) {\n                foreach ($categories['rubrik'] as $key => $_categories) {\n                    echo '    <input type=\"hidden\" name=\"rubrik[' . $key . ']\" value=\"' . $_categories . '\" />';\n                }\n            }\n            ?>\n        <input type=\"hidden\" name=\"solution_id\" value=\"<?= $solutionId ?>\">\n        <input type=\"hidden\" name=\"revision\" value=\"<?= $revisionId ?>\">\n        <input type=\"hidden\" name=\"active\" value=\"<?= $active ?>\">\n        <input type=\"hidden\" name=\"changed\" value=\"<?= $changed ?>\">\n        <input type=\"hidden\" name=\"comment\" value=\"<?= $comment ?>\">\n        <input type=\"hidden\" name=\"dateStart\" value=\"<?= $dateStart ?>\">\n        <input type=\"hidden\" name=\"dateEnd\" value=\"<?= $dateEnd ?>\">\n        <input type=\"hidden\" name=\"userpermission\" value=\"<?= $user_permission ?>\">\n        <input type=\"hidden\" name=\"restricted_users\" value=\"<?= $permissions['restricted_user'] ?>\">\n        <input type=\"hidden\" name=\"grouppermission\" value=\"<?= $group_permission ?>\">\n        <input type=\"hidden\" name=\"restricted_group\" value=\"<?= $permissions['restricted_groups'] ?>\">\n        <input type=\"hidden\" name=\"date\" value=\"<?= $date ?>\">\n        <input type=\"hidden\" name=\"notes\" value=\"<?= $notes ?>\">\n        <p class=\"text-center\">\n          <button class=\"btn btn-primary\" type=\"submit\" name=\"submit\">\n              <?= $PMF_LANG['ad_entry_back'] ?>\n          </button>\n        </p>\n      </form>\n        <?php\n    }\n} else {\n    echo $PMF_LANG['err_NotAuth'];\n}\n"], "filenames": ["phpmyfaq/admin/record.add.php"], "buggy_code_start_loc": [11], "buggy_code_end_loc": [45], "fixing_code_start_loc": [11], "fixing_code_end_loc": [45], "type": "CWE-840", "message": "Business Logic Errors in GitHub repository thorsten/phpmyfaq prior to 3.1.12.", "other": {"cve": {"id": "CVE-2023-1887", "sourceIdentifier": "security@huntr.dev", "published": "2023-04-05T17:15:07.473", "lastModified": "2023-04-12T00:49:48.673", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Business Logic Errors in GitHub repository thorsten/phpmyfaq prior to 3.1.12."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 8.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.5}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-840"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.12", "matchCriteriaId": "653EC167-06FC-4D30-AAF8-B75F596519AE"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/400d9cd988d3287515c56b2ad6343026966f1a89", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/e4a58835-96b5-412c-a17e-3ceed30231e1", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/400d9cd988d3287515c56b2ad6343026966f1a89"}}