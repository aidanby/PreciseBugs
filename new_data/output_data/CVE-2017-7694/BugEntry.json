{"buggy_code": ["<?php\n\n/**\n * @package content\n */\n/**\n * The Datasource Editor page allows a developer to create new datasources\n * from the four Symphony types, Section, Authors, Navigation and Static XML\n */\n\nclass contentBlueprintsDatasources extends ResourcesPage\n{\n    public $_errors = array();\n\n    public function __viewIndex($resource_type)\n    {\n        parent::__viewIndex(ResourceManager::RESOURCE_TYPE_DS);\n\n        $this->setTitle(__('%1$s &ndash; %2$s', array(__('Data Sources'), __('Symphony'))));\n        $this->appendSubheading(__('Data Sources'), Widget::Anchor(__('Create New'), Administration::instance()->getCurrentPageURL().'new/', __('Create a new data source'), 'create button', null, array('accesskey' => 'c')));\n    }\n\n    // Both the Edit and New pages need the same form\n    public function __viewNew()\n    {\n        $this->__form();\n    }\n\n    public function __viewEdit()\n    {\n        $this->__form();\n    }\n\n    public function __form()\n    {\n        $formHasErrors = (is_array($this->_errors) && !empty($this->_errors));\n\n        if ($formHasErrors) {\n            $this->pageAlert(\n                __('An error occurred while processing this form. See below for details.'),\n                Alert::ERROR\n            );\n\n            // These alerts are only valid if the form doesn't have errors\n        } elseif (isset($this->_context[2])) {\n            $time = Widget::Time();\n\n            switch ($this->_context[2]) {\n                case 'saved':\n                    $message = __('Data Source updated at %s.', array($time->generate()));\n                    break;\n                case 'created':\n                    $message = __('Data Source created at %s.', array($time->generate()));\n            }\n\n            $this->pageAlert(\n                $message\n                . ' <a href=\"' . SYMPHONY_URL . '/blueprints/datasources/new/\" accesskey=\"c\">'\n                . __('Create another?')\n                . '</a> <a href=\"' . SYMPHONY_URL . '/blueprints/datasources/\" accesskey=\"a\">'\n                . __('View all Data Sources')\n                . '</a>',\n                Alert::SUCCESS\n            );\n        }\n\n        $providers = Symphony::ExtensionManager()->getProvidersOf(iProvider::DATASOURCE);\n        $isEditing = false;\n        $about = $handle = null;\n        $fields = array('name'=>null, 'source'=>null, 'filter'=>null, 'required_url_param'=>null, 'negate_url_param'=>null, 'param'=>null);\n\n        if (isset($_POST['fields'])) {\n            $fields = $_POST['fields'];\n\n            if (\n                !in_array($fields['source'], array('authors', 'navigation', 'static_xml'))\n                && !empty($fields['filter']) && is_array($fields['filter'])\n            ) {\n                $filters = array();\n                foreach ($fields['filter'] as $f) {\n                    foreach ($f as $key => $val) {\n                        $filters[$key] = $val;\n                    }\n                }\n\n                $fields['filter'][$fields['source']] = $filters;\n            }\n\n            if (!isset($fields['xml_elements']) || !is_array($fields['xml_elements'])) {\n                $fields['xml_elements'] = array();\n            }\n\n            if ($this->_context[0] == 'edit') {\n                $isEditing = true;\n            }\n        } elseif ($this->_context[0] == 'edit') {\n            $isEditing = true;\n            $handle = $this->_context[1];\n            $existing = DatasourceManager::create($handle, array(), false);\n            $order = isset($existing->dsParamORDER) ? $existing->dsParamORDER : 'asc';\n\n            if (!$existing->allowEditorToParse()) {\n                redirect(SYMPHONY_URL . '/blueprints/datasources/info/' . $handle . '/');\n            }\n\n            $about = $existing->about();\n            $fields['name'] = $about['name'];\n\n            $fields['order'] = ($order == 'rand') ? 'random' : $order;\n            $fields['param'] = isset($existing->dsParamPARAMOUTPUT) ? $existing->dsParamPARAMOUTPUT : null;\n            $fields['required_url_param'] = isset($existing->dsParamREQUIREDPARAM) ? trim($existing->dsParamREQUIREDPARAM) : null;\n            $fields['negate_url_param'] = isset($existing->dsParamNEGATEPARAM) ? trim($existing->dsParamNEGATEPARAM) : null;\n\n            if (isset($existing->dsParamINCLUDEDELEMENTS) && is_array($existing->dsParamINCLUDEDELEMENTS)) {\n                $fields['xml_elements'] = $existing->dsParamINCLUDEDELEMENTS;\n            } else {\n                $fields['xml_elements'] = array();\n            }\n\n            $fields['sort'] = isset($existing->dsParamSORT) ? $existing->dsParamSORT : null;\n            $fields['paginate_results'] = isset($existing->dsParamPAGINATERESULTS) ? $existing->dsParamPAGINATERESULTS : 'yes';\n            $fields['page_number'] = isset($existing->dsParamSTARTPAGE) ? $existing->dsParamSTARTPAGE : '1';\n            $fields['group'] = isset($existing->dsParamGROUP) ? $existing->dsParamGROUP : null;\n            $fields['html_encode'] = isset($existing->dsParamHTMLENCODE) ? $existing->dsParamHTMLENCODE : 'no';\n            $fields['associated_entry_counts'] = isset($existing->dsParamASSOCIATEDENTRYCOUNTS) ? $existing->dsParamASSOCIATEDENTRYCOUNTS : 'no';\n            $fields['redirect_on_empty'] = isset($existing->dsParamREDIRECTONEMPTY) ? $existing->dsParamREDIRECTONEMPTY : 'no';\n            $fields['redirect_on_forbidden'] = isset($existing->dsParamREDIRECTONFORBIDDEN) ? $existing->dsParamREDIRECTONFORBIDDEN : 'no';\n            $fields['redirect_on_required'] = isset($existing->dsParamREDIRECTONREQUIRED) ? $existing->dsParamREDIRECTONREQUIRED : 'no';\n\n            if (!isset($existing->dsParamFILTERS) || !is_array($existing->dsParamFILTERS)) {\n                $existing->dsParamFILTERS = array();\n            }\n\n            if (!empty($existing->dsParamFILTERS)) {\n                $existing->dsParamFILTERS = array_map('stripslashes', $existing->dsParamFILTERS);\n            }\n\n            $fields['source'] = $existing->getSource();\n\n            $provided = false;\n\n            if (!empty($providers)) {\n                foreach ($providers as $providerClass => $provider) {\n                    if ($fields['source'] == call_user_func(array($providerClass, 'getClass'))) {\n                        $fields = array_merge($fields, $existing->settings());\n                        $provided = true;\n                        break;\n                    }\n                }\n            }\n\n            if ($provided === false) {\n                switch ($fields['source']) {\n                    case 'authors':\n                        $fields['filter']['author'] = $existing->dsParamFILTERS;\n                        break;\n                    case 'navigation':\n                        $fields['filter']['navigation'] = $existing->dsParamFILTERS;\n                        break;\n                    case 'static_xml':\n                        // Symphony 2.3+\n                        if (isset($existing->dsParamSTATIC)) {\n                            $fields['static_xml'] = trim($existing->dsParamSTATIC);\n\n                            // Handle Symphony 2.2.2 to 2.3 DS's\n                        } elseif (isset($existing->dsSTATIC)) {\n                            $fields['static_xml'] = trim($existing->dsSTATIC);\n\n                            // Handle pre Symphony 2.2.1 Static DS's\n                        } else {\n                            $fields['static_xml'] = trim($existing->grab());\n                        }\n                        break;\n                    default:\n                        $fields['filter'][$fields['source']] = $existing->dsParamFILTERS;\n                        $fields['max_records'] = $existing->dsParamLIMIT;\n                        break;\n                }\n            }\n        } else {\n            $fields['max_records'] = '20';\n            $fields['page_number'] = '1';\n            $fields['order'] = 'desc';\n        }\n\n        // Handle name on edited changes, or from reading an edited datasource\n        if (isset($about['name'])) {\n            $name = $about['name'];\n        } elseif (isset($fields['name'])) {\n            $name = $fields['name'];\n        }\n\n        $this->setPageType('form');\n        $this->setTitle(__(($isEditing ? '%1$s &ndash; %2$s &ndash; %3$s' : '%2$s &ndash; %3$s'), array($name, __('Data Sources'), __('Symphony'))));\n        $this->appendSubheading(($isEditing ? $name : __('Untitled')));\n        $this->insertBreadcrumbs(array(\n            Widget::Anchor(__('Data Sources'), SYMPHONY_URL . '/blueprints/datasources/'),\n        ));\n\n        // Sources\n        $sources = new XMLElement('div', null, array('class' => 'apply actions'));\n        $div = new XMLElement('div');\n        $label = Widget::Label(__('Source'), null, 'apply-label-left');\n        $sources->appendChild($label);\n        $sources->appendChild($div);\n\n        $sections = SectionManager::fetch(null, 'ASC', 'name');\n\n        if (!is_array($sections)) {\n            $sections = array();\n        }\n\n        $field_groups = array();\n\n        foreach ($sections as $section) {\n            $field_groups[$section->get('id')] = array('fields' => $section->fetchFields(), 'section' => $section);\n        }\n\n        $options = array(\n            array('label' => __('System'), 'data-label' => 'system', 'options' => array(\n                    array('authors', ($fields['source'] == 'authors'), __('Authors'), null, null, array('data-context' => 'authors')),\n                    array('navigation', ($fields['source'] == 'navigation'), __('Navigation'), null, null, array('data-context' => 'navigation')),\n            )),\n            array('label' => __('Custom XML'), 'data-label' => 'custom-xml', 'options' => array(\n                    array('static_xml', ($fields['source'] == 'static_xml'), __('Static XML'), null, null, array('data-context' => 'static-xml')),\n            )),\n        );\n\n        // Loop over the datasource providers\n        if (!empty($providers)) {\n            $p = array('label' => __('From extensions'), 'data-label' => 'from_extensions', 'options' => array());\n\n            foreach ($providers as $providerClass => $provider) {\n                $p['options'][] = array(\n                    $providerClass, ($fields['source'] == $providerClass), $provider, null, null, array('data-context' => Lang::createHandle($provider))\n                );\n            }\n\n            $options[] = $p;\n        }\n\n        // Add Sections\n        if (is_array($sections) && !empty($sections)) {\n            array_unshift($options, array('label' => __('Sections'), 'data-label' => 'sections', 'options' => array()));\n\n            foreach ($sections as $s) {\n                $options[0]['options'][] = array($s->get('id'), ($fields['source'] == $s->get('id')), General::sanitize($s->get('name')));\n            }\n        }\n\n        $div->appendChild(Widget::Select('source', $options, array('id' => 'ds-context')));\n        $this->Context->prependChild($sources);\n\n        $this->Form->appendChild(\n            Widget::Input('fields[source]', null, 'hidden', array('id' => 'ds-source'))\n        );\n\n        // Name\n        $fieldset = new XMLElement('fieldset');\n        $fieldset->setAttribute('class', 'settings');\n        $fieldset->appendChild(new XMLElement('legend', __('Essentials')));\n\n        $group = new XMLElement('div');\n\n        $label = Widget::Label(__('Name'));\n        $label->appendChild(Widget::Input('fields[name]', General::sanitize($fields['name'])));\n\n        if (isset($this->_errors['name'])) {\n            $group->appendChild(Widget::Error($label, $this->_errors['name']));\n        } else {\n            $group->appendChild($label);\n        }\n\n        $fieldset->appendChild($group);\n        $this->Form->appendChild($fieldset);\n\n        // Conditions\n        $fieldset = new XMLElement('fieldset');\n        $this->setContext($fieldset, array('sections', 'system', 'custom-xml'));\n        $fieldset->appendChild(new XMLElement('legend', __('Conditions')));\n        $p = new XMLElement('p', __('Leaving these fields empty will always execute the data source.'));\n        $p->setAttribute('class', 'help');\n        $fieldset->appendChild($p);\n\n        $group = new XMLElement('div');\n        $group->setAttribute('class', 'two columns');\n\n        $label = Widget::Label(__('Required Parameter'));\n        $label->setAttribute('class', 'column ds-param');\n        $label->appendChild(new XMLElement('i', __('Optional')));\n        $input = Widget::Input('fields[required_url_param]', trim($fields['required_url_param']), 'text', array(\n            'placeholder' => __('$param'),\n            'data-search-types' => 'parameters',\n            'data-trigger' => '$'\n        ));\n        $label->appendChild($input);\n        $group->appendChild($label);\n\n        $label = Widget::Label(__('Forbidden Parameter'));\n        $label->setAttribute('class', 'column ds-param');\n        $label->appendChild(new XMLElement('i', __('Optional')));\n        $input = Widget::Input('fields[negate_url_param]', trim($fields['negate_url_param']), 'text', array(\n            'placeholder' => __('$param'),\n            'data-search-types' => 'parameters',\n            'data-trigger' => '$'\n        ));\n        $label->appendChild($input);\n        $group->appendChild($label);\n\n        $fieldset->appendChild($group);\n\n        $group = new XMLElement('div');\n        $group->setAttribute('class', 'two columns ds-param');\n\n        $label = Widget::Checkbox('fields[redirect_on_required]', $fields['redirect_on_required'], __('Redirect to 404 page when the required parameter is not present'));\n        $label->setAttribute('class', 'column');\n        $group->appendChild($label);\n\n        $label = Widget::Checkbox('fields[redirect_on_forbidden]', $fields['redirect_on_forbidden'], __('Redirect to 404 page when the forbidden parameter is present'));\n        $label->setAttribute('class', 'column');\n        $group->appendChild($label);\n\n        $fieldset->appendChild($group);\n\n        $label = Widget::Checkbox('fields[redirect_on_empty]', $fields['redirect_on_empty'], __('Redirect to 404 page when no results are found'));\n        $label->setAttribute('class', 'column');\n        $fieldset->appendChild($label);\n\n        $this->Form->appendChild($fieldset);\n\n        // Filters\n        $fieldset = new XMLElement('fieldset');\n        $this->setContext($fieldset, array('sections', 'system'));\n        $fieldset->appendChild(new XMLElement('legend', __('Filters')));\n        $p = new XMLElement('p',\n            __('Use %s syntax to filter by page parameters. A default value can be set using %s.', array(\n                '<code>{' . __('$param') . '}</code>',\n                '<code>{' . __('$param:default') . '}</code>'\n            ))\n        );\n        $p->setAttribute('class', 'help');\n        $fieldset->appendChild($p);\n\n        foreach ($field_groups as $section_id => $section_data) {\n            $div = new XMLElement('div');\n            $div->setAttribute('class', 'contextual frame filters-duplicator');\n            $div->setAttribute('data-context', 'section-' . $section_id);\n            $div->setAttribute('data-interactive', 'data-interactive');\n\n            $ol = new XMLElement('ol');\n            $ol->setAttribute('class', 'suggestable');\n            $ol->setAttribute('data-interactive', 'data-interactive');\n            $ol->setAttribute('data-add', __('Add filter'));\n            $ol->setAttribute('data-remove', __('Remove filter'));\n\n            // Add system:id filter\n            if (\n                isset($fields['filter'][$section_id]['system:id'])\n                || isset($fields['filter'][$section_id]['id'])\n            ) {\n                $id = isset($fields['filter'][$section_id]['system:id'])\n                    ? $fields['filter'][$section_id]['system:id']\n                    : $fields['filter'][$section_id]['id'];\n\n                $li = new XMLElement('li');\n                $li->setAttribute('class', 'unique');\n                $li->setAttribute('data-type', 'system:id');\n                $li->appendChild(new XMLElement('header', '<h4>' . __('System ID') . '</h4>'));\n                $label = Widget::Label(__('Value'));\n                $input = Widget::Input('fields[filter]['.$section_id.'][system:id]', General::sanitize($id));\n                $input->setAttribute('data-search-types', 'parameters');\n                $input->setAttribute('data-trigger', '{$');\n                $label->appendChild($input);\n                $li->appendChild($label);\n                $ol->appendChild($li);\n            }\n\n            $li = new XMLElement('li');\n            $li->setAttribute('class', 'unique template');\n            $li->setAttribute('data-type', 'system:id');\n            $li->appendChild(new XMLElement('header', '<h4>' . __('System ID') . '</h4>'));\n            $label = Widget::Label(__('Value'));\n            $input = Widget::Input('fields[filter]['.$section_id.'][system:id]', General::sanitize($id));\n            $input->setAttribute('data-search-types', 'parameters');\n            $input->setAttribute('data-trigger', '{$');\n            $label->appendChild($input);\n            $li->appendChild($label);\n            $ol->appendChild($li);\n\n            // Add system:date filter\n            if (\n                isset($fields['filter'][$section_id]['system:creation-date'])\n                || isset($fields['filter'][$section_id]['system:date'])\n            ) {\n                $creation_date = isset($fields['filter'][$section_id]['system:creation-date'])\n                    ? $fields['filter'][$section_id]['system:creation-date']\n                    : $fields['filter'][$section_id]['system:date'];\n\n                $li = new XMLElement('li');\n                $li->setAttribute('class', 'unique');\n                $li->setAttribute('data-type', 'system:creation-date');\n                $li->appendChild(new XMLElement('header', '<h4>' . __('System Creation Date') . '</h4>'));\n                $label = Widget::Label(__('Value'));\n                $input = Widget::Input('fields[filter]['.$section_id.'][system:creation-date]', General::sanitize($creation_date));\n                $input->setAttribute('data-search-types', 'parameters');\n                $input->setAttribute('data-trigger', '{$');\n                $label->appendChild($input);\n                $li->appendChild($label);\n                $ol->appendChild($li);\n            }\n\n            $li = new XMLElement('li');\n            $li->setAttribute('class', 'unique template');\n            $li->setAttribute('data-type', 'system:creation-date');\n            $li->appendChild(new XMLElement('header', '<h4>' . __('System Creation Date') . '</h4>'));\n            $label = Widget::Label(__('Value'));\n            $input = Widget::Input('fields[filter]['.$section_id.'][system:creation-date]');\n            $input->setAttribute('data-search-types', 'parameters');\n            $input->setAttribute('data-trigger', '{$');\n            $label->appendChild($input);\n            $li->appendChild($label);\n            $ol->appendChild($li);\n\n            if (isset($fields['filter'][$section_id]['system:modification-date'])) {\n                $li = new XMLElement('li');\n                $li->setAttribute('class', 'unique');\n                $li->setAttribute('data-type', 'system:modification-date');\n                $li->appendChild(new XMLElement('header', '<h4>' . __('System Modification Date') . '</h4>'));\n                $label = Widget::Label(__('Value'));\n                $input = Widget::Input('fields[filter]['.$section_id.'][system:modification-date]', General::sanitize($fields['filter'][$section_id]['system:modification-date']));\n                $input->setAttribute('data-search-types', 'parameters');\n                $input->setAttribute('data-trigger', '{$');\n                $label->appendChild($input);\n                $li->appendChild($label);\n                $ol->appendChild($li);\n            }\n\n            $li = new XMLElement('li');\n            $li->setAttribute('class', 'unique template');\n            $li->setAttribute('data-type', 'system:modification-date');\n            $li->appendChild(new XMLElement('header', '<h4>' . __('System Modification Date') . '</h4>'));\n            $label = Widget::Label(__('Value'));\n            $input = Widget::Input('fields[filter]['.$section_id.'][system:modification-date]');\n            $input->setAttribute('data-search-types', 'parameters');\n            $input->setAttribute('data-trigger', '{$');\n            $label->appendChild($input);\n            $li->appendChild($label);\n            $ol->appendChild($li);\n\n            if (is_array($section_data['fields']) && !empty($section_data['fields'])) {\n                foreach ($section_data['fields'] as $field) {\n                    if (!$field->canFilter()) {\n                        continue;\n                    }\n\n                    if (isset($fields['filter'][$section_id], $fields['filter'][$section_id][$field->get('id')])) {\n                        $wrapper = new XMLElement('li');\n                        $wrapper->setAttribute('class', 'unique');\n                        $wrapper->setAttribute('data-type', $field->get('element_name'));\n                        $errors = isset($this->_errors[$field->get('id')])\n                            ? $this->_errors[$field->get('id')]\n                            : array();\n\n                        $field->displayDatasourceFilterPanel($wrapper, $fields['filter'][$section_id][$field->get('id')], $errors, $section_id);\n                        $ol->appendChild($wrapper);\n                    }\n\n                    $wrapper = new XMLElement('li');\n                    $wrapper->setAttribute('class', 'unique template');\n                    $wrapper->setAttribute('data-type', $field->get('element_name'));\n                    $field->displayDatasourceFilterPanel($wrapper, null, null, $section_id);\n                    $ol->appendChild($wrapper);\n                }\n            }\n\n            $div->appendChild($ol);\n\n            $fieldset->appendChild($div);\n        }\n\n        $div = new XMLElement('div');\n        $div->setAttribute('class', 'contextual frame filters-duplicator');\n        $div->setAttribute('data-context', 'authors');\n        $div->setAttribute('data-interactive', 'data-interactive');\n\n        $ol = new XMLElement('ol');\n        $ol->setAttribute('class', 'suggestable');\n        $ol->setAttribute('data-interactive', 'data-interactive');\n        $ol->setAttribute('data-add', __('Add filter'));\n        $ol->setAttribute('data-remove', __('Remove filter'));\n\n        if (!isset($fields['filter']['author'])) {\n            $fields['filter']['author'] = array(\n                'id' => null,\n                'username' => null,\n                'first_name' => null,\n                'last_name' => null,\n                'email' => null,\n                'user_type' => null\n            );\n        }\n\n        $this->__appendAuthorFilter($ol, __('ID'), 'id', $fields['filter']['author']['id'], (!isset($fields['filter']['author']['id'])));\n        $this->__appendAuthorFilter($ol, __('Username'), 'username', $fields['filter']['author']['username'], (!isset($fields['filter']['author']['username'])));\n        $this->__appendAuthorFilter($ol, __('First Name'), 'first_name', $fields['filter']['author']['first_name'], (!isset($fields['filter']['author']['first_name'])));\n        $this->__appendAuthorFilter($ol, __('Last Name'), 'last_name', $fields['filter']['author']['last_name'], (!isset($fields['filter']['author']['last_name'])));\n        $this->__appendAuthorFilter($ol, __('Email'), 'email', $fields['filter']['author']['email'], (!isset($fields['filter']['author']['email'])));\n        $this->__appendAuthorFilter($ol, __('User Type'), 'user_type', $fields['filter']['author']['user_type'], (!isset($fields['filter']['author']['user_type'])));\n\n        $div->appendChild($ol);\n\n        $fieldset->appendChild($div);\n\n        $div = new XMLElement('div');\n        $div->setAttribute('class', 'contextual frame filters-duplicator');\n        $div->setAttribute('data-context', 'navigation');\n        $div->setAttribute('data-interactive', 'data-interactive');\n\n        $ol = new XMLElement('ol');\n        $ol->setAttribute('class', 'suggestable');\n        $ol->setAttribute('data-interactive', 'data-interactive');\n        $ol->setAttribute('data-add', __('Add filter'));\n        $ol->setAttribute('data-remove', __('Remove filter'));\n\n        $ul = new XMLElement('ul');\n        $ul->setAttribute('class', 'tags');\n        $ul->setAttribute('data-interactive', 'data-interactive');\n\n        $pages = PageManager::fetch(false, array('*'), array(), 'title ASC');\n\n        foreach ($pages as $page) {\n            $ul->appendChild(new XMLElement('li', preg_replace('/\\/{2,}/i', '/', '/' . $page['path'] . '/' . $page['handle'])));\n        }\n\n        if (isset($fields['filter']['navigation']['parent'])) {\n            $li = new XMLElement('li');\n            $li->setAttribute('class', 'unique');\n            $li->setAttribute('data-type', 'parent');\n            $li->appendChild(new XMLElement('header', '<h4>' . __('Parent Page') . '</h4>'));\n            $label = Widget::Label(__('Value'));\n            $label->appendChild(Widget::Input('fields[filter][navigation][parent]', General::sanitize($fields['filter']['navigation']['parent'])));\n            $li->appendChild($label);\n            $li->appendChild($ul);\n            $ol->appendChild($li);\n        }\n\n        $li = new XMLElement('li');\n        $li->setAttribute('class', 'unique template');\n        $li->setAttribute('data-type', 'parent');\n        $li->appendChild(new XMLElement('header', '<h4>' . __('Parent Page') . '</h4>'));\n        $label = Widget::Label(__('Value'));\n        $label->appendChild(Widget::Input('fields[filter][navigation][parent]'));\n        $li->appendChild($label);\n        $li->appendChild($ul);\n        $ol->appendChild($li);\n\n        $ul = new XMLElement('ul');\n        $ul->setAttribute('class', 'tags');\n        $ul->setAttribute('data-interactive', 'data-interactive');\n\n        if ($types = PageManager::fetchAvailablePageTypes()) {\n            foreach ($types as $type) {\n                $ul->appendChild(new XMLElement('li', $type));\n            }\n        }\n\n        if (isset($fields['filter']['navigation']['type'])) {\n            $li = new XMLElement('li');\n            $li->setAttribute('class', 'unique');\n            $li->setAttribute('data-type', 'type');\n            $li->appendChild(new XMLElement('header', '<h4>' . __('Page Type') . '</h4>'));\n            $label = Widget::Label(__('Value'));\n            $label->appendChild(Widget::Input('fields[filter][navigation][type]', General::sanitize($fields['filter']['navigation']['type'])));\n            $li->appendChild($label);\n            $li->appendChild($ul);\n            $ol->appendChild($li);\n        }\n\n        $li = new XMLElement('li');\n        $li->setAttribute('class', 'unique template');\n        $li->appendChild(new XMLElement('header', '<h4>' . __('Page Type') . '</h4>'));\n        $li->setAttribute('data-type', 'type');\n        $label = Widget::Label(__('Value'));\n        $label->appendChild(Widget::Input('fields[filter][navigation][type]'));\n        $li->appendChild($label);\n        $li->appendChild($ul);\n        $ol->appendChild($li);\n\n        $div->appendChild($ol);\n\n        $fieldset->appendChild($div);\n        $this->Form->appendChild($fieldset);\n\n        // Sorting\n        $fieldset = new XMLElement('fieldset');\n        $this->setContext($fieldset, array('sections', 'system'));\n        $fieldset->appendChild(new XMLElement('legend', __('Sorting')));\n\n        $p = new XMLElement('p',\n            __('Use %s syntax to order by page parameters.', array(\n                '<code>{' . __('$param') . '}</code>'\n            ))\n        );\n        $p->setAttribute('class', 'help');\n        $fieldset->appendChild($p);\n\n        $div = new XMLElement('div');\n\n        $label = Widget::Label(__('Sort By'));\n\n        $options = array(\n            array('label' => __('Authors'), 'data-label' => 'authors', 'options' => array(\n                    array('id', ($fields['source'] == 'authors' && $fields['sort'] == 'id'), __('Author ID')),\n                    array('username', ($fields['source'] == 'authors' && $fields['sort'] == 'username'), __('Username')),\n                    array('first-name', ($fields['source'] == 'authors' && $fields['sort'] == 'first-name'), __('First Name')),\n                    array('last-name', ($fields['source'] == 'authors' && $fields['sort'] == 'last-name'), __('Last Name')),\n                    array('email', ($fields['source'] == 'authors' && $fields['sort'] == 'email'), __('Email')),\n                    array('status', ($fields['source'] == 'authors' && $fields['sort'] == 'status'), __('Status')),\n                )\n            ),\n\n            array('label' => __('Navigation'), 'data-label' => 'navigation', 'options' => array(\n                    array('id', ($fields['source'] == 'navigation' && $fields['sort'] == 'id'), __('Page ID')),\n                    array('handle', ($fields['source'] == 'navigation' && $fields['sort'] == 'handle'), __('Handle')),\n                    array('sortorder', ($fields['source'] == 'navigation' && $fields['sort'] == 'sortorder'), __('Sort Order')),\n                )\n            ),\n        );\n\n        foreach ($field_groups as $section_id => $section_data) {\n            $optgroup = array('label' => General::sanitize($section_data['section']->get('name')), 'data-label' => 'section-' . $section_data['section']->get('id'), 'options' => array(\n                array('system:id', ($fields['source'] == $section_id && $fields['sort'] == 'system:id'), __('System ID')),\n                array('system:creation-date', ($fields['source'] == $section_id && ($fields['sort'] == 'system:creation-date' || $fields['sort'] == 'system:date')), __('System Creation Date')),\n                array('system:modification-date', ($fields['source'] == $section_id && $fields['sort'] == 'system:modification-date'), __('System Modification Date')),\n            ));\n\n            if (is_array($section_data['fields']) && !empty($section_data['fields'])) {\n                foreach ($section_data['fields'] as $input) {\n                    if (!$input->isSortable()) {\n                        continue;\n                    }\n\n                    $optgroup['options'][] = array(\n                        $input->get('element_name'),\n                        ($fields['source'] == $section_id && $input->get('element_name') == $fields['sort']),\n                        $input->get('label')\n                    );\n                }\n            }\n\n            $options[] = $optgroup;\n        }\n\n        $label->appendChild(Widget::Select('fields[sort]', $options));\n        $div->appendChild($label);\n\n        $label = Widget::Label(__('Sort Order'));\n        $label->setAttribute('class', 'ds-param');\n\n        $input = Widget::Input('fields[order]', $fields['order'], 'text', array(\n            'placeholder' => __('{$param}'),\n            'data-search-types' => 'parameters',\n            'data-trigger' => '{$'\n        ));\n        $label->appendChild($input);\n        $div->appendChild($label);\n\n        $orders = new XMLElement('ul');\n        $orders->setAttribute('class', 'tags singular');\n        $orders->setAttribute('data-interactive', 'data-interactive');\n        $orders->appendChild(new XMLElement('li', 'asc'));\n        $orders->appendChild(new XMLElement('li', 'desc'));\n        $orders->appendChild(new XMLElement('li', 'random'));\n        $div->appendChild($orders);\n\n        $fieldset->appendChild($div);\n        $this->Form->appendChild($fieldset);\n\n        // Grouping\n        $fieldset = new XMLElement('fieldset');\n        $this->setContext($fieldset, array('sections', 'authors'));\n        $fieldset->appendChild(new XMLElement('legend', __('Grouping')));\n\n        $label = Widget::Label(__('Group By'));\n        $options = array(\n            array('', null, __('None')),\n        );\n\n        foreach ($field_groups as $section_id => $section_data) {\n            $optgroup = array('label' => $section_data['section']->get('name'), 'data-label' => 'section-' . $section_data['section']->get('id'), 'options' => array());\n\n            if (is_array($section_data['fields']) && !empty($section_data['fields'])) {\n                foreach ($section_data['fields'] as $input) {\n                    if (!$input->allowDatasourceOutputGrouping()) {\n                        continue;\n                    }\n\n                    $optgroup['options'][] = array($input->get('id'), ($fields['source'] == $section_id && $fields['group'] == $input->get('id')), $input->get('label'));\n                }\n            }\n\n            $options[] = $optgroup;\n        }\n\n        $label->appendChild(Widget::Select('fields[group]', $options));\n        $fieldset->appendChild($label);\n\n        $this->Form->appendChild($fieldset);\n\n        // Pagination\n        $fieldset = new XMLElement('fieldset');\n        $this->setContext($fieldset, array('sections'));\n        $fieldset->appendChild(new XMLElement('legend', __('Pagination')));\n\n        $p = new XMLElement('p',\n            __('Use %s syntax to limit by page parameters.', array(\n                '<code>{' . __('$param') . '}</code>'\n            ))\n        );\n        $p->setAttribute('class', 'help');\n        $fieldset->appendChild($p);\n\n        $group = new XMLElement('div');\n        $group->setAttribute('class', 'two columns pagination');\n\n        $label = Widget::Label(__('Entries per Page'));\n        $label->setAttribute('class', 'column ds-param');\n        $input = Widget::Input('fields[max_records]', isset($fields['max_records']) ? $fields['max_records'] : '10', 'text', array(\n            'placeholder' => __('{$param}'),\n            'data-search-types' => 'parameters',\n            'data-trigger' => '{$'\n        ));\n        $label->appendChild($input);\n        $group->appendChild($label);\n\n        $label = Widget::Label(__('Page Number'));\n        $label->setAttribute('class', 'column ds-param');\n        $input = Widget::Input('fields[page_number]', $fields['page_number'], 'text', array(\n            'placeholder' => __('{$param}'),\n            'data-search-types' => 'parameters',\n            'data-trigger' => '{$'\n        ));\n        $label->appendChild($input);\n        $group->appendChild($label);\n\n        $fieldset->appendChild($group);\n\n        $label = Widget::Checkbox('fields[paginate_results]', $fields['paginate_results'], __('Enable pagination'));\n        $fieldset->appendChild($label);\n        $this->Form->appendChild($fieldset);\n\n        // Content\n        $fieldset = new XMLElement('fieldset');\n        $this->setContext($fieldset, array('sections', 'authors'));\n        $fieldset->appendChild(new XMLElement('legend', __('Content')));\n\n        // XML\n        $group = new XMLElement('div', null, array('class' => 'two columns'));\n\n        $label = Widget::Label(__('Included Elements'));\n        $label->setAttribute('class', 'column');\n\n        $options = array(\n            array('label' => __('Authors'), 'data-label' => 'authors', 'options' => array(\n                    array('username', ($fields['source'] == 'authors' && in_array('username', $fields['xml_elements'])), 'username'),\n                    array('name', ($fields['source'] == 'authors' && in_array('name', $fields['xml_elements'])), 'name'),\n                    array('email', ($fields['source'] == 'authors' && in_array('email', $fields['xml_elements'])), 'email'),\n                    array('author-token', ($fields['source'] == 'authors' && in_array('author-token', $fields['xml_elements'])), 'author-token'),\n                    array('default-area', ($fields['source'] == 'authors' && in_array('default-area', $fields['xml_elements'])), 'default-area'),\n            )),\n        );\n\n        foreach ($field_groups as $section_id => $section_data) {\n            $optgroup = array(\n                'label' => General::sanitize($section_data['section']->get('name')),\n                'data-label' => 'section-' . $section_data['section']->get('id'),\n                'options' => array(\n                    array(\n                        'system:pagination',\n                        ($fields['source'] == $section_id && in_array('system:pagination', $fields['xml_elements'])),\n                        'system: pagination'\n                    ),\n                    array(\n                        'system:date',\n                        ($fields['source'] == $section_id && in_array('system:date', $fields['xml_elements'])),\n                        'system: date'\n                    )\n                )\n            );\n\n            if (is_array($section_data['fields']) && !empty($section_data['fields'])) {\n                foreach ($section_data['fields'] as $field) {\n                    $elements = $field->fetchIncludableElements();\n\n                    if (is_array($elements) && !empty($elements)) {\n                        foreach ($elements as $name) {\n                            $selected = false;\n\n                            if ($fields['source'] == $section_id && in_array($name, $fields['xml_elements'])) {\n                                $selected = true;\n                            }\n\n                            $optgroup['options'][] = array($name, $selected, $name);\n                        }\n                    }\n                }\n            }\n\n            $options[] = $optgroup;\n        }\n\n        $label->appendChild(Widget::Select('fields[xml_elements][]', $options, array('multiple' => 'multiple')));\n        $group->appendChild($label);\n\n        // Support multiple parameters\n        if (!isset($fields['param'])) {\n            $fields['param'] = array();\n        } elseif (!is_array($fields['param'])) {\n            $fields['param'] = array($fields['param']);\n        }\n\n        $label = Widget::Label(__('Parameters'));\n        $label->setAttribute('class', 'column');\n        $prefix = '$ds-' . (isset($this->_context[1]) ? Lang::createHandle($fields['name']) : __('untitled')) . '.';\n\n        $options = array(\n            array('label' => __('Authors'), 'data-label' => 'authors', 'options' => array())\n        );\n\n        foreach (array('id', 'username', 'name', 'email', 'user_type') as $p) {\n            $options[0]['options'][] = array(\n                $p,\n                ($fields['source'] == 'authors' && in_array($p, $fields['param'])),\n                $prefix . $p,\n                null,\n                null,\n                array(\n                    'data-handle' => $p\n                )\n            );\n        }\n\n        foreach ($field_groups as $section_id => $section_data) {\n            $optgroup = array('label' => $section_data['section']->get('name'), 'data-label' => 'section-' . $section_data['section']->get('id'), 'options' => array());\n\n            foreach (array('id', 'creation-date', 'modification-date', 'author') as $p) {\n                $option = array(\n                    'system:' . $p,\n                    ($fields['source'] == $section_id && in_array('system:' . $p, $fields['param'])),\n                    $prefix . 'system-' . $p,\n                    null,\n                    null,\n                    array(\n                        'data-handle' => 'system-' . $p\n                    )\n                );\n\n                // Handle 'system:date' as an output paramater (backwards compatibility)\n                if ($p === 'creation-date') {\n                    if ($fields['source'] == $section_id && in_array('system:date', $fields['param'])) {\n                        $option[1] = true;\n                    }\n                }\n\n                $optgroup['options'][] = $option;\n            }\n\n            if (is_array($section_data['fields']) && !empty($section_data['fields'])) {\n                foreach ($section_data['fields'] as $input) {\n                    if (!$input->allowDatasourceParamOutput()) {\n                        continue;\n                    }\n\n                    $optgroup['options'][] = array(\n                        $input->get('element_name'),\n                        ($fields['source'] == $section_id && in_array($input->get('element_name'), $fields['param'])),\n                        $prefix . $input->get('element_name'),\n                        null,\n                        null,\n                        array(\n                            'data-handle' => $input->get('element_name')\n                        )\n                    );\n                }\n            }\n\n            $options[] = $optgroup;\n        }\n\n        $label->appendChild(Widget::Select('fields[param][]', $options, array('multiple' => 'multiple')));\n        $group->appendChild($label);\n\n        $fieldset->appendChild($group);\n\n        // Associations\n        $label = Widget::Checkbox('fields[associated_entry_counts]', $fields['associated_entry_counts'], __('Include a count of entries in associated sections'));\n        $this->setContext($label, array('sections'));\n        $fieldset->appendChild($label);\n\n        // Encoding\n        $label = Widget::Checkbox('fields[html_encode]', $fields['html_encode'], __('HTML-encode text'));\n        $this->setContext($label, array('sections'));\n        $fieldset->appendChild($label);\n\n        $this->Form->appendChild($fieldset);\n\n        // Static XML\n        if (!isset($fields['static_xml'])) {\n            $fields['static_xml'] = null;\n        }\n\n        $fieldset = new XMLElement('fieldset');\n        $this->setContext($fieldset, array('static-xml'));\n        $fieldset->appendChild(new XMLElement('legend', __('Static XML')));\n        $p = new XMLElement('p', __('Enter valid XML, exclude XML declaration'));\n        $p->setAttribute('class', 'help');\n        $fieldset->appendChild($p);\n\n        $label = Widget::Label();\n        $label->appendChild(Widget::Textarea('fields[static_xml]', 12, 50, General::sanitize(stripslashes($fields['static_xml'])), array('class' => 'code', 'placeholder' => '<static>content</static>')));\n\n        if (isset($this->_errors['static_xml'])) {\n            $fieldset->appendChild(Widget::Error($label, $this->_errors['static_xml']));\n        } else {\n            $fieldset->appendChild($label);\n        }\n\n        $this->Form->appendChild($fieldset);\n\n        // Connections\n        $fieldset = new XMLElement('fieldset');\n        $fieldset->setAttribute('class', 'settings');\n        $fieldset->appendChild(new XMLElement('legend', __('Attach to Pages')));\n        $p = new XMLElement('p', __('The data will only be available on the selected pages.'));\n        $p->setAttribute('class', 'help');\n        $fieldset->appendChild($p);\n\n        $div = new XMLElement('div');\n        $label = Widget::Label(__('Pages'));\n\n        $pages = PageManager::fetch();\n        $ds_handle = str_replace('-', '_', Lang::createHandle($fields['name']));\n        $connections = ResourceManager::getAttachedPages(ResourceManager::RESOURCE_TYPE_DS, $ds_handle);\n        $selected = array();\n\n        foreach ($connections as $connection) {\n            $selected[] = $connection['id'];\n        }\n\n        $options = array();\n\n        foreach ($pages as $page) {\n            $options[] = array($page['id'], in_array($page['id'], $selected), PageManager::resolvePageTitle($page['id']));\n        }\n\n        $label->appendChild(Widget::Select('fields[connections][]', $options, array('multiple' => 'multiple')));\n        $div->appendChild($label);\n\n        $fieldset->appendChild($div);\n        $this->Form->appendChild($fieldset);\n\n\n        // Call the provided datasources to let them inject their filters\n        // @todo Ideally when a new Datasource is chosen an AJAX request will fire\n        // to get the HTML from the extension. This is hardcoded for now into\n        // creating a 'big' page and then hiding the fields with JS\n        if (!empty($providers)) {\n            foreach ($providers as $providerClass => $provider) {\n                call_user_func_array(array($providerClass, 'buildEditor'), array($this->Form, &$this->_errors, $fields, $handle));\n            }\n        }\n\n        $div = new XMLElement('div');\n        $div->setAttribute('class', 'actions');\n        $div->appendChild(Widget::Input('action[save]', ($isEditing ? __('Save Changes') : __('Create Data Source')), 'submit', array('accesskey' => 's')));\n\n        if ($isEditing) {\n            $button = new XMLElement('button', __('Delete'));\n            $button->setAttributeArray(array('name' => 'action[delete]', 'class' => 'button confirm delete', 'title' => __('Delete this data source'), 'type' => 'submit', 'accesskey' => 'd', 'data-message' => __('Are you sure you want to delete this data source?')));\n            $div->appendChild($button);\n        }\n\n        $this->Form->appendChild($div);\n    }\n\n    public function __viewInfo()\n    {\n        $this->setPageType('form');\n\n        $datasource = DatasourceManager::create($this->_context[1], array(), false);\n        $about = $datasource->about();\n\n        $this->setTitle(__('%1$s &ndash; %2$s &ndash; %3$s', array($about['name'], __('Data Source'), __('Symphony'))));\n        $this->appendSubheading((($this->_context[0] == 'info') ? $about['name'] : __('Untitled')));\n        $this->insertBreadcrumbs(array(\n            Widget::Anchor(__('Data Sources'), SYMPHONY_URL . '/blueprints/datasources/'),\n        ));\n        $this->Form->setAttribute('id', 'controller');\n\n        $link = $about['author']['name'];\n\n        if (isset($about['author']['website'])) {\n            $link = Widget::Anchor($about['author']['name'], General::validateURL($about['author']['website']));\n        } elseif (isset($about['author']['email'])) {\n            $link = Widget::Anchor($about['author']['name'], 'mailto:' . $about['author']['email']);\n        }\n\n        foreach ($about as $key => $value) {\n            $fieldset = null;\n\n            switch ($key) {\n                case 'author':\n                    if ($link) {\n                        $fieldset = new XMLElement('fieldset');\n                        $fieldset->appendChild(new XMLElement('legend', __('Author')));\n                        $fieldset->appendChild(new XMLElement('p', $link->generate(false)));\n                    }\n                    break;\n                case 'version':\n                    $fieldset = new XMLElement('fieldset');\n                    $fieldset->appendChild(new XMLElement('legend', __('Version')));\n                    $release_date = array_key_exists('release-date', $about) ? $about['release-date'] : filemtime(DatasourceManager::__getDriverPath($this->_context[1]));\n\n                    if (preg_match('/^\\d+(\\.\\d+)*$/', $value)) {\n                        $fieldset->appendChild(new XMLElement('p', __('%1$s released on %2$s', array($value, DateTimeObj::format($release_date, __SYM_DATE_FORMAT__)))));\n                    } else {\n                        $fieldset->appendChild(new XMLElement('p', __('Created by %1$s at %2$s', array($value, DateTimeObj::format($release_date, __SYM_DATE_FORMAT__)))));\n                    }\n                    break;\n                case 'description':\n                    $fieldset = new XMLElement('fieldset');\n                    $fieldset->appendChild(new XMLElement('legend', __('Description')));\n                    $fieldset->appendChild((is_object($about['description']) ? $about['description'] : new XMLElement('p', $about['description'])));\n                    break;\n                case 'example':\n                    if (is_callable(array($datasource, 'example'))) {\n                        $fieldset = new XMLElement('fieldset');\n                        $fieldset->appendChild(new XMLElement('legend', __('Example XML')));\n\n                        $example = $datasource->example();\n\n                        if (is_object($example)) {\n                            $fieldset->appendChild($example);\n                        } else {\n                            $p = new XMLElement('p');\n                            $p->appendChild(new XMLElement('pre', '<code>' . str_replace('<', '&lt;', $example) . '</code>'));\n                            $fieldset->appendChild($p);\n                        }\n                    }\n                    break;\n            }\n\n            if ($fieldset) {\n                $fieldset->setAttribute('class', 'settings');\n                $this->Form->appendChild($fieldset);\n            }\n        }\n\n        // Display source\n        $file = DatasourceManager::__getClassPath($this->_context[1]) . '/data.' . $this->_context[1] . '.php';\n\n        if (file_exists($file)) {\n            $fieldset = new XMLElement('fieldset');\n            $fieldset->setAttribute('class', 'settings');\n            $fieldset->appendChild(new XMLElement('legend', __('Source')));\n\n            $source = file_get_contents($file);\n            $code = new XMLElement('code', htmlspecialchars($source));\n            $pre = new XMLElement('pre');\n            $pre->appendChild($code);\n\n            $fieldset->appendChild($pre);\n            $this->Form->appendChild($fieldset);\n        }\n    }\n\n    public function __actionIndex($resource_type)\n    {\n        return parent::__actionIndex(ResourceManager::RESOURCE_TYPE_DS);\n    }\n\n    public function __actionEdit()\n    {\n        if (array_key_exists('save', $_POST['action'])) {\n            return $this->__formAction();\n        } elseif (array_key_exists('delete', $_POST['action'])) {\n            /**\n             * Prior to deleting the Datasource file. Target file path is provided.\n             *\n             * @delegate DatasourcePreDelete\n             * @since Symphony 2.2\n             * @param string $context\n             * '/blueprints/datasources/'\n             * @param string $file\n             *  The path to the Datasource file\n             */\n            Symphony::ExtensionManager()->notifyMembers('DatasourcePreDelete', '/blueprints/datasources/', array('file' => DATASOURCES . \"/data.\" . $this->_context[1] . \".php\"));\n\n            if (!General::deleteFile(DATASOURCES . '/data.' . $this->_context[1] . '.php')) {\n                $this->pageAlert(\n                    __('Failed to delete %s.', array('<code>' . $this->_context[1] . '</code>'))\n                    . ' ' . __('Please check permissions on %s.', array('<code>/workspace/data-sources</code>')),\n                    Alert::ERROR\n                );\n            } else {\n                $pages = ResourceManager::getAttachedPages(ResourceManager::RESOURCE_TYPE_DS, $this->_context[1]);\n\n                foreach ($pages as $page) {\n                    ResourceManager::detach(ResourceManager::RESOURCE_TYPE_DS, $this->_context[1], $page['id']);\n                }\n\n                redirect(SYMPHONY_URL . '/blueprints/datasources/');\n            }\n        }\n    }\n\n    public function __actionNew()\n    {\n        if (array_key_exists('save', $_POST['action'])) {\n            return $this->__formAction();\n        }\n    }\n\n    public function __formAction()\n    {\n        $fields = $_POST['fields'];\n        $this->_errors = array();\n        $providers = Symphony::ExtensionManager()->getProvidersOf(iProvider::DATASOURCE);\n        $providerClass = null;\n\n        if (trim($fields['name']) == '') {\n            $this->_errors['name'] = __('This is a required field');\n        }\n\n        if ($fields['source'] == 'static_xml') {\n            if (trim($fields['static_xml']) == '') {\n                $this->_errors['static_xml'] = __('This is a required field');\n            } else {\n                $xml_errors = null;\n\n                General::validateXML($fields['static_xml'], $xml_errors, false, new XsltProcess());\n\n                if (!empty($xml_errors)) {\n                    $this->_errors['static_xml'] = __('XML is invalid.');\n                }\n            }\n        } elseif (is_numeric($fields['source'])) {\n            if (strlen(trim($fields['max_records'])) == 0 || (is_numeric($fields['max_records']) && $fields['max_records'] < 1)) {\n                if ($fields['paginate_results'] === 'yes') {\n                    $this->_errors['max_records'] = __('A result limit must be set');\n                }\n            } elseif (!self::__isValidPageString($fields['max_records'])) {\n                $this->_errors['max_records'] = __('Must be a valid number or parameter');\n            }\n\n            if (strlen(trim($fields['page_number'])) == 0 || (is_numeric($fields['page_number']) && $fields['page_number'] < 1)) {\n                if ($fields['paginate_results'] === 'yes') {\n                    $this->_errors['page_number'] = __('A page number must be set');\n                }\n            } elseif (!self::__isValidPageString($fields['page_number'])) {\n                $this->_errors['page_number'] = __('Must be a valid number or parameter');\n            }\n\n            // See if a Provided Datasource is saved\n        } elseif (!empty($providers)) {\n            foreach ($providers as $providerClass => $provider) {\n                if ($fields['source'] == call_user_func(array($providerClass, 'getSource'))) {\n                    call_user_func_array(array($providerClass, 'validate'), array(&$fields, &$this->_errors));\n                    break;\n                }\n\n                unset($providerClass);\n            }\n        }\n\n        $classname = Lang::createHandle($fields['name'], 255, '_', false, true, array('@^[^a-z\\d]+@i' => '', '/[^\\w-\\.]/i' => ''));\n        $rootelement = str_replace('_', '-', $classname);\n\n        // Check to make sure the classname is not empty after handlisation.\n        if (empty($classname) && !isset($this->_errors['name'])) {\n            $this->_errors['name'] = __('Please ensure name contains at least one Latin-based character.', array($classname));\n        }\n\n        $file = DATASOURCES . '/data.' . $classname . '.php';\n\n        $isDuplicate = false;\n        $queueForDeletion = null;\n\n        if ($this->_context[0] == 'new' && is_file($file)) {\n            $isDuplicate = true;\n        } elseif ($this->_context[0] == 'edit') {\n            $existing_handle = $this->_context[1];\n\n            if ($classname != $existing_handle && is_file($file)) {\n                $isDuplicate = true;\n            } elseif ($classname != $existing_handle) {\n                $queueForDeletion = DATASOURCES . '/data.' . $existing_handle . '.php';\n            }\n        }\n\n        // Duplicate\n        if ($isDuplicate) {\n            $this->_errors['name'] = __('A Data source with the name %s already exists', array('<code>' . $classname . '</code>'));\n        }\n\n        if (empty($this->_errors)) {\n            $filters = array();\n            $elements = null;\n            $source = $fields['source'];\n            $params = array(\n                'rootelement' => $rootelement\n            );\n\n            $about = array(\n                'name' => $fields['name'],\n                'version' => 'Symphony ' . Symphony::Configuration()->get('version', 'symphony'),\n                'release date' => DateTimeObj::getGMT('c'),\n                'author name' => Symphony::Author()->getFullName(),\n                'author website' => URL,\n                'author email' => Symphony::Author()->get('email')\n            );\n\n            // If there is a provider, get their template\n            if ($providerClass) {\n                $dsShell = file_get_contents(call_user_func(array($providerClass, 'getTemplate')));\n            } else {\n                $dsShell = file_get_contents($this->getTemplate('blueprints.datasource'));\n            }\n\n            // Author metadata\n            self::injectAboutInformation($dsShell, $about);\n\n            // Do dependencies, the template file must have <!-- CLASS NAME -->\n            $dsShell = str_replace('<!-- CLASS NAME -->', $classname, $dsShell);\n\n            // If there is a provider, let them do the prepartion work\n            if ($providerClass) {\n                $dsShell = call_user_func(array($providerClass, 'prepare'), $fields, $params, $dsShell);\n            } else {\n                switch ($source) {\n                    case 'authors':\n                        $extends = 'AuthorDatasource';\n                        if (isset($fields['filter']['author'])) {\n                            $filters = $fields['filter']['author'];\n                        }\n\n                        $elements = $fields['xml_elements'];\n\n                        $params['order'] = $fields['order'];\n                        $params['redirectonempty'] = $fields['redirect_on_empty'];\n                        $params['redirectonforbidden'] = $fields['redirect_on_forbidden'];\n                        $params['redirectonrequired'] = $fields['redirect_on_required'];\n                        $params['requiredparam'] = trim($fields['required_url_param']);\n                        $params['negateparam'] = trim($fields['negate_url_param']);\n                        $params['paramoutput'] = $fields['param'];\n                        $params['sort'] = $fields['sort'];\n\n                        break;\n                    case 'navigation':\n                        $extends = 'NavigationDatasource';\n                        if (isset($fields['filter']['navigation'])) {\n                            $filters = $fields['filter']['navigation'];\n                        }\n\n                        $params['order'] = $fields['order'];\n                        $params['redirectonempty'] = $fields['redirect_on_empty'];\n                        $params['redirectonforbidden'] = $fields['redirect_on_forbidden'];\n                        $params['redirectonrequired'] = $fields['redirect_on_required'];\n                        $params['requiredparam'] = trim($fields['required_url_param']);\n                        $params['negateparam'] = trim($fields['negate_url_param']);\n\n                        break;\n                    case 'static_xml':\n                        $extends = 'StaticXMLDatasource';\n                        $fields['static_xml'] = trim($fields['static_xml']);\n\n                        if (preg_match('/^<\\?xml/i', $fields['static_xml']) == true) {\n                            // Need to remove any XML declaration\n                            $fields['static_xml'] = preg_replace('/^<\\?xml[^>]+>/i', null, $fields['static_xml']);\n                        }\n\n                        $params['static'] = sprintf(\n                            '%s',\n                            trim($fields['static_xml'])\n                        );\n                        break;\n                    default:\n                        $extends = 'SectionDatasource';\n                        $elements = $fields['xml_elements'];\n\n                        if (is_array($fields['filter']) && !empty($fields['filter'])) {\n                            $filters = array();\n\n                            foreach ($fields['filter'] as $f) {\n                                foreach ($f as $key => $val) {\n                                    $filters[$key] = $val;\n                                }\n                            }\n                        }\n\n                        $params['order'] = $fields['order'];\n                        $params['group'] = $fields['group'];\n                        $params['paginateresults'] = $fields['paginate_results'];\n                        $params['limit'] = $fields['max_records'];\n                        $params['startpage'] = $fields['page_number'];\n                        $params['redirectonempty'] = $fields['redirect_on_empty'];\n                        $params['redirectonforbidden'] = $fields['redirect_on_forbidden'];\n                        $params['redirectonrequired'] = $fields['redirect_on_required'];\n                        $params['requiredparam'] = trim($fields['required_url_param']);\n                        $params['negateparam'] = trim($fields['negate_url_param']);\n                        $params['paramoutput'] = $fields['param'];\n                        $params['sort'] = $fields['sort'];\n                        $params['htmlencode'] = $fields['html_encode'];\n                        $params['associatedentrycounts'] = $fields['associated_entry_counts'];\n\n                        break;\n                }\n\n                $this->__injectVarList($dsShell, $params);\n                $this->__injectIncludedElements($dsShell, $elements);\n                self::injectFilters($dsShell, $filters);\n\n                if (preg_match_all('@(\\$ds-[0-9a-z_\\.\\-]+)@i', $dsShell, $matches)) {\n                    $dependencies = General::array_remove_duplicates($matches[1]);\n                    $dsShell = str_replace('<!-- DS DEPENDENCY LIST -->', \"'\" . implode(\"', '\", $dependencies) . \"'\", $dsShell);\n                }\n\n                $dsShell = str_replace('<!-- CLASS EXTENDS -->', $extends, $dsShell);\n                $dsShell = str_replace('<!-- SOURCE -->', $source, $dsShell);\n            }\n\n            if ($this->_context[0] == 'new') {\n                /**\n                 * Prior to creating the Datasource, the file path where it will be written to\n                 * is provided and well as the contents of that file.\n                 *\n                 * @delegate DatasourcePreCreate\n                 * @since Symphony 2.2\n                 * @param string $context\n                 * '/blueprints/datasources/'\n                 * @param string $file\n                 *  The path to the Datasource file\n                 * @param string $contents\n                 *  The contents for this Datasource as a string passed by reference\n                 * @param array $params\n                 *  An array of all the `$dsParam*` values\n                 * @param array $elements\n                 *  An array of all the elements included in this datasource\n                 * @param array $filters\n                 *  An associative array of all the filters for this datasource with the key\n                 *  being the `field_id` and the value the filter.\n                 * @param array $dependencies\n                 *  An array of dependencies that this datasource has\n                 */\n                Symphony::ExtensionManager()->notifyMembers('DatasourcePreCreate', '/blueprints/datasources/', array(\n                    'file' => $file,\n                    'contents' => &$dsShell,\n                    'params' => $params,\n                    'elements' => $elements,\n                    'filters' => $filters,\n                    'dependencies' => $dependencies\n                ));\n            } else {\n                /**\n                 * Prior to editing a Datasource, the file path where it will be written to\n                 * is provided and well as the contents of that file.\n                 *\n                 * @delegate DatasourcePreEdit\n                 * @since Symphony 2.2\n                 * @param string $context\n                 * '/blueprints/datasources/'\n                 * @param string $file\n                 *  The path to the Datasource file\n                 * @param string $contents\n                 *  The contents for this Datasource as a string passed by reference\n                 * @param array $dependencies\n                 *  An array of dependencies that this datasource has\n                 * @param array $params\n                 *  An array of all the `$dsParam*` values\n                 * @param array $elements\n                 *  An array of all the elements included in this datasource\n                 * @param array $filters\n                 *  An associative array of all the filters for this datasource with the key\n                 *  being the `field_id` and the value the filter.\n                 */\n                Symphony::ExtensionManager()->notifyMembers('DatasourcePreEdit', '/blueprints/datasources/', array(\n                    'file' => $file,\n                    'contents' => &$dsShell,\n                    'dependencies' => $dependencies,\n                    'params' => $params,\n                    'elements' => $elements,\n                    'filters' => $filters\n                ));\n            }\n\n            // Remove left over placeholders\n            $dsShell = preg_replace(array('/<!--[\\w ]++-->/', '/(\\t+[\\r\\n]){2,}/', '/(\\r\\n){2,}/'), '$1', $dsShell);\n\n            // Write the file\n            if (!is_writable(dirname($file)) || !General::writeFile($file, $dsShell, Symphony::Configuration()->get('write_mode', 'file'), 'w', true)) {\n                $this->pageAlert(\n                    __('Failed to write Data source to disk.')\n                    . ' ' . __('Please check permissions on %s.', array('<code>/workspace/data-sources</code>')),\n                    Alert::ERROR\n                );\n\n                // Write successful\n            } else {\n                if (function_exists('opcache_invalidate')) {\n                    opcache_invalidate($file, true);\n                }\n\n                // Attach this datasources to pages\n                $connections = $fields['connections'];\n                ResourceManager::setPages(ResourceManager::RESOURCE_TYPE_DS, is_null($existing_handle) ? $classname : $existing_handle, $connections);\n\n                // If the datasource has been updated and the name changed, then adjust all the existing pages that have the old datasource name\n                if ($queueForDeletion) {\n                    General::deleteFile($queueForDeletion);\n\n                    // Update pages that use this DS\n                    $pages = PageManager::fetch(false, array('data_sources', 'id'), array(\"\n                        `data_sources` REGEXP '[[:<:]]\" . $existing_handle . \"[[:>:]]'\n                    \"));\n\n                    if (is_array($pages) && !empty($pages)) {\n                        foreach ($pages as $page) {\n                            $page['data_sources'] = preg_replace('/\\b'.$existing_handle.'\\b/i', $classname, $page['data_sources']);\n\n                            PageManager::edit($page['id'], $page);\n                        }\n                    }\n                }\n\n                if ($this->_context[0] == 'new') {\n                    /**\n                     * After creating the Datasource, the path to the Datasource file is provided\n                     *\n                     * @delegate DatasourcePostCreate\n                     * @since Symphony 2.2\n                     * @param string $context\n                     * '/blueprints/datasources/'\n                     * @param string $file\n                     *  The path to the Datasource file\n                     */\n                    Symphony::ExtensionManager()->notifyMembers('DatasourcePostCreate', '/blueprints/datasources/', array(\n                        'file' => $file\n                    ));\n                } else {\n                    /**\n                     * After editing the Datasource, the path to the Datasource file is provided\n                     *\n                     * @delegate DatasourcePostEdit\n                     * @since Symphony 2.2\n                     * @param string $context\n                     * '/blueprints/datasources/'\n                     * @param string $file\n                     *  The path to the Datasource file\n                     * @param string $previous_file\n                     *  The path of the previous Datasource file in the case where a Datasource may\n                     *  have been renamed. To get the handle from this value, see\n                     *  `DatasourceManager::__getHandleFromFilename`\n                     */\n                    Symphony::ExtensionManager()->notifyMembers('DatasourcePostEdit', '/blueprints/datasources/', array(\n                        'file' => $file,\n                        'previous_file' => ($queueForDeletion) ? $queueForDeletion : null\n                    ));\n                }\n\n                redirect(SYMPHONY_URL . '/blueprints/datasources/edit/'.$classname.'/'.($this->_context[0] == 'new' ? 'created' : 'saved') . '/');\n            }\n        }\n    }\n\n    public static function injectFilters(&$shell, array $filters)\n    {\n        if (empty($filters)) {\n            return;\n        }\n\n        $placeholder = '<!-- FILTERS -->';\n        $string = 'public $dsParamFILTERS = array(' . PHP_EOL;\n\n        foreach ($filters as $key => $val) {\n            if (trim($val) == '') {\n                continue;\n            }\n\n            $string .= \"        '$key' => '\" . addslashes($val) . \"',\" . PHP_EOL;\n        }\n\n        $string .= \"    );\" . PHP_EOL . \"        \" . $placeholder;\n\n        $shell = str_replace($placeholder, trim($string), $shell);\n    }\n\n    public static function injectAboutInformation(&$shell, array $details)\n    {\n        if (empty($details)) {\n            return;\n        }\n\n        foreach ($details as $key => $val) {\n            $shell = str_replace('<!-- ' . strtoupper($key) . ' -->', addslashes($val), $shell);\n        }\n    }\n\n    public function __injectIncludedElements(&$shell, $elements)\n    {\n        if (!is_array($elements) || empty($elements)) {\n            return;\n        }\n\n        $placeholder = '<!-- INCLUDED ELEMENTS -->';\n        $shell = str_replace($placeholder, \"public \\$dsParamINCLUDEDELEMENTS = array(\" . PHP_EOL . \"        '\" . implode(\"',\" . PHP_EOL . \"        '\", $elements) . \"'\" . PHP_EOL . '    );' . PHP_EOL . \"    \" . $placeholder, $shell);\n    }\n\n    public function __injectVarList(&$shell, $vars)\n    {\n        if (!is_array($vars) || empty($vars)) {\n            return;\n        }\n\n        $var_list = null;\n\n        foreach ($vars as $key => $val) {\n            if (is_array($val)) {\n                $val = \"array(\" . PHP_EOL . \"        '\" . implode(\"',\" . PHP_EOL . \"        '\", $val) . \"'\" . PHP_EOL . '        );';\n                $var_list .= '    public $dsParam' . strtoupper($key) . ' = ' . $val . PHP_EOL;\n            } elseif (trim($val) !== '') {\n                $var_list .= '    public $dsParam' . strtoupper($key) . \" = '\" . addslashes($val) . \"';\" . PHP_EOL;\n            }\n        }\n\n        $placeholder = '<!-- VAR LIST -->';\n        $shell = str_replace($placeholder, trim($var_list) . PHP_EOL . \"    \" . $placeholder, $shell);\n    }\n\n    public function __appendAuthorFilter(&$wrapper, $h4_label, $name, $value = null, $templateOnly = true)\n    {\n        if (!$templateOnly) {\n            $li = new XMLElement('li');\n            $li->setAttribute('class', 'unique');\n            $li->setAttribute('data-type', $name);\n            $li->appendChild(new XMLElement('header', '<h4>' . $h4_label . '</h4>'));\n            $label = Widget::Label(__('Value'));\n            $label->appendChild(Widget::Input('fields[filter][author]['.$name.']', General::sanitize($value)));\n            $li->appendChild($label);\n\n            $wrapper->appendChild($li);\n        }\n\n        $li = new XMLElement('li');\n        $li->setAttribute('class', 'unique template');\n        $li->setAttribute('data-type', $name);\n        $li->appendChild(new XMLElement('header', '<h4>' . $h4_label . '</h4>'));\n        $label = Widget::Label(__('Value'));\n        $label->appendChild(Widget::Input('fields[filter][author]['.$name.']'));\n        $li->appendChild($label);\n\n        $wrapper->appendChild($li);\n    }\n\n    private static function __isValidPageString($string)\n    {\n        return (bool)preg_match('/^\\{\\$[\\w-]+(.[\\w]+(-[\\w]+)?){0,1}\\}|[\\d]+$/', $string);\n    }\n\n    /**\n     * Given a `$url` and `$timeout`, this function will use the `Gateway`\n     * class to determine that it is a valid URL and returns successfully\n     * before the `$timeout`. If it does not, an error message will be\n     * returned, otherwise true.\n     *\n     * @since Symphony 2.3\n     * @param string $url\n     * @param integer $timeout\n     *  If not provided, this will default to 6 seconds\n     * @param string $error\n     *  If this function returns false, this variable will be populated with the\n     *  error message.\n     * @return array|boolean\n     *  Returns an array with the 'data' if it is a valid URL, otherwise a string\n     *  containing an error message.\n     */\n    public static function __isValidURL($url, $timeout = 6, &$error)\n    {\n        if (!filter_var($url, FILTER_VALIDATE_URL)) {\n            $error = __('Invalid URL');\n            return false;\n        }\n\n        // Check that URL was provided\n        $gateway = new Gateway;\n        $gateway->init($url);\n        $gateway->setopt('TIMEOUT', $timeout);\n        $data = $gateway->exec();\n\n        $info = $gateway->getInfoLast();\n\n        // 28 is CURLE_OPERATION_TIMEDOUT\n        if ($info['curl_error'] == 28) {\n            $error = __('Request timed out. %d second limit reached.', array($timeout));\n            return false;\n        } elseif ($data === false || $info['http_code'] != 200) {\n            $error = __('Failed to load URL, status code %d was returned.', array($info['http_code']));\n            return false;\n        }\n\n        return array('data' => $data);\n    }\n\n    /**\n     * Set Data Source context\n     *\n     * @since Symphony 2.3.3\n     * @param XMLElement $element\n     * @param array $context\n     */\n    public function setContext(&$element, $context)\n    {\n        $element->setAttribute('class', 'settings contextual');\n        $element->setAttribute('data-context', implode(' ', (array)$context));\n    }\n}\n", "<?php\n/**\n * @package content\n */\n\n/**\n * The Event Editor allows a developer to create events that typically\n * allow Frontend forms to populate Sections or edit Entries.\n */\n\nclass contentBlueprintsEvents extends ResourcesPage\n{\n    public $_errors = array();\n\n    public function __viewIndex($resource_type)\n    {\n        parent::__viewIndex(ResourceManager::RESOURCE_TYPE_EVENT);\n\n        $this->setTitle(__('%1$s &ndash; %2$s', array(__('Events'), __('Symphony'))));\n        $this->appendSubheading(__('Events'), Widget::Anchor(__('Create New'), Administration::instance()->getCurrentPageURL().'new/', __('Create a new event'), 'create button', null, array('accesskey' => 'c')));\n    }\n\n    public function __viewNew()\n    {\n        $this->__form();\n    }\n\n    public function __viewEdit()\n    {\n        $this->__form();\n    }\n\n    public function __viewInfo()\n    {\n        $this->__form(true);\n    }\n\n    public function __form($readonly = false)\n    {\n        $formHasErrors = (is_array($this->_errors) && !empty($this->_errors));\n\n        if ($formHasErrors) {\n            $this->pageAlert(\n                __('An error occurred while processing this form. See below for details.'),\n                Alert::ERROR\n            );\n\n            // These alerts are only valid if the form doesn't have errors\n        } elseif (isset($this->_context[2])) {\n            $time = Widget::Time();\n\n            switch ($this->_context[2]) {\n                case 'saved':\n                    $message = __('Event updated at %s.', array($time->generate()));\n                    break;\n                case 'created':\n                    $message = __('Event created at %s.', array($time->generate()));\n            }\n\n            $this->pageAlert(\n                $message\n                . ' <a href=\"' . SYMPHONY_URL . '/blueprints/events/new/\" accesskey=\"c\">'\n                . __('Create another?')\n                . '</a> <a href=\"' . SYMPHONY_URL . '/blueprints/events/\" accesskey=\"a\">'\n                . __('View all Events')\n                . '</a>',\n                Alert::SUCCESS\n            );\n        }\n\n        $isEditing = ($readonly ? true : false);\n        $fields = array(\"name\"=>null, \"filters\"=>null);\n        $about = array(\"name\"=>null);\n        $providers = Symphony::ExtensionManager()->getProvidersOf(iProvider::EVENT);\n\n        if (isset($_POST['fields'])) {\n            $fields = $_POST['fields'];\n\n            if ($this->_context[0] == 'edit') {\n                $isEditing = true;\n            }\n        } elseif ($this->_context[0] == 'edit' || $this->_context[0] == 'info') {\n            $isEditing = true;\n            $handle = $this->_context[1];\n            $existing = EventManager::create($handle);\n            $about = $existing->about();\n\n            if ($this->_context[0] == 'edit' && !$existing->allowEditorToParse()) {\n                redirect(SYMPHONY_URL . '/blueprints/events/info/' . $handle . '/');\n            }\n\n            $fields['name'] = $about['name'];\n            $fields['source'] = $existing->getSource();\n            $provided = false;\n\n            if (!empty($providers)) {\n                foreach ($providers as $providerClass => $provider) {\n                    if ($fields['source'] == call_user_func(array($providerClass, 'getClass'))) {\n                        $fields = array_merge($fields, $existing->settings());\n                        $provided = true;\n                        break;\n                    }\n                }\n            }\n\n            if (!$provided) {\n                if (isset($existing->eParamFILTERS)) {\n                    $fields['filters'] = $existing->eParamFILTERS;\n                }\n            }\n        }\n\n        // Handle name on edited changes, or from reading an edited datasource\n        if (isset($about['name'])) {\n            $name = $about['name'];\n        } elseif (isset($fields['name'])) {\n            $name = $fields['name'];\n        }\n\n        $this->setPageType('form');\n        $this->setTitle(__(($isEditing ? '%1$s &ndash; %2$s &ndash; %3$s' : '%2$s &ndash; %3$s'), array($name, __('Events'), __('Symphony'))));\n        $this->appendSubheading(($isEditing ? $about['name'] : __('Untitled')));\n        $this->insertBreadcrumbs(array(\n            Widget::Anchor(__('Events'), SYMPHONY_URL . '/blueprints/events/'),\n        ));\n\n        if (!$readonly) {\n            $fieldset = new XMLElement('fieldset');\n            $fieldset->setAttribute('class', 'settings');\n            $fieldset->appendChild(new XMLElement('legend', __('Essentials')));\n\n            // Target\n            $sources = new XMLElement('div', null, array('class' => 'apply actions'));\n            $div = new XMLElement('div');\n            $label = Widget::Label(__('Target'), null, 'apply-label-left');\n            $sources->appendChild($label);\n            $sources->appendChild($div);\n\n            $sections = SectionManager::fetch(null, 'ASC', 'name');\n            $options = array();\n            $section_options = array();\n            $source = isset($fields['source']) ? $fields['source'] : null;\n\n            if (is_array($sections) && !empty($sections)) {\n                $section_options = array('label' => __('Sections'), 'options' => array());\n\n                foreach ($sections as $s) {\n                    $section_options['options'][] = array($s->get('id'), $source == $s->get('id'), General::sanitize($s->get('name')));\n                }\n            }\n\n            $options[] = $section_options;\n\n            // Loop over the event providers\n            if (!empty($providers)) {\n                $p = array('label' => __('From extensions'), 'options' => array());\n\n                foreach ($providers as $providerClass => $provider) {\n                    $p['options'][] = array(\n                        $providerClass, ($fields['source'] == $providerClass), $provider\n                    );\n                }\n\n                $options[] = $p;\n            }\n\n            $div->appendChild(\n                Widget::Select('source', $options, array('id' => 'event-context'))\n            );\n\n            if (isset($this->_errors['source'])) {\n                $this->Context->prependChild(Widget::Error($sources, $this->_errors['source']));\n            } else {\n                $this->Context->prependChild($sources);\n            }\n\n            $this->Form->appendChild(\n                Widget::Input('fields[source]', $options[0]['options'][0][0], 'hidden', array('id' => 'event-source'))\n            );\n\n            // Name\n            $group = new XMLElement('div');\n            $label = Widget::Label(__('Name'));\n            $label->appendChild(Widget::Input('fields[name]', General::sanitize($fields['name'])));\n\n            $div = new XMLElement('div');\n            $div->setAttribute('class', 'column');\n\n            if (isset($this->_errors['name'])) {\n                $div->appendChild(Widget::Error($label, $this->_errors['name']));\n            } else {\n                $div->appendChild($label);\n            }\n            $group->appendChild($div);\n            $fieldset->appendChild($group);\n            $this->Form->appendChild($fieldset);\n\n            // Filters\n            $fieldset = new XMLElement('fieldset');\n            $fieldset->setAttribute('class', 'settings pickable');\n            $fieldset->appendChild(new XMLElement('legend', __('Filters')));\n            $p = new XMLElement('p', __('Event Filters add additional conditions or actions to an event.'));\n            $p->setAttribute('class', 'help');\n            $fieldset->appendChild($p);\n\n            $filters = isset($fields['filters']) ? $fields['filters'] : array();\n            $options = array(\n                array('admin-only', in_array('admin-only', $filters), __('Admin Only')),\n                array('send-email', in_array('send-email', $filters), __('Send Notification Email')),\n                array('expect-multiple', in_array('expect-multiple', $filters), __('Allow Multiple')),\n            );\n\n            /**\n             * Allows adding of new filter rules to the Event filter rule select box\n             *\n             * @delegate AppendEventFilter\n             * @param string $context\n             * '/blueprints/events/(edit|new|info)/'\n             * @param array $selected\n             *  An array of all the selected filters for this Event\n             * @param array $options\n             *  An array of all the filters that are available, passed by reference\n             */\n            Symphony::ExtensionManager()->notifyMembers('AppendEventFilter', '/blueprints/events/' . $this->_context[0] . '/', array(\n                'selected' => $filters,\n                'options' => &$options\n            ));\n\n            $fieldset->appendChild(Widget::Select('fields[filters][]', $options, array('multiple' => 'multiple', 'id' => 'event-filters')));\n            $this->Form->appendChild($fieldset);\n\n            // Connections\n            $fieldset = new XMLElement('fieldset');\n            $fieldset->setAttribute('class', 'settings');\n            $fieldset->appendChild(new XMLElement('legend', __('Attach to Pages')));\n            $p = new XMLElement('p', __('The event will only be available on the selected pages.'));\n            $p->setAttribute('class', 'help');\n            $fieldset->appendChild($p);\n\n            $div = new XMLElement('div');\n            $label = Widget::Label(__('Pages'));\n\n            $pages = PageManager::fetch();\n            $event_handle = str_replace('-', '_', Lang::createHandle($fields['name']));\n            $connections = ResourceManager::getAttachedPages(ResourceManager::RESOURCE_TYPE_EVENT, $event_handle);\n            $selected = array();\n\n            foreach ($connections as $connection) {\n                $selected[] = $connection['id'];\n            }\n\n            $options = array();\n\n            foreach ($pages as $page) {\n                $options[] = array($page['id'], in_array($page['id'], $selected), PageManager::resolvePageTitle($page['id']));\n            }\n\n            $label->appendChild(Widget::Select('fields[connections][]', $options, array('multiple' => 'multiple')));\n            $div->appendChild($label);\n\n            $fieldset->appendChild($div);\n            $this->Form->appendChild($fieldset);\n\n            // Providers\n            if (!empty($providers)) {\n                foreach ($providers as $providerClass => $provider) {\n                    if ($isEditing && $fields['source'] !== call_user_func(array($providerClass, 'getSource'))) {\n                        continue;\n                    }\n\n                    call_user_func_array(array($providerClass, 'buildEditor'), array($this->Form, &$this->_errors, $fields, $handle));\n                }\n            }\n        } else {\n            // Author\n            if (isset($about['author']['website'])) {\n                $link = Widget::Anchor($about['author']['name'], General::validateURL($about['author']['website']));\n            } elseif (isset($about['author']['email'])) {\n                $link = Widget::Anchor($about['author']['name'], 'mailto:' . $about['author']['email']);\n            } else {\n                $link = $about['author']['name'];\n            }\n\n            if ($link) {\n                $fieldset = new XMLElement('fieldset');\n                $fieldset->setAttribute('class', 'settings');\n                $fieldset->appendChild(new XMLElement('legend', __('Author')));\n                $fieldset->appendChild(new XMLElement('p', $link->generate(false)));\n                $this->Form->appendChild($fieldset);\n            }\n\n            // Version\n            $fieldset = new XMLElement('fieldset');\n            $fieldset->setAttribute('class', 'settings');\n            $fieldset->appendChild(new XMLElement('legend', __('Version')));\n            $version = array_key_exists('version', $about) ? $about['version'] : null;\n            $release_date = array_key_exists('release-date', $about) ? $about['release-date'] : filemtime(EventManager::__getDriverPath($handle));\n\n            if (preg_match('/^\\d+(\\.\\d+)*$/', $version)) {\n                $fieldset->appendChild(\n                    new XMLElement('p', __('%1$s released on %2$s', array($version, DateTimeObj::format($release_date, __SYM_DATE_FORMAT__))))\n                );\n            } elseif (!is_null($version)) {\n                $fieldset->appendChild(\n                    new XMLElement('p', __('Created by %1$s at %2$s', array($version, DateTimeObj::format($release_date, __SYM_DATE_FORMAT__))))\n                );\n            } else {\n                $fieldset->appendChild(\n                    new XMLElement('p', __('Last modified on %s', array(DateTimeObj::format($release_date, __SYM_DATE_FORMAT__))))\n                );\n            }\n            $this->Form->appendChild($fieldset);\n        }\n\n        // If we are editing an event, it assumed that the event has documentation\n        $fieldset = new XMLElement('fieldset');\n        $fieldset->setAttribute('id', 'event-documentation');\n        $fieldset->setAttribute('class', 'settings');\n\n        if ($isEditing && method_exists($existing, 'documentation')) {\n            $doc = $existing->documentation();\n\n            if ($doc) {\n                $fieldset->setValue(\n                    '<legend>' . __('Documentation') . '</legend>' . PHP_EOL .\n                    General::tabsToSpaces(is_object($doc) ? $doc->generate(true, 4) : $doc)\n                );\n            }\n        }\n\n        $this->Form->appendChild($fieldset);\n\n        $div = new XMLElement('div');\n        $div->setAttribute('class', 'actions');\n        $div->appendChild(Widget::Input('action[save]', ($isEditing ? __('Save Changes') : __('Create Event')), 'submit', array('accesskey' => 's')));\n\n        if ($isEditing) {\n            $button = new XMLElement('button', __('Delete'));\n            $button->setAttributeArray(array('name' => 'action[delete]', 'class' => 'button confirm delete', 'title' => __('Delete this event'), 'type' => 'submit', 'accesskey' => 'd', 'data-message' => __('Are you sure you want to delete this event?')));\n            $div->appendChild($button);\n        }\n\n        if (!$readonly) {\n            $this->Form->appendChild($div);\n        }\n    }\n\n    public function __actionNew()\n    {\n        if (array_key_exists('save', $_POST['action'])) {\n            return $this->__formAction();\n        }\n    }\n\n    public function __actionEdit()\n    {\n        if (array_key_exists('save', $_POST['action'])) {\n            return $this->__formAction();\n        } elseif (array_key_exists('delete', $_POST['action'])) {\n            /**\n             * Prior to deleting the Event file. Target file path is provided.\n             *\n             * @delegate EventPreDelete\n             * @since Symphony 2.2\n             * @param string $context\n             * '/blueprints/events/'\n             * @param string $file\n             *  The path to the Event file\n             */\n            Symphony::ExtensionManager()->notifyMembers('EventPreDelete', '/blueprints/events/', array('file' => EVENTS . \"/event.\" . $this->_context[1] . \".php\"));\n\n            if (!General::deleteFile(EVENTS . '/event.' . $this->_context[1] . '.php')) {\n                $this->pageAlert(\n                    __('Failed to delete %s.', array('<code>' . $this->_context[1] . '</code>'))\n                    . ' ' . __('Please check permissions on %s.', array('<code>/workspace/events</code>')),\n                    Alert::ERROR\n                );\n            } else {\n                $pages = ResourceManager::getAttachedPages(ResourceManager::RESOURCE_TYPE_EVENT, $this->_context[1]);\n\n                foreach ($pages as $page) {\n                    ResourceManager::detach(ResourceManager::RESOURCE_TYPE_EVENT, $this->_context[1], $page['id']);\n                }\n\n                redirect(SYMPHONY_URL . '/blueprints/events/');\n            }\n        }\n    }\n\n    public function __actionIndex($resource_type)\n    {\n        return parent::__actionIndex(ResourceManager::RESOURCE_TYPE_EVENT);\n    }\n\n    public function __formAction()\n    {\n        $fields = $_POST['fields'];\n        $this->_errors = array();\n        $providers = Symphony::ExtensionManager()->getProvidersOf(iProvider::EVENT);\n        $providerClass = null;\n\n        if (trim($fields['name']) == '') {\n            $this->_errors['name'] = __('This is a required field');\n        }\n\n        if (trim($fields['source']) == '') {\n            $this->_errors['source'] = __('This is a required field');\n        }\n\n        $filters = isset($fields['filters']) ? $fields['filters'] : array();\n\n        // See if a Provided Datasource is saved\n        if (!empty($providers)) {\n            foreach ($providers as $providerClass => $provider) {\n                if ($fields['source'] == call_user_func(array($providerClass, 'getSource'))) {\n                    call_user_func_array(array($providerClass, 'validate'), array(&$fields, &$this->_errors));\n                    break;\n                }\n\n                unset($providerClass);\n            }\n        }\n\n        $classname = Lang::createHandle($fields['name'], 255, '_', false, true, array('@^[^a-z\\d]+@i' => '', '/[^\\w-\\.]/i' => ''));\n        $rootelement = str_replace('_', '-', $classname);\n        $extends = 'SectionEvent';\n\n        // Check to make sure the classname is not empty after handlisation.\n        if (empty($classname) && !isset($this->_errors['name'])) {\n            $this->_errors['name'] = __('Please ensure name contains at least one Latin-based character.', array($classname));\n        }\n\n        $file = EVENTS . '/event.' . $classname . '.php';\n        $isDuplicate = false;\n        $queueForDeletion = null;\n\n        if ($this->_context[0] == 'new' && is_file($file)) {\n            $isDuplicate = true;\n        } elseif ($this->_context[0] == 'edit') {\n            $existing_handle = $this->_context[1];\n\n            if ($classname != $existing_handle && is_file($file)) {\n                $isDuplicate = true;\n            } elseif ($classname != $existing_handle) {\n                $queueForDeletion = EVENTS . '/event.' . $existing_handle . '.php';\n            }\n        }\n\n        // Duplicate\n        if ($isDuplicate) {\n            $this->_errors['name'] = __('An Event with the name %s already exists', array('<code>' . $classname . '</code>'));\n        }\n\n        if (empty($this->_errors)) {\n            $source = $fields['source'];\n            $params = array(\n                'rootelement' => $rootelement,\n            );\n\n            $about = array(\n                'name' => $fields['name'],\n                'version' => 'Symphony ' . Symphony::Configuration()->get('version', 'symphony'),\n                'release date' => DateTimeObj::getGMT('c'),\n                'author name' => Symphony::Author()->getFullName(),\n                'author website' => URL,\n                'author email' => Symphony::Author()->get('email')\n            );\n\n            // If there is a provider, get their template\n            if ($providerClass) {\n                $eventShell = file_get_contents(call_user_func(array($providerClass, 'getTemplate')));\n            } else {\n                $eventShell = file_get_contents($this->getTemplate('blueprints.event'));\n                $about['trigger condition'] = $rootelement;\n            }\n\n            $this->__injectAboutInformation($eventShell, $about);\n\n            // Replace the name\n            $eventShell = str_replace('<!-- CLASS NAME -->', $classname, $eventShell);\n\n            // Build the templates\n            if ($providerClass) {\n                $eventShell = call_user_func(array($providerClass, 'prepare'), $fields, $params, $eventShell);\n            } else {\n                $this->__injectFilters($eventShell, $filters);\n\n                // Add Documentation\n                $ajaxEventDoc = new contentAjaxEventDocumentation();\n                $doc_parts = array();\n\n                // Add Documentation (Success/Failure)\n                $ajaxEventDoc->addEntrySuccessDoc($doc_parts, $rootelement, $filters);\n                $ajaxEventDoc->addEntryFailureDoc($doc_parts, $rootelement, $filters);\n\n                // Filters\n                $ajaxEventDoc->addDefaultFiltersDoc($doc_parts, $rootelement, $filters);\n\n                // Frontend Markup\n                $ajaxEventDoc->addFrontendMarkupDoc($doc_parts, $rootelement, $fields['source'], $filters);\n                $ajaxEventDoc->addSendMailFilterDoc($doc_parts, $filters);\n\n                /**\n                 * Allows adding documentation for new filters. A reference to the $documentation\n                 * array is provided, along with selected filters\n                 * @delegate AppendEventFilterDocumentation\n                 * @param string $context\n                 * '/blueprints/events/(edit|new|info)/'\n                 * @param array $selected\n                 *  An array of all the selected filters for this Event\n                 * @param array $documentation\n                 *  An array of all the documentation XMLElements, passed by reference\n                 * @param string $rootelment\n                 *  The name of this event, as a handle.\n                 */\n                Symphony::ExtensionManager()->notifyMembers('AppendEventFilterDocumentation', '/blueprints/events/', array(\n                    'selected' => $filters,\n                    'documentation' => &$doc_parts,\n                    'rootelement' => $rootelement\n                ));\n\n                $documentation = join(PHP_EOL, array_map(function($part) {\n                    return rtrim($part->generate(true, 4));\n                }, $doc_parts));\n                $documentation = str_replace('\\'', '\\\\\\'', $documentation);\n\n                $eventShell = str_replace('<!-- CLASS EXTENDS -->', $extends, $eventShell);\n                $eventShell = str_replace('<!-- DOCUMENTATION -->', General::tabsToSpaces($documentation, 4), $eventShell);\n            }\n\n            $eventShell = str_replace('<!-- ROOT ELEMENT -->', $rootelement, $eventShell);\n            $eventShell = str_replace('<!-- CLASS NAME -->', $classname, $eventShell);\n            $eventShell = str_replace('<!-- SOURCE -->', $source, $eventShell);\n\n            // Remove left over placeholders\n            $eventShell = preg_replace(array('/<!--[\\w ]++-->/'), '', $eventShell);\n\n            if ($this->_context[0] == 'new') {\n                /**\n                 * Prior to creating an Event, the file path where it will be written to\n                 * is provided and well as the contents of that file.\n                 *\n                 * @delegate EventsPreCreate\n                 * @since Symphony 2.2\n                 * @param string $context\n                 * '/blueprints/events/'\n                 * @param string $file\n                 *  The path to the Event file\n                 * @param string $contents\n                 *  The contents for this Event as a string passed by reference\n                 * @param array $filters\n                 *  An array of the filters attached to this event\n                 */\n                Symphony::ExtensionManager()->notifyMembers('EventPreCreate', '/blueprints/events/', array(\n                    'file' => $file,\n                    'contents' => &$eventShell,\n                    'filters' => $filters\n                ));\n            } else {\n                /**\n                 * Prior to editing an Event, the file path where it will be written to\n                 * is provided and well as the contents of that file.\n                 *\n                 * @delegate EventPreEdit\n                 * @since Symphony 2.2\n                 * @param string $context\n                 * '/blueprints/events/'\n                 * @param string $file\n                 *  The path to the Event file\n                 * @param string $contents\n                 *  The contents for this Event as a string passed by reference\n                 * @param array $filters\n                 *  An array of the filters attached to this event\n                 */\n                Symphony::ExtensionManager()->notifyMembers('EventPreEdit', '/blueprints/events/', array(\n                    'file' => $file,\n                    'contents' => &$eventShell,\n                    'filters' => $filters\n                ));\n            }\n\n            // Write the file\n            if (!is_writable(dirname($file)) || !General::writeFile($file, $eventShell, Symphony::Configuration()->get('write_mode', 'file'))) {\n                $this->pageAlert(\n                    __('Failed to write Event to disk.')\n                    . ' ' . __('Please check permissions on %s.', array('<code>/workspace/events</code>')),\n                    Alert::ERROR\n                );\n\n                // Write successful\n            } else {\n                if (function_exists('opcache_invalidate')) {\n                    opcache_invalidate($file, true);\n                }\n\n                // Attach this event to pages\n                $connections = $fields['connections'];\n                ResourceManager::setPages(ResourceManager::RESOURCE_TYPE_EVENT, is_null($existing_handle) ? $classname : $existing_handle, $connections);\n\n                if ($queueForDeletion) {\n                    General::deleteFile($queueForDeletion);\n\n                    $pages = PageManager::fetch(false, array('events', 'id'), array(\"\n                        `events` REGEXP '[[:<:]]\" . $existing_handle . \"[[:>:]]'\n                    \"));\n\n                    if (is_array($pages) && !empty($pages)) {\n                        foreach ($pages as $page) {\n                            $page['events'] = preg_replace('/\\b'.$existing_handle.'\\b/i', $classname, $page['events']);\n\n                            PageManager::edit($page['id'], $page);\n                        }\n                    }\n                }\n\n                if ($this->_context[0] == 'new') {\n                    /**\n                     * After creating the Event, the path to the Event file is provided\n                     *\n                     * @delegate EventPostCreate\n                     * @since Symphony 2.2\n                     * @param string $context\n                     * '/blueprints/events/'\n                     * @param string $file\n                     *  The path to the Event file\n                     */\n                    Symphony::ExtensionManager()->notifyMembers('EventPostCreate', '/blueprints/events/', array(\n                        'file' => $file\n                    ));\n                } else {\n                    /**\n                     * After editing the Event, the path to the Event file is provided\n                     *\n                     * @delegate EventPostEdit\n                     * @since Symphony 2.2\n                     * @param string $context\n                     * '/blueprints/events/'\n                     * @param string $file\n                     *  The path to the Event file\n                     * @param string $previous_file\n                     *  The path of the previous Event file in the case where an Event may\n                     *  have been renamed. To get the handle from this value, see\n                     *  `EventManager::__getHandleFromFilename`\n                     */\n                    Symphony::ExtensionManager()->notifyMembers('EventPostEdit', '/blueprints/events/', array(\n                        'file' => $file,\n                        'previous_file' => ($queueForDeletion) ? $queueForDeletion : null\n                    ));\n                }\n\n                redirect(SYMPHONY_URL . '/blueprints/events/edit/'.$classname.'/'.($this->_context[0] == 'new' ? 'created' : 'saved') . '/');\n            }\n        }\n    }\n\n    public function __injectFilters(&$shell, $elements)\n    {\n        if (!is_array($elements) || empty($elements)) {\n            return;\n        }\n\n        $shell = str_replace('<!-- FILTERS -->', \"'\" . implode(\"',\" . PHP_EOL . \"\\t\\t\\t\\t'\", $elements) . \"'\", $shell);\n    }\n\n    public function __injectAboutInformation(&$shell, $details)\n    {\n        if (!is_array($details) || empty($details)) {\n            return;\n        }\n\n        foreach ($details as $key => $val) {\n            $shell = str_replace('<!-- ' . strtoupper($key) . ' -->', addslashes($val), $shell);\n        }\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * @package content\n */\n/**\n * The Datasource Editor page allows a developer to create new datasources\n * from the four Symphony types, Section, Authors, Navigation and Static XML\n */\n\nclass contentBlueprintsDatasources extends ResourcesPage\n{\n    public $_errors = array();\n\n    public function __viewIndex($resource_type)\n    {\n        parent::__viewIndex(ResourceManager::RESOURCE_TYPE_DS);\n\n        $this->setTitle(__('%1$s &ndash; %2$s', array(__('Data Sources'), __('Symphony'))));\n        $this->appendSubheading(__('Data Sources'), Widget::Anchor(__('Create New'), Administration::instance()->getCurrentPageURL().'new/', __('Create a new data source'), 'create button', null, array('accesskey' => 'c')));\n    }\n\n    // Both the Edit and New pages need the same form\n    public function __viewNew()\n    {\n        $this->__form();\n    }\n\n    public function __viewEdit()\n    {\n        $this->__form();\n    }\n\n    public function __form()\n    {\n        $formHasErrors = (is_array($this->_errors) && !empty($this->_errors));\n\n        if ($formHasErrors) {\n            $this->pageAlert(\n                __('An error occurred while processing this form. See below for details.'),\n                Alert::ERROR\n            );\n\n            // These alerts are only valid if the form doesn't have errors\n        } elseif (isset($this->_context[2])) {\n            $time = Widget::Time();\n\n            switch ($this->_context[2]) {\n                case 'saved':\n                    $message = __('Data Source updated at %s.', array($time->generate()));\n                    break;\n                case 'created':\n                    $message = __('Data Source created at %s.', array($time->generate()));\n            }\n\n            $this->pageAlert(\n                $message\n                . ' <a href=\"' . SYMPHONY_URL . '/blueprints/datasources/new/\" accesskey=\"c\">'\n                . __('Create another?')\n                . '</a> <a href=\"' . SYMPHONY_URL . '/blueprints/datasources/\" accesskey=\"a\">'\n                . __('View all Data Sources')\n                . '</a>',\n                Alert::SUCCESS\n            );\n        }\n\n        $providers = Symphony::ExtensionManager()->getProvidersOf(iProvider::DATASOURCE);\n        $isEditing = false;\n        $about = $handle = null;\n        $fields = array(\n            'name' => null,\n            'source' => null,\n            'filter'=> null,\n            'required_url_param' => null,\n            'negate_url_param' => null,\n            'param' => null,\n        );\n\n        if (isset($_POST['fields'])) {\n            $fields = $_POST['fields'];\n\n            if (\n                !in_array($fields['source'], array('authors', 'navigation', 'static_xml'))\n                && !empty($fields['filter']) && is_array($fields['filter'])\n            ) {\n                $filters = array();\n                foreach ($fields['filter'] as $f) {\n                    foreach ($f as $key => $val) {\n                        $filters[$key] = $val;\n                    }\n                }\n\n                $fields['filter'][$fields['source']] = $filters;\n            }\n\n            if (!isset($fields['xml_elements']) || !is_array($fields['xml_elements'])) {\n                $fields['xml_elements'] = array();\n            }\n\n            if ($this->_context[0] == 'edit') {\n                $isEditing = true;\n            }\n        } elseif ($this->_context[0] == 'edit') {\n            $isEditing = true;\n            $handle = $this->_context[1];\n            $existing = DatasourceManager::create($handle, array(), false);\n            $order = isset($existing->dsParamORDER) ? $existing->dsParamORDER : 'asc';\n\n            if (!$existing->allowEditorToParse()) {\n                redirect(SYMPHONY_URL . '/blueprints/datasources/info/' . $handle . '/');\n            }\n\n            $about = $existing->about();\n            $fields['name'] = $about['name'];\n\n            $fields['order'] = ($order == 'rand') ? 'random' : $order;\n            $fields['param'] = isset($existing->dsParamPARAMOUTPUT) ? $existing->dsParamPARAMOUTPUT : null;\n            $fields['required_url_param'] = isset($existing->dsParamREQUIREDPARAM) ? trim($existing->dsParamREQUIREDPARAM) : null;\n            $fields['negate_url_param'] = isset($existing->dsParamNEGATEPARAM) ? trim($existing->dsParamNEGATEPARAM) : null;\n\n            if (isset($existing->dsParamINCLUDEDELEMENTS) && is_array($existing->dsParamINCLUDEDELEMENTS)) {\n                $fields['xml_elements'] = $existing->dsParamINCLUDEDELEMENTS;\n            } else {\n                $fields['xml_elements'] = array();\n            }\n\n            $fields['sort'] = isset($existing->dsParamSORT) ? $existing->dsParamSORT : null;\n            $fields['paginate_results'] = isset($existing->dsParamPAGINATERESULTS) ? $existing->dsParamPAGINATERESULTS : 'yes';\n            $fields['page_number'] = isset($existing->dsParamSTARTPAGE) ? $existing->dsParamSTARTPAGE : '1';\n            $fields['group'] = isset($existing->dsParamGROUP) ? $existing->dsParamGROUP : null;\n            $fields['html_encode'] = isset($existing->dsParamHTMLENCODE) ? $existing->dsParamHTMLENCODE : 'no';\n            $fields['associated_entry_counts'] = isset($existing->dsParamASSOCIATEDENTRYCOUNTS) ? $existing->dsParamASSOCIATEDENTRYCOUNTS : 'no';\n            $fields['redirect_on_empty'] = isset($existing->dsParamREDIRECTONEMPTY) ? $existing->dsParamREDIRECTONEMPTY : 'no';\n            $fields['redirect_on_forbidden'] = isset($existing->dsParamREDIRECTONFORBIDDEN) ? $existing->dsParamREDIRECTONFORBIDDEN : 'no';\n            $fields['redirect_on_required'] = isset($existing->dsParamREDIRECTONREQUIRED) ? $existing->dsParamREDIRECTONREQUIRED : 'no';\n\n            if (!isset($existing->dsParamFILTERS) || !is_array($existing->dsParamFILTERS)) {\n                $existing->dsParamFILTERS = array();\n            }\n\n            if (!empty($existing->dsParamFILTERS)) {\n                $existing->dsParamFILTERS = array_map('stripslashes', $existing->dsParamFILTERS);\n            }\n\n            $fields['source'] = $existing->getSource();\n\n            $provided = false;\n\n            if (!empty($providers)) {\n                foreach ($providers as $providerClass => $provider) {\n                    if ($fields['source'] == call_user_func(array($providerClass, 'getClass'))) {\n                        $fields = array_merge($fields, $existing->settings());\n                        $provided = true;\n                        break;\n                    }\n                }\n            }\n\n            if ($provided === false) {\n                switch ($fields['source']) {\n                    case 'authors':\n                        $fields['filter']['author'] = $existing->dsParamFILTERS;\n                        break;\n                    case 'navigation':\n                        $fields['filter']['navigation'] = $existing->dsParamFILTERS;\n                        break;\n                    case 'static_xml':\n                        // Symphony 2.3+\n                        if (isset($existing->dsParamSTATIC)) {\n                            $fields['static_xml'] = trim($existing->dsParamSTATIC);\n\n                            // Handle Symphony 2.2.2 to 2.3 DS's\n                        } elseif (isset($existing->dsSTATIC)) {\n                            $fields['static_xml'] = trim($existing->dsSTATIC);\n\n                            // Handle pre Symphony 2.2.1 Static DS's\n                        } else {\n                            $fields['static_xml'] = trim($existing->grab());\n                        }\n                        break;\n                    default:\n                        $fields['filter'][$fields['source']] = $existing->dsParamFILTERS;\n                        $fields['max_records'] = $existing->dsParamLIMIT;\n                        break;\n                }\n            }\n        } else {\n            $fields['max_records'] = '20';\n            $fields['page_number'] = '1';\n            $fields['order'] = 'desc';\n        }\n\n        // Handle name on edited changes, or from reading an edited datasource\n        if (isset($about['name'])) {\n            $name = $about['name'];\n        } elseif (isset($fields['name'])) {\n            $name = $fields['name'];\n        }\n\n        $this->setPageType('form');\n        $this->setTitle(__(($isEditing ? '%1$s &ndash; %2$s &ndash; %3$s' : '%2$s &ndash; %3$s'), array($name, __('Data Sources'), __('Symphony'))));\n        $this->appendSubheading(($isEditing ? $name : __('Untitled')));\n        $this->insertBreadcrumbs(array(\n            Widget::Anchor(__('Data Sources'), SYMPHONY_URL . '/blueprints/datasources/'),\n        ));\n\n        // Sources\n        $sources = new XMLElement('div', null, array('class' => 'apply actions'));\n        $div = new XMLElement('div');\n        $label = Widget::Label(__('Source'), null, 'apply-label-left');\n        $sources->appendChild($label);\n        $sources->appendChild($div);\n\n        $sections = SectionManager::fetch(null, 'ASC', 'name');\n\n        if (!is_array($sections)) {\n            $sections = array();\n        }\n\n        $field_groups = array();\n\n        foreach ($sections as $section) {\n            $field_groups[$section->get('id')] = array('fields' => $section->fetchFields(), 'section' => $section);\n        }\n\n        $options = array(\n            array('label' => __('System'), 'data-label' => 'system', 'options' => array(\n                    array('authors', ($fields['source'] == 'authors'), __('Authors'), null, null, array('data-context' => 'authors')),\n                    array('navigation', ($fields['source'] == 'navigation'), __('Navigation'), null, null, array('data-context' => 'navigation')),\n            )),\n            array('label' => __('Custom XML'), 'data-label' => 'custom-xml', 'options' => array(\n                    array('static_xml', ($fields['source'] == 'static_xml'), __('Static XML'), null, null, array('data-context' => 'static-xml')),\n            )),\n        );\n\n        // Loop over the datasource providers\n        if (!empty($providers)) {\n            $p = array('label' => __('From extensions'), 'data-label' => 'from_extensions', 'options' => array());\n\n            foreach ($providers as $providerClass => $provider) {\n                $p['options'][] = array(\n                    $providerClass, ($fields['source'] == $providerClass), $provider, null, null, array('data-context' => Lang::createHandle($provider))\n                );\n            }\n\n            $options[] = $p;\n        }\n\n        // Add Sections\n        if (is_array($sections) && !empty($sections)) {\n            array_unshift($options, array('label' => __('Sections'), 'data-label' => 'sections', 'options' => array()));\n\n            foreach ($sections as $s) {\n                $options[0]['options'][] = array($s->get('id'), ($fields['source'] == $s->get('id')), General::sanitize($s->get('name')));\n            }\n        }\n\n        $div->appendChild(Widget::Select('source', $options, array('id' => 'ds-context')));\n        $this->Context->prependChild($sources);\n\n        $this->Form->appendChild(\n            Widget::Input('fields[source]', null, 'hidden', array('id' => 'ds-source'))\n        );\n\n        // Name\n        $fieldset = new XMLElement('fieldset');\n        $fieldset->setAttribute('class', 'settings');\n        $fieldset->appendChild(new XMLElement('legend', __('Essentials')));\n\n        $group = new XMLElement('div');\n\n        $label = Widget::Label(__('Name'));\n        $label->appendChild(Widget::Input('fields[name]', General::sanitize($fields['name'])));\n\n        if (isset($this->_errors['name'])) {\n            $group->appendChild(Widget::Error($label, $this->_errors['name']));\n        } else {\n            $group->appendChild($label);\n        }\n\n        $fieldset->appendChild($group);\n        $this->Form->appendChild($fieldset);\n\n        // Conditions\n        $fieldset = new XMLElement('fieldset');\n        $this->setContext($fieldset, array('sections', 'system', 'custom-xml'));\n        $fieldset->appendChild(new XMLElement('legend', __('Conditions')));\n        $p = new XMLElement('p', __('Leaving these fields empty will always execute the data source.'));\n        $p->setAttribute('class', 'help');\n        $fieldset->appendChild($p);\n\n        $group = new XMLElement('div');\n        $group->setAttribute('class', 'two columns');\n\n        $label = Widget::Label(__('Required Parameter'));\n        $label->setAttribute('class', 'column ds-param');\n        $label->appendChild(new XMLElement('i', __('Optional')));\n        $input = Widget::Input('fields[required_url_param]', trim($fields['required_url_param']), 'text', array(\n            'placeholder' => __('$param'),\n            'data-search-types' => 'parameters',\n            'data-trigger' => '$'\n        ));\n        $label->appendChild($input);\n        $group->appendChild($label);\n\n        $label = Widget::Label(__('Forbidden Parameter'));\n        $label->setAttribute('class', 'column ds-param');\n        $label->appendChild(new XMLElement('i', __('Optional')));\n        $input = Widget::Input('fields[negate_url_param]', trim($fields['negate_url_param']), 'text', array(\n            'placeholder' => __('$param'),\n            'data-search-types' => 'parameters',\n            'data-trigger' => '$'\n        ));\n        $label->appendChild($input);\n        $group->appendChild($label);\n\n        $fieldset->appendChild($group);\n\n        $group = new XMLElement('div');\n        $group->setAttribute('class', 'two columns ds-param');\n\n        $label = Widget::Checkbox('fields[redirect_on_required]', $fields['redirect_on_required'], __('Redirect to 404 page when the required parameter is not present'));\n        $label->setAttribute('class', 'column');\n        $group->appendChild($label);\n\n        $label = Widget::Checkbox('fields[redirect_on_forbidden]', $fields['redirect_on_forbidden'], __('Redirect to 404 page when the forbidden parameter is present'));\n        $label->setAttribute('class', 'column');\n        $group->appendChild($label);\n\n        $fieldset->appendChild($group);\n\n        $label = Widget::Checkbox('fields[redirect_on_empty]', $fields['redirect_on_empty'], __('Redirect to 404 page when no results are found'));\n        $label->setAttribute('class', 'column');\n        $fieldset->appendChild($label);\n\n        $this->Form->appendChild($fieldset);\n\n        // Filters\n        $fieldset = new XMLElement('fieldset');\n        $this->setContext($fieldset, array('sections', 'system'));\n        $fieldset->appendChild(new XMLElement('legend', __('Filters')));\n        $p = new XMLElement('p',\n            __('Use %s syntax to filter by page parameters. A default value can be set using %s.', array(\n                '<code>{' . __('$param') . '}</code>',\n                '<code>{' . __('$param:default') . '}</code>'\n            ))\n        );\n        $p->setAttribute('class', 'help');\n        $fieldset->appendChild($p);\n\n        foreach ($field_groups as $section_id => $section_data) {\n            $div = new XMLElement('div');\n            $div->setAttribute('class', 'contextual frame filters-duplicator');\n            $div->setAttribute('data-context', 'section-' . $section_id);\n            $div->setAttribute('data-interactive', 'data-interactive');\n\n            $ol = new XMLElement('ol');\n            $ol->setAttribute('class', 'suggestable');\n            $ol->setAttribute('data-interactive', 'data-interactive');\n            $ol->setAttribute('data-add', __('Add filter'));\n            $ol->setAttribute('data-remove', __('Remove filter'));\n\n            // Add system:id filter\n            if (\n                isset($fields['filter'][$section_id]['system:id'])\n                || isset($fields['filter'][$section_id]['id'])\n            ) {\n                $id = isset($fields['filter'][$section_id]['system:id'])\n                    ? $fields['filter'][$section_id]['system:id']\n                    : $fields['filter'][$section_id]['id'];\n\n                $li = new XMLElement('li');\n                $li->setAttribute('class', 'unique');\n                $li->setAttribute('data-type', 'system:id');\n                $li->appendChild(new XMLElement('header', '<h4>' . __('System ID') . '</h4>'));\n                $label = Widget::Label(__('Value'));\n                $input = Widget::Input('fields[filter]['.$section_id.'][system:id]', General::sanitize($id));\n                $input->setAttribute('data-search-types', 'parameters');\n                $input->setAttribute('data-trigger', '{$');\n                $label->appendChild($input);\n                $li->appendChild($label);\n                $ol->appendChild($li);\n            }\n\n            $li = new XMLElement('li');\n            $li->setAttribute('class', 'unique template');\n            $li->setAttribute('data-type', 'system:id');\n            $li->appendChild(new XMLElement('header', '<h4>' . __('System ID') . '</h4>'));\n            $label = Widget::Label(__('Value'));\n            $input = Widget::Input('fields[filter]['.$section_id.'][system:id]', General::sanitize($id));\n            $input->setAttribute('data-search-types', 'parameters');\n            $input->setAttribute('data-trigger', '{$');\n            $label->appendChild($input);\n            $li->appendChild($label);\n            $ol->appendChild($li);\n\n            // Add system:date filter\n            if (\n                isset($fields['filter'][$section_id]['system:creation-date'])\n                || isset($fields['filter'][$section_id]['system:date'])\n            ) {\n                $creation_date = isset($fields['filter'][$section_id]['system:creation-date'])\n                    ? $fields['filter'][$section_id]['system:creation-date']\n                    : $fields['filter'][$section_id]['system:date'];\n\n                $li = new XMLElement('li');\n                $li->setAttribute('class', 'unique');\n                $li->setAttribute('data-type', 'system:creation-date');\n                $li->appendChild(new XMLElement('header', '<h4>' . __('System Creation Date') . '</h4>'));\n                $label = Widget::Label(__('Value'));\n                $input = Widget::Input('fields[filter]['.$section_id.'][system:creation-date]', General::sanitize($creation_date));\n                $input->setAttribute('data-search-types', 'parameters');\n                $input->setAttribute('data-trigger', '{$');\n                $label->appendChild($input);\n                $li->appendChild($label);\n                $ol->appendChild($li);\n            }\n\n            $li = new XMLElement('li');\n            $li->setAttribute('class', 'unique template');\n            $li->setAttribute('data-type', 'system:creation-date');\n            $li->appendChild(new XMLElement('header', '<h4>' . __('System Creation Date') . '</h4>'));\n            $label = Widget::Label(__('Value'));\n            $input = Widget::Input('fields[filter]['.$section_id.'][system:creation-date]');\n            $input->setAttribute('data-search-types', 'parameters');\n            $input->setAttribute('data-trigger', '{$');\n            $label->appendChild($input);\n            $li->appendChild($label);\n            $ol->appendChild($li);\n\n            if (isset($fields['filter'][$section_id]['system:modification-date'])) {\n                $li = new XMLElement('li');\n                $li->setAttribute('class', 'unique');\n                $li->setAttribute('data-type', 'system:modification-date');\n                $li->appendChild(new XMLElement('header', '<h4>' . __('System Modification Date') . '</h4>'));\n                $label = Widget::Label(__('Value'));\n                $input = Widget::Input('fields[filter]['.$section_id.'][system:modification-date]', General::sanitize($fields['filter'][$section_id]['system:modification-date']));\n                $input->setAttribute('data-search-types', 'parameters');\n                $input->setAttribute('data-trigger', '{$');\n                $label->appendChild($input);\n                $li->appendChild($label);\n                $ol->appendChild($li);\n            }\n\n            $li = new XMLElement('li');\n            $li->setAttribute('class', 'unique template');\n            $li->setAttribute('data-type', 'system:modification-date');\n            $li->appendChild(new XMLElement('header', '<h4>' . __('System Modification Date') . '</h4>'));\n            $label = Widget::Label(__('Value'));\n            $input = Widget::Input('fields[filter]['.$section_id.'][system:modification-date]');\n            $input->setAttribute('data-search-types', 'parameters');\n            $input->setAttribute('data-trigger', '{$');\n            $label->appendChild($input);\n            $li->appendChild($label);\n            $ol->appendChild($li);\n\n            if (is_array($section_data['fields']) && !empty($section_data['fields'])) {\n                foreach ($section_data['fields'] as $field) {\n                    if (!$field->canFilter()) {\n                        continue;\n                    }\n\n                    if (isset($fields['filter'][$section_id], $fields['filter'][$section_id][$field->get('id')])) {\n                        $wrapper = new XMLElement('li');\n                        $wrapper->setAttribute('class', 'unique');\n                        $wrapper->setAttribute('data-type', $field->get('element_name'));\n                        $errors = isset($this->_errors[$field->get('id')])\n                            ? $this->_errors[$field->get('id')]\n                            : array();\n\n                        $field->displayDatasourceFilterPanel($wrapper, $fields['filter'][$section_id][$field->get('id')], $errors, $section_id);\n                        $ol->appendChild($wrapper);\n                    }\n\n                    $wrapper = new XMLElement('li');\n                    $wrapper->setAttribute('class', 'unique template');\n                    $wrapper->setAttribute('data-type', $field->get('element_name'));\n                    $field->displayDatasourceFilterPanel($wrapper, null, null, $section_id);\n                    $ol->appendChild($wrapper);\n                }\n            }\n\n            $div->appendChild($ol);\n\n            $fieldset->appendChild($div);\n        }\n\n        $div = new XMLElement('div');\n        $div->setAttribute('class', 'contextual frame filters-duplicator');\n        $div->setAttribute('data-context', 'authors');\n        $div->setAttribute('data-interactive', 'data-interactive');\n\n        $ol = new XMLElement('ol');\n        $ol->setAttribute('class', 'suggestable');\n        $ol->setAttribute('data-interactive', 'data-interactive');\n        $ol->setAttribute('data-add', __('Add filter'));\n        $ol->setAttribute('data-remove', __('Remove filter'));\n\n        if (!isset($fields['filter']['author'])) {\n            $fields['filter']['author'] = array(\n                'id' => null,\n                'username' => null,\n                'first_name' => null,\n                'last_name' => null,\n                'email' => null,\n                'user_type' => null\n            );\n        }\n\n        $this->__appendAuthorFilter($ol, __('ID'), 'id', $fields['filter']['author']['id'], (!isset($fields['filter']['author']['id'])));\n        $this->__appendAuthorFilter($ol, __('Username'), 'username', $fields['filter']['author']['username'], (!isset($fields['filter']['author']['username'])));\n        $this->__appendAuthorFilter($ol, __('First Name'), 'first_name', $fields['filter']['author']['first_name'], (!isset($fields['filter']['author']['first_name'])));\n        $this->__appendAuthorFilter($ol, __('Last Name'), 'last_name', $fields['filter']['author']['last_name'], (!isset($fields['filter']['author']['last_name'])));\n        $this->__appendAuthorFilter($ol, __('Email'), 'email', $fields['filter']['author']['email'], (!isset($fields['filter']['author']['email'])));\n        $this->__appendAuthorFilter($ol, __('User Type'), 'user_type', $fields['filter']['author']['user_type'], (!isset($fields['filter']['author']['user_type'])));\n\n        $div->appendChild($ol);\n\n        $fieldset->appendChild($div);\n\n        $div = new XMLElement('div');\n        $div->setAttribute('class', 'contextual frame filters-duplicator');\n        $div->setAttribute('data-context', 'navigation');\n        $div->setAttribute('data-interactive', 'data-interactive');\n\n        $ol = new XMLElement('ol');\n        $ol->setAttribute('class', 'suggestable');\n        $ol->setAttribute('data-interactive', 'data-interactive');\n        $ol->setAttribute('data-add', __('Add filter'));\n        $ol->setAttribute('data-remove', __('Remove filter'));\n\n        $ul = new XMLElement('ul');\n        $ul->setAttribute('class', 'tags');\n        $ul->setAttribute('data-interactive', 'data-interactive');\n\n        $pages = PageManager::fetch(false, array('*'), array(), 'title ASC');\n\n        foreach ($pages as $page) {\n            $ul->appendChild(new XMLElement('li', preg_replace('/\\/{2,}/i', '/', '/' . $page['path'] . '/' . $page['handle'])));\n        }\n\n        if (isset($fields['filter']['navigation']['parent'])) {\n            $li = new XMLElement('li');\n            $li->setAttribute('class', 'unique');\n            $li->setAttribute('data-type', 'parent');\n            $li->appendChild(new XMLElement('header', '<h4>' . __('Parent Page') . '</h4>'));\n            $label = Widget::Label(__('Value'));\n            $label->appendChild(Widget::Input('fields[filter][navigation][parent]', General::sanitize($fields['filter']['navigation']['parent'])));\n            $li->appendChild($label);\n            $li->appendChild($ul);\n            $ol->appendChild($li);\n        }\n\n        $li = new XMLElement('li');\n        $li->setAttribute('class', 'unique template');\n        $li->setAttribute('data-type', 'parent');\n        $li->appendChild(new XMLElement('header', '<h4>' . __('Parent Page') . '</h4>'));\n        $label = Widget::Label(__('Value'));\n        $label->appendChild(Widget::Input('fields[filter][navigation][parent]'));\n        $li->appendChild($label);\n        $li->appendChild($ul);\n        $ol->appendChild($li);\n\n        $ul = new XMLElement('ul');\n        $ul->setAttribute('class', 'tags');\n        $ul->setAttribute('data-interactive', 'data-interactive');\n\n        if ($types = PageManager::fetchAvailablePageTypes()) {\n            foreach ($types as $type) {\n                $ul->appendChild(new XMLElement('li', $type));\n            }\n        }\n\n        if (isset($fields['filter']['navigation']['type'])) {\n            $li = new XMLElement('li');\n            $li->setAttribute('class', 'unique');\n            $li->setAttribute('data-type', 'type');\n            $li->appendChild(new XMLElement('header', '<h4>' . __('Page Type') . '</h4>'));\n            $label = Widget::Label(__('Value'));\n            $label->appendChild(Widget::Input('fields[filter][navigation][type]', General::sanitize($fields['filter']['navigation']['type'])));\n            $li->appendChild($label);\n            $li->appendChild($ul);\n            $ol->appendChild($li);\n        }\n\n        $li = new XMLElement('li');\n        $li->setAttribute('class', 'unique template');\n        $li->appendChild(new XMLElement('header', '<h4>' . __('Page Type') . '</h4>'));\n        $li->setAttribute('data-type', 'type');\n        $label = Widget::Label(__('Value'));\n        $label->appendChild(Widget::Input('fields[filter][navigation][type]'));\n        $li->appendChild($label);\n        $li->appendChild($ul);\n        $ol->appendChild($li);\n\n        $div->appendChild($ol);\n\n        $fieldset->appendChild($div);\n        $this->Form->appendChild($fieldset);\n\n        // Sorting\n        $fieldset = new XMLElement('fieldset');\n        $this->setContext($fieldset, array('sections', 'system'));\n        $fieldset->appendChild(new XMLElement('legend', __('Sorting')));\n\n        $p = new XMLElement('p',\n            __('Use %s syntax to order by page parameters.', array(\n                '<code>{' . __('$param') . '}</code>'\n            ))\n        );\n        $p->setAttribute('class', 'help');\n        $fieldset->appendChild($p);\n\n        $div = new XMLElement('div');\n\n        $label = Widget::Label(__('Sort By'));\n\n        $options = array(\n            array('label' => __('Authors'), 'data-label' => 'authors', 'options' => array(\n                    array('id', ($fields['source'] == 'authors' && $fields['sort'] == 'id'), __('Author ID')),\n                    array('username', ($fields['source'] == 'authors' && $fields['sort'] == 'username'), __('Username')),\n                    array('first-name', ($fields['source'] == 'authors' && $fields['sort'] == 'first-name'), __('First Name')),\n                    array('last-name', ($fields['source'] == 'authors' && $fields['sort'] == 'last-name'), __('Last Name')),\n                    array('email', ($fields['source'] == 'authors' && $fields['sort'] == 'email'), __('Email')),\n                    array('status', ($fields['source'] == 'authors' && $fields['sort'] == 'status'), __('Status')),\n                )\n            ),\n\n            array('label' => __('Navigation'), 'data-label' => 'navigation', 'options' => array(\n                    array('id', ($fields['source'] == 'navigation' && $fields['sort'] == 'id'), __('Page ID')),\n                    array('handle', ($fields['source'] == 'navigation' && $fields['sort'] == 'handle'), __('Handle')),\n                    array('sortorder', ($fields['source'] == 'navigation' && $fields['sort'] == 'sortorder'), __('Sort Order')),\n                )\n            ),\n        );\n\n        foreach ($field_groups as $section_id => $section_data) {\n            $optgroup = array('label' => General::sanitize($section_data['section']->get('name')), 'data-label' => 'section-' . $section_data['section']->get('id'), 'options' => array(\n                array('system:id', ($fields['source'] == $section_id && $fields['sort'] == 'system:id'), __('System ID')),\n                array('system:creation-date', ($fields['source'] == $section_id && ($fields['sort'] == 'system:creation-date' || $fields['sort'] == 'system:date')), __('System Creation Date')),\n                array('system:modification-date', ($fields['source'] == $section_id && $fields['sort'] == 'system:modification-date'), __('System Modification Date')),\n            ));\n\n            if (is_array($section_data['fields']) && !empty($section_data['fields'])) {\n                foreach ($section_data['fields'] as $input) {\n                    if (!$input->isSortable()) {\n                        continue;\n                    }\n\n                    $optgroup['options'][] = array(\n                        $input->get('element_name'),\n                        ($fields['source'] == $section_id && $input->get('element_name') == $fields['sort']),\n                        $input->get('label')\n                    );\n                }\n            }\n\n            $options[] = $optgroup;\n        }\n\n        $label->appendChild(Widget::Select('fields[sort]', $options));\n        $div->appendChild($label);\n\n        $label = Widget::Label(__('Sort Order'));\n        $label->setAttribute('class', 'ds-param');\n\n        $input = Widget::Input('fields[order]', $fields['order'], 'text', array(\n            'placeholder' => __('{$param}'),\n            'data-search-types' => 'parameters',\n            'data-trigger' => '{$'\n        ));\n        $label->appendChild($input);\n        $div->appendChild($label);\n\n        $orders = new XMLElement('ul');\n        $orders->setAttribute('class', 'tags singular');\n        $orders->setAttribute('data-interactive', 'data-interactive');\n        $orders->appendChild(new XMLElement('li', 'asc'));\n        $orders->appendChild(new XMLElement('li', 'desc'));\n        $orders->appendChild(new XMLElement('li', 'random'));\n        $div->appendChild($orders);\n\n        $fieldset->appendChild($div);\n        $this->Form->appendChild($fieldset);\n\n        // Grouping\n        $fieldset = new XMLElement('fieldset');\n        $this->setContext($fieldset, array('sections', 'authors'));\n        $fieldset->appendChild(new XMLElement('legend', __('Grouping')));\n\n        $label = Widget::Label(__('Group By'));\n        $options = array(\n            array('', null, __('None')),\n        );\n\n        foreach ($field_groups as $section_id => $section_data) {\n            $optgroup = array('label' => $section_data['section']->get('name'), 'data-label' => 'section-' . $section_data['section']->get('id'), 'options' => array());\n\n            if (is_array($section_data['fields']) && !empty($section_data['fields'])) {\n                foreach ($section_data['fields'] as $input) {\n                    if (!$input->allowDatasourceOutputGrouping()) {\n                        continue;\n                    }\n\n                    $optgroup['options'][] = array($input->get('id'), ($fields['source'] == $section_id && $fields['group'] == $input->get('id')), $input->get('label'));\n                }\n            }\n\n            $options[] = $optgroup;\n        }\n\n        $label->appendChild(Widget::Select('fields[group]', $options));\n        $fieldset->appendChild($label);\n\n        $this->Form->appendChild($fieldset);\n\n        // Pagination\n        $fieldset = new XMLElement('fieldset');\n        $this->setContext($fieldset, array('sections'));\n        $fieldset->appendChild(new XMLElement('legend', __('Pagination')));\n\n        $p = new XMLElement('p',\n            __('Use %s syntax to limit by page parameters.', array(\n                '<code>{' . __('$param') . '}</code>'\n            ))\n        );\n        $p->setAttribute('class', 'help');\n        $fieldset->appendChild($p);\n\n        $group = new XMLElement('div');\n        $group->setAttribute('class', 'two columns pagination');\n\n        $label = Widget::Label(__('Entries per Page'));\n        $label->setAttribute('class', 'column ds-param');\n        $input = Widget::Input('fields[max_records]', isset($fields['max_records']) ? $fields['max_records'] : '10', 'text', array(\n            'placeholder' => __('{$param}'),\n            'data-search-types' => 'parameters',\n            'data-trigger' => '{$'\n        ));\n        $label->appendChild($input);\n        if (isset($this->_errors['max_records'])) {\n            $group->appendChild(Widget::Error($label, $this->_errors['max_records']));\n        } else {\n            $group->appendChild($label);\n        }\n\n        $label = Widget::Label(__('Page Number'));\n        $label->setAttribute('class', 'column ds-param');\n        $input = Widget::Input('fields[page_number]', $fields['page_number'], 'text', array(\n            'placeholder' => __('{$param}'),\n            'data-search-types' => 'parameters',\n            'data-trigger' => '{$'\n        ));\n        $label->appendChild($input);\n        if (isset($this->_errors['page_number'])) {\n            $group->appendChild(Widget::Error($label, $this->_errors['page_number']));\n        } else {\n            $group->appendChild($label);\n        }\n\n        $fieldset->appendChild($group);\n\n        $label = Widget::Checkbox('fields[paginate_results]', $fields['paginate_results'], __('Enable pagination'));\n        $fieldset->appendChild($label);\n        $this->Form->appendChild($fieldset);\n\n        // Content\n        $fieldset = new XMLElement('fieldset');\n        $this->setContext($fieldset, array('sections', 'authors'));\n        $fieldset->appendChild(new XMLElement('legend', __('Content')));\n\n        // XML\n        $group = new XMLElement('div', null, array('class' => 'two columns'));\n\n        $label = Widget::Label(__('Included Elements'));\n        $label->setAttribute('class', 'column');\n\n        $options = array(\n            array('label' => __('Authors'), 'data-label' => 'authors', 'options' => array(\n                    array('username', ($fields['source'] == 'authors' && in_array('username', $fields['xml_elements'])), 'username'),\n                    array('name', ($fields['source'] == 'authors' && in_array('name', $fields['xml_elements'])), 'name'),\n                    array('email', ($fields['source'] == 'authors' && in_array('email', $fields['xml_elements'])), 'email'),\n                    array('author-token', ($fields['source'] == 'authors' && in_array('author-token', $fields['xml_elements'])), 'author-token'),\n                    array('default-area', ($fields['source'] == 'authors' && in_array('default-area', $fields['xml_elements'])), 'default-area'),\n            )),\n        );\n\n        foreach ($field_groups as $section_id => $section_data) {\n            $optgroup = array(\n                'label' => General::sanitize($section_data['section']->get('name')),\n                'data-label' => 'section-' . $section_data['section']->get('id'),\n                'options' => array(\n                    array(\n                        'system:pagination',\n                        ($fields['source'] == $section_id && in_array('system:pagination', $fields['xml_elements'])),\n                        'system: pagination'\n                    ),\n                    array(\n                        'system:date',\n                        ($fields['source'] == $section_id && in_array('system:date', $fields['xml_elements'])),\n                        'system: date'\n                    )\n                )\n            );\n\n            if (is_array($section_data['fields']) && !empty($section_data['fields'])) {\n                foreach ($section_data['fields'] as $field) {\n                    $elements = $field->fetchIncludableElements();\n\n                    if (is_array($elements) && !empty($elements)) {\n                        foreach ($elements as $name) {\n                            $selected = false;\n\n                            if ($fields['source'] == $section_id && in_array($name, $fields['xml_elements'])) {\n                                $selected = true;\n                            }\n\n                            $optgroup['options'][] = array($name, $selected, $name);\n                        }\n                    }\n                }\n            }\n\n            $options[] = $optgroup;\n        }\n\n        $label->appendChild(Widget::Select('fields[xml_elements][]', $options, array('multiple' => 'multiple')));\n        $group->appendChild($label);\n\n        // Support multiple parameters\n        if (!isset($fields['param'])) {\n            $fields['param'] = array();\n        } elseif (!is_array($fields['param'])) {\n            $fields['param'] = array($fields['param']);\n        }\n\n        $label = Widget::Label(__('Parameters'));\n        $label->setAttribute('class', 'column');\n        $prefix = '$ds-' . (isset($this->_context[1]) ? Lang::createHandle($fields['name']) : __('untitled')) . '.';\n\n        $options = array(\n            array('label' => __('Authors'), 'data-label' => 'authors', 'options' => array())\n        );\n\n        foreach (array('id', 'username', 'name', 'email', 'user_type') as $p) {\n            $options[0]['options'][] = array(\n                $p,\n                ($fields['source'] == 'authors' && in_array($p, $fields['param'])),\n                $prefix . $p,\n                null,\n                null,\n                array(\n                    'data-handle' => $p\n                )\n            );\n        }\n\n        foreach ($field_groups as $section_id => $section_data) {\n            $optgroup = array('label' => $section_data['section']->get('name'), 'data-label' => 'section-' . $section_data['section']->get('id'), 'options' => array());\n\n            foreach (array('id', 'creation-date', 'modification-date', 'author') as $p) {\n                $option = array(\n                    'system:' . $p,\n                    ($fields['source'] == $section_id && in_array('system:' . $p, $fields['param'])),\n                    $prefix . 'system-' . $p,\n                    null,\n                    null,\n                    array(\n                        'data-handle' => 'system-' . $p\n                    )\n                );\n\n                // Handle 'system:date' as an output paramater (backwards compatibility)\n                if ($p === 'creation-date') {\n                    if ($fields['source'] == $section_id && in_array('system:date', $fields['param'])) {\n                        $option[1] = true;\n                    }\n                }\n\n                $optgroup['options'][] = $option;\n            }\n\n            if (is_array($section_data['fields']) && !empty($section_data['fields'])) {\n                foreach ($section_data['fields'] as $input) {\n                    if (!$input->allowDatasourceParamOutput()) {\n                        continue;\n                    }\n\n                    $optgroup['options'][] = array(\n                        $input->get('element_name'),\n                        ($fields['source'] == $section_id && in_array($input->get('element_name'), $fields['param'])),\n                        $prefix . $input->get('element_name'),\n                        null,\n                        null,\n                        array(\n                            'data-handle' => $input->get('element_name')\n                        )\n                    );\n                }\n            }\n\n            $options[] = $optgroup;\n        }\n\n        $label->appendChild(Widget::Select('fields[param][]', $options, array('multiple' => 'multiple')));\n        $group->appendChild($label);\n\n        $fieldset->appendChild($group);\n\n        // Associations\n        $label = Widget::Checkbox('fields[associated_entry_counts]', $fields['associated_entry_counts'], __('Include a count of entries in associated sections'));\n        $this->setContext($label, array('sections'));\n        $fieldset->appendChild($label);\n\n        // Encoding\n        $label = Widget::Checkbox('fields[html_encode]', $fields['html_encode'], __('HTML-encode text'));\n        $this->setContext($label, array('sections'));\n        $fieldset->appendChild($label);\n\n        $this->Form->appendChild($fieldset);\n\n        // Static XML\n        if (!isset($fields['static_xml'])) {\n            $fields['static_xml'] = null;\n        }\n\n        $fieldset = new XMLElement('fieldset');\n        $this->setContext($fieldset, array('static-xml'));\n        $fieldset->appendChild(new XMLElement('legend', __('Static XML')));\n        $p = new XMLElement('p', __('Enter valid XML, exclude XML declaration'));\n        $p->setAttribute('class', 'help');\n        $fieldset->appendChild($p);\n\n        $label = Widget::Label();\n        $label->appendChild(Widget::Textarea('fields[static_xml]', 12, 50, General::sanitize(stripslashes($fields['static_xml'])), array('class' => 'code', 'placeholder' => '<static>content</static>')));\n\n        if (isset($this->_errors['static_xml'])) {\n            $fieldset->appendChild(Widget::Error($label, $this->_errors['static_xml']));\n        } else {\n            $fieldset->appendChild($label);\n        }\n\n        $this->Form->appendChild($fieldset);\n\n        // Connections\n        $fieldset = new XMLElement('fieldset');\n        $fieldset->setAttribute('class', 'settings');\n        $fieldset->appendChild(new XMLElement('legend', __('Attach to Pages')));\n        $p = new XMLElement('p', __('The data will only be available on the selected pages.'));\n        $p->setAttribute('class', 'help');\n        $fieldset->appendChild($p);\n\n        $div = new XMLElement('div');\n        $label = Widget::Label(__('Pages'));\n\n        $pages = PageManager::fetch();\n        $ds_handle = str_replace('-', '_', Lang::createHandle($fields['name']));\n        $connections = ResourceManager::getAttachedPages(ResourceManager::RESOURCE_TYPE_DS, $ds_handle);\n        $selected = array();\n\n        foreach ($connections as $connection) {\n            $selected[] = $connection['id'];\n        }\n\n        $options = array();\n\n        foreach ($pages as $page) {\n            $options[] = array($page['id'], in_array($page['id'], $selected), PageManager::resolvePageTitle($page['id']));\n        }\n\n        $label->appendChild(Widget::Select('fields[connections][]', $options, array('multiple' => 'multiple')));\n        $div->appendChild($label);\n\n        $fieldset->appendChild($div);\n        $this->Form->appendChild($fieldset);\n\n\n        // Call the provided datasources to let them inject their filters\n        // @todo Ideally when a new Datasource is chosen an AJAX request will fire\n        // to get the HTML from the extension. This is hardcoded for now into\n        // creating a 'big' page and then hiding the fields with JS\n        if (!empty($providers)) {\n            foreach ($providers as $providerClass => $provider) {\n                call_user_func_array(array($providerClass, 'buildEditor'), array($this->Form, &$this->_errors, $fields, $handle));\n            }\n        }\n\n        $div = new XMLElement('div');\n        $div->setAttribute('class', 'actions');\n        $div->appendChild(Widget::Input('action[save]', ($isEditing ? __('Save Changes') : __('Create Data Source')), 'submit', array('accesskey' => 's')));\n\n        if ($isEditing) {\n            $button = new XMLElement('button', __('Delete'));\n            $button->setAttributeArray(array('name' => 'action[delete]', 'class' => 'button confirm delete', 'title' => __('Delete this data source'), 'type' => 'submit', 'accesskey' => 'd', 'data-message' => __('Are you sure you want to delete this data source?')));\n            $div->appendChild($button);\n        }\n\n        $this->Form->appendChild($div);\n    }\n\n    public function __viewInfo()\n    {\n        $this->setPageType('form');\n\n        $datasource = DatasourceManager::create($this->_context[1], array(), false);\n        $about = $datasource->about();\n\n        $this->setTitle(__('%1$s &ndash; %2$s &ndash; %3$s', array($about['name'], __('Data Source'), __('Symphony'))));\n        $this->appendSubheading((($this->_context[0] == 'info') ? $about['name'] : __('Untitled')));\n        $this->insertBreadcrumbs(array(\n            Widget::Anchor(__('Data Sources'), SYMPHONY_URL . '/blueprints/datasources/'),\n        ));\n        $this->Form->setAttribute('id', 'controller');\n\n        $link = $about['author']['name'];\n\n        if (isset($about['author']['website'])) {\n            $link = Widget::Anchor($about['author']['name'], General::validateURL($about['author']['website']));\n        } elseif (isset($about['author']['email'])) {\n            $link = Widget::Anchor($about['author']['name'], 'mailto:' . $about['author']['email']);\n        }\n\n        foreach ($about as $key => $value) {\n            $fieldset = null;\n\n            switch ($key) {\n                case 'author':\n                    if ($link) {\n                        $fieldset = new XMLElement('fieldset');\n                        $fieldset->appendChild(new XMLElement('legend', __('Author')));\n                        $fieldset->appendChild(new XMLElement('p', $link->generate(false)));\n                    }\n                    break;\n                case 'version':\n                    $fieldset = new XMLElement('fieldset');\n                    $fieldset->appendChild(new XMLElement('legend', __('Version')));\n                    $release_date = array_key_exists('release-date', $about) ? $about['release-date'] : filemtime(DatasourceManager::__getDriverPath($this->_context[1]));\n\n                    if (preg_match('/^\\d+(\\.\\d+)*$/', $value)) {\n                        $fieldset->appendChild(new XMLElement('p', __('%1$s released on %2$s', array($value, DateTimeObj::format($release_date, __SYM_DATE_FORMAT__)))));\n                    } else {\n                        $fieldset->appendChild(new XMLElement('p', __('Created by %1$s at %2$s', array($value, DateTimeObj::format($release_date, __SYM_DATE_FORMAT__)))));\n                    }\n                    break;\n                case 'description':\n                    $fieldset = new XMLElement('fieldset');\n                    $fieldset->appendChild(new XMLElement('legend', __('Description')));\n                    $fieldset->appendChild((is_object($about['description']) ? $about['description'] : new XMLElement('p', $about['description'])));\n                    break;\n                case 'example':\n                    if (is_callable(array($datasource, 'example'))) {\n                        $fieldset = new XMLElement('fieldset');\n                        $fieldset->appendChild(new XMLElement('legend', __('Example XML')));\n\n                        $example = $datasource->example();\n\n                        if (is_object($example)) {\n                            $fieldset->appendChild($example);\n                        } else {\n                            $p = new XMLElement('p');\n                            $p->appendChild(new XMLElement('pre', '<code>' . str_replace('<', '&lt;', $example) . '</code>'));\n                            $fieldset->appendChild($p);\n                        }\n                    }\n                    break;\n            }\n\n            if ($fieldset) {\n                $fieldset->setAttribute('class', 'settings');\n                $this->Form->appendChild($fieldset);\n            }\n        }\n\n        // Display source\n        $file = DatasourceManager::__getClassPath($this->_context[1]) . '/data.' . $this->_context[1] . '.php';\n\n        if (file_exists($file)) {\n            $fieldset = new XMLElement('fieldset');\n            $fieldset->setAttribute('class', 'settings');\n            $fieldset->appendChild(new XMLElement('legend', __('Source')));\n\n            $source = file_get_contents($file);\n            $code = new XMLElement('code', htmlspecialchars($source));\n            $pre = new XMLElement('pre');\n            $pre->appendChild($code);\n\n            $fieldset->appendChild($pre);\n            $this->Form->appendChild($fieldset);\n        }\n    }\n\n    public function __actionIndex($resource_type)\n    {\n        return parent::__actionIndex(ResourceManager::RESOURCE_TYPE_DS);\n    }\n\n    public function __actionEdit()\n    {\n        if (array_key_exists('save', $_POST['action'])) {\n            return $this->__formAction();\n        } elseif (array_key_exists('delete', $_POST['action'])) {\n            /**\n             * Prior to deleting the Datasource file. Target file path is provided.\n             *\n             * @delegate DatasourcePreDelete\n             * @since Symphony 2.2\n             * @param string $context\n             * '/blueprints/datasources/'\n             * @param string $file\n             *  The path to the Datasource file\n             */\n            Symphony::ExtensionManager()->notifyMembers('DatasourcePreDelete', '/blueprints/datasources/', array('file' => DATASOURCES . \"/data.\" . $this->_context[1] . \".php\"));\n\n            if (!General::deleteFile(DATASOURCES . '/data.' . $this->_context[1] . '.php')) {\n                $this->pageAlert(\n                    __('Failed to delete %s.', array('<code>' . $this->_context[1] . '</code>'))\n                    . ' ' . __('Please check permissions on %s.', array('<code>/workspace/data-sources</code>')),\n                    Alert::ERROR\n                );\n            } else {\n                $pages = ResourceManager::getAttachedPages(ResourceManager::RESOURCE_TYPE_DS, $this->_context[1]);\n\n                foreach ($pages as $page) {\n                    ResourceManager::detach(ResourceManager::RESOURCE_TYPE_DS, $this->_context[1], $page['id']);\n                }\n\n                redirect(SYMPHONY_URL . '/blueprints/datasources/');\n            }\n        }\n    }\n\n    public function __actionNew()\n    {\n        if (array_key_exists('save', $_POST['action'])) {\n            return $this->__formAction();\n        }\n    }\n\n    public function __formAction()\n    {\n        $fields = $_POST['fields'];\n        $this->_errors = array();\n        $providers = Symphony::ExtensionManager()->getProvidersOf(iProvider::DATASOURCE);\n        $providerClass = null;\n\n        if (trim($fields['name']) == '') {\n            $this->_errors['name'] = __('This is a required field');\n        }\n\n        if ($fields['source'] == 'static_xml') {\n            if (trim($fields['static_xml']) == '') {\n                $this->_errors['static_xml'] = __('This is a required field');\n            } else {\n                $xml_errors = null;\n\n                General::validateXML($fields['static_xml'], $xml_errors, false, new XsltProcess());\n\n                if (!empty($xml_errors)) {\n                    $this->_errors['static_xml'] = __('XML is invalid.');\n                }\n            }\n        } elseif (is_numeric($fields['source'])) {\n            if (strlen(trim($fields['max_records'])) == 0 || (is_numeric($fields['max_records']) && $fields['max_records'] < 1)) {\n                if ($fields['paginate_results'] === 'yes') {\n                    $this->_errors['max_records'] = __('A result limit must be set');\n                }\n            } elseif (!self::__isValidPageString($fields['max_records'])) {\n                $this->_errors['max_records'] = __('Must be a valid number or parameter');\n            }\n\n            if (strlen(trim($fields['page_number'])) == 0 || (is_numeric($fields['page_number']) && $fields['page_number'] < 1)) {\n                if ($fields['paginate_results'] === 'yes') {\n                    $this->_errors['page_number'] = __('A page number must be set');\n                }\n            } elseif (!self::__isValidPageString($fields['page_number'])) {\n                $this->_errors['page_number'] = __('Must be a valid number or parameter');\n            }\n\n            // See if a Provided Datasource is saved\n        } elseif (!empty($providers)) {\n            foreach ($providers as $providerClass => $provider) {\n                if ($fields['source'] == call_user_func(array($providerClass, 'getSource'))) {\n                    call_user_func_array(array($providerClass, 'validate'), array(&$fields, &$this->_errors));\n                    break;\n                }\n\n                unset($providerClass);\n            }\n        }\n\n        $classname = Lang::createHandle($fields['name'], 255, '_', false, true, array('@^[^a-z\\d]+@i' => '', '/[^\\w-\\.]/i' => ''));\n        $rootelement = str_replace('_', '-', $classname);\n\n        // Check to make sure the classname is not empty after handlisation.\n        if (empty($classname) && !isset($this->_errors['name'])) {\n            $this->_errors['name'] = __('Please ensure name contains at least one Latin-based character.', array($classname));\n        }\n\n        $file = DATASOURCES . '/data.' . $classname . '.php';\n\n        $isDuplicate = false;\n        $queueForDeletion = null;\n\n        if ($this->_context[0] == 'new' && is_file($file)) {\n            $isDuplicate = true;\n        } elseif ($this->_context[0] == 'edit') {\n            $existing_handle = $this->_context[1];\n\n            if ($classname != $existing_handle && is_file($file)) {\n                $isDuplicate = true;\n            } elseif ($classname != $existing_handle) {\n                $queueForDeletion = DATASOURCES . '/data.' . $existing_handle . '.php';\n            }\n        }\n\n        // Duplicate\n        if ($isDuplicate) {\n            $this->_errors['name'] = __('A Data source with the name %s already exists', array('<code>' . $classname . '</code>'));\n        }\n\n        if (empty($this->_errors)) {\n            $filters = array();\n            $elements = null;\n            $source = $fields['source'];\n            $params = array(\n                'rootelement' => $rootelement\n            );\n\n            $about = array(\n                'name' => $fields['name'],\n                'version' => 'Symphony ' . Symphony::Configuration()->get('version', 'symphony'),\n                'release date' => DateTimeObj::getGMT('c'),\n                'author name' => Symphony::Author()->getFullName(),\n                'author website' => URL,\n                'author email' => Symphony::Author()->get('email')\n            );\n\n            // If there is a provider, get their template\n            if ($providerClass) {\n                $dsShell = file_get_contents(call_user_func(array($providerClass, 'getTemplate')));\n            } else {\n                $dsShell = file_get_contents($this->getTemplate('blueprints.datasource'));\n            }\n\n            // Author metadata\n            self::injectAboutInformation($dsShell, $about);\n\n            // Do dependencies, the template file must have <!-- CLASS NAME -->\n            $dsShell = str_replace('<!-- CLASS NAME -->', $classname, $dsShell);\n\n            // If there is a provider, let them do the prepartion work\n            if ($providerClass) {\n                $dsShell = call_user_func(array($providerClass, 'prepare'), $fields, $params, $dsShell);\n            } else {\n                switch ($source) {\n                    case 'authors':\n                        $extends = 'AuthorDatasource';\n                        if (isset($fields['filter']['author'])) {\n                            $filters = $fields['filter']['author'];\n                        }\n\n                        $elements = $fields['xml_elements'];\n\n                        $params['order'] = $fields['order'];\n                        $params['redirectonempty'] = $fields['redirect_on_empty'];\n                        $params['redirectonforbidden'] = $fields['redirect_on_forbidden'];\n                        $params['redirectonrequired'] = $fields['redirect_on_required'];\n                        $params['requiredparam'] = trim($fields['required_url_param']);\n                        $params['negateparam'] = trim($fields['negate_url_param']);\n                        $params['paramoutput'] = $fields['param'];\n                        $params['sort'] = $fields['sort'];\n\n                        break;\n                    case 'navigation':\n                        $extends = 'NavigationDatasource';\n                        if (isset($fields['filter']['navigation'])) {\n                            $filters = $fields['filter']['navigation'];\n                        }\n\n                        $params['order'] = $fields['order'];\n                        $params['redirectonempty'] = $fields['redirect_on_empty'];\n                        $params['redirectonforbidden'] = $fields['redirect_on_forbidden'];\n                        $params['redirectonrequired'] = $fields['redirect_on_required'];\n                        $params['requiredparam'] = trim($fields['required_url_param']);\n                        $params['negateparam'] = trim($fields['negate_url_param']);\n\n                        break;\n                    case 'static_xml':\n                        $extends = 'StaticXMLDatasource';\n                        $fields['static_xml'] = trim($fields['static_xml']);\n\n                        if (preg_match('/^<\\?xml/i', $fields['static_xml']) == true) {\n                            // Need to remove any XML declaration\n                            $fields['static_xml'] = preg_replace('/^<\\?xml[^>]+>/i', null, $fields['static_xml']);\n                        }\n\n                        $params['static'] = sprintf(\n                            '%s',\n                            trim($fields['static_xml'])\n                        );\n                        break;\n                    default:\n                        $extends = 'SectionDatasource';\n                        $elements = $fields['xml_elements'];\n\n                        if (is_array($fields['filter']) && !empty($fields['filter'])) {\n                            $filters = array();\n\n                            foreach ($fields['filter'] as $f) {\n                                foreach ($f as $key => $val) {\n                                    $filters[$key] = $val;\n                                }\n                            }\n                        }\n\n                        $params['order'] = $fields['order'];\n                        $params['group'] = $fields['group'];\n                        $params['paginateresults'] = $fields['paginate_results'];\n                        $params['limit'] = $fields['max_records'];\n                        $params['startpage'] = $fields['page_number'];\n                        $params['redirectonempty'] = $fields['redirect_on_empty'];\n                        $params['redirectonforbidden'] = $fields['redirect_on_forbidden'];\n                        $params['redirectonrequired'] = $fields['redirect_on_required'];\n                        $params['requiredparam'] = trim($fields['required_url_param']);\n                        $params['negateparam'] = trim($fields['negate_url_param']);\n                        $params['paramoutput'] = $fields['param'];\n                        $params['sort'] = $fields['sort'];\n                        $params['htmlencode'] = $fields['html_encode'];\n                        $params['associatedentrycounts'] = $fields['associated_entry_counts'];\n\n                        break;\n                }\n\n                $this->__injectVarList($dsShell, $params);\n                $this->__injectIncludedElements($dsShell, $elements);\n                self::injectFilters($dsShell, $filters);\n\n                if (preg_match_all('@(\\$ds-[0-9a-z_\\.\\-]+)@i', $dsShell, $matches)) {\n                    $dependencies = General::array_remove_duplicates($matches[1]);\n                    $dependencies = array_map('addslashes', $dependencies);\n                    $dsShell = str_replace('<!-- DS DEPENDENCY LIST -->', \"'\" . implode(\"', '\", $dependencies) . \"'\", $dsShell);\n                }\n\n                $dsShell = str_replace('<!-- CLASS EXTENDS -->', $extends, $dsShell);\n                $dsShell = str_replace('<!-- SOURCE -->', addslashes($source), $dsShell);\n            }\n\n            if ($this->_context[0] == 'new') {\n                /**\n                 * Prior to creating the Datasource, the file path where it will be written to\n                 * is provided and well as the contents of that file.\n                 *\n                 * @delegate DatasourcePreCreate\n                 * @since Symphony 2.2\n                 * @param string $context\n                 * '/blueprints/datasources/'\n                 * @param string $file\n                 *  The path to the Datasource file\n                 * @param string $contents\n                 *  The contents for this Datasource as a string passed by reference\n                 * @param array $params\n                 *  An array of all the `$dsParam*` values\n                 * @param array $elements\n                 *  An array of all the elements included in this datasource\n                 * @param array $filters\n                 *  An associative array of all the filters for this datasource with the key\n                 *  being the `field_id` and the value the filter.\n                 * @param array $dependencies\n                 *  An array of dependencies that this datasource has\n                 */\n                Symphony::ExtensionManager()->notifyMembers('DatasourcePreCreate', '/blueprints/datasources/', array(\n                    'file' => $file,\n                    'contents' => &$dsShell,\n                    'params' => $params,\n                    'elements' => $elements,\n                    'filters' => $filters,\n                    'dependencies' => $dependencies\n                ));\n            } else {\n                /**\n                 * Prior to editing a Datasource, the file path where it will be written to\n                 * is provided and well as the contents of that file.\n                 *\n                 * @delegate DatasourcePreEdit\n                 * @since Symphony 2.2\n                 * @param string $context\n                 * '/blueprints/datasources/'\n                 * @param string $file\n                 *  The path to the Datasource file\n                 * @param string $contents\n                 *  The contents for this Datasource as a string passed by reference\n                 * @param array $dependencies\n                 *  An array of dependencies that this datasource has\n                 * @param array $params\n                 *  An array of all the `$dsParam*` values\n                 * @param array $elements\n                 *  An array of all the elements included in this datasource\n                 * @param array $filters\n                 *  An associative array of all the filters for this datasource with the key\n                 *  being the `field_id` and the value the filter.\n                 */\n                Symphony::ExtensionManager()->notifyMembers('DatasourcePreEdit', '/blueprints/datasources/', array(\n                    'file' => $file,\n                    'contents' => &$dsShell,\n                    'dependencies' => $dependencies,\n                    'params' => $params,\n                    'elements' => $elements,\n                    'filters' => $filters\n                ));\n            }\n\n            // Remove left over placeholders\n            $dsShell = preg_replace(array('/<!--[\\w ]++-->/', '/(\\t+[\\r\\n]){2,}/', '/(\\r\\n){2,}/'), '$1', $dsShell);\n\n            // Write the file\n            if (!is_writable(dirname($file)) || !General::writeFile($file, $dsShell, Symphony::Configuration()->get('write_mode', 'file'), 'w', true)) {\n                $this->pageAlert(\n                    __('Failed to write Data source to disk.')\n                    . ' ' . __('Please check permissions on %s.', array('<code>/workspace/data-sources</code>')),\n                    Alert::ERROR\n                );\n\n                // Write successful\n            } else {\n                if (function_exists('opcache_invalidate')) {\n                    opcache_invalidate($file, true);\n                }\n\n                // Attach this datasources to pages\n                $connections = $fields['connections'];\n                ResourceManager::setPages(ResourceManager::RESOURCE_TYPE_DS, is_null($existing_handle) ? $classname : $existing_handle, $connections);\n\n                // If the datasource has been updated and the name changed, then adjust all the existing pages that have the old datasource name\n                if ($queueForDeletion) {\n                    General::deleteFile($queueForDeletion);\n\n                    // Update pages that use this DS\n                    $pages = PageManager::fetch(false, array('data_sources', 'id'), array(\"\n                        `data_sources` REGEXP '[[:<:]]\" . $existing_handle . \"[[:>:]]'\n                    \"));\n\n                    if (is_array($pages) && !empty($pages)) {\n                        foreach ($pages as $page) {\n                            $page['data_sources'] = preg_replace('/\\b'.$existing_handle.'\\b/i', $classname, $page['data_sources']);\n\n                            PageManager::edit($page['id'], $page);\n                        }\n                    }\n                }\n\n                if ($this->_context[0] == 'new') {\n                    /**\n                     * After creating the Datasource, the path to the Datasource file is provided\n                     *\n                     * @delegate DatasourcePostCreate\n                     * @since Symphony 2.2\n                     * @param string $context\n                     * '/blueprints/datasources/'\n                     * @param string $file\n                     *  The path to the Datasource file\n                     */\n                    Symphony::ExtensionManager()->notifyMembers('DatasourcePostCreate', '/blueprints/datasources/', array(\n                        'file' => $file\n                    ));\n                } else {\n                    /**\n                     * After editing the Datasource, the path to the Datasource file is provided\n                     *\n                     * @delegate DatasourcePostEdit\n                     * @since Symphony 2.2\n                     * @param string $context\n                     * '/blueprints/datasources/'\n                     * @param string $file\n                     *  The path to the Datasource file\n                     * @param string $previous_file\n                     *  The path of the previous Datasource file in the case where a Datasource may\n                     *  have been renamed. To get the handle from this value, see\n                     *  `DatasourceManager::__getHandleFromFilename`\n                     */\n                    Symphony::ExtensionManager()->notifyMembers('DatasourcePostEdit', '/blueprints/datasources/', array(\n                        'file' => $file,\n                        'previous_file' => ($queueForDeletion) ? $queueForDeletion : null\n                    ));\n                }\n\n                redirect(SYMPHONY_URL . '/blueprints/datasources/edit/'.$classname.'/'.($this->_context[0] == 'new' ? 'created' : 'saved') . '/');\n            }\n        }\n    }\n\n    public static function injectFilters(&$shell, array $filters)\n    {\n        if (!is_array($filters) || empty($filters)) {\n            return;\n        }\n\n        $placeholder = '<!-- FILTERS -->';\n        $string = 'public $dsParamFILTERS = array(' . PHP_EOL;\n\n        foreach ($filters as $key => $val) {\n            if (trim($val) == '' || !is_string($val)) {\n                continue;\n            }\n\n            $string .= \"        '\" . addslashes($key) . \"' => '\" . addslashes($val) . \"',\" . PHP_EOL;\n        }\n\n        $string .= \"    );\" . PHP_EOL . \"        \" . $placeholder;\n\n        $shell = str_replace($placeholder, trim($string), $shell);\n    }\n\n    public static function injectAboutInformation(&$shell, array $details)\n    {\n        if (!is_array($details) || empty($details)) {\n            return;\n        }\n\n        foreach ($details as $key => $val) {\n            if (!is_string($key) || !is_string($val)) {\n                continue;\n            }\n\n            $shell = str_replace('<!-- ' . strtoupper(addslashes($key)) . ' -->', addslashes($val), $shell);\n        }\n    }\n\n    public function __injectIncludedElements(&$shell, $elements)\n    {\n        if (!is_array($elements) || empty($elements)) {\n            return;\n        }\n        $elements = array_map('addslashes', $elements);\n        $placeholder = '<!-- INCLUDED ELEMENTS -->';\n        $shell = str_replace($placeholder, \"public \\$dsParamINCLUDEDELEMENTS = array(\" . PHP_EOL . \"        '\" . implode(\"',\" . PHP_EOL . \"        '\", $elements) . \"'\" . PHP_EOL . '    );' . PHP_EOL . \"    \" . $placeholder, $shell);\n    }\n\n    public function __injectVarList(&$shell, $vars)\n    {\n        if (!is_array($vars) || empty($vars)) {\n            return;\n        }\n\n        $var_list = null;\n\n        foreach ($vars as $key => $val) {\n            if (!is_string($key)) {\n                continue;\n            }\n            if (is_array($val)) {\n                $val = array_map('addslashes', $val);\n                $val = \"array(\" . PHP_EOL . \"        '\" . implode(\"',\" . PHP_EOL . \"        '\", $val) . \"'\" . PHP_EOL . '        );';\n                $var_list .= '    public $dsParam' . strtoupper(addslashes($key)) . ' = ' . $val . PHP_EOL;\n            } elseif (trim($val) !== '') {\n                $var_list .= '    public $dsParam' . strtoupper(addslashes($key)) . \" = '\" . addslashes($val) . \"';\" . PHP_EOL;\n            }\n        }\n\n        $placeholder = '<!-- VAR LIST -->';\n        $shell = str_replace($placeholder, trim($var_list) . PHP_EOL . \"    \" . $placeholder, $shell);\n    }\n\n    public function __appendAuthorFilter(&$wrapper, $h4_label, $name, $value = null, $templateOnly = true)\n    {\n        if (!$templateOnly) {\n            $li = new XMLElement('li');\n            $li->setAttribute('class', 'unique');\n            $li->setAttribute('data-type', $name);\n            $li->appendChild(new XMLElement('header', '<h4>' . $h4_label . '</h4>'));\n            $label = Widget::Label(__('Value'));\n            $label->appendChild(Widget::Input('fields[filter][author]['.$name.']', General::sanitize($value)));\n            $li->appendChild($label);\n\n            $wrapper->appendChild($li);\n        }\n\n        $li = new XMLElement('li');\n        $li->setAttribute('class', 'unique template');\n        $li->setAttribute('data-type', $name);\n        $li->appendChild(new XMLElement('header', '<h4>' . $h4_label . '</h4>'));\n        $label = Widget::Label(__('Value'));\n        $label->appendChild(Widget::Input('fields[filter][author]['.$name.']'));\n        $li->appendChild($label);\n\n        $wrapper->appendChild($li);\n    }\n\n    private static function __isValidPageString($string)\n    {\n        return (bool)preg_match('/^\\{\\$[\\w-]+(.[\\w]+(-[\\w]+)?){0,1}\\}|[\\d]+$/', $string);\n    }\n\n    /**\n     * Given a `$url` and `$timeout`, this function will use the `Gateway`\n     * class to determine that it is a valid URL and returns successfully\n     * before the `$timeout`. If it does not, an error message will be\n     * returned, otherwise true.\n     *\n     * @since Symphony 2.3\n     * @param string $url\n     * @param integer $timeout\n     *  If not provided, this will default to 6 seconds\n     * @param string $error\n     *  If this function returns false, this variable will be populated with the\n     *  error message.\n     * @return array|boolean\n     *  Returns an array with the 'data' if it is a valid URL, otherwise a string\n     *  containing an error message.\n     */\n    public static function __isValidURL($url, $timeout = 6, &$error)\n    {\n        if (!filter_var($url, FILTER_VALIDATE_URL)) {\n            $error = __('Invalid URL');\n            return false;\n        }\n\n        // Check that URL was provided\n        $gateway = new Gateway;\n        $gateway->init($url);\n        $gateway->setopt('TIMEOUT', $timeout);\n        $data = $gateway->exec();\n\n        $info = $gateway->getInfoLast();\n\n        // 28 is CURLE_OPERATION_TIMEDOUT\n        if ($info['curl_error'] == 28) {\n            $error = __('Request timed out. %d second limit reached.', array($timeout));\n            return false;\n        } elseif ($data === false || $info['http_code'] != 200) {\n            $error = __('Failed to load URL, status code %d was returned.', array($info['http_code']));\n            return false;\n        }\n\n        return array('data' => $data);\n    }\n\n    /**\n     * Set Data Source context\n     *\n     * @since Symphony 2.3.3\n     * @param XMLElement $element\n     * @param array $context\n     */\n    public function setContext(&$element, $context)\n    {\n        $element->setAttribute('class', 'settings contextual');\n        $element->setAttribute('data-context', implode(' ', (array)$context));\n    }\n}\n", "<?php\n/**\n * @package content\n */\n\n/**\n * The Event Editor allows a developer to create events that typically\n * allow Frontend forms to populate Sections or edit Entries.\n */\n\nclass contentBlueprintsEvents extends ResourcesPage\n{\n    public $_errors = array();\n\n    public function __viewIndex($resource_type)\n    {\n        parent::__viewIndex(ResourceManager::RESOURCE_TYPE_EVENT);\n\n        $this->setTitle(__('%1$s &ndash; %2$s', array(__('Events'), __('Symphony'))));\n        $this->appendSubheading(__('Events'), Widget::Anchor(__('Create New'), Administration::instance()->getCurrentPageURL().'new/', __('Create a new event'), 'create button', null, array('accesskey' => 'c')));\n    }\n\n    public function __viewNew()\n    {\n        $this->__form();\n    }\n\n    public function __viewEdit()\n    {\n        $this->__form();\n    }\n\n    public function __viewInfo()\n    {\n        $this->__form(true);\n    }\n\n    public function __form($readonly = false)\n    {\n        $formHasErrors = (is_array($this->_errors) && !empty($this->_errors));\n\n        if ($formHasErrors) {\n            $this->pageAlert(\n                __('An error occurred while processing this form. See below for details.'),\n                Alert::ERROR\n            );\n\n            // These alerts are only valid if the form doesn't have errors\n        } elseif (isset($this->_context[2])) {\n            $time = Widget::Time();\n\n            switch ($this->_context[2]) {\n                case 'saved':\n                    $message = __('Event updated at %s.', array($time->generate()));\n                    break;\n                case 'created':\n                    $message = __('Event created at %s.', array($time->generate()));\n            }\n\n            $this->pageAlert(\n                $message\n                . ' <a href=\"' . SYMPHONY_URL . '/blueprints/events/new/\" accesskey=\"c\">'\n                . __('Create another?')\n                . '</a> <a href=\"' . SYMPHONY_URL . '/blueprints/events/\" accesskey=\"a\">'\n                . __('View all Events')\n                . '</a>',\n                Alert::SUCCESS\n            );\n        }\n\n        $isEditing = ($readonly ? true : false);\n        $fields = array(\"name\"=>null, \"filters\"=>null);\n        $about = array(\"name\"=>null);\n        $providers = Symphony::ExtensionManager()->getProvidersOf(iProvider::EVENT);\n\n        if (isset($_POST['fields'])) {\n            $fields = $_POST['fields'];\n\n            if ($this->_context[0] == 'edit') {\n                $isEditing = true;\n            }\n        } elseif ($this->_context[0] == 'edit' || $this->_context[0] == 'info') {\n            $isEditing = true;\n            $handle = $this->_context[1];\n            $existing = EventManager::create($handle);\n            $about = $existing->about();\n\n            if ($this->_context[0] == 'edit' && !$existing->allowEditorToParse()) {\n                redirect(SYMPHONY_URL . '/blueprints/events/info/' . $handle . '/');\n            }\n\n            $fields['name'] = $about['name'];\n            $fields['source'] = $existing->getSource();\n            $provided = false;\n\n            if (!empty($providers)) {\n                foreach ($providers as $providerClass => $provider) {\n                    if ($fields['source'] == call_user_func(array($providerClass, 'getClass'))) {\n                        $fields = array_merge($fields, $existing->settings());\n                        $provided = true;\n                        break;\n                    }\n                }\n            }\n\n            if (!$provided) {\n                if (isset($existing->eParamFILTERS)) {\n                    $fields['filters'] = $existing->eParamFILTERS;\n                }\n            }\n        }\n\n        // Handle name on edited changes, or from reading an edited datasource\n        if (isset($about['name'])) {\n            $name = $about['name'];\n        } elseif (isset($fields['name'])) {\n            $name = $fields['name'];\n        }\n\n        $this->setPageType('form');\n        $this->setTitle(__(($isEditing ? '%1$s &ndash; %2$s &ndash; %3$s' : '%2$s &ndash; %3$s'), array($name, __('Events'), __('Symphony'))));\n        $this->appendSubheading(($isEditing ? $about['name'] : __('Untitled')));\n        $this->insertBreadcrumbs(array(\n            Widget::Anchor(__('Events'), SYMPHONY_URL . '/blueprints/events/'),\n        ));\n\n        if (!$readonly) {\n            $fieldset = new XMLElement('fieldset');\n            $fieldset->setAttribute('class', 'settings');\n            $fieldset->appendChild(new XMLElement('legend', __('Essentials')));\n\n            // Target\n            $sources = new XMLElement('div', null, array('class' => 'apply actions'));\n            $div = new XMLElement('div');\n            $label = Widget::Label(__('Target'), null, 'apply-label-left');\n            $sources->appendChild($label);\n            $sources->appendChild($div);\n\n            $sections = SectionManager::fetch(null, 'ASC', 'name');\n            $options = array();\n            $section_options = array();\n            $source = isset($fields['source']) ? $fields['source'] : null;\n\n            if (is_array($sections) && !empty($sections)) {\n                $section_options = array('label' => __('Sections'), 'options' => array());\n\n                foreach ($sections as $s) {\n                    $section_options['options'][] = array($s->get('id'), $source == $s->get('id'), General::sanitize($s->get('name')));\n                }\n            }\n\n            $options[] = $section_options;\n\n            // Loop over the event providers\n            if (!empty($providers)) {\n                $p = array('label' => __('From extensions'), 'options' => array());\n\n                foreach ($providers as $providerClass => $provider) {\n                    $p['options'][] = array(\n                        $providerClass, ($fields['source'] == $providerClass), $provider\n                    );\n                }\n\n                $options[] = $p;\n            }\n\n            $div->appendChild(\n                Widget::Select('source', $options, array('id' => 'event-context'))\n            );\n\n            if (isset($this->_errors['source'])) {\n                $this->Context->prependChild(Widget::Error($sources, $this->_errors['source']));\n            } else {\n                $this->Context->prependChild($sources);\n            }\n\n            $this->Form->appendChild(\n                Widget::Input('fields[source]', $options[0]['options'][0][0], 'hidden', array('id' => 'event-source'))\n            );\n\n            // Name\n            $group = new XMLElement('div');\n            $label = Widget::Label(__('Name'));\n            $label->appendChild(Widget::Input('fields[name]', General::sanitize($fields['name'])));\n\n            $div = new XMLElement('div');\n            $div->setAttribute('class', 'column');\n\n            if (isset($this->_errors['name'])) {\n                $div->appendChild(Widget::Error($label, $this->_errors['name']));\n            } else {\n                $div->appendChild($label);\n            }\n            $group->appendChild($div);\n            $fieldset->appendChild($group);\n            $this->Form->appendChild($fieldset);\n\n            // Filters\n            $fieldset = new XMLElement('fieldset');\n            $fieldset->setAttribute('class', 'settings pickable');\n            $fieldset->appendChild(new XMLElement('legend', __('Filters')));\n            $p = new XMLElement('p', __('Event Filters add additional conditions or actions to an event.'));\n            $p->setAttribute('class', 'help');\n            $fieldset->appendChild($p);\n\n            $filters = isset($fields['filters']) ? $fields['filters'] : array();\n            $options = array(\n                array('admin-only', in_array('admin-only', $filters), __('Admin Only')),\n                array('send-email', in_array('send-email', $filters), __('Send Notification Email')),\n                array('expect-multiple', in_array('expect-multiple', $filters), __('Allow Multiple')),\n            );\n\n            /**\n             * Allows adding of new filter rules to the Event filter rule select box\n             *\n             * @delegate AppendEventFilter\n             * @param string $context\n             * '/blueprints/events/(edit|new|info)/'\n             * @param array $selected\n             *  An array of all the selected filters for this Event\n             * @param array $options\n             *  An array of all the filters that are available, passed by reference\n             */\n            Symphony::ExtensionManager()->notifyMembers('AppendEventFilter', '/blueprints/events/' . $this->_context[0] . '/', array(\n                'selected' => $filters,\n                'options' => &$options\n            ));\n\n            $fieldset->appendChild(Widget::Select('fields[filters][]', $options, array('multiple' => 'multiple', 'id' => 'event-filters')));\n            $this->Form->appendChild($fieldset);\n\n            // Connections\n            $fieldset = new XMLElement('fieldset');\n            $fieldset->setAttribute('class', 'settings');\n            $fieldset->appendChild(new XMLElement('legend', __('Attach to Pages')));\n            $p = new XMLElement('p', __('The event will only be available on the selected pages.'));\n            $p->setAttribute('class', 'help');\n            $fieldset->appendChild($p);\n\n            $div = new XMLElement('div');\n            $label = Widget::Label(__('Pages'));\n\n            $pages = PageManager::fetch();\n            $event_handle = str_replace('-', '_', Lang::createHandle($fields['name']));\n            $connections = ResourceManager::getAttachedPages(ResourceManager::RESOURCE_TYPE_EVENT, $event_handle);\n            $selected = array();\n\n            foreach ($connections as $connection) {\n                $selected[] = $connection['id'];\n            }\n\n            $options = array();\n\n            foreach ($pages as $page) {\n                $options[] = array($page['id'], in_array($page['id'], $selected), PageManager::resolvePageTitle($page['id']));\n            }\n\n            $label->appendChild(Widget::Select('fields[connections][]', $options, array('multiple' => 'multiple')));\n            $div->appendChild($label);\n\n            $fieldset->appendChild($div);\n            $this->Form->appendChild($fieldset);\n\n            // Providers\n            if (!empty($providers)) {\n                foreach ($providers as $providerClass => $provider) {\n                    if ($isEditing && $fields['source'] !== call_user_func(array($providerClass, 'getSource'))) {\n                        continue;\n                    }\n\n                    call_user_func_array(array($providerClass, 'buildEditor'), array($this->Form, &$this->_errors, $fields, $handle));\n                }\n            }\n        } else {\n            // Author\n            if (isset($about['author']['website'])) {\n                $link = Widget::Anchor($about['author']['name'], General::validateURL($about['author']['website']));\n            } elseif (isset($about['author']['email'])) {\n                $link = Widget::Anchor($about['author']['name'], 'mailto:' . $about['author']['email']);\n            } else {\n                $link = $about['author']['name'];\n            }\n\n            if ($link) {\n                $fieldset = new XMLElement('fieldset');\n                $fieldset->setAttribute('class', 'settings');\n                $fieldset->appendChild(new XMLElement('legend', __('Author')));\n                $fieldset->appendChild(new XMLElement('p', $link->generate(false)));\n                $this->Form->appendChild($fieldset);\n            }\n\n            // Version\n            $fieldset = new XMLElement('fieldset');\n            $fieldset->setAttribute('class', 'settings');\n            $fieldset->appendChild(new XMLElement('legend', __('Version')));\n            $version = array_key_exists('version', $about) ? $about['version'] : null;\n            $release_date = array_key_exists('release-date', $about) ? $about['release-date'] : filemtime(EventManager::__getDriverPath($handle));\n\n            if (preg_match('/^\\d+(\\.\\d+)*$/', $version)) {\n                $fieldset->appendChild(\n                    new XMLElement('p', __('%1$s released on %2$s', array($version, DateTimeObj::format($release_date, __SYM_DATE_FORMAT__))))\n                );\n            } elseif (!is_null($version)) {\n                $fieldset->appendChild(\n                    new XMLElement('p', __('Created by %1$s at %2$s', array($version, DateTimeObj::format($release_date, __SYM_DATE_FORMAT__))))\n                );\n            } else {\n                $fieldset->appendChild(\n                    new XMLElement('p', __('Last modified on %s', array(DateTimeObj::format($release_date, __SYM_DATE_FORMAT__))))\n                );\n            }\n            $this->Form->appendChild($fieldset);\n        }\n\n        // If we are editing an event, it assumed that the event has documentation\n        $fieldset = new XMLElement('fieldset');\n        $fieldset->setAttribute('id', 'event-documentation');\n        $fieldset->setAttribute('class', 'settings');\n\n        if ($isEditing && method_exists($existing, 'documentation')) {\n            $doc = $existing->documentation();\n\n            if ($doc) {\n                $fieldset->setValue(\n                    '<legend>' . __('Documentation') . '</legend>' . PHP_EOL .\n                    General::tabsToSpaces(is_object($doc) ? $doc->generate(true, 4) : $doc)\n                );\n            }\n        }\n\n        $this->Form->appendChild($fieldset);\n\n        $div = new XMLElement('div');\n        $div->setAttribute('class', 'actions');\n        $div->appendChild(Widget::Input('action[save]', ($isEditing ? __('Save Changes') : __('Create Event')), 'submit', array('accesskey' => 's')));\n\n        if ($isEditing) {\n            $button = new XMLElement('button', __('Delete'));\n            $button->setAttributeArray(array('name' => 'action[delete]', 'class' => 'button confirm delete', 'title' => __('Delete this event'), 'type' => 'submit', 'accesskey' => 'd', 'data-message' => __('Are you sure you want to delete this event?')));\n            $div->appendChild($button);\n        }\n\n        if (!$readonly) {\n            $this->Form->appendChild($div);\n        }\n    }\n\n    public function __actionNew()\n    {\n        if (array_key_exists('save', $_POST['action'])) {\n            return $this->__formAction();\n        }\n    }\n\n    public function __actionEdit()\n    {\n        if (array_key_exists('save', $_POST['action'])) {\n            return $this->__formAction();\n        } elseif (array_key_exists('delete', $_POST['action'])) {\n            /**\n             * Prior to deleting the Event file. Target file path is provided.\n             *\n             * @delegate EventPreDelete\n             * @since Symphony 2.2\n             * @param string $context\n             * '/blueprints/events/'\n             * @param string $file\n             *  The path to the Event file\n             */\n            Symphony::ExtensionManager()->notifyMembers('EventPreDelete', '/blueprints/events/', array('file' => EVENTS . \"/event.\" . $this->_context[1] . \".php\"));\n\n            if (!General::deleteFile(EVENTS . '/event.' . $this->_context[1] . '.php')) {\n                $this->pageAlert(\n                    __('Failed to delete %s.', array('<code>' . $this->_context[1] . '</code>'))\n                    . ' ' . __('Please check permissions on %s.', array('<code>/workspace/events</code>')),\n                    Alert::ERROR\n                );\n            } else {\n                $pages = ResourceManager::getAttachedPages(ResourceManager::RESOURCE_TYPE_EVENT, $this->_context[1]);\n\n                foreach ($pages as $page) {\n                    ResourceManager::detach(ResourceManager::RESOURCE_TYPE_EVENT, $this->_context[1], $page['id']);\n                }\n\n                redirect(SYMPHONY_URL . '/blueprints/events/');\n            }\n        }\n    }\n\n    public function __actionIndex($resource_type)\n    {\n        return parent::__actionIndex(ResourceManager::RESOURCE_TYPE_EVENT);\n    }\n\n    public function __formAction()\n    {\n        $fields = $_POST['fields'];\n        $this->_errors = array();\n        $providers = Symphony::ExtensionManager()->getProvidersOf(iProvider::EVENT);\n        $providerClass = null;\n\n        if (trim($fields['name']) == '') {\n            $this->_errors['name'] = __('This is a required field');\n        }\n\n        if (trim($fields['source']) == '') {\n            $this->_errors['source'] = __('This is a required field');\n        }\n\n        $filters = isset($fields['filters']) ? $fields['filters'] : array();\n\n        // See if a Provided Datasource is saved\n        if (!empty($providers)) {\n            foreach ($providers as $providerClass => $provider) {\n                if ($fields['source'] == call_user_func(array($providerClass, 'getSource'))) {\n                    call_user_func_array(array($providerClass, 'validate'), array(&$fields, &$this->_errors));\n                    break;\n                }\n\n                unset($providerClass);\n            }\n        }\n\n        $classname = Lang::createHandle($fields['name'], 255, '_', false, true, array('@^[^a-z\\d]+@i' => '', '/[^\\w-\\.]/i' => ''));\n        $rootelement = str_replace('_', '-', $classname);\n        $extends = 'SectionEvent';\n\n        // Check to make sure the classname is not empty after handlisation.\n        if (empty($classname) && !isset($this->_errors['name'])) {\n            $this->_errors['name'] = __('Please ensure name contains at least one Latin-based character.', array($classname));\n        }\n\n        $file = EVENTS . '/event.' . $classname . '.php';\n        $isDuplicate = false;\n        $queueForDeletion = null;\n\n        if ($this->_context[0] == 'new' && is_file($file)) {\n            $isDuplicate = true;\n        } elseif ($this->_context[0] == 'edit') {\n            $existing_handle = $this->_context[1];\n\n            if ($classname != $existing_handle && is_file($file)) {\n                $isDuplicate = true;\n            } elseif ($classname != $existing_handle) {\n                $queueForDeletion = EVENTS . '/event.' . $existing_handle . '.php';\n            }\n        }\n\n        // Duplicate\n        if ($isDuplicate) {\n            $this->_errors['name'] = __('An Event with the name %s already exists', array('<code>' . $classname . '</code>'));\n        }\n\n        if (empty($this->_errors)) {\n            $source = $fields['source'];\n            $params = array(\n                'rootelement' => $rootelement,\n            );\n\n            $about = array(\n                'name' => $fields['name'],\n                'version' => 'Symphony ' . Symphony::Configuration()->get('version', 'symphony'),\n                'release date' => DateTimeObj::getGMT('c'),\n                'author name' => Symphony::Author()->getFullName(),\n                'author website' => URL,\n                'author email' => Symphony::Author()->get('email')\n            );\n\n            // If there is a provider, get their template\n            if ($providerClass) {\n                $eventShell = file_get_contents(call_user_func(array($providerClass, 'getTemplate')));\n            } else {\n                $eventShell = file_get_contents($this->getTemplate('blueprints.event'));\n                $about['trigger condition'] = $rootelement;\n            }\n\n            $this->__injectAboutInformation($eventShell, $about);\n\n            // Replace the name\n            $eventShell = str_replace('<!-- CLASS NAME -->', $classname, $eventShell);\n\n            // Build the templates\n            if ($providerClass) {\n                $eventShell = call_user_func(array($providerClass, 'prepare'), $fields, $params, $eventShell);\n            } else {\n                $this->__injectFilters($eventShell, $filters);\n\n                // Add Documentation\n                $ajaxEventDoc = new contentAjaxEventDocumentation();\n                $doc_parts = array();\n\n                // Add Documentation (Success/Failure)\n                $ajaxEventDoc->addEntrySuccessDoc($doc_parts, $rootelement, $filters);\n                $ajaxEventDoc->addEntryFailureDoc($doc_parts, $rootelement, $filters);\n\n                // Filters\n                $ajaxEventDoc->addDefaultFiltersDoc($doc_parts, $rootelement, $filters);\n\n                // Frontend Markup\n                $ajaxEventDoc->addFrontendMarkupDoc($doc_parts, $rootelement, $fields['source'], $filters);\n                $ajaxEventDoc->addSendMailFilterDoc($doc_parts, $filters);\n\n                /**\n                 * Allows adding documentation for new filters. A reference to the $documentation\n                 * array is provided, along with selected filters\n                 * @delegate AppendEventFilterDocumentation\n                 * @param string $context\n                 * '/blueprints/events/(edit|new|info)/'\n                 * @param array $selected\n                 *  An array of all the selected filters for this Event\n                 * @param array $documentation\n                 *  An array of all the documentation XMLElements, passed by reference\n                 * @param string $rootelment\n                 *  The name of this event, as a handle.\n                 */\n                Symphony::ExtensionManager()->notifyMembers('AppendEventFilterDocumentation', '/blueprints/events/', array(\n                    'selected' => $filters,\n                    'documentation' => &$doc_parts,\n                    'rootelement' => $rootelement\n                ));\n\n                $documentation = join(PHP_EOL, array_map(function($part) {\n                    return rtrim($part->generate(true, 4));\n                }, $doc_parts));\n                $documentation = str_replace('\\'', '\\\\\\'', $documentation);\n\n                $eventShell = str_replace('<!-- CLASS EXTENDS -->', $extends, $eventShell);\n                $eventShell = str_replace('<!-- DOCUMENTATION -->', General::tabsToSpaces($documentation, 4), $eventShell);\n            }\n\n            $eventShell = str_replace('<!-- ROOT ELEMENT -->', $rootelement, $eventShell);\n            $eventShell = str_replace('<!-- CLASS NAME -->', $classname, $eventShell);\n            $eventShell = str_replace('<!-- SOURCE -->', addslashes($source), $eventShell);\n\n            // Remove left over placeholders\n            $eventShell = preg_replace(array('/<!--[\\w ]++-->/'), '', $eventShell);\n\n            if ($this->_context[0] == 'new') {\n                /**\n                 * Prior to creating an Event, the file path where it will be written to\n                 * is provided and well as the contents of that file.\n                 *\n                 * @delegate EventsPreCreate\n                 * @since Symphony 2.2\n                 * @param string $context\n                 * '/blueprints/events/'\n                 * @param string $file\n                 *  The path to the Event file\n                 * @param string $contents\n                 *  The contents for this Event as a string passed by reference\n                 * @param array $filters\n                 *  An array of the filters attached to this event\n                 */\n                Symphony::ExtensionManager()->notifyMembers('EventPreCreate', '/blueprints/events/', array(\n                    'file' => $file,\n                    'contents' => &$eventShell,\n                    'filters' => $filters\n                ));\n            } else {\n                /**\n                 * Prior to editing an Event, the file path where it will be written to\n                 * is provided and well as the contents of that file.\n                 *\n                 * @delegate EventPreEdit\n                 * @since Symphony 2.2\n                 * @param string $context\n                 * '/blueprints/events/'\n                 * @param string $file\n                 *  The path to the Event file\n                 * @param string $contents\n                 *  The contents for this Event as a string passed by reference\n                 * @param array $filters\n                 *  An array of the filters attached to this event\n                 */\n                Symphony::ExtensionManager()->notifyMembers('EventPreEdit', '/blueprints/events/', array(\n                    'file' => $file,\n                    'contents' => &$eventShell,\n                    'filters' => $filters\n                ));\n            }\n\n            // Write the file\n            if (!is_writable(dirname($file)) || !General::writeFile($file, $eventShell, Symphony::Configuration()->get('write_mode', 'file'))) {\n                $this->pageAlert(\n                    __('Failed to write Event to disk.')\n                    . ' ' . __('Please check permissions on %s.', array('<code>/workspace/events</code>')),\n                    Alert::ERROR\n                );\n\n                // Write successful\n            } else {\n                if (function_exists('opcache_invalidate')) {\n                    opcache_invalidate($file, true);\n                }\n\n                // Attach this event to pages\n                $connections = $fields['connections'];\n                ResourceManager::setPages(ResourceManager::RESOURCE_TYPE_EVENT, is_null($existing_handle) ? $classname : $existing_handle, $connections);\n\n                if ($queueForDeletion) {\n                    General::deleteFile($queueForDeletion);\n\n                    $pages = PageManager::fetch(false, array('events', 'id'), array(\"\n                        `events` REGEXP '[[:<:]]\" . $existing_handle . \"[[:>:]]'\n                    \"));\n\n                    if (is_array($pages) && !empty($pages)) {\n                        foreach ($pages as $page) {\n                            $page['events'] = preg_replace('/\\b'.$existing_handle.'\\b/i', $classname, $page['events']);\n\n                            PageManager::edit($page['id'], $page);\n                        }\n                    }\n                }\n\n                if ($this->_context[0] == 'new') {\n                    /**\n                     * After creating the Event, the path to the Event file is provided\n                     *\n                     * @delegate EventPostCreate\n                     * @since Symphony 2.2\n                     * @param string $context\n                     * '/blueprints/events/'\n                     * @param string $file\n                     *  The path to the Event file\n                     */\n                    Symphony::ExtensionManager()->notifyMembers('EventPostCreate', '/blueprints/events/', array(\n                        'file' => $file\n                    ));\n                } else {\n                    /**\n                     * After editing the Event, the path to the Event file is provided\n                     *\n                     * @delegate EventPostEdit\n                     * @since Symphony 2.2\n                     * @param string $context\n                     * '/blueprints/events/'\n                     * @param string $file\n                     *  The path to the Event file\n                     * @param string $previous_file\n                     *  The path of the previous Event file in the case where an Event may\n                     *  have been renamed. To get the handle from this value, see\n                     *  `EventManager::__getHandleFromFilename`\n                     */\n                    Symphony::ExtensionManager()->notifyMembers('EventPostEdit', '/blueprints/events/', array(\n                        'file' => $file,\n                        'previous_file' => ($queueForDeletion) ? $queueForDeletion : null\n                    ));\n                }\n\n                redirect(SYMPHONY_URL . '/blueprints/events/edit/'.$classname.'/'.($this->_context[0] == 'new' ? 'created' : 'saved') . '/');\n            }\n        }\n    }\n\n    public function __injectFilters(&$shell, $elements)\n    {\n        if (!is_array($elements) || empty($elements)) {\n            return;\n        }\n        $elements = array_map('addslashes', $elements);\n        $shell = str_replace('<!-- FILTERS -->', \"'\" . implode(\"',\" . PHP_EOL . \"        '\", $elements) . \"'\", $shell);\n    }\n\n    public function __injectAboutInformation(&$shell, $details)\n    {\n        if (!is_array($details) || empty($details)) {\n            return;\n        }\n\n        foreach ($details as $key => $val) {\n            if (!is_string($key) || !is_string($val)) {\n                continue;\n            }\n\n            $shell = str_replace('<!-- ' . strtoupper(addslashes($key)) . ' -->', addslashes($val), $shell);\n        }\n    }\n}\n"], "filenames": ["symphony/content/content.blueprintsdatasources.php", "symphony/content/content.blueprintsevents.php"], "buggy_code_start_loc": [70, 533], "buggy_code_end_loc": [1532, 673], "fixing_code_start_loc": [70, 533], "fixing_code_end_loc": [1556, 677], "type": "CWE-94", "message": "Remote Code Execution vulnerability in symphony/content/content.blueprintsdatasources.php in Symphony CMS through 2.6.11 allows remote attackers to execute code and get a webshell from the back-end. The attacker must be authenticated and enter PHP code in the datasource editor or event editor.", "other": {"cve": {"id": "CVE-2017-7694", "sourceIdentifier": "cve@mitre.org", "published": "2017-04-11T23:59:00.203", "lastModified": "2020-08-25T15:59:40.593", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Remote Code Execution vulnerability in symphony/content/content.blueprintsdatasources.php in Symphony CMS through 2.6.11 allows remote attackers to execute code and get a webshell from the back-end. The attacker must be authenticated and enter PHP code in the datasource editor or event editor."}, {"lang": "es", "value": "Vulnerabilidad de ejecuci\u00f3n remota de c\u00f3digo en symphony/content/content.blueprintsdatasources.php en Symphony CMS hasta la versi\u00f3n 2.6.11 permite a atacantes remotos ejecutar c\u00f3digo y obtener una webshell desde el back-end. El atacante debe estar autenticado e ingresar c\u00f3digo PHP en el editor de datasource o editor de eventos."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:getsymphony:symphony:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.6.11", "matchCriteriaId": "DAFE4994-A060-4853-8E49-2E8F20A5EF41"}]}]}], "references": [{"url": "http://www.math1as.com/symphonycms_2.7_exec.txt", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/97594", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/symphonycms/symphony-2/commit/e30a18f8f09dca836e141bf126a26e565c9a2bc7", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/symphonycms/symphony-2/issues/2655", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch"]}]}, "github_commit_url": "https://github.com/symphonycms/symphony-2/commit/e30a18f8f09dca836e141bf126a26e565c9a2bc7"}}