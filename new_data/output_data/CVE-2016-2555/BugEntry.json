{"buggy_code": ["<?php\n/************************************************************************/\n/* ATutor\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*/\n/************************************************************************/\n/* Copyright (c) 2002-2013              \t\t\t\t\t\t\t\t*/\n/* Inclusive Design Institute                                           */\n/* http://atutor.ca                                                     */\n/* This program is free software. You can redistribute it and/or        */\n/* modify it under the terms of the GNU General Public License          */\n/* as published by the Free Software Foundation.                        */\n/************************************************************************/\n// $Id$\nif (AT_INCLUDE_PATH !== 'NULL') {\n\n    function at_db_connect($db_host, $db_port, $db_login, $db_password, $db_name){\n         if(defined('MYSQLI_ENABLED')){\n            if($db_name == ''){\n                $db = new mysqli($db_host, $db_login, $db_password);\n                //$db->query(\"SET NAMES 'utf8'\"); \n                $db->set_charset(\"utf8\");\n            }else{\n                $db = new mysqli($db_host, $db_login,$db_password, $db_name, $db_port);\n                //$db->query(\"SET NAMES 'utf8'\"); \n                $db->set_charset(\"utf8\");\n            }\n         } else{\n            $db = @mysql_connect($db_host . ':' . $db_port, $db_login, $db_password);\n            \n         }   \n        if (!$db) {\n            // AT_ERROR_NO_DB_CONNECT \n            require_once(AT_INCLUDE_PATH . 'classes/ErrorHandler/ErrorHandler.class.php');\n            $err = new ErrorHandler();\n            trigger_error('VITAL#Unable to connect to db.', E_USER_ERROR);\n            exit;\n        }\n\n        return $db;\n    }\n\n    function at_db_select($db_name, $db){\n     if(defined('MYSQLI_ENABLED')){\n        if(!$db->select_db($db_name)){\n            require_once(AT_INCLUDE_PATH . 'classes/ErrorHandler/ErrorHandler.class.php');\n            $err = new ErrorHandler();\n            //trigger_error('VITAL#DB connection established, but database \"'.$db_name.'\" cannot be selected.',\n            //                E_USER_ERROR);\n            //exit;\n        }\n\n     }else{\n        if (!@mysql_select_db($db_name, $db)) {\n            require_once(AT_INCLUDE_PATH . 'classes/ErrorHandler/ErrorHandler.class.php');\n            $err = new ErrorHandler();\n            //trigger_error('VITAL#DB connection established, but database \"'.$db_name.'\" cannot be selected.',\n            //                E_USER_ERROR);\n            //exit;\n        }\n     }\n \n    }\n\n}\nfunction at_is_db($db_name, $db){\n    // see if a database exists\n  if(defined('MYSQLI_ENABLED')){\n    $sql = \"SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '$db_name'\";\n    $result = $db->query($sql);\n    $exists = $result->num_rows;\n  }else{\n    $sql = \"SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '$db_name'\";\n    $result = mysql_query($sql, $db);\n    $exists = mysql_num_rows($result);\n  }\n  return $exists;\n}\n//functions for properly escaping input strings\nfunction my_add_null_slashes( $string ) {\n    global $db;\n    if(defined('MYSQLI_ENABLED')){\n        return $db->real_escape_string(stripslashes($string));\n    }else{\n        return mysql_real_escape_string(stripslashes($string));\n    }\n\n}\n\nfunction my_null_slashes($string) {\n    return $string;\n}\n\nif ( get_magic_quotes_gpc() == 1 ) {\n    $addslashes   = 'my_add_null_slashes';\n    $stripslashes = 'stripslashes';\n} else {\n    if(defined('MYSQLI_ENABLED')){\n        // mysqli_real_escape_string requires 2 params, breaking wherever\n        // current $addslashes with 1 param exists. So hack with trim and \n        // manually run mysqli_real_escape_string requires during sanitization below\n        $addslashes   = 'trim';\n    }else{\n        $addslashes   = 'mysql_real_escape_string';\n    }\n    $stripslashes = 'my_null_slashes';\n}\n\n/**\n * This function is used to make a DB query the same along the whole codebase\n * @access  public\n * @param   $query = Query string in the vsprintf format. Basically the first parameter of vsprintf function\n * @param   $params = Array of parameters which will be converted and inserted into the query\n * @param   $oneRow = Function returns the first element of the return array if set to TRUE. Basically returns the first row if it exists\n * @param   $sanitize = if True then addslashes will be applied to every parameter passed into the query to prevent SQL injections\n * @param   $callback_func = call back another db function, default mysql_affected_rows\n * @param   $array_type = Type of array, MYSQL_ASSOC (default), MYSQL_NUM, MYSQL_BOTH, etc.\n * @return  ALWAYS returns result of the query execution as an array of rows. If no results were found than array would be empty\n * @author  Alexey Novak, Cindy Li, Greg Gay\n */\nfunction queryDB($query, $params=array(), $oneRow = false, $sanitize = true, $callback_func = \"mysql_affected_rows\", $array_type = MYSQL_ASSOC) {\n    if(defined('MYSQLI_ENABLED') && $callback_func == \"mysql_affected_rows\"){\n        $callback_func = \"mysqli_affected_rows\";\n    }\n    $sql = create_sql($query, $params, $sanitize);\n    return execute_sql($sql, $oneRow, $callback_func, $array_type);\n\n}\nfunction queryDButf8($query, $params=array(), $oneRow = true, $sanitize, $db, $array_type = MYSQL_ASSOC) {\n    global $msg, $addslashes;\n\n    if ($sanitize) {\n        foreach($params as $i=>$value) {\n         if(defined('MYSQLI_ENABLED')){  \n             $value = $addslashes(htmlspecialchars_decode($value, ENT_QUOTES));  \n             $params[$i] = $db->real_escape_string($value);\n            }else {\n             $params[$i] = $addslashes($value);           \n            }\n        }\n    }\n\n    $sql = vsprintf($query, $params);\n\n    if(defined('MYSQLI_ENABLED')){\n           $result = $db->query($sql) or (error_log(print_r($db->error . \"\\nSQL: \" . $sql, true), 0) and $msg->addError($displayErrorMessage));                \n\n    }else{\n           $result = mysql_query($sql, $db) or (error_log(print_r(mysql_error(), true), 0) and $msg->addError($displayErrorMessage));\n    }\n    if ($oneRow) {\n          if(defined('MYSQLI_ENABLED')){            \n            $row = $result->fetch_array($array_type);              \n\n          }else {\n            $row = mysql_fetch_array($result, $array_type);              \n          }\n\n        // Check that there are no more than 1 row expected.\n          if(defined('MYSQLI_ENABLED')){\n               if ($result->fetch_array($array_type)) {\n                $msg->addError($displayErrorMessage);\n                return at_affected_rows($db);\n                }           \n          }else{\n              if (mysql_fetch_array($result, $array_type)) {\n                $msg->addError($displayErrorMessage);\n                return at_affected_rows($db);\n                }            \n          }\n\n        unset($result);\n        return ($row) ? $row : array();\n    } else{\n        return $result;\n    }\n}\nfunction sqlout($sql){\n    //output the sql with variable values inserted\n    global $sqlout;\n    $sqlout = $sql;\n}\n\nfunction create_sql($query, $params=array(), $sanitize = true){\n    global $addslashes, $db;\n    // Prevent sql injections through string parameters passed into the query\n    if ($sanitize) {\n        foreach($params as $i=>$value) {\n         if(defined('MYSQLI_ENABLED')){  \n             $value = $addslashes(htmlspecialchars_decode($value, ENT_QUOTES));  \n             $params[$i] = $db->real_escape_string($value);\n            }else {\n             $params[$i] = $addslashes($value);           \n            }\n        }\n    }\n\n    $sql = vsprintf($query, $params);\n    return $sql;\n}\nfunction execute_sql($sql, $oneRow, $callback_func, $array_type){\n    global $db, $msg;\n    \n    $oneRowErrorMessage = 'Query \"%s\" which should returned only 1 row has returned more rows.';\n    $displayErrorMessage = array('DB_QUERY', date('m/d/Y h:i:s a', time()));\n    \n    try {\n        sqlout($sql);\n        $oneRowErrorMessage = sprintf($oneRowErrorMessage, $sql);\n        // NOTE ! Uncomment the error_log() line below to start logging database queries to your php_error.log. \n        // BUT  ! Use for debugging purposes ONLY. Creates very large logs if left running.\n        \n    //error_log(print_r($sql, true), 0);    \n    \n        // Query DB and if something goes wrong then log the problem\n        if(defined('MYSQLI_ENABLED')){\n               $result = $db->query($sql) or (error_log(print_r($db->error . \"\\nSQL: \" . $sql, true), 0) and $msg->addError($displayErrorMessage));                \n\n        }else{\n               $result = mysql_query($sql, $db) or (error_log(print_r(mysql_error(), true), 0) and $msg->addError($displayErrorMessage));\n        }\n        \n        // If the query was of the type which does not suppose to return rows e.g. UPDATE/SELECT/INSERT\n        // is_bool is for mysql compatibility\n        // === null is for mysqli compatibility\n        if (is_bool($result) || $result === null) {\n            if ($oneRow) {\n                //error_log(print_r($oneRowErrorMessage, true), 0);\n                $msg->addError($displayErrorMessage);\n            }\n            if(isset($callback_func)){\n                return $callback_func($db);                \n            }else{\n                return array();\n            }\n        }\n        \n        // If we need only one row then just grab it otherwise get all the results\n        if ($oneRow) {\n              if(defined('MYSQLI_ENABLED')){            \n                $row = $result->fetch_array($array_type);              \n\n              }else {\n                $row = mysql_fetch_array($result, $array_type);              \n              }\n\n            // Check that there are no more than 1 row expected.\n            \n              if(defined('MYSQLI_ENABLED')){\n                   if ($result->fetch_array($array_type)) {\n                    //error_log(print_r($oneRowErrorMessage, true), 0);\n                    $msg->addError($displayErrorMessage);\n                    return at_affected_rows($db);\n                    }           \n              }else{\n                  if (mysql_fetch_array($result, $array_type)) {\n                    error_log(print_r($oneRowErrorMessage, true), 0);\n                    $msg->addError($displayErrorMessage);\n                    return at_affected_rows($db);\n                    }            \n              }\n\n            unset($result);\n            return ($row) ? $row : array();\n        }\n        \n        $resultArray = array();\n        if(defined('MYSQLI_ENABLED')){\n            while ($row = $result->fetch_array($array_type)) {\n                $resultArray[] = $row;\n            }    \n        }else{\n            while ($row = mysql_fetch_array($result, $array_type)) {\n                $resultArray[] = $row;\n            }\n        }\n        unset($result);\n        return $resultArray;\n    } catch (Exception $e) {\n        error_log(print_r($e, true), 0);\n        $msg->addError($displayErrorMessage);\n    }\n}\nfunction queryDBresult($sql, $params = array(), $sanitize = true){\n        global $db, $msg;\n        $sql = create_sql($sql, $params, $sanitize);\n\n        if(defined('MYSQLI_ENABLED')){\n               $result = $db->query($sql) or (error_log(print_r(mysqli_error(), true), 0) and $msg->addError($displayErrorMessage));        \n\n        }else{\n               $result = mysql_query($sql, $db) or (error_log(print_r(mysql_error(), true), 0) and $msg->addError($displayErrorMessage));\n        }\n       \n    return $result;\n}\nfunction at_affected_rows($db){\n    if(defined('MYSQLI_ENABLED')){\n        return $db->affected_rows;    \n    }else{\n        return mysql_affected_rows($db);\n    }\n}\nfunction at_db_version($db){\n \t$sql = \"SELECT VERSION() AS version\";\t\n \tif(defined('MYSQLI_ENABLED')){ \n        $result = $db->query($sql);\n        $row = $result->fetch_assoc();\t\n \t}else{\n        $result = mysql_query($sql, $db);\n        $row = mysql_fetch_assoc($result);\n\t}\n\treturn $row;\n}\t\nfunction at_db_create($sql, $db){\n \tif(defined('MYSQLI_ENABLED')){\t\n        $result = $db->query($sql);\t\n \t}else{\n        $result = mysql_query($sql, $db);\n    }\n    return $result;\n}\n\nfunction at_insert_id(){\n    global $db;\n    if(defined('MYSQLI_ENABLED')){\n        return $db->insert_id;\n    }else{\n        return mysql_insert_id($db);\n    }\n}\nfunction at_db_errno(){\n    global $db;\n    if(defined('MYSQLI_ENABLED')){    \n        return $db->errno;\n    }else{\n        return mysql_errno($db);\n    }\n}\nfunction at_db_error(){\n    global $db;\n    if(defined('MYSQLI_ENABLED')){    \n        return $db->error; \n    }else{\n        return mysql_error($db);\n    }\n}\n\n/////////\n/// USED in classes/CSVExport.class.php & CSVImport.class.php\nfunction at_field_type($result, $i){\n    if(defined('MYSQLI_ENABLED')){  \n        // Convert mysqli integer types to mysql string types\n        $metatype = $result->fetch_field_direct($i)->type;\n        if(in_array($metatype, array('1','2','3','8','9'))){\n            return \"int\";\n        }else if (in_array($metatype, array('249','250','251','252',))){\n            return \"blob\";\n        }else if(in_array($metatype, array('247', '248', '253', '254'))){\n            return \"string\";\n        } else if(in_array($metatype, array('0', '4','5'))){\n            return \"real\";\n        }else if(in_array($metatype, array('12'))){\n            return \"datetime\";\n        }else if(in_array($metatype, array('10'))){\n            return \"date\";\n        }else if(in_array($metatype, array('7'))){\n            return \"timestamp\";\n        }  \n    }else{\n        return mysql_field_type($result, $i);    \n    }\n\n}\nfunction at_num_fields($result){\n    if(defined('MYSQLI_ENABLED')){   \n        return $result->field_count; \n    }else{\n        return mysql_num_fields($result);    \n    }\n\n}\nfunction at_free_result($result){\n    if(defined('MYSQLI_ENABLED')){  \n        return $result->free_result;   \n    }else{\n        return mysql_free_result($result);    \n    }\n\n}\nfunction at_is_field_a_primary_key($result, $i){\n    if(defined('MYSQLI_ENABLED')){   \n        $meta = mysqli_fetch_field_direct($result, $i);\n\n        return $meta->flags & 2;\n    }else{\n        $flags = explode(' ', mysql_field_flags($result, $i));\n        return in_array('primary_key', $flags);\n    }\n\n}\nfunction at_field_name($result, $i){\n    if(defined('MYSQLI_ENABLED')){  \n        return $result->fetch_field_direct($i)->name;\n    }else{\n        return mysql_field_name($result, $i);   \n    }\n}\n\n////\n?>"], "fixing_code": ["<?php\n/************************************************************************/\n/* ATutor\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*/\n/************************************************************************/\n/* Copyright (c) 2002-2013              \t\t\t\t\t\t\t\t*/\n/* Inclusive Design Institute                                           */\n/* http://atutor.ca                                                     */\n/* This program is free software. You can redistribute it and/or        */\n/* modify it under the terms of the GNU General Public License          */\n/* as published by the Free Software Foundation.                        */\n/************************************************************************/\n// $Id$\nif (AT_INCLUDE_PATH !== 'NULL') {\n\n    function at_db_connect($db_host, $db_port, $db_login, $db_password, $db_name){\n         if(defined('MYSQLI_ENABLED')){\n            if($db_name == ''){\n                $db = new mysqli($db_host, $db_login, $db_password);\n                //$db->query(\"SET NAMES 'utf8'\"); \n                $db->set_charset(\"utf8\");\n            }else{\n                $db = new mysqli($db_host, $db_login,$db_password, $db_name, $db_port);\n                //$db->query(\"SET NAMES 'utf8'\"); \n                $db->set_charset(\"utf8\");\n            }\n         } else{\n            $db = @mysql_connect($db_host . ':' . $db_port, $db_login, $db_password);\n            \n         }   \n        if (!$db) {\n            // AT_ERROR_NO_DB_CONNECT \n            require_once(AT_INCLUDE_PATH . 'classes/ErrorHandler/ErrorHandler.class.php');\n            $err = new ErrorHandler();\n            trigger_error('VITAL#Unable to connect to db.', E_USER_ERROR);\n            exit;\n        }\n\n        return $db;\n    }\n\n    function at_db_select($db_name, $db){\n     if(defined('MYSQLI_ENABLED')){\n        if(!$db->select_db($db_name)){\n            require_once(AT_INCLUDE_PATH . 'classes/ErrorHandler/ErrorHandler.class.php');\n            $err = new ErrorHandler();\n            //trigger_error('VITAL#DB connection established, but database \"'.$db_name.'\" cannot be selected.',\n            //                E_USER_ERROR);\n            //exit;\n        }\n\n     }else{\n        if (!@mysql_select_db($db_name, $db)) {\n            require_once(AT_INCLUDE_PATH . 'classes/ErrorHandler/ErrorHandler.class.php');\n            $err = new ErrorHandler();\n            //trigger_error('VITAL#DB connection established, but database \"'.$db_name.'\" cannot be selected.',\n            //                E_USER_ERROR);\n            //exit;\n        }\n     }\n \n    }\n\n}\nfunction at_is_db($db_name, $db){\n    // see if a database exists\n  if(defined('MYSQLI_ENABLED')){\n    $sql = \"SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '$db_name'\";\n    $result = $db->query($sql);\n    $exists = $result->num_rows;\n  }else{\n    $sql = \"SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '$db_name'\";\n    $result = mysql_query($sql, $db);\n    $exists = mysql_num_rows($result);\n  }\n  return $exists;\n}\n//functions for properly escaping input strings\nfunction my_add_null_slashes( $string ) {\n    global $db;\n    if(defined('MYSQLI_ENABLED')){\n        return $db->real_escape_string(stripslashes($string));\n    }else{\n        return mysql_real_escape_string(stripslashes($string));\n    }\n\n}\n\nfunction my_null_slashes($string) {\n    return $string;\n}\n\nif ( get_magic_quotes_gpc() == 1 ) {\n    $addslashes   = 'my_add_null_slashes';\n    $stripslashes = 'stripslashes';\n} else {\n    // if get_magic_quotes_gpc is off, we set our own handler\n    $addslashes   = 'mysql_real_escape_string';\n    $stripslashes = 'my_null_slashes';\n}\n\n/**\n * This function is used to make a DB query the same along the whole codebase\n * @access  public\n * @param   $query = Query string in the vsprintf format. Basically the first parameter of vsprintf function\n * @param   $params = Array of parameters which will be converted and inserted into the query\n * @param   $oneRow = Function returns the first element of the return array if set to TRUE. Basically returns the first row if it exists\n * @param   $sanitize = if True then addslashes will be applied to every parameter passed into the query to prevent SQL injections\n * @param   $callback_func = call back another db function, default mysql_affected_rows\n * @param   $array_type = Type of array, MYSQL_ASSOC (default), MYSQL_NUM, MYSQL_BOTH, etc.\n * @return  ALWAYS returns result of the query execution as an array of rows. If no results were found than array would be empty\n * @author  Alexey Novak, Cindy Li, Greg Gay\n */\nfunction queryDB($query, $params=array(), $oneRow = false, $sanitize = true, $callback_func = \"mysql_affected_rows\", $array_type = MYSQL_ASSOC) {\n    if(defined('MYSQLI_ENABLED') && $callback_func == \"mysql_affected_rows\"){\n        $callback_func = \"mysqli_affected_rows\";\n    }\n    $sql = create_sql($query, $params, $sanitize);\n    return execute_sql($sql, $oneRow, $callback_func, $array_type);\n\n}\nfunction queryDButf8($query, $params=array(), $oneRow = true, $sanitize, $db, $array_type = MYSQL_ASSOC) {\n    global $msg, $addslashes;\n\n    if ($sanitize) {\n        foreach($params as $i=>$value) {\n         if(defined('MYSQLI_ENABLED')){  \n             $value = $addslashes(htmlspecialchars_decode($value, ENT_QUOTES));  \n             $params[$i] = $db->real_escape_string($value);\n            }else {\n             $params[$i] = $addslashes($value);           \n            }\n        }\n    }\n\n    $sql = vsprintf($query, $params);\n\n    if(defined('MYSQLI_ENABLED')){\n           $result = $db->query($sql) or (error_log(print_r($db->error . \"\\nSQL: \" . $sql, true), 0) and $msg->addError($displayErrorMessage));                \n\n    }else{\n           $result = mysql_query($sql, $db) or (error_log(print_r(mysql_error(), true), 0) and $msg->addError($displayErrorMessage));\n    }\n    if ($oneRow) {\n          if(defined('MYSQLI_ENABLED')){            \n            $row = $result->fetch_array($array_type);              \n\n          }else {\n            $row = mysql_fetch_array($result, $array_type);              \n          }\n\n        // Check that there are no more than 1 row expected.\n          if(defined('MYSQLI_ENABLED')){\n               if ($result->fetch_array($array_type)) {\n                $msg->addError($displayErrorMessage);\n                return at_affected_rows($db);\n                }           \n          }else{\n              if (mysql_fetch_array($result, $array_type)) {\n                $msg->addError($displayErrorMessage);\n                return at_affected_rows($db);\n                }            \n          }\n\n        unset($result);\n        return ($row) ? $row : array();\n    } else{\n        return $result;\n    }\n}\nfunction sqlout($sql){\n    //output the sql with variable values inserted\n    global $sqlout;\n    $sqlout = $sql;\n}\n\nfunction create_sql($query, $params=array(), $sanitize = true){\n    global $addslashes, $db;\n    // Prevent sql injections through string parameters passed into the query\n    if ($sanitize) {\n        foreach($params as $i=>$value) {\n         if(defined('MYSQLI_ENABLED')){  \n             $value = $addslashes(htmlspecialchars_decode($value, ENT_QUOTES));  \n             $params[$i] = $db->real_escape_string($value);\n            }else {\n             $params[$i] = $addslashes($value);           \n            }\n        }\n    }\n\n    $sql = vsprintf($query, $params);\n    return $sql;\n}\nfunction execute_sql($sql, $oneRow, $callback_func, $array_type){\n    global $db, $msg;\n    \n    $oneRowErrorMessage = 'Query \"%s\" which should returned only 1 row has returned more rows.';\n    $displayErrorMessage = array('DB_QUERY', date('m/d/Y h:i:s a', time()));\n    \n    try {\n        sqlout($sql);\n        $oneRowErrorMessage = sprintf($oneRowErrorMessage, $sql);\n        // NOTE ! Uncomment the error_log() line below to start logging database queries to your php_error.log. \n        // BUT  ! Use for debugging purposes ONLY. Creates very large logs if left running.\n        \n    //error_log(print_r($sql, true), 0);    \n    \n        // Query DB and if something goes wrong then log the problem\n        if(defined('MYSQLI_ENABLED')){\n               $result = $db->query($sql) or (error_log(print_r($db->error . \"\\nSQL: \" . $sql, true), 0) and $msg->addError($displayErrorMessage));                \n\n        }else{\n               $result = mysql_query($sql, $db) or (error_log(print_r(mysql_error(), true), 0) and $msg->addError($displayErrorMessage));\n        }\n        \n        // If the query was of the type which does not suppose to return rows e.g. UPDATE/SELECT/INSERT\n        // is_bool is for mysql compatibility\n        // === null is for mysqli compatibility\n        if (is_bool($result) || $result === null) {\n            if ($oneRow) {\n                //error_log(print_r($oneRowErrorMessage, true), 0);\n                $msg->addError($displayErrorMessage);\n            }\n            if(isset($callback_func)){\n                return $callback_func($db);                \n            }else{\n                return array();\n            }\n        }\n        \n        // If we need only one row then just grab it otherwise get all the results\n        if ($oneRow) {\n              if(defined('MYSQLI_ENABLED')){            \n                $row = $result->fetch_array($array_type);              \n\n              }else {\n                $row = mysql_fetch_array($result, $array_type);              \n              }\n\n            // Check that there are no more than 1 row expected.\n            \n              if(defined('MYSQLI_ENABLED')){\n                   if ($result->fetch_array($array_type)) {\n                    //error_log(print_r($oneRowErrorMessage, true), 0);\n                    $msg->addError($displayErrorMessage);\n                    return at_affected_rows($db);\n                    }           \n              }else{\n                  if (mysql_fetch_array($result, $array_type)) {\n                    error_log(print_r($oneRowErrorMessage, true), 0);\n                    $msg->addError($displayErrorMessage);\n                    return at_affected_rows($db);\n                    }            \n              }\n\n            unset($result);\n            return ($row) ? $row : array();\n        }\n        \n        $resultArray = array();\n        if(defined('MYSQLI_ENABLED')){\n            while ($row = $result->fetch_array($array_type)) {\n                $resultArray[] = $row;\n            }    \n        }else{\n            while ($row = mysql_fetch_array($result, $array_type)) {\n                $resultArray[] = $row;\n            }\n        }\n        unset($result);\n        return $resultArray;\n    } catch (Exception $e) {\n        error_log(print_r($e, true), 0);\n        $msg->addError($displayErrorMessage);\n    }\n}\nfunction queryDBresult($sql, $params = array(), $sanitize = true){\n        global $db, $msg;\n        $sql = create_sql($sql, $params, $sanitize);\n\n        if(defined('MYSQLI_ENABLED')){\n               $result = $db->query($sql) or (error_log(print_r(mysqli_error(), true), 0) and $msg->addError($displayErrorMessage));        \n\n        }else{\n               $result = mysql_query($sql, $db) or (error_log(print_r(mysql_error(), true), 0) and $msg->addError($displayErrorMessage));\n        }\n       \n    return $result;\n}\nfunction at_affected_rows($db){\n    if(defined('MYSQLI_ENABLED')){\n        return $db->affected_rows;    \n    }else{\n        return mysql_affected_rows($db);\n    }\n}\nfunction at_db_version($db){\n \t$sql = \"SELECT VERSION() AS version\";\t\n \tif(defined('MYSQLI_ENABLED')){ \n        $result = $db->query($sql);\n        $row = $result->fetch_assoc();\t\n \t}else{\n        $result = mysql_query($sql, $db);\n        $row = mysql_fetch_assoc($result);\n\t}\n\treturn $row;\n}\t\nfunction at_db_create($sql, $db){\n \tif(defined('MYSQLI_ENABLED')){\t\n        $result = $db->query($sql);\t\n \t}else{\n        $result = mysql_query($sql, $db);\n    }\n    return $result;\n}\n\nfunction at_insert_id(){\n    global $db;\n    if(defined('MYSQLI_ENABLED')){\n        return $db->insert_id;\n    }else{\n        return mysql_insert_id($db);\n    }\n}\nfunction at_db_errno(){\n    global $db;\n    if(defined('MYSQLI_ENABLED')){    \n        return $db->errno;\n    }else{\n        return mysql_errno($db);\n    }\n}\nfunction at_db_error(){\n    global $db;\n    if(defined('MYSQLI_ENABLED')){    \n        return $db->error; \n    }else{\n        return mysql_error($db);\n    }\n}\n\n/////////\n/// USED in classes/CSVExport.class.php & CSVImport.class.php\nfunction at_field_type($result, $i){\n    if(defined('MYSQLI_ENABLED')){  \n        // Convert mysqli integer types to mysql string types\n        $metatype = $result->fetch_field_direct($i)->type;\n        if(in_array($metatype, array('1','2','3','8','9'))){\n            return \"int\";\n        }else if (in_array($metatype, array('249','250','251','252',))){\n            return \"blob\";\n        }else if(in_array($metatype, array('247', '248', '253', '254'))){\n            return \"string\";\n        } else if(in_array($metatype, array('0', '4','5'))){\n            return \"real\";\n        }else if(in_array($metatype, array('12'))){\n            return \"datetime\";\n        }else if(in_array($metatype, array('10'))){\n            return \"date\";\n        }else if(in_array($metatype, array('7'))){\n            return \"timestamp\";\n        }  \n    }else{\n        return mysql_field_type($result, $i);    \n    }\n\n}\nfunction at_num_fields($result){\n    if(defined('MYSQLI_ENABLED')){   \n        return $result->field_count; \n    }else{\n        return mysql_num_fields($result);    \n    }\n\n}\nfunction at_free_result($result){\n    if(defined('MYSQLI_ENABLED')){  \n        return $result->free_result;   \n    }else{\n        return mysql_free_result($result);    \n    }\n\n}\nfunction at_is_field_a_primary_key($result, $i){\n    if(defined('MYSQLI_ENABLED')){   \n        $meta = mysqli_fetch_field_direct($result, $i);\n\n        return $meta->flags & 2;\n    }else{\n        $flags = explode(' ', mysql_field_flags($result, $i));\n        return in_array('primary_key', $flags);\n    }\n\n}\nfunction at_field_name($result, $i){\n    if(defined('MYSQLI_ENABLED')){  \n        return $result->fetch_field_direct($i)->name;\n    }else{\n        return mysql_field_name($result, $i);   \n    }\n}\n\n////\n?>\n"], "filenames": ["include/lib/mysql_connect.inc.php"], "buggy_code_start_loc": [96], "buggy_code_end_loc": [410], "fixing_code_start_loc": [96], "fixing_code_end_loc": [404], "type": "CWE-89", "message": "SQL injection vulnerability in include/lib/mysql_connect.inc.php in ATutor 2.2.1 allows remote attackers to execute arbitrary SQL commands via the searchFriends function to friends.inc.php.", "other": {"cve": {"id": "CVE-2016-2555", "sourceIdentifier": "cve@mitre.org", "published": "2017-04-13T14:59:01.637", "lastModified": "2017-09-08T01:29:54.920", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "SQL injection vulnerability in include/lib/mysql_connect.inc.php in ATutor 2.2.1 allows remote attackers to execute arbitrary SQL commands via the searchFriends function to friends.inc.php."}, {"lang": "es", "value": "La vulnerabilidad de inyecci\u00f3n de SQL en include/lib/mysql_connect.inc.php en ATutor 2.2.1 permite a atacantes remotos ejecutar comandos SQL arbitrarios a trav\u00e9s de la funci\u00f3n searchFriends a friends.inc.php."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:atutor:atutor:2.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "3379F338-0AB7-4ECE-B5C5-42DA74D9FD9A"}]}]}], "references": [{"url": "http://sourceincite.com/research/src-2016-08/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "http://www.rapid7.com/db/modules/exploit/multi/http/atutor_sqli", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/atutor/ATutor/commit/629b2c992447f7670a2fecc484abfad8c4c2d298", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/atutor/ATutor/commit/945a9dca01def8536516088da30fe6a4b7e9fa85", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.exploit-db.com/exploits/39514/", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/atutor/ATutor/commit/629b2c992447f7670a2fecc484abfad8c4c2d298"}}