{"buggy_code": ["<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n */\nclass AdminDashboardControllerCore extends AdminController\n{\n    public function __construct()\n    {\n        $this->bootstrap = true;\n        $this->display = 'view';\n\n        parent::__construct();\n\n        if (Tools::isSubmit('profitability_conf') || Tools::isSubmit('submitOptionsconfiguration')) {\n            $this->fields_options = $this->getOptionFields();\n        }\n    }\n\n    public function setMedia($isNewTheme = false)\n    {\n        parent::setMedia($isNewTheme);\n\n        $this->addJqueryUI('ui.datepicker');\n        $this->addJS([\n            _PS_JS_DIR_ . 'vendor/d3.v3.min.js',\n            __PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/js/vendor/nv.d3.min.js',\n            _PS_JS_DIR_ . '/admin/dashboard.js',\n        ]);\n        $this->addCSS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/css/vendor/nv.d3.css');\n    }\n\n    public function initPageHeaderToolbar()\n    {\n        $this->page_header_toolbar_title = $this->trans('Dashboard', [], 'Admin.Dashboard.Feature');\n        $this->page_header_toolbar_btn['switch_demo'] = [\n            'desc' => $this->trans('Demo mode', [], 'Admin.Dashboard.Feature'),\n            'icon' => 'process-icon-toggle-' . (Configuration::get('PS_DASHBOARD_SIMULATION') ? 'on' : 'off'),\n            'help' => $this->trans('This mode displays sample data so you can try your dashboard without real numbers.', [], 'Admin.Dashboard.Help'),\n        ];\n\n        parent::initPageHeaderToolbar();\n\n        // Remove the last element on this controller to match the title with the rule of the others\n        array_pop($this->meta_title);\n    }\n\n    protected function getOptionFields()\n    {\n        $currency = Currency::getDefaultCurrency();\n        $carriers = Carrier::getCarriers((int) $this->context->language->id, true, false, false, null, Carrier::ALL_CARRIERS);\n        $modules = Module::getModulesOnDisk(true);\n\n        $forms = [\n            'payment' => ['title' => $this->trans('Average bank fees per payment method', [], 'Admin.Dashboard.Feature'), 'id' => 'payment'],\n            'carriers' => ['title' => $this->trans('Average shipping fees per shipping method', [], 'Admin.Dashboard.Feature'), 'id' => 'carriers'],\n            'other' => ['title' => $this->trans('Other settings', [], 'Admin.Dashboard.Feature'), 'id' => 'other'],\n        ];\n        foreach ($forms as &$form) {\n            $form['icon'] = 'tab-preferences';\n            $form['fields'] = [];\n            $form['submit'] = ['title' => $this->trans('Save', [], 'Admin.Actions')];\n        }\n\n        foreach ($modules as $module) {\n            if (isset($module->tab) && $module->tab == 'payments_gateways' && $module->id) {\n                $moduleClass = Module::getInstanceByName($module->name);\n                if (!$moduleClass->isEnabledForShopContext()) {\n                    continue;\n                }\n\n                $forms['payment']['fields']['CONF_' . strtoupper($module->name) . '_FIXED'] = [\n                    'title' => $module->displayName,\n                    'desc' => $this->trans(\n                        'Choose a fixed fee for each order placed in %currency% with %module%.',\n                        [\n                            '%currency' => $currency->iso_code,\n                            '%module%' => $module->displayName,\n                        ],\n                        'Admin.Dashboard.Help'\n                    ),\n                    'validation' => 'isPrice',\n                    'cast' => 'floatval',\n                    'type' => 'text',\n                    'defaultValue' => '0',\n                    'suffix' => $currency->iso_code,\n                ];\n                $forms['payment']['fields']['CONF_' . strtoupper($module->name) . '_VAR'] = [\n                    'title' => $module->displayName,\n                    'desc' => $this->trans(\n                        'Choose a variable fee for each order placed in %currency% with %module%. It will be applied on the total paid with taxes.',\n                        [\n                            '%currency' => $currency->iso_code,\n                            '%module%' => $module->displayName,\n                        ],\n                        'Admin.Dashboard.Help'\n                    ),\n                    'validation' => 'isPercentage',\n                    'cast' => 'floatval',\n                    'type' => 'text',\n                    'defaultValue' => '0',\n                    'suffix' => '%',\n                ];\n\n                if (Currency::isMultiCurrencyActivated()) {\n                    $forms['payment']['fields']['CONF_' . strtoupper($module->name) . '_FIXED_FOREIGN'] = [\n                        'title' => $module->displayName,\n                        'desc' => $this->trans(\n                            'Choose a fixed fee for each order placed with a foreign currency with %module%.',\n                            [\n                                '%module%' => $module->displayName,\n                            ],\n                            'Admin.Dashboard.Help'\n                        ),\n                        'validation' => 'isPrice',\n                        'cast' => 'floatval',\n                        'type' => 'text',\n                        'defaultValue' => '0',\n                        'suffix' => $currency->iso_code,\n                    ];\n                    $forms['payment']['fields']['CONF_' . strtoupper($module->name) . '_VAR_FOREIGN'] = [\n                        'title' => $module->displayName,\n                        'desc' => $this->trans(\n                            'Choose a variable fee for each order placed with a foreign currency with %module%. It will be applied on the total paid with taxes.',\n                             ['%module%' => $module->displayName],\n                             'Admin.Dashboard.Help'\n                            ),\n                        'validation' => 'isPercentage',\n                        'cast' => 'floatval',\n                        'type' => 'text',\n                        'defaultValue' => '0',\n                        'suffix' => '%',\n                    ];\n                }\n            }\n        }\n\n        foreach ($carriers as $carrier) {\n            $forms['carriers']['fields']['CONF_' . strtoupper($carrier['id_reference']) . '_SHIP'] = [\n                'title' => $carrier['name'],\n                'desc' => $this->trans(\n                    'For the carrier named %s, indicate the domestic delivery costs  in percentage of the price charged to customers.',\n                    [\n                        '%s' => $carrier['name'],\n                    ],\n                    'Admin.Dashboard.Help'\n                ),\n                'validation' => 'isPercentage',\n                'cast' => 'floatval',\n                'type' => 'text',\n                'defaultValue' => '0',\n                'suffix' => '%',\n            ];\n            $forms['carriers']['fields']['CONF_' . strtoupper($carrier['id_reference']) . '_SHIP_OVERSEAS'] = [\n                'title' => $carrier['name'],\n                'desc' => $this->trans(\n                    'For the carrier named %s, indicate the overseas delivery costs in percentage of the price charged to customers.',\n                    [\n                        '%s' => $carrier['name'],\n                    ],\n                    'Admin.Dashboard.Help'\n                ),\n                'validation' => 'isPercentage',\n                'cast' => 'floatval',\n                'type' => 'text',\n                'defaultValue' => '0',\n                'suffix' => '%',\n            ];\n        }\n\n        $forms['carriers']['description'] = $this->trans('Method: Indicate the percentage of your carrier margin. For example, if you charge $10 of shipping fees to your customer for each shipment, but you really pay $4 to this carrier, then you should indicate \"40\" in the percentage field.', [], 'Admin.Dashboard.Help');\n\n        $forms['other']['fields']['CONF_AVERAGE_PRODUCT_MARGIN'] = [\n            'title' => $this->trans('Average gross margin percentage', [], 'Admin.Dashboard.Feature'),\n            'desc' => $this->trans('You should calculate this percentage as follows: ((total sales revenue) - (cost of goods sold)) / (total sales revenue) * 100. This value is only used to calculate the Dashboard approximate gross margin, if you do not specify the wholesale price for each product.', [], 'Admin.Dashboard.Help'),\n            'validation' => 'isPercentage',\n            'cast' => 'intval',\n            'type' => 'text',\n            'defaultValue' => '0',\n            'suffix' => '%',\n        ];\n\n        $forms['other']['fields']['CONF_ORDER_FIXED'] = [\n            'title' => $this->trans('Other fees per order', [], 'Admin.Dashboard.Feature'),\n            'desc' => $this->trans('You should calculate this value by making the sum of all of your additional costs per order.', [], 'Admin.Dashboard.Help'),\n            'validation' => 'isPrice',\n            'cast' => 'floatval',\n            'type' => 'text',\n            'defaultValue' => '0',\n            'suffix' => $currency->iso_code,\n        ];\n\n        Media::addJsDef([\n            'dashboard_ajax_url' => $this->context->link->getAdminLink('AdminDashboard'),\n            'read_more' => '',\n        ]);\n\n        return $forms;\n    }\n\n    public function renderView()\n    {\n        if (Tools::isSubmit('profitability_conf')) {\n            return parent::renderOptions();\n        }\n\n        $testStatsDateUpdate = $this->context->cookie->__get('stats_date_update');\n        if (!empty($testStatsDateUpdate) && $this->context->cookie->__get('stats_date_update') < strtotime(date('Y-m-d'))) {\n            switch ($this->context->employee->preselect_date_range) {\n                case 'day':\n                    $date_from = date('Y-m-d');\n                    $date_to = date('Y-m-d');\n\n                    break;\n                case 'prev-day':\n                    $date_from = date('Y-m-d', strtotime('-1 day'));\n                    $date_to = date('Y-m-d', strtotime('-1 day'));\n\n                    break;\n                case 'month':\n                default:\n                    $date_from = date('Y-m-01');\n                    $date_to = date('Y-m-d');\n\n                    break;\n                case 'prev-month':\n                    $date_from = date('Y-m-01', strtotime('-1 month'));\n                    $date_to = date('Y-m-t', strtotime('-1 month'));\n\n                    break;\n                case 'year':\n                    $date_from = date('Y-01-01');\n                    $date_to = date('Y-m-d');\n\n                    break;\n                case 'prev-year':\n                    $date_from = date('Y-m-01', strtotime('-1 year'));\n                    $date_to = date('Y-12-t', strtotime('-1 year'));\n\n                    break;\n            }\n            $this->context->employee->stats_date_from = $date_from;\n            $this->context->employee->stats_date_to = $date_to;\n            $this->context->employee->update();\n            $this->context->cookie->__set('stats_date_update', strtotime(date('Y-m-d')));\n            $this->context->cookie->write();\n        }\n\n        $calendar_helper = new HelperCalendar();\n\n        $calendar_helper->setDateFrom(Tools::getValue('date_from', $this->context->employee->stats_date_from));\n        $calendar_helper->setDateTo(Tools::getValue('date_to', $this->context->employee->stats_date_to));\n\n        $stats_compare_from = $this->context->employee->stats_compare_from;\n        $stats_compare_to = $this->context->employee->stats_compare_to;\n\n        if (null === $stats_compare_from || $stats_compare_from == '0000-00-00') {\n            $stats_compare_from = null;\n        }\n\n        if (null === $stats_compare_to || $stats_compare_to == '0000-00-00') {\n            $stats_compare_to = null;\n        }\n\n        $calendar_helper->setCompareDateFrom($stats_compare_from);\n        $calendar_helper->setCompareDateTo($stats_compare_to);\n        $calendar_helper->setCompareOption(Tools::getValue('compare_date_option', $this->context->employee->stats_compare_option));\n\n        $params = [\n            'date_from' => $this->context->employee->stats_date_from,\n            'date_to' => $this->context->employee->stats_date_to,\n        ];\n\n        $this->tpl_view_vars = [\n            'date_from' => $this->context->employee->stats_date_from,\n            'date_to' => $this->context->employee->stats_date_to,\n            'hookDashboardZoneOne' => Hook::exec('dashboardZoneOne', $params),\n            'hookDashboardZoneTwo' => Hook::exec('dashboardZoneTwo', $params),\n            'hookDashboardZoneThree' => Hook::exec('dashboardZoneThree', $params),\n            'action' => '#',\n            'warning' => $this->getWarningDomainName(),\n            'calendar' => $calendar_helper->generate(),\n            'PS_DASHBOARD_SIMULATION' => Configuration::get('PS_DASHBOARD_SIMULATION'),\n            'datepickerFrom' => Tools::getValue('datepickerFrom', $this->context->employee->stats_date_from),\n            'datepickerTo' => Tools::getValue('datepickerTo', $this->context->employee->stats_date_to),\n            'preselect_date_range' => Tools::getValue('preselectDateRange', $this->context->employee->preselect_date_range),\n        ];\n\n        return parent::renderView();\n    }\n\n    public function postProcess()\n    {\n        if (Tools::isSubmit('submitDateRange')) {\n            if (!Validate::isDate(Tools::getValue('date_from'))\n                || !Validate::isDate(Tools::getValue('date_to'))) {\n                $this->errors[] = $this->trans('The selected date range is not valid.', [], 'Admin.Notifications.Error');\n            }\n\n            if (Tools::getValue('datepicker_compare')) {\n                if (!Validate::isDate(Tools::getValue('compare_date_from'))\n                    || !Validate::isDate(Tools::getValue('compare_date_to'))) {\n                    $this->errors[] = $this->trans('The selected date range is not valid.', [], 'Admin.Notifications.Error');\n                }\n            }\n\n            if (!count($this->errors)) {\n                $this->context->employee->stats_date_from = Tools::getValue('date_from');\n                $this->context->employee->stats_date_to = Tools::getValue('date_to');\n                $this->context->employee->preselect_date_range = Tools::getValue('preselectDateRange');\n\n                if (Tools::getValue('datepicker_compare')) {\n                    $this->context->employee->stats_compare_from = Tools::getValue('compare_date_from');\n                    $this->context->employee->stats_compare_to = Tools::getValue('compare_date_to');\n                    $this->context->employee->stats_compare_option = Tools::getValue('compare_date_option');\n                } else {\n                    $this->context->employee->stats_compare_from = null;\n                    $this->context->employee->stats_compare_to = null;\n                    $this->context->employee->stats_compare_option = HelperCalendar::DEFAULT_COMPARE_OPTION;\n                }\n\n                $this->context->employee->update();\n            }\n        }\n\n        parent::postProcess();\n    }\n\n    protected function getWarningDomainName()\n    {\n        $warning = false;\n        if (Shop::isFeatureActive()) {\n            return;\n        }\n\n        $shop = Context::getContext()->shop;\n        if ($_SERVER['HTTP_HOST'] != $shop->domain && $_SERVER['HTTP_HOST'] != $shop->domain_ssl && Tools::getValue('ajax') == false) {\n            $warning = $this->trans('You are currently connected under the following domain name:', [], 'Admin.Dashboard.Notification') . ' <span style=\"color: #CC0000;\">' . $_SERVER['HTTP_HOST'] . '</span><br />';\n            if (Configuration::get('PS_MULTISHOP_FEATURE_ACTIVE')) {\n                $warning .= $this->trans(\n                    'This is different from the shop domain name set in the Multistore settings: \"%s\".',\n                    [\n                        '%s' => $shop->domain,\n                    ],\n                    'Admin.Dashboard.Notification'\n                ) . $this->trans(\n                    'If this is your main domain, please {link}change it now{/link}.',\n                    [\n                        '{link}' => '<a href=\"index.php?controller=AdminShopUrl&id_shop_url=' . (int) $shop->id . '&updateshop_url&token=' . Tools::getAdminTokenLite('AdminShopUrl') . '\">',\n                        '{/link}' => '</a>',\n                    ],\n                    'Admin.Dashboard.Notification'\n                );\n            } else {\n                $warning .= $this->trans('This is different from the domain name set in the \"SEO & URLs\" tab.', [], 'Admin.Dashboard.Notification') . '\n\t\t\t\t' . $this->trans(\n                    'If this is your main domain, please {link}change it now{/link}.',\n                    [\n                        '{link}' => '<a href=\"index.php?controller=AdminMeta&token=' . Tools::getAdminTokenLite('AdminMeta') . '#meta_fieldset_shop_url\">',\n                        '{/link}' => '</a>',\n                    ],\n                    'Admin.Dashboard.Notification'\n                );\n            }\n        }\n\n        return $warning;\n    }\n\n    public function ajaxProcessRefreshDashboard()\n    {\n        $id_module = null;\n        if ($module = Tools::getValue('module')) {\n            $module_obj = Module::getInstanceByName($module);\n            if (Validate::isLoadedObject($module_obj)) {\n                $id_module = $module_obj->id;\n            }\n        }\n\n        $params = [\n            'date_from' => $this->context->employee->stats_date_from,\n            'date_to' => $this->context->employee->stats_date_to,\n            'compare_from' => $this->context->employee->stats_compare_from,\n            'compare_to' => $this->context->employee->stats_compare_to,\n            'extra' => (int) Tools::getValue('extra'),\n        ];\n\n        // Hook called only for the module concerned\n        // An array [module_name => module_output] will be returned\n        die(json_encode(Hook::exec('dashboardData', $params, $id_module, true)));\n    }\n\n    public function ajaxProcessSetSimulationMode()\n    {\n        Configuration::updateValue('PS_DASHBOARD_SIMULATION', (int) Tools::getValue('PS_DASHBOARD_SIMULATION'));\n        die('k' . Configuration::get('PS_DASHBOARD_SIMULATION') . 'k');\n    }\n\n    public function ajaxProcessSaveDashConfig()\n    {\n        $return = ['has_errors' => false, 'errors' => []];\n        $module = Tools::getValue('module');\n        $hook = Tools::getValue('hook');\n        $configs = Tools::getValue('configs');\n\n        $params = [\n            'date_from' => $this->context->employee->stats_date_from,\n            'date_to' => $this->context->employee->stats_date_to,\n        ];\n\n        $module_obj = Module::getInstanceByName($module);\n        if (Validate::isModuleName($module) && $module_obj) {\n            $return['errors'] = $module_obj->validateDashConfig($configs);\n            if (count($return['errors'])) {\n                $return['has_errors'] = true;\n            } else {\n                $return['has_errors'] = $module_obj->saveDashConfig($configs);\n            }\n        }\n\n        if (Validate::isHookName($hook) && method_exists($module_obj, $hook)) {\n            $return['widget_html'] = $module_obj->$hook($params);\n        }\n\n        die(json_encode($return));\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n */\nclass AdminDashboardControllerCore extends AdminController\n{\n    private const DASHBOARD_ALLOWED_HOOKS = ['dashboardData', 'dashboardZoneOne', 'dashboardZoneTwo', 'displayDashboardToolbarIcons', 'displayDashboardToolbarTopMenu', 'displayDashboardTop'];\n\n    public function __construct()\n    {\n        $this->bootstrap = true;\n        $this->display = 'view';\n\n        parent::__construct();\n\n        if (Tools::isSubmit('profitability_conf') || Tools::isSubmit('submitOptionsconfiguration')) {\n            $this->fields_options = $this->getOptionFields();\n        }\n    }\n\n    public function setMedia($isNewTheme = false)\n    {\n        parent::setMedia($isNewTheme);\n\n        $this->addJqueryUI('ui.datepicker');\n        $this->addJS([\n            _PS_JS_DIR_ . 'vendor/d3.v3.min.js',\n            __PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/js/vendor/nv.d3.min.js',\n            _PS_JS_DIR_ . '/admin/dashboard.js',\n        ]);\n        $this->addCSS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/css/vendor/nv.d3.css');\n    }\n\n    public function initPageHeaderToolbar()\n    {\n        $this->page_header_toolbar_title = $this->trans('Dashboard', [], 'Admin.Dashboard.Feature');\n        $this->page_header_toolbar_btn['switch_demo'] = [\n            'desc' => $this->trans('Demo mode', [], 'Admin.Dashboard.Feature'),\n            'icon' => 'process-icon-toggle-' . (Configuration::get('PS_DASHBOARD_SIMULATION') ? 'on' : 'off'),\n            'help' => $this->trans('This mode displays sample data so you can try your dashboard without real numbers.', [], 'Admin.Dashboard.Help'),\n        ];\n\n        parent::initPageHeaderToolbar();\n\n        // Remove the last element on this controller to match the title with the rule of the others\n        array_pop($this->meta_title);\n    }\n\n    protected function getOptionFields()\n    {\n        $currency = Currency::getDefaultCurrency();\n        $carriers = Carrier::getCarriers((int) $this->context->language->id, true, false, false, null, Carrier::ALL_CARRIERS);\n        $modules = Module::getModulesOnDisk(true);\n\n        $forms = [\n            'payment' => ['title' => $this->trans('Average bank fees per payment method', [], 'Admin.Dashboard.Feature'), 'id' => 'payment'],\n            'carriers' => ['title' => $this->trans('Average shipping fees per shipping method', [], 'Admin.Dashboard.Feature'), 'id' => 'carriers'],\n            'other' => ['title' => $this->trans('Other settings', [], 'Admin.Dashboard.Feature'), 'id' => 'other'],\n        ];\n        foreach ($forms as &$form) {\n            $form['icon'] = 'tab-preferences';\n            $form['fields'] = [];\n            $form['submit'] = ['title' => $this->trans('Save', [], 'Admin.Actions')];\n        }\n\n        foreach ($modules as $module) {\n            if (isset($module->tab) && $module->tab == 'payments_gateways' && $module->id) {\n                $moduleClass = Module::getInstanceByName($module->name);\n                if (!$moduleClass->isEnabledForShopContext()) {\n                    continue;\n                }\n\n                $forms['payment']['fields']['CONF_' . strtoupper($module->name) . '_FIXED'] = [\n                    'title' => $module->displayName,\n                    'desc' => $this->trans(\n                        'Choose a fixed fee for each order placed in %currency% with %module%.',\n                        [\n                            '%currency' => $currency->iso_code,\n                            '%module%' => $module->displayName,\n                        ],\n                        'Admin.Dashboard.Help'\n                    ),\n                    'validation' => 'isPrice',\n                    'cast' => 'floatval',\n                    'type' => 'text',\n                    'defaultValue' => '0',\n                    'suffix' => $currency->iso_code,\n                ];\n                $forms['payment']['fields']['CONF_' . strtoupper($module->name) . '_VAR'] = [\n                    'title' => $module->displayName,\n                    'desc' => $this->trans(\n                        'Choose a variable fee for each order placed in %currency% with %module%. It will be applied on the total paid with taxes.',\n                        [\n                            '%currency' => $currency->iso_code,\n                            '%module%' => $module->displayName,\n                        ],\n                        'Admin.Dashboard.Help'\n                    ),\n                    'validation' => 'isPercentage',\n                    'cast' => 'floatval',\n                    'type' => 'text',\n                    'defaultValue' => '0',\n                    'suffix' => '%',\n                ];\n\n                if (Currency::isMultiCurrencyActivated()) {\n                    $forms['payment']['fields']['CONF_' . strtoupper($module->name) . '_FIXED_FOREIGN'] = [\n                        'title' => $module->displayName,\n                        'desc' => $this->trans(\n                            'Choose a fixed fee for each order placed with a foreign currency with %module%.',\n                            [\n                                '%module%' => $module->displayName,\n                            ],\n                            'Admin.Dashboard.Help'\n                        ),\n                        'validation' => 'isPrice',\n                        'cast' => 'floatval',\n                        'type' => 'text',\n                        'defaultValue' => '0',\n                        'suffix' => $currency->iso_code,\n                    ];\n                    $forms['payment']['fields']['CONF_' . strtoupper($module->name) . '_VAR_FOREIGN'] = [\n                        'title' => $module->displayName,\n                        'desc' => $this->trans(\n                            'Choose a variable fee for each order placed with a foreign currency with %module%. It will be applied on the total paid with taxes.',\n                             ['%module%' => $module->displayName],\n                             'Admin.Dashboard.Help'\n                            ),\n                        'validation' => 'isPercentage',\n                        'cast' => 'floatval',\n                        'type' => 'text',\n                        'defaultValue' => '0',\n                        'suffix' => '%',\n                    ];\n                }\n            }\n        }\n\n        foreach ($carriers as $carrier) {\n            $forms['carriers']['fields']['CONF_' . strtoupper($carrier['id_reference']) . '_SHIP'] = [\n                'title' => $carrier['name'],\n                'desc' => $this->trans(\n                    'For the carrier named %s, indicate the domestic delivery costs  in percentage of the price charged to customers.',\n                    [\n                        '%s' => $carrier['name'],\n                    ],\n                    'Admin.Dashboard.Help'\n                ),\n                'validation' => 'isPercentage',\n                'cast' => 'floatval',\n                'type' => 'text',\n                'defaultValue' => '0',\n                'suffix' => '%',\n            ];\n            $forms['carriers']['fields']['CONF_' . strtoupper($carrier['id_reference']) . '_SHIP_OVERSEAS'] = [\n                'title' => $carrier['name'],\n                'desc' => $this->trans(\n                    'For the carrier named %s, indicate the overseas delivery costs in percentage of the price charged to customers.',\n                    [\n                        '%s' => $carrier['name'],\n                    ],\n                    'Admin.Dashboard.Help'\n                ),\n                'validation' => 'isPercentage',\n                'cast' => 'floatval',\n                'type' => 'text',\n                'defaultValue' => '0',\n                'suffix' => '%',\n            ];\n        }\n\n        $forms['carriers']['description'] = $this->trans('Method: Indicate the percentage of your carrier margin. For example, if you charge $10 of shipping fees to your customer for each shipment, but you really pay $4 to this carrier, then you should indicate \"40\" in the percentage field.', [], 'Admin.Dashboard.Help');\n\n        $forms['other']['fields']['CONF_AVERAGE_PRODUCT_MARGIN'] = [\n            'title' => $this->trans('Average gross margin percentage', [], 'Admin.Dashboard.Feature'),\n            'desc' => $this->trans('You should calculate this percentage as follows: ((total sales revenue) - (cost of goods sold)) / (total sales revenue) * 100. This value is only used to calculate the Dashboard approximate gross margin, if you do not specify the wholesale price for each product.', [], 'Admin.Dashboard.Help'),\n            'validation' => 'isPercentage',\n            'cast' => 'intval',\n            'type' => 'text',\n            'defaultValue' => '0',\n            'suffix' => '%',\n        ];\n\n        $forms['other']['fields']['CONF_ORDER_FIXED'] = [\n            'title' => $this->trans('Other fees per order', [], 'Admin.Dashboard.Feature'),\n            'desc' => $this->trans('You should calculate this value by making the sum of all of your additional costs per order.', [], 'Admin.Dashboard.Help'),\n            'validation' => 'isPrice',\n            'cast' => 'floatval',\n            'type' => 'text',\n            'defaultValue' => '0',\n            'suffix' => $currency->iso_code,\n        ];\n\n        Media::addJsDef([\n            'dashboard_ajax_url' => $this->context->link->getAdminLink('AdminDashboard'),\n            'read_more' => '',\n        ]);\n\n        return $forms;\n    }\n\n    public function renderView()\n    {\n        if (Tools::isSubmit('profitability_conf')) {\n            return parent::renderOptions();\n        }\n\n        $testStatsDateUpdate = $this->context->cookie->__get('stats_date_update');\n        if (!empty($testStatsDateUpdate) && $this->context->cookie->__get('stats_date_update') < strtotime(date('Y-m-d'))) {\n            switch ($this->context->employee->preselect_date_range) {\n                case 'day':\n                    $date_from = date('Y-m-d');\n                    $date_to = date('Y-m-d');\n\n                    break;\n                case 'prev-day':\n                    $date_from = date('Y-m-d', strtotime('-1 day'));\n                    $date_to = date('Y-m-d', strtotime('-1 day'));\n\n                    break;\n                case 'month':\n                default:\n                    $date_from = date('Y-m-01');\n                    $date_to = date('Y-m-d');\n\n                    break;\n                case 'prev-month':\n                    $date_from = date('Y-m-01', strtotime('-1 month'));\n                    $date_to = date('Y-m-t', strtotime('-1 month'));\n\n                    break;\n                case 'year':\n                    $date_from = date('Y-01-01');\n                    $date_to = date('Y-m-d');\n\n                    break;\n                case 'prev-year':\n                    $date_from = date('Y-m-01', strtotime('-1 year'));\n                    $date_to = date('Y-12-t', strtotime('-1 year'));\n\n                    break;\n            }\n            $this->context->employee->stats_date_from = $date_from;\n            $this->context->employee->stats_date_to = $date_to;\n            $this->context->employee->update();\n            $this->context->cookie->__set('stats_date_update', strtotime(date('Y-m-d')));\n            $this->context->cookie->write();\n        }\n\n        $calendar_helper = new HelperCalendar();\n\n        $calendar_helper->setDateFrom(Tools::getValue('date_from', $this->context->employee->stats_date_from));\n        $calendar_helper->setDateTo(Tools::getValue('date_to', $this->context->employee->stats_date_to));\n\n        $stats_compare_from = $this->context->employee->stats_compare_from;\n        $stats_compare_to = $this->context->employee->stats_compare_to;\n\n        if (null === $stats_compare_from || $stats_compare_from == '0000-00-00') {\n            $stats_compare_from = null;\n        }\n\n        if (null === $stats_compare_to || $stats_compare_to == '0000-00-00') {\n            $stats_compare_to = null;\n        }\n\n        $calendar_helper->setCompareDateFrom($stats_compare_from);\n        $calendar_helper->setCompareDateTo($stats_compare_to);\n        $calendar_helper->setCompareOption(Tools::getValue('compare_date_option', $this->context->employee->stats_compare_option));\n\n        $params = [\n            'date_from' => $this->context->employee->stats_date_from,\n            'date_to' => $this->context->employee->stats_date_to,\n        ];\n\n        $this->tpl_view_vars = [\n            'date_from' => $this->context->employee->stats_date_from,\n            'date_to' => $this->context->employee->stats_date_to,\n            'hookDashboardZoneOne' => Hook::exec('dashboardZoneOne', $params),\n            'hookDashboardZoneTwo' => Hook::exec('dashboardZoneTwo', $params),\n            'hookDashboardZoneThree' => Hook::exec('dashboardZoneThree', $params),\n            'action' => '#',\n            'warning' => $this->getWarningDomainName(),\n            'calendar' => $calendar_helper->generate(),\n            'PS_DASHBOARD_SIMULATION' => Configuration::get('PS_DASHBOARD_SIMULATION'),\n            'datepickerFrom' => Tools::getValue('datepickerFrom', $this->context->employee->stats_date_from),\n            'datepickerTo' => Tools::getValue('datepickerTo', $this->context->employee->stats_date_to),\n            'preselect_date_range' => Tools::getValue('preselectDateRange', $this->context->employee->preselect_date_range),\n        ];\n\n        return parent::renderView();\n    }\n\n    public function postProcess()\n    {\n        if (Tools::isSubmit('submitDateRange')) {\n            if (!Validate::isDate(Tools::getValue('date_from'))\n                || !Validate::isDate(Tools::getValue('date_to'))) {\n                $this->errors[] = $this->trans('The selected date range is not valid.', [], 'Admin.Notifications.Error');\n            }\n\n            if (Tools::getValue('datepicker_compare')) {\n                if (!Validate::isDate(Tools::getValue('compare_date_from'))\n                    || !Validate::isDate(Tools::getValue('compare_date_to'))) {\n                    $this->errors[] = $this->trans('The selected date range is not valid.', [], 'Admin.Notifications.Error');\n                }\n            }\n\n            if (!count($this->errors)) {\n                $this->context->employee->stats_date_from = Tools::getValue('date_from');\n                $this->context->employee->stats_date_to = Tools::getValue('date_to');\n                $this->context->employee->preselect_date_range = Tools::getValue('preselectDateRange');\n\n                if (Tools::getValue('datepicker_compare')) {\n                    $this->context->employee->stats_compare_from = Tools::getValue('compare_date_from');\n                    $this->context->employee->stats_compare_to = Tools::getValue('compare_date_to');\n                    $this->context->employee->stats_compare_option = Tools::getValue('compare_date_option');\n                } else {\n                    $this->context->employee->stats_compare_from = null;\n                    $this->context->employee->stats_compare_to = null;\n                    $this->context->employee->stats_compare_option = HelperCalendar::DEFAULT_COMPARE_OPTION;\n                }\n\n                $this->context->employee->update();\n            }\n        }\n\n        parent::postProcess();\n    }\n\n    protected function getWarningDomainName()\n    {\n        $warning = false;\n        if (Shop::isFeatureActive()) {\n            return;\n        }\n\n        $shop = Context::getContext()->shop;\n        if ($_SERVER['HTTP_HOST'] != $shop->domain && $_SERVER['HTTP_HOST'] != $shop->domain_ssl && Tools::getValue('ajax') == false) {\n            $warning = $this->trans('You are currently connected under the following domain name:', [], 'Admin.Dashboard.Notification') . ' <span style=\"color: #CC0000;\">' . $_SERVER['HTTP_HOST'] . '</span><br />';\n            if (Configuration::get('PS_MULTISHOP_FEATURE_ACTIVE')) {\n                $warning .= $this->trans(\n                    'This is different from the shop domain name set in the Multistore settings: \"%s\".',\n                    [\n                        '%s' => $shop->domain,\n                    ],\n                    'Admin.Dashboard.Notification'\n                ) . $this->trans(\n                    'If this is your main domain, please {link}change it now{/link}.',\n                    [\n                        '{link}' => '<a href=\"index.php?controller=AdminShopUrl&id_shop_url=' . (int) $shop->id . '&updateshop_url&token=' . Tools::getAdminTokenLite('AdminShopUrl') . '\">',\n                        '{/link}' => '</a>',\n                    ],\n                    'Admin.Dashboard.Notification'\n                );\n            } else {\n                $warning .= $this->trans('This is different from the domain name set in the \"SEO & URLs\" tab.', [], 'Admin.Dashboard.Notification') . '\n\t\t\t\t' . $this->trans(\n                    'If this is your main domain, please {link}change it now{/link}.',\n                    [\n                        '{link}' => '<a href=\"index.php?controller=AdminMeta&token=' . Tools::getAdminTokenLite('AdminMeta') . '#meta_fieldset_shop_url\">',\n                        '{/link}' => '</a>',\n                    ],\n                    'Admin.Dashboard.Notification'\n                );\n            }\n        }\n\n        return $warning;\n    }\n\n    public function ajaxProcessRefreshDashboard()\n    {\n        $id_module = null;\n        if ($module = Tools::getValue('module')) {\n            $module_obj = Module::getInstanceByName($module);\n            if (Validate::isLoadedObject($module_obj)) {\n                $id_module = $module_obj->id;\n            }\n        }\n\n        $params = [\n            'date_from' => $this->context->employee->stats_date_from,\n            'date_to' => $this->context->employee->stats_date_to,\n            'compare_from' => $this->context->employee->stats_compare_from,\n            'compare_to' => $this->context->employee->stats_compare_to,\n            'extra' => (int) Tools::getValue('extra'),\n        ];\n\n        // Hook called only for the module concerned\n        // An array [module_name => module_output] will be returned\n        die(json_encode(Hook::exec('dashboardData', $params, $id_module, true)));\n    }\n\n    public function ajaxProcessSetSimulationMode()\n    {\n        Configuration::updateValue('PS_DASHBOARD_SIMULATION', (int) Tools::getValue('PS_DASHBOARD_SIMULATION'));\n        die('k' . Configuration::get('PS_DASHBOARD_SIMULATION') . 'k');\n    }\n\n    public function ajaxProcessSaveDashConfig()\n    {\n        $return = ['has_errors' => false, 'errors' => []];\n        $module = Tools::getValue('module');\n        $hook = Tools::getValue('hook');\n        $configs = Tools::getValue('configs');\n\n        if (!in_array($hook, self::DASHBOARD_ALLOWED_HOOKS))\n        {\n            $return['has_errors'] = true;\n            $return['errors'][] = 'This hook is not allowed here.';\n            die(json_encode($return));\n        }\n\n        $params = [\n            'date_from' => $this->context->employee->stats_date_from,\n            'date_to' => $this->context->employee->stats_date_to,\n        ];\n\n        $module_obj = Module::getInstanceByName($module);\n        if (Validate::isModuleName($module) && $module_obj) {\n            $return['errors'] = $module_obj->validateDashConfig($configs);\n            if (count($return['errors'])) {\n                $return['has_errors'] = true;\n            } else {\n                $return['has_errors'] = $module_obj->saveDashConfig($configs);\n            }\n        }\n\n        if (method_exists($module_obj, $hook)) {\n            $return['widget_html'] = $module_obj->$hook($params);\n        }\n\n        die(json_encode($return));\n    }\n}\n"], "filenames": ["controllers/admin/AdminDashboardController.php"], "buggy_code_start_loc": [27], "buggy_code_end_loc": [442], "fixing_code_start_loc": [28], "fixing_code_end_loc": [451], "type": "CWE-269", "message": "PrestaShop is an Open Source e-commerce web application. In affected versions any module can be disabled or uninstalled from back office, even with low user right. This allows low privileged users to disable portions of a shops functionality. Commit `ce1f6708` addresses this issue and is included in version 8.1.2. Users are advised to upgrade. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2023-43663", "sourceIdentifier": "security-advisories@github.com", "published": "2023-09-28T19:15:10.633", "lastModified": "2023-10-03T00:38:50.460", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "PrestaShop is an Open Source e-commerce web application. In affected versions any module can be disabled or uninstalled from back office, even with low user right. This allows low privileged users to disable portions of a shops functionality. Commit `ce1f6708` addresses this issue and is included in version 8.1.2. Users are advised to upgrade. There are no known workarounds for this issue."}, {"lang": "es", "value": "PrestaShop es una aplicaci\u00f3n web de comercio electr\u00f3nico de c\u00f3digo abierto. En las versiones afectadas, cualquier m\u00f3dulo se puede desactivar o desinstalar desde el back office, incluso con pocos derechos de usuario. Esto permite a los usuarios con pocos privilegios desactivar partes de la funcionalidad de una tienda. El commit `ce1f6708` soluciona este problema y se incluye en la versi\u00f3n 8.1.2. Se recomienda a los usuarios que actualicen. No se conocen workarounds para este problema."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-269"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:prestashop:*:*:*:*:*:*:*:*", "versionEndExcluding": "8.1.2", "matchCriteriaId": "70A20382-47EA-477D-A6BE-0DDC760A3B02"}]}]}], "references": [{"url": "https://github.com/PrestaShop/PrestaShop/commit/ce1f67083537194e974caf86c57e547a0aaa46cd", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-6jmf-2pfc-q9m7", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/PrestaShop/commit/ce1f67083537194e974caf86c57e547a0aaa46cd"}}