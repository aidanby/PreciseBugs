{"buggy_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.gdpr.dataproviders.sentMail\");\npimcore.settings.gdpr.dataproviders.sentMail = Class.create({\n\n    searchParams: [],\n\n    initialize: function (searchParams) {\n        this.searchParams = searchParams;\n        this.getPanel();\n    },\n\n    getPanel: function () {\n\n        if(!this.panel) {\n\n            this.panel = new Ext.Panel({\n                title: t(\"gdpr_dataSource_sentMail\"),\n                layout: \"border\",\n                iconCls: \"pimcore_icon_email pimcore_icon_overlay_go\",\n                closable: false,\n                items: [\n                    this.getGrid()\n                ]\n            });\n        }\n\n        return this.panel;\n    },\n\n    getGrid: function () {\n\n        var iFrameSettings = { width : 700, height : 500};\n        var user = pimcore.globalmanager.get(\"user\");\n\n        var itemsPerPage = pimcore.helpers.grid.getDefaultPageSize();\n\n        var gridColumns = [{\n            text: \"ID\",\n            dataIndex: \"id\",\n            flex: 40,\n            hidden: true\n        },{\n            text: \"Document Id\",\n            dataIndex: \"documentId\",\n            flex: 130,\n            hidden: true\n        },\n            {\n                text: t('email_log_sent_Date'),\n                dataIndex: \"sentDate\",\n                width: 150,\n                flex: false,\n                sortable: false,\n                renderer: function (d) {\n                    var date = new Date(intval(d) * 1000);\n                    return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                }\n            },\n            {\n                text: t('from'),\n                sortable: false,\n                dataIndex: \"from\",\n                flex: 120\n            },\n            {\n                text: t('to'),\n                sortable: false,\n                dataIndex: \"to\",\n                flex: 120\n            },\n            {\n                text: t('email_log_cc'),\n                sortable: false,\n                dataIndex: \"cc\",\n                flex: 120\n            },\n            {\n                text: t('email_log_bcc'),\n                sortable: false,\n                dataIndex: \"bcc\",\n                flex: 120\n            },\n            {\n                text: t('email_log_subject'),\n                sortable: false,\n                dataIndex: \"subject\",\n                flex: 220\n            },\n            {\n                xtype: 'actioncolumn',\n                sortable: false,\n                width: 50,\n                dataIndex: \"emailLogExistsHtml\",\n                text: t('html'),\n                menuText: t('html'),\n                items : [{\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/feedback.svg\",\n                    handler: function(grid, rowIndex){\n                        if (!user.isAllowed(\"emails\")) {\n                            pimcore.helpers.showPermissionError(\"emails\");\n                            return;\n                        }\n\n                        var rec = grid.getStore().getAt(rowIndex);\n                        var url = Routing.generate('pimcore_admin_email_showemaillog', {id: rec.get('id'), type: 'html'});\n                        var iframe = new Ext.Window({\n                            title: t(\"html\"),\n                            width: iFrameSettings.width,\n                            height: iFrameSettings.height,\n                            layout: 'fit',\n                            items : [{\n                                xtype : \"box\",\n                                autoEl: {tag: 'iframe', src: url}\n                            }]\n                        });\n                        iframe.show();\n                    }.bind(this),\n                    getClass: function(v, meta, rec) {\n                        if (!user.isAllowed(\"emails\")) {\n                            return \"inactive_actioncolumn\";\n                        }\n                        if(!rec.get('emailLogExistsHtml')){\n                            return \"pimcore_hidden\";\n                        }\n                    }\n                }]\n            },\n            {\n                xtype: 'actioncolumn',\n                sortable: false,\n                width: 50,\n                dataIndex: \"emailLogExistsText\",\n                text: t('text'),\n                menuText: t('text'),\n                hidden: true,\n                items : [{\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/text.svg\",\n                    handler: function(grid, rowIndex){\n                        if (!user.isAllowed(\"emails\")) {\n                            pimcore.helpers.showPermissionError(\"emails\");\n                            return;\n                        }\n\n                        var rec = grid.getStore().getAt(rowIndex);\n                        var url = Routing.generate('pimcore_admin_email_showemaillog', {id: rec.get('id'), type: 'text'});\n                        var iframe = new Ext.Window({\n                            title: t(\"text\"),\n                            width: iFrameSettings.width,\n                            height: iFrameSettings.height,\n                            layout: 'fit',\n                            items : [{\n                                xtype : \"box\",\n                                autoEl: {tag: 'iframe', src: url}\n                            }]\n                        });\n                        iframe.show();\n                    }.bind(this),\n                    getClass: function(v, meta, rec) {\n                        if (!user.isAllowed(\"emails\")) {\n                            return \"inactive_actioncolumn\";\n                        }\n                        if(!rec.get('emailLogExistsText')){\n                            return \"pimcore_hidden\";\n                        }\n                    }\n                }]\n            },\n            {\n                xtype: 'actioncolumn',\n                sortable: false,\n                width: 120,\n                dataIndex: \"params\",\n                hidden: false,\n                text: t('parameters'),\n                menuText: t('parameters'),\n                items : [{\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/info.svg\",\n                    handler: function(grid, rowIndex){\n                        if (!user.isAllowed(\"emails\")) {\n                            pimcore.helpers.showPermissionError(\"emails\");\n                            return;\n                        }\n\n                        var rec = grid.getStore().getAt(rowIndex);\n                        var url = Routing.generate('pimcore_admin_email_showemaillog', {id: rec.get('id'), type: 'params'});\n                        var store = Ext.create('Ext.data.TreeStore', {\n                            proxy: {\n                                type: 'ajax',\n                                url: url,\n                                reader: {\n                                    type: 'json'\n                                },\n                                autoDestroy: true\n                            }\n                        });\n\n\n                        this.tree =  Ext.create('Ext.tree.Panel', {\n                            expanded: true,\n                            rootVisible: false,\n                            store: store,\n                            lines: true,\n                            columnLines: true,\n                            columns:[\n                                new Ext.tree.Column({\n                                    text: t('name'),\n                                    dataIndex: 'key',\n                                    width: 230\n                                }),\n                                {\n                                    text: t('value'),\n                                    width: 370,\n                                    dataIndex: 'data',\n                                    renderer: function(value, metadata, record) {\n\n                                        var data = record.data.data;\n                                        if (data.type == 'simple') {\n                                            return data.value;\n                                        } else {\n                                            //when the objectPath is set -> the object is still available otherwise it was\n                                            // deleted in the meantime\n                                            if (data.objectPath) {\n                                                var subtype = data.objectClassSubType.toLowerCase();\n                                                return '<span onclick=\"pimcore.helpers.open'\n                                                    + data.objectClassBase + '(' + data.objectId + ', \\''\n                                                    + subtype + '\\');\" class=\"input_drop_target\" style=\"display: block;\">'\n                                                    + data.objectPath + '</span>';\n                                            } else {\n                                                return '\"' + data.objectClass + '\" with Id: '\n                                                    + data.objectId + ' (deleted)';\n                                            }\n                                        }\n                                    }\n\n\n                                }]\n                        });\n\n                        this.window = new Ext.Window({\n                            modal: true,\n                            width: 620,\n                            height: \"90%\",\n                            title: t('parameters'),\n                            items: [this.tree],\n                            layout: \"fit\"\n                        });\n                        this.window.show();\n\n                    }.bind(this),\n                    getClass: function(v, meta, rec) {\n                        if (!user.isAllowed(\"emails\")) {\n                            return \"inactive_actioncolumn\";\n                        }\n                    }\n                }]\n            },\n            {\n                xtype: 'actioncolumn',\n                menuText: t('gdpr_dataSource_export'),\n                width: 40,\n                items: [\n                    {\n                        tooltip: t('gdpr_dataSource_export'),\n                        icon: \"/bundles/pimcoreadmin/img/flat-color-icons/export.svg\",\n                        handler: function (grid, rowIndex) {\n                            if (!user.isAllowed(\"emails\")) {\n                                pimcore.helpers.showPermissionError(\"emails\");\n                                return;\n                            }\n\n                            var data = grid.getStore().getAt(rowIndex);\n                            pimcore.helpers.download(Routing.generate('pimcore_admin_gdpr_sentmail_exportdataobject', {id: data.data.id}));\n                        }.bind(this),\n                        getClass: function(v, meta, rec) {\n                            if (!user.isAllowed(\"emails\")) {\n                                return \"inactive_actioncolumn\";\n                            }\n                        }\n\n                    }\n                ]\n            },\n            {\n                xtype: 'actioncolumn',\n                menuText: t('delete'),\n                width: 30,\n                items: [{\n                    tooltip: t('delete'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                    handler: function (grid, rowIndex) {\n                        if (!user.isAllowed(\"emails\")) {\n                            pimcore.helpers.showPermissionError(\"emails\");\n                            return;\n                        }\n\n                        var rec = grid.getStore().getAt(rowIndex);\n\n                        Ext.MessageBox.show({\n                            title:t('delete'),\n                            msg: t(\"are_you_sure\"),\n                            buttons: Ext.Msg.YESNO ,\n                            icon: Ext.MessageBox.QUESTION,\n                            fn: function (button) {\n                                if (button == \"yes\") {\n                                    Ext.Ajax.request({\n                                        url: Routing.generate('pimcore_admin_email_deleteemaillog'),\n                                        method: 'DELETE',\n                                        success: function(response){\n                                            var data = Ext.decode( response.responseText );\n                                            if(!data.success){\n                                                alert(\"Could not delete email log\");\n                                            }\n                                        },\n                                        failure: function () {\n                                            alert(\"Could not delete email log\");\n                                        },\n                                        params: { id : rec.get('id') }\n                                    });\n                                    this.store.reload();\n                                }\n                            }.bind(this)\n                        });\n\n\n\n                    }.bind(this),\n                    getClass: function(v, meta, rec) {\n                        if (!user.isAllowed(\"emails\")) {\n                            return \"inactive_actioncolumn\";\n                        }\n                    }\n                }]\n            }\n\n        ];\n\n        var storeFields = [\"id\",\"documentId\",\"subject\",\"emailLogExistsHtml\",\"params\",\"sentDate\",\"params\",\n            \"modificationDate\",\"requestUri\",\"from\",\"to\",\"cc\",\"bcc\",\"emailLogExistsHtml\",\n            \"emailLogExistsText\"];\n\n\n        this.store = pimcore.helpers.grid.buildDefaultStore(\n            Routing.generate('pimcore_admin_email_emaillogs'),\n            storeFields,\n            itemsPerPage\n        );\n\n        var proxy = this.store.getProxy();\n        proxy.extraParams[\"filter\"] = this.searchParams.email ? this.searchParams.email : \"NO-E_MAIL_GIVEN_NO_RESULT_WANTED\";\n\n        this.pagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.store);\n\n        var toolbar = Ext.create('Ext.Toolbar', {\n            cls: 'pimcore_main_toolbar',\n            items: [\n                {\n                    text: t(\"gdpr_dataSource_sentMail_only_email\") + \": \" + this.searchParams.email,\n                    xtype: \"tbtext\",\n                    style: \"margin: 0 10px 0 0;\"\n                }\n            ]\n        });\n\n        this.grid = new Ext.grid.GridPanel({\n            frame: false,\n            region: \"center\",\n            store: this.store,\n            columns : gridColumns,\n            columnLines: true,\n            stripeRows: true,\n            border: true,\n            trackMouseOver: true,\n            loadMask: true,\n            viewConfig: {\n                forceFit: true\n            },\n            tbar: toolbar,\n            bbar: this.pagingtoolbar\n        });\n\n        return this.grid;\n    }\n\n});\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.gdpr.gdprPanel\");\npimcore.settings.gdpr.gdprPanel = Class.create({\n\n    initialize: function () {\n        this.getPanel();\n    },\n\n    getPanel: function () {\n\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n\n        if(!this.panel) {\n\n            this.panel = new Ext.Panel({\n                title: t(\"gdpr_data_extractor\"),\n                layout: \"border\",\n                iconCls: \"pimcore_icon_gdpr\",\n                closable: true,\n                items: [\n                    this.getSearchPanel(),\n                    this.getTabPanel()\n                ]\n            });\n\n            tabPanel.add(this.panel);\n        }\n\n        tabPanel.setActiveTab(this.panel);\n\n        return this.panel;\n    },\n\n\n    getSearchPanel: function() {\n\n        this.formPanel = Ext.create('Ext.form.Panel', {\n            region: \"north\",\n            bodyStyle: \"padding: 10px;\",\n            items: [\n                {\n                    xtype: 'textfield',\n                    name: 'id',\n                    fieldLabel: t(\"gdpr_data_extractor_label_id\"),\n                    width: 650\n                },\n                {\n                    xtype: 'textfield',\n                    name: 'firstname',\n                    fieldLabel: t(\"gdpr_data_extractor_label_firstname\"),\n                    width: 650\n                },\n                {\n                    xtype: 'textfield',\n                    name: 'lastname',\n                    fieldLabel: t(\"gdpr_data_extractor_label_lastname\"),\n                    width: 650\n                },\n                {\n                    xtype: 'fieldcontainer',\n                    layout: 'hbox',\n                    items: [\n                        {\n                            xtype: 'textfield',\n                            name: 'email',\n                            fieldLabel: t(\"gdpr_data_extractor_label_email\"),\n                            width: 650\n                        },\n                        {\n                            xtype: \"button\",\n                            text: t(\"search\"),\n                            iconCls: \"pimcore_icon_search\",\n                            style: \"margin-left: 20px;\",\n                            handler: this.search.bind(this)\n                        }\n                    ]\n                }\n\n\n            ]\n        });\n\n        return this.formPanel;\n\n    },\n\n\n    search: function() {\n        var searchParams = this.formPanel.getForm().getFieldValues();\n\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_gdpr_admin_getdataproviders'),\n            success: function (response) {\n\n                this.tabPanel.removeAll();\n\n                var res = Ext.decode(response.responseText);\n\n                for(var i = 0; i < res.length; i++) {\n\n                    var definition = res[i];\n                    var constructor = this.stringToFunction(definition.jsClass);\n\n                    var panel = new constructor(searchParams);\n                    this.tabPanel.add(panel.getPanel());\n                }\n\n                this.tabPanel.setActiveTab(0);\n            }.bind(this)\n        });\n    },\n\n    stringToFunction: function(str) {\n        var arr = str.split(\".\");\n\n        var fn = (window || this);\n        for (var i = 0, len = arr.length; i < len; i++) {\n            fn = fn[arr[i]];\n        }\n\n        if (typeof fn !== \"function\") {\n            throw new Error(\"function not found\");\n        }\n\n        return  fn;\n    },\n\n    getTabPanel: function() {\n\n        this.tabPanel = Ext.create('Ext.tab.Panel', {\n            region: 'center'\n        });\n\n        return this.tabPanel;\n    }\n\n\n\n});\n\n"], "fixing_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.gdpr.dataproviders.sentMail\");\npimcore.settings.gdpr.dataproviders.sentMail = Class.create({\n\n    searchParams: [],\n\n    initialize: function (searchParams) {\n        this.searchParams = searchParams;\n        this.getPanel();\n    },\n\n    getPanel: function () {\n\n        if(!this.panel) {\n\n            this.panel = new Ext.Panel({\n                title: t(\"gdpr_dataSource_sentMail\"),\n                layout: \"border\",\n                iconCls: \"pimcore_icon_email pimcore_icon_overlay_go\",\n                closable: false,\n                items: [\n                    this.getGrid()\n                ]\n            });\n        }\n\n        return this.panel;\n    },\n\n    getGrid: function () {\n\n        var iFrameSettings = { width : 700, height : 500};\n        var user = pimcore.globalmanager.get(\"user\");\n\n        var itemsPerPage = pimcore.helpers.grid.getDefaultPageSize();\n\n        var gridColumns = [{\n            text: \"ID\",\n            dataIndex: \"id\",\n            flex: 40,\n            hidden: true\n        },{\n            text: \"Document Id\",\n            dataIndex: \"documentId\",\n            flex: 130,\n            hidden: true\n        },\n            {\n                text: t('email_log_sent_Date'),\n                dataIndex: \"sentDate\",\n                width: 150,\n                flex: false,\n                sortable: false,\n                renderer: function (d) {\n                    var date = new Date(intval(d) * 1000);\n                    return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                }\n            },\n            {\n                text: t('from'),\n                sortable: false,\n                dataIndex: \"from\",\n                flex: 120\n            },\n            {\n                text: t('to'),\n                sortable: false,\n                dataIndex: \"to\",\n                flex: 120\n            },\n            {\n                text: t('email_log_cc'),\n                sortable: false,\n                dataIndex: \"cc\",\n                flex: 120\n            },\n            {\n                text: t('email_log_bcc'),\n                sortable: false,\n                dataIndex: \"bcc\",\n                flex: 120\n            },\n            {\n                text: t('email_log_subject'),\n                sortable: false,\n                dataIndex: \"subject\",\n                flex: 220\n            },\n            {\n                xtype: 'actioncolumn',\n                sortable: false,\n                width: 50,\n                dataIndex: \"emailLogExistsHtml\",\n                text: t('html'),\n                menuText: t('html'),\n                items : [{\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/feedback.svg\",\n                    handler: function(grid, rowIndex){\n                        if (!user.isAllowed(\"emails\")) {\n                            pimcore.helpers.showPermissionError(\"emails\");\n                            return;\n                        }\n\n                        var rec = grid.getStore().getAt(rowIndex);\n                        var url = Routing.generate('pimcore_admin_email_showemaillog', {id: rec.get('id'), type: 'html'});\n                        var iframe = new Ext.Window({\n                            title: t(\"html\"),\n                            width: iFrameSettings.width,\n                            height: iFrameSettings.height,\n                            layout: 'fit',\n                            items : [{\n                                xtype : \"box\",\n                                autoEl: {tag: 'iframe', src: url}\n                            }]\n                        });\n                        iframe.show();\n                    }.bind(this),\n                    getClass: function(v, meta, rec) {\n                        if (!user.isAllowed(\"emails\")) {\n                            return \"inactive_actioncolumn\";\n                        }\n                        if(!rec.get('emailLogExistsHtml')){\n                            return \"pimcore_hidden\";\n                        }\n                    }\n                }]\n            },\n            {\n                xtype: 'actioncolumn',\n                sortable: false,\n                width: 50,\n                dataIndex: \"emailLogExistsText\",\n                text: t('text'),\n                menuText: t('text'),\n                hidden: true,\n                items : [{\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/text.svg\",\n                    handler: function(grid, rowIndex){\n                        if (!user.isAllowed(\"emails\")) {\n                            pimcore.helpers.showPermissionError(\"emails\");\n                            return;\n                        }\n\n                        var rec = grid.getStore().getAt(rowIndex);\n                        var url = Routing.generate('pimcore_admin_email_showemaillog', {id: rec.get('id'), type: 'text'});\n                        var iframe = new Ext.Window({\n                            title: t(\"text\"),\n                            width: iFrameSettings.width,\n                            height: iFrameSettings.height,\n                            layout: 'fit',\n                            items : [{\n                                xtype : \"box\",\n                                autoEl: {tag: 'iframe', src: url}\n                            }]\n                        });\n                        iframe.show();\n                    }.bind(this),\n                    getClass: function(v, meta, rec) {\n                        if (!user.isAllowed(\"emails\")) {\n                            return \"inactive_actioncolumn\";\n                        }\n                        if(!rec.get('emailLogExistsText')){\n                            return \"pimcore_hidden\";\n                        }\n                    }\n                }]\n            },\n            {\n                xtype: 'actioncolumn',\n                sortable: false,\n                width: 120,\n                dataIndex: \"params\",\n                hidden: false,\n                text: t('parameters'),\n                menuText: t('parameters'),\n                items : [{\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/info.svg\",\n                    handler: function(grid, rowIndex){\n                        if (!user.isAllowed(\"emails\")) {\n                            pimcore.helpers.showPermissionError(\"emails\");\n                            return;\n                        }\n\n                        var rec = grid.getStore().getAt(rowIndex);\n                        var url = Routing.generate('pimcore_admin_email_showemaillog', {id: rec.get('id'), type: 'params'});\n                        var store = Ext.create('Ext.data.TreeStore', {\n                            proxy: {\n                                type: 'ajax',\n                                url: url,\n                                reader: {\n                                    type: 'json'\n                                },\n                                autoDestroy: true\n                            }\n                        });\n\n\n                        this.tree =  Ext.create('Ext.tree.Panel', {\n                            expanded: true,\n                            rootVisible: false,\n                            store: store,\n                            lines: true,\n                            columnLines: true,\n                            columns:[\n                                new Ext.tree.Column({\n                                    text: t('name'),\n                                    dataIndex: 'key',\n                                    width: 230\n                                }),\n                                {\n                                    text: t('value'),\n                                    width: 370,\n                                    dataIndex: 'data',\n                                    renderer: function(value, metadata, record) {\n\n                                        var data = record.data.data;\n                                        if (data.type == 'simple') {\n                                            return data.value;\n                                        } else {\n                                            //when the objectPath is set -> the object is still available otherwise it was\n                                            // deleted in the meantime\n                                            if (data.objectPath) {\n                                                var subtype = data.objectClassSubType.toLowerCase();\n                                                return '<span onclick=\"pimcore.helpers.open'\n                                                    + data.objectClassBase + '(' + data.objectId + ', \\''\n                                                    + subtype + '\\');\" class=\"input_drop_target\" style=\"display: block;\">'\n                                                    + data.objectPath + '</span>';\n                                            } else {\n                                                return '\"' + data.objectClass + '\" with Id: '\n                                                    + data.objectId + ' (deleted)';\n                                            }\n                                        }\n                                    }\n\n\n                                }]\n                        });\n\n                        this.window = new Ext.Window({\n                            modal: true,\n                            width: 620,\n                            height: \"90%\",\n                            title: t('parameters'),\n                            items: [this.tree],\n                            layout: \"fit\"\n                        });\n                        this.window.show();\n\n                    }.bind(this),\n                    getClass: function(v, meta, rec) {\n                        if (!user.isAllowed(\"emails\")) {\n                            return \"inactive_actioncolumn\";\n                        }\n                    }\n                }]\n            },\n            {\n                xtype: 'actioncolumn',\n                menuText: t('gdpr_dataSource_export'),\n                width: 40,\n                items: [\n                    {\n                        tooltip: t('gdpr_dataSource_export'),\n                        icon: \"/bundles/pimcoreadmin/img/flat-color-icons/export.svg\",\n                        handler: function (grid, rowIndex) {\n                            if (!user.isAllowed(\"emails\")) {\n                                pimcore.helpers.showPermissionError(\"emails\");\n                                return;\n                            }\n\n                            var data = grid.getStore().getAt(rowIndex);\n                            pimcore.helpers.download(Routing.generate('pimcore_admin_gdpr_sentmail_exportdataobject', {id: data.data.id}));\n                        }.bind(this),\n                        getClass: function(v, meta, rec) {\n                            if (!user.isAllowed(\"emails\")) {\n                                return \"inactive_actioncolumn\";\n                            }\n                        }\n\n                    }\n                ]\n            },\n            {\n                xtype: 'actioncolumn',\n                menuText: t('delete'),\n                width: 30,\n                items: [{\n                    tooltip: t('delete'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                    handler: function (grid, rowIndex) {\n                        if (!user.isAllowed(\"emails\")) {\n                            pimcore.helpers.showPermissionError(\"emails\");\n                            return;\n                        }\n\n                        var rec = grid.getStore().getAt(rowIndex);\n\n                        Ext.MessageBox.show({\n                            title:t('delete'),\n                            msg: t(\"are_you_sure\"),\n                            buttons: Ext.Msg.YESNO ,\n                            icon: Ext.MessageBox.QUESTION,\n                            fn: function (button) {\n                                if (button == \"yes\") {\n                                    Ext.Ajax.request({\n                                        url: Routing.generate('pimcore_admin_email_deleteemaillog'),\n                                        method: 'DELETE',\n                                        success: function(response){\n                                            var data = Ext.decode( response.responseText );\n                                            if(!data.success){\n                                                alert(\"Could not delete email log\");\n                                            }\n                                        },\n                                        failure: function () {\n                                            alert(\"Could not delete email log\");\n                                        },\n                                        params: { id : rec.get('id') }\n                                    });\n                                    this.store.reload();\n                                }\n                            }.bind(this)\n                        });\n\n\n\n                    }.bind(this),\n                    getClass: function(v, meta, rec) {\n                        if (!user.isAllowed(\"emails\")) {\n                            return \"inactive_actioncolumn\";\n                        }\n                    }\n                }]\n            }\n\n        ];\n\n        var storeFields = [\"id\",\"documentId\",\"subject\",\"emailLogExistsHtml\",\"params\",\"sentDate\",\"params\",\n            \"modificationDate\",\"requestUri\",\"from\",\"to\",\"cc\",\"bcc\",\"emailLogExistsHtml\",\n            \"emailLogExistsText\"];\n\n\n        this.store = pimcore.helpers.grid.buildDefaultStore(\n            Routing.generate('pimcore_admin_email_emaillogs'),\n            storeFields,\n            itemsPerPage\n        );\n\n        var proxy = this.store.getProxy();\n        proxy.extraParams[\"filter\"] = this.searchParams.email ? this.searchParams.email : \"NO-E_MAIL_GIVEN_NO_RESULT_WANTED\";\n\n        this.pagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.store);\n\n        var toolbar = Ext.create('Ext.Toolbar', {\n            cls: 'pimcore_main_toolbar',\n            items: [\n                {\n                    text: t(\"gdpr_dataSource_sentMail_only_email\") + \": \" + Ext.util.Format.htmlEncode(this.searchParams.email),\n                    xtype: \"tbtext\",\n                    style: \"margin: 0 10px 0 0;\"\n                }\n            ]\n        });\n\n        this.grid = new Ext.grid.GridPanel({\n            frame: false,\n            region: \"center\",\n            store: this.store,\n            columns : gridColumns,\n            columnLines: true,\n            stripeRows: true,\n            border: true,\n            trackMouseOver: true,\n            loadMask: true,\n            viewConfig: {\n                forceFit: true\n            },\n            tbar: toolbar,\n            bbar: this.pagingtoolbar\n        });\n\n        return this.grid;\n    }\n\n});\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.gdpr.gdprPanel\");\npimcore.settings.gdpr.gdprPanel = Class.create({\n\n    initialize: function () {\n        this.getPanel();\n    },\n\n    getPanel: function () {\n\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n\n        if(!this.panel) {\n\n            this.panel = new Ext.Panel({\n                title: t(\"gdpr_data_extractor\"),\n                layout: \"border\",\n                iconCls: \"pimcore_icon_gdpr\",\n                closable: true,\n                items: [\n                    this.getSearchPanel(),\n                    this.getTabPanel()\n                ]\n            });\n\n            tabPanel.add(this.panel);\n        }\n\n        tabPanel.setActiveTab(this.panel);\n\n        return this.panel;\n    },\n\n\n    getSearchPanel: function() {\n\n        this.formPanel = Ext.create('Ext.form.Panel', {\n            region: \"north\",\n            bodyStyle: \"padding: 10px;\",\n            items: [\n                {\n                    xtype: 'textfield',\n                    name: 'id',\n                    fieldLabel: t(\"gdpr_data_extractor_label_id\"),\n                    width: 650\n                },\n                {\n                    xtype: 'textfield',\n                    name: 'firstname',\n                    fieldLabel: t(\"gdpr_data_extractor_label_firstname\"),\n                    width: 650\n                },\n                {\n                    xtype: 'textfield',\n                    name: 'lastname',\n                    fieldLabel: t(\"gdpr_data_extractor_label_lastname\"),\n                    width: 650\n                },\n                {\n                    xtype: 'fieldcontainer',\n                    layout: 'hbox',\n                    items: [\n                        {\n                            xtype: 'textfield',\n                            name: 'email',\n                            fieldLabel: t(\"gdpr_data_extractor_label_email\"),\n                            width: 650,\n                            validator: function (value) {\n                                if(value !== value.replace(/[^a-zA-Z0-9_\\-@.]/g,'')){\n                                    this.setValue(value.replace(/[^a-zA-Z0-9_\\-@.]/g,''));\n                                }\n\n                                return true;\n                            }\n                        },\n                        {\n                            xtype: \"button\",\n                            text: t(\"search\"),\n                            iconCls: \"pimcore_icon_search\",\n                            style: \"margin-left: 20px;\",\n                            handler: this.search.bind(this)\n                        }\n                    ]\n                }\n\n\n            ]\n        });\n\n        return this.formPanel;\n\n    },\n\n\n    search: function() {\n        var searchParams = this.formPanel.getForm().getFieldValues();\n\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_gdpr_admin_getdataproviders'),\n            success: function (response) {\n\n                this.tabPanel.removeAll();\n\n                var res = Ext.decode(response.responseText);\n\n                for(var i = 0; i < res.length; i++) {\n\n                    var definition = res[i];\n                    var constructor = this.stringToFunction(definition.jsClass);\n\n                    var panel = new constructor(searchParams);\n                    this.tabPanel.add(panel.getPanel());\n                }\n\n                this.tabPanel.setActiveTab(0);\n            }.bind(this)\n        });\n    },\n\n    stringToFunction: function(str) {\n        var arr = str.split(\".\");\n\n        var fn = (window || this);\n        for (var i = 0, len = arr.length; i < len; i++) {\n            fn = fn[arr[i]];\n        }\n\n        if (typeof fn !== \"function\") {\n            throw new Error(\"function not found\");\n        }\n\n        return  fn;\n    },\n\n    getTabPanel: function() {\n\n        this.tabPanel = Ext.create('Ext.tab.Panel', {\n            region: 'center'\n        });\n\n        return this.tabPanel;\n    }\n\n\n\n});\n\n"], "filenames": ["bundles/AdminBundle/Resources/public/js/pimcore/settings/gdpr/dataproviders/sentMail.js", "bundles/AdminBundle/Resources/public/js/pimcore/settings/gdpr/gdprPanel.js"], "buggy_code_start_loc": [369, 79], "buggy_code_end_loc": [370, 80], "fixing_code_start_loc": [369, 79], "fixing_code_end_loc": [370, 87], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.5.18.", "other": {"cve": {"id": "CVE-2023-1067", "sourceIdentifier": "security@huntr.dev", "published": "2023-02-27T14:15:10.410", "lastModified": "2023-03-01T00:20:49.640", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.5.18."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.2, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.1, "impactScore": 3.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.18", "matchCriteriaId": "C5062760-52C7-46A6-8252-9C6869A920AA"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/4b5733266d7d6aeb4f221a15e005db83fc198edf", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/31d17b34-f80d-49f2-86e7-97ae715cc045", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/4b5733266d7d6aeb4f221a15e005db83fc198edf"}}