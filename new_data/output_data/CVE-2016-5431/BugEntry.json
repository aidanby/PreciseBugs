{"buggy_code": ["<?php\n\nuse phpseclib\\Crypt\\RSA;\n\nclass JOSE_JWS extends JOSE_JWT {\n    function __construct($jwt) {\n        $this->header = $jwt->header;\n        $this->claims = $jwt->claims;\n        $this->signature = $jwt->signature;\n        $this->raw = $jwt->raw;\n    }\n\n    function toJson($syntax = 'flattened') {\n        if ($syntax == 'flattened') {\n            $components = array(\n                'protected' => $this->compact((object) $this->header),\n                'payload'   => $this->compact((object) $this->claims),\n                'signature' => $this->compact($this->signature)\n            );\n        } else {\n            $components = array(\n                'payload' => $this->compact((object) $this->claims),\n                'signatures' => array(\n                    'protected' => $this->compact((object) $this->header),\n                    'signature' => $this->compact($this->signature)\n                )\n            );\n        }\n        return json_encode($components);\n    }\n\n    function sign($private_key_or_secret, $algorithm = 'HS256') {\n        $this->header['alg'] = $algorithm;\n        if (\n            $private_key_or_secret instanceof JOSE_JWK &&\n            !array_key_exists('kid', $this->header) &&\n            array_key_exists('kid', $private_key_or_secret->components)\n        ) {\n            $this->header['kid'] = $private_key_or_secret->components['kid'];\n        }\n        $this->signature = $this->_sign($private_key_or_secret);\n        if (!$this->signature) {\n            throw new JOSE_Exception('Signing failed because of unknown reason');\n        }\n        return $this;\n    }\n\n    function verify($public_key_or_secret, $alg = null) {\n        if ($this->_verify($public_key_or_secret, $alg)) {\n            return $this;\n        } else {\n            throw new JOSE_Exception_VerificationFailed('Signature verification failed');\n        }\n    }\n\n    private function rsa($public_or_private_key, $padding_mode) {\n        if ($public_or_private_key instanceof JOSE_JWK) {\n            $rsa = $public_or_private_key->toKey();\n        } else if ($public_or_private_key instanceof RSA) {\n            $rsa = $public_or_private_key;\n        } else {\n            $rsa = new RSA();\n            $rsa->loadKey($public_or_private_key);\n        }\n        $rsa->setHash($this->digest());\n        $rsa->setMGFHash($this->digest());\n        $rsa->setSaltLength(false); # NOTE: https://github.com/phpseclib/phpseclib/issues/768\n        $rsa->setSignatureMode($padding_mode);\n        return $rsa;\n    }\n\n    private function digest() {\n        switch ($this->header['alg']) {\n            case 'HS256':\n            case 'RS256':\n            case 'ES256':\n            case 'PS256':\n                return 'sha256';\n            case 'HS384':\n            case 'RS384':\n            case 'ES384':\n            case 'PS384':\n                return 'sha384';\n            case 'HS512':\n            case 'RS512':\n            case 'ES512':\n            case 'PS512':\n                return 'sha512';\n            default:\n                throw new JOSE_Exception_UnexpectedAlgorithm('Unknown algorithm');\n        }\n    }\n\n    private function _sign($private_key_or_secret) {\n        $signature_base_string = implode('.', array(\n            $this->compact((object) $this->header),\n            $this->compact((object) $this->claims)\n        ));\n        switch ($this->header['alg']) {\n            case 'HS256':\n            case 'HS384':\n            case 'HS512':\n                return hash_hmac($this->digest(), $signature_base_string, $private_key_or_secret, true);\n            case 'RS256':\n            case 'RS384':\n            case 'RS512':\n                return $this->rsa($private_key_or_secret, RSA::SIGNATURE_PKCS1)->sign($signature_base_string);\n            case 'ES256':\n            case 'ES384':\n            case 'ES512':\n                throw new JOSE_Exception_UnexpectedAlgorithm('Algorithm not supported');\n            case 'PS256':\n            case 'PS384':\n            case 'PS512':\n                return $this->rsa($private_key_or_secret, RSA::SIGNATURE_PSS)->sign($signature_base_string);\n            default:\n                throw new JOSE_Exception_UnexpectedAlgorithm('Unknown algorithm');\n        }\n    }\n\n    private function _verify($public_key_or_secret, $expected_alg = null) {\n        $segments = explode('.', $this->raw);\n        $signature_base_string = implode('.', array($segments[0], $segments[1]));\n        if (!$expected_alg) {\n            # NOTE: might better to warn here\n            $expected_alg = $this->header['alg'];\n        }\n        switch ($expected_alg) {\n            case 'HS256':\n            case 'HS384':\n            case 'HS512':\n                return $this->signature === hash_hmac($this->digest(), $signature_base_string, $public_key_or_secret, true);\n            case 'RS256':\n            case 'RS384':\n            case 'RS512':\n                return $this->rsa($public_key_or_secret, RSA::SIGNATURE_PKCS1)->verify($signature_base_string, $this->signature);\n            case 'ES256':\n            case 'ES384':\n            case 'ES512':\n                throw new JOSE_Exception_UnexpectedAlgorithm('Algorithm not supported');\n            case 'PS256':\n            case 'PS384':\n            case 'PS512':\n                return $this->rsa($public_key_or_secret, RSA::SIGNATURE_PSS)->verify($signature_base_string, $this->signature);\n            default:\n                throw new JOSE_Exception_UnexpectedAlgorithm('Unknown algorithm');\n        }\n    }\n}\n"], "fixing_code": ["<?php\n\nuse phpseclib\\Crypt\\RSA;\n\nclass JOSE_JWS extends JOSE_JWT {\n    function __construct($jwt) {\n        $this->header = $jwt->header;\n        $this->claims = $jwt->claims;\n        $this->signature = $jwt->signature;\n        $this->raw = $jwt->raw;\n    }\n\n    function toJson($syntax = 'flattened') {\n        if ($syntax == 'flattened') {\n            $components = array(\n                'protected' => $this->compact((object) $this->header),\n                'payload'   => $this->compact((object) $this->claims),\n                'signature' => $this->compact($this->signature)\n            );\n        } else {\n            $components = array(\n                'payload' => $this->compact((object) $this->claims),\n                'signatures' => array(\n                    'protected' => $this->compact((object) $this->header),\n                    'signature' => $this->compact($this->signature)\n                )\n            );\n        }\n        return json_encode($components);\n    }\n\n    function sign($private_key_or_secret, $algorithm = 'HS256') {\n        $this->header['alg'] = $algorithm;\n        if (\n            $private_key_or_secret instanceof JOSE_JWK &&\n            !array_key_exists('kid', $this->header) &&\n            array_key_exists('kid', $private_key_or_secret->components)\n        ) {\n            $this->header['kid'] = $private_key_or_secret->components['kid'];\n        }\n        $this->signature = $this->_sign($private_key_or_secret);\n        if (!$this->signature) {\n            throw new JOSE_Exception('Signing failed because of unknown reason');\n        }\n        return $this;\n    }\n\n    function verify($public_key_or_secret, $alg = null) {\n        if ($this->_verify($public_key_or_secret, $alg)) {\n            return $this;\n        } else {\n            throw new JOSE_Exception_VerificationFailed('Signature verification failed');\n        }\n    }\n\n    private function rsa($public_or_private_key, $padding_mode) {\n        if ($public_or_private_key instanceof JOSE_JWK) {\n            $rsa = $public_or_private_key->toKey();\n        } else if ($public_or_private_key instanceof RSA) {\n            $rsa = $public_or_private_key;\n        } else {\n            $rsa = new RSA();\n            $rsa->loadKey($public_or_private_key);\n        }\n        $rsa->setHash($this->digest());\n        $rsa->setMGFHash($this->digest());\n        $rsa->setSaltLength(false); # NOTE: https://github.com/phpseclib/phpseclib/issues/768\n        $rsa->setSignatureMode($padding_mode);\n        return $rsa;\n    }\n\n    private function digest() {\n        switch ($this->header['alg']) {\n            case 'HS256':\n            case 'RS256':\n            case 'ES256':\n            case 'PS256':\n                return 'sha256';\n            case 'HS384':\n            case 'RS384':\n            case 'ES384':\n            case 'PS384':\n                return 'sha384';\n            case 'HS512':\n            case 'RS512':\n            case 'ES512':\n            case 'PS512':\n                return 'sha512';\n            default:\n                throw new JOSE_Exception_UnexpectedAlgorithm('Unknown algorithm');\n        }\n    }\n\n    private function _sign($private_key_or_secret) {\n        $signature_base_string = implode('.', array(\n            $this->compact((object) $this->header),\n            $this->compact((object) $this->claims)\n        ));\n        switch ($this->header['alg']) {\n            case 'HS256':\n            case 'HS384':\n            case 'HS512':\n                return hash_hmac($this->digest(), $signature_base_string, $private_key_or_secret, true);\n            case 'RS256':\n            case 'RS384':\n            case 'RS512':\n                return $this->rsa($private_key_or_secret, RSA::SIGNATURE_PKCS1)->sign($signature_base_string);\n            case 'ES256':\n            case 'ES384':\n            case 'ES512':\n                throw new JOSE_Exception_UnexpectedAlgorithm('Algorithm not supported');\n            case 'PS256':\n            case 'PS384':\n            case 'PS512':\n                return $this->rsa($private_key_or_secret, RSA::SIGNATURE_PSS)->sign($signature_base_string);\n            default:\n                throw new JOSE_Exception_UnexpectedAlgorithm('Unknown algorithm');\n        }\n    }\n\n    private function _verify($public_key_or_secret, $expected_alg = null) {\n        $segments = explode('.', $this->raw);\n        $signature_base_string = implode('.', array($segments[0], $segments[1]));\n        if (!$expected_alg) {\n            $expected_alg = $this->header['alg'];\n            $using_autodetected_alg = true;\n        }\n        switch ($expected_alg) {\n            case 'HS256':\n            case 'HS384':\n            case 'HS512':\n                if ($using_autodetected_alg) {\n                    throw new JOSE_Exception_UnexpectedAlgorithm(\n                        'HMAC algs MUST be explicitly specified as $expected_alg'\n                    );\n                }\n                $hmac_hash = hash_hmac($this->digest(), $signature_base_string, $public_key_or_secret, true);\n                return hash_equals($this->signature, $hmac_hash);\n            case 'RS256':\n            case 'RS384':\n            case 'RS512':\n                return $this->rsa($public_key_or_secret, RSA::SIGNATURE_PKCS1)->verify($signature_base_string, $this->signature);\n            case 'ES256':\n            case 'ES384':\n            case 'ES512':\n                throw new JOSE_Exception_UnexpectedAlgorithm('Algorithm not supported');\n            case 'PS256':\n            case 'PS384':\n            case 'PS512':\n                return $this->rsa($public_key_or_secret, RSA::SIGNATURE_PSS)->verify($signature_base_string, $this->signature);\n            default:\n                throw new JOSE_Exception_UnexpectedAlgorithm('Unknown algorithm');\n        }\n    }\n}\n"], "filenames": ["src/JOSE/JWS.php"], "buggy_code_start_loc": [125], "buggy_code_end_loc": [133], "fixing_code_start_loc": [124], "fixing_code_end_loc": [139], "type": "CWE-327", "message": "The PHP JOSE Library by Gree Inc. before version 2.2.1 is vulnerable to key confusion/algorithm substitution in the JWS component resulting in bypassing the signature verification via crafted tokens.", "other": {"cve": {"id": "CVE-2016-5431", "sourceIdentifier": "secalert@redhat.com", "published": "2019-08-07T15:15:11.783", "lastModified": "2023-03-03T15:53:43.550", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The PHP JOSE Library by Gree Inc. before version 2.2.1 is vulnerable to key confusion/algorithm substitution in the JWS component resulting in bypassing the signature verification via crafted tokens."}, {"lang": "es", "value": "La biblioteca JOSE PHP de Gree Inc. anterior a versi\u00f3n 2.2.0, incluy\u00e9ndola, es vulnerable a la sustituci\u00f3n de claves de confusion/algorithm en el componente JWS, resultando en la omisi\u00f3n de la comprobaci\u00f3n de firma por medio de tokens dise\u00f1ados."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-327"}]}, {"source": "secalert@redhat.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-327"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:php_jose_project:php_jose:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.2.1", "matchCriteriaId": "E3F58C77-1D43-4210-A516-D3D010693832"}]}]}], "references": [{"url": "https://github.com/nov/jose-php/commit/1cce55e27adf0274193eb1cd74b927a398a3df4b", "source": "secalert@redhat.com", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/nov/jose-php/commit/1cce55e27adf0274193eb1cd74b927a398a3df4b"}}