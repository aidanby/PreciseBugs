{"buggy_code": ["<?php\n\nnamespace Artesaos\\SEOTools;\n\nuse Illuminate\\Support\\Arr;\nuse Artesaos\\SEOTools\\Contracts\\OpenGraph as OpenGraphContract;\n\n/**\n * OpenGraph provides implementation for `OpenGraph` contract.\n *\n * @see \\Artesaos\\SEOTools\\Contracts\\OpenGraph\n */\nclass OpenGraph implements OpenGraphContract\n{\n    /**\n     * OpenGraph Prefix.\n     *\n     * @var string\n     */\n    protected $og_prefix = 'og:';\n\n    /**\n     * Config.\n     *\n     * @var array\n     */\n    protected $config;\n\n    /**\n     * Url property\n     *\n     * @var string\n     */\n    protected $url = '';\n\n    /**\n     * Array of Properties.\n     *\n     * @var array\n     */\n    protected $properties = [];\n\n    /**\n     * Array of Article Properties.\n     *\n     * @var array\n     */\n    protected $articleProperties = [];\n\n    /**\n     * Array of Profile Properties.\n     *\n     * @var array\n     */\n    protected $profileProperties = [];\n\n    /**\n     * Array of Music Song Properties.\n     *\n     * @var array\n     */\n    protected $musicSongProperties = [];\n\n    /**\n     * Array of Music Album Properties.\n     *\n     * @var array\n     */\n    protected $musicAlbumProperties = [];\n\n    /**\n     * Array of Music Playlist Properties.\n     *\n     * @var array\n     */\n    protected $musicPlaylistProperties = [];\n\n    /**\n     * Array of Music Radio Properties.\n     *\n     * @var array\n     */\n    protected $musicRadioStationProperties = [];\n\n    /**\n     * Array of Video Movie Properties.\n     *\n     * @var array\n     */\n    protected $videoMovieProperties = [];\n\n    /**\n     * Array of Video Episode Properties.\n     *\n     * @var array\n     */\n    protected $videoEpisodeProperties = [];\n\n    /**\n     * Array of Video TV Show Properties.\n     *\n     * @var array\n     */\n    protected $videoTVShowProperties = [];\n\n    /**\n     * Array of Video Other Properties.\n     *\n     * @var array\n     */\n    protected $videoOtherProperties = [];\n\n    /**\n     * Array of Book Properties.\n     *\n     * @var array\n     */\n    protected $bookProperties = [];\n\n    /**\n     * Array of Video Properties.\n     *\n     * @var array\n     */\n    protected $videoProperties = [];\n\n    /**\n     * Array of Audio Properties.\n     *\n     * @var array\n     */\n    protected $audioProperties = [];\n\n    /**\n     * Array of Place Properties.\n     *\n     * @var array\n     */\n    protected $placeProperties = [];\n\n    /**\n     * Array of Product Properties.\n     *\n     * @var array\n     */\n    protected $productProperties = [];\n\n    /**\n     * Array of Image Properties.\n     *\n     * @var array\n     */\n    protected $images = [];\n\n    /**\n     * Create a new OpenGraph instance.\n     *\n     * @param array $config config\n     *\n     * @return void\n     */\n    public function __construct(array $config = [])\n    {\n        $this->config = $config;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function generate($minify = false)\n    {\n        $this->setupDefaults();\n\n        $output = $this->eachProperties($this->properties);\n\n        $props = [\n            'images'                      => ['image',   true],\n            'articleProperties'           => ['article', false],\n            'profileProperties'           => ['profile', false],\n            'bookProperties'              => ['book',    false],\n            'musicSongProperties'         => ['music',   false],\n            'musicAlbumProperties'        => ['music',   false],\n            'musicPlaylistProperties'     => ['music',   false],\n            'musicRadioStationProperties' => ['music',   false],\n            'videoMovieProperties'        => ['video',   false],\n            'videoEpisodeProperties'      => ['video',   false],\n            'videoTVShowProperties'       => ['video',   false],\n            'videoOtherProperties'        => ['video',   false],\n            'videoProperties'             => ['video',   true],\n            'audioProperties'             => ['audio',   true],\n            'placeProperties'             => ['place',   false],\n            'productProperties'           => ['product', false],\n        ];\n\n        foreach ($props as $prop => $options) {\n            $output .= $this->eachProperties(\n                $this->{$prop},\n                $options[0],\n                $options[1]\n            );\n        }\n\n        return ($minify) ? str_replace(PHP_EOL, '', $output) : $output;\n    }\n\n    /**\n     * Make list of open graph tags.\n     *\n     * @param array       $properties array of properties\n     * @param null|string $prefix     prefix of property\n     * @param bool        $ogPrefix   opengraph prefix\n     *\n     * @return string\n     */\n    protected function eachProperties(\n        array $properties,\n        $prefix = null,\n        $ogPrefix = true\n    ) {\n        $html = [];\n\n        foreach ($properties as $property => $value) {\n            // multiple properties\n            if (is_array($value)) {\n                $subListPrefix = (is_string($property)) ? $property : $prefix;\n                $subList = $this->eachProperties($value, $subListPrefix);\n\n                $html[] = $subList;\n            } else {\n                if (is_string($prefix)) {\n                    $key = (is_string($property)) ?\n                        $prefix.':'.$property :\n                        $prefix;\n                } else {\n                    $key = $property;\n                }\n\n                // if empty jump to next\n                if (empty($value)) {\n                    continue;\n                }\n\n                $html[] = $this->makeTag($key, $value, $ogPrefix);\n            }\n        }\n\n        return implode($html);\n    }\n\n    /**\n     * Make a og tag.\n     *\n     * @param string $key      meta property key\n     * @param string $value    meta property value\n     * @param bool   $ogPrefix opengraph prefix\n     *\n     * @return string\n     */\n    protected function makeTag($key = null, $value = null, $ogPrefix = false)\n    {\n        return sprintf(\n            '<meta property=\"%s%s\" content=\"%s\" />%s',\n            $ogPrefix ? $this->og_prefix : '',\n            strip_tags($key),\n            strip_tags($value),\n            PHP_EOL\n        );\n    }\n\n    /**\n     * Add or update property.\n     *\n     * @return void\n     */\n    protected function setupDefaults()\n    {\n        $defaults = (isset($this->config['defaults'])) ?\n            $this->config['defaults'] :\n            [];\n\n        foreach ($defaults as $key => $value) {\n            if ($key === 'images') {\n                if (empty($this->images)) {\n                    $this->images = $value;\n                }\n            } elseif ($key === 'url' && empty($value)) {\n                if ($value === null) {\n                    $this->addProperty('url', $this->url ?: app('url')->current());\n                } elseif ($this->url) {\n                    $this->addProperty('url', $this->url);\n                }\n            } elseif (! empty($value) && ! array_key_exists($key, $this->properties)) {\n                $this->addProperty($key, $value);\n            }\n        }\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function addProperty($key, $value)\n    {\n        $this->properties[$key] = $value;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setArticle($attributes = [])\n    {\n        $validkeys = [\n            'published_time',\n            'modified_time',\n            'expiration_time',\n            'author',\n            'section',\n            'tag',\n        ];\n\n        $this->setProperties(\n            'article',\n            'articleProperties',\n            $attributes,\n            $validkeys\n        );\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setProfile($attributes = [])\n    {\n        $validkeys = [\n            'first_name',\n            'last_name',\n            'username',\n            'gender',\n        ];\n\n        $this->setProperties(\n            'profile',\n            'profileProperties',\n            $attributes,\n            $validkeys\n        );\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setBook($attributes = [])\n    {\n        $validkeys = [\n            'author',\n            'isbn',\n            'release_date',\n            'tag',\n        ];\n\n        $this->setProperties('book', 'bookProperties', $attributes, $validkeys);\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setMusicSong($attributes = [])\n    {\n        $validkeys = [\n            'duration',\n            'album',\n            'album:disc',\n            'album:track',\n            'musician',\n        ];\n\n        $this->setProperties(\n            'music.song',\n            'musicSongProperties',\n            $attributes,\n            $validkeys\n        );\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setMusicAlbum($attributes = [])\n    {\n        $validkeys = [\n            'song',\n            'song:disc',\n            'song:track',\n            'musician',\n            'release_date',\n        ];\n\n        $this->setProperties(\n            'music.album',\n            'musicAlbumProperties',\n            $attributes,\n            $validkeys\n        );\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setMusicPlaylist($attributes = [])\n    {\n        $validkeys = [\n            'song',\n            'song:disc',\n            'song:track',\n            'creator',\n        ];\n\n        $this->setProperties(\n            'music.playlist',\n            'musicPlaylistProperties',\n            $attributes,\n            $validkeys\n        );\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setMusicRadioStation($attributes = [])\n    {\n        $validkeys = [\n            'creator',\n        ];\n\n        $this->setProperties(\n            'music.radio_station',\n            'musicRadioStationProperties',\n            $attributes,\n            $validkeys\n        );\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setVideoMovie($attributes = [])\n    {\n        $validkeys = [\n            'actor',\n            'actor:role',\n            'director',\n            'writer',\n            'duration',\n            'release_date',\n            'tag',\n        ];\n\n        $this->setProperties(\n            'video.movie',\n            'videoMovieProperties',\n            $attributes,\n            $validkeys\n        );\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setVideoEpisode($attributes = [])\n    {\n        $validkeys = [\n            'actor',\n            'actor:role',\n            'director',\n            'writer',\n            'duration',\n            'release_date',\n            'tag',\n            'series',\n        ];\n\n        $this->setProperties(\n            'video.episode',\n            'videoEpisodeProperties',\n            $attributes,\n            $validkeys\n        );\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setVideoOther($attributes = [])\n    {\n        $validkeys = [\n            'actor',\n            'actor:role',\n            'director',\n            'writer',\n            'duration',\n            'release_date',\n            'tag',\n        ];\n\n        $this->setProperties(\n            'video.other',\n            'videoOtherProperties',\n            $attributes,\n            $validkeys\n        );\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setVideoTVShow($attributes = [])\n    {\n        $validkeys = [\n            'actor',\n            'actor:role',\n            'director',\n            'writer',\n            'duration',\n            'release_date',\n            'tag',\n        ];\n\n        $this->setProperties(\n            'video.tv_show',\n            'videoTVShowProperties',\n            $attributes,\n            $validkeys\n        );\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function addVideo($source = null, $attributes = [])\n    {\n        $validKeys = [\n            'url',\n            'secure_url',\n            'type',\n            'width',\n            'height',\n        ];\n\n        $this->videoProperties[] = [\n            $source,\n            $this->cleanProperties($attributes, $validKeys),\n        ];\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function addAudio($source = null, $attributes = [])\n    {\n        $validKeys = [\n            'url',\n            'secure_url',\n            'type',\n        ];\n\n        $this->audioProperties[] = [\n            $source,\n            $this->cleanProperties($attributes, $validKeys),\n        ];\n\n        return $this;\n    }\n\n    /**\n     * Set place properties.\n     *\n     * @param array $attributes opengraph place attributes\n     *\n     * @return OpenGraphContract\n     */\n    public function setPlace($attributes = [])\n    {\n        $validkeys = [\n            'location:latitude',\n            'location:longitude',\n\n        ];\n\n        $this->setProperties('place', 'placeProperties', $attributes, $validkeys);\n\n        return $this;\n    }\n\n    /**\n     * Set product properties.\n     *\n     * @param array $attributes opengraph product attributes\n     *\n     * @return OpenGraphContract\n     */\n    public function setProduct($attributes = [])\n    {\n        $validkeys = [\n            'original_price:amount',\n            'original_price:currency',\n            'pretax_price:amount',\n            'pretax_price:currency',\n            'price:amount',\n            'price:currency',\n            'shipping_cost:amount',\n            'shipping_cost:currency',\n            'weight:value',\n            'weight:units',\n            'shipping_weight:value',\n            'shipping_weight:units',\n            'sale_price:amount',\n            'sale_price:currency',\n            'sale_price_dates:start',\n            'sale_price_dates:end'\n        ];\n\n        $this->setProperties('product', 'productProperties', $attributes, $validkeys);\n        return $this;\n    }\n\n    /**\n     * Clean invalid properties.\n     *\n     * @param array $attributes attributes input\n     * @param string[] $validKeys  keys that are allowed\n     *\n     * @return array\n     */\n    protected function cleanProperties($attributes = [], $validKeys = [])\n    {\n        $array = [];\n\n        foreach ($attributes as $attribute => $value) {\n            if (in_array($attribute, $validKeys)) {\n                $array[$attribute] = $value;\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * Set properties.\n     *\n     * @param string $type       type of og:type\n     * @param string $key        variable key\n     * @param array  $attributes inputted opengraph attributes\n     * @param string[]  $validKeys  valid opengraph attributes\n     *\n     * @return void\n     */\n    protected function setProperties(\n        $type = null,\n        $key = null,\n        $attributes = [],\n        $validKeys = []\n    ) {\n        if (isset($this->properties['type']) && $this->properties['type'] == $type) {\n            foreach ($attributes as $attribute => $value) {\n                if (in_array($attribute, $validKeys)) {\n                    $this->{$key}[$attribute] = $value;\n                }\n            }\n        }\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function removeProperty($key)\n    {\n        Arr::forget($this->properties, $key);\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function addImage($source = null, $attributes = [])\n    {\n        $validKeys = [\n            'url',\n            'secure_url',\n            'type',\n            'width',\n            'height',\n        ];\n\n        if (is_array($source)) {\n            $this->images[] = $this->cleanProperties($source, $validKeys);\n        } else {\n            $this->images[] = [\n                $source,\n                $this->cleanProperties($attributes, $validKeys),\n            ];\n        }\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function addImages(array $urls)\n    {\n        array_push($this->images, $urls);\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setType($type = null)\n    {\n        return $this->addProperty('type', $type);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setTitle($title = null)\n    {\n        return $this->addProperty('title', $title);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setDescription($description = null)\n    {\n        return $this->addProperty('description', htmlspecialchars($description, ENT_QUOTES, 'UTF-8', false));\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setUrl($url)\n    {\n        $this->url = $url;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setSiteName($name)\n    {\n        return $this->addProperty('site_name', $name);\n    }\n}\n", "<?php\n\nnamespace Artesaos\\SEOTools;\n\nuse Illuminate\\Support\\Arr;\nuse Illuminate\\Config\\Repository as Config;\nuse Artesaos\\SEOTools\\Contracts\\MetaTags as MetaTagsContract;\n\n/**\n * SEOMeta provides implementation for `MetaTags` contract.\n *\n * @see \\Artesaos\\SEOTools\\Contracts\\MetaTags\n */\nclass SEOMeta implements MetaTagsContract\n{\n    /**\n     * The meta title.\n     *\n     * @var string\n     */\n    protected $title;\n\n    /**\n     * The meta title session.\n     *\n     * @var string\n     */\n    protected $title_session;\n\n    /**\n     * The meta title session.\n     *\n     * @var string\n     */\n    protected $title_default;\n\n    /**\n     * The title tag separator.\n     *\n     * @var array\n     */\n    protected $title_separator;\n\n    /**\n     * The meta description.\n     *\n     * @var string\n     */\n    protected $description;\n\n    /**\n     * The meta keywords.\n     *\n     * @var array\n     */\n    protected $keywords = [];\n\n    /**\n     * extra metatags.\n     *\n     * @var array\n     */\n    protected $metatags = [];\n\n    /**\n     * The canonical URL.\n     *\n     * @var string\n     */\n    protected $canonical;\n\n    /**\n     * The AMP URL.\n     *\n     * @var string\n     */\n    protected $amphtml;\n\n    /**\n     * The prev URL in pagination.\n     *\n     * @var string\n     */\n    protected $prev;\n\n    /**\n     * The next URL in pagination.\n     *\n     * @var string\n     */\n    protected $next;\n\n    /**\n     * The alternate languages.\n     *\n     * @var array\n     */\n    protected $alternateLanguages = [];\n\n    /**\n     * The meta robots.\n     *\n     * @var string\n     */\n    protected $robots;\n\n    /**\n     * @var Config\n     */\n    protected $config;\n\n    /**\n     * The webmaster tags.\n     *\n     * @var array\n     */\n    protected $webmasterTags = [\n        'google'   => 'google-site-verification',\n        'bing'     => 'msvalidate.01',\n        'alexa'    => 'alexaVerifyID',\n        'pintrest' => 'p:domain_verify',\n        'yandex'   => 'yandex-verification',\n        'norton'   => 'norton-safeweb-site-verification',\n    ];\n\n    /**\n     * @param \\Illuminate\\Config\\Repository $config\n     */\n    public function __construct(Config $config)\n    {\n        $this->config = $config;\n    }\n\n    /**\n     * {@inheritdoc}/\n     */\n    public function generate($minify = false)\n    {\n        $this->loadWebMasterTags();\n\n        $title = $this->getTitle();\n        $description = $this->getDescription();\n        $keywords = $this->getKeywords();\n        $metatags = $this->getMetatags();\n        $canonical = $this->getCanonical();\n        $amphtml = $this->getAmpHtml();\n        $prev = $this->getPrev();\n        $next = $this->getNext();\n        $languages = $this->getAlternateLanguages();\n        $robots = $this->getRobots();\n\n        $html = [];\n\n        if ($title) {\n            $html[] = Arr::get($this->config, 'add_notranslate_class', false) ? \"<title class=\\\"notranslate\\\">$title</title>\" : \"<title>$title</title>\";\n        }\n\n        if ($description) {\n            $html[] = \"<meta name=\\\"description\\\" content=\\\"{$description}\\\">\";\n        }\n\n        if (!empty($keywords)) {\n            \n            if($keywords instanceof \\Illuminate\\Support\\Collection){\n                $keywords = $keywords->toArray();\n            }\n            \n            $keywords = implode(', ', $keywords);\n            $html[] = \"<meta name=\\\"keywords\\\" content=\\\"{$keywords}\\\">\";\n        }\n\n        foreach ($metatags as $key => $value) {\n            $name = $value[0];\n            $content = $value[1];\n\n            // if $content is empty jump to nest\n            if (empty($content)) {\n                continue;\n            }\n\n            $html[] = \"<meta {$name}=\\\"{$key}\\\" content=\\\"{$content}\\\">\";\n        }\n\n        if ($canonical) {\n            $html[] = \"<link rel=\\\"canonical\\\" href=\\\"{$canonical}\\\"/>\";\n        }\n\n        if ($amphtml) {\n            $html[] = \"<link rel=\\\"amphtml\\\" href=\\\"{$amphtml}\\\"/>\";\n        }\n\n        if ($prev) {\n            $html[] = \"<link rel=\\\"prev\\\" href=\\\"{$prev}\\\"/>\";\n        }\n\n        if ($next) {\n            $html[] = \"<link rel=\\\"next\\\" href=\\\"{$next}\\\"/>\";\n        }\n\n        foreach ($languages as $lang) {\n            $html[] = \"<link rel=\\\"alternate\\\" hreflang=\\\"{$lang['lang']}\\\" href=\\\"{$lang['url']}\\\"/>\";\n        }\n\n        if ($robots) {\n            $html[] = \"<meta name=\\\"robots\\\" content=\\\"{$robots}\\\">\";\n        }\n\n        return ($minify) ? implode('', $html) : implode(PHP_EOL, $html);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setTitle($title, $appendDefault = true)\n    {\n        // clean title\n        $title = strip_tags($title);\n\n        // store title session\n        $this->title_session = $title;\n\n        // store title\n        if (true === $appendDefault) {\n            $this->title = $this->parseTitle($title);\n        } else {\n            $this->title = $title;\n        }\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setTitleDefault($default)\n    {\n        $this->title_default = $default;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setTitleSeparator($separator)\n    {\n        $this->title_separator = $separator;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setDescription($description)\n    {\n        // clean and store description\n        // if is false, set false\n        $this->description = (false == $description) ? $description : htmlspecialchars($description, ENT_QUOTES, 'UTF-8', false);\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setKeywords($keywords)\n    {\n        if (!is_array($keywords)) {\n            $keywords = explode(', ', $keywords);\n        }\n\n        // clean keywords\n        $keywords = array_map('strip_tags', $keywords);\n\n        // store keywords\n        $this->keywords = $keywords;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function addKeyword($keyword)\n    {\n        if (is_array($keyword)) {\n            $this->keywords = array_merge($keyword, $this->keywords);\n        } else {\n            $this->keywords[] = strip_tags($keyword);\n        }\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function removeMeta($key)\n    {\n        Arr::forget($this->metatags, $key);\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function addMeta($meta, $value = null, $name = 'name')\n    {\n        // multiple metas\n        if (is_array($meta)) {\n            foreach ($meta as $key => $value) {\n                $this->metatags[$key] = [$name, $value];\n            }\n        } else {\n            $this->metatags[$meta] = [$name, $value];\n        }\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setCanonical($url)\n    {\n        $this->canonical = $url;\n\n        return $this;\n    }\n\n    /**\n     * Sets the AMP html URL.\n     *\n     * @param string $url\n     *\n     * @return MetaTagsContract\n     */\n    public function setAmpHtml($url)\n    {\n        $this->amphtml = $url;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setPrev($url)\n    {\n        $this->prev = $url;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setNext($url)\n    {\n        $this->next = $url;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function addAlternateLanguage($lang, $url)\n    {\n        $this->alternateLanguages[] = ['lang' => $lang, 'url' => $url];\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function addAlternateLanguages(array $languages)\n    {\n        $this->alternateLanguages = array_merge($this->alternateLanguages, $languages);\n\n        return $this;\n    }\n\n    /**\n     * Sets the meta robots.\n     *\n     * @param string $robots\n     *\n     * @return MetaTagsContract\n     */\n    public function setRobots($robots)\n    {\n        $this->robots = $robots;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getTitle()\n    {\n        return $this->title ?: $this->getDefaultTitle();\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getDefaultTitle()\n    {\n        if (empty($this->title_default)) {\n            return $this->config->get('defaults.title', null);\n        }\n\n        return $this->title_default;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getTitleSession()\n    {\n        return $this->title_session ?: $this->getTitle();\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getTitleSeparator()\n    {\n        return $this->title_separator ?: $this->config->get('defaults.separator', ' - ');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getKeywords()\n    {\n        return $this->keywords ?: $this->config->get('defaults.keywords', []);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getMetatags()\n    {\n        return $this->metatags;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getDescription()\n    {\n        if (false === $this->description) {\n            return;\n        }\n\n        return $this->description ?: $this->config->get('defaults.description', null);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getCanonical()\n    {\n        $canonical_config = $this->config->get('defaults.canonical', false);\n\n        return $this->canonical ?: (($canonical_config === null) ? app('url')->full() : $canonical_config);\n    }\n\n    /**\n     * Get the AMP html URL.\n     *\n     * @return string\n     */\n    public function getAmpHtml()\n    {\n        return $this->amphtml;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getPrev()\n    {\n        return $this->prev;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getNext()\n    {\n        return $this->next;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getAlternateLanguages()\n    {\n        return $this->alternateLanguages;\n    }\n\n    /**\n     * Get meta robots.\n     *\n     * @return string\n     */\n    public function getRobots()\n    {\n        return $this->robots ?: $this->config->get('defaults.robots', null);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function reset()\n    {\n        $this->description = null;\n        $this->title_session = null;\n        $this->next = null;\n        $this->prev = null;\n        $this->canonical = null;\n        $this->amphtml = null;\n        $this->metatags = [];\n        $this->keywords = [];\n        $this->alternateLanguages = [];\n        $this->robots = null;\n    }\n\n    /**\n     * Get parsed title.\n     *\n     * @param string $title\n     *\n     * @return string\n     */\n    protected function parseTitle($title)\n    {\n        $default = $this->getDefaultTitle();\n\n        if (empty($default)) {\n            return $title;\n        }\n        $defaultBefore = $this->config->get('defaults.titleBefore', false);\n\n        return $defaultBefore ? $default.$this->getTitleSeparator().$title : $title.$this->getTitleSeparator().$default;\n    }\n\n    /**\n     * Load webmaster tags from configuration.\n     */\n    protected function loadWebMasterTags()\n    {\n        foreach ($this->config->get('webmaster_tags', []) as $name => $value) {\n            if (!empty($value)) {\n                $meta = Arr::get($this->webmasterTags, $name, $name);\n                $this->addMeta($meta, $value);\n            }\n        }\n    }\n}\n", "<?php\n\nnamespace Artesaos\\SEOTools;\n\nuse Artesaos\\SEOTools\\Contracts\\TwitterCards as TwitterCardsContract;\n\n/**\n * TwitterCards provides implementation for `TwitterCards` contract.\n *\n * @see \\Artesaos\\SEOTools\\Contracts\\TwitterCards\n */\nclass TwitterCards implements TwitterCardsContract\n{\n    /**\n     * @var string\n     */\n    protected $prefix = 'twitter:';\n\n    /**\n     * @var array\n     */\n    protected $html = [];\n\n    /**\n     * @var array\n     */\n    protected $values = [];\n\n    /**\n     * @var array\n     */\n    protected $images = [];\n\n    /**\n     * @param array $defaults\n     */\n    public function __construct(array $defaults = [])\n    {\n        $this->values = $defaults;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function generate($minify = false)\n    {\n        $this->eachValue($this->values);\n        $this->eachValue($this->images, 'images');\n\n        return ($minify) ? implode('', $this->html) : implode(PHP_EOL, $this->html);\n    }\n\n    /**\n     * Make tags.\n     *\n     * @param array       $values\n     * @param null|string $prefix\n     *\n     * @internal param array $properties\n     */\n    protected function eachValue(array $values, $prefix = null)\n    {\n        foreach ($values as $key => $value):\n            if (is_array($value)):\n                $this->eachValue($value, $key); else:\n                if (is_numeric($key)):\n                    $key = $prefix.$key; elseif (is_string($prefix)):\n                    $key = $prefix.':'.$key;\n        endif;\n\n        $this->html[] = $this->makeTag($key, $value);\n        endif;\n        endforeach;\n    }\n\n    /**\n     * @param string $key\n     * @param $value\n     *\n     * @return string\n     *\n     * @internal param string $values\n     */\n    private function makeTag($key, $value)\n    {\n        return '<meta name=\"'.$this->prefix.strip_tags($key).'\" content=\"'.strip_tags($value).'\" />';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function addValue($key, $value)\n    {\n        $this->values[$key] = $value;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setTitle($title)\n    {\n        return $this->addValue('title', $title);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setType($type)\n    {\n        return $this->addValue('card', $type);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setSite($site)\n    {\n        return $this->addValue('site', $site);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setDescription($description)\n    {\n        return $this->addValue('description', htmlspecialchars($description, ENT_QUOTES, 'UTF-8', false));\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setUrl($url)\n    {\n        return $this->addValue('url', $url);\n    }\n\n    /**\n     * {@inheritdoc}\n     *\n     * @deprecated use setImage($image) instead\n     */\n    public function addImage($image)\n    {\n        foreach ((array) $image as $url) {\n            $this->images[] = $url;\n        }\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     *\n     * @deprecated use setImage($image) instead\n     */\n    public function setImages($images)\n    {\n        $this->images = [];\n\n        return $this->addImage($images);\n    }\n\n    /**\n     * @param $image\n     * @return TwitterCardsContract\n     */\n    public function setImage($image)\n    {\n        return $this->addValue('image', $image);\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace Artesaos\\SEOTools;\n\nuse Illuminate\\Support\\Arr;\nuse Artesaos\\SEOTools\\Contracts\\OpenGraph as OpenGraphContract;\n\n/**\n * OpenGraph provides implementation for `OpenGraph` contract.\n *\n * @see \\Artesaos\\SEOTools\\Contracts\\OpenGraph\n */\nclass OpenGraph implements OpenGraphContract\n{\n    /**\n     * OpenGraph Prefix.\n     *\n     * @var string\n     */\n    protected $og_prefix = 'og:';\n\n    /**\n     * Config.\n     *\n     * @var array\n     */\n    protected $config;\n\n    /**\n     * Url property\n     *\n     * @var string\n     */\n    protected $url = '';\n\n    /**\n     * Array of Properties.\n     *\n     * @var array\n     */\n    protected $properties = [];\n\n    /**\n     * Array of Article Properties.\n     *\n     * @var array\n     */\n    protected $articleProperties = [];\n\n    /**\n     * Array of Profile Properties.\n     *\n     * @var array\n     */\n    protected $profileProperties = [];\n\n    /**\n     * Array of Music Song Properties.\n     *\n     * @var array\n     */\n    protected $musicSongProperties = [];\n\n    /**\n     * Array of Music Album Properties.\n     *\n     * @var array\n     */\n    protected $musicAlbumProperties = [];\n\n    /**\n     * Array of Music Playlist Properties.\n     *\n     * @var array\n     */\n    protected $musicPlaylistProperties = [];\n\n    /**\n     * Array of Music Radio Properties.\n     *\n     * @var array\n     */\n    protected $musicRadioStationProperties = [];\n\n    /**\n     * Array of Video Movie Properties.\n     *\n     * @var array\n     */\n    protected $videoMovieProperties = [];\n\n    /**\n     * Array of Video Episode Properties.\n     *\n     * @var array\n     */\n    protected $videoEpisodeProperties = [];\n\n    /**\n     * Array of Video TV Show Properties.\n     *\n     * @var array\n     */\n    protected $videoTVShowProperties = [];\n\n    /**\n     * Array of Video Other Properties.\n     *\n     * @var array\n     */\n    protected $videoOtherProperties = [];\n\n    /**\n     * Array of Book Properties.\n     *\n     * @var array\n     */\n    protected $bookProperties = [];\n\n    /**\n     * Array of Video Properties.\n     *\n     * @var array\n     */\n    protected $videoProperties = [];\n\n    /**\n     * Array of Audio Properties.\n     *\n     * @var array\n     */\n    protected $audioProperties = [];\n\n    /**\n     * Array of Place Properties.\n     *\n     * @var array\n     */\n    protected $placeProperties = [];\n\n    /**\n     * Array of Product Properties.\n     *\n     * @var array\n     */\n    protected $productProperties = [];\n\n    /**\n     * Array of Image Properties.\n     *\n     * @var array\n     */\n    protected $images = [];\n\n    /**\n     * Create a new OpenGraph instance.\n     *\n     * @param array $config config\n     *\n     * @return void\n     */\n    public function __construct(array $config = [])\n    {\n        $this->config = $config;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function generate($minify = false)\n    {\n        $this->setupDefaults();\n\n        $output = $this->eachProperties($this->properties);\n\n        $props = [\n            'images'                      => ['image',   true],\n            'articleProperties'           => ['article', false],\n            'profileProperties'           => ['profile', false],\n            'bookProperties'              => ['book',    false],\n            'musicSongProperties'         => ['music',   false],\n            'musicAlbumProperties'        => ['music',   false],\n            'musicPlaylistProperties'     => ['music',   false],\n            'musicRadioStationProperties' => ['music',   false],\n            'videoMovieProperties'        => ['video',   false],\n            'videoEpisodeProperties'      => ['video',   false],\n            'videoTVShowProperties'       => ['video',   false],\n            'videoOtherProperties'        => ['video',   false],\n            'videoProperties'             => ['video',   true],\n            'audioProperties'             => ['audio',   true],\n            'placeProperties'             => ['place',   false],\n            'productProperties'           => ['product', false],\n        ];\n\n        foreach ($props as $prop => $options) {\n            $output .= $this->eachProperties(\n                $this->{$prop},\n                $options[0],\n                $options[1]\n            );\n        }\n\n        return ($minify) ? str_replace(PHP_EOL, '', $output) : $output;\n    }\n\n    /**\n     * Make list of open graph tags.\n     *\n     * @param array       $properties array of properties\n     * @param null|string $prefix     prefix of property\n     * @param bool        $ogPrefix   opengraph prefix\n     *\n     * @return string\n     */\n    protected function eachProperties(\n        array $properties,\n        $prefix = null,\n        $ogPrefix = true\n    ) {\n        $html = [];\n\n        foreach ($properties as $property => $value) {\n            // multiple properties\n            if (is_array($value)) {\n                $subListPrefix = (is_string($property)) ? $property : $prefix;\n                $subList = $this->eachProperties($value, $subListPrefix);\n\n                $html[] = $subList;\n            } else {\n                if (is_string($prefix)) {\n                    $key = (is_string($property)) ?\n                        $prefix.':'.$property :\n                        $prefix;\n                } else {\n                    $key = $property;\n                }\n\n                // if empty jump to next\n                if (empty($value)) {\n                    continue;\n                }\n\n                $html[] = $this->makeTag($key, $value, $ogPrefix);\n            }\n        }\n\n        return implode($html);\n    }\n\n    /**\n     * Make a og tag.\n     *\n     * @param string $key      meta property key\n     * @param string $value    meta property value\n     * @param bool   $ogPrefix opengraph prefix\n     *\n     * @return string\n     */\n    protected function makeTag($key = null, $value = null, $ogPrefix = false)\n    {\n        $value = str_replace(['http-equiv=', 'url='], '', $value);\n        return sprintf(\n            '<meta property=\"%s%s\" content=\"%s\" />%s',\n            $ogPrefix ? $this->og_prefix : '',\n            strip_tags($key),\n            strip_tags($value),\n            PHP_EOL\n        );\n    }\n\n    /**\n     * Add or update property.\n     *\n     * @return void\n     */\n    protected function setupDefaults()\n    {\n        $defaults = (isset($this->config['defaults'])) ?\n            $this->config['defaults'] :\n            [];\n\n        foreach ($defaults as $key => $value) {\n            if ($key === 'images') {\n                if (empty($this->images)) {\n                    $this->images = $value;\n                }\n            } elseif ($key === 'url' && empty($value)) {\n                if ($value === null) {\n                    $this->addProperty('url', $this->url ?: app('url')->current());\n                } elseif ($this->url) {\n                    $this->addProperty('url', $this->url);\n                }\n            } elseif (! empty($value) && ! array_key_exists($key, $this->properties)) {\n                $this->addProperty($key, $value);\n            }\n        }\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function addProperty($key, $value)\n    {\n        $this->properties[$key] = $value;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setArticle($attributes = [])\n    {\n        $validkeys = [\n            'published_time',\n            'modified_time',\n            'expiration_time',\n            'author',\n            'section',\n            'tag',\n        ];\n\n        $this->setProperties(\n            'article',\n            'articleProperties',\n            $attributes,\n            $validkeys\n        );\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setProfile($attributes = [])\n    {\n        $validkeys = [\n            'first_name',\n            'last_name',\n            'username',\n            'gender',\n        ];\n\n        $this->setProperties(\n            'profile',\n            'profileProperties',\n            $attributes,\n            $validkeys\n        );\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setBook($attributes = [])\n    {\n        $validkeys = [\n            'author',\n            'isbn',\n            'release_date',\n            'tag',\n        ];\n\n        $this->setProperties('book', 'bookProperties', $attributes, $validkeys);\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setMusicSong($attributes = [])\n    {\n        $validkeys = [\n            'duration',\n            'album',\n            'album:disc',\n            'album:track',\n            'musician',\n        ];\n\n        $this->setProperties(\n            'music.song',\n            'musicSongProperties',\n            $attributes,\n            $validkeys\n        );\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setMusicAlbum($attributes = [])\n    {\n        $validkeys = [\n            'song',\n            'song:disc',\n            'song:track',\n            'musician',\n            'release_date',\n        ];\n\n        $this->setProperties(\n            'music.album',\n            'musicAlbumProperties',\n            $attributes,\n            $validkeys\n        );\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setMusicPlaylist($attributes = [])\n    {\n        $validkeys = [\n            'song',\n            'song:disc',\n            'song:track',\n            'creator',\n        ];\n\n        $this->setProperties(\n            'music.playlist',\n            'musicPlaylistProperties',\n            $attributes,\n            $validkeys\n        );\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setMusicRadioStation($attributes = [])\n    {\n        $validkeys = [\n            'creator',\n        ];\n\n        $this->setProperties(\n            'music.radio_station',\n            'musicRadioStationProperties',\n            $attributes,\n            $validkeys\n        );\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setVideoMovie($attributes = [])\n    {\n        $validkeys = [\n            'actor',\n            'actor:role',\n            'director',\n            'writer',\n            'duration',\n            'release_date',\n            'tag',\n        ];\n\n        $this->setProperties(\n            'video.movie',\n            'videoMovieProperties',\n            $attributes,\n            $validkeys\n        );\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setVideoEpisode($attributes = [])\n    {\n        $validkeys = [\n            'actor',\n            'actor:role',\n            'director',\n            'writer',\n            'duration',\n            'release_date',\n            'tag',\n            'series',\n        ];\n\n        $this->setProperties(\n            'video.episode',\n            'videoEpisodeProperties',\n            $attributes,\n            $validkeys\n        );\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setVideoOther($attributes = [])\n    {\n        $validkeys = [\n            'actor',\n            'actor:role',\n            'director',\n            'writer',\n            'duration',\n            'release_date',\n            'tag',\n        ];\n\n        $this->setProperties(\n            'video.other',\n            'videoOtherProperties',\n            $attributes,\n            $validkeys\n        );\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setVideoTVShow($attributes = [])\n    {\n        $validkeys = [\n            'actor',\n            'actor:role',\n            'director',\n            'writer',\n            'duration',\n            'release_date',\n            'tag',\n        ];\n\n        $this->setProperties(\n            'video.tv_show',\n            'videoTVShowProperties',\n            $attributes,\n            $validkeys\n        );\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function addVideo($source = null, $attributes = [])\n    {\n        $validKeys = [\n            'url',\n            'secure_url',\n            'type',\n            'width',\n            'height',\n        ];\n\n        $this->videoProperties[] = [\n            $source,\n            $this->cleanProperties($attributes, $validKeys),\n        ];\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function addAudio($source = null, $attributes = [])\n    {\n        $validKeys = [\n            'url',\n            'secure_url',\n            'type',\n        ];\n\n        $this->audioProperties[] = [\n            $source,\n            $this->cleanProperties($attributes, $validKeys),\n        ];\n\n        return $this;\n    }\n\n    /**\n     * Set place properties.\n     *\n     * @param array $attributes opengraph place attributes\n     *\n     * @return OpenGraphContract\n     */\n    public function setPlace($attributes = [])\n    {\n        $validkeys = [\n            'location:latitude',\n            'location:longitude',\n\n        ];\n\n        $this->setProperties('place', 'placeProperties', $attributes, $validkeys);\n\n        return $this;\n    }\n\n    /**\n     * Set product properties.\n     *\n     * @param array $attributes opengraph product attributes\n     *\n     * @return OpenGraphContract\n     */\n    public function setProduct($attributes = [])\n    {\n        $validkeys = [\n            'original_price:amount',\n            'original_price:currency',\n            'pretax_price:amount',\n            'pretax_price:currency',\n            'price:amount',\n            'price:currency',\n            'shipping_cost:amount',\n            'shipping_cost:currency',\n            'weight:value',\n            'weight:units',\n            'shipping_weight:value',\n            'shipping_weight:units',\n            'sale_price:amount',\n            'sale_price:currency',\n            'sale_price_dates:start',\n            'sale_price_dates:end'\n        ];\n\n        $this->setProperties('product', 'productProperties', $attributes, $validkeys);\n        return $this;\n    }\n\n    /**\n     * Clean invalid properties.\n     *\n     * @param array $attributes attributes input\n     * @param string[] $validKeys  keys that are allowed\n     *\n     * @return array\n     */\n    protected function cleanProperties($attributes = [], $validKeys = [])\n    {\n        $array = [];\n\n        foreach ($attributes as $attribute => $value) {\n            if (in_array($attribute, $validKeys)) {\n                $array[$attribute] = $value;\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * Set properties.\n     *\n     * @param string $type       type of og:type\n     * @param string $key        variable key\n     * @param array  $attributes inputted opengraph attributes\n     * @param string[]  $validKeys  valid opengraph attributes\n     *\n     * @return void\n     */\n    protected function setProperties(\n        $type = null,\n        $key = null,\n        $attributes = [],\n        $validKeys = []\n    ) {\n        if (isset($this->properties['type']) && $this->properties['type'] == $type) {\n            foreach ($attributes as $attribute => $value) {\n                if (in_array($attribute, $validKeys)) {\n                    $this->{$key}[$attribute] = $value;\n                }\n            }\n        }\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function removeProperty($key)\n    {\n        Arr::forget($this->properties, $key);\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function addImage($source = null, $attributes = [])\n    {\n        $validKeys = [\n            'url',\n            'secure_url',\n            'type',\n            'width',\n            'height',\n        ];\n\n        if (is_array($source)) {\n            $this->images[] = $this->cleanProperties($source, $validKeys);\n        } else {\n            $this->images[] = [\n                $source,\n                $this->cleanProperties($attributes, $validKeys),\n            ];\n        }\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function addImages(array $urls)\n    {\n        array_push($this->images, $urls);\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setType($type = null)\n    {\n        return $this->addProperty('type', $type);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setTitle($title = null)\n    {\n        return $this->addProperty('title', $title);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setDescription($description = null)\n    {\n        return $this->addProperty('description', htmlspecialchars($description, ENT_QUOTES, 'UTF-8', false));\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setUrl($url)\n    {\n        $this->url = $url;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setSiteName($name)\n    {\n        return $this->addProperty('site_name', $name);\n    }\n}\n", "<?php\n\nnamespace Artesaos\\SEOTools;\n\nuse Illuminate\\Support\\Arr;\nuse Illuminate\\Config\\Repository as Config;\nuse Artesaos\\SEOTools\\Contracts\\MetaTags as MetaTagsContract;\n\n/**\n * SEOMeta provides implementation for `MetaTags` contract.\n *\n * @see \\Artesaos\\SEOTools\\Contracts\\MetaTags\n */\nclass SEOMeta implements MetaTagsContract\n{\n    /**\n     * The meta title.\n     *\n     * @var string\n     */\n    protected $title;\n\n    /**\n     * The meta title session.\n     *\n     * @var string\n     */\n    protected $title_session;\n\n    /**\n     * The meta title session.\n     *\n     * @var string\n     */\n    protected $title_default;\n\n    /**\n     * The title tag separator.\n     *\n     * @var array\n     */\n    protected $title_separator;\n\n    /**\n     * The meta description.\n     *\n     * @var string\n     */\n    protected $description;\n\n    /**\n     * The meta keywords.\n     *\n     * @var array\n     */\n    protected $keywords = [];\n\n    /**\n     * extra metatags.\n     *\n     * @var array\n     */\n    protected $metatags = [];\n\n    /**\n     * The canonical URL.\n     *\n     * @var string\n     */\n    protected $canonical;\n\n    /**\n     * The AMP URL.\n     *\n     * @var string\n     */\n    protected $amphtml;\n\n    /**\n     * The prev URL in pagination.\n     *\n     * @var string\n     */\n    protected $prev;\n\n    /**\n     * The next URL in pagination.\n     *\n     * @var string\n     */\n    protected $next;\n\n    /**\n     * The alternate languages.\n     *\n     * @var array\n     */\n    protected $alternateLanguages = [];\n\n    /**\n     * The meta robots.\n     *\n     * @var string\n     */\n    protected $robots;\n\n    /**\n     * @var Config\n     */\n    protected $config;\n\n    /**\n     * The webmaster tags.\n     *\n     * @var array\n     */\n    protected $webmasterTags = [\n        'google'   => 'google-site-verification',\n        'bing'     => 'msvalidate.01',\n        'alexa'    => 'alexaVerifyID',\n        'pintrest' => 'p:domain_verify',\n        'yandex'   => 'yandex-verification',\n        'norton'   => 'norton-safeweb-site-verification',\n    ];\n\n    /**\n     * @param \\Illuminate\\Config\\Repository $config\n     */\n    public function __construct(Config $config)\n    {\n        $this->config = $config;\n    }\n\n    /**\n     * {@inheritdoc}/\n     */\n    public function generate($minify = false)\n    {\n        $this->loadWebMasterTags();\n\n        $title = $this->getTitle();\n        $description = $this->getDescription();\n        $keywords = $this->getKeywords();\n        $metatags = $this->getMetatags();\n        $canonical = $this->getCanonical();\n        $amphtml = $this->getAmpHtml();\n        $prev = $this->getPrev();\n        $next = $this->getNext();\n        $languages = $this->getAlternateLanguages();\n        $robots = $this->getRobots();\n\n        $html = [];\n\n        if ($title) {\n            $html[] = Arr::get($this->config, 'add_notranslate_class', false) ? \"<title class=\\\"notranslate\\\">$title</title>\" : \"<title>$title</title>\";\n        }\n\n        if ($description) {\n            $html[] = \"<meta name=\\\"description\\\" content=\\\"{$description}\\\">\";\n        }\n\n        if (!empty($keywords)) {\n            \n            if($keywords instanceof \\Illuminate\\Support\\Collection){\n                $keywords = $keywords->toArray();\n            }\n            \n            $keywords = implode(', ', $keywords);\n            $html[] = \"<meta name=\\\"keywords\\\" content=\\\"{$keywords}\\\">\";\n        }\n\n        foreach ($metatags as $key => $value) {\n            $name = $value[0];\n            $content = $value[1];\n\n            // if $content is empty jump to nest\n            if (empty($content)) {\n                continue;\n            }\n\n            $html[] = \"<meta {$name}=\\\"{$key}\\\" content=\\\"{$content}\\\">\";\n        }\n\n        if ($canonical) {\n            $html[] = \"<link rel=\\\"canonical\\\" href=\\\"{$canonical}\\\"/>\";\n        }\n\n        if ($amphtml) {\n            $html[] = \"<link rel=\\\"amphtml\\\" href=\\\"{$amphtml}\\\"/>\";\n        }\n\n        if ($prev) {\n            $html[] = \"<link rel=\\\"prev\\\" href=\\\"{$prev}\\\"/>\";\n        }\n\n        if ($next) {\n            $html[] = \"<link rel=\\\"next\\\" href=\\\"{$next}\\\"/>\";\n        }\n\n        foreach ($languages as $lang) {\n            $html[] = \"<link rel=\\\"alternate\\\" hreflang=\\\"{$lang['lang']}\\\" href=\\\"{$lang['url']}\\\"/>\";\n        }\n\n        if ($robots) {\n            $html[] = \"<meta name=\\\"robots\\\" content=\\\"{$robots}\\\">\";\n        }\n\n        return ($minify) ? implode('', $html) : implode(PHP_EOL, $html);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setTitle($title, $appendDefault = true)\n    {\n        // open redirect vulnerability fix\n        $title = str_replace(['http-equiv=', 'url='], '', $title);\n        \n        // clean title\n        $title = strip_tags($title);\n\n        // store title session\n        $this->title_session = $title;\n\n        // store title\n        if (true === $appendDefault) {\n            $this->title = $this->parseTitle($title);\n        } else {\n            $this->title = $title;\n        }\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setTitleDefault($default)\n    {\n        $this->title_default = $default;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setTitleSeparator($separator)\n    {\n        $this->title_separator = $separator;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setDescription($description)\n    {\n        // clean and store description\n        // if is false, set false\n        $this->description = (false == $description) ? $description : htmlspecialchars($description, ENT_QUOTES, 'UTF-8', false);\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setKeywords($keywords)\n    {\n        if (!is_array($keywords)) {\n            $keywords = explode(', ', $keywords);\n        }\n\n        // clean keywords\n        $keywords = array_map('strip_tags', $keywords);\n\n        // store keywords\n        $this->keywords = $keywords;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function addKeyword($keyword)\n    {\n        if (is_array($keyword)) {\n            $this->keywords = array_merge($keyword, $this->keywords);\n        } else {\n            $this->keywords[] = strip_tags($keyword);\n        }\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function removeMeta($key)\n    {\n        Arr::forget($this->metatags, $key);\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function addMeta($meta, $value = null, $name = 'name')\n    {\n        // multiple metas\n        if (is_array($meta)) {\n            foreach ($meta as $key => $value) {\n                $this->metatags[$key] = [$name, $value];\n            }\n        } else {\n            $this->metatags[$meta] = [$name, $value];\n        }\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setCanonical($url)\n    {\n        $this->canonical = $url;\n\n        return $this;\n    }\n\n    /**\n     * Sets the AMP html URL.\n     *\n     * @param string $url\n     *\n     * @return MetaTagsContract\n     */\n    public function setAmpHtml($url)\n    {\n        $this->amphtml = $url;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setPrev($url)\n    {\n        $this->prev = $url;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setNext($url)\n    {\n        $this->next = $url;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function addAlternateLanguage($lang, $url)\n    {\n        $this->alternateLanguages[] = ['lang' => $lang, 'url' => $url];\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function addAlternateLanguages(array $languages)\n    {\n        $this->alternateLanguages = array_merge($this->alternateLanguages, $languages);\n\n        return $this;\n    }\n\n    /**\n     * Sets the meta robots.\n     *\n     * @param string $robots\n     *\n     * @return MetaTagsContract\n     */\n    public function setRobots($robots)\n    {\n        $this->robots = $robots;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getTitle()\n    {\n        return $this->title ?: $this->getDefaultTitle();\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getDefaultTitle()\n    {\n        if (empty($this->title_default)) {\n            return $this->config->get('defaults.title', null);\n        }\n\n        return $this->title_default;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getTitleSession()\n    {\n        return $this->title_session ?: $this->getTitle();\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getTitleSeparator()\n    {\n        return $this->title_separator ?: $this->config->get('defaults.separator', ' - ');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getKeywords()\n    {\n        return $this->keywords ?: $this->config->get('defaults.keywords', []);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getMetatags()\n    {\n        return $this->metatags;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getDescription()\n    {\n        if (false === $this->description) {\n            return;\n        }\n\n        return $this->description ?: $this->config->get('defaults.description', null);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getCanonical()\n    {\n        $canonical_config = $this->config->get('defaults.canonical', false);\n\n        return $this->canonical ?: (($canonical_config === null) ? app('url')->full() : $canonical_config);\n    }\n\n    /**\n     * Get the AMP html URL.\n     *\n     * @return string\n     */\n    public function getAmpHtml()\n    {\n        return $this->amphtml;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getPrev()\n    {\n        return $this->prev;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getNext()\n    {\n        return $this->next;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getAlternateLanguages()\n    {\n        return $this->alternateLanguages;\n    }\n\n    /**\n     * Get meta robots.\n     *\n     * @return string\n     */\n    public function getRobots()\n    {\n        return $this->robots ?: $this->config->get('defaults.robots', null);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function reset()\n    {\n        $this->description = null;\n        $this->title_session = null;\n        $this->next = null;\n        $this->prev = null;\n        $this->canonical = null;\n        $this->amphtml = null;\n        $this->metatags = [];\n        $this->keywords = [];\n        $this->alternateLanguages = [];\n        $this->robots = null;\n    }\n\n    /**\n     * Get parsed title.\n     *\n     * @param string $title\n     *\n     * @return string\n     */\n    protected function parseTitle($title)\n    {\n        $default = $this->getDefaultTitle();\n\n        if (empty($default)) {\n            return $title;\n        }\n        $defaultBefore = $this->config->get('defaults.titleBefore', false);\n\n        return $defaultBefore ? $default.$this->getTitleSeparator().$title : $title.$this->getTitleSeparator().$default;\n    }\n\n    /**\n     * Load webmaster tags from configuration.\n     */\n    protected function loadWebMasterTags()\n    {\n        foreach ($this->config->get('webmaster_tags', []) as $name => $value) {\n            if (!empty($value)) {\n                $meta = Arr::get($this->webmasterTags, $name, $name);\n                $this->addMeta($meta, $value);\n            }\n        }\n    }\n}\n", "<?php\n\nnamespace Artesaos\\SEOTools;\n\nuse Artesaos\\SEOTools\\Contracts\\TwitterCards as TwitterCardsContract;\n\n/**\n * TwitterCards provides implementation for `TwitterCards` contract.\n *\n * @see \\Artesaos\\SEOTools\\Contracts\\TwitterCards\n */\nclass TwitterCards implements TwitterCardsContract\n{\n    /**\n     * @var string\n     */\n    protected $prefix = 'twitter:';\n\n    /**\n     * @var array\n     */\n    protected $html = [];\n\n    /**\n     * @var array\n     */\n    protected $values = [];\n\n    /**\n     * @var array\n     */\n    protected $images = [];\n\n    /**\n     * @param array $defaults\n     */\n    public function __construct(array $defaults = [])\n    {\n        $this->values = $defaults;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function generate($minify = false)\n    {\n        $this->eachValue($this->values);\n        $this->eachValue($this->images, 'images');\n\n        return ($minify) ? implode('', $this->html) : implode(PHP_EOL, $this->html);\n    }\n\n    /**\n     * Make tags.\n     *\n     * @param array       $values\n     * @param null|string $prefix\n     *\n     * @internal param array $properties\n     */\n    protected function eachValue(array $values, $prefix = null)\n    {\n        foreach ($values as $key => $value):\n            if (is_array($value)):\n                $this->eachValue($value, $key); else:\n                if (is_numeric($key)):\n                    $key = $prefix.$key; elseif (is_string($prefix)):\n                    $key = $prefix.':'.$key;\n        endif;\n\n        $this->html[] = $this->makeTag($key, $value);\n        endif;\n        endforeach;\n    }\n\n    /**\n     * @param string $key\n     * @param $value\n     *\n     * @return string\n     *\n     * @internal param string $values\n     */\n    private function makeTag($key, $value)\n    {\n        $value = str_replace(['http-equiv=', 'url='], '', $value);\n        return '<meta name=\"'.$this->prefix.strip_tags($key).'\" content=\"'.strip_tags($value).'\" />';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function addValue($key, $value)\n    {\n        $this->values[$key] = $value;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setTitle($title)\n    {\n        return $this->addValue('title', $title);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setType($type)\n    {\n        return $this->addValue('card', $type);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setSite($site)\n    {\n        return $this->addValue('site', $site);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setDescription($description)\n    {\n        return $this->addValue('description', htmlspecialchars($description, ENT_QUOTES, 'UTF-8', false));\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setUrl($url)\n    {\n        return $this->addValue('url', $url);\n    }\n\n    /**\n     * {@inheritdoc}\n     *\n     * @deprecated use setImage($image) instead\n     */\n    public function addImage($image)\n    {\n        foreach ((array) $image as $url) {\n            $this->images[] = $url;\n        }\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     *\n     * @deprecated use setImage($image) instead\n     */\n    public function setImages($images)\n    {\n        $this->images = [];\n\n        return $this->addImage($images);\n    }\n\n    /**\n     * @param $image\n     * @return TwitterCardsContract\n     */\n    public function setImage($image)\n    {\n        return $this->addValue('image', $image);\n    }\n}\n"], "filenames": ["src/SEOTools/OpenGraph.php", "src/SEOTools/SEOMeta.php", "src/SEOTools/TwitterCards.php"], "buggy_code_start_loc": [260, 215, 85], "buggy_code_end_loc": [260, 215, 85], "fixing_code_start_loc": [261, 216, 86], "fixing_code_end_loc": [262, 219, 87], "type": "CWE-601", "message": "A vulnerability was found in Artes\u00e3os SEOTools up to 0.17.1 and classified as critical. This issue affects the function eachValue of the file TwitterCards.php. The manipulation of the argument value leads to open redirect. Upgrading to version 0.17.2 is able to address this issue. The name of the patch is ca27cd0edf917e0bc805227013859b8b5a1f01fb. It is recommended to upgrade the affected component. The identifier VDB-222233 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2020-36665", "sourceIdentifier": "cna@vuldb.com", "published": "2023-03-04T19:15:10.193", "lastModified": "2023-03-09T21:01:58.203", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in Artes\u00e3os SEOTools up to 0.17.1 and classified as critical. This issue affects the function eachValue of the file TwitterCards.php. The manipulation of the argument value leads to open redirect. Upgrading to version 0.17.2 is able to address this issue. The name of the patch is ca27cd0edf917e0bc805227013859b8b5a1f01fb. It is recommended to upgrade the affected component. The identifier VDB-222233 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:seotool_project:seotool:*:*:*:*:*:laravel:*:*", "versionEndExcluding": "0.17.2", "matchCriteriaId": "3B4209D6-DC0C-411B-B387-9D1817F30719"}]}]}], "references": [{"url": "https://github.com/artesaos/seotools/commit/ca27cd0edf917e0bc805227013859b8b5a1f01fb", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/artesaos/seotools/pull/201", "source": "cna@vuldb.com", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/artesaos/seotools/releases/tag/v0.17.2", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?ctiid.222233", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory", "VDB Entry"]}, {"url": "https://vuldb.com/?id.222233", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/artesaos/seotools/commit/ca27cd0edf917e0bc805227013859b8b5a1f01fb"}}