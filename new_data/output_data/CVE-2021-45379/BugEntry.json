{"buggy_code": ["/**\n *\n * Glewlwyd SSO Server\n *\n * Authentiation server\n * Users are authenticated via various backend available: database, ldap\n * Using various authentication methods available: password, OTP, send code, etc.\n * \n * Callback functions definition\n *\n * Copyright 2016-2021 Nicolas Mora <mail@babelouest.org>\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU GENERAL PUBLIC LICENSE\n * License as published by the Free Software Foundation;\n * version 3 of the License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU GENERAL PUBLIC LICENSE for more details.\n *\n * You should have received a copy of the GNU General Public\n * License along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n#include <string.h>\n\n#include \"glewlwyd.h\"\n\nint callback_glewlwyd_options (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  UNUSED(request);\n  UNUSED(user_data);\n  ulfius_add_header_to_response(response, \"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\");\n  ulfius_add_header_to_response(response, \"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Bearer, Authorization\");\n  ulfius_add_header_to_response(response, \"Access-Control-Max-Age\", \"1800\");\n  return U_CALLBACK_COMPLETE;\n}\n\nint callback_glewlwyd_server_configuration (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  UNUSED(request);\n  \n  json_t * json_body = json_pack(\"{ssssssss}\", \n                                 \"api_prefix\", \n                                 ((struct config_elements *)user_data)->api_prefix,\n                                 \"admin_scope\",\n                                 ((struct config_elements *)user_data)->admin_scope,\n                                 \"profile_scope\",\n                                 ((struct config_elements *)user_data)->profile_scope,\n                                 \"delete_profile\",\n                                 ((struct config_elements *)user_data)->delete_profile==GLEWLWYD_PROFILE_DELETE_UNAUTHORIZED?\"no\":\"yes\");\n  ulfius_set_json_body_response(response, 200, json_body);\n  json_decref(json_body);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_default (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  UNUSED(request);\n  UNUSED(user_data);\n  json_t * json_body = json_pack(\"{ssss}\", \"error\", \"resource not found\", \"message\", \"no resource available at this address\");\n  ulfius_set_json_body_response(response, 404, json_body);\n  json_decref(json_body);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_404_if_necessary (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  UNUSED(user_data);\n  if (!request->callback_position) {\n    response->status = 404;\n  }\n  return U_CALLBACK_COMPLETE;\n}\n\nint callback_glewlwyd_check_user_profile_valid (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  char * session_uid;\n  json_t * j_user;\n  int ret, res;\n  \n  if ((session_uid = get_session_id(config, request)) != NULL) {\n    j_user = get_current_user_for_session(config, session_uid);\n    if (check_result_value(j_user, G_OK) && json_object_get(json_object_get(j_user, \"user\"), \"enabled\") == json_true()) {\n      if ((res = is_scope_list_valid_for_session(config, config->profile_scope, session_uid)) == G_OK) {\n        if (ulfius_set_response_shared_data(response, json_deep_copy(json_object_get(j_user, \"user\")), (void (*)(void *))&json_decref) != U_OK) {\n          ret = U_CALLBACK_ERROR;\n        } else {\n          ret = U_CALLBACK_IGNORE;\n        }\n      } else {\n        if (res == G_ERROR) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_check_user_session - Error is_scope_list_valid_for_session\");\n        }\n        ret = U_CALLBACK_UNAUTHORIZED;\n      }\n    } else {\n      ret = U_CALLBACK_UNAUTHORIZED;\n    }\n    json_decref(j_user);\n  } else {\n    ret = U_CALLBACK_UNAUTHORIZED;\n  }\n  o_free(session_uid);\n  return ret;\n}\n\nint callback_glewlwyd_check_user_session (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  char * session_uid;\n  json_t * j_user;\n  int ret;\n  \n  if ((session_uid = get_session_id(config, request)) != NULL) {\n    j_user = get_current_user_for_session(config, session_uid);\n    if (check_result_value(j_user, G_OK) && json_object_get(json_object_get(j_user, \"user\"), \"enabled\") == json_true()) {\n      if (ulfius_set_response_shared_data(response, json_deep_copy(json_object_get(j_user, \"user\")), (void (*)(void *))&json_decref) != U_OK) {\n        ret = U_CALLBACK_ERROR;\n      } else {\n        ret = U_CALLBACK_IGNORE;\n      }\n    } else {\n      ret = U_CALLBACK_UNAUTHORIZED;\n    }\n    json_decref(j_user);\n  } else {\n    ret = U_CALLBACK_UNAUTHORIZED;\n  }\n  o_free(session_uid);\n  return ret;\n}\n\nint callback_glewlwyd_check_admin_session (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  char * session_uid;\n  json_t * j_user;\n  int ret, res;\n  \n  if ((session_uid = get_session_id(config, request)) != NULL) {\n    j_user = get_current_user_for_session(config, session_uid);\n    if (check_result_value(j_user, G_OK) && json_object_get(json_object_get(j_user, \"user\"), \"enabled\") == json_true()) {\n      if ((res = is_scope_list_valid_for_session(config, config->admin_scope, session_uid)) == G_OK) {\n        if (ulfius_set_response_shared_data(response, json_deep_copy(json_object_get(j_user, \"user\")), (void (*)(void *))&json_decref) != U_OK) {\n          ret = U_CALLBACK_ERROR;\n        } else {\n          ret = U_CALLBACK_IGNORE;\n        }\n      } else {\n        if (res == G_ERROR) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_check_admin_session - Error is_scope_list_valid_for_session\");\n        }\n        ret = U_CALLBACK_UNAUTHORIZED;\n      }\n    } else {\n      ret = U_CALLBACK_UNAUTHORIZED;\n    }\n    json_decref(j_user);\n  } else {\n    ret = U_CALLBACK_UNAUTHORIZED;\n  }\n  o_free(session_uid);\n  return ret;\n}\n\nint callback_glewlwyd_check_admin_session_or_api_key (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  char * session_uid = NULL;\n  json_t * j_user;\n  int ret, res;\n  const char * api_key = u_map_get_case(request->map_header, GLEWLWYD_API_KEY_HEADER_KEY), * ip_source = get_ip_source(request);\n  \n  if (NULL != api_key && 0 == o_strncmp(GLEWLWYD_API_KEY_HEADER_PREFIX, api_key, o_strlen(GLEWLWYD_API_KEY_HEADER_PREFIX))) {\n    if ((res = verify_api_key(config, api_key + o_strlen(GLEWLWYD_API_KEY_HEADER_PREFIX))) == G_OK) {\n      if (ulfius_set_response_shared_data(response, json_pack(\"{so}\", \"username\", json_null()), (void (*)(void *))&json_decref) != U_OK) {\n        ret = U_CALLBACK_ERROR;\n      } else {\n        ret = U_CALLBACK_IGNORE;\n      }\n    } else if (res == G_ERROR_UNAUTHORIZED) {\n      y_log_message(Y_LOG_LEVEL_WARNING, \"Security - API key invalid at IP Address %s\", ip_source);\n      ret = U_CALLBACK_UNAUTHORIZED;\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_check_admin_session_or_api_key - Error verify_api_key\");\n      ret = U_CALLBACK_ERROR;\n    }\n  } else if ((session_uid = get_session_id(config, request)) != NULL) {\n    j_user = get_current_user_for_session(config, session_uid);\n    if (check_result_value(j_user, G_OK) && json_object_get(json_object_get(j_user, \"user\"), \"enabled\") == json_true()) {\n      if ((res = is_scope_list_valid_for_session(config, config->admin_scope, session_uid)) == G_OK) {\n        if (ulfius_set_response_shared_data(response, json_deep_copy(json_object_get(j_user, \"user\")), (void (*)(void *))&json_decref) != U_OK) {\n          ret = U_CALLBACK_ERROR;\n        } else {\n          ret = U_CALLBACK_IGNORE;\n        }\n      } else {\n        if (res == G_ERROR) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_check_admin_session_or_api_key - Error is_scope_list_valid_for_session\");\n        }\n        ret = U_CALLBACK_UNAUTHORIZED;\n      }\n    } else {\n      ret = U_CALLBACK_UNAUTHORIZED;\n    }\n    json_decref(j_user);\n    o_free(session_uid);\n  } else {\n    ret = U_CALLBACK_UNAUTHORIZED;\n  }\n  return ret;\n}\n\nint callback_glewlwyd_check_admin_session_delegate (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  char * session_uid;\n  json_t * j_user, * j_delegate;\n  int ret;\n  \n  if ((session_uid = get_session_id(config, request)) != NULL) {\n    j_user = get_current_user_for_session(config, session_uid);\n    if (check_result_value(j_user, G_OK) && json_object_get(json_object_get(j_user, \"user\"), \"enabled\") == json_true()) {\n      if (is_scope_list_valid_for_session(config, config->admin_scope, session_uid) == G_OK) {\n        j_delegate = get_user(config, u_map_get(request->map_url, \"username\"), NULL);\n        if (check_result_value(j_delegate, G_OK)) {\n          if (ulfius_set_response_shared_data(response, json_deep_copy(json_object_get(j_delegate, \"user\")), (void (*)(void *))&json_decref) != U_OK) {\n            ret = U_CALLBACK_ERROR;\n          } else {\n            ret = U_CALLBACK_IGNORE;\n          }\n        } else {\n          ret = U_CALLBACK_UNAUTHORIZED;\n        }\n        json_decref(j_delegate);\n      } else {\n        ret = U_CALLBACK_UNAUTHORIZED;\n      }\n    } else {\n      ret = U_CALLBACK_UNAUTHORIZED;\n    }\n    json_decref(j_user);\n  } else {\n    ret = U_CALLBACK_UNAUTHORIZED;\n  }\n  o_free(session_uid);\n  return ret;\n}\n\nint callback_glewlwyd_user_auth (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_param = ulfius_get_json_body_request(request, NULL), * j_result = NULL;\n  const char * ip_source = get_ip_source(request);\n  char * issued_for = get_client_hostname(request);\n  char * session_uid, expires[129];\n  time_t now;\n  struct tm ts;\n  \n  time(&now);\n  now += GLEWLWYD_DEFAULT_SESSION_EXPIRATION_COOKIE;\n  gmtime_r(&now, &ts);\n  strftime(expires, 128, \"%a, %d %b %Y %T %Z\", &ts);\n  if (j_param != NULL) {\n    if (json_string_length(json_object_get(j_param, \"username\"))) {\n      if (json_object_get(j_param, \"scheme_type\") == NULL || 0 == o_strcmp(json_string_value(json_object_get(j_param, \"scheme_type\")), \"password\")) {\n        if (json_string_length(json_object_get(j_param, \"password\"))) {\n          j_result = auth_check_user_credentials(config, json_string_value(json_object_get(j_param, \"username\")), json_string_value(json_object_get(j_param, \"password\")));\n          if (check_result_value(j_result, G_OK)) {\n            if ((session_uid = get_session_id(config, request)) == NULL) {\n              session_uid = generate_session_id();\n            }\n            if (user_session_update(config, session_uid, u_map_get_case(request->map_header, \"user-agent\"), issued_for, json_string_value(json_object_get(j_param, \"username\")), NULL, 1) != G_OK) {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error user_session_update (1)\");\n              response->status = 500;\n            } else {\n              ulfius_add_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0);\n              y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' authenticated with password\", json_string_value(json_object_get(j_param, \"username\")));\n            }\n            o_free(session_uid);\n            glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_VALID, 1, NULL);\n            glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 1, \"scheme_type\", \"password\", NULL);\n          } else {\n            if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {\n              y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for username %s at IP Address %s\", json_string_value(json_object_get(j_param, \"username\")), ip_source);\n            }\n            if ((session_uid = get_session_id(config, request)) != NULL && user_session_update(config, session_uid, u_map_get_case(request->map_header, \"user-agent\"), issued_for, json_string_value(json_object_get(j_param, \"username\")), NULL, 1) != G_OK) {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error user_session_update (2)\");\n            }\n            o_free(session_uid);\n            response->status = 401;\n            glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_INVALID, 1, NULL);\n            glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 1, \"scheme_type\", \"password\", NULL);\n          }\n          json_decref(j_result);\n        } else if (json_object_get(j_param, \"password\") != NULL && !json_is_string(json_object_get(j_param, \"password\"))) {\n          ulfius_set_string_body_response(response, 400, \"password must be a string\");\n        } else {\n          session_uid = get_session_id(config, request);\n          j_result = get_users_for_session(config, session_uid);\n          if (check_result_value(j_result, G_OK)) {\n            // Refresh username to set as default\n            if (user_session_update(config, u_map_get(request->map_cookie, config->session_key), u_map_get_case(request->map_header, \"user-agent\"), issued_for, json_string_value(json_object_get(j_param, \"username\")), NULL, 0) != G_OK) {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error user_session_update (3)\");\n              response->status = 500;\n            } else {\n              ulfius_add_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0);\n            }\n          } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n            response->status = 401;\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error get_users_for_session\");\n            response->status = 500;\n          }\n          o_free(session_uid);\n          json_decref(j_result);\n        }\n      } else {\n        if (json_string_length(json_object_get(j_param, \"scheme_type\")) && json_string_length(json_object_get(j_param, \"scheme_name\")) && json_is_object(json_object_get(j_param, \"value\"))) {\n          j_result = auth_check_user_scheme(config, json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")), json_string_value(json_object_get(j_param, \"username\")), json_object_get(j_param, \"value\"), request);\n          if (check_result_value(j_result, G_ERROR_PARAM)) {\n            ulfius_set_string_body_response(response, 400, \"bad scheme response\");\n          } else if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {\n            y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for username %s at IP Address %s\", json_string_value(json_object_get(j_param, \"username\")), ip_source);\n            response->status = 401;\n            glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_INVALID, 1, NULL);\n            glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 1, \"scheme_type\", json_string_value(json_object_get(j_param, \"scheme_type\")), \"scheme_name\", json_string_value(json_object_get(j_param, \"scheme_name\")), NULL);\n          } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n            response->status = 404;\n          } else if (check_result_value(j_result, G_OK)) {\n            if ((session_uid = get_session_id(config, request)) == NULL) {\n              session_uid = generate_session_id();\n            }\n            if (user_session_update(config, session_uid, u_map_get_case(request->map_header, \"user-agent\"), issued_for, json_string_value(json_object_get(j_param, \"username\")), json_string_value(json_object_get(j_param, \"scheme_name\")), 1) != G_OK) {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error user_session_update (4)\");\n              response->status = 500;\n            } else {\n              ulfius_add_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0);\n              y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' authenticated with scheme '%s/%s'\", json_string_value(json_object_get(j_param, \"username\")), json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")));\n            }\n            o_free(session_uid);\n            glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_VALID, 1, NULL);\n            glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 1, \"scheme_type\", json_string_value(json_object_get(j_param, \"scheme_type\")), \"scheme_name\", json_string_value(json_object_get(j_param, \"scheme_name\")), NULL);\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error auth_check_user_scheme\");\n            response->status = 500;\n          }\n          json_decref(j_result);\n        } else {\n          ulfius_set_string_body_response(response, 400, \"scheme_type, scheme_name and value are mandatory\");\n        }\n      }\n    } else {\n      if (json_string_length(json_object_get(j_param, \"scheme_type\")) && json_string_length(json_object_get(j_param, \"scheme_name\")) && json_is_object(json_object_get(j_param, \"value\"))) {\n        j_result = auth_check_identify_scheme(config, json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")), json_object_get(j_param, \"value\"), request);\n        if (check_result_value(j_result, G_ERROR_PARAM)) {\n          ulfius_set_string_body_response(response, 400, \"bad scheme response\");\n        } else if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {\n          y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for username <UNKNOWN> at IP Address %s\", ip_source);\n          response->status = 401;\n        } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n          response->status = 404;\n        } else if (check_result_value(j_result, G_OK)) {\n          if ((session_uid = get_session_id(config, request)) == NULL) {\n            session_uid = generate_session_id();\n          }\n          if (user_session_update(config, session_uid, u_map_get_case(request->map_header, \"user-agent\"), issued_for, json_string_value(json_object_get(j_result, \"username\")), json_string_value(json_object_get(j_param, \"scheme_name\")), 1) != G_OK) {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error user_session_update (4)\");\n            response->status = 500;\n          } else {\n            ulfius_add_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0);\n            y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' authenticated with scheme '%s/%s'\", json_string_value(json_object_get(j_result, \"username\")), json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")));\n          }\n          o_free(session_uid);\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error auth_check_user_scheme\");\n          response->status = 500;\n        }\n        json_decref(j_result);\n      } else {\n        ulfius_set_string_body_response(response, 400, \"username is mandatory\");\n      }\n    }\n  } else {\n    ulfius_set_string_body_response(response, 400, \"Input parameters must be in JSON format\");\n  }\n  json_decref(j_param);\n  o_free(issued_for);\n\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_auth_trigger (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_param = ulfius_get_json_body_request(request, NULL), * j_result = NULL;\n\n  if (j_param != NULL) {\n    if (json_string_length(json_object_get(j_param, \"scheme_type\")) && json_string_length(json_object_get(j_param, \"scheme_name\"))) {\n      if (json_string_length(json_object_get(j_param, \"username\"))) {\n        j_result = auth_trigger_user_scheme(config, json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")), json_string_value(json_object_get(j_param, \"username\")), json_object_get(j_param, \"value\"), request);\n        if (check_result_value(j_result, G_ERROR_PARAM)) {\n          ulfius_set_string_body_response(response, 400, \"bad scheme response\");\n        } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n          response->status = 404;\n        } else if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {\n          response->status = 401;\n        } else if (check_result_value(j_result, G_OK)) {\n          if (json_object_get(j_result, \"trigger\") != NULL) {\n            ulfius_set_json_body_response(response, 200, json_object_get(j_result, \"trigger\"));\n          }\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth_trigger - Error auth_trigger_user_scheme\");\n          response->status = 500;\n        }\n        json_decref(j_result);\n      } else {\n        j_result = auth_trigger_identify_scheme(config, json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")), json_object_get(j_param, \"value\"), request);\n        if (check_result_value(j_result, G_ERROR_PARAM)) {\n          ulfius_set_string_body_response(response, 400, \"bad scheme response\");\n        } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n          response->status = 404;\n        } else if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {\n          response->status = 401;\n        } else if (check_result_value(j_result, G_OK)) {\n          if (json_object_get(j_result, \"trigger\") != NULL) {\n            ulfius_set_json_body_response(response, 200, json_object_get(j_result, \"trigger\"));\n          }\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth_trigger - Error auth_trigger_identify_scheme\");\n          response->status = 500;\n        }\n        json_decref(j_result);\n      }\n    } else {\n      ulfius_set_string_body_response(response, 400, \"scheme is mandatory\");\n    }\n  } else {\n    ulfius_set_string_body_response(response, 400, \"Input parameters must be in JSON format\");\n  }\n  json_decref(j_param);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_auth_register (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_param = ulfius_get_json_body_request(request, NULL), * j_result = NULL;\n\n  if (j_param != NULL) {\n    if (json_object_get(j_param, \"username\") != NULL && json_is_string(json_object_get(j_param, \"username\")) && json_string_length(json_object_get(j_param, \"username\"))) {\n      if (0 == o_strcasecmp(json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), json_string_value(json_object_get(j_param, \"username\")))) {\n        if (json_object_get(j_param, \"scheme_type\") != NULL && json_is_string(json_object_get(j_param, \"scheme_type\")) && json_string_length(json_object_get(j_param, \"scheme_type\")) && json_object_get(j_param, \"scheme_name\") != NULL && json_is_string(json_object_get(j_param, \"scheme_name\")) && json_string_length(json_object_get(j_param, \"scheme_name\"))) {\n          j_result = auth_register_user_scheme(config, json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")), json_string_value(json_object_get(j_param, \"username\")), 0, json_object_get(j_param, \"value\"), request);\n          if (check_result_value(j_result, G_ERROR_PARAM)) {\n            if (json_object_get(j_result, \"register\") != NULL) {\n              ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"register\"));\n            } else {\n              ulfius_set_string_body_response(response, 400, \"bad scheme response\");\n            }\n          } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n            response->status = 404;\n          } else if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {\n            response->status = 401;\n          } else if (check_result_value(j_result, G_OK)) {\n            if (json_object_get(j_result, \"register\") != NULL) {\n              ulfius_set_json_body_response(response, 200, json_object_get(j_result, \"register\"));\n            }\n            y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' registered scheme '%s/%s'\", json_string_value(json_object_get(j_param, \"username\")), json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")));\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth_register - Error auth_check_user_scheme\");\n            response->status = 500;\n          }\n          json_decref(j_result);\n        } else {\n          ulfius_set_string_body_response(response, 400, \"scheme is mandatory\");\n        }\n      } else {\n        ulfius_set_string_body_response(response, 400, \"username invalid\");\n      }\n    } else {\n      ulfius_set_string_body_response(response, 400, \"username is mandatory\");\n    }\n  } else {\n    ulfius_set_string_body_response(response, 400, \"Input parameters must be in JSON format\");\n  }\n  json_decref(j_param);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_auth_register_get (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_param = ulfius_get_json_body_request(request, NULL), * j_result = NULL;\n\n  if (j_param != NULL) {\n    if (json_object_get(j_param, \"username\") != NULL && json_string_length(json_object_get(j_param, \"username\"))) {\n      if (0 == o_strcasecmp(json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), json_string_value(json_object_get(j_param, \"username\")))) {\n        if (json_object_get(j_param, \"scheme_type\") != NULL && json_string_length(json_object_get(j_param, \"scheme_type\")) && json_object_get(j_param, \"scheme_name\") != NULL && json_string_length(json_object_get(j_param, \"scheme_name\"))) {\n          j_result = auth_register_get_user_scheme(config, json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")), json_string_value(json_object_get(j_param, \"username\")), request);\n          if (check_result_value(j_result, G_ERROR_PARAM)) {\n            ulfius_set_string_body_response(response, 400, \"bad scheme response\");\n          } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n            response->status = 404;\n          } else if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {\n            response->status = 401;\n          } else if (check_result_value(j_result, G_OK)) {\n            if (json_object_get(j_result, \"register\") != NULL) {\n              ulfius_set_json_body_response(response, 200, json_object_get(j_result, \"register\"));\n            }\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth_register_get - Error auth_register_get_user_scheme\");\n            response->status = 500;\n          }\n          json_decref(j_result);\n        } else {\n          ulfius_set_string_body_response(response, 400, \"scheme is mandatory\");\n        }\n      } else {\n        ulfius_set_string_body_response(response, 400, \"username invalid\");\n      }\n    } else {\n      ulfius_set_string_body_response(response, 400, \"username is mandatory\");\n    }\n  } else {\n    ulfius_set_string_body_response(response, 400, \"Input parameters must be in JSON format\");\n  }\n  json_decref(j_param);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_scheme_check_forbid_profile (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_param = ulfius_get_json_body_request(request, NULL), * j_scheme = get_user_auth_scheme_module(config, json_string_value(json_object_get(j_param, \"scheme_name\")));\n  int ret = U_CALLBACK_CONTINUE;\n  \n  if (check_result_value(j_scheme, G_OK)) {\n    if (json_object_get(json_object_get(j_scheme, \"module\"), \"forbid_user_profile\") == json_true()) {\n      response->status = 403;\n      ret = U_CALLBACK_COMPLETE;\n    }\n  } else if (check_result_value(j_scheme, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_scheme_check_forbid_profile - Error auth_register_get_user_scheme\");\n    response->status = 500;\n  }\n  json_decref(j_param);\n  json_decref(j_scheme);\n  return ret;\n}\n\nint callback_glewlwyd_user_auth_register_delegate (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_param = ulfius_get_json_body_request(request, NULL), * j_result = NULL;\n\n  if (j_param != NULL) {\n    if (json_object_get(j_param, \"username\") != NULL && json_is_string(json_object_get(j_param, \"username\")) && json_string_length(json_object_get(j_param, \"username\"))) {\n      if (0 == o_strcasecmp(json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), json_string_value(json_object_get(j_param, \"username\")))) {\n        if (json_object_get(j_param, \"scheme_type\") != NULL && json_is_string(json_object_get(j_param, \"scheme_type\")) && json_string_length(json_object_get(j_param, \"scheme_type\")) && json_object_get(j_param, \"scheme_name\") != NULL && json_is_string(json_object_get(j_param, \"scheme_name\")) && json_string_length(json_object_get(j_param, \"scheme_name\"))) {\n          j_result = auth_register_user_scheme(config, json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")), json_string_value(json_object_get(j_param, \"username\")), 1, json_object_get(j_param, \"value\"), request);\n          if (check_result_value(j_result, G_ERROR_PARAM)) {\n            if (json_object_get(j_result, \"register\") != NULL) {\n              ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"register\"));\n            } else {\n              ulfius_set_string_body_response(response, 400, \"bad scheme response\");\n            }\n          } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n            response->status = 404;\n          } else if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {\n            response->status = 401;\n          } else if (check_result_value(j_result, G_OK)) {\n            if (json_object_get(j_result, \"register\") != NULL) {\n              ulfius_set_json_body_response(response, 200, json_object_get(j_result, \"register\"));\n            }\n            y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' registered scheme '%s/%s' (delegation)\", json_string_value(json_object_get(j_param, \"username\")), json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")));\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth_register_delegate - Error auth_check_user_scheme\");\n            response->status = 500;\n          }\n          json_decref(j_result);\n        } else {\n          ulfius_set_string_body_response(response, 400, \"scheme is mandatory\");\n        }\n      } else {\n        ulfius_set_string_body_response(response, 400, \"username invalid\");\n      }\n    } else {\n      ulfius_set_string_body_response(response, 400, \"username is mandatory\");\n    }\n  } else {\n    ulfius_set_string_body_response(response, 400, \"Input parameters must be in JSON format\");\n  }\n  json_decref(j_param);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_auth_register_get_delegate (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_param = ulfius_get_json_body_request(request, NULL), * j_result = NULL;\n\n  if (j_param != NULL) {\n    if (json_object_get(j_param, \"username\") != NULL && json_string_length(json_object_get(j_param, \"username\"))) {\n      if (0 == o_strcasecmp(json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), json_string_value(json_object_get(j_param, \"username\")))) {\n        if (json_object_get(j_param, \"scheme_type\") != NULL && json_string_length(json_object_get(j_param, \"scheme_type\")) && json_object_get(j_param, \"scheme_name\") != NULL && json_string_length(json_object_get(j_param, \"scheme_name\"))) {\n          j_result = auth_register_get_user_scheme(config, json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")), json_string_value(json_object_get(j_param, \"username\")), request);\n          if (check_result_value(j_result, G_ERROR_PARAM)) {\n            ulfius_set_string_body_response(response, 400, \"bad scheme response\");\n          } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n            response->status = 404;\n          } else if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {\n            response->status = 401;\n          } else if (check_result_value(j_result, G_OK)) {\n            if (json_object_get(j_result, \"register\") != NULL) {\n              ulfius_set_json_body_response(response, 200, json_object_get(j_result, \"register\"));\n            }\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth_register_get_delegate - Error auth_register_get_user_scheme\");\n            response->status = 500;\n          }\n          json_decref(j_result);\n        } else {\n          ulfius_set_string_body_response(response, 400, \"scheme is mandatory\");\n        }\n      } else {\n        ulfius_set_string_body_response(response, 400, \"username invalid\");\n      }\n    } else {\n      ulfius_set_string_body_response(response, 400, \"username is mandatory\");\n    }\n  } else {\n    ulfius_set_string_body_response(response, 400, \"Input parameters must be in JSON format\");\n  }\n  json_decref(j_param);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_delete_session (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_session, * j_cur_session;\n  char * session_uid = get_session_id(config, request), expires[129];\n  size_t index;\n  time_t now;\n  struct tm ts;\n  \n  time(&now);\n  now += GLEWLWYD_DEFAULT_SESSION_EXPIRATION_COOKIE;\n  gmtime_r(&now, &ts);\n  strftime(expires, 128, \"%a, %d %b %Y %T %Z\", &ts);\n  if (session_uid != NULL && o_strlen(session_uid)) {\n    j_session = get_users_for_session(config, session_uid);\n    if (check_result_value(j_session, G_ERROR_NOT_FOUND)) {\n      response->status = 404;\n    } else if (!check_result_value(j_session, G_OK)) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_delete_session - Error get_current_user_for_session\");\n      response->status = 500;\n    } else {\n      if (u_map_get(request->map_url, \"username\") != NULL) {\n        json_array_foreach(json_object_get(j_session, \"session\"), index, j_cur_session) {\n          if (0 == o_strcasecmp(u_map_get(request->map_url, \"username\"), json_string_value(json_object_get(j_cur_session, \"username\")))) {\n            if (user_session_delete(config, session_uid, u_map_get(request->map_url, \"username\")) != G_OK) {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_delete_session - Error user_session_delete\");\n              response->status = 500;\n            }\n          }\n        }\n        if (json_array_size(json_object_get(j_session, \"session\")) == 1) {\n          // Delete session cookie on the client browser\n          ulfius_add_cookie_to_response(response, config->session_key, \"\", expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0);\n        } else {\n          ulfius_add_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0);\n        }\n      } else {\n        if (user_session_delete(config, session_uid, NULL) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_delete_session - Error user_session_delete\");\n          response->status = 500;\n        }\n        // Delete session cookie on the client browser\n        ulfius_add_cookie_to_response(response, config->session_key, \"\", expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0);\n      }\n    }\n    json_decref(j_session);\n  } else {\n    response->status = 401;\n  }\n  o_free(session_uid);\n  \n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_get_schemes_from_scopes (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_result;\n  char * session_uid = get_session_id(config, request);\n\n  if (u_map_get(request->map_url, \"scope\") != NULL) {\n    j_result = get_validated_auth_scheme_list_from_scope_list(config, u_map_get(request->map_url, \"scope\"), session_uid);\n    if (check_result_value(j_result, G_OK)) {\n      ulfius_set_json_body_response(response, 200, json_object_get(j_result, \"scheme\"));\n    } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n      response->status = 404;\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_get_schemes_from_scopes - Error get_validated_auth_scheme_list_from_scope_list\");\n      response->status = 500;\n    }\n    json_decref(j_result);\n  } else {\n    response->status = 400;\n  }\n  o_free(session_uid);\n  \n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_user_session_scope_grant (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_user = (json_t *)response->shared_data, * j_scope_list;\n  \n  if (config != NULL && j_user != NULL) {\n    j_scope_list = get_granted_scopes_for_client(config, j_user, u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope_list\"));\n    if (check_result_value(j_scope_list, G_OK)) {\n      ulfius_set_json_body_response(response, 200, json_object_get(j_scope_list, \"grant\"));\n    } else if (check_result_value(j_scope_list, G_ERROR_NOT_FOUND)) {\n      response->status = 404;\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_user_session_scope_grant - Error get_granted_scopes_for_client\");\n      response->status = 500;\n    }\n    json_decref(j_scope_list);\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_user_session_scope_grant - Error config or j_user is NULL\");\n    response->status = 500;\n  }\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_set_user_session_scope_grant (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_user = (json_t *)response->shared_data, * j_body = ulfius_get_json_body_request(request, NULL), * j_client;\n  int res;\n  \n  if (config != NULL && j_user != NULL) {\n    if (json_object_get(j_body, \"scope\") != NULL && json_is_string(json_object_get(j_body, \"scope\"))) {\n      j_client = get_client(config, u_map_get(request->map_url, \"client_id\"), NULL);\n      if (check_result_value(j_client, G_OK) && json_object_get(json_object_get(j_client, \"client\"), \"enabled\") == json_true()) {\n        res = set_granted_scopes_for_client(config, j_user, u_map_get(request->map_url, \"client_id\"), json_string_value(json_object_get(j_body, \"scope\")));\n        if (res == G_ERROR_NOT_FOUND) {\n          response->status = 404;\n        } else if (res == G_ERROR_PARAM) {\n          response->status = 400;\n        } else if (res == G_ERROR_UNAUTHORIZED) {\n          response->status = 401;\n        } else if (res != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_session_scope_grant - Error set_granted_scopes_for_client\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' granted scope list '%s' for client '%s'\", json_string_value(json_object_get(j_user, \"username\")), json_string_value(json_object_get(j_body, \"scope\")), u_map_get(request->map_url, \"client_id\"));\n        }\n      } else if (check_result_value(j_client, G_ERROR_NOT_FOUND) || json_object_get(json_object_get(j_client, \"client\"), \"enabled\") != json_true()) {\n        response->status = 404;\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_session_scope_grant - Error get_client\");\n        response->status = 500;\n      }\n      json_decref(j_client);\n    } else {\n      response->status = 400;\n    }\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_session_scope_grant - Error config or j_user is NULL\");\n    response->status = 500;\n  }\n  json_decref(j_body);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_module_type_list (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  UNUSED(request);\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_module_type;\n  \n  j_module_type = get_module_type_list(config);\n  if (check_result_value(j_module_type, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module_type, \"module\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_module_type_list - Error get_module_type_list\");\n    response->status = 500;\n  }\n  json_decref(j_module_type);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_reload_modules (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  UNUSED(request);\n\n  close_user_module_instance_list(config);\n  close_user_module_list(config);\n  \n  close_user_middleware_module_instance_list(config);\n  close_user_middleware_module_list(config);\n  \n  close_client_module_instance_list(config);\n  close_client_module_list(config);\n  \n  close_user_auth_scheme_module_instance_list(config);\n  close_user_auth_scheme_module_list(config);\n  \n  close_plugin_module_instance_list(config);\n  close_plugin_module_list(config);\n  \n  // Initialize user modules\n  if (init_user_module_list(config) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"Error initializing user modules\");\n    response->status = 500;\n  }\n  if (load_user_module_instance_list(config) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"Error loading user modules instances\");\n    response->status = 500;\n  }\n\n  // Initialize user modules\n  if (init_user_middleware_module_list(config) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"Error initializing user middleware modules\");\n    response->status = 500;\n  }\n  if (load_user_middleware_module_instance_list(config) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"Error loading user middleware modules instances\");\n    response->status = 500;\n  }\n\n  // Initialize client modules\n  if (init_client_module_list(config) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"Error initializing client modules\");\n    response->status = 500;\n  }\n  if (load_client_module_instance_list(config) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"Error loading client modules instances\");\n    response->status = 500;\n  }\n\n  // Initialize user auth scheme modules\n  if (init_user_auth_scheme_module_list(config) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"Error initializing user auth scheme modules\");\n    response->status = 500;\n  }\n  if (load_user_auth_scheme_module_instance_list(config) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"Error loading user auth scheme modules instances\");\n    response->status = 500;\n  }\n\n  // Initialize plugins\n  if (init_plugin_module_list(config) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"Error initializing plugins modules\");\n    response->status = 500;\n  }\n  if (load_plugin_module_instance_list(config) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"Error loading plugins modules instances\");\n    response->status = 500;\n  }\n\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_user_module_list (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  UNUSED(request);\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_module;\n  \n  j_module = get_user_module_list(config);\n  if (check_result_value(j_module, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module, \"module\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_user_module_list - Error get_user_module_list\");\n    response->status = 500;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_user_module (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_module;\n  \n  j_module = get_user_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_module, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module, \"module\"));\n  } else if (check_result_value(j_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_user_module - Error get_user_module\");\n    response->status = 500;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_add_user_module (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_module, * j_module_valid, * j_result;\n  \n  j_module = ulfius_get_json_body_request(request, NULL);\n  if (j_module != NULL) {\n    j_module_valid = is_user_module_valid(config, j_module, 1);\n    if (check_result_value(j_module_valid, G_OK)) {\n      j_result = add_user_module(config, j_module);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_user_module - Error add_user_module\");\n        response->status = 500;\n      } else {\n        y_log_message(Y_LOG_LEVEL_INFO, \"Event - User backend module '%s' added (%s)\", json_string_value(json_object_get(j_module, \"name\")), json_string_value(json_object_get(j_module, \"module\")));\n      }\n      json_decref(j_result);\n    } else if (check_result_value(j_module_valid, G_ERROR_PARAM)) {\n      if (json_object_get(j_module_valid, \"error\") != NULL) {\n        ulfius_set_json_body_response(response, 400, json_object_get(j_module_valid, \"error\"));\n      } else {\n        response->status = 400;\n      }\n    } else if (!check_result_value(j_module_valid, G_OK)) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_user_module - Error is_user_module_valid\");\n      response->status = 500;\n    }\n    json_decref(j_module_valid);\n  } else {\n    response->status = 400;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_set_user_module (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_module, * j_module_valid, * j_search_module;\n  \n  j_search_module = get_user_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    j_module = ulfius_get_json_body_request(request, NULL);\n    if (j_module != NULL) {\n      json_object_del(j_module, \"enabled\");\n      j_module_valid = is_user_module_valid(config, j_module, 0);\n      if (check_result_value(j_module_valid, G_OK)) {\n        if (set_user_module(config, u_map_get(request->map_url, \"name\"), j_module) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_module - Error set_user_module\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - User backend module '%s' updated\", u_map_get(request->map_url, \"name\"));\n        }\n      } else if (check_result_value(j_module_valid, G_ERROR_PARAM)) {\n        if (json_object_get(j_module_valid, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_module_valid, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_module_valid, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_module - Error is_user_module_valid\");\n        response->status = 500;\n      }\n      json_decref(j_module_valid);\n    } else {\n      response->status = 400;\n    }\n    json_decref(j_module);\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_module - Error get_user_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_delete_user_module (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_search_module;\n  \n  j_search_module = get_user_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    if (delete_user_module(config, u_map_get(request->map_url, \"name\")) != G_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_user_module - Error delete_user_module\");\n      response->status = 500;\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event - User backend module '%s' removed\", u_map_get(request->map_url, \"name\"));\n    }\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_user_module - Error get_user_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_manage_user_module (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_search_module, * j_result, * j_result2;\n  \n  j_search_module = get_user_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    if (0 == o_strcmp(\"enable\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_user_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_START);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_module - Error manage_user_module enable\");\n        response->status = 500;\n      }\n      json_decref(j_result);\n    } else if (0 == o_strcmp(\"disable\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_user_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_STOP);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_module - Error manage_user_module disable\");\n        response->status = 500;\n      }\n      json_decref(j_result);\n    } else if (0 == o_strcmp(\"reset\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_user_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_STOP);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_module - Error manage_user_module reset (1)\");\n        response->status = 500;\n      } else {\n        j_result2 = manage_user_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_START);\n        if (check_result_value(j_result2, G_ERROR_PARAM)) {\n          if (json_object_get(j_result2, \"error\") != NULL) {\n            ulfius_set_json_body_response(response, 400, json_object_get(j_result2, \"error\"));\n          } else {\n            response->status = 400;\n          }\n        } else if (!check_result_value(j_result2, G_OK)) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_module - Error manage_user_module reset (2)\");\n          response->status = 500;\n        }\n        json_decref(j_result2);\n      }\n      json_decref(j_result);\n    } else {\n      response->status = 400;\n    }\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_module - Error get_user_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_user_middleware_module_list (const struct _u_request * request, struct _u_response * response, void * user_middleware_data) {\n  UNUSED(request);\n  struct config_elements * config = (struct config_elements *)user_middleware_data;\n  json_t * j_module;\n  \n  j_module = get_user_middleware_module_list(config);\n  if (check_result_value(j_module, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module, \"module\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_user_middleware_module_list - Error get_user_middleware_module_list\");\n    response->status = 500;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_user_middleware_module (const struct _u_request * request, struct _u_response * response, void * user_middleware_data) {\n  struct config_elements * config = (struct config_elements *)user_middleware_data;\n  json_t * j_module;\n  \n  j_module = get_user_middleware_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_module, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module, \"module\"));\n  } else if (check_result_value(j_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_user_middleware_module - Error get_user_middleware_module\");\n    response->status = 500;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_add_user_middleware_module (const struct _u_request * request, struct _u_response * response, void * user_middleware_data) {\n  struct config_elements * config = (struct config_elements *)user_middleware_data;\n  json_t * j_module, * j_module_valid, * j_result;\n  \n  j_module = ulfius_get_json_body_request(request, NULL);\n  if (j_module != NULL) {\n    j_module_valid = is_user_middleware_module_valid(config, j_module, 1);\n    if (check_result_value(j_module_valid, G_OK)) {\n      j_result = add_user_middleware_module(config, j_module);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_user_middleware_module - Error add_user_middleware_module\");\n        response->status = 500;\n      } else {\n        y_log_message(Y_LOG_LEVEL_INFO, \"Event - User backend module '%s' added (%s)\", json_string_value(json_object_get(j_module, \"name\")), json_string_value(json_object_get(j_module, \"module\")));\n      }\n      json_decref(j_result);\n    } else if (check_result_value(j_module_valid, G_ERROR_PARAM)) {\n      if (json_object_get(j_module_valid, \"error\") != NULL) {\n        ulfius_set_json_body_response(response, 400, json_object_get(j_module_valid, \"error\"));\n      } else {\n        response->status = 400;\n      }\n    } else if (!check_result_value(j_module_valid, G_OK)) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_user_middleware_module - Error is_user_middleware_module_valid\");\n      response->status = 500;\n    }\n    json_decref(j_module_valid);\n  } else {\n    response->status = 400;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_set_user_middleware_module (const struct _u_request * request, struct _u_response * response, void * user_middleware_data) {\n  struct config_elements * config = (struct config_elements *)user_middleware_data;\n  json_t * j_module, * j_module_valid, * j_search_module;\n  \n  j_search_module = get_user_middleware_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    j_module = ulfius_get_json_body_request(request, NULL);\n    if (j_module != NULL) {\n      json_object_del(j_module, \"enabled\");\n      j_module_valid = is_user_middleware_module_valid(config, j_module, 0);\n      if (check_result_value(j_module_valid, G_OK)) {\n        if (set_user_middleware_module(config, u_map_get(request->map_url, \"name\"), j_module) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_middleware_module - Error set_user_middleware_module\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - User backend module '%s' updated\", u_map_get(request->map_url, \"name\"));\n        }\n      } else if (check_result_value(j_module_valid, G_ERROR_PARAM)) {\n        if (json_object_get(j_module_valid, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_module_valid, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_module_valid, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_middleware_module - Error is_user_middleware_module_valid\");\n        response->status = 500;\n      }\n      json_decref(j_module_valid);\n    } else {\n      response->status = 400;\n    }\n    json_decref(j_module);\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_middleware_module - Error get_user_middleware_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_delete_user_middleware_module (const struct _u_request * request, struct _u_response * response, void * user_middleware_data) {\n  struct config_elements * config = (struct config_elements *)user_middleware_data;\n  json_t * j_search_module;\n  \n  j_search_module = get_user_middleware_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    if (delete_user_middleware_module(config, u_map_get(request->map_url, \"name\")) != G_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_user_middleware_module - Error delete_user_middleware_module\");\n      response->status = 500;\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event - User backend module '%s' removed\", u_map_get(request->map_url, \"name\"));\n    }\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_user_middleware_module - Error get_user_middleware_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_manage_user_middleware_module (const struct _u_request * request, struct _u_response * response, void * user_middleware_data) {\n  struct config_elements * config = (struct config_elements *)user_middleware_data;\n  json_t * j_search_module, * j_result, * j_result2;\n  \n  j_search_module = get_user_middleware_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    if (0 == o_strcmp(\"enable\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_user_middleware_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_START);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_middleware_module - Error manage_user_middleware_module enable\");\n        response->status = 500;\n      }\n      json_decref(j_result);\n    } else if (0 == o_strcmp(\"disable\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_user_middleware_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_STOP);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_middleware_module - Error manage_user_middleware_module disable\");\n        response->status = 500;\n      }\n      json_decref(j_result);\n    } else if (0 == o_strcmp(\"reset\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_user_middleware_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_STOP);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_middleware_module - Error manage_user_middleware_module reset (1)\");\n        response->status = 500;\n      } else {\n        j_result2 = manage_user_middleware_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_START);\n        if (check_result_value(j_result2, G_ERROR_PARAM)) {\n          if (json_object_get(j_result2, \"error\") != NULL) {\n            ulfius_set_json_body_response(response, 400, json_object_get(j_result2, \"error\"));\n          } else {\n            response->status = 400;\n          }\n        } else if (!check_result_value(j_result2, G_OK)) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_middleware_module - Error manage_user_middleware_module reset (2)\");\n          response->status = 500;\n        }\n        json_decref(j_result2);\n      }\n      json_decref(j_result);\n    } else {\n      response->status = 400;\n    }\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_middleware_module - Error get_user_middleware_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_user_auth_scheme_module_list (const struct _u_request * request, struct _u_response * response, void * user_auth_scheme_data) {\n  UNUSED(request);\n  struct config_elements * config = (struct config_elements *)user_auth_scheme_data;\n  json_t * j_module;\n  \n  j_module = get_user_auth_scheme_module_list(config);\n  if (check_result_value(j_module, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module, \"module\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_user_auth_scheme_module_list - Error get_user_auth_scheme_module_list\");\n    response->status = 500;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_user_auth_scheme_module (const struct _u_request * request, struct _u_response * response, void * user_auth_scheme_data) {\n  struct config_elements * config = (struct config_elements *)user_auth_scheme_data;\n  json_t * j_module;\n  \n  j_module = get_user_auth_scheme_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_module, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module, \"module\"));\n  } else if (check_result_value(j_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_user_auth_scheme_module - Error get_user_auth_scheme_module\");\n    response->status = 500;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_add_user_auth_scheme_module (const struct _u_request * request, struct _u_response * response, void * user_auth_scheme_data) {\n  struct config_elements * config = (struct config_elements *)user_auth_scheme_data;\n  json_t * j_module, * j_module_valid, * j_result;\n  \n  j_module = ulfius_get_json_body_request(request, NULL);\n  if (j_module != NULL) {\n    j_module_valid = is_user_auth_scheme_module_valid(config, j_module, 1);\n    if (check_result_value(j_module_valid, G_OK)) {\n      j_result = add_user_auth_scheme_module(config, j_module);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_user_auth_scheme_module - Error add_user_auth_scheme_module\");\n        response->status = 500;\n      } else {\n        y_log_message(Y_LOG_LEVEL_INFO, \"Event - User auth scheme module '%s' added (%s)\", json_string_value(json_object_get(j_module, \"name\")), json_string_value(json_object_get(j_module, \"module\")));\n      }\n      json_decref(j_result);\n    } else if (check_result_value(j_module_valid, G_ERROR_PARAM)) {\n      if (json_object_get(j_module_valid, \"error\") != NULL) {\n        ulfius_set_json_body_response(response, 400, json_object_get(j_module_valid, \"error\"));\n      } else {\n        response->status = 400;\n      }\n    } else if (!check_result_value(j_module_valid, G_OK)) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_user_auth_scheme_module - Error is_user_auth_scheme_module_valid\");\n      response->status = 500;\n    }\n    json_decref(j_module_valid);\n  } else {\n    response->status = 400;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_set_user_auth_scheme_module (const struct _u_request * request, struct _u_response * response, void * user_auth_scheme_data) {\n  struct config_elements * config = (struct config_elements *)user_auth_scheme_data;\n  json_t * j_module, * j_module_valid, * j_search_module;\n  \n  j_search_module = get_user_auth_scheme_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    j_module = ulfius_get_json_body_request(request, NULL);\n    if (j_module != NULL) {\n      json_object_del(j_module, \"enabled\");\n      j_module_valid = is_user_auth_scheme_module_valid(config, j_module, 0);\n      if (check_result_value(j_module_valid, G_OK)) {\n        if (set_user_auth_scheme_module(config, u_map_get(request->map_url, \"name\"), j_module) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_auth_scheme_module - Error set_user_auth_scheme_module\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - User auth scheme module '%s' updated\", u_map_get(request->map_url, \"name\"));\n        }\n      } else if (check_result_value(j_module_valid, G_ERROR_PARAM)) {\n        if (json_object_get(j_module_valid, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_module_valid, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_module_valid, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_auth_scheme_module - Error is_user_auth_scheme_module_valid\");\n        response->status = 500;\n      }\n      json_decref(j_module_valid);\n    } else {\n      response->status = 400;\n    }\n    json_decref(j_module);\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_auth_scheme_module - Error get_user_auth_scheme_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_delete_user_auth_scheme_module (const struct _u_request * request, struct _u_response * response, void * user_auth_scheme_data) {\n  struct config_elements * config = (struct config_elements *)user_auth_scheme_data;\n  json_t * j_search_module;\n  \n  j_search_module = get_user_auth_scheme_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    if (delete_user_auth_scheme_module(config, u_map_get(request->map_url, \"name\")) != G_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_user_auth_scheme_module - Error delete_user_auth_scheme_module\");\n      response->status = 500;\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event - User auth scheme module '%s' removed\", u_map_get(request->map_url, \"name\"));\n    }\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_user_auth_scheme_module - Error get_user_auth_scheme_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_manage_user_auth_scheme_module (const struct _u_request * request, struct _u_response * response, void * user_auth_scheme_data) {\n  struct config_elements * config = (struct config_elements *)user_auth_scheme_data;\n  json_t * j_search_module, * j_result, * j_result2;\n  \n  j_search_module = get_user_auth_scheme_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    if (0 == o_strcmp(\"enable\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_user_auth_scheme_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_START);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_auth_scheme_module - Error manage_user_auth_scheme_module enable\");\n        response->status = 500;\n      }\n      json_decref(j_result);\n    } else if (0 == o_strcmp(\"disable\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_user_auth_scheme_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_STOP);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_auth_scheme_module - Error manage_user_auth_scheme_module disable\");\n        response->status = 500;\n      }\n      json_decref(j_result);\n    } else if (0 == o_strcmp(\"reset\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_user_auth_scheme_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_STOP);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_auth_scheme_module - Error manage_user_auth_scheme_module reset (1)\");\n        response->status = 500;\n      } else {\n        j_result2 = manage_user_auth_scheme_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_START);\n        if (check_result_value(j_result2, G_ERROR_PARAM)) {\n          if (json_object_get(j_result2, \"error\") != NULL) {\n            ulfius_set_json_body_response(response, 400, json_object_get(j_result2, \"error\"));\n          } else {\n            response->status = 400;\n          }\n        } else if (!check_result_value(j_result, G_OK)) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_auth_scheme_module - Error manage_user_auth_scheme_module reset (2)\");\n          response->status = 500;\n        }\n        json_decref(j_result2);\n      }\n      json_decref(j_result);\n    } else {\n      response->status = 400;\n    }\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_auth_scheme_module - Error get_user_auth_scheme_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_client_module_list (const struct _u_request * request, struct _u_response * response, void * client_data) {\n  UNUSED(request);\n  struct config_elements * config = (struct config_elements *)client_data;\n  json_t * j_module;\n  \n  j_module = get_client_module_list(config);\n  if (check_result_value(j_module, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module, \"module\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_client_module_list - Error get_client_module_list\");\n    response->status = 500;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_client_module (const struct _u_request * request, struct _u_response * response, void * client_data) {\n  struct config_elements * config = (struct config_elements *)client_data;\n  json_t * j_module;\n  \n  j_module = get_client_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_module, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module, \"module\"));\n  } else if (check_result_value(j_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_client_module - Error get_client_module\");\n    response->status = 500;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_add_client_module (const struct _u_request * request, struct _u_response * response, void * client_data) {\n  struct config_elements * config = (struct config_elements *)client_data;\n  json_t * j_module, * j_module_valid, * j_result;\n  \n  j_module = ulfius_get_json_body_request(request, NULL);\n  if (j_module != NULL) {\n    j_module_valid = is_client_module_valid(config, j_module, 1);\n    if (check_result_value(j_module_valid, G_OK)) {\n      j_result = add_client_module(config, j_module);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_client_module - Error add_client_module\");\n        response->status = 500;\n      } else {\n        y_log_message(Y_LOG_LEVEL_INFO, \"Event - Client backend module '%s' added (%s)\", json_string_value(json_object_get(j_module, \"name\")), json_string_value(json_object_get(j_module, \"module\")));\n      }\n      json_decref(j_result);\n    } else if (check_result_value(j_module_valid, G_ERROR_PARAM)) {\n      if (json_object_get(j_module_valid, \"error\") != NULL) {\n        ulfius_set_json_body_response(response, 400, json_object_get(j_module_valid, \"error\"));\n      } else {\n        response->status = 400;\n      }\n    } else if (!check_result_value(j_module_valid, G_OK)) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_client_module - Error is_client_module_valid\");\n      response->status = 500;\n    }\n    json_decref(j_module_valid);\n  } else {\n    response->status = 400;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_set_client_module (const struct _u_request * request, struct _u_response * response, void * client_data) {\n  struct config_elements * config = (struct config_elements *)client_data;\n  json_t * j_module, * j_module_valid, * j_search_module;\n  \n  j_search_module = get_client_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    j_module = ulfius_get_json_body_request(request, NULL);\n    if (j_module != NULL) {\n      json_object_del(j_module, \"enabled\");\n      j_module_valid = is_client_module_valid(config, j_module, 0);\n      if (check_result_value(j_module_valid, G_OK)) {\n        if (set_client_module(config, u_map_get(request->map_url, \"name\"), j_module) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_client_module - Error set_client_module\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - Client backend module '%s' updated\", u_map_get(request->map_url, \"name\"));\n        }\n      } else if (check_result_value(j_module_valid, G_ERROR_PARAM)) {\n        if (json_object_get(j_module_valid, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_module_valid, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_module_valid, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_client_module - Error is_client_module_valid\");\n        response->status = 500;\n      }\n      json_decref(j_module_valid);\n    } else {\n      response->status = 400;\n    }\n    json_decref(j_module);\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_client_module - Error get_client_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_delete_client_module (const struct _u_request * request, struct _u_response * response, void * client_data) {\n  struct config_elements * config = (struct config_elements *)client_data;\n  json_t * j_search_module;\n  \n  j_search_module = get_client_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    if (delete_client_module(config, u_map_get(request->map_url, \"name\")) != G_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_client_module - Error delete_client_module\");\n      response->status = 500;\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event - Client backend module '%s' removed\", u_map_get(request->map_url, \"name\"));\n    }\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_client_module - Error get_client_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_manage_client_module (const struct _u_request * request, struct _u_response * response, void * client_data) {\n  struct config_elements * config = (struct config_elements *)client_data;\n  json_t * j_search_module, * j_result, * j_result2;\n  \n  j_search_module = get_client_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    if (0 == o_strcmp(\"enable\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_client_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_START);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_client_module - Error manage_client_module enable\");\n        response->status = 500;\n      }\n      json_decref(j_result);\n    } else if (0 == o_strcmp(\"disable\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_client_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_STOP);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_client_module - Error manage_client_module disable\");\n        response->status = 500;\n      }\n      json_decref(j_result);\n    } else if (0 == o_strcmp(\"reset\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_client_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_STOP);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_client_module - Error manage_client_module reset (1)\");\n        response->status = 500;\n      } else {\n        j_result2 = manage_client_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_START);\n        if (check_result_value(j_result2, G_ERROR_PARAM)) {\n          if (json_object_get(j_result2, \"error\") != NULL) {\n            ulfius_set_json_body_response(response, 400, json_object_get(j_result2, \"error\"));\n          } else {\n            response->status = 400;\n          }\n        } else if (!check_result_value(j_result2, G_OK)) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_client_module - Error manage_client_module reset (2)\");\n          response->status = 500;\n        }\n        json_decref(j_result2);\n      }\n      json_decref(j_result);\n    } else {\n      response->status = 400;\n    }\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_client_module - Error get_client_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_plugin_module_list (const struct _u_request * request, struct _u_response * response, void * plugin_data) {\n  UNUSED(request);\n  struct config_elements * config = (struct config_elements *)plugin_data;\n  json_t * j_module;\n  \n  j_module = get_plugin_module_list(config);\n  if (check_result_value(j_module, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module, \"module\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_plugin_module_list - Error get_plugin_module_list\");\n    response->status = 500;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_plugin_module (const struct _u_request * request, struct _u_response * response, void * plugin_data) {\n  struct config_elements * config = (struct config_elements *)plugin_data;\n  json_t * j_module;\n  \n  j_module = get_plugin_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_module, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module, \"module\"));\n  } else if (check_result_value(j_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_plugin_module - Error get_plugin_module\");\n    response->status = 500;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_add_plugin_module (const struct _u_request * request, struct _u_response * response, void * plugin_data) {\n  struct config_elements * config = (struct config_elements *)plugin_data;\n  json_t * j_module, * j_module_valid, * j_result;\n  \n  j_module = ulfius_get_json_body_request(request, NULL);\n  if (j_module != NULL) {\n    j_module_valid = is_plugin_module_valid(config, j_module, 1);\n    if (check_result_value(j_module_valid, G_OK)) {\n      j_result = add_plugin_module(config, j_module);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_plugin_module - Error add_plugin_module\");\n        response->status = 500;\n      } else {\n        y_log_message(Y_LOG_LEVEL_INFO, \"Event - Plugin module '%s' added (%s)\", json_string_value(json_object_get(j_module, \"name\")), json_string_value(json_object_get(j_module, \"module\")));\n      }\n      json_decref(j_result);\n    } else if (check_result_value(j_module_valid, G_ERROR_PARAM)) {\n      if (json_object_get(j_module_valid, \"error\") != NULL) {\n        ulfius_set_json_body_response(response, 400, json_object_get(j_module_valid, \"error\"));\n      } else {\n        response->status = 400;\n      }\n    } else if (!check_result_value(j_module_valid, G_OK)) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_plugin_module - Error is_plugin_module_valid\");\n      response->status = 500;\n    }\n    json_decref(j_module_valid);\n  } else {\n    response->status = 400;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_set_plugin_module (const struct _u_request * request, struct _u_response * response, void * plugin_data) {\n  struct config_elements * config = (struct config_elements *)plugin_data;\n  json_t * j_module, * j_module_valid, * j_search_module;\n  \n  j_search_module = get_plugin_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    j_module = ulfius_get_json_body_request(request, NULL);\n    if (j_module != NULL) {\n      json_object_del(j_module, \"enabled\");\n      j_module_valid = is_plugin_module_valid(config, j_module, 0);\n      if (check_result_value(j_module_valid, G_OK)) {\n        if (set_plugin_module(config, u_map_get(request->map_url, \"name\"), j_module) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_plugin_module - Error set_plugin_module\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - Plugin module '%s' updated\", u_map_get(request->map_url, \"name\"));\n        }\n      } else if (check_result_value(j_module_valid, G_ERROR_PARAM)) {\n        if (json_object_get(j_module_valid, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_module_valid, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_module_valid, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_plugin_module - Error is_plugin_module_valid\");\n        response->status = 500;\n      }\n      json_decref(j_module_valid);\n    } else {\n      response->status = 400;\n    }\n    json_decref(j_module);\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_plugin_module - Error get_plugin_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_delete_plugin_module (const struct _u_request * request, struct _u_response * response, void * plugin_data) {\n  struct config_elements * config = (struct config_elements *)plugin_data;\n  json_t * j_search_module;\n  \n  j_search_module = get_plugin_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    if (delete_plugin_module(config, u_map_get(request->map_url, \"name\")) != G_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_plugin_module - Error delete_plugin_module\");\n      response->status = 500;\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event - Plugin module '%s' removed\", u_map_get(request->map_url, \"name\"));\n    }\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_plugin_module - Error get_plugin_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_manage_plugin_module (const struct _u_request * request, struct _u_response * response, void * plugin_data) {\n  struct config_elements * config = (struct config_elements *)plugin_data;\n  json_t * j_search_module, * j_result, * j_result2;\n  \n  j_search_module = get_plugin_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    if (0 == o_strcmp(\"enable\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_plugin_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_START);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_plugin_module - Error manage_plugin_module enable\");\n        response->status = 500;\n      }\n      json_decref(j_result);\n    } else if (0 == o_strcmp(\"disable\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_plugin_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_STOP);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_plugin_module - Error manage_plugin_module disable\");\n        response->status = 500;\n      }\n      json_decref(j_result);\n    } else if (0 == o_strcmp(\"reset\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_plugin_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_STOP);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_plugin_module - Error manage_plugin_module reset (1)\");\n        response->status = 500;\n      } else {\n        j_result2 = manage_plugin_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_START);\n        if (check_result_value(j_result2, G_ERROR_PARAM)) {\n          if (json_object_get(j_result2, \"error\") != NULL) {\n            ulfius_set_json_body_response(response, 400, json_object_get(j_result2, \"error\"));\n          } else {\n            response->status = 400;\n          }\n        } else if (!check_result_value(j_result2, G_OK)) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_plugin_module - Error manage_plugin_module reset (1)\");\n          response->status = 500;\n        }\n        json_decref(j_result2);\n      }\n      json_decref(j_result);\n    } else {\n      response->status = 400;\n    }\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_plugin_module - Error get_plugin_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_user_list (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_user_list;\n  size_t offset = 0, limit = GLEWLWYD_DEFAULT_LIMIT_SIZE;\n  long int l_converted = 0;\n  char * endptr = NULL;\n  \n  if (u_map_get(request->map_url, \"offset\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"offset\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      offset = (size_t)l_converted;\n    }\n  }\n  if (u_map_get(request->map_url, \"limit\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"limit\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      limit = (size_t)l_converted;\n    }\n  }\n  j_user_list = get_user_list(config, u_map_get(request->map_url, \"pattern\"), offset, limit, u_map_get(request->map_url, \"source\"));\n  if (check_result_value(j_user_list, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_user_list, \"user\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_user_list - Error get_user_list\");\n    response->status = 500;\n  }\n  json_decref(j_user_list);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_user (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_user;\n  \n  j_user = get_user(config, u_map_get(request->map_url, \"username\"), u_map_get(request->map_url, \"source\"));\n  if (check_result_value(j_user, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_user, \"user\"));\n  } else if (check_result_value(j_user, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_user - Error j_user\");\n    response->status = 500;\n  }\n  json_decref(j_user);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_add_user (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_user, * j_user_valid, * j_search_user, * j_body;\n  \n  j_user = ulfius_get_json_body_request(request, NULL);\n  if (j_user != NULL) {\n    j_user_valid = is_user_valid(config, NULL, j_user, 1, u_map_get(request->map_url, \"source\"));\n    if (check_result_value(j_user_valid, G_OK)) {\n      j_search_user = get_user(config, json_string_value(json_object_get(j_user, \"username\")), u_map_get(request->map_url, \"source\"));\n      if (check_result_value(j_search_user, G_ERROR_NOT_FOUND)) {\n        if (add_user(config, j_user, u_map_get(request->map_url, \"source\")) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_user - Error add_user\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' added\", json_string_value(json_object_get(j_user, \"username\")));\n        }\n      } else if (check_result_value(j_search_user, G_OK)) {\n        j_body = json_pack(\"{s[s]}\", \"error\", \"username already exists\");\n        ulfius_set_json_body_response(response, 400, j_body);\n        json_decref(j_body);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_user - Error get_user\");\n        response->status = 500;\n      }\n      json_decref(j_search_user);\n    } else if (check_result_value(j_user_valid, G_ERROR_PARAM)) {\n      if (json_object_get(j_user_valid, \"error\") != NULL) {\n        ulfius_set_json_body_response(response, 400, json_object_get(j_user_valid, \"error\"));\n      } else {\n        response->status = 400;\n      }\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_user - Error is_user_valid\");\n      response->status = 500;\n    }\n    json_decref(j_user_valid);\n  } else {\n    response->status = 400;\n  }\n  json_decref(j_user);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_set_user (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_user, * j_user_valid, * j_search_user;\n  \n  j_search_user = get_user(config, u_map_get(request->map_url, \"username\"), u_map_get(request->map_url, \"source\"));\n  if (check_result_value(j_search_user, G_OK)) {\n    j_user = ulfius_get_json_body_request(request, NULL);\n    if (j_user != NULL) {\n      j_user_valid = is_user_valid(config, u_map_get(request->map_url, \"username\"), j_user, 0, json_string_value(json_object_get(json_object_get(j_search_user, \"user\"), \"source\")));\n      if (check_result_value(j_user_valid, G_OK)) {\n        if (set_user(config, u_map_get(request->map_url, \"username\"), j_user, json_string_value(json_object_get(json_object_get(j_search_user, \"user\"), \"source\"))) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user - Error set_user\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' updated\", u_map_get(request->map_url, \"username\"));\n        }\n      } else if (check_result_value(j_user_valid, G_ERROR_PARAM)) {\n        if (json_object_get(j_user_valid, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_user_valid, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_user_valid, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user - Error is_user_valid\");\n        response->status = 500;\n      }\n      json_decref(j_user_valid);\n    } else {\n      response->status = 400;\n    }\n    json_decref(j_user);\n  } else if (check_result_value(j_search_user, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user - Error get_user\");\n    response->status = 500;\n  }\n  json_decref(j_search_user);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_delete_user (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_search_user;\n  \n  j_search_user = get_user(config, u_map_get(request->map_url, \"username\"), u_map_get(request->map_url, \"source\"));\n  if (check_result_value(j_search_user, G_OK)) {\n    if (delete_user(config, u_map_get(request->map_url, \"username\"), json_string_value(json_object_get(json_object_get(j_search_user, \"user\"), \"source\"))) != G_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_user - Error delete_user\");\n      response->status = 500;\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' removed\", u_map_get(request->map_url, \"username\"));\n    }\n  } else if (check_result_value(j_search_user, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_user - Error get_user\");\n    response->status = 500;\n  }\n  json_decref(j_search_user);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_client_list (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_client_list;\n  size_t offset = 0, limit = GLEWLWYD_DEFAULT_LIMIT_SIZE;\n  long int l_converted = 0;\n  char * endptr = NULL;\n  \n  if (u_map_get(request->map_url, \"offset\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"offset\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      offset = (size_t)l_converted;\n    }\n  }\n  if (u_map_get(request->map_url, \"limit\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"limit\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      limit = (size_t)l_converted;\n    }\n  }\n  j_client_list = get_client_list(config, u_map_get(request->map_url, \"pattern\"), offset, limit, u_map_get(request->map_url, \"source\"));\n  if (check_result_value(j_client_list, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_client_list, \"client\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_client_list - Error get_client_list\");\n    response->status = 500;\n  }\n  json_decref(j_client_list);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_client (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_client;\n  \n  j_client = get_client(config, u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"source\"));\n  if (check_result_value(j_client, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_client, \"client\"));\n  } else if (check_result_value(j_client, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_client - Error j_client\");\n    response->status = 500;\n  }\n  json_decref(j_client);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_add_client (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_client, * j_client_valid, * j_search_client, * j_body;\n  \n  j_client = ulfius_get_json_body_request(request, NULL);\n  if (j_client != NULL) {\n    j_client_valid = is_client_valid(config, NULL, j_client, 1, u_map_get(request->map_url, \"source\"));\n    if (check_result_value(j_client_valid, G_OK)) {\n      j_search_client = get_client(config, json_string_value(json_object_get(j_client, \"client_id\")), u_map_get(request->map_url, \"source\"));\n      if (check_result_value(j_search_client, G_ERROR_NOT_FOUND)) {\n        if (add_client(config, j_client, u_map_get(request->map_url, \"source\")) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_client - Error add_client\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - Client '%s' added\", json_string_value(json_object_get(j_client, \"client_id\")));\n        }\n      } else if (check_result_value(j_search_client, G_OK)) {\n        j_body = json_pack(\"{s[s]}\", \"error\", \"client_id already exists\");\n        ulfius_set_json_body_response(response, 400, j_body);\n        json_decref(j_body);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_client - Error get_client\");\n        response->status = 500;\n      }\n      json_decref(j_search_client);\n    } else if (check_result_value(j_client_valid, G_ERROR_PARAM)) {\n      if (json_object_get(j_client_valid, \"error\") != NULL) {\n        ulfius_set_json_body_response(response, 400, json_object_get(j_client_valid, \"error\"));\n      } else {\n        response->status = 400;\n      }\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_client - Error is_client_valid\");\n      response->status = 500;\n    }\n    json_decref(j_client_valid);\n  } else {\n    response->status = 400;\n  }\n  json_decref(j_client);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_set_client (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_client, * j_client_valid, * j_search_client;\n  \n  j_search_client = get_client(config, u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"source\"));\n  if (check_result_value(j_search_client, G_OK)) {\n    j_client = ulfius_get_json_body_request(request, NULL);\n    if (j_client != NULL) {\n      j_client_valid = is_client_valid(config, u_map_get(request->map_url, \"client_id\"), j_client, 0, json_string_value(json_object_get(json_object_get(j_search_client, \"client\"), \"source\")));\n      if (check_result_value(j_client_valid, G_OK)) {\n        if (set_client(config, u_map_get(request->map_url, \"client_id\"), j_client, json_string_value(json_object_get(json_object_get(j_search_client, \"client\"), \"source\"))) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_client - Error set_client\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - Client '%s' updated\", u_map_get(request->map_url, \"client_id\"));\n        }\n      } else if (check_result_value(j_client_valid, G_ERROR_PARAM)) {\n        if (json_object_get(j_client_valid, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_client_valid, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_client_valid, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_client - Error is_client_valid\");\n        response->status = 500;\n      }\n      json_decref(j_client_valid);\n    } else {\n      response->status = 400;\n    }\n    json_decref(j_client);\n  } else if (check_result_value(j_search_client, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_client - Error get_client\");\n    response->status = 500;\n  }\n  json_decref(j_search_client);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_delete_client (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_search_client;\n  \n  j_search_client = get_client(config, u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"source\"));\n  if (check_result_value(j_search_client, G_OK)) {\n    if (delete_client(config, u_map_get(request->map_url, \"client_id\"), json_string_value(json_object_get(json_object_get(j_search_client, \"client\"), \"source\"))) != G_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_client - Error delete_client\");\n      response->status = 500;\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event - Client '%s' removed\", u_map_get(request->map_url, \"client_id\"));\n    }\n  } else if (check_result_value(j_search_client, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_client - Error get_client\");\n    response->status = 500;\n  }\n  json_decref(j_search_client);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_scope_list (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_scope_list;\n  size_t offset = 0, limit = GLEWLWYD_DEFAULT_LIMIT_SIZE;\n  long int l_converted = 0;\n  char * endptr = NULL;\n  \n  if (u_map_get(request->map_url, \"offset\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"offset\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      offset = (size_t)l_converted;\n    }\n  }\n  if (u_map_get(request->map_url, \"limit\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"limit\"), &endptr, 10);\n    if (!(*endptr) && l_converted >= 0) {\n      limit = (size_t)l_converted;\n    }\n  }\n  j_scope_list = get_scope_list(config, u_map_get(request->map_url, \"pattern\"), offset, limit);\n  if (check_result_value(j_scope_list, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_scope_list, \"scope\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_scope_list - Error get_scope_list\");\n    response->status = 500;\n  }\n  json_decref(j_scope_list);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_scope (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_scope;\n  \n  j_scope = get_scope(config, u_map_get(request->map_url, \"scope\"));\n  if (check_result_value(j_scope, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_scope, \"scope\"));\n  } else if (check_result_value(j_scope, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_scope - Error get_scope\");\n    response->status = 500;\n  }\n  json_decref(j_scope);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_add_scope (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_scope, * j_scope_valid, * j_search_scope, * j_body;\n  \n  j_scope = ulfius_get_json_body_request(request, NULL);\n  if (j_scope != NULL) {\n    j_scope_valid = is_scope_valid(config, j_scope, 1);\n    if (check_result_value(j_scope_valid, G_OK)) {\n      j_search_scope = get_scope(config, json_string_value(json_object_get(j_scope, \"name\")));\n      if (check_result_value(j_search_scope, G_ERROR_NOT_FOUND)) {\n        if (add_scope(config, j_scope) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_scope - Error add_scope\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - Scope '%s' added\", json_string_value(json_object_get(j_scope, \"name\")));\n        }\n      } else if (check_result_value(j_search_scope, G_OK)) {\n        j_body = json_pack(\"{s[s]}\", \"error\", \"scope already exists\");\n        ulfius_set_json_body_response(response, 400, j_body);\n        json_decref(j_body);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_scope - Error get_scope\");\n        response->status = 500;\n      }\n      json_decref(j_search_scope);\n    } else if (check_result_value(j_scope_valid, G_ERROR_PARAM)) {\n      ulfius_set_json_body_response(response, 400, json_object_get(j_scope_valid, \"error\"));\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_scope - Error is_scope_valid\");\n      response->status = 500;\n    }\n    json_decref(j_scope_valid);\n  } else {\n    response->status = 400;\n  }\n  json_decref(j_scope);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_set_scope (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_scope, * j_scope_valid, * j_search_scope;\n  \n  j_search_scope = get_scope(config, u_map_get(request->map_url, \"scope\"));\n  if (check_result_value(j_search_scope, G_OK)) {\n    j_scope = ulfius_get_json_body_request(request, NULL);\n    if (j_scope != NULL) {\n      j_scope_valid = is_scope_valid(config, j_scope, 0);\n      if (check_result_value(j_scope_valid, G_OK)) {\n        if (set_scope(config, u_map_get(request->map_url, \"scope\"), j_scope) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_scope - Error set_scope\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - Scope '%s' updated\", u_map_get(request->map_url, \"scope\"));\n        }\n      } else if (check_result_value(j_scope_valid, G_ERROR_PARAM)) {\n        ulfius_set_json_body_response(response, 400, json_object_get(j_scope_valid, \"error\"));\n      } else if (!check_result_value(j_scope_valid, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_scope - Error is_scope_valid\");\n        response->status = 500;\n      }\n      json_decref(j_scope_valid);\n    } else {\n      response->status = 400;\n    }\n    json_decref(j_scope);\n  } else if (check_result_value(j_search_scope, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_scope - Error get_scope\");\n    response->status = 500;\n  }\n  json_decref(j_search_scope);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_delete_scope (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_search_scope;\n  \n  j_search_scope = get_scope(config, u_map_get(request->map_url, \"scope\"));\n  if (check_result_value(j_search_scope, G_OK)) {\n    if (delete_scope(config, u_map_get(request->map_url, \"scope\")) != G_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_scope - Error delete_scope\");\n      response->status = 500;\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event - Scope '%s' removed\", u_map_get(request->map_url, \"scope\"));\n    }\n  } else if (check_result_value(j_search_scope, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_scope - Error get_scope\");\n    response->status = 500;\n  }\n  json_decref(j_search_scope);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_get_profile (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_session;\n  char * session_uid, expires[129];\n  time_t now;\n  struct tm ts;\n  \n  time(&now);\n  now += GLEWLWYD_DEFAULT_SESSION_EXPIRATION_COOKIE;\n  gmtime_r(&now, &ts);\n  strftime(expires, 128, \"%a, %d %b %Y %T %Z\", &ts);\n  if (!o_strlen(u_map_get(request->map_url, \"username\"))) {\n    session_uid = get_session_id(config, request);\n    if (session_uid != NULL && o_strlen(session_uid)) {\n      j_session = get_users_for_session(config, session_uid);\n      if (check_result_value(j_session, G_OK)) {\n        ulfius_set_json_body_response(response, 200, json_object_get(j_session, \"session\"));\n        ulfius_add_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0);\n      } else if (check_result_value(j_session, G_ERROR_NOT_FOUND)) {\n        response->status = 401;\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_get_session - Error get_current_user_for_session\");\n        response->status = 500;\n      }\n      json_decref(j_session);\n    } else {\n      response->status = 401;\n    }\n    o_free(session_uid);\n  } else {\n    // Can't impersonate this endpoint\n    response->status = 400;\n  }\n  \n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_update_profile (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_profile, * j_result;\n\n  j_profile = ulfius_get_json_body_request(request, NULL);\n  if (j_profile != NULL && json_is_object(j_profile)) {\n    j_result = user_set_profile(config, json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), j_profile);\n    if (check_result_value(j_result, G_ERROR_PARAM)) {\n      if (json_object_get(j_result, \"error\") != NULL) {\n        ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n      } else {\n        response->status = 400;\n      }\n    } else if (!check_result_value(j_result, G_OK)) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_update_profile - Error user_set_profile\");\n      response->status = 500;\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' updated (profile)\", json_string_value(json_object_get((json_t *)response->shared_data, \"username\")));\n    }\n    json_decref(j_result);\n  } else {\n    response->status = 400;\n  }\n  json_decref(j_profile);\n  \n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_delete_profile (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  int ret = G_OK;\n  const char * username = json_string_value(json_object_get((json_t *)response->shared_data, \"username\"));\n  json_t * j_session, * j_cur_session;\n  char * session_uid = get_session_id(config, request);\n  size_t index;\n\n  j_session = get_current_user_for_session(config, session_uid);\n  if (check_result_value(j_session, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else if (!check_result_value(j_session, G_OK)) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_delete_profile - Error get_current_user_for_session\");\n    response->status = 500;\n  } else {\n    json_array_foreach(json_object_get(j_session, \"session\"), index, j_cur_session) {\n      if (0 == o_strcasecmp(username, json_string_value(json_object_get(j_cur_session, \"username\")))) {\n        if (delete_user_session_from_hash(config, json_string_value(json_object_get(j_cur_session, \"username\")), NULL) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_delete_profile - Error delete_user_session_from_hash\");\n          response->status = 500;\n          ret = G_ERROR;\n        } else {\n          if (user_session_delete(config, session_uid, json_string_value(json_object_get(j_cur_session, \"username\"))) != G_OK) {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_delete_profile - Error user_session_delete\");\n            response->status = 500;\n            ret = G_ERROR;\n          } else {\n            y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' removed (profile)\", json_string_value(json_object_get((json_t *)response->shared_data, \"username\")));\n          }\n        }\n      }\n    }\n    json_decref(j_session);\n    if (ret == G_OK) {\n      ret = user_delete_profile(config, username);\n      if (ret == G_ERROR_UNAUTHORIZED) {\n        response->status = 403;\n      } else if (ret != G_OK) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_delete_profile - Error user_delete_profile\");\n        response->status = 500;\n      }\n    }\n  }\n  o_free(session_uid);\n  \n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_update_password (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_session, * j_password, * j_element = NULL;\n  char * session_uid = get_session_id(config, request);\n  const char ** passwords = NULL;\n  int res;\n  struct _user_module_instance * user_module;\n  size_t index = 0;\n\n  if (session_uid != NULL && o_strlen(session_uid)) {\n    j_session = get_current_user_for_session(config, session_uid);\n    if (check_result_value(j_session, G_OK)) {\n      j_password = ulfius_get_json_body_request(request, NULL);\n      user_module = get_user_module_instance(config, json_string_value(json_object_get(json_object_get(j_session, \"user\"), \"source\")));\n      if (user_module && user_module->multiple_passwords) {\n        if (json_string_length(json_object_get(j_password, \"old_password\")) && json_is_array(json_object_get(j_password, \"password\"))) {\n          if ((passwords = o_malloc(json_array_size(json_object_get(j_password, \"password\")) * sizeof(char *))) != NULL) {\n            json_array_foreach(json_object_get(j_password, \"password\"), index, j_element) {\n              passwords[index] = json_string_value(j_element);\n            }\n            if ((res = user_update_password(config, json_string_value(json_object_get(json_object_get(j_session, \"user\"), \"username\")), json_string_value(json_object_get(j_password, \"old_password\")), passwords, json_array_size(json_object_get(j_password, \"password\")))) == G_ERROR_PARAM) {\n              response->status = 400;\n            } else if (res != G_OK) {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_update_password - Error user_update_password (1)\");\n              response->status = 500;\n            }\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_update_password - Error allocating resources for passwords (1)\");\n            response->status = 500;\n          }\n          o_free(passwords);\n        } else {\n          response->status = 400;\n        }\n      } else {\n        if (json_string_length(json_object_get(j_password, \"old_password\")) && json_string_length(json_object_get(j_password, \"password\"))) {\n          if ((passwords = o_malloc(sizeof(char *))) != NULL) {\n            passwords[0] = json_string_value(json_object_get(j_password, \"password\"));\n            if ((res = user_update_password(config, json_string_value(json_object_get(json_object_get(j_session, \"user\"), \"username\")), json_string_value(json_object_get(j_password, \"old_password\")), passwords, 1)) == G_ERROR_PARAM) {\n              response->status = 400;\n            } else if (res != G_OK) {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_update_password - Error user_update_password (2)\");\n              response->status = 500;\n            }\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_update_password - Error allocating resources for passwords (2)\");\n            response->status = 500;\n          }\n          o_free(passwords);\n        } else {\n          response->status = 400;\n        }\n      }\n      json_decref(j_password);\n    } else if (check_result_value(j_session, G_ERROR_NOT_FOUND)) {\n      response->status = 401;\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_update_password - Error get_current_user_for_session\");\n      response->status = 500;\n    }\n    json_decref(j_session);\n  } else {\n    response->status = 401;\n  }\n  o_free(session_uid);\n  \n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_get_client_grant_list (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_client_grant_list;\n  size_t offset = 0, limit = GLEWLWYD_DEFAULT_LIMIT_SIZE;\n  long int l_converted = 0;\n  char * endptr = NULL;\n  \n  if (u_map_get(request->map_url, \"offset\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"offset\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      offset = (size_t)l_converted;\n    }\n  }\n  if (u_map_get(request->map_url, \"limit\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"limit\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      limit = (size_t)l_converted;\n    }\n  }\n  j_client_grant_list = get_client_grant_list(config, json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), offset, limit);\n  if (check_result_value(j_client_grant_list, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_client_grant_list, \"client_grant\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_get_session_list - Error get_user_session_list\");\n    response->status = 500;\n  }\n  json_decref(j_client_grant_list);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_get_session_list (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_session_list;\n  size_t offset = 0, limit = GLEWLWYD_DEFAULT_LIMIT_SIZE;\n  long int l_converted = 0;\n  char * endptr = NULL, * sort = NULL;\n  \n  if (u_map_get(request->map_url, \"offset\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"offset\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      offset = (size_t)l_converted;\n    }\n  }\n  if (u_map_get(request->map_url, \"limit\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"limit\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      limit = (size_t)l_converted;\n    }\n  }\n  if (0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"session_hash\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"user_agent\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"issued_for\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"expiration\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"last_login\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"enabled\")) {\n    sort = msprintf(\"gpgr_%s%s\", u_map_get(request->map_url, \"sort\"), (u_map_get_case(request->map_url, \"desc\")!=NULL?\" DESC\":\" ASC\"));\n  }\n  j_session_list = get_user_session_list(config, json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), u_map_get(request->map_url, \"pattern\"), offset, limit, sort);\n  if (check_result_value(j_session_list, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_session_list, \"session\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_get_session_list - Error get_user_session_list\");\n    response->status = 500;\n  }\n  json_decref(j_session_list);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_get_plugin_list (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  UNUSED(request);\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_plugin_list = get_plugin_module_list_for_user(config);\n  \n  if (check_result_value(j_plugin_list, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_plugin_list, \"module\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_get_plugin_list - Error j_plugin_list\");\n    response->status = 500;\n  }\n  json_decref(j_plugin_list);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_delete_session (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  int res = delete_user_session_from_hash(config, json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), u_map_get(request->map_url, \"session_hash\"));\n  if (res == G_ERROR_NOT_FOUND) {\n    response->status = 404;\n  } else if (res != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_session - Error delete_user_session_from_hash\");\n    response->status = 500;\n  }\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_get_scheme_list (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  UNUSED(request);\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_scheme_list = get_scheme_list_for_user(config, json_string_value(json_object_get((json_t *)response->shared_data, \"username\"))), * j_element;\n  size_t index;\n  \n  if (check_result_value(j_scheme_list, G_OK)) {\n    json_array_foreach(json_object_get(j_scheme_list, \"scheme\"), index, j_element) {\n      json_object_del(j_element, \"parameters\");\n    }\n    ulfius_set_json_body_response(response, 200, json_object_get(j_scheme_list, \"scheme\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_get_scheme_list - Error get_scheme_list_for_user\");\n    response->status = 500;\n  }\n  json_decref(j_scheme_list);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_api_key_list (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_api_key_list;\n  size_t offset = 0, limit = GLEWLWYD_DEFAULT_LIMIT_SIZE;\n  long int l_converted = 0;\n  char * endptr = NULL;\n  \n  if (u_map_get(request->map_url, \"offset\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"offset\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      offset = (size_t)l_converted;\n    }\n  }\n  if (u_map_get(request->map_url, \"limit\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"limit\"), &endptr, 10);\n    if (!(*endptr) && l_converted >= 0) {\n      limit = (size_t)l_converted;\n    }\n  }\n  j_api_key_list = get_api_key_list(config, u_map_get(request->map_url, \"pattern\"), offset, limit);\n  if (check_result_value(j_api_key_list, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_api_key_list, \"api_key\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_api_key_list - Error get_api_key_list\");\n    response->status = 500;\n  }\n  json_decref(j_api_key_list);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_add_api_key (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  const char * issued_for = get_ip_source(request), * username = json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), * user_agent = u_map_get_case(request->map_header, \"user-agent\");\n  json_t * j_api_key = generate_api_key(config, username, issued_for, user_agent);\n  \n  if (check_result_value(j_api_key, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_api_key, \"api_key\"));\n    y_log_message(Y_LOG_LEVEL_INFO, \"Event - API key created for user '%s'\", username);\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_api_key - Error generate_api_key\");\n    response->status = 500;\n  }\n  json_decref(j_api_key);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_delete_api_key (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  \n  if (disable_api_key(config, u_map_get(request->map_url, \"key_hash\")) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_api_key - Error disable_api_key\");\n    response->status = 500;\n  } else {\n    y_log_message(Y_LOG_LEVEL_INFO, \"Event - API key disabled by user '%s'\", json_string_value(json_object_get((json_t *)response->shared_data, \"username\")));\n  }\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_metrics (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  UNUSED(request);\n  struct config_elements * config = (struct config_elements *)user_data;\n  size_t i, j;\n  char * content = o_strdup(\"# We have seen handsome noble-looking men but I have never seen a man like the one who now stands at the entrance of the gate.\\n\");\n  struct _glwd_metric * metric;\n  \n  if (!pthread_mutex_lock(&config->metrics_lock)) {\n    u_map_put(response->map_header, ULFIUS_HTTP_HEADER_CONTENT, \"text/plain; charset=utf-8\");\n    for (i=0; i<pointer_list_size(&config->metrics_list); i++) {\n      metric = (struct _glwd_metric *)pointer_list_get_at(&config->metrics_list, i);\n      content = mstrcatf(content, \"# HELP %s_total %s\\n\", metric->name, metric->help);\n      content = mstrcatf(content, \"# TYPE %s_total counter\\n\", metric->name);\n      for (j=0; j<metric->data_size; j++) {\n        if (metric->data[j].label != NULL) {\n          content = mstrcatf(content, \"%s_total{%s} %zu\\n\", metric->name, metric->data[j].label, metric->data[j].counter);\n        } else {\n          content = mstrcatf(content, \"%s_total %zu\\n\", metric->name, metric->data[j].counter);\n        }\n      }\n    }\n    ulfius_set_string_body_response(response, 200, content);\n    o_free(content);\n    pthread_mutex_unlock(&config->metrics_lock);\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_metrics - Error lock\");\n    response->status = 500;\n  }\n  return U_CALLBACK_CONTINUE;\n}\n"], "fixing_code": ["/**\n *\n * Glewlwyd SSO Server\n *\n * Authentiation server\n * Users are authenticated via various backend available: database, ldap\n * Using various authentication methods available: password, OTP, send code, etc.\n * \n * Callback functions definition\n *\n * Copyright 2016-2021 Nicolas Mora <mail@babelouest.org>\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU GENERAL PUBLIC LICENSE\n * License as published by the Free Software Foundation;\n * version 3 of the License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU GENERAL PUBLIC LICENSE for more details.\n *\n * You should have received a copy of the GNU General Public\n * License along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n#include <string.h>\n\n#include \"glewlwyd.h\"\n\nint callback_glewlwyd_options (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  UNUSED(request);\n  UNUSED(user_data);\n  ulfius_add_header_to_response(response, \"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\");\n  ulfius_add_header_to_response(response, \"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Bearer, Authorization\");\n  ulfius_add_header_to_response(response, \"Access-Control-Max-Age\", \"1800\");\n  return U_CALLBACK_COMPLETE;\n}\n\nint callback_glewlwyd_server_configuration (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  UNUSED(request);\n  \n  json_t * json_body = json_pack(\"{ssssssss}\", \n                                 \"api_prefix\", \n                                 ((struct config_elements *)user_data)->api_prefix,\n                                 \"admin_scope\",\n                                 ((struct config_elements *)user_data)->admin_scope,\n                                 \"profile_scope\",\n                                 ((struct config_elements *)user_data)->profile_scope,\n                                 \"delete_profile\",\n                                 ((struct config_elements *)user_data)->delete_profile==GLEWLWYD_PROFILE_DELETE_UNAUTHORIZED?\"no\":\"yes\");\n  ulfius_set_json_body_response(response, 200, json_body);\n  json_decref(json_body);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_default (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  UNUSED(request);\n  UNUSED(user_data);\n  json_t * json_body = json_pack(\"{ssss}\", \"error\", \"resource not found\", \"message\", \"no resource available at this address\");\n  ulfius_set_json_body_response(response, 404, json_body);\n  json_decref(json_body);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_404_if_necessary (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  UNUSED(user_data);\n  if (!request->callback_position) {\n    response->status = 404;\n  }\n  return U_CALLBACK_COMPLETE;\n}\n\nint callback_glewlwyd_check_user_profile_valid (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  char * session_uid;\n  json_t * j_user;\n  int ret, res;\n  \n  if ((session_uid = get_session_id(config, request)) != NULL) {\n    j_user = get_current_user_for_session(config, session_uid);\n    if (check_result_value(j_user, G_OK) && json_object_get(json_object_get(j_user, \"user\"), \"enabled\") == json_true()) {\n      if ((res = is_scope_list_valid_for_session(config, config->profile_scope, session_uid)) == G_OK) {\n        if (ulfius_set_response_shared_data(response, json_deep_copy(json_object_get(j_user, \"user\")), (void (*)(void *))&json_decref) != U_OK) {\n          ret = U_CALLBACK_ERROR;\n        } else {\n          ret = U_CALLBACK_IGNORE;\n        }\n      } else {\n        if (res == G_ERROR) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_check_user_session - Error is_scope_list_valid_for_session\");\n        }\n        ret = U_CALLBACK_UNAUTHORIZED;\n      }\n    } else {\n      ret = U_CALLBACK_UNAUTHORIZED;\n    }\n    json_decref(j_user);\n  } else {\n    ret = U_CALLBACK_UNAUTHORIZED;\n  }\n  o_free(session_uid);\n  return ret;\n}\n\nint callback_glewlwyd_check_user_session (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  char * session_uid;\n  json_t * j_user;\n  int ret;\n  \n  if ((session_uid = get_session_id(config, request)) != NULL) {\n    j_user = get_current_user_for_session(config, session_uid);\n    if (check_result_value(j_user, G_OK) && json_object_get(json_object_get(j_user, \"user\"), \"enabled\") == json_true()) {\n      if (ulfius_set_response_shared_data(response, json_deep_copy(json_object_get(j_user, \"user\")), (void (*)(void *))&json_decref) != U_OK) {\n        ret = U_CALLBACK_ERROR;\n      } else {\n        ret = U_CALLBACK_IGNORE;\n      }\n    } else {\n      ret = U_CALLBACK_UNAUTHORIZED;\n    }\n    json_decref(j_user);\n  } else {\n    ret = U_CALLBACK_UNAUTHORIZED;\n  }\n  o_free(session_uid);\n  return ret;\n}\n\nint callback_glewlwyd_check_admin_session (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  char * session_uid;\n  json_t * j_user;\n  int ret, res;\n  \n  if ((session_uid = get_session_id(config, request)) != NULL) {\n    j_user = get_current_user_for_session(config, session_uid);\n    if (check_result_value(j_user, G_OK) && json_object_get(json_object_get(j_user, \"user\"), \"enabled\") == json_true()) {\n      if ((res = is_scope_list_valid_for_session(config, config->admin_scope, session_uid)) == G_OK) {\n        if (ulfius_set_response_shared_data(response, json_deep_copy(json_object_get(j_user, \"user\")), (void (*)(void *))&json_decref) != U_OK) {\n          ret = U_CALLBACK_ERROR;\n        } else {\n          ret = U_CALLBACK_IGNORE;\n        }\n      } else {\n        if (res == G_ERROR) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_check_admin_session - Error is_scope_list_valid_for_session\");\n        }\n        ret = U_CALLBACK_UNAUTHORIZED;\n      }\n    } else {\n      ret = U_CALLBACK_UNAUTHORIZED;\n    }\n    json_decref(j_user);\n  } else {\n    ret = U_CALLBACK_UNAUTHORIZED;\n  }\n  o_free(session_uid);\n  return ret;\n}\n\nint callback_glewlwyd_check_admin_session_or_api_key (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  char * session_uid = NULL;\n  json_t * j_user;\n  int ret, res;\n  const char * api_key = u_map_get_case(request->map_header, GLEWLWYD_API_KEY_HEADER_KEY), * ip_source = get_ip_source(request);\n  \n  if (NULL != api_key && 0 == o_strncmp(GLEWLWYD_API_KEY_HEADER_PREFIX, api_key, o_strlen(GLEWLWYD_API_KEY_HEADER_PREFIX))) {\n    if ((res = verify_api_key(config, api_key + o_strlen(GLEWLWYD_API_KEY_HEADER_PREFIX))) == G_OK) {\n      if (ulfius_set_response_shared_data(response, json_pack(\"{so}\", \"username\", json_null()), (void (*)(void *))&json_decref) != U_OK) {\n        ret = U_CALLBACK_ERROR;\n      } else {\n        ret = U_CALLBACK_IGNORE;\n      }\n    } else if (res == G_ERROR_UNAUTHORIZED) {\n      y_log_message(Y_LOG_LEVEL_WARNING, \"Security - API key invalid at IP Address %s\", ip_source);\n      ret = U_CALLBACK_UNAUTHORIZED;\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_check_admin_session_or_api_key - Error verify_api_key\");\n      ret = U_CALLBACK_ERROR;\n    }\n  } else if ((session_uid = get_session_id(config, request)) != NULL) {\n    j_user = get_current_user_for_session(config, session_uid);\n    if (check_result_value(j_user, G_OK) && json_object_get(json_object_get(j_user, \"user\"), \"enabled\") == json_true()) {\n      if ((res = is_scope_list_valid_for_session(config, config->admin_scope, session_uid)) == G_OK) {\n        if (ulfius_set_response_shared_data(response, json_deep_copy(json_object_get(j_user, \"user\")), (void (*)(void *))&json_decref) != U_OK) {\n          ret = U_CALLBACK_ERROR;\n        } else {\n          ret = U_CALLBACK_IGNORE;\n        }\n      } else {\n        if (res == G_ERROR) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_check_admin_session_or_api_key - Error is_scope_list_valid_for_session\");\n        }\n        ret = U_CALLBACK_UNAUTHORIZED;\n      }\n    } else {\n      ret = U_CALLBACK_UNAUTHORIZED;\n    }\n    json_decref(j_user);\n    o_free(session_uid);\n  } else {\n    ret = U_CALLBACK_UNAUTHORIZED;\n  }\n  return ret;\n}\n\nint callback_glewlwyd_check_admin_session_delegate (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  char * session_uid;\n  json_t * j_user, * j_delegate;\n  int ret;\n  \n  if ((session_uid = get_session_id(config, request)) != NULL) {\n    j_user = get_current_user_for_session(config, session_uid);\n    if (check_result_value(j_user, G_OK) && json_object_get(json_object_get(j_user, \"user\"), \"enabled\") == json_true()) {\n      if (is_scope_list_valid_for_session(config, config->admin_scope, session_uid) == G_OK) {\n        j_delegate = get_user(config, u_map_get(request->map_url, \"username\"), NULL);\n        if (check_result_value(j_delegate, G_OK)) {\n          if (ulfius_set_response_shared_data(response, json_deep_copy(json_object_get(j_delegate, \"user\")), (void (*)(void *))&json_decref) != U_OK) {\n            ret = U_CALLBACK_ERROR;\n          } else {\n            ret = U_CALLBACK_IGNORE;\n          }\n        } else {\n          ret = U_CALLBACK_UNAUTHORIZED;\n        }\n        json_decref(j_delegate);\n      } else {\n        ret = U_CALLBACK_UNAUTHORIZED;\n      }\n    } else {\n      ret = U_CALLBACK_UNAUTHORIZED;\n    }\n    json_decref(j_user);\n  } else {\n    ret = U_CALLBACK_UNAUTHORIZED;\n  }\n  o_free(session_uid);\n  return ret;\n}\n\nint callback_glewlwyd_user_auth (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_param = ulfius_get_json_body_request(request, NULL), * j_result = NULL;\n  const char * ip_source = get_ip_source(request);\n  char * issued_for = get_client_hostname(request);\n  char * session_uid, expires[129];\n  time_t now;\n  struct tm ts;\n  \n  time(&now);\n  now += GLEWLWYD_DEFAULT_SESSION_EXPIRATION_COOKIE;\n  gmtime_r(&now, &ts);\n  strftime(expires, 128, \"%a, %d %b %Y %T %Z\", &ts);\n  if (j_param != NULL) {\n    if (json_string_length(json_object_get(j_param, \"username\"))) {\n      if (json_object_get(j_param, \"scheme_type\") == NULL || 0 == o_strcmp(json_string_value(json_object_get(j_param, \"scheme_type\")), \"password\")) {\n        if (json_string_length(json_object_get(j_param, \"password\"))) {\n          j_result = auth_check_user_credentials(config, json_string_value(json_object_get(j_param, \"username\")), json_string_value(json_object_get(j_param, \"password\")));\n          if (check_result_value(j_result, G_OK)) {\n            if ((session_uid = get_session_id(config, request)) == NULL) {\n              session_uid = generate_session_id();\n            }\n            if (user_session_update(config, session_uid, u_map_get_case(request->map_header, \"user-agent\"), issued_for, json_string_value(json_object_get(j_param, \"username\")), NULL, 1) != G_OK) {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error user_session_update (1)\");\n              response->status = 500;\n            } else {\n              ulfius_add_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0);\n              y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' authenticated with password\", json_string_value(json_object_get(j_param, \"username\")));\n            }\n            o_free(session_uid);\n            glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_VALID, 1, NULL);\n            glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 1, \"scheme_type\", \"password\", NULL);\n          } else {\n            if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {\n              y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for username %s at IP Address %s\", json_string_value(json_object_get(j_param, \"username\")), ip_source);\n            }\n            response->status = 401;\n            glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_INVALID, 1, NULL);\n            glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 1, \"scheme_type\", \"password\", NULL);\n          }\n          json_decref(j_result);\n        } else if (json_object_get(j_param, \"password\") != NULL && !json_is_string(json_object_get(j_param, \"password\"))) {\n          ulfius_set_string_body_response(response, 400, \"password must be a string\");\n        } else {\n          session_uid = get_session_id(config, request);\n          j_result = get_users_for_session(config, session_uid);\n          if (check_result_value(j_result, G_OK)) {\n            // Refresh username to set as default\n            if (user_session_update(config, u_map_get(request->map_cookie, config->session_key), u_map_get_case(request->map_header, \"user-agent\"), issued_for, json_string_value(json_object_get(j_param, \"username\")), NULL, 0) != G_OK) {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error user_session_update (3)\");\n              response->status = 500;\n            } else {\n              ulfius_add_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0);\n            }\n          } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n            response->status = 401;\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error get_users_for_session\");\n            response->status = 500;\n          }\n          o_free(session_uid);\n          json_decref(j_result);\n        }\n      } else {\n        if (json_string_length(json_object_get(j_param, \"scheme_type\")) && json_string_length(json_object_get(j_param, \"scheme_name\")) && json_is_object(json_object_get(j_param, \"value\"))) {\n          j_result = auth_check_user_scheme(config, json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")), json_string_value(json_object_get(j_param, \"username\")), json_object_get(j_param, \"value\"), request);\n          if (check_result_value(j_result, G_ERROR_PARAM)) {\n            ulfius_set_string_body_response(response, 400, \"bad scheme response\");\n          } else if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {\n            y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for username %s at IP Address %s\", json_string_value(json_object_get(j_param, \"username\")), ip_source);\n            response->status = 401;\n            glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_INVALID, 1, NULL);\n            glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 1, \"scheme_type\", json_string_value(json_object_get(j_param, \"scheme_type\")), \"scheme_name\", json_string_value(json_object_get(j_param, \"scheme_name\")), NULL);\n          } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n            response->status = 404;\n          } else if (check_result_value(j_result, G_OK)) {\n            if ((session_uid = get_session_id(config, request)) == NULL) {\n              session_uid = generate_session_id();\n            }\n            if (user_session_update(config, session_uid, u_map_get_case(request->map_header, \"user-agent\"), issued_for, json_string_value(json_object_get(j_param, \"username\")), json_string_value(json_object_get(j_param, \"scheme_name\")), 1) != G_OK) {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error user_session_update (4)\");\n              response->status = 500;\n            } else {\n              ulfius_add_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0);\n              y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' authenticated with scheme '%s/%s'\", json_string_value(json_object_get(j_param, \"username\")), json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")));\n            }\n            o_free(session_uid);\n            glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_VALID, 1, NULL);\n            glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 1, \"scheme_type\", json_string_value(json_object_get(j_param, \"scheme_type\")), \"scheme_name\", json_string_value(json_object_get(j_param, \"scheme_name\")), NULL);\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error auth_check_user_scheme\");\n            response->status = 500;\n          }\n          json_decref(j_result);\n        } else {\n          ulfius_set_string_body_response(response, 400, \"scheme_type, scheme_name and value are mandatory\");\n        }\n      }\n    } else {\n      if (json_string_length(json_object_get(j_param, \"scheme_type\")) && json_string_length(json_object_get(j_param, \"scheme_name\")) && json_is_object(json_object_get(j_param, \"value\"))) {\n        j_result = auth_check_identify_scheme(config, json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")), json_object_get(j_param, \"value\"), request);\n        if (check_result_value(j_result, G_ERROR_PARAM)) {\n          ulfius_set_string_body_response(response, 400, \"bad scheme response\");\n        } else if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {\n          y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for username <UNKNOWN> at IP Address %s\", ip_source);\n          response->status = 401;\n        } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n          response->status = 404;\n        } else if (check_result_value(j_result, G_OK)) {\n          if ((session_uid = get_session_id(config, request)) == NULL) {\n            session_uid = generate_session_id();\n          }\n          if (user_session_update(config, session_uid, u_map_get_case(request->map_header, \"user-agent\"), issued_for, json_string_value(json_object_get(j_result, \"username\")), json_string_value(json_object_get(j_param, \"scheme_name\")), 1) != G_OK) {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error user_session_update (4)\");\n            response->status = 500;\n          } else {\n            ulfius_add_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0);\n            y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' authenticated with scheme '%s/%s'\", json_string_value(json_object_get(j_result, \"username\")), json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")));\n          }\n          o_free(session_uid);\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error auth_check_user_scheme\");\n          response->status = 500;\n        }\n        json_decref(j_result);\n      } else {\n        ulfius_set_string_body_response(response, 400, \"username is mandatory\");\n      }\n    }\n  } else {\n    ulfius_set_string_body_response(response, 400, \"Input parameters must be in JSON format\");\n  }\n  json_decref(j_param);\n  o_free(issued_for);\n\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_auth_trigger (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_param = ulfius_get_json_body_request(request, NULL), * j_result = NULL;\n\n  if (j_param != NULL) {\n    if (json_string_length(json_object_get(j_param, \"scheme_type\")) && json_string_length(json_object_get(j_param, \"scheme_name\"))) {\n      if (json_string_length(json_object_get(j_param, \"username\"))) {\n        j_result = auth_trigger_user_scheme(config, json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")), json_string_value(json_object_get(j_param, \"username\")), json_object_get(j_param, \"value\"), request);\n        if (check_result_value(j_result, G_ERROR_PARAM)) {\n          ulfius_set_string_body_response(response, 400, \"bad scheme response\");\n        } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n          response->status = 404;\n        } else if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {\n          response->status = 401;\n        } else if (check_result_value(j_result, G_OK)) {\n          if (json_object_get(j_result, \"trigger\") != NULL) {\n            ulfius_set_json_body_response(response, 200, json_object_get(j_result, \"trigger\"));\n          }\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth_trigger - Error auth_trigger_user_scheme\");\n          response->status = 500;\n        }\n        json_decref(j_result);\n      } else {\n        j_result = auth_trigger_identify_scheme(config, json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")), json_object_get(j_param, \"value\"), request);\n        if (check_result_value(j_result, G_ERROR_PARAM)) {\n          ulfius_set_string_body_response(response, 400, \"bad scheme response\");\n        } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n          response->status = 404;\n        } else if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {\n          response->status = 401;\n        } else if (check_result_value(j_result, G_OK)) {\n          if (json_object_get(j_result, \"trigger\") != NULL) {\n            ulfius_set_json_body_response(response, 200, json_object_get(j_result, \"trigger\"));\n          }\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth_trigger - Error auth_trigger_identify_scheme\");\n          response->status = 500;\n        }\n        json_decref(j_result);\n      }\n    } else {\n      ulfius_set_string_body_response(response, 400, \"scheme is mandatory\");\n    }\n  } else {\n    ulfius_set_string_body_response(response, 400, \"Input parameters must be in JSON format\");\n  }\n  json_decref(j_param);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_auth_register (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_param = ulfius_get_json_body_request(request, NULL), * j_result = NULL;\n\n  if (j_param != NULL) {\n    if (json_object_get(j_param, \"username\") != NULL && json_is_string(json_object_get(j_param, \"username\")) && json_string_length(json_object_get(j_param, \"username\"))) {\n      if (0 == o_strcasecmp(json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), json_string_value(json_object_get(j_param, \"username\")))) {\n        if (json_object_get(j_param, \"scheme_type\") != NULL && json_is_string(json_object_get(j_param, \"scheme_type\")) && json_string_length(json_object_get(j_param, \"scheme_type\")) && json_object_get(j_param, \"scheme_name\") != NULL && json_is_string(json_object_get(j_param, \"scheme_name\")) && json_string_length(json_object_get(j_param, \"scheme_name\"))) {\n          j_result = auth_register_user_scheme(config, json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")), json_string_value(json_object_get(j_param, \"username\")), 0, json_object_get(j_param, \"value\"), request);\n          if (check_result_value(j_result, G_ERROR_PARAM)) {\n            if (json_object_get(j_result, \"register\") != NULL) {\n              ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"register\"));\n            } else {\n              ulfius_set_string_body_response(response, 400, \"bad scheme response\");\n            }\n          } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n            response->status = 404;\n          } else if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {\n            response->status = 401;\n          } else if (check_result_value(j_result, G_OK)) {\n            if (json_object_get(j_result, \"register\") != NULL) {\n              ulfius_set_json_body_response(response, 200, json_object_get(j_result, \"register\"));\n            }\n            y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' registered scheme '%s/%s'\", json_string_value(json_object_get(j_param, \"username\")), json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")));\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth_register - Error auth_check_user_scheme\");\n            response->status = 500;\n          }\n          json_decref(j_result);\n        } else {\n          ulfius_set_string_body_response(response, 400, \"scheme is mandatory\");\n        }\n      } else {\n        ulfius_set_string_body_response(response, 400, \"username invalid\");\n      }\n    } else {\n      ulfius_set_string_body_response(response, 400, \"username is mandatory\");\n    }\n  } else {\n    ulfius_set_string_body_response(response, 400, \"Input parameters must be in JSON format\");\n  }\n  json_decref(j_param);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_auth_register_get (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_param = ulfius_get_json_body_request(request, NULL), * j_result = NULL;\n\n  if (j_param != NULL) {\n    if (json_object_get(j_param, \"username\") != NULL && json_string_length(json_object_get(j_param, \"username\"))) {\n      if (0 == o_strcasecmp(json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), json_string_value(json_object_get(j_param, \"username\")))) {\n        if (json_object_get(j_param, \"scheme_type\") != NULL && json_string_length(json_object_get(j_param, \"scheme_type\")) && json_object_get(j_param, \"scheme_name\") != NULL && json_string_length(json_object_get(j_param, \"scheme_name\"))) {\n          j_result = auth_register_get_user_scheme(config, json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")), json_string_value(json_object_get(j_param, \"username\")), request);\n          if (check_result_value(j_result, G_ERROR_PARAM)) {\n            ulfius_set_string_body_response(response, 400, \"bad scheme response\");\n          } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n            response->status = 404;\n          } else if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {\n            response->status = 401;\n          } else if (check_result_value(j_result, G_OK)) {\n            if (json_object_get(j_result, \"register\") != NULL) {\n              ulfius_set_json_body_response(response, 200, json_object_get(j_result, \"register\"));\n            }\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth_register_get - Error auth_register_get_user_scheme\");\n            response->status = 500;\n          }\n          json_decref(j_result);\n        } else {\n          ulfius_set_string_body_response(response, 400, \"scheme is mandatory\");\n        }\n      } else {\n        ulfius_set_string_body_response(response, 400, \"username invalid\");\n      }\n    } else {\n      ulfius_set_string_body_response(response, 400, \"username is mandatory\");\n    }\n  } else {\n    ulfius_set_string_body_response(response, 400, \"Input parameters must be in JSON format\");\n  }\n  json_decref(j_param);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_scheme_check_forbid_profile (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_param = ulfius_get_json_body_request(request, NULL), * j_scheme = get_user_auth_scheme_module(config, json_string_value(json_object_get(j_param, \"scheme_name\")));\n  int ret = U_CALLBACK_CONTINUE;\n  \n  if (check_result_value(j_scheme, G_OK)) {\n    if (json_object_get(json_object_get(j_scheme, \"module\"), \"forbid_user_profile\") == json_true()) {\n      response->status = 403;\n      ret = U_CALLBACK_COMPLETE;\n    }\n  } else if (check_result_value(j_scheme, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_scheme_check_forbid_profile - Error auth_register_get_user_scheme\");\n    response->status = 500;\n  }\n  json_decref(j_param);\n  json_decref(j_scheme);\n  return ret;\n}\n\nint callback_glewlwyd_user_auth_register_delegate (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_param = ulfius_get_json_body_request(request, NULL), * j_result = NULL;\n\n  if (j_param != NULL) {\n    if (json_object_get(j_param, \"username\") != NULL && json_is_string(json_object_get(j_param, \"username\")) && json_string_length(json_object_get(j_param, \"username\"))) {\n      if (0 == o_strcasecmp(json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), json_string_value(json_object_get(j_param, \"username\")))) {\n        if (json_object_get(j_param, \"scheme_type\") != NULL && json_is_string(json_object_get(j_param, \"scheme_type\")) && json_string_length(json_object_get(j_param, \"scheme_type\")) && json_object_get(j_param, \"scheme_name\") != NULL && json_is_string(json_object_get(j_param, \"scheme_name\")) && json_string_length(json_object_get(j_param, \"scheme_name\"))) {\n          j_result = auth_register_user_scheme(config, json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")), json_string_value(json_object_get(j_param, \"username\")), 1, json_object_get(j_param, \"value\"), request);\n          if (check_result_value(j_result, G_ERROR_PARAM)) {\n            if (json_object_get(j_result, \"register\") != NULL) {\n              ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"register\"));\n            } else {\n              ulfius_set_string_body_response(response, 400, \"bad scheme response\");\n            }\n          } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n            response->status = 404;\n          } else if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {\n            response->status = 401;\n          } else if (check_result_value(j_result, G_OK)) {\n            if (json_object_get(j_result, \"register\") != NULL) {\n              ulfius_set_json_body_response(response, 200, json_object_get(j_result, \"register\"));\n            }\n            y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' registered scheme '%s/%s' (delegation)\", json_string_value(json_object_get(j_param, \"username\")), json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")));\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth_register_delegate - Error auth_check_user_scheme\");\n            response->status = 500;\n          }\n          json_decref(j_result);\n        } else {\n          ulfius_set_string_body_response(response, 400, \"scheme is mandatory\");\n        }\n      } else {\n        ulfius_set_string_body_response(response, 400, \"username invalid\");\n      }\n    } else {\n      ulfius_set_string_body_response(response, 400, \"username is mandatory\");\n    }\n  } else {\n    ulfius_set_string_body_response(response, 400, \"Input parameters must be in JSON format\");\n  }\n  json_decref(j_param);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_auth_register_get_delegate (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_param = ulfius_get_json_body_request(request, NULL), * j_result = NULL;\n\n  if (j_param != NULL) {\n    if (json_object_get(j_param, \"username\") != NULL && json_string_length(json_object_get(j_param, \"username\"))) {\n      if (0 == o_strcasecmp(json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), json_string_value(json_object_get(j_param, \"username\")))) {\n        if (json_object_get(j_param, \"scheme_type\") != NULL && json_string_length(json_object_get(j_param, \"scheme_type\")) && json_object_get(j_param, \"scheme_name\") != NULL && json_string_length(json_object_get(j_param, \"scheme_name\"))) {\n          j_result = auth_register_get_user_scheme(config, json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")), json_string_value(json_object_get(j_param, \"username\")), request);\n          if (check_result_value(j_result, G_ERROR_PARAM)) {\n            ulfius_set_string_body_response(response, 400, \"bad scheme response\");\n          } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n            response->status = 404;\n          } else if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {\n            response->status = 401;\n          } else if (check_result_value(j_result, G_OK)) {\n            if (json_object_get(j_result, \"register\") != NULL) {\n              ulfius_set_json_body_response(response, 200, json_object_get(j_result, \"register\"));\n            }\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth_register_get_delegate - Error auth_register_get_user_scheme\");\n            response->status = 500;\n          }\n          json_decref(j_result);\n        } else {\n          ulfius_set_string_body_response(response, 400, \"scheme is mandatory\");\n        }\n      } else {\n        ulfius_set_string_body_response(response, 400, \"username invalid\");\n      }\n    } else {\n      ulfius_set_string_body_response(response, 400, \"username is mandatory\");\n    }\n  } else {\n    ulfius_set_string_body_response(response, 400, \"Input parameters must be in JSON format\");\n  }\n  json_decref(j_param);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_delete_session (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_session, * j_cur_session;\n  char * session_uid = get_session_id(config, request), expires[129];\n  size_t index;\n  time_t now;\n  struct tm ts;\n  \n  time(&now);\n  now += GLEWLWYD_DEFAULT_SESSION_EXPIRATION_COOKIE;\n  gmtime_r(&now, &ts);\n  strftime(expires, 128, \"%a, %d %b %Y %T %Z\", &ts);\n  if (session_uid != NULL && o_strlen(session_uid)) {\n    j_session = get_users_for_session(config, session_uid);\n    if (check_result_value(j_session, G_ERROR_NOT_FOUND)) {\n      response->status = 404;\n    } else if (!check_result_value(j_session, G_OK)) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_delete_session - Error get_current_user_for_session\");\n      response->status = 500;\n    } else {\n      if (u_map_get(request->map_url, \"username\") != NULL) {\n        json_array_foreach(json_object_get(j_session, \"session\"), index, j_cur_session) {\n          if (0 == o_strcasecmp(u_map_get(request->map_url, \"username\"), json_string_value(json_object_get(j_cur_session, \"username\")))) {\n            if (user_session_delete(config, session_uid, u_map_get(request->map_url, \"username\")) != G_OK) {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_delete_session - Error user_session_delete\");\n              response->status = 500;\n            }\n          }\n        }\n        if (json_array_size(json_object_get(j_session, \"session\")) == 1) {\n          // Delete session cookie on the client browser\n          ulfius_add_cookie_to_response(response, config->session_key, \"\", expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0);\n        } else {\n          ulfius_add_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0);\n        }\n      } else {\n        if (user_session_delete(config, session_uid, NULL) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_delete_session - Error user_session_delete\");\n          response->status = 500;\n        }\n        // Delete session cookie on the client browser\n        ulfius_add_cookie_to_response(response, config->session_key, \"\", expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0);\n      }\n    }\n    json_decref(j_session);\n  } else {\n    response->status = 401;\n  }\n  o_free(session_uid);\n  \n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_get_schemes_from_scopes (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_result;\n  char * session_uid = get_session_id(config, request);\n\n  if (u_map_get(request->map_url, \"scope\") != NULL) {\n    j_result = get_validated_auth_scheme_list_from_scope_list(config, u_map_get(request->map_url, \"scope\"), session_uid);\n    if (check_result_value(j_result, G_OK)) {\n      ulfius_set_json_body_response(response, 200, json_object_get(j_result, \"scheme\"));\n    } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n      response->status = 404;\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_get_schemes_from_scopes - Error get_validated_auth_scheme_list_from_scope_list\");\n      response->status = 500;\n    }\n    json_decref(j_result);\n  } else {\n    response->status = 400;\n  }\n  o_free(session_uid);\n  \n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_user_session_scope_grant (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_user = (json_t *)response->shared_data, * j_scope_list;\n  \n  if (config != NULL && j_user != NULL) {\n    j_scope_list = get_granted_scopes_for_client(config, j_user, u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope_list\"));\n    if (check_result_value(j_scope_list, G_OK)) {\n      ulfius_set_json_body_response(response, 200, json_object_get(j_scope_list, \"grant\"));\n    } else if (check_result_value(j_scope_list, G_ERROR_NOT_FOUND)) {\n      response->status = 404;\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_user_session_scope_grant - Error get_granted_scopes_for_client\");\n      response->status = 500;\n    }\n    json_decref(j_scope_list);\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_user_session_scope_grant - Error config or j_user is NULL\");\n    response->status = 500;\n  }\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_set_user_session_scope_grant (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_user = (json_t *)response->shared_data, * j_body = ulfius_get_json_body_request(request, NULL), * j_client;\n  int res;\n  \n  if (config != NULL && j_user != NULL) {\n    if (json_object_get(j_body, \"scope\") != NULL && json_is_string(json_object_get(j_body, \"scope\"))) {\n      j_client = get_client(config, u_map_get(request->map_url, \"client_id\"), NULL);\n      if (check_result_value(j_client, G_OK) && json_object_get(json_object_get(j_client, \"client\"), \"enabled\") == json_true()) {\n        res = set_granted_scopes_for_client(config, j_user, u_map_get(request->map_url, \"client_id\"), json_string_value(json_object_get(j_body, \"scope\")));\n        if (res == G_ERROR_NOT_FOUND) {\n          response->status = 404;\n        } else if (res == G_ERROR_PARAM) {\n          response->status = 400;\n        } else if (res == G_ERROR_UNAUTHORIZED) {\n          response->status = 401;\n        } else if (res != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_session_scope_grant - Error set_granted_scopes_for_client\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' granted scope list '%s' for client '%s'\", json_string_value(json_object_get(j_user, \"username\")), json_string_value(json_object_get(j_body, \"scope\")), u_map_get(request->map_url, \"client_id\"));\n        }\n      } else if (check_result_value(j_client, G_ERROR_NOT_FOUND) || json_object_get(json_object_get(j_client, \"client\"), \"enabled\") != json_true()) {\n        response->status = 404;\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_session_scope_grant - Error get_client\");\n        response->status = 500;\n      }\n      json_decref(j_client);\n    } else {\n      response->status = 400;\n    }\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_session_scope_grant - Error config or j_user is NULL\");\n    response->status = 500;\n  }\n  json_decref(j_body);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_module_type_list (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  UNUSED(request);\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_module_type;\n  \n  j_module_type = get_module_type_list(config);\n  if (check_result_value(j_module_type, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module_type, \"module\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_module_type_list - Error get_module_type_list\");\n    response->status = 500;\n  }\n  json_decref(j_module_type);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_reload_modules (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  UNUSED(request);\n\n  close_user_module_instance_list(config);\n  close_user_module_list(config);\n  \n  close_user_middleware_module_instance_list(config);\n  close_user_middleware_module_list(config);\n  \n  close_client_module_instance_list(config);\n  close_client_module_list(config);\n  \n  close_user_auth_scheme_module_instance_list(config);\n  close_user_auth_scheme_module_list(config);\n  \n  close_plugin_module_instance_list(config);\n  close_plugin_module_list(config);\n  \n  // Initialize user modules\n  if (init_user_module_list(config) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"Error initializing user modules\");\n    response->status = 500;\n  }\n  if (load_user_module_instance_list(config) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"Error loading user modules instances\");\n    response->status = 500;\n  }\n\n  // Initialize user modules\n  if (init_user_middleware_module_list(config) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"Error initializing user middleware modules\");\n    response->status = 500;\n  }\n  if (load_user_middleware_module_instance_list(config) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"Error loading user middleware modules instances\");\n    response->status = 500;\n  }\n\n  // Initialize client modules\n  if (init_client_module_list(config) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"Error initializing client modules\");\n    response->status = 500;\n  }\n  if (load_client_module_instance_list(config) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"Error loading client modules instances\");\n    response->status = 500;\n  }\n\n  // Initialize user auth scheme modules\n  if (init_user_auth_scheme_module_list(config) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"Error initializing user auth scheme modules\");\n    response->status = 500;\n  }\n  if (load_user_auth_scheme_module_instance_list(config) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"Error loading user auth scheme modules instances\");\n    response->status = 500;\n  }\n\n  // Initialize plugins\n  if (init_plugin_module_list(config) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"Error initializing plugins modules\");\n    response->status = 500;\n  }\n  if (load_plugin_module_instance_list(config) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"Error loading plugins modules instances\");\n    response->status = 500;\n  }\n\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_user_module_list (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  UNUSED(request);\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_module;\n  \n  j_module = get_user_module_list(config);\n  if (check_result_value(j_module, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module, \"module\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_user_module_list - Error get_user_module_list\");\n    response->status = 500;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_user_module (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_module;\n  \n  j_module = get_user_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_module, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module, \"module\"));\n  } else if (check_result_value(j_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_user_module - Error get_user_module\");\n    response->status = 500;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_add_user_module (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_module, * j_module_valid, * j_result;\n  \n  j_module = ulfius_get_json_body_request(request, NULL);\n  if (j_module != NULL) {\n    j_module_valid = is_user_module_valid(config, j_module, 1);\n    if (check_result_value(j_module_valid, G_OK)) {\n      j_result = add_user_module(config, j_module);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_user_module - Error add_user_module\");\n        response->status = 500;\n      } else {\n        y_log_message(Y_LOG_LEVEL_INFO, \"Event - User backend module '%s' added (%s)\", json_string_value(json_object_get(j_module, \"name\")), json_string_value(json_object_get(j_module, \"module\")));\n      }\n      json_decref(j_result);\n    } else if (check_result_value(j_module_valid, G_ERROR_PARAM)) {\n      if (json_object_get(j_module_valid, \"error\") != NULL) {\n        ulfius_set_json_body_response(response, 400, json_object_get(j_module_valid, \"error\"));\n      } else {\n        response->status = 400;\n      }\n    } else if (!check_result_value(j_module_valid, G_OK)) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_user_module - Error is_user_module_valid\");\n      response->status = 500;\n    }\n    json_decref(j_module_valid);\n  } else {\n    response->status = 400;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_set_user_module (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_module, * j_module_valid, * j_search_module;\n  \n  j_search_module = get_user_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    j_module = ulfius_get_json_body_request(request, NULL);\n    if (j_module != NULL) {\n      json_object_del(j_module, \"enabled\");\n      j_module_valid = is_user_module_valid(config, j_module, 0);\n      if (check_result_value(j_module_valid, G_OK)) {\n        if (set_user_module(config, u_map_get(request->map_url, \"name\"), j_module) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_module - Error set_user_module\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - User backend module '%s' updated\", u_map_get(request->map_url, \"name\"));\n        }\n      } else if (check_result_value(j_module_valid, G_ERROR_PARAM)) {\n        if (json_object_get(j_module_valid, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_module_valid, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_module_valid, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_module - Error is_user_module_valid\");\n        response->status = 500;\n      }\n      json_decref(j_module_valid);\n    } else {\n      response->status = 400;\n    }\n    json_decref(j_module);\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_module - Error get_user_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_delete_user_module (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_search_module;\n  \n  j_search_module = get_user_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    if (delete_user_module(config, u_map_get(request->map_url, \"name\")) != G_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_user_module - Error delete_user_module\");\n      response->status = 500;\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event - User backend module '%s' removed\", u_map_get(request->map_url, \"name\"));\n    }\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_user_module - Error get_user_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_manage_user_module (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_search_module, * j_result, * j_result2;\n  \n  j_search_module = get_user_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    if (0 == o_strcmp(\"enable\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_user_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_START);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_module - Error manage_user_module enable\");\n        response->status = 500;\n      }\n      json_decref(j_result);\n    } else if (0 == o_strcmp(\"disable\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_user_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_STOP);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_module - Error manage_user_module disable\");\n        response->status = 500;\n      }\n      json_decref(j_result);\n    } else if (0 == o_strcmp(\"reset\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_user_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_STOP);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_module - Error manage_user_module reset (1)\");\n        response->status = 500;\n      } else {\n        j_result2 = manage_user_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_START);\n        if (check_result_value(j_result2, G_ERROR_PARAM)) {\n          if (json_object_get(j_result2, \"error\") != NULL) {\n            ulfius_set_json_body_response(response, 400, json_object_get(j_result2, \"error\"));\n          } else {\n            response->status = 400;\n          }\n        } else if (!check_result_value(j_result2, G_OK)) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_module - Error manage_user_module reset (2)\");\n          response->status = 500;\n        }\n        json_decref(j_result2);\n      }\n      json_decref(j_result);\n    } else {\n      response->status = 400;\n    }\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_module - Error get_user_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_user_middleware_module_list (const struct _u_request * request, struct _u_response * response, void * user_middleware_data) {\n  UNUSED(request);\n  struct config_elements * config = (struct config_elements *)user_middleware_data;\n  json_t * j_module;\n  \n  j_module = get_user_middleware_module_list(config);\n  if (check_result_value(j_module, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module, \"module\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_user_middleware_module_list - Error get_user_middleware_module_list\");\n    response->status = 500;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_user_middleware_module (const struct _u_request * request, struct _u_response * response, void * user_middleware_data) {\n  struct config_elements * config = (struct config_elements *)user_middleware_data;\n  json_t * j_module;\n  \n  j_module = get_user_middleware_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_module, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module, \"module\"));\n  } else if (check_result_value(j_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_user_middleware_module - Error get_user_middleware_module\");\n    response->status = 500;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_add_user_middleware_module (const struct _u_request * request, struct _u_response * response, void * user_middleware_data) {\n  struct config_elements * config = (struct config_elements *)user_middleware_data;\n  json_t * j_module, * j_module_valid, * j_result;\n  \n  j_module = ulfius_get_json_body_request(request, NULL);\n  if (j_module != NULL) {\n    j_module_valid = is_user_middleware_module_valid(config, j_module, 1);\n    if (check_result_value(j_module_valid, G_OK)) {\n      j_result = add_user_middleware_module(config, j_module);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_user_middleware_module - Error add_user_middleware_module\");\n        response->status = 500;\n      } else {\n        y_log_message(Y_LOG_LEVEL_INFO, \"Event - User backend module '%s' added (%s)\", json_string_value(json_object_get(j_module, \"name\")), json_string_value(json_object_get(j_module, \"module\")));\n      }\n      json_decref(j_result);\n    } else if (check_result_value(j_module_valid, G_ERROR_PARAM)) {\n      if (json_object_get(j_module_valid, \"error\") != NULL) {\n        ulfius_set_json_body_response(response, 400, json_object_get(j_module_valid, \"error\"));\n      } else {\n        response->status = 400;\n      }\n    } else if (!check_result_value(j_module_valid, G_OK)) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_user_middleware_module - Error is_user_middleware_module_valid\");\n      response->status = 500;\n    }\n    json_decref(j_module_valid);\n  } else {\n    response->status = 400;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_set_user_middleware_module (const struct _u_request * request, struct _u_response * response, void * user_middleware_data) {\n  struct config_elements * config = (struct config_elements *)user_middleware_data;\n  json_t * j_module, * j_module_valid, * j_search_module;\n  \n  j_search_module = get_user_middleware_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    j_module = ulfius_get_json_body_request(request, NULL);\n    if (j_module != NULL) {\n      json_object_del(j_module, \"enabled\");\n      j_module_valid = is_user_middleware_module_valid(config, j_module, 0);\n      if (check_result_value(j_module_valid, G_OK)) {\n        if (set_user_middleware_module(config, u_map_get(request->map_url, \"name\"), j_module) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_middleware_module - Error set_user_middleware_module\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - User backend module '%s' updated\", u_map_get(request->map_url, \"name\"));\n        }\n      } else if (check_result_value(j_module_valid, G_ERROR_PARAM)) {\n        if (json_object_get(j_module_valid, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_module_valid, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_module_valid, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_middleware_module - Error is_user_middleware_module_valid\");\n        response->status = 500;\n      }\n      json_decref(j_module_valid);\n    } else {\n      response->status = 400;\n    }\n    json_decref(j_module);\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_middleware_module - Error get_user_middleware_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_delete_user_middleware_module (const struct _u_request * request, struct _u_response * response, void * user_middleware_data) {\n  struct config_elements * config = (struct config_elements *)user_middleware_data;\n  json_t * j_search_module;\n  \n  j_search_module = get_user_middleware_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    if (delete_user_middleware_module(config, u_map_get(request->map_url, \"name\")) != G_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_user_middleware_module - Error delete_user_middleware_module\");\n      response->status = 500;\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event - User backend module '%s' removed\", u_map_get(request->map_url, \"name\"));\n    }\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_user_middleware_module - Error get_user_middleware_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_manage_user_middleware_module (const struct _u_request * request, struct _u_response * response, void * user_middleware_data) {\n  struct config_elements * config = (struct config_elements *)user_middleware_data;\n  json_t * j_search_module, * j_result, * j_result2;\n  \n  j_search_module = get_user_middleware_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    if (0 == o_strcmp(\"enable\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_user_middleware_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_START);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_middleware_module - Error manage_user_middleware_module enable\");\n        response->status = 500;\n      }\n      json_decref(j_result);\n    } else if (0 == o_strcmp(\"disable\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_user_middleware_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_STOP);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_middleware_module - Error manage_user_middleware_module disable\");\n        response->status = 500;\n      }\n      json_decref(j_result);\n    } else if (0 == o_strcmp(\"reset\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_user_middleware_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_STOP);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_middleware_module - Error manage_user_middleware_module reset (1)\");\n        response->status = 500;\n      } else {\n        j_result2 = manage_user_middleware_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_START);\n        if (check_result_value(j_result2, G_ERROR_PARAM)) {\n          if (json_object_get(j_result2, \"error\") != NULL) {\n            ulfius_set_json_body_response(response, 400, json_object_get(j_result2, \"error\"));\n          } else {\n            response->status = 400;\n          }\n        } else if (!check_result_value(j_result2, G_OK)) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_middleware_module - Error manage_user_middleware_module reset (2)\");\n          response->status = 500;\n        }\n        json_decref(j_result2);\n      }\n      json_decref(j_result);\n    } else {\n      response->status = 400;\n    }\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_middleware_module - Error get_user_middleware_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_user_auth_scheme_module_list (const struct _u_request * request, struct _u_response * response, void * user_auth_scheme_data) {\n  UNUSED(request);\n  struct config_elements * config = (struct config_elements *)user_auth_scheme_data;\n  json_t * j_module;\n  \n  j_module = get_user_auth_scheme_module_list(config);\n  if (check_result_value(j_module, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module, \"module\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_user_auth_scheme_module_list - Error get_user_auth_scheme_module_list\");\n    response->status = 500;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_user_auth_scheme_module (const struct _u_request * request, struct _u_response * response, void * user_auth_scheme_data) {\n  struct config_elements * config = (struct config_elements *)user_auth_scheme_data;\n  json_t * j_module;\n  \n  j_module = get_user_auth_scheme_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_module, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module, \"module\"));\n  } else if (check_result_value(j_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_user_auth_scheme_module - Error get_user_auth_scheme_module\");\n    response->status = 500;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_add_user_auth_scheme_module (const struct _u_request * request, struct _u_response * response, void * user_auth_scheme_data) {\n  struct config_elements * config = (struct config_elements *)user_auth_scheme_data;\n  json_t * j_module, * j_module_valid, * j_result;\n  \n  j_module = ulfius_get_json_body_request(request, NULL);\n  if (j_module != NULL) {\n    j_module_valid = is_user_auth_scheme_module_valid(config, j_module, 1);\n    if (check_result_value(j_module_valid, G_OK)) {\n      j_result = add_user_auth_scheme_module(config, j_module);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_user_auth_scheme_module - Error add_user_auth_scheme_module\");\n        response->status = 500;\n      } else {\n        y_log_message(Y_LOG_LEVEL_INFO, \"Event - User auth scheme module '%s' added (%s)\", json_string_value(json_object_get(j_module, \"name\")), json_string_value(json_object_get(j_module, \"module\")));\n      }\n      json_decref(j_result);\n    } else if (check_result_value(j_module_valid, G_ERROR_PARAM)) {\n      if (json_object_get(j_module_valid, \"error\") != NULL) {\n        ulfius_set_json_body_response(response, 400, json_object_get(j_module_valid, \"error\"));\n      } else {\n        response->status = 400;\n      }\n    } else if (!check_result_value(j_module_valid, G_OK)) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_user_auth_scheme_module - Error is_user_auth_scheme_module_valid\");\n      response->status = 500;\n    }\n    json_decref(j_module_valid);\n  } else {\n    response->status = 400;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_set_user_auth_scheme_module (const struct _u_request * request, struct _u_response * response, void * user_auth_scheme_data) {\n  struct config_elements * config = (struct config_elements *)user_auth_scheme_data;\n  json_t * j_module, * j_module_valid, * j_search_module;\n  \n  j_search_module = get_user_auth_scheme_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    j_module = ulfius_get_json_body_request(request, NULL);\n    if (j_module != NULL) {\n      json_object_del(j_module, \"enabled\");\n      j_module_valid = is_user_auth_scheme_module_valid(config, j_module, 0);\n      if (check_result_value(j_module_valid, G_OK)) {\n        if (set_user_auth_scheme_module(config, u_map_get(request->map_url, \"name\"), j_module) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_auth_scheme_module - Error set_user_auth_scheme_module\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - User auth scheme module '%s' updated\", u_map_get(request->map_url, \"name\"));\n        }\n      } else if (check_result_value(j_module_valid, G_ERROR_PARAM)) {\n        if (json_object_get(j_module_valid, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_module_valid, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_module_valid, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_auth_scheme_module - Error is_user_auth_scheme_module_valid\");\n        response->status = 500;\n      }\n      json_decref(j_module_valid);\n    } else {\n      response->status = 400;\n    }\n    json_decref(j_module);\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user_auth_scheme_module - Error get_user_auth_scheme_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_delete_user_auth_scheme_module (const struct _u_request * request, struct _u_response * response, void * user_auth_scheme_data) {\n  struct config_elements * config = (struct config_elements *)user_auth_scheme_data;\n  json_t * j_search_module;\n  \n  j_search_module = get_user_auth_scheme_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    if (delete_user_auth_scheme_module(config, u_map_get(request->map_url, \"name\")) != G_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_user_auth_scheme_module - Error delete_user_auth_scheme_module\");\n      response->status = 500;\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event - User auth scheme module '%s' removed\", u_map_get(request->map_url, \"name\"));\n    }\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_user_auth_scheme_module - Error get_user_auth_scheme_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_manage_user_auth_scheme_module (const struct _u_request * request, struct _u_response * response, void * user_auth_scheme_data) {\n  struct config_elements * config = (struct config_elements *)user_auth_scheme_data;\n  json_t * j_search_module, * j_result, * j_result2;\n  \n  j_search_module = get_user_auth_scheme_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    if (0 == o_strcmp(\"enable\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_user_auth_scheme_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_START);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_auth_scheme_module - Error manage_user_auth_scheme_module enable\");\n        response->status = 500;\n      }\n      json_decref(j_result);\n    } else if (0 == o_strcmp(\"disable\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_user_auth_scheme_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_STOP);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_auth_scheme_module - Error manage_user_auth_scheme_module disable\");\n        response->status = 500;\n      }\n      json_decref(j_result);\n    } else if (0 == o_strcmp(\"reset\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_user_auth_scheme_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_STOP);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_auth_scheme_module - Error manage_user_auth_scheme_module reset (1)\");\n        response->status = 500;\n      } else {\n        j_result2 = manage_user_auth_scheme_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_START);\n        if (check_result_value(j_result2, G_ERROR_PARAM)) {\n          if (json_object_get(j_result2, \"error\") != NULL) {\n            ulfius_set_json_body_response(response, 400, json_object_get(j_result2, \"error\"));\n          } else {\n            response->status = 400;\n          }\n        } else if (!check_result_value(j_result, G_OK)) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_auth_scheme_module - Error manage_user_auth_scheme_module reset (2)\");\n          response->status = 500;\n        }\n        json_decref(j_result2);\n      }\n      json_decref(j_result);\n    } else {\n      response->status = 400;\n    }\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_user_auth_scheme_module - Error get_user_auth_scheme_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_client_module_list (const struct _u_request * request, struct _u_response * response, void * client_data) {\n  UNUSED(request);\n  struct config_elements * config = (struct config_elements *)client_data;\n  json_t * j_module;\n  \n  j_module = get_client_module_list(config);\n  if (check_result_value(j_module, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module, \"module\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_client_module_list - Error get_client_module_list\");\n    response->status = 500;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_client_module (const struct _u_request * request, struct _u_response * response, void * client_data) {\n  struct config_elements * config = (struct config_elements *)client_data;\n  json_t * j_module;\n  \n  j_module = get_client_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_module, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module, \"module\"));\n  } else if (check_result_value(j_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_client_module - Error get_client_module\");\n    response->status = 500;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_add_client_module (const struct _u_request * request, struct _u_response * response, void * client_data) {\n  struct config_elements * config = (struct config_elements *)client_data;\n  json_t * j_module, * j_module_valid, * j_result;\n  \n  j_module = ulfius_get_json_body_request(request, NULL);\n  if (j_module != NULL) {\n    j_module_valid = is_client_module_valid(config, j_module, 1);\n    if (check_result_value(j_module_valid, G_OK)) {\n      j_result = add_client_module(config, j_module);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_client_module - Error add_client_module\");\n        response->status = 500;\n      } else {\n        y_log_message(Y_LOG_LEVEL_INFO, \"Event - Client backend module '%s' added (%s)\", json_string_value(json_object_get(j_module, \"name\")), json_string_value(json_object_get(j_module, \"module\")));\n      }\n      json_decref(j_result);\n    } else if (check_result_value(j_module_valid, G_ERROR_PARAM)) {\n      if (json_object_get(j_module_valid, \"error\") != NULL) {\n        ulfius_set_json_body_response(response, 400, json_object_get(j_module_valid, \"error\"));\n      } else {\n        response->status = 400;\n      }\n    } else if (!check_result_value(j_module_valid, G_OK)) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_client_module - Error is_client_module_valid\");\n      response->status = 500;\n    }\n    json_decref(j_module_valid);\n  } else {\n    response->status = 400;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_set_client_module (const struct _u_request * request, struct _u_response * response, void * client_data) {\n  struct config_elements * config = (struct config_elements *)client_data;\n  json_t * j_module, * j_module_valid, * j_search_module;\n  \n  j_search_module = get_client_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    j_module = ulfius_get_json_body_request(request, NULL);\n    if (j_module != NULL) {\n      json_object_del(j_module, \"enabled\");\n      j_module_valid = is_client_module_valid(config, j_module, 0);\n      if (check_result_value(j_module_valid, G_OK)) {\n        if (set_client_module(config, u_map_get(request->map_url, \"name\"), j_module) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_client_module - Error set_client_module\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - Client backend module '%s' updated\", u_map_get(request->map_url, \"name\"));\n        }\n      } else if (check_result_value(j_module_valid, G_ERROR_PARAM)) {\n        if (json_object_get(j_module_valid, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_module_valid, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_module_valid, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_client_module - Error is_client_module_valid\");\n        response->status = 500;\n      }\n      json_decref(j_module_valid);\n    } else {\n      response->status = 400;\n    }\n    json_decref(j_module);\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_client_module - Error get_client_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_delete_client_module (const struct _u_request * request, struct _u_response * response, void * client_data) {\n  struct config_elements * config = (struct config_elements *)client_data;\n  json_t * j_search_module;\n  \n  j_search_module = get_client_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    if (delete_client_module(config, u_map_get(request->map_url, \"name\")) != G_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_client_module - Error delete_client_module\");\n      response->status = 500;\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event - Client backend module '%s' removed\", u_map_get(request->map_url, \"name\"));\n    }\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_client_module - Error get_client_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_manage_client_module (const struct _u_request * request, struct _u_response * response, void * client_data) {\n  struct config_elements * config = (struct config_elements *)client_data;\n  json_t * j_search_module, * j_result, * j_result2;\n  \n  j_search_module = get_client_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    if (0 == o_strcmp(\"enable\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_client_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_START);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_client_module - Error manage_client_module enable\");\n        response->status = 500;\n      }\n      json_decref(j_result);\n    } else if (0 == o_strcmp(\"disable\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_client_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_STOP);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_client_module - Error manage_client_module disable\");\n        response->status = 500;\n      }\n      json_decref(j_result);\n    } else if (0 == o_strcmp(\"reset\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_client_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_STOP);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_client_module - Error manage_client_module reset (1)\");\n        response->status = 500;\n      } else {\n        j_result2 = manage_client_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_START);\n        if (check_result_value(j_result2, G_ERROR_PARAM)) {\n          if (json_object_get(j_result2, \"error\") != NULL) {\n            ulfius_set_json_body_response(response, 400, json_object_get(j_result2, \"error\"));\n          } else {\n            response->status = 400;\n          }\n        } else if (!check_result_value(j_result2, G_OK)) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_client_module - Error manage_client_module reset (2)\");\n          response->status = 500;\n        }\n        json_decref(j_result2);\n      }\n      json_decref(j_result);\n    } else {\n      response->status = 400;\n    }\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_client_module - Error get_client_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_plugin_module_list (const struct _u_request * request, struct _u_response * response, void * plugin_data) {\n  UNUSED(request);\n  struct config_elements * config = (struct config_elements *)plugin_data;\n  json_t * j_module;\n  \n  j_module = get_plugin_module_list(config);\n  if (check_result_value(j_module, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module, \"module\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_plugin_module_list - Error get_plugin_module_list\");\n    response->status = 500;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_plugin_module (const struct _u_request * request, struct _u_response * response, void * plugin_data) {\n  struct config_elements * config = (struct config_elements *)plugin_data;\n  json_t * j_module;\n  \n  j_module = get_plugin_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_module, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_module, \"module\"));\n  } else if (check_result_value(j_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_plugin_module - Error get_plugin_module\");\n    response->status = 500;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_add_plugin_module (const struct _u_request * request, struct _u_response * response, void * plugin_data) {\n  struct config_elements * config = (struct config_elements *)plugin_data;\n  json_t * j_module, * j_module_valid, * j_result;\n  \n  j_module = ulfius_get_json_body_request(request, NULL);\n  if (j_module != NULL) {\n    j_module_valid = is_plugin_module_valid(config, j_module, 1);\n    if (check_result_value(j_module_valid, G_OK)) {\n      j_result = add_plugin_module(config, j_module);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_plugin_module - Error add_plugin_module\");\n        response->status = 500;\n      } else {\n        y_log_message(Y_LOG_LEVEL_INFO, \"Event - Plugin module '%s' added (%s)\", json_string_value(json_object_get(j_module, \"name\")), json_string_value(json_object_get(j_module, \"module\")));\n      }\n      json_decref(j_result);\n    } else if (check_result_value(j_module_valid, G_ERROR_PARAM)) {\n      if (json_object_get(j_module_valid, \"error\") != NULL) {\n        ulfius_set_json_body_response(response, 400, json_object_get(j_module_valid, \"error\"));\n      } else {\n        response->status = 400;\n      }\n    } else if (!check_result_value(j_module_valid, G_OK)) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_plugin_module - Error is_plugin_module_valid\");\n      response->status = 500;\n    }\n    json_decref(j_module_valid);\n  } else {\n    response->status = 400;\n  }\n  json_decref(j_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_set_plugin_module (const struct _u_request * request, struct _u_response * response, void * plugin_data) {\n  struct config_elements * config = (struct config_elements *)plugin_data;\n  json_t * j_module, * j_module_valid, * j_search_module;\n  \n  j_search_module = get_plugin_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    j_module = ulfius_get_json_body_request(request, NULL);\n    if (j_module != NULL) {\n      json_object_del(j_module, \"enabled\");\n      j_module_valid = is_plugin_module_valid(config, j_module, 0);\n      if (check_result_value(j_module_valid, G_OK)) {\n        if (set_plugin_module(config, u_map_get(request->map_url, \"name\"), j_module) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_plugin_module - Error set_plugin_module\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - Plugin module '%s' updated\", u_map_get(request->map_url, \"name\"));\n        }\n      } else if (check_result_value(j_module_valid, G_ERROR_PARAM)) {\n        if (json_object_get(j_module_valid, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_module_valid, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_module_valid, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_plugin_module - Error is_plugin_module_valid\");\n        response->status = 500;\n      }\n      json_decref(j_module_valid);\n    } else {\n      response->status = 400;\n    }\n    json_decref(j_module);\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_plugin_module - Error get_plugin_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_delete_plugin_module (const struct _u_request * request, struct _u_response * response, void * plugin_data) {\n  struct config_elements * config = (struct config_elements *)plugin_data;\n  json_t * j_search_module;\n  \n  j_search_module = get_plugin_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    if (delete_plugin_module(config, u_map_get(request->map_url, \"name\")) != G_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_plugin_module - Error delete_plugin_module\");\n      response->status = 500;\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event - Plugin module '%s' removed\", u_map_get(request->map_url, \"name\"));\n    }\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_plugin_module - Error get_plugin_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_manage_plugin_module (const struct _u_request * request, struct _u_response * response, void * plugin_data) {\n  struct config_elements * config = (struct config_elements *)plugin_data;\n  json_t * j_search_module, * j_result, * j_result2;\n  \n  j_search_module = get_plugin_module(config, u_map_get(request->map_url, \"name\"));\n  if (check_result_value(j_search_module, G_OK)) {\n    if (0 == o_strcmp(\"enable\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_plugin_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_START);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_plugin_module - Error manage_plugin_module enable\");\n        response->status = 500;\n      }\n      json_decref(j_result);\n    } else if (0 == o_strcmp(\"disable\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_plugin_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_STOP);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_plugin_module - Error manage_plugin_module disable\");\n        response->status = 500;\n      }\n      json_decref(j_result);\n    } else if (0 == o_strcmp(\"reset\", u_map_get(request->map_url, \"action\"))) {\n      j_result = manage_plugin_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_STOP);\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        if (json_object_get(j_result, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_plugin_module - Error manage_plugin_module reset (1)\");\n        response->status = 500;\n      } else {\n        j_result2 = manage_plugin_module(config, u_map_get(request->map_url, \"name\"), GLEWLWYD_MODULE_ACTION_START);\n        if (check_result_value(j_result2, G_ERROR_PARAM)) {\n          if (json_object_get(j_result2, \"error\") != NULL) {\n            ulfius_set_json_body_response(response, 400, json_object_get(j_result2, \"error\"));\n          } else {\n            response->status = 400;\n          }\n        } else if (!check_result_value(j_result2, G_OK)) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_plugin_module - Error manage_plugin_module reset (1)\");\n          response->status = 500;\n        }\n        json_decref(j_result2);\n      }\n      json_decref(j_result);\n    } else {\n      response->status = 400;\n    }\n  } else if (check_result_value(j_search_module, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_manage_plugin_module - Error get_plugin_module\");\n    response->status = 500;\n  }\n  json_decref(j_search_module);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_user_list (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_user_list;\n  size_t offset = 0, limit = GLEWLWYD_DEFAULT_LIMIT_SIZE;\n  long int l_converted = 0;\n  char * endptr = NULL;\n  \n  if (u_map_get(request->map_url, \"offset\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"offset\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      offset = (size_t)l_converted;\n    }\n  }\n  if (u_map_get(request->map_url, \"limit\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"limit\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      limit = (size_t)l_converted;\n    }\n  }\n  j_user_list = get_user_list(config, u_map_get(request->map_url, \"pattern\"), offset, limit, u_map_get(request->map_url, \"source\"));\n  if (check_result_value(j_user_list, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_user_list, \"user\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_user_list - Error get_user_list\");\n    response->status = 500;\n  }\n  json_decref(j_user_list);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_user (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_user;\n  \n  j_user = get_user(config, u_map_get(request->map_url, \"username\"), u_map_get(request->map_url, \"source\"));\n  if (check_result_value(j_user, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_user, \"user\"));\n  } else if (check_result_value(j_user, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_user - Error j_user\");\n    response->status = 500;\n  }\n  json_decref(j_user);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_add_user (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_user, * j_user_valid, * j_search_user, * j_body;\n  \n  j_user = ulfius_get_json_body_request(request, NULL);\n  if (j_user != NULL) {\n    j_user_valid = is_user_valid(config, NULL, j_user, 1, u_map_get(request->map_url, \"source\"));\n    if (check_result_value(j_user_valid, G_OK)) {\n      j_search_user = get_user(config, json_string_value(json_object_get(j_user, \"username\")), u_map_get(request->map_url, \"source\"));\n      if (check_result_value(j_search_user, G_ERROR_NOT_FOUND)) {\n        if (add_user(config, j_user, u_map_get(request->map_url, \"source\")) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_user - Error add_user\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' added\", json_string_value(json_object_get(j_user, \"username\")));\n        }\n      } else if (check_result_value(j_search_user, G_OK)) {\n        j_body = json_pack(\"{s[s]}\", \"error\", \"username already exists\");\n        ulfius_set_json_body_response(response, 400, j_body);\n        json_decref(j_body);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_user - Error get_user\");\n        response->status = 500;\n      }\n      json_decref(j_search_user);\n    } else if (check_result_value(j_user_valid, G_ERROR_PARAM)) {\n      if (json_object_get(j_user_valid, \"error\") != NULL) {\n        ulfius_set_json_body_response(response, 400, json_object_get(j_user_valid, \"error\"));\n      } else {\n        response->status = 400;\n      }\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_user - Error is_user_valid\");\n      response->status = 500;\n    }\n    json_decref(j_user_valid);\n  } else {\n    response->status = 400;\n  }\n  json_decref(j_user);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_set_user (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_user, * j_user_valid, * j_search_user;\n  \n  j_search_user = get_user(config, u_map_get(request->map_url, \"username\"), u_map_get(request->map_url, \"source\"));\n  if (check_result_value(j_search_user, G_OK)) {\n    j_user = ulfius_get_json_body_request(request, NULL);\n    if (j_user != NULL) {\n      j_user_valid = is_user_valid(config, u_map_get(request->map_url, \"username\"), j_user, 0, json_string_value(json_object_get(json_object_get(j_search_user, \"user\"), \"source\")));\n      if (check_result_value(j_user_valid, G_OK)) {\n        if (set_user(config, u_map_get(request->map_url, \"username\"), j_user, json_string_value(json_object_get(json_object_get(j_search_user, \"user\"), \"source\"))) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user - Error set_user\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' updated\", u_map_get(request->map_url, \"username\"));\n        }\n      } else if (check_result_value(j_user_valid, G_ERROR_PARAM)) {\n        if (json_object_get(j_user_valid, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_user_valid, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_user_valid, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user - Error is_user_valid\");\n        response->status = 500;\n      }\n      json_decref(j_user_valid);\n    } else {\n      response->status = 400;\n    }\n    json_decref(j_user);\n  } else if (check_result_value(j_search_user, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_user - Error get_user\");\n    response->status = 500;\n  }\n  json_decref(j_search_user);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_delete_user (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_search_user;\n  \n  j_search_user = get_user(config, u_map_get(request->map_url, \"username\"), u_map_get(request->map_url, \"source\"));\n  if (check_result_value(j_search_user, G_OK)) {\n    if (delete_user(config, u_map_get(request->map_url, \"username\"), json_string_value(json_object_get(json_object_get(j_search_user, \"user\"), \"source\"))) != G_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_user - Error delete_user\");\n      response->status = 500;\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' removed\", u_map_get(request->map_url, \"username\"));\n    }\n  } else if (check_result_value(j_search_user, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_user - Error get_user\");\n    response->status = 500;\n  }\n  json_decref(j_search_user);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_client_list (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_client_list;\n  size_t offset = 0, limit = GLEWLWYD_DEFAULT_LIMIT_SIZE;\n  long int l_converted = 0;\n  char * endptr = NULL;\n  \n  if (u_map_get(request->map_url, \"offset\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"offset\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      offset = (size_t)l_converted;\n    }\n  }\n  if (u_map_get(request->map_url, \"limit\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"limit\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      limit = (size_t)l_converted;\n    }\n  }\n  j_client_list = get_client_list(config, u_map_get(request->map_url, \"pattern\"), offset, limit, u_map_get(request->map_url, \"source\"));\n  if (check_result_value(j_client_list, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_client_list, \"client\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_client_list - Error get_client_list\");\n    response->status = 500;\n  }\n  json_decref(j_client_list);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_client (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_client;\n  \n  j_client = get_client(config, u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"source\"));\n  if (check_result_value(j_client, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_client, \"client\"));\n  } else if (check_result_value(j_client, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_client - Error j_client\");\n    response->status = 500;\n  }\n  json_decref(j_client);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_add_client (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_client, * j_client_valid, * j_search_client, * j_body;\n  \n  j_client = ulfius_get_json_body_request(request, NULL);\n  if (j_client != NULL) {\n    j_client_valid = is_client_valid(config, NULL, j_client, 1, u_map_get(request->map_url, \"source\"));\n    if (check_result_value(j_client_valid, G_OK)) {\n      j_search_client = get_client(config, json_string_value(json_object_get(j_client, \"client_id\")), u_map_get(request->map_url, \"source\"));\n      if (check_result_value(j_search_client, G_ERROR_NOT_FOUND)) {\n        if (add_client(config, j_client, u_map_get(request->map_url, \"source\")) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_client - Error add_client\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - Client '%s' added\", json_string_value(json_object_get(j_client, \"client_id\")));\n        }\n      } else if (check_result_value(j_search_client, G_OK)) {\n        j_body = json_pack(\"{s[s]}\", \"error\", \"client_id already exists\");\n        ulfius_set_json_body_response(response, 400, j_body);\n        json_decref(j_body);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_client - Error get_client\");\n        response->status = 500;\n      }\n      json_decref(j_search_client);\n    } else if (check_result_value(j_client_valid, G_ERROR_PARAM)) {\n      if (json_object_get(j_client_valid, \"error\") != NULL) {\n        ulfius_set_json_body_response(response, 400, json_object_get(j_client_valid, \"error\"));\n      } else {\n        response->status = 400;\n      }\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_client - Error is_client_valid\");\n      response->status = 500;\n    }\n    json_decref(j_client_valid);\n  } else {\n    response->status = 400;\n  }\n  json_decref(j_client);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_set_client (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_client, * j_client_valid, * j_search_client;\n  \n  j_search_client = get_client(config, u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"source\"));\n  if (check_result_value(j_search_client, G_OK)) {\n    j_client = ulfius_get_json_body_request(request, NULL);\n    if (j_client != NULL) {\n      j_client_valid = is_client_valid(config, u_map_get(request->map_url, \"client_id\"), j_client, 0, json_string_value(json_object_get(json_object_get(j_search_client, \"client\"), \"source\")));\n      if (check_result_value(j_client_valid, G_OK)) {\n        if (set_client(config, u_map_get(request->map_url, \"client_id\"), j_client, json_string_value(json_object_get(json_object_get(j_search_client, \"client\"), \"source\"))) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_client - Error set_client\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - Client '%s' updated\", u_map_get(request->map_url, \"client_id\"));\n        }\n      } else if (check_result_value(j_client_valid, G_ERROR_PARAM)) {\n        if (json_object_get(j_client_valid, \"error\") != NULL) {\n          ulfius_set_json_body_response(response, 400, json_object_get(j_client_valid, \"error\"));\n        } else {\n          response->status = 400;\n        }\n      } else if (!check_result_value(j_client_valid, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_client - Error is_client_valid\");\n        response->status = 500;\n      }\n      json_decref(j_client_valid);\n    } else {\n      response->status = 400;\n    }\n    json_decref(j_client);\n  } else if (check_result_value(j_search_client, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_client - Error get_client\");\n    response->status = 500;\n  }\n  json_decref(j_search_client);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_delete_client (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_search_client;\n  \n  j_search_client = get_client(config, u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"source\"));\n  if (check_result_value(j_search_client, G_OK)) {\n    if (delete_client(config, u_map_get(request->map_url, \"client_id\"), json_string_value(json_object_get(json_object_get(j_search_client, \"client\"), \"source\"))) != G_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_client - Error delete_client\");\n      response->status = 500;\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event - Client '%s' removed\", u_map_get(request->map_url, \"client_id\"));\n    }\n  } else if (check_result_value(j_search_client, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_client - Error get_client\");\n    response->status = 500;\n  }\n  json_decref(j_search_client);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_scope_list (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_scope_list;\n  size_t offset = 0, limit = GLEWLWYD_DEFAULT_LIMIT_SIZE;\n  long int l_converted = 0;\n  char * endptr = NULL;\n  \n  if (u_map_get(request->map_url, \"offset\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"offset\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      offset = (size_t)l_converted;\n    }\n  }\n  if (u_map_get(request->map_url, \"limit\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"limit\"), &endptr, 10);\n    if (!(*endptr) && l_converted >= 0) {\n      limit = (size_t)l_converted;\n    }\n  }\n  j_scope_list = get_scope_list(config, u_map_get(request->map_url, \"pattern\"), offset, limit);\n  if (check_result_value(j_scope_list, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_scope_list, \"scope\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_scope_list - Error get_scope_list\");\n    response->status = 500;\n  }\n  json_decref(j_scope_list);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_scope (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_scope;\n  \n  j_scope = get_scope(config, u_map_get(request->map_url, \"scope\"));\n  if (check_result_value(j_scope, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_scope, \"scope\"));\n  } else if (check_result_value(j_scope, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_scope - Error get_scope\");\n    response->status = 500;\n  }\n  json_decref(j_scope);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_add_scope (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_scope, * j_scope_valid, * j_search_scope, * j_body;\n  \n  j_scope = ulfius_get_json_body_request(request, NULL);\n  if (j_scope != NULL) {\n    j_scope_valid = is_scope_valid(config, j_scope, 1);\n    if (check_result_value(j_scope_valid, G_OK)) {\n      j_search_scope = get_scope(config, json_string_value(json_object_get(j_scope, \"name\")));\n      if (check_result_value(j_search_scope, G_ERROR_NOT_FOUND)) {\n        if (add_scope(config, j_scope) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_scope - Error add_scope\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - Scope '%s' added\", json_string_value(json_object_get(j_scope, \"name\")));\n        }\n      } else if (check_result_value(j_search_scope, G_OK)) {\n        j_body = json_pack(\"{s[s]}\", \"error\", \"scope already exists\");\n        ulfius_set_json_body_response(response, 400, j_body);\n        json_decref(j_body);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_scope - Error get_scope\");\n        response->status = 500;\n      }\n      json_decref(j_search_scope);\n    } else if (check_result_value(j_scope_valid, G_ERROR_PARAM)) {\n      ulfius_set_json_body_response(response, 400, json_object_get(j_scope_valid, \"error\"));\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_scope - Error is_scope_valid\");\n      response->status = 500;\n    }\n    json_decref(j_scope_valid);\n  } else {\n    response->status = 400;\n  }\n  json_decref(j_scope);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_set_scope (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_scope, * j_scope_valid, * j_search_scope;\n  \n  j_search_scope = get_scope(config, u_map_get(request->map_url, \"scope\"));\n  if (check_result_value(j_search_scope, G_OK)) {\n    j_scope = ulfius_get_json_body_request(request, NULL);\n    if (j_scope != NULL) {\n      j_scope_valid = is_scope_valid(config, j_scope, 0);\n      if (check_result_value(j_scope_valid, G_OK)) {\n        if (set_scope(config, u_map_get(request->map_url, \"scope\"), j_scope) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_scope - Error set_scope\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event - Scope '%s' updated\", u_map_get(request->map_url, \"scope\"));\n        }\n      } else if (check_result_value(j_scope_valid, G_ERROR_PARAM)) {\n        ulfius_set_json_body_response(response, 400, json_object_get(j_scope_valid, \"error\"));\n      } else if (!check_result_value(j_scope_valid, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_scope - Error is_scope_valid\");\n        response->status = 500;\n      }\n      json_decref(j_scope_valid);\n    } else {\n      response->status = 400;\n    }\n    json_decref(j_scope);\n  } else if (check_result_value(j_search_scope, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_set_scope - Error get_scope\");\n    response->status = 500;\n  }\n  json_decref(j_search_scope);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_delete_scope (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_search_scope;\n  \n  j_search_scope = get_scope(config, u_map_get(request->map_url, \"scope\"));\n  if (check_result_value(j_search_scope, G_OK)) {\n    if (delete_scope(config, u_map_get(request->map_url, \"scope\")) != G_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_scope - Error delete_scope\");\n      response->status = 500;\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event - Scope '%s' removed\", u_map_get(request->map_url, \"scope\"));\n    }\n  } else if (check_result_value(j_search_scope, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_scope - Error get_scope\");\n    response->status = 500;\n  }\n  json_decref(j_search_scope);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_get_profile (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_session;\n  char * session_uid, expires[129];\n  time_t now;\n  struct tm ts;\n  \n  time(&now);\n  now += GLEWLWYD_DEFAULT_SESSION_EXPIRATION_COOKIE;\n  gmtime_r(&now, &ts);\n  strftime(expires, 128, \"%a, %d %b %Y %T %Z\", &ts);\n  if (!o_strlen(u_map_get(request->map_url, \"username\"))) {\n    session_uid = get_session_id(config, request);\n    if (session_uid != NULL && o_strlen(session_uid)) {\n      j_session = get_users_for_session(config, session_uid);\n      if (check_result_value(j_session, G_OK)) {\n        ulfius_set_json_body_response(response, 200, json_object_get(j_session, \"session\"));\n        ulfius_add_cookie_to_response(response, config->session_key, session_uid, expires, 0, config->cookie_domain, \"/\", config->cookie_secure, 0);\n      } else if (check_result_value(j_session, G_ERROR_NOT_FOUND)) {\n        response->status = 401;\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_get_session - Error get_current_user_for_session\");\n        response->status = 500;\n      }\n      json_decref(j_session);\n    } else {\n      response->status = 401;\n    }\n    o_free(session_uid);\n  } else {\n    // Can't impersonate this endpoint\n    response->status = 400;\n  }\n  \n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_update_profile (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_profile, * j_result;\n\n  j_profile = ulfius_get_json_body_request(request, NULL);\n  if (j_profile != NULL && json_is_object(j_profile)) {\n    j_result = user_set_profile(config, json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), j_profile);\n    if (check_result_value(j_result, G_ERROR_PARAM)) {\n      if (json_object_get(j_result, \"error\") != NULL) {\n        ulfius_set_json_body_response(response, 400, json_object_get(j_result, \"error\"));\n      } else {\n        response->status = 400;\n      }\n    } else if (!check_result_value(j_result, G_OK)) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_update_profile - Error user_set_profile\");\n      response->status = 500;\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' updated (profile)\", json_string_value(json_object_get((json_t *)response->shared_data, \"username\")));\n    }\n    json_decref(j_result);\n  } else {\n    response->status = 400;\n  }\n  json_decref(j_profile);\n  \n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_delete_profile (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  int ret = G_OK;\n  const char * username = json_string_value(json_object_get((json_t *)response->shared_data, \"username\"));\n  json_t * j_session, * j_cur_session;\n  char * session_uid = get_session_id(config, request);\n  size_t index;\n\n  j_session = get_current_user_for_session(config, session_uid);\n  if (check_result_value(j_session, G_ERROR_NOT_FOUND)) {\n    response->status = 404;\n  } else if (!check_result_value(j_session, G_OK)) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_delete_profile - Error get_current_user_for_session\");\n    response->status = 500;\n  } else {\n    json_array_foreach(json_object_get(j_session, \"session\"), index, j_cur_session) {\n      if (0 == o_strcasecmp(username, json_string_value(json_object_get(j_cur_session, \"username\")))) {\n        if (delete_user_session_from_hash(config, json_string_value(json_object_get(j_cur_session, \"username\")), NULL) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_delete_profile - Error delete_user_session_from_hash\");\n          response->status = 500;\n          ret = G_ERROR;\n        } else {\n          if (user_session_delete(config, session_uid, json_string_value(json_object_get(j_cur_session, \"username\"))) != G_OK) {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_delete_profile - Error user_session_delete\");\n            response->status = 500;\n            ret = G_ERROR;\n          } else {\n            y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' removed (profile)\", json_string_value(json_object_get((json_t *)response->shared_data, \"username\")));\n          }\n        }\n      }\n    }\n    json_decref(j_session);\n    if (ret == G_OK) {\n      ret = user_delete_profile(config, username);\n      if (ret == G_ERROR_UNAUTHORIZED) {\n        response->status = 403;\n      } else if (ret != G_OK) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_delete_profile - Error user_delete_profile\");\n        response->status = 500;\n      }\n    }\n  }\n  o_free(session_uid);\n  \n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_update_password (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_session, * j_password, * j_element = NULL;\n  char * session_uid = get_session_id(config, request);\n  const char ** passwords = NULL;\n  int res;\n  struct _user_module_instance * user_module;\n  size_t index = 0;\n\n  if (session_uid != NULL && o_strlen(session_uid)) {\n    j_session = get_current_user_for_session(config, session_uid);\n    if (check_result_value(j_session, G_OK)) {\n      j_password = ulfius_get_json_body_request(request, NULL);\n      user_module = get_user_module_instance(config, json_string_value(json_object_get(json_object_get(j_session, \"user\"), \"source\")));\n      if (user_module && user_module->multiple_passwords) {\n        if (json_string_length(json_object_get(j_password, \"old_password\")) && json_is_array(json_object_get(j_password, \"password\"))) {\n          if ((passwords = o_malloc(json_array_size(json_object_get(j_password, \"password\")) * sizeof(char *))) != NULL) {\n            json_array_foreach(json_object_get(j_password, \"password\"), index, j_element) {\n              passwords[index] = json_string_value(j_element);\n            }\n            if ((res = user_update_password(config, json_string_value(json_object_get(json_object_get(j_session, \"user\"), \"username\")), json_string_value(json_object_get(j_password, \"old_password\")), passwords, json_array_size(json_object_get(j_password, \"password\")))) == G_ERROR_PARAM) {\n              response->status = 400;\n            } else if (res != G_OK) {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_update_password - Error user_update_password (1)\");\n              response->status = 500;\n            }\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_update_password - Error allocating resources for passwords (1)\");\n            response->status = 500;\n          }\n          o_free(passwords);\n        } else {\n          response->status = 400;\n        }\n      } else {\n        if (json_string_length(json_object_get(j_password, \"old_password\")) && json_string_length(json_object_get(j_password, \"password\"))) {\n          if ((passwords = o_malloc(sizeof(char *))) != NULL) {\n            passwords[0] = json_string_value(json_object_get(j_password, \"password\"));\n            if ((res = user_update_password(config, json_string_value(json_object_get(json_object_get(j_session, \"user\"), \"username\")), json_string_value(json_object_get(j_password, \"old_password\")), passwords, 1)) == G_ERROR_PARAM) {\n              response->status = 400;\n            } else if (res != G_OK) {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_update_password - Error user_update_password (2)\");\n              response->status = 500;\n            }\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_update_password - Error allocating resources for passwords (2)\");\n            response->status = 500;\n          }\n          o_free(passwords);\n        } else {\n          response->status = 400;\n        }\n      }\n      json_decref(j_password);\n    } else if (check_result_value(j_session, G_ERROR_NOT_FOUND)) {\n      response->status = 401;\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_update_password - Error get_current_user_for_session\");\n      response->status = 500;\n    }\n    json_decref(j_session);\n  } else {\n    response->status = 401;\n  }\n  o_free(session_uid);\n  \n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_get_client_grant_list (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_client_grant_list;\n  size_t offset = 0, limit = GLEWLWYD_DEFAULT_LIMIT_SIZE;\n  long int l_converted = 0;\n  char * endptr = NULL;\n  \n  if (u_map_get(request->map_url, \"offset\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"offset\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      offset = (size_t)l_converted;\n    }\n  }\n  if (u_map_get(request->map_url, \"limit\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"limit\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      limit = (size_t)l_converted;\n    }\n  }\n  j_client_grant_list = get_client_grant_list(config, json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), offset, limit);\n  if (check_result_value(j_client_grant_list, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_client_grant_list, \"client_grant\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_get_session_list - Error get_user_session_list\");\n    response->status = 500;\n  }\n  json_decref(j_client_grant_list);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_get_session_list (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_session_list;\n  size_t offset = 0, limit = GLEWLWYD_DEFAULT_LIMIT_SIZE;\n  long int l_converted = 0;\n  char * endptr = NULL, * sort = NULL;\n  \n  if (u_map_get(request->map_url, \"offset\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"offset\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      offset = (size_t)l_converted;\n    }\n  }\n  if (u_map_get(request->map_url, \"limit\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"limit\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      limit = (size_t)l_converted;\n    }\n  }\n  if (0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"session_hash\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"user_agent\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"issued_for\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"expiration\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"last_login\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"enabled\")) {\n    sort = msprintf(\"gpgr_%s%s\", u_map_get(request->map_url, \"sort\"), (u_map_get_case(request->map_url, \"desc\")!=NULL?\" DESC\":\" ASC\"));\n  }\n  j_session_list = get_user_session_list(config, json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), u_map_get(request->map_url, \"pattern\"), offset, limit, sort);\n  if (check_result_value(j_session_list, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_session_list, \"session\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_get_session_list - Error get_user_session_list\");\n    response->status = 500;\n  }\n  json_decref(j_session_list);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_get_plugin_list (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  UNUSED(request);\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_plugin_list = get_plugin_module_list_for_user(config);\n  \n  if (check_result_value(j_plugin_list, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_plugin_list, \"module\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_get_plugin_list - Error j_plugin_list\");\n    response->status = 500;\n  }\n  json_decref(j_plugin_list);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_delete_session (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  int res = delete_user_session_from_hash(config, json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), u_map_get(request->map_url, \"session_hash\"));\n  if (res == G_ERROR_NOT_FOUND) {\n    response->status = 404;\n  } else if (res != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_session - Error delete_user_session_from_hash\");\n    response->status = 500;\n  }\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_user_get_scheme_list (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  UNUSED(request);\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_scheme_list = get_scheme_list_for_user(config, json_string_value(json_object_get((json_t *)response->shared_data, \"username\"))), * j_element;\n  size_t index;\n  \n  if (check_result_value(j_scheme_list, G_OK)) {\n    json_array_foreach(json_object_get(j_scheme_list, \"scheme\"), index, j_element) {\n      json_object_del(j_element, \"parameters\");\n    }\n    ulfius_set_json_body_response(response, 200, json_object_get(j_scheme_list, \"scheme\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_get_scheme_list - Error get_scheme_list_for_user\");\n    response->status = 500;\n  }\n  json_decref(j_scheme_list);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_get_api_key_list (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  json_t * j_api_key_list;\n  size_t offset = 0, limit = GLEWLWYD_DEFAULT_LIMIT_SIZE;\n  long int l_converted = 0;\n  char * endptr = NULL;\n  \n  if (u_map_get(request->map_url, \"offset\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"offset\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      offset = (size_t)l_converted;\n    }\n  }\n  if (u_map_get(request->map_url, \"limit\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"limit\"), &endptr, 10);\n    if (!(*endptr) && l_converted >= 0) {\n      limit = (size_t)l_converted;\n    }\n  }\n  j_api_key_list = get_api_key_list(config, u_map_get(request->map_url, \"pattern\"), offset, limit);\n  if (check_result_value(j_api_key_list, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_api_key_list, \"api_key\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_get_api_key_list - Error get_api_key_list\");\n    response->status = 500;\n  }\n  json_decref(j_api_key_list);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_add_api_key (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  const char * issued_for = get_ip_source(request), * username = json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), * user_agent = u_map_get_case(request->map_header, \"user-agent\");\n  json_t * j_api_key = generate_api_key(config, username, issued_for, user_agent);\n  \n  if (check_result_value(j_api_key, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_api_key, \"api_key\"));\n    y_log_message(Y_LOG_LEVEL_INFO, \"Event - API key created for user '%s'\", username);\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_add_api_key - Error generate_api_key\");\n    response->status = 500;\n  }\n  json_decref(j_api_key);\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_glewlwyd_delete_api_key (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct config_elements * config = (struct config_elements *)user_data;\n  \n  if (disable_api_key(config, u_map_get(request->map_url, \"key_hash\")) != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_delete_api_key - Error disable_api_key\");\n    response->status = 500;\n  } else {\n    y_log_message(Y_LOG_LEVEL_INFO, \"Event - API key disabled by user '%s'\", json_string_value(json_object_get((json_t *)response->shared_data, \"username\")));\n  }\n  return U_CALLBACK_CONTINUE;\n}\n\nint callback_metrics (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  UNUSED(request);\n  struct config_elements * config = (struct config_elements *)user_data;\n  size_t i, j;\n  char * content = o_strdup(\"# We have seen handsome noble-looking men but I have never seen a man like the one who now stands at the entrance of the gate.\\n\");\n  struct _glwd_metric * metric;\n  \n  if (!pthread_mutex_lock(&config->metrics_lock)) {\n    u_map_put(response->map_header, ULFIUS_HTTP_HEADER_CONTENT, \"text/plain; charset=utf-8\");\n    for (i=0; i<pointer_list_size(&config->metrics_list); i++) {\n      metric = (struct _glwd_metric *)pointer_list_get_at(&config->metrics_list, i);\n      content = mstrcatf(content, \"# HELP %s_total %s\\n\", metric->name, metric->help);\n      content = mstrcatf(content, \"# TYPE %s_total counter\\n\", metric->name);\n      for (j=0; j<metric->data_size; j++) {\n        if (metric->data[j].label != NULL) {\n          content = mstrcatf(content, \"%s_total{%s} %zu\\n\", metric->name, metric->data[j].label, metric->data[j].counter);\n        } else {\n          content = mstrcatf(content, \"%s_total %zu\\n\", metric->name, metric->data[j].counter);\n        }\n      }\n    }\n    ulfius_set_string_body_response(response, 200, content);\n    o_free(content);\n    pthread_mutex_unlock(&config->metrics_lock);\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_metrics - Error lock\");\n    response->status = 500;\n  }\n  return U_CALLBACK_CONTINUE;\n}\n"], "filenames": ["src/webservice.c"], "buggy_code_start_loc": [281], "buggy_code_end_loc": [285], "fixing_code_start_loc": [280], "fixing_code_end_loc": [280], "type": "CWE-287", "message": "Glewlwyd 2.0.0, fixed in 2.6.1 is affected by an incorrect access control vulnerability. One user can attempt to log in as another user without its password.", "other": {"cve": {"id": "CVE-2021-45379", "sourceIdentifier": "cve@mitre.org", "published": "2021-12-30T18:15:07.463", "lastModified": "2022-07-12T17:42:04.277", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Glewlwyd 2.0.0, fixed in 2.6.1 is affected by an incorrect access control vulnerability. One user can attempt to log in as another user without its password."}, {"lang": "es", "value": "Glewlwyd versi\u00f3n 2.0.0, corregido en 2.6.1, est\u00e1 afectado por una vulnerabilidad de control de acceso incorrecto. Un usuario puede intentar iniciar sesi\u00f3n como otro usuario sin su contrase\u00f1a.\n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-287"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:glewlwyd_project:glewlwyd:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "2.6.1", "matchCriteriaId": "6BDB9132-65D1-4FFC-861B-C56101BAFA47"}]}]}], "references": [{"url": "https://github.com/babelouest/glewlwyd/commit/125281f1c0d4b6a8b49f7e55a757205a2ef01fbe", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/babelouest/glewlwyd/releases/tag/v2.6.1", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/babelouest/glewlwyd/commit/125281f1c0d4b6a8b49f7e55a757205a2ef01fbe"}}