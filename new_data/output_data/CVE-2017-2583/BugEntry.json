{"buggy_code": ["/******************************************************************************\n * emulate.c\n *\n * Generic x86 (32-bit and 64-bit) instruction decoder and emulator.\n *\n * Copyright (c) 2005 Keir Fraser\n *\n * Linux coding style, mod r/m decoder, segment base fixes, real-mode\n * privileged instructions:\n *\n * Copyright (C) 2006 Qumranet\n * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n *\n *   Avi Kivity <avi@qumranet.com>\n *   Yaniv Kamay <yaniv@qumranet.com>\n *\n * This work is licensed under the terms of the GNU GPL, version 2.  See\n * the COPYING file in the top-level directory.\n *\n * From: xen-unstable 10676:af9809f51f81a3c43f276f00c81a52ef558afda4\n */\n\n#include <linux/kvm_host.h>\n#include \"kvm_cache_regs.h\"\n#include <asm/kvm_emulate.h>\n#include <linux/stringify.h>\n#include <asm/debugreg.h>\n\n#include \"x86.h\"\n#include \"tss.h\"\n\n/*\n * Operand types\n */\n#define OpNone             0ull\n#define OpImplicit         1ull  /* No generic decode */\n#define OpReg              2ull  /* Register */\n#define OpMem              3ull  /* Memory */\n#define OpAcc              4ull  /* Accumulator: AL/AX/EAX/RAX */\n#define OpDI               5ull  /* ES:DI/EDI/RDI */\n#define OpMem64            6ull  /* Memory, 64-bit */\n#define OpImmUByte         7ull  /* Zero-extended 8-bit immediate */\n#define OpDX               8ull  /* DX register */\n#define OpCL               9ull  /* CL register (for shifts) */\n#define OpImmByte         10ull  /* 8-bit sign extended immediate */\n#define OpOne             11ull  /* Implied 1 */\n#define OpImm             12ull  /* Sign extended up to 32-bit immediate */\n#define OpMem16           13ull  /* Memory operand (16-bit). */\n#define OpMem32           14ull  /* Memory operand (32-bit). */\n#define OpImmU            15ull  /* Immediate operand, zero extended */\n#define OpSI              16ull  /* SI/ESI/RSI */\n#define OpImmFAddr        17ull  /* Immediate far address */\n#define OpMemFAddr        18ull  /* Far address in memory */\n#define OpImmU16          19ull  /* Immediate operand, 16 bits, zero extended */\n#define OpES              20ull  /* ES */\n#define OpCS              21ull  /* CS */\n#define OpSS              22ull  /* SS */\n#define OpDS              23ull  /* DS */\n#define OpFS              24ull  /* FS */\n#define OpGS              25ull  /* GS */\n#define OpMem8            26ull  /* 8-bit zero extended memory operand */\n#define OpImm64           27ull  /* Sign extended 16/32/64-bit immediate */\n#define OpXLat            28ull  /* memory at BX/EBX/RBX + zero-extended AL */\n#define OpAccLo           29ull  /* Low part of extended acc (AX/AX/EAX/RAX) */\n#define OpAccHi           30ull  /* High part of extended acc (-/DX/EDX/RDX) */\n\n#define OpBits             5  /* Width of operand field */\n#define OpMask             ((1ull << OpBits) - 1)\n\n/*\n * Opcode effective-address decode tables.\n * Note that we only emulate instructions that have at least one memory\n * operand (excluding implicit stack references). We assume that stack\n * references and instruction fetches will never occur in special memory\n * areas that require emulation. So, for example, 'mov <imm>,<reg>' need\n * not be handled.\n */\n\n/* Operand sizes: 8-bit operands or specified/overridden size. */\n#define ByteOp      (1<<0)\t/* 8-bit operands. */\n/* Destination operand type. */\n#define DstShift    1\n#define ImplicitOps (OpImplicit << DstShift)\n#define DstReg      (OpReg << DstShift)\n#define DstMem      (OpMem << DstShift)\n#define DstAcc      (OpAcc << DstShift)\n#define DstDI       (OpDI << DstShift)\n#define DstMem64    (OpMem64 << DstShift)\n#define DstMem16    (OpMem16 << DstShift)\n#define DstImmUByte (OpImmUByte << DstShift)\n#define DstDX       (OpDX << DstShift)\n#define DstAccLo    (OpAccLo << DstShift)\n#define DstMask     (OpMask << DstShift)\n/* Source operand type. */\n#define SrcShift    6\n#define SrcNone     (OpNone << SrcShift)\n#define SrcReg      (OpReg << SrcShift)\n#define SrcMem      (OpMem << SrcShift)\n#define SrcMem16    (OpMem16 << SrcShift)\n#define SrcMem32    (OpMem32 << SrcShift)\n#define SrcImm      (OpImm << SrcShift)\n#define SrcImmByte  (OpImmByte << SrcShift)\n#define SrcOne      (OpOne << SrcShift)\n#define SrcImmUByte (OpImmUByte << SrcShift)\n#define SrcImmU     (OpImmU << SrcShift)\n#define SrcSI       (OpSI << SrcShift)\n#define SrcXLat     (OpXLat << SrcShift)\n#define SrcImmFAddr (OpImmFAddr << SrcShift)\n#define SrcMemFAddr (OpMemFAddr << SrcShift)\n#define SrcAcc      (OpAcc << SrcShift)\n#define SrcImmU16   (OpImmU16 << SrcShift)\n#define SrcImm64    (OpImm64 << SrcShift)\n#define SrcDX       (OpDX << SrcShift)\n#define SrcMem8     (OpMem8 << SrcShift)\n#define SrcAccHi    (OpAccHi << SrcShift)\n#define SrcMask     (OpMask << SrcShift)\n#define BitOp       (1<<11)\n#define MemAbs      (1<<12)      /* Memory operand is absolute displacement */\n#define String      (1<<13)     /* String instruction (rep capable) */\n#define Stack       (1<<14)     /* Stack instruction (push/pop) */\n#define GroupMask   (7<<15)     /* Opcode uses one of the group mechanisms */\n#define Group       (1<<15)     /* Bits 3:5 of modrm byte extend opcode */\n#define GroupDual   (2<<15)     /* Alternate decoding of mod == 3 */\n#define Prefix      (3<<15)     /* Instruction varies with 66/f2/f3 prefix */\n#define RMExt       (4<<15)     /* Opcode extension in ModRM r/m if mod == 3 */\n#define Escape      (5<<15)     /* Escape to coprocessor instruction */\n#define InstrDual   (6<<15)     /* Alternate instruction decoding of mod == 3 */\n#define ModeDual    (7<<15)     /* Different instruction for 32/64 bit */\n#define Sse         (1<<18)     /* SSE Vector instruction */\n/* Generic ModRM decode. */\n#define ModRM       (1<<19)\n/* Destination is only written; never read. */\n#define Mov         (1<<20)\n/* Misc flags */\n#define Prot        (1<<21) /* instruction generates #UD if not in prot-mode */\n#define EmulateOnUD (1<<22) /* Emulate if unsupported by the host */\n#define NoAccess    (1<<23) /* Don't access memory (lea/invlpg/verr etc) */\n#define Op3264      (1<<24) /* Operand is 64b in long mode, 32b otherwise */\n#define Undefined   (1<<25) /* No Such Instruction */\n#define Lock        (1<<26) /* lock prefix is allowed for the instruction */\n#define Priv        (1<<27) /* instruction generates #GP if current CPL != 0 */\n#define No64\t    (1<<28)\n#define PageTable   (1 << 29)   /* instruction used to write page table */\n#define NotImpl     (1 << 30)   /* instruction is not implemented */\n/* Source 2 operand type */\n#define Src2Shift   (31)\n#define Src2None    (OpNone << Src2Shift)\n#define Src2Mem     (OpMem << Src2Shift)\n#define Src2CL      (OpCL << Src2Shift)\n#define Src2ImmByte (OpImmByte << Src2Shift)\n#define Src2One     (OpOne << Src2Shift)\n#define Src2Imm     (OpImm << Src2Shift)\n#define Src2ES      (OpES << Src2Shift)\n#define Src2CS      (OpCS << Src2Shift)\n#define Src2SS      (OpSS << Src2Shift)\n#define Src2DS      (OpDS << Src2Shift)\n#define Src2FS      (OpFS << Src2Shift)\n#define Src2GS      (OpGS << Src2Shift)\n#define Src2Mask    (OpMask << Src2Shift)\n#define Mmx         ((u64)1 << 40)  /* MMX Vector instruction */\n#define AlignMask   ((u64)7 << 41)\n#define Aligned     ((u64)1 << 41)  /* Explicitly aligned (e.g. MOVDQA) */\n#define Unaligned   ((u64)2 << 41)  /* Explicitly unaligned (e.g. MOVDQU) */\n#define Avx         ((u64)3 << 41)  /* Advanced Vector Extensions */\n#define Aligned16   ((u64)4 << 41)  /* Aligned to 16 byte boundary (e.g. FXSAVE) */\n#define Fastop      ((u64)1 << 44)  /* Use opcode::u.fastop */\n#define NoWrite     ((u64)1 << 45)  /* No writeback */\n#define SrcWrite    ((u64)1 << 46)  /* Write back src operand */\n#define NoMod\t    ((u64)1 << 47)  /* Mod field is ignored */\n#define Intercept   ((u64)1 << 48)  /* Has valid intercept field */\n#define CheckPerm   ((u64)1 << 49)  /* Has valid check_perm field */\n#define PrivUD      ((u64)1 << 51)  /* #UD instead of #GP on CPL > 0 */\n#define NearBranch  ((u64)1 << 52)  /* Near branches */\n#define No16\t    ((u64)1 << 53)  /* No 16 bit operand */\n#define IncSP       ((u64)1 << 54)  /* SP is incremented before ModRM calc */\n\n#define DstXacc     (DstAccLo | SrcAccHi | SrcWrite)\n\n#define X2(x...) x, x\n#define X3(x...) X2(x), x\n#define X4(x...) X2(x), X2(x)\n#define X5(x...) X4(x), x\n#define X6(x...) X4(x), X2(x)\n#define X7(x...) X4(x), X3(x)\n#define X8(x...) X4(x), X4(x)\n#define X16(x...) X8(x), X8(x)\n\n#define NR_FASTOP (ilog2(sizeof(ulong)) + 1)\n#define FASTOP_SIZE 8\n\n/*\n * fastop functions have a special calling convention:\n *\n * dst:    rax        (in/out)\n * src:    rdx        (in/out)\n * src2:   rcx        (in)\n * flags:  rflags     (in/out)\n * ex:     rsi        (in:fastop pointer, out:zero if exception)\n *\n * Moreover, they are all exactly FASTOP_SIZE bytes long, so functions for\n * different operand sizes can be reached by calculation, rather than a jump\n * table (which would be bigger than the code).\n *\n * fastop functions are declared as taking a never-defined fastop parameter,\n * so they can't be called from C directly.\n */\n\nstruct fastop;\n\nstruct opcode {\n\tu64 flags : 56;\n\tu64 intercept : 8;\n\tunion {\n\t\tint (*execute)(struct x86_emulate_ctxt *ctxt);\n\t\tconst struct opcode *group;\n\t\tconst struct group_dual *gdual;\n\t\tconst struct gprefix *gprefix;\n\t\tconst struct escape *esc;\n\t\tconst struct instr_dual *idual;\n\t\tconst struct mode_dual *mdual;\n\t\tvoid (*fastop)(struct fastop *fake);\n\t} u;\n\tint (*check_perm)(struct x86_emulate_ctxt *ctxt);\n};\n\nstruct group_dual {\n\tstruct opcode mod012[8];\n\tstruct opcode mod3[8];\n};\n\nstruct gprefix {\n\tstruct opcode pfx_no;\n\tstruct opcode pfx_66;\n\tstruct opcode pfx_f2;\n\tstruct opcode pfx_f3;\n};\n\nstruct escape {\n\tstruct opcode op[8];\n\tstruct opcode high[64];\n};\n\nstruct instr_dual {\n\tstruct opcode mod012;\n\tstruct opcode mod3;\n};\n\nstruct mode_dual {\n\tstruct opcode mode32;\n\tstruct opcode mode64;\n};\n\n#define EFLG_RESERVED_ZEROS_MASK 0xffc0802a\n\nenum x86_transfer_type {\n\tX86_TRANSFER_NONE,\n\tX86_TRANSFER_CALL_JMP,\n\tX86_TRANSFER_RET,\n\tX86_TRANSFER_TASK_SWITCH,\n};\n\nstatic ulong reg_read(struct x86_emulate_ctxt *ctxt, unsigned nr)\n{\n\tif (!(ctxt->regs_valid & (1 << nr))) {\n\t\tctxt->regs_valid |= 1 << nr;\n\t\tctxt->_regs[nr] = ctxt->ops->read_gpr(ctxt, nr);\n\t}\n\treturn ctxt->_regs[nr];\n}\n\nstatic ulong *reg_write(struct x86_emulate_ctxt *ctxt, unsigned nr)\n{\n\tctxt->regs_valid |= 1 << nr;\n\tctxt->regs_dirty |= 1 << nr;\n\treturn &ctxt->_regs[nr];\n}\n\nstatic ulong *reg_rmw(struct x86_emulate_ctxt *ctxt, unsigned nr)\n{\n\treg_read(ctxt, nr);\n\treturn reg_write(ctxt, nr);\n}\n\nstatic void writeback_registers(struct x86_emulate_ctxt *ctxt)\n{\n\tunsigned reg;\n\n\tfor_each_set_bit(reg, (ulong *)&ctxt->regs_dirty, 16)\n\t\tctxt->ops->write_gpr(ctxt, reg, ctxt->_regs[reg]);\n}\n\nstatic void invalidate_registers(struct x86_emulate_ctxt *ctxt)\n{\n\tctxt->regs_dirty = 0;\n\tctxt->regs_valid = 0;\n}\n\n/*\n * These EFLAGS bits are restored from saved value during emulation, and\n * any changes are written back to the saved value after emulation.\n */\n#define EFLAGS_MASK (X86_EFLAGS_OF|X86_EFLAGS_SF|X86_EFLAGS_ZF|X86_EFLAGS_AF|\\\n\t\t     X86_EFLAGS_PF|X86_EFLAGS_CF)\n\n#ifdef CONFIG_X86_64\n#define ON64(x) x\n#else\n#define ON64(x)\n#endif\n\nstatic int fastop(struct x86_emulate_ctxt *ctxt, void (*fop)(struct fastop *));\n\n#define FOP_FUNC(name) \\\n\t\".align \" __stringify(FASTOP_SIZE) \" \\n\\t\" \\\n\t\".type \" name \", @function \\n\\t\" \\\n\tname \":\\n\\t\"\n\n#define FOP_RET   \"ret \\n\\t\"\n\n#define FOP_START(op) \\\n\textern void em_##op(struct fastop *fake); \\\n\tasm(\".pushsection .text, \\\"ax\\\" \\n\\t\" \\\n\t    \".global em_\" #op \" \\n\\t\" \\\n\t    FOP_FUNC(\"em_\" #op)\n\n#define FOP_END \\\n\t    \".popsection\")\n\n#define FOPNOP() \\\n\tFOP_FUNC(__stringify(__UNIQUE_ID(nop))) \\\n\tFOP_RET\n\n#define FOP1E(op,  dst) \\\n\tFOP_FUNC(#op \"_\" #dst) \\\n\t\"10: \" #op \" %\" #dst \" \\n\\t\" FOP_RET\n\n#define FOP1EEX(op,  dst) \\\n\tFOP1E(op, dst) _ASM_EXTABLE(10b, kvm_fastop_exception)\n\n#define FASTOP1(op) \\\n\tFOP_START(op) \\\n\tFOP1E(op##b, al) \\\n\tFOP1E(op##w, ax) \\\n\tFOP1E(op##l, eax) \\\n\tON64(FOP1E(op##q, rax))\t\\\n\tFOP_END\n\n/* 1-operand, using src2 (for MUL/DIV r/m) */\n#define FASTOP1SRC2(op, name) \\\n\tFOP_START(name) \\\n\tFOP1E(op, cl) \\\n\tFOP1E(op, cx) \\\n\tFOP1E(op, ecx) \\\n\tON64(FOP1E(op, rcx)) \\\n\tFOP_END\n\n/* 1-operand, using src2 (for MUL/DIV r/m), with exceptions */\n#define FASTOP1SRC2EX(op, name) \\\n\tFOP_START(name) \\\n\tFOP1EEX(op, cl) \\\n\tFOP1EEX(op, cx) \\\n\tFOP1EEX(op, ecx) \\\n\tON64(FOP1EEX(op, rcx)) \\\n\tFOP_END\n\n#define FOP2E(op,  dst, src)\t   \\\n\tFOP_FUNC(#op \"_\" #dst \"_\" #src) \\\n\t#op \" %\" #src \", %\" #dst \" \\n\\t\" FOP_RET\n\n#define FASTOP2(op) \\\n\tFOP_START(op) \\\n\tFOP2E(op##b, al, dl) \\\n\tFOP2E(op##w, ax, dx) \\\n\tFOP2E(op##l, eax, edx) \\\n\tON64(FOP2E(op##q, rax, rdx)) \\\n\tFOP_END\n\n/* 2 operand, word only */\n#define FASTOP2W(op) \\\n\tFOP_START(op) \\\n\tFOPNOP() \\\n\tFOP2E(op##w, ax, dx) \\\n\tFOP2E(op##l, eax, edx) \\\n\tON64(FOP2E(op##q, rax, rdx)) \\\n\tFOP_END\n\n/* 2 operand, src is CL */\n#define FASTOP2CL(op) \\\n\tFOP_START(op) \\\n\tFOP2E(op##b, al, cl) \\\n\tFOP2E(op##w, ax, cl) \\\n\tFOP2E(op##l, eax, cl) \\\n\tON64(FOP2E(op##q, rax, cl)) \\\n\tFOP_END\n\n/* 2 operand, src and dest are reversed */\n#define FASTOP2R(op, name) \\\n\tFOP_START(name) \\\n\tFOP2E(op##b, dl, al) \\\n\tFOP2E(op##w, dx, ax) \\\n\tFOP2E(op##l, edx, eax) \\\n\tON64(FOP2E(op##q, rdx, rax)) \\\n\tFOP_END\n\n#define FOP3E(op,  dst, src, src2) \\\n\tFOP_FUNC(#op \"_\" #dst \"_\" #src \"_\" #src2) \\\n\t#op \" %\" #src2 \", %\" #src \", %\" #dst \" \\n\\t\" FOP_RET\n\n/* 3-operand, word-only, src2=cl */\n#define FASTOP3WCL(op) \\\n\tFOP_START(op) \\\n\tFOPNOP() \\\n\tFOP3E(op##w, ax, dx, cl) \\\n\tFOP3E(op##l, eax, edx, cl) \\\n\tON64(FOP3E(op##q, rax, rdx, cl)) \\\n\tFOP_END\n\n/* Special case for SETcc - 1 instruction per cc */\n#define FOP_SETCC(op) \\\n\t\".align 4 \\n\\t\" \\\n\t\".type \" #op \", @function \\n\\t\" \\\n\t#op \": \\n\\t\" \\\n\t#op \" %al \\n\\t\" \\\n\tFOP_RET\n\nasm(\".global kvm_fastop_exception \\n\"\n    \"kvm_fastop_exception: xor %esi, %esi; ret\");\n\nFOP_START(setcc)\nFOP_SETCC(seto)\nFOP_SETCC(setno)\nFOP_SETCC(setc)\nFOP_SETCC(setnc)\nFOP_SETCC(setz)\nFOP_SETCC(setnz)\nFOP_SETCC(setbe)\nFOP_SETCC(setnbe)\nFOP_SETCC(sets)\nFOP_SETCC(setns)\nFOP_SETCC(setp)\nFOP_SETCC(setnp)\nFOP_SETCC(setl)\nFOP_SETCC(setnl)\nFOP_SETCC(setle)\nFOP_SETCC(setnle)\nFOP_END;\n\nFOP_START(salc) \"pushf; sbb %al, %al; popf \\n\\t\" FOP_RET\nFOP_END;\n\n/*\n * XXX: inoutclob user must know where the argument is being expanded.\n *      Relying on CC_HAVE_ASM_GOTO would allow us to remove _fault.\n */\n#define asm_safe(insn, inoutclob...) \\\n({ \\\n\tint _fault = 0; \\\n \\\n\tasm volatile(\"1:\" insn \"\\n\" \\\n\t             \"2:\\n\" \\\n\t             \".pushsection .fixup, \\\"ax\\\"\\n\" \\\n\t             \"3: movl $1, %[_fault]\\n\" \\\n\t             \"   jmp  2b\\n\" \\\n\t             \".popsection\\n\" \\\n\t             _ASM_EXTABLE(1b, 3b) \\\n\t             : [_fault] \"+qm\"(_fault) inoutclob ); \\\n \\\n\t_fault ? X86EMUL_UNHANDLEABLE : X86EMUL_CONTINUE; \\\n})\n\nstatic int emulator_check_intercept(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t    enum x86_intercept intercept,\n\t\t\t\t    enum x86_intercept_stage stage)\n{\n\tstruct x86_instruction_info info = {\n\t\t.intercept  = intercept,\n\t\t.rep_prefix = ctxt->rep_prefix,\n\t\t.modrm_mod  = ctxt->modrm_mod,\n\t\t.modrm_reg  = ctxt->modrm_reg,\n\t\t.modrm_rm   = ctxt->modrm_rm,\n\t\t.src_val    = ctxt->src.val64,\n\t\t.dst_val    = ctxt->dst.val64,\n\t\t.src_bytes  = ctxt->src.bytes,\n\t\t.dst_bytes  = ctxt->dst.bytes,\n\t\t.ad_bytes   = ctxt->ad_bytes,\n\t\t.next_rip   = ctxt->eip,\n\t};\n\n\treturn ctxt->ops->intercept(ctxt, &info, stage);\n}\n\nstatic void assign_masked(ulong *dest, ulong src, ulong mask)\n{\n\t*dest = (*dest & ~mask) | (src & mask);\n}\n\nstatic void assign_register(unsigned long *reg, u64 val, int bytes)\n{\n\t/* The 4-byte case *is* correct: in 64-bit mode we zero-extend. */\n\tswitch (bytes) {\n\tcase 1:\n\t\t*(u8 *)reg = (u8)val;\n\t\tbreak;\n\tcase 2:\n\t\t*(u16 *)reg = (u16)val;\n\t\tbreak;\n\tcase 4:\n\t\t*reg = (u32)val;\n\t\tbreak;\t/* 64b: zero-extend */\n\tcase 8:\n\t\t*reg = val;\n\t\tbreak;\n\t}\n}\n\nstatic inline unsigned long ad_mask(struct x86_emulate_ctxt *ctxt)\n{\n\treturn (1UL << (ctxt->ad_bytes << 3)) - 1;\n}\n\nstatic ulong stack_mask(struct x86_emulate_ctxt *ctxt)\n{\n\tu16 sel;\n\tstruct desc_struct ss;\n\n\tif (ctxt->mode == X86EMUL_MODE_PROT64)\n\t\treturn ~0UL;\n\tctxt->ops->get_segment(ctxt, &sel, &ss, NULL, VCPU_SREG_SS);\n\treturn ~0U >> ((ss.d ^ 1) * 16);  /* d=0: 0xffff; d=1: 0xffffffff */\n}\n\nstatic int stack_size(struct x86_emulate_ctxt *ctxt)\n{\n\treturn (__fls(stack_mask(ctxt)) + 1) >> 3;\n}\n\n/* Access/update address held in a register, based on addressing mode. */\nstatic inline unsigned long\naddress_mask(struct x86_emulate_ctxt *ctxt, unsigned long reg)\n{\n\tif (ctxt->ad_bytes == sizeof(unsigned long))\n\t\treturn reg;\n\telse\n\t\treturn reg & ad_mask(ctxt);\n}\n\nstatic inline unsigned long\nregister_address(struct x86_emulate_ctxt *ctxt, int reg)\n{\n\treturn address_mask(ctxt, reg_read(ctxt, reg));\n}\n\nstatic void masked_increment(ulong *reg, ulong mask, int inc)\n{\n\tassign_masked(reg, *reg + inc, mask);\n}\n\nstatic inline void\nregister_address_increment(struct x86_emulate_ctxt *ctxt, int reg, int inc)\n{\n\tulong *preg = reg_rmw(ctxt, reg);\n\n\tassign_register(preg, *preg + inc, ctxt->ad_bytes);\n}\n\nstatic void rsp_increment(struct x86_emulate_ctxt *ctxt, int inc)\n{\n\tmasked_increment(reg_rmw(ctxt, VCPU_REGS_RSP), stack_mask(ctxt), inc);\n}\n\nstatic u32 desc_limit_scaled(struct desc_struct *desc)\n{\n\tu32 limit = get_desc_limit(desc);\n\n\treturn desc->g ? (limit << 12) | 0xfff : limit;\n}\n\nstatic unsigned long seg_base(struct x86_emulate_ctxt *ctxt, int seg)\n{\n\tif (ctxt->mode == X86EMUL_MODE_PROT64 && seg < VCPU_SREG_FS)\n\t\treturn 0;\n\n\treturn ctxt->ops->get_cached_segment_base(ctxt, seg);\n}\n\nstatic int emulate_exception(struct x86_emulate_ctxt *ctxt, int vec,\n\t\t\t     u32 error, bool valid)\n{\n\tWARN_ON(vec > 0x1f);\n\tctxt->exception.vector = vec;\n\tctxt->exception.error_code = error;\n\tctxt->exception.error_code_valid = valid;\n\treturn X86EMUL_PROPAGATE_FAULT;\n}\n\nstatic int emulate_db(struct x86_emulate_ctxt *ctxt)\n{\n\treturn emulate_exception(ctxt, DB_VECTOR, 0, false);\n}\n\nstatic int emulate_gp(struct x86_emulate_ctxt *ctxt, int err)\n{\n\treturn emulate_exception(ctxt, GP_VECTOR, err, true);\n}\n\nstatic int emulate_ss(struct x86_emulate_ctxt *ctxt, int err)\n{\n\treturn emulate_exception(ctxt, SS_VECTOR, err, true);\n}\n\nstatic int emulate_ud(struct x86_emulate_ctxt *ctxt)\n{\n\treturn emulate_exception(ctxt, UD_VECTOR, 0, false);\n}\n\nstatic int emulate_ts(struct x86_emulate_ctxt *ctxt, int err)\n{\n\treturn emulate_exception(ctxt, TS_VECTOR, err, true);\n}\n\nstatic int emulate_de(struct x86_emulate_ctxt *ctxt)\n{\n\treturn emulate_exception(ctxt, DE_VECTOR, 0, false);\n}\n\nstatic int emulate_nm(struct x86_emulate_ctxt *ctxt)\n{\n\treturn emulate_exception(ctxt, NM_VECTOR, 0, false);\n}\n\nstatic u16 get_segment_selector(struct x86_emulate_ctxt *ctxt, unsigned seg)\n{\n\tu16 selector;\n\tstruct desc_struct desc;\n\n\tctxt->ops->get_segment(ctxt, &selector, &desc, NULL, seg);\n\treturn selector;\n}\n\nstatic void set_segment_selector(struct x86_emulate_ctxt *ctxt, u16 selector,\n\t\t\t\t unsigned seg)\n{\n\tu16 dummy;\n\tu32 base3;\n\tstruct desc_struct desc;\n\n\tctxt->ops->get_segment(ctxt, &dummy, &desc, &base3, seg);\n\tctxt->ops->set_segment(ctxt, selector, &desc, base3, seg);\n}\n\n/*\n * x86 defines three classes of vector instructions: explicitly\n * aligned, explicitly unaligned, and the rest, which change behaviour\n * depending on whether they're AVX encoded or not.\n *\n * Also included is CMPXCHG16B which is not a vector instruction, yet it is\n * subject to the same check.  FXSAVE and FXRSTOR are checked here too as their\n * 512 bytes of data must be aligned to a 16 byte boundary.\n */\nstatic unsigned insn_alignment(struct x86_emulate_ctxt *ctxt, unsigned size)\n{\n\tu64 alignment = ctxt->d & AlignMask;\n\n\tif (likely(size < 16))\n\t\treturn 1;\n\n\tswitch (alignment) {\n\tcase Unaligned:\n\tcase Avx:\n\t\treturn 1;\n\tcase Aligned16:\n\t\treturn 16;\n\tcase Aligned:\n\tdefault:\n\t\treturn size;\n\t}\n}\n\nstatic __always_inline int __linearize(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t       struct segmented_address addr,\n\t\t\t\t       unsigned *max_size, unsigned size,\n\t\t\t\t       bool write, bool fetch,\n\t\t\t\t       enum x86emul_mode mode, ulong *linear)\n{\n\tstruct desc_struct desc;\n\tbool usable;\n\tulong la;\n\tu32 lim;\n\tu16 sel;\n\n\tla = seg_base(ctxt, addr.seg) + addr.ea;\n\t*max_size = 0;\n\tswitch (mode) {\n\tcase X86EMUL_MODE_PROT64:\n\t\t*linear = la;\n\t\tif (is_noncanonical_address(la))\n\t\t\tgoto bad;\n\n\t\t*max_size = min_t(u64, ~0u, (1ull << 48) - la);\n\t\tif (size > *max_size)\n\t\t\tgoto bad;\n\t\tbreak;\n\tdefault:\n\t\t*linear = la = (u32)la;\n\t\tusable = ctxt->ops->get_segment(ctxt, &sel, &desc, NULL,\n\t\t\t\t\t\taddr.seg);\n\t\tif (!usable)\n\t\t\tgoto bad;\n\t\t/* code segment in protected mode or read-only data segment */\n\t\tif ((((ctxt->mode != X86EMUL_MODE_REAL) && (desc.type & 8))\n\t\t\t\t\t|| !(desc.type & 2)) && write)\n\t\t\tgoto bad;\n\t\t/* unreadable code segment */\n\t\tif (!fetch && (desc.type & 8) && !(desc.type & 2))\n\t\t\tgoto bad;\n\t\tlim = desc_limit_scaled(&desc);\n\t\tif (!(desc.type & 8) && (desc.type & 4)) {\n\t\t\t/* expand-down segment */\n\t\t\tif (addr.ea <= lim)\n\t\t\t\tgoto bad;\n\t\t\tlim = desc.d ? 0xffffffff : 0xffff;\n\t\t}\n\t\tif (addr.ea > lim)\n\t\t\tgoto bad;\n\t\tif (lim == 0xffffffff)\n\t\t\t*max_size = ~0u;\n\t\telse {\n\t\t\t*max_size = (u64)lim + 1 - addr.ea;\n\t\t\tif (size > *max_size)\n\t\t\t\tgoto bad;\n\t\t}\n\t\tbreak;\n\t}\n\tif (la & (insn_alignment(ctxt, size) - 1))\n\t\treturn emulate_gp(ctxt, 0);\n\treturn X86EMUL_CONTINUE;\nbad:\n\tif (addr.seg == VCPU_SREG_SS)\n\t\treturn emulate_ss(ctxt, 0);\n\telse\n\t\treturn emulate_gp(ctxt, 0);\n}\n\nstatic int linearize(struct x86_emulate_ctxt *ctxt,\n\t\t     struct segmented_address addr,\n\t\t     unsigned size, bool write,\n\t\t     ulong *linear)\n{\n\tunsigned max_size;\n\treturn __linearize(ctxt, addr, &max_size, size, write, false,\n\t\t\t   ctxt->mode, linear);\n}\n\nstatic inline int assign_eip(struct x86_emulate_ctxt *ctxt, ulong dst,\n\t\t\t     enum x86emul_mode mode)\n{\n\tulong linear;\n\tint rc;\n\tunsigned max_size;\n\tstruct segmented_address addr = { .seg = VCPU_SREG_CS,\n\t\t\t\t\t   .ea = dst };\n\n\tif (ctxt->op_bytes != sizeof(unsigned long))\n\t\taddr.ea = dst & ((1UL << (ctxt->op_bytes << 3)) - 1);\n\trc = __linearize(ctxt, addr, &max_size, 1, false, true, mode, &linear);\n\tif (rc == X86EMUL_CONTINUE)\n\t\tctxt->_eip = addr.ea;\n\treturn rc;\n}\n\nstatic inline int assign_eip_near(struct x86_emulate_ctxt *ctxt, ulong dst)\n{\n\treturn assign_eip(ctxt, dst, ctxt->mode);\n}\n\nstatic int assign_eip_far(struct x86_emulate_ctxt *ctxt, ulong dst,\n\t\t\t  const struct desc_struct *cs_desc)\n{\n\tenum x86emul_mode mode = ctxt->mode;\n\tint rc;\n\n#ifdef CONFIG_X86_64\n\tif (ctxt->mode >= X86EMUL_MODE_PROT16) {\n\t\tif (cs_desc->l) {\n\t\t\tu64 efer = 0;\n\n\t\t\tctxt->ops->get_msr(ctxt, MSR_EFER, &efer);\n\t\t\tif (efer & EFER_LMA)\n\t\t\t\tmode = X86EMUL_MODE_PROT64;\n\t\t} else\n\t\t\tmode = X86EMUL_MODE_PROT32; /* temporary value */\n\t}\n#endif\n\tif (mode == X86EMUL_MODE_PROT16 || mode == X86EMUL_MODE_PROT32)\n\t\tmode = cs_desc->d ? X86EMUL_MODE_PROT32 : X86EMUL_MODE_PROT16;\n\trc = assign_eip(ctxt, dst, mode);\n\tif (rc == X86EMUL_CONTINUE)\n\t\tctxt->mode = mode;\n\treturn rc;\n}\n\nstatic inline int jmp_rel(struct x86_emulate_ctxt *ctxt, int rel)\n{\n\treturn assign_eip_near(ctxt, ctxt->_eip + rel);\n}\n\nstatic int segmented_read_std(struct x86_emulate_ctxt *ctxt,\n\t\t\t      struct segmented_address addr,\n\t\t\t      void *data,\n\t\t\t      unsigned size)\n{\n\tint rc;\n\tulong linear;\n\n\trc = linearize(ctxt, addr, size, false, &linear);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\treturn ctxt->ops->read_std(ctxt, linear, data, size, &ctxt->exception);\n}\n\nstatic int segmented_write_std(struct x86_emulate_ctxt *ctxt,\n\t\t\t       struct segmented_address addr,\n\t\t\t       void *data,\n\t\t\t       unsigned int size)\n{\n\tint rc;\n\tulong linear;\n\n\trc = linearize(ctxt, addr, size, true, &linear);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\treturn ctxt->ops->write_std(ctxt, linear, data, size, &ctxt->exception);\n}\n\n/*\n * Prefetch the remaining bytes of the instruction without crossing page\n * boundary if they are not in fetch_cache yet.\n */\nstatic int __do_insn_fetch_bytes(struct x86_emulate_ctxt *ctxt, int op_size)\n{\n\tint rc;\n\tunsigned size, max_size;\n\tunsigned long linear;\n\tint cur_size = ctxt->fetch.end - ctxt->fetch.data;\n\tstruct segmented_address addr = { .seg = VCPU_SREG_CS,\n\t\t\t\t\t   .ea = ctxt->eip + cur_size };\n\n\t/*\n\t * We do not know exactly how many bytes will be needed, and\n\t * __linearize is expensive, so fetch as much as possible.  We\n\t * just have to avoid going beyond the 15 byte limit, the end\n\t * of the segment, or the end of the page.\n\t *\n\t * __linearize is called with size 0 so that it does not do any\n\t * boundary check itself.  Instead, we use max_size to check\n\t * against op_size.\n\t */\n\trc = __linearize(ctxt, addr, &max_size, 0, false, true, ctxt->mode,\n\t\t\t &linear);\n\tif (unlikely(rc != X86EMUL_CONTINUE))\n\t\treturn rc;\n\n\tsize = min_t(unsigned, 15UL ^ cur_size, max_size);\n\tsize = min_t(unsigned, size, PAGE_SIZE - offset_in_page(linear));\n\n\t/*\n\t * One instruction can only straddle two pages,\n\t * and one has been loaded at the beginning of\n\t * x86_decode_insn.  So, if not enough bytes\n\t * still, we must have hit the 15-byte boundary.\n\t */\n\tif (unlikely(size < op_size))\n\t\treturn emulate_gp(ctxt, 0);\n\n\trc = ctxt->ops->fetch(ctxt, linear, ctxt->fetch.end,\n\t\t\t      size, &ctxt->exception);\n\tif (unlikely(rc != X86EMUL_CONTINUE))\n\t\treturn rc;\n\tctxt->fetch.end += size;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic __always_inline int do_insn_fetch_bytes(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t\t       unsigned size)\n{\n\tunsigned done_size = ctxt->fetch.end - ctxt->fetch.ptr;\n\n\tif (unlikely(done_size < size))\n\t\treturn __do_insn_fetch_bytes(ctxt, size - done_size);\n\telse\n\t\treturn X86EMUL_CONTINUE;\n}\n\n/* Fetch next part of the instruction being emulated. */\n#define insn_fetch(_type, _ctxt)\t\t\t\t\t\\\n({\t_type _x;\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n\trc = do_insn_fetch_bytes(_ctxt, sizeof(_type));\t\t\t\\\n\tif (rc != X86EMUL_CONTINUE)\t\t\t\t\t\\\n\t\tgoto done;\t\t\t\t\t\t\\\n\tctxt->_eip += sizeof(_type);\t\t\t\t\t\\\n\t_x = *(_type __aligned(1) *) ctxt->fetch.ptr;\t\t\t\\\n\tctxt->fetch.ptr += sizeof(_type);\t\t\t\t\\\n\t_x;\t\t\t\t\t\t\t\t\\\n})\n\n#define insn_fetch_arr(_arr, _size, _ctxt)\t\t\t\t\\\n({\t\t\t\t\t\t\t\t\t\\\n\trc = do_insn_fetch_bytes(_ctxt, _size);\t\t\t\t\\\n\tif (rc != X86EMUL_CONTINUE)\t\t\t\t\t\\\n\t\tgoto done;\t\t\t\t\t\t\\\n\tctxt->_eip += (_size);\t\t\t\t\t\t\\\n\tmemcpy(_arr, ctxt->fetch.ptr, _size);\t\t\t\t\\\n\tctxt->fetch.ptr += (_size);\t\t\t\t\t\\\n})\n\n/*\n * Given the 'reg' portion of a ModRM byte, and a register block, return a\n * pointer into the block that addresses the relevant register.\n * @highbyte_regs specifies whether to decode AH,CH,DH,BH.\n */\nstatic void *decode_register(struct x86_emulate_ctxt *ctxt, u8 modrm_reg,\n\t\t\t     int byteop)\n{\n\tvoid *p;\n\tint highbyte_regs = (ctxt->rex_prefix == 0) && byteop;\n\n\tif (highbyte_regs && modrm_reg >= 4 && modrm_reg < 8)\n\t\tp = (unsigned char *)reg_rmw(ctxt, modrm_reg & 3) + 1;\n\telse\n\t\tp = reg_rmw(ctxt, modrm_reg);\n\treturn p;\n}\n\nstatic int read_descriptor(struct x86_emulate_ctxt *ctxt,\n\t\t\t   struct segmented_address addr,\n\t\t\t   u16 *size, unsigned long *address, int op_bytes)\n{\n\tint rc;\n\n\tif (op_bytes == 2)\n\t\top_bytes = 3;\n\t*address = 0;\n\trc = segmented_read_std(ctxt, addr, size, 2);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\taddr.ea += 2;\n\trc = segmented_read_std(ctxt, addr, address, op_bytes);\n\treturn rc;\n}\n\nFASTOP2(add);\nFASTOP2(or);\nFASTOP2(adc);\nFASTOP2(sbb);\nFASTOP2(and);\nFASTOP2(sub);\nFASTOP2(xor);\nFASTOP2(cmp);\nFASTOP2(test);\n\nFASTOP1SRC2(mul, mul_ex);\nFASTOP1SRC2(imul, imul_ex);\nFASTOP1SRC2EX(div, div_ex);\nFASTOP1SRC2EX(idiv, idiv_ex);\n\nFASTOP3WCL(shld);\nFASTOP3WCL(shrd);\n\nFASTOP2W(imul);\n\nFASTOP1(not);\nFASTOP1(neg);\nFASTOP1(inc);\nFASTOP1(dec);\n\nFASTOP2CL(rol);\nFASTOP2CL(ror);\nFASTOP2CL(rcl);\nFASTOP2CL(rcr);\nFASTOP2CL(shl);\nFASTOP2CL(shr);\nFASTOP2CL(sar);\n\nFASTOP2W(bsf);\nFASTOP2W(bsr);\nFASTOP2W(bt);\nFASTOP2W(bts);\nFASTOP2W(btr);\nFASTOP2W(btc);\n\nFASTOP2(xadd);\n\nFASTOP2R(cmp, cmp_r);\n\nstatic int em_bsf_c(struct x86_emulate_ctxt *ctxt)\n{\n\t/* If src is zero, do not writeback, but update flags */\n\tif (ctxt->src.val == 0)\n\t\tctxt->dst.type = OP_NONE;\n\treturn fastop(ctxt, em_bsf);\n}\n\nstatic int em_bsr_c(struct x86_emulate_ctxt *ctxt)\n{\n\t/* If src is zero, do not writeback, but update flags */\n\tif (ctxt->src.val == 0)\n\t\tctxt->dst.type = OP_NONE;\n\treturn fastop(ctxt, em_bsr);\n}\n\nstatic __always_inline u8 test_cc(unsigned int condition, unsigned long flags)\n{\n\tu8 rc;\n\tvoid (*fop)(void) = (void *)em_setcc + 4 * (condition & 0xf);\n\n\tflags = (flags & EFLAGS_MASK) | X86_EFLAGS_IF;\n\tasm(\"push %[flags]; popf; call *%[fastop]\"\n\t    : \"=a\"(rc) : [fastop]\"r\"(fop), [flags]\"r\"(flags));\n\treturn rc;\n}\n\nstatic void fetch_register_operand(struct operand *op)\n{\n\tswitch (op->bytes) {\n\tcase 1:\n\t\top->val = *(u8 *)op->addr.reg;\n\t\tbreak;\n\tcase 2:\n\t\top->val = *(u16 *)op->addr.reg;\n\t\tbreak;\n\tcase 4:\n\t\top->val = *(u32 *)op->addr.reg;\n\t\tbreak;\n\tcase 8:\n\t\top->val = *(u64 *)op->addr.reg;\n\t\tbreak;\n\t}\n}\n\nstatic void read_sse_reg(struct x86_emulate_ctxt *ctxt, sse128_t *data, int reg)\n{\n\tctxt->ops->get_fpu(ctxt);\n\tswitch (reg) {\n\tcase 0: asm(\"movdqa %%xmm0, %0\" : \"=m\"(*data)); break;\n\tcase 1: asm(\"movdqa %%xmm1, %0\" : \"=m\"(*data)); break;\n\tcase 2: asm(\"movdqa %%xmm2, %0\" : \"=m\"(*data)); break;\n\tcase 3: asm(\"movdqa %%xmm3, %0\" : \"=m\"(*data)); break;\n\tcase 4: asm(\"movdqa %%xmm4, %0\" : \"=m\"(*data)); break;\n\tcase 5: asm(\"movdqa %%xmm5, %0\" : \"=m\"(*data)); break;\n\tcase 6: asm(\"movdqa %%xmm6, %0\" : \"=m\"(*data)); break;\n\tcase 7: asm(\"movdqa %%xmm7, %0\" : \"=m\"(*data)); break;\n#ifdef CONFIG_X86_64\n\tcase 8: asm(\"movdqa %%xmm8, %0\" : \"=m\"(*data)); break;\n\tcase 9: asm(\"movdqa %%xmm9, %0\" : \"=m\"(*data)); break;\n\tcase 10: asm(\"movdqa %%xmm10, %0\" : \"=m\"(*data)); break;\n\tcase 11: asm(\"movdqa %%xmm11, %0\" : \"=m\"(*data)); break;\n\tcase 12: asm(\"movdqa %%xmm12, %0\" : \"=m\"(*data)); break;\n\tcase 13: asm(\"movdqa %%xmm13, %0\" : \"=m\"(*data)); break;\n\tcase 14: asm(\"movdqa %%xmm14, %0\" : \"=m\"(*data)); break;\n\tcase 15: asm(\"movdqa %%xmm15, %0\" : \"=m\"(*data)); break;\n#endif\n\tdefault: BUG();\n\t}\n\tctxt->ops->put_fpu(ctxt);\n}\n\nstatic void write_sse_reg(struct x86_emulate_ctxt *ctxt, sse128_t *data,\n\t\t\t  int reg)\n{\n\tctxt->ops->get_fpu(ctxt);\n\tswitch (reg) {\n\tcase 0: asm(\"movdqa %0, %%xmm0\" : : \"m\"(*data)); break;\n\tcase 1: asm(\"movdqa %0, %%xmm1\" : : \"m\"(*data)); break;\n\tcase 2: asm(\"movdqa %0, %%xmm2\" : : \"m\"(*data)); break;\n\tcase 3: asm(\"movdqa %0, %%xmm3\" : : \"m\"(*data)); break;\n\tcase 4: asm(\"movdqa %0, %%xmm4\" : : \"m\"(*data)); break;\n\tcase 5: asm(\"movdqa %0, %%xmm5\" : : \"m\"(*data)); break;\n\tcase 6: asm(\"movdqa %0, %%xmm6\" : : \"m\"(*data)); break;\n\tcase 7: asm(\"movdqa %0, %%xmm7\" : : \"m\"(*data)); break;\n#ifdef CONFIG_X86_64\n\tcase 8: asm(\"movdqa %0, %%xmm8\" : : \"m\"(*data)); break;\n\tcase 9: asm(\"movdqa %0, %%xmm9\" : : \"m\"(*data)); break;\n\tcase 10: asm(\"movdqa %0, %%xmm10\" : : \"m\"(*data)); break;\n\tcase 11: asm(\"movdqa %0, %%xmm11\" : : \"m\"(*data)); break;\n\tcase 12: asm(\"movdqa %0, %%xmm12\" : : \"m\"(*data)); break;\n\tcase 13: asm(\"movdqa %0, %%xmm13\" : : \"m\"(*data)); break;\n\tcase 14: asm(\"movdqa %0, %%xmm14\" : : \"m\"(*data)); break;\n\tcase 15: asm(\"movdqa %0, %%xmm15\" : : \"m\"(*data)); break;\n#endif\n\tdefault: BUG();\n\t}\n\tctxt->ops->put_fpu(ctxt);\n}\n\nstatic void read_mmx_reg(struct x86_emulate_ctxt *ctxt, u64 *data, int reg)\n{\n\tctxt->ops->get_fpu(ctxt);\n\tswitch (reg) {\n\tcase 0: asm(\"movq %%mm0, %0\" : \"=m\"(*data)); break;\n\tcase 1: asm(\"movq %%mm1, %0\" : \"=m\"(*data)); break;\n\tcase 2: asm(\"movq %%mm2, %0\" : \"=m\"(*data)); break;\n\tcase 3: asm(\"movq %%mm3, %0\" : \"=m\"(*data)); break;\n\tcase 4: asm(\"movq %%mm4, %0\" : \"=m\"(*data)); break;\n\tcase 5: asm(\"movq %%mm5, %0\" : \"=m\"(*data)); break;\n\tcase 6: asm(\"movq %%mm6, %0\" : \"=m\"(*data)); break;\n\tcase 7: asm(\"movq %%mm7, %0\" : \"=m\"(*data)); break;\n\tdefault: BUG();\n\t}\n\tctxt->ops->put_fpu(ctxt);\n}\n\nstatic void write_mmx_reg(struct x86_emulate_ctxt *ctxt, u64 *data, int reg)\n{\n\tctxt->ops->get_fpu(ctxt);\n\tswitch (reg) {\n\tcase 0: asm(\"movq %0, %%mm0\" : : \"m\"(*data)); break;\n\tcase 1: asm(\"movq %0, %%mm1\" : : \"m\"(*data)); break;\n\tcase 2: asm(\"movq %0, %%mm2\" : : \"m\"(*data)); break;\n\tcase 3: asm(\"movq %0, %%mm3\" : : \"m\"(*data)); break;\n\tcase 4: asm(\"movq %0, %%mm4\" : : \"m\"(*data)); break;\n\tcase 5: asm(\"movq %0, %%mm5\" : : \"m\"(*data)); break;\n\tcase 6: asm(\"movq %0, %%mm6\" : : \"m\"(*data)); break;\n\tcase 7: asm(\"movq %0, %%mm7\" : : \"m\"(*data)); break;\n\tdefault: BUG();\n\t}\n\tctxt->ops->put_fpu(ctxt);\n}\n\nstatic int em_fninit(struct x86_emulate_ctxt *ctxt)\n{\n\tif (ctxt->ops->get_cr(ctxt, 0) & (X86_CR0_TS | X86_CR0_EM))\n\t\treturn emulate_nm(ctxt);\n\n\tctxt->ops->get_fpu(ctxt);\n\tasm volatile(\"fninit\");\n\tctxt->ops->put_fpu(ctxt);\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_fnstcw(struct x86_emulate_ctxt *ctxt)\n{\n\tu16 fcw;\n\n\tif (ctxt->ops->get_cr(ctxt, 0) & (X86_CR0_TS | X86_CR0_EM))\n\t\treturn emulate_nm(ctxt);\n\n\tctxt->ops->get_fpu(ctxt);\n\tasm volatile(\"fnstcw %0\": \"+m\"(fcw));\n\tctxt->ops->put_fpu(ctxt);\n\n\tctxt->dst.val = fcw;\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_fnstsw(struct x86_emulate_ctxt *ctxt)\n{\n\tu16 fsw;\n\n\tif (ctxt->ops->get_cr(ctxt, 0) & (X86_CR0_TS | X86_CR0_EM))\n\t\treturn emulate_nm(ctxt);\n\n\tctxt->ops->get_fpu(ctxt);\n\tasm volatile(\"fnstsw %0\": \"+m\"(fsw));\n\tctxt->ops->put_fpu(ctxt);\n\n\tctxt->dst.val = fsw;\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic void decode_register_operand(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t    struct operand *op)\n{\n\tunsigned reg = ctxt->modrm_reg;\n\n\tif (!(ctxt->d & ModRM))\n\t\treg = (ctxt->b & 7) | ((ctxt->rex_prefix & 1) << 3);\n\n\tif (ctxt->d & Sse) {\n\t\top->type = OP_XMM;\n\t\top->bytes = 16;\n\t\top->addr.xmm = reg;\n\t\tread_sse_reg(ctxt, &op->vec_val, reg);\n\t\treturn;\n\t}\n\tif (ctxt->d & Mmx) {\n\t\treg &= 7;\n\t\top->type = OP_MM;\n\t\top->bytes = 8;\n\t\top->addr.mm = reg;\n\t\treturn;\n\t}\n\n\top->type = OP_REG;\n\top->bytes = (ctxt->d & ByteOp) ? 1 : ctxt->op_bytes;\n\top->addr.reg = decode_register(ctxt, reg, ctxt->d & ByteOp);\n\n\tfetch_register_operand(op);\n\top->orig_val = op->val;\n}\n\nstatic void adjust_modrm_seg(struct x86_emulate_ctxt *ctxt, int base_reg)\n{\n\tif (base_reg == VCPU_REGS_RSP || base_reg == VCPU_REGS_RBP)\n\t\tctxt->modrm_seg = VCPU_SREG_SS;\n}\n\nstatic int decode_modrm(struct x86_emulate_ctxt *ctxt,\n\t\t\tstruct operand *op)\n{\n\tu8 sib;\n\tint index_reg, base_reg, scale;\n\tint rc = X86EMUL_CONTINUE;\n\tulong modrm_ea = 0;\n\n\tctxt->modrm_reg = ((ctxt->rex_prefix << 1) & 8); /* REX.R */\n\tindex_reg = (ctxt->rex_prefix << 2) & 8; /* REX.X */\n\tbase_reg = (ctxt->rex_prefix << 3) & 8; /* REX.B */\n\n\tctxt->modrm_mod = (ctxt->modrm & 0xc0) >> 6;\n\tctxt->modrm_reg |= (ctxt->modrm & 0x38) >> 3;\n\tctxt->modrm_rm = base_reg | (ctxt->modrm & 0x07);\n\tctxt->modrm_seg = VCPU_SREG_DS;\n\n\tif (ctxt->modrm_mod == 3 || (ctxt->d & NoMod)) {\n\t\top->type = OP_REG;\n\t\top->bytes = (ctxt->d & ByteOp) ? 1 : ctxt->op_bytes;\n\t\top->addr.reg = decode_register(ctxt, ctxt->modrm_rm,\n\t\t\t\tctxt->d & ByteOp);\n\t\tif (ctxt->d & Sse) {\n\t\t\top->type = OP_XMM;\n\t\t\top->bytes = 16;\n\t\t\top->addr.xmm = ctxt->modrm_rm;\n\t\t\tread_sse_reg(ctxt, &op->vec_val, ctxt->modrm_rm);\n\t\t\treturn rc;\n\t\t}\n\t\tif (ctxt->d & Mmx) {\n\t\t\top->type = OP_MM;\n\t\t\top->bytes = 8;\n\t\t\top->addr.mm = ctxt->modrm_rm & 7;\n\t\t\treturn rc;\n\t\t}\n\t\tfetch_register_operand(op);\n\t\treturn rc;\n\t}\n\n\top->type = OP_MEM;\n\n\tif (ctxt->ad_bytes == 2) {\n\t\tunsigned bx = reg_read(ctxt, VCPU_REGS_RBX);\n\t\tunsigned bp = reg_read(ctxt, VCPU_REGS_RBP);\n\t\tunsigned si = reg_read(ctxt, VCPU_REGS_RSI);\n\t\tunsigned di = reg_read(ctxt, VCPU_REGS_RDI);\n\n\t\t/* 16-bit ModR/M decode. */\n\t\tswitch (ctxt->modrm_mod) {\n\t\tcase 0:\n\t\t\tif (ctxt->modrm_rm == 6)\n\t\t\t\tmodrm_ea += insn_fetch(u16, ctxt);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tmodrm_ea += insn_fetch(s8, ctxt);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tmodrm_ea += insn_fetch(u16, ctxt);\n\t\t\tbreak;\n\t\t}\n\t\tswitch (ctxt->modrm_rm) {\n\t\tcase 0:\n\t\t\tmodrm_ea += bx + si;\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tmodrm_ea += bx + di;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tmodrm_ea += bp + si;\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tmodrm_ea += bp + di;\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tmodrm_ea += si;\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tmodrm_ea += di;\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tif (ctxt->modrm_mod != 0)\n\t\t\t\tmodrm_ea += bp;\n\t\t\tbreak;\n\t\tcase 7:\n\t\t\tmodrm_ea += bx;\n\t\t\tbreak;\n\t\t}\n\t\tif (ctxt->modrm_rm == 2 || ctxt->modrm_rm == 3 ||\n\t\t    (ctxt->modrm_rm == 6 && ctxt->modrm_mod != 0))\n\t\t\tctxt->modrm_seg = VCPU_SREG_SS;\n\t\tmodrm_ea = (u16)modrm_ea;\n\t} else {\n\t\t/* 32/64-bit ModR/M decode. */\n\t\tif ((ctxt->modrm_rm & 7) == 4) {\n\t\t\tsib = insn_fetch(u8, ctxt);\n\t\t\tindex_reg |= (sib >> 3) & 7;\n\t\t\tbase_reg |= sib & 7;\n\t\t\tscale = sib >> 6;\n\n\t\t\tif ((base_reg & 7) == 5 && ctxt->modrm_mod == 0)\n\t\t\t\tmodrm_ea += insn_fetch(s32, ctxt);\n\t\t\telse {\n\t\t\t\tmodrm_ea += reg_read(ctxt, base_reg);\n\t\t\t\tadjust_modrm_seg(ctxt, base_reg);\n\t\t\t\t/* Increment ESP on POP [ESP] */\n\t\t\t\tif ((ctxt->d & IncSP) &&\n\t\t\t\t    base_reg == VCPU_REGS_RSP)\n\t\t\t\t\tmodrm_ea += ctxt->op_bytes;\n\t\t\t}\n\t\t\tif (index_reg != 4)\n\t\t\t\tmodrm_ea += reg_read(ctxt, index_reg) << scale;\n\t\t} else if ((ctxt->modrm_rm & 7) == 5 && ctxt->modrm_mod == 0) {\n\t\t\tmodrm_ea += insn_fetch(s32, ctxt);\n\t\t\tif (ctxt->mode == X86EMUL_MODE_PROT64)\n\t\t\t\tctxt->rip_relative = 1;\n\t\t} else {\n\t\t\tbase_reg = ctxt->modrm_rm;\n\t\t\tmodrm_ea += reg_read(ctxt, base_reg);\n\t\t\tadjust_modrm_seg(ctxt, base_reg);\n\t\t}\n\t\tswitch (ctxt->modrm_mod) {\n\t\tcase 1:\n\t\t\tmodrm_ea += insn_fetch(s8, ctxt);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tmodrm_ea += insn_fetch(s32, ctxt);\n\t\t\tbreak;\n\t\t}\n\t}\n\top->addr.mem.ea = modrm_ea;\n\tif (ctxt->ad_bytes != 8)\n\t\tctxt->memop.addr.mem.ea = (u32)ctxt->memop.addr.mem.ea;\n\ndone:\n\treturn rc;\n}\n\nstatic int decode_abs(struct x86_emulate_ctxt *ctxt,\n\t\t      struct operand *op)\n{\n\tint rc = X86EMUL_CONTINUE;\n\n\top->type = OP_MEM;\n\tswitch (ctxt->ad_bytes) {\n\tcase 2:\n\t\top->addr.mem.ea = insn_fetch(u16, ctxt);\n\t\tbreak;\n\tcase 4:\n\t\top->addr.mem.ea = insn_fetch(u32, ctxt);\n\t\tbreak;\n\tcase 8:\n\t\top->addr.mem.ea = insn_fetch(u64, ctxt);\n\t\tbreak;\n\t}\ndone:\n\treturn rc;\n}\n\nstatic void fetch_bit_operand(struct x86_emulate_ctxt *ctxt)\n{\n\tlong sv = 0, mask;\n\n\tif (ctxt->dst.type == OP_MEM && ctxt->src.type == OP_REG) {\n\t\tmask = ~((long)ctxt->dst.bytes * 8 - 1);\n\n\t\tif (ctxt->src.bytes == 2)\n\t\t\tsv = (s16)ctxt->src.val & (s16)mask;\n\t\telse if (ctxt->src.bytes == 4)\n\t\t\tsv = (s32)ctxt->src.val & (s32)mask;\n\t\telse\n\t\t\tsv = (s64)ctxt->src.val & (s64)mask;\n\n\t\tctxt->dst.addr.mem.ea = address_mask(ctxt,\n\t\t\t\t\t   ctxt->dst.addr.mem.ea + (sv >> 3));\n\t}\n\n\t/* only subword offset */\n\tctxt->src.val &= (ctxt->dst.bytes << 3) - 1;\n}\n\nstatic int read_emulated(struct x86_emulate_ctxt *ctxt,\n\t\t\t unsigned long addr, void *dest, unsigned size)\n{\n\tint rc;\n\tstruct read_cache *mc = &ctxt->mem_read;\n\n\tif (mc->pos < mc->end)\n\t\tgoto read_cached;\n\n\tWARN_ON((mc->end + size) >= sizeof(mc->data));\n\n\trc = ctxt->ops->read_emulated(ctxt, addr, mc->data + mc->end, size,\n\t\t\t\t      &ctxt->exception);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tmc->end += size;\n\nread_cached:\n\tmemcpy(dest, mc->data + mc->pos, size);\n\tmc->pos += size;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int segmented_read(struct x86_emulate_ctxt *ctxt,\n\t\t\t  struct segmented_address addr,\n\t\t\t  void *data,\n\t\t\t  unsigned size)\n{\n\tint rc;\n\tulong linear;\n\n\trc = linearize(ctxt, addr, size, false, &linear);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\treturn read_emulated(ctxt, linear, data, size);\n}\n\nstatic int segmented_write(struct x86_emulate_ctxt *ctxt,\n\t\t\t   struct segmented_address addr,\n\t\t\t   const void *data,\n\t\t\t   unsigned size)\n{\n\tint rc;\n\tulong linear;\n\n\trc = linearize(ctxt, addr, size, true, &linear);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\treturn ctxt->ops->write_emulated(ctxt, linear, data, size,\n\t\t\t\t\t &ctxt->exception);\n}\n\nstatic int segmented_cmpxchg(struct x86_emulate_ctxt *ctxt,\n\t\t\t     struct segmented_address addr,\n\t\t\t     const void *orig_data, const void *data,\n\t\t\t     unsigned size)\n{\n\tint rc;\n\tulong linear;\n\n\trc = linearize(ctxt, addr, size, true, &linear);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\treturn ctxt->ops->cmpxchg_emulated(ctxt, linear, orig_data, data,\n\t\t\t\t\t   size, &ctxt->exception);\n}\n\nstatic int pio_in_emulated(struct x86_emulate_ctxt *ctxt,\n\t\t\t   unsigned int size, unsigned short port,\n\t\t\t   void *dest)\n{\n\tstruct read_cache *rc = &ctxt->io_read;\n\n\tif (rc->pos == rc->end) { /* refill pio read ahead */\n\t\tunsigned int in_page, n;\n\t\tunsigned int count = ctxt->rep_prefix ?\n\t\t\taddress_mask(ctxt, reg_read(ctxt, VCPU_REGS_RCX)) : 1;\n\t\tin_page = (ctxt->eflags & X86_EFLAGS_DF) ?\n\t\t\toffset_in_page(reg_read(ctxt, VCPU_REGS_RDI)) :\n\t\t\tPAGE_SIZE - offset_in_page(reg_read(ctxt, VCPU_REGS_RDI));\n\t\tn = min3(in_page, (unsigned int)sizeof(rc->data) / size, count);\n\t\tif (n == 0)\n\t\t\tn = 1;\n\t\trc->pos = rc->end = 0;\n\t\tif (!ctxt->ops->pio_in_emulated(ctxt, size, port, rc->data, n))\n\t\t\treturn 0;\n\t\trc->end = n * size;\n\t}\n\n\tif (ctxt->rep_prefix && (ctxt->d & String) &&\n\t    !(ctxt->eflags & X86_EFLAGS_DF)) {\n\t\tctxt->dst.data = rc->data + rc->pos;\n\t\tctxt->dst.type = OP_MEM_STR;\n\t\tctxt->dst.count = (rc->end - rc->pos) / size;\n\t\trc->pos = rc->end;\n\t} else {\n\t\tmemcpy(dest, rc->data + rc->pos, size);\n\t\trc->pos += size;\n\t}\n\treturn 1;\n}\n\nstatic int read_interrupt_descriptor(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t     u16 index, struct desc_struct *desc)\n{\n\tstruct desc_ptr dt;\n\tulong addr;\n\n\tctxt->ops->get_idt(ctxt, &dt);\n\n\tif (dt.size < index * 8 + 7)\n\t\treturn emulate_gp(ctxt, index << 3 | 0x2);\n\n\taddr = dt.address + index * 8;\n\treturn ctxt->ops->read_std(ctxt, addr, desc, sizeof *desc,\n\t\t\t\t   &ctxt->exception);\n}\n\nstatic void get_descriptor_table_ptr(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t     u16 selector, struct desc_ptr *dt)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tu32 base3 = 0;\n\n\tif (selector & 1 << 2) {\n\t\tstruct desc_struct desc;\n\t\tu16 sel;\n\n\t\tmemset (dt, 0, sizeof *dt);\n\t\tif (!ops->get_segment(ctxt, &sel, &desc, &base3,\n\t\t\t\t      VCPU_SREG_LDTR))\n\t\t\treturn;\n\n\t\tdt->size = desc_limit_scaled(&desc); /* what if limit > 65535? */\n\t\tdt->address = get_desc_base(&desc) | ((u64)base3 << 32);\n\t} else\n\t\tops->get_gdt(ctxt, dt);\n}\n\nstatic int get_descriptor_ptr(struct x86_emulate_ctxt *ctxt,\n\t\t\t      u16 selector, ulong *desc_addr_p)\n{\n\tstruct desc_ptr dt;\n\tu16 index = selector >> 3;\n\tulong addr;\n\n\tget_descriptor_table_ptr(ctxt, selector, &dt);\n\n\tif (dt.size < index * 8 + 7)\n\t\treturn emulate_gp(ctxt, selector & 0xfffc);\n\n\taddr = dt.address + index * 8;\n\n#ifdef CONFIG_X86_64\n\tif (addr >> 32 != 0) {\n\t\tu64 efer = 0;\n\n\t\tctxt->ops->get_msr(ctxt, MSR_EFER, &efer);\n\t\tif (!(efer & EFER_LMA))\n\t\t\taddr &= (u32)-1;\n\t}\n#endif\n\n\t*desc_addr_p = addr;\n\treturn X86EMUL_CONTINUE;\n}\n\n/* allowed just for 8 bytes segments */\nstatic int read_segment_descriptor(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t   u16 selector, struct desc_struct *desc,\n\t\t\t\t   ulong *desc_addr_p)\n{\n\tint rc;\n\n\trc = get_descriptor_ptr(ctxt, selector, desc_addr_p);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\treturn ctxt->ops->read_std(ctxt, *desc_addr_p, desc, sizeof(*desc),\n\t\t\t\t   &ctxt->exception);\n}\n\n/* allowed just for 8 bytes segments */\nstatic int write_segment_descriptor(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t    u16 selector, struct desc_struct *desc)\n{\n\tint rc;\n\tulong addr;\n\n\trc = get_descriptor_ptr(ctxt, selector, &addr);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\treturn ctxt->ops->write_std(ctxt, addr, desc, sizeof *desc,\n\t\t\t\t    &ctxt->exception);\n}\n\n/* Does not support long mode */\nstatic int __load_segment_descriptor(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t     u16 selector, int seg, u8 cpl,\n\t\t\t\t     enum x86_transfer_type transfer,\n\t\t\t\t     struct desc_struct *desc)\n{\n\tstruct desc_struct seg_desc, old_desc;\n\tu8 dpl, rpl;\n\tunsigned err_vec = GP_VECTOR;\n\tu32 err_code = 0;\n\tbool null_selector = !(selector & ~0x3); /* 0000-0003 are null */\n\tulong desc_addr;\n\tint ret;\n\tu16 dummy;\n\tu32 base3 = 0;\n\n\tmemset(&seg_desc, 0, sizeof seg_desc);\n\n\tif (ctxt->mode == X86EMUL_MODE_REAL) {\n\t\t/* set real mode segment descriptor (keep limit etc. for\n\t\t * unreal mode) */\n\t\tctxt->ops->get_segment(ctxt, &dummy, &seg_desc, NULL, seg);\n\t\tset_desc_base(&seg_desc, selector << 4);\n\t\tgoto load;\n\t} else if (seg <= VCPU_SREG_GS && ctxt->mode == X86EMUL_MODE_VM86) {\n\t\t/* VM86 needs a clean new segment descriptor */\n\t\tset_desc_base(&seg_desc, selector << 4);\n\t\tset_desc_limit(&seg_desc, 0xffff);\n\t\tseg_desc.type = 3;\n\t\tseg_desc.p = 1;\n\t\tseg_desc.s = 1;\n\t\tseg_desc.dpl = 3;\n\t\tgoto load;\n\t}\n\n\trpl = selector & 3;\n\n\t/* NULL selector is not valid for TR, CS and SS (except for long mode) */\n\tif ((seg == VCPU_SREG_CS\n\t     || (seg == VCPU_SREG_SS\n\t\t && (ctxt->mode != X86EMUL_MODE_PROT64 || rpl != cpl))\n\t     || seg == VCPU_SREG_TR)\n\t    && null_selector)\n\t\tgoto exception;\n\n\t/* TR should be in GDT only */\n\tif (seg == VCPU_SREG_TR && (selector & (1 << 2)))\n\t\tgoto exception;\n\n\tif (null_selector) /* for NULL selector skip all following checks */\n\t\tgoto load;\n\n\tret = read_segment_descriptor(ctxt, selector, &seg_desc, &desc_addr);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\n\terr_code = selector & 0xfffc;\n\terr_vec = (transfer == X86_TRANSFER_TASK_SWITCH) ? TS_VECTOR :\n\t\t\t\t\t\t\t   GP_VECTOR;\n\n\t/* can't load system descriptor into segment selector */\n\tif (seg <= VCPU_SREG_GS && !seg_desc.s) {\n\t\tif (transfer == X86_TRANSFER_CALL_JMP)\n\t\t\treturn X86EMUL_UNHANDLEABLE;\n\t\tgoto exception;\n\t}\n\n\tif (!seg_desc.p) {\n\t\terr_vec = (seg == VCPU_SREG_SS) ? SS_VECTOR : NP_VECTOR;\n\t\tgoto exception;\n\t}\n\n\tdpl = seg_desc.dpl;\n\n\tswitch (seg) {\n\tcase VCPU_SREG_SS:\n\t\t/*\n\t\t * segment is not a writable data segment or segment\n\t\t * selector's RPL != CPL or segment selector's RPL != CPL\n\t\t */\n\t\tif (rpl != cpl || (seg_desc.type & 0xa) != 0x2 || dpl != cpl)\n\t\t\tgoto exception;\n\t\tbreak;\n\tcase VCPU_SREG_CS:\n\t\tif (!(seg_desc.type & 8))\n\t\t\tgoto exception;\n\n\t\tif (seg_desc.type & 4) {\n\t\t\t/* conforming */\n\t\t\tif (dpl > cpl)\n\t\t\t\tgoto exception;\n\t\t} else {\n\t\t\t/* nonconforming */\n\t\t\tif (rpl > cpl || dpl != cpl)\n\t\t\t\tgoto exception;\n\t\t}\n\t\t/* in long-mode d/b must be clear if l is set */\n\t\tif (seg_desc.d && seg_desc.l) {\n\t\t\tu64 efer = 0;\n\n\t\t\tctxt->ops->get_msr(ctxt, MSR_EFER, &efer);\n\t\t\tif (efer & EFER_LMA)\n\t\t\t\tgoto exception;\n\t\t}\n\n\t\t/* CS(RPL) <- CPL */\n\t\tselector = (selector & 0xfffc) | cpl;\n\t\tbreak;\n\tcase VCPU_SREG_TR:\n\t\tif (seg_desc.s || (seg_desc.type != 1 && seg_desc.type != 9))\n\t\t\tgoto exception;\n\t\told_desc = seg_desc;\n\t\tseg_desc.type |= 2; /* busy */\n\t\tret = ctxt->ops->cmpxchg_emulated(ctxt, desc_addr, &old_desc, &seg_desc,\n\t\t\t\t\t\t  sizeof(seg_desc), &ctxt->exception);\n\t\tif (ret != X86EMUL_CONTINUE)\n\t\t\treturn ret;\n\t\tbreak;\n\tcase VCPU_SREG_LDTR:\n\t\tif (seg_desc.s || seg_desc.type != 2)\n\t\t\tgoto exception;\n\t\tbreak;\n\tdefault: /*  DS, ES, FS, or GS */\n\t\t/*\n\t\t * segment is not a data or readable code segment or\n\t\t * ((segment is a data or nonconforming code segment)\n\t\t * and (both RPL and CPL > DPL))\n\t\t */\n\t\tif ((seg_desc.type & 0xa) == 0x8 ||\n\t\t    (((seg_desc.type & 0xc) != 0xc) &&\n\t\t     (rpl > dpl && cpl > dpl)))\n\t\t\tgoto exception;\n\t\tbreak;\n\t}\n\n\tif (seg_desc.s) {\n\t\t/* mark segment as accessed */\n\t\tif (!(seg_desc.type & 1)) {\n\t\t\tseg_desc.type |= 1;\n\t\t\tret = write_segment_descriptor(ctxt, selector,\n\t\t\t\t\t\t       &seg_desc);\n\t\t\tif (ret != X86EMUL_CONTINUE)\n\t\t\t\treturn ret;\n\t\t}\n\t} else if (ctxt->mode == X86EMUL_MODE_PROT64) {\n\t\tret = ctxt->ops->read_std(ctxt, desc_addr+8, &base3,\n\t\t\t\tsizeof(base3), &ctxt->exception);\n\t\tif (ret != X86EMUL_CONTINUE)\n\t\t\treturn ret;\n\t\tif (is_noncanonical_address(get_desc_base(&seg_desc) |\n\t\t\t\t\t     ((u64)base3 << 32)))\n\t\t\treturn emulate_gp(ctxt, 0);\n\t}\nload:\n\tctxt->ops->set_segment(ctxt, selector, &seg_desc, base3, seg);\n\tif (desc)\n\t\t*desc = seg_desc;\n\treturn X86EMUL_CONTINUE;\nexception:\n\treturn emulate_exception(ctxt, err_vec, err_code, true);\n}\n\nstatic int load_segment_descriptor(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t   u16 selector, int seg)\n{\n\tu8 cpl = ctxt->ops->cpl(ctxt);\n\treturn __load_segment_descriptor(ctxt, selector, seg, cpl,\n\t\t\t\t\t X86_TRANSFER_NONE, NULL);\n}\n\nstatic void write_register_operand(struct operand *op)\n{\n\treturn assign_register(op->addr.reg, op->val, op->bytes);\n}\n\nstatic int writeback(struct x86_emulate_ctxt *ctxt, struct operand *op)\n{\n\tswitch (op->type) {\n\tcase OP_REG:\n\t\twrite_register_operand(op);\n\t\tbreak;\n\tcase OP_MEM:\n\t\tif (ctxt->lock_prefix)\n\t\t\treturn segmented_cmpxchg(ctxt,\n\t\t\t\t\t\t op->addr.mem,\n\t\t\t\t\t\t &op->orig_val,\n\t\t\t\t\t\t &op->val,\n\t\t\t\t\t\t op->bytes);\n\t\telse\n\t\t\treturn segmented_write(ctxt,\n\t\t\t\t\t       op->addr.mem,\n\t\t\t\t\t       &op->val,\n\t\t\t\t\t       op->bytes);\n\t\tbreak;\n\tcase OP_MEM_STR:\n\t\treturn segmented_write(ctxt,\n\t\t\t\t       op->addr.mem,\n\t\t\t\t       op->data,\n\t\t\t\t       op->bytes * op->count);\n\t\tbreak;\n\tcase OP_XMM:\n\t\twrite_sse_reg(ctxt, &op->vec_val, op->addr.xmm);\n\t\tbreak;\n\tcase OP_MM:\n\t\twrite_mmx_reg(ctxt, &op->mm_val, op->addr.mm);\n\t\tbreak;\n\tcase OP_NONE:\n\t\t/* no writeback */\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int push(struct x86_emulate_ctxt *ctxt, void *data, int bytes)\n{\n\tstruct segmented_address addr;\n\n\trsp_increment(ctxt, -bytes);\n\taddr.ea = reg_read(ctxt, VCPU_REGS_RSP) & stack_mask(ctxt);\n\taddr.seg = VCPU_SREG_SS;\n\n\treturn segmented_write(ctxt, addr, data, bytes);\n}\n\nstatic int em_push(struct x86_emulate_ctxt *ctxt)\n{\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn push(ctxt, &ctxt->src.val, ctxt->op_bytes);\n}\n\nstatic int emulate_pop(struct x86_emulate_ctxt *ctxt,\n\t\t       void *dest, int len)\n{\n\tint rc;\n\tstruct segmented_address addr;\n\n\taddr.ea = reg_read(ctxt, VCPU_REGS_RSP) & stack_mask(ctxt);\n\taddr.seg = VCPU_SREG_SS;\n\trc = segmented_read(ctxt, addr, dest, len);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\trsp_increment(ctxt, len);\n\treturn rc;\n}\n\nstatic int em_pop(struct x86_emulate_ctxt *ctxt)\n{\n\treturn emulate_pop(ctxt, &ctxt->dst.val, ctxt->op_bytes);\n}\n\nstatic int emulate_popf(struct x86_emulate_ctxt *ctxt,\n\t\t\tvoid *dest, int len)\n{\n\tint rc;\n\tunsigned long val, change_mask;\n\tint iopl = (ctxt->eflags & X86_EFLAGS_IOPL) >> X86_EFLAGS_IOPL_BIT;\n\tint cpl = ctxt->ops->cpl(ctxt);\n\n\trc = emulate_pop(ctxt, &val, len);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tchange_mask = X86_EFLAGS_CF | X86_EFLAGS_PF | X86_EFLAGS_AF |\n\t\t      X86_EFLAGS_ZF | X86_EFLAGS_SF | X86_EFLAGS_OF |\n\t\t      X86_EFLAGS_TF | X86_EFLAGS_DF | X86_EFLAGS_NT |\n\t\t      X86_EFLAGS_AC | X86_EFLAGS_ID;\n\n\tswitch(ctxt->mode) {\n\tcase X86EMUL_MODE_PROT64:\n\tcase X86EMUL_MODE_PROT32:\n\tcase X86EMUL_MODE_PROT16:\n\t\tif (cpl == 0)\n\t\t\tchange_mask |= X86_EFLAGS_IOPL;\n\t\tif (cpl <= iopl)\n\t\t\tchange_mask |= X86_EFLAGS_IF;\n\t\tbreak;\n\tcase X86EMUL_MODE_VM86:\n\t\tif (iopl < 3)\n\t\t\treturn emulate_gp(ctxt, 0);\n\t\tchange_mask |= X86_EFLAGS_IF;\n\t\tbreak;\n\tdefault: /* real mode */\n\t\tchange_mask |= (X86_EFLAGS_IOPL | X86_EFLAGS_IF);\n\t\tbreak;\n\t}\n\n\t*(unsigned long *)dest =\n\t\t(ctxt->eflags & ~change_mask) | (val & change_mask);\n\n\treturn rc;\n}\n\nstatic int em_popf(struct x86_emulate_ctxt *ctxt)\n{\n\tctxt->dst.type = OP_REG;\n\tctxt->dst.addr.reg = &ctxt->eflags;\n\tctxt->dst.bytes = ctxt->op_bytes;\n\treturn emulate_popf(ctxt, &ctxt->dst.val, ctxt->op_bytes);\n}\n\nstatic int em_enter(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc;\n\tunsigned frame_size = ctxt->src.val;\n\tunsigned nesting_level = ctxt->src2.val & 31;\n\tulong rbp;\n\n\tif (nesting_level)\n\t\treturn X86EMUL_UNHANDLEABLE;\n\n\trbp = reg_read(ctxt, VCPU_REGS_RBP);\n\trc = push(ctxt, &rbp, stack_size(ctxt));\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\tassign_masked(reg_rmw(ctxt, VCPU_REGS_RBP), reg_read(ctxt, VCPU_REGS_RSP),\n\t\t      stack_mask(ctxt));\n\tassign_masked(reg_rmw(ctxt, VCPU_REGS_RSP),\n\t\t      reg_read(ctxt, VCPU_REGS_RSP) - frame_size,\n\t\t      stack_mask(ctxt));\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_leave(struct x86_emulate_ctxt *ctxt)\n{\n\tassign_masked(reg_rmw(ctxt, VCPU_REGS_RSP), reg_read(ctxt, VCPU_REGS_RBP),\n\t\t      stack_mask(ctxt));\n\treturn emulate_pop(ctxt, reg_rmw(ctxt, VCPU_REGS_RBP), ctxt->op_bytes);\n}\n\nstatic int em_push_sreg(struct x86_emulate_ctxt *ctxt)\n{\n\tint seg = ctxt->src2.val;\n\n\tctxt->src.val = get_segment_selector(ctxt, seg);\n\tif (ctxt->op_bytes == 4) {\n\t\trsp_increment(ctxt, -2);\n\t\tctxt->op_bytes = 2;\n\t}\n\n\treturn em_push(ctxt);\n}\n\nstatic int em_pop_sreg(struct x86_emulate_ctxt *ctxt)\n{\n\tint seg = ctxt->src2.val;\n\tunsigned long selector;\n\tint rc;\n\n\trc = emulate_pop(ctxt, &selector, 2);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tif (ctxt->modrm_reg == VCPU_SREG_SS)\n\t\tctxt->interruptibility = KVM_X86_SHADOW_INT_MOV_SS;\n\tif (ctxt->op_bytes > 2)\n\t\trsp_increment(ctxt, ctxt->op_bytes - 2);\n\n\trc = load_segment_descriptor(ctxt, (u16)selector, seg);\n\treturn rc;\n}\n\nstatic int em_pusha(struct x86_emulate_ctxt *ctxt)\n{\n\tunsigned long old_esp = reg_read(ctxt, VCPU_REGS_RSP);\n\tint rc = X86EMUL_CONTINUE;\n\tint reg = VCPU_REGS_RAX;\n\n\twhile (reg <= VCPU_REGS_RDI) {\n\t\t(reg == VCPU_REGS_RSP) ?\n\t\t(ctxt->src.val = old_esp) : (ctxt->src.val = reg_read(ctxt, reg));\n\n\t\trc = em_push(ctxt);\n\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\treturn rc;\n\n\t\t++reg;\n\t}\n\n\treturn rc;\n}\n\nstatic int em_pushf(struct x86_emulate_ctxt *ctxt)\n{\n\tctxt->src.val = (unsigned long)ctxt->eflags & ~X86_EFLAGS_VM;\n\treturn em_push(ctxt);\n}\n\nstatic int em_popa(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc = X86EMUL_CONTINUE;\n\tint reg = VCPU_REGS_RDI;\n\tu32 val;\n\n\twhile (reg >= VCPU_REGS_RAX) {\n\t\tif (reg == VCPU_REGS_RSP) {\n\t\t\trsp_increment(ctxt, ctxt->op_bytes);\n\t\t\t--reg;\n\t\t}\n\n\t\trc = emulate_pop(ctxt, &val, ctxt->op_bytes);\n\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\tbreak;\n\t\tassign_register(reg_rmw(ctxt, reg), val, ctxt->op_bytes);\n\t\t--reg;\n\t}\n\treturn rc;\n}\n\nstatic int __emulate_int_real(struct x86_emulate_ctxt *ctxt, int irq)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tint rc;\n\tstruct desc_ptr dt;\n\tgva_t cs_addr;\n\tgva_t eip_addr;\n\tu16 cs, eip;\n\n\t/* TODO: Add limit checks */\n\tctxt->src.val = ctxt->eflags;\n\trc = em_push(ctxt);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tctxt->eflags &= ~(X86_EFLAGS_IF | X86_EFLAGS_TF | X86_EFLAGS_AC);\n\n\tctxt->src.val = get_segment_selector(ctxt, VCPU_SREG_CS);\n\trc = em_push(ctxt);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tctxt->src.val = ctxt->_eip;\n\trc = em_push(ctxt);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tops->get_idt(ctxt, &dt);\n\n\teip_addr = dt.address + (irq << 2);\n\tcs_addr = dt.address + (irq << 2) + 2;\n\n\trc = ops->read_std(ctxt, cs_addr, &cs, 2, &ctxt->exception);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\trc = ops->read_std(ctxt, eip_addr, &eip, 2, &ctxt->exception);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\trc = load_segment_descriptor(ctxt, cs, VCPU_SREG_CS);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tctxt->_eip = eip;\n\n\treturn rc;\n}\n\nint emulate_int_real(struct x86_emulate_ctxt *ctxt, int irq)\n{\n\tint rc;\n\n\tinvalidate_registers(ctxt);\n\trc = __emulate_int_real(ctxt, irq);\n\tif (rc == X86EMUL_CONTINUE)\n\t\twriteback_registers(ctxt);\n\treturn rc;\n}\n\nstatic int emulate_int(struct x86_emulate_ctxt *ctxt, int irq)\n{\n\tswitch(ctxt->mode) {\n\tcase X86EMUL_MODE_REAL:\n\t\treturn __emulate_int_real(ctxt, irq);\n\tcase X86EMUL_MODE_VM86:\n\tcase X86EMUL_MODE_PROT16:\n\tcase X86EMUL_MODE_PROT32:\n\tcase X86EMUL_MODE_PROT64:\n\tdefault:\n\t\t/* Protected mode interrupts unimplemented yet */\n\t\treturn X86EMUL_UNHANDLEABLE;\n\t}\n}\n\nstatic int emulate_iret_real(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc = X86EMUL_CONTINUE;\n\tunsigned long temp_eip = 0;\n\tunsigned long temp_eflags = 0;\n\tunsigned long cs = 0;\n\tunsigned long mask = X86_EFLAGS_CF | X86_EFLAGS_PF | X86_EFLAGS_AF |\n\t\t\t     X86_EFLAGS_ZF | X86_EFLAGS_SF | X86_EFLAGS_TF |\n\t\t\t     X86_EFLAGS_IF | X86_EFLAGS_DF | X86_EFLAGS_OF |\n\t\t\t     X86_EFLAGS_IOPL | X86_EFLAGS_NT | X86_EFLAGS_RF |\n\t\t\t     X86_EFLAGS_AC | X86_EFLAGS_ID |\n\t\t\t     X86_EFLAGS_FIXED;\n\tunsigned long vm86_mask = X86_EFLAGS_VM | X86_EFLAGS_VIF |\n\t\t\t\t  X86_EFLAGS_VIP;\n\n\t/* TODO: Add stack limit check */\n\n\trc = emulate_pop(ctxt, &temp_eip, ctxt->op_bytes);\n\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tif (temp_eip & ~0xffff)\n\t\treturn emulate_gp(ctxt, 0);\n\n\trc = emulate_pop(ctxt, &cs, ctxt->op_bytes);\n\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\trc = emulate_pop(ctxt, &temp_eflags, ctxt->op_bytes);\n\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\trc = load_segment_descriptor(ctxt, (u16)cs, VCPU_SREG_CS);\n\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tctxt->_eip = temp_eip;\n\n\tif (ctxt->op_bytes == 4)\n\t\tctxt->eflags = ((temp_eflags & mask) | (ctxt->eflags & vm86_mask));\n\telse if (ctxt->op_bytes == 2) {\n\t\tctxt->eflags &= ~0xffff;\n\t\tctxt->eflags |= temp_eflags;\n\t}\n\n\tctxt->eflags &= ~EFLG_RESERVED_ZEROS_MASK; /* Clear reserved zeros */\n\tctxt->eflags |= X86_EFLAGS_FIXED;\n\tctxt->ops->set_nmi_mask(ctxt, false);\n\n\treturn rc;\n}\n\nstatic int em_iret(struct x86_emulate_ctxt *ctxt)\n{\n\tswitch(ctxt->mode) {\n\tcase X86EMUL_MODE_REAL:\n\t\treturn emulate_iret_real(ctxt);\n\tcase X86EMUL_MODE_VM86:\n\tcase X86EMUL_MODE_PROT16:\n\tcase X86EMUL_MODE_PROT32:\n\tcase X86EMUL_MODE_PROT64:\n\tdefault:\n\t\t/* iret from protected mode unimplemented yet */\n\t\treturn X86EMUL_UNHANDLEABLE;\n\t}\n}\n\nstatic int em_jmp_far(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc;\n\tunsigned short sel;\n\tstruct desc_struct new_desc;\n\tu8 cpl = ctxt->ops->cpl(ctxt);\n\n\tmemcpy(&sel, ctxt->src.valptr + ctxt->op_bytes, 2);\n\n\trc = __load_segment_descriptor(ctxt, sel, VCPU_SREG_CS, cpl,\n\t\t\t\t       X86_TRANSFER_CALL_JMP,\n\t\t\t\t       &new_desc);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\trc = assign_eip_far(ctxt, ctxt->src.val, &new_desc);\n\t/* Error handling is not implemented. */\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn X86EMUL_UNHANDLEABLE;\n\n\treturn rc;\n}\n\nstatic int em_jmp_abs(struct x86_emulate_ctxt *ctxt)\n{\n\treturn assign_eip_near(ctxt, ctxt->src.val);\n}\n\nstatic int em_call_near_abs(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc;\n\tlong int old_eip;\n\n\told_eip = ctxt->_eip;\n\trc = assign_eip_near(ctxt, ctxt->src.val);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\tctxt->src.val = old_eip;\n\trc = em_push(ctxt);\n\treturn rc;\n}\n\nstatic int em_cmpxchg8b(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 old = ctxt->dst.orig_val64;\n\n\tif (ctxt->dst.bytes == 16)\n\t\treturn X86EMUL_UNHANDLEABLE;\n\n\tif (((u32) (old >> 0) != (u32) reg_read(ctxt, VCPU_REGS_RAX)) ||\n\t    ((u32) (old >> 32) != (u32) reg_read(ctxt, VCPU_REGS_RDX))) {\n\t\t*reg_write(ctxt, VCPU_REGS_RAX) = (u32) (old >> 0);\n\t\t*reg_write(ctxt, VCPU_REGS_RDX) = (u32) (old >> 32);\n\t\tctxt->eflags &= ~X86_EFLAGS_ZF;\n\t} else {\n\t\tctxt->dst.val64 = ((u64)reg_read(ctxt, VCPU_REGS_RCX) << 32) |\n\t\t\t(u32) reg_read(ctxt, VCPU_REGS_RBX);\n\n\t\tctxt->eflags |= X86_EFLAGS_ZF;\n\t}\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_ret(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc;\n\tunsigned long eip;\n\n\trc = emulate_pop(ctxt, &eip, ctxt->op_bytes);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\treturn assign_eip_near(ctxt, eip);\n}\n\nstatic int em_ret_far(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc;\n\tunsigned long eip, cs;\n\tint cpl = ctxt->ops->cpl(ctxt);\n\tstruct desc_struct new_desc;\n\n\trc = emulate_pop(ctxt, &eip, ctxt->op_bytes);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\trc = emulate_pop(ctxt, &cs, ctxt->op_bytes);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\t/* Outer-privilege level return is not implemented */\n\tif (ctxt->mode >= X86EMUL_MODE_PROT16 && (cs & 3) > cpl)\n\t\treturn X86EMUL_UNHANDLEABLE;\n\trc = __load_segment_descriptor(ctxt, (u16)cs, VCPU_SREG_CS, cpl,\n\t\t\t\t       X86_TRANSFER_RET,\n\t\t\t\t       &new_desc);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\trc = assign_eip_far(ctxt, eip, &new_desc);\n\t/* Error handling is not implemented. */\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn X86EMUL_UNHANDLEABLE;\n\n\treturn rc;\n}\n\nstatic int em_ret_far_imm(struct x86_emulate_ctxt *ctxt)\n{\n        int rc;\n\n        rc = em_ret_far(ctxt);\n        if (rc != X86EMUL_CONTINUE)\n                return rc;\n        rsp_increment(ctxt, ctxt->src.val);\n        return X86EMUL_CONTINUE;\n}\n\nstatic int em_cmpxchg(struct x86_emulate_ctxt *ctxt)\n{\n\t/* Save real source value, then compare EAX against destination. */\n\tctxt->dst.orig_val = ctxt->dst.val;\n\tctxt->dst.val = reg_read(ctxt, VCPU_REGS_RAX);\n\tctxt->src.orig_val = ctxt->src.val;\n\tctxt->src.val = ctxt->dst.orig_val;\n\tfastop(ctxt, em_cmp);\n\n\tif (ctxt->eflags & X86_EFLAGS_ZF) {\n\t\t/* Success: write back to memory; no update of EAX */\n\t\tctxt->src.type = OP_NONE;\n\t\tctxt->dst.val = ctxt->src.orig_val;\n\t} else {\n\t\t/* Failure: write the value we saw to EAX. */\n\t\tctxt->src.type = OP_REG;\n\t\tctxt->src.addr.reg = reg_rmw(ctxt, VCPU_REGS_RAX);\n\t\tctxt->src.val = ctxt->dst.orig_val;\n\t\t/* Create write-cycle to dest by writing the same value */\n\t\tctxt->dst.val = ctxt->dst.orig_val;\n\t}\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_lseg(struct x86_emulate_ctxt *ctxt)\n{\n\tint seg = ctxt->src2.val;\n\tunsigned short sel;\n\tint rc;\n\n\tmemcpy(&sel, ctxt->src.valptr + ctxt->op_bytes, 2);\n\n\trc = load_segment_descriptor(ctxt, sel, seg);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tctxt->dst.val = ctxt->src.val;\n\treturn rc;\n}\n\nstatic int emulator_has_longmode(struct x86_emulate_ctxt *ctxt)\n{\n\tu32 eax, ebx, ecx, edx;\n\n\teax = 0x80000001;\n\tecx = 0;\n\tctxt->ops->get_cpuid(ctxt, &eax, &ebx, &ecx, &edx);\n\treturn edx & bit(X86_FEATURE_LM);\n}\n\n#define GET_SMSTATE(type, smbase, offset)\t\t\t\t  \\\n\t({\t\t\t\t\t\t\t\t  \\\n\t type __val;\t\t\t\t\t\t\t  \\\n\t int r = ctxt->ops->read_phys(ctxt, smbase + offset, &__val,      \\\n\t\t\t\t      sizeof(__val));\t\t\t  \\\n\t if (r != X86EMUL_CONTINUE)\t\t\t\t\t  \\\n\t\t return X86EMUL_UNHANDLEABLE;\t\t\t\t  \\\n\t __val;\t\t\t\t\t\t\t\t  \\\n\t})\n\nstatic void rsm_set_desc_flags(struct desc_struct *desc, u32 flags)\n{\n\tdesc->g    = (flags >> 23) & 1;\n\tdesc->d    = (flags >> 22) & 1;\n\tdesc->l    = (flags >> 21) & 1;\n\tdesc->avl  = (flags >> 20) & 1;\n\tdesc->p    = (flags >> 15) & 1;\n\tdesc->dpl  = (flags >> 13) & 3;\n\tdesc->s    = (flags >> 12) & 1;\n\tdesc->type = (flags >>  8) & 15;\n}\n\nstatic int rsm_load_seg_32(struct x86_emulate_ctxt *ctxt, u64 smbase, int n)\n{\n\tstruct desc_struct desc;\n\tint offset;\n\tu16 selector;\n\n\tselector = GET_SMSTATE(u32, smbase, 0x7fa8 + n * 4);\n\n\tif (n < 3)\n\t\toffset = 0x7f84 + n * 12;\n\telse\n\t\toffset = 0x7f2c + (n - 3) * 12;\n\n\tset_desc_base(&desc,      GET_SMSTATE(u32, smbase, offset + 8));\n\tset_desc_limit(&desc,     GET_SMSTATE(u32, smbase, offset + 4));\n\trsm_set_desc_flags(&desc, GET_SMSTATE(u32, smbase, offset));\n\tctxt->ops->set_segment(ctxt, selector, &desc, 0, n);\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int rsm_load_seg_64(struct x86_emulate_ctxt *ctxt, u64 smbase, int n)\n{\n\tstruct desc_struct desc;\n\tint offset;\n\tu16 selector;\n\tu32 base3;\n\n\toffset = 0x7e00 + n * 16;\n\n\tselector =                GET_SMSTATE(u16, smbase, offset);\n\trsm_set_desc_flags(&desc, GET_SMSTATE(u16, smbase, offset + 2) << 8);\n\tset_desc_limit(&desc,     GET_SMSTATE(u32, smbase, offset + 4));\n\tset_desc_base(&desc,      GET_SMSTATE(u32, smbase, offset + 8));\n\tbase3 =                   GET_SMSTATE(u32, smbase, offset + 12);\n\n\tctxt->ops->set_segment(ctxt, selector, &desc, base3, n);\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int rsm_enter_protected_mode(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t     u64 cr0, u64 cr4)\n{\n\tint bad;\n\n\t/*\n\t * First enable PAE, long mode needs it before CR0.PG = 1 is set.\n\t * Then enable protected mode.\tHowever, PCID cannot be enabled\n\t * if EFER.LMA=0, so set it separately.\n\t */\n\tbad = ctxt->ops->set_cr(ctxt, 4, cr4 & ~X86_CR4_PCIDE);\n\tif (bad)\n\t\treturn X86EMUL_UNHANDLEABLE;\n\n\tbad = ctxt->ops->set_cr(ctxt, 0, cr0);\n\tif (bad)\n\t\treturn X86EMUL_UNHANDLEABLE;\n\n\tif (cr4 & X86_CR4_PCIDE) {\n\t\tbad = ctxt->ops->set_cr(ctxt, 4, cr4);\n\t\tif (bad)\n\t\t\treturn X86EMUL_UNHANDLEABLE;\n\t}\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int rsm_load_state_32(struct x86_emulate_ctxt *ctxt, u64 smbase)\n{\n\tstruct desc_struct desc;\n\tstruct desc_ptr dt;\n\tu16 selector;\n\tu32 val, cr0, cr4;\n\tint i;\n\n\tcr0 =                      GET_SMSTATE(u32, smbase, 0x7ffc);\n\tctxt->ops->set_cr(ctxt, 3, GET_SMSTATE(u32, smbase, 0x7ff8));\n\tctxt->eflags =             GET_SMSTATE(u32, smbase, 0x7ff4) | X86_EFLAGS_FIXED;\n\tctxt->_eip =               GET_SMSTATE(u32, smbase, 0x7ff0);\n\n\tfor (i = 0; i < 8; i++)\n\t\t*reg_write(ctxt, i) = GET_SMSTATE(u32, smbase, 0x7fd0 + i * 4);\n\n\tval = GET_SMSTATE(u32, smbase, 0x7fcc);\n\tctxt->ops->set_dr(ctxt, 6, (val & DR6_VOLATILE) | DR6_FIXED_1);\n\tval = GET_SMSTATE(u32, smbase, 0x7fc8);\n\tctxt->ops->set_dr(ctxt, 7, (val & DR7_VOLATILE) | DR7_FIXED_1);\n\n\tselector =                 GET_SMSTATE(u32, smbase, 0x7fc4);\n\tset_desc_base(&desc,       GET_SMSTATE(u32, smbase, 0x7f64));\n\tset_desc_limit(&desc,      GET_SMSTATE(u32, smbase, 0x7f60));\n\trsm_set_desc_flags(&desc,  GET_SMSTATE(u32, smbase, 0x7f5c));\n\tctxt->ops->set_segment(ctxt, selector, &desc, 0, VCPU_SREG_TR);\n\n\tselector =                 GET_SMSTATE(u32, smbase, 0x7fc0);\n\tset_desc_base(&desc,       GET_SMSTATE(u32, smbase, 0x7f80));\n\tset_desc_limit(&desc,      GET_SMSTATE(u32, smbase, 0x7f7c));\n\trsm_set_desc_flags(&desc,  GET_SMSTATE(u32, smbase, 0x7f78));\n\tctxt->ops->set_segment(ctxt, selector, &desc, 0, VCPU_SREG_LDTR);\n\n\tdt.address =               GET_SMSTATE(u32, smbase, 0x7f74);\n\tdt.size =                  GET_SMSTATE(u32, smbase, 0x7f70);\n\tctxt->ops->set_gdt(ctxt, &dt);\n\n\tdt.address =               GET_SMSTATE(u32, smbase, 0x7f58);\n\tdt.size =                  GET_SMSTATE(u32, smbase, 0x7f54);\n\tctxt->ops->set_idt(ctxt, &dt);\n\n\tfor (i = 0; i < 6; i++) {\n\t\tint r = rsm_load_seg_32(ctxt, smbase, i);\n\t\tif (r != X86EMUL_CONTINUE)\n\t\t\treturn r;\n\t}\n\n\tcr4 = GET_SMSTATE(u32, smbase, 0x7f14);\n\n\tctxt->ops->set_smbase(ctxt, GET_SMSTATE(u32, smbase, 0x7ef8));\n\n\treturn rsm_enter_protected_mode(ctxt, cr0, cr4);\n}\n\nstatic int rsm_load_state_64(struct x86_emulate_ctxt *ctxt, u64 smbase)\n{\n\tstruct desc_struct desc;\n\tstruct desc_ptr dt;\n\tu64 val, cr0, cr4;\n\tu32 base3;\n\tu16 selector;\n\tint i, r;\n\n\tfor (i = 0; i < 16; i++)\n\t\t*reg_write(ctxt, i) = GET_SMSTATE(u64, smbase, 0x7ff8 - i * 8);\n\n\tctxt->_eip   = GET_SMSTATE(u64, smbase, 0x7f78);\n\tctxt->eflags = GET_SMSTATE(u32, smbase, 0x7f70) | X86_EFLAGS_FIXED;\n\n\tval = GET_SMSTATE(u32, smbase, 0x7f68);\n\tctxt->ops->set_dr(ctxt, 6, (val & DR6_VOLATILE) | DR6_FIXED_1);\n\tval = GET_SMSTATE(u32, smbase, 0x7f60);\n\tctxt->ops->set_dr(ctxt, 7, (val & DR7_VOLATILE) | DR7_FIXED_1);\n\n\tcr0 =                       GET_SMSTATE(u64, smbase, 0x7f58);\n\tctxt->ops->set_cr(ctxt, 3,  GET_SMSTATE(u64, smbase, 0x7f50));\n\tcr4 =                       GET_SMSTATE(u64, smbase, 0x7f48);\n\tctxt->ops->set_smbase(ctxt, GET_SMSTATE(u32, smbase, 0x7f00));\n\tval =                       GET_SMSTATE(u64, smbase, 0x7ed0);\n\tctxt->ops->set_msr(ctxt, MSR_EFER, val & ~EFER_LMA);\n\n\tselector =                  GET_SMSTATE(u32, smbase, 0x7e90);\n\trsm_set_desc_flags(&desc,   GET_SMSTATE(u32, smbase, 0x7e92) << 8);\n\tset_desc_limit(&desc,       GET_SMSTATE(u32, smbase, 0x7e94));\n\tset_desc_base(&desc,        GET_SMSTATE(u32, smbase, 0x7e98));\n\tbase3 =                     GET_SMSTATE(u32, smbase, 0x7e9c);\n\tctxt->ops->set_segment(ctxt, selector, &desc, base3, VCPU_SREG_TR);\n\n\tdt.size =                   GET_SMSTATE(u32, smbase, 0x7e84);\n\tdt.address =                GET_SMSTATE(u64, smbase, 0x7e88);\n\tctxt->ops->set_idt(ctxt, &dt);\n\n\tselector =                  GET_SMSTATE(u32, smbase, 0x7e70);\n\trsm_set_desc_flags(&desc,   GET_SMSTATE(u32, smbase, 0x7e72) << 8);\n\tset_desc_limit(&desc,       GET_SMSTATE(u32, smbase, 0x7e74));\n\tset_desc_base(&desc,        GET_SMSTATE(u32, smbase, 0x7e78));\n\tbase3 =                     GET_SMSTATE(u32, smbase, 0x7e7c);\n\tctxt->ops->set_segment(ctxt, selector, &desc, base3, VCPU_SREG_LDTR);\n\n\tdt.size =                   GET_SMSTATE(u32, smbase, 0x7e64);\n\tdt.address =                GET_SMSTATE(u64, smbase, 0x7e68);\n\tctxt->ops->set_gdt(ctxt, &dt);\n\n\tr = rsm_enter_protected_mode(ctxt, cr0, cr4);\n\tif (r != X86EMUL_CONTINUE)\n\t\treturn r;\n\n\tfor (i = 0; i < 6; i++) {\n\t\tr = rsm_load_seg_64(ctxt, smbase, i);\n\t\tif (r != X86EMUL_CONTINUE)\n\t\t\treturn r;\n\t}\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_rsm(struct x86_emulate_ctxt *ctxt)\n{\n\tunsigned long cr0, cr4, efer;\n\tu64 smbase;\n\tint ret;\n\n\tif ((ctxt->emul_flags & X86EMUL_SMM_MASK) == 0)\n\t\treturn emulate_ud(ctxt);\n\n\t/*\n\t * Get back to real mode, to prepare a safe state in which to load\n\t * CR0/CR3/CR4/EFER.  It's all a bit more complicated if the vCPU\n\t * supports long mode.\n\t */\n\tcr4 = ctxt->ops->get_cr(ctxt, 4);\n\tif (emulator_has_longmode(ctxt)) {\n\t\tstruct desc_struct cs_desc;\n\n\t\t/* Zero CR4.PCIDE before CR0.PG.  */\n\t\tif (cr4 & X86_CR4_PCIDE) {\n\t\t\tctxt->ops->set_cr(ctxt, 4, cr4 & ~X86_CR4_PCIDE);\n\t\t\tcr4 &= ~X86_CR4_PCIDE;\n\t\t}\n\n\t\t/* A 32-bit code segment is required to clear EFER.LMA.  */\n\t\tmemset(&cs_desc, 0, sizeof(cs_desc));\n\t\tcs_desc.type = 0xb;\n\t\tcs_desc.s = cs_desc.g = cs_desc.p = 1;\n\t\tctxt->ops->set_segment(ctxt, 0, &cs_desc, 0, VCPU_SREG_CS);\n\t}\n\n\t/* For the 64-bit case, this will clear EFER.LMA.  */\n\tcr0 = ctxt->ops->get_cr(ctxt, 0);\n\tif (cr0 & X86_CR0_PE)\n\t\tctxt->ops->set_cr(ctxt, 0, cr0 & ~(X86_CR0_PG | X86_CR0_PE));\n\n\t/* Now clear CR4.PAE (which must be done before clearing EFER.LME).  */\n\tif (cr4 & X86_CR4_PAE)\n\t\tctxt->ops->set_cr(ctxt, 4, cr4 & ~X86_CR4_PAE);\n\n\t/* And finally go back to 32-bit mode.  */\n\tefer = 0;\n\tctxt->ops->set_msr(ctxt, MSR_EFER, efer);\n\n\tsmbase = ctxt->ops->get_smbase(ctxt);\n\tif (emulator_has_longmode(ctxt))\n\t\tret = rsm_load_state_64(ctxt, smbase + 0x8000);\n\telse\n\t\tret = rsm_load_state_32(ctxt, smbase + 0x8000);\n\n\tif (ret != X86EMUL_CONTINUE) {\n\t\t/* FIXME: should triple fault */\n\t\treturn X86EMUL_UNHANDLEABLE;\n\t}\n\n\tif ((ctxt->emul_flags & X86EMUL_SMM_INSIDE_NMI_MASK) == 0)\n\t\tctxt->ops->set_nmi_mask(ctxt, false);\n\n\tctxt->emul_flags &= ~X86EMUL_SMM_INSIDE_NMI_MASK;\n\tctxt->emul_flags &= ~X86EMUL_SMM_MASK;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic void\nsetup_syscalls_segments(struct x86_emulate_ctxt *ctxt,\n\t\t\tstruct desc_struct *cs, struct desc_struct *ss)\n{\n\tcs->l = 0;\t\t/* will be adjusted later */\n\tset_desc_base(cs, 0);\t/* flat segment */\n\tcs->g = 1;\t\t/* 4kb granularity */\n\tset_desc_limit(cs, 0xfffff);\t/* 4GB limit */\n\tcs->type = 0x0b;\t/* Read, Execute, Accessed */\n\tcs->s = 1;\n\tcs->dpl = 0;\t\t/* will be adjusted later */\n\tcs->p = 1;\n\tcs->d = 1;\n\tcs->avl = 0;\n\n\tset_desc_base(ss, 0);\t/* flat segment */\n\tset_desc_limit(ss, 0xfffff);\t/* 4GB limit */\n\tss->g = 1;\t\t/* 4kb granularity */\n\tss->s = 1;\n\tss->type = 0x03;\t/* Read/Write, Accessed */\n\tss->d = 1;\t\t/* 32bit stack segment */\n\tss->dpl = 0;\n\tss->p = 1;\n\tss->l = 0;\n\tss->avl = 0;\n}\n\nstatic bool vendor_intel(struct x86_emulate_ctxt *ctxt)\n{\n\tu32 eax, ebx, ecx, edx;\n\n\teax = ecx = 0;\n\tctxt->ops->get_cpuid(ctxt, &eax, &ebx, &ecx, &edx);\n\treturn ebx == X86EMUL_CPUID_VENDOR_GenuineIntel_ebx\n\t\t&& ecx == X86EMUL_CPUID_VENDOR_GenuineIntel_ecx\n\t\t&& edx == X86EMUL_CPUID_VENDOR_GenuineIntel_edx;\n}\n\nstatic bool em_syscall_is_enabled(struct x86_emulate_ctxt *ctxt)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tu32 eax, ebx, ecx, edx;\n\n\t/*\n\t * syscall should always be enabled in longmode - so only become\n\t * vendor specific (cpuid) if other modes are active...\n\t */\n\tif (ctxt->mode == X86EMUL_MODE_PROT64)\n\t\treturn true;\n\n\teax = 0x00000000;\n\tecx = 0x00000000;\n\tops->get_cpuid(ctxt, &eax, &ebx, &ecx, &edx);\n\t/*\n\t * Intel (\"GenuineIntel\")\n\t * remark: Intel CPUs only support \"syscall\" in 64bit\n\t * longmode. Also an 64bit guest with a\n\t * 32bit compat-app running will #UD !! While this\n\t * behaviour can be fixed (by emulating) into AMD\n\t * response - CPUs of AMD can't behave like Intel.\n\t */\n\tif (ebx == X86EMUL_CPUID_VENDOR_GenuineIntel_ebx &&\n\t    ecx == X86EMUL_CPUID_VENDOR_GenuineIntel_ecx &&\n\t    edx == X86EMUL_CPUID_VENDOR_GenuineIntel_edx)\n\t\treturn false;\n\n\t/* AMD (\"AuthenticAMD\") */\n\tif (ebx == X86EMUL_CPUID_VENDOR_AuthenticAMD_ebx &&\n\t    ecx == X86EMUL_CPUID_VENDOR_AuthenticAMD_ecx &&\n\t    edx == X86EMUL_CPUID_VENDOR_AuthenticAMD_edx)\n\t\treturn true;\n\n\t/* AMD (\"AMDisbetter!\") */\n\tif (ebx == X86EMUL_CPUID_VENDOR_AMDisbetterI_ebx &&\n\t    ecx == X86EMUL_CPUID_VENDOR_AMDisbetterI_ecx &&\n\t    edx == X86EMUL_CPUID_VENDOR_AMDisbetterI_edx)\n\t\treturn true;\n\n\t/* default: (not Intel, not AMD), apply Intel's stricter rules... */\n\treturn false;\n}\n\nstatic int em_syscall(struct x86_emulate_ctxt *ctxt)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tstruct desc_struct cs, ss;\n\tu64 msr_data;\n\tu16 cs_sel, ss_sel;\n\tu64 efer = 0;\n\n\t/* syscall is not available in real mode */\n\tif (ctxt->mode == X86EMUL_MODE_REAL ||\n\t    ctxt->mode == X86EMUL_MODE_VM86)\n\t\treturn emulate_ud(ctxt);\n\n\tif (!(em_syscall_is_enabled(ctxt)))\n\t\treturn emulate_ud(ctxt);\n\n\tops->get_msr(ctxt, MSR_EFER, &efer);\n\tsetup_syscalls_segments(ctxt, &cs, &ss);\n\n\tif (!(efer & EFER_SCE))\n\t\treturn emulate_ud(ctxt);\n\n\tops->get_msr(ctxt, MSR_STAR, &msr_data);\n\tmsr_data >>= 32;\n\tcs_sel = (u16)(msr_data & 0xfffc);\n\tss_sel = (u16)(msr_data + 8);\n\n\tif (efer & EFER_LMA) {\n\t\tcs.d = 0;\n\t\tcs.l = 1;\n\t}\n\tops->set_segment(ctxt, cs_sel, &cs, 0, VCPU_SREG_CS);\n\tops->set_segment(ctxt, ss_sel, &ss, 0, VCPU_SREG_SS);\n\n\t*reg_write(ctxt, VCPU_REGS_RCX) = ctxt->_eip;\n\tif (efer & EFER_LMA) {\n#ifdef CONFIG_X86_64\n\t\t*reg_write(ctxt, VCPU_REGS_R11) = ctxt->eflags;\n\n\t\tops->get_msr(ctxt,\n\t\t\t     ctxt->mode == X86EMUL_MODE_PROT64 ?\n\t\t\t     MSR_LSTAR : MSR_CSTAR, &msr_data);\n\t\tctxt->_eip = msr_data;\n\n\t\tops->get_msr(ctxt, MSR_SYSCALL_MASK, &msr_data);\n\t\tctxt->eflags &= ~msr_data;\n\t\tctxt->eflags |= X86_EFLAGS_FIXED;\n#endif\n\t} else {\n\t\t/* legacy mode */\n\t\tops->get_msr(ctxt, MSR_STAR, &msr_data);\n\t\tctxt->_eip = (u32)msr_data;\n\n\t\tctxt->eflags &= ~(X86_EFLAGS_VM | X86_EFLAGS_IF);\n\t}\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_sysenter(struct x86_emulate_ctxt *ctxt)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tstruct desc_struct cs, ss;\n\tu64 msr_data;\n\tu16 cs_sel, ss_sel;\n\tu64 efer = 0;\n\n\tops->get_msr(ctxt, MSR_EFER, &efer);\n\t/* inject #GP if in real mode */\n\tif (ctxt->mode == X86EMUL_MODE_REAL)\n\t\treturn emulate_gp(ctxt, 0);\n\n\t/*\n\t * Not recognized on AMD in compat mode (but is recognized in legacy\n\t * mode).\n\t */\n\tif ((ctxt->mode != X86EMUL_MODE_PROT64) && (efer & EFER_LMA)\n\t    && !vendor_intel(ctxt))\n\t\treturn emulate_ud(ctxt);\n\n\t/* sysenter/sysexit have not been tested in 64bit mode. */\n\tif (ctxt->mode == X86EMUL_MODE_PROT64)\n\t\treturn X86EMUL_UNHANDLEABLE;\n\n\tsetup_syscalls_segments(ctxt, &cs, &ss);\n\n\tops->get_msr(ctxt, MSR_IA32_SYSENTER_CS, &msr_data);\n\tif ((msr_data & 0xfffc) == 0x0)\n\t\treturn emulate_gp(ctxt, 0);\n\n\tctxt->eflags &= ~(X86_EFLAGS_VM | X86_EFLAGS_IF);\n\tcs_sel = (u16)msr_data & ~SEGMENT_RPL_MASK;\n\tss_sel = cs_sel + 8;\n\tif (efer & EFER_LMA) {\n\t\tcs.d = 0;\n\t\tcs.l = 1;\n\t}\n\n\tops->set_segment(ctxt, cs_sel, &cs, 0, VCPU_SREG_CS);\n\tops->set_segment(ctxt, ss_sel, &ss, 0, VCPU_SREG_SS);\n\n\tops->get_msr(ctxt, MSR_IA32_SYSENTER_EIP, &msr_data);\n\tctxt->_eip = (efer & EFER_LMA) ? msr_data : (u32)msr_data;\n\n\tops->get_msr(ctxt, MSR_IA32_SYSENTER_ESP, &msr_data);\n\t*reg_write(ctxt, VCPU_REGS_RSP) = (efer & EFER_LMA) ? msr_data :\n\t\t\t\t\t\t\t      (u32)msr_data;\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_sysexit(struct x86_emulate_ctxt *ctxt)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tstruct desc_struct cs, ss;\n\tu64 msr_data, rcx, rdx;\n\tint usermode;\n\tu16 cs_sel = 0, ss_sel = 0;\n\n\t/* inject #GP if in real mode or Virtual 8086 mode */\n\tif (ctxt->mode == X86EMUL_MODE_REAL ||\n\t    ctxt->mode == X86EMUL_MODE_VM86)\n\t\treturn emulate_gp(ctxt, 0);\n\n\tsetup_syscalls_segments(ctxt, &cs, &ss);\n\n\tif ((ctxt->rex_prefix & 0x8) != 0x0)\n\t\tusermode = X86EMUL_MODE_PROT64;\n\telse\n\t\tusermode = X86EMUL_MODE_PROT32;\n\n\trcx = reg_read(ctxt, VCPU_REGS_RCX);\n\trdx = reg_read(ctxt, VCPU_REGS_RDX);\n\n\tcs.dpl = 3;\n\tss.dpl = 3;\n\tops->get_msr(ctxt, MSR_IA32_SYSENTER_CS, &msr_data);\n\tswitch (usermode) {\n\tcase X86EMUL_MODE_PROT32:\n\t\tcs_sel = (u16)(msr_data + 16);\n\t\tif ((msr_data & 0xfffc) == 0x0)\n\t\t\treturn emulate_gp(ctxt, 0);\n\t\tss_sel = (u16)(msr_data + 24);\n\t\trcx = (u32)rcx;\n\t\trdx = (u32)rdx;\n\t\tbreak;\n\tcase X86EMUL_MODE_PROT64:\n\t\tcs_sel = (u16)(msr_data + 32);\n\t\tif (msr_data == 0x0)\n\t\t\treturn emulate_gp(ctxt, 0);\n\t\tss_sel = cs_sel + 8;\n\t\tcs.d = 0;\n\t\tcs.l = 1;\n\t\tif (is_noncanonical_address(rcx) ||\n\t\t    is_noncanonical_address(rdx))\n\t\t\treturn emulate_gp(ctxt, 0);\n\t\tbreak;\n\t}\n\tcs_sel |= SEGMENT_RPL_MASK;\n\tss_sel |= SEGMENT_RPL_MASK;\n\n\tops->set_segment(ctxt, cs_sel, &cs, 0, VCPU_SREG_CS);\n\tops->set_segment(ctxt, ss_sel, &ss, 0, VCPU_SREG_SS);\n\n\tctxt->_eip = rdx;\n\t*reg_write(ctxt, VCPU_REGS_RSP) = rcx;\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic bool emulator_bad_iopl(struct x86_emulate_ctxt *ctxt)\n{\n\tint iopl;\n\tif (ctxt->mode == X86EMUL_MODE_REAL)\n\t\treturn false;\n\tif (ctxt->mode == X86EMUL_MODE_VM86)\n\t\treturn true;\n\tiopl = (ctxt->eflags & X86_EFLAGS_IOPL) >> X86_EFLAGS_IOPL_BIT;\n\treturn ctxt->ops->cpl(ctxt) > iopl;\n}\n\nstatic bool emulator_io_port_access_allowed(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t\t    u16 port, u16 len)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tstruct desc_struct tr_seg;\n\tu32 base3;\n\tint r;\n\tu16 tr, io_bitmap_ptr, perm, bit_idx = port & 0x7;\n\tunsigned mask = (1 << len) - 1;\n\tunsigned long base;\n\n\tops->get_segment(ctxt, &tr, &tr_seg, &base3, VCPU_SREG_TR);\n\tif (!tr_seg.p)\n\t\treturn false;\n\tif (desc_limit_scaled(&tr_seg) < 103)\n\t\treturn false;\n\tbase = get_desc_base(&tr_seg);\n#ifdef CONFIG_X86_64\n\tbase |= ((u64)base3) << 32;\n#endif\n\tr = ops->read_std(ctxt, base + 102, &io_bitmap_ptr, 2, NULL);\n\tif (r != X86EMUL_CONTINUE)\n\t\treturn false;\n\tif (io_bitmap_ptr + port/8 > desc_limit_scaled(&tr_seg))\n\t\treturn false;\n\tr = ops->read_std(ctxt, base + io_bitmap_ptr + port/8, &perm, 2, NULL);\n\tif (r != X86EMUL_CONTINUE)\n\t\treturn false;\n\tif ((perm >> bit_idx) & mask)\n\t\treturn false;\n\treturn true;\n}\n\nstatic bool emulator_io_permited(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t u16 port, u16 len)\n{\n\tif (ctxt->perm_ok)\n\t\treturn true;\n\n\tif (emulator_bad_iopl(ctxt))\n\t\tif (!emulator_io_port_access_allowed(ctxt, port, len))\n\t\t\treturn false;\n\n\tctxt->perm_ok = true;\n\n\treturn true;\n}\n\nstatic void string_registers_quirk(struct x86_emulate_ctxt *ctxt)\n{\n\t/*\n\t * Intel CPUs mask the counter and pointers in quite strange\n\t * manner when ECX is zero due to REP-string optimizations.\n\t */\n#ifdef CONFIG_X86_64\n\tif (ctxt->ad_bytes != 4 || !vendor_intel(ctxt))\n\t\treturn;\n\n\t*reg_write(ctxt, VCPU_REGS_RCX) = 0;\n\n\tswitch (ctxt->b) {\n\tcase 0xa4:\t/* movsb */\n\tcase 0xa5:\t/* movsd/w */\n\t\t*reg_rmw(ctxt, VCPU_REGS_RSI) &= (u32)-1;\n\t\t/* fall through */\n\tcase 0xaa:\t/* stosb */\n\tcase 0xab:\t/* stosd/w */\n\t\t*reg_rmw(ctxt, VCPU_REGS_RDI) &= (u32)-1;\n\t}\n#endif\n}\n\nstatic void save_state_to_tss16(struct x86_emulate_ctxt *ctxt,\n\t\t\t\tstruct tss_segment_16 *tss)\n{\n\ttss->ip = ctxt->_eip;\n\ttss->flag = ctxt->eflags;\n\ttss->ax = reg_read(ctxt, VCPU_REGS_RAX);\n\ttss->cx = reg_read(ctxt, VCPU_REGS_RCX);\n\ttss->dx = reg_read(ctxt, VCPU_REGS_RDX);\n\ttss->bx = reg_read(ctxt, VCPU_REGS_RBX);\n\ttss->sp = reg_read(ctxt, VCPU_REGS_RSP);\n\ttss->bp = reg_read(ctxt, VCPU_REGS_RBP);\n\ttss->si = reg_read(ctxt, VCPU_REGS_RSI);\n\ttss->di = reg_read(ctxt, VCPU_REGS_RDI);\n\n\ttss->es = get_segment_selector(ctxt, VCPU_SREG_ES);\n\ttss->cs = get_segment_selector(ctxt, VCPU_SREG_CS);\n\ttss->ss = get_segment_selector(ctxt, VCPU_SREG_SS);\n\ttss->ds = get_segment_selector(ctxt, VCPU_SREG_DS);\n\ttss->ldt = get_segment_selector(ctxt, VCPU_SREG_LDTR);\n}\n\nstatic int load_state_from_tss16(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t struct tss_segment_16 *tss)\n{\n\tint ret;\n\tu8 cpl;\n\n\tctxt->_eip = tss->ip;\n\tctxt->eflags = tss->flag | 2;\n\t*reg_write(ctxt, VCPU_REGS_RAX) = tss->ax;\n\t*reg_write(ctxt, VCPU_REGS_RCX) = tss->cx;\n\t*reg_write(ctxt, VCPU_REGS_RDX) = tss->dx;\n\t*reg_write(ctxt, VCPU_REGS_RBX) = tss->bx;\n\t*reg_write(ctxt, VCPU_REGS_RSP) = tss->sp;\n\t*reg_write(ctxt, VCPU_REGS_RBP) = tss->bp;\n\t*reg_write(ctxt, VCPU_REGS_RSI) = tss->si;\n\t*reg_write(ctxt, VCPU_REGS_RDI) = tss->di;\n\n\t/*\n\t * SDM says that segment selectors are loaded before segment\n\t * descriptors\n\t */\n\tset_segment_selector(ctxt, tss->ldt, VCPU_SREG_LDTR);\n\tset_segment_selector(ctxt, tss->es, VCPU_SREG_ES);\n\tset_segment_selector(ctxt, tss->cs, VCPU_SREG_CS);\n\tset_segment_selector(ctxt, tss->ss, VCPU_SREG_SS);\n\tset_segment_selector(ctxt, tss->ds, VCPU_SREG_DS);\n\n\tcpl = tss->cs & 3;\n\n\t/*\n\t * Now load segment descriptors. If fault happens at this stage\n\t * it is handled in a context of new task\n\t */\n\tret = __load_segment_descriptor(ctxt, tss->ldt, VCPU_SREG_LDTR, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = __load_segment_descriptor(ctxt, tss->es, VCPU_SREG_ES, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = __load_segment_descriptor(ctxt, tss->cs, VCPU_SREG_CS, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = __load_segment_descriptor(ctxt, tss->ss, VCPU_SREG_SS, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = __load_segment_descriptor(ctxt, tss->ds, VCPU_SREG_DS, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int task_switch_16(struct x86_emulate_ctxt *ctxt,\n\t\t\t  u16 tss_selector, u16 old_tss_sel,\n\t\t\t  ulong old_tss_base, struct desc_struct *new_desc)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tstruct tss_segment_16 tss_seg;\n\tint ret;\n\tu32 new_tss_base = get_desc_base(new_desc);\n\n\tret = ops->read_std(ctxt, old_tss_base, &tss_seg, sizeof tss_seg,\n\t\t\t    &ctxt->exception);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\n\tsave_state_to_tss16(ctxt, &tss_seg);\n\n\tret = ops->write_std(ctxt, old_tss_base, &tss_seg, sizeof tss_seg,\n\t\t\t     &ctxt->exception);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\n\tret = ops->read_std(ctxt, new_tss_base, &tss_seg, sizeof tss_seg,\n\t\t\t    &ctxt->exception);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\n\tif (old_tss_sel != 0xffff) {\n\t\ttss_seg.prev_task_link = old_tss_sel;\n\n\t\tret = ops->write_std(ctxt, new_tss_base,\n\t\t\t\t     &tss_seg.prev_task_link,\n\t\t\t\t     sizeof tss_seg.prev_task_link,\n\t\t\t\t     &ctxt->exception);\n\t\tif (ret != X86EMUL_CONTINUE)\n\t\t\treturn ret;\n\t}\n\n\treturn load_state_from_tss16(ctxt, &tss_seg);\n}\n\nstatic void save_state_to_tss32(struct x86_emulate_ctxt *ctxt,\n\t\t\t\tstruct tss_segment_32 *tss)\n{\n\t/* CR3 and ldt selector are not saved intentionally */\n\ttss->eip = ctxt->_eip;\n\ttss->eflags = ctxt->eflags;\n\ttss->eax = reg_read(ctxt, VCPU_REGS_RAX);\n\ttss->ecx = reg_read(ctxt, VCPU_REGS_RCX);\n\ttss->edx = reg_read(ctxt, VCPU_REGS_RDX);\n\ttss->ebx = reg_read(ctxt, VCPU_REGS_RBX);\n\ttss->esp = reg_read(ctxt, VCPU_REGS_RSP);\n\ttss->ebp = reg_read(ctxt, VCPU_REGS_RBP);\n\ttss->esi = reg_read(ctxt, VCPU_REGS_RSI);\n\ttss->edi = reg_read(ctxt, VCPU_REGS_RDI);\n\n\ttss->es = get_segment_selector(ctxt, VCPU_SREG_ES);\n\ttss->cs = get_segment_selector(ctxt, VCPU_SREG_CS);\n\ttss->ss = get_segment_selector(ctxt, VCPU_SREG_SS);\n\ttss->ds = get_segment_selector(ctxt, VCPU_SREG_DS);\n\ttss->fs = get_segment_selector(ctxt, VCPU_SREG_FS);\n\ttss->gs = get_segment_selector(ctxt, VCPU_SREG_GS);\n}\n\nstatic int load_state_from_tss32(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t struct tss_segment_32 *tss)\n{\n\tint ret;\n\tu8 cpl;\n\n\tif (ctxt->ops->set_cr(ctxt, 3, tss->cr3))\n\t\treturn emulate_gp(ctxt, 0);\n\tctxt->_eip = tss->eip;\n\tctxt->eflags = tss->eflags | 2;\n\n\t/* General purpose registers */\n\t*reg_write(ctxt, VCPU_REGS_RAX) = tss->eax;\n\t*reg_write(ctxt, VCPU_REGS_RCX) = tss->ecx;\n\t*reg_write(ctxt, VCPU_REGS_RDX) = tss->edx;\n\t*reg_write(ctxt, VCPU_REGS_RBX) = tss->ebx;\n\t*reg_write(ctxt, VCPU_REGS_RSP) = tss->esp;\n\t*reg_write(ctxt, VCPU_REGS_RBP) = tss->ebp;\n\t*reg_write(ctxt, VCPU_REGS_RSI) = tss->esi;\n\t*reg_write(ctxt, VCPU_REGS_RDI) = tss->edi;\n\n\t/*\n\t * SDM says that segment selectors are loaded before segment\n\t * descriptors.  This is important because CPL checks will\n\t * use CS.RPL.\n\t */\n\tset_segment_selector(ctxt, tss->ldt_selector, VCPU_SREG_LDTR);\n\tset_segment_selector(ctxt, tss->es, VCPU_SREG_ES);\n\tset_segment_selector(ctxt, tss->cs, VCPU_SREG_CS);\n\tset_segment_selector(ctxt, tss->ss, VCPU_SREG_SS);\n\tset_segment_selector(ctxt, tss->ds, VCPU_SREG_DS);\n\tset_segment_selector(ctxt, tss->fs, VCPU_SREG_FS);\n\tset_segment_selector(ctxt, tss->gs, VCPU_SREG_GS);\n\n\t/*\n\t * If we're switching between Protected Mode and VM86, we need to make\n\t * sure to update the mode before loading the segment descriptors so\n\t * that the selectors are interpreted correctly.\n\t */\n\tif (ctxt->eflags & X86_EFLAGS_VM) {\n\t\tctxt->mode = X86EMUL_MODE_VM86;\n\t\tcpl = 3;\n\t} else {\n\t\tctxt->mode = X86EMUL_MODE_PROT32;\n\t\tcpl = tss->cs & 3;\n\t}\n\n\t/*\n\t * Now load segment descriptors. If fault happenes at this stage\n\t * it is handled in a context of new task\n\t */\n\tret = __load_segment_descriptor(ctxt, tss->ldt_selector, VCPU_SREG_LDTR,\n\t\t\t\t\tcpl, X86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = __load_segment_descriptor(ctxt, tss->es, VCPU_SREG_ES, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = __load_segment_descriptor(ctxt, tss->cs, VCPU_SREG_CS, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = __load_segment_descriptor(ctxt, tss->ss, VCPU_SREG_SS, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = __load_segment_descriptor(ctxt, tss->ds, VCPU_SREG_DS, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = __load_segment_descriptor(ctxt, tss->fs, VCPU_SREG_FS, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = __load_segment_descriptor(ctxt, tss->gs, VCPU_SREG_GS, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\n\treturn ret;\n}\n\nstatic int task_switch_32(struct x86_emulate_ctxt *ctxt,\n\t\t\t  u16 tss_selector, u16 old_tss_sel,\n\t\t\t  ulong old_tss_base, struct desc_struct *new_desc)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tstruct tss_segment_32 tss_seg;\n\tint ret;\n\tu32 new_tss_base = get_desc_base(new_desc);\n\tu32 eip_offset = offsetof(struct tss_segment_32, eip);\n\tu32 ldt_sel_offset = offsetof(struct tss_segment_32, ldt_selector);\n\n\tret = ops->read_std(ctxt, old_tss_base, &tss_seg, sizeof tss_seg,\n\t\t\t    &ctxt->exception);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\n\tsave_state_to_tss32(ctxt, &tss_seg);\n\n\t/* Only GP registers and segment selectors are saved */\n\tret = ops->write_std(ctxt, old_tss_base + eip_offset, &tss_seg.eip,\n\t\t\t     ldt_sel_offset - eip_offset, &ctxt->exception);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\n\tret = ops->read_std(ctxt, new_tss_base, &tss_seg, sizeof tss_seg,\n\t\t\t    &ctxt->exception);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\n\tif (old_tss_sel != 0xffff) {\n\t\ttss_seg.prev_task_link = old_tss_sel;\n\n\t\tret = ops->write_std(ctxt, new_tss_base,\n\t\t\t\t     &tss_seg.prev_task_link,\n\t\t\t\t     sizeof tss_seg.prev_task_link,\n\t\t\t\t     &ctxt->exception);\n\t\tif (ret != X86EMUL_CONTINUE)\n\t\t\treturn ret;\n\t}\n\n\treturn load_state_from_tss32(ctxt, &tss_seg);\n}\n\nstatic int emulator_do_task_switch(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t   u16 tss_selector, int idt_index, int reason,\n\t\t\t\t   bool has_error_code, u32 error_code)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tstruct desc_struct curr_tss_desc, next_tss_desc;\n\tint ret;\n\tu16 old_tss_sel = get_segment_selector(ctxt, VCPU_SREG_TR);\n\tulong old_tss_base =\n\t\tops->get_cached_segment_base(ctxt, VCPU_SREG_TR);\n\tu32 desc_limit;\n\tulong desc_addr, dr7;\n\n\t/* FIXME: old_tss_base == ~0 ? */\n\n\tret = read_segment_descriptor(ctxt, tss_selector, &next_tss_desc, &desc_addr);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = read_segment_descriptor(ctxt, old_tss_sel, &curr_tss_desc, &desc_addr);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\n\t/* FIXME: check that next_tss_desc is tss */\n\n\t/*\n\t * Check privileges. The three cases are task switch caused by...\n\t *\n\t * 1. jmp/call/int to task gate: Check against DPL of the task gate\n\t * 2. Exception/IRQ/iret: No check is performed\n\t * 3. jmp/call to TSS/task-gate: No check is performed since the\n\t *    hardware checks it before exiting.\n\t */\n\tif (reason == TASK_SWITCH_GATE) {\n\t\tif (idt_index != -1) {\n\t\t\t/* Software interrupts */\n\t\t\tstruct desc_struct task_gate_desc;\n\t\t\tint dpl;\n\n\t\t\tret = read_interrupt_descriptor(ctxt, idt_index,\n\t\t\t\t\t\t\t&task_gate_desc);\n\t\t\tif (ret != X86EMUL_CONTINUE)\n\t\t\t\treturn ret;\n\n\t\t\tdpl = task_gate_desc.dpl;\n\t\t\tif ((tss_selector & 3) > dpl || ops->cpl(ctxt) > dpl)\n\t\t\t\treturn emulate_gp(ctxt, (idt_index << 3) | 0x2);\n\t\t}\n\t}\n\n\tdesc_limit = desc_limit_scaled(&next_tss_desc);\n\tif (!next_tss_desc.p ||\n\t    ((desc_limit < 0x67 && (next_tss_desc.type & 8)) ||\n\t     desc_limit < 0x2b)) {\n\t\treturn emulate_ts(ctxt, tss_selector & 0xfffc);\n\t}\n\n\tif (reason == TASK_SWITCH_IRET || reason == TASK_SWITCH_JMP) {\n\t\tcurr_tss_desc.type &= ~(1 << 1); /* clear busy flag */\n\t\twrite_segment_descriptor(ctxt, old_tss_sel, &curr_tss_desc);\n\t}\n\n\tif (reason == TASK_SWITCH_IRET)\n\t\tctxt->eflags = ctxt->eflags & ~X86_EFLAGS_NT;\n\n\t/* set back link to prev task only if NT bit is set in eflags\n\t   note that old_tss_sel is not used after this point */\n\tif (reason != TASK_SWITCH_CALL && reason != TASK_SWITCH_GATE)\n\t\told_tss_sel = 0xffff;\n\n\tif (next_tss_desc.type & 8)\n\t\tret = task_switch_32(ctxt, tss_selector, old_tss_sel,\n\t\t\t\t     old_tss_base, &next_tss_desc);\n\telse\n\t\tret = task_switch_16(ctxt, tss_selector, old_tss_sel,\n\t\t\t\t     old_tss_base, &next_tss_desc);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\n\tif (reason == TASK_SWITCH_CALL || reason == TASK_SWITCH_GATE)\n\t\tctxt->eflags = ctxt->eflags | X86_EFLAGS_NT;\n\n\tif (reason != TASK_SWITCH_IRET) {\n\t\tnext_tss_desc.type |= (1 << 1); /* set busy flag */\n\t\twrite_segment_descriptor(ctxt, tss_selector, &next_tss_desc);\n\t}\n\n\tops->set_cr(ctxt, 0,  ops->get_cr(ctxt, 0) | X86_CR0_TS);\n\tops->set_segment(ctxt, tss_selector, &next_tss_desc, 0, VCPU_SREG_TR);\n\n\tif (has_error_code) {\n\t\tctxt->op_bytes = ctxt->ad_bytes = (next_tss_desc.type & 8) ? 4 : 2;\n\t\tctxt->lock_prefix = 0;\n\t\tctxt->src.val = (unsigned long) error_code;\n\t\tret = em_push(ctxt);\n\t}\n\n\tops->get_dr(ctxt, 7, &dr7);\n\tops->set_dr(ctxt, 7, dr7 & ~(DR_LOCAL_ENABLE_MASK | DR_LOCAL_SLOWDOWN));\n\n\treturn ret;\n}\n\nint emulator_task_switch(struct x86_emulate_ctxt *ctxt,\n\t\t\t u16 tss_selector, int idt_index, int reason,\n\t\t\t bool has_error_code, u32 error_code)\n{\n\tint rc;\n\n\tinvalidate_registers(ctxt);\n\tctxt->_eip = ctxt->eip;\n\tctxt->dst.type = OP_NONE;\n\n\trc = emulator_do_task_switch(ctxt, tss_selector, idt_index, reason,\n\t\t\t\t     has_error_code, error_code);\n\n\tif (rc == X86EMUL_CONTINUE) {\n\t\tctxt->eip = ctxt->_eip;\n\t\twriteback_registers(ctxt);\n\t}\n\n\treturn (rc == X86EMUL_UNHANDLEABLE) ? EMULATION_FAILED : EMULATION_OK;\n}\n\nstatic void string_addr_inc(struct x86_emulate_ctxt *ctxt, int reg,\n\t\tstruct operand *op)\n{\n\tint df = (ctxt->eflags & X86_EFLAGS_DF) ? -op->count : op->count;\n\n\tregister_address_increment(ctxt, reg, df * op->bytes);\n\top->addr.mem.ea = register_address(ctxt, reg);\n}\n\nstatic int em_das(struct x86_emulate_ctxt *ctxt)\n{\n\tu8 al, old_al;\n\tbool af, cf, old_cf;\n\n\tcf = ctxt->eflags & X86_EFLAGS_CF;\n\tal = ctxt->dst.val;\n\n\told_al = al;\n\told_cf = cf;\n\tcf = false;\n\taf = ctxt->eflags & X86_EFLAGS_AF;\n\tif ((al & 0x0f) > 9 || af) {\n\t\tal -= 6;\n\t\tcf = old_cf | (al >= 250);\n\t\taf = true;\n\t} else {\n\t\taf = false;\n\t}\n\tif (old_al > 0x99 || old_cf) {\n\t\tal -= 0x60;\n\t\tcf = true;\n\t}\n\n\tctxt->dst.val = al;\n\t/* Set PF, ZF, SF */\n\tctxt->src.type = OP_IMM;\n\tctxt->src.val = 0;\n\tctxt->src.bytes = 1;\n\tfastop(ctxt, em_or);\n\tctxt->eflags &= ~(X86_EFLAGS_AF | X86_EFLAGS_CF);\n\tif (cf)\n\t\tctxt->eflags |= X86_EFLAGS_CF;\n\tif (af)\n\t\tctxt->eflags |= X86_EFLAGS_AF;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_aam(struct x86_emulate_ctxt *ctxt)\n{\n\tu8 al, ah;\n\n\tif (ctxt->src.val == 0)\n\t\treturn emulate_de(ctxt);\n\n\tal = ctxt->dst.val & 0xff;\n\tah = al / ctxt->src.val;\n\tal %= ctxt->src.val;\n\n\tctxt->dst.val = (ctxt->dst.val & 0xffff0000) | al | (ah << 8);\n\n\t/* Set PF, ZF, SF */\n\tctxt->src.type = OP_IMM;\n\tctxt->src.val = 0;\n\tctxt->src.bytes = 1;\n\tfastop(ctxt, em_or);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_aad(struct x86_emulate_ctxt *ctxt)\n{\n\tu8 al = ctxt->dst.val & 0xff;\n\tu8 ah = (ctxt->dst.val >> 8) & 0xff;\n\n\tal = (al + (ah * ctxt->src.val)) & 0xff;\n\n\tctxt->dst.val = (ctxt->dst.val & 0xffff0000) | al;\n\n\t/* Set PF, ZF, SF */\n\tctxt->src.type = OP_IMM;\n\tctxt->src.val = 0;\n\tctxt->src.bytes = 1;\n\tfastop(ctxt, em_or);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_call(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc;\n\tlong rel = ctxt->src.val;\n\n\tctxt->src.val = (unsigned long)ctxt->_eip;\n\trc = jmp_rel(ctxt, rel);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\treturn em_push(ctxt);\n}\n\nstatic int em_call_far(struct x86_emulate_ctxt *ctxt)\n{\n\tu16 sel, old_cs;\n\tulong old_eip;\n\tint rc;\n\tstruct desc_struct old_desc, new_desc;\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tint cpl = ctxt->ops->cpl(ctxt);\n\tenum x86emul_mode prev_mode = ctxt->mode;\n\n\told_eip = ctxt->_eip;\n\tops->get_segment(ctxt, &old_cs, &old_desc, NULL, VCPU_SREG_CS);\n\n\tmemcpy(&sel, ctxt->src.valptr + ctxt->op_bytes, 2);\n\trc = __load_segment_descriptor(ctxt, sel, VCPU_SREG_CS, cpl,\n\t\t\t\t       X86_TRANSFER_CALL_JMP, &new_desc);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\trc = assign_eip_far(ctxt, ctxt->src.val, &new_desc);\n\tif (rc != X86EMUL_CONTINUE)\n\t\tgoto fail;\n\n\tctxt->src.val = old_cs;\n\trc = em_push(ctxt);\n\tif (rc != X86EMUL_CONTINUE)\n\t\tgoto fail;\n\n\tctxt->src.val = old_eip;\n\trc = em_push(ctxt);\n\t/* If we failed, we tainted the memory, but the very least we should\n\t   restore cs */\n\tif (rc != X86EMUL_CONTINUE) {\n\t\tpr_warn_once(\"faulting far call emulation tainted memory\\n\");\n\t\tgoto fail;\n\t}\n\treturn rc;\nfail:\n\tops->set_segment(ctxt, old_cs, &old_desc, 0, VCPU_SREG_CS);\n\tctxt->mode = prev_mode;\n\treturn rc;\n\n}\n\nstatic int em_ret_near_imm(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc;\n\tunsigned long eip;\n\n\trc = emulate_pop(ctxt, &eip, ctxt->op_bytes);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\trc = assign_eip_near(ctxt, eip);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\trsp_increment(ctxt, ctxt->src.val);\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_xchg(struct x86_emulate_ctxt *ctxt)\n{\n\t/* Write back the register source. */\n\tctxt->src.val = ctxt->dst.val;\n\twrite_register_operand(&ctxt->src);\n\n\t/* Write back the memory destination with implicit LOCK prefix. */\n\tctxt->dst.val = ctxt->src.orig_val;\n\tctxt->lock_prefix = 1;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_imul_3op(struct x86_emulate_ctxt *ctxt)\n{\n\tctxt->dst.val = ctxt->src2.val;\n\treturn fastop(ctxt, em_imul);\n}\n\nstatic int em_cwd(struct x86_emulate_ctxt *ctxt)\n{\n\tctxt->dst.type = OP_REG;\n\tctxt->dst.bytes = ctxt->src.bytes;\n\tctxt->dst.addr.reg = reg_rmw(ctxt, VCPU_REGS_RDX);\n\tctxt->dst.val = ~((ctxt->src.val >> (ctxt->src.bytes * 8 - 1)) - 1);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_rdtsc(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 tsc = 0;\n\n\tctxt->ops->get_msr(ctxt, MSR_IA32_TSC, &tsc);\n\t*reg_write(ctxt, VCPU_REGS_RAX) = (u32)tsc;\n\t*reg_write(ctxt, VCPU_REGS_RDX) = tsc >> 32;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_rdpmc(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 pmc;\n\n\tif (ctxt->ops->read_pmc(ctxt, reg_read(ctxt, VCPU_REGS_RCX), &pmc))\n\t\treturn emulate_gp(ctxt, 0);\n\t*reg_write(ctxt, VCPU_REGS_RAX) = (u32)pmc;\n\t*reg_write(ctxt, VCPU_REGS_RDX) = pmc >> 32;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_mov(struct x86_emulate_ctxt *ctxt)\n{\n\tmemcpy(ctxt->dst.valptr, ctxt->src.valptr, sizeof(ctxt->src.valptr));\n\treturn X86EMUL_CONTINUE;\n}\n\n#define FFL(x) bit(X86_FEATURE_##x)\n\nstatic int em_movbe(struct x86_emulate_ctxt *ctxt)\n{\n\tu32 ebx, ecx, edx, eax = 1;\n\tu16 tmp;\n\n\t/*\n\t * Check MOVBE is set in the guest-visible CPUID leaf.\n\t */\n\tctxt->ops->get_cpuid(ctxt, &eax, &ebx, &ecx, &edx);\n\tif (!(ecx & FFL(MOVBE)))\n\t\treturn emulate_ud(ctxt);\n\n\tswitch (ctxt->op_bytes) {\n\tcase 2:\n\t\t/*\n\t\t * From MOVBE definition: \"...When the operand size is 16 bits,\n\t\t * the upper word of the destination register remains unchanged\n\t\t * ...\"\n\t\t *\n\t\t * Both casting ->valptr and ->val to u16 breaks strict aliasing\n\t\t * rules so we have to do the operation almost per hand.\n\t\t */\n\t\ttmp = (u16)ctxt->src.val;\n\t\tctxt->dst.val &= ~0xffffUL;\n\t\tctxt->dst.val |= (unsigned long)swab16(tmp);\n\t\tbreak;\n\tcase 4:\n\t\tctxt->dst.val = swab32((u32)ctxt->src.val);\n\t\tbreak;\n\tcase 8:\n\t\tctxt->dst.val = swab64(ctxt->src.val);\n\t\tbreak;\n\tdefault:\n\t\tBUG();\n\t}\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_cr_write(struct x86_emulate_ctxt *ctxt)\n{\n\tif (ctxt->ops->set_cr(ctxt, ctxt->modrm_reg, ctxt->src.val))\n\t\treturn emulate_gp(ctxt, 0);\n\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_dr_write(struct x86_emulate_ctxt *ctxt)\n{\n\tunsigned long val;\n\n\tif (ctxt->mode == X86EMUL_MODE_PROT64)\n\t\tval = ctxt->src.val & ~0ULL;\n\telse\n\t\tval = ctxt->src.val & ~0U;\n\n\t/* #UD condition is already handled. */\n\tif (ctxt->ops->set_dr(ctxt, ctxt->modrm_reg, val) < 0)\n\t\treturn emulate_gp(ctxt, 0);\n\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_wrmsr(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 msr_data;\n\n\tmsr_data = (u32)reg_read(ctxt, VCPU_REGS_RAX)\n\t\t| ((u64)reg_read(ctxt, VCPU_REGS_RDX) << 32);\n\tif (ctxt->ops->set_msr(ctxt, reg_read(ctxt, VCPU_REGS_RCX), msr_data))\n\t\treturn emulate_gp(ctxt, 0);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_rdmsr(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 msr_data;\n\n\tif (ctxt->ops->get_msr(ctxt, reg_read(ctxt, VCPU_REGS_RCX), &msr_data))\n\t\treturn emulate_gp(ctxt, 0);\n\n\t*reg_write(ctxt, VCPU_REGS_RAX) = (u32)msr_data;\n\t*reg_write(ctxt, VCPU_REGS_RDX) = msr_data >> 32;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_mov_rm_sreg(struct x86_emulate_ctxt *ctxt)\n{\n\tif (ctxt->modrm_reg > VCPU_SREG_GS)\n\t\treturn emulate_ud(ctxt);\n\n\tctxt->dst.val = get_segment_selector(ctxt, ctxt->modrm_reg);\n\tif (ctxt->dst.bytes == 4 && ctxt->dst.type == OP_MEM)\n\t\tctxt->dst.bytes = 2;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_mov_sreg_rm(struct x86_emulate_ctxt *ctxt)\n{\n\tu16 sel = ctxt->src.val;\n\n\tif (ctxt->modrm_reg == VCPU_SREG_CS || ctxt->modrm_reg > VCPU_SREG_GS)\n\t\treturn emulate_ud(ctxt);\n\n\tif (ctxt->modrm_reg == VCPU_SREG_SS)\n\t\tctxt->interruptibility = KVM_X86_SHADOW_INT_MOV_SS;\n\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn load_segment_descriptor(ctxt, sel, ctxt->modrm_reg);\n}\n\nstatic int em_lldt(struct x86_emulate_ctxt *ctxt)\n{\n\tu16 sel = ctxt->src.val;\n\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn load_segment_descriptor(ctxt, sel, VCPU_SREG_LDTR);\n}\n\nstatic int em_ltr(struct x86_emulate_ctxt *ctxt)\n{\n\tu16 sel = ctxt->src.val;\n\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn load_segment_descriptor(ctxt, sel, VCPU_SREG_TR);\n}\n\nstatic int em_invlpg(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc;\n\tulong linear;\n\n\trc = linearize(ctxt, ctxt->src.addr.mem, 1, false, &linear);\n\tif (rc == X86EMUL_CONTINUE)\n\t\tctxt->ops->invlpg(ctxt, linear);\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_clts(struct x86_emulate_ctxt *ctxt)\n{\n\tulong cr0;\n\n\tcr0 = ctxt->ops->get_cr(ctxt, 0);\n\tcr0 &= ~X86_CR0_TS;\n\tctxt->ops->set_cr(ctxt, 0, cr0);\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_hypercall(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc = ctxt->ops->fix_hypercall(ctxt);\n\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\t/* Let the processor re-execute the fixed hypercall */\n\tctxt->_eip = ctxt->eip;\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int emulate_store_desc_ptr(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t  void (*get)(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t\t      struct desc_ptr *ptr))\n{\n\tstruct desc_ptr desc_ptr;\n\n\tif (ctxt->mode == X86EMUL_MODE_PROT64)\n\t\tctxt->op_bytes = 8;\n\tget(ctxt, &desc_ptr);\n\tif (ctxt->op_bytes == 2) {\n\t\tctxt->op_bytes = 4;\n\t\tdesc_ptr.address &= 0x00ffffff;\n\t}\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn segmented_write_std(ctxt, ctxt->dst.addr.mem,\n\t\t\t\t   &desc_ptr, 2 + ctxt->op_bytes);\n}\n\nstatic int em_sgdt(struct x86_emulate_ctxt *ctxt)\n{\n\treturn emulate_store_desc_ptr(ctxt, ctxt->ops->get_gdt);\n}\n\nstatic int em_sidt(struct x86_emulate_ctxt *ctxt)\n{\n\treturn emulate_store_desc_ptr(ctxt, ctxt->ops->get_idt);\n}\n\nstatic int em_lgdt_lidt(struct x86_emulate_ctxt *ctxt, bool lgdt)\n{\n\tstruct desc_ptr desc_ptr;\n\tint rc;\n\n\tif (ctxt->mode == X86EMUL_MODE_PROT64)\n\t\tctxt->op_bytes = 8;\n\trc = read_descriptor(ctxt, ctxt->src.addr.mem,\n\t\t\t     &desc_ptr.size, &desc_ptr.address,\n\t\t\t     ctxt->op_bytes);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\tif (ctxt->mode == X86EMUL_MODE_PROT64 &&\n\t    is_noncanonical_address(desc_ptr.address))\n\t\treturn emulate_gp(ctxt, 0);\n\tif (lgdt)\n\t\tctxt->ops->set_gdt(ctxt, &desc_ptr);\n\telse\n\t\tctxt->ops->set_idt(ctxt, &desc_ptr);\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_lgdt(struct x86_emulate_ctxt *ctxt)\n{\n\treturn em_lgdt_lidt(ctxt, true);\n}\n\nstatic int em_lidt(struct x86_emulate_ctxt *ctxt)\n{\n\treturn em_lgdt_lidt(ctxt, false);\n}\n\nstatic int em_smsw(struct x86_emulate_ctxt *ctxt)\n{\n\tif (ctxt->dst.type == OP_MEM)\n\t\tctxt->dst.bytes = 2;\n\tctxt->dst.val = ctxt->ops->get_cr(ctxt, 0);\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_lmsw(struct x86_emulate_ctxt *ctxt)\n{\n\tctxt->ops->set_cr(ctxt, 0, (ctxt->ops->get_cr(ctxt, 0) & ~0x0eul)\n\t\t\t  | (ctxt->src.val & 0x0f));\n\tctxt->dst.type = OP_NONE;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_loop(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc = X86EMUL_CONTINUE;\n\n\tregister_address_increment(ctxt, VCPU_REGS_RCX, -1);\n\tif ((address_mask(ctxt, reg_read(ctxt, VCPU_REGS_RCX)) != 0) &&\n\t    (ctxt->b == 0xe2 || test_cc(ctxt->b ^ 0x5, ctxt->eflags)))\n\t\trc = jmp_rel(ctxt, ctxt->src.val);\n\n\treturn rc;\n}\n\nstatic int em_jcxz(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc = X86EMUL_CONTINUE;\n\n\tif (address_mask(ctxt, reg_read(ctxt, VCPU_REGS_RCX)) == 0)\n\t\trc = jmp_rel(ctxt, ctxt->src.val);\n\n\treturn rc;\n}\n\nstatic int em_in(struct x86_emulate_ctxt *ctxt)\n{\n\tif (!pio_in_emulated(ctxt, ctxt->dst.bytes, ctxt->src.val,\n\t\t\t     &ctxt->dst.val))\n\t\treturn X86EMUL_IO_NEEDED;\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_out(struct x86_emulate_ctxt *ctxt)\n{\n\tctxt->ops->pio_out_emulated(ctxt, ctxt->src.bytes, ctxt->dst.val,\n\t\t\t\t    &ctxt->src.val, 1);\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_cli(struct x86_emulate_ctxt *ctxt)\n{\n\tif (emulator_bad_iopl(ctxt))\n\t\treturn emulate_gp(ctxt, 0);\n\n\tctxt->eflags &= ~X86_EFLAGS_IF;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_sti(struct x86_emulate_ctxt *ctxt)\n{\n\tif (emulator_bad_iopl(ctxt))\n\t\treturn emulate_gp(ctxt, 0);\n\n\tctxt->interruptibility = KVM_X86_SHADOW_INT_STI;\n\tctxt->eflags |= X86_EFLAGS_IF;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_cpuid(struct x86_emulate_ctxt *ctxt)\n{\n\tu32 eax, ebx, ecx, edx;\n\n\teax = reg_read(ctxt, VCPU_REGS_RAX);\n\tecx = reg_read(ctxt, VCPU_REGS_RCX);\n\tctxt->ops->get_cpuid(ctxt, &eax, &ebx, &ecx, &edx);\n\t*reg_write(ctxt, VCPU_REGS_RAX) = eax;\n\t*reg_write(ctxt, VCPU_REGS_RBX) = ebx;\n\t*reg_write(ctxt, VCPU_REGS_RCX) = ecx;\n\t*reg_write(ctxt, VCPU_REGS_RDX) = edx;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_sahf(struct x86_emulate_ctxt *ctxt)\n{\n\tu32 flags;\n\n\tflags = X86_EFLAGS_CF | X86_EFLAGS_PF | X86_EFLAGS_AF | X86_EFLAGS_ZF |\n\t\tX86_EFLAGS_SF;\n\tflags &= *reg_rmw(ctxt, VCPU_REGS_RAX) >> 8;\n\n\tctxt->eflags &= ~0xffUL;\n\tctxt->eflags |= flags | X86_EFLAGS_FIXED;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_lahf(struct x86_emulate_ctxt *ctxt)\n{\n\t*reg_rmw(ctxt, VCPU_REGS_RAX) &= ~0xff00UL;\n\t*reg_rmw(ctxt, VCPU_REGS_RAX) |= (ctxt->eflags & 0xff) << 8;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_bswap(struct x86_emulate_ctxt *ctxt)\n{\n\tswitch (ctxt->op_bytes) {\n#ifdef CONFIG_X86_64\n\tcase 8:\n\t\tasm(\"bswap %0\" : \"+r\"(ctxt->dst.val));\n\t\tbreak;\n#endif\n\tdefault:\n\t\tasm(\"bswap %0\" : \"+r\"(*(u32 *)&ctxt->dst.val));\n\t\tbreak;\n\t}\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_clflush(struct x86_emulate_ctxt *ctxt)\n{\n\t/* emulating clflush regardless of cpuid */\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_movsxd(struct x86_emulate_ctxt *ctxt)\n{\n\tctxt->dst.val = (s32) ctxt->src.val;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int check_fxsr(struct x86_emulate_ctxt *ctxt)\n{\n\tu32 eax = 1, ebx, ecx = 0, edx;\n\n\tctxt->ops->get_cpuid(ctxt, &eax, &ebx, &ecx, &edx);\n\tif (!(edx & FFL(FXSR)))\n\t\treturn emulate_ud(ctxt);\n\n\tif (ctxt->ops->get_cr(ctxt, 0) & (X86_CR0_TS | X86_CR0_EM))\n\t\treturn emulate_nm(ctxt);\n\n\t/*\n\t * Don't emulate a case that should never be hit, instead of working\n\t * around a lack of fxsave64/fxrstor64 on old compilers.\n\t */\n\tif (ctxt->mode >= X86EMUL_MODE_PROT64)\n\t\treturn X86EMUL_UNHANDLEABLE;\n\n\treturn X86EMUL_CONTINUE;\n}\n\n/*\n * FXSAVE and FXRSTOR have 4 different formats depending on execution mode,\n *  1) 16 bit mode\n *  2) 32 bit mode\n *     - like (1), but FIP and FDP (foo) are only 16 bit.  At least Intel CPUs\n *       preserve whole 32 bit values, though, so (1) and (2) are the same wrt.\n *       save and restore\n *  3) 64-bit mode with REX.W prefix\n *     - like (2), but XMM 8-15 are being saved and restored\n *  4) 64-bit mode without REX.W prefix\n *     - like (3), but FIP and FDP are 64 bit\n *\n * Emulation uses (3) for (1) and (2) and preserves XMM 8-15 to reach the\n * desired result.  (4) is not emulated.\n *\n * Note: Guest and host CPUID.(EAX=07H,ECX=0H):EBX[bit 13] (deprecate FPU CS\n * and FPU DS) should match.\n */\nstatic int em_fxsave(struct x86_emulate_ctxt *ctxt)\n{\n\tstruct fxregs_state fx_state;\n\tsize_t size;\n\tint rc;\n\n\trc = check_fxsr(ctxt);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tctxt->ops->get_fpu(ctxt);\n\n\trc = asm_safe(\"fxsave %[fx]\", , [fx] \"+m\"(fx_state));\n\n\tctxt->ops->put_fpu(ctxt);\n\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tif (ctxt->ops->get_cr(ctxt, 4) & X86_CR4_OSFXSR)\n\t\tsize = offsetof(struct fxregs_state, xmm_space[8 * 16/4]);\n\telse\n\t\tsize = offsetof(struct fxregs_state, xmm_space[0]);\n\n\treturn segmented_write_std(ctxt, ctxt->memop.addr.mem, &fx_state, size);\n}\n\nstatic int fxrstor_fixup(struct x86_emulate_ctxt *ctxt,\n\t\tstruct fxregs_state *new)\n{\n\tint rc = X86EMUL_CONTINUE;\n\tstruct fxregs_state old;\n\n\trc = asm_safe(\"fxsave %[fx]\", , [fx] \"+m\"(old));\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\t/*\n\t * 64 bit host will restore XMM 8-15, which is not correct on non-64\n\t * bit guests.  Load the current values in order to preserve 64 bit\n\t * XMMs after fxrstor.\n\t */\n#ifdef CONFIG_X86_64\n\t/* XXX: accessing XMM 8-15 very awkwardly */\n\tmemcpy(&new->xmm_space[8 * 16/4], &old.xmm_space[8 * 16/4], 8 * 16);\n#endif\n\n\t/*\n\t * Hardware doesn't save and restore XMM 0-7 without CR4.OSFXSR, but\n\t * does save and restore MXCSR.\n\t */\n\tif (!(ctxt->ops->get_cr(ctxt, 4) & X86_CR4_OSFXSR))\n\t\tmemcpy(new->xmm_space, old.xmm_space, 8 * 16);\n\n\treturn rc;\n}\n\nstatic int em_fxrstor(struct x86_emulate_ctxt *ctxt)\n{\n\tstruct fxregs_state fx_state;\n\tint rc;\n\n\trc = check_fxsr(ctxt);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\trc = segmented_read_std(ctxt, ctxt->memop.addr.mem, &fx_state, 512);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tif (fx_state.mxcsr >> 16)\n\t\treturn emulate_gp(ctxt, 0);\n\n\tctxt->ops->get_fpu(ctxt);\n\n\tif (ctxt->mode < X86EMUL_MODE_PROT64)\n\t\trc = fxrstor_fixup(ctxt, &fx_state);\n\n\tif (rc == X86EMUL_CONTINUE)\n\t\trc = asm_safe(\"fxrstor %[fx]\", : [fx] \"m\"(fx_state));\n\n\tctxt->ops->put_fpu(ctxt);\n\n\treturn rc;\n}\n\nstatic bool valid_cr(int nr)\n{\n\tswitch (nr) {\n\tcase 0:\n\tcase 2 ... 4:\n\tcase 8:\n\t\treturn true;\n\tdefault:\n\t\treturn false;\n\t}\n}\n\nstatic int check_cr_read(struct x86_emulate_ctxt *ctxt)\n{\n\tif (!valid_cr(ctxt->modrm_reg))\n\t\treturn emulate_ud(ctxt);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int check_cr_write(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 new_val = ctxt->src.val64;\n\tint cr = ctxt->modrm_reg;\n\tu64 efer = 0;\n\n\tstatic u64 cr_reserved_bits[] = {\n\t\t0xffffffff00000000ULL,\n\t\t0, 0, 0, /* CR3 checked later */\n\t\tCR4_RESERVED_BITS,\n\t\t0, 0, 0,\n\t\tCR8_RESERVED_BITS,\n\t};\n\n\tif (!valid_cr(cr))\n\t\treturn emulate_ud(ctxt);\n\n\tif (new_val & cr_reserved_bits[cr])\n\t\treturn emulate_gp(ctxt, 0);\n\n\tswitch (cr) {\n\tcase 0: {\n\t\tu64 cr4;\n\t\tif (((new_val & X86_CR0_PG) && !(new_val & X86_CR0_PE)) ||\n\t\t    ((new_val & X86_CR0_NW) && !(new_val & X86_CR0_CD)))\n\t\t\treturn emulate_gp(ctxt, 0);\n\n\t\tcr4 = ctxt->ops->get_cr(ctxt, 4);\n\t\tctxt->ops->get_msr(ctxt, MSR_EFER, &efer);\n\n\t\tif ((new_val & X86_CR0_PG) && (efer & EFER_LME) &&\n\t\t    !(cr4 & X86_CR4_PAE))\n\t\t\treturn emulate_gp(ctxt, 0);\n\n\t\tbreak;\n\t\t}\n\tcase 3: {\n\t\tu64 rsvd = 0;\n\n\t\tctxt->ops->get_msr(ctxt, MSR_EFER, &efer);\n\t\tif (efer & EFER_LMA)\n\t\t\trsvd = CR3_L_MODE_RESERVED_BITS & ~CR3_PCID_INVD;\n\n\t\tif (new_val & rsvd)\n\t\t\treturn emulate_gp(ctxt, 0);\n\n\t\tbreak;\n\t\t}\n\tcase 4: {\n\t\tctxt->ops->get_msr(ctxt, MSR_EFER, &efer);\n\n\t\tif ((efer & EFER_LMA) && !(new_val & X86_CR4_PAE))\n\t\t\treturn emulate_gp(ctxt, 0);\n\n\t\tbreak;\n\t\t}\n\t}\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int check_dr7_gd(struct x86_emulate_ctxt *ctxt)\n{\n\tunsigned long dr7;\n\n\tctxt->ops->get_dr(ctxt, 7, &dr7);\n\n\t/* Check if DR7.Global_Enable is set */\n\treturn dr7 & (1 << 13);\n}\n\nstatic int check_dr_read(struct x86_emulate_ctxt *ctxt)\n{\n\tint dr = ctxt->modrm_reg;\n\tu64 cr4;\n\n\tif (dr > 7)\n\t\treturn emulate_ud(ctxt);\n\n\tcr4 = ctxt->ops->get_cr(ctxt, 4);\n\tif ((cr4 & X86_CR4_DE) && (dr == 4 || dr == 5))\n\t\treturn emulate_ud(ctxt);\n\n\tif (check_dr7_gd(ctxt)) {\n\t\tulong dr6;\n\n\t\tctxt->ops->get_dr(ctxt, 6, &dr6);\n\t\tdr6 &= ~15;\n\t\tdr6 |= DR6_BD | DR6_RTM;\n\t\tctxt->ops->set_dr(ctxt, 6, dr6);\n\t\treturn emulate_db(ctxt);\n\t}\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int check_dr_write(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 new_val = ctxt->src.val64;\n\tint dr = ctxt->modrm_reg;\n\n\tif ((dr == 6 || dr == 7) && (new_val & 0xffffffff00000000ULL))\n\t\treturn emulate_gp(ctxt, 0);\n\n\treturn check_dr_read(ctxt);\n}\n\nstatic int check_svme(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 efer;\n\n\tctxt->ops->get_msr(ctxt, MSR_EFER, &efer);\n\n\tif (!(efer & EFER_SVME))\n\t\treturn emulate_ud(ctxt);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int check_svme_pa(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 rax = reg_read(ctxt, VCPU_REGS_RAX);\n\n\t/* Valid physical address? */\n\tif (rax & 0xffff000000000000ULL)\n\t\treturn emulate_gp(ctxt, 0);\n\n\treturn check_svme(ctxt);\n}\n\nstatic int check_rdtsc(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 cr4 = ctxt->ops->get_cr(ctxt, 4);\n\n\tif (cr4 & X86_CR4_TSD && ctxt->ops->cpl(ctxt))\n\t\treturn emulate_ud(ctxt);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int check_rdpmc(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 cr4 = ctxt->ops->get_cr(ctxt, 4);\n\tu64 rcx = reg_read(ctxt, VCPU_REGS_RCX);\n\n\tif ((!(cr4 & X86_CR4_PCE) && ctxt->ops->cpl(ctxt)) ||\n\t    ctxt->ops->check_pmc(ctxt, rcx))\n\t\treturn emulate_gp(ctxt, 0);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int check_perm_in(struct x86_emulate_ctxt *ctxt)\n{\n\tctxt->dst.bytes = min(ctxt->dst.bytes, 4u);\n\tif (!emulator_io_permited(ctxt, ctxt->src.val, ctxt->dst.bytes))\n\t\treturn emulate_gp(ctxt, 0);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int check_perm_out(struct x86_emulate_ctxt *ctxt)\n{\n\tctxt->src.bytes = min(ctxt->src.bytes, 4u);\n\tif (!emulator_io_permited(ctxt, ctxt->dst.val, ctxt->src.bytes))\n\t\treturn emulate_gp(ctxt, 0);\n\n\treturn X86EMUL_CONTINUE;\n}\n\n#define D(_y) { .flags = (_y) }\n#define DI(_y, _i) { .flags = (_y)|Intercept, .intercept = x86_intercept_##_i }\n#define DIP(_y, _i, _p) { .flags = (_y)|Intercept|CheckPerm, \\\n\t\t      .intercept = x86_intercept_##_i, .check_perm = (_p) }\n#define N    D(NotImpl)\n#define EXT(_f, _e) { .flags = ((_f) | RMExt), .u.group = (_e) }\n#define G(_f, _g) { .flags = ((_f) | Group | ModRM), .u.group = (_g) }\n#define GD(_f, _g) { .flags = ((_f) | GroupDual | ModRM), .u.gdual = (_g) }\n#define ID(_f, _i) { .flags = ((_f) | InstrDual | ModRM), .u.idual = (_i) }\n#define MD(_f, _m) { .flags = ((_f) | ModeDual), .u.mdual = (_m) }\n#define E(_f, _e) { .flags = ((_f) | Escape | ModRM), .u.esc = (_e) }\n#define I(_f, _e) { .flags = (_f), .u.execute = (_e) }\n#define F(_f, _e) { .flags = (_f) | Fastop, .u.fastop = (_e) }\n#define II(_f, _e, _i) \\\n\t{ .flags = (_f)|Intercept, .u.execute = (_e), .intercept = x86_intercept_##_i }\n#define IIP(_f, _e, _i, _p) \\\n\t{ .flags = (_f)|Intercept|CheckPerm, .u.execute = (_e), \\\n\t  .intercept = x86_intercept_##_i, .check_perm = (_p) }\n#define GP(_f, _g) { .flags = ((_f) | Prefix), .u.gprefix = (_g) }\n\n#define D2bv(_f)      D((_f) | ByteOp), D(_f)\n#define D2bvIP(_f, _i, _p) DIP((_f) | ByteOp, _i, _p), DIP(_f, _i, _p)\n#define I2bv(_f, _e)  I((_f) | ByteOp, _e), I(_f, _e)\n#define F2bv(_f, _e)  F((_f) | ByteOp, _e), F(_f, _e)\n#define I2bvIP(_f, _e, _i, _p) \\\n\tIIP((_f) | ByteOp, _e, _i, _p), IIP(_f, _e, _i, _p)\n\n#define F6ALU(_f, _e) F2bv((_f) | DstMem | SrcReg | ModRM, _e),\t\t\\\n\t\tF2bv(((_f) | DstReg | SrcMem | ModRM) & ~Lock, _e),\t\\\n\t\tF2bv(((_f) & ~Lock) | DstAcc | SrcImm, _e)\n\nstatic const struct opcode group7_rm0[] = {\n\tN,\n\tI(SrcNone | Priv | EmulateOnUD,\tem_hypercall),\n\tN, N, N, N, N, N,\n};\n\nstatic const struct opcode group7_rm1[] = {\n\tDI(SrcNone | Priv, monitor),\n\tDI(SrcNone | Priv, mwait),\n\tN, N, N, N, N, N,\n};\n\nstatic const struct opcode group7_rm3[] = {\n\tDIP(SrcNone | Prot | Priv,\t\tvmrun,\t\tcheck_svme_pa),\n\tII(SrcNone  | Prot | EmulateOnUD,\tem_hypercall,\tvmmcall),\n\tDIP(SrcNone | Prot | Priv,\t\tvmload,\t\tcheck_svme_pa),\n\tDIP(SrcNone | Prot | Priv,\t\tvmsave,\t\tcheck_svme_pa),\n\tDIP(SrcNone | Prot | Priv,\t\tstgi,\t\tcheck_svme),\n\tDIP(SrcNone | Prot | Priv,\t\tclgi,\t\tcheck_svme),\n\tDIP(SrcNone | Prot | Priv,\t\tskinit,\t\tcheck_svme),\n\tDIP(SrcNone | Prot | Priv,\t\tinvlpga,\tcheck_svme),\n};\n\nstatic const struct opcode group7_rm7[] = {\n\tN,\n\tDIP(SrcNone, rdtscp, check_rdtsc),\n\tN, N, N, N, N, N,\n};\n\nstatic const struct opcode group1[] = {\n\tF(Lock, em_add),\n\tF(Lock | PageTable, em_or),\n\tF(Lock, em_adc),\n\tF(Lock, em_sbb),\n\tF(Lock | PageTable, em_and),\n\tF(Lock, em_sub),\n\tF(Lock, em_xor),\n\tF(NoWrite, em_cmp),\n};\n\nstatic const struct opcode group1A[] = {\n\tI(DstMem | SrcNone | Mov | Stack | IncSP, em_pop), N, N, N, N, N, N, N,\n};\n\nstatic const struct opcode group2[] = {\n\tF(DstMem | ModRM, em_rol),\n\tF(DstMem | ModRM, em_ror),\n\tF(DstMem | ModRM, em_rcl),\n\tF(DstMem | ModRM, em_rcr),\n\tF(DstMem | ModRM, em_shl),\n\tF(DstMem | ModRM, em_shr),\n\tF(DstMem | ModRM, em_shl),\n\tF(DstMem | ModRM, em_sar),\n};\n\nstatic const struct opcode group3[] = {\n\tF(DstMem | SrcImm | NoWrite, em_test),\n\tF(DstMem | SrcImm | NoWrite, em_test),\n\tF(DstMem | SrcNone | Lock, em_not),\n\tF(DstMem | SrcNone | Lock, em_neg),\n\tF(DstXacc | Src2Mem, em_mul_ex),\n\tF(DstXacc | Src2Mem, em_imul_ex),\n\tF(DstXacc | Src2Mem, em_div_ex),\n\tF(DstXacc | Src2Mem, em_idiv_ex),\n};\n\nstatic const struct opcode group4[] = {\n\tF(ByteOp | DstMem | SrcNone | Lock, em_inc),\n\tF(ByteOp | DstMem | SrcNone | Lock, em_dec),\n\tN, N, N, N, N, N,\n};\n\nstatic const struct opcode group5[] = {\n\tF(DstMem | SrcNone | Lock,\t\tem_inc),\n\tF(DstMem | SrcNone | Lock,\t\tem_dec),\n\tI(SrcMem | NearBranch,\t\t\tem_call_near_abs),\n\tI(SrcMemFAddr | ImplicitOps,\t\tem_call_far),\n\tI(SrcMem | NearBranch,\t\t\tem_jmp_abs),\n\tI(SrcMemFAddr | ImplicitOps,\t\tem_jmp_far),\n\tI(SrcMem | Stack,\t\t\tem_push), D(Undefined),\n};\n\nstatic const struct opcode group6[] = {\n\tDI(Prot | DstMem,\tsldt),\n\tDI(Prot | DstMem,\tstr),\n\tII(Prot | Priv | SrcMem16, em_lldt, lldt),\n\tII(Prot | Priv | SrcMem16, em_ltr, ltr),\n\tN, N, N, N,\n};\n\nstatic const struct group_dual group7 = { {\n\tII(Mov | DstMem,\t\t\tem_sgdt, sgdt),\n\tII(Mov | DstMem,\t\t\tem_sidt, sidt),\n\tII(SrcMem | Priv,\t\t\tem_lgdt, lgdt),\n\tII(SrcMem | Priv,\t\t\tem_lidt, lidt),\n\tII(SrcNone | DstMem | Mov,\t\tem_smsw, smsw), N,\n\tII(SrcMem16 | Mov | Priv,\t\tem_lmsw, lmsw),\n\tII(SrcMem | ByteOp | Priv | NoAccess,\tem_invlpg, invlpg),\n}, {\n\tEXT(0, group7_rm0),\n\tEXT(0, group7_rm1),\n\tN, EXT(0, group7_rm3),\n\tII(SrcNone | DstMem | Mov,\t\tem_smsw, smsw), N,\n\tII(SrcMem16 | Mov | Priv,\t\tem_lmsw, lmsw),\n\tEXT(0, group7_rm7),\n} };\n\nstatic const struct opcode group8[] = {\n\tN, N, N, N,\n\tF(DstMem | SrcImmByte | NoWrite,\t\tem_bt),\n\tF(DstMem | SrcImmByte | Lock | PageTable,\tem_bts),\n\tF(DstMem | SrcImmByte | Lock,\t\t\tem_btr),\n\tF(DstMem | SrcImmByte | Lock | PageTable,\tem_btc),\n};\n\nstatic const struct group_dual group9 = { {\n\tN, I(DstMem64 | Lock | PageTable, em_cmpxchg8b), N, N, N, N, N, N,\n}, {\n\tN, N, N, N, N, N, N, N,\n} };\n\nstatic const struct opcode group11[] = {\n\tI(DstMem | SrcImm | Mov | PageTable, em_mov),\n\tX7(D(Undefined)),\n};\n\nstatic const struct gprefix pfx_0f_ae_7 = {\n\tI(SrcMem | ByteOp, em_clflush), N, N, N,\n};\n\nstatic const struct group_dual group15 = { {\n\tI(ModRM | Aligned16, em_fxsave),\n\tI(ModRM | Aligned16, em_fxrstor),\n\tN, N, N, N, N, GP(0, &pfx_0f_ae_7),\n}, {\n\tN, N, N, N, N, N, N, N,\n} };\n\nstatic const struct gprefix pfx_0f_6f_0f_7f = {\n\tI(Mmx, em_mov), I(Sse | Aligned, em_mov), N, I(Sse | Unaligned, em_mov),\n};\n\nstatic const struct instr_dual instr_dual_0f_2b = {\n\tI(0, em_mov), N\n};\n\nstatic const struct gprefix pfx_0f_2b = {\n\tID(0, &instr_dual_0f_2b), ID(0, &instr_dual_0f_2b), N, N,\n};\n\nstatic const struct gprefix pfx_0f_28_0f_29 = {\n\tI(Aligned, em_mov), I(Aligned, em_mov), N, N,\n};\n\nstatic const struct gprefix pfx_0f_e7 = {\n\tN, I(Sse, em_mov), N, N,\n};\n\nstatic const struct escape escape_d9 = { {\n\tN, N, N, N, N, N, N, I(DstMem16 | Mov, em_fnstcw),\n}, {\n\t/* 0xC0 - 0xC7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xC8 - 0xCF */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xD0 - 0xC7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xD8 - 0xDF */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xE0 - 0xE7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xE8 - 0xEF */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xF0 - 0xF7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xF8 - 0xFF */\n\tN, N, N, N, N, N, N, N,\n} };\n\nstatic const struct escape escape_db = { {\n\tN, N, N, N, N, N, N, N,\n}, {\n\t/* 0xC0 - 0xC7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xC8 - 0xCF */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xD0 - 0xC7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xD8 - 0xDF */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xE0 - 0xE7 */\n\tN, N, N, I(ImplicitOps, em_fninit), N, N, N, N,\n\t/* 0xE8 - 0xEF */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xF0 - 0xF7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xF8 - 0xFF */\n\tN, N, N, N, N, N, N, N,\n} };\n\nstatic const struct escape escape_dd = { {\n\tN, N, N, N, N, N, N, I(DstMem16 | Mov, em_fnstsw),\n}, {\n\t/* 0xC0 - 0xC7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xC8 - 0xCF */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xD0 - 0xC7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xD8 - 0xDF */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xE0 - 0xE7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xE8 - 0xEF */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xF0 - 0xF7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xF8 - 0xFF */\n\tN, N, N, N, N, N, N, N,\n} };\n\nstatic const struct instr_dual instr_dual_0f_c3 = {\n\tI(DstMem | SrcReg | ModRM | No16 | Mov, em_mov), N\n};\n\nstatic const struct mode_dual mode_dual_63 = {\n\tN, I(DstReg | SrcMem32 | ModRM | Mov, em_movsxd)\n};\n\nstatic const struct opcode opcode_table[256] = {\n\t/* 0x00 - 0x07 */\n\tF6ALU(Lock, em_add),\n\tI(ImplicitOps | Stack | No64 | Src2ES, em_push_sreg),\n\tI(ImplicitOps | Stack | No64 | Src2ES, em_pop_sreg),\n\t/* 0x08 - 0x0F */\n\tF6ALU(Lock | PageTable, em_or),\n\tI(ImplicitOps | Stack | No64 | Src2CS, em_push_sreg),\n\tN,\n\t/* 0x10 - 0x17 */\n\tF6ALU(Lock, em_adc),\n\tI(ImplicitOps | Stack | No64 | Src2SS, em_push_sreg),\n\tI(ImplicitOps | Stack | No64 | Src2SS, em_pop_sreg),\n\t/* 0x18 - 0x1F */\n\tF6ALU(Lock, em_sbb),\n\tI(ImplicitOps | Stack | No64 | Src2DS, em_push_sreg),\n\tI(ImplicitOps | Stack | No64 | Src2DS, em_pop_sreg),\n\t/* 0x20 - 0x27 */\n\tF6ALU(Lock | PageTable, em_and), N, N,\n\t/* 0x28 - 0x2F */\n\tF6ALU(Lock, em_sub), N, I(ByteOp | DstAcc | No64, em_das),\n\t/* 0x30 - 0x37 */\n\tF6ALU(Lock, em_xor), N, N,\n\t/* 0x38 - 0x3F */\n\tF6ALU(NoWrite, em_cmp), N, N,\n\t/* 0x40 - 0x4F */\n\tX8(F(DstReg, em_inc)), X8(F(DstReg, em_dec)),\n\t/* 0x50 - 0x57 */\n\tX8(I(SrcReg | Stack, em_push)),\n\t/* 0x58 - 0x5F */\n\tX8(I(DstReg | Stack, em_pop)),\n\t/* 0x60 - 0x67 */\n\tI(ImplicitOps | Stack | No64, em_pusha),\n\tI(ImplicitOps | Stack | No64, em_popa),\n\tN, MD(ModRM, &mode_dual_63),\n\tN, N, N, N,\n\t/* 0x68 - 0x6F */\n\tI(SrcImm | Mov | Stack, em_push),\n\tI(DstReg | SrcMem | ModRM | Src2Imm, em_imul_3op),\n\tI(SrcImmByte | Mov | Stack, em_push),\n\tI(DstReg | SrcMem | ModRM | Src2ImmByte, em_imul_3op),\n\tI2bvIP(DstDI | SrcDX | Mov | String | Unaligned, em_in, ins, check_perm_in), /* insb, insw/insd */\n\tI2bvIP(SrcSI | DstDX | String, em_out, outs, check_perm_out), /* outsb, outsw/outsd */\n\t/* 0x70 - 0x7F */\n\tX16(D(SrcImmByte | NearBranch)),\n\t/* 0x80 - 0x87 */\n\tG(ByteOp | DstMem | SrcImm, group1),\n\tG(DstMem | SrcImm, group1),\n\tG(ByteOp | DstMem | SrcImm | No64, group1),\n\tG(DstMem | SrcImmByte, group1),\n\tF2bv(DstMem | SrcReg | ModRM | NoWrite, em_test),\n\tI2bv(DstMem | SrcReg | ModRM | Lock | PageTable, em_xchg),\n\t/* 0x88 - 0x8F */\n\tI2bv(DstMem | SrcReg | ModRM | Mov | PageTable, em_mov),\n\tI2bv(DstReg | SrcMem | ModRM | Mov, em_mov),\n\tI(DstMem | SrcNone | ModRM | Mov | PageTable, em_mov_rm_sreg),\n\tD(ModRM | SrcMem | NoAccess | DstReg),\n\tI(ImplicitOps | SrcMem16 | ModRM, em_mov_sreg_rm),\n\tG(0, group1A),\n\t/* 0x90 - 0x97 */\n\tDI(SrcAcc | DstReg, pause), X7(D(SrcAcc | DstReg)),\n\t/* 0x98 - 0x9F */\n\tD(DstAcc | SrcNone), I(ImplicitOps | SrcAcc, em_cwd),\n\tI(SrcImmFAddr | No64, em_call_far), N,\n\tII(ImplicitOps | Stack, em_pushf, pushf),\n\tII(ImplicitOps | Stack, em_popf, popf),\n\tI(ImplicitOps, em_sahf), I(ImplicitOps, em_lahf),\n\t/* 0xA0 - 0xA7 */\n\tI2bv(DstAcc | SrcMem | Mov | MemAbs, em_mov),\n\tI2bv(DstMem | SrcAcc | Mov | MemAbs | PageTable, em_mov),\n\tI2bv(SrcSI | DstDI | Mov | String, em_mov),\n\tF2bv(SrcSI | DstDI | String | NoWrite, em_cmp_r),\n\t/* 0xA8 - 0xAF */\n\tF2bv(DstAcc | SrcImm | NoWrite, em_test),\n\tI2bv(SrcAcc | DstDI | Mov | String, em_mov),\n\tI2bv(SrcSI | DstAcc | Mov | String, em_mov),\n\tF2bv(SrcAcc | DstDI | String | NoWrite, em_cmp_r),\n\t/* 0xB0 - 0xB7 */\n\tX8(I(ByteOp | DstReg | SrcImm | Mov, em_mov)),\n\t/* 0xB8 - 0xBF */\n\tX8(I(DstReg | SrcImm64 | Mov, em_mov)),\n\t/* 0xC0 - 0xC7 */\n\tG(ByteOp | Src2ImmByte, group2), G(Src2ImmByte, group2),\n\tI(ImplicitOps | NearBranch | SrcImmU16, em_ret_near_imm),\n\tI(ImplicitOps | NearBranch, em_ret),\n\tI(DstReg | SrcMemFAddr | ModRM | No64 | Src2ES, em_lseg),\n\tI(DstReg | SrcMemFAddr | ModRM | No64 | Src2DS, em_lseg),\n\tG(ByteOp, group11), G(0, group11),\n\t/* 0xC8 - 0xCF */\n\tI(Stack | SrcImmU16 | Src2ImmByte, em_enter), I(Stack, em_leave),\n\tI(ImplicitOps | SrcImmU16, em_ret_far_imm),\n\tI(ImplicitOps, em_ret_far),\n\tD(ImplicitOps), DI(SrcImmByte, intn),\n\tD(ImplicitOps | No64), II(ImplicitOps, em_iret, iret),\n\t/* 0xD0 - 0xD7 */\n\tG(Src2One | ByteOp, group2), G(Src2One, group2),\n\tG(Src2CL | ByteOp, group2), G(Src2CL, group2),\n\tI(DstAcc | SrcImmUByte | No64, em_aam),\n\tI(DstAcc | SrcImmUByte | No64, em_aad),\n\tF(DstAcc | ByteOp | No64, em_salc),\n\tI(DstAcc | SrcXLat | ByteOp, em_mov),\n\t/* 0xD8 - 0xDF */\n\tN, E(0, &escape_d9), N, E(0, &escape_db), N, E(0, &escape_dd), N, N,\n\t/* 0xE0 - 0xE7 */\n\tX3(I(SrcImmByte | NearBranch, em_loop)),\n\tI(SrcImmByte | NearBranch, em_jcxz),\n\tI2bvIP(SrcImmUByte | DstAcc, em_in,  in,  check_perm_in),\n\tI2bvIP(SrcAcc | DstImmUByte, em_out, out, check_perm_out),\n\t/* 0xE8 - 0xEF */\n\tI(SrcImm | NearBranch, em_call), D(SrcImm | ImplicitOps | NearBranch),\n\tI(SrcImmFAddr | No64, em_jmp_far),\n\tD(SrcImmByte | ImplicitOps | NearBranch),\n\tI2bvIP(SrcDX | DstAcc, em_in,  in,  check_perm_in),\n\tI2bvIP(SrcAcc | DstDX, em_out, out, check_perm_out),\n\t/* 0xF0 - 0xF7 */\n\tN, DI(ImplicitOps, icebp), N, N,\n\tDI(ImplicitOps | Priv, hlt), D(ImplicitOps),\n\tG(ByteOp, group3), G(0, group3),\n\t/* 0xF8 - 0xFF */\n\tD(ImplicitOps), D(ImplicitOps),\n\tI(ImplicitOps, em_cli), I(ImplicitOps, em_sti),\n\tD(ImplicitOps), D(ImplicitOps), G(0, group4), G(0, group5),\n};\n\nstatic const struct opcode twobyte_table[256] = {\n\t/* 0x00 - 0x0F */\n\tG(0, group6), GD(0, &group7), N, N,\n\tN, I(ImplicitOps | EmulateOnUD, em_syscall),\n\tII(ImplicitOps | Priv, em_clts, clts), N,\n\tDI(ImplicitOps | Priv, invd), DI(ImplicitOps | Priv, wbinvd), N, N,\n\tN, D(ImplicitOps | ModRM | SrcMem | NoAccess), N, N,\n\t/* 0x10 - 0x1F */\n\tN, N, N, N, N, N, N, N,\n\tD(ImplicitOps | ModRM | SrcMem | NoAccess),\n\tN, N, N, N, N, N, D(ImplicitOps | ModRM | SrcMem | NoAccess),\n\t/* 0x20 - 0x2F */\n\tDIP(ModRM | DstMem | Priv | Op3264 | NoMod, cr_read, check_cr_read),\n\tDIP(ModRM | DstMem | Priv | Op3264 | NoMod, dr_read, check_dr_read),\n\tIIP(ModRM | SrcMem | Priv | Op3264 | NoMod, em_cr_write, cr_write,\n\t\t\t\t\t\tcheck_cr_write),\n\tIIP(ModRM | SrcMem | Priv | Op3264 | NoMod, em_dr_write, dr_write,\n\t\t\t\t\t\tcheck_dr_write),\n\tN, N, N, N,\n\tGP(ModRM | DstReg | SrcMem | Mov | Sse, &pfx_0f_28_0f_29),\n\tGP(ModRM | DstMem | SrcReg | Mov | Sse, &pfx_0f_28_0f_29),\n\tN, GP(ModRM | DstMem | SrcReg | Mov | Sse, &pfx_0f_2b),\n\tN, N, N, N,\n\t/* 0x30 - 0x3F */\n\tII(ImplicitOps | Priv, em_wrmsr, wrmsr),\n\tIIP(ImplicitOps, em_rdtsc, rdtsc, check_rdtsc),\n\tII(ImplicitOps | Priv, em_rdmsr, rdmsr),\n\tIIP(ImplicitOps, em_rdpmc, rdpmc, check_rdpmc),\n\tI(ImplicitOps | EmulateOnUD, em_sysenter),\n\tI(ImplicitOps | Priv | EmulateOnUD, em_sysexit),\n\tN, N,\n\tN, N, N, N, N, N, N, N,\n\t/* 0x40 - 0x4F */\n\tX16(D(DstReg | SrcMem | ModRM)),\n\t/* 0x50 - 0x5F */\n\tN, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N,\n\t/* 0x60 - 0x6F */\n\tN, N, N, N,\n\tN, N, N, N,\n\tN, N, N, N,\n\tN, N, N, GP(SrcMem | DstReg | ModRM | Mov, &pfx_0f_6f_0f_7f),\n\t/* 0x70 - 0x7F */\n\tN, N, N, N,\n\tN, N, N, N,\n\tN, N, N, N,\n\tN, N, N, GP(SrcReg | DstMem | ModRM | Mov, &pfx_0f_6f_0f_7f),\n\t/* 0x80 - 0x8F */\n\tX16(D(SrcImm | NearBranch)),\n\t/* 0x90 - 0x9F */\n\tX16(D(ByteOp | DstMem | SrcNone | ModRM| Mov)),\n\t/* 0xA0 - 0xA7 */\n\tI(Stack | Src2FS, em_push_sreg), I(Stack | Src2FS, em_pop_sreg),\n\tII(ImplicitOps, em_cpuid, cpuid),\n\tF(DstMem | SrcReg | ModRM | BitOp | NoWrite, em_bt),\n\tF(DstMem | SrcReg | Src2ImmByte | ModRM, em_shld),\n\tF(DstMem | SrcReg | Src2CL | ModRM, em_shld), N, N,\n\t/* 0xA8 - 0xAF */\n\tI(Stack | Src2GS, em_push_sreg), I(Stack | Src2GS, em_pop_sreg),\n\tII(EmulateOnUD | ImplicitOps, em_rsm, rsm),\n\tF(DstMem | SrcReg | ModRM | BitOp | Lock | PageTable, em_bts),\n\tF(DstMem | SrcReg | Src2ImmByte | ModRM, em_shrd),\n\tF(DstMem | SrcReg | Src2CL | ModRM, em_shrd),\n\tGD(0, &group15), F(DstReg | SrcMem | ModRM, em_imul),\n\t/* 0xB0 - 0xB7 */\n\tI2bv(DstMem | SrcReg | ModRM | Lock | PageTable | SrcWrite, em_cmpxchg),\n\tI(DstReg | SrcMemFAddr | ModRM | Src2SS, em_lseg),\n\tF(DstMem | SrcReg | ModRM | BitOp | Lock, em_btr),\n\tI(DstReg | SrcMemFAddr | ModRM | Src2FS, em_lseg),\n\tI(DstReg | SrcMemFAddr | ModRM | Src2GS, em_lseg),\n\tD(DstReg | SrcMem8 | ModRM | Mov), D(DstReg | SrcMem16 | ModRM | Mov),\n\t/* 0xB8 - 0xBF */\n\tN, N,\n\tG(BitOp, group8),\n\tF(DstMem | SrcReg | ModRM | BitOp | Lock | PageTable, em_btc),\n\tI(DstReg | SrcMem | ModRM, em_bsf_c),\n\tI(DstReg | SrcMem | ModRM, em_bsr_c),\n\tD(DstReg | SrcMem8 | ModRM | Mov), D(DstReg | SrcMem16 | ModRM | Mov),\n\t/* 0xC0 - 0xC7 */\n\tF2bv(DstMem | SrcReg | ModRM | SrcWrite | Lock, em_xadd),\n\tN, ID(0, &instr_dual_0f_c3),\n\tN, N, N, GD(0, &group9),\n\t/* 0xC8 - 0xCF */\n\tX8(I(DstReg, em_bswap)),\n\t/* 0xD0 - 0xDF */\n\tN, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N,\n\t/* 0xE0 - 0xEF */\n\tN, N, N, N, N, N, N, GP(SrcReg | DstMem | ModRM | Mov, &pfx_0f_e7),\n\tN, N, N, N, N, N, N, N,\n\t/* 0xF0 - 0xFF */\n\tN, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N\n};\n\nstatic const struct instr_dual instr_dual_0f_38_f0 = {\n\tI(DstReg | SrcMem | Mov, em_movbe), N\n};\n\nstatic const struct instr_dual instr_dual_0f_38_f1 = {\n\tI(DstMem | SrcReg | Mov, em_movbe), N\n};\n\nstatic const struct gprefix three_byte_0f_38_f0 = {\n\tID(0, &instr_dual_0f_38_f0), N, N, N\n};\n\nstatic const struct gprefix three_byte_0f_38_f1 = {\n\tID(0, &instr_dual_0f_38_f1), N, N, N\n};\n\n/*\n * Insns below are selected by the prefix which indexed by the third opcode\n * byte.\n */\nstatic const struct opcode opcode_map_0f_38[256] = {\n\t/* 0x00 - 0x7f */\n\tX16(N), X16(N), X16(N), X16(N), X16(N), X16(N), X16(N), X16(N),\n\t/* 0x80 - 0xef */\n\tX16(N), X16(N), X16(N), X16(N), X16(N), X16(N), X16(N),\n\t/* 0xf0 - 0xf1 */\n\tGP(EmulateOnUD | ModRM, &three_byte_0f_38_f0),\n\tGP(EmulateOnUD | ModRM, &three_byte_0f_38_f1),\n\t/* 0xf2 - 0xff */\n\tN, N, X4(N), X8(N)\n};\n\n#undef D\n#undef N\n#undef G\n#undef GD\n#undef I\n#undef GP\n#undef EXT\n#undef MD\n#undef ID\n\n#undef D2bv\n#undef D2bvIP\n#undef I2bv\n#undef I2bvIP\n#undef I6ALU\n\nstatic unsigned imm_size(struct x86_emulate_ctxt *ctxt)\n{\n\tunsigned size;\n\n\tsize = (ctxt->d & ByteOp) ? 1 : ctxt->op_bytes;\n\tif (size == 8)\n\t\tsize = 4;\n\treturn size;\n}\n\nstatic int decode_imm(struct x86_emulate_ctxt *ctxt, struct operand *op,\n\t\t      unsigned size, bool sign_extension)\n{\n\tint rc = X86EMUL_CONTINUE;\n\n\top->type = OP_IMM;\n\top->bytes = size;\n\top->addr.mem.ea = ctxt->_eip;\n\t/* NB. Immediates are sign-extended as necessary. */\n\tswitch (op->bytes) {\n\tcase 1:\n\t\top->val = insn_fetch(s8, ctxt);\n\t\tbreak;\n\tcase 2:\n\t\top->val = insn_fetch(s16, ctxt);\n\t\tbreak;\n\tcase 4:\n\t\top->val = insn_fetch(s32, ctxt);\n\t\tbreak;\n\tcase 8:\n\t\top->val = insn_fetch(s64, ctxt);\n\t\tbreak;\n\t}\n\tif (!sign_extension) {\n\t\tswitch (op->bytes) {\n\t\tcase 1:\n\t\t\top->val &= 0xff;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\top->val &= 0xffff;\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\top->val &= 0xffffffff;\n\t\t\tbreak;\n\t\t}\n\t}\ndone:\n\treturn rc;\n}\n\nstatic int decode_operand(struct x86_emulate_ctxt *ctxt, struct operand *op,\n\t\t\t  unsigned d)\n{\n\tint rc = X86EMUL_CONTINUE;\n\n\tswitch (d) {\n\tcase OpReg:\n\t\tdecode_register_operand(ctxt, op);\n\t\tbreak;\n\tcase OpImmUByte:\n\t\trc = decode_imm(ctxt, op, 1, false);\n\t\tbreak;\n\tcase OpMem:\n\t\tctxt->memop.bytes = (ctxt->d & ByteOp) ? 1 : ctxt->op_bytes;\n\tmem_common:\n\t\t*op = ctxt->memop;\n\t\tctxt->memopp = op;\n\t\tif (ctxt->d & BitOp)\n\t\t\tfetch_bit_operand(ctxt);\n\t\top->orig_val = op->val;\n\t\tbreak;\n\tcase OpMem64:\n\t\tctxt->memop.bytes = (ctxt->op_bytes == 8) ? 16 : 8;\n\t\tgoto mem_common;\n\tcase OpAcc:\n\t\top->type = OP_REG;\n\t\top->bytes = (ctxt->d & ByteOp) ? 1 : ctxt->op_bytes;\n\t\top->addr.reg = reg_rmw(ctxt, VCPU_REGS_RAX);\n\t\tfetch_register_operand(op);\n\t\top->orig_val = op->val;\n\t\tbreak;\n\tcase OpAccLo:\n\t\top->type = OP_REG;\n\t\top->bytes = (ctxt->d & ByteOp) ? 2 : ctxt->op_bytes;\n\t\top->addr.reg = reg_rmw(ctxt, VCPU_REGS_RAX);\n\t\tfetch_register_operand(op);\n\t\top->orig_val = op->val;\n\t\tbreak;\n\tcase OpAccHi:\n\t\tif (ctxt->d & ByteOp) {\n\t\t\top->type = OP_NONE;\n\t\t\tbreak;\n\t\t}\n\t\top->type = OP_REG;\n\t\top->bytes = ctxt->op_bytes;\n\t\top->addr.reg = reg_rmw(ctxt, VCPU_REGS_RDX);\n\t\tfetch_register_operand(op);\n\t\top->orig_val = op->val;\n\t\tbreak;\n\tcase OpDI:\n\t\top->type = OP_MEM;\n\t\top->bytes = (ctxt->d & ByteOp) ? 1 : ctxt->op_bytes;\n\t\top->addr.mem.ea =\n\t\t\tregister_address(ctxt, VCPU_REGS_RDI);\n\t\top->addr.mem.seg = VCPU_SREG_ES;\n\t\top->val = 0;\n\t\top->count = 1;\n\t\tbreak;\n\tcase OpDX:\n\t\top->type = OP_REG;\n\t\top->bytes = 2;\n\t\top->addr.reg = reg_rmw(ctxt, VCPU_REGS_RDX);\n\t\tfetch_register_operand(op);\n\t\tbreak;\n\tcase OpCL:\n\t\top->type = OP_IMM;\n\t\top->bytes = 1;\n\t\top->val = reg_read(ctxt, VCPU_REGS_RCX) & 0xff;\n\t\tbreak;\n\tcase OpImmByte:\n\t\trc = decode_imm(ctxt, op, 1, true);\n\t\tbreak;\n\tcase OpOne:\n\t\top->type = OP_IMM;\n\t\top->bytes = 1;\n\t\top->val = 1;\n\t\tbreak;\n\tcase OpImm:\n\t\trc = decode_imm(ctxt, op, imm_size(ctxt), true);\n\t\tbreak;\n\tcase OpImm64:\n\t\trc = decode_imm(ctxt, op, ctxt->op_bytes, true);\n\t\tbreak;\n\tcase OpMem8:\n\t\tctxt->memop.bytes = 1;\n\t\tif (ctxt->memop.type == OP_REG) {\n\t\t\tctxt->memop.addr.reg = decode_register(ctxt,\n\t\t\t\t\tctxt->modrm_rm, true);\n\t\t\tfetch_register_operand(&ctxt->memop);\n\t\t}\n\t\tgoto mem_common;\n\tcase OpMem16:\n\t\tctxt->memop.bytes = 2;\n\t\tgoto mem_common;\n\tcase OpMem32:\n\t\tctxt->memop.bytes = 4;\n\t\tgoto mem_common;\n\tcase OpImmU16:\n\t\trc = decode_imm(ctxt, op, 2, false);\n\t\tbreak;\n\tcase OpImmU:\n\t\trc = decode_imm(ctxt, op, imm_size(ctxt), false);\n\t\tbreak;\n\tcase OpSI:\n\t\top->type = OP_MEM;\n\t\top->bytes = (ctxt->d & ByteOp) ? 1 : ctxt->op_bytes;\n\t\top->addr.mem.ea =\n\t\t\tregister_address(ctxt, VCPU_REGS_RSI);\n\t\top->addr.mem.seg = ctxt->seg_override;\n\t\top->val = 0;\n\t\top->count = 1;\n\t\tbreak;\n\tcase OpXLat:\n\t\top->type = OP_MEM;\n\t\top->bytes = (ctxt->d & ByteOp) ? 1 : ctxt->op_bytes;\n\t\top->addr.mem.ea =\n\t\t\taddress_mask(ctxt,\n\t\t\t\treg_read(ctxt, VCPU_REGS_RBX) +\n\t\t\t\t(reg_read(ctxt, VCPU_REGS_RAX) & 0xff));\n\t\top->addr.mem.seg = ctxt->seg_override;\n\t\top->val = 0;\n\t\tbreak;\n\tcase OpImmFAddr:\n\t\top->type = OP_IMM;\n\t\top->addr.mem.ea = ctxt->_eip;\n\t\top->bytes = ctxt->op_bytes + 2;\n\t\tinsn_fetch_arr(op->valptr, op->bytes, ctxt);\n\t\tbreak;\n\tcase OpMemFAddr:\n\t\tctxt->memop.bytes = ctxt->op_bytes + 2;\n\t\tgoto mem_common;\n\tcase OpES:\n\t\top->type = OP_IMM;\n\t\top->val = VCPU_SREG_ES;\n\t\tbreak;\n\tcase OpCS:\n\t\top->type = OP_IMM;\n\t\top->val = VCPU_SREG_CS;\n\t\tbreak;\n\tcase OpSS:\n\t\top->type = OP_IMM;\n\t\top->val = VCPU_SREG_SS;\n\t\tbreak;\n\tcase OpDS:\n\t\top->type = OP_IMM;\n\t\top->val = VCPU_SREG_DS;\n\t\tbreak;\n\tcase OpFS:\n\t\top->type = OP_IMM;\n\t\top->val = VCPU_SREG_FS;\n\t\tbreak;\n\tcase OpGS:\n\t\top->type = OP_IMM;\n\t\top->val = VCPU_SREG_GS;\n\t\tbreak;\n\tcase OpImplicit:\n\t\t/* Special instructions do their own operand decoding. */\n\tdefault:\n\t\top->type = OP_NONE; /* Disable writeback. */\n\t\tbreak;\n\t}\n\ndone:\n\treturn rc;\n}\n\nint x86_decode_insn(struct x86_emulate_ctxt *ctxt, void *insn, int insn_len)\n{\n\tint rc = X86EMUL_CONTINUE;\n\tint mode = ctxt->mode;\n\tint def_op_bytes, def_ad_bytes, goffset, simd_prefix;\n\tbool op_prefix = false;\n\tbool has_seg_override = false;\n\tstruct opcode opcode;\n\n\tctxt->memop.type = OP_NONE;\n\tctxt->memopp = NULL;\n\tctxt->_eip = ctxt->eip;\n\tctxt->fetch.ptr = ctxt->fetch.data;\n\tctxt->fetch.end = ctxt->fetch.data + insn_len;\n\tctxt->opcode_len = 1;\n\tif (insn_len > 0)\n\t\tmemcpy(ctxt->fetch.data, insn, insn_len);\n\telse {\n\t\trc = __do_insn_fetch_bytes(ctxt, 1);\n\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\treturn rc;\n\t}\n\n\tswitch (mode) {\n\tcase X86EMUL_MODE_REAL:\n\tcase X86EMUL_MODE_VM86:\n\tcase X86EMUL_MODE_PROT16:\n\t\tdef_op_bytes = def_ad_bytes = 2;\n\t\tbreak;\n\tcase X86EMUL_MODE_PROT32:\n\t\tdef_op_bytes = def_ad_bytes = 4;\n\t\tbreak;\n#ifdef CONFIG_X86_64\n\tcase X86EMUL_MODE_PROT64:\n\t\tdef_op_bytes = 4;\n\t\tdef_ad_bytes = 8;\n\t\tbreak;\n#endif\n\tdefault:\n\t\treturn EMULATION_FAILED;\n\t}\n\n\tctxt->op_bytes = def_op_bytes;\n\tctxt->ad_bytes = def_ad_bytes;\n\n\t/* Legacy prefixes. */\n\tfor (;;) {\n\t\tswitch (ctxt->b = insn_fetch(u8, ctxt)) {\n\t\tcase 0x66:\t/* operand-size override */\n\t\t\top_prefix = true;\n\t\t\t/* switch between 2/4 bytes */\n\t\t\tctxt->op_bytes = def_op_bytes ^ 6;\n\t\t\tbreak;\n\t\tcase 0x67:\t/* address-size override */\n\t\t\tif (mode == X86EMUL_MODE_PROT64)\n\t\t\t\t/* switch between 4/8 bytes */\n\t\t\t\tctxt->ad_bytes = def_ad_bytes ^ 12;\n\t\t\telse\n\t\t\t\t/* switch between 2/4 bytes */\n\t\t\t\tctxt->ad_bytes = def_ad_bytes ^ 6;\n\t\t\tbreak;\n\t\tcase 0x26:\t/* ES override */\n\t\tcase 0x2e:\t/* CS override */\n\t\tcase 0x36:\t/* SS override */\n\t\tcase 0x3e:\t/* DS override */\n\t\t\thas_seg_override = true;\n\t\t\tctxt->seg_override = (ctxt->b >> 3) & 3;\n\t\t\tbreak;\n\t\tcase 0x64:\t/* FS override */\n\t\tcase 0x65:\t/* GS override */\n\t\t\thas_seg_override = true;\n\t\t\tctxt->seg_override = ctxt->b & 7;\n\t\t\tbreak;\n\t\tcase 0x40 ... 0x4f: /* REX */\n\t\t\tif (mode != X86EMUL_MODE_PROT64)\n\t\t\t\tgoto done_prefixes;\n\t\t\tctxt->rex_prefix = ctxt->b;\n\t\t\tcontinue;\n\t\tcase 0xf0:\t/* LOCK */\n\t\t\tctxt->lock_prefix = 1;\n\t\t\tbreak;\n\t\tcase 0xf2:\t/* REPNE/REPNZ */\n\t\tcase 0xf3:\t/* REP/REPE/REPZ */\n\t\t\tctxt->rep_prefix = ctxt->b;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tgoto done_prefixes;\n\t\t}\n\n\t\t/* Any legacy prefix after a REX prefix nullifies its effect. */\n\n\t\tctxt->rex_prefix = 0;\n\t}\n\ndone_prefixes:\n\n\t/* REX prefix. */\n\tif (ctxt->rex_prefix & 8)\n\t\tctxt->op_bytes = 8;\t/* REX.W */\n\n\t/* Opcode byte(s). */\n\topcode = opcode_table[ctxt->b];\n\t/* Two-byte opcode? */\n\tif (ctxt->b == 0x0f) {\n\t\tctxt->opcode_len = 2;\n\t\tctxt->b = insn_fetch(u8, ctxt);\n\t\topcode = twobyte_table[ctxt->b];\n\n\t\t/* 0F_38 opcode map */\n\t\tif (ctxt->b == 0x38) {\n\t\t\tctxt->opcode_len = 3;\n\t\t\tctxt->b = insn_fetch(u8, ctxt);\n\t\t\topcode = opcode_map_0f_38[ctxt->b];\n\t\t}\n\t}\n\tctxt->d = opcode.flags;\n\n\tif (ctxt->d & ModRM)\n\t\tctxt->modrm = insn_fetch(u8, ctxt);\n\n\t/* vex-prefix instructions are not implemented */\n\tif (ctxt->opcode_len == 1 && (ctxt->b == 0xc5 || ctxt->b == 0xc4) &&\n\t    (mode == X86EMUL_MODE_PROT64 || (ctxt->modrm & 0xc0) == 0xc0)) {\n\t\tctxt->d = NotImpl;\n\t}\n\n\twhile (ctxt->d & GroupMask) {\n\t\tswitch (ctxt->d & GroupMask) {\n\t\tcase Group:\n\t\t\tgoffset = (ctxt->modrm >> 3) & 7;\n\t\t\topcode = opcode.u.group[goffset];\n\t\t\tbreak;\n\t\tcase GroupDual:\n\t\t\tgoffset = (ctxt->modrm >> 3) & 7;\n\t\t\tif ((ctxt->modrm >> 6) == 3)\n\t\t\t\topcode = opcode.u.gdual->mod3[goffset];\n\t\t\telse\n\t\t\t\topcode = opcode.u.gdual->mod012[goffset];\n\t\t\tbreak;\n\t\tcase RMExt:\n\t\t\tgoffset = ctxt->modrm & 7;\n\t\t\topcode = opcode.u.group[goffset];\n\t\t\tbreak;\n\t\tcase Prefix:\n\t\t\tif (ctxt->rep_prefix && op_prefix)\n\t\t\t\treturn EMULATION_FAILED;\n\t\t\tsimd_prefix = op_prefix ? 0x66 : ctxt->rep_prefix;\n\t\t\tswitch (simd_prefix) {\n\t\t\tcase 0x00: opcode = opcode.u.gprefix->pfx_no; break;\n\t\t\tcase 0x66: opcode = opcode.u.gprefix->pfx_66; break;\n\t\t\tcase 0xf2: opcode = opcode.u.gprefix->pfx_f2; break;\n\t\t\tcase 0xf3: opcode = opcode.u.gprefix->pfx_f3; break;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase Escape:\n\t\t\tif (ctxt->modrm > 0xbf)\n\t\t\t\topcode = opcode.u.esc->high[ctxt->modrm - 0xc0];\n\t\t\telse\n\t\t\t\topcode = opcode.u.esc->op[(ctxt->modrm >> 3) & 7];\n\t\t\tbreak;\n\t\tcase InstrDual:\n\t\t\tif ((ctxt->modrm >> 6) == 3)\n\t\t\t\topcode = opcode.u.idual->mod3;\n\t\t\telse\n\t\t\t\topcode = opcode.u.idual->mod012;\n\t\t\tbreak;\n\t\tcase ModeDual:\n\t\t\tif (ctxt->mode == X86EMUL_MODE_PROT64)\n\t\t\t\topcode = opcode.u.mdual->mode64;\n\t\t\telse\n\t\t\t\topcode = opcode.u.mdual->mode32;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn EMULATION_FAILED;\n\t\t}\n\n\t\tctxt->d &= ~(u64)GroupMask;\n\t\tctxt->d |= opcode.flags;\n\t}\n\n\t/* Unrecognised? */\n\tif (ctxt->d == 0)\n\t\treturn EMULATION_FAILED;\n\n\tctxt->execute = opcode.u.execute;\n\n\tif (unlikely(ctxt->ud) && likely(!(ctxt->d & EmulateOnUD)))\n\t\treturn EMULATION_FAILED;\n\n\tif (unlikely(ctxt->d &\n\t    (NotImpl|Stack|Op3264|Sse|Mmx|Intercept|CheckPerm|NearBranch|\n\t     No16))) {\n\t\t/*\n\t\t * These are copied unconditionally here, and checked unconditionally\n\t\t * in x86_emulate_insn.\n\t\t */\n\t\tctxt->check_perm = opcode.check_perm;\n\t\tctxt->intercept = opcode.intercept;\n\n\t\tif (ctxt->d & NotImpl)\n\t\t\treturn EMULATION_FAILED;\n\n\t\tif (mode == X86EMUL_MODE_PROT64) {\n\t\t\tif (ctxt->op_bytes == 4 && (ctxt->d & Stack))\n\t\t\t\tctxt->op_bytes = 8;\n\t\t\telse if (ctxt->d & NearBranch)\n\t\t\t\tctxt->op_bytes = 8;\n\t\t}\n\n\t\tif (ctxt->d & Op3264) {\n\t\t\tif (mode == X86EMUL_MODE_PROT64)\n\t\t\t\tctxt->op_bytes = 8;\n\t\t\telse\n\t\t\t\tctxt->op_bytes = 4;\n\t\t}\n\n\t\tif ((ctxt->d & No16) && ctxt->op_bytes == 2)\n\t\t\tctxt->op_bytes = 4;\n\n\t\tif (ctxt->d & Sse)\n\t\t\tctxt->op_bytes = 16;\n\t\telse if (ctxt->d & Mmx)\n\t\t\tctxt->op_bytes = 8;\n\t}\n\n\t/* ModRM and SIB bytes. */\n\tif (ctxt->d & ModRM) {\n\t\trc = decode_modrm(ctxt, &ctxt->memop);\n\t\tif (!has_seg_override) {\n\t\t\thas_seg_override = true;\n\t\t\tctxt->seg_override = ctxt->modrm_seg;\n\t\t}\n\t} else if (ctxt->d & MemAbs)\n\t\trc = decode_abs(ctxt, &ctxt->memop);\n\tif (rc != X86EMUL_CONTINUE)\n\t\tgoto done;\n\n\tif (!has_seg_override)\n\t\tctxt->seg_override = VCPU_SREG_DS;\n\n\tctxt->memop.addr.mem.seg = ctxt->seg_override;\n\n\t/*\n\t * Decode and fetch the source operand: register, memory\n\t * or immediate.\n\t */\n\trc = decode_operand(ctxt, &ctxt->src, (ctxt->d >> SrcShift) & OpMask);\n\tif (rc != X86EMUL_CONTINUE)\n\t\tgoto done;\n\n\t/*\n\t * Decode and fetch the second source operand: register, memory\n\t * or immediate.\n\t */\n\trc = decode_operand(ctxt, &ctxt->src2, (ctxt->d >> Src2Shift) & OpMask);\n\tif (rc != X86EMUL_CONTINUE)\n\t\tgoto done;\n\n\t/* Decode and fetch the destination operand: register or memory. */\n\trc = decode_operand(ctxt, &ctxt->dst, (ctxt->d >> DstShift) & OpMask);\n\n\tif (ctxt->rip_relative && likely(ctxt->memopp))\n\t\tctxt->memopp->addr.mem.ea = address_mask(ctxt,\n\t\t\t\t\tctxt->memopp->addr.mem.ea + ctxt->_eip);\n\ndone:\n\treturn (rc != X86EMUL_CONTINUE) ? EMULATION_FAILED : EMULATION_OK;\n}\n\nbool x86_page_table_writing_insn(struct x86_emulate_ctxt *ctxt)\n{\n\treturn ctxt->d & PageTable;\n}\n\nstatic bool string_insn_completed(struct x86_emulate_ctxt *ctxt)\n{\n\t/* The second termination condition only applies for REPE\n\t * and REPNE. Test if the repeat string operation prefix is\n\t * REPE/REPZ or REPNE/REPNZ and if it's the case it tests the\n\t * corresponding termination condition according to:\n\t * \t- if REPE/REPZ and ZF = 0 then done\n\t * \t- if REPNE/REPNZ and ZF = 1 then done\n\t */\n\tif (((ctxt->b == 0xa6) || (ctxt->b == 0xa7) ||\n\t     (ctxt->b == 0xae) || (ctxt->b == 0xaf))\n\t    && (((ctxt->rep_prefix == REPE_PREFIX) &&\n\t\t ((ctxt->eflags & X86_EFLAGS_ZF) == 0))\n\t\t|| ((ctxt->rep_prefix == REPNE_PREFIX) &&\n\t\t    ((ctxt->eflags & X86_EFLAGS_ZF) == X86_EFLAGS_ZF))))\n\t\treturn true;\n\n\treturn false;\n}\n\nstatic int flush_pending_x87_faults(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc;\n\n\tctxt->ops->get_fpu(ctxt);\n\trc = asm_safe(\"fwait\");\n\tctxt->ops->put_fpu(ctxt);\n\n\tif (unlikely(rc != X86EMUL_CONTINUE))\n\t\treturn emulate_exception(ctxt, MF_VECTOR, 0, false);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic void fetch_possible_mmx_operand(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t       struct operand *op)\n{\n\tif (op->type == OP_MM)\n\t\tread_mmx_reg(ctxt, &op->mm_val, op->addr.mm);\n}\n\nstatic int fastop(struct x86_emulate_ctxt *ctxt, void (*fop)(struct fastop *))\n{\n\tregister void *__sp asm(_ASM_SP);\n\tulong flags = (ctxt->eflags & EFLAGS_MASK) | X86_EFLAGS_IF;\n\n\tif (!(ctxt->d & ByteOp))\n\t\tfop += __ffs(ctxt->dst.bytes) * FASTOP_SIZE;\n\n\tasm(\"push %[flags]; popf; call *%[fastop]; pushf; pop %[flags]\\n\"\n\t    : \"+a\"(ctxt->dst.val), \"+d\"(ctxt->src.val), [flags]\"+D\"(flags),\n\t      [fastop]\"+S\"(fop), \"+r\"(__sp)\n\t    : \"c\"(ctxt->src2.val));\n\n\tctxt->eflags = (ctxt->eflags & ~EFLAGS_MASK) | (flags & EFLAGS_MASK);\n\tif (!fop) /* exception is returned in fop variable */\n\t\treturn emulate_de(ctxt);\n\treturn X86EMUL_CONTINUE;\n}\n\nvoid init_decode_cache(struct x86_emulate_ctxt *ctxt)\n{\n\tmemset(&ctxt->rip_relative, 0,\n\t       (void *)&ctxt->modrm - (void *)&ctxt->rip_relative);\n\n\tctxt->io_read.pos = 0;\n\tctxt->io_read.end = 0;\n\tctxt->mem_read.end = 0;\n}\n\nint x86_emulate_insn(struct x86_emulate_ctxt *ctxt)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tint rc = X86EMUL_CONTINUE;\n\tint saved_dst_type = ctxt->dst.type;\n\n\tctxt->mem_read.pos = 0;\n\n\t/* LOCK prefix is allowed only with some instructions */\n\tif (ctxt->lock_prefix && (!(ctxt->d & Lock) || ctxt->dst.type != OP_MEM)) {\n\t\trc = emulate_ud(ctxt);\n\t\tgoto done;\n\t}\n\n\tif ((ctxt->d & SrcMask) == SrcMemFAddr && ctxt->src.type != OP_MEM) {\n\t\trc = emulate_ud(ctxt);\n\t\tgoto done;\n\t}\n\n\tif (unlikely(ctxt->d &\n\t\t     (No64|Undefined|Sse|Mmx|Intercept|CheckPerm|Priv|Prot|String))) {\n\t\tif ((ctxt->mode == X86EMUL_MODE_PROT64 && (ctxt->d & No64)) ||\n\t\t\t\t(ctxt->d & Undefined)) {\n\t\t\trc = emulate_ud(ctxt);\n\t\t\tgoto done;\n\t\t}\n\n\t\tif (((ctxt->d & (Sse|Mmx)) && ((ops->get_cr(ctxt, 0) & X86_CR0_EM)))\n\t\t    || ((ctxt->d & Sse) && !(ops->get_cr(ctxt, 4) & X86_CR4_OSFXSR))) {\n\t\t\trc = emulate_ud(ctxt);\n\t\t\tgoto done;\n\t\t}\n\n\t\tif ((ctxt->d & (Sse|Mmx)) && (ops->get_cr(ctxt, 0) & X86_CR0_TS)) {\n\t\t\trc = emulate_nm(ctxt);\n\t\t\tgoto done;\n\t\t}\n\n\t\tif (ctxt->d & Mmx) {\n\t\t\trc = flush_pending_x87_faults(ctxt);\n\t\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\t\tgoto done;\n\t\t\t/*\n\t\t\t * Now that we know the fpu is exception safe, we can fetch\n\t\t\t * operands from it.\n\t\t\t */\n\t\t\tfetch_possible_mmx_operand(ctxt, &ctxt->src);\n\t\t\tfetch_possible_mmx_operand(ctxt, &ctxt->src2);\n\t\t\tif (!(ctxt->d & Mov))\n\t\t\t\tfetch_possible_mmx_operand(ctxt, &ctxt->dst);\n\t\t}\n\n\t\tif (unlikely(ctxt->emul_flags & X86EMUL_GUEST_MASK) && ctxt->intercept) {\n\t\t\trc = emulator_check_intercept(ctxt, ctxt->intercept,\n\t\t\t\t\t\t      X86_ICPT_PRE_EXCEPT);\n\t\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\t\tgoto done;\n\t\t}\n\n\t\t/* Instruction can only be executed in protected mode */\n\t\tif ((ctxt->d & Prot) && ctxt->mode < X86EMUL_MODE_PROT16) {\n\t\t\trc = emulate_ud(ctxt);\n\t\t\tgoto done;\n\t\t}\n\n\t\t/* Privileged instruction can be executed only in CPL=0 */\n\t\tif ((ctxt->d & Priv) && ops->cpl(ctxt)) {\n\t\t\tif (ctxt->d & PrivUD)\n\t\t\t\trc = emulate_ud(ctxt);\n\t\t\telse\n\t\t\t\trc = emulate_gp(ctxt, 0);\n\t\t\tgoto done;\n\t\t}\n\n\t\t/* Do instruction specific permission checks */\n\t\tif (ctxt->d & CheckPerm) {\n\t\t\trc = ctxt->check_perm(ctxt);\n\t\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\t\tgoto done;\n\t\t}\n\n\t\tif (unlikely(ctxt->emul_flags & X86EMUL_GUEST_MASK) && (ctxt->d & Intercept)) {\n\t\t\trc = emulator_check_intercept(ctxt, ctxt->intercept,\n\t\t\t\t\t\t      X86_ICPT_POST_EXCEPT);\n\t\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\t\tgoto done;\n\t\t}\n\n\t\tif (ctxt->rep_prefix && (ctxt->d & String)) {\n\t\t\t/* All REP prefixes have the same first termination condition */\n\t\t\tif (address_mask(ctxt, reg_read(ctxt, VCPU_REGS_RCX)) == 0) {\n\t\t\t\tstring_registers_quirk(ctxt);\n\t\t\t\tctxt->eip = ctxt->_eip;\n\t\t\t\tctxt->eflags &= ~X86_EFLAGS_RF;\n\t\t\t\tgoto done;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ((ctxt->src.type == OP_MEM) && !(ctxt->d & NoAccess)) {\n\t\trc = segmented_read(ctxt, ctxt->src.addr.mem,\n\t\t\t\t    ctxt->src.valptr, ctxt->src.bytes);\n\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\tgoto done;\n\t\tctxt->src.orig_val64 = ctxt->src.val64;\n\t}\n\n\tif (ctxt->src2.type == OP_MEM) {\n\t\trc = segmented_read(ctxt, ctxt->src2.addr.mem,\n\t\t\t\t    &ctxt->src2.val, ctxt->src2.bytes);\n\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\tgoto done;\n\t}\n\n\tif ((ctxt->d & DstMask) == ImplicitOps)\n\t\tgoto special_insn;\n\n\n\tif ((ctxt->dst.type == OP_MEM) && !(ctxt->d & Mov)) {\n\t\t/* optimisation - avoid slow emulated read if Mov */\n\t\trc = segmented_read(ctxt, ctxt->dst.addr.mem,\n\t\t\t\t   &ctxt->dst.val, ctxt->dst.bytes);\n\t\tif (rc != X86EMUL_CONTINUE) {\n\t\t\tif (!(ctxt->d & NoWrite) &&\n\t\t\t    rc == X86EMUL_PROPAGATE_FAULT &&\n\t\t\t    ctxt->exception.vector == PF_VECTOR)\n\t\t\t\tctxt->exception.error_code |= PFERR_WRITE_MASK;\n\t\t\tgoto done;\n\t\t}\n\t}\n\t/* Copy full 64-bit value for CMPXCHG8B.  */\n\tctxt->dst.orig_val64 = ctxt->dst.val64;\n\nspecial_insn:\n\n\tif (unlikely(ctxt->emul_flags & X86EMUL_GUEST_MASK) && (ctxt->d & Intercept)) {\n\t\trc = emulator_check_intercept(ctxt, ctxt->intercept,\n\t\t\t\t\t      X86_ICPT_POST_MEMACCESS);\n\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\tgoto done;\n\t}\n\n\tif (ctxt->rep_prefix && (ctxt->d & String))\n\t\tctxt->eflags |= X86_EFLAGS_RF;\n\telse\n\t\tctxt->eflags &= ~X86_EFLAGS_RF;\n\n\tif (ctxt->execute) {\n\t\tif (ctxt->d & Fastop) {\n\t\t\tvoid (*fop)(struct fastop *) = (void *)ctxt->execute;\n\t\t\trc = fastop(ctxt, fop);\n\t\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\t\tgoto done;\n\t\t\tgoto writeback;\n\t\t}\n\t\trc = ctxt->execute(ctxt);\n\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\tgoto done;\n\t\tgoto writeback;\n\t}\n\n\tif (ctxt->opcode_len == 2)\n\t\tgoto twobyte_insn;\n\telse if (ctxt->opcode_len == 3)\n\t\tgoto threebyte_insn;\n\n\tswitch (ctxt->b) {\n\tcase 0x70 ... 0x7f: /* jcc (short) */\n\t\tif (test_cc(ctxt->b, ctxt->eflags))\n\t\t\trc = jmp_rel(ctxt, ctxt->src.val);\n\t\tbreak;\n\tcase 0x8d: /* lea r16/r32, m */\n\t\tctxt->dst.val = ctxt->src.addr.mem.ea;\n\t\tbreak;\n\tcase 0x90 ... 0x97: /* nop / xchg reg, rax */\n\t\tif (ctxt->dst.addr.reg == reg_rmw(ctxt, VCPU_REGS_RAX))\n\t\t\tctxt->dst.type = OP_NONE;\n\t\telse\n\t\t\trc = em_xchg(ctxt);\n\t\tbreak;\n\tcase 0x98: /* cbw/cwde/cdqe */\n\t\tswitch (ctxt->op_bytes) {\n\t\tcase 2: ctxt->dst.val = (s8)ctxt->dst.val; break;\n\t\tcase 4: ctxt->dst.val = (s16)ctxt->dst.val; break;\n\t\tcase 8: ctxt->dst.val = (s32)ctxt->dst.val; break;\n\t\t}\n\t\tbreak;\n\tcase 0xcc:\t\t/* int3 */\n\t\trc = emulate_int(ctxt, 3);\n\t\tbreak;\n\tcase 0xcd:\t\t/* int n */\n\t\trc = emulate_int(ctxt, ctxt->src.val);\n\t\tbreak;\n\tcase 0xce:\t\t/* into */\n\t\tif (ctxt->eflags & X86_EFLAGS_OF)\n\t\t\trc = emulate_int(ctxt, 4);\n\t\tbreak;\n\tcase 0xe9: /* jmp rel */\n\tcase 0xeb: /* jmp rel short */\n\t\trc = jmp_rel(ctxt, ctxt->src.val);\n\t\tctxt->dst.type = OP_NONE; /* Disable writeback. */\n\t\tbreak;\n\tcase 0xf4:              /* hlt */\n\t\tctxt->ops->halt(ctxt);\n\t\tbreak;\n\tcase 0xf5:\t/* cmc */\n\t\t/* complement carry flag from eflags reg */\n\t\tctxt->eflags ^= X86_EFLAGS_CF;\n\t\tbreak;\n\tcase 0xf8: /* clc */\n\t\tctxt->eflags &= ~X86_EFLAGS_CF;\n\t\tbreak;\n\tcase 0xf9: /* stc */\n\t\tctxt->eflags |= X86_EFLAGS_CF;\n\t\tbreak;\n\tcase 0xfc: /* cld */\n\t\tctxt->eflags &= ~X86_EFLAGS_DF;\n\t\tbreak;\n\tcase 0xfd: /* std */\n\t\tctxt->eflags |= X86_EFLAGS_DF;\n\t\tbreak;\n\tdefault:\n\t\tgoto cannot_emulate;\n\t}\n\n\tif (rc != X86EMUL_CONTINUE)\n\t\tgoto done;\n\nwriteback:\n\tif (ctxt->d & SrcWrite) {\n\t\tBUG_ON(ctxt->src.type == OP_MEM || ctxt->src.type == OP_MEM_STR);\n\t\trc = writeback(ctxt, &ctxt->src);\n\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\tgoto done;\n\t}\n\tif (!(ctxt->d & NoWrite)) {\n\t\trc = writeback(ctxt, &ctxt->dst);\n\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\tgoto done;\n\t}\n\n\t/*\n\t * restore dst type in case the decoding will be reused\n\t * (happens for string instruction )\n\t */\n\tctxt->dst.type = saved_dst_type;\n\n\tif ((ctxt->d & SrcMask) == SrcSI)\n\t\tstring_addr_inc(ctxt, VCPU_REGS_RSI, &ctxt->src);\n\n\tif ((ctxt->d & DstMask) == DstDI)\n\t\tstring_addr_inc(ctxt, VCPU_REGS_RDI, &ctxt->dst);\n\n\tif (ctxt->rep_prefix && (ctxt->d & String)) {\n\t\tunsigned int count;\n\t\tstruct read_cache *r = &ctxt->io_read;\n\t\tif ((ctxt->d & SrcMask) == SrcSI)\n\t\t\tcount = ctxt->src.count;\n\t\telse\n\t\t\tcount = ctxt->dst.count;\n\t\tregister_address_increment(ctxt, VCPU_REGS_RCX, -count);\n\n\t\tif (!string_insn_completed(ctxt)) {\n\t\t\t/*\n\t\t\t * Re-enter guest when pio read ahead buffer is empty\n\t\t\t * or, if it is not used, after each 1024 iteration.\n\t\t\t */\n\t\t\tif ((r->end != 0 || reg_read(ctxt, VCPU_REGS_RCX) & 0x3ff) &&\n\t\t\t    (r->end == 0 || r->end != r->pos)) {\n\t\t\t\t/*\n\t\t\t\t * Reset read cache. Usually happens before\n\t\t\t\t * decode, but since instruction is restarted\n\t\t\t\t * we have to do it here.\n\t\t\t\t */\n\t\t\t\tctxt->mem_read.end = 0;\n\t\t\t\twriteback_registers(ctxt);\n\t\t\t\treturn EMULATION_RESTART;\n\t\t\t}\n\t\t\tgoto done; /* skip rip writeback */\n\t\t}\n\t\tctxt->eflags &= ~X86_EFLAGS_RF;\n\t}\n\n\tctxt->eip = ctxt->_eip;\n\ndone:\n\tif (rc == X86EMUL_PROPAGATE_FAULT) {\n\t\tWARN_ON(ctxt->exception.vector > 0x1f);\n\t\tctxt->have_exception = true;\n\t}\n\tif (rc == X86EMUL_INTERCEPTED)\n\t\treturn EMULATION_INTERCEPTED;\n\n\tif (rc == X86EMUL_CONTINUE)\n\t\twriteback_registers(ctxt);\n\n\treturn (rc == X86EMUL_UNHANDLEABLE) ? EMULATION_FAILED : EMULATION_OK;\n\ntwobyte_insn:\n\tswitch (ctxt->b) {\n\tcase 0x09:\t\t/* wbinvd */\n\t\t(ctxt->ops->wbinvd)(ctxt);\n\t\tbreak;\n\tcase 0x08:\t\t/* invd */\n\tcase 0x0d:\t\t/* GrpP (prefetch) */\n\tcase 0x18:\t\t/* Grp16 (prefetch/nop) */\n\tcase 0x1f:\t\t/* nop */\n\t\tbreak;\n\tcase 0x20: /* mov cr, reg */\n\t\tctxt->dst.val = ops->get_cr(ctxt, ctxt->modrm_reg);\n\t\tbreak;\n\tcase 0x21: /* mov from dr to reg */\n\t\tops->get_dr(ctxt, ctxt->modrm_reg, &ctxt->dst.val);\n\t\tbreak;\n\tcase 0x40 ... 0x4f:\t/* cmov */\n\t\tif (test_cc(ctxt->b, ctxt->eflags))\n\t\t\tctxt->dst.val = ctxt->src.val;\n\t\telse if (ctxt->op_bytes != 4)\n\t\t\tctxt->dst.type = OP_NONE; /* no writeback */\n\t\tbreak;\n\tcase 0x80 ... 0x8f: /* jnz rel, etc*/\n\t\tif (test_cc(ctxt->b, ctxt->eflags))\n\t\t\trc = jmp_rel(ctxt, ctxt->src.val);\n\t\tbreak;\n\tcase 0x90 ... 0x9f:     /* setcc r/m8 */\n\t\tctxt->dst.val = test_cc(ctxt->b, ctxt->eflags);\n\t\tbreak;\n\tcase 0xb6 ... 0xb7:\t/* movzx */\n\t\tctxt->dst.bytes = ctxt->op_bytes;\n\t\tctxt->dst.val = (ctxt->src.bytes == 1) ? (u8) ctxt->src.val\n\t\t\t\t\t\t       : (u16) ctxt->src.val;\n\t\tbreak;\n\tcase 0xbe ... 0xbf:\t/* movsx */\n\t\tctxt->dst.bytes = ctxt->op_bytes;\n\t\tctxt->dst.val = (ctxt->src.bytes == 1) ? (s8) ctxt->src.val :\n\t\t\t\t\t\t\t(s16) ctxt->src.val;\n\t\tbreak;\n\tdefault:\n\t\tgoto cannot_emulate;\n\t}\n\nthreebyte_insn:\n\n\tif (rc != X86EMUL_CONTINUE)\n\t\tgoto done;\n\n\tgoto writeback;\n\ncannot_emulate:\n\treturn EMULATION_FAILED;\n}\n\nvoid emulator_invalidate_register_cache(struct x86_emulate_ctxt *ctxt)\n{\n\tinvalidate_registers(ctxt);\n}\n\nvoid emulator_writeback_register_cache(struct x86_emulate_ctxt *ctxt)\n{\n\twriteback_registers(ctxt);\n}\n"], "fixing_code": ["/******************************************************************************\n * emulate.c\n *\n * Generic x86 (32-bit and 64-bit) instruction decoder and emulator.\n *\n * Copyright (c) 2005 Keir Fraser\n *\n * Linux coding style, mod r/m decoder, segment base fixes, real-mode\n * privileged instructions:\n *\n * Copyright (C) 2006 Qumranet\n * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n *\n *   Avi Kivity <avi@qumranet.com>\n *   Yaniv Kamay <yaniv@qumranet.com>\n *\n * This work is licensed under the terms of the GNU GPL, version 2.  See\n * the COPYING file in the top-level directory.\n *\n * From: xen-unstable 10676:af9809f51f81a3c43f276f00c81a52ef558afda4\n */\n\n#include <linux/kvm_host.h>\n#include \"kvm_cache_regs.h\"\n#include <asm/kvm_emulate.h>\n#include <linux/stringify.h>\n#include <asm/debugreg.h>\n\n#include \"x86.h\"\n#include \"tss.h\"\n\n/*\n * Operand types\n */\n#define OpNone             0ull\n#define OpImplicit         1ull  /* No generic decode */\n#define OpReg              2ull  /* Register */\n#define OpMem              3ull  /* Memory */\n#define OpAcc              4ull  /* Accumulator: AL/AX/EAX/RAX */\n#define OpDI               5ull  /* ES:DI/EDI/RDI */\n#define OpMem64            6ull  /* Memory, 64-bit */\n#define OpImmUByte         7ull  /* Zero-extended 8-bit immediate */\n#define OpDX               8ull  /* DX register */\n#define OpCL               9ull  /* CL register (for shifts) */\n#define OpImmByte         10ull  /* 8-bit sign extended immediate */\n#define OpOne             11ull  /* Implied 1 */\n#define OpImm             12ull  /* Sign extended up to 32-bit immediate */\n#define OpMem16           13ull  /* Memory operand (16-bit). */\n#define OpMem32           14ull  /* Memory operand (32-bit). */\n#define OpImmU            15ull  /* Immediate operand, zero extended */\n#define OpSI              16ull  /* SI/ESI/RSI */\n#define OpImmFAddr        17ull  /* Immediate far address */\n#define OpMemFAddr        18ull  /* Far address in memory */\n#define OpImmU16          19ull  /* Immediate operand, 16 bits, zero extended */\n#define OpES              20ull  /* ES */\n#define OpCS              21ull  /* CS */\n#define OpSS              22ull  /* SS */\n#define OpDS              23ull  /* DS */\n#define OpFS              24ull  /* FS */\n#define OpGS              25ull  /* GS */\n#define OpMem8            26ull  /* 8-bit zero extended memory operand */\n#define OpImm64           27ull  /* Sign extended 16/32/64-bit immediate */\n#define OpXLat            28ull  /* memory at BX/EBX/RBX + zero-extended AL */\n#define OpAccLo           29ull  /* Low part of extended acc (AX/AX/EAX/RAX) */\n#define OpAccHi           30ull  /* High part of extended acc (-/DX/EDX/RDX) */\n\n#define OpBits             5  /* Width of operand field */\n#define OpMask             ((1ull << OpBits) - 1)\n\n/*\n * Opcode effective-address decode tables.\n * Note that we only emulate instructions that have at least one memory\n * operand (excluding implicit stack references). We assume that stack\n * references and instruction fetches will never occur in special memory\n * areas that require emulation. So, for example, 'mov <imm>,<reg>' need\n * not be handled.\n */\n\n/* Operand sizes: 8-bit operands or specified/overridden size. */\n#define ByteOp      (1<<0)\t/* 8-bit operands. */\n/* Destination operand type. */\n#define DstShift    1\n#define ImplicitOps (OpImplicit << DstShift)\n#define DstReg      (OpReg << DstShift)\n#define DstMem      (OpMem << DstShift)\n#define DstAcc      (OpAcc << DstShift)\n#define DstDI       (OpDI << DstShift)\n#define DstMem64    (OpMem64 << DstShift)\n#define DstMem16    (OpMem16 << DstShift)\n#define DstImmUByte (OpImmUByte << DstShift)\n#define DstDX       (OpDX << DstShift)\n#define DstAccLo    (OpAccLo << DstShift)\n#define DstMask     (OpMask << DstShift)\n/* Source operand type. */\n#define SrcShift    6\n#define SrcNone     (OpNone << SrcShift)\n#define SrcReg      (OpReg << SrcShift)\n#define SrcMem      (OpMem << SrcShift)\n#define SrcMem16    (OpMem16 << SrcShift)\n#define SrcMem32    (OpMem32 << SrcShift)\n#define SrcImm      (OpImm << SrcShift)\n#define SrcImmByte  (OpImmByte << SrcShift)\n#define SrcOne      (OpOne << SrcShift)\n#define SrcImmUByte (OpImmUByte << SrcShift)\n#define SrcImmU     (OpImmU << SrcShift)\n#define SrcSI       (OpSI << SrcShift)\n#define SrcXLat     (OpXLat << SrcShift)\n#define SrcImmFAddr (OpImmFAddr << SrcShift)\n#define SrcMemFAddr (OpMemFAddr << SrcShift)\n#define SrcAcc      (OpAcc << SrcShift)\n#define SrcImmU16   (OpImmU16 << SrcShift)\n#define SrcImm64    (OpImm64 << SrcShift)\n#define SrcDX       (OpDX << SrcShift)\n#define SrcMem8     (OpMem8 << SrcShift)\n#define SrcAccHi    (OpAccHi << SrcShift)\n#define SrcMask     (OpMask << SrcShift)\n#define BitOp       (1<<11)\n#define MemAbs      (1<<12)      /* Memory operand is absolute displacement */\n#define String      (1<<13)     /* String instruction (rep capable) */\n#define Stack       (1<<14)     /* Stack instruction (push/pop) */\n#define GroupMask   (7<<15)     /* Opcode uses one of the group mechanisms */\n#define Group       (1<<15)     /* Bits 3:5 of modrm byte extend opcode */\n#define GroupDual   (2<<15)     /* Alternate decoding of mod == 3 */\n#define Prefix      (3<<15)     /* Instruction varies with 66/f2/f3 prefix */\n#define RMExt       (4<<15)     /* Opcode extension in ModRM r/m if mod == 3 */\n#define Escape      (5<<15)     /* Escape to coprocessor instruction */\n#define InstrDual   (6<<15)     /* Alternate instruction decoding of mod == 3 */\n#define ModeDual    (7<<15)     /* Different instruction for 32/64 bit */\n#define Sse         (1<<18)     /* SSE Vector instruction */\n/* Generic ModRM decode. */\n#define ModRM       (1<<19)\n/* Destination is only written; never read. */\n#define Mov         (1<<20)\n/* Misc flags */\n#define Prot        (1<<21) /* instruction generates #UD if not in prot-mode */\n#define EmulateOnUD (1<<22) /* Emulate if unsupported by the host */\n#define NoAccess    (1<<23) /* Don't access memory (lea/invlpg/verr etc) */\n#define Op3264      (1<<24) /* Operand is 64b in long mode, 32b otherwise */\n#define Undefined   (1<<25) /* No Such Instruction */\n#define Lock        (1<<26) /* lock prefix is allowed for the instruction */\n#define Priv        (1<<27) /* instruction generates #GP if current CPL != 0 */\n#define No64\t    (1<<28)\n#define PageTable   (1 << 29)   /* instruction used to write page table */\n#define NotImpl     (1 << 30)   /* instruction is not implemented */\n/* Source 2 operand type */\n#define Src2Shift   (31)\n#define Src2None    (OpNone << Src2Shift)\n#define Src2Mem     (OpMem << Src2Shift)\n#define Src2CL      (OpCL << Src2Shift)\n#define Src2ImmByte (OpImmByte << Src2Shift)\n#define Src2One     (OpOne << Src2Shift)\n#define Src2Imm     (OpImm << Src2Shift)\n#define Src2ES      (OpES << Src2Shift)\n#define Src2CS      (OpCS << Src2Shift)\n#define Src2SS      (OpSS << Src2Shift)\n#define Src2DS      (OpDS << Src2Shift)\n#define Src2FS      (OpFS << Src2Shift)\n#define Src2GS      (OpGS << Src2Shift)\n#define Src2Mask    (OpMask << Src2Shift)\n#define Mmx         ((u64)1 << 40)  /* MMX Vector instruction */\n#define AlignMask   ((u64)7 << 41)\n#define Aligned     ((u64)1 << 41)  /* Explicitly aligned (e.g. MOVDQA) */\n#define Unaligned   ((u64)2 << 41)  /* Explicitly unaligned (e.g. MOVDQU) */\n#define Avx         ((u64)3 << 41)  /* Advanced Vector Extensions */\n#define Aligned16   ((u64)4 << 41)  /* Aligned to 16 byte boundary (e.g. FXSAVE) */\n#define Fastop      ((u64)1 << 44)  /* Use opcode::u.fastop */\n#define NoWrite     ((u64)1 << 45)  /* No writeback */\n#define SrcWrite    ((u64)1 << 46)  /* Write back src operand */\n#define NoMod\t    ((u64)1 << 47)  /* Mod field is ignored */\n#define Intercept   ((u64)1 << 48)  /* Has valid intercept field */\n#define CheckPerm   ((u64)1 << 49)  /* Has valid check_perm field */\n#define PrivUD      ((u64)1 << 51)  /* #UD instead of #GP on CPL > 0 */\n#define NearBranch  ((u64)1 << 52)  /* Near branches */\n#define No16\t    ((u64)1 << 53)  /* No 16 bit operand */\n#define IncSP       ((u64)1 << 54)  /* SP is incremented before ModRM calc */\n\n#define DstXacc     (DstAccLo | SrcAccHi | SrcWrite)\n\n#define X2(x...) x, x\n#define X3(x...) X2(x), x\n#define X4(x...) X2(x), X2(x)\n#define X5(x...) X4(x), x\n#define X6(x...) X4(x), X2(x)\n#define X7(x...) X4(x), X3(x)\n#define X8(x...) X4(x), X4(x)\n#define X16(x...) X8(x), X8(x)\n\n#define NR_FASTOP (ilog2(sizeof(ulong)) + 1)\n#define FASTOP_SIZE 8\n\n/*\n * fastop functions have a special calling convention:\n *\n * dst:    rax        (in/out)\n * src:    rdx        (in/out)\n * src2:   rcx        (in)\n * flags:  rflags     (in/out)\n * ex:     rsi        (in:fastop pointer, out:zero if exception)\n *\n * Moreover, they are all exactly FASTOP_SIZE bytes long, so functions for\n * different operand sizes can be reached by calculation, rather than a jump\n * table (which would be bigger than the code).\n *\n * fastop functions are declared as taking a never-defined fastop parameter,\n * so they can't be called from C directly.\n */\n\nstruct fastop;\n\nstruct opcode {\n\tu64 flags : 56;\n\tu64 intercept : 8;\n\tunion {\n\t\tint (*execute)(struct x86_emulate_ctxt *ctxt);\n\t\tconst struct opcode *group;\n\t\tconst struct group_dual *gdual;\n\t\tconst struct gprefix *gprefix;\n\t\tconst struct escape *esc;\n\t\tconst struct instr_dual *idual;\n\t\tconst struct mode_dual *mdual;\n\t\tvoid (*fastop)(struct fastop *fake);\n\t} u;\n\tint (*check_perm)(struct x86_emulate_ctxt *ctxt);\n};\n\nstruct group_dual {\n\tstruct opcode mod012[8];\n\tstruct opcode mod3[8];\n};\n\nstruct gprefix {\n\tstruct opcode pfx_no;\n\tstruct opcode pfx_66;\n\tstruct opcode pfx_f2;\n\tstruct opcode pfx_f3;\n};\n\nstruct escape {\n\tstruct opcode op[8];\n\tstruct opcode high[64];\n};\n\nstruct instr_dual {\n\tstruct opcode mod012;\n\tstruct opcode mod3;\n};\n\nstruct mode_dual {\n\tstruct opcode mode32;\n\tstruct opcode mode64;\n};\n\n#define EFLG_RESERVED_ZEROS_MASK 0xffc0802a\n\nenum x86_transfer_type {\n\tX86_TRANSFER_NONE,\n\tX86_TRANSFER_CALL_JMP,\n\tX86_TRANSFER_RET,\n\tX86_TRANSFER_TASK_SWITCH,\n};\n\nstatic ulong reg_read(struct x86_emulate_ctxt *ctxt, unsigned nr)\n{\n\tif (!(ctxt->regs_valid & (1 << nr))) {\n\t\tctxt->regs_valid |= 1 << nr;\n\t\tctxt->_regs[nr] = ctxt->ops->read_gpr(ctxt, nr);\n\t}\n\treturn ctxt->_regs[nr];\n}\n\nstatic ulong *reg_write(struct x86_emulate_ctxt *ctxt, unsigned nr)\n{\n\tctxt->regs_valid |= 1 << nr;\n\tctxt->regs_dirty |= 1 << nr;\n\treturn &ctxt->_regs[nr];\n}\n\nstatic ulong *reg_rmw(struct x86_emulate_ctxt *ctxt, unsigned nr)\n{\n\treg_read(ctxt, nr);\n\treturn reg_write(ctxt, nr);\n}\n\nstatic void writeback_registers(struct x86_emulate_ctxt *ctxt)\n{\n\tunsigned reg;\n\n\tfor_each_set_bit(reg, (ulong *)&ctxt->regs_dirty, 16)\n\t\tctxt->ops->write_gpr(ctxt, reg, ctxt->_regs[reg]);\n}\n\nstatic void invalidate_registers(struct x86_emulate_ctxt *ctxt)\n{\n\tctxt->regs_dirty = 0;\n\tctxt->regs_valid = 0;\n}\n\n/*\n * These EFLAGS bits are restored from saved value during emulation, and\n * any changes are written back to the saved value after emulation.\n */\n#define EFLAGS_MASK (X86_EFLAGS_OF|X86_EFLAGS_SF|X86_EFLAGS_ZF|X86_EFLAGS_AF|\\\n\t\t     X86_EFLAGS_PF|X86_EFLAGS_CF)\n\n#ifdef CONFIG_X86_64\n#define ON64(x) x\n#else\n#define ON64(x)\n#endif\n\nstatic int fastop(struct x86_emulate_ctxt *ctxt, void (*fop)(struct fastop *));\n\n#define FOP_FUNC(name) \\\n\t\".align \" __stringify(FASTOP_SIZE) \" \\n\\t\" \\\n\t\".type \" name \", @function \\n\\t\" \\\n\tname \":\\n\\t\"\n\n#define FOP_RET   \"ret \\n\\t\"\n\n#define FOP_START(op) \\\n\textern void em_##op(struct fastop *fake); \\\n\tasm(\".pushsection .text, \\\"ax\\\" \\n\\t\" \\\n\t    \".global em_\" #op \" \\n\\t\" \\\n\t    FOP_FUNC(\"em_\" #op)\n\n#define FOP_END \\\n\t    \".popsection\")\n\n#define FOPNOP() \\\n\tFOP_FUNC(__stringify(__UNIQUE_ID(nop))) \\\n\tFOP_RET\n\n#define FOP1E(op,  dst) \\\n\tFOP_FUNC(#op \"_\" #dst) \\\n\t\"10: \" #op \" %\" #dst \" \\n\\t\" FOP_RET\n\n#define FOP1EEX(op,  dst) \\\n\tFOP1E(op, dst) _ASM_EXTABLE(10b, kvm_fastop_exception)\n\n#define FASTOP1(op) \\\n\tFOP_START(op) \\\n\tFOP1E(op##b, al) \\\n\tFOP1E(op##w, ax) \\\n\tFOP1E(op##l, eax) \\\n\tON64(FOP1E(op##q, rax))\t\\\n\tFOP_END\n\n/* 1-operand, using src2 (for MUL/DIV r/m) */\n#define FASTOP1SRC2(op, name) \\\n\tFOP_START(name) \\\n\tFOP1E(op, cl) \\\n\tFOP1E(op, cx) \\\n\tFOP1E(op, ecx) \\\n\tON64(FOP1E(op, rcx)) \\\n\tFOP_END\n\n/* 1-operand, using src2 (for MUL/DIV r/m), with exceptions */\n#define FASTOP1SRC2EX(op, name) \\\n\tFOP_START(name) \\\n\tFOP1EEX(op, cl) \\\n\tFOP1EEX(op, cx) \\\n\tFOP1EEX(op, ecx) \\\n\tON64(FOP1EEX(op, rcx)) \\\n\tFOP_END\n\n#define FOP2E(op,  dst, src)\t   \\\n\tFOP_FUNC(#op \"_\" #dst \"_\" #src) \\\n\t#op \" %\" #src \", %\" #dst \" \\n\\t\" FOP_RET\n\n#define FASTOP2(op) \\\n\tFOP_START(op) \\\n\tFOP2E(op##b, al, dl) \\\n\tFOP2E(op##w, ax, dx) \\\n\tFOP2E(op##l, eax, edx) \\\n\tON64(FOP2E(op##q, rax, rdx)) \\\n\tFOP_END\n\n/* 2 operand, word only */\n#define FASTOP2W(op) \\\n\tFOP_START(op) \\\n\tFOPNOP() \\\n\tFOP2E(op##w, ax, dx) \\\n\tFOP2E(op##l, eax, edx) \\\n\tON64(FOP2E(op##q, rax, rdx)) \\\n\tFOP_END\n\n/* 2 operand, src is CL */\n#define FASTOP2CL(op) \\\n\tFOP_START(op) \\\n\tFOP2E(op##b, al, cl) \\\n\tFOP2E(op##w, ax, cl) \\\n\tFOP2E(op##l, eax, cl) \\\n\tON64(FOP2E(op##q, rax, cl)) \\\n\tFOP_END\n\n/* 2 operand, src and dest are reversed */\n#define FASTOP2R(op, name) \\\n\tFOP_START(name) \\\n\tFOP2E(op##b, dl, al) \\\n\tFOP2E(op##w, dx, ax) \\\n\tFOP2E(op##l, edx, eax) \\\n\tON64(FOP2E(op##q, rdx, rax)) \\\n\tFOP_END\n\n#define FOP3E(op,  dst, src, src2) \\\n\tFOP_FUNC(#op \"_\" #dst \"_\" #src \"_\" #src2) \\\n\t#op \" %\" #src2 \", %\" #src \", %\" #dst \" \\n\\t\" FOP_RET\n\n/* 3-operand, word-only, src2=cl */\n#define FASTOP3WCL(op) \\\n\tFOP_START(op) \\\n\tFOPNOP() \\\n\tFOP3E(op##w, ax, dx, cl) \\\n\tFOP3E(op##l, eax, edx, cl) \\\n\tON64(FOP3E(op##q, rax, rdx, cl)) \\\n\tFOP_END\n\n/* Special case for SETcc - 1 instruction per cc */\n#define FOP_SETCC(op) \\\n\t\".align 4 \\n\\t\" \\\n\t\".type \" #op \", @function \\n\\t\" \\\n\t#op \": \\n\\t\" \\\n\t#op \" %al \\n\\t\" \\\n\tFOP_RET\n\nasm(\".global kvm_fastop_exception \\n\"\n    \"kvm_fastop_exception: xor %esi, %esi; ret\");\n\nFOP_START(setcc)\nFOP_SETCC(seto)\nFOP_SETCC(setno)\nFOP_SETCC(setc)\nFOP_SETCC(setnc)\nFOP_SETCC(setz)\nFOP_SETCC(setnz)\nFOP_SETCC(setbe)\nFOP_SETCC(setnbe)\nFOP_SETCC(sets)\nFOP_SETCC(setns)\nFOP_SETCC(setp)\nFOP_SETCC(setnp)\nFOP_SETCC(setl)\nFOP_SETCC(setnl)\nFOP_SETCC(setle)\nFOP_SETCC(setnle)\nFOP_END;\n\nFOP_START(salc) \"pushf; sbb %al, %al; popf \\n\\t\" FOP_RET\nFOP_END;\n\n/*\n * XXX: inoutclob user must know where the argument is being expanded.\n *      Relying on CC_HAVE_ASM_GOTO would allow us to remove _fault.\n */\n#define asm_safe(insn, inoutclob...) \\\n({ \\\n\tint _fault = 0; \\\n \\\n\tasm volatile(\"1:\" insn \"\\n\" \\\n\t             \"2:\\n\" \\\n\t             \".pushsection .fixup, \\\"ax\\\"\\n\" \\\n\t             \"3: movl $1, %[_fault]\\n\" \\\n\t             \"   jmp  2b\\n\" \\\n\t             \".popsection\\n\" \\\n\t             _ASM_EXTABLE(1b, 3b) \\\n\t             : [_fault] \"+qm\"(_fault) inoutclob ); \\\n \\\n\t_fault ? X86EMUL_UNHANDLEABLE : X86EMUL_CONTINUE; \\\n})\n\nstatic int emulator_check_intercept(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t    enum x86_intercept intercept,\n\t\t\t\t    enum x86_intercept_stage stage)\n{\n\tstruct x86_instruction_info info = {\n\t\t.intercept  = intercept,\n\t\t.rep_prefix = ctxt->rep_prefix,\n\t\t.modrm_mod  = ctxt->modrm_mod,\n\t\t.modrm_reg  = ctxt->modrm_reg,\n\t\t.modrm_rm   = ctxt->modrm_rm,\n\t\t.src_val    = ctxt->src.val64,\n\t\t.dst_val    = ctxt->dst.val64,\n\t\t.src_bytes  = ctxt->src.bytes,\n\t\t.dst_bytes  = ctxt->dst.bytes,\n\t\t.ad_bytes   = ctxt->ad_bytes,\n\t\t.next_rip   = ctxt->eip,\n\t};\n\n\treturn ctxt->ops->intercept(ctxt, &info, stage);\n}\n\nstatic void assign_masked(ulong *dest, ulong src, ulong mask)\n{\n\t*dest = (*dest & ~mask) | (src & mask);\n}\n\nstatic void assign_register(unsigned long *reg, u64 val, int bytes)\n{\n\t/* The 4-byte case *is* correct: in 64-bit mode we zero-extend. */\n\tswitch (bytes) {\n\tcase 1:\n\t\t*(u8 *)reg = (u8)val;\n\t\tbreak;\n\tcase 2:\n\t\t*(u16 *)reg = (u16)val;\n\t\tbreak;\n\tcase 4:\n\t\t*reg = (u32)val;\n\t\tbreak;\t/* 64b: zero-extend */\n\tcase 8:\n\t\t*reg = val;\n\t\tbreak;\n\t}\n}\n\nstatic inline unsigned long ad_mask(struct x86_emulate_ctxt *ctxt)\n{\n\treturn (1UL << (ctxt->ad_bytes << 3)) - 1;\n}\n\nstatic ulong stack_mask(struct x86_emulate_ctxt *ctxt)\n{\n\tu16 sel;\n\tstruct desc_struct ss;\n\n\tif (ctxt->mode == X86EMUL_MODE_PROT64)\n\t\treturn ~0UL;\n\tctxt->ops->get_segment(ctxt, &sel, &ss, NULL, VCPU_SREG_SS);\n\treturn ~0U >> ((ss.d ^ 1) * 16);  /* d=0: 0xffff; d=1: 0xffffffff */\n}\n\nstatic int stack_size(struct x86_emulate_ctxt *ctxt)\n{\n\treturn (__fls(stack_mask(ctxt)) + 1) >> 3;\n}\n\n/* Access/update address held in a register, based on addressing mode. */\nstatic inline unsigned long\naddress_mask(struct x86_emulate_ctxt *ctxt, unsigned long reg)\n{\n\tif (ctxt->ad_bytes == sizeof(unsigned long))\n\t\treturn reg;\n\telse\n\t\treturn reg & ad_mask(ctxt);\n}\n\nstatic inline unsigned long\nregister_address(struct x86_emulate_ctxt *ctxt, int reg)\n{\n\treturn address_mask(ctxt, reg_read(ctxt, reg));\n}\n\nstatic void masked_increment(ulong *reg, ulong mask, int inc)\n{\n\tassign_masked(reg, *reg + inc, mask);\n}\n\nstatic inline void\nregister_address_increment(struct x86_emulate_ctxt *ctxt, int reg, int inc)\n{\n\tulong *preg = reg_rmw(ctxt, reg);\n\n\tassign_register(preg, *preg + inc, ctxt->ad_bytes);\n}\n\nstatic void rsp_increment(struct x86_emulate_ctxt *ctxt, int inc)\n{\n\tmasked_increment(reg_rmw(ctxt, VCPU_REGS_RSP), stack_mask(ctxt), inc);\n}\n\nstatic u32 desc_limit_scaled(struct desc_struct *desc)\n{\n\tu32 limit = get_desc_limit(desc);\n\n\treturn desc->g ? (limit << 12) | 0xfff : limit;\n}\n\nstatic unsigned long seg_base(struct x86_emulate_ctxt *ctxt, int seg)\n{\n\tif (ctxt->mode == X86EMUL_MODE_PROT64 && seg < VCPU_SREG_FS)\n\t\treturn 0;\n\n\treturn ctxt->ops->get_cached_segment_base(ctxt, seg);\n}\n\nstatic int emulate_exception(struct x86_emulate_ctxt *ctxt, int vec,\n\t\t\t     u32 error, bool valid)\n{\n\tWARN_ON(vec > 0x1f);\n\tctxt->exception.vector = vec;\n\tctxt->exception.error_code = error;\n\tctxt->exception.error_code_valid = valid;\n\treturn X86EMUL_PROPAGATE_FAULT;\n}\n\nstatic int emulate_db(struct x86_emulate_ctxt *ctxt)\n{\n\treturn emulate_exception(ctxt, DB_VECTOR, 0, false);\n}\n\nstatic int emulate_gp(struct x86_emulate_ctxt *ctxt, int err)\n{\n\treturn emulate_exception(ctxt, GP_VECTOR, err, true);\n}\n\nstatic int emulate_ss(struct x86_emulate_ctxt *ctxt, int err)\n{\n\treturn emulate_exception(ctxt, SS_VECTOR, err, true);\n}\n\nstatic int emulate_ud(struct x86_emulate_ctxt *ctxt)\n{\n\treturn emulate_exception(ctxt, UD_VECTOR, 0, false);\n}\n\nstatic int emulate_ts(struct x86_emulate_ctxt *ctxt, int err)\n{\n\treturn emulate_exception(ctxt, TS_VECTOR, err, true);\n}\n\nstatic int emulate_de(struct x86_emulate_ctxt *ctxt)\n{\n\treturn emulate_exception(ctxt, DE_VECTOR, 0, false);\n}\n\nstatic int emulate_nm(struct x86_emulate_ctxt *ctxt)\n{\n\treturn emulate_exception(ctxt, NM_VECTOR, 0, false);\n}\n\nstatic u16 get_segment_selector(struct x86_emulate_ctxt *ctxt, unsigned seg)\n{\n\tu16 selector;\n\tstruct desc_struct desc;\n\n\tctxt->ops->get_segment(ctxt, &selector, &desc, NULL, seg);\n\treturn selector;\n}\n\nstatic void set_segment_selector(struct x86_emulate_ctxt *ctxt, u16 selector,\n\t\t\t\t unsigned seg)\n{\n\tu16 dummy;\n\tu32 base3;\n\tstruct desc_struct desc;\n\n\tctxt->ops->get_segment(ctxt, &dummy, &desc, &base3, seg);\n\tctxt->ops->set_segment(ctxt, selector, &desc, base3, seg);\n}\n\n/*\n * x86 defines three classes of vector instructions: explicitly\n * aligned, explicitly unaligned, and the rest, which change behaviour\n * depending on whether they're AVX encoded or not.\n *\n * Also included is CMPXCHG16B which is not a vector instruction, yet it is\n * subject to the same check.  FXSAVE and FXRSTOR are checked here too as their\n * 512 bytes of data must be aligned to a 16 byte boundary.\n */\nstatic unsigned insn_alignment(struct x86_emulate_ctxt *ctxt, unsigned size)\n{\n\tu64 alignment = ctxt->d & AlignMask;\n\n\tif (likely(size < 16))\n\t\treturn 1;\n\n\tswitch (alignment) {\n\tcase Unaligned:\n\tcase Avx:\n\t\treturn 1;\n\tcase Aligned16:\n\t\treturn 16;\n\tcase Aligned:\n\tdefault:\n\t\treturn size;\n\t}\n}\n\nstatic __always_inline int __linearize(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t       struct segmented_address addr,\n\t\t\t\t       unsigned *max_size, unsigned size,\n\t\t\t\t       bool write, bool fetch,\n\t\t\t\t       enum x86emul_mode mode, ulong *linear)\n{\n\tstruct desc_struct desc;\n\tbool usable;\n\tulong la;\n\tu32 lim;\n\tu16 sel;\n\n\tla = seg_base(ctxt, addr.seg) + addr.ea;\n\t*max_size = 0;\n\tswitch (mode) {\n\tcase X86EMUL_MODE_PROT64:\n\t\t*linear = la;\n\t\tif (is_noncanonical_address(la))\n\t\t\tgoto bad;\n\n\t\t*max_size = min_t(u64, ~0u, (1ull << 48) - la);\n\t\tif (size > *max_size)\n\t\t\tgoto bad;\n\t\tbreak;\n\tdefault:\n\t\t*linear = la = (u32)la;\n\t\tusable = ctxt->ops->get_segment(ctxt, &sel, &desc, NULL,\n\t\t\t\t\t\taddr.seg);\n\t\tif (!usable)\n\t\t\tgoto bad;\n\t\t/* code segment in protected mode or read-only data segment */\n\t\tif ((((ctxt->mode != X86EMUL_MODE_REAL) && (desc.type & 8))\n\t\t\t\t\t|| !(desc.type & 2)) && write)\n\t\t\tgoto bad;\n\t\t/* unreadable code segment */\n\t\tif (!fetch && (desc.type & 8) && !(desc.type & 2))\n\t\t\tgoto bad;\n\t\tlim = desc_limit_scaled(&desc);\n\t\tif (!(desc.type & 8) && (desc.type & 4)) {\n\t\t\t/* expand-down segment */\n\t\t\tif (addr.ea <= lim)\n\t\t\t\tgoto bad;\n\t\t\tlim = desc.d ? 0xffffffff : 0xffff;\n\t\t}\n\t\tif (addr.ea > lim)\n\t\t\tgoto bad;\n\t\tif (lim == 0xffffffff)\n\t\t\t*max_size = ~0u;\n\t\telse {\n\t\t\t*max_size = (u64)lim + 1 - addr.ea;\n\t\t\tif (size > *max_size)\n\t\t\t\tgoto bad;\n\t\t}\n\t\tbreak;\n\t}\n\tif (la & (insn_alignment(ctxt, size) - 1))\n\t\treturn emulate_gp(ctxt, 0);\n\treturn X86EMUL_CONTINUE;\nbad:\n\tif (addr.seg == VCPU_SREG_SS)\n\t\treturn emulate_ss(ctxt, 0);\n\telse\n\t\treturn emulate_gp(ctxt, 0);\n}\n\nstatic int linearize(struct x86_emulate_ctxt *ctxt,\n\t\t     struct segmented_address addr,\n\t\t     unsigned size, bool write,\n\t\t     ulong *linear)\n{\n\tunsigned max_size;\n\treturn __linearize(ctxt, addr, &max_size, size, write, false,\n\t\t\t   ctxt->mode, linear);\n}\n\nstatic inline int assign_eip(struct x86_emulate_ctxt *ctxt, ulong dst,\n\t\t\t     enum x86emul_mode mode)\n{\n\tulong linear;\n\tint rc;\n\tunsigned max_size;\n\tstruct segmented_address addr = { .seg = VCPU_SREG_CS,\n\t\t\t\t\t   .ea = dst };\n\n\tif (ctxt->op_bytes != sizeof(unsigned long))\n\t\taddr.ea = dst & ((1UL << (ctxt->op_bytes << 3)) - 1);\n\trc = __linearize(ctxt, addr, &max_size, 1, false, true, mode, &linear);\n\tif (rc == X86EMUL_CONTINUE)\n\t\tctxt->_eip = addr.ea;\n\treturn rc;\n}\n\nstatic inline int assign_eip_near(struct x86_emulate_ctxt *ctxt, ulong dst)\n{\n\treturn assign_eip(ctxt, dst, ctxt->mode);\n}\n\nstatic int assign_eip_far(struct x86_emulate_ctxt *ctxt, ulong dst,\n\t\t\t  const struct desc_struct *cs_desc)\n{\n\tenum x86emul_mode mode = ctxt->mode;\n\tint rc;\n\n#ifdef CONFIG_X86_64\n\tif (ctxt->mode >= X86EMUL_MODE_PROT16) {\n\t\tif (cs_desc->l) {\n\t\t\tu64 efer = 0;\n\n\t\t\tctxt->ops->get_msr(ctxt, MSR_EFER, &efer);\n\t\t\tif (efer & EFER_LMA)\n\t\t\t\tmode = X86EMUL_MODE_PROT64;\n\t\t} else\n\t\t\tmode = X86EMUL_MODE_PROT32; /* temporary value */\n\t}\n#endif\n\tif (mode == X86EMUL_MODE_PROT16 || mode == X86EMUL_MODE_PROT32)\n\t\tmode = cs_desc->d ? X86EMUL_MODE_PROT32 : X86EMUL_MODE_PROT16;\n\trc = assign_eip(ctxt, dst, mode);\n\tif (rc == X86EMUL_CONTINUE)\n\t\tctxt->mode = mode;\n\treturn rc;\n}\n\nstatic inline int jmp_rel(struct x86_emulate_ctxt *ctxt, int rel)\n{\n\treturn assign_eip_near(ctxt, ctxt->_eip + rel);\n}\n\nstatic int segmented_read_std(struct x86_emulate_ctxt *ctxt,\n\t\t\t      struct segmented_address addr,\n\t\t\t      void *data,\n\t\t\t      unsigned size)\n{\n\tint rc;\n\tulong linear;\n\n\trc = linearize(ctxt, addr, size, false, &linear);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\treturn ctxt->ops->read_std(ctxt, linear, data, size, &ctxt->exception);\n}\n\nstatic int segmented_write_std(struct x86_emulate_ctxt *ctxt,\n\t\t\t       struct segmented_address addr,\n\t\t\t       void *data,\n\t\t\t       unsigned int size)\n{\n\tint rc;\n\tulong linear;\n\n\trc = linearize(ctxt, addr, size, true, &linear);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\treturn ctxt->ops->write_std(ctxt, linear, data, size, &ctxt->exception);\n}\n\n/*\n * Prefetch the remaining bytes of the instruction without crossing page\n * boundary if they are not in fetch_cache yet.\n */\nstatic int __do_insn_fetch_bytes(struct x86_emulate_ctxt *ctxt, int op_size)\n{\n\tint rc;\n\tunsigned size, max_size;\n\tunsigned long linear;\n\tint cur_size = ctxt->fetch.end - ctxt->fetch.data;\n\tstruct segmented_address addr = { .seg = VCPU_SREG_CS,\n\t\t\t\t\t   .ea = ctxt->eip + cur_size };\n\n\t/*\n\t * We do not know exactly how many bytes will be needed, and\n\t * __linearize is expensive, so fetch as much as possible.  We\n\t * just have to avoid going beyond the 15 byte limit, the end\n\t * of the segment, or the end of the page.\n\t *\n\t * __linearize is called with size 0 so that it does not do any\n\t * boundary check itself.  Instead, we use max_size to check\n\t * against op_size.\n\t */\n\trc = __linearize(ctxt, addr, &max_size, 0, false, true, ctxt->mode,\n\t\t\t &linear);\n\tif (unlikely(rc != X86EMUL_CONTINUE))\n\t\treturn rc;\n\n\tsize = min_t(unsigned, 15UL ^ cur_size, max_size);\n\tsize = min_t(unsigned, size, PAGE_SIZE - offset_in_page(linear));\n\n\t/*\n\t * One instruction can only straddle two pages,\n\t * and one has been loaded at the beginning of\n\t * x86_decode_insn.  So, if not enough bytes\n\t * still, we must have hit the 15-byte boundary.\n\t */\n\tif (unlikely(size < op_size))\n\t\treturn emulate_gp(ctxt, 0);\n\n\trc = ctxt->ops->fetch(ctxt, linear, ctxt->fetch.end,\n\t\t\t      size, &ctxt->exception);\n\tif (unlikely(rc != X86EMUL_CONTINUE))\n\t\treturn rc;\n\tctxt->fetch.end += size;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic __always_inline int do_insn_fetch_bytes(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t\t       unsigned size)\n{\n\tunsigned done_size = ctxt->fetch.end - ctxt->fetch.ptr;\n\n\tif (unlikely(done_size < size))\n\t\treturn __do_insn_fetch_bytes(ctxt, size - done_size);\n\telse\n\t\treturn X86EMUL_CONTINUE;\n}\n\n/* Fetch next part of the instruction being emulated. */\n#define insn_fetch(_type, _ctxt)\t\t\t\t\t\\\n({\t_type _x;\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n\trc = do_insn_fetch_bytes(_ctxt, sizeof(_type));\t\t\t\\\n\tif (rc != X86EMUL_CONTINUE)\t\t\t\t\t\\\n\t\tgoto done;\t\t\t\t\t\t\\\n\tctxt->_eip += sizeof(_type);\t\t\t\t\t\\\n\t_x = *(_type __aligned(1) *) ctxt->fetch.ptr;\t\t\t\\\n\tctxt->fetch.ptr += sizeof(_type);\t\t\t\t\\\n\t_x;\t\t\t\t\t\t\t\t\\\n})\n\n#define insn_fetch_arr(_arr, _size, _ctxt)\t\t\t\t\\\n({\t\t\t\t\t\t\t\t\t\\\n\trc = do_insn_fetch_bytes(_ctxt, _size);\t\t\t\t\\\n\tif (rc != X86EMUL_CONTINUE)\t\t\t\t\t\\\n\t\tgoto done;\t\t\t\t\t\t\\\n\tctxt->_eip += (_size);\t\t\t\t\t\t\\\n\tmemcpy(_arr, ctxt->fetch.ptr, _size);\t\t\t\t\\\n\tctxt->fetch.ptr += (_size);\t\t\t\t\t\\\n})\n\n/*\n * Given the 'reg' portion of a ModRM byte, and a register block, return a\n * pointer into the block that addresses the relevant register.\n * @highbyte_regs specifies whether to decode AH,CH,DH,BH.\n */\nstatic void *decode_register(struct x86_emulate_ctxt *ctxt, u8 modrm_reg,\n\t\t\t     int byteop)\n{\n\tvoid *p;\n\tint highbyte_regs = (ctxt->rex_prefix == 0) && byteop;\n\n\tif (highbyte_regs && modrm_reg >= 4 && modrm_reg < 8)\n\t\tp = (unsigned char *)reg_rmw(ctxt, modrm_reg & 3) + 1;\n\telse\n\t\tp = reg_rmw(ctxt, modrm_reg);\n\treturn p;\n}\n\nstatic int read_descriptor(struct x86_emulate_ctxt *ctxt,\n\t\t\t   struct segmented_address addr,\n\t\t\t   u16 *size, unsigned long *address, int op_bytes)\n{\n\tint rc;\n\n\tif (op_bytes == 2)\n\t\top_bytes = 3;\n\t*address = 0;\n\trc = segmented_read_std(ctxt, addr, size, 2);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\taddr.ea += 2;\n\trc = segmented_read_std(ctxt, addr, address, op_bytes);\n\treturn rc;\n}\n\nFASTOP2(add);\nFASTOP2(or);\nFASTOP2(adc);\nFASTOP2(sbb);\nFASTOP2(and);\nFASTOP2(sub);\nFASTOP2(xor);\nFASTOP2(cmp);\nFASTOP2(test);\n\nFASTOP1SRC2(mul, mul_ex);\nFASTOP1SRC2(imul, imul_ex);\nFASTOP1SRC2EX(div, div_ex);\nFASTOP1SRC2EX(idiv, idiv_ex);\n\nFASTOP3WCL(shld);\nFASTOP3WCL(shrd);\n\nFASTOP2W(imul);\n\nFASTOP1(not);\nFASTOP1(neg);\nFASTOP1(inc);\nFASTOP1(dec);\n\nFASTOP2CL(rol);\nFASTOP2CL(ror);\nFASTOP2CL(rcl);\nFASTOP2CL(rcr);\nFASTOP2CL(shl);\nFASTOP2CL(shr);\nFASTOP2CL(sar);\n\nFASTOP2W(bsf);\nFASTOP2W(bsr);\nFASTOP2W(bt);\nFASTOP2W(bts);\nFASTOP2W(btr);\nFASTOP2W(btc);\n\nFASTOP2(xadd);\n\nFASTOP2R(cmp, cmp_r);\n\nstatic int em_bsf_c(struct x86_emulate_ctxt *ctxt)\n{\n\t/* If src is zero, do not writeback, but update flags */\n\tif (ctxt->src.val == 0)\n\t\tctxt->dst.type = OP_NONE;\n\treturn fastop(ctxt, em_bsf);\n}\n\nstatic int em_bsr_c(struct x86_emulate_ctxt *ctxt)\n{\n\t/* If src is zero, do not writeback, but update flags */\n\tif (ctxt->src.val == 0)\n\t\tctxt->dst.type = OP_NONE;\n\treturn fastop(ctxt, em_bsr);\n}\n\nstatic __always_inline u8 test_cc(unsigned int condition, unsigned long flags)\n{\n\tu8 rc;\n\tvoid (*fop)(void) = (void *)em_setcc + 4 * (condition & 0xf);\n\n\tflags = (flags & EFLAGS_MASK) | X86_EFLAGS_IF;\n\tasm(\"push %[flags]; popf; call *%[fastop]\"\n\t    : \"=a\"(rc) : [fastop]\"r\"(fop), [flags]\"r\"(flags));\n\treturn rc;\n}\n\nstatic void fetch_register_operand(struct operand *op)\n{\n\tswitch (op->bytes) {\n\tcase 1:\n\t\top->val = *(u8 *)op->addr.reg;\n\t\tbreak;\n\tcase 2:\n\t\top->val = *(u16 *)op->addr.reg;\n\t\tbreak;\n\tcase 4:\n\t\top->val = *(u32 *)op->addr.reg;\n\t\tbreak;\n\tcase 8:\n\t\top->val = *(u64 *)op->addr.reg;\n\t\tbreak;\n\t}\n}\n\nstatic void read_sse_reg(struct x86_emulate_ctxt *ctxt, sse128_t *data, int reg)\n{\n\tctxt->ops->get_fpu(ctxt);\n\tswitch (reg) {\n\tcase 0: asm(\"movdqa %%xmm0, %0\" : \"=m\"(*data)); break;\n\tcase 1: asm(\"movdqa %%xmm1, %0\" : \"=m\"(*data)); break;\n\tcase 2: asm(\"movdqa %%xmm2, %0\" : \"=m\"(*data)); break;\n\tcase 3: asm(\"movdqa %%xmm3, %0\" : \"=m\"(*data)); break;\n\tcase 4: asm(\"movdqa %%xmm4, %0\" : \"=m\"(*data)); break;\n\tcase 5: asm(\"movdqa %%xmm5, %0\" : \"=m\"(*data)); break;\n\tcase 6: asm(\"movdqa %%xmm6, %0\" : \"=m\"(*data)); break;\n\tcase 7: asm(\"movdqa %%xmm7, %0\" : \"=m\"(*data)); break;\n#ifdef CONFIG_X86_64\n\tcase 8: asm(\"movdqa %%xmm8, %0\" : \"=m\"(*data)); break;\n\tcase 9: asm(\"movdqa %%xmm9, %0\" : \"=m\"(*data)); break;\n\tcase 10: asm(\"movdqa %%xmm10, %0\" : \"=m\"(*data)); break;\n\tcase 11: asm(\"movdqa %%xmm11, %0\" : \"=m\"(*data)); break;\n\tcase 12: asm(\"movdqa %%xmm12, %0\" : \"=m\"(*data)); break;\n\tcase 13: asm(\"movdqa %%xmm13, %0\" : \"=m\"(*data)); break;\n\tcase 14: asm(\"movdqa %%xmm14, %0\" : \"=m\"(*data)); break;\n\tcase 15: asm(\"movdqa %%xmm15, %0\" : \"=m\"(*data)); break;\n#endif\n\tdefault: BUG();\n\t}\n\tctxt->ops->put_fpu(ctxt);\n}\n\nstatic void write_sse_reg(struct x86_emulate_ctxt *ctxt, sse128_t *data,\n\t\t\t  int reg)\n{\n\tctxt->ops->get_fpu(ctxt);\n\tswitch (reg) {\n\tcase 0: asm(\"movdqa %0, %%xmm0\" : : \"m\"(*data)); break;\n\tcase 1: asm(\"movdqa %0, %%xmm1\" : : \"m\"(*data)); break;\n\tcase 2: asm(\"movdqa %0, %%xmm2\" : : \"m\"(*data)); break;\n\tcase 3: asm(\"movdqa %0, %%xmm3\" : : \"m\"(*data)); break;\n\tcase 4: asm(\"movdqa %0, %%xmm4\" : : \"m\"(*data)); break;\n\tcase 5: asm(\"movdqa %0, %%xmm5\" : : \"m\"(*data)); break;\n\tcase 6: asm(\"movdqa %0, %%xmm6\" : : \"m\"(*data)); break;\n\tcase 7: asm(\"movdqa %0, %%xmm7\" : : \"m\"(*data)); break;\n#ifdef CONFIG_X86_64\n\tcase 8: asm(\"movdqa %0, %%xmm8\" : : \"m\"(*data)); break;\n\tcase 9: asm(\"movdqa %0, %%xmm9\" : : \"m\"(*data)); break;\n\tcase 10: asm(\"movdqa %0, %%xmm10\" : : \"m\"(*data)); break;\n\tcase 11: asm(\"movdqa %0, %%xmm11\" : : \"m\"(*data)); break;\n\tcase 12: asm(\"movdqa %0, %%xmm12\" : : \"m\"(*data)); break;\n\tcase 13: asm(\"movdqa %0, %%xmm13\" : : \"m\"(*data)); break;\n\tcase 14: asm(\"movdqa %0, %%xmm14\" : : \"m\"(*data)); break;\n\tcase 15: asm(\"movdqa %0, %%xmm15\" : : \"m\"(*data)); break;\n#endif\n\tdefault: BUG();\n\t}\n\tctxt->ops->put_fpu(ctxt);\n}\n\nstatic void read_mmx_reg(struct x86_emulate_ctxt *ctxt, u64 *data, int reg)\n{\n\tctxt->ops->get_fpu(ctxt);\n\tswitch (reg) {\n\tcase 0: asm(\"movq %%mm0, %0\" : \"=m\"(*data)); break;\n\tcase 1: asm(\"movq %%mm1, %0\" : \"=m\"(*data)); break;\n\tcase 2: asm(\"movq %%mm2, %0\" : \"=m\"(*data)); break;\n\tcase 3: asm(\"movq %%mm3, %0\" : \"=m\"(*data)); break;\n\tcase 4: asm(\"movq %%mm4, %0\" : \"=m\"(*data)); break;\n\tcase 5: asm(\"movq %%mm5, %0\" : \"=m\"(*data)); break;\n\tcase 6: asm(\"movq %%mm6, %0\" : \"=m\"(*data)); break;\n\tcase 7: asm(\"movq %%mm7, %0\" : \"=m\"(*data)); break;\n\tdefault: BUG();\n\t}\n\tctxt->ops->put_fpu(ctxt);\n}\n\nstatic void write_mmx_reg(struct x86_emulate_ctxt *ctxt, u64 *data, int reg)\n{\n\tctxt->ops->get_fpu(ctxt);\n\tswitch (reg) {\n\tcase 0: asm(\"movq %0, %%mm0\" : : \"m\"(*data)); break;\n\tcase 1: asm(\"movq %0, %%mm1\" : : \"m\"(*data)); break;\n\tcase 2: asm(\"movq %0, %%mm2\" : : \"m\"(*data)); break;\n\tcase 3: asm(\"movq %0, %%mm3\" : : \"m\"(*data)); break;\n\tcase 4: asm(\"movq %0, %%mm4\" : : \"m\"(*data)); break;\n\tcase 5: asm(\"movq %0, %%mm5\" : : \"m\"(*data)); break;\n\tcase 6: asm(\"movq %0, %%mm6\" : : \"m\"(*data)); break;\n\tcase 7: asm(\"movq %0, %%mm7\" : : \"m\"(*data)); break;\n\tdefault: BUG();\n\t}\n\tctxt->ops->put_fpu(ctxt);\n}\n\nstatic int em_fninit(struct x86_emulate_ctxt *ctxt)\n{\n\tif (ctxt->ops->get_cr(ctxt, 0) & (X86_CR0_TS | X86_CR0_EM))\n\t\treturn emulate_nm(ctxt);\n\n\tctxt->ops->get_fpu(ctxt);\n\tasm volatile(\"fninit\");\n\tctxt->ops->put_fpu(ctxt);\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_fnstcw(struct x86_emulate_ctxt *ctxt)\n{\n\tu16 fcw;\n\n\tif (ctxt->ops->get_cr(ctxt, 0) & (X86_CR0_TS | X86_CR0_EM))\n\t\treturn emulate_nm(ctxt);\n\n\tctxt->ops->get_fpu(ctxt);\n\tasm volatile(\"fnstcw %0\": \"+m\"(fcw));\n\tctxt->ops->put_fpu(ctxt);\n\n\tctxt->dst.val = fcw;\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_fnstsw(struct x86_emulate_ctxt *ctxt)\n{\n\tu16 fsw;\n\n\tif (ctxt->ops->get_cr(ctxt, 0) & (X86_CR0_TS | X86_CR0_EM))\n\t\treturn emulate_nm(ctxt);\n\n\tctxt->ops->get_fpu(ctxt);\n\tasm volatile(\"fnstsw %0\": \"+m\"(fsw));\n\tctxt->ops->put_fpu(ctxt);\n\n\tctxt->dst.val = fsw;\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic void decode_register_operand(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t    struct operand *op)\n{\n\tunsigned reg = ctxt->modrm_reg;\n\n\tif (!(ctxt->d & ModRM))\n\t\treg = (ctxt->b & 7) | ((ctxt->rex_prefix & 1) << 3);\n\n\tif (ctxt->d & Sse) {\n\t\top->type = OP_XMM;\n\t\top->bytes = 16;\n\t\top->addr.xmm = reg;\n\t\tread_sse_reg(ctxt, &op->vec_val, reg);\n\t\treturn;\n\t}\n\tif (ctxt->d & Mmx) {\n\t\treg &= 7;\n\t\top->type = OP_MM;\n\t\top->bytes = 8;\n\t\top->addr.mm = reg;\n\t\treturn;\n\t}\n\n\top->type = OP_REG;\n\top->bytes = (ctxt->d & ByteOp) ? 1 : ctxt->op_bytes;\n\top->addr.reg = decode_register(ctxt, reg, ctxt->d & ByteOp);\n\n\tfetch_register_operand(op);\n\top->orig_val = op->val;\n}\n\nstatic void adjust_modrm_seg(struct x86_emulate_ctxt *ctxt, int base_reg)\n{\n\tif (base_reg == VCPU_REGS_RSP || base_reg == VCPU_REGS_RBP)\n\t\tctxt->modrm_seg = VCPU_SREG_SS;\n}\n\nstatic int decode_modrm(struct x86_emulate_ctxt *ctxt,\n\t\t\tstruct operand *op)\n{\n\tu8 sib;\n\tint index_reg, base_reg, scale;\n\tint rc = X86EMUL_CONTINUE;\n\tulong modrm_ea = 0;\n\n\tctxt->modrm_reg = ((ctxt->rex_prefix << 1) & 8); /* REX.R */\n\tindex_reg = (ctxt->rex_prefix << 2) & 8; /* REX.X */\n\tbase_reg = (ctxt->rex_prefix << 3) & 8; /* REX.B */\n\n\tctxt->modrm_mod = (ctxt->modrm & 0xc0) >> 6;\n\tctxt->modrm_reg |= (ctxt->modrm & 0x38) >> 3;\n\tctxt->modrm_rm = base_reg | (ctxt->modrm & 0x07);\n\tctxt->modrm_seg = VCPU_SREG_DS;\n\n\tif (ctxt->modrm_mod == 3 || (ctxt->d & NoMod)) {\n\t\top->type = OP_REG;\n\t\top->bytes = (ctxt->d & ByteOp) ? 1 : ctxt->op_bytes;\n\t\top->addr.reg = decode_register(ctxt, ctxt->modrm_rm,\n\t\t\t\tctxt->d & ByteOp);\n\t\tif (ctxt->d & Sse) {\n\t\t\top->type = OP_XMM;\n\t\t\top->bytes = 16;\n\t\t\top->addr.xmm = ctxt->modrm_rm;\n\t\t\tread_sse_reg(ctxt, &op->vec_val, ctxt->modrm_rm);\n\t\t\treturn rc;\n\t\t}\n\t\tif (ctxt->d & Mmx) {\n\t\t\top->type = OP_MM;\n\t\t\top->bytes = 8;\n\t\t\top->addr.mm = ctxt->modrm_rm & 7;\n\t\t\treturn rc;\n\t\t}\n\t\tfetch_register_operand(op);\n\t\treturn rc;\n\t}\n\n\top->type = OP_MEM;\n\n\tif (ctxt->ad_bytes == 2) {\n\t\tunsigned bx = reg_read(ctxt, VCPU_REGS_RBX);\n\t\tunsigned bp = reg_read(ctxt, VCPU_REGS_RBP);\n\t\tunsigned si = reg_read(ctxt, VCPU_REGS_RSI);\n\t\tunsigned di = reg_read(ctxt, VCPU_REGS_RDI);\n\n\t\t/* 16-bit ModR/M decode. */\n\t\tswitch (ctxt->modrm_mod) {\n\t\tcase 0:\n\t\t\tif (ctxt->modrm_rm == 6)\n\t\t\t\tmodrm_ea += insn_fetch(u16, ctxt);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tmodrm_ea += insn_fetch(s8, ctxt);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tmodrm_ea += insn_fetch(u16, ctxt);\n\t\t\tbreak;\n\t\t}\n\t\tswitch (ctxt->modrm_rm) {\n\t\tcase 0:\n\t\t\tmodrm_ea += bx + si;\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tmodrm_ea += bx + di;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tmodrm_ea += bp + si;\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tmodrm_ea += bp + di;\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tmodrm_ea += si;\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tmodrm_ea += di;\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tif (ctxt->modrm_mod != 0)\n\t\t\t\tmodrm_ea += bp;\n\t\t\tbreak;\n\t\tcase 7:\n\t\t\tmodrm_ea += bx;\n\t\t\tbreak;\n\t\t}\n\t\tif (ctxt->modrm_rm == 2 || ctxt->modrm_rm == 3 ||\n\t\t    (ctxt->modrm_rm == 6 && ctxt->modrm_mod != 0))\n\t\t\tctxt->modrm_seg = VCPU_SREG_SS;\n\t\tmodrm_ea = (u16)modrm_ea;\n\t} else {\n\t\t/* 32/64-bit ModR/M decode. */\n\t\tif ((ctxt->modrm_rm & 7) == 4) {\n\t\t\tsib = insn_fetch(u8, ctxt);\n\t\t\tindex_reg |= (sib >> 3) & 7;\n\t\t\tbase_reg |= sib & 7;\n\t\t\tscale = sib >> 6;\n\n\t\t\tif ((base_reg & 7) == 5 && ctxt->modrm_mod == 0)\n\t\t\t\tmodrm_ea += insn_fetch(s32, ctxt);\n\t\t\telse {\n\t\t\t\tmodrm_ea += reg_read(ctxt, base_reg);\n\t\t\t\tadjust_modrm_seg(ctxt, base_reg);\n\t\t\t\t/* Increment ESP on POP [ESP] */\n\t\t\t\tif ((ctxt->d & IncSP) &&\n\t\t\t\t    base_reg == VCPU_REGS_RSP)\n\t\t\t\t\tmodrm_ea += ctxt->op_bytes;\n\t\t\t}\n\t\t\tif (index_reg != 4)\n\t\t\t\tmodrm_ea += reg_read(ctxt, index_reg) << scale;\n\t\t} else if ((ctxt->modrm_rm & 7) == 5 && ctxt->modrm_mod == 0) {\n\t\t\tmodrm_ea += insn_fetch(s32, ctxt);\n\t\t\tif (ctxt->mode == X86EMUL_MODE_PROT64)\n\t\t\t\tctxt->rip_relative = 1;\n\t\t} else {\n\t\t\tbase_reg = ctxt->modrm_rm;\n\t\t\tmodrm_ea += reg_read(ctxt, base_reg);\n\t\t\tadjust_modrm_seg(ctxt, base_reg);\n\t\t}\n\t\tswitch (ctxt->modrm_mod) {\n\t\tcase 1:\n\t\t\tmodrm_ea += insn_fetch(s8, ctxt);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tmodrm_ea += insn_fetch(s32, ctxt);\n\t\t\tbreak;\n\t\t}\n\t}\n\top->addr.mem.ea = modrm_ea;\n\tif (ctxt->ad_bytes != 8)\n\t\tctxt->memop.addr.mem.ea = (u32)ctxt->memop.addr.mem.ea;\n\ndone:\n\treturn rc;\n}\n\nstatic int decode_abs(struct x86_emulate_ctxt *ctxt,\n\t\t      struct operand *op)\n{\n\tint rc = X86EMUL_CONTINUE;\n\n\top->type = OP_MEM;\n\tswitch (ctxt->ad_bytes) {\n\tcase 2:\n\t\top->addr.mem.ea = insn_fetch(u16, ctxt);\n\t\tbreak;\n\tcase 4:\n\t\top->addr.mem.ea = insn_fetch(u32, ctxt);\n\t\tbreak;\n\tcase 8:\n\t\top->addr.mem.ea = insn_fetch(u64, ctxt);\n\t\tbreak;\n\t}\ndone:\n\treturn rc;\n}\n\nstatic void fetch_bit_operand(struct x86_emulate_ctxt *ctxt)\n{\n\tlong sv = 0, mask;\n\n\tif (ctxt->dst.type == OP_MEM && ctxt->src.type == OP_REG) {\n\t\tmask = ~((long)ctxt->dst.bytes * 8 - 1);\n\n\t\tif (ctxt->src.bytes == 2)\n\t\t\tsv = (s16)ctxt->src.val & (s16)mask;\n\t\telse if (ctxt->src.bytes == 4)\n\t\t\tsv = (s32)ctxt->src.val & (s32)mask;\n\t\telse\n\t\t\tsv = (s64)ctxt->src.val & (s64)mask;\n\n\t\tctxt->dst.addr.mem.ea = address_mask(ctxt,\n\t\t\t\t\t   ctxt->dst.addr.mem.ea + (sv >> 3));\n\t}\n\n\t/* only subword offset */\n\tctxt->src.val &= (ctxt->dst.bytes << 3) - 1;\n}\n\nstatic int read_emulated(struct x86_emulate_ctxt *ctxt,\n\t\t\t unsigned long addr, void *dest, unsigned size)\n{\n\tint rc;\n\tstruct read_cache *mc = &ctxt->mem_read;\n\n\tif (mc->pos < mc->end)\n\t\tgoto read_cached;\n\n\tWARN_ON((mc->end + size) >= sizeof(mc->data));\n\n\trc = ctxt->ops->read_emulated(ctxt, addr, mc->data + mc->end, size,\n\t\t\t\t      &ctxt->exception);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tmc->end += size;\n\nread_cached:\n\tmemcpy(dest, mc->data + mc->pos, size);\n\tmc->pos += size;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int segmented_read(struct x86_emulate_ctxt *ctxt,\n\t\t\t  struct segmented_address addr,\n\t\t\t  void *data,\n\t\t\t  unsigned size)\n{\n\tint rc;\n\tulong linear;\n\n\trc = linearize(ctxt, addr, size, false, &linear);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\treturn read_emulated(ctxt, linear, data, size);\n}\n\nstatic int segmented_write(struct x86_emulate_ctxt *ctxt,\n\t\t\t   struct segmented_address addr,\n\t\t\t   const void *data,\n\t\t\t   unsigned size)\n{\n\tint rc;\n\tulong linear;\n\n\trc = linearize(ctxt, addr, size, true, &linear);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\treturn ctxt->ops->write_emulated(ctxt, linear, data, size,\n\t\t\t\t\t &ctxt->exception);\n}\n\nstatic int segmented_cmpxchg(struct x86_emulate_ctxt *ctxt,\n\t\t\t     struct segmented_address addr,\n\t\t\t     const void *orig_data, const void *data,\n\t\t\t     unsigned size)\n{\n\tint rc;\n\tulong linear;\n\n\trc = linearize(ctxt, addr, size, true, &linear);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\treturn ctxt->ops->cmpxchg_emulated(ctxt, linear, orig_data, data,\n\t\t\t\t\t   size, &ctxt->exception);\n}\n\nstatic int pio_in_emulated(struct x86_emulate_ctxt *ctxt,\n\t\t\t   unsigned int size, unsigned short port,\n\t\t\t   void *dest)\n{\n\tstruct read_cache *rc = &ctxt->io_read;\n\n\tif (rc->pos == rc->end) { /* refill pio read ahead */\n\t\tunsigned int in_page, n;\n\t\tunsigned int count = ctxt->rep_prefix ?\n\t\t\taddress_mask(ctxt, reg_read(ctxt, VCPU_REGS_RCX)) : 1;\n\t\tin_page = (ctxt->eflags & X86_EFLAGS_DF) ?\n\t\t\toffset_in_page(reg_read(ctxt, VCPU_REGS_RDI)) :\n\t\t\tPAGE_SIZE - offset_in_page(reg_read(ctxt, VCPU_REGS_RDI));\n\t\tn = min3(in_page, (unsigned int)sizeof(rc->data) / size, count);\n\t\tif (n == 0)\n\t\t\tn = 1;\n\t\trc->pos = rc->end = 0;\n\t\tif (!ctxt->ops->pio_in_emulated(ctxt, size, port, rc->data, n))\n\t\t\treturn 0;\n\t\trc->end = n * size;\n\t}\n\n\tif (ctxt->rep_prefix && (ctxt->d & String) &&\n\t    !(ctxt->eflags & X86_EFLAGS_DF)) {\n\t\tctxt->dst.data = rc->data + rc->pos;\n\t\tctxt->dst.type = OP_MEM_STR;\n\t\tctxt->dst.count = (rc->end - rc->pos) / size;\n\t\trc->pos = rc->end;\n\t} else {\n\t\tmemcpy(dest, rc->data + rc->pos, size);\n\t\trc->pos += size;\n\t}\n\treturn 1;\n}\n\nstatic int read_interrupt_descriptor(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t     u16 index, struct desc_struct *desc)\n{\n\tstruct desc_ptr dt;\n\tulong addr;\n\n\tctxt->ops->get_idt(ctxt, &dt);\n\n\tif (dt.size < index * 8 + 7)\n\t\treturn emulate_gp(ctxt, index << 3 | 0x2);\n\n\taddr = dt.address + index * 8;\n\treturn ctxt->ops->read_std(ctxt, addr, desc, sizeof *desc,\n\t\t\t\t   &ctxt->exception);\n}\n\nstatic void get_descriptor_table_ptr(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t     u16 selector, struct desc_ptr *dt)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tu32 base3 = 0;\n\n\tif (selector & 1 << 2) {\n\t\tstruct desc_struct desc;\n\t\tu16 sel;\n\n\t\tmemset (dt, 0, sizeof *dt);\n\t\tif (!ops->get_segment(ctxt, &sel, &desc, &base3,\n\t\t\t\t      VCPU_SREG_LDTR))\n\t\t\treturn;\n\n\t\tdt->size = desc_limit_scaled(&desc); /* what if limit > 65535? */\n\t\tdt->address = get_desc_base(&desc) | ((u64)base3 << 32);\n\t} else\n\t\tops->get_gdt(ctxt, dt);\n}\n\nstatic int get_descriptor_ptr(struct x86_emulate_ctxt *ctxt,\n\t\t\t      u16 selector, ulong *desc_addr_p)\n{\n\tstruct desc_ptr dt;\n\tu16 index = selector >> 3;\n\tulong addr;\n\n\tget_descriptor_table_ptr(ctxt, selector, &dt);\n\n\tif (dt.size < index * 8 + 7)\n\t\treturn emulate_gp(ctxt, selector & 0xfffc);\n\n\taddr = dt.address + index * 8;\n\n#ifdef CONFIG_X86_64\n\tif (addr >> 32 != 0) {\n\t\tu64 efer = 0;\n\n\t\tctxt->ops->get_msr(ctxt, MSR_EFER, &efer);\n\t\tif (!(efer & EFER_LMA))\n\t\t\taddr &= (u32)-1;\n\t}\n#endif\n\n\t*desc_addr_p = addr;\n\treturn X86EMUL_CONTINUE;\n}\n\n/* allowed just for 8 bytes segments */\nstatic int read_segment_descriptor(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t   u16 selector, struct desc_struct *desc,\n\t\t\t\t   ulong *desc_addr_p)\n{\n\tint rc;\n\n\trc = get_descriptor_ptr(ctxt, selector, desc_addr_p);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\treturn ctxt->ops->read_std(ctxt, *desc_addr_p, desc, sizeof(*desc),\n\t\t\t\t   &ctxt->exception);\n}\n\n/* allowed just for 8 bytes segments */\nstatic int write_segment_descriptor(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t    u16 selector, struct desc_struct *desc)\n{\n\tint rc;\n\tulong addr;\n\n\trc = get_descriptor_ptr(ctxt, selector, &addr);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\treturn ctxt->ops->write_std(ctxt, addr, desc, sizeof *desc,\n\t\t\t\t    &ctxt->exception);\n}\n\nstatic int __load_segment_descriptor(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t     u16 selector, int seg, u8 cpl,\n\t\t\t\t     enum x86_transfer_type transfer,\n\t\t\t\t     struct desc_struct *desc)\n{\n\tstruct desc_struct seg_desc, old_desc;\n\tu8 dpl, rpl;\n\tunsigned err_vec = GP_VECTOR;\n\tu32 err_code = 0;\n\tbool null_selector = !(selector & ~0x3); /* 0000-0003 are null */\n\tulong desc_addr;\n\tint ret;\n\tu16 dummy;\n\tu32 base3 = 0;\n\n\tmemset(&seg_desc, 0, sizeof seg_desc);\n\n\tif (ctxt->mode == X86EMUL_MODE_REAL) {\n\t\t/* set real mode segment descriptor (keep limit etc. for\n\t\t * unreal mode) */\n\t\tctxt->ops->get_segment(ctxt, &dummy, &seg_desc, NULL, seg);\n\t\tset_desc_base(&seg_desc, selector << 4);\n\t\tgoto load;\n\t} else if (seg <= VCPU_SREG_GS && ctxt->mode == X86EMUL_MODE_VM86) {\n\t\t/* VM86 needs a clean new segment descriptor */\n\t\tset_desc_base(&seg_desc, selector << 4);\n\t\tset_desc_limit(&seg_desc, 0xffff);\n\t\tseg_desc.type = 3;\n\t\tseg_desc.p = 1;\n\t\tseg_desc.s = 1;\n\t\tseg_desc.dpl = 3;\n\t\tgoto load;\n\t}\n\n\trpl = selector & 3;\n\n\t/* TR should be in GDT only */\n\tif (seg == VCPU_SREG_TR && (selector & (1 << 2)))\n\t\tgoto exception;\n\n\t/* NULL selector is not valid for TR, CS and (except for long mode) SS */\n\tif (null_selector) {\n\t\tif (seg == VCPU_SREG_CS || seg == VCPU_SREG_TR)\n\t\t\tgoto exception;\n\n\t\tif (seg == VCPU_SREG_SS) {\n\t\t\tif (ctxt->mode != X86EMUL_MODE_PROT64 || rpl != cpl)\n\t\t\t\tgoto exception;\n\n\t\t\t/*\n\t\t\t * ctxt->ops->set_segment expects the CPL to be in\n\t\t\t * SS.DPL, so fake an expand-up 32-bit data segment.\n\t\t\t */\n\t\t\tseg_desc.type = 3;\n\t\t\tseg_desc.p = 1;\n\t\t\tseg_desc.s = 1;\n\t\t\tseg_desc.dpl = cpl;\n\t\t\tseg_desc.d = 1;\n\t\t\tseg_desc.g = 1;\n\t\t}\n\n\t\t/* Skip all following checks */\n\t\tgoto load;\n\t}\n\n\tret = read_segment_descriptor(ctxt, selector, &seg_desc, &desc_addr);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\n\terr_code = selector & 0xfffc;\n\terr_vec = (transfer == X86_TRANSFER_TASK_SWITCH) ? TS_VECTOR :\n\t\t\t\t\t\t\t   GP_VECTOR;\n\n\t/* can't load system descriptor into segment selector */\n\tif (seg <= VCPU_SREG_GS && !seg_desc.s) {\n\t\tif (transfer == X86_TRANSFER_CALL_JMP)\n\t\t\treturn X86EMUL_UNHANDLEABLE;\n\t\tgoto exception;\n\t}\n\n\tif (!seg_desc.p) {\n\t\terr_vec = (seg == VCPU_SREG_SS) ? SS_VECTOR : NP_VECTOR;\n\t\tgoto exception;\n\t}\n\n\tdpl = seg_desc.dpl;\n\n\tswitch (seg) {\n\tcase VCPU_SREG_SS:\n\t\t/*\n\t\t * segment is not a writable data segment or segment\n\t\t * selector's RPL != CPL or segment selector's RPL != CPL\n\t\t */\n\t\tif (rpl != cpl || (seg_desc.type & 0xa) != 0x2 || dpl != cpl)\n\t\t\tgoto exception;\n\t\tbreak;\n\tcase VCPU_SREG_CS:\n\t\tif (!(seg_desc.type & 8))\n\t\t\tgoto exception;\n\n\t\tif (seg_desc.type & 4) {\n\t\t\t/* conforming */\n\t\t\tif (dpl > cpl)\n\t\t\t\tgoto exception;\n\t\t} else {\n\t\t\t/* nonconforming */\n\t\t\tif (rpl > cpl || dpl != cpl)\n\t\t\t\tgoto exception;\n\t\t}\n\t\t/* in long-mode d/b must be clear if l is set */\n\t\tif (seg_desc.d && seg_desc.l) {\n\t\t\tu64 efer = 0;\n\n\t\t\tctxt->ops->get_msr(ctxt, MSR_EFER, &efer);\n\t\t\tif (efer & EFER_LMA)\n\t\t\t\tgoto exception;\n\t\t}\n\n\t\t/* CS(RPL) <- CPL */\n\t\tselector = (selector & 0xfffc) | cpl;\n\t\tbreak;\n\tcase VCPU_SREG_TR:\n\t\tif (seg_desc.s || (seg_desc.type != 1 && seg_desc.type != 9))\n\t\t\tgoto exception;\n\t\told_desc = seg_desc;\n\t\tseg_desc.type |= 2; /* busy */\n\t\tret = ctxt->ops->cmpxchg_emulated(ctxt, desc_addr, &old_desc, &seg_desc,\n\t\t\t\t\t\t  sizeof(seg_desc), &ctxt->exception);\n\t\tif (ret != X86EMUL_CONTINUE)\n\t\t\treturn ret;\n\t\tbreak;\n\tcase VCPU_SREG_LDTR:\n\t\tif (seg_desc.s || seg_desc.type != 2)\n\t\t\tgoto exception;\n\t\tbreak;\n\tdefault: /*  DS, ES, FS, or GS */\n\t\t/*\n\t\t * segment is not a data or readable code segment or\n\t\t * ((segment is a data or nonconforming code segment)\n\t\t * and (both RPL and CPL > DPL))\n\t\t */\n\t\tif ((seg_desc.type & 0xa) == 0x8 ||\n\t\t    (((seg_desc.type & 0xc) != 0xc) &&\n\t\t     (rpl > dpl && cpl > dpl)))\n\t\t\tgoto exception;\n\t\tbreak;\n\t}\n\n\tif (seg_desc.s) {\n\t\t/* mark segment as accessed */\n\t\tif (!(seg_desc.type & 1)) {\n\t\t\tseg_desc.type |= 1;\n\t\t\tret = write_segment_descriptor(ctxt, selector,\n\t\t\t\t\t\t       &seg_desc);\n\t\t\tif (ret != X86EMUL_CONTINUE)\n\t\t\t\treturn ret;\n\t\t}\n\t} else if (ctxt->mode == X86EMUL_MODE_PROT64) {\n\t\tret = ctxt->ops->read_std(ctxt, desc_addr+8, &base3,\n\t\t\t\tsizeof(base3), &ctxt->exception);\n\t\tif (ret != X86EMUL_CONTINUE)\n\t\t\treturn ret;\n\t\tif (is_noncanonical_address(get_desc_base(&seg_desc) |\n\t\t\t\t\t     ((u64)base3 << 32)))\n\t\t\treturn emulate_gp(ctxt, 0);\n\t}\nload:\n\tctxt->ops->set_segment(ctxt, selector, &seg_desc, base3, seg);\n\tif (desc)\n\t\t*desc = seg_desc;\n\treturn X86EMUL_CONTINUE;\nexception:\n\treturn emulate_exception(ctxt, err_vec, err_code, true);\n}\n\nstatic int load_segment_descriptor(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t   u16 selector, int seg)\n{\n\tu8 cpl = ctxt->ops->cpl(ctxt);\n\n\t/*\n\t * None of MOV, POP and LSS can load a NULL selector in CPL=3, but\n\t * they can load it at CPL<3 (Intel's manual says only LSS can,\n\t * but it's wrong).\n\t *\n\t * However, the Intel manual says that putting IST=1/DPL=3 in\n\t * an interrupt gate will result in SS=3 (the AMD manual instead\n\t * says it doesn't), so allow SS=3 in __load_segment_descriptor\n\t * and only forbid it here.\n\t */\n\tif (seg == VCPU_SREG_SS && selector == 3 &&\n\t    ctxt->mode == X86EMUL_MODE_PROT64)\n\t\treturn emulate_exception(ctxt, GP_VECTOR, 0, true);\n\n\treturn __load_segment_descriptor(ctxt, selector, seg, cpl,\n\t\t\t\t\t X86_TRANSFER_NONE, NULL);\n}\n\nstatic void write_register_operand(struct operand *op)\n{\n\treturn assign_register(op->addr.reg, op->val, op->bytes);\n}\n\nstatic int writeback(struct x86_emulate_ctxt *ctxt, struct operand *op)\n{\n\tswitch (op->type) {\n\tcase OP_REG:\n\t\twrite_register_operand(op);\n\t\tbreak;\n\tcase OP_MEM:\n\t\tif (ctxt->lock_prefix)\n\t\t\treturn segmented_cmpxchg(ctxt,\n\t\t\t\t\t\t op->addr.mem,\n\t\t\t\t\t\t &op->orig_val,\n\t\t\t\t\t\t &op->val,\n\t\t\t\t\t\t op->bytes);\n\t\telse\n\t\t\treturn segmented_write(ctxt,\n\t\t\t\t\t       op->addr.mem,\n\t\t\t\t\t       &op->val,\n\t\t\t\t\t       op->bytes);\n\t\tbreak;\n\tcase OP_MEM_STR:\n\t\treturn segmented_write(ctxt,\n\t\t\t\t       op->addr.mem,\n\t\t\t\t       op->data,\n\t\t\t\t       op->bytes * op->count);\n\t\tbreak;\n\tcase OP_XMM:\n\t\twrite_sse_reg(ctxt, &op->vec_val, op->addr.xmm);\n\t\tbreak;\n\tcase OP_MM:\n\t\twrite_mmx_reg(ctxt, &op->mm_val, op->addr.mm);\n\t\tbreak;\n\tcase OP_NONE:\n\t\t/* no writeback */\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int push(struct x86_emulate_ctxt *ctxt, void *data, int bytes)\n{\n\tstruct segmented_address addr;\n\n\trsp_increment(ctxt, -bytes);\n\taddr.ea = reg_read(ctxt, VCPU_REGS_RSP) & stack_mask(ctxt);\n\taddr.seg = VCPU_SREG_SS;\n\n\treturn segmented_write(ctxt, addr, data, bytes);\n}\n\nstatic int em_push(struct x86_emulate_ctxt *ctxt)\n{\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn push(ctxt, &ctxt->src.val, ctxt->op_bytes);\n}\n\nstatic int emulate_pop(struct x86_emulate_ctxt *ctxt,\n\t\t       void *dest, int len)\n{\n\tint rc;\n\tstruct segmented_address addr;\n\n\taddr.ea = reg_read(ctxt, VCPU_REGS_RSP) & stack_mask(ctxt);\n\taddr.seg = VCPU_SREG_SS;\n\trc = segmented_read(ctxt, addr, dest, len);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\trsp_increment(ctxt, len);\n\treturn rc;\n}\n\nstatic int em_pop(struct x86_emulate_ctxt *ctxt)\n{\n\treturn emulate_pop(ctxt, &ctxt->dst.val, ctxt->op_bytes);\n}\n\nstatic int emulate_popf(struct x86_emulate_ctxt *ctxt,\n\t\t\tvoid *dest, int len)\n{\n\tint rc;\n\tunsigned long val, change_mask;\n\tint iopl = (ctxt->eflags & X86_EFLAGS_IOPL) >> X86_EFLAGS_IOPL_BIT;\n\tint cpl = ctxt->ops->cpl(ctxt);\n\n\trc = emulate_pop(ctxt, &val, len);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tchange_mask = X86_EFLAGS_CF | X86_EFLAGS_PF | X86_EFLAGS_AF |\n\t\t      X86_EFLAGS_ZF | X86_EFLAGS_SF | X86_EFLAGS_OF |\n\t\t      X86_EFLAGS_TF | X86_EFLAGS_DF | X86_EFLAGS_NT |\n\t\t      X86_EFLAGS_AC | X86_EFLAGS_ID;\n\n\tswitch(ctxt->mode) {\n\tcase X86EMUL_MODE_PROT64:\n\tcase X86EMUL_MODE_PROT32:\n\tcase X86EMUL_MODE_PROT16:\n\t\tif (cpl == 0)\n\t\t\tchange_mask |= X86_EFLAGS_IOPL;\n\t\tif (cpl <= iopl)\n\t\t\tchange_mask |= X86_EFLAGS_IF;\n\t\tbreak;\n\tcase X86EMUL_MODE_VM86:\n\t\tif (iopl < 3)\n\t\t\treturn emulate_gp(ctxt, 0);\n\t\tchange_mask |= X86_EFLAGS_IF;\n\t\tbreak;\n\tdefault: /* real mode */\n\t\tchange_mask |= (X86_EFLAGS_IOPL | X86_EFLAGS_IF);\n\t\tbreak;\n\t}\n\n\t*(unsigned long *)dest =\n\t\t(ctxt->eflags & ~change_mask) | (val & change_mask);\n\n\treturn rc;\n}\n\nstatic int em_popf(struct x86_emulate_ctxt *ctxt)\n{\n\tctxt->dst.type = OP_REG;\n\tctxt->dst.addr.reg = &ctxt->eflags;\n\tctxt->dst.bytes = ctxt->op_bytes;\n\treturn emulate_popf(ctxt, &ctxt->dst.val, ctxt->op_bytes);\n}\n\nstatic int em_enter(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc;\n\tunsigned frame_size = ctxt->src.val;\n\tunsigned nesting_level = ctxt->src2.val & 31;\n\tulong rbp;\n\n\tif (nesting_level)\n\t\treturn X86EMUL_UNHANDLEABLE;\n\n\trbp = reg_read(ctxt, VCPU_REGS_RBP);\n\trc = push(ctxt, &rbp, stack_size(ctxt));\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\tassign_masked(reg_rmw(ctxt, VCPU_REGS_RBP), reg_read(ctxt, VCPU_REGS_RSP),\n\t\t      stack_mask(ctxt));\n\tassign_masked(reg_rmw(ctxt, VCPU_REGS_RSP),\n\t\t      reg_read(ctxt, VCPU_REGS_RSP) - frame_size,\n\t\t      stack_mask(ctxt));\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_leave(struct x86_emulate_ctxt *ctxt)\n{\n\tassign_masked(reg_rmw(ctxt, VCPU_REGS_RSP), reg_read(ctxt, VCPU_REGS_RBP),\n\t\t      stack_mask(ctxt));\n\treturn emulate_pop(ctxt, reg_rmw(ctxt, VCPU_REGS_RBP), ctxt->op_bytes);\n}\n\nstatic int em_push_sreg(struct x86_emulate_ctxt *ctxt)\n{\n\tint seg = ctxt->src2.val;\n\n\tctxt->src.val = get_segment_selector(ctxt, seg);\n\tif (ctxt->op_bytes == 4) {\n\t\trsp_increment(ctxt, -2);\n\t\tctxt->op_bytes = 2;\n\t}\n\n\treturn em_push(ctxt);\n}\n\nstatic int em_pop_sreg(struct x86_emulate_ctxt *ctxt)\n{\n\tint seg = ctxt->src2.val;\n\tunsigned long selector;\n\tint rc;\n\n\trc = emulate_pop(ctxt, &selector, 2);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tif (ctxt->modrm_reg == VCPU_SREG_SS)\n\t\tctxt->interruptibility = KVM_X86_SHADOW_INT_MOV_SS;\n\tif (ctxt->op_bytes > 2)\n\t\trsp_increment(ctxt, ctxt->op_bytes - 2);\n\n\trc = load_segment_descriptor(ctxt, (u16)selector, seg);\n\treturn rc;\n}\n\nstatic int em_pusha(struct x86_emulate_ctxt *ctxt)\n{\n\tunsigned long old_esp = reg_read(ctxt, VCPU_REGS_RSP);\n\tint rc = X86EMUL_CONTINUE;\n\tint reg = VCPU_REGS_RAX;\n\n\twhile (reg <= VCPU_REGS_RDI) {\n\t\t(reg == VCPU_REGS_RSP) ?\n\t\t(ctxt->src.val = old_esp) : (ctxt->src.val = reg_read(ctxt, reg));\n\n\t\trc = em_push(ctxt);\n\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\treturn rc;\n\n\t\t++reg;\n\t}\n\n\treturn rc;\n}\n\nstatic int em_pushf(struct x86_emulate_ctxt *ctxt)\n{\n\tctxt->src.val = (unsigned long)ctxt->eflags & ~X86_EFLAGS_VM;\n\treturn em_push(ctxt);\n}\n\nstatic int em_popa(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc = X86EMUL_CONTINUE;\n\tint reg = VCPU_REGS_RDI;\n\tu32 val;\n\n\twhile (reg >= VCPU_REGS_RAX) {\n\t\tif (reg == VCPU_REGS_RSP) {\n\t\t\trsp_increment(ctxt, ctxt->op_bytes);\n\t\t\t--reg;\n\t\t}\n\n\t\trc = emulate_pop(ctxt, &val, ctxt->op_bytes);\n\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\tbreak;\n\t\tassign_register(reg_rmw(ctxt, reg), val, ctxt->op_bytes);\n\t\t--reg;\n\t}\n\treturn rc;\n}\n\nstatic int __emulate_int_real(struct x86_emulate_ctxt *ctxt, int irq)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tint rc;\n\tstruct desc_ptr dt;\n\tgva_t cs_addr;\n\tgva_t eip_addr;\n\tu16 cs, eip;\n\n\t/* TODO: Add limit checks */\n\tctxt->src.val = ctxt->eflags;\n\trc = em_push(ctxt);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tctxt->eflags &= ~(X86_EFLAGS_IF | X86_EFLAGS_TF | X86_EFLAGS_AC);\n\n\tctxt->src.val = get_segment_selector(ctxt, VCPU_SREG_CS);\n\trc = em_push(ctxt);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tctxt->src.val = ctxt->_eip;\n\trc = em_push(ctxt);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tops->get_idt(ctxt, &dt);\n\n\teip_addr = dt.address + (irq << 2);\n\tcs_addr = dt.address + (irq << 2) + 2;\n\n\trc = ops->read_std(ctxt, cs_addr, &cs, 2, &ctxt->exception);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\trc = ops->read_std(ctxt, eip_addr, &eip, 2, &ctxt->exception);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\trc = load_segment_descriptor(ctxt, cs, VCPU_SREG_CS);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tctxt->_eip = eip;\n\n\treturn rc;\n}\n\nint emulate_int_real(struct x86_emulate_ctxt *ctxt, int irq)\n{\n\tint rc;\n\n\tinvalidate_registers(ctxt);\n\trc = __emulate_int_real(ctxt, irq);\n\tif (rc == X86EMUL_CONTINUE)\n\t\twriteback_registers(ctxt);\n\treturn rc;\n}\n\nstatic int emulate_int(struct x86_emulate_ctxt *ctxt, int irq)\n{\n\tswitch(ctxt->mode) {\n\tcase X86EMUL_MODE_REAL:\n\t\treturn __emulate_int_real(ctxt, irq);\n\tcase X86EMUL_MODE_VM86:\n\tcase X86EMUL_MODE_PROT16:\n\tcase X86EMUL_MODE_PROT32:\n\tcase X86EMUL_MODE_PROT64:\n\tdefault:\n\t\t/* Protected mode interrupts unimplemented yet */\n\t\treturn X86EMUL_UNHANDLEABLE;\n\t}\n}\n\nstatic int emulate_iret_real(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc = X86EMUL_CONTINUE;\n\tunsigned long temp_eip = 0;\n\tunsigned long temp_eflags = 0;\n\tunsigned long cs = 0;\n\tunsigned long mask = X86_EFLAGS_CF | X86_EFLAGS_PF | X86_EFLAGS_AF |\n\t\t\t     X86_EFLAGS_ZF | X86_EFLAGS_SF | X86_EFLAGS_TF |\n\t\t\t     X86_EFLAGS_IF | X86_EFLAGS_DF | X86_EFLAGS_OF |\n\t\t\t     X86_EFLAGS_IOPL | X86_EFLAGS_NT | X86_EFLAGS_RF |\n\t\t\t     X86_EFLAGS_AC | X86_EFLAGS_ID |\n\t\t\t     X86_EFLAGS_FIXED;\n\tunsigned long vm86_mask = X86_EFLAGS_VM | X86_EFLAGS_VIF |\n\t\t\t\t  X86_EFLAGS_VIP;\n\n\t/* TODO: Add stack limit check */\n\n\trc = emulate_pop(ctxt, &temp_eip, ctxt->op_bytes);\n\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tif (temp_eip & ~0xffff)\n\t\treturn emulate_gp(ctxt, 0);\n\n\trc = emulate_pop(ctxt, &cs, ctxt->op_bytes);\n\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\trc = emulate_pop(ctxt, &temp_eflags, ctxt->op_bytes);\n\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\trc = load_segment_descriptor(ctxt, (u16)cs, VCPU_SREG_CS);\n\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tctxt->_eip = temp_eip;\n\n\tif (ctxt->op_bytes == 4)\n\t\tctxt->eflags = ((temp_eflags & mask) | (ctxt->eflags & vm86_mask));\n\telse if (ctxt->op_bytes == 2) {\n\t\tctxt->eflags &= ~0xffff;\n\t\tctxt->eflags |= temp_eflags;\n\t}\n\n\tctxt->eflags &= ~EFLG_RESERVED_ZEROS_MASK; /* Clear reserved zeros */\n\tctxt->eflags |= X86_EFLAGS_FIXED;\n\tctxt->ops->set_nmi_mask(ctxt, false);\n\n\treturn rc;\n}\n\nstatic int em_iret(struct x86_emulate_ctxt *ctxt)\n{\n\tswitch(ctxt->mode) {\n\tcase X86EMUL_MODE_REAL:\n\t\treturn emulate_iret_real(ctxt);\n\tcase X86EMUL_MODE_VM86:\n\tcase X86EMUL_MODE_PROT16:\n\tcase X86EMUL_MODE_PROT32:\n\tcase X86EMUL_MODE_PROT64:\n\tdefault:\n\t\t/* iret from protected mode unimplemented yet */\n\t\treturn X86EMUL_UNHANDLEABLE;\n\t}\n}\n\nstatic int em_jmp_far(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc;\n\tunsigned short sel;\n\tstruct desc_struct new_desc;\n\tu8 cpl = ctxt->ops->cpl(ctxt);\n\n\tmemcpy(&sel, ctxt->src.valptr + ctxt->op_bytes, 2);\n\n\trc = __load_segment_descriptor(ctxt, sel, VCPU_SREG_CS, cpl,\n\t\t\t\t       X86_TRANSFER_CALL_JMP,\n\t\t\t\t       &new_desc);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\trc = assign_eip_far(ctxt, ctxt->src.val, &new_desc);\n\t/* Error handling is not implemented. */\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn X86EMUL_UNHANDLEABLE;\n\n\treturn rc;\n}\n\nstatic int em_jmp_abs(struct x86_emulate_ctxt *ctxt)\n{\n\treturn assign_eip_near(ctxt, ctxt->src.val);\n}\n\nstatic int em_call_near_abs(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc;\n\tlong int old_eip;\n\n\told_eip = ctxt->_eip;\n\trc = assign_eip_near(ctxt, ctxt->src.val);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\tctxt->src.val = old_eip;\n\trc = em_push(ctxt);\n\treturn rc;\n}\n\nstatic int em_cmpxchg8b(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 old = ctxt->dst.orig_val64;\n\n\tif (ctxt->dst.bytes == 16)\n\t\treturn X86EMUL_UNHANDLEABLE;\n\n\tif (((u32) (old >> 0) != (u32) reg_read(ctxt, VCPU_REGS_RAX)) ||\n\t    ((u32) (old >> 32) != (u32) reg_read(ctxt, VCPU_REGS_RDX))) {\n\t\t*reg_write(ctxt, VCPU_REGS_RAX) = (u32) (old >> 0);\n\t\t*reg_write(ctxt, VCPU_REGS_RDX) = (u32) (old >> 32);\n\t\tctxt->eflags &= ~X86_EFLAGS_ZF;\n\t} else {\n\t\tctxt->dst.val64 = ((u64)reg_read(ctxt, VCPU_REGS_RCX) << 32) |\n\t\t\t(u32) reg_read(ctxt, VCPU_REGS_RBX);\n\n\t\tctxt->eflags |= X86_EFLAGS_ZF;\n\t}\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_ret(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc;\n\tunsigned long eip;\n\n\trc = emulate_pop(ctxt, &eip, ctxt->op_bytes);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\treturn assign_eip_near(ctxt, eip);\n}\n\nstatic int em_ret_far(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc;\n\tunsigned long eip, cs;\n\tint cpl = ctxt->ops->cpl(ctxt);\n\tstruct desc_struct new_desc;\n\n\trc = emulate_pop(ctxt, &eip, ctxt->op_bytes);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\trc = emulate_pop(ctxt, &cs, ctxt->op_bytes);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\t/* Outer-privilege level return is not implemented */\n\tif (ctxt->mode >= X86EMUL_MODE_PROT16 && (cs & 3) > cpl)\n\t\treturn X86EMUL_UNHANDLEABLE;\n\trc = __load_segment_descriptor(ctxt, (u16)cs, VCPU_SREG_CS, cpl,\n\t\t\t\t       X86_TRANSFER_RET,\n\t\t\t\t       &new_desc);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\trc = assign_eip_far(ctxt, eip, &new_desc);\n\t/* Error handling is not implemented. */\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn X86EMUL_UNHANDLEABLE;\n\n\treturn rc;\n}\n\nstatic int em_ret_far_imm(struct x86_emulate_ctxt *ctxt)\n{\n        int rc;\n\n        rc = em_ret_far(ctxt);\n        if (rc != X86EMUL_CONTINUE)\n                return rc;\n        rsp_increment(ctxt, ctxt->src.val);\n        return X86EMUL_CONTINUE;\n}\n\nstatic int em_cmpxchg(struct x86_emulate_ctxt *ctxt)\n{\n\t/* Save real source value, then compare EAX against destination. */\n\tctxt->dst.orig_val = ctxt->dst.val;\n\tctxt->dst.val = reg_read(ctxt, VCPU_REGS_RAX);\n\tctxt->src.orig_val = ctxt->src.val;\n\tctxt->src.val = ctxt->dst.orig_val;\n\tfastop(ctxt, em_cmp);\n\n\tif (ctxt->eflags & X86_EFLAGS_ZF) {\n\t\t/* Success: write back to memory; no update of EAX */\n\t\tctxt->src.type = OP_NONE;\n\t\tctxt->dst.val = ctxt->src.orig_val;\n\t} else {\n\t\t/* Failure: write the value we saw to EAX. */\n\t\tctxt->src.type = OP_REG;\n\t\tctxt->src.addr.reg = reg_rmw(ctxt, VCPU_REGS_RAX);\n\t\tctxt->src.val = ctxt->dst.orig_val;\n\t\t/* Create write-cycle to dest by writing the same value */\n\t\tctxt->dst.val = ctxt->dst.orig_val;\n\t}\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_lseg(struct x86_emulate_ctxt *ctxt)\n{\n\tint seg = ctxt->src2.val;\n\tunsigned short sel;\n\tint rc;\n\n\tmemcpy(&sel, ctxt->src.valptr + ctxt->op_bytes, 2);\n\n\trc = load_segment_descriptor(ctxt, sel, seg);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tctxt->dst.val = ctxt->src.val;\n\treturn rc;\n}\n\nstatic int emulator_has_longmode(struct x86_emulate_ctxt *ctxt)\n{\n\tu32 eax, ebx, ecx, edx;\n\n\teax = 0x80000001;\n\tecx = 0;\n\tctxt->ops->get_cpuid(ctxt, &eax, &ebx, &ecx, &edx);\n\treturn edx & bit(X86_FEATURE_LM);\n}\n\n#define GET_SMSTATE(type, smbase, offset)\t\t\t\t  \\\n\t({\t\t\t\t\t\t\t\t  \\\n\t type __val;\t\t\t\t\t\t\t  \\\n\t int r = ctxt->ops->read_phys(ctxt, smbase + offset, &__val,      \\\n\t\t\t\t      sizeof(__val));\t\t\t  \\\n\t if (r != X86EMUL_CONTINUE)\t\t\t\t\t  \\\n\t\t return X86EMUL_UNHANDLEABLE;\t\t\t\t  \\\n\t __val;\t\t\t\t\t\t\t\t  \\\n\t})\n\nstatic void rsm_set_desc_flags(struct desc_struct *desc, u32 flags)\n{\n\tdesc->g    = (flags >> 23) & 1;\n\tdesc->d    = (flags >> 22) & 1;\n\tdesc->l    = (flags >> 21) & 1;\n\tdesc->avl  = (flags >> 20) & 1;\n\tdesc->p    = (flags >> 15) & 1;\n\tdesc->dpl  = (flags >> 13) & 3;\n\tdesc->s    = (flags >> 12) & 1;\n\tdesc->type = (flags >>  8) & 15;\n}\n\nstatic int rsm_load_seg_32(struct x86_emulate_ctxt *ctxt, u64 smbase, int n)\n{\n\tstruct desc_struct desc;\n\tint offset;\n\tu16 selector;\n\n\tselector = GET_SMSTATE(u32, smbase, 0x7fa8 + n * 4);\n\n\tif (n < 3)\n\t\toffset = 0x7f84 + n * 12;\n\telse\n\t\toffset = 0x7f2c + (n - 3) * 12;\n\n\tset_desc_base(&desc,      GET_SMSTATE(u32, smbase, offset + 8));\n\tset_desc_limit(&desc,     GET_SMSTATE(u32, smbase, offset + 4));\n\trsm_set_desc_flags(&desc, GET_SMSTATE(u32, smbase, offset));\n\tctxt->ops->set_segment(ctxt, selector, &desc, 0, n);\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int rsm_load_seg_64(struct x86_emulate_ctxt *ctxt, u64 smbase, int n)\n{\n\tstruct desc_struct desc;\n\tint offset;\n\tu16 selector;\n\tu32 base3;\n\n\toffset = 0x7e00 + n * 16;\n\n\tselector =                GET_SMSTATE(u16, smbase, offset);\n\trsm_set_desc_flags(&desc, GET_SMSTATE(u16, smbase, offset + 2) << 8);\n\tset_desc_limit(&desc,     GET_SMSTATE(u32, smbase, offset + 4));\n\tset_desc_base(&desc,      GET_SMSTATE(u32, smbase, offset + 8));\n\tbase3 =                   GET_SMSTATE(u32, smbase, offset + 12);\n\n\tctxt->ops->set_segment(ctxt, selector, &desc, base3, n);\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int rsm_enter_protected_mode(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t     u64 cr0, u64 cr4)\n{\n\tint bad;\n\n\t/*\n\t * First enable PAE, long mode needs it before CR0.PG = 1 is set.\n\t * Then enable protected mode.\tHowever, PCID cannot be enabled\n\t * if EFER.LMA=0, so set it separately.\n\t */\n\tbad = ctxt->ops->set_cr(ctxt, 4, cr4 & ~X86_CR4_PCIDE);\n\tif (bad)\n\t\treturn X86EMUL_UNHANDLEABLE;\n\n\tbad = ctxt->ops->set_cr(ctxt, 0, cr0);\n\tif (bad)\n\t\treturn X86EMUL_UNHANDLEABLE;\n\n\tif (cr4 & X86_CR4_PCIDE) {\n\t\tbad = ctxt->ops->set_cr(ctxt, 4, cr4);\n\t\tif (bad)\n\t\t\treturn X86EMUL_UNHANDLEABLE;\n\t}\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int rsm_load_state_32(struct x86_emulate_ctxt *ctxt, u64 smbase)\n{\n\tstruct desc_struct desc;\n\tstruct desc_ptr dt;\n\tu16 selector;\n\tu32 val, cr0, cr4;\n\tint i;\n\n\tcr0 =                      GET_SMSTATE(u32, smbase, 0x7ffc);\n\tctxt->ops->set_cr(ctxt, 3, GET_SMSTATE(u32, smbase, 0x7ff8));\n\tctxt->eflags =             GET_SMSTATE(u32, smbase, 0x7ff4) | X86_EFLAGS_FIXED;\n\tctxt->_eip =               GET_SMSTATE(u32, smbase, 0x7ff0);\n\n\tfor (i = 0; i < 8; i++)\n\t\t*reg_write(ctxt, i) = GET_SMSTATE(u32, smbase, 0x7fd0 + i * 4);\n\n\tval = GET_SMSTATE(u32, smbase, 0x7fcc);\n\tctxt->ops->set_dr(ctxt, 6, (val & DR6_VOLATILE) | DR6_FIXED_1);\n\tval = GET_SMSTATE(u32, smbase, 0x7fc8);\n\tctxt->ops->set_dr(ctxt, 7, (val & DR7_VOLATILE) | DR7_FIXED_1);\n\n\tselector =                 GET_SMSTATE(u32, smbase, 0x7fc4);\n\tset_desc_base(&desc,       GET_SMSTATE(u32, smbase, 0x7f64));\n\tset_desc_limit(&desc,      GET_SMSTATE(u32, smbase, 0x7f60));\n\trsm_set_desc_flags(&desc,  GET_SMSTATE(u32, smbase, 0x7f5c));\n\tctxt->ops->set_segment(ctxt, selector, &desc, 0, VCPU_SREG_TR);\n\n\tselector =                 GET_SMSTATE(u32, smbase, 0x7fc0);\n\tset_desc_base(&desc,       GET_SMSTATE(u32, smbase, 0x7f80));\n\tset_desc_limit(&desc,      GET_SMSTATE(u32, smbase, 0x7f7c));\n\trsm_set_desc_flags(&desc,  GET_SMSTATE(u32, smbase, 0x7f78));\n\tctxt->ops->set_segment(ctxt, selector, &desc, 0, VCPU_SREG_LDTR);\n\n\tdt.address =               GET_SMSTATE(u32, smbase, 0x7f74);\n\tdt.size =                  GET_SMSTATE(u32, smbase, 0x7f70);\n\tctxt->ops->set_gdt(ctxt, &dt);\n\n\tdt.address =               GET_SMSTATE(u32, smbase, 0x7f58);\n\tdt.size =                  GET_SMSTATE(u32, smbase, 0x7f54);\n\tctxt->ops->set_idt(ctxt, &dt);\n\n\tfor (i = 0; i < 6; i++) {\n\t\tint r = rsm_load_seg_32(ctxt, smbase, i);\n\t\tif (r != X86EMUL_CONTINUE)\n\t\t\treturn r;\n\t}\n\n\tcr4 = GET_SMSTATE(u32, smbase, 0x7f14);\n\n\tctxt->ops->set_smbase(ctxt, GET_SMSTATE(u32, smbase, 0x7ef8));\n\n\treturn rsm_enter_protected_mode(ctxt, cr0, cr4);\n}\n\nstatic int rsm_load_state_64(struct x86_emulate_ctxt *ctxt, u64 smbase)\n{\n\tstruct desc_struct desc;\n\tstruct desc_ptr dt;\n\tu64 val, cr0, cr4;\n\tu32 base3;\n\tu16 selector;\n\tint i, r;\n\n\tfor (i = 0; i < 16; i++)\n\t\t*reg_write(ctxt, i) = GET_SMSTATE(u64, smbase, 0x7ff8 - i * 8);\n\n\tctxt->_eip   = GET_SMSTATE(u64, smbase, 0x7f78);\n\tctxt->eflags = GET_SMSTATE(u32, smbase, 0x7f70) | X86_EFLAGS_FIXED;\n\n\tval = GET_SMSTATE(u32, smbase, 0x7f68);\n\tctxt->ops->set_dr(ctxt, 6, (val & DR6_VOLATILE) | DR6_FIXED_1);\n\tval = GET_SMSTATE(u32, smbase, 0x7f60);\n\tctxt->ops->set_dr(ctxt, 7, (val & DR7_VOLATILE) | DR7_FIXED_1);\n\n\tcr0 =                       GET_SMSTATE(u64, smbase, 0x7f58);\n\tctxt->ops->set_cr(ctxt, 3,  GET_SMSTATE(u64, smbase, 0x7f50));\n\tcr4 =                       GET_SMSTATE(u64, smbase, 0x7f48);\n\tctxt->ops->set_smbase(ctxt, GET_SMSTATE(u32, smbase, 0x7f00));\n\tval =                       GET_SMSTATE(u64, smbase, 0x7ed0);\n\tctxt->ops->set_msr(ctxt, MSR_EFER, val & ~EFER_LMA);\n\n\tselector =                  GET_SMSTATE(u32, smbase, 0x7e90);\n\trsm_set_desc_flags(&desc,   GET_SMSTATE(u32, smbase, 0x7e92) << 8);\n\tset_desc_limit(&desc,       GET_SMSTATE(u32, smbase, 0x7e94));\n\tset_desc_base(&desc,        GET_SMSTATE(u32, smbase, 0x7e98));\n\tbase3 =                     GET_SMSTATE(u32, smbase, 0x7e9c);\n\tctxt->ops->set_segment(ctxt, selector, &desc, base3, VCPU_SREG_TR);\n\n\tdt.size =                   GET_SMSTATE(u32, smbase, 0x7e84);\n\tdt.address =                GET_SMSTATE(u64, smbase, 0x7e88);\n\tctxt->ops->set_idt(ctxt, &dt);\n\n\tselector =                  GET_SMSTATE(u32, smbase, 0x7e70);\n\trsm_set_desc_flags(&desc,   GET_SMSTATE(u32, smbase, 0x7e72) << 8);\n\tset_desc_limit(&desc,       GET_SMSTATE(u32, smbase, 0x7e74));\n\tset_desc_base(&desc,        GET_SMSTATE(u32, smbase, 0x7e78));\n\tbase3 =                     GET_SMSTATE(u32, smbase, 0x7e7c);\n\tctxt->ops->set_segment(ctxt, selector, &desc, base3, VCPU_SREG_LDTR);\n\n\tdt.size =                   GET_SMSTATE(u32, smbase, 0x7e64);\n\tdt.address =                GET_SMSTATE(u64, smbase, 0x7e68);\n\tctxt->ops->set_gdt(ctxt, &dt);\n\n\tr = rsm_enter_protected_mode(ctxt, cr0, cr4);\n\tif (r != X86EMUL_CONTINUE)\n\t\treturn r;\n\n\tfor (i = 0; i < 6; i++) {\n\t\tr = rsm_load_seg_64(ctxt, smbase, i);\n\t\tif (r != X86EMUL_CONTINUE)\n\t\t\treturn r;\n\t}\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_rsm(struct x86_emulate_ctxt *ctxt)\n{\n\tunsigned long cr0, cr4, efer;\n\tu64 smbase;\n\tint ret;\n\n\tif ((ctxt->emul_flags & X86EMUL_SMM_MASK) == 0)\n\t\treturn emulate_ud(ctxt);\n\n\t/*\n\t * Get back to real mode, to prepare a safe state in which to load\n\t * CR0/CR3/CR4/EFER.  It's all a bit more complicated if the vCPU\n\t * supports long mode.\n\t */\n\tcr4 = ctxt->ops->get_cr(ctxt, 4);\n\tif (emulator_has_longmode(ctxt)) {\n\t\tstruct desc_struct cs_desc;\n\n\t\t/* Zero CR4.PCIDE before CR0.PG.  */\n\t\tif (cr4 & X86_CR4_PCIDE) {\n\t\t\tctxt->ops->set_cr(ctxt, 4, cr4 & ~X86_CR4_PCIDE);\n\t\t\tcr4 &= ~X86_CR4_PCIDE;\n\t\t}\n\n\t\t/* A 32-bit code segment is required to clear EFER.LMA.  */\n\t\tmemset(&cs_desc, 0, sizeof(cs_desc));\n\t\tcs_desc.type = 0xb;\n\t\tcs_desc.s = cs_desc.g = cs_desc.p = 1;\n\t\tctxt->ops->set_segment(ctxt, 0, &cs_desc, 0, VCPU_SREG_CS);\n\t}\n\n\t/* For the 64-bit case, this will clear EFER.LMA.  */\n\tcr0 = ctxt->ops->get_cr(ctxt, 0);\n\tif (cr0 & X86_CR0_PE)\n\t\tctxt->ops->set_cr(ctxt, 0, cr0 & ~(X86_CR0_PG | X86_CR0_PE));\n\n\t/* Now clear CR4.PAE (which must be done before clearing EFER.LME).  */\n\tif (cr4 & X86_CR4_PAE)\n\t\tctxt->ops->set_cr(ctxt, 4, cr4 & ~X86_CR4_PAE);\n\n\t/* And finally go back to 32-bit mode.  */\n\tefer = 0;\n\tctxt->ops->set_msr(ctxt, MSR_EFER, efer);\n\n\tsmbase = ctxt->ops->get_smbase(ctxt);\n\tif (emulator_has_longmode(ctxt))\n\t\tret = rsm_load_state_64(ctxt, smbase + 0x8000);\n\telse\n\t\tret = rsm_load_state_32(ctxt, smbase + 0x8000);\n\n\tif (ret != X86EMUL_CONTINUE) {\n\t\t/* FIXME: should triple fault */\n\t\treturn X86EMUL_UNHANDLEABLE;\n\t}\n\n\tif ((ctxt->emul_flags & X86EMUL_SMM_INSIDE_NMI_MASK) == 0)\n\t\tctxt->ops->set_nmi_mask(ctxt, false);\n\n\tctxt->emul_flags &= ~X86EMUL_SMM_INSIDE_NMI_MASK;\n\tctxt->emul_flags &= ~X86EMUL_SMM_MASK;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic void\nsetup_syscalls_segments(struct x86_emulate_ctxt *ctxt,\n\t\t\tstruct desc_struct *cs, struct desc_struct *ss)\n{\n\tcs->l = 0;\t\t/* will be adjusted later */\n\tset_desc_base(cs, 0);\t/* flat segment */\n\tcs->g = 1;\t\t/* 4kb granularity */\n\tset_desc_limit(cs, 0xfffff);\t/* 4GB limit */\n\tcs->type = 0x0b;\t/* Read, Execute, Accessed */\n\tcs->s = 1;\n\tcs->dpl = 0;\t\t/* will be adjusted later */\n\tcs->p = 1;\n\tcs->d = 1;\n\tcs->avl = 0;\n\n\tset_desc_base(ss, 0);\t/* flat segment */\n\tset_desc_limit(ss, 0xfffff);\t/* 4GB limit */\n\tss->g = 1;\t\t/* 4kb granularity */\n\tss->s = 1;\n\tss->type = 0x03;\t/* Read/Write, Accessed */\n\tss->d = 1;\t\t/* 32bit stack segment */\n\tss->dpl = 0;\n\tss->p = 1;\n\tss->l = 0;\n\tss->avl = 0;\n}\n\nstatic bool vendor_intel(struct x86_emulate_ctxt *ctxt)\n{\n\tu32 eax, ebx, ecx, edx;\n\n\teax = ecx = 0;\n\tctxt->ops->get_cpuid(ctxt, &eax, &ebx, &ecx, &edx);\n\treturn ebx == X86EMUL_CPUID_VENDOR_GenuineIntel_ebx\n\t\t&& ecx == X86EMUL_CPUID_VENDOR_GenuineIntel_ecx\n\t\t&& edx == X86EMUL_CPUID_VENDOR_GenuineIntel_edx;\n}\n\nstatic bool em_syscall_is_enabled(struct x86_emulate_ctxt *ctxt)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tu32 eax, ebx, ecx, edx;\n\n\t/*\n\t * syscall should always be enabled in longmode - so only become\n\t * vendor specific (cpuid) if other modes are active...\n\t */\n\tif (ctxt->mode == X86EMUL_MODE_PROT64)\n\t\treturn true;\n\n\teax = 0x00000000;\n\tecx = 0x00000000;\n\tops->get_cpuid(ctxt, &eax, &ebx, &ecx, &edx);\n\t/*\n\t * Intel (\"GenuineIntel\")\n\t * remark: Intel CPUs only support \"syscall\" in 64bit\n\t * longmode. Also an 64bit guest with a\n\t * 32bit compat-app running will #UD !! While this\n\t * behaviour can be fixed (by emulating) into AMD\n\t * response - CPUs of AMD can't behave like Intel.\n\t */\n\tif (ebx == X86EMUL_CPUID_VENDOR_GenuineIntel_ebx &&\n\t    ecx == X86EMUL_CPUID_VENDOR_GenuineIntel_ecx &&\n\t    edx == X86EMUL_CPUID_VENDOR_GenuineIntel_edx)\n\t\treturn false;\n\n\t/* AMD (\"AuthenticAMD\") */\n\tif (ebx == X86EMUL_CPUID_VENDOR_AuthenticAMD_ebx &&\n\t    ecx == X86EMUL_CPUID_VENDOR_AuthenticAMD_ecx &&\n\t    edx == X86EMUL_CPUID_VENDOR_AuthenticAMD_edx)\n\t\treturn true;\n\n\t/* AMD (\"AMDisbetter!\") */\n\tif (ebx == X86EMUL_CPUID_VENDOR_AMDisbetterI_ebx &&\n\t    ecx == X86EMUL_CPUID_VENDOR_AMDisbetterI_ecx &&\n\t    edx == X86EMUL_CPUID_VENDOR_AMDisbetterI_edx)\n\t\treturn true;\n\n\t/* default: (not Intel, not AMD), apply Intel's stricter rules... */\n\treturn false;\n}\n\nstatic int em_syscall(struct x86_emulate_ctxt *ctxt)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tstruct desc_struct cs, ss;\n\tu64 msr_data;\n\tu16 cs_sel, ss_sel;\n\tu64 efer = 0;\n\n\t/* syscall is not available in real mode */\n\tif (ctxt->mode == X86EMUL_MODE_REAL ||\n\t    ctxt->mode == X86EMUL_MODE_VM86)\n\t\treturn emulate_ud(ctxt);\n\n\tif (!(em_syscall_is_enabled(ctxt)))\n\t\treturn emulate_ud(ctxt);\n\n\tops->get_msr(ctxt, MSR_EFER, &efer);\n\tsetup_syscalls_segments(ctxt, &cs, &ss);\n\n\tif (!(efer & EFER_SCE))\n\t\treturn emulate_ud(ctxt);\n\n\tops->get_msr(ctxt, MSR_STAR, &msr_data);\n\tmsr_data >>= 32;\n\tcs_sel = (u16)(msr_data & 0xfffc);\n\tss_sel = (u16)(msr_data + 8);\n\n\tif (efer & EFER_LMA) {\n\t\tcs.d = 0;\n\t\tcs.l = 1;\n\t}\n\tops->set_segment(ctxt, cs_sel, &cs, 0, VCPU_SREG_CS);\n\tops->set_segment(ctxt, ss_sel, &ss, 0, VCPU_SREG_SS);\n\n\t*reg_write(ctxt, VCPU_REGS_RCX) = ctxt->_eip;\n\tif (efer & EFER_LMA) {\n#ifdef CONFIG_X86_64\n\t\t*reg_write(ctxt, VCPU_REGS_R11) = ctxt->eflags;\n\n\t\tops->get_msr(ctxt,\n\t\t\t     ctxt->mode == X86EMUL_MODE_PROT64 ?\n\t\t\t     MSR_LSTAR : MSR_CSTAR, &msr_data);\n\t\tctxt->_eip = msr_data;\n\n\t\tops->get_msr(ctxt, MSR_SYSCALL_MASK, &msr_data);\n\t\tctxt->eflags &= ~msr_data;\n\t\tctxt->eflags |= X86_EFLAGS_FIXED;\n#endif\n\t} else {\n\t\t/* legacy mode */\n\t\tops->get_msr(ctxt, MSR_STAR, &msr_data);\n\t\tctxt->_eip = (u32)msr_data;\n\n\t\tctxt->eflags &= ~(X86_EFLAGS_VM | X86_EFLAGS_IF);\n\t}\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_sysenter(struct x86_emulate_ctxt *ctxt)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tstruct desc_struct cs, ss;\n\tu64 msr_data;\n\tu16 cs_sel, ss_sel;\n\tu64 efer = 0;\n\n\tops->get_msr(ctxt, MSR_EFER, &efer);\n\t/* inject #GP if in real mode */\n\tif (ctxt->mode == X86EMUL_MODE_REAL)\n\t\treturn emulate_gp(ctxt, 0);\n\n\t/*\n\t * Not recognized on AMD in compat mode (but is recognized in legacy\n\t * mode).\n\t */\n\tif ((ctxt->mode != X86EMUL_MODE_PROT64) && (efer & EFER_LMA)\n\t    && !vendor_intel(ctxt))\n\t\treturn emulate_ud(ctxt);\n\n\t/* sysenter/sysexit have not been tested in 64bit mode. */\n\tif (ctxt->mode == X86EMUL_MODE_PROT64)\n\t\treturn X86EMUL_UNHANDLEABLE;\n\n\tsetup_syscalls_segments(ctxt, &cs, &ss);\n\n\tops->get_msr(ctxt, MSR_IA32_SYSENTER_CS, &msr_data);\n\tif ((msr_data & 0xfffc) == 0x0)\n\t\treturn emulate_gp(ctxt, 0);\n\n\tctxt->eflags &= ~(X86_EFLAGS_VM | X86_EFLAGS_IF);\n\tcs_sel = (u16)msr_data & ~SEGMENT_RPL_MASK;\n\tss_sel = cs_sel + 8;\n\tif (efer & EFER_LMA) {\n\t\tcs.d = 0;\n\t\tcs.l = 1;\n\t}\n\n\tops->set_segment(ctxt, cs_sel, &cs, 0, VCPU_SREG_CS);\n\tops->set_segment(ctxt, ss_sel, &ss, 0, VCPU_SREG_SS);\n\n\tops->get_msr(ctxt, MSR_IA32_SYSENTER_EIP, &msr_data);\n\tctxt->_eip = (efer & EFER_LMA) ? msr_data : (u32)msr_data;\n\n\tops->get_msr(ctxt, MSR_IA32_SYSENTER_ESP, &msr_data);\n\t*reg_write(ctxt, VCPU_REGS_RSP) = (efer & EFER_LMA) ? msr_data :\n\t\t\t\t\t\t\t      (u32)msr_data;\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_sysexit(struct x86_emulate_ctxt *ctxt)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tstruct desc_struct cs, ss;\n\tu64 msr_data, rcx, rdx;\n\tint usermode;\n\tu16 cs_sel = 0, ss_sel = 0;\n\n\t/* inject #GP if in real mode or Virtual 8086 mode */\n\tif (ctxt->mode == X86EMUL_MODE_REAL ||\n\t    ctxt->mode == X86EMUL_MODE_VM86)\n\t\treturn emulate_gp(ctxt, 0);\n\n\tsetup_syscalls_segments(ctxt, &cs, &ss);\n\n\tif ((ctxt->rex_prefix & 0x8) != 0x0)\n\t\tusermode = X86EMUL_MODE_PROT64;\n\telse\n\t\tusermode = X86EMUL_MODE_PROT32;\n\n\trcx = reg_read(ctxt, VCPU_REGS_RCX);\n\trdx = reg_read(ctxt, VCPU_REGS_RDX);\n\n\tcs.dpl = 3;\n\tss.dpl = 3;\n\tops->get_msr(ctxt, MSR_IA32_SYSENTER_CS, &msr_data);\n\tswitch (usermode) {\n\tcase X86EMUL_MODE_PROT32:\n\t\tcs_sel = (u16)(msr_data + 16);\n\t\tif ((msr_data & 0xfffc) == 0x0)\n\t\t\treturn emulate_gp(ctxt, 0);\n\t\tss_sel = (u16)(msr_data + 24);\n\t\trcx = (u32)rcx;\n\t\trdx = (u32)rdx;\n\t\tbreak;\n\tcase X86EMUL_MODE_PROT64:\n\t\tcs_sel = (u16)(msr_data + 32);\n\t\tif (msr_data == 0x0)\n\t\t\treturn emulate_gp(ctxt, 0);\n\t\tss_sel = cs_sel + 8;\n\t\tcs.d = 0;\n\t\tcs.l = 1;\n\t\tif (is_noncanonical_address(rcx) ||\n\t\t    is_noncanonical_address(rdx))\n\t\t\treturn emulate_gp(ctxt, 0);\n\t\tbreak;\n\t}\n\tcs_sel |= SEGMENT_RPL_MASK;\n\tss_sel |= SEGMENT_RPL_MASK;\n\n\tops->set_segment(ctxt, cs_sel, &cs, 0, VCPU_SREG_CS);\n\tops->set_segment(ctxt, ss_sel, &ss, 0, VCPU_SREG_SS);\n\n\tctxt->_eip = rdx;\n\t*reg_write(ctxt, VCPU_REGS_RSP) = rcx;\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic bool emulator_bad_iopl(struct x86_emulate_ctxt *ctxt)\n{\n\tint iopl;\n\tif (ctxt->mode == X86EMUL_MODE_REAL)\n\t\treturn false;\n\tif (ctxt->mode == X86EMUL_MODE_VM86)\n\t\treturn true;\n\tiopl = (ctxt->eflags & X86_EFLAGS_IOPL) >> X86_EFLAGS_IOPL_BIT;\n\treturn ctxt->ops->cpl(ctxt) > iopl;\n}\n\nstatic bool emulator_io_port_access_allowed(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t\t    u16 port, u16 len)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tstruct desc_struct tr_seg;\n\tu32 base3;\n\tint r;\n\tu16 tr, io_bitmap_ptr, perm, bit_idx = port & 0x7;\n\tunsigned mask = (1 << len) - 1;\n\tunsigned long base;\n\n\tops->get_segment(ctxt, &tr, &tr_seg, &base3, VCPU_SREG_TR);\n\tif (!tr_seg.p)\n\t\treturn false;\n\tif (desc_limit_scaled(&tr_seg) < 103)\n\t\treturn false;\n\tbase = get_desc_base(&tr_seg);\n#ifdef CONFIG_X86_64\n\tbase |= ((u64)base3) << 32;\n#endif\n\tr = ops->read_std(ctxt, base + 102, &io_bitmap_ptr, 2, NULL);\n\tif (r != X86EMUL_CONTINUE)\n\t\treturn false;\n\tif (io_bitmap_ptr + port/8 > desc_limit_scaled(&tr_seg))\n\t\treturn false;\n\tr = ops->read_std(ctxt, base + io_bitmap_ptr + port/8, &perm, 2, NULL);\n\tif (r != X86EMUL_CONTINUE)\n\t\treturn false;\n\tif ((perm >> bit_idx) & mask)\n\t\treturn false;\n\treturn true;\n}\n\nstatic bool emulator_io_permited(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t u16 port, u16 len)\n{\n\tif (ctxt->perm_ok)\n\t\treturn true;\n\n\tif (emulator_bad_iopl(ctxt))\n\t\tif (!emulator_io_port_access_allowed(ctxt, port, len))\n\t\t\treturn false;\n\n\tctxt->perm_ok = true;\n\n\treturn true;\n}\n\nstatic void string_registers_quirk(struct x86_emulate_ctxt *ctxt)\n{\n\t/*\n\t * Intel CPUs mask the counter and pointers in quite strange\n\t * manner when ECX is zero due to REP-string optimizations.\n\t */\n#ifdef CONFIG_X86_64\n\tif (ctxt->ad_bytes != 4 || !vendor_intel(ctxt))\n\t\treturn;\n\n\t*reg_write(ctxt, VCPU_REGS_RCX) = 0;\n\n\tswitch (ctxt->b) {\n\tcase 0xa4:\t/* movsb */\n\tcase 0xa5:\t/* movsd/w */\n\t\t*reg_rmw(ctxt, VCPU_REGS_RSI) &= (u32)-1;\n\t\t/* fall through */\n\tcase 0xaa:\t/* stosb */\n\tcase 0xab:\t/* stosd/w */\n\t\t*reg_rmw(ctxt, VCPU_REGS_RDI) &= (u32)-1;\n\t}\n#endif\n}\n\nstatic void save_state_to_tss16(struct x86_emulate_ctxt *ctxt,\n\t\t\t\tstruct tss_segment_16 *tss)\n{\n\ttss->ip = ctxt->_eip;\n\ttss->flag = ctxt->eflags;\n\ttss->ax = reg_read(ctxt, VCPU_REGS_RAX);\n\ttss->cx = reg_read(ctxt, VCPU_REGS_RCX);\n\ttss->dx = reg_read(ctxt, VCPU_REGS_RDX);\n\ttss->bx = reg_read(ctxt, VCPU_REGS_RBX);\n\ttss->sp = reg_read(ctxt, VCPU_REGS_RSP);\n\ttss->bp = reg_read(ctxt, VCPU_REGS_RBP);\n\ttss->si = reg_read(ctxt, VCPU_REGS_RSI);\n\ttss->di = reg_read(ctxt, VCPU_REGS_RDI);\n\n\ttss->es = get_segment_selector(ctxt, VCPU_SREG_ES);\n\ttss->cs = get_segment_selector(ctxt, VCPU_SREG_CS);\n\ttss->ss = get_segment_selector(ctxt, VCPU_SREG_SS);\n\ttss->ds = get_segment_selector(ctxt, VCPU_SREG_DS);\n\ttss->ldt = get_segment_selector(ctxt, VCPU_SREG_LDTR);\n}\n\nstatic int load_state_from_tss16(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t struct tss_segment_16 *tss)\n{\n\tint ret;\n\tu8 cpl;\n\n\tctxt->_eip = tss->ip;\n\tctxt->eflags = tss->flag | 2;\n\t*reg_write(ctxt, VCPU_REGS_RAX) = tss->ax;\n\t*reg_write(ctxt, VCPU_REGS_RCX) = tss->cx;\n\t*reg_write(ctxt, VCPU_REGS_RDX) = tss->dx;\n\t*reg_write(ctxt, VCPU_REGS_RBX) = tss->bx;\n\t*reg_write(ctxt, VCPU_REGS_RSP) = tss->sp;\n\t*reg_write(ctxt, VCPU_REGS_RBP) = tss->bp;\n\t*reg_write(ctxt, VCPU_REGS_RSI) = tss->si;\n\t*reg_write(ctxt, VCPU_REGS_RDI) = tss->di;\n\n\t/*\n\t * SDM says that segment selectors are loaded before segment\n\t * descriptors\n\t */\n\tset_segment_selector(ctxt, tss->ldt, VCPU_SREG_LDTR);\n\tset_segment_selector(ctxt, tss->es, VCPU_SREG_ES);\n\tset_segment_selector(ctxt, tss->cs, VCPU_SREG_CS);\n\tset_segment_selector(ctxt, tss->ss, VCPU_SREG_SS);\n\tset_segment_selector(ctxt, tss->ds, VCPU_SREG_DS);\n\n\tcpl = tss->cs & 3;\n\n\t/*\n\t * Now load segment descriptors. If fault happens at this stage\n\t * it is handled in a context of new task\n\t */\n\tret = __load_segment_descriptor(ctxt, tss->ldt, VCPU_SREG_LDTR, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = __load_segment_descriptor(ctxt, tss->es, VCPU_SREG_ES, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = __load_segment_descriptor(ctxt, tss->cs, VCPU_SREG_CS, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = __load_segment_descriptor(ctxt, tss->ss, VCPU_SREG_SS, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = __load_segment_descriptor(ctxt, tss->ds, VCPU_SREG_DS, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int task_switch_16(struct x86_emulate_ctxt *ctxt,\n\t\t\t  u16 tss_selector, u16 old_tss_sel,\n\t\t\t  ulong old_tss_base, struct desc_struct *new_desc)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tstruct tss_segment_16 tss_seg;\n\tint ret;\n\tu32 new_tss_base = get_desc_base(new_desc);\n\n\tret = ops->read_std(ctxt, old_tss_base, &tss_seg, sizeof tss_seg,\n\t\t\t    &ctxt->exception);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\n\tsave_state_to_tss16(ctxt, &tss_seg);\n\n\tret = ops->write_std(ctxt, old_tss_base, &tss_seg, sizeof tss_seg,\n\t\t\t     &ctxt->exception);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\n\tret = ops->read_std(ctxt, new_tss_base, &tss_seg, sizeof tss_seg,\n\t\t\t    &ctxt->exception);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\n\tif (old_tss_sel != 0xffff) {\n\t\ttss_seg.prev_task_link = old_tss_sel;\n\n\t\tret = ops->write_std(ctxt, new_tss_base,\n\t\t\t\t     &tss_seg.prev_task_link,\n\t\t\t\t     sizeof tss_seg.prev_task_link,\n\t\t\t\t     &ctxt->exception);\n\t\tif (ret != X86EMUL_CONTINUE)\n\t\t\treturn ret;\n\t}\n\n\treturn load_state_from_tss16(ctxt, &tss_seg);\n}\n\nstatic void save_state_to_tss32(struct x86_emulate_ctxt *ctxt,\n\t\t\t\tstruct tss_segment_32 *tss)\n{\n\t/* CR3 and ldt selector are not saved intentionally */\n\ttss->eip = ctxt->_eip;\n\ttss->eflags = ctxt->eflags;\n\ttss->eax = reg_read(ctxt, VCPU_REGS_RAX);\n\ttss->ecx = reg_read(ctxt, VCPU_REGS_RCX);\n\ttss->edx = reg_read(ctxt, VCPU_REGS_RDX);\n\ttss->ebx = reg_read(ctxt, VCPU_REGS_RBX);\n\ttss->esp = reg_read(ctxt, VCPU_REGS_RSP);\n\ttss->ebp = reg_read(ctxt, VCPU_REGS_RBP);\n\ttss->esi = reg_read(ctxt, VCPU_REGS_RSI);\n\ttss->edi = reg_read(ctxt, VCPU_REGS_RDI);\n\n\ttss->es = get_segment_selector(ctxt, VCPU_SREG_ES);\n\ttss->cs = get_segment_selector(ctxt, VCPU_SREG_CS);\n\ttss->ss = get_segment_selector(ctxt, VCPU_SREG_SS);\n\ttss->ds = get_segment_selector(ctxt, VCPU_SREG_DS);\n\ttss->fs = get_segment_selector(ctxt, VCPU_SREG_FS);\n\ttss->gs = get_segment_selector(ctxt, VCPU_SREG_GS);\n}\n\nstatic int load_state_from_tss32(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t struct tss_segment_32 *tss)\n{\n\tint ret;\n\tu8 cpl;\n\n\tif (ctxt->ops->set_cr(ctxt, 3, tss->cr3))\n\t\treturn emulate_gp(ctxt, 0);\n\tctxt->_eip = tss->eip;\n\tctxt->eflags = tss->eflags | 2;\n\n\t/* General purpose registers */\n\t*reg_write(ctxt, VCPU_REGS_RAX) = tss->eax;\n\t*reg_write(ctxt, VCPU_REGS_RCX) = tss->ecx;\n\t*reg_write(ctxt, VCPU_REGS_RDX) = tss->edx;\n\t*reg_write(ctxt, VCPU_REGS_RBX) = tss->ebx;\n\t*reg_write(ctxt, VCPU_REGS_RSP) = tss->esp;\n\t*reg_write(ctxt, VCPU_REGS_RBP) = tss->ebp;\n\t*reg_write(ctxt, VCPU_REGS_RSI) = tss->esi;\n\t*reg_write(ctxt, VCPU_REGS_RDI) = tss->edi;\n\n\t/*\n\t * SDM says that segment selectors are loaded before segment\n\t * descriptors.  This is important because CPL checks will\n\t * use CS.RPL.\n\t */\n\tset_segment_selector(ctxt, tss->ldt_selector, VCPU_SREG_LDTR);\n\tset_segment_selector(ctxt, tss->es, VCPU_SREG_ES);\n\tset_segment_selector(ctxt, tss->cs, VCPU_SREG_CS);\n\tset_segment_selector(ctxt, tss->ss, VCPU_SREG_SS);\n\tset_segment_selector(ctxt, tss->ds, VCPU_SREG_DS);\n\tset_segment_selector(ctxt, tss->fs, VCPU_SREG_FS);\n\tset_segment_selector(ctxt, tss->gs, VCPU_SREG_GS);\n\n\t/*\n\t * If we're switching between Protected Mode and VM86, we need to make\n\t * sure to update the mode before loading the segment descriptors so\n\t * that the selectors are interpreted correctly.\n\t */\n\tif (ctxt->eflags & X86_EFLAGS_VM) {\n\t\tctxt->mode = X86EMUL_MODE_VM86;\n\t\tcpl = 3;\n\t} else {\n\t\tctxt->mode = X86EMUL_MODE_PROT32;\n\t\tcpl = tss->cs & 3;\n\t}\n\n\t/*\n\t * Now load segment descriptors. If fault happenes at this stage\n\t * it is handled in a context of new task\n\t */\n\tret = __load_segment_descriptor(ctxt, tss->ldt_selector, VCPU_SREG_LDTR,\n\t\t\t\t\tcpl, X86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = __load_segment_descriptor(ctxt, tss->es, VCPU_SREG_ES, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = __load_segment_descriptor(ctxt, tss->cs, VCPU_SREG_CS, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = __load_segment_descriptor(ctxt, tss->ss, VCPU_SREG_SS, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = __load_segment_descriptor(ctxt, tss->ds, VCPU_SREG_DS, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = __load_segment_descriptor(ctxt, tss->fs, VCPU_SREG_FS, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = __load_segment_descriptor(ctxt, tss->gs, VCPU_SREG_GS, cpl,\n\t\t\t\t\tX86_TRANSFER_TASK_SWITCH, NULL);\n\n\treturn ret;\n}\n\nstatic int task_switch_32(struct x86_emulate_ctxt *ctxt,\n\t\t\t  u16 tss_selector, u16 old_tss_sel,\n\t\t\t  ulong old_tss_base, struct desc_struct *new_desc)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tstruct tss_segment_32 tss_seg;\n\tint ret;\n\tu32 new_tss_base = get_desc_base(new_desc);\n\tu32 eip_offset = offsetof(struct tss_segment_32, eip);\n\tu32 ldt_sel_offset = offsetof(struct tss_segment_32, ldt_selector);\n\n\tret = ops->read_std(ctxt, old_tss_base, &tss_seg, sizeof tss_seg,\n\t\t\t    &ctxt->exception);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\n\tsave_state_to_tss32(ctxt, &tss_seg);\n\n\t/* Only GP registers and segment selectors are saved */\n\tret = ops->write_std(ctxt, old_tss_base + eip_offset, &tss_seg.eip,\n\t\t\t     ldt_sel_offset - eip_offset, &ctxt->exception);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\n\tret = ops->read_std(ctxt, new_tss_base, &tss_seg, sizeof tss_seg,\n\t\t\t    &ctxt->exception);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\n\tif (old_tss_sel != 0xffff) {\n\t\ttss_seg.prev_task_link = old_tss_sel;\n\n\t\tret = ops->write_std(ctxt, new_tss_base,\n\t\t\t\t     &tss_seg.prev_task_link,\n\t\t\t\t     sizeof tss_seg.prev_task_link,\n\t\t\t\t     &ctxt->exception);\n\t\tif (ret != X86EMUL_CONTINUE)\n\t\t\treturn ret;\n\t}\n\n\treturn load_state_from_tss32(ctxt, &tss_seg);\n}\n\nstatic int emulator_do_task_switch(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t   u16 tss_selector, int idt_index, int reason,\n\t\t\t\t   bool has_error_code, u32 error_code)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tstruct desc_struct curr_tss_desc, next_tss_desc;\n\tint ret;\n\tu16 old_tss_sel = get_segment_selector(ctxt, VCPU_SREG_TR);\n\tulong old_tss_base =\n\t\tops->get_cached_segment_base(ctxt, VCPU_SREG_TR);\n\tu32 desc_limit;\n\tulong desc_addr, dr7;\n\n\t/* FIXME: old_tss_base == ~0 ? */\n\n\tret = read_segment_descriptor(ctxt, tss_selector, &next_tss_desc, &desc_addr);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\tret = read_segment_descriptor(ctxt, old_tss_sel, &curr_tss_desc, &desc_addr);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\n\t/* FIXME: check that next_tss_desc is tss */\n\n\t/*\n\t * Check privileges. The three cases are task switch caused by...\n\t *\n\t * 1. jmp/call/int to task gate: Check against DPL of the task gate\n\t * 2. Exception/IRQ/iret: No check is performed\n\t * 3. jmp/call to TSS/task-gate: No check is performed since the\n\t *    hardware checks it before exiting.\n\t */\n\tif (reason == TASK_SWITCH_GATE) {\n\t\tif (idt_index != -1) {\n\t\t\t/* Software interrupts */\n\t\t\tstruct desc_struct task_gate_desc;\n\t\t\tint dpl;\n\n\t\t\tret = read_interrupt_descriptor(ctxt, idt_index,\n\t\t\t\t\t\t\t&task_gate_desc);\n\t\t\tif (ret != X86EMUL_CONTINUE)\n\t\t\t\treturn ret;\n\n\t\t\tdpl = task_gate_desc.dpl;\n\t\t\tif ((tss_selector & 3) > dpl || ops->cpl(ctxt) > dpl)\n\t\t\t\treturn emulate_gp(ctxt, (idt_index << 3) | 0x2);\n\t\t}\n\t}\n\n\tdesc_limit = desc_limit_scaled(&next_tss_desc);\n\tif (!next_tss_desc.p ||\n\t    ((desc_limit < 0x67 && (next_tss_desc.type & 8)) ||\n\t     desc_limit < 0x2b)) {\n\t\treturn emulate_ts(ctxt, tss_selector & 0xfffc);\n\t}\n\n\tif (reason == TASK_SWITCH_IRET || reason == TASK_SWITCH_JMP) {\n\t\tcurr_tss_desc.type &= ~(1 << 1); /* clear busy flag */\n\t\twrite_segment_descriptor(ctxt, old_tss_sel, &curr_tss_desc);\n\t}\n\n\tif (reason == TASK_SWITCH_IRET)\n\t\tctxt->eflags = ctxt->eflags & ~X86_EFLAGS_NT;\n\n\t/* set back link to prev task only if NT bit is set in eflags\n\t   note that old_tss_sel is not used after this point */\n\tif (reason != TASK_SWITCH_CALL && reason != TASK_SWITCH_GATE)\n\t\told_tss_sel = 0xffff;\n\n\tif (next_tss_desc.type & 8)\n\t\tret = task_switch_32(ctxt, tss_selector, old_tss_sel,\n\t\t\t\t     old_tss_base, &next_tss_desc);\n\telse\n\t\tret = task_switch_16(ctxt, tss_selector, old_tss_sel,\n\t\t\t\t     old_tss_base, &next_tss_desc);\n\tif (ret != X86EMUL_CONTINUE)\n\t\treturn ret;\n\n\tif (reason == TASK_SWITCH_CALL || reason == TASK_SWITCH_GATE)\n\t\tctxt->eflags = ctxt->eflags | X86_EFLAGS_NT;\n\n\tif (reason != TASK_SWITCH_IRET) {\n\t\tnext_tss_desc.type |= (1 << 1); /* set busy flag */\n\t\twrite_segment_descriptor(ctxt, tss_selector, &next_tss_desc);\n\t}\n\n\tops->set_cr(ctxt, 0,  ops->get_cr(ctxt, 0) | X86_CR0_TS);\n\tops->set_segment(ctxt, tss_selector, &next_tss_desc, 0, VCPU_SREG_TR);\n\n\tif (has_error_code) {\n\t\tctxt->op_bytes = ctxt->ad_bytes = (next_tss_desc.type & 8) ? 4 : 2;\n\t\tctxt->lock_prefix = 0;\n\t\tctxt->src.val = (unsigned long) error_code;\n\t\tret = em_push(ctxt);\n\t}\n\n\tops->get_dr(ctxt, 7, &dr7);\n\tops->set_dr(ctxt, 7, dr7 & ~(DR_LOCAL_ENABLE_MASK | DR_LOCAL_SLOWDOWN));\n\n\treturn ret;\n}\n\nint emulator_task_switch(struct x86_emulate_ctxt *ctxt,\n\t\t\t u16 tss_selector, int idt_index, int reason,\n\t\t\t bool has_error_code, u32 error_code)\n{\n\tint rc;\n\n\tinvalidate_registers(ctxt);\n\tctxt->_eip = ctxt->eip;\n\tctxt->dst.type = OP_NONE;\n\n\trc = emulator_do_task_switch(ctxt, tss_selector, idt_index, reason,\n\t\t\t\t     has_error_code, error_code);\n\n\tif (rc == X86EMUL_CONTINUE) {\n\t\tctxt->eip = ctxt->_eip;\n\t\twriteback_registers(ctxt);\n\t}\n\n\treturn (rc == X86EMUL_UNHANDLEABLE) ? EMULATION_FAILED : EMULATION_OK;\n}\n\nstatic void string_addr_inc(struct x86_emulate_ctxt *ctxt, int reg,\n\t\tstruct operand *op)\n{\n\tint df = (ctxt->eflags & X86_EFLAGS_DF) ? -op->count : op->count;\n\n\tregister_address_increment(ctxt, reg, df * op->bytes);\n\top->addr.mem.ea = register_address(ctxt, reg);\n}\n\nstatic int em_das(struct x86_emulate_ctxt *ctxt)\n{\n\tu8 al, old_al;\n\tbool af, cf, old_cf;\n\n\tcf = ctxt->eflags & X86_EFLAGS_CF;\n\tal = ctxt->dst.val;\n\n\told_al = al;\n\told_cf = cf;\n\tcf = false;\n\taf = ctxt->eflags & X86_EFLAGS_AF;\n\tif ((al & 0x0f) > 9 || af) {\n\t\tal -= 6;\n\t\tcf = old_cf | (al >= 250);\n\t\taf = true;\n\t} else {\n\t\taf = false;\n\t}\n\tif (old_al > 0x99 || old_cf) {\n\t\tal -= 0x60;\n\t\tcf = true;\n\t}\n\n\tctxt->dst.val = al;\n\t/* Set PF, ZF, SF */\n\tctxt->src.type = OP_IMM;\n\tctxt->src.val = 0;\n\tctxt->src.bytes = 1;\n\tfastop(ctxt, em_or);\n\tctxt->eflags &= ~(X86_EFLAGS_AF | X86_EFLAGS_CF);\n\tif (cf)\n\t\tctxt->eflags |= X86_EFLAGS_CF;\n\tif (af)\n\t\tctxt->eflags |= X86_EFLAGS_AF;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_aam(struct x86_emulate_ctxt *ctxt)\n{\n\tu8 al, ah;\n\n\tif (ctxt->src.val == 0)\n\t\treturn emulate_de(ctxt);\n\n\tal = ctxt->dst.val & 0xff;\n\tah = al / ctxt->src.val;\n\tal %= ctxt->src.val;\n\n\tctxt->dst.val = (ctxt->dst.val & 0xffff0000) | al | (ah << 8);\n\n\t/* Set PF, ZF, SF */\n\tctxt->src.type = OP_IMM;\n\tctxt->src.val = 0;\n\tctxt->src.bytes = 1;\n\tfastop(ctxt, em_or);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_aad(struct x86_emulate_ctxt *ctxt)\n{\n\tu8 al = ctxt->dst.val & 0xff;\n\tu8 ah = (ctxt->dst.val >> 8) & 0xff;\n\n\tal = (al + (ah * ctxt->src.val)) & 0xff;\n\n\tctxt->dst.val = (ctxt->dst.val & 0xffff0000) | al;\n\n\t/* Set PF, ZF, SF */\n\tctxt->src.type = OP_IMM;\n\tctxt->src.val = 0;\n\tctxt->src.bytes = 1;\n\tfastop(ctxt, em_or);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_call(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc;\n\tlong rel = ctxt->src.val;\n\n\tctxt->src.val = (unsigned long)ctxt->_eip;\n\trc = jmp_rel(ctxt, rel);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\treturn em_push(ctxt);\n}\n\nstatic int em_call_far(struct x86_emulate_ctxt *ctxt)\n{\n\tu16 sel, old_cs;\n\tulong old_eip;\n\tint rc;\n\tstruct desc_struct old_desc, new_desc;\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tint cpl = ctxt->ops->cpl(ctxt);\n\tenum x86emul_mode prev_mode = ctxt->mode;\n\n\told_eip = ctxt->_eip;\n\tops->get_segment(ctxt, &old_cs, &old_desc, NULL, VCPU_SREG_CS);\n\n\tmemcpy(&sel, ctxt->src.valptr + ctxt->op_bytes, 2);\n\trc = __load_segment_descriptor(ctxt, sel, VCPU_SREG_CS, cpl,\n\t\t\t\t       X86_TRANSFER_CALL_JMP, &new_desc);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\trc = assign_eip_far(ctxt, ctxt->src.val, &new_desc);\n\tif (rc != X86EMUL_CONTINUE)\n\t\tgoto fail;\n\n\tctxt->src.val = old_cs;\n\trc = em_push(ctxt);\n\tif (rc != X86EMUL_CONTINUE)\n\t\tgoto fail;\n\n\tctxt->src.val = old_eip;\n\trc = em_push(ctxt);\n\t/* If we failed, we tainted the memory, but the very least we should\n\t   restore cs */\n\tif (rc != X86EMUL_CONTINUE) {\n\t\tpr_warn_once(\"faulting far call emulation tainted memory\\n\");\n\t\tgoto fail;\n\t}\n\treturn rc;\nfail:\n\tops->set_segment(ctxt, old_cs, &old_desc, 0, VCPU_SREG_CS);\n\tctxt->mode = prev_mode;\n\treturn rc;\n\n}\n\nstatic int em_ret_near_imm(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc;\n\tunsigned long eip;\n\n\trc = emulate_pop(ctxt, &eip, ctxt->op_bytes);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\trc = assign_eip_near(ctxt, eip);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\trsp_increment(ctxt, ctxt->src.val);\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_xchg(struct x86_emulate_ctxt *ctxt)\n{\n\t/* Write back the register source. */\n\tctxt->src.val = ctxt->dst.val;\n\twrite_register_operand(&ctxt->src);\n\n\t/* Write back the memory destination with implicit LOCK prefix. */\n\tctxt->dst.val = ctxt->src.orig_val;\n\tctxt->lock_prefix = 1;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_imul_3op(struct x86_emulate_ctxt *ctxt)\n{\n\tctxt->dst.val = ctxt->src2.val;\n\treturn fastop(ctxt, em_imul);\n}\n\nstatic int em_cwd(struct x86_emulate_ctxt *ctxt)\n{\n\tctxt->dst.type = OP_REG;\n\tctxt->dst.bytes = ctxt->src.bytes;\n\tctxt->dst.addr.reg = reg_rmw(ctxt, VCPU_REGS_RDX);\n\tctxt->dst.val = ~((ctxt->src.val >> (ctxt->src.bytes * 8 - 1)) - 1);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_rdtsc(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 tsc = 0;\n\n\tctxt->ops->get_msr(ctxt, MSR_IA32_TSC, &tsc);\n\t*reg_write(ctxt, VCPU_REGS_RAX) = (u32)tsc;\n\t*reg_write(ctxt, VCPU_REGS_RDX) = tsc >> 32;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_rdpmc(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 pmc;\n\n\tif (ctxt->ops->read_pmc(ctxt, reg_read(ctxt, VCPU_REGS_RCX), &pmc))\n\t\treturn emulate_gp(ctxt, 0);\n\t*reg_write(ctxt, VCPU_REGS_RAX) = (u32)pmc;\n\t*reg_write(ctxt, VCPU_REGS_RDX) = pmc >> 32;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_mov(struct x86_emulate_ctxt *ctxt)\n{\n\tmemcpy(ctxt->dst.valptr, ctxt->src.valptr, sizeof(ctxt->src.valptr));\n\treturn X86EMUL_CONTINUE;\n}\n\n#define FFL(x) bit(X86_FEATURE_##x)\n\nstatic int em_movbe(struct x86_emulate_ctxt *ctxt)\n{\n\tu32 ebx, ecx, edx, eax = 1;\n\tu16 tmp;\n\n\t/*\n\t * Check MOVBE is set in the guest-visible CPUID leaf.\n\t */\n\tctxt->ops->get_cpuid(ctxt, &eax, &ebx, &ecx, &edx);\n\tif (!(ecx & FFL(MOVBE)))\n\t\treturn emulate_ud(ctxt);\n\n\tswitch (ctxt->op_bytes) {\n\tcase 2:\n\t\t/*\n\t\t * From MOVBE definition: \"...When the operand size is 16 bits,\n\t\t * the upper word of the destination register remains unchanged\n\t\t * ...\"\n\t\t *\n\t\t * Both casting ->valptr and ->val to u16 breaks strict aliasing\n\t\t * rules so we have to do the operation almost per hand.\n\t\t */\n\t\ttmp = (u16)ctxt->src.val;\n\t\tctxt->dst.val &= ~0xffffUL;\n\t\tctxt->dst.val |= (unsigned long)swab16(tmp);\n\t\tbreak;\n\tcase 4:\n\t\tctxt->dst.val = swab32((u32)ctxt->src.val);\n\t\tbreak;\n\tcase 8:\n\t\tctxt->dst.val = swab64(ctxt->src.val);\n\t\tbreak;\n\tdefault:\n\t\tBUG();\n\t}\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_cr_write(struct x86_emulate_ctxt *ctxt)\n{\n\tif (ctxt->ops->set_cr(ctxt, ctxt->modrm_reg, ctxt->src.val))\n\t\treturn emulate_gp(ctxt, 0);\n\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_dr_write(struct x86_emulate_ctxt *ctxt)\n{\n\tunsigned long val;\n\n\tif (ctxt->mode == X86EMUL_MODE_PROT64)\n\t\tval = ctxt->src.val & ~0ULL;\n\telse\n\t\tval = ctxt->src.val & ~0U;\n\n\t/* #UD condition is already handled. */\n\tif (ctxt->ops->set_dr(ctxt, ctxt->modrm_reg, val) < 0)\n\t\treturn emulate_gp(ctxt, 0);\n\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_wrmsr(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 msr_data;\n\n\tmsr_data = (u32)reg_read(ctxt, VCPU_REGS_RAX)\n\t\t| ((u64)reg_read(ctxt, VCPU_REGS_RDX) << 32);\n\tif (ctxt->ops->set_msr(ctxt, reg_read(ctxt, VCPU_REGS_RCX), msr_data))\n\t\treturn emulate_gp(ctxt, 0);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_rdmsr(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 msr_data;\n\n\tif (ctxt->ops->get_msr(ctxt, reg_read(ctxt, VCPU_REGS_RCX), &msr_data))\n\t\treturn emulate_gp(ctxt, 0);\n\n\t*reg_write(ctxt, VCPU_REGS_RAX) = (u32)msr_data;\n\t*reg_write(ctxt, VCPU_REGS_RDX) = msr_data >> 32;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_mov_rm_sreg(struct x86_emulate_ctxt *ctxt)\n{\n\tif (ctxt->modrm_reg > VCPU_SREG_GS)\n\t\treturn emulate_ud(ctxt);\n\n\tctxt->dst.val = get_segment_selector(ctxt, ctxt->modrm_reg);\n\tif (ctxt->dst.bytes == 4 && ctxt->dst.type == OP_MEM)\n\t\tctxt->dst.bytes = 2;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_mov_sreg_rm(struct x86_emulate_ctxt *ctxt)\n{\n\tu16 sel = ctxt->src.val;\n\n\tif (ctxt->modrm_reg == VCPU_SREG_CS || ctxt->modrm_reg > VCPU_SREG_GS)\n\t\treturn emulate_ud(ctxt);\n\n\tif (ctxt->modrm_reg == VCPU_SREG_SS)\n\t\tctxt->interruptibility = KVM_X86_SHADOW_INT_MOV_SS;\n\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn load_segment_descriptor(ctxt, sel, ctxt->modrm_reg);\n}\n\nstatic int em_lldt(struct x86_emulate_ctxt *ctxt)\n{\n\tu16 sel = ctxt->src.val;\n\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn load_segment_descriptor(ctxt, sel, VCPU_SREG_LDTR);\n}\n\nstatic int em_ltr(struct x86_emulate_ctxt *ctxt)\n{\n\tu16 sel = ctxt->src.val;\n\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn load_segment_descriptor(ctxt, sel, VCPU_SREG_TR);\n}\n\nstatic int em_invlpg(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc;\n\tulong linear;\n\n\trc = linearize(ctxt, ctxt->src.addr.mem, 1, false, &linear);\n\tif (rc == X86EMUL_CONTINUE)\n\t\tctxt->ops->invlpg(ctxt, linear);\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_clts(struct x86_emulate_ctxt *ctxt)\n{\n\tulong cr0;\n\n\tcr0 = ctxt->ops->get_cr(ctxt, 0);\n\tcr0 &= ~X86_CR0_TS;\n\tctxt->ops->set_cr(ctxt, 0, cr0);\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_hypercall(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc = ctxt->ops->fix_hypercall(ctxt);\n\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\t/* Let the processor re-execute the fixed hypercall */\n\tctxt->_eip = ctxt->eip;\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int emulate_store_desc_ptr(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t  void (*get)(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t\t      struct desc_ptr *ptr))\n{\n\tstruct desc_ptr desc_ptr;\n\n\tif (ctxt->mode == X86EMUL_MODE_PROT64)\n\t\tctxt->op_bytes = 8;\n\tget(ctxt, &desc_ptr);\n\tif (ctxt->op_bytes == 2) {\n\t\tctxt->op_bytes = 4;\n\t\tdesc_ptr.address &= 0x00ffffff;\n\t}\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn segmented_write_std(ctxt, ctxt->dst.addr.mem,\n\t\t\t\t   &desc_ptr, 2 + ctxt->op_bytes);\n}\n\nstatic int em_sgdt(struct x86_emulate_ctxt *ctxt)\n{\n\treturn emulate_store_desc_ptr(ctxt, ctxt->ops->get_gdt);\n}\n\nstatic int em_sidt(struct x86_emulate_ctxt *ctxt)\n{\n\treturn emulate_store_desc_ptr(ctxt, ctxt->ops->get_idt);\n}\n\nstatic int em_lgdt_lidt(struct x86_emulate_ctxt *ctxt, bool lgdt)\n{\n\tstruct desc_ptr desc_ptr;\n\tint rc;\n\n\tif (ctxt->mode == X86EMUL_MODE_PROT64)\n\t\tctxt->op_bytes = 8;\n\trc = read_descriptor(ctxt, ctxt->src.addr.mem,\n\t\t\t     &desc_ptr.size, &desc_ptr.address,\n\t\t\t     ctxt->op_bytes);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\tif (ctxt->mode == X86EMUL_MODE_PROT64 &&\n\t    is_noncanonical_address(desc_ptr.address))\n\t\treturn emulate_gp(ctxt, 0);\n\tif (lgdt)\n\t\tctxt->ops->set_gdt(ctxt, &desc_ptr);\n\telse\n\t\tctxt->ops->set_idt(ctxt, &desc_ptr);\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_lgdt(struct x86_emulate_ctxt *ctxt)\n{\n\treturn em_lgdt_lidt(ctxt, true);\n}\n\nstatic int em_lidt(struct x86_emulate_ctxt *ctxt)\n{\n\treturn em_lgdt_lidt(ctxt, false);\n}\n\nstatic int em_smsw(struct x86_emulate_ctxt *ctxt)\n{\n\tif (ctxt->dst.type == OP_MEM)\n\t\tctxt->dst.bytes = 2;\n\tctxt->dst.val = ctxt->ops->get_cr(ctxt, 0);\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_lmsw(struct x86_emulate_ctxt *ctxt)\n{\n\tctxt->ops->set_cr(ctxt, 0, (ctxt->ops->get_cr(ctxt, 0) & ~0x0eul)\n\t\t\t  | (ctxt->src.val & 0x0f));\n\tctxt->dst.type = OP_NONE;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_loop(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc = X86EMUL_CONTINUE;\n\n\tregister_address_increment(ctxt, VCPU_REGS_RCX, -1);\n\tif ((address_mask(ctxt, reg_read(ctxt, VCPU_REGS_RCX)) != 0) &&\n\t    (ctxt->b == 0xe2 || test_cc(ctxt->b ^ 0x5, ctxt->eflags)))\n\t\trc = jmp_rel(ctxt, ctxt->src.val);\n\n\treturn rc;\n}\n\nstatic int em_jcxz(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc = X86EMUL_CONTINUE;\n\n\tif (address_mask(ctxt, reg_read(ctxt, VCPU_REGS_RCX)) == 0)\n\t\trc = jmp_rel(ctxt, ctxt->src.val);\n\n\treturn rc;\n}\n\nstatic int em_in(struct x86_emulate_ctxt *ctxt)\n{\n\tif (!pio_in_emulated(ctxt, ctxt->dst.bytes, ctxt->src.val,\n\t\t\t     &ctxt->dst.val))\n\t\treturn X86EMUL_IO_NEEDED;\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_out(struct x86_emulate_ctxt *ctxt)\n{\n\tctxt->ops->pio_out_emulated(ctxt, ctxt->src.bytes, ctxt->dst.val,\n\t\t\t\t    &ctxt->src.val, 1);\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_cli(struct x86_emulate_ctxt *ctxt)\n{\n\tif (emulator_bad_iopl(ctxt))\n\t\treturn emulate_gp(ctxt, 0);\n\n\tctxt->eflags &= ~X86_EFLAGS_IF;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_sti(struct x86_emulate_ctxt *ctxt)\n{\n\tif (emulator_bad_iopl(ctxt))\n\t\treturn emulate_gp(ctxt, 0);\n\n\tctxt->interruptibility = KVM_X86_SHADOW_INT_STI;\n\tctxt->eflags |= X86_EFLAGS_IF;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_cpuid(struct x86_emulate_ctxt *ctxt)\n{\n\tu32 eax, ebx, ecx, edx;\n\n\teax = reg_read(ctxt, VCPU_REGS_RAX);\n\tecx = reg_read(ctxt, VCPU_REGS_RCX);\n\tctxt->ops->get_cpuid(ctxt, &eax, &ebx, &ecx, &edx);\n\t*reg_write(ctxt, VCPU_REGS_RAX) = eax;\n\t*reg_write(ctxt, VCPU_REGS_RBX) = ebx;\n\t*reg_write(ctxt, VCPU_REGS_RCX) = ecx;\n\t*reg_write(ctxt, VCPU_REGS_RDX) = edx;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_sahf(struct x86_emulate_ctxt *ctxt)\n{\n\tu32 flags;\n\n\tflags = X86_EFLAGS_CF | X86_EFLAGS_PF | X86_EFLAGS_AF | X86_EFLAGS_ZF |\n\t\tX86_EFLAGS_SF;\n\tflags &= *reg_rmw(ctxt, VCPU_REGS_RAX) >> 8;\n\n\tctxt->eflags &= ~0xffUL;\n\tctxt->eflags |= flags | X86_EFLAGS_FIXED;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_lahf(struct x86_emulate_ctxt *ctxt)\n{\n\t*reg_rmw(ctxt, VCPU_REGS_RAX) &= ~0xff00UL;\n\t*reg_rmw(ctxt, VCPU_REGS_RAX) |= (ctxt->eflags & 0xff) << 8;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_bswap(struct x86_emulate_ctxt *ctxt)\n{\n\tswitch (ctxt->op_bytes) {\n#ifdef CONFIG_X86_64\n\tcase 8:\n\t\tasm(\"bswap %0\" : \"+r\"(ctxt->dst.val));\n\t\tbreak;\n#endif\n\tdefault:\n\t\tasm(\"bswap %0\" : \"+r\"(*(u32 *)&ctxt->dst.val));\n\t\tbreak;\n\t}\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_clflush(struct x86_emulate_ctxt *ctxt)\n{\n\t/* emulating clflush regardless of cpuid */\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int em_movsxd(struct x86_emulate_ctxt *ctxt)\n{\n\tctxt->dst.val = (s32) ctxt->src.val;\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int check_fxsr(struct x86_emulate_ctxt *ctxt)\n{\n\tu32 eax = 1, ebx, ecx = 0, edx;\n\n\tctxt->ops->get_cpuid(ctxt, &eax, &ebx, &ecx, &edx);\n\tif (!(edx & FFL(FXSR)))\n\t\treturn emulate_ud(ctxt);\n\n\tif (ctxt->ops->get_cr(ctxt, 0) & (X86_CR0_TS | X86_CR0_EM))\n\t\treturn emulate_nm(ctxt);\n\n\t/*\n\t * Don't emulate a case that should never be hit, instead of working\n\t * around a lack of fxsave64/fxrstor64 on old compilers.\n\t */\n\tif (ctxt->mode >= X86EMUL_MODE_PROT64)\n\t\treturn X86EMUL_UNHANDLEABLE;\n\n\treturn X86EMUL_CONTINUE;\n}\n\n/*\n * FXSAVE and FXRSTOR have 4 different formats depending on execution mode,\n *  1) 16 bit mode\n *  2) 32 bit mode\n *     - like (1), but FIP and FDP (foo) are only 16 bit.  At least Intel CPUs\n *       preserve whole 32 bit values, though, so (1) and (2) are the same wrt.\n *       save and restore\n *  3) 64-bit mode with REX.W prefix\n *     - like (2), but XMM 8-15 are being saved and restored\n *  4) 64-bit mode without REX.W prefix\n *     - like (3), but FIP and FDP are 64 bit\n *\n * Emulation uses (3) for (1) and (2) and preserves XMM 8-15 to reach the\n * desired result.  (4) is not emulated.\n *\n * Note: Guest and host CPUID.(EAX=07H,ECX=0H):EBX[bit 13] (deprecate FPU CS\n * and FPU DS) should match.\n */\nstatic int em_fxsave(struct x86_emulate_ctxt *ctxt)\n{\n\tstruct fxregs_state fx_state;\n\tsize_t size;\n\tint rc;\n\n\trc = check_fxsr(ctxt);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tctxt->ops->get_fpu(ctxt);\n\n\trc = asm_safe(\"fxsave %[fx]\", , [fx] \"+m\"(fx_state));\n\n\tctxt->ops->put_fpu(ctxt);\n\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tif (ctxt->ops->get_cr(ctxt, 4) & X86_CR4_OSFXSR)\n\t\tsize = offsetof(struct fxregs_state, xmm_space[8 * 16/4]);\n\telse\n\t\tsize = offsetof(struct fxregs_state, xmm_space[0]);\n\n\treturn segmented_write_std(ctxt, ctxt->memop.addr.mem, &fx_state, size);\n}\n\nstatic int fxrstor_fixup(struct x86_emulate_ctxt *ctxt,\n\t\tstruct fxregs_state *new)\n{\n\tint rc = X86EMUL_CONTINUE;\n\tstruct fxregs_state old;\n\n\trc = asm_safe(\"fxsave %[fx]\", , [fx] \"+m\"(old));\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\t/*\n\t * 64 bit host will restore XMM 8-15, which is not correct on non-64\n\t * bit guests.  Load the current values in order to preserve 64 bit\n\t * XMMs after fxrstor.\n\t */\n#ifdef CONFIG_X86_64\n\t/* XXX: accessing XMM 8-15 very awkwardly */\n\tmemcpy(&new->xmm_space[8 * 16/4], &old.xmm_space[8 * 16/4], 8 * 16);\n#endif\n\n\t/*\n\t * Hardware doesn't save and restore XMM 0-7 without CR4.OSFXSR, but\n\t * does save and restore MXCSR.\n\t */\n\tif (!(ctxt->ops->get_cr(ctxt, 4) & X86_CR4_OSFXSR))\n\t\tmemcpy(new->xmm_space, old.xmm_space, 8 * 16);\n\n\treturn rc;\n}\n\nstatic int em_fxrstor(struct x86_emulate_ctxt *ctxt)\n{\n\tstruct fxregs_state fx_state;\n\tint rc;\n\n\trc = check_fxsr(ctxt);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\trc = segmented_read_std(ctxt, ctxt->memop.addr.mem, &fx_state, 512);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\n\tif (fx_state.mxcsr >> 16)\n\t\treturn emulate_gp(ctxt, 0);\n\n\tctxt->ops->get_fpu(ctxt);\n\n\tif (ctxt->mode < X86EMUL_MODE_PROT64)\n\t\trc = fxrstor_fixup(ctxt, &fx_state);\n\n\tif (rc == X86EMUL_CONTINUE)\n\t\trc = asm_safe(\"fxrstor %[fx]\", : [fx] \"m\"(fx_state));\n\n\tctxt->ops->put_fpu(ctxt);\n\n\treturn rc;\n}\n\nstatic bool valid_cr(int nr)\n{\n\tswitch (nr) {\n\tcase 0:\n\tcase 2 ... 4:\n\tcase 8:\n\t\treturn true;\n\tdefault:\n\t\treturn false;\n\t}\n}\n\nstatic int check_cr_read(struct x86_emulate_ctxt *ctxt)\n{\n\tif (!valid_cr(ctxt->modrm_reg))\n\t\treturn emulate_ud(ctxt);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int check_cr_write(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 new_val = ctxt->src.val64;\n\tint cr = ctxt->modrm_reg;\n\tu64 efer = 0;\n\n\tstatic u64 cr_reserved_bits[] = {\n\t\t0xffffffff00000000ULL,\n\t\t0, 0, 0, /* CR3 checked later */\n\t\tCR4_RESERVED_BITS,\n\t\t0, 0, 0,\n\t\tCR8_RESERVED_BITS,\n\t};\n\n\tif (!valid_cr(cr))\n\t\treturn emulate_ud(ctxt);\n\n\tif (new_val & cr_reserved_bits[cr])\n\t\treturn emulate_gp(ctxt, 0);\n\n\tswitch (cr) {\n\tcase 0: {\n\t\tu64 cr4;\n\t\tif (((new_val & X86_CR0_PG) && !(new_val & X86_CR0_PE)) ||\n\t\t    ((new_val & X86_CR0_NW) && !(new_val & X86_CR0_CD)))\n\t\t\treturn emulate_gp(ctxt, 0);\n\n\t\tcr4 = ctxt->ops->get_cr(ctxt, 4);\n\t\tctxt->ops->get_msr(ctxt, MSR_EFER, &efer);\n\n\t\tif ((new_val & X86_CR0_PG) && (efer & EFER_LME) &&\n\t\t    !(cr4 & X86_CR4_PAE))\n\t\t\treturn emulate_gp(ctxt, 0);\n\n\t\tbreak;\n\t\t}\n\tcase 3: {\n\t\tu64 rsvd = 0;\n\n\t\tctxt->ops->get_msr(ctxt, MSR_EFER, &efer);\n\t\tif (efer & EFER_LMA)\n\t\t\trsvd = CR3_L_MODE_RESERVED_BITS & ~CR3_PCID_INVD;\n\n\t\tif (new_val & rsvd)\n\t\t\treturn emulate_gp(ctxt, 0);\n\n\t\tbreak;\n\t\t}\n\tcase 4: {\n\t\tctxt->ops->get_msr(ctxt, MSR_EFER, &efer);\n\n\t\tif ((efer & EFER_LMA) && !(new_val & X86_CR4_PAE))\n\t\t\treturn emulate_gp(ctxt, 0);\n\n\t\tbreak;\n\t\t}\n\t}\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int check_dr7_gd(struct x86_emulate_ctxt *ctxt)\n{\n\tunsigned long dr7;\n\n\tctxt->ops->get_dr(ctxt, 7, &dr7);\n\n\t/* Check if DR7.Global_Enable is set */\n\treturn dr7 & (1 << 13);\n}\n\nstatic int check_dr_read(struct x86_emulate_ctxt *ctxt)\n{\n\tint dr = ctxt->modrm_reg;\n\tu64 cr4;\n\n\tif (dr > 7)\n\t\treturn emulate_ud(ctxt);\n\n\tcr4 = ctxt->ops->get_cr(ctxt, 4);\n\tif ((cr4 & X86_CR4_DE) && (dr == 4 || dr == 5))\n\t\treturn emulate_ud(ctxt);\n\n\tif (check_dr7_gd(ctxt)) {\n\t\tulong dr6;\n\n\t\tctxt->ops->get_dr(ctxt, 6, &dr6);\n\t\tdr6 &= ~15;\n\t\tdr6 |= DR6_BD | DR6_RTM;\n\t\tctxt->ops->set_dr(ctxt, 6, dr6);\n\t\treturn emulate_db(ctxt);\n\t}\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int check_dr_write(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 new_val = ctxt->src.val64;\n\tint dr = ctxt->modrm_reg;\n\n\tif ((dr == 6 || dr == 7) && (new_val & 0xffffffff00000000ULL))\n\t\treturn emulate_gp(ctxt, 0);\n\n\treturn check_dr_read(ctxt);\n}\n\nstatic int check_svme(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 efer;\n\n\tctxt->ops->get_msr(ctxt, MSR_EFER, &efer);\n\n\tif (!(efer & EFER_SVME))\n\t\treturn emulate_ud(ctxt);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int check_svme_pa(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 rax = reg_read(ctxt, VCPU_REGS_RAX);\n\n\t/* Valid physical address? */\n\tif (rax & 0xffff000000000000ULL)\n\t\treturn emulate_gp(ctxt, 0);\n\n\treturn check_svme(ctxt);\n}\n\nstatic int check_rdtsc(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 cr4 = ctxt->ops->get_cr(ctxt, 4);\n\n\tif (cr4 & X86_CR4_TSD && ctxt->ops->cpl(ctxt))\n\t\treturn emulate_ud(ctxt);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int check_rdpmc(struct x86_emulate_ctxt *ctxt)\n{\n\tu64 cr4 = ctxt->ops->get_cr(ctxt, 4);\n\tu64 rcx = reg_read(ctxt, VCPU_REGS_RCX);\n\n\tif ((!(cr4 & X86_CR4_PCE) && ctxt->ops->cpl(ctxt)) ||\n\t    ctxt->ops->check_pmc(ctxt, rcx))\n\t\treturn emulate_gp(ctxt, 0);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int check_perm_in(struct x86_emulate_ctxt *ctxt)\n{\n\tctxt->dst.bytes = min(ctxt->dst.bytes, 4u);\n\tif (!emulator_io_permited(ctxt, ctxt->src.val, ctxt->dst.bytes))\n\t\treturn emulate_gp(ctxt, 0);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic int check_perm_out(struct x86_emulate_ctxt *ctxt)\n{\n\tctxt->src.bytes = min(ctxt->src.bytes, 4u);\n\tif (!emulator_io_permited(ctxt, ctxt->dst.val, ctxt->src.bytes))\n\t\treturn emulate_gp(ctxt, 0);\n\n\treturn X86EMUL_CONTINUE;\n}\n\n#define D(_y) { .flags = (_y) }\n#define DI(_y, _i) { .flags = (_y)|Intercept, .intercept = x86_intercept_##_i }\n#define DIP(_y, _i, _p) { .flags = (_y)|Intercept|CheckPerm, \\\n\t\t      .intercept = x86_intercept_##_i, .check_perm = (_p) }\n#define N    D(NotImpl)\n#define EXT(_f, _e) { .flags = ((_f) | RMExt), .u.group = (_e) }\n#define G(_f, _g) { .flags = ((_f) | Group | ModRM), .u.group = (_g) }\n#define GD(_f, _g) { .flags = ((_f) | GroupDual | ModRM), .u.gdual = (_g) }\n#define ID(_f, _i) { .flags = ((_f) | InstrDual | ModRM), .u.idual = (_i) }\n#define MD(_f, _m) { .flags = ((_f) | ModeDual), .u.mdual = (_m) }\n#define E(_f, _e) { .flags = ((_f) | Escape | ModRM), .u.esc = (_e) }\n#define I(_f, _e) { .flags = (_f), .u.execute = (_e) }\n#define F(_f, _e) { .flags = (_f) | Fastop, .u.fastop = (_e) }\n#define II(_f, _e, _i) \\\n\t{ .flags = (_f)|Intercept, .u.execute = (_e), .intercept = x86_intercept_##_i }\n#define IIP(_f, _e, _i, _p) \\\n\t{ .flags = (_f)|Intercept|CheckPerm, .u.execute = (_e), \\\n\t  .intercept = x86_intercept_##_i, .check_perm = (_p) }\n#define GP(_f, _g) { .flags = ((_f) | Prefix), .u.gprefix = (_g) }\n\n#define D2bv(_f)      D((_f) | ByteOp), D(_f)\n#define D2bvIP(_f, _i, _p) DIP((_f) | ByteOp, _i, _p), DIP(_f, _i, _p)\n#define I2bv(_f, _e)  I((_f) | ByteOp, _e), I(_f, _e)\n#define F2bv(_f, _e)  F((_f) | ByteOp, _e), F(_f, _e)\n#define I2bvIP(_f, _e, _i, _p) \\\n\tIIP((_f) | ByteOp, _e, _i, _p), IIP(_f, _e, _i, _p)\n\n#define F6ALU(_f, _e) F2bv((_f) | DstMem | SrcReg | ModRM, _e),\t\t\\\n\t\tF2bv(((_f) | DstReg | SrcMem | ModRM) & ~Lock, _e),\t\\\n\t\tF2bv(((_f) & ~Lock) | DstAcc | SrcImm, _e)\n\nstatic const struct opcode group7_rm0[] = {\n\tN,\n\tI(SrcNone | Priv | EmulateOnUD,\tem_hypercall),\n\tN, N, N, N, N, N,\n};\n\nstatic const struct opcode group7_rm1[] = {\n\tDI(SrcNone | Priv, monitor),\n\tDI(SrcNone | Priv, mwait),\n\tN, N, N, N, N, N,\n};\n\nstatic const struct opcode group7_rm3[] = {\n\tDIP(SrcNone | Prot | Priv,\t\tvmrun,\t\tcheck_svme_pa),\n\tII(SrcNone  | Prot | EmulateOnUD,\tem_hypercall,\tvmmcall),\n\tDIP(SrcNone | Prot | Priv,\t\tvmload,\t\tcheck_svme_pa),\n\tDIP(SrcNone | Prot | Priv,\t\tvmsave,\t\tcheck_svme_pa),\n\tDIP(SrcNone | Prot | Priv,\t\tstgi,\t\tcheck_svme),\n\tDIP(SrcNone | Prot | Priv,\t\tclgi,\t\tcheck_svme),\n\tDIP(SrcNone | Prot | Priv,\t\tskinit,\t\tcheck_svme),\n\tDIP(SrcNone | Prot | Priv,\t\tinvlpga,\tcheck_svme),\n};\n\nstatic const struct opcode group7_rm7[] = {\n\tN,\n\tDIP(SrcNone, rdtscp, check_rdtsc),\n\tN, N, N, N, N, N,\n};\n\nstatic const struct opcode group1[] = {\n\tF(Lock, em_add),\n\tF(Lock | PageTable, em_or),\n\tF(Lock, em_adc),\n\tF(Lock, em_sbb),\n\tF(Lock | PageTable, em_and),\n\tF(Lock, em_sub),\n\tF(Lock, em_xor),\n\tF(NoWrite, em_cmp),\n};\n\nstatic const struct opcode group1A[] = {\n\tI(DstMem | SrcNone | Mov | Stack | IncSP, em_pop), N, N, N, N, N, N, N,\n};\n\nstatic const struct opcode group2[] = {\n\tF(DstMem | ModRM, em_rol),\n\tF(DstMem | ModRM, em_ror),\n\tF(DstMem | ModRM, em_rcl),\n\tF(DstMem | ModRM, em_rcr),\n\tF(DstMem | ModRM, em_shl),\n\tF(DstMem | ModRM, em_shr),\n\tF(DstMem | ModRM, em_shl),\n\tF(DstMem | ModRM, em_sar),\n};\n\nstatic const struct opcode group3[] = {\n\tF(DstMem | SrcImm | NoWrite, em_test),\n\tF(DstMem | SrcImm | NoWrite, em_test),\n\tF(DstMem | SrcNone | Lock, em_not),\n\tF(DstMem | SrcNone | Lock, em_neg),\n\tF(DstXacc | Src2Mem, em_mul_ex),\n\tF(DstXacc | Src2Mem, em_imul_ex),\n\tF(DstXacc | Src2Mem, em_div_ex),\n\tF(DstXacc | Src2Mem, em_idiv_ex),\n};\n\nstatic const struct opcode group4[] = {\n\tF(ByteOp | DstMem | SrcNone | Lock, em_inc),\n\tF(ByteOp | DstMem | SrcNone | Lock, em_dec),\n\tN, N, N, N, N, N,\n};\n\nstatic const struct opcode group5[] = {\n\tF(DstMem | SrcNone | Lock,\t\tem_inc),\n\tF(DstMem | SrcNone | Lock,\t\tem_dec),\n\tI(SrcMem | NearBranch,\t\t\tem_call_near_abs),\n\tI(SrcMemFAddr | ImplicitOps,\t\tem_call_far),\n\tI(SrcMem | NearBranch,\t\t\tem_jmp_abs),\n\tI(SrcMemFAddr | ImplicitOps,\t\tem_jmp_far),\n\tI(SrcMem | Stack,\t\t\tem_push), D(Undefined),\n};\n\nstatic const struct opcode group6[] = {\n\tDI(Prot | DstMem,\tsldt),\n\tDI(Prot | DstMem,\tstr),\n\tII(Prot | Priv | SrcMem16, em_lldt, lldt),\n\tII(Prot | Priv | SrcMem16, em_ltr, ltr),\n\tN, N, N, N,\n};\n\nstatic const struct group_dual group7 = { {\n\tII(Mov | DstMem,\t\t\tem_sgdt, sgdt),\n\tII(Mov | DstMem,\t\t\tem_sidt, sidt),\n\tII(SrcMem | Priv,\t\t\tem_lgdt, lgdt),\n\tII(SrcMem | Priv,\t\t\tem_lidt, lidt),\n\tII(SrcNone | DstMem | Mov,\t\tem_smsw, smsw), N,\n\tII(SrcMem16 | Mov | Priv,\t\tem_lmsw, lmsw),\n\tII(SrcMem | ByteOp | Priv | NoAccess,\tem_invlpg, invlpg),\n}, {\n\tEXT(0, group7_rm0),\n\tEXT(0, group7_rm1),\n\tN, EXT(0, group7_rm3),\n\tII(SrcNone | DstMem | Mov,\t\tem_smsw, smsw), N,\n\tII(SrcMem16 | Mov | Priv,\t\tem_lmsw, lmsw),\n\tEXT(0, group7_rm7),\n} };\n\nstatic const struct opcode group8[] = {\n\tN, N, N, N,\n\tF(DstMem | SrcImmByte | NoWrite,\t\tem_bt),\n\tF(DstMem | SrcImmByte | Lock | PageTable,\tem_bts),\n\tF(DstMem | SrcImmByte | Lock,\t\t\tem_btr),\n\tF(DstMem | SrcImmByte | Lock | PageTable,\tem_btc),\n};\n\nstatic const struct group_dual group9 = { {\n\tN, I(DstMem64 | Lock | PageTable, em_cmpxchg8b), N, N, N, N, N, N,\n}, {\n\tN, N, N, N, N, N, N, N,\n} };\n\nstatic const struct opcode group11[] = {\n\tI(DstMem | SrcImm | Mov | PageTable, em_mov),\n\tX7(D(Undefined)),\n};\n\nstatic const struct gprefix pfx_0f_ae_7 = {\n\tI(SrcMem | ByteOp, em_clflush), N, N, N,\n};\n\nstatic const struct group_dual group15 = { {\n\tI(ModRM | Aligned16, em_fxsave),\n\tI(ModRM | Aligned16, em_fxrstor),\n\tN, N, N, N, N, GP(0, &pfx_0f_ae_7),\n}, {\n\tN, N, N, N, N, N, N, N,\n} };\n\nstatic const struct gprefix pfx_0f_6f_0f_7f = {\n\tI(Mmx, em_mov), I(Sse | Aligned, em_mov), N, I(Sse | Unaligned, em_mov),\n};\n\nstatic const struct instr_dual instr_dual_0f_2b = {\n\tI(0, em_mov), N\n};\n\nstatic const struct gprefix pfx_0f_2b = {\n\tID(0, &instr_dual_0f_2b), ID(0, &instr_dual_0f_2b), N, N,\n};\n\nstatic const struct gprefix pfx_0f_28_0f_29 = {\n\tI(Aligned, em_mov), I(Aligned, em_mov), N, N,\n};\n\nstatic const struct gprefix pfx_0f_e7 = {\n\tN, I(Sse, em_mov), N, N,\n};\n\nstatic const struct escape escape_d9 = { {\n\tN, N, N, N, N, N, N, I(DstMem16 | Mov, em_fnstcw),\n}, {\n\t/* 0xC0 - 0xC7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xC8 - 0xCF */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xD0 - 0xC7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xD8 - 0xDF */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xE0 - 0xE7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xE8 - 0xEF */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xF0 - 0xF7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xF8 - 0xFF */\n\tN, N, N, N, N, N, N, N,\n} };\n\nstatic const struct escape escape_db = { {\n\tN, N, N, N, N, N, N, N,\n}, {\n\t/* 0xC0 - 0xC7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xC8 - 0xCF */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xD0 - 0xC7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xD8 - 0xDF */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xE0 - 0xE7 */\n\tN, N, N, I(ImplicitOps, em_fninit), N, N, N, N,\n\t/* 0xE8 - 0xEF */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xF0 - 0xF7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xF8 - 0xFF */\n\tN, N, N, N, N, N, N, N,\n} };\n\nstatic const struct escape escape_dd = { {\n\tN, N, N, N, N, N, N, I(DstMem16 | Mov, em_fnstsw),\n}, {\n\t/* 0xC0 - 0xC7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xC8 - 0xCF */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xD0 - 0xC7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xD8 - 0xDF */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xE0 - 0xE7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xE8 - 0xEF */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xF0 - 0xF7 */\n\tN, N, N, N, N, N, N, N,\n\t/* 0xF8 - 0xFF */\n\tN, N, N, N, N, N, N, N,\n} };\n\nstatic const struct instr_dual instr_dual_0f_c3 = {\n\tI(DstMem | SrcReg | ModRM | No16 | Mov, em_mov), N\n};\n\nstatic const struct mode_dual mode_dual_63 = {\n\tN, I(DstReg | SrcMem32 | ModRM | Mov, em_movsxd)\n};\n\nstatic const struct opcode opcode_table[256] = {\n\t/* 0x00 - 0x07 */\n\tF6ALU(Lock, em_add),\n\tI(ImplicitOps | Stack | No64 | Src2ES, em_push_sreg),\n\tI(ImplicitOps | Stack | No64 | Src2ES, em_pop_sreg),\n\t/* 0x08 - 0x0F */\n\tF6ALU(Lock | PageTable, em_or),\n\tI(ImplicitOps | Stack | No64 | Src2CS, em_push_sreg),\n\tN,\n\t/* 0x10 - 0x17 */\n\tF6ALU(Lock, em_adc),\n\tI(ImplicitOps | Stack | No64 | Src2SS, em_push_sreg),\n\tI(ImplicitOps | Stack | No64 | Src2SS, em_pop_sreg),\n\t/* 0x18 - 0x1F */\n\tF6ALU(Lock, em_sbb),\n\tI(ImplicitOps | Stack | No64 | Src2DS, em_push_sreg),\n\tI(ImplicitOps | Stack | No64 | Src2DS, em_pop_sreg),\n\t/* 0x20 - 0x27 */\n\tF6ALU(Lock | PageTable, em_and), N, N,\n\t/* 0x28 - 0x2F */\n\tF6ALU(Lock, em_sub), N, I(ByteOp | DstAcc | No64, em_das),\n\t/* 0x30 - 0x37 */\n\tF6ALU(Lock, em_xor), N, N,\n\t/* 0x38 - 0x3F */\n\tF6ALU(NoWrite, em_cmp), N, N,\n\t/* 0x40 - 0x4F */\n\tX8(F(DstReg, em_inc)), X8(F(DstReg, em_dec)),\n\t/* 0x50 - 0x57 */\n\tX8(I(SrcReg | Stack, em_push)),\n\t/* 0x58 - 0x5F */\n\tX8(I(DstReg | Stack, em_pop)),\n\t/* 0x60 - 0x67 */\n\tI(ImplicitOps | Stack | No64, em_pusha),\n\tI(ImplicitOps | Stack | No64, em_popa),\n\tN, MD(ModRM, &mode_dual_63),\n\tN, N, N, N,\n\t/* 0x68 - 0x6F */\n\tI(SrcImm | Mov | Stack, em_push),\n\tI(DstReg | SrcMem | ModRM | Src2Imm, em_imul_3op),\n\tI(SrcImmByte | Mov | Stack, em_push),\n\tI(DstReg | SrcMem | ModRM | Src2ImmByte, em_imul_3op),\n\tI2bvIP(DstDI | SrcDX | Mov | String | Unaligned, em_in, ins, check_perm_in), /* insb, insw/insd */\n\tI2bvIP(SrcSI | DstDX | String, em_out, outs, check_perm_out), /* outsb, outsw/outsd */\n\t/* 0x70 - 0x7F */\n\tX16(D(SrcImmByte | NearBranch)),\n\t/* 0x80 - 0x87 */\n\tG(ByteOp | DstMem | SrcImm, group1),\n\tG(DstMem | SrcImm, group1),\n\tG(ByteOp | DstMem | SrcImm | No64, group1),\n\tG(DstMem | SrcImmByte, group1),\n\tF2bv(DstMem | SrcReg | ModRM | NoWrite, em_test),\n\tI2bv(DstMem | SrcReg | ModRM | Lock | PageTable, em_xchg),\n\t/* 0x88 - 0x8F */\n\tI2bv(DstMem | SrcReg | ModRM | Mov | PageTable, em_mov),\n\tI2bv(DstReg | SrcMem | ModRM | Mov, em_mov),\n\tI(DstMem | SrcNone | ModRM | Mov | PageTable, em_mov_rm_sreg),\n\tD(ModRM | SrcMem | NoAccess | DstReg),\n\tI(ImplicitOps | SrcMem16 | ModRM, em_mov_sreg_rm),\n\tG(0, group1A),\n\t/* 0x90 - 0x97 */\n\tDI(SrcAcc | DstReg, pause), X7(D(SrcAcc | DstReg)),\n\t/* 0x98 - 0x9F */\n\tD(DstAcc | SrcNone), I(ImplicitOps | SrcAcc, em_cwd),\n\tI(SrcImmFAddr | No64, em_call_far), N,\n\tII(ImplicitOps | Stack, em_pushf, pushf),\n\tII(ImplicitOps | Stack, em_popf, popf),\n\tI(ImplicitOps, em_sahf), I(ImplicitOps, em_lahf),\n\t/* 0xA0 - 0xA7 */\n\tI2bv(DstAcc | SrcMem | Mov | MemAbs, em_mov),\n\tI2bv(DstMem | SrcAcc | Mov | MemAbs | PageTable, em_mov),\n\tI2bv(SrcSI | DstDI | Mov | String, em_mov),\n\tF2bv(SrcSI | DstDI | String | NoWrite, em_cmp_r),\n\t/* 0xA8 - 0xAF */\n\tF2bv(DstAcc | SrcImm | NoWrite, em_test),\n\tI2bv(SrcAcc | DstDI | Mov | String, em_mov),\n\tI2bv(SrcSI | DstAcc | Mov | String, em_mov),\n\tF2bv(SrcAcc | DstDI | String | NoWrite, em_cmp_r),\n\t/* 0xB0 - 0xB7 */\n\tX8(I(ByteOp | DstReg | SrcImm | Mov, em_mov)),\n\t/* 0xB8 - 0xBF */\n\tX8(I(DstReg | SrcImm64 | Mov, em_mov)),\n\t/* 0xC0 - 0xC7 */\n\tG(ByteOp | Src2ImmByte, group2), G(Src2ImmByte, group2),\n\tI(ImplicitOps | NearBranch | SrcImmU16, em_ret_near_imm),\n\tI(ImplicitOps | NearBranch, em_ret),\n\tI(DstReg | SrcMemFAddr | ModRM | No64 | Src2ES, em_lseg),\n\tI(DstReg | SrcMemFAddr | ModRM | No64 | Src2DS, em_lseg),\n\tG(ByteOp, group11), G(0, group11),\n\t/* 0xC8 - 0xCF */\n\tI(Stack | SrcImmU16 | Src2ImmByte, em_enter), I(Stack, em_leave),\n\tI(ImplicitOps | SrcImmU16, em_ret_far_imm),\n\tI(ImplicitOps, em_ret_far),\n\tD(ImplicitOps), DI(SrcImmByte, intn),\n\tD(ImplicitOps | No64), II(ImplicitOps, em_iret, iret),\n\t/* 0xD0 - 0xD7 */\n\tG(Src2One | ByteOp, group2), G(Src2One, group2),\n\tG(Src2CL | ByteOp, group2), G(Src2CL, group2),\n\tI(DstAcc | SrcImmUByte | No64, em_aam),\n\tI(DstAcc | SrcImmUByte | No64, em_aad),\n\tF(DstAcc | ByteOp | No64, em_salc),\n\tI(DstAcc | SrcXLat | ByteOp, em_mov),\n\t/* 0xD8 - 0xDF */\n\tN, E(0, &escape_d9), N, E(0, &escape_db), N, E(0, &escape_dd), N, N,\n\t/* 0xE0 - 0xE7 */\n\tX3(I(SrcImmByte | NearBranch, em_loop)),\n\tI(SrcImmByte | NearBranch, em_jcxz),\n\tI2bvIP(SrcImmUByte | DstAcc, em_in,  in,  check_perm_in),\n\tI2bvIP(SrcAcc | DstImmUByte, em_out, out, check_perm_out),\n\t/* 0xE8 - 0xEF */\n\tI(SrcImm | NearBranch, em_call), D(SrcImm | ImplicitOps | NearBranch),\n\tI(SrcImmFAddr | No64, em_jmp_far),\n\tD(SrcImmByte | ImplicitOps | NearBranch),\n\tI2bvIP(SrcDX | DstAcc, em_in,  in,  check_perm_in),\n\tI2bvIP(SrcAcc | DstDX, em_out, out, check_perm_out),\n\t/* 0xF0 - 0xF7 */\n\tN, DI(ImplicitOps, icebp), N, N,\n\tDI(ImplicitOps | Priv, hlt), D(ImplicitOps),\n\tG(ByteOp, group3), G(0, group3),\n\t/* 0xF8 - 0xFF */\n\tD(ImplicitOps), D(ImplicitOps),\n\tI(ImplicitOps, em_cli), I(ImplicitOps, em_sti),\n\tD(ImplicitOps), D(ImplicitOps), G(0, group4), G(0, group5),\n};\n\nstatic const struct opcode twobyte_table[256] = {\n\t/* 0x00 - 0x0F */\n\tG(0, group6), GD(0, &group7), N, N,\n\tN, I(ImplicitOps | EmulateOnUD, em_syscall),\n\tII(ImplicitOps | Priv, em_clts, clts), N,\n\tDI(ImplicitOps | Priv, invd), DI(ImplicitOps | Priv, wbinvd), N, N,\n\tN, D(ImplicitOps | ModRM | SrcMem | NoAccess), N, N,\n\t/* 0x10 - 0x1F */\n\tN, N, N, N, N, N, N, N,\n\tD(ImplicitOps | ModRM | SrcMem | NoAccess),\n\tN, N, N, N, N, N, D(ImplicitOps | ModRM | SrcMem | NoAccess),\n\t/* 0x20 - 0x2F */\n\tDIP(ModRM | DstMem | Priv | Op3264 | NoMod, cr_read, check_cr_read),\n\tDIP(ModRM | DstMem | Priv | Op3264 | NoMod, dr_read, check_dr_read),\n\tIIP(ModRM | SrcMem | Priv | Op3264 | NoMod, em_cr_write, cr_write,\n\t\t\t\t\t\tcheck_cr_write),\n\tIIP(ModRM | SrcMem | Priv | Op3264 | NoMod, em_dr_write, dr_write,\n\t\t\t\t\t\tcheck_dr_write),\n\tN, N, N, N,\n\tGP(ModRM | DstReg | SrcMem | Mov | Sse, &pfx_0f_28_0f_29),\n\tGP(ModRM | DstMem | SrcReg | Mov | Sse, &pfx_0f_28_0f_29),\n\tN, GP(ModRM | DstMem | SrcReg | Mov | Sse, &pfx_0f_2b),\n\tN, N, N, N,\n\t/* 0x30 - 0x3F */\n\tII(ImplicitOps | Priv, em_wrmsr, wrmsr),\n\tIIP(ImplicitOps, em_rdtsc, rdtsc, check_rdtsc),\n\tII(ImplicitOps | Priv, em_rdmsr, rdmsr),\n\tIIP(ImplicitOps, em_rdpmc, rdpmc, check_rdpmc),\n\tI(ImplicitOps | EmulateOnUD, em_sysenter),\n\tI(ImplicitOps | Priv | EmulateOnUD, em_sysexit),\n\tN, N,\n\tN, N, N, N, N, N, N, N,\n\t/* 0x40 - 0x4F */\n\tX16(D(DstReg | SrcMem | ModRM)),\n\t/* 0x50 - 0x5F */\n\tN, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N,\n\t/* 0x60 - 0x6F */\n\tN, N, N, N,\n\tN, N, N, N,\n\tN, N, N, N,\n\tN, N, N, GP(SrcMem | DstReg | ModRM | Mov, &pfx_0f_6f_0f_7f),\n\t/* 0x70 - 0x7F */\n\tN, N, N, N,\n\tN, N, N, N,\n\tN, N, N, N,\n\tN, N, N, GP(SrcReg | DstMem | ModRM | Mov, &pfx_0f_6f_0f_7f),\n\t/* 0x80 - 0x8F */\n\tX16(D(SrcImm | NearBranch)),\n\t/* 0x90 - 0x9F */\n\tX16(D(ByteOp | DstMem | SrcNone | ModRM| Mov)),\n\t/* 0xA0 - 0xA7 */\n\tI(Stack | Src2FS, em_push_sreg), I(Stack | Src2FS, em_pop_sreg),\n\tII(ImplicitOps, em_cpuid, cpuid),\n\tF(DstMem | SrcReg | ModRM | BitOp | NoWrite, em_bt),\n\tF(DstMem | SrcReg | Src2ImmByte | ModRM, em_shld),\n\tF(DstMem | SrcReg | Src2CL | ModRM, em_shld), N, N,\n\t/* 0xA8 - 0xAF */\n\tI(Stack | Src2GS, em_push_sreg), I(Stack | Src2GS, em_pop_sreg),\n\tII(EmulateOnUD | ImplicitOps, em_rsm, rsm),\n\tF(DstMem | SrcReg | ModRM | BitOp | Lock | PageTable, em_bts),\n\tF(DstMem | SrcReg | Src2ImmByte | ModRM, em_shrd),\n\tF(DstMem | SrcReg | Src2CL | ModRM, em_shrd),\n\tGD(0, &group15), F(DstReg | SrcMem | ModRM, em_imul),\n\t/* 0xB0 - 0xB7 */\n\tI2bv(DstMem | SrcReg | ModRM | Lock | PageTable | SrcWrite, em_cmpxchg),\n\tI(DstReg | SrcMemFAddr | ModRM | Src2SS, em_lseg),\n\tF(DstMem | SrcReg | ModRM | BitOp | Lock, em_btr),\n\tI(DstReg | SrcMemFAddr | ModRM | Src2FS, em_lseg),\n\tI(DstReg | SrcMemFAddr | ModRM | Src2GS, em_lseg),\n\tD(DstReg | SrcMem8 | ModRM | Mov), D(DstReg | SrcMem16 | ModRM | Mov),\n\t/* 0xB8 - 0xBF */\n\tN, N,\n\tG(BitOp, group8),\n\tF(DstMem | SrcReg | ModRM | BitOp | Lock | PageTable, em_btc),\n\tI(DstReg | SrcMem | ModRM, em_bsf_c),\n\tI(DstReg | SrcMem | ModRM, em_bsr_c),\n\tD(DstReg | SrcMem8 | ModRM | Mov), D(DstReg | SrcMem16 | ModRM | Mov),\n\t/* 0xC0 - 0xC7 */\n\tF2bv(DstMem | SrcReg | ModRM | SrcWrite | Lock, em_xadd),\n\tN, ID(0, &instr_dual_0f_c3),\n\tN, N, N, GD(0, &group9),\n\t/* 0xC8 - 0xCF */\n\tX8(I(DstReg, em_bswap)),\n\t/* 0xD0 - 0xDF */\n\tN, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N,\n\t/* 0xE0 - 0xEF */\n\tN, N, N, N, N, N, N, GP(SrcReg | DstMem | ModRM | Mov, &pfx_0f_e7),\n\tN, N, N, N, N, N, N, N,\n\t/* 0xF0 - 0xFF */\n\tN, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N\n};\n\nstatic const struct instr_dual instr_dual_0f_38_f0 = {\n\tI(DstReg | SrcMem | Mov, em_movbe), N\n};\n\nstatic const struct instr_dual instr_dual_0f_38_f1 = {\n\tI(DstMem | SrcReg | Mov, em_movbe), N\n};\n\nstatic const struct gprefix three_byte_0f_38_f0 = {\n\tID(0, &instr_dual_0f_38_f0), N, N, N\n};\n\nstatic const struct gprefix three_byte_0f_38_f1 = {\n\tID(0, &instr_dual_0f_38_f1), N, N, N\n};\n\n/*\n * Insns below are selected by the prefix which indexed by the third opcode\n * byte.\n */\nstatic const struct opcode opcode_map_0f_38[256] = {\n\t/* 0x00 - 0x7f */\n\tX16(N), X16(N), X16(N), X16(N), X16(N), X16(N), X16(N), X16(N),\n\t/* 0x80 - 0xef */\n\tX16(N), X16(N), X16(N), X16(N), X16(N), X16(N), X16(N),\n\t/* 0xf0 - 0xf1 */\n\tGP(EmulateOnUD | ModRM, &three_byte_0f_38_f0),\n\tGP(EmulateOnUD | ModRM, &three_byte_0f_38_f1),\n\t/* 0xf2 - 0xff */\n\tN, N, X4(N), X8(N)\n};\n\n#undef D\n#undef N\n#undef G\n#undef GD\n#undef I\n#undef GP\n#undef EXT\n#undef MD\n#undef ID\n\n#undef D2bv\n#undef D2bvIP\n#undef I2bv\n#undef I2bvIP\n#undef I6ALU\n\nstatic unsigned imm_size(struct x86_emulate_ctxt *ctxt)\n{\n\tunsigned size;\n\n\tsize = (ctxt->d & ByteOp) ? 1 : ctxt->op_bytes;\n\tif (size == 8)\n\t\tsize = 4;\n\treturn size;\n}\n\nstatic int decode_imm(struct x86_emulate_ctxt *ctxt, struct operand *op,\n\t\t      unsigned size, bool sign_extension)\n{\n\tint rc = X86EMUL_CONTINUE;\n\n\top->type = OP_IMM;\n\top->bytes = size;\n\top->addr.mem.ea = ctxt->_eip;\n\t/* NB. Immediates are sign-extended as necessary. */\n\tswitch (op->bytes) {\n\tcase 1:\n\t\top->val = insn_fetch(s8, ctxt);\n\t\tbreak;\n\tcase 2:\n\t\top->val = insn_fetch(s16, ctxt);\n\t\tbreak;\n\tcase 4:\n\t\top->val = insn_fetch(s32, ctxt);\n\t\tbreak;\n\tcase 8:\n\t\top->val = insn_fetch(s64, ctxt);\n\t\tbreak;\n\t}\n\tif (!sign_extension) {\n\t\tswitch (op->bytes) {\n\t\tcase 1:\n\t\t\top->val &= 0xff;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\top->val &= 0xffff;\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\top->val &= 0xffffffff;\n\t\t\tbreak;\n\t\t}\n\t}\ndone:\n\treturn rc;\n}\n\nstatic int decode_operand(struct x86_emulate_ctxt *ctxt, struct operand *op,\n\t\t\t  unsigned d)\n{\n\tint rc = X86EMUL_CONTINUE;\n\n\tswitch (d) {\n\tcase OpReg:\n\t\tdecode_register_operand(ctxt, op);\n\t\tbreak;\n\tcase OpImmUByte:\n\t\trc = decode_imm(ctxt, op, 1, false);\n\t\tbreak;\n\tcase OpMem:\n\t\tctxt->memop.bytes = (ctxt->d & ByteOp) ? 1 : ctxt->op_bytes;\n\tmem_common:\n\t\t*op = ctxt->memop;\n\t\tctxt->memopp = op;\n\t\tif (ctxt->d & BitOp)\n\t\t\tfetch_bit_operand(ctxt);\n\t\top->orig_val = op->val;\n\t\tbreak;\n\tcase OpMem64:\n\t\tctxt->memop.bytes = (ctxt->op_bytes == 8) ? 16 : 8;\n\t\tgoto mem_common;\n\tcase OpAcc:\n\t\top->type = OP_REG;\n\t\top->bytes = (ctxt->d & ByteOp) ? 1 : ctxt->op_bytes;\n\t\top->addr.reg = reg_rmw(ctxt, VCPU_REGS_RAX);\n\t\tfetch_register_operand(op);\n\t\top->orig_val = op->val;\n\t\tbreak;\n\tcase OpAccLo:\n\t\top->type = OP_REG;\n\t\top->bytes = (ctxt->d & ByteOp) ? 2 : ctxt->op_bytes;\n\t\top->addr.reg = reg_rmw(ctxt, VCPU_REGS_RAX);\n\t\tfetch_register_operand(op);\n\t\top->orig_val = op->val;\n\t\tbreak;\n\tcase OpAccHi:\n\t\tif (ctxt->d & ByteOp) {\n\t\t\top->type = OP_NONE;\n\t\t\tbreak;\n\t\t}\n\t\top->type = OP_REG;\n\t\top->bytes = ctxt->op_bytes;\n\t\top->addr.reg = reg_rmw(ctxt, VCPU_REGS_RDX);\n\t\tfetch_register_operand(op);\n\t\top->orig_val = op->val;\n\t\tbreak;\n\tcase OpDI:\n\t\top->type = OP_MEM;\n\t\top->bytes = (ctxt->d & ByteOp) ? 1 : ctxt->op_bytes;\n\t\top->addr.mem.ea =\n\t\t\tregister_address(ctxt, VCPU_REGS_RDI);\n\t\top->addr.mem.seg = VCPU_SREG_ES;\n\t\top->val = 0;\n\t\top->count = 1;\n\t\tbreak;\n\tcase OpDX:\n\t\top->type = OP_REG;\n\t\top->bytes = 2;\n\t\top->addr.reg = reg_rmw(ctxt, VCPU_REGS_RDX);\n\t\tfetch_register_operand(op);\n\t\tbreak;\n\tcase OpCL:\n\t\top->type = OP_IMM;\n\t\top->bytes = 1;\n\t\top->val = reg_read(ctxt, VCPU_REGS_RCX) & 0xff;\n\t\tbreak;\n\tcase OpImmByte:\n\t\trc = decode_imm(ctxt, op, 1, true);\n\t\tbreak;\n\tcase OpOne:\n\t\top->type = OP_IMM;\n\t\top->bytes = 1;\n\t\top->val = 1;\n\t\tbreak;\n\tcase OpImm:\n\t\trc = decode_imm(ctxt, op, imm_size(ctxt), true);\n\t\tbreak;\n\tcase OpImm64:\n\t\trc = decode_imm(ctxt, op, ctxt->op_bytes, true);\n\t\tbreak;\n\tcase OpMem8:\n\t\tctxt->memop.bytes = 1;\n\t\tif (ctxt->memop.type == OP_REG) {\n\t\t\tctxt->memop.addr.reg = decode_register(ctxt,\n\t\t\t\t\tctxt->modrm_rm, true);\n\t\t\tfetch_register_operand(&ctxt->memop);\n\t\t}\n\t\tgoto mem_common;\n\tcase OpMem16:\n\t\tctxt->memop.bytes = 2;\n\t\tgoto mem_common;\n\tcase OpMem32:\n\t\tctxt->memop.bytes = 4;\n\t\tgoto mem_common;\n\tcase OpImmU16:\n\t\trc = decode_imm(ctxt, op, 2, false);\n\t\tbreak;\n\tcase OpImmU:\n\t\trc = decode_imm(ctxt, op, imm_size(ctxt), false);\n\t\tbreak;\n\tcase OpSI:\n\t\top->type = OP_MEM;\n\t\top->bytes = (ctxt->d & ByteOp) ? 1 : ctxt->op_bytes;\n\t\top->addr.mem.ea =\n\t\t\tregister_address(ctxt, VCPU_REGS_RSI);\n\t\top->addr.mem.seg = ctxt->seg_override;\n\t\top->val = 0;\n\t\top->count = 1;\n\t\tbreak;\n\tcase OpXLat:\n\t\top->type = OP_MEM;\n\t\top->bytes = (ctxt->d & ByteOp) ? 1 : ctxt->op_bytes;\n\t\top->addr.mem.ea =\n\t\t\taddress_mask(ctxt,\n\t\t\t\treg_read(ctxt, VCPU_REGS_RBX) +\n\t\t\t\t(reg_read(ctxt, VCPU_REGS_RAX) & 0xff));\n\t\top->addr.mem.seg = ctxt->seg_override;\n\t\top->val = 0;\n\t\tbreak;\n\tcase OpImmFAddr:\n\t\top->type = OP_IMM;\n\t\top->addr.mem.ea = ctxt->_eip;\n\t\top->bytes = ctxt->op_bytes + 2;\n\t\tinsn_fetch_arr(op->valptr, op->bytes, ctxt);\n\t\tbreak;\n\tcase OpMemFAddr:\n\t\tctxt->memop.bytes = ctxt->op_bytes + 2;\n\t\tgoto mem_common;\n\tcase OpES:\n\t\top->type = OP_IMM;\n\t\top->val = VCPU_SREG_ES;\n\t\tbreak;\n\tcase OpCS:\n\t\top->type = OP_IMM;\n\t\top->val = VCPU_SREG_CS;\n\t\tbreak;\n\tcase OpSS:\n\t\top->type = OP_IMM;\n\t\top->val = VCPU_SREG_SS;\n\t\tbreak;\n\tcase OpDS:\n\t\top->type = OP_IMM;\n\t\top->val = VCPU_SREG_DS;\n\t\tbreak;\n\tcase OpFS:\n\t\top->type = OP_IMM;\n\t\top->val = VCPU_SREG_FS;\n\t\tbreak;\n\tcase OpGS:\n\t\top->type = OP_IMM;\n\t\top->val = VCPU_SREG_GS;\n\t\tbreak;\n\tcase OpImplicit:\n\t\t/* Special instructions do their own operand decoding. */\n\tdefault:\n\t\top->type = OP_NONE; /* Disable writeback. */\n\t\tbreak;\n\t}\n\ndone:\n\treturn rc;\n}\n\nint x86_decode_insn(struct x86_emulate_ctxt *ctxt, void *insn, int insn_len)\n{\n\tint rc = X86EMUL_CONTINUE;\n\tint mode = ctxt->mode;\n\tint def_op_bytes, def_ad_bytes, goffset, simd_prefix;\n\tbool op_prefix = false;\n\tbool has_seg_override = false;\n\tstruct opcode opcode;\n\n\tctxt->memop.type = OP_NONE;\n\tctxt->memopp = NULL;\n\tctxt->_eip = ctxt->eip;\n\tctxt->fetch.ptr = ctxt->fetch.data;\n\tctxt->fetch.end = ctxt->fetch.data + insn_len;\n\tctxt->opcode_len = 1;\n\tif (insn_len > 0)\n\t\tmemcpy(ctxt->fetch.data, insn, insn_len);\n\telse {\n\t\trc = __do_insn_fetch_bytes(ctxt, 1);\n\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\treturn rc;\n\t}\n\n\tswitch (mode) {\n\tcase X86EMUL_MODE_REAL:\n\tcase X86EMUL_MODE_VM86:\n\tcase X86EMUL_MODE_PROT16:\n\t\tdef_op_bytes = def_ad_bytes = 2;\n\t\tbreak;\n\tcase X86EMUL_MODE_PROT32:\n\t\tdef_op_bytes = def_ad_bytes = 4;\n\t\tbreak;\n#ifdef CONFIG_X86_64\n\tcase X86EMUL_MODE_PROT64:\n\t\tdef_op_bytes = 4;\n\t\tdef_ad_bytes = 8;\n\t\tbreak;\n#endif\n\tdefault:\n\t\treturn EMULATION_FAILED;\n\t}\n\n\tctxt->op_bytes = def_op_bytes;\n\tctxt->ad_bytes = def_ad_bytes;\n\n\t/* Legacy prefixes. */\n\tfor (;;) {\n\t\tswitch (ctxt->b = insn_fetch(u8, ctxt)) {\n\t\tcase 0x66:\t/* operand-size override */\n\t\t\top_prefix = true;\n\t\t\t/* switch between 2/4 bytes */\n\t\t\tctxt->op_bytes = def_op_bytes ^ 6;\n\t\t\tbreak;\n\t\tcase 0x67:\t/* address-size override */\n\t\t\tif (mode == X86EMUL_MODE_PROT64)\n\t\t\t\t/* switch between 4/8 bytes */\n\t\t\t\tctxt->ad_bytes = def_ad_bytes ^ 12;\n\t\t\telse\n\t\t\t\t/* switch between 2/4 bytes */\n\t\t\t\tctxt->ad_bytes = def_ad_bytes ^ 6;\n\t\t\tbreak;\n\t\tcase 0x26:\t/* ES override */\n\t\tcase 0x2e:\t/* CS override */\n\t\tcase 0x36:\t/* SS override */\n\t\tcase 0x3e:\t/* DS override */\n\t\t\thas_seg_override = true;\n\t\t\tctxt->seg_override = (ctxt->b >> 3) & 3;\n\t\t\tbreak;\n\t\tcase 0x64:\t/* FS override */\n\t\tcase 0x65:\t/* GS override */\n\t\t\thas_seg_override = true;\n\t\t\tctxt->seg_override = ctxt->b & 7;\n\t\t\tbreak;\n\t\tcase 0x40 ... 0x4f: /* REX */\n\t\t\tif (mode != X86EMUL_MODE_PROT64)\n\t\t\t\tgoto done_prefixes;\n\t\t\tctxt->rex_prefix = ctxt->b;\n\t\t\tcontinue;\n\t\tcase 0xf0:\t/* LOCK */\n\t\t\tctxt->lock_prefix = 1;\n\t\t\tbreak;\n\t\tcase 0xf2:\t/* REPNE/REPNZ */\n\t\tcase 0xf3:\t/* REP/REPE/REPZ */\n\t\t\tctxt->rep_prefix = ctxt->b;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tgoto done_prefixes;\n\t\t}\n\n\t\t/* Any legacy prefix after a REX prefix nullifies its effect. */\n\n\t\tctxt->rex_prefix = 0;\n\t}\n\ndone_prefixes:\n\n\t/* REX prefix. */\n\tif (ctxt->rex_prefix & 8)\n\t\tctxt->op_bytes = 8;\t/* REX.W */\n\n\t/* Opcode byte(s). */\n\topcode = opcode_table[ctxt->b];\n\t/* Two-byte opcode? */\n\tif (ctxt->b == 0x0f) {\n\t\tctxt->opcode_len = 2;\n\t\tctxt->b = insn_fetch(u8, ctxt);\n\t\topcode = twobyte_table[ctxt->b];\n\n\t\t/* 0F_38 opcode map */\n\t\tif (ctxt->b == 0x38) {\n\t\t\tctxt->opcode_len = 3;\n\t\t\tctxt->b = insn_fetch(u8, ctxt);\n\t\t\topcode = opcode_map_0f_38[ctxt->b];\n\t\t}\n\t}\n\tctxt->d = opcode.flags;\n\n\tif (ctxt->d & ModRM)\n\t\tctxt->modrm = insn_fetch(u8, ctxt);\n\n\t/* vex-prefix instructions are not implemented */\n\tif (ctxt->opcode_len == 1 && (ctxt->b == 0xc5 || ctxt->b == 0xc4) &&\n\t    (mode == X86EMUL_MODE_PROT64 || (ctxt->modrm & 0xc0) == 0xc0)) {\n\t\tctxt->d = NotImpl;\n\t}\n\n\twhile (ctxt->d & GroupMask) {\n\t\tswitch (ctxt->d & GroupMask) {\n\t\tcase Group:\n\t\t\tgoffset = (ctxt->modrm >> 3) & 7;\n\t\t\topcode = opcode.u.group[goffset];\n\t\t\tbreak;\n\t\tcase GroupDual:\n\t\t\tgoffset = (ctxt->modrm >> 3) & 7;\n\t\t\tif ((ctxt->modrm >> 6) == 3)\n\t\t\t\topcode = opcode.u.gdual->mod3[goffset];\n\t\t\telse\n\t\t\t\topcode = opcode.u.gdual->mod012[goffset];\n\t\t\tbreak;\n\t\tcase RMExt:\n\t\t\tgoffset = ctxt->modrm & 7;\n\t\t\topcode = opcode.u.group[goffset];\n\t\t\tbreak;\n\t\tcase Prefix:\n\t\t\tif (ctxt->rep_prefix && op_prefix)\n\t\t\t\treturn EMULATION_FAILED;\n\t\t\tsimd_prefix = op_prefix ? 0x66 : ctxt->rep_prefix;\n\t\t\tswitch (simd_prefix) {\n\t\t\tcase 0x00: opcode = opcode.u.gprefix->pfx_no; break;\n\t\t\tcase 0x66: opcode = opcode.u.gprefix->pfx_66; break;\n\t\t\tcase 0xf2: opcode = opcode.u.gprefix->pfx_f2; break;\n\t\t\tcase 0xf3: opcode = opcode.u.gprefix->pfx_f3; break;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase Escape:\n\t\t\tif (ctxt->modrm > 0xbf)\n\t\t\t\topcode = opcode.u.esc->high[ctxt->modrm - 0xc0];\n\t\t\telse\n\t\t\t\topcode = opcode.u.esc->op[(ctxt->modrm >> 3) & 7];\n\t\t\tbreak;\n\t\tcase InstrDual:\n\t\t\tif ((ctxt->modrm >> 6) == 3)\n\t\t\t\topcode = opcode.u.idual->mod3;\n\t\t\telse\n\t\t\t\topcode = opcode.u.idual->mod012;\n\t\t\tbreak;\n\t\tcase ModeDual:\n\t\t\tif (ctxt->mode == X86EMUL_MODE_PROT64)\n\t\t\t\topcode = opcode.u.mdual->mode64;\n\t\t\telse\n\t\t\t\topcode = opcode.u.mdual->mode32;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn EMULATION_FAILED;\n\t\t}\n\n\t\tctxt->d &= ~(u64)GroupMask;\n\t\tctxt->d |= opcode.flags;\n\t}\n\n\t/* Unrecognised? */\n\tif (ctxt->d == 0)\n\t\treturn EMULATION_FAILED;\n\n\tctxt->execute = opcode.u.execute;\n\n\tif (unlikely(ctxt->ud) && likely(!(ctxt->d & EmulateOnUD)))\n\t\treturn EMULATION_FAILED;\n\n\tif (unlikely(ctxt->d &\n\t    (NotImpl|Stack|Op3264|Sse|Mmx|Intercept|CheckPerm|NearBranch|\n\t     No16))) {\n\t\t/*\n\t\t * These are copied unconditionally here, and checked unconditionally\n\t\t * in x86_emulate_insn.\n\t\t */\n\t\tctxt->check_perm = opcode.check_perm;\n\t\tctxt->intercept = opcode.intercept;\n\n\t\tif (ctxt->d & NotImpl)\n\t\t\treturn EMULATION_FAILED;\n\n\t\tif (mode == X86EMUL_MODE_PROT64) {\n\t\t\tif (ctxt->op_bytes == 4 && (ctxt->d & Stack))\n\t\t\t\tctxt->op_bytes = 8;\n\t\t\telse if (ctxt->d & NearBranch)\n\t\t\t\tctxt->op_bytes = 8;\n\t\t}\n\n\t\tif (ctxt->d & Op3264) {\n\t\t\tif (mode == X86EMUL_MODE_PROT64)\n\t\t\t\tctxt->op_bytes = 8;\n\t\t\telse\n\t\t\t\tctxt->op_bytes = 4;\n\t\t}\n\n\t\tif ((ctxt->d & No16) && ctxt->op_bytes == 2)\n\t\t\tctxt->op_bytes = 4;\n\n\t\tif (ctxt->d & Sse)\n\t\t\tctxt->op_bytes = 16;\n\t\telse if (ctxt->d & Mmx)\n\t\t\tctxt->op_bytes = 8;\n\t}\n\n\t/* ModRM and SIB bytes. */\n\tif (ctxt->d & ModRM) {\n\t\trc = decode_modrm(ctxt, &ctxt->memop);\n\t\tif (!has_seg_override) {\n\t\t\thas_seg_override = true;\n\t\t\tctxt->seg_override = ctxt->modrm_seg;\n\t\t}\n\t} else if (ctxt->d & MemAbs)\n\t\trc = decode_abs(ctxt, &ctxt->memop);\n\tif (rc != X86EMUL_CONTINUE)\n\t\tgoto done;\n\n\tif (!has_seg_override)\n\t\tctxt->seg_override = VCPU_SREG_DS;\n\n\tctxt->memop.addr.mem.seg = ctxt->seg_override;\n\n\t/*\n\t * Decode and fetch the source operand: register, memory\n\t * or immediate.\n\t */\n\trc = decode_operand(ctxt, &ctxt->src, (ctxt->d >> SrcShift) & OpMask);\n\tif (rc != X86EMUL_CONTINUE)\n\t\tgoto done;\n\n\t/*\n\t * Decode and fetch the second source operand: register, memory\n\t * or immediate.\n\t */\n\trc = decode_operand(ctxt, &ctxt->src2, (ctxt->d >> Src2Shift) & OpMask);\n\tif (rc != X86EMUL_CONTINUE)\n\t\tgoto done;\n\n\t/* Decode and fetch the destination operand: register or memory. */\n\trc = decode_operand(ctxt, &ctxt->dst, (ctxt->d >> DstShift) & OpMask);\n\n\tif (ctxt->rip_relative && likely(ctxt->memopp))\n\t\tctxt->memopp->addr.mem.ea = address_mask(ctxt,\n\t\t\t\t\tctxt->memopp->addr.mem.ea + ctxt->_eip);\n\ndone:\n\treturn (rc != X86EMUL_CONTINUE) ? EMULATION_FAILED : EMULATION_OK;\n}\n\nbool x86_page_table_writing_insn(struct x86_emulate_ctxt *ctxt)\n{\n\treturn ctxt->d & PageTable;\n}\n\nstatic bool string_insn_completed(struct x86_emulate_ctxt *ctxt)\n{\n\t/* The second termination condition only applies for REPE\n\t * and REPNE. Test if the repeat string operation prefix is\n\t * REPE/REPZ or REPNE/REPNZ and if it's the case it tests the\n\t * corresponding termination condition according to:\n\t * \t- if REPE/REPZ and ZF = 0 then done\n\t * \t- if REPNE/REPNZ and ZF = 1 then done\n\t */\n\tif (((ctxt->b == 0xa6) || (ctxt->b == 0xa7) ||\n\t     (ctxt->b == 0xae) || (ctxt->b == 0xaf))\n\t    && (((ctxt->rep_prefix == REPE_PREFIX) &&\n\t\t ((ctxt->eflags & X86_EFLAGS_ZF) == 0))\n\t\t|| ((ctxt->rep_prefix == REPNE_PREFIX) &&\n\t\t    ((ctxt->eflags & X86_EFLAGS_ZF) == X86_EFLAGS_ZF))))\n\t\treturn true;\n\n\treturn false;\n}\n\nstatic int flush_pending_x87_faults(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc;\n\n\tctxt->ops->get_fpu(ctxt);\n\trc = asm_safe(\"fwait\");\n\tctxt->ops->put_fpu(ctxt);\n\n\tif (unlikely(rc != X86EMUL_CONTINUE))\n\t\treturn emulate_exception(ctxt, MF_VECTOR, 0, false);\n\n\treturn X86EMUL_CONTINUE;\n}\n\nstatic void fetch_possible_mmx_operand(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t       struct operand *op)\n{\n\tif (op->type == OP_MM)\n\t\tread_mmx_reg(ctxt, &op->mm_val, op->addr.mm);\n}\n\nstatic int fastop(struct x86_emulate_ctxt *ctxt, void (*fop)(struct fastop *))\n{\n\tregister void *__sp asm(_ASM_SP);\n\tulong flags = (ctxt->eflags & EFLAGS_MASK) | X86_EFLAGS_IF;\n\n\tif (!(ctxt->d & ByteOp))\n\t\tfop += __ffs(ctxt->dst.bytes) * FASTOP_SIZE;\n\n\tasm(\"push %[flags]; popf; call *%[fastop]; pushf; pop %[flags]\\n\"\n\t    : \"+a\"(ctxt->dst.val), \"+d\"(ctxt->src.val), [flags]\"+D\"(flags),\n\t      [fastop]\"+S\"(fop), \"+r\"(__sp)\n\t    : \"c\"(ctxt->src2.val));\n\n\tctxt->eflags = (ctxt->eflags & ~EFLAGS_MASK) | (flags & EFLAGS_MASK);\n\tif (!fop) /* exception is returned in fop variable */\n\t\treturn emulate_de(ctxt);\n\treturn X86EMUL_CONTINUE;\n}\n\nvoid init_decode_cache(struct x86_emulate_ctxt *ctxt)\n{\n\tmemset(&ctxt->rip_relative, 0,\n\t       (void *)&ctxt->modrm - (void *)&ctxt->rip_relative);\n\n\tctxt->io_read.pos = 0;\n\tctxt->io_read.end = 0;\n\tctxt->mem_read.end = 0;\n}\n\nint x86_emulate_insn(struct x86_emulate_ctxt *ctxt)\n{\n\tconst struct x86_emulate_ops *ops = ctxt->ops;\n\tint rc = X86EMUL_CONTINUE;\n\tint saved_dst_type = ctxt->dst.type;\n\n\tctxt->mem_read.pos = 0;\n\n\t/* LOCK prefix is allowed only with some instructions */\n\tif (ctxt->lock_prefix && (!(ctxt->d & Lock) || ctxt->dst.type != OP_MEM)) {\n\t\trc = emulate_ud(ctxt);\n\t\tgoto done;\n\t}\n\n\tif ((ctxt->d & SrcMask) == SrcMemFAddr && ctxt->src.type != OP_MEM) {\n\t\trc = emulate_ud(ctxt);\n\t\tgoto done;\n\t}\n\n\tif (unlikely(ctxt->d &\n\t\t     (No64|Undefined|Sse|Mmx|Intercept|CheckPerm|Priv|Prot|String))) {\n\t\tif ((ctxt->mode == X86EMUL_MODE_PROT64 && (ctxt->d & No64)) ||\n\t\t\t\t(ctxt->d & Undefined)) {\n\t\t\trc = emulate_ud(ctxt);\n\t\t\tgoto done;\n\t\t}\n\n\t\tif (((ctxt->d & (Sse|Mmx)) && ((ops->get_cr(ctxt, 0) & X86_CR0_EM)))\n\t\t    || ((ctxt->d & Sse) && !(ops->get_cr(ctxt, 4) & X86_CR4_OSFXSR))) {\n\t\t\trc = emulate_ud(ctxt);\n\t\t\tgoto done;\n\t\t}\n\n\t\tif ((ctxt->d & (Sse|Mmx)) && (ops->get_cr(ctxt, 0) & X86_CR0_TS)) {\n\t\t\trc = emulate_nm(ctxt);\n\t\t\tgoto done;\n\t\t}\n\n\t\tif (ctxt->d & Mmx) {\n\t\t\trc = flush_pending_x87_faults(ctxt);\n\t\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\t\tgoto done;\n\t\t\t/*\n\t\t\t * Now that we know the fpu is exception safe, we can fetch\n\t\t\t * operands from it.\n\t\t\t */\n\t\t\tfetch_possible_mmx_operand(ctxt, &ctxt->src);\n\t\t\tfetch_possible_mmx_operand(ctxt, &ctxt->src2);\n\t\t\tif (!(ctxt->d & Mov))\n\t\t\t\tfetch_possible_mmx_operand(ctxt, &ctxt->dst);\n\t\t}\n\n\t\tif (unlikely(ctxt->emul_flags & X86EMUL_GUEST_MASK) && ctxt->intercept) {\n\t\t\trc = emulator_check_intercept(ctxt, ctxt->intercept,\n\t\t\t\t\t\t      X86_ICPT_PRE_EXCEPT);\n\t\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\t\tgoto done;\n\t\t}\n\n\t\t/* Instruction can only be executed in protected mode */\n\t\tif ((ctxt->d & Prot) && ctxt->mode < X86EMUL_MODE_PROT16) {\n\t\t\trc = emulate_ud(ctxt);\n\t\t\tgoto done;\n\t\t}\n\n\t\t/* Privileged instruction can be executed only in CPL=0 */\n\t\tif ((ctxt->d & Priv) && ops->cpl(ctxt)) {\n\t\t\tif (ctxt->d & PrivUD)\n\t\t\t\trc = emulate_ud(ctxt);\n\t\t\telse\n\t\t\t\trc = emulate_gp(ctxt, 0);\n\t\t\tgoto done;\n\t\t}\n\n\t\t/* Do instruction specific permission checks */\n\t\tif (ctxt->d & CheckPerm) {\n\t\t\trc = ctxt->check_perm(ctxt);\n\t\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\t\tgoto done;\n\t\t}\n\n\t\tif (unlikely(ctxt->emul_flags & X86EMUL_GUEST_MASK) && (ctxt->d & Intercept)) {\n\t\t\trc = emulator_check_intercept(ctxt, ctxt->intercept,\n\t\t\t\t\t\t      X86_ICPT_POST_EXCEPT);\n\t\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\t\tgoto done;\n\t\t}\n\n\t\tif (ctxt->rep_prefix && (ctxt->d & String)) {\n\t\t\t/* All REP prefixes have the same first termination condition */\n\t\t\tif (address_mask(ctxt, reg_read(ctxt, VCPU_REGS_RCX)) == 0) {\n\t\t\t\tstring_registers_quirk(ctxt);\n\t\t\t\tctxt->eip = ctxt->_eip;\n\t\t\t\tctxt->eflags &= ~X86_EFLAGS_RF;\n\t\t\t\tgoto done;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ((ctxt->src.type == OP_MEM) && !(ctxt->d & NoAccess)) {\n\t\trc = segmented_read(ctxt, ctxt->src.addr.mem,\n\t\t\t\t    ctxt->src.valptr, ctxt->src.bytes);\n\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\tgoto done;\n\t\tctxt->src.orig_val64 = ctxt->src.val64;\n\t}\n\n\tif (ctxt->src2.type == OP_MEM) {\n\t\trc = segmented_read(ctxt, ctxt->src2.addr.mem,\n\t\t\t\t    &ctxt->src2.val, ctxt->src2.bytes);\n\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\tgoto done;\n\t}\n\n\tif ((ctxt->d & DstMask) == ImplicitOps)\n\t\tgoto special_insn;\n\n\n\tif ((ctxt->dst.type == OP_MEM) && !(ctxt->d & Mov)) {\n\t\t/* optimisation - avoid slow emulated read if Mov */\n\t\trc = segmented_read(ctxt, ctxt->dst.addr.mem,\n\t\t\t\t   &ctxt->dst.val, ctxt->dst.bytes);\n\t\tif (rc != X86EMUL_CONTINUE) {\n\t\t\tif (!(ctxt->d & NoWrite) &&\n\t\t\t    rc == X86EMUL_PROPAGATE_FAULT &&\n\t\t\t    ctxt->exception.vector == PF_VECTOR)\n\t\t\t\tctxt->exception.error_code |= PFERR_WRITE_MASK;\n\t\t\tgoto done;\n\t\t}\n\t}\n\t/* Copy full 64-bit value for CMPXCHG8B.  */\n\tctxt->dst.orig_val64 = ctxt->dst.val64;\n\nspecial_insn:\n\n\tif (unlikely(ctxt->emul_flags & X86EMUL_GUEST_MASK) && (ctxt->d & Intercept)) {\n\t\trc = emulator_check_intercept(ctxt, ctxt->intercept,\n\t\t\t\t\t      X86_ICPT_POST_MEMACCESS);\n\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\tgoto done;\n\t}\n\n\tif (ctxt->rep_prefix && (ctxt->d & String))\n\t\tctxt->eflags |= X86_EFLAGS_RF;\n\telse\n\t\tctxt->eflags &= ~X86_EFLAGS_RF;\n\n\tif (ctxt->execute) {\n\t\tif (ctxt->d & Fastop) {\n\t\t\tvoid (*fop)(struct fastop *) = (void *)ctxt->execute;\n\t\t\trc = fastop(ctxt, fop);\n\t\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\t\tgoto done;\n\t\t\tgoto writeback;\n\t\t}\n\t\trc = ctxt->execute(ctxt);\n\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\tgoto done;\n\t\tgoto writeback;\n\t}\n\n\tif (ctxt->opcode_len == 2)\n\t\tgoto twobyte_insn;\n\telse if (ctxt->opcode_len == 3)\n\t\tgoto threebyte_insn;\n\n\tswitch (ctxt->b) {\n\tcase 0x70 ... 0x7f: /* jcc (short) */\n\t\tif (test_cc(ctxt->b, ctxt->eflags))\n\t\t\trc = jmp_rel(ctxt, ctxt->src.val);\n\t\tbreak;\n\tcase 0x8d: /* lea r16/r32, m */\n\t\tctxt->dst.val = ctxt->src.addr.mem.ea;\n\t\tbreak;\n\tcase 0x90 ... 0x97: /* nop / xchg reg, rax */\n\t\tif (ctxt->dst.addr.reg == reg_rmw(ctxt, VCPU_REGS_RAX))\n\t\t\tctxt->dst.type = OP_NONE;\n\t\telse\n\t\t\trc = em_xchg(ctxt);\n\t\tbreak;\n\tcase 0x98: /* cbw/cwde/cdqe */\n\t\tswitch (ctxt->op_bytes) {\n\t\tcase 2: ctxt->dst.val = (s8)ctxt->dst.val; break;\n\t\tcase 4: ctxt->dst.val = (s16)ctxt->dst.val; break;\n\t\tcase 8: ctxt->dst.val = (s32)ctxt->dst.val; break;\n\t\t}\n\t\tbreak;\n\tcase 0xcc:\t\t/* int3 */\n\t\trc = emulate_int(ctxt, 3);\n\t\tbreak;\n\tcase 0xcd:\t\t/* int n */\n\t\trc = emulate_int(ctxt, ctxt->src.val);\n\t\tbreak;\n\tcase 0xce:\t\t/* into */\n\t\tif (ctxt->eflags & X86_EFLAGS_OF)\n\t\t\trc = emulate_int(ctxt, 4);\n\t\tbreak;\n\tcase 0xe9: /* jmp rel */\n\tcase 0xeb: /* jmp rel short */\n\t\trc = jmp_rel(ctxt, ctxt->src.val);\n\t\tctxt->dst.type = OP_NONE; /* Disable writeback. */\n\t\tbreak;\n\tcase 0xf4:              /* hlt */\n\t\tctxt->ops->halt(ctxt);\n\t\tbreak;\n\tcase 0xf5:\t/* cmc */\n\t\t/* complement carry flag from eflags reg */\n\t\tctxt->eflags ^= X86_EFLAGS_CF;\n\t\tbreak;\n\tcase 0xf8: /* clc */\n\t\tctxt->eflags &= ~X86_EFLAGS_CF;\n\t\tbreak;\n\tcase 0xf9: /* stc */\n\t\tctxt->eflags |= X86_EFLAGS_CF;\n\t\tbreak;\n\tcase 0xfc: /* cld */\n\t\tctxt->eflags &= ~X86_EFLAGS_DF;\n\t\tbreak;\n\tcase 0xfd: /* std */\n\t\tctxt->eflags |= X86_EFLAGS_DF;\n\t\tbreak;\n\tdefault:\n\t\tgoto cannot_emulate;\n\t}\n\n\tif (rc != X86EMUL_CONTINUE)\n\t\tgoto done;\n\nwriteback:\n\tif (ctxt->d & SrcWrite) {\n\t\tBUG_ON(ctxt->src.type == OP_MEM || ctxt->src.type == OP_MEM_STR);\n\t\trc = writeback(ctxt, &ctxt->src);\n\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\tgoto done;\n\t}\n\tif (!(ctxt->d & NoWrite)) {\n\t\trc = writeback(ctxt, &ctxt->dst);\n\t\tif (rc != X86EMUL_CONTINUE)\n\t\t\tgoto done;\n\t}\n\n\t/*\n\t * restore dst type in case the decoding will be reused\n\t * (happens for string instruction )\n\t */\n\tctxt->dst.type = saved_dst_type;\n\n\tif ((ctxt->d & SrcMask) == SrcSI)\n\t\tstring_addr_inc(ctxt, VCPU_REGS_RSI, &ctxt->src);\n\n\tif ((ctxt->d & DstMask) == DstDI)\n\t\tstring_addr_inc(ctxt, VCPU_REGS_RDI, &ctxt->dst);\n\n\tif (ctxt->rep_prefix && (ctxt->d & String)) {\n\t\tunsigned int count;\n\t\tstruct read_cache *r = &ctxt->io_read;\n\t\tif ((ctxt->d & SrcMask) == SrcSI)\n\t\t\tcount = ctxt->src.count;\n\t\telse\n\t\t\tcount = ctxt->dst.count;\n\t\tregister_address_increment(ctxt, VCPU_REGS_RCX, -count);\n\n\t\tif (!string_insn_completed(ctxt)) {\n\t\t\t/*\n\t\t\t * Re-enter guest when pio read ahead buffer is empty\n\t\t\t * or, if it is not used, after each 1024 iteration.\n\t\t\t */\n\t\t\tif ((r->end != 0 || reg_read(ctxt, VCPU_REGS_RCX) & 0x3ff) &&\n\t\t\t    (r->end == 0 || r->end != r->pos)) {\n\t\t\t\t/*\n\t\t\t\t * Reset read cache. Usually happens before\n\t\t\t\t * decode, but since instruction is restarted\n\t\t\t\t * we have to do it here.\n\t\t\t\t */\n\t\t\t\tctxt->mem_read.end = 0;\n\t\t\t\twriteback_registers(ctxt);\n\t\t\t\treturn EMULATION_RESTART;\n\t\t\t}\n\t\t\tgoto done; /* skip rip writeback */\n\t\t}\n\t\tctxt->eflags &= ~X86_EFLAGS_RF;\n\t}\n\n\tctxt->eip = ctxt->_eip;\n\ndone:\n\tif (rc == X86EMUL_PROPAGATE_FAULT) {\n\t\tWARN_ON(ctxt->exception.vector > 0x1f);\n\t\tctxt->have_exception = true;\n\t}\n\tif (rc == X86EMUL_INTERCEPTED)\n\t\treturn EMULATION_INTERCEPTED;\n\n\tif (rc == X86EMUL_CONTINUE)\n\t\twriteback_registers(ctxt);\n\n\treturn (rc == X86EMUL_UNHANDLEABLE) ? EMULATION_FAILED : EMULATION_OK;\n\ntwobyte_insn:\n\tswitch (ctxt->b) {\n\tcase 0x09:\t\t/* wbinvd */\n\t\t(ctxt->ops->wbinvd)(ctxt);\n\t\tbreak;\n\tcase 0x08:\t\t/* invd */\n\tcase 0x0d:\t\t/* GrpP (prefetch) */\n\tcase 0x18:\t\t/* Grp16 (prefetch/nop) */\n\tcase 0x1f:\t\t/* nop */\n\t\tbreak;\n\tcase 0x20: /* mov cr, reg */\n\t\tctxt->dst.val = ops->get_cr(ctxt, ctxt->modrm_reg);\n\t\tbreak;\n\tcase 0x21: /* mov from dr to reg */\n\t\tops->get_dr(ctxt, ctxt->modrm_reg, &ctxt->dst.val);\n\t\tbreak;\n\tcase 0x40 ... 0x4f:\t/* cmov */\n\t\tif (test_cc(ctxt->b, ctxt->eflags))\n\t\t\tctxt->dst.val = ctxt->src.val;\n\t\telse if (ctxt->op_bytes != 4)\n\t\t\tctxt->dst.type = OP_NONE; /* no writeback */\n\t\tbreak;\n\tcase 0x80 ... 0x8f: /* jnz rel, etc*/\n\t\tif (test_cc(ctxt->b, ctxt->eflags))\n\t\t\trc = jmp_rel(ctxt, ctxt->src.val);\n\t\tbreak;\n\tcase 0x90 ... 0x9f:     /* setcc r/m8 */\n\t\tctxt->dst.val = test_cc(ctxt->b, ctxt->eflags);\n\t\tbreak;\n\tcase 0xb6 ... 0xb7:\t/* movzx */\n\t\tctxt->dst.bytes = ctxt->op_bytes;\n\t\tctxt->dst.val = (ctxt->src.bytes == 1) ? (u8) ctxt->src.val\n\t\t\t\t\t\t       : (u16) ctxt->src.val;\n\t\tbreak;\n\tcase 0xbe ... 0xbf:\t/* movsx */\n\t\tctxt->dst.bytes = ctxt->op_bytes;\n\t\tctxt->dst.val = (ctxt->src.bytes == 1) ? (s8) ctxt->src.val :\n\t\t\t\t\t\t\t(s16) ctxt->src.val;\n\t\tbreak;\n\tdefault:\n\t\tgoto cannot_emulate;\n\t}\n\nthreebyte_insn:\n\n\tif (rc != X86EMUL_CONTINUE)\n\t\tgoto done;\n\n\tgoto writeback;\n\ncannot_emulate:\n\treturn EMULATION_FAILED;\n}\n\nvoid emulator_invalidate_register_cache(struct x86_emulate_ctxt *ctxt)\n{\n\tinvalidate_registers(ctxt);\n}\n\nvoid emulator_writeback_register_cache(struct x86_emulate_ctxt *ctxt)\n{\n\twriteback_registers(ctxt);\n}\n"], "filenames": ["arch/x86/kvm/emulate.c"], "buggy_code_start_loc": [1588], "buggy_code_end_loc": [1753], "fixing_code_start_loc": [1587], "fixing_code_end_loc": [1782], "type": "NVD-CWE-noinfo", "message": "The load_segment_descriptor implementation in arch/x86/kvm/emulate.c in the Linux kernel before 4.9.5 improperly emulates a \"MOV SS, NULL selector\" instruction, which allows guest OS users to cause a denial of service (guest OS crash) or gain guest OS privileges via a crafted application.", "other": {"cve": {"id": "CVE-2017-2583", "sourceIdentifier": "secalert@redhat.com", "published": "2017-02-06T06:59:00.387", "lastModified": "2023-02-12T23:29:01.743", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The load_segment_descriptor implementation in arch/x86/kvm/emulate.c in the Linux kernel before 4.9.5 improperly emulates a \"MOV SS, NULL selector\" instruction, which allows guest OS users to cause a denial of service (guest OS crash) or gain guest OS privileges via a crafted application."}, {"lang": "es", "value": "La implementaci\u00f3n de load_segment_descriptor en arc/x86/kvm/emulate.c en el kernel de Linux en versiones anteriores a 4.9.5 emula indebidamente una instrucci\u00f3n \"MOV SS, NULL selector\", lo que permite a usuarios del SO invitado provocar una denegaci\u00f3n de servicio (ca\u00edda del SO invitado) u obteniendo privilegios de SO invitado a trav\u00e9s de una aplicaci\u00f3n manipulada."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.4, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.5, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.9.4", "matchCriteriaId": "7C19DB2D-DE85-4140-817A-D010708EB355"}]}]}], "references": [{"url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=33ab91103b3415e12457e3104f0e4517ce12d0f3", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "http://www.debian.org/security/2017/dsa-3791", "source": "secalert@redhat.com"}, {"url": "http://www.kernel.org/pub/linux/kernel/v4.x/ChangeLog-4.9.5", "source": "secalert@redhat.com", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2017/01/19/2", "source": "secalert@redhat.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/95673", "source": "secalert@redhat.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://access.redhat.com/errata/RHSA-2017:1615", "source": "secalert@redhat.com"}, {"url": "https://access.redhat.com/errata/RHSA-2017:1616", "source": "secalert@redhat.com"}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1414735", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Patch"]}, {"url": "https://github.com/torvalds/linux/commit/33ab91103b3415e12457e3104f0e4517ce12d0f3", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/3754-1/", "source": "secalert@redhat.com"}]}, "github_commit_url": "https://github.com/torvalds/linux/commit/33ab91103b3415e12457e3104f0e4517ce12d0f3"}}