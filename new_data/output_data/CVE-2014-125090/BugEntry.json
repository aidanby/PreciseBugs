{"buggy_code": ["<?php\r\n// Load WordPress \"framework\"\r\nrequire_once('../../../wp-load.php');\r\n\r\n// Calculate file path\r\n$file = urldecode( $_GET['f'] );\r\n$file = str_replace( get_option( 'siteurl' ), '', $file );\r\n$relURL=str_replace( 'http'.(isset($_SERVER['HTTPS'])?'s':'').'://'.$_SERVER['SERVER_NAME'], '', get_option( 'siteurl' ) );\r\n$filepath = ABSPATH . str_replace( $relURL, '', $file ) . '.mp3';\r\nif(substr($file,0,1)=='/') $file=substr($file,1);\r\n// Serve file\r\ndl_file_resumable($filepath);\r\n\r\n// Resumable Download ( From: http://www.php.net/fread )\r\nfunction dl_file_resumable($file, $is_resume=TRUE)\r\n{\r\n    //First, see if the file exists\r\n    if ( !is_file($file) && ( $file = stripslashes( $file ) ) && !is_file($file) )\r\n    {\r\n        die(\"<b>404 File not found! <!-- $file --></b>\");\r\n    }\r\n\r\n    //Gather relevent info about file\r\n    $size = filesize($file);\r\n    $fileinfo = pathinfo($file);\r\n    \r\n    //workaround for IE filename bug with multiple periods / multiple dots in filename\r\n    //that adds square brackets to filename - eg. setup.abc.exe becomes setup[1].abc.exe\r\n    $filename = (strstr($_SERVER['HTTP_USER_AGENT'], 'MSIE')) ?\r\n                  preg_replace('/\\./', '%2e', $fileinfo['basename'], substr_count($fileinfo['basename'], '.') - 1) :\r\n                  $fileinfo['basename'];\r\n    \r\n    $file_extension = strtolower($fileinfo['extension']);\r\n\r\n    //This will set the Content-Type to the appropriate setting for the file\r\n    switch($file_extension)\r\n    {\r\n        case 'exe': $ctype='application/octet-stream'; break;\r\n        case 'zip': $ctype='application/zip'; break;\r\n        case 'mp3': $ctype='audio/mpeg'; break;\r\n        case 'mpg': $ctype='video/mpeg'; break;\r\n        case 'avi': $ctype='video/x-msvideo'; break;\r\n        default:    $ctype='application/force-download';\r\n    }\r\n\r\n    //check if http_range is sent by browser (or download manager)\r\n    if($is_resume && isset($_SERVER['HTTP_RANGE']))\r\n    {\r\n        list($size_unit, $range_orig) = explode('=', $_SERVER['HTTP_RANGE'], 2);\r\n\r\n        if ($size_unit == 'bytes')\r\n        {\r\n            //multiple ranges could be specified at the same time, but for simplicity only serve the first range\r\n            //http://tools.ietf.org/id/draft-ietf-http-range-retrieval-00.txt\r\n            list($range, $extra_ranges) = explode(',', $range_orig, 2);\r\n        }\r\n        else\r\n        {\r\n            $range = '';\r\n        }\r\n    }\r\n    else\r\n    {\r\n        $range = '';\r\n    }\r\n\r\n    //figure out download piece from range (if set)\r\n    list($seek_start, $seek_end) = explode('-', $range, 2);\r\n\r\n    //set start and end based on range (if set), else set defaults\r\n    //also check for invalid ranges.\r\n    $seek_end = (empty($seek_end)) ? ($size - 1) : min(abs(intval($seek_end)),($size - 1));\r\n    $seek_start = (empty($seek_start) || $seek_end < abs(intval($seek_start))) ? 0 : max(abs(intval($seek_start)),0);\r\n\r\n    //add headers if resumable\r\n    if ($is_resume)\r\n    {\r\n        //Only send partial content header if downloading a piece of the file (IE workaround)\r\n        if ($seek_start > 0 || $seek_end < ($size - 1))\r\n        {\r\n            header('HTTP/1.1 206 Partial Content');\r\n        }\r\n\r\n        header('Accept-Ranges: bytes');\r\n        header('Content-Range: bytes '.$seek_start.'-'.$seek_end.'/'.$size);\r\n    }\r\n\r\n    //headers for IE Bugs (is this necessary?)\r\n    //header(\"Cache-Control: cache, must-revalidate\");   \r\n    //header(\"Pragma: public\");\r\n\r\n    header('Content-Type: ' . $ctype);\r\n    header('Content-Disposition: attachment; filename=\"' . $filename . '\"');\r\n    header('Content-Length: '.($seek_end - $seek_start + 1));\r\n\r\n    //open the file\r\n    $fp = fopen($file, 'rb');\r\n    //seek to start of missing part\r\n    fseek($fp, $seek_start);\r\n\r\n    //start buffered download\r\n    while(!feof($fp))\r\n    {\r\n        //reset time limit for big files\r\n        set_time_limit(0);\r\n        print(fread($fp, 1024*8));\r\n        flush();\r\n        ob_flush();\r\n    }\r\n\r\n    fclose($fp);\r\n    exit;\r\n}\r\n\r\n\r\n?>\r\n", "<?php\r\n/*\r\nPlugin Name: Media Downloader\r\nPlugin URI: http://ederson.peka.nom.br\r\nDescription: Media Downloader plugin lists MP3 files from a folder by replacing the [media] smarttag.\r\nVersion: 0.1.992\r\nAuthor: Ederson Peka\r\nAuthor URI: http://ederson.peka.nom.br\r\n*/\r\n\r\n// Possible encodings\r\n$mdencodings = array( 'UTF-8', 'ISO-8859-1', 'ISO-8859-15', 'cp866', 'cp1251', 'cp1252', 'KOI8-R', 'BIG5', 'GB2312', 'BIG5-HKSCS', 'Shift_JIS', 'EUC-JP' );\r\n$md_comp_encs = array();\r\nforeach ( $mdencodings as $mdenc ) if ( 'ISO-8859-1'!=$mdenc ) $md_comp_encs[] = 'ISO-8859-1 + '.$mdenc;\r\n$mdencodings = array_merge( $mdencodings, $md_comp_encs );\r\n// Possible fields by which file list should be sorted,\r\n// and respective sorting functions\r\n$mdsortingfields = array(\r\n    'none' => null,\r\n    'title' => 'orderByTitle',\r\n    'file date' => 'orderByFileDate',\r\n    'recording dates' => 'orderByRecordingDates',\r\n    'year' => 'orderByYear',\r\n    'track number' => 'orderByTrackNumber',\r\n    'album' => 'orderByAlbum',\r\n    'artist' => 'orderByArtist',\r\n    'file size' => 'orderByFileSize',\r\n    'sample rate' => 'orderBySampleRate',\r\n);\r\n// Settings and respective sanitize functions\r\n$mdsettings = array(\r\n    'mp3folder' => 'sanitizeRDir',\r\n    'mediaextensions' => 'sanitizeMediaExtensions',\r\n    'sortfiles' => 'sanitizeSortingField',\r\n    'reversefiles' => 'sanitizeBoolean',\r\n    'showtags' => null,\r\n    'customcss' => null,\r\n    'removeextension' => 'sanitizeBoolean',\r\n    'showcover' => 'sanitizeBoolean',\r\n    'packageextensions' => null,\r\n    'embedplayer' => 'sanitizeBoolean',\r\n    'embedwhere' => 'sanitizeBeforeAfter',\r\n    'tagencoding' => 'sanitizeTagEncoding',\r\n    'filenameencoding' => 'sanitizeTagEncoding',\r\n    'cachedir' => 'sanitizeWDir',\r\n    'scriptinfooter' => 'sanitizeBoolean',\r\n    'handlefeed' => 'sanitizeBoolean',\r\n    'overwritefeedlink' => 'sanitizeURL',\r\n    'calculateprefix' => 'sanitizeBoolean',\r\n);\r\n// Possible ID3 tags\r\n$mdtags = array( 'title', 'artist', 'album', 'year', 'recording_dates', 'genre', 'comment', 'track_number', 'bitrate', 'filesize', 'filedate', 'directory', 'file', 'sample_rate' );\r\n\r\n// Markup settings and respective sanitize functions\r\n$mdmarkupsettings = array(\r\n    'covermarkup' => null,\r\n    'packagetitle' => null,\r\n    'packagetexts' => null,\r\n    'downloadtext' => null,\r\n    'playtext' => null,\r\n    'stoptext' => null,\r\n    'replaceheaders' => null,\r\n    'markuptemplate' => 'sanitizeMarkupTemplate',\r\n);\r\n// Possible markup templates\r\n$mdmarkuptemplates = array(\r\n    'definition-list' => '<strong>\"DL\" mode:</strong> One table cell containing a definition list (one definition term for each tag)',\r\n    'table-cells' => '<strong>\"TR\" mode:</strong> One table cell for each tag'\r\n);\r\n\r\n// Default player colors\r\n$mdembedplayerdefaultcolors = array(\r\n    'bg' => 'E7E7E7',\r\n    'text' => '333333',\r\n    'leftbg' => 'CCCCCC',\r\n    'lefticon' => '333333',\r\n    'volslider' => '666666',\r\n    'voltrack' => 'FFFFFF',\r\n    'rightbg' => 'B4B4B4',\r\n    'rightbghover' => '999999',\r\n    'righticon' => '333333',\r\n    'righticonhover' => 'FFFFFF',\r\n    'track' => 'FFFFFF',\r\n    'loader' => 'A2CC39',\r\n    'border' => 'CCCCCC',\r\n    'tracker' => 'DDDDDD',\r\n    'skip' => '666666',\r\n);\r\n\r\n// Pre-2.6 compatibility ( From: http://codex.wordpress.org/Determining_Plugin_and_Content_Directories )\r\nif ( ! defined( 'WP_CONTENT_URL' ) )\r\n      define( 'WP_CONTENT_URL', get_option( 'siteurl' ) . '/wp-content' );\r\nif ( ! defined( 'WP_CONTENT_DIR' ) )\r\n      define( 'WP_CONTENT_DIR', ABSPATH . 'wp-content' );\r\nif ( ! defined( 'WP_PLUGIN_URL' ) )\r\n      define( 'WP_PLUGIN_URL', WP_CONTENT_URL. '/plugins' );\r\nif ( ! defined( 'WP_PLUGIN_DIR' ) )\r\n      define( 'WP_PLUGIN_DIR', WP_CONTENT_DIR . '/plugins' );\r\n\r\n// MarkDown, used for text formatting\r\nif( !function_exists( 'Markdown' ) ) include_once( \"markdown/markdown.php\" );\r\n\r\n// Friendly file size\r\nif( !function_exists( 'byte_convert' ) ){\r\n    function byte_convert( $bytes ){\r\n        $symbol = array( 'B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB' );\r\n\r\n        $exp = 0;\r\n        $converted_value = 0;\r\n        if( $bytes > 0 )\r\n        {\r\n          $exp = floor( log($bytes)/log(1024) );\r\n          $converted_value = ( $bytes/pow(1024,floor($exp)) );\r\n        }\r\n\r\n        return sprintf( '%.2f '.$symbol[$exp], $converted_value );\r\n    }\r\n}\r\n\r\n// Friendly frequency size\r\nif( !function_exists( 'hertz_convert' ) ){\r\n    function hertz_convert( $hertz ){\r\n        $symbol = array( 'Hz', 'kHz', 'MHz', 'GHz', 'THz', 'PHz', 'EHz', 'ZHz', 'YHz' );\r\n\r\n        $exp = 0;\r\n        $converted_value = 0;\r\n        if( $hertz > 0 ) {\r\n          $exp = floor( log( $hertz, 10 ) / 3 );\r\n          $converted_value = ( $hertz / pow( 1000 , floor( $exp ) ) );\r\n        }\r\n\r\n        return sprintf( '%.2f '.$symbol[$exp], $converted_value );\r\n    }\r\n}\r\n\r\n// Scans an array of strings searching for a common prefix in all items\r\nfunction calculatePrefix($arr){\r\n    $prefix = '';\r\n    if ( get_option( 'calculateprefix' ) && count( $arr ) > 1 ) {\r\n        $prefix = strip_tags( array_pop( $arr ) );\r\n        foreach ( $arr as $i ) {\r\n            for ( $c=1; $c<strlen($i); $c++ ) {\r\n                if ( strncasecmp( $prefix, $i, $c ) != 0 ) break;\r\n            }\r\n            $prefix = substr( $prefix, 0, $c-1 );\r\n        }\r\n    }\r\n    return $prefix;\r\n}\r\n\r\nfunction replaceUnderscores( $t ) {\r\n    if ( $t && false === strpos(' ', $t) ) {\r\n        //if ( false === strpos('_', $t) ) $t = str_replace( '-', '_', $t );\r\n        $t = preg_replace( '/_(_+)/i', ' - ', $t );\r\n        $t = str_replace( '_', ' ', $t );\r\n    }\r\n    return $t ;\r\n}\r\n\r\nfunction get_replaceheaders() {\r\n    $replaceheaders = array();\r\n    $arrreplaceheaders = explode( \"\\n\", trim( get_option( 'replaceheaders' ) ) );\r\n    foreach ( $arrreplaceheaders as $line ) {\r\n        $arrline = explode( ':', trim( $line ) );\r\n        if ( count( $arrline ) >= 2 ) $replaceheaders[ strtolower( trim( array_shift( $arrline ) ) ) ] = implode( ':', $arrline );\r\n    }\r\n    return $replaceheaders;\r\n}\r\n\r\nfunction md_mediaAllExtensions() {\r\n    return array( 'mp3', 'mp2', 'mp1', 'ogg', 'wma', 'm4a', 'aac', 'ac3', 'flac', 'ra', 'rm', 'wav', 'aiff', 'cda', 'mid', 'avi', 'webm', 'asf', 'wmv', 'mpg', 'avi', 'qt', 'mov', 'ogv', 'mp4', '3gp' );\r\n}\r\nfunction md_mediaExtensions() {\r\n    $ret = get_option( 'mediaextensions' );\r\n    if ( ! ( is_array( $ret ) && count( $ret ) ) ) $ret = array( 'mp3' );\r\n    return $ret;\r\n}\r\n\r\nfunction md_packageExtensions() {\r\n    $ret = explode( ',', get_option( 'packageextensions' ) );\r\n    foreach ( $ret as &$r ) $r = str_replace( '.', '', $r );\r\n    return array_filter( $ret );\r\n}\r\n\r\n// Searches post content for our smarttag and do all the magic\r\nfunction listMedia( $t ){\r\n    global $mdtags, $tagvalues, $mdsortingfields, $mdmarkuptemplates;\r\n    $errors = array();\r\n\r\n    // MP3 folder\r\n    $mdir = '/' . get_option( 'mp3folder' );\r\n    // MP3 folder URL\r\n    if ( function_exists( 'switch_to_blog' ) ) switch_to_blog(1);\r\n    $murl = get_option( 'siteurl' ) . $mdir;\r\n    if ( function_exists( 'restore_current_blog' ) ) restore_current_blog();\r\n    // MP3 folder relative URL\r\n    $mrelative = str_replace('http'.(isset($_SERVER['HTTPS'])?'s':'').'://','',$murl); $mrelative = explode( '/', $mrelative ); array_shift($mrelative); $mrelative = '/'.implode('/', $mrelative);\r\n    $mpath = ABSPATH . substr($mdir, 1);\r\n    \r\n    // Should we show the 'cover' file ('folder.jpg')?\r\n    $mshowcover = get_option( 'showcover' );\r\n\r\n    // Player position (before or after download link)\r\n    $membedwhere = get_option( 'embedwhere' );\r\n\r\n    // Should we re-encode the tags?\r\n    $mdoencode = get_option( 'tagencoding' );\r\n    if ( !$mdoencode ) $mdoencode = 'UTF-8';\r\n    $mdoencode = array_pop( explode( ' + ', $mdoencode ) );\r\n\r\n    // Should we re-encode the file names?\r\n    $mdofnencode = get_option( 'filenameencoding' );\r\n    if ( !$mdofnencode ) $mdofnencode = 'UTF-8';\r\n    $mdofnencode = array_pop( explode( ' + ', $mdofnencode ) );\r\n    \r\n    // How should we sort the files?\r\n    $msort = get_option( 'sortfiles' );\r\n    // \"Backward compatibilaziness\": it used to be a boolean value\r\n    if ( isset( $msort ) && !array_key_exists( $msort . '', $mdsortingfields ) ) $msort = 'title';\r\n\r\n    // Should the sorting be reversed?\r\n    $mreverse = ( get_option( 'reversefiles' ) == true );\r\n\r\n    // Which tags to show?\r\n    $option_showtags = str_replace( 'comments', 'comment', get_option( 'showtags' ) );\r\n    $mshowtags = array_intersect( explode( ',', $option_showtags ), $mdtags );\r\n    // If none, shows the first tag (title)\r\n    if ( !count($mshowtags) ) $mshowtags = array( $mdtags[0] );\r\n    \r\n    // Markup options\r\n    $covermarkup = get_option( 'covermarkup' );\r\n    $downloadtext = get_option( 'downloadtext' );\r\n    $playtext = get_option( 'playtext' );\r\n    $stoptext = get_option( 'stoptext' );\r\n    $replaceheaders = get_replaceheaders();\r\n    $markuptemplate = get_option( 'markuptemplate' );\r\n    if ( !sanitizeMarkupTemplate( $markuptemplate ) ) $markuptemplate = array_shift( array_keys( $mdmarkuptemplates ) ); // Default: first option\r\n\r\n    // Searching for our smarttags\r\n    $t = preg_replace( '/<p>\\[media:([^\\]]*)\\]<\\/p>/i', '[media:$1]', $t );\r\n    preg_match_all( '/\\[media:([^\\]]*)\\]/i', $t, $matches );\r\n    // Any?\r\n    if ( count( $matches ) ) {\r\n        // Each...\r\n        foreach ( $matches[1] as $folder ) {\r\n            $cover = '';\r\n            // Removing paragraph\r\n            $t = str_replace('<p>[media:'.$folder.']</p>', '[media:'.$folder.']', $t);\r\n            // Initializing variables\r\n            $ihtml = '';\r\n            $iall = array();\r\n            $ifiles = array();\r\n            $ititles = array();\r\n            $ipath = $mpath . '/' . $folder;\r\n            // Populating arrays with respective files\r\n            if ( is_dir( $ipath ) ) {\r\n                $folderalone = $folder;\r\n                if ( is_readable( $ipath ) ) {\r\n                    $idir = dir( $ipath );\r\n                    while ( false !== ( $ifile = $idir->read() ) ) if ( !is_dir( $ifile ) ) {\r\n                        $arrfile = explode( '.', $ifile );\r\n                        if ( count( $arrfile ) > 1 ) {\r\n                            $fext = array_pop( $arrfile );\r\n                        } else {\r\n                            $fext = '.none';\r\n                        }\r\n                        if ( in_array( $fext, md_mediaExtensions() ) ) {\r\n                            $ifiles[] = $ifile;\r\n                        } else {\r\n                            if ( !array_key_exists( $fext, $iall ) ) $iall[$fext] = array();\r\n                            $iall[$fext][] = $ifile;\r\n                        }\r\n                        if ( strtolower( str_ireplace( '.jpeg', '.jpg', $ifile ) ) == 'folder.jpg' ) $cover = $ifile;\r\n                    }\r\n                } else {\r\n                    $errors[] = sprintf( _md( 'Could not read: %1$s' ), $ipath );\r\n                }\r\n            } elseif ( file_exists( $ipath ) && is_readable( $ipath ) ) {\r\n                $folderalone = implode( '/', array_slice( explode( '/', $folder ), 0, -1 ) );\r\n                $apath = explode( '/', $ipath );\r\n                $ifile = array_pop( $apath );\r\n                $arrfile = explode( '.', $ifile );\r\n                if ( count( $arrfile ) > 1 ) {\r\n                    $fext = array_pop( $arrfile );\r\n                } else {\r\n                    $fext = '.none';\r\n                }\r\n                if ( in_array( $fext, md_mediaExtensions() ) ) {\r\n                    $ifiles[] = $ifile;\r\n                } else {\r\n                    if ( !array_key_exists( $fext, $iall ) ) $iall[$fext] = array();\r\n                    $iall[$fext][] = $ifile;\r\n                }\r\n                $ipath = implode( '/', $apath );\r\n            }\r\n            // Encoding folder name\r\n            $pfolder = array_filter( explode( '/', $folderalone ) );\r\n            foreach( $pfolder as $p ) $p = rawurlencode( $p );\r\n            $ufolder = implode( '/', $pfolder );\r\n            if ( $ufolder ) {\r\n                $afolder = explode( '/', $ufolder );\r\n                foreach ( $afolder as &$alevel ) $alevel = rawurlencode( $alevel );\r\n                unset( $alevel );\r\n                $ufolder = implode( '/', $afolder );\r\n            }\r\n            \r\n            $countextra = 0;\r\n            foreach ( md_packageExtensions() as $pext ) $countextra += count( $iall[$pext] );\r\n            if ( ( $mshowcover && $cover ) || $countextra ) {\r\n                $ihtml .= '<div class=\"md_albumInfo\">';\r\n\r\n                if ( $mshowcover && $cover ) {\r\n                    $coversrc = network_home_url($mdir) . '/' . ( $ufolder ? $ufolder . '/' : '' ) . $cover;\r\n                    $icovermarkup = $covermarkup ? $covermarkup : '<img class=\"md_coverImage\" src=\"[coverimage]\" alt=\"' . _md( 'Album Cover' ) . '\" />';\r\n                    $ihtml .= str_replace( '[coverimage]', $coversrc, $icovermarkup );\r\n                }\r\n\r\n                // If any \"extra\" files, inserting an extra table\r\n                // (this was very case specific and remained here)\r\n                if ( $countextra ) {\r\n                    $packagetitle = get_option( 'packagetitle' );\r\n                    $packagetexts = get_option( 'packagetexts' );\r\n                    if ( !$packagetexts ) $packagetexts = array();\r\n                    $ihtml .= '<div class=\"md_wholebook\">';\r\n                    if ( $packagetitle ) $ihtml .= '<h3 class=\"md_wholebook_title\">' . $packagetitle . '</h3>';\r\n                    $afolder = explode( '/', $folderalone );\r\n                    for ( $a=0; $a<count($afolder); $a++ ) $afolder[$a] = rawurlencode( $afolder[$a] );\r\n                    $cfolder = implode( '/', $afolder );\r\n                    $ihtml .= '<ul class=\"md_wholebook_list\">';\r\n                    foreach ( md_packageExtensions() as $pext ) {\r\n                        $cpf = 0; if ( count( $iall[$pext] ) ) foreach( $iall[$pext] as $pf ) {\r\n                            $cpf++;\r\n                            $ptext = _md( 'Download ' . strtoupper( $pext ) );\r\n                            if ( array_key_exists( $pext, $packagetexts ) && $packagetexts[$pext] ) {\r\n                                $ptext = str_replace( '[filename]', $pf, $packagetexts[$pext] );\r\n                            }\r\n                            $ihtml .= '<li class=\"d' . strtoupper(substr($pext,0,1)) . substr($pext,1) . '\"><a href=\"'.$mrelative.($mrelative!='/'?'/':'').($cfolder).'/'.rawurlencode( $pf ).'\" title=\"' . esc_attr( $pf ) . '\">'.$ptext.(count($iall[$pext])>1?' ('.$cpf.')':'').'</a></li>' ;\r\n                        }\r\n                    }\r\n                    $ihtml .= '</ul>';\r\n                    $ihtml .= '</div>';\r\n                }\r\n\r\n                $ihtml .= '</div>';\r\n            }\r\n\r\n            // Any MP3 file?\r\n            if ( count( $ifiles ) ) {\r\n                // Calculating file \"prefixes\"\r\n                $prefix = calculatePrefix( $ifiles );\r\n                $hlevel = explode( '/', $folder ); $hlevel = array_pop( $hlevel );\r\n\r\n                // Initializing array of tag values\r\n                $tagvalues = array();\r\n                foreach ( $mshowtags as $mshowtag ) $tagvalues[$mshowtag] = array();\r\n                $alltags = array();\r\n                foreach ( $ifiles as $ifile ) {\r\n                    $ifile = explode( '.', $ifile );\r\n                    $iext = array_pop( $ifile );\r\n                    $ifile = implode( '.', $ifile );\r\n                    // Getting ID3 info\r\n                    $finfo = mediadownloaderFileInfo( $mrelative.'/'.$folderalone.'/'.$ifile, $iext );\r\n                    // Loading all possible tags\r\n                    $ftags = array();\r\n                    foreach ( array( 'id3v2', 'quicktime', 'ogg', 'asf', 'flac', 'real', 'riff', 'ape', 'id3v1', 'comments' ) as $poss ) {\r\n                        if ( is_array( $finfo['tags'] ) && array_key_exists( $poss, $finfo['tags'] ) ) {\r\n                            $ftags = array_merge( $finfo['tags'][$poss], $ftags );\r\n                            if ( array_key_exists( 'comments', $finfo['tags'][$poss] ) ) {\r\n                                $ftags = array_merge( $finfo['tags'][$poss]['comments'], $ftags );\r\n                            }\r\n                        }\r\n                    }\r\n                    $ftags['bitrate'] = array( floatval( $finfo['audio']['bitrate'] ) / 1000 . 'kbps' );\r\n                    $ftags['filesize'] = array( byte_convert( $finfo['filesize'] ) );\r\n                    $ftags['filedate'] = array( date_i18n( get_option('date_format'), filemtime( $finfo['filepath'] . '/' . $finfo['filename'] ) ) );\r\n                    $ftags['directory'] = array( $hlevel );\r\n                    $ftags['file'] = array( $ifile );\r\n                    $ftags['sample_rate'] = array( hertz_convert( intval( '0' . $finfo['audio']['sample_rate'] ) ) );\r\n                    unset( $finfo );\r\n                    $alltags[$ifile] = $ftags;\r\n                    // Populating array of tag values with all tags\r\n                    foreach ( $mdtags as $mshowtag )\r\n                        if ( 'comment' == $mshowtag ) {\r\n                            if ( array_key_exists( 'text', $ftags ) && is_array( $ftags['text'] ) && trim( strip_tags( $ftags['text'][0] ) ) ) {\r\n                                $tagvalues[$mshowtag][$ifile.'.'.$iext] = $ftags['text'][0];\r\n                            } else {\r\n                                $tagvalues[$mshowtag][$ifile.'.'.$iext] = Markdown( $ftags[$mshowtag][0] );\r\n                            }\r\n                        } else {\r\n                            $tagvalues[$mshowtag][$ifile.'.'.$iext] = $ftags[$mshowtag][0];\r\n                        }\r\n                    unset( $ftags );\r\n                }\r\n                // Calculating tag \"prefixes\"\r\n                $tagprefixes = array();\r\n                foreach ( $mshowtags as $mshowtag )\r\n                    if ( 'file' == $mshowtag || 'title' == $mshowtag )\r\n                        $tagprefixes[$mshowtag] = calculatePrefix( $tagvalues[$mshowtag] );\r\n                // If set, sorting array\r\n                if ( $msort != 'none' ) {\r\n                    sort( $ifiles );\r\n                    uasort( $ifiles, $mdsortingfields[$msort] );\r\n                }\r\n                // If set, reversing array\r\n                if ( $mreverse ) $ifiles = array_reverse( $ifiles );\r\n\r\n                $tablecellsmode_header = '';\r\n                $tablecellsmode_firstfile = true;\r\n                // Building markup for each file...\r\n                foreach ( $ifiles as $ifile ) {\r\n                    $ifile = explode( '.', $ifile );\r\n                    $iext = array_pop( $ifile );\r\n                    $ifile = implode( '.', $ifile );\r\n                    $ititle = '';\r\n                    // Each tag list item\r\n                    foreach ( $mshowtags as $mshowtag ) {\r\n                        $tagvalue = $tagvalues[$mshowtag][$ifile.'.'.$iext];\r\n                        if ( '' == $tagvalue ) {\r\n                            $tagvalue = '&nbsp;';\r\n                        } else {\r\n                            // Removing \"prefix\" of this tag\r\n                            if ( '' != $tagprefixes[$mshowtag] )\r\n                                $tagvalue = str_replace( $tagprefixes[$mshowtag], '', $tagvalue );\r\n                            // $tagvalue = str_replace( $prefix, '', $tagvalue ); // Causing weird behavior in some cases\r\n                            // Cleaning...\r\n                            $tagvalue = replaceUnderscores( $tagvalue );\r\n                            // Encoding...\r\n                            if ( 'file' == $mshowtag || 'directory' == $mshowtag ) {\r\n                                if ( $mdofnencode != 'UTF-8' ) $tagvalue = iconv( $mdofnencode, 'UTF-8', $tagvalue );\r\n                            } elseif ( 'recording_dates' == $mshowtag ) {\r\n                                if ( $tagtime = strtotime( $tagvalue ) ) {\r\n                                    $tagvalue = date_i18n( get_option('date_format'), $tagtime );\r\n                                } else {\r\n                                    $tagvalue = '';\r\n                                }\r\n                            } elseif ( $mdoencode != 'UTF-8' ) {\r\n                                $tagvalue = iconv( $mdoencode, 'UTF-8', $tagvalue );\r\n                            }\r\n                        }\r\n                        // Item markup\r\n                        $columnheader = ucwords( _md( $mshowtag ) );\r\n                        if ( array_key_exists( $mshowtag, $replaceheaders ) ) $columnheader = $replaceheaders[$mshowtag];\r\n                        if ( 'table-cells' == $markuptemplate ) {\r\n                            // For \"table cells\" markup template,\r\n                            // we store a \"row with headers\", so it\r\n                            // just needs to run once\r\n                            if ( $tablecellsmode_firstfile ) {\r\n                                $tablecellsmode_header .= '<th class=\"mdTag'.$mshowtag.'\">'.$columnheader.'</th>' ;\r\n                            }\r\n                            $ititle .= '<td class=\"mdTag'.$mshowtag.'\">'.$tagvalue.'</td>' ;\r\n                        } elseif ( 'definition-list' == $markuptemplate )  {\r\n                            $ititle .= '<dt class=\"mdTag'.$mshowtag.'\">'.$columnheader.':</dt>' ;\r\n                            $ititle .= '<dd class=\"mdTag'.$mshowtag.'\">'.$tagvalue.'</dd>' ;\r\n                        }\r\n                    }\r\n                    // List markup (if any item)\r\n                    if ( '' != $ititle ) {\r\n                        if ( 'definition-list' == $markuptemplate ) {\r\n                            $ititle = '<dl class=\"mdTags\">' . $ititle . '</dl>' ;\r\n                        }\r\n                    }\r\n                    $ititles[$ifile] = $ititle ;\r\n                    // \"Row with headers\" is stored already,\r\n                    // so skip the task next iteration\r\n                    $tablecellsmode_firstfile = false;\r\n                }\r\n\r\n                // Building general markup\r\n                $tableClass = array( 'mediaTable' );\r\n                if ( TRUE == get_option( 'embedplayer' ) ) $tableClass[] = 'embedPlayer';\r\n                $tableClass[] = 'embedpos' . $membedwhere ;\r\n                $ihtml .= '<table class=\"' . implode( ' ', $tableClass ) . '\">' . \"\\n\";\r\n                $ihtml .= \"<thead>\\n<tr>\\n\";\r\n                if ( 'table-cells' == $markuptemplate ) {\r\n                    $ihtml .= $tablecellsmode_header;\r\n                } elseif ( 'definition-list' == $markuptemplate ) {\r\n                    $ihtml .= \"\\n\" . '<th class=\"mediaTitle\">&nbsp;</th>' . \"\\n\";\r\n                }\r\n                $downloadheader = _md( 'Download' );\r\n                if ( array_key_exists( 'download', $replaceheaders ) ) $downloadheader = $replaceheaders['download'];\r\n                $ihtml .= '<th class=\"mediaDownload\">'.$downloadheader.'</th>\r\n</tr>\r\n</thead>\r\n<tbody>';\r\n\r\n\r\n                // Each file...\r\n                foreach ( $ifiles as $ifile ) {\r\n                    $ifile = explode( '.', $ifile );\r\n                    $iext = array_pop( $ifile );\r\n                    $ifile = implode( '.', $ifile );\r\n                    // File name\r\n                    $showifile = $ifile ;\r\n                    // Removing prefix\r\n                    if ( array_key_exists( 'file', $tagprefixes ) )\r\n                        $showifile = str_replace( $tagprefixes['file'], '', $showifile );\r\n                    // Cleaning\r\n                    $showifile = replaceUnderscores( $showifile );\r\n                    $alltags[$ifile]['file'][0] = $showifile;\r\n                    // Download text\r\n                    $idownloadtext = $downloadtext ? $downloadtext : 'Download: [file]';\r\n                    // Play, Stop, Title and Artist texts (for embed player)\r\n                    $iplaytext = $playtext ? $playtext : 'Play: [file]';\r\n                    $istoptext = $stoptext ? $stoptext : 'Stop: [file]';\r\n                    $ititletext = $showifile;\r\n                    $iartisttext = '';\r\n                    foreach ( $mdtags as $mdtag ) {\r\n                        if ( !array_key_exists( $mdtag, $alltags[$ifile] ) ) $alltags[$ifile][$mdtag] = array( '' );\r\n                        $tagvalue = $alltags[$ifile][$mdtag][0];\r\n                        if ( 'file' == $mdtag || 'directory' == $mdtag ) {\r\n                            if ( $mdofnencode != 'UTF-8' ) $tagvalue = iconv( $mdofnencode, 'UTF-8', $tagvalue );\r\n                        } elseif ( $mdoencode != 'UTF-8' ) {\r\n                            $tagvalue = iconv( $mdoencode, 'UTF-8', $tagvalue );\r\n                        }\r\n                        // Replacing wildcards\r\n                        $idownloadtext = str_replace( '[' . $mdtag . ']', $tagvalue, $idownloadtext );\r\n                        $iplaytext = str_replace( '[' . $mdtag . ']', $tagvalue, $iplaytext );\r\n                        $istoptext = str_replace( '[' . $mdtag . ']', $tagvalue, $istoptext );\r\n                        // If \"title\", populate \"Title text\"\r\n                        if ( 'title' == $mdtag ) $ititletext = $tagvalue;\r\n                        // If \"artist\", populate \"Artist text\"\r\n                        if ( 'artist' == $mdtag && $tagvalue ) $iartisttext = str_replace( '-', '[_]', $tagvalue ) . ' - ';\r\n                    }\r\n                    \r\n                    // Getting stored markup\r\n                    $ititle = $ititles[$ifile];\r\n\r\n                    // $ititle = str_replace( $prefix, '', $ititle ); // Causing weird behavior in some cases\r\n\r\n                    // Markup\r\n                    // 20100107 - I took it away: strtoupper( $hlevel )\r\n                    $ihtml .= '<tr class=\"mdTags\">'.\"\\n\" ;\r\n                    if ( 'table-cells' == $markuptemplate ) {\r\n                        // a group of \"td's\"\r\n                        $ihtml .= $ititle . \"\\n\";\r\n                    } elseif ( 'definition-list' == $markuptemplate ) {\r\n                        // one \"td\" with a \"dl\" inside\r\n                        $ihtml .= '<td class=\"mediaTitle\">'.$ititle.'</td>'.\"\\n\" ;\r\n                    }\r\n                    // Play, Stop and Title (concatenated with Artist) texts\r\n                    // all packed in rel attribute, for embed player to read\r\n                    // and do its black magic\r\n                    $irel = array();\r\n                    if ( $iplaytext ) $irel[] = 'mediaDownloaderPlayText:' . htmlentities( $iplaytext, ENT_COMPAT, 'UTF-8' );\r\n                    if ( $istoptext ) $irel[] = 'mediaDownloaderStopText:' . htmlentities( $istoptext, ENT_COMPAT, 'UTF-8' );\r\n                    $ititletext = $iartisttext . $ititletext;\r\n                    if ( $ititletext ) $irel[] = 'mediaDownloaderTitleText:' . htmlentities( $ititletext, ENT_COMPAT, 'UTF-8' );\r\n                    $irel = implode( ';', $irel );\r\n                    $ihtml .= '<td class=\"mediaDownload\"><a href=\"'.network_home_url($mdir).'/'.($ufolder?$ufolder.'/':'').rawurlencode( $ifile ).'.'.$iext.'\" title=\"' . htmlentities( $showifile, ENT_COMPAT, 'UTF-8' ) . '\" ' . ( $irel ? 'rel=\"' . $irel . '\"' : '' ) . ' id=\"mdfile_' . sanitize_title( $ifile ) . '\">'.$idownloadtext.'</a></td>'.\"\\n\" ;\r\n                    $ihtml .= '</tr>'.\"\\n\" ;\r\n                }\r\n                $ihtml .= '</tbody></table>'.\"\\n\" ;\r\n\r\n            }\r\n            \r\n            if ( count( $errors ) ) {\r\n                $errorHtml = '<div class=\"mediaDownloaderErrors\">';\r\n                foreach ( $errors as $error ) $errorHtml .= '<p><strong>' . _md( 'Error:' ) . '</strong> ' . $error . '</p>';\r\n                $errorHtml .= '</div>';\r\n                $ihtml .= $errorHtml;\r\n            }\r\n            // Finally, replacing our smart tag\r\n            $t = str_replace( '[media:'.$folder.']', $ihtml, $t );\r\n        }\r\n    }\r\n    return $t ;\r\n}\r\n// To sort file array by some tag\r\nfunction orderByTag( $a, $b, $tag ) {\r\n    if ( !is_array( $tag ) ) $tag = array( $tag );\r\n    global $tagvalues;\r\n    $ret = 0;\r\n    foreach ( $tag as $t ) {\r\n        $ret = strnatcmp( $tagvalues[$t][$a], $tagvalues[$t][$b] );\r\n        if ( 0 != $ret ) break;\r\n    }\r\n    if ( 0 == $ret ) $ret = strnatcmp( $a, $b );\r\n    return $ret;\r\n}\r\nfunction orderByTitle( $a, $b ) {\r\n    return orderByTag( $a, $b, array( 'title', 'filedate' ) );\r\n}\r\nfunction orderByFileDate( $a, $b ) {\r\n    return orderByTag( $a, $b, 'filedate' );\r\n}\r\nfunction orderByRecordingDates( $a, $b ) {\r\n    return orderByTag( $a, $b, 'recording_dates', 'year', 'filedate' );\r\n}\r\nfunction orderByYear( $a, $b ) {\r\n    return orderByTag( $a, $b, array( 'year', 'track_number', 'filedate' ) );\r\n}\r\nfunction orderByTrackNumber( $a, $b ) {\r\n    return orderByTag( $a, $b, 'track_number' );\r\n}\r\nfunction orderByAlbum( $a, $b ) {\r\n    return orderByTag( $a, $b, array( 'album', 'track_number' ) );\r\n}\r\nfunction orderByArtist( $a, $b ) {\r\n    return orderByTag( $a, $b, array( 'artist', 'album', 'track_number' ) );\r\n}\r\nfunction orderByFileSize( $a, $b ) {\r\n    return orderByTag( $a, $b, 'filesize' );\r\n}\r\nfunction orderBySampleRate( $a, $b ) {\r\n    return orderByTag( $a, $b, 'sample_rate' );\r\n}\r\n\r\nfunction md_plugin_dir() {\r\n    $vdir = __DIR__;\r\n    if ( '__DIR__' == $vdir ) $vdir = dirname( __FILE__ );\r\n    return array_shift( explode( DIRECTORY_SEPARATOR, plugin_basename( array_pop( explode( DIRECTORY_SEPARATOR, $vdir ) ) ) ) );\r\n}\r\nfunction md_plugin_url() {\r\n    return WP_PLUGIN_URL . '/' . md_plugin_dir();\r\n}\r\n\r\nfunction mediadownloader( $t ) {\r\n    if ( !is_feed() || !get_option( 'handlefeed' ) ) :\r\n        $t = listMedia( $t );\r\n        if ( TRUE == get_option( 'removeextension' ) ) {\r\n            $t = preg_replace(\r\n                '/href\\=[\\\\\\'\\\"](.*)'.preg_quote('.mp3').'[\\\\\\'\\\"]/im',\r\n                \"href=\\\"\".WP_PLUGIN_URL.\"/\".md_plugin_dir().\"/getfile.php?f=$1\\\"\",\r\n                $t\r\n            );\r\n        };\r\n    elseif ( is_feed() ) :\r\n        $t = preg_replace( '/<p>\\[media:([^\\]]*)\\]<\\/p>/i', '<p><small>' . _md( '(See attached files...)' ) . '</small></p>', $t );\r\n    endif;\r\n        \r\n    /* -- CASE SPECIFIC: -- */\r\n    $t = listarCategorias( $t );\r\n    $t = listarCategoriasEx( $t );\r\n    $t = listarIdiomas( $t );\r\n    /* -- END CASE SPECIFIC; -- */\r\n    return $t;\r\n}\r\n\r\n\r\nfunction mediadownloaderFileLength( $filename ) {\r\n    // Initialize getID3 engine\r\n    $getID3 = new getID3;\r\n    // Analyze file and store returned data in $ThisFileInfo\r\n    $ThisFileInfo = $getID3->analyze( $filename );\r\n    // Optional: copies data from all subarrays of [tags] into [comment] so\r\n    // metadata is all available in one location for all tag formats\r\n    // metainformation is always available under [tags] even if this is not called\r\n    getid3_lib::CopyTagsToComments( $ThisFileInfo );\r\n}\r\n\r\n// Get ID3 tags from file\r\nfunction mediadownloaderFileInfo( $f, $ext ) {\r\n    // File path\r\n    if ( function_exists( 'switch_to_blog' ) ) switch_to_blog(1);\r\n    $relURL = str_replace( 'http'.(isset($_SERVER['HTTPS'])?'s':'').'://'.$_SERVER['SERVER_NAME'], '', get_option( 'siteurl' ) );\r\n    if ( function_exists( 'restore_current_blog' ) ) restore_current_blog();\r\n    if ( stripos( $f, $relURL ) === 0 ) $f = substr( $f, strlen( $relURL ) );\r\n    $f = ABSPATH . $f . '.' . $ext;\r\n    $f = preg_replace( '|/+|ims', '/', $f );\r\n\r\n    // Checking cache\r\n    $return = false;\r\n    $hash = md5( $f );\r\n    $cachedir = trim( get_option( 'cachedir' ) );\r\n    $cachefile = ABSPATH . '/' . $cachedir . '/md-' . $hash . '.cache' ;\r\n    if ( $cachedir && is_readable( $cachefile )  && file_exists( $f ) && ( filemtime( $cachefile ) >= filemtime( $f ) ) ) {\r\n\r\n        $return = unserialize( file_get_contents( $cachefile ) );\r\n        if ( $return ) return $return;\r\n\r\n    }\r\n    if ( !$return ) {\r\n\r\n        // include getID3() library (can be in a different directory if full path is specified)\r\n        require_once('getid3/getid3.php');\r\n        // Initialize getID3 engine\r\n        $getID3 = new getID3;\r\n        $mdoencode = get_option( 'tagencoding' );\r\n        $mdoencode = array_shift( explode( ' + ', $mdoencode ) );\r\n        if ( 'UTF-8' != $mdoencode ) $getID3->setOption( array( 'encoding' => $mdoencode ) );\r\n        // Analyze file and store returned data in $ThisFileInfo\r\n        if ( $ThisFileInfo = $getID3->analyze( $f ) ) {\r\n            // Saving cache\r\n            if ( $cachedir && is_writeable( ABSPATH . '/' . $cachedir ) ) file_put_contents( $cachefile, serialize( $ThisFileInfo ) );\r\n        }\r\n        return $ThisFileInfo;\r\n    }\r\n}\r\n// File size\r\nfunction mediadownloaderFileSize( $f, $ext ){\r\n    if ( 0 === stripos( $f, get_option( 'siteurl' ) ) ) $f = str_replace( get_option( 'siteurl' ), '', $f );\r\n    $f = ABSPATH . substr( $f, 1 ) . '.' . $ext;\r\n    if ( !file_exists( $f ) ) $f = urldecode( $f );\r\n    return filesize( $f );\r\n}\r\n// Extract MP3 links form post content\r\nfunction mediadownloaderEnclosures( $adjacentmarkup = false ){\r\n    $allmatches = array();\r\n    global $post;\r\n    $cont = listMedia( get_the_content( $post->ID ) );\r\n    foreach ( md_mediaExtensions() as $mext ) {\r\n        $ret = array();\r\n        preg_match_all( '/href=[\\\\\\'\"](.*)'.preg_quote('.'.$mext).'[\\\\\\'\"]/im', $cont, $matches );\r\n        preg_match_all( '/href=[\\\\\\'\"].*getfile\\.php\\?\\=(.*)[\\\\\\'\"]/im', $cont, $newmatches );\r\n        // It makes no sense, \"there can be only one\", but just in case...\r\n        if ( count( $matches ) && count( $matches[1] ) ) $ret = array_unique( array_merge( $matches[1], $newmatches[1] ) );\r\n    \r\n        // Should we get only the MP3 URL's?\r\n        if ( !$adjacentmarkup ) {\r\n            foreach ( $ret as $r ) if ( '/' == substr( $r, 0, 1 ) ) $r = 'http'.(isset($_SERVER['HTTPS'])?'s':'').'://' . $_SERVER['SERVER_NAME'] . $r;\r\n            $allmatches[$mext] = $ret;\r\n        \r\n        // Or get all the markup around them?\r\n        } else {\r\n            $markuptemplate = get_option( 'markuptemplate' );\r\n            $adj = array();\r\n            $tablehead = '';\r\n            // For each MP3 URL...\r\n            foreach ( $ret as $r ) {\r\n                $adj[$r] = $r;\r\n                // Dirty magic to get the markup around it...\r\n                $rarr = explode( $r . '.' . $mext, $cont );\r\n                if ( count( $rarr ) > 1 ) {\r\n                    $line = substr( $rarr[0], strripos( $rarr[0], '<tr class=\"mdTags\">' ) );\r\n                    $line .= substr( $rarr[1], 0, stripos( $rarr[1], '</tr>' ) ) .'</tr>';\r\n                    if ( 'definition-list' == $markuptemplate ) {\r\n                        $line = substr( $line, strripos( $line, '<dl class=\"mdTags\">' ) );\r\n                        $line = substr( $line, 0, stripos( $line, '</dl>' ) ) . '</dl>';\r\n                        $adj[$r] = $line;\r\n                    } elseif ( 'table-cells' == $markuptemplate ) {\r\n\r\n                        if ( '' == $tablehead ) {\r\n                            $safe_r = str_replace( array('/', '.', ':', '%', '-'), array('\\\\/', '\\\\.', '\\\\:', '\\\\%', '\\\\-'), $r );\r\n                            preg_match_all( '/\\<table([^\\>]*)\\>(.*?)'.$safe_r.'(.*?)\\<\\/table\\>/ims', $cont, $adjtable );\r\n                            if ( count( $adjtable ) && count( $adjtable[0] ) ) {\r\n                                $ftable = $adjtable[0][0];\r\n                                $ftable = substr( $ftable, strripos( $ftable, '<table' ) );\r\n                                $tablehead = substr( $ftable, 0, stripos( $ftable, '</thead>' ) ) . '</thead>';\r\n                            }\r\n                        }\r\n\r\n                        $adj[$r] = ($tablehead?$tablehead:'<table>') . '<tbody>' . $line . '</tbody></table>';\r\n                    }\r\n                }\r\n            }\r\n            $allmatches[$mext] = $adj;\r\n        }\r\n    }\r\n    return $allmatches;\r\n} \r\n// Generate ATOM tags\r\nfunction mediadownloaderAtom(){\r\n    $t = '';\r\n    $allmatches = mediadownloaderEnclosures();\r\n    foreach ( $allmatches as $mext => $matches ) {\r\n        foreach ( $matches as $m ) {\r\n            //$t.='<link rel=\"enclosure\" title=\"'.basename($m).'\" length=\"'.mediadownloaderFileSize($m, $mext).'\" href=\"'.WP_PLUGIN_URL.'/media-downloader/getfile.php?f='.urlencode($m).'\" type=\"audio/mpeg\" />';\r\n            $t .= '<link rel=\"enclosure\" title=\"' . basename( $m ) . '\" length=\"' . mediadownloaderFileSize( $m, $mext ) . '\" href=\"' . ( $m . '.' . $mext ) . '\" type=\"audio/mpeg\" />';\r\n\t    }\r\n\t}\r\n    echo $t;\r\n    //return $t;\r\n}\r\n// Generate RSS tags\r\nfunction mediadownloaderRss(){\r\n    global $post;\r\n    $postdate = strtotime( $post->post_date_gmt );\r\n    $t = '';\r\n    $allmatches = mediadownloaderEnclosures( true );\r\n    foreach ( $allmatches as $mext => $matches ) {\r\n        foreach ( $matches as $m => $adjacentmarkup ) {\r\n            $postdate -= 2;\r\n            //$t.='<enclosure title=\"'.basename($m).'\" url=\"'.WP_PLUGIN_URL.'/media-downloader/getfile.php?f='.urlencode($m).'\" length=\"'.mediadownloaderFileSize($m, $mext).'\" type=\"audio/mpeg\" />';\r\n            //$t .= '<enclosure title=\"' . basename( $m ) . '\" url=\"' . ( $m . '.' . $mext ) . '\" length=\"' . mediadownloaderFileSize( $m, $mext ) . '\" type=\"audio/mpeg\" />';\r\n            $t .= '</item>';\r\n            $t .= '<item>';\r\n            $t .= '<title>' . sprintf( _md( 'Attached file: %1$s - %2$s' ), urldecode( basename( $m ) ), get_the_title($post->ID) ) . '</title>';\r\n            $t .= '<link>' . get_permalink($post->ID) . '#mdfile_' . sanitize_title( basename( urldecode( $m ) ) ) . '</link>';\r\n            $t .= '<description><![CDATA[' . $adjacentmarkup . ']]></description>';\r\n            $t .= '<pubDate>' . date( DATE_RSS, $postdate ) . '</pubDate>';\r\n            $t .= '<guid>' . get_permalink($post->ID) . '#mdfile_' . sanitize_title( basename( urldecode( $m ) ) ) . '</guid>';\r\n            $t .= '<enclosure url=\"' . ( $m . '.' . $mext ) . '\" length=\"' . mediadownloaderFileSize( $m, $mext ) . '\" type=\"audio/mpeg\" />';\r\n\t    }\r\n\t}\r\n    echo $t;\r\n    //return $t; \r\n}\r\n  \r\nadd_filter( 'the_content', 'mediadownloader' );\r\n\r\nif ( get_option( 'handlefeed' ) ) :\r\n    add_action( 'atom_entry', 'mediadownloaderAtom' );\r\n    //add_action( 'rss_item', 'mediadownloaderRss' );\r\n    add_action( 'rss2_item', 'mediadownloaderRss' );\r\n    // Lowering cache lifetime to 4 hours\r\n    add_filter( 'wp_feed_cache_transient_lifetime', create_function('$a','$newvalue = 4*3600; if ( $a < $newvalue ) $a = $newvalue; return $a;') );\r\nendif;\r\n\r\nfunction mediaDownloaderEnqueueScripts() {\r\n    // If any custom css, we enqueue our php that throws this css\r\n    $customcss = trim( get_option( 'customcss' ) );\r\n    if ( '' != $customcss ) {\r\n        wp_register_style( 'mediadownloaderCss', md_plugin_url() . '/css/mediadownloader-css.php' );\r\n        wp_enqueue_style( 'mediadownloaderCss' );\r\n    }\r\n\r\n    // Enqueuing JQPlugin (browser plugins detection)\r\n    wp_enqueue_script( 'jqplugin', md_plugin_url() . '/js/jquery.jqplugin.1.0.2.min.js', array('jquery'), date( 'YmdHis', filemtime( dirname(__FILE__) . '/js/jquery.jqplugin.1.0.2.min.js' ) ), get_option( 'scriptinfooter' ) );\r\n    // Enqueuing our javascript\r\n    wp_enqueue_script( 'mediadownloaderJs', md_plugin_url() . '/js/mediadownloader.js', array('jquery'), date( 'YmdHis', filemtime( dirname(__FILE__) . '/js/mediadownloader.js' ) ), get_option( 'scriptinfooter' ) );\r\n    \r\n    // Passing options to our javascript\r\n    add_action( 'get_header', 'mediaDownloaderLocalizeScript' );\r\n}\r\n    \r\n// Passing options to our javascript\r\nfunction mediaDownloaderLocalizeScript() {\r\n    global $mdembedplayerdefaultcolors;\r\n    $mdembedcolors = array();\r\n    foreach( $mdembedplayerdefaultcolors as $mdcolor => $mddefault ) {\r\n        $mdembedcolors[$mdcolor] = str_replace( '#', '', get_option( $mdcolor . '_embed_color' ) );\r\n        if ( !trim($mdembedcolors[$mdcolor]) ) $mdembedcolors[$mdcolor] = $mddefault;\r\n    }\r\n    $replaceheaders = get_replaceheaders();\r\n    $playheader = _md( 'Play' );\r\n    if ( array_key_exists( 'play', $replaceheaders ) ) $playheader = $replaceheaders['play'];\r\n    wp_localize_script( 'mediadownloaderJs', 'mdEmbedColors', $mdembedcolors );\r\n    wp_localize_script( 'mediadownloaderJs', 'mdStringTable', array(\r\n        'pluginURL' => md_plugin_url() . '/',\r\n        'playColumnText' => $playheader,\r\n        'downloadTitleText' => _md( 'Download:' ),\r\n        'playTitleText' => _md( 'Play:' ),\r\n        'stopTitleText' => _md( 'Stop:' ),\r\n    ) );\r\n}\r\n\r\nfunction mediaDownloaderInit() {\r\n    load_textdomain( 'media-downloader', WP_LANG_DIR . '/mediadownloader/mediadownloader-' . apply_filters( 'plugin_locale', get_locale(), 'media-downloader' ) . '.mo' );\r\n    load_plugin_textdomain( 'media-downloader', false, basename( dirname( __FILE__ ) ) . '/languages' );\r\n    /*\r\n    // I'm testing the lines below to avoid problems with symlinks,\r\n    // but it's not over yet...\r\n    $pdir = array_key_exists( 'SCRIPT_FILENAME', $_SERVER ) ? array_shift( explode( '/wp-', $_SERVER[\"SCRIPT_FILENAME\"] ) ) . '/wp-content/plugins/media-downloader' : dirname( plugin_basename( __FILE__ ) );\r\n    load_plugin_textdomain( 'media-downloader', false, $pdir . '/languages/' );\r\n    */\r\n    mediaDownloaderEnqueueScripts();\r\n    add_filter( 'set-screen-option', 'mediadownloader_adm_save_options', 10, 3 );\r\n}\r\nadd_action( 'init', 'mediaDownloaderInit' );\r\n\r\n\r\nadd_action( 'admin_init', 'md_admin_init' );\r\n\r\nfunction md_admin_init() {\r\n    wp_register_style( 'md-admin-css', md_plugin_url() . '/css/admin.css' );\r\n    wp_register_script( 'md-admin-script', md_plugin_url() . '/js/admin.js' );\r\n}\r\nfunction md_admin_styles() {\r\n    wp_enqueue_style( 'md-admin-css' );\r\n}\r\nfunction md_admin_scripts() {\r\n    wp_enqueue_script( 'md-admin-script', false, array( 'jquery' ) );\r\n}\r\n\r\n// Our options screens...\r\nadd_action( 'admin_menu', 'mediadownloader_menu' );\r\n\r\nfunction mediadownloader_menu() {\r\n    $oppage = add_options_page( 'Media Downloader Options', 'Media Downloader', 'manage_options', 'mediadownloader-options', 'mediadownloader_options' );\r\n    add_action( 'admin_print_styles-' . $oppage, 'md_admin_styles' );\r\n    add_action( 'admin_print_scripts-' . $oppage, 'md_admin_scripts');\r\n    if ( array_key_exists( 'tag-editor', $_GET ) ) add_action( \"load-$oppage\", 'mediadownloader_adm_add_options' );\r\n}\r\n\r\n\r\nfunction mediadownloader_adm_add_options() {\r\n    $option = 'per_page'; \r\n    $args = array(\r\n        'label' => sprintf( __( 'items (min: %d - max: %d)' ), 10, 100 ),\r\n        'default' => 50,\r\n        'option' => 'mediadownloader_adm_items_per_page'\r\n    );\r\n    add_screen_option( $option, $args );\r\n}\r\nfunction mediadownloader_adm_save_options( $status, $option, $value ) {\r\n    if ( 'mediadownloader_adm_items_per_page' == $option ) return ( $value >= 10 && $value <= 100 ) ? $value : false;\r\n}\r\n\r\nfunction mediadownloader_options() {\r\n    // Basically, user input forms...\r\n    if ( isset( $_GET['markup-options'] ) ) {\r\n        require_once(\"mediadownloader-markup-options.php\");\r\n    } elseif ( isset( $_GET['more-options'] ) ) {\r\n        require_once(\"mediadownloader-more-options.php\");\r\n    } elseif ( isset( $_GET['tag-editor'] ) ) {\r\n        require_once(\"mediadownloader-tag-editor.php\");\r\n    } else {\r\n        require_once(\"mediadownloader-options.php\");\r\n    }\r\n}\r\n\r\n// Add Settings link to plugins - code from GD Star Ratings\r\n// (as seen in http://www.whypad.com/posts/wordpress-add-settings-link-to-plugins-page/785/ )\r\nfunction mediadownloader_settings_link( $links, $file ) {\r\n    $this_plugin = plugin_basename( array_pop( explode( DIRECTORY_SEPARATOR, dirname( __FILE__ ) ) ) );\r\n    if ( $file == $this_plugin ) {\r\n        $settings_link = '<a href=\"options-general.php?page=mediadownloader-options\">' . _md( 'Settings' ) . '</a>';\r\n        array_unshift( $links, $settings_link );\r\n    }\r\n    return $links;\r\n}\r\nadd_filter( 'plugin_action_links', 'mediadownloader_settings_link', 10, 2 );\r\n\r\n// Registering our settings...\r\nadd_action( 'admin_init', 'mediadownloader_settings' );\r\n\r\nfunction mediadownloader_settings() {\r\n    global $mdsettings;\r\n    foreach ( $mdsettings as $mdsetting => $mdsanitizefunction ) register_setting( 'md_options', $mdsetting, $mdsanitizefunction );\r\n\r\n    global $mdmarkupsettings;\r\n    foreach ( $mdmarkupsettings as $mdmarkupsetting => $mdsanitizefunction ) register_setting( 'md_markup_options', $mdmarkupsetting, $mdsanitizefunction );\r\n\r\n    global $mdembedplayerdefaultcolors;\r\n    foreach ( $mdembedplayerdefaultcolors as $mdcolor => $mddefault ) register_setting( 'md_more_options', $mdcolor . '_embed_color', 'sanitizeHEXColor' );\r\n}\r\n\r\nfunction md_self_link() {\r\n\t$host = @parse_url( home_url() );\r\n\treturn esc_url( apply_filters( 'md_self_link', set_url_scheme( 'http://' . $host['host'] . stripslashes($_SERVER['REQUEST_URI']) ) ) );\r\n}\r\nfunction md_filter_feed_link( $link, $type = 'rss2' ) {\r\n    $overwritefeedlink = ( 'rss2' == $type ) ? trim( get_option( 'overwritefeedlink' ) ) : false;\r\n    return $overwritefeedlink ? $overwritefeedlink : $link;\r\n}\r\nadd_filter( 'md_self_link', 'md_filter_feed_link' );\r\nadd_filter( 'feed_link', 'md_filter_feed_link' );\r\n\r\n// Functions to sanitize user input\r\nfunction sanitizeRDir( $d ){\r\n    return is_readable( ABSPATH . $d ) ? $d : '' ;\r\n}\r\nfunction sanitizeWDir( $d ){\r\n    return is_writeable( ABSPATH . $d ) ? $d : '' ;\r\n}\r\nfunction sanitizeArray( $i, $a ){\r\n    if ( is_array( $i ) ) {\r\n        return array_intersect( $i, $a );\r\n    } else {\r\n        return in_array( $i, $a ) ? $i : '' ;\r\n    }\r\n}\r\nfunction sanitizeMediaExtensions( $t ) {\r\n    return sanitizeArray( $t, md_mediaAllExtensions() );\r\n}\r\nfunction sanitizeSortingField( $t ){\r\n    global $mdsortingfields;\r\n    return sanitizeArray( $t, array_keys( $mdsortingfields ) );\r\n}\r\nfunction sanitizeBeforeAfter( $t ){\r\n    return sanitizeArray( $t, array( 'before', 'after' ) );\r\n}\r\nfunction sanitizeTagEncoding( $t ){\r\n    global $mdencodings;\r\n    return sanitizeArray( $t, $mdencodings );\r\n}\r\nfunction sanitizeBoolean( $b ){\r\n    return $b == 1 ;\r\n}\r\nfunction sanitizeHEXColor( $c ){\r\n    return preg_match( '/^\\s*#?[0-9A-F]{3,6}\\s*$/i', $c, $m ) ? trim( str_replace( '#', '', $c ) ) : '';\r\n}\r\nfunction sanitizeMarkupTemplate( $t ){\r\n    global $mdmarkuptemplates;\r\n    return sanitizeArray( $t, array_keys( $mdmarkuptemplates ) );\r\n}\r\nfunction sanitizeURL( $t ) {\r\n    return filter_var( $t, FILTER_VALIDATE_URL );\r\n}\r\n\r\n\r\n// I used these functions below to \"internationalize\" (localize) some strings,\r\n// left them here for \"backward compatibilaziness\"\r\n\r\nfunction _md( $t ) {\r\n//    if ( function_exists( 'icl_register_string' ) ) {\r\n//        icl_register_string( 'Media Downloader', $t, $t );\r\n//        return icl_t( 'Media Downloader', $t, $t );\r\n//    } else {\r\n        return __( $t, 'media-downloader' );\r\n//    }\r\n}\r\nfunction _mde( $t ) {\r\n//    if ( function_exists( 'icl_register_string' ) ) {\r\n//        icl_register_string( 'Media Downloader', $t, $t );\r\n//        echo icl_t( 'Media Downloader', $t, $t );\r\n//    } else {\r\n        return _e( $t, 'media-downloader' );\r\n//    }\r\n}\r\nfunction _mdn( $ts, $tp, $n ) {\r\n//    if ( function_exists( 'icl_register_string' ) ) {\r\n//        icl_register_string( 'Media Downloader', $ts, $ts );\r\n//        icl_register_string( 'Media Downloader', $tp, $tp );\r\n//        if ( 1 != $n ) {\r\n//            return icl_t( 'Media Downloader', $tp, $tp );\r\n//        } else {\r\n//            return icl_t( 'Media Downloader', $ts, $ts );\r\n//        }\r\n//    } else {\r\n        return _n( $ts, $tp, $n, 'media-downloader' );\r\n//    }\r\n}\r\n\r\n\r\n/* -- CASE SPECIFIC: -- */\r\n\r\nadd_filter( 'get_previous_post_where', 'corrige_qtrans_excludeUntransPosts' );\r\nadd_filter( 'get_next_post_where', 'corrige_qtrans_excludeUntransPosts' );\r\nadd_filter( 'posts_where_request', 'corrige_qtrans_excludeUntransPosts' );\r\n\r\nfunction corrige_qtrans_excludeUntransPosts( $where ) {\r\n    if ( function_exists( 'qtrans_getLanguage' ) ) {\r\n        $l = qtrans_getLanguage();\r\n        if ( trim( $l ) ) {\r\n\t        global $q_config, $wpdb;\r\n\t        if ( $q_config['hide_untranslated'] ) {\r\n\t\t        $where .= \" AND post_content LIKE '%<!--:\".$l.\"-->%'\";\r\n\t        }\r\n\t    }\r\n\t}\r\n\treturn $where;\r\n}\r\n\r\nfunction listarCategorias($t){\r\n    preg_match_all('/\\[cat:([^\\]]*)\\]/i',$t,$matches);\r\n    if(count($matches)){\r\n        foreach($matches[1] as $catname){\r\n            $myposts = get_posts(array('numberposts'=>-1,'post_type'=>'post','category_name'=>$catname,'suppress_filters'=>0));\r\n            $listposts='';\r\n\r\n            if(count($myposts)){\r\n                global $post;\r\n                $prepost=$post;\r\n                $listposts.='<ul class=\"inner-cat\">';\r\n                foreach($myposts as $post) $listposts.='<li><a href=\"'.get_permalink().'\">'.get_the_title().'</a></li>';\r\n                $listposts.='</ul>';\r\n                $post=$prepost;\r\n            }\r\n            $t = tiraDoParagrafo('[cat:'.$catname.']', $t);\r\n            $t = str_replace('[cat:'.$catname.']', $listposts, $t);\r\n        }\r\n    }\r\n    return $t;\r\n}\r\n\r\nfunction listarCategoriasEx($t){\r\n    preg_match_all('/\\[catex:([^\\]]*)\\]/i',$t,$matches);\r\n    if(count($matches)){\r\n        foreach($matches[1] as $catname){\r\n            $myposts = get_posts(array('post_type'=>'post','category_name'=>$catname,'suppress_filters'=>0));\r\n            $listposts='';\r\n            if(count($myposts)){\r\n                global $post;\r\n                $prepost=$post;\r\n                $listposts.='<dl class=\"inner-cat\">';\r\n                foreach($myposts as $post) $listposts.='<dt><a href=\"'.get_permalink().'\">'.get_the_title().'</a></dt>'.(trim($post->post_excerpt)?'<dd>'.$post->post_excerpt.'</dd>':'');\r\n                $listposts.='</dl>';\r\n                $post=$prepost;\r\n            }\r\n            $t = tiraDoParagrafo('[catex:'.$catname.']', $t);\r\n            $t = str_replace('[catex:'.$catname.']', $listposts, $t);\r\n        }\r\n    }\r\n    return $t;\r\n}\r\n\r\nfunction listarIdiomas($t){\r\n    if ( stripos($t, '[languages]')!==false && function_exists('qtrans_generateLanguageSelectCode') ){\r\n        ob_start();\r\n        qtrans_generateLanguageSelectCode();\r\n        $i=ob_get_contents();\r\n        ob_end_clean();\r\n        ob_end_flush();\r\n        $t = tiraDoParagrafo('[languages]', $t);\r\n        $t = str_replace('[languages]', $i, $t);\r\n    }\r\n    return $t;\r\n}\r\n\r\nfunction tiraDoParagrafo($tag, $t){\r\n    return str_replace('<p>'.$tag.'</p>', $tag, $t);\r\n}\r\n\r\n/* -- END CASE SPECIFIC; -- */\r\n\r\n?>\r\n", "=== Media Downloader ===\nContributors: Ederson Peka, Jonathan Jose from www.flowconversatilidad.net (Spanish Translation)\nTags: media, audio, podcast, post, player, mp3, flash\nRequires at least: 3.0\nTested up to: 3.6\nStable tag: 0.1.992\nDonate link: https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=ederson@gmail.com&lc=BR&currency_code=BRL&item_name=Media%20Downloader%20Wordpress%20Plugin\n\nLists MP3 files from a folder. Portuguese: Lista arquivos MP3 de um diret\u00f3rio. Spanish: Lista todos los MP3 de un directorio.\n\n== Description ==\n\nMedia Downloader plugin lists MP3 files from a folder by replacing the [media] smart tag. It reads MP3 information directly from the files. It also can try to get rid of stupid content blockers (mainly corporatives), changing all links to .MP3 files into some download URL without the string \"MP3\".\n\n= Portuguese: Descri\u00e7\u00e3o =\nO plugin Media Downloader lista os arquivos MP3 de um diret\u00f3rio, substituindo a \"smart tag\" [media]. Ele l\u00ea a meta-informa\u00e7\u00e3o diretamente dos arquivos MP3. Tamb\u00e9m pode tentar se livrar de bloqueadores de conte\u00fado idiotas (geralmente corporativos), transformando todos os links para arquivos .MP3 em alguma URL de download sem o texto \"MP3\".\n\n= Spanish: Descripcion =\nEl plugin Media Downloader lista archivos MP3 de un directorio cambiando [media] tag. Lee informacion de los MP3 directamente desde el archivo. Tambi\u00e9n puede intentar deshacerse de est\u00fapidos bloqueadores de contenido (principalmente corporativos), cambiando todos los enlaces a .MP3 en alguna URL de descarga sin la cadena \"MP3\".\n\n== Installation ==\n\n1. Extract the contents of the archive\n2. Upload the contents of the mediadownloader folder to your 'wp-content/plugins' folder\n3. Log in to your WordPress admin and got to the 'Plugins' section. You should now see Media Downloader in the list of available plugins\n4. Activate the plugin by clicking the 'activate' link\n5. Now go to the 'Options' section and select 'Media Downloader' where you can configure the plugin\n\n= Portuguese: Instala\u00e7\u00e3o =\n1. Extraia o conte\u00fado do arquivo\n2. Fa\u00e7a upload do conte\u00fado do diret\u00f3rio mediadownloader para dentro do diret\u00f3rio 'wp-content/plugins'\n3. Acesse o painel do WordPress e v\u00e1 para a se\u00e7\u00e3o 'Plugins'. Agora voc\u00ea j\u00e1 deve ver o Media Downloader na lista de plugins dispon\u00edveis\n4. Ative o plugin clicando no link 'ativar'\n5. Agora v\u00e1 at\u00e9 a se\u00e7\u00e3o 'Op\u00e7\u00f5es' e selecione 'Media Downloader', onde voc\u00ea pode configurar o plugin\n\n= Spanish: Instalacion =\n1. Extraiga el contenido del archivo\n2. Subir el contenido de la carpeta mediadownloader a su carpeta 'wp-content/plugins'\n3. Entrar en su wordpress admin y llegu\u00e9 a la secci\u00f3n 'Plugins'. Ahora debe ver Media Downloader en la lista de plugins disponibles\n4. Activar el plugin haciendo clic en el 'activar' \n5. Ahora vaya a secci\u00f3n 'Opciones' y seleccione 'Media Downloader', donde puede configurar el plugin\n\n== Frequently Asked Questions ==\n\n= How should I configure it? Where should I throw my MP3 files? How do I use this thing? What's the smart tag syntax? =\n\nAn example may help... Say you have a folder called \"music\" under your root folder, and for its time it has some subfolders, as, \"Beethoven\", \"Mozart\", \"Bach\" and \"Haendel\".\n\nFirst of all, you should configure Media Downloader by typing \"music\" in the \"MP3 Folder\" field, on settings page (and then clicking on \"Update Options\", for sure).\n\nThat done, you can edit a post talking 'bout Johann Sebastian Bach and insert anywhere on it the smart tag, \"[media:Bach]\". Media Downloader will create a list of all files under the \"music/Bach\" directory. This is actually very simple. ;-)\n\n= Portuguese: Perguntas Freq\u00fcentes =\n= Como configurar? Onde jogar os arquivos MP3? Como eu uso essa tranqueira? Qual \u00e9 a sintaxe da \"smart tag\"? =\n\nUm exemplo deve ajudar... Digamos que voc\u00ea tenha um diret\u00f3rio chamado \"musica\" dentro do seu diret\u00f3rio raiz, e por sua vez ele tenha subdiret\u00f3rios, como: \"Villa-Lobos\", \"Jobim\", \"Pixinguinha\" e \"Martins\".\n\nAntes de tudo, voc\u00ea deve configurar o Media Downloader, digitando \"musica\" no campo \"MP3 Folder\", na p\u00e1gina de configura\u00e7\u00f5es (e clicando em \"Atualizar Op\u00e7\u00f5es\", claro).\n\nFeito isto, voc\u00ea pode editar um post falando sobre Jo\u00e3o Carlos Martins e inserir em qualquer lugar a smart tag: \"[media:Martins]\". O Media Downloader vai criar uma lista de todos os arquivos no diret\u00f3rio \"musica/Martins\". Na verdade, \u00e9 tudo bem simples. ;-)\n\n= Spanish: Preguntas Frecuentes =\n= \u00bfC\u00f3mo debo configurar? \u00bfD\u00f3nde puedo tirar mis archivos MP3? \u00bfC\u00f3mo puedo usar esta cosa? \u00bfCu\u00e1l es el smart tag sintaxis? =\n\nUn ejemplo puede ayudar... Digamos que usted tiene una carpeta llamada \"musica\" en su carpeta ra\u00edz, y tiene algunas subcarpetas, como: \"Beethoven\", \"Mozart\", \"Bach\" y \"Haendel\". \n\nEn primer lugar, deber\u00e1 configurar Media Downloader tecleando \"cl\u00e1sica\" en la \"MP3 Carpeta\" sobre el terreno, sobre los par\u00e1metros p\u00e1gina (y luego hacer clic en \"Actualizaci\u00f3n Opciones\", de seguro).\n\nEse hecho, puede editar un puesto hablando sobre Johann Sebastian Bach y insertar en cualquier lugar en el la smart tag \"[media:Bach]\". Media Downloader crear\u00e1 una lista de todos los archivos del \"musica/Bach\" directorio. Este es realmente muy simple. ;-)\n"], "fixing_code": ["<?php\r\n// Load WordPress \"framework\"\r\nrequire_once('../../../wp-load.php');\r\n\r\n// Calculate file path\r\n$file = urldecode( $_GET['f'] );\r\n$file = str_replace( get_option( 'siteurl' ), '', $file );\r\n$relURL=str_replace( 'http'.(isset($_SERVER['HTTPS'])?'s':'').'://'.$_SERVER['SERVER_NAME'], '', get_option( 'siteurl' ) );\r\n$filepath = ABSPATH . str_replace( $relURL, '', $file ) . '.mp3';\r\nif(substr($file,0,1)=='/') $file=substr($file,1);\r\n// Serve file\r\ndl_file_resumable($filepath);\r\n\r\n// Resumable Download ( From: http://www.php.net/fread )\r\nfunction dl_file_resumable($file, $is_resume=TRUE)\r\n{\r\n    //First, see if the file exists\r\n    if ( !is_file($file) && ( $file = stripslashes( $file ) ) && !is_file($file) )\r\n    {\r\n        die(\"<b>404 File not found! <!-- Searched for file: \\\"\" . htmlentities( $file ) . \"\\\" --></b>\");\r\n    }\r\n\r\n    //Gather relevent info about file\r\n    $size = filesize($file);\r\n    $fileinfo = pathinfo($file);\r\n    \r\n    //workaround for IE filename bug with multiple periods / multiple dots in filename\r\n    //that adds square brackets to filename - eg. setup.abc.exe becomes setup[1].abc.exe\r\n    $filename = (strstr($_SERVER['HTTP_USER_AGENT'], 'MSIE')) ?\r\n                  preg_replace('/\\./', '%2e', $fileinfo['basename'], substr_count($fileinfo['basename'], '.') - 1) :\r\n                  $fileinfo['basename'];\r\n    \r\n    $file_extension = strtolower($fileinfo['extension']);\r\n\r\n    //This will set the Content-Type to the appropriate setting for the file\r\n    switch($file_extension)\r\n    {\r\n        case 'exe': $ctype='application/octet-stream'; break;\r\n        case 'zip': $ctype='application/zip'; break;\r\n        case 'mp3': $ctype='audio/mpeg'; break;\r\n        case 'mpg': $ctype='video/mpeg'; break;\r\n        case 'avi': $ctype='video/x-msvideo'; break;\r\n        default:    $ctype='application/force-download';\r\n    }\r\n\r\n    //check if http_range is sent by browser (or download manager)\r\n    if($is_resume && isset($_SERVER['HTTP_RANGE']))\r\n    {\r\n        list($size_unit, $range_orig) = explode('=', $_SERVER['HTTP_RANGE'], 2);\r\n\r\n        if ($size_unit == 'bytes')\r\n        {\r\n            //multiple ranges could be specified at the same time, but for simplicity only serve the first range\r\n            //http://tools.ietf.org/id/draft-ietf-http-range-retrieval-00.txt\r\n            list($range, $extra_ranges) = explode(',', $range_orig, 2);\r\n        }\r\n        else\r\n        {\r\n            $range = '';\r\n        }\r\n    }\r\n    else\r\n    {\r\n        $range = '';\r\n    }\r\n\r\n    //figure out download piece from range (if set)\r\n    list($seek_start, $seek_end) = explode('-', $range, 2);\r\n\r\n    //set start and end based on range (if set), else set defaults\r\n    //also check for invalid ranges.\r\n    $seek_end = (empty($seek_end)) ? ($size - 1) : min(abs(intval($seek_end)),($size - 1));\r\n    $seek_start = (empty($seek_start) || $seek_end < abs(intval($seek_start))) ? 0 : max(abs(intval($seek_start)),0);\r\n\r\n    //add headers if resumable\r\n    if ($is_resume)\r\n    {\r\n        //Only send partial content header if downloading a piece of the file (IE workaround)\r\n        if ($seek_start > 0 || $seek_end < ($size - 1))\r\n        {\r\n            header('HTTP/1.1 206 Partial Content');\r\n        }\r\n\r\n        header('Accept-Ranges: bytes');\r\n        header('Content-Range: bytes '.$seek_start.'-'.$seek_end.'/'.$size);\r\n    }\r\n\r\n    //headers for IE Bugs (is this necessary?)\r\n    //header(\"Cache-Control: cache, must-revalidate\");   \r\n    //header(\"Pragma: public\");\r\n\r\n    header('Content-Type: ' . $ctype);\r\n    header('Content-Disposition: attachment; filename=\"' . $filename . '\"');\r\n    header('Content-Length: '.($seek_end - $seek_start + 1));\r\n\r\n    //open the file\r\n    $fp = fopen($file, 'rb');\r\n    //seek to start of missing part\r\n    fseek($fp, $seek_start);\r\n\r\n    //start buffered download\r\n    while(!feof($fp))\r\n    {\r\n        //reset time limit for big files\r\n        set_time_limit(0);\r\n        print(fread($fp, 1024*8));\r\n        flush();\r\n        ob_flush();\r\n    }\r\n\r\n    fclose($fp);\r\n    exit;\r\n}\r\n\r\n\r\n?>\r\n", "<?php\r\n/*\r\nPlugin Name: Media Downloader\r\nPlugin URI: http://ederson.peka.nom.br\r\nDescription: Media Downloader plugin lists MP3 files from a folder by replacing the [media] smarttag.\r\nVersion: 0.1.993\r\nAuthor: Ederson Peka\r\nAuthor URI: http://ederson.peka.nom.br\r\n*/\r\n\r\n// Possible encodings\r\n$mdencodings = array( 'UTF-8', 'ISO-8859-1', 'ISO-8859-15', 'cp866', 'cp1251', 'cp1252', 'KOI8-R', 'BIG5', 'GB2312', 'BIG5-HKSCS', 'Shift_JIS', 'EUC-JP' );\r\n$md_comp_encs = array();\r\nforeach ( $mdencodings as $mdenc ) if ( 'ISO-8859-1'!=$mdenc ) $md_comp_encs[] = 'ISO-8859-1 + '.$mdenc;\r\n$mdencodings = array_merge( $mdencodings, $md_comp_encs );\r\n// Possible fields by which file list should be sorted,\r\n// and respective sorting functions\r\n$mdsortingfields = array(\r\n    'none' => null,\r\n    'title' => 'orderByTitle',\r\n    'file date' => 'orderByFileDate',\r\n    'recording dates' => 'orderByRecordingDates',\r\n    'year' => 'orderByYear',\r\n    'track number' => 'orderByTrackNumber',\r\n    'album' => 'orderByAlbum',\r\n    'artist' => 'orderByArtist',\r\n    'file size' => 'orderByFileSize',\r\n    'sample rate' => 'orderBySampleRate',\r\n);\r\n// Settings and respective sanitize functions\r\n$mdsettings = array(\r\n    'mp3folder' => 'sanitizeRDir',\r\n    'mediaextensions' => 'sanitizeMediaExtensions',\r\n    'sortfiles' => 'sanitizeSortingField',\r\n    'reversefiles' => 'sanitizeBoolean',\r\n    'showtags' => null,\r\n    'customcss' => null,\r\n    'removeextension' => 'sanitizeBoolean',\r\n    'showcover' => 'sanitizeBoolean',\r\n    'packageextensions' => null,\r\n    'embedplayer' => 'sanitizeBoolean',\r\n    'embedwhere' => 'sanitizeBeforeAfter',\r\n    'tagencoding' => 'sanitizeTagEncoding',\r\n    'filenameencoding' => 'sanitizeTagEncoding',\r\n    'cachedir' => 'sanitizeWDir',\r\n    'scriptinfooter' => 'sanitizeBoolean',\r\n    'handlefeed' => 'sanitizeBoolean',\r\n    'overwritefeedlink' => 'sanitizeURL',\r\n    'calculateprefix' => 'sanitizeBoolean',\r\n);\r\n// Possible ID3 tags\r\n$mdtags = array( 'title', 'artist', 'album', 'year', 'recording_dates', 'genre', 'comment', 'track_number', 'bitrate', 'filesize', 'filedate', 'directory', 'file', 'sample_rate' );\r\n\r\n// Markup settings and respective sanitize functions\r\n$mdmarkupsettings = array(\r\n    'covermarkup' => null,\r\n    'packagetitle' => null,\r\n    'packagetexts' => null,\r\n    'downloadtext' => null,\r\n    'playtext' => null,\r\n    'stoptext' => null,\r\n    'replaceheaders' => null,\r\n    'markuptemplate' => 'sanitizeMarkupTemplate',\r\n);\r\n// Possible markup templates\r\n$mdmarkuptemplates = array(\r\n    'definition-list' => '<strong>\"DL\" mode:</strong> One table cell containing a definition list (one definition term for each tag)',\r\n    'table-cells' => '<strong>\"TR\" mode:</strong> One table cell for each tag'\r\n);\r\n\r\n// Default player colors\r\n$mdembedplayerdefaultcolors = array(\r\n    'bg' => 'E7E7E7',\r\n    'text' => '333333',\r\n    'leftbg' => 'CCCCCC',\r\n    'lefticon' => '333333',\r\n    'volslider' => '666666',\r\n    'voltrack' => 'FFFFFF',\r\n    'rightbg' => 'B4B4B4',\r\n    'rightbghover' => '999999',\r\n    'righticon' => '333333',\r\n    'righticonhover' => 'FFFFFF',\r\n    'track' => 'FFFFFF',\r\n    'loader' => 'A2CC39',\r\n    'border' => 'CCCCCC',\r\n    'tracker' => 'DDDDDD',\r\n    'skip' => '666666',\r\n);\r\n\r\n// Pre-2.6 compatibility ( From: http://codex.wordpress.org/Determining_Plugin_and_Content_Directories )\r\nif ( ! defined( 'WP_CONTENT_URL' ) )\r\n      define( 'WP_CONTENT_URL', get_option( 'siteurl' ) . '/wp-content' );\r\nif ( ! defined( 'WP_CONTENT_DIR' ) )\r\n      define( 'WP_CONTENT_DIR', ABSPATH . 'wp-content' );\r\nif ( ! defined( 'WP_PLUGIN_URL' ) )\r\n      define( 'WP_PLUGIN_URL', WP_CONTENT_URL. '/plugins' );\r\nif ( ! defined( 'WP_PLUGIN_DIR' ) )\r\n      define( 'WP_PLUGIN_DIR', WP_CONTENT_DIR . '/plugins' );\r\n\r\n// MarkDown, used for text formatting\r\nif( !function_exists( 'Markdown' ) ) include_once( \"markdown/markdown.php\" );\r\n\r\n// Friendly file size\r\nif( !function_exists( 'byte_convert' ) ){\r\n    function byte_convert( $bytes ){\r\n        $symbol = array( 'B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB' );\r\n\r\n        $exp = 0;\r\n        $converted_value = 0;\r\n        if( $bytes > 0 )\r\n        {\r\n          $exp = floor( log($bytes)/log(1024) );\r\n          $converted_value = ( $bytes/pow(1024,floor($exp)) );\r\n        }\r\n\r\n        return sprintf( '%.2f '.$symbol[$exp], $converted_value );\r\n    }\r\n}\r\n\r\n// Friendly frequency size\r\nif( !function_exists( 'hertz_convert' ) ){\r\n    function hertz_convert( $hertz ){\r\n        $symbol = array( 'Hz', 'kHz', 'MHz', 'GHz', 'THz', 'PHz', 'EHz', 'ZHz', 'YHz' );\r\n\r\n        $exp = 0;\r\n        $converted_value = 0;\r\n        if( $hertz > 0 ) {\r\n          $exp = floor( log( $hertz, 10 ) / 3 );\r\n          $converted_value = ( $hertz / pow( 1000 , floor( $exp ) ) );\r\n        }\r\n\r\n        return sprintf( '%.2f '.$symbol[$exp], $converted_value );\r\n    }\r\n}\r\n\r\n// Scans an array of strings searching for a common prefix in all items\r\nfunction calculatePrefix($arr){\r\n    $prefix = '';\r\n    if ( get_option( 'calculateprefix' ) && count( $arr ) > 1 ) {\r\n        $prefix = strip_tags( array_pop( $arr ) );\r\n        foreach ( $arr as $i ) {\r\n            for ( $c=1; $c<strlen($i); $c++ ) {\r\n                if ( strncasecmp( $prefix, $i, $c ) != 0 ) break;\r\n            }\r\n            $prefix = substr( $prefix, 0, $c-1 );\r\n        }\r\n    }\r\n    return $prefix;\r\n}\r\n\r\nfunction replaceUnderscores( $t ) {\r\n    if ( $t && false === strpos(' ', $t) ) {\r\n        //if ( false === strpos('_', $t) ) $t = str_replace( '-', '_', $t );\r\n        $t = preg_replace( '/_(_+)/i', ' - ', $t );\r\n        $t = str_replace( '_', ' ', $t );\r\n    }\r\n    return $t ;\r\n}\r\n\r\nfunction get_replaceheaders() {\r\n    $replaceheaders = array();\r\n    $arrreplaceheaders = explode( \"\\n\", trim( get_option( 'replaceheaders' ) ) );\r\n    foreach ( $arrreplaceheaders as $line ) {\r\n        $arrline = explode( ':', trim( $line ) );\r\n        if ( count( $arrline ) >= 2 ) $replaceheaders[ strtolower( trim( array_shift( $arrline ) ) ) ] = implode( ':', $arrline );\r\n    }\r\n    return $replaceheaders;\r\n}\r\n\r\nfunction md_mediaAllExtensions() {\r\n    return array( 'mp3', 'mp2', 'mp1', 'ogg', 'wma', 'm4a', 'aac', 'ac3', 'flac', 'ra', 'rm', 'wav', 'aiff', 'cda', 'mid', 'avi', 'webm', 'asf', 'wmv', 'mpg', 'avi', 'qt', 'mov', 'ogv', 'mp4', '3gp' );\r\n}\r\nfunction md_mediaExtensions() {\r\n    $ret = get_option( 'mediaextensions' );\r\n    if ( ! ( is_array( $ret ) && count( $ret ) ) ) $ret = array( 'mp3' );\r\n    return $ret;\r\n}\r\n\r\nfunction md_packageExtensions() {\r\n    $ret = explode( ',', get_option( 'packageextensions' ) );\r\n    foreach ( $ret as &$r ) $r = str_replace( '.', '', $r );\r\n    return array_filter( $ret );\r\n}\r\n\r\n// Searches post content for our smarttag and do all the magic\r\nfunction listMedia( $t ){\r\n    global $mdtags, $tagvalues, $mdsortingfields, $mdmarkuptemplates;\r\n    $errors = array();\r\n\r\n    // MP3 folder\r\n    $mdir = '/' . get_option( 'mp3folder' );\r\n    // MP3 folder URL\r\n    if ( function_exists( 'switch_to_blog' ) ) switch_to_blog(1);\r\n    $murl = get_option( 'siteurl' ) . $mdir;\r\n    if ( function_exists( 'restore_current_blog' ) ) restore_current_blog();\r\n    // MP3 folder relative URL\r\n    $mrelative = str_replace('http'.(isset($_SERVER['HTTPS'])?'s':'').'://','',$murl); $mrelative = explode( '/', $mrelative ); array_shift($mrelative); $mrelative = '/'.implode('/', $mrelative);\r\n    $mpath = ABSPATH . substr($mdir, 1);\r\n    \r\n    // Should we show the 'cover' file ('folder.jpg')?\r\n    $mshowcover = get_option( 'showcover' );\r\n\r\n    // Player position (before or after download link)\r\n    $membedwhere = get_option( 'embedwhere' );\r\n\r\n    // Should we re-encode the tags?\r\n    $mdoencode = get_option( 'tagencoding' );\r\n    if ( !$mdoencode ) $mdoencode = 'UTF-8';\r\n    $mdoencode = array_pop( explode( ' + ', $mdoencode ) );\r\n\r\n    // Should we re-encode the file names?\r\n    $mdofnencode = get_option( 'filenameencoding' );\r\n    if ( !$mdofnencode ) $mdofnencode = 'UTF-8';\r\n    $mdofnencode = array_pop( explode( ' + ', $mdofnencode ) );\r\n    \r\n    // How should we sort the files?\r\n    $msort = get_option( 'sortfiles' );\r\n    // \"Backward compatibilaziness\": it used to be a boolean value\r\n    if ( isset( $msort ) && !array_key_exists( $msort . '', $mdsortingfields ) ) $msort = 'title';\r\n\r\n    // Should the sorting be reversed?\r\n    $mreverse = ( get_option( 'reversefiles' ) == true );\r\n\r\n    // Which tags to show?\r\n    $option_showtags = str_replace( 'comments', 'comment', get_option( 'showtags' ) );\r\n    $mshowtags = array_intersect( explode( ',', $option_showtags ), $mdtags );\r\n    // If none, shows the first tag (title)\r\n    if ( !count($mshowtags) ) $mshowtags = array( $mdtags[0] );\r\n    \r\n    // Markup options\r\n    $covermarkup = get_option( 'covermarkup' );\r\n    $downloadtext = get_option( 'downloadtext' );\r\n    $playtext = get_option( 'playtext' );\r\n    $stoptext = get_option( 'stoptext' );\r\n    $replaceheaders = get_replaceheaders();\r\n    $markuptemplate = get_option( 'markuptemplate' );\r\n    if ( !sanitizeMarkupTemplate( $markuptemplate ) ) $markuptemplate = array_shift( array_keys( $mdmarkuptemplates ) ); // Default: first option\r\n\r\n    // Searching for our smarttags\r\n    $t = preg_replace( '/<p>\\[media:([^\\]]*)\\]<\\/p>/i', '[media:$1]', $t );\r\n    preg_match_all( '/\\[media:([^\\]]*)\\]/i', $t, $matches );\r\n    // Any?\r\n    if ( count( $matches ) ) {\r\n        // Each...\r\n        foreach ( $matches[1] as $folder ) {\r\n            $cover = '';\r\n            // Removing paragraph\r\n            $t = str_replace('<p>[media:'.$folder.']</p>', '[media:'.$folder.']', $t);\r\n            // Initializing variables\r\n            $ihtml = '';\r\n            $iall = array();\r\n            $ifiles = array();\r\n            $ititles = array();\r\n            $ipath = $mpath . '/' . $folder;\r\n            // Populating arrays with respective files\r\n            if ( is_dir( $ipath ) ) {\r\n                $folderalone = $folder;\r\n                if ( is_readable( $ipath ) ) {\r\n                    $idir = dir( $ipath );\r\n                    while ( false !== ( $ifile = $idir->read() ) ) if ( !is_dir( $ifile ) ) {\r\n                        $arrfile = explode( '.', $ifile );\r\n                        if ( count( $arrfile ) > 1 ) {\r\n                            $fext = array_pop( $arrfile );\r\n                        } else {\r\n                            $fext = '.none';\r\n                        }\r\n                        if ( in_array( $fext, md_mediaExtensions() ) ) {\r\n                            $ifiles[] = $ifile;\r\n                        } else {\r\n                            if ( !array_key_exists( $fext, $iall ) ) $iall[$fext] = array();\r\n                            $iall[$fext][] = $ifile;\r\n                        }\r\n                        if ( strtolower( str_ireplace( '.jpeg', '.jpg', $ifile ) ) == 'folder.jpg' ) $cover = $ifile;\r\n                    }\r\n                } else {\r\n                    $errors[] = sprintf( _md( 'Could not read: %1$s' ), $ipath );\r\n                }\r\n            } elseif ( file_exists( $ipath ) && is_readable( $ipath ) ) {\r\n                $folderalone = implode( '/', array_slice( explode( '/', $folder ), 0, -1 ) );\r\n                $apath = explode( '/', $ipath );\r\n                $ifile = array_pop( $apath );\r\n                $arrfile = explode( '.', $ifile );\r\n                if ( count( $arrfile ) > 1 ) {\r\n                    $fext = array_pop( $arrfile );\r\n                } else {\r\n                    $fext = '.none';\r\n                }\r\n                if ( in_array( $fext, md_mediaExtensions() ) ) {\r\n                    $ifiles[] = $ifile;\r\n                } else {\r\n                    if ( !array_key_exists( $fext, $iall ) ) $iall[$fext] = array();\r\n                    $iall[$fext][] = $ifile;\r\n                }\r\n                $ipath = implode( '/', $apath );\r\n            }\r\n            // Encoding folder name\r\n            $pfolder = array_filter( explode( '/', $folderalone ) );\r\n            foreach( $pfolder as $p ) $p = rawurlencode( $p );\r\n            $ufolder = implode( '/', $pfolder );\r\n            if ( $ufolder ) {\r\n                $afolder = explode( '/', $ufolder );\r\n                foreach ( $afolder as &$alevel ) $alevel = rawurlencode( $alevel );\r\n                unset( $alevel );\r\n                $ufolder = implode( '/', $afolder );\r\n            }\r\n            \r\n            $countextra = 0;\r\n            foreach ( md_packageExtensions() as $pext ) $countextra += count( $iall[$pext] );\r\n            if ( ( $mshowcover && $cover ) || $countextra ) {\r\n                $ihtml .= '<div class=\"md_albumInfo\">';\r\n\r\n                if ( $mshowcover && $cover ) {\r\n                    $coversrc = network_home_url($mdir) . '/' . ( $ufolder ? $ufolder . '/' : '' ) . $cover;\r\n                    $icovermarkup = $covermarkup ? $covermarkup : '<img class=\"md_coverImage\" src=\"[coverimage]\" alt=\"' . _md( 'Album Cover' ) . '\" />';\r\n                    $ihtml .= str_replace( '[coverimage]', $coversrc, $icovermarkup );\r\n                }\r\n\r\n                // If any \"extra\" files, inserting an extra table\r\n                // (this was very case specific and remained here)\r\n                if ( $countextra ) {\r\n                    $packagetitle = get_option( 'packagetitle' );\r\n                    $packagetexts = get_option( 'packagetexts' );\r\n                    if ( !$packagetexts ) $packagetexts = array();\r\n                    $ihtml .= '<div class=\"md_wholebook\">';\r\n                    if ( $packagetitle ) $ihtml .= '<h3 class=\"md_wholebook_title\">' . $packagetitle . '</h3>';\r\n                    $afolder = explode( '/', $folderalone );\r\n                    for ( $a=0; $a<count($afolder); $a++ ) $afolder[$a] = rawurlencode( $afolder[$a] );\r\n                    $cfolder = implode( '/', $afolder );\r\n                    $ihtml .= '<ul class=\"md_wholebook_list\">';\r\n                    foreach ( md_packageExtensions() as $pext ) {\r\n                        $cpf = 0; if ( count( $iall[$pext] ) ) foreach( $iall[$pext] as $pf ) {\r\n                            $cpf++;\r\n                            $ptext = _md( 'Download ' . strtoupper( $pext ) );\r\n                            if ( array_key_exists( $pext, $packagetexts ) && $packagetexts[$pext] ) {\r\n                                $ptext = str_replace( '[filename]', $pf, $packagetexts[$pext] );\r\n                            }\r\n                            $ihtml .= '<li class=\"d' . strtoupper(substr($pext,0,1)) . substr($pext,1) . '\"><a href=\"'.$mrelative.($mrelative!='/'?'/':'').($cfolder).'/'.rawurlencode( $pf ).'\" title=\"' . esc_attr( $pf ) . '\">'.$ptext.(count($iall[$pext])>1?' ('.$cpf.')':'').'</a></li>' ;\r\n                        }\r\n                    }\r\n                    $ihtml .= '</ul>';\r\n                    $ihtml .= '</div>';\r\n                }\r\n\r\n                $ihtml .= '</div>';\r\n            }\r\n\r\n            // Any MP3 file?\r\n            if ( count( $ifiles ) ) {\r\n                // Calculating file \"prefixes\"\r\n                $prefix = calculatePrefix( $ifiles );\r\n                $hlevel = explode( '/', $folder ); $hlevel = array_pop( $hlevel );\r\n\r\n                // Initializing array of tag values\r\n                $tagvalues = array();\r\n                foreach ( $mshowtags as $mshowtag ) $tagvalues[$mshowtag] = array();\r\n                $alltags = array();\r\n                foreach ( $ifiles as $ifile ) {\r\n                    $ifile = explode( '.', $ifile );\r\n                    $iext = array_pop( $ifile );\r\n                    $ifile = implode( '.', $ifile );\r\n                    // Getting ID3 info\r\n                    $finfo = mediadownloaderFileInfo( $mrelative.'/'.$folderalone.'/'.$ifile, $iext );\r\n                    // Loading all possible tags\r\n                    $ftags = array();\r\n                    foreach ( array( 'id3v2', 'quicktime', 'ogg', 'asf', 'flac', 'real', 'riff', 'ape', 'id3v1', 'comments' ) as $poss ) {\r\n                        if ( is_array( $finfo['tags'] ) && array_key_exists( $poss, $finfo['tags'] ) ) {\r\n                            $ftags = array_merge( $finfo['tags'][$poss], $ftags );\r\n                            if ( array_key_exists( 'comments', $finfo['tags'][$poss] ) ) {\r\n                                $ftags = array_merge( $finfo['tags'][$poss]['comments'], $ftags );\r\n                            }\r\n                        }\r\n                    }\r\n                    $ftags['bitrate'] = array( floatval( $finfo['audio']['bitrate'] ) / 1000 . 'kbps' );\r\n                    $ftags['filesize'] = array( byte_convert( $finfo['filesize'] ) );\r\n                    $ftags['filedate'] = array( date_i18n( get_option('date_format'), filemtime( $finfo['filepath'] . '/' . $finfo['filename'] ) ) );\r\n                    $ftags['directory'] = array( $hlevel );\r\n                    $ftags['file'] = array( $ifile );\r\n                    $ftags['sample_rate'] = array( hertz_convert( intval( '0' . $finfo['audio']['sample_rate'] ) ) );\r\n                    unset( $finfo );\r\n                    $alltags[$ifile] = $ftags;\r\n                    // Populating array of tag values with all tags\r\n                    foreach ( $mdtags as $mshowtag )\r\n                        if ( 'comment' == $mshowtag ) {\r\n                            if ( array_key_exists( 'text', $ftags ) && is_array( $ftags['text'] ) && trim( strip_tags( $ftags['text'][0] ) ) ) {\r\n                                $tagvalues[$mshowtag][$ifile.'.'.$iext] = $ftags['text'][0];\r\n                            } else {\r\n                                $tagvalues[$mshowtag][$ifile.'.'.$iext] = Markdown( $ftags[$mshowtag][0] );\r\n                            }\r\n                        } else {\r\n                            $tagvalues[$mshowtag][$ifile.'.'.$iext] = $ftags[$mshowtag][0];\r\n                        }\r\n                    unset( $ftags );\r\n                }\r\n                // Calculating tag \"prefixes\"\r\n                $tagprefixes = array();\r\n                foreach ( $mshowtags as $mshowtag )\r\n                    if ( 'file' == $mshowtag || 'title' == $mshowtag )\r\n                        $tagprefixes[$mshowtag] = calculatePrefix( $tagvalues[$mshowtag] );\r\n                // If set, sorting array\r\n                if ( $msort != 'none' ) {\r\n                    sort( $ifiles );\r\n                    uasort( $ifiles, $mdsortingfields[$msort] );\r\n                }\r\n                // If set, reversing array\r\n                if ( $mreverse ) $ifiles = array_reverse( $ifiles );\r\n\r\n                $tablecellsmode_header = '';\r\n                $tablecellsmode_firstfile = true;\r\n                // Building markup for each file...\r\n                foreach ( $ifiles as $ifile ) {\r\n                    $ifile = explode( '.', $ifile );\r\n                    $iext = array_pop( $ifile );\r\n                    $ifile = implode( '.', $ifile );\r\n                    $ititle = '';\r\n                    // Each tag list item\r\n                    foreach ( $mshowtags as $mshowtag ) {\r\n                        $tagvalue = $tagvalues[$mshowtag][$ifile.'.'.$iext];\r\n                        if ( '' == $tagvalue ) {\r\n                            $tagvalue = '&nbsp;';\r\n                        } else {\r\n                            // Removing \"prefix\" of this tag\r\n                            if ( '' != $tagprefixes[$mshowtag] )\r\n                                $tagvalue = str_replace( $tagprefixes[$mshowtag], '', $tagvalue );\r\n                            // $tagvalue = str_replace( $prefix, '', $tagvalue ); // Causing weird behavior in some cases\r\n                            // Cleaning...\r\n                            $tagvalue = replaceUnderscores( $tagvalue );\r\n                            // Encoding...\r\n                            if ( 'file' == $mshowtag || 'directory' == $mshowtag ) {\r\n                                if ( $mdofnencode != 'UTF-8' ) $tagvalue = iconv( $mdofnencode, 'UTF-8', $tagvalue );\r\n                            } elseif ( 'recording_dates' == $mshowtag ) {\r\n                                if ( $tagtime = strtotime( $tagvalue ) ) {\r\n                                    $tagvalue = date_i18n( get_option('date_format'), $tagtime );\r\n                                } else {\r\n                                    $tagvalue = '';\r\n                                }\r\n                            } elseif ( $mdoencode != 'UTF-8' ) {\r\n                                $tagvalue = iconv( $mdoencode, 'UTF-8', $tagvalue );\r\n                            }\r\n                        }\r\n                        // Item markup\r\n                        $columnheader = ucwords( _md( $mshowtag ) );\r\n                        if ( array_key_exists( $mshowtag, $replaceheaders ) ) $columnheader = $replaceheaders[$mshowtag];\r\n                        if ( 'table-cells' == $markuptemplate ) {\r\n                            // For \"table cells\" markup template,\r\n                            // we store a \"row with headers\", so it\r\n                            // just needs to run once\r\n                            if ( $tablecellsmode_firstfile ) {\r\n                                $tablecellsmode_header .= '<th class=\"mdTag'.$mshowtag.'\">'.$columnheader.'</th>' ;\r\n                            }\r\n                            $ititle .= '<td class=\"mdTag'.$mshowtag.'\">'.$tagvalue.'</td>' ;\r\n                        } elseif ( 'definition-list' == $markuptemplate )  {\r\n                            $ititle .= '<dt class=\"mdTag'.$mshowtag.'\">'.$columnheader.':</dt>' ;\r\n                            $ititle .= '<dd class=\"mdTag'.$mshowtag.'\">'.$tagvalue.'</dd>' ;\r\n                        }\r\n                    }\r\n                    // List markup (if any item)\r\n                    if ( '' != $ititle ) {\r\n                        if ( 'definition-list' == $markuptemplate ) {\r\n                            $ititle = '<dl class=\"mdTags\">' . $ititle . '</dl>' ;\r\n                        }\r\n                    }\r\n                    $ititles[$ifile] = $ititle ;\r\n                    // \"Row with headers\" is stored already,\r\n                    // so skip the task next iteration\r\n                    $tablecellsmode_firstfile = false;\r\n                }\r\n\r\n                // Building general markup\r\n                $tableClass = array( 'mediaTable' );\r\n                if ( TRUE == get_option( 'embedplayer' ) ) $tableClass[] = 'embedPlayer';\r\n                $tableClass[] = 'embedpos' . $membedwhere ;\r\n                $ihtml .= '<table class=\"' . implode( ' ', $tableClass ) . '\">' . \"\\n\";\r\n                $ihtml .= \"<thead>\\n<tr>\\n\";\r\n                if ( 'table-cells' == $markuptemplate ) {\r\n                    $ihtml .= $tablecellsmode_header;\r\n                } elseif ( 'definition-list' == $markuptemplate ) {\r\n                    $ihtml .= \"\\n\" . '<th class=\"mediaTitle\">&nbsp;</th>' . \"\\n\";\r\n                }\r\n                $downloadheader = _md( 'Download' );\r\n                if ( array_key_exists( 'download', $replaceheaders ) ) $downloadheader = $replaceheaders['download'];\r\n                $ihtml .= '<th class=\"mediaDownload\">'.$downloadheader.'</th>\r\n</tr>\r\n</thead>\r\n<tbody>';\r\n\r\n\r\n                // Each file...\r\n                foreach ( $ifiles as $ifile ) {\r\n                    $ifile = explode( '.', $ifile );\r\n                    $iext = array_pop( $ifile );\r\n                    $ifile = implode( '.', $ifile );\r\n                    // File name\r\n                    $showifile = $ifile ;\r\n                    // Removing prefix\r\n                    if ( array_key_exists( 'file', $tagprefixes ) )\r\n                        $showifile = str_replace( $tagprefixes['file'], '', $showifile );\r\n                    // Cleaning\r\n                    $showifile = replaceUnderscores( $showifile );\r\n                    $alltags[$ifile]['file'][0] = $showifile;\r\n                    // Download text\r\n                    $idownloadtext = $downloadtext ? $downloadtext : 'Download: [file]';\r\n                    // Play, Stop, Title and Artist texts (for embed player)\r\n                    $iplaytext = $playtext ? $playtext : 'Play: [file]';\r\n                    $istoptext = $stoptext ? $stoptext : 'Stop: [file]';\r\n                    $ititletext = $showifile;\r\n                    $iartisttext = '';\r\n                    foreach ( $mdtags as $mdtag ) {\r\n                        if ( !array_key_exists( $mdtag, $alltags[$ifile] ) ) $alltags[$ifile][$mdtag] = array( '' );\r\n                        $tagvalue = $alltags[$ifile][$mdtag][0];\r\n                        if ( 'file' == $mdtag || 'directory' == $mdtag ) {\r\n                            if ( $mdofnencode != 'UTF-8' ) $tagvalue = iconv( $mdofnencode, 'UTF-8', $tagvalue );\r\n                        } elseif ( $mdoencode != 'UTF-8' ) {\r\n                            $tagvalue = iconv( $mdoencode, 'UTF-8', $tagvalue );\r\n                        }\r\n                        // Replacing wildcards\r\n                        $idownloadtext = str_replace( '[' . $mdtag . ']', $tagvalue, $idownloadtext );\r\n                        $iplaytext = str_replace( '[' . $mdtag . ']', $tagvalue, $iplaytext );\r\n                        $istoptext = str_replace( '[' . $mdtag . ']', $tagvalue, $istoptext );\r\n                        // If \"title\", populate \"Title text\"\r\n                        if ( 'title' == $mdtag ) $ititletext = $tagvalue;\r\n                        // If \"artist\", populate \"Artist text\"\r\n                        if ( 'artist' == $mdtag && $tagvalue ) $iartisttext = str_replace( '-', '[_]', $tagvalue ) . ' - ';\r\n                    }\r\n                    \r\n                    // Getting stored markup\r\n                    $ititle = $ititles[$ifile];\r\n\r\n                    // $ititle = str_replace( $prefix, '', $ititle ); // Causing weird behavior in some cases\r\n\r\n                    // Markup\r\n                    // 20100107 - I took it away: strtoupper( $hlevel )\r\n                    $ihtml .= '<tr class=\"mdTags\">'.\"\\n\" ;\r\n                    if ( 'table-cells' == $markuptemplate ) {\r\n                        // a group of \"td's\"\r\n                        $ihtml .= $ititle . \"\\n\";\r\n                    } elseif ( 'definition-list' == $markuptemplate ) {\r\n                        // one \"td\" with a \"dl\" inside\r\n                        $ihtml .= '<td class=\"mediaTitle\">'.$ititle.'</td>'.\"\\n\" ;\r\n                    }\r\n                    // Play, Stop and Title (concatenated with Artist) texts\r\n                    // all packed in rel attribute, for embed player to read\r\n                    // and do its black magic\r\n                    $irel = array();\r\n                    if ( $iplaytext ) $irel[] = 'mediaDownloaderPlayText:' . htmlentities( $iplaytext, ENT_COMPAT, 'UTF-8' );\r\n                    if ( $istoptext ) $irel[] = 'mediaDownloaderStopText:' . htmlentities( $istoptext, ENT_COMPAT, 'UTF-8' );\r\n                    $ititletext = $iartisttext . $ititletext;\r\n                    if ( $ititletext ) $irel[] = 'mediaDownloaderTitleText:' . htmlentities( $ititletext, ENT_COMPAT, 'UTF-8' );\r\n                    $irel = implode( ';', $irel );\r\n                    $ihtml .= '<td class=\"mediaDownload\"><a href=\"'.network_home_url($mdir).'/'.($ufolder?$ufolder.'/':'').rawurlencode( $ifile ).'.'.$iext.'\" title=\"' . htmlentities( $showifile, ENT_COMPAT, 'UTF-8' ) . '\" ' . ( $irel ? 'rel=\"' . $irel . '\"' : '' ) . ' id=\"mdfile_' . sanitize_title( $ifile ) . '\">'.$idownloadtext.'</a></td>'.\"\\n\" ;\r\n                    $ihtml .= '</tr>'.\"\\n\" ;\r\n                }\r\n                $ihtml .= '</tbody></table>'.\"\\n\" ;\r\n\r\n            }\r\n            \r\n            if ( count( $errors ) ) {\r\n                $errorHtml = '<div class=\"mediaDownloaderErrors\">';\r\n                foreach ( $errors as $error ) $errorHtml .= '<p><strong>' . _md( 'Error:' ) . '</strong> ' . $error . '</p>';\r\n                $errorHtml .= '</div>';\r\n                $ihtml .= $errorHtml;\r\n            }\r\n            // Finally, replacing our smart tag\r\n            $t = str_replace( '[media:'.$folder.']', $ihtml, $t );\r\n        }\r\n    }\r\n    return $t ;\r\n}\r\n// To sort file array by some tag\r\nfunction orderByTag( $a, $b, $tag ) {\r\n    if ( !is_array( $tag ) ) $tag = array( $tag );\r\n    global $tagvalues;\r\n    $ret = 0;\r\n    foreach ( $tag as $t ) {\r\n        $ret = strnatcmp( $tagvalues[$t][$a], $tagvalues[$t][$b] );\r\n        if ( 0 != $ret ) break;\r\n    }\r\n    if ( 0 == $ret ) $ret = strnatcmp( $a, $b );\r\n    return $ret;\r\n}\r\nfunction orderByTitle( $a, $b ) {\r\n    return orderByTag( $a, $b, array( 'title', 'filedate' ) );\r\n}\r\nfunction orderByFileDate( $a, $b ) {\r\n    return orderByTag( $a, $b, 'filedate' );\r\n}\r\nfunction orderByRecordingDates( $a, $b ) {\r\n    return orderByTag( $a, $b, 'recording_dates', 'year', 'filedate' );\r\n}\r\nfunction orderByYear( $a, $b ) {\r\n    return orderByTag( $a, $b, array( 'year', 'track_number', 'filedate' ) );\r\n}\r\nfunction orderByTrackNumber( $a, $b ) {\r\n    return orderByTag( $a, $b, 'track_number' );\r\n}\r\nfunction orderByAlbum( $a, $b ) {\r\n    return orderByTag( $a, $b, array( 'album', 'track_number' ) );\r\n}\r\nfunction orderByArtist( $a, $b ) {\r\n    return orderByTag( $a, $b, array( 'artist', 'album', 'track_number' ) );\r\n}\r\nfunction orderByFileSize( $a, $b ) {\r\n    return orderByTag( $a, $b, 'filesize' );\r\n}\r\nfunction orderBySampleRate( $a, $b ) {\r\n    return orderByTag( $a, $b, 'sample_rate' );\r\n}\r\n\r\nfunction md_plugin_dir() {\r\n    $vdir = __DIR__;\r\n    if ( '__DIR__' == $vdir ) $vdir = dirname( __FILE__ );\r\n    return array_shift( explode( DIRECTORY_SEPARATOR, plugin_basename( array_pop( explode( DIRECTORY_SEPARATOR, $vdir ) ) ) ) );\r\n}\r\nfunction md_plugin_url() {\r\n    return WP_PLUGIN_URL . '/' . md_plugin_dir();\r\n}\r\n\r\nfunction mediadownloader( $t ) {\r\n    if ( !is_feed() || !get_option( 'handlefeed' ) ) :\r\n        $t = listMedia( $t );\r\n        if ( TRUE == get_option( 'removeextension' ) ) {\r\n            $t = preg_replace(\r\n                '/href\\=[\\\\\\'\\\"](.*)'.preg_quote('.mp3').'[\\\\\\'\\\"]/im',\r\n                \"href=\\\"\".WP_PLUGIN_URL.\"/\".md_plugin_dir().\"/getfile.php?f=$1\\\"\",\r\n                $t\r\n            );\r\n        };\r\n    elseif ( is_feed() ) :\r\n        $t = preg_replace( '/<p>\\[media:([^\\]]*)\\]<\\/p>/i', '<p><small>' . _md( '(See attached files...)' ) . '</small></p>', $t );\r\n    endif;\r\n        \r\n    /* -- CASE SPECIFIC: -- */\r\n    $t = listarCategorias( $t );\r\n    $t = listarCategoriasEx( $t );\r\n    $t = listarIdiomas( $t );\r\n    /* -- END CASE SPECIFIC; -- */\r\n    return $t;\r\n}\r\n\r\n\r\nfunction mediadownloaderFileLength( $filename ) {\r\n    // Initialize getID3 engine\r\n    $getID3 = new getID3;\r\n    // Analyze file and store returned data in $ThisFileInfo\r\n    $ThisFileInfo = $getID3->analyze( $filename );\r\n    // Optional: copies data from all subarrays of [tags] into [comment] so\r\n    // metadata is all available in one location for all tag formats\r\n    // metainformation is always available under [tags] even if this is not called\r\n    getid3_lib::CopyTagsToComments( $ThisFileInfo );\r\n}\r\n\r\n// Get ID3 tags from file\r\nfunction mediadownloaderFileInfo( $f, $ext ) {\r\n    // File path\r\n    if ( function_exists( 'switch_to_blog' ) ) switch_to_blog(1);\r\n    $relURL = str_replace( 'http'.(isset($_SERVER['HTTPS'])?'s':'').'://'.$_SERVER['SERVER_NAME'], '', get_option( 'siteurl' ) );\r\n    if ( function_exists( 'restore_current_blog' ) ) restore_current_blog();\r\n    if ( stripos( $f, $relURL ) === 0 ) $f = substr( $f, strlen( $relURL ) );\r\n    $f = ABSPATH . $f . '.' . $ext;\r\n    $f = preg_replace( '|/+|ims', '/', $f );\r\n\r\n    // Checking cache\r\n    $return = false;\r\n    $hash = md5( $f );\r\n    $cachedir = trim( get_option( 'cachedir' ) );\r\n    $cachefile = ABSPATH . '/' . $cachedir . '/md-' . $hash . '.cache' ;\r\n    if ( $cachedir && is_readable( $cachefile )  && file_exists( $f ) && ( filemtime( $cachefile ) >= filemtime( $f ) ) ) {\r\n\r\n        $return = unserialize( file_get_contents( $cachefile ) );\r\n        if ( $return ) return $return;\r\n\r\n    }\r\n    if ( !$return ) {\r\n\r\n        // include getID3() library (can be in a different directory if full path is specified)\r\n        require_once('getid3/getid3.php');\r\n        // Initialize getID3 engine\r\n        $getID3 = new getID3;\r\n        $mdoencode = get_option( 'tagencoding' );\r\n        $mdoencode = array_shift( explode( ' + ', $mdoencode ) );\r\n        if ( 'UTF-8' != $mdoencode ) $getID3->setOption( array( 'encoding' => $mdoencode ) );\r\n        // Analyze file and store returned data in $ThisFileInfo\r\n        if ( $ThisFileInfo = $getID3->analyze( $f ) ) {\r\n            // Saving cache\r\n            if ( $cachedir && is_writeable( ABSPATH . '/' . $cachedir ) ) file_put_contents( $cachefile, serialize( $ThisFileInfo ) );\r\n        }\r\n        return $ThisFileInfo;\r\n    }\r\n}\r\n// File size\r\nfunction mediadownloaderFileSize( $f, $ext ){\r\n    if ( 0 === stripos( $f, get_option( 'siteurl' ) ) ) $f = str_replace( get_option( 'siteurl' ), '', $f );\r\n    $f = ABSPATH . substr( $f, 1 ) . '.' . $ext;\r\n    if ( !file_exists( $f ) ) $f = urldecode( $f );\r\n    return filesize( $f );\r\n}\r\n// Extract MP3 links form post content\r\nfunction mediadownloaderEnclosures( $adjacentmarkup = false ){\r\n    $allmatches = array();\r\n    global $post;\r\n    $cont = listMedia( get_the_content( $post->ID ) );\r\n    foreach ( md_mediaExtensions() as $mext ) {\r\n        $ret = array();\r\n        preg_match_all( '/href=[\\\\\\'\"](.*)'.preg_quote('.'.$mext).'[\\\\\\'\"]/im', $cont, $matches );\r\n        preg_match_all( '/href=[\\\\\\'\"].*getfile\\.php\\?\\=(.*)[\\\\\\'\"]/im', $cont, $newmatches );\r\n        // It makes no sense, \"there can be only one\", but just in case...\r\n        if ( count( $matches ) && count( $matches[1] ) ) $ret = array_unique( array_merge( $matches[1], $newmatches[1] ) );\r\n    \r\n        // Should we get only the MP3 URL's?\r\n        if ( !$adjacentmarkup ) {\r\n            foreach ( $ret as $r ) if ( '/' == substr( $r, 0, 1 ) ) $r = 'http'.(isset($_SERVER['HTTPS'])?'s':'').'://' . $_SERVER['SERVER_NAME'] . $r;\r\n            $allmatches[$mext] = $ret;\r\n        \r\n        // Or get all the markup around them?\r\n        } else {\r\n            $markuptemplate = get_option( 'markuptemplate' );\r\n            $adj = array();\r\n            $tablehead = '';\r\n            // For each MP3 URL...\r\n            foreach ( $ret as $r ) {\r\n                $adj[$r] = $r;\r\n                // Dirty magic to get the markup around it...\r\n                $rarr = explode( $r . '.' . $mext, $cont );\r\n                if ( count( $rarr ) > 1 ) {\r\n                    $line = substr( $rarr[0], strripos( $rarr[0], '<tr class=\"mdTags\">' ) );\r\n                    $line .= substr( $rarr[1], 0, stripos( $rarr[1], '</tr>' ) ) .'</tr>';\r\n                    if ( 'definition-list' == $markuptemplate ) {\r\n                        $line = substr( $line, strripos( $line, '<dl class=\"mdTags\">' ) );\r\n                        $line = substr( $line, 0, stripos( $line, '</dl>' ) ) . '</dl>';\r\n                        $adj[$r] = $line;\r\n                    } elseif ( 'table-cells' == $markuptemplate ) {\r\n\r\n                        if ( '' == $tablehead ) {\r\n                            $safe_r = str_replace( array('/', '.', ':', '%', '-'), array('\\\\/', '\\\\.', '\\\\:', '\\\\%', '\\\\-'), $r );\r\n                            preg_match_all( '/\\<table([^\\>]*)\\>(.*?)'.$safe_r.'(.*?)\\<\\/table\\>/ims', $cont, $adjtable );\r\n                            if ( count( $adjtable ) && count( $adjtable[0] ) ) {\r\n                                $ftable = $adjtable[0][0];\r\n                                $ftable = substr( $ftable, strripos( $ftable, '<table' ) );\r\n                                $tablehead = substr( $ftable, 0, stripos( $ftable, '</thead>' ) ) . '</thead>';\r\n                            }\r\n                        }\r\n\r\n                        $adj[$r] = ($tablehead?$tablehead:'<table>') . '<tbody>' . $line . '</tbody></table>';\r\n                    }\r\n                }\r\n            }\r\n            $allmatches[$mext] = $adj;\r\n        }\r\n    }\r\n    return $allmatches;\r\n} \r\n// Generate ATOM tags\r\nfunction mediadownloaderAtom(){\r\n    $t = '';\r\n    $allmatches = mediadownloaderEnclosures();\r\n    foreach ( $allmatches as $mext => $matches ) {\r\n        foreach ( $matches as $m ) {\r\n            //$t.='<link rel=\"enclosure\" title=\"'.basename($m).'\" length=\"'.mediadownloaderFileSize($m, $mext).'\" href=\"'.WP_PLUGIN_URL.'/media-downloader/getfile.php?f='.urlencode($m).'\" type=\"audio/mpeg\" />';\r\n            $t .= '<link rel=\"enclosure\" title=\"' . basename( $m ) . '\" length=\"' . mediadownloaderFileSize( $m, $mext ) . '\" href=\"' . ( $m . '.' . $mext ) . '\" type=\"audio/mpeg\" />';\r\n\t    }\r\n\t}\r\n    echo $t;\r\n    //return $t;\r\n}\r\n// Generate RSS tags\r\nfunction mediadownloaderRss(){\r\n    global $post;\r\n    $postdate = strtotime( $post->post_date_gmt );\r\n    $t = '';\r\n    $allmatches = mediadownloaderEnclosures( true );\r\n    foreach ( $allmatches as $mext => $matches ) {\r\n        foreach ( $matches as $m => $adjacentmarkup ) {\r\n            $postdate -= 2;\r\n            //$t.='<enclosure title=\"'.basename($m).'\" url=\"'.WP_PLUGIN_URL.'/media-downloader/getfile.php?f='.urlencode($m).'\" length=\"'.mediadownloaderFileSize($m, $mext).'\" type=\"audio/mpeg\" />';\r\n            //$t .= '<enclosure title=\"' . basename( $m ) . '\" url=\"' . ( $m . '.' . $mext ) . '\" length=\"' . mediadownloaderFileSize( $m, $mext ) . '\" type=\"audio/mpeg\" />';\r\n            $t .= '</item>';\r\n            $t .= '<item>';\r\n            $t .= '<title>' . sprintf( _md( 'Attached file: %1$s - %2$s' ), urldecode( basename( $m ) ), get_the_title($post->ID) ) . '</title>';\r\n            $t .= '<link>' . get_permalink($post->ID) . '#mdfile_' . sanitize_title( basename( urldecode( $m ) ) ) . '</link>';\r\n            $t .= '<description><![CDATA[' . $adjacentmarkup . ']]></description>';\r\n            $t .= '<pubDate>' . date( DATE_RSS, $postdate ) . '</pubDate>';\r\n            $t .= '<guid>' . get_permalink($post->ID) . '#mdfile_' . sanitize_title( basename( urldecode( $m ) ) ) . '</guid>';\r\n            $t .= '<enclosure url=\"' . ( $m . '.' . $mext ) . '\" length=\"' . mediadownloaderFileSize( $m, $mext ) . '\" type=\"audio/mpeg\" />';\r\n\t    }\r\n\t}\r\n    echo $t;\r\n    //return $t; \r\n}\r\n  \r\nadd_filter( 'the_content', 'mediadownloader' );\r\n\r\nif ( get_option( 'handlefeed' ) ) :\r\n    add_action( 'atom_entry', 'mediadownloaderAtom' );\r\n    //add_action( 'rss_item', 'mediadownloaderRss' );\r\n    add_action( 'rss2_item', 'mediadownloaderRss' );\r\n    // Lowering cache lifetime to 4 hours\r\n    add_filter( 'wp_feed_cache_transient_lifetime', create_function('$a','$newvalue = 4*3600; if ( $a < $newvalue ) $a = $newvalue; return $a;') );\r\nendif;\r\n\r\nfunction mediaDownloaderEnqueueScripts() {\r\n    // If any custom css, we enqueue our php that throws this css\r\n    $customcss = trim( get_option( 'customcss' ) );\r\n    if ( '' != $customcss ) {\r\n        wp_register_style( 'mediadownloaderCss', md_plugin_url() . '/css/mediadownloader-css.php' );\r\n        wp_enqueue_style( 'mediadownloaderCss' );\r\n    }\r\n\r\n    // Enqueuing JQPlugin (browser plugins detection)\r\n    wp_enqueue_script( 'jqplugin', md_plugin_url() . '/js/jquery.jqplugin.1.0.2.min.js', array('jquery'), date( 'YmdHis', filemtime( dirname(__FILE__) . '/js/jquery.jqplugin.1.0.2.min.js' ) ), get_option( 'scriptinfooter' ) );\r\n    // Enqueuing our javascript\r\n    wp_enqueue_script( 'mediadownloaderJs', md_plugin_url() . '/js/mediadownloader.js', array('jquery'), date( 'YmdHis', filemtime( dirname(__FILE__) . '/js/mediadownloader.js' ) ), get_option( 'scriptinfooter' ) );\r\n    \r\n    // Passing options to our javascript\r\n    add_action( 'get_header', 'mediaDownloaderLocalizeScript' );\r\n}\r\n    \r\n// Passing options to our javascript\r\nfunction mediaDownloaderLocalizeScript() {\r\n    global $mdembedplayerdefaultcolors;\r\n    $mdembedcolors = array();\r\n    foreach( $mdembedplayerdefaultcolors as $mdcolor => $mddefault ) {\r\n        $mdembedcolors[$mdcolor] = str_replace( '#', '', get_option( $mdcolor . '_embed_color' ) );\r\n        if ( !trim($mdembedcolors[$mdcolor]) ) $mdembedcolors[$mdcolor] = $mddefault;\r\n    }\r\n    $replaceheaders = get_replaceheaders();\r\n    $playheader = _md( 'Play' );\r\n    if ( array_key_exists( 'play', $replaceheaders ) ) $playheader = $replaceheaders['play'];\r\n    wp_localize_script( 'mediadownloaderJs', 'mdEmbedColors', $mdembedcolors );\r\n    wp_localize_script( 'mediadownloaderJs', 'mdStringTable', array(\r\n        'pluginURL' => md_plugin_url() . '/',\r\n        'playColumnText' => $playheader,\r\n        'downloadTitleText' => _md( 'Download:' ),\r\n        'playTitleText' => _md( 'Play:' ),\r\n        'stopTitleText' => _md( 'Stop:' ),\r\n    ) );\r\n}\r\n\r\nfunction mediaDownloaderInit() {\r\n    load_textdomain( 'media-downloader', WP_LANG_DIR . '/mediadownloader/mediadownloader-' . apply_filters( 'plugin_locale', get_locale(), 'media-downloader' ) . '.mo' );\r\n    load_plugin_textdomain( 'media-downloader', false, basename( dirname( __FILE__ ) ) . '/languages' );\r\n    /*\r\n    // I'm testing the lines below to avoid problems with symlinks,\r\n    // but it's not over yet...\r\n    $pdir = array_key_exists( 'SCRIPT_FILENAME', $_SERVER ) ? array_shift( explode( '/wp-', $_SERVER[\"SCRIPT_FILENAME\"] ) ) . '/wp-content/plugins/media-downloader' : dirname( plugin_basename( __FILE__ ) );\r\n    load_plugin_textdomain( 'media-downloader', false, $pdir . '/languages/' );\r\n    */\r\n    mediaDownloaderEnqueueScripts();\r\n    add_filter( 'set-screen-option', 'mediadownloader_adm_save_options', 10, 3 );\r\n}\r\nadd_action( 'init', 'mediaDownloaderInit' );\r\n\r\n\r\nadd_action( 'admin_init', 'md_admin_init' );\r\n\r\nfunction md_admin_init() {\r\n    wp_register_style( 'md-admin-css', md_plugin_url() . '/css/admin.css' );\r\n    wp_register_script( 'md-admin-script', md_plugin_url() . '/js/admin.js' );\r\n}\r\nfunction md_admin_styles() {\r\n    wp_enqueue_style( 'md-admin-css' );\r\n}\r\nfunction md_admin_scripts() {\r\n    wp_enqueue_script( 'md-admin-script', false, array( 'jquery' ) );\r\n}\r\n\r\n// Our options screens...\r\nadd_action( 'admin_menu', 'mediadownloader_menu' );\r\n\r\nfunction mediadownloader_menu() {\r\n    $oppage = add_options_page( 'Media Downloader Options', 'Media Downloader', 'manage_options', 'mediadownloader-options', 'mediadownloader_options' );\r\n    add_action( 'admin_print_styles-' . $oppage, 'md_admin_styles' );\r\n    add_action( 'admin_print_scripts-' . $oppage, 'md_admin_scripts');\r\n    if ( array_key_exists( 'tag-editor', $_GET ) ) add_action( \"load-$oppage\", 'mediadownloader_adm_add_options' );\r\n}\r\n\r\n\r\nfunction mediadownloader_adm_add_options() {\r\n    $option = 'per_page'; \r\n    $args = array(\r\n        'label' => sprintf( __( 'items (min: %d - max: %d)' ), 10, 100 ),\r\n        'default' => 50,\r\n        'option' => 'mediadownloader_adm_items_per_page'\r\n    );\r\n    add_screen_option( $option, $args );\r\n}\r\nfunction mediadownloader_adm_save_options( $status, $option, $value ) {\r\n    if ( 'mediadownloader_adm_items_per_page' == $option ) return ( $value >= 10 && $value <= 100 ) ? $value : false;\r\n}\r\n\r\nfunction mediadownloader_options() {\r\n    // Basically, user input forms...\r\n    if ( isset( $_GET['markup-options'] ) ) {\r\n        require_once(\"mediadownloader-markup-options.php\");\r\n    } elseif ( isset( $_GET['more-options'] ) ) {\r\n        require_once(\"mediadownloader-more-options.php\");\r\n    } elseif ( isset( $_GET['tag-editor'] ) ) {\r\n        require_once(\"mediadownloader-tag-editor.php\");\r\n    } else {\r\n        require_once(\"mediadownloader-options.php\");\r\n    }\r\n}\r\n\r\n// Add Settings link to plugins - code from GD Star Ratings\r\n// (as seen in http://www.whypad.com/posts/wordpress-add-settings-link-to-plugins-page/785/ )\r\nfunction mediadownloader_settings_link( $links, $file ) {\r\n    $this_plugin = plugin_basename( array_pop( explode( DIRECTORY_SEPARATOR, dirname( __FILE__ ) ) ) );\r\n    if ( $file == $this_plugin ) {\r\n        $settings_link = '<a href=\"options-general.php?page=mediadownloader-options\">' . _md( 'Settings' ) . '</a>';\r\n        array_unshift( $links, $settings_link );\r\n    }\r\n    return $links;\r\n}\r\nadd_filter( 'plugin_action_links', 'mediadownloader_settings_link', 10, 2 );\r\n\r\n// Registering our settings...\r\nadd_action( 'admin_init', 'mediadownloader_settings' );\r\n\r\nfunction mediadownloader_settings() {\r\n    global $mdsettings;\r\n    foreach ( $mdsettings as $mdsetting => $mdsanitizefunction ) register_setting( 'md_options', $mdsetting, $mdsanitizefunction );\r\n\r\n    global $mdmarkupsettings;\r\n    foreach ( $mdmarkupsettings as $mdmarkupsetting => $mdsanitizefunction ) register_setting( 'md_markup_options', $mdmarkupsetting, $mdsanitizefunction );\r\n\r\n    global $mdembedplayerdefaultcolors;\r\n    foreach ( $mdembedplayerdefaultcolors as $mdcolor => $mddefault ) register_setting( 'md_more_options', $mdcolor . '_embed_color', 'sanitizeHEXColor' );\r\n}\r\n\r\nfunction md_self_link() {\r\n\t$host = @parse_url( home_url() );\r\n\treturn esc_url( apply_filters( 'md_self_link', set_url_scheme( 'http://' . $host['host'] . stripslashes($_SERVER['REQUEST_URI']) ) ) );\r\n}\r\nfunction md_filter_feed_link( $link, $type = 'rss2' ) {\r\n    $overwritefeedlink = ( 'rss2' == $type ) ? trim( get_option( 'overwritefeedlink' ) ) : false;\r\n    return $overwritefeedlink ? $overwritefeedlink : $link;\r\n}\r\nadd_filter( 'md_self_link', 'md_filter_feed_link' );\r\nadd_filter( 'feed_link', 'md_filter_feed_link' );\r\n\r\n// Functions to sanitize user input\r\nfunction sanitizeRDir( $d ){\r\n    return is_readable( ABSPATH . $d ) ? $d : '' ;\r\n}\r\nfunction sanitizeWDir( $d ){\r\n    return is_writeable( ABSPATH . $d ) ? $d : '' ;\r\n}\r\nfunction sanitizeArray( $i, $a ){\r\n    if ( is_array( $i ) ) {\r\n        return array_intersect( $i, $a );\r\n    } else {\r\n        return in_array( $i, $a ) ? $i : '' ;\r\n    }\r\n}\r\nfunction sanitizeMediaExtensions( $t ) {\r\n    return sanitizeArray( $t, md_mediaAllExtensions() );\r\n}\r\nfunction sanitizeSortingField( $t ){\r\n    global $mdsortingfields;\r\n    return sanitizeArray( $t, array_keys( $mdsortingfields ) );\r\n}\r\nfunction sanitizeBeforeAfter( $t ){\r\n    return sanitizeArray( $t, array( 'before', 'after' ) );\r\n}\r\nfunction sanitizeTagEncoding( $t ){\r\n    global $mdencodings;\r\n    return sanitizeArray( $t, $mdencodings );\r\n}\r\nfunction sanitizeBoolean( $b ){\r\n    return $b == 1 ;\r\n}\r\nfunction sanitizeHEXColor( $c ){\r\n    return preg_match( '/^\\s*#?[0-9A-F]{3,6}\\s*$/i', $c, $m ) ? trim( str_replace( '#', '', $c ) ) : '';\r\n}\r\nfunction sanitizeMarkupTemplate( $t ){\r\n    global $mdmarkuptemplates;\r\n    return sanitizeArray( $t, array_keys( $mdmarkuptemplates ) );\r\n}\r\nfunction sanitizeURL( $t ) {\r\n    return filter_var( $t, FILTER_VALIDATE_URL );\r\n}\r\n\r\n\r\n// I used these functions below to \"internationalize\" (localize) some strings,\r\n// left them here for \"backward compatibilaziness\"\r\n\r\nfunction _md( $t ) {\r\n//    if ( function_exists( 'icl_register_string' ) ) {\r\n//        icl_register_string( 'Media Downloader', $t, $t );\r\n//        return icl_t( 'Media Downloader', $t, $t );\r\n//    } else {\r\n        return __( $t, 'media-downloader' );\r\n//    }\r\n}\r\nfunction _mde( $t ) {\r\n//    if ( function_exists( 'icl_register_string' ) ) {\r\n//        icl_register_string( 'Media Downloader', $t, $t );\r\n//        echo icl_t( 'Media Downloader', $t, $t );\r\n//    } else {\r\n        return _e( $t, 'media-downloader' );\r\n//    }\r\n}\r\nfunction _mdn( $ts, $tp, $n ) {\r\n//    if ( function_exists( 'icl_register_string' ) ) {\r\n//        icl_register_string( 'Media Downloader', $ts, $ts );\r\n//        icl_register_string( 'Media Downloader', $tp, $tp );\r\n//        if ( 1 != $n ) {\r\n//            return icl_t( 'Media Downloader', $tp, $tp );\r\n//        } else {\r\n//            return icl_t( 'Media Downloader', $ts, $ts );\r\n//        }\r\n//    } else {\r\n        return _n( $ts, $tp, $n, 'media-downloader' );\r\n//    }\r\n}\r\n\r\n\r\n/* -- CASE SPECIFIC: -- */\r\n\r\nadd_filter( 'get_previous_post_where', 'corrige_qtrans_excludeUntransPosts' );\r\nadd_filter( 'get_next_post_where', 'corrige_qtrans_excludeUntransPosts' );\r\nadd_filter( 'posts_where_request', 'corrige_qtrans_excludeUntransPosts' );\r\n\r\nfunction corrige_qtrans_excludeUntransPosts( $where ) {\r\n    if ( function_exists( 'qtrans_getLanguage' ) ) {\r\n        $l = qtrans_getLanguage();\r\n        if ( trim( $l ) ) {\r\n\t        global $q_config, $wpdb;\r\n\t        if ( $q_config['hide_untranslated'] ) {\r\n\t\t        $where .= \" AND post_content LIKE '%<!--:\".$l.\"-->%'\";\r\n\t        }\r\n\t    }\r\n\t}\r\n\treturn $where;\r\n}\r\n\r\nfunction listarCategorias($t){\r\n    preg_match_all('/\\[cat:([^\\]]*)\\]/i',$t,$matches);\r\n    if(count($matches)){\r\n        foreach($matches[1] as $catname){\r\n            $myposts = get_posts(array('numberposts'=>-1,'post_type'=>'post','category_name'=>$catname,'suppress_filters'=>0));\r\n            $listposts='';\r\n\r\n            if(count($myposts)){\r\n                global $post;\r\n                $prepost=$post;\r\n                $listposts.='<ul class=\"inner-cat\">';\r\n                foreach($myposts as $post) $listposts.='<li><a href=\"'.get_permalink().'\">'.get_the_title().'</a></li>';\r\n                $listposts.='</ul>';\r\n                $post=$prepost;\r\n            }\r\n            $t = tiraDoParagrafo('[cat:'.$catname.']', $t);\r\n            $t = str_replace('[cat:'.$catname.']', $listposts, $t);\r\n        }\r\n    }\r\n    return $t;\r\n}\r\n\r\nfunction listarCategoriasEx($t){\r\n    preg_match_all('/\\[catex:([^\\]]*)\\]/i',$t,$matches);\r\n    if(count($matches)){\r\n        foreach($matches[1] as $catname){\r\n            $myposts = get_posts(array('post_type'=>'post','category_name'=>$catname,'suppress_filters'=>0));\r\n            $listposts='';\r\n            if(count($myposts)){\r\n                global $post;\r\n                $prepost=$post;\r\n                $listposts.='<dl class=\"inner-cat\">';\r\n                foreach($myposts as $post) $listposts.='<dt><a href=\"'.get_permalink().'\">'.get_the_title().'</a></dt>'.(trim($post->post_excerpt)?'<dd>'.$post->post_excerpt.'</dd>':'');\r\n                $listposts.='</dl>';\r\n                $post=$prepost;\r\n            }\r\n            $t = tiraDoParagrafo('[catex:'.$catname.']', $t);\r\n            $t = str_replace('[catex:'.$catname.']', $listposts, $t);\r\n        }\r\n    }\r\n    return $t;\r\n}\r\n\r\nfunction listarIdiomas($t){\r\n    if ( stripos($t, '[languages]')!==false && function_exists('qtrans_generateLanguageSelectCode') ){\r\n        ob_start();\r\n        qtrans_generateLanguageSelectCode();\r\n        $i=ob_get_contents();\r\n        ob_end_clean();\r\n        ob_end_flush();\r\n        $t = tiraDoParagrafo('[languages]', $t);\r\n        $t = str_replace('[languages]', $i, $t);\r\n    }\r\n    return $t;\r\n}\r\n\r\nfunction tiraDoParagrafo($tag, $t){\r\n    return str_replace('<p>'.$tag.'</p>', $tag, $t);\r\n}\r\n\r\n/* -- END CASE SPECIFIC; -- */\r\n\r\n?>\r\n", "=== Media Downloader ===\nContributors: Ederson Peka, Jonathan Jose from www.flowconversatilidad.net (Spanish Translation)\nTags: media, audio, podcast, post, player, mp3, flash\nRequires at least: 3.0\nTested up to: 3.6\nStable tag: 0.1.993\nDonate link: https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=ederson@gmail.com&lc=BR&currency_code=BRL&item_name=Media%20Downloader%20Wordpress%20Plugin\n\nLists MP3 files from a folder. Portuguese: Lista arquivos MP3 de um diret\u00f3rio. Spanish: Lista todos los MP3 de un directorio.\n\n== Description ==\n\nMedia Downloader plugin lists MP3 files from a folder by replacing the [media] smart tag. It reads MP3 information directly from the files. It also can try to get rid of stupid content blockers (mainly corporatives), changing all links to .MP3 files into some download URL without the string \"MP3\".\n\n= Portuguese: Descri\u00e7\u00e3o =\nO plugin Media Downloader lista os arquivos MP3 de um diret\u00f3rio, substituindo a \"smart tag\" [media]. Ele l\u00ea a meta-informa\u00e7\u00e3o diretamente dos arquivos MP3. Tamb\u00e9m pode tentar se livrar de bloqueadores de conte\u00fado idiotas (geralmente corporativos), transformando todos os links para arquivos .MP3 em alguma URL de download sem o texto \"MP3\".\n\n= Spanish: Descripcion =\nEl plugin Media Downloader lista archivos MP3 de un directorio cambiando [media] tag. Lee informacion de los MP3 directamente desde el archivo. Tambi\u00e9n puede intentar deshacerse de est\u00fapidos bloqueadores de contenido (principalmente corporativos), cambiando todos los enlaces a .MP3 en alguna URL de descarga sin la cadena \"MP3\".\n\n== Installation ==\n\n1. Extract the contents of the archive\n2. Upload the contents of the mediadownloader folder to your 'wp-content/plugins' folder\n3. Log in to your WordPress admin and got to the 'Plugins' section. You should now see Media Downloader in the list of available plugins\n4. Activate the plugin by clicking the 'activate' link\n5. Now go to the 'Options' section and select 'Media Downloader' where you can configure the plugin\n\n= Portuguese: Instala\u00e7\u00e3o =\n1. Extraia o conte\u00fado do arquivo\n2. Fa\u00e7a upload do conte\u00fado do diret\u00f3rio mediadownloader para dentro do diret\u00f3rio 'wp-content/plugins'\n3. Acesse o painel do WordPress e v\u00e1 para a se\u00e7\u00e3o 'Plugins'. Agora voc\u00ea j\u00e1 deve ver o Media Downloader na lista de plugins dispon\u00edveis\n4. Ative o plugin clicando no link 'ativar'\n5. Agora v\u00e1 at\u00e9 a se\u00e7\u00e3o 'Op\u00e7\u00f5es' e selecione 'Media Downloader', onde voc\u00ea pode configurar o plugin\n\n= Spanish: Instalacion =\n1. Extraiga el contenido del archivo\n2. Subir el contenido de la carpeta mediadownloader a su carpeta 'wp-content/plugins'\n3. Entrar en su wordpress admin y llegu\u00e9 a la secci\u00f3n 'Plugins'. Ahora debe ver Media Downloader en la lista de plugins disponibles\n4. Activar el plugin haciendo clic en el 'activar' \n5. Ahora vaya a secci\u00f3n 'Opciones' y seleccione 'Media Downloader', donde puede configurar el plugin\n\n== Frequently Asked Questions ==\n\n= How should I configure it? Where should I throw my MP3 files? How do I use this thing? What's the smart tag syntax? =\n\nAn example may help... Say you have a folder called \"music\" under your root folder, and for its time it has some subfolders, as, \"Beethoven\", \"Mozart\", \"Bach\" and \"Haendel\".\n\nFirst of all, you should configure Media Downloader by typing \"music\" in the \"MP3 Folder\" field, on settings page (and then clicking on \"Update Options\", for sure).\n\nThat done, you can edit a post talking 'bout Johann Sebastian Bach and insert anywhere on it the smart tag, \"[media:Bach]\". Media Downloader will create a list of all files under the \"music/Bach\" directory. This is actually very simple. ;-)\n\n= Portuguese: Perguntas Freq\u00fcentes =\n= Como configurar? Onde jogar os arquivos MP3? Como eu uso essa tranqueira? Qual \u00e9 a sintaxe da \"smart tag\"? =\n\nUm exemplo deve ajudar... Digamos que voc\u00ea tenha um diret\u00f3rio chamado \"musica\" dentro do seu diret\u00f3rio raiz, e por sua vez ele tenha subdiret\u00f3rios, como: \"Villa-Lobos\", \"Jobim\", \"Pixinguinha\" e \"Martins\".\n\nAntes de tudo, voc\u00ea deve configurar o Media Downloader, digitando \"musica\" no campo \"MP3 Folder\", na p\u00e1gina de configura\u00e7\u00f5es (e clicando em \"Atualizar Op\u00e7\u00f5es\", claro).\n\nFeito isto, voc\u00ea pode editar um post falando sobre Jo\u00e3o Carlos Martins e inserir em qualquer lugar a smart tag: \"[media:Martins]\". O Media Downloader vai criar uma lista de todos os arquivos no diret\u00f3rio \"musica/Martins\". Na verdade, \u00e9 tudo bem simples. ;-)\n\n= Spanish: Preguntas Frecuentes =\n= \u00bfC\u00f3mo debo configurar? \u00bfD\u00f3nde puedo tirar mis archivos MP3? \u00bfC\u00f3mo puedo usar esta cosa? \u00bfCu\u00e1l es el smart tag sintaxis? =\n\nUn ejemplo puede ayudar... Digamos que usted tiene una carpeta llamada \"musica\" en su carpeta ra\u00edz, y tiene algunas subcarpetas, como: \"Beethoven\", \"Mozart\", \"Bach\" y \"Haendel\". \n\nEn primer lugar, deber\u00e1 configurar Media Downloader tecleando \"cl\u00e1sica\" en la \"MP3 Carpeta\" sobre el terreno, sobre los par\u00e1metros p\u00e1gina (y luego hacer clic en \"Actualizaci\u00f3n Opciones\", de seguro).\n\nEse hecho, puede editar un puesto hablando sobre Johann Sebastian Bach y insertar en cualquier lugar en el la smart tag \"[media:Bach]\". Media Downloader crear\u00e1 una lista de todos los archivos del \"musica/Bach\" directorio. Este es realmente muy simple. ;-)\n"], "filenames": ["getfile.php", "mediadownloader.php", "readme.txt"], "buggy_code_start_loc": [20, 6, 6], "buggy_code_end_loc": [21, 7, 7], "fixing_code_start_loc": [20, 6, 6], "fixing_code_end_loc": [21, 7, 7], "type": "CWE-79", "message": "A vulnerability was found in Media Downloader Plugin 0.1.992. It has been declared as problematic. This vulnerability affects the function dl_file_resumable of the file getfile.php. The manipulation of the argument file leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 0.1.993 is able to address this issue. The name of the patch is 77beb720c682b9300035ab5f96eee225181d8a92. It is recommended to upgrade the affected component. VDB-222262 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2014-125090", "sourceIdentifier": "cna@vuldb.com", "published": "2023-03-04T20:15:09.977", "lastModified": "2023-03-09T20:51:45.237", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in Media Downloader Plugin 0.1.992. It has been declared as problematic. This vulnerability affects the function dl_file_resumable of the file getfile.php. The manipulation of the argument file leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 0.1.993 is able to address this issue. The name of the patch is 77beb720c682b9300035ab5f96eee225181d8a92. It is recommended to upgrade the affected component. VDB-222262 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:media_downloader_project:media_downloader:0.1.992:*:*:*:*:wordpress:*:*", "matchCriteriaId": "25F8EE3B-BD56-4893-9249-D9BDF7FDA552"}]}]}], "references": [{"url": "https://github.com/wp-plugins/media-downloader/commit/77beb720c682b9300035ab5f96eee225181d8a92", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://vuldb.com/?ctiid.222262", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory", "VDB Entry"]}, {"url": "https://vuldb.com/?id.222262", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/wp-plugins/media-downloader/commit/77beb720c682b9300035ab5f96eee225181d8a92"}}