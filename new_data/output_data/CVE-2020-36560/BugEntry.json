{"buggy_code": ["package unzip\n\nimport (\n\t\"archive/zip\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"io\"\n\t\"fmt\"\n)\n\ntype Unzip struct {\n\tSrc string\n\tDest string\n}\n\nfunc New(src string, dest string) Unzip {\n\treturn Unzip{src, dest}\n}\n\nfunc (uz Unzip) Extract() error {\n\n\tfmt.Println(\"Extraction of \" + uz.Src + \" started!\")\n\n\tr, err := zip.OpenReader(uz.Src)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer func() {\n\t\tif err := r.Close(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\tos.MkdirAll(uz.Dest, 0755)\n\n\t// Closure to address file descriptors issue with all the deferred .Close() methods\n\textractAndWriteFile := func(f *zip.File) error {\n\t\trc, err := f.Open()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer func() {\n\t\t\tif err := rc.Close(); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}()\n\n\t\tpath := filepath.Join(uz.Dest, f.Name)\n\n\t\tif f.FileInfo().IsDir() {\n\t\t\tos.MkdirAll(path, f.Mode())\n\t\t} else {\n\t\t\tos.MkdirAll(filepath.Dir(path), f.Mode())\n\t\t\tf, err := os.OpenFile(path, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, f.Mode())\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tdefer func() {\n\t\t\t\tif err := f.Close(); err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\t\t\t}()\n\n\t\t\t_, err = io.Copy(f, rc)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t}\n\n\tfor _, f := range r.File {\n\t\terr := extractAndWriteFile(f)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Println(\"Extracting file: \" + f.Name)\n\t}\n\n\tfmt.Println(\"Extraction of \" + uz.Src + \" finished!\")\n\n\treturn nil\n}"], "fixing_code": ["package unzip\n\nimport (\n\t\"archive/zip\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"io\"\n\t\"fmt\"\n\t\"strings\"\n)\n\ntype Unzip struct {\n\tSrc string\n\tDest string\n}\n\nfunc New(src string, dest string) Unzip {\n\treturn Unzip{src, dest}\n}\n\nfunc (uz Unzip) Extract() error {\n\n\tfmt.Println(\"Extraction of \" + uz.Src + \" started!\")\n\n\tr, err := zip.OpenReader(uz.Src)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer func() {\n\t\tif err := r.Close(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\tos.MkdirAll(uz.Dest, 0755)\n\n\t// Closure to address file descriptors issue with all the deferred .Close() methods\n\textractAndWriteFile := func(f *zip.File) error {\n\t\trc, err := f.Open()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer func() {\n\t\t\tif err := rc.Close(); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}()\n\n\t\tpath := filepath.Join(uz.Dest, f.Name)\n\t\tif !strings.HasPrefix(path, filepath.Clean(uz.Dest)+string(os.PathSeparator)) {\n            return fmt.Errorf(\"%s: Illegal file path\", path)\n        }\n\n\t\tif f.FileInfo().IsDir() {\n\t\t\tos.MkdirAll(path, f.Mode())\n\t\t} else {\n\t\t\tos.MkdirAll(filepath.Dir(path), f.Mode())\n\t\t\tf, err := os.OpenFile(path, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, f.Mode())\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tdefer func() {\n\t\t\t\tif err := f.Close(); err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\t\t\t}()\n\n\t\t\t_, err = io.Copy(f, rc)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t}\n\n\tfor _, f := range r.File {\n\t\terr := extractAndWriteFile(f)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Println(\"Extracting file: \" + f.Name)\n\t}\n\n\tfmt.Println(\"Extraction of \" + uz.Src + \" finished!\")\n\n\treturn nil\n}"], "filenames": ["unzip.go"], "buggy_code_start_loc": [8], "buggy_code_end_loc": [48], "fixing_code_start_loc": [9], "fixing_code_end_loc": [53], "type": "CWE-22", "message": "Due to improper path sanitization, archives containing relative file paths can cause files to be written (or overwritten) outside of the target directory.", "other": {"cve": {"id": "CVE-2020-36560", "sourceIdentifier": "security@golang.org", "published": "2022-12-27T22:15:11.573", "lastModified": "2023-06-08T21:15:15.467", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Due to improper path sanitization, archives containing relative file paths can cause files to be written (or overwritten) outside of the target directory."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:go-unzip_project:go-unzip:*:*:*:*:*:go:*:*", "versionEndExcluding": "1.0.0", "matchCriteriaId": "29B0E207-7890-44EB-96FB-03D80AE070B3"}]}]}], "references": [{"url": "https://github.com/artdarek/go-unzip/commit/4975cbe0a719dc50b12da8585f1f207c82f7dfe0", "source": "security@golang.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/artdarek/go-unzip/pull/2", "source": "security@golang.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://pkg.go.dev/vuln/GO-2020-0034", "source": "security@golang.org", "tags": ["Third Party Advisory"]}, {"url": "https://snyk.io/research/zip-slip-vulnerability", "source": "security@golang.org", "tags": ["Technical Description", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/artdarek/go-unzip/commit/4975cbe0a719dc50b12da8585f1f207c82f7dfe0"}}